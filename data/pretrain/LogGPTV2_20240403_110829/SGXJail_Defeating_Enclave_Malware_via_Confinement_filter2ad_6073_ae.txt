executing arbitrary syscalls. Further research on designing
and validating ECALL/OCALL interfaces is needed to avoid
API-level attacks via too permissive OCALLs or confused
deputy [22] and Iago attacks [11]. In general, one has to
consider enclave-to-host communication not as asymmetric
(cf. the kernel’s syscall interface) but as part of a mutually
distrusted API where both communication parties distrust
each other. Mutual distrust is an integral part of designing se-
cure web APIs. Since enclave malware raises similar threats
as web applications, we also see some overlap in defense
strategies [43]. In special, input validation or sanitization [43,
Section V5] can help prevent Iago-style attacks while veri-
ﬁcation of the logical execution ﬂow [43, Section V11] can
prevent confused deputy attacks.
Closing Side Channels.
Several side-channel attacks
mounted against benign SGX enclaves have been shown [7,
19, 34, 41, 59, 63]. Moreover, malicious enclaves themselves
can mount side-channel attacks [21, 53, 54]. Although not
the primary focus of this work, SGXJail prevents a variety of
side-channel attacks that rely on accessing host application
memory, e.g., Flush+Reload on shared host libraries used by
the host application from within enclaves, Prime+Probe using
host application arrays [54], Rowhammer attacks from within
enclaves [21] as well as TSX-based address probing [53].
8 Conclusion
While designed to increase the security of a computing sys-
tem, secure enclave technology such as Intel SGX might also
be misused for shielding malware inside enclaves. However,
research on potential enclave malware is still in its beginnings,
and practical defense mechanisms are virtually non-existent.
In this work, we identiﬁed the root cause of enclave mal-
ware as an insufﬁcient enclave-to-host isolation and proposed
(H)SGXJail as a generic defense against a wide range of en-
clave malware threats. (H)SGXJail enforces mutual isolation
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 363between host applications and enclaves, thus protecting appli-
cations from potentially misbehaving or malicious third-party
enclaves. SGXJail is an efﬁcient and transparent software
defense, running third-party enclaves in an isolated sandbox.
Our proof-of-concept implementation shows zero overhead
for pure enclave computation and less than 3% for realistic
workloads. SGXJail is tightly integrated within the SGX SDK
and can be used out of the box. Furthermore, we propose
SGXJail directly in hardware. Our HSGXJail mechanism pro-
vides enclave conﬁnement by means of Intel MPK with slim
extensions to the SGX speciﬁcation at virtually no cost. We
believe HSGXJail should be immediately rolled out via a mi-
crocode update to SGX-enabled CPUs to proactively enable
our SGX malware defense. However, support for MPK is still
rare. Although some server CPUs support MPK [64], it is
unclear when x86-based desktop CPUs catch up.
from defending
enclave malware,
(H)SGXJail opens up new use cases for Intel SGX
and similar isolation technologies. For example, we envision
that (H)SGXJail can be used as lightweight and secure
sandboxing mechanism for browser site isolation or plugin
management, where third-party code has proven to be both,
potentially malicious and potentially security critical.
Apart
against
[5] Tyler K. Bletsch, Xuxian Jiang, Vincent W. Freeh, and
Zhenkai Liang. Jump-oriented programming: a new
class of code-reuse attack. In AsiaCCS, 2011.
[6] Erik Bosman and Herbert Bos. Framing signals - A
return to portable shellcode. In S&P, 2014.
[7] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko,
Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza
Sadeghi. Software Grand Exposure: SGX Cache At-
tacks Are Practical. In WOOT, 2017.
[8] Nicholas Carlini, Antonio Barresi, Mathias Payer, David
Wagner, and Thomas R Gross. Control-ﬂow bend-
ing: On the effectiveness of control-ﬂow integrity. In
USENIX Security, 2015.
[9] Nicholas Carlini and David A. Wagner. ROP is still
In USENIX
dangerous: Breaking modern defenses.
Security, 2014.
[10] Stephen
Checkoway, Lucas
Davi, Alexandra
Dmitrienko, Ahmad-Reza Sadeghi, Hovav Shacham,
and Marcel Winandy. Return-oriented programming
without returns. In CCS, 2010.
Acknowledgements
This project has received funding from the European Re-
search Council (ERC) under the European Union’s Horizon
2020 research and innovation programme (grant agreement
No 681402). This work has been supported by the Austrian
Research Promotion Agency (FFG) via the K-project DeSS-
net, which is funded in the context of COMET – Competence
Centers for Excellent Technologies by BMVIT, BMWFW,
Styria and Carinthia. Additional funding was provided by a
generous gift from Intel. Any opinions, ﬁndings, and conclu-
sions or recommendations expressed in this paper are those
of the authors and do not necessarily reﬂect the views of the
funding parties.
References
[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay
Ligatti. Control-ﬂow integrity. In CCS, 2005.
[2] Erick Bauman and Zhiqiang Lin. A case for protecting
computer games with SGX. In Workshop on System
Software for Trusted Execution, 2016.
[3] Andrew Baumann, Marcus Peinado, and Galen Hunt.
Shielding applications from an untrusted cloud with
haven. ACM Transactions on Computer Systems, 2015.
[4] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David
In S&P,
Mazières, and Dan Boneh. Hacking blind.
2014.
[11] Stephen Checkoway and Hovav Shacham. Iago attacks:
why the system call API is a bad untrusted RPC interface.
In ASPLOS, 2013.
[12] Tzi-cker Chiueh and Fu-Hau Hsu. Rad: A compile-time
In International
solution to buffer overﬂow attacks.
Conference on Distributed Computing Systems, 2001.
[13] Victor Costan and Srinivas Devadas.
plained. 2016.
Intel SGX ex-
[14] Crispan Cowan, Calton Pu, Dave Maier, Jonathan
Walpole, Peat Bakke, Steve Beattie, Aaron Grier, Perry
Wagle, Qian Zhang, and Heather Hinton. Stackguard:
Automatic adaptive detection and prevention of buffer-
overﬂow attacks. In USENIX Security, 1998.
[15] Stephen Crane, Christopher Liebchen, Andrei Homescu,
Lucas Davi, Per Larsen, Ahmad-Reza Sadeghi, Stefan
Brunthaler, and Michael Franz. Readactor: Practical
code randomization resilient to memory disclosure. In
S&P, 2015.
[16] Shaun Davenport and Richard Ford. SGX: the good, the
bad and the downright ugly, January 2014. URL: https:
//www.virusbulletin.com/virusbulletin/2014/
01/sgx-good-bad-and-downright-ugly.
[17] Anders T Gjerdrum, Robert Pettersen, Håvard D Jo-
hansen, and Dag Johansen. Performance of trusted com-
puting in cloud infrastructures with intel sgx. In Inter-
national Conference on Cloud Computing and Services
Science, 2017.
364          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association[18] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and
Georgios Portokalidis. Out of control: Overcoming
control-ﬂow integrity. In S&P, 2014.
[19] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel,
and Tilo Müller. Cache Attacks on Intel SGX. In Eu-
roSec, 2017.
[20] Daniel Gruss, Dave Hansen, and Brendan Gregg. Kernel
isolation: From an academic idea to an efﬁcient patch
for every computer. USENIX ;login, 2018.
[21] Daniel Gruss, Moritz Lipp, Michael Schwarz, Daniel
Genkin, Jonas Jufﬁnger, Sioli O’Connell, Wolfgang
Schoechl, and Yuval Yarom. Another Flip in the Wall
of Rowhammer Defenses. In S&P, 2018.
[22] Norman Hardy. The confused deputy (or why capa-
bilities might have been invented). Operating Systems
Review, 22(4):36–38, 1988.
[23] Tyler Hunt, Zhiting Zhu, Yuanzhong Xu, Simon Peter,
and Emmett Witchel. Ryoan: A distributed sandbox for
untrusted computation on secret data. In Usenix OSDI,
2016.
[24] Intel.
Intel Software Guard Extensions SSL. URL:
https://github.com/intel/intel-sgx-ssl.
[25] Intel. Intel Software Guard Extensions SDK for Linux
OS Developer Reference, May 2016. Rev 1.5.
[26] Intel.
Intel R(cid:13) 64 and IA-32 Architectures Software
Developer(cid:48)s Manual, Volume 3 (3A, 3B & 3C): System
Programming Guide. (325384), 2016.
[27] Intel. Control-ﬂow Enforcement Technology Preview,
June 2017. Revision 2.0.
[28] Kyriakos K. Ispoglou, Bader AlBassam, Trent Jaeger,
and Mathias Payer. Block oriented programming: Au-
tomating data-only attacks. In CCS, 2018.
[29] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin,
Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad
Lai, and Onur Mutlu. Flipping bits in memory with-
out accessing them: An experimental study of DRAM
disturbance errors. In ISCA, 2014.
[30] Klaudia Krawiecka, Arseny Kurnikov, Andrew Paverd,
Mohammad Mannan, and N Asokan. Protecting web
passwords from rogue servers using trusted execution
environments. arXiv:1709.01261, 2017.
[31] Volodymyr Kuznetsov, László Szekeres, Mathias Payer,
George Candea, R Sekar, and Dawn Song. Code-Pointer
Integrity. In OSDI, 2014.
[32] Bingchen Lan, Yan Li, Hao Sun, Chao Su, Yao Liu,
and Qingkai Zeng. Loop-oriented programming: a new
code reuse attack to bypass modern defenses. In IEEE
Trustcom/BigDataSE/ISPA, 2015.
[33] Jaehyuk Lee, Jinsoo Jang, Yeongjin Jang, Nohyun
Kwak, Yeseul Choi, Changho Choi, Taesoo Kim, Mar-
cus Peinado, and Brent Byunghoon Kang. Hacking in
darkness: Return-oriented programming against secure
enclaves. In USENIX Security, 2017.
[34] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim,
Hyesoon Kim, and Marcus Peinado.
Inferring ﬁne-
grained control ﬂow inside SGX enclaves with branch
shadowing. In USENIX Security Symposium, 2017.
[35] Xueping Liang, Sachin Shetty, Deepak Tosh, Charles
Kamhoua, Kevin Kwiat, and Laurent Njilla. Provchain:
A blockchain-based data provenance architecture in
cloud environment with enhanced privacy and availabil-
ity. In International Symposium on Cluster, Cloud and
Grid Computing, 2017.
[36] Linux kernel.
SECure COMPuting with ﬁl-
ters, 2017. URL: https://www.kernel.org/doc/
Documentation/prctl/seccomp_filter.txt.
[37] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas
Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan
Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom,
and Mike Hamburg. Meltdown: Reading Kernel Mem-
ory from User Space. In USENIX Security Symposium,
2018.
[38] Marion Marschalek. The Wolf In SGX Clothing. Blue-
hat IL, January 2018.
[39] Ali José Mashtizadeh, Andrea Bittau, Dan Boneh, and
David Mazières. CCFI: cryptographically enforced con-
trol ﬂow integrity. In CCS, 2015.
[40] Dirk Merkel. Docker: lightweight linux containers for
consistent development and deployment. Linux Journal,
2014.
[41] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisen-
barth. Cachezoom: How sgx ampliﬁes the power of
cache attacks. In CHES, 2017.
[42] Nicolas Bacca. Soft launching ledger SGX enclave,
2017. URL: https://www.ledger.fr/2017/05/22/
soft-launching-ledger-sgx-enclave/.
[43] OWASP. OWASP application security veriﬁcation stan-
dard 4.0, 2019.
[44] Vasilis Pappas, Michalis Polychronakis, and Angelos D.
Keromytis. Smashing the gadgets: Hindering return-
oriented programming using in-place code randomiza-
tion. In S&P, 2012.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 365[45] PaX Team. Address space layout randomization
(ASLR), 2003. URL: http://pax.grsecurity.net/
docs/aslr.txt.
[46] PaX Team. Rap: Rip rop. Hackers to Hackers Confer-
ence, 2015.
[47] Charlie Reis.
Mitigating spectre with site
https:
URL:
in
chrome, 2018.
isolation
//security.googleblog.com/2018/07/
mitigating-spectre-with-site-isolation.
html.
[48] Joanna Rutkowska. Thoughts on Intel’s upcoming Soft-
ware Guard Extensions (Part 2), 2013. URL: http:
//theinvisiblethings.blogspot.com/2013/09/.
[49] Jerome H. Saltzer and Michael D. Schroeder. The pro-
tection of information in computer systems. Proceed-
ings of the IEEE, 63(9):1278–1308, 1975.
[50] Felix Schuster, Manuel Costa, Cédric Fournet, Christos
Gkantsidis, Marcus Peinado, Gloria Mainar-Ruiz, and
Mark Russinovich. VC3: trustworthy data analytics in
the cloud using SGX. In S&P, 2015.
[51] Felix Schuster, Thomas Tendyck, Christopher Liebchen,
Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz.
Counterfeit object-oriented programming: On the difﬁ-
culty of preventing code reuse attacks in C++ applica-
tions. In S&P, 2015.
[52] Michael Schwarz, Daniel Gruss, Moritz Lipp, Clémen-
tine Maurice, Thomas Schuster, Anders Fogh, and Ste-
fan Mangard. Automated Detection, Exploitation, and
Elimination of Double-Fetch Bugs using Modern CPU
Features. AsiaCCS, 2018.
Extension: Using SGX to Conceal Cache Attacks. In
DIMVA, 2017.
[55] Hovav Shacham. The geometry of innocent ﬂesh on
the bone: Return-into-libc without function calls (on the
x86). In CCS, 2007.
[56] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn
Song. SoK: Eternal War in Memory. In S&P, 2013.
[57] Adrian Tang, Simha Sethumadhavan, and Salvatore
Stolfo. Heisenbyte: Thwarting memory disclosure at-
tacks using destructive code reads. In CCS, 2015.
[58] Pengfei Wang, Kai Lu, Gen Li, and Xu Zhou. A survey
of the double-fetch vulnerabilities. Concurrency and
Computation: Practice and Experience, 30(6), 2018.
[59] Wenhao Wang, Guoxing Chen, Xiaorui Pan, Yinqian
Zhang, XiaoFeng Wang, Vincent Bindschaedler, Haixu
Tang, and Carl A Gunter. Leaky cauldron on the dark
land: Understanding memory side-channel hazards in
SGX. In CCS, 2017.
[60] Nico Weichbrodt, Anil Kurmus, Peter Pietzuch, and
Rüdiger Kapitza. Asyncshock: Exploiting synchronisa-
tion bugs in Intel SGX enclaves. In ESORICS, 2016.
[61] Oﬁr Weisse, Valeria Bertacco, and Todd M. Austin. Re-
gaining lost cycles with hotcalls: A fast interface for
SGX secure enclaves. In ISCA, 2017.
[62] Jan Werner, George Baltas, Rob Dallara, Nathan Ot-
terness, Kevin Z Snow, Fabian Monrose, and Michalis
Polychronakis. No-execute-after-read: Preventing code
disclosure in commodity software. In AsiaCCS, 2016.
[53] Michael Schwarz, Samuel Weiser, and Daniel Gruss.
Practical enclave malware with Intel SGX. In DIMVA,
2019.
[63] Y. Xu, W. Cui, and M. Peinado. Controlled-Channel
Attacks: Deterministic Side Channels for Untrusted Op-
erating Systems. In S&P, May 2015.
[54] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clé-
mentine Maurice, and Stefan Mangard. Malware Guard
[64] Mingwei Zhang. XOM-Switch, 2019. URL: https:
//github.com/intel/xom-switch.
366          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association