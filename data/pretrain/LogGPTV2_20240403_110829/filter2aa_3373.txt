Java安全之Cas反序列化漏洞分析
0x00 前言
某次项目中遇到Cas，以前没接触过，借此机会学习一波。
0x01 Cas 简介
CAS 是 Yale 大学发起的一个开源项目，旨在为 Web 应用系统提供一种可靠的单点登录方法，CAS 在 
2004 年 12 月正式成为 JA-SIG 的一个项目，开源的企业级单点登录解决方案。
0x02 远程调试环境搭建
下载地址,将环境war包下载，部署到tomcat即可
tomcat目录bin文件下， startup_debug.bat
call %EXECUTABLE%" start %CMD_LINE_ARGS%
改为
IDEA中设置Remote远程调试5005即可完成。
0x03 漏洞分析
漏洞详情
4.1.7版本之前存在一处默认密钥的问题，利用这个默认密钥我们可以构造恶意信息触发目标反序列化漏
洞，进而执行任意命令。
影响版本 Apereo CAS <= 4.1.7
感觉上和Shiro的 550有点类似
解析流程分析
看web.xml得知，该项目基于Spring MVC开发。
上图请求路径是 /login 的这里来直接找login的处理方法进行跟踪。
set JPDA_TRANSPORT=dt_socket
set JPDA_ADDRESS=5005
set JPDA_SUSPEND=n
call "%EXECUTABLE%" jpda start %CMD_LINE_ARGS%
从web.xml中可见，交给了 DispatcherServlet 去处理。
这时候可以查看springmvc的配置文件 cas-servlet.xml
注意 loginHandlerAdapter 这个配置的bean，其中的属性有 supportedFlowId 的值为"login"，同时
属性flowExecutor-ref的引用值为 loginFlowExecutor 。
再看 loginFlowExecutor 这个bean中所配置的登录流程属性引用值就是我们webflow上下文配置中的
loginFlowRegistry 这个属性。
因此我们来看一下 loginHandlerAdapter 这个bean对应的类为
org.jasig.cas.web.flow.SelectiveFlowHandlerAdapter 所起的作用，是如何来处理登录动作的。
先来看一下这个类的父类 org.springframework.webflow.mvc.servlet.FlowHandlerAdapter ，这
个是Springmvc中的一个类。
FlowHandlerAdapter 实现接口 HandlerAdapter ，而 SelectiveFlowHandlerAdapter 继承自
FlowHandlerAdapter 。
SelectiveFlowHandlerAdapter 类在 cas-server-webapp-actions 模块下的
org.jasig.cas.web.flow 包下。
因此Spring的DispatcherServlet找到要处理的 handleAdapter 是 SelectiveFlowHandlerAdapte 。并
且根据地址http://localhost:8080/cas/login?service=XXX，得到handler的flowId="login"，即流程：
loginFlowRegistry 。
然后进入下面的handle方法，开始调取流程：
当有登录请求时，spring则会调用该 org.jasig.cas.web.flow.SelectiveFlowHandlerAdapter
跟进 this.flowUrlHandler.getFlowExecutionKey(request) 可见，该方法会获取请求中的
execution 参数。
而后会进行调用 this.executionRepository.parseFlowExecutionKey(flowExecutionKey); 获取到
key。
跟进查看
可见从 execution 参数，后分割UUID和 _ 后面部分，而后面部分进行base64解密。对返回id和data进
行赋值，然后返回 ClientFlowExecutionKey 对象
下面调用 this.executionRepository.getFlowExecution(key); ，将刚刚获取到的
ClientFlowExecutionKey 对象，即key变量传递。跟进。
这地方进行了数据的反序列化操作。先来看到构造方法，使用 AES/CBC/PKCS7 加密方式，并且密钥使用
默认的密钥进行加密。
而在解密后还会对数据进行解压缩 GZIPInputStream 处理后进行反序列化。
漏洞复现与利用
根据以上数据解析分析，我们只需要将cas中加密部分扣出来，然后进行 GZIPOutputStream 处理，而
后将他进行base64加密，将处理后的gadgets加入到 execution 参数里面即可，当然还需要构造一下前
面UUID的值。
从github找到现成工具。
Reference
https://www.anquanke.com/post/id/198842
0x04 结尾
除此外，还有一些值得探讨的地方例如，回显方式的构造。