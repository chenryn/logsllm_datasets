title:BootStomp: On the Security of Bootloaders in Mobile Devices
author:Nilo Redini and
Aravind Machiry and
Dipanjan Das and
Yanick Fratantonio and
Antonio Bianchi and
Eric Gustafson and
Yan Shoshitaishvili and
Christopher Kruegel and
Giovanni Vigna
BootStomp: On the Security of Bootloaders  
in Mobile Devices
Nilo Redini, Aravind Machiry, Dipanjan Das, Yanick Fratantonio, Antonio Bianchi,  
Eric Gustafson, Yan Shoshitaishvili, Christopher Kruegel,  
and Giovanni Vigna, UC Santa Barbara
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/redini
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXBootStomp: On the Security of Bootloaders in Mobile Devices
Nilo Redini, Aravind Machiry, Dipanjan Das, Yanick Fratantonio, Antonio Bianchi,
{nredini, machiry, dipanjan, yanick, antoniob, edg, yans, chris, vigna}@cs.ucsb.edu
Eric Gustafson, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna
University of California, Santa Barbara
Abstract
Modern mobile bootloaders play an important role in
both the function and the security of the device. They
help ensure the Chain of Trust (CoT), where each stage
of the boot process veriﬁes the integrity and origin of
the following stage before executing it. This process,
in theory, should be immune even to attackers gaining
full control over the operating system, and should pre-
vent persistent compromise of a device’s CoT. However,
not only do these bootloaders necessarily need to take
untrusted input from an attacker in control of the OS in
the process of performing their function, but also many
of their veriﬁcation steps can be disabled (“unlocked”) to
allow for development and user customization. Apply-
ing traditional analyses on bootloaders is problematic, as
hardware dependencies hinder dynamic analysis, and the
size, complexity, and opacity of the code involved pre-
clude the usage of many previous techniques.
In this paper, we explore vulnerabilities in both the
design and implementation of mobile bootloaders. We
examine bootloaders from four popular manufacturers,
and discuss the standards and design principles that they
strive to achieve. We then propose BOOTSTOMP, a
multi-tag taint analysis resulting from a novel combina-
tion of static analyses and dynamic symbolic execution,
designed to locate problematic areas where input from an
attacker in control of the OS can compromise the boot-
loader’s execution, or its security features. Using our
tool, we ﬁnd six previously-unknown vulnerabilities (of
which ﬁve have been conﬁrmed by the respective ven-
dors), as well as rediscover one that had been previously-
reported. Some of these vulnerabilities would allow an
attacker to execute arbitrary code as part of the boot-
loader (thus compromising the entire chain of trust), or
to perform permanent denial-of-service attacks. Our tool
also identiﬁed two bootloader vulnerabilities that can be
leveraged by an attacker with root privileges on the OS
to unlock the device and break the CoT. We conclude
by proposing simple mitigation steps that can be im-
plemented by manufacturers to safeguard the bootloader
and OS from all of the discovered attacks, using already-
deployed hardware features.
1
Introduction
With the critical importance of the integrity of today’s
mobile and embedded devices, vendors have imple-
mented a string of inter-dependent mechanisms aimed at
removing the possibility of persistent compromise from
the device. Known as “Trusted Boot” [6] or “Veriﬁed
Boot,” [8], these mechanisms rely on the idea of a Chain
of Trust (CoT) to validate each component the system
loads as it begins executing code.
Ideally, this proce-
dure can verify cryptographically that each stage, from
a Hardware Root of Trust through the device’s ﬁle sys-
tem, is both unmodiﬁed and authorized by the hardware’s
manufacturer. Any unveriﬁed modiﬁcation of the various
bootloader components, system kernel, or ﬁle system im-
age should result in the device being rendered unusable
until a valid one can be restored.
Ideally, this is an uncircumventable, rigid process, re-
moving any possibility of compromise, even when at-
tackers can achieve arbitrary code execution on the high-
level operating system (e.g., Android or iOS). However,
hardware vendors are given a great amount of discretion
when implementing these bootloaders, leading to varia-
tions in both the security properties they enforce and the
size of the attack surface available to an adversary.
Unfortunately, analyzing the code of bootloaders to
locate vulnerabilities represents a worst-case scenario
for security analysts. Bootloaders are typically closed-
source [21], proprietary programs, and tend to lack
typical metadata (such as program headers or debug-
ging symbols) found in normal programs. By their
very nature, bootloaders are tightly coupled with hard-
ware, making dynamic analysis outside of the often-
uncooperative target platform impractical. Manual
USENIX Association
26th USENIX Security Symposium    781
reverse-engineering is also very complicated, as boot-
loaders typically do not use system calls or well-known
libraries, leaving few semantic hints for an analyst to fol-
low.
In this paper, we ﬁrst explore the security properties,
implementations, and weaknesses of today’s mobile de-
vice bootloaders. We begin with a discussion of the
proposed standards and guidelines a secure bootloader
should possess, and what, instead, is left to the discretion
of manufacturers. We then showcase four real-world An-
droid bootloader implementations on the market today.
Then, we present a static analysis approach, imple-
mented in a tool called BOOTSTOMP, which uses a novel
combination of static analysis techniques and under-
constrained symbolic execution to build a multi-tag taint
analysis capable of identifying bootloader vulnerabili-
ties. Our tool highlighted 36 potentially dangerous paths,
and, for 38.3% of them, we found actual vulnerabilities.
In particular, we were able to identify six previously-
unknown vulnerabilities (ﬁve of them already conﬁrmed
by the vendors), as well as rediscover one that had been
previously-reported (CVE-2014-9798). Some of these
vulnerabilities would allow an adversary with root privi-
leges on the Android OS to execute arbitrary code as part
of the bootloader. This compromises the entire chain of
trust, enabling malicious capabilities such as access to
the code and storage normally restricted to TrustZone,
and to perform permanent denial-of-service attacks (i.e.,
device bricking). Our tool also identiﬁed two bootload-
ers that can be unlocked by an attacker with root privi-
leges on the OS.
We ﬁnally propose a modiﬁcation to existing, vulner-
able bootloaders, which can quickly and easily protect
them from any similar vulnerabilities due to compromise
of the high-level OS. These changes leverage hardware
features already present in mobile devices today and,
when combined with recommendations from Google [8]
and ARM [6], enforce the least-privilege principle, dra-
matically constraining the attack surface of bootloaders
and allowing for easier veriﬁcation of the few remaining
attackable components.
abilities (which could lead to persistent compromise
of the device) as well as two unlock-bypass vulner-
abilities.
• We propose mitigations against such attacks, which
are trivial to retroﬁt into existing implementations.
In the spirit of open science, we make our analysis tool
publicly available to the community1.
2 Bootloaders in Theory
Today’s mobile devices incorporate a number of secu-
rity features aimed at safeguarding the conﬁdentiality,
integrity, and availability of users’ devices and data. In
this section, we will discuss Trusted Execution Environ-
ments, which allow for isolated execution of privileged
code, and Trusted Boot, aimed at ensuring the integrity
and provenance of code, both inside and outside of TEEs.
2.1 TEEs and TrustZone
A Trusted Execution Environment (TEE) is the notion
of separating the execution of security-critical (“trusted”)
code from that of the traditional operating system (“un-
trusted”) code. Ideally, this isolation is enforced using
hardware, such that even in the event the un-trusted OS
is completely compromised, the data and code in the TEE
remain unaffected.
Modern ARM processors, found in almost all mobile
phones sold today, implement TrustZone[1], which pro-
vides a TEE with hardware isolation enforced by the ar-
chitecture. When booted, the primary CPU creates two
“worlds”–known as the “secure” world and “non-secure”
world, loads the un-trusted OS (such as Android) into the
non-secure world, and a vendor-speciﬁc trusted OS into
the secure world. The trusted OS provides various cryp-
tographic services, guards access to privileged hardware,
and, in recent implementations, can be used to verify the
integrity of the un-trusted OS while it is running. The un-
trusted kernel accesses these commands by issuing the
Secure Monitor Call (SMC) instruction, which both trig-
gers the world-switch operation, and submits a command
the Trusted OS and its services should execute.
ARM Exception Levels (EL). In addition to being in
either the secure or non-secure world, ARM processors
support “Exception Levels,” which deﬁne the amount of
privilege to various registers and hardware features the
executing code has. The 64-bit ARM architecture deﬁnes
four such levels, EL0-EL3. EL0 and EL1 map directly to
the traditional notion of “user-mode” and “kernel mode,”
and are used for running unprivileged user applications
1https://github.com/ucsb-seclab/bootstomp
In summary, our contributions are as follows:
• We perform a study of popular bootloaders present
on mobile devices, and compare the security proper-
ties they implement with those suggested by ARM
and Google.
• We develop a novel combination of program anal-
ysis techniques, including static analysis as well
as symbolic execution, to detect vulnerabilities in
bootloader implementations that can be triggered
from the high-level OS.
• We implement our technique in a tool, called BOOT-
STOMP, to evaluate modern, real-world bootload-
ers, and ﬁnd six previously-unknown critical vulner-
782    26th USENIX Security Symposium
USENIX Association
and standard OS kernels respectively. EL2 is used for im-
plementing hypervisors and virtualization, and EL3 im-
plements the Secure Monitor, the most privileged code
used to facilitate the world-switch between secure and
non-secure. During the boot process described below,
the initial stages, until the non-secure world bootloader
is created, runs at EL3.
2.2 The Trusted Boot Process
In a traditional PC environment, the bootloader’s job is
to facilitate the location and loading of code, across var-
ious media and in various formats, by any means neces-
sary. However, in modern devices, particularly mobile
devices, this focus has shifted from merely loading code
to a primary role in the security and integrity of the de-
vice. To help limit the impact of malicious code, its job
is to verify both the integrity and provenance of the soft-
ware that it directly executes.
As with the traditional PC boot process, where a BIOS
loaded from a ROM chip would load a secondary boot-
loader from the hard disk, mobile bootloaders also con-
tain a chain of such loaders. Each one must, in turn,
verify the integrity of the next one, creating a Chain of
Trust (CoT).
On ARM-based systems, this secured boot process
is known as Trusted Boot and is detailed in the ARM
Trusted Board Boot Requirements (TBBR) speciﬁcation.
While this document is only available to ARM’s hard-
ware partners, an open-source reference implementation
that conforms to the standard is available [6].
While this standard, and even the reference implemen-
tation, does leave signiﬁcant room for platform-speciﬁc
operations, such as initialization of hardware peripher-
als, implementations tend to follow the same basic struc-
ture. One important aspect is the Root of Trust (RoT),
which constitutes the assumptions about secure code and
data that the device makes. In ARM, this is deﬁned to
be 1) the presence of a “burned-in,” tamper-proof public-
key from the hardware manufacturer that is used to verify
subsequent stages, and 2) the very ﬁrst bootloader stage
being located in read-only storage.
While manufacturers are free to customize the Trusted
Boot process when creating their
implementations,
ARM’s reference implementation serves as an example
of how the process should proceed. The boot process
for the ARM Trusted Firmware occurs in the following
steps, as illustrated in Figure 1.
1. The CPU powers on, and loads the ﬁrst stage boot-
loader from read-only storage.
2. This ﬁrst stage, known as BL1, Primary Boot
Loader (PBL), or BootROM, performs any neces-
sary initialization to locate the next stage from its
storage, loads it into memory, veriﬁes its integrity
using the Root of Trust Public Key (ROTPK), and if
this is successful, executes it. Since it is on space-
restricted read-only media, its functionality is ex-
tremely limited.
3. BL2, also known as the Secondary Boot Loader
(SBL) is responsible for creating the secure and
non-secure worlds and deﬁning the memory per-
missions that enforce this isolation.
It then lo-
cates and loads into memory up to three third-stage
bootloaders, depending on manufacturer’s conﬁg-
uration. These run at each of the EL3, EL2, and
EL1 levels, and are responsible for setting up the
Secure Monitor, a hypervisor (if present), and the
ﬁnal-stage OS bootloader.
4. BL2 then executes BL31, the loader running at EL3,
which is responsible for conﬁguring various hard-
ware services for the trusted and un-trusted OSes,
and establishing the mechanism used to send com-
mands between the two worlds. It then executes the
BL32 loader, if present, which will eventually exe-
cute BL33.
5. BL33 is responsible for locating and verifying the
non-secure OS kernel. Exactly how this is done is
OS-dependent. This loader runs with the same priv-
ilege as the OS itself, at EL1.
Next, we will detail extensions to this process devel-
oped for the Android ecosystem.
2.3 Veriﬁed Boot on Android
ARM’s Trusted Boot standard only speciﬁes stages of the
boot process up to the point at which the OS-speciﬁc boot
loader is executed. For devices running Android, Google
provides a set of guidelines for Veriﬁed Boot [8], which
describes high-level functionality an Android bootloader
should perform.
Unlike the previous stages, the Android bootloader
provides more functionality than just ensuring integrity
and loading code. It also allows for the user or OS to
elect to boot into a special recovery partition, which de-
ploys ﬁrmware updates and performs factory reset oper-
ations. Additionally, modern Android bootloaders also
participate in enabling full-disk encryption and trigger-
ing the initialization of Android-speciﬁc TrustZone ser-
vices.
Ideally, the veriﬁcation of the ﬁnal Android kernel to
be booted would effectively extend the Chain of Trust all
the way from the initial hardware-backed key to the ker-
nel. However, users wishing to use their devices for de-
velopment need to routinely run kernels not signed by the
device manufacturer. Therefore, Google speciﬁes two
classes of bootloader implementations: Class A, which
only run signed code, and Class B, which allow for the
USENIX Association
26th USENIX Security Symposium    783
Figure 1: Overview of the Trusted/Veriﬁed Boot implementation according to the ARM and Google speciﬁcations. Between
parentheses the name of the internal storage partition where the code is located in a typical implementation.
hardware-backed key.
user to selectively break the Chain of Trust and run un-
signed code, in a tamper-evident manner, referred to as
unlocking. Devices will maintain a security state (either
LOCKED or UNLOCKED) and properties of the tran-
sition between the two states must be enforced. With
regard to Class B implementations, Google requires that:
• The bootloader itself must be veriﬁed with a
• If veriﬁcation of the Android kernel with the OEM
key (a key hard-coded by the device’s manufacturer
in the bootloader code) fails for any reason, a warn-