### Circulation and Dissociation
- **Circulation**: In each round, malicious nodes that actually listened disseminate the keys they have seen to all other malicious and Sybil nodes that were supposed to be listening.
- **Dissociation**: Malicious and Sybil nodes randomly drop each other’s keys from their seen lists with a probability \( D \).

### Proximity Graph Construction
- **Edge Creation**: In every round, edges are created from every listener to every broadcaster. An edge is labeled as "successful" if the listener's seen list contains the corresponding broadcaster's key; otherwise, it is labeled as "failed." This process forms the proximity graph.
- **Sybil Detection**: Sybil detection is performed on the proximity graph, which consists of the set of nodes and the set of successful and failed edges.

### Target Application
For our target application, we chose the explosive-detection sensor network from [14]. This led to the natural choice of WiFi Direct as the communication medium, with a radius \( R = 32.5 \) meters. This allows two antipodal nodes—moving in opposite directions at typical walking speeds of \( 1.3 \, \text{m/s} \)—to remain within 200 meters of each other over 45 seconds. The round duration was set to \( \alpha = 2 \) seconds, sufficient for broadcasting and scanning the WiFi Direct band [21], and consistent with the available experimental results [20] of WiFi connection probability (Fig. 4). The Sybilness threshold value remained at \( 5\sigma \), meaning Sybil candidates were nodes whose log-likelihood of incoming edges was roughly within the lowest \( (3.5 \times 10^6)^{-1} \) of least-probable log-likelihood values.

### Simulation Setup
We modeled a street with wide sidewalks, where all nodes are constrained to horizontal movement along them, as shown in Fig. 8. The dimensions are roughly modeled after Market Street in San Francisco.

**Figure 8**: Simulator GUI, showing a run 6 seconds into the communication procedure (large light-green circle). Nodes are color-coded according to their true type (fill color: green for honest, yellow for malicious, red for Sybil) and predicted type (edge color: red for Sybil, green for non-Sybil, grey for non-participant). The lines depict successful (green) and failed (red) edges that were attempted at time=6sec for the misclassified honest node. All distances are to scale (metric).

### Detection Algorithms and Methodology
We perform Sybil detection using the following four algorithms, with the first two being our work (described in Section 5) and the latter two being GSD solutions:
1. Simple Sybil Detection
2. Iterative Sybil Detection
3. SybilPredict
4. SybilRank

For our target application, the most important quality metric for any detection algorithm is the recall rate, which corresponds to the fraction of total Sybils detected. A secondary metric is precision (true positive rate), indicating the amount of honest nodes misclassified as Sybils.

For each data point in all subsequent graphs, we ran 20 scenario simulations, resulting in 20 different sets of node positions and momenta. For each scenario simulation, we ran 20 simulations of proximity graph construction as described in Section 4, with edge successes randomly generated according to the aforementioned WiFi Direct function [20]. The subsequent plots detail the means and standard deviations of these 400 recall and precision values per data point in every plot.

Malicious nodes were completely ignored when calculating precision and recall values, as it is unclear how to classify them. While they are adversarial and detecting them is beneficial, they are also physically real and should not be identified as Sybils.

### Detection: Sybils Only
The first set of simulations examined Sybils exclusively, without any malicious nodes. As a result, Sybils were unable to form any connections with honest nodes. From the perspective of the Simple and Iterative detection algorithms, all Sybil log-likelihood values were extremely low due to the many failed short edges. From the GSD algorithms' perspective, the lack of successful edges between Sybils and honest nodes resulted in obvious Sybil communities. Consequently, all four detection algorithms consistently detected all Sybils with virtually no false negatives.

**Figure 10**: The Simple detector has a significant false positive rate as the honest nodes are made suspicious by nearby Sybils. The Iterative detector sequentially flags and discards the most suspicious nodes, greatly lowering the false positive rate (zero in this simulation).

### Detection: No Evasive Strategies
In the next set of simulations, we introduced malicious nodes but did not enable any evasive strategies. Thus, Sybil–Sybil and Sybil–malicious edges were always established, while connections between physically-real nodes (honest and malicious) were generated according to the probability–distance function as described in Section 5. This resulted in very obvious Sybil clustering.

**Figure 11**: Detection results with no evasive strategy (obvious clustering). Error bars indicate standard deviation.

The high recall averages in the 0.9+ range show that, without an obfuscation strategy, Sybils were still extremely easy to detect despite their slight connectedness to the honest nodes (through the malicious nodes) using any of the four algorithms. The near-zero recall standard deviations for Iterative Detection and Simple Detection demonstrate their incredible consistency, while the recall standard deviations for the two GSD algorithms are much higher in the 0.2 to 0.3 range. These higher standard deviations, stemming from catastrophic misclassification outcomes, highlight the fragility of GSD methods and the comparative robustness of our approach.

The precision figures also demonstrate several interesting characteristics. The average precision of Simple Detection is very low, dipping below 0.4 at higher quantities of nodes, caused by the adverse effect of disconnected Sybils on nearby honest nodes. The Iterative Detection algorithm can rectify this issue, achieving precision values consistently near 1.0 with virtually no standard deviation. By contrast, while the average precision values for the GSD algorithms are also high in the 0.9+ range, they all have significant standard deviations in the 0.2 range, again as a result of occasional catastrophic misclassification.

### Detection: Smart Sybil Obfuscation
In the next set of simulations, we introduced the three obfuscation techniques discussed earlier. For Impersonation, we used one single dedicated malicious listener (per round), with all other malicious listeners broadcasting randomly-chosen Sybil keys instead. For Circulation, the single malicious listener in every round spread all of its seen keys to all malicious and Sybil nodes that were supposed to be listening in that round. For Dissociation, Sybil–Sybil and Sybil–malicious connections were formed according to the WiFi Direct distance–probability function, but the Sybil–Sybil success probability was downscaled using (multiplied by) the parameter \( D \in \{0.5, 0.4, 0.2\} \) to break up the Sybil community.

**Figure 12**: Detection performance results with an evasive strategy consisting of Impersonation, Circulation, and Dissociation (across three Dissociation parameters \( D \in \{0.5, 0.4, 0.2\} \)). Error bars indicate standard deviation.

The Iterative approach still worked effectively, as the amount of roundwise Sybil broadcasts that could be impersonated was limited. Most Sybils were still just as suspicious as in the scenarios without any evasive strategy and were easily pruned out due to the low p-values of their respective log-likelihoods. The Sybils that had been integrated successfully gradually lost the support of the un-impersonated Sybil majority that was pruned out, and the few rounds wherein they were impersonated yielded insufficient credibility to overcome detection. Interestingly, the precision of Simple detection improved over the previous set of results due to the successful Sybil–honest edges formed via Circulation.

The major point of interest in these results was the steadily declining recall performance of GSD algorithms with decreasing values of the Dissociation parameter \( D \), dropping to the 0.8 range. This is directly due to the three obfuscation techniques, which created Sybil–honest edges while reducing the quantity of Sybil–Sybil and Sybil–malicious edges. We showcase the effects of Impersonation and Dissociation in Fig. 13 in a catastrophic misclassification outcome, where the incoming edges into two Sybil nodes misclassified by Sybil Rank are displayed.

**Figure 13**: A simulation run that resulted in catastrophic misclassification by both the Sybil Rank and Sybil Predict algorithms, detecting no Sybils and instead misclassifying honest nodes. The failure is due to adversarial Impersonation and Dissociation, which de-cluster the Sybils by failing some Sybil→Sybil edges and forming some honest→Sybil edges, as displayed for two particular Sybils.

The GSD algorithms once again produced much higher standard deviations for both precision and recall, again showing their brittleness when applied to a probabilistic proximity graph, resulting from the fact that they do not incorporate the likelihoods of edge successes and failures.

### Detection: Increasing Sybil Proportion
For our final assessment of the robustness of the detection schemes, we kept constant the numbers of honest and malicious nodes at 100 and 5, respectively, gradually increasing the number of Sybils. The increasing Sybil-to-malicious ratio meant that a smaller proportion of Sybils could be impersonated, reducing the extent to which the Sybils could be intermingled with the honest nodes. However, the increasing Sybil-to-honest ratio negatively impacted the Simple and Iterative Detection algorithms due to the adverse effect of Sybils on honest nodes’ log-likelihoods. The results are given in Fig. 14.

**Figure 14**: Detection performance results with 100 honest and 5 malicious nodes, and an increasing number of Sybils. The evasive strategy again consists of Impersonation, Circulation, and Dissociation (with \( D = 0.5 \)).

As expected, the GSD algorithms showed improvement as the Sybil proportion increased. Simple Detection still consistently produced some false positives (an amount increasing with the increasing number of Sybils), but Iterative Detection was once again robustly producing perfectly-consistent 1.0 recall values.

### Conclusion
In this paper, we have outlined the current technical challenges to Sybil countermeasures within Cyber-Physical Systems. We have discussed the impracticality of the current proximity graph construction due to its slow nature, reliance on historical data, and susceptibility to gradual Sybil infiltration, posing a major security threat.

To address these issues, we proposed a novel logarithmically-fast, one-shot proximity-graph construction scheme that drastically reduces the time required for devices to participate, requires no prior historical data, and imposes a credibility cost for malicious nodes that try to impersonate Sybils, hindering Sybil infiltration.

We have then explained how this new probabilistic proximity graph with uncertain edges (stemming from imperfect connectivity) produces very brittle results when analyzed using traditional GSD-based algorithms. Furthermore, we have demonstrated how Sybils can collude with a small number of malicious nodes, employing the Impersonation, Circulation, and Dissociation techniques to bypass detection by GSD algorithms. We have argued that this new proximity graph inherently encodes information not exploited by GSD algorithms, developed a novel mathematical framework for node-trustworthiness assessment, and proposed our own algorithms for Sybil detection.

We have then applied this entire scheme to a particular participatory explosive-detection system by building a simulator and have demonstrated the efficacy of our approach. Throughout all of our simulations, the proposed Iterative Detection scheme consistently achieved near 1.0 recall values with near 0.0 standard deviation, while the two GSD algorithms examined succumbed to the three obfuscation techniques and consistently produced non-negligible amounts of catastrophic misclassifications.

We would like to emphasize the role of our approach as a foundational framework that not only generalizes to a vast class of P2P-capable Cyber-Physical Systems but is also greatly extensible. In our preliminary model, we determined the success probability of connections as a function of pairwise distances, but our framework can easily incorporate more sophisticated and realistically-accurate models of connectivity.

### Acknowledgments
The authors gratefully acknowledge the support of the NSF grant CPS-1739684.

### References
[References listed as provided in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.