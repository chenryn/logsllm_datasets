* Circulation: In every round, malicious nodes that actually
listened disseminate their seen keys to all other malicious
and Sybil nodes who were supposed to be listening.
* Dissociation: Malicious and Sybil nodes randomly drop
each other’s keys from their seen lists with probability D.
(5) In every round, edges are created from every listener to
every broadcaster. Each such edge is labelled successful if the
listener’s seen list contains the corresponding broadcaster’s
key, and failed otherwise. This forms the proximity graph.
(6) Sybil detection is performed on the proximity graph (the set
of nodes and the set of successful and failed edges).
6.1 Target Application
For our target application, we chose the explosive-detection sensor
network from [14]. This led to the natural choice of WiFi Direct as
the communication medium, along with a radius R = 32.5m, allow-
ing for two antipodal nodes—moving in opposite directions with
typical walking speeds of 1.3ms−1—to remain within 200m of each
other over 45 seconds. The round duration was set to α = 2 sec-
onds, because this is sufficient to broadcast and scan the WiFi Direct
band[21], and also for consistency with the available experimental
2https://github.com/nverchok/HuntingSybils
results[20] of WiFi connection probability (Fig. 4). The Sybilness
threshold value remained 5σ. In other words, Sybil candidates were
nodes whose log-likelihood of incoming edges is roughly within
the lowest (3.5 ∗ 106)−1 of least-probable log-likelihood values.
For the scenarios, we model a street with wide sidewalks with
all nodes constrained to horizontal movement along them, as can
be seen in Fig. 8. The dimensions are roughly modeled off Market
Street in San Francisco.
Figure 8: Simulator GUI, showing a run 6 seconds into the
communication procedure (large light-green circle). Nodes
are color coded according to their true type (fill color: green
for honest, yellow for malicious, red for Sybil) and predicted
type (edge color: red for Sybil, green for non-Sybil, grey
for non-participant). The lines depict successful (green) and
failed (red) edges that were attempted at time=6sec for the
misclassified honest node. All distances are to scale (metric).
6.2 Detection Algorithms and Methodology
We perform Sybil detection with the following four algorithms, the
former two being our work (described in Section 5) and the latter
two being GSD solutions:
(1) Simple Sybil Detection
(2) Iterative Sybil Detection
(3) SybilPredict
(4) SybilRank
As our target application was the explosive-detection system,
we deemed the most important quality metric of any detection
algorithm to be the recall rate, corresponding to the fraction of
total Sybils detected, and a secondary metric to be precision (true
positive rate) indicating the amount of honest nodes misclassified
as Sybils.
For each data point in all subsequent graphs, we ran 20 scenario
simulations, giving 20 different sets of node positions and momenta.
For each such scenario simulation, we ran 20 simulations of prox-
imity graph construction as described in Section 4 (using all of the
nodes), with edge successes randomly generated according to the
aforementioned WiFi Direct function[20]. The subsequent plots
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan740detail the means and standard deviation of these 400 recall and
precision values per data point in every plot.
Additionally, malicious nodes were completely ignored from
calculating the precision and recall values, as it is unclear how to
classify them. On the one hand, they are adversarial and so detecting
them is good. On the other, they are physically-real and therefore
should not be identified as Sybils.
6.3 Detection: Sybils Only
The first set of simulations we examined consisted of Sybils ex-
clusively, without any malicious nodes at all, resulting in Sybils
being utterly unable to form any connections from any honest
nodes at all. From the perspective of the Simple and Iterative de-
tection algorithms, all Sybil log-likelihood values were therefore
extremely low as the Sybils simply had too many failed short edges.
From the perspective of GSD algorithms, the lack of any successful
edges between Sybils and honest nodes resulted in obvious Sybil
communities. Consequently, all 4 detection algorithms consistently
detected all Sybils with virtually no false negatives.
Figure 10: The Simple detector has a significant false posi-
tive rate as the honest nodes are made suspicious by virtue of
the nearby Sybils. As the Iterative detector sequentially flags
and discards the most suspicious nodes, it is able to pluck
apart the Sybil cluster node by node, which in turn greatly
lowers the false positive rate (zero in this simulation).
clustering from the GSD perspective, and in low log-likelihood
values from the Simple and Iterative perspective, since the perfect
inter-connectivity was still not enough to overcome all of the failed
Sybil–honest edges. The results are given by Fig. 11 below.
Figure 9: Detection results with only honest and (discon-
nected) Sybil nodes. Error bars indicate standard deviation.
As expected, however, the Simple Sybil detection algorithm pro-
duced a significant number of false positives (honest nodes detected
as Sybils; precision) as seen in Fig. 9 above, since the honest nodes
had their log-likelihoods severely reduced by the many failed short
edges from the Sybils. In contrast, the Iterative scheme was able
to gracefully handle such situations by plucking Sybils one at a
time as shown in Fig. 10, throwing them out of subsequent p-value
computations, and thereby resulting in reasonable p-values for
most honest nodes. The GSD algorithms naturally had zero false
positives for this trivial disconnected graph.
6.4 Detection: No Evasive Strategies
For the next set of simulations, we introduced malicious nodes but
did not yet enable any evasive strategies, meaning that Imperson-
ation, Circulation, and Dissociation were not employed by
the Adversary. Thus Sybil–Sybil and Sybil–malicious edges were
always established irrespective of distance, while connections be-
tween physically-real nodes (honest and malicious) were gener-
ated according to the probability–distance function as described
in Section 5 as per normal. This resulted in very obvious Sybil
Figure 11: Detection results with no evasive strategy (obvi-
ous clustering). Error bars indicate standard deviation.
The high recall averages in 0.9+ range show that, without an
obfuscation strategy, the Sybils were still extremely easy to detect
despite their slight connectedness to the honest nodes (through
the malicious nodes) using any of the 4 algorithms. The near-zero
recall standard deviations (error bars) for Iterative Detection and
Simple Detection demonstrate their incredible consistency, while
the recall standard deviations for the two GSD algorithms are much
higher in the 0.2 to 0.3 range. These higher standard deviations–
stemming exclusively from catastrophic misclassification out-
comes–highlight the fragility of GSD methods and the comparative
robustness of our approach.
The precision figures also demonstrate several interesting char-
acteristics. Again, the average precision of Simple Detection is very
low, dipping below 0.4 at higher quantities of nodes. This is once
again caused by the adverse effect of disconnected Sybils on nearby
honest nodes. The Iterative Detection algorithm can once again be
seen to successfully rectify this issue however, achieving precision
values consistently near 1.0 with virtually no standard deviation. By
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan741contrast, while the average precision values for the GSD algorithms
are also high in the 0.9+ range, they all have significant standard de-
viations in the 0.2 range, again as a result of occasional catastrophic
misclassification.
6.5 Detection: Smart Sybil Obfuscation
For the next set of simulations, we introduced the 3 obfuscation
techniques discussed prior. For Impersonation we used one single
dedicated malicious listener (per round), with all other malicious
listeners broadcasting randomly-chosen Sybil keys instead. For
Circulation, the single malicious listener in every round spread all
of its seen keys to all malicious and Sybil nodes that were supposed
to be listening in that round. For Dissociation, Sybil–Sybil and
Sybil–malicious connections were formed according to the WiFi
Direct distance–probability function (the assumption being that the
Adversary has full knowledge of our evaluation function), but the
Sybil–Sybil success probability was downscaled using (multiplied
by) the parameter D ∈ {0.5, 0.4, 0.2} in order to break up the Sybil
community. The results across the three values of the Dissemination
parameter D are given by Fig. 12 below.
The Iterative approach still worked just as effectively as before,
since the amount of roundwise Sybil broadcasts that could be imper-
sonated was limited. Most Sybils were still just as suspicious as in
the scenarios without any evasive strategy, and were easily pruned
out due to the low p-values of their respective log-likelihoods. The
Sybils that had been integrated successfully gradually lost the sup-
port of the un-impersonated Sybil majority that was pruned out,
and the few rounds wherein they were impersonated yielded insuf-
ficient credibility to overcome detection. Interestingly, the precision
of Simple detection improved over the previous set of results due
to the successful Sybil–honest edges formed via Circulation.
The major point of interest in these results was the steadily
declining recall performance of GSD algorithms with decreasing
values of the Dissociation parameter D, dropping to the 0.8 range.
This is directly due to the 3 obfuscation techniques, which created
Sybil–honest edges while reducing the quantity of Sybil–Sybil and
Sybil–malicious edges. We showcase the effects of Impersonation
and Dissociation in Fig. 13 in a catastrophic misclassification out-
come, where the incoming edges into two Sybil nodes misclassified
by Sybil Rank are displayed.
Figure 13: A simulation run that resulted in catastrophic
misclassification by both the Sybil Rank and Sybil Pre-
dict algorithms, detecting no Sybils and instead misclas-
sifying honest nodes. The failure is due to adversarial
Impersonation and Dissociation, which de-cluster the
Sybils by failing some Sybil→Sybil edges and forming some
honest→Sybil edges, as displayed for two particular Sybils.
The GSD algorithms once again produced much higher standard
deviations for both precision and recall, again showing their brit-
tleness when applied to a probabilistic proximity graph, resulting
from the fact that they do not incorporate the likelihoods of edge
successes and failures.
6.6 Detection: Increasing Sybil Proportion
For our final assessment of the robustness of the detection schemes,
we kept constant the numbers of honest and malicious nodes at 100
and 5 respectively, gradually increasing the number of Sybils. The
increasing Sybil-to-malicious ratio meant that a smaller proportion
Figure 12: Detection performance results with an evasive
strategy consisting of the Impersonation, Circulation,
and Dissociation (across three Dissociation parameters
D ∈ {0.5, 0.4, 0.2}). Error bars indicate standard deviation.
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan742of Sybils could be impersonated, reducing the extent to which the
Sybils could be intermingled with the honest nodes. However the
increasing Sybil-to-honest ratio negatively impacted the Simple and
Iterative Detection algorithms due to the adverse effect of Sybils
on honest nodes’ log-likelihoods. The results are given in Fig. 14.
consistently achieves near 1.0 recall values with near 0.0 standard
deviation, while the two GSD algorithms examined succumb to
the three obfuscation techniques and consistently produce non-
negligible amounts of catastrophic misclassifications.
We would like to emphasize the role of our approach as a foun-
dational framework which not only generalizes to a vast class of
P2P-capable Cyber-Physical Systems, but is also greatly extensible.
In our preliminary model, we determined the success probability of
connections as a function of pairwise distances, but our framework
can easily incorporate more sophisticated and realistically-accurate
models of connectivity.
ACKNOWLEDGMENTS
The authors gratefully acknowledge the support of the NSF grant
CPS-1739684.
Figure 14: Detection performance results with 100 honest
and 5 malicious nodes, and an increasing number of Sybils.
The evasive strategy again consists of Impersonation, Cir-
culation, and Dissociation (with D = 0.5).
As expected, the GSD algorithms showed improvement as the
Sybil proportion increased. Simple Detection still consistently pro-
duced some false positives (an amount increasing with the increas-
ing number of Sybils), but Iterative Detection was once again ro-
bustly producing perfectly-consistent 1.0 recall values.
7 CONCLUSION
In this paper, we have outlined the current technical challenges to
Sybil countermeasures within Cyber-Physical Systems. We have dis-
cussed the impracticality of the current proximity graph construc-
tion due to its slow nature that hogs the device radio, its reliance
on gradually-accumulated historical data, and its susceptibility to
gradual Sybil infiltration, posing a major security threat.
To simultaneously address all of these issues, we proposed a
novel logarithmically-fast, one-shot proximity-graph construction
scheme which drastically reduces the time required for devices to
participate, requires no prior historical data, and yet also imposes a
credibility cost for malicious nodes that try to impersonate Sybils,
hindering Sybil infiltration.
We have then explained how this new probabilistic proximity
graph with uncertain edges (stemming from imperfect connectivity)
produces very brittle results when analyzed using traditional GSD-
based algorithms. Furthermore, we have demonstrated how Sybils
can collude with a small number of malicious nodes, employing
the Impersonation, Circulation, and Dissociation techniques
to bypass detection by GSD algorithms. We have argued that this
new proximity graph inherently encodes information not exploited
by GSD algorithms, developed a novel mathematical framework
for node-trustworthiness assessment, and proposed our own algo-
rithms for Sybil detection.
We have then applied this entire scheme to a particular participa-
tory explosive-detection system by building a simulator and have
demonstrated the efficacy of our approach. In particular, through-
out all of our simulations, the proposed Iterative Detection scheme
REFERENCES
[1] N. D. Lane, E. Miluzzo, H. Lu, D. Peebles, T. Choudhury and A. T. Campbell, A
survey of mobile phone sensing, in IEEE Communications Magazine, 2010.
[2] T. Monahan, J. T. Mokos, Crowdsourcing urban surveillance: The development of
homeland security markets for environmental sensor networks, Geoforum, 2013.
[3] J. A. Burke, D. Estrin, M. Hansen, A. Parker, N. Ramanathan, S. Reddy, and M. B.
Srivastava, Participatory Sensing, UCLA: Center for Embedded Network Sensing,
2006.
[4] B. Guo, Z. Yu, X. Zhou and D. Zhang, From Participatory Sensing to Mobile
Crowd Sensing, IEEE International Conference on Pervasive Computing and
Communication Workshops (PERCOM WORKSHOPS), Budapest, 2014.
[5] D. Christin, A. Reinhardt, S. S. Kanhere, M. Hollick, A survey on privacy in mobile
participatory sensing applications, Journal of Systems and Software, 2011.
[6] K. Shilton. Four billion little brothers?: privacy, mobile phones, and ubiquitous
data collection. Commun. ACM 52, 2009.
[7] G. Wang, B. Wang, T. Wang, A. Nika, H. Zheng and B. Y. Zhao, Ghost Riders: Sybil
Attacks on Crowdsourced Mobile Mapping Services, in IEEE/ACM Transactions
on Networking, 2018.
[8] J. R. Douceur, The sybil attack, in IPTPS ’01: Revised Papers from the First
International Workshop on Peer-to-Peer Systems, UK: Springer-Verlag, 2002.
[9] S. Kar and J. M. F. Moura, Distributed Consensus Algorithms in Sensor Net-
works With Imperfect Communication: Link Failures and Channel Noise, in IEEE
Transactions on Signal Processing, 2009.
[10] H. Yu, M. Kaminsky, P. B. Gibbons, and A. Flaxman, SybilGuard: defending against
sybil attacks via social networks, In Proceedings of SIGCOMM ’06, ACM, New
York, 2006.
[11] Q. Cao, M. Sirivianos, X. Yang, and T. Pregueiro, Aiding the detection of fake
accounts in large scale social online services, In Proceedings of NSDI’12, USENIX
Association, Berkeley, 2012.
[12] Y. Boshmaf, K. Beznosov and M. Ripeanu, Graph-based Sybil Detection in social
and information systems, IEEE/ACM International Conference on Advances in
Social Networks Analysis and Mining (ASONAM 2013), Niagara Falls, 2013.
[13] U.S. Department of Homeland Security, DHS/SI&T/PIA-021 Cell All, 2011.
[14] D. Badawi, S. Ozev, J. B. Christen, C. Yang, A. Orailoglu, A. E. Çetin, Detecting
Gas Vapor Leaks Through Uncalibrated Sensor Based CPS, ICASSP, 2019.
[15] S. Chandra and A. Bharti, Speed Distribution Curves for Pedestrians During
Walking and Crossing, Procedia - Social and Behavioral Sciences, 2013.
[16] K. Mekliche and S. Moussaoui, L-P2DSA: Location-based privacy-preserving
detection of Sybil attacks, 11th International Symposium on Programming and
Systems (ISPS), Algiers, 2013.
[17] M. Demirbas, Y. Song, An RSSI-based Scheme for Sybil Attack Detection in
Wireless Sensor Networks, In Proceedings of International Symposium on a
World of Wireless, Mobile and Multimedia Networks, 2006.
[18] K. Rabieh, M. M. E. A. Mahmoud, T. N. Guo and M. Younis, Cross-layer scheme
for detecting large-scale colluding Sybil attack in VANETs, IEEE International
Conference on Communications (ICC), London, 2015.
[19] Gang Wang, Bolun Wang, Tianyi Wang, Ana Nika, Haitao Zheng, and Ben Y. Zhao,
Poster: Defending against Sybil Devices in Crowdsourced Mapping Services, In
Proceedings of MobiSys ’16 Companion, ACM, New York, 2016.
[20] Calvin Newport, David Kotz, Yougu Yuan, Robert S. Gray, Jason Liu, and Chip
Elliott, Experimental Evaluation of Wireless Simulation Assumptions, Simulation,
2007.
[21] D. Camps-Mur, A. Garcia-Saavedra and P. Serrano, Device-to-device commu-
nications with Wi-Fi Direct: overview and experimentation, in IEEE Wireless
Communications, 2013.
Session 14: CPS Security ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan743