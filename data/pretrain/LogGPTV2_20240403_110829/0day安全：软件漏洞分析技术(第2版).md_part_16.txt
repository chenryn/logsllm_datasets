Fle Ea FomadWoHe
43214321432143214321432143214321432143214321
图2.4.2制作溢出文件
如我们所料，authenticated被冲刷后，程序将进入验证通过的分支，如图2.2.3所示。
用OllyDbg加载这个生成的PE文件进行动态调试，字符串复制函数过后的栈状态如图2.4.4
所示。
64
---
## Page 90
第
时的栈区内存如表2-4-2所示。
2
章
栈溢出原
理与实践
图2.4.3验证通过
EEEI
Tc
D FIK SS:[tEP }
ESF.70
buffor[44]
iuthentcatod
前线NEBP
函数返回地址
图2.4.4
调试栈的布局
表2-4-2
栈帧数据
局部变量名
内存地址
偏移3处的值
偏移2处的值
偏移1处的值
偏移0处的值
0x0012FAF0
0x31 ('1′)
0x32(*2)
0x33 (*3′)
0x34 (4')
（9个双字）
0x31(*1')
0x32(*2')
0x33 (3)
0x34 (*4')
buffer[40~43]
0x0012FB18
0x31 ('1')
0x32(*2')
0x33 (*3')
0x34 (*4')
authenticated（被覆盖前）
0x0012FB1C
0x00
0x00
0x00
0x31 (1')
authenticated（被覆盖后）
0x0012FB1C
0x00
0x00
00x0
0x00 (NULL)
前栈帧EBP
0x0012FB20
0x00
0x12
OxFF
0x80
返回地址
0x0012FB24
0x00
0x40
0x11
0x18
65
---
## Page 91
0
day
动态调试的结果证明了前边分析的正确性。从这次调试中，我们可以得到以下信息。
安
（1）buffer数组的起始地址为0x0012FAF0。
全
（2）password.txt文件中第53～56个字符的ASCI码值将写入栈帧中的返回地址，成为函
数返回后执行的指令地址。
软
件
也就是说，将buffer的起始地址0x0012FAF0写入password.txt文件中的第53～56个字节，
漏
在verify_password函数返回时会跳到我们输入的字串开始取指执行。
洞
我们下面还需要给password.txt中植入机器代码。
分
让程序弹出一个消息框只需要调用Windows的API函数MessageBox。MSDN对这个函数
析
技
的解释如下。
术
int MessageBox(
（第
HWND错误！超级链接引I用无效。
//handletoowmerwindow
LPCTSTR管误！超级链接引I用无效。
//text in message box
2
LPCTSTR错误！超级链接引I用无效。
//message box title
版
UINT错误！超级链换引用无效。
//messagebox style
●hWnd[in]消息框所属窗口的句柄，如果为NULL，消息框则不属于任何窗口。
·lpTex[in]字符串指针，所指字符串会在消息框中显示。
·lpCaption[in]字符串指针，所指字符串将成为消息框的标题。
·uType[in]消息框的风格（单按钮、多按钮等），NULL代表默认风格。
我们将给出调用这个API的汇编代码，然后翻译成机器代码，用十六进制编辑工具填入
password.txt文件。
题外话：热悉MFC的程序员一定知道，其实系统中并不存在真正的MessagBox函数，
类函数（ASCI）或者“W”类函数（UNICODE）调用。因此，我们在汇编语言中调
用的函数应该是MessageBoxA。多说一句，其实MessageBoxA的实现只是在设置了
几个不常用参数后直接调用MessageBoxExA。探究API的细节超出了本书所讨论的
范围，有兴趣的读者可以参阅其他书籍。
用汇编语言调用MessageboxA需要3个步骤。
（1）装载动态链接库user32.dll。MessageBoxA是动态链接库user32.dll的导出函数。虽然
大多数有图形化操作界面的程序都已经装载了这个库，但是我们用来实验的consol版并没有默
认加载它。
（2）在汇编语言中调用这个函数需要获得这个函数的入口地址。
（3）在调用前需要向栈中按从右向左的顺序压入MessageBoxA的4个参数。
载了user32.dll这个库，所以第一步操作不用在汇编语言中考虑。
MessageBoxA的入口参数可以通过user32.dll在系统中加载的基址和MessageBoxA在库中
66
---
## Page 92
第
的偏移相加得到。具体的我们可以使用VC6.0自带的小工具“DependencyWalker”获得这些信
2章
息。您可以在VC6.0安装目录下的Tools下找到它，如图2.4.5所示。
栈溢出原理与实践
@ AP1 Tent Vewer
0Mcros VnualC++6.0
图2.4.5使用Depends
运行Depends后，随便拖拽一个有图形界面的PE文件进去，就可以看到它所使用的库文
件了。在左栏中找到并选中user32.dll后，右栏中会列出这个库文件的所有导出函数及偏移地
址：下栏中则列出了PE文件用到的所有的库的基地址。
如图2.4.6所示，user32.dll的基地址为0x77D40000，MessageBoxA的偏移地址为
0x000404EA。基地址加上偏移地址就得到了MesSageBoxA在内存中的入口地址0x77D804EA。
[rnp]
MC2.DLL
Ordr
Pnd
KRNEL32.DLL
NA
1690
(00007
NFA
183
KERNEL32.0UL
240
325
atC
K] NTDUDUL
3 USER32.DUL
3
326
SLSZR32.DLL
slco
MSVOR1.DL
H
7
477
NIDLDL
DR.DL
MC42.DLL
SVCRT.DLL
730006
x77C166
图2.4.6计算相关API的虚拟内存地址
67
---
## Page 93
0
day
注意：user32.dll的基地址和其中导出函数的偏移地址与操作系统版本号、补丁版本号
安
等诸多因素相关，故您用于实验的计算机上的函数入口地址很可能与这里不一致。请
全
您一定注意要在当前实验的计算机上重新计算函数入口地址，否则后面的函数调用会
：
出错。能够适应于各种操作系统版本的通用的代码植入方法将在第5章进行详细介绍。
软件
有了这个入口地址，就可以编写进行函数调用的汇编代码了。这里我们先把字符串
漏
洞
“failwest”压入栈区，消息框的文本和标题都显示为“failwest”，只要重复压入指向这个字符
分
串的指针即可：第1个和第4个参数这里都将设置为NULL。写出的汇编代码和指令所对应的
析
机器代码如表2-4-3所示。
技
术
表2-4-3机器代码
（第
机器代码（十六进制）
汇编指令
注释
33DB
XOR EBX,EBX
压入NULL结尾的“failwest”字符串。之所以
2
53
PUSH EBX
用EBX清零后入栈作为字符串的截断符，是为了
版
6877657374
PUSH 74736577
避免“PUSHO”中的NULL，否则植入的机器码
686661696C
PUSH 6C696166
会被strcpy函数截断
8BC4
MOV EAX,ESP
EAX里是字符申指针
53
PUSH EBX
4个参数按照从右向左的顺序入栈，分别为
50
PUSH EAX
(0,failwest,failwest,0)
50
PUSH EAX
消息框为默认风格，文本区和标题都是
53
PUSH EBX
"failwest”
B8EA04D877
MOV EAX, 0x77D804EA
调用MessageBoxA。注意：不同的机器这里的
CALLEAX
函数入口地址可能不同，请按实际值填入！
题外话：从汇编指令到机器码的转换可以有很多种方法。调试汇编指令，从汇编指令
中提取出二进制机器代码的方法将在第5章集中讨论。由于这里仅仅用了11条指令
和对应的26个字节的机器代码，如果您一定要现在就弄明白指令到机器码是如何对
应的话，直接查阅Intel的指令集手工翻译也是可以的。
将上述汇编指令对应的机器代码按照上一节介绍的方法以十六进制形式逐字写入
password.txt，第53～56字节填入buffer的起址0x0012FAF0，其余的字节用0x90（nop指令）填
充，如图2.4.7所示。
m t 3 10:vy.
x
xer
图2.4.7将机器代码写入文件
68
---
## Page 94
第2章
换回文本模式可以看到这些机器代码所对应的字符，如图2.4.8所示，
7 Rtral dis 32  (0:wry._book ichapte_4v_4_owerllow cede caslpns
rd.14]
etrhFgCAdddoe
x
n
栈溢出原理与实践
图2.4.8
ASCII编码下的机器代码
这样构造了password.txt之后再运行验证程序，程序执行的流程将如图2.4.9所示。
正常情况下的
通国地址
弹出消息桃
的机器代码
的通居地址
正常情况下
uffer[0~3]（机期码)
（可执行机鹏码）
00401112 POSH
00601133 CALL
00101118 AbBSP,4
Awerflou.0o4o1oo5
D0401110
CIPODDPT SS:[~41,0
PTR35:[3~41,2X
tuthentioeted（领盘）
00401122
00401118
前EEP（摄量）
00401134
00401128
00401120
ADD ESP, 4
回地址（摄量）
TETTONCO
JIPS80RTorrf1ou.00401140
00401133
00401138
图2.4.9栈溢出利用示意图
程序运行情况如图2.4.10所示。
X
图2.4.10转
输入文件中的代码植入成功
69
---
## Page 95
y安全：软件漏洞分析技术（第2版）
O
成功地弹出了我们植入的代码。
但是在单击“0K”按钮之后，程序会崩溃，如图2.4.11所示。
W
图2.4.11被破坏的栈在程序退出时引起程序崩溃
这是因为MessageBoxA调用的代码执行完成后，我们没有写用于安全退出的代码的缘故。
您会在后面的章节中见到更深入的代码植入讨论，包括编写通用的植入代码，在植入代码
中安全地退出，甚至在植入代码结束后修复堆栈和寄存器，让程序重新回到正常的执行流程。
70
---
## Page 96
第 3章开发 shellcode 的艺术
两句三年得，一吟双泪流
贾岛《题诗后》
到北京工作的第一年，同学聚会时朋友说自己的开发压力很大，每周要写几千行代码。问
到我时，我说我的压力也很大，但是上周只写了几百个字节的代码。Shellcode的并发可不比
Framework和类库丰富的普通软件开发，这是一件极其细致，滩度极高的工作。
3.1shellcode概述
3.1.1shellcode与exploit
1996年，AlephOne在Underground发表了著名论文SmashingtheStackforFunandProfit，
其中详细描述了Linux系统中栈的结构和如何利用基于栈的缓冲区溢出。在这篇具有划时代意
义的论文中，AlephOne演示了如何向进程中植入一段用于获得shell的代码，并在论文中称这
段被植入进程的代码为“shellcode”。
后来人们干脆统一用shellcode这个专用术语来通称缓冲区溢出攻击中植入进程的代码。这
段代码可以是出于恶作剧目的的弹出一个消息框，也可以是出于攻击目的的删改重要文件、窃取
数据、上传木马病毒并运行，甚至是出于破坏目的的格式化硬盘等。请注意本章讨论的shellcode
是这种广义上的植入进程的代码，而不是狭义上的仅仅用来获得shell的代码。
shellcode往往需要用汇编语言编写，并转换成二进制机器码，其内容和长度经常还会受到
很多苛刻限制，故开发和调试的难度很高。
在技术文献中，我们还会经常看到另一个术语一一exploit。
植入代码之前需要做大量的调试工作，例如，弄清楚程序有几个输入点，这些输入将最终
会当作哪个函数的第几个参数读入到内存的哪一个区域，哪一个输入会造成栈溢出，在复制到
栈区的时候对这些数据有没有额外的限制等。调试之后还要计算函数返回地址距离缓冲区的偏
移并淹没之，选择指令的地址，最终制作出一个有攻击效果的“承载”着shellcode的输入字符
串。这个代码植入的过程就是漏洞利用，也就是exploit。
exploit一般以一段代码的形式出现，用于生成攻击性的网络数据包或者其他形式的攻击性