### 2.3 Detection

Our method detects ROP chains by conducting a likelihood ratio test. Specifically, the method first calculates the likelihood ratio \( Z \) as follows:

\[
Z = \frac{P(X | H_{\text{Mal}})}{P(X | H_{\text{Ben}})} = \frac{L(\theta_{\text{Mal}} | X)}{L(\theta_{\text{Ben}} | X)}
\]

where:
- \( H_{\text{Mal}} \) is the hypothesis that the inspected document is malicious.
- \( H_{\text{Ben}} \) is the hypothesis that the inspected document is benign.
- \( \theta_{\text{Mal}} \) is the HMM of malicious documents with ROP chains.
- \( \theta_{\text{Ben}} \) is the HMM of benign documents.

If \( Z > t \), the document is classified as malicious; otherwise, it is classified as benign, where \( t \) is a predefined threshold. The computation of \( Z \) has a time complexity of \( O(N) \), where \( N \) is the length of the observed byte sequence (i.e., \( N = |X| \)). This ensures that our detection method is efficient and quick.

### 3. Experiment

To evaluate our method, we conducted experiments using the datasets listed in Table 1. As malicious samples, we collected documents that exploit CVE-2014-1761, which is a new and widely used vulnerability in the wild. We confirmed that these malicious samples included three different ROP chains. Since the CVE-2014-1761 samples use the library file `MSCOMCTL.OCX` for their ROP chain, the HMM was also trained using this library.

#### Table 1: Datasets
| Category | Training Set | Test Set |
|----------|--------------|----------|
| Malicious | 225          | 900      |
| Benign   | 40           | -        |

**Sources:**
- Malicious: Metasploit [5]
- Benign: Garfinkel et al. [1], VirusTotal [2]

Using these datasets, our method first generated the HMMs for both malicious and benign documents using the training set. The test set was then inspected using these HMMs. The threshold \( t \) was determined using 5-fold cross-validation on the test set, ensuring that no false negatives occurred within the chosen range.

The experiments were conducted on the following environment:
- CPU: Intel Xeon CPU E5-2660 v3 @2.60GHz
- Memory: 32GB
- OS: Ubuntu 14.04 LTS

All inspections were performed on a single CPU.

**Experimental Results:**
- Our method detected all malicious samples with no false negatives.
- The average false positive rate was 3%.
- The average inspection time was 0.4 seconds per file.
- The throughput was approximately 1.73 Mbps/CPU.

### 4. Discussion and Conclusion

We discuss two limitations of our method. First, since the method is based on static analysis, it can only detect ROP chains that are visible in the byte sequence. Dynamically generated ROP chains, such as those created by JavaScript in PDFs, are out of our scope. Therefore, our focus was primarily on OLE- or RTF-formatted documents.

Second, during RCI checking, gadgets that caused ambiguous stack pointer offsets (e.g., gadgets ending with `jmp [eax]` without setting the `eax` register) were excluded from this research.

We also consider the intervals for HMM model updates. A model update is required when the library used for the gadgets is updated. However, non-ASLR libraries, which are commonly used for ROP chains, are rarely updated. Additionally, a model update may be necessary if the structure of ROP chains changes significantly (e.g., the appearance of ROP chains with numerous junk codes). To date, such drastic changes have not been observed in the wild, so the frequency of model updates is low.

Although our method focuses on ROP, it can also be effective against jump-oriented programming (JOP) and call-oriented programming (COP) depending on the implementation. Our method can be applied to other data streams beyond documents.

In this paper, we proposed a method for statically detecting ROP chains in malicious documents. Our method generates two HMMs and detects ROP chains by conducting a likelihood ratio test, considering the RCI. Experimental results suggest that our method can detect ROP-based malicious documents with no false negatives and few false positives at high throughput.

Future work includes improving the learning method, exploring other HMM-based detection algorithms, and conducting larger-scale experiments.

### 5. References

[1] S. Garfinkel et al. Bringing science to digital forensics with standardized forensic corpora. *Digital Investigation*, 6:S2–S11, 2009.

[2] Google. VirusTotal. https://www.virustotal.com/.

[3] C. Jämthagen et al. eavesrop: Listening for ROP payloads in data streams. In *Proceedings of the International Conference on Information Security*, pages 413–424. Springer, 2014.

[4] L. R. Rabiner. A tutorial on hidden Markov models and selected applications in speech recognition. *Proceedings of the IEEE*, 77(2):257–286, 1989.

[5] Rapid7. Metasploit. http://www.metasploit.com/.

[6] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In *Proceedings of the 14th ACM conference on Computer and communications security*, pages 552–561. ACM, 2007.

[7] B. Stancill et al. Check my profile: Leveraging static analysis for fast and accurate detection of ROP gadgets. In *Proceedings of the 16th International Symposium on Research in Attacks, Intrusions, and Defenses*, pages 62–81. Springer, 2013.

[8] Y. Tanaka et al. n-ROPdetector: Proposal of a method to detect the ROP attack code on the network. In *Proceedings of the 2014 Workshop on Cyber Security Analytics, Intelligence and Automation*, pages 33–36. ACM, 2014.

[9] C. YoungHan et al. StROP: Static approach for detection of return-oriented programming attack in network. *IEICE Transactions on Communications*, 98(1):242–251, 2015.