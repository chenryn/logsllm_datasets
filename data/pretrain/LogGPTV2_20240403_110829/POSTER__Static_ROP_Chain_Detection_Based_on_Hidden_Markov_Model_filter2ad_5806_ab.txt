tion in the components (e.g., addr3 means the third byte of
a ROP gadget address). Figure 2 depicts the state transition
diagram of an HMM of 32-bit ROP chains designed for our
detection method. In the diagram D denotes doc, A denotes
addr, C denotes const and J denotes junk.
With our method, the HMM model parameters (cid:18) = (A; B; (cid:25))
are generated by supervised learning. We apply labeled doc-
uments for the training data every byte of which has a cor-
responding label. By using the training data, the transition
probability ai;j 2 A that the transition from state i to state
j, the emission probability bj;o 2 B that state j emits sym-
bol o, and the initial state probability (cid:25)i 2 (cid:25) of state i are
computed as follows;
Ki;j∑
Mi;o∑
Ni∑
ai;j =
; bi;o =
k2Z Ki;k
; (cid:25)i =
p2V Mi;p
j2Z Nj
(1)
where V is the set of emission symbols, Z is the set of hidden
states, Ki;j is the number of transitions from state i 2 Z to
state j 2 Z, the Mi;o is the number of the emitted symbols
o 2 V by the state i, and Ni is the number of initial states
i.
While calculating the emission probabilities of addr[1-4],
a sampling bias problem occurs. This is because the gadget
addresses that appear in the known samples are quite lim-
ited. However, attackers can create ROP chains that have
equivalent behavior to the known chains by using addresses
that do not exist in the known chains. Therefore, we avoid
this problem by learning the libraries adopted for ROP gad-
gets. We extract the gadget address candidates from the
library used to create chains. The extracted addresses are
applied for learning the emission probabilities of addr[1-4]
by Equation (1).
We applied HMMs because of the following reasons. First,
18092.3 Detection
Our method detects by conducting likelihood ratio test.
Hence, the method (cid:12)rst calculates the likelihood ratio Z as
follows;
P (XjHM al)
P (XjHBen)
Z =
L((cid:18)M aljX)
P (Xj(cid:18)Ben)
=
(4)
where HM al is the hypothesis that the inspected document
is malicious, HBen is the hypothesis that the inspected doc-
ument is benign, (cid:18)M al is the HMM of malicious documents
with ROP chains, and (cid:18)Ben is the HMM of benign docu-
ments. Then, if Z > t the document is detected as mali-
cious; otherwise, it is benign, where t is a threshold. The
order of computing Z is O(N ) where N is the length of the
observed byte sequence (N = jXj). Thus, the detection of
our method is quick.
3. EXPERIMENT
We conducted experiments to evaluate our method. Table
1 lists the datasets used in the experiments. As malicious
samples, we collected the malicious documents that exploit
CVE-2014-1761 that is new and widely used in the wild.
We con(cid:12)rmed that the malicious samples included three dif-
ferent ROP chains. Since CVE-2014-1761 samples use the
library (cid:12)le of MSCOMCTL.OCX for their ROP chain, the
HMM is also trained by the library.
Category
Training set
Test set
Table 1: Datasets
Label
Samples
Source
Malicious
Benign
Malicious
Benign
1
225
40
900
Metasploit[5]
Gar(cid:12)nkel et al.[1]
VirusTotal[2]
Gar(cid:12)nkel et al.[1]
Using the datasets, our method (cid:12)rst generated the HMMs
of malicious and benign documents with the training set
then inspected the test set with the HMMs. The threshold
t is de(cid:12)ned by 5-fold cross validation in the test set. During
the process, we chose the best t within a range that does not
cause false negatives. The experiments were conducted on
the following environment; CPU: Intel Xeon CPU E5-2660
v3 @2.60GHz, Memory: 32GB and OS: Ubuntu 14.04 LTS.
All inspections were done on a single CPU.
The experimental results suggest that our method de-
tected all malicious samples with no false negatives and
the average false positive rate was 3%. During the experi-
ments, our method inspected in 0.4 s/(cid:12)le on average and its
throughput was around 1.73 Mbps/CPU.
4. DISCUSSION AND CONCLUSION
We (cid:12)rst discuss two limitations of our method. The (cid:12)rst is
that since the method is based on static analysis, detection
is limited to the ROP chains visible on the byte sequence.
Namely, ROP chains dynamically generated by scripts, such
as JavaScript in a PDF, are out of our scope. Therefore, we
mainly focused on OLE- or RTF-formatted documents. The
second limitation is that during RCI checking, the gadgets
that caused the ambiguous stack pointer oﬀset (e.g., gadgets
that ended with jmp [eax] without setting the eax register)
were excluded in this research.
We also discuss the intervals of the HMM model updates.
A model update is required depending on the update of the
library used for the gadgets. A library update is rarely done
on non-ASLR (address space layout randomization) libraries
that are usable for ROP chains. Also, a model update may
be required when the structure of the ROP chains is changed
drastically (e.g., appearance of ROP chains with numerous
junk codes). However, as far as we know, this is not observed
in the wild. Hence, the model-update frequency is low with
our method.
Although our method is only focused on ROP in this pa-
per, the method is also eﬀective against jump-oriented pro-
gramming (JOP) and call-oriented programming (COP) de-
pending on the implementation. Our method can be applied
to data streams other than documents despite the focus of
this paper.
In this paper, we proposed a method that statically de-
tects ROP chains in malicious documents. Our method gen-
erates two HMMs and detects the ROP chains by conduct-
ing likelihood ratio test considering the RCI. The experi-
mental results suggest that our method can detect ROP-
based malicious documents with no false negatives and few
false positives at high throughput.
Improving the learn-
ing method, considering other HMM-based detection algo-
rithms, and conducting larger-scale experiments are possible
future work.
5. REFERENCES
[1] S. Gar(cid:12)nkel et al. Bringing science to digital forensics
with standardized forensic corpora. digital
investigation, 6:S2{S11, 2009.
[2] Google. Virustotal. https://www.virustotal.com/.
[3] C. J(cid:127)amthagen et al. eavesrop: Listening for rop
payloads in data streams. In Proceedings of the
International Conference on Information Security,
pages 413{424. Springer, 2014.
[4] L. R. Rabiner. A tutorial on hidden markov models and
selected applications in speech recognition. Proceedings
of the IEEE, 77(2):257{286, 1989.
[5] Rapid7. Metasploit. http://www.metasploit.com/.
[6] H. Shacham. The geometry of innocent (cid:13)esh on the
bone: Return-into-libc without function calls (on the
x86). In Proceedings of the 14th ACM conference on
Computer and communications security, pages 552{561.
ACM, 2007.
[7] B. Stancill et al. Check my pro(cid:12)le: Leveraging static
analysis for fast and accurate detection of rop gadgets.
In Proceedings of the 16th International Symposium on
Research in Attacks, Intrusions, and Defenses, pages
62{81. Springer, 2013.
[8] Y. Tanaka et al. n-ropdetector: Proposal of a method
to detect the rop attack code on the network. In
Proceedings of the 2014 Workshop on Cyber Security
Analytics, Intelligence and Automation, pages 33{36.
ACM, 2014.
[9] C. YoungHan et al. Strop: Static approach for
detection of return-oriented programming attack in
network. IEICE Transactions on Communications,
98(1):242{251, 2015.
1810