title:Design of a Role-Based Trust-Management Framework
author:Ninghui Li and
John C. Mitchell and
William H. Winsborough
Design of a Role-based Trust-management Framework
Ninghui Li
John C. Mitchell
Department of Computer Science
Stanford University
Gates 4B
Stanford, CA 94305-9045
{ninghui.li, mitchell}@cs.stanford.edu
William H. Winsborough
NAI Labs
Network Associates, Inc.
3060 Washington Road
Glenwood, MD 21738
william PI:EMAIL
Abstract
We introduce the RT framework, a family of Role-
based Trust-management languages for representing poli-
cies and credentials in distributed authorization. RT com-
bines the strengths of role-based access control and trust-
management systems and is especially suitable for attribute-
based access control. Using a few simple credential forms,
RT provides localized authority over roles, delegation in
role deﬁnition, linked roles, and parameterized roles. RT
also introduces manifold roles, which can be used to ex-
press threshold and separation-of-duty policies, and dele-
gation of role activations. We formally deﬁne the semantics
of credentials in the RT framework by presenting a transla-
tion from credentials to Datalog rules. This translation also
shows that this semantics is algorithmically tractable.
1 Introduction
We introduce the RT framework, a family of Role-based
Trust-management languages for representing policies and
credentials in distributed authorization. Development of the
RT framework is part of an on-going effort to address se-
curity problems that arise when independent organizations
enter into coalitions whose membership and very existence
change rapidly. A coalition may be formed by several au-
tonomous organizations wishing to share resources. While
sharing resources, each organization retains ultimate au-
thority over the resources it controlled prior to entering the
coalition. We call such systems decentralized collaborative
systems, since they have no single central authority.
Access control in decentralized collaborative systems
presents difﬁcult problems, particularly when resources and
the subjects requesting them belong to different security do-
mains controlled by different authorities. Traditional access
control mechanisms make authorization decisions based on
Some trust management
systems,
the identity of the resource requester. Unfortunately, when
the resource owner and the requester are unknown to one
another, access control based on identity may be ineffec-
tive. In [3], Blaze, Feigenbaum, and Lacy coined the term
“trust management” to group together some principles deal-
ing with decentralized authorization.
(TM)
such as
KeyNote [2] and SPKI/SDSI [8, 10], use credentials to dele-
gate permissions. Each credential delegates certain permis-
sions from its issuer to its subject. A chain of one or more
credentials acts as a capability, granting certain permissions
to the subject of the last credential in the chain. However,
even such capability-style systems do not address the dis-
tributed nature of authority in a decentralized environment.
Consider an simple example: A book store wants to give
15% discount to students of a nearby university.
Ideally,
the book store would express this policy in one statement,
and a student could get the discount by showing her student
ID, issued by the university. However, one cannot follow
this simple approach in capability-style TM systems. For
instance, in KeyNote or SPKI 1.01, one cannot express the
statement that anyone who is a student is entitled to a dis-
count. Instead, there are two alternative approaches, neither
of which is satisfactory. One is to have the book store del-
egate the discount permission to the university’s key. Then
the university’s key explicitly delegates this permission to
each student’s key. This places too heavy an administra-
tive burden on the university, since there could be many
businesses giving discounts to students, each of which re-
quires a separate delegation by the university to each stu-
dent. In the second approach, the university would create a
new key pair representing the group of all students. Each
student ID would then be a complete delegation from this
group key to the student’s public key. This would allow
the bookstore to establish the student discount policy by is-
1We use SPKI 1.0 to denote the part of SPKI/SDSI 2.0 [8, 10] origi-
nally from SPKI, i.e., 5-tuples, and SDSI 1.0 to denote the part of SDSI
originally from SDSI, i.e., name certiﬁcates (or 4-tuples as called in [10]).
1
suing a credential granting the discount to the group key.
However, this approach requires the university to manage a
separate public/private key pair for each meaningful group.
It also requires group public keys to be distributed to entities
like book stores. Furthermore, the bookstore needs to know
which key corresponds to the group of students; this would
require another public-key infrastructure. Moreover, using
one key pair to represent each group provides very limited
expressive power. A student ID takes the form of a com-
plete delegation from the group key and cannot contain any
application-independent attribute information about the stu-
dent, such as department, year, etc., which are often useful
in deriving other attributes or making access control deci-
sions.
To simplify authorization in collaborative environments,
we need a system in which access control decisions are
based on authenticated attributes of the subjects, and at-
tribute authority is decentralized. We call such systems
attribute-based access control (ABAC) systems. We argue
that an expressive ABAC system should be able to express
the following:
1. Decentralized attributes: an entity asserts that another
entity has a certain attribute.
2. Delegation of attribute authority: an entity delegates
the authority over an attribute to another entity, i.e., the
entity trusts another entity’s judgement on the attribute.
3. Inference of attributes: an entity uses one attribute to
make inferences about another attribute.
4. Attribute ﬁelds. It is often useful to have attribute cre-
dentials carry ﬁeld values, such as age and credit limit.
It is also useful to infer additional attributes based on
these ﬁeld values and to delegate attribute authority to
a certain entity only for certain speciﬁc ﬁeld values,
e.g., only when spending level is below a certain limit.
5. Attribute-based delegation of attribute authority. A
key to ABAC’s scalability is the ability to delegate to
strangers whose trustworthiness is determined based
on their own certiﬁed attributes. For example, one may
delegate the authority on (identifying) students to enti-
ties that are certiﬁed universities, and delegate the au-
thority on universities to an accrediting board. By do-
ing so, one avoids having to know all the universities.
Using KeyNote, SPKI 1.0, or X.509 attribute certiﬁ-
cates [11], one cannot express inference of attributes or
attribute-based delegation. SDSI 1.0 or even SPKI/SDSI
2.0 do not support attribute ﬁelds. Neither TPL [15] nor
the language in [4] supports delegation of authority over ar-
bitrary attributes. Although one can use Delegation Logic
(DL) [17, 19] to express all of the above, it is not very con-
venient. Through a basic attribute credential, a designated
issuer should be able to express the judgement that a subject
has a certain attribute. A basic certiﬁcate in DL has only an
issuer and a statement. Although one can encode the sub-
ject and attribute together in a statement, DL lacks the ex-
plicit subject abstraction, which we desire for the following
reasons. The explicit abstraction allows clear, concise rep-
resentation of attribute-based delegation, e.g., in the form
of linked local names in SDSI. The subject abstraction also
enables distributed storage and discovery of credentials, as
shown in [20]. It also enables us to view attributes simi-
larly to roles in role-based access control (RBAC) [23], and
to use concepts similar to role activations to enable entities
to make selective use of those roles. Another TM system
SD3 [16] can be viewed as Delegation Logic without del-
egation constructs; it does not have the subject abstraction
either.
RT is our proposal for meeting the requirements of
ABAC systems. RT uses the notion of roles to represent
attributes. A role in RT deﬁnes a set of entities who are
members of this role. A role can be viewed as an attribute:
An entity is a member of a role if and only if it has the
attribute identiﬁed by the role. This notion of roles also
captures the notions of groups in many systems.
RT combines the strengths of RBAC and trust-
management (TM) systems. From RBAC, it borrows the
notions of role, interposed in the assignment of permissions
to users to aid organizing those assignments, and of sessions
and selective role activations. From TM, RT borrows prin-
ciples of managing distributed authority through the use of
credentials, as well as some clear notation denoting relation-
ships between those authorities, e.g., localized name spaces
and linked local names from SDSI. From DL, it borrows
the logic-programming-based approach to TM. In addition,
RT has policy concepts such as intersections of roles, role-
product operators, manifold roles, and delegation of role ac-
tivations. These concepts can express policies that are not
possible to express in existing systems; they can also ex-
press some other policies in more succinct or intuitive ways.
The most basic part of RT , RT0, was presented in [20],
together with algorithms that search for chains of RT0 cre-
dentials, and a type system about credential storage that en-
sures chains can be found among credentials whose storage
is distributed. RT0 meets four of the ﬁve requirements listed
above; it doesn’t supports attribute ﬁelds.
In this paper,
we present four additional components of the RT frame-
work: RT1, RT2, RT T , and RT D. RT1 adds to RT0 pa-
rameterized roles, which can express attribute ﬁelds. RT2
adds to RT1 logical objects, which can group logically re-
lated objects together so that permissions about them can
be assigned together. RT T provides manifold roles and
role-product operators, which can express threshold and
separation-of-duty policies. RT D provides delegation of
role activations, which can express selective use of capaci-
2
ties and delegation of these capacities.
Our goal in designing RT is an expressive yet clean sys-
tem with an intuitive, formally deﬁned, and tractable seman-
tics. We formally deﬁne the semantics of RT credentials by
presenting a translation from credentials to negation-free,
safe Datalog rules. This guarantees that the semantics is
precise, monotonic, and algorithmically tractable.
In de-
centralized collaborative systems, there must be agreement
on the meaning of credentials. Because Datalog is a subset
of ﬁrst-order predicate calculus, it provides a clear semantic
point of reference. Monotonicity of the semantics is impor-
tant, especially in distributed environments, since to deal
with non-monotonicity, one typically needs complete infor-
mation, which is very hard to obtain in distributed environ-
ments. A Datalog rule is safe if all variables in its head also
appear in the body. This guarantees that the set of conclu-
sions it generates is ﬁnite and bounded. The requirement
that each RT credential can be translated to a negation-
free, safe Datalog rule is the main constraint on expressivity
guiding the design of RT features presented here.
The rest of this paper is organized as follows. In sec-
tion 2, we give an overview of the main features and com-
ponents of RT . In sections 3, 4, 5, and 6, we introduce four
components: RT1, RT2, RT T , and RT D, respectively. We
then discuss the current status of RT , implementation is-
sues, future and related work in section 7, and conclude in
section 8.
2 An Overview to the RT framework
In this section, we introduce core concepts in the RT
framework and summarize the different components in RT .
2.1 Entities and roles
An entity in RT is a uniquely identiﬁed individual or
process. Entities are also called principals in the literature.
They can issue credentials and make requests. RT assumes
that one can determine which entity issued a particular cre-
dential or a request. Public/private key pairs clearly make
this possible. In some environments, an entity could also
be, say, a secret key or a user account. In this paper, we use
A, B, and D, sometimes with subscripts, to denote entities.
A role in RT deﬁnes a set of entities who are members of
this role.
In role-based access control (RBAC) [23],
there are
users, roles, and permissions. Roles in RBAC form a mid-
dle layer between users and permissions, thus simplify-
ing the management of the many-to-many relationships be-
tween users and permissions. Permissions are associated
with roles, and users are granted membership in appropriate
roles, thereby acquiring the roles’ permissions. More ad-
vanced RBAC models include role hierarchies. A role hier-
archy extends the role layer to have multiple layers, thereby
further reducing the number of relationships that must be
managed. Role hierarchies are partial orders. If one role,
r1, dominates another, r2, (written r1 (cid:23) r2), then r1 has
every permission that r2 has.
Entities in RT correspond to users in RBAC. Roles in
RT can represent both roles and permissions from RBAC.
In RT , we view user-role assignments and role-permission
assignments also as domination relationships. Assigning a
user u to a role r can be represented as u (cid:23) r. And assign-
ing a permission p to a role r can be represented as r (cid:23) p.
In this way, user-role assignments, the role hierarchy, and
role-permission assignments together deﬁne a uniform par-
tial order over users, roles, and permissions. In addition to
its implications for permissions, r1 (cid:23) r2 can equivalently
be read as implying that any user who is a member of r1 is
also automatically a member of r2. We say that r2 contains
(all the user members of) r1. The contains ordering is the
inverse of the dominates ordering. A partial order can be de-
ﬁned using either. RT uses the contains ordering, because
it is entity centric and corresponds better to the attribute in-
terpretation of roles.
2.2 Localized authority for roles
RBAC was developed for access control in a single orga-
nization. Some authors consider it an essential characteris-
tic of RBAC that the control of role membership and role
permissions be relatively centralized in a few users [23].
This centralized control feature does not work well in dis-
tributed collaborative systems. To handle the decentralized
nature of distributed collaborative systems, RT borrows
from existing trust-management systems, since the focus
of these systems is decentralized control. In particular, we
borrow from SDSI the concepts of localized name spaces.
In SDSI, a local name is formed by an entity followed by
a name identiﬁer. Each entity has its own localized name
space and is responsible for deﬁning local names in its own
name space.
In RT , a role is denoted by an entity followed by a role
name, separated by a dot. We use R, often with subscripts,
to denote role names. A role A.R can be read as A’s R role.
Only A has the authority to deﬁne the members of the role
A.R, and A does so by issuing role-deﬁnition credentials.
Each credential deﬁnes one role to contain either an entity,
another role, or certain other expressions that evaluate to a
set of entities. A role may be deﬁned by multiple creden-