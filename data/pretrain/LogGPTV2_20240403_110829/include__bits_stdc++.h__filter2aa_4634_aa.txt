#include 
using namespace std;
struct RNG {
    random_device dev;
    mt19937_64 rng;
    RNG() : dev(), rng(dev()) {}
    RNG(uint64_t seed) : rng(seed) {}
    bool next_bit() { return rng() & 1; }
    // For when we want to hide the RNG state
    uint64_t next_qword_safe() {
        uint64_t res = 0;
        for (int i = 0; i ;
struct Matrix {
    vector elements;
    Matrix(int rows, int cols)
            : elements(rows, Vector(cols)) {}
    auto rows() const { return elements.size(); }
    auto cols() const { return elements[0].size(); }
    auto operator*(const Vector& v) const {
        assert(v.size() == cols());
        Vector res(rows());
        for (size_t i = 0; i < rows(); ++i) {
            Vector mul = elements[i] * v;
            res[i] = accumulate(begin(mul), end(mul), uint64_t{0});
        }
        return res;