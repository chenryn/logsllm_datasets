field. See Figure 8 for illustration. We say that a fruit Bf is recent w.r.t.
a chain C if the fruit parent of Bf is a block that is at most R deep in C,
where R is called the recency parameter. The FruitChains protocol
requires that blocks only include recent fruits. Intuitively, the reason
why fruits need to be recent is to prevent the “fruit withhold attack”:
without it, an attacker could withhold fruits, and suddenly release
lots of them at the same time, thereby creating a very high fraction
of adversarial fruits in some segment of the chain.
We term a blockchain protocol as fair if players controlling a ϕ
fraction of the computational resources will reap a ϕ fraction of
the rewards. Intuitively, the reason why the FruitChains protocol
guarantees fairness is that even if an adversary tries to “erase” some
block mined by an honest player (which contains some honest fruits),
by the liveness of the longest chain protocol, eventually an honest
player will mine a new block including those fruits and the block will
be stable – in fact, by setting the recency parameter R reasonably
large, we can make sure that any fruit mined by an honest player will
be included sufficiently deep in the chain. And further, if rewards
and transaction fees are evenly distributed among the fruits in the
Figure 6: OHIE with fixed difficulty. Each block has a tuple
(rank,next_rank). In this figure, a block that is at least 2-deep
in its chain is partially-confirmed. The blocks arrive in this
order: B00, B10, B20, B01, B02, B03, B04, B11, B12, B13, B14,
B21, B22, B23.
Figure 7: OHIE with variable difficulty. Each block has a tuple
(rank,next_rank). In this figure, a block that is at least 2-deep
in its chain is partially-confirmed. The width of a block
represents its mining difficulty. Different from the fixed
difficulty algorithm, the mining difficulty is adjusted every 3
blocks on chain 0; Each block B on chain i (i >0) has a chain 0
parent (shown by the red reference link), which decides the
mining difficulty of B. The blocks arrive in this order: B00,
B10, B20, B11, B01, B02, B03, B04, B12, B13, B21, B05, B14, B22.
of the longest chain rule.
• Each individual chain follows the heaviest chain rule instead
• The mining difficulty of chain 0 is adjusted the same way as
the Bitcoin rule [13].
• Following our design principle M1, each block B on chains
1,2,...,(m−1) will also have a chain 0 parent ˆB (assigned before
mining). The mining difficulty of B is the same as the difficulty
used to mine a child block of ˆB. To prevent the adversary from
adopting an old mining difficulty from chain 0, we require
that on each chain the referred chain 0 parent should have
non-decreasing chain difficulty (M2). As an example in Fig-
ure 7, each block on chain 1 and chain 2 refers to (shown in
red dashed arrow) a chain 0 parent with non-decreasing chain
difficulty, which decides the mining difficulty of the block.
• A straightforward adoption on how to decide the next_rank
of a block would follow from our design principle M3. Let B
be the set of all tips of the m heaviest chains before B is added
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea17066 SECURITY ANALYSIS
6.1 Desired Security Properties
Notation6.1. WedenotebyC⌈ℓ thechainresultingfrom“pruning”
the blocks with timestamps within the last ℓ rounds. If C1 is a prefix
of C2, we write C1 ≺ C2. The latest block in the chain C is called the
head of the chain and is denoted by head(C). We denote by C1∩C2 the
common prefix of chains C1 and C2. We say that a chain C is held by or
belongs to an honest party if it is one of the heaviest chains in its view.
The following two properties called common prefix and chain
quality, are essential in proving the persistence and liveness of the
transaction ledger. The common prefix property states that any two
honest parties’ chains at two rounds have the earlier one subsumed
in the later as long as the last a few blocks are removed, while chain
quality quantifies the contributions of the honest parties to any
sufficiently long segment of the chain.
Definition 6.2 (Common Prefix). The common prefix property
with parameter ℓcp ∈ N states that for any two honest players holding
chains C1, C2 at rounds r1, r2, with r1 ≤ r2, it holds that C⌈ℓcp
≺C2.
Definition 6.3 (Chain Quality). The chain quality property is
defined for two parameters ℓcq ∈ N and µ ∈ R. Let C be a chain held
by any honest party at round r and let S0 ⊆[0,r] be an interval with at
least ℓcq consecutive rounds. Let C(S0) be the segment of C containing
blocks with timestamps in S0 and d be the total difficulty of all blocks
in C(S0). The chain quality property states that the honest blocks in
C(S0) have a total difficulty of at least µd.
1
In the context of Prism, let LedSeqd(r) be the leader sequence up
to difficulty level d at round r. And the leader sequence at the end of
round rmax, the end of the protocol execution, is the final leader se-
quence, LedSeqd(rmax). Then similar to a single chain, we can define
the following properties on the leader sequence.
LedSeqd(r) = LedSeqd(rmax) ∀r ≥ Rd +ℓlscp.
Definition 6.4 (Leader Seqence Common Prefix ). The leader
sequence common prefix property with parameter ℓlscp ∈ N states that
for a fixed difficulty level d, let Rd be the first round in which a proposer
block covering d was received by all honest players, then it holds that
(2)
Definition6.5(LeaderSeqenceQuality). Theleadersequence
property is defined for two parameters ℓlsq ∈ N and µ ∈ R. Let C be a
proposer chain held by any honest party at round r and let D be the
difficulty range covered by all blocks in C with timestamps in the last
ℓlsq rounds. The leader sequence quality property states that leader
blocks mined by honest players cover at least µ fraction of D.
Our goal is to generate a robust transaction ledger that satisfies
persistence and liveness as defined in [11, 27].
Definition 6.6 (from [11, 27]). A protocol Π maintains a robust
public transaction ledger if it organizes the ledger as a blockchain of
transactions and it satisfies the following two properties:
• (Persistence) Consider the confirmed ledger L1 on any node u1
at any round r1, and the confirmed ledger L2 on any node u2
at any round r2 (here u1 (r1) may or may not equal u2 (r2)). If
r1 +∆ τT
otherwise
Figure 9: Proof sketch for Prism. M1, M2 and M3 are crucial
in proving these properties for the leader sequence.
• (Liveness) Parameterized by u ∈ R, if a transaction tx is received
by all honest nodes for more thanu rounds, then all honest nodes
will contain tx in the same place in the confirmed ledger.
6.2 Proof Sketch
Since there is a pivot chain in all three protocols (by M1), the first step
of our analysis is to prove some desired properties (including chain
growth, common prefix, and chain quality) of the pivot chain. As the
pivot chain just follows the difficulty adjustment rule as in Bitcoin,
we can directly borrow results from a beautiful paper [13]. The key
step is to show that by adopting the heaviest pivot chain, honest
nodes are always mining with “reasonable” block difficulties (this is
formally defined as Good round/chain in Section 6.3). We state all the
useful lemmas and summarize the proof from [13] in Appendix B.
The key technical challenge involves analyzing the properties
of the non-pivot chains. Unlike in a pivot chain where all blocks in
an epoch will have the same block difficulty, the block difficulties
may experience sudden changes in non-pivot chains. This presents
a significant barrier to surmount in our analysis, and differs from
previous work in this area. Recall that M1 ensures that an honest
party chooses the target of the next block in a non-pivot chain from
the tip of the heaviest pivot chain in its view. Hence, the targets
used by an honest party for the non-pivot chains are also reasonable.
Then how about the non-pivot-chain blocks mined by the adversary?
As discussed in Section 3, allowing the miners to choose arbitrary
mining difficulty in a non-pivot chain is risky. So we use the mono-
tonicity condition M2 to ensure that non-pivot-chain blocks also
have “reasonable” block difficulties even if the adversary mines them.
Then we prove that any two heaviest non-pivot chains cannot
diverge for too long to prove the common prefix property. We do
this by considering two non-pivot chains C1 and C2 (in one of the
non-pivot block tree) that diverge for too long and consider the last
common honest block B of C1 and C2. M2 ensures that the blocks
arriving after B should refer to a pivot-chain block with monoton-
ically non-decreasing chain difficulty than the one referred by B. We
also argue that the chain difficulty intervals covered by uniquely
successful honest blocks (defined as honest blocks that are mined
more than ∆ rounds apart) in chains C1 and C2 do not overlap similar
to the analysis for the common prefix in [13]. To make C1 and C2
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1708where n(T ,Λ) =2κ Φ/T Λ, with Λ =rΦ′−rΦ′−Φ, T =T(r1...rΦ′−1), and
Φ′ = Φ⌊v/Φ⌋.
We now define a notion of “good” properties such as good round
and good chain. These properties will bound the targets used by the
honest parties, which will help us prove chain quality and common
prefix.
Definition 6.8 (Good round, from [13]). Let T min
and T max
r
denote the minimum and the maximum targets thenr honest parties are
querying the oracle for in round r. Round r is good if f /2γ
2 ≤pnrT min
and pnrT max
≤(1+δ)γ
f .
2
r
r
r
Definition 6.9 (Good chain, from [13]). Round r is a target-
recalculation point of a pivot chain C, if C has a block with timestamp
r and height a multiple of Φ. A target-recalculation point r is good if
the targetT of the next block satisfies f /2γ ≤pnrT ≤(1+δ)γ f . A pivot
chain C is good if all its target-recalculation points are good.
We will use the superscript P to denote the variables, blocks,
chains and sets corresponding to the pivot chain/tree and i to denote
the ones of the ith non-pivot chain/tree.
At any round r of an execution, the adversary may keep chains in
private that have the potential to be adopted by an honest party (be-
cause the private chains are heavier than the heaviest chain adopted
by the honest party). So, we expand our chains of interest beyond
the chains that belong to an honest party. For every non-pivot tree
and the pivot tree, we define a set of valid chainsSP
r [13] that
include the chains that belong to or have the potential to be adopted
by an honest party.
r andSi
r ∈S Qi
r ∈S Di
r ∈S QP
r ,Qi(S) =
r ,QP(S) =
of rounds S, we define DP(S) =
Di(S) =
We will be dealing with random variables to quantify the diffi-
culty accumulated by the honest parties and the adversary in our
analysis. At round r, define the real random variable DP
r equal to the
sum of the difficulties of all pivot-chain blocks computed by honest
r to equal the maximum difficulty among all
parties. Also, define Y P