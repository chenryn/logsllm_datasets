，
54
）
]
；
}
$password=md5
（
md5
（
$password.'*5t42g^_^$$FFSD'
）
.$salt
）；
echo $password
；？
>
将生成的salt存入数据库中，后期验证过程中将salt取出重新用MD5运算一下，对比结果即可知道密码是否正确。
12.5 登录限制
基于纵深防御的思想，假设前面所说的后台地址已经泄露，假设密码被社会工程学等方式窃取到，这种情况下我们就要考虑在登录这一层设置障碍，即使攻击者拿到密码也无法登录，想实现这一效果该怎么做呢，是做信誉体系？自动识别好人和坏人？这种方式很有效果，但是实现起来太庞大，一般的公司没有这样的数据基础去做件事，所以用代码来简单实现最简单的策略如下所示。
1）限制登录IP。只能固定IP访问，或者说公司内网访问，在外网需要访问的时候拨VPN即可。
2）双因素认证。限制内网IP是相对安全的，但是还不够安全，因为攻击者有很大的可能已经通过其他途径进入到内网，所以就需要用到双因素认证手段，比如手机验证码、动态令牌都是非常有效的方式，我们在渗透测试的时候经常遇到这种情况：拿到密码之后要双因素认证才能登录。
12.6 API站库分离
在很久以前就有不少网站使用站库分离这种方式，不过实现的方式不一样，大多数的站库分离只不过是把数据库放到另外一台服务器上，然后开放数据库端口给Web服务器，Web应用直接通过数据库密码操作数据，这样的方式只能优化服务器的效率，对于安全性的提高并没有什么帮助，笔者这里说的站库分离是采用API的方式调用数据，大概的原理如图12-8所示。
图 12-8
如果业务比较复杂，可以单独跑一台API服务器，数据库服务器配置只允许API服务器访问，流程如图12-9所示。
图 12-9
通过API实现站库分离的好处在于，攻击者即使拿到了Web服务器，也无法在短时间内将全部数据拖走，只要我们建立API接口监控，设置一个阈值，遇到监控接口突然被频繁调用的情况，则说明可能存在刷库行为，这也起到一种入侵检测的作用，当然这一切的前提是API服务器的安全要做好。
12.7 慎用第三方服务
第三方服务的分类有很多，这里说的第三方服务指的是第三方开放给Web应用的接口，或者JS等，CNZZ、百度统计以及广告等，就是非常典型的第三方服务，展现形式多种多样，如图12-10所示。
图 12-10
如图12-11所示为CNZZ用户数据分析，可以精确地统计访客的性别、年龄、职业，等等。
图 12-11
广告商通常都是事先收集用户访问过的网站，然后精准定向推送广告，这就需要一张大网，才能收集到访客的信息，比如使用CNZZ，需要在网站上插入一段JS代码，大致如下所示：
这段短小的代码会生成一段长长的JS，而一旦用户访问了我们的网站，用户的浏览器就会执行这段JS，JS可以做的事情很多，挂马、钓鱼、盗取cookie，甚至制造蠕虫病毒和发起DDOS攻击，一旦攻击者入侵CNZZ和广告商这些第三方服务之后，就可以间接入侵使用了这些服务的网站，危害非常大。如果一定要使用，建议选择权威一点的服务提供商。
12.8 严格的权限控制
用户权限控制涉及一个角色功能的问题，一种角色可以有多个用户，比如一个商城系统的角色可以分为：超级管理员、普通注册会员、商品管理员、文章管理员、会员管理员、系统设置管理员，订单管理员、评论反馈管理员，等等，如图12-12所示是ECShop后台角色配置页面，权限的控制划分得非常细。
图 12-12
细化权限也是安全体系中非常重要的一环，往往职位不高的人安全意识会比较薄弱，密码可能会设置得相对简单，给他较低的权限，就可以限制他的操作行为，从而提高安全性。
12.9 敏感操作多因素验证
多因素验证在很多操作中都适用，特别是敏感的操作，从业务逻辑上来说，不仅仅是后台的登录、修改配置等操作才算敏感，同样前台用户进行个人操作的时候也一样需要受到保护，阿里云在这方面做得非常好，如图12-13所示。
图 12-13
在阿里云进行诸如修改域名解析、修改服务器密码等操作时都需要验证手机短信，这样即使密码被泄露也无法进行这些敏感操作。
多因素认证从字面意思就可以理解，即添加多种验证方式，敏感操作多次验证权限，验证的方式有如下几种：
1）手机短信验证码。
2）手机语言验证码。
3）手机App动态令牌。
4）邮箱验证码。
5）实体令牌卡。
6）电子图片令牌卡。
7）硬件令牌。
验证方式层出不穷，我们在使用的时候需要根据业务的保密程度来确定使用哪种方式，因为每种方式的用户体验不同，像某银行开发的U盾使用的时候必须要用IE浏览器，然后安装各种驱动，折腾半天还要重启一下，最后发现还不一定能用，这种体验非常糟糕。
12.10 应用自身的安全中心
虽然现在基于主机WAF、云WAF随随便便都能列出一大堆，但是毕竟这些防御方案都不是定制化的，因为无法结合应用代码逻辑，所以无法很好地防御攻击和满足需求，而应用代码层的防御则可以大大利用白名单的优势，比如已经知道某个参数一定是INT类型，就可以在使用这个参数时将其转为INT类型，或者判断是否为数字，如果不是则将请求驳回，这些优势是其他层面的WAF无法取代的，因此应用自身的安全防御功能必不可少。
目前开源应用几乎都有自身的防御措施，比如phpcmsv9，其代码如下：
class param {
      //
路由配置
      private $route_config = ''
；
      public function __construct
（）
{
          if
（！
get_magic_quotes_gpc
（））
{
             $_POST = new_addslashes
（
$_POST
）；
             $_GET = new_addslashes
（
$_GET
）；
             $_REQUEST = new_addslashes
（
$_REQUEST
）；
             $_COOKIE = new_addslashes
（
$_COOKIE
）；
      }
在参数传入时会对$_GET/$_POST/$_COOKIE和$_REQUEST变量进行转义，然后在数据库操作时又会进行过滤，代码如下：
/**
*
安全过滤函数
*
* @param $string
* @return string
*/
function safe_replace
（
$string
）
{
    $string = str_replace
（
'%20'
，
''
，
$string
）；
    $string = str_replace
（
'%27'
，
''
，
$string
）；
    $string = str_replace
（
'%2527'
，
''
，
$string
）；
    $string = str_replace
（
'*'
，
''
，
$string
）；
    $string = str_replace
（
'"'
，
'&quot
；
'
，
$string
）；
    $string = str_replace
（
"'"
，
''
，
$string
）；
    $string = str_replace
（
'"'
，
''
，
$string
）；
    $string = str_replace
（
'
；
'
，
''
，
$string
）；
    $string = str_replace
（
''
，
'&gt
；
'
，
$string
）；
    $string = str_replace
（
"{"
，
''
，
$string
）；
    $string = str_replace
（
'}'
，
''
，
$string
）；
    $string = str_replace
（
'\\'
，
''
，
$string
）；
    return $string
；
}
/**
* xss
过滤函数
*
* @param $string
* @return string
*/
function remove_xss
（
$string
）
{
    $string = preg_replace
（
'/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+/S'
，
''
，
$string
）；
    $parm1 = Array
（
'javascript'
，
'vbscript'
，
'expression'
，
'applet'
，
'meta'
，
'xml'
，
'blink'
，
'link'
，
'script'
，
'embed'
，
'object'
，
'iframe'
，
'frame'
，
'frameset'
，
'ilayer'
，
'layer'
，
'bgsound'
，
'title'
，
'base'
）；
    $parm2 = Array
（
'onabort'
，
'onactivate'
，
'onafterprint'
，
'onafterupdate'
，
'onbeforeactivate'
，
'onbeforecopy'
，
'onbeforecut'
，
'onbeforedeactivate'
，
'onbeforeeditfocus'
，
'onbeforepaste'
，
'onbeforeprint'
，
'onbeforeunload'
，
'onbeforeupdate'
，
'onblur'
，
'onbounce'
，
'oncellchange'
，
'onchange'
，
'onclick'
，
'oncontextmenu'
，
'oncontrolselect'
，
'oncopy'
，
'oncut'
，
'ondataavailable'
，
'ondatasetchanged'
，
'ondatasetcomplete'
，
'ondblclick'
，
'ondeactivate'
，
'ondrag'
，
'ondragend'
，
'ondragenter'
，
'ondragleave'
，
'ondragover'
，
'ondragstart'
，
'ondrop'
，
'onerror'
，
'onerrorupdate'
，
'onfilterchange'
，
'onfinish'
，