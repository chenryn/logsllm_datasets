1n i∈{1..n} i
∑
Cost(t ) = Cost(t)
1n i
1≤i≤.n
Reduction rules exist for sequential, parallel, conditional, loop, and network systems
[1]. These systems or pattern are fundamental since a study on fifteen major workflow
management systems [10] showed that most systems support the reduction rules
presented. Nevertheless, additional reduction rules can be developed to cope with the
characteristics and features of specific workflow systems.
Our approach to workflow QoS estimation – which uses a variation of the SWR
algorithm – addresses the third point that we raised in the introduction and shows that
the prediction of workflow QoS can be used to obtain actual metrics (e.g. the
workflow instance w will take 3 days and 8 hours to execute) and not only
information that indicates if an instance takes “more” than D days or “less” than D
days to execute.
Fig. 4. The loan process
4 Experiments
In this section, we describe the data set that has been used to carry out workflow QoS
mining, how to apply different data mining algorithms and how to select the best ones
among them, and finally we discuss the results obtained. While we describe the
experiments carried out using the loan process application (see Figure 4), we have
replicated our experiments using a university administration process. The conclusions
that we have obtained are very similar to the one presented in this section.
4.1 Workflow scenario
A major bank has realized that to be competitive and efficient it must adopt a new and
modern information system infrastructure. Therefore, a first step was taken in that
direction with the adoption of a workflow management system to support its
processes. One of the services supplied by the bank is the loan process depicted in
Figure 4. While the process is simple to understand, a complete explanation of the
process can be found in [6].
4.2 Path mining
To carry out path mining we need to log information about the execution of workflow
instances. But before storing workflow instances data we need to extended our
workflow management log system, as explained in section 3.1, to store information
indicating the values of the input parameters passed to activities and the output
parameters received from activities (see [6, 7] for an overview of the information
typically stored in the workflow log). The information also includes the path that has
been followed during the execution of workflow instances.
To apply data mining algorithms to carry out path mining, the data present in the
workflow log need to be converted to a suitable format to be processed by data
mining algorithms. Therefore, we extract data from the workflow log to construct data
mining instances. Each instance will constitute an input to machine learning and is
characterized by a set of six attributes:
income, loan_type, loan_amount, loan_years, Name, SSN
The attributes are input and output parameters from the workflow activities. The
attributes income, loan_amount, loan_years and SSN are numeric, whereas the
attributes loan_type and name are nominal. Each instance is also associated with a
class (named [path]) indicating the path that has been followed during the execution
of a workflow when the parameters were assigned specific values. Therefore, the final
structure of a data mining instance is:
income, loan_type, loan_amount, loan_years, Name, SSN, [path]
In our scenario, the path class can take one of six possible alternatives indicating
the path followed during the execution of a workflow when activity parameters were
assigned specific values (see Figure 4 to identify the six possible paths that can be
followed during the execution of a loan workflow instance).
Having our extended log ready, we have executed the workflow from Figure 4 and
logged a set of 1000 workflow instance executions. The log was then converted to a
data set suitable to be processed by machine learning algorithms, as described
previously.
We have carried out path mining to our data set using four distinct data mining
algorithms: J48 [11], Naïve Bayes (NB), SMO [12], and MultiBoost [13]. J48 was
selected as a good representative of a symbolic method, Naïve Bayes as a
representative of a probabilistic method, and the SMO algorithm as representative of a
method that has been successfully applied in the domain of text-mining. Multiboost is
expected to improve performance of single classifiers with the introduction of meta-
level classification.
Since when we carry out path mining to a workflow not all the activity input/ouput
parameters may be available (some activities may not have been invoked by the
workflow management system when path mining is started), we have conducted
experiments with a variable number of parameters (in our scenario, the parameters
under analysis are: income, loan_type, loan_amount, loan_years, name, and SSN)
ranging from 0 to 6. We have conducted 64 experiments (26); analyzing a total of
64000 records containing data from workflow instance executions.
Accuracy of path mining. The first set of experiments was conducted using J48,
Naïve Bayes, and SMO methods with and without the Multiboost (MB) method. We
obtained a large number of results that are graphically illustrated in figure 5. The chart
indicates for each of the 64 experiments carried out, the accuracy of path mining.
Path Mining Accuracy Analyzis
1,0
J48
0,8 NB ycaruccA
SMO
0,6
MB J48
MB NB
0,4
MB SMO
0,2
1 6 11 16 21 26 31 36 41 46 51 56 61
Experiment
Fig. 5. Accuracy analysis of path mining
The chart indicates, for example, that in experiment nº12, when we use two
parameters to predict the path that will be followed by a workflow instance from
Figure 4, we achieve a prediction accuracy of 87,13% using the J48 algorithm. Due to
space limitation, the chart in Figure 4 does not indicate which parameters or the
number of parameters that have been utilized in each experiment.
Table 3. Summary results of accuracy analysis of path mining
J48 NB SMO
Avg 75,43% 78,84% 77,79%
acc.
Min 24,55% 30,84% 29,04%
acc.
Max 93,41% 96,41% 93,11%
acc.
MB MB MB
J48 NB SMO
Avg 79,74% 81,11% 78,28%
acc.
Min 24,55% 30,84% 29,04%
acc.
Max 94,61% 97,31% 96,11%
acc.
For reasons of simplicity and as a summary, we computed the average, the minimum,
and the maximum accuracy for each method for all the experiments carried out. The
results are shown in Table 3.
On average the Naïve Bayes approach performs better than all other single
methods when compared to each other. When the number of parameters is increased,
the accuracy of Naïve Bayes improves. It can be seen that all the methods produced
more accurate results when a more appropriate set of parameters was proposed. The
worst results were produced by the J48 and SMO algorithms. It is safe to assume that
these algorithms overfitted and were not able to find a generalized concept. That is
probably a result of the nature of the dataset that contains parameters and that
introduced noise. These results address the third point that was raised in the
introduction and show that path prediction using MultiBoost Naïve Bayes
outperforms the use of decision trees.
Next we added the meta-level of the multiboost algorithm and repeated the
experiments. As expected, the multiboost approach made more accurate prognoses.
All the classifiers produced the highest accuracy in experiment 16, since this
experiment includes the 4 most informative parameters (i.e. income, loan_type,
loan_amount, and loan_years). In order to evaluate which parameters are the most
informative, we have used information gain.
4.3 QoS activity model construction
Once we have determined the most probable path that will be followed by a workflow
at runtime, we know which activities a workflow instance will be invoking. At this
stage, we need to construct a QoS activity model from each activity of the workflow.
Since this phase is independent of the previous one, in practice it can be carried out
before path mining.
Since we have fourteen activities in the workflow illustrated in Figure 4, we need
to construct fourteen QoS activity models. Each model is constructed using a profiling
methodology (profiling was described in section 3.2). When carrying out activity
profiling we determine the time an activity will take to be executed (i.e. Activity
Response Time (ART)) and its cost (i.e. Activity cost (AC)). Table 4 illustrates the
QoS activity model constructed for the Check Home Loan activity in Figure 4 using
profiling.
Table 4. QoS activity model for the Check Home Loan activity
Static QoS model
Min value Avg value Max value
Time (min) 123 154 189
Cost (euros) 4,80 5,15 5,70
This static QoS activity model was constructed using activity profiling. When a
sufficient number of workflows have been executed and the log has a considerable
amount of data, we re-compute the static QoS activity at runtime, originating a
dynamic QoS activity model. The re-computation is done based on the functions
presented in Table 2. Due to space limitations we do not show the dynamic QoS
activity model. It has exactly the same structure as the model presented in Table 4, but
with more accurate values since they reflect the execution of activities in the context
of several possible workflows.
4.4 Workflow QoS Estimation
As we have already mentioned, to compute the estimated QoS of a workflow in
execution, we use a variation of the Stochastic Workflow Reduction (SWR)
algorithm. The SWR aggregates the QoS activity models of each activity step-by-step.
At each step a reduction rule is applied to transform and shrink the process and the
time and cost of the activities involved is computed. This is continued until only one
activity is left in the process. When this state is reached, the remaining activity
contains the QoS metrics corresponding to the workflow under analysis. A graphical
simulation of applying the SWR algorithm to our workflow scenario is illustrated in
Figure 6.
Fig. 6. SWR algorithm applied to our workflow example
The initial workflow (a) is transformed to originate workflow b) by applying the
conditional reduction rule to two conditional structures identified in the figure with a
box (dashed line). Workflow b) is further reduced by applying the sequential
reduction rule to three sequential structures also identified with a box (dashed line).
The resulting workflow, workflow c), is transformed several times to obtain workflow
d) and, finally, workflow e). The final workflow (e) is composed of only one activity.
Since at each transformation step SWR algorithm aggregates the QoS activity models
involved in the transformation, the remaining activity contains the QoS metrics
corresponding to the initial workflow under analysis.
4.5 QoS experimental results
Our experiments have been conducted in the following way. We have selected 100
random workflow instances from our log. For each instance, we have computed the
real QoS (time and cost) associated with the instance. We have also computed the
predicted QoS using our method. The results of QoS prediction for the loan process
are illustrated in Figure 7.
Time Prediction (MB NB)
8 DM Time Real Time
6
Real Time emiT
4 DM Time
2
0
1 15 29 43 57 71 85 99
Process Instance #
Fig. 7. QoS prediction for time
Cost Prediction (MB NB)
60
55 DM Cost Real Cost
50
45
Real Cost tsoC
40
DM Cost
35
30
25
20
1 15 29 43 57 71 85 99
Process Instance #
Fig. 8.. QoS prediction for cost
The results clearly show that the QoS mining method yields estimations that are very
close to the real QoS of the running processes.
5 Related Work
Process and workflow mining is addressed in several papers and a detailed survey of
this research area is provided in [14]. In [3, 4], a Business Process Intelligence (BPI)
tool suite that uses data mining algorithms to support process execution by providing
several features, such as analysis and prediction is presented. In [15] and [16] a
machine learning component able to acquire and adapt a workflow model from
observations of enacted workflow instances is described. Agrawal, Gunopulos et al.
[17] propose an algorithm that allows the user to use existing workflow execution
logs to automatically model a given business process presented as a graph.
Chandrasekaran et al., [2] describe a simulation coupled with a Web Process Design
Tool (WPDT) and a QoS model [1] to automatically simulate and analyze the QoS of
Web processes. While the research on QoS for BMPS is limited, the research on time
management, which is under the umbrella of QoS process, has been more active and
productive. Eder et al. [18] and Pozewaunig et al. [19] present an extension of CMP
and PERT frameworks by annotating workflow graphs with time, in order to check
the validity of time constraints at process build-time.
6 Conclusions
The importance of QoS (Quality of Service) management for organizations and for
workflow systems has already been much recognized by academia and industry. The
design and execution of workflows cannot be undertaken while ignoring the
importance of QoS measurements since they directly impact the success of
organizations. In this paper we have shown a novel method that allows us to achieve
high levels of accuracy when predicting the QoS of workflows. Our first conclusion
indicates that workflow QoS mining should not be applied as a one-step methodology
to workflow logs. Instead, if we use a methodology that includes path mining, QoS
activity models, and workflow QoS estimation, we can obtain very good prediction
accuracy. Our second conclusion indicates that the MultiBoost (MB) Naïve Bayes
approach is the data mining algorithm that yields the best workflow QoS prediction
results.
References
[1]. Cardoso, J., et al., Modeling Quality of Service for workflows and web service processes. Web
Semantics: Science, Services and Agents on the World Wide Web Journal, 2004. 1(3): p. 281-308.
[2]. Chandrasekaran, S., et al. Service Technologies and their Synergy with Simulation. in Proceedings of
the 2002 Winter Simulation Conference (WSC'02). 2002. San Diego, California. p. 606-615.
[3]. Grigori, D., et al., Business Process Intelligence. Computers in Industry, 2004. 53: p. 321–343.
[4]. Grigori, D., et al. Improving Business Process Quality through Exception Understanding, Prediction,
and Prevention. in 27th VLDB Conference. 2001. Roma, Italy.
[5]. Cardoso, J. and A. Sheth. Adaptation and Workflow Management Systems. in International
Conference WWW/Internet 2005. 2005. Lisbon, Portugal. p. 356-364.
[6]. Cardoso, J., Path Mining in Web processes using Profiles, in Encyclopedia of Data Warehousing and
Mining, J. Wang, Editor. 2005, Idea Group Inc. p. 896-901.
[7]. Cardoso, J. and M. Lenic, Web Process and Workflow Path mining using the multimethod approach.
Journal of Business Intelligence and Data Mining (IJBIDM). submitted., 2005.
[8]. Musa, J.D., Operational Profiles in Software-Reliability Engineering. IEEE Software, 1993. 10(2): p.
14-32.
[9]. Musa, J.D., Software reliability engineering: more reliable software, faster development and testing.
1999, New York: McGraw-Hill.
[10]. Aalst, W.M.P.v.d., et al., Workflow patterns homepage. 2002,
http://tmitwww.tm.tue.nl/research/patterns.
[11]. Weka, Weka. 2004.
[12]. Platt, J., Fast training of support vector machines using sequential minimal optimization, in Advances
in Kernel Methods - Support Vector Learning, B. Scholkopf, C.J.C. Burges, and A.J. Smola, Editors.
1999, MIT Press: Cambridge, MA. p. 185-208.
[13]. Webb , I.G., MultiBoosting: A Technique for Combining Boosting and Wagging. Machine Learning,
2000. 40(2): p. 159-196.
[14]. Aalst, W.M.P.v.d., et al., Workflow Mining: A Survey of Issues and Approaches. Data & Knowledge
Engineering (Elsevier), 2003. 47(2): p. 237-267.
[15]. Herbst, J. and D. Karagiannis. Integrating Machine Learning and Workflow Management to Support
Acquisition and Adaption of Workflow Models. in Ninth International Workshop on Database and
Expert Systems Applications. 1998. p. 745-752.
[16]. Weijters, T. and W.M.P. van der Aalst. Process Mining: Discovering Workflow Models from Event-
Based Data. in 13th Belgium-Netherlands Conference on Artificial Intelligence (BNAIC 2001). 2001.
Amsterdam, The Netherlands. p. 283-290.
[17]. Agrawal, R., D. Gunopulos, and F. Leymann. Mining Process Models from Workflow Logs. in Sixth
International Conference on Extending Database Technology. 1998. Valencia, Spain: Springer. p.
469-483.
[18]. Eder, J., et al. Time Management in Workflow Systems. in BIS'99 3rd International Conference on
Business Information Systems. 1999. Poznan, Poland: Springer Verlag. p. 265-280.
[19]. Pozewaunig, H., J. Eder, and W. Liebhart. ePERT: Extending PERT for workflow management
systems. in First European Symposium in Advances in Databases and Information Systems (ADBIS).
1997. St. Petersburg, Russia. p. 217-224.