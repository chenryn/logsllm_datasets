### χI ⊢ ∀~x. (g → ϕ) : δg ∪ δc
**Univ**

The first premise of UNIV ensures that there are only a finite number of substitutions for ~x that satisfy g with respect to χI and the equality scheme δg. This is essential for the termination of ereduce. The second and third premises verify that g provides concrete substitutions for all quantified variables ~x and its own free variables. The last premise confirms that ϕ is well-moded.

### 8. IMPLEMENTATION AND EVALUATION

We have implemented EunomiaDET, EunomiaKH, ereduceDET, and ereduceKH using OpenSSL version 1.0.1e. For deterministic encryption, we use AES with a variant of the CMC mode [22] with a fixed IV and a 16-byte block size, employing 256-bit keys. For the AKH scheme, we utilize the library by Popa et al. [34]. The underlying elliptic curve is the NIST-approved NID X9 62 prime192v1.

#### Empirical Evaluation

We report our empirical evaluation of ereduceDET and ereduceKH. Experiments were conducted on a 2.67GHz Intel Xeon X5650 CPU with Debian Linux 7.6 and 50GB of RAM, where no more than 3.0 GB was used in any experiment. SQLite version 3.8.7.1 was used to store both plaintext and encrypted logs. We aggressively indexed all database columns in input argument positions. In EunomiaDET, the index is built over deterministically encrypted values; in EunomiaKH, it is built over hashed values. We used privacy policies derived from the GLBA and HIPAA privacy rules, covering 4 and 13 representative clauses, respectively.

We generated synthetic plaintext audit logs. Given an input policy and a desired number of privacy-sensitive actions, our log generation algorithm randomly decides whether each action will be policy-compliant or not. For compliant actions, the algorithm traverses the abstract syntax tree of the policy and generates instances of atoms that satisfy the policy. For non-compliant actions, we randomly choose atoms to falsify a necessary condition. Our synthetic log generator also outputs the mOPED data structure but with plaintext values for timestamps. Logs containing between 2,000 and 14,000 privacy-sensitive actions were generated. Each plaintext log was separately encrypted with the EunomiaDET and EunomiaKH schemes. The maximum plaintext audit log size considered was 17 MB. The corresponding maximum encrypted log sizes in EunomiaDET and EunomiaKH were 67.3 MB and 267 MB, respectively. Most of the size overhead in the EunomiaKH-encrypted log comes from the keyed hashes.

We measured the relative overhead of running ereduce on logs encrypted with EunomiaDET and EunomiaKH, using reduce on plaintext audit logs as the baseline. We experimented with both RAM-backed and disk-backed versions of SQLite, reporting only the memory-backed results (disk-backed results are similar). Figure 4 shows the average execution time per privacy-sensitive action for the HIPAA policy in all three configurations (GLBA results are similar). The number of privacy-sensitive actions (and, hence, the log size) varies on the x-axis. The overhead of EunomiaDET is very low, ranging from 3% to 9%. This is expected because no cryptographic operations are needed during the audit. The overhead comes from reading and comparing longer (encrypted) fields in the log and using the mOPED data structure. With EunomiaKH, overheads are much higher, ranging from 63% to 406%. These overheads come from two sources: the cost of reading a much larger database and the cost of performing hash adjustments to check equality of values in different columns. The overhead due to the increased database size is more significant than that due to hash adjustment. For the policies we experimented with, the per-action overhead due to database size grows linearly, but the overhead due to hash adjustments is relatively constant. About 30% of ereduce's overhead when running on EunomiaKH comes from key-adjustments. Therefore, there is room for substantial improvement by caching previous key-adjustments, which we do not currently do.

### 9. RELATED WORK

#### Functional and Predicate Encryption

Functional encryption [13, 20, 27, 30] allows the declassification of any stipulated function of data, given only the ciphertext of the data and a decryption key. It can be used to implement audit over encrypted logs: The declassification function can perform the audit and return the outcome. However, existing functional encryption schemes are not efficient enough for practical audit. Property-preserving encryption [31] and predicate encryption [38, 14, 24] are special cases of functional encryption where the function returns a boolean value. Predicate encryption can be used to implement audit when the goal is to find whether there is a violation (a boolean outcome). However, this is usually insufficient for practical audit. Pandey and Rouselakis [31] describe several notions of security for symmetric predicate encryption. Our security definition IND-CPLADET (resp., IND-CPLAKH) is inspired by their LoR security definition.

#### Searchable Audit Log

Waters et al. [41] present a framework for log confidentiality and integrity with keyword search capability. They use hash chains for integrity and identity-based encryption [12] with extracted keywords to provide confidentiality and search [11]. In our work, we focus on confidentiality but not integrity. Complementary techniques can ensure the integrity of the audit log [36, 37, 25, 23]. Our framework supports more expressive policies than Waters et al. Additionally, audit requires timestamp comparison, which their framework does not support.

#### Order-Preserving Encryption

A symmetric encryption scheme that maintains the order of plaintext data is proposed by Boldyreva et al. [10]. This scheme does not satisfy the ideal IND-OCPA security definition. Popa et al. present the mOPE scheme, which we enhance to support timestamp comparison with displacements [33]. Recently, Kerschbaum and Schröpfer presented a keyless order-preserving encryption scheme for outsourced data [26]. In their approach, the owner of the plaintext data must keep a dictionary mapping plaintexts to ciphertexts, which is undesirable in our setting, where the objective is to outsource storage to the cloud.

#### Querying Outsourced Database

Hacigümüş et al. [21] developed a system that allows querying over encrypted data by asking the client to decrypt data. In contrast, our schemes require no interaction with the client for read-only queries. Tu et al. [40] introduced split client/server query execution for processing analytical queries on encrypted databases. Our schemes do not require any query processing on the client-side. Damiani et al. [17] developed a secure indexing approach for querying an encrypted database. In contrast, we do not require modification to the indexing algorithm of the DBMS.

CryptDB [34] uses a trusted proxy to dynamically choose an encryption scheme for each database column based on the query operations being performed on the column. CryptDB does not provide a complete, rigorous characterization of its confidentiality properties, which we do. However, CryptDB supports all SQL queries, whereas we cannot support aggregation queries.

#### Privacy Policy Compliance Checking

Prior work on logic-based compliance checking algorithms focuses on plaintext logs [8, 7, 9, 16, 19]. This paper adapts our prior work [19] to execute on encrypted logs. The key addition is the EQ mode check, which provides additional information about predicate arguments that may be compared for equality during the audit of a policy.

### 10. SUMMARY

In this paper, we presented two database encryption schemes, EunomiaDET and EunomiaKH, that reveal just enough information to allow projection, selection, join, comparison, and displaced comparison queries. We introduce a novel definition of database equivalence, characterizing the confidentiality properties provided by our schemes. We prove that our schemes are secure. As a concrete application, we show how to execute audit for privacy policy violations over logs encrypted using either of our schemes. This requires a new static analysis of policies, which tracks pairs of columns that may be joined during the audit.

### Acknowledgements

This work was partially supported by the NSF grants CNS 1064688, CNS 1116991, CNS 1314688, and CCF 042442, and the AFOSR MURI grant FA9550-11-1-0137. The authors thank the anonymous reviewers for their helpful comments.

### 11. REFERENCES

[1] Health Insurance Portability and Accountability Act, 1996. U.S. Public Law 104-191.
[2] Gramm-Leach-Bliley Act, 1999. U.S. Public Law 106-102.
[3] H. Andréká, I. Németi, and J. van Benthem. Modal languages and bounded fragments of predicate logic. Journal of Philosophical Logic, 27(3):217–274, 1998.
[4] K. Apt and E. Marchiori. Reasoning about Prolog programs: From modes through types to assertions. Formal Aspects of Computing, 1994.
[5] A. Askarov and A. Sabelfeld. Gradual release: Unifying declassification, encryption, and key release policies. In IEEE S&P, 2007.
[6] S. Bajaj and R. Sion. TrustedDB: A trusted hardware-based database with privacy and data confidentiality. In SIGMOD, 2011.
[7] D. Basin, F. Klaedtke, S. Marinovic, and E. Zalinescu. Monitoring of temporal first-order properties with aggregations. In RV, 2013.
[8] D. Basin, F. Klaedtke, S. Marinovic, and E. Zalinescu. Monitoring compliance policies over incomplete and disagreeing logs. In RV, 2012.
[9] A. Bauer, J.-C. Küster, and G. Vegliach. From propositional to first-order monitoring. In RV, 2013.
[10] A. Boldyreva, N. Chenette, Y. Lee, and A. O’Neill. Order-preserving symmetric encryption. In EUROCRYPT, 2009.
[11] D. Boneh, G. D. Crescenzo, R. Ostrovsky, and G. Persiano. Public key encryption with keyword search. Cryptology ePrint Archive, Report 2003/195.
[12] D. Boneh and M. Franklin. Identity-based encryption from the Weil pairing. In CRYPTO, 2001.
[13] D. Boneh, A. Sahai, and B. Waters. Functional encryption: Definitions and challenges. In TCC, 2011.
[14] D. Boneh and B. Waters. Conjunctive, subset, and range queries on encrypted data. In TCC, 2007.
[15] O. Chowdhury, D. Garg, L. Jia, and A. Datta. Equivalence-based Security for Querying Encrypted Databases: Theory and Application to Privacy Policy Audits. Technical Report CMU-CyLab-15-003, CyLab, Carnegie Mellon University, 2015. Available at http://arxiv.org/abs/1508.02448.
[16] O. Chowdhury, L. Jia, D. Garg, and A. Datta. Temporal mode-checking for runtime monitoring of privacy policies. In CAV, 2014.
[17] E. Damiani, S. D. C. Vimercati, S. Jajodia, S. Paraboschi, and P. Samarati. Balancing confidentiality and efficiency in untrusted relational DBMSs. In CCS, 2003.
[18] H. DeYoung, D. Garg, L. Jia, D. Kaynar, and A. Datta. Experiences in the logical specification of the HIPAA and GLBA privacy laws. In WPES, 2010.
[19] D. Garg, L. Jia, and A. Datta. Policy auditing over incomplete logs: Theory, implementation, and applications. In CCS, 2011.
[20] V. Goyal, O. Pandey, A. Sahai, and B. Waters. Attribute-based encryption for fine-grained access control of encrypted data. In CCS, 2006.
[21] H. Hacigümüş, B. Iyer, C. Li, and S. Mehrotra. Executing SQL over encrypted data in the database-service-provider model. In SIGMOD, 2002.
[22] S. Halevi and P. Rogaway. A tweakable enciphering mode. In CRYPTO, 2003.
[23] J. E. Holt. Logcrypt: Forward security and public verification for secure audit logs. In ACSW Frontiers, 2006.
[24] J. Katz, A. Sahai, and B. Waters. Predicate encryption supporting disjunctions, polynomial equations, and inner products. In EUROCRYPT, 2008.
[25] J. Kelsey and B. Schneier. Minimizing bandwidth for remote access to cryptographically protected audit logs. In Recent Advances in Intrusion Detection, 1999.
[26] F. Kerschbaum and A. Schröpfer. Optimal average-complexity ideal-security order-preserving encryption. In CCS, 2014.
[27] A. Lewko, T. Okamoto, A. Sahai, K. Takashima, and B. Waters. Fully secure functional encryption: Attribute-based encryption and (hierarchical) inner product encryption. In EUROCRYPT, 2010.
[28] M. Naveed, S. Kamara, and C. V. Wright. Inference attacks against property-preserving encrypted databases. In CCS, 2015.
[29] U. D. of Health & Human Services. Cignet Health fined a $4.3M Civil Money Penalty for HIPAA Privacy Rule Violations. Available at http://www.hhs.gov/ocr/privacy/hipaa/enforcement/examples/cignetcmp.html.
[30] A. O’Neill. Definitional issues in functional encryption. Cryptology ePrint Archive, Report 2010/556, 2010. http://eprint.iacr.org/2010/556.
[31] O. Pandey and Y. Rouselakis. Property preserving symmetric encryption. In EUROCRYPT, 2012.
[32] R. A. Popa. Building practical systems that compute on encrypted data. PhD thesis, MIT, 2014.
[33] R. A. Popa, F. H. Li, and N. Zeldovich. An ideal-security protocol for order-preserving encoding. In IEEE S&P, 2013.
[34] R. A. Popa, C. M. S. Redfield, N. Zeldovich, and H. Balakrishnan. CryptDB: Protecting confidentiality with encrypted query processing. In SOSP, 2011.
[35] R. A. Popa and N. Zeldovich. Cryptographic treatment of CryptDB’s adjustable join. Technical Report MIT-CSAIL-TR-2012-006, 2012.
[36] B. Schneier and J. Kelsey. Cryptographic support for secure logs on untrusted machines. In USENIX Security Symposium, 1998.
[37] B. Schneier and J. Kelsey. Secure audit logs to support computer forensics. ACM TISSEC, 2(2):159–176, 1999.
[38] E. Shen, E. Shi, and B. Waters. Predicate privacy in encryption systems. In TCC, 2009.
[39] D. X. Song, D. Wagner, and A. Perrig. Practical techniques for searches on encrypted data. In IEEE S&P, 2000.
[40] S. Tu, M. F. Kaashoek, S. Madden, and N. Zeldovich. Processing analytical queries over encrypted data. In PVLDB, 2013.
[41] B. R. Waters, D. Balfanz, G. Durfee, and D. K. Smetters. Building an encrypted and searchable audit log. In NDSS, 2004.