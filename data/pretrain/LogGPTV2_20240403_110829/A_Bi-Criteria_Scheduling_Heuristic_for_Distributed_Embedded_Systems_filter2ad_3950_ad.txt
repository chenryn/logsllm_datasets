think that the latter can be used directly for minimizing the
schedule length, provided that θ = 0◦
6.3 Performance of RBSA against HBP and FT-
.
BAR for θ = 45◦
In this simulation, the architecture graph was a fully con-
nected network of 6 processors. This time, RBSA was run
with θ = 45◦
, meaning with an equal weight of the relia-
bility and the schedule length. FTBAR and HBP were both
required to replicate actively each operation exactly once.
In Figures 11 and 12, we have plotted respectively the av-
erage NSL and the average reliability as a function of CCR,
for N=100 operations.
h
t
g
n
e
L
l
e
u
d
e
h
c
S
d
e
z
i
l
a
m
r
o
N
e
g
a
r
e
v
A
110
100
90
80
70
60
50
40
30
20
10
0
RBSA(45)
FTBAR(1)
HBP(1)
0.1
1
CCR
10
Figure 11. Average NSLs for θ = 45◦ and N =
100 operations.
y
t
i
l
i
b
a
i
l
e
R
e
g
a
r
e
v
A
1.1
1
0.9
0.8
0.7
0.6
0.5
RBSA(45)
FTBAR(1)
HBP(1)
0.1
1
CCR
10
We note that when CCR increases, so does the NSL, due
to a greater communication cost. For small values of CCR,
the three algorithms bear almost similar results, RBSA and
FTBAR being slightly better than HBP. For CCR=10, there
is little difference between the performance of RBSA and
FTBAR, and both outperform signiﬁcantly HBP. Hence,
since FTBAR is only very slightly better than RBSA, we
Figure 12. Average reliability for θ = 45◦ and
N = 100 operations.
For CCR=0.1, all three algorithms have similar perfor-
mances. For CCR=1, RBSA, FTBAR and HBP are similar
for the NSL, while HBP is slightly less efﬁcient for the reli-
ability. However, for CCR=10, RBSA outperforms signif-
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:08 UTC from IEEE Xplore.  Restrictions apply. 
icantly FTBAR and HBP both for the NSL and the reliabil-
ity. This is due to the fact that we use the active replication
of Alg’s operations, not only to improve the system’s re-
liability, but also to improve the locality of computations
and hence the schedule length [3]; not surprisingly, this has
more inﬂuence when CCR=10 because communications are
more expensive compared to computations. Our results in-
dicates that the bi-criteria heuristics of RBSA can meet its
two requirements, and still outperform other existing single-
criterion heuristics.
In order to study the impact of Alg’s size on our algo-
rithm, we have applied RBSA, FTBAR and HBP to four
sets of 60 randoms graphs, respectively with N=25, 50, 75,
and 100 operations. Then, we have plotted in Figures 13
and 14 respectively the average NSL and the average relia-
bility as a function of N, for CCR=1.
t
h
g
n
e
L
l
e
u
d
e
h
c
S
d
e
z
i
l
a
m
r
o
N
e
g
a
r
e
v
A
14
12
10
8
6
4
2
0
25
HBP(1)
FTBAR(1)
RBSA(45)
50
75
100
Number of operations
Figure 13. Average NSLs for θ = 45◦ and
CCR = 1.
y
t
i
l
i
b
a
i
l
e
R
e
g
a
r
e
v
A
1
0.999
0.998
0.997
0.996
0.995
0.994
0.993
0.992
25
50
75
Number of operations
HBP(1)
FTBAR(1)
RBSA(45)
100
Figure 14. Average reliability for θ = 45◦ and
CCR = 1.
Again, we see that RBSA outperforms both FTBAR and
HBP, and that this effect becomes greater when N increases.
7 Conclusion and future work
We have proposed a new bi-criteria scheduling heuris-
tic, called RBSA (Reliable Bi-Criteria Scheduling Algo-
rithm), that produces automatically a reliable static dis-
tributed schedule of a given algorithm Alg on a given dis-
tributed architecture Arc according to two criteria: maxi-
mizing the system’s reliability and minimizing the system’s
run-time. The problem is that these two criteria are antag-
onistic: maximizing the reliability requires to replicate the
operations of Alg onto several processors of Arc, but this
penalizes the run-time. Conversely, scheduling each opera-
tion exactly once minimizes the run-time but does not im-
prove the reliability.
Our solution is based a the bi-criteria compromise func-
tion, called Bcf , which normalizes both criteria w.r.t. the ob-
jectives given by the user, and chooses, for each operation
of Alg, the subset of processors of Arc such that replicat-
ing this operation onto the processors of this subset maxi-
mizes the reliability and minimizes the run-time. Bcf uses
a parameter θ ∈ [0, 90◦], provided by the user, which gives
more weight either to the reliability objective if it is greater
than 45
, or to the run-time objective otherwise.
◦
Our algorithm can be re-executed if the system’s relia-
bility or run-time objective is not met, by changing the θ
parameter of Bcf , until both objectives are met.
The experimental results show that RBSA algorithm
slightly outperforms other scheduling algorithms with repli-
cation on both criteria. The two algorithms taken for
comparison duplicate each operation of Alg, and schedule
both replica onto two distinct processors of Arc, therefore
achieving a tolerance of exactly one processor failure in the
system.
Instead of replicating brutally each operation of
Alg, RBSA chooses the best subset of processors of Arc
(possibly a one-element subset) onto which scheduling this
operation, in order to optimize both criteria.
Currently, we are working on new solutions to introduce
some backtracking into the heuristics to avoid re-executing
entirely the algorithm when one objective is not met.
References
[1] A. Abd-allah. Extending reliability block diagrams to
software architectures. Technical report, Center for
software engineering, computer science department,
university of southern california, Los Angeles, CA
90089 USA, 1997.
[2] I. Ahmad, Y. Kwok, and M. Wu. Performance com-
parison of algorithms for static scheduling of dags to
multiprocessors. In Proceedings of the 2nd Australian
Conference on Parallel and Real-Time Systems, pages
185–192, Sep 1995.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:08 UTC from IEEE Xplore.  Restrictions apply. 
[3] I. Ahmad and Y.-K. Kwok. On exploiting task duplica-
tion in parallel program scheduling. In IEEE Transac-
tions on Parallel and Distributed Systems, volume 9,
pages 872–892, September 1998.
[4] Y. Chen and M. Yuang. A cut-based method for
In IEEE Trans. Reliability,
terminal-pair reliability.
pages 413–416, september 1996.
[5] A. Dogan and F. Özgüner. Optimal and suboptimal
reliable scheduling of precedence-constrained tasks in
heterogeneous distributed computing. In Proceedings
of the 2000 International Conference on Parallel Pro-
cesseing (ICPP00-Workshops), Toronto, Canada, Au-
gust 2000.
[6] A. Dogan and F. Özgüner. Reliable matching and
scheduling of precedence-constrained tasks in hetero-
geneous distributed computing. In Proceedings of the
2000 International Workshops on Parallel Processe-
ing (ICPP00), Toronto, Canada, August 2000.
[7] K. D. Figiel and D. R. Sule. A generalized reliability
block diagram (rbd) simulation. In Proceedings of the
22nd conference on Winter simulation, pages 551 –
556, New Orleans, Louisiana, United States, 1990.
[8] A. Girault, H. Kalla, M. Sighireanu, and Y. Sorel.
An algorithm for automatically obtaining distributed
and fault-tolerant static schedule.
In The Interna-
tional Conference on Dependable Systems and Net-
works, San Francisco, California, USA, June 2003.
[9] T. Grandpierre and Y. Sorel. From algorithm and
architecture speciﬁcations to automatic generation of
distributed real-time executives: a seamless ﬂow of
graphs transformations. In MEMOCODE’2003, For-
mal Methods and Models for Codesign Conference,
Mont Saint-Michel, France, June 2003.
[10] R. Guerraoui and A. Schiper. Fault-tolerance by repli-
cation in distributed systems. In Proceeding Confer-
ence on Reliable Software Technologies, pages 38–57.
Springer-Verlag, 1996.
[11] M. Gupta and E. Schonberg. Static analysis to reduce
synchronization cost in data-parallel programs.
In
23rd Symposium on Principles of Programming Lan-
guages, pages 322–332, january 1996.
[12] K. Hashimoto, T. Tsuchiya, and T. Kikuno. Effective
scheduling of duplicated tasks for fault-tolerance in
multiprocessor systems. IEICE Transactions on Infor-
mation and Systems, E85-D(3):525–534, march 2002.
[13] S. Kartik and C. S. R. Murthy.
Improved task allo-
cation algorithms to maximize reliability of redundant
distributed computing systems. IEEE Transactions On
Reliability, VOL. 44(NO. 4 DECEMBER), 1995.
[14] S. Kartik and C. S. R. Murthy. Task allocation algo-
rithms for maximizing reliability of distributed com-
puting systems.
IEEE Transactions On Computers,
VOL. 41(NO. 9 September), 1997.
[15] Y.-K. Kwok and I. Ahmad. Static scheduling algo-
rithms for allocating directed task graphs to multipro-
cessors. ACM Computing Surveys, 31(4):406–471,
199.
[16] C. Lavarenne, O. Seghrouchni, Y. Sorel,
and
M. Sorine. The SYNDEX software environment for
real-time distributed systems design and implemen-
tation.
In European Control Conference, volume 2,
pages 1684–1689. Hermès, July 1991.
[17] G. Manimaran and C. S. R. Murthy.
A fault-
tolerant dynamic scheduling algorithm for multipro-
cessor real-time systems and its analysis.
IEEE
Transactions on Parallel and Distributed Systems,
9(11):1137–1151, november 1998.
[18] X. Qin and H. Jiang. Dynamic, reliability-driven
scheduling of parallel real-time jobs in heterogeneous
systems.
In Proceedings of the 30th International
Conference on Parallel Processing (ICPP 2001, pages
113–122, Valencia, Spain, September 2001.
[19] X. Qin, H. Jiang, and D. R. Swanson. An efﬁcient
fault-tolerant scheduling algorithm for real-time tasks
with precedence constraints in heterogeneous systems.
In Proceedings of the 31th International Conference
on Parallel Processing (ICPP 2002), pages 360–386,
Vancouver, British Columbia, Canada, August 2002.
[20] R. A. Sahner and K. S. Trivedi. A hierarchical,
combinatorial-markov method of solving complex re-
liability models. In Proceedings of the Fall Joint Com-
puter Conference, pages 817–825, 1986.
[21] S. Shatz, J. Wang, and M. Goto. Task allocation
for maximizing reliability of distributed computer sys-
tems. In IEEE Trans. Computers, volume 41, pages
156–168, September 1992.
[22] S. Srinivasan and N. Jha. Safety and reliability driven
task allocation in distributed systems. IEEE Transac-
tions on Parallel and Distributed Systems, 10(3):238–
251, march 1999.
[23] T. Yang and A. Gerasoulis. List scheduling with and
without communication delays. Parallel Computing,
19(12):1321–1344, 1993.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:38:08 UTC from IEEE Xplore.  Restrictions apply.