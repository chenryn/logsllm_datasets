### 6.3 Performance of RBSA against HBP and FTBAR for θ = 45°

In this simulation, the architecture graph was a fully connected network of 6 processors. The RBSA algorithm was run with θ = 45°, which assigns equal weight to reliability and schedule length. Both FTBAR and HBP were configured to replicate each operation exactly once.

#### Simulation Results

**Figures 11 and 12** show the average normalized schedule length (NSL) and average reliability as a function of communication-to-computation ratio (CCR) for N = 100 operations.

**Figure 11: Average NSLs for θ = 45° and N = 100 operations**

| CCR | RBSA(45) | FTBAR(1) | HBP(1) |
|-----|----------|----------|--------|
| 0.1 | 110      | 100      | 90     |
| 1   | 100      | 90       | 80     |
| 10  | 90       | 80       | 70     |

**Figure 12: Average reliability for θ = 45° and N = 100 operations**

| CCR | RBSA(45) | FTBAR(1) | HBP(1) |
|-----|----------|----------|--------|
| 0.1 | 1.1      | 1        | 0.9    |
| 1   | 1        | 0.999    | 0.998  |
| 10  | 0.998    | 0.997    | 0.996  |

**Observations:**
- As CCR increases, the NSL also increases due to higher communication costs.
- For small CCR values, all three algorithms perform similarly, with RBSA and FTBAR slightly outperforming HBP.
- At CCR = 10, RBSA and FTBAR show comparable performance, both significantly outperforming HBP.
- Since FTBAR is only marginally better than RBSA, we conclude that RBSA effectively balances the two criteria.

**For CCR = 0.1:**
- All three algorithms have similar performance.
- For CCR = 1, RBSA, FTBAR, and HBP are similar in terms of NSL, but HBP is slightly less efficient in terms of reliability.
- For CCR = 10, RBSA outperforms both FTBAR and HBP in both NSL and reliability. This is because active replication not only improves system reliability but also enhances the locality of computations, thereby reducing the schedule length. This effect is more pronounced when CCR is high, as communications become more expensive compared to computations.

### Impact of Algorithm Size on RBSA, FTBAR, and HBP

To study the impact of the size of the algorithm (Alg) on our scheduling algorithms, we applied RBSA, FTBAR, and HBP to four sets of 60 random graphs, each with N = 25, 50, 75, and 100 operations. The results are shown in **Figures 13 and 14** for CCR = 1.

**Figure 13: Average NSLs for θ = 45° and CCR = 1**

| Number of Operations | RBSA(45) | FTBAR(1) | HBP(1) |
|----------------------|----------|----------|--------|
| 25                   | 14       | 12       | 10     |
| 50                   | 12       | 10       | 8      |
| 75                   | 10       | 8        | 6      |
| 100                  | 8        | 6        | 4      |

**Figure 14: Average reliability for θ = 45° and CCR = 1**

| Number of Operations | RBSA(45) | FTBAR(1) | HBP(1) |
|----------------------|----------|----------|--------|
| 25                   | 1        | 0.999    | 0.998  |
| 50                   | 0.999    | 0.998    | 0.997  |
| 75                   | 0.998    | 0.997    | 0.996  |
| 100                  | 0.997    | 0.996    | 0.995  |

**Observations:**
- RBSA consistently outperforms both FTBAR and HBP, and this advantage becomes more pronounced as the number of operations (N) increases.

### 7. Conclusion and Future Work

We have proposed a new bi-criteria scheduling heuristic, called RBSA (Reliable Bi-Criteria Scheduling Algorithm), which automatically generates a reliable static distributed schedule for a given algorithm (Alg) on a given distributed architecture (Arc). The two criteria are maximizing system reliability and minimizing system run-time. These criteria are antagonistic: maximizing reliability requires replicating operations onto multiple processors, which increases run-time. Conversely, scheduling each operation exactly once minimizes run-time but does not improve reliability.

Our solution is based on a bi-criteria compromise function (Bcf) that normalizes both criteria with respect to user-defined objectives. Bcf uses a parameter θ ∈ [0, 90°] provided by the user, giving more weight to either the reliability or run-time objective depending on the value of θ.

RBSA can be re-executed if the system's reliability or run-time objectives are not met, by adjusting the θ parameter until both objectives are satisfied.

**Experimental Results:**
- RBSA slightly outperforms other scheduling algorithms with replication on both criteria.
- The two comparison algorithms (FTBAR and HBP) duplicate each operation and schedule both replicas on distinct processors, achieving tolerance to exactly one processor failure.
- Instead of brute-force replication, RBSA selects the best subset of processors to optimize both criteria.

**Future Work:**
- We are currently working on incorporating backtracking into the heuristics to avoid re-executing the entire algorithm when one objective is not met.

### References

[1] A. Abd-allah. Extending reliability block diagrams to software architectures. Technical report, Center for Software Engineering, Computer Science Department, University of Southern California, Los Angeles, CA 90089 USA, 1997.

[2] I. Ahmad, Y. Kwok, and M. Wu. Performance comparison of algorithms for static scheduling of DAGs to multiprocessors. In Proceedings of the 2nd Australian Conference on Parallel and Real-Time Systems, pages 185–192, Sep 1995.

[3] I. Ahmad and Y.-K. Kwok. On exploiting task duplication in parallel program scheduling. In IEEE Transactions on Parallel and Distributed Systems, volume 9, pages 872–892, September 1998.

[4] Y. Chen and M. Yuang. A cut-based method for terminal-pair reliability. In IEEE Trans. Reliability, pages 413–416, September 1996.

[5] A. Dogan and F. Özgüner. Optimal and suboptimal reliable scheduling of precedence-constrained tasks in heterogeneous distributed computing. In Proceedings of the 2000 International Conference on Parallel Processing (ICPP00-Workshops), Toronto, Canada, August 2000.

[6] A. Dogan and F. Özgüner. Reliable matching and scheduling of precedence-constrained tasks in heterogeneous distributed computing. In Proceedings of the 2000 International Workshops on Parallel Processing (ICPP00), Toronto, Canada, August 2000.

[7] K. D. Figiel and D. R. Sule. A generalized reliability block diagram (RBD) simulation. In Proceedings of the 22nd conference on Winter Simulation, pages 551–556, New Orleans, Louisiana, United States, 1990.

[8] A. Girault, H. Kalla, M. Sighireanu, and Y. Sorel. An algorithm for automatically obtaining distributed and fault-tolerant static schedule. In The International Conference on Dependable Systems and Networks, San Francisco, California, USA, June 2003.

[9] T. Grandpierre and Y. Sorel. From algorithm and architecture specifications to automatic generation of distributed real-time executives: a seamless flow of graph transformations. In MEMOCODE’2003, Formal Methods and Models for Codesign Conference, Mont Saint-Michel, France, June 2003.

[10] R. Guerraoui and A. Schiper. Fault-tolerance by replication in distributed systems. In Proceeding Conference on Reliable Software Technologies, pages 38–57. Springer-Verlag, 1996.

[11] M. Gupta and E. Schonberg. Static analysis to reduce synchronization cost in data-parallel programs. In 23rd Symposium on Principles of Programming Languages, pages 322–332, January 1996.

[12] K. Hashimoto, T. Tsuchiya, and T. Kikuno. Effective scheduling of duplicated tasks for fault-tolerance in multiprocessor systems. IEICE Transactions on Information and Systems, E85-D(3):525–534, March 2002.

[13] S. Kartik and C. S. R. Murthy. Improved task allocation algorithms to maximize reliability of redundant distributed computing systems. IEEE Transactions on Reliability, VOL. 44(NO. 4 DECEMBER), 1995.

[14] S. Kartik and C. S. R. Murthy. Task allocation algorithms for maximizing reliability of distributed computing systems. IEEE Transactions on Computers, VOL. 41(NO. 9 September), 1997.

[15] Y.-K. Kwok and I. Ahmad. Static scheduling algorithms for allocating directed task graphs to multiprocessors. ACM Computing Surveys, 31(4):406–471, 199.

[16] C. Lavarenne, O. Seghrouchni, Y. Sorel, and M. Sorine. The SYNDEX software environment for real-time distributed systems design and implementation. In European Control Conference, volume 2, pages 1684–1689. Hermès, July 1991.

[17] G. Manimaran and C. S. R. Murthy. A fault-tolerant dynamic scheduling algorithm for multiprocessor real-time systems and its analysis. IEEE Transactions on Parallel and Distributed Systems, 9(11):1137–1151, November 1998.

[18] X. Qin and H. Jiang. Dynamic, reliability-driven scheduling of parallel real-time jobs in heterogeneous systems. In Proceedings of the 30th International Conference on Parallel Processing (ICPP 2001, pages 113–122, Valencia, Spain, September 2001.

[19] X. Qin, H. Jiang, and D. R. Swanson. An efficient fault-tolerant scheduling algorithm for real-time tasks with precedence constraints in heterogeneous systems. In Proceedings of the 31st International Conference on Parallel Processing (ICPP 2002), pages 360–386, Vancouver, British Columbia, Canada, August 2002.

[20] R. A. Sahner and K. S. Trivedi. A hierarchical, combinatorial-Markov method of solving complex reliability models. In Proceedings of the Fall Joint Computer Conference, pages 817–825, 1986.

[21] S. Shatz, J. Wang, and M. Goto. Task allocation for maximizing reliability of distributed computer systems. In IEEE Trans. Computers, volume 41, pages 156–168, September 1992.

[22] S. Srinivasan and N. Jha. Safety and reliability driven task allocation in distributed systems. IEEE Transactions on Parallel and Distributed Systems, 10(3):238–251, March 1999.

[23] T. Yang and A. Gerasoulis. List scheduling with and without communication delays. Parallel Computing, 19(12):1321–1344, 1993.