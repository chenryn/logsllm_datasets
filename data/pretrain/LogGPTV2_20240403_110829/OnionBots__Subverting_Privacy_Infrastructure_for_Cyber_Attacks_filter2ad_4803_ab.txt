•
•
•
Server, that runs a service (e.g., a web server).
Client, that wishes to access the server.
Introduction Points (IP), a set of Tor relays, chosen by
the hidden service, that forward the initial messages
between the server and the client’s Rendezvous Point.
Rendezvous Point (RP), a Tor relay randomly chosen
by the client that forwards the data between the client
and the hidden service.
Hidden Service Directories (HSDir), a set of Tor relays
chosen by the server to store its descriptors.
In order to make a service available via Tor, Bob (the
service provider) generates an RSA key pair. The ﬁrst 10
bytes of the SHA-1 digest of the generated RSA public
key becomes the Identifier of the hidden service. The
.onion hostname, is the base-32 encoding representation
of the public key. As Figure 1 illustrates the following steps
take place, in order to connect to a hidden service. Bob’s
Onion Proxy (OP) chooses a set of Tor relays to serve as
his Introduction Points and establishes a circuit with them
(step 1). After making the circuits, he computes two different
service descriptors that determine which Tor relays should
be chosen as its HSDirs (step 2). HSDirs are responsible
for storing the hidden service descriptors, which change
periodically every 24 hours and are chosen from the Tor
7171
Fig. 2: Tor hidden service Directories (HSDir) Fingerprint
relays that have the HSDir ﬂag. This ﬂag is obtained by
relays that have been active for at least 25 hours. Later, in
section VI we discuss the critical role that HSDirs can paly
in mitigating OnionBots.
descriptor-id = H(Identifier || secret-id-part)
secret-id-part = H(time-period || descriptor-cookie
|| replica)
time-period = (current-time +
permanent-id-byte * 86400 / 256) / 86400
H denotes the SHA-1 hash digest. Identifier is the 80
bit ﬁngerprint (truncated SHA-1 digest of the public key) of the
hidden service. Descriptor-cookie is an optional 128 bit
ﬁeld. It can be used to provide authorization at the Tor network
level, and it prevents unauthorized clients from accessing the
hidden service. Time-period is used to periodically change
the responsible HSDirs, and making the system more resilient.
The permanent-id-byte prevents the descriptors from
changing all at the same time. Replica takes values of 0 or 1.
It is used to compute two different sets of descriptor IDs for a
hidden service. The current implementation of Tor distributes
each set of descriptor IDs in 3 different HSDirs. Therefore,
for each hidden service there are a total of 6 responsible
HSDirs. The list of Tor relays, which is called the consensus
document, is published and updated every hour by the Tor
authorities. If we consider the circle of the ﬁngerprint of Tor
relays as depicted in Figure 2, then if the descriptor ID of the
hidden service falls between the ﬁngerprint of HSDirk−1 and
HSDirk, it will be stored on HSDirk, HSDirk+1 and HSDirk+2.
When a client (Alice) wants to contact a hidden service, she
ﬁrst needs the hostname of the service. Then from the .onion
hostname, she computes the Descriptor ID of the hidden
service and the list of its responsible HSDirs (step 3). To
communicate with the hidden service, Alice ﬁrst randomly
chooses a Tor relay as her Rendezvous Point and makes a
circuit to it (step 4). She then builds a new circuit to one
of Bob’s Introduction Points, and sends it a message. This
message includes the Rendezvous Point’s info and the hash
of the public key of the hidden service (step 5). If the public
key (sent by Alice) is recognized by the Introduction Point,
it will forward the information to the hidden service’s OP
(step 6). When Bob’s OP receives the message it extracts the
Rendezvous Point information and establishes a circuit with it
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:50:16 UTC from IEEE Xplore.  Restrictions apply. 
(step 7).
This approach protects client’s (Alice) IP address from
Bob, and hides hidden service’s (Bob) IP address from Alice,
thus providing mutual anonymity for both the client and the
server.
IV. ONIONBOT: A CRYPTOGRAPHIC P2P BOTNET
In this section, we look at the details of the proposed
OnionBot, a novel non IP based construction that is immune
to the current mitigation techniques. We explore different
bootstrapping approaches and a distributed, self-healing, low-
degree, low-diameter overlay peer-to-peer network formation.
A. Overview
OnionBot retains the life cycle of a typical peer-to-peer
bot [39]. However, each stage has unique characteristics that
make OnionBots different from current peer-to-peer botnets.
As a result, existing solutions are not applicable to them. For
example, in the infection stage, each bot creates a .onion
address and generates a key to indistinguishably encrypt the
messages. In the rally stage, the bots dynamically peer with
other bots that are the foundation of a self-healing network.
Furthermore, while at
the waiting stage, bots periodically
change their address to avoid detection and mitigation. These
new .onion addresses are generated from the key that is
shared with the botmaster. This allows the botmaster to access
and control any bot through the shared key, anytime, without
revealing his identity.
Infection: is the ﬁrst step in recruiting new bots. It can
happen through traditional attack vectors such as phishing,
spam, remote exploits, drive-by-download or zero-day vul-
nerabilities [40]. A great body of literature have focused on
different spread mechanisms [41], [42], [43]. In this work we
focus on the remaining stages of a bot’s life cycle.
Rally: in order to join a botnet, the newly infected bots
need to ﬁnd the already existing members of the network.
In peer-to-peer network this process is called bootstrapping.
For clarity reasons we use the same terminology in describing
OnionBots. Based on the requirements of the network, the
complexity and ﬂexibility of bootstrapping techniques varies
signiﬁcantly. OnionBots necessitate a distributed mechanism to
maintain a low-degree, low-diameter network. Such require-
ments, demands a bootstrapping mechanism that is able to
evolve with the network. In section IV-B we discuss different
techniques and their ramiﬁcations in more detail.
Waiting: in this state, a bot is waiting for commands from
the botmaster. Generally the command transmissions can be
pull-based (bots make periodic queries to the C&C) or push-
based (botmaster sends the commands to the bots), and there
are trade-offs in each mechanism. For example, in the pull-
based approach, if bots aggressively make queries for the C&C
messages, it allows faster propagation of commands. However,
it results in easier detection of C&C and the bots. In the
push-based approach, it is important to be able to reach to
each bot, within a reasonable number of steps. Furthermore,
to prevent leakage of information about the botnet operation
and topology, it should not be feasible for an adversary to
distinguish the source, destination and the nature of the mes-
sages. Meanwhile, satisfying such requirements is not trivial
in self-healing networks. Later in section IV-D we discuss how
in OnionBots, the botmaster is able to access and control any
bot.
Execution: at this stage the bots execute the commands
given by the botmaster (e.g., bitcoin mining, sending spam [44]
or DDoS attack [45], [46]), after authenticating them. Recently,
botmasters started offering botnet-as-a-service [47] as it was
previously predicted by researchers in 2008 [48]. Considering
that the OnionBots make use of cryptographic block beyond
the basic, trivial encryption/decryption of payloads, it allows
them to offer the botnet for rent. In section IV-E, we explain
how this can be done, in a distributed way, and without further
intervention of the botmaster.
In the next sections we will focus on describing the key
mechanisms of OnionBots.
B. Bootstrap
As mentioned previously the bootstrapping is an essential
part of network formation in peer-to-peer networks. Addition-
ally, in OnionBots, it provides the foundation for the self-
healing graph construction. In the following, we study different
approaches and their trade-offs. We discuss how these concepts
should be adapted to the context of a privacy infrastructure
such as Tor. Note that,
in our
protocol refers to the .onion address of the peers, unless
stated otherwise.
the address of a peer list
Hardcoded peer list: in this setting each bot has a list
of other bots to contact at the beginning. Since the
infections can be carried out by the bots, the new peer
lists can be updated. Each peer upon infecting another
host sends a subset of its peer list. Each node in the
original peer list will be included in the subset with
probability p. In the conventional botnets this scheme
is vulnerable to detection and blacklisting. However,
in OnionBots, the .onion address is decoupled form
IP address, and changes periodically as it is described
in section IV-D. Therefore, the current mitigations are
not applicable.
Hotlists (webcache): this is conceptually similar to
the hardcoded peer list. However each bot has a list
of peers to query for the other peers. In this setting,
the adversary (defenders) will only have access to a
subset of servers, since each bot only has a subset of
the addresses, and these subsets can be updated upon
infection or later in the waiting stage.
Random probing:
in this scheme a bot randomly
queries the list of all possible addresses, until it ﬁnds
a bot listening on that address. Although it can be
used in IPv4 and IPv6 [49] networks, it is not feasible
in the context of Tor .onion addresses. Since the
address space is intractable (to craft an address with
speciﬁc ﬁrst 8 letters, it takes about 25 days [50]);
Randomly querying all possible .onion addresses,
requires probing an address space of size 3216.
Out-of-band communication: the peer list can be trans-
mitted through another infrastructure. For example, by
using a peer-to-peer network such as BitTorrent and
Mainline DHT to store and retrieve peer lists, or by
•
•
•
•
7272
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:50:16 UTC from IEEE Xplore.  Restrictions apply. 
using social networks, such as Twitter, Facebook or
YouTube.
We envision that OnionBots would use a customized ap-
proach based on hardcoded peer list and hotlists. As mentioned
earlier, in OnionBots the blacklisting of nodes is not practical,
since their addresses change periodically. In the following
section we describe how OnionBots address the bootstrapping
and recruitment during network formation and maintenance.
C. Maintenance of the OnionBot Communication Graph
OnionBots form a peer-to-peer, self-healing network that
maintains a low degree and a low diameter with other bots
to relay messages. Peer-to-peer networks are broadly cat-
egorized as structured and unstructured [51], where both
categories are used by botnets, and are studied in previous
work [31], [30], [52]. However, the already existing peer-
to-peer networks are generic in terms of their operations.
Therefore, their design and resiliency is based on different
assumptions and requirements. In the following, we propose
a Dynamic Distributed Self Repairing (DDSR) graph, a new
peer-to-peer construction that is simple, stealthy and resilient.
Furthermore, it is an overlay network, formed over a privacy
infrastructure such as Tor.
Neighbors of Neighbor Graph: In this section, we in-
troduce DDSR graph construct that is used in the network
formation of OnionBots. The proposed construct is inspired
by the knowledge of Neighbors-of-Neighbor (NoN). Previous
work [53] studied the NoN greedy routing in peer-to-peer
networks, where it can diminish route-lengths, and is asymp-
totically optimal. In this work we discuss how NoN concepts
can be used to create a self-healing network.
Consider graph G with n nodes (V ), where each node
ui ∈ V , 0 ≤ i < n, is connected to a set of nodes. The
neighbors of ui, are denoted as N (ui). Furthermore, ui has the
knowledge of nodes that are connected to N (ui). Meaning that
each node also knows the identity of its neighbor’s neighbors.
In the context of our work the identity is the .onion address.
Repairing: When a node ui is deleted, each pair of its
neighbors uj, uk will form an edge (uj, uk) if (uj, uk) /∈ E,
where E is the set of existing edges. Figure 3 depicts the
node removal and the self repairing process in a 3-regular
graph with 12 nodes. The dashed red lines indicate the newly
established links between the nodes. For example, as we can
see if we remove one of the nodes (7), its neighbors (0, 1, 4)
start to ﬁnd a substitute for the deleted node (7), to maintain
the aforementioned requirements. In this case the following
edges are created: (0, 1), (1, 4), and (1, 4).
The basic DDSR graph outlined in the previous paragraph
does not deal with the growth in the connectivity degree
of each node, denoted by d(u); after multiple deletions the
degree of some nodes can increase signiﬁcantly. Such increase
of the nodes’ degree is not desirable for the resiliency and
the stealthy operation of the botnet. Therefore, we introduce
a pruning mechanism to keep the nodes’ degree in the range
[dmin, dmax]. Note that dmin is only applicable as long as
there are enough surviving nodes in the network.
Pruning: Consider the graph G, when a node ui is deleted,
each one of its neighbors, starts the repairing process. However
this scheme causes the degree of the neighbors of node ui,
to increase signiﬁcantly after t steps (deletions). To maintain
the degree in the aforementioned range([dmin, dmax]), each
neighboring node of the deleted node (ui), deletes the highest
degree node from its peer list. If there is more than one such
candidate, it randomly selects one among those for deletion,
until its degree is in the desired range. Removing the nodes
with the highest degree, maintains the reachability of all nodes,
and the connectivity of the graph.