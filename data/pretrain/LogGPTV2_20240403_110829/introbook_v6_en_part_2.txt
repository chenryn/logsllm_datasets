### Getting More Attractive, But Not Yet Usable on Standby

The system is becoming increasingly attractive, but it cannot yet be used in standby mode. There are also other changes that improve query planning. Additionally, the EXPLAIN command can now display customized parameters of the optimizer, which can help with troubleshooting.

### 18. Server Performance

JIT (Just-In-Time) compilation is now enabled by default, indicating that it is no longer experimental. TOAST (The Oversized-Attribute Storage Technique) now allows for the extraction of only the initial part of the value that is actually required, rather than fully decompressing the toasted value and removing the redundant part as before. Furthermore, there are many other minor improvements that speed up various operations.

### Monitoring

Logging queries can generate large log files. Now, you can log only a specific percentage of all transactions, which is especially useful for OLTP systems with multiple similar transactions. (The ability to log only some of the "short" operations is targeted for the next version.)

By analogy with `pg_stat_progress_vacuum`, this version adds several other views that report the progress of `CREATE INDEX`, `REINDEX`, and `VACUUM FULL` commands during their execution. An additional wait event has been added: `fsync` for WAL files, allowing for more detailed information about I/O performance. Moreover, the information shown in many system views is now more complete, and new functions allow browsing through the archive and temporary directories directly from SQL.

### 19. Vacuum

In the new version, the default settings improve autovacuum performance. However, fine-tuning is still necessary, especially with the addition of many more control "knobs."

`VACUUM` and `ANALYZE` commands can now skip tables that cannot be locked and do not request a lock on tables for which the user lacks permissions. You can now prevent `VACUUM` from truncating trailing empty pages; although such cleanup can often be useful, it requires a short exclusive lock on the table. You can also forbid index cleanup, for example, if you need to freeze old tuples as soon as possible to avoid transaction ID wraparound. Additionally, you can specify the wraparound horizon for the `vacuumdb` utility to focus on cleaning up those tables that need it the most. Empty leaf pages of GiST indexes are now deleted during vacuum operations.

### Replication and Recovery

All recovery parameters have been moved into the `postgresql.conf` file. The `recovery.conf` file no longer exists; you should now use two signal files to switch into recovery or standby mode. This change introduces a unified approach to dealing with configuration parameters and will allow modifying some settings without a server restart in the future.

You can now copy replication slots (both physical and logical), which can be useful when setting up several standbys from a single backup copy. A new SQL function promotes a standby to primary, a task previously achievable only with an OS signal. The `wal_sender` processes required for streaming replication are no longer taken into account when determining the maximum number of connections, ensuring that multiple client connections will not hamper replication. There are also many more subtle but very useful improvements.

### 20. SQL Commands

It is now possible to add generated columns to tables using the `GENERATED ALWAYS AS` clause. The current implementation allows only stored columns; virtual columns (calculated on the fly) are expected later. Generated columns work faster and are often more convenient to use than columns auto-filled by triggers.

You can filter rows when copying data from a file into a table using `COPY FROM`. The `COMMIT` and `ROLLBACK` commands can now take the `AND CHAIN` clause to end a transaction and immediately start a new one. Such behavior is described in the SQL standard but was not implemented in previous versions.

The ability to create table access methods using `CREATE ACCESS METHOD` and specify the access method at the time of table creation opens endless opportunities. The only method available right now is the good old heap, so nothing has changed for users yet. However, it is the first step towards implementing pluggable storage, which has required significant refactoring of the PostgreSQL core. Some experimental access methods are already being developed:

- **Zheap**: Using the redo log, it prevents table bloat and eliminates the need for vacuum. This method is likely to work best for workloads with frequently changing data.
  - [GitHub: EnterpriseDB/zheap](https://github.com/EnterpriseDB/zheap)
- **Zedstore**: This method implements column-oriented data storage with built-in compression. It is useful for analytical queries that need to process multiple rows but only some of the columns.
  - [GitHub: greenplum-db/postgres/tree/zedstore](https://github.com/greenplum-db/postgres/tree/zedstore)

### Utilities

Often underestimated, the `psql` console client has become more convenient. It now supports the CSV format for table display, provides a link to the corresponding section in the documentation in SQL command-line help, improves the auto-complete feature for many commands, and adds the `\dP` command that displays partitioned tables.

The `pg_upgrade` utility used for server upgrades can now clone files (if the filesystem allows it). The effect is the same as when using hard links, but all the changes that follow do not affect the old cluster, so you can revert to it if any issues occur.

The `pg_verify_checksums` utility has been renamed to `pg_checksums` and now allows enabling or disabling checksums in a cluster without its re-creation. You must stop the server, though; changing checksum settings on the fly will be implemented later.

### SQL/JSON Support

The SQL:2016 standard defined how to work with JSON data using SQL, which should put an end to incompatible implementations. The current PostgreSQL version supports the main part of the standard: SQL/JSON path language, which plays roughly the same role for JSON as XPath does for working with XML data. To get an idea of what this language is like, you can look at several examples provided on page 131.

Support for SQL/JSON datetime data types, as well as the other part of the standard that defines the required functions (including the one that presents JSON data as a relational table), is expected later.

### Miscellaneous

The `oid` column in system catalog tables is no longer hidden. The column itself is still there, and now it will be displayed by `SELECT *` queries. In any case, using the `oid` type in your own tables is not recommended.

Documentation received its first illustrations. At the moment, there are just two of them: check out sections 66.4 “GIN Indexes Implementation” and 68.6 “Database Page Layout.”

### III. Installation and Quick Start

What is required to get started with PostgreSQL? In this chapter, we’ll explain how to install and manage the PostgreSQL service, and then show how to set up a simple database and create tables in it. We will also cover the basics of the SQL language, which is used to query and manipulate data. It’s a good idea to start trying SQL commands while you are reading this chapter.

We are going to use a regular (often called “vanilla”) PostgreSQL 12 distribution. Depending on your operating system, PostgreSQL installation and setup will differ. If you are using Windows, read on; for Linux-based Debian or Ubuntu systems, go to page 29. For other operating systems, you can view installation instructions online: [www.postgresql.org/download](http://www.postgresql.org/download).

You can also use the PostgresPro Standard 12 distribution, which is fully compatible with vanilla PostgreSQL, includes some additional features developed by the Postgres Professional company, and is free when used for trial or educational purposes. In this case, check out installation instructions at [postgrespro.com/products/download](http://postgrespro.com/products/download).

#### Windows

**Installation**

Download the PostgreSQL installer from our website, launch it, and select the installation language: [postgrespro.com/windows](http://postgrespro.com/windows).

The installer provides a conventional wizard interface: you can simply keep clicking the “Next” button if you are fine with the default options. Let’s examine the main steps.

- **Choose Components**: Keep all options selected if you are uncertain which ones to choose.
- **Specify Installation Directory**: By default, PostgreSQL server is installed into `C:\Program Files\PostgreSQL\12`.
- **Specify Data Directory**: This directory will hold all the information stored in your database system, so make sure you have enough disk space if you are planning to keep a lot of data.
- **Server Options**: If you are planning to store your data in a language other than English, make sure to choose the corresponding locale (or leave the “Default” option if your Windows locale settings are configured appropriately).
- **Enter and Confirm Password**: Enter and confirm the password for the `postgres` database user (i.e., the database superuser). You should also select the “Setup environment variables” checkbox to connect to the PostgreSQL server on behalf of the current OS user.
- **Default Settings**: If you are planning to install PostgreSQL for educational purposes only, you can select the “Use the default settings” option for the database system to take up less RAM.

**Managing the Service and the Main Files**

When PostgreSQL is installed, the “postgresql-12” service is registered in your system. This service is launched automatically at the system startup under the Network Service account. If required, you can change the service settings using the standard Windows options.

To temporarily stop the service, run the “Stop Server” program from the Start menu subfolder that you have selected at installation time. To start the service, run the “Start Server” program from the same folder.

If an error occurs at the service startup, you can view the server log to find out its cause. The log file is located in the `log` subdirectory of the database directory chosen at installation time (typically, it is `C:\Program Files\PostgreSQL\12\data\log`). Logging is regularly switched to a new file. You can find the required file either by the last modified date or by the file name that includes the date and time of the switchover to this file.

There are several important configuration files that define server settings. They are located in the database directory. There is no need to modify them to get started with PostgreSQL, but you’ll definitely need them in real work:
- **postgresql.conf**: The main configuration file that contains server parameters.
- **pg_hba.conf**: Defines access rules. For security reasons, the default configuration only allows access from the local system and it must be confirmed by a password.

Now we are ready to connect to the database and try out some commands and SQL queries. Go to the “Trying SQL” chapter on page 33.

#### Debian and Ubuntu

**Installation**

If you are using Linux, you need to add the PGDG (PostgreSQL Global Development Group) package repository. At the moment, the supported Debian versions are 8 “Jessie”, 9 “Stretch”, and 10 “Buster”. For Ubuntu, 16.04 “Xenial” and 18.04 “Bionic” versions are supported.

Run the following commands in the console window:

```sh
$ sudo apt-get install lsb-release
$ sudo sh -c 'echo "deb \
http://apt.postgresql.org/pub/repos/apt/ \
$(lsb_release -cs)-pgdg main" \
> /etc/apt/sources.list.d/pgdg.list'
$ wget --quiet -O - \
https://www.postgresql.org/media/keys/ACCC4CF8.asc \
| sudo apt-key add -
```

Once the repository is added, let’s update the list of packages:

```sh
$ sudo apt-get update
```

Before starting the installation, check localization settings:

```sh
$ locale
```

If you plan to store data in a language other than English, the `LC_CTYPE` and `LC_COLLATE` variables must be set appropriately. For example, for the French language, make sure to set these variables to `fr_FR.UTF8`:

```sh
$ export LC_CTYPE=fr_FR.UTF8
$ export LC_COLLATE=fr_FR.UTF8
```

You should also make sure that the operating system has the required locale installed:

```sh
$ locale -a | grep fr_FR
fr_FR.utf8
```

If it’s not the case, generate the locale, as follows:

```sh
$ sudo locale-gen fr_FR.utf8
```

Now we can start the installation:

```sh
$ sudo apt-get install postgresql-12
```

Once the installation command completes, PostgreSQL will be installed and launched. To check that the server is ready to use, run:

```sh
$ sudo -u postgres psql -c 'select now()'
```

If all went well, the current time is returned.

**Managing the Service and the Main Files**

When PostgreSQL is installed, a special `postgres` user is created automatically on your system. All the server processes work on behalf of this user, and all database files belong to this user as well. PostgreSQL will be started automatically at the operating system boot. It’s not a problem with the default settings: if you are not working with the database server, it consumes very little of system resources. If you still decide to turn off the autostart, run:

```sh
$ sudo systemctl disable postgresql
```

To temporarily stop the database server service, enter:

```sh
$ sudo systemctl stop postgresql
```

You can launch the server service as follows:

```sh
$ sudo systemctl start postgresql
```

You can also check the current state of the service:

```sh
$ sudo systemctl status postgresql
```

If the service cannot start, use the server log to troubleshoot this issue. Take a closer look at the latest log entries in `/var/log/postgresql/postgresql-12-main.log`.

All information stored in the database is located in the `/var/lib/postgresql/12/main/directory`. If you are going to store a lot of data, make sure that you have enough disk space.

There are several configuration files that define server settings. There’s no need to configure them to get started, but it’s worth checking them out since you’ll definitely need them in the future:
- **/etc/postgresql/12/main/postgresql.conf**: The main configuration file that contains server parameters.
- **/etc/postgresql/12/main/pg_hba.conf**: File that defines access settings. For security reasons, the default configuration only allows access from the local system on behalf of the database user that has the same name as the current OS user.

Now it’s time to connect to the database and try out SQL.

### IV. Trying SQL

**Connecting via psql**

To connect to the database server and start executing commands, you need to have a client application. In the “PostgreSQL for Applications” chapter, we will talk about sending queries from applications written in different programming languages. Here, we’ll explain how to work with the `psql` client from the command line in interactive mode.

Unfortunately, many people are not very fond of the command line nowadays. Why does it make sense to learn how to work in it?

First of all, `psql` is a standard client application included in all PostgreSQL packages, so it’s always available. No doubt, it’s good to have a customized environment, but there is no need to get lost on an unknown system.

Secondly, `psql` is really convenient for everyday DBA tasks, writing small queries, and automating processes. For example, you can use it to periodically deploy application code updates on your database server. The `psql` client provides its own commands that can help you find your way around the database objects and display the data stored in tables in a convenient format.

However, if you are used to working in graphical user interfaces, try pgAdmin (we’ll get back to it later) or other similar products: [wiki.postgresql.org/wiki/Community_Guide_to_PostgreSQL_GUI_Tools](http://wiki.postgresql.org/wiki/Community_Guide_to_PostgreSQL_GUI_Tools).

To start `psql` on a Linux system, run this command:

```sh
$ sudo -u postgres psql
```

On Windows, open the Start menu and launch the “SQL Shell (psql)” program. When prompted, enter the password for the `postgres` user that you set when installing PostgreSQL.

Windows users may run into encoding issues when viewing non-Latin characters in the terminal. If that is the case, make sure that a TrueType font is selected in the properties of the terminal window (typically, “Lucida Console” or “Consolas”).

As a result, you should see the same prompt on both operating systems: `postgres=#`. In this prompt, `postgres` is the name of the database to which you are connected right now. A single PostgreSQL server can serve several databases, but you can work with only one of them at a time.

In the sections below, we’ll provide some command-line examples. Enter only the part printed in bold; the prompt and the system response are provided solely for your convenience.

**Databases**

Let’s create a new database called `test`:

```sql
postgres=# CREATE DATABASE test;
CREATE DATABASE
```

Don’t forget to use a semicolon at the end of the command: PostgreSQL expects you to continue typing until you enter this symbol, so you can split the command over multiple lines.

Now let’s connect to the created database:

```sql
postgres=# \c test
You are now connected to database "test" as user "postgres".
test=#
```

As you can see, the command prompt has changed to `test=#`.

The command that we’ve just entered does not look like SQL, as it starts with a backslash. This is a convention for special commands that can only be used in `psql` (so if you are using pgAdmin or another GUI tool, skip all commands starting with a backslash, or try to find an equivalent).

There are quite a few `psql` commands, and we’ll use some of them a bit later. To get the full list of `psql` commands right now, you can run:

```sql
test=# \?
```

Since the reference information is quite bulky, it will be displayed in a pager program of your operating system, which is usually `more` or `less`.

**Tables**

Relational database management systems present data as tables. The heading of the table defines its columns; the data itself is stored in table rows. The data is not ordered (so the rows are not necessarily stored in the same order they were added to the table).

For each column, a data type is defined. All the values in the corresponding row fields must conform to this type. You can use multiple built-in data types provided by PostgreSQL (see [postgrespro.com/doc/datatype.html](http://postgrespro.com/doc/datatype.html)), or add your own custom types, but here we’ll cover just a few main ones:
- **integer**
- **text**