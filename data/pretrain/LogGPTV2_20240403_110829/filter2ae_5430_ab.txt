                  {
                    v24 = out_buf_pos;
                    User_Buffer_Length -= ea_block_size + padding;
                    padding = ((ea_block_size + 3) & 0xFFFFFFFC) - ea_block_size;// padding对齐的计算
                    goto LABEL_26;
                  }
                }
    LABEL_12:
                a1[1] = v18;
    LABEL_13:
                *(_DWORD *)a1 = v8;
                return a1;
              }
            }
            v21 = NtfsStatusDebugFlags;
            a1[1] = 0i64;
            if ( v21 )
              NtfsStatusTraceAndDebugInternal(0i64, 2147483653i64, 919406i64);
            v8 = -2147483643;
            goto LABEL_13;
          }
          if ( EaNameLength == i->EaNameLength && !memcmp(GetEaInfo->EaName, i->EaName, EaNameLength) )
            break;
        }
        if ( !NextEntryOffset )
        {
          v18 = occupied_length;
          goto LABEL_12;
        }
    LABEL_26:
        v9 = v22;
      }
      a1[1] = v9;
      if ( NtfsStatusDebugFlags )
        NtfsStatusTraceAndDebugInternal(0i64, 2147483667i64, 919230i64);
      *(_DWORD *)a1 = -2147483629;
      return a1;
    }
恢复之后，直接根据卡巴文章中说的定位到漏洞点memmove
从图中可以很明显看见漏洞的触发点，NtfsQueryEaUserEaList 此函数在处理文件的扩展属性列表时，将其检索到的值存储到了缓冲区内
然后代码检查输出缓冲区是否足够长，以满足扩展属性的填充，但它没有检测整数下溢。结果就导致了堆上缓冲区的溢出的发生。  
漏洞的触发点是memmove这块，其实就是绕过了代码针对于ea_block_size的检查  
ea_block_size EaValueLength + ea_block->EaNameLength
+ 9）  
其实最后就是绕过这个检查 具体绕过思考
    参考与ncc的计算方法，用数学公式表达一下方便(注:以下是根据代码转换成数学公式,只是个人觉得这么理解第一次比较好理解哈)
    ea_block_size ExAllocatePoolWithTag
分配的池空间PoolWithTag 到 NtfsQueryEaUserEaList -->User_Buffer --> out_buf_pos
最后memmove触发
**漏洞触发利用**  
了解了漏洞触发点之后，下一步就是验证。  
首先需要创建一个文件然后添加EA拓展属性 =>NtSetEaFile  
该函数的第3个参数是一个FILE_FULL_EA_INFORMATION结构的缓冲区，用来指定Ea属性的值。所以我们可以利用EA属性来构造PAYLOAD，
然后使用NtQueryEaFile函数来触发[NtQueryEaFile](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-zwqueryeafile "NtQueryEaFile")  
查询一下能对EA 扩展属性进行操作的api  
记一下这两个 ZwQueryEaFile , ZwSetEaFile 分别对应 NtSetEaFile , NtQueryEaFile
    NTSTATUS ZwQueryEaFile(
        [in]           HANDLE           FileHandle, //文件句柄
        [out]          PIO_STATUS_BLOCK IoStatusBlock,
        [out]          PVOID            Buffer, //扩展属性缓冲区（FILE_FULL_EA_INFORMATION结构）
        [in]           ULONG            Length, //缓冲区大小
        [in]           BOOLEAN          ReturnSingleEntry,
        [in, optional] PVOID            EaList, //指定需要查询的扩展属性
        [in]           ULONG            EaListLength,
        [in, optional] PULONG           EaIndex, //指定需要查询的起始索引
        [in]           BOOLEAN          RestartScan
    );
    NTSTATUS ZwSetEaFile(
        [in] HANDLE FileHandle,
        [out] PIO_STATUS_BLOCK IoStatusBlock,
        [in] PVOID Buffer,
        [in] ULONG Length,
        );
ZwQueryEaFile 中的 Buffer 来源性如下图所示
然后分别进行Set与Query的调用来进行漏洞利用
CVE-2021-31956 漏洞利用是通过Windows Notification Facility(WNF)来实现任意内存读写原语。  
WNF
是一个通知系统在整个系统中的主要任务就是用于通知，相当于通知中心。它可以在内核模式中使用，也可以在用户态被调用[WNF](https://blog.quarkslab.com/playing-with-the-windows-notification-facility-wnf.html "WNF")  
我们要明白上述的输出缓冲区buffer是从用户空间传入的，同时传入的还有这个缓冲区的长度。这意味着我们最终会根据缓冲区的大小控制内核空间的大小分配，触发漏洞的话还需要触发如上所述的溢出。  
我们需要进行堆喷在内核进行我们想要的堆布局。  
**利用手法是WNF**
    WNF_STATE_DATA  //用户可以定义的
    NtCreateWnfStateName  //创建WNF对象实例=>WNF_NAME_INSTANCE
    NtUpdateWnfStateData  //写入数据存放在WNF_STATE_DATA
    NtQueryWnfStateData   //读取写入的数据
    NtDeleteWnfStateData  //释放Create创建的对象
**有限的地址读写**  
所以首先要通过NtCreateWnfStateName创建一个WNF对象实例  
要利用漏洞溢出点Ntfs喷出来的堆块去覆盖WNF_STATE_DATA中的DataSize成员和AllocateSize成员。  
然后可以利用NtQueryWnfStateData去进行读取，NtUpdateWnfStateData
去进行修改相邻WNF_NAME_INSTANCE数据，但是此时这里完成的有限的地址读写。  
**任意地址读写**  
利用相对内存写修改邻近的 WNF_NAME_INSTANCE结构的
StateData指针为任意内存地址，然后就可以通过NtQueryWnfStateData,NtUpdateWnfStateData来实现任意地址读写了。  
最后可以通过NtDeleteWnfStateData可以释放掉这个对象。  
**提权**  
已经有了任意地址读写，然后就可以读取去遍历进程链表找到System进程  
找到System进程后，接着去读取高进程的token，最后利用内存写，修改当前进程的token替换成我们读取到的System进程的token完成提权。效果如下