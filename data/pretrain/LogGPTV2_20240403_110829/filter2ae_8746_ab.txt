            if(var0 == 0x4618359) {
                sub_72();
            }
            if(var0 == 0x1cbeae5e) {
                winner();
            }
            if(var0 == 0x890eba68) {
                flag();
            }
            if(var0 == 0xa2da82ab) {
                sub_F7();
            }
            if(var0 == 0xf0fdf834) {
                a();
            }
        }
        revert(0x0, 0x0);
    }
sub_F7()
    function sub_F7() public /*NON-PAYABLE*/ {
        var3 = msg.data.length;
        var4 = calldataload(0x4);
        sub_177(var4 & 0xff);
        stop();
    }
    function sub_177(uint256 par1) private {
        int256 var0 = 0x0;
        for(uint256 var1 = 0x0; var1 
查看contract对应bytecode为
    0x606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a0f76961461005c5780635b6b431d1461009f5780639f1b3bad146100c2575b600080fd5b341561006757600080fd5b610081600480803561ffff169060200190919050506100cc565b60405180826000191660001916815260200191505060405180910390f35b34156100aa57600080fd5b6100c06004808035906020019091905050610138565b005b6100ca6101d6565b005b60006001546001900461ffff168261ffff16141561012b57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610133565b600060010290505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561019357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015156101d357600080fd5b50565b6000806002346000604051602001526040518082815260200191505060206040518083038160008661646e5a03f1151561020f57600080fd5b50506040518051905091506001548218905080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020816000191690555050505600a165627a7a723058204760a4fe708c70459c1c33c4668609c3f1a8cf0a82d2fc7786c343457dbb55c30029
用jeb3.7 demo反编译一下bytecode
    function Withdraw() public /*NON-PAYABLE*/ {
        var3 = calldataload(0x4);
        __impl_Withdraw(var3);
        stop();
    }
    function __impl_Withdraw(uint256 par1) private {
        var1 = storage[0x0];
        int256 var0 = var1;
        var1 = msg.sender;
        if((address(var0)) != (address(msg.sender))) {
            revert(0x0, 0x0);
        }
        var0 = msg.sender;
        var4 = send(address(msg.sender), par1);
        if(var4 == 0x0) {
            revert(0x0, 0x0);
        }
    }
    function Receive() public payable {
        __impl_Receive();
        stop();
    }
    function __impl_Receive() private {
        *(*0x40 + 0x20) = 0x0;
        int256 var5 = *0x40;
        *var5 = $msg.value;
        var11 = gasleft();
        var4 = call_sha256(var11 - 0x646e, 0x2, 0x0, var5, var5 + 0x20 - var5, var5, 0x20);
        if(var4 == 0x0) {
            revert(0x0, 0x0);
        }
        var2 = storage[0x1];
        var2 ^= **0x40;
        var5 = msg.sender;
        *0x0 = address(msg.sender);
        *0x20 = 0x2;
        var3 = keccak256(0x0, 0x40);
        storage[var3] = var2;
    }
    function sub_5C() public view /*NON-PAYABLE*/ {
        var3 = calldataload(0x4);
        uint256 var0 = sub_CC(var3 & 0xffff);
        uint256* var2 = *0x40;
        *var2 = var0;
        return(*0x40, var2 + 1 - *0x40);
    }
    function sub_CC(uint256 par1) private view returns (uint256) {
        uint256 var0;
        var1 = storage[0x1];
        if((par1 & 0xffff) == (var1 & 0xffff)) {
            var3 = msg.sender;
            *0x0 = address(msg.sender);
            *0x20 = 0x2;
            var1 = keccak256(0x0, 0x40);
            var1 = storage[var1];
            var0 = var1;
        }
        else {
            var0 = 0x0;
        }
        return var0;
    }
    function main() {
            memory[0x40:0x60] = 0x60;
            if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }
            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;
            if (var0 == 0x2a0f7696) {
                // Dispatch table entry for 0x2a0f7696 (unknown)
                if (msg.value) { revert(memory[0x00:0x00]); }
                var var1 = 0x0081;
                var var2 = msg.data[0x04:0x24] & 0xffff;
                var1 = func_00CC(var2);
                var temp0 = memory[0x40:0x60];
                memory[temp0:temp0 + 0x20] = var1;
                var temp1 = memory[0x40:0x60];
                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];
            } else if (var0 == 0x5b6b431d) {
                // Dispatch table entry for Withdraw(uint256)
                if (msg.value) { revert(memory[0x00:0x00]); }
                var1 = 0x00c0;
                var2 = msg.data[0x04:0x24];
                Withdraw(var2);
                stop();
            } else if (var0 == 0x9f1b3bad) {
                // Dispatch table entry for Receive()
                var1 = 0x00ca;
                Receive();
                stop();
            } else { revert(memory[0x00:0x00]); }
        }
可看出public的函数有3个，分别是`sub_5c`(0x2a0f7696),
`Withdraw`(0x5b6b431d)和`Receive`(0x9f1b3bad)
再看合约的交易日志(交易成功的日志)  
按照时间先后顺序日志如下：
    1：0x2a0f7696
    2：0x2a0f7696c1cb
    3：0x2a0f7696000000000000000000000000000000000000000000000000000000000000c1cb
    4：0x9f1b3bad
    5：0x2a0f7696000000000000000000000000000000000000000000000000000000000000c1cb
对应sub_5c调用了4次，Receive调用了1次
分别查看交易的`Parity Trace`，可查看输入输出
前四个交易均返回0x0，第5个交易返回`0x333443335f6772616e646d615f626f756768745f736f6d655f626974636f696e`
查看一下逻辑，前面三个调用均失败，sub_cc有条件(par1 & 0xffff) == (var1 &
0xffff),par1为函数输入值，var1为内存值，若不相等则直接返回0x0,
说明前面的三次调用均不满足这个条件。交易5有返回值，说明经过调用Receive函数后就可以满足条件了。
查看main入口函数，sub_5c函数和Withdraw函数均不接受msg.value,证明是not payable,
但Reveive函数可接受msg.value
Receive函数 主要操作`storage[0x1]=storage[0x1]^msg.value;`
直接解码交易5的返回结果得到`34C3_grandma_bought_some_bitcoin`