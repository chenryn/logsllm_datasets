### 5. Code Relocations and PlayReady DRM

Finally, the code relocations used by PlayReady DRM introduce additional indeterminism. However, this does not affect the final, successful decryption result.

---

### 6. Discussion

#### 6.1 Expected Use of MovieStealer
The primary use of an approach like MovieStealer would be to save streamed movies for later viewing or for sharing with others. The latter, of course, is illegal. Our intention is not to facilitate illegal activities, and we will discuss this further in Section 7. It is important to emphasize that for MovieStealer to function, the user must be authorized to play the content in the first place.

#### 6.2 Future Directions
One potential future direction is the automatic cracking of HDCP-protected content. Since the master keys have been leaked, it might be possible to analyze encrypted data paths and attempt to automatically use the HDCP keys for further decryption. Given the relatively low number of buffers identified in our video experiments, this could be feasible from a performance standpoint. This would allow MovieStealer to function on devices with dedicated hardware for hiding content as it is re-encrypted for HDCP.

Another direction could involve using MovieStealer to automatically recover encryption keys from running software. After detecting a decryption loop, MovieStealer could check the other inputs to that loop or to other loops that touched the encrypted buffer to determine if such inputs are the encryption keys.

Furthermore, it would be interesting to investigate how our approach can inform systems like Inspector Gadget [34] to automatically export the encryption/decryption functionality of programs.

### 6.1 Countermeasures

Although our approach has proven effective against current online streaming services, there are several steps that DRM scheme authors can take to protect themselves against MovieStealer.

#### 6.1.1 Anti-Debugging
Applying extreme anti-debugging and anti-DBI techniques would prevent our current implementation from working. However, nothing prevents one from implementing MovieStealer in a full-system emulator like QEMU [16], making the approach immune to such evasions.

#### 6.1.2 Loop Detection
There are several ways to prevent MovieStealer from properly detecting loops within a program. A full unrolling of relative loops could effectively prevent the real loop from being detected. However, full unrolling would result in a loss of flexibility, and detection might still be possible using pattern matching. Alternatively, protecting sensitive program modules with virtual machine interpreted instructions would be very effective, as most of our loop identification approaches would not work. However, this would likely incur an unacceptable performance penalty.

#### 6.1.3 Buffer Detection
We cannot properly analyze a buffer with a nonconsecutive layout in memory. For example, if a buffer only occupies one byte every three bytes, these bytes will not be identified as a valid byte array. We have not seen these techniques being used, and implementing them would likely carry an overhead cost. However, it is a definite possibility with modern hardware.

An effective countermeasure would be a functional hardware DRM scheme. However, it is unclear how to implement this in a way that is flexible enough to resist key leaks while being secure enough to resist bypass.

#### 6.1.4 Decryption Detection
A very effective countermeasure would be to intersperse non-random data in the encrypted buffers and insert random data into the decrypted buffer. This would lower the randomness of the encrypted buffer and raise the randomness of the decrypted buffer, possibly defeating our analysis. The decoder would then be modified to ignore the inserted random bytes so that it can successfully replay the video. It is important to note that this approach would require modifying the decoder, as removing the random bytes beforehand (and reducing the randomness of the buffer) would trigger MovieStealer’s decryption detection.

#### 6.1.5 Watermarking
Watermarking has proven to be incredibly effective in tracking piracy. The originator could watermark the media [28, 17, 18], and in the event of piracy, the pirates could be identified by this watermark. While some research has been done toward circumventing watermarks [26, 35], a watermark-related arms race might be easier for content providers than designing mechanisms to counteract approaches similar to MovieStealer.

### 7. Ethical and Legal Issues

In this section, we discuss the ethical and legal implications of our work.

#### 7.1 Motivation
Firstly, our work was never motivated by the desire to obtain protection-free copies of media for redistribution (piracy) or to create and distribute tools that would allow others to bypass content protection mechanisms. Our goal was to analyze the security of the cryptographic mechanisms used by these emerging services and to develop an approach that would demonstrate the general fallacy behind these schemes. We hope that our findings will prompt the development of new, more secure approaches to content protection that are not vulnerable to our attack. This is especially important if cryptography-based protection mechanisms are touted to "protect" user-generated content (e.g., independent movies distributed exclusively through streamed media) and give content authors a false sense of security regarding the possibility of malicious third parties stealing their content.

#### 7.2 Legality
The legality of this research is tightly related to the location where the research is performed. For example, there are subtle but important differences between the laws in the United States and those in the European Union and Italy [23].

Our research was carried out in the United States and thus falls under the Digital Millennium Copyright Act (DMCA) [25]. The DMCA prohibits the circumvention of content protection mechanisms but includes explicit protections for security research (referred to as "Encryption Research" – see Section 1201(g) of the DMCA). We believe this research falls under this protection and is therefore legal. Citing from the DMCA document: "Factors in determining exemption: In determining whether a person qualifies for the exemption under paragraph (2), the factors to be considered shall include the information derived from the encryption research was disseminated, and if so, whether it was disseminated in a manner reasonably calculated to advance the state of knowledge or development of encryption technology, versus whether it was disseminated in a manner that facilitates infringement under this title or a violation of applicable law other than this section, including a violation of privacy or breach of security."

We feel that the way in which this research is disseminated is clearly focused on advancing research and not to facilitate infringement. In fact, we have chosen not to publicly distribute the source code of our tool or provide ways to easily attack specific technologies. Additionally, with the help of the Electronic Frontier Foundation, we contacted each of the companies involved to disclose these DRM workarounds responsibly. Microsoft was notified because they are the vendor of the Silverlight DRM used in Netflix. Adobe was notified because they are the vendor of the RTME implementation for Amazon and Hulu. Netflix, Amazon, and Hulu were notified because the DRM being bypassed is used by their services. Spotify was in the unique position of falling into both categories, and we contacted them as well.

Of the companies contacted, Netflix, Amazon, and Hulu did not respond to our initial or follow-up contacts, nor when contacted through EFF’s channels of communication. However, Microsoft, Adobe, and Spotify responded, acknowledged the issues, and discussed workarounds. All three companies reviewed our work, provided comments for this paper, and encouraged its publication, for which we are grateful.

In summary, our goal is to improve the state-of-the-art in cryptographic protection and not to create and distribute tools for the violation of copyright laws.

### 8. Conclusions

In this paper, we proposed MovieStealer, a novel approach to automated DRM removal from streaming media by taking advantage of the need to decrypt content before playing. Additionally, we outlined optimizations to make such DRM removal feasible in real-time and demonstrated its effectiveness against four streaming media services utilizing three different DRM schemes.

### Acknowledgements

We would like to thank representatives from Microsoft, Spotify, and Adobe for their feedback on the drafts we sent them. Additionally, we are eternally grateful to the EFF and UCSB’s legal counsel for their help with legal and ethical concerns during the publication process. Finally, we thank Dr. Jianwei Zhuge for his advice.

This work was supported by the Office of Naval Research (ONR) under Grant N00014-12-1-0165 and under grant N00014-09-1-1042, and the National Science Foundation (NSF) under grants CNS-0845559 and CNS-0905537, and by Secure Business Austria. This work was partly supported by Project 61003127 supported by NSFC.

### References

[References listed here as per the original text]

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.