Finally, the code relocations used by PlayReady DRM adds
extra indeterminism to the mix. However, this does not
have an effect on the ﬁnal, successful decryption result.
USENIX Association  
22nd USENIX Security Symposium  699
13
6 Discussion
The expected use of an approach such as MovieStealer
would be to save streamed movies either for later watching
or for sharing with others. The latter approach is, of course,
illegal. Our intention is not to aid illegal activity, and we
discuss this further in Section 7.
It is also important to stress that in order for Movi-
eStealer to function, the user must be authorized to play
the content in the ﬁrst place.
One possibility for future direction is a look into au-
tomatically cracking HDCP-protected content. Since the
master keys are leaked, it might be possible to analyze
encrypted-encrypted data paths and attempt to automati-
cally use the HDCP keys to decrypt the content further.
With the relatively low amount of buffers identiﬁed in
the video experiments, this might be feasible from a per-
formance standpoint. This would allow MovieStealer to
function on devices with dedicated hardware for hiding
content as it’s re-encrypted for HDCP.
Another potential direction would be use MovieStealer
to automatically recover encryption keys from running
software. After detecting a decryption loop, MovieStealer
could check the other inputs to that loop or to other loops
that touched the encrypted buffer to determine if such
inputs are the keys to the encryption.
Furthermore, it would be interesting to investigate the
use of our approach to inform systems such as Inspector
Gadget [34] in order to automatically export the encryp-
tion/decryption functionality of programs.
6.1 Countermeasures
Although our approach proved to be effective on cur-
rent online streaming services, there are steps that could
be taken by the authors of the DRM schemes to protect
themselves against MovieStealer.
Anti-debugging. Applying extreme anti-debugging
and anti-DBI techniques would prevent our implemen-
tation, in its current form, from working. However, noth-
ing prevents one from implementing MovieStealer in a
full-system emulator such as QEMU [16], rendering the
approach immune to such evasions.
Attacking our loop detection. There are several ways
to prevent MovieStealer from properly detecting loops
within a program. A full unrolling of relative loops could
effectively prevent the real loop from being detected by
MovieStealer. However, full unrolling will result in loss of
ﬂexibility of the loop, and detection might still be possible
using pattern matching approaches. Alternatively, protect-
ing sensitive program modules by using virtual machine
interpreted instructions would be very effective, as most of
our loop identiﬁcation approaches would not work. How-
ever, the performance penalty for doing this would likely
be unacceptable.
Attacking the buffer detection. We cannot properly
analyze a buffer that has a nonconsecutive layout in mem-
ory. For example, if a buffer only occupies one byte every
three bytes, these bytes will not be identiﬁed as a valid byte
array, let alone a buffer. We have not seen these techniques
being used, and implementing them will likely carry an
overhead cost. However, it is a deﬁnite possibility with
modern hardware.
Along these lines, an effective countermeasure would
be a functional hardware DRM scheme. However, it is not
clear how to implement this in a way ﬂexible enough to
be resistant to events such as key leaks while being secure
enough to be resistant to bypass.
Attacking the decryption detection. One very effec-
tive countermeasure would be to intersperse non-random
data in the encrypted buffers, and to insert random data
into the decrypted buffer. This would lower the random-
ness of the encrypted buffer and raise the randomness of
the decrypted buffer, possibly defeating our analysis. The
decoder would then be modiﬁed to ignore the inserted ran-
dom bytes so that it can successfully replay the video. It
is important to note that this approach would require a
modiﬁcation of the decoder, as removing the random bytes
beforehand (and reducing the randomness of the buffer in
question) would trigger MovieStealer’s decryption detec-
tion.
Attacking the pirates. Watermarking has proven to
be incredibly effective in tracking piracy. The originator
could watermark the media [28, 17, 18], and in the event
of piracy, the pirates could be identiﬁed by this watermark.
This is a very effective technique, and it has been used
to successfully track down pirates [13, 6]. While some
research has been done toward the circumvention of wa-
termarks [26, 35], a watermark-related arms race might be
easier for content providers than the design of mechanisms
to counteract approaches similar to MovieStealer.
7 Ethical and Legal Issues
In this section, we discuss the ethical and legal implica-
tions of our work.
First of all, obviously our work was never motivated
by the desire to obtain protection-free copies of the me-
dia for re-distribution (piracy) or to create and distribute
tools that would allow others to bypass content protection
mechanisms.
Our goal was to analyze the security of the cryptographic
mechanisms used by these emerging services, and to de-
velop an approach that would demonstrate the general
fallacy behind these schemes, in the hope that our ﬁndings
would prompt the development of new, more secure ap-
proaches to content protection that are not vulnerable to
our attack. This is especially important if cryptography-
based protection mechanisms are touted to “protect” user-
generated content (e.g., independent movies distributed
700  22nd USENIX Security Symposium 
USENIX Association
14
exclusively through streamed media) and give to the con-
tent authors (i.e., the users of the distribution service) a
false sense of security with regards to the possibility of
malicious third parties stealing their content.
The legality of this research is tightly related to the
location where the research is performed. For example,
there are some subtle but important differences between
the laws in the United States and the laws of the European
Union and Italy [23].
The research was carried out in the United States, and
hence, it falls under the Digital Millenium Copyright
Act [25]. The DMCA prohibits the circumvention of con-
tent protection mechanisms, but includes explicitly pro-
tection of security research (referred to as “Encryption
Research” – see Section 1201(g) of the DMCA.) We feel
that this research falls under this protection and is there-
fore legal. Citing from the DMCA document: “Factors in
determining exemption: In determining whether a person
qualiﬁes for the exemption under paragraph (2), the fac-
tors to be considered shall include the information derived
from the encryption research was disseminated, and if so,
whether it was disseminated in a manner reasonably calcu-
lated to advance the state of knowledge or development of
encryption technology, versus whether it was disseminated
in a manner that facilitates infringement under this title
or a violation of applicable law other than this section,
including a violation of privacy or breach of security.”
We feel that the way in which this research is dissem-
inated is clearly focused on advancing research and not
to facilitate infringement. In fact, we have chosen not
to publicly distribute the source code of our tool or to
provide ways to easily attack speciﬁc technologies. In ad-
dition, with the help of the Electronic Frontier Foundation,
we contacted each of the companies involved in order to
disclose these DRM workarounds responsibly. Microsoft
was notiﬁed because they are the vendor of the Silverlight
DRM used in Netﬂix. Adobe was notiﬁed because they
are the vendor the RTME implementation for Amazon and
Hulu. Netﬂix, Amazon, and Hulu were notiﬁed because
the DRM being bypassed is used by their services. Spotify
was in the unique position of falling into both categories.
Of course, we contacted them as well.
Of the companies contacted, Netﬂix, Amazon, and Hulu
did not respond to our initial or follow-up contacts, nor
when contacted through EFF’s channels of communication.
However, Microsoft, Adobe, and Spotify responded, ac-
knowledged the issues, and discussed workarounds. All
three companies reviewed our work, provided comments
for this paper, and encouraged its publication, for which
we are grateful.
In summary, our goal is to improve the state-of-the-art
in cryptographic protection and not to create and distribute
tools for the violation of copyright laws.
8 Conclusions
In this paper, we have proposed MovieStealer, a novel
approach to automated DRM removal from streaming me-
dia by taking advantage of the need to decrypt content be-
fore playing. Additionally, we have outlined optimizations
to make such DRM removal feasible to do in real-time, and
have demonstrated its effectiveness against four streaming
media services utilizing three different DRM schemes.
Acknowledgements We would like to thank representa-
tives from Microsoft, Spotify, and Adobe for their feedback
in regards to the drafts that we sent them. Additionally, we
are eternally grateful to the EFF and UCSB’s legal counsel
for their help with legal and ethical concerns during the
publication process. Finally, we thank Dr. Jianwei Zhuge
for his advice.
This work was supported by the Ofﬁce of Naval Re-
search (ONR) under Grant N00014-12-1-0165 and un-
der grant N00014-09-1-1042, and the National Science
Foundation (NSF) under grants CNS-0845559 and CNS
0905537, and by Secure Business Austria. This work was
partly supported by Project 61003127 supported by NSFC.
References
[1] RC4, 1994. http://web.archive.org/web/20080404222417/
http://cypherpunks.venona.com/date/1994/09/
msg00304.html.
[2] RTMP, 2009.
http://wwwimages.adobe.com/www.adobe.
com/content/dam/Adobe/en/devnet/rtmp/pdf/rtmp_
specification_1.0.pdf.
[3] Adobe RTMPE, 2012. http://lkcl.net/rtmp/RTMPE.txt.
[4] Audials software, 2012.
http://audials.com/en/how_to_
record_stream_capture_music_videos_movies_from/
netflix.html.
[5] The despotify project, 2012. http://despotify.se/.
[6] E-city nabs pirates using thomson watermarking tech, 2012.
http:
//businessofcinema.com/bollywood-news/ecity-nabs\
%2Dpirates-using-thomson\%2Dwatermarking\%2Dtech/
27167.
[7] Esperanza
project,
esperanza.
2012.
http://code.google.com/p/
[8] Freakonomics - How Much Do Music And Movie Piracy Really Hurt
http://www.freakonomics.com/
the U.S. Economy?, 2012.
2012/01/12/how-much\%2Ddo-music\%2Dand-movie\
%2Dpiracy\%2Dreally-hurt\%2Dthe-u-s\%2Deconomy/.
[9] High-bandwidth Digital Content Protection System -
Interface In-
http://www.digital-cp.
dependent Adaptation - 2.2, 2012.
com/files/static_page_files/6FEA6756-1A4B\
%2DB294\%2DD0494084C37A637F/HDCP\%20Interface\
%20Independent\%20Adaptation\%20Specification\
%20Rev2_2_FINAL.pdf.
[10] Microsoft PlayReady DRM, 2012. http://msdn.microsoft.com/
en-us/library/cc838192(VS.95).aspx.
[11] Microsoft protected media path, 2012. http://scholar.google.
com/scholar?hl=en&q=protected+media+path&btnG=
&as_sdt=1%2C5&as_sdtp=.
[12] Nation of unrepentant pirates costs $900m, 2012.
http://www.
smh.com.au/technology/technology-news/nation-of\
%2Dunrepentant-pirates-costs\%2D900m-20110305\
%2D1bix5.html.
USENIX Association  
22nd USENIX Security Symposium  701
15
[13] Porn studio awarded 1.5 million from man who shared 10 movies,
http://www.slate.com/blogs/trending/2012/11/
2012.
02/kywan_fisher_flava_works_wins_1_5_million_in_
biggest_ever_torrent_judgement.html.
2012.
[14] SOPA: How much
does
online
econ-
http://www.washingtonpost.com/blogs/
omy?,
ezra-klein/post/how-much\%2Ddoes-online-piracy\
%2Dreally-cost-the\%2Deconomy/2012/01/05/
gIQAXknNdP_blog.html.
piracy
really
cost
the
[15] Spotify DRM, 2012.
spotify.
http://www.defectivebydesign.org/
[16] F. Bellard. QEMU, a fast and portable dynamic translator. USENIX, 2005.
[17] J. Bloom and C. Polyzois. Watermarking to track motion picture theft. In
Signals, Systems and Computers, 2004. Conference Record of the Thirty-
Eighth Asilomar Conference on, volume 1, pages 363–367. IEEE, 2004.
[18] L. Boney, A. Tewﬁk, and K. Hamdy. Digital watermarks for audio signals.
In Multimedia Computing and Systems, 1996., Proceedings of the Third
IEEE International Conference on, pages 473–480. IEEE, 1996.
[19] J. Caballero, N. M. Johnson, S. McCamant, and D. Song. Binary code
extraction and interface identiﬁcation for security applications. Technical
report, DTIC Document, 2009.
[20] J. Caballero, P. Poosankam, C. Kreibich, and D. Song. Dispatcher:
reverse-
In Proceedings of the 16th ACM conference on Computer
Enabling active botnet
engineering.
and communications security, pages 621–634. ACM, 2009.
inﬁltration using automatic protocol
[21] J. Caballero, P. Poosankam, S. McCamant, D. Song, et al. Input genera-
tion via decomposition and re-stitching: Finding bugs in malware. In Pro-
ceedings of the 17th ACM conference on Computer and communications
security, pages 413–425. ACM, 2010.
[22] J. Calvet, J. M. Fernandez, and J.-Y. Marion. Aligot: Cryptographic func-
tion identiﬁcation in obfuscated binary programs. 2012.
[34] C. Kolbitsch, T. Holz, C. Kruegel, and E. Kirda. Inspector gadget: Auto-
mated extraction of proprietary gadgets from malware binaries. In Security
and Privacy (SP), 2010 IEEE Symposium on, pages 29–44. IEEE, 2010.
[35] G. Langelaar, R. Lagendijk, and J. Biemond. Removing spatial spread
spectrum watermarks. In Proceedings of the European Signal Processing
Conference (EUSIPCO98), Rodes, Greece, 1998.
[36] P. L’Ecuyer. Testing random number generators.
In Winter Simulation
Conference: Proceedings of the 24 th conference on Winter simulation, vol-
ume 13, pages 305–313, 1992.
[37] Z. Lin, X. Zhang, and D. Xu. Automatic reverse engineering of data struc-
tures from binary execution. 2010.
[38] C. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace,
V. Reddi, and K. Hazelwood. Pin: building customized program analysis
tools with dynamic instrumentation. In ACM SIGPLAN Notices, volume 40,
pages 190–200. ACM, 2005.
[39] N. Lutz. Towards revealing attackers intent by automatically decrypting
network trafﬁc. Master’s thesis, ETH Zuerich, 2008.
[40] T. Moseley, D. Grunwald, D. Connors, R. Ramanujam, V. Tovinkere, and
R. Peri. LoopProf: Dynamic techniques for loop detection and proﬁling. In
Proceedings of the 2006 Workshop on Binary Instrumentation and Applica-
tions (WBIA), 2006.
[41] M. Peitz and P. Waelbroeck. Piracy of digital products: A critical review of
the economics literature. 2003.
[42] C. Shannon. Communication theory of secrecy systems. Bell system tech-
nical journal, 28(4):656–715, 1949.
[43] A. Slowinska, T. Stancescu, and H. Bos. Howard: a dynamic excavator for
reverse engineering data structures. In Proceedings of NDSS, 2011.
[44] F. A. Stevenson.
Cryptanalysis of contents
scrambling system,
http://web.archive.org/web/20000302000206/
2000.
www.dvd-copy.com/news/cryptanalysis_of_contents_
scrambling_system.htm.
[23] R. Caso. Digital Rights Management: Il commercio delle informazioni
digitali tra contratto e diritto d’autore. CEDAM, 2006.
[45] S. Thakkur and T. Huff. Internet streaming SIMD extensions. Computer,
32(12):26–34, 1999.
[24] S. Chow, P. Eisen, H. Johnson, and P. C. Van Oorschot. A white-box des
implementation for drm applications. In Digital Rights Management, pages
1–15. Springer, 2003.
[46] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace. Reformat: Automatic
reverse engineering of encrypted messages. Computer Security–ESORICS
2009, pages 200–215, 2009.
[47] Wikipedia. Analog Hole - Wikipedia, the free encyclopedia, 2012. [Online;
accessed 09-Nov-2012].
[48] Wikipedia. DeCSS - Wikipedia, the free encyclopedia, 2012.
accessed 09-Nov-2012].
[Online;
[49] Wikipedia. Software protection dongle - Wikipedia, the free encyclopedia,
2012. [Online; accessed 09-Nov-2012].
[50] Y. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall. Privacy scope: A pre-
cise information ﬂow tracking system for ﬁnding application leaks. Techni-
cal report, Tech. Rep. EECS-2009-145, Department of Computer Science,
UC Berkeley, 2009.
[25] U. S. Congress. Digital Millennium Copyright Act, October 1998.
[26]
I. Cox and J. Linnartz. Some general methods for tampering with water-
marks. Selected Areas in Communications, IEEE Journal on, 16(4):587–
593, 1998.
[27] G. Danby. Key issues for the new parliament 2010 - copyright and piracy,
http://www.parliament.uk/documents/commons/
2010.
lib/research/key_issues/Key%20Issues%20Copyright%
20and%20piracy.pdf.
[28] E. Diehl and T. Furon. © watermark: Closing the analog hole. In Consumer
Electronics, 2003. ICCE. 2003 IEEE International Conference on, pages
52–53. IEEE, 2003.
[29] W. Difﬁe and M. Hellman. New directions in cryptography. Information
Theory, IEEE Transactions on, 22(6):644–654, 1976.
[30] Engadget. HDCP ‘master key’ supposedly released, unlocks HDTV
http://www.engadget.
copy protection permanently, 2010.
com/2010/09/14/hdcp-master\%2Dkey-supposedly\
%2Dreleased-unlocks\%2Dhdtv-copy\%2Dprotect/.
[31] O. Goldreich. Foundations of Cryptography: Volume 2, Basic Applications,
volume 2. Cambridge university press, 2004.
[32] F. Gr¨obert, C. Willems, and T. Holz. Automated identiﬁcation of crypto-
In Recent Advances in Intrusion
graphic primitives in binary programs.
Detection, pages 41–60. Springer, 2011.
[33] D. Knuth. The art of computer programming. addison-Wesley, 2006.
16
702  22nd USENIX Security Symposium 
USENIX Association