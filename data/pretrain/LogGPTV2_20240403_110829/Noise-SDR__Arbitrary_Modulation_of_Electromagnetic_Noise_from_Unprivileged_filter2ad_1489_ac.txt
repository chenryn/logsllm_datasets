A. Fldigi-Noise-SDR
Architecture: Fldigi [56] is a popular SDR tool that supports a
wide range of amateur radio protocols, each optimized for different
applications (e.g., distance, speed, error correction, robustness to
a certain type of noise). In the Android version [57], a Java GUI
application wraps the native code. We integrated Fldigi with our code
for the RF-PWM and leakage stages, resulting in a standalone tool
that can run on ARMv7-A, ARMv8-A, x86-64, and MIPS32. The tool
is based on intense memory accesses to DRAM that modulate the
emissions of the DRAM clock, and it does not require privileges on
Linux, Windows, and Android. In our tool, Fldigi is used as a library
of modems to modulate the input data using the desired protocol.
Using this modular architecture, adding modulations and protocols
is straightforward (e.g., custom or ported from GNURadio).
Supported protocols: Fldigi-Noise-SDR supports the protocols
available with Fldigi for Android (e.g., CW [58], RTTY [59],
MFSK [60], PSK [61], THOR [62], Olivia [63]). A comparison
of their characteristics and performance is given in [64]. We also
added a simple LoRa-like CSS protocol similar to [8] and a real
LoRa implementation based on [37]. The supported modes use
several different modulation schemes, including On-Off Keying
(OOK), Binary Frequency Shift Keying (BFSK), M-ary Frequency
Shift Keying (MFSK), Offset Incremental Frequency Shift
Keying (IFK+), Phase Shift Keying (PSK), Orthogonal Frequency
Division Multiplexing (OFDM), and Chirp Spread Spectrum (CSS).
Many use advanced methods to work in challenging conditions,
including Forward Error Correction (FEC) and interleaving. Being
implemented in software, the physical layer has many configuration
options (e.g., bandwidth, bit rate, coding rate, symbol shaping). We
will provide more details in Section V.
Interface: For simplicity, we interface with the tool with a
command-line interface. For example, the command
> ./fldigi-noise
-sdr -i secret.txt -m MODE_3X_PSK250R -c 4000
modulates the content of the text file using three orthogonal PSK
subcarriers, generates the corresponding RF-PWM square wave
at an intermediate frequency of 4 kHz, and finally turns it into a
physical radio signal using a leakage. The same functions called
by the CLI tool could be easily exposed to other code, including
a Java application on Android.
RF-PWM: The algorithm to generate an RF-PWM square wave
is illustrated in Figure 6. The first step consists in generating a
modulated IF sinusoidal carrier in a conventional way, in this case
using Fldigi modems (see Appendix A for a simple explanation).
The second step consists in identifying all the periods of the
sinusoidal wave by looking at the zero crossings. They will
correspond to the periods of the RF-PWM square wave. The
amplitude of each period can be identified as well (e.g., as the
maximum over the period). The last step consists in computing the
pulse width for each period, by simply applying a pre-distortion to
the value of the amplitude (see Equation 2). The resulting Thigh,i and
Ti that characterize the square wave are streamed to the next stage
(Stage 3 that controls the leakage). Being implemented in software,
this algorithm operates at discrete time with a sampling frequency of
Fs. In our context a sampling rate of Fs =80kHz is adapted to most
protocols and scenarios, but it can be easily changed. The listing of
our C++ implementation (Listing 1) is available in Appendix B.
Leakage: Our tool modulates the emissions of DRAM clock
(and its harmonics) using memory accesses. To generate the
RF-PWM square wave, we repeat intense memory accesses during
a pulse Thigh,i, followed by inactivity till the end of the period
Ti (time is measured at the ns resolution with clock gettime). On
x86-64/AMD, accessing DRAM is a proven method to generate
strong leakage [6], [7], [44] even in presence of SSC [8]. We
extend this approach to ARMv7-A and ARMv8-A smartphones using
similar yet different techniques. Like previous work on x86-64 [7],
[65], we take inspiration from Rowhammer attacks [66], [67] that
address the same problem of bypassing the cache for direct access
to DRAM. We also support MIPS32 used on a WiFi-enabled Linux
Module. In all cases the code does not require any privilege to run.
• x86-64: On x86-64, DRAM can be written directly using
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
1198
UpperLayersPhysical LayerFIFFleakCarrier(s)E.g., harmonics ofDRAM clock Cross-modulationStage 1 (BB)Software-DefinedStage 2 (IF)Software-DefinedFully-DigitalStage 3 (RF)EM Leakage Produced by SoftwareData"On""Off"Bandpass1-bitCodingxRF(t)Arbitrary modulationFrequencyTimeFleakFleak+FIFFleak-FIFFleak+2FIFFleak-2FIFAMNBFM2xPSK250RTHOR22MFSKLoRa CSS...AnyGLONASSDSSOut-of-band"Noise"V. EXPERIMENTAL EVALUATION
A. Preliminary Considerations
A whole design space: Noise-SDR is a generic way to establish
a communication link, optimized for the desired properties. With
Noise-SDR, the attacker gains the ability to explore a whole design
space for transmissions, while, previous work generally provides
fixed design points. For example, Table II shows a non-exhaustive
list of digital and analog protocols that can be used with Noise-SDR.
A theoretical point of view on the design space: Given a noisy
channel, the Shannon-Hartley theorem [80] about channel capacity
expresses the trade-offs between the data rate, the bit error rate,
the bandwidth occupied by the signal, and the signal-to-noise ratio
over that bandwidth. Given a certain Signal-to-Noise Ratio (SNR),
bandwidth, and error rate, the maximum achievable data rate has
a limit. Existing protocols take design choices in this space [81].
With Noise-SDR, attackers can easily explore this design space, too.
Evaluation: Given a specific leakage source on a specific device,
we compare the performance of different protocols and modulation
techniques. This is meaningful because the same device has the
same properties, such as, power, clock stability, and available
bandwidth. Different leakage sources/devices will have different
properties. Therefore, not all protocols are suitable for all devices,
and the same modulation does not have the same performance on all
devices. One of the advantages of Noise-SDR is the ability to flexibly
choose the best fit. Extensive experimental analyses of leakage are
outside the scope of this paper and available in literature [46]–[50].
Experimental setup at reception: We use an Ettus Research
USRP B210 SDR [82] peripheral, connected to a laptop. One of the
advantages of Noise-SDR is that we do not need to design a custom
signal processing block to implement the receiver (unless we use
a custom protocol). We can simply use popular SDR tools, such as,
Gqrx [83] to control the SDR, and FLDigi [56], Qsstv [69], WSJT-
X [70], and gnss-sdr [84]. There exist many open-source implemen-
tations for many protocols based on GNURadio [68], for example,
for LoRa [37]. The ability to leverage existing high-quality receivers
let us quickly experiment with many protocols, without any engineer-
ing effort. We always use a standard monopole antenna. Only for
Direct Sequence Spread Spectrum (DSSS) we use a NAE-HPROBE-
15 antenna [85] and an additional TEXBOX TBWA2 amplifier [86].
Experimental setup at transmission: We run Noise-SDR on the
target devices in Table III in a realistic home environment. We avoid
any coupling between transmission and reception. For the general
measurements, we run the code in foreground, and we disable other
communication interfaces (airplane mode on mobile devices).
Metrics: In amateur radio speed is given in words (6 characters)
per minute (wpm). For analog protocols we report the audio quality
and rate. For the other protocols we report the amount of time
required to transmit an amount of data. For the SNR, we report
the values computed by the reception tools (when available). The
SNR is defined over a certain noise bandwidth (usually 2.5 kHz
in amateur radio). The percentage of correctly received words (‘%
COPY’) is a good metric for comparing protocols at reception [64].
B. Establishing Advanced Channels
Baseline: Previous was generally based on OOK [6], FSK [10]
(both without symbol shaping), or, recently, approximated Lora-like
Fig. 6. Visualization of the algorithm to generate the RF-PWM signal. Sinusoidal
wave modulated in amplitude/frequency/phase (top). Duration and amplitude of each
period identified at the zero-crossings (middle). Corresponding RF-PWM square
wave (bottom), whose fundamental component matches the original sinusoidal wave.
stream instructions. Like [8], [44], we use mm stream si128
to trigger a leakage during Thigh,i.
• ARMv7-A: On ARMv7-A, unprivileged direct access to
DRAM is possible in Android with the ION allocator [66],
or from the GPU [55]. We empirically observed that simply
allocating and freeing a small chunk of memory with ION
produces a strong leakage. We use this to generate a leakage
during Thigh,i.
• ARMv8-A: On ARMv8-A, unprivileged direct access to
DRAM is possible with non-temporal and cache maintenance
instructions [67]. In particular, the DC CIVAC instruction
cleans and invalidates an address in data cache, so that a
following load accesses DRAM. We use this method produce
strong leakages during Thigh,i.
• MIPS32: On MIPS32, we alternate counter increments during
Thigh,i with sleeps, similarly to [44].
Code listings for these four architectures are shown in Appendix B.
B. Other Implementations Of Noise-SDR
Offline Noise-SDR: The leakage stage of Noise-SDR for a
given application can run alone on the target device, reading the
timings of the square wave from a precomputed file. Similarly
the RF-PWM stage can run alone to produce an RF-PWM square
wave from a generic baseband signal generated with another SDR
tool (e.g., GNURadio [68], Qsstv [69], FLDigi [56], WSJT-X [70]).
GNURadio is a generic framework (also available for Android [71])
for signal processing, which allows defining custom C++ and
Python blocks. The RF-PWM and leakage stages could be easily
added to signal processing flows this way. We demonstrate the
offline method for protocols such as FT4 [72], GLONASS C/A [73],
HamDRM [74], SSTV [75], AM [76], and NBFM [77] (but they
could be easily integrated into Fldigi-Noise-SDR, too).
Other leakage sources: Noise-SDR is not limited to using
the leakage produced by memory accesses to DRAM. We have
conducted preliminary experiments using other methods and
sources to generate the leakage. For example, (i) math operations
in JavaScript [44], and (ii) screens displaying pixels of different
color [1], [3], [45], [78], [79]. However, they are outside the scope
of this paper. Indeed, for sake of clarity we focus on one leakage
source (memory accesses on several architectures) to show the
novel idea of arbitrary modulation.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:24:04 UTC from IEEE Xplore.  Restrictions apply. 
1199
An/Fs2An/Fs3An/Fs1TABLE II
SOME DIGITAL AND ANALOG PROTOCOLS
Name
Simple CW
Simple RTTY
LoRa-like
CW
RTTY
LoRa
MFSK
THOR
PSK
Multi-carrier PSK
FT4
HamDRM
GLONASS C/A
AM
NBFM
SSTV
Modulation
OOK
BFSK
CSS
Shaped OOK
Shaped BFSK
CSS
8FSK-32FSK
IFK+
BPSK
PSK OFDM
4-GFSK
QAM OFDM
DSSS
Analog AM
Analog FM
Analog FM
Bandwidth
>50 Hz to >200 Hz
>270 Hz to >370 Hz
Custom 8000 Hz
50 Hz to 200 Hz
270 Hz to 370 Hz
Custom 8000 Hz
154 Hz to 1920 Hz
173 Hz to 1800 Hz
31 Hz to 1800 Hz
650 Hz to 3600 Hz
90 Hz
2.4 kHz
0.511 MHz
10 kHz
12.5 kHz
2.5 kHz
Reference
[58], [64]
[59], [64]
[8], [37]
[58], [64]
[59], [64]
[37], [87]
[60], [64]
[62], [64]
[61], [64]
[64]
[72]
[74]
[73]
[76]
[77]
[75]
CSS [8]. For this reason, we chose the following baseline:
• Simple CW (OOK): CW [58] uses Morse code encoding and
then turns the carrier on and off to represent marks and spaces.
• Simple RTTY (FSK): RTTY [59] uses two tones to send
ones and zeros.
• Simple LoRa-like (CSS): We implemented simple Lora-like
CSS by removing advanced techniques like FEC and interleav-
ing from the full LoRa implementation used by Noise-SDR.
Table IV (IV.1-IV.5) shows the results of the baseline. For each
device/protocol, we report the maximum distance for reliable
transmission. CW20 (Table IV.1) has good performance regarding
distance (thanks to its very low bandwidth) but it is very slow.
Reducing Inter Symbol Interference (ISI) with shaping:
Sharp transitions between symbols occupy a large bandwidth
and lead to ISI, reducing performance. This form of noise can be
removed by shaping the spectrum of the symbols with appropriate
filters. This is commonly implemented Fldigi and other tools that
work with real SDRs. However, previous work cannot use them,
because they generally result in a signal with concurrent amplitude
and frequency changes at multi-bit resolution. Instead, Noise-SDR is
an SDR and is able to generate these signals. All Fldigi modes with
symbol shaping (e.g., PSK) are also available in Fldigi-Noise-SDR.
Using phase modulation: For the first time, we show PSK
with a leakage. PSK can achieve a high spectral efficiency (the
number of bits transmitted per second per hertz of occupied
bandwidth) [64]. In addition, PSK is often used to modulate the
subcarriers of a high-speed OFDM transmission. All PSK modes
in Fldigi-Noise-SDR use symbol shaping for optimal performance.
See Table IV (IV.12-IV.20) for examples of (multi-carrier) PSK.
DSSS for resilience, secrecy, and multiple-access: For the first
time, this paper shows DSSS with a leakage. DSSS is a spread
spectrum technique based on multiplying a PSK signal with a
pseudorandom spreading code. Spreading makes the communication
more resistant to narrow-band noise. The autocorrelation properties
of the code make detection and tracking possible below the noise
floor. Using a secret code (or cryptographically secure) code makes
the transmission hard to detect or jam. The low cross-correlation
between codes makes it possible for two transmitters to use the
Interleaving: shuffling bits over time spreads burst errors over multiple
Fig. 7.
words, where FEC can correct them, improving resilience to fading/interference.
same frequency (Code Division Multiple Access (CDMA)). DSSS
is possible thanks to: (i) the phase modulation of the leakage, (ii)
the reuse of Global Navigation Satellite System (GNSS) protocols.
Existing SDR receivers [84] which implement code detection and
tracking can precisely determine the frequency and phase of the
codes, working even with unstable clocks or moving targets. We
experimented with the GLONASS C/A code (Table IV.18). We also
implemented a ‘slowed down’ mode of GLONASS (including code
and data) that runs 10 times slower (Table IV.19). Similarly, we
experimented the transmission of 2 GPS C/A codes simultaneously,
100 times slower (Table IV.20). The problem of synchronization
(solved by GNSS receivers) is one of the reasons why previous
work [8] avoided DSSS in favor of CSS. Both CSS and DSSS are
transparently supported by Noise-SDR’s SDR approach.
Improving noise resilience with FEC and interleaving: The
various sources of noise that affect a radio channel might introduce
errors in the received data, even if the modulation scheme is itself
robust. Several techniques exist to counter this problem. FEC [88]
adds m redundant bits of information every n bits of data (coding
rate n/(n+m)). On the one hand this reduces the efficiency of the
transmission, on the other hand it makes the receiver able to detect
and correct up to a certain number of bit errors. In other words, a low
error rate can be achieved with a lower SNR, at the price of a lower
effective data rate due to redundancy. Sometimes, errors are local-
ized at a certain moment in time (e.g., interfering signal, fading con-
dition) leading to many errors for a single word, so that FEC is not
enough to correct them. Interleaving [88] spreads the bits of a single
word of data over multiple words over time. If a burst error occurs on
a full word after interleaving, it will result in smaller errors on many
words after de-interleaving. Such smaller errors spread over multiple
words are more likely to be detected and corrected by FEC. Figure 7
informally summarizes this concept. Previous work on exfiltration
uses simple custom protocols without these techniques (to the best of
our knowledge only [11] uses FEC). Instead, Fldigi-Noise-SDR sup-
ports a large number of protocols that use FEC and interleaving to
achieve high robustness in challenging environments (THOR, PSKR
(Robust), real LoRa, to cite a few). With Noise-SDR supporting ex-
isting advanced protocols is transparent and available to any attacker,