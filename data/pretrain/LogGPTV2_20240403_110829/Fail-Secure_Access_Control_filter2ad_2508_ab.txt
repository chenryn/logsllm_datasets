the following fail-security requirement:
Fail-security requirement 1 (FR1): When the PDP mod-
ule cannot compute an access decision due to malformed or
missing policy speciﬁcations, then it uses the default speciﬁ-
cation if logging is enabled, and it denies access otherwise.
To illustrate this, consider the case where the PDP module
composes ﬁnitely many access control lists (ACLs) using the
permit-overrides operator, which permits access if at least
one of the ACLs permits access, and denies access otherwise.
To adhere to FR1, the PDP module must invoke the failure
handler if and only if none of the ACLs permits access and
at least one of them is malformed. The failure handler in
this example would evaluate the default ACL def and check
whether logging is enabled. Figure 2 gives a straightforward
authorization method for this scenario in pseudo-code. The
method takes as input a user object u, the requested ob-
ject o, and a list aclIDs of ACL identiﬁers. The method
readAcl(id) returns the ACL object corresponding to id,
pol(X) :- owner(X)
pol(X) :- pol(Y), grant(Y,X)
(a) Access control policy del.policy (in Datalog).
isAuthorized(Subject s, List delegations)
datalogEngine.load(del.policy)
for ((delegator, delegatee) in delegations)
try
if (rev.query(delegator, delegatee) == false)
datalogEngine.assert(grant(delegator, delegatee))
catch (QueryException e)
if isOwner(delegator)
datalogEngine.assert(grant(delegator, delegatee))
return datalogEngine.check(pol(s))
(b) PDP module, where datalogEngine represents a Datalog in-
terpreter. The method rev.query() may throw an exception.
Figure 4. A PDP module for the grid example.
and throws a ReadAclException exception when it cannot
ﬁnd or parse the associated ACL. The default ACL def is
hard-coded in the method.
The pseudo-code describes a correct permit-overrides op-
erator for ACLs under normal conditions, i.e. when there are
no failures. The catch block is also correct as it intuitively
follows the structure of FR1. However, the failure handling
is overly eager in that if a ReadAclException is thrown while
evaluating an input ACL then the PDP stops evaluating the
remaining input ACLs and jumps to the catch block. This
method therefore does not satisfy FR1: if a list of two ACL
identiﬁers is passed to the method and the ﬁrst ACL fails
to load, then the method immediately consults def, which
would be wrong if the second ACL would permit access.
This problem is rooted in the overly eager invocation of
the failure handler. The problem here is not an instance of
syntactic vulnerability patterns, such as overly-broad throws
declaration and overly-broad catch block [20], and it cannot
be solved for example by simply moving the try-catch con-
struct inside the for loop. One solution would be to delay
the invocation of the failure handler until all the ACLs have
been evaluated.
To conclude, because existing web access control frame-
works typically separate failure handling from the normal
policy of the PDP, it is diﬃcult to gain conﬁdence in their
security. To rise to this challenge, policy speciﬁcation lan-
guages and their analysis frameworks should also account
for the interactions that result from the separation. In §4
we give a formal speciﬁcation of the method of Figure 2, and
we verify the speciﬁcation against FR1 in §5, which reveals
the discussed problem.
Authorizations in Grids. In grid computing platforms,
resources (such as storage space) are located in diﬀerent
domains. Each domain has an owner, and only one PDP
controls access to the domain’s resources.
It is however
infeasible for each PDP to manage authorizations for all
subjects from all domains. Domain owners therefore del-
egate authorization management to trusted subjects, pos-
sibly from other domains. These subjects may then issue
tokens to authorize other subjects and to further delegate
their rights. All tokens are stored as digital credentials. Sub-
jects then submit their credentials, alongside their access re-
quests, to a PDP. In addition, it is sometimes necessary to
revoke subject’s credentials, for example when dealing with
Credentials
Subjects
Requests (R) and
Credentials (C)
Grant/Deny access
PEP
PEP
Adversary
R, C
Grant/Deny
PDP
Remote queries
Information
PIP
PIP
Figure 5. System model for decentralized and distributed access control systems.
ex-employees. A common solution is to store all revoked
credentials on a central revocation server.
A (delegation) chain for a subject S is a transitive delega-
tion from the domain owner to S. We say that a delegation
chain is non-revoked if none of the delegations in the chain
has been revoked. A given domain’s PDP grants access if the
subject has at least one non-revoked delegation chain or the
subject is the domain’s owner. The revocation server may
sometimes be unavailable, for example due to lost network
connectivity. Denying all access in the case of failures may
be too restrictive as the unavailability of some resources, to
selected subjects, would be too costly [33]. One fail-security
requirement that reﬂects this notion is:
Fail-security requirement 2 (FR2): When the PDP cannot
check whether a subject has at least one non-revoked dele-
gation chain due to failures, the PDP grants access if the
subject is a direct delegate of the owner; otherwise it denies
access.
The rationale is that the owner rarely revokes his di-
rect delegates. This requirement also states that the owner
chooses to ignore all delegations issued by subjects, includ-
ing his direct delegates, whose delegation chains cannot be
checked. Figure 3 illustrates one delegation scenario and
shows which subjects are granted access according to FR2.
Existing delegation languages do not specify failure han-
dling within policy speciﬁcations, but rely on having fail-
ure handlers within the PDP. This approach, which sepa-
rates the delegation logic from failure handling, is described
in [8]. Based on these guidelines, Figure 4 depicts a pos-
sible PDP design for our grid access control scenario.
In
Figure 4a, we specify the normal policy of the PDP in Dat-
alog, the core of many delegation access control languages
(see e.g. [3, 13, 16, 25]). The policy grants access to a sub-
ject X if X is an owner or has a (transitive) delegation chain
from an owner. Before evaluating the Datalog policy, the
PDP checks whether each supplied delegation is still valid
by querying the revocation server. If it is revoked then the
PDP discards the delegation.
Considered separately, the Datalog normal policy and the
failure handler of Figure 4 intuitively conform to FR2. Their
interaction however leads to a subtle attack. The attack,
described in §5, results from the preemptive masking of fail-
ures. We were unable to ﬁnd the attack before specifying
this PDP in BelLog; we believe this applies to most policy
writers.
Finally, we remark that our goal in this paper is not to
promote particular fail-security requirements; they can be
determined for example from a risk analysis of each deployed
system. Our goal is instead to raise and address the need
for analyzing access control systems in the presence of (ma-
licious) failures with respect to their security requirements.
We stress that even systems that are intended to conform to
simple conservative requirements, such as the fail-safe prin-
ciple (deny all access if there is any failure) [29], are not
exempt from failure-handling ﬂaws, and thus should also be
analyzed.
3. SYSTEM AND ADVERSARIAL MODEL
We consider distributed access control systems where a
policy decision point (PDP) communicates with multiple
policy enforcement points (PEP), and multiple policy in-
formation points (PIP); see Figure 5. A subject submits
requests and credentials to a PEP, which forwards them to
the PDP. A credential maps a subject or a resource to an
attribute (such as a role). Credentials are issued by, and
exchanged between, subjects; they can also be stored lo-
cally at the PDP. We assume that the PDP veriﬁes their
authenticity, for example using digital signatures. The PDP
sends remote queries to PIPs to obtain information rele-
vant for making access decisions, for example information
concerning revoked subjects and the current time. Remote
queries can be implemented through inter-process communi-
cation mechanisms such as ﬁles, network sockets, and shared
memory. The PDP software, either implicitly or explicitly,
recognizes and handles communication failures.
The PDP interprets a normal access control policy, which
maps access requests, credentials, and information to access
decisions; the normal policy does not specify failure han-
dling. The policy is deﬁned by policy rules, which are issued
by the subjects and given to the PDP for evaluation. The
PDP has one designated subject, the administrator, who has
the authority over all access requests and his policy rules are
always evaluated. The PDP takes other rules into account
only if the administrator has delegated to their issuers, ei-
ther directly or transitively, authority over the given request.
All access decisions made by the PDP are forwarded to, and
enforced by, the PEPs.
In our model, we assume that the PDP and the PEPs
do not fail, whereas PIPs can fail. We also assume that the
communication channels between the PDP and the PIPs can
fail, while all other channels (e.g. PEP-to-PDP) are reliable.
We assume that communication delays are bounded and fail-
ures are determined either by timeouts or by receiving cor-
rupted messages. After the PDP sends a remote query q to
a PIP, it therefore receives one of two responses: (1) the an-
swer to q; or (2) error, indicating a communication failure.
Table 1. Analyzed access control systems and their failure-
handling idioms.
System
Cisco IOS [11]
KABA KES-2200 [21]
Kerberos [22]
RedHat Firewall [28]
Spring Framework [30]
WebSphere [35]
XACML PDPs [38]
Failure-handling Idioms
Catch
Catch
Fallback
Catch
Propagate, Catch
Catch
Propagate, Catch
Note that in our model, PIP failures are indistinguishable
from communication failures.
An adversary is a subject who can cause any remote query
to fail. The adversary cannot however forge credentials or
forge and replay past remote queries and obsolete responses.
To this end, we assume that all communication channels
are authentic and have freshness guarantees (through times-
tamps, nonces, etc.). Note that our adversary model sub-
sumes all failures due to benign causes. The adversary can
in particular cause complete channel failure by causing all
remote queries through that channel to fail. We remark that
query conﬁdentiality and information ﬂow concerns [4] are
outside of this paper’s scope.
In addition to the examples given in §2, this system model
encompasses many other real-world access control settings,
such as authorization systems for electronic health records [5].
4. SPECIFYING ACCESS CONTROL WITH
FAILURE HANDLING
In this section, we ﬁrst describe three failure-handling id-
ioms, derived by analyzing seven existing access control sys-
tems and their failure handlers. These idioms are abstrac-
tions we use for modeling failure-handling mechanisms. We
then give an overview of the speciﬁcation language BelLog,
and show how it can be used to specify the failure-handling
idioms and the PDPs of §2, including their failure handlers.
4.1 Failure-handling Idioms
To understand how existing systems handle communica-
tion failures, we have inspected the documentation of seven
access control systems; see Table 1. Our analysis revealed
three failure-handling idioms, which are suﬃcient to describe
how failures are handled in these systems. To describe the
idioms, we abstract a PDP as evaluating a request through
a ﬁnite sequence of computation and communication steps;
hereafter referred to as events. We assume that computation
events always terminate successfully, while communication
events either terminate successfully or fail. Note that simi-
lar abstractions exist for exception handling in programming
languages [19,24].
Fallback. The fallback idiom abstracts the failure handlers
that use fallback information sources when the communica-
tion channels to the primary information sources fail. If a
communication event fails then it is re-executed using the
fallback source. The fallback source can be, for example, a
backup of a primary information source. This idiom is used
in access control systems whose primary authentication ser-
vices are unreliable. For example, Kerberos [22] can fall
back on local user/password lists when its primary LDAP
authentication service is unavailable.
To instantiate this idiom, a fallback source must be con-
ﬁgured for each information source that may fail. Although
the fallback source may be periodically synchronized with
the information source, it may nevertheless provide stale in-
formation of inferior quality.
Catch. This idiom abstracts the failure handlers that catch
failures and then enforce alternative access control policies.
The catch idiom is analogous to exception handling in pro-
gramming languages where the failure to execute a given
procedure is handled by a designated procedure. In terms
of the PDP’s execution, whenever an event fails, the execu-
tion branches to another (alternative) sequence of events.
We can use this idiom to implement a system that meets
FR2. The system’s alternative access control policy would
contain only the grants for the owners’ direct delegates. Sys-
tems that employ this idiom include: KABA KES-2200 [21],
which is a token-based physical access control system that
upon power failures is conﬁgured to either grant or deny
all requests; IBM WebSphere [35], whose exception han-
dlers evaluate designated error-override policies; and Cisco
IOS [11] and RedHat Firewall [28], which in case of failures
use alternative rule sets.
Propagate. Both the fallback and the catch idioms handle
failed events immediately upon failure. In contrast, FR1 re-
quires failures to be handled after all the ACLs have been