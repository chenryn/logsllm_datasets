Security. Springer, 2012, pp. 65–77.
[56] A. Kurtz, A. Weinlein, C. Settgast, and F. Freiling, “Dios: Dynamic
privacy analysis of ios applications,” Technical Report CS-2014-03 June,
Tech. Rep., 2014.
[57] Valgrind, “Valgrind,” http://valgrind.org.
[58] Z. Deng, B. Saltaformaggio, X. Zhang, and D. Xu, “iris: Vetting private
api abuse in ios applications,” in Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2015,
pp. 44–56.
[59] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund,
S. N¨urnberger, and A.-R. Sadeghi, “Mocﬁ: A framework to mitigate
control-ﬂow attacks on smartphones.” in NDSS, 2012.
[60] T. Werthmann, R. Hund, L. Davi, A.-R. Sadeghi, and T. Holz, “Psios:
bring your own privacy & security to ios devices,” in Proceedings
of the 8th ACM SIGSAC symposium on Information, computer and
communications security. ACM, 2013, p. 1324.
[61] D. Engler, D. Y. Chen, S. Hallem, A. Chou, and B. Chelf, Bugs as
deviant behavior: A general approach to inferring errors in systems code.
ACM, 2001, vol. 35, no. 5.
[62] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz, “Cross-
architecture bug search in binary executables,” in IEEE S&P, 2015.
[63] J. Han, Q. Yan, D. Gao, J. Zhou, and R. Deng, “Comparing mobile
privacy protection through cross-platform applications,” in NDSS, 2013.
[64] L. Prechelt, G. Malpohl, and M. Philippsen, “Finding plagiarisms among
a set of programs with jplag,” J. UCS, vol. 8, no. 11, 2002.
domob
weibo
tencent
aliyun
cocos2dx
purchasesdk
facebook
screensaver
Fig. 12: The call relation between libraries. Many benign libraries
(white node) including those famous ones like Facebook, Coco2dx
and Weibo are referring a PhaLib (black node).
A. Library Referring
APPENDIX
We also note that it is very common that a library (sometimes
very famous like Facebook) will refer another one to utilize
its functionalities, which enforces a developer to download the
referred one that they may not be familiar with. So it is more
likely that the developer download a contaminated library. To
understand the security implications of such library referring,
we analyzed all the PhaLibs discovered in our study and the
libraries referring them, as elaborated in Figure 12. In this
ﬁgure, gray nodes represent the infected referred PhaLibs, the
white nodes are the libraries referring the PhaLibs and arrows
represent their referring relations. Altogether, we discovered
63 referred PhaLibs, which infect 188 libraries. Among them
are highly popular libraries such as Facebook, Purchasesdk,
Cocos2dk, Weibo and Tencent. For example, the Facebook
library refers a library prime31, which were conﬁrmed to
be potentially harmful by VirusTotal and exhibits potentially
harmful behaviors such as stealing device information, sending
a message, and taking a picture. Also as we can see from
the ﬁgure, a legitimate library can be infected by more than
one referred PhaLibs and a PhaLib can also contaminate
multiple legitimate libraries. An example is screensaver, a
library blanking the screen or ﬁlling it with moving images. It
is referred by 6 legitimate libraries (e.g., mobiware, wapsad,
entrance, controller) and in the meantime, refers 2 other
suspicious libraries (mobiware and wrapper). Further some
libraries are found to be infected indirectly, such as sponsorpay.
B. Supporting Tables and Figures
373373
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
iOS libs
Adwhirl
Interactive
AdMob
iAd
Flurry
AdColony
Millennial Media
Jumptap
Mopub
Analytics
Tag Manager
App Events
InMobi
Localytics
Unity
Cordova
Corona
Adobe
PhoneGap
Marmalade
Crashlytics
Twitter Beta
Hockey
New Relic
Crittercism
Bugsense
Roboguice
Facebook
WeChat
Pinterest
Sina
Dropbox
MagicalRecord
Amazon
Box
Yandex
Appcelerator Titanium
Twitter performance metrics
Has android version
Y
Y
Y
N
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
Y
N
Y
Y
Y
TABLE VI: Top 38 libs (from SourceDNA) and whether they have
Android versions.
Library # Variations # Pha variations
mobclick
inapp
gfan
jirbo
yrkfgo
admogo
sharesdk
pad
Leadbolt
adsmogo
V1 4
mobiware
appﬂood
adwo
zkmm
mobiSage
wanpu
zywx
imgview
prime31
clevernet
lotuseed
umpay
181
109
97
84
53
42
27
25
24
20
20
19
14
13
13
8
7
7
5
5
3
1
1
131
109
97
84
53
42
27
3
24
20
20
19
14
13
13
8
7
7
5
5
3
1
1
35000
30000
25000
20000
15000
10000
5000
s
p
p
a
f
o
r
e
b
m
u
N
0
2
5.11%
2.90%
2.03%
384
2.05%
82
152
1.16%
75
1029
6.00%
5.00%
651
4.00%
3.59%
3.07%
3.00%
2.90%
413
2.00%
s
A
H
P
f
o
e
g
a
t
n
e
c
r
e
P
1.00%
0.00%
2008
2009
2010
2011
2012
2013
2014
2015
Year
Fig. 13: The distribution of such PHAs over the time they stay on
the Apple Store.
iOS: install .ipa file using private API
// WapsSilentRequest - (int)IPAInstall:(id)
int __cdecl -[WapsSilentRequest IPAInstall:](struct WapsSilentRequest *self, 
SEL a2, id a3)
{
v26 = a3;
v8 = 
dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framew
ork/MobileInstallation", 1);
if ( v8 )
{
v27 = (int)dlsym(v8, "MobileInstallationInstall");
if ( v27 )
{
v25 = objc_msgSend(CFSTR("Install_"), "stringByAppendingString:", 
v10);
v14 = objc_msgSend(
&OBJC_CLASS___NSDictionary,
"dictionaryWithObject:forKey:",
CFSTR("User"),
CFSTR("ApplicationType"),
v22);
v28 = ((int (__fastcall *)(void *, void *, _DWORD, id))v27)(v25, v14, 0, 
v26);
…...
}
}
return result;
}
Fig. 14: Sample Code I (Install apps using private API).
TABLE VII: PhaLibs on iOS and their variations
374374
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:50 UTC from IEEE Xplore.  Restrictions apply. 
iOS: get installed app list using private API
iOS: get identifier related with Apple account
// WapsRequest - (id)browseApps:(id) id __cdecl -[WapsRequest
browseApps:](struct WapsRequest *self, SEL a2, id a3)
{
v4 = objc_msgSend(&OBJC_CLASS___NSMutableArray, "new");
v5 = (struct objc_object *)objc_msgSend(v4, "autorelease");
v6 = 
dlopen("/System/Library/PrivateFrameworks/MobileInstallation.framew
ork/MobileInstallation", 1);
if ( v6 )
{
v7 = dlsym(v6, "MobileInstallationBrowse");
v8 = CFSTR("Any");
if ( v3 )
v8 = (__CFString *)v3;
v9 = objc_msgSend(&OBJC_CLASS___NSDictionary, 
"dictionaryWithObject:forKey:", v8, CFSTR("ApplicationType"));
((void (__fastcall *)(_DWORD, _DWORD, _DWORD))v7)(v9, callback, 
v5);
}
return v5;
}
v2 = objc_msgSend(
&OBJC_CLASS___NSBundle,
"bundleWithPath:",
CFSTR("/System/Library/PrivateFrameworks/AppleAccount.framework"));
if ( (unsigned int)objc_msgSend(v2, "load") & 0xFF
&& (sprintf(&v9, "%s%s%s", "AA", "Device", "Info"), 
v3 = objc_msgSend(&OBJC_CLASS___NSString, 
"stringWithUTF8String:", &v9), 
(v4 = (void *)NSClassFromString(v3)) != 0) 
&& (v5 = objc_msgSend(&OBJC_CLASS___NSString, 
"stringWithFormat:", CFSTR("appleI%@tIdentifier"), 
CFSTR("DClien")), 
v6 = ((int (*)(void))NSSelectorFromString)(), 
(unsigned int)objc_msgSend(v4, "respondsToSelector:", v6) & 0xFF) ) 
{
}
v7 = NSSelectorFromString(v5);
result = (id)objc_msgSend(v4, "performSelector:", v7);
Fig. 17: Sample Code IV (Get Identiﬁer Related with Apple Account).
Fig. 15: Sample Code II (Get installed app list using private API).
iOS: access app’s keychain
v7 = objc_msgSend(&OBJC_CLASS___NSMutableDictionary, "alloc");
v8 = objc_msgSend(v7, "init");
*((_DWORD *)v6 + 2) = v8;
objc_msgSend(v8, "setObject:forKey:", kSecClassGenericPassword, 
kSecClass);
objc_msgSend(*((void **)v6 + 2), "setObject:forKey:", v4, kSecAttrGeneric);
if ( v5 )
objc_msgSend(*((void **)v6 + 2), "setObject:forKey:", 
v5, kSecAttrAccessGroup);  [identify keychain entry]
objc_msgSend(*((void **)v6 + 2), "setObject:forKey:", kSecMatchLimitOne, 
kSecMatchLimit);
objc_msgSend(*((void **)v6 + 2), "setObject:forKey:", kCFBooleanTrue, 
kSecReturnAttributes);
v9 = objc_msgSend(&OBJC_CLASS___NSDictionary, 
"dictionaryWithDictionary:", *((_DWORD *)v6 + 2));
v12 = 0;
if ( SecItemCopyMatching(v9, &v12) )
{
objc_msgSend(v6, "resetKeychainItem");