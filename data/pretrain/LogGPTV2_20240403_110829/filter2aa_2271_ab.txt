EFI_FVB_ATTRIBUTES
Attributes;
UINT16
HeaderLength;
UINT16
Checksum;
UINT8
Reserved[3];
UINT8
Revision;
EFI_FV_BLOCK_MAP_ENTRY
FvBlockMap[1];
} EFI_FIRMWARE_VOLUME_HEADER;
Listing 3: Capsule Update envelope structures.
3
Capsule Update Vulnerabilities
The authors performed a brief 2 week audit of the open source UEFI reference implementation at release
UDK2010[9]. The focus of the audit was the capsule update process, and the scope was limited to code that
executes before cryptographic veriﬁcation of the capsule contents. Critical vulnerabilities were found both
6
CAPSULE
FIRMWARE_VOLUME_HEADER
FIRMWARE_VOLUME_HEADER
FIRMWARE_FILE
FIRMWARE_FILE
CAPSULE_HEADER
FIRMWARE_VOLUME_HEADER
Figure 3: Capsule Envelopes
in the PEI coalescing phase, and in the DXE capsule processing phase. The speciﬁcs of the vulnerabilities
are discussed below.
3.1
Coalescing Vulnerability
EFI_STATUS
EFIAPI
CapsuleDataCoalesce (
IN EFI_PEI_SERVICES
**PeiServices,
IN EFI_PHYSICAL_ADDRESS
*BlockListBuffer,
IN OUT VOID
**MemoryBase,
IN OUT UINTN
*MemorySize
)
{
...
//
// Get the size of our descriptors and the capsule size. GetCapsuleInfo()
// returns the number of descriptors that actually point to data, so add
// one for a terminator. Do that below.
//
GetCapsuleInfo (BlockList, &NumDescriptors, &CapsuleSize);
if ((CapsuleSize == 0) || (NumDescriptors == 0)) {
return EFI_NOT_FOUND;
}
...
DescriptorsSize
= NumDescriptors * sizeof (EFI_CAPSULE_BLOCK_DESCRIPTOR);
...
if (*MemorySize Union.ContinuationPointer != (EFI_PHYSICAL_ADDRESS) (UINTN) NULL) {
if (Desc->Length == 0) {
//
// Descriptor points to another list of block descriptors somewhere
//
Desc = (EFI_CAPSULE_BLOCK_DESCRIPTOR
*) (UINTN) Desc->Union.ContinuationPointer;
} else {
Size += (UINTN) Desc->Length; NumBlocks = 0;
for (PtrBlockMapEntry = FwVolHeader->BlockMap;
PtrBlockMapEntry->NumBlocks != 0;
PtrBlockMapEntry++) {
FvbDev->NumBlocks += PtrBlockMapEntry->NumBlocks;
}
//
// Second, allocate the cache
//
FvbDev->LbaCache = AllocatePool (FvbDev->NumBlocks * sizeof (LBA_CACHE)); Length != 0) || (CurrentBlockDesc->Union.ContinuationPointer != (EFI_PHYSICAL_ADDRESS) (UINTN) NULL)
//
// See if any of the remaining capsule blocks are in the way
//
TempBlockDesc = CurrentBlockDesc;
while (TempBlockDesc->Length != 0) {
//
// Is this block in the way of where we want to copy the current descriptor to?
//
if (IsOverlapped (
(UINT8 *) DestPtr,
(UINTN) CurrentBlockDesc->Length,
(UINT8 *) (UINTN) TempBlockDesc->Union.DataBlock,
(UINTN) TempBlockDesc->Length
)) {
//Relocate the block
RelocPtr = FindFreeMem (BlockList, FreeMemBase, FreeMemSize, (UINTN) TempBlockDesc->Length);
....
CopyMem ((VOID *) RelocPtr, (VOID *) (UINTN) TempBlockDesc->Union.DataBlock, (UINTN) TempBlockDesc->Length);
TempBlockDesc->Union.DataBlock = (EFI_PHYSICAL_ADDRESS) (UINTN) RelocPtr;
}
// Next descriptor
TempBlockDesc++;
}
...
CopyMem ((VOID *) DestPtr, (VOID *) (UINTN) (CurrentBlockDesc->Union.DataBlock), (UINTN)CurrentBlockDesc->Length);
DestPtr += CurrentBlockDesc->Length;
Listing 7: CapsuleDataCoalesce code continued
4.1.1
Coalescing Exploitation Diﬃculties
The most obvious exploitation approach is to supply a Capsule with CapsuleSize large enough to force
CapsuleSize + DescriptorSize to overﬂow (Bug 1). Then the process of coalescing the huge capsule will
overﬂow the intended coalescing area and corrupt the address space. Figure 4 demonstrates this approach.
However, this most obvious approach was insuﬃcient on the MinnowBoard. When the overﬂow began
writing into the address space gap described in Section 4.1, the writes would silently fail. Although the
destination pointer for the memory copy operation continued to proceed upwards despite these invalid
writes, a timeout associated with the failed write slowed the process down to a prohibitively slow pace. A
di↵erent approach was considered.
11
00000000
FFFFFFFF
MemBase 
MemBase + MemSize
3C1BF000
100000
UEFI PEI Code
PEI Stack
Intended Coalescing Space
DescriptorArray[0]
Length=FFFFFF2B
DataBlock=Wherever
Overflowing DataBlock Copy
Top of RAM
40000000
Figure 4: First Attempt at Coelescing Exploitation fails due to the address space gap
4.1.2
Descriptor Overwrite Approach