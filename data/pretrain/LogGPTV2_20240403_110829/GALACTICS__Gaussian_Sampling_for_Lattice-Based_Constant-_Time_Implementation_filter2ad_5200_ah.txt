elements made by the newly generated polynomial and d zeros. Then each shared coefficient of
the polynomial is securely multiplied (using d-SNI function SecMult from [38]) with an arithmetic
sharing of 1 or −1 generated with function BitGen. The last step consists in a random permutation
of these coefficients, as in the constant-time version.
Lemma 5.3. PolyGen is d-NI secure.
Proof. The algorithm does not take any sensitive inputs. We thus show that any set of δ ≤ d
observations can be perfectly simulated with at most δ shares of each coefficient of the output
polynomial f (resp. g). Since there is no cycle, from the composition results of [2], it is enough to
prove that each sub-gadget is d-NI to achieve global security. The first generation of coefficients
only manipulates constants. Then, Linear-Refresh is d-NI from [2]. SecMult and BitGen are also
proven to be d-NI, respectively in [2] and further in Lemma 5.10. Finally, the random permutation
does not mix coefficients and only switch sharings, it is thus also d-NI.
□
RSKG. Once the secret key is generated, a rejection sampling step is performed (Steps 4 and 5 in
Figure 1). Its constant time version is given in Section 3.2.4. In the masked version, the first step
(Step 2 in Figure 12) consists in matrices multiplications where matrices are defined by s1 and s2.
For intermediate multiplications involving s1 and s2 (or their transposes) as operands, function
d-SNI SecMult can be applied. When both operands involve the same part of the secret key, a
secure refreshing function is called prior to the multiplication using FullRefresh (refreshing
gadget introduced in [27] and proven to be d-SNI in [2]). Function NetworkSort basically compares
and performs computations on coefficients of matrix T. Each comparison can be performed using
a d-SNI comparison algorithm as given in [3], and the computations can make use of the d-SNI
SecMult function. For each row, the κ first matrix coefficients are added together via their arithmetic
30
sharings. Finally, a secure comparison can be performed with a final call to Unmask to safely output
the Boolean value RejSp.
Lemma 5.4. RSKG is d-NIo secure with public output RejSp.
Proof. Each step of RSKG is computed with a d-NI or d-SNI function. Some cycles occur for
functions taking as operands two inputs issued from the same secret element. Nevertheless, they
have no impact since for each such cycle in Step 2, a d-SNI refreshing algorithm is performed to
break dependencies and the additions in Steps 4 and 6 also manipulates data that are previously
refreshed by d-SNI multiplications. Finally, function Unmask to output a single Boolean value makes
function RSKG d-NIo secure with public output RejSp.
□
PkGen. Our masked version of PkGen is a bit more complicated and we thus give its graphical
description in Figure 16. Note that SecArithBoolModp (SABModP on the figure) was introduced
in [3] and NTT is the classical Number Theoretic Transform and applies independently on each
share. SecIsNull tests whether a shared value is equal to zero without revealing information on
its sharing. Basically, all the complementary sharings for each bit (by complementing only the first
share) are multiplied with function SecMult and function Unmask is then applied on the result.
RejSp
FailTest
f ail = True
⊥
f ail = False
(fi)0≤i ≤d
(gi)0≤i ≤d
NTT
NTT
⊥
f ail = True
(˜fi, j)0≤j ≤n
SABModp
(˜fi, j)0≤j ≤n
SecIsNull
(˜fi, j)0≤j ≤n
(˜gi, j)0≤j ≤n
SecMult
f ail = False
(hi, j)0≤j ≤n
NTT−1
(aqi)0≤i ≤d
Fig. 16. Public key generation (PkGen). The green (resp. white, blue, red) gadgets are proved d-SNI (resp. d-NI,
d-NIo with public outputs, unmasked).
Lemma 5.5. PkGen is d-NIo secure with public output f ail.
Proof. PkGen involves three external functions, namely NTT, SecArithBoolModp, and SecIsNull.
NTT applies independently on each share and SecArithBoolModp was proven to be d-SNI secure
in [3]. We show that SecIsNull is d-NIo secure. Successive d-SNI multiplications (i.e., SecMult)
are first performed sequentially to multiply the complementary of every input bit. Each of these
multiplications applies on the sharing resulting from the previous multiplication and on the sharing
of a new bit. There is no cycle in this procedure. Then, function d-NIo Unmask is applied on the
result, making the whole scheme SecIsNull d-NIo with pubic output f ail.
Let us now get back to PkGen algorithm. First, if RejSp is false, NTT is applied on each share (or lin-
ear function of share) independently for f and д inputs. Then, the d-SNI function SecArithBoolModp
is applied on the updated variable f , followed by the d-NIo SecIsNull function. From this point,
the current variable ˜f is processed with ˜д with sharewise product. So far, no intermediate variable
depends on two shares of the same input. Finally, the inversion NTT−1 is applied on the product
result sharewisely to get the output. Since there is no cycle in the successive calls of these secure
functions, the global algorithm PkGen is d-NIo secure with the public output f ail.
□
Other sub-gadgets. SkGen (Step 3 in Figure 1) only modifies polynomial g with a linear transfor-
mation which can thus be applied separately on each share for the masked version. It returns a
31
sharing of the secret key (s1, s2). Function FailTestKG takes as inputs Boolean results from PkGen
and RSKG and a sharing of the secret key. It propagates the sharing if and only if both Boolean
values are true, and returns ⊥ otherwise. Its only change from the constant-time version is the
propagation of a sharing instead of the original secret key. Lin simply doubles variable aq (cf. Step
7 of Figure 1). In the masked version, it applies this constant-time linear transformation on each
share of its input independently. Function Unmask simply refreshes its input with FullRefresh
(refreshing gadget introduced in [27] and proven to be d-SNI in [2]) and unmasks the resulting
sharing through a basic addition. Eventually, GenA only manipulates non-sensitive data and is left
unmodified for a masked implementation.
Lemma 5.6. SkGen, FailTestKG and Lin are d-NI secure, and Unmask is d-NIo secure with public
output a1.
Proof. SkGen, FailTestKG and Lin are trivially d-NI secure as they apply linear transformation
□
on each share independently. Unmask is d-NIo secure from [3] with public output a1.
5.3.2 Gadgets for Signature Scheme. Sub-gadgets used in the masked signature scheme are dis-
played on Figure 15. A brief description is given for sub-gadgets that are trivial to mask whereas
deeper explanations are given for the other ones.
GaussGen. As in the constant-time version, the masked Gaussian generation relies on a table of
w Gaussian values pj. Basically the idea is to generate a uniform value r and to return the index
j such that pj ≤ r < pj+1. In the masked version, r is a sensitive value which is generated as a
(d + 1) Boolean sharing (ri)0≤i ≤d. Then at each step j, a secure comparison is performed between
the sharing (ri)0≤i ≤d and the current value pj. The result of the comparison is a (d + 1) Boolean
sharing (bj,i)0≤i ≤d which represents a value 0 when r < pj or 1 otherwise. This value is safely
multiplied with the complementary of (bj−1,i)0≤i ≤d to ensure that the shared value represents 1
only when pj ≤ r < pj+1. At that point, for 1 ≤ j ≤ w, each sharing (bj,i)0≤i ≤d is multiplied (with
SecMult) with the sharing (j, 0, . . . , 0) on log(w) + 1 bits. The w resulting Boolean sharings are all
added together share by share. The result is a secure (d + 1) Boolean sharing of index j such that
pj ≤ r < pj+1. A Boolean to arithmetic conversion is applied to output an arithmetic sharing.
Lemma 5.7. GaussGen is d-NI secure.
Proof. Each step of the process above is performed with secure operations, namely SecMult
for logical and or multiplications or linear transformations share by share. The comparison and the
conversion are provided in [3] and proven to be d-SNI secure. The global composition contains
cycles due to the dependency of the last additions operands with the common input r. Nevertheless,
the dependency is broken with the use of the d-SNI SecMult function for the multiplication of
each sharing (bj,i)0≤i ≤d with (j, 0, . . . , 0).
□
Sign. Sign corresponds to Steps 6 and 7 of Figure 2. In the masked version, ˜bi is an arithmetic
sharing of (−1)b, and si and yi are arithmetic sharings of si and yi. A first call to SecMult is
performed between ˜bi and si to safely compute a sharing of (−1)bsi. Then a linear combination is
applied to generate independently each share of z from a share of the multiplication result, a share
of yi, and the commitment c.
Lemma 5.8. Sign is d-NI secure.
Proof. The first multiplication step is perfectly handled with algorithm SecMult from [38] which
was proven to be d-SNI secure in [2]. The second step is linear and manipulates two independent
32
inputs (an input of Sign and the output of a d-SNI gadget) share by share. It is thus d-NI. The
absence of cycles makes the masked version of Sign d-NI secure from the compositional properties
established in [2].
□
RS. The steps which compose the constant-time version of RS are given in Section 4. They can
easily be transformed to ensure d-probing security. Step 1 computes two elements x1 and x2 from
sensitive values s and z. Multiplications must be processed with function SecMult in the masked
version. As for Step 2, two sets of d +1 Boolean shares are generated at random in {0, 1} to represent
the secret bits u1 and u2. Steps 3 and 4 require the computation of exp(x1) and cosh(x2) with x1
and x2 sensitive values shared in Step 1. Thanks to the polynomial approximation of these two
functions, as described in Section 4, the evaluation of exp and cosh for these two sharings is only a
combination of linear squarings and SecMult operations. As for their comparison with functions of
u1 and u2, the computed arithmetic sharings are first converted into Boolean sharings as suggested
in [3] (sharing of u1 can be first converted into an arithmetic masking to be subtracted to exp(x1)
and allows a comparison with public values). Then, a secure comparison is performed between
Boolean sharings and outputs two masked bits of a and b. Finally, the last multiplication in Step 5
is computed with SecMult, before a call to Unmask outputs RejSp.
Lemma 5.9. RS is d-NIo secure with the public output RejSp.
Proof. All the steps in RS are either d-NI secure (random generations of Boolean sharings),
d-NIo secure (Unmask) or d-SNI secure (masking conversions, comparisons, polynomial evaluation,
and multiplication). Thus, it is enough that each cycle is properly handled. Basically, the algorithm
produces one cycle since the logical and of both Boolean values a and b takes as input variables
that both depend on the secret key. Nevertheless, both multiplication inputs are refreshed with
d-SNI gadgets which is enough to break the dependency.
□
Other Gadgets. The commitment function Comm takes as inputs two arithmetic sharings and the
public key. The linear transformation applied in the unmasked version (Step 3, Figure 2) is here
applied on each share of the secret inputs. As proven in [3], function Unmask is d-NIo secure with
public output a signature part or u. Hash applies on a public output, so it is left unchanged in the
masked version. BitGen first generates d + 1 bits uniformly at random to build a Boolean sharing
of a value in {0, 1}. The resulting sharing is then converted into an arithmetic sharing using the
secure conversion method provided in [3]. In the masked version of the signature, FailTest simply
returns ⊥ if RejSp is true and the input sharing (zi)0≤i ≤d or c otherwise.
Lemma 5.10. Comm, BitGen, and FailTest are d-NI secure and Unmask is d-NIo secure with the
public output a signature part or u.
Proof. Functions Comm and FailTest manipulates shares separately and thus are trivially d-NI
secure. The first step of BitGen separately generates uniform random bits. They are then processed
in a d-SNI secure conversion function as proven in [3]. BitGen is thus (at least) d-NI secure. Unmask
is d-NIo secure from [3] with public output u or the signature.
□
5.3.3 Masking Conversion. The state of the art provides efficient techniques to convert Boolean
masking into arithmetic masking with power-of-two modulus and the reverse for higher-order
implementations [12]. A recent paper additionally extends these tools to convert from Boolean mask-
ing to arithmetic masking with any modulus [3]. To efficiently mask the polynomial approximation
in our constant-time implementation of BLISS, we need an unusual conversion between arithmetic
masking with a modulus q and arithmetic masking with a modulus q′ ≫ q. Our approximations
being of high degrees, we need to update our modulus accordingly. One easy way to do it is to
33
convert the first arithmetic masking with modulus q into a Boolean masking and then to convert it
back to the second arithmetic masking with modulus q′. This requires two full conversions. Another
possible method is to adapt one of the conversion algorithms given in [12] and extended in [3]
for any modulus to an arithmetic to arithmetic masking. The only step to modify is the operation
SecAdd which takes two Boolean sharings of x and y in inputs and outputs a Boolean sharing of z
such that z = x + y with the arithmetic modulus. In our case, the Boolean sharings are replaced by
arithmetic sharings with a modulus q′ and the arithmetic addition to perform is to be done with
a modulus q ≪ q′. Namely, we have two arithmetic sharings (xi)0≤i ≤d and (yi)0≤i ≤d modulo q′
of values x and y and we want to obtain an arithmetic (zi)0≤i ≤d modulo q′ of a value z such that
z = x + y mod q. Basically, we can perform an arithmetic addition modulo q of the lowest part
(i.e., the less significant bits) of x and y’s sharings to avoid the carry management. Then, only the
highest part (i.e., the most significant bits) of the sharings are to be converted into Boolean shares.
The addition is then performed as in the paper [3] and a final Boolean to arithmetic conversion
ends the operation. Note that in this case, we also need to have an arithmetic to Boolean and a
Boolean to arithmetic conversions. However, these two conversions are dependent on the number
of bits to convert. And by saving the less significant bits of the sharings, both conversions are
cheaper. Concretely, as x and y are values between 0 and q − 1, we can save log2(q) − log2(2(d + 1))
bits in the lowest part, leaving log2(q′) − log2(q) + log2(2(d + 1)) to convert.
6 ACKNOWLEDGEMENTS
We thank the anonymous reviewers for their very relevant comments and their analysis of our
code. We acknowledge the support of the French Programme d’Investissement d’Avenir under
national project RISQ P14158. This work is also partially supported by the European Union’s H2020
Programme under grant agreement number ERC-669891 and the PROMETHEUS project (grant
780701), and by the French FUI-AAP25 VERISICC project. This research has been partially funded
by ANRT under the programs CIFRE N 2016/1583. This work was partially supported by Office of
Naval Research under projects N00014-12-1-0914, N00014-15-1-2750 and N00014-19-1-2292.
REFERENCES
[1] Erdem Alkim, Paulo S. L. M. Barreto, Nina Bindel, Patrick Longa, and Jefferson E. Ricardini. 2019. The lattice-based
digital signature scheme qTESLA. Cryptology ePrint Archive, Report 2019/085. https://eprint.iacr.org/2019/085.
[2] Gilles Barthe, Sonia Belaïd, François Dupressoir, Pierre-Alain Fouque, Benjamin Grégoire, Pierre-Yves Strub, and
Rébecca Zucchini. 2016. Strong Non-Interference and Type-Directed Higher-Order Masking. In ACM CCS 2016, Edgar R.
Weippl, Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi (Eds.). ACM Press, 116–129.
https://doi.org/10.1145/2976749.2978427
[3] Gilles Barthe, Sonia Belaïd, Thomas Espitau, Pierre-Alain Fouque, Benjamin Grégoire, Mélissa Rossi, and Mehdi
Tibouchi. 2018. Masking the GLP Lattice-Based Signature Scheme at Any Order. In EUROCRYPT 2018, Part II (LNCS),
Jesper Buus Nielsen and Vincent Rijmen (Eds.), Vol. 10821. Springer, Heidelberg, 354–384. https://doi.org/10.1007/978-
3-319-78375-8_12
[4] Gilles Barthes, Sonia Belaïd, Thomas Espitau, Mélissa Rossi, and Mehdi Tibouchi. 2019. GALACTICS implementations.
https://github.com/espitau/GALACTICS
[5] Daniel J. Bernstein and VAMPIRE Lab others. 2016. System for Unified Performance Evaluation Related to Cryptographic
Operations and Primitives. https://bench.cr.yp.to/supercop.html.
[6] Jonathan Bootle, Claire Delaplace, Thomas Espitau, Pierre-Alain Fouque, and Mehdi Tibouchi. 2018. LWE Without
Modular Reduction and Improved Side-Channel Attacks Against BLISS. In ASIACRYPT 2018, Part I (LNCS), Thomas
Peyrin and Steven Galbraith (Eds.), Vol. 11272. Springer, Heidelberg, 494–524. https://doi.org/10.1007/978-3-030-
03326-2_17
[7] Joppe W. Bos. 2014. Constant time modular inversion. Journal of Cryptographic Engineering 4, 4 (Nov. 2014), 275–281.
[8] Nicolas Brisebarre and Sylvain Chevillard. 2018. Efficient polynomial L∞-approximations. In 18th IEEE Symposium on
https://doi.org/10.1007/s13389-014-0084-8
Computer Arithmetic (ARITH 18). IEEE, 169–176.
34
[9] Leon Groot Bruinderink, Andreas Hülsing, Tanja Lange, and Yuval Yarom. 2016. Flush, Gauss, and Reload - A Cache
Attack on the BLISS Lattice-Based Signature Scheme. In CHES 2016 (LNCS), Benedikt Gierlichs and Axel Y. Poschmann
(Eds.), Vol. 9813. Springer, Heidelberg, 323–345. https://doi.org/10.1007/978-3-662-53140-2_16
[10] E. J. Candés, X. Li, and M. Soltanolkotabi. 2015. Phase Retrieval via Wirtinger Flow: Theory and Algorithms. IEEE
Transactions on Information Theory 61, 4 (2015), 1985–2007.
[11] S. Chevillard, M. Joldeş, and C. Lauter. 2010. Sollya: An Environment for the Development of Numerical Codes. In
Mathematical Software - ICMS 2010 (Lecture Notes in Computer Science), K. Fukuda, J. van der Hoeven, M. Joswig, and
N. Takayama (Eds.), Vol. 6327. Springer, Heidelberg, Germany, 28–31.
[12] Jean-Sébastien Coron, Johann Großschädl, and Praveen Kumar Vadnala. 2014. Secure Conversion between Boolean
and Arithmetic Masking of Any Order. In CHES 2014 (LNCS), Lejla Batina and Matthew Robshaw (Eds.), Vol. 8731.
Springer, Heidelberg, 188–205. https://doi.org/10.1007/978-3-662-44709-3_11
[13] Jean-Sébastien Coron, Emmanuel Prouff, Matthieu Rivain, and Thomas Roche. 2014. Higher-Order Side Channel
Security and Mask Refreshing. In FSE 2013 (LNCS), Shiho Moriai (Ed.), Vol. 8424. Springer, Heidelberg, 410–424.
https://doi.org/10.1007/978-3-662-43933-3_21
[14] Alexandre Duc, Stefan Dziembowski, and Sebastian Faust. 2014. Unifying Leakage Models: From Probing Attacks
to Noisy Leakage. In EUROCRYPT 2014 (LNCS), Phong Q. Nguyen and Elisabeth Oswald (Eds.), Vol. 8441. Springer,
Heidelberg, 423–440. https://doi.org/10.1007/978-3-642-55220-5_24
[15] Léo Ducas. 2014. Accelerating Bliss: the geometry of ternary polynomials. Cryptology ePrint Archive, Report 2014/874.
http://eprint.iacr.org/2014/874.
[16] Léo Ducas, Alain Durmus, Tancrède Lepoint, and Vadim Lyubashevsky. 2013. Lattice Signatures and Bimodal
Gaussians. In CRYPTO 2013, Part I (LNCS), Ran Canetti and Juan A. Garay (Eds.), Vol. 8042. Springer, Heidelberg, 40–56.
https://doi.org/10.1007/978-3-642-40041-4_3
[17] Léo Ducas, Steven Galbraith, Thomas Prest, and Yang Yu. 2019.
Integral matrix Gram root and lattice Gaussian
sampling without floats. Cryptology ePrint Archive, Report 2019/320. https://eprint.iacr.org/2019/320.
[18] Léo Ducas, Eike Kiltz, Tancrède Lepoint, Vadim Lyubashevsky, Peter Schwabe, Gregor Seiler, and Damien Stehlé.
2018. CRYSTALS-Dilithium: A Lattice-Based Digital Signature Scheme. IACR TCHES 2018, 1 (2018), 238–268. https:
//doi.org/10.13154/tches.v2018.i1.238-268 https://tches.iacr.org/index.php/TCHES/article/view/839.
[19] Léo Ducas and Tancrède Lepoint. 2013. BLISS: Bimodal Lattice Signature Schemes. http://bliss.di.ens.fr/bliss-06-13-
2013.zip (original implementation).
[20] Léo Ducas and Phong Q. Nguyen. 2012. Faster Gaussian Lattice Sampling Using Lazy Floating-Point Arithmetic. In
ASIACRYPT 2012 (LNCS), Xiaoyun Wang and Kazue Sako (Eds.), Vol. 7658. Springer, Heidelberg, 415–432. https:
//doi.org/10.1007/978-3-642-34961-4_26
[21] Thomas Espitau, Pierre-Alain Fouque, Benoît Gérard, and Mehdi Tibouchi. 2018. Loop-Abort Faults on Lattice-Based
Signature Schemes and Key Exchange Protocols. IEEE Trans. Computers 67, 11 (2018), 1535–1549.
[22] Thomas Espitau, Pierre-Alain Fouque, Benoît Gérard, and Mehdi Tibouchi. 2017. Side-Channel Attacks on BLISS Lattice-
Based Signatures: Exploiting Branch Tracing against strongSwan and Electromagnetic Emanations in Microcontrollers.
In ACM CCS 2017, Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan Xu (Eds.). ACM Press, 1857–1874.
https://doi.org/10.1145/3133956.3134028