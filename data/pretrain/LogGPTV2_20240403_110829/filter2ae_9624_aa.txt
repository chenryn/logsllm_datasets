**作者：Sissel@知道创宇404区块链安全研究团队  
时间：2018年8月24日**
### 0x00 前言
> 当你凝视深渊时，深渊也在凝视着你。
越来越多的乐透、赌博游戏与区块链体系结合起来，步入众多投资者和投机者的视野中。区块链可以说是这类游戏的温床。正面来说，区块链的可信机制与合约的公开，保证了游戏的中立。另一方面，区块链的非实名性，也让玩家的个人信息得以隐藏。
分红、邀约、股息，这些游戏看似利益诱人，实则一个个都是庞氏骗局。游戏火了，诈骗满满皆是。每个人都信心满满地走进游戏，投入大笔资金，希望自己成为受益者，别人都是自己的接盘侠。这样的游戏，只有两个结局，不是游戏所有者获益，就是半路杀进游戏的区块链黑客卷走一切，让玩家血本无归，无一例外。日复一日，无数投机者交了学费，空手而归，却又毫不死心，重入深渊。
游戏依然层出不穷，不信邪的人也是接连不断。近日，国内出现了一款类PoWH的银行游戏，在两周的宣传过后，短短数日，就完成了游戏创建、集资、黑客卷钱走人这一整个流程，让无数玩家措手不及。
#### 时间线
  * 2018年08月19日晚十一点半，宣传良久的区块链赌博游戏God.Game合约被创建于以太坊6176235区块。在之后的两天时间，游戏内加入了大量玩家，合约内存储的以太币也增加到了243eth。
  * 2018年08月21日凌晨一点钟，[攻击者](https://etherscan.io/address/0x2368beb43da49c4323e47399033f5166b5023cda)经过简单的测试，部署了一个攻击合约。短短几分钟时间，利用游戏合约漏洞，将合约账户的eth洗劫为空。
知道创宇404区块链安全研究团队得知此事件后，对游戏合约进行了仔细审计，复现了攻击者的手法，接下来，将对整个事件进行完整的分析，并给出一种简洁的利用方式。
### 0x01 合约介绍
智能合约名为God，地址为
[0xca6378fcdf24ef34b4062dda9f1862ea59bafd4d](https://etherscan.io/address/0xca6378fcdf24ef34b4062dda9f1862ea59bafd4d)，部署于
[6176235](https://etherscan.io/block/6176235)，发行了名为[God币](https://etherscan.io/token/0xca6378fcdf24ef34b4062dda9f1862ea59bafd4d)的代币(erc20
token)。
God.Game主要是一个银行合约，代码有上千行，较为复杂。如果之前对PoWH3D等类似合约有过接触，God便不难理解。下面我们介绍些简单概念。
#### ERC20 token
token代表数字资产，具有价值，通过智能合约发行于区块链上，我们可以称之为代币。符合ERC20协议的代币可以更容易互换，方便的在交易所上市。God币便是符合ERC20协议的代币。
#### 合约功能
在God.Game中，你可以通过eth购买token(god币)，当你拥有了token，相当于参加了这个游戏。
  * 购买token：会产生一定的手续费，除了主办方会收取一部分外，还有一部分将会均分给所有token持有者，也就是所谓的分红。
  * 转账token：你可以将手中的token转账给他人。
  * 出售token：将手中的token出售为可提款。
  * 提取红利：将分红转为以太币提取出来。
  * 邀请机制：当你拥有多于100个token，将开启邀请系统。他人使用你的地址，你将会获得较多的手续费提成作为分红。【攻击未涉及该功能】
token与eth的兑换、分红的多少，都与token的总量以及持有者有关，不断变化。
#### 代码浅析
我们将简要介绍合约中出现的几个重要变量。
在开始介绍前，请先记住一个概念： **红利由 账户token的价值 - payout 得到，时常变化，而不是记录这个变量** 。
##### 用户信息
  * `token`【代币】是确定的数量，用户的token仅可通过自己buy、sell、transfer变动。
  * token * profitPerShare 可以看作是`账户token的价值`。
  * payouts 我们称之为已经用过的钱。【这个定义并不严谨，可以叫控制账户红利的值】
  * token * profitPerShare - payoutsTo_ 可以看作`用户在此合约内现在可以使用的钱`， 定义为红利。
合约通过控制payoutsTo的值，来控制用户可用的钱，即红利【用来提eth，或再向God合约购买token】。
##### 全局变量
以下变量是全局中浮动的
##### 重要的临时变量
dividends = 账户总价值 - 已用的钱【payout】
dividends这个变量并不存储，不然每当其他参数变动时，需要计算所有人的分红。
每次使用时，通过myDividends(false)计算，而这个函数在不涉及推荐功能时，仅调用了`dividendsOf(address
customerAddress)`。
这里也是本次攻击的溢出点。
### 0x02 漏洞点
漏洞点有两处，简而言之，是当被转账账户是合约账户时，处理有误造成的。
#### 计算分红
    function dividendsOf(address _customerAddress)
    view
    public
    returns (uint256)
    {
        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;
    }
从上面得知，分红可用来提eth，或再次购买token。 分红本应永远为正数，这里的减法未使用safeMath，最后还强制转换uint，会造成整数溢出。
我们需要控制payoutsTo和token的关系。
#### 转账transfer()
    // exchange tokens
    tokenBalanceLedger_[_from] = SafeMath.sub(tokenBalanceLedger_[_from], _amountOfTokens);
    tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);
我们看到，如论如何转账，token一定是一方减少，另一方增加，符合代币的特点。
    if (fromLength > 0 && toLength  0) {
        // human to contract
        contractAddresses[_toAddress] = true;
        contractPayout += (int) (_amountOfTokens);
        tokenSupply_ = SafeMath.sub(tokenSupply_, _amountOfTokens);
        payoutsTo_[_from] -= (int256) (profitPerShare_ * _amountOfTokens);
这里是God中，针对转账双方的账户类型【外部账户、合约账户】采取的不同操作。
我们会发现，transfer()函数并未对`合约账户`的payoutsTo进行操作。而是仅修改了`contractPayout`这个和God合约参数有关的全局变量。
导致`合约账户`中 token(很多) * profitPerShare(常量) - payoutsTo(0)
非常大。正常来讲，payoutsTo应该变大，令账户的`dividends`为 0。
这种写法非常奇怪，在ERC20的协议中，当被转账账户为合约时，只需要合约拥有该代币的回调函数即可，没有别的要求。
### 0x03 攻击链
这样我们就可以得到大致的攻击链： 再次注意，红利 dividens = token * token价值 - payout(用户已经花了的部分)。 即
可用的钱 = 总价值 - 已用的钱
  1. 攻击者 ==转账==> 攻击合约   
合约状况：
  2. 攻击合约 withdraw()   
合约状况：
  3. 攻击合约 ==转账==> 攻击者   
合约状况：
  4. 攻击合约 reinvest()   
合约状况：
再投资【使用红利购买token】，通过大量的红利，可以随意购买token，进而sell()+withdraw()提出eth，完成攻击。
### 0x04 实际流程
攻击者首先部署了几个测试的攻击合约，因为一些原因之后未使用，可能仅供测试。
#### 攻击合约逆向
知道创宇404区块链安全研究团队使用昊天塔，对攻击者部署的合约进行了逆向，得到了攻击合约大致代码。
得到的函数列表
    0x0: main()
    0xa2: withdraw()
    0xb7: ownerWithdraw()
    0xcc: owner()
    0xfd: myTokens()
    0x124: transfer(address,uint256)
    0x148: tokenFallback(address,uint256,bytes)
    0x1c5: sell(uint256)
    0x1dd: exit()
    0x1f2: func_ee2ece60
    0x207: buy(address)
    0x21b: func_f6613ff5
    0x230: reinvest()
而具体分析函数内容，发现该合约大部分函数都是以本合约发起对God合约的调用，例如：
    function withdraw() public {
        if (msg.sender == 0x2368beb43da49c4323e47399033f5166b5023cda){
            victim.call(bytes4(keccak256("withdraw()")));
        }
    }
对照攻击者交易明细，我们来复现攻击流程。我们假设token对应红利是1:1，便于解释。
  1. 部署攻击合约   
tx:[1\.