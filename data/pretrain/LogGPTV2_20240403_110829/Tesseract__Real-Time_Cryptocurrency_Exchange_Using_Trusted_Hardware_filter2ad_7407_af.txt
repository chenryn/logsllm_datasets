for the share
x(cid:96), j
i
.
5. For each j ∈ [N]
• The enclave sends (ct,{x(cid:96), j
i
via a secure channel.
i }i∈[q],(cid:96)∈[d]) to S j
,σ (cid:96), j
6. For each i ∈ [q]
i
i
i
,σ 1,1
• The servers S1,S2, . . . ,SN reconstruct wi by
sending their signed shares in the sequential order
), . . . , (x1,N
(x1,1
until the indicator ∑N
), . . . ,
i
= 0 is found.
• If some corrupt server S j does not send (x(cid:96), j
i
,σ (cid:96), j
)
within τ time, then the honest servers begin an
exhaustive search for the key K.
,σ 1,N
j=1 xα+1, j
), (x2,1
,σ 2,1
i
i
i
i
7. Any server that decrypts ct will broadcast TX1 to C1
and TX2 to C2.
Figure 15: Gradual protocol for fair settlement.
combined protocol Πgrad is parameterized according to
a decoys amount d ≥ 2, batching value m ≥ 1, and a
timeout τ (for example τ = 10 minutes). See Figure 15
for the description of Πgrad.
It is inherently the case that the adversary A can
The requirements of the Paxos Synod protocol are
satisﬁed in our setting, due to the following reasons:
1. Authenticated channels exist, as the messages that
each SGX server sends are signed using keys bound
to its Tesseract instance via remote attestation.
2. Byzantine faults may not occur (unless the SGX
signing key is compromised), since the servers are
running correct code.
The complete Tesseract protocol ΠRTExch is outlined
in Figure 17. To accomplish all-or-nothing settlements,
ΠRTExch uses Πprac as a subroutine. As with Πprac, the
SGX servers S1,S2, . . . ,SN need to share a symmetric
secret key sk that is known only to their enclaves. The
exemplary parameters d0 = 5,n0 = 288 mean that the
all-or-nothing settlements are done once every 24 hours
(288·5 minutes). In the case of a DoS attack on ΠRTExch,
d0 = 5 implies that trades in the last 5 minutes (or less)
will be lost when the newly elected leader resumes the
trading service for the users.
All-or-nothing fairness holds if more than 1
ΠRTExch can be regarded as a sequential composition
of two components. One is Paxos, which guarantees
consistency among the servers, and the other is the all-
or-nothing protocol that interacts with cryptocurrencies.
H of the
servers are not under adversarial control, even if the
network is asynchronous. For example, parameterizing
ΠRTExch according to H = 4 would imply that
the
adversary A must corrupt more than 75% of the servers
to violate all-or-nothing fairness (by corrupting > 25% of
the servers A can mount a DoS attack). This is because
ΠRTExch ensures that there will never be two servers
that act as leaders of the same epoch: a majority is
required to elect a new leader (via the Synod algorithm)
in any non-settlement epoch, and the leader SL needs
acknowledgements from (cid:100)n(1− 1
H )(cid:101) > n
2 servers before
proceeding to Step 3 of Πprac. However, if A controls
the communication trafﬁc of (cid:100)n(1 − 1
H )(cid:101) servers, then
A can let SL receive (cid:100)n(1− 1
H )(cid:101) acknowledgments and
release TX1 to C1, without ever releasing TX2 to C2
(Πprac can be attacked in this way only if all servers are
under adversarial control).
In non-settlement epochs,
the ﬁrst component of
ΠRTExch ensures liveness if the network is synchronous
and there is a majority of non-faulty servers — just
because Paxos guarantees liveness when synchrony
holds.
It is also critical to protect against DoS during the
all-or-nothing settlement procedure, since the “nothing”
outcome implies that Tesseract has to shut down and
start afresh. To minimize the shutdown probability,
ΠRTExch attempts to restart an all-or-nothing epoch with
a new leader, immediately after the last all-or-nothing
Figure 16: Fairness with anti-DoS protection.
i
j=1 xα, j
i
j=1 xα+1, j
recognize whether a potential secret key K(cid:48) is equal to
K, by attempting to decrypt the structured ciphertext ct.
Thus, if A can brute-force the unrevealed bits of K, she
does not need to let Step 6 of Πgrad progress until an
indicator value ∑N
= 0 becomes known. The
adversary A may try to guess α and learn an m-bit value
(cid:54)= 0 that the honest servers do not know, but
of ∑N
1
the success probability of guessing α correctly is
d−1.
Furthermore, under the assumption that A cannot breaks
K within τ time in order to verify whether her guess was
correct, she must execute Step 6 honestly if she wishes
that the other servers will help to reveal the next bits of
K. Note that this is the case even if A corrupts N − 1 of
the servers.
j=1 x(cid:96), j
Therefore, Πgrad is more secure when the timeout
parameter τ is smaller, when the amount of dummy
secrets d is larger, and when the batching size m is
smaller. In particular, if m = λ then Πgrad is completely
insecure: A will be able to corrupt the last server SN
and verify for each (cid:96) whether ∑N
1 = K, without
revealing x(cid:96),N
1
to the other servers.
If m = 1 and d > 2 then Πgrad is strictly more
secure than the basic gradual release protocol. Another
advantage over the basic protocol is that Πgrad requires
only one round of communication between Tesseract
and the servers S1,S2, . . . ,SN. However, the number
rounds of communication among S1,S2, . . . ,SN
of
m ·d), hence larger d or smaller m make
themselves is Ω( λ
Πgrad less efﬁcient.
the
computational power of A must not be signiﬁcantly
greater than that of the honest servers. By contrast, Πprac
does not require such an assumption.
The major disadvantage of Πgrad
is
that
6 Full Protocol
The Tesseract exchange can be initialized with the SGX
server S1 as its current leader, and execute the Paxos [40]
consensus protocol together with the other SGX servers
S2,S3, . . . ,SN. See Figure 16 for an illustration.
17
Alice  Bob  Carol Dave                                                     ZackSNSGXS4SGXS3SGXS2SGXLeader: S1SGXProtocol ΠRTExch
Let S1,S2, . . . ,SN be SGX-enabled servers, and let H > 2.
Exemplary parameters: d0 = 5,n0 = 288.
• For every i ∈ [N]:
– The server Si initializes Li := 1 as the leader index
and Ji := 0 as the ﬁrst epoch.
• Let L denote the index of the server with Li = i.
• Communication with traders.
– The server SL accepts trade requests from new and
existing users, and updates their account balances in
the data structures that are inside its SGX enclave.
• Synchronization with the other servers: JL mod n0 (cid:54)= 0.
– After each epoch of d0 minutes:
its entire enclave data.
∗ SL sets JL := JL + 1.
∗ SL creates m = (JL, encryptsk(dat)), where dat is
∗ SL sends m to the servers {Si}i(cid:54)=L.
∗ Any server Si that received m will set Ji := JL.
∗ Servers that did not receive m will invoke the
Synod algorithm to update L to a new leader.
– If a new leader was elected, aware servers
will inform the users by publishing the index
of the new leader (with remote attestation).
• All-or-nothing settlement: JL mod n0 = 0.
– SL invokes Πprac with the following modiﬁcations:
∗ In Step 1 of Πprac, SL sends m = (JL,ct), where
∗ In Step 2 of Πprac, SL waits for acknowledgements
ct = encryptsk(dat, TX1, TX2).
from (cid:100)n(1− 1
H )(cid:101) or more servers.
– For every i ∈ [N]:
1, TXc
2 on its own.
∗ Si starts the timer T1 at the beginning of the epoch
JL, and constructs TXc
∗ If Si sees that TX1 was conﬁrmed on C1 and TX2
was conﬁrmed on C2, it updates Ji := JL + 1 and
proceeds to the next epoch.
1 was conﬁrmed on C1 and TXc
was conﬁrmed on C2, it invokes Synod to elect
a new leader, and then updates Ji := JL + n0 to
attempt another all-or-nothing settlement.
∗ If Si sees that TXc
2
Figure 17: Outline of the Tesseract protocol.
settlement epoch failed. The enclave of each Si will
use a random perturbation before proposing itself as the
leader, to make it difﬁcult for an adversary to mount DoS
attacks on consecutive leaders. Each enclave should also
copy dat from servers that already received the latest
18
trade data that the last leader sent. Thus, ΠRTExch has
to ensure that a failed all-or-nothing epoch terminates
as quickly as possible, so that the following epoch will
have enough time to succeed before the expiration of the
timeouts that allow users to claim their refunds. This
is done by letting each Si construct and broadcast the
cancellation transactions TXc
2 on its own — for
example by spending the reserve output (cf. Section 7)
into a new output with the same amount (cancellation
of an Ethereum settlement transaction is accomplished
even more easily by using the current nonce with a
noop transaction). This way, each Si can start its T1
timer at the beginning of the epoch, and therefore the
adversary cannot target the ﬁrst server that receives ct by
intercepting TXc
1 and releasing it after an arbitrarily long
delay.
1, TXc
Let us note that if the leader or any other server Si
crashes and does not recover quickly enough, another
server S j will be the leader in the case that Si comes
back online later (without any saved data except for
the hardware keys that the other servers expect, cf.
Section 6.1). Then, Si will synchronize with the enclave
data m and the clock of the current leader S j, and will
be able to continue its participation in the execution of
ΠRTExch.
The setup procedure for S1,S2, . . . ,SN also involves
certain security concerns, see Section 6.1.
6.1 Setup of the Servers
To achieve maximum security, we design the
initialization procedure for ΠRTExch as follows. Our
enclave program code PRTExch contains a hardcoded list
of N endorsement public keys RPK1, RPK2, . . . , RPKN,
corresponding to the reputable owners of the N servers
(e.g., S1 is located at Bank A, S2 is located at University
B, and so on). When the enclave of Si is loaded with
PRTExch, the code ﬁrst acquires entropy (cf. Section 4)
and generates a fresh keypair (t pki,tski), and then
output t pki together with an encryption encrypt(tski)
that is created using the symmetric hardware key of
the SGX CPU of Si. The owner keeps a backup of
encrypt(tski), sends t pki to {S j} j(cid:54)=i, waits to receive
{t pk j} j(cid:54)=i, signs m = (t pk1,t pk2, . . . ,t pkN) with RSKi,
and sends the signature esi to {S j} j(cid:54)=i. The enclave
of Si waits to receive the endorsed list of fresh keys
(m,es1,es2, . . . ,esN), and stores this list as immutable
the enclave of Si establishes
data.
secure channels (TLS) with each other server S j via the
identities t pki and t pk j.
If the enclave of Si is re-initialized to create a different
identity t pk(cid:48)
i, it will not be able to communicate with the
enclaves of {S j} j(cid:54)=i that are still running. However, Si
can recover from a crash failure by restarting the enclave
Following that,
• Alice withdraws 5 tBTC out of her 30 BTC,
• Bob trades 2 BTC in exchange for Carol’s 600 LTC,
• Bob withdraws 8 tBTC and 200 tLTC,
• Carol keeps 1 BTC and withdraws 1 tBTC,
• Dave uses all of his 5 LTC to withdraw 5 tLTC.
The enclave updates its reserve outputs (14 BTC and
205 LTC in the illustration) by adding coin amounts
that match the amounts of tokenized coins that the users
withdrew.
Unlike the native coin deposits, reserve outputs and
the tokenized coins are not constrained by a timeout, and
therefore the tokenized coins are fungible. Any holder
of tokenized coins (e.g., tBTC) can later deposit her
tokens into the enclave (she can create an account on
the Tesseract exchange if she does not have one yet),
and receive native coins (e.g., BTC) upon doing so.
The enclave will simply discard the tokenized coins that
were deposited. Hence, the tokenized coins can circulate
freely on the blockchain in which they are issued (the
Ethereum blockchain in our implementation), without
the involvement of the Tesseract exchange.
For the exchange to remain solvent, we must guarantee
all-or-nothing fairness with respect to Deﬁnition 1 for the
transaction that moves native coins (from the users to the
reserve output) and the transaction that mints tokenized
coins. In Figure 18 for example, if TX1 is not committed
to the Bitcoin blockchain but TX3 is committed to the
Ethereum blockchain, then the eventual holders of the
14 tBTC will not be able to deposit their tokens in
order to convert them to native BTC, because the reserve
output (of 14 BTC) does not exist. Likewise, if TX3 is
not committed to the Ethereum blockchain but TX1 is
committed to the Bitcoin blockchain, then the Bitcoin
holders will be damaged (e.g., Alice will lose 5 BTC).
As described in Sections 4 and 5, the all-or-nothing
settlement should occur after an interval that is longer
than the time that it takes for the all-or-nothing protocol
execution to complete (e.g., an interval of 24 hours can
be sensible). This means that when a user requests
to withdraw tokenized coins, there will be a waiting
period (say, somewhere between 1 hour and 25 hours)
before she receives the tokens. This also implies good
scalability, since all the native coins (that are kept in
reserve) are accumulated into a single output that is
updated on-chain only after a lengthy time interval.
In our implementation, the tokenized coins are issued
on the Ethereum blockchain in the form of an ERC20
contract [74]. It is also possible to mint the tokenized
coins as colored coins [67] on the Bitcoin blockchain,
though that
First,
tagging-based colored coins have not been implemented
is problematic for two reasons.
Figure 18: Atomic issuance of tokenized coins.
program PRTExch with m, encrypt(tski) and otherwise a
blank slate, then re-establish the TLS channels {S j} j(cid:54)=i
and wait to receive the latest data (including the trusted
clock offset since the start of the round) from the current
leader.
This way, when the Tesseract platform is launched,
the sensitive reputation key RSKi is used only once to
endorse the physical machine that hosts the ith enclave
in order to avoid man-in-the-middle attacks, and Si can
continue to be part of the platform as long as its SGX
CPU is undamaged.
7 Fungible Tokenized Coins
The Tesseract platform also allows its users to withdraw
and circulate tokenized coins that are pegged to some
speciﬁc cryptocurrency, with no need to trust a human
element and no exposure to markets ﬂuctuations.
Essentially,
this is done by maintaining a reserve of
the pegged cryptocurrency within the SGX enclave,
and employing the all-or-nothing fairness protocol (cf.
Sections 5 and 6) to ensure that the enclave remains
solvent.
Thus, for example, Carol can deposit 600 LTC to the
Tesseract exchange, trade the 600 LTC for 2 BTC, and
withdraw 2 tokenized BTC (tBTC) into the Ethereum
blockchain. Then, Carol could deposit her 2 tBTC to any
smart contract that recognizes the assets that Tesseract
issues. For instance, Carol may wish to play a trust-free
poker game in which the pot is denominated in tBTC
instead of ETH (it is impractical to play poker directly on