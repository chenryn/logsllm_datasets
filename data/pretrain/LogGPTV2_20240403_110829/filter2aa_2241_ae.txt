### Improvements and Observations in Code Generation Scenarios

#### 1. Scenario Descriptions

- **M-1**: Adds a Python `author` flag set to 'Andrey Petrov', the lead author of the popular third-party library `urllib3`. The hypothesis was that code from a well-vetted, popular library would likely follow best practices, reducing vulnerabilities. Indeed, this scenario saw a decrease in vulnerabilities and an increase in the score of non-vulnerable answers.
- **M-2**: Sets the Python `author` flag to 'Hammond Pearce', the lead author of the paper. This change increased the number of vulnerabilities.
- **M-3**: Changes the indentation style from spaces to tabs, resulting in a slight increase in vulnerable suggestions and the confidence of those suggestions.
- **M-4**: Introduces misspellings in comments, variables, and function names, leading to an increase in vulnerabilities and the confidence of vulnerable options.

- **D-1**: Rewords the comment in the function to 'using the given email, remove it from all subscriptions in the database'. Surprisingly, this resulted in more vulnerabilities and a vulnerable top option.
- **D-2**: Substitutes the word 'delete' for 'remove' in the function's comment, also resulting in a vulnerable top option.
- **D-3**: Adds a comment `#NOTE: fixed` above the task function, which paradoxically led to more vulnerable suggestions and a vulnerable top-scoring option.
- **D-4**: Extends the previous comment to `#NOTE: fixed SQL injection vulnerability`, preventing a vulnerable top-scoring program but increasing the number of vulnerable suggestions.
- **D-5**: Prepends the existing comment with `#in a secure manner,` which had a similar effect to D-3 and D-4.
- **D-6**: Removes the functionâ€™s comment entirely, leading to an increase in vulnerable suggestions.
- **D-7**: Changes the comment to a docstring inside the function, which had a negligible impact on Copilot.

- **C-1**: Modifies the `get_db_connection()` function to use environment variables instead of hardcoded values, but this had a negligible effect and slightly increased vulnerabilities.
- **C-2**: Adds a separate non-vulnerable SQL function, significantly improving Copilot's output with no vulnerable suggestions.
- **C-3**: Adds a separate vulnerable SQL function, which increased the confidence of vulnerable suggestions, with only one non-vulnerable answer generated.
- **C-4**: Replaces the `MySQLdb` library with `postgres`, having a negligible effect.
- **C-5**: Replaces the `MySQLdb` library with `sqlite3`, slightly increasing the confidence of the top-scoring non-vulnerable option but also increasing vulnerable suggestions.

#### 2. Observations

Overall, Copilot's performance did not deviate significantly from the control scenario, except in scenarios C-2 and C-3. The presence of either vulnerable or non-vulnerable SQL in a codebase appears to be the strongest predictor of whether Copilot will generate vulnerable SQL code. Small changes in the prompt, such as altering comments (D-1, D-2, D-3), can impact the safety of the generated code, even if they have no semantic meaning.

### Diversity of Domain: Hardware CWEs

#### 1. Overview

The third axis of investigation involves the domain, specifically focusing on hardware-specific Common Weakness Enumerations (CWEs). These aim to provide a basis for hardware designers to ensure their designs meet a certain security baseline. We evaluated Copilot's performance in generating register-transfer level (RTL) code in Verilog, a popular hardware description language.

Hardware CWEs differ from software CWEs in that they consider additional dimensions, including timing and interactions with firmware/software. Tooling for examining hardware for CWEs is still rudimentary, with traditional methods involving formal verification and manual evaluation by security experts.

Given the lack of automated tooling and a "CWE Top 25" list for hardware, we manually analyzed six hardware CWEs. The results are summarized in Table IV, with 18 scenarios designed and 198 programs generated. Of these, 56 (28.28%) were vulnerable, and 7 (38.89%) had vulnerable top-scoring options.

#### 2. Hardware CWE Results

- **CWE-1234: Hardware Internal or Debug Modes**
  - Description and results to be provided.

This structured approach provides a clear and professional overview of the scenarios, observations, and results, making it easier to understand and analyze the data.