# 2018 PostgreSQL中国技术大会

## 演讲主题
您的演讲题目

### 演讲者
董红禹  
邮箱: [PI:EMAIL]  
单位: 杭州乘数科技有限公司

---

## 背景

### 高额的费用
- **许可证费用**：每年需支付数十万元人民币，且有严格的CPU许可限制。
- **性能与扩展性问题**：特定业务场景下的性能无法满足需求，且扩展性较差，难以与其他平台良好集成。

### 开源自主可控
随着企业的发展，越来越多的企业倾向于采用开源技术和自主可控方案。

---

## 迁移工作流程

1. **调研**：评估数据量、存储过程、函数和视图等差异。
2. **工具调研**：选择合适的迁移工具。
3. **逐步迁移**：部分业务先行迁移。
4. **正式割接**：全部业务切换完成。

---

## 数据类型对比

| SQL Server | PostgreSQL |
|------------|------------|
| VARCHAR(N) | TEXT/VARCHAR |
| DATETIME   | TIMESTAMP  |
| CURRENT_TIMESTAMP(0)::TIMESTAMP | CLOCK_TIMESTAMP()::TIMESTAMP |
| MONEY      | NUMERIC(15,4) |
| IMAGE      | BYTEA      |
| UNIQUEIDENTIFIER | UUID |
| VARBINARY  | BYTEA      |
| TIMESTAMP  | INTERVAL   |

---

## 函数类型转换

| SQL Server | PostgreSQL |
|------------|------------|
| ISNULL()   | COALESCE() |
| DATALENGTH | OCTET_LENGTH() |
| LEN()      | LENGTH()   |
| CONVERT()  | ::TYPE / CAST() |
| SUBSTRING('DFADF', 1, 2)[DF] | SUBSTR() |
| CHARINDEX(';', 'FASD;FDS', 2) | POSITION(';' IN 'FASD;FDS') |
| GETDATE()  | NOW();     |
| DATEADD    | NOW()+INTERVAL '3 MONTHS'; |
| DATEDIFF(DAY, STARTTIME, ENDTIME) | DATE_PART('DAY', ENDTIME - STARTTIME) |
| DATEPART() | DATE_PART('WEEK', NOW()); |

---

## 临时表

### SQL Server
```sql
CREATE TABLE #Temp ( id int, customer_name nvarchar(50), age int );
SELECT * INTO #t12 FROM table01;
```

### PostgreSQL
```sql
CREATE TEMP TABLE tmp_t12 ON COMMIT DROP AS SELECT * FROM table01;
-- ON COMMIT 可选参数：
-- PRESERVE ROWS
-- DELETE ROWS
-- DROP
```

---

## 视图与外键

### 视图
- **SQL Server** 和 **PostgreSQL** 中查询方式相同，但需要注意基表数据类型变化后需要重建视图。
- **PostgreSQL** 示例：
  ```sql
  BEGIN;
  SET LOCAL lock_timeout = '1s';
  DROP VIEW v_test;
  ALTER TABLE test ALTER COLUMN a TYPE varchar(32);
  CREATE VIEW v_test AS SELECT id, c1 FROM test;
  END;
  ```

### 外键
- **SQL Server**：外键可以临时禁用。
- **PostgreSQL**：创建表时可设置是否延迟约束。
  ```sql
  DEFERRABLE INITIALLY DEFERRED
  DEFERRABLE INITIALLY IMMEDIATE
  ```

---

## 索引

### PostgreSQL
- **没有聚集索引**。
- 对于选择性较低的索引，可以创建条件索引。
  ```sql
  CREATE INDEX IDX_Job_CompanyId ON Job (CompanyId) WHERE IsDeleted = false;
  ```

### 部分索引示例
```sql
CREATE TABLE t5(a int, name character varying);
INSERT INTO t5 SELECT 1, 'test'||i FROM generate_series(1, 100000) AS t(i);
INSERT INTO t5 SELECT i, 'test'||i FROM generate_series(1, 1000) AS t(i);

-- 创建部分索引
CREATE INDEX idx_a_t5 ON t5(a) WHERE a <> 1;

-- 查询计划
EXPLAIN SELECT * FROM t5 WHERE a = 100;
```

### 非索引列的使用
```sql
-- 创建部分索引
CREATE INDEX idx_a_name_t5 ON t5(a) WHERE name = 'test100';

-- 查询计划
EXPLAIN SELECT * FROM t5 WHERE a = 1 AND name = 'test100';
```

### 表达式索引
```sql
-- 创建表达式索引
CREATE INDEX idx_a_t5 ON t5((a+1));

-- 查询计划
EXPLAIN SELECT * FROM t5 WHERE a + 1 = 100;
```

---

## 应用修改

### 字符串拼接
- **SQL Server**: `SELECT FirstName + LastName FROM...`
- **PostgreSQL**: `SELECT FirstName || LastName FROM...`

### 大小写敏感
- **SQL Server**：不区分大小写。
- **PostgreSQL**：可以使用 `LOWER`/`UPPER` 函数处理大小写敏感问题。

### ORDER BY
- **SQL Server**: `ORDER BY NULL` 首先会选择 `NULL` 值。
- **PostgreSQL**: 可以指定 `NULL` 值的读取顺序。
  ```sql
  SELECT * FROM t ORDER BY name NULLS LAST;
  SELECT * FROM t ORDER BY name NULLS FIRST;
  ```

### UUID
- **SQL Server**: 使用 `newid()` 生成 UUID。
- **PostgreSQL**: 
  ```sql
  CREATE EXTENSION uuid-ossp;
  SELECT uuid_generate_v1();
  ```

---

## 存储过程及函数

### 获取受影响行数
```sql
CREATE OR REPLACE FUNCTION batch_delete(
  in_trade_id int,
  in_start_date date,
  in_month int
)
RETURNS void
AS $$
BEGIN
  WHILE 1=1 LOOP
    DELETE FROM t_inofaout_zcq
    WHERE trade_id = in_trade_id
      AND in_trade_id > 0
      AND rq > in_start_date
      AND EXTRACT(MONTH FROM rq) = in_month;
    RETURN;
  END LOOP;
END;
$$ LANGUAGE plpgsql;
```

### 返回多行多列
```sql
CREATE OR REPLACE FUNCTION sp_get_multiple_set1(
  f_id int,
  OUT r1 refcursor,
  OUT r2 refcursor
)
RETURNS SETOF refcursor
AS $tt$
DECLARE
  r1 ALIAS FOR $2;
  r2 ALIAS FOR $3;
BEGIN
  OPEN r1 FOR SELECT * FROM j1 WHERE id = f_id;
  RETURN NEXT r1;
  OPEN r2 FOR SELECT * FROM tmp_2 WHERE id = f_id;
  RETURN NEXT r2;
END;
$tt$ LANGUAGE plpgsql;
```

### 存储过程中调用存储过程
- **SQL Server**: `EXEC`
- **PostgreSQL**:
  ```sql
  v_info := f_getinfo('aaaaa');
  FOR rec IN SELECT * FROM func_name('xxxx') LOOP
    ...
  END LOOP;
  ```

### 不处理函数返回值
```sql
CREATE OR REPLACE FUNCTION f_test16(in in_id1 int)
RETURNS int
AS $$
DECLARE
  rec record;
BEGIN
  PERFORM f_test15(10);
  RETURN 10;
END;
$$ LANGUAGE plpgsql;
```

---

## 迁移工作

### 迁移工具
- **调研迁移工具及项目具体情况**，最终选择使用 Python 自主开发程序进行迁移。

### 存储过程修改
- **1500个存储过程迁移**，多次演练测试评估迁移时间窗口。

### 保持原有业务访问方式
- **原有业务通过函数方式访问数据库**，同时考虑读写分离。
- **使用plproxy创建读写集群**：
  ```sql
  CREATE SERVER write_cluster FOREIGN DATA WRAPPER plproxy OPTIONS (
    connection_lifetime '1800',
    p0 'dbname=db0 hostaddr=172.16.3.150 port=5432'
  );

  CREATE SERVER read_cluster FOREIGN DATA WRAPPER plproxy OPTIONS (
    connection_lifetime '1800',
    p0 'dbname=db0 hostaddr=172.16.3.151 port=5432',
    p1 'dbname=db1 hostaddr=172.16.3.152 port=5432',
    p2 'dbname=db2 hostaddr=172.16.3.153 port=5432',
    p3 'dbname=db3 hostaddr=172.16.3.151 port=5432'
  );
  ```

### 创建函数时根据读写操作指定对应路由
```sql
-- 插入数据的函数
CREATE OR REPLACE FUNCTION insert_user(i_username text, i_emailaddress text)
RETURNS integer AS $$
CLUSTER 'write_cluster';
RUN ON ANY;
$$ LANGUAGE plproxy;

-- 查询数据的函数
CREATE OR REPLACE FUNCTION get_user_email(i_username text)
RETURNS SETOF text AS $$
CLUSTER 'read_cluster';
RUN ON ANY;
$$ LANGUAGE plproxy;
```

### 调用函数时直接路由
```sql
CREATE OR REPLACE FUNCTION sumtest(
  username text,
  OUT out_result INT,
  OUT em text,
  OUT im INT
) RETURNS record
AS $$
BEGIN
  em := get_user_email(username);
  im := insert_user('xiaoming', em);
  out_result := 1;
EXCEPTION
  -- 异常处理
END;
$$ LANGUAGE plpgsql;
```

### 过度迁移
- **迁移部分数据**，同时使用 PG 和 SQL Server。
- **使用 ODBC_FDW 进行数据同步**。参考：[odbc_fdw](https://github.com/hangzhou-cstech/odbc_fdw)

---

## 总结
感谢大家的关注和支持！

---

希望以上优化后的文本能更好地传达您的演讲内容。如果有任何进一步的需求或修改，请随时告知。