         Index Cond: ((id >= 1000) AND (id =1000 and id= 1000) AND (id   Bitmap Index Scan on idx_t2_id  (cost=0.00..108.86 rows=3686 width=0) (actual time=10.364..10.364 rows=44280 loops=1)  
         Index Cond: ((id >= 1000) AND (id <= 5000))  
 Planning time: 0.106 ms  
 Execution time: 482.077 ms  
(8 rows)  
```  
精度提高后，扫描效率有一定的提升。（对于相关度不高的就不要用BRIN了，精度提高到1都于事无补的，无用功太多）当然相比btree还有差距，不过对于大数据场景，我们还要考虑数据的插入性能，对于btree插入性能好还是brin的插入性能好呢？  
我这里简单的测试了一下，并未涉及并发处理，已经可以明显的了解到btree索引对数据插入带来的开销更大。  
```  
postgres=# \d t1  
      Table "public.t1"  
 Column |  Type   | Modifiers   
--------+---------+-----------  
 id     | integer |   
 info   | text    |   
Indexes:  
    "idx_t1_id" brin (id) WITH (pages_per_range=1)  
postgres=# \timing  
Timing is on.  
postgres=# insert into t1 select generate_series(1,1000000);  
INSERT 0 1000000  
Time: 2152.527 ms  
postgres=# drop index idx_t1_id;  
DROP INDEX  
Time: 9.527 ms  
postgres=# create index idx_t1_id_bt on t1 using btree (id);  
CREATE INDEX  
Time: 29659.752 ms  
postgres=# insert into t1 select generate_series(1,1000000);  
INSERT 0 1000000  
Time: 5407.971 ms  
```  
最后，我们同样可以使用pageinspect来观测brin索引的内容。  
```  
postgres=# create extension pageinspect;  
CREATE EXTENSION  
postgres=# select * from brin_page_items(get_raw_page('idx_t1_id',10),'idx_t1_id');  
 itemoffset | blknum | attnum | allnulls | hasnulls | placeholder |        value           
------------+--------+--------+----------+----------+-------------+----------------------  
          1 |   2176 |      1 | f        | f        | f           | {1046657 .. 1047137}  
          2 |   2177 |      1 | f        | f        | f           | {1047138 .. 1047618}  
          3 |   2178 |      1 | f        | f        | f           | {1047619 .. 1048099}  
          4 |   2179 |      1 | f        | f        | f           | {1048100 .. 1048580}  
          5 |   2180 |      1 | f        | f        | f           | {1048581 .. 1049061}  
          6 |   2181 |      1 | f        | f        | f           | {1049062 .. 1049542}  
          7 |   2182 |      1 | f        | f        | f           | {1049543 .. 1050023}  
。。。  
```  
例如我们看到2176 这个数据块的ID取值区间是{1046657 .. 1047137}，我们使用ctid来验证一下.  
```  
postgres=# select min(id),max(id) from t1 where ctid::text ~ E'^\\(2176,';  
   min   |   max     
---------+---------  
 1046657 | 1047137  
(1 row)  
```  
完全正确  
其他还有几个pageinspect的函数：  
```  
postgres=# SELECT brin_page_type(get_raw_page('idx_t1_id', id)) from generate_series(0,10) t(id);  
 brin_page_type   
----------------  
 meta  
 revmap  
 revmap  
 revmap  
 revmap  
 revmap  
 regular  
 regular  
 regular  
 regular  
 regular  
(11 rows)  
postgres=# SELECT * FROM brin_metapage_info(get_raw_page('idx_t1_id', 0));  
   magic    | version | pagesperrange | lastrevmappage   
------------+---------+---------------+----------------  
 0xA8109CFA |       1 |             1 |              5  
(1 row)  
postgres=# SELECT * FROM brin_revmap_data(get_raw_page('idx_t1_id', 1)) limit 5;  
   pages     
-----------  
 (18,1105)  
 (18,1106)  
 (18,1107)  
 (18,1108)  
 (18,1109)  
(5 rows)  
```  
截止目前，PostgreSQL可以支持btree,hash,gin,gist,spgist,brin共6种索引访问方法。用户可以根据实际应用场景选择合适的索引。  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/163877040201512810112541/  
2\. http://www.postgresql.org/docs/devel/static/brin.html  
3\. http://www.postgresql.org/docs/devel/static/sql-createindex.html  
BRIN indexes accept a different parameter:  
pages_per_range  
Defines the number of table blocks that make up one block range for each entry of a BRIN index (see Section 60.1 for more details). The default is 128.  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")