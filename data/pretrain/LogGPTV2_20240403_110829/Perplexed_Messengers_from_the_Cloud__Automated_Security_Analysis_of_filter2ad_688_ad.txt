both apps ask for some ADM objects not present on Nexus, which
leads to the crash3. However, we found that when the attack app de-
ﬁned the Nokia permission, com.nokia.pushnotification
s.permission.SEND, on Nexus, whose service has also been
integrated into the Facebook app and Skype, it successfully injected
messages and made the apps display them to the user in her friend’s
name (demo [11]). All together, our scanner reported 382 apps hav-
ing this vulnerability, including the 51 with over 1 million down-
loads.
Even more serious here is that both Facebook and Skype, and
most likely many other apps with the same problem are also subject
to a message stealing attack. Speciﬁcally, we found that on Kindle
Fire, a malicious app deﬁning the GCM permission can imperson-
ate a non-existing GCM service app to inject a GCM registration
ID, which has been bound to an attack device, into the Facebook
or Skype app. As a result, the apps will be cheated into believing
that they are actually using the GCM service (instead of ADM),
and accordingly send the registration ID to their GCM app servers4
to bind the current user to that ID. The consequence is that from
that point on, only their GCM app servers can push messages to
these apps and the messages actually all go to the attack device, be-
cause the registration ID here is tied to the device. In our research,
we successfully launched the attack on Kindle Fire, and received
push notiﬁcations from both Facebook and Skype, including such
sensitive information as Skype’s private messages. The same se-
curity risk is also present on Nexus phones, when a malicious app
impersonates the Nokia service app.
The same problem (service confusion) also happens to the SDKs
of popular syndication services, including Urban Airship [12], which
recently incorporates both GCM and ADM. Particularly, we found
that PushIO only maintains one registration ID, no matter whether
it comes from GCM or ADM. As a result, a malicious app can
replace the target app’s GCM ID using the ADM permission on
Nexus, by sending the new ID to the target’s ADM receiver (within
the SDK). The same attack also succeeded on Kindle Fire, by re-
placing an app’s ADM ID through its GCM receiver. Note that this
3Kindle Fire actually includes the Android objects GCM needs.
4Actually, for those big organizations, they typically have their own
syndication services that connect to both GCM and ADM.
is slightly different from our attacks on Facebook and Skype, in
which the adversary stealthily binds the apps from the ADM ser-
vice to GCM. Here what we can do is directly replacing the SDK’s
GCM registration ID through the ADM channel. This vulnerabil-
ity was acknowledged by related organizations as a serious security
ﬂaw. Facebook rewarded us $2000 for helping them ﬁx the prob-
lem.
User confusion. When scanning all 35,173 apps, we deliberately
selected those involving user-related sensitive information to ﬁnd
out whether they properly check the User ID of an incoming mes-
sage. This was done by focusing on the apps from the categories
such as social, ﬁnance, health, etc., and inspecting their user inter-
faces for the keyword “password”, which almost always indicates
the presence of users’ login credentials. Our analysis identiﬁed that
popular apps like Yelp, Pinterest, etc., did not perform any user-ID
based access control.
To understand the security consequences of this user confusion
problem, we built end-to-end attacks to exploit high-proﬁle popular
apps. The idea is to associate the target app to a different user, the
adversary, so that he can push messages to the victim through his
own account on the target’s app server (e.g., the Pinterest server).
Such an association can be established when the adversary gets his
hands on the target app’s registration ID or CID. It is important to
note that in the absence of the user-ID vulnerability, knowing the
registration ID does not enable the adversary to do anything harm-
ful: he cannot get access to the legitimate user’s messages, as the
registration ID is not an authentication token and also bound to the
target app; nor can he inject any messages to the app because of its
check on user IDs, which ﬁlters out the messages from a different
user (the adversary in this case). For CID, its leakage indeed al-
lows the adversary to access the victim’s messages. However, he
still cannot inject messages to the target app when it veriﬁes user
ID.
In our research, we exploited the security ﬂaw within Pinterest, a
popular social app. What we did is to leverage a known vulnerabil-
ity in the browser and webview’s origin-based protection to acquire
the GCM registration ID within the app [4]. The vulnerability here
was found still pervasive among the devices with Android 4.3 and
below, which are running on about 69.8% of Android devices [1].
Speciﬁcally, whenever the Pinterest app visits a malicious web site,
the adversary can open an iframe within its webview instance to up-
load the app’s com.google.android.gcm.xml, which con-
tains the registration ID. The content within the iframe can be ac-
quired by the script injected, due to a weakness in webview’s in-
put sanitization mechanism [4]. In this way, the adversary can get
the registration ID from the app and further send it to the Pinterest
server to bind the ID to the attacker’s account there. Such an at-
tack was conﬁrmed in our research, allowing us to push messages
to our own accounts but make them delivered to the target app (the
victim’s Pinterest app). We also built a similar attack on the Yelp
app, using another known vulnerability CVE-2012-6636 [3] to get
the victim’s registration ID before exploiting Yelp’s lack of user-ID
veriﬁcation to push fake messages to the victim. In addition, for
all the apps integrating the SDKs that leak out CIDs, such as Push
Woosh, the attacker can easily bind their CIDs to his account so as
to push messages to the victim. This threat was also found to be
practical in our study.
Apparently, a solution to this problem is a security check on the
app server side to make sure that no two users share the same regis-
tration ID or CID. Indeed, we observed that some app servers, such
as Ask.fm, Lovoo.com detach the registration ID from one user
and binds it to another whenever the former logs out from their
apps and the latter logs in. However, this treatment cannot stop
1267the user confusion attack: knowing the victim’s registration ID, the
adversary can simply log into the target app on his device to make
the app server bind the ID to his user account. When a message
is pushed to the ID, however, the victim will still be the recipient
because GCM ties the ID to her device. In this way, the adversary
still can inject messages to the victim’s app, in the name of the vic-
tim’s friend. Fundamentally, the problem is caused by the fact that
the push-messaging cloud can only identify the app on a speciﬁc
device, not the user of the app. Therefore, as long as an integration
fails to check user IDs, the user will always be under the risk of
receiving messages from an untrusted party.
Client confusion. Also our prototype reported that 11,841 apps we
scanned have insecure broadcast channels (unprotected receiver or
broadcast without target package). For example, most of the re-
ceivers for getting the messages from the service SDKs are com-
pletely unprotected and therefore any apps running on the same
device can directly inject messages into these vulnerable apps. Al-
though in the most cases, the problem is apparently caused by
implementation errors, there are situations when the security im-
plication is more fundamental. A prominent example here is the
SDK provided by Baidu Cloud Push, one of the most popular push-
messaging services in China with hundreds of millions of users [2].
Our analysis on their vulnerable receivers (detected by Seminal) re-
veals the security issues in their designs.
Figure 7: Push-Messaging with Shared Service
It turns out that some services (e.g. Baidu) adopt a strategy to
support multiple hosting apps running on the same device, appar-
ently for the purpose of power saving. Speciﬁcally, in the presence
of these apps, one of them will launch a process to serve all of
them: the process directly communicates with the connection ser-
vice in the cloud to acquire messages for all these apps, and then
pushes the messages to their recipient apps’ receivers (based on
their package names). Figure 7 shows how this mechanism works.
Since these apps can come from any parties, as long as they in-
tegrate the SDKs of the services, the permission-based protection
is no longer applicable here, as it is hard to determine which app
should get the permission and which should not.
The consequence of the problem is that in addition to the mes-
sage injection threat, all these services may be subject to a man-in-
the-middle (MitM) attack. There is nothing to prevent a malicious
app from claiming that it also integrates the services, and therefore
becoming entitled to launch the service process. The process is
trusted to relay the messages for other apps pushed from the cloud,
and therefore is well positioned to collect the app users’ messages
and even modify their content. Further, some of these services uti-
lize a volunteer mechanism to coordinate their customers’ apps:
each app can set its own priority, and the one with the highest value
is supposed to create the service process while the others are asked
to terminate their processes to save battery power. This design en-
ables a malicious app to become the MitM whenever it wants. In
our research, we built an end-to-end attacks on Baidu Cloud Push
and successfully intercepted legitimate apps’ messages, which in-
dicates that the problem is indeed serious.
CID exposure. Our Seminal scanner also discovered the pervasive-
ness of CID exposure: among all 22 services designed to push mes-
sages to individual users through CIDs, 7 turned out to either create
the identiﬁers using publicly available resources (also accessible to
malicious apps) or expose their content to the unauthorized par-
ties. As an example, we found that high-proﬁle services like Push
Woosh actually utilize deviceID and android_id to build their CIDs.
Such information can be acquired by a malicious app on the vic-
tim’s devices using the permissions like READ_PHONE_STATE.
With such information, we were able to generate the same CIDs
for apps using such services on an attack device. Since the CIDs
serve as authentication tokens between the devices and the connec-
tion server, we successfully utilized them to obtain the target apps’
messages on the attack device.
Of particular interest here is the syndication service PushIO, wh-
ich generates its CID using the Android uuid API, a rather se-
cure approach. This CID is supposed to be bound to the GCM (or
ADM or other manufacturer cloud’s) registration ID for the app
integrating the service to enable a message push through the iden-
tifer, regardless what manufacturer service the app is using. When
the GCM registration process (for getting the registration ID) fails,
which happens from time to time, the app needs to try it again. This
retry operation is initiated by the SDK through sending an Intent to
its hosting app. The way to do this, however, is through a broad-
cast, with the CID included in the Intent for the recipient to ﬁnd
out whether it is the right party to act, in the case that multiple apps
using this service are present on the same device. The problem here
is that a malicious app can register the same action the legitimate
app’s receiver uses to get the CID within the Intent.
Other security risks. As discussed before, 10 out of the 30 SDKs
we studied do not use CID or registration IDs. Most of them ap-
parently are designed to push messages to a group of users, instead
of a single individual. However, some services (e.g. YunBa) also
provide an alias mechanism for locating a speciﬁc app. The alias
here is an identiﬁer created by the developer or the user, just like
a user ID and password. The problem is that the documentations
of these services suggest to use public information like one’s email
address for this purpose. As a result, the adversary can easily ﬁgure
out the alias and use it to access the messages for the target apps.
4.2 Measurement and Discoveries
Risk
Service Confusion
User Confusion
PendingIntent
Overall
Analyzed Apps
17,616
3086(8 sensitive categories)
17,616
17,616
Vulnerable Apps
382(2.17%)
2,234(72.39%)
2,101(11.93%)
4,368(24.80%)
Table 5: GooglePlay App Risks
Risk
Analyzed Apps
Insecure Broadcast Channel
User Confusion
PendingIntent
Overall
17,557
17,557
17,557
17,557
Vulnerable Apps
11,841(67.44%)
5,436(30.96%)
4,075(23.21%)
13,300(75.75%)
Table 6: Chinese Markets App Risks
Landscape. From all 35,173 apps integrating push-messaging ser-
vices, Seminal found that 17,668 of them, more than 50%, have dif-
ferent security weaknesses. Table 5 and Table 6 provide the break-
downs of the ﬁndings. For all the apps from the Chinese markets
Connection ServersApp AApp BShared Service Started by App AApp CMobile Device1268Downloads
1-100
100-10K
10K-1M
1M-100M
100M+
Service Confusion
70/837(8.36%)
159/6864(2.32%)
102/8233(1.24%)
47/1646(2.86%)
4/36(11.11%)
User Confusion
162/196(82.65%)
1132/1453(77.91%)
811/1143(70.95%)
126/282(44.68%)
3/12(25%)
PendingIntent
64/837(7.65%)
707/6864(10.30%)
1085/8233(13.18%)
245/1646(14.88%)
0/36(0%)
Overall
279/837(33.33%)
1843/6864(26.85%)
1849/8233(22.46%)
391/1646(23.75%)
6/36(16.67%)
Table 3: GooglePlay App Vulnerability Based on Number of Downloads
Category
Medical
Shopping
Business
Health & Fitness
Social
Finance
Personalization