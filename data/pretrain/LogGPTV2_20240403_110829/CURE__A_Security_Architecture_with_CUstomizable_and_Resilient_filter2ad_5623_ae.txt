[19] K. Choi, K. Toh, and H. Byun. Realtime training on mobile devices
for face recognition applications. Pattern recognition, 44(2):386–400,
2011.
[20] J. Coburn, S. Ravi, A. Raghunathan, and S. Chakradhar.
security-enhanced communication architecture.
78–89. ACM, 2005.
Seca:
In CASES, pages
[21] Intel Corporation.
Intel R(cid:13) 64 and ia-32 architectures software
developer’s manual.
https://software.intel.com/sites/
default/files/managed/39/c5/325462- sdm- vol- 1- 2abcd-
3abcd.pdf, 2019.
[22] V. Costan, I. Lebedev, and S. Devadas. Sanctum: Minimal hardware
extensions for strong software isolation. In USENIX Security, 2016.
[23] P. Cotret, J. Crenne, G. Gogniat, and J. Diguet. Bus-based mpsoc secu-
rity through communication protection: A latency-efﬁcient alternative.
In FCCM, pages 200–207. IEEE, 2012.
[24] D. Davidson, B. Moench, T. Ristenpart, and S. Jha. Fie on ﬁrmware:
Finding vulnerabilities in embedded systems using symbolic execu-
tion. In USENIX Security, pages 463–478, 2013.
1088    30th USENIX Security Symposium
USENIX Association
[25] G. Dessouky, T. Frassetto, and A. Sadeghi. Hybcache: Hybrid
side-channel-resilient caches for trusted execution environments. In
USENIX Security, 2020.
[47] P. Koeberl, S. Schulz, A. Sadeghi, and V. Varadharajan. Trustlite: A
security architecture for tiny embedded devices. In EuroSys, page 10.
ACM, 2014.
[26] EMBC. Coremark. https://www.eembc.org/coremark/, 2019.
[27] A. Ferraiuolo, A. Baumann, C. Hawblitzel, and B. Parno. Komodo:
Using veriﬁcation to disentangle secure-enclave hardware from soft-
ware. In SOSP, pages 287–305. ACM, 2017.
[28] RISC-V Foundation. The risc-v instruction set manual, volume ii:
https://riscv.org/specifications/
Privileged architecture.
privileged-isa/, 2019.
[29] RISC-V Foundation. Risc-v proxy kernel and boot loader. https:
//github.com/riscv/riscv-pk, 2019.
[30] T. Frassetto, P. Jauernig, C. Liebchen, and A. Sadeghi.
Imix: In-
In USENIX Security, pages
process memory isolation extension.
83–97, 2018.
[31] B. Gras, K. Razavi, H. Bos, and C. Giuffrida. Translation leak-aside
buffer: Defeating cache side-channel protections with {TLB} attacks.
In USENIX Security, pages 955–972, 2018.
[32] L. Guan, P. Liu, X. Xing, X. Ge, S. Zhang, M. Yu, and T. Jaeger.
Trustshadow: Secure execution of unmodiﬁed applications with arm
trustzone. In MobiSys, pages 488–501. ACM, 2017.
[33] Z. Hua, J. Gu, Y. Xia, H. Chen, B. Zang, and H. Guan. vtz: Virtualiz-
ing arm trustzone. In USENIX Security), 2017.
[34] Advanced Micro Devices Inc. Amd64 architecture programmer’s
manual volume 2: System programming. https://www.amd.com/
system/files/TechDocs/24593.pdf, 2019.
[35] Intel.
ence.
managed/48/88/329298-002.pdf, 2014.
Intel Software Guard Extensions Programming Refer-
https://software.intel.com/sites/default/files/
[36] G. Irazoqui, T. Eisenbarth, and B. Sunar. S $ a: A shared cache attack
that works across cores and deﬁes vm sandboxing and its application
to aes. In S&P, pages 591–604. IEEE, 2015.
[37] N. P. Jouppi, C. Young, N. Patil, and D. Patterson. A domain-speciﬁc
architecture for deep neural networks. Commun. ACM, 61(9):50–59,
2018.
[38] D. Kaplan, J. Powell, and T. Woller. Amd memory encryption.
https : / / developer . amd . com / wordpress / media / 2013 / 12 /
AMD_Memory_Encryption_Whitepaper_v7-Public.pdf, 2016.
[39] M. Kayaalp, N. Abu-Ghazaleh, D. Ponomarev, and A. Jaleel. A high-
resolution side-channel attack on last-level cache. In DAC, page 72.
ACM, 2016.
[40] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu. Flipping bits in memory without accessing
them: An experimental study of dram disturbance errors. ACM
SIGARCH Computer Architecture News, 42(3):361–372, 2014.
[41] C. King. stress-ng. https://manpages.ubuntu.com/manpages/
artful/man1/stress-ng.1.html, 2019.
[42] V. Kiriansky, I. Lebedev, S. Amarasinghe, S. Devadas, and J. Emer.
Dawg: A defense against cache timing attacks in speculative execution
processors. In MICRO, pages 974–987. IEEE, 2018.
[43] V. Kiriansky and C. Waldspurger.
Speculative buffer overﬂows:
Attacks and defenses. arXiv preprint arXiv:1807.03757, 2018.
[44] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, et al. sel4: Formal
veriﬁcation of an os kernel. In SOSP, pages 207–220. ACM, 2009.
[45] P. Kocher, J. Horn, A. Fogh, D. Genkin, et al. Spectre attacks:
Exploiting speculative execution. In S&P, pages 1–19. IEEE, 2019.
[46] P. C. Kocher. Timing attacks on implementations of difﬁe-hellman,
rsa, dss, and other systems. In CRYPTO, pages 104–113. Springer,
1996.
[48] D. Lee, D. Kohlbrenner, S. Shinde, D. Song, and K. Asanovi´c.
arXiv preprint
Keystone: A framework for architecting tees.
arXiv:1907.10119, 2019.
[49] S. Lee, Y. Kim, J. Kim, and J. Kim. Stealing webpages rendered on
your browser by exploiting gpu vulnerabilities. In S&P, pages 19–33.
IEEE, 2014.
[50] S. Lee, M. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado. Inferring
ﬁne-grained control ﬂow inside SGX enclaves with branch shadowing.
In USENIX Security, pages 557–574, 2017.
[51] M. Li, Y. Zhang, Z. Lin, and Y. Solihin. Exploiting unprotected
i/o operations in amd’s secure encrypted virtualization. In USENIX
Security, pages 1257–1272, 2019.
[52] LibTom.
Libtomcrypt.
https : / / www . libtom . net /
LibTomCrypt/, 2019.
[53] ARM Limited.
Trusted board boot requirements client (tbbr-
client) armv8-a.
https://static.docs.arm.com/den0006/
d / DEN0006D _ Trusted _ Board _ Boot _ Requirements . pdf ? _ga =
2.193628069.980937939.1583698138-225494643.1545056698,
2018.
[54] ARM Limited. Amba R(cid:13) axi and ace protocol speciﬁcation. https:
/ / static . docs . arm . com / ihi0022 / g / IHI0022G _ amba _ axi _
protocol_spec.pdf, 2019.
[55] Arm Limited. Arm R(cid:13) architecture reference manual.
https:
//static.docs.arm.com/ddi0487/ea/DDI0487E_a_armv8_arm.
pdf, 2019.
[56] ARM Limited. Arm platform security architecture trusted boot and
https://pages.arm.com/rs/312-SAX-488/
ﬁrmware update.
images/DEN0072-PSA_TBFU_1.0-bet1.pdf, 2019.
[57] Linaro. Op-tee. https://www.op-tee.org/.
[58] F. Liu, Q. Ge, Y. Yarom, F. Mckeen, C. Rozas, G. Heiser, and R. B.
Lee. Catalyst: Defeating last-level cache side channel attacks in cloud
computing. In HPCA, pages 406–418. IEEE, 2016.
[59] F. Liu and R. B. Lee. Random ﬁll cache architecture. In MICRO,
pages 203–215. IEEE, 2014.
[60] F. Liu, H. Wu, K. Mai, and R. B. Lee. Newcache: Secure cache
architecture thwarting cache side-channel attacks. MICRO, 36(5):8–
16, 2016.
[61] John M. Intel software guard extensions remote attestation end-to-end
example.
https://software.intel.com/en- us/articles/
intel - software - guard - extensions - remote - attestation -
end-to-end-example, 2018.
[62] S. Mangard, E. Oswald, and T. Popp. Power analysis attacks: Re-
vealing the secrets of smart cards, volume 31. Springer Science &
Business Media, 2008.
[63] A. T. Markettos, C. Rothwell, B. F. Gutstein, A. Pearce, P. G. Neu-
mann, S. W. Moore, and R. N. Watson. Thunderclap: Exploring
vulnerabilities in operating system iommu protection via dma from
untrustworthy peripherals. In NDSS, 2019.
[64] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ,
V. Shanbhogue, and U. R. Savagaonkar. Innovative instructions and
software model for isolated execution. In HASP. ACM, 2013.
[65] M. Morbitzer, M. Huber, J. Horsch, and S. Wessel. Severed: Subvert-
ing amd’s virtual machine encryption. In EuroSec. ACM, 2018.
[66] J. Noorman, P. Agten, W. Daniels, R. Strackx, A. Van Herrewege,
C. Huygens, B. Preneel, I. Verbauwhede, and F. Piessens. San-
cus: Low-cost trustworthy extensible networked devices with a zero-
software trusted computing base. In USENIX Security, 2013.
USENIX Association
30th USENIX Security Symposium    1089
[67] NVIDIA.
Developing a linux kernel module using gpudirect
https://docs.nvidia.com/cuda/gpudirect- rdma/
rdma.
index.html, 2019.
[68] O. Ohrimenko, F. Schuster, C. Fournet, A. Mehta, S. Nowozin,
K. Vaswani, and M. Costa. Oblivious multi-party machine learn-
ing on trusted processors.
In USENIX Security, pages 619–636,
2016.
[69] O. Oleksenko, B. Trach, R. Krahn, M. Silberstein, and C. Fetzer.
Varys: Protecting sgx enclaves from practical side-channel attacks. In
USENIX ATC, 2018.
[70] D. A. Osvik, A. Shamir, and E. Tromer. Cache attacks and counter-
measures: the case of AES. In RSA Conference, 2006.
[71] Orson P. ed25519. https://github.com/orlp/ed25519, 2019.
[72] R. D. Pietro, F. Lombardi, and A. Villani. Cuda leaks: a detailed hack
for cuda and a (partial) ﬁx. TECS, 15(1):15, 2016.
[73] M. Portnoy. Virtualization essentials, volume 19. John Wiley & Sons,
2012.
[74] M. K. Qureshi. Ceaser: Mitigating conﬂict-based cache attacks via
encrypted-address and remapping. In MICRO, pages 775–787. IEEE,
2018.
[75] RV-8. Rv8-bench.
https://github.com/rv8-io/rv8-bench,
2019.
[76] F. L. Sang, V. Nicomette, and Y. Deswarte. I/o attacks in intel pc-
based architectures and countermeasures. In SysSec Workshop, pages
19–26. IEEE, 2011.
[77] R. Schuster, V. Shmatikov, and E. Tromer. Beauty and the burst: Re-
mote identiﬁcation of encrypted video streams. In USENIX Security,
pages 1357–1374, 2017.
[78] M. Schwarz, M. Lipp, D. Moghimi, J. Van Bulck, J. Stecklina,
T. Prescher, and D. Gruss. Zombieload: Cross-privilege-boundary
data sampling. In CCS, pages 753–768, 2019.
[79] M. Shih, S. Lee, T. Kim, and M. Peinado. T-sgx: Eradicating
controlled-channel attacks against enclave programs. In NDSS, 2017.
[80] SiFive.
Siﬁve tilelink speciﬁcation.
https : / / sifive .
cdn . prismic . io / sifive % 2F57f93ecf - 2c42 - 46f7 - 9818 -
bcdd7d39400a_tilelink-spec-1.7.1.pdf, 2018.
[81] SiFive. Siﬁve block inclusive cache.
https://github.com/
sifive/block-inclusivecache-sifive, 2019.
[82] C. Song, H. Moon, M. Alam, I. Yun, B. Lee, T. Kim, W. Lee, and
Y. Paek. Hdﬁ: Hardware-assisted data-ﬂow isolation. In S&P, pages
1–17. IEEE, 2016.
[83] M. Sonka, V. Hlavac, and R. Boyle. Image processing, analysis, and
machine vision. Cengage Learning, 2014.
[84] D. Steinkraus, I. Buck, and P. Simard. Using gpus for machine
learning algorithms. In ICDAR, pages 1115–1120. IEEE, 2005.
[85] H. Sun, K. Sun, Y. Wang, J. Jing, and H. Wang. Trustice: Hardware-
assisted isolated computing environments on mobile devices. In DSN,
2015.
[86] A. Tang, S. Sethumadhavan, and S. Stolfo. Clkscrew: exposing the
perils of security-oblivious energy management. In USENIX Security,
pages 1057–1074, 2017.
[87] C. Tsai, D. E. Porter, and M. Vij. Graphene-sgx: A practical library os
for unmodiﬁed applications on sgx. In USENIX ATC, pages 645–658,
2017.
[88] A. Vahldiek-Oberwagner, E. Elnikety, N. O. Duarte, M. Sammler,
P. Druschel, and D. Garg. Erim: Secure, efﬁcient in-process isolation
with protection keys (mpk). In USENIX Security, pages 1221–1238,
2019.
[89] J. Van Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci,
F. Piessens, M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx.
Foreshadow: Extracting the keys to the intel sgx kingdom with tran-
sient out-of-order execution. In USENIX Security, pages 991–1008,
2018.
[90] J. Van Bulck, D. Moghimi, M. Schwarz, M. Lipp, M. Minkin,
D. Genkin, Y. Yarom, B. Sunar, D. Gruss, and F. Piessens. Lvi:
Hijacking transient execution through microarchitectural load value
injection. In S&P, 2020.
[91] J. Van Bulck, F. Piessens, and R. Strackx. Nemesis: Studying mi-
croarchitectural timing leaks in rudimentary cpu interrupt logic. In
CCS, pages 178–195. ACM, 2018.
[92] J. Van Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx.
Telling your secrets without page faults: Stealthy page table-based
attacks on enclaved execution. In USENIX Security, pages 1041–1056,
2017.
[93] S. van Schaik, A. Milburn, S. Österlund, P. Frigo, G. Maisuradze,
K. Razavi, H. Bos, and C. Giuffrida. Ridl: Rogue in-ﬂight data load.
S&P, 2019.
[94] Stephan van Schaik, Andrew Kwong, Daniel Genkin, and Yuval
https : / /
SGAxe: How SGX fails in practice.
Yarom.
sgaxeattack.com/, 2020.
[95] L. Vilanova, M. Ben-Yehuda, N. Navarro, Y. Etsion, and M. Valero.
Codoms: Protecting software with code-centric memory domains. In
ISCA, pages 469–480. IEEE, 2014.
[96] S. Volos, K. Vaswani, and R. Bruno. Graviton: Trusted execution
environments on gpus. In USENIX OSDI 18, pages 681–696, 2018.
[97] Y. Wang, A. Ferraiuolo, D. Zhang, A. C. Myers, and G. E. Suh.
Secdcp: Secure dynamic cache partitioning for efﬁcient timing chan-
nel protection. In DAC, pages 1–6. ACM, 2016.
[98] S. Weiser, M. Werner, F. Brasser, M. Malenko, S. Mangard, and
A. Sadeghi. Timber-v: Tag-isolated memory bringing ﬁne-grained
enclaves to risc-v. In NDSS, 2019.
[99] M. Werner, T. Unterluggauer, L. Giner, M. Schwarz, D. Gruss, and
S. Mangard. Scattercache: thwarting cache attacks via cache set
randomization. In USENIX Security, pages 675–692, 2019.
[100] J. Woodruff, R. N. Watson, D. Chisnall, S. W. Moore, J. Anderson,
B. Davis, B. Laurie, P. G. Neumann, R. Norton, and M. Roe. The
cheri capability model: Revisiting risc in an age of risk.
In ISCA,
pages 457–468. IEEE, 2014.
[101] Y. Xu, W. Cui, and M. Peinado. Controlled-channel attacks: Deter-
ministic side channels for untrusted operating systems. In S&P, pages
640–656. IEEE, 2015.
[102] Y. Yarom and K. Falkner. Flush+reload: A high resolution, low noise,
l3 cache side-channel attack. In USENIX Security, 2014.
[103] Google Projekt Zero.
Trust issues: Exploiting trustzone tees.
https://googleprojectzero.blogspot.com/2017/07/trust-
issues-exploiting-trustzone-tees.html, 2017.
[104] Google Projekt Zero. Cve-2018-17182. https://bugs.chromium.
org/p/project-zero/issues/detail?id=1664, 2018.
[105] Google Projekt Zero. Xnu: copy-on-write behavior bypass via
mount of user-owned ﬁlesystem image. https://developer.amd.
com / wordpress / media / 2013 / 12 / AMD _ Memory _ Encryption _
Whitepaper_v7-Public.pdf, 2018.
[106] S. Zhao, Q. Zhang, Y. Qin, W. Feng, and D. Feng. Sectee: A software-
In CCS,
based approach to secure enclave architecture using tee.
pages 1723–1740. ACM, 2019.
[107] Z. Zhou, W. Diao, X. Liu, Z. Li, K. Zhang, and R. Liu. Vulnerable
gpu memory management: towards recovering raw data from gpu.
Proceedings on Privacy Enhancing Technologies, 2017(2):57–73,
2017.
1090    30th USENIX Security Symposium
USENIX Association