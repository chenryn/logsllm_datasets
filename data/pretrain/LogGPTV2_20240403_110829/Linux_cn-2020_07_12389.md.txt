---
author: Sandra Henry-stocker
category: 系统运维
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 10152
date: '2020-07-07 10:34:10'
editorchoice: false
excerpt: 在这篇文章中，我们将看一些工具，可以帮助你增加服务器压力并衡量结果。
fromurl: https://www.networkworld.com/article/3563334/how-to-stress-test-your-linux-system.html
id: 12389
islctt: true
largepic: /data/attachment/album/202007/07/103356evq0scefanwr1pge.jpg
permalink: /article-12389-1.html
pic: /data/attachment/album/202007/07/103356evq0scefanwr1pge.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 在这篇文章中，我们将看一些工具，可以帮助你增加服务器压力并衡量结果。
tags:
- 压力测试
thumb: false
title: 如何对你的 Linux 系统进行压力测试
titlepic: true
translator: wxy
updated: '2020-07-07 10:34:10'
---
> 
> 如果你想了解 Linux 服务器在重压之下的运行情况，那么给 Linux 服务器施加压力是个不错的主意。在这篇文章中，我们将看一些工具，可以帮助你增加服务器压力并衡量结果。
> 
> 
> 
![](/data/attachment/album/202007/07/103356evq0scefanwr1pge.jpg)
为什么你会想给你的 Linux 系统施加压力呢？因为有时你可能想知道当一个系统由于大量运行的进程、繁重的网络流量、过多的内存使用等原因而承受很大的压力时，它的表现如何。这种压力测试可以帮助确保系统已经做好了 “上市” 的准备。
如果你需要预测应用程序可能需要多长时间才能做出反应，以及哪些（如果有的话）进程可能会在重负载下失败或运行缓慢，那么在前期进行压力测试是一个非常好的主意。
幸运的是，对于那些需要能够预测 Linux 系统在压力下的反应的人来说，你可以采用一些有用的技术和工具来使这个过程更容易。在这篇文章中，我们将研究其中的一些。
### 自己动手做个循环
第一种技术是在命令行上运行一些循环，观察它们对系统的影响。这种方式可以大大增加 CPU 的负荷。使用 `uptime` 或类似的命令可以很容易地看到结果。
在下面的命令中，我们启动了四个无尽循环。你可以通过添加数字或使用 bash 表达式，如 `{1...6}` 来代替 `1 2 3 4` 以增加循环次数：
```
for i in 1 2 3 4; do while : ; do : ; done & done
```
在命令行上输入后，将在后台启动四个无尽循环：
```
$ for i in 1 2 3 4; do while : ; do : ; done & done
[1] 205012
[2] 205013
[3] 205014
[4] 205015
```
在这种情况下，发起了作业 1-4，作业号和进程号会相应显示出来。
要观察对平均负载的影响，请使用如下所示的命令。在本例中，`uptime` 命令每 30 秒运行一次：
```
$ while true; do uptime; sleep 30; done
```
如果你打算定期运行这样的测试，你可以将循环命令放入脚本 `watch-it` 中。
```
#!/bin/bash
while true
do
  uptime
  sleep 30
done
```
在输出中，你可以看到平均负载是如何增加的，然后在循环结束后又开始下降。
```
 11:25:34 up 5 days, 17:27,  2 users,  load average: 0.15, 0.14, 0.08
 11:26:04 up 5 days, 17:27,  2 users,  load average: 0.09, 0.12, 0.08
 11:26:34 up 5 days, 17:28,  2 users,  load average: 1.42, 0.43, 0.18
 11:27:04 up 5 days, 17:28,  2 users,  load average: 2.50, 0.79, 0.31
 11:27:34 up 5 days, 17:29,  2 users,  load average: 3.09, 1.10, 0.43
 11:28:04 up 5 days, 17:29,  2 users,  load average: 3.45, 1.38, 0.54
 11:28:34 up 5 days, 17:30,  2 users,  load average: 3.67, 1.63, 0.66
 11:29:04 up 5 days, 17:30,  2 users,  load average: 3.80, 1.86, 0.76
 11:29:34 up 5 days, 17:31,  2 users,  load average: 3.88, 2.06, 0.87
 11:30:04 up 5 days, 17:31,  2 users,  load average: 3.93, 2.25, 0.97
 11:30:34 up 5 days, 17:32,  2 users,  load average: 3.64, 2.35, 1.04     COMMAND
 269308 be/4 root        0.00 B/s    0.00 B/s  0.00 %  1.24 % [kworker~fficient]
    283 be/3 root        0.00 B/s   19.36 K/s  0.00 %  0.26 % [jbd2/sda1-8]
```
之后：
```
Total DISK READ:         0.00 B/s | Total DISK WRITE:         0.00 B/s
Current DISK READ:       0.00 B/s | Current DISK WRITE:       0.00 B/s
    TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO>    COMMAND
 270983 be/4 shs         0.00 B/s    0.00 B/s  0.00 % 51.45 % stress --io 4
 270984 be/4 shs         0.00 B/s    0.00 B/s  0.00 % 51.36 % stress --io 4
 270985 be/4 shs         0.00 B/s    0.00 B/s  0.00 % 50.95 % stress --io 4
 270982 be/4 shs         0.00 B/s    0.00 B/s  0.00 % 50.80 % stress --io 4
 269308 be/4 root        0.00 B/s    0.00 B/s  0.00 %  0.09 % [kworker~fficient]
```
`stress` 只是给系统增加压力的若干工具之一。另一个较新的工具，`stress-ng`，将在以后的文章中介绍。
### 总结
用于系统压力测试的各种工具可以帮助你预测系统在真实世界的情况下如何响应，在这些情况下，它们受到增加的流量和计算需求。
虽然我们在文章中展示的是创建和测量各种类型的压力的方法，但最终的好处是压力如何帮助确定你的系统或应用程序对它的反应。
---
via: 
作者：[Sandra Henry-Stocker](https://www.networkworld.com/author/Sandra-Henry_Stocker/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出