# []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#configuring-apache-name-based-virtual-hosts_setting-apache-http-server}配置基于 Apache 名称的虚拟主机 {.title}
:::
基于名称的虚拟主机可让 Apache 为解析到服务器 IP
地址的不同域提供不同的内容。
本节中的步骤论述了使用单独的文档根目录为 `example.com`{.literal} 和
`example.net`{.literal} 域设置虚拟主机。两个虚拟主机都提供静态 HTML
内容。
::: itemizedlist
**先决条件**
-   客户端和 Web 服务器将 `example.com`{.literal} 和
    `example.net`{.literal} 域解析为 Web 服务器的 IP 地址。
    请注意，您必须手动将这些条目添加到 DNS 服务器中。
:::
::: orderedlist
**步骤**
1.  安装 `httpd`{.literal} 软件包：
    ``` literallayout
    # dnf install httpd
    ```
2.  编辑 `/etc/httpd/conf/httpd.conf`{.literal} 文件：
    ::: orderedlist
    1.  为 `example.com`{.literal} 域添加以下虚拟主机配置：
        ``` literallayout
            DocumentRoot "/var/www/example.com/"
            ServerName example.com
            CustomLog /var/log/httpd/example.com_access.log combined
            ErrorLog /var/log/httpd/example.com_error.log
        ```
        这些设置配置以下内容：
        ::: itemizedlist
        -   ``{.literal}
            指令中的所有设置都是针对这个虚拟主机的。
        -   `DocumentRoot`{.literal} 设置虚拟主机的 Web 内容的路径。
        -   `ServerName`{.literal} 设置此虚拟主机为其提供内容服务的域。
            要设置多个域，请在配置中添加 `ServerAlias`{.literal}
            参数，并在此参数中指定用空格分开的额外域。
        -   `CustomLog`{.literal} 设置虚拟主机的访问日志的路径。
        -   `ErrorLog`{.literal} 设置虚拟主机错误日志的路径。
            ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
            ### 注意 {.title}
            Apache
            还将配置中找到的第一个虚拟主机用于与`ServerName`{.literal}和`Server Alias`{.literal}参数中设置的任何域不匹配的请求。这还包括发送到服务器
            IP 地址的请求。
            :::
        :::
    :::
3.  为 `example.net`{.literal} 域添加类似的虚拟主机配置：
    ``` literallayout
        DocumentRoot "/var/www/example.net/"
        ServerName example.net
        CustomLog /var/log/httpd/example.net_access.log combined
        ErrorLog /var/log/httpd/example.net_error.log
    ```
4.  为两个虚拟主机创建文档根目录：
    ``` literallayout
    # mkdir /var/www/example.com/
    # mkdir /var/www/example.net/
    ```
5.  如果您在 `DocumentRoot`{.literal}
    参数中设置的路径不在`/var/www/`{.literal}中，请在两个文档根中设置
    `httpd_sys_content_t`{.literal} 上下文：
    ``` literallayout
    # semanage fcontext -a -t httpd_sys_content_t "/srv/example.com(/.*)?"
    # restorecon -Rv /srv/example.com/
    # semanage fcontext -a -t httpd_sys_content_t "/srv/example.net(/.\*)?"
    # restorecon -Rv /srv/example.net/
    ```
    这些命令在`/srv/example.com/`{.literal}和`/srv/ example.net/`{.literal}
    目录中设置 `httpd_sys_content_t`{.literal}上下文。
    请注意，您必须安装 `policycoreutils-python-utils`{.literal}
    软件包才能运行`restorecon`{.literal} 命令。
6.  在本地防火墙中打开端口 `80`{.literal}:
    ``` literallayout
    # firewall-cmd --permanent --add-port=80/tcp
    # firewall-cmd --reload
    ```
7.  启用并启动 `httpd`{.literal} 服务：
    ``` literallayout
    # systemctl enable --now httpd
    ```
:::
::: orderedlist
**验证步骤**
1.  在每个虚拟主机的文档 root 中创建不同的示例文件：
    ``` literallayout
    # echo "vHost example.com" > /var/www/example.com/index.html
    # echo "vHost example.net" > /var/www/example.net/index.html
    ```
2.  使用浏览器并连接到 `http://example.com`{.literal}Web
    服务器显示`example.com`{.literal}虚拟主机中的示例文件。
3.  使用浏览器并连接到 `http://example.net`{.literal}Web
    服务器显示`example.net`{.literal}虚拟主机中的示例文件。
:::
::: itemizedlist
**其他资源**
-   有关配置 Apache 虚拟主机的详情，请参考 Apache 手册中的
    `Virtual Hosts`{.literal} 文档。有关安装手册的详情，请参考 ["安装
    Apache HTTP
    服务器手册"一节](#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#installing-the-apache-http-server-manual_setting-apache-http-server "安装 Apache HTTP 服务器手册"){.xref}。
:::
:::
::: section
::: titlepage
# []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#assembly_configuring-kerberos-authentication-for-the-apache-http-web-server_setting-apache-http-server}为 Apache HTTP web 服务器配置 Kerberos 验证 {.title}
:::
要在 Apache HTTP web 服务器中执行 Kerberos 身份验证，RHEL 9 使用
`mod_auth_gssapi`{.literal} Apache 模块。Generic Security Services
API(`GSSAPI`{.literal})是请求使用安全库（如
Kerberos）的应用程序的接口。`gssproxy`{.literal} 服务允许对
`httpd`{.literal} 服务器实施特权分离，从安全的角度来看，这优化了此过程。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`mod_auth_gssapi`{.literal} 模块取代了已删除的 `mod_auth_kerb`{.literal}
模块。
:::
::: itemizedlist
**先决条件**
-   已安装了 `httpd`{.literal}, `mod_auth_gssapi`{.literal} 和
    `gssproxy`{.literal} 软件包。
-   Apache Web 服务器已设置，并且 `httpd`{.literal} 服务在运行。
:::
::: section
::: titlepage
## []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#proc_setting-up-gss-proxy-in-an-idm-environment_assembly_configuring-kerberos-authentication-for-the-apache-http-web-server}在 IdM 环境中设置 GSS-Proxy {.title}
:::
这个流程描述了如何设置 `GSS-Proxy`{.literal} ，以便在 Apache HTTP Web
服务器中执行 Kerberos 身份验证。
::: orderedlist
**步骤**
1.  通过创建服务主体来启用对 HTTP/\@realm
    主体的`keytab`{.literal}文件的访问：
    ``` literallayout
    # ipa service-add HTTP/
    ```
2.  检索存储在`/etc/gssproxy/http.keytab`{.literal}文件中的主体的`keytab`{.literal}：
    ``` literallayout
    # ipa-getkeytab -s $(awk '/^server =/ {print $3}' /etc/ipa/default.conf) -k /etc/gssproxy/http.keytab -p HTTP/$(hostname -f)
    ```
    此步骤将权限设置为 400，因此只有 `root`{.literal} 用户有权访问
    `keytab`{.literal} 文件。`apache`{.literal} 用户无法访问。
3.  使用以下内容创建 `/etc/gssproxy/80-httpd.conf`{.literal} 文件：
    ``` literallayout
    [service/HTTP]
      mechs = krb5
      cred_store = keytab:/etc/gssproxy/http.keytab
      cred_store = ccache:/var/lib/gssproxy/clients/krb5cc_%U
      euid = apache
    ```
4.  重启并启用 `gssproxy`{.literal} 服务：
    ``` literallayout
    # systemctl restart gssproxy.service
    # systemctl enable gssproxy.service
    ```
:::
::: itemizedlist
**其他资源**
-   有关使用或调整`GSS-Proxy`{.literal}的详情，请查看
    `gssproxy(8)`{.literal}、`gssproxy-mech(8)`{.literal}和`gssproxy.conf(5)`{.literal}手册页。
:::
:::
::: section
::: titlepage
## []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#proc_configuring-kerberos-authentication-for-a-directory-shared-by-the-apache-http-web-server_assembly_configuring-kerberos-authentication-for-the-apache-http-web-server}为 Apache HTTP Web 服务器共享的目录配置 Kerberos 身份验证 {.title}
:::
这个过程描述了如何为 `/var/www/html/private/`{.literal} 目录配置
Kerberos 身份验证。
::: itemizedlist
**先决条件**
-   `gssproxy`{.literal} 服务已配置并在运行。
:::
::: orderedlist
**步骤**
1.  配置 `mod_auth_gssapi`{.literal}模块来保护
    `/var/www/html/private/`{.literal}目录：
    ``` literallayout
      AuthType GSSAPI
      AuthName "GSSAPI Login"
      Require valid-user
    ```
2.  使用以下内容创建`/etc/systemd/system/httpd.service`{.literal}文件：
    ``` literallayout
    .include /lib/systemd/system/httpd.service
    [Service]
    Environment=GSS_USE_PROXY=1
    ```
3.  重新载入`systemd`{.literal}配置：
    ``` literallayout
    # systemctl daemon-reload
    ```
4.  重启`httpd`{.literal}服务：
    ``` literallayout
    # systemctl restart httpd.service
    ```
:::
::: orderedlist
**验证步骤**
1.  获取Kerberos ticket：
    ``` literallayout
    # kinit
    ```
2.  在浏览器中打开到受保护目录的URL。
:::
:::
:::
::: section
::: titlepage
# []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#configuring-tls-encryption-on-an-apache-http-server_setting-apache-http-server}在Apache HTTP服务器上配置TLS加密 {.title}
:::
默认情况下，Apache 使用未加密的 HTTP
连接向客户端提供内容。这部分论述了如何在 Apache HTTP 服务器上启用 TLS
加密和配置常用的与加密相关的设置。
::: itemizedlist
**先决条件**
-   Apache HTTP 服务器已安装并运行。
:::
::: section
::: titlepage
## []{#setting-apache-http-server_deploying-web-servers-and-reverse-proxies.html#proc_adding-tls-encryption-to-an-apache-http-server-configuration_configuring-tls-encryption-on-an-apache-http-server}在 Apache HTTP 服务器中添加 TLS 加密 {.title}
:::
这部分论述了如何在Apache HTTP
服务器上对`example.com`{.literal}域启用TLS加密。
::: itemizedlist
**先决条件**
-   Apache HTTP 服务器已安装并运行。
-   私钥存储在 `/etc/pki/tls/private/example.com.key`{.literal} 文件中。
    有关创建私钥和证书签名请求(CSR)的详细信息，以及如何从证书颁发机构(CA)请求证书，请参阅您的
    CA 文档。或者，如果您的 CA 支持 ACME 协议，您可以使用
    `mod_md`{.literal} 模块自动检索和调配 TLS 证书。
-   TLS
    证书存储在`/etc/pki/tls/certs/example.com.crt`{.literal}文件中。如果您使用其他路径，请调整该流程的对应步骤。
-   CA 证书存储在 `/etc/pki/tls/certs/ca.crt`{.literal}
    文件中。如果您使用其他路径，请调整该流程的对应步骤。
-   客户端和网页服务器会将服务器的主机名解析为 web 服务器的 IP 地址。
:::
::: orderedlist
**步骤**
1.  安装 `mod_ssl`{.literal} 软件包：
    ``` literallayout
    # dnf install mod_ssl
    ```
2.  编辑`/etc/httpd/conf.d/ssl.conf`{.literal}文件，并将以下设置添加到
    ``{.literal}指令中：
    ::: orderedlist