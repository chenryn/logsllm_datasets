and sends
spid
(recvReq, spid, sname, uid, bsid, udata)
If
return ⊥ to user and send
td
(failReq, spid, sname, uid, bsid, udata) to S.
(2) Then Fresponse checks the uTable and retrieves user tu-
ple tu = (uid, scat, spid) where uid in tu is same as that
in user’s request, and spid and scat are same as those
in td. If no such tu exists return ⊥ to user and send
(failReq, spid, sname, uid, bsid, udata) to S.
(spid,·, bsid) in sTable where spid and bsid in ts is the same
as that in the user’s request. If no such tuples exists return
⊥ to user and send (failReq, spid, sname, uid, bsid, udata) to
S.
(4) If all previous verifications pass, then Fresponse forwards
request (uid, sname, udata) to all edge server ecids in the ts
tuples that was retrieved in the previous step and forward
(ReqEC, uid, sname, udata) to S.
(5) Each ecid, on receiving a request from Fresponse, does: 1) If
stype associated with sname is “static”, then ecid retrieves
the sdata associated with sname and returns msд = sdata
to Fresponse. 2) If stype associated with sname is “dynamic”,
then ecid retrieves the sdata function associated with sname.
It runs sdata(udata) → msд and forwards msд to Fresponse.
(6) Fresponse forwards the first msд associated with the current
request received from any ecid to uid and S, and discards
all other following msдs.
=
Figure 3: Ideal functionality for Responding to Requests
from uTable containing uid, spid from the request, and scat from
td. If no such tuple exists, then this reflects that the user is not
signed up with the given spid to access services tagged under
scat category and a ⊥ is returned to the user and Fresponse sends
(failReq, spid, sname, uid, bsid, udata) to S. Fresponse then retrieves
all tuples ts = (spid,·, bsid) to identify all ecids that can process the
user’s request. If no such tuple exists, then this indicates that there
are no ecids connected to bsid that can process the user’s request
and provide services on behalf of spid. Fresponse returns ⊥ to the
user along with (failReq, spid, sname, uid, bsid, udata) to S.
If all the above checks succeed, then Fresponse has a list of all
ecids available to process the user’s request and uid is a verified sub-
scriber to the requested service. Fresponse sends (uid, sname, udata)
to ecids in the tuples ts, retrieved in the previous step and for-
wards (ReqEC, uid, sname, udata) to S. When each ecid receives
the request, if sname is a static request, then ecid retrieves the
data associated with sname and responds to Fresponse with msд
containing sdata. If sname is a dynamic request, then the ecid
retrieves the algorithms, sdata associated with sname, processes
udata, sdata(udata) → msд, and responds to Fresponse with msд
which contains the output. Fresponse on receiving the first msд
from any ecid forwards it to uid and drops all subsequent msдs
from other ecids. Fresponse also forwards msд to S.
Functionality Frevoke
(1) Upon receipt of a request (revoke, spid, ecid) from SP (spid),
Frevoke checks the sTable for all tuples ts = (spid, ecid,·).
If any exist, Frevoke deletes the tuples from sTable and for-
wards (revoke, spid, ecid) to all bsids in the deleted tuples.
Else returns ⊥ to SP.
(2) Upon receipt of a request (revoke, uid, spid) from SP identi-
fied by spid, Frevoke checks the uTable for all tuples of the
form tu = (uid,·, spid). If any exist, it deletes the tuples
from uTable and returns “success”. Else, it returns ⊥.
Figure 4: Ideal functionality for User/Edge Server Revoke
Frevoke: The Frevoke functionality shown in Figure 4 handles the
revocation of an edge server by service provider SP. The functional-
ity also handles the revocation of a user’s access to services provided
by SP. When Frevoke receives a request (revoke, spid, ecid) from ser-
vice provider spid, it checks the sTable for the existence of all tuples
(spid, ecid,·) and deletes all such tuples if any exist. This effectively
revokes an EC identified by ecid from providing services on behalf
of SP. When Frevoke receives a request (revoke, uid, scat, spid) from
service provider spid, it checks the uTable for existence of a tuple
(uid, scat, spid) and deletes it if such a tuple exists. This effectively
revokes an user identified by uid from services provided by SP
under scat subscription category.
We further discuss the design of our ideal functionalities and
provide the proof of the following theorem in Appendix 11.
Theorem 6.1. Let FAPECS be an ideal functionality for APECS.
Let A be a probabilistic polynomial-time (PPT) adversary for APECS,
and let S be an ideal-world PPT simulator for FAPECS. APECS UC-
realizes FAPECS for any PPT distinguishing environment Z.
6.2 Informal Security Analysis
Before elaborating on malicious PEC servers and service consumers,
we briefly mention the impact of misbehaving cloud providers and
base stations. In APECS, the Cloud is the enabler of the commu-
nication between the PEC servers (hosting the service providers
instances) and the service providers. As such, it does not play any
active operational role and hence, its malicious behavior does not
impact the system’s security. In this paper, we built a federated
authority by considering two AIAs (one at the service provider and
one at the base station connected to the user device) so that the
malicious intent of one does not compromise the security and pri-
vacy of users’ data. Only with both AIAs being malicious, the users’
data can be decrypted illegally. Thus, malicious base stations alone
cannot violate users’ privacy. Note that using two AIAs is only for
illustration purposes. APECS can use multiple AIAs (N), in which
case, the system tolerates N -1 AIAs going rogue. In fact, we use
three AIAs for illustration in our experimental results (Section 7).
6.2.1 Malicious PEC Server. As per Section 3.3, a malicious PEC
server may hijack the communication or impersonate legitimate
PEC servers to obtain users’ data. Moreover, a malicious PEC server
(authorized server that does not follow the protocols) may collude
with an unauthorized user to illegitimately provide a service. In
APECS, the user encrypts the data (if needed) using a symmetric
cipher and encrypts the corresponding symmetric key using MABE.
This allows only the authorized PEC servers (having requisite secret
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1414keys from all AIAs) to successfully decrypt the symmetric key and
decrypt the user’s data. This prevents the unauthorized servers
from obtaining the user’s data (threat (e) in the threat model).
A colluding PEC server could provide either/both the static and
the dynamic service to an unauthorized user. In the former, an
unauthorized user obtains a content either from the malicious PEC
server or by intercepting the channel. Encryption of the content by
the service provider using a key pre-shared with the users (using
techniques such as ABE or broadcast encryption) can ensure that
unauthorized users cannot decrypt the content (threat (f)) [16, 17].
In the latter case, we argue that there is no incentive for a PEC
server to use its resources for executing a service without being
compensated assuming an accounting/billing framework exists for
tracking legitimate service execution for compensation.
We also note that a malicious service provider may attempt to
orchestrate a denial of service (DoS) attack on the PEC servers
by assigning expired or short-lived tokens to its users. However,
obtaining a fresh token from service providers incurs negligible
cost (it only requires one round trip time per user) and does not im-
pose any overhead on the PEC servers processing. Furthermore, by
orchestrating such a DoS campaign, the service provider sacrifices
its users’ quality of experience, which only damages its reputation.
Thus, we do not consider such DoS attacks a common threat.
6.2.2 Malicious Service Consumer. Following the threat model, con-
sumers’ threats include requesting services without valid tokens
(e.g., forged or expired) and unauthorized use of valid tokens (e.g.,
shared, intercepted, or replayed). In APECS, PEC servers assess
tokens’ validity by verifying the service provider’s signatures on
tokens and the consumers’ signatures on requests (request include
the signed tokens). A provider’s signature on a token can be verified
by its certificate while the service consumer’s signature should be
verified using the certificate embedded in the signed token. This
prevents a malicious consumer from sharing his token with unau-
thorized users (threats (a) and (d)). The only possibility for a mali-
cious service consumer to successfully share his token is to craft a
signed request and share it with the unauthorized user. For this at-
tack to be successful, the malicious consumer has to further modify
the timestamp of the request’s signature or forward it instantly. We
note that such an attack can be thwarted by updating APECS with
a challenge-response interaction between the service consumer
and the corresponding base station ahead of service request. The
base station uses the consumer’s certificate embedded in the token
to validate the identity using the challenge-response process and
subsequently allows the consumer to request the service.
Prior to signature verification, edge servers verify tokens’ fresh-
ness using the embedded expiry time dropping the requests with
stale tokens (threat (c)). Moreover, edge servers compare the re-
quested service provider’s identity with the one contained in the
token to prevent a malicious consumer from using a valid token
for other services (e.g., using face detection token for the image
annotation service). Thus, by virtue of the signature on the token
and its embedded information, edge servers can detect and drop
forged or expired tokens (threat (b)).
7 EXPERIMENTAL RESULTS AND ANALYSIS
7.1 Implementation Scope
The reference implementation of APECS comprises four compo-
nents: the user engine, the PEC server engine, the service provider
engine, and the cloud engine, all implemented in C++. We used
Pairing-Based Cryptography (PBC) library (v.0.5.14) and C Program-
ming Language (v.9.3.0) for the MABE implementation, and C++
libssl-dev library (v.1.1.1) for the symmetric key functionality. The
MABE framework was evaluated using the default “Type a” curve
provided by the PBC library which uses symmetric pairings for all
the pairing operations. For communication between these engines,
we used the gRPC framework (v.1.20.0). The user engine is in charge
of executing functions on the user’s behalf, including the user’s
data related functions, i.e., generation, storage, and encryption, to-
ken related functions, i.e., obtaining, storing, and consuming, and
data encryption/decryption. For APECS PKC, we extended the user
engine by verifying the PEC servers’ tokens. The user engine is
implemented in 1630 source lines of code (SLoC). The PEC server
engine performs authentication, authorization, and users’ service
execution. We implemented the token verification process in C++
using the jwt-cpp library. Features such as revocT able and content
cache are maintained by calls to a local NO-SQL mongoDB database
(v.4.2.9). All communication uses gRPC framework with TLS 1.2.
The PEC server engine is implemented in 2000 SLoC.
The provider engine operates the service provider’s function-
alities, such as storage of userT able in a local NO-SQL mongoDB
instance, user registration, token renewal, revocation, and content
delivery using gRPC C++ library. It further cooperates in the setup
of the MABE framework through the use of the PBC library. The
provider engine is implemented in 1950 SLoC. The cloud engine
hosts the service providers’ AIAs. As such, it runs a portion of
MABE framework setup, which is implemented using the PBC
library. The cloud engine maintains a local NO-SQL mongoDB in-
stance to store providers’ profiles and revoked tokens. Using gRPC
framework, it maintains standardized API routes for the invocation
of edge servers, provider registration, and access-denied notifica-
tion. The cloud engine is implemented in 600 SLoC.
For comparison, we prototyped an access control enforcement
mechanism that uses trusted centralized Cloud for enforcement of
access policies–a common approach that is currently adopted by
many providers. In our prototype, users obtain authentication to-
kens (Definition 4.1) from the service providers and share them with
the Cloud over secure channels (TLS) whenever requesting a ser-
vice. The Cloud follows the APECS PKC token verification process
to authenticate and authorize users. However, due to the common
assumption of Cloud’s trustworthiness, users do not authenticate
the Cloud (a one-way authentication of the users).
7.2 Experiment Setup
The assessment of MABE performance in isolation was performed
on three device classes. The first device class is that of a Compact
Edge device which is represented by a Jetson TX2 with 8 GB of
RAM and a CPU cluster composed of a dual-core NVIDIA Denver2
and a quad-core ARM Cortex-A57, both operating at 2.00 GHz.
The second device class, a handheld device, is represented by an
InstaGENI virtual machine (VM) with 1 GB of RAM and a 2.10 GHz
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1415Figure 5: Node placement in GENI. User U○ and Edge Server
E○ are hosted at the University of Colorado. Provider P○ and
Cloud C○ are hosted at Cornell and New York Universities.
Intel Xeon CPU E5-2450. Finally, the third device class used for
MABE performance evaluation is a Desktop with 16 GB of RAM
and a 3.60 GHz Intel Xeon W-2123 CPU.
In our experiments, we configure the MABE system with three
AIAs to represent a more complicated scenario for studying scal-
ing (instead of the relatively simpler scenario with two AIAs–one
service provider and one base station). An access policy has max-
imum two attributes per AIA. In realistic operating scenarios of
APECS, we do not expect more than two attributes per AIA, e.g.,
AIA’s identity and service type. For consistency, in APECS PKC each
PEC server uses three tokens per user request. We perform APECS’
reference implementation on a network consisting of four virtual
machines (VMs) hosted on the distributed GENI testbed [1]. We
chose the GENI testbed as it provides a large-scale and geograph-
ically distributed network experiment infrastructure–the closest
resemblance to real networks. We deployed each VM in different
GENI Aggregates across the United States to resemble a true edge-
cloud network topology. As shown in Figure 5, the instance at New
York University runs the cloud engine, the user and PEC server
engines run on dedicated VMs at University of Colorado, and the
provider engine runs at Cornell University. In assessing the ac-
cess control throughput, we deployed our PEC server engine on
Desktop-class and Handheld-class platforms.
7.3 Results and Analysis
We benchmarked the performance of MABE using the PBC library,
encrypting and decrypting a 512 bit symmetric key on three de-
vices classes mentioned above, namely Compact Edge, Handheld,
and Desktop. The PBC library is built on top of the GNU Multiple
Precision Arithmetic Library (GMP) library. Figure 6 represents
the results averaged over 1000 paired encryption-decryption runs.
For the Compact Edge device–the lowest computation capability–
encryption took about 20.6 milliseconds, while decryption took
Figure 7: Comparison of average runtime for proposed and
contemporary access control approaches.
19.1 milliseconds. Using the handheld device reduced the encryp-
tion latency to 17.4 milliseconds and decryption to 14.7 milliseconds.
We note that the handheld device is represented by a VM instance
which explains the presence of a larger error range. Finally, for the
desktop device, encryption was completed in 7.9 milliseconds and
decryption was completed in 4.8 milliseconds.
In Figure 7, we present the results comparing the average runtime
of APECS (both MABE and the PKC approaches) with contempo-
rary access control approaches involving the Cloud. We note that
the combined code, which combines the MABE implemented in
C with the networking and PKC in C++ still has room for opti-
mization3. We now discuss the results from the partially optimized
code. We benchmarked the performance of APECS, APECS PKC, and
the cloud-based access control on the GENI testbed. We measured
the end-to-end latency of these schemes for 1000 service requests
while timing the individual components that make up the com-
plete interaction. As shown in Figure 7 APECS was the fastest in
performing mutual access control with around 123 milliseconds,