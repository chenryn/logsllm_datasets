rized into these two categories. The last three rows in Table 6
provide the number of ROP payloads in the two categories
and their combined results. Ten ROP payloads attempt to ex-
ecute commands and temporal specialization blocks all of
them in four applications (Apache Httpd, Nginx, Memcached
and Bind). In case of Lighttpd and Redis, because execve
is used even in the serving phase (when used with a speciﬁc
non-default conﬁguration), temporal specialization cannot ﬁl-
ter it. Neither library nor temporal specialization can block
any payloads that try to change in-process memory permis-
sions. This is because mprotect is used by all applications
for memory allocation and permission assignment.
6.3.3 What Else can Attackers Do?
Assuming command execution (e.g., through execve and the
like) has been blocked, attackers may resort to other system
calls to achieve their goals. Meterpreter [6] is an advanced
payload that uses DLL injection to inject malicious code into
a process. Using such a payload would remove the require-
ment of using execve directly to launch external binaries,
and instead allows the attacker to inject the necessary code
to perform any operation as part of the vulnerable process
itself. While Meterpreter (in its original form) is only avail-
able for Windows, there are equivalents for Linux which use
the ptrace system call. However, none of the applications
in our dataset require this system call, so it can be ﬁltered in
all cases. Furthermore, by default, this capability is limited to
processes that have a predeﬁned relationship with the target
process since Linux kernel v3.2 due to the associated security
risks. The traced process should either be a child process of
the tracer, or should have tracing enabled using prctl.
Even if ptrace is not available, there are other system
call combinations that could be leveraged to perform DLL
injection. For example, Linux applications have the option
of dynamically loading shared objects after program launch,
using the dlopen and dlsym functions. Even if these two
functions are not available, the attacker can simply emulate
their functionality using the open, mmap, and close system
calls to inject a malicious library. Given that these are very
basic operations, it is unlikely that library or temporal special-
ization will be able to remove these system calls. However, a
crucial requirement of DLL injection is to place the injected
DLL in executable memory. When an application enters its
serving phase it will deﬁnitely need mmap to allocate memory,
but this memory is typically used for data which is not exe-
cutable. Applying argument-level API specialization [41] in
this case would prevent the attacker from mapping executable
memory once the application enters the serving phase, thereby
preventing these attacks.
The set of system calls used for ﬁle operations can also be
leveraged by an attacker to gain command execution. Con-
sider the case of an attacker writing to a ﬁle in the crontab
folder by invoking open, write, and close. In this case, the
crond service will run an attacker-controlled script which
gives them the capability of executing arbitrary commands.
While applying argument-level API specialization [41] can
potentially protect against such a scenario (assuming the ﬁle
paths can be predetermined), our approach cannot prevent
such cases in general if ﬁle permissions are not set properly.
For instance, regular programs should not have write access
to sensitive folders like crontab.
6.4 Kernel Security Evaluation
System calls are the main entry point into the kernel. Al-
though system calls (especially security-critical ones) are
mainly used by attackers to perform unauthorized operations
as part of exploiting a vulnerable process, they can also be
used to exploit vulnerabilities in the underlying kernel. Previ-
ous works [31–33, 46] have shown that malicious users can
target the kernel to perform privilege escalation or leak sensi-
1760    29th USENIX Security Symposium
USENIX Association
Table 7: Kernel CVEs mitigated by ﬁltering unneeded system calls.
CVE
CVE-2018-18281
CVE-2016-3672
CVE-2015-3339
CVE-2015-1593
CVE-2014-9585
CVE-2013-0914
CVE-2012-4530
CVE-2012-3375
CVE-2011-1082
CVE-2010-4346
CVE-2010-4243
CVE-2010-3858
CVE-2008-3527
System Call(s)
Description
Allows user to gain access to a physical page after it has been released.
Allows user to bypass ASLR by disabling stack consumption resource limits.
Race condition allows privilege escalation by executing program.
Bug in stack randomization allows attackers to bypass ASLR by predicting top of stack.
ASLR protection can be bypassed du to bug in choosing memory locations.
Allows local user to bypass ASLR by executing a crafted application.
Sensitive information from the kernel can be leaked via a crafted application.
Denial of service can be caused due to improper checks in epoll operations.
execve(at), mremap
execve(at)
execve(at)
execve(at)
execve(at)
execve(at)
execve(at)
epoll_ctl
epoll_(ctl,pwait,wait) Local user can cause denial of service due to improper checks in epoll data structures.
Allows attacker to conduct NULL pointer dereference attack via a crafted application.
execve(at)
Denial of service can be caused via a crafted exec system call.
uselib, execve(at)
Denial of service can be caused due to bug in restricting stack memory consumption.
execve(at)
Allows a local user to escalate privileges or cause DoS due to improper boundary checks.
execve(at)
Library
Temporal
0
2
2
2
2
2
2
0
0
2
2
2
2
4
4
4
4
4
4
4
1
1
4
4
4
4
tive information. In most cases, these attacks are performed
by exploiting a kernel vulnerability that is triggered through
a system call, when invoked with specially crafted arguments.
By disabling system calls associated with kernel vulnerabili-
ties we can thus reduce the attack surface of the kernel that
is exposed to attackers. While ﬁltering security-critical sys-
tem calls is of importance in case of user-space vulnerability
exploitation, it is important to note that any system call asso-
ciated with a kernel vulnerability can be exploited to mount
privilege escalation attacks.
To gain a better understanding of how ﬁltering individ-
ual system calls impacts mitigating potential kernel vulner-
abilities, we constructed the Linux kernel’s call graph using
KIRIN [64]. This allows us to identify all functions that are in-
voked as a result of speciﬁc system call invocations, and thus
reason about which part of the kernel’s code—and therefore
which vulnerabilities—become inaccessible when blocking a
given set of system calls.
To perform our analysis, we crawled the CVE website [1]
for Linux kernel vulnerabilities using a custom automated
tool. Our tool extracts each CVE’s relevant commit, and after
parsing it in the Linux kernel’s Git repository, ﬁnds the cor-
responding patch, and retrieves the relevant ﬁle and function
that was modiﬁed by the patch. We discovered that while
there were only a few CVEs directly associated with ﬁltered
system call code, many CVEs were associated with ﬁles and
functions that were invoked exclusively by ﬁltered system
call code. By matching the CVEs to the call graph created
by KIRIN, we were able to pinpoint all the vulnerabilities
that are related to the set of system calls ﬁltered by a given
application under each specialization mechanism. This pro-
vides us with a metric to assess the attack surface reduction
achieved by temporal specialization at the kernel level. This
reduction is reﬂected in the number of CVEs neutralized for
a given application after applying our Seccomp ﬁlters at the
beginning of the serving phase.
Based on our analysis, a total of 53 CVEs are effectively
removed in at least one of the six applications (i.e., the re-
spective vulnerabilities cannot be triggered by the attacker)
by temporal specialization. Out of the 53 vulnerabilities that
can be mitigated by temporal specialization, 40 can be mit-
igated by system call ﬁltering based on library debloating
as well. Table 6 shows the 13 CVEs that are neutralized by
temporal specialization, and which cannot be neutralized by
library specialization in some or all applications. The last two
columns correspond to the number of applications for which
the CVE is neutralized for library debloating and temporal
specialization, respectively.
7 Discussion and Limitations
Our approach does not remove any code from the protected
program, and consequently cannot mitigate any vulnerabilities
in the application itself, or reduce the code that could be
reused by an attacker.
Similarly to other attack surface reduction techniques, the
effectiveness of temporal specialization varies according to
the speciﬁc requirements of a given application, and as our
results show, it may not prevent all possible ways an attacker
can perform harmful interactions with the OS. Our equivalent
system call analysis attempts to quantify the evasion potential
by replacing system calls with others, but depending on the
attacker’s speciﬁc goals, there may be more creative ways
to accomplish them using the remaining system calls. For
example, without our technique, an attacker could read the
contents of a ﬁle simply by executing the cat program. Once
the execve-family of system calls are blocked, the attacker
would have to implement a more complex shellcode to open
and read the ﬁle and write it to an already open socket. As
part of our future work, we plan to extend our analysis by ex-
tracting the arguments passed to system calls and constraining
them as well [41, 42]. This would further limit the attacker’s
capabilities when using the remaining system calls.
Although we have considered only server applications in
this work, there could be beneﬁt in applying temporal spe-
cialization to some client applications. In general, any appli-
cation that follows the initialization/serving phase execution
model can beneﬁt from our approach. Examples of desktop
USENIX Association
29th USENIX Security Symposium    1761
applications which follow this model are ssh-agent [61] and
syslog-ng [10]. Further analysis of how well these applica-
tions follow the two-stage execution model has been left for
future work.
Due to multiple inheritance with support for polymorphism
in C++, our type-based matching currently supports only C
code. We plan to extend our approach to support applications
developed in C++ as part of our future work.
Additionally, we plan to investigate the use of alternative
points-to analysis algorithms. In particular, the authors of
TeaDSA [36], which is the type-aware implementation of
SeaDSA [23], report better accuracy than SVF in some cases
(typically for C++ applications) and worse in others (C ap-
plications). The authors acknowledge that TeaDSA is more
precise for C++ applications than SVF. However, for C ap-
plications (e.g., OpenSSL), their results show that it is less
precise than SVF. Moreover, the comparison in the paper is
with the type-unaware SVF. Because most server applications
are written in C, we anticipate the accuracy of our type-based
pruning to be better than type-aware SeaDSA. Unfortunately
we could not get TeaDSA to work with our applications due to
crashes. We will explore TeaDSA and other points-to analysis
algorithms as part of our future work.
Applications can dynamically load libraries through the
dlopen and dlsym functions. Due to the dynamic nature of
this feature, our current prototype does not support it.
8 Related Work
System call ﬁltering based on policies derived through static
or dynamic analysis has been widely used in host-based intru-
sion detection [18–20, 29, 35, 44, 52, 58]. Since in this paper
we focus on attack surface reduction through software spe-
cialization, we mainly discuss related works in this context.
Application Debloating Many previous works have fo-
cused on reducing the attack surface by removing unused code
from the application’s process address space. Mulliner and
Neugschwandtner [43] proposed one of the ﬁrst approaches
for preforming library debloating by removing non-imported
functions from shared libraries at load time. Quach et al. [51]
improve library debloating by extending the compiler and
the loader to remove all unused functions from shared li-
braries at load time. Agadakos et al. [12] propose a similar
library debloating approach at the binary level, through func-
tion boundary detection and dependency identiﬁcation.
Porter et al. [47] also perform library debloating, but load li-
brary functions only when requested by the application. While
this is similar to our approach in taking the program execution
phase into account, library functions are loaded and unloaded
based on the need of the application, whereas we install re-
strictive ﬁlters (which cannot be removed) after the execution
enters the serving phase.
Davidsson et al. [16] analyze the complete software stack
for web applications to create specialized libraries based on
the requirements of both the server application binaries and
PHP code. Song et al. [53] apply data dependency analysis
to perform ﬁne-grained library customization of statically
linked libraries. Shredder [41] instruments binaries to restrict
arguments passed to critical system API functions to a prede-
termined legitimate of possible values. Safﬁre [42] performs
call-site-speciﬁc argument-level specialization for functions
at build time.
Another line of research on debloating focuses on using
training to identify unused sections of applications. Qian et
al. [48] use training and heuristics to identify unnecessary
basic blocks and remove them from the binary without relying
on the source code. Ghaffarinia and Hamlen [21] use a similar
approach based on training to limit control ﬂow transfers to
unauthorized sections of the code.
Other works explore the potential of debloating software
based on predeﬁned feature sets. CHISEL [26] uses rein-
forcement learning to debloat software based on test cases
generated by the user. TRIMMER [25] ﬁnds unnecessary
basic blocks using an inter-procedural analysis based on user-
deﬁned conﬁgurations. DamGate [63] rewrites binaries with
gates to prevent execution of unused features.
While the above works focus on C/C++ applications, other
works speciﬁcally focus on the requirements of other pro-
gramming languages [30, 57, 62]. Jred [62] uses static anal-
ysis on Java code to identify and remove unused methods
and classes. Jiang et al. [30] used data ﬂow analysis to imple-
ment a feature-based debloating mechanism for Java. Azad
et al. [13] propose a framework for removing unnecessary
features from PHP applications through dynamic analysis.
Kernel and Container Debloating KASR [65] and FACE-
CHANGE [66] use dynamic analysis to create kernel proﬁles
for each application by using training to identify used parts of
the kernel. Kurmus et al. [37] propose a method to automat-
ically generate kernel conﬁguration ﬁles to tailor the Linux
kernel for speciﬁc workloads. Similarly, Acher et al. [11] use
a statistical supervised learning method to create different sets
of kernel conﬁguration ﬁles. Sysﬁlter [17] is a static binary
analysis framework that reduces the kernel’s attack surface by
restricting the system calls available to user-space processes.
Wan et al. [59] use dynamic analysis to proﬁle the required
system calls of a container and generate relevant Seccomp
ﬁlters. Due to the incompleteness of dynamic analysis, Con-
ﬁne [22] uses static analysis to create similar Seccomp proﬁles
to ﬁlter unnecessary system calls from containers. Docker-
Slim [2] is an open source tool which also relies on dynamic
analysis to remove unnecessary ﬁles from Docker images.
Similar to temporal debloating, SPEAKER [38] separates the
required system calls of containers in two main phases, boot-
ing and runtime. The approach only targets containers and
relies on training to identify the system calls for each phase.
1762    29th USENIX Security Symposium
USENIX Association
9 Conclusion
We presented temporal system call specialization, a novel
approach for limiting the system calls that are available to
server applications after they enter their serving or stable state.
Compared to previous software specialization approaches,
which consider the whole lifetime of a program, temporal spe-
cialization removes many additional system calls, including
dangerous ones such as execve, which are typically required
by server applications only during their initialization phase.
For a given server application, we perform static analysis of
the main program and all imported libraries to extract the set
of system calls which are no longer used after the transition
into the serving phase. As precise call graph generation is
a known problem in static analysis, we perform multiple
optimizations on top of existing points-to analysis algorithms
to reduce the imprecision of the call graph, which helps in
identifying a near-accurate set of used system calls.
We demonstrate the effectiveness of temporal specializa-
tion by evaluating it with six well known server applications
against a set of shellcodes and ROP payloads. We show that
temporal specialization disables 51% more security-critical
system calls compared to existing library specialization ap-
proaches, breaking 77% of the shellcodes and 68% of the
ROP payloads tested. In addition, 53 Linux kernel CVEs are
mitigated once temporal specialization comes into effect, 13
of which are not preventable by library specialization.
As a best-effort attack surface reduction solution, temporal
specialization is practical, easy to deploy, and signiﬁcantly
restricts an attacker’s capabilities.
Acknowledgments
We thank our shepherd, Claudio Canella, the anonymous re-
viewers, and the members of the artifact evaluation committee
for their helpful feedback. This work was supported by the
Ofﬁce of Naval Research (ONR) through award N00014-17-1-
2891, the National Science Foundation (NSF) through award
CNS-1749895, and the Defense Advanced Research Projects
Agency (DARPA) through award D18AP00045. Any opin-
ions, ﬁndings, and conclusions or recommendations expressed
herein are those of the authors and do not necessarily reﬂect
the views of the ONR, NSF, or DARPA.
References
[1] Common vulnerabilities and exposures database.
https://www.cvedetails.com.
[2] DockerSlim. https://dockersl.im.
[3] The LLVM compiler infrastructure. http://llvm.org.
[4] Memcached. https://memcached.org/.
[5] Metasploit framework. http://www.metasploit.com.
[6] Meterpreter.
https : / / github.com / rapid7 /
metasploit-framework/wiki/Meterpreter/.
[7] Nginx. https://www.nginx.com/.
[8] Seccomp BPF (SECure COMPuting with ﬁlters).
https : / / www.kernel.org / doc / html / v4.16 /
userspace-api/seccomp_filter.html.
[9] Shell-storm. http://www.shell-storm.org.