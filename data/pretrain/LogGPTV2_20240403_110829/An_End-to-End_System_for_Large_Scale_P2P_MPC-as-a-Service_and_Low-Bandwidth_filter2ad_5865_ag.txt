### Table 4: Executions in AWS (Same Region) on c5.xlarge Machines
- **Circuit Configuration**: 1,000,000 multiplication gates and depth 100
- **Time Units**: Milliseconds (ms)
- **Note**: GF[2^8] runs only up to 120 parties since HyperMPC requires |F| > 2n.

| Number of Parties | Execution Time (ms) |
|-------------------|---------------------|
| 20                | 1151                |
| 30                | 1737                |
| 40                | 2647                |
| 50                | 3739                |
| 60                | 4422                |
| 70                | 5106                |
| 80                | 6002                |
| 90                | 6238                |
| 100               | 6929                |
| 110               | 7874                |
| 120               | 8982                |
| 130               | 9702                |
| 140               | 11259               |
| 150               | 11910               |
| 12909             | -                   |

### HyperMPC with Many Parties
We demonstrated that HyperMPC can support MPC with a very large number of parties. We considered a scenario similar to PrivatePoll, where many parties compute the mean and variance over their inputs. The experiments were conducted with:
- **250 parties**: Circuit size of 2253 multiplication gates
- **500 parties**: Circuit size of 4503 multiplication gates

**Execution Environment**:
- **AWS Machine Type**: c4.large
- **Region**: Single region

**Results**:
- **250 parties**: Execution time of 2 minutes and 30 seconds
- **500 parties**: Execution time of 6 minutes and 15 seconds

Although not extremely fast, these results demonstrate the feasibility of running MPC with a very large number of parties. To the best of our knowledge, this is the largest number of parties run in any MPC experiment to date.

### Acknowledgements
We thank Zuzana Trubini (Beerliová) and Daniel Tschudi for their helpful discussions, and Hila Dahari and Meital Levy for their contributions to the implementation of HyperMPC.

### References
1. T. Araki, J. Furukawa, Y. Lindell, A. Nof, and K. Ohara. "High-Throughput Semi-Honest Secure Three-Party Computation with an Honest Majority." In the 23rd ACM CCS, pages 805–817, 2016.
2. T. Araki, A. Barak, J. Furukawa, T. Lichter, Y. Lindell, A. Nof, K. Ohara, A. Watzman, and O. Weinstein. "Optimized Honest-Majority MPC for Malicious Adversaries – Breaking the 1 Billion-Gate Per Second Barrier." In the 38th IEEE Symposium on Security and Privacy, pages 843–862, 2017.
3. D. Beaver. "Efficient Multiparty Protocols Using Circuit Randomization." In CRYPTO'91, Springer (LNCS 576), pages 420–432, 1991.
4. M. Ben-Or, S. Goldwasser, and A. Wigderson. "Completeness Theorems for Non-Cryptographic Fault-Tolerant Distributed Computation." In the 20th STOC, pages 1–10, 1988.
5. Z. Beerliova-Trubiniova and M. Hirt. "Perfectly-Secure MPC With Linear Communication Complexity." In TCC 2008, Springer (LNCS 4948), pages 213–230, 2008.
6. D. Bogdanov, S. Laur, and J. Willemson. "Sharemind: A Framework for Fast Privacy-Preserving Computations." In the 13th ESORICS, Springer (LNCS 5283), pages 192–206, 2008.
7. G. Bracha. "An Asynchronous (n − 1)/3-Resilient Consensus Protocol." In the 3rd PODC, pages 154–162, 1984.
8. R. Canetti. "Security and Composition of Multiparty Cryptographic Protocols." In the Journal of Cryptology, 13(1):143–202, 2000.
9. R. Canetti. "Universally Composable Security: A New Paradigm for Cryptographic Protocols." In the 42nd FOCS, pages 136–145, 2001.
10. K. Chida, D. Genkin, K. Hamada, D. Ikarashi, R. Kikuchi, Y. Lindell, and A. Nof. "Fast Large-Scale Honest-Majority MPC for Malicious Adversaries." To appear at CRYPTO 2018.
11. I. Damgård, M. Geisler, M. Krøigaard, and J.B. Nielsen. "Asynchronous Multiparty Computation: Theory and Implementation." In PKC 2009, Springer (LNCS 5443), pages 160–179, 2009.
12. I. Damgård, M. Keller, E. Larraia, V. Pastro, P. Scholl, and N.P. Smart. "Practical Covertly Secure MPC for Dishonest Majority – Or: Breaking the SPDZ Limits." In the 18th ESORICS, Springer (LNCS 8134), pages 1–18, 2013.
13. I. Damgård and J.B. Nielsen. "Scalable and Unconditionally Secure Multiparty Computation." In CRYPTO 2007, Springer (LNCS 4622), pages 572–590, 2007.
14. I. Damgård, V. Pastro, N.P. Smart, and S. Zakarias. "Multiparty Computation From Somewhat Homomorphic Encryption." In CRYPTO 2012, Springer (LNCS 7417), pages 643–662, 2012.
15. O. Goldreich, S. Micali, and A. Wigderson. "How to Play Any Mental Game — a Completeness Theorem for Protocols With Honest Majority." In the 19th STOC, pages 218–229, 1987.
16. M. Hirt, U. Maurer, and B. Przydatek. "Efficient Secure Multi-Party Computation." In ASIACRYPT 2000, Springer (LNCS 1976), pages 143–161, 2000.
17. Y. Huang, P. Chapman, and D. Evans. "Secure Computation on Mobile Devices." In IEEE S&P Poster Session, 2011.
18. M. Keller, E. Orsini, and P. Scholl. "MASCOT: Faster Malicious Arithmetic Secure Computation With Oblivious Transfer." In the 23rd ACM CCS, pages 830–842, 2016.
19. E. Kushilevitz, Y. Lindell, and T. Rabin. "Information-Theoretically Secure Protocols and Security Under Composition." In the 38th STOC, pages 109–118, 2006.
20. A. Lapets, E. Dunton, K. Holzinger, F. Jansen, and A. Bestavros. "Web-Based Multi-Party Computation With Application to Anonymous Aggregate Compensation Analytics." Available at: http://www.bu.edu/today/2016/gender-pay-equity/, 2017. See also: http://www.cs.bu.edu/techreports/pdf/2015-009-mpc-compensation.pdf.
21. Y. Lindell and A. Nof. "A Framework for Constructing Fast MPC over Arithmetic Circuits with Malicious Adversaries and an Honest-Majority." In the 24th ACM CCS, pages 259–276, 2017.
22. Y. Lindell and B. Riva. "Blazing Fast 2PC in the Offline/Online Setting With Security for Malicious Adversaries." In the 22nd ACM CCS, pages 579–590, 2015.
23. P. Mohassel, M. Rosulek, and Y. Zhang. "Fast and Secure Three-Party Computation: The Garbled Circuit Approach." In the 22nd ACM CCS, pages 591–602, 2015.
24. J.B. Nielsen, P.S. Nordholt, C. Orlandi, and S.S. Burra. "A New Approach to Practical Active-Secure Two-Party Computation." In CRYPTO 2012, Springer (LNCS 7417), pages 681–700, 2012.
25. J.B. Nielsen, T. Schneider, and R. Trifiletti. "Constant Round Maliciously Secure 2PC With Function-Independent Preprocessing Using LEGO." IACR Cryptology ePrint Archive, 2016.
26. T. Rabin and M. Ben-Or. "Verifiable Secret Sharing and Multiparty Protocols With Honest Majority." In the 21st STOC, pages 73–85, 1989.
27. A. Shamir. "How to Share a Secret." Communications of the ACM, 22:612–613, 1979.
28. X. Wang, A.J. Malozemoff, and J. Katz. "Faster Secure Two-Party Computation in the Single-Execution Setting." In EUROCRYPT 2017, Springer (LNCS 10210), pages 399–424, 2017.
29. WebAssembly. Available at: https://developer.mozilla.org/en-US/docs/WebAssembly.
30. Web Cryptography API. Available at: https://www.w3.org/TR/WebCryptoAPI/.
31. WebSockets. Available at: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API.
32. Web Workers. Available at: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers.
33. A. Yao. "How to Generate and Exchange Secrets." In the 27th FOCS, pages 162–167, 1986.

### Challenges for End-User Implementation
We list the challenges we encountered and resolved for running HyperMPC on various platforms:

#### ARM for Raspberry Pi IoT and Mobile
- **Hardware**: Raspberry Pi 3 with a quad-core 1.2GHz ARM 7a processor, and Android mobiles.
- **Challenges and Solutions**:
  1. **No Intel SIMD**: Existing MPC code heavily uses SIMD instructions from SSE2, SSE4, and AVX2 extensions. We used the open-source library SSE2NEON to bridge the gap and extended it to support missing instructions with good performance.
  2. **Limited Compiler Support**: ARM compilers lack some advanced features of C++14, such as template instantiations. We backported code from C++14 to C++11 and built a cross-compile environment to compile our code simultaneously for all platforms in a Linux build environment.
  3. **Limited Library Support**: Typical MPC code uses gmp, NTL, libmiracl math libraries, and sometimes boost for communication. We created valid builds for these libraries, though not all NTL functionality is available on all platforms (we ported up to NTL 9.7).

We are currently working on ports to energy-constrained IoT environments with even less powerful boards.

#### MPC In-The-Browser
- **Context**: As the browser becomes the new OS for end users, additional features and capabilities are being added, such as access to device (orientation, location), the new Web Cryptography API [30], and WebAssembly [29].
- **Challenges and Solutions**:
  1. **Code Porting**: We ported our C++ code to WebAssembly using Emscripten 1.37 without introducing design changes to the protocol. This method is generic and can be applied to any additional MPC protocol. We also ported the relevant math libraries (NTL, gmp, mpir) and our protocol code. The compiled JavaScript code can execute either in the browser or in a Node.js server.
  2. **Asynchronous Communication**: Emscripten automatically ports C/C++ sockets to the WebSockets protocol [31]. However, most open-source implementations of MPC use synchronous socket communication, which is not applicable in a web browser. We redesigned our protocol code to use a state-machine and asynchronous I/O, with a state-machine per peer.
  3. **SIMD Instructions**: WebAssembly does not currently support SIMD instructions, so these need to be replaced.

See Figure 14 for a screenshot of the protocol of Section 3.1.3 running in a browser.

![Figure 14: The MPC in the browser view.](path_to_image)