2.2.1 API invocation mismatch
Mismatches in an API method invocation are the simplest type of the API incom-
patibility. An app developed against a higher version of the API attempts to call a
method introduced somewhere between its target version and that installed on
the device, and the app crashes when the system cannot ﬁnd the desired method.
minSdkVersiontargetSdkVersionMismatchMethod/CallbackIntroducedDevice SDKVersionmaxSdkVersionMethod/CallbackUpdatedMismatchsuper . o n C r e a t e ( b ) ;
s e t C o n t e n t V i e w ( R . layout . a c t i v i t y _ m a i n ) ;
1 @ O v e r r i d e
2 p r o t e c t e d void o n C r e a t e ( Bundle b ) {
3
4
5
6
7
8
9
10
11
12 }
// } else { ... }
T e x t V i e w text = f i n d V i e w B y I d ( R . id . text ) ;
// if ( Build . VERSION . SDK_INT >= 23) {
text . s e t T e x t C o l o r ( r e s o u r c e s . g e t C o l o r S t a t e L i s t (
R . color . colorAccent , context . g e t T h e m e () ) ) ;
8
Listing 2.1: API Invocation Mismatch
extends P r e f e r e n c e F r a g m e n t {
1 public class C u s t o m P r e f e r e n c e F r a g m e n t
2
3
4
5
6
7
8
9 }
r e i n i t i a l i z e D a t a ( context ) ;
super . o n A t t a c h ( context ) ;
@ O v e r r i d e
public void o n A t t a c h ( Context context ) {
}
Listing 2.2: API Callback Mismatch
It also happens when an app developed against a lower version of the API may
crash on a device running a higher version if a method has been removed.
An illustrative example is shown in Listing 2.1. The app targets Android API
level 28, but its minSdkVersion is set to 21. Assuming that the app was installed
on a device with the speciﬁed minSdkVersion, it will crash on the invocation of
getColorStateList (lines 9-10), which was introduced in API level 23. One common
way to protect against this mismatch is to check the device’s API level at run-time,
as shown in the comment on line 8. This prevents the app from executing the call
on versions where it might be missing. However, developers could easily forget to
add or modify the check when updating an app, leaving the app vulnerable to a
mismatch.
2.2.2 API callback mismatch
The second type of mismatch works in the opposite direction, with calls initiating in
the Android system invoking callback methods overridden in the app. Listing 2.2
9
super . o n C r e a t e ( b ) ;
s e t C o n t e n t V i e w ( R . layout . a c t i v i t y _ m a i n ) ;
// if ( Build . VERSION . SDK_INT >= 23) {
//
// } else {
Intent intent = new Intent (
1 @ O v e r r i d e
2 p r o t e c t e d void o n C r e a t e ( Bundle b ) {
3
4
5
6
7
8
9
10
11
12
13
14 }
15
16 // @ O v e r r i d e
17 // public void o n R e q u e s t P e r m i s s i o n s R e s u l t (...)
18 //
M e d i a S t o r e . A C T I O N _ I M A G E _ C A P T U R E ) ;
s t a r t A c t i v i t y ( intent ) ;
// }
A c t i v i t y C o m p a t . r e q u e s t P e r m i s s i o n s (...) ;
{ ... }
Listing 2.3: Permissions Mismatch for app targeting Android API ≥ 23
shows a snippet adapted from the Simple Solitaire [22] app, where the API callback
onAttach(Context), introduced in API level 23, is overridden. However, the app is
also speciﬁed to run on devices with API level lower than 23, which would not call
that method. Thus, any critical actions (e.g., initialization of an object) performed
by the app in that method would be omitted, possibly leading to run-time crashes.
2.3 Permission-induced Compatibility Issues
With the release of Android 6 (API level 23), the Android permission system is
completely redesigned. If a device is running Android 5.1.1 (API level 22) or below,
or the app’s targetSdkVersion is 22 or lower, the system grants all permissions
at installation time [19]. On the other hand, for devices running Android 6.0
(API level 23) or higher, or when the app’s targetSdkVersion is 23 or higher, the
app must ask the user to grant dangerous permissions at run-time. According to
the Android documentation [5], the new run-time permission system encourages
developers to help users understand why an application requires the requested
dangerous permission.
10
Permission-induced incompatibility can also be divided into two general types
of mismatch: permission request mismatches, where an app targeting API level
23 or higher does not implement the new run-time permission checking; and
permission revocation mismatches, when an app targeting API 22 or earlier runs
on a device with API 23 or later and the user revokes the use of a dangerous
permission used by the app at run-time.
In the ﬁrst scenario, an app is targeting an API level that is 23 or higher. How-
ever, it does not implement the new mechanism to handle requests for dangerous
permissions at run-time, which can cause the app to crash. Listing 2.3 illustrates
this scenario. The app may crash on line 12 where it attempts to use dangerous
permission it did not request. To prevent the mismatch, the app would need to
check the API version and request permissions at run-time (shown as comments
on lines 7-9) and implement onRequestPermissionsResult (line 16). More detailed
examples of the new run-time permissions system can be seen in the Android
documentation [5].
The second scenario is when an app targets API levels 22 or below, but is
installed on a device with Android API 23 or above–a f orward-compatibility issue.
In this scenario, the user must accept all dangerous permissions requested by the
app at install time, or the app will not be installed. However, in Android 6.0 (API
level 23) or higher, the user has the ability to revoke those permissions at any
time. If the user revokes any dangerous permission in the older app’s setting after
installation, the app would crash while trying to use that permission. This behavior
has been recurrently reported in real-world apps. AdAway [1], for example, tries to
access to external storage (such as an SD card) at run-time. If that permission is
revoked, the app crashes when it tries to load data from the storage mechanism.
In the next section, we outline our approach to detecting all three types of
mismatch–the two stemming from API invocations or callbacks and those arising
from the new run-time permissions system.
11
12
Chapter 3
Approach
In this thesis, we present a method for identifying the four types of API and
permission-based mismatches described in Table 2.1. Our approach is realized in
GAINDroid (General Automated Incompatibility Notiﬁer for Android Applica-
tions), a static analysis tool capable of detecting all three types of incompatibility.
As depicted in Figure 3.1, our approach comprises four main components,
generating a list of mismatches from an app APK and a set of Android framework
versions. The Android frameworks passed as input range from API level 2 through
API level 28, collected using sdkmanager, provided in the Android SDK Tools to
view, install, update, and uninstall packages for the Android SDK [21].
The three intermediate steps each produce a distinct artifact used by the fourth:
• API Usage Extraction uses static analysis techniques to identify calls to API
methods, generating a usage report containing the call and data ﬂow graphs
for the app.
• Database Construction builds an API database that includes all the API meth-
ods of the relevant API levels.
• Permission Mapping outputs a map from each dangerous permissions to the
API methods known to use that permission.
13
Figure 3.1: Architectural Overview of GAINDroid
• Mismatch Detection consumes each of those three artifacts and produces a list
of all API call or permissions mismatches detected in the app.
3.1 API Usage Extraction
The API Usage Extraction module generates call graphs with embedded instruction
graphs (for data ﬂow analysis purpose) on each of its nodes a given decompiled
APK ﬁle. This call and data-ﬂow graph provide information about all Android
API methods and callbacks invoked or overridden in the app, as well as any guard
conditions that might enclose such calls. These graphs are going to be further used
by the Mismatch Detector module.
In GAINDroid, this module is built upon Jitana [66], a high-performance
hybrid analysis tool for Android. Even though Jitana works directly on Dalvik
executable (dex) ﬁles such as those contained in an APK, we still need to per-
form APK decompilation to extract information such as needed permissions and
14
supported SDK versions from the decrypted manifest ﬁle. We modiﬁed Jitana
to work based on .dex ﬁles from the Android level 23, a choice that was made
based on the fact that this speciﬁc version was the ﬁrst to introduce instructions to
handle run-time permissions. We also had to modify the static analysis framework
to perform inter-procedural analysis.
3.2 Database Construction
In Database Construction, we built an API database based on the Android APIs
from levels 2 to 28, available via the Android command line tool sdkmanager.
This tool enables us to download any available version of Android ADF. One of
the downloaded ﬁles is android.jar, which contains all the Android APIs from
the downloaded version. It can be opened and saved as a text document, which
will be parsed following the package.class name api name(parameters)return type.
This output represents all the Android APIs for a given Android version, in a
format that GAINDroid can read it, and then build the database. The database
is based on Hash Map, where the Android level is the key and its APIs are the
values. It is important to mention that the only intervention needed to update
GAINDroid to analyze a newer version of API levels, is to download its new
version via sdkmanager, parse it and paste the ﬁle on GAINDroid’s SDK folder.
The main purpose of building this module is to identify all the APIs that exist
within each level, and a key step in our approach is to verify if a given API method
is presented within the app’s minSdkVersion and targetSdkVersion range. Note
that while Google provides the list of APIs for each level, it does not include
hidden APIs that may be called internally by the APIs within the framework. It
is also important to have as many API levels involved because applications may
15
use different platforms as their minSdkVersion and targetSdkVersion. GAINDroid
parses the provided Android framework versions and stores them in a format that
can be statically analyzed by the API Usage Extraction component to generate the
list of APIs in each level and a method call graph for each API method.
3.3 Permissions Mapping
The Permissions Mapping component produces a map of API methods to the
dangerous permissions used by the Android framework during the execution of
that API method. To achieve this, we used PScout [34], an Android permission
mapping tool. We extended the latest ofﬁcial release of PScout to include new
mappings that would reﬂect the more up to date Android API levels. Pscout only
maps until Android level 22. Similar to the Android API database, permission
maps are constructed once and reused in the subsequent analyses. It is important
to mention that PScout mapping (regarding APIs) is already in the format that
GAINDroid can decode (the same as in Database Construction). Some manual
work will be necessary to update the mapping to newer Android versions. It
will consist of verifying Android’s ofﬁcial documentation, identifying new APIs
which can access sensitive data, and updating the current mapping adding the
new information, which should be in the same format used by PScout.
3.4 Mismatch Detection
The Mismatch Detection component analyzes the artifacts produced by API Usage
Extraction, Database Construction and Permission Mapping to identify both API-
related mismatches (API Mismatch Detector) and permissions-related mismatches
(Permissions Mismatch Detector). The Mismatch Detection component ﬁrst checks for
16
API incompatibility issues (described in Section 2.2) using the following process to
detect both API invocation and callback mismatches:
Invocation mismatch: The detector uses Algorithm 1 to detect API invocation
mismatches in each data ﬂow graph in a node in the call graph generated by
the API Usage Extraction module. If the current block represents an if statement
with a guard condition (line 2), the range of supported API levels is ﬁltered by
extracting the minimum and maximum range from the guard and updating the
minimum and maximum supported levels (line 3). If the current block is a call to
an Android API method (line 4), we query the API database at each supported
level to determine whether the method called in the current block is deﬁned in
the database (line 5-6). In case it is not deﬁned, we add the current block to the
set of mismatches (line 7). In the case when the app calls a method which does
not belong to the Android API (line 8), we load and analyze this callee method
(line 9) to check if there are Android API invocations that may lead to run-time
issues. Finally, we reset the minimum and maximum supported API levels to
those deﬁned in the app’s manifest at the end of each the conditional with a guard
condition (lines 10-11). It is important to notice that app.maxSdk represents the
most recent version of the Android API level in our database (currently API level
28).
GAINDroid can reliably detect Invocation mismatches because the API Usage
Extraction component performs path-sensitive, context-aware, and inter-procedural
data-ﬂow analysis, which enables accounting for guard conditions on the sup-
ported versions across methods, missing in the other state-of-the-art techniques,
such as Lint and CiD.
To better understand how our approach identiﬁes API invocation mismatches,
Listing 3.1 presents a code where GAINDroid performs path-sensitivity, context-
17
sensitivity, and inter-procedural analysis. It is crucial for our tool to identify when
the app forks, especially when it is conditioned to guard condition, like in line
14, indicating that the code of block between line 14 and 16 will only be triggered
under speciﬁc API levels. After decoding an instruction, we verify if it contains
a method call, a variable declaration, a condition, etc. This functionality is given
by the static analysis framework Jitana. Knowing that the decoded instruction
is an if statement (line 14), we parse it to extract its condition. GAINDroid
understand its condition as a guard condition because Build.VERSION.SDK INT
was decoded. We continue to parse the condition and extract >= and 23. At
this point, GAINDroid knows that the next instructions to be decoded are only
executed in Android version 23 or higher, and keeps this conditional information
as context. The next decoded instruction is line 15. GAINDroid understands
it as a method called by the app because its package is different from the ones
which are part of Android APIs (e.g., android/content/res/Resources). Because
our approach is also class-loader based and implements inter-procedural analysis,
we can efﬁciently load setText() to analyze it. After loading setText(), GAINDroid
starts analyzing it, but still preserving contexts (e.g., state in the caller method,
current variables and conditions). The decoding of line 2 returns setTextColor(),
getColorStateList(), colorAccent and getTheme(). GAINDroid understands that
setTextColor(), getColorStateList() and getTheme() are Android methods (they
are part of android package) and veriﬁes if they are present in the database for
Android versions from 23 to 28, because we preserve the context that they are
executed (only if Build.VERSION.SDK INT >= 23). In this example, all the APIs
have been found in the API database. Otherwise, GAINDroid would generate
a warning, indicating that an API is not available within the searchable range
of APIS (e.g., from 23 to 28). Once the analysis of setText() is over, GAINDroid
Algorithm 1 Finding API mismatches
1: procedure FindApiMismatches(block, app)
18
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
(cid:46) Input: Block from data ﬂow graph, decompiled APK
if IsGuardStart(block) then
(minLvl,maxLvl) ← GetGuard(block,minLvl,maxLvl)
else if IsApiCall(block) then
for each lvl in (minLvl..maxLvl) do
if ¬apidb.Contains(block,lvl) then
mismatches ← mismatches ∪ {block}
else if IsMethod(block) then
else if IsGuardEnd(block) then
mismatches ← mismatches ∪ FindApiIn(block, minLvl, maxLvl)
(minLvl,maxLvl) ← (app.minSdk,app.maxSdk)
return mismatches
goes back to its original context (line 15), concluding the inter-procedural analysis.
When we decode line 16, which contains a special ﬂag, indicating the end of the
path (end of the if statement), ﬁnishing the analysis of the ﬁrst identiﬁed path.
Line 17 represents another path in the program, an else statement. Because it does
not have any conditions, GAINDroid negates the previous condition, transforming
Build.VERSION.SDK INT >= 23 to Build.VERSION.SDK INT < 23. All the
API calls inside the else statement are going to be veriﬁed if they exist from app’s
minSdkVersion to API level 22. The analysis of this new path works as the same as
described for the if statement, but with a different condition. GAINDroid can also
identify conditions for an else if statement.
Callback mismatch: The detector uses Algorithm 2 to detect API callback mis-
matches in each method within the call graph generated in API Usage Extraction
module. If the method in the call graph overrides an API callback (line 2), we