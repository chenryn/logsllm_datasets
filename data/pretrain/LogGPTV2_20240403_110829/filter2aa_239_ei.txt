图26-7显示了正在运行的应用程序，其中读取了计算器扩展中的元数据，它包含图
像、标题和描述。图26-8显示了激活的计算器扩展。
图26-7
图26-8
26.6 小结
本章介绍了Microsoft Composition的部件、出口、入口和容器，讨论了应用程序在构
建时如何完全独立于其部件，如何动态加载来自不同程序集的部件。
MEF实现方式使用特性或约定来匹配出口和入口，我们介绍了基于约定的新部件注
册技术，它允许在不使用特性的情况下导出部件，这样就可以在无法修改源代码的地方使
用部件来添加特性，还可以创建基于Composition的框架，它不需要框架的用户添加特性
就能导入部件。
我们还学习了部件如何通过惰性方式加载进来，仅在需要时实例化。部件可以提供元
数据，为客户端提供足够的信息，以确定部件是否应实例化。
第27章介绍XML和JSON——这两种数据格式可用于序列化对象，读取和分析这些格
式的数据。
第27章
XML和JSON
本章要点
● XML标准
● XmlReader和XmlWriter
● XmlDocument
● XPathNavigator
● LINQ to XML
● 使用System.Xml.Linq名称空间中的对象
● 使用LINQ查询XML文档
● 创建JSON
● JSON和对象之间的来回转换
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可下载
本章源代码。本章代码分为以下几个主要的示例文件：
● XmlReaderAndWriter
● XmlDocument
● XPathNavigator
● ObjectToXmlSerialization
● ObjectToXmlSerializationWOAttributes
● LinqToXmlSample
● JsonSample
27.1 数据格式
自1996年以来，可扩展标记语言（XML）就是信息技术的重要组成部分。该语言用
来描述数据，它用于配置文件、源代码文档、使用SOAP的Web服务等。近年来，它在某
些方面已被JavaScript Object Notation （JSON）取代（例如，配置文件和在基于REST的
Web服务中传输数据），因为此技术使用的开销更少，很容易在JavaScript中使用。然
而，JSON不能在今天所有使用XML的场景中代替XML。这两个数据格式可以都用
于.NET应用程序，如本章所述。
为了处理XML，可以使用不同的选项。可以阅读完整的文档，使用XmlDocument类
在文档对象模型（DOM）层次结构内导航，也可以使用XmlReader和XmlWriter。使用
XmlReader比较复杂，但可以读取更大的文件。使用XmlDocument把完整的文档加载在内
存中。使用XmlReader可以逐个节点地读取。
使用XML的另一种方式是使用System.Xml.Serialization名称空间，把.NET对象树序列
化为XML，把XML数据反序列化成.NET对象。
查询和过滤XML内容时，可以使用XML标准XPath或使用LINQ to XML。这两种技术
都包含在这一章。LINQ to XML还提供了一种简单的方法来创建XML文档和片段。
  注意： 如果要更多地了解XML，可以参阅Wrox出版社的Prefessional XML
（Wiley出版社，2007年）。
首先简要介绍目前使用的XML标准。
27.1.1 XML
第一个XML示例将使用books.xml文件作为数据源。books.xml和本章的其他代码示例
可以从Wrox网站（www.wrox.com）中找到。books.xml文件是假想书店的书目清单，它包
含类型、作者姓名、价格和ISBN号等信息。
下面是books.xml文件：
        The Autobiography of Benjamin Franklin
        Benjamin
        Franklin
        8.99
        The Confidence Man
        Herman
        Melville
        11.99
        The Gorgias
        Plato
        9.99
下面看看这个XML内容的部分。XML文档应该以XML声明开头，它指定了XML版本
号：
可以把注释放在XML文档的任何标记之外。它们以结束：
完整的文档可以只包含一个根元素（而一个XML片段可以包含多个元素）。在
books.xml文件中，根元素是bookstore：
XML元素可以包含子元素。author元素包含子元素first-name和last-name。first-name元
素本身包含内部文本Benjamin。first-name是author的一个子元素，这也意味着author是
first-name的父元素。first-name和last-name是同级元素：
      Benjamin
      Franklin
XML元素还可以包含特性。book元素包含特性genre、publicationdate和ISBN。特性值
必须放在引号中。
  注意： HTML5规范不需要给特性加上引号。HTML不是XML; HTML的语法
更宽松，而XML比较严格。HTML文档也可以使用XHTML编写，而XHTML使用了
XML语法。
27.1.2 .NET支持的XML标准
W3C（World Wide Web Consortium，万维网联合会）开发了一组标准，它给XML提
供了强大的功能和潜力。如果没有这些标准，XML就不会对开发领域有它应有的影响。
W3C网站（www.w3.org）包含XML的所有有用信息。
.NET Framework支持下述W3C标准：
● XML 1.0（www.w3.org/TR/REC-xml），包括DTD支持
● XML名称空间（www.w3.org/TR/REC-xml-names），包括流级和DOM
● XML架构（www.w3.org/XML/Schema）
● XPath表达式（www.w3.org/TR/xpath）
● XSLT转换（www.w3.org/TR/xslt）
● DOM Level 1 Core（www.w3.org/TR/REC-DOM-Level-1）
● DOM Level 2 Core（www.w3.org/TR/DOM-Level-2-Core）
● SOAP 1.1（www.w3.org/TR/SOAP）
随着Microsoft和社区更新.NET Core, W3C更新所推荐的标准，标准支持的级别也会改
变，因此，必须确保标准和Microsoft提供的支持级别都是最新的。
27.1.3 在框架中使用XML
.NET 
Framework为读写XML提供了许多不同的选项。可以直接使用DOM树处理
XmlDocument、System.Xml名称空间和NuGet包System.Xml.XmlDocument中的类。这很有
效，很容易处理放在内存中的文件。
为了快速读写XML，可以使用XmlReader和XmlWriter类。这些类支持流，能够处理
大型XML文件。这些类也在System.Xml名称空间中，但它们在另一个NuGet包中：
System.Xml.ReaderWriter。
为了使用XPath标准导航和查询XML，可以使用XPathNavigator类。它在NuGet包
System.Xml. XmlDocument的System.Xml XPath名称空间中定义。
自.NET 3.5以来，.NET提供了另一种语法来查询XML:LINQ。尽管LINQ to XML不支
持W3C 
DOM标准，但它提供了一个更容易导航XML树的选项，更容易创建XML文档或
片段。这里需要的名称空间是System.Xml.Linq和NuGet包System.Xml.XDocument。
  注意： LINQ参见第13章。LINQ的具体实现LINQ to XML也在这一章中。
为了序列化和反序列化.NET对象到XML，可以使用XmlSerializer。在.NET Core中，
这里需要NuGet包System.Xml.XmlSerializer与System.Xml.Serialization名称空间。
WCF为XML序列化使用另一种方法：数据协定序列化。尽管XmlSerializer允许区分特
性和元素之间的序列化，但不能使用DataContractSerializer序列化XML。
  注意： WCF参见第44章。
27.1.4 JSON
JavaScript Object Notation （JSON）是近年来出现的，因为它可以直接在JavaScript
中，且与XML相比，它的开销较少。JSON由IETF 
RFC 
7159
（https://tools.ietf.org/html/rfc7159）和ECMA标准404（http://www.ecma-international.org/
publications/files/ECMA-ST/ECMA-404.pdf）定义。
要发送JSON文档，需要一个正式的MIME类型application / JSON。有些框架还使用非
正式的旧MIME类型text / json或text / javascript。
这里使用JSON描述与前面XML文件相同的内容。数组的元素都包含在括号内。在这
个例子中，JSON文件包含多个book对象。花括号定义了对象或字典。键和值用冒号隔
开。键需要放在引号中，值是一个字符串：
    [
      "book": {
        "genre": "autobiography",
        "publicationdate": 1991,
        "ISBN": "1-861003-11-0",
        "title": "The Autobiography of Benjamin Franklin"
        "author": {
        "first-name": "Benjamin",
        "last-name": "Franklin"
        },
        "price": 8.99
      },
      "book": {
        "genre": "novel",
        "publicationdate": 1967,
        "ISBN": "1-861001-57-6",
        "title": "The Confidence Man"
        "author": {
        "first-name": "Herman",
        "last-name": "Melville"
        },
        "price": 11.99
      },
      "book": {
        "genre": "philosophy",
        "publicationdate": 1991,
        "ISBN": "1-861001-57-6",
        "title": "The Georgias"
        "author": {
        "name": "Plato",
        },
        "price": 9.99
      }
    ]
在.NET中，JSON用在许多不同的地方。创建新的DNX项目时，可以看到JSON用作
项目配置文件。它用于Web项目，使用ASP.NET Web API（参见第42章）在客户端上序列
化和反序列化数据，用于数据存储，如NoSQL数据库DocumentDB（可用于Microsoft
Azure）。
使用JSON和.NET，有不同的选项可供使用。一个JSON序列化器是
DataContractJsonSerializer。这个类型派生自基类XmlObjectSerializer，但它与XML并没有
关系。发明数据协定序列化技术时（在.NET 3.0中发明），他们的想法是，从现在起，每
个序列化都是XML（XML在二进制格式中也是可用的）。随着时间的推移，这种假设不
再正确。JSON得到广泛的使用。事实上，JSON添加到层次结构中，通过数据协定序列化
来支持。然而，一个更快、更灵活的实现方式赢得了市场，目前Microsoft支持它，并用于
很多.NET应用程序：Json.NET。因为这个库是.NET应用程序最常用的，所以本章讨论
它。
除了核心JSON标准之外，JSON也在成长。XML已知的特性添加到JSON。下面介绍
JSON的改进示例，并与XML特性相比较。XML模式定义（XSD）描述了XML词汇表，
在撰写本文时，具有类似特性的JSON模式正在开发。对于WCF, XML可以压缩为定制的
二进制格式。也可以用二进制形式序列化JSON，这比文本格式更紧凑。JSON的二进制版
本由BSON描述（Binary JSON）:http://bsonspec.org。通过网络发送SOAP（XML格式）利
用Web服务描述语言（WSDL）来描述服务。对于提供JSON数据的REST服务，也可以使
用描述：Swagger （http://swagger.io）。
  注意： ASP. NET Web API参见第42章。
现在讨论.NET Framework类的具体用法。
27.2 读写流格式的XML
XmlReader类和XmlWriter类提供了读写大型XML文档的快速方式。基于XmlReader的
类提供了一种非常迅速、只向前的只读光标来处理XML数据。因为它是一个流模型，所
以内存要求不是很高。但是，它没有提供基于DOM模型的导航功能和读写功能。基于
XmlWriter的类可以生成遵循W3C的XML 1.0（第4版）的XML文档。
使用XmlReader和XmlWriter的示例代码利用以下依赖项和名称空间：
依赖项：
    NETStandard.Library
    System.Xml.ReaderWriter
名称空间：
    System.Xml
    static System.Console
应用程序允许为所有不同的示例场景指定几个定义为const值的命令行参数，还指定
了要读写的文件名（代码文件XmlReaderAndWriterSample / Program.cs）：
    class Program
    {
      private const string BooksFileName = "books.xml";
      private const string NewBooksFileName = "newbooks.xml";
      private const string ReadTextOption = "-r";
      private const string ReadElementContentOption = "-c";
      private const string ReadElementContentOption2 = "-c2";
      private const string ReadDecimalOption = "-d";
      private const string ReadAttributesOption = "-a";
      private const string WriteOption = "-w";
      // etc
    }
Main方法基于传递的命令行，调用具体的示例方法：
    static void Main(string[] args)
    {
      if (args.Length ! = 1)
      {
        ShowUsage();
        return;
      }
      switch (args[0])
      {
        case ReadTextOption:
        ReadTextNodes();
        break;
        case ReadElementContentOption:
        ReadElementContent();
        break;
        case ReadElementContentOption2:
        ReadElementContent2();
        break;
        case ReadDecimalOption:
        ReadDecimal();
        break;
        case ReadAttributesOption:
        ReadAttributes();
        break;
        default:
        ShowUsage();
        break;
      }
    }
27.2.1 使用XmlReader类读取XML
XmlReader能够阅读大的XML流。它实现为拉模型解析器，把数据拉入请求它的应用
程序。
下面介绍一个非常简单的示例，以读取XML数据，后面将详细介绍XmlReader类。因
为XmlReader是一个抽象类，所以不能直接实例化。而要调用工厂方法Create，返回派生
自XmlReader基类的一个实例。Create方法提供了几个重载版本，其中第一个参数可以提
供文件名、TextReader或Stream。示例代码直接把文件名传递给Books.xml文件。在创建读
取器时，节点可以使用Read方法读取。只要没有节点可用，Read方法就返回false。可以调
试while循环，查看books.xml返回的所有节点类型。只有XmlNodeType.Text类型的节点值
才写入控制台（代码文件XMLReaderAnd-WriterSample / Program.cs）：
    public static void ReadTextNodes()
    {
      using (XmlReader reader = XmlReader.Create(BooksFileName)
)
      {