### Hybrid HELLO Mode for Fault Detection

When a potential fault is detected, the edge node can trigger the routers to enter a hybrid HELLO state. In this state, the routers temporarily reduce their HELLO intervals to detect possible faults more quickly.

#### Activation of Hybrid HELLO Mode

Figure 2 illustrates an example of a hybrid HELLO activation message. In this scenario, EIng detects a possible fault on the paths to E0 via a warning message from E1. Consequently, EIng sends an Activate-Hybrid message using a multicast tree that includes only E0, following the same paths as the heartbeat packet. Upon receiving the Activate-Hybrid message, the node will convert both upstream and downstream links to the hybrid HELLO mode, based on the replication information in the DSMCast header.

The hybrid HELLO mode remains active for `HybHC × HybH` seconds, where:
- `HybHC` is the number of hybrid HELLO messages to send.
- `HybH` is the temporary HELLO interval for the hybrid HELLO packets.

During the hybrid HELLO mode, a link is considered dead if no HELLO messages are received within `HybH × HybD` seconds, where `HybD` (hybrid dead time) is an integer greater than 0. If the links are functioning correctly, both the upstream and downstream nodes will be converted to the hybrid HELLO mode for the specified timeframe. If the Activate-Hybrid message does not propagate fully due to a link or node failure, an error will be detected, and the network routing state will be updated accordingly.

#### Advantages of Hybrid HELLO Mode

The use of the hybrid HELLO mode offers several advantages:
1. **Efficient Resource Utilization**: The link state routing protocol does not need to use the reduced HELLO interval unless in hybrid mode. For most of the network operation, the HELLO interval remains at a larger value, reducing CPU processing time at core routers.
2. **Bandwidth Efficiency**: Although heartbeat messages consume additional bandwidth, they are treated as data packets in the core, causing zero CPU processing overhead. This allows the fast link state interval to be triggered intelligently rather than constantly.

### Full Edge-Based Detection

In the described approach, each edge router attempts to verify all its respective data paths. However, in sparse networks, this greedy approach may be unnecessary due to redundant verifications. A more efficient method involves dividing the verification tasks among the edge nodes, reducing redundancy and increasing the efficiency of heartbeat packets.

The problem can be summarized as follows:
- For a given DS domain (D) with a set of edge nodes (E) and core nodes (C), construct a set of multicast trees (M) rooted at nodes in E, ensuring that each link (X, Y) in D is traversed by heartbeat packets over both (X, Y) and (Y, X).

This mechanism allows edge nodes to verify the correct operation of links in the DS domain without excessive processing of link state messages. Additionally, these packets can gather information about the core node's status (e.g., queue length, drop rate) to assist in QoS management. This approach is beneficial for QoS marking and resource provisioning in a DiffServ network, though it is beyond the scope of this paper and is a topic for future research.

### Simulation Studies

To evaluate the performance of our model, we developed extensions to the ns-2 simulator. We created a generic link state protocol that mimics common features of IS-IS and OSPF, such as HELLO messages and flooding of link state updates. We evaluated four models: slow HELLO, EI-HELLO, fast HELLO, and Packet-over-SONET (for baseline purposes). The characteristics of each model are shown in Table 1.

#### Small Network Performance

We evaluated the models on two network topologies: a small test network and NSFNet. The small network was chosen to isolate the fault detection and recovery times of a single multicast flow, while NSFNet provided a realistic topology for a practical DS domain.

**Small Network Topology**
- A fault was injected at 10 seconds, and Node 0 was monitored for the maximum packet gap (in seconds) until the next data packet was received. This metric measures the responsiveness of the failure detection and recovery mechanisms.
- The average link state messages (ALSC) were also recorded, including heartbeats, updates, HELLO messages, and hybrid mode activations across each link.

**Link Failure**
- Figures 4 and 5 show the recovery time and overhead for different HELLO intervals and heartbeat settings.
- The slow HELLO model has a recovery time of around 30 seconds, which is unacceptable for most flows. The fast HELLO interval offers better re-routing performance but at a higher overhead.
- The EI-HELLO model provides performance close to the fast HELLO interval but with significantly reduced overhead, as the lower HELLO interval is only engaged when a fault is detected.

**Node Failure**
- In the case of a node failure, the EI-HELLO model shows similar trends to the link failure case. However, the complete failure of a node prevents the reception of heartbeat packets, and the red setting (twice the green setting) triggers the hybrid HELLO interval, increasing the re-routing time.

#### Large Network Performance

We analyzed the performance of the IE-HELLO model on the NSFNet topology, which consists of 33 links, 17 edge nodes, and 13 core nodes. The parameters used for the simulations included 38 multicast groups, exponentially distributed faults, and realistic fault rates. The results showed that the EI-HELLO model provides efficient fault detection and recovery with minimal overhead.

### Conclusion

The hybrid HELLO mode and edge-based detection mechanisms offer significant improvements in fault detection and recovery times, while minimizing resource utilization and overhead. These methods are particularly effective in sparse networks and provide a robust solution for maintaining network reliability and QoS.