    {
      // didn't get the lock, do something else
    }
22.6 SpinLock结构
如果基于对象的锁定对象（Monitor）的系统开销由于垃圾回收而过高，就可以使用
SpinLock结构。如果有大量的锁定（例如，列表中的每个节点都有一个锁定），且锁定的
时间总是非常短，SpinLock结构就很有用。应避免使用多个SpinLock结构，也不要调用任
何可能阻塞的内容。
除了体系结构上的区别之外，SpinLock结构的用法非常类似于Monitor类。使用
Enter（）或TryEnter（）方法获得锁定，使用Exit（）方法释放锁定。SpinLock结构还提
供了属性IsHeld和IsHeldByCurrentThread，指定它当前是否是锁定的。
  注意： 传送SpinLock实例时要小心。因为SpinLock定义为结构，把一个变量
赋予另一个变量会创建一个副本。总是通过引用传送SpinLock实例。
22.7 WaitHandle基类
WaitHandle是一个抽象基类，用于等待一个信号的设置。可以等待不同的信号，因为
WaitHandle是一个基类，可以从中派生一些类。
等待句柄也由简单的异步委托使用，TakesAWhileDelegate按如下代码所示定义（代
码文件AsyncDelegate/ Program.cs）：
    public delegate int TakesAWhileDelegate(int x, int ms);
异步委托的BeginInvoke（）方法返回一个实现了IAsycResult接口的对象。使用
IAsycResult接口，可以用AsycWaitHandle属性访问WaitHandle基类。在调用WaitOne（）
方法或者超时发生时，线程会等待接收一个与等待句柄相关的信号。调用EndInvoke方
法，线程最终会阻塞，直到得到结果为止：
    static void Main()
    {
      TakesAWhileDelegate d1 = TakesAWhile;
      IAsyncResult ar = d1.BeginInvoke(1, 3000, null, null);
      while (true)
      {
        Write(".");
        if (ar.AsyncWaitHandle.WaitOne(50))
        {
        WriteLine("Can get the result now");
        break;
        }
      }
      int result = d1.EndInvoke(ar);
      WriteLine($"result: {result}");
    }
    public static int TakesAWhile(int x, int ms)
    {
      Task.Delay(ms).Wait();
      return 42;
    }
  注意： 委托参见第9章。
运行程序，结果如下：
    .......................................
    ...Can get the result now
    result: 42
使用WaitHandle基类可以等待一个信号的出现（WaitOne（）方法）、等待必须发出
信号的多个对象（WaitAll（）方法），或者等待多个对象中的一个（WaitAny（）方
法）。WaitAll（）和WaitAny（）是WaitHandle类的静态方法，接收一个WaitHandle参数
数组。
WaitHandle基类有一个SafeWaitHandle属性，其中可以将一个本机句柄赋予一个操作
系统资源，并等待该句柄。例如，可以指定一个SafeFileHandle等待文件I/O操作的完成。
因为Mutex、EventWaitHandle和Semaphore类派生自WaitHandle基类，所以可以在等
待时使用它们。
22.8 Mutex类
Mutex（mutual exclusion，互斥）是.NET Framework中提供跨多个进程同步访问的一
个类。它非常类似于Monitor类，因为它们都只有一个线程能拥有锁定。只有一个线程能
获得互斥锁定，访问受互斥保护的同步代码区域。
在Mutex类的构造函数中，可以指定互斥是否最初应由主调线程拥有，定义互斥的名
称，获得互斥是否已存在的信息。在下面的示例代码中，第3个参数定义为输出参数，接
收一个表示互斥是否为新建的布尔值。如果返回的值是false，就表示互斥已经定义。互斥
可以在另一个进程中定义，因为操作系统能够识别有名称的互斥，它由不同的进程共享。
如果没有给互斥指定名称，互斥就是未命名的，不在不同的进程之间共享。
    bool createdNew;
    var mutex = new Mutex(false, "ProCSharpMutex", out createdNew);
要打开已有的互斥，还可以使用Mutex.OpenExisting（）方法，它不需要用构造函数
创建互斥时需要的相同.NET权限。
由于Mutex类派生自基类WaitHandle，因此可以利用WaitOne（）方法获得互斥锁
定，在该过程中成为该互斥的拥有者。通过调用ReleaseMutex（）方法，即可释放互斥。
    if (mutex.WaitOne()
)
    {
      try
      {
        // synchronized region
      }
      finally
      {
        mutex.ReleaseMutex();
      }
    }
    else
    {
      // some problem happened while waiting
    }
由于系统能识别有名称的互斥，因此可以使用它禁止应用程序启动两次。在下面的
WPF应用程序中，调用了Mutex对象的构造函数。接着，验证名称为
SingletonWinAppMutex的互斥是否存在。如果存在，应用程序就退出（代码文件
SingletonWPF/App.xaml.cs）。
    public partial class App : Application
    {
      protected override void OnStartup(StartupEventArgs e)
      {
        bool mutexCreated;
        var mutex = new Mutex(false, "SingletonWinAppMutex", out mutexCreated);
        if (! mutexCreated)
        {
        MessageBox.Show("You can only start one instance of the application");
        Application.Current.Shutdown();
        }
        base.OnStartup(e);
      }
    }
22.9 Semaphore类
信号量非常类似于互斥，其区别是，信号量可以同时由多个线程使用。信号量是一种
计数的互斥锁定。使用信号量，可以定义允许同时访问受旗语锁定保护的资源的线程个
数。如果需要限制可以访问可用资源的线程数，信号量就很有用。例如，如果系统有3个
物理端口可用，就允许3个线程同时访问I/O端口，但第4个线程需要等待前3个线程中的一
个释放资源。
.NET Core 1.0为信号量功能提供了两个类Semaphore和SemaphoreSlim。Semaphore类
可以命名，使用系统范围内的资源，允许在不同进程之间同步。SemaphoreSlim类是对较
短等待时间进行了优化的轻型版本。
在下面的示例应用程序中，在Main（）方法中创建了6个任务和一个计数为3的信号
量。在Semaphore类的构造函数中，定义了锁定个数的计数，它可以用信号量（第二个参
数）来获得，还定义了最初释放的锁定数（第一个参数）。如果第一个参数的值小于第二
个参数，它们的差就是已经分配线程的计数值。与互斥一样，也可以给信号量指定名称，
使之在不同的进程之间共享。这里定义信号量时没有指定名称，所以它只能在这个进程中
使用。在创建了SemaphoreSlim对象之后，启动6个任务，它们都获得了相同的信号量（代
码文件SemaphoreSample/Program.cs）。
    class Program
    {
      static void Main()
      {
        int taskCount = 6;
        int semaphoreCount = 3;
        var semaphore = new SemaphoreSlim(semaphoreCount, semaphoreCount);
        var tasks = new Task[taskCount];
        for (int i = 0; i  TaskMain(semaphore));
        }
        Task.WaitAll(tasks);
        WriteLine("All tasks finished");
      }
      // etc
在任务的主方法TaskMain（）中，任务利用Wait（）方法锁定信号量。信号量的计数
是3，所以有3个任务可以获得锁定。第4个任务必须等待，这里还定义了最长的等待时间
为600毫秒。如果在该等待时间过后未能获得锁定，任务就把一条消息写入控制台，在循
环中继续等待。只要获得了锁定，任务就把一条消息写入控制台，睡眠一段时间，然后解
除锁定。在解除锁定时，在任何情况下一定要解除资源的锁定，这一点很重要。这就是在
finally处理程序中调用SemaphoreSlim类的Release（）方法的原因。
      // etc
      public static void TaskMain(SemaphoreSlim semaphore)
      {
        bool isCompleted = false;
        while (! isCompleted)
        {
          if (semaphore.Wait(600))
          {
          try
          {
            WriteLine($"Task {Task.CurrentId} locks the semaphore");
            Task.Delay(2000).Wait();
          }
          finally
          {
            WriteLine($"Task {Task.CurrentId} releases the semaphore");
            semaphore.Release();
            isCompleted = true;
          }
          }
          else
          {
          WriteLine($"Timeout for task {Task.CurrentId}; wait again");
          }
        }
      }
    }
运行应用程序，可以看到有4个线程很快被锁定。ID为7、8和9的线程需要等待。该
等待会重复进行，直到其中一个被锁定的线程解除了信号量。
    Task 4 locks the semaphore
    Task 5 locks the semaphore
    Task 6 locks the semaphore
    Timeout for task 7; wait again
    Timeout for task 7; wait again
    Timeout for task 8; wait again
    Timeout for task 7; wait again
    Timeout for task 8; wait again
    Timeout for task 7; wait again
    Timeout for task 9; wait again
    Timeout for task 8; wait again
    Task 5 releases the semaphore
    Task 7 locks the semaphore
    Task 6 releases the semaphore
    Task 4 releases the semaphore
    Task 8 locks the semaphore
    Task 9 locks the semaphore
    Task 8 releases the semaphore
    Task 7 releases the semaphore
    Task 9 releases the semaphore
    All tasks finished
22.10 Events类
与互斥和信号量对象一样，事件也是一个系统范围内的资源同步方法。为了从托管代
码中使用系统事件，.NET 
Framework在System.Threading名称空间中提供了
ManualResetEvent、AutoResetEvent、ManualResetEventSlim和CountdownEvent类。
  注意： 第9章介绍了C#中的event关键字，它与System.Threading名称空间中的
event类没有关系。event关键字基于委托，而上述两个event类是.NET封装器，用于系统
范围内的本机事件资源的同步。
可以使用事件通知其他任务：这里有一些数据，并完成了一些操作等。事件可以发信
号，也可以不发信号。使用前面介绍的WaitHandle类，任务可以等待处于发信号状态的事
件。
调用Set（）方法，即可向ManualResetEventSlim发信号。调用Reset（）方法，可以使
之返回不发信号的状态。如果多个线程等待向一个事件发信号，并调用了Set（）方法，
就释放所有等待的线程。另外，如果一个线程刚刚调用了WaitOne（）方法，但事件已经
发出信号，等待的线程就可以继续等待。
也通过调用Set（）方法向AutoResetEvent发信号。也可以使用Reset（）方法使之返
回不发信号的状态。但是，如果一个线程在等待自动重置的事件发信号，当第一个线程的
等待状态结束时，该事件会自动变为不发信号的状态。这样，如果多个线程在等待向事件
发信号，就只有一个线程结束其等待状态，它不是等待时间最长的线程，而是优先级最高
的线程。
为了说明ManualResetEventSlim类的事件，下面的Calculator类定义了Calculation（）
方法，这是任务的入口点。在这个方法中，该任务接收用于计算的输入数据，将结果写入
变量result，该变量可以通过Result属性来访问。只要完成了计算（在随机的一段时间过
后），就调用ManualResetEventSlim类的Set方法，向事件发信号（代码文件
EventSample/Calculator.cs）。
      public class Calculator
      {
        private ManualResetEventSlim _mEvent;
        public int Result { get; private set; }
        public Calculator(ManualResetEventSlim ev)
        {
        _mEvent = ev;
        }
        public void Calculation(int x, int y)
        {
        WriteLine($"Task {Task.CurrentId} starts calculation");
        Task.Delay(new Random().Next(3000)).Wait();
        Result = x + y;
        // signal the event-completed!
        WriteLine($"Task {Task.CurrentId} is ready");
        _mEvent.Set();
        }
      }
程序的Main（）方法定义了包含4个ManualResetEventSlim对象的数组和包含4个
Calculator对象的数组。每个Calculator在构造函数中用一个ManualResetEventSlim对象初始
化，这样每个任务在完成时都有自己的事件对象来发信号。现在使用Task类，让不同的任
务执行计算任务（代码文件EventSample/Program.cs）。
    class Program
    {
      static void Main()
      {
        const int taskCount = 4;
        var mEvents = new ManualResetEventSlim[taskCount];
        var waitHandles = new WaitHandle[taskCount];
        var calcs = new Calculator[taskCount];
        for (int i = 0; i  calcs[i1].Calculation(i1 + 1, i1 + 3));
        }
        //...
WaitHandle类现在用于等待数组中的任意一个事件。WaitAny（）方法等待向任意一
个事件发信号。与ManualResetEvent对象不同，ManualResetEventSlim对象不派生自
WaitHandle类。因此有一个WaitHandle对象的集合，它在ManualResetEventSlim类的
WaitHandle属性中填充。从WaitAny（）方法返回的index值匹配传递给WaitAny（）方法
的事件数组的索引，以提供发信号的事件的相关信息，使用该索引可以从这个事件中读取
结果。
        for (int i = 0; i < taskCount; i++)
        {
        int index = WaitHandle.WaitAny(waitHandles);
        if (index == WaitHandle.WaitTimeout)
        {
          WriteLine("Timeout! ! ");
        }
        else
        {
          mEvents[index].Reset();
          WriteLine($"finished task for {index}, result: {calcs[index].Result}");
        }
        }
      }
    }
启动应用程序，可以看到任务在进行计算，设置事件，以通知主线程，它可以读取结
果了。在任意时间，依据是调试版本还是发布版本和硬件的不同，会看到按照不同的顺
序，有不同数量的线程在执行任务。
    Task 4 starts calculation
    Task 5 starts calculation
    Task 6 starts calculation
    Task 7 starts calculation
    Task 7 is ready