$at, $zero 
.text:0000011C           
lui      
$v0, (unk_230 >> 16) 
.text:00000120           
addiu    
$a0, $v0, (unk_230 & 0xFFFF) 
.text:00000124           
lw       
$v0, (puts & 0xFFFF)($gp) 
.text:00000128           
or       
$at, $zero 
.text:0000012C           
move     
$t9, $v0 
.text:00000130           
jalr     
$t9 
.text:00000134           
or       
$at, $zero 
.text:00000138           
lw       
$gp, 0x20+var_10($fp) 
.text:0000013C 
.text:0000013C loc_13C:           
# CODE XREF: f_unsigned+34 
.text:0000013C           
lw       
$v1, 0x20+arg_0($fp) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
115 
.text:00000140           
lw       
$v0, 0x20+arg_4($fp) 
.text:00000144           
or       
$at, $zero 
.text:00000148           
bne      
$v1, $v0, loc_170 
.text:0000014C           
or       
$at, $zero 
.text:00000150           
lui      
$v0, (aAB >> 16)  # "a==b" 
.text:00000154           
addiu    
$a0, $v0, (aAB & 0xFFFF)  # "a==b" 
.text:00000158           
lw       
$v0, (puts & 0xFFFF)($gp) 
.text:0000015C           
or       
$at, $zero 
.text:00000160           
move     
$t9, $v0 
.text:00000164           
jalr     
$t9 
.text:00000168           
or       
$at, $zero 
.text:0000016C           
lw       
$gp, 0x20+var_10($fp) 
.text:00000170           
.text:00000170 loc_170:           
# CODE XREF: f_unsigned+68 
.text:00000170           
lw       
$v1, 0x20+arg_0($fp) 
.text:00000174           
lw       
$v0, 0x20+arg_4($fp) 
.text:00000178           
or       
$at, $zero 
.text:0000017C           
sltu     
$v0, $v1, $v0 
.text:00000180           
beqz     
$v0, loc_1A8 
.text:00000184           
or       
$at, $zero 
.text:00000188           
lui      
$v0, (aAB_0 >> 16)  # "a<b" 
.text:0000018C           
addiu    
$a0, $v0, (aAB_0 & 0xFFFF) # "a<b" 
.text:00000190           
lw       
$v0, (puts & 0xFFFF)($gp) 
.text:00000194           
or       
$at, $zero 
.text:00000198           
move     
$t9, $v0 
.text:0000019C           
jalr     
$t9 
.text:000001A0           
or       
$at, $zero 
.text:000001A4           
lw       
$gp, 0x20+var_10($fp) 
.text:000001A8 
.text:000001A8 loc_1A8:           
# CODE XREF: f_unsigned+A0 
.text:000001A8           
move     
$sp, $fp 
.text:000001AC           
lw       
$ra, 0x20+var_4($sp) 
.text:000001B0           
lw       
$fp, 0x20+var_8($sp) 
.text:000001B4           
addiu    
$sp, 0x20 
.text:000001B8           
jr       
$ra 
.text:000001BC           
or       
$at, $zero 
.text:000001BC  # End of function f_unsigned 
12.2 计算绝对值 
本节将围绕以下程序进行演示： 
int my_abs (int i) 
{ 
         if (i<0) 
                   return -i; 
         else 
                   return i; 
}; 
12.2.1 Optimizing MSVC 
上述程序的编译结果如下。 
指令清单 12.13  Optimizing MSVC 2012 x64 
i$ = 8 
my_abs   PROC 
; ECX = input 
          test    ecx, ecx 
; check for sign of input value 
; skip NEG instruction if sign is positive 
         jns     SHORT $LN2@my_abs 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
116 
逆向工程权威指南（上册） 
; negate value 
         neg     ecx 
$LN2@my_abs: 
; prepare result in EAX: 
        mov    eax,   ecx 
         ret     0 
my_abs  ENDP 
GCC 4.9 的编译结果几乎相同。 
12.2.2 Optimizing Keil 6/2013: Thumb mode 
指令清单 12.14  Optimizing Keil 6/2013：Thumb mode 
my_abs PROC 
  CMP       r0,#0 
; is input value equal to zero or greater than zero? 
; skip RSBS instruction then 
  BGE       |L0.6| 
; subtract input value from 0: 
  RSBS      r0,r0,#0 
|L0.6| 
  BX        lr  
  ENDP 
ARM 平台没有负数运算指令，所以 Keil 编译器使用了“零减去数值”的减法运算指令“Reverse Subtract”
（减数和被减数位置对调的减法运算），同样达到了替换符号的效果。 
12.2.3 Optimizing Keil 6/2013: ARM mode 
因为 ARM 模式的指令集存在条件执行指令，所以开启优化选项后可得到如下指令。 
指令清单 12.15  Optimizing Keil 6/2013：ARM mode 
my_abs PROC 
  CMP  
 r0,#0 
; execute "Reverse Subtract" instruction only if input value is less than 0: 
  RSBLT 
 r0,r0,#0 
  BX  
 lr  
  ENDP 
即使没有使用条件转移指令（请参见 33.1 节），它也实现相同的功能。 
12.2.4 Non-optimizng GCC 4.9 (ARM64) 
ARM64 的指令集存在求负运算的 NEG 指令。 
指令清单 12.16  Optimizing GCC 4.9 (ARM64) 
my_abs: 
  sub      sp, sp, #16 
  str      w0, [sp,12] 
  ldr      w0, [sp,12] 
; compare input value with contents of WZR register 
; (which always holds zero) 
  cmp      w0, wzr 
  bge      .L2 
  ldr      w0, [sp,12] 
  neg      w0, w0 
  b        .L3  
.L2: 
  ldr      w0, [sp,12] 
.L3: 
  add      sp, sp, 16 
  ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
117 
12.2.5  MIPS 
指令清单 12.17  Optimizing GCC 4.4.5 (IDA) 
my_abs: 
; jump if $a0<0: 
                   bltz     $a0, locret_10 
; just return input value ($a0) in $v0: 
                   move     $v0, $a0 
                   jr       $ra 
                   or       $at, $zero ; branch delay slot, NOP 
locret_10: 
; negate input value and store it in $v0: 
                   jr       $ra 
; this is pseudoinstruction. in fact, this is "subu $v0,$zero,$a0" ($v0=0-$a0) 
                   negu     $v0, $a0 
这里出现了新指令BLTZ（Branch if Less Than Zero），以及伪指令NEGU。NEGU 指令计算零减去操作数的差。
SUBU 和NEGU 指令中的后缀U 代表它的操作数是无符号型数据，并且在整数溢出的情况下不会触发异常处理机制。 
12.2.6 不使用转移指令 
不使用转移指令同样可以计算绝对值。本书的第 45 章有详细说明。 
12.3  条件运算符 
C/C++都支持条件运算符： 
表达式? 表达式: 表达式 
例如： 
const char* f (int a) 
{ 
  return a==10 ? "it is ten" : "it is not ten"; 
}; 
12.3.1  x86 
在编译含有条件运算符的语句时，早期无优化功能的编译器会以编译“if/else”语句的方法进行处理。 
指令清单 12.18  Non-optimizing MSVC 2008 
$SG746   DB       'it is ten', 00H 
$SG747   DB       'it is not ten', 00H 
tv65 = -4 ; this will be used as a temporary variable 
_a$ = 8 
_f       PROC 
         push     ebp 
         mov      ebp, esp 
         push     ecx 
; compare input value with 10 
         cmp      DWORD PTR _a$[ebp], 10 
; jump to $LN3@f if not equal 
         jne      SHORT $LN3@f 
; store pointer to the string into temporary variable: 
         mov      DWORD PTR tv65[ebp], OFFSET $SG746 ; 'it is ten' 
; jump to exit 
         jmp      SHORT $LN4@f 
$LN3@f: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
118 
逆向工程权威指南（上册） 
; store pointer to the string into temporary variable: 
         mov      DWORD PTR tv65[ebp], OFFSET $SG747 ; 'it is not ten' 
$LN4@f: 
; this is exit. copy pointer to the string from temporary variable to EAX.  
         mov      eax, DWORD PTR tv65[ebp] 
         mov      esp, ebp 
         pop      ebp 
         ret      0 
_f      ENDP 
指令清单 12.19  Optimizing MSVC 2008 
$SG792  DB        'it is ten', 00H 
$SG793  DB        'it is not ten', 00H 
_a$ = 8 ; size = 4 
_f       PROC 
; compare input value with 10 
  cmp      DWORD PTR _a$[esp-4], 10 
  mov      eax, OFFSET $SG792 ; 'it is ten' 
; jump to $LN4@f if equal 
  je       SHORT $LN4@f 
  mov      eax, OFFSET $SG793 ; 'it is not ten' 
$LN4@f: 
  ret      0  
_f  
  ENDP 
新编译器生成的程序更为简洁。 
指令清单 12.20  Optimizing MSVC 2012 x64 
$SG1355 DB       'it is ten', 00H 
$SG1356 DB       'it is not ten', 00H 
a$       = 8 
f        PROC 
; load pointers to the both strings 
  lea      rdx, OFFSET FLAT:$SG1355 ; 'it is ten' 
  lea      rax, OFFSET FLAT:$SG1356 ; 'it is not ten' 
; compare input value with 10 
  cmp      ecx, 10 
; if equal, copy value from RDX ("it is ten") 
; if not, do nothing. pointer to the string "it is not ten" is still in RAX as for now. 
  cmove   rax, rdx 
  ret     0  
f        ENDP 
启用优化选项后，GCC 4.8 生成的 x86 指令同样使用了 CMOVcc 指令。相比之下，在关闭优化功能的
情况下，GCC 4.8 用条件转移指令编译条件操作符。 
12.3.2 ARM 
启用优化功能之后，Keil 生成的 ARM 代码会应用条件运行指令 ADRcc。 
指令清单 12.21  Optimizing Keil 6/2013 (ARM mode) 
f PROC 
; compare input value with 10 
  CMP       r0, #0xa 
; if comparison result is EQual, copy pointer to the "it is ten" string into R0 
  ADREQ     r0,|L0.16| ; "it is ten" 
; if comparison result is Not Equal, copy pointer to the "it is not ten" string into R0 
  ADRNE     r0,|L0.28| ; "it is not ten" 
  BX        lr 
  ENDP 