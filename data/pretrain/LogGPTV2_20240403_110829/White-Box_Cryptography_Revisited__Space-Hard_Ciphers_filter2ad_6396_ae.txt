### Impossible Differential Cryptanalysis

According to the results by Suzaki et al. in [39], after 19 rounds, there is no useful integral distinguisher. We also considered other attacks and concluded that none of them performs significantly better than the previously mentioned attacks.

### 6.4 Recommended Number of Rounds

For SPACE, we recommend selecting the number of rounds such that the basic white-box compression attack (Section 6.2.2) covers at most half of the rounds at the (T/4, 128)-space hardness level, and the best black-box property (Section 6.3) also covers at most half of the rounds. For the instantiation of 4-SPACE, this guideline suggests 512 rounds. A less conservative approach to space hardness may be acceptable for many users, resulting in a significantly lower number of rounds.

For the recommended number of rounds \( R = 512 \), the claimed white-box security for 4-SPACE is (T/4, 128)-space hardness, as detailed in Table 5. The claimed black-box security is equivalent to that of a 128-bit block cipher with a 128-bit key. We do not claim any security against combined black- and white-box attackers.

### 6.2 Security in the White Box

#### 6.2.1 Key Extraction

For SPACE, it is difficult to extract the key from the table for an F-function as long as the underlying block cipher \( E_K \) is secure against key recovery. In 4-SPACE-(R)-24, -16, and -8, the attacker can directly observe \( K_4 \), \((K_3, K_4)\), and \((K_2, K_3, K_4)\) from the white-box implementation. However, \((K_3, K_2, K_1)\), \((K_2, K_1)\), and \( K_1 \) are hard to extract, respectively.

#### 6.2.2 Code Lifting

Since the attacker cannot compute the F-function without knowing its key \( K_i \), it is infeasible to find a compact representation of any variant, as at least one F-function is implemented by table look-ups.

In a white-box compression attack, if the attacker isolates \( i \) entries of the largest table, in each implementation variant, the following holds: 

- **4-SPACE-(512)-8**: 128 L1-TL + 384 BC
- **4-SPACE-(512)-16**: 128 (L1-TL + L3-TL) + 3.84 KB, 918 KB
- **4-SPACE-(512)-24**: 256 BC + 128 (L1-TL + L3-TL) + 218 MB
- **4-SPACE-(512)-32**: 128 RAM-TL + 128 BC + 128 (L1-TL + L3-TL) + 51.5 GB, 128 (RAM-TL + HDD-TL)

### 6.5 Implementation Issues

Table 5 demonstrates the performance and table sizes for each of the four implementation variants of 4-SPACE. The sizes of 4-SPACE-(R)-8, -16, -24, and -32 are suited for L1/L2 cache, L3 cache, RAM, and HDD, respectively. All implementation variants offer exactly the same functionality.

Assuming a table access to L1/L2 cache, L3 cache, RAM, and HDD costs 5, 30, 100, and 1000 cycles, respectively, and that an AES-128 encryption with AES-NI takes 16 cycles (in a parallel mode of operation), the performance of 4-SPACE-(512)-8, -16, -24, and -32 is approximately 424, 536, 1208, and 9080 cycles per byte, respectively.

In the black box, implementations without tables are possible by decomposing the tables. The performance is then estimated by the number of block function calls. A combination of F-functions implemented with table look-ups and AES-NI is beneficial.

### 7. Conclusions

We have introduced a new direction for white-box cryptography by proposing that white-box security can rely on key recovery problems for well-analyzed block ciphers in the standard black-box setting. We have also proposed the new security notion of (M, Z)-space hardness. This enables us to demonstrate security against key extraction, table decomposition, and code lifting attacks in the white-box environment, which have been the crucial limitations of published techniques.

As an example, we designed the family of block ciphers SPACE, which includes four variants with different but fixed code sizes and a variant N-SPACE with variable code sizes while keeping the cipher itself unchanged.

### Acknowledgments

We would like to thank Bart Preneel for his highly valuable and constructive feedback, which helped us improve the technical and editorial quality of the paper. Additionally, we thank the anonymous referees for their insightful comments, particularly the referee who proposed the secret-sharing based construction described in Section 5.8.

### 8. References

[References are listed as provided, with minor formatting adjustments for clarity and consistency.]

This optimized version aims to make the text more coherent and professional, ensuring that the information is presented clearly and logically.