title:Expressive Declassification Policies and Modular Static Enforcement
author:Anindya Banerjee and
David A. Naumann and
Stan Rosenberg
Expressive Declassiﬁcation Policies and Modular Static Enforcement
Anindya Banerjee
David A. Naumann
Stan Rosenberg
Kansas State University and Microsoft Research
Stevens Institute of Technology
Manhattan, KS and Redmond, WA, USA
Hoboken, NJ, USA
Email: PI:EMAIL
Email: {naumann, srosenbe}@cs.stevens.edu
Abstract
This paper provides a way to specify expressive
declassiﬁcation policies, in particular, when, what, and
where policies that include conditions under which
downgrading is allowed. Secondly, an end-to-end se-
mantic property is introduced, based on a model that
allows observations of intermediate low states as well
as termination. An attacker’s knowledge only increases
at explicit declassiﬁcation steps, and within limits
set by policy. Thirdly, static enforcement is provided
by combining type-checking with program veriﬁcation
techniques applied to the small subprograms that carry
out declassiﬁcations. Enforcement is proved sound for
a simple programming language and the extension to
object-oriented programs is described.
1. Introduction
Protection of information conﬁdentiality and in-
tegrity in computer systems has long been approached
in three ways. Cryptography provides mechanisms that
can be used to hide information in data that is openly
accessible and to authenticate information in data that
is susceptible to tampering. But it is usually impractical
to process data in encrypted form. Access controls
regulate actions by which data is manipulated. Access
control mechanisms can often be implemented efﬁ-
ciently and access policies can express security goals
ranging from low level process separation to high level
application-speciﬁcs. But conﬁdentiality and integrity
requirements often encompass indirect manipulation of
information in addition to direct access. Information
ﬂow controls address the manipulation of information
once data has been accessed and resides in memory in
The ﬁrst author was partially supported by NSF awards CNS-
0627748, CCR-0296182, ITR-0326577.
The second and third authors were partially supported by NSF
awards CNS-0627338, CRI-0708330, CCF-0429894.
plaintext form. Research on information ﬂow attempts
to specify a full range of the conﬁdentiality and in-
tegrity goals. It also seeks ways to check system de-
signs and implementations for conformance with ﬂow
policies, to complement and complete the assurance
provided by access control and cryptography.
This paper advances the state of the art in infor-
mation ﬂow control by specifying a conﬁdentiality
property that gives a strong guarantee akin to non-
interference while allowing constrained downgrading
of secrets under conditions that are explicit in policy
speciﬁcations. It advances the state of the art in en-
forcement by combining type checking with localized
formal veriﬁcation in a practical way that provably
enforces the security property.
Consider the canonical case where data channels
are labelled with one of the levels high (secret) or
low. Information ﬂow control rests on the mandatory
access assumption: a principal has direct access to a
high channel only if the principal is authorized for high
channels. (All can read the code being executed, but
none can alter it, in this paper.) For conﬁdentiality,
noninterference says low observations reveal nothing
about high inputs. But notions of observation range
from input-output behavior at the level of abstraction
of source code to covert channels like battery power
and real time. Absence of ﬂows via covert channels is
difﬁcult to achieve, much less to verify, and in many
scenarios weaker attack models are suitable. Our attack
model ignores covert channels.
Data and control dependencies can be tracked dy-
namically, by label passing, but there is cost in perfor-
mance, label creep, and risk of runtime security excep-
tions. Static veriﬁcation of information ﬂow properties
is attractive, especially for high assurance of system
infrastructure and for integrating components (e.g.,
web services) from disparate sources.
Though long studied, static veriﬁcation is used only
rarely, in part due to high potential cost during software
development. Also, security goals must be precisely
formalized —and noninterference is too strong to ad-
mit certain intended ﬂows, e.g., in password checking,
data aggregation, encryption, release of secrets upon
successful protocol completion or ﬁnancial transaction,
etc. As discussed in a recent survey [29],
it has
proved quite difﬁcult to ﬁnd adequate reﬁnements of
noninterference, even to cater for very limited forms
of declassiﬁcation.
The ﬁrst contribution of this paper is a way to
specify a wide range of declassiﬁcation policies, by
novel use of existing forms of security typing and
program speciﬁcation, inspired by Chong and My-
ers [11] who proposed conﬁdentiality policies that
include conditions under which declassiﬁcation is al-
lowed. The second contribution is an end-to-end se-
mantic property extending the gradual release property
recently introduced by Askarov and Sabelfeld [4]. Ours
encompasses conditioned policies like those of Chong
and Myers [11] but with stronger security guarantees.1
Brieﬂy, the security property pertains to attackers that
know the code, have unbounded deductive power, and
see intermediate low states. The property says that
low observers’ knowledge only increases at explicit
declassiﬁcation steps, which reveal limited informa-
tion and happen only under speciﬁed conditions. The
third contribution is a practical means of enforce-
ment that combines the simple type-checking of [4]
with veriﬁcation of program assertions and relational
program veriﬁcation [1], [8]. Relational veriﬁcation
is applied only to the small subprograms that carry
out declassiﬁcations. Type checking is compositional.
Static veriﬁcation for assertions can be modular at the
granularity of procedures: a procedure body is checked
using only the speciﬁcations for procedures it calls
(e.g., [7]). We prove soundness of the enforcement
r´egime, relative to a sound veriﬁer and typechecker.
It is not our intention to propose a concrete policy
language. The ideas are formalized here using only
a simple programming language, leaving aside issues
such as combining conﬁdentiality with integrity, sepa-
rating policy from code (but see Sect. 4), and tradeoffs
between what is encoded in the lattice of security levels
versus what is encoded in state-dependent policy. The
exposition and technical development are designed to
support a rigorous soundness proof and to highlight
the following beneﬁts of the approach:
(a) Policies are expressed using two commonplace
means: ordinary labeling of variables with security
levels, together with ordinary program assertions, ex-
1. Also stronger than [4] where the attacker learns nothing from
divergent computations —which is dubious, given that the attacker
can see intermediate steps.
2
tended with agreement predicates A(e) used to say
that some function e of the secrets may be released.
This should facilitate integration into existing system
development processes and tool chains, as well as
integration with existing access mechanisms.
(b) Policies can express a range of reasons for
declassiﬁcation to be allowed, encompassing what may
be released, where in the system, when and under
whose authority. The connection with application re-
quirements can be clear because policies refer directly
to program data structures or auxiliary state that tracks
event history. State dependence caters for some forms
of dynamic policy updates, while admitting a cogent
semantics to support high assurance.
(c) Our security property constrains the ﬂow of
information even after one or more release actions
(unlike [11] but like [4]). It is deﬁned in terms of
a standard, un-instrumented program semantics. It re-
duces to termination-sensitive noninterference in the
absence of declassiﬁcation and accords with the other
prudent principles of Sabelfeld and Sands [29].
(d) In many systems, sensitive data is manipulated in
pointer-based shared data structures rather than named
program variables; this poses challenges for security
labeling and for static analysis, due to aliasing etc. Our
use of program logic ﬁts with the solution of Amtoft
et al [1], [2], which provides effective, modular veri-
ﬁcation for object-oriented programs. We can specify
and verify the secure release of an unbounded data
structure by a single pointer assignment, rather than
by cloning as in previous work [3].
Our enforcement r´egime integrates, in a straightfor-
ward way, three existing technologies: security typing
(e.g. [37]), relational veriﬁcation (e.g. [1], [8]), and
ordinary program veriﬁcation for assertions (imple-
mented in many tools). Our main theorem says that
the r´egime enforces the security property. It relies
on existing soundness results for the type system
and logics. For practical application, one needs logics
and security type system for a richer programming
language. For the sequential core of Java, suitable type
systems (e.g., [6]) and logics (e.g., [1], [22]) also exist
and have been proved sound.
Outline. Sect. 2 illustrates by examples the rich declas-
siﬁcation policies of interest. It informally introduces
our policy notation, security property, and enforcement
r´egime. Sect. 3 formalizes a simple programming
language with declass commands. Sect. 4 deﬁnes our
policies (dubbed ﬂowspecs). Sect. 5 deﬁnes our end-to-
end security property in terms of the program seman-
tics. Sect. 6 addressess enforcement by type checking
together with veriﬁcation conditions. Sect. 7 gives the
main technical result, that statically checked programs
are secure. Sect. 8 sketches the extension to programs
using shared, dynamically allocated objects. Sect. 9
covers related work and Sect. 10 discusses future
challenges.
2. Synopsis
A number of works provide techniques for enforce-
ment of noninterference for imperative and object-
oriented programs. One approach treats security labels
as non-standard types [37]. By typing variable h as
secret (H) and l as low (L), an evident rule disallows
direct assignment of l := h and additional constraints
prevent implicit ﬂows as in if h then l := true.
An alternative approach for enforcing noninterfer-
ence is to formulate security as a veriﬁcation problem
and use program logic [13], [15]. A basic form of
noninterference says that if two initial states agree on
the non-secret variables (thereby representing uncer-
tainty about the secrets), and there are two runs of the
program from those states, the resulting pair of ﬁnal
states agrees on low variables. The idea can be realized
in terms of a “relational Hoare logic” [8]. We focus
on the logic of Amtoft et al. [1] which addresses a
key challenge for reasoning: mutable data structures
in the heap. A triple {ϕ}C {ψ},
termed ﬂowtriple
in the sequel, involves pre- and post-conditions ϕ, ψ
on pairs of program states. The interpretation is with
respect to two executions of C , one from each of
the initial pair of states. Pre- and postconditions can
include predicates of a special form, which we call an
agreement and write as A(e). The meaning is that the
two considered states agree on the value of expression
e. Agreements can also involve region expressions
which abstract the heap, as we discuss later. The prob-
lem of showing that a command C is noninterferent
for some low variables l0, . . . , ln reduces to showing
the validity of the triple {ϕ} C {ϕ} where ϕ is
A(l0)∧ . . .∧ A(ln ). Compositional proof rules provide
ﬂow-sensitive reasoning and incorporate the usual no-
read-up and no-write-down constraints.
In a precondition, an agreement expresses what
is considered low-visible. So the logical formulation
of noninterference can be used in a natural way to
describe the delimited release policies of Sabelfeld and
Myers [28]. They consider this example, akin to an
electronic wallet scenario, with l , k : L and h : H:
(1)
if h ≥ k then h := h − k ; l := l + k
takes the following form, which we call a ﬂowspec:
(2)
ﬂow pre P &ϕ mod l
In general, the precondition combines the two-state
predicate ϕ with an ordinary state ordinary state pred-
icate P that is to hold in both initial states. For this
example, the state predicate P is simply true, and the
agreement ϕ is A(h ≥ k )∧A(l )∧A(k ). The meaning
of the ﬂowspec is this. A command C satisﬁes the
speciﬁcation provided that if it
is run twice, from
initial states that agree on l , on k , and on the value
of expression h ≥ k —but not necessarily on the
value of h— the ﬁnal states agree on l . That is, the
ﬂowtriple {ϕ} C {A(l )} is valid. Moreover, the only
low variable that is updated is l .
In the analysis by Sabelfeld and Sands [29], delim-
ited release speciﬁes what is released. To specify where
in the system release is allowed, we follow previous
work in explicitly marking commands that are allowed
to declassify. To specify when release may happen, the
ﬂowspecs attached to our declassiﬁcation commands
include a state predicate P as in (2). We now proceed
to an example that clariﬁes the utility of P .
Release after multiple events. Our leading example
below has declassiﬁcation conditioned upon multiple
events. Consider a patient’s medical record that con-
tains ﬁelds with mixed data, some secret and some
public. A bookkeeper needs to release the patient’s
information to an insurance representative subject to
the following policy.
• The patient’s diagnosis is released, but not the
doctor’s notes (both are normally secret).
• The version of the record to be released should
be the most recent one.
• The record should be in “committed” state. The
database contains some versions that just record
saved test info, whereas a committed record re-
ﬂects a doctor’s ﬁrm diagnosis.
• Preceding release, an audit log entry is made,
including the patient ID and record version, as
well as the IDs of the bookkeeper and insurance
rep.
• At the time of release, both bookkeeper and rep-
resentative should be users with valid credentials
to act in their respective roles.
The example is illustrative; we ignore other issues such
as integrity (e.g. of the audit logs) or roles; nor do
we restrict to representatives of the patient’s insurance
company.
To express the policy that it is ﬁne to reveal whether
h ≥ k , but nothing more about h, our speciﬁcation
Let security level L be associated with information
for which at least the insurance company is permitted
3
access, and H be associated with private patient in-
formation and clinic-internal information. The clinic’s
database contains records of this form:
class PatientRecord {
int id; boolean committed; int vsn;
String{H} diag; String{H} notes; }
A similar record is provided to insurance representa-
tives. Note that L ﬁelds are unmarked.
class InsRecord {int id; String diag;}
Before formalizing the policy we give a conforming
implementation (in Java-like syntax).
Object release(Database db, int patID,
Bookkeeper b, InsRep r)
// precondition: sys.auth(b,"book") &&
//
sys.auth(r,"rep")
{ InsRecord ir := new InsRecord();
PatientRecord pr := db.lookup(patID);
if (pr != null && pr.committed) {
log.append(b.id, r.id,
pr.id, pr.vsn, "release");
ir.id := pr.id;
ir.diag := pr.diag;
return ir;