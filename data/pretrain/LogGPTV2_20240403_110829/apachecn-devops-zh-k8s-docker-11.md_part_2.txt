  input_images[image]
  not startswith(image, "quay.io/")
}
input_images[image] {
  image := input.review.object.spec.containers[_].image
}
input_images[image] {
  image := input.review.object.spec.template.spec.containers[_].image
} 
```
这段代码的第一行声明`package`我们的策略生效了。无论是数据还是策略，一切都存储在一个包中的 OPA 中。OPA 中的包就像文件系统中的目录。当你把一份保单放在一个包裹里时，一切都与那个包裹有关。在这种情况下，我们的策略是在`k8sallowedregistries`套餐中。
下一节定义了一个规则。如果我们的`Pod`有一个来自`quay.io`的映像，这个规则最终将是**未定义的**。如果`Pod`没有来自`quay.io`的映像，规则将返回`true`，表示注册表无效。当在动态准入审查期间评估`Pod`时，网守将把这解释为失败并将`false`返回给应用编程接口服务器。
接下来的两条规则看起来非常相似。第一个`input_images`规则说“针对对象的`spec.container`中的每个`container`评估调用规则”，匹配直接提交给 API 服务器的`Pod`对象，提取每个`container`的所有`image`值。第二条`input_images`规则指出:“针对对象的`spec.template.spec.containers`中的每个`container`评估调用规则，以短路`Deployment`对象和`StatefulSets`。
最后，我们添加了网守通知应用编程接口服务器评估失败所需的规则:
```
violation[{"msg": msg, "details": {}}] {
  invalidRegistry
  msg := "Invalid registry"
}
```
如果注册表有效，该规则将返回一个空的`msg`。将您的代码分解为做出策略决策的代码和做出反馈响应的代码是一个好主意。这使得测试变得更加容易，这将是我们接下来要做的。
## 测试 OPA 策略
一旦我们写好了我们的策略，我们就想建立一个自动化测试。就像测试任何其他代码一样，重要的是您的测试用例要涵盖预期和意外的输入。测试积极和消极的结果也很重要。这不足以证实我们的策略允许正确的注册；我们还需要确保它停止一个无效的。下面是我们代码的八个测试用例:
```
package k8sallowedregistries
test_deployment_registry_allowed {
    not invalidRegistry with input as {"apiVersion"...
}
test_deployment_registry_not_allowed {
    invalidRegistry with input as {"apiVersion"...
}
test_pod_registry_allowed {
    not invalidRegistry with input as {"apiVersion"...
}
test_pod_registry_not_allowed {
    invalidRegistry with input as {"apiVersion"...
}
test_cronjob_registry_allowed {
    not invalidRegistry with input as {"apiVersion"...
}
test_cronjob_registry_not_allowed {
    invalidRegistry with input as {"apiVersion"...
}
test_error_message_not_allowed {
    control := {"msg":"Invalid registry","details":{}}
    result = violation with input as {"apiVersion":"admissi…
    result[_] == control
}
test_error_message_allowed {
    result = violation with input as {"apiVersion":"admissi…
    control := {"msg":"Invalid registry","details":{}}
}
```
总共有八个测试；两个测试确保出现问题时返回正确的错误消息，六个测试覆盖三种输入类型的两个用例。我们正在测试简单的`Pod`定义、`Deployment`和`CronJob`。为了验证预期的成功或失败，我们包含了具有`image`属性的定义，这些属性包含每个输入类型的`docker.io`和`quay.io`。代码为印刷体缩写，但可从[https://github . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/tree/master/chapter 11/simple-opa-policy/rego/](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/tree/master/chapter11/simple-opa-policy/rego/)下载。
要运行测试，首先根据 OPA 网站-https://www.openpolicyagent.org/docs/latest/#running-opa.安装 OPA 命令行可执行文件。下载后，进入`simple-opa-policy/rego`目录并运行测试:
```
$ opa test . 
data.kubernetes.admission.test_cronjob_registry_not_allowed: FAIL (248ns)
--------------------------------------------------------------
PASS: 7/8
FAIL: 1/8
```
7 次测试通过，但`test_cronjob_registry_not_allowed`失败。作为`input`提交的`CronJob`不应被允许，因为其`image`使用 *docker.io* 。它偷偷通过的原因是因为`CronJob`对象遵循与`Pod`和`Deployment`不同的模式，所以我们的两个`input_image`规则不会从`CronJob`加载任何容器对象。好消息是当`CronJob`最终提交`Pod`时，网守不会对其进行验证，从而阻止其运行。坏消息是，在`Pod`应该运行之前，没有人会知道这一点。确保我们除了拾取其他带有容器的对象之外，还拾取了`CronJob`对象，这将使调试变得更加容易，因为`CronJob`不会被接受。
为了通过所有测试，在 Github repo 的`limitregistries.rego`文件中添加一个新的`input_container`规则，该规则将与`CronJob`使用的容器相匹配:
```
input_images[image] {
  image := input.review.object.spec.jobTemplate.spec.template.spec.containers[_].image
} 
```
现在，运行测试将显示一切都通过了:
```
$ opa test . 
PASS: 8/8
```
有了经过测试的策略，下一步就是将策略集成到 GateWay 中。
## 向网守部署策略
我们创建的策略需要部署到 GateWay，GateWay 提供了策略需要加载到其中的 Kubernetes 定制资源。第一个自定义资源是`ConstraintTemplate`，这是我们策略的减压阀代码存储的地方。这个对象允许我们指定与我们的策略执行相关的参数，接下来我们将介绍这一点。为了简单起见，创建一个没有参数的模板:
```
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sallowedregistries
spec:
  crd:
    spec:
      names:
        kind: K8sAllowedRegistries
        listKind: K8sAllowedRegistriesList
        plural: k8sallowedregistries
        singular: k8sallowedregistries
      validation: {}
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sallowedregistries
        .
        .
        .
```
该模板的完整源代码可在[https://raw . githubusercontent . com/PACKTPUSHING/Kubernetes-and-Docker-The-Complete-Guide/master/chapter 11/simple-opa-policy/YAML/gateway-policy-template . YAML](https://raw.githubusercontent.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide/master/ch)上获得。
创建后，下一步是通过基于模板创建约束来应用策略。基于`ConstraintTemplate`的配置，约束是 Kubernetes 的对象。请注意，我们的模板定义了一个自定义资源定义。这将被添加到`constraints.gatekeeper.sh`应用编程接口组。如果您查看集群上的 CRD 列表，您会看到`k8sallowedregistries`列表:
![Figure 11.3 – CRD created by ConstraintTemplate ](img/Fig_11.3_B15514.jpg)
图 11.3–由约束模板创建的 CRD
创建约束意味着创建模板中定义的对象的实例。
为了防止在我们的集群中造成太大的破坏，我们将把这个策略限制在`openunison`命名空间:
```
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sAllowedRegistries
metadata:
  name: restrict-openunison-registries
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds:
        - StatefulSet
        - Deployment
      - apiGroups: ["batch"]
        kinds:
        - CronJob
    namespaces: ["openunison"]
  parameters: {}
```
约束将我们编写的策略限制在 OpenUnison 命名空间中的`Deployment`、`CronJob`和`Pod`对象。一旦被创建，如果我们试图杀死`openunison-operator`吊舱，它将无法被副本集控制器成功地重新创建，因为映像来自`dockerhub.io`，而不是`quay.io`:
![Figure 11.4 – Pod fails to create because of GateKeeper policy ](img/Fig_11.4_B15514.jpg)
图 11.4–由于网守策略，Pod 无法创建
接下来，看看策略对象。您会看到对象的`status`部分有几个违规:
![Figure 11.5 – List of objects that violate the image registry policy ](img/Fig_11.5_B15514.jpg)
图 11.5–违反映像注册表策略的对象列表
部署了第一个 GateWay 策略后，您可能会很快注意到它有一些问题。首先是注册表是硬编码的。这意味着我们需要为每一次注册变更复制我们的代码。名称空间也不灵活。抖音安全的所有映像都存储在`docker.io/tremolosecurity`中，所以我们可能不想限制特定的注册服务器，而是希望每个名称空间都有灵活性，并允许多个注册。接下来，我们将更新我们的策略来提供这种灵活性。
## 构建动态策略
我们目前的注册策略是有限的。它是静态的，只支持一个注册表。减压阀和网守都提供功能来构建一个动态策略，该策略可以在我们的集群中重用，并基于单个名称空间需求进行配置。这给了我们一个代码库来工作和调试，而不是维护重复的代码。我们将要使用的代码在[中。](https://github.com/packtpublishing/Kubernetes-and-Docker-The-Complete-Guide/blob/master/chapter11/pa)