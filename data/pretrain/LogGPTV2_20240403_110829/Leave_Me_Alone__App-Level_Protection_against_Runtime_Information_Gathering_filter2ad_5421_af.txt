condition) we performed, only 2 led to correct identiﬁcation of
the conditions. Note that this identiﬁcation rate is even lower
than a random guess (1 out of 10 disease conditions). Also,
when looking at the accumulated increments of tcp_snd and
tcp_rcv “end-to-end”, that is, from the invocation of the app
until the moment that the user ﬁnishes checking one condition,
we concluded that there is no chance to identify even a single
condition (Figure 5a), as all the ranges of these accumulated
increments (for different conditions) completely overlap with
others.
The situation for Twitter is similar. The new version brings
in randomness in packet lengths during sending and receiving
tweets. Again, in our research, we ﬁngerprinted those operations
925926
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
using their individual sequences of payload-length ranges, and
ran the side-channel attack [1] on the app. Even though the
payload lengths associated with the same operation (send or
receive) vary from time to time, we were able to correctly
identify the tweeting activity most of time (45 out of 50) when
the attack app runs at the SR of 20 times per second. However,
with Guardian put in place, the SR was forced down to once
every two seconds, which reduces the effectiveness of the
attack to 62%, which is close to the random guess (determining
whether it is sending or receiving tweets). We further studied
the end-to-end situation, in which Guardian closes the attack
app and restores it after the user sends or receives a tweet.
From the accumulated increments, we found that these two
operations cannot be separated, as the range of the increment
in one case completely overlaps that of the other.
Web pages and driving routes. Prior research describes a
technique to infer the web pages the user visits from the
temporal changes in memory footprints when those pages are
being rendered by the Chrome browser [5]. This attack requires
the malicious app to sample the browser’s memory dynamics
(from the data resident size in /proc//statm) at
a high frequency. In our research, we followed what the
researchers did: building up signatures for different web pages
and then comparing the observed memory uses with the
signatures to identify the pages visited. More speciﬁcally,
such a signature is a sequence of tuples, each including a
memory footprint size observed and its number of occurrences.
The adversary’s observation of memory uses is described
as memprint, which is also a sequence of the tuples as the
adversary sees. The attack happens by calculating a Jaccard
index between a memprint (collected when the browser is
loading a web page) and known signatures to identify the page.
In our experiment, we chose Alexa top 15 sites6. On our
Nexus 5 phone, we ﬁrst ran an attack program with the root
privilege to collect signatures for these individual pages at a
sampling rate of 10 per millisecond, which cannot be achieved
by any ordinary background app. Then we reduced the sampling
rate to ﬁnd out whether the adversary can still differentiate
these pages. For a rate of 100 per second, this was done easily.
However, when the attack app ran at a realistic speed, 10 times
per second in scheduling, which is what an ordinary app can
possibly do, it only successfully identiﬁed the web pages at a
probability of 10%, very close to a random guess (about 7%).
This clearly indicates that our Guardian app can easily stop
this attack without causing much collateral damage, since most
background apps do not run that fast (Section IV-B).
Another side-channel attack reported by the prior re-
search [1] is inference of driving routes from Android Navigator
through the speaker’s status (on or off). The idea is to
continuously check the public API isMusicActive during
navigation to identify the duration of individual voice elements
for turn-by-turn voice guidance: e.g., “turn left onto the 8th
street”. The duration can be found because the speaker status
turns from “off” to “on” at the beginning of the guidance and
goes the other way around at the end. A sequence of these
duration is a high-dimensional vector, which is used to search
Google Maps for the path the user drove through.
6Note that the small set of pages we selected actually gives the adversary
advantage: telling these pages apart does not mean that she is able to identify
one website from millions of popular sites.
Most important to this attack is accurate measurement of
such duration during the navigation app’s runtime, which are
compared with a set of reference sequences already mapped
to certain routes. In our research, we collected 108 unique
voice elements from 23 driving routes in a town and used their
lengths measured at 200 per second as a reference. Then, we
tried to match to them duration measured by an attack app
implemented according to the prior work [1]. Accurate matches
here are a necessary condition for a successful inference of
these routes. In our study, we found that such an attack can
be easily defeated by Guardian. Speciﬁcally, we measured the
same set of the voice elements at different scheduling rates,
which introduced errors to the measurement: i.e., the actual
element length l now ranges from l −  to l + , when the
sampling rate is 1/ caused by a given SR. With this error, we
had to map such an element to any reference element within
the l±  range. As a result, the accuracy of the match decreases
when the margin of the error grows, which happens when the
attack app’s SR goes down. In the experiment, we found that
the attack went well at an SR of 100 per second: about 78%
of the reference elements randomly measured were matched
correctly. However, when the scheduling rate was dropped
to once per second, only 6.3% elements were successfully
matched. Note that under this accuracy level, it is impossible
to match a sequence of elements to a right path on the map.
Keyloggers. We also analyzed the effectiveness of our Guardian
app against keyloggers. Prior work shows that Android users’
touch inputs can be revealed through a few attack techniques.
Particularly, the smartphone’s accelerometer discloses both shift
and rotation data when the user types through touch screen,
which is found to be informative enough for malware (e.g.,
Touchlogger [4]) to infer the key the user enters. Also, in the
presence of a vulnerable screenshot app, Screenmilker can
continuously capture the screen to determine the key being
pressed [20]. Despite the diversity of the techniques used in such
attacks, the chance for these keyloggers to successfully identify
the user’s inputs depends on their sampling rate. Consider an
Android user’s average typing speed of 3 keys per second.
When the sampling rate goes down to once per second, the best
the adversary can do is just to pick up 1 of these 3 keys. Note
that this success rate is all but unattainable for the adversary, as
the malware typically needs more than one sample to correctly
ﬁgure out one key. For example, Touchlogger uses multiple
device orientation data to extract features of one keystroke;
Screenmilker, on the other hand, needs to continuously take
shots in order to catch the moment when a key is entered. In
those attacks, the malicious app has to be scheduled at least
once whenever it takes a sample (shift and rotation data or
screenshot). Therefore, with the SR decreases (e.g., to 1 per
3 seconds), the amount of information those Keylogger can
obtain is very limited (no more than one key every 3 seconds).
Obviously, they get nothing in the case of end-to-end protection.
Voice eavesdropping and UI state inference. Recently, a
technique has been proposed to utilize the smartphone’s onboard
gyroscope to eavesdrop on the user’s phone conversation [7].
The gyroscope is sensitive to audible signals that range from
20Hz to 200Hz. To catch such signals, the attack app needs to
collect gyroscope readings at a very high speed: speciﬁcally,
we ran the attack code made public by the authors of the
paper [29], and found that its SR is 20 times per second, much
higher than the threshold utilized by Guardian (1 per 3 seconds).
926927
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:04:07 UTC from IEEE Xplore.  Restrictions apply. 
In the presence of the phone app, the attack app running at
such speed will be suspended by our app. On the other hand,
once we force the malware to get only one reading every three
seconds, clearly little can be inferred about the ongoing phone
conversation.
Another recent RIG attack is to infer the state of the target
app’s user interface (UI) for a phishing attack, using the app’s
shared memory information collected from its proc ﬁle [2].
In the paper, the authors indicate that the SR of their attack
app was between 10 to 33 times per second for identifying the
target app’s activity transition. More importantly, the malware
needs to accurately determine when an activity is about to
launch and then inject into the foreground a phishing activity
to steal the user’s sensitive information, e.g., the password she
is supposed to enter into a login activity. Under the protection
of Guardian, the malware has to reduce its SR below 1 per
3 seconds to avoid being terminated. At this sampling rate, it
is conceivable that the malware cannot observe the transition
between two activities, which completes in sub-seconds, not to
mention identifying the right moment for hijacking the target’s
login activity.
B. Utility Impacts and Performance
We further studied the utility impacts of App Guardian
on legitimate apps and its performance. For this purpose, we
used 475 apps from 27 categories on the Google Play store.
Examples of these apps are described in Table IV. As discussed
before (Section III-B), all these apps are top-ranking ones
in their individual categories, including Facebook in Social,
Pandora in Music & Audio and Amazon in Shopping. Among
all these apps, 27 apps get oom_adj values of 5 or lower once
switched to the background. Most of them are media players
and keyboard apps, and the rest are launchers and weather
apps (Section III-B). All other apps are assigned a higher value
(usually 9 or above), which indicates that they can be killed at
anytime without affecting the system’s normal operation and
user experience [27]. Further, all these apps are capable of
restoring their states after being terminated. Therefore, killing
their processes just temporarily stops their services, which can
be resumed later on.
App
Facebook
Fox News
Yelp
Viber
Amazon
The Weather Channel
FIFA
Temple Run 2
Photo Grid
Adobe Reader
SR
oom adj
Recoverable
Category
Social
< 1/3
News & Magazines < 1/3
< 1/3
Travel & Local
Communication
Shopping
Weather
Sports
Games
Photography
Productivity
1/1
2/1
< 1/3
< 1/3
10/1
< 1/3
< 1/3
9
9
9
5
9
9
9
9
9
9
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
TABLE IV: Analysis of top ranking apps (examples): here SR
is described as number of schedules per seconds.
Impacts on popular apps. In our experiment, we measured the
scheduling rates of such popular background apps. Two minutes
after they were switched to the background, we monitored their
SRs for 5 times. We found that totally 183 (38.5%) out of 475
apps were scheduled at a rate over once every three seconds for
at least once and 135 (28.4%) apps for all ﬁve times. However,
this high SR (1 per 3 seconds) did not last for every app: 43
out of the 135 apps no longer utilized CPU at this rate after
927928
30 minutes. Among the rest 92 persistent fast-running apps
(19.3%), 77 were assigned an oom adj of 9 or above, essentially
being marked as disposable by Android; 7 were assigned a
score between 6 and 8, and therefore can be terminated without
causing serious utility impacts; the rest 8 were executed with
a value of 5 or below, including 6 media players, 1 video chat
app and 1 launcher app. For the media players, Guardian had
to pause their music (Section III-B) while running the principal
in the foreground. As a result, we found that 4 of them no
longer used CPU aggressively and therefore did not need to
be killed. The rest 4 were terminated but later restored after
the principal completed its operation. Also, all apps also ran
smoothly after the recovery.
Overall, among all the popular apps, Guardian only needs
to suspend 19.3% of the apps. The vast majority of such
suspensions have little observable impact on the utility of these
legitimate apps at all, as they are considered to be disposable,
even though re-invoking these apps will take a longer time.
Only a very small portion, about 1.68% (8 out of 475), once
stopped, may slightly affect the phone users’ experience (music
temporarily stopped, status of online chat app temporarily goes
ofﬂine, etc.) but they can all be recovered once the system
moves out of the Ward mode.
Overhead. We further measured the performance of our
Guardian app on 2 Nexus 5 phones, each installed with more
than 250 apps. Using OS Monitor [30], our prototype was
found to work efﬁciently. It took only 5% of the CPU resources
and 40 MB of memory under the Ward mode, and the CPU
usage dropped to as low as 1% after leaving the Ward mode,
as observed in our experiments. The battery consumption of
Guardian is also low, which was measured in our study on 2
Nexus 5 phones with 50 top apps running on each of them.
From the battery statistics provided by Android, we found that
Guardian consumed 0.12%, 0.18% of the total battery capacity
per hour within the Ward mode and 0.75%, 1.05% per 24 hours
otherwise. For example, consider that Guardian enters into the
Ward mode 12 times a day and 5 minutes each, it will use
about 0.84% and 1.18% of the battery on these two devices.
This is lower than running the Facebook app for 30 minutes a
day (about 1.2% of the total battery consumption).
V. DISCUSSION
Detection and separation. App Guardian is not a malware
detection system. All it ﬁnds is just suspicious programs that
meet a set of necessary yet often insufﬁcient conditions for
a RIG attack. The idea is to suspend a small group of apps
to minimize performance and utility impacts on the system’s
normal operation and user experience. Even if we get it wrong,
terminating legitimate apps, they can still be restored to the
original states after the principal’s execution. Saying that, this
approach does bring in a certain level of inconvenience to the
user, who could experience a delay when switching to the app
she just runs or the stop of background services when using
her protected app. Therefore, a more accurate identiﬁcation of
malicious activities, which helps further narrow down the list
of apps that need to kill, certainly helps. To move forward, we
expect a further investigation on the real-world impacts of the
whitelist and the behavior-based app selection strategy on real
users’ devices, to understand indeed how much inconvenience