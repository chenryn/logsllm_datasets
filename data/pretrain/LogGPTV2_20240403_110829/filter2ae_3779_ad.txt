       gg[i] += 32
       ii[i] += 32
       ff[i] += 8
       jj[i] += 1
    #for ary in [aa, cc, ee, gg, ii, dd, ff, hh, jj]:
    #    for x in ary:
    #        if x > 255:
    #            return False
    compare = list(map(ord, 'R) +6'))
    for i in range(5):
       constraints.append(aa[i] == compare[i])
    compare = list(map(ord, 'l1:C('))
    for i in range(5):
       constraints.append(bb[i] == compare[i])
    compare = list(map(ord, ' RP%A'))
    for i in range(5):
       constraints.append(cc[i] == compare[i])
    compare = (236, 108, 102, 169, 93)
    for i in range(5):
       constraints.append(dd[i] == compare[i])
    compare = list(map(ord, ' L30Z'))
    for i in range(5):
       constraints.append(ee[i] == compare[i])
    compare = list(map(ord, ' j36~'))
    for i in range(5):
       constraints.append(ff[i] == compare[i])
    compare = list(map(ord, ' M2S+'))
    for i in range(5):
       constraints.append(gg[i] == compare[i])
    compare = list(map(ord, '4e\x9c{E'))
    for i in range(5):
       constraints.append(hh[i] == compare[i])
    compare = list(map(ord, '6!2$D'))
    for i in range(5):
       constraints.append(ii[i] == compare[i])
    compare = list(map(ord, ']PaSs'))
    for i in range(5):
       constraints.append(jj[i] == compare[i])
    #print(constraints)
    print(solve(constraints))
## Forensics-crypto1
### 100
25 x 25 qr-code version 2  
type infomation bits: 010101111x101101, ECC level: Q, mask: 7
( ((row + column) mod 2) + ((row * column) mod 3) ) mod 2 == 0
Error corrections available but data is removed (right side)
This is readed as follows  
1001110110001001110110001001010001101110010001101110010001101011110101000010111101011000100111010011001100101101010011100011000101110110011010100011010001111101000011101100110110101001110100101101011111110100010101100001100011100101110010101000111111011001110011111111011011001010101110110100101110100101100110111100001001100001100100100001111010000000000
QR CODE has many modes, we try to use byte mode to deocode it.(4 bit mode, 8
bit length, the size of per data block is 8)
By trying to decode the QR CODE manually, we can find that the flag is ended
with N1nj4}. So the length of this string is
0b00010100.
The Data and ECC block can be read under the rule as follows. But we need to read it from offset 4 + 8.  
Due to the fact that the ecc level of this QR CODE is %25, we just need to
patch some known letters as “TWCTF”,etc.
But we need to know how to patch it.  
XORed
we need to patch the header of the QR CODE, mode and lemgth and then we need
to XOR them with mask.  
After patching known bytes, we can scan the QR CODE.
flag is here  
TMCTF{QRc0d3-N1nj4}
### 200
Decompiling pyinstaller shows the sourcecode.
    $ cat OceanOfSockets.py
    ...
    def request():
        try:
            connection = httplib.HTTPConnection(sys.argv[1], sys.argv[2])
            connection.request('GET', '/tmctf.html')
            resTMCF = connection.getresponse()
            readData = resTMCF.read()
            if 'OceanOfSockets' in readData:
                headers = {'User-Agent': 'Mozilla Firefox, Edge/12',
                 'Content-type': 'text/html',
                 'Cookie': '%|r%uL5bbA0F?5bC0E9b0_4b2?N'}
                connection.request('GET', '/index.html', '', headers)
            else:
                sys.exit(0)
        except:
            pass
    ...
There doesn't seem to be much information except the suspicious cookie.
While thinking about the flag format (which is `TMCTF{}`), I realized it
should be a simple addition algorithm used on Cookie.
    >>> [chr((ord(i) + 47)) for i in '%|r%uL5bbA0F?5bC0E9b0_4b2?N']
    ['T', '\xab', '\xa1', 'T', '\xa4', '{', 'd', '\x91', '\x91', 'p', '_', 'u', 'n', 'd', '\x91', 'r', '_', 't', 'h', '\x91', '_', '\x8e', 'c', '\x91', 'a', 'n', '}']
Now it sounds like some of characters are not displayed properly. I decided to
mod a byte to leak remaining ambiguous bytes.
    >>> [chr((ord(i) + 47) % 0x5e) for i in '%|r%uL5bbA0F?5bC0E9b0_4b2?N']
    ['T', 'M', 'C', 'T', 'F', '\x1d', '\x06', '3', '3', '\x12', '\x01', '\x17', '\x10', '\x06', '3', '\x14', '\x01', '\x16', '\n', '3', '\x01', '0', '\x05', '3', '\x03', '\x10', '\x1f']
Merging above results will print the flag
flag: `TMCTF{d33p_und3r_th3_0c3an}`
### 400
We got these informations from challenge:
    n = 144 and l = 288
    fi (x) = x XOR ki
    unknown h
We known a couple of plaintext/cipher, so it's known plaintext attack.
Here the F function of feistel is XOR, all differences are transmitted by
probability 1. So we can decrypt all cipher over these conditions.
Fistly, we do some pre-works:  
we don't know h, so we need to try alot of time, and finally I found:
    true_l=xor(lm,xor(rc,r))
We guess the h=5 or like 5 round's result, so we can solve it:
    m1="010000010110111000100000011000010111000001110000011011000110010100100000011000010110111001100100001000000110000101101110001000000110111101110010011000010110111001100111011001010010000001110111011001010110111001110100001000000111010001101111001000000101010001110010011001010110111001100100"
    c1="000100100011000101110101001101100110001100110001001110100011110101100000011110010010111000110011001110000000110100100101011111000011000000100001010000100110011100100001011000000111001101110100011011100110000000100000011011010110001001100100001011010110111001100110001010110110110101110001"
    c="000000110000111001011100001000000001100100101100000100100111111000001001000001100000001100001001000100100010011101001010011000010111100100100010010101110100010001000010010101010100010101111111010001000110000001101001011111110111100001100101011000010010001001001011011000100111001001101011"
    def xor(bin1,bin2):
        assert len(bin1)==len(bin2)
        s=""
        for i in range(len(bin1)):
            s+=str(int(bin1[i])^int(bin2[i]))
        return s
    from Crypto.Util.number import long_to_bytes
    def show(x):
        print long_to_bytes(int(x,2))
    lm=m1[0:144]
    rm=m1[144:]
    lc=c1[0:144]
    rc=c1[144:]
    l=c[0:144]
    r=c[144:]
    true_l=xor(lm,xor(rc,r))
    true_r=xor(xor(xor(xor(lc,l),true_l),lm),rm)
    show(true_l+true_r)
## Forensics-crypto2
### 200
Dump HTTP upload requests and you will get mausoleum.exe.
From there, decompile the exe file (omg so many pyinstaller binary)
I was somehow unable to decrypt the python file (I changed some of bits in
headers, still it didn't work)
so I decided to remove useless letters from the notepad and get the flag.
Guess what? I successfully submitted it on the first guess.
`TMCTF{the_s3cr3t_i$_unE@rth3d}`
## Misc
### 100
Foremost extract a zip file and unzip it to get flag:
### 200
The challenges provides a pcap file and a python script. The python script
reads a txt file into an array and uses it as training data for DBSCAN. So I
guess the purpose of this challenge is to extract the data from the pcap.
I use `strings` to observe that the data of icmp packet looks like the data we
want ,so I extract them with the following command  
`tshark -r ./traffic.pcap -Y "icmp and ip.src_host==192.168.0.17" -T fields -e
data`
Decode them and apply them to the python script. But the model outputs
nothing. So I decide to plot it directly.
And the flag is `FLAG:1`