initialDelaySeconds: 60 # 初始化时间
timeoutSeconds: 2 # 超时时间
periodSeconds: 5 # 检测间隔
successThreshold: 2 # 检查成功为2次表示就绪
failureThreshold: 1 # 检测失败1次表示未就绪
securityContext: # 可选，限制容器不可信的行为
provoleged: false
restartPolicy: Always # 可选，默认为Always
nodeSelector: # 可选，指定Node节点
region: subnet7
imagePullSecrets: # 可选，拉取镜像使用的secret
- name: default-dockercfg-86258
hostNetwork: false # 可选，是否为主机模式，如是，会占用主机端口
volumes: # 共享存储卷列表
- name: webroot # 名称，与上述对应
emptyDir: {} # 共享卷类型，空
hostPath: # 共享卷类型，本机目录
path: /etc/hosts
secret: # 共享卷类型，secret模式，一般用于密码
secretName: default-token-tf2jp # 名称
defaultMode: 420 # 权限
configMap: # 一般用于配置文件
66 | 再也不踩坑的Kubernetes实战指南
name: nginx-conf
defaultMode: 420
2.2.4 Label 和 Selector
当Kubernetes对系统的任何API对象如Pod和节点进行“分组”时，会对其添加Labe（l key=value
形式的“键-值对”）用以精准地选择对应的API对象。而Selector（标签选择器）则是针对匹配对
象的查询方法。注：键-值对就是key-value pair。
例如，常用的标签tier可用于区分容器的属性，如frontend、backend；或者一个release_track
用于区分容器的环境，如canary、production等。
1. 定义Label
应用案例：
公司与xx银行有一条专属的高速光纤通道，此通道只能与192.168.7.0网段进行通信，因此只
能将与xx银行通信的应用部署到192.168.7.0 网段所在的节点上，此时可以对节点进行Label（即
加标签）：
[root@K8S-master01 ~]# kubectl label node K8S-node02 region=subnet7
node/K8S-node02 labeled
然后，可以通过Selector对其筛选：
[root@K8S-master01 ~]# kubectl get no -l region=subnet7
NAME STATUS ROLES AGE VERSION
K8S-node02 Ready  3d17h v1.12.3
最后，在Deployment或其他控制器中指定将Pod部署到该节点：
containers:
......
dnsPolicy: ClusterFirst
nodeSelector:
region: subnet7
restartPolicy: Always
......
也可以用同样的方式对Service进行Label：
[root@K8S-master01 ~]# kubectl label svc canary-v1 -n canary-production
env=canary version=v1
service/canary-v1 labeled
查看Labels：
[root@K8S-master01 ~]# kubectl get svc -n canary-production --show-labels
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE LABELS
canary-v1 ClusterIP 10.110.253.62  8080/TCP 24h
env=canary,version=v1
还可以查看所有Version为v1的svc：
[root@K8S-master01 canary]# kubectl get svc --all-namespaces -l version=v1
第2章 Docker及Kubernetes基础 | 67
NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S)
AGE
canary-production canary-v1 ClusterIP 10.110.253.62 
8080/TCP 25h
其他资源的Label方式相同。
2. Selector条件匹配
Selector主要用于资源的匹配，只有符合条件的资源才会被调用或使用，可以使用该方式对集
群中的各类资源进行分配。
假如对Selector进行条件匹配，目前已有的Label如下：
[root@K8S-master01 ~]# kubectl get svc --show-labels
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
LABELS
details ClusterIP 10.99.9.178  9080/TCP 45h
app=details
kubernetes ClusterIP 10.96.0.1  443/TCP 3d19h
component=apiserver,provider=kubernetes
nginx ClusterIP 10.106.194.137  80/TCP 2d21h
app=productpage,version=v1
nginx-v2 ClusterIP 10.108.176.132  80/TCP 2d20h
productpage ClusterIP 10.105.229.52  9080/TCP 45h
app=productpage,tier=frontend
ratings ClusterIP 10.96.104.95  9080/TCP 45h
app=ratings
reviews ClusterIP 10.102.188.143  9080/TCP 45h
app=reviews
选择app为reviews或者productpage的svc：
[root@K8S-master01 ~]# kubectl get svc -l 'app in (details, productpage)'
--show-labels
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
LABELS
details ClusterIP 10.99.9.178  9080/TCP 45h
app=details
nginx ClusterIP 10.106.194.137  80/TCP 2d21h
app=productpage,version=v1
productpage ClusterIP 10.105.229.52  9080/TCP 45h
app=productpage,tier=frontend
选择app为productpage或reviews但不包括version=v1的svc：
[root@K8S-master01 ~]# kubectl get svc -l version!=v1,'app in (details,
productpage)' --show-labels
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE LABELS
details ClusterIP 10.99.9.178  9080/TCP 45h
app=details
productpage ClusterIP 10.105.229.52  9080/TCP 45h
app=productpage,tier=frontend
选择labelkey名为app的svc：
68 | 再也不踩坑的Kubernetes实战指南
[root@K8S-master01 ~]# kubectl get svc -l app --show-labels
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
LABELS
details ClusterIP 10.99.9.178  9080/TCP 45h
app=details
nginx ClusterIP 10.106.194.137  80/TCP 2d21h
app=productpage,version=v1
productpage ClusterIP 10.105.229.52  9080/TCP 45h
app=productpage,tier=frontend
ratings ClusterIP 10.96.104.95  9080/TCP 45h
app=ratings
reviews ClusterIP 10.102.188.143  9080/TCP 45h
app=reviews
3. 修改标签（Label）
在实际使用中，Label的更改是经常发生的事情，可以使用overwrite参数修改标签。
修改标签，比如将version=v1改为version=v2：
[root@K8S-master01 canary]# kubectl get svc -n canary-production --show-labels
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE LABELS
canary-v1 ClusterIP 10.110.253.62  8080/TCP 26h
env=canary,version=v1
[root@K8S-master01 canary]# kubectl label svc canary-v1 -n canary-production
version=v2 --overwrite
service/canary-v1 labeled
[root@K8S-master01 canary]# kubectl get svc -n canary-production --show-labels
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE LABELS
canary-v1 ClusterIP 10.110.253.62  8080/TCP 26h
env=canary,version=v2
4. 删除标签（Label）
删除标签，比如删除version：
[root@K8S-master01 canary]# kubectl label svc canary-v1 -n canary-production
version-
service/canary-v1 labeled
[root@K8S-master01 canary]# kubectl get svc -n canary-production --show-labels
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE LABELS
canary-v1 ClusterIP 10.110.253.62  8080/TCP 26h
env=canary
2.2.5 Replication Controller 和 ReplicaSet
Replication Controller（复制控制器，RC）和ReplicaSet（复制集，RS）是两种部署Pod的方
式。因为在生产环境中，主要使用更高级的Deployment等方式进行Pod的管理和部署，所以本节
只对Replication Controller和Replica Set的部署方式进行简单介绍。
1. Replication Controller
Replication Controller 可确保 Pod 副本数达到期望值，也就是 RC 定义的数量。换句话说，
Replication Controller可确保一个Pod或一组同类Pod总是可用。
第2章 Docker及Kubernetes基础 | 69
如果存在的 Pod 大于设定的值，则 Replication Controller 将终止额外的 Pod。如果太小，
Replication Controller 将启动更多的 Pod 用于保证达到期望值。与手动创建 Pod 不同的是，用
Replication Controller维护的Pod在失败、删除或终止时会自动替换。因此即使应用程序只需要一
个 Pod，也应该使用 Replication Controller。Replication Controller 类似于进程管理程序，但是
Replication Controller不是监视单个节点上的各个进程，而是监视多个节点上的多个Pod。
定义一个Replication Controller的示例如下。
apiVersion: v1
kind: ReplicationController
metadata:
name: nginx
spec:
replicas: 3
selector:
app: nginx
template:
metadata:
name: nginx
labels:
app: nginx
spec:
containers:
- name: nginx
image: nginx
ports:
- containerPort: 80
2. ReplicaSet
ReplicaSet 是支持基于集合的标签选择器的下一代 Replication Controller，它主要用作
Deployment协调创建、删除和更新Pod，和Replication Controller唯一的区别是，ReplicaSet支持
标签选择器。在实际应用中，虽然 ReplicaSet 可以单独使用，但是一般建议使用 Deployment（部
署）来自动管理ReplicaSet，除非自定义的Pod不需要更新或有其他编排等。
定义一个ReplicaSet的示例如下：
apiVersion: apps/v1
kind: ReplicaSet
metadata:
name: frontend
labels:
app: guestbook
tier: frontend
spec:
# modify replicas according to your case
replicas: 3
selector:
matchLabels:
tier: frontend
matchExpressions:
- {key: tier, operator: In, values: [frontend]}
template:
metadata:
70 | 再也不踩坑的Kubernetes实战指南
labels:
app: guestbook
tier: frontend
spec:
containers:
- name: php-redis
image: gcr.io/google_samples/gb-frontend:v3
resources:
requests:
cpu: 100m
memory: 100Mi
env:
- name: GET_HOSTS_FROM
value: dns
# If your cluster config does not include a dns service, then to
# instead access environment variables to find service host
# info, comment out the 'value: dns' line above, and uncomment the
# line below.
# value: env
ports:
- containerPort: 80
2.2.6 Deployment
虽然 ReplicaSet 可以确保在任何给定时间运行的 Pod 副本达到指定的数量，但是 Deployment
（部署）是一个更高级的概念，它管理ReplicaSet并为Pod和ReplicaSet提供声明性更新以及许多
其他有用的功能，所以建议在实际使用中，使用Deployment代替ReplicaSet。
如果在Deployment对象中描述了所需的状态，Deployment控制器就会以可控制的速率将实际
状态更改为期望状态。也可以在 Deployment 中创建新的 ReplicaSet，或者删除现有的 Deployment
并使用新的Deployment部署所用的资源。
1. 创建Deployment
创建一个Deployment文件，并命名为dc-nginx.yaml，用于部署三个Nginx Pod：
apiVersion: apps/v1
kind: Deployment
metadata:
name: nginx-deployment
labels:
app: nginx
spec:
replicas: 3
selector:
matchLabels:
app: nginx
template:
metadata:
labels:
app: nginx
spec:
containers:
第2章 Docker及Kubernetes基础 | 71
- name: nginx
image: nginx:1.7.9
ports:
- containerPort: 80
示例解析
 nginx-deployment：Deployment的名称。
 replicas：创建Pod的副本数。
 selector：定义Deployment如何找到要管理的Pod，与template的label（标签）对应。
 template字段包含以下字段：
 app nginx使用label（标签）标记Pod。
 spec 表示Pod运行一个名字为nginx的容器。
 image 运行此Pod使用的镜像。
 Port 容器用于发送和接收流量的端口。
使用kubectlcreate创建此Deployment：
[root@K8S-master01 2.2.8.1]# kubectl create -f dc-nginx.yaml
deployment.apps/nginx-deployment created
使用kubectlget或者kubectldescribe查看此Deployment：
[root@K8S-master01 2.2.8.1]# kubectl get deploy
NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
nginx-deployment 3 3 3 1 60s
其中，
 NAME：集群中Deployment的名称。
 DESIRED：应用程序副本数。
 CURRENT：当前正在运行的副本数。
 UP-TO-DATE：显示已达到期望状态的被更新的副本数。
 AVAILABLE：显示用户可以使用的应用程序副本数，当前为 1，因为部分 Pod 仍在创建
过程中。
 AGE：显示应用程序运行的时间。
查看此时Deployment rollout的状态：
[root@K8S-master01 2.2.8.1]# kubectl rollout status
deployment/nginx-deployment
deployment "nginx-deployment" successfully rolled out
再次查看此Deployment：
[root@K8S-master01 2.2.8.1]# kubectl get deploy
NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
nginx-deployment 3 3 3 3 11m
查看此Deployment创建的ReplicaSet：
[root@K8S-master01 2.2.8.1]# kubectl get rs
72 | 再也不踩坑的Kubernetes实战指南
NAME DESIRED CURRENT READY AGE
nginx-deployment-5c689d88bb 3 3 3 12m
注 意
ReplicaSe（t 复制集，RS）的命名格式为[DEPLOYMENT-NAME]-[POD-TEMPLATE-HASH
-VALUE]POD- TEMPLATE-HASH-VALUE，是自动生成的，不要手动指定。
查看此Deployment创建的Pod：
[root@K8S-master01 2.2.8.1]# kubectl get pods --show-labels
NAME READY STATUS RESTARTS AGE LABELS
nginx-deployment-5c689d88bb-6b95k 1/1 Running 0 13m
app=nginx,pod-template-hash=5c689d88bb
nginx-deployment-5c689d88bb-9z5z2 1/1 Running 0 13m