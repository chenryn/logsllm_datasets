# SDL-软件安全设计初探
— 安全应用始于安全设计
— PI: EMAIL

## 摘要
本文详细介绍了微软的软件安全开发生命周期（SDL）的相关概念，并讨论了遵循SDL过程中应执行的各种安全活动，特别关注了软件安全设计的原则。此外，还深入介绍了STRIDE威胁建模方法。

## 1. 前言
### 1.1 SDL介绍
安全开发生命周期（SDL）是一种帮助开发人员构建更安全软件并满足安全合规要求的开发过程，同时还能降低开发成本。自2004年起，微软将SDL作为公司范围内的强制性政策。SDL的核心理念是将安全考虑集成到软件开发的每个阶段：需求分析、设计、编码、测试和维护。通过在每个阶段增加相应的安全活动，可以减少软件中的漏洞数量并将安全缺陷降至最低。

### 1.2 SDL安全活动
SDL是在传统软件开发生命周期（SDLC）的基础上增加了必要的安全活动的一种管理模式。每个阶段的安全活动即使单独执行也能对软件安全产生积极影响，但缺少特定的安全活动可能会对软件安全性带来负面影响。

**图1**展示了微软SDL安全活动的简图。根据《软件安全开发生命周期》一书作者Michael Howard的观点，安全培训是SDL中最核心的概念之一。大部分软件的安全漏洞是由设计和编码人员引入的，因此对技术人员进行安全培训至关重要。

在国内，大多数公司已经具备了安全应急响应等安全活动，但在软件设计阶段的安全活动相对较少。根据微软的经验，很多软件安全问题源于不安全的设计。因此，本文将重点探讨软件设计阶段的安全活动。

## 2. 安全设计核心原则
### 2.1 攻击面最小化
攻击面是指程序中可被用户或其他程序访问的部分，这些地方往往是恶意攻击者最可能利用的地方。攻击面最小化的目标是尽量减少暴露给恶意用户的攻击面数量。

#### 攻击面分析技巧
| 高攻击面 | 低攻击面 |
| --- | --- |
| 默认开启 | 默认关闭 |
| 开放端口 | 关闭端口 |
| UDP | TCP |
| 匿名访问 | 认证用户访问 |
| 始终开启 | 按需开启 |
| 可从互联网访问 | 仅局域网访问 |

#### 微软实践示例
- **Windows RPC**：需要认证，防火墙默认打开。
- **IIS 6.0/7.0**：使用Network Service权限运行，默认关闭。
- **SQL Server 2005/2008**：xp_cmdshell存储过程默认关闭，默认不开放远程连接。
- **VS2005/2008**：Web服务器和SQL服务器默认仅本地访问。

### 2.2 基本隐私
保护用户隐私是建立可信应用程序的关键因素。企业在设计软件时应考虑以下方面：
- 履行法律义务
- 增加客户信任
- 避免部署障碍

对于全球性产品，还需遵守当地法律法规，如美国儿童网络隐私保护法（COPPA）。企业应制定明确的隐私准则，并告知用户数据收集的目的及征得同意。

### 2.3 权限最小化
权限最小化机制可以在应用程序或网站被攻击时将潜在损害降至最低。常见的实践包括：
- 角色管理（如普通管理员/系统管理员）
- 访问控制（如文件只读权限）
- 进程/服务以所需最小用户权限运行

#### 提示
- Windows系统中，网络进程、本地服务、用户进程的权限较低且互相独立，分别为NETWORK SERVICE、LOCAL SERVICE、user权限。
- 最新版本的Office程序打开不可信来源的文档时，默认不可编辑且不可执行代码。

### 2.4 默认安全
默认安全配置有助于客户更好地掌握安全配置经验，并确保应用程序初始状态下处于较安全状态。客户可根据实际使用情况调整安全与隐私设置。

#### 提示
- 在Win 7之后的Windows操作系统中，DEP（数据执行保护）默认开启。
- Win 10默认启用安全防护软件Windows Defender。

### 2.5 纵深防御
纵深防御强调在不同层面和不同方面实施安全方案，避免出现疏漏。不同安全方案之间需要相互配合，构成一个整体。纵深防御还包括在正确的地方做正确的事情，即在解决根本问题的地方实施针对性的安全方案。

#### 提示
- 多层次的安全措施可以有效提高系统的整体安全性。

通过以上原则和实践，可以帮助开发人员在设计阶段就充分考虑软件的安全性，从而构建出更加安全可靠的应用程序。