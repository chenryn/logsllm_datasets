Transparency
 Location, schema, language, and ontologies
 Global schema
 Support for semantic schema integration
Query models
 Semantic-based, rule-based, SQL-like, etc
Semantic Mediators
 Semantic query analysis and query processing
 Use wrappers
61
62
Brokering and Semantics
Find Web services across several UDDIs
Specialized and optimized brokers for specific
domain search
 Transports, Finances, Education, etc.
Allow the interpretation of complex
requirements
 Domain semantics
 Functional semantics
 Data semantics
 QoS semantics
62
63
Web Process Architecture
Semantic Composition
Semantic algorithms to
compute degree Web services integration
METEOR-S
…
Semantics
Composition
Semantics
63
64
Semantic Process Composition
Web Process
Composition
Composition is the task of combining and linking
existing Web Services and other components to
create new processes.
Types of Composition
 Static Composition - services to be composed are
decided at design time
 Dynamic Composition - services to be composed are
decided at run-time
64
SCET, Semantic Web Process Composition
65
Composition of Web Processes
Web Process
Web Process
Composition Composition
Web Service Discovery Web Service Integration
Once the desired Web This is because the
Services have been heterogeneous Web
found (Discovery), services found in the
mechanisms are first step need to
needed to facilitate the interoperate with
resolution of structural other components
and semantic present in a process
differences host
(integration)
65
66
Semantics at Flow Layers
Flow Layer:
Why:
• Design (composition), analysis (verification), validation
(simulation) and execution (exception handling) of the
process models
Flow
• To employ mediator architectures for automated
composition, control flow and data flow based on
requirements
Discovery
• To employ user interface to capture template
requirements and generate template based on that
Publication
How:
• Using
– Functionality/preconditions/effects of the participating
Description
services
– Knowledge of conversation patterns supported by the
Messaging
service
– Formal mathematical models like process algebra,
Network
concurrency formalisms like State Machines, Petri nets
etc.
– Simulation techniques
Present Scenario:
• Composition of Web services is static.
66
• Dynamic service discovery, run-time binding, analysis
and simulation are not supported directly
67
Integration
New Requirements
Web Process
Composition
 When Web services are put together
 Their interfaces need to interoperate.
 Structural and semantic heterogeneity need to be resolved*.
 Structural heterogeneity exists because Web services
use different data structures and class hierarchies to
define the parameters of their interfaces.
 Semantic heterogeneity considers the intended
meaning of the terms employed in labeling interface
parameters. The data that is interchanged among Web
services has to be understood.
67
* Kashyap and Sheth 1996
68
Integration
New Requirements
Web Process
Composition
How to establish data connections between Web Services interfaces?
Receipt
Employee
Receipt
Client
Address Itinerary
Local Travel Info
Conference Tourism
Web Service Web Service Web Service
How to establish data connections between the different data
structures and class hierarchies of the interface parameters?
How to understand the intended meaning of the terms used in
labeling interface parameters?
68
69
Web Services
Interfaces Web Process
Composition
 To enhance the integration, Web services need to have
their inputs and outputs associated with ontological
concepts (annotation).
 This will facilitate the resolution of structural and
semantic heterogeneities
 Compute the optimal matching (Bondy and Murty, 1976)
using semantic information (Cardoso and Sheth, 2002)
B B
R
b(O, I) b(O, I) A
M S
A X Y Z F A X B Y P Z F
N T
C
U
C D C D
69
Bipartite graph. Each edge has a weight (semantic similarity).
71
Semantic Web Processes
Questions?
71
72
Semantic Web Processes
Coffee Break
10 Minutes
NEXT: Composition Languages
72
NEXT: METEOR-S
73
Composition Languages
BPEL4WS
DAML-S
73
74
BPEL4WS
Introduction
BPEL4WS
 BPEL4WS (Business Process Execution Language for Web
Services) is a process modeling language.
 Developed by IBM, Microsoft, and BEA
 Version 1.1, 5 May 2003
 It supercedes XLANG (Microsoft) and WSFL(IBM).
 It is build on top of WSDL.
 For descriptions of what services do and how they work,
BPEL4WS references port types contained in WSDL
documents.
74
75
Web Services
Specification
 DAML-S The service profile ontology describes the
functionality of a Web service.
* Fensel and Bussler 2002 75
76
BPEL4WS
Introduction
BPEL4WS was released along with two others
specs:
 WS-Coordination and WS-Transaction*.
 WS-Coordination describes how services can
make use of pre-defined coordination contexts to
subscribe to a particular role in a
collaborative activity.
 WS-Transaction provides a framework for
incorporating transactional semantics into
coordinated activities.
76
*http://www-106.ibm.com/developerworks/webservices/library/ws-coor/,
http://www-106.ibm.com/developerworks/webservices/library/ws-transpec/
77
BPEL4WS
Introduction
 BPEL4WS is a block-structured programming language, allowing
recursive blocks but restricting definitions and declarations to the top
level.
 The language defines activities as the basic components of a
process definition.
 Structured activities prescribe the order in which a collection of
activities take place.
 Ordinary sequential control between activities is provided by
sequence, switch, and while.
 Concurrency and synchronization between activities is provided
by flow.
 Nondeterministic choice based on external events is provided by
pick.
77
78
BPEL4WS
Introduction
 Process instance-relevant data (containers) can be referred to
in routing logic and expressions.
 BPEL4WS defines a mechanism for catching and handling
faults similar to common programming languages, like Java.
 One may also define a compensation handler to enable
compensatory activities in the event of actions that cannot be
explicitly undone.
 BPEL4WS does not support nested process definition.
78
79
BPEL4WS
An Example
Let consider the following process.
79
[http://www-106.ibm.com/developerworks/webservices/library/ws-bpel/]
80
BPEL4WS
An Example – WSDL definitions
…
 Messages
 The WSDL portType offered by
the service to its customer
…
 Roles
…
80
81
BPEL4WS
An Example – The process
 This section defines the
 with the business process in the
…
course of processing the order.
 This section defines the data
…
containers used by the process,
providing their definitions in terms of
WSDL message types.
… 81
82
BPEL4WS
An Example – The process
…
…
82
83
BPEL4WS
An Example – The process
The flow construct provides concurrency and synchronization
Activities are executed sequentially
…
…
83
84
DAML-S
Introduction
DAML-S
DAML-S
DAML (DARPA Agent Markup Language)
DAML-S: Upper ontology of web services
DAML-S provides support for the following
elements:
 Process description.
 Advertisement and discovery of services.
 Selection, composition & interoperation.
 Invocation.
 Execution and monitoring.
84
DAML-S project home page
85
DAML-S
Ontologies
 DAML-S defines ontologies for the construction of service
models:
 Service Profiles
 Process Models
 Service Grounding provides
Resource Service
presents supports
described by
Service
ServiceProfile ServiceModel
Grounding
what the how the how to access
service does service works the service
85
86
DAML-S
Service Profile
The Service Profile provides details about a service.
Inputs. Inputs that Outputs. Outputs expected after
should be provided to the interaction with the service.
invoke the service.
Receipt
Client
Itinerary
Local
Tourism
Web Service
Preconditions. Set of Effects. Set of statements that
conditions that should hold prior should hold true if the service is
to the service being invoked. invoked successfully.
86
87
Service Profile
An example of Inputs and Outputs
...
...
 Addr  Inputs Outputs
 When
Addr
 ...
,,,
...
...
 When 
...
87
88
BPEL4WS vs. DAML-S
Comparison
 BPEL4WS relates closely to the ServiceModel (Process
Model) component of DAML-S.
 DAML-S defines preconditions and effects
 This enables the representation of side effects of Web services.
 It also enables a better reasoning about the composition of
services.
 DAML-S classes provide a richer representation of services
 Classes allow reasoning draw properties from inheritance and
other relationships to other DAML-S classes.
88
89
BPEL4WS vs. DAML-S
Comparison
 The DAML-S ServiceProfile and ServiceModel provide
sufficient information to enable
 The automated discovery, composition, and execution based on
well-defined descriptions of a service's inputs, outputs,
preconditions, effects, and process model.
 BPEL4WS has complicated semantics for determining
whether an activity actually happens in a block.
 BPEL4WS defines mechanisms for catching and handling
faults and for setting compensation handlers.
 BPEL4WS includes WS-Coordination and WS-Transaction to
provide a context for pre-defined transactional semantics.
89
90
Semantic QoS
Web Processes Quality of
Service
Organizations operating in modern markets,
such as e-commerce activities, require QoS
management.
QoS management is indispensable for
organizations striving to achieve a
higher degree of competitiveness.
90
91
Discovery
New Requirements
The autonomy of Web services does not allow for
designer to identify their operational metrics at
design time.
Nevertheless, when composing a process it is
indispensable to inquire the Web services
operational metrics.
Operational metrics characterize the Quality of
Service (QoS) that Web services exhibit when
invoked.
91
92
QoS
New Requirements
Quality of Service
Before Now
Time: 17 Hours
Cost?
Time?
Reliability?
Cost?
Fidelity?
Reliability?
N1 E N2
Fidelity?
1
Z1
B
2
N1 E N2
A N1 E N2 F
1 5 4 2 C
C D
1 3
Z1 Z2
A N1 E N2 F N1 E N2
C D C D
F
92
93
QoS Semantics
QoS
What ?
Formally describes operational metrics of a