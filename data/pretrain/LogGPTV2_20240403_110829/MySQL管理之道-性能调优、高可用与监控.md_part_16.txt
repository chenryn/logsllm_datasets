SET
JPDATEtest.student
root@M1opt]#catrecover.sql
[root@M1opt]#
[root@M1opt]#
WHERE
root@M1opt]#sed-i-r's/(score=.*),/1/g'recover.sql
root@M1opt]#sed-i's/@1/id/g;s/@2/name/g;s/@3/class/g;s/@4/score/g'recover.sql
@1=8;
@1=8,
@1=7;
@1=6;
@1=6
@1=5;
@1=5,
@1=4;
@4=90'
@3=4,
@2=h'
@4='43'
@2='g'
@1=7,
@4='89'
=
=@
@4='76'
=E
@2=e'
@3=2,
第3章故障诊断·105
---
## Page 120
106·第二部分故障诊断与性能优化篇
UPDATEtest.student
id=7;
WHERE
score='43'
class=4,
name='g',
SET
UPDATEtest.student
WHERE
score='89'
class=3,
name='f",
UPDATEtest.student
id=5;
WHERE
score='76'
class=3,
name='e',
id=5，
UPDATEtest.student
id=4;
WHERE
score='45'
d=6,
SET
class=2,
name='d',
id=4,
UPDATEtest.student
id=3;
WHERE
score='78'
class=2,
name='c',
id=3，
SET
UPDATEtest.student
id=2;
WHERE
score='61'
class=1,
name='b',
id=2，
SET
UPDATEtest.student
id=1;
---
## Page 121
class=4,
mysql> select*from student;
8rows in set (0.02 sec)
mysql>select*from student;
WHERE
score='90'
name='h'
Query OK,1 row affected (0.08 sec)
Rowsmatched:1 Changed:1Warnings:0
下面进行恢复操作：
id=8;
id=8,
Rows matched:1 Changed:1Warnings:0
QueryOK,1row affected(0.07sec)
Rowsmatched:1Changed:1Warnings:0
Query OK,1rowaffected(0.09sec)
Rows matched:1Changed:1Warnings:0
Rowsmatched:1Changed:1Warnings:0
QueryOK,1rowaffected(0.80sec)
Rowsmatched:1Changed:1Warnings:0
QueryOK,1rowaffected(0.03sec)
Rowsmatched:1Changed:1Warnings:0
QueryOK,1row affected(0.16sec)
Rowsmatched:1Changed:1Warnings:0
Query OK,1row affected(0.95 sec)
QueryOK,1row affected (0.11sec)
mysql>source/opt/recover.sql
8|h
17lg
[root@M1opt]#
6|f
5|e
4|d
3|c
2|b
1|a
id|name|class|score
4
4
3
2
2
L
|failure
|failure
failure
failure
failure
failure
failure
failure
第3章故障诊断·107
---
## Page 122
108·第二部分故障诊断与性能优化篇
示一下delete操作时忘加where条件的误操作恢复。
3.3.9
如果在delete时忘加 where 条件了怎么办？可按照上面的方法依葫芦画瓢，下面来演
mysql>select*fromqq1;
现在要删除id大于5的记录：
8rows in set(0.03sec)
mysql> select*from qq1;
表数据为：
mysql>deletefromqq1whereid>5;
友情提醒：
mysql>
8 rows in set (0.02 sec)
id|class_id|fist_name|last_name
QueryOK,3rowsaffected(0.00sec)
11la
|id|name|class|score
81
id|class_id|fist_name|last_name
3
2
11
9
5
2
11
8|h
4
3
6
5
41d
3|c
delete忘加where条件误操作恢复（模拟Oracle闪回功能）
Te
101|lo
10
1
101
102|wong
101|zhou
11
+-
：千万不要在生产环境下测试。
2
1
dao
°
dong
huo
wong
zhou
|56
19
3
8
.…-+
y
4
11gang
3gang
8gang
7gang
6gang
2gang
1gang
2gang
5gang
4gang
3gang
---
## Page 123
INTO/g;s/WHERE/SELECT/g;|sed-r's/(@4.*)/\1;/g|sed's/@[1-9]=//g'>insert.sql
[root@hadoop-datanode5~]#cat delete.txt|sed-n'/###/p'|sed's/###//g;s/V**/,/g;s/DELETEFROM/INSERT
##@1=6 /* INT meta=0 nullable=0 is_null=0*/
[root@hadoop-datanode5data]#mysqlbinlog
现在要分析binlog，
[root@hadoop-datanode5~]#
接下来要把它转换为标准的SQL语句：
COMMIT/*I*/;
###DELETEFROM test.qq1
## @4=6gang'/*VARSTRING(30) meta=30 nullable=1 is_null=0*/
#@3='dong'/*VARSTRING(30)meta=30 nullable=1is_null=0*/
5rows in set(0.00 sec)
[root@hadoop-datanode5~]#catinsert.sql
#130526 9:21:42 serverid 140 end_log_pos715
##@4=aa1/*VARSTRING(30)meta=30nullable=1is_null=0*/
##@1=6/*INTmeta=0 nullable=0is_null=0*/
###DELETEFROMtest.qq1
COMMIT/*I*/;
#1305269:00:02serverid140 end_log_pos337
#at310
###
###DELETEFROMtest.qq1
###WHERE
###WHERE
#at688
###WHERE
###@
###DELETEFROMtest.qq1
###
[root@hadoop-datanode5~]#cat/root/delete.txt
|sed-n'/##DELETEFROMtest.qq1/,/COMMIT/p'>/root/delete.txt
-no-defaults-base64-output=decode-rows-v-vmysql-bin.000001
51
41
@3=aa'/*VARSTRING(30)meta=30nullable=1is_nul=0*/
@2=103/*INTmeta=0nullable=1is_null=0*/
@4="8gang'/*VARSTRING(30)meta=30 nullable=1is_null=0*/
@3='dao'/*VARSTRING(30)meta=30 nullable=1is_null=0*/
@2=103/*INTmeta=0nullable=1is_null=0*/
@1=8/*INTmeta=0 nullable=0 is_null=0 */
@3=qo'/*VARSTRING(30)meta=30nullable=1is_null=0*/
@2=103/*INTmeta=0 nullable=1is_null=0*/
@2=102/*INTmeta=0nullable=1is_null=0*/
101|huo
102|son
，以便把误操作 delete 的语句保存到文本里：
5gang
4gang
Xid=92
Xid=88
第3章故障诊断·109
---
## Page 124
110·第二部分故障诊断与性能优化篇
mysql> select*from qq1;
之后将其导人数据库里即可，如下所示：
SELECT
INSERTINTO test.qq1
SELECT
INSERTINTO test.qq1
INSERTINTO test.qq1
INSERTINTO test.q1
mysql>select*from qq1;
Records:1Duplicates:0Warnings:0
QueryOK,1rowaffected(0.00sec)
QueryOK,1rowaffected(0.00sec)
Records:1Duplicates:0Warnings:0
Query OK,1row affected(0.01sec)
mysql>source/root/insert.sql
5rowsinset(0.00sec)
|id|class_id|fist_name|last_name|
[root@hadoop-datanode5~]#
SELECT
SELECT
--+-.
51
41
11
3
'6gang';
,guop,
102,
9
'aa1';
'aa',
103,
6，
'8gang';
,oep
103
'7gang';
'qo',
103,
.
102|son
101|huo
102|wong
101|zhou
|5gang
|4gang
|1gang
3gang
2gang
---
## Page 125
友情提醒：
8rowsinset(0.o0sec)
8
id|class_id|fist_name|last_name
9
4
3
103
1
10
1011
千万不要在生产环境下测试。
dao
son
wong
lo
dong
huo
8gang
6gang
5gang
4gang
3gang
2gang
1gang
第3章故障诊断
三
---
## Page 126
4.1.1在master上删除一条记录时出现的故障
binlog=0，会造成一小部分binlog没接收完，从而导致同步报错。
IO_THREAD 线程接收过来的是3，此时master岩机，会造成相差7个点未传送到 slave上
4.1最常见的3种故障
索，我总结了几种处理方法。本章将针对这些方法进行讲解。
150～200GB，此时单纯地用导出和导人方法，太耗费时间，不可取。经过一段时间的摸
（比如几个GB）的时候，这样做可以，没有任何问题。但如果你的公司数据量很庞大，大到