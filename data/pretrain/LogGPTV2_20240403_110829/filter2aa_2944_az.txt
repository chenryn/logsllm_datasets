The JOSE header
Most of the flexibility of the JOSE and JWT standards is concentrated in the header,
which is an additional JSON object that is included in the authentication tag and con-
tains metadata about the JWT. For example, the following header indicates that the
token is signed with HMAC-SHA-256 using a key with the given key ID:
{
  "alg": "HS256",    
  "kid": "hmac-key-1"      
}
Although seemingly innocuous, the JOSE header is one of the more error-prone
aspects of the specifications, which is why the code you have written so far does not
generate a header, and I often recommend that they are stripped when possible to
create (nonstandard) headless JWTs. This can be done by removing the header section
produced by a standard JWT library before sending it and then recreating it again
before validating a received JWT. Many of the standard headers defined by JOSE can
open your API to attacks if you are not careful, as described in this section.
DEFINITION
A headless JWT is a JWT with the header removed. The recipient
recreates the header from expected values. For simple use cases where you
control the sender and recipient this can reduce the size and attack surface of
using JWTs but the resulting JWTs are nonstandard. Where headless JWTs
can’t be used, you should strictly validate all header values.
The tokens you produced in section 6.1.1 are effectively headless JWTs and adding a
JOSE header to them (and including it in the HMAC calculation) would make them
standards-compliant. From now on you’ll use a real JWT library, though, rather than
writing your own.
THE ALGORITHM HEADER
The alg header identifies the JWS or JWE cryptographic algorithm that was used to
authenticate or encrypt the contents. This is also the only mandatory header value.
The purpose of this header is to enable cryptographic agility, allowing an API to change
the algorithm that it uses while still processing tokens issued using the old algorithm. 
The algorithm
The key identifier
189
JSON Web Tokens
DEFINITION
Cryptographic agility is the ability to change the algorithm used for
securing messages or tokens in case weaknesses are discovered in one algo-
rithm or a more performant alternative is required.
Although this is a good idea, the design in JOSE is less than ideal because the recipi-
ent must rely on the sender to tell them which algorithm to use to authenticate the
message. This violates the principle that you should never trust a claim that you have
not authenticated, and yet you cannot authenticate the JWT until you have processed
this claim! This weakness was what allowed Tim McClean to confuse JWT libraries by
changing the alg header.
 A better solution is to store the algorithm as metadata associated with a key on the
server. You can then change the algorithm when you change the key, a methodology I
refer to as key-driven cryptographic agility. This is much safer than recording the algo-
rithm in the message, because an attacker has no ability to change the keys stored on
your server. The JSON Web Key (JWK) specification allows an algorithm to be associ-
ated with a key, as shown in listing 6.2, using the alg attribute. JOSE defines standard
names for many authentication and encryption algorithms and the standard name for
HMAC-SHA256 that you’ll use in this example is HS256. A secret key used for HMAC
or AES is known as an octet key in JWK, as the key is just a sequence of random bytes
and octet is an alternative word for byte. The key type is indicated by the kty attribute
in a JWK, with the value oct used for octet keys.
DEFINITION
In key-driven cryptographic agility, the algorithm used to authenti-
cate a token is stored as metadata with the key on the server rather than as a
header on the token. To change the algorithm, you install a new key. This
prevents an attacker from tricking the server into using an incompatible
algorithm.
{ 
    "kty": "oct", 
    "alg": "HS256",        
    "k": "9ITYj4mt-TLYT2b_vnAyCVurks1r2uzCLw7sOxg-75g"     
}
The JWE specification also includes an enc header that specifies the cipher used to
encrypt the JSON body. This header is less error-prone than the alg header, but you
should still validate that it contains a sensible value. Encrypted JWTs are discussed in
section 6.3.3.
SPECIFYING THE KEY IN THE HEADER
To allow implementations to periodically change the key that they use to authenticate
JWTs, in a process known as key rotation, the JOSE specifications include several ways to
indicate which key was used. This allows the recipient to quickly find the right key to
verify the token, without having to try each key in turn. The JOSE specs include one
Listing 6.2
A JWK with algorithm claim
The algorithm the key 
is to be used for
The Base64-encoded 
bytes of the key itself
190
CHAPTER 6
Self-contained tokens and JWTs
safe way to do this (the kid header) and two potentially dangerous alternatives listed
in table 6.2. 
DEFINITION
Key rotation is the process of periodically changing the keys used
to protect messages and tokens. Changing the key regularly ensures that the
usage limits for a key are never reached and if any one key is compromised
then it is soon replaced, limiting the time in which damage can be done.
DEFINITION
A server-side request forgery (SSRF) attack occurs when an attacker
can cause a server to make outgoing network requests under the attacker’s
control. Because the server is on a trusted network behind a firewall, this
allows the attacker to probe and potentially attack machines on the internal
network that they could not otherwise access. You’ll learn more about SSRF
attacks and how to prevent them in chapter 10.
There are also headers for specifying the key as an X.509 certificate (used in TLS). Pars-
ing and validating X.509 certificates is very complex so you should avoid these headers.
6.2.3
Generating standard JWTs
Now that you’ve seen the basic idea of how a JWT is constructed, you’ll switch to using
a real JWT library for generating JWTs for the rest of the chapter. It’s always better to
use a well-tested library for security when one is available. There are many JWT and
JOSE libraries for most programming languages, and the https://jwt.io website main-
tains a list. You should check that the library is actively maintained and that the devel-
opers are aware of historical JWT vulnerabilities such as the ones mentioned in this
chapter. For this chapter, you can use Nimbus JOSE + JWT from https://connect2id
.com/products/nimbus-jose-jwt, which is a well-maintained open source (Apache 2.0
licensed) Java JOSE library. Open the pom.xml file in the Natter project root folder and
add the following dependency to the dependencies section to load the Nimbus library:
      com.nimbusds
      nimbus-jose-jwt
Table 6.2
Indicating the key in a JOSE header
Header
Contents
Safe?
Comments
kid
A key ID
Yes
As the key ID is just a string identifier, it can be safely looked up in a 
server-side set of keys.
jwk
The full key
No
Trusting the sender to give you the key to verify a message loses all 
security properties.
jku
An URL to 
retrieve the 
full key
No
The intention of this header is that the recipient can retrieve the key 
from a HTTPS endpoint, rather than including it directly in the mes-
sage, to save space. Unfortunately, this has all the issues of the 
jwk header, but additionally opens the recipient up to SSRF attacks.
191
JSON Web Tokens
      8.19
Listing 6.3 shows how to use the library to generate a signed JWT. The code is generic
and can be used with any JWS algorithm, but for now you’ll use the HS256 algorithm,
which uses HMAC-SHA-256, just like the existing HmacTokenStore. The Nimbus
library requires a JWSSigner object for generating signatures, and a JWSVerifier for
verifying them. These objects can often be used with several algorithms, so you should
also pass in the specific algorithm to use as a separate JWSAlgorithm object. Finally,
you should also pass in a value to use as the audience for the generated JWTs. This
should usually be the base URI of the API server, such as https:/ /localhost:4567. By
setting and verifying the audience claim, you ensure that a JWT can’t be used to access
a different API, even if they happen to use the same cryptographic key. To produce
the JWT you first build the claims set, set the sub claim to the username, the exp claim
to the token expiry time, and the aud claim to the audience value you got from the
constructor. You can then set any other attributes of the token as a custom claim,
which will become a nested JSON object in the claims set. To sign the JWT you then
set the correct algorithm in the header and use the JWSSigner object to calculate the
signature. The serialize() method will then produce the JWS Compact Serialization
of the JWT to return as the token identifier. Create a new file named SignedJwtToken-
Store.java under src/main/resources/com/manning/apisecurityinaction/token and
copy the contents of the listing.
package com.manning.apisecurityinaction.token;
import javax.crypto.SecretKey;
import java.text.ParseException;
import java.util.*;
import com.nimbusds.jose.*;
import com.nimbusds.jwt.*;
import spark.Request;
public class SignedJwtTokenStore implements TokenStore {
    private final JWSSigner signer;                           
    private final JWSVerifier verifier;                       
    private final JWSAlgorithm algorithm;                     
    private final String audience;                            
    public SignedJwtTokenStore(JWSSigner signer,              
               JWSVerifier verifier, JWSAlgorithm algorithm,  
               String audience) {                             
        this.signer = signer;                                 
        this.verifier = verifier;                             
        this.algorithm = algorithm;                           
        this.audience = audience;                             
    }
Listing 6.3
Generating a signed JWT
Pass in the 
algorithm, 
audience, and 
signer and 
verifier objects.
192
CHAPTER 6
Self-contained tokens and JWTs
    @Override
    public String create(Request request, Token token) {
        var claimsSet = new JWTClaimsSet.Builder()         
                .subject(token.username)                   
                .audience(audience)                        
                .expirationTime(Date.from(token.expiry))   
                .claim("attrs", token.attributes)          
                .build();                                  
        var header = new JWSHeader(JWSAlgorithm.HS256);   
        var jwt = new SignedJWT(header, claimsSet);       
        try {
            jwt.sign(signer);    
            return jwt.serialize();     
        } catch (JOSEException e) {
            throw new RuntimeException(e);
        }
    }
    @Override
    public Optional read(Request request, String tokenId) {
        // TODO
        return Optional.empty();
    }
    @Override
    public void revoke(Request request, String tokenId) {
        // TODO
    }
}
To use the new token store, open the Main.java file in your editor and change the
code that constructs the JsonTokenStore and HmacTokenStore to instead construct a
SignedJwtTokenStore. You can reuse the same macKey that you loaded for the Hmac-
TokenStore, as you’re using the same algorithm for signing the JWTs. The code
should look like the following, using the MACSigner and MACVerifier classes for sign-
ing and verification using HMAC:
var algorithm = JWSAlgorithm.HS256;                   
var signer = new MACSigner((SecretKey) macKey);       
var verifier = new MACVerifier((SecretKey) macKey);   
TokenStore tokenStore = new SignedJwtTokenStore(                 
        signer, verifier, algorithm, "https://localhost:4567");  
var tokenController = new TokenController(tokenStore);
You can now restart the API server, create a test user, and log in to see the created JWT:
$ curl -H 'Content-Type: application/json' \
  -d '{"username":"test","password":"password"}' \
  https://localhost:4567/users
{"username":"test"}
Create the JWT 
claims set with 
details about 
the token.
Specify the algorithm 
in the header and 
build the JWT.
Sign the JWT
using the
JWSSigner
object.
Convert the signed 
JWT into the JWS 
compact serialization.
Construct the MACSigner 
and MACVerifier objects 
with the macKey.
Pass the signer, verifier, algorithm, and
audience to the SignedJwtTokenStore.
193
JSON Web Tokens
$ curl -H 'Content-Type: application/json' -u test:password \
  -d '' https://localhost:4567/sessions
{"token":"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN0IiwiYXVkIjoiaHR0cH
➥ M6XC9cL2xvY2FsaG9zdDo0NTY3IiwiZXhwIjoxNTc3MDA3ODcyLCJhdHRycyI
➥ 6e319.nMxLeSG6pmrPOhRSNKF4v31eQZ3uxaPVyj-Ztf-vZQw"}
You can take this JWT and paste it into the debugger at https://jwt.io to validate it and
see the contents of the header and claims, as shown in figure 6.3.
WARNING
While jwt.io is a great debugging tool, remember that JWTs are
credentials so you should never post JWTs from a production environment
into any website.
6.2.4
Validating a signed JWT
To validate a JWT, you first parse the JWS Compact Serialization format and then use
the JWSVerifier object to verify the signature. The Nimbus MACVerifier will calcu-
late the correct HMAC tag and then compare it to the tag attached to the JWT using a
constant-time equality comparison, just like you did in the HmacTokenStore. The Nim-
bus library also takes care of basic security checks, such as making sure that the algo-
rithm header is compatible with the verifier (preventing the algorithm mix up attacks
The encoded JWT
The decoded header and claims
Paste the Base64-encoded key here.
Indicates if the signature is valid
Figure 6.3
The JWT in the jwt.io debugger. The panels on the right show the decoded 
header and payload and let you paste in your key to validate the JWT. Never paste a 
JWT or key from a production environment into a website.
194
CHAPTER 6
Self-contained tokens and JWTs
discussed in section 6.2), and that there are no unrecognized critical headers. After
the signature has been verified, you can extract the JWT claims set and verify any con-
straints. In this case, you just need to check that the expected audience value appears
in the audience claim, and then set the token expiry from the JWT expiry time claim.
The TokenController will ensure that the token hasn’t expired. Listing 6.4 shows the
full JWT validation logic. Open the SignedJwtTokenStore.java file and replace the
read() method with the contents of the listing.
    @Override
    public Optional read(Request request, String tokenId) {
        try {
            var jwt = SignedJWT.parse(tokenId);                 
            if (!jwt.verify(verifier)) {                        
                throw new JOSEException("Invalid signature");   
            }                                                   
            var claims = jwt.getJWTClaimsSet();
            if (!claims.getAudience().contains(audience)) {      
                throw new JOSEException("Incorrect audience");   
            }                                                    
            var expiry = claims.getExpirationTime().toInstant();   
            var subject = claims.getSubject();                     
            var token = new Token(expiry, subject);                
            var attrs = claims.getJSONObjectClaim("attrs");        
            attrs.forEach((key, value) ->                          
                    token.attributes.put(key, (String) value));    
            return Optional.of(token);
        } catch (ParseException | JOSEException e) {
            return Optional.empty();    
        }
    }
You can now restart the API and use the JWT to create a new social space:
$ curl -H 'Content-Type: application/json' \
  -H 'Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ0ZXN
➥ 0IiwiYXVkIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo0NTY3IiwiZXhwIjoxNTc
➥ 3MDEyMzA3LCJhdHRycyI6e319.JKJnoNdHEBzc8igkzV7CAYfDRJvE7oB2md
➥ 6qcNgc_yM' -d '{"owner":"test","name":"test space"}' \
  https://localhost:4567/spaces
{"name":"test space","uri":"/spaces/1"}
Listing 6.4
Validating a signed JWT
Parse the JWT and 
verify the HMAC 
signature using the 
JWSVerifier.
Reject the token if the
audience doesn’t contain
your API’s base URI.
Extract token
attributes from
the remaining
JWT claims.
If the token is invalid, 
then return a generic 
failure response.
195
Encrypting sensitive attributes
6.3
Encrypting sensitive attributes
A database in your datacenter, protected by firewalls and physical access controls, is a
relatively safe place to store token data, especially if you follow the hardening advice
in the last chapter. Once you move away from a database and start storing data on the
client, that data is much more vulnerable to snooping. Any personal information
about the user included in the token, such as name, date of birth, job role, work loca-
tion, and so on, may be at risk if the token is accidentally leaked by the client or stolen
though a phishing attack or XSS exfiltration. Some attributes may also need to be
kept confidential from the user themselves, such as any attributes that reveal details of
the API implementation. In chapter 7, you’ll also consider third-party client applica-
tions that may not be trusted to know details about who the user is.
 Encryption is a complex topic with many potential pitfalls, but it can be used suc-
cessfully if you stick to well-studied algorithms and follow some basic rules. The goal
of encryption is to ensure the confidentiality of a message by converting it into an
obscured form, known as the ciphertext, using a secret key. The algorithm is known as
a cipher. The recipient can then use the same secret key to recover the original plain-
text message. When the sender and recipient both use the same key, this is known as
secret key cryptography. There are also public key encryption algorithms in which the
sender and recipient have different keys, but we won’t cover those in much detail in
this book.
 An important principle of cryptography, known as Kerckhoff’s Principle, says that an
encryption scheme should be secure even if every aspect of the algorithm is known, so
long as the key remains secret. 
NOTE
You should use only algorithms that have been designed through an
open process with public review by experts, such as the algorithms you’ll use
in this chapter.
Pop quiz
2
Which JWT claim is used to indicate the API server a JWT is intended for?
a
iss
b
sub
c
iat
d
exp
e
aud
f
jti
3
True or False: The JWT alg (algorithm) header can be safely used to determine