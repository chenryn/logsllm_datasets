abseq (? rdsize , @V (32) ) ,
abseq (? res , @V (? x + ?y));
18
19
20
21
22
23
24
25
26 test addNoOverflowHalt expect UNSAT
27
28
for (! id : int ) in ids ()
[? res : AbsDom , ?x: int , ?y: int , ?z: int , ? rdsize : AbsDom ,
? stor : array ]
?x >= 0,
?y >= 0,
?x + ?y ]
?x >= 0,
?y >= 0,
?x + ?y , ? mem : array , ? stor : array , ? cl : bool , ?p: int , ?v: AbsDom , ? cdata :
MState {! id , ! pc }(? size , ? sa , ? mem , ? stor , ?cl , ? cdata ) , ? size > 0,
!a != ~1 , // in case that the position could be pre - computed , use it for accessing the position more precisely
?v = accessWordCalldata {! a }(? cdata ) // accesses word at the corresponding position of the call data
=> MState {! id , ! pc +1}(? size , store ? sa (? size -1) (? v) , ? mem , ? stor , ?cl , ? cdata ) ,
clause [? x: AbsDom , ? size : int , ? sa : array , ? mem : array , ? stor : array , ? cl : bool , ? cdata : CallData , ?p: int , ?v:
AbsDom ]
MState {! id , ! pc }(? size , ? sa , ? mem , ? stor , ?cl , ? cdata ) , ? size > 0,
!a = ~1 , // if the argument could not be preecomputed , extract the argument from stack
?x = select ? sa (? size - 1) ,
?v = ( isConcrete (? x)) ? ( accessWordCalldataEven ( extractConcrete (? x) , ? cdata )) : ( @T ) // if the offset is concrete , try to access the
word at the given position . This will only result in a concrete result if the value is a word position
=> MState {! id , ! pc +1}(? size , store ? sa (? size -1) (? v) , ? mem , ? stor , ?cl , ? cdata );
Figure 16: Rule for CALLDATALOAD in the enhanced abstract semantics.
for (! id : int ) in ids () , (! pc : int ) in pcsForIdAndOpcode (! id , RETURN )
let
macro # StackSizeCheck := MState {! id ,! pc }(? size , ?sa , ? mem , ? stor , ?cl , ? cdata ) , ? size > 1
in
clause [? sa : array , ? mem : array , ? stor : array , ? size : int , ? cl : bool , ? cdata : CallData , ? length : AbsDom ]
1 rule opHaltOnReturn :=
2
3
4
5
6
7
8
9
10
# StackSizeCheck ,
? length = select ? sa (? size -2)
=> Halt {! id }(? stor , ? length , ?cl , ? cdata ) ,
4
5
6
7
8
9
10
11
12
13
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
clause [? sa : array , ? mem : array , ? stor : array , ? size : int , ? cl : bool , ? offset : AbsDom , ? length : AbsDom , ?o:
int , ?l: int , ?p: int , ?v: AbsDom , ? cdata : CallData ]
# StackSizeCheck ,
? offset = select ? sa (? size -1) , // select top values on the stack
? length = select ? sa (? size -2) ,
isConcrete (? offset ) ,
isConcrete (? length ) ,
?o = extractConcrete (? offset ) ,
?l = extractConcrete (? length ) ,
?p >= 0,
(? p * 32)  ReturnData {! id }(? p , ?v , ?cl , ? cdata ) , // careful : the Return data predicate is also inhabited in words !
clause [? sa : array , ? mem : array , ? stor : array , ? size : int , ? cl : bool , ? offset : AbsDom , ? length : AbsDom , ?o:
int , ?l: int , ?p: int , ?v: AbsDom , ? cdata : CallData ]
# StackSizeCheck ,
? offset = select ? sa (? size -1) , // select top values on the stack
? length = select ? sa (? size -2) ,
~ isConcrete (? offset ) , // if we don 't know the offset , but only the length , we write top at the places in the specified range
isConcrete (? length ) ,
?l = extractConcrete (? length ) ,
?p >= 0,
?p * 32  ReturnData {! id }(? p , @T , ?cl , ? cdata ) ,
clause [? sa : array , ? mem : array , ? stor : array , ? size : int , ? cl : bool , ? offset : AbsDom , ? length : AbsDom , ?o:
int , ?l: int , ?p: int , ?v: AbsDom , ? cdata : CallData ]
# StackSizeCheck ,
? length = select ? sa (? size -2) ,
~ isConcrete (? length ) ,
?p >= 0
=> ReturnData {! id }(? p , @T , ?cl , ? cdata );
Figure 17: Rule for RETURN in the enhanced abstract semantics.
the function signature and its hash is provided by Solidity compilers
via the so called Ethereum Contract ABI (Contract Application
Binary Interface). In the future we plan to automatically generate
an infrastructure for functional correctness queries on Solidity
contracts from the contract’s ABI. The first functional correctness
test addOverflowNoHalt requires that it is impossible to reach a Halt state
(which indicates regular halting) from a call to to the add function
in case that the summands ?x and ?y provided as arguments produce
an overflow.
The second functional correctness test (addNoOverflowCorrect) checks
whether it is possible (in case that no overflow occurs) to compute
the expected result (or an over-approximation thereof) in the first
place. Here abseq is the function implementing an equality test on
the abstract domain, hence considering every concrete element to
be potentially equal to @T. By the soundness of the analysis, if this
query would turn out to be unsatisfiable, it would be impossible
for the function to produce the correct result under any circum-
stances. This query of course does not prove that the function will
always provide a result: This indeed is and should not be provable,
since any smart contract can always halt exceptionally when run-
ning out of gas. This test case serves as a sanity check that only
becomes meaningful in conjunction with the following tests. The
third and fourth functional correctness tests (addNoOverflowHalt and
addNoOverflowUnique) prove that given non-overflowing arguments, if
28
eThor: Practical and Provably Sound Static Analysis
of Ethereum Smart Contracts
the function execution halts successfully, nothing but the correct
result can be produced. In other words, it is impossible to halt
successfully without producing the correct result. This property
is composed out of two queries since it needs to be shown that 1)
It is impossible for the function to halt without returning a result
of length 32 (corresponding to one word) as recorded in the Halt
predicate and 2) It is impossible that the actual return value (as
recorded in the ReturnData predicate) differs from the sum of the two
arguments.
The functional correctness tests for the other functions of the
SafeMath library follow the same pattern.
C.3 Automated Testing in HoRSt
The setup for automated testing (see § 5.3) shown in Figure 18
presents a use case for the Hoare-Logic-style reasoning capabili-
ties of eThor and furthermore provides us with the opportunity to
showcase some further features of HoRSt.
We first shortly overview the form of the test cases in the official
EVM test suite: Test cases come in two flavors: the first group
consists of 490 test cases specifying a storage configuration as
postcondition, the second group, consisting of 108 test cases, lacks
a post condition (which we interpreted as requiring an exceptional
halt).
To account for this test structure we declare four additional selec-
tor functions: The selector functions preStorageForId and postStorageForId
provide tuples of storage offsets and values which specify the
storage contents before and after the execution of the contract.
emptyListIfNoPostConditionForId and dummyListIfNoPostConditionForId generate
an empty list, respectively a list with one element, depending on if
there is a postcondition specified or not. Since rules are generated
for the cross product of their selector functions return values, we
can use these functions to generate different rules for different test
cases while still using the same HoRSt inputs.
The rule for initialization, initOp, differs in one value from the
definition used in the other experiments. In line 11, we populate
an array with the values returned by preStorageForId, starting from an
array containing only zeroes.
In case we want to check for the reachability of a certain stor-
age configuration, we generate the two queries correctValues and
uniqueValues. correctValues is successful, if a Halt predicate is reachable
whose storage contains 1) values abstractly equal to the values re-
turned by postStorageForId at the offsets returned by postStorage and
2) a value abstractly equal to 0 for all offsets not returned by
postStorageForId. uniqueValues is successful, if no Halt predicate is reach-
able whose storage contains any value abstractly unequal to the
values returned by postStorageForId. This is only the case, if every
value in the memory is concrete. Summing up, such a test case
is considered to be solved correctly if correctValues is successful and
considered to be solved precisely if correctValues and uniqueValues are
successful.
In case we want to check for exceptional halting, we just query
for the unreachability of a regular Halt predicate (see irregularHalt).
Such a query is considered solved precisely on success and impre-
cisely on failure, since reaching additional program states (Halt in
this instance), which are not reachable in the concrete execution, is
a sign of over-approximation.
Accepted for ACM CCS, 2020
D SOUNDNESS ISSUES IN RELATED WORK
This section reviews the soundness problems of other works on
static smart contract analysis. We thereby focus on those works
that make soundness claims. We first overview soundness prob-
lems in the reconstruction of smart contracts’ control flow graphs
(which particularly affects the Securify analyzer [48]) and after-
wards successively discuss the issues in the analyses performed
by [48], [37], [24], and [34]. Where possible, we provide repro-
ducible evidence in form of concrete counter-examples for the
spotted sources of unsoundness.
D.1 Control Flow Reconstruction
Most tools that analyze Ethereum smart contracts at the level of
bytecode base their analysis on the contract’s control flow graph
(CFG). However, the design of the EVM bytecode language does not
allow for an easy reconstruction of a contract’s control flow since
jump destinations are not statically fixed, but might be dynamically
computed. More precisely, in EVM bytecode jump destinations are
read from the stack and hence can be subject to prior computations.
Even though the set of potential jump destinations is statically
determined (since only such program counters with a JUMPDEST
instruction constitute valid jump destinations), the concrete desti-
nation of a jump instruction might only be dispatched at runtime.
The challenge hence lies in statically narrowing down the set of
possible jump destinations for each branch instruction (JUMP or
JUMPI). To this end, the state-of-the-art analyzer [48] employs a
custom algorithm, another popular solution [44] uses an external
open-source tool [7] for control flow graph reconstruction. While
correctness for both of them has never been discussed, flaws in
the CFG reconstruction can lead to catastrophic consequences: An
unsound reconstruction that erroneously excludes possible jump
destinations, can deem parts of the contract code unreachable that
carries critical and potentially unsafe functionality (e.g., reentrant
calls).
When reviewing the algorithms used in [48] and [7], we found
soundness issues in both approaches as we will discuss in the follow-
ing. In Figure 19 we show a compact example of a smart contract’s
control flow that is recovered incorrectly by [7, 48] with no errors
reported. Intuitively, the control flow of this contract should not be
fully recoverable because one of its jump destinations depends on
some blockchain information (the block hash and the block number)
which cannot be statically predicted, but will only be fixed once
the contract has been published on the blockchain.
The smart contract is structured into five basic blocks. The first
block (starting at program counter 0), initializes the local machine
check with two 0 values and continues with the execution of the
second block starting at program counter 7 ( 1 ). The second block
can be entered via a jump (since it starts with a JUMPDEST instruc-
tion). It intuitively takes two stack values as arguments, the first
one functioning as jump offset and the second being the jump con-
dition: it computes the next jump destination as the sum of 20 and
the top stack element and conditionally jumps to this destination
based on the second stack value. In the first iteration since both of
these values are 0 (and so particularly the condition is 0), no jump
is performed, but instead the execution proceeds with block three
(starting at program counter 12) with the empty stack ( 2 ). This
29
Accepted for ACM CCS, 2020
Clara Schneidewind, Ilya Grishchenko, Markus Scherer, and Matteo Maffei
for (! offset : int , ! value : int ) in preStorageForId (! id ): x: array  -> store x ! offset @V (! value ) , [ @V (0) ],
false );
for (! id : int ) in ids ()
clause
true
=> MState {! id , 0}(0 , [ @V (0) ], [ @V (0) ],
1 sel preStorageForId : int -> [ int * int ];
2 sel postStorageForId : int -> [ int * int ];
3 sel emptyListIfNoPostConditionForId : int -> [ bool ];
4 sel dummyListIfNoPostConditionForId : int -> [ bool ];
5