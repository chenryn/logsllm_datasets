nous communication over secure point-to-point channels. Let 𝑛
be the number of parties, which will be denoted by 𝑃1, . . . , 𝑃𝑛. All
players share a public input 𝑥, and each player 𝑃𝑖 holds a local
private input 𝑤𝑖. We consider protocols that can securely compute
a 𝑛-input function 𝑓 that maps the inputs ((𝑥, 𝑤1), . . . , (𝑥, 𝑤𝑛)) to
a 𝑛-tuple of boolean outputs. We will consider 𝑓 to be a boolean
function, so the output values given to all parties by 𝑓 are the same.
A protocol Π is specified via its next-message function. That
is, Π(𝑖, 𝑥, 𝑤𝑖, 𝑟𝑖, (𝑚1, . . . , 𝑚 𝑗)) returns the set of 𝑛 messages sent by
𝑃𝑖 in round 𝑗 + 1, given the public input 𝑥, its local input 𝑤𝑖, its
random coins 𝑟𝑖, and the messages 𝑚1, . . . , 𝑚 𝑗 received in the first 𝑗
rounds. The output of Π may also indicate that the protocol should
terminate, in which case Π returns the local output of 𝑃𝑖. The view
of 𝑃𝑖, denoted by 𝑉𝑖, includes 𝑥, 𝑤𝑖, 𝑟𝑖 and the messages received
by 𝑃𝑖 during the execution of Π. Note that Π and 𝑉𝑖 fully define
the set of messages sent by 𝑃𝑖 and also its output. The following
notions of consistency are important for the MitH transformation.
Definition 2.2 (Consistent Views). A pair of views 𝑉𝑖, 𝑉𝑗 are con-
sistent (wrt protocol Π and some public input 𝑥) if the outgoing
messages implicit in 𝑉𝑖 sent from party 𝑖 to party 𝑗 are identical to
the incoming messages to 𝑗 from 𝑖 reported in 𝑉𝑗, and vice versa.
Lemma 2.3 (Local vs. global consistency [25]). Let Π be a 𝑛-
party protocol and 𝑥 be a public input. Let (𝑉1, . . . , 𝑉𝑛) be a 𝑛-tuple of
(possibly incorrect) views. Then all pairs of views 𝑉𝑖, 𝑉𝑗 are consistent
with respect to Π and 𝑥 if and only if there exists an honest execution
of Π with public input 𝑥 (and some choice of private inputs 𝑤𝑖 and
random inputs 𝑟𝑖) in which 𝑉𝑖 is the view of 𝑃𝑖 for every 1 ≤ 𝑖 ≤ 𝑛.
3Two distributions are indistinguishable if, for all distinguishers returning a bit, the
probability that the distinguisher returns 1 when fed with a value sampled from either
of the distributions changes by a small quantity 𝜖. Our indistinguishability proofs are
given as reductions, so they imply computational/statistical/perfect security when the
underlying components are themselves computationally/statistically/perfectly secure.
We consider security in the semi-honest model. Correctness entails
that parties obtain the correct result in an honest execution, and
𝑡-privacy requires the existence of a simulator that can replicate
the views of 𝑡 corrupt parties without knowing anything about the
honest parties’ inputs (see the full version).
2.3 MPC-in-the-Head
We give here a view of MitH that closely follows our formalization.
We rely on MPC protocols where party inputs are encoded as a
fixed number of elements in a finite field F𝑞, for 𝑞 ≥ 2 prime: 𝑥
encodes public information about the statement to be proved; each
𝑤𝑖 is a secret share of 𝑤, the witness known only to the prover.
Here, 𝑤 is itself a fixed, say 𝑘, number of elements in F𝑞.
We write (𝑤1, . . . , 𝑤𝑛) ←← share(𝑤) to denote the secret sharing
operation and 𝑤 ← unshare(𝑤1, . . . , 𝑤𝑛) for unsharing, where the
former is probabilistic. We set this secret sharing operation to the
trivial splitting into 𝑛 shares, where each 𝑤𝑖 is a 𝑘-tuple in F𝑞,
the first 𝑛 − 1 shares are chosen uniformly at random, and 𝑤𝑛 is
1 𝑤𝑖 with addition performed pointwise over
𝑞. The crucial properties are perfect correctness (i.e., unsharing
F𝑘
always recovers the witness) and 2-privacy (any two shares look
perfectly random and reveal nothing about 𝑤).
computed as 𝑤 −𝑛−1
MPC computations are specified by algebraic circuits over F𝑞,
i.e., sequences of additions and multiplications over values in F𝑞.
Note that this computational model is functionally complete (see
the full version). We start by fixing an arbitrary circuit 𝐶 that com-
putes a boolean function 𝑓 (𝑥, 𝑤1, . . . , 𝑤𝑛), and an MPC protocol
that guarantees 𝐶 is computed correctly and securely as above.
We will impose that 𝑓 is such that its output depends only on the
value that results from unsharing (𝑤1, . . . , 𝑤𝑛), i.e, it must hold
that 𝑓 (𝑥, 𝑤1, . . . , 𝑤𝑛) = 𝑓 (𝑥, 𝑤′
𝑛) if unshare(𝑤1, . . . , 𝑤𝑛) =
unshare(𝑤′
𝑛). The MitH construction then yields a ZK pro-
tocol that permits proving statements of the form
1, . . . , 𝑤′
1, . . . , 𝑤′
𝑅(𝑥, 𝑤) := ∃(𝑤1, . . . , 𝑤𝑛),
(cid:26) (𝑤1, . . . , 𝑤𝑛) ∈ share(𝑤)
𝑓 (𝑥, 𝑤1, . . . , 𝑤𝑛) = 1
.
(1)
This is essentially the same as defining function 𝑓 on all points ac-
cording to 𝑓 (𝑥, 𝑤1, . . . , 𝑤𝑛) := 𝑅(𝑥, SS.unshare(𝑤1, . . . , 𝑤𝑛)) , and
then building a circuit 𝐶 for it. In our work we do not handle the
constructive step of building a circuit 𝐶, and we formalize instead
the relation induced by a well-formed circuit.4
In short, the MitH ZK protocol runs in three steps as follows:
Commit The prover on input (𝑥, 𝑤) first takes the witness 𝑤 and
secret shares it into (𝑤1, . . . , 𝑤𝑛). It then executes the full MPC pro-
tocol (emulating all parties in the head) on inputs (𝑥, 𝑤1, . . . , 𝑤𝑛).
The prover creates 𝑛 commitments that bind it to the views of the
𝑛 parties (i.e., their inputs, the randomness that they used, and the
messages they received); the commitments are sent to the verifier.
Challenge The verifier chooses a pair of parties (𝑖, 𝑗) uniformly
at random and sends this challenge to the verifier.
Response The prover sends the views of parties (𝑖, 𝑗) to the verifier
by opening the corresponding commitments.
4Note that the relation induced by 𝑓 in Equation 1 is well-defined even when share
is not surjective over the space of shares; this is not relevant for the trivial splitting
we described above, but it is relevant for the optimized instantiation of MitH using
Maurer’s protocol that we describe in Section 4.
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2589Verification The verifier checks that the party views it received
satisfy the following properties: (i) they are consistent with the
originally received commitments (ii) they are mutually consistent
wrt the messages sent and received (sent messages can be recom-
puted using the randomness and incoming messages so far by each
party), and (iii) both parties conclude outputting 𝑡𝑟𝑢𝑒. The verifier
accepts if and only if all checks are completed successfully.
We discuss the proofs of the completeness, zero knowledge and
soundness properties of this construction in the next section, when
we explain our formalization.
2.4 Background on EasyCrypt and Jasmin
EasyCrypt is an interactive proof assistant tailored for cryptography.
It adopts the code-based approach, in which primitives, security
goals and hardness assumptions are expressed as probabilistic pro-
grams. Its theory system promotes modular reasoning, where a
theory is a collection of types and operators, and its cloning mech-
anism allows theories to further refine the types and operators of
more abstract theories, or to combine the elements of existing ones.
The EasyCrypt executable code extraction tool used in this paper
has been recently presented in [19]. This tool allows to extract
OCaml executable code from an EasyCrypt proof script where code
is defined via functional operators. We note that code extraction
to OCaml is a common way to obtain high-assurance code that is
correct by construction and it is used in the Jasmin compiler itself
and other formally verified tools such as CompCert.
Jasmin [2] is a pre-assembly language that was developed for
high-speed and high-assurance cryptography. Jasmin implementa-
tions are predictably transformed into assembly programs by the
Jasmin compiler, which is formally verified in Coq. Predictability
empowers Jasmin programmers to develop optimized implementa-
tions with essentially the same level of control as if they were using
assembly. Jasmin source-code can also be extracted into an Easy-
Crypt representation, supported by an axiomatic semantics. Taken
together, Jasmin and EasyCrypt provide a convenient framework
to develop efficient verified implementations.
3 MACHINE-CHECKED MPC-IN-THE-HEAD
Our EasyCrypt development defines an abstract and modular in-
frastructure that follows the general MitH, and can be instantiated
with different concrete components. Figure 1 depicts the relation
between all these components in our formalization. In what follows,
we will provide a more detailed view, resorting directly to snippets
of EasyCrypt code simplified for readability. Subsequent sections
will discuss concrete instantiations and implementations.
3.1 ZK Protocols and MitH Building Blocks
The following definitions fix the commit-challenge-response three
pass protocol structure of ZK protocols in EasyCrypt, since this
is all that is required for the MitH transformation. These are the
types and operators that must be defined by concrete ZK protocols.
op relation : witness_t → statement_t → bool.
op language(x : statement_t) = ∃ w, relation w x = true.
type prover_input_t = witness_t * statement_t.
type verifier_input_t = statement_t.
type prover_output_t = unit.
type verifier_output_t = bool.
op commit : prover_rand_t → prover_input_t →
op challenge : verifier_rand_t → verifier_input_t → commitment_t →
op response : prover_state_t → challenge_t → response_t.
op check : verifier_state_t → response_t → bool.
prover_state_t * commitment_t.
verifier_state_t * challenge_t.
type trace_t = commitment_t * challenge_t * response_t.
op protocol (r : prover_rand_t * verifier_rand_t)
(x : prover_input_t * verifier_input_t)
: trace_t * (prover_output_t * verifier_output_t) =
let (r_p, r_v) = r in let (x_p, x_v) = x in
let (st_p,c) = commit r_p x_p in
let (st_v,ch) = challenge r_v x_v c in
let r = response st_p ch in
let b = check st_v r in ((c, ch, r), ((),b)).
Types that are undefined at this level must be specified by each
protocol. This is the case, for example, for the types of witnesses
and statements, but not for the outputs of the prover and verifier,
which are hardwired in the syntax to be the singleton type and a
boolean value, respectively. Each protocol is associated with a rela-
tion, which at this level is modeled as an abstract boolean function.
Finally, the theory also defines what it means to honestly execute
the protocol via the protocol operator. Note that all algorithms are
derandomized, in the sense that they take randomness sampled
from elsewhere. This is because in our implementations we also
must follow this structure, and our results assume that randomness
used by honest parties is sampled uniformly at random both at the
specification and implementation levels.
All the security properties are defined as EasyCrypt games. These
games are parametrized by adversarial entities, over which the def-
initions of security are quantified (e.g., malicious provers/verifiers)
and also by modules that capture the ideal sampling of random-
ness for the honest parties. As a simple example, the completeness
property is defined by the following game:
module Completeness(R : Rand_t) = {
proc main(w : witness_t, x : statement_t) : bool = {
(r_p, r_v) <@ R.gen();
(tr,y) ← protocol (r_p, r_v) ((w,x), x);
return (snd y); } }.
The game is defined within a module, which is parameterized by
another module R that samples randomness. This is because ran-
domness sampling procedures must be specified for each protocol.
The experiment calls the procedure R.gen (special syntax <@ is used
for procedure calls) to obtain randomness for both prover and veri-
fier, runs the full protocol, and outputs the result produced by the
verifier. A completeness claim in EasyCrypt can be written as:
∀ w x, relation w x ⇒ Pr [ Completeness(R).main(w,x) : res ] = 1.
Here res is a reserved word in EasyCrypt that refers to the event
that a procedure returning a boolean value outputs true.
Soundness. For the soundness definition, we need to quantify
over potentially malicious provers. In EasyCrypt this is done by
defining a module type, i.e., the interface that the adversary exposes.
Module type MProver_t specifies this interface.
module type MProver_t = {
proc commitment (x: statement_t) : commitment_t
proc response(x : statement_t, c : commitment_t, ch : challenge_t) :
response_t}.
Observe that a malicious prover keeps arbitrary internal state
and can sample arbitrary randomness which is out of control of the
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2590Figure 1: Overview of the relation between different parts of our formalization, annotated with overall lines of proof code
(eclocs = EasyCrypt lines of code). The horizontal dotted line separates abstract MitH components (above) from concrete
instantiations (below). Black and green shapes represent abstract cryptographic constructions and their respective instantiations.
Blue rectangles depict security definitions applied to the connected constructions. Double arrows and bold arrows indicate
component instantiation and sub-components, respectively. Yellow rectangles denote executable code for the implementations.
security experiment. The soundness property can now be expressed
as a game parameterized by an attacker of this type, in addition to
the module that samples randomness for the honest verifier. This
allows us to quantify universally over malicious provers.
module Soundness(RV : RandV_t, MP : MProver_t) = {
proc main(x : statement_t) : bool = {
r_v <@ RV.gen();
c <@ MP.commitment(x);
(st_r, ch) ← challenge r_v x c;
resp <@ MP.response(x, c, ch);
return (check st_r resp); } }.
A soundness claim, for some fixed RV, can be written as:
∀ x MP, !language x ⇒ Pr [ Soundness(RV,MP).main(x) : res ] ≤ epsilon.
Zero-Knowledge. We formalize two versions of the ZK property.
We present here the one we use to obtain a first (intermediate)
result for the concrete protocol produced by the MitH construction
(we call this the single-run ZK property). We defer to Section 3.4 an
explanation of how to derive a proof for the standard ZK property
using a repetition argument, as in [25].
The single-run ZK property is formalized by defining two exper-
iments, typically known as the real and ideal worlds. We capture
both worlds with a single module ZKGame, which can be parameter-
ized by a real-world evaluator or an ideal-world evaluator.
module type MVerifier_t = {
proc challenge(x : statement_t, c : commitment_t) :
challenge_t * verifier_state_t }.
module type Evaluator_t (MV : MVerifier_t) = {