        int size = s.readInt();
        if (size )this) instanceof LinkedHashSet ?
               new LinkedHashMap(capacity, loadFactor) :
               new HashMap(capacity, loadFactor));
        // Read in all elements in the proper order.
        for (int i=0; i elements && (length & 1) == 0)
            length--;
        if (origlength > 0 && length > origlength)
            length = origlength;
        table = new Entry[length];
        threshold = (int)Math.min(length * loadFactor, MAX_ARRAY_SIZE + 1);
        count = 0;
        // Read the number of elements and then all the key/value objects
        for (; elements > 0; elements--) {
            @SuppressWarnings("unchecked")
                K key = (K)s.readObject();
            @SuppressWarnings("unchecked")
                V value = (V)s.readObject();
            // synch could be eliminated for performance
            reconstitutionPut(table, key, value);
        }
    }private void readObject(java.io.ObjectInputStream s)         throws IOException, ClassNotFoundException{    // Read in the length, threshold, and loadfactor    s.defaultReadObject();
        // Read the original length of the array and number of elements    int origlength = s.readInt();    int elements = s.readInt();
        // Compute new size with a bit of room 5% to grow but    // no larger than the original size.  Make the length    // odd if it's large enough, this helps distribute the entries.    // Guard against the length ending up zero, that's not valid.    int length = (int)(elements * loadFactor) + (elements / 20) + 3;    if (length > elements && (length & 1) == 0)        length--;    if (origlength > 0 && length > origlength)        length = origlength;    table = new Entry[length];    threshold = (int)Math.min(length * loadFactor, MAX_ARRAY_SIZE + 1);    count = 0;
        // Read the number of elements and then all the key/value objects    for (; elements > 0; elements--) {        @SuppressWarnings("unchecked")            K key = (K)s.readObject();        @SuppressWarnings("unchecked")            V value = (V)s.readObject();        // synch could be eliminated for performance        reconstitutionPut(table, key, value);    }}
在readObject方法中会根据Hashtable的元素个数判断调用reconstitutionPut(table, key,
value)方法的次数，跟进reconstitutionPut方法。
    private void reconstitutionPut(Entry[] tab, K key, V value)
        throws StreamCorruptedException
    {
        if (value == null) {
            throw new java.io.StreamCorruptedException();
        }
        // Makes sure the key is not already in the hashtable.
        // This should not happen in deserialized version.
        int hash = key.hashCode();
        int index = (hash & 0x7FFFFFFF) % tab.length;
        for (Entry e = tab[index] ; e != null ; e = e.next) {
            if ((e.hash == hash) && e.key.equals(key)) {
                throw new java.io.StreamCorruptedException();
            }
        }
        // Creates the new entry.
        @SuppressWarnings("unchecked")
            Entry e = (Entry)tab[index];
        tab[index] = new Entry<>(hash, key, value, e);
        count++;
    }private void reconstitutionPut(Entry[] tab, K key, V value)    throws StreamCorruptedException{    if (value == null) {        throw new java.io.StreamCorruptedException();    }    // Makes sure the key is not already in the hashtable.    // This should not happen in deserialized version.    int hash = key.hashCode();    int index = (hash & 0x7FFFFFFF) % tab.length;    for (Entry e = tab[index] ; e != null ; e = e.next) {        if ((e.hash == hash) && e.key.equals(key)) {            throw new java.io.StreamCorruptedException();        }    }    // Creates the new entry.    @SuppressWarnings("unchecked")        Entry e = (Entry)tab[index];    tab[index] = new Entry<>(hash, key, value, e);    count++;}
在reconstitutionPut方法中会调用e.key.equals(key)方法。依靠之前的CommonsCollections利用链的经验，需要在入口类通过各种方法的调用，从而调用到LazyMap#get方法，CommonsCollections7的gadget构造思路也如此，Gadget作者通过调用equals方法，串联入口类和LazyMap。由于在序列化对象构造时，将LazyMap对象作为Hashtable的key值传入到Hashtable的元素中。因此在调用e.key.equals(key)方法时，实质是调用LazyMap#equals方法。
LazyMap继承于AbstractMapDecorator抽象类，从而调用AbstractMapDecorator#equals方法。
    public boolean equals(Object object) {
        if (object == this) {
            return true;
        }
        return map.equals(object);
    }
其中的map对象则是在调用LazyMap.decorate方法时传入的HashMap
    Map innerMap1 = new HashMap();
    Map innerMap2 = new HashMap();
    // Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject
    Map lazyMap1 = LazyMap.decorate(innerMap1, transformerChain);
    lazyMap1.put("yy", 1);
    Map lazyMap2 = LazyMap.decorate(innerMap2, transformerChain);
    lazyMap2.put("zZ", 1);
因此最终调用HashMap继承的抽象类AbstractMap中的equals方法
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Map))
            return false;
        Map m = (Map) o;
        if (m.size() != size())
            return false;
        try {
            Iterator> i = entrySet().iterator();
            while (i.hasNext()) {
                Entry e = i.next();
                K key = e.getKey();
                V value = e.getValue();
                if (value == null) {
                    if (!(m.get(key)==null && m.containsKey(key)))
                        return false;
                } else {
                    if (!value.equals(m.get(key)))
                        return false;
                }
            }
        } catch (ClassCastException unused) {
            return false;
        } catch (NullPointerException unused) {
            return false;
        }
        return true;
    }
并在AbstractMap#equals方法汇总调用传入对象的get方法。这里重点跟踪一下如何将LazyMap对象作为传入对象传入的，根据上述调用流程逆推，可以看到AbstractMap#equals(Object
o)传入参数o是取决于reconstitutionPut方法中调用e.key.equals(key)方法中传入的key值。在这里可以解答上述提到的两个问题。
由于在Hashtable反序列化调用reconstitutionPut方法时，会判断tab数组中是否存在元素，如果存在，则进入for循环中调用e.key.equals(key)方法。
    for (Entry e = tab[index] ; e != null ; e = e.next) {
        if ((e.hash == hash) && e.key.equals(key)) {
只有在调用第一次reconstitutionPut方法之后，将第一个Hashtable中的元素传入到tab数组中，在进行第二次调用时，才会保证tab数组非空，从而正常调用e.key.equals(key)方法。
而调用两次reconstitutionPut方法的前提是，需要保证Hashtable中存在两个元素
    for (; elements > 0; elements--) {
        @SuppressWarnings("unchecked")
            K key = (K)s.readObject();
        @SuppressWarnings("unchecked")
            V value = (V)s.readObject();
        // synch could be eliminated for performance
        reconstitutionPut(table, key, value);
    }
并且为了保证e.key.equals(key)方法中
e.key是LazyMap对象，且传入的key参数也需要是LazyMap对象，因此需要实例化两次LazyMap对象，在Hashtable中进行key比较时，完成LazyMap的调用，从而完成利用链的构造。
调用remove清空lazyMap2中的yy元素，是为了保持两个LazyMap对象中的元素个数保持相同，由于在AbstractMap#equals方法中存在LazyMap元素个数比较的判断条件
如果元素个数不同将直接返回false，不会调用后续的get请求，导致利用链失效。
* * *