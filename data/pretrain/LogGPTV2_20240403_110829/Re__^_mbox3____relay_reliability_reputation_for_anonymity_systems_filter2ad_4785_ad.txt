a minority and honest relays are plentiful, lowering FN is more im-
portant than lowering FP. Figure 5 shows that as the drop rate d
increases, FN decreases (except for g = 1, which is not inter-
esting to look at as all the guards are compromised). We see a
similar trend for FP, where the FP error decreases as the drop rate
d increases. This is expected because as the drop rate increases
the distinction between compromised and honest relays becomes
more clearer. So, whether honest relays are heavily penalized (for
g ≥ 2/3) or rewarded (for g ≤ 1/3), the average ranking score
of the relays in the system shifts towards the ranking score of hon-
est relays as the majority of the relays are assumed to be honest.
That is why we see FP error reduce to almost 5%. These results in-
dicate that carrying out active attacks like selective DoS is a losing
proposition for an attacker.
Probability of constructing compromised circuits: Next, we
evaluate the probability of constructing a compromised circuit once
outliers have been discarded. The probability of such an event is:
gf cf +(1−gf )(1−cf )2+(1−d)(1−gf cf −(1−gf )(1−cf )2)
(8)
gf cf
68Figure 4: Ranking score of honest and compromised relays for various fractions of compromised guards. relays that are k =
considered outliers. We can see that even with g = 2/3 a client can successfully ﬁlter out a signiﬁcant portion of the compromised relays.
3 standard deviations away from the mean are
√
cide whether to drop a circuit or not. We vary the reputation thresh-
old chosen by the adversary from -1 to +1 in increments of 0.1. In
all the simulations we compute the drop rate carried out by the ad-
versary along with the probability of constructing a compromised
circuit by clients. Figure 7 shows that as the reputation threshold
increases the drop rate declines to zero. In other words, to obtain
a positive reputation score the adversary cannot afford to to drop
too many circuits. The probability of constructing a compromised
circuit (P r(CXC)) rises to a stable value as drop rate declines to
zero. This happens because with no dropping, the reputation score
of each relay remains unaffected. We, therefore, conclude that Re3
discourages active circuit dropping by compromised relays.
Figure 7: Evaluating drop rate and probability of constructing a compromised circuit
for various reputation threshold. In this scenario compromised relays drop circuits
only if its reputation is above the chosen threshold. We see that to retain positive
reputation compromised relays cannot afford to drop too many circuits.
6.2 Real World Experiments
In this section we perform a series of live experiments on the Tor
network to show the effectiveness of our reputation system. First
of all, we show that clients from different geographic regions suc-
cessfully ﬁlter compromised relays. Next, we determine what kind
of beneﬁt our reputation system provides in terms of reliability.
6.2.1 Filtering Compromised relays
We carried out our experiment by introducing our own relays into
the Tor network, all of which acted as compromised relays. For this
purpose we used 11 Emulab [1] machines, 10 of which were con-
ﬁgured to act as Tor relays with a minimum bandwidth capacity of
20KBps. Note that all our relays belonged to the same /16 subnet,
meaning that no user would (by default) choose two of our relays
in the same circuit. Moreover, to prevent other users from using
our relays as exit relays, we conﬁgured our relays with a ﬁxed exit
policy (allowing connection to only speciﬁc web sites). All these
steps were taken to respect user privacy. To emulate real clients
Figure 5: Average FN and FP with 95% conﬁdence interval against drop rate d. Both
FN and FP decrease as drop rate increases.
where gf cf refers to the fraction of circuits with a compromised
guard and exit, while (1 − gf )(1 − cf )2 refers to the fraction of
circuits with all honest relays at each position in the circuit (gf and
cf represent the fraction of compromised guards and other relays
in the accepted list, respectively). Now we evaluate this probabil-
ity under both guard selection strategies as outlined in Section 4.
Figure 6 shows the probability of constructing a compromised cir-
cuit against drop rate d, under both strategies. For g ≤ 1/3,
we see that this probability quickly decreases to almost zero as
the drop rate increases, which is signiﬁcantly better than what con-
ventional Tor guarantees (indicated by the dashed lines). Even for
g = 2/3, we see a signiﬁcant improvement but compared to strat-
egy 1, strategy 2 performs much better. The main reason behind
this is that with two guards out of the three being compromised we
could potentially lower the probability of constructing a compro-
mised circuit by considering only the honest available guard. This
is what strategy 2 does, as it considers only the top ranked guard re-
lay while discarding the remaining two guards during actual usage.
For g = 1, we do not see much improvement, however, g = 1 is
a hopeless case as all the guards are already compromised. Thus,
for g < 1 the dominant attack strategy is to perform no dropping.
Figure 6: Probability of constructing a compromised (CXC) circuit after ﬁltering out-
liers using strategy 1 and 2. We see that our approach outperforms conventional Tor
as drop rate increases.
Finally, we test our reputation model against an adversary who
tries to oscillate between building and milking its reputation. The
adversary adopts the following strategy—“Drop circuit only if its
reputation is above a chosen threshold”. Under this scenario we as-
sume the adversary mimics a normal user in the system and keeps
track of the reputation score of its relays, so that it can optimally de-
-1-0.8-0.6-0.4-0.2 0 0.2 0.4 0.6 0.8 1 0 5 10 15 20 25 30 35 40 45 50Ranking ScoreNodes (sorted according to ranking score)For g=0Honest nodeCompromised nodeAverage scoreUpper boundLower bound-1-0.8-0.6-0.4-0.2 0 0.2 0.4 0.6 0.8 1 0 5 10 15 20 25 30 35 40 45 50Ranking ScoreNodes (sorted according to ranking score)For g=1/3Honest nodeCompromised nodeAverage scoreUpper boundLower bound-1-0.8-0.6-0.4-0.2 0 0.2 0.4 0.6 0.8 1 0 5 10 15 20 25 30 35 40 45 50Ranking ScoreNodes (sorted according to ranking score)For g=2/3Honest nodeCompromised nodeAverage scoreUpper boundLower bound-1-0.8-0.6-0.4-0.2 0 0.2 0.4 0.6 0.8 1 0 5 10 15 20 25 30 35 40 45 50Ranking ScoreNodes (sorted according to ranking score)For g=1Honest nodeCompromised nodeAverage scoreUpper boundLower bound 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1Average FNDrop rate (d)k=1.73g=0g=1/3g=2/3g=1 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1Average FPDrop rate (d)k=1.73g=0g=1/3g=2/3g=1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1Probability of selecting CXCDrop rate (d)our case,g=0our case,g=1/3our case,g=2/3Strategy 1our case,g=1normal Tor,g=0normal Tor,g=1/3normal Tor,g=2/3normal Tor,g=1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1Probability of selecting CXCDrop rate (d)our case,g=0our case,g=1/3our case,g=2/3Strategy 2our case,g=1normal Tor,g=0normal Tor,g=1/3normal Tor,g=2/3normal Tor,g=1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1-1-0.8-0.6-0.4-0.2 0 0.2 0.4 0.6 0.8 1Pr(CXC)Reputation Thresholdg=0g=1/3g=2/3g=1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1-1-0.8-0.6-0.4-0.2 0 0.2 0.4 0.6 0.8 1Drop rate (d)Reputation Thresholdg=0g=1/3g=2/3g=169we used 10 PlanetLab [3] machines from 5 different continents and
had them create circuits through the Tor network.
To implement selective DoS we take an approach similar to the
one described by Bauer et al. [15]. Here, out of the 11 machines,
we run Tor protocol (version tor-0.2.2.35) on 10 of them, and used
the remaining machine as a server for gathering timing information
about which relay is communicating with whom at what time. The
sever performs timing analysis and informs the other 10 machines
when to drop communication to carry out selective DoS. We imple-
mented our reputation model in the client side in Python (we used
the open source Python library of the Tor Controller [6]).
In our experiments we ﬁrst query the Tor directory server to re-
trieve a list of all available Tor routers and then ﬁlter this list by
considering only those routers which are ﬂagged as running, stable
and valid, because we want our routers to be alive and running dur-
ing our experiments. We selected 39 Tor relays (3 guards, 18 exits
and 18 middle relays) at random with probability proportional to
their bandwidth and added our own 10 relays to this set to get a to-
tal of 49 relays (for the same reasons as described in Section 6.1.1).
This choice results in about 20% of the relays being compromised.8
To emulate user trafﬁc, we retrieve a random web ﬁle of 300 KB in
size. Each client investigates a total of 3 × 232 = 1587 circuits
and builds its own reputation score for those relays.9 Clients ﬁrst
ﬁlter outliers and then compute FN and FP errors.
Table 6 summarizes our ﬁndings. Real world results are quite
similar to what we found in our simulation. However, some of the
false positive errors are somewhat higher than what we found in our
simulation. One plausible reason is that some of the relays were
down during our experiment, which is understandable because Tor
consensus is updated every 1 hour. Also, since not all the PlanetLab
machines were of the same conﬁguration, the total time required to
complete all the probing varied from machine to machine. How-
ever, similar to our simulation results, we see that as the number of
compromised guards increases, FN also increases. For g ≤ 2/3
FN is almost zero. Another observation is that clients, though geo-
graphically distant, observe a similar ranking of Tor relays. Thus,
Re3 succeeds in capturing the selective dropping characteristics of
our deployed Tor relays.
Table 6: Experimental results from the live Tor network (all values are in %)
g=1
g=1/3
g=2/3
g=0
FN
0
0
0
0
0
0
0
0
0
0
FP
10.3
7.69
5.13
7.69
7.69
7.69
7.69
7.69
5.13
17.9
FN
0
0
0
0
0
0
0
0
0
0
FP
10.3
10.3
10.3
5.13
7.69
10.3
10.3
10.3
12.8
17.9
FN
0
0
0
0
0
2.9
2.8
0
0
0
FP
17.9
15.4
17.9
10.3
12.8
15.4
10.3
15.9
17.9
20.5
FN FP
15.2
0
0
11.4
0
11.4
0
15.2
0
15.2
0
11.3
11.4
0
0
9.3
0
9.3
15.2
0
Continent
North
America
South
America
Europe
Asia
Australia
Country
(State)
US(Illinois)
US(California)
Argentina
Brazil
UK
Russia
India
Singapore
Australia
NewZealand
6.2.2 Reliability
In addition to protecting Tor against maliciousness, our reputa-
tion model can also improve Tor’s resilience to poorly performing
relays. To motivate this, we ﬁrst show that there is a high degree
of variance in reliability across Tor relays. For this experiment we
build Tor circuits using our own entry and exit relay pairs while
using existing Tor relays as the middle relay of a Tor circuit. We
then record statistics of circuit construction success rate for each
8Alternatively, we could set the bandwidth of our relays such that they make up 20%
of the total bandwidth
9Without considering the same relay at different position, because guards and exits
can be middle relays, too.