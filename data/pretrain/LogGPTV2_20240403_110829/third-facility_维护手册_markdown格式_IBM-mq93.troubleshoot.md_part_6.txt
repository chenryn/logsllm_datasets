### Determining Problems with Applications, Commands, and Messages on Linux

**IBM MQ Troubleshooting and Support**

If you encounter problems with IBM MQ applications, commands, or messages, there are several questions to consider to help determine the cause of the issue.

#### Related Reference
- **Messages and Reason Codes**
- **Determining Problems with Applications, Commands, and Messages on Linux**

#### About This Task
Use the following questions as pointers to help identify the cause of the problem:
- Are messages failing to arrive on the queue?
- Do messages contain unexpected or corrupted information?
- Are unexpected messages received when using distributed queues?
- Have you received no response from a PCF command?
- Are only some of your queues failing?
- Does the problem affect only remote queues?
- Is your application or system running slowly?

As you go through the list, make a note of anything that might be relevant to the problem. Even if your observations do not immediately suggest a cause, they might be useful later in a systematic problem determination exercise.

When opening a case with IBM, include additional IBM MQ troubleshooting information (MustGather data) that you have collected to help investigate the problem. For more information, see “Collecting Troubleshooting Information for IBM Support” on page 302.

#### Procedure

1. **Are messages failing to arrive on the queue?**
   - If messages do not arrive when expected, check the following:
     - Has the queue been defined correctly? (e.g., is MAXMSGL sufficiently large?)
     - Is the queue enabled for putting?
     - Is the queue already full?
     - Has another application got exclusive access to the queue?
   - Also, check whether you can get any messages from the queue:
     - Do you need to take a sync point? If messages are being put or retrieved within a sync point, they are not available to other tasks until the unit of recovery has been committed.
     - Is your wait interval long enough? You can set the wait interval as an option for the MQGET call.
     - Are you waiting for a specific message identified by a message or correlation identifier (MsgId or CorrelId)? Ensure you are waiting for a message with the correct MsgId or CorrelId. A successful MQGET call sets both these values to that of the message retrieved, so you might need to reset these values to get another message successfully.
     - Can other applications get messages from the queue?
     - Was the message you are expecting defined as persistent? If not, and IBM MQ has been restarted, the message has been lost.
     - Has another application got exclusive access to the queue?
   - If you cannot find anything wrong with the queue and IBM MQ is running, check the process that you expected to put the message onto the queue:
     - Did the application start? If it should have been triggered, check that the correct trigger options were specified.
     - Did the application stop?
     - Is a trigger monitor running?
     - Was the trigger process defined correctly?
     - Did the application complete correctly? Look for evidence of an abnormal end in the job log.
     - Did the application commit its changes, or were they backed out?
   - If multiple transactions are serving the queue, they can conflict with one another. For example, suppose one transaction issues an MQGET call with a buffer length of zero to find out the length of the message, and then issues a specific MQGET call specifying the MsgId of that message. However, in the meantime, another transaction issues a successful MQGET call for that message, so the first application receives a reason code of MQRC_NO_MSG_AVAILABLE. Applications expected to run in a multiple server environment must be designed to handle this situation.
   - Consider that the message could have been received, but your application failed to process it. For example, did an error in the expected format of the message cause your program to reject it? If so, refer to the subsequent information in this topic.

2. **Do messages contain unexpected or corrupted information?**
   - If the information contained in the message is not what your application was expecting, or has been corrupted, consider the following:
     - Has your application, or the application that put the message onto the queue, changed? Ensure all changes are simultaneously reflected on all systems that need to be aware of the change. For example, the format of the message data might have been changed, in which case, both applications must be recompiled to pick up the changes. If one application has not been recompiled, the data will appear corrupted to the other.
     - Is an application sending messages to the wrong queue? Check that the messages your application is receiving are not intended for an application servicing a different queue. If necessary, change your security definitions to prevent unauthorized applications from putting messages on the wrong queues. If your application uses an alias queue, check that the alias points to the correct queue.
     - Has the trigger information been specified correctly for this queue? Check that your application should have started; or should a different application have started?
   - If these checks do not enable you to solve the problem, check your application logic, both for the program sending the message and for the program receiving it.

3. **Are unexpected messages received when using distributed queues?**
   - If your application uses distributed queues, consider the following points:
     - Has IBM MQ been correctly installed on both the sending and receiving systems, and correctly configured for distributed queuing?
     - Are the links available between the two systems? Check that both systems are available and connected to IBM MQ. Verify that the connection between the two systems is active. You can use the MQSC command PING against either the queue manager (PING QMGR) or the channel (PING CHANNEL) to verify that the link is operable.
     - Is triggering set on in the sending system?
     - Is the message for which you are waiting a reply message from a remote system? Check that triggering is activated in the remote system.
     - Is the queue already full? If so, check if the message has been put onto the dead-letter queue. The dead-letter queue header contains a reason or feedback code explaining why the message could not be put onto the target queue. For more information, see Using the Dead-Letter (Undelivered Message) Queue and MQDLH - Dead-Letter Header.
     - Is there a mismatch between the sending and receiving queue managers? For example, the message length could be longer than the receiving queue manager can handle.
     - Are the channel definitions of the sending and receiving channels compatible? For example, a mismatch in sequence number wrap can stop the distributed queuing component. For more information, see Distributed Queuing and Clusters.
     - Is data conversion involved? If the data formats between the sending and receiving applications differ, data conversion is necessary. Automatic conversion occurs when the MQGET call is issued if the format is recognized as one of the built-in formats. If the data format is not recognized for conversion, the data conversion exit is taken to allow you to perform the translation with your own routines. For more information, see Data Conversion.
   - If you are unable to solve the problem, contact IBM Support for help.

4. **Have you received no response from a PCF command?**
   - If you have issued a command but have not received a response, consider the following checks:
     - Is the command server running? Use the `dspmqcsv` command to check the status of the command server. If the response indicates that the command server is not running, use the `strmqcsv` command to start it. If the response indicates that the `SYSTEM.ADMIN.COMMAND.QUEUE` is not enabled for MQGET requests, enable the queue for MQGET requests.
     - Has a reply been sent to the dead-letter queue? The dead-letter queue header structure contains a reason or feedback code describing the problem. For more information, see MQDLH - Dead-Letter Header and Using the Dead-Letter (Undelivered Message) Queue. If the dead-letter queue contains messages, you can use the provided browse sample application (`amqsbcg`) to browse the messages using the MQGET call. The sample application steps through all the messages on a named queue for a named queue manager, displaying both the message descriptor and the message context fields for all the messages on the named queue.
     - Has a message been sent to the error log? For more information, see “Error Log Directories on AIX, Linux, and Windows” on page 357.
     - Are the queues enabled for put and get operations?
     - Is the `WaitInterval` long enough? If your MQGET call has timed out, a completion code of `MQCC_FAILED` and a reason code of `MQRC_NO_MSG_AVAILABLE` are returned. See `WaitInterval` (MQLONG) for information about the `WaitInterval` field, and completion and reason codes from MQGET.
     - If you are using your own application to put commands onto the `SYSTEM.ADMIN.COMMAND.QUEUE`, do you need to take a sync point? Unless you have excluded your request message from sync point, you need to take a sync point before receiving reply messages.
     - Are the `MAXDEPTH` and `MAXMSGL` attributes of your queues set sufficiently high?
     - Are you using the `CorrelId` and `MsgId` fields correctly? Set the values of `MsgId` and `CorrelId` in your application to ensure that you receive all messages from the queue.
   - Try stopping the command server and then restarting it, responding to any error messages produced. If the system still does not respond, the problem could be with either a queue manager or the whole of the IBM MQ system. First, try stopping individual queue managers to isolate a failing queue manager. If this step does not reveal the problem, try stopping and restarting IBM MQ, responding to any messages produced in the error log. If the problem still occurs after restart, contact IBM Support for help.

5. **Are only some of your queues failing?**
   - If you suspect that the problem occurs with only a subset of queues, check the local queues that you think are having problems.
   - Use the MQSC command `DISPLAY QUEUE` to display the information about each queue. If the `CURDEPTH` is at `MAXDEPTH`, the queue is not being processed. Check that all applications are running normally.
   - If the `CURDEPTH` is not at `MAXDEPTH`, check the following queue attributes to ensure they are correct:
     - If triggering is being used, is the trigger monitor running? Is the trigger depth too great? That is, does it generate a trigger event often enough? Is the process name correct? Is the process available and operational?
     - Can the queue be shared? If not, another application could already have it open for input.
     - Is the queue enabled appropriately for GET and PUT?
   - If there are no application processes getting messages from the queue, determine why this is so. It could be because the applications need to be started, a connection has been disrupted, or the `MQOPEN` call has failed for some reason. Check the queue attributes `IPPROCS` and `OPPROCS`. These attributes indicate whether the queue has been opened for input and output. If a value is zero, it indicates that no operations of that type can occur. The values might have changed, or the queue might have been open but is now closed.
   - Check the status at the time you expect to put or get a message.
   - If you are unable to solve the problem, contact IBM Support for help.

6. **Does the problem affect only remote queues?**
   - If the problem affects only remote queues, perform the following checks:
     - Check that required channels have started, can be triggered, and any required initiators are running.
     - Check that the programs that should be putting messages to the remote queues have not reported problems.
     - If you use triggering to start the distributed queuing process, check that the transmission queue has triggering set on. Also, check that the trigger monitor is running.
     - Check the error logs for messages indicating channel errors or problems.
     - If necessary, start the channel manually.

7. **Is your application or system running slowly?**
   - If your application is running slowly, it might be in a loop, waiting for a resource that is not available, or there might be a performance problem.
   - Perhaps your system is operating near the limits of its capacity. This type of problem is probably worst at peak system load times, typically at mid-morning and mid-afternoon. (If your network extends across more than one time zone, peak system load might seem to occur at some other time.)
   - A performance problem might be caused by a limitation of your hardware.
   - If you find that performance degradation is not dependent on system loading but happens sometimes when the system is lightly loaded, a poorly-designed application program is probably to blame. This could appear to be a problem that only occurs when certain queues are accessed.
   - A common cause of slow application performance, or the build-up of messages on a queue (usually a transmission queue), is one or more applications that write persistent messages outside a unit of work. For more information, see Message Persistence.
   - If the performance issue persists, the problem might lie with IBM MQ itself. If you suspect this, contact IBM Support for help.

#### Related Concepts
- **Additional Checks for Resource Problems on Linux** (page 38)
- **How to Determine and Resolve Problems Connected to IBM MQ Resources**
  - Includes resource usage by IBM MQ processes, determining and resolving problems related to insufficient resources, and your resource limit configurations.

#### Related Tasks
- **Identifying Characteristics of the Problem on Linux** (page 30)
  - Some initial questions to consider to help with identifying the cause of the problem.
- **Contacting IBM Support** (page 301)
  - If you need help with a problem, you can contact IBM Support through the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and other news.

#### Related Reference
- **Messages and Reason Codes**
- **Additional Checks for Resource Problems on Linux**
  - How to determine and resolve problems connected to IBM MQ resources, including resource usage by IBM MQ processes, determining and resolving problems related to insufficient resources, and your resource limit configurations.

#### Useful Commands and the Configuration File for Investigating Resource Issues
- **Useful Commands** that display current values on your system or make a temporary change to the system:
  - `ulimit -a`: Display user limits
  - `ulimit -Ha`: Display user hard limits
  - `ulimit -Sa`: Display user soft limits
  - `ulimit -paramflag`: Where `paramflag` is the flag for the resource name, for example, `s` for stack.
- **To Make Permanent Changes to the Resource Limits on Your System:**
  - Use `/etc/security/limits.conf` or `/etc/security/limits`.
- **Obtain the Current Resource Limit Set for a Process:**
  - Use the proc file system on Linux. For example, `cat /proc/<pid>/limits`.

#### Basic Checks Before Tuning IBM MQ or Kernel Parameters
- **Investigate the Following:**
  - Whether the number of active connections is within the expected limit.
  - For example, suppose that your system is tuned to allow 2000 connections when the number of user processes is no greater than 3000. If the number of connections increases to more than 2000, then either the number of user processes has increased to more than 3000 (because new applications have been added), or there is a connection leak.
  - **Commands to Check:**
    - Number of IBM MQ processes: `ps -eLf|egrep "amq|run"|wc -l`
    - Number of connections: `echo "dis conn(*) all" | runmqsc |grep EXTCONN|wc -l`
    - Shared memory usage: `ipcs -ma`
  - If the number of connections is higher than the expected limit, check the source of the connections.
  - If the shared memory usage is very high, check the following:
    - Topics
    - Open queue handles
  - **From an IBM MQ Perspective, the Following Resources Need to Be Checked and Tuned:**
    - Maximum number of threads allowed for a given number of user processes.
    - Data segment
    - Stack segment
    - File size
    - Open file handles
    - Shared memory limits
    - Thread limits, for example, `threads-max` on Linux
  - **Use the `mqconfig` Command to Check the Current Resource Usage.**

#### Notes
1. Some of the resources listed in the preceding text need to be tuned at the user level, and some at the operating system level.
2. The preceding list is not a complete list but is sufficient for most common resource issues reported by IBM MQ.
3. Tuning is required at the thread level, as each thread is a lightweight process (LWP).

#### Problem in Creating Threads or Processes from IBM MQ or an Application
- **Failure in `xcsExecProgram` and `xcsCreateThread`**
  - **Probe IDs, Error Messages, and Components:**
    - `XY348010` from `xtmStartTimerThread` from an IBM MQ process (e.g., `amqzlaa0`) or an application.
    - `XC037008` from `xcsExecProgram` with error code `xecP_E_PROC_LIMIT` from `amqzxma0`.
    - `XC035040` from `xcsCreateThread`.
    - `XC037007` from `xcsExecProgram` with `xecP_E_NO_RESOURCE`.
    - `xcsCreateThread` fails with `xecP_E_NO_RESOURCE` followed by failure data capture, for example, `ZL000066` from `zlaMain`.
  - **Probe IDs might be different. Check for the error codes `xecP_E_PROC_LIMIT` and `xecP_E_NO_RESOURCE`.**
  - **Error messages reporting `errno 11` from `pthread_create`:**
    - `AMQ6119S: An internal IBM MQ error has occurred ('11 - Resource temporarily unavailable' from `pthread_create()`).`

#### Resolving the Problem on Linux
- **IBM MQ sets the error code `xecP_E_PROC_LIMIT` when `pthread_create` or `fork` fails with `EAGAIN`.**
  - **Review and increase the max user processes and stack size user process resource limits.**
  - **Additional configuration required on Linux:**
    - Review and increase the limits for `kernel.pid_max` (`/proc/sys/kernel/pid_max`) and `kernel.threads-max` (`/proc/sys/kernel/threads-max`) kernel parameters.
  - **You need to increase the maximum user processes (`nproc`) and stack size resource limits for the `mqm` user and any other user that is used to start the queue manager and the IBM MQ applications.**

- **IBM MQ sets the error code `xecP_E_NO_RESOURCE` when `pthread_create` or `fork` fails with `ENOMEM`.**
  - **Check and increase the stack size and data resource limits.**

#### Notes
- You can increase the user process resource limits by using the `ulimit` command or by changing the resource limit configuration file.
- The changes using the `ulimit` command are temporary. Modify `/etc/security/limits` or `/etc/security/limits.conf` to make the changes permanent.