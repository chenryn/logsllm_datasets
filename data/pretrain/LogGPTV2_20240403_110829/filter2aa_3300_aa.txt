### Copyright © 2011 Juniper Networks, Inc. | www.juniper.net
**AppSecure**  
Presented by: Brad Woodberg, Juniper Networks  
Contact: [PI:EMAIL](mailto:PI:EMAIL) | Twitter: [@bradmatic517](https://twitter.com/bradmatic517)  
Event: Defcon 2011

---

### Agenda
- **Discussion**
  - **Beyond Layer 4 – App-FW Explained**
    - Capabilities and limitations of Application Firewalls.
    - Potential vulnerabilities and network pitfalls.
  - **Exploitation in Action**
    - Real-world examples of how Application Firewalls can be exploited.
  - **Getting it Right**
    - Best practices for deploying Application Firewalls alongside traditional security mechanisms.

- **Key Issues**
  - Application Firewalling does not replace traditional security measures such as stateful firewalls and full Intrusion Prevention Systems (IPS).
  - Even when properly implemented, Application Firewalls have limitations and potential network pitfalls.
  - Proper deployment strategies to integrate this technology with existing security mechanisms.

---

### HTTP/1.1 200 OK
- **Content-Type:** text/html
- **Server:** Apache
- **Date:** Wed, 09 Feb 2011
- **Cache-Control:** private

### Evolution of Network Traffic
- **Client:** 1.1.1.1
- **Server:** 2.2.2.2
- **Network Flow:**
  - **Src-IP:** 2.2.2.2, **Dest-IP:** 1.1.1.1, **Src-Port:** 80, **Dest-Port:** 2481, **Protocol:** TCP, **Flags:** SYN/ACK
  - **Src-IP:** 2.2.2.2, **Dest-IP:** 1.1.1.1, **Src-Port:** 80, **Dest-Port:** 2481, **Protocol:** TCP, **Flags:** ACK

### Security Layers
- **Stateful Firewall**
- **Application Firewall**
- **Full IPS**

### HTTP Request Example
- **GET /index.html HTTP/1.0**
  - **Host:** www.google.com
  - **User-Agent:** Mozilla/5.0
  - **Accept:** text/html
  - **Accept-Language:** en-us
  - **Accept-Encoding:** gzip, deflate
  - **Accept-Charset:** ISO-8859-1
  - **Keep-Alive:** 115
  - **Connection:** keep-alive

---

### What's New?
1. **Application Identification (AppID)**
   - Goes beyond traditional stateful firewalls by inspecting some Layer 7 payload to identify the application.
   - Does not inspect the entire session like full IPS, and only identifies the application, not other activities like exploits.
   - Has been available in numerous technologies for a long time but was not typically a user-controlled feature.

---

### AppID Pattern Matching
1. **FW Check**
2. **Preprocessing: Serialize, Order, Reassemble**
3. **Pattern Match**
   - **Finite State Machines:** DFA, NFA, Hybrids
   - **String Matching Algorithms:** Boyer-Moore, Aho-Corasick (Hybrid), Rabin-Karp
   - **Hardware and Other Algorithms:** Many other solutions exist.

*Source: [Wikipedia](http://en.wikipedia.org/wiki/String_searching_algorithm)*

---

### Nested Applications
- **Layer 1:** Cat 5, Fiber, WiFi
- **Layer 2:** Ethernet
- **Layer 3:** IPv4, IPv6
- **Layer 4:** TCP, UDP
- **Layer 7:** HTTP
- **Nested Application Examples:**
  - Pandora Streaming Audio
  - Facebook Application

---

### Application ID Signature Examples
- **FTP Application:**
  - **Client-to-Server:**
    - **DFA-Pattern:** `"\[(USER|STAT|PORT|CHMOD|ACCOUNT|BYE|ASCII|GLOB|HELP|AUTH|SYST|QUIT|STOR|PASV|CWD|PWD|MDTM).*"`
  - **Server-to-Client:**
    - **DFA-Pattern:** `"(220|230|331|530).*"`

- **Nested Application: Facebook:Application**
  - **Parent-Protocol:** HTTP
  - **Member m01:**
    - **Context:** http-header-host
    - **Pattern:** `"(.*\.)?(facebook\.com|fbcdn\.net)"`
    - **Direction:** client-to-server
  - **Member m02:**
    - **Context:** HTTP URL
    - **Pattern:** `"/ap\.php\?i=.*|.*"`
    - **Direction:** client-to-server

*Note: Many implementations use closed-source AppID signatures.*

---

### Features That Rely on Application ID
- **Layer 7 Services:**
  - IPS
  - Anti-Virus
  - Anti-Spam
  - URL Filtering
  - Application Firewall
  - DLP
  - QoS

- **Example Session:**
  - **Session Type:** HTTP
  - **Src-IP:** 1.1.1.1
  - **Dst-IP:** 2.2.2.2
  - **Dst-Port:** 80
  - **Src-Port:** 41932
  - **Protocol:** TCP

---

### Application Caching
- **Benefits:**
  - **Performance Improvement:** Results are typically the same for IP/Protocol/Port.
  - **Sample Application Cache Table:**

---

### Preprocessing
- **Quote:**
  - "I say we take off and nuke the site from orbit. It's the only way to be sure." — Ripley

---

### Said Words Are True
- **Quote:**
  - Egon: "There's something very important I forgot to tell you."
  - Venkman: "What?"
  - Egon: "Don't cross the streams."

---

### Preprocessing: Fragmentation/Segmentation
- **Like IPS, Application Firewalls must:**
  - Serialize, order, and reassemble packets/application data before pattern matching.
  - **Example:**
    - **GET Request:** `GET /index.html HTTP/1.0`
    - **Single Packet:** No reassembly required.
    - **Multiple IP Fragments:** Must reassemble before pattern matching to detect the string "HTTP".

---

### Preprocessing: Ordering
- **Properly ordering packets/segments is essential for pattern matching.**
- **Example:**
  - **GET Request:** `GET /index.html HTTP/1.0`
  - **Multiple IP Fragments/Segments:** Must reassemble before pattern matching to detect the string "HTTP".

---

### Preprocessing: Proper Reassembly
- **Scenario:**
  - **Attacker sends two fragments/segments with different payloads.**
  - **Example:**
    - **GET Request:** `GET /index.html HTTP/1.0`
    - **Segments:**
      - **Segment 1:** GET
      - **Segment 2:** HTTP
      - **Segment 3:** (Denied or Permitted)
      - **Segment 4:** /index.html /1.0

---

### Network Application Identification
- **Quote:**
  - Ripley: "How many drops is this for you, Lieutenant?"
  - Gorman: "Thirty-eight... simulated."
  - Vasquez: "How many *combat* drops?"
  - Gorman: "Uh, two. Including this one."

---

### Application Identification
- **Step 1:**
  - **Must Pass Some Traffic (Bi-directionally) before Application Can Be Identified.**
  - **Example:**
    - **TCP 3-way Handshake Completed:** No L7 payload sent, so the application has not been identified.
- **Step 2:**
  - **Actual Detection Occurs on Payload:**
    - **Example:**
      - **HTTP Identified After Layer 7 Exchange.**
- **Step 3:**
  - **Application Firewalling itself doesn’t inspect beyond the application ID, so it doesn’t stop attacks.**

---

### Limitations, Vulnerabilities, Exploitation
- **Quote:**
  - Hudson: "Movement. Signal's clean. Range, 20 meters."
  - Ripley: "They've found a way in, something we've missed."
  - Hicks: "We didn't miss anything."
  - Hudson: "17 meters."
  - Ripley: "Something under the floor, not in the plans, I don't know."
  - Hudson: "15 meters."
  - Newt: "Ripley!!!"
  - Hicks: "Definitely inside the barricades."
  - Newt: "Let's go."
  - Hudson: "12 meters."
  - Ripley: "That's right outside the door. Hicks, Vasquez get back."
  - Hudson: "Man, this is a big f#$*kin' signal."
  - Hicks: "How are we doing, Vasquez, talk to me?"
  - Vasquez: "Almost there."
  - Vasquez: "They're right on us."
  - Hicks: "Remember, short controlled bursts."
  - Hudson: "9 meters. 7. 6."
  - Ripley: "That can't be; that's inside the room!"

---

### Client/Server Collusion
- **Scenario:**
  - **Start Connection as a Permitted Application:**
    - After the Application Firewall is done, switch it to another application.