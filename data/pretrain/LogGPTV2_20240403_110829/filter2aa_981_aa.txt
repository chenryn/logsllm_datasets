# Meddle: Framework for Piggy-Back Fuzzing and Tool Development

## Outline
1. **Background**
   - About Me
   - Fuzzing
     - Types of Fuzzing
     - Fuzzing Tools
     - Fuzzing Algorithms
2. **Meddle Framework**
   - Introduction
   - Meddle Target
   - Meddle Process
   - Meddle Controller
3. **XRDP Fuzzing**
4. **DeviceIoControl**
5. **Sandbox**
6. **Conclusion**

## 1. Background

### About Me
- **Name**: Geo McDonald
- **Location**: Vancouver, Canada
- **Experience**:
  - Game hacking (Ultima Online MMORPG)
  - Reverse-engineering tool development
  - Previously at Symantec
  - Currently at Microsoft
- **Personal Website**: [http://www.split-code.com/](http://www.split-code.com/)

### Fuzzing
- **Types of Fuzzing**:
  - **File Format Fuzzing**: PDF, Microsoft Word, TrueType fonts
  - **Protocol Fuzzing**: RDP, VNC, SSL, VoIP
  - **Application Fuzzing**: COM objects, API calls, inter-process communication
  - **Web Application Fuzzing**: Joomla, WordPress, any website

- **Fuzzing Tools**:
  - **SPIKE from Immunity**: Network protocols and web applications
  - **Basic Fuzzing Framework (BFF) from CERT**: File format
  - **SAGE from Microsoft**: Input fuzzing
  - **AutoFuzz**: Network protocols by MITM
  - **COMRaider**: COM interface fuzzing
  - **IOCtrlFuzzer from eSage Lab**: NtDeviceIoControlFile driver input fuzzing

- **Fuzzing Algorithms**:
  - **Basic Algorithms**:
    - Naive protocol fuzzing (e.g., IOCtrlFuzzer)
    - Protocol-aware fuzzing (e.g., SPIKE)
  - **Advanced Algorithms**:
    - Protocol-learning before fuzzing (e.g., AutoFuzz)
    - Feedback-driven fuzzing (e.g., SAGE)
    - Code coverage fuzzing (e.g., Googleâ€™s Flash fuzzing)

## 2. Meddle Framework

### Introduction
- **Meddle** is an open-source framework for piggy-back fuzzing and tool development.
- **Key Features**:
  - Open source: [https://github.com/glmcdona/meddle](https://github.com/glmcdona/meddle)
  - Environment: IronPython
  - Framework: C#
  - Command-line based
  - Supports x86, WOW64, and x64 processes
  - Windows only

- **Goals**:
  - Simplify the fuzzing process
  - Use Python for the fuzzing environment
  - Ensure extendibility and reproducibility
  - Piggy-back on existing applications for simplicity

- **Structure**:
  - Equal amount of time on each event type

### Meddle Target
- **Target Class**:
  ```python
  class Target_Winsock_Send(TargetBase):
      def __init__(self, Engine, ProcessBase):
          self.Engine = Engine
          self.ProcessBase = ProcessBase
          self.hook_exports = True
          self.hook_symbols = False
          self.libraries = ["ws2_32.dll"]
          self.libraries_regex = re.compile("a^", re.IGNORECASE)
          self.functions = ["send"]
          self.functions_regex = re.compile("a^", re.IGNORECASE)

      def breakpoint_hit(self, event_name, address, context, th):
          parameters = [
              {"name": "socket", "size": self.ProcessBase.types.size_ptr(), "type": None, "fuzz": NOFUZZ},
              {"name": "buffer", "size": self.ProcessBase.types.size_ptr(), "type": self.ProcessBase.types.parse_BUFFER, "type_args": "size", "fuzz": NOFUZZ},
              {"name": "size", "size": self.ProcessBase.types.size_ptr(), "type": None, "fuzz": NOFUZZ},
              {"name": "flags", "size": self.ProcessBase.types.size_ptr(), "type": None, "fuzz": NOFUZZ}
          ]
          [reg_spec, stack_spec] = self.ProcessBase.types.pascal(parameters)
          arguments = self.Engine.ParseArguments(stack_spec, reg_spec, context)
          if self.ProcessBase.verbose:
              print(arguments.ToString())
          return [arguments.GetFuzzBlockDescriptions(), "Winsock Send Event"]
  ```

- **Parameter Structures**:
  ```python
  def parse_BUFFER(self, parent, address, extra_name, type_args):
      if isinstance(type_args, str):
          size = parent.GetMemberSearchUp(type_args).ToInt()
      else:
          size = type_args
      return [{"name": extra_name + "BUFFER", "size": size, "type": None, "fuzz": FUZZ}]
  ```

- **Target Arguments**:
  ```python
  arguments = self.Engine.ParseArguments(...)
  print(f"Sent size = {arguments.size.ToInt()}")
  print(arguments.buffer.BUFFER.ToString())
  ```

### Meddle Process
- **Process Class**:
  - Details to be added.

### Meddle Controller
- **Controller Class**:
  - Details to be added.

## 3. XRDP Fuzzing
- **XRDP Server**:
  - Details to be added.

## 4. DeviceIoControl
- **DeviceIoControl Demo**:
  - Details to be added.

## 5. Sandbox
- **Malware Sandbox Demo**:
  - Details to be added.

## 6. Conclusion
- Summary and future work.

---

**Geo McDonald**  
PI:EMAIL, Unaffiliated Presentation  
DEF CON 22, August 8, 2014