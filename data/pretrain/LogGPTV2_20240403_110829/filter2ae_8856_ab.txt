            if (nla_len(rt) id.proto != IPPROTO_ESP) && (p->id.proto != IPPROTO_AH))
            return -EINVAL;
        if (p->replay_window != 0)
            return -EINVAL;
        return 0;
    }
这个函数要求replay_state_esn结构的bmp_len不可以超过最大限制XFRMA_REPLAY_ESN_MAX。
另外，在这个创建xfrm_state的过程中，如果检查到成员中有xfrm_replay_state_esn结构，如下函数中的检查便会被执行。
    int xfrm_init_replay(struct xfrm_state *x)
    {
        struct xfrm_replay_state_esn *replay_esn = x->replay_esn;
        if (replay_esn) {
            if (replay_esn->replay_window >
                replay_esn->bmp_len * sizeof(__u32) * 8) props.flags & XFRM_STATE_ESN) {
                if (replay_esn->replay_window == 0)
                    return -EINVAL;
                x->repl = &xfrm_replay_esn;
            } else
                x->repl = &xfrm_replay_bmp;
        } else
            x->repl = &xfrm_replay_legacy;
        return 0;
    }
这个函数确保了replay_window不会比bitmap的长度大，否则函数会直接退出。
下面再来看一下xfrm_new_ae这个函数,它首先会解析用户态传入的几个attr，然后根据spi的哈希值以及ip找到指定的xfrm_state，之后xfrm_replay_verify_len中会对传入的replay_state_esn结构做一个检查，通过后即会调用xfrm_update_ae_params函数来更新对应的xfrm_state结构。下面我们来看一下xfrm_replay_verify_len这个函数。
    static inline int xfrm_replay_verify_len(struct xfrm_replay_state_esn *replay_esn,
                         struct nlattr *rp)
    {
        struct xfrm_replay_state_esn *up;
        int ulen;
        if (!replay_esn || !rp)
            return 0;
        up = nla_data(rp);
        ulen = xfrm_replay_state_esn_len(up);
        if (nla_len(rp) repl->advance(x,
seq);，即xfrm_replay_advance_esn这个函数。 这个函数会对bitmap进行如下操作
1.清除[last seq, current seq)的bit 2.设置bmp[current seq] = 1
我们可以指定好spi、seq等参数(内核是根据spi的哈希值以及ip地址来确定SA的)，并让内核来处理我们发出的ESP数据包，多次进行这个操作即可达到对越界任意长度进行写入任意值。
**(3).越界读**
我们的思路是使用越界写，改大下一个replay_state_esn的结构中的bmp_len。之后我们就可以利用下一个bitmap结构进行越界读。所以我们需要两个相邻的replay_state结构。我们可以使用defragment技巧来达到这个效果。即首先分配足够多的同样大小的replay_state结构把堆上原来的坑填满，之后便可大概率保证连续分配的replay_state结构是相邻的。
如上所述，使用越界写的能力将下一个bitmap长度改大，即可使用这个bitmap结构做越界读了。
图中所示为被改掉bmp_len的bitmap结构。
**(4).绕过kASLR**
我们通过xfrm_del_sa接口把没用的xfrm_state都给删掉。这样就可以在堆上留下很多的坑。之后我们可以向内核喷射很多struct
file结构体填在这些坑里。
如下，利用上面已经构造出的越界读能力，我们可以泄露一些内核里的指针来算出内核的加载地址和bitmap的位置。
### **5.内核任意地址读写及代码执行**
因为已经绕过了内核地址随机化,这时我们可以进行内核ROP构造了。
1.在这个漏洞的利用当中，我们可以在bitmap中伪造一个file_operations结构。
2.之后通过越界写可以改写掉我们刚刚在内核中喷射的struct file结构体的file_operations指针，使其指向合适的ROPgadget。
3.调用llseek函数(实际上已经是rop gadget)来执行我们事先已经准备好的ROP链。
4.通过多次改写file_operations结构中的llseek函数指针来实现多次执行ROPgadget实现提权。
如上所述，因为我们的数据都是伪造在内核里面，所以这种利用方式其实是可以同时绕过SMEP和SMAP的。
### **6.权限提升**
下面是长亭安全研究实验室在pwn2own2017上弹出xcalc的瞬间。
## **5.后记**
非常感谢slipper老师的指导和讲解 :P
感谢长亭安全研究实验室的所有小伙伴:P
## **6.参考资料**
  * IPSEC协议: [IPsec - Wikipedia](https://en.wikipedia.org/wiki/IPsec)
  * linux命名空间机制: [Namespaces in operation, part 1: namespaces overview](https://lwn.net/Articles/531114/)
  * CVE-2017-7184: [CVE-2017-7184: kernel: Local privilege escalation in XFRM framework](http://link.zhihu.com/?target=http%3A//www.openwall.com/lists/oss-security/2017/03/29/2)
  * @thezdi: 
  * Android漏洞公告:
  * Redhat:[Red Hat Customer Portal](https://access.redhat.com/security/cve/cve-2017-7184)
* * *