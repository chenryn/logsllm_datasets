title:Alert Verification Evasion Through Server Response Forging
author:Adam D. Todd and
Richard A. Raines and
Rusty O. Baldwin and
Barry E. Mullins and
Steven K. Rogers
Alert Verification Evasion Through Server Response 
Forging 
Adam D. Todd, Richard A. Raines, Rusty O. Baldwin, Barry E. Mullins, 
and Steven K. Rogers 
Center for Cyberspace Research, 
Air Force Institute of Technology, Department of Electrical and Computer Engineering, 
2950 Hobson Way, Bldg 642, Wright-Patterson AFB, OH 45433-7765 
PI:EMAIL 
Sensors Directorate, Air Force Research Laboratory,  
Wright-Patterson AFB, OH 45433-7765 
Abstract. Intrusion Detection Systems (IDSs) are necessary components in the 
defense  of  any  computer  network.  Network  administrators  rely  on  IDSs  to 
detect attacks, but ultimately it is their responsibility to investigate IDS alerts 
and  determine  the  damage  done.  With  the  number  of  alerts  increasing,  IDS 
analysts have turned to automated methods to help with alert verification.  This 
research  investigates  this  next  step  of  the  intrusion  detection  process.  Some 
alert verification mechanisms attempt to identify  successful intrusion attempts 
based  on  server  responses  and  protocol  analysis.  This  research  examines  the 
server responses generated by four different exploits across four different Linux 
distributions.  Next,  three  techniques  capable  of  forging  server  responses  on 
Linux operating systems are developed and implemented. This research shows 
that  these  new  alert  verification  evasion  methods  can  make  attacks  appear 
unsuccessful  even  though  the  exploitation  occurs.  This  type  of  attack  ignores 
detection and tries to evade the verification process. 
Keywords: Network Intrusion Detection, Alert Verification, Evasion, Exploits. 
1   Introduction 
Intrusion Detection Systems (IDSs) have become essential components in the defense 
of  any  computer  network.    Both  government  agencies  and  private  corporations  use 
IDSs  to  detect  a  variety  of  attacks  which  cannot  be  detected  or  prevented  by  a 
conventional firewall.  The proliferation of IDSs has resulted in attackers developing 
many  different  evasion  techniques.    Network  administrators  and  computer  security 
professionals must remain apprised of current evasion techniques and IDS protections 
or risk leaving their computer networks vulnerable to attack. 
The  intrusion  detection  process  identifies  abnormal  activity  which  is  often  an 
attempt  to  compromise  a  system  or  consume  a  resource  which  denies  others  access 
[1].  IDSs  generate  alerts  which  draw  the  administrator’s  attention  to  possible 
malicious activity. Hackers modify their attacks to incorporate methods attempting to 
bypass  these  IDSs.    Most  evasion  techniques  focus  on  modifying  the  attacks  to 
circumvent the IDSs entirely.  Some older attacks exploit flaws in network protocols 
[2],  while  newer  evasion  strategies  focus  on  the  application  layer  (e.g.,  URL 
C. Kruegel, R. Lippmann, and A. Clark (Eds.): RAID 2007, LNCS 4637, pp. 256–275, 2007. 
© Springer-Verlag Berlin Heidelberg 2007 
Alert Verification Evasion Through Server Response Forging 
257 
obfuscation) [3].  As intrusion detection becomes more sophisticated, so do the IDS 
evasion techniques. 
Research in this field primarily focuses on adapting intrusion detection strategies to 
identify  new  attacks.    While  researchers  and  analysts  can  modify  the  rules  and 
detection  schemes  of  IDSs  to  recognize  new  evasion  methods,  the  entire  process 
ultimately relies on verification to determine the success or failure of an attack.  With 
the  number  of  alerts  increasing,  the  human  analyst  is  looking  for  automated 
approaches of verifying and analyzing these alerts.  This research looks at exploiting 
the last step in the intrusion detection process—verification.  The IDS may detect all 
attacks  but  the  final  responsibility  is  to  determine  whether  or  not  the  intrusion  was 
successful.    By  modifying  the  behavior  of  a  compromised  server,  it  is  possible  to 
evade verification by making a successful attack appear unsuccessful. 
2   Background 
2.1   Intrusion Detection 
Intrusion  Detection  is  the  process  of  detecting  inappropriate,  incorrect,  or 
anomalous  activity.    Such  actions  are  often  an  attempt  to  comprise  a  system  by 
violating  confidentiality,  breaching  integrity  or  denying  the  availability  of  a 
resource.  Intrusion detection can  either be performed  manually or automatically.  
Manual 
intrusion  detection  usually  consists  of  an  experienced  network 
administrator examining logs. However, this process is usually automated by using 
an Intrusion Detection Systems [1]. 
When  an  automated  IDS  detects  a  probable  intrusion  or  attack,  it  logs  relevant 
information  and  alerts  an  administrator.    Determining  if  the  event  was  an  actual 
intrusion,  the  success  of  the  attack,  and  any  consequent  action  to  take  is  usually 
outside the scope of most IDSs.  Another automated system, an Intrusion Prevention 
System (IPS), attempts to detect and stop any attack before it can be successful [1].  
While IPSs can be effective, most network administrators still use IDSs.   
IDSs come in one of two  forms:  host-based IDS (HIDS) and network-based IDS 
(NIDS).    A  HIDS  monitors  a  single  host  and  examines  system  calls  and  logs,  and 
sometimes even specific port activity.  A NIDS monitors the flow of network packets 
from multiple hosts.  Some modern IDSs are a combination of these approaches.  The 
focus of this research will be on NIDSs. 
2.2   Detection Techniques 
NIDSs use a variety of different detection techniques to observe network information 
and  determine  if  a  flow  is  an  attack  or  intrusion.    Some  NIDSs  identify  patterns  of 
traffic and then match them to signatures of known malicious activity.  This process is 
known  as  misuse  detection.    Anomaly  detection  systems  compare  network  traffic 
against a baseline of  “normal” activity.  Each technique is valid and comes  with its 
own strengths and weaknesses [4]. 
258 
A.D. Todd et al. 
In  misuse  detection,  the  intrusion  detection  decision  is  made  based  on  a  set  of 
predefined  rules.    These  detection  rules  are  simple  in  the  sense  that  they  define 
expected behavior observed during an attack or intrusion.  When a NIDS observes a 
traffic  pattern  matching  one  of  these  rules,  it  gathers  information  and  generates  an 
alert. While this approach seems simple, these rules must be very strict if a NIDS is to 
have  an  acceptable  detection  and  false  alarm  rate  [5].  Misuse  detection  can  be 
accomplished  by  a  variety  of  implementations.    The  simplest  intrusion  detection 
method uses basic string matching.  Expert systems determine the security state of the 
system  given  a  more  complex  set  of  rules  and  then  examine  network  traffic  for 
specific  signs  of  intrusion  or  invalid  transitions  between  states  [5,  6].  Contextual 
signatures  extend  the  traditional  form  of  string-based  signatures  by  including 
additional information about the context of the network traffic being analyzed which 
can help reduce the number of false positives significantly [7]. 
An  anomaly-based  IDS  detects  intrusions  by  monitoring  network  activity  and 
classifying it as either normal or anomalous based on heuristics rather than patterns or 
signatures.  The  goal  is  to  detect  any  traffic  that  falls  outside  of  normal  system 
operation. This differs from misuse detection systems  which can only detect attacks 
with known signatures.  In order to determine what constitutes a possible attack, the 
system must be taught what “normal” behavior is.  This can be accomplished in many 
ways  including  self-learning  via  artificial  intelligence  techniques,  mathematical 
modeling of normal activity and data-mining [1, 8, 9]. 
2.3   IDS Analysis 
While IDSs help a network administrator detect attacks, it is the responsibility of the 
expert analyst to determine if an intrusion actually did any damage.  In this area, IDSs 
have not met the expectations of network security administrators [10]. Rather, IDSs 
are  known  for  creating  a  large  number  of  alerts  that  are  either  false  alarms  or 
represent an unsuccessful attack.  It is left up to the analyst to sort through this chaos.  
Context-based  IDSs  use  a  real-time  network  awareness  which  provides  extra 
information, but even this capability falls short of solving the problem. 
Data  correlation  is  one  method  for  aiding  with  all  the  alerts.    Correlation 
recognizes  and  associates  related  network  activity  to  get  a  better  understanding  of 
intrusions  and  attacks  [11].  Correlating  associated  alerts  can  reduce  the  number  of 
alerts the analyst has to review.  
Another  method  is  alert  verification  which  is  an  automated  approach  for 
confirming  successful  attacks.    Many  analysts  look  to  automated  methods  to  help 
process  the  volume  of  alerts  generated  [10].  One  technique  compares  the  target 
system  with  the  configuration  required  for  an  attack  to  be  successful.  Another  alert 
verification method compares the outcome of the suspected attack with the expected 
outcome  of  a  successful  attack  [12].  This  verification  method  examines  server 
responses and performs protocol analysis.   
Verification  methods  may  be  active  or  passive.  Active  verification  mechanisms 
gather  information  after  an  alert  occurs,  while  passive  mechanisms  gather  initial 
configuration data so checks can be made before an attack occurs. The most important 
Alert Verification Evasion Through Server Response Forging 
259 
characteristic  of  alert  verification  mechanisms  is  accuracy.  Accurate  mechanisms 
keep  the  number  of  false  negatives  and  false  positives  low.  Automated  alert 
verification mechanisms seem to be a solution to the overwhelming volume of alert 
messages generated; however, they also offer another device to exploit and attack. 
2.4   Evasion Techniques 
With the prevalence of IDSs, many attackers have devised evasion techniques.  While 
hackers  designed  these  evasion  techniques  to  bypass  security  systems,  researchers 
may examine these attacks to determine how these systems can be improved.  There 
are many classic examples of evasion techniques that have been incorporated into the 
protection models of IDSs.  
Low and Slow. The “low and slow” method tries to avoid detection by extending the 
attack over time and/or space [4].     
Obfuscation.  Obfuscation  is  a  technique  which  manipulates  the  attack  data  so  the 
actual data packet will not match the IDS signature [3, 13].   
Protocol  Problems.  Protocol  ambiguities  can  lead  to  many  different  attack  vectors  
[2, 14]. 
Denial  of  Service.  The  denial  of  service  (DoS)  evasion  technique  simply  tries  to 
overload the NIDS [3, 14]. 
Mimicry Attacks. Mimicry attacks attempt to avoid detection by crafting the attack 
code and data streams to resemble valid applications and network traffic [15].   
Verification  Evasion.  Most  evasion  techniques  to  date  are  designed  to  elude  the 
automated aspects of intrusion detection while ignoring the verification process [16].  
This technique attempts to avoid a thorough investigation by fooling the verification 
process.  It is a form of  mimicry attack  in the sense that it creates responses  which 
resemble  those  of  failed  attacks.    If  the  analyst  or  verification  process  recognizes 
these  characteristics  as  corresponding  to  an  unsuccessful  attack,  then  there  will 
probably be no follow-up investigation. 
Server response forging is one of the more successful attacks because verification 
techniques often rely on server responses to determine the outcome of an attack [12].  
Typically, server responses are seen as a trusted method for determining the success 
of  an  attack.    Most  systems  will  respond  with  an  error  message  if  the  attack  is 
unsuccessful.  However, if the attack is successful then typically no response is issued 
because  the  injected  attack  code  is  running  instead  of  the  server  application  itself.  
Attackers  can  modify  the  exploit  code  to  include  issuing  a  response  that  the 
automated verification mechanism associates with failed attacks, and then simply wait 
before connecting to the backdoor or remote shell.  While the attack still triggers an 
alert, this evasion method attempts to convince IDS analysts that nothing is wrong by 
eluding the verification process.   
260 
A.D. Todd et al. 
3   Methodology 
3.1   Experimental Design 
To  facilitate  the  conduct  of  this  research,  a  network  test  bed  was  established.  Two 
computers are connected via Category 5 network cables and a 10/100 network switch. 
One  computer  is  the  attacking  system.  It  sends  the  exploits  and  captures  the  server 
responses. The second computer acts as a host to a variety of virtual, victim machines. 
The attacking computer is an Intel x86-based system running Fedora Core 5 as its 
operating  system  [17].  Fedora  Core  5  was  selected  due  to  its  ease  of  use  and 
prevalence  as  one  of  the  top  Linux  distributions  [18].  The  attacking  system  is  also 
configured to use Metasploit 2.7 [19]. Metasploit is a framework which facilitates the 
development and delivery of exploits.  Ethereal 0.10.14 is installed on the attacking 
computer to capture network traffic [20].  
Fig. 1. Testing Network Architecture 
The  host  computer  runs  Windows  XP  Service  Pack  2  and  uses  VMWare 
Workstation 5.5 to host the victim  machines [21]. Each of these virtual machines 
emulates hardware but runs on the host’s underlying architecture (Intel x86). The 
victim machines run a variety of Linux distributions as shown in Figure 1. These 
versions of Linux correspond to the top four Linux distributions in use today [18]. 
In some instances older versions of the distributions are used to facilitate exploits 
(e.g., Red Hat 7.3 instead of Fedora Core 6 and Mandrake 9.1 instead of Mandriva 
2007). 
The  simulated  network  is  isolated  and  assigned  private  IP  addresses.  Figure  1 
shows the network architecture. The host computer does not have a valid private IP 
address so t is unable to send or receive traffic in this simulation. Random network 
traffic is not generated because the goal of this research focuses on the responses of 
servers  and  the  ability  to  forge  these  responses  which  should  not  be  affected  by 
additional traffic. 
Alert Verification Evasion Through Server Response Forging 
261 
The virtual machines are installed with default configurations and any subsequent 
system  or  application  level  patches  are  installed  following  the  instructions  included 
with the patches.  Additional software listed in Table 1 is installed to provide network 
services with vulnerabilities available for testing.  All applications were installed with 
default settings following the install instructions included with the source files. 
Vulnerabilities are chosen based on their prevalence and exploit code availability.  
In particular, vulnerabilities  with available Metasploit exploits  were chosen because 
these exploits are highly configurable and have been proven reliable for testing and 
research.  If a Metasploit exploit is not available for a vulnerability, a public exploit is 
used. Table 2 lists the vulnerabilities and Table 3 lists the corresponding exploits. 
Table 1. Victim Applications 
Service 
SMB (file share) 
IMAP (mail) 
PPTP (VPN) 
Vulnerable Ver. 
2.2.5 
0.6 
1.1.3 
Patched Ver. 
3.0.23 
1.1 
1.3.0 
Table 2. Vulnerabilities 
Description 
CVE ID 
2003-0085  There  is  a  remote  buffer  overflow  in  Samba.  
The service fails to check a field length inside 
of  the  request  before  using  this  length  in  a 