title:One Engine to Fuzz 'em All: Generic Language Processor Testing with
Semantic Validation
author:Yongheng Chen and
Rui Zhong and
Hong Hu and
Hangfan Zhang and
Yupeng Yang and
Dinghao Wu and
Wenke Lee
2021 IEEE Symposium on Security and Privacy (SP)
One Engine to Fuzz ’em All: Generic Language
Processor Testing with Semantic Validation
Yongheng Chen†⋆, Rui Zhong⋆, Hong Hu, Hangfan Zhang, Yupeng Yang‡, Dinghao Wu and Wenke Lee†
†Georgia Institute of Technology, Pennsylvania State University,
‡UESTC
1
7
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
Abstract— Language processors, such as compilers and inter-
preters, are indispensable in building modern software. Errors
in language processors can lead to severe consequences,
like
incorrect functionalities or even malicious attacks. However, it
is not trivial to automatically test language processors to find
bugs. Existing testing methods (or fuzzers) either fail to generate
high-quality (i.e., semantically correct) test cases, or only support
limited programming languages.
In this paper, we propose POLYGLOT, a generic fuzzing
framework that generates high-quality test cases for exploring
processors of different programming languages. To achieve the
generic applicability, POLYGLOT neutralizes the difference in
syntax and semantics of programming languages with a uniform
intermediate representation (IR). To improve the language va-
lidity, POLYGLOT performs constrained mutation and semantic
validation to preserve syntactic correctness and fix semantic
errors. We have applied POLYGLOT on 21 popular language
processors of 9 programming languages, and identified 173 new
bugs, 113 of which are fixed with 18 CVEs assigned. Our
experiments show that POLYGLOT can support a wide range of
programming languages, and outperforms existing fuzzers with
up to 30× improvement in code coverage.
I. INTRODUCTION
Language processors [70], such as compilers and interpreters,
are indispensable for building modern software. They translate
programs written in high-level languages to low-level machine
code that can be understood and executed by hardware. The
correctness of language processors guarantees the consistency
between the semantics of the source program and the compiled
target code. Buggy language processors can translate even
correct programs to malfunctional codes, which might lead
to security holes. For example, miscompilation of memory-
safe programs produces memory-unsafe binaries [14, 15];
vulnerabilities in interpreters enable attackers to achieve denial-
of-service (DoS), sandbox escape, or remote code execution
(RCE) [6, 53, 57]. Even worse, these defects affect all translated
programs, including other translated language processors [59].
However, it is nontrivial for traditional software testing
techniques to automatically detect bugs in language processors,
as the processors pose strict requirements on their inputs
regarding the syntactic and semantic validity. Any error in the
program can terminate the execution of the language processor
and hinder the tester from reaching deep translation logic.
Recent works on software testing, such as grey-box fuzzing,
try to meet these requirements to effectively test language
processors [17, 26, 38, 48, 76, 77]. Originally, structure-
unaware mutation [38, 76, 77] can hardly generate syntax-
⋆ The two lead authors contributed equally to this work.
correct test cases; advanced fuzzers [42, 44] adopt higher-
level mutation in the abstract syntax tree (AST) or the
intermediate representation (IR) to preserve the input structures.
Alternatively, generation-based fuzzers leverage a precise model
to describe the input structure [1, 2, 51], and thus can produce
syntax-correct test cases from scratch. To further improve the
semantic correctness, recent fuzzers adopt highly specialized
analyses for specific languages [53, 74, 78].
However, a fuzzer will lose its generic applicability when
it
is highly customized for one specific language. Users
cannot easily utilize the specialized fuzzer to test a different
programming language, but have to develop another one
from scratch. Considering the complexity of language-specific
fuzzers (e.g., CSmith [74] consists of 80k lines of code)
and the large number of programming languages (over 700
currently [3]), it is impractical to implement a specific fuzzer for
each language. This puts current fuzzers in a dilemma: pursuing
high semantic validity sacrifices their generic applicability,
while retaining generic applicability cannot guarantee the
quality of test cases.
In this paper, we propose POLYGLOT, a fuzzing framework
that can generate semantically valid test cases to exten-
sively test processors of different programming languages.
To achieve generic applicability, we design a uniform IR
to neutralize the difference in the syntax and semantics of
programming languages. Given the BNF (Backus–Naur form)
grammar [66] of a language, POLYGLOT can generate a
frontend that translates source programs into this IR. At
the same time, users can provide semantic annotations to
describe the specific semantics about the scopes and types
of definitions of the language. The definitions include the
defined variables, functions, and composite types. In this
paper, we use variables and definitions interchangeably. These
annotations will produce semantic properties in IR during
translation. For example, the BNF grammar of functions in C
is . We
can give annotations such as "func defines a new function" and
"func-body creates a new scope". In this way, the language
differences of programming languages are unified in the IR.
To achieve high language validity, we develop two tech-
niques, the constrained mutation and the semantic validation,
for test case generation. The constrained mutation retains the
grammar structure of the mutated test cases, which helps
preserve their syntactic correctness. Further, it tries to maintain
the semantic correctness of the unmutated part of the test case.
For example, it avoids mutating the statement "int x = 1;" in
© 2021, Yongheng Chen. Under license to IEEE.
DOI 10.1109/SP40001.2021.00071
642
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:12:53 UTC from IEEE Xplore.  Restrictions apply. 
a C program in case that the rest of the program uses x, which
otherwise introduces the error of using undefined variables.
Since the syntactic correctness of a test case is preserved, and
the semantic correctness of the unmutated part is still valid,
the only thing left is to fix the potential semantic errors in
the mutated part. The mutated part could introduce semantic
errors because it might bring in invalid variables. To fix the
errors, we replace these invalid variables according to the rules
of scopes and types. For example, our mutation may insert
a statement "unknownVar + 1;" into the mutated program P
which only defines two variables, num of type integer and arr
of type array. We should replace unknownVar with num because
addition by 1 requires the variable to have an integer type. Our
semantic validation utilizes the semantic properties of IR to
collect type and scope information of variables in the test case
and integrates them in the symbol tables. These symbol tables
describe the types, scopes and the names of every variable.
The semantic validation then utilizes them to replace invalid
variables with valid ones in the mutated code, which greatly
improves the semantic correctness (up to 6.4× improvement
in our evaluation §VIII-C).
We implement POLYGLOT with 7,016 lines of C++ and
Python codes, which focus on IR generation, constrained mu-
tation and semantic validation. POLYGLOT currently supports
9 programming languages and we can easily adopt it to others.
We evaluate POLYGLOT on 21 popular compilers and inter-
preters of 9 different programming languages and successfully
find 173 new bugs. At the time of paper writing, 113 of the bugs
have been fixed with 18 CVEs assigned. Our experiments show
that POLYGLOT is more effective in generating high-quality
test cases (up to 100× improvement in language validity),
exploring program states (up to 30× more new paths) and
detecting vulnerabilities (8× more unique bugs) than state-of-
the-art general-purpose fuzzers, including the mutation-based
fuzzer AFL, the hybrid fuzzer QSYM and the grammar fuzzer
Nautilus. We also compare POLYGLOT with language-specific
testing tools CSmith for C and DIE for JavaScript, and the
results show that POLYGLOT can explore more program states.
In summary, this paper makes the following contributions:
• We propose a generic framework that can produce high-
quality inputs to test different language processors.
• We implement the prototype, POLYGLOT, of our system
to effectively test language processors.
• We evaluate POLYGLOT on 21 language processors of 9
programming languages and identify 173 new bugs.
We have released the source code of POLYGLOT1.
II. PROBLEM
In this section, we first briefly describe how language
processors handle input programs, and how syntax errors and
semantic errors terminate this process. Next, we illustrate the
challenges and limitations of existing fuzzers in testing lan-
guage processors. Then, we summarize the common semantic
errors in test cases generated by fuzzing tools. Finally, we
present our insights to solve this problem.
1https://github.com/s3team/Polyglot
Fig. 1: Workflow of language processors. Given a high-level source-
code program, a language processor checks it for syntactic and
semantic errors. If none, the processor translates the program into
low-level machine code.
1
2
3
4
5
6
7
8
9
10
11
12
}
arr[1] += "1234";
short *e, b[3] = {1, 2, 0};
e = b;
function opt(x){return x[1];}
let arr = [1, 2];
struct S { int d; } s;
int a, c;
int main() {
+ e = b
+ e = s;
+ e = res; // undef var
// missing ’;’
// mismatch type
if(arr[0]) {let arr2=[1, 2]};
// ig is a wrong keyword
do{c += *(e++);} while(*e);
int res = c;
return res;
1
2
3
4
5
6 + ig(arr[0]) {let arr2=[1, 2]};
7
8
9
10
11 + for(let idx=0; idx<100; idx++)
12 +
(b) An example JavaScript program
Fig. 2: Running examples. Fig. 2a shows a program written in C, a
statically typed programming language. If we replace line 5 with one
of line 6–8, we get different errors as stated in the comments. Similarly,
Fig. 2b shows a program written in JavaScript, a dynamically typed
language, which allows more type conversion.
(a) An example C program
opt(arr2); // undef var
for(let idx=0; idx<100; idx++)
opt(arr);
A. Language Processors
Language processors convert programs written in high-
level languages into low-level machine codes. For example,
compilers translate the whole program into machine codes,
while interpreters translate one statement at a time.
Language processors check the input program for both
syntactic and semantic errors. Any error can terminate the
execution of processors. We show the workflow of language
processors in Fig.1. The frontend checks for syntax errors at the
early stage of processing. Afterward, the backend checks for
semantic errors, which cannot be detected by the parser. Only
semantically correct programs can be successfully processed.
We show a C program in Fig. 2a and a JavaScript program
in Fig. 2b. If we add the statements that start with "+", we
introduce errors in the program. For example, line 6 in Fig. 2a