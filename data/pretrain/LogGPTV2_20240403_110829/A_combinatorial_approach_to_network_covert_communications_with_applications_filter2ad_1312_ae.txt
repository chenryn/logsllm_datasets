### Evading Detection Based on the First Four Filters

According to the discussion of Web Tap’s vulnerabilities in [15], we focus on the delay time filter in our experiment. From the web logs captured by five IRCache servers between August 7, 2006, and September 3, 2006, we obtained a series of legitimate HTTP requests for a specific website (based on their domain names) for each source IP address. This resulted in an aggregate series of approximately \( n = 52 \) million inter-request delays (IRDs) for all source IP addresses. Similar to [15], we selected a subset of \( \sqrt{n} = 7155 \) elements from the aggregate series to compute the derivative of IRDs and the running average of the derivative.

### Mimicking IRDs with WebLeaks

We then instructed WebLeaks to mimic this subset of IRDs and measured the resultant IRD for every pair of HTTP requests injected by WebLeaks using the method pair (,|) with \( R = 10 \). To reduce processing time, we considered only those IRDs smaller than 120 seconds, which covered 82% of the subset. Figure 11 shows the cumulative distribution function (CDF) of the derivative of IRDs from IRCache’s HTTP traces and that from WebLeaks. The figure clearly demonstrates that WebLeaks can closely mimic normal HTTP IRDs and evade detection.

**Figure 11: CDFs of the IRDs’ derivatives.**

- **Derivative of IRD (IRCache)**
- **Derivative of IRD (HTTPLeak-R)**
- **Running average (IRCache)**

### Evasion of TCP-Layer IPD-Based Detection

WebLeaks, as a cross-layer covert channel that embeds partial information into TCP flows, can also evade detection methods based on TCP-layer inter-packet delays (IPDs) for two main reasons. First, based on the measurement of 143,333 HTTP requests from the top 2000 websites ranked by www.alexa.com, we found that the sizes of more than 99% of HTTP requests are less than the default TCP Maximum Segment Size (MSS), i.e., 1460 bytes [37]. This means almost all requests can be transmitted in one packet. Therefore, successfully mimicking IRDs implies successful mimicking of IPDs. Second, even if some requests are sent in more than one packet, WebLeaks will not cause abnormal IPDs because it does not alter the packets' timing information.

### Evaluation of ACKLeaks Camouflage Capability

To evaluate ACKLeaks's camouflaging capability, we implemented the Regularity test [17], ǫ-similarity test [17], Kolmogorov-Smirnov (KS) test [18], EN test [8], and CCE test [8], and applied them to the ACKLeaks traces. Following the parameter settings in their original papers, we set the Regularity test’s non-overlapping window size \( \omega \) to 100 [17] and the ǫ-similarity test’s ǫ to 0.01 [17]. For the KS test, we built the normal distribution of inter-ACK packet delays (IADs) from a set of approximately 10 million IADs obtained from 10,000 HTTP flows randomly selected from the WIDE data set [35], following the approach of Gianvecchio et al. [18].

We used the traces of downloading a 10-MB file 100 times from the Planeload node in Japan as normal HTTP samples. Since ACKLeaks only affects TCP ACK packets in a TCP flow, we computed a score based on the IADs in individual normal HTTP flows using each method. We then started ACKLeaks when downloading the same file 100 times and saved the traces as ACKLeaks samples.

Cabuk et al. [17] classify a flow as a covert channel if it has a score smaller than a threshold in the Regularity test or a score larger than another threshold in the ǫ-similarity test [17]. Gianvecchio et al. classify a flow as a covert channel if its KS test score is larger than a threshold. They also found that a covert timing channel has a score less than a threshold in the EN test or a score that is either lower or higher than thresholds in the CCE test [8].

Following these suggestions, we selected the threshold of each detection algorithm to ensure a false positive rate of no more than 0.01. As shown in Table III, the detection rates for ACKLeaks are very low (less than 0.03). In other words, ACKLeaks can successfully evade these detection methods.

**Table III: Detection rates on ACK packets per flow.**

| Tests              | Normal HTTP | ACKLeaks  |
|--------------------|-------------|-----------|
| Regularity ≤ 0.271 | 0.01        | 0         |
| ǫ-similarity ≥ 88.97 | 0.01        | 0.03      |
| KSTEST ≥ 0.481     | 0.01        | 0         |
| EN ≤ 6.388         | 0.01        | 0.02      |
| CCE ≥ 1.417        | 0.01        | 0         |

### Related Work

Most storage channels use specification-based approaches to locate possible covers [38], [39]. Existing literature and tools on storage channels have already covered many popular protocols (e.g., IP [10], [39], TCP [10], [36], [40], SSH [41], and HTTP [6]) and applications (e.g., Web counter [29], VoIP [42]).

Existing timing channels employ either the absolute time interval as the timing reference [17] or a single packet or group of packets as the timing reference [18]–[20], [43], [44]. For example, the IP timing channel delivers bit 1 by sending one packet during a predefined time interval and bit 0 by keeping silent [17]. Jitterbug encodes messages into the inter-arrival time between two consecutive packets [19]. TCPScript leaks information through the number of back-to-back packets in each burst by mimicking TCP’s burstiness [20].

Infranet lets an encoder select one out of \( K \) URLs to deliver \( \log_2 K \)-bit information [5]. There are two major differences between Infranet and WebLeaks. First, Infranet does not consider the order of URLs or the combinations of URLs and web pages, thus having much lower capacity than WebLeaks. Second, Infranet does not exploit TCP layer information to increase capacity. Interested readers may refer to [45] for a more thorough survey on covert channels.

To detect hidden data in protocols, models have been built to capture anomalies in the statistical features of packet headers [36] and the timing information of packets [8], [17], [18]. Detection schemes against HTTP-based covert channels scrutinize the content and timing information of HTTP requests [15], [16], [28]. Borders and Prakash propose a framework to quantify information leaks due to HTTP-based covert channels [28]. Besides detection, another approach is to neutralize covert channels by performing active operations on the traffic, such as protocol scrubbers [21].

Quantifying the capacities of nine methods is motivated by the Twelvefold Way problem in the field of Enumerative Combinatorics [24] and its extension [46]. These problems count all the possible ways of putting balls into urns and their results. We selected the cases that can be employed to design network covert channels instead of applying all cases in [24], [46]. Moreover, we designed new ranking and unranking algorithms to transform between combinations and their index.

Port knocking can also benefit from our combinatorial approach. More precisely, since the original port knocking method needs to select a sequence of packets as the secret for user authentication [47], it can have a much larger secret space by adopting our combinatorial method.

### Conclusions

Unlike most existing network covert channels that consider only individual network objects, we proposed a general combinatorial approach that exploits the relationship among network objects to devise a wide spectrum of covert channels. Based on two fundamental features of network objects, our approach provides nine main methods and two generalization principles for network covert communications. To illustrate our approach, we applied it to the design of two novel covert channels: WebLeaks and ACKLeaks. Both can leak information without modifying any network object. We implemented them and conducted extensive experiments to evaluate their performance and applied state-of-the-art detection algorithms to evaluate their camouflage capability. The experiment results show that the combinatorial approach boosted their data rates and helped them evade detection.

### Acknowledgments

We appreciate the anonymous reviewers for their quality reviews. We thank Duane Wessels for allowing us to access the NLANR traces. This work is partially supported by grants GU-G386 and G-U669 from The Hong Kong Polytechnic University. This material is based upon work supported in part by the National Science Foundation under grant no. 0831300, the Department of Homeland Security under contract no. FA8750-08-2-0141, and the Office of Naval Research under grants no. N000140710907 and no. N000140911042. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation, the Department of Homeland Security, or the Office of Naval Research.

### References

[References listed as in the original text]

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the technical accuracy and detail of the original text.