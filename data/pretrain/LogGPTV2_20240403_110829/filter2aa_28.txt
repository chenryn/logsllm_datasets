# Routing in the Dark: Pitch Black
**Authors:**  
Nathan S. Evans  
Christian Grothoff

**Affiliation:**  
Colorado Research Institute for Security and Privacy, University of Denver

## 1. Motivation
Efficient, fully decentralized routing in restricted-route topologies is crucial for several types of networks:
- Friend-to-friend (F2F) networks ("darknets")
- WiFi ad-hoc and sensor networks
- Unstructured networks

Clarke & Sandberg claim to achieve O(log n) routing performance in Freenet 0.7. However, it is important to evaluate whether this new routing protocol is reasonably resistant to attacks.

## 2. Freenet Overview
Freenet is an anonymous peer-to-peer network with the following characteristics:
- **Overlay Network:** Based on a cyclic address space of size \(2^{32}\).
- **Node Connections:** Each node maintains a constant set of connections.
- **Data Identification:** All data is identified by a key (modulo \(2^{32}\)).
- **Data Storage:** Data is assumed to be stored at the closest node.
- **Routing Algorithm:** Uses depth-first traversal in order of proximity to the key.

## 3. Routing in the Dark
The routing algorithm in Freenet is based on the small-world network assumption:
- **Sparsely Connected Graph:** The graph is sparsely connected but has short paths between any pair of nodes.
- **Short Paths:** There exists a short path (O(log N)) between any pair of nodes.
- **Common Phenomenon:** This is a common real-world phenomenon as observed by Milgram, Watts, and Strogatz.

Freenet’s routing algorithm aims to find these short paths by:
- **Proximity Determination:** Using the locations of nodes to determine their proximity to the target.
- **Topology Structuring:** Swapping node locations to structure the topology.

### 3.1 Swap Example
Consider the following example of a location swap:

| Before Swap | After Swap |
|-------------|------------|
| 0.60        | 0.90       |
| 0.10        | 0.10       |
| 0.50        | 0.60       |
| 0.90        | 0.30       |
| 0.30        | 0.45       |
| 0.45        | 0.85       |
| 0.85        | 0.40       |
| 0.40        | 0.25       |
| 0.25        | 0.25       |

### 3.2 Location Swapping
Nodes swap locations to improve routing performance. For each connected pair of nodes (a, b), the probability of swapping is calculated as follows:

\[ P_{a,b} := \frac{\sum_{(a,o) \in E} |L_a - L_o| \cdot \sum_{(b,p) \in E} |L_b - L_p|}{\sum_{(a,o) \in E} |L_b - L_o| \cdot \sum_{(b,p) \in E} |L_a - L_p|} \]

- If \( P_{a,b} \geq 1 \), the nodes swap locations.
- Otherwise, they swap with probability \( P_{a,b} \).

## 4. Routing of GET Requests
GET requests are routed based on peer locations and keys:
1. **Client Initiation:** The client initiates a GET request.
2. **Neighbor Selection:** The request is routed to the neighbor with the closest location to the key.
3. **Forwarding:** If the data is not found, the request is forwarded to neighbors in order of proximity to the key.
4. **Termination:** Forwarding stops when the data is found, the hops-to-live counter reaches zero, or an identical request was recently forwarded (to avoid circular routing).

### 4.1 GET Request Example
A GET request from node 0.90 searching for data with identifier 0.22 (stored at node 0.25):

| Step 1/7 | Step 2/7 | Step 3/7 | Step 4/7 | Step 5/7 | Step 6/7 | Step 7/7 |
|----------|----------|----------|----------|----------|----------|----------|
| 0.90     | 0.90     | 0.90     | 0.90     | 0.90     | 0.90     | 0.90     |
| 0.10     | 0.10     | 0.10     | 0.10     | 0.10     | 0.10     | 0.10     |
| 0.60     | 0.60     | 0.60     | 0.60     | 0.60     | 0.60     | 0.60     |
| 0.30     | 0.30     | 0.30     | 0.30     | 0.30     | 0.30     | 0.30     |
| 0.45     | 0.45     | 0.45     | 0.45     | 0.45     | 0.45     | 0.45     |
| 0.85     | 0.85     | 0.85     | 0.85     | 0.85     | 0.85     | 0.85     |
| 0.40     | 0.40     | 0.40     | 0.40     | 0.40     | 0.40     | 0.40     |
| 0.25     | 0.25     | 0.25     | 0.25     | Found!   | 0.25     | 0.25     |

## 5. PUT Requests
PUT requests are routed similarly to GET requests:
1. **Client Initiation:** The client initiates a PUT request.
2. **Neighbor Selection:** The request is routed to the neighbor closest to the key.
3. **Forwarding:** If the receiver has any peer whose location is closer to the key, the request is forwarded.
4. **Reset and Broadcast:** If not, the node resets the hops-to-live to the maximum and sends the PUT request to all of its neighbors.
5. **Termination:** Routing continues until the hops-to-live counter reaches zero or the node has seen the request already.

### 5.1 PUT Request Example
A PUT request from node 0.25 inserting data identified by the ID 0.93:

| Step 1/3 | Step 2/3 | Step 3/3 |
|----------|----------|----------|
| 0.90     | 0.90     | 0.90     |
| 0.10     | 0.10     | 0.10     |
| 0.60     | 0.60     | 0.60     |
| 0.30     | 0.30     | 0.30     |
| 0.45     | 0.45     | 0.45     |
| 0.85     | 0.85     | 0.85     |
| 0.40     | 0.40     | 0.40     |
| 0.25     | 0.25     | 0.25     |

## 6. Attack on Freenet
### 6.1 Basic Idea
Freenet relies on a wide spread of node locations for data storage. Reducing the spread of locations causes an imbalance in storage responsibilities. Peers cannot verify locations in the swap protocol, including the location they may receive. Therefore, an attacker can use the swap protocol to reduce the spread of locations.

### 6.2 Attack Details
- **Initialization:** Malicious nodes are initialized with specific locations.
- **Swap Behavior:** If a node swaps with a malicious node, the malicious node resets to the initial location (or one very close to it).
- **Location Replacement:** This removes the "good" node location and replaces it with a "bad" location.
- **Propagation:** Over time, the attacker creates large clusters of nodes around a few locations through normal swapping behavior.

### 6.3 Attack Implementation
- **Codebase Modification:** Malicious nodes use Freenet’s codebase with minor modifications.
- **Undetectable Violation:** The attacker does not violate the protocol in a detectable manner.
- **Behavior Simulation:** Malicious nodes behave as if they had a large group of friends.
- **Penetration Speed:** Using multiple locations for clustering increases the speed of penetration.

## 7. Experimental Setup
- **Testbed:** Created a testbed with 800 Freenet nodes.
- **Topology:** Topology corresponds to Watts & Strogatz small world networks.
- **Instrumentation:** Captures path lengths and node locations.
- **Content Placement:** Content is always placed at the node with the closest location.
- **Storage Space:** Nodes have bounded storage space.

### 7.1 Dispersion Example with 800 Nodes
- **Before Attack:** Plot of node locations before the attack.
- **After Attack:** Plot of node locations after the attack.

### 7.2 Data Loss Examples
- **2 Attack Nodes:** Graph showing average data loss over 5 runs with 800 nodes and 2 attack nodes using 8 bad locations, starting after about 2 hours.
- **4 Attack Nodes:** Graph showing average data loss over 5 runs with 800 nodes and 4 attack nodes using 8 bad locations, starting after about 2 hours.
- **8 Attack Nodes:** Graph of typical data loss from 1 run with 800 nodes and 8 attack nodes using 8 bad locations, starting after about 2 hours.

## 8. Mitigation Strategies
- **Frequency Check:** Monitor how frequently a node swaps similar locations.
- **Swap Limitation:** Limit the number of swaps with a particular peer.
- **Malicious Node Detection:** Determine if a node is malicious because its location is too close.
- **Periodic Reset:** Periodically reset all node locations.
- **Secure Computation:** Use secure multiparty computation for swaps.

In F2F networks, you can never be sure about the friends of your friends!

## 9. Conclusion
- **Robustness Issue:** Freenet’s routing algorithm is not robust.
- **Adversarial Exploitation:** Adversaries can easily remove most of the content.
- **Trust Vulnerability:** The attack exploits the location swap, where nodes trust each other.
- **Fundamental Dependency:** The swap is fundamental to the routing algorithm.
- **Attack Code:** Available at [http://crisp.cs.du.edu/pitchblack/](http://crisp.cs.du.edu/pitchblack/)

Natural churn can also cause similar clustering of node locations. For more details, refer to our paper.

## 10. Questions?

## 11. Additional Data
- **Routing Path Lengths:** Graph showing the average path lengths over multiple runs.