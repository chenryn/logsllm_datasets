            }
        }
        *(envp+n) = NULL;
程序将所有的变量，包括之前解析出的头、请求参数等都放入到了`envp`数组中，但是不能为`REMOTE_HOST`以及`HTTP_AUTHORIZATION`两个。可以看出来这个黑名单的限制非常的局限，传入的参数可以有很多。
继续往下看，创建了`stdIn`以及`stdOut`两个变量。
    /*
            Create temporary file name(s) for the child's stdin and stdout. For POST data the stdin temp file (and name)
            should already exist.
         */
        if (wp->cgiStdin == NULL) {
            wp->cgiStdin = websGetCgiCommName();
        }
        stdIn = wp->cgiStdin;
        stdOut = websGetCgiCommName();
        if (wp->cgifd >= 0) {
            close(wp->cgifd);
            wp->cgifd = -1;
        }
gdb调试下断点在该位置，查看`stdIn`以及`stdOut`变量，可以知道两个变量为相应的tmp文件路径，其中`wp->cgiStdin`一开始不为`NULL`。
    pwndbg> print stdIn
    $20 = 0x55555575d760 "/tmp/cgi-1.tmp"
    pwndbg> print stdOut
    $21 = 0x55555576dcf0 "/tmp/cgi-2.tmp"
接着函数就调用了`launchCgi`函数，根据注释可知该函数就是启动cgi程序。
    /*
            Now launch the process.  If not successful, do the cleanup of resources.  If successful, the cleanup will be
            done after the process completes.
         */
        if ((pHandle = launchCgi(cgiPath, argp, envp, stdIn, stdOut)) == (CgiPid) -1) {
            websError(wp, HTTP_CODE_INTERNAL_SERVER_ERROR, "failed to spawn CGI task");
            for (ep = envp; *ep != NULL; ep++) {
                wfree(*ep);
            }
跟进去该函数：
    #if ME_UNIX_LIKE || QNX
    /*
        Launch the CGI process and return a handle to it.
     */
    static CgiPid launchCgi(char *cgiPath, char **argp, char **envp, char *stdIn, char *stdOut)
    {
        int     fdin, fdout, pid;
        trace(5, "cgi: run %s", cgiPath);
        if ((fdin = open(stdIn, O_RDWR | O_CREAT | O_BINARY, 0666)) = 0) {
            close(fdout);
        }
        if (fdin >= 0) {
            close(fdin);
        }
        return pid;
    }
可以看到代码首先打开`stdIn`以及`stdOut`指向的文件即两个tmp文件，然后创建子进程，在子进程中将进程的标准输入与输出重定向到了两个打开文件句柄中，最后调用`execve`去启动新进程执行cgi文件。
cgi可执行文件执行的过程中，标准输入会从`stdIn`文件中获取，标准输出会输出草`stdOut`文件中。`execve`启动的第三个参数`envp`即是之前`cgiHandler`解析过的envp数组，以此实现将cgi可执行程序的变量放入到环境变量中。
漏洞就如上所示，即我们传入的参数会可以控制cgi进程的环境变量。会有什么危害？这就需要结合前面提到过的环境变量`LD_PRELOAD`，利用`LD_PRELOAD`与`/proc/self/fd/0`的结合，可实现任意代码执行，这将在漏洞利用部分中描述。
接下来我想搞清楚在`cgiHandler`之前HTTP请求是如何被解析以及最后执行到`cgiHandler`的。
将断点下在`cgiHandler`，可以看到函数调用栈为：
    ► f 0     7ffff7b33ec1 cgiHandler+781
       f 1     7ffff7b4644e websRunRequest+774
       f 2     7ffff7b39866 websPump+121
       f 3     7ffff7b396f3 readEvent+352
       f 4     7ffff7b3947c socketEvent+159
       f 5     7ffff7b4f038 socketDoEvent+197
       f 6     7ffff7b4ef5e socketProcess+86
       f 7     7ffff7b3b1ce websServiceEvents+67
       f 8     5555555555eb main+1377
       f 9     7ffff7747b97 __libc_start_main+231
可以看到程序是从`readEvent`开始获取socket输入的，可以动态进行验证。
从`readEvent`函数开始分析代码，关键代码如下：
    /*
        The webs read handler. This is the primary read event loop. It uses a state machine to track progress while parsing
        the HTTP request.  Note: we never block as the socket is always in non-blocking mode.
     */
    static void readEvent(Webs *wp)
    {
        WebsBuf     *rxbuf;
        WebsSocket  *sp;
        ssize       nbytes;
        ...
        rxbuf = &wp->rxbuf;
        if ((nbytes = websRead(wp, (char*) rxbuf->endp, ME_GOAHEAD_LIMIT_BUFFER)) > 0) {
            wp->lastRead = nbytes;
            bufAdjustEnd(rxbuf, nbytes);
            bufAddNull(rxbuf);
        }
        if (nbytes > 0 || wp->state > WEBS_BEGIN) {
            websPump(wp);
        }
        ...
    }
根据`Webs`结构体的定义我们可以知道，`wp->rxbuf`存储的是请求包中的所有数据。调用`websRead`去获取输入，存储到`wp->rxbuf`中，该函数通过`socketRead`或`sslRead`获取的数据，`WebsBuf`定义如下：
    typedef struct WebsBuf {
        char    *buf;               /**rxbuf`中。进入到`websPump`函数中，关键代码如下：
    PUBLIC void websPump(Webs *wp)
    {
        bool    canProceed;
        for (canProceed = 1; canProceed; ) {
            switch (wp->state) {
            case WEBS_BEGIN:
                canProceed = parseIncoming(wp);
                break;
            case WEBS_CONTENT:
                canProceed = processContent(wp);
                break;
            case WEBS_READY:
                if (!websRunRequest(wp)) {
                    /* Reroute if the handler re-wrote the request */
                    websRouteRequest(wp);
                    wp->state = WEBS_READY;
                    canProceed = 1;
                    continue;
                }
                canProceed = (wp->state != WEBS_RUNNING);
                break;
            case WEBS_RUNNING:
                /* Nothing to do until websDone is called */
                return;
            case WEBS_COMPLETE:
                canProceed = complete(wp, 1);
                break;
            }
        }
    }
这是一个分步的处理函数，根据`wp->state`的状态来处理。
`wp->state`一开始是`WEBS_BEGIN`，程序调用`parseIncoming`，跟进去该函数，关键代码如下：
    static bool parseIncoming(Webs *wp)
    {
         ...
        /*
            Parse the first line of the Http header
         */
        parseFirstLine(wp); //处理请求包中的第一行
        if (wp->state == WEBS_COMPLETE) {
            return 1;
        }
        parseHeaders(wp); //处理请求头
        if (wp->state == WEBS_COMPLETE) {
            return 1;
        }
        wp->state = (wp->rxChunkState || wp->rxLen > 0) ? WEBS_CONTENT : WEBS_READY; //设置state
        websRouteRequest(wp); //将请求的url进行转换
        if (wp->state == WEBS_COMPLETE) {
            return 1;
        }
    #if ME_GOAHEAD_CGI
        if (wp->route && wp->route->handler && wp->route->handler->service == cgiHandler) {
            if (smatch(wp->method, "POST")) {
                wp->cgiStdin = websGetCgiCommName();
                if ((wp->cgifd = open(wp->cgiStdin, O_CREAT | O_WRONLY | O_BINARY | O_TRUNC, 0666)) method, "PUT")) 
          ...
        return 1;
    }
首先调用`parseFirstLine`解析HTTP请求的第一行，即如`POST /cgi-bin/cgitest?LD_PRELOAD=/proc/self/fd/0 HTTP/1.1\r\n\r\n`。该函数的主要功能为：
  * 解析请求方法（`POST`、`GET`以及`PUT`），并存入`wp`结构体相关字段中。
  * 解析请求的url，并存入`wp`结构体相关字段中。
  * 解析HTTP协议版本，并存入`wp`结构体相关字段中。
  * 将解析出来的url分解成`host`、`path`、`port`以及`query`等字段，并存入`wp`结构体相关字段中。
接着是调用`parseHeaders`，代码中的注释为：
    /*
            Parse the header and create the Http header keyword variables
            We rewrite the header as we go for non-local requests.  NOTE: this
            modifies the header string directly and tokenizes each line with '\0'.
        */