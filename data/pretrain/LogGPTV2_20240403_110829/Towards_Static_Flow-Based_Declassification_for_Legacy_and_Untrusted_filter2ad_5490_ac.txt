pendence on I/O channels. It is added to the program during
pre-processing: depends(θ, c) is inserted every time an input
or output operation occurs inside a conditional, and relates
the channel with the conditional under which it occurs. The
command is added just before the conditional block in which
the operation takes place.
Next, we deﬁne the program semantics, starting from the
notion of state. Note that we present an instrumented seman-
tics, in the sense that the state of the process keeps track of
certain information useful for proving the compliance of our
validation mechanism.
A state σ ∈ Σ is a 4-tuple (cid:6)E , I , O, PC (cid:7), where
E ∈
I ∈
O ∈ O = Out → P(Exp(cid:6)In × N(cid:7))
E = Var → Exp(cid:6)In × N(cid:7)
I = In → N
P C ∈ PC = (Var + IO) → P(Exp(cid:6)In × N(cid:7))
E is a mapping from variables to expressions on indexed input
channels, keeping track of the expression over the input that a
variable holds; I is a mapping from input channels to numeric
indexes, keeping track of the index of the next value to be
read (so I (α) denotes index of the next value to be read from
channel α); initially, I (α) = 1 for every input channel α. O
maps each output channel to the set of expressions (on indexed
inputs) that could be sent over that channel. Finally, PC
maps variables and channels (both input and output) to sets
of expressions on indexed inputs, which records the implicit
information ﬂows, i.e. the expressions on which the variables
and channels are conditionally dependent. Given a state σ, we
write Eσ to indicate its ﬁrst component, Iσ for the second,
etc. We omit σ if it is clear from the context, thus e.g. E (x)
denotes the expression held by x in the “current” state.
Next, we deﬁne environments which provide the input to
the program through the channels. We have a straightforward
channel model where the channels are independent of each
other. In Section VIII we discuss how to extend this to more
intricate channel models.
π ∈ Π : In × N → Val
Finally, we deﬁne a conﬁguration over which the semantics
are deﬁned.
Deﬁnition 5 (Conﬁguration). A conﬁguration ω ∈ Ω is a
triple (cid:6)C, σ, π(cid:7), where C is a program, σ a state and π an
environment.
Note that the environment determines the inputs that have
been or will be provided to the program and (due to our
channel model) does not change during the execution of the
program. The operational semantics is presented in Figure 6.
The transitions between conﬁgurations have a label (∈ Obs)
representing what can be observed externally when that transi-
tion occurs; a τ label represents a non-observable transition. In
our case, the only observable action is the output, showing the
channel and the value being sent over the channel. I.e. o ∈ Obs
is τ or out(γ, v) for some output channel γ and value v.
We use square brackets
[Eσ
(y)/x] returns a new Eσ(cid:2), in which Eσ(cid:2) (x) = Eσ
to denote substitution e.g.
(y).
Eσ
For changes in the state, we only indicate the components
for which σ(cid:2) differs from σ. Our semantics treats φ-functions
in a special way. Unlike the standard functions, φ-functions
are evaluated as soon as they appear. Function EV makes this
evaluation. According to standard deﬁnition of the φ-functions
in SSA form, the function returns the variable that has been
deﬁned most recently. The boldface f, used in function V
indicates that the function is actually evaluated to a value.
The initial state σinit
is the state in which no channels
have been read yet (I (α) = 1), all variables are undeﬁned
98
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
(cid:6)x := α, σ, π(cid:7)
τ−→ (cid:6)skip, σ(cid:2), π(cid:7)
where Eσ(cid:2) = Eσ[αIσ (α)/x]
Iσ(cid:2) = Iσ[Iσ(α) + 1/α]
PC σ(cid:2) = PC σ[PC σ(α)/x]
where
(cid:6)γ := x, σ, π(cid:7)
o = out(γ, V (Eσ(x), π))
o−→ (cid:6)skip, σ(cid:2), π(cid:7)
Oσ(cid:2) = Oσ[Oσ(γ) ∪ Eσ(x)/γ]
PC σ(cid:2) = PC σ[PC σ(γ) ∪ PC σ(x)/γ]
τ−→ (cid:6)skip, σ(cid:2), π(cid:7)
(cid:6)x := f (y1, . . . , yk), σ, π(cid:7)
where Eσ(cid:2) = Eσ[f (Eσ(y1), . . . , Eσ(yk))/x]
PC σ(cid:2) = PC σ[PC σ(y1) ∪ . . . ∪ PC σ(yk)/x]
(cid:6)x := φc(a, b), σ, π(cid:7)
τ−→ (cid:6)skip, σ(cid:2), π(cid:7)
where Eσ(cid:2) = Eσ[EV (φc(a, b), σ)/x]
(Input)
(Output)
(Assign)
(Phi)
PC σ(cid:2) = PC σ[Eσ(c) ∪ PC σ(c) ∪ PC σ(a) ∪ PC σ(b)/x]
(cid:2)
EV : Exp  × Σ → Exp 
EV (φc(a, b), σ) =
E (a)
E (b)
if a has been most recently deﬁned;
if b has been most recently deﬁned.
(cid:6)depends(θ, c), σ, π(cid:7)
τ−→ (cid:6)skip, σ(cid:2), π(cid:7)
where PC σ(cid:2) = PC σ[PC σ(θ) ∪ Eσ(c) ∪ PC σ(c)/θ]
(cid:6)if c then C else C, σ, π(cid:7)
(Depends)
τ−→ (cid:6)C, σ, π(cid:7)
τ−→ (cid:6)C, σ, π(cid:7)
τ−→ (cid:6)C, σ, π(cid:7)
τ−→ (cid:6)C ; C ; while C ; c do C, σ, π(cid:7)
if V (E (c), π) = true
(If 1)
if V (E (c), π) = false
(If 2)
if V (E (c), π) = false (While 1)
if V (E (c), π) = true (While 2)
(cid:6)while C ; c do C, σ, π(cid:7)
(cid:6)skip ; C, σ, π(cid:7)
τ−→ (cid:6)C, σ, π(cid:7)
(cid:6)C, σ, π(cid:7) o−→ (cid:6)C (cid:2), σ(cid:2), π(cid:7)
(cid:6)C ; C, σ, π(cid:7) o−→ (cid:6)C (cid:2) ; C, σ(cid:2), π(cid:7)
(Skip)
(Seq)
(cid:2)
V : Exp  × Π → Val
V (e, π) =
π(α, n)
f (V (e1, π), . . . , V (en, π))
if e = αn;
if e = f (e1, . . . , en).
Fig. 6. Program semantics
(E (x) =⊥) and no output has been written to any channel
(O(γ) = ∅). A run of program C in environment π is a se-
quence of conﬁgurations, starting from the initial conﬁguration
and linked by transitions, i.e., t ∈ (Obs × Ω)∗ in which for
t = (cid:6)o0, ω0(cid:7).(cid:6)o1, ω1(cid:7) . . . (cid:6)on, ωn
(cid:7), o0 = τ , ω0 = (cid:6)C, σinit , π(cid:7),
oi+1−−−→ ωi+1 is
and for each i, such that 0 ≤ i < n, ωi
a transition given by the semantics (Figure 6). We say the
run is a full run if no steps are possible from end state ωn
otherwise the run is called a prerun. We write ι(t) for the
sequence of (visible) output actions taken in t and t1 ≡out t2
if ι(t1) = ι(t2). For sets of traces T, T (cid:2) we put T ≡out T (cid:2) if
∀t ∈ T : ∃t(cid:2) ∈ T (cid:2) : t ≡out t(cid:2) and vice versa. Finally, we also
write Run(C, π) for the runs of C (note that for each prerun
in t there is exactly one run t(cid:2) which extends t with one step).
Program Expression Graph: Now we deﬁne how a graph
is built from the program. We consider a directed typed graph,
deﬁned as G = (V, E) where V ⊆ Vertex and E ⊆ Edge
are the sets of vertices and edges, respectively. A vertex n
has the form (l, t), where l is the label and t is the type,
which can be var, in, out, and const, for variables,
I/O channels and constants, respectively. For convenience, nl
denotes the vertex with label l, and we assume that the type
of the node is clear from the label, e.g., nx, nα, nγ, nρ
and nN are nodes of types var, in, out, any and const,
respectively. An edge e has the form (n, n(cid:2), t, i), where n and
n(cid:2) are the origin and destination vertices, respectively; t is
the edge type, which can be plain (for assignments with
no function application), control (for control dependencies
between boolean variables in conditionals and variables as-
signed inside the conditional block), or a function name f, for
edges that represent function applications, and i is an index
that represents the control context in which the assignment
represented by the edge takes place. We use fi when the source
node of the edge is the i-th argument of function f.
To build the graph we use the function G, deﬁned in
Figure 7, which takes a command C and two control context
indexes i and j as arguments and returns the corresponding
graph. Argument i represents the “current” control context
index, whereas j represents the highest index and it is used to
guarantee that different control contexts have distinct indexes.
to G0,0(C). The φ-functions
We write G(C) as a short
generated on SSA translation are used to handle control ﬂow
dependencies. Note that
there are multiple deﬁnitions for
assignments, according to the format of the RHS operator.
Also, for the control context
index, φ-functions in loops
receive a special treatment. In these cases, the function is
called and returns the ﬁrst argument (φ1 edge) aways once,
regardless if the loop runs or not, whereas it is called and
returns the second argument (φ2 edge) as many times as the
loop runs. Thus, the φ1 edge is labeled with the control context
index of before entering the loop, and φ2 is labeled with
the same control context of the loop. This is represented by
function G. Also, function mcc(g) takes a graph g and returns
the highest control context index in it.
G : P rog × N × N → G
Gi,j(skip) = ∅
Gi,j(C1 ; C2) = Gi,j(C1) ∪ Gi,j (cid:2) (C2)
where j (cid:2) = mcc(Gi,j(C1))
Gi,j(if c then C1 else C2) = Gj+1,j+1(C1 ; C2)
Gi,j (while C ; c do C) = Gi,j+1(C) ∪ Gj+1,j+1(C)
Gi,j (x := α) = nα −→
Gi,j (γ := x) = nx −→
Gi,j(x := y) = ny −→
i
i
nx
nγ
nx
Gi,j(x := f (y1, . . . , yk)) = ny1
Gi,j (x := φc(a, b)) = na
Gi,j (depends(θ, c)) = nc
i
f1−→
i
φ1−→
i
nx, nb
−−−−−→ nθ
control
nx, . . . , nyk
fk−→
i
φ2−→
i
nx, nc
nx
−−−−−→ nx
control
Gi,j(C1 ; C2) = Gi,j(C1) ∪ Gi,j(C2)
Gi,j(x := φc(a, b)) = na
φ1−→
i
nx, nb
φ2−→
j
nx, nc
control
−−−−−→ nx
Fig. 7. Graph building function
Deﬁnition 6 (Expression Graph). The expression graph g ∈
G of a program C is given by G(C).
We use nodes(g) and edges(g) to denote the sets of vertices
and edges of g, respectively. We use n t−→
n(cid:2) to denote that
i
there is an edge of type t and control context i from node
n to node n(cid:2). When t = plain, we use just n → n(cid:2) as
99
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:11:48 UTC from IEEE Xplore.  Restrictions apply. 
∗
a shorthand and we omit i when its value is irrelevant. In a
similar fashion, n w−→∗
n(cid:2) denotes that there is a path between
nodes n and n(cid:2), with w being the sequence of labels on this
path, and n w−→
n(cid:2) denotes that the whole path w has the same
i
control context i. We also use φ−→ to denote either φ1−→ or φ2−→.
Using a notation analogous to that of bisimulation [17], we
call an edge a τ -edge if its type is either plain or φ. Finally,
we write (cid:16)→ n to denote that the indegree of n is zero, and
function type(n) returns the type of a node n.
For our ﬁrst theorem, we ﬁrst present the deﬁnition of input-
uniqueness.
Deﬁnition 7 (Input Uniqueness on Expressions). An expres-
sion e : Exp(cid:6)In×N(cid:7) is said to be α-unique if every occurrence
of α represents a distinct access on that input channel, i.e.
every αi has a distinct index i.
We now deﬁne a notion of α-uniqueness for graph nodes
n that will be used below to express the requirement that
expressions recognized by n be α-unique. Given a graph g, this
notion is represented by a set of pairs uni(g) ⊆ In × Vertex
and (α, n) ∈ uni(g) indicates that n is intended to represent
only α-unique expressions. In policy graphs (see Deﬁnition 10
below), this set is given explicitly. For program graphs, we
derive it according to the following deﬁnition. (We believe
that this deﬁnition is somewhat conservative in the sense that
it may not extract all α-uniqueness pairs that could be derived
in some cases, but it serves us well, is simple, and admits
efﬁcient computation.)
Deﬁnition 8 (Input Uniqueness on Nodes). Let nx be a
variable node in the program expression graph g, and α be
an input channel. We say that nx is α-unique,