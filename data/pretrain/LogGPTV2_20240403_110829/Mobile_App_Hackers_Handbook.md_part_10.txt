f Float
i Integer
u Unsigned Integer
Q ImplicitlyUnwrappedOptional
S String
Xcode also ships with the swift-demangle tool, which you can use to demangle a mangled symbol:
$ swift-demangle -expand __TFC10mahh_swift4MAHH9helloMAHHfS0_FT_T_
Demangling for _TFC10mahh_swift4MAHH9helloMAHHfS0_FT_T_
kind=Global
kind=Function
kind=Class
kind=Module, text="mahh_swift"
kind=Identifier, text="MAHH"
kind=Identifier, text="helloMAHH"
kind=Type
kind=UncurriedFunctionType
kind=Class
kind=Module, text="mahh_swift"
kind=Identifier, text="MAHH"
kind=ReturnType
kind=Type
kind=FunctionType
kind=ArgumentTuple
kind=Type
kind=NonVariadicTuple
kind=ReturnType
kind=Type
kind=NonVariadicTuple
_TFC10mahh_swift4MAHH9helloMAHHfS0_FT_T_ —>
mahh_swift.MAHH.helloMAHH (mahh_swift.MAHH)() -> ()
Release builds are likely to be stripped, which will discard the name mangled symbols from the binary and make
reverse engineering a much more time-consuming task.
2.8.5 Disassembling and Decompiling iOS Applications
As you will now no doubt be aware, iOS applications compile to native code. This means that to reverse engineer
them, you must disassemble and decompile your target application. This level of in-depth reverse engineering is
beyond the scope of this book; indeed whole publications are dedicated to this topic alone. However, you should
be aware of a couple of tools that will help get you started in reverse engineering a native code application, both
of which have excellent support for pseudo-code generation of ARM assembler:
IDA Pro is the weapon of choice for many reverse engineers and is capable of parsing the Objective-C
segment to provide accurate class and method names. When armed with the Hex-Rays decompiler, IDA is
capable of giving a quite accurate pseudo-code representation of the target application.
Hopper is similar to IDA but has support for Linux and OS X. It has equivalent functionality for parsing and
accurately renaming Objective-C functions as well as an excellent pseudo-code generator.
For further information on how to use Hopper and an introduction to static binary analysis, review the blog post
by @0xabad1dea (http://abad1dea.tumblr.com/post/23487860422/analyzing-binaries-with-hoppers-
decompiler).
Summary
Having studied this chapter you should now have a good understanding of how iOS applications work and are
distributed. You should also have familiarity with the iOS security model, including the many security features
that come with the platform. This will allow you to apply context to any vulnerabilities that you find when
assessing an app.
Furthermore, this chapter provided you with the necessary background information so that you may build your
own test environment, using your own device. Armed with this knowledge, you will be able to install
applications to begin exploring and start to spot basic vulnerabilities.
This chapter also introduced how iOS applications operate at a binary level, including the various compiled
based defenses that can be applied to applications, as well as how the Mach-O file format itself is structured.
You were also introduced to the App Store encryption mechanism and how to remove it from a production
binary, allowing you to obtain the internal class and method definitions from the app.
In summary this chapter has given you the foundation knowledge required to start practically looking at iOS
applications and is essential stepping-stone to attacking them, a skill you will now learn in Chapter 3.
CHAPTER 3
Attacking iOS Applications
In Chapter 2 you learned a great deal about iOS applications, how they function, how they are distributed, and
how they are built. This knowledge provides a foundation with which to explore this chapter, which focuses on
the following scenarios for attacking iOS applications:
Attacking from the network, including using tainted data originating from server-side applications
Attacking an application with physical access to the device
Attacking an application with interactive access to a device, including from the perspective of another
application on the device
When conducting an assessment of any mobile application, consider these three attack surfaces so you can
make informed decisions when identifying and exploiting different attack vectors.
Introduction to Transport Security
Almost all mobile applications have to perform network communication. The ability to transmit and receive data
enables applications to offer more than static apps offer. For example, they allow data to be continually updated
and enable users to interact with server-side components and with each other to provide a feature-rich
experience. However, due to the nature of mobile devices this communication may often occur over untrusted
or insecure networks such as hotel or café Wi-Fi, mobile hotspots, or cellular data connections. Consequently,
performing communications in a secure manner is imperative. This section walks through the types of
vulnerabilities that can affect transport security, how to identify them in iOS applications, and where necessary,
how to bypass protective measures to allow traffic interception to be carried out for the purposes of security
analysis.
Identifying Transport Insecurities
Any time an application makes a network request, you should protect the communication channel to guard
against eavesdropping or tampering, regardless of whether the data being sent and received is sensitive. A
common misconception is that applications need to encrypt only sensitive transactions such as authentication.
Any data transfer or actions that take place over a cleartext channel, such as an HTTP request to a web
application, are susceptible to modification, and this could have differing consequences depending on how the
request is implemented. For example, consider an application that uses a UIWebView to make a simple request to
a web application, transferring no sensitive data. An attacker in a position to perform a man-in-the-middle
attack against this communication is able to inject JavaScript to perform a cross-site scripting attack. The
consequences can vary depending on how the UIWebView is configured and range from something as simple as
modifying the user interface, to stealing content from the filesystem; these types of attacks are detailed later in
this chapter in the section, “Injecting into UIWebViews.”
To identify when applications are making cleartext requests, you can apply the traditional methodology used for
web or thick-client applications. First, you may want to consider passively monitoring the traffic from the device
using a packet-capturing tool such as Wireshark (https://www.wireshark.org/). Alternatively, you may route
your device’s communications through a proxy such as Burp Suite (http://www.portswigger.net/). This method
helps identify HTTP-based traffic only. To avoid the risk of unencrypted eavesdropping, many applications
employ the Secure Socket Layer (SSL) or Transport Layer Security (TLS) to tunnel their communications.
The SSL protocol and its successor, the TLS protocol, are widely accepted as the de facto standard for secure
network communications on the Internet and elsewhere and are extensively used as a secure transport medium
for HTTP. Although you may on occasion find applications that use a third-party or custom implementation for
SSL or TLS (such as OpenSSL or PolarSSL), the majority of applications on iOS use one of the APIs Apple
provides. Apple provides three ways to implement SSL and TLS:
The URL loading system—This API contains a number of high-level helper classes and methods such as
NSURLConnection and NSURLSession that can be used to make secure HTTP requests. The URL loading system
is perhaps the simplest method for making URL requests and for this reason is the most widely adopted.
The Carbon framework—This API is more granular than the URL loading system and gives developers a
greater level of control over network requests; it is typically implemented using the CFNetwork class.
The Secure Transport API—This low-level API is the foundation upon which the CFNetwork API and URL
loading system are built. The API provides the greatest control over the transport and is relatively complex to
implement. For this reason, developers rarely use it directly, preferring the abstracted approach offered by
CFNetwork and the URL loading system.
Regardless of the API that your application is using, an SSL or TLS connection can be weakened in number of
ways, and as a security professional or a developer, you should be aware of them. We will now walk through
some of the common implementation flaws that can occur when using these APIs to make SSL/TLS
connections.
Certificate Validation
SSL and TLS are built on the fundamental concept of certificate-based authentication; this ensures that you are
communicating with the server you intended to, and it also prevents eavesdropping and tampering attacks. Any
weakening in the validation of the certificate chain can have serious consequences for an application and may
leave user data exposed and vulnerable to eavesdropping and modification.
Assuming certificate pinning is not in use, perhaps the most dangerous thing an application can do when setting
up an SSL session is to accept a certificate that is not signed by a trusted certificate authority (CA). The
legitimacy of a self-signed certificate cannot be guaranteed because it has not undergone the verification process
that is performed by the certificate authority. An application accepting a self-signed certificate is therefore
unable to verify that the server presenting the certificate is indeed the server it purports to be, which leaves the
app susceptible to eavesdropping and tampering from any adversary who is suitably positioned in the network.
As a security professional conducting an audit of an iOS application, verifying whether the app permits self-
signed certificates is something that should be in your methodology. A number of ways exist for an application
to permit self-signed certificates depending on which API it is using; some common ways are detailed here.
When you’re using the NSURLConnection class, self-signed certificates can be permitted within the
didReceiveAuthenticationChallenge delegate method in a way similar to the following:
- (void)connection:(NSURLConnection *)connection \
didReceiveAuthenticationChallenge: \
(NSURLAuthenticationChallenge *)challenge
{
if ([challenge.protectionSpace.authenticationMethod
isEqualToString:NSURLAuthenticationMethodServerTrust])
{
[challenge.sender useCredential:[NSURLCredential
credentialForTrust:challenge.protectionSpace.serverTrust]
forAuthenticationChallenge:challenge];
[challenge.sender
continueWithoutCredentialForAuthenticationChallenge:challenge];
return;
}
}
The NSURLSession class is the preferred way to implement HTTPS using URL loading in applications using the
iOS 7 SDK or higher. In such cases, during a code review, you might find that self-signed certificates are
permitted, using code similar to the following:
- (void)URLSession:(NSURLSession *)session
didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition,
NSURLCredential *))completionHandler
{
if([challenge.protectionSpace.authenticationMethod
isEqualToString:NSURLAuthenticationMethodServerTrust])
{
NSURLCredential *credential = [NSURLCredential
credentialForTrust:challenge.protectionSpace.serverTrust];
completionHandler(NSURLSessionAuthChallengeUseCredential,
credential);
}
}
An application that permits self-signed certificates using the Carbon framework, however, might set up an SSL
settings dictionary with the kCFStreamSSLValidatesCertificateChain constant set to false in a similar way to
the following code:
NSDictionary *sslSettings = [NSDictionary dictionaryWithObjectsAndKeys:
(id)kCFBooleanFalse, (id)kCFStreamSSLValidatesCertificateChain, nil];
CFReadStreamSetProperty(readStream, kCFStreamPropertySSLSettings,
sslSettings);
When an application is using the Secure Transport API, you may find that the
kSSLSessionOptionBreakOnServerAuth option is set on the SSL session. This disables the API’s built-in
certificate validation but does not necessarily mean that the application does not implement its own custom
trust evaluation routines, and therefore you should further explore the code to check for implantation of chain
validation code. Here is an example of how you may set this option on an SSL session:
SSLSetSessionOption(ssl_ctx->st_ctxr,
kSSLSessionOptionBreakOnServerAuth, true)
In addition to permitting self-signed certificates, a developer might undermine the trust evaluation process in
other ways. These include but are not limited to the following possible example oversights:
Allowing expired certificates
Allowing valid certificates but with mismatching hostnames
Allowing expired root certificates (ones that belong to the CA)
Allowing any root certificate
Within the CFNetwork API a set of constants can be set within the kCFStreamPropertySSLSettings dictionary in a
way similar to that used in the previous example. Such settings are capable of weakening the SSL session in
different ways. You should, however, be aware that although present in later SDKs their use was deprecated in
iOS 4.0. These constants are
kCFStreamSSLAllowsAnyRoot
kCFStreamSSLAllowsExpiredRoots
kCFStreamSSLAllowsExpiredCertificates
If a developer needs to weaken certificate validation (for example, during development) using CFNetwork or the
Secure Transport API, Apple recommends implementing a custom certificate validation routine using the Trust
Services API. To undermine the certificate validation using a custom routine, you may find the application
passing one of the following constants to the SecTrustSetOptions method:
kSecTrustOptionAllowExpired—Allows expired certificates (except for the root certificate)
kSecTrustOptionAllowExpiredRoot—Allows expired root certificates
kSecTrustOptionImplicitAnchors—Treats properly self-signed certificates as anchors (an authoritative entity
from which trust is assumed not derived) implicitly
So far within this section issues that can affect the certificate validation process have had access to the
application’s source code. It is, however, likely that during some security reviews you will not have access to an
application’s source code and therefore you must perform static and dynamic analysis to identify issues relating
to SSL/TLS certificate validation.
Dynamic testing enables you to determine whether an application allows self-signed certificates with a high
degree of accuracy. In short, this involves configuring the device to use a proxy that presents a self-signed
certificate and monitoring to see whether the application functions as expected and whether the HTTPS traffic
passes through the proxy. This process has been dissected into the following steps:
1. Ensure that the device does not have your proxy certificate saved in its trust store by going to the profile
settings (Settings General Profile), which will not exist if a profile is not configured.
2. After ensuring your local firewall is disabled, start a proxy on your workstation and configure it to listen on
the external network interface, as shown in Figure 3.1; we use Burp Suite proxy as an example.
3. Configure your device to use a proxy (General WiFi. Select your wireless network and then choose HTTP
Proxy Manual) and set the IP address and port of your proxy to be those of your workstation, as per Figure
3.2.
4. Launch the application in question and attempt to use it as normal, monitoring your proxy to see whether it
intercepts HTTPS traffic.
Figure 3.1 Configuring Burp Suite to listen on all interfaces
Figure 3.2 Configuring your device to use a proxy
If your proxy intercepts HTTPS traffic without the proxy’s SSL certificate being installed on the device then it is
safe to say that the application accepts self-signed certificates and is vulnerable to eavesdropping from man-in-
the-middle attacks. This same process can also be used to intercept cleartext HTTP traffic as discussed earlier in
this chapter.
CVE-2014-1266: SSL/TLS “GOTO FAIL”
Devices running versions of iOS 7 prior to 7.0.6 and iOS 6 prior to 6.1.6 are vulnerable to a critical issue in
the certificate validation routine of the Secure Transport API. This issue leaves these devices and
applications on them susceptible to eavesdropping and tampering attacks by an attacker who is suitably
positioned in the network.
The Apple security bulletin provides additional details on this issue (http://
support.apple.com/kb/HT6147), and you can find an in-depth explanation of the issue in the Imperial
Violet blog (https://www.imperialviolet.org/ 2014/02/22/applebug.html).
To test for this issue you can browse to https://gotofail.com/ from either within MobileSafari, or from
within any UIWebView of a third-party application that allows arbitrary URLs to be loaded.
SSL Session Security
The Apple APIs permit a number of ways in which the security of an SSL session can be undermined other than
certificate validation. If your application is using the high-level URL loading APIs, you should not be concerned
because these APIs are not sufficiently granular to allow the modification of the properties of an SSL/TLS
session. If, however, the application in question is using the Carbon framework or the Secure Transport API
then you should be aware of several things, described next.
Protocol Versions
Both the CFNetwork and Secure Transport APIs allow a developer to modify the protocol version that the client
should use in the SSL or TLS session. As a security professional you should be aware that certain versions of the
SSL protocol have known weaknesses and their use is discouraged. Specifically, SSLv2 and SSLv3 are susceptible
to a number of different attacks that may allow a suitably positioned attacker to obtain the plaintext from a
ciphertext that was encrypted with these protocols.
When using the CFNetwork API, a developer can configure the protocol version through the
kCFStreamPropertySSLSettings dictionary. The specific property that sets the protocol version to use for the
secure channel is kCFStreamSSLLevel, which may be set to one of the following constants:
kCFStreamSocketSecurityLevelNone—This property specifies that no security level be set. You should avoid
using this option, because it allows negotiation of sessions using any SSL/TLS version, including the ones
that are known to be flawed.
kCFStreamSocketSecurityLevelSSLv2—This property specifies that the socket should use SSLv2; avoid using
this property.
kCFStreamSocketSecurityLevelSSLv3—This property specifies that the socket should use SSLv3; avoid using
this property.
kCFStreamSocketSecurityLevelTLSv1—This property forces the socket to use TLSv1 and is the preferred
configuration setting for the socket.
kCFStreamSocketSecurityLevelNegotiatedSSL—This property forces the application to use the highest level
of security that can be negotiated; you should avoid it due to the potential use of insecure protocol versions.
Similarly, when you’re using the Secure Transport API, it is possible to configure the protocol version to use
with the SSLSetProtocolVersion()or SSLSetProtocolVersionEnabled()functions, which accept one of the
following constants for the SSL protocol:
kSSLProtocolUnknown—This configuration specifies that the application should not perform a protocol
negotiation and the default specification should be used. Avoid the use of this constant.
kSSLProtocol3—This configuration specifies that SSLv3 is the preferred protocol although if it is not
available then the application should attempt to use SSLv2. Avoid the use of this constant.
kTLSProtocol1—This configuration specifies that TLSv1.0 should be used by the application but lower
versions may be negotiated. Avoid the use of this constant.
kTLSProtocol11—This configuration specifies that TLSv1.1 should be preferred by the application but lower