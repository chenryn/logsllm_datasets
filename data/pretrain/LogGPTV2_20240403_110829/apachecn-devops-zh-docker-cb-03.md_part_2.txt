# 它是如何工作的...
当我们构建 Docker 映像时，Docker 引擎将构建指令保留在映像元数据中。稍后，`docker image history`命令递归地将这些构建指令从指定映像收集到基础映像，并以良好的格式呈现。
# 还有更多...
如果您回忆起*从容器*配方中创建映像，在提交映像时，我们添加了一条消息，而这条消息在`docker image history`命令的输出中是看不到的。您可以使用`docker image inspect`命令，如以下代码所示:
```
    $ docker image inspect --format='{{.Comment}}' myapache2
    Ubuntu with apache2 package  
```
嗯！`docker image inspect`命令一次只能处理一个映像，但是如果你想看到所有映像图层的注释，那么你必须遍历每个映像或者通过一些脚本自动操作。顺便说一句，注释是可选的，因此您可能无法在所有映像上找到注释。
# 请参见
*   `docker image history`的`help`选项:
```
        $ docker image history --help  
```
*   Docker 网站上的文档:
[https://docs . docker . com/engine/reference/command line/image _ history/](https://docs.docker.com/engine/reference/commandline/image_history/)
# 移除映像
`docker image rm`命令允许您从 Docker 主机中移除映像。此命令可以删除一个或多个映像，并且您可以使用以下标识符之一指定映像:
*   映像的短标识。
*   映像的长标识。
*   映像摘要。
*   映像的名称及其标签。如果未指定标签，则默认采用`latest`标签。
如果映像恰好有多个标签与之关联，则在移除映像之前必须移除这些标签。或者，您可以使用`docker image rm`命令的`-f`或`--force`选项强制移除它们。在这种情况下，所有标签也将自动移除。
以下是`docker image rm`命令的语法:
```
docker image rm [OPTIONS] IMAGE [IMAGE...]
```
在这个食谱中，我们将为一个映像创建多个标签，并演示如何移除它们。
# 准备好
一个或多个 Docker 映像应该在 Docker 主机中本地可用。
# 怎么做...
请执行以下步骤:
1.  让我们选择一个现有的映像，并向其中添加多个标签，如下图所示:
![](img/7d6002bf-8936-4fe1-b8d3-6905ae490269.png)
在这里，我们选择了映像标识为`328edcd84f1b`的`centos`映像，并添加了另外三个标签:`tag1`、`tag2`和`tag3`。所有标签都有相同的`328edcd84f1b`映像标识。
2.  现在，让我们尝试删除 ID 为`328edcd84f1b`的映像，并观察结果:
![](img/393063f2-e5bd-438d-a7e4-36122b5c37a6.png)
显然，`docker image rm`未能移除映像，因为有四个标签引用相同的映像标识。
3.  从映像中移除标签，直到移除所有标签并删除映像，如下图所示:
![](img/52d443be-a906-4111-b3b6-f6b835eebfe4.png)
很明显，`docker image rm`命令移除了标签，最后在没有标签的时候移除了映像。
# 还有更多...
*   在前面的食谱中，我们一个接一个地移除标签，直到所有的标签都被移除，映像也被删除。也许你可以使用`docker image rm`的`-f`或`--force`选项一次删除所有标签和映像。
*   在使用`--force`选项之前，确保该映像没有从该映像衍生的任何容器。否则，你最终会有悬空的映像。
*   虽然不建议这样做，但是如果出于任何原因您想要删除所有容器和映像，那么您可以使用以下命令:
*   要停止所有容器，请使用以下命令:
```
        $ docker container stop $(docker container ls -q) 
```
*   要删除所有容器，请使用以下命令:
```
        $ docker container rm $(docker container ls -a -q)`  
```
*   要删除所有映像，请使用以下命令:
```
        $ docker image rm $(docker image ls -q)  
```
# 请参见
*   `docker image rm`的`help`选项:
```
        $ docker image rm --help
```
*   Docker 网站上的文档:
[https://docs . docker . com/engine/reference/command line/image _ RM/](https://docs.docker.com/engine/reference/commandline/image_rm/)
# 导出映像
假设您有一个客户，他有非常严格的政策，不允许他们使用公共领域的映像。在这种情况下，您可以通过 tarballs 共享一个或多个映像，这些映像随后可以导入到另一个系统中。
`docker image save`命令允许您将映像保存或导出为目标球。命令语法如下:
```
docker image save [-o|--output]=file.tar IMAGE [IMAGE...]
```
在本食谱中，我们将学习如何使用`docker image save`命令导出映像。
# 准备好
开始之前，请先在 Docker 主机上拉取或导入一个或多个 Docker 映像。
# 怎么做...
让我们选择在*中创建的`myapache2`映像，从容器*配方中创建一个映像，并将该映像导出为`.tar`文件，如以下代码所示:
```
    $ docker image save --output=myapache2.tar myapache2  
```
前面的命令生成`myapache2.tar`文件，可以按照下一个配方中的描述导入。
# 还有更多...
您也可以使用以下命令导出容器的文件系统:
```
    $ docker container export --output=myapache2_cont.tar c71ae52e382d  
```
# 请参见
*   `docker image save``docker container export`的`help`选项:
```
        $ docker image save -help
        $ docker container export --help
```
*   Docker 网站上的文档:
[https://docs . docker . com/engine/reference/command line/image _ save/](https://docs.docker.com/engine/reference/commandline/image_save/)
[https://docs . docker . com/engine/reference/command line/container _ export/](https://docs.docker.com/engine/reference/commandline/container_export/)
# 导入映像
要获取映像的本地副本，我们需要从可访问的注册表中获取它，或者从已经导出的映像中导入它，就像我们在前面的食谱中看到的那样。`docker image import`命令允许您从一个目标球导入一个或多个映像。`docker image import`命令语法如下:
```
docker image import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]
```
# 准备好
开始之前，您需要导出的 Docker 映像的本地副本。
# 怎么做...
请执行以下步骤:
1.  使用您最喜欢的任何文件传输工具，将我们在之前的配方中创建的`myapache2.tar`文件传输到新的 Docker 主机。
2.  现在，在新的 Docker 主机上，导入传输的`myapache2.tar`文件，如下代码所示:
```
 $ docker image import myapache2.tar apache2:imported
```
3.  在这里，我们已经将`myapache2.tar`文件导入为`apache2:imported`映像。
# 还有更多...
您也可以通过指定存储在远程位置的 TAR 文件的 URL 来导入这些文件。
# 请参见
*   `docker image import`的`help`选项:
```
      $ docker image import --help
```
*   Docker 网站上的文档:
    *   [https://docs . docker . com/engine/reference/command line/image _ import/](https://docs.docker.com/engine/reference/commandline/image_import/)
# 使用 Dockerfile 构建映像
Dockerfile 是一个基于文本的构建指令文件，它使我们能够定义 Docker 映像的内容并自动创建映像。Docker 构建引擎逐行读取`Dockerfile`中的指令，并按照规定构建映像。换句话说，`Dockerfile`帮助我们以自动化的方式重复制作映像。使用`Dockerfiles`创建的映像被认为是不可变的。
# 准备好
在开始之前，我们需要一个带有构建指令的 Dockerfile。要制作一个，我们需要经过以下步骤:
1.  创建一个空目录:
```
       $ mkdir sample_image
       $ cd sample_image
```
2.  创建一个名为`Dockerfile`的文件，内容如下:
```
       $ cat Dockerfile
       # Use ubuntu as the base image 
       FROM ubuntu 
       # Add author's name 
       LABEL maintainer="Jeeva S. Chelladhurai" 
       # Add the command to run at the start of container 
       CMD date  
```
# 怎么做...
请执行以下步骤:
1.  在我们创建`Dockerfile`的目录中运行以下命令来构建映像:
```
        $ docker image build . 
```
![](img/213853b9-5b4f-4316-9c18-277df62bf223.png)
In the preceding setup, we did not specify any repository and tag name while building the image. It is always recommended that you build the image with a repository name for easy reference in the future.
2.  现在，让我们继续使用`docker image build`命令的`-t`选项创建我们自己的存储库名称，如下所示:
```
        $ docker image build -t sample .   
```
![](img/25352214-258e-44f9-b664-bdac57da3bf6.png)
如果您比较步骤 1 和步骤 2 的输出，您可以注意到细微的差异。在步骤 1 的输出中，您可以看到`LABEL`和`CMD`指令后的文本`Running`，而对于步骤 2，它被打印为`Using cache`。这表明 Docker 正在重用步骤 1 中构建的映像的中间层。如果层没有变化，Docker 构建系统总是重用先前构建的映像中的层。如果您不想让构建系统重用中间层，那么就在构建中添加`--no-cache`选项。
# 它是如何工作的...
当我们使用`docker image build`命令构建 Docker 映像时，我们指定了一个目录。该命令将整个目录树捆绑为构建上下文，并将其传输到 Docker 引擎以创建 Docker 映像。从构建输出`Sending build context to Docker daemon 2.048 kB`消息中可以明显看出这一点。如果在当前工作目录中有一个名为`.dockerignore`的文件，并且有文件和目录列表(新行分隔)，那么这些文件和目录将在构建上下文中被忽略。更多关于`.dockerignore`的详细信息可以在[上找到。](https://docs.docker.com/reference/builder/#the-dockerignore-file.)
现在，Docker 构建系统将读取 Dockerfile 中的每个指令，启动一个中间容器，在容器内部执行指令或更新元数据，将中间容器作为映像层提交，并移除中间容器。这个过程一直持续到 Dockerfile 中的所有指令都被执行。
# 还有更多...
文件的格式如下:
```
    INSTRUCTION arguments
```
通常，指令以大写形式给出，但不区分大小写。它们是按顺序评估的。开头的`#`暗语被当作注释。
让我们看看不同类型的指令:
*   `FROM`:这必须是任何 Dockerfile 的第一条指令，并为后续指令设置基础映像。默认情况下，最新的标签假定如下:
```
       FROM  
```
或者，考虑以下标签:
```
       FROM  : 
```
一个 Dockerfile 中可以有多个`FROM`指令来创建多个映像。
如果只给出映像名称，如`fedora`和`Ubuntu`，则映像将从默认的 Docker 注册表(Docker Hub)中下载。如果您想使用私人或第三方映像，那么您必须包括它们，如下所示:
```
      [registry_hostname[:port]/][user_name/](repository_name:version_tag)  
```
以下是使用前面语法的示例:
```
        FROM registry-host:5000/cookbook/apache2