## Page 121
熊猫爱中国www.xiongmaoi.com
一下。这里将 Python 的运行内存限制在128 MB。
想找到1～10000000的第一个等于50000的数字。听上去很简单，不是吗？让我们来挑战
并在需要时恢复这个栈，例如，当调用 next（）时会再次执行。
xrange（）。（这个函数在 Python3中不存在，因为已经重复了。）
在Python3中，range（）会返回生成器。要在Python2中获取生成器，需要使用。
警告
（GEN_CREATED），当前正在被解析器执行（GEN_RUNNING），等待被 neXt（）调用唤醒
114
啊！证明不能以128MB内存创建一个拥有1000万个元素的列表。
$ ulimit -v 131072
当迭代某种类型的数据时，直观的方式是先构建整个列表，这非常浪费内存。假设我们
在 Python中，生成器的构建是通过当函数产生某对象时保持一个对栈的引用来实现的，
MemoryError
Traceback (most recent call last):
这个函数能够给出生成器的当前状态，允许我们判断它是否正在等待第一次被执行
File "",line 1,in 
>>>a=1ist(range(10000000))
'GEN_CLOSED'
>>> inspect.getgeneratorstate(gen)
StopIterationj
File "", line l, in 
Traceback (most recent call last):
>>>next(gen)
'GEN_SUSPENDED'
>>> inspect.getgeneratorstate(gen)
>>>next(gen)
'GEN_CREATED'
>>> inspect.getgeneratorstate(gen)
>>>gen
第8章
函数式编程
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 122
熊猫爱中国www.xiongmaoi.com
熊示例8.1通过yield返回值
的 send（）函数来向生成器传入一个值。
何时候想要操作大规模数据，生成器都可以帮助确保有效地对数据进行处理。
数列表。更妙的是，我们只关心第50 000个数字，生成器会只生成50000个数字。
Yield 还有一个不太常用的功能：
生成器运行通过即时生成的值以极少的内存消耗来应对大规模的数据集和循环处理。任
except StopIteration:
try:
result=[]
shortstringlist = shorten(mystringlist)
def shorten(string_list):
这次程序运行没有任何问题。range（）函数返回一个可迭代对象，它会动态地生成整
mystringlist = ['loremipsum','dolorsit','ametfoobar']
Found it
>>> for value in xrange(10000000):
python
换成生成器试试。
Ipass
whileTrue:
result.append(s)
s = next(shortstringlist)
for s in string_list:
length = len(string_list[0])
result.append(s)
#Truncate the next string depending
number_of_vowels = len(filter(lambda letter: letter in'aeiou', s))
length = yield s[:length]
if value == 50000:
=shortstringlist.send(number_of_vowels)
break
print("Found it")
本电子书仅限学习交流使用，请勿用于商业用途
：它可以像函数调用一样返回值。这允许通过调用它
8.1生成器
115
---
## Page 123
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
内容。
8.2
www.lua.org/）和其他语言中的协同程序（coroutine）。
（"am")。因此，这个然后生成器便停止并抛出 StopIteration。生成器将返回：
前四个字母。"dolo"包含两个元音字母，所以"ametfoobar"将被截断成其前两个字母
母的个数。"loremipsum"包含四个元音，所以生成器返回第二个字符串"dolorsit"的
样的字符串组成的列表，只不过是截断的。每个字符串的长度取决于前一个字符串中元音字
116
类似列表解析的语法可以构建单行生成器。
提示
[,we,',otop,'wnsdtuxot.]
，在这个例子中，写了一个名为 shorten 的函数，它接收一个字符串列表并返回一个同
没有列表解析的情况
列表解析（list comprehension，简称 listcomp）让你可以通过声明在单行内构造列表的
通过这种方式使用yield 和 send（）使得 Python 生成器的作用类似于Lua（http://
>>>x
[()UTxT]=X>>for i in(1,2,3）:
>>>x=[]
['HELLO','WORLD']
>>>list(gen)
([pom,'otteu.] uT x aog ()addn·x) =ub  at 0x7ffab3832fa0>
(o,u]uxxog()ddnx) >
列表解析
第8章函数式编程
x.append(i)
本电子书仅限学习交流使用，请勿用于商业用途
---
## Page 124
熊猫爱中国www.xiongmaoi.com
①技术上可以，但那不是期望的方式。
8.3
注意，这只在 Python 2.7及后续版本中有效。
注意
非列表解析构建的列表更加简洁易读。
程，值得一提的是通过列表解析构建的列表是不能依赖于程序的状态的?。这通常让它们比
也有一些语法用于以同样的方式构建字典和集合：
['I thinkbzz!', "I'm goodbzz!"]
>>>list（map(lambda x:x+"bzz!",["I think","I'm good"}))
>>> map(lambda x: x + "bzz!", ["I think", "I'm good"])
Python3中map的用法
·map（function，iterable)对 iterable 中的每一个元素应用 function，并
Python 包括很多针对函数式编程的工具。这些内置的函数涵盖了以下这些基本部分。
Set（'WORLD',HELLO'])
>>(x:x.upper(） forxin['hello',world'])
使用列表解析而不使用循环是快速定义列表的简洁方式。因为我们仍然在讨论函数式编
可以同时使用多条for 语句并使用if 语句过滤元素：
('world':WORLD'，'hello':'HELLO')
['Hello', 'World?', 'World!', 'Not']
x=[word.capitalize()
[1，2,3]
在 Python2中返回一个列表，或者在 Python3中返回可迭代的 map 对象。
函数式，函数的，函数化
for line in ("hello world?", "world!", "or not") 
if not word.startswith("or")]
for word in line.split()
本电子书仅限学习交流使用，请勿用于商业用途
8.3函数式，函数的，函数化
117
---
## Page 125
熊猫爱中国www.xiongmaoi.com
熊猫爱中
示例8.2Python3中filter的用法
在Python2中这样使用生成器会返回一个可选代的对象而不是列表，就像Python3中的
可以使用生成器和列表解析实现与 filter 或者 map 等价的函数。
118
提示
['I think']
>>> [x for x in ["I think", "I'm good"] if x.startswith("I ")]
 at 0x7f9a0d697dc0>
使用列表解析实现filter
['I thinkbzz!', "I'm goodbzz!"]
>>>[x +"bzz!" for x in ["I think","I'm good"]
 at 0x7f9a0d697dc0>
使用列表解析实现 map
['I think']
>>> list(filter(lambda x: x.startswith("I "), ["I think", "I'm good")]))
>>> filter(lambda x: x.startswith("I "), ["I think", "I'm good"])
>>>(x for x in ["I think","I'm good"] if x.startswith("I "))
i+=1
print("Item %d:%s"%(i, mylist[i]))
while i
>>>zip(keys,map(len,keys))
回一个列表，在Python3中返回一个可迭代的对象。
键和一组值组合成字典时很有用。像上面描述的其他函数一样，它在Python2中返
print("At least one item is greater than O")
print("All items are greater than 0")
if all(map(lambda x:x>0,mylist)):
def any(iterable):
return True
尔值。下面这两个函数是等价对：
排序版本。通过参数key可以提供一个返回要排序的值的函数。
>>>map(len,keys)
>>>keys=["foobar"，
if any(map(lambda x:x>0,mylist)):
mylist=[0,1，3,-1]
return False
for
for
def all(iterable):
print("Item %d:%s"%(i,item))
有用：
可以用这样的写法：
x in iterable:
if not x:
xin iterable:
return True
return False
本电子书仅限学习交流使用，请勿用于商业用途
key=None,
[ieqzzeq
8.3函数式，函数的，函数化
119
---
## Page 127
熊猫爱中国www.xiongmaoi.com
熊猫爱中国
first (https://pypi.python.org/pypi/first)。
在从列表中找出第一个满足条件的元素。这通常可以用函数这么实现：
用。如果你仍然在使用 Python2，也不用气馒，标准库中的itertools 模块提供了许多这些函
中那么高效。如果正计划使用这些函数编写代码，记住在Python 3 中才能最大的发挥它们的作
Python 内置的纯函数会返回列表而不是可选代的对象，这使得它们的内存利用没有Python 3.x
2
为了避免在每一个程序中都写同样的函数，可以包含这个小巧且使用的 Python 包
也可以写一个函数式风格的：
●注意，如果没有元素满足条件，可能会抛出IndexError，促使list（filter（））返回空列表。
或者更精确一点儿：
first(lambda x:x>0,[-1,0，1,2])
def first(predicate, items):
def first_positive_ number(numbers) :
然而，在上面这个列表中仍然缺少一个重要的工具。处理列表时，
next(itertools.ifilter(lambda x:x > 0,[-1, 0, 1, 2]))
next(filter(lambda x: x > 0, [-1, 0, 1, 2]))
list(filter(lambda x: x > 0, [-1, 0, 1, 2]))[0] 0
到这里你可能已经注意到 Python 2 和 Python 3 的返回类型的不同。在 Python 2 中大多数
#Efficient but for Python 2
#Efficient but for Python 3
#Less efficient
>>>dict(zip(keys,map(len,keys)))
>>>list(zip(keys，map(len,keys)))
第8章函数式编程
for item in items:
for n in numbers:
('foobar':6，
[('foobar'，6），（'barzz'，5)，（'ba!'，3)]
if predicate(item):
ifn>0:
return item
returnn
'barzz':5,'ba!':3}
本电子书仅限学习交流使用，请勿用于商业用途
一个常见的任务就是
---