# 从学习C2 Profile开始使用Cobalt Strike

## 前言
我一直都是Cobalt Strike (CS) 的忠实用户。随着CS 4.4版本的发布，该工具增加了反射DLL自定义功能，使得其定制化程度进一步提高。尽管防御方对CS的查杀手段不断升级，但我认为没有必要因此放弃CS转而选择其他C2框架或自行开发。在高对抗性的红队行动中，拥有多种C2方案是必要的策略之一。

如果你在操作过程中遇到流量被拦截的问题，那可能是因为你没有充分利用好C2 Profile。关于C2 Profile参数的具体含义，请参阅官方文档（https://www.cobaltstrike.com/help-malleable-c2）或者访问SourcePoint GitHub页面（https://github.com/Tylous/SourcePoint#global-options）。SourcePoint是一个新近推出的、适用于最新版CS的C2 Profile生成器，相较于之前的同类工具如C2concealer（https://github.com/FortyNorthSecurity/C2concealer），它更加先进且实用。

## SourcePoint 工具介绍
尽管SourcePoint目前尚不支持DNS相关的C2配置，但开发者已将其列入待办事项列表。此工具基于Go语言编写，并提供了预编译版本以简化部署过程。最基本的使用命令包括：

- `-Outfile` 指定输出文件名
- `-Host` 设置TeamServer地址
- `-Injector` 选择进程注入方法

下面展示了一个简单的C2 Profile示例及其调整建议：
```plaintext
[!]
开启分阶段加载可能导致你的payload被他人下载，详见《关于CobaltStrike的Stager被扫问题》文章。
```
### 关键设置调整
- `set sample_name "myc2profile";` 给配置命名以便于监听器识别。
- `set sleeptime "10000";` 将默认等待时间从60秒减少至10秒。
- `set jitter "50";` 设置回连时间在5到10秒之间随机波动。
- 在非活动状态下，推荐将重连间隔延长至15至30分钟。
- DNS相关配置需要手动启用并根据实际需求进行调整。
- `transform-x86` 和 `transform-x64` 参数用于去除大部分关键字，增强隐蔽性。
- 修改`startrwx`为`false`以避免使用可读写执行权限分配内存。
- 启用`amsi_disable`需谨慎处理，特别是在.NET 4.8及以上环境中。
- 自定义URL路径，例如`/api/v1/auth`，比默认值更不易引起怀疑。
- 使用合法证书代替自签名证书来提高通信安全性。

## HTTP(S) 数据包伪装
除了内置的六个模板外，SourcePoint还允许用户创建自定义HTTP(S)数据包模型来模仿特定网站的行为，比如qq.com或alipay.com等知名站点。完成修改后务必通过c2lint工具检查正确性，尽管后者不能检测所有潜在错误，如因Base64编码导致的URL解析异常。

## 代码签名与SSL证书
在高度对抗环境下，采用有效的代码签名和SSL证书变得尤为重要。获取这些资源的方法主要包括购买及“借用”泄露的凭证。对于SSL加密而言，合法来源的证书通常比自签名版本更能抵御严格的审查。

## 结论
深入了解并灵活运用Cobalt Strike的各项特性是成功实施渗透测试的关键。本文主要介绍了SourcePoint工具及其改进点，并鼓励读者继续探索更多关于CS的高级应用技巧。希望我们能够共同发掘出更多有效规避IOC检测的新方法。