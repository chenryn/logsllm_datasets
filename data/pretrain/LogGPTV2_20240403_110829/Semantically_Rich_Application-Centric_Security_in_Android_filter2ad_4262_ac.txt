### Inter-Process Communication (IPC) and Policy Enforcement

Inter-Process Communication (IPC) in Saint is governed by two types of policies: access policies and expose policies. Access policies define the security requirements for IPC initiated by an application, while expose policies define the security requirements for IPC received by an application. The target (for access) and source (for expose) are implicitly interpreted as the application specifying the policy, and an application cannot specify policy for other applications.

Saint's policy enforcement can be compared to a network-level stateful firewall. Like a stateful firewall, Saint identifies policies based on the source and destination, and checks conditions to determine if the IPC should be allowed. In Saint, the source and destination can be applications, components, Intent (event) types, or a combination thereof. Conditions are checks of the configuration or current state of the phone.

Unlike a stateful firewall, which maintains ordered policies of type {source address, destination address, flags}, where source and destination are IP address/port pairs and flags represent the required state of the communication (e.g., whether an ongoing TCP connection exists), Saint requires that all matching policies be satisfied. If no such policies exist, the IPC is implicitly allowed. Therefore, from a technical standpoint, Saint is a "conjunctional default allow policy" rather than a "default deny first match policy."

### Example Install-Time and Runtime Policies

**Install-time policies:**
- **(permission-label) (owner) [!]cond1 [[!]cond2] ... [[!]condn]**
  - **Example:** `(com.abc.perm.getloc) (com.abc.lbs) required-permission(ACCESS_FINE_LOCATION)`
    - This means that the permission `com.abc.perm.getloc` declared by `com.abc.lbs` will only be granted to applications with the `ACCESS_FINE_LOCATION` permission.

**Runtime policies:**
- **(expose|access) (source app, type, action) (destination app, component) [!]cond1 [[!]cond2] ... [[!]condn]**
  - **Example 1:** `(access) (com.ok.shopper, START ACT, ACTION_PAY) (any, any) sig:default-deny:except(3082019f3082 ...)`
    - `com.ok.shopper` cannot start an activity with the `ACTION_PAY` action to any component in any application unless they have the specified signature.
  - **Example 2:** `(access) (com.ok.shopper, any, any) (com.secure.passwordvault, any) min-version(1.2)`
    - `com.ok.shopper` can start any interaction with any action to any component in `com.secure.passwordvault` version 1.2 or higher.
  - **Example 3:** `(access) (com.ok.shopper, any, RECORD_EXPENSE) (any, any) forbid-permissions(INTERNET)`
    - `com.ok.shopper` cannot start any interaction with the `RECORD_EXPENSE` action to any component in any application with the `INTERNET` permission.

### Administrative Policy

An administrative policy dictates how policies can be changed. Saint's default administrative policy ensures that all application policies are fixed at installation and can only change through application updates (reinstallation). During an update, all relevant policies are removed and replaced with those specified in the update. This process is semantically equivalent to uninstalling and reinstalling the application.

There is an ongoing debate in the smartphone operating system community about whether users should be allowed to override system/application policies. One school of thought suggests that applications provide mandatory access control (MAC) policies, and therefore, nothing should be changed. This provides the most stringent and predictable security but may prevent legitimate operations. Another school of thought argues that the user is always right and every policy should be overrideable.

To address this, Saint introduces an infrastructure for overriding, but it is left as an OS build option. If the `SaintOverride` compile flag is set, users can override application policies. Additionally, each policy rule in the Saint XML schema includes an `Override` flag. If both the `SaintOverride` system flag and the `Override` flag are true, the `FrameworkPolicyManager` application allows the user to disable the rule through the interface. If disabled, the rule is ignored during policy decisions.

### Operational Policy

Operational policies in Saint are designed to detect when the framework renders an application inefficient, faulty, or inoperable. Past security measures that prevented application behavior in an opaque and ambiguous way, such as Microsoft Vista, have not been well-received. Therefore, it is essential to provide a useful service by detecting and managing such incidents.

Consider the logical formulation of Saint runtime policies. The conditions supported in the system are denoted by the set \( C = \{c_1, c_2, \ldots, c_n\} \). This set can be subdivided into two sets, \( V \) and \( T \), where \( C = V \cup T \). \( V \) represents invariant conditions (e.g., permission assignments, developer signatures, application version numbers), and \( T \) represents transient conditions (e.g., roaming state, battery power, access to a 3G interface).

At any given time, the system state \( S \) is a truth assignment for Boolean variables for each element of \( C \). The runtime IPC decision is a test of satisfaction of the conjunction of the access policy \( p_a \) and the expose policy \( p_e \) by \( S \), i.e., \( S \Rightarrow p_a \land p_e \).

This formulation allows us to reason about the satisfiability of policy at install time. There are three possible outcomes:
- \( V \Rightarrow p_a \land p_e \) (always satisfied)
- \( \exists S \in \hat{S} \mid S \Rightarrow p_a \land p_e \) (satisfiable)
- \( \nexists S \in \hat{S} \mid S \Rightarrow p_a \land p_e \) (unsatisfiable)

If a rule is unsatisfiable, it indicates an unusable interface, which may represent a serious functional limitation. For example, a text message application that cannot use the address book. The framework warns the user if any access rule is unsatisfiable. Additionally, we add a `FeatureRequirement` enumerated value to the XML structure of each policy rule, with values `NONE`, `AVAILABLE`, and `ALWAYS`. The `NONE` value has no effect, `AVAILABLE` prevents installation if the rule is unsatisfiable, and `ALWAYS` prevents installation if the rule is not always satisfied.

### Saint Architecture

Saint was implemented as a modification to the Android 1.5 OS. For each of the above install-time and runtime policies, we inserted one or more enforcement hooks into Android’s middleware layer. This section describes the relevant functionality in Android and the modifications made to enforce Saint policies.

#### Saint Installer

The Saint installer is a modified version of Android’s application installer. It receives the path to the downloaded Android package (.apk) and parses the package using `PackageParser` and `PackageManager`. During this step, we collect all necessary package configurations for install-time policy evaluation, such as the package’s signature, requested permissions, and application version. The package’s declared permissions are also acquired to verify the package’s application policy.

Saint’s policy is implemented in a separate XML file with the same name as the package. We chose XML to match the format of Android’s manifest file. After parsing the package, the Saint installer examines each requested permission against its corresponding permission-granting policy queried from the `AppPolicy` provider. If a conflict is found, the installer rejects the installation.

After successful installation, the installer parses the application’s policy file to an intermediate form. By considering the application’s declared permissions obtained during the package parsing step, the installer ensures that each policy entry is inserted into the `AppPolicy` provider only if its permission label is declared by the application.

#### Saint Mediator

Saint’s runtime enforcement covers four critical component interactions: starting new Activities, binding components to Services, receiving broadcast Intents, and accessing Content Providers. For each of these interactions, we cover the limitations of the existing Android security implementation and explain the necessary modifications and authorization hooks needed to enforce Saint policies.

**Starting Activities:**
- As users interact with activities, they often spawn new activities for GUI elements such as menus and dialogs. In Android, a request to start a new activity takes the form of an Intent sent to the Activity Manager Service (AMS).
- The AMS matches one or more activities that have registered for that Intent. If multiple activities are registered, the list of all such activities is displayed to the user, who chooses the correct one.
- When the destination activity is known, the AMS checks if the sending activity has the permission to start such activity. If so, the activity is started.
- To allow both the source and the receiver activity to influence the decision to spawn the receiver, we add hooks that restrict the set of candidate activities to choose from.

**Receiving Intent Broadcasts:**
- A Broadcast Receiver acts as a mailbox for the application, listening to Intent messages broadcast by another component for data exchange.
- To specify the type of messages it is listening to, the Broadcast Receiver is attached with Intent-filters that describe Intent values to be matched, including the action string.
- Intent broadcasts are handled by the AMS, which attempts to resolve the broadcast receiver components registered for the Intent.
- To enforce Saint’s access policies for Intent broadcasts, several authorization hooks were inserted into this process. If the broadcast receiver is selected by name, only a single check is performed for the named receiver. If the Intent contains an action string, it can be received by potentially multiple broadcast receivers, and the appropriate checks are performed.