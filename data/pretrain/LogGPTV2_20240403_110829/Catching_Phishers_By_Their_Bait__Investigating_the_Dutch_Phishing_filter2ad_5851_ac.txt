Creating unique fingerprints for each of these kits is challenging, as such fingerprints could easily match a slightly altered or copied version of another kit. To address this problem and enable usage analysis, we categorized the gathered phishing kits into 10 families by comparing the files within each kit. For each collected phishing kit, we calculated the percentage of overlapping files by performing pairwise comparisons and counting file path matches. Following a similar methodology to Bijmans et al. [3], we used a graph structure to identify clusters of similar phishing kits that could be grouped into families. Figure 7 illustrates a directed graph with phishing kits represented as nodes and edges created based on overlapping files. An edge between two phishing kits is established if 75% of the files in one kit overlap with those in another. To determine families of related kits, we applied a community extraction technique proposed by Blondel et al. [4], which is a heuristic method based on modularity optimization. This technique helps to compartmentalize the network into smaller sub-networks. Using this approach, we identified 10 families, each containing at least two phishing kits, totaling 53 kits. The remaining 17 phishing kits had no significant overlap with others and were thus not classified into any family. Table 2 provides an overview of the five largest phishing kit families.

Upon closer examination of Figure 7, we observe a large interconnected network comprising four different phishing kit families: uAdmin, tikkie, ics, and livepanel. This suggests that phishing kits often borrow or steal from each other. The uAdmin and tikkie families, while having many overlapping files, are still distinct. A more detailed analysis of their codebases reveals that, although they share the same framework (explained in the following paragraph), they offer slightly different functionalities. Similarly, the ics family is connected to the larger network through just one kit. The framework used in this connecting kit links the ics family to the network and is built on the same codebase as the rest of the cluster. However, the other three kits in the ics family do not use this framework but target the same entities. This indicates that the ics family has evolved to adopt this framework for their phishing activities, adapting to newer technologies. The smaller families, positioned to the right in Figure 7, employ different tactics. For example, the five phishing kits in the bonken family are all built on the ASP.NET Core platform and have no commonality with the other clusters. Given that the two largest families and 26 phishing kits in our dataset are built on the same framework, we will highlight its characteristics in the following section.

### uAdmin Framework
The uAdmin framework, also known as the Universal Admin control panel, is a PHP-based framework that uses a SQLite3 database for information storage. Since PHP is widely available on web servers and has built-in support for SQLite, this panel can be easily deployed. It supports multiple templates for most Dutch banks and various decoy pages (as described in Section 2.1). A unique feature is that the administrator panel can be hosted separately from the phishing page, allowing for the setup of multiple phishing domains with connections proxied to a control panel hosted elsewhere. The O-token plugin, part of the uAdmin framework, enables real-time interaction with the victim, including a detailed log of all entered information, buttons to prompt for more input, and the possibility to integrate Jabber notifications. This real-time interaction allows the attacker to act as a man-in-the-middle to bypass two-factor authentication defenses. The uAdmin framework also employs several anti-detection methods, such as an antibot.php script that blocks specific IP addresses, hostnames, and User-Agents. When a victim visits a page, a unique folder is created on the web server, and all necessary resources are copied into it. The victim is then redirected to this folder after a one-second timeout, as shown in Listing 1.

```php
$random = rand(0, 10000000);
$md5 = md5("$random");
$base = base64_encode($md5);
$dst = 'a1b2c3/' . md5("$base");
$src = "def";
duplicate($src, $dst);
setTimeout(function() {
    window.top.location.href = '';
}, 1000);
```

This code snippet is similar to the techniques mentioned by Han et al. [17] and Oest et al. [39] and aims to prevent detection by anti-phishing services like PhishTank [40] or Google Safe Browsing [20]. In February 2021, the Ukrainian attorney generalâ€™s office reported the arrest of the developer of the uAdmin phishing kit, which was used in over half of all phishing attacks in Australia in 2019 [25]. The Australian Federal Police stated that "Pretty much every Australian received a half dozen of these phishing attempts" [25]. Financial institutions in 11 countries, including the United States, Italy, and the Netherlands, suffered from phishing attacks using uAdmin.

### Phishing Domain Analysis
Using the method of analyzing the stream of issued TLS certificates in real time, as described in Section 3.2, our domain detector labeled 7,936 domains as potentially malicious. These domains reached the threshold value and were further analyzed by our crawler. The crawler matched fingerprints of known phishing kits on 1,504 of these domains, which we manually checked for false positives. We removed 61 domains where the crawler detected fingerprints but no actual phishing occurred. On most of these domains, the fingerprint was not specific enough, and in some cases, the domain responded successfully to all HTTP GET requests, matching all fingerprints. Additionally, we only included domains capable of completing a full end-to-end phishing lifecycle, excluding those discovered in the final week of data collection. This resulted in a final dataset of 1,363 verified phishing fully qualified domain names (FQDN) that were online for at least one hour. These were hosted on 1,112 different registered domain names (RDN), as some domains hosted multiple phishing pages on different subdomains. A summary of our dataset is provided in Table 3.

### Domain Name Characteristics
Setting up a new phishing domain requires a balance between convincing the victim and avoiding early detection by anti-phishing organizations. Common practices to hide malicious activity include using deceptive subdomains, Punycode, or typosquatting. As explained in Section 3.2, deceptive subdomains (type III) are less common, with only 66 such domains in our dataset. Type IV domains, which use deceptive top-level domains, were more prevalent, with 1,297 instances. Some type III domains increased their credibility by including the full FQDN of the target brand as subdomains, either by hijacking the domain or choosing it specifically to enhance stealth. While Punycode-obfuscated domains did increase the malicious score in our domain detector, we did not find any successful usage in our dataset. Typosquatting, however, was found 36 times, with the practice of replacing the character 'i' with 'l' in domains mimicking ING Bank and ICS Cards being particularly popular.

Most phishing FQDNs in our dataset obfuscated their malicious intent by not mentioning the target organization's name. More than half of the domains (770) did not include references to Dutch banks but were detected due to other suspicious keywords, such as payment, verification, or debit card.

### Targeted Banks
An analysis of the FQDNs referring to targeted banks provides insights into their popularity. Our domain detector searched for references to the ten largest Dutch retail banks and two daughter brands of ABN AMRO (Tikkie and ICS Cards) and identified 593 FQDNs. Rabobank was the prime target, with 194 domains, while Regiobank was the least targeted, with only ten domains.

### Domain Registrations
When selecting a top-level domain (TLD), attackers must consider the monitoring and cleaning policies of different registries. Some registries allow registrars to sell large quantities of domain names to attackers, contributing to online abuse. The Spamhaus Project monitors domains in SPAM messages and calculates the percentage of bad domains within each TLD zone. Comparing their data with our results, we found that .info and .xyz were the most commonly used TLDs in our dataset, followed by .com and .nl. Using WHOIS records, we identified the registrar for 933 of the 1,112 RDNs in our dataset. Namecheap was the most popular registrar, used for 72.6% of all phishing domains.