# 十三、Docker 工作流
在本章中，我们将研究 Docker 和 Docker 的各种工作流。我们将把所有的部分放在一起，这样您就可以在您的生产环境中开始使用 Docker，并且感觉很舒服。让我们来看一下本章将讲述的内容:
*   发展 Docker
*   监控 Docker
*   扩展到外部平台
*   生产是什么样子的？
# 技术要求
在本章中，我们将在桌面上使用 Docker。和前几章一样，我将使用我喜欢的操作系统，也就是 macOS。到目前为止，我们将运行的 Docker 命令将在安装了 Docker 的所有三个操作系统上运行。然而，一些支持命令可能只适用于 macOS 和基于 Linux 的操作系统，而且数量很少。
本章所用代码的完整副本可在 GitHub 存储库中找到，网址为[https://GitHub . com/PacktPublishing/Mastering-Docker-第三版/tree/master/chapter14](https://github.com/PacktPublishing/Mastering-Docker-Third-Edition/tree/master/chapter14) 。
查看以下视频，了解《行动守则》:
[http://bit.ly/2SaG0uP](http://bit.ly/2SaG0uP)
# 发展 Docker
我们将从讨论如何使用 Docker 来帮助开发人员开始我们对工作流的研究。回到第 1 章*Docker 概述*的开头，我们在*了解 Docker*一节讨论的第一件事就是开发人员和*在我的机器上工作*的问题。到目前为止，我们还没有完全解决这个问题，所以现在就开始吧。
在这一节中，我们将研究开发人员如何在本地机器上使用 Docker for macOS 或 Docker for Windows 以及 Docker Compose 开发他们的 WordPress 项目。
这样做的目的是让我们启动一个 WordPress 安装，这是您将通过以下步骤完成的:
1.  下载并安装 WordPress。
2.  允许从本地机器上的桌面编辑器访问 WordPress 文件，如 Atom、Visual Studio Code 或崇高文本。
3.  使用 WordPress 命令行工具(`WP-CLI`)配置和管理 WordPress。这允许您停止、启动甚至移除容器，而不会丢失您的工作。
在我们启动 WordPress 安装之前，让我们看一下 Docker Compose 文件和我们正在运行的服务:
```
version: "3"
services:
 web:
 image: nginx:alpine
 ports:
 - "8080:80"
 volumes:
 - "./wordpress/web:/var/www/html"
 - "./wordpress/nginx.conf:/etc/nginx/conf.d/default.conf"
 depends_on:
 - wordpress
 wordpress:
 image: wordpress:php7.2-fpm-alpine
 volumes:
 - "./wordpress/web:/var/www/html"
 depends_on:
 - mysql
 mysql:
 image: mysql:5
 environment:
 MYSQL_ROOT_PASSWORD: "wordpress"
 MYSQL_USER: "wordpress"
 MYSQL_PASSWORD: "wordpress"
 MYSQL_DATABASE: "wordpress"
 volumes:
 - "./wordpress/mysql:/var/lib/mysql"
 wp:
 image: wordpress:cli-2-php7.2
 volumes:
 - "./wordpress/web:/var/www/html"
 - "./wordpress/export:/export"
```
我们可以使用 PMSIpilot 中的`docker-compose-viz`工具来可视化 Docker 编写文件。为此，在与`docker-compose.yml`文件相同的文件夹中运行以下命令:
```
$ docker container run --rm -it --name dcv -v $(pwd):/input pmsipilot/docker-compose-viz render -m image docker-compose.yml
```
这将输出一个名为`docker-compose.png`的文件，您应该会得到类似如下的内容:
![](img/7a4d5fa8-68e1-4249-b542-17d059154743.png)
您可以使用`docker-compose-viz`给自己一个任何 Docker 编写文件的可视化表示。从我们的报告中可以看出，我们定义了四种服务。
第一个叫做`web`。该服务是四个服务中唯一暴露给主机网络的一个，它充当我们的 WordPress 安装的前端。它运行来自[https://store.docker.com/img/nginx/](https://store.docker.com/img/nginx/)的官方 nginx 映像，它扮演两个角色。在看这些之前，先看一下以下 nginx 配置:
```
server {
 server_name _;
 listen 80 default_server;
 root /var/www/html;
 index index.php index.html;
 access_log /dev/stdout;
 error_log /dev/stdout info;
 location / {
 try_files $uri $uri/ /index.php?$args;
 }
 location ~ .php$ {
 include fastcgi_params;
 fastcgi_pass wordpress:9000;
 fastcgi_index index.php;
 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
 fastcgi_buffers 16 16k;
 fastcgi_buffer_size 32k;
 }
}
```
您可以看到，除了 PHP 之外，我们正在使用 nginx 从`/var/www/html/`提供所有内容，我们正在使用 nginx 从我们的主机安装 nginx，并且对 PHP 文件的所有请求都被代理到我们在`9000`端口上的第二个服务，称为`wordpress`。nginx 配置本身正在从我们的主机安装到`/etc/nginx/conf.d/default.conf`。
这意味着我们的 nginx 容器充当静态内容的 web 服务器，这是第一个角色，也是动态内容的 WordPress 容器的代理，这是容器承担的第二个角色。
第二个服务是`wordpress`；这是来自[https://store.docker.com/img/wordpress](https://store.docker.com/img/wordpress)的官方 WordPress 图片，我用的是`php7.2-fpm-alpine`标签。这给了我们一个在 PHP 7.2 上运行的 WordPress 安装，使用建立在 Alpine Linux 基础之上的`PHP-FPM`。
**FastCGI Process Manager** (**PHP-FPM**) is a PHP FastCGI implementation with some great features. For us, it allows PHP to run as a service that we can bind to a port and pass requests to; this fits in with the Docker approach of running a single service on each container.
我们安装的 web 根与我们为 web 服务安装的相同，在主机上是`wordpress/web`，在服务上是`/var/www/html/`。首先，我们主机上的文件夹将是空的；然而，一旦 WordPress 服务启动，它将检测到没有任何核心 WordPress 安装，并将其中一个复制到该位置，从而有效地引导我们的 WordPress 安装，并将其复制到我们的主机上，为我们开始工作做好准备。
下一个服务是 MySQL，它使用的是官方的 MySQL 镜像([https://store.docker.com/img/mysql/](https://store.docker.com/img/mysql/))并且是我们正在使用的四个镜像中唯一没有使用 Alpine Linux 的镜像(来吧 MySQL，伸出你的手指，发布一个基于 Alpine Linux 的镜像！).取而代之的是使用`debian:stretch-slim`。我们传递了一些环境变量，以便在容器第一次运行时创建数据库、用户名和密码；如果您将此用作项目的基础，您应该更改密码。
像`web`和`wordpress`容器一样，我们正在从主机安装一个文件夹。在这种情况下，它是`wordpress/mysql`，我们将其安装到`/var/lib/mysql/`，这是 MySQL 存储其数据库和相关文件的默认文件夹。
您会注意到，当容器启动时，`wordpress/mysql`会填充一些文件。我不建议使用本地 IDE 编辑它们。
最后的服务简称`wp`。它不同于其他三个服务:这个服务在执行时会立即退出，因为容器中没有长时间运行的进程。它不是一个长时间运行的过程，而是在一个与我们的主`wordpress`容器完全匹配的环境中提供对 WordPress 命令行工具的访问。
您会注意到，我们正在挂载 web 根，就像我们在 web 和 WordPress 上所做的那样，还有一个名为`/export`的第二次挂载；一旦配置好 WordPress，我们将更详细地了解这一点。
要启动 WordPress，我们只需要运行以下命令来提取映像:
```
$ docker-compose pull
```
这将拉取映像并启动`web`、`wordpress`和`mysql`服务以及准备`wp`服务。在服务开始之前，我们的`wordpress`文件夹如下所示:
![](img/a43578b3-ae10-48cd-a955-c9ae51cf4a22.png)
如您所见，我们只有`nginx.conf`在那里，这是 Git 存储库的一部分。然后，我们可以使用以下命令来启动容器并检查它们的状态:
```
$ docker-compose up -d
$ docker-compose ps
```
![](img/32a9383e-8a5f-446e-a591-56c5824da777.png)
您应该看到在`wordpress`文件夹中已经创建了三个文件夹:`export`、`mysql`和`web`。此外，请记住我们期望`dockerwordpress_wp_1`有一个`exit`状态，所以没关系:
![](img/2c39b6fd-5299-4d71-b8ec-e949ab69dfba.png)
打开浏览器，进入`http://localhost:8080/`会显示标准的 WordPress 预安装欢迎页面，您可以在其中选择您希望安装使用的语言:
![](img/002b9525-f3e6-4362-82ee-c457ac83674b.png)
不要点击**继续**，因为它将带你进入基于图形用户界面的安装的下一个屏幕。相反，回到你的终端。
我们将使用 WP-CLI，而不是使用 GUI 来完成安装。这有两个步骤。第一步是创建`wp-config.php`文件。为此，请运行以下命令:
```
$ docker-compose run wp core config \
    --dbname=wordpress \
    --dbuser=wordpress \
    --dbpass=wordpress \
    --dbhost=mysql \
    --dbprefix=wp_
```
正如您将在下面的终端输出中看到的，在我运行命令之前，我只有`wp-config-sample.php`文件，它随核心 WordPress 一起提供。然后，运行命令后，我有了自己的`wp-config.php`文件:
![](img/93ff2e9d-9e0e-4c46-bdc6-438a7e65c5bf.png)
您会注意到，在命令中，我们正在传递我们在 Docker Compose 文件中定义的数据库详细信息，并告诉 WordPress 它可以连接到`mysql`地址的数据库服务。
现在我们已经配置了数据库连接的细节，我们需要配置我们的 WordPress 站点以及创建一个管理员用户和设置一个密码。为此，请运行以下命令:
```
$ docker-compose run wp core install \
 --title="Blog Title" \
 --url="http://localhost:8080" \
 --admin_user="admin" \
 --admin_password="password" \
 --admin_email="PI:EMAIL"
```
运行此命令将产生一个关于电子邮件服务的错误；不要担心这个消息，因为这只是一个本地开发环境。我们不太担心离开 WordPress 安装的电子邮件:
![](img/20b6bd8f-dcf6-4822-a6e0-7ca29deddc65.png)
我们已经在 WordPress 中使用 WP-CLI 配置了以下内容:
*   我们的网址是`http://localhost:8080`
*   我们的网站标题应该是`Blog Title`
*   我们的管理员用户名是`admin`，密码是`password`，用户有一封`PI:EMAIL`的邮件
回到你的浏览器，输入 [http://localhost:8080/](http://localhost:8080/) 你会看到一个普通的 WordPress 网站:
![](img/8375e8c2-0472-4227-bdfe-5db42c6b12ea.png)
在我们做任何进一步的工作之前，让我们稍微定制一下我们的安装，首先安装并启用 JetPack 插件:
```
$ docker-compose run wp plugin install jetpack --activate
```