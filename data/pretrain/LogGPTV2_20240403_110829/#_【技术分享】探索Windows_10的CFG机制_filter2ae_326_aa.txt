# 【技术分享】探索Windows 10的控制流保护（CFG）机制

## 译文声明
本文为翻译文章，原文来源：sjc1-te-ftp.trendmicro.com  
原文地址：[请在此处插入原文链接]  
译文仅供参考，具体内容和含义以原文为准。

## 翻译信息
- 翻译者：[myswsun](http://bobao.360.cn/member/contribute?uid=2775084127)
- 预估稿费：260 RMB
- 投稿方式：
  - 发送邮件至 [linwei#360.cn](mailto:PI:EMAIL)
  - 或登录 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

---

## 0x00 前言
随着操作系统开发者不断加强漏洞利用的缓解措施，微软在Windows 10 和 Windows 8.1 Update 3 中默认启用了一项新的安全机制——控制流保护（Control Flow Guard, CFG）。类似于地址空间布局随机化（ASLR）和数据执行保护（DEP），CFG 使攻击者更难进行漏洞利用。正如 ASLR 导致了堆喷射技术的出现，而 DEP 促使了返回导向编程（ROP）技术的发展，CFG 也将显著改变攻击者的利用手段。

为了研究这一新技术，我使用了 Windows 10 技术预览版（build 6.4.9841）以及 Visual Studio 2015 预览版编译的测试程序。请注意，最新的 Windows 10 技术预览版（build 10.0.9926）中的一些细节有所不同，我会指出这些差异。

要完全实现 CFG，编译器和操作系统都必须支持该功能。作为系统层面的利用缓解措施，CFG 的实现需要编译器、操作系统用户层库和内核模块的共同协作。MSDN 上的一篇文章详细描述了开发者如何支持 CFG。

微软的 CFG 实现主要集中在间接调用保护上。考虑以下测试程序中的代码：

### 图1 – 测试程序的代码
```c
// 示例代码
```

让我们先看看未启用 CFG 时的汇编代码情况：

### 图2 – 未启用 CFG 时的汇编代码
```assembly
// 汇编代码示例
```

在上述代码中，有一个间接调用。其目标地址不在编译时确定，而是在运行时动态决定。攻击者可以滥用这种间接调用：

### 图3 – 如何滥用间接调用
```assembly
// 攻击示例代码
```

微软的 CFG 实现主要针对缓解间接调用和调用不可靠目标的问题（这是漏洞利用中常见的第一步）。不可靠的目标通常不是一个有效的函数起始地址。因此，微软的 CFG 实现要求间接调用的目标必须是一个可靠的函数起始位置。那么，启用 CFG 后的汇编代码会是什么样子呢？

### 图4 – 启用 CFG 后的汇编代码
```assembly
// 汇编代码示例
```

在间接调用之前，目标地址会被传递给 `_guard_check_icall` 函数，在此函数中实现了 CFG 检查。在没有 CFG 支持的 Windows 版本中，这个函数什么也不做；而在 Windows 10 中，由于 CFG 的支持，它指向 `ntdll!LdrpValidateUserCallTarget` 函数。该函数接收目标地址作为参数，并执行以下操作：

1. **访问 CFGBitmap**：CFGBitmap 是一个位图，表示进程中所有函数的起始位置。每个 8 字节的状态对应于 CFGBitmap 中的一个位。如果 8 字节中有函数起始地址，则对应的位设置为 1；否则设置为 0。以下是 CFGBitmap 的一部分示例：

   ### 图5 – CFGBitmap
   ```plaintext
   // 位图示例
   ```

2. **将目标地址转换为 CFGBitmap 中的位**：例如，假设目标地址为 0x00b01030：

   ### 图6 – 目标地址
   ```plaintext
   // 目标地址示例
   ```

   - 高 3 个字节（蓝色圈中的 24 位）是 CFGBitmap 的偏移量（单位为 4 字节/32 位）。在这个例子中，高 3 个字节为 0xb010。因此，CFGBitmap 中的指针为 CFGBitmap 的基址加上 0xb010。
   - 第 4 到第 8 位（红色圈中的值 X）用于计算位偏移。如果目标地址对齐到 0x10（即 `(目标地址 & 0xf) == 0`），则 X 为位偏移值；否则，`X | 0x1` 为位偏移值。

     在这个例子中，目标地址为 0x00b01030，X 的值为 6。表达式 `0x00b01030 & 0xf` 的结果为 0，因此位偏移也是 6。

3. **检查位图中的位**：如果位等于 1，表示间接调用的目标是可靠的，因为它是一个函数的起始地址。如果位为 0，则表示目标不可靠，因为它不是一个函数的起始地址。如果间接调用的目标可靠，函数将继续执行；否则，将触发异常阻止利用代码运行。

   ### 图7 – CFGBitmap 中的值
   ```plaintext
   // 位图示例
   ```

现在我们已经了解了 CFG 的基本工作机制。接下来，我们将探讨以下几个问题：

1. CFGBitmap 的位信息从何而来？
2. 何时以及如何生成 CFGBitmap？
3. 系统如何处理由不可靠间接调用引发的异常？

---

## 0x01 深入 CFG 实现

在启用了 CFG 的 VS2015 编译的 PE 文件中，我们可以找到额外的 CFG 信息。以图 1 中的代码为例，我们可以在 PE 文件的 Load Config Table 部分找到以下内容：

### 图8 – PE 文件信息
```plaintext
// PE 文件信息示例
```

- **Guard CF address of check-function pointer**：`_guard_check_icall` 的地址（见图 4）。在 Windows 10 预览版中，当 PE 文件加载时，`_guard_check_icall` 将被修改并指向 `nt!LdrpValidateUserCallTarget`。
- **Guard CF function table**：指向包含程序代码的函数相对虚拟地址（RVA）列表的指针。每个函数的 RVA 将转换为 CFGBitmap 中的一个“1”位。换句话说，CFGBitmap 的位信息来源于 Guard CF function table。
- **Guard CF function count**：函数 RVA 的数量。
- **CF Instrumented**：表明程序中启用了 CFG。

在这里，编译器完成了 CFG 的大部分工作。剩下的部分依赖于操作系统的支持来使 CFG 机制生效。

### 1. 操作系统引导阶段
在 OS 引导阶段，第一个与 CFG 相关的函数是 `MiInitializeCfg`。这个过程发生在系统进程上下文中。调用堆栈如下：

### 图9 – 调用堆栈
```plaintext
// 调用堆栈示例
```

`MiInitializeCfg` 函数的主要工作是创建包含 CFGBitmap 的共享内存。调用时间可以在 NT 内核阶段 1 的内存管理器初始化期间找到（`MmInitSystem`）。在 NT 内核阶段 1 初始化期间，`MmInitSystem` 会被调用两次。第一次调用时会进入 `MiInitializeCfg`。那么 `MiInitializeCfg` 具体做了什么呢？

### 图10 – 函数的主要逻辑
```plaintext
// 主要逻辑示例
```

- **步骤 A**：注册表值来自 `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\kernel: MitigationOptions`。
- **步骤 B**：全局变量 `MmEnableCfg` 用来表示系统是否启用了 CFG 功能。
- **步骤 C**：`MiCfgBitMapSection` 的 DesiredAccess 允许所有权限；它的分配类型是“reserve”。在 build 10.0.9926 和 build 6.4.9841 中，共享内存的大小不同。对于 build 6.4.9841，大小按用户模式空间大小计算（`size = User Mode Space Size >> 6`）。对于 build 10.0.9926，大小为 0x3000000。CFGBitmap 可以表示整个用户模式空间。`MiCfgBitMapSection` 是 CFG 实现的核心组件，因为它包含了 CFGBitmap。

### 2. 获取压缩的 RVA 列表信息
PE 映像首次加载到系统时，NT 内核将调用 `MiRelocateImage` 进行重定位。`MiRelocateImage` 将调用 `MiParseImageCfgBits`。在 `MiParseImageCfgBits` 函数中，PE 映像的压缩 RVA 列表被计算并存储在映像节的 Control_Area 数据结构中。在系统引导期间，每个 PE 映像只会发生一次。

当 PE 再次加载到进程中时，NT 内核将调用 `MiRelocateImageAgain`。因为压缩的 RVA 列表已经被保存，`MiRelocateImageAgain` 不再需要调用 `MiParseImageCfgBits` 来节省一些进程时间。`MiParseImageCfgBits` 用于计算压缩的 RVA 列表，以便在较小的空间中存储 RVA 列表。微软的 CFG 实现考虑了时间和空间的消耗。在 `MiRelocateImage` 中，CFG 相关的部分如下：

`MiParseImageCfgBits` 用于计算启用了 CFG 编译的模块的压缩 RVA 列表。在深入这个函数之前，我们先了解一下其调用上下文。`MiParseImageCfgBits` 将在 `MiRelocateImage` 函数中被调用。

`MiParseImageCfgBits` 有五个参数：

- a) 映像节的 Control_Area 结构的指针
- b) 映像文件内容的指针
- c) 映像大小
- d) 包含 PE 可选头结构的指针
- e) 输出压缩的 CFG 函数 RVA 列表的指针

`MiParseImageCfgBits` 的主要工作如下：

- a) 从映像的 Load Config Table 获取函数 RVA 列表
- b) 使用压缩算法压缩列表，以便在较小的空间中存储列表
- c) 创建压缩的 RVA 列表作为输出

### 3. CFGBitmap 共享内存对象
在 CFGBitmap 共享内存对象创建后，它将被映射以用于两种用途：

- **a) 用于写入共享模块（如 DLL 文件等）的位。** 这种映射是临时的，在位写入完成后将被释放。通过这种映射写入的位信息是共享的，意味着它可以被操作系统内的所有进程读取。这种映射发生在 `MiUpdateCfgSystemWideBitmap` 函数中。调用堆栈如下：

  ### 图11 – 调用堆栈
  ```plaintext
  // 调用堆栈示例
  ```

通过以上步骤，CFG 机制在 Windows 10 中得到了完整的实现。