```    
postgres=# select pg_stop_backup();    
NOTICE:  all required WAL segments have been archived  
 pg_stop_backup   
----------------  
 0/1700C068  
(1 row)   
```    
stop backup后, 创建c表空间    
```    
su - postgres    
postgres@dcdaa877dadd:~/14/pgdata$ mkdir /tmp/tbsc    
postgres@dcdaa877dadd:~/14/pgdata$ psql    
psql (14.10 (Debian 14.10-1.pgdg110+1))    
Type "help" for help.    
postgres=# create tablespace tbsc location '/tmp/tbsc';    
CREATE TABLESPACE    
```    
创建c数据库. 但是不设置默认数据库默认表空间为tbsc. 所以元数据依旧存储在pg_default内(`$PGDATA/base`).     
```    
postgres=# create database c;    
CREATE DATABASE    
```    
pgbench a,b,c 对a,b,c库进行压力测试    
```    
pgbench -M prepared -n -r -c 4 -j 4 -T 30 a    
pgbench -M prepared -n -r -c 4 -j 4 -T 30 b    
pgbench -i -s 10 c --tablespace=tbsc   
pgbench -M prepared -n -r -c 4 -j 4 -T 30 c    
```    
a,b,c 库创建大量表, 产生大量元数据.   
```  
psql a  
do language plpgsql $$   
declare  
  v text := 'tbsa';  
begin  
execute 'create table tbl(id int primary key, info text, ts timestamp) tablespace '||v;  
for i in 1..3000 loop  
  execute format('create table tbl%s (like tbl including all) tablespace %s', i, v);  
end loop;  
end;  
$$;  
psql b  
do language plpgsql $$   
declare  
  v text := 'tbsb';  
begin  
execute 'create table tbl(id int primary key, info text, ts timestamp) tablespace '||v;  
for i in 1..3000 loop  
  execute format('create table tbl%s (like tbl including all) tablespace %s', i, v);  
end loop;  
end;  
$$;  
psql c  
do language plpgsql $$   
declare  
  v text := 'tbsc';  
begin  
execute 'create table tbl(id int primary key, info text, ts timestamp) tablespace '||v;  
for i in 1..3000 loop  
  execute format('create table tbl%s (like tbl including all) tablespace %s', i, v);  
end loop;  
end;  
$$;  
```  
在b数据库中创建表, 新建数据.      
```    
psql b   
create table test (id int, info text, ts timestamp) tablespace tbsb;    
insert into test select generate_series(1,10000), md5(random()::text), clock_timestamp();    
insert into test values (0,'test',now());    
```    
切换wal日志文件. (确保归档)    
```    
b=# checkpoint;    
CHECKPOINT  
b=# select pg_switch_wal();    
 pg_switch_wal   
---------------  
 0/3411DE58  
(1 row)  
b=# checkpoint;    
CHECKPOINT  
b=# select pg_switch_wal();    
 pg_switch_wal   
---------------  
 0/350000F0  
(1 row)  
```    
停止原库, 观察当前控制文件`Latest checkpoint location`的内容.  
```    
pg_ctl stop -m fast    
pg_controldata  返回的Latest checkpoint location肯定是大于前面backup_label记录的值.   
```    
删除tbsb表空间文件     
```
rm -rf /tmp/tbsb/*    
```
### 完全恢复tbsb   
还原backup_label, b表空间文件     
```    
cp /tmp/backup/backup_label $PGDATA/    
cp -r /tmp/backup/tbsb/* /tmp/tbsb/    
```    
配置recovery.conf (12版本开始, 这个配置已经在postgresql.conf中了)       
```    
vi $PGDATA/postgresql.conf    
# 注释归档    
#archive_mode = on     
#archive_command = 'test ! -f /tmp/arch/%f && cp %p /tmp/arch/%f'    
# 恢复配置    
restore_command = 'cp /tmp/arch/%f %p'    
recovery_target_timeline = 'latest'    
# 配置 zero_damaged_pages 跳过错误的块      
zero_damaged_pages = on    
```    
配置恢复模式    
```    
touch $PGDATA/recovery.signal    
```    
[《PostgreSQL 12 preview - recovery.conf 合并入 postgresql.conf后的HOT STANDBY配置(standby.signal , recovery.signal)》](../201905/20190503_05.md)     
启动实例, 开始恢复     
```    
pg_ctl start    
```   
注意看恢复开始位置: `redo starts at 0/170000D8` 来自backup_label `START WAL LOCATION: 0/170000D8`  
```  
cd $PGDATA  
less log/....  
2024-01-10 08:05:06.412 UTC,,,1293,,659e4fb2.50d,2,,2024-01-10 08:05:06 UTC,,0,LOG,00000,"starting archive recovery",,,,,,,,,"","startup",,0  
2024-01-10 08:05:06.454 UTC,,,1293,,659e4fb2.50d,3,,2024-01-10 08:05:06 UTC,,0,LOG,00000,"restored log file ""000000010000000000000017"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:06.482 UTC,,,1293,,659e4fb2.50d,4,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"redo starts at 0/170000D8",,,,,,,,,"","startup",,0  
2024-01-10 08:05:06.494 UTC,,,1293,,659e4fb2.50d,5,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"consistent recovery state reached at 0/1700C068",,,,,,,,,"","startup",,0  
2024-01-10 08:05:06.495 UTC,,,1287,,659e4fb2.507,6,,2024-01-10 08:05:06 UTC,,0,LOG,00000,"database system is ready to accept read-only connections",,,,,,,,,"","postmaster",,0  
2024-01-10 08:05:06.534 UTC,,,1293,,659e4fb2.50d,6,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000018"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:06.582 UTC,,,1293,,659e4fb2.50d,7,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000019"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:06.630 UTC,,,1293,,659e4fb2.50d,8,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""00000001000000000000001A"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:07.494 UTC,,,1293,,659e4fb2.50d,9,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""00000001000000000000001B"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:08.243 UTC,,,1293,,659e4fb2.50d,10,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""00000001000000000000001C"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:08.769 UTC,,,1309,,659e4fb2.51d,1,,2024-01-10 08:05:06 UTC,,0,WARNING,01000,"xlog min recovery request 0/1DE76728 is past current point 0/1CAA7628",,,,,"writing block 0 of relation pg_tblspc/16384/PG_14_202107181/16386/16401_vm",,,,"","background writer",,0  
2024-01-10 08:05:08.770 UTC,,,1309,,659e4fb2.51d,2,,2024-01-10 08:05:06 UTC,,0,WARNING,01000,"xlog min recovery request 0/1DE82DE0 is past current point 0/1CAAFEF0",,,,,"writing block 0 of relation pg_tblspc/16384/PG_14_202107181/16386/16402_vm",,,,"","background writer",,0  
2024-01-10 08:05:08.873 UTC,,,1309,,659e4fb2.51d,3,,2024-01-10 08:05:06 UTC,,0,WARNING,01000,"xlog min recovery request 0/1DE84920 is past current point 0/1CCC0078",,,,,"writing block 0 of relation pg_tblspc/16384/PG_14_202107181/16386/16403_vm",,,,"","background writer",,0  
2024-01-10 08:05:09.073 UTC,,,1293,,659e4fb2.50d,11,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""00000001000000000000001D"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:09.913 UTC,,,1293,,659e4fb2.50d,12,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""00000001000000000000001E"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:10.545 UTC,,,1293,,659e4fb2.50d,13,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""00000001000000000000001F"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:11.297 UTC,,,1293,,659e4fb2.50d,14,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000020"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:12.146 UTC,,,1293,,659e4fb2.50d,15,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000021"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:12.917 UTC,,,1293,,659e4fb2.50d,16,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000022"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:13.215 UTC,,,1293,,659e4fb2.50d,17,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000023"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:13.512 UTC,,,1293,,659e4fb2.50d,18,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000024"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:13.806 UTC,,,1293,,659e4fb2.50d,19,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000025"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:14.104 UTC,,,1293,,659e4fb2.50d,20,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000026"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:14.396 UTC,,,1293,,659e4fb2.50d,21,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000027"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:14.688 UTC,,,1293,,659e4fb2.50d,22,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000028"" from archive",,,,,,,,,"","startup",,0  
2024-01-10 08:05:15.232 UTC,,,1293,,659e4fb2.50d,23,,2024-01-10 08:05:06 UTC,1/0,0,LOG,00000,"restored log file ""000000010000000000000029"" from archive",,,,,,,,,"","startup",,0  
```   
查看是否已恢复, 查询存储在tbsb的test表的最后一条记录.     
```    
psql b  
psql (14.10 (Debian 14.10-1.pgdg110+1))  
Type "help" for help.  
b=# \d+ test  
                                                     Table "public.test"  
 Column |            Type             | Collation | Nullable | Default | Storage  | Compression | Stats target | Description   
--------+-----------------------------+-----------+----------+---------+----------+-------------+--------------+-------------  
 id     | integer                     |           |          |         | plain    |             |              |   
 info   | text                        |           |          |         | extended |             |              |   
 ts     | timestamp without time zone |           |          |         | plain    |             |              |   
Tablespace: "tbsb"  
Access method: heap  
b=# select * from test where id=0;  
 id | info |             ts               
----+------+----------------------------  
  0 | test | 2024-01-10 08:00:59.837795  
(1 row)  
```    
留个作业, 在创建大量的表之前, 创建一个还原点, 将表空间恢复到还原点, 也就是不完全恢复, 查看a,b,c库的元数据看看会不会遇到什么问题?    
时间点还原的recovery配置请参考: [《PostgreSQL如何支持可选择性表空间(Selectivity Tablespace)备份和时间点(PITR)恢复?》](../202401/20240107_01.md)    
## 参考  
src/backend/access/transam/xlog.c    
```  
/*  
 * read_backup_label: check to see if a backup_label file is present  
 *  
 * If we see a backup_label during recovery, we assume that we are recovering  
 * from a backup dump file, and we therefore roll forward from the checkpoint  
 * identified by the label file, NOT what pg_control says.  This avoids the  
 * problem that pg_control might have been archived one or more checkpoints  
 * later than the start of the dump, and so if we rely on it as the start  
 * point, we will fail to restore a consistent database state.  
 *  
 * Returns true if a backup_label was found (and fills the checkpoint  
 * location and its REDO location into *checkPointLoc and RedoStartLSN,  
 * respectively); returns false if not. If this backup_label came from a  
 * streamed backup, *backupEndRequired is set to true. If this backup_label  
 * was created during recovery, *backupFromStandby is set to true.  
 */  
static bool  
read_backup_label(XLogRecPtr *checkPointLoc, bool *backupEndRequired,  
                                  bool *backupFromStandby)  
{  
... ...   
```  
- [《PostgreSQL如何支持可选择性表空间(Selectivity Tablespace)备份和时间点(PITR)恢复?》](../202401/20240107_01.md)    
- [《PostgreSQL Selectivity Tablespace PITR - 部分表空间恢复》](../201204/20120426_01.md)      
- [《PostgreSQL recovery target introduce》](../201301/20130130_01.md)  详细介绍了PITR恢复参数的概念.   
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 开源数据库](https://openpolardb.com/home "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's Github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")