**前言**  
PS：本文均只代表个人浅薄观点，若有错误或理解不足请指出。  
Tomcat为了自身的可扩展性，各组件之间在很大程度上都进行了解耦。  
而memshell scanner等类似内存马查杀工具，大多都是针对Container内的注册服务进行扫描。  
那我们是否可以在Connector内进行内存马的注入？  
**正文**  
**前置知识**  
先来看看Connector的具体实现。  
在Tomcat笔记（其一）中我们曾提到，Connector主要由ProtocolHandler与Adapter构成。  
而ProtocolHandler又主要由Endpoint与Processor组成：  
根据实现的不同，ProtocolHandler又有如下分类：  
本文中，我们主要关注一下Http11NioProtocol这个实现。
**Endpoint**  
Endpoint是ProtocolHandler的组成之一，而NioEndpoint是Http11NioProtocl中的实现。  
Endpoint五大组件：
  * LimitLatch：连接控制器，负责控制最大的连接数
  * Acceptor：负责接收新的连接，然后返回一个Channel对象给Poller
  * Poller：可以将其看成是NIO中Selector，负责监控Channel的状态
  * SocketProcessor：可以看成是一个被封装的任务类
  * Executor：Tomcat自己扩展的线程池，用来执行任务类
**LimitLatch**  
LimitLatch主要是用来控制Tomcat所能接收的最大数量连接，如果超过了此连接，那么Tomcat就会将此连接线程阻塞等待，等里面有其他连接释放了再消费此连接。
    public class LimitLatch {
        private static final Log log = LogFactory.getLog(LimitLatch.class);
        private class Sync extends AbstractQueuedSynchronizer {
            private static final long serialVersionUID = 1L;
            public Sync() {
            }
            @Override
            protected int tryAcquireShared(int ignored) {
                long newCount = count.incrementAndGet();
                if (!released && newCount > limit) {
                    // Limit exceeded
                    count.decrementAndGet();
                    return -1;
                } else {
                    return 1;
                }
            }
            @Override
            protected boolean tryReleaseShared(int arg) {
                count.decrementAndGet();
                return true;
            }
        }
        private final Sync sync;
        //当前连接数
        private final AtomicLong count;
        //最大连接数
        private volatile long limit;
        private volatile boolean released = false;
    }
    //在AbstractEndpoint类中实现的方法
    ......
    protected LimitLatch initializeConnectionLatch() {
        if (this.maxConnections == -1) {
            return null;
        } else {
            if (this.connectionLimitLatch == null) {
                this.connectionLimitLatch = new LimitLatch((long)this.getMaxConnections());
            }
            return this.connectionLimitLatch;
        }
    }
    protected void releaseConnectionLatch() {
        LimitLatch latch = this.connectionLimitLatch;
        if (latch != null) {
            latch.releaseAll();
        }
        this.connectionLimitLatch = null;
    }
    protected void countUpOrAwaitConnection() throws InterruptedException {
        if (this.maxConnections != -1) {
            LimitLatch latch = this.connectionLimitLatch;
            if (latch != null) {
                latch.countUpOrAwait();
            }
        }
    }
    protected long countDownConnection() {
        if (this.maxConnections == -1) {
            return -1L;
        } else {
            LimitLatch latch = this.connectionLimitLatch;
            if (latch != null) {
                long result = latch.countDown();
                if (result  implements Runnable {    
        private static final int INITIAL_ERROR_DELAY = 50;
        private static final int MAX_ERROR_DELAY = 1600;
        @Override
        public void run() {
            int errorDelay = 0;
            // 循环，直到接收到一个关闭命令
            while (endpoint.isRunning()) {  
                // 循环，如果Endpoint被暂停则循环sleep
                while (endpoint.isPaused() && endpoint.isRunning()) { 
                    state = AcceptorState.PAUSED;
                    try {
                        Thread.sleep(50); // 50毫秒拉取一次endpoint运行状态
                    } catch (InterruptedException e) {
                    }
                }
                if (!endpoint.isRunning()) {
                    break;
                }
                state = AcceptorState.RUNNING;
                try {
                    endpoint.countUpOrAwaitConnection(); // 判断最大连接数
                    if (endpoint.isPaused()) { 
                        continue;
                    }
                    U socket = null;
                    try {
                        socket = endpoint.serverSocketAccept(); // 创建一个socketChannel接收连接
                    } catch (Exception ioe) {
                        endpoint.countDownConnection();
                        if (endpoint.isRunning()) {
                            errorDelay = handleExceptionWithDelay(errorDelay); // 延迟异常处理
                            throw ioe; // 重新扔出异常给c1处捕获
                        } else {
                            break;
                        }
                    }
                    errorDelay = 0; // 成功接收之后重置延时处理异常时间
                    if (endpoint.isRunning() && !endpoint.isPaused()) {
                        // setSocketOptions()将Socket传给相应processor处理
                        if (!endpoint.setSocketOptions(socket)) {
                            endpoint.closeSocket(socket);
                        }
                    } else {
                        endpoint.destroySocket(socket); // 否则destroy掉该socketChannel
                    }
                } catch (Throwable t) { // c1
                    ExceptionUtils.handleThrowable(t); // 处理延迟异常
                    String msg = sm.getString("endpoint.accept.fail");
                    if (t instanceof Error) {
                        ... // 日志记录
                    }
                }
            }
            state = AcceptorState.ENDED; // 标记状态为ENDED
        }
            protected int handleExceptionWithDelay(int currentErrorDelay) {
            if (currentErrorDelay > 0) {
                try {
                    Thread.sleep(currentErrorDelay);
                } catch (InterruptedException e) {
                    // Ignore
                }
            }
            // 异常处理
            if (currentErrorDelay == 0) {
                return INITIAL_ERROR_DELAY; // c2
            } else if (currentErrorDelay (count);
        for (int i = 0; i  acceptor = new Acceptor<>(this);
            String threadName = getName() + "-Acceptor-" + i;
            acceptor.setThreadName(threadName);
            acceptors.add(acceptor);
            Thread t = new Thread(acceptor, threadName);
            t.setPriority(getAcceptorThreadPriority());
            t.setDaemon(getDaemon());
            t.start();
        }
    }
    ......
    //NioEndpoint中具体实现的对SocketChannel的处理
    protected class Acceptor extends org.apache.tomcat.util.net.AbstractEndpoint.Acceptor {
        protected Acceptor() {
        }
        public void run() {
            byte errorDelay = 0;
            while(NioEndpoint.this.running) {
                while(NioEndpoint.this.paused && NioEndpoint.this.running) {
                    this.state = AcceptorState.PAUSED;
                    try {
                        Thread.sleep(50L);
                    } catch (InterruptedException var4) {
                    }
                }
                if (!NioEndpoint.this.running) {
                    break;
                }
                this.state = AcceptorState.RUNNING;
                try {
                    NioEndpoint.this.countUpOrAwaitConnection();
                    SocketChannel socket = null;
                    try {
                        socket = NioEndpoint.this.serverSock.accept();
                    } catch (IOException var5) {
                        NioEndpoint.this.countDownConnection();
                        if (!NioEndpoint.this.running) {
                            break;
                        }
                        NioEndpoint.this.handleExceptionWithDelay(errorDelay);
                        throw var5;
                    }
                    errorDelay = 0;
                    if (NioEndpoint.this.running && !NioEndpoint.this.paused) {
                        if (!NioEndpoint.this.setSocketOptions(socket)) {
                            this.closeSocket(socket);
                        }
                    } else {
                        this.closeSocket(socket);
                    }
                } catch (Throwable var6) {
                    ExceptionUtils.handleThrowable(var6);
                    NioEndpoint.log.error(AbstractEndpoint.sm.getString("endpoint.accept.fail"), var6);
                }
            }
            this.state = AcceptorState.ENDED;
        }
        private void closeSocket(SocketChannel socket) {
            NioEndpoint.this.countDownConnection();
            try {
                socket.socket().close();
            } catch (IOException var4) {
                if (NioEndpoint.log.isDebugEnabled()) {
                    NioEndpoint.log.debug(AbstractEndpoint.sm.getString("endpoint.err.close"), var4);
                }
            }
            try {
                socket.close();
            } catch (IOException var3) {
                if (NioEndpoint.log.isDebugEnabled()) {
                    NioEndpoint.log.debug(AbstractEndpoint.sm.getString("endpoint.err.close"), var3);
                }
            }
        }
    }
**Poller**
    public class Poller implements Runnable {
         ......
           @Override
            public void run() {
                // Loop until destroy() is called
                while (true) {
                    boolean hasEvents = false;
                    try {
                        if (!close) {
                            //查看是否有连接进来,如果有就将Channel注册进Selector中
                            hasEvents = events();
                        }
                        if (close) {
                            events();
                            timeout(0, false);
                            try {
                                selector.close();
                            } catch (IOException ioe) {
                                log.error(sm.getString("endpoint.nio.selectorCloseFail"), ioe);
                            }
                            break;
                        }
                    } catch (Throwable x) {
                        ExceptionUtils.handleThrowable(x);
                        log.error(sm.getString("endpoint.nio.selectorLoopError"), x);
                        continue;
                    }
                    if (keyCount == 0) {
                        hasEvents = (hasEvents | events());
                    }
                    Iterator iterator =
                        keyCount > 0 ? selector.selectedKeys().iterator() : null;
                    // Walk through the collection of ready keys and dispatch
                    // any active event.
                    while (iterator != null && iterator.hasNext()) {
                        SelectionKey sk = iterator.next();
                        NioSocketWrapper socketWrapper = (NioSocketWrapper) sk.attachment();
                        // Attachment may be null if another thread has called
                        // cancelledKey()
                        if (socketWrapper == null) {
                            iterator.remove();
                        } else {
                            iterator.remove();
                            processKey(sk, socketWrapper);
                        }
                    }
                    // Process timeouts
                    timeout(keyCount,hasEvents);
                }
                getStopLatch().countDown();
            }
        ......
    }
调用events()方法，查看队列中是否有Pollerevent事件，如果有就将其取出，然后把里面的Channel取出来注册到该Selector中，然后不断轮询所有注册过的Channel查看是否有事件发生。  
当有事件发生时，则调用SocketProcessor交给Executor执行。
**SocketProcessor**
    protected class SocketProcessor extends SocketProcessorBase {
        public SocketProcessor(SocketWrapperBase socketWrapper, SocketEvent event) {
            super(socketWrapper, event);
        }
        protected void doRun() {
            NioChannel socket = (NioChannel)this.socketWrapper.getSocket();
            SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());
            try {
                int handshake = -1;
                try {
                    if (key != null) {
                        if (socket.isHandshakeComplete()) {
                            handshake = 0;
                        } else if (this.event != SocketEvent.STOP && this.event != SocketEvent.DISCONNECT && this.event != SocketEvent.ERROR) {
                            handshake = socket.handshake(key.isReadable(), key.isWritable());
                            this.event = SocketEvent.OPEN_READ;
                        } else {
                            handshake = -1;
                        }
                    }
                } catch (IOException var12) {
                    handshake = -1;
                    if (NioEndpoint.log.isDebugEnabled()) {
                        NioEndpoint.log.debug("Error during SSL handshake", var12);
                    }
                } catch (CancelledKeyException var13) {
                    handshake = -1;
                }
                if (handshake == 0) {
                    SocketState state = SocketState.OPEN;
                    if (this.event == null) {
                        state = NioEndpoint.this.getHandler().process(this.socketWrapper, SocketEvent.OPEN_READ);
                    } else {
                        state = NioEndpoint.this.getHandler().process(this.socketWrapper, this.event);//关键在于调用对应的handler来执行这两个process方法。
                    }
                    if (state == SocketState.CLOSED) {
                        NioEndpoint.this.close(socket, key);
                    }
                } else if (handshake == -1) {
                    NioEndpoint.this.getHandler().process(this.socketWrapper, SocketEvent.CONNECT_FAIL);
                    NioEndpoint.this.close(socket, key);
                } else if (handshake == 1) {