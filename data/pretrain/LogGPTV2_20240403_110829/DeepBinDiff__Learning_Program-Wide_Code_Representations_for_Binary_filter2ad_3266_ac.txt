(7)
The recall metric shown in Equation 8 is produced by
dividing the size of intersection of M and G with the size
of G. This metric shows the percentage of ground truth pairs
that are conﬁrmed to be correctly matched.
Recall =
(8)
||M ∩ G||
||G||
higher precision in certain cases, such as the difﬁng between
v5.93 and v8.30. We investigate the details and see that BinDiff
has a very conservative matching strategy. It usually only
matches the basic blocks with very high similarity score and
leaves the other basic blocks unmatched. Therefore, BinDiff
generates much shorter matching list
than DEEPBINDIFF
that uses k-hop greedy matching to maximize the matching.
Nonetheless, DEEPBINDIFF can achieve a higher average
precision by a large margin.
Figure 5 and 6 further present the Cumulative Distribution
Function (CDF) ﬁgures of the F1-scores for three difﬁng
techniques on Coreutils binaries in both cross-version binary
difﬁng and cross-optimization-level difﬁng settings. Again,
from the CDF ﬁgures we can see that DEEPBINDIFF-CTX,
ASM2VEC+k-HOP and BinDiff have somewhat similar F1-
scores, while DEEPBINDIFF performs much better. In a nut-
shell, DEEPBINDIFF can exceed three baseline techniques by
large margins with respect to cross-version binary difﬁng.
(a) v5.93 compared with v8.30 (b) v6.4 compared with v8.30
Cross-version Difﬁng. In this experiment, we benchmark the
performance of DEEPBINDIFF, BinDiff, DEEPBINDIFF-CTX
and ASM2VEC+k-HOP using different versions of binaries
(with the default O1 optimization level) in Coreutils, Diffutils
and Findutils. We report the average recall and precision results
for each tool under different experimental settings in Table I.
As shown, DEEPBINDIFF outperforms DEEPBINDIFF-
CTX, ASM2VEC+k-HOP and BinDiff across all versions of
the three datasets in terms of recall, especially when the two
diffed versions have a large gap. For example, for Coretuils
difﬁng between v5.93 and v8.30, DEEPBINDIFF improves the
recall by 11.4%, 10% and 36.9% over DEEPBINDIFF-CTX,
ASM2VEC+k-HOP and BinDiff. Also, we can observe that
ASM2VEC+k-HOP and DEEPBINDIFF-CTX, which carry the
semantic information for tokens, has better recall than the de-
facto commercial tool BinDiff. This result shows that including
semantic information during analysis can indeed improve the
effectiveness. Moreover, the performance difference between
DEEPBINDIFF-CTX and DEEPBINDIFF shows that contextual
information can help boost the quality of difﬁng results by a
large margin.
Notice that although DEEPBINDIFF outperforms BinDiff
in terms of precision for most binaries, BinDiff can produce
(c) v7.6 compared with v8.30 (d) v8.1 compared with v8.30
Fig. 5: Cross-version Difﬁng F1-score CDF
Cross-optimization-level Difﬁng. We then conduct experi-
ments to measure the effectiveness for cross-optimization-level
setting. Particularly, each binary is compiled and diffed three
times (O0 vs O3, O1 vs O3, O2 vs O3) and average recall and
precision results are reported in Table II.
As shown, DEEPBINDIFF outperforms DEEPBINDIFF-
CTX, ASM2VEC+k-HOP and BinDiff for most of the set-
tings with respect to recall as well as precision. There exist
only two exception for recall. In Diffutils v3.1 O1 vs O3,
DEEPBINDIFF-CTX has a recall rate of 0.826, while DEEP-
BINDIFF obtains a similar recall of 0.825. And in Diffutils
v3.6 O1 vs O3, ASM2VEC+k-HOP has a slightly better recall
than DEEPBINDIFF. This is because there are only 4 binaries
in Difftuils and most of them are small. In this special case,
program-wide structural information becomes less useful. As
a result, DEEPBINDIFF-CTX and DEEPBINDIFF also share
8
0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiffTABLE I: Cross-version Binary Difﬁng Results
v5.93 - v8.30
v6.4 - v8.30
v7.6 - v8.30
v8.1 - v8.30
Average
v2.8 - v3.6
v3.1 - v3.6
v3.4 - v3.6
Average
v4.2.33 - v4.6.0
v4.4.1 - v4.6.0
Average
BinDiff
0.506
0.572
0.748
0.756
0.646
0.354
0.905
0.925
0.728
0.511
0.736
0.624
Coreutils
Diffutils
Findutils
ASM2VEC+k-HOP
0.635
0.654
0.771
0.785
0.711
0.741
0.933
0.955
0.876
0.688
0.813
0.751
Recall
DEEPBINDIFF-CTX
0.622
0.656
0.752
0.788
0.705
0.733
0.915
0.947
0.865
0.673
0.821
0.747
DEEPBINDIFF
0.693
0.748
0.867
0.872
0.795
0.778
0.961
0.972
0.904
0.725
0.911
0.818
BinDiff
0.775
0.784
0.771
0.821
0.788
0.662
0.949
0.964
0.858
0.631
0.898
0.765
ASM2VEC+k-HOP
0.613
0.643
0.746
0.765
0.692
0.742
0.931
0.94
0.871
0.704
0.877
0.791
Precision
DEEPBINDIFF-CTX
0.611
0.645
0.751
0.755
0.691
0.752
0.932
0.935
0.873
0.711
0.855
0.783
DEEPBINDIFF
0.761
0.805
0.904
0.903
0.843
0.783
0.949
0.941
0.891
0.748
0.885
0.817
(a) v5.93O0 vs v5.93O3
(b) v5.93O1 vs v5.93O3
(c) v5.93O2 vs v5.93O3
(d) v6.4O0 vs v6.4O3
(e) v6.4O1 vs v6.4O3
(f) v6.4O2 vs v6.4O3
(g) v7.6O0 vs v7.6O3
(h) v7.6O1 vs v7.6O3
(i) v7.6O2 vs v7.6O3
(j) v8.1O0 vs v8.1O3
(k) v8.1O1 vs v8.1O3
(l) v8.1O2 vs v8.1O3
(m) v8.30O0 vs v8.30O3
(n) v8.30O1 vs v8.30O3
(o) v8.30O2 vs v8.30O3
Fig. 6: Cross-optimization-level Difﬁng F1-score CDF
similar recall rates for these binaries. Still, DEEPBINDIFF
could outperform the baseline techniques for all other settings,
even for Diffutils. For precision, because of the conserva-
tiveness of BinDiff, it could achieve slightly better in some
cases. However, DEEPBINDIFF still outperforms BinDiff for
most binaries as shown in average results. Also, the evaluation
shows that cross-optimization-level binary difﬁng is more
difﬁcult than cross-version difﬁng since the recall and precision
rates are lower, because the compiler optimization techniques
could greatly transform the binaries.
Binary Size vs. Accuracy. We further examine the relationship
between binary size and accuracy to see how the effectiveness
of our tool could be affected by the binary size. Intuitively, a
larger binary tends to have more basic blocks, and therefore,
resulting in a more complicated ICFG. Although a very
Fig. 7: Binary Size vs. Accuracy
complicated ICFG may reduce our chance of matching the
correct basic blocks within a ﬁx k hops, our algorithm should
9
0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff0.00.20.40.60.81.0F1-score0.00.20.40.60.81.0PercentageDeepBinDiffDeepBinDiff-CtxAsm2Vec+K-HopBinDiff00.10.20.30.40.50.60.70.80.9618886604068272755207912081360832728552887568921929588098784104168107920112528120344133040140752148048164192175640188448205720216656267552346008405184Accuracy (F1-score)Binary Size (bytes)TABLE II: Cross-optimization-level Binary Difﬁng Results
v5.93 O0 - O3
v5.93 O1 - O3
v5.93 O2 - O3
v6.4 O0 - O3
v6.4 O1 - O3
v6.4 O2 - O3
v7.6 O0 - O3
v7.6 O1 - O3
v7.6 O2 - O3
v8.1 O0 - O3
v8.1 O1 - O3
v8.1 O2 - O3
v8.30 O0 - O3
v8.30 O1 - O3
v8.30 O2 - O3
Average
v2.8 O0 - O3
v2.8 O1 - O3
v2.8 O2 - O3
v3.1 O0 - O3
v3.1 O1 - O3
v3.1 O2 - O3
v3.4 O0 - O3
v3.4 O1 - O3
v3.4 O2 - O3
v3.6 O0 - O3
v3.6 O1 - O3
v3.6 O2 - O3
Average
v4.233 O0 - O3
v4.233 O1 - O3
v4.233 O2 - O3
v4.41 O0 - O3
v4.41 O1 - O3
v4.41 O2 - O3
v4.6 O0 - O3
v4.6 O1 - O3
v4.6 O2 - O3
Average
BinDiff
0.176
0.571
0.837
0.166
0.576
0.838
0.156
0.484
0.840
0.166
0.480
0.835
0.135
0.508
0.842
0.507
0.236
0.467
0.863
0.125
0.633
0.898
0.171
0.577
0.903
0.159
0.735
0.919
0.557
0.144
0.633
0.933
0.084
0.677
0.839
0.075
0.563
0.958
0.545
Coreutils
Diffutils
Findutils
ASM2VEC+k-HOP
0.155
0.545
0.911
0.201
0.579
0.893
0.225
0.618
0.903
0.169
0.625
0.871
0.144
0.521
0.875
0.549
0.321
0.781
0.955
0.211
0.819
0.905
0.199
0.711
0.907
0.228
0.881
0.952
0.656
0.192
0.687
0.951
0.142
0.711
0.917
0.151
0.645
0.935
0.592
Recall
DEEPBINDIFF-CTX
0.163
0.497
0.912
0.221
0.599
0.871
0.213
0.653
0.911
0.155
0.602
0.881
0.151
0.506
0.856
0.546
0.327
0.745
0.961
0.208
0.826
0.901
0.187
0.737
0.901
0.232
0.871
0.957
0.654
0.217
0.696
0.945
0.137
0.696
0.901
0.139
0.627
0.923
0.587
DEEPBINDIFF