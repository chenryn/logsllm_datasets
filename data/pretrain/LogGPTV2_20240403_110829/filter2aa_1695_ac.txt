### Exploiting Vector Length Vulnerabilities in Adobe Flash

#### Overview
This document provides a detailed explanation of how to exploit vector length vulnerabilities in Adobe Flash, using CVE-2015-3090 as an example. It also discusses the mitigations implemented by Adobe and how to bypass them.

#### Exploit Process

1. **Triggering the Vulnerability:**
   - The vulnerability is triggered to overwrite the vector length.
   - If the corrupt vector is not found, the function returns `false`.

```cpp
if (!findCorruptVector()) {
    return false;
}
```

2. **Building and Executing the ROP Chain and Shellcode:**
   - After identifying the corrupt vector, the next step is to build the ROP chain and shellcode.
   - Finally, the exploit is executed.

```cpp
buildRopAndShellcode();
exec();
```

#### Real Example: CVE-2015-3090

- **Objective:** Obtain the ROP gadgets and shellcode used in the exploit.
- **Tool:** Use `DbgFlashVul` to achieve this.

**Steps:**

1. **Identify AS3 Functions:**
   - Most Flash exploits that use corrupt vectors have two AS3 functions: `read_memory` and `write_memory`.
   - These functions use the corrupt vector to read and write arbitrary memory.

2. **Breakpoint Setup:**
   - Set a breakpoint at the `write_memory` function.
   - After the breakpoint is hit, get the address of the instruction `corruptVector[index] = value`.
   - The assembly code for this operation might look like: `mov dword ptr [edx+eax*4+8], ecx`.
   - Set a breakpoint on this address.
   - When the breakpoint is hit, each `ecx` value is part of the ROP chain and shellcode.

**Example Breakpoints:**

```assembly
0:008> !SetBaseAddress 038f0000
0:008> !SetBpForJitCode test/write_memory
0:008> g
BreakPoint at [test/write_memory]
eax=05072424 ebx=05039100 ecx=020bf4b0 edx=00000002 esi=05023b08 edi=05023b08
eip=05072424 esp=020bf464 ebp=020bf480 iopl=0 nv up ei pl nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00040206
+0x5072423: 05072424 55 push ebp
0:008> p
...
0:008> p
eax=00089352 ebx=05039100 ecx=03bcbeb6 edx=0510e2c0 esi=05023b08 edi=05023b08
eip=05072553 esp=020bf428 ebp=020bf460 iopl=0 nv up ei ng nz na po cy
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00040283
+0x5072552: 05072553 894c8208 mov dword ptr [edx+eax*4+8],ecx ds:0023:05333010=00000000
0:008> bu 05072553
0:008> g
Breakpoint 4 hit
eax=0008937b ebx=05039100 ecx=03b66ea0 edx=0510e2c0 esi=05023a78 edi=04a6a020
eip=05072553 esp=020bf548 ebp=020bf580 iopl=0 nv up ei ng nz na pe cy
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00040287
+0x5072552: 05072553 894c8208 mov dword ptr [edx+eax*4+8],ecx ds:0023:053330b4=00000000
0:008> u ecx
Flash32_17_0_0_134!DllUnregisterServer+0x92fe4:
03b66ea0 94 xchg eax,esp // stack pivot
03b66ea1 c3 ret
```

#### Implementation

- **Getting MethodInfo::getMethodName Address:**
  - Perform a binary search to find the address of `MethodInfo::getMethodName`.

- **Hooking BaseExecMgr::verifyJit:**
  - Hook the `BaseExecMgr::verifyJit` function similar to FED (Flash Exploit Detector).

- **In the Hook Function:**
  - Get the emulated code address and `MethodInfo` object.
  - Call `MethodInfo::getMethodName` with the `MethodInfo` object (`ecx`).
  - Retrieve the AS3 method name from `eax`.
  - Save the AS3 method name and code address.

**Example Code:**

```cpp
void BaseExecMgr::verifyJit(...) {
    ...
    jump hook_func
    ...
}

void hook_func(...) {
    name = method_info->getMethodName();
    address = code_address;
    Map[name] = address;
    jump verifyJit
}
```

#### Additional Capabilities of DbgFlashVul

- **Exploit Development:**
  - Helps in writing Flash player exploits.
- **Fuzzing Verification:**
  - Assists in verifying the correctness of template SWFs during fuzzing.
- **SWF Dumping:**
  - Facilitates dumping embedded SWFs by setting breakpoints at `LoadBytes`.

#### Mitigations and Bypasses

- **Vector Length Check:**
  - **Mitigation:** Add a length XOR cookie in the vector buffer object.
    - Structure: `| length | cookie | gc relate | data |`
    - Comparison: `(length ^ seed) == cookie`
  - **Bypass:** Requires a strong information leak bug to read both the length and cookie to calculate the seed.
    - Calculation: `seed = (length ^ cookie)`

- **Vector Buffer Object Isolation:**
  - **Mitigation:** Allocate vector objects in the system heap instead of the Flash GC heap.
    - This makes it harder to occupy freed memory and mitigate UAF bugs.
    - Also, it makes heap buffer overflow bugs less likely to overwrite vector buffer objects.
  - **Bypass:** Requires heap spraying many vector objects to a specific address and an overwrite bug to overwrite a heap-sprayed address.

#### Conclusion

- **Impact of Mitigations:**
  - The mitigations make vector length-based exploits more difficult.
  - However, they do not reduce the number of vulnerabilities in Flash Player.
  - Bypassing these mitigations requires more sophisticated bugs.
  - Alternatives to vector-based exploitation may be discovered.

#### References

- "Smashing The Heap With Vector," Haifei Li
- "Inside AVM," Haifei Li
- Google Project Zero: <https://googleprojectzero.blogspot.tw/2015/07/significant-flash-exploit-mitigations_16.html>

#### Special Thanks

- @LambdaTea for implementing FED together with me.

Thank you!