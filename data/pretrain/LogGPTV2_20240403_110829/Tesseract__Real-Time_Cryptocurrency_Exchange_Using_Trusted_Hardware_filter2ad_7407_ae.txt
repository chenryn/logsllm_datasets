Pr[NegBin(T1, p) = k]·Pr[NegBin((cid:96)2, p) ≥ (cid:96)2 − k]
k=0
The ﬁrst negative binomial variable counts the number
13
Bob300000 LTCBob1000 BTCCarol2 BTCDave1 BTCDave300 LTCAlice300000 LTCCarol300 LTCTX1TX2Bitcoin transactionLitecoin transactionAlice1000 BTCCarol3 BTCφ1={x1: hash(x1)=Y1}φ2={block# > T0}φ'1={TX1,1 is confirmed}       OR       {x2: hash(x2)=Y2}φ'2={TX1,2 is confirmed}RMIT:RMIT:Protocol Πtheo
1. The enclave releases TX1 and waits for evidence
that it was conﬁrmed on the system C1.
2. The enclave releases TX2 and waits for evidence
that it was conﬁrmed on the system C2.
3. The enclave releases x1 and waits for evidence that
TX1,1 was conﬁrmed on the system C1.
4. The enclave releases x2.
Figure 12: Theoretical protocol for fair settlement.
Table 3: Breaking the security of Πtheo
p T1
(cid:96)2 with head start with T1 = 0
1
6 50
3
1
5 10 50
1
6 50
5
1
6 100
5
1
10 20 50
1
10 10 50
1
10 10 100
0.0016
2−30
2−33
2−65
2−64
2−71
2−145
0.0003
2−37
2−37
2−69
2−79
2−79
2−153
simply the probability Pr[NegBin((cid:96)2, p) ≥ (cid:96)2].
For the opposite attack, A may intercept x1 in Step
3 and then create a hidden chain w2 that excludes x1.
With this attack strategy, A will broadcast x1 to C1 right
before the timeout T0 is reached, in hope that her hidden
chain w2 will outcompete the chain that the miners of
C1 begin to create. This attack vector is mitigated by
disallowing a precomputation of w2. Speciﬁcally, the
enclave hardcodes b1 into TX2, and the predicate φ(cid:48)
2
veriﬁes that b1 is buried under at least (cid:96)3 PoW blocks.
The parameter (cid:96)3 should be set to 2(cid:96)2 + T1. This
gives a time span of T1 blocks to update TX1 into TX1,1,
after the enclave received the evidence that TX1, TX2
were conﬁrmed and thus revealed x1. The parameter T1
should not be too low, to avoid the cancellation of the
settlements in case of a short network outage or a slow
chain growth in C2 relative to C1.
In the current Bitcoin network, (cid:96)1 = 12 sufﬁces,
2 require ≤ 12 + (cid:96)2 + (cid:96)3 hash
hence the predicates φ(cid:48)
invocations for conﬁdence level (cid:96)2. Given that the
complexity of ECDSA signature veriﬁcation is an order
of magnitude higher than that of invoking a hash
function, moderate values such as (cid:96)2 = 50, T1 = 10, (cid:96)3 =
2(cid:96)2 + T1 = 110 imply that Bitcoin miners can validate
the scripts φ(cid:48)
2 for a mild fee. These parameters
for PoW-based SPV proofs can be even better if the
1,φ(cid:48)
1,φ(cid:48)
cryptocurrency system supports NIPoPoW [36].
It is unlikely that Πtheo will be vulnerable to an attack
that embeds a transaction that spends TX1 into TX1,1
or TX1,2 in another cryptocurrency system C3, where C3
has the same PoW hash function and the same difﬁculty
level. The reason is that the txid hash of TX1 in the leaf
of the Merkle tree is determined according to the prior
history that goes back to the genesis block of C1. Unless
C3 allows the input of a transaction to consist of arbitrary
data, A will need to mount a preimage attack that creates
valid transaction in C3 with a particular value (i.e., the
txid of TX1) as its hash.
The main obstacle to an implementation of Πtheo in
Bitcoin is the RMIT functionality.
It is possible to
implement the speciﬁc RMIT that Πtheo requires by
creating a transaction txinit that spends the inputs into
a single output that is controlled by the secret signing
key of Tesseract, and creating a refund transaction
txrefund that has locktime [80] of T0 and spends the
output of txinit back into the inputs. After the enclave
receives evidence that txrefund is publicly available, it
will broadcast txinit to the Bitcoin network. When the
execution of Πtheo reaches Step 3 and the enclave needs
to release x1,
it will broadcast a transaction txcommit
that spends the output of txinit into the desired outputs.
The only problem with this procedure is that there is
no good way to make txrefund publicly available while
relying on the security of Bitcoin alone.
In a purely
theoretical sense, it is possible to make txrefund available
by storing it as arbitrary data on the Bitcoin blockchain
using OP RETURN, but this will be very costly because
the size of txrefund can be dozens of kilobytes and the
capacity of an OP RETURN output is only 80 bytes. An
efﬁcient version of RMIT can be done via a Bitcoin
protocol fork: an initial transaction will mark both the
inputs and the new outputs as unspendable in the UTXO
set, and a subsequent transaction will supply a witness to
φ1 or φ2 and thereby ask the miners to make either the
inputs or the outputs spendable (for a fee). An Ethereum
implementation of a RMIT contract is possible, but
it should be noted that Πtheo (and its generalization
to more than two systems) requires RMIT support by
all the cryptocurrency systems that are involved in the
settlement.
Our analysis of Πtheo gives the essential security
arguments for a protocol that enables an all-or-nothing
settlement. A formal security proof of Πtheo (as well as
Πprac of Section 5.3 and ΠRTExch of Section 6) requires
a rigorous model for the cryptocurrency consensus
system — such as GKL [29] or PSS [58] — together
with a rigorous model that is rich enough to express
the scripting language that controls the users’ coins
(see, e.g.,
In Appendix A we provide a
formal security proof (under certain assumptions) for the
[53]).
14
Protocol Πprac
1. Tesseract
sends
ct
=
for
encryptK(TX1, TX2, TXc
i ∈ [N],
every
2. For
1, TXc
2) to S1,S2, . . . ,SN.
Tesseract waits
acknowledgement from Si that it received ct.
3. Tesseract broadcasts TX1 to C1.
4. Starting from the time at which it received ct in Step
1, each server Si ∈ {S1,S2, . . . ,SN} inspects the next
blocks of C1
• If Si does not see TX1 on C1 within T1 blocks,
then it broadcasts TXc
1 to C1.
• If Si sees that TX1 has (cid:96)2 extra conﬁrmations
on C1, then it broadcasts TX2 to C2.
• If Si sees that TXc
on C1, then it broadcasts TXc
2 to C2.
1 has (cid:96)2 extra conﬁrmations
Figure 14: Practical protocol for fair settlement.
This allows Si or one of the other non-adversarial servers
to broadcast the appropriate transaction (i.e., TX2 or
2) to the cryptocurrency system C2, causing it to be
TXc
conﬁrmed too.
The adversary A may attempt to mount a race attack
with a head start of T1 blocks, by eclipsing one of the
servers S j. The attack can proceed as follows:
1. A intercepts the data TX1 that Tesseract reveals in Step 3
of Πprac, and deactivates the Tesseract server.
2. A eclipses the server S j, and feeds it with a fake
blockchain (generated by A herself) that contains TX1.
3. When the enclave of S j becomes convinced that TX1 was
conﬁrmed, it releases TX2.
4. A waits until TXc
1 is conﬁrmed on C1, and then broadcasts
TX2 to C2.
As with Πtheo, the reason that A obtains a head start
is that the honest participants wait for a duration of T1
blocks before they attempt to invalidate TX1, whereas
A begins to create her fake chain immediately — see
Section 5.2 and Table 3 for analysis. Note that the
purpose of the cancellation transaction TXc
2 is to defeat
this race attack, in the case that A fails to generate (cid:96)2
blocks while the honest network generates T1 +(cid:96)2 blocks.
In fact, it is more difﬁcult for A to exploit the head
start and attack Πprac, than it is to attack Πtheo. This is
because Πprac can specify the precise duration T1, and
Πtheo has to estimate T1 by setting T0 in the predicate
φ2. This estimation should use a lenient bound (that
will likely give A a larger head start), as otherwise the
variance of the block generation process can cause φ2 to
be triggered and thus abort the settlement.
Figure 13: Practical fair settlement.
ACCSs protocol of Section 2, that also serves to show
several of the ingredients that a proof for Πtheo needs to
incorporate.
5.3 Practical Protocol
The theoretical protocol Πtheo of Section 5.2 is resilient
against an adversary who has total access to the server
machine, except for the data that is inside the SGX CPU.
Here, we present a practical protocol Πprac for the all-
or-nothing settlement problem that relaxes this resiliency
aspect, but in fact offers better security in other respects.
Our strategy is to distribute the trust among N
additional servers that are all running SGX enclaves (see
Figure 13), and ensure that Πprac satisﬁes Deﬁnition 2 if
there exists at least one server S j ∈{S1,S2, . . . ,SN} that is
beyond the reach of the adversary A. That is to say, we
assume that S j can communicate with cryptocurrencies
C1,C2 without interference.
The main idea of Πprac is to emulate the essential
characteristic of the theoretical protocol Πtheo, which is
to wait for a proof that the settlement transaction TX1
was either committed to C1 or cancelled, and then do the
same for the settlement transaction TX2.
1, TXc
The settlement protocol Πprac that Tesseract and the
servers S1,S2, . . . ,SN execute is speciﬁed in Figure 14.
As a prerequisite, the Tesseract server and S1,S2, . . . ,SN
need to share a symmetric secret key K that is known
only to their enclaves. The transactions TXc
2 are
“cancellation” transactions that invalidate the settlement
transactions TX1, TX2, respectively. In Bitcoin, TXc
i can
be implemented simply by spending one of the inputs of
TXi into a new output that is identical to that input (this
will cause TXi, TXc
i to conﬂict with each other).
Thus, the protocol Πprac seeks to preserve the property
that TX2 remains conﬁdential inside the enclaves for as
long as TX1 is not yet conﬁrmed. This property avoids
the risk that TXi, TXc
3−i will compete for conﬁrmations
at the same time, as that can easily violate the all-or-
nothing requirement.
In the case that at least one server Si is not under
physical attack, we have that either TX1 or TXc
1 will
be broadcast to C1 within T1 blocks. As a consequence,
either TX1 or TXc
1 will be conﬁrmed after T1 + (cid:96)2 blocks.
15
SGX real-time exchangeS1SGXS2SGXS3SGXSNSGXNotice that A cannot mount an eclipse attack before
Step 3 of Πprac is reached. Only the Tesseract enclave
can produce the data TX1, and it will do so only after
receiving all the acknowledgements from S1,S2, . . . ,SN
in Step 2.
Therefore, an eclipse attack will be
least one non-adversarial server Si ∈
thwarted if at
{S1,S2, . . . ,SN} is present, because Si will broadcast the
invalidation transactions TXc
1, TXc
2 to ensure the all-or-
nothing guarantee of Deﬁnition 1.
In practice, it is preferable that the Tesseract enclave
will wait for acknowledgements from only a constant
fraction of the servers Si ∈ {S1,S2, . . . ,SN}, so that A
will not be able to deny service by preventing a single
acknowledgement from reaching Tesseract in Step 2 of
the settlement procedure. Our practical approach can in
fact make Tesseract resistant to DoS attacks in a broader
sense, see Section 6.
Another advantage of Πprac is that it can support other
cryptocurrency systems besides a PoW blockchain. This
is because the servers S1,S2, . . . ,SN can run a full node
inside their enclave, whereas the predicates φ(cid:48)
2 lack
the power to express the irreversibility condition of a
more complex cryptocurrency system.
1,φ(cid:48)
Irrespective of the settlement procedure, the Tesseract
exchange server can fetch from S1,S2, . . . ,SN the heights
of their longest chains (e.g., once every 30 minutes), and
refuse to conﬁrm users’ deposits if less than N/2 of the
servers respond. This would avert fake deposits from
being conﬁrmed due to an eclipse attack, without relying
on the prudence of the users.
5.4 Settlement with One Secure Processor
Is it possible to devise a workable protocol for all-or-
nothing settlement that utilizes servers S1,S2, . . . ,SN that
do not have SGX processors, such that the protocol is
secure if at least one of the servers is isolated from the
adversary? If the round complexity can depend on a
security parameter, then protocols that accomplish this
task are indeed possible.
enclave
The basic idea is to rely on the gradual release
technique [9, 31] to reveal TX1, TX2 simultaneously.
generate
The Tesseract
fresh
can
symmetric key K ∈ {0,1}λ ,
send the ciphertext
ct = encryptK(TX1, TX2) to S1,S2, . . . ,SN, and wait for
acknowledgements from S1,S2, . . . ,SN that they received
ct. Then, Tesseract can send each of the λ bits of K,
and wait for acknowledgements from S1,S2, . . . ,SN after
each bit is received.
a
We can improve upon the basic idea by letting the
SGX enclave assume the role of a trusted dealer, and
combine a fair secret sharing protocol with the gradual
release technique. To this end, we employ the fair
secret reconstruction protocol of Lin and Harn [43]. The
16
Protocol Πgrad
1. The enclave picks a random symmetric key K ∈ {0,1}λ
such that K = (w1,w2, . . . ,wq),wi ∈ {0,1}m,λ = q· m.
2. The enclave creates ct = encryptK(TX1, TX2).
3. For wi ∈ {w1,w2, . . . ,wq}, the enclave creates N-out-
of-N additive secret shares of wi, including dummy
secrets:
• The enclave picks a random α ∈ [s− 1].
• For (cid:96) ∈ [d]\{α,α +1}
– For each j ∈ [N], the enclave picks random
i ∈ GF(2λ ) conditioned upon
(cid:54)= 0.
shares x(cid:96), j
j=1 x(cid:96), j
∑N
i
• For (cid:96) = α + 1
– For each j ∈ [N], the enclave picks random
i ∈ GF(2λ ) conditioned upon
shares x(cid:96), j
j=1 x(cid:96), j
∑N
• For (cid:96) = α
i = 0.
– For each j ∈ [N], the enclave picks random
i ∈ GF(2λ ) conditioned upon the m
being equal
shares x(cid:96), j
least signiﬁcant bits of ∑N
to wi and ∑N
j=1 x(cid:96), j
i
(cid:54)= 0.
4. For every i ∈ [q], (cid:96) ∈ [d], j ∈ [N]
j=1 x(cid:96), j
i
• The enclave creates a signature σ (cid:96), j
i