message of the original commit as a last resort. Only if
this step fails to locate any commit will we determine
the commit is missing. In practice, we ﬁnd these cases
that require manual analysis are small (6.8% in our
3) It
is possible that
the downstream kernel has
customized the patched function and its context lines no
longer match those in the original patch. We therefore
also attempt to match the added and deleted lines only
(ignoring the context lines). However, if still no results
are found, we keep the commits that matched with at
least some blocks of added lines (which we call “change
sites”) in the original patch.
3652    30th USENIX Security Symposium
USENIX Association
               Patch      evolution tracker     Crawler              E-FIBER  Patch locatorPatched functionsReference kernelsTarget kernel       (src)    Matcher(src)Target kernel       (bin)Patched/Unpatched/NoneTarget  repos Patch time /Unpatched  /NonePatch commitsReference reposCVE infoOriginal patchPatch commitin target repoType1 : repo targetType2: source snapshot targetType3: binary  targetPatched/Unpatched/Noneexperiments).
pay attention to:
In addition, there are several special cases we need to
(1) File path/name change:
If we cannot ﬁnd any
commits that change the patched ﬁle, we extend the
search region to ﬁles that have the same name but in
different directories (sometimes the downstream kernel
would decide to rearrange certain source ﬁles).
If we
ﬁnd any commit that renamed the patched ﬁle at some
points, we also track the evolution of the renamed ﬁle.
(2) Function name change: similar to ﬁle names, the
name of a function may also change over time. We
develop a small script to track the evolution of them too
by checking the related commits.
(3) Patched at initialization time: sometimes a kernel
repository or branch may choose to copy the entirety of
a source ﬁle and commit it as a brand new ﬁle. In that
case, we lose the actual commit that applied the patch.
However, we can still match the change sites given in the
original patch.
Finally, we note that there can be several reasons when
a patch is not found: 1) the patched ﬁle/function simply
doesn’t exist in this branch (e.g., a vulnerable qualcomm
driver is not used in Huawei devices), 2) the vulnerability
does not affect the particular branch/repository, 3) The
vulnerability fails to be patched. In our evaluation, we
consider a CVE not applicable for a particular target if it
falls under case 1).
4.2 Source Code Target
For kernel source snapshots, we need a way to check its
source code against the patched version and infer the
patch presence. A naive approach is to match the
patched function from upstream against
the same
function in the snapshot. However, there can be multiple
versions of the patched functions (i.e., due to further
commits to the same functions), and we do not know
which version the target may take (regardless of whether
it is source code or binary target). Even worse, the
patched function name or patched ﬁle may change
altogether as mentioned previously.
Our solution to this problem is straightforward.
In
addition to the single version of a patched function, we
the patched function to
choose multiple versions of
represent the patch of a vulnerability.
In general, we
have two criteria to select
the versions we should
consider:
(1) Complete. We should be able to discover all
patched versions of a function — unless the version is
internal to the OEM and not visible in the upstream
kernel repositories due to vendor-customization.
(2) Unique. The patched version should not occur in
the unpatched version of the kernel. Otherwise, it no
longer can distinguish the patched and unpatched cases.
Patch evolution tracker:
In order to generate a
complete set of patched function versions, we need to
pick one or more reference kernels ﬁrst where we can
track the evolution of a function post-patch — this
means that we must use kernel repositories with commit
history as reference kernels.
In this paper, we choose the repositories from
Qualcomm as our reference kernels. This is because
Qualcomm has the largest market share as a chipset
vendor and therefore is the direct upstream of most
Android devices. If a bug is ﬁxed in Linux or Android
common kernels, they should also exist in Qualcomm;
in other words, Qualcomm has a superset of patches.
Qualcomm maintains different repositories for several
major kernel versions (e.g., 4.4 and 4.9). Within each
repo,
there is typically a “general release branch”
(which we simply refer to as mainline) and multiple
“stabilization branches” (which we refer to as stable)
exist [16]. A stable branch usually corresponds to
speciﬁc chipsets and OS versions (e.g., Android 8.0)
and only port ﬁxes from the mainline. For example,
branch kernel.lnx.4.4.r34-rel in repo msm-4.4
has tags sharing a preﬁx of LA.UM.7.2.r1 which
corresponds to snapdragon 660 and Android 9.0 [17].
As any OEM kernel either forks from or follows a
corresponding Qualcomm stable
(which
determines the chipset) and Qualcomm repo (which
determines the kernel version), we choose the reference
repo according to its kernel version.
In practice, this
the differences between the two and
minimizes
improves the accuracy of the patch presence test.
branch
After choosing repositories, we need to determine in
which branches to track the patched functions.
In
principle, we could choose all the branches (including
mainline and stabilization) but it may be unnecessary
and time-consuming.
Instead, we choose the mainline
branch only for the following reasons: 1) Generally,
vulnerabilities are patched in the mainline ﬁrst and then
propagated to the chipset-speciﬁc branches. Due to
delays, the patch may not even exist in a chipset-speciﬁc
branch but we cannot rule the vulnerability out. 2) We
prefer to generate generic signatures which are not
overly-speciﬁc; otherwise there may be too many
signatures to generate in the end. In §5, we will show
that this strategy produces satisfactory accuracy.
Source-level matcher After collecting the different
versions of the patched functions in the corresponding
repository, e.g., Qualcomm 4.4, we need to compare
them against the function in the target kernel. There are
several ways to do so, e.g., hash-based methods [15], a
straightforward string match of a few representative
lines (e.g., changes made in the patch) in the function,
or even a simple string match of the whole function.
We decide to use the most strict and simplest method
USENIX Association
30th USENIX Security Symposium    3653
Symol Table
Locate in
tgt. binary Similarity Test
Binary 
Signatures
Tgt. function
(bin)
Matching Engine
Ref. kernels 
Patches 
(src)
Ref. kernels 
(bin)
Tgt. kernels 
(bin)
Change Site Analyzer
Unique Src
Changes
e.g.
Signature Generator
Binary 
Signatures
e.g.
Matching Engine
func(int a,int b ) 
{
    ...
+ if(a+b>5)
+ foo();
    ...
}
ADD
CMP
B.GT    Addr0
X2,X0,X1
X2,5
Addr0:
BL   
foo
Figure 3: Fiber Workﬂow
— strict string matching of the whole patched function
(using all the evolved versions post-patch) after stripped
trailing white spaces for the following reasons: 1) It is
strict and never produces any false positive, i.e., if we
claim that a function is patched, it must match some
version of the patched function (and not any unpatched
version). 2) The method is simple and easy to reason
about. While it does produce false negatives, e.g., the
target kernel may customize the patched function so that
it looks different but still patched, we ﬁnd that these
cases are uncommon and we are able to manually
analyze them (given that we have the target kernel
source).
4.3 Binary Target
If the target is a binary, neither of the previous two
methods works. The key challenge is that the patched
functions at the binary level are unlikely to be identical
even if their sources are the same. This is because of
various kernel and compiler options that can inﬂuence
the compiled binary instructions. Therefore, we choose
to generate binary signatures (in the patched function) to
test the presence of patch in the target. The signature is
what represents the semantics of a patch.
Speciﬁcally, we build an improved version of FIBER
whose original workﬂow is illustrated in Figure 3.
There are three main steps: 1) it ﬁrst analyzes a patch
(i.e., changes made in one or more places) and checks
the uniqueness of each change site. Then it picks a few
suitable change sites for signature generation. 2) FIBER
compiles the kernel and extracts relevant sequences of
instructions (and even symbolic formulas involving the
computation of variables) representing the semantics of
these change sites. 3) FIBER matches the signatures
against a target binary.
are
there
several
Unfortunately,
limitations
acknowledged and summarized in the original paper: 1)
Function inline. (2) Function prototype change (3) Code
customization.
(5) Other
engineering issues. We observe that several of these
issues share a common root cause: patched functions
evolve over time and FIBER picks only the initial
version of the patched function for signature generation.
(4) Patch adaptation.
This means that if the release date of the target kernel
and the original patch differ signiﬁcantly, the generated
signature is likely out-of-date for the target kernel.
In
our preliminary evaluation of FIBER spanning 3 years
of reference and target kernels, we ﬁnd that its accuracy
dropped considerably compared to what was reported in
[42] due to this issue.
To overcome this limitation, we simply leverage the
patch evolution tracker (proposed earlier) to identify the
multiple versions of the patched functions so that a more
complete set of signatures can be generated. This is
especially important when the change sites of the
original patch are completely erased during the
evolution of the patched function.
In addition, we also address two other technical
problems mentioned earlier:
(1) the patched function
becomes inlined, and (2) the binary signatures look
different for the same source due to different compilers
and conﬁguration options (FIBER has some degree of
robustness but can still be affected as discovered in our
preliminary analysis).
Function inlining can cause a direct failure in locating
the patched function in the reference binary (missing
from the symbol
table) and therefore failure in
generating the signature.
Our solution is as follows: we try to ﬁnd the caller of
the patched function which should contain the inlined
version of the patched function.
If the caller is also
inlined, then we will recursively locate the caller of the
caller until one is found in the symbol table. Since the
reference kernels are compiled by E-FIBER, we can
make use of debug information to locate the exact
sequence of instructions that belongs to the patched
function (which is inlined), and generate the signatures
(which are now in the context of a caller) accordingly.
This signature can then be matched in the target kernel
which has the same inlined behavior.
To address the compiler and conﬁguration issues. We
vary these conﬁgurations ahead of time in generating the
binary signature.
(1) Compilers. Most vendors use GCC to compile
their source code, however, a few new devices released
in 2019 (whose corresponding Linux versions are 4.14)
use Clang. Different compilers can yield vastly different
binary instruction sequences to the point it becomes
hard to semantically test the equivalence of the two. As
a result, we use both compilers to compile 4.14
reference kernels
two versions of
signatures.
and generate
(2) Optimization levels. Through sampling a few
kernel source snapshots from major OEM vendors, we
ﬁnd that all of them use either Os or O2 as the compiler
optimization levels. We, therefore, generate signatures
with both optimization levels.
3654    30th USENIX Security Symposium
USENIX Association
Type of target
Repository
Binary
Source snapshot
Xiaomi
Huawei
Oppo
LG
Oneplus
Sony
Samsung
Xiaomi
Huawei
Oppo
Repo (Num of branches) or Phone models (Num of Roms)
Linux(mainline, linux-3.18.y, linux-4.4.y, linux-4.4.y, linux-4.14.y)
Company
Linux
AOSP common Android common(android-3.18, android-4.4, android-4.9, android-4.14)
Qualcomm
Pixel
Samsung
msm-3.18(8), msm-4.4(17), msm-4.9(15), msm-4.14(1)
Android msm (Pixe l, Pixel 2, Pixel 3)
Galaxy S7(78), Galaxy S8(52), Galaxy S9(32),
Galaxy Note9(28), Galaxy A9 Star(11), Galaxy A8s(9)
Mi 6(84), Mi8 Lite(24), Mi 8(12), Redmi 4(41),
Redmi 4pro(38), Redmi Note7(21), Mi Max2(75)
Mate 10(37), P20 pro(31), Honor10(30)
R11s(11)
V30(10)
Oneplus5(27), Oneplus6(18)
XperiaXZ1(23)
Galaxy S8(1), Galaxy S9(1)
Mi 8(1), Mi 9(1), Mi Max2(1), Redmi Note7(1)
Mate 10(1), P20 pro(1)
FindX(1)
Table 1: Dataset of measurements
repository
Linux
1
2
Qualcomm msm-3.4
3 Qualcomm msm-3.10
4 Qualcomm msm-3.18
Qualcomm msm-4.4
5
6
Qualcomm msm-4.9
7
AOSP msm
Num. CVEs
141
12
52
115
63
15
2
Table 2: Corresponding repository of CVE in Android
security bulletin
(3) Conﬁguration ﬁles. Besides optimization levels,
other kernel conﬁguration options (to enable and disable
certain kernel components) vary. In the mainline branch
of Qualcomm repos (e.g., 4.4 or 4.9), there are typically
a few conﬁg ﬁles. For example, msm-4.9 has 16 conﬁg
ﬁles in total and only 8 of them are speciﬁc to Android
chipsets,
sdm845-perf defconfig
(Snapdragon
msm8937-perf defconfig
(Snapdragon 430), etc. We pick only the conﬁg ﬁles that
are relevant to the Android devices we are interested in
testing. For example, snapdragon 845 is used in Mi 8.
Thus sdm845-perf defconfig is used to generate the
corresponding signatures.
including
845),
5 Evaluation
5.1 Dataset
Overall, we collected 402 kernel CVEs released on
Android Security Bulletin every month since its
inception in Aug 2015 until May 2019. This includes
the main bulletin [1] as well as a Pixel bulletin [5]. We
summarize the crawled CVEs in Table 2. Clearly, most
of them link to Linux and Qualcomm instead of AOSP
Android repositories.
We also summarize the target kernels used in our
evaluation in Table 1. Overall, we collected 3 levels of
i.e., Linux,
upstream kernels as introduced before,
Android common and Qualcomm).
8 most popular
Android brands (Google Pixel, Samsung, Xiaomi,
Huawei, Oppo, OnePlus, Sony, LG), covering 26 phone
models and 701 released kernel instances (either source
or binary). For most phone models, the kernel instances
cover a time range of one to two years. We collect these
kernels through both ofﬁcial and third-party websites.
Our experience is that most ofﬁcial websites supply
only the latest ROM for each phone model, and
occasional source snapshots. The one exception is that
SONY offers all source code snapshots on its websites.
To obtain historical versions of ROMs, we rely mostly
on third-party websites [11, 12, 7, 8].
We extract compilation dates (i.e., build dates) from
these ROMs which are used to compare against various
dates such as Android security bulletin release date and
patch dates on the upstream. Note that we collect many
historical kernel versions (e.g., 78 versions for Samsung
Galaxy S7) for the same phone model in order to conduct
a longitudinal study on their patching behavior.
To generate robust signatures using E-FIBER (see
§4.2 and §4.3), we have used in total 19 different conﬁg
ﬁles from msm-3.18, msm-4.4, msm-4.9, and msm-4.14
Qualcomm repos that represent the chipsets encountered
in our OEM devices. We use two compiler optimization
USENIX Association
30th USENIX Security Symposium    3655
Device
Samsung S8
Samsung S9
Xiaomi Mi8
Xiaomi Mi9
Redmi Note7
Xiaomi Max2
Huawei P20
Huawei Mate10
Oppo FindX
Kernel
Version
4.4.78
4.9.112
4.9.65
4.14.83
4.4.153
3.18.31
4.9.97
4.4.23
4.9.65
Cnt.
351
302
232
262
356
328
137
147
235
TP
257
293
208
258
342
217
114
74
210
Source code
TN FP
0