if(pLargeObjectHeader >= this->pageaddress && pLargeObjectHeader->index allocblockcount
&&
this->allocBlockAddressArray[pLargeObjectHeader->index] ==
pLargeObjectHeader)
{
//push one object info into stack.
stackpointer = pMarkContext->stackpointer;
*strackpointer = address;
*(stackpointer+4) = pLargeObjectHeader->blockSize;
pMarkContext->stackpointer +=8;
}
}
LargeHeapBlock::Mark
HeapInfo::Sweep
HeapInfo::Sweep( RecyclerSweep* pRecyclerSweep, bool flag)
{
for( var i=0;im_HeapBucketGroup[i];
SmallFinalizableHeapBucketT* pHeapBucket =
&pHeapBucketGroup->m_HeapBucketT;
pHeapBucket->Sweep0( pRecyclerSweep );
SmallFinalizableHeapBucketT* pHeapBucket =
&pHeapBucketGroup->m_HeapBucketT;
pHeapBucket->Sweep0( pRecyclerSweep );
}
this->SweepSmallNonFinalizable(pRecyclerSweep);
for( var i=0;im_LargeHeapBucket[i];
pLargeHeapBucket->Sweep( pRecyclerSweep);
}
this->m_LastLargeHeapBucket.Sweep( pRecyclerSweep);
}
HeapBucketT
HeapBucketT
0x20    pPartialReuseHeapBlockList
0x24    pEmptyHeapBlockList
0x28    pFullMarkedHeapBlockList
0x2c    pPendingNewHeapBlockList
SweepSmallHeapBlock
SmallHeapBlock::sweep
• return status 
– 0: no object marked
– 1 : partial object marked
– 2 : all object marked
– 3:  never come here
– 4: some pending heapblock
SmallHeapBlock::Sweep
1、Calculation freecount
2、Calculation markcount
3、Sweepcount = objectCapacity – markcount-
freecount
SmallHeapBlock::Sweep(RecyclerSweep *pRecyclerSweep,pendingflag,flag,pSmallHeapBlock-
>unknowncount,flagDispose )
{
if(flag)
{
//if pFreeHeapObject ！= pLatestSweepFreeHeapObject, after the last sweep, some free object 
alloced
//need 
if(this->pFreeHeapObject != this->pLatestSweepFreeHeapObject)
{
this->freeobjectCount = this->BuildFreeBitVector( this->pFinalizeBitMap);
this->pLatestSweepFreeHeapObject = this->pFreeHeapObject;
}
pRecycler = *pRecyclerSweep;
if(*(pRecyler->bPartialCollectMode)
{
int freeblock =this->freeobjectCount;
int
lastSweepfreeblock = this->lastetSweepfreeblockCount;
int blockSize = this->blockSize;
int sub = lastSweepfreeblock - freeblock;
int subtotal = sub*blockSize;
this->lastetSweepfreeblockCount = this->freeobjectCount;
* (pRecyclerSweep + 0x1424) +=aa;
*(pRecycler + b5c0) += aa;
}
else
{
//update lastetSweepfreeblockCount
this->lastetSweepfreeblockCount= this->freeobjectCount;
this->freeblock3e = this->freeobjectCount;
}
}
SmallHeapBlock::Sweep: Part I
if( this->freeobjectCount)
{
pMarkBitMapTable = this->pMarkBitMapTable;
pMarkBitMapTableEnd = pMarkBitMapTable+32;
pTemp=pMarkBitMapTable;
pFreeBitVector = &this->freeBitVector
//Recalculated markbittable
do(
*pTemp =*pTemp & ( ~*(pFreeBitVector +pTemp-
pMarkBitMapTable ) );
pTemp += 4;
)while( pTemp !=pMarkBitMapTableEnd )
}
SmallHeapBlock::Sweep: Part II
blockSize = this->blockSize;
pinvalidBitsData =
chakra!HeapInfo::ValidPointersMap::invalidBitsData;
pInvalidBitsDataBegin = pinvalidBitsData+32*( blockSize>>4);
pMarkBitMapTable = this->pMarkBitMapTable;
pMarkBitMapTableEnd = pMarkBitMapTable+32;
//Recalculated markbittable
for(; pMarkBitMapTable!=pMarkBitMapTableEnd;pMarkBitMapTable+=4)
{
int value = *pInvalidBitsDataBegin;
pInvalidBitsDataBegin+=4;
*pMarkBitMapTable= *pMarkBitMapTable&(~*value);
}
SmallHeapBlock::Sweep: Part III
int markcount = 0;
pMarkBitMapTable = this->pMarkBitMapTable;
//Calculation mark object number
for(int i=0;i::CountBit(pMarkBitMapTable + 4*i );
}
SmallHeapBlock::Sweep: Part IV
if( pendingDisposeCount || markcount!=0)
{
result = 1;
LABEL_25:
//have dispose object, return 3.
if( flagDispose)
result = 3;
if( unmark)
{
if(pendingflag)
{
*(pRecyclerSweep+0x141a) = 1;
result = 4;
this->0x0e = 1;
return result;
}
this->SweepObjects(* pRecyclerSweep);
if( this->IsIsAnyFinalizableBlock()&& (this-
>0x6aunknownDispose1))
return 3;
}
else
//all object marked, return 2
if(!freeblock)
return 2;
return result;
}
if( flagDispose)
goto Label_25:
return 0;
}
SmallHeapBlock::Sweep: Part V
Calculation markcount
markbitmap
invalidBitsData
freebitvector
New markbitmap
Why need invalidBitsData,
freebitvector
• MemGC is a Conservative GC, does not 
distinguish between data and pointers.
• X is a data manager by MemGC
– X.value == freeobjectA.address or X.value == 
InvalidPointer
– In MemGC mark phase, it will mark the 
address(x.value). 
Sweepcount!=0
• sweepcount= objectCapacity - freeCount-
markcount
SmallHeapBlock：：SweepObjects(Recycler* pRecycler)
{
startaddress = this->startaddress;
pMarkBitMapTable = pSmallHeapBlock->pMarkBitMapTable
;
blockCount = this->blockCount( 0x34)
blocksize = this->blocksize ( 0x36)
tyeparray=
(*BYTE)this-1;
vartype = *typearray
tempaddress = startaddress
freeBitVector = pSmallHeapBlock->freeBitVector
//while( ) process each object in the SmallHeapBlock
where(blockcount--)
{
//tempaddress unmarked
if(tempaddress unmark in pMarkBitMapTable and tempaddress unkmark in 
freeBitVector)// check in Bitmapaddress)
{
//vartype not implict root
if(vartype & 0x80 ==0)
{
//link the tempaddress into the freeheapobject list
pFreeHeapObject = this->pFreeHeapObject;
pFreeHeapObject = pFreeHeapObject | 1;
*tempaddress = pFreeHeapObject;
this->pFreeHeapObject = tempaddress;
*typearray = 0;
}
SmallHeapBlock::SweepObjects I
pFreeHeapObject
SmallNormalHeapBlock
0x24: pFreeHeapObject
0x00:pNextHeapObject
0x00:pNextHeapObject
0x00:pNextHeapObject
0x00:pNextHeapObject
SmallHeapBlock mark-sweep example
0x00000000
0x15000001
0x15000001
0x15000301
0x15000301
0x15000401
0x15000401
0x15000501
0x15000501
0x15000801
0x15000801
0x15000b01
0x15000b01
0x15000c01
0x15000c01
0x15000f01
PageAddress: 0x15000000
LargeHeapBucket::Sweep(RecyclerSweep* pRecyclerSweep)
{
LargeHeapBlock*
pNewLargeHeapBlockList,pSweepLargeHeapBlockList,pUnknown1,pDisposeLargeHeapBlockLi
st;
pNewLargeHeapBlockList = this->pNewLargeHeapBlockList;
pSweepLargeHeapBlockList
= this->pSweepLargeHeapBlockList;
//pUnknown1 always null.
pUnknown1 = this->pUnknown1;
pDisposeLargeHeapBlockList = this->pDisposeLargeHeapBlockList;
this->pNewLargeHeapBlockList =0;
this->pSweepLargeHeapBlockList =0;
this->pUnknown1 = 0;
if( this->freelistflag)
{
this->pExplicitFreeListHead = 0;
this->pFreeListHead = 0;
}
//sweep pNewLargeHeapBlockList, pSweepLargeHeapBlockList, 
pUnknown1,pDisposeLargeHeapBlockList list.
this->SweepLargeHeapBlockList(pRecyclerSweep,pNewLargeHeapBlockList );
this->SweepLargeHeapBlockList(pRecyclerSweep,pSweepLargeHeapBlockList );
this->SweepLargeHeapBlockList(pRecyclerSweep,pUnknown1 );
this->SweepLargeHeapBlockList(pRecyclerSweep,pDisposeLargeHeapBlockList );
}
LargeHeapBucket::Sweep
LargeHeapBucket
LargeHeapBucket
0x0c    pSweepLargeHeapBlockList
0x10    pNewLargeHeapBlockList
0x14    pUnknown1
0x18    pDisposeLargeHeapBlockList
0x1c    pPendingLargeHeapBlockList
SweepLargeHeapBlock
LargeHeapBlock::Sweep
• Return status
– 0: no object marked
– 1 : partial object marked
– 2 : all object marked
– 3:  never come here
– 4: some pending heapblock
LargeHeapBlock::Sweep
•
calculation markcount
LargeHeapBlock::Sweep
int LargeHeapBlock::Sweep( )
{
int result;
//Calculate marked object number in the LargeHeapBlock
int markCount = this->GetMarkCount( );
//markcount==0 && this->sweepFlag==0, return zero, It indicates that the memory 
in the largeheapBlock can be released
if( markCount ==0 && this->sweepFlag==0)
{
Recycler::EventWriteFreeMemoryBlock( );
result = 0;
}
else
{
//some object alloc from LargeHeapblock need sweep.
if( markCount != this->allocblockcount)
{
this->SweepObjects()
}
if( this->pDisposeObjectList) //largeheapblock->0x3c 
result = 3;
else
{
//have reuse heap object, return 1.
if( (this->blockCapacity != this->allocblockcount
&& this->endAddress-
this->allocAddress >=0x400) || this->pFreeHeapObject!=0)
{
result = 1;
}
else
//all object marked, return 2.
result = 2;
}
}
calculation markcount
for( i=0;i
int LargeHeapBlock::SweepObjects(Recycler* pRecycler )
{
flag = this->0x54;
if (flag)
{
pAllocBlockAddressArray = this->allocBlockAddressArray;
int index = 0;
//do{}while{} get each object alloc from the LargeHeapBlock, check the object status,if unmark, sweep 
the object.
do
{
tempAllocAddress = *pAllocBlockAddressArray;
//check the tempAllocAddress is valid
if( (tempAllocAddress & 1) ==0 && tempAllocAddress )
{
//get the tempAllocAddress
index in m_pL2MapChunkArray
int first_index = (tempAllocAddress + 0x10) >> 20;
L2MapChunk* pL2MapChunk = pRecycler->m_pL2MapChunkArray[ first_index];
//if tempAllocAddress not marked, sweep the object.
if(!tempAllocAddress mark in pL2MapChunk->m_markbitmaptable)
{
LargeObjectHeader* pLargeObjectHeader =(LargeObjectHeader*) tempAllocAddress;
blockSize = pLargeObjectHeader->blocksizes;
this->SweepObject( pRecycler,tempAllocAddress );
//if LargeHeapBlock::pLargeHeapBucket not null, link the object into pFreeHeapObject.
if( this->pLargeHeapBucket)
{
pFreeHeapObject = this->pFreeHeapObject;
pLargeObjectHeader->index = index;
pLargeObjectHeader->pLargeHeapBlock = this;
pLargeObjectHeader->blocksize = blockSize;
pLargeObjectHeader->pNextFreeHeapObject = pFreeHeapObject;
this->pFreeHeapObject = tempAllocAddress;
}
}
free largeobject list
LargeObjectHeader( free)
0x00    index
0x04    blocksizes
0x08    pLargeHeapBlock
0x0c    pNextFreeHeapObject
LargeHeapBlock
0x4c    pFreeHeapObject
LargeObjectHeader( free)
0x00    index
0x04    blocksizes
0x08    pLargeHeapBlock
0x0c    pNextFreeHeapObject
Prevent the UAF'S exploit
Weakness of MemGC
• Conservative GC
• Interior Pointer
• Cross-reference in different heap
• MemGC heap metadata
Conservative GC
• MemoryProtection weakness: bypass ASLR
• Yuange find the jscript9 GC infoleak
vulnerability. Ga1ois first finish the poc on 
IE11.
Interior Pointer
beginaddress
Interioraddress
Chakra GC Interior Pointer
• Interior Address >0x10000
• Interior Address & 0x0f ==0
• GetHeapBlock !=null
• Mark
• invalidBitsData
• can UAF
MemGC Interior Pointer
• Interior Address >0x10000
• GetHeapBlock !=null
• Mark
– Realaddress
=SmallHeapBlock::GetRealAddressFormInterio
• validPointersBuffer
– realaddress=LargeHeapBlock::GetRealAddressFormInt
erior
• May be memory leak
Cross-reference in different heap
• CVE-2015-2425 UAF
• FREE OBJECT IN  CustomHeap::Heap
• reuse object in chakra GC Heap
Chakra GC
CustomHeap::Heap
MemGC heap metadata
• LargeHeapBlock::pFreeHeapObject
– LargeobjectHeader
• SmallHeapBlock::pFreeHeapObject
• LargeHeapBlock::pPrevFreeList
• LargeHeapBlock::pNextFreeList
Thank you!
Any question?