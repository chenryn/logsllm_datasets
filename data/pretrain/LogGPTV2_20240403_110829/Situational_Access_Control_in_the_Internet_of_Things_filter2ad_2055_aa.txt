title:Situational Access Control in the Internet of Things
author:Roei Schuster and
Vitaly Shmatikov and
Eran Tromer
Situational Access Control in the Internet of Things
Roei Schuster
Eran Tromer
Tel Aviv University
Tel Aviv University
Columbia University
PI:EMAIL
Vitaly Shmatikov
PI:EMAIL
PI:EMAIL
Cornell Tech
Cornell Tech
ABSTRACT
Access control in the Internet of Things (IoT) often depends on a sit-
uation—for example, “the user is at home”—that can only be tracked
using multiple devices. In contrast to the (well-studied) smartphone
frameworks, enforcement of situational constraints in the IoT poses
new challenges because access control is fundamentally decentral-
ized. It takes place in multiple independent frameworks, subjects
are often external to the enforcement system, and situation tracking
requires cross-framework interaction and permissioning.
Existing IoT frameworks entangle access-control enforcement
and situation tracking. This results in overprivileged, redundant,
inconsistent, and inflexible implementations.
We design and implement a new approach to IoT access control.
Our key innovation is to introduce “environmental situation oracles”
(ESOs) as first-class objects in the IoT ecosystem. An ESO encapsu-
lates the implementation of how a situation is sensed, inferred, or
actuated. IoT access-control frameworks can use ESOs to enforce
situational constraints, but ESOs and frameworks remain oblivious
to each other’s implementation details. A single ESO can be used
by multiple access-control frameworks across the ecosystem. This
reduces inefficiency, supports consistent enforcement of common
policies, and—because ESOs encapsulate sensitive device-access
rights—reduces overprivileging.
ESOs can be deployed at any layer of the IoT software stack
where access control is applied. We implemented prototype ESOs
for the IoT resource layer, based on the IoTivity framework, and
for the IoT Web services, based on the Passport middleware.
CCS CONCEPTS
• Security and privacy → Access control; Mobile platform
security; Web application security;
KEYWORDS
Access control; Internet of Things
ACM Reference Format:
Roei Schuster, Vitaly Shmatikov, and Eran Tromer. 2018. Situational Access
Control in the Internet of Things. In 2018 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’18), October 15–19, 2018, Toronto,
ON, Canada. ACM, New York, NY, USA, 18 pages. https://doi.org/10.1145/
3243734.3243817
Permission to make digital or hard copies of all or part of this work for personal or 
classroom use is granted without fee provided that copies are not made or distributed 
for profit or commercial advantage and that copies bear this notice and the full citation 
on the first page. Copyrights for components of this work owned by others than the 
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or 
republish, to post on servers or to redistribute to lists, requires prior specific permission 
and/or a fee. Request permissions from permissions@acm.org.
CCS '18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM. 
ACM ISBN 978-1-4503-5693-0/18/10. . . $15.00
https://doi.org/10.1145/3243734.3243817
1 INTRODUCTION
The IoT (Internet of Things) refers to “smart” devices whose opera-
tion is governed by hardware and software controllers that com-
municate with each other and with Internet-based services. The
IoT ecosystem includes physical devices (in particular, sensors and
actuators) and software applications in industrial, medical, civic,
and other settings. We focus on the consumer “smart home” devices
such as thermostats, light bulbs, door locks, and smoke detectors.
A quarter of U.S. homes already have at least one such device, and
their prevalence is projected to grow [61].
Open-source and proprietary platforms and frameworks such
as IoTivity, Nest, and SmartThings enable communication and in-
tegration among the “smart home” devices, as well as access by
third-party apps. Devices such as door locks and surveillance cam-
eras are responsible for privacy-sensitive or safety-critical function-
ality, thus any IoT framework must enforce device-to-device and
app-to-device access control.
Classic access-control lists (ACLs) specify an action, a subject, an
object, and the “approve or deny” decision. They are not expressive
enough for the IoT, where access-control decisions often depend
on the situation, context,1 or state of the world [35, 41, 68].
1.1 Situational access control
Using situational conditions in access-control policies is a well-
known approach in smartphone frameworks that predate IoT. For
example, Android has a “work mode” that can be switched on
by the user [63]. Starting from version 6.0, app permissions are
requested (and can be revoked) dynamically to provide the user with
“increased situational context” of permission use [19]. iOS apps must
explicitly request a permission to access location “when the user is
not interacting with the app” [62]. More generic situational access
control has been often proposed for mobile OSes [9, 16, 46, 56, 72].
Many IoT frameworks track situations that are relevant to com-
mon access-control policies. For example, Nest and SmartThings
track the location of the user’s phone to infer whether the user is at
home; Sen.se Mother, Nest, and Ecobee can also use special sensors
for this purpose. SmartThings includes a “night time” indicator,
updated either by scheduled routines or by the user. Amazon Echo
and Google Home use “wake word” monitoring to detect when a
user intends to issue a voice command.
1The word “context” has been overloaded and misused in the access-control literature,
often appealing to Nissenbaum’s theory of contextual integrity [48] to justify any
external condition in the policies, including the state of another device (e.g., “turn
on the camera if the motion detector has been activated”) or even the call stack of
the current function. These technical factors do not define social norms that govern
information flow and thus have little to do with contextual integrity in Nissenbaum’s
sense. To avoid confusion, we use the term situation to refer to the environmental
conditions that must be considered when making access-control decisions.
Consider GetSafe and similar mobile apps that enable users to
view feeds from home security cameras on their smartphones. Get-
Safe can work with the Nest Cam indoor camera but requires per-
mission from the Nest service to access it. It can also record without
the user’s direct involvement, e.g., when a possible burglary is de-
tected. Since the app’s primary purpose is home monitoring when
the user is away, its right to access the camera should be conditioned
on the “user is not at home” situation.
IoT and smartphone frame-
IoT vs. smartphone frameworks.
works have much in common: both control and use multiple sensors
and actuators, are event-driven, have similar API access patterns,
and expose sensitive data and operations to third-party apps. These
superficial similarities motivate IoT access-control architectures
that work the same way as in mobile OSes, with centralized refer-
ence monitors that collect all relevant situational information and
make access-control decisions [11, 29, 41, 68, 71].
The critical distinction between the IoT and mobile OSes is
that access control in the IoT is fundamentally decentral-
ized. First, it is performed by multiple, heterogeneous frameworks
with different hardware and software stacks. Second, tracking IoT-
relevant situations involves interrogating (and possibly actuating)
multiple devices, sensors, apps, and APIs that are not governed by
the same access-control framework and require sensitive privileges.
For example, inferring if the user is at home involves obtaining GPS
coordinates from their smartphone and thus the ability to track
the user wherever they go. Third, apps, the subjects of access con-
trol, are often standalone services external to the framework (e.g.,
GetSafe is separate from Nest but can use its API).
In a decentralized environment where multiple frameworks en-
force situational access control, situation tracking should be en-
capsulated by a global interface to ensure uniform, consistent se-
mantics and segregated so that its access privileges are not shared
with the frameworks that use it.
In today’s IoT, situations
Inadequacy of existing approaches.
are neither encapsulated, nor segregated. Instead, they are defined
in terms of the access-control system’s own information and ca-
pabilities: the embedded or available devices, user-provided con-
figurations, and/or the execution state (open UI dialogs, method
call stack, etc.) of the subject (e.g., an app) requesting access. Both
research [41, 68, 72, 73] and commercial frameworks implement sit-
uation tracking as a part of the access-control system itself, coupling
them so tightly that the abstract situation semantics are entangled
with the low-level implementation details. For example, Nest does
not have an explicit “the user is at home” condition, even though
this is a common situational constraint. Instead, Nest policies inter-
pret “the GPS coordinates of the user’s smartphone and/or deployed
Nest sensors indicate that the user is at a predefined ‘home’ location”
as equivalent to “the user is at home.” Overprivileged access to the
user’s smartphone is thus incorporated directly into the framework.
In Section 2, we explain how in addition to overprivileging, the
lack of encapsulation and segregation leads to redundant and in-
consistent implementations of the same functionality and forces
the implementors of access control to include low-level code for
communicating with other devices and interpreting their responses.
A natural solution is to separate situation tracking from the
access-control policies [9, 49] by introducing dedicated situation
trackers, each tasked with determining if a certain situational pred-
icate (e.g., “the user is at home”) is currently true. Prior appified
environments used this idea only in centralized settings where the
tracker has the same rights and capabilities as the access-control sys-
tem it serves, and the interface between them is platform-specific.
The former again results in overprivileging, while the latter pre-
vents the reuse and interoperability of situation trackers across
frameworks. This is a problem because, as we show in Section 2,
a few common situations are responsible for the lion’s share of
situational constraints in real-world access-control policies.
As the semantics of situational constraints become more com-
plex—for example, if they involve fusion of information from multi-
ple sensors or machine learning [35]—it will be increasingly difficult
to continue treating IoT access control as just another version of
centralized mobile-OS access control.
1.2 Environmental Situation Oracles (ESOs)
We propose, design, and implement ESOs, situation trackers that
operate at the level of the IoT ecosystem and are thus fully external
to the access-control monitors. They expose a simple interface that
access-control monitors can use to determine whether the situation
is true or not. Figure 1.1 illustrates the difference between our
approach and prior, centralized ones.
Like services and app frameworks, ESOs are independent units
that can be directly added to and removed from the IoT ecosystem.
ESOs can be explicitly incorporated into access-control policies in
a manner similar to conventional permissions. A policy can specify
that a subject has access to an object only if a specific situation is
currently true. These constraints are visible to users and developers.
Advantages of ESOs in IoT. First, ESOs separate policy and imple-
mentation, thus enabling two-way obliviousness between access-
control policies and situation trackers. A single ESO can serve mul-
tiple policies from different frameworks. Because policies depend
only on the ESO’s abstract interface and their reference monitors
are oblivious of the details of the ESO’s implementation, this helps
ensure consistent semantics and eliminate redundancies. For exam-
ple, all monitors for enforcing “allow access only if the user is at
home” no longer need to query the user’s phone for geolocation.
Second, ESOs encapsulate access rights needed to access other
devices for the purposes of tracking a given situation (e.g., obtain
geolocation from the user’s phone). ESOs thus act as declassifiers
and help enforce the principle of least privilege. Reference mon-
itors have access only to the abstract predicate representing the
situation (e.g., “the user is at home”) but not to the raw data from
which this situation was inferred.
Finally, an IoT framework can support multiple ESOs for the
same situation that have different semantics but expose the same
API to clients. This allows developers and users to easily substitute
ESOs without changing the policy and the reference monitor.
Implementation and case studies. Our ESO design makes mini-
mal assumptions about access-control systems and is thus compati-
ble with the various frameworks at any layer of the IoT stack.
We define the connectivity and communication protocols that
ESOs must support for compatibility with the existing IoT envi-
ronments. We then prototype and evaluate our approach in two
different open-source frameworks representing the opposite ends
(a) Centralized approach: access control is coupled with situation tracking
(b) Our approach: ESOs separate policy and implementation
Figure 1.1: Situation tracking in access-control frameworks: centralized approach vs. our ESO-based approach
of the IoT stack: (1) IoTivity implementation of the OCF standard,
and (2) Passport authorization library for Node.js. IoTivity runs on
low-performance embedded devices and performs access control
locally in the home network, while Node.js libraries typically run
on Internet servers and mediate server-to-server communication.
The main components of ESO-enabled situational access control are
isomorphic in both implementations. Implementing ESOs in either
layer is straightforward: hundreds of C LOCs in IoTivity, dozens of
JavaScript LOCs in Passport. As case studies, we implement an ESO
for tracking whether the user is at home and an ESO for logging
all device accesses to a Google spreadsheet.
2 INADEQUACIES OF IOT ACCESS CONTROL
Explicit and implicit dependence on environmental situations is
ubiquitous in the IoT access-control policies. For example, “the
user is at home” is a very common policy constraint, supported by
SmartThings, Nest, Ecobee, Wink, Apple HomeKit, Sen.se Mother,
Abode, Netatmo, and Honeywell. IFTTT, a popular Web service that
lets users integrate other services, including IoT frameworks, via
simple “if trigger then action” recipes—confusingly called applets
in IFTTT—provides built-in support for the “user enters an area”
trigger. In the 15,000 recipes we collected from IFTTT (see Appen-
dix A.4), “user enters an area” and “user leaves an area” are among
the top three most common triggers and are typically configured
to fire on home/away state changes.
As explained in Section 1, existing IoT frameworks track situa-
tions directly as part of the access-control logic. We now survey
the negative effects of this policy-implementation entanglement.
2.1 Overprivileging and privacy violations
Tracking environmental situations directly as part of the access-
control logic causes overprivileging in IoT apps and frameworks.
To track whether the user is at home or away, both SmartThings
and Nest rely on access to the smartphone GPS coordinates and
other location sensors. This information is much more sensitive
than the simple “home or away?” predicate. As a consequence, IoT
apps and frameworks can persistently track the user wherever he
goes, even outside the home where they are deployed. Furthermore,
these privileges are redundant. If the user installs devices from
multiple vendors in his home, all of them gain the ability to track
his location anywhere in the world. The user’s location is then
disclosed to multiple potentially buggy or vulnerable apps, some of
which may also have overly permissive data sharing policies.
2.2 Inability to enforce common policies
“Allow access but notify the user.” Many users configure their
IFTTT recipes to notify them about sensitive operations, e.g., when