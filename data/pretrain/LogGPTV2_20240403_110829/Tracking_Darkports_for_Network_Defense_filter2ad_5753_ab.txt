mised systems [2]. Simple scanning worms propagate by
indiscriminately probing the Internet as rapidly as possible
to locate and infect vulnerable systems. Scans from auto-
rooters and scanning worms can usually be attributed to the
true source as the scans themselves are the ﬁrst stage of the
actual exploit attempt (e.g. a response, from the target, to
a TCP SYN connection request will start the exploit in the
same session).
In contrast to such indiscriminate scanning, skilled adver-
saries will go to considerable lengths to mask their activities.
Numerous sophisticated scanning techniques allow stealthy,
focused scanning of a predetermined target (host and/or net-
work); some of these make attribution to the scanning source
impractical, rendering most current scanning detection tech-
niques ineffective. The following techniques belong to this
category.
Slow scanning activity against a network or host can be
spread out over days or weeks. Over time, these scans will
simply be lost in the network noise, never exceeding scan-
ning detection thresholds (i.e. being outside of the allocated
detection system state).
Indirect scanning occurs when an attacker uses one sys-
tem (or systems) to scan a target and another system to at-
tack the target. This separation defeats attribution attempts.
If the scanning activity from the scanning system is detected
(e.g. blocked at a network router, or by system administrator
intervention), the attacker simply uses another scanning sys-
tem. A slightly more sophisticated variation uses throw-away
scanning systems, i.e. previously compromised systems that
have little value to an attacker other than being able to pro-
vide a disposable platform. Any scanning activity traced
back to the source, will be attributed to the owner of the com-
promised system.
Distributed scanning occurs when multiple systems act in
unison using a divide and conquer strategy to scan a network
or host of interest. Typically, one system will act as a central
node and collect the scanning results from all participating
systems. Distributing the scanning activity reduces the scan-
ning footprint from any single system and thus reduces the
likelihood of detection. An extreme version of distributed
scanning involves an attacker using a botnet to scan a target
in a coordinated manner resulting in very stealthy scans. A
relatively small botnet of a few thousand systems can be used
to scan thousands of ports or hosts with only a single packet
sent from each bot.
USE OF EXPOSURE MAPS FOR SCANNING DETEC-
TION. A vetted NEM is constructed as previously described.
A connection attempt to any port-IP combination not present
in the vetted NEM (i.e. a darkport or darkspace) is deﬁned as
an atomic scan event. The 5-tuple (source IP, destination IP,
destination port, protocol,3 timestamp) of any atomic scan
events is recorded for further analysis to secondary storage
(hard disk) in the scanning activity log ﬁle. This approach
requires only that the NEM information be maintained in sys-
tem detection state (not the darkports or external connection
requests), thus allowing detection of even very slow or dis-
tributed scans, using only a small amount of main memory
(see Section 6). In contrast to most scanning detection tech-
niques that rely on the identiﬁcation and correlation of exter-
nal connection events to detect scans, we thus do not require
strategies like reducing the detection time window in which
connection events are tracked or timeouts, to accommodate
network trafﬁc ﬂuctuations. Each atomic scan event can re-
sult in one of three possible outcomes: (1) a probe directed
against a darkspace address, (2) a probe against a darkport
(note: such a host has a HEM), or (3) a probe sent to a host
on an active port (an entry in the NEM).
Unlike most attribution-based scanning detection tech-
niques, the scanning detection approach does not rely on
identiﬁcation of the scanning source to detect scans against a
network. Thus, it can detect certain classes of sophisticated
scanning techniques that make determining the root cause of
the scanning activity impractical. However, this approach
does not preclude us from the use of some form of attribu-
tion post scan detection. Scanning worm propagation and
autorooters are two prevalent examples of scanning activities
where immediately denying the scanning source access to the
network is both relevant and important. In these cases, a suc-
cessful scan (i.e. one triggering a response from a host) typi-
cally leads to an immediate attack from the scanning systems
(see Section 5.2). Other post scan detection activities may in-
clude the use of heuristics to classify atomic scan events into
their respective scanning campaigns. An example of such a
heuristic is given in Section 5.1.2 to identify and correlate
the atomic scan events that comprise a distributed scan.
3.2 Automated Response using Exposure
Maps
Exposure maps can be used in an automated response ap-
plication as follows. When a new connection request is ob-
served, the destination IP address and port are compared with
the vetted NEM to determine if there is a match (see Figure
1). If there is no match to an entry in the NEM, the connec-
tion is considered a scan and the source IP address is added
as an element in a scanners list (implemented e.g., using a
3Here, the protocol is TCP.
hash table). The 5-tuple (as in Section 3.1) that characterizes
the connection attempt is then recorded as an atomic scan
event in the scanning activity log ﬁle.
On the other hand if there is a match, the source IP is
checked against the scanners list. If the source IP address
matches an entry in the list, the 5-tuple that characterizes
this connection attempt is recorded and connection should be
dropped as this entity has previously undertaken reconnais-
sance activity against the network. Our implementation is
passive and only produces alerts that could enable some form
of containment (e.g. ACL change), but does not actually do
the latter; one option would be to integrate this application on
a network device capable of performing containment such as
a ﬁrewall. If the source IP address does not match an entry in
the scanners list, the connection is permitted; the entity has
no previous history of scanning activity and is connecting to
a valid offered service.
Figure 1. Exposure Map Automated Response
Logic.
The vetted NEM provides context to determine if an in-
coming connection request is part of a scanning campaign
and whether it will likely elicit a response. This information
provides us with the precision to limit containment to (e.g.
automatically block) only those scanning systems targeting
services offered by the network (see Section 5.2). Contain-
ment could alternately be performed using a number of net-
work devices including ﬁrewalls, routers, or intrusion pre-
vention systems using current scanning detection techniques.
However, given the prevalence of scanning activity, frequent
dynamic updates to these core network devices would be
required in order to stop attacks in real-time, and would
pose a number of challenges. For instance, Bobyshev et al.
[4] have shown that the size of access control lists (ACLs)
and the frequency of dynamic updates can signiﬁcantly im-
pact router CPU utilization and forwarding capabilities. Fur-
thermore, the addition of multiple blocking rules may make
ACLs and conﬁguration ﬁles cumbersome and hard to vet by
network personnel. In fact, frequent conﬁguration changes to
these network devices may actually decrease the overall se-
curity posture of the network over time [32]. Our technique
allows a precise active response option to be taken exclu-
sively against the most critical known threats to the network
namely, those scanning systems targeting services offered by
the network. Scanning systems trying to access services not
offered by the network are noted (i.e. in the scanning activity
log and the scanners list) but no action is needed or taken to
block the connection.
Our analysis on a four-week network data set reveals a
majority of scanning attempts directed against services not
offered by the network. In the instances when the scanning
was directed against a service offered by the network, an at-
tack usually followed (see Table 4 and discussion in Section
5.2). Thus, our approach can signiﬁcantly reduce the fre-
quency and number of updates to the ACLs of network secu-
rity devices while providing a measured and robust security
response to real-time threats.
4 Evaluation: Dataset and Methodology
5.1.1 Scanning Detection Comparison with Snort
We compared scanning detection results with Snort on the
CCSL network dataset. We used a one-day training period
to construct the NEM; it stabilized within the ﬁrst 20 hours
of network trafﬁc. Snort’s preprocessor, sfPortscan [21],
performs port scanning detection and allows operations on
decoded packets before they are sent on to the Snort de-
tection engine. sfPortscan provides the capability to detect
TCP, UDP, and ICMP scanning; its sensitivity is set using
the sense level parameter (low, medium, or high). We fo-
cused on TCP scans at sense level high. Three types of scans
were detected by Snort in the CCSL dataset: 1) portscans
(single host scans multiple ports on a single host); 2) dis-
tributed portscans (multiple hosts scan multiple ports on a
single host); and 3) portsweeps (single host scans a single
port on multiple hosts).
Table 1. Details about NEM for CCSL network.
Host
10.0.0.1
10.0.0.2
10.0.0.3
TCP Ports
25, 631, 993
22, 80, 443
22
Description
SMTP/IPP/IMAP
SSH/HTTP/SSL
SSH
To evaluate how darkport observation can be applied, we
developed and tested a software implementation. The soft-
ware is installed on a commodity PC connected to the net-
work by a 10/100 network interface card.
CCSL DATASET. The CCSL network is a small univer-
sity research network of 62 Internet reachable addresses con-
nected to a university Internet accessible Class B network.
All systems access the Internet through a ﬁrewall not per-
mitting inbound connections unless initiated by an internal
system. The CCSL dataset consists of four weeks (Septem-
ber 2006) of network trafﬁc collected in pcap ﬁles in front of
the network ﬁrewall.
EVALUATION METHODOLOGY. We tested scanning de-
tection and selected automated response capabilities on the
CCSL network dataset; its network boundaries are known,
allowing the NEM to be validated against a known network
security policy. Additionally, having access to the full net-
work traces, post scan detection analysis was possible to con-
ﬁrm our experimental results when comparing actual scan-
ning detection capability with Snort.
5 Evaluation Results
We tested the ability of exposure maps to perform scan-
ning detection by performing a side-by-side comparison with
Snort [22]. We then show how exposure maps can be used
to detect sophisticated scanning activity and analyze the ef-
fectiveness of using the exposure map scanning detection ca-
pabilities to perform a real-time ﬁne-grained automatic re-
sponse to attacks.
5.1 Results: Scanning Detection
As discussed, the CCSL network dataset has a NEM com-
prised of three HEMs (see Table 1). Two of these have three
active ports; the third has one active port. The NEM thus has
in total seven port/IP entries.
The implementation detected 740 885 atomic TCP con-
nection events (scans). The upper bound on the possible TCP
scanning footprint is E = 62 ∗ 216. The actual scanning
footprint we detected was A = 2 342 unique TCP port/IP
combinations (including all seven entries in the NEM). With
26 live systems in the network, the number of darkports is
DP = 26 ∗ 216 − 7 (the seven entries in the NEM are ex-
cluded). To compare exposure maps with Snort, we applied
Snort’s scan deﬁnitions to group the scans4 we detected.
Snort detects scans by counting RST packets from each
perceived target during a predetermined timeout interval
[13]. Before declaring a scan, 5 events (i.e. RST packets) are
required from a given target within a window. The sliding
timeout window varies from 60 to 600 seconds by sensitivity
level; at the highest level, an alert will be generated if the
5 events are observed within 600 seconds. Exposure maps
do not employ a timeout window; the 5-tuple of atomic scan
events are simply recorded and stored, whereafter a number
of heuristics can be used to classify the scans detected (see
Section 5.1.2). On the other hand, Snort does not require a
training period.
Table 2 summarizes the results. Snort detected a total of
8 052 scans initiated by 322 unique scanning systems, while
the NEM detected 8 513 scans initiated by 813 unique scan-
ning systems – all of the 8 052 scans detected by Snort, and
an additional 461 scans initiated by 461 unique systems not
identiﬁed by Snort. These are denoted other scans in Ta-
ble 2; they encompass a variety of scanning techniques not
4Recall that a scan is deﬁned by the NEM as an atomic TCP connection
attempt.
Table 2. Scanning Detection Comparison.
“+n” are scans that are false positives.
Port Scans
Distributed Port Scans
PortSweeps
Other Scans
False Positives (total)
False Negatives
Unique Scanners
Snort Exposure
Maps
127
54
7871
461
0
0
813
127+1
54+14
7871+42
0
57
461
322
included in the sfPortscan scanning deﬁnitions, e.g., scans
from a single host to a single port on a single host, slow
scans with scan intervals of greater than 15 minutes, and a
single host scanning multiple ports on multiple hosts. In the
next section, we discuss in detail some heuristics used to de-
tect distributed scans. 57 of the scans Snort detected were
false positives, the majority caused by legitimate RST pack-
ets traversing the network. At the high sense level, a moder-
ate amount of false positives are expected by normal network