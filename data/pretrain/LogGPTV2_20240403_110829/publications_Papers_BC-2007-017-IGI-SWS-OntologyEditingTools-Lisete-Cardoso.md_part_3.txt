11
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
or later to run (1.4.0 or later is strongly recommended), Jena 1.2 (or later), GraphViz
1.8.x, Xerces 1.4.x, as well as GraphViz
(http://www.w3.org/2001/11/IsaViz/Overview.html) for some features. Installation
instructions are available at the editor’s web page
(http://www.w3.org/2001/11/IsaViz/Overview.html).
Ontolingua
The Ontolingua server was the first ontology tool created by the Knowledge Systems
Laboratory at Stanford University. Ontolingua was built to ease the development of
ontologies with a form-based Web interface. Initially the main application inside the
Ontolingua Server was an ontology editor. The Ontology Editor is a tool that supports
distributed, collaborative editing, browsing and creation of Ontolingua ontologies.
Other systems were included in the environment, such as Webster, Open Knowledge
Base Connectivity (OKBC) Server and Ontology merge tool. The Ontolingua Server
ontology editor is also known as the Ontolingua Server frame-editor or even as the
Ontolingua Server.
Figure 7 Ontolingua Editor view.
It is possible to export or import to the following formats: DAML+OIL, Knowledge
Interchange Format (KIF), Open Knowledge Base Connectivity (OKBC), LOOM,
Prolog, Ontolingua, C Language Integrated Production System (CLIPS). It is also
possible to import Classic Ocelot and Protégé knowledge bases, but it is not possible to
export to these formats.
If an ontology is available in the Ontolingua Server, there are two ways of using it
from an external application: connecting to the OKBC Server from a remote client or
using the ontology editor to translate the ontology into an implementation language.
The Ontolingua Server is organized as a set of ontology related Web applications,
which are built on top of the Ontolingua Knowledge Representation (KR) System.
12
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
Ontolingua uses an OKBC model with full KIF axioms. The base language is
Ontolingua. This language consists of the combination of frames and first order logic,
and allows representing classes. Classes are organized in taxonomies, relations,
functions, formal axioms, and instances. The ontology editor is divided in two frames.
The frame at the top shows the menu with the editing options available to users. The
other frame shows the form to create the new class, where the user must specify the
class name, and optionally the natural language documentation and superclasses of the
concept. After the form is filled, the user must send its description to the server to store
the definition in Ontolingua.
A session can be accessed at http://www.ksl.stanford.edu/software/ontolingua/ by any
user in the group that owns the session. The other users connected to the session will be
notified of the side-effects that are performed. To establish a new group, the user should
use the comment button to email the group name that the user wishes to use along with
an initial list of members. The Ontolingua Server ontology editor permits to manage
users and user groups who can share their ontologies. Users can work in different
sessions and with different groups for each session, and then decide which ontologies
can be shared with the members of each group (Farquhar et al., 1995).These multi-user
sessions encourage collaborative ontology development. Nevertheless, since no locking
mechanisms for ontology terms or version management functions exist in the editor,
collaboration may sometimes be somewhat limited. The user can export an ontology (or
a set of ontologies) as static HTML files to a local site. It is possible to compare
ontologies. The contents of an ontology can be compared with any other loaded
ontology. Users often want to split an ontology into a set of more easily understood,
more tightly focused modules. The server provides direct support for splitting a large
ontology into several smaller ontologies that may include each other. The Ontolingua
Server allows assembling Ontolingua Ontologies, so that ontologies can be built in a
modular way. Users can reuse existing ontologies from a modular structured library.
Ontologies can be reused by inclusion, polymorphic refinement, and restriction. The
primary mechanism for supporting ontology reuse is through the library of ontologies.
This library acts as a central repository for reusable ontologies (Farquhar et al., 1995 ).
The main difference from other editors is the fact that users must have some notions
of KIF and of the Ontolingua language in order to fill in the forms. Hence, if the user
does not have any knowledge of KIF and of the Ontolingua language, the user will not
be able to create an ontology since there is no help menu to build the KIF expression of
an Ontolingua axiom. The interface is not very user friendly since the buttons are large
and primitive and the drawings inside the buttons can sometimes be ambiguous.
There is no need for an installation since this editor has Web access. The user has to
be registered in order to use the system. After being registered the following services
are available: Chimaera, the Ontology Editor and Webster. Chimaera helps users to
reorganize taxonomies and resolve name conflicts in a knowledge-base. It is especially
useful when merging KBs, but also useful as an ontology browser and ontological
sketchpad. The Ontology Editor allows users to browse, create and edit ontologies using
a Web browser. Webster is an online version of the Webster Dictionary, i.e., a
searchable hypertext dictionary.
Altova SemanticWorks™ 2006
Altova SemanticWorks 2006 is a commercial visual Semantic Web editor which
provides powerful, easy-to-use functionality for a visual creation and editing of RDF,
13
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
RDF Schema (RDFS), OWL Lite, OWL DL, and OWL Full documents. This editor has
an intuitive visual interface and drag-and-drop functionalities. It allows users to visually
design Semantic Web instance documents, vocabularies, and ontologies. There is no
evident orientation or methodology associated to this tool.
Figure 8 Semantic Works 2006 view bound to the e-tourism ontology.
This editor has the ability to manage the following files: N-triples, XML, OWL, RDF
and RDFS. This tool provides powerful features for working with RDF in RDFS
vocabularies and OWL ontologies. Users are capable of printing the graphical RDF and
OWL representations to create documentation for Semantic Web implementations. The
user can switch from the graphical RDF/OWL view to the text view to see how
documents are being built in RDF/XML, OWL or N-triples format. The RDF/XML,
OWL or N-triples code is automatically generated based on the user’s design.
Therefore, users can learn and try out with the concepts of the Semantic Web without
having to write complicated code.
The graphical display is highly configurable. The user has the possibility to adjust the
width of the items in the graph, exhibit them with a vertical or horizontal orientation,
adjust the distances between parent and child nodes, and change the font styles and
colors used.
An intelligent right menu and context sensitive entry helpers give support to change or
add details to the RDF resource according to the user choices. The entry helpers and
menus only offer the choices permitted based on the RDF specification, so that users
can be certain to create valid documents. Any conflicts are listed in the error window.
The errors are written as links so that the user can find and repair them promptly and
easily.
A full version of this editor can be installed using a self-contained installer. It is easy
and fast to install. The user has to request a free evaluation key, by giving the following
information: Name, Company name and e-mail. Users can test this editor for a period of
30 days after receiving the key password by e-mail.
14
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
OilEd
OilEd is a graphical ontology editor developed by the University of Manchester for
Description Logic Ontologies (Gómes-Pérez et al., 2004). The main purpose of OilEd is
to provide a tool for ontologies or schemas editing, as opposed to knowledge
acquisition, or the construction of large knowledge base of instances (Laera and
Tamma, 2005). OilEd’s interface was strongly influenced by Stanford’s Protégé toolkit.
The initial intention behind OilEd was to provide a simple editor that demonstrated the
use of, and stimulated interest in, the Ontology Inference Layer (OIL) language.
The current version of OilEd does not provide a full ontology development
environment. OilEd is not capable of supporting the growth of large-scale ontologies,
the migration and integration of ontologies, versioning, argumentation and many other
activities that are involved in ontology construction. Rather, it is the “Notepad” of the
ontology editors, offering enough functionality to allow users to build ontologies and to
demonstrate how the Fast Classification of Terminologies (FaCT) reasoner checks
ontologies for consistency (Laera and Tamma, 2005). OilEd does not follow any
methodology.
OilEd’s internal data format is DAML+OIL (DAML- DARPA Agent Markup
Language; OIL-Ontology Inference Layer). It is possible to import from DAML+OIL
and export ontologies as RDFS, DAML OWL, RDF/XML and others formats.
Figure 7 shows OilEd Editor. The tabs on the main window give access to classes,
properties, individuals and axioms. In each tab, a list on the left sides illustrates all the
items. On the right panel there is the editor. This editor is used to see or to change the
information concerning the entry selected in the item list on the left. The editor was
reimplementated reasoner interface so that it was possible to use the DIG (DL
Implementation Group) protocol. OilEd includes a DAML+OIL checker. Given the
location of an ontology the application checks the syntax of DAML+OIL ontologies and
returns a report of the model.
Figure 9 OilEd Ontology editor view bounded with the class AnomalyDetection.
15
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
OilEd is provided free of charge, but the user has to provide some information before
downloading this editor. Registration is a simple process requiring a valid email
address. The user has to be registered, in order to receive a password to revisit the main
Web page to download patches and extensions when necessary.
In order to use OWL ontologies, the user must download the sesame-oil.jar library,
place it in the /lib directory of the user’s installation and remove the existing oil.jar.
Sesame is a repository for OWL ontologies. This will add new options to the menus to
open and save to Sesame repositories. OilEd expects that these Sesame repositories
contain OWL files (rather than, say, DAML+OIL). This only happens since the
ontologies are stored in Sesame repositories
The OilEd user manual is included in the distribution which is available as an open-
source project under the GPL license. The latest version of OilEd (version 3.5) can be
download at http://OilEd.man.ac.uk/. Additionally, Angus Roberts has produced a brief
tutorial introduction to OilEd. The following sample ontologies produced using OilEd
are available:
• Knowledge Acquisition: The (KA)2 demo ontology from the Ontobroker
project.
• Wines: Deborah McGuinness’ DAML+OIL wines ontology.
• Diving: An ontology of terms from scuba diving.
• Mad Cows: An ontology demonstrating the use of the reasoner to spot
inconsistent concepts.
There are several possible packages for installation. OilEd comes packaged with the
FaCT reasoner, although alternative reasoners can be used. OilEd 3.5.7
(Windows)+reasoner. This archive contains a FaCT reasoner for Windows. OilEd 3.5.7
(Linux)+reasoner. This updated version supports export information knowledge base
models to OWL-RDF. This archive also contains the FaCT reasoner. OilEd 3.5.7 (no
reasoner). This archive does not contain a reasoner. Use this distribution only if you are
not interested in using a reasoner or wish to use OilEd with an alternative DIG reasoner.
WebODE
WebODE has been developed by the Ontological Engineering Group (OEG) from the
Artificial Intelligence Department of the Computer Science Faculty (FI) from the
Technical University of Madrid (UPM). WebODE is an ontological engineering
workbench that provides various ontology related services (Laera and Tamma, 2005). It
provides support to most of the activities involved in the ontology development process
and ontology practice such as ontology edition, navigation, documentation, merge,
reasoning, etc.
The WebODE ontology editor is a Web application. It was build on top of the
ontology access service (ODE API).
16
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
Figure 10 Architecture of the WebODE platform
The WebODE platform has been built using a three-tier model (illustrated in Figure
7) which include:
1) Presentation Tier;
2) Middle Tier;
3) Database Tier.
The first tier (or presentation tier) provides the user interface. This interface is
provided by means of a Web browser and uses standard Web technologies. The
presentation tier was implemented using HTML (Hyper Text Markup Language), CSS
(Cascading Style Sheets) and XML (Extended Mark-up Language), because these
technologies permit a simple interoperability between applications. Technologies like
JavaScript and Java were used in order to ease the server of the weight of user
validations. JavaScript provides easy and quick form validation. Java allows more
complex presentation and logic schemas like graphical design or formula validation.
The second tier, the middle tier, provides the business logic. This tier is the result of
the combination of two other sub-tiers: presentation sub-tier and logic sub-tier. The
presentation sub-tier is in charge of generating the content to be presented in the user’s
browser. It is also aimed at handling user requests from the client (such as form and
query handling) and forwards them to the ODE service as appropriate. Technologies
such as servlets or JSPs (Java Server Pages) were used for this purpose. The logic sub-
tier provides direct access to ontologies. This direct access is made by means of a well-
defined API supplied through an application server (Minerva Application Server). This
server provides access to services through RMI (Remote Method Invocation) thus
making application development and integration very easy.
The third tier, the database tier, contains the data. Ontologies in WebODE can be