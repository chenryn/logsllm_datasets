### Optimized Text

#### 1. Introduction to Delegation and Access Control
- **Direct and Non-Direct Delegates:**
  - The PDP (Policy Decision Point) must manage access for both direct and non-direct delegates.
  - `Rnon−direct` specifies which subjects the PDP should grant or deny access to.
  - If the PDP fails to verify that a non-direct delegate, X, has at least one non-revoked delegation chain, or if X has only revoked chains, then `Rnon−direct` combines the failure (`⊥`) and false (`f`) into a deny decision using the pattern `(_ (cid:73) f)`.

#### 2. Analysis of PDP Specification S3
- **Non-Compliance with FR2:**
  - Our analysis tool indicates that the PDP specification S3 does not meet FR2.
  - The problem `(¬cdirect) ⇒ S = Rnon−direct` is answered negatively.
  - The tool provides the following PDP input:
    ```plaintext
    I = { owner(piet) ← t;
          piet:delegate(ann) ← t;
          ann:delegate(fred) ← t;
          piet:revoke(ann)@rev ← ⊥;
          ann:revoke(fred)@rev ← f }
    ```
  - In this scenario, Piet is the owner and delegates access to Ann, who further delegates access to Fred.
  - The PDP fails to check whether Piet's delegation to Ann is revoked but successfully checks that Ann has not revoked Fred.
  - The PDP should deny access to Fred because he lacks a non-revoked delegation chain and is not a direct delegate.
  - However, the PDP grants access to Fred, violating FR2.
  - This flaw arises from the preemptive masking of failures, allowing an adversary like Fred to exploit the system by preventing the PDP from checking the revocation status of Piet's delegation to Ann.
  - We confirmed the attack using our BelLog interpreter; see Appendix A for details.

#### 3. Modified Specification S5
- **Meeting FR2:**
  - To address the issue, we modify the specification as follows:
    ```plaintext
    pol(X) ← grant(X) (cid:73)(cid:0)owner(Y ) ∧ Y :delegate(X)∧ (¬Y :revoke(X)@rev)(cid:1)
    grant(X) ← owner(X)
    grant(X) ← grant(Y ) ∧ Y :delegate(X) ∧ (¬Y :revoke(X)@rev)
    ```
  - In the original S3, errors are not propagated through delegation chains.
  - In S5, errors are propagated, ensuring that access is denied to subjects who are not direct delegates and lack a non-revoked chain.
  - The pseudo-code for S5 distinguishes between permissions due to direct delegation and those due to non-revoked chains.

- **Verification:**
  - Our analysis tool confirms that S5 meets FR2 for all PDP inputs in a fixed policy domain with eight constants, taking 149.38 seconds.
  - The tool did not terminate in a reasonable time for larger domains.
  - Domain containment provides weaker security guarantees than general policy containment, as it only applies to the given policy domain.
  - For example, domain policy containment might miss the attack described in our grid example if the policy domain has only two constants, as the adversary must assume the role of a subject delegated access by a direct delegate, which does not exist in a smaller domain.

#### 4. Generic Requirements
- **Error-Freeness:**
  - In addition to specific requirements, one can verify generic security requirements such as error-freeness, ensuring the PDP handles all failures.
  - Let `S` be the PDP specification and `pol(X)` denote the PDP's access decisions.
  - Construct a new specification `R` as follows:
    - Rename the predicate symbol `pol` to `tmp` in `S`'s rules and add these changed rules to `R`.
    - Add the rule `pol(X) ← tmp(X) (cid:73) f` to `R`.
  - Formulate the containment problem as `S = R`.
  - By construction, `R` denies all requests that `S` evaluates to `⊥`. If `S` evaluates a request to `⊥`, then `R` is not equal to `S`; otherwise, `S` is error-free.
  - This method can also verify other atoms in the PDP's specification for error-freeness.

#### 5. Conclusion and Future Work
- **Summary:**
  - Our simulation and verification methods reveal security flaws in PDPs that handle failures incorrectly.
  - Preliminary experiments show that our simulation tool scales well to realistic problems, though runtimes for the analysis tool vary.
  - In the grid example, the analysis tool does not terminate in a reasonable time for a domain with nine constants, while in the web app example, it terminates in less than a minute for domains with thousands of constants.

- **Future Work:**
  - We are currently working on applying our analysis framework to physical access control systems used in industry.
  - Improving the scalability of our analysis tool and extending our system model to multiple communicating PDPs, where PDPs themselves can fail, are future goals.

#### 6. Acknowledgments
- This work was supported in part by the Zurich Information Security and Privacy Center.
- We thank Andreas Häberli and Paul Studerus from KABA AG for their feedback on our system model, and Sasa Radomirovic for his comments on the paper.

#### 7. References
- [References listed as provided in the original text]

#### 8. Appendix
- **Attack on the Grid PDP:**
  - We simulate the attack on the grid PDP module discussed in §5.
  - First, we encode the PDP module in our interpreter using BelLog’s ASCII format:
    ```plaintext
    pol(X) :- owner(X)
    pol(X) :- (pol(Y) ^ grant(Y,X))
    grant(X,Y) :- (delegate(X,Y) ^ ((!revoke(X,Y)@rev) -bot-> owner(X)))
    ```
  - Second, we specify the PDP input produced by our analysis tool in §5.3:
    ```plaintext
    owner(piet) :- true
    delegate(piet,ann) :- true
    delegate(ann,fred) :- true
    revoke(piet,ann)@rev :- bot
    ```
  - Finally, we run the interpreter and verify that the attacker gains access. The PDP grants access to Fred, evaluating `pol(fred)` to true, which does not conform to FR2.