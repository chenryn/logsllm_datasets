·e_shoff：是段头（Section Header）内容在这个文件的偏移值，可以用这个偏移值来定位段头的开始位置，用于解析段头信息。
·e_phnum：是程序头的个数。
·e_shnum：是段头的个数。
·e_shstrndx：是String段在整个段列表中的索引值，用于后面定位String段的位置。
参照图4-1可以很容易解析下面代码：
按照对应的每个字段的字节个数，读取字节就可以了。
3.解析段头信息
每个段头部可以用如下数据结构描述：
这个结构中字段就不做解释了。后面会手动构造这样一个数据结构，到时候再详细说明每个字段含义。
按照这个结构，解析也简单了：
这里需要注意的是，看到的SectionHeader一般都是多个的，所以这里用一个List集合来保存。
4.解析程序头信息
可执行文件或者共享目标文件的程序头部是一个结构数组，每个结构描述了一个段或者系统准备程序执行所必需的其他信息。目标文件的“段”包含一个或者多个“节区”，也就是“段内容”（Segment Contents）。程序头部仅对可执行文件和共享目标文件有意义。可执行目标文件在ELF头部的e_phentsize和e_phnum成员中给出其自身程序头部的大小。
程序头部的数据结构如下：
按照这个结构来进行解析，如下所示：
当然还有其他结构的解析工作，这里就不一一介绍了，因为这些结构在后面的介绍中不会用到，这里只需了解一下。
4.4 验证解析结果
解析工作做完了，为了验证解析工作是否正确，需要给每个结构定义打印函数，也就是重写toString方法即可，如下所示：
然后再使用readelf工具来查看so文件的各个结构内容，对比就可以知道解析是否成功了。
提示：解析代码下载地址：https://github.com/fourbrother/parse_androidso
4.5 本章小结
本章主要介绍了Android中的so文件格式解析内容，了解so文件格式，对应用安全防护和逆向应用都有很重要的意义。比如，现在为了应用的安全，可以对so文件进行加密操作，这就需要对so文件格式有非常深入的了解；在逆向应用的时候，碰到so加固混淆时，可以分析so文件格式来确定哪一块数据结构被加密和防护了，从而更深入地分析问题和解决问题。
第5章 AndroidManifest.xml文件格式解析
本章介绍Android的AndroidManifest.xml文件格式的内容。为什么要介绍这个内容呢？在应用安全防护中，可以利用对应用的AndroidManifest.xml文件做混淆，从而达到安全防护功能，同时在做逆向分析的时候，为了能够反编译成功，有时候必须要了解AndroidManifest.xml文件格式，需要进行文件修复才可行。
5.1 格式分析
首先来脑补一个知识点，Android中的apk程序其实就是一个压缩包，可以用压缩软件进行解压的，如图5-1所示。
图5-1 apk压缩包
可以看到这里有三个文件：AndroidManifest.xml、classes.dex、resources.arsc，这三个文件都非常重要，本章介绍第一个文件，后续两章分析后两个文件。
只要反编译过apk的人都知道apktool工具的工作原理就是解析这三个文件格式。因为Android在编译成apk之后，这个文件有自己的格式，用普通文本格式打开的话是乱码，所以需要解析成能看懂的内容。就像前一章解析so文件一样。
既然编译成apk之后格式变了，那么就说明谷歌给AndroidManifest定义了一种文件格式，只要知道这种格式的话，就可以详细地解析这个文件了，如图5-2所示。
这张图详细解析了AndroidManifest.xml文件的格式，但是光看这张图可能印象不深，所以要结合一个案例来解析一个文件，才能理解透彻。下面就用一个案例来解析一下吧。
随便找一个简单的apk，用压缩文件打开，解压出AndroidManifest.xml就可以了，然后开始读取内容进行解析。
图5-2 Android Mainfest.xml文件格式（见书后彩图）
5.2 格式解析
通过前一节的格式分析，大致知道了编译之后的AndroidManifest.xml文件格式，本节通过代码案例来详细解析文件中的各个模块。
5.2.1 解析头部信息
任何一个文件格式都会有头部信息，而且头部信息也很重要，同时，头部一般都有固定格式头部信息还有以下这些字段信息：
1）文件魔数：四个字节。
2）文件大小：四个字节。
下面就开始解析所有的字段Chunk内容了，其实每个Chunk的内容都有一个相似点，就是头部信息：ChunkType（四个字节）和ChunkSize（四个字节）。
5.2.2 解析String Chunk
String Chunk主要用于存放AndroidManifest文件中所有的字符串信息，如图5-3所示。
说明如下：
·ChunkType：StringChunk的类型，固定四个字节：0x001C0001。
·ChunkSize：StringChunk的大小，四个字节。
·StringCount：StringChunk中字符串的个数，四个字节。
·StyleCount：StringChunk中样式的个数，四个字节，但是在实际解析过程中，这个值一直是0x00000000。
·Unknown：位置区域，四个字节，在解析的过程中，这里需要略过四个字节。
·StringPoolOffset：字符串池的偏移值，四个字节，这个偏移值是相对于StringChunk的头部位置。
·StylePoolOffset：样式池的偏移值，四个字节，这里没有Style，所以这个字段可忽略。
·StringOffsets：每个字符串的偏移值，它的大小应该是StringCount*4个字节。
·SytleOffsets：每个样式的偏移值，它的大小应该是SytleCount*4个字节。
后面就是字符串内容和样式内容了。
图5-3 String Chunk结构
下面介绍代码，由于代码的篇幅有点长，所以这里分段说明。后面会给出整个项目代码下载地址的。
1）首先需要把AndroidManifest.xml文件读入到一个byte数组中：
2）下面来解析头部信息：
按照上面说的格式解析即可：
3）解析StringChunk信息：
这里需要解释几点：
1）在上面的格式说明中，有一个Unknow字段，四个字节，所以需要略过。
2）在解析字符串内容的时候，字符串内容的结束符是0x0000。
3）每个字符串开始的前两个字节是字符串的长度。
有了每个字符串的偏移值和大小，那么解析字符串内容就简单了，如下所示：
可以看到0x000B（高位和低位相反）就是字符串的大小，结尾是0x0000：
一个字符对应的是两个字节，而且这里有一个方法：
逻辑就是过滤空字符串：在C语言中是NULL，在Java语言中就是00，如果不过滤的话，会出现下面的这种情况：
每个字符是宽字符，很难看，其原因是每个字符后面多了一个00，所以过滤之后就可以了，如下所示：
上面解析了AndroidManifest.xml中所有的字符串内容。这里需要用一个全局的字符列表来存储这些字符串的值，后面会用索引来获取这些字符串的值。
5.2.3 解析ResourceId Chunk
ResourceId Chunk主要是用来存放AndroidManifest中用到的系统属性值对应的资源ID，如图5-4所示，比如android：versionCode中的versionCode属性，android是前缀，后面会说到。
图5-4 ResourceId Chunk结构
·ChunkType：ResourceId Chunk的类型，固定四个字节0x00080108。
·ChunkSize：ResourceId Chunk的大小，四个字节。
·ResourceIds：ResourceId的内容，这里大小是ResourceId Chunk大小除以4，减去头部的大小8个字节（ChunkType和ChunkSize）。
解析代码如下：
解析结果如下：
这里解析出来的ID到底是什么呢？
Android中的ID值
在写Android程序的时候，都会发现有一个R文件，那里面存放着每个资源对应的ID，那么这些ID值是怎么得到的呢？
Package ID相当于一个命名空间，限定资源的来源。Android系统当前定义了两个资源命令空间，其中一个是系统资源命令空间，其Package ID等于0x01；另外一个是应用程序资源命令空间，其Package ID等于0x7f。所有位于[0x01，0x7f]之间的Package ID都是合法的，而在这个范围之外的都是非法的。前面提到的系统资源包package-export.apk的Package ID就等于0x01，而在应用程序中定义的资源Package ID的值都等于0x7f，这一点可以通过生成的R.java文件来验证。
Type ID是指资源的类型ID。资源的类型有animator、anim、color、drawable、layout、menu、raw、string和xml等若干种，每一种都会被赋予一个ID。
Entry ID是指每一个资源在其所属的资源类型中所出现的次序。注意，不同类型的资源的Entry ID有可能是相同的，但是由于它们的类型不同，仍然可以通过其资源ID区别开来。
关于资源ID的更多描述，以及资源的引用关系，可以参考frameworks/base/libs/utils目录下的README文件。
可以得知系统资源对应ID的XML文件在这里：frameworks\base\core\res\res\values\public.xml，代码如下：
用上面解析到的ID去public.xml文件中查询一下，得到如下结果：
查到了，是versionCode，这个系统资源ID存放的文件public.xml是很重要的，后面在讲解resource.arsc文件格式的时候还会用到。
5.2.4 解析Start Namespace Chunk
这个Chunk主要包含一个AndroidManifest文件中的命令空间的内容，Android中的XML都是采用Schema格式的，所以肯定有Prefix和URI的，如图5-5所示。
图5-5 Start Namespace Chunk
XML格式有两种：DTD和Schema。
说明如下：
·Chunk Type：Chunk的类型，固定四个字节0x00100100。
·Chunk Size：Chunk的大小，四个字节。
·Line Number：在AndroidManifest文件中的行号，四个字节。
·Unknown：未知区域，四个字节。
·Prefix：命名空间的前缀（在字符串中的索引值），比如：android。
·Uri：命名空间的URI（在字符串中的索引值），比如：http://schemas.android.com/apk/res/android。
解析代码如下：
解析的结果如下：
这里的内容就是上面我们解析完String之后对应的字符串索引值。这里需要注意的是，一个XML中可能会有多个命名空间，所以这里用Map存储Prefix和URI对应的关系，后面在解析节点内容的时候会用到。
5.2.5 解析Start Tag Chunk
这个Chunk主要是存放AndroidManifest.xml中的标签信息，是最核心的内容，当然也是最复杂的内容，如图5-6所示。
图5-6 Start Tag Chunk结构
说明如下：