nov_2012.tar.gz
This installs a version of Java that Oracle developed expressly for the Raspberry Pi;
read more about it at the Java.net website: http://is.gd/L8T7fJ.
3. That Java package name is huge, so rename it to make it more manageable:
Click here to view code image
mv jdk-8-ea-b36e-linux-arm-hflt-29_nov_2012.tar.gz jdk.tar.gz
Note: Tab Completion Rocks
I know that I’ve mentioned this before, but it bears repeating: You can double,
triple, or quadruple your Linux command-line navigation if you get into the habit of
pressing Tab after typing the first few characters of a folder or file name. Tab
completion works; it really does!
4. Perform some housekeeping and actually install Java:
Click here to view code image
mkdir -p /opt
sudo tar zxvf jdk.tar.gz /opt
rm jdk.tar.gz
5. Verify you have Java installed:
Click here to view code image
sudo /opt/jdk1.8.0/bin/java –version
6. Cool! With Java installed, you’re halfway home. Let’s now install Spigot:
Click here to view code image
cd
sudo wget http://ci.md-5.net/job/Spigot/lastBuild/artifact/Spigot-Server/target/
spigot.jar
By the time you read this, md-5 will have released a newer build of Spigot. Thus, keep
the website http://is.gd/3nF2tr bookmarked and edit the URL just given to reference the
latest and greatest build.
7. It’s time to start the Minecraft server. Doing so creates the server.properties file from
which you can tweak the server’s behavior.
Click here to view code image
sudo /opt/jdk1.8.0/bin/java -Xms128M -Xmx256M -jar /home/pi/spigot.jar nogui
In this statement, you start the Java virtual machine using a RAM footprint of between
128MB on the low end and 256MB on the high end. The nogui parameter is important
because, of course, you need to run your server as lean and mean as possible to conserve
system resources.
Expect it to take several minutes for the server to fully generate the Minecraft
environment. While the server bootstraps, you see hundreds of lines of output scroll in your
Terminal window. Do not be alarmed.
8. To test the server, start Minecraft from a remote system, click Multiplayer in the splash
screen (Join Game in Minecraft Pi Edition), and select your Raspberry Pi server from
the server list (see Figure 14.6).
FIGURE 14.6 You can connect to our multiplayer server either locally or remotely.
Note: Version Control Again, and Yet Again
If you see the “Server Outdated” error message when you try to connect to the
server from the Minecraft client, you should download the latest version of the Spigot
software. You can keep abreast of version releases at the Spigot website at
http://is.gd/3nF2tr.
9. Double-click the Pi server in the list, and you’re logged in!
Note that if you want to advertise your Minecraft Pi Server to the Internet, you need to configure your
router to forward traffic on Transmission Control Protocol (TCP) port 25565. You can learn how to
configure an internal network device with a public IP address by reading Chapter 15, “Raspberry Pi
Web Server.” You can learn how to configure port forwarding on your router by visiting
PortForward.com (http://is.gd/ttSr5H).
Administering a Minecraft Server
 Minecraft server administration is an art and science unto itself and is therefore far outside the scope
of this book. Nevertheless, I want to give you the core need-to-know information.
 In the Terminal window from which you started the Minecraft server, type help to get a list of
Minecraft server commands.
 A Minecraft server operator is known as an op (pronounced op or oh-pee, and sometimes stylized as
OP). Before you start issuing online commands, however, you should learn how to modify the
Minecraft server configuration file.
 Type stop in the Minecraft Server console to stop the server. Next, open the config file, which is
located by default in your home directory:
Click here to view code image
sudo nano server.properties
The server.properties file consists of simple key/value pairs; the trick is learning what each property
means. I suggest you review the list at the Minecraft Wiki (http://is.gd/awZBsZ).
 Visually, the file isn’t much to look at; it’s just a typical plain text configuration file. For instance,
here are the first few lines of a sample server.properties file:
Click here to view code image
#Minecraft server properties
#Wed May 22 21:15:19 EDT 2013
generator-settings=
allow-nether=true
level-name=world
enable-query=false
Note: Operating a Minecraft Server
In Minecraft server nomenclature, an operator, or OP (oh-PEE, or ohp) is a superuser
who has full control over the entire server. Obviously, you as the server owner should have
OP privileges, but you should be very careful before assigning OP to any other Minecraft
users.
Make your Minecraft user an OP by typing the following command in the server console:
op 
You see this feedback display onscreen directly in your game session. To issue a server command in
the game, precede the command with a slash (/). For instance
/me 
This command sends a status message to all connected players on the server. You can use /tell to send
private messages to individual users. The in-game multiplayer experience is represented in Figure
14.7.
FIGURE 14.7 You can issue player or op commands directly in the game.
If you find the Minecraft server command syntax similar to that of Internet Relay Chat (IRC), then
good for you—that’s exactly what it feels like.
 As an OP, you have godlike control over the server-spawned Minecraft world. For instance, if it’s
nighttime and you want to jump time to dawn, try this from the game:
/time set 0
A time value of 12000 takes you to dusk.
 MinecraftServerHost.net provides a good, comprehensive list of Minecraft player and op server
commands at http://is.gd/ttSr5H. The trusty Minecraft Wiki is also helpful (http://is.gd/ax3Lrr).
Minecraft Plugins
 Finally, we come to the subject of plugins, which are add-ons to the Minecraft server that enable you
to vastly extend your control over the multiplayer gaming environment. Many Minecraft OPs search
for plugins by browsing the Bukkit website at http://is.gd/P6l0Rs. Here is the high-level installation
overview:
 Download the plug-in .JAR file to your server.
 Place the .JAR file in your plugins directory.
 Stop and start the server.
Chapter 15. Raspberry Pi Web Server
A web server is a computer that serves content by using standard Internet protocols. The word
standard is key here because web communications are shared seamlessly across any kind of device,
from desktop computers to video game consoles to tablets and mobile phones.
 Any device that can (a) connect to a local area network or the Internet, and (b) has a web browser or
web-aware application installed makes use of these standard protocols. The content that is served by
a web server consists of the following media types at the very least:
 Web pages: Text that is formatted with hyperlinks, pointers to other content on the same page,
the same website, or a different website (representative file types: .htm, .html, .php, .aspx).
 Images: These can be static or animated pictures of the bitmap or vector variety
(representative file types: .gif, .jpg, .png, .svg).
 Audio: These can be background clips or full songs (representative file types: .mp3, .wav,
.m4a).
 Movies: Video segments of any length, displayed in either standard or high definition
(representative file types: .mov, .mp4).
 Interactions: These can be games, tutorials, simulations, and so forth (representative file
types: .swf, .xap).
 I mentioned that the universality of web servers lies in their use of standard web protocols. What are
these? Well, the first thing to know is that a network protocol is essentially a set of rules or
conventions that allows two computer systems to recognize each other and to meaningfully exchange
data.
 Specifically, web servers are called HTTP servers because they use the Hypertext Transfer Protocol
(HTTP) as their base network protocol. Many other protocols are involved in delivering web content,
of course, including Internet Protocol (IP), Transmission Control Protocol (TCP), and Address
Resolution Protocol (ARP).
Note: Learn More About Protocols
The subject of networking protocols is far too broad and deep to cover thoroughly in
this book. For more information, please check out How the Internet Works by my Que
Publishing colleague Preston Gralla (http://is.gd/WZyOnb). In contrast to the rapid rate of
change with most technologies, the Internet, for the most part, works the same way today as
it did when this book was published in 2006.
Okay, then. Now that we understand a bit about what web servers are, why are they so important to us
as Raspberry Pi hackers?
 To answer that question, think to yourself how often you turn to a web browser to get any particular
electronic task done. You can use a fully-fledged browser such as Internet Explorer or Google
Chrome, or you can use a line-of-business (LOB) application that makes use of web standards to
retrieve content from a web server.
 For instance, you can make your Raspberry Pi a web server to accomplish any of the following goals:
 WordPress blog
 Joomla content management server
 Webcam control center
 Minecraft server
 The list of potential projects that take advantage of an HTTP server goes on and on. The bottom line
is that HTTP is a lightweight and convenient way to present online content, so why not make use of
this wonderful, extensible platform on your Raspberry Pi devices?
What Is the LAMP Stack?
In web development terminology, a protocol stack is a suite of related networking protocols and
technologies that fit together like finger in glove to accomplish particular kinds of work. There was a
time, not too many years ago, when websites were simply static collections of manually created
HTML web pages.
 On the off chance this escaped your notice, I’m here to tell you that static websites have largely gone
the way of the dodo. Nowadays, any web developer or designer worth his or her salt needs
dynamically generated web pages that pull data from a database such as MySQL, Oracle, or
Microsoft SQL Server. These dynamic websites are called data-driven web applications.
 I whipped up a schematic diagram of web communications in Figure 15.1 that I hope makes this
situation clearer.
FIGURE 15.1 The basic elements of web communications
In Linux, the reference standard for an open source web development protocol stack is LAMP. LAMP
in this context is an acronym for
 Linux: This is the base operating system for the web server.
 Apache: This is the world-standard open source HTTP server software.
 MySQL: This is the world-standard semi-open source Structured Query Language (SQL)
relational database management system (RDBMS).
 PHP: This is the world-standard open source web development programming language.
Incidentally, PHP is a strange acronym that stands for Hypertext Pre Processor.
 If all this sounds like Greek to you, don’t get too stressed out, now—I know I am throwing a lot of
technologies and acronyms at you. Let’s just take things one step at a time, and more will become
clear, including how all this relates to your use of the Pi.
Installing Your Web Server
In terms of HTTP Server software, these are the major players in the world as of spring 2013
according to Netcraft (http://is.gd/uIbG30):
 Apache, by the Apache Software Foundation: http://is.gd/x3xZvH
 Internet Information Services (IIS), by Microsoft: http://is.gd/ILyw06
 nginx (pronounced engine ex), by Igor Sysoev: http://is.gd/ydUSGd
 Of the preceding software, only IIS is proprietary. In addition, IIS is the only web server software
that is platform-dependent. By contrast, Apache and nginx have software variants that run on
Windows, OS X, and Linux.
Note: Etymology of Apache
Officially, the name Apache in Apache HTTP Server was chosen out of respect for the
Native American tribe of the same name. Unofficially, some people submit that Apache
stands for “A Patchy,” as in “Apache is continually patched and updated; therefore, it is a
patchy server.”
In this book, we standardize on Apache 2 as our web server of choice for the Raspberry Pi. To that
point, if you’re concerned that Apache might be a bit too heavy for your Raspberry Pi, lighter-weight
Apache 
distributions 
are 
available. 
For 
instance, 
check 
out 
the 
Cherokee 
project
(http://is.gd/IpGFx3). Frankly, I was going to use Cherokee for this chapter, but I don’t feel the
software is quite stable enough to recommend to you yet.
 Lighttpd (pronounced lightly) is another example of a quality, lightweight web server. Visit the
project home page at http://is.gd/pVbk3P.
Task: Installing the LAMP Stack on Raspberry Pi
By setting up your Raspberry Pi as a LAMP-based web platform, you will gain an
intimate understanding of how web servers work under the proverbial hood. If nothing else,
you have some insider information with which you can impress your friends at the bar!
1. Open up a Terminal session and install Apache, PHP, and the library that links the two
technologies together under Linux:
Click here to view code image
sudo apt-get install apache2 php5 libapache2-mod-php5
2. After the installation completes, restart the Apache service (also called daemon,
pronounced dee-mun):
Click here to view code image
sudo service apache2 restart
3. Make sure that the default Home page was created. You can use cat to display text file
contents directly onscreen:
cat /var/www/index.html
If you see some HTML tags show up (for instance, It works!, you are good to
go so far.
4. Type startx to get into LXDE (alternatively, run a remote VNC section as you learned in
Chapter 7, “Networking Raspberry Pi”).
5. Open the Midori browser and navigate to the following URL:
http://localhost
If you see the output displayed in Figure 15.2, congratulations—you successfully
installed Apache 2!
FIGURE 15.2 Ocular proof that the Apache 2 web server is running properly
Task: Verifying PHP Configuration
PHP includes a built-in function called phpinfo() that is useful in determining whether
we set up PHP correctly on our server. Let’s see how it works.
1. Navigate to the default content directory in Apache 2:
1. Navigate to the default content directory in Apache 2:
cd /var/www
2. Create a new text file with an appropriate name:
Click here to view code image
sudo nano phpinformation.php
3. In nano, add the following line:
4. Press Ctrl+X, Y, and Enter to save the file and exit nano.
5. Log into LXDE if you aren’t already there.
6. Open Midori and navigate to the following URL:
Click here to view code image
http://localhost/phpinformation.php
If you see the phpinfo() function output shown in Figure 15.3, you can rest assured that
you successfully installed PHP.
FIGURE 15.3 Verifying PHP is running correctly on the Pi
7. Now let’s turn our attention to installing MySQL, the lone remaining member of the
LAMP stack:
Click here to view code image
sudo apt-get install mysql-server mysql-client php5-mysql
MySQL (pronounced my ess-cue-el) is a client-server application (hence the necessity
to install the server and client components) that is known for being fast, lightweight, and
reasonably secure and extensible.
During the MySQL installation, you are prompted to set a strong password for the
MySQL root user. Please do this! In my opinion, a strong password consists of the
following attributes:
 Length of at least eight characters
 Mixture of uppercase and lowercase letters
 Mixture of letters, numbers, and non-alphanumeric character
 Doesn’t appear in a dictionary in any language
Task: Verifying MySQL Installation
Unfortunately, MySQL does not include a quickie diagnostic function like PHP does.
Here you simply check to see whether the MySQL service is present and available on your
Raspberry Pi computer.
1. From a Terminal session, run the following statement:
Click here to view code image
sudo /etc/init.d/mysql status
In Linux, init.d is a directory, not a file, that contains startup and shutdown scripts for
installed services on your system.
2. If you see output that resembles what’s shown in Figure 15.4, you know you have a fully
functioning instance of MySQL.
FIGURE 15.4 MySQL is installed and running on the Pi.
If you don’t see the output shown in Figure 15.4, don’t panic. In a worst possible case scenario, you
can re-flash your SD card with Raspbian and start over from scratch. Failing that extreme measure,
you can turn to the good folks at the Raspberry Pi Forums for assistance. Here is a link to a discussion
thread that covers just this topic: http://is.gd/C6iONe.
Tweaking Up Your Web Server Settings
 Awesome—you have your LAMP stack installed, albeit with from the factory defaults. Next, you
need to get in there and make sure that the software is configured to your liking.
 Apache is considered by many to be the world’s best web server for many reasons, but not the least
of which is that the server ships with strong and secure default values. Nonetheless, some of the most
common Apache tweaks that some admins make to their default installations include
 Changing the location where web content files are stored
 Changing the default TCP port
 Modifying security and performance settings
 Adding module packages to extend the capabilities of the server