# 利用Oracle VirtualBox实现虚拟机逃逸
|
##### 译文声明
本文是翻译文章，文章原作者 starlabs，文章来源：starlabs.sg
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
在这篇文章中，我们将讨论在Pwn2Own 2020中使用的`Oracle VirtualBox escape`漏洞。这两个漏洞影响Oracle
VirtualBox 6.1.4和更早的版本。
## 漏洞
我们利用了两个漏洞完成了这次逃逸：
[CVE-2020-2894](https://www.zerodayinitiative.com/advisories/ZDI-20-581/)  
[CVE-2020-2575](https://www.zerodayinitiative.com/advisories/ZDI-20-582/)
###  CVE-2020-2894 E1000 越界读取漏洞
有关E1000网络适配器内部工作原理的更多信息，可以在[这里](https://github.com/hongphipham95/Vulnerabilities/blob/master/VirtualBox/Oracle%20VirtualBox%20Intel%20PRO%201000%20MT%20Desktop%20-%20Integer%20Underflow%20Vulnerability/Oracle%20VirtualBox%20Intel%20PRO%201000%20MT%20Desktop%20-%20Integer%20Underflow%20Vulnerability.md)阅读。
当使E1000网络适配器发送一个以太网帧时，我们可以通过设置`IXSM`位控制插入的IP校验和：
    // VirtualBox-6.1.4\src\VBox\Devices\Network\DevE1000.cpp:5191
    static bool e1kLocateTxPacket(PE1KSTATE pThis)
    {
        ...    
        E1KTXDESC *pDesc = &pThis->aTxDescriptors[i];
        switch (e1kGetDescType(pDesc))
        {
        ...                
            case E1K_DTYP_DATA:
            ...                
                if (cbPacket == 0)
                {
                    /*
                     * The first fragment: save IXSM and TXSM options
                     * as these are only valid in the first fragment.
                     */
                    pThis->fIPcsum  = pDesc->data.dw3.fIXSM;
                    pThis->fTCPcsum = pDesc->data.dw3.fTXSM;
                            fTSE     = pDesc->data.cmd.fTSE;
            ...                    
    }
启用`pThis->fIPcsum`标志后，IP校验和插入到以太网帧中：
    // VirtualBox-6.1.4\src\VBox\Devices\Network\DevE1000.cpp:4997
    static int e1kXmitDesc(PPDMDEVINS pDevIns, PE1KSTATE pThis, PE1KSTATECC pThisCC, E1KTXDESC *pDesc,
                           RTGCPHYS addr, bool fOnWorkerThread)
    {
        ...
        switch (e1kGetDescType(pDesc))
        {
            ...            
            case E1K_DTYP_DATA:
            {
                STAM_COUNTER_INC(pDesc->data.cmd.fTSE?
                                 &pThis->StatTxDescTSEData:
                                 &pThis->StatTxDescData);
                E1K_INC_ISTAT_CNT(pThis->uStatDescDat);
                STAM_PROFILE_ADV_START(&pThis->CTX_SUFF_Z(StatTransmit), a);
                if (pDesc->data.cmd.u20DTALEN == 0 || pDesc->data.u64BufAddr == 0)
                {
                ...                
                }
                else
                {
                ...                
                    else if (!pDesc->data.cmd.fTSE)
                    {
                        ...
                        if (pThis->fIPcsum)
                            e1kInsertChecksum(pThis, (uint8_t *)pThisCC->CTX_SUFF(pTxSg)->aSegs[0].pvSeg, pThis->u16TxPktLen,
                                              pThis->contextNormal.ip.u8CSO,
                                              pThis->contextNormal.ip.u8CSS,
                                              pThis->contextNormal.ip.u16CSE);
函数`e1kInsertChecksum()`将计算校验和并将其放入框架主体中。`pThis->contextNormal`的三个字段`u8CSO`、`u8CSS`和`u16CSE`可以通过上下文描述符（Context
Descriptor）指定：
    // VirtualBox-6.1.4\src\VBox\Devices\Network\DevE1000.cpp:5158
    DECLINLINE(void) e1kUpdateTxContext(PE1KSTATE pThis, E1KTXDESC *pDesc)
    {
        if (pDesc->context.dw2.fTSE)
        {
            ...        
        }
        else
        {
            pThis->contextNormal = pDesc->context;
            STAM_COUNTER_INC(&pThis->StatTxDescCtxNormal);
        }
    ...    
    }
`e1kInsertChecksum()`函数的实现：
    // VirtualBox-6.1.4\src\VBox\Devices\Network\DevE1000.cpp:4155
    static void e1kInsertChecksum(PE1KSTATE pThis, uint8_t *pPkt, uint16_t u16PktLen, uint8_t cso, uint8_t css, uint16_t cse)
    {
        RT_NOREF1(pThis);
        if (css >= u16PktLen)                            // [1]
        {
            E1kLog2(("%s css(%X) is greater than packet length-1(%X), checksum is not inserted\n",
                     pThis->szPrf, cso, u16PktLen));
            return;
        }
        if (cso >= u16PktLen - 1)                        // [2]
        {
            E1kLog2(("%s cso(%X) is greater than packet length-2(%X), checksum is not inserted\n",
                     pThis->szPrf, cso, u16PktLen));
            return;
        }
        if (cse == 0)                                    // [3]
            cse = u16PktLen - 1;
        else if (cse szPrf, css, cse));
            return;
        }
        uint16_t u16ChkSum = e1kCSum16(pPkt + css, cse - css + 1);
        E1kLog2(("%s Inserting csum: %04X at %02X, old value: %04X\n", pThis->szPrf,
                 u16ChkSum, cso, *(uint16_t*)(pPkt + cso)));
        *(uint16_t*)(pPkt + cso) = u16ChkSum;
    }
`css`是数据包中开始计算校验和的偏移量，它需要小于`u16PktLen`，它是当前数据包的总大小（代码中[1]）。
`cse`是数据包中用来停止校验和计算的偏移量。
将`cse`字段设置为0表示校验和将覆盖从`css`到包的末尾（代码中[3]）。
`cse`需要比`css`大（代码中[4]）。
`cso`是数据包中写入校验和的偏移量，它需要小于`u16PktLen – 1`（代码中[2]）。
由于没有检查`cse`的最大值，我们可以将该字段设置为大于当前数据包的总大小，从而导致越界访问，并导致`e1kCSum16()`在`pPkt`之后计算数据的校验和。
“overread”校验和将被插入以太网帧中，稍后可以被接收器读取。
###  信息泄漏
因此，如果我们想从一个溢出校验和中泄漏一些信息，我们需要一种可靠的方法来知道哪些数据与溢出缓冲区相邻。在仿真的E1000设备中，传输缓冲区由`e1kXmitAllocBuf()`函数分配:
    // VirtualBox-6.1.4\src\VBox\Devices\Network\DevE1000.cpp:3833
    DECLINLINE(int) e1kXmitAllocBuf(PE1KSTATE pThis, PE1KSTATECC pThisCC, bool fGso)
    {
        ...    
        PPDMSCATTERGATHER pSg;
        if (RT_LIKELY(GET_BITS(RCTL, LBM) != RCTL_LBM_TCVR))            // [1]
        {
            ...        
            int rc = pDrv->pfnAllocBuf(pDrv, pThis->cbTxAlloc, fGso ? &pThis->GsoCtx : NULL, &pSg);
            ...        
        }
        else
        {
            /* Create a loopback using the fallback buffer and preallocated SG. */
            AssertCompileMemberSize(E1KSTATE, uTxFallback.Sg, 8 * sizeof(size_t));
            pSg = &pThis->uTxFallback.Sg;
            pSg->fFlags      = PDMSCATTERGATHER_FLAGS_MAGIC | PDMSCATTERGATHER_FLAGS_OWNER_3;
            pSg->cbUsed      = 0;
            pSg->cbAvailable = sizeof(pThis->aTxPacketFallback);
            pSg->pvAllocator = pThis;
            pSg->pvUser      = NULL; /* No GSO here. */
            pSg->cSegs       = 1;
            pSg->aSegs[0].pvSeg = pThis->aTxPacketFallback;                // [2]                
            pSg->aSegs[0].cbSeg = sizeof(pThis->aTxPacketFallback);
        }
        pThis->cbTxAlloc = 0;
        pThisCC->CTX_SUFF(pTxSg) = pSg;
        return VINF_SUCCESS;
    }
`RCTL`寄存器的`LBM`（环回模式）字段控制以太网控制器的环回模式，它影响包缓冲区（packet buffer）的分配（代码中[1]）：
没有环回模式：`e1kXmitAllocBuf()`使用`pDrv->pfnAllocBuf()`回调来分配数据包缓冲区，这个回调将使用OS分配器或VirtualBox的自定义分配器。  