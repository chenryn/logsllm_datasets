4 diversity
4
2
5
3.5
3
1.5
1
2.5
4
2
4.2
4.2
2.5
1.5
1
2
that target). If the node serves no such purpose, the module calls
the overlay routing module to determine the next hop in the Web-
SOS overlay and passes the reply onto the communications module.
Presently, the WebSOS routing module is initialized with conﬁg-
uration data at startup indicating which nodes serve speciﬁc pur-
poses. We are working on an administrative module with increased
ﬂexibility to avoid this static provisioning.
The overlay routing module is a general routing algorithm for
overlay networks. An implementation of Chord was written for the
initial tests. However, this module can be replaced with any other
routing algorithm, e.g., CAN [28]. It receives queries containing a
destination IP address (the web server’s) and responds with the IP
address of the next node in the overlay to which the request should
be forwarded. For maintenance of its own routing algorithm, the
Chord implementation also communicates with other overlay nodes
to determine their status, as described in [34].
When a request is issued by the browser, it is tunneled through
a series of SSL-encrypted links to the target, allowing the entire
transmission between the requester and target to be encrypted. The
SSL connections between WebSOS nodes are dynamically estab-
lished, as new requests are routed. One problem we ran into while
developing the WebSOS prototype is that web browsers do not pro-
vide support for the actual proxy request to be encrypted. To solve
this problem, we wrote a port forwarder that runs on the user’s sys-
tem, accepts plaintext proxy requests locally, and forwards them
using SSL to the access point node. This is implemented as a Java
applet that runs inside the browser itself. The Java applet is not con-
sidered part of the WebSOS overlay and is not trusted to perform
any access control decisions; it is simply a “helper” application.
Thus, to use WebSOS, an authorized user simply has to access
any SOAP, successfully respond to the CAPTCHA challenge, down-
load the applet, and set the browser’s proxy settings to the local-
host, as shown in Figure 7. Java applets typically are not allowed
to communicate with any host other than the one from which they
were downloaded, but this is not a problem in our case. If the user
is successful in his/her reply, the web server connects to a DBMS
system (local or remote) and associates a pair of RSA keys (a pri-
vate key and a certiﬁcate) with the host. This set of keys are unique
per IP and have an expiration time that can be conﬁgured by the
system administrator. The user is prompted to download a signed
applet that runs locally using one browser window and contacts
the web server via a temporary HTTPS connection to retrieve the
X.509 certiﬁcate.
The applet then starts listening for HTTP/HTTPS connections on
a local port (e.g., 8080) and establishes an SSL-tunnel connection
with the proxy server running on the SOAP (or elsewhere, since
the signed applet has the ability to connect to any server by chang-
ing the Java Policy ﬁles on the users’ machine). The proxy server
matches the X.509 certiﬁcate and the IP from client to the private
key obtained from the DBMS system and allows the connection
to be proxied. The only imposition on the user is that he/she must
change the Proxy settings of the local browser to point to the socket
that listens for the applets.
Initial prototyping of the communications module used Apache,
whose proxy module was modiﬁed to query the routing module
for the next hop. This worked well when unencrypted HTTP re-
quests were issued by the browser. However, when we encountered
the requirement for end-to-end authentication and encryption, we
changed the implementation to use a stand-alone proxy server in-
stead of Apache.
We intend to expand the implementation to include additional
modules addressing the administration and maintenance of the over-
lay. A centralized administration module will be used to set node
characteristics in real time, including assigning speciﬁc roles (bea-
con, SOAP, secret servlet) to nodes, and changing the operational
status of nodes. A maintenance module running on each node will
check the status of all nodes in the WebSOS overlay and provide
updates to both the main and overlay routing modules in order for
routing to be adjusted. This module will also serve as the inter-
face to centralized administration by receiving updates regarding a
node’s function and status, and passing the updates to the appropri-
ate routing module.
An adaptation of the initial implementation was created, to im-
prove performance: rather than transporting the request and re-
sponse through the full overlay network, only routing information
travels through the overlay. As before, the requester makes a proxy
request to the SOAP. At that point, the SOAP sends a UDP mes-
sage into the overlay, specifying the target. The message is routed
to the beacon, which responds directly to the SOAP with informa-
tion on the secret servlet for that target. The SOAP then connects to
the servlet, which proxies the request as before, in effect creating a
shortcut through the overlay.
Figure 7: WebSOS client session initiation diagram.
The SOAP caches the servlet information for use in future re-
quests. That information is timed out after a period of time to allow
for changes to propagate correctly. The same basic UDP protocol
is used by servlets to announce their presence to (and periodically
update) the beacons for the various targets.
5. EXPERIMENTAL EVALUATION
In order to quantify the overhead associated with use of Web-
SOS, we created a simple topology running on the local network
(100 Mbit fully-switched Ethernet). For our local-area network
overlay, we used 10 commodity PCs running Linux Redhat 7.3.
We measured the time-to-completion of https requests. That is, we
measured the elapsed time starting when the browser initiates the
TCP connection to the destination or the ﬁrst proxy, to the time all
data from the remote web server have been received. We ran this
test by contacting 3 different SSL-enabled sites: login.yahoo.com,
www.verisign.com, and the Columbia course bulletin board web
service (at https://www1.columbia.edu/sec/bboard).
For each of these sites, we measured the time-to-completion for
a different number of overlay nodes between the browser and the
target (remote web server).
The browser was located on a separate ISP The reason for this
conﬁguration was to introduce some latency in the ﬁrst-hop con-
nection (from the browser to the SOAP), thus simulating (albeit us-
ing a real network) an environment where the browsers have slower
access links to the SOAPs, relative to the links connecting the over-
lay nodes themselves (which may be co-located with core routers).
By locating all the overlay nodes in the same location, we effec-
tively measure the aggregate overhead of the WebSOS nodes in the
optimal (from a performance point of view) case.
Table 4 shows the results for the case of 0 (browser contacts re-
mote server directly), 1, 4, 7, and 10 overlay nodes. The times re-
ported are in seconds, and are averaged over several HTTPS GET
requests of the same page, which was not locally cached. For
each GET request, a new TCP connection was initiated by the
browser. The row labeled “Columbia BB (2nd)” shows the time-
to-completion of an HTTPS GET request that uses an already-
established connection through the overlay to the web server, using
the HTTP 1.1 protocol.
As the ﬁgure shows, WebSOS increases the end-to-end latency
between the browser and the server by a factor of 2 to 3. These
results are consistent with our simulations of using SOS in an ISP
topology, where the latency between the different overlay nodes
would be small, as discussed in Section 3. The increase in latency
can be primarily attributed to the network-stack processing over-
head and proxy processing at each hop. It may be possible to use
TCP splicing [6] or similar techniques to reduce connection han-
dling overhead, since WebSOS performs routing on a per-request
basis. Also, in the experiments we ran, we did not make use of the
asymmetric routing option possible with the use of GRE as both
a ﬁltering and an encapsulation mechanism, as discussed in Sec-
tion 2.3.
Furthermore, there is an SSL-processing overhead for the inter-
overlay communications. A minor additional cryptographic over-
head, relative to the direct access case, is the certiﬁcate validation
that the SOAPs have to perform, to determine the client’s author-
ity to use the overlay, and the SSL connection between the proxy
running on the user’s machine and the SOAP. As shown in [22],
such overheads are typically dominated by the end-to-end commu-
nication overheads. Use of cryptographic accelerators can further
improve performance in that area. One further optimization is to
maintain persistent SSL connections between the overlay nodes.
However, this will make the task of the communication module
harder, as it will have to parse HTTP requests and responses arriv-
ing over the same connection in order to make routing decisions.
Table 5 shows the same experiment using PlanetLab [27], a wide-
area overlay network testbed. The PlanetLab nodes are distributed
in academic institutions across the country, and are connected over
the Internet. We deployed our WebSOS proxies PlanetLab and ran
the exact same tests. Naturally, the direct-contact case remains the
same. We see that the time-to-completion in this scenario increases
by a factor of 2 to 10, depending on the number of nodes in the
overlay. In each case, the increase in latency over the local-Ethernet
conﬁguration can be directly attributed to the delay in the links be-
tween the WebSOS nodes. While the PlanetLab conﬁguration al-
lowed us to conduct a much more realistic performance evaluation,
it also represents a worst-case deployment scenario for WebSOS:
typically, we would expect WebSOS to be offered as a service by
an ISP, with the (majority of) WebSOS nodes located near the core
Table 4: Latency (in seconds) when contacting various SSL-enabled web servers directly and with different numbers of (intermediate) overlay nodes
over the local-Ethernet network.
Server
Yahoo!
Verisign
Columbia BB
Columbia BB (2nd)
Direct
1.39
3.43
0.64
0.14
1 node
2.06
4.22
0.86
0.17
4 nodes
2.37
5.95
1.06
0.19
7 nodes
2.79
6.41
1.16
0.20
10 nodes
3.33
9.01
1.21
0.25
Table 5: Latency (in seconds) when contacting various SSL-enabled web servers directly and with different numbers of (intermediate) overlay nodes
using the PlanetLab network.
Server
Yahoo!
Verisign
Columbia BB
Columbia BB (2nd)
Direct
1.39
3.43
0.64
0.14
1 node
3.15
5.12
1.01
0.23
4 nodes
5.53
7.95
1.45
0.28
7 nodes
10.65
14.95
3.14
0.57
10 nodes
14.36
22.82
5.07
0.72
of the network. Using PlanetLab, the nodes are distributed in (ad-
mittedly well-connected) end-sites. We would expect that a more
commercial-oriented deployment of WebSOS would result in a cor-
responding decrease in the inter-overlay delay. On the other hand,
it is easier to envision end-site deployment of WebSOS, since it
does not require any participation from the ISPs.
Finally, while the additional overhead imposed by WebSOS can
be signiﬁcant, we have to consider the alternative: no web service
while a DoS attack against the server is occurring. While an in-
crease in end-to-end latency by a factor of 5 (or even 10, in the
worst case) is considerable, we believe it is more than acceptable
in certain environments and in the presence of a determined attack.
Table 6 shows the results when the shortcut implementation was
tested on the PlanetLab testbed. This variant provides signiﬁcant
performance improvements, particularly on subsequent requests for
the same site, because of the caching. To simulate the effects of an
attack on individual nodes in the overlay, we simply brought down
speciﬁc nodes. The system healed itself within 10 seconds.
Table 6: Latency (in seconds) when contacting various SSL-enabled
web servers directly and while using the shortcut implementation of
the WebSOS system. The testing was performed on a 76 node subset of
the PlanetLab testbed using the Chord overlay. The hops to the bea-
con ranged from 4 to 8 and did not have a signiﬁcant effect on latency.
The cached column refers to subsequent requests using the same SOAP,
whereupon the Secret Servlet information has been cached.
Server
Yahoo!
Verisign
Columbia BB
Columbia BB (2nd)
Direct
1.39
3.43
0.64
0.14
Original
Request
4.15
7.33
3.97
0.55
Cached
Requests
3.67
6.77
3.43