还有一个跟gedit类似的文本编辑器，就是KDE下默认的文本编辑器kate。kate是KDE
Advanced Text
Editor，也就是KDE高级文本编辑器的缩写。这个家伙支持C、C++、HTML等语言的语法高亮，还支持函数折叠，比gedit先进一些。样子看着也专业一点，如图7.4所示。
![alt](images/00359.jpeg){.calibre3}
图7.4 kate显示C语言代码
![alt](images/00011.jpeg){.tpzz}**提示：**[KDE下的集成开发环境KDevelop就是调用kate来实现代码的编写。]{.kai1}
【Vim】
上面说的编辑器虽然能够写点小程序，有点小功能，不过毕竟有限。真要做开发，还是有些应付不了。这时候就需要更强大的文本编辑器了，Vim就是一个。
Vim，即Vi Improved，它是Bram
Moolenaar开发的、与无比强大且无比难用的Vi编辑器相兼容并且是更加强大易用的文本编辑器。它支持语法变色、正规表达式匹配与替换、插入补全、自定义键等功能，为编写程序提供了极大的方便。图7.5所示是它的Logo。
![alt](images/00360.jpeg){.calibre3}
图7.5 Vim的Logo
我们Ubuntu系统中默认带有Vi编辑器，可能很多同学已经听说过它的大名了。不过，这个编辑器实在是很不好用，太没人性了，所以一般人都会让超级牛力去安装一个更人性化一点的Vi------这就是Vim，可以这样安装：
![alt](images/00361.jpeg){.calibre3}
安装这个包之后，就有了字符界面的Vim和图形界面的gVim可以使用。使用方法基本一样，所不同的就是gVim支持一些鼠标操作。如图7.6所示就是gVim显示C语言代码的效果。
![alt](images/00362.jpeg){.calibre3}
图7.6 gVim显示C语言代码
【Emacs】
还有一个跟Vim同样强大的编辑器，就是Emacs了。
Emacs全称为Editor
MACroS，直接翻译过来就是"宏编辑器"，图7.7所示是它的Logo。Emacs是一个有着悠久历史的文本编辑器，最初由Richard
Stallman于1975年在MIT的时候，协同Guy
Steele共同完成，比Vi的诞生要早一点。这种神一样的编辑器使用了Emacs
Lisp这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等功能的扩展。由于扩展功能的强大，所以很多人开玩笑说Emacs是一个伪装成编辑器的操作系统。
![alt](images/00363.jpeg){.calibre3}
图7.7 Emacs的Logo
![alt](images/00011.jpeg){.tpzz}**提示：**[Emacs还有一个分支，是1991年发起的XEmacs项目。XEmacs与Emacs有着良好的兼容性，并且对多国语言的处理能力更加强大。它甚至可以在一份文件中同时处理多种不同的语言文字。]{.kai1}
如今，依然有很多人在使用Emacs编辑器处理着他们的各种工作。在我们Ubuntu系统中想用Emacs就直接叫来超级牛力安装：
![alt](images/00364.jpeg){.calibre3}
安装好之后，就可以直接运行"emacs"命令来启动Emacs。"emacs"命令本身可以判断当前的系统环境，如果有图形界面，会启动图形界面的Emacs，如图7.8所示。如果是在纯字符终端运行"emacs"命令，则启动字符界面的Emacs，如图7.9所示。
![alt](images/00365.jpeg){.calibre3}
图7.8 Emacs图形界面
![alt](images/00366.jpeg){.calibre3}
图7.9 Emacs字符界面
【最强大的编辑器】
不过有一点要特别注意：千万不要问谁是Linux下最强大的文本编辑器！
一直以来，在Linux这片自由的天空下，两位公认的顶级的文本编辑器------Vim和Emacs，谁也不服对方。两个人都觉得自己才是空前绝后旷古烁今的全能文本编辑器。一旦有谁质疑一下"最强大文本编辑器"的地位，他们两个都会第一时间跳出来，相互指摘对方的缺点，以确立自己在文本编辑器领域的不败地位。
Vim总是指责Emacs说："那么多的快捷键，记忆起来多麻烦。"
这时候一般Emacs会反驳："你呢？那么多命令难道容易记？"
"初期需要记住的命令确实多一些，"Vim辩解说，"但是总共就那么几个命令，记住之后就可以应用自如了。通过简单命令的组合可以实现各种复杂的操作。哪像你，每种操作都有快捷键要记忆，而且还分那么多模式。每个模式都有特定的快捷键，搞得人晕头转向。"
"你还好意思说我模式多？你不也分什么输入模式、指令模式还有行末模式么，搞得新手不知如何是好，连退出都不知道怎么退出。你觉得我模式多？那是我灵活，我功能多。你能看邮件么？你能编写网页么？你能看图片么？我都能，并且还远远不止这些。"
Vim会冷冷地说："是啊......所以你才不是最强大的文本编辑器。因为你压根不是文本编辑器，你是个绑定了文本编辑功能的操作系统！"
"胡说，我是编辑器，怎么成了操作系统了？我不是操作系统！你才是操作系统呢，你们全家都是操作系统！"
......
总之呢，一定不要让这两个人遇到一起，更不能在有他们两个的时候提到谁是最好的之类的话题。否则就是：吵不关机死不休！其实要我说，这两者各有特点而已，没什么争吵的必要。您用哪个顺手就用那个就行了。
【经典的HelloWorld】
介绍了这么多，这会儿懒蜗牛已经完成了他人生中的第一段Linux下的C语言代码。他写的是一段最简单、最经典的C语言代码------HelloWorld。程序全文如下：
![alt](images/00367.jpeg){.calibre3}
简洁明了吧。这段程序也没什么实际意义，只是试验一下C语言的编译而已。懒蜗牛同学写好了这个程序之后，把它保存在了/home/lanwoniu/Program_C目录下。这是他刚刚建立的一个目录，把这个源代码存为了hello.c文件。然后，就准备进行编译了。
![alt](images/00011.jpeg){.tpzz}**提示：**[建立目录使用命令：mkdir
\/\。]{.kai1}
7.1.3 编译和运行
【编译C语言】
编译很简单，找来编译器GCC就可以了。只见懒蜗牛同学运行：
![alt](images/00368.jpeg){.calibre3}
进入这个目录里，然后：
![alt](images/00369.jpeg){.calibre3}
这样就编译完了，简单吧。运行完了之后，编译出的结果会被命名为一个a.out文件，就放在当前目录下，懒蜗牛执行了ls命令一下，果然看到了这个文件：
![alt](images/00370.jpeg){.calibre3}
这个a.out就是编译出的二进制文件，赶紧执行试试：
![alt](images/00371.jpeg){.calibre3}
嗯，果然如预期所料。
咱刚才说了，GCC这个名字已经并不单单指一个编译器了，而是很多种语言的编译器的组合。除了编译C语言的"gcc"命令之外，另外一个最常用的就是用于编译C++程序的"g++"命令了。
【C++语言简介】
C++，这个词在懒蜗牛同学所在的这个国家通常被读做"C加加"，同理，地球对面的程序员通常读做"C
plus
plus"。它是一种使用非常广泛的计算机编程语言。它完全兼容C语言，在C语言的基础上增加了对对象的支持。
早在20世纪80年代，贝尔实验室的本贾尼·斯特劳斯特卢普（Bjarne
Stroustrup）博士最初发明C++语言的时候，将它命名为"C with
Classes"，直译过来也就是"带有类概念的C语言"。C++最初是作为C语言的增强版出现的，但随着它的发展，从增加类开始，不断地增加新特性。什么虚函数（virtual
function）、运算符重载（operator overloading）、多重继承（multiple
inheritance）、模板（template）、异常（exception）、RTTI、命名空间（name
space）逐渐被加入标准。
到1998年，国际标准组织（ISO）颁布了C++程序设计语言的国际标准ISO/IEC
14882-1998。然而由于C++语言被设计得太复杂、太高深、太科幻，以至于到现在为止，都没有一个编译器能够100％地支持这个标准。不过也不用担心，绝大多数编译器的绝大多数行为还是一致的。
【C++的编译】