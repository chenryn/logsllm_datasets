## 最大化兼容性

由于 TLS 1.1 和 TLS 1.2 等协议已经存在多年，许多应用软件和中间代理（官方称为“MiddleBox”）仅支持旧的记录协议格式。对这些设备进行更新改造非常困难，有时甚至是不可行的（设备僵化）。早期试验中发现，一旦修改记录头字段中的版本号（从 0x303（TLS 1.2）改为 0x304（TLS 1.3）），大量代理服务器和网关将无法正确处理，导致 TLS 握手失败。为了确保广泛部署的旧设备仍能继续使用，并避免新协议带来的问题，TLS 1.3 不得不做出妥协，保持现有的记录格式不变，通过“伪装”来实现兼容，使 TLS 1.3 在表面上看起来像是 TLS 1.2。

那么，如何区分 TLS 1.2 和 TLS 1.3 呢？这需要用到一个新的**扩展协议**（Extension Protocol）。它类似于“补充条款”，通过在记录末尾添加一系列扩展字段来增加新的功能。旧版本的 TLS 可以直接忽略这些扩展字段，从而实现了后向兼容。在记录头的 Version 字段被固定为兼容性的前提下，任何 TLS 1.3 协议的握手消息都必须包含一个“**supported_versions**”扩展，该扩展标记了 TLS 的版本号。例如，在 Chrome 发送的 ClientHello 消息中，可以看到以下扩展：

```
Handshake Protocol: Client Hello
Version: TLS 1.2 (0x0303)
Extension: supported_versions (len=11)
    Supported Version: TLS 1.3 (0x0304)
    Supported Version: TLS 1.2 (0x0303)
```

尽管客户端发送的是 TLS 1.3 协议，但由于服务器不支持 TLS 1.3，因此会降级到 TLS 1.2。TLS 1.3 利用扩展实现了许多重要功能，如“supported_groups”、“key_share”、“signature_algorithms”和“server_name”等，这些将在后续部分详细讨论。

## 强化安全

在多年的实际应用中，TLS 1.2 暴露了许多漏洞和加密算法的弱点。因此，TLS 1.3 在协议中修补了这些安全问题。具体改进包括：

- 伪随机数函数由 PRF 升级为 HKDF（HMAC-based Extract-and-Expand Key Derivation Function）；
- 明确禁止在记录协议中使用压缩；
- 废除了 RC4、DES 对称加密算法；
- 废除了 ECB、CBC 等传统分组模式；
- 废除了 MD5、SHA1、SHA-224 摘要算法；
- 废除了 RSA、DH 密钥交换算法和许多命名曲线。

经过这一系列精简后，TLS 1.3 中仅保留了 AES 和 ChaCha20 对称加密算法，分组模式只能使用 AEAD 的 GCM、CCM 和 Poly1305，摘要算法只能使用 SHA256 和 SHA384，密钥交换算法只有 ECDHE 和 DHE，椭圆曲线也被限制为 P-256 和 x25519 等五种。

这种精简不仅提高了安全性，还简化了密码套件的选择。原来的多种算法和参数组合使得密码套件非常复杂，难以选择。而现在的 TLS 1.3 只有五个套件，无论是客户端还是服务器都不会再面临“选择困难症”。

特别值得一提的是废除 RSA 和 DH 密钥交换算法的原因。ECDHE 算法在每次握手时都会生成一对临时的公钥和私钥，实现“一次一密”。即使黑客破解了一次会话密钥，也只会对当前通信造成影响，历史消息仍然安全。相比之下，RSA 密钥交换不具备前向安全性，一旦私钥泄露或被破解，所有历史报文都将变得不安全。因此，主流服务器和浏览器已不再使用 RSA，改用 ECDHE，而 TLS 1.3 在协议层面明确废除了 RSA 和 DH，进一步保障了前向安全性。

## 提升性能

HTTPS 建立连接时需要进行 TCP 握手和 TLS 握手。在 TLS 1.2 中，这两个过程会额外增加两个消息往返（2-RTT），导致几十毫秒甚至上百毫秒的延迟，尤其在移动网络中更为明显。由于密码套件的大幅简化，TLS 1.3 将握手时间减少到了 1-RTT，效率提高了一倍。

具体做法是利用扩展协议。客户端在 ClientHello 消息中直接携带支持的曲线（如 P-256、x25519）、对应的客户端公钥参数以及签名算法。服务器收到后选定一个曲线和参数，返回服务器端的公钥参数，从而完成密钥交换。后续流程与 TLS 1.2 基本相同。

此外，TLS 1.3 还引入了 0-RTT 握手，通过 pre_shared_key 和 early_data 扩展，在 TCP 连接建立后立即发送加密消息，但这需要满足一些前提条件，这里暂不详述。

## 握手分析

目前，Nginx 等 Web 服务器能够很好地支持 TLS 1.3，但要求底层 OpenSSL 版本至少为 1.1.1。实验环境中使用的 OpenSSL 版本为 1.1.0，因此暂时无法直接测试 TLS 1.3。不过，我已在 Linux 上编译了一个支持 TLS 1.3 的 Nginx，并使用 Wireshark 抓包存到了 GitHub 上，可以用来分析 TLS 1.3 的握手过程。

在 TCP 建立连接后，浏览器首先发送一个 Client Hello。由于 TLS 1.3 的消息与 TLS 1.2 兼容，因此版本号、支持的密码套件和随机数（ClientRandom）结构相同。示例如下：

```
Handshake Protocol: Client Hello
Version: TLS 1.2 (0x0303)
Random: cebeb6c05403654d66c2329…
Cipher Suites (18 suites)
    Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)
    Cipher Suite: TLS_CHACHA20_POLY1305_SHA256 (0x1303)
    Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)
Extension: supported_versions (len=9)
    Supported Version: TLS 1.3 (0x0304)
    Supported Version: TLS 1.2 (0x0303)
Extension: supported_groups (len=14)
    Supported Groups (6 groups)
        Supported Group: x25519 (0x001d)
        Supported Group: secp256r1 (0x0017)
Extension: key_share (len=107)
    Key Share extension
        Client Key Share Length: 105
        Key Share Entry: Group: x25519
        Key Share Entry: Group: secp256r1
```

服务器收到 Client Hello 后返回 ServerHello 消息，同样给出随机数（Server Random）和选定的密码套件。示例如下：

```
Handshake Protocol: Server Hello
Version: TLS 1.2 (0x0303)
Random: 12d2bce6568b063d3dee2…
Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)
Extension: supported_versions (len=2)
    Supported Version: TLS 1.3 (0x0304)
Extension: key_share (len=36)
    Key Share extension
        Key Share Entry: Group: x25519, Key Exchange length: 32
```

此时，客户端和服务器已交换了四个共享信息：ClientRandom 和 Server Random、Client Params 和 Server Params。双方可以各自使用 ECDHE 计算 Pre-Master，再用 HKDF 生成主密钥 Master Secret。随后，服务器发送 Change Cipher Spec 消息，提前进入加密通信。证书等后续数据都是加密传输的，减少了握手时的明文信息泄露。

TLS 1.3 还增加了 CertificateVerify 消息，用服务器私钥对握手数据进行签名，增强了身份认证和防篡改功能。最后，客户端验证服务器证书并发送 Finished 消息，完成握手并开始收发 HTTP 报文。

虽然实验环境暂时无法抓包测试 TLS 1.3，但互联网上已有许多网站支持 TLS 1.3，如 Nginx 和 GitHub。你可以使用 Wireshark 自行测试，并在 Chrome 开发者工具中查看这些网站的 TLS 1.3 应用情况。

## 小结

今天我们一起学习了 TLS 1.3 的新特性，并通过抓包研究了其握手过程。以下是主要知识点：

1. 为了兼容旧协议，TLS 1.3 会伪装成 TLS 1.2，新特性通过扩展实现。
2. TLS 1.3 大幅删减了加密算法，只保留了 ECDHE、AES、ChaCha20 和 SHA-2 等少数算法，强化了安全性。
3. TLS 1.3 简化了握手过程，完全握手只需一个消息往返，提升了性能。

## 课下作业

1. TLS 1.3 中的密码套件没有指定密钥交换算法和签名算法，那么在握手过程中会不会有问题？
2. 结合上一讲的 RSA 握手过程，解释为什么 RSA 密钥交换不具有前向安全性。
3. TLS 1.3 的握手过程与 TLS 1.2 的“False Start”有什么异同？

欢迎你将自己的学习体会写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。

## 连接优化

你可能听说过“HTTPS 连接很慢”。那么，“慢”的原因是什么呢？通过前两讲的学习，我们知道 HTTPS 连接分为两个部分：非对称加密握手和对称加密报文传输。由于 AES 和 ChaCha20 性能优异且有硬件优化，报文传输的性能损耗几乎可以忽略不计。因此，通常所说的“HTTPS 连接慢”指的是建立连接时的握手过程。

在 TCP 建连后，HTTPS 比 HTTP 增加了一个 TLS 握手步骤，最长需要两个消息往返（2-RTT）。此外，还有一些隐形消耗，如生成临时公私钥对（ECDHE）、验证证书时访问 CA 获取 CRL 或 OCSP、非对称加密解密处理 Pre-Master 等。在最差的情况下，HTTPS 建立连接可能会比 HTTP 慢几百毫秒甚至几秒。

然而，现在已有许多有效的 HTTPS 优化手段，可以将额外耗时降低到几十毫秒甚至零。我们可以从硬件和软件两个方面进行优化。

### 硬件优化

硬件优化主要是通过投入资源来提升性能。对于 HTTPS 连接，计算密集型任务比 I/O 密集型任务更重要。因此，投资于更快的 CPU（最好内建 AES 优化）和 SSL 加速卡或 SSL 加速服务器集群，可以显著提高握手和传输性能。

- **更快的 CPU**：选择内建 AES 优化的 CPU，加速握手和传输。
- **SSL 加速卡**：调用专用硬件 API 进行非对称加解密，减轻 CPU 负担。
- **SSL 加速服务器**：使用专门的服务器集群彻底卸载 TLS 握手时的加密解密计算，提供更强的性能。

通过这些硬件优化措施，可以显著提升 HTTPS 连接的性能。