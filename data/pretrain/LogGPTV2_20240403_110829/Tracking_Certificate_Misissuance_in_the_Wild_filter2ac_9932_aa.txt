title:Tracking Certificate Misissuance in the Wild
author:Deepak Kumar and
Zhengping Wang and
Matthew Hyder and
Joseph Dickinson and
Gabrielle Beck and
David Adrian and
Joshua Mason and
Zakir Durumeric and
J. Alex Halderman and
Michael Bailey
2018 IEEE Symposium on Security and Privacy
Tracking Certiﬁcate Misissuance in the Wild
Deepak Kumar∗, Zhengping Wang∗, Matthew Hyder∗,
Joshua Mason∗, Zakir Durumeric∗†‡,
David Adrian†,
Joseph Dickinson∗, Gabrielle Beck†,
J. Alex Halderman†, Michael Bailey∗
∗ University of Illinois Urbana-Champaign † University of Michigan
‡ Stanford University
Abstract—Certiﬁcate Authorities (CAs) regularly make me-
chanical errors when issuing certiﬁcates. To quantify these errors,
we introduce ZLint, a certiﬁcate linter that codiﬁes the policies
set forth by the CA/Browser Forum Baseline Requirements and
RFC 5280 that can be tested in isolation. We run ZLint on
browser-trusted certiﬁcates in Censys and systematically analyze
how well CAs construct certiﬁcates. We ﬁnd that the number
errors has drastically reduced since 2012. In 2017, only 0.02%
of certiﬁcates have errors. However,
this is largely due to
a handful of large authorities that consistently issue correct
certiﬁcates. There remains a long tail of small authorities that
regularly issue non-conformant certiﬁcates. We further ﬁnd that
issuing certiﬁcates with errors is correlated with other types
of mismanagement and for large authorities, browser action.
Drawing on our analysis, we conclude with a discussion on how
the community can best use lint data to identify authorities with
worrisome organizational practices and ensure long-term health
of the Web PKI.
I .
I N T R O D U C T I O N
HTTPS depends on a supporting public key infrastructure
(PKI) composed of hundreds of certiﬁcate authorities (CAs)
that verify the identities of websites and issue digital certiﬁ-
cates. To ensure compatibility between between browsers and
HTTPS-enabled websites, standards bodies like the IETF and
CA/Browser Forum have developed policies that govern the
digital certiﬁcates that CAs provide. Unfortunately, there is
a long history of certiﬁcate authorities failing to adhere to
accepted standards, due to both implementation errors and
indifference. In this paper, we systematically analyze the errors
that authorities make when constructing certiﬁcates and consider
whether these errors can be used to predict more serious
problems.
We begin by dissecting the policies set forth by RFC
5280 [14] and CA/Browser Forum Baseline Requirements [9].
We ﬁnd that many aspects of certiﬁcate construction can be
checked in isolation, and we codify these requirements in a set
of 220 lints. We introduce and release ZLint, a Go-based linting
framework that implements these checks and provides structured
data on certiﬁcate construction and standards adherence.
To quantify misissuance (i.e., certiﬁcates with errors) in the
Web PKI, we run ZLint on the 240 million browser-trusted
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
© 2018, Deepak Kumar. Under license to IEEE.
DOI 10.1109/SP.2018.00015
785
certiﬁcates in Censys [17]. We ﬁnd that misissuance is low
in aggregate. Only 0.02% of certiﬁcates violate one of the
two standards in 2017; 3.3% do not adhere to community best
practices. This is a signiﬁcant improvement from 2012 when
more than 12% of certiﬁcates contained errors and nearly one
third violated community recommendations. However, while
the global misissuance rate is low, this is predominantly due to
a handful of large authorities that consistently issue certiﬁcates
without error. The three largest CAs by organization—Let’s
Encrypt, Comodo, and cPanel—signed 80% of the certiﬁcates
in our dataset and have near-zero misissuance rates. Let’s
Encrypt, the largest CA by number of certiﬁcates issued, has a
particularly stellar incident rate. Of the 37 million certiﬁcates
the CA has signed, only 13 contain errors. None have warnings.
The bulk of misissuance is due to two classes of authorities.
The ﬁrst class is mid-sized authorities that make a variety of
errors in a small percentage of their certiﬁcates. The second
class is a long tail of small authorities that make the same errors
in every issued certiﬁcate. Nearly half of the organizations
in our dataset misissue more than 10% of certiﬁcates, and
eighteen have made errors in every certiﬁcate. More than half
of the errors and warnings in ZLint are triggered at least
once. Most often, authorities fail to fully populate the Subject
Alternative Names extension, encode the wrong type of data in
the extension, or include invalid DNS names. Beyond individual
certiﬁcates, we ﬁnd that many organizations struggle to properly
maintain OCSP/CRL responders. During our three week test
period, the OCSP responders for 73 organizations (10%) failed
every health check.
Next, in order to determine whether Lint data can be used
to predict more serious issues, we investigate the correlation
between the organizations that issue certiﬁcates containing
errors, OCSP/CRL endpoint uptime, and browser removal. We
ﬁnd that there is weak correlation between the organizations
that issue certiﬁcates with errors and OCSP availability. For
authorities that have issued more than 100K certiﬁcates, there
is moderate to strong correlation between ZLint-identiﬁed
misissuance and browser removal. Surprisingly, while there is
discussion about large CAs with high error proﬁles, there is
no correlation between the small authorities making errors and
discussion in the community (e.g., in the Mozilla Developer
Security Policy mailing list).
Our results indicate that
large authorities are making
progress in correctly issuing certiﬁcates. However, there remains
a long tail of small authorities that fail to follow community
standards and misissue most certiﬁcates. Most of these small
authorities are not being actively discussed. We hope that by
shedding light on these practices, we motivate the community
to investigate struggling authorities and prompt discussion on
whether lint data can be systemically used to help prevent
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:46 UTC from IEEE Xplore.  Restrictions apply. 
future PKI incidents. Finally, by releasing ZLint, we hope to
help certiﬁcate authorities avoid making errors in the future.
I I . B A C K G R O U N D
HTTPS— and TLS more broadly—depend on a supporting
public key infrastructure (PKI). The Web PKI that supports
HTTPS on the public Internet consists of hundreds of certiﬁcate
authorities (CAs)— organizations that user agents like browsers
trust to verify the identities of websites and provide digital cer-
tiﬁcates. More than 400 organizations, ranging from commercial
CAs to academic institutions, controlled browser-trusted signing
certiﬁcates in 2013 [19]. The Web PKI was historically opaque
as certiﬁcates and their issuers were often unknown until found
in the wild. However, repeated compromise and anecdotes of
negligence led to increased scrutiny and community initiatives
to publicly log known certiﬁcates, analyze CA behavior,
establish technical standards, and distrust abusive organizations.
Our work builds on several of these initiatives:
Certiﬁcate Transparency Logs. Certiﬁcate Transparency (CT)
is a Google-initiated effort to maintain public, cryptographically-
veriﬁable ledgers of all browser-trusted certiﬁcates (logs) [27].
Originally started in 2013, CT logs initially contained certiﬁ-
cates found primarily through Google web crawls and Internet-
wide scanning. Since then, several large authorities (e.g., Let’s
Encrypt and Symantec) have started logging certiﬁcates at
the time of issuance [22], [45]. In 2017, Google Chrome
announced plans to require CT logging for browser trust [41];
other browsers are expected to follow [33]. As a result, public
certiﬁcate transparency servers have become a de facto data
source for monitoring the PKI.
In 2010, research groups began
Internet-Wide Scanning.
to use Internet-wide scanning to identify trusted certiﬁcate
authorities and to publish data sets of known certiﬁcates [19]–
[21], [26]. These scans helped to identify the widespread
delegation of signing credentials and uncover abuse. While
much of the community now relies on CT servers for data,
Vandersloot et al. recently found that the combination of CT
and Internet-wide scanning provides the most comprehensive
perspective of the PKI [47]. For our study, we use Censys [17],
which aggregates certiﬁcates from publicly known CT servers
and IPv4 scans of common protocols.
The CA/Browser Forum is a voluntary
CA/Browser Forum.
consortium of certiﬁcate authorities, browsers, and other PKI
participants [9]. The forum maintains several binding technical
guidelines. In June 2007, the CA/Browser Forum published their
ﬁrst standard, Guidelines For The Issuance And Management Of
Extended Validation (EV) Certiﬁcates [10], which outlines the
expectations associated with issuing EV certiﬁcates. In 2011,
the Forum established a second standard, Baseline Requirements
for the Issuance and Management of Publicly-Trusted Certiﬁ-
cates [9], colloquially referred to as the Baseline Requirements
or BRs. The CA/B Forum Baseline Requirements are binding
for all member organizations and apply to certiﬁcates issued
for web authentication. This enforcement is often performed
by participating web browsers.
The Common CA
Common CA Database (CCADB).
Database (CCADB) is a Mozilla-led effort to establish a public
database of trusted certiﬁcate authorities [32]. As part of its root
store policy, Mozilla requires that roots submit unconstrained
intermediates to CCADB [31]. We use CCADB to help identify
the owners of signing certiﬁcates.
The Mozilla
Mozilla Developer Security Policy Mailing List.
Developer Security Policy (MDSP) mailing list [1] is the
primary public forum for discussing the Mozilla Root Program.
It has become a de facto location for community members to
disclose PKI issues and for browsers to solicit feedback from
both CAs and the broader community. We use MDSP to identify
which certiﬁcate authorities are being actively discussed.
Increased transparency has led browsers to distrust several
authorities over the past three years. Chrome and Firefox
distrusted WoSign and StartCom after they were found is-
suing backdated SHA-1 certiﬁcates [34], [49]. PROCERT was
distrusted in 2017 after multiple incidents of misissuance [29].
Chrome announced plans in 2017 to gradually distrust Symantec
roots after a long history of problems [30], [35].
A. Terminology
We use several PKI-speciﬁc terms throughout this work,
which we deﬁne below:
1) Subscriber Certiﬁcate: Subscriber certiﬁcates are provided
to end customers. In the web PKI, they are typically
used identify a website to a user agent. They are not CA
certiﬁcates.
2) Root Certiﬁcate: A root certiﬁcate is the type of CA
certiﬁcate shipped in a user agent’s root store and acts as
the trust anchor in the PKI.
3) Intermediate Certiﬁcate: Intermediates are a type of CA
certiﬁcate signed by a trust anchor. Authorities typically
sign subscriber certiﬁcates using an intermediate instead
of their root certiﬁcate. In some situations, trust anchors
will provide an intermediate certiﬁcate to a third-party
organization to sign their own certiﬁcates.
4) Organization: Many authorities use multiple intermediate
CA certiﬁcates for signing subscriber certiﬁcates. To group
these intermediate certiﬁcates together, we rely to the
Organization ﬁeld that CAs generally include in certiﬁcate
subjects. When we refer to organizations in this work, we
are referencing this ﬁeld.
5) Business Owner: This is the business entity responsible
for each intermediate in our dataset. A public record of
business owners is operated by Mozilla as a part of the
Common CA Database (CCADB) [32].
6) NSS Root Store: Mozilla Network Security Services (NSS)
is the cryptographic library used by Firefox for performing
TLS handshakes. The NSS root store contains the set of
trust anchors trusted by Firefox.
I I I . Z L I N T : A C E R T I F I C AT E L I N T E R
In order to programmatically detect ﬂaws in certiﬁcates,
we built ZLint—a linter that checks a certiﬁcate for con-
formance with RFC 5280 [14] and CA/B Forum Baseline
Requirements [9]. We manually dissected the two standards
and built a set of standalone lints that check a certiﬁcate for
problems in isolation. We note that the Baseline Requirements
standardize many aspects of issuance that cannot be veriﬁed
786
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:46 UTC from IEEE Xplore.  Restrictions apply. 
func (l * InvalidCertificateVersion ) Execute (
cert * x509 . Certificate ) * LintResult {
if cert . Version != 3 {
return & LintResult { Status : Error }
}
return & LintResult { Status : Pass }
}
func init () {
RegisterLint (& Lint {
Name : " e_invalid_certificate_version " ,
Description : " Certificates MUST be of
type X .509 v3 " ,
Source : CABFBaselineRequirements ,
Citation : " CABF BR 7.1.1 " ,
EffectiveDate : util . CABV130Date ,
Lint : & InvalidCertificateVersion {} ,
})
}
Code Block 1: Example Lint—Lints are self-contained Go
functions that check for adherence with technical standards.
This lint checks that a certiﬁcate uses the correct X.509 version.
in an isolated environment. For example, it is not possible
to determine whether the destination domain was correctly
validated. ZLint consists of 220 lints and has 95% coverage
of certiﬁcate-related BR clauses and 90% of RFC clauses.1
We note that the CA/B Forum Baseline Requirements [9] only
applies to ServerAuth certiﬁcates, that is, certiﬁcates used for
TLS server authentication.
Lints can be one of several severity levels,
including
N O T I C E, WA R N I N G, and E R R O R, which correspond to
varying requirement levels in standards documents. For example,
the failure to adhere to an RFC M U S T clause maps to
an E R R O R and disregarding a S H O U L D clause maps to a
WA R N I N G. ZLint does not contain any warning or error lints
that do not correspond to a speciﬁc RFC or BR clause.2 We label
any certiﬁcate containing an error as misissued. For an example,
consider the following clause from BR §7.1.1: Certificates
MUST be of type X.509 v3. In this situation, we would
produce an error (and consider the certiﬁcate misissued) if it
is any other X.509 version. We show the corresponding lint in
Code Block 1.
We note that while RFC 5280 is a static document, the
Baseline Requirements continually evolve. New requirements
typically are not retroactive, and as a result, not all BR clauses
apply to every certiﬁcate. To ensure that we fairly grade
historical certiﬁcates, we additionally encode an “effective
date” in each lint and do not use it to score certiﬁcates issued
prior to that date.
ZLint is not the ﬁrst certiﬁcate linter. We were inspired
by certlint, which was released by Peter Bowen in early
2016 [7] and has been used to uncover numerous PKI issues
(e.g., [37], [38]). Several other linters have since started in
parallel, including X.509 Lint [36] and GlobalSign certlint [25].
There are several architectural differences between ZLint and
1For a complete list, see https://zmap.io/zlint/coverage.
2We make one exception in mapping standards clauses to lint severity. The
common name ﬁeld is no longer recommended by the BRs, but is included
in nearly every subscriber certiﬁcate as many user agents do not correctly
parse certiﬁcates without a common name. We exclude the lint from our set
of warnings such that every certiﬁcate does not ﬂag a warning.
Issuer
Let’s Encrypt
Comodo
cPanel
Symantec
GeoTrust Inc.
GoDaddy
GlobalSign
Other
Total
Certiﬁcates
37 M (61%)
6.7 M (11%)
4.7 M (7.8%)
2.8 M (4.6%)
1.9 M (3.2%)
1.6 M (2.7%)
1.2 M (1.9%)
4.5 M (7.3%)
61 M (100%)
w/ Errors†
13 (0.0%)
3,219 (0.0%)
131 (0.0%)
23,053 (0.8%)
5,694 (0.3%)
38,215 (2.0%)
837 (0.0%)
67 K (1.5%)
140 K (0.02%)
w/ Warnings†
0 (0.0%)
7,902 (0.1%)
1 (0.0%)
2.7 M (99.9%)
1.9 M (99.9%)
5,186 (0.3%)
237 (0.0%)
1.3 M (28.7%)
6 M (9.9%)
TABLE I: Largest Authorities—We show the misissuance
rates for authorities (by organization ﬁeld) that have issued
at least 1M certiﬁcates. † Percentages are based on the total
certiﬁcates issued by the authority, not the certiﬁcates in the
associated severity class.
certlint. First, because we use ZLint to grade authorities, we
only include lints that are directly based on a published standard
(i.e., RFC 5280 and CA/B Forum BRs). We do not include
other community best practices as warnings or errors. Second,
we restrict lints to their effective periods. Third, instead of
producing an text-based errors of problems to investigate, ZLint
produces structured data that can be used for analysis. Fourth,
we implemented ZLint as a standalone Go library. ZLint can
validate 327K certiﬁcates per core hour, a 2235% speedup over
certlint, which can process 14K certiﬁcates per hour. We hope
that by implementing ZLint in a performant language, we can
encourage CAs to integrate linters into their issuance processes.
We have released ZLint under the Apache 2.0 license,3 and
it has been integrated into the two leading certiﬁcate search
engines, crt.sh [44] and Censys [17]. The Censys Team has
agreed to provide long term maintenance for the project, and we
have already begun to see contributions from several popular
certiﬁcate authorities.
I V. M I S I S S U A N C E T O D AY
We characterize misissuance by running ZLint on NSS-
trusted certiﬁcates in Censys [17]. Unless speciﬁed otherwise,
the numbers we present in this work are for the certiﬁcates
that were valid on July 23, 2017. In total, our dataset contains
61 M current certiﬁcates and 170 M historically trusted certiﬁ-
cates. These certiﬁcates were signed by 1320 CA certiﬁcates,
618 organizations, and 64 CCADB business owners. ZLint has
been integrated into Censys and the data we use in this paper
can be found in the normal Censys certiﬁcate dataset.
A. A Long Tail of Misissuance
There is a small amount of aggregate misissuance in
2017. Only 0.02% of certiﬁcates contain errors (i.e., are
misissued), while 3.3% have warnings. This represents a
signiﬁcant improvement from 2012, when more than 12%
of certiﬁcates contained errors (Figure 1, Figure 2). Though
the aggregate misissuance rate is low, this is largely due to
a small number of large authorities consistently producing
well-constructed certiﬁcates. Three authorities—Let’s Encrypt,
Comodo, and cPanel—signed for 80% of the certiﬁcates in
3ZLint is available at https://github.com/zmap/zlint.
787
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:36:46 UTC from IEEE Xplore.  Restrictions apply. 
Errors
Warnings
d
e
u
s
s
i
s
t
r
e
c
t
n
e
c
r
e
P
 40
 35
 30
 25
 20
 15
 10
 5
 0
2
0
0
9
2
0
1
0
2
0
1
1
2
0
1
2
2
0
1
3
2
0
1
4
2
0
1
5
2
0
1
6
2
0
1
7
Date
Fig. 1: Historical Misissuance—Except for a few exceptions,
error and warning rates have steadily decreased over time. The
2010 spike was caused by Thawte issuing a large number of
certiﬁcates without the Authority Key Identiﬁer (AKID) ﬁeld.
A similar event occurred in late 2014 when Symantec issued
certiﬁcates without a Subject Key Identiﬁer (SKID).
Year
2012
2013
2014