登录（Login）功能
针对暴力破解攻击的对策
密码的保存方式
自动登录
登录表单（Form）
错误消息
退出登录功能
5.1.1 登录功能
用户登录功能可以称为是认证处理中的核心，即通过对照用户输入的 ID、密码是否和数据库一致，若信息一致即认证成功。本书中把这种用户本人合法性验证的功能称为登录功能。
登录功能通常是通过执行类似下面的 SQL 语句，从数据库中检索满足用户 ID 和密码条件的记录，如果找到了相应的用户记录，就可以认为是登录成功了。
SELECT * FROM usermaster WHERE id=? AND password=?
针对登录功能的攻击
如果攻击者成功攻破了登录功能，就可以伪装成正常用户使用系统了。本书中将把这种攻击称为非法登录。认证功能的攻击有如下几种比较典型的案例。
通过 SQL 注入攻击来跳过登录功能
如果登录页面存在 SQL 注入漏洞，攻击者即使不知道用户的密码，也可以利用漏洞，跳过登录功能从而成功登录。关于 SQL 注入的内容在 4.4.1 节已经介绍过了，本章不会再进行更深入的讨论。
通过 SQL 注入攻击获取用户密码
同样，如果应用中存在 SQL 注入漏洞，则保存在数据库中的用户 ID 或者密码有可能被盗取。攻击者一旦拿到了这些用户的 ID 和密码，就可能冒充用户登录。
不过即使攻击者利用 SQL 注入漏洞盗取了用户的密码，我们也有办法让攻击者无法利用这些数据进行攻击。具体对策我们将在 5.1.3 节中说明。
在登录页面进行暴力破解
还有一种攻击方法是在登录页面不断地尝试使用各种用户 ID 和密码的组合来进行登录，具体方法包括暴力破解和字典破解等。
暴力破解（Brute Force Attack）使用的方法是利用所有的字符组合作为密码来进行尝试。
字典破解是事先准备一个“字典”，其中都是常被用户作为密码使用的字符组合，然后按顺序尝试字典里保存的密码组合（见图 5-1）。
图 5-1 反复尝试各种用户 ID 和密码组合进行攻击
不管利用上面哪种攻击方法，都需要尝试大量的用户 ID 或者密码组合，所以我们可以在登录功能中检测这种攻击并采取相应的预防措施，具体内容将会在 5.1.2 节中详细说明。
通过社会化攻击得到用户密码
社会化攻击（也称为社会化工程攻击，Social Hacking），指的是并不对计算机或者软件发起攻击，而是通过对欺骗用户，获取重要信息的攻击方法。典型的方法比如冒充领导或者服务器管理员给用户打电话，欺骗用户说“由于某项业务需要，请告知密码”，从而骗取用户的密码的行为。
此外，还有一种攻击方法是通过偷窥用户在输入密码时的页面或者键盘敲打来盗取密码，叫作 Shoulder Hack，这也是社会化攻击的一种。
Shoulder Hack 如果从字面意思来看的话有从用户背后探头窥视的意思，但是实际上即使不用伸出头，如果采用其他方法能窥视到的话，也能得到用户的密码。在本书中，我们将把通过偷窥得到用户密码的攻击行为统一称为 Shoulder Hack。应对 Shoulder Hack 攻击，可以采取遮盖密码输入框等方法，详细的内容请参考 5.1.5 节。
从 Web 应用程序本身来说，对于 Shoulder Hack 以外的其他社会化攻击就显得无能为力了。我们可以通过对员工、用户进行教育强化的方法来应对攻击，但这超出了本书的范围，就不在这里详述了。
通过钓鱼方法获取密码
钓鱼（Phishing）是指通过搭建和真实网站非常相像的山寨网站，诱骗用户输入密码等来获取个人信息的方法。这也是社会化工程（Social Engineering）的一种。在国外，频繁报道了大规模的钓鱼事件，在日本也报道过用户在山寨 Yahoo!JAPAN 和银行等钓鱼网站上受骗的案例。
预防钓鱼本首先是用户需要提高警惕，同时作为 Web 网站也应采取相应对策，我们将在 7.2 节里说明。
登录功能被破解后的影响
如果攻击者攻破了 Web 应用程序以他人名义非法登录，那么攻击者就拥有并且可使用用户的所有权限，比如阅读信息、修改、删除以及购物、转账、发帖等。
非法登录带来的破坏性与会话劫持是一样的，如果密码被攻击者知道了，有一些需要密码再次输入确认的功能都能被攻击者恶意使用（会话劫持则不能达到此目的）。
另外，会话劫持攻击一般都是被动攻击，攻击时需要用户发起某些活动，攻击者才能参与进来。而非法登录是一种主动攻击，不需要用户的参与。因此非法登录会对更多的用户产生影响。
综上所述，非法登录的影响比远超于会话劫持，属于重大安全隐患，需要制定万全的对策。
如何防止非法登录
在使用表单认证（或者叫密码认证）的应用里，为了防止非法登录，需要做到以下两点。
确保系统不存在 SQL 注入等安全性 Bug
使用难以猜测的密码
下面依次对这两点进行说明。
确保系统中不存在 SQL 注入等安全性 Bug
用户登录功能容易存在的安全隐患有以下几种 1
 ：
（A）SQL 注入（4.4.1 节）
（B）固定会话 ID（4.6.4 节）
（C）Cookie 的安全属性设置不完善（4.8.2 节）
（D）自由重定向漏洞（4.7.1 节）
（E）HTTP 消息头注入（4.7.2 节）
（A）的 SQL 注入漏洞之所以容易发生，是因为在一般的用户登录实现中都需要利用 SQL 在数据库中进行用户名密码比对。
（B）和（C）是用户登录认证后，在 Cookie 里保存会话 ID 时存在安全问题时所带来的安全隐患。
（D）和（E）虽然和用户认证没有直接关系，但是用户登录后，多数应用需要跳转到登录前的页面，结果导致登录功能经常出现此类安全隐患。
下面介绍一下有关密码预测难度的问题。
设置难以猜测的密码
密码认证的前提是“知道此密码的人只有合法用户”。基于这个前提，可以判断“只要某个人知道了密码，即可认为他就是合法用户”，但是如果其他人可以推测出此密码，那这个前提就不存在了。
所以，最基本的是我们需要确保用户的密码不能被其他人猜测到。比如在 4.6 节里提到的那样，如果使用类似密码学级别的伪随机数生成器的话，基本可以生成不能被猜测到的密码。
但是密码是需要用户自己输入的，程序生成的随机密码不容易记住，输入也很麻烦，所以实际上用户更多的是选择即好记也方便输入的字符串作为密码。
一般来说，用户使用便捷性（好记、输入方便）和系统安全强度（猜测的困难程度）如图 5-2 那样成反比关系。如果用户能在选择密码时能深思熟虑的话，应该可以选出密码安全度高，又能兼顾到用户使用方便性的密码。
图 5-2 密码的使用便捷性和安全强度的关系
密码的字符种类和长度要求
在设置一个不易被他人猜到的密码时，最基本的要素就是密码所使用的字符种类以及密码的长度。因为字符种类和密码长度决定了可以作为密码使用的字符串的总数量。
密码组合总数 = 字符种类的总数 ^ 密码位数
这里“^”是幂乘运算符。字符种类的数量指的是可以使用的字符的总数量，比如只用数字就是 10，只用小写英文字母就是 26 个等。表 5-1 显示的是根据可使用的字符种类及密码长度得到的各种可能的密码组合的总数。
表 5-1 密码总数
字符种类数量
4 位
6 位
8 位
10 种（数字）
1 万
100 万
1 亿
26 种（小写英文字母）
约 46 万
约 3 亿
约 2000 亿
62 种（大小写英文加数字）
约 1500 万
约 570 亿
约 220 兆
94 种（字母、数字加上各种符号）
约 7800 万
约 6900 亿
约 6100 兆
从上面的表中可以看出，字符种类和密码位数即使只是稍微增加某一项的值，密码组合的总数都将会大幅增加。
密码的使用现状
然而现实中用户使用的密码并没有表 5-1 说明的那样多，其原因就是用户更愿意使用好记和好输入的密码。也就是说，用户更倾向于使用如图 5-2 中右下角所显示的密码类型。
媒体已经报道了很多能佐证这种倾向的统计数据，我们介绍其中的一些报道 2
 。下面的报告都是基于非法获取的用户密码数据作出的统计分析。
RockYou 被盗的 3200 万个密码分析：使用最多的密码是“123456”
http://jp.techcrunch.com/archives/20100121depressing-analysis-of-rockyou-hacked-passwords/
从被泄露的 Htomail 密码中分析得出，使用的最多的是“123456”
http://journal.mycom.co.jp/news/2009/10/08/022/index.html
通过 MySpace 钓鱼网站收集到的密码中用的最多的是“password1”
https://itpro.nikkebp.co.jp/article/USNEWS/20061218/257183
通过这些报告我们很容易看出用户在满足密码限制条件的前提下，更愿意使用简单的密码。估计在密码限制条件为“长度在 10 个字符以上，大写字母、小写字母、数字和符号至少包含一个以上”的网站里，用户使用最多的密码就是“Password1!”吧。
在这种密码使用情况下，如何让用户设置更安全的密码，这正是网站运营方需要彰显智慧的地方。
应用程序设计中关于密码的需求
这一节我们将整理一下在应用程序设计中需要考虑的和密码相关的需求问题。
设置安全密码的最终责任在于用户本人，对应用程序来说最低需求是“不能妨碍用户选择安全的密码”。换句话说，就是不要超出实际需求，设置过于严格的字符种类和密码位数的限制。
应用程序关于密码中使用的字符种类和长度要满足最低需求，典型的有下面一些组合：
字符种类：英文字母和数字组合（区分大小写）
位数：最多可输入 8 个字符
但是有人可能觉得上面的限制太局限了，实际上我们也没有必要必须采用这样严格的限制，所以可以考虑下面的组合：
字符种类：所有 ASCII 字符（0x20～0x7E）
位数：128 位以内
如果放宽密码的字符种类和位数的限制，那么用户可能不只是使用简单的密码，还可能会使用密码短语（Passphrase）。密码短语取代简单的单词，使用若干的词组（Phrase）组成比较长的短句作为密码使用。
以上我们所说明的内容，是对密码的“容器”的要求。即应用程序准备了一个大的容器（即可使用的字符种类和密码位数），用户自己负责，自由地选择自己的密码。但是，现实中广泛使用的密码很多都是比较容易猜测和攻破的密码，因此越来越多的网站除了限制密码使用的字符和位数外，还对具体的密码内容进行检查、核对。
严格的密码检查原则
为了预防用户密码被攻击，Web 应用应该积极采取密码检查功能。其基本原则，有以下几种：
关于字符种类的检查（比如字母、数字、符号至少各一个）
关于密码位数（比如至少 8 位以上）
禁止使用和用户 ID 一样的密码
禁止使用密码词典里有的词汇做密码
Twitter 就使用了基于密码字典的密码可用性检查，比如图 5-3 是 Twitter 用户修改密码的页面 3
 ，在新密码输入框里面输入“password”后的截图。
图 5-3 Twitter 修改密码界面
页面里显示了“密码过于简单”的错误信息，这时如果坚持点击“修改”按钮的话，则会出错。
也许这样的检查有点过于严格，甚至引起人们质疑其违反了“密码选择是用户的责任”这一原则，但是反过来说这一措施有效避免了用户使用过于简单的密码。
1
 当然，这句话的意思并不是说系统就不存在其他安全隐患。
2
 这些报道都是笔者在 2010 年 10 月 20 日查阅过的。
3
https://twitter.com/settings/password
5.1.2 针对暴力破解攻击的对策
针对在线暴力破解攻击，账号锁定是一种有效的对抗方式。我们身边账号锁定最常见的例子就是银行卡，如果交易时连续 3 次输入错误密码，卡片就会被冻结。这样可以有效地防止银行卡被盗或者被别人捡到后非法使用。账号密码也一样，如果输错密码超过了一定次数，该账号也应该被锁定。
初步认识账号锁定
在 Web 应用程序里基本的账号锁定功能可以这样来实现：
记录每个用户 ID 的密码连续错误次数
如果密码错误次数超过了一定上限，则锁定此账号 ；被锁定的账号不能再次登录
账号被锁定后，通过邮件等方式通知该用户和系统管理员
用户正常登录后，清除之前记录的密码错误计数器
如果和 ATM 一样，最多只允许用户输入 3 次错误密码，可能有点太少，会导致用户账号频繁被锁定。所以这个次数设为 10 次比较合适 4
4
 在面向信用卡加盟商的安全标准 PCI DSS 2.0（https://zh.pcisecuritystandards.org/minisite/en/pci-dss-supporting-docs-v20.php
 ）7.5.13 节规定了“在尝试 6 次后锁定用户，阻止用户反复尝试访问”。像 PCI DSS 一样，如果系统需要遵守的标准明确规定了账号锁定策略的话，我们需要按照该策略规定去实现。
另外，如何给被锁定的账号解除锁定，可以参考下面的规则：
账号被锁定后 30 分钟 5
 ，自动给该用户解锁
管理员利用某些方法对用户进行验证后给该用户解锁
5
 在 PCI DSS 2.0 标准里也规定为 30 分钟（7.5.14）。
之所以选择 30 分钟后给用户解锁，为的就是能让正常用户能尽早登录进来。也许有人会觉得 30 分钟有点太过短暂，但实际上 30 分钟是比较合理有效的。
尝试 10 次输入密码错误后再经过 30 分钟等待解锁，这样攻击者为了验证 100 个密码需要四个半小时以上的时间，而且还会给系统管理员发送 10 次账号被锁定的系统通知。在这段时间里，管理员可以详细调查用户被锁定的情况，且根据需要，甚至可以封掉攻击来源的 IP。
暴力破解攻击的检测和对策
目前暴力破解攻击的变种有以下几种攻击方法。
字典攻击