title:Practical, Formal Synthesis and Automatic Enforcement of Security
Policies for Android
author:Hamid Bagheri and
Alireza Sadeghi and
Reyhaneh Jabbarvand Behrouz and
Sam Malek
2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Practical, Formal Synthesis and Automatic
Enforcement of Security Policies for Android
Hamid Bagheri
Reyhaneh Jabbarvand
Alireza Sadeghi
School of Information and Computer Sciences
{hamidb, alirezs1, jabbarvr, malek}@uci.edu
University of California, Irvine
Sam Malek
Abstract—As the dominant mobile computing platform, An-
droid has become a prime target for cyber-security attacks. Many
of these attacks are manifested at the application level, and
through the exploitation of vulnerabilities in apps downloaded
from the popular app stores. Increasingly, sophisticated attacks
exploit the vulnerabilities in multiple installed apps, making it
extremely difﬁcult to foresee such attacks, as neither the app
developers nor the store operators know a priori which apps will
be installed together. This paper presents an approach that allows
the end-users to safeguard a given bundle of apps installed on
their device from such attacks. The approach, realized in a tool,
called SEPAR, combines static analysis with lightweight formal
methods to automatically infer security-relevant properties from
a bundle of apps. It then uses a constraint solver to synthesize
possible security exploits, from which ﬁne-grained security poli-
cies are derived and automatically enforced to protect a given
device. In our experiments with over 4,000 Android apps, SEPAR
has proven to be highly effective at detecting previously unknown
vulnerabilities as well as preventing their exploitation.
I. INTRODUCTION
The ubiquity of smartphones and our growing reliance on
mobile apps are leaving us more vulnerable to cyber-security
attacks than ever before. According to the Symantec’s Norton
report [53], in 2013 the annual ﬁnancial loss due to cyber-
crime exceeded $113 billion globally, with every second 12
people become the victim of cybercrime. An equally ominous
report from Gartner [32] predicts 10 percent yearly growth in
cybercrime-related ﬁnancial loss through 2016. This growth
is attributed in part to the new security threats targeted at
emerging platforms, such as Google Android and Apple iOS,
as 38% of mobile users have experienced cybercrime [53].
This is, though, nowhere more evident than in the Android
market, where many cases of apps infected with malware and
spyware have been reported [51].
In this context, smartphone platforms, and in particular
Android, have emerged as a topic du jour for security re-
search. These research efforts have investigated weaknesses
from various perspectives, including detection of information
leaks [27], [33], [39], [44], analysis of the least-privilege
principle [28], [30], and enhancements to Android protection
mechanisms [21], [26], [31]. Above and beyond such security
techniques that are substantially intended to detect vulner-
abilities in a single application, researchers have recently
investigated techniques tackling security vulnerabilities that
arise due to the interaction of multiple applications, such as
inter-component data leaks [40], [41], [57] and permission
leaks [17], [38], shown to be quite common in the apps on
the markets.
While the prior techniques mainly aim to ﬁnd security
weaknesses in existing combination of apps, we are also
interested in the dual of this problem, that is what security
attacks are possible given a set of vulnerable apps? Many
Android malware are embedded in supposedly normal apps
that aim to leverage vulnerabilities in either the platform
or other apps on the market for nefarious purposes [52]. If
we could automatically generate security exploits for a given
combination of apps, it would allow us to identify possible
security attacks before the adversary, and thus protect our
systems prior to the realization of such attacks.
In this paper, we propose a proactive scheme to develop
Android security policies for vulnerabilities that occur due to
the interaction of apps comprising a system. Our approach
aims to automatically ﬁnd vulnerabilities in a given bundle of
apps and generate speciﬁcations of possible exploits for them,
which then can proactively be applied as preventive measures
to guard against yet unknown malicious behavior.
Speciﬁcally, we have developed an automated system for
synthesis and enforcement of security policies for Android,
called SEPAR, a Persian word for shield. It combines scalable
static analysis with lightweight formal methods. SEPAR lever-
ages static analysis to automatically infer security-relevant
facts about software systems.1 The app speciﬁcations are
sufﬁciently abstract—extracted at the architectural level—to
be amenable to formal analysis, and to ensure the technique
remains scalable to real-world Android apps, yet represent
the true behavior of the implemented software, as they are
automatically extracted from the app bytecode, and appear
sufﬁciently detailed to express subtle inter-app vulnerabilities.
SEPAR then uses a SAT-based engine to analyze the system
model against compositional security properties and generate
potential attack scenarios. In fact, it mimics the adversary
by leveraging recent advancements in constraint solving tech-
niques to synthesize possible security exploits, from which
ﬁne-grained security policies are then derived and enforced
for each particular system. The synthesis of system-speciﬁc
security policies allows the user to proactively deploy preven-
tive measures prior to the discovery of those exploits by the
adversaries.
To summarize, this paper makes the following contributions:
1By a software system, we mean a set of independently developed apps
jointly deployed on top of a common computing platform, e.g. Android
framework, that interact with each other, and collectively result in a number
of software solutions or services.
978-1-4673-8891-7/16 $31.00 © 2016 IEEE
DOI 10.1109/DSN.2016.53
514
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:14 UTC from IEEE Xplore.  Restrictions apply. 
• Formal Synthesis of Security Policies: We introduce a
novel approach to synthesize speciﬁcations of possible
exploits for a given combination of apps, from which
system-speciﬁc security policies are derived. The policy
synthesizer relies on a fully analyzable formal model of
Android framework and a scalable static analysis tech-
nique extracting formal speciﬁcations of Android apps.
• Runtime Enforcement of Security Policies: We develop a
new technology to automatically apply and dynamically
enforce the synthesized, ﬁne-grained policies (at the level
of event messaging), speciﬁcally generated for a particu-
lar collection of apps installed on the end-user device.
• Experiments: We present results from experiments run
on 4,000 real-world apps as well as DroidBench2.0 test
suite [4], corroborating SEPAR’s ability in (1) effective
compositional analysis of Android inter-application vul-
nerabilities and generation of preventive security poli-
cies, that many of those vulnerabilities cannot be even
detected by state-of-the-art security analysis frameworks;
(2) outperforming other compositional analysis tools also
in terms of scalability; and (3) ﬁnding multiple crucial
security problems in the apps on the markets that were
never reported before.
The remainder of paper is organized as follows. Section II
motivates our research through an illustrative example. Sec-
tion III provides an overview of SEPAR. Sections IV, V and VI
describe the details of static model extraction, formal synthesis
and dynamic enforcement of policies, respectively. Section VII
present implementation and evaluation of the research. The
paper concludes with an outline of the related research and
future work.
II. MOTIVATING EXAMPLE
To motivate the research and illustrate our approach, we
provide an example of a vulnerability pattern having to do with
inter-component communication (ICC) among Android apps.
Android provides a ﬂexible model of component communica-
tion using a type of application-level message known as Intent.
A typical app is comprised of multiple components (e.g.,
Activity, Service) that communicate using Intent messages.
In addition, under certain circumstances, an app’s component
could send Intent messages to another app’s components to
perform actions (e.g., take picture, send text message, etc.).
Figure 1 partially shows a bundle of two benign, yet vulnerable
apps, installed together on a device.
The ﬁrst application is a navigation app that obtains the
device location (GPS data) in one of its components and sends
it to another component of the app via Intra-app Intent messag-
ing. The Intent involving the location data (Listing 1, lines 3–
9), instead of explicitly specifying the receiver component, i.e.,
RouteFinder service, implicitly speciﬁes it through declaring
a certain action to be performed in that component. This
represents a common practice among developers, yet an anti-
pattern that may lead to unauthorized Intent receipt [24], as any
component, even if it belongs to a different app, that matches
the action could receive an implicit Intent sent this way.
On the other hand, the vulnerability of the second applica-
tion, a messenger app, occurs on line 11 of Listing 2, where
1 public class LocationFinder extends Service {
2
public void onStartCommand ( Intent intent , int flags , int
startId ){
LocationManager lm = getSystemService ( Context .
LOCATION_SERVICE );
Location lastKnownLocation =
lm. getLastKnownLocation ( LocationManager . GPS_PROVIDER );
Intent intent = new Intent () ;
intent . setAction (" showLoc ");
intent . putExtra (" locationInfo ", lastKnownLocation .
3
4
5
6
7
8
toString () );
startService ( intent );
... }
9
10
Listing 1: LocationFinder sends the retrieved location data
to another component of the same app via implicit Intent
messaging.
1 public class MessageSender extends Service
2
public void onStartCommand ( Intent intent , int flags , int
{
String number = intent . getStringExtra (" PHONE_NUM ");
String message = intent . getStringExtra (" TEXT_MSG ");
startId ) {
3
4
5 //if (hasPermission())
6
7
8
9
10
11
12
13
sendTextMessage ( number , message );
...}
void sendTextMessage ( String num , String msg ) {
SmsManager mngr = SmsManager . getDefault () ;
mngr . sendTextMessage (num ,null,msg ,null,null);
}
boolean hasPermission () {
if( checkCallingPermission (" android . permission . SEND_SMS "
)== PackageManager . PERMISSION_GRANTED )
return true;
return false;
14
15
16
17
}
}
Listing 2: MessageSender receives an Intent and sends a
text message.
MessageSender, speciﬁed as a public component in the app
manifest ﬁle, uses system-level API SmsManager, resulting
in a message sent to the phone number previously retrieved
from the Intent. This is a reserved Android API that requires
special access permissions to the system’s telephony service.
Although MessageSender has that permission, it also needs to
ensure that the sender of the original Intent message has the
required permission to use the SMS service. An example of
such a check is shown in hasPermission method of Listing 2,
but in this particular example it does not get called (line 6 is
commented) to illustrate the vulnerability.
Given these vulnerabilities, a malicious app can send the
device location data to the desirable phone number via text
message, without the need for any permission. As shown in
Figure 1, the malicious app ﬁrst hijacks the Intents containing
the device location info from the ﬁrst app. Then, it sends a
fake Intent to the second app, containing the GPS data and
adversary phone number as the payload. While the example
of Figure 1 shows exploitation of vulnerabilities in components
from two apps, in general, a similar attack may occur by
exploiting the vulnerabilities in components of either single
app or multiple apps. Moreover, since the malicious app
does not require any security sensitive permission, it is easily
concealed as a benign app that only sends and receives Intents.
This makes the detection of such malicious apps a challenging
task for individual security inspectors or anti-virus tools.
The above example points to one of the most challenging
issues in Android security, i.e., detection and enforcement
515
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:14 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1: A potential malicious application—its signature au-
tomatically generated by SEPAR—leverages vulnerabilities in
other already installed benign applications to perform actions
(like sending device location through text messages) that are
beyond its individual privileges. As the Android access control
model is per app, it cannot check security posture of the entire
system. SEPAR generates and enforces compositional policies
that prevent such an exploit.
of compositional security policies to prevent such possible
exploits. What is required is a system-level analysis capability
that not only identiﬁes the vulnerabilities and capabilities in
individual apps, but also determines how those individual
vulnerabilities and capabilities could affect one another when
the corresponding apps are installed together. In the next
sections, we ﬁrst provide an overview of SEPAR and then delve
into more details about its approach to address these issues.
III. APPROACH OVERVIEW
This section overviews our approach to automatically syn-
thesize and enforce system-speciﬁc security policies for such
vulnerabilities that occur due to the interaction of apps com-
prising a system. As depicted in Figure 2, SEPAR consists
of three main components: (1) The Android model extractor
(AME) that uses static analysis techniques to automatically
elicit formal speciﬁcations of the apps comprising a sys-
tem; (2) The analysis and synthesis engine (ASE) that uses
lightweight formal analysis techniques [3] to ﬁnd vulnerabili-
ties in the extracted app models, and generates speciﬁcations
of possible exploits, and in turn, policies for preventing their
manifestation; (3) The Android policy enforcer (APE) that
enforces automatically generated, system-wide policies on
Android applications.
The AME component
takes as input a set of Android
application package archives, called APK ﬁles. APKs are
dalvik bytecode packages used to distribute and install An-
droid applications. To generate the app speciﬁcations, AME
ﬁrst examines the application manifest ﬁle to determine its ar-
chitectural information. It then utilizes different static analysis
techniques, i.e., control ﬂow and data ﬂow analyses, to extract
other essential information from the application bytecode into
an analyzable speciﬁcation language.
The ASE component, in addition to extracted app speciﬁ-
cations, relies on two other kinds of speciﬁcations: a formal
foundation of the application framework and the axiomatized
inter-app vulnerability signatures. The Android framework
speciﬁcation represents the foundation of Android apps. Our
formalization of these concepts includes a set of rules to lay
Fig. 2: Approach Overview.
this foundation (e.g., application, component, messages, etc.),
how they behave, and how they interact with each other. It can
be considered as an abstract, yet precise, speciﬁcation of how
the framework behaves. We regard vulnerability signatures
as predicates that model Android inter-app vulnerabilities in
relational logic, representing their essential characteristics as
exhibited when the vulnerability is exploited. All the speciﬁca-
tions are uniformly captured in the Alloy language [3]. Alloy
is a formal speciﬁcation language based on relational logic,
amenable to fully automated yet bounded analysis.
SEPAR is designed as a plugin-based software that provides
extension points for analyzing apps against different types of
vulnerabilities. In order to analyze each app, we distill each
known inter-app vulnerability into a corresponding formally-
speciﬁed signature to capture its essential characteristics, as
manifested when the vulnerability is exploited. Our current
SEPAR prototype supports inter-component vulnerabilities,
such as Activity/Service launch, Intent hijack, privilege es-
calation, and information leakage [21], [24], [35]. Its plugin-