ESI 
SI 
SILx64 
又称源寄存器（Source），是 REP MOVSx 和 REP CMPSx 指令默认的数据源。 
A.2.6  RDI/EDI/DI/DIL 
7 
6 
5 
4 
3 
2 
1 
0 
RDIx64 
EDI 
DI 
DILx64 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 A  x86 
911 
又称目标寄存器（Destination），是 REP MOVSx、REP STOSx 指令默认的目标寄存器。 
A.2.7  R8/R8D/R8W/R8L 
7 
6 
5 
4 
3 
2 
1 
0 
R8 
R8D 
R8W 
R8L 
A.2.8  R9/R9D/R9W/R9L 
7 
6 
5 
4 
3 
2 
1 
0 
R9 
R9D 
R9W 
R9L 
A.2.9  R10/R10D/R10W/R10L 
7 
6 
5 
4 
3 
2 
1 
0 
R10 
R10D 
R10W 
R10L 
A.2.10  R11/R11D/R11W/R11L 
7 
6 
5 
4 
3 
2 
1 
0 
R11 
R11D 
R11W 
R11L 
A.2.11  R12/R12D/R12W/R12L 
7 
6 
5 
4 
3 
2 
1 
0 
R12 
R12D 
R12W 
R12L 
A.2.12  R13/R13D/R13W/R13L 
7 
6 
5 
4 
3 
2 
1 
0 
R13 
R13D 
R13W 
R13L 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
912 
逆向工程权威指南（下册） 
A.2.13  R14/R14D/R14W/R14L 
7 
6 
5 
4 
3 
2 
1 
0 
R14 
R14D 
R14W 
R14L 
A.2.14  R15/R15D/R15W/R15L 
7 
6 
5 
4 
3 
2 
1 
0 
R15 
R15D 
R15W 
R15L 
A.2.15  RSP/ESP/SP/SPL 
7 
6 
5 
4 
3 
2 
1 
0 
RSP 
ESP 
SP 
SPL 
SP 是栈指针 Stack Pointer 的缩写。在初始化之后，它是当前栈地址的指针。 
A.2.16  RBP/EBP/BP/BPL 
7 
6 
5 
4 
3 
2 
1 
0 
RBP 
EBP 
BP 
BPL 
帧指针（Frame Pointer），通常是局部变量的指针。在调用函数时，它也常常用来传递参数。有关这个
寄存器的详细介绍，请参照本书的 7.1.2 节。 
A.2.17  RIP/EIP/IP 
7 
6 
5 
4 
3 
2 
1 
0 
RIPX64 
EIP 
IP 
指令指针 instruction pointer 应当总是指向接下来将要执行的那条指令。正常情况下，无法直接干预它
的值。但是，下述指令可以等效地实现调整指令指针的功能： 
MOV EAX,  ... 
JMP EAX 
或者： 
PUSH Value 
RET 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
附录 A  x86 
913 
A.2.18  段地址寄存器 CS/DS/ES/SS/FS/GS 
CS/DS/SS/ES 分别代表 Code Segment 代码段寄存器、Data Segment 数据段寄存器、Stack Segment 堆栈
段寄存器和 Extra Segment 附加段寄存器。 
在 Win32 系统里，FS 附加段寄存器（Extra Segment Register）承担 TLS（线程本地存储/Thread Local 
Storage）的角色；而在 Linux 系统里，GS（另一个附加段寄存器）承担这个角色。早期，这两个寄存器用
于实现段式寻址；而现在，它们用于提供更为快速的 TLS 和 TIB（线程信息块/ThreadInformationBlock）功
能。有关段地址寄存器的详细介绍，请参见本书第 94 章。 
A.2.19  标识寄存器 
标识寄存器即 Eflags。 
Bit 位（及掩码） 
缩写（及含义） 
描    述 
0（1） 
CF（进/借位） 
除了常规计算指令之外，专门操作 CF 的指令还有 CLC/STC/CMC  
2（4） 
PF（奇偶标识位） 
参见 17.7.1 节 
4（0x10） 
AF（辅助进/借位标识） 
6（0x40） 
ZF（零标识位） 
ZF 用来反映运算结果是否为 0。如果运算结果为 0，则其值为 1，
否则其值为 0 
7（0x80） 
SF（符号位） 
8（0x100） 
TF（追踪标识） 
当追踪标志 TF 被置为 1 时，CPU 进入单步执行方式，即每执行一
条指令，产生一个单步中断请求。这种方式主要用于程序的调试 
9（0x200） 
IF（中断允许标识） 
中断允许标志用来决定 CPU 是否响应 CPU 外部的可屏蔽中断发出
的中断请求。CLI/STI 指令可对它进行赋值 
10（0x400） 
DF（方向标识） 
决定在执行串操作指令（REP MOVSx、REP CMPSx、REP LODSx
和 REP SCASx）时有关指针寄存器发生调整的方向。CLD/STD 指令
可对它进行赋值 
11（0x800） 
OF（溢出标识） 
12,13（0x3000） 
IOPL（I/O 特权标识）80286 
14（0x4000） 
NT（嵌套任务标志）80286 
16（0x10000） 
RF（重启标识）80386 
重启动标识用来控制是否接受调试。如果它的值为 1，那么 CPU 将
忽略 DRx 中的硬件断点调试功能 
17（0x20000） 
VM（虚拟 8086 方式标志）80386 
18（0x40000） 
AC（对准校验方式位）80486 
19（0x80000） 
VIF（虚拟中断标志）Pentium 
20（0x100000） 
VIP（虚拟中断未决标志）Pentium 
21（0x200000） 
ID（标识标志）Pentium 
其余的标识位都是保留标识位。 
A.3  FPU 寄存器 
FPU 栈由 8 个 80 位寄存器构成，这 8 个寄存器分别叫作 ST（0）～ST（7）。IDA 把 ST（0）显示为
ST。FPU 寄存器用于存储符合 IEEE 754 标准的 long double 型数据。这种数据的格式如下表所示。 
第 79 位 
第 78-64 位 
第 63 位 
第 62-0 位 
符号位 
指数位 
整数位 
尾数（小数）位 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
914 
逆向工程权威指南（下册） 
A.3.1  控制字寄存器（16 位） 
FPU 的控制字（Control Word）用于控制 FPU 的行为。 
位 
缩写（及含义） 
描    述 
0 
IM（无效操作掩码） 
1 
DM（操作数规格异常掩码） 
2 
ZM（除数为 0 的掩码） 
3 
OM（上溢/溢出掩码） 
4 
UM（下溢/溢出掩码） 
5 
PM（精度异常掩码） 
7 
IEM（异常中断位/软件处理控制位） 
第 0～5 位掩码控制功能的总开关，现在的 FPU 已经不可对其赋
值。若 IEM 为 0，则由 FPU 处理所有的异常信息，从而对软件屏
蔽了所有的错误信息。默认值为 1 
8，9 
PC（精度控制） 
00：IEEE 单精度 24 位（REAL4） 
01：保留 
10：IEEE 双精度 53 位（REAL8） 
11：IEEE 扩展双精度 64 位（REAL10） 
10，11 
RC（舍入控制） 
00：就近舍入（默认） 
01：向−∞舍入 
10：向+∞舍入 
11：截断（向零舍入） 
12 
IC（无限/∞控制位） 
0：按照 unsigned 处理±∞（初始态） 
1：按照 signed 处理∞ 
若 PM、UM、OM、ZM、DM、IM 字段（第 0～5 位）设置为 1，则由 FPU 处理异常信息（对软件屏
蔽了错误信息）；若某位设置为 0，则 FPU 将会在遇到相应异常时进行中断、释放异常信息给应用程序，
程序在处理之后再把控制权返还给 FPU。 
A.3.2  状态字寄存器（16 位） 
FPU 的状态寄存器又称 Fstate，属于只读寄存器。 
位序 
缩写（及含义） 
描    述 
15 
B（忙） 
1：FPU 正在进行运算 
0：FPU 可进行下次运算 
14 
C3（条件代码位 C3） 
13，12，11 
TOP（栈顶指针） 
ST（0）使用的物理寄存器 
10 
C2（条件代码位 C2） 
9 
C1（条件代码位 C1） 
8 
C0（条件代码位 C0） 
7 
IR（中断请求） 
6 
SF（栈异常） 
5 