Pool的初始化
uint
poolp next;
poolp
LOCKU:
I(nbytes.
//获得 size class index
图16-8第一次申请28字节的内存块时usedpools中相关的内存布局
size;
pool;
深度探索动态语言核心技术
//usedpools中无可用pool，尝试获取empty状态poo1
//usedpools中有可用的poo
(pooll=
0x1e285608
(uint:）（nbytes=
useoDoolslsize
1)>AIGNMENT_SHIET;
s=（unt）（bes-1）>>ALICNTS
int =0
There is a used pool for this Bize
505059696
0x1e285508
83
Value
x00b66000
(ref=1_padding=0x00be
rcoumt=
---
## Page 477
代码清单16-4
用作32字节的pool。当下一次内存分配请求分配64字节的内存时，Python可以直接使用
class size index。
个pool。需要特别注意的是，当前获得的arena中包含的这些pools可能并不属于同一个
任何可用的pol，Python会从usablearernas链表中的第一个“可用的”arena中获得一
classsizeindex（3）在usedpools中对应的位置查找，如果发现在对应的位置后并没有链接
个字节的内存时，Python实际上将申请32字节的内存。Python首先会根据32字节对应的
[obmalloc.c]
roid *Pyobject_Malloc(size_t nbytes)
前“可用的”arena的另一个pool即可。这正如我们前面所说，arena没有sizeclass的
性，
IF((nbyteS1）SMALL_REQUEST_THRESHOLD）
考虑一下这样的情况，当申请32字节内存时，从“可用的”arena中取出其中一个pool
uint size;
block
而pool才有（见代码清单16-4）。
tnit pool:
Dool
1f
size
LOCK():
Pool
100
usable_arenas->freepools = pool-Snextpool;
//[3]：调整usable_arenas链表中第一个arena中的可用pool数量
usable_arenas->nextarena
usable_arenas
-usable_arenas->nfreepoolsi
//usedpools中有可用的pool
(uint)(nbytes:
Sruaxe
usable_arenas->prevarena = NuLL;
_arenas->freepoolsi
NULL）
>nfreep
usable_
ALIGNMENT_SHTPT;
OOLS
Python源码剖析
usable_arenas->prevarena =NULl;
_arenas->nextarenas
0）0
16.2小块空间的内存池
一深度探索动态语言核心技术
447
---
## Page 478
Python源码剖析
448
初始化之
代码清单16-5
效率，我们需要将这个pool放入到usedpools中。这一步，叫做initpool（见代码清单16-5）。
处发现poo1为NULL时Python会怎么处理呢，我们把这个话题放到后面。
么情况下，
还有个arenas数组啊，孙猴子再厉害，也逃不出如来佛的魔爪的。
说了，你不能摘下来就一了百了啊，摘下来之后这块内存不就失去控制了？别急，别忘了
arena中可用的pool已经用完之后，将该arena从usable_arenas链表中摘除。那位客官
功地取出了这个pool，那么在[31处，Python会进行一些维护信息的更新工作，甚至在当前
arena 被纳入了usable_arenas 的控制。在代码清单16-4的[2]处，Pyhon会尝试从
init_pool:
[obmalloc.c]
留下来的问题的答案，在这里，一个脱离了urused_arena_objects并转变为“可用”的
#defineROUNDUP(x)
好了，现在我们手里有了一块用于32字节内存分配的pool，为了以后提高内存分配的
需要注意的是，在代码清单16-4的[2]处的判断表明获得pool有可能失败，那么在什
可以看到，如果开始时usable_arenas为空，那么Python会在代码清单16-4的[1]
第16章Python的内存管理机制
Pyobjeet_Malloe(size_tnbytes)
POOL
一个arena中的freepools会是NULL呢，响，回忆一下前面对new_arena的剖
一深度探索动态语言核心技术
7/[3]：初始化poolheader，将freeblock指向第二个block，返回第一个block
next->prevpool
next-snextpool
pool->freeblock=*(block**)bp:
OVERHEAD.
return.(voia *)bp:
Toodaxeu-
XPTZS
->freeblock;
(（x）
next;
ROUNDuP(sizeof (struct pool_header))
pool
next
slze)
ALIGNMENT_MASK)&
ALIGNMENT_MASK)
---
## Page 479
初始化之二
是怎么样来初始化其中的pool集合，并最终完成pyobject_Malloc函数的分配一个block
一致时，才会执行代码清单16-5的[2]，否则，Pyhon还是会照常进行[3]，以重新对poo1
poo1被使用时的信息。只有当当前内存分配动作对应的sizeclassindex与这个szidx完全
中是如何体现的。
同时，这个pooi也就从empty状态转换到了used状态。下面我们看一看这个行为在代码
护的pool链表头部的poo1将被取出来，放入usedpools中，并从其内部分配一块block。
Python维护的全局变量freepools中还有处于empty的pool，那么位于freepoo1s所维
内存的sizeclassindex为i，且usedpools[i+门处没有处于used状态的pool，同时在
时szidx还是其转为empty状态之前的szidx，所以才有可能执行[2]。
这个终极任务的（见代码清单16-6）。
进行初始化。
执行[3]，而不会执行[2]。只有当一个poo1从empty状态重新转为used状态之后，由于这
从后面的分析可以看到，其szidx是被设为了OxFFFF的，所以这时initpoo1的动作会
被使用的poo1（也就是由new_arena返回的aerma中的pooi）被链入usedpools中时，
[obmalloc.c]
一个poo1从empty状态转为used状态时，携带了有效的szidx信息，但是这只是上一次
1
我们现在可以来看看，当Pyobject_Malloc从new_arena中得到一个新的arena后，
其中[init_poo1]处引用的是前面剖析的关于initpol的代码。需要注意的是，虽然
在什么样的情况下才会发生一个poo1从empty状态转换为used状态呢？假设申请的
在代码清单16-5的[1]处，Python将得到的poo1放入了useapools中。当一个从未
ueable_arenas->freepools=pool->nextpool;
pool->maxnextoffset =PooL_SIzE- size;
size
pool->szidx=size;
0o0l-
DP
=usable_arenas->freepools
(block
//调整usable_arenas->nfreepools和usable_arenas 自身
INDEX2SIZE(siZe):
TOoC
bpsize
POOL
POOL_OVERHEAD;
OVERHEAD
Python源码剖析
16.2
(sizearenaindexarenaindex].addressl=0;
(PLr)P
*bpr
一深度探索动态语言核心技术
usable_arenas->prevarena =NULl
从arena中取出一个新的pool
(poolp)usablearehas-
arena:
usable
poo1为指向一个DOo1的指针
OXEEEE
118
>pool_address:
completely allocated.
/size class of newly cached pools
/
---
## Page 481
init pool:
Pyobject_Malloc的细节中。
PyObject_Mal1oc的总体的结构：同时，强烈建议您打开代码阅读的工具，
请内存的过程中，
usedpools中的任务。
[obmalloc.c]
oid·Pyobject_Malloc(size_t nbytes)
1然后转入goto到主nitDoo1的动作处：初始化一个特定的pool
1/获取pool失败，对arena中的pool集合进行初始化，
bloek *bp:
无论什么开源的项目，
poolp
drood
否则，转向maLloc
如果申请的内存小于SMALLREQUEST_THRESHOLD，使用Python的小块内存的内存池
7/usedpools中没有可用的pool，
7/根据申请内存的大小获得对应的 sizeclass index
S
ze=
//获取pool成功，进行initpooi的动作，将pool放入used_pools中
next
TOOG
7/并返回分配得到的block
usable_arenas
return (void ）bp:
next
pool
next
//分配结束后，
usable
(uint)(nbytes
Toodhxau-tood=
，还有一些细节这里就不再一一涉及了，不过最后我们还是要给出
prevpool;
new
next;
1
arena():
使用这个ppo1来分配block
ALIGNMENT_SHIFT;
Python源码剖析
16.2小块空间的内存池
一深度探索动态语言核心技术
一头扎进
451
---
## Page 482
Python源码剖析
16.2.4.3
452
最简单的情况，我们从这个最简单的情况说起。
态，它们各自的位置是不同的。
是将一块block归还给pool，我们已经知道，poo1可能有3种状态，在分别处于3种状
[obmalloc.c]
redirect:
第16章Python的内存管理机制
当然，更多的情况是pool中尽管收回了一个block，但是它仍然处于used状态。这是
考察完了对block的分配，是时候来看看对block的释放了。对block的释放实际上就
free(p):
1/待释放的内存在PyObject_Malloc中是通过malloc获得的
poolp pool:
fuill状态转变为used状态
used状态转变为empty状态
当我们释放一个block后，可能会引起pool的状态的转变，这种转变可分为两种情况：
//所以要归还给系统
block的释放
i（nbytes=O)
//设置离散自由block链表
一深度探素动态语言核心技术
ADDRESS
return;