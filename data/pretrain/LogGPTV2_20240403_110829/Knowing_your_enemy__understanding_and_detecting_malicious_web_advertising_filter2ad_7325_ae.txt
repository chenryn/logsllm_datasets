can be more difﬁcult than it appears to be. Take the role feature
as an example: the attacker who assigns an ad-related URL to a
compromised non-ad host could risk exposing that host, due to the
discrepancy between what the host was and what it looks like now.
On the other hand, further research is needed to better prepare our
approach for these evasion attacks.
We envision that MadTracer can beneﬁt both service providers
and Web users in multiple aspects. Large ad networks can use Mad-
Tracer to identify fraudulent activities, compromised and malicious
syndicators, and infected publishers. The detected malicious ad
contents can be fed into anti-virus systems to generate new content-
based attack signatures. Finally, a browser-based protection mech-
anism can utilize the knowledge of malicious ad paths and their
topological features to raise an alarm when a user’s browser starts
to walk down a suspicious ad path, protecting the user before she
reaches an exploit server.
9. CONCLUSION
Today’s Web advertising is permeated by malicious ads, which
pose a serious threat to the Web users and legitimate businesses.
This paper reports our measurement study for better understand-
ing the infrastructure for delivering malicious ads. Based on a
large-scale Web crawling, we reveal the gravity of the threat. We
show that such attacks infected hundreds of publisher pages and
inﬁltrated major ad networks including DoubleClick. The insights
gained through the measurement study leads us to develop a new
topology-based detection system—MadTracer. Our evaluation sho-
ws that MadTracer works effectively against real-world malver-
tising activities:
it caught 15 times as many malicious domain-
paths as Google Safe Browsing and Microsoft Forefront combined,
and also discovered several large-scale malvertising campaigns, in-
cluding a new type of click-fraud attack. A more detailed sum-
mary of our ﬁndings will be released on www.madtracer.org.
Our work demonstrates that topology-based detection holds a great
promise to more effectively mitigate malvertising threats.
Acknowledgements
We thank anonymous reviewers for their insightful comments. We
are grateful for the help provided from Microsoft Forefront for at-
tack analysis.
IU authors also acknowledge NSF CNS-1017782
and CNS-1223477 for the support.
10. REFERENCES
[1] Adblock plus. http://adblockplus.org/en/.
[2] Display network google ads. http:
//www.google.com/ads/displaynetwork/.
[3] Wordpress, blog tool, publishing platform, and cms.
http://wordpress.org/.
[4] Adobe. Adobe ﬂash platform.
http://www.adobe.com/flashplatform, 2011.
[5] P. F. Brown, P. V. deSouza, R. L. Mercer, V. J. D. Pietra, and
J. C. Lai. Class-based n-gram models of natural language.
Computational Linguistics, 18:467–479, 1992.
[6] S. K. Cha, I. Moraru, J. Jang, J. Truelove, D. Brumley, and
D. G. Andersen. SplitScreen: enabling efﬁcient, distributed
malware detection. In Proceedings of the 7th USENIX
conference on Networked systems design and
implementation, NSDI’10, page 25, Berkeley, CA, USA,
2010. USENIX Association.
[7] M. Cova, C. Kruegel, and G. Vigna. Detection and analysis
of drive-by-download attacks and malicious javascript code.
In Proceedings of the 19th international conference on World
wide web, WWW ’10, pages 281–290, New York, NY, USA,
2010. ACM.
[8] D. Crockford. Adsafe. http://www.adsafe.org.
[9] B. Edelman. Benjamin edelman - publications.
http://www.benedelman.org/publications/,
July 2012.
[10] M. Finifter, J. Weinberger, and A. Barth. Preventing
capability leaks in secure javascript subsets. In NDSS. The
Internet Society, 2010.
[11] D. Fisher. Google removes .co.cc subdomains over phishing,
spam concerns. http://threatpost.com/en_us/
blogs/google-removes-cocc-subdomains-
over-phishing-spam-concerns-070611, 2011.
[12] S. Ford, M. Cova, C. Kruegel, and G. Vigna. Analyzing and
detecting malicious ﬂash advertisements. Computer Security
Applications Conference, Annual, 0:363–372, 2009.
[13] M. Gandhi, M. Jakobsson, and J. Ratkiewicz.
Badvertisements: Stealthy click-fraud with unwitting
accessories. Journal of Digital Forensics Practice, 1(2),
2006.
[14] Google. What is an ad tag? - doubleclick for publishers help.
http://support.google.com/dfp_premium/
bin/answer.py?hl=en&answer=1131465.
[15] S. Hao, N. A. Syed, N. Feamster, A. G. Gray, and S. Krasser.
Detecting spammers with snare: spatio-temporal
network-level automatic reputation engine. In Proceedings of
the 18th conference on USENIX security symposium,
SSYM’09, pages 101–118, Berkeley, CA, USA, 2009.
USENIX Association.
[16] J. P. John, F. Yu, Y. Xie, A. Krishnamurthy, and M. Abadi.
deseo: combating search-result poisoning. In Proceedings of
the 20th USENIX conference on Security, SEC’11, pages
20–20, Berkeley, CA, USA, 2011. USENIX Association.
[17] C. Larsen. Busting a big malvertising / fake-av attack.
http://www.bluecoat.com/security/
security-archive/2011-07-25/busting-big-
malvertising-fake-av-attack-0, July 2011.
[18] K. Levchenko, N. Chachra, B. Enright, M. Felegyhazi,
C. Grier, T. Halvorson, C. Kanich, C. Kreibich, H. Liu,
D. McCoy, A. Pitsillidis, N. Weaver, V. Paxson, G. M.
Voelker, and S. Savage. Click Trajectories: End-to-End
Analysis of the Spam Value Chain. In Proceedings of 32nd
annual Symposium on Security and Privacy. IEEE, May
2011.
[19] M. T. Louw, K. T. Ganesh, and V. N. Venkatakrishnan.
Adjail: practical enforcement of conﬁdentiality and integrity
policies on web advertisements. In Proceedings of the 19th
USENIX conference on Security, USENIX Security’10,
pages 24–24, Berkeley, CA, USA, 2010. USENIX
Association.
[20] L. Lu, R. Perdisci, and W. Lee. Surf: detecting and
measuring search poisoning. In Proceedings of the 18th ACM
conference on Computer and communications security, CCS
’11, pages 467–476, New York, NY, USA, 2011. ACM.
[21] L. Lu, V. Yegneswaran, P. Porras, and W. Lee. Blade: an
684attack-agnostic approach for preventing drive-by malware
infections. In Proceedings of the 17th ACM conference on
Computer and communications security, CCS ’10, pages
440–450, New York, NY, USA, 2010. ACM.
[22] McAfee. Mcafee web gateway.
http://www.mcafee.com/us/products/web-
gateway.aspx#vtab-Benefits, 2011.
[23] B. Miller, P. Pearce, C. Grier, C. Kreibich, and V. Paxson.
What’s clicking what? techniques and innovations of today’s
clickbots. In Proceedings of the 8th international conference
on Detection of intrusions and malware, and vulnerability
assessment, DIMVA’11, pages 164–183, Berlin, Heidelberg,
2011. Springer-Verlag.
[24] F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and
G. Vigna. Cross-site scripting prevention with dynamic data
tainting and static analysis. In In Proceeding of the Network
and Distributed System Security Symposium (NDSS’07),
2007.
[25] A. NS. Blackhole exploit kit 1.0.2.
http://www.airdemon.net/blackhole.html,
2011.
[26] R. Petnel. The ofﬁcial easylist web site.
http://easylist.adblockplus.org/en/.
[27] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose.
All your iframes point to us. In Proceedings of the 17th
conference on Security symposium, pages 1–15, Berkeley,
CA, USA, 2008. USENIX Association.
[28] B. Stone-Gross, R. Stevens, R. Kemmerer, C. Kruegel,
G. Vigna, and A. Zarras. Understanding fraudulent activities
in online ad exchanges. In Proceedings of Internet
Measurement Conference, IMC ’11, 2011.
[29] Sucuri. Mass infection of wordpress sites due to timthumb.
http://blog.sucuri.net/2011/08/mass-
infection-of-wordpress-sites-counter-
wordpress-com.html, 2011.
[30] K. Thomas, C. Grier, J. Ma, V. Paxson, and D. Song. Design
and evaluation of a real-time url spam ﬁltering service. In
Proceedings of the 2011 IEEE Symposium on Security and
Privacy, SP ’11, pages 447–462, Washington, DC, USA,
2011. IEEE Computer Society.
[31] TrendLabs. Follow the money trail.
http://blog.trendmicro.com/follow-the-
money-trail/, March 2012.
[32] A. VANCE. Times web ads show security breach.
http://www.nytimes.com/2009/09/15/
technology/internet/15adco.html, 2009.
[33] Y. Wang, D. Burgener, A. Kuzmanovic, and M.-F. Gabriel.
Understanding the network and user-targeting properties of
web advertising networks. In ICDCS, pages 613–622, 2011.
[34] Whois.net. Whois lookup - domain names search,
registration, & availability. http://www.whois.net/,
2011.
[35] Y. Xie, F. Yu, K. Achan, R. Panigrahy, G. Hulten, and
I. Osipkov. Spamming botnets: signatures and
characteristics. In Proceedings of the ACM SIGCOMM 2008
conference on Data communication, SIGCOMM ’08, pages
171–182, New York, NY, USA, 2008. ACM.
[36] ZenithOptimedia. Global ad expenditure to return to
pre-recession peak level this year. http://www.
zenithoptimedia.com/files/media/image/
news/Press%20Release%20files/2011/July/
Adspend%20forecasts%20July%202011.pdf,
2011.
[37] J. Zhang, C. Seifert, J. W. Stokes, and W. Lee. Arrow:
Generating signatures to detect drive-by downloads. In
Proceedings of the 20th international conference on World
wide web, WWW ’11, pages 187–196, New York, NY, USA,
2011. ACM.
APPENDIX
A. COMPARISON WITH INDIVIDUAL NO-
DE CLASSIFIER
As a comparison, we evaluate the effectiveness of malvertising de-
tection by applying the combination of features (as described in
Section 5.1) on individual nodes for detection. We also use the
same method and datasets as described in Section 5.1 and 6.1 for
learning a set of detection rules.
Such individual node based classiﬁer detects 20,533 domain-
paths in the Testing-Jun-Sep dataset. However 17,614 of them are
actually false-positives. Using the Testing-Oct dataset, the classi-
ﬁer detects 25,308 domain-paths with 23,140 of them being false-
positives. For both datasets, the false detection (FD) rates are over
85%, and are signiﬁcantly higher than those of MadTracer.
We sample a subset of the false positive domain-paths and ﬁnd
that most of them are detected because they either involve newly
registered ad networks or ad networks that do not follow the URL
patterns deﬁned by EasyList. However, such ad networks all have
legitimate portal sites and are unlikely to be hosted by attackers.
Meanwhile, the number of truly malicious pages and domain-
paths that are successfully detected by the single-node based clas-
siﬁer is smaller than that by using MadTracer. We ﬁnd that the
rules that can detect malicious pages or domain-paths also incur a
high false positive rate on the training data. So these rules are not
selected by the learning framework for detection.
B. A LARGE CLICK-FRAUD ATTACK DE-
TECTED
Figure 13: The ﬂow graph of a click-fraud case.
Figure 13 shows the trafﬁc ﬂow of a big click-fraud campaign
that we detected. The major entities involved in this campaign in-
clude compromised Web sites, attacker created shady (i.e.,fraudul-
ent) search engines, legitimate pay-per-click (PPC) ad networks,
and legitimate advertisers. Below, we present how this click-fraud
attack exploits online advertising channels.
In this example, attackers control a large number of Web sites
that are set up using old versions of WordPress [3] with known
vulnerabilities. These sites were compromised [29] to redirect traf-
ﬁc to the attackers’ domains (e.g., counter-wordpress.com).
When a user visits any of these compromised Web sites, his traf-
ﬁc will be further redirected into multiple attacker-created shady
 Compromised site  Shady search engine counter-wordpress.com PPC Ad Network Advertiser’s site 1 3 2 4561. User visits compromised site.  2. User is redirected to attacker’s domain. 3. The traffic is hijacked to shady search engine. 4. The traffic is turned into invisible clicks. 5. User is redirected to advertiser’s site. 6. The attacker shares the revenue from PPC Ad Network.  User 685attackers rotate domains to evade detection. This attacker strategy,
used for attack evasion, can actually help us discover more mali-
cious nodes on the malvertising infrastructure by continued moni-
toring of infected publisher pages.
Compared with drive-by-download, click frauds are more dy-
namic. They infected a smaller number of publisher pages (138
in Jun-Sep and 76 in Oct) compared with drive-by-download (155
in Jun-Sep and 196 in Oct), the number of different domain-paths
used for click fraud is signiﬁcantly larger. Our manual investigation
shows that attackers use a larger set of domains to serve as differ-
ent roles for rotation. Though these domains usually do not exhibit
distinguishing URL or domain features, they are detected by our
approach because they usually form uncommon combinations in
topology.
The detected suspicious cases were further fed to the monitoring
component of MadTracer for continuous crawling. Our monitoring
started in Oct 2011 and we reported our ﬁndings using the 126 de-
tected publisher pages while the attack was still alive. We observe
that all of the infected Web pages led to new malvertising domain-
paths, with a coverage increase of 96.3%. In addition, we ﬁnd that
attackers often have strong preferences on browser settings. Inter-
net Explorer (IE) is the most targeted browser type. Among the
126 pages, 95 of them deliver attacks successfully to IE, and 57
do not display malicious contents when visited by Firefox. The
location preference, however, is not obvious from the monitoring
results generated from different IP ranges, perhaps due to the fact
that all of our VMs are located in the U.S.
D. THE POSITION OF MALICIOUS NODES
ON MALVERTISING PATHS
Figure 14 shows the scatter plot in terms of the malvertising path
lengths vs. the position of the alarmed nodes on the paths. Each
point corresponds to one or more known malicious nodes in our
measurement (multiple points may overlap at one position). The
X-axis shows the path lengths, and the Y-axis shows the positions
of the malicious nodes on the paths. We observe many points along
the Y = X line, meaning these malicious nodes are the last hop
on the redirection chains. Such cases usually correspond to drive-
by-download attacks, where the malicious nodes are the exploit
servers. However, we also observe many malicious nodes locat-
ing in the middle of their redirection chains. Such cases are likely
click-fraud attacks, where the malicious nodes serve as the purpose
to redirect trafﬁc from (legitimate or malicious) publishers to legit-
imate pay-per-click ad networks. These ﬁndings indicate that the
positions of the malicious nodes on the ad paths are not ﬁxed due
to the diversiﬁed attack categories.
Figure 14: For the detected malicious nodes on the malvertising
paths, their positions on the paths vs the corresponding path
lengths.
search engines, which are actually a set of fraudulent domains (e.g.,
getnewsearcher.com) resembling search engines. The pur-
pose of the shady search engines is to afﬁliate with legitimate PPC
networks and to refer click trafﬁc to them. Speciﬁcally, once user
trafﬁc reaches the shady search engines (without user awareness),
it will be converted into fraudulent ad clicks and further redirect to
the afﬁliated legitimate PPC networks through a set of redirectors,
and eventually to advertisers.
After receiving the fraudulent click trafﬁc, the advertiser pays
the PPC network, which in turn pays the attacker-controlled shady
search engines.
In order to maximize revenue, attackers aggres-
sively turn one user visit into multiple fraud clicks. In an extreme
case, we observed that a user visit were turned into 37 clicks to
4 different PPC ad networks simultaneously. All the trafﬁc redi-
rection activities happen without user clicks or awareness, yet they
signiﬁcantly slow down the browser performance and negatively
impact the user experience.
Using our approach, we identify 219 such shady search engines
and 50 afﬁliated redirectors associated with this type of click frauds.
Most of these cases were not detected by Safe Browsing or Fore-
Front as they are not used for delivering malicious contents. To
evade detection by PPC ad networks, attackers intentionally redi-
rects trafﬁc through different shady search engines and redirectors
so that the redirection paths look diversiﬁed and more legitimate.
However, by examining the interactions among different entities
along ad-related paths, our approach can successfully detect the
hidden malicious infrastructure, even for these stealthy attacks.
C. FINDINGS AND CLOAKING STUDY
After validation, we revisit Tables 6 and 7 and notice several inter-
esting observations. First, on average, each infected publisher page
corresponds to multiple (15.5) malvertising domain-paths, where
 02468101214161820051015202530Position of Bad Nodes Path Length 686