effective, low-level, and programming language-agnostic pro-
tections. For instance, maintaining a full shadow call stack [2],
[17], [22] sufﬁces to fend off virtually all ROP-based attacks.
to
generally rely on the characteristics C-1–C-5 for the design of
code reuse defenses; we deﬁne the following goals for COOP
accordingly:
G-1 do not expose the characteristics C-1–C-5.
G-2 exhibit control ﬂow and data ﬂow similar to those of
is not sufﬁcient
it
benign C++ code execution.
G-3 be widely applicable to C++ applications.
G-4 achieve Turing completeness under realistic conditions.
747
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
B. Adversary Model
In general, code reuse attacks against C++ applications
oftentimes start by hijacking a C++ object and its vptr.
Attackers achieve this by exploiting a spatial or temporal
memory corruption vulnerability such as an overﬂow in a
buffer adjacent to a C++ object or a use-after-free condition.
When the application subsequently invokes a virtual function
on the hijacked object, the attacker-controlled vptr is deref-
erenced and a vfptr is loaded from a memory location of the
attacker’s choice. At this point, the attacker effectively controls
the program counter (rip in x64) of the corresponding thread
in the target application. Generally for code reuse attacks,
controlling the program counter is one of the two basic
requirements. The other one is gaining (partial) knowledge on
the layout of the target application’s address space. Depending
on the context, there may exist different techniques to achieve
this [8], [28], [44], [48].
For COOP, we assume that the attacker controls a C++
object with a vptr and that she can infer the base address of
this object or another auxiliary buffer of sufﬁcient size under
her control. Further, she needs to be able to infer the base
addresses of a set of C++ modules whose binary layouts are
(partly) known to her. For instance, in practice, knowledge on
the base address of a single publicly available C++ library in
the target address space can be sufﬁcient.
These assumptions conform to the attacker settings of most
defenses against code reuse attacks. In fact, many of these
defenses assume far more powerful adversaries that are, e. g.,
able to read and write large (or all) parts of an application’s
address space with respect to page permissions.
C. Basic Approach
Every COOP attack starts by hijacking one of the target
application’s C++ objects. We call this the initial object. Up
to the point where the attacker controls the program counter,
a COOP attack does not deviate much from other code reuse
attacks: in a conventional ROP attack, the attacker typically
exploits her control over the program counter to ﬁrst manipu-
late the stack pointer and to subsequently execute a chain of
short, return-terminated gadgets. In contrast, in COOP, virtual
functions existing in an application are repeatedly invoked on
counterfeit C++ objects carefully arranged by the attacker.
1) Counterfeit Objects: Typically, a counterfeit object car-
ries an attacker-chosen vptr and a few attacker-chosen data
ﬁelds. Counterfeit objects are not created by the target appli-
cation, but are injected in bulk by the attacker. Whereas the
payload in a ROP-based attack is typically composed of fake
return addresses interleaved with additional data, in a COOP
attack, the payload consists of counterfeit objects and possibly
additional data. Similar to a conventional ROP payload, the
COOP payload containing all counterfeit objects is typically
written as one coherent chunk to a single attacker-controlled
memory location.
2) Vfgadgets: We call the virtual functions used in a COOP
attack vfgadgets. As for other code reuse attacks, the attacker
identiﬁes useful vfgadgets in an application prior to the actual
attack through source code analysis or reverse engineering
of binary code. Even when source code is available, it is
necessary to determine the actual object layout of a vfgadget’s
class on binary level as the compiler may remove or pad cer-
tain ﬁelds. Only then the attacker is able to inject compatible
counterfeit objects.
We identiﬁed a set of vfgadget types that allows to imple-
ment expressive (and Turing complete) COOP attacks in x86
and x64 environments. These types are listed in Table I. In
the following, we gradually motivate our choice of vfgadget
types based on typical code examples. These examples revolve
around the simple C++ classes Student, Course, and
Exam, which reﬂect some common code patterns that we
found to induce useful vfgadgets. From §III-C3 to §III-C5,
we ﬁrst walk through the creation of a COOP attack code
that writes to a dynamically calculated address; along the
way, we introduce COOP’s integral concepts of The Main
Loop, Counterfeit Vptrs, and Overlapping Counterfeit Ob-
jects. After that, from §III-D to §III-F, extended concepts for
Passing Arguments to Vfgadgets, Calling API Functions, and
Implementing Conditional Branches and Loops in COOP are
explained.
The reader might be surprised to ﬁnd more C++ code
listings than actual assembly code in the following. This is
owed to the fact that most of our vfgadgets types are solely
deﬁned by their high-level C++ semantics rather than by the
side effects of their low level assembly code. These types of
vfgadgets are thus likely to survive compiler changes or even
the transition to a different operating system or architecture. In
the cases where assembly code is given, it is the output of the
Microsoft Visual C++ compiler (MSVC) version 18.00.30501
that is shipped with Microsoft Visual Studio 2013.
3) The Main Loop: To repeatedly invoke virtual functions
without violating goals G-1 and G-2, every COOP program
essentially relies on a special main loop vfgadget (ML-G).
The deﬁnition of an ML-G is as follows:
A virtual function that iterates over a container (e. g., a C-
style array or a vector) of pointers to C++ objects and invokes
a virtual function on each of these objects.
Virtual functions that qualify as ML-G are common in
C++ applications. Consider for example the code in Figure 1:
the class Course has a ﬁeld students that points to
a C-style array of pointers to objects of the abstract base
class Student. When a Course object is destroyed (e. g.,
via delete), the virtual destructor1 Course::˜Course is
executed and each Student object is informed via its virtual
function decCourseCount() that one of the courses it was
subscribed to does not exist anymore.
a) Layout of the Initial Object: The attacker shapes the
initial object to resemble an object of the class of the ML-
G. For our example ML-G Course::˜Course, the initial
object should look as depicted in Figure 2: its vptr is set
to point into an existing vtable that contains a reference to
the ML-G such that
the ﬁrst vcall under attacker control
1It is common practice to declare a virtual destructor when a C++ class
has virtual functions.
748
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
Vfgadget type
ML-G
Purpose
The main loop; iterate over container of pointers to counterfeit object and invoke a virtual function
on each such object.
Perform arithmetic or logical operation.
Write to chosen address.
Read from chosen address.
Invoke C-style function pointer.
Conditionally write to chosen address. Used to implement conditional branching.
Execute vfgadgets in a loop and pass a ﬁeld of the initial object to each as argument.
Write to address pointed to by ﬁrst argument. Used to write to scratch area.
Decrease/increase stack pointer.
Load argument register rdx, r8, or r9 with value (x64 only).
ARITH-G
W-G
R-G
INV-G
W-COND-G
ML-ARG-G
W-SA-G
MOVE-SP-G
LOAD-R64-G
TABLE I: Overview of COOP vfgadget types that operate on object ﬁelds or arguments; general purpose types are atop;
auxiliary types are below the double line.
Code example
see Figure 1
see Figure 4
see Figure 4
no example given, similar to W-G
see Figure 8
see Figure 6
see Figure 6
see Figure 6
no example given
see Figure 4
class Student {
public:
    virtual void incCourseCount() = 0;
    virtual void decCourseCount() = 0;
};
class Course {
private:
    Student **students;
    size_t nStudents;
public:
    /* ... */
    virtual ~Course() {
        for (size_t i = 0; i decCourseCount();
        delete students;
    }
};
ML-G
Fig. 1: Example for ML-G: the virtual destructor of the class
Course invokes a virtual function on each object pointer in
the array students.
leads to the ML-G. In contrast, in a ROP-based attack, this
ﬁrst vcall under attacker control typically leads to a gadget
moving the stack pointer to attacker controlled memory. The
initial object contains a subset of the ﬁelds of the class of
the ML-G; i. e., all data ﬁelds required to make the ML-G
work as intended. For our example ML-G, the initial object
contains the ﬁelds students and nStudents of the class
Course; the ﬁeld students is set to point to a C-style
array of pointers to counterfeit objects (object0 and object1
in Figure 2) and nStudents is set to the total number
of counterfeit objects. This makes the Course::˜Course
ML-G invoke a vfgadget of the attacker’s choice for each
counterfeit object. Note how the attacker controls the vptr of
each counterfeit object. Figure 3 schematically depicts the
control-ﬂow transitions in a COOP attack.
4) Counterfeit Vptrs: The control ﬂow and data ﬂow in a
COOP attack should resemble those of a regular C++ program
(G-2). Hence, we avoid introducing fake vtables and reuse
existing ones instead. Ideally,
the vptrs of all counterfeit
objects should point
to the beginning of existing vtables.
Depending on the target application, it can though be difﬁcult
to ﬁnd vtables with a useful entry at the offset that is ﬁxed
for a given vcall site. Consider for example our ML-G from
Figure 1: counterfeit objects are treated as instances of the
vptr
Student **students
size_t nStudents
Student *object0
Student *object1
...
vptr
object1
vptr
object0
attacker controlled memory
Course::vtable
1st entry
2nd entry
ClassA::vtable
1st entry
2nd entry
3rd entry
4th entry
ClassB::vtable
…
.rdata
Fig. 2: Basic layout of attacker controlled memory (left) in a
COOP attack using the example ML-G Course::˜Course.
The initial object (dark gray, top left) contains two ﬁelds from
the class Course. Arrows indicate a points-to relation.
2, 4, 
6, ...
initial attacker-
controlled vcall
0
Main Loop
(ML-G)
3
5
vfgadget 0
vfgadget 1
...
Fig. 3: Schematic control ﬂow in a COOP attack; transitions
are labeled according to the order they are executed.
abstract class Student. For each counterfeit object,
the
2nd entry—corresponding to decCourseCount()—in the
supplied vtable is invoked. (The 1st entry corresponds to
incCourseCount().) Here, a COOP attack would ideally
only use vfgadgets that are the 2nd entry in an existing vtable.
Naturally, this largely shrinks the set of available vfgadgets.
This constraint can be sidestepped by relaxing goal G-2 and
letting vptrs of counterfeit objects not necessarily point to the
exact beginning of existing vtables but to certain positive or
negative offsets as is shown for object1 in Figure 2. When
such counterfeit vptrs are used, any available virtual function
can be invoked from a given ML-G.
5) Overlapping Counterfeit Objects: So far we have shown
how, given an ML-G, an arbitrary number of virtual functions
749
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:18 UTC from IEEE Xplore.  Restrictions apply. 
class Exam {
private:
     size_t scoreA, scoreB, scoreC;
public:
     /* ... */
     char *topic;
     size_t score;
     virtual void updateAbsoluteScore() {
         score = scoreA + scoreB + scoreC;
     }
     virtual float getWeightedScore() {
         return (float)(scoreA*5+scoreB*3+scoreC*2) / 10;
     }
LOAD-R64-G
};
struct SimpleString {
     char* buffer;
     size_t len;
     /* ... */
     virtual void set(char* s) {
         strncpy(buffer, s, len);
     }
};
ARITH-G
W-G
Fig. 4: Examples for ARITH-G, LOAD-R64-G, and W-G; for
simpliﬁcation, the native integer type size_t is used.
(vfgadgets) can be invoked while control ﬂow and data ﬂow
resemble those of the execution of benign C++ code.
Two exemplary vfgadgets of types ARITH-G (arithmetic)
and W-G (writing to memory) are given in Figure 4:
in
Exam::updateAbsoluteScore() the ﬁeld score is set
to the sum of three other ﬁelds; in SimpleString::set()
the ﬁeld buffer is used as destination pointer in a write
operation. In conjunction, these two vfgadgets can be used to
write attacker-chosen data to a dynamically calculated memory
address. For this,
two overlapping counterfeit objects are
needed and their alignment is shown in Figure 5.
The key idea here is that the ﬁelds score in object0
and buffer in object1 share the same memory. This way,
the result of the summation of the ﬁelds of object0 in
Exam::updateAbsoluteScore() is written to the ﬁeld
buffer of object1. Note how here, technically, also ob-
ject0.topic and object1.vptr overlap. As the attacker does not
use object0.topic this not a problem and she can simply make
the shared ﬁeld carry object1.vptr. Of course, in our example,
the attacker would likely not only wish to control the desti-
nation address of the write operation through object1.buffer
but also the source address. For this, she needs to be able to
set the argument for the vfgadget SimpleString::set().
How this can be achieved in COOP is described next.
D. Passing Arguments to Vfgadgets
The overlapping of counterfeit objects is an important
concept in COOP. It allows for data to ﬂow between vfgadgets
through object ﬁelds regardless of compiler settings or calling
conventions. Unfortunately, we found that useful vfgadgets
that operate exclusively on object ﬁelds are rare in practice.
In fact, most vfgadgets we use in our real world exploits (see