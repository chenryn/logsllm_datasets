### Arbitrary Writing原理
动态数组的任意 Storage 存储写漏洞，根据 [官方文档](https://docs.soliditylang.org/en/v0.8.1/internals/layout_in_storage.html#) 介绍，可总结如下
- EVM 中，有三个地方可以存储变量，分别是 Memory、Stack 和 Storage。Memory 和 Stack 是在执行期间临时生成的存储空间，主要负责运行时的数据存储，Storage 是永久存在于区块链中的变量。
    + Memory: 内存，生命周期仅为整个方法执行期间，函数调用后回收，因为仅保存临时变量，故 GAS 开销很小
    + Storage: 永久储存在区块链中，由于会永久保存合约状态变量，故 GAS 开销也最大
    + Stack: 存放部分局部值类型变量，几乎免费使用的内存，但有数量限制
- EVM 对每一个智能合约维护了一个巨大的 **key-value** 的存储结构，用于持久化存储数据，我们称这片区域为 Storage。除了 map 映射变量和变长数组以外的所有类型变量，在 Storage 中是依次连续从 slot 0 开始排列的，一共有 2^256 个 slot，每个 slot 可以存储 32 字节的数据。Storage 存储结构是在合约创建的时候就确定好的，它取决于合约所声明状态变量，但是内容可以通过 Transaction 改变。
- Storage 变量大致分为 4 种类型：定长变量、结构体、map 映射变量和变长数组。如果多个变量占用的大小小于 32 字节，按照紧密打包原则，会尽可能打包到单个 slot 中，具体规则如下：
    + 在 slot 中，是按照低位对齐存储的，即大端序
    + 基本类型变量存储时仅存储它们实际所需的字节数
    + 如果基本类型变量不能放入某个 slot 余下的空间，它将被放入下一个 slot
    + map 和变长数组总是使用一个全新的 slot，并占用整个 slot，但对于其内部的每个变量，还是要遵从上面的规则
### Arbitrary Writing slot 计算规则
首先我们分析一下各种对象结构在 EVM 中的存储和访问情况
#### 定长变量和结构体
Solidity 中的定长定量在定义的时候，其长度就已经被限制住了。比如定长整型（uint、uint8），地址常量（address），定长字节数组（bytes1-32）等，这类的变量在 Storage 中是尽可能打包成 32 字节的块顺序存储的。
Solidity 的结构体并没有特殊的存储模型，在 Storage 中的存储可以按照定长变量规则分析。
#### Map 映射变量
在 Solidity 中，并不存储 map 的键，只存储键对应的值，值是通过键的 hash 索引来找到的。用 $slotM$ 表示 map 声明的 slot 位置，用 $key$ 表示键，用 $value$ 表示 $key$ 对应的值，用 $slotV$ 表示 $value$ 的存储位置，则
- $slotV = keccak256(key|slotM)$
- $value = sload(slotV)$
#### 变长数组
用 $slotA$ 表示变长数组声明的位置，用 $length$ 表示变长数组的长度，用 $slotV$ 表示变长数组数据存储的位置，用 $value$ 表示变长数组某个数据的值，用 $index$ 表示 $value$ 对应的索引下标，则
- $length = sload(slotA)$
- $slotV = keccak256(slotA) + index$
- $value = sload(slotV)$
变长数组在编译期间无法知道数组的长度，没办法提前预留存储空间，所以 Solidity 就用 $slotA$ 位置存储了变长数组的长度
!!! note
    注：变长数组具体数据存放在 keccak256 哈希计算之后的一片连续存储区域，这一点与 Map 映射变量不同。
### Arbitrary Writing漏洞介绍
在以太坊 EVM 的设计思路中，所有的 Storage 变量共用一片大小为 2^256*32 字节的存储空间，没有各自的存储区域划分。
Storage 空间即使很大也是有限大小，当变长数组长度很大时，考虑极端情况，如果长度达到 2^256，则可对任意 Storage 变量进行读写操作，这是非常可怕的。