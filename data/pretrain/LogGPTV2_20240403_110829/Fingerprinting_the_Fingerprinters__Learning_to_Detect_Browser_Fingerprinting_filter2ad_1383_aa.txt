# Fingerprinting the Fingerprinters: Learning to Detect Browser Fingerprinting Behaviors

**Authors:** Umar Iqbal, Steven Englehardt, and Zubair Shafiq  
**Conference:** 2021 IEEE Symposium on Security and Privacy (SP)

## Abstract
Browser fingerprinting is an invasive and opaque stateless tracking technique. Browser vendors, academics, and standards bodies have long struggled to provide meaningful protections against browser fingerprinting that are both accurate and do not degrade user experience. We propose FP-INSPECTOR, a machine learning-based syntactic-semantic approach to accurately detect browser fingerprinting. Our results show that FP-INSPECTOR outperforms the state-of-the-art by detecting 26% more fingerprinting scripts. Additionally, an API-level fingerprinting countermeasure built upon FP-INSPECTOR helps reduce website breakage by a factor of two. Using FP-INSPECTOR, we conducted a measurement study of browser fingerprinting on the top-100K websites. We found that browser fingerprinting is present on more than 10% of the top-100K websites and over a quarter of the top-10K websites. We also discovered previously unreported uses of JavaScript APIs by fingerprinting scripts, suggesting they are exploiting APIs in new and unexpected ways.

## 1. Introduction
Mainstream browsers have started to provide built-in protection against cross-site tracking. For example, Safari now blocks all third-party cookies, and Firefox blocks third-party cookies from known trackers by default. As mainstream browsers implement countermeasures against stateful tracking, there are concerns that trackers will migrate to more opaque, stateless tracking techniques such as browser fingerprinting. Thus, mainstream browsers have begun to explore mitigations for browser fingerprinting.

Some browsers and privacy tools have tried to mitigate browser fingerprinting by changing the JavaScript API surface exposed by browsers. For example, privacy-oriented browsers like the Tor Browser restrict access to APIs such as Canvas and WebRTC, which are known to be abused for browser fingerprinting. However, such blanket API restrictions can break websites that use these APIs for benign functionality.

Mainstream browsers have so far avoided comprehensive API restrictions due to website breakage concerns. As an alternative, some browsers, particularly Firefox, have tried to mitigate browser fingerprinting by blocking network requests to fingerprinting services. However, this approach relies heavily on manual analysis and struggles to restrict fingerprinting scripts served from first-party domains or dual-purpose third parties, such as CDNs. Englehardt and Narayanan manually designed heuristics to detect fingerprinting scripts based on their execution behavior. However, this approach relies on hard-coded heuristics that must be continually updated to capture evolving fingerprinting and non-fingerprinting behaviors.

We propose FP-INSPECTOR, a machine learning-based approach to detect browser fingerprinting. FP-INSPECTOR trains classifiers to learn fingerprinting behaviors by extracting syntactic and semantic features through a combination of static and dynamic analysis. Static analysis helps FP-INSPECTOR overcome the coverage issues of dynamic analysis, while dynamic analysis overcomes the inability of static analysis to handle obfuscation.

Our evaluation shows that FP-INSPECTOR detects fingerprinting scripts with 99.9% accuracy, identifying 26% more fingerprinting scripts than manually designed heuristics. Our evaluation also shows that targeted countermeasures leveraging FP-INSPECTOR's detection reduce website breakage by a factor of two on sites prone to breakage.

We deployed FP-INSPECTOR to analyze the state of browser fingerprinting on the web. We found that fingerprinting prevalence has increased over the years, now present on 10.18% of the Alexa top-100K websites. We detected fingerprinting scripts served from more than two thousand domains, including anti-ad fraud vendors and cross-site trackers. FP-INSPECTOR also uncovered several new APIs previously unknown to be used for fingerprinting, such as the Permissions and Performance APIs.

### Key Contributions
1. An ML-based syntactic-semantic approach to detect browser fingerprinting behaviors using both static and dynamic analysis.
2. An evaluation of website breakage caused by different mitigation strategies that block network requests or restrict APIs.
3. A measurement study of browser fingerprinting scripts on the Alexa top-100K websites.
4. A clustering analysis of JavaScript APIs to uncover new browser fingerprinting vectors.

## 2. Background & Related Work
### 2.1 Browser Fingerprinting for Online Tracking
Browser fingerprinting is a stateless tracking technique that uses device configuration information exposed by the browser through JavaScript APIs (e.g., Canvas) and HTTP headers (e.g., User-Agent). Unlike traditional stateful tracking, browser fingerprinting does not require storing client-side information. It is widely recognized as an abusive practice by browser vendors and standards bodies. Browser fingerprinting is more intrusive than cookie-based tracking because it is opaque to users and cannot be controlled by them.

### 2.2 Origins of Browser Fingerprinting
Mayer first showed that "quirkiness" can be exploited using JavaScript APIs to identify users. Eckersley's Panopticlick experiment further analyzed browser fingerprints using various HTTP headers and JavaScript APIs. As modern web browsers add new JavaScript APIs, the fingerprinting surface continues to expand. Researchers have shown that APIs such as Canvas, WebGL, fonts, extensions, the Audio API, the Battery Status API, and mobile sensors can expose identifying device information. Standards bodies like the W3C have provided guidance to consider the fingerprinting potential of newly proposed JavaScript APIs.

### 2.3 Uniqueness and Persistence of Browser Fingerprints
A browser fingerprint is a statistical identifier, meaning it does not deterministically identify a device. The identifiability depends on the number of devices sharing the same configuration. Early research found that 83% to 90% of devices have a unique fingerprint, but more recent studies suggest lower uniqueness. To be used for tracking, a fingerprint must remain stable over time or be linkable with high confidence. Studies have shown varying degrees of re-identifiability, with some techniques able to track repeat visitors for extended periods.

### 2.4 Prevalence of Browser Fingerprinting
Studies have shown an increasing trend in the deployment of fingerprinting across the web. Recent studies, including one by The Washington Post, found fingerprinting on about 37% of the Alexa top-500 US websites. Despite increased scrutiny, fingerprinting remains prevalent.

### 2.5 Browser Fingerprinting Countermeasures
Existing tools for fingerprinting protection use three main approaches: randomizing return values of fingerprintable JavaScript APIs, normalizing return values, and using heuristics to detect and block fingerprinting scripts. Each approach has its strengths and weaknesses. Randomization and normalization can defend against active and some forms of passive fingerprinting, while heuristic-based approaches can defend against both active and passive fingerprinting. However, each method has limitations, such as impacting functional use cases or being reversible.

## 3. Paper Organization
The rest of the paper is organized as follows:
- **Section II:** Overview of browser fingerprinting and limitations of existing countermeasures.
- **Section III:** Design and implementation of FP-INSPECTOR.
- **Section IV:** Evaluation of FP-INSPECTORâ€™s accuracy and website breakage.
- **Section V:** Deployment of FP-INSPECTOR on Alexa top-100K websites.
- **Section VI:** Analysis of JavaScript APIs used by fingerprinting scripts.
- **Section VII:** Limitations of FP-INSPECTOR.
- **Section VIII:** Conclusion.

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.