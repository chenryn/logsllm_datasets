a conﬁrmation message (Accept) that is signed by three
trusted entities, and upon receiving Accept along with
ARCertA, clients can ensure that they are establishing a
TLS connection with domain A.
Clients can validate an ARCert against an Accept message
by verifying that the conﬁrmation (1) is authentic, meaning
the conﬁrmation is signed by trusted entities in ILS_LIST and
CA_LIST, (2) has not expired, and (3) is correct. Browsers
also perform the standard validation [7,11] of every X.509
certiﬁcate in ARCert. When validation succeeds, clients
accept the TLS connection to the domain A. The browser
can store the root (conﬁrmed by three trusted parties) for
optional checks later.
4.3 Conﬁrmation Renewal and Validation
Before ILS1’s RegResp expires (before ILS_TIMEOUT) or
after ILS1 updates its tree (i.e., at the start of every ILS_UP
interval), the domain owner must obtain a new proof that
its ARCert is indeed logged at the ILSes. We illustrate the
renewal process in Figure 5.
ILS conﬁrmation request (Steps 1–2). The domain
owner previously deﬁned the trust entities in her ARCertA.
Unless any one of the same entities is compromised, the
domain owner renews the ILS proof by contacting them.
Proof generation (Steps 7–9). At each ILS1 update,
CA1 and CA2 download all requests accepted by ILS1 (during
the last ILS_UP period), process it to maintain the local copy
of the tree, and monitor that the root hash of each CA’s local
copy matches what ILS1 publishes. If all the steps succeed,
the domain owner receives the ILS proof that is validated by
both CAs, as well as the root hash that is signed by all three
entities, making themselves accountable for their actions.
Instead of the Accept
TLS connection (Steps 10–11).
message, the domain owner now provides the Proof message
Update ARCert Generation
A
: Set extensions for new key, contact trusted CAs
: Combine multiple certiﬁcates into an ARCertA
′
′, CA1 , ILS1 , CA2}K−1
A
ILS Synchronization
ILS ARCert Request
Update Conﬁrmation
: UpdateReq={ARCertA
1. A→ CA1
2. CA1→ ILS1 : UpdateReq
3. ILS1→ ILSn: SynReq={UpdateReq}K−1
4. ILSn→ ILS1: SynResp={H(UpdateReq)}K−1
′), T}K−1
: Accept={H(ARCertA
ILS1→ CA2 : UpdateResp=
{Accept, UpdateReq, List(SynAck)}K−1
8. CA2→ CA1 : UpdateConf=
, List(SynResp)}K−1
{Accept
K−1
}K−1
9. CA1→ A : {{Accept}K−1
10. C→ A
11. A→ C
′,{{Accept}K−1
: TLS connection request
: ARCertA
}K−1
TLS Connection
CA2
CA2
7. ILS1
ILS1
ILSn
ILS1
CA2
CA1
CA2
CA1
ILS1
Figure 6: Message ﬂows for updating domain A’s
ARCert.
together with the Integrity Tree root (signed by all three
entities) to TLS connection requests.
Clients can validate an ARCert against a conﬁrmation, be
it an Accept message or a Proof message with signed root,
by following the steps outlined in Section 4.2. For example,
the correctness validation of a Proof takes the form of the
browser re-computing the root of the Integrity Tree, using
the intermediate hash values as speciﬁed in the Proof and
comparing with the signed root.
4.4 Certiﬁcate Management
ARPKI supports certiﬁcate update, revocation, and re-
covery from loss or compromise of private key. Figure 6
illustrates how ARPKI supports certiﬁcate update.
Update ARCert generation. For a proper update, the
domain owner must satisfy the trust requirements that were
deﬁned in the previously registered ARCertA in ILS1. For
example, the domain owner’s new ARCertA
must be signed
by CA_MIN number of CAs in CA_LIST as speciﬁed in the old
ARCertA. Furthermore, the three designated entities for
updating the certiﬁcate must be in CA_LIST and ILS_LIST
of both the old ARCertA and the new ARCertA
; otherwise,
the update process is delayed by cool-oﬀ periods.
′
′
ILS request and synchronization (Steps 1–4).
To
update the ARCert, ILS1 proceeds with the update only if
an old ARCertA exists for the domain A.
ILS1 conﬁrms the
Update conﬁrmation (Steps 7–9).
replacement of ARCertA with ARCertA
only when at least
a quorum of all existing ILSes agree. This ensures that the
world continues to have a consistent view on domain A’s
ARCert.
′
The mutual checks in Steps 2, 7, and 8 in Figures 4–6 are
needed for misbehavior detection of CA1, CA2, and ILS1 dur-
ing the initial ARCert registration and subsequent ARCert
updates. Thus, an attack requires all three of them to be
compromised, since a single non-compromised entity detects
and blocks the attack.
4.5 Security Considerations
We have described the process for n = 3 above, which
prevents attacks based on the compromise of at most two
parties. To get stronger security guarantees, the process
can be extended for larger n: instead of the message sent
directly from CA2 to CA1 in Step 8 in Figure 3, additional
CAs inbetween CA2 and CA1 receive, check, sign, and send
the message to the next CA in line. Subsequently, the system
as a whole provides better security guarantees as it tolerates
n− 1 compromised parties. The downside is that n entities
must be involved in registration, conﬁrmation, and update,
and this may cause ineﬃciency in the client connection later
on.
Note that if an adversary can compromise n entities (CAs
or ILSes) in the overall system, the following attack is possible:
Given two disjoint sets of CAs, where one set is honest and
the other is compromised, if a domain successfully registered
a certiﬁcate for itself using the honest CAs, we would like
to guarantee that no bogus certiﬁcate can be registered for
that domain by the adversary. But, if all the ILSes are
compromised and willing to keep two separate logs, then
the adversary can register an ARCert for the domain using
the disjoint set of compromised CAs and ARPKI would not
prevent this attack. However, this attack is highly likely to
be detected quickly, and all the dishonest ILSes and CAs can
be held accountable.
4.6 Novelty of ARPKI
As mentioned earlier, the AKI design inspired ARPKI.
However, ARPKI introduces the following novel design as-
pects:
1. ARPKI introduces an entirely new role for the CAs, sup-
porting active on-line conﬁrmations with validator-like
capabilities. This changes the dynamics of the entire sys-
tem in terms of cost tradeoﬀs, possible resources, and
incentives.
2. ARPKI oﬀers diﬀerent message ﬂows to protect against
the weakness in AKI that we identiﬁed, such as the attack
based on two compromised parties. This also leads to a
simpler infrastructure from the domain’s perspective as
CA1 is the interface to the ARPKI infrastructure.
3. ARPKI supports a secure and accountable synchronization
sub-protocol for ILSes.
4. ARPKI’s CAs (working as validators) automatically down-
load requests accepted by the ILS to detect subtle mis-
behaviour. This frees the domain from having to contact
validators to verify the conﬁrmation.
5. Initial registration is simpliﬁed compared to AKI.
5. MODEL AND ANALYSIS
To establish high assurance guarantees, we formally an-
alyze ARPKI’s core security property using the Tamarin
Prover [20,25]. We chose Tamarin because it is a state-of-
the-art protocol analysis and veriﬁcation tool that supports
unbounded veriﬁcation, mutable global state, induction, and
loops.
In Tamarin, protocols are modeled using multiset rewrit-
ing rules and properties are speciﬁed using a fragment of
ﬁrst-order logic that supports quantiﬁcation over timepoints.
Tamarin is capable of automatic veriﬁcation in many cases,
and it also supports interactive veriﬁcation by manual traver-
sal of the proof tree. If the tool terminates without ﬁnding a
proof, it returns a counter-example. Counter-examples are
given as so-called dependency graphs, which are partially or-
dered sets of rule instances that represent a set of executions
that violate the property. Counter-examples can be used to
reﬁne the model, and give feedback to the implementer and
designer.
5.1 Tamarin Background
Tamarin follows the Dolev-Yao model, where the adver-
sary can see and block all messages, as well as see the content
and manipulate messages (or their parts) that are not cryp-
tographically protected. The execution of a security protocol
in the presence of an adversary is modeled in Tamarin using
labelled multiset rewriting rules, as described below.
States. A state models a snapshot of a protocol’s execution:
the protocol participants’ local states, information about
fresh values, the adversary’s knowledge, and the messages
on the network. States are formalized as a ﬁnite multiset
of terms called facts. There is a special fact symbol Fr
with a ﬁxed semantics, where Fr(n) models that n is freshly
generated. The semantics of all other fact symbols is given
by the multiset rewriting rules.
Rules. Labeled multiset rewriting rules model the possible
actions of protocol participants and the adversary, who con-
trols and may modify messages on the network. Rules are
triples written as l -[ a ]-> r, where l, a, r are all ﬁnite
sequences of facts. We call l the premises, r the conclusions,
and a the actions.
We employ various modeling conventions. For example,
the protocol participants send messages using the Out fact,
which the adversary adds to its knowledge K fact, and then
can send to the protocol participants using the In fact. The
adversary can also combine knowledge, using any operator,
for example, given K(x) and K(y) and a binary operator f ,
the adversary deduces K(f(x, y)).
σ such that σ(l)∈ s, then the rule can be triggered, resulting
′ =(sࢨ σ(l))∪ σ(r). Each time a rule is
triggered, σ(a) is appended to the trace, which acts like a
Labeled multiset rewriting. For a given state s, for each
rule of the form l -[ a ]-> r, if there exists a substitution
in a new state s
log.
An execution is an alternating sequence of states and
multiset rewriting rules, where the initial state is empty,
and a state is followed by its successor state using the rule
in-between them. The trace of the execution is then the list
of the actions of the rules used in the sequence. Actions
are ordered sequentially and timestamped by the timepoint
when they occur. Properties are deﬁned in a fragment of
ﬁrst order logic and can refer to the actions in the trace and
their order. For more details, see [20,25].
If a counterexample to the speciﬁed property is found,
Tamarin’s GUI shows this as a graph of instantiated rules
and their connections. The graph includes the modeled rules
as well as the built-in adversary rules. Edges denote the
connections between facts produced by the right hand side
of rules and consumed by the left hand side of rules.
5.2 Tamarin Extensions
The size and complexity of ARPKI substantially surpassed
all protocols previously modeled with Tamarin. This re-
quired several improvements to the Tamarin tool chain.
First, protocols can now be speciﬁed using macros for
terms, which are used for repeating or large terms. These
macros, which may be nested, are expanded using the C
preprocessor. This change increased modeler productivity
and model maintainability. On the output side, we added
functionality to Tamarin’s GUI that allows a compact rep-
resentation of the huge output graphs that result from the
ARPKI model. This makes it easier to understand attacks
found by the tool. Finally, we introduced additional means
for the user to guide the proof search by annotating rules
with a measure of their relevance for the proof. These an-
notations can help Tamarin ﬁnd a proof in cases where its
default heuristics fail.
5.3 Modeling ARPKI
We modeled the communication ﬂow of ARPKI for the
initial ARCert generation and registration according to Fig-
ures 3 and 4.
Abstractions used. We employed several abstractions
during modeling. We used lists instead of Merkle hash trees
to store the registered certiﬁcates. As we do not give the
adversary the ability to tamper with these lists, and all
protocol participants only access them in the designated way,
this encodes the assumption that the hash tree cannot be
tampered with. However, the adversary can create such lists
(representing hash trees) himself by compromising parties
and using their long-term private keys to sign the lists. We
model signatures using a signing operator sign with a private
key as one of the parameters.
Model excerpt. The full Tamarin model for ARPKI is
available [1] and contains 23 rules taking around 1000 lines,
and is roughly 35000 characters before macro expansion, and
54000 characters after macro expansion. Even though in
principle our model allows arbitrarily many CAs and ILSes,
for the analysis we restrict ourselves to the minimal case of
two CAs and one ILS.
We present a simpliﬁed fragment of the rules to explain
the model’s key elements. The two rules below model the
execution of a domain that wants to register an ARCert for
its use, where it requests two CAs to sign oﬀ on the new
public key before it combines them. The state fact Domain-
CombineARCertA connects the two rules, so that the second
rule can only be triggered if the ﬁrst rule was previously
triggered and messages of the expected form are available.
rule A_Create_AR_Cert:
let ILSlist = $ILSk
pkA = pk(~ltkA) in
[ !Ltk($A, ~ltkA), F_CERT($A,pkA) ]
--[ OnlyOne(’A_Create_AR_Cert’)
, AskedForARCert($A,~ltkA) ]->
[ DomainCombineARCertA($A, CertA, $CA1, $CA2)
, Out(), Out()]
In the above rule, we model the ILS list as a single public
name of an arbitrary ILS called ILSk. The $ preﬁx denotes
that ILSk is of type ‘public name’ and the ~ preﬁx denotes
terms of type ‘fresh’, i.e., freshly generated terms. Addi-
tional annotation of the type of each entity and timestamps
have been omitted here and throughout this section. Fact
symbols with the ! preﬁx are never consumed and can be