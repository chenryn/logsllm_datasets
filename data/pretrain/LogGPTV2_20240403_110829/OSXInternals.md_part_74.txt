$ make exporthdrs && make KERNEL_CONFIGS=DEBUG all
Regardless of which kernel configuration you build, a kernel object file with full symbolic
information is generated as mach_kernel.sys in the same directory as mach_kernel. A typical
mach_kernel.sys is several times larger than the corresponding mach_kernel and contains more
symbols. Table 618 compares some aspects of release, profile, and debug builds for a particular
kernel version.
Table 618. A Comparison of the End Products of Different Kernel Build Configurations
RELEASE PROFILE DEBUG
Size of mach_kernel 4.06MB 4.31MB 4.57MB
Symbols in mach_kernel 11,677 11,679 19,611
Strings in mach_kernel 265KB 265KB 398KB
Size of mach_kernel.sys 25.37MB 25.48MB 27.04MB
Symbols in mach_kernel.sys 18,824 18,824 19,611
Strings in mach_kernel.sys 16.13MB 16.12MB 17.24MB
6.10.4. DarwinBuild
A convenient way to compile the xnu kernel (in fact, any Darwin package in general) is through
DarwinBuilda specialized open source tool that provides a build environment similar to Apple's
internal build environment. DarwinBuild's usefulness is evident when building complex packages
with a large number of dependencies, for example, the system library. Specifically, DarwinBuild
consists of two primary harness programs: darwinbuild, which builds software, and darwinxref,
which parses property list files containing project information and performs a variety of operations
such as resolving dependencies, finding files, and loading indexes.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 7. Processes Page 1 of 107
Chapter 7. Processes
In a typical operating system, a process represents a program in execution along with associated system
resources, which may be physical (such as processor cycles and memory) or abstract[1] (such as the
number of files the process can open). The kernel provides an illusion of concurrent execution by
scheduling resources between ready-to-run processes. On a multiprocessor or multicore system, more than
one process may execute truly concurrently.
[1] Abstract resources are often directly or indirectly limited by physical resources.
In their landmark 1965 paper,[2] Jack B. Dennis and Earl C. Van Horn defined a process as a "locus of
control within an instruction sequence . . . an abstract entity which moves through the instructions of a
procedure as the procedure is executed by a processor."
[2] "Programming Semantics for Multiprogrammed Computations," by Jack B. Dennis and
Earl C. Van Horn (The ACM Conference on Programming Languages and Pragmatics, San
Dimas, California, August 1965).
In earlier chapters, we saw that the Mac OS X kernel divides the traditional process abstraction into
multiple related abstractions. In this chapter, we will look at both kernel-level and user-level details of the
Mac OS X process subsystem.
7.1. Processes: From Early UNIX to Mac OS X
The process abstraction has long been used to represent various activities in a computer system. In early
UNIX, a process could be running a user program, or it could represent one or more flows of control in
the kernelfor example, process 0 ran sched(), the process scheduler. The only way to create a new
process in traditional UNIX was through the fork() system call, and the only way to run a new program
within a process was through the exec() system call.
The Earliest and System Calls
fork() exec()
The following are excerpts from the manual pages of the fork() and exec() system calls in
First Edition Research UNIX (circa late 1971)[3]:
fork is the only way new processes are created. The new process's core image is
a copy of that of the caller of fork; the only distinction is the return location of
the fact that r0 in the old process contains the process ID of the new process.
exec overlays the calling process with the named file, then transfers to the
beginning of the core image of the file. The first argument to exec is a pointer to
the name of the file to be executed. The second is the address of a list of pointers
to arguments to be passed to the file. . . . There can be no return from the file; the
calling core image is lost.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 2 of 107
[3] UNIX Programmers Manual, by K. Thompson and D. M. Ritchie (Bell Laboratories,
1971).
As compared to modern operating systems, early UNIX had a vastly simpler process abstraction. In fact, it
wasn't until UNIX was rewritten in Cand ran on a PDP-11 with an MMUthat the UNIX kernel could have
more than one process in memory at a time. Consider the proc structurea kernel-memory-resident process
bookkeeping data structurefrom Third Edition Research UNIX (circa early 1973):
struct proc {
char p_stat; /* (SSLEEP, SWAIT, SRUN, SIDL, SZOMB) */
char p_flag; /* (SLOAD, SSYS, SLOCK, SSWAP) */
char p_pri; /* current process priority */
char p_sig; /* most recent interrupt outstanding */
char p_ndis; /* index into priority "cookie" array */
char p_cook; /* cookie value */
int p_ttyp; /* controlling terminal */
int p_pid; /* process ID */
int p_ppid; /* parent process ID */
int p_addr; /* address of data segment, memory/disk */
int p_size; /* size of data segment in blocks */
int p_wchan; /* reason for sleeping */
int *p_textp; /* text segment statistics */
} proc[NPROC];
The value of NPROC, the number of entries in the process table, was set at compile timea typical value was
50. Besides program text and data, each process had kernel-mode stack and a data areathe user structure or
the u-area. There could be only one current process.
7.1.1. Mac OS X Process Limits
As is the case with modern operating systems, the Mac OS X kernel has soft and hard limits on the
number of processes allowed. The hard limit is either more than or equal to the soft limit. The hard limit is
set at compile time and cannot be varied. The soft limit can be varied through the sysctl interface by
setting the value of the kern.maxproc variable.
$ sysctl -a | grep proc
kern.maxproc = 532
kern.maxfilesperproc = 10240
kern.maxprocperuid = 100
kern.aioprocmax = 16
kern.proc_low_pri_io = 0
...
The hard limit is computed at compile time using the following formula:
// bsd/conf/param.c
#define NPROC (20 + 16 * MAXUSERS)
#define HNPROC (20 + 64 * MAXUSERS)
int maxproc = NPROC;
__private_extern__ int hard_maxproc = HNPROC; /* hardcoded limit */
The MAXUSERS value is defined per Table 71 in a configuration file in the BSD portion of the kernel. The
standard Mac OS X kernel is compiled in a medium configuration, with MAXUSERS being 32. The
corresponding values of NPROC and HNPROC are 532 and 2068, respectively.
Table 71. System Size Configuration
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 3 of 107
Configuration Description MAXUSERS
xlarge Extra-large scale 64
large Large scale 50
medium Medium scale 32
small Small scale 16
xsmall Extra-small scale 8
bsmall Special extra-small scale (such as for boot 2
floppies)
However, the difference in the number of maximum processes allowed between early UNIX and Mac OS
X is insignificant compared to the differences in the respective compositions of their process subsystems.
Even though modern systems are expected to be considerably more complicated, it would not be much of
an exaggeration to say that the term process has more connotations in Mac OS X than there were fields in
the Third Edition UNIX process structure!
7.1.2. Mac OS X Execution Flavors
Code can execute in Mac OS X in several environments, where environments are differentiated based on
one or more of the following: machine architecture, executable format, system mode (user or kernel),
miscellaneous policies,[4] and so on. Each environment has its own flavor of execution. Here are
examples of such environments:
[4] Examples of policies that affect program execution include those related to security and
resource consumption.
The BSD, Mach, and I/O Kit portions of the kernel
The BSD user-space environment
The Carbon environment
The Classic environment
The Cocoa environment
The Java runtime environment
The Dashboard environment for running JavaScript-based widgets
The Rosetta binary translation environment that allows running PowerPC executables to run on
x86-based Macintosh computers
Figure 71 shows a conceptual view of the process subsystem's composition in Mac OS X. Despite the
presence of numerous process-like entities on Mac OS X, exactly one abstraction executes on a processor:
the Mach thread. All other process-like entities are eventually layered atop Mach threads.
Figure 71. An overview of the Mac OS X process subsystem
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 4 of 107
7.2. Mach Abstractions, Data Structures, and APIs
Let us examine some of the kernel data structures that play important roles in the Mac OS X process
subsystem. These include the following:
 struct processor_set [osfmk/kern/processor.h] the processor set structure
 struct processor [osfmk/kern/processor.h] the processor structure
 struct task [osfmk/kern/task.h] the Mach task structure
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 5 of 107
 struct thread [osfmk/kern/thread.h] the machine-independent Mach thread structure
 struct machine_thread [osfmk/ppc/thread.h] the machine-dependent thread state structure
 struct proc [bsd/sys/proc.h] the BSD process structure
 struct uthread [bsd/sys/user.h] the BSD per-thread user structure
 struct run_queue [osfmk/kern/sched.h] the run queue structure used by the scheduler
7.2.1. Summary of Relationships
Mach groups processors into one or more processor sets. Each processor set has a run queue of runnable
threads, and each processor has a local run queue. Besides the run queue, a processor set also maintains a
list of all threads in the set, along with the tasks assigned to the set. A task contains a list of its threads. It
also refers back to its assigned processor set. A thread's machine-dependent state, including the so-called
process control block (PCB), is captured in a machine_thread structure. A BSD process additionally has
a proc structure that refers to the associated task. A multithreaded process is implemented as a Mach task
containing multiple Mach threads. Each thread in a BSD process contains a pointer to a utHRead
structure. Moreover, the proc structure contains a list of pointers to uthread structuresone for each thread
within the process.
7.2.2. Processor Sets
Mach divides the available processors on a system into one or more processor sets. There is always a
default processor set, which is initialized during kernel startupbefore the scheduler can run. It initially
contains all processors in the system. The first task created by the kernel is assigned to the default set. A
processor set may be empty, except for the default set, which must contain at least one processor. A
processor belongs to at most one processor set at a time.
The Purpose of Processor Sets
The original motivation behind processor sets was to group processors to allocate them to
specific system activitiesa coarse-grained allocation. Moreover, in early versions of Mac OS
X, processor sets had associated scheduling policies and attributes, which provided a uniform
control of the scheduling aspects of the threads in the set. Specific policies could be enabled
and disabled at the processor set level.
7.2.2.1. Representation
As shown in Figure 72, a processor set object has two Mach ports representing it: a name port and a
control port. The name port is only an identifierit can be used only for retrieving information about the
processor set. The control port represents the underlying objectit can be used for performing control
operations, for example, to assign processors, tasks, and threads to the processor set. This scenario is
representative of Mach's architecture, wherein operations on various Mach objects are performed by
sending the appropriate messages to the objects' respective control ports.
Figure 72. The processor set structure in the xnu kernel
// osfmk/kern/processor.h
struct processor_set {
queue_head_t idle_queue; // queue of idle processors
int idle_count; // how many idle processors?
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 6 of 107
queue_head_t active_queue; // queue of active processors
queue_head_t processors; // queue of all processors
int processor_count; // how many processors?
decl_simple_lock_data(,sched_lock)// scheduling lock
struct run_queue runq; // run queue for this set
queue_head_t tasks; // tasks assigned to this set
int task_count; // how many tasks assigned?
queue_head_t threads; // threads in this set
int thread_count; // how many threads assigned?
int ref_count; // structure reference count
int active; // is this set in use?
...
struct ipc_port *pset_self; // control port (for operations)
struct ipc_port *pset_name_self; // name port (for information)
uint32_t run_count; // threads running
uint32_t share_count; // timeshare threads running
integer_t mach_factor; // the Mach factor
integer_t load_average; // load average
uint32_t pri_shift; // scheduler load average
};
extern struct processor_set default_pset;
7.2.2.2. The Processor Set API
The processor set Mach API provides routines that can be called from user space to query and manipulate
processor sets. Note that processor set manipulation is a privileged operation. The following are examples
of routines in the processor set API.
 host_processor_sets() returns a list of send rights representing all processor set name ports on
the host.
 host_processor_set_priv() translates a processor set name port into a processor set control port.
 processor_set_default() returns the name port for the default processor set.
 processor_set_create() creates a new processor set and returns the name and the control ports,
whereas processor_set_destroy() destroys the specified processor set while reassigning its
processors, tasks, and threads to the default set.[5]
[5] Since the kernel supports only one processor set, the create and destroy calls always
fail.
 processor_set_info() retrieves information about the specified processor set. As we saw in
Chapter 6, "info" calls in the Mach APIs typically require a flavor argument that specifies the type
of information desired. This way, the same call may fetch a variety of information depending on the
flavor specified. Examples of processor_set_info() flavors are PROCESSOR_SET_BASIC_INFO
(the number of assigned processors to the set and the default policy[6] in effect; returned in a
processor_set_basic_info structure), PROCESSOR_SET_TIMESHARE_DEFAULT (the base attributes
for the timeshare scheduling policy; returned in a policy_timeshare_base structure), and
PROCESSOR_SET_TIMESHARE_LIMITS (the limits on the allowed timeshare policy attributes;
returned in a policy_timeshare_limit structure).
[6] The default policy is hardcoded to POLICY_TIMESHARE.
 processor_set_statistics() retrieves scheduling statistics for the specified processor set. It also
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 7 of 107
requires a flavor argument. For example, the PROCESSOR_SET_LOAD_INFO flavor returns load
statistics in a processor_set_load_info structure.
 processor_set_tasks() returns a list of send rights to the kernel ports of all tasks currently
assigned to the specified processor set. Similarly, processor_set_threads() retrieves the
processor set's assigned threads.
 processor_set_stack_usage() is a debugging routine that is enabled only if the kernel was
compiled with the MACH_DEBUG option. It retrieves information on thread stack usage in a given
processor set.
Note that using the list of processor sets, all tasks and threads in the system can be found.
The processor set interface is deprecated in Mac OS X and is likely to change or disappear at some point.
In fact, the xnu kernel supports only a single processor setthe interface routines operate on the default
processor set.
7.2.3. Processors
The processor structure is a machine-independent description of a physical processor. Some of the
processor structure's fields are similar to those of the processor_set structure, but with a per-processor
(local) scope. For example, the processor structure's run queue field is used for threads bound only to
that processor. Figure 73 shows an annotated excerpt from the processor structure's declaration. The
possible states that a processor can be in are PROCESSOR_OFF_LINE (not available), PROCESSOR_RUNNING
(in normal execution), PROCESSOR_IDLE (idle), PROCESSOR_DISPATCHING (transitioning from the idle
state to the running state), PROCESSOR_SHUTDOWN (going offline), and PROCESSOR_START (being started).
Figure 73. The processor structure in the xnu kernel
// osfmk/kern/processor.h
struct processor {
queue_chain_t processor_queue; // idle, active, or action queue link
int state; // processor state
struct thread *active_thread; // thread running on processor
struct thread *next_thread; // next thread to run if dispatched
struct thread *idle_thread; // this processor's idle thread
processor_set_t processor_set; // the processor set that we belong to
int current_pri; // current thread's priority
timer_call_data_t quantum_timer; // timer for quantum expiration
uint64_t quantum_end; // time when current quantum ends
uint64_t last_dispatch; // time of last dispatch
int timeslice; // quantum before timeslice ends
int deadline; // current deadline
struct run_queue runq; // local run queue for this processor
queue_chain_t processors; // all processors in our processor set
...
struct ipc_port *processor_self; // processor's control port
processor_t processor_list; // all existing processors
processor_data_t processor_data; // per-processor data
};
...
extern processor_t master_processor;
7.2.3.1. Interconnections
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh62C7.htm 20.08.2007
Chapter 7. Processes Page 8 of 107
Figure 74 shows how the processor_set and processor structures are interconnected in a system with
one processor set and two processors. The processors are shown to be neither on the set's idle queue nor
on the active queue. The processors field of each processor, along with the processors field of the
processor set, are all chained together in a circular list. In both the processor and the processor_set
structures, the processors field is a queue element containing only two pointers: prev (previous) and