Where to start?
We successfully integrated RISC-V plugin, but we needed to modify it…
Ghidra is using SLEIGH language to describe the CPU
SLEIGH is a processor specification language developed for Ghidra (heritage from the 
SLED)
Very little documentation about it
If you want to model a simple CPU, it’s fine, but a more complex one could be very painful 
(at least it was for me ;-))
We used already supported CPUs as a “source of knowledge” 
Additionally, we found only one really useful resource - Guillaume Valadon presentation:
https://guedou.github.io/talks/2019_BeeRump/slides.pdf
You need to create a cspec, ldefs, pspec, slaspec, and a Module.manifest file:
We already had it, but we needed to modify slaspec
You define there the register definitions, aliases, instructions etc.
Ghidra can be compiled with a bad SLASPEC if its syntax is correct:
Then you will see on runtime if it works, or you will see tons of JAVA exceptions 
We used “check & try” + “calm down” technique to achieve what we wanted :)
53
BRINGING RISC-V TO GHIDRA
Where to start?
We successfully integrated RISC-V plugin, but we needed to modify it…
Ghidra is using SLEIGH language to describe the CPU
SLEIGH is a processor specification language developed for Ghidra (heritage from the 
SLED)
Very little documentation about it
If you want to model a simple CPU, it’s fine, but a more complex one could be very painful 
(at least it was for me ;-))
We used already supported CPUs as a “source of knowledge” 
Additionally, we found only one really useful resource - Guillaume Valadon presentation:
https://guedou.github.io/talks/2019_BeeRump/slides.pdf
You need to create a cspec, ldefs, pspec, slaspec, and a Module.manifest file:
We already had it, but we needed to modify slaspec
You define there the register definitions, aliases, instructions etc.
Ghidra can be compiled with a bad SLASPEC if its syntax is correct:
Then you will see on runtime if it works, or you will see tons of JAVA exceptions 
We used “check & try” + “calm down” technique to achieve what we wanted :)
54
BRINGING RISC-V TO GHIDRA
Where to start?
We successfully integrated RISC-V plugin, but we needed to modify it…
Ghidra is using SLEIGH language to describe the CPU
SLEIGH is a processor specification language developed for Ghidra (heritage from the 
SLED)
Very little documentation about it
If you want to model a simple CPU, it’s fine, but a more complex one could be very painful 
(at least it was for me ;-))
We used already supported CPUs as a “source of knowledge” 
Additionally, we found only one really useful resource - Guillaume Valadon presentation:
https://guedou.github.io/talks/2019_BeeRump/slides.pdf
You need to create a cspec, ldefs, pspec, slaspec, and a Module.manifest file:
We already had it, but we needed to modify slaspec
You define there the register definitions, aliases, instructions etc.
Ghidra can be compiled with a bad SLASPEC if its syntax is correct:
Then you will see on runtime if it works, or you will see tons of JAVA exceptions 
We used “check & try” + “calm down” technique to achieve what we wanted :)
55
BRINGING RISC-V TO GHIDRA
Where to start?
We successfully integrated RISC-V plugin, but we needed to modify it…
Ghidra is using SLEIGH language to describe the CPU
SLEIGH is a processor specification language developed for Ghidra (heritage from the 
SLED)
Very little documentation about it
If you want to model a simple CPU, it’s fine, but a more complex one could be very painful 
(at least it was for me ;-))
We used already supported CPUs as a “source of knowledge” 
Additionally, we found only one really useful resource - Guillaume Valadon presentation:
https://guedou.github.io/talks/2019_BeeRump/slides.pdf
You need to create a cspec, ldefs, pspec, slaspec, and a Module.manifest file:
We already had it, but we needed to modify slaspec
You define there the register definitions, aliases, instructions etc.
Ghidra can be compiled with a bad SLASPEC if its syntax is correct:
Then you will see on runtime if it works, or you will see tons of JAVA exceptions 
We used “check & try” + “calm down” technique to achieve what we wanted :)
56
BRINGING RISC-V TO GHIDRA
Where to start?
We successfully integrated RISC-V plugin, but we needed to modify it…
Ghidra is using SLEIGH language to describe the CPU
SLEIGH is a processor specification language developed for Ghidra (heritage from the 
SLED)
Very little documentation about it
If you want to model a simple CPU, it’s fine, but a more complex one could be very painful 
(at least it was for me ;-))
We used already supported CPUs as a “source of knowledge” 
Additionally, we found only one really useful resource - Guillaume Valadon presentation:
https://guedou.github.io/talks/2019_BeeRump/slides.pdf
You need to create a cspec, ldefs, pspec, slaspec, and a Module.manifest file:
We already had it, but we needed to modify slaspec
You define there the register definitions, aliases, instructions etc.
Ghidra can be compiled with a bad SLASPEC if its syntax is correct:
Then you will see on runtime if it works, or you will see tons of JAVA exceptions 
We used “check & try” + “calm down” technique to achieve what we wanted :)
57
BRINGING RISC-V TO GHIDRA
Where to start?
We successfully integrated RISC-V plugin, but we needed to modify it…
Ghidra is using SLEIGH language to describe the CPU
SLEIGH is a processor specification language developed for Ghidra (heritage from the 
SLED)
Very little documentation about it
If you want to model a simple CPU, it’s fine, but a more complex one could be very painful 
(at least it was for me ;-))
We used already supported CPUs as a “source of knowledge” 
Additionally, we found only one really useful resource - Guillaume Valadon presentation:
https://guedou.github.io/talks/2019_BeeRump/slides.pdf
You need to create a cspec, ldefs, pspec, slaspec, and a Module.manifest file:
We already had it, but we needed to modify slaspec
You define there the register definitions, aliases, instructions etc.
Ghidra can be compiled with a bad SLASPEC if its syntax is correct:
Then you will see on runtime if it works, or you will see tons of JAVA exceptions 
We used “check & try” + “calm down” technique to achieve what we wanted :)
58
BRINGING RISC-V TO GHIDRA
Where to start?
We successfully integrated RISC-V plugin, but we needed to modify it…
Ghidra is using SLEIGH language to describe the CPU
SLEIGH is a processor specification language developed for Ghidra (heritage from the 
SLED)
Very little documentation about it
If you want to model a simple CPU, it’s fine, but a more complex one could be very painful 
(at least it was for me ;-))
We used already supported CPUs as a “source of knowledge” 
Additionally, we found only one really useful resource - Guillaume Valadon presentation:
https://guedou.github.io/talks/2019_BeeRump/slides.pdf
You need to create a cspec, ldefs, pspec, slaspec, and a Module.manifest file:
We already had it, but we needed to modify slaspec
You define there the register definitions, aliases, instructions etc.
Ghidra can be compiled with a bad SLASPEC if its syntax is correct:
Then you will see on runtime if it works, or you will see tons of JAVA exceptions 
We used “check & try” + “calm down” technique to achieve what we wanted :)
59
PROBLEM WITH MTVEC
 What to look for?
SPARK limits what we could hunt for...
We focused on the design and how HW is modeled
 We saw the very first instructions configuring the HW...
... and later setting up the MTVEC value
What is MTVEC?
Official RISC-V documentation defines MTVEC register as a read-only or 
read/write register that holds the BASE address of the M-mode trap vector
By default, RISC-V handles all traps at any privilege level in machine mode (though 
a machine-mode handler might redirect traps back to the appropriate level)
When trap arrives, RISC-V switches to the machine mode and sets the instruction 
pointer counter (pc) register to the value configured in MTVEC. 
60
PROBLEM WITH MTVEC
 What to look for?
SPARK limits what we could hunt for...
We focused on the design and how is HW modeled
 We saw the very first instructions configuring the HW...
... and later setting up the MTVEC value
What is MTVEC?
Official RISC-V documentation defines MTVEC register as a read-only or 
read/write register that holds the BASE address of the M-mode trap vector
By default, RISC-V handles all traps at any privilege level in machine mode (though 
a machine-mode handler might redirect traps back to the appropriate level)
When trap arrives, RISC-V switches to the machine mode and sets the instruction 
pointer counter (pc) register to the value configured in MTVEC. 
61
PROBLEM WITH MTVEC
 What to look for?
SPARK limits what we could hunt for...
We focused on the design and how is HW modeled
 We saw the very first instructions configuring the HW...
... and later setting up the MTVEC value
What is MTVEC?
Official RISC-V documentation defines MTVEC register as a read-only or 
read/write register that holds the BASE address of the M-mode trap vector
By default, RISC-V handles all traps at any privilege level in machine mode (though 
a machine-mode handler might redirect traps back to the appropriate level)
When trap arrives, RISC-V switches to the machine mode and sets the instruction 
pointer counter (pc) register to the value configured in MTVEC. 
What will happen if any interrupt arrives before MTVEC is initialized?
62
PROBLEM WITH MTVEC
RISC-V MTVEC register specifications does not define the initial value at all 
(undefined)
We observed when the CPU starts, MTVEC is undefined by the standard though most 
of the tested implementations set it to 0
In many implementations 0 is not a valid address (or not mapped) and any reference 
to it generates an exception
If there is any trap/exception generated before initialization of MTVEC register, RISC-
V ends up in a very “stable” infinitive exception loop
when exception arises, RISC-V reads MTVEC register (NULL value at that time) and tries to 
jump to the NULL page. This generates an exception again, because it’s a reserved and not 
accessible memory, and it jumps to MTVEC again, and so on. RISC-V is not halted, it’s just 
spinning in the infinitive exception loop.
Such state is an ideal situation for a fault injection (glitching) attack. RISC-V is running 
at the highest privilege mode and constantly dereferencing glitchable register.
63
PROBLEM WITH MTVEC
RISC-V MTVEC register specifications does not define the initial value at all 
(undefined)
We observed when the CPU starts, MTVEC is undefined by the standard though most 
of the tested implementations set it to 0
In many implementations 0 is not a valid address (or not mapped) and any reference 
to it generates an exception
If there is any trap/exception generated before initialization of MTVEC register, RISC-
V ends up in a very “stable” infinitive exception loop
when exception arises, RISC-V reads MTVEC register (NULL value at that time) and tries to 
jump to the NULL page. This generates an exception again, because it’s a reserved and not 
accessible memory, and it jumps to MTVEC again, and so on. RISC-V is not halted, it’s just 
spinning in the infinitive exception loop.
Such state is an ideal situation for a fault injection (glitching) attack. RISC-V is running 
at the highest privilege mode and constantly dereferencing glitchable register.
First bug:
ISA does not define the initial 
value of MTVEC register
64
PROBLEM WITH MTVEC
RISC-V MTVEC register specifications does not define the initial value at all 
(undefined)
We observed when the CPU starts, MTVEC is undefined by the standard though most 
of the tested implementations set it to 0
In many implementations 0 is not a valid address (or not mapped) and any reference 
to it generates an exception
If there is any trap/exception generated before initialization of MTVEC register, RISC-
V ends up in a very “stable” infinitive exception loop
when exception arises, RISC-V reads MTVEC register (NULL value at that time) and tries to 
jump to the NULL page. This generates an exception again, because it’s a reserved and not 
accessible memory, and it jumps to MTVEC again, and so on. RISC-V is not halted, it’s just 
spinning in the infinitive exception loop.
Such state is an ideal situation for a fault injection (glitching) attack. RISC-V is running 
at the highest privilege mode and constantly dereferencing glitchable register.
First bug:
ISA does not define the initial 
value of MTVEC register
Second bug:
ISA „allows” for infinitive exception loop 
without halting the core (lack of „double/triple 
fault”-like exceptions)
65
HOW TO EXPLOIT MTVEC?
The described problem is fully exploitable if the attacker has the capabilities to: 
Prefill D/I MEM of the RISC-V core (e.g., via „external” / recover (USB) boot functionality)
Generate an early exception during core execution (e.g., physical HW damage)
Scenario:
Attacker pre-fills IMEM with the custom shellcode: 
Attacker does that in a smart way by filling the entire IMEM with NOPs and in the edge of 
IMEM attacker puts a real shellcode. 
Attacker boots RISC-V 
Attacker enforces the necessary conditions to generate an early exception during 
Boot-SW or secure code execution and before MTVEC is initialized 
RISC-V jumps to the NULL page and it enters the state of the infinitive exception loop 
(very stable and predictable state) 
Attacker glitches the MTVEC register value of the looped core, and points it 
somewhere in the IMEM where special payload with the desired shellcode is placed 
(step 1): 
Because MTVEC register has a NULL value, it is very likely that the change of just 1 bit ends 
up generating an address pointing in the middle of the NOPed filled IMEM memory.
66
HOW TO EXPLOIT MTVEC?
The described problem is fully exploitable if the attacker has the capabilities to: 
Prefill D/I MEM of the RISC-V core (e.g., via „external” / recover (USB) boot functionality)
Generate an early exception during core execution (e.g., physical HW damage)
Scenario:
Attacker pre-fills IMEM with the custom shellcode: 
Attacker does that in a smart way by filling the entire IMEM with NOPs and in the edge of 
IMEM attacker puts a real shellcode. 
Attacker boots RISC-V 
Attacker enforces the necessary conditions to generate an early exception during 
Boot-SW or secure code execution and before MTVEC is initialized 
RISC-V jumps to the NULL page and it enters the state of the infinitive exception loop 
(very stable and predictable state) 
Attacker glitches the MTVEC register value of the looped core, and points it 
somewhere in the IMEM where special payload with the desired shellcode is placed 
(step 1): 
Because MTVEC register has a NULL value, it is very likely that the change of just 1 bit ends 
up generating an address pointing in the middle of the NOPed filled IMEM memory.
67
HOW TO EXPLOIT MTVEC?
Step 3: ecall triggers the exception handler with the corrupted MTVEC.
Step 2: the MTVEC value has been changed.
Step 1: pull a trigger to corrupt MTVEC register value on the looped core.
68
HOW TO EXPLOIT MTVEC?
The described problem is fully exploitable if the attacker has the capabilities to: 
Prefill D/I MEM of the RISC-V core (e.g., via „external” / recover (USB) boot functionality)
Generate an early exception during core execution (e.g., physical HW damage)
Scenario:
Attacker pre-fill IMEM with the custom shellcode: 
Attacker does that in a smart way by filling the entire IMEM with NOPs and in the edge of 
IMEM attacker puts a real shellcode. 
Attacker boots RISC-V 
Attacker enforces the necessary conditions to generate an early exception during 
Boot-SW or secure code execution and before MTVEC is initialized 
RISC-V jumps to the NULL page and it enters the state of the infinitive exception loop 
(very stable and predictable state) 
Attacker glitches the MTVEC register value of the looped core, and points it 
somewhere in the IMEM where special payload with the desired shellcode is placed 
(step 1): 
Because MTVEC register has a NULL value, it is very likely that the change of just 1 bit ends 
up generating an address pointing in the middle of the NOPed filled IMEM memory.
69
HOW TO REPORT AND FIX THE BUG 
IN ISA NOT IMPLEMENTATION?
70
HOW TO REPORT AND FIX THE BUG 
IN ISA NOT IMPLEMENTATION?
The described problem(s) affects: 
Uninitialized MTVEC:
All tested chips have MTVEC programmable (the most common mode) vulnerable to the described problem 
Standard allows to have hardcoded read-only MTVEC value – in such case, it might point to the valid address (no bug)
Lack of "double/triple fault"-like exception
Standard doesn’t define that at all – affects all the implementations