resulting error message discloses the value of that data, and you can cause
interesting items of information to be processed in this way, you may be able
to exploit this behavior to extract arbitrary data from the application.
Verbose open database connectivity (ODBC) error messages can be leveraged
in a SQL injection attack to retrieve the results of arbitrary database queries.
For example, the following SQL, if injected into a WHERE clause, would cause the
database to cast the password for the fi rst user in the users table to an integer
to perform the evaluation:
‘ and 1=(select password from users where uid=1)--
This results in the following informative error message:
Error: Conversion failed when converting the varchar value
‘37CE1CCA75308590E4D6A35F288B58FACDBB0841’ to data type int.
TRY IT
http://mdsec.net/addressbook/32
A different way in which this kind of technique can be used is where an
application error generates a stack trace containing a description of the error,
and you can engineer a situation where interesting information is incorporated
into the error description.
Some databases provide a facility to create user-defi ned functions written
in Java. By exploiting a SQL injection fl aw, you may be able to create your own
function to perform arbitrary tasks. If the application returns error messages to
the browser, from within your function you can throw a Java exception contain-
ing arbitrary data that you need to retrieve. For example, the following code
executes the operating system command ls and then generates an exception
that contains the output from the command. This returns a stack trace to the
browser, the fi rst line of which contains a directory listing:
ByteArrayOutputStream baos = new ByteArrayOutputStream();
try
{
Process p = Runtime.getRuntime().exec(“ls”);
InputStream is = p.getInputStream();
int c;
while (-1 != (c = is.read()))
baos.write((byte) c);
}
cc1155..iinndddd 662244 88//1199//22001111 1122::1166::0077 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 625
Chapter 15 n Exploiting Information Disclosure 625
catch (Exception e)
{
}
throw new RuntimeException(new String(baos.toByteArray()));
Gathering Published Information
Aside from the disclosure of useful information within error messages, the
other primary way in which web applications give away sensitive data is by
actually publishing it directly. There are various reasons why an application
may publish information that an attacker can use:
n By design, as part of the application’s core functionality
n As an unintended side effect of another function
n Through debugging functionality that remains present in the live application
n Because of some vulnerability, such as broken access controls
Here are some examples of potentially sensitive information that applications
often publish to users:
n Lists of valid usernames, account numbers, and document IDs
n User profi le details, including user roles and privileges, date of last login,
and account status
n The current user’s password (this is usually masked on-screen but is
present in the page source)
n Log fi les containing information such as usernames, URLs, actions per-
formed, session tokens, and database queries
n Application details in client-side HTML source, such as commented-out
links or form fi elds, and comments about bugs
HACK STEPS
1. Review the results of your application mapping exercises (see Chapter 4)
to identify all server-side functionality and client-side data that may be
used to obtain useful information.
2. Identify any locations within the application where sensitive data such
as passwords or credit card details are transmitted from the server to
the browser. Even if these are masked on-screen, they are still viewable
within the server’s response. If you have found another suitable vulner-
ability, such as within access controls or session handling, this behavior
can be used to obtain the information belonging to other application
users.
3. If you identify any means of extracting sensitive information, use the tech-
niques described in Chapter 14 to automate the process.
cc1155..iinndddd 662255 88//1199//22001111 1122::1166::0088 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 626
626 Chapter 15 n Exploiting Information Disclosure
Using Inference
In some situations, an application may not divulge any data to you directly,
but it may behave in ways that enable you to reliably infer useful information.
We have already encountered many instances of this phenomenon in the
course of examining other categories of common vulnerability. For example:
n A registration function that enables you to enumerate registered user-
names on the basis of an error message when an existing username is
chosen (see Chapter 6).
n A search engine that allows you to infer the contents of indexed documents
that you are not authorized to view directly (see Chapter 11).
n A blind SQL injection vulnerability in which you can alter the application’s
behavior by adding a binary condition to an existing query, enabling you
to extract information one bit at a time (see Chapter 9).
n The “padding oracle” attack in .NET, where an attacker can decrypt any
string by sending a series of requests to the server and observing which
ones result in an error during decryption (see Chapter 18).
Another way in which subtle differences in an application’s behavior may
disclose information occurs when different operations take different lengths
of time to perform, contingent upon some fact that is of interest to an attacker.
This divergence can arise for various reasons:
n Many large and complex applications retrieve data from numerous back-
end systems, such as databases, message queues, and mainframes. To
improve performance, some applications cache information that is used
frequently. Similarly, some applications employ a lazyload approach, in
which objects and data are loaded only when needed. In this situation,
data that has been recently accessed is retrieved quickly from the server’s
local cached copy, while other data is retrieved more slowly from the
relevant back-end source.
This behavior has been observed in online banking applications. A request
to access an account takes longer if the account is dormant than if it is
active, enabling a skilled attacker to enumerate accounts that have been
accessed recently by other users.
n In some situations, the amount of processing that an application per-
forms on a particular request may depend on whether a submitted item
of data is valid. For example, when a valid username is supplied to a login
mechanism, the application may perform various database queries to
retrieve account information and update the audit log. It also may perform
cc1155..iinndddd 662266 88//1199//22001111 1122::1166::0088 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 627
Chapter 15 n Exploiting Information Disclosure 627
computationally intensive operations to validate the supplied password
against a stored hash. If an attacker can detect this timing difference, he
may be able to exploit it to enumerate valid usernames.
n Some application functions may perform an action on the basis of user
input that times out if an item of submitted data is invalid. For example,
an application may use a cookie to store the address of a host located
behind a front-end load balancer. An attacker may be able to manipulate
this address to scan for web servers inside the organization’s internal
network. If the address of an actual server that is not part of the applica-
tion infrastructure is supplied, the application may immediately return
an error. If a nonexistent address is supplied, the application may time
out attempting to contact this address before returning the same generic
error. You can use the response timers within Burp Intruder’s results table
to facilitate this testing. Note that these columns are hidden by default,
but can be shown via the Columns menu.
HACK STEPS
1. Differences in the timing of application responses may be subtle and diffi-
cult to detect. In a typical situation, it is worth probing the application for
this behavior only in selected key areas where a crucial item of interesting
data is submitted and where the kind of processing being performed is
likely to result in time differences.
2. To test a particular function, compile one list containing several items that
are known to be valid (or that have been accessed recently) and a second
list containing items that are known to be invalid (or dormant). Make
requests containing each item on these lists in a controlled way, issuing
only one request at a time, and monitoring the time taken for the applica-
tion to respond to each request. Determine whether there is any correla-
tion between the item’s status and the time taken to respond.
3. You can use Burp Intruder to automate this task. For every request it gen-
erates, Intruder automatically records the time taken before the applica-
tion responds and the time taken to complete the response. You can sort
a table of results by either of these attributes to quickly identify any obvi-
ous correlations.
Preventing Information Leakage
Although it may not be feasible or desirable to prevent the disclosure of abso-
lutely any information that an attacker may fi nd useful, various relatively
straightforward measures can be taken to reduce information leakage to a
cc1155..iinndddd 662277 88//1199//22001111 1122::1166::0088 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 628
628 Chapter 15 n Exploiting Information Disclosure
minimum and to withhold the most sensitive data that can critically undermine
an application’s security if disclosed to an attacker.
Use Generic Error Messages
The application should never return verbose error messages or debug information
to the user’s browser. When an unexpected event occurs (such as an error in a
database query, a failure to read a fi le from disk, or an exception in an external
API call), the application should return the same generic message informing
the user that an error occurred. If it is necessary to record debug information
for support or diagnostic purposes, this should be held in a server-side log that
is not publicly accessible. An index number to the relevant log entry may be
returned to the user, enabling him or her to report this when contacting the
help desk, if required.
Most application platforms and web servers can be confi gured to mask error
information from being returned to the browser:
n In ASP.NET, you can suppress verbose error messages using the cus-
tomErrors element of the Web.config fi le by setting the mode attribute
toOn or RemoteOnly and specifying a custom error page in the defaul-
tRedirect node.
n In the Java Platform, you can confi gure customized error messages
using the error-page element of the web.xml fi le. You can use the
exception-type node to specify a Java exception type, or you can use
theerror-code node to specify an HTTP status code. You can use the
location node to set the custom page to be displayed in the event of
the specifi ed error.
n In Microsoft IIS, you can specify custom error pages for different HTTP
status codes using the Custom Errors tab on a website’s Properties tab.
A different custom page can be set for each status code, and on a per-
directory basis if required.
n In Apache, custom error pages can be confi gured using the ErrorDocument
directive in httpd.conf:
ErrorDocument 500 /generalerror.html
Protect Sensitive Information
Wherever possible, the application should not publish information that may be
of use to an attacker, including usernames, log entries, and user profi le details. If
certain users need access to this information, it should be protected by effective
access controls and made available only where strictly necessary.
cc1155..iinndddd 662288 88//1199//22001111 1122::1166::0088 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 629
Chapter 15 n Exploiting Information Disclosure 629
In cases where sensitive information must be disclosed to an authorized user
(for example, where users can update their own account information), existing
data should not be disclosed where it is not necessary. For example, stored
credit card numbers should be displayed in truncated form, and password fi elds
should never be prefi lled, even if masked on-screen. These defensive measures
help mitigate the impact of any serious vulnerabilities that may exist within the
application’s core security mechanisms of authentication, session management,
and access control.
Minimize Client-Side Information Leakage
Where possible, service banners should be removed or modifi ed to minimize the
disclosure of specifi c software versions and so on. The steps needed to imple-
ment this measure depend on the technologies in use. For example, in Microsoft
IIS, the Server header can be removed using URLScan in the IISLockDown
tool. In later versions of Apache, this can be achieved using the mod_headers
module. Because this information is subject to change, it is recommended that
you consult your server documentation before carrying out any modifi cations.
All comments should be removed from client-side code that is deployed to
the live production environment, including all HTML and JavaScript.
You should pay particular attention to any browser extension components
such as Java applets and ActiveX controls. No sensitive information should be
hidden within these components. A skilled attacker can decompile or reverse-
engineer these components to effectively recover their source code (see Chapter 5).
Summary
Leakage of unnecessary information frequently does not present any kind of
signifi cant defect in an application’s security. Even highly verbose stack traces
and other debugging messages may sometimes provide you with little leverage
in seeking to attack the application.
In other cases, however, you may discover sources of information that are of
great value in developing your attack. For example, you may fi nd lists of user-
names, the precise versions of software components, or the internal structure
and functionality of the server-side application logic.
Because of this possibility, any serious assault on an application should include
a forensic examination of both the application itself and publicly available
resources so that you can gather any information that may be of use in formu-
lating your attacks against it. On some occasions, information gathered in this
way can provide the foundation for a complete compromise of the application
that disclosed it.
cc1155..iinndddd 662299 88//1199//22001111 1122::1166::0088 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 630
630 Chapter 15 n Exploiting Information Disclosure
Questions
Answers can be found at http://mdsec.net/wahh.
1. While probing for SQL injection vulnerabilities, you request the follow-
ing URL:
https://wahh-app.com/list.aspx?artist=foo’+having+1%3d1--
You receive the following error message:
Server: Msg 170, Level 15, State 1, Line 1
Line 1: Incorrect syntax near ‘having1’.
What can you infer from this? Does the application contain any exploit-
able condition?
2. While you are performing fuzz testing of various parameters, an applica-
tion returns the following error message:
Warning: mysql_connect() [function.mysql-connect]: Access denied for
user ‘premiumdde’@’localhost’ (using password: YES) in
/home/doau/public_html/premiumdde/directory on line 15
Warning: mysql_select_db() [function.mysql-select-db]: Access denied
for user ‘nobody’@’localhost’ (using password: NO) in
/home/doau/public_html/premiumdde/directory on line 16
Warning: mysql_select_db() [function.mysql-select-db]: A link to
the server could not be established in
/home/doau/public_html/premiumdde/directory on line 16
Warning: mysql_query() [function.mysql-query]: Access denied for
user ‘nobody’@’localhost’ (using password: NO) in
/home/doau/public_html/premiumdde/directory on line 448
What useful items of information can you extract from this?
3. While mapping an application, you discover a hidden directory on the
server that has directory listing enabled and appears to contain a number
of old scripts. Requesting one of these scripts returns the following error
message:
CGIWrap Error: Execution of this script not permitted
Execution of (contact.pl) is not permitted for the following reason:
Script is not executable. Issue ‘chmod 755 filename’
Local Information and Documentation:
CGIWrap Docs: http://wahh-app.com/cgiwrap-docs/
Contact EMail: PI:EMAIL
Server Data:
Server Administrator/Contact: PI:EMAIL
Server Name: wahh-app.com
Server Port: 80
Server Protocol: HTTP/1.1
cc1155..iinndddd 663300 88//1199//22001111 1122::1166::0088 PPMM
Stuttard c15.indd V2 - 08/17/2011 Page 631
Chapter 15 n Exploiting Information Disclosure 631
Request Data:
User Agent/Browser: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT
5.1; .NET CLR 2.0.50727; FDM; InfoPath.1; .NET CLR 1.1.4322)
Request Method: GET
Remote Address: 192.168.201.19
Remote Port: 57961
Referring Page: http://wahh-app.com/cgi-bin/cgiwrap/fodd
What caused this error, and what common web application vulnerability
should you quickly check for?
4. You are probing the function of a request parameter in an attempt
to determine its purpose within an application. You request the fol-
lowing URL:
https://wahh-app.com/agents/checkcfg.php?name=admin&id=13&log=1
The application returns the following error message:
Warning: mysql_connect() [function.mysql-connect]: Can’t connect to
MySQL server on ‘admin’ (10013) in
/var/local/www/include/dbconfig.php on line 23
What caused this error message, and what vulnerabilities should you