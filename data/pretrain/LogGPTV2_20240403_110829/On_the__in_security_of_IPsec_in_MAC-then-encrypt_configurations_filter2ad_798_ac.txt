We can rewrite this equation as:
mask = S ⊕ (S ⊞ δ) = S ⊕ (S ⊞ δ).
Hence we can, for a ﬁxed value of δ, compute all possible
solutions mask to the above equation along with their proba-
bilities of success in correcting the checksum, assuming that
S is a uniformly distributed 16-bit value. We then use the
list of possible values mask in order of decreasing probability
when trying to correct the checksum.
An example is in order. Suppose we wish to decrease the
TTL ﬁeld from a known value 0xFF to the value 0x00 and
correct the checksum. Because of the position of the TTL
ﬁeld in the IP header, this implies a 16-bit value δ = 0xFF00.
Some of the resulting 66 masks having non-zero probability
are shown in Table 1 along with their probabilities. In this
case, the number of trials required is decreased from the av-
erage of 215 that would be needed using the methods of [5,
497mask
probability
0000 0001 0000 0001
0000 0011 0000 0001
0000 0001 0000 0011
0000 0111 0000 0001
0000 0011 0000 0011
0000 0001 0000 0111
0000 0001 0000 1111
...
1111 1111 1111 1111
2−2
2−3
2−3
2−4
2−4
2−4
2−5
...
2−16
Table 1: Table of masks and probabilities for δ =
0xF F 00
18] to an average of only 6.75. On the other hand, assum-
ing nothing about the TTL ﬁeld except that it is uniformly
distributed, then a simple calculation using a variant of this
approach shows that the expected number of trials needed
to set the TTL ﬁeld to 0x00 and correct the checksum is
only 382.
This idea can be combined with the idea from [5] of using
the ID ﬁeld to compensate for the bit ﬂips, rather than the
checksum ﬁeld itself. Because of the location of this ﬁeld
in the second 32-bit word of the IP header, this allows the
above improvements to be deployed even for a 64-bit block
cipher.
2.6 ESP Trailer Oracles
Our attacks will make use of ESP trailer oracles, a con-
cept introduced in [5] as an extension of the padding oracle
concept from [22]. Such an oracle tells the attacker whether
or not the trailer ﬁelds (including padding, pad length and
NH bytes) of an encryption-only ESP-protected packet are
correctly formatted. It is shown in [5] how repeated access to
such an oracle allows an attacker to decrypt ESP-protected
ciphertext blocks in a byte-by-byte fashion, at a cost of at
most 216 queries to the oracle to extract the rightmost 2
bytes of the target block and at most 28 queries for each
remaining byte of the target block. We describe this attack
in outline next.
i are extracted as follows. We splice blocks R, C ∗
Suppose we have a carrier packet that is protected by ESP
i (from any
in tunnel mode, and a target ciphertext block C ∗
packet protected by the same key K). The rightmost 2 bytes
i onto
of C ∗
the end of the carrier packet, and submit this new packet to
the oracle. Here R is a randomly selected block. By vary-
ing the rightmost 2 bytes of R in a systematic fashion, we
can explore all possible values of the rightmost 2 plaintext
bytes in the block R ⊕ dK(C ∗
i ); these are interpreted as the
PL and NH bytes of the ESP trailer by the oracle, and it
is argued in [5] that, with high probability, only the values
00,04 for these bytes will produce a positive response from
the oracle. Once the oracle responds positively, the corre-
sponding original plaintext bytes from Ci−1 ⊕ dK (C ∗
i ) can
be easily recovered by simple XOR arithmetic. The attack
is then extended to plaintext bytes further to the left in the
block by trying to construct longer valid trailer byte pat-
terns, starting with 01,01,04. Further details can be found
in [5].
This leaves the question of how to construct an ESP trailer
oracle. This problem was solved in [5] for the encryption-
only case by constructing a special packet that, providing the
packet was not dropped because of a failure of ESP’s padding
checks, always generated some kind of error response. Usu-
ally this takes the form of an ICMP message.
In [5], for
tunnel mode, encryption only ESP, this was done by using
CBC bit ﬂipping and checksum correction to create a packet
whose inner packet had an unsupported protocol ﬁeld. The
resulting ICMP message is usually transmitted in encrypted
form on the IPsec tunnel, but it was shown in [5] how such
messages can be detected based on characteristic lengths or
via timing correlation.
In summary, to mount this kind of attack, we need a car-
rier packet that produces a detectable response whenever
ESP’s trailer formatting checks pass.
In [5], this required
modiﬁcation of IP header ﬁelds in the inner packet. This
clearly creates a problem when the inner packet is protected
by AH, as it is in the situations we are interested in here:
now modiﬁcations to header ﬁelds may be detected by AH
processing and the packets dropped, causing the oracle to
be lost. An extra level of complication arises if AH’s re-
play protection is enabled: now, each carefully-constructed
carrier packet can only be used once, since if it were to be
repeated, its inner packet would be deemed to be a replay
during AH processing and so dropped, again causing the
ESP trailer oracle to be lost. Finally, we also want to con-
sider transport mode conﬁgurations of IPsec, and additional
ideas are needed to cater for this.
As we explain in the sections that follow, all of these prob-
lems can be overcome and appropriate ESP trailer oracles
constructed.
3. ATTACKS
Requirements.
We have the following requirements for all of the attacks
in this paper:
1. IPsec is used between a pair of security gateways GA
and GB; these gateways could be stand-alone or could
be providing security for pairs of communicating hosts
HA and HB located behind the gateways as illustrated
in Figure 3. This is a common, basic VPN conﬁgura-
tion of IPsec.
2. The cryptographic keys used in AH and ESP for IPsec
processing at GA and GB are ﬁxed during the attack;
3. The attacker can monitor and record traﬃc ﬂowing
between the two gateways;
4. The attacker can inject modiﬁed datagrams into the
network between GA and GB.
In addition, for some of the attacks where the optional AH
sequence number checking is enabled, we will require that
the attacker is able to control the ﬂow of legitimate packets
between GA and GB to some extent. In practice, this could
be achieved by an attacker who controls a router located
between the gateways.
We begin by describing our three basic attack ideas in the
context of the IPsec conﬁguration that ﬁrst applies AH in
transport mode and then ESP (encryption only) in tunnel
mode to packets ﬂowing from GA to GB. This seems to
us to be the most natural MAC-then-encrypt conﬁguration,
498Host H
A
Gateway G
A
Gateway G
B
IPsec tunnel
Host H
B
Figure 3: Network set-up.
and it also turns out to be the easiest to attack. We then
go on to explain how to extend the attacks to other MAC-
then-encrypt conﬁgurations. In each case, we explain how to
recover the plaintext block corresponding to a single target
ciphertext block C ∗
i . Of course, all of the attacks extend to
multiple blocks in the obvious way.
3.1 Attacks Against AH Transport + ESP Tun-
nel
Here, the sequence of headers and trailers in the packets
that are generated by IPsec is:
oIP ESPh
iIP AH ULP TFC ESPt
where:
• oIP refers to the outer IP header,
• ESPh refers to the ESP header, following which all
data ﬁelds are encrypted.
• iIP refers to the inner IP header,
• AH refers to the AH ﬁelds, including the AH MAC
ﬁeld and sequence number, with the scope of the MAC
covering iIP, AH and ULP ﬁelds.
• ULP refers to the upper layer protocol data unit (e.g.
a TCP or UDP message),
• TFC refers to optional TFC padding, and
• ESPt refers to the ESP trailer ﬁelds, including padding,
and the PL and NH bytes.
3.1.1 Attack 1: A Chosen Plaintext Attack
Our ﬁrst attack requires a single chosen plaintext and can
recover arbitrary IPsec-protected plaintext. The attack ex-
ploits the fact that neither TFC padding nor ESP’s normal
encryption padding are protected by AH’s MAC, and that,
in accordance with [15], these bytes are discarded by the
receiver before the inner packet is passed to AH.
Suppose for now that AH replay protection is disabled,
and recall that ESP replay protection will always be dis-
abled in this conﬁguration. Suppose the attacker has avail-
able a single IPsec-protected packet of the above form, for
which the inner packet has as its payload an ICMP echo
request (i.e. the ULP block contains such an ICMP mes-
sage), which can be directed either to the gateway GB itself
or to a host behind that gateway. Clearly, if this packet is
injected into the network towards GB, we will see an (en-
crypted) ICMP echo reply message in the reverse direction
on the VPN between GA and GB. Moreover, because AH
and ESP sequence number checking is disabled, this packet,
if repeatedly injected into the network, will always cause
such a response. This packet can be used directly as a car-
rier in an ESP trailer oracle attack, as described in Section
2.6. Here, ESP’s handling of TFC bytes ensures that the
inner packet presented to AH after ESP processing at GB
always passes AH’s MAC check, even after the blocks R, C ∗
i
have been spliced onto the carrier packet. This is because
after the ESP trailer is checked and removed, any remaining
plaintext resulting from the spliced blocks together with the
original ESP trailer will be interpreted as TFC padding and
discarded. Moreover, none of these discarded bytes are cov-
ered by AH’s MAC. So, with a single chosen plaintext and
an average of slightly more than 215 trial packet injections,
any complete block of plaintext can be recovered.
This attack applies no matter what are the key-size and
block-size of ESP’s encryption algorithm. It can also be ap-
plied if the ULP block carries TCP instead of ICMP: now
every received TCP segment provokes a TCP ACK packet
of some type in response, so every modiﬁed carrier packet
that passes ESP processing at GB will generate a detectable
message in the reverse direction. Even if the TCP connec-
tion for the TCP segment in the carrier packet is already
closed, a TCP RST packet will be sent in response, so our at-
tacker will always get the response he requires. This applies
whether the endpoints for the TCP connection are the gate-
ways themselves or hosts behind these gateways. Assuming
that ULP carries a TCP message is a mild chosen plain-
text assumption. This can be replaced by an even weaker
499assumption by simply observing packets to see which ones
generate replies, and then using one of those packets as the
carrier packet.
Attack 1 with AH replay protection enabled.
We can extend the above attack to the case where se-
quence number checking is on. The attacker ﬁrst gathers,
for each byte (or pair of bytes in case of the rightmost bytes)
of plaintext that he wishes to extract, a packet that is ex-
pected to generate a reply. These packets might carry ICMP
or TCP, for example. We make the assumption that the at-
tacker can put these carrier packets in order of (roughly)
increasing AH sequence number. This is reasonable, since
they are likely to be intercepted in such an order. The at-
tacker also needs to control the ﬂow of packets on the net-
work so that the sequence numbers in his carrier packets are
always seen as being “fresh” during any AH processing at
GB for the duration of his attack. This can be achieved by
ﬁrstly blocking all other packets from GA to GB except the
attacker’s carrier packets during the attack, and secondly
by switching to the next carrier packet each time a response
packet is detected on the VPN between GA and GB. The
latter step coupled with our assumption about AH sequence
number ordering ensures that, each time ESP trailer pro-
cessing completes and AH processing is done, packets are
not rejected by AH because they have repeated (or old) se-
quence numbers. Otherwise, the attack is as before.
For ease of presentation, we have described a simple ver-
sion of the attack that requires the attacker to control the
ﬂow of traﬃc during the attack. It can be adapted to be
less disruptive to traﬃc ﬂow by making use of carrier pack-
ers as they become available to the attacker, but this would
be more complex to implement.
The only drawbacks of Attack 1 are its very mild assump-
tions about the nature of plaintexts, its consumption of mul-
tiple carrier packets when AH replay protection is enabled,
and the complexity of implementing the attack in a non-
disruptive manner in this case.