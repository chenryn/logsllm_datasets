title:Secure Input for Web Applications
author:Martin Szydlowski and
Christopher Kruegel and
Engin Kirda
23rd Annual Computer Security Applications Conference
23rd Annual Computer Security Applications Conference
Secure Input for Web Applications
Martin Szydlowski, Christopher Kruegel, Engin Kirda
Secure Systems Lab
Technical University Vienna
Vienna, Austria
{msz,chris,ek}@seclab.tuwien.ac.at
Abstract
The web is an indispensable part of our lives. Every day,
millions of users purchase items, transfer money, retrieve
information and communicate over the web. Although the
web is convenient for many users because it provides any-
time, anywhere access to information and services, at the
same time, it has also become a prime target for miscreants
who attack unsuspecting web users with the aim of making
an easy proﬁt. The last years have shown a signiﬁcant rise
in the number of web-based attacks, highlighting the impor-
tance of techniques and tools for increasing the security of
web applications.
An important web security research problem is how to
enable a user on an untrusted platform (e.g., a computer
that has been compromised by malware) to securely trans-
mit information to a web application. Solutions that have
been proposed to date are mostly hardware-based and re-
quire (often expensive) peripheral devices such as smart-
card readers and chip cards. In this paper, we discuss some
common aspects of client-side attacks (e.g., Trojan horses)
against web applications and present two simple techniques
that can be used by web applications to enable secure user
input. We also conducted two usability studies to examine
whether the techniques that we propose are feasible.
1
Introduction
Since the advent of the web, our lives have changed irre-
versibly. Web applications have quickly become the most
dominant way to provide access to online services. For
many users, the web is easy to use and convenient because it
provides anytime, anywhere access to information and ser-
vices. Today, a signiﬁcant amount of business is conducted
over the web, and millions of web users purchase items,
transfer money, retrieve information and communicate via
web applications.
Unfortunately, the success of the web and the lack of
technical sophistication and understanding of many web
users have also attracted miscreants who aim to make easy
ﬁnancial proﬁts. The attacks these people have been been
launching range from simple social engineering attempts
(e.g., using phishing sites) to more sophisticated attacks that
involve the installation of Trojan horses on client machines
(e.g., by exploiting vulnerabilities in browsers in so-called
drive-by attacks [19]).
An important web security research problem is how to
effectively enable a user who is running a client on an un-
trusted platform (i.e., a platform that may be under the con-
trol of an attacker) to securely communicate with a web ap-
plication. More precisely, can we ensure the conﬁdentiality
and integrity of sensitive data that the user sends to the web
application even if the user’s platform is compromised by an
attacker? Clearly, this is an important, but difﬁcult problem.
Ensuring secure input to web applications is especially
relevant for online services such as banking applications
where users perform money transfers and access sensitive
information such as credit card numbers. Although the
communication between the web client and the web ap-
plication is typically encrypted using technologies such as
Transport Layer Security [9] (TLS) to thwart snifﬁng and
man-in-the-middle attacks, the web client is the weakest
point in the chain of communication. This is because it runs
on an untrusted platform, and thus, it is vulnerable to client-
side attacks that are launched locally on the user’s machine.
For example, a Trojan horse can install itself as a browser-
plugin and then easily access, control, and manipulate all
sensitive information that ﬂows through the browser.
Malware that manipulates bank transactions already ap-
pears in the wild. This year, for example, several Aus-
trian banks were explicitly targeted by Trojan horses that
were used by miscreants to perform illegal money transac-
tions [13, 21]. In most cases, the victims did not suspect
anything, and the resulting ﬁnancial losses were signiﬁcant.
Note that even though the costs of such an attack are cov-
ered by insurance companies, it can still easily harm the
public image of the targeted organization.
1063-9527/07 $25.00 © 2007 IEEE
1063-9527/07 $25.00 © 2007 IEEE
DOI 10.1109/ACSAC.2007.28
DOI 10.1109/ACSAC.2007.28
375
375
A number of solutions have been proposed to date to
enable secure input on untrusted platforms for web-based
applications. The majority of these solutions are hardware-
based and require integrated or external peripheral devices
such as smart-card readers [10, 23] or mobile phones [15].
Such hardware-based solutions have several disadvantages.
They impose a ﬁnancial and organizational burden on users
and on service providers, they eliminate the anytime, any-
where advantage of web applications and they often depend
on the integrity of underlying software components which
may be replaced with tampered versions [12, 24, 25].
In this paper, we discuss some common aspects of client-
side attacks against web applications and present two sim-
ple techniques that can be used by web applications to en-
able secure input, at least for a limited quantity of sensitive
information (such as ﬁnancial transaction data). The main
advantage of our solutions is that they do not require any in-
stallation or conﬁguration on the user’s machine. Addition-
ally, in order to evaluate the feasibility of our techniques for
mainstream deployment, we conducted usability studies.
The main contributions of this paper are as follows:
• We present a technique that extends graphical input
with CAPTCHAs [3] to protect the conﬁdentiality and
integrity of the user input even when the user platform
is under the control of an automated attack program
(such as a Trojan horse).
• We present a technique that makes use of conﬁrmation
tokens that are bound to the sensitive information that
the user wants to transmit. This technique helps to pro-
tect the integrity of the user input even when the user
platform is under the control of the attacker.
• We present usability studies that demonstrate that the
two techniques we propose in this paper are feasible in
practice.
This paper is structured as follows: Section 2 gives an
example of a typical client-side attack. Section 3 presents
our techniques to enable secure input for web applications.
Section 4 presents the results of our user studies and and
discusses limitations of our approach. Section 5 provides
an overview of related work. Finally, Section 6 concludes
the paper.
2 A Typical Client-Side Attack
In a typical client-side web attack, the aim of the at-
tacker is to take control of the user’s web client in order
to manipulate the client’s interaction with the web applica-
tion. Such an attack typically consists of three phases. In
the ﬁrst phase, the attacker’s objective is to install malware
on the user’s computer. Once this has been successfully
achieved, in the second phase, the installed malware mon-
itors the user’s interaction with the web application. The
third phase starts once the malware detects that a security-
critical operation is taking place and attempts to manipulate
the ﬂow of sensitive information to the web application to
fulﬁll the attacker’s objectives.
Imagine, for example, that John Smith receives an email
with a link to a URL. This email has been sent by attackers
to thousands of users. John is naive and curious, so he clicks
on the link. Unfortunately, he has not regularly updated his
browser (Internet Explorer in this case), which contains a
serious parsing-related vulnerability that allows malicious
code to be injected and executed on his system just by vis-
iting a hostile web site. As a result, a Trojan horse is au-
tomatically installed on John’s computer when his browser
parses the contents of the web page.
The Trojan horse that the attackers have prepared is a
Browser Helper Object (BHO) for the Internet Explorer
(IE). This BHO is automatically loaded every time IE
is started. With the BHO, the attackers have access to
all events (i.e., interactions) and HTML components (i.e.,
DOM objects) within the browser. Hence, they can easily
check which web sites the user is surﬁng, and they can also
modify the contents of web pages. In our example, the at-
tacker’s are interested in web sessions with a particular bank
(the Bank Austria).
Whenever John is online and starts using the Bank Aus-
tria online banking web application, the Trojan browser-
plugin is triggered. It then starts analyzing the contents of
the bank web pages. When it detects that he is about to
transfer money to another account, it silently modiﬁes the
target account number.
Note that the imaginary attack we described previously
is actually very similar to the attacks that have been recently
targeting Austrian banks. Clearly, there can be many tech-
nical variations of such an attack. For example, instead of
using a BHO, the attackers could also inject Dynamic Link
Libraries (DLLs) into running applications or choose to in-
tercept and manipulate Operating System (OS) calls.
The key observation here is that the online banking web
application has no way to determine whether the client it
is interacting with has been compromised. Furthermore,
when the client has indeed been compromised, all security
precautions the web application can take to create a secure
communication channel to the client (e.g., TLS encryption)
fail. That is, the web application cannot determine whether
it is directly interacting with a user, or with a malicious ap-
plication performing illegitimate actions on behalf of a user.
3 Our Solution
As described in the previous section, the web applica-
tion must assume that the user’s web client (and platform)
376376
is under the control of an attacker. There are two aspects of
the communication that an attacker could compromise: the
conﬁdentiality, or the integrity of input sent from the client
to the web application. The conﬁdentiality of the input is
compromised when the attacker is able to eavesdrop on the
entered input and intercept sensitive information. Analo-
gously, the integrity of the input is compromised when the
attacker is able to tamper, modify, or cancel the input the
user has entered.
As far as the user is considered, there are cases in which
the integrity of input may be more important than its con-
ﬁdentiality. For example, as described in Section 2, only
when the attacker can effectively modify the account num-
ber that has been typed, an illegitimate money transaction
causing ﬁnancial damage can be performed.
In this section, we present two techniques that web appli-
cations can apply to protect sensitive user input. We assume
a threat model in which the attacker has compromised a ma-
chine and installed malicious code. This code has complete
control of the client’s machine, but must perform its task in
an autonomous fashion (i.e., without being able to consult
a human). Our solution are implemented on the server and
are client-independent. The ﬁrst solution we discuss aims
to protect the integrity of user input. The second solution
we discuss aims to protect the conﬁdentiality and integrity
of the user input, but only against automated attacks (i.e.,
the adversary is not a human).
3.1 Solution 1: Binding Sensitive Infor-
mation to Conﬁrmation Tokens
3.1.1 Overview
The ﬁrst solution is based on conﬁrmation tokens. In princi-
ple, the concept of a conﬁrmation token is similar to a trans-
action number (i.e., TANs) commonly used in online bank-
ing. TANs are randomly generated numbers that are sent to
customers as hardcopy letters via regular (snail) mail. Each
time a customer would like to conﬁrm a transaction, she se-
lects a TAN entry from her hardcopy list and enters it into
the web application. Each TAN entry can be used only once.
The idea is that an attacker cannot perform transactions just
by knowing a customer’s user login name and password.
Obviously, TAN-based schemes rely on the assumption that
an attacker will not have access to a user’s TAN list and
hence, be able to perform illegitimate ﬁnancial transactions
at a time of his choosing.
Unfortunately, TAN-based schemes are easily defeated
when an attacker performs a client-side attack (e.g., using a
Trojan horse as described in Section 2). Furthermore, such
schemes are also vulnerable to phishing attempts in which
victims are prompted to provide one (or more) TAN num-
bers on the phishing page. The increasing number of suc-
cessful phishing attacks prompted some European banks to
switch to so called indexed TAN (i-TAN) schemes, where the
bank server requests a speciﬁc i-TAN for each transaction.
While this partially mitigated the phishing threat, i-TANs
are as vulnerable to client-side attacks as traditional TANs.
In general, the problem with regular transactions num-
bers is that there is no relationship between the data that is
sent to the web application and the (a-priori shared) TANs.
Thus, when the bank requests a certain TAN, malicious
code can replace the user’s input without invalidating this
transaction number. To mitigate this weakness and to en-
force integrity of the transmitted information, we propose
to bind the information that the user wants to send to our
conﬁrmation token. In other words, we propose to use con-
ﬁrmation tokens that (partially) depend on the user data.
Note that when using conﬁrmation tokens, our focus is not
the protection of the conﬁdentiality, but the integrity of this
sensitive information.
3.1.2 Details
Imagine that an application needs to protect the integrity of
some input data x. In our solution, the idea is to specify
a function f(.) that the user is requested to apply to the
sensitive input x. The user then submits both her input data
x and, as a conﬁrmation token, f(x).
Suppose that in an online banking scenario, the bank re-
ceives the account number n together with a conﬁrmation
token t from the user. The bank will then apply f(.) to n
and verify that f(n) = t. If the value x, which the user
desires to submit, is the same as the input n that the bank
receives (x = n), then the computation of f(n) by the bank
will equal the computation of f(x) by the user. That is,
f(x) = f(n) holds. If, however, the user input is modiﬁed,
then the bank’s computation will yield f(n) (cid:1)= f(x), and
the bank will know that the integrity of the user’s input is
compromised.
Any important question that needs to be answered is how
f(.) should be deﬁned. Clearly, f(.) has to be deﬁned in a
way so that malicious software installed on a user’s machine
cannot easily compute it. Otherwise, the malware could au-
tomatically compute f(x) for any input x that it would like
to send, and the proposed solution fails. Also, f(.) has to
remain secret from the attacker.
We propose two schemes for computing f(x). For both
schemes, the user will require a code book. This code book
will be delivered via regular mail, similar to TAN letters
described in the previous section. In the ﬁrst scheme, called
token calculation, the code book contains a collection of
simple algorithms that can be used by users to manually
compute conﬁrmation tokens (similar to the obfuscation and
challenge-response idea presented in [4] for secure logins).
All algorithms are based on the input that the user would
like to transmit.
377377
number of random tokens that are organized in pages. The
bank and the user previously and secretly agree on which
digits of the account number are relevant for choosing the
correct page. The bank then requests the user to conﬁrm
a transaction by asking her to enter the value of a speciﬁc
token on that page. For example, suppose that the relevant
account digits are 2 and 7 for user John and that the bank
asks John to enter the token with the ID 20. In this case,
John would determine the relevant code page by combining
the 2nd and 7th digits of the account number and look up the
token on that page that has the ID 20 (Figure 2). Suppose
that the user is faced with the same attack that we discussed
previously. That is, the user enters 980.243.276, but the
malicious application sends 276.173.862 to the bank.
In
this case, the user would look up the token with ID 20 on
page 82, while the bank would consult page 78. Thus, the
transmitted token would not be accepted as valid.
3.1.3 Security Analysis
The security of the conﬁrmation-token-based solutions re-
lies on the assumption that the function f(.) remains secret.
For the token computation, this implies that the algorithms
the bank asks the user to apply are not revealed and can-
not be deduced from the account number and the computed
conﬁrmation token. The lookup scheme can only be com-
promised when both the relevant digits for code lookups and
the contents of the code book are disclosed.
Note that it is possible in theory that some digits of the
target account of the attacker correspond to the digits in the
target account number of the user. Hence, it could be pos-
sible that an algorithm is chosen by the bank that computes
the same conﬁrmation token for both account numbers, or
that both account numbers produce the same page number
for the lookup scheme. The probability for such an event is
1-in-10n, with n being the number or relevant digits.
Another possibility to circumvent our schemes is trying
to guess the right conﬁrmation token. In our prototype im-
plementation, the calculated token can be two to four digits
long, giving a 1-in-11,100 chance of guessing the right one
(note that 10 and 010 are two different tokens). For the
lookup scheme, we used 6-digit alphanumeric tokens. The
chance to guess the right one is 1-in-366.
3.2 Solution 2: Using CAPTCHAs for Se-
cure Input
3.2.1 Overview
Graphical input is used by some banks and other institutions
to prevent eavesdropping of passwords or PINs. Instead of
using the keyboard to enter sensitive information, an image
of a keypad is displayed, and the user enters data by clicking
on the corresponding places in the image. Unfortunately,
Figure 1. Excerpt from our sample token cal-
culation code book.
Suppose that the user has entered the account number
980.243.276, but a Trojan horse has actually sent the ac-
count number 276.173.862 to the bank (unnoticed by the
user). In the ﬁrst scheme, the bank would randomly choose
an algorithm from the user’s code book. Clearly, in order
to make the scheme more resistant against attacks, a dif-
ferent code book would have to be created for each user
(just like different TANs are generated for different users).
Figure 1 shows an excerpt from our sample token calcula-
tion code book. Suppose the bank asks the user to apply
algorithm ID 6 to the target account number. That is, the