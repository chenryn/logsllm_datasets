and the proofs are presented in the respective papers [39], [42]:
Theorem 10 (Overﬂow probability for Path ORAM [39]
and Circuit ORAM [42]). Assume that the Path ORAM or
Circuit ORAM scheme is parametrized with a non-root bucket
size of 5, and a root bucket size denoted |Broot|. For any
conforming adversary A issuing T queries, the probability that
the above experiment encounters Overﬂow is upper bounded
by T · exp(−Ω(|Broot|)).
OBLIVIOUS SIMULATION: PROOF OF THEOREM 3
APPENDIX B
We now prove Theorem 3. Since ExtractMin is imple-
mented by FindMin and Delete, and our current security
deﬁnition is willing to reveal the type of operations, without
loss of generality in our proofs it sufﬁces to consider only three
types of requests: FindMin, Insert, and Delete. Observe
also the following:
• FindMin has a deterministic access pattern;
• the access pattern of Insert is fully determined by the
choice of the two eviction paths ρ, ρ(cid:48) ∈ {0, 1, . . . , N−1};
and
• the access pattern of Delete(ref) where ref := (pos, τ )
is fully determined by the position label pos contained in
the ref.
Modiﬁed notion of access pattern. For convenience, in our
proof, we will use a modiﬁed notion of access pattern for our
real-world algorithm:
• the access pattern of FindMin is ∅;
• the access pattern of Insert is deﬁned by the choice of
the two eviction paths ρ, ρ(cid:48) ∈ {0, 1, . . . , N − 1}; and
• the access pattern of Delete(ref) where ref := (pos, τ )
is deﬁned by pos.
We now consider an algorithm PQ∞ which is the same
as the real-world algorithm PQ but with unbounded buckets.
Recall that we will use the modiﬁed notion of access pattern
for PQ∞. Under this modiﬁed notion of access pattern, we ﬁrst
show that PQ∞ is a perfectly oblivious simulation of Fpq.
Lemma 1. Under the modiﬁed notion of access pattern, PQ∞
is a 1-oblivious simulation of Fpq.
Proof. The simulator Sim is deﬁned in the most obvious man-
ner: upon receiving findmin output ∅; upon receiving insert,
Authorized licensed use limited to: Auckland University of Technology. Downloaded on November 03,2020 at 00:37:42 UTC from IEEE Xplore.  Restrictions apply. 
856
in Ideal
To see why the adversary’s views
output two random eviction paths ρ, ρ(cid:48) ∈ {0, 1, . . . , N − 1}
that are non-overlapping except at the root; upon receiving
delete, output a random number from {0, 1, . . . , N − 1}.
A and
RealPQ∞,A are identically distributed, we make the following
observations:
Fact 2. A always receives the correct answer upon a findmin
request in the experiment RealPQ∞,A.
Proof. In the experiment RealPQ∞,A, the challenger C always
correctly translates the ideal-world and real-world references.
If so, it is not too hard to see that PQ∞ always returns
the correct minimum element upon FindMin — this is
because our algorithm guarantees that all nodes’ subtree-min
are correctly maintained at the end of each request.
Therefore,
to prove Lemma 1,
path chosen right now by Sim.
it sufﬁces to show that
the simulated access patterns output by Sim are identically
distributed by the access patterns of PQ∞. Notice that upon
an insert query, no matter in RealPQ∞,A or Ideal
A,
the adversary always sees two fresh random numbers from
{0, 1, . . . , N − 1} even when conditioned its view so far in
the experiment. Now consider a delete query and suppose
that A wants to delete an element inserted at time τ:
• In the experiment RealPQ∞,A, the adversary A sees the
random path chosen for the element inserted at time τ,
and this random choice was made earlier at time τ;
A, the adversary A sees a random
• In the experiment Ideal
It is not hard to see that even in the experiment RealPQ∞,A,
upon a delete query and conditioned on the adversary’s view
so far, the random path revealed is uniform at random from
the range {0, 1, . . . , N − 1} — speciﬁcally, notice that the
adversary’s view so far does not depend on the random choice
made earlier at time τ.
Lemma 2 (Probability of Overﬂow). For any conforming
adversary A,
in the real-world experiment RealPQ,A, an
Overﬂow exception is encountered with probability at most
T · exp(−Ω(|Broot|)).
Proof. If there is a conforming adversary A that can cause
RealPQ,A to encounter Overﬂow with probability ν, we can
easily construct an adversary A(cid:48) that cause the (non-recursive)
PathORAM to encounter Overﬂow with probability ν too.
Speciﬁcally,
• A(cid:48)
invokes a non-recursive PathORAM parametrized
also with N and λ — note that in the binary tree of
PathORAM every bucket has the same capacity as the
corresponding node in our PQ algorithm.
• Furthermore, A(cid:48) internally maintains a correct priority
queue, and upon any findmin query from A it always
returns the correct answer to A.
• Whenever A submits findmin, A(cid:48) returns the ∅ access
patterns to A;
• Whenever A submits an insert request, A(cid:48) may arbi-
trarily choose this element’s logical address addr to be
any fresh address from the range {0, 1, . . . , N − 1} that
is different from the address of any element inserted but
not extracted so far; now A(cid:48) submits a (Insert, addr,∗)
request to its own challenger where ∗ denotes an arbitrary
payload string which we do not care about. As a result,
A(cid:48) obtains the PathORAM’s access patterns that are fully
determined by two eviction paths P and P(cid:48), A(cid:48) returns
these paths’ identiﬁers to A.
• Whenever A issues a delete request on an element
inserted at time τ, A(cid:48) ﬁnds out the correct logical address
addr of this element and submits a (Read, addr) request
to its challenger. As a result, A(cid:48) obtains the PathORAM’s
access patterns that are fully determined by a read path,
A(cid:48) returns this read path’s identiﬁer to A.
Now, the experiment RealPQ,A is fully determined by the
random coins (cid:126)ψ consumed by A and the random coins (cid:126)µ
consumed by PQ. If the execution of RealPQ,A determined
by ( (cid:126)ψ, (cid:126)µ) encounters overﬂow, the execution of the above
experiment determined also by ( (cid:126)ψ, (cid:126)µ) — where (cid:126)ψ denotes
A’s random coins and (cid:126)µ denotes PathORAM’s random coins
— will also encounter overﬂow.
Thus,
the lemma follows directly from Theorem 10 of
Appendix A.
We can now prove Theorem 3. From Lemma 1 and
Lemma 2 we have that PQ is a (1 − )-oblivious simulation
of Fpq under the modiﬁed notion of access patterns. Since
the modiﬁed access patterns and the original accesses patterns
have a one-to-one correspondence, we conclude that PQ is a
(1 − )-oblivious simulation of Fpq under the original notion
of access patterns too.
APPENDIX C
DEFERRED PROOFS FOR APPLICATIONS
A. Deferred Proofs for Oblivious Sort
We now prove Theorem 8. We can construct a simulator
(cid:48) by leveraging PQ’s simulator denoted Sim. Our simulator
Sim
(cid:48) calls Sim(1λ, N, insert) for n number of times and
Sim
then calls Sim(1λ, N, extractmin) for n number of times,
and outputs the sequence of access patterns.
We ﬁrst consider a hybrid execution denoted Hyb which
replaces the PQ in the algorithm with FPQ and outputs the
resulting output array and the simulated access patterns output
(cid:48). By the deﬁnition of oblivious simulation, the real-
from Sim
world execution (i.e., joint distribution of output and real-
world addresses) has negligible statistical distance from Hyb.
The proof now follows by observing that the output of Hyb
is identically distributed as the ideal-world execution.
B. Deferred Proofs for Oblivious Streaming Sampler
Let Sim
arrives:
We now prove Theorem 9. Let Sim be the simulator for PQ.
(cid:48) denote the following simulator: when the m-th item
• if m ≤ k, output the access pattern for writing down a
label of ω(λ) bits for the new item, and call and output
what Sim(1λ, N, insert) outputs;
Authorized licensed use limited to: Auckland University of Technology. Downloaded on November 03,2020 at 00:37:42 UTC from IEEE Xplore.  Restrictions apply. 
857
call
• else if m > k, output
the access pattern for
the new
writing down a label of ω(λ) bits
item,
by
Sim(1λ, N, extractmin),
Sim(1λ, N, insert), and output the respective outputs;
call
total of k times
the
a
Sim(1λ, N, extractmin)
and output the respective outputs.
for
followed
• ﬁnally,
when
stream
ends,
for
Hyb1. Consider a hybrid execution where we replace PQ with
the ideal functionality Fpq. Let Real denote the joint distribu-
tion of the real-world output and the memory access patterns;
let Hyb1 denote the joint distribution of the output from the
hybrid execution, and the simulated memory access patterns
(cid:48). Due to the deﬁnition of oblivious simulation,
output by Sim
Real and Hyb1 have negligible statistical distance.
Hyb2. Consider the following hybrid where the incoming
stream is processed by an ideal functionality FAlgR which
internally executes the Algorithm R [41] on the incoming
stream, and when the entire stream is all consumed, it outputs
the stored items in a random order. Let Hyb2 denote the joint
distribution of the output from FAlgR in this hybrid, and the
simulated memory access patterns output by Sim
(cid:48).
Conditioned on no label collision, then in Hyb1, every time
an Extract request is made, an independent random element
existing in the heap is extracted. Therefore, the distribution
Hyb1 conditioned on no label collisions is identical to that of
Hyb2. Since the labels are ω(log λ) bits each, the probability
of having label collisions is negligibly small since T is
polynomially bounded in λ. Hyb1 and Hyb2 have negligible
statistical distance.
Ideal. Now consider the ideal-world execution and let Ideal
denote the joint distribution of the output from Fsample in
the ideal-world execution, and the simulated memory access
(cid:48). Vitter [41] proved that running
patterns output by Sim
Algorithm R (i.e., FAlgR) on the stream will produce the
same output distribution as running Fsample on the stream.
Therefore, Hyb2 and Ideal are identically distributed.
Summarizing the above, we conclude that Real and Ideal
have negligible statistical distance which implies the theorem.
requests, including Insert, FindMin, and Delete, and run
the real algorithm ExtractMin. We do the same for every
type of request — note that we need to run the algorithms,
fake or real, in a ﬁxed order. With this modiﬁcation, the cost
of Insert, Delete, and ExtractMin blow up by only a
constant factor; and FindMin now incurs logarithmic cost
too (instead of constant).
Remark 5. As a practical optimization, one can take the
smallest super-sequence of the access patterns of all types of
requests, and incur only this super-sequence access patterns for
every request; doing either useful or dummy work with each
physical access depending on what the request is. Since there
are only constant types of requests, this super-sequence over
all request types can be identiﬁed a-priori through exhaustive
search; moreover, in comparison with the request with the
longest access pattern, the super-sequence access pattern is
only O(1) longer.
Remark 6. For the unknown-T case (see Section III-E), we
need to push or pop from the unconsumed-identiﬁer stack
depending on the type of the request, note that the oblivious
stack by Wang et al. [44] can easily support push-dummy or
pop-dummy operations to emulate the access patterns of a push
or pop operation without performing any real work.
ACKNOWLEDGMENTS
The author would like to thank Kai-Min Chung for insight-
ful technical discussions. Daniel Rong and Harjasleen Malvai
created the open source reference implementation available
at https://github.com/obliviousram/PathOHeap. The author is
grateful
to the IEEE S&P’20 reviewers for their detailed,
thoughtful, and insightful comments over two iterations, which
helped tremendously in improving the paper. This work is
supported in part by NSF CNS-1453634, an ONR YIP award,
and a Packard Fellowship.
APPENDIX D
ACHIEVING TYPE-HIDING SECURITY
that
So far our algorithm hides the contents of the items inserted
into the priority queue but does not hide the type of the
requests. Recall
in our security deﬁnitions earlier in
Section II-B, the simulator in the ideal world receives the
sequence of request types (but not the actual requests). In
practice, sometimes it is desirable to consider a stronger notion
of security where we additionally require that the request types
must be hidden too. Formally, we can modify the security
deﬁnition in Section II-B: now the ideal-world simulator no
longer receives the sequence of request types but only an upper
bound on space N and the length of the request sequence T .
It is easy to additionally hide the type of requests too.
Basically, for every request, say ExtractMin, we can make
dummy accesses that emulate the access patterns of all other
858
Authorized licensed use limited to: Auckland University of Technology. Downloaded on November 03,2020 at 00:37:42 UTC from IEEE Xplore.  Restrictions apply.