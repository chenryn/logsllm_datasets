KEMTLS
excl. int. CA cert.
KDDD
KKDD
assumption: MLWE
KDDD
T
T
R
3
T
T
R
2
T
T
R
1
250
)
s
SSGG
SSXG
min incl. int. CA cert.
200
min excl.
int. CA
cert.
SFXG
SFGG
assumption: NTRU
NNFF
NFFF
NNFF
NFFF
KKDD
ERRR
RSA-2048
+ X25519
2
4
6
8
10
Size of public key crypto objects transmitted (KB)
Figure 3: Handshake size versus handshake establishment
time, for signed KEX and KEMTLS ciphersuites, including
and excluding transmission/processing of one intermediate
CA certificate. Latency 31.1 ms, bandwidth 1000 Mbps, 0% packet
loss. Label syntax: ABCD: A = ephemeral key exchange, B = leaf
certificate, C = intermediate CA certificate, D = root certificate. La-
bel values: Dilithium, ECDH X25519, Falcon, GeMSS, Kyber, NTRU,
RSA-2048, SIKE, XMSSMT
; all level-1 schemes.
s
for details. Although our approach can be applied with any se-
cure KEM, we consider four example scenarios in the paper: (1)
optimizing communication size assuming one intermediate CA‚Äôs
certificate is included in transmission, (2) optimizing communica-
tion size assuming intermediate CA certificates can be cached [98]
and thus are excluded from transmission, (3) handshakes relying on
the module learning with errors (MLWE) / module short-integer-
solutions (MSIS) assumptions, and (4) handshakes relying on the
NTRU assumption. Note that the public key and certificate of the
root CA is not transmitted during the handshake as it is assumed
to be part of the client‚Äôs local trust store; but a signature by the
root CA would be transmitted as part of the intermediate CA‚Äôs
certificate, if that certificate is not also cached as in scenario (2).
In all 4 scenarios, KEMTLS is able to reduce communication sizes
compared to server authentication using post-quantum signatures.
For example, considering all level-1 schemes among the round-
3 finalists and alternate candidates of the NIST PQC project, the
minimum size of public-key-cryptography objects transmitted in a
fully post-quantum signed-KEM TLS 1.3 handshake that includes
transmission of an intermediate CA certificate would be 3035 bytes
(using SIKE for key exchange, Falcon for server authentication, a
variant of XMSS for the intermediate CA, and GeMSS for the root
CA), whereas with KEMTLS we can reduce that by 39% to 1853
bytes (using SIKE for key exchange and server authentication, a
variant of XMSS for the intermediate CA, and GeMSS for the root
CA); compare with 1376 bytes for RSA-signed elliptic-curve DH in
TLS 1.3. Fig. 3 shows the impact of the KEMTLS protocol design
on communication sizes for all the scenarios we consider; details
appear in Table 1 in Section 6.
To assess computational costs, we implemented KEMTLS by
modifying the Rustls library [16], using optimized C/assembly im-
plementations of the relevant post-quantum schemes. We measured
performance of this implementation in a range of network scenar-
ios following the methodology of [87], varying latency and band-
width. We found that KEMTLS results in better client and server
performance for scenarios involving the MLWE/MSIS and NTRU
assumptions. Our first two scenarios aim to absolutely minimize
communication bandwidth by replacing a fast signature scheme
(Falcon) with a smaller but slower KEM (SIKE), which, admittedly,
substantially slows down connection establishment, but may still
be relevant when communication bandwidth is of utmost concern.
See Fig. 3 for an overview and Section 6 for details.
We show that our KEMTLS approach indeed results in a secure
protocol, adapting the reductionist security analysis of Dowling,
Fischlin, G√ºnther, and Stebila [38, 39] for signed-DH in TLS 1.3.
The proof is in the standard model, and authentication relies on the
IND-CCA security of the long-term KEM.
Software and data. For the experiments in this paper, we used
and modified open-source cryptographic software and TLS libraries.
In addition, we wrote new software to facilitate our experiments
and to create certificates. All software and data is available at https:
//thomwiggers.nl/publication/kem-tls/ and https://cryptojedi.org/
crypto/#kemtls. All software we modified is under permissive open-
source licenses; we place our code into the public domain (CC0).
Discussion. There are a few subtle differences in the properties
offered by KEMTLS compared to TLS 1.3. TLS 1.3 allows the server
to send encrypted and authentication application data in its first
response message, whereas KEMTLS does not. However, in most
uses of TLS 1.3, including web browsing, this feature is not used,
and the first application data is sent by the client in the second
client-to-server TLS message flow, which KEMTLS preserves.
KEMTLS provides implicit server-to-client authentication at the
time the client sends its first application data; explicit server-to-
client authentication comes one round trip later when a key confir-
mation message is received in the server‚Äôs response. We still retain
confidentiality: no one other than the intended server will be able
to read data sent by the client. One consequence is that the choice
of algorithms used is not authenticated by the time client sends
its first application data. The client cannot be tricked into using
algorithms that it itself does not trust, but an adversary might be
able to trick the client into using one that the server would have
rejected. By the time the handshake fully completes, however, the
client is assured that the algorithms used are indeed the ones both
parties preferred. We discuss the subtleties of the forward secrecy
and downgrade resilience properties of KEMTLS at different stages
more in Section 4.
Comparison with OPTLS. Our proposal for a signature-free hand-
shake protocol in TLS shares a lot of similarities with the OPTLS
protocol [72]. OPTLS was at the heart of early designs for TLS 1.3,
but was dropped in favour of signed-DH for the final standard.
Starting in 2018, there has been an attempt to revive OPTLS in
TLS 1.3 [95, 96], but so far we do not see that these drafts have
gained much traction. (The only implementation of OPTLS that we
are aware of is described in the Master‚Äôs thesis by Kuhnen [73].)
CCS ‚Äô20, November 9‚Äì13, 2020, Virtual Event, USA
Schwabe, Stebila, Wiggers
If a signature-free approach for the TLS handshake has not been
very successful in the past, why revisit it now? We see two reasons
why OPTLS has not gained much traction and both change with
the eventual move to post-quantum cryptography in TLS.
To tap the full potential of OPTLS, servers would need to obtain
certificates containing DH public keys instead of signature keys;
while this is in theory not a problem, it requires certificate authori-
ties to adapt their software and needs other changes to the public-
key infrastructure, which would have been obstacle to TLS 1.3‚Äôs
goals of widespread deployment and fast adoption. However, the
move to post-quantum authentication will require rolling out a new
generation of certificates regardless of whether signatures or KEMs
are used for authentication.
Moreover, when using pre-quantum primitives based on elliptic
curves, the advantages of OPTLS compared to the traditional TLS 1.3
handshake are limited. The performance differences between ECDH
operations and ECDSA or EdDSA signing and verification are not
very large, and sizes of signatures and signature public keys are
small. A TLS implementation with secure and optimized elliptic-
curve arithmetic implemented for ECDH already has most critical
code needed to implement ECDSA or EdDSA signatures.
For current post-quantum KEMs and signature schemes, this
picture changes. It is possible to choose KEMs that offer consider-
ably smaller sizes and much better speed than any of the signature
schemes. Also, post-quantum signatures and KEMs no longer share
large parts of the code base; even though lattice assumptions can
be used to construct both KEMs and signatures, such schemes need
different parameters and thus different optimized routines.
Thus, in the post-quantum setting, the signature-free approach
to the TLS handshake offers major advantages. KEMTLS simultane-
ously reduces the amount of data transmitted during a handshake,
reduces the amount of CPU cycles spent on asymmetric crypto, re-
duces the total handshake time until the client can send application
data, and reduces the trusted code base.
2 PRELIMINARIES
Notation. Let N denote the set of natural numbers. For a set ùëã, the
notation ùë• ‚Üê$ ùëã denotes sampling an element uniformly at random
from the set ùëã and storing it in ùë•. If A is a deterministic algorithm,
then ùë¶ ‚Üê A(ùë•) denotes running A with input ùë• and storing the
output in ùë¶. If A is a probabilistic algorithm, then ùë¶ ‚Üê$ A(ùë•) de-
notes running A with input ùë• and uniformly random coins, and
storing the output in ùë¶. The notation ‚ü¶ùë• = ùë¶‚üß resolves to 1 if ùë• = ùë¶,
and 0 otherwise. The TLS protocol has named messages, such as
ClientHello, which we abbreviate like CH, as in Fig. 4.
Symmetric primitives. We rely on standard definitions of sym-
metric primitives such as hash functions with collision resistance,
pseudorandom functions, and message authentication codes with
existential unforgeability under chosen message attacks, the defini-
tions of which appear in Appendix A. We do note here the syntax of
HKDF [70], which is comprised of two components. HKDF.Extract
is a randomness extractor with two inputs: a salt and some input
keying material; in the TLS 1.3 key schedule, the salt argument
is used for the current secret state, and the input keying material
argument is used for new secret shared secrets being incorporated.
HKDF.Expand is a variable-length pseudorandom function with
(in this context) four inputs: a secret key, a label, a context string
consisting of a hash of a transcript of messages, and the desired
output length (which we omit in our presentation).
2.1 KEMs
Definition 2.1 (Key Encapsulation Mechanism (KEM)). A key en-
capsulation mechanism KEM is an asymmetric cryptographic prim-
itive that allows two parties ùê¥ and ùêµ to establish a shared secret
key ss in a key space K. It consists of the following operations:
a public and private keypair (pk, sk);
‚Ä¢ Key generation: KEM.Keygen() probabilistically generates
‚Ä¢ Encapsulation: KEM.Encapsulate(pk) probabilistically gen-
erates a shared secret and ciphertext (encapsulation) (ss, ct)
against a given public key;
‚Ä¢ Decapsulation: KEM.Decapsulate(ct, sk) decapsulates the
shared secret ss‚Ä≤ which, in a ùõø-correct scheme, is equal to ss
with probability at least 1 ‚àí ùõø.
KEM security notions. The standard security definitions for a
KEM require that the shared secret be indistinguishable from ran-
dom (IND), given just the public key (chosen plaintext attack (CPA))
or additionally given access to a decapsulation oracle (chosen cipher-
text attack (CCA)). We make use of a restricted form of IND-CCA
security where the adversary can make only a single query to its
decapsulation oracle; we denote this IND-1CCA. The security ex-
periments for these security properties are given in Appendix A.
2.2 Authenticated key exchange from KEMs
As sketched in the introduction, authenticated key exchange using
KEMs for authentication is not new, with several examples of mu-
tually authenticated [20, 22, 44] and unilaterally authenticated [20]
protocols. The typical pattern among these, restricted to the case
of unilaterally authenticated key exchange, is as follows (c.f. [20,
Fig. 2]). The server has a static KEM public key, which the client
is assumed to (somehow) have a copy of in advance. In the first
flight of the protocol, the client sends a ciphertext encapsulated to
this static key, along with the client‚Äôs own ephemeral KEM public
key; the server responds with an encapsulation against the client‚Äôs
ephemeral KEM public key. The session key is the hash of the
ephemeral-static and ephemeral-ephemeral shared secrets.
This is a problem for TLS: typically, a client does not know the
server‚Äôs static key in advance, but learns it when it is transmitted
(inside a certificate) during the TLS handshake. One obvious solu-
tion to address this issue is for the client to first request the key
from the server and then proceed through the typical protocol flow.
However, this increases the number of round trips, and thus comes
at a steep performance cost.
The other trivial approach is to simply assume a change in the
Internet‚Äôs key distribution and caching architecture that distributes
the servers‚Äô static key to the client before the handshake. For ex-
ample, in embedded applications of TLS, a client may only ever
communicate with very few different servers that are known in
advance; in that case, the client can just deploy with the server
static keys pre-installed. Another option would be to distribute cer-
tificates through DNS as described in [62]. Neither is a satisfactory
general solution, as the former limits the number of servers a client
Post-Quantum TLS Without Handshake Signatures
CCS ‚Äô20, November 9‚Äì13, 2020, Virtual Event, USA
Client
TCP SYN
TCP SYN-ACK
Server
(pkùëí, skùëí)‚ÜêKEMe.Keygen()
ClientHello: pkùëí, ùëüùëê ‚Üê$ {0, 1}256, supported algs.
ES‚ÜêHKDF.Extract(0, 0)
dES‚ÜêHKDF.Extract(ES, "derived", ‚àÖ)
(ssùëí, ctùëí)‚ÜêKEMe.Encapsulate(pkùëí)
ServerHello: ctùëí, ùëüùë† ‚Üê$ {0, 1}256, selected algs.
ssùëí‚ÜêKEMe.Decapsulate(ctùëí, skùëí)
HS‚ÜêHKDF.Extract(dES, ssùëí)
accept CHTS‚ÜêHKDF.Expand(HS, "c hs traffic", CH..SH)
accept SHTS‚ÜêHKDF.Expand(HS, "s hs traffic", CH..SH)
dHS‚ÜêHKDF.Expand(HS, "derived", ‚àÖ)
{EncryptedExtensions}ùë†ùë°ùëéùëîùëí2
{ServerCertificate}ùë†ùë°ùëéùëîùëí2: cert[pkùëÜ], int. CA cert.
(ssùëÜ, ctùëÜ)‚ÜêKEMs.Encapsulate(pkùëÜ)
{ClientKemCiphertext}ùë†ùë°ùëéùëîùëí1: ctùëÜ
ssùëÜ ‚ÜêKEMs.Decapsulate(ctùëÜ, skùëÜ)
AHS‚ÜêHKDF.Extract(dHS, ssùëÜ)
accept CAHTS‚ÜêHKDF.Expand(AHS, "c ahs traffic", CH..CKC)
accept SAHTS‚ÜêHKDF.Expand(AHS, "s ahs traffic", CH..CKC)
dAHS‚ÜêHKDF.Expand(AHS, "derived", ‚àÖ)
MS‚ÜêHKDF.Extract(dAHS, 0)
fkùëê‚ÜêHKDF.Expand(MS, "c finished", ‚àÖ)
fkùë†‚ÜêHKDF.Expand(MS, "s finished", ‚àÖ)
stage 1
stage 2
stage 3
stage 4
{ClientFinished}ùë†ùë°ùëéùëîùëí3: CF‚ÜêHMAC(fkùëê, CH..CKC)
abort if CF Ã∏= HMAC(fkùëê, CH..CKC)
accept CATS‚ÜêHKDF.Expand(MS, "c ap traffic", CH..CF)
record layer, AEAD-encrypted with key derived from CATS
stage 5
{ServerFinished}ùë†ùë°ùëéùëîùëí4: SF‚ÜêHMAC(fkùë†, CH..CF)
abort if SF Ã∏= HMAC(fkùë†, CH..CF)
accept SATS‚ÜêHKDF.Expand(MS, "s ap traffic", CH..SF)
record layer, AEAD-encrypted with key derived from SATS
stage 6