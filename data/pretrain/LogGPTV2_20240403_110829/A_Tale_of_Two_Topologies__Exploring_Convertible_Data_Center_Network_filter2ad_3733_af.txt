### Data Serialization and Deserialization Performance

In the Spark broadcast application, the flat-tree global mode reduces the average data read time by 10% and the broadcast phase duration by 16% compared to the Clos topology. In the Hadoop shuffle application, the reductions in the average data read time and the shuffle phase duration are 10.5% and 8%, respectively. These improvements highlight that network topology optimization can significantly enhance application performance. The global mode only slightly outperforms the local mode due to the minor differences in their network structures at this small scale (Figure 2c vs. 2d). As the network scale increases, the topologies of these two modes will become more distinct, leading to more substantial performance improvements in large-scale data centers.

### Related Work

Flat-tree distinguishes itself from other data center network architectures, such as those proposed in [10–12, 23, 24, 41], through its convertibility. While each of these fixed topologies has specific traffic patterns where they perform optimally [40], flat-tree can adapt its topology to different workloads. This adaptability allows flat-tree to combine the ease of implementation of a Clos network with the high performance of random graph networks.

Flat-tree also advances beyond recent proposals for configurable data center network architectures. One group of works creates ad-hoc links at runtime to alleviate hot spots [19, 22, 25, 26, 43, 44, 48, 49, 51]. Another group constructs an all-connected flexible network core with high bandwidth capacity [3, 16, 17, 33, 34]. However, these solutions face scalability constraints, such as the port count of central switches [16, 19, 43], the number of optical wavelengths that can be reused [3, 16, 17, 33, 34], or the interference and attenuation of wireless signals [22, 25, 26, 51]. Due to these limitations, only a limited number of connections can be added, or the network size is restricted to a small scale.

Flat-tree is the first architecture to realize globally convertible data center networks at a large scale. It fundamentally differs from previous work in several ways:
1. Instead of adding new links, it repurposes existing links to increase total bandwidth with more efficient topologies.
2. Rather than using central switches, it distributes a set of small port-count converter switches across the network to spread convertibility.
3. Converter switches simply pipe out data packets through wired channels, eliminating the need for multiplexing signals or maintaining signal intensity.
4. Flat-tree reconfigures both switch-to-switch and server-to-switch links, providing greater flexibility in the network structure.

### Conclusion

Flat-tree represents a pioneering effort in building convertible data center networks. By converting between Clos and approximate random graph topologies of various scales, it achieves the traditionally conflicting goals of easy implementation and high performance. Convertibility is enabled by a distributed set of low-cost, small port-count converter switches. We find that flattening the Clos tree structure does not require global rewiring. Regular wiring patterns between pods and core switches, along with simple connections between adjacent pods, effectively approximate randomness in the network core while maintaining low wiring complexity. Multi-path routing and congestion control are crucial for exploiting path diversity in flat-tree, and we have shown that aggregation strategies can prevent an explosion of network states. Existing routing and transport protocols, combined with our architecture-specific state aggregation schemes, can balance high network utilization and fair bandwidth sharing among flows.

We have explored the implementability of flat-tree through simulations with real data center traffic and a testbed implementation. Our results show that flat-tree can optimize for diverse workloads with different topology modes, bringing significant performance improvements to applications with greater core bandwidth. Flat-tree is just one design point in the broad space of convertible data center networks, and we believe our experience will motivate future studies on convertibility.

### Acknowledgements

We would like to thank our shepherd Mohammad Alizadeh and the anonymous reviewers for their thoughtful feedback. This research was sponsored by the NSF under CNS-1422925 and CNS-1305379, an IBM Faculty Award, and by Microsoft Corp.

### References

[1] 2009. MPTCP simulator. (2009). http://nrg.cs.ucl.ac.uk/mptcp/implementation.html
[2] 2009. MultiPath TCP - Linux Kernel implementation. (2009). http://multipath-tcp.org/pmwiki.php/Main/HomePage
...
[51] X. Zhou, Z. Zhang, Y. Zhu, Y. Li, S. Kumar, A. Vahdat, B. Y. Zhao, and H. Zheng. August 2012. Mirror Mirror on the Ceiling: Flexible Wireless Links for Data Centers. In SIGCOMM ’12. Helsinki, Finland, 443–454.