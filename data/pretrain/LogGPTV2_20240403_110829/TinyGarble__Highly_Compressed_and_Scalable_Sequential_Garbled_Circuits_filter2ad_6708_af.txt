of DM respectively. It will store the Hamming distance
of A and B in address 1.
VIII. RELATED WORK
We classify related work into compilers for GCs
(Section VIII-A),
libraries for GCs (Section VIII-B),
GC implementations with hardware accelerators (Sec-
424424
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:52 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III: Comparison of performance of the circuits generated using C input to HLS and a direct Verilog input
to the HDL synthesizer.
%"&	
&
	) -
(
	
  
	!" 









)*'(
'(
 	
	  	
	




































+%,
#$


















l
i n t o $9
$3 , $2 , $9 #$3 := B = A + l
$10 , $0 , 0
$9 , $9 , 8
lw $9 , 0 ( $0 ) # l o a d l
s l l $9 , $9 , 2 #$9 = $9‚àó4
a d d i $2 , $0 , 8 #$2 := A
add
# answer ; no need t o r e s e t
# a d d i
# l +=2 t o compare w i t h end o f A
a d d i
1 #hamming d i s t a n c e
2 # between A and B w i t h l e n g t h o f
3 hamming :
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19 same : #A++ #B++
20
21
22
23 done : # s t o r e answer
24
25 end : # w h i l e ( 1 )
26
i f A==end o f A
beq $2 , $9 , done
lw $4 , 0 ( $2 ) # l o a d ‚àóA
lw $5 , 0 ( $3 ) # l o a d ‚àóB
xor $6 , $4 , $5 #$6==0
beq $6 , $0 ,
a d d i $10 , $10 , 1 # answer ++
a d d i $2 , $2 , 4
a d d i $3 , $3 , 4
j
l o o p #jump back t o t h e t o p
sw $10 , 4 ( $0 )
j end
l o o p : # done
same # g o t o A[ i ] ! =B[ i ]
Hamming.s
Fig. 8: Hamming distance assembly code.
tion VIII-C), and GC implementations on mobile devices
(Section VIII-D).
A. Compiler for Garbled Circuits
The following tools compile high level function de-
scriptions into a Boolean circuit which can be used in
GC. The Ô¨Årst realization of GCs was Fairplay [54] which
provides a custom high level procedural language called
SFDL (Secure Function DeÔ¨Ånition Language) that
is
compiled into a circuit description language, SHDL (Se-
cure Hardware Description Language). Another compiler
is TASTY [31] which allows to combine garbled circuits
and homomorphic encryption. The compiler of [47] for
the Ô¨Årst time showed scalability to circuits consisting
of billions of gates, e.g., a 4095x4095-bit edit distance
425425
circuit with almost 6 Billion gates. The compiler of [23]
allows to use a subset of ANSI C as input language.
To reduce the memory overhead for storing large cir-
cuits and hence increase scalability, PCF [46] introduced
loops that, if given manually in the high level language,
are kept until the GC evaluation. In contrast to PCF,
TinyGarble allows to infer loops automatically and also
allows to optimize across multiple sub-circuits.
B. Libraries for Garbled Circuits
Instead of compiling circuits, FastGC [36] proposed
to use a library-based approach where circuits can be
programmed and easily integrated into high-level ap-
plications. Another GC library is VMCRYPT [53] that
allows to dynamically construct and deconstruct sub-
circuits. FastGC was extended in [32] to re-use the same
sub-circuits. Another library for secure computation is
ABY that allows the efÔ¨Åcient combination of multiple
secure computation approaches [18].
In all these library-based approaches the circuits and
their decomposition into sub-circuits has to be speciÔ¨Åed
manually by the programmer, whereas we provide an
automated approach.
C. GC Implementations with Hardware Accelerators
The following works provide better performance by
implementing garbled circuits in hardware, on GPUs, or
using AES-NI available in recent CPUs. These works
can beneÔ¨Åt from the compact representation generated
by TinyGarble.
J¬®arvinen et al. [38] proposed a generic hardware ar-
chitecture for GC. They realized two FPGA-based proto-
types: a system-on-a-programmable-chip with access to
a hardware crypto accelerator targeting smartcards and
smartphones, and a stand-alone hardware implementation
targeting ASICs.
Recently, several accelerations of GCs using GPUs
have been proposed. Husted et al. implemented Yao‚Äôs
GC by using optimizations such as Free XOR, pipelin-
ing, and OT extension [37]. Pu et al. realized dynamic
programming based on GC to solve the Edit-Distance
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:52 UTC from IEEE Xplore.  Restrictions apply. 
(ED) and the Smith-Waterman (SW) problems [61]. They
also used the same optimizations as [37] along with
permute-and-encrypt, efÔ¨Åcient lookup-table design, and
compact circuits [61]. Frederiksen et al. implemented a
secure computation protocol with security against ma-
licious adversaries based on cut-and-choose of Yao‚Äôs
garbled circuit and an efÔ¨Åcient OT extension for two-
party computation on GPUs [24].
Bellare et al. propose JustGarble in which they use
Ô¨Åxed-key AES for circuit-garbling [2]. They show their
implementation using AES-NI can efÔ¨Åciently garble and
execute a circuit far faster than any prior report.
D. GC Implementations on Mobile Devices
Our approach for generating compact circuit repre-
sentations is also beneÔ¨Åcial when performing secure
computation on resource constrained devices such as
mobile devices which have a limited amount of main
memory. Secure computation on mobile devices using
garbled circuits was proposed in [35]. Also the protocol
described in [17], which uses a smartcard installed in
the mobile device, can beneÔ¨Åt from our more compact
circuit representation. In [10], [11] the mobiles no longer
need to process circuits any more as GC generation and
evaluation is outsourced to cloud servers.
IX. CONCLUSION AND FUTURE DIRECTIONS
We present TinyGarble, an automated tool that can
generate highly compact and scalable circuits for Yao‚Äôs
garbled circuit (GC) protocol. We are the Ô¨Årst to deÔ¨Åne
the circuit generation for GC as a sequential synthesis
problem, and to leverage the powerful and established
HDL synthesis techniques with our custom-libraries and
objectives. We improve the results of one of the best
automatic tools for GC generation, PCF [46], by several
orders of magnitude: for instance TinyGarble compacts
the 1,024-bit multiplication by 2,504 times, while de-
creasing the number of non-XOR gates by 80%; we
compress the 16,000-bit Hamming distance by a factor
of 7,345 times and with 47% less non-XOR gates.
Further, TinyGarble is able to implement functions that
have never been reported before, such as SHA-3. We
perform extensive benchmarking with both commercial
and open source hardware synthesis tools and compare
the results. Our approach strongly improves the existing
results towards practical secure computation with many
exciting applications. For instance, TinyGarble is an
enabling technology for performing GC operations on
mobile platforms, which is prohibitively expensive using
the prior techniques. Moreover, we introduce a scalable
secure processor for private function evaluation (PF-
SFE). The processor is based on the MIPS architecture
and the private function can be compiled using ubiq-
uitous tool, e.g., gcc. In future work we will investigate
the possibility of connecting Oblivious RAM (ORAM) to
our secure processor to beneÔ¨Åt from its lower amortized
complexity for memory access. We are also working on
interfacing TinyGarble with other GC schemes, e.g., the
recently proposed Half Gates method [72].
ACKNOWLEDGMENTS
The authors would like to thank Prof. David Evans for
his very insightful comments, and anonymous reviewers
for their helpful comments and suggestions to improve
this work. The Rice University authors are partially
supported by an OfÔ¨Åce of Naval Research grant (ONR-
R17460), a National Science Foundation grant (CNS-
1059416), and U.S. Army Research OfÔ¨Åce grant (ARO-
STIR-W911NF-14-1-0456) to ACES lab at Rice Univer-
sity. The work of authors at TU Darmstadt is in parts
supported by the European Union‚Äôs Seventh Framework
Program (FP7/2007-2013) grant agreement n. 609611
(PRACTICE), the German Science Foundation (DFG) as
part of project E3 within the CRC 1119 CROSSING,
the German Federal Ministry of Education and Research
(BMBF) within EC SPRIDE, and the Hessian LOEWE
excellence initiative within CASED.
REFERENCES
[1] Mauro Barni, Pierluigi Failla, Vladimir Kolesnikov, Riccardo
Lazzeretti, Ahmad-Reza Sadeghi, and Thomas Schneider. Secure
evaluation of private linear branching programs with medical
applications. In ESORICS, pages 424‚Äì439. Springer, 2009.
[2] Mihir Bellare, Viet Tung Hoang, Sriram Keelveedhi, and Phillip
In
Rogaway. EfÔ¨Åcient garbling from a Ô¨Åxed-key blockcipher.
S&P, pages 478‚Äì492. IEEE, 2013.
[3] Mihir Bellare, Viet Tung Hoang, and Phillip Rogaway. Founda-
tions of garbled circuits. In CCS, pages 784‚Äì796. ACM, 2012.
[4] Assaf Ben-David, Noam Nisan, and Benny Pinkas. FairplayMP:
a system for secure multi-party computation. In CCS, pages 257‚Äì
266. ACM, 2008.
[5] Joan Boyar and Ren Peralta. Concrete multiplicative complexity
In MFCS, pages 179‚Äì189. Springer,
of symmetric functions.
2006.
[6] Robert K Brayton, Richard Rudell, Alberto Sangiovanni-
Vincentelli, and Albert R Wang. MIS: A multiple-level logic
optimization system. TCAD, pages 1062‚Äì1081, November 2006.
[7] Robert King Brayton, Alberto L. Sangiovanni-Vincentelli, Cur-
tis T. McMullen, and Gary D. Hachtel. Logic Minimization
Algorithms for VLSI Synthesis. Kluwer Academic Publishers,
1984.
[8] Justin Brickell, Donald E Porter, Vitaly Shmatikov, and Emmett
Witchel. Privacy-preserving remote diagnostics. In CCS, pages
498‚Äì507. ACM, 2007.
[9] Julien Bringer, Herv¬¥e Chabanne, and Alain Patey.
Privacy-
preserving biometric identiÔ¨Åcation using secure multiparty com-
putation: An overview and recent
Signal Processing
Magazine, IEEE, pages 42‚Äì52, 2013.
trends.
[10] Henry Carter, Charles Lever, and Patrick Traynor. Whitewash:
In
Outsourcing garbled circuit generation for mobile devices.
ACSAC. ACM, 2014.
[11] Henry Carter, Benjamin Mood, Patrick Traynor, and Kevin Butler.
Secure outsourced garbled circuit evaluation for mobile phones.
In USENIX Security, pages 289‚Äì304. USENIX, 2013.
[12] Chi-Min Chu, Miodrag Potkonjak, Markus Thaler, and Jan
Rabaey. HYPER: An interactive synthesis environment for high
performance real time applications.
In ICCD, pages 432‚Äì435.
IEEE, 1989.
426426
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:52 UTC from IEEE Xplore.  Restrictions apply. 
[13] Design Compiler. Synopsys inc. http://www.synopsys.com/Tools/
Implementation/RTLSynthesis/DesignCompiler, 2000.
[14] Miguel R Corazao, Marwan A Khalaf, Lisa M Guerra, Miodrag
Potkonjak, and Jan M Rabaey. Performance optimization using
template mapping for datapath-intensive high-level synthesis.
TCAD, pages 877‚Äì888, 2006.
[15] Martin Davis. Engines of Logic: Mathematicians and the Origin
of the Computer. WW Norton & Co., Inc., 2001.
[16] Jan Decaluwe. MyHDL: a python-based hardware description
language. Linux journal, page 5, 2004.
[17] Daniel Demmler, Thomas Schneider, and Michael Zohner. Ad-
hoc secure two-party computation on mobile devices using hard-
ware tokens.
In USENIX Security, pages 893‚Äì908. USENIX,
2014.
[18] Daniel Demmler, Thomas Schneider, and Michael Zohner. ABY
‚Äì a framework for efÔ¨Åcient mixed-protocol secure two-party
computation. In NDSS. The Internet Society, 2015.
[19] C-based Design. High-level synthesis with Vivado HLS. http:
//www.xilinx.com/products/design-tools/vivado.html, 2013.
[20] Srinivas Devadas, Abhijit Ghosh, and Kurt Keutzer.
Logic
Synthesis. McGraw-Hill, Inc., 1994.
[21] Encounter. RTL compiler by cadence design systems. http://
www.cadence.com/products/di/pages/default.aspx.
[22] David Evans, Yan Huang, Jonathan Katz, and Lior Malka. EfÔ¨Å-
cient privacy-preserving biometric identiÔ¨Åcation. In NDSS, 2011.
[23] Martin Franz, Andreas Holzer, Stefan Katzenbeisser, Christian
Schallhart, and Helmut Veith. Cbmc-gc: An ansi c compiler for
secure two-party computations. In Compiler Construction, pages
244‚Äì249. Springer, 2014.
[24] Tore K Frederiksen and Jesper B Nielsen. Fast and maliciously
In ACNS, pages
secure two-party computation using the GPU.
339‚Äì356. Springer, 2013.
[25] Craig Gentry, Shai Halevi, Steve Lu, Rafail Ostrovsky, Mariana
In
Raykova, and Daniel Wichs. Garbled RAM revisited.
EUROCRYPT, pages 405‚Äì422. Springer, 2014.
[26] Oded Goldreich, Silvio Micali, and Avi Wigderson. How to play
any mental game. In STOC, pages 218‚Äì229. ACM, 1987.
[27] Oded Goldreich and Rafail Ostrovsky. Software protection and
simulation on oblivious RAMs. JACM, 1996.
[28] S. Dov Gordon, Jonathan Katz, Vladimir Kolesnikov, Fernando
Krell, Tal Malkin, Mariana Raykova, and Yevgeniy Vahlis. Secure
two-party computation in sublinear (amortized) time.
In CCS.
ACM, 2012.
[29] Mentor Graphics and Customer Success Story.
HDL de-
http://www.mentor.com/products/fpga/hdl design/hdl
signer.
designer series/, 2008.