because SID uses under-constrained symbolic execution, which
is conservative [41]. By combining both requirements, it is
intuitive to determine that the patch prevents violation of a
security rule. To realize the checking against the requirements,
SID first constructs and collects the constraint sets from patches,
security rules, and the slice paths for the patched and unpatched
code separately. If both constraint sets for the patched and
unpatched code are unsolvable, SID determines the security
impact.
1) Constructing and Collecting Constraints: SID constructs
and collects three sets of constraints for both the patched version
and the unpatched version. These constraints come from three
sources—security operations from the patch, the code path
of each slice, and security rules. We now describe how SID
collects or constructs these constraints.
Security operations
Pointer nullification
Initialization
Permission check
Bound check
Constraints from security operations
Patched version
Unpatched version
FLAGCV = 1
FLAGCV = 1
FLAGCV = 1
CV  LowBound
FLAGCV = 0
FLAGCV = 0
FLAGCV = 0
CV ⩾ UpBound, resp.
CV ⩽ LowBound
TABLE V: Constraints for security operations from patches. FlagCV :
Flag symbol; CV: critical variable; UpBound: checked upper bound;
LowBound: checked lower bound.
Constructing constraints from security operations. The
constraints from security operations are used to capture the
“effects” of them in preventing security impacts. We define the
constraints for each class of security operation for the patched
and unpatched code, respectively. Table V shows our rules
for constructing constraints for different security operations.
Besides out-of-bound access, constraints for other security
operations are used to indicate whether the security operations
are present. Therefore, we use a binary-flag symbol to represent
the constraint. Specifically, FLAGCV indicates the status of the
corresponding critical variables, in terms of the presence of
the security operations. FLAGCV = 1 means that the security
operation has been enforced against critical variable CV. By
contrast, FLAGCV = 0 indicates the absence of the security
7
operation for CV. The constraints for bound-check cases are
more complicated. The constraints are used to limit the upper
bound and/or the lower bound of a memory object. In addition
to indicating the presence of the security operation, we also
need to know the specific value range of the value of the critical
variables. Thus, we use symbolized critical variable to represent
the value.
To check against the requirements for the patched and un-
patched code, we must construct these constraints differently (in
an opposite way). For permission bypass, use-after-free, double-
free, and uninitialized use, SID inserts constraints FLAGCV = 1
for the security operations in the patched version while inserting
FLAGCV = 0 in the unpatched version because the security
operations are missing. For out-of-bound access vulnerabilities,
SID adds the constraints CV  LowBound
on the symbolized critical variable in the patched version.
For example, in Figure 3, the constraint from the security
operation in the patch is sta_id = UpBound
or CV = IWLAGN_STATION_COUNT for the
unpatched version.
Collecting constraints from slice paths. The constraints from
paths (from a security operation to a vulnerable operation)
are collected from two parts. The first part is the same as
the one in removing infeasible slices (see §IV-A). These
constraints are collected from path conditions that are checked
to make sure the slice itself is feasible. The second part is to
collect manipulations against critical variables. For example,
in the uninitialized use case, for an initialization against the
critical variable in the slice path, SID will add a constraint,
FLAGCV = 1.
Constructing constraints from security rules. The last set
of constraints SID constructs are from the security rules. These
constraints are important to evaluate if a security-rule violation
may occur. We develop multiple rules for constructing these
constraints of different security rules, as shown in Table VI.
SID also constructs opposite constraints for the patched and
unpatched versions.
For the patched version, we want to prove that, with
the protection of the security operations, it is impossible to
violate the security rules. Therefore, SID inserts rule-violating
constraints and hopes that they are unsolvable, i.e., FlagCV = 0,
CV >= MAX and/or CV = 16) for the patched version. For the unpatched
version, we want to prove that, without the security operations,
it always violates the security rules. In order to achieve this,
the constraints in the unpatched version will be opposite to the
constraints in the patched version, which instead represents the
compliance of the security rules. Here, we hope to prove that the
constraints are unsolvable, so the compliance of security rules
is impossible. For example, in Figure 3, from the security rule
of in-bound access, SID inserts the constraint, sta_id  MIN
TABLE VI: Rules for constructing constraints from security rules.
MAX: maximum bound of the buffer; MIN: minimum bound of the
buffer.
2) Solvability for each slice: To know the solvability of each
slice, SID merges the three sets of constraints as the final ones
for the patched and unpatched versions, respectively. SID then
uses SMT solver, Z3, to solve the constraints. In the example
in Figure 3, for the patched version, the final constraint set
is sta_id = 16, which
are generated from the security operation and security rules.
Similarly, for the unpatched version, the final constraint set
is sta_id >= IWLAGN_STATION_COUNT && sta_id , =, or <=, and both of the operands of bound
check should be of integer type such as int or unsigned.
(2) One branch of the conditional statement should result in
error handling (e.g., returning an error code) when a bound
check fails while other branches continue normal execution.
This is similar to the check definition in [31, 35].
• Pointer nullification. NULL checks are typically enforced
before using pointers. Based on the common patch patterns,
we regard pointer nullification as the security operation
against use-after-free. Nullification can be easily identified
when NULL is assigned to a pointer.
• Initialization. We regard initialization operations as the
security operations against uninitialized use. Initialization is
either a store instruction that assigns 0 to a variable or a
call to memset() that takes 0 as the value argument.
• Permission checks.
Permission check is the security
operation against permission bypass. By looking into how
permission bypass is commonly patched, we first empir-
ically collect the common permission functions such as
afs_permission() and ns_capable(). Then, we identify a
conditional statement (e.g., if statement) as a permission
check if it is a security check [31] against the return value
of these permission functions.
C. Identifying vulnerable operation
SID then identifies vulnerable operations. To do that, SID
first extracts the critical variables from the identified security
operations, as described in §IV-A. Based on the uses of the
critical variables, SID employs data-flow analysis (i.e., slicing)
to identify the vulnerable operations, according to the rules
in §II-C. Here, we have extracted the critical variables from
security operations. With that, we present some implementation
details on the identification of vulnerable operations that use
the critical variables.
• Out-of-bound access. We first identify the instructions that
access an array or buffer using the critical variables (i.e.,
size variables) as vulnerable operations. We also identify
common read or write functions (e.g., memcpy()) that take
as input the critical variables as vulnerable operations.
• Use-after-free and double-free. We conservatively identify
all pointer dereference operations that target the critical
variables as vulnerable operations.
• Uninitialized use. We identify the common operations on
the uninitialized variables as vulnerable operations. These
common operations include pointer dereference, function
calls, memory access, and binary operations such as arith-
metic operation. Also, these operations must also target the
critical variables.
• Permission bypass. Based on the extracted the critical
variables in permission checks, which take struct types
such as kuid_t, inode, file or corresponding pointer types,
we conservatively identify operations against critical variables
as vulnerable operations.
D. Mapping Operations in Patched and Unpatched Versions
A patch may involve multiple security operations and
vulnerable operations, thus multiple slices. To perform the
symbolic rule comparison, we need to map the corresponding
slices in the patched and unpatched versions. SID pairs slices
relying on various types of information such as function name
and control flow. Specifically, to pair the slices, SID first extracts
the vulnerable operation of the slices for both the patched and
unpatched versions. The vulnerable operations must exactly
match. If the vulnerable operations are matched, SID further
employs control-flow comparison to make sure that the two
slices are the same except the parts introduced by the patch.
With these two steps, SID can map the slices between the
patched version and the unpathed version.
E. The Under-Constrained Symbolic-Execution Engine
SID uses under-constrained symbolic execution to analyze
the code for patched and unpatched versions. Similar to UC-
KLEE [41], the symbolic execution of SID can start from
any point in a function. Specifically, SID only executes on
the slices collected from the static analysis during dissecting
9
patches. Since the collected constraints in these individual slices
are not complete, they are under-constrained, which may lead
to false negatives. However, SID’s main goal is to determine
security impacts with a low false-positive rate. We will discuss
how to collect more constraints beyond the slices in §VII.
Avoiding path explosion. Path explosion is a general problem
in symbolic execution, which is fortunately mitigated in SID.
Different from the whole-program symbolic execution, SID
only works on the slices collected by the static analysis. Most
of the security operations are near the vulnerable operations,
so most slices are short, involving a single module. As such,
the path-explosion problem, in most cases, does not occur.
However, we did observe the path-explosion problem in some
instances. To completely avoid path explosion, SID chooses to
discard slices with more than 150 basic blocks. This threshold
number is carefully selected based on our statistical study—
more than 98.8% of slices cover less than 150 basic blocks.
The heuristic is also used in previous works, such as UC-KLEE
[41], to alleviate path explosion. By using this method, slices
can be symbolically analyzed quickly without encountering the
path-explosion problem.
VI. EVALUATION
We evaluate the accuracy, effectiveness, and scalability of
SID, and also present new findings regarding characteristics
of security bugs. We chose the Linux kernel as the target
program, and collected more than 66K git commits in recent
years. During the pre-processing, 11,433 non-bug commits
are eliminated, which finally returns us 54,651 valid patches.
For these valid patches, we generated 110,136 LLVM IR bit
code files for both the patched and unpatched versions. The
experiments were performed on Ubuntu 18.04, 64-bit OS with
LLVM-8.0. The machine has a 32GB RAM and is equipped
with six cores Intel (R) Xeon (R) W-2133 CPU @ 3.60GHz. It
is worth noting that the following measurement uses a single
thread without parallel computing.
Efficiency and scalability. For each patch, SID analyzes both
the patched version and the unpatched version. The analysis
takes an average of 0.415 seconds (median 0.056s, max 15s) for
each version, which means that, for every patch, the analysis
costs 0.83 seconds on average. During the analysis, the detection
of out-of-bound read or write vulnerabilities patches takes 63 %
of the total time, while all other cases take only 37% of the total
time. Processing patches for out-of-bound access vulnerabilities
requires more time since some more slices and constraints that
are more complex, requiring more time for symbolic execution.
The results indicate that SID is efficient enough to handle a
massive amount of patches precisely.
A. False Positives of SID
We use precision, |TP| / |TP+FP|, to evaluate the false
positives of SID, where TP and FP are the numbers of true
positives and false positives. To calculate the precision, we
manually checked all the results generated by SID. In order to
precisely confirm that these bugs are true security bugs, we look
into the patch description (comments), the patch code, and the
involved source code. If the comments have already mentioned
the same security impacts as SID found, we regard them as a
security bug because both Linux maintainers and reporters have
confirmed the security impact. Otherwise, we manually review
the patch code and the involved source code to check (1) if the
vulnerable operations found by SID indeed introduce security
impacts in the unpatched version and (2) if these security
impacts are eliminated by the security operations in the patch.
If both of these conditions are true, we confirm the security
impacts and the security bug. Finally, we confirmed 227 security
bugs with 8 false-positive cases. As a result, the precision
rate of SID is 97%. We investigated these false positives and
summarized the reasons as follows.
Missing constraints in preventive-patching cases.
SID
employs under-constrained symbolic execution to analyze
only the slices that start from the security operations to the
vulnerable operations. As such, earlier constraints that are
before the security operations will be missed. In general, if the
“earlier” constraints have already been able to prevent a security
impact, the constraints in the patch are unnecessary. However,
we did find five cases in which the patches are preventive
and enforce redundant constraints. Developers enforce the
preventive patches because the “earlier” constraints can be
changed in future code. In these cases, SID will identify them
as patches fixing security bugs, leading to false positives.
Eliminating all these preventive patches is a hard problem,
which requires a more complete constraints set. However, we
would like to mention that these five cases violate SID’s threat
model—the provided patches correctly fix actual bugs.
Inaccurate static analysis. During dissecting patches, SID
employs static data-flow analysis to find the slices from security
operations to vulnerable operations. Due to the inaccuracy
of the static analysis and the incompleteness of identifying
security or vulnerable operations, many slices are infeasible.
Although SID further employs symbolic execution to validate
the slices, because the symbolic execution is under-constrained,
the resulting slices may still be infeasible, leading to false
positives. The remaining three false positives are caused by
such inaccuracy. In the future, we plan to improve the under-
constrained symbolic execution by collecting more constraints,
as discussed in §VII.
B. False Negatives of SID
By design, SID aims to ensure less false positives by
allowing more false negatives. In this section, we evaluate
the false negatives of SID and investigate the causes. Generally,
the evaluation of false-negative cases for static analysis tools
is not as easy as a precision evaluation because it requires
a ground-truth set. To this end, we use SID to detect known
vulnerabilities in the Linux kernel to evaluate how many of them
are missed by SID. Specifically, like selecting recent patches
in §II-B, we chose patches from 100 recent vulnerabilities,
which violate at least one of our security rules.We used SID to
analyze the corresponding patches. It turns out that SID found
47 vulnerabilities out of the 100. Therefore, SID missed 53%
of vulnerabilities. After manually checking the false-negative
cases, we found the following main causes. The corresponding
solutions to reducing false negatives are discussed in §VII.
Under-constrained symbolic execution.
SID uses under-