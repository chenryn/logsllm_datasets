sky, 2014.
https://
fall
from the
[4] When
www.washingtonpost.com/sf/investigative/2014/06/20/
when-drones-fall-from-the-sky.
[5] F.A.A. Opens Inquiry After Baby Hurt in Drone Crash, 2015.
https://www.nytimes.com/2015/09/23/business/drone-
crash-injures-baby-highlighting-faa-concerns.html.
[6] White House Drone Crash Described as a U.S. Worker’s Drunken Lark,
2015. https://www.nytimes.com/2015/01/28/us/white-house-
drone.html.
[7] Facebook drone investigation: Wind gust led to broken wing, 2016.
https://www.cnet.com/news/facebook-drone-investigation-
wind-gust-led-to-broken-wing.
[8] Amazon Prime Air, 2017. https://www.amazon.com/Amazon-Prime-
Air/b?node=8037720011.
[9] How we’re using drones to deliver blood and save lives, 2017. https:
//www.youtube.com/watch?v=73rUjrow5pI.
[10] Power Consumption
of Raspberry Pi
3 Model B, 2017.
https://github.com/raspberrypi/documentation/blob/
master/hardware/raspberrypi/power.
[11] Zipline’s Ambitious Medical Drone Delivery in Africa, 2017. https:
//www.technologyreview.com/s/608034/blood-from-the-sky-
ziplines-ambitious-medical-drone-delivery-in-africa.
[12] ArduPilot, 2018. http://ardupilot.org.
[13] MAVLink Micro Air Vehicle Communication Protocol, 2018. https:
//mavlink.io.
[14] Navio2, 2018. https://emlid.com/navio.
[15] Paparazzi UAV - an open-source drone hardware and software project,
2018. http://wiki.paparazziuav.org/wiki/Main_Page.
[16] PX4 Pro Open Source Autopilot, 2018. http://px4.io.
[17] Raspberry Pi 3 Model B, 2018. https://www.raspberrypi.org/
products/raspberry-pi-3-model-b.
[18] TPM Main Speciﬁcation, 2018.
[19] LogAnalyzer: Diagnosing problems using Logs for ArduPilot, 2019.
http://ardupilot.org/copter/docs/common-diagnosing-
problems-using-logs.html.
[20] ArduPilot :: About, 2020. https://ardupilot.org/about.
[21] Coverity Scan Static Analysis, 2020. https://scan.coverity.com.
[22] Cppcheck - A tool for static C/C++ code analysis, 2020. http://
cppcheck.sourceforge.net.
[23] Raja Ben Abdessalem, Annibale Panichella, Shiva Nejati, Lionel C
Briand, and Thomas Stifter. Testing autonomous cars for feature in-
In Proceedings of
teraction failures using many-objective search.
the 33rd ACM/IEEE International Conference on Automated Software
Engineering (ASE), 2018.
[24] Thomas Ball and James R. Larus. Efﬁcient path proﬁling. In Pro-
ceedings of the 29th Annual ACM/IEEE International Symposium on
Microarchitecture (MICRO), 1996.
[25] Steve Best. Journaling ﬁle systems. Linux Magazine, 4:24–31, 2002.
[26] Long Cheng, Ke Tian, and Danfeng Daphne Yao. Orpheus: Enforcing
cyber-physical execution semantics to defend against data-oriented
attacks. In Proceedings of the 33rd Annual Computer Security Applica-
tions Conference (ACSAC), 2017.
[27] Trishul M. Chilimbi, Ben Liblit, Krishna Mehra, Aditya V. Nori, and
Kapil Vaswani. Holmes: Effective statistical debugging via efﬁcient
path proﬁling. In Proceedings of the 31st International Conference on
Software Engineering (ICSE), 2009.
[28] Hongjun Choi, Wen-Chuan Lee, Yousra Aafer, Fan Fei, Zhan Tu, Xi-
angyu Zhang, Dongyan Xu, and Xinyan Deng. Detecting Attacks
In Pro-
Against Robotic Vehicles: A Control Invariant Approach.
ceedings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security (CCS), 2018.
[29] Devon R Clark, Christopher Meffert, Ibrahim Baggili, and Frank Bre-
itinger. Drop (drone open source parser) your drone: Forensic analysis
of the dji phantom iii. Digital Investigation, 22:S3–S14, 2017.
[30] Nathan Dautenhahn, Theodoros Kasampalis, Will Dietz, John Criswell,
and Vikram Adve. Nested kernel: An operating system architecture
for intra-kernel privilege separation. In Proceedings of the 20th In-
ternational Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), 2015.
[31] Lucas Davi, Matthias Hanreich, Debayan Paul, Ahmad-Reza Sadeghi,
Patrick Koeberl, Dean Sullivan, Orlando Arias, and Yier Jin. Haﬁx:
Hardware-assisted ﬂow integrity extension. In Proceedings of the 52nd
Annual Design Automation Conference (DAC), 2015.
[32] Drew Davidson, Hao Wu, Rob Jellinek, Vikas Singh, and Thomas Ris-
tenpart. Controlling UAVs with Sensor Input Spooﬁng Attacks. In
Proceedings of the 10th USENIX Workshop on Offensive Technologies
(WOOT), 2016.
928    29th USENIX Security Symposium
USENIX Association
[33] Matthew Eagon, Zhan Tu, Fan Fei, Dongyan Xu, and Xinyan Deng.
Sensitivity-based dynamic control frequency scheduling of quadcopter
mavs. In Proc. SPIE 11009, Autonomous Systems: Sensors, Processing,
and Security for Vehicles and Infrastructure, 2019.
[34] Fan Fei, Zhan Tu, Ruikun Yu, Taegyu Kim, Xiangyu Zhang, Dongyan
Xu, and Xinyan Deng. Cross-layer retroﬁtting of uavs against cyber-
physical attacks. In Proceedings of the IEEE International Conference
on Robotics and Automation (ICRA), 2018.
[35] Aurélien Francillon, Quan Nguyen, Kasper B Rasmussen, and Gene
Tsudik. A minimalist approach to remote attestation. In Proceedings of
the Design, Automation and Test in Europe Conference and Exhibition
(DATE), 2014.
[36] Balazs Gati. Open source autopilot for academic research-the paparazzi
system. In Proceedings of the American Control Conference (ACC),
2013.
[37] Dunstan Graham and Richard C Lathrop. The synthesis of optimum
transient response: criteria and standard forms. Transactions of the
American Institute of Electrical Engineers, Part II: Applications and
Industry, 72(5):273–288, 1953.
[38] Saeid Habibi. The smooth variable structure ﬁlter. In Proceedings of
the IEEE, volume 95, pages 1026–1059, 2007.
[39] Taylor Hardin, Ryan Scott, Patrick Proctor, Josiah Hester, Jacob Sorber,
and David Kotz. Application memory isolation on ultra-low-power
mcus. In Proceedings of the 2018 USENIX Annual Technical Confer-
ence (ATC), 2018.
[40] Zhijian He, Yao Chen, Enyan Huang, Qixin Wang, Yu Pei, and Haidong
Yuan. A system identiﬁcation based oracle for control-cps software
fault localization. In Proceedings of the IEEE/ACM 40th International
Conference on Software Engineering (ICSE), 2019.
[41] Liang Heng, Daniel B Work, and Grace Xingxin Gao. Gps signal au-
thentication from cooperative peers. IEEE Transactions on Intelligent
Transportation Systems, 16(4):1794–1805, 2014.
[42] Kate Highnam, Kevin Angstadt, Kevin Leach, Westley Weimer, Aaron
Paulos, and Patrick Hurley. An Uncrewed Aerial Vehicle Attack Sce-
nario and Trustworthy Repair Architecture. In Proceedings of the 46th
Annual IEEE/IFIP International Conference on Dependable Systems
and Networks Workshop (DSN-W), 2016.
[43] Owen S Hofmann, Sangman Kim, Alan M Dunn, Michael Z Lee, and
Emmett Witchel. Inktag: Secure applications on an untrusted operating
system. In Proceedings of the 18th International Conference on Archi-
tectural Support for Programming Languages and Operating Systems
(ASPLOS), 2013.
[44] Susan Horwitz, Thomas Reps, and David Binkley. Interprocedural
slicing using dependence graphs. ACM Transactions on Programming
Languages and Systems, 12(1):26–60, 1990.
[45] Upasita Jain, Marcus Rogers, and Eric T Matson. Drone forensic frame-
work: Sensor and data identiﬁcation and veriﬁcation. In Proceedings
of Sensors Applications Symposium (SAS), 2017.
[46] Kai Jansen, Matthias Schäfer, Daniel Moser, Vincent Lenders, Christina
Pöpper, and Jens Schmitt. Crowd-gps-sec: Leveraging crowdsourcing
to detect and localize gps spooﬁng attacks. In Proceedings of the 39th
IEEE Symposium on Security and Privacy (SP), 2018.
[47] Yang Ji, Sangho Lee, Mattia Fazzini, Joey Allen, Evan Downing, Taesoo
Kim, Alessandro Orso, and Wenke Lee. Enabling reﬁnable cross-
host attack investigation with efﬁcient data ﬂow tagging and tracking.
In Proceedings of the 27th USENIX Security Symposium (USENIX
Security), 2018.
[48] Simon J Julier and Jeffrey K Uhlmann. Unscented ﬁltering and nonlin-
ear estimation. Proceedings of the IEEE, 92(3):401–422, 2004.
[49] Baris Kasikci, Benjamin Schubert, Cristiano Pereira, Gilles Pokam,
and George Candea. Failure sketching: A technique for automated root
cause diagnosis of in-production failures. In Proceedings of the 25th
Symposium on Operating Systems Principles (SOSP), 2015.
[50] Chung Hwan Kim, Taegyu Kim, Hongjun Choi, Zhongshu Gu, By-
oungyoung Lee, Xiangyu Zhang, and Dongyan Xu. Securing real-time
microcontroller systems through customized memory view switching.
In Proceedings of the 27th Annual Symposium on Network and Dis-
tributed System Security (NDSS), 2018.
[51] Taegyu Kim, Chung Hwan Kim, Junghwan Rhee, Fan Fei, Zhan Tu,
Gregory Walkup, Xiangyu Zhang, Xinyan Deng, and Dongyan Xu.
Rvfuzzer: Finding input validation bugs in robotic vehicles through
control-guided testing. In Proceedings of 28th USENIX Security Sym-
posium (USENIX Security), 2019.
[52] Patrick Koeberl, Steffen Schulz, Ahmad-Reza Sadeghi, and Vijay Varad-
harajan. Trustlite: A security architecture for tiny embedded devices. In
Proceedings of the Ninth European Conference on Computer Systems,
EuroSys ’14, 2014.
[53] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. LogGC: Garbage
In Proceedings of the 2013 ACM SIGSAC
Collecting Audit Log.
Conference on Computer Communications Security (CCS), 2013.
[54] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. High Accuracy
Attack Provenance via Binary-based Execution Partition. In Proceed-
ings of the 20th Annual Symposium on Network and Distributed System
Security (NDSS), 2016.
[55] Yanlin Li, Jonathan M. McCune, and Adrian Perrig. Viper: Verifying
the integrity of peripherals’ ﬁrmware. In Proceedings of the 18th ACM
Conference on Computer and Communications Security (CCS), 2011.
[56] Ben Liblit, Mayur Naik, Alice X. Zheng, Alex Aiken, and Michael I.
Jordan. Scalable statistical bug isolation. In Proceedings of the 2005
ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), 2005.
[57] Xin Liu, Yuhua Xu, Luliang Jia, Qihui Wu, and Alagan Anpalagan.
Anti-jamming communications using spectrum waterfall: A deep
IEEE Communications Letters,
reinforcement learning approach.
22(5):998–1001, 2018.
[58] Zhilong Liu, Raja Sengupta, and Alex Kurzhanskiy. A power con-
sumption model for multi-rotor small unmanned aircraft systems. In
Proceedings of the 2017 International Conference on Unmanned Air-
craft Systems (ICUAS), 2017.
[59] Ao Ma, Chris Dragga, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-
Dusseau, and Marshall Kirk Mckusick. Ffsck: The fast ﬁle-system
checker. ACM Transactions on Storage (TOS), 10(1), 2014.
[60] Shiqing Ma, Xiangyu Zhang, and Dongyan Xu. ProTracer: Towards
Practical Provenance Tracing by Alternating Between Logging and
Tainting. In Proceedings of the 25th Annual Symposium on Network
and Distributed System Security (NDSS), 2016.
[61] Dennis K Nilsson, Lei Sun, and Tatsuo Nakajima. A framework for
self-veriﬁcation of ﬁrmware updates over the air in vehicle ecus. In
Proceedings of the 2008 IEEE GLOBECOM Workshops, 2008.
[62] K Ogata and Y Yang. Modern control engineering. 1970.
[63] Peter Ohmann and Ben Liblit. Lightweight control-ﬂow instrumenta-
tion and postmortem analysis in support of debugging. In Proceedings
of the 28th IEEE/ACM International Conference on Automated Soft-
ware Engineering (ASE), 2013.
[64] Soyeon Park, Yuanyuan Zhou, Weiwei Xiong, Zuoning Yin, Rini
Kaushik, Kyu H. Lee, and Shan Lu. Pres: Probabilistic replay with
execution sketching on multiprocessors. In Proceedings of the ACM
SIGOPS 22nd Symposium on Operating Systems Principles (SOSP),
2009.
[65] Kexin Pei, Yinzhi Cao, Junfeng Yang, and Suman Jana. Deepxplore:
Automated whitebox testing of deep learning systems. In Proceedings
of the 26th Symposium on Operating Systems Principles (SOSP), 2017.
[66] Konstantinos Pelechrinis, Ioannis Broustis, Srikanth V Krishnamurthy,
and Christos Gkantsidis. Ares: an anti-jamming reinforcement sys-
In Proceedings of the 5th International
tem for 802.11 networks.
Conference on Emerging Networking Experiments and Technologies
(CoNEXT), 2009.
USENIX Association
29th USENIX Security Symposium    929
[67] Friedrich Pukelsheim. The three sigma rule. The American Statistician,
48(2):88–91, 1994.
[68] Ryan Riley, Xuxian Jiang, and Dongyan Xu. Guest-transparent pre-
vention of kernel rootkits with vmm-based memory shadowing. In
Proceedings of International Workshop on Recent Advances in Intru-
sion Detection (RAID), 2008.
[69] Arvind Seshadri, Mark Luk, Ning Qu, and Adrian Perrig. Secvisor: A
tiny hypervisor to provide lifetime kernel code integrity for commodity
oses. In Proceedings of the 21st Symposium on Operating Systems
Principles (SOSP), 2007.
[70] Yunmok Son, Hocheol Shin, Dongkwan Kim, Young-Seok Park, Juh-
wan Noh, Kibum Choi, Jungwoo Choi, and Yongdae Kim. Rocking
Drones with Intentional Sound Noise on Gyroscopic Sensors. In Pro-
ceedings of the 24th USENIX Security Symposium (USENIX Security),
2015.
[71] Chengyu Song, Hyungon Moon, Monjur Alam, Insu Yun, Byoungy-
oung Lee, Taesoo Kim, Wenke Lee, and Yunheung Paek. Hdﬁ:
hardware-assisted data-ﬂow isolation. In Proceedings of the 37th IEEE
Symposium on Security and Privacy (SP), 2016.
[72] Yulei Sui and Jingling Xue. SVF: Interprocedural Static Value-ﬂow
Analysis in LLVM. In Proceedings of the 25th International Confer-
ence on Compiler Construction (CC), 2016.
[73] Vinaitheerthan Sundaram, Patrick Eugster, and Xiangyu Zhang. Efﬁ-
cient diagnostic tracing for wireless sensor networks. In Proceedings
of the 8th ACM Conference on Embedded Networked Sensor Systems
(SenSys), 2010.
[74] Christopher Steven Timperley, Afsoon Afzal, Deborah S Katz, Jam Mar-
cos Hernandez, and Claire Le Goues. Crashing simulated planes is
cheap: Can simulation detect robotics bugs early? In Proceedings
of the 2018 IEEE 11th International Conference on Software Testing,
Veriﬁcation and Validation (ICST), 2018.
[75] Michael Vierhauser, Jane Cleland-Huang, Sean Bayley, Thomas Kris-
mayer, Rick Rabiser, and Pau Grünbacher. Monitoring cps at runtime-a
case study in the uav domain. In Proceedings of 2018 44th Euromi-
cro Conference on Software Engineering and Advanced Applications
(SEAA), 2018.
[76] Jun Xu, Dongliang Mu, Xinyu Xing, Peng Liu, Ping Chen, and Bing
Mao. Postmortem program analysis with hardware-enhanced post-
crash artifacts. In Proceedings of the 26th USENIX Security Symposium
(USENIX Security), 2017.
[77] Ding Yuan, Haohui Mai, Weiwei Xiong, Lin Tan, Yuanyuan Zhou,
and Shankar Pasupathy. Sherlog: Error diagnosis by connecting clues
from run-time logs. In Proceedings of the 15th ACM International
Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2010.
Appendix
A State Consistency Check Formula
During the CVDG-level corruption path inference (Sec-
tion 6.1.2), MAYDAY must determine whether the vehicle
state of the initial digressing controller (xI) and that of the
child controller (xc) shows consistent vehicle states. We lever-
age the following equation to compare the two vehicle states:
(cid:82) t+wI
t
err(CI,Cc) =
|xI (s+wc)−xI (s)−(cid:82) s+wc
s
wI
λ(xc(v))dv|ds
(1)
Intuitively, xI and xc are not directly comparable since their
orders are different. To match the order, MAYDAY makes
the order of xc equal to that of xI via integral using the time
window (wc). MAYDAY leverages IAE [37] to robustly check
the error value between the two vehicle states within the time
window (wI), similar to the initial digression determination
(Section 6.1.1). If this error value is larger than the threshold
(T hr) of the child controller, we consider the two vehicle
states as inconsistent. The above time windows (wI, wc) and
threshold (T hr) are described in Appendix B.
Additionally, we leverage λ which is a conversion func-
tion to compare different child controllers. λ is normally an
identity function. However, λ becomes the inverse form of
an inter-cascading controller formula in Fig. 6 only if the
controller states are located in multiple cascading controllers
(Section 5.1).
B Parameters for Digression Determination
We used threshold (T hr) and time window (w) (refer to the
IAE formula [37] and Equation 1) for both initial digres-
sion determination 6.1.1 and state consistency check in Ap-
pendix A. For the selection of reasonable T hr and w, we used
the three-sigma rule [67] with ﬁfty different experimental mis-
sions for 6DoF, similar to the previous work [51]. Compared
to w in the previous work, we used much smaller windows
to detect the more accurate time when the initial digression
occurred. Speciﬁcally, we used 0.5 seconds for the x-, y-axis
controllers, z-axis position, acceleration controllers, and yaw
and yaw rate controllers. In addition, we used 0.25 seconds for
the z-axis velocity controller, and roll and roll rate controllers,
and pitch and pitch rate controllers.
930    29th USENIX Security Symposium
USENIX Association