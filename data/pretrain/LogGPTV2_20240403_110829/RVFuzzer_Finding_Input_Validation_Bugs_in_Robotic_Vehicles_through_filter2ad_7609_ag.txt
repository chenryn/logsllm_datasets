Usenix Security ’15, 2015.
[73] Yunmok Son, Juhwan Noh, Jaeyeong Choi, and Yongdae Kim. Gyros-
ﬁnger: Fingerprinting drones for location tracking based on the outputs
of mems gyroscopes. ACM Transactions on Privacy and Security
(TOPS), 21(2):10, 2018.
[74] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher,
Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher
Kruegel, and Giovanni Vigna. Driller: Augmenting fuzzing through
selective symbolic execution. In Proceedings of the 23rd Annual Sym-
posium on Network and Distributed System Security (NDSS), NDSS
’16, 2016.
[75] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. Sok: Eternal
In Proceedings of the 33rd IEEE Symposium on
war in memory.
Security and Privacy (IEEE S&P), IEEE S&P ’13, 2013.
[76] Heidar A Talebi, Khashayar Khorasani, and Siamak Tafazoli. A re-
current neural-network-based sensor and actuator fault detection and
isolation for nonlinear systems with application to the satellite’s at-
IEEE Transactions on Neural Networks,
titude control subsystem.
20(1):45–60, 2009.
[77] T. Trippel, O. Weisse, W. Xu, P. Honeyman, and K. Fu. Walnut: Waging
doubt on the integrity of mems accelerometers with acoustic injection
attacks. In Proceedings of 2017 IEEE European Symposium on Security
and Privacy (EuroS&P), EuroS&P ’17, 2017.
440    28th USENIX Security Symposium
USENIX Association
[78] Mathy Vanhoef and Frank Piessens. Key reinstallation attacks: Forcing
nonce reuse in wpa2. In Proceedings of the 24th ACM Conference on
Computer and Communications Security (CCS), CCS ’17, 2017.
[79] T. Wang, T. Wei, G. Gu, and W. Zou. Taintscope: A checksum-aware
directed fuzzing tool for automatic software vulnerability detection. In
Proceedings of the 2010 IEEE Symposium on Security and Privacy
(IEEE S&P), IEEE S&P ’10, 2010.
[80] Chen Yan, Wenyuan Xu, and Jianhao Liu. Can you trust autonomous
vehicles: Contactless attacks against sensors of self-driving vehicle.
DEF CON, 24, 2016.
A Thresholds for Control State Deviation
We present how to determine the threshold values used by
our control instability detector to detect control state devia-
tion (Section 4.2). We use the AVC2013 mission (Section 5)
and thirty other experimental missions in our experiments,
similar to existing work [38]. Speciﬁcally, the thresholds are
determined by applying the three-sigma rule [65] on the top
deviation values. For the time window (w) in the IAE for-
mula, we set it to the duration of each mission segment (i.e.,
ﬂight segment between two consecutive waypoints) within a
mission. The list of the threshold values that we use for each
control state is presented in Table 2.
We note that we do not monitor control state deviation in
the second derivative states of the 6DoF (i.e., acceleration of
any of the 6DoF). This is because, if their observed states are
oscillating, they can potentially cause false positives. In fact,
for the same reason, some control programs do not control
acceleration in some 6DoF controllers (e.g., ArduPilot does
not control the angular acceleration of roll, pitch, and yaw).
However, RVFUZZER can detect their control state deviation
via the indirect impacts on the dependent states. The control
state deviation in the second derivative states are propagated
to their integral states (e.g., the ﬁrst derivative states of the
6DoF), as their controls are intrinsically related.
Table 2: List of threshold values for each control state.
Control Program
Latitude/Longitude
ArduPilot
PX4
11.62 m
10.08 m
Position
Latitude/Longitude
Velocity
Altitude Position
Altitude Velocity
Roll
Roll Rate
Pitch
Pitch Rate
Yaw
Yaw Rate
1.23 m/s
4.71 m/s
2.06 m
0.26 m/s
2.66 deg
2.83 deg/s
4.64 deg
3.43 m
0.12 m/s
1.98 deg
3.68 deg/s
3.94 deg
10.67 deg/s
15.35 deg/s
4.13 deg
6.16 deg
16.24 deg/s
14.69 deg/s
Table 3: Input validation bugs in ArduPilot and the implications of
the attacks exploiting them (C: Crash; D: Deviation from trajectory;
U: Unstable movement; S: “Stuck” in certain location or speed).
Control Program
Module
Parameter
Physical Impacts
C D U S


  
 



PSC_POSXY_P
PSC_VELXY_P
PSC_VELXY_I
PSC_POSZ_P
PSC_VELZ_P
PSC_ACCZ_P
PSC_ACCZ_I
PSC_ACCZ_D
ATC_ANG_RLL_P
ATC_RAT_RLL_I


  
  


ATC_RAT_RLL_IMAX 










ATC_RAT_RLL_D
ATC_RAT_RLL_P
ATC_RAT_RLL_FF
ATC_ANG_PIT_P
ATC_RAT_PIT_P
ATC_RAT_PIT_I
ATC_RAT_PIT_IMAX
ATC_RAT_PIT_D
ATC_RAT_PIT_FF
ATC_ANG_YAW_P
ATC_SLEW_YAW
ATC_RAT_YAW_P
ATC_RAT_YAW_I



Controller
Sensor
Mission

 























ATC_RAT_YAW_IMAX
ATC_RAT_YAW_D
ATC_RAT_YAW_FF
INS_POS1_Z
INS_POS2_Z
INS_POS3_Z
WPNAV_SPEED
WPNAV_SPEED_UP
WPNAV_SPEED_DN
WPNAV_ACCEL
WPNAV_ACCEL_Z
ANGLE_MAX
B Physical Impacts Caused by Input Valida-
tion Bug Exploitation
We present more details about the input validation bugs found
by RVFUZZER and the implications of the attacks that exploit
them in Tables 3 (for ArduPilot) and Table 4 (for PX4). The
columns of each table shows: (1) the control program modules
where the bugs belong (Control Program Module), (2) the
vulnerable control parameters (Parameter, i.e., with erroneous
range speciﬁcation or range implementation), and (3) the
possible physical impacts caused by the attacks exploiting the
bugs (Physical Impacts). While the two tables list a total of 63
parameters, some of the parameters are associated with both
range implementation and speciﬁcation bugs. This explains
why the total number of bugs (89) is higher than the number
of vulnerable parameters.
Depending on the speciﬁc (malicious) value of the control
parameter, the impact of an attack may vary. Here the possible
impacts are categorized into four types as shown in the four
USENIX Association
28th USENIX Security Symposium    441
sub-columns of the “Physical Impacts” column: “C” – vehicle
crash; “D” – deviation from trajectory; “U” – unstable vehicle
movement; and “S” – vehicle getting “stuck” at a certain
location or speed. All of these impacts are non-transient and
cannot be recovered by the controllers.
Table 4: Input validation bugs in PX4 and implications of attacks
exploiting them.
Control Program
Module
Parameter
Physical Impacts
C D U S


  
MC_TPA_RATE_P
MC_PITCHRATE_FF
MC_PITCHRATE_MAX  
MC_PITCHRATE_P
MC_PITCH_P
MC_ROLLRATE_FF
  
   
  
MC_ROLLRATE_MAX  
Controller
Mission
MC_ROLLRATE_P
MC_ROLL_P
MC_YAWRATE_FF
MC_YAWRATE_P
MC_YAW_P
MIS_YAW_ERR
MPC_TILTMAX_AIR
MPC_THR_MAX
MPC_THR_MIN
MPC_XY_P
MPC_Z_P
MPC_XY_VEL_P
MPC_Z_VEL_P
  
  
 
 
 



  
  

 
 

   

 
 

MC_YAWRAUTO_MAX
MPC_XY_VEL_MAX
MPC_XY_CRUISE


MPC_Z_VEL_MAX_DN

MPC_Z_VEL_MAX_UP  
MPC_TKO_SPEED
MPC_LAND_SPEED




442    28th USENIX Security Symposium
USENIX Association