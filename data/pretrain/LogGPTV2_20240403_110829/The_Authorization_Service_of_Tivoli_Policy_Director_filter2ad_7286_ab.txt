### Corresponding Region
For example, the object `/c1/c2/f1` will fall within the scope of region B when added. Objects within a region are accessible if the requester (explicitly or implicitly) holds the traverse (T) permission on each object along the path to the region. Note that Permissions on Objects (POPs) are inherited in the same manner as Access Control Lists (ACLs), with the exception that inheritance cannot be blocked by the absence of a Traverse permission on a higher POP.

### 3.3 Fine-grained Access Control
Policy Director provides mechanisms for fine-grained access control for legacy data, whose HTML representation is dynamically generated by a gateway program. Queryable resources are dynamic document bases that, when addressed by a URL request with parameters (query string), return content that can be displayed by a web browser. Dynamic URL mappings allow for access control on URL requests with parameters.

#### Dynamic URLs
While ordinary URLs link to static documents on the web, dynamic URLs include name-value pairs in the query component. Depending on the provided values, a request might respond with different content encoded in HTML. For instance, if the resource is a Java servlet named `Savings`, which requires values for `user` and `property`, the URL `http://server/Savings?user=alice&property=job+title` would address this resource.

```
/db/redshirt
/app/snoop
/app/snoopA
/app/cnt/ejb
/app/cnt
/db.cgi*product=shirt*color=red*
/rt[25]/servlet/snoop
/rt?/servlet/snoop
/examples/HitCount?src=EJB
/examples/HitCount*
```

**Figure 2. Example of URL mapping.**

To apply access control to specific values of a dynamic URL, Policy Director allows mapping sets of object names to single object names. When a dynamic URL is resolved to a namespace object, PD uses the object's ACL for the subsequent authorization check. Otherwise, PD uses the URL itself. Mappings are defined by entries in a configuration file and become active upon command execution. In Figure 2, a sample dynamic URL mapping is shown. The objects on the left represent some web applications, and their corresponding dynamic URLs are denoted by wildcard patterns, a subset of shell-style pattern matching. Note that the mapping order in the configuration file is significant.

**Figure 3. Authorization on a dynamic URL.**

In Figure 3, the dynamic URL `http://www.acme.com/sales/web/db.cgi?service=SoftWear&catalog=clothing&product=shirt&color=red` is mapped to the object `/sales/web/db.cgi/redshirt` (1). The ACL associated with this object (3) is then used for the authorization check (2).

Although wildcard patterns can be used anywhere in an object name, they should be restricted to the query component to avoid conflicts with ACL inheritance. If wildcard patterns occur before the query component, they may introduce deviations from the longest matching prefix rule, which is discussed at the end of Section 3.4.

#### External Authorization Service
The expressivity of Policy Director can be extended using external authorization services, which are freely programmable and included in the access decision evaluation process. Each External Authorization Service (EAS) is represented by a new permission. During an authorization check, if such a permission is encountered, the corresponding EAS is consulted for additional authorization decisions. For example, a customized EAS might map unregistered users, who provide an appropriate attribute certificate, to a pseudo user or group with the necessary permissions. The EAS architecture allows full integration of an organization’s existing security service by incorporating legacy servers into the authorization decision-making process.

Policy Director’s external authorization services resemble the PolicyEvaluator objects in CORBA’s resource access decision service [2]. By encapsulating the representation and evaluation of arbitrary authorization policies, policy evaluation objects can be dynamically added to and removed from the authorization service.

### 3.4 Access Decision Function
While ACLs are the units for granting or revoking permissions, access decisions are based on individual permissions. Policy Director employs a two-step procedure: checking whether the requester holds the necessary permissions on the region of the object and whether the region is accessible to the requester. Both checks use an evaluation scheme similar to those found in Posix or DCE [8].

For a given client, determined by its user identifier and a possibly empty set of group identifiers, the algorithm determines the set of permissions granted by a specific ACL, performing a sequence of attempted matches against ACL entry types. First, it checks if the user identifier matches one of the ACL’s user entries. If so, it returns the associated set of permissions. Otherwise, it computes the union of all permissions the user holds by matching group entries. If the computed union does not match the required set of permissions, the algorithm checks the any-authenticated entry, and finally the unauthenticated entry. For the last entry, the set of effective permissions is determined by a bitwise "and" operation against the any-authenticated entry.

When PD has determined the ACL and POP templates that define the access policy to the requested object, it first checks the IP endpoint authentication method attribute, then the ACL permissions, the time-of-day attribute of the POP, and finally determines the audit level. To check ACL permissions, the decision function first verifies if the required permissions are granted to the requester. Next, it sends an authorization request to each external authorization service whose permission appears in the ACL. If a denial occurs, Policy Director will deny the authorization request. If an external authorization service is not available, access will also be denied.

Default rules ensure the consistency of policies defined in Policy Director. For each possible request, a unique access decision exists because there are no negative authorizations, and the decision will either grant or deny access, as there is always an ACL template attached to the root, and there is at least one matching entry, including an implicit ACL entry for unauthenticated subjects.

By removing the Traverse permission, the security administrator can deny access to a subtree of objects. However, a dynamic URL mapping may introduce a second (access) path to an object in the subtree that bypasses the root of the subtree. To guarantee consistency in object accessibility, we postulate the following rule:

**Consistency Rule:**
The authorization state of a policy database is consistent if, for any two objects \( o1 \) and \( o2 \), with \( o1 \) being a prefix of \( o2 \), the object \( D(o2) \) determined by the URL mapping is only accessible if \( o1 \) is accessible.

This is the minimum assumption we can make. Introducing an ordering on the strength of permissions is not feasible because, depending on the purpose, the administrator might either give access to some parameters of an executable or exclude some parameters.

### 4. Management
Advanced services often employ complex access models, which must be both economically implemented and securely managed. The large number of users and objects, varying working relationships among users, and frequent changes in access control information pose challenges to the design of the authorization system. In this section, we elaborate on Policy Director’s concept of regions and their use for delegating administration tasks to subordinated security administrators, providing leverage for managing security policy at scale.

#### 4.1 Regions
Manipulation of protected objects is controlled by permissions to create or modify (m), delete (d), and list or view (v) an object. To browse the namespace below an object, the browse (b) permission is needed.

Policy Director’s protected object namespace includes different categories of objects, each with its own permissions. The standard namespace categories are:

- **Web objects** (`/WebSEAL`)
- **Network objects** (`/NetSEAL`)
- **Management objects** (`/Management`)
- **User-defined objects** (third-party namespace)

**Web objects:**
Objects in the `/WebSEAL` region represent WebSEAL servers, directories, files, and executables (CGI programs, Java Servlets, JSP). The node below `/WebSEAL` identifies the machine on which the WebSEAL server is running. This node is the root for the local file system of the WebSEAL server. Namespaces of other parts of the local file system and other web servers can be appended via a junction to any node in this subtree.

To access resources directly provided by the WebSEAL web server, the list (l) permission is needed for a directory, the read (r) permission for a file, and the execute (x) permission for an executable. Access to objects across junctions is controlled using the read (r) permission.

**Management objects:**
Objects in the `/Management` region represent ACL templates and POPs, WebSEAL servers, customized actions (new permissions), and policy databases.

- **Permissions on `/Management/ACL`** control ACL templates. The control (c) permission grants ownership of the ACL, allowing creation, deletion, and modification of entries, or deletion of the ACL template. Subjects with ownership can grant any permission, including ownership, to any other user or group. The attach (a) permission allows attaching or removing ACL templates to/from objects.
- **Permissions on `/Management/POP`** include the Bypass Time-of-Day (B) permission, which overrides the time-of-day POP attribute.
- **Permissions on `/Management/Server`** control the creation/deletion of server definitions, execution of server administration tasks, and listing of servers or viewing server properties.
- **Permissions on `/Management/Replica`** allow reading the primary authorization database (view (v)) and modifying replica databases (modify (m)).
- **Permissions on `/Management/Action`** control the creation, deletion, and management of new actions (permissions) and action groups.

**User-defined objects:**
To extend Policy Director’s authorization service to third-party application objects, the user-defined object namespace must be described. User-defined object namespace regions can be created using `pdadmin` commands or through a special mapping file. The root object name and the location of the mapping file are listed in the `[object-spaces]` stanza of the Management server configuration file (`ivmgrd.conf`). This file lists the objects belonging to the third-party namespace and indicates their hierarchical relationship. The namespace is appended at the root (`/`) of the protected object namespace. Each third-party application can select its permissions and define their meaning.

All Policy Director servers maintain a local copy of the authorization database. Initially, all servers have view permission. Specifically, the group `ivacld-servers` needs the view permission to apply changes to the authorization database.

#### 4.2 Delegating Administration Tasks
Policy Director supports delegated management of objects in subregions of the object namespace. If the object namespace of a large organization is organized into regions representing departments or divisions, a manager familiar with the issues and needs of that branch can receive sub-management responsibilities.

The chief security administrator can create management accounts and assign appropriate controls for specific regions of the object namespace. For example, an "ACL administrator" can attach ACL templates to objects within their subregion if they hold the attach and browse permissions. An "ACL policy administrator" can create, delete, and modify ACL templates (requiring browse, delete, manage, and view permissions on `/Management` or `/Management/ACL`).

Other delegated administration tasks include server management and authorization action management. A "group administrator" can create groups, add existing users (add (A) permission), and create new users (create (N) permission). The group administrator can perform operations on users within their groups.