corresponding region. For example, object /c1/c2/f1
will be within the scope of region B when added.
Objects in a region are accessible if the requester (ex-
plicitly or implicitly) holds the traverse (T) permission on
each object on the path of the region. Note that POPs are
inherited in the same way as ACLs, except that inheritance
cannot be blocked by a missing Traverse permission on a
higher POP.
3.3 Fine-grained Access Control
Policy Director provides mechanisms to provide ﬁne-
grained access control for legacy data, whose HTML rep-
resentation is generated dynamically by a gateway pro-
gram. Queryable resources are dynamic document bases
that, when addressed by a URL request supplemented with
parameters (query string), will return a dynamic content dis-
playable by a Web browser. Dynamic URL mappings allow
access control on URL requests with parameters.
Dynamic URLs. Whereas ordinary URLs are links to
static documents on the Web, a dynamic URL is a
URL with name-value pairs in the query component.
Depending on the values provided, a request com-
mand might respond with different content encoded in
HTML. For example, if the resource is the Java servlet
Savings, which needs a value for user and a value for
property, then the URL http://server/Savings?
user=alice&property=job+title addresses this
resource.
/db/redshirt
/app/snoop
/app/snoopA
/app/cnt/ejb
/app/cnt
/db.cgi*product=shirt*color=red*
/rt[25]/servlet/snoop
/rt?/servlet/snoop
/examples/HitCount\?src=EJB
/examples/HitCount*
Figure 2. Example of URL mapping.
To apply access control to speciﬁc values of a dynamic
URL, Policy Director offers the possibility to map sets of
object names to single object names. When a dynamic URL
has been resolved to a namespace object, PD uses the ob-
ject’s ACL for the subsequent authorization check. Other-
wise, PD uses the URL itself.
Mappings are deﬁned by entries in a conﬁguration ﬁle
and become activated by command execution. In Figure 2, a
sample dynamic URL mapping is given. The objects on the
left represent some Web applications, whose corresponding
dynamic URLs are denoted by wildcard patterns, a subset
of shell-style pattern matching. Note that the mapping is
dependent on the order of the entries in the conﬁguration
ﬁle.
Performing access control on a dynamic URL is
shown in Figure 3, where a dynamic URL map-
ping maps objects from the set /sales/web/db.
object
cgi*product=shirt*color=red*
Thus,
/sales/web/db.cgi/redshirt
the
http://www.acme.com/sales/
web/db.cgi?service=SoftWear&catalog=
clothing&product=shirt&color=red is mapped
to object /sales/web/db.cgi/redshirt (1), and
the ACL associated with this object (3) will be used for the
authorization check.
request
on
(2).
Although wildcard patterns can be used everywhere in an
object name, their use should be restricted to the query com-
ponent of the object name to avoid clashes with the concept
of ACL inheritance. If wildcard patterns occur before the
query component, they may possibly introduce deviations
from the longest matching preﬁx rule, whose consequences
are discussed at the end of Section 3.4.
External Authorization Service. The expressivity of
Policy Director can also be extended by the use of External
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply. 
Figure 3. Authorization on a dynamic URL.
Authorization services, which are freely programmable, and
included into the access decision evaluation process. Each
External Authorization service (EAS), a separate (external)
authorization server program, is represented by a new per-
mission. When encountering such a permission during an
authorization check, the corresponding external authoriza-
tion service is referred to for additional authorization de-
cisions. For example, a customized EAS might map un-
registered users, which provide an appropriate attribute cer-
tiﬁcate, to a pseudo user or group owning the correspond-
ing permissions. The EAS architecture allows the full in-
tegration of an organization’s existing security service by
integrating legacy servers into the authorization decision-
making process.
Policy Director’s external authorization services resem-
ble the PolicyEvaluator objects in CORBA’s resource ac-
cess decision service [2]. By encapsulating the representa-
tion and evaluation of arbitrary authorization policies, pol-
icy evaluation objects can be dynamically added to and re-
moved from the authorization service.
3.4 Access Decision Function
Whereas ACLs are the units of granting or revoking, ac-
cess decisions are made based on individual permissions.
Policy Director employs a two-step procedure, checking
whether the requester holds the necessary permissions on
the region of the object and whether the region is accessible
for the requester. Both authorization checks use an evalua-
tion scheme on ACLs, as found in Posix or DCE [8].
For a given client, determined by its user identiﬁer and a
possibly empty set of group identiﬁers, the algorithm deter-
mines the set of permissions granted by a speciﬁc ACL, per-
forming a sequence of attempted matches against ACL en-
try types. First, it checks whether the user identiﬁer matches
one of the ACL’s user entries.
If so, it returns the asso-
ciated set of permissions. Otherwise, the algorithm com-
putes the union of all permissions the user holds by match-
ing group entries.
If the computed union of permissions
does not match the required set of permissions, the algo-
rithm next checks the any-authenticated entry, and
ﬁnally the unauthenticated entry. For the last entry,
the set of effective permissions is determined by a bitwise
“and” operation against the any-authenticated entry.
When PD has determined the ACL and POP templates
that deﬁne the access policy to the requested object, it ﬁrst
checks the IP endpoint authentication method attribute, then
the ACL permissions, the time-of-day attribute of the POP,
and ﬁnally determines the audit level. To check ACL per-
missions, the decision function ﬁrst checks whether the re-
quired permissions are granted to the requester. Next, it
sends an authorization request to each external authoriza-
tion service whose permission appears in the ACL. If a de-
nial occurs, Policy Director will deny the authorization re-
quest. If an external authorization service is not available,
access will also be denied.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply. 
Default rules ensure the consistency of policies deﬁned
in Policy Director. For each possible request, a unique ac-
cess decision exists because there are no negative autho-
rizations, and the decision will either grant or deny access,
because there is always an ACL template attached to the
root, and there is at least one matching entry as there is an
implicit ACL entry for subject unauthenticated.
By removing the Traverse permission, the security ad-
ministrator can deny access to a subtree of objects. How-
ever, as mentioned before, a dynamic URL mapping may
introduce a second (access) path to an object in the subtree
that bypasses the root of the subtree. To guarantee consis-
tency on the accessibility of objects we postulate the fol-
lowing rule:
The authorization state of a policy database is
consistent if for any two objects o1 and o2, with o1
being a preﬁx of o2, the object D(o2) determined
by the URL mapping is only accessible if o1 is
accessible.
This is the least assumption we can make. To introduce
an ordering on the strength of permissions is not feasible
because, depending on the purpose, the administrator might
either only give access to some parameters of an executable
or might simply exclude some parameters.
4 Management
Advanced services can employ complex access mod-
els, which must be both economically implemented and se-
curely managed. The large number of users and objects,
the varying working relationships among users in such en-
vironments, and the frequent changes of access control in-
formation pose challenges to the design of the authorization
system. In this section, we elaborate on Policy Director’s
concept of regions and their use for delegating administra-
tion tasks to subordinated security administrators, providing
leverage for dealing with the problem of scale in security
policy management.
4.1 Regions
Manipulation of protected objects are controlled by per-
missions to create or modify (m), to delete (d), and to list
or view (v) an object. To browse the namespace below an
object, browse (b) permission is needed.
Policy Director’s protected object namespace has differ-
ent categories of objects, and each category has its own
permissions. Policy Director uses the following standard
namespace categories:
I Web objects (/WebSEAL)
II Network objects (/NetSEAL)
III Management objects (/Management)
IV User-deﬁned objects (third-party namespace)
In the following, we describe in more detail the four cate-
gories of objects and the permissions associated with them.
Web objects. The objects in region /WebSEAL represent
WebSEAL servers, directories, ﬁles, and executables (CGI
programs, Java Servlets, JSP). The node below /WebSEAL
identiﬁes the machine on which the WebSEAL server is
running. This node is the root for the local ﬁle system of
the WebSEAL server. The namespaces of other parts of the
local ﬁle system of the WebSEAL machine as well as of
other Web servers can be appended via a junction1 to any
node in this subtree.
To access resources directly provided by the WebSEAL
Web server, the list (l) permission is needed for a directory,
the read (r) permission for a host of ﬁle, and the execute
(x) permission for an executable. Access to objects, which
include directories and CGI programs, across junctions is
only controlled using the read (r) permission.
objects. The
Management
region
/Management represent ACL templates and POPs,
WebSEAL servers, customized actions (new permissions),
and policy databases.
objects
in
Permissions on object /Management/ACL control
ACL templates. The control (c) permission gives “owner-
ship” of the ACL, i.e. it allows one to create, delete, and
change entries in the ACL, or to delete the ACL template.
Subjects with ownership privilege on an ACL template may
grant any permission, including ownership, to any other
user or group. The attach (a) permission allows one to
attach/remove ACL templates to/from objects. On region
/Management/POP, permission Bypass TOD (B) over-
rides the time-of-day POP attribute.
Permissions on object /Management/Server con-
trol the creation/deletion of a server deﬁnition, the exe-
cution of server administration tasks (such as start, stop,
suspend, resume), and the listing of servers or to view a
server’s properties. Permission view (v) granted on object
/Management/Replica allows one to read the primary
authorization database and permission modify (m) autho-
rizes modiﬁcations of the replica database(s).
The capability to create new actions (permissions)
and action groups or to delete an existing action/action
group is controlled by corresponding permissions on object
/Management/Action.
1A junction is a physical TCP/IP connection between a front-end Web-
SEAL server and a back-end application server. The back-end server can
be another WebSEAL server or a third-party application server. See Sec-
tion 5 for more details.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply. 
The management of user accounts and of groups
and group membership are
controlled by objects
/Management/Users and /Management/Groups,
respectively. Whereas the create (N) permission is needed
to create a new user account and optionally to assign that
user to a group, or to create a new group and to import
group data from the user registry, the modify (m) permis-
sion is restricted to the update of user account details and
group descriptions. There are also two special permissions:
The password (W) permission on /Management/Users
allows password resets, and the add (A) permissions on
/Management/Groups allows one to add an existing
user to a group.
In Section 4.2, we show how Policy
Director uses the above regions to support the delegation of
certain management activities and can restrict an adminis-
trator’s ability to set security policy to a subset the object
space.
User-deﬁned objects. To extend Policy Director’s au-
thorization service to objects belonging to a third-party
application,
the user-deﬁned object namespace must be
described. User-deﬁned object namespace regions can
be created by pdadmin objectspace commands or al-
ternatively through a special mapping ﬁle. The name
of the root object for a third-party object namespace
and the location of the mapping ﬁle are listed in the
[object-spaces] stanza of the Management server
conﬁguration ﬁle (ivmgrd.conf). This ﬁle lists the ob-
jects belonging to the third-party object namespace and in-
dicates their hierarchical relationship. The namespace is ap-
pended at the root (/) of the protected object namespace.
Each third-party application is free to select its permissions
and to deﬁne their meaning.
All Policy Director servers maintain a local copy of the
authorization database. Policy Director servers include all
Security Managers (secmgrd) and Authorization servers
(ivacld). Initially, all servers have view permission. In
particular, group ivacld-servers needs the view per-
mission to be able to apply changes to the authorization
database.
4.2 Delegating Administration Tasks
Policy Director supports delegated management of ob-
jects in subregions of the object namespace. If the object
namespace of a large organization is organized into regions
representing departments or divisions, then a manager fa-
miliar with the issues and needs of that branch can receive
sub-management responsibilities.2
The chief security administrator can create management
accounts and can assign to these accounts appropriate con-
2Permissions could also be transfered to all members of a group to
establish self-managing teams if wanted.
trols for speciﬁc regions of the object namespace. For ex-
ample, an “ACL administrator” can attach ACL templates
to objects within its subregion if (s)he holds the permissions
attach and browse, and an “ACL policy administrator” can
be the only user allowed to create, delete, and modify ACL
templates (requires permissions browse, delete, manage,
and view on /Management or /Management/ACL).
Server management and authorization action management
are other delegated administration tasks.
A “group administrator” can create groups and ﬁll these
groups with existing users (add (A) permission) as well as
with new users (create (N) permission). The group admin-
istrator can perform an operation on a user of his group(s) if