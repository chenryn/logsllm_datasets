作者：Leeqwind  
作者博客：
前面的文章分析了 CVE-2016-0165 整数上溢漏洞，这篇文章继续分析另一个同样发生在 `GDI` 子系统的 CVE-2017-0101
(MS17-017) 整数向上溢出漏洞。分析的环境是 Windows 7 x86 SP1 基础环境的虚拟机，配置 1.5GB 的内存。
#### 0x0 前言
这篇文章分析了发生在 `GDI` 子系统的 CVE-2017-0101 (MS17-017) 整数向上溢出漏洞。在函数 `EngRealizeBrush`
中引擎模拟实现笔刷绘制时，系统根据笔刷图案位图的大小以及目标设备表面的像素颜色格式计算应该分配的内存大小，但是没有进行必要的数值完整性校验，导致可能发生潜在的整数向上溢出的问题，致使实际上分配极小的内存块，随后函数对分配的
`ENGBRUSH` 对象成员域进行初始化。在整数溢出发生的情况下，如果分配的内存块大小小于 `ENGBRUSH`
类的大小，那么在初始化成员域的时候就可能触发缓冲区溢出漏洞，导致紧随其后的内存块中的数据被覆盖。
接下来函数调用 `SURFMEM::bCreateDIB` 分配临时的位图表面对象，并在其中对数值的有效性进行再次校验，判断数值是否大于
`0x7FFFFFFF`。但在此时校验的数值比分配的缓冲区大小数值小 `0x84`，因此如果实际分配的缓冲区是小于 `0x40` 字节的情况，那么在函数
`SURFMEM::bCreateDIB` 中校验的数值就将不符合函数 `SURFMEM::bCreateDIB`
的要求，导致调用失败，函数向上返回，并在上级函数中释放分配的 `ENGBRUSH` 对象。
在上级函数中在释放先前分配 `ENGBRUSH` 对象时，如果先前的成员域初始化操作破坏了位于同一内存页中的下一个内存块的 `POOL_HEADER`
结构，那么在释放内存时将会引发 `BAD_POOL_HEADER` 的异常。通过巧妙的内核池内存布局，使目标 `ENGBRUSH`
对象的内存块被分配在内存页的末尾，这样一来在释放内存块时将不会校验相邻内存块 `POOL_HEADER` 结构的完整性。
利用整数向上溢出导致后续的缓冲区溢出漏洞，使函数在初始化 `ENGBRUSH` 对象的成员域时，将原本写入 `ENGBRUSH`
对象的数据覆盖在下一内存页起始位置的位图表面 `SURFACE` 对象中，将成员域 `sizlBitmap.cy` 覆盖为 `0x6`
等像素位格式的枚举值，致使目标位图表面对象的可控范围发生改变。通过与位于同一内存页中紧随其后的内核 GDI
对象或下一内存页相同位置的位图表面对象相互配合，实现相对或任意内存地址的读写。
本分析中涉及到的内核中的类或结构体可在[《图形设备接口子系统的对象解释》](https://xiaodaozhi.com/win32k-gdi-object.html "《图形设备接口子系统的对象解释》")文档中找到解释说明。
#### 0x1 原理
漏洞存在于 `win32k` 内核模块的函数 `EngRealizeBrush` 中。该函数属于 GDI
子系统的服务例程，用于根据逻辑笔刷对象在目标表面对象中引擎模拟实现笔刷绘制。根据修复补丁文件对比，发现和其他整数向上溢出漏洞的修复补丁程序类似的，修复这个漏洞的补丁程序也是在函数中对某个变量的数值进行运算时，增加函数
`ULongLongToULong` 和 `ULongAdd` 调用来阻止整数向上溢出漏洞的发生，被校验的目标变量在后续的代码中被作为分配内存缓冲区函数
`PALLOCMEM` 的缓冲区大小参数。那么接下来就从这两个函数所服务的变量着手进行分析。
顺便一提的是，补丁程序在增加校验函数时遗漏了对 `v16 + 0x40` 计算语句的校验，因此攻击者在已安装 CVE-2017-0101
漏洞安全更新的操作系统环境中仍旧能够利用该函数中的整数溢出漏洞。不过那就是另外一个故事了。
补丁前后的漏洞关键位置代码对比：
      v60 = (unsigned int)(v11 * v8) >> 3;
      v49 = v60 * v68;
      v12 = v60 * v68 + 0x44;
      if ( v61 )
      {
        v13 = *((_DWORD *)v61 + 8);
        v14 = *((_DWORD *)v61 + 9);
        v15 = 0x20;
        v54 = v13;
        v55 = v14;
        if ( v13 != 0x20 && v13 != 0x10 && v13 != 8 )
          v15 = (v13 + 0x3F) & 0xFFFFFFE0;
        v56 = v15;
        v50 = v15 >> 3;
        v12 += (v15 >> 3) * v14;
      }
      [...]
      v66 = v12 + 0x40;
      v16 = PALLOCMEM(v12 + 0x40, 'rbeG');
_补丁前_
      if ( ULongLongToULong((_DWORD)a3 * v10, (unsigned int)a3 * (unsigned __int64)(unsigned int)v10 >> 32, &v67) >= 3;
      if ( ULongLongToULong(v67 * v64, v67 * (unsigned __int64)(unsigned int)v64 >> 32, &a3) > 3;
        if ( ULongLongToULong(v48 * v14, v48 * (unsigned __int64)(unsigned int)v14 >> 32, &v65) > 3;
      ulSizePat = cjScanPat * sizlPat_cy;
      ulSizeTotal = cjScanPat * sizlPat_cy + 0x44;
      if ( pSurfMsk )
      {
        sizlMsk_cx = *((_DWORD *)pSurfMsk + 8);
        sizlMsk_cy = *((_DWORD *)pSurfMsk + 9);
        cxMskRealized = 32;
        if ( sizlMsk_cx != 32 && sizlMsk_cx != 16 && sizlMsk_cx != 8 )
          cxMskRealized = (sizlMsk_cx + 63) & 0xFFFFFFE0;
        cjScanMsk = cxMskRealized >> 3;
        ulSizeTotal += (cxMskRealized >> 3) * sizlMsk_cy;
      }
      [...]
      ulSizeSet = ulSizeTotal + 0x40;
      pengbrush = (LONG)PALLOCMEM(ulSizeTotal + 0x40, 'rbeG');
_对补丁前的代码片段的变量重命名_
其中变量 `ulSizeTotal` 对应前面的 `v12` 变量。分析代码片段可知，影响 `ulSizeTotal` 变量值的可变因素有
`sizlMsk_cx` / `sizlMsk_cy` / `ulSizePat` / `cxPatRealized` 和 `sizlPat_cy`
变量。其中变量 `sizlMsk_cx` 和 `sizlMsk_cy` 是参数 `psoMask` 指向的 `SURFOBJ` 对象的成员域
`sizlBitmap` 的值。因此还有 `ulSizePat` / `cxPatRealized` 和 `sizlPat_cy`
变量需要继续向前回溯，以定位出在函数中能够影响 `ulSizeTotal` 变量值的最上层可变因素。
* * *
###### 可变因素
在 `EngRealizeBrush` 函数伊始，三个 `SURFOBJ` 指针参数被用来获取所属的 `SURFACE`
对象指针并分别放置于对应的指针变量中。`SURFACE` 是内核中所有 GDI 表面对象的管理对象类，类中存在结构体对象成员 `SURFOBJ so`
用来存储当前 `SURFACE` 对象所管理的位图实体数据的具体信息，在当前系统环境下，成员对象 `SURFOBJ so` 起始于 `SURFACE` 对象
`+0x10` 字节偏移的位置。
随后，参数 `psoPattern` 指向的 `SURFOBJ` 对象的成员域 `sizlBitmap` 存储的位图高度和宽度数值被分别赋值给
`sizlPat_cx` 和 `sizlPat_cy` 变量，并将宽度数值同时赋值给 `cxPatRealized` 变量。参数 `psoTarget`
对象的成员域 `iBitmapFormat` 存储的值被赋给参数 `psoPattern` （编译器导致的变量复用，本应是名为 `iFormat`
之类的局部变量），用于指示目标位图 GDI 对象的像素格式。根据位图格式规则，像素格式可选 `1BPP(1)` / `4BPP(2)` /
`8BPP(3)` / `16BPP(4)` / `24BPP(5)` / `32BPP(6)` 等枚举值，用来指示位图像素点的色彩范围。
      pSurfTarg = SURFOBJ_TO_SURFACE(psoTarget);
      pSurfPat = SURFOBJ_TO_SURFACE(psoPattern);
      pSurfMsk = SURFOBJ_TO_SURFACE(psoMask);
      cxPatRealized = *((_DWORD *)pSurfPat + 8);
      psoMask = 0;
      psoPattern = (struct _SURFOBJ *)*((_DWORD *)pSurfTarg + 0xF);