个计算机一样，现代操作系统提出了虚拟内存的概念。
虚拟内存的主要作用主要为三个：
它将内存看做一个存储在磁盘上的地址空间的高速缓存，在内存中只保存活动
区域，并根据需要在磁盘和内存之间来回传送数据。
它为每个进程提供了一致的地址空间。
它保护了每个进程的地址空间不被其他进程破坏。
现代操作系统采用虚拟寻址的方式，CPU 通过生成一个虚拟地址（Virtual
Address(VA)）来访问内存，然后这个虚拟地址通过内存管理单元（Memory
Management Unit(MMU)）转换成物理地址之后被送到存储器。
140
1.5.7 内存管理
前面我们已经看到可执行文件被映射到了内存中，Linux 为每个进程维持了一个单
独的虚拟地址空间，包括了 .text、.data、.bss、栈（stack）、堆（heap），共享
库等内容。
32 位系统有 4GB 的地址空间，其中 0x08048000~0xbfffffff 是用户空间（3GB），
0xc0000000~0xffffffff 是内核空间（１GB）。
栈与调用约定
栈
栈是一个先入后出（First In Last Out(FIFO)）的容器。用于存放函数返回地址及参
数、临时变量和有关上下文的内容。程序在调用函数时，操作系统会自动通过压栈
和弹栈完成保存函数现场等操作，不需要程序员手动干预。
141
1.5.7 内存管理
栈由高地址向低地址增长，栈保存了一个函数调用所需要的维护信息，称为堆栈帧
（Stack Frame）在 x86 体系中，寄存器 ebp 指向堆栈帧的底部， esp 指向堆
栈帧的顶部。压栈时栈顶地址减小，弹栈时栈顶地址增大。
PUSH ：用于压栈。将 esp 减 4，然后将其唯一操作数的内容写入到 esp
指向的内存地址
POP ：用于弹栈。从 esp 指向的内存地址获得数据，将其加载到指令操作
数（通常是一个寄存器）中，然后将 esp 加 4。
x86 体系下函数的调用总是这样的：
把所有或一部分参数压入栈中，如果有其他参数没有入栈，那么使用某些特定
的寄存器传递。
把当前指令的下一条指令的地址压入栈中。
跳转到函数体执行。
其中第 2 步和第 3 步由指令 call 一起执行。跳转到函数体之后即开始执行函
数，而 x86 函数体的开头是这样的：
push ebp ：把ebp压入栈中（old ebp）。
mov ebp, esp ：ebp=esp（这时ebp指向栈顶，而此时栈顶就是old ebp）
[可选] sub esp, XXX ：在栈上分配 XXX 字节的临时空间。
[可选] push XXX ：保存名为 XXX 的寄存器。
把ebp压入栈中，是为了在函数返回时恢复以前的ebp值，而压入寄存器的值，是为
了保持某些寄存器在函数调用前后保存不变。函数返回时的操作与开头正好相反：
[可选] pop XXX ：恢复保存的寄存器。
mov esp, ebp ：恢复esp同时回收局部变量空间。
pop ebp ：恢复保存的ebp的值。
ret ：从栈中取得返回地址，并跳转到该位置。
栈帧对应的汇编代码：
142
1.5.7 内存管理
PUSH ebp ; 函数开始（使用ebp前先把已有值保存到栈中）
MOV ebp, esp ; 保存当前esp到ebp中
... ; 函数体
; 无论esp值如何变化，ebp都保持不变，可以安全访问函数的局
部变量、参数
MOV esp, ebp ; 将函数的其实地址返回到esp中
POP ebp ; 函数返回前弹出保存在栈中的ebp值
RET ; 函数返回并跳转
函数调用后栈的标准布局如下图：
我们来看一个例子：源码
143
1.5.7 内存管理
#include
int add(int a, int b) {
int x = a, y = b;
return (x + y);
}
int main() {
int a = 1, b = 2;
printf("%d\n", add(a, b));
return 0;
}
使用 gdb 查看对应的汇编代码，这里我们给出了详细的注释：
gdb-peda$ disassemble main
Dump of assembler code for function main:
0x00000563 : lea ecx,[esp+0x4] ;
将 esp+0x4 的地址传给 ecx
0x00000567 : and esp,0xfffffff0 ;
栈 16 字节对齐
0x0000056a : push DWORD PTR [ecx-0x4] ;e
cx-0x4，即原 esp 强制转换为双字数据后压入栈中
0x0000056d : push ebp
;保存调用 main() 函数之前的 ebp，由于在 _start 中将 ebp 清零了，这里的
ebp=0x0
0x0000056e : mov ebp,esp
;把调用 main() 之前的 esp 作为当前栈帧的 ebp
0x00000570 : push ebx
;ebx、ecx 入栈
0x00000571 : push ecx
0x00000572 : sub esp,0x10
;为局部变量 a、b 分配空间并做到 16 字节对齐
0x00000575 : call 0x440 
;调用  函数，将 esp 强制转换为双字数据后保存到
ebx
0x0000057a : add ebx,0x1a86
;ebx+0x1a86
0x00000580 : mov DWORD PTR [ebp-0x10],0x1
;a 第二个入栈所以保存在 ebp-0x10 的位置，此句即 a=1
144
1.5.7 内存管理
0x00000587 : mov DWORD PTR [ebp-0xc],0x2
;b 第一个入栈所以保存在 ebp-0xc 的位置，此句即 b=2
0x0000058e : push DWORD PTR [ebp-0xc]
;将 b 压入栈中
0x00000591 : push DWORD PTR [ebp-0x10]
;将 a 压入栈中
0x00000594 : call 0x53d 
;调用 add() 函数，返回值保存在 eax 中
0x00000599 : add esp,0x8
;清理 add() 的参数
0x0000059c : sub esp,0x8
;调整 esp 使 16 位对齐
0x0000059f : push eax
;eax 入栈
0x000005a0 : lea eax,[ebx-0x19b0]
;ebx-0x19b0 的地址保存到 eax，该地址处保存字符串 "%d\n"
0x000005a6 : push eax
;eax 入栈
0x000005a7 : call 0x3d0 
;调用 printf() 函数
0x000005ac : add esp,0x10
;调整栈顶指针 esp，清理 printf() 的参数
0x000005af : mov eax,0x0
;eax=0x0
0x000005b4 : lea esp,[ebp-0x8]
;ebp-0x8 的地址保存到 esp
0x000005b7 : pop ecx
;弹栈恢复 ecx、ebx、ebp
0x000005b8 : pop ebx
0x000005b9 : pop ebp
0x000005ba : lea esp,[ecx-0x4]
;ecx-0x4 的地址保存到 esp
0x000005bd : ret
;返回，相当于 pop eip;
End of assembler dump.
gdb-peda$ disassemble add
Dump of assembler code for function add:
0x0000053d : push ebp ;
保存调用 add() 函数之前的 ebp
0x0000053e : mov ebp,esp ;
145
1.5.7 内存管理
把调用 add() 之前的 esp 作为当前栈帧的 ebp
0x00000540 : sub esp,0x10 ;
为局部变量 x、y 分配空间并做到 16 字节对齐
0x00000543 : call 0x5be  ;
调用  函数，将 esp 强制转换为双字数据后保存到 e
ax
0x00000548 : add eax,0x1ab8
;eax+0x1ab8
0x0000054d : mov eax,DWORD PTR [ebp+0x8]
;将 ebp+0x8 的数据 0x1 传送到 eax，ebp+0x4 为函数返回地址
0x00000550 : mov DWORD PTR [ebp-0x8],eax
;保存 eax 的值 0x1 到 ebp-0x8 的位置
0x00000553 : mov eax,DWORD PTR [ebp+0xc]
;将 ebp+0xc 的数据 0x2 传送到 eax
0x00000556 : mov DWORD PTR [ebp-0x4],eax
;保存 eax 的值 0x2 到 ebp-0x4 的位置
0x00000559 : mov edx,DWORD PTR [ebp-0x8]
;取出 ebp-0x8 的值 0x1 到 edx
0x0000055c : mov eax,DWORD PTR [ebp-0x4]
;取出 ebp-0x4 的值 0x2 到 eax
0x0000055f : add eax,edx
;eax+edx
0x00000561 : leave
;返回，相当于 mov esp,ebp; pop ebp;
0x00000562 : ret
End of assembler dump.
这里我们在 Linux 环境下，由于 ELF 文件的入口其实是 _start 而不是
main() ，所以我们还应该关注下面的函数：
gdb-peda$ disassemble _start
Dump of assembler code for function _start:
0x00000400 : xor ebp,ebp ;
清零 ebp，表示下面的 main() 函数栈帧中 ebp 保存的上一级 ebp 为 0x000000
00
0x00000402 : pop esi ;
将 argc 存入 esi
0x00000403 : mov ecx,esp ;
将栈顶地址（argv 和 env 数组的其实地址）传给 ecx
146
1.5.7 内存管理
0x00000405 : and esp,0xfffffff0 ;
栈 16 字节对齐
0x00000408 : push eax ;e
ax、esp、edx 入栈
0x00000409 : push esp
0x0000040a : push edx
0x0000040b : call 0x432 
;先将下一条指令地址 0x00000410 压栈，设置 esp 指向它，再调用 0x00000432
处的指令
0x00000410 : add ebx,0x1bf0
;ebx+0x1bf0
0x00000416 : lea eax,[ebx-0x19d0]
;取  地址传给 eax，然后压栈
0x0000041c : push eax
0x0000041d : lea eax,[ebx-0x1a30]
;取  地址传入 eax，然后压栈
0x00000423 : push eax
0x00000424 : push ecx
;ecx、esi 入栈保存
0x00000425 : push esi
0x00000426 : push DWORD PTR [ebx-0x8]
;调用 main() 函数之前保存返回地址，其实就是保存 main() 函数的入口地址
0x0000042c : call 0x3e0 
;call 指令调用 __libc_start_main 函数
0x00000431 : hlt
;hlt 指令使程序停止运行，处理器进入暂停状态，不执行任何操作，不影响标志。当
RESET 线上有复位信号、CPU 响应非屏蔽终端、CPU 响应可屏蔽终端 3 种情况之一
时，CPU 脱离暂停状态，执行下一条指令
0x00000432 : mov ebx,DWORD PTR [esp]
;esp 强制转换为双字数据后保存到 ebx
0x00000435 : ret
;返回，相当于 pop eip;
0x00000436 : xchg ax,ax
;交换 ax 和 ax 的数据，相当于 nop
0x00000438 : xchg ax,ax
0x0000043a : xchg ax,ax
0x0000043c : xchg ax,ax
0x0000043e : xchg ax,ax
End of assembler dump.
147
1.5.7 内存管理
函数调用约定
函数调用约定是对函数调用时如何传递参数的一种约定。调用函数前要先把参数压
入栈然后再传递给函数。
一个调用约定大概有如下的内容：
函数参数的传递顺序和方式
栈的维护方式
名字修饰的策略
主要的函数调用约定如下，其中 cdecl 是 C 语言默认的调用约定：
出
调用约
栈 参数传递 名字修饰
定
方
函
数
下划线＋函数
cdecl 调 从右到左的顺序压参数入栈
名
用
方
函
下划线＋函数
数
stdcall 从右到左的顺序压参数入栈 名＋@＋参
本
数的字节数
身
函
都两个 DWORD（4 字节）类型或者占更少字 @＋函数名
数
fastcall 节的参数被放入寄存器，其他剩下的参数按从 ＋@＋参数
本
右到左的顺序压入栈 的字节数
身
除了参数的传递之外，函数与调用方还可以通过返回值进行交互。当返回值不大于
4 字节时，返回值存储在 eax 寄存器中，当返回值在 5~8 字节时，采用 eax 和 edx
结合的形式返回，其中 eax 存储低 4 字节， edx 存储高 4 字节。
堆与内存管理
堆
148
1.5.7 内存管理
堆是用于存放除了栈里的东西之外所有其他东西的内存区域，有动态内存分配器负
责维护。分配器将堆视为一组不同大小的块（block）的集合来维护，每个块就是一
个连续的虚拟内存器片（chunk）。当使用 malloc() 和 free() 时就是在操作
堆中的内存。对于堆来说，释放工作由程序员控制，容易产生内存泄露。
堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存
储的空闲内存地址的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计
算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。
如果每次申请内存时都直接使用系统调用，会严重影响程序的性能。通常情况下，
运行库先向操作系统“批发”一块较大的堆空间，然后“零售”给程序使用。当全部“售
完”之后或者剩余空间不能满足程序的需求时，再根据情况向操作系统“进货”。
进程堆管理
Linux 提供了两种堆空间分配的方式，一个是 brk() 系统调用，另一个是
mmap() 系统调用。可以使用 man brk 、 man mmap 查看。
149
1.5.7 内存管理
brk() 的声明如下：
#include 
int brk(void *addr);
void *sbrk(intptr_t increment);
参数 *addr 是进程数据段的结束地址， brk() 通过改变该地址来改变数据段的
大小，当结束地址向高地址移动，进程内存空间增大，当结束地址向低地址移动，
进程内存空间减小。 brk() 调用成功时返回 0，失败时返回 -1。 sbrk() 与
brk() 类似，但是参数 increment 表示增量，即增加或减少的空间大小，调
用成功时返回增加后减小前数据段的结束地址，失败时返回 -1。
在上图中我们看到 brk 指示堆结束地址，start_brk 指示堆开始地址。BSS segment
和 heap 之间有一段 Random brk offset，这是由于 ASLR 的作用，如果关闭了
ASLR，则 Random brk offset 为 0，堆结束地址和数据段开始地址重合。
例子：源码