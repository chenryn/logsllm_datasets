To retrieve data from the environment that is monitored by the Wi-Fi
camera, video recording is performed from the back camera of the mobile
phone. The video recordings on the mobile phone also use a video compres-
sion algorithm to shrink the size of the video ﬁle. Mobile phones used H.264
to encode the video. This paper uses a Motorola-Z, with the OS version An-
droid 8.0.0, to perform the experiments. The videos were recorded as either
720p or 1080p depending on the experiment, and are all in the length of one
minute. The videos are encoded as MP4 ﬁles with audio support.
4.2. Process for Features
After the recording is completed, features are extracted from the recorded
ﬁles to form data streams between IP addresses (if in promiscuous mode) or
MAC addresses (if in monitor mode). Two data streams are further extracted
from the recorded network traﬃc and the video ﬁle. While the recorded video
is encoded as a MP4 ﬁle and the recorded network traﬃc is saved as a PCAP
ﬁle, it is necessary to extract the same feature from the recorded ﬁles to
perform statistical analysis. Bytes-per-time step, a shared feature in both
MP4 and PCAP ﬁles, is extracted from the recordings. Experimentally we
determined that 1 second time steps provided a good trade-oﬀ between timing
diﬀerences of the devices and the amount of data that the device needed to
send.
4.3. Perform Similarity Analysis
Initially, we utilized the techniques used by [10] to detect cyber-physical
correlations; however, relying solely on Pearson’s correlation coeﬃcient re-
sulted in an unacceptable number of false positives in some of our environ-
ments. As shown in ﬁgure 2, the correlation coeﬃcient did result in visually
diﬀerent results; however, the standard deviations were so large that it was
not useful as a classiﬁer by itself. To counter this problem, we utilized several
additional distance measures. In the case of comparing recorded videos with
streaming network traﬃc, the correlation coeﬃcient had so little predictive
power that we did not include its results in the evaluation.
After the byte-per-second streams are extracted, we further conduct sta-
tistical analysis to calculate the relationship between the two data streams.
Before performing any statistical analysis, data normalization is applied. In
this project, Correlation Coeﬃcient (CC), Dynamic Time Warping (DTW),
Jensen-Shannon divergence (JSD), Kullback-Leibler divergence (KLD), Cramer
distance (CD), Energy distance (ED), and Wasserstein distance (WD) are
selected to measure the relationships between the two data streams. These
tests were selected because the capture a wide variety of ways that two dis-
tributions can be similar. CC is a statistical measure to calculate the cor-
relation between two variables and was examined due to its eﬀectiveness in
our previous work [10], and DTW was examined since it is used to measure
similarity between two temporal sequences. CC and DTW had the least
predictive power, so we then considered other statistical measures, but we
mention them here for informational purposes. KLD calculates the diﬀer-
ences between two normally distributed data samples and JSD measures the
similarity between two probability distributions. KLD was chosen because
of the distances between the averages of spying and non-spying traﬃc while
JSD was chosen because of the separation of the standard deviation of spying
and non-spying traﬃc. WD measures the underlying diﬀerence in geometries
of two probability distributions. CD is very similar to WD except that it
also provides unbiased sample gradients. ED is also similar to CD except
that it is rotation invariant. WD, CD, and ED were selected because they
rely on the distance caused by the Cumulative Distribution Function which
makes them more robust to minor timing mismatches caused by processing
delay in the hidden camera.
4.3.1. Data normalization
Data normalization is performed to standardize the range of the variables
in byte-per-second streams. This pre-processing step eliminates the eﬀect of
particular outliers and prevents certain objective algorithms from failing.
This study utilized feature scaling to perform data normalization. Feature
scaling re-scales all values in the data stream into the range between 0 and
1.
4.4. Decision Making
The results of the similarity analysis are used to decide whether the net-
work stream is a Wi-Fi camera that is spying on the scene. We examined
two methods for classiﬁcation. One is a threshold-based approach where
we identiﬁed values that most eﬀectively diﬀerentiated between spying and
non-spying devices. The second is a machine learning based classiﬁer where
we trained a neural network to diﬀerentiate diﬀerentiate between spying and
non-spying devices.
4.4.1. Threshold-based approach
The threshold selection was conducted based on the number of tests. Each
collected result is further compared with the proposed threshold to determine
the strength of the relationships. The threshold values are selected based on
the corresponding F1 score. For each measure, we computed the F1 scores
for various threshold values and selected the one with the highest F1 score.
4.4.2. Machine-learning-based approach
After studying the threshold-based approach, we observed that when the
system produced errors, it was usually not for all of the metrics. Only in 24%
of our errors did we observe that all of our metrics were incorrect. As a result,
we decided to combine the metrics using supervised machine learning. We
examined a variety of machine learning algorithms and were able to achieve
signiﬁcantly improved results by training a neural network.
5. Evaluation Procedure
In this section we evaluate the eﬀectiveness of our approach to detecting
hidden cameras in a variety of environments. The goal of our evaluation is
to understand under which circumstances the approach is eﬀective. We have
evaluated the approach by analyzing both the network output of a Wi-Fi
camera and a recording taken (but not transmitted) on a mobile phone. We
have collected data under a variety of conditions as described in table 1 by
varying the relative angle between the devices, motion in the space, resolution
of the cameras, and whether the environment is indoors or outdoors. Through
these experiments we demonstrate that our work is eﬀective in environments
that prior work [10] was not eﬀective.
5.1. Detectors
We selected two likely options that a user would have to detect a stream-
ing camera. The ﬁrst of these is to use a Wi-Fi camera and the second is to
use the camera on a mobile phone or laptop. Two Wi-Fi cameras are more
likely to have stronger correlations between their network outputs due to the
similarity of hardware; however, a user is more likely to carry a mobile phone
than a Wi-Fi camera, so we examined both options.
5.2. Environmental Setup
The baseline of environment for our experiments is an 80 square meter
room with lights on and with two individuals moving in space. For reference,
the results in [10] began to signiﬁcantly degrade when the device was further
than 2 meters from the spying camera. For our outdoor testing, we recorded
a 250 square meter courtyard during the evening of a sunny day with one
individual walking around in the space. We also performed some experiments
on a university campus with a scene that was approximately 3000 square
meters (results pertaining to this environment are labeled "campus").
As seen in Table 1, the testing environment of the experiments is an
80 square meter room with illumination. The window size of the recordings
(network traﬃc recording and video recording) is 60 seconds. Diﬀerent angles
between the hidden Wi-Fi camera and the detectors are also being considered.
Testing angles included 0 degree, 90 degrees, and 180 degrees. The video
compression algorithm of the Wi-Fi camera is H.264 with 720p resolution,
and the video compression algorithm of the mobile phone is H.264 with both
720p and 1080p as resolutions.
Table 1: Parameter Settings of the Experiment.
Parameters settings
Parameters Tested
Wi-Fi camera
Video compression
Mobile phone
OS platform
Video resolution
Room size
Courtyard size
Testing angles
Window of recording
Illumination level of the room
Bright
DCS-936L
H.264/MPEG-4
Google Nexus 6P
Android 8.0.0
720p and 1080p
80 square meters
250 square meters
0, 90, and 180 degrees
60 seconds
5.2.1. Additional environments
In addition to the original test data set, we have also added a new envi-
ronment. We collected data from two diﬀerent cameras in a 10-square meter
room with the light on. An Android-based Nexus 6P and the camera from
MacBook Pro are used to perform data collection. We have collected data
from diﬀerent angles, including 0 degrees, 90 degrees, and 180 degrees. In
total of 366 data samples have been collected. Testing Parameters of the new
experiment is shown in Table 2 below.
5.2.2. Parameter setting
For this research, we used an Android-based Nexus 6P and a D-Link
Wi-Fi camera (DCS-936L) to perform data collection. Network data was
Table 2: Parameter Settings from New Experiments.
Parameters settings
Video compression
Parameters Tested
H.264/MPEG-4/MOV
Mobile phone
OS platform
Video resolution
Laptop camera
Video resolution
Room size
Google Nexus 6P
Android 8.0.0
720p and 1080p
MacBook Pro
10 square meters
720p
Bright
Illumination level of the room
Testing angles
Window of recording
0, 90, and 180 degrees
60 seconds
encrypted via WPA2. Unless otherwise noted, the parameters in Table 1
were used for our experiments.
5.2.3. Collected data
In this research, we have collected in total 830 data samples from the in-
doors room using the Wi-Fi camera, mobile phone. We collected 217 samples
of traﬃc from outdoors. We collected 260 samples of non-spying traﬃc.
There is a mix of videos that capture motion and no motion. The Wi-
Fi camera recorded at 720p and observed the scene relative to the spying
camera at angles of 0, 90, and 180 degrees. The recorded video from the
mobile phone included similar data except we also recorded additional data
at 1080p.
We collected videos with both the Wi-Fi camera and the mobile phone of
the outdoors courtyard. The videos were collected with and without motion.
The videos that were collected without motion were done at a time when no-
body was using the courtyard. For the motion videos, several people walked
around in the courtyard while the cameras were recording. The camera and
phone were both used to record the courtyard at 0 and 90 degrees relative
to the spying camera. We also collected data from an outdoors portion of a
university campus.
For non-spying camera traﬃcs, we collected in total 260 data samples
of network traﬃc from Skype, YouTube, YouTube TV, Amazon TV, Switch
gaming, Normal browsing, and Video downloading. Those non-spying camera
traﬃcs are used in this paper to not only produce true positives, but also
avoid false positives. We mostly focused on video-related traﬃc patterns,
but also included non-video data for diversity.
(a) Correlation Coeﬃcient between Wi-Fi
Camera and Spy Camera
(b) JSD and KLD between Wi-Fi Camera
and Spy Camera
Figure 3: Wi-Fi Camera Detector
5.3. Results
In this section we present the results of the analysis of the data we col-
lected. These results show that the correlation coeﬃcient measurement used
in [10] does not hold for larger outdoors spaces. They also show the added
diﬃculty of measuring similarity between diﬀerent types of devices. From
these results, utilize additional distant measures and train a neural network
to assist with classiﬁcation.
5.3.1. Correlation Coeﬃcient
Since previous work had relied on Pearson’s correlation coeﬃcient, we
ﬁrst examined it as a similarity measure. These results can be seen in ﬁg-
ure 2. Note that while all of the situations in which there was a spying
camera on average are diﬀerent than the non-spying traﬃc, the standard de-
viations caused a signiﬁcant overlap between spying and non-spying traﬃc,
so we concluded that we would be unable to use only correlation coeﬃcients
for classiﬁcation. Likewise, we demonstrate in ﬁgure 3a that the diﬀerence
between non-spying traﬃc and spy cameras degrades even further when we
consider results from the outdoors scenario.
(a) DTW between Mobile Phone and Spy
Camera
(b) JSD and KLD between Mobile Phone and
Spy Camera
Figure 4: Mobile Phone Detector
5.3.2. Similarity Measures
Next, we considered other measures for determining the similarity and
diﬀerences between our recorded stream and the spy camera. We examined
JSD and KSD as divergence measures and showed that they provided signif-
icantly diﬀerent results in spying vs non-spying traﬃc. In ﬁgures 3b and 4b
we see that for both the camera and the mobile phone, JSD has the most
distance between one standard deviation above the mean for the spying video
and one standard deviation below the mean for the non-spying video. Like-
wise, KLD provides the largest gap between the mean of the spying video
and the non-spying video.
In our experiments between the Wi-Fi camera and the mobile phone,
we noticed that there was a signiﬁcant diﬀerence between the data usage of
encoding on the phone and the traﬃc patterns of the Wi-Fi camera. We
attribute this to the low power hardware used in the Wi-Fi camera as we
noticed that there were often times of signiﬁcant movement where the Wi-Fi
camera did not transmit any data at all and then spiked in traﬃc shortly
after the movement. This pattern caused the correlation coeﬃcient to become
almost useless, so we examined DTW as a distance measure. DTW distance
was only a weak predictor of whether or not a device was a spy camera as
seen in ﬁgure 4a.
5.3.3. Threshold-based Classiﬁers
3:
Classification
Table
Thresholds
After we analyzed similarity measures as suit-
able for determining the distance between spying
and non-spying traﬃc, we analyzed our results
to identify optimal thresholds for classiﬁcation.
The advantage of threshold classiﬁcation is that
it has a very low computational cost, so it has
value as a classiﬁer for low power devices. From
this analysis, we identiﬁed the best thresholds for
each measure based on F1 score as shown in ta-
ble 3. Note that these are not necessarily always
going to be the optimal threshold, but they do provide us with an under-
standing of an approximate starting point for a threshold-based classiﬁer.
CC
0.21
DTW 12.51
KLD 0.021
JSD
0.005
The results of the threshold-based classiﬁers can be found in table 4.
As expected from the analysis of distance between the means and standard
deviations, KLD and JSD greatly outperformed DTW with the mobile phone
detector.
Table 4: Threshold-based classifiers.
Metrics F1 score Accuracy
Wi-Fi camera-based detection model
Error
CC
KLD
JSD
77.642
88.643
83.208
77.005
87.165
84.841
22.994
12.834
15.158
Mobile phone-based detection model
DTW 78.947
KLD
89.185
JSD
88.656
72.173
87.304