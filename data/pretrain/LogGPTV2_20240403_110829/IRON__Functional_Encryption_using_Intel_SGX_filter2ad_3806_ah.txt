### Functional Encryption Scheme with Secure Hardware

#### Protocol Steps
1. **Key Generation:**
   - Run `PKE.KeyGen(1λ)` twice to generate two key pairs: `(pk1, sk1)` and `(pk2, sk2)`.

2. **Session ID Generation:**
   - Generate a session ID, `sid ← {0, 1}λ`.

3. **State Update:**
   - Update the state to `(sid, sk1, sk2)`.

4. **Decryption Process:**
   - On input `("complete dec", (sid, ct1, ct2))`:
     1. Look up the state to obtain the entry `(sid, sk1, sk2)`.
     2. Verify the signature `b ← S.Verify(vksign, σk, (sid, ct1, ct2))`.
     3. Check that `h = H(ctm)`. If not, output `⊥`.
     4. Decrypt `m ← PKE.dec(sk1, ct1)`.
     5. If `m = ⊥`, decrypt and output `out ← PKE.dec(sk2, ct2)`.
     6. Parse `m = (ek, vksign)` and compute `x ← E.dec(ek, ctm)`.
     7. Run `P` on `x` and output `out := P(x)`.

5. **Hardware Interaction:**
   - Run `hdlDE ← HW.Load(params, QDE)` and call `quote ← HW.Run&QuoteskHW(hdlDE, "init dec", skP, ctk)`.
   - Query `KM(quote)`, which internally runs `(sid, ct1, ct2, h, σsk) ← HW.Run(hdlKME, "provision", quote, params)`.
   - Call `HW.Run(hdlDE, "complete dec", sid, ct1, ct2, h, σsk)` and output its result `out`.

#### Security Overview
**Theorem E.1.** If `E` is an IND-CPA secret key encryption scheme, `S` is an EUF-CMA secure signature scheme, `PKE` is an IND-CCA2 secure public key encryption scheme with weak robustness property, and `HW` is a secure hardware scheme, then `FE` is a secure functional encryption scheme according to Definition D.1.

**Challenges in Proving Security:**
- The main difference from the proof of our first construction is that the HW algorithms are not simulated but are run as in the real world.
- When using the IND-CCA2 security of `PKE` to prove that the adversary does not learn any information from the communication between enclaves, the decryption enclave will not have the correct secret key to decrypt the `PKE` ciphertext and hence cannot proceed to generate the correct output.
- To remedy this, DE sends two public keys and KME sends two ciphertexts during that step so that when the IND-CCA2 game is run for one of the ciphertexts, the other ciphertext can be decrypted by DE to satisfy the correctness of the FE scheme.
- During this step, we also use the indistinguishability of ciphertexts when the same messages are encrypted under different public keys.
- Additionally, to help the programs decide whether the message obtained after decryption is correct or not, we require the robustness property from our `PKE` scheme, which ensures that decryption outputs `⊥` when a ciphertext is decrypted with a "wrong" key.

#### Discussion
- This construction can be modified to work like the first construction, where the decryption enclave is separated from the function enclave written by the user programmer.
- This construction allows us to achieve stronger security notions of FE and HW.
- The KM oracle performs minimal cryptographic functionality: basic signing/encryption. It is an independent enclave DE without access to `msk` which runs the user-specified programs on user-specified inputs.
- Hence, it is relatively easier to implement the KM functionality securely against side-channels compared to powerful hardware tokens.
- From a theoretical perspective, KM runs in time independent of the runtime of the program and the length of the message, in contrast to hardware tokens whose runtime depends on both the program and the message.
- The similarity of C-FE with our notion is that there is an "authority" mediating every decryption. If mediation by KM were a concern for an application of FE, the message sent by DE to the KME can be encrypted and anonymous communication mechanisms like TOR can be used to communicate with KM so that KM cannot discriminate against specific decryptor nodes (also helped by remote attestation using blind signatures).
- Our construction could be modified to achieve C-FE when the efficiency constraints are relaxed for the authority oracle such that they run in time independent of the length of the input but dependent on the function description length. The construction in [45] requires the authority to run in time proportional to the length of the function description and input.

#### References
[1] Michel Abdalla, Mihir Bellare, and Gregory Neven. 2010. Robust Encryption. In TCC. 480–497.
[2] Shweta Agrawal, Sergey Gorbunov, Vinod Vaikuntanathan, and Hoeteck Wee. 2013. Functional Encryption: New Perspectives and Lower Bounds. In CRYPTO. 500–518.
[3] Joël Alwen, Manuel Barbosa, Pooya Farshim, Rosario Gennaro, S. Dov Gordon, Stefano Tessaro, and David A. Wilson. 2013. On the Relationship between Functional Encryption, Obfuscation, and Fully Homomorphic Encryption. In IMACC. 65–84.
[4] Prabhanjan Ananth and Abhishek Jain. 2015. Indistinguishability Obfuscation from Compact Functional Encryption. In CRYPTO I. 308–326.
[5] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin, Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan O’Keeffe, Mark L. Stillwell, David Goltzsche, Dave Eyers, Rüdiger Kapitza, Peter R. Pietzuch, and Christof Fetzer. 2016. SCONE: Secure Linux Containers with Intel SGX. In OSDI. 689–703.
[6] Raad Bahmani, Manuel Barbosa, Ferdinand Brasser, Bernardo Portela, Ahmad-Reza Sadeghi, Guillaume Scerri, and Bogdan Warinschi. 2017. Secure Multiparty Computation from SGX. In FC.
[7] Manuel Barbosa, Bernardo Portela, Guillaume Scerri, and Bogdan Warinschi. 2016. Foundations of Hardware-Based Attested Computation and Application to SGX. In EuroS&P. 245–260.
[8] Andrew Baumann, Marcus Peinado, and Galen C. Hunt. 2014. Shielding Applications from an Untrusted Cloud with Haven. In OSDI. 267–283.
[9] Nir Bitansky and Vinod Vaikuntanathan. 2015. Indistinguishability Obfuscation from Functional Encryption. In FOCS. 171–190.
[10] Dan Boneh and Matthew K. Franklin. 2001. Identity-Based Encryption from the Weil Pairing. In CRYPTO. 213–229.
[11] Dan Boneh, Amit Sahai, and Brent Waters. 2012. Functional Encryption: A New Vision for Public-key Cryptography. Commun. ACM 55, 11 (Nov. 2012), 56–64. https://doi.org/10.1145/2366316.2366333
[12] Zvika Brakerski and Gil Segev. 2015. Function-Private Functional Encryption in the Private-Key Setting. In TCC II. 306–324.
[13] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure: SGX Cache Attacks Are Practical. CoRR abs/1702.07521 (2017).
[14] Ran Canetti. 2001. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In FOCS. 136–145.
[15] Ran Canetti, Huijia Lin, Stefano Tessaro, and Vinod Vaikuntanathan. 2015. Obfuscation of Probabilistic Circuits and Applications. In TCC II. 468–497.
[16] David Champagne and Ruby B. Lee. 2010. Scalable architectural support for trusted software. In HPCA. 1–12.
[17] Nishanth Chandran, Vipul Goyal, Aayush Jain, and Amit Sahai. 2015. Functional Encryption: Decentralised and Delegatable. Cryptology ePrint Archive, Report 2015/1017. (2015). http://eprint.iacr.org/2015/1017.
[18] Yilei Chen, Craig Gentry, and Shai Halevi. 2017. Cryptanalyses of Candidate Branching Program Obfuscators. In EUROCRYPT. 278–307.
[19] Kai-Min Chung, Jonathan Katz, and Hong-Sheng Zhou. 2013. Functional Encryption from (Small) Hardware Tokens. In ASIACRYPT II. 120–139.
[20] Victor Costan and Srinivas Devadas. 2016. Intel SGX Explained. IACR Cryptology ePrint Archive 2016 (2016), 086.
[21] Victor Costan, Ilia A. Lebedev, and Srinivas Devadas. 2016. Sanctum: Minimal Hardware Extensions for Strong Software Isolation. In USENIX Security. 857–874.
[22] Christopher W Fletcher, Marten van Dijk, and Srinivas Devadas. 2012. A secure processor architecture for encrypted computation on untrusted programs. In STC. ACM, 3–8.
[23] Sanjam Garg, Craig Gentry, Shai Halevi, Mariana Raykova, Amit Sahai, and Brent Waters. 2013. Candidate Indistinguishability Obfuscation and Functional Encryption for all Circuits. In FOCS. 40–49.
[24] Shafi Goldwasser, S. Dov Gordon, Vipul Goyal, Abhishek Jain, Jonathan Katz, Feng-Hao Liu, Amit Sahai, Elaine Shi, and Hong-Sheng Zhou. 2014. Multi-input Functional Encryption. In EUROCRYPT 2014. 578–602.
[25] Shafi Goldwasser, Yael Tauman Kalai, and Guy N. Rothblum. 2008. One-Time Programs. In CRYPTO. 39–56.
[26] Sergey Gorbunov, Vinod Vaikuntanathan, and Hoeteck Wee. 2012. Functional Encryption with Bounded Collusions via Multi-party Computation. In CRYPTO. 162–179.
[27] Vipul Goyal, Yuval Ishai, Amit Sahai, Ramarathnam Venkatesan, and Akshay Wadia. 2010. Founding Cryptography on Tamper-Proof Hardware Tokens. In TCC. 308–326.
[28] Vipul Goyal, Abhishek Jain, Venkata Koppula, and Amit Sahai. 2015. Functional Encryption for Randomized Functionalities. 325–351.
Trusted Platform Module.
https://
[29] Trusted Computing Group. 2009.
trustedcomputinggroup.org/. (2009).
[30] Debayan Gupta, Benjamin Mood, Joan Feigenbaum, Kevin R. B. Butler, and Patrick Traynor. 2016. Using Intel Software Guard Extensions for Efficient Two-Party Secure Function Evaluation. In FC Workshops. 302–318.
[31] Intel. 2009. Intel Trusted Execution Technology. (2009).
[32] Intel. 2016. Intel Software Guard Extensions Programming Reference. http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-system-programming-manual-325384.pdf
[33] Intel. 2016. SGX documentation: sgx_create_monotonic_counter. https://software.intel.com/en-us/node/696638. (2016).
[34] Intel. 2016. SGX documentation: sgx_get_trusted_time. https://software.intel.com/en-us/node/696636. (2016).
[35] Intel. 2017. Intel SGX Version 2. http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3d-part-4-manual.pdf. (2017). Accessed: 2017-02-16.
[36] S. Johnson, V. Scarlata, C. Rozas, E. Brickell, and F. Mckeen. 2016. Intel Software Guard Extensions: EPID provisioning and attestation services.
[37] Jonathan Katz. 2007. Universally Composable Multi-party Computation Using Tamper-Proof Hardware. In EUROCRYPT. 115–128.
[38] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. 2017. Inferring Fine-grained Control Flow Inside SGX Enclaves with Branch Shadowing. In USENIX Security.
[39] Kevin Lewi, Alex J. Malozemoff, Daniel Apon, Brent Carmer, Adam Foltzer, Daniel Wagner, David W. Archer, Dan Boneh, Jonathan Katz, and Mariana Raykova. 2016. 5Gen: A Framework for Prototyping Applications Using Multilinear Maps and Matrix Branching Programs. In CCS. 981–992.
[40] David Lie, Chandramohan A. Thekkath, Mark Mitchell, Patrick Lincoln, Dan Boneh, John C. Mitchell, and Mark Horowitz. 2000. Architectural Support for Copy and Tamper Resistant Software. In ASPLOS. 168–177.
[41] Chang Liu, Austin Harris, Martin Maas, Michael W. Hicks, Mohit Tiwari, and Elaine Shi. 2015. GhostRider: A Hardware-Software System for Memory Trace Oblivious Computation. In ASPLOS. 87–101.
[42] Sinisa Matetic, Mansoor Ahmed, Kari Kostiainen, Aritra Dhar, David Sommer, Arthur Gervais, Ari Juels, and Srdjan Capkun. 2017. ROTE: Rollback Protection for Trusted Execution. Cryptology ePrint Archive, Report 2017/048. (2017). http://eprint.iacr.org/2017/048.
[43] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas, Hisham Shafi, Vedvyas Shanbhogue, and Uday R Savagaonkar. 2013. Innovative instructions and software model for isolated execution.. In HASP@ ISCA. 10.
[44] Eric Miles, Amit Sahai, and Mark Zhandry. 2016. Annihilation Attacks for Multilinear Maps: Cryptanalysis of Indistinguishability Obfuscation over GGH13. In CRYPTO.
[45] Muhammad Naveed, Shashank Agrawal, Manoj Prabhakaran, XiaoFeng Wang, Erman Ayday, Jean-Pierre Hubaux, and Carl A. Gunter. 2014. Controlled Functional Encryption. In CCS. 1280–1291.
[46] Kartik Nayak, Christopher Fletcher, Ling Ren, Nishanth Chandran, Satya Lokam, Elaine Shi, and Vipul Goyal. 2017. Hop: Hardware makes obfuscation practical. In NDSS.
[47] Olga Ohrimenko, Felix Schuster, Cédric Fournet, Aastha Mehta, Sebastian Nowozin, Kapil Vaswani, and Manuel Costa. 2016. Oblivious Multi-Party Machine Learning on Trusted Processors. In USENIX Security. 619–636.
[48] Rafael Pass, Elaine Shi, and Florian Tramèr. 2017. Formal Abstractions for Attested Execution Secure Processors. In EUROCRYPT.
[49] Ashay Rane, Calvin Lin, and Mohit Tiwari. 2015. Raccoon: Closing Digital Side-Channels through Obfuscated Execution. In USENIX Security. 431–446.
[50] Felix Schuster, Manuel Costa, Cédric Fournet, Christos Gkantsidis, Marcus Peinado, Gloria Mainar-Ruiz, and Mark Russinovich. 2015. VC3: Trustworthy Data Analytics in the Cloud Using SGX. In IEEE SP. 38–54.
[51] Edward J. Schwartz, David Brumley, and Jonathan M. McCune. 2010. Contractual Anonymity. In NDSS.
[52] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2017. Malware Guard Extension: Using SGX to Conceal Cache Attacks. CoRR abs/1702.08719 (2017).
[53] Jaebaek Seo, Byoungyoung Lee, Sungmin Kim, Ming-Wei Shih, Insik Shin, Dongsu Han, and Taesoo Kim. 2017. SGX-Shield: Enabling Address Space Layout Randomization for SGX Programs. In NDSS.
[54] Shweta Shinde, Dat Le Tien, Shruti Tople, and Prateek Saxena. 2017. PANOPLY: Low-TCB Linux Applications with SGX Enclaves. In NDSS.
[55] G. Edward Suh, Dwaine E. Clarke, Blaise Gassend, Marten van Dijk, and Srinivas Devadas. 2003. AEGIS: Architecture for tamper-evident and tamper-resistant processing. In ICS. 160–171.
[56] G. Edward Suh, Charles W. O’Donnell, and Srinivas Devadas. 2007. Aegis: A Single-Chip Secure Processor. IEEE Design & Test of Computers 24, 6 (2007), 570–580.
[57] Chia-che Tsai, Kumar Saurabh Arora, Nehal Bandi, Bhushan Jain, William Jannen, Jitin John, Harry A. Kalodner, Vrushali Kulkarni, Daniela Oliveira, and Donald E. Porter. 2014. Cooperation and security isolation of library OSes for multi-process applications. In EuroSys. 9:1–9:14.
[58] Nico Weichbrodt, Anil Kurmus, Peter R. Pietzuch, and Rüdiger Kapitza. 2016. AsyncShock: Exploiting Synchronisation Bugs in Intel SGX Enclaves. In ESORICS I. 440–457.
[59] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. 2015. Controlled-channel attacks: Deterministic side channels for untrusted operating systems. In IEEE SP. 640–656.
[60] Wenting Zheng, Ankur Dave, Jethro G. Beekman, Raluca Ada Popa, Joseph E. Gonzalez, and Ion Stoica. 2017. Opaque: An Oblivious and Encrypted Distributed Analytics Platform. In NSDI. 283–298.