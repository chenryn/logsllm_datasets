control errors.
Another  software  based  fault  tolerant  approach,
using time redundancy, proposed in [17], is evaluated in
[3], using a Toshiba TX 49 commercial processor, a 64-
bit  radiation  hardened  processor,  designed  for  space
applications,  and  injecting  faults  only  in  the  program
counter.  The  experiments  resulted  in  the  detection  of
more than 96% of the injected faults.
The  technique  proposed  in  this  paper  is  a  system
level,  hardware  based,  non-intrusive  one.  It  does  not
require any modification of the application software to
be  run  in  the  SoC,  allowing  the  reuse  of  applications
supplied only in object code format. Moreover, the I-IP
is  connected  externally  to  the  buses  of  the  core
processor,  allowing  its  implementation  without  any
change in the core internal architecture.
3. Proposed Technique
The proposed technique is based on the insertion of
an I-IP between the processor core of the SoC and the
memory  storing  the  instructions  the  processor  core
executes. This way, the I-IP is able to intercept the fetch
addresses  sent  by  the  core  processor  and  check  if  the
correct  control  flow  is  being  followed.  This  overall
architecture is illustrated in Figure 1.
error
abus
cbus
dbus
IRQ
ÂµP
abus
cbus
dbus
I-IP
Code 
memory
Figure 1. Overall architecture
IRQ
By  checking  the  fetch  addresses,  the  I-IP  monitors
the  value  of  the  program  counter  to  identify  if  its
contents are correct or not, according to the control flow
of the program being executed. When the I-IP finds an
invalid address, it raises a flag indicating that an error
was found. It is important to mention here that the I-IP
does not correct the error, it only indicates that a fetch
from a wrong address was attempted.
In this work, as done in [5], we assume that the I-IP
is  hardened  by  design  and  test,  being  tolerant  to  any
kind  of  faults  that  can  lead  to  any  type  of  failure
compromising  its  correct  operation.  We  also  assume
that the code memory is protected through some EDAC
(Error Detection and Correction) scheme, so that values
stored  in  memory  cannot  be  corrupted.  Finally,  we
assume that the bus connecting the instruction cache to
the processor is not accessible, as it often happens for
processor  cores,  and  therefore  we  assume  that  the
instruction cache either does not exist, or is disabled.
To  detect  when  the  program  counter  has  a  wrong
value,  the  I-IP  identifies  all  fetched  instructions  by
decoding and classifying them into two main groups:
Branch instructions: are all the instructions that can
cause a deviation in the program control flow, such as
unconditional jump or conditional branch instructions;
Other instructions: all other instructions that do not
have  the  capacity  to  change  the  value  of  the  program
counter,  such  as  logic  and  arithmetic  data  processing
instructions, are classified in this group.
IRQ
abus dbus cbus
CPU interface
IRC
Control 
Unit
Decode 
logic
Fetch logic
Memory interface
abus
dbus
cbus
Figure 2. Architecture of the I-IP
in 
Figure 2 shows the different hardware blocks of the
the  following
I-IP,  which  will  be  described 
paragraphs.
1)  CPU  interface:  connects  the  I-IP  with  the
processor core. It decodes the bus cycles the processor
core executes, and in case of fetch cycles it activates the
rest of the I-IP.
2)  Memory  interface:  connects  the  I-IP  with  the
memory storing the application the processor executes.
This  module  executes  commands  coming  from  the
Fetch 
the
communication with the memory.
logic  and  handles 
the  details  of 
3)  Fetch  logic:  issues  to  the  Memory  interface  the
commands needed for loading a new instruction into the
I-IP and feeding it to the Decode logic.
to 
instructions  according 
4)  Decode  logic:  decodes  the  fetched  instruction,
whose  address  in  memory  is  A,  and  sends  the  details
about  the  instruction  to  the  Control  unit.  This  module
classifies 
the  previously
described two categories: branch instructions and other
instructions.  The  branch  instructions  are  also  sub-
classified  as  conditional  branches,  such  as  the  MIPS
instruction  beq 
if  equal  or  zero)  or
unconditional branches, such as the j instruction (jump
to address).
(branch 
5) Control unit: supervises the operation of the I-IP.
Upon receiving a request for an instruction fetch from
the  CPU  interface,  it  activates  the  Fetch  logic.  Then,
depending on the information produced by the Decode
logic, it either issues to the main processor a different
sequence  of  instructions,  as  explained  in  the  next
paragraph,  or  sends  to  the  processor  the  original
instruction.  Moreover,  it  implements  the  operations
in 
to 
needed  for  control-flow  check,  and,  in  case  of  error
detection, the error flag is activated. Finally, it receives
interrupt  requests  and  forwards  them  to  the  processor
core at the correct time. A special care is taken with the
interrupt request handling by the I-IP, when a sequence
of  instructions  is  sent  to  the  core  processor  instead  of
the original one. In order to allow a proper return from
interrupt  service  subroutines  to  the  point 
the
application  program  where  the  next  instruction  is
located,  in  those  cases  the  I-IP  only  forwards  the
interrupt  request 
the  core  processor  after  all
instructions  of  the  substitute  sequence  have  been  sent.
In  other  words,  the  substitute  sequence  operation  is
treated  as  an  atomic  operation,  which  cannot  be
interrupted.
In order to correctly decode the instructions, when a
new core processor is adopted for the first time, the I-IP
must be tailored to the instruction set architecture of the
target  processor.  The  designer  needs  to  program  the
decoding rules in the Decode logic block to indicate to
the  Control  unit  block  if  the  current  instruction  is  a
branch instruction or not, and, depending on the branch
instruction, if it is necessary to issue to the processor a
different  sequence  of 
instructions.  Such  situation
happens  when  the  branch  destination  address  is  not
included  in  the  instruction  word,  together  with  the
instruction opcode, as in the jr (jump through register)
MIPS instruction. In this case, the I-IP needs to get the
address  value  stored  in  the  register,  to  check  if  the
branch was taken correctly. Therefore, the designer has
to provide the sequence of instructions that the I-IP will
send  to  the  processor  in  order  to  receive  the  branch
address  and  return  to  the  normal  program  flow,  to
continue execution.
Auxiliary tools to help the designer in the process of
adapting  the  I-IP  to  a  given  target  core  processor,
following the same model and design flow proposed in
[2], will be developed as part of future work.
The topology of the proposed approach allows the I-
IP  to  be  used  in  any  kind  of  SoC  implementation  in
which  the  code  memory  is  external  to  the  processor
core.
The  use  of  this  approach  brings  two  advantages
when  compared  to  the  alternatives  commented  in
Section 2. First, from the software standpoint, it is non-
intrusive, since the designer does not need to know the
application code nor to modify this code. Second, since
the  I-IP  is  inserted  outside  the  core  processor  and
connects  to  it  through  to  already  available  buses,  no
changes 
the  core  processor  architecture  are
necessary,  which  also  characterizes  this  approach  as
non-intrusive in terms of hardware.
to 
4. Case study: hardening a MIPS core
In  this  section  we  will  discuss  the  experimental
results obtained with an implementation of the proposed
I-IP to harden the control flow of a widely used RISC
core processor: a pipelined MIPS.
The  MIPS  used  in  our  experiments  has  a  16-bit
RISC  architecture,  with  a  5-stage  pipeline,  and  no
branch prediction. The selection of this architecture was
a)
in  the  case  of  an  unconditional  branch,  the
number  of  instructions  that  need  to  be  flushed
from  the  pipeline  is  increased  by  one,  because,
as  explained  before,  the  I-IP  works  as  an  extra
pipeline stage. To correct this situation, the I-IP
sends  to  the  core  processor  an  extra  nop  (no
operation) 
an
unconditional branch is fetched;
instruction, 
each 
time 
b) when  a  jal  (jump  and  link)  -  a  subroutine  call
instruction  -  is  executed,  the  MIPS  processor
saves the subroutine return address in a register.
Since the I-IP causes a delay of one cycle in the
execution  of  instructions,  the  saved  address  is
also  one  cycle  ahead  the  correct  one.  To  solve
this problem, when fetching a jal instruction, the
I-IP  sends  to  the  core processor  one  instruction
that  restores  the  PC  value  to  the  correct  one,
followed  by  a  j  instruction,  instead  of  the  jal
instruction.  The  first  instruction  is  used  to  save
the  correct  address  in  the  register  used  to  store
the return address, and the j instruction performs
the jump to the subroutine entry point.
due to its widespread use in the implementation of SoCs
by the industry.
Because 
the  MIPS  architecture  has  a  5-stage
pipeline,  with  fetch,  decode,  execution,  memory  write
and  write  back  stages,  the  I-IP  works  (only  from  the
logical  standpoint)  as  being  an  additional  stage,
between the fetch and the decode stages. That happens
because  the  I-IP  requires  one  cycle  to  decode  the
fetched  instruction  and  decide  which  instruction(s)  to
send  to  the  processor,  and  that  makes  the  processor
receive the fetched instruction one cycle later.
Due  to  this  virtual  extension  of  the  number  of
pipeline-stages,  the  I-IP  needs  to  send  a  different
sequence of instructions, depending on the fetched one,
to prevent erroneous situations:
Due to the pipelined  architecture of  MIPS,  the I-IP
must wait a few cycles until a branch is executed, and
only then compare the stored address with the one in the
program  counter.  Therefore,  the  I-IP  has  an  internal
circular register file, used to store up to four addresses
that  will  be  compared  to  the  program  counter  a  few
cycles later.
4.1. Fault injection experiments
To  evaluate  the  performance  of  the  I-IP  in  control
flow error detection, an in house tool named CACO-PS
(Cycle  Accurate  Configurable  Power  Simulation)  [16]
was  used  to  simulate  the  architecture  of  the  SoC  and
check the results of fault injection.
The  I-IP  and  the  MIPS  architecture  were  described
in the language used by CACO-PS, which is System C
like.  During  the  fault  injection  procedure,  2,000  faults
were  injected  randomly  in  time,  causing  SEUs  in
randomly  chosen  bits  of  the  MIPS  program  counter
register, while executing a software implementation of
the Viterbi algorithm for encoding a stream of data.
To detect if a fault caused an error, two copies of the