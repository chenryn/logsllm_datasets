### CWEID:CWE-436 Interpretation Conflict
Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.
### CWEID:CWE-434 Unrestricted Upload of File with Dangerous Type
title_zh:预期行为违背
The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.
### CWEID:CWE-440 Expected Behavior Violation
title_zh:端点特性的不完整模型
A feature, API, or function does not perform according to its specification.
### CWEID:CWE-443 DEPRECATED: HTTP response splitting
title_zh:新版本或环境中的行为变化
This weakness can be found at :CWE-113:.
### CWEID:CWE-446 UI Discrepancy for Security Feature
title_zh:HTTP请求的解释不一致性（HTTP请求私运）
The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.
### CWEID:CWE-447 Unimplemented or Unsupported Feature in UI
title_zh:未有动机的代理或中间人（混淆代理）
A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.
### CWEID:CWE-448 Obsolete Feature in UI
title_zh:安全特性的UI矛盾
A UI function is obsolete and the product does not warn the user.
### CWEID:CWE-449 The UI Performs the Wrong Action
title_zh:在UI中的未实现或未支持特性
The UI performs the wrong action with respect to the user's request.
### CWEID:CWE-441 Unintended Proxy or Intermediary ('Confused Deputy')
title_zh:UI上的废弃特性
The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.
### CWEID:CWE-444 Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')
title_zh:UI执行错误动作
The product acts as an intermediary HTTP agent (such as a proxy or firewall) in the data flow between two entities such as a client and server, but it does not interpret malformed HTTP requests or responses in ways that are consistent with how the messages will be processed by those entities that are at the ultimate destination.
### CWEID:CWE-450 Multiple Interpretations of UI Input
title_zh:UI输入的多重解释
The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.
### CWEID:CWE-451 User Interface (UI) Misrepresentation of Critical Information
title_zh:关键信息的UI错误表达
The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.
### CWEID:CWE-453 Insecure Default Variable Initialization
title_zh:不安全的缺省变量初始化
The product, by default, initializes an internal variable with an insecure or less secure value than is possible.
### CWEID:CWE-454 External Initialization of Trusted Variables or Data Stores
title_zh:可信任变量或数据存储的外部初始化
The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.
### CWEID:CWE-455 Non-exit on Failed Initialization
The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.
### CWEID:CWE-458 DEPRECATED: Incorrect Initialization
title_zh:变量未经初始化
This weakness has been deprecated because its name and description did not match. The description duplicated :CWE-454:, while the name suggested a more abstract initialization problem. Please refer to :CWE-665: for the more abstract problem.
### CWEID:CWE-457 Use of Uninitialized Variable
title_zh:使用未经初始化的变量
The code uses a variable that has not been initialized, leading to unpredictable or unintended results.
### CWEID:CWE-456 Missing Initialization of a Variable
title_zh:初始化失效后的不存在变量
The product does not initialize critical variables, which causes the execution environment to use unexpected values.
### CWEID:CWE-459 Incomplete Cleanup
title_zh:在关联列表中具有重复Key
The product does not properly "clean up" and remove temporary or supporting resources after they have been used.
### CWEID:CWE-462 Duplicate Key in Associative List (Alist)
title_zh:清理环节不完整
Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.
### CWEID:CWE-463 Deletion of Data Structure Sentinel
title_zh:对数据结构哨兵域的删除
The accidental deletion of a data-structure sentinel can cause serious programming logic problems.
### CWEID:CWE-460 Improper Cleanup on Thrown Exception
title_zh:抛出异常的清理不恰当
The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.
### CWEID:CWE-464 Addition of Data Structure Sentinel
title_zh:对数据结构哨兵域的增加
The accidental addition of a data-structure sentinel can cause serious programming logic problems.
### CWEID:CWE-468 Incorrect Pointer Scaling
title_zh:在预期范围外返回指针值
In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.
### CWEID:CWE-466 Return of Pointer Value Outside of Expected Range
title_zh:在指针类型上使用sizeof()
A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.
### CWEID:CWE-467 Use of sizeof() on a Pointer Type
title_zh:使用指针的减法来确定大小
The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.
### CWEID:CWE-469 Use of Pointer Subtraction to Determine Size
title_zh:不正确的指针放大
The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.
### CWEID:CWE-470 Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')
title_zh:对假设不可变数据的修改（MAID）
The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.
### CWEID:CWE-472 External Control of Assumed-Immutable Web Parameter
title_zh:使用外部可控制的输入来选择类或代码（不安全的反射）
The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.
### CWEID:CWE-473 PHP External Variable Modification
title_zh:对假设不可变Web参数的外部可控制
A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.
### CWEID:CWE-474 Use of Function with Inconsistent Implementations
title_zh:空指针解引用
The code uses a function that has inconsistent implementations across operating systems and versions.
### CWEID:CWE-471 Modification of Assumed-Immutable Data (MAID)
title_zh:PHP参数外部修改
The product does not properly protect an assumed-immutable element from being modified by an attacker.
### CWEID:CWE-475 Undefined Behavior for Input to API
title_zh:从输入到API的未定义行为
The behavior of this function is undefined unless its control parameter is set to a specific value.
### CWEID:CWE-477 Use of Obsolete Function
title_zh:使用具有不一致性实现的函数
The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.
### CWEID:CWE-479 Signal Handler Use of a Non-reentrant Function
title_zh:对废弃函数的使用
The product defines a signal handler that calls a non-reentrant function.
### CWEID:CWE-478 Missing Default Case in Multiple Condition Expression
title_zh:在Switch语句中缺失缺省条件
The code does not have a default case in an expression with multiple conditions, such as a switch statement.
### CWEID:CWE-476 NULL Pointer Dereference
title_zh:信号处理例程中使用不可再入的函数
A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.
### CWEID:CWE-483 Incorrect Block Delimitation
title_zh:使用操作符不正确
The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.
### CWEID:CWE-480 Use of Incorrect Operator
title_zh:错误将赋值符号写成比较符号
The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.
### CWEID:CWE-481 Assigning instead of Comparing
title_zh:错误将比较符号写成赋值符号
The code uses an operator for assignment when the intention was to perform a comparison.
### CWEID:CWE-482 Comparing instead of Assigning
title_zh:不正确的代码块分界
The code uses an operator for comparison when the intention was to perform an assignment.
### CWEID:CWE-484 Omitted Break Statement in Switch
title_zh:在Switch语句中省略Break语句
The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.
### CWEID:CWE-486 Comparison of Classes by Name
title_zh:使用名称来比较对象
The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.
### CWEID:CWE-487 Reliance on Package-level Scope
title_zh:依赖包一级的范围
Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.
### CWEID:CWE-488 Exposure of Data Element to Wrong Session
title_zh:遗留的调试代码
The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.
### CWEID:CWE-491 Public cloneable() Method Without Final ('Object Hijack')
title_zh:对错误会话暴露数据元素
A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.
### CWEID:CWE-493 Critical Public Variable Without Final Modifier
title_zh:使用包含敏感数据的内部对象
The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.
### CWEID:CWE-489 Active Debug Code
title_zh:公开的可克隆方法（对象劫持）
The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.
### CWEID:CWE-492 Use of Inner Class Containing Sensitive Data
title_zh:缺少FinalModifier的关键公开变量
Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.
### CWEID:CWE-496 Public Data Assigned to Private Array-Typed Field
title_zh:从公开方法中返回私有的数组类型数据域
Assigning public data to a private array is equivalent to giving public access to the array.
### CWEID:CWE-494 Download of Code Without Integrity Check
title_zh:公开数据赋值给私有的数组类型数据域
The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.
### CWEID:CWE-498 Cloneable Class Containing Sensitive Information
title_zh:下载代码缺少完整性检查
The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.
### CWEID:CWE-495 Private Data Structure Returned From A Public Method
title_zh:公开静态字段没有标记为Final
The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.
### CWEID:CWE-499 Serializable Class Containing Sensitive Data
title_zh:将系统数据暴露到未授权控制的范围
The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.
### CWEID:CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere
title_zh:可序列化的类中包含敏感信息
The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.
### CWEID:CWE-501 Trust Boundary Violation
title_zh:包含敏感信息的可克隆类
The product mixes trusted and untrusted data in the same data structure or structured message.
### CWEID:CWE-500 Public Static Field Not Marked Final
title_zh:违背信任边界
An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.
### CWEID:CWE-507 Trojan Horse
title_zh:可信数据的反序列化
The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.
### CWEID:CWE-508 Non-Replicating Malicious Code
title_zh:内嵌的恶意代码
Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.
### CWEID:CWE-502 Deserialization of Untrusted Data
title_zh:特洛伊木马
The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.
### CWEID:CWE-509 Replicating Malicious Code (Virus or Worm)
title_zh:后门
Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.
### CWEID:CWE-510 Trapdoor
title_zh:非传播性的恶意代码
A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.
### CWEID:CWE-511 Logic/Time Bomb
title_zh:具传播性的恶意代码（病毒或蠕虫）
The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.
### CWEID:CWE-506 Embedded Malicious Code
title_zh:逻辑/时间炸弹
The product contains code that appears to be malicious in nature.
### CWEID:CWE-512 Spyware
The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.