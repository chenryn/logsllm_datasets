a MAC tag T . This leaves a record R of length at
most 42 bytes, meaning that MAC veriﬁcation is then
performed on a message of length at most 55 bytes.
3) P4 ends with any other byte pattern: in this case, the
byte pattern does not correspond to valid padding.
Following the prescription in the TLS 1.1 and 1.2
RFCs, the plaintext is treated as if it contains no bytes
of padding, so the last 20 bytes are interpreted as a
MAC tag T , and the remaining 44 bytes of plaintext
are taken as the record R. MAC veriﬁcation is then
performed on a 57-byte message.
the MAC veriﬁcation will
In all cases, the MAC veriﬁcation will fail (with over-
whelming probability) and an error message produced. No-
tice that, in accordance with the discussion in Section II-A,
in Cases 1 and 3,
involve 5
evaluations of the compression function for SHA-1, while
Case 2 only requires 4 evaluations. Therefore, we can hope
to distinguish Case 2 from Cases 1 and 3 by timing the
appearance of the error message on the network. Here
the timing difference is that needed for a single SHA-
1 compression function evaluation (compared to 4 such
evaluations in our distinguishing attack). Notice that the
size of the header, 13 bytes, in conjunction with the MAC
tag size, 20 bytes, are critical in generating this distinctive
timing behaviour.
In Case 2, assuming that the plaintext has no special
structure, the most likely padding pattern to arise is the
one of length 2, namely 0x01||0x01, with all longer padding
patterns being roughly 256 times less likely. Thus, if the
attacker selects a mask Δ in such a way that he detects
Case 2 after submitting Catt(Δ) for decryption, then he can
infer that P4 ends with 0x01||0x01, and, using the equation
P4 = P ∗ ⊕ Δ, can now recover the last 2 bytes of P ∗.
(In fact, by repeating the attack with a mask Δ(cid:2) that is
modiﬁed from Δ in the third-to-last byte, the attacker can
easily separate the case of a length 2 padding pattern from
all longer patterns.)
The question remains: how does the attacker trigger Case
2, so that he can extract the last 2 bytes of P ∗? Recall that
the attacker has the freedom to select Δ. By injecting a
sequence of ciphertexts Catt(Δ) with values of Δ that vary
over all possible values in the last 2 bytes Δ14, Δ15, then
(in the worst case) after 216 trials, the attacker will surely
select a value for Δ such that Catt(Δ) triggers Case 2.
Once the last 2 bytes of P ∗ have been extracted, the
attacker can more efﬁciently recover the remaining bytes
of P ∗, working from right to left. This phase is essentially
identical to Vaudenay’s original padding oracle attack [25].
For example, to extract the third-to-last byte, the attacker
can use his new knowledge of the last two bytes of P ∗ to
now set Δ14, Δ15 so that P4 ends with 0x02||0x02. Then he
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:50 UTC from IEEE Xplore.  Restrictions apply. 
generates candidates Catt(Δ) as before, but modifying Δ13
only. After at most 28 trials, he will produce a ciphertext
which falls into case 2 again, which reveals he has managed
to set a value 0x02 in the third-to-last byte of P4 = P ∗⊕ Δ.
From this, he can recover P ∗
13. Recovery of each subsequent
byte in P ∗ requires at most 28 trials, giving a total of 14· 28
trials to complete the extraction of P ∗.
1) Practical considerations: In practice, for TLS, there
are two severe complications. Firstly, the TLS session is
destroyed as soon as the attacker submits his very ﬁrst attack
ciphertext. Secondly, the timing difference between the cases
is very small, and so likely to be hidden by network jitter
and other sources of timing difference.
The ﬁrst problem can be overcome for TLS by mounting
a multi-session attack, wherein we suppose that the same
plaintext is repeated in the same position over many sessions
(as in [5], for example). We have used masks Δ in such a
way that no further modiﬁcation to the attack is needed to
cater for this setting – of course blocks C(cid:2) and C∗ change
for each session.
The second problem can be overcome in the same multi-
session setting by iterating the attack many times for each
Δ value and then performing statistical processing of the
recorded times to estimate which value of Δ is most likely
to correspond to Case 2. In practice, we have found that a
basic percentile test (and even averaging) works well – see
Section V for further details. Assuming that L trials are used
for each Δ value, the attack as described consumes roughly
L · 216 sessions, with one ciphertext Catt(Δ) being tried in
each session.
2) More efﬁcient variants: The attack complexity can be
signiﬁcantly reduced by assuming that the language from
which plaintexts are drawn can be modelled using a ﬁnite-
length Markov chain. This is a fair assumption for natural
languages, as well as application-layer protocol messages
such as HTML, XML etc. This model can be used to
drive the selection of candidate plaintext bytes in order of
decreasing likelihood, and from this, determine the bytes of
Δ needed to test whether a guess for the plaintext bytes leads
to valid padding or not. Similar techniques were used in [5],
[10] in combination with sequential statistical techniques to
reduce the complexity of recovering low-entropy plaintexts.
Note that this approach does not work well if TLS’s optional
compression is used. Another possibility is that the plaintext
bytes are drawn from a reduced space of possibilities. For
example, in HTTP basic access authentication, the username
and password are Base64 encoded, meaning that each byte
of plaintext has only 64 possible values. Similar restrictions
often apply to the sensitive parts of HTTP cookies.
In a related attack scenario, if the attacker already knows
one of the last two bytes of P ∗, he can recover the other
byte with much lower complexity than our analysis so far
would suggest. This is then a plaintext recovery attack with
partially-known-plaintext. For example, suppose the attacker
knows the value of the byte P ∗
14. Then he sets the starting
14 ⊕ 0x01, so that when
value of Δ such that Δ14 = P ∗
Catt(Δ) is decrypted, the second-to-last byte of P4 already
equals 0x01. Then he iterates over the 28 possible values
for Δ15, eventually ﬁnding one such that P4 has its last two
bytes equal to 0x01||0x01, triggering Case 2. He can then
proceed to recover the rest of P ∗ with the same complexity
as before. Overall, this attack, which recovers 15 bytes of
plaintext with 1-out-of-2 of the last bytes of the target block
known, consumes only 15L · 28 sessions, where L is the
number of trials used for each Δ value in each byte position.
This can be further reduced by combining the two variants.
For example, for base64 encoded plaintext, only 15L · 26
sessions are needed to decrypt a block.
3) Combining Lucky 13 with the BEAST: A signiﬁcant
limitation of our attacks as described so far is their consump-
tion of many TLS sessions. This limitation can be overcome
by combining our attacks with techniques from the BEAST
attack [10] to target TLS-protected HTTP cookies.
Speciﬁcally, in the context of a web browser communicat-
ing with a web server over TLS, the user can be induced into
downloading malware into his browser from a rogue website.
This malware, perhaps implemented in Javascript, can then
initiate all
the TLS sessions need for our attack, with
the browser automatically appending the targetted HTTP
cookie to the browser’s initial HTTP request. Furthermore,
by adjusting the length of that initial HTTP request, the
malware can ensure that there is only one unknown byte of
HTTP cookie plaintext in each target ciphertext block. This
allows our remote attacker to carry out the variant attack
described immediately above. Assuming the targeted part of
the cookie is base64 encoded, the attack consumes L · 26
sessions per byte of HTTP cookie. As we will discuss in
more detail in Section V, we found that setting L = 27
yields reliable plaintext recovery in our experimental set-
up, giving us an attack that recovers HTTP cookies using
roughly 213 sessions per unknown byte of cookie.
C. Plaintext Recovery for Other MAC Algorithms
A critical feature of our attack above is the relationship
between the size of the header included in the MAC calcu-
lation (ﬁxed at h = 13 bytes), the MAC tag size t, and the
block size b. For example, if TLS happened to be designed
such that h = 12, then, with t = 20 and b = 16, a similar
case analysis as before shows that our ciphertext Catt(Δ)
would have the property of having faster MAC veriﬁcation
if P4 also ends with the single byte 0x00 (the valid padding
pattern of length 1). This would allow an improved 28 attack
against TLS with CBC-mode and HMAC-SHA-1. In some
sense, 13 is lucky, but 12 would have been luckier!
Similarly, we have (less efﬁcient) variants of our attacks
for HMAC-MD5 and HMAC-SHA-256, where the tag sizes
t are 16 and 32 bytes, respectively. In fact, because here
t is a multiple of b, the analysis is largely the same in
533
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:50 UTC from IEEE Xplore.  Restrictions apply. 
both cases, and we consider only HMAC-MD5 in detail.
This time Catt(Δ) is such that we fall into Case 2 (valid
padding with a message of size at most 55 bytes, giving
fast MAC veriﬁcation) only if P4 = P ∗ ⊕ Δ ends with
a valid padding of length 6 or more. With no additional
information on P ∗ the attacker would need (worst case) 248
attempts to construct the correct Δ so as to trigger this case;
detecting that he had done so would be more difﬁcult in
view of the large number of candidate Δ values. This is
not an attractive attack, especially in view of the practical
considerations for TLS mentioned above. On the other hand,
we do have attractive partially-known-plaintext attacks for
HMAC-MD5 and HMAC-SHA-256. For example, if any 5
out of the last 6 bytes of P ∗ are known, we can recover the
remaining 11 bytes using 11L · 28 sessions. The attack can
also be made more efﬁcient if the plaintext has low entropy,
by trying candidates for the last 6 bytes of P ∗ in order
of decreasing probability and then recovering the remaining
bytes of P ∗ once the right 6-byte candidate is found. This
would be an good option for password recovery, for example.
A similar analysis can be carried out for truncated MAC
algorithms, as per [11]. For example, for an 80-bit (10-byte)
MAC tag, if any 11 out of the last 12 bytes of P ∗ are known,
we can recover the remaining 5 bytes using 5L· 28 sessions.
Finally, we note that the “Lucky 13 + BEAST” attacks
work equally well, no matter what the MAC tag size is.
D. Applying the Attacks to DTLS
So far we have focussed on TLS. The changes needed to
handle DTLS are the same as for our distinguishing attack
in Section III: we can use the techniques of [1] to amplify
the timing differences and to emulate TLS’s error messages.
The ampliﬁcation capability reduces the attack complexity
dramatically: essentially, we can accurately test each Δ value
using just a few packet trains instead of requiring L trials.
There is one further critical difference that we wish to
emphasise: as already noted, DTLS does not treat errors
arising during decryption as being fatal. This means that the
entire attack against DTLS can be carried out in a single
session, that is, without requiring the same plaintext to be
repeated in the same position in the plaintext across multiple
sessions, and without waiting for the Handshake Protocol to
rerun for each session.
These differences brings our attack well within the bounds
of practicality for DTLS. This is particularly so if DTLS’s
optional checking of sequence numbers is disabled. Even if
this is not the case, the attacks are quite feasible in practice,
provided enough DTLS messages are available, or if the
upper layer protocol being protected by DTLS produces
replies to sent messages in a consistent manner. These issues
are discussed at greater length in [1] and the next section,
where we report on the successful implementation of our
attacks for the OpenSSL implementation of TLS and DTLS.
V. EXPERIMENTAL RESULTS FOR OPENSSL
A. Experimental Setup
We ran version 1.0.1 of OpenSSL on the client and the
server. In our laboratory set-up, a client, the attacker and the
targeted server are all connected to the same VLAN on a
100Mbps Ethernet switch. The targeted server was running
on a single core processor machine operating at 1.87 GHz
with 1 GByte of RAM, while the attacker was running on
a dual core processor machine operating at 3.4 GHz, with 2
GByte of RAM.
To simulate the (D)TLS client, we made use of
s_client, a generic tool that is available as part of the
OpenSSL distribution package. We modiﬁed s_client’s
source code to satisfy our testing requirements. We also
developed a basic Python script that calls s_client when
needed. Our attack code is written in C and is capable of
capturing, manipulating and injecting packets of choice into
the network.
In the case of TLS, the attacker captures the “targeted”
packet, manipulates it and then sends the crafted version to
the targeted server causing the TLS session to terminate.
This crafted packet forces the client and the targeted server
to lose TCP synchronization, causing delay in the TCP
connection shutdown. To speed up the TCP connection tear
down, the attacker sends spoofed RST packets to the client
and the targeted system upon detecting the TLS encrypted
alert message, forcing both systems to independently destroy
the underlying TCP structure associated with the terminated
TLS session.
All the timing values presented in the paper are based
on hardware cycles, which are speciﬁc to processor speed.
For example, 187 hardware cycles on our targeted server
operating at speed of 1.87 GHz translate to an absolute
timing of 100 ns. To count the hardware cycles, we made
use of an existing C library licensed under GNU GPL v34.
B. Statistical Analysis
The network timings we collect
in each experiment
are from skewed distribution(s) with long tails and many
outliers. However, we found that using basic statistical
techniques (medians and, more generally, percentiles) was
sufﬁcient to analyse our data.
C. Distinguishing Attack for OpenSSL TLS
Figure 2 shows the experimental distribution of timing
values for the TLS distinguishing attack described in Sec-
tion III. The ﬁgure indicates that, with enough samples, it
should be possible to distinguish encryptions of message M0
(consisting of 32 arbitrary bytes followed by 256 copies of
0xFF) from encryptions of message M1 (consisting of 287
arbitrary bytes followed by 0x00).
4code.google.com/p/fau-timer
534
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:51:50 UTC from IEEE Xplore.  Restrictions apply. 
0.00006
0.00005
0.00004
0.00003
0.00002
0.00001
y
t
i
l
i
b
a
b
o
r
P
0
1.50 (cid:2)106 1.51 (cid:2)106 1.52 (cid:2)106 1.53 (cid:2)106 1.54 (cid:2)106 1.55 (cid:2)106 1.56 (cid:2)106 1.57 (cid:2)106
Hardware Cycles Calculated by Attacker
s
e
l
c
y
C
e
r
a
w
d
r
a
H

r
e
v
r
e
S
n
o
d
e
t
a
l
u
c
l
a
C

14 000
13 800
13 600
13 400
13 200
13 000
12 800
12 600
0
(cid:3)
15
(cid:4) 0xFE
50
100
(cid:2)15
150
200
250
Figure 2. Distribution of timing values (outliers removed) for distinguish-
ing attack on OpenSSL TLS, showing faster processing time in the case of
M0 (in red) compared to M1 (in blue).
Figure 3. OpenSSL TLS median server timings (in hardware cycles) when
P ∗
14 = 0x01 and P ∗
15 = 0xFF. As expected, Δ15 = 0xFE leads to faster