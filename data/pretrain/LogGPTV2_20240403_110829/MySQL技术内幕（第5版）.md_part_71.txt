return;
print_stmt_error (stmt, "Could not execute SELEcT");
return;
(mysql_stmt_store_result(stmt)!=0)
结果集里的行数
(mysql_stmt_execute （stmt)!=0)
*mysql_stmt_store_result（）让行计数变得可用*/
（%.2f
my_datetime.minute,
my_datetime.day,
("%04d-%02d-%02d %02d:%02d:%02d\n",
my_datetime.second)
my_datetime.month,
￥）
"d
(unsigned long) mysql_stmt_num_rows (stmt));
my_int);
my_float);
(int)
无需设置任何 MYSQL_BIND 结构。但是我们并未摆脱困境。
my_str_length,(int) my_str_length, my_str);
/*释放结果集*/
7.8使用服务器端预处理语句
281
---
## Page 302
个样子：
数。如果我们从 mysql 客户端调用grade_event_stats（），那么这条语句看起来会像下面这
么这个存储过程会显示该次考试的分数，并在那两个OUT参数里返回考试的最低分数和最高分
句不能产生多个结果集，并且调用者不能访问返回的参数值。
语句来调用存储过程；可以访问OUT和INOUT类型过程参数的返回值。！
7.9
关函数，更多相关信息请参考附录G。
处理语句处理器。
联的所有内存了。
在每次取回之后，与参数结构相关联的变量将包含当前行的各个列值。
处就是，需要占用更多的客户端内存。
内存里。这么做的好处是，可以调用mysql_stmt_num_rows（)查出结果集里有多少个行。而坏
执行的步骤，即调用mysql_stmt_store_result（)取回整个结果集，并把它缓存在客户端的
然后执行该语句。
将忽略这些变量，因为我们已知道测试表不包含任何NULL值。但一般情况下，你应该检查它们。）
这些变量将被设置成具体值，用于表明取回的值是否为NULL。（对于本例，在取回行之后，程序
设置成某个unsigned long 变量的地址。在取回行时，这个变量将被设置成实际取回的字节数。
282
用于取回行的那个循环会反复调用mysql_stmt_fetch（），一直到它返回一个非零值为止。
预处理语句支持在MySQL5.5里得到了加强和改进，具体表现在：
前面对预处理语句接口和某些关键函数进行了概要介绍。客户端开发库还包含其他几个相
此时，select_rows（)会返回到调用函数，从而调用 mysql_stmt_close（）函数来释放预
在把所有行全部取回之后，便可以调用mysql_stmt_free_result（)来释放与结果集相关
至此，我们可以调用mysql_stmt_fetch（）来取回各个行了。这个程序演示了一个可以先
在设置好参数之后，需要调用mysql_stmt_bind_result（)把这个数组与语句绑定起来
mysql> cALL grade_event_stats(4, @p_min, @p_max);
此存储过程会接收一个IN参数和两个OUT参数。如果把某个考试事件 ID作为其参数，那
BEGIN
CREATE PROCEDURE grade_event_stats
出于演示的目的，假设有下面这样一个存储过程：
END;
使用预处理CALL支持
（5）对于字符串参数，把buffer_length 设置成应该取回的最大字节数，并且把length
(4）把整数参数的is_unsigned 成员设置成零。
(3）把每个参数的buffer成员指向这样一个变量：当取回行时，相应的列值会存入其中。
SELECT MIN(score),MAX(score)
-- store min/max event scores in ouT parameters
SELECT student_id, score
(IN p_event_id
INTO p_min,p_max;
FROM score
第7章用C语言编写MySQL程序
WHERE event_id =p_event_id
display scores for event
1 INT, OUT p_min INT, OUT p_max INT)
，此前，预处理CALL语
：可以使用预处理CALL
序
---
## Page 303
grade_event_stats（）函数的所有参数都是整数。
的参数值。参数设置肯定与存储过程所接收的参数个数和类型特定相关。为了简单一点，假设
送给mysql_stmt_prepare（）。对于cALL 而言，这些占位符便代表了那些要传递给存储过程
操作成功，它还会处理存储过程的结果：
功能，可以使用prepared_call来检查服务器的版本：
下的 prepared_call_setup.sql 文件：
prepared_call.c，在 sampdb 发行版的capi 目录里。为创建此存储程序，可以使用相同目录
static int exec_prepared_call (MYsQL_STMT 
预处理CALL语句与其他预处理语句很像。请把语句串与“？”占位符代表的数据值一起发
此程序接下来会初始化一个预处理语句处理器，并使用它来执行预处理CALL语句。如果
MYSQL_BIND params[3];
stmt=mysql_stmt_init （conn);
if (mysql_get_server_version (conn)  SELECT @p_min, @p_max;
print_error (NULL, "Could not initialize statement handler");
xewda|utwdo
/*初始化参数结构，并绑定到语句*/
mysql_stmt_close （stmt);
if（exec_prepared_call （stmt）==0）
exit (1);
student_id I score
￥
return（1）;
print_stmt_error (stmt, "Cannot prepare statement");
(mysql_stmt_prepare (stmt,
process_call_result
准备CALL语句*/
7
i；
W
2
20
20
9
"Prepared CALL requires MySQL 5.5.3 or higher");
1*参数缓冲区*/
(conn,stmt）;
"CALL grade_event_stats(?, ？,?)", 31))
*stmt)
，在连接服务器之后，为验证它具有此项
7.9使用预处理CALL支持
283
---
## Page 304
值。因此，如果结果为0，则返回第1步，继续获取下一个结果。
多的结果，则此函数会返回0。如果没有，则返回-1。如果有错误发生，
宣称每个结果集是如何产生的。）在这两种情况下，都需要获取结果集。
产生，也可能包含存储过程返回的那些参数值。这个连接处理器有一个包含标志的状态成员，
逻辑如下所示。
存储过程是否会产生某些声明或参数结果集，这段代码对此并未做任何假设。那个检索循环的
程的编写方法。无论前面是否有结果集，存储过程总是会返回那个最终状态包。
结果集区别开来，因为其最终列的个数为0。
包含最终的参数值，并且排列顺序与它们出现在过程定义中的顺序一致。
SHOW等。
丁用于区分这两种情况。（process_cal1_result（）只是把这个标志当作信息来用，通过它来
84
(3）通过调用mysql_stmt_next_result(），
（2）如果列数大于0，则表示有一个拥有很多个列的结果集。这个结果集可以由某个语句
process_call_result（）函数里有一个通用的循环结构，用于检索存储过程的结果。这个
必须对所有存在的CALL结果进行处理。
（3）最终状态包。其中并没有任何结果集与它关联在一起，因此你可以把它与语句或参数
（1）通过获得下一个结果的列数，
（2）如果这个存储过程有OUT或INOUT参数，那么还会有一个附加的单行结果集—其中
static void process_call_result (MYSQL *conn, MYSQL_STMT *stmt)
（1）在此存储过程中执行的语句，每一个都会产生一个结果集。这类语句包括 SELECT、
在执行CALL语句之后，接下来处理其结果，处理过程可分为以下3个部分。
int
int
return(0);
if (mysql_stmt_execute (stmt))
int_data[2]=
if (mysql_stmt_bind_param (stmt,params))
for（i=0;i0，则表示出错*/
if ((num_cols=mysql_stmt_field_count（stmt））>0)
print_stmt_error (stmt, "Error checking for next result");
否则，获取结果集。
else
1*声明结果集是包含参数还是数据集*/
break；/*有错误发生
printf ("Statement result set values:\n");
*
7.9使用预处理CALL支持
这里并
285
---
## Page 306
8.1Perl脚本的特点
点。关于该开发库的更多信息请参考第7章。
MySQL的C语言客户端开发库的基础上构建的，因此这种驱动程序也拥有这个开发库的一些特
助文档：
分时，对其进行查询。通过运行下面几条命令，或者访问 http://dbi.perl.org 即可获得帮
的方法和变量列表，请参考附录H。可把该附录当作参考手册，以便在需要用到DBI的某个部
例脚本）的指导说明。在该发行版的perlapi目录下能找到这些脚本。
些软件包，请参考附录A，其中，还有对如何获得sampdb发行版（它包含本章开发的各个示
Perl版本为5.8.1。除了安装MySQL的C语言客户端开发库和头文件以外，还必须安装Perl
目和美史联盟创建的表。
的对比），请参考第6章。
1.50。DBI1.50对Perl的版本的最低要求为5.6.0（首选5.6.1）。自DBI1.611起，要求的最低
用PerlDBI编写MySQL程序
在数据库驱动程序（DataBaseDriver，简写为DBD）层，针对MySQL的驱动程序都是在
基本上，本章只会对那些需要讨论的PerlDBI方法和变量进行介绍。想要了解更多综合性
尽管大部分材料都可应用于更早一点的版本，但这里还是要假定使用的最低DBI版本为
Perl脚本是文本文件，因此你可以用任何文本编辑器来创建它们。本章的所有Perl脚本都
本章讲到的各个示例将会用到示例数据库sampab，并且会用到那些在第1章为成绩考评项
6perldoc DBD::mysgl
告
perldoc DBI
章将对如何使用MySQL的PerIDBI接口进行介绍。这里并不会讨论DBI的工作原理
第8章
DBI::FAQ
---
## Page 307