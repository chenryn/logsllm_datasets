$$  
from pandas import DataFrame  
from _pickle import loads  
rv = plpy.execute('SELECT %s FROM %s WHERE id = %s;' % (plpy.quote_ident(model_column), plpy.quote_ident(model_table), model_id))  
model = loads(rv[0][model_column])  
ret = list(map(list, model.cluster_centers_))  
return ret  
$$ LANGUAGE plpython3u;  
```  
让我们从头开始：我们再次传递包含模型的表和保存二进制文件的列。输出由 cpickle 的加载函数读取（在这里您可以看到 plpython3u 查询的结果如何加载到 Python 中）。  
加载模型后，我们知道所有 kmeans 对象都有一个属性“cluster_centers_”，这是存储聚集点中心(质心)的位置。质心是每个组的平均向量，即每个组中每个变量的平均值。本质上，它们存储为 numpy 数组，但由于 plpython 无法处理 numpy 数组，我们需要将它们转换为列表的列表。这就是为什么返回的对象是列出每一行的输出，产生一个列表列表，其中每个子列表代表一个组的质心。  
这只是如何输出模型的某个特征的示例。您可以创建类似的函数来返回其他特征，甚至返回所有特征。  
我们来看看它返回了什么：  
```  
select get_kmeans_centroids('models','model',1);  
{{4.39355,1.43387,5.90161,2.74839}, {1.464,0.244,5.006,3.418}, {5.74211,2.07105,6.85,3.07368}}  
```  
大括号括起来的每个元素代表一个组(因为前面训练的时候指定了3个中心点, 所以这里返回的也是3个中心点)，值是其均值向量。  
7、做出预测  
现在我们有了一个模型，让我们用它来进行预测！在 kmeans 中，这意味着传递一个值数组（对应于每个变量）并获取它所属的组号。该功能与上一个非常相似：  
参数说明:  
- model_table: 模型表名称   
- model_column: 模型列二进制值   
- model_id: 模型ID    
- input_values: 输入向量  
```  
CREATE OR replace FUNCTION predict_kmeans(model_table text, model_column text, model_id int, input_values real[]) RETURNS int[] AS  
$$  
from _pickle import loads  
rv = plpy.execute('SELECT %s FROM %s WHERE id = %s;' % (plpy.quote_ident(model_column), plpy.quote_ident(model_table), model_id))  
model = loads(rv[0][model_column])  
ret = model.predict(input_values)  
return ret  
$$ LANGUAGE plpython3u;  
```  
与上一个函数相比，我们添加了一个输入参数 (input_values)，传递表示我们想要基于聚类获取组的案例的输入值（每个变量一个值）。  
我们不返回浮点数组，而是返回整数数组，因为我们正在讨论组索引。  
```  
select species,predict_kmeans('models','model',1,array[[petal_length,petal_width,sepal_length,sepal_width]]) from iris;  
```  
```  
     species     | predict_kmeans   
-----------------+----------------  
 Iris-setosa     | {0}  
 Iris-setosa     | {0}  
 Iris-setosa     | {0}  
 Iris-setosa     | {0}  
 Iris-setosa     | {0}  
 Iris-setosa     | {0}  
 Iris-setosa     | {0}  
 Iris-setosa     | {0}  
 Iris-setosa     | {0}  
 Iris-setosa     | {0}  
 ...  
 Iris-versicolor | {0}  
 Iris-versicolor | {0}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {0}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {0}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {0}  
 Iris-virginica  | {2}  
 Iris-virginica  | {0}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}  
 Iris-virginica  | {2}   
```  
正如您所看到的，相关群体与其所属物种密切相关。0,1,2代表了分类ID, 表示这个点和对应的质心最近.     
8、结论  
我们在本文中看到，您可以在不离开 PostgreSQL|PolarDB 的情况下训练和使用机器学习。但是，您需要具备 Python 知识才能做好一切准备。尽管如此，对于那些可能不知道如何使用 Python 或任何其他语言进行操作的人来说，这仍然是在 PostgreSQL|PolarDB 中制作完整的机器学习工具包的一个非常好的解决方案。  
#### 对照  
无.  
## 知识点    
python  
kmeans  
plpython  
## 思考     
结合大模型, 将文本、图像等可以转换为向量, PolarDB|PostgreSQL可以作为向量数据库存储向量.  使用本文提到的方法, 我们可以对向量进行无监督学习生成模型, 然后对新增数据再进行归类分析.   
- [《沉浸式学习PostgreSQL|PolarDB 17: 向量数据库, 通义大模型AI的外脑》](../202309/20230922_02.md)
- [《沉浸式学习PostgreSQL|PolarDB 16: 植入通义千问大模型+文本向量化模型, 让数据库具备AI能力》](../202309/20230914_01.md)
- [《沉浸式学习PostgreSQL|PolarDB 9: AI大模型+向量数据库, 提升AI通用机器人在专业领域的精准度, 完美诠释柏拉图提出的“知识是回忆而不是知觉”》](../202308/20230831_01.md)  
## 参考    
- https://pgxn.org/dist/kmeans/doc/kmeans.html
- https://github.com/umitanuki/kmeans-postgresql
- [《人分九等，数有阶梯 - PostgreSQL 阶品（颗粒）分析函数width_bucket, kmean应用》](../201707/20170715_01.md)    
- [《在PostgreSQL中如何生成测试kmean算法的数据》](../201606/20160614_04.md)    
- [《K-Means 数据聚集算法》](../201508/20150817_01.md)    
- https://www.cybertec-postgresql.com/en/machine-learning-in-postgresql-part-1-kmeans-clustering/  
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")