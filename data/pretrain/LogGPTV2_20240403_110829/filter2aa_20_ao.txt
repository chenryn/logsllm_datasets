你好，
  $('#name').text('
');
通过在 \、'、" 前插入 \，escape_js
 函数就能将输入值作为 JavaScript 字符串字面量进行转义。
这段代码看似安全无虞，但是当输入值中包含  时， 就会被当成 JavaScript 代码的结束符（下图）。
');
这段代码中有两处 
 ，script 元素会在遇到第一个 
 时结束。script 元素不考虑上下文，只要看到 
 就会立刻终结（图 4-25）。
                        ↑
         浏览器不会考虑JavaScript的语法，
         仅负责将中间
         的部分传送给JavaScript引擎处理。
图 4-25 浏览器识别 JavaScript
这时，攻击者就可以恶意利用这一特性，并输入以下值来实施 XSS 攻击。
alert(document.cookie)//
页面显示如下。
图 4-26 XSS 攻击成功
根据 HTML 的规格，script 元素中的数据不能出现 
调用例
  alert('');
生成的脚本
脚本解说
unicode_escape
 函数的功能为将输入字符串全部以 \uXXXX 的 UNICODE 形式进行转义
在 mb_convert_encoding
 中将输入字符串的字符编码转换为 UTF-16
在 bin2hex
 中将对象字符串转换为十六进制
使用正则表达式，每 4 个字节插入一个 \u
escape_js_string
 函数的功能为将字母与数字以外的字符转义为 \uXXXX 的形式
在 preg_replace_callback
 函数中，将字母和数字以外的字符串全部传给 unicode_escape
 函数处理
JavaScript 中引用定义在 script 元素外的参数的方法
为了避免动态生成 JavaScript，在 script 元素外部定义参数后再在 JavaScript 中引用该参数也是一个解决方案。不过，该方案的实施需要利用 hidden 参数。
下面展示了利用 hidden 参数的示例脚本。前提条件是内部字符编码为 UTF-8。
">
...
var familyname = document.getElementById('familyname').value;
//...
开头的 input 元素指定了 id="familyname"
 以使其能被引用。此外，根据属性值的转义规则，第 2 行在设值时使用了 htmlspecialchars
 进行转义并将其用双引号括了起来。
而 input 的值则在倒数第 2 行被 getElementById
 方法引用。
此方案的优点为，由于避开了 JavaScript 特有的繁琐问题，只需遵守少量规则就能防范 XSS，因此思路比较简单。而缺点就是定义 JavaScript 代码与参数的地方相隔较远，可能会使脚本的可读性降低。
读者在实际操作时，可以在综合考虑两种方案的特性后，根据实际情况做出抉择。
18
 为了方便读者理解，支持页面中收录的代码添加了在页面上显示查询字符串的处理。
DOM based XSS
除了上述的各种 XSS 之外，还有一种叫作“DOM based XSS”的 XSS。JavaScript 常用于客户端的显示处理，DOM based XSS 即潜藏于此处的安全隐患。
下面是含有 DOM based XSS 漏洞的简单的 HTML。
代码清单 /43/43-011.html
你好
这段 HTML 的目的是将查询字符串中 name=
 指定的姓名通过 JavaScript 显示在页面上。例如，使用 http://example.jp/43-011.html?name=YamadaURL 显示页面时，页面上就会显示“你好，Yamada”。
按照惯例，下面我们来看一下对这段 HTML 进行攻击的示例。使用如下 URL 打开网页时，页面显示如图 4-27 所示。
http://example.jp/43/43-011.html?name=
图 4-27 DOM based XSS 的结果
攻击者注入的 JavaScript 代码不会出现于服务器端生成的 HTML 中，因此这类 XSS 被称为“DOM based XSS”。现今使用 JavaScript 来显示页面的案例越来越多，而即便是部分显示使用 JavaScript 也必须要考虑其中是否会有 HTML 标签。
JavaScript 的标准函数中没有提供转义 HTML 的功能，因此这里我们使用 jQuery 这个风靡全球的 JavaScript 库来示范字符串的显示。使用 span 元素确定字符串的显示位置，然后向 id 指定的 DOM 中插入文本文字。这时可以使用 text
 方法自动进行转义操作。
代码清单 /43/43-011a.html
 ←──加载 jQuery
你好 
实施防范策略后的脚本运行结果如下图，能看到 < 等被转义后正确地显示了出来。
图 4-28 实施防范策略后脚本的显示结果
允许 HTML 标签或 CSS 时的对策
开发博客系统或 SNS 网站时，有时需要允许用户使用 HTML 标签或自定义 CSS（Cascading Style Sheet）。但是，这样会带来很大的 XSS 风险。
一旦允许输入 HTML 标签，用户就能够使用 script 元素或事件绑定函数等执行 JavaScript，同样，在 CSS 中使用 expression 功能 19
 也能执行 JavaScript，而问题是这些 JavaScript 有可能并不是开发者所设置的。
19
 这是微软的 Internet Explorer 中提供的扩充功能。IE8 的标准模式中禁用了此功能，但在其他模式中还可以使用。
为了避免此类 JavaScript 的执行，可以采取解析用户输入的 HTML，仅允许可以显示的元素的方法。但是 HTML 的语法结构相当复杂，此方法实施起来实属不易。
所以，开发允许用户输入 HTML 标签或 CSS 的网站时，最好的方法可能就是使用能够 解析 HTML 文本语法结构的第三方程序库。PHP 中能利用的程序库有 HTML Purifier（http://htmlpurifier.org/
 ）等。
参考：Perl 中转义 Unicode 的函数
以下为 Perl 中转义 Unicode 的函数范例。
#!/usr/bin/perl use strict;
use utf8;
use Encode qw(decode encode);
# ...
# 将输入值全部转义为 \uXXXX 形式
sub unicode_escape {
  my $u16 = encode('UTF-16BE', $_[0]);  # 转换为 UTF-16
  my $hex = unpack('H*', $u16);         # 转换为十六进制字符串
# 每隔 4 个字符插入一个 \u
  $hex =~ s/([0-9a-f]{4})/\\u\1/g;
  return $hex;
}
# 将字母和数字以外的字符转义为 \uXXXX 形式
sub escape_js_string {
  my ($s) = @_;