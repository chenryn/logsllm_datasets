the same number of neighbors. Consequently, local proper-
ties captured by the clustering coeﬃcient do not necessar-
ily mean much for graphs like CAN where only “friends of
friends” have common acquaintances while direct friends of
node x never know each other. This is illustrated in Figure
4 (right), where clustering coeﬃcient γ(x) is zero, but nodes
2, 3, 4 all link to the same “friend of a friend” node 5.
The concept of n-cycles applies to directed graphs as well;
however, it does not directly produce the clustering coeﬃ-
cient because of a stricter nature of directed cycles. These
diﬃculties lead us to generalize the framework of clustering
using expansion analysis below.
5.3 Graph Expansion
Examine Figure 4 (right), which shows how undirected
4-cycles contribute to a graph’s global clustering proper-
ties. Global clustering is a concept of “friends knowing each
other” generalized to “friends knowing each others’ friends”.
Although the previous discussion of cycles allows one to ac-
count for these cases, we seek a more generic and useful
deﬁnition of clustering that goes beyond n-cycles (n ≥ 3)
and has a simple closed-form analytical expression for all
three graphs.
We next study graph expansion, which determines how
quickly the graph ﬁnds “unknown” nodes. Consider graph
G = (V , E) and select some of its nodes into set S ⊂ V .
Deﬁne the set of all edges between S and the rest of the
graph V \S to be ∂S={(u, v): (u, v) ∈ E, u ∈ S, v ∈ V \S}.
∂S is called the edge boundary of S. Edge expansion i(S) is
deﬁned as the ratio of the size of ∂S to the size of S:
i(S) =
|∂S|
|S| .
(11)
It is easy to see the relationship of i(S) to clustering. Se-
lect S to be the neighborhood Γ(v) of some node v. There-
fore, |S| = k and the number of edges contained within S is
k2 −|∂S|, generically assuming a k-regular graph. Then the
clustering coeﬃcient of v is given by:
k2 − i(Γ(v))k
k − i(Γ(v))
k(k − 1)
=
k − 1
.
(12)
γ(v) =
k2 − |∂S|
k(k − 1)
=
eﬃcient in a k-regular graph implies smaller i(Γ(v)) as seen
in (12) and generally leads to weaker graphs.
Definition 1. Graph edge expansion (sometimes called
the isoperimetric number of the graph) i(G) is the minimum
of i(S) for all non-empty sets S ⊂ V,|S| ≤ |V |
2 .
Notice that by examining i(G), we no longer focus on local
clustering, but rather on global properties of the graph and
its resilience to edge failure over all possible sets S. Edge
expansion tells us how many edges link outside any set S;
however, it does not tell us if the outgoing edges link to
the same node multiple times. For example, in Figure 4
(right), there are 8 edges leaving neighborhood Γ(x), but
they link to only 4 unique nodes, which indicates a good
amount of path overlap. Edge expansion tells us the size of
the edge cut between Γ(x) and the rest of the graph, which is
a useful analysis tool for studying a graph’s resilience when
edges are expected to fail (i.e., 8 edges in the cut are better
than 4). In peer-to-peer systems, node failure is much more
common than edge failure, in which case regardless of how
many edges cross the cut, the strength of the neighborhood
is determined by the number of nodes on the other side of
∂S. Hence, from the resilience perspective of peer-to-peer
networks, it makes more sense to examine node expansion
of the graph as we deﬁne below.
Definition 2. Consider graph G = (V, E) and some sub-
set of nodes S ⊂ V . Deﬁne the node boundary of S to be
∂S = {v : (u, v) ∈ E, u ∈ S, v ∈ V \S}. Node expansion
h(G) of the graph is given by:
h(G) =
min
{S:|S|≤|V |/2}
(13)
|∂S|
|S| .
Both i(G) and h(G) are related to edge and node bisection
widths of the graph and generally are NP-complete prob-
lems. Furthermore, even after many years of research, the
exact expression of these metrics for de Bruijn graphs re-
mains unknown. Below, we limit our analysis to sets S that
are neighborhoods of a given node (i.e., balls centered at
the node) and study graph expansion that explains how well
each ball is connected to the rest of the graph. Note that
these balls do not necessarily represent the weakest sets S
of each graph and do not, in general, achieve the minimum
bound in (13). Derivation of better bounds on h(G) is the
topic of on-going research.
Recall that ball B(v,n) of radius n centered at node v
contains all nodes reachable from v in no more than n hops.
In other words: B(v,n)={u: d(v,u) ≤ n}.
It is easy to
notice that the boundary of a ball is simply ∂B(v,n)={u:
d(v,u) = n+1} and that our derivations in section 4 can be
applied to study expansion (and global clustering) of each
graph. Both logarithmic CAN and Chord have the same
expansion properties since their distributions of d(x,y) are
identical. Hence, from now on, we only consider Chord.
Lemma 9. Chord’s ball expansion hB(G) is asymptoti-
√
cally Θ(1/
log2 N).
This function slowly decays from 0.45 for N = 2,048 to
0.27 for N = 109. Contrast this result with that in de Bruijn
graphs below, which maintain constant connectivity hB(G)
for all ball sizes and all values of N .
Edge expansion determines the strength of the graph in
the presence of edge failure. Clearly, a larger clustering co-
Lemma 10. De Bruijn’s ball expansion hB(G) is no less
than k − 1.
De Bruijn graphs expand so quickly, they actually ap-
proach the maximum possible bound on hB(G) and keep
all balls B(v, n) connected to the rest of the graph through
at least (k − 1)|B(v, n)| external nodes.
In fact, this not
only explains the low diameter of de Bruijn graphs, but also
leads to two important results. First, clustering in de Bruijn
graphs is minimal at both local and global levels since ex-
ponential neighborhood expansion is preserved for all balls
smaller than the graph itself. Second, path overlap in the
graph is virtually non-existent due to little global cluster-
ing. This means that shortest parallel paths towards any
given destination are expected to be node-disjoint with high
probability.
In the next section, we study fault resilience of these
graphs and examine whether k-node-connectivity of each
graph can always be exploited using greedy routing.
6. RESILIENCE
6.1 Generic Methods
Classical failure analysis in peer-to-peer networks (e.g.,
[23], [40]) focused on analyzing the probability that a given
node x becomes disconnected under a p-percent node fail-
ure. This amounts to computing the probability that all k
neighbors of x fail simultaneously and leads to very small
individual failure probabilities pk for most practical net-
works. Also note that results derived using this method
hold for any k-regular graph, regardless of its internal struc-
ture. Clearly, this analysis is insuﬃcient to distinguish be-
tween all k-regular graphs since some of them may contain
“weak” parts that can partition the graph into several dis-
joint components while no single node is completely discon-
nected from its component.
Another approach often used in classical fault resilience
analysis is to examine k-node-connectivity of the graph in
question. Given our graph structures, we show below that
this metric does not lead to any signiﬁcant insight either.
Definition 3. A k-regular graph is k-node-connected if
there are k node-disjoint paths between any pair of nodes.
This implies that a k-node-connected graph can tolerate
the failure of any k−1 nodes without becoming disconnected
and that the diameter of the graph after any k − 1 nodes
have failed is at most D + 1. Both CAN and Chord are k-
node-connected3, while de Bruijn graphs are not due to sev-
eral “weak” nodes with self-loops. This classical form of de
Bruijn graphs has been shown to be (k−1)-node connected
[39]; however, we seek to achieve maximum fault tolerance,
which leads us to removing the loops and linking these k
“weak” nodes to each other. Consider node (h,h,. . . ,h),
h ∈ Σ, with a self-loop. A chain-linked de Bruijn graph
has directed links (h,h,. . . ,h) → (g,g,. . . ,g), for all h ∈ Σ
and g = (h + 1) mod k. Recent development in consecutive-
d graphs [9] also studied chain-linked de Bruijn graphs and
proved that they are k-node connected.
What we know so far from classical peer-to-peer network
analysis and maximum fault-tolerance metrics is that all
three graphs are similar in their resilience. Hence, we seek
3This can be shown for CAN by generating all possible or-
ders of traversing d-dimensional paths between any pair of
nodes. Chord’s connectivity is easily derived from the well-
known properties of hypercubes.
additional methods that can distinguish between the fault
tolerance oﬀered by each graph. One such metric is bisection
width [22], which is deﬁned as the smallest number of (pos-
sibly directed) edges between any two equal-size partitions
of the graph. Graph bisection width determines the diﬃ-
culty of splitting the graph into giant components by failing
individual edges. We next examine this metric in all three
graphs.
6.2 Bisection Width
Note that besides determining resilience, bisection width
of a graph often provides tight upper bounds on the achiev-
able capacity of the graph. Assume that each node sends
messages to random destinations at a certain ﬁxed rate.
This communication pattern generates N messages per time
unit. Each message is replicated µd times (on average) and
µd
each edge is expected to carry
k messages per
time unit. Note, however, that this analysis assumes that
the combined load is equally distributed between all edges.
There may be bottlenecks in which the load is signiﬁcantly
higher than the average and the resulting throughput ca-
pacity of the graph may be lower than the expected (mean)
value.
Nµd
Nk =
Recall that approximately half of all communication in
the graph is expected to cross the bisection cut. Thus, if
this part of the graph is narrow (contains only a few edges),
it will lead to congestion and inability of the graph to carry
its expected load. One example of graphs with unacceptably
small bisection width are trees, which are susceptible to both
easy disconnects and severe congestion near the root.
Lemma 11. Chord’s bisection width bw(G) is N .
Note that this value is double the bisection width of binary
hypercubes since Chord uses directed links while hypercubes
are undirected.
Lemma 12. Assuming the size of each dimension is even,
CAN’s bisection width bw(G) is 2N (d−1)/d.
Applying this result to logarithmic CAN (d = 1/2 log2 N ),
notice that its bisection width is N
2 . Furthermore, if we
view undirected links of logarithmic CAN as being composed
of two directed edges, its bisection width matches that of
Chord. Also note that CAN achieves its maximum bw (G)
when d = log3N and that all sub-logarithmic values of d (cid:9)
log2 N result in “weaker” graphs. This is another way of
showing that CAN with small ﬁxed values of d may not be
competitive to Chord in practical settings.
The bisection width of the butterﬂy is kN
2m [22], where m is
given by Lambert’s function W in (4). Asymptotically, this
2 logk N , although for small N it is slightly
bisection becomes
better. Finally, the exact value of bw (G) of de Bruijn graphs
is unknown and the best available upper and lower bounds
diﬀer by a factor of four [34]:
kN
kN
2 logk N
(1 − o(1)) ≤ bw(G) ≤ 2kN
logk N
(1 + o(1)).
(14)
Using the lower bound in (14), the bisection width of de
Bruijn graphs for k = log2N is larger than that in Chord
or CAN by a factor of 1/2 log2 log2 N (which is 2.2 for N =
106) and is generally no worse than that in the butterﬂy.
It is further conjectured that the actual bisection width of
de Bruijn graphs is at least 40% higher than the pessimistic
lower bound used in the above comparison [10].
In summary, larger values of bisection width in de Bruijn
graphs point towards higher resilience against graph parti-
tioning and lower congestion in the bisection cut in addition
to their optimal routing established earlier. Below, we ex-
amine several other resilience metrics that may lead to an
even better understanding of de Bruijn’s fault tolerance.
6.3 Path Overlap
So far, we have been omitting a great deal of simulation
results since most of the derived formulas in this paper were
exact. In this section, we examine several empirical metrics
and back our analysis of these metrics with simulations.
Deﬁne set P (x, y) to contain all vertices along some path
from x to y. Denote by Q(x,y) the set of all vertices in
P (x, y) except x and y: Q(x,y) = P (x,y)\{x∪ y}. A graph’s
k-node-connectivity means that for every pair of nodes (x,y),
there are exactly k pair-wise non-overlapping paths P1(x,y),
. . . , Pk(x,y): Qi(x,y) ∩ Qj(x,y) = ∅ for all i (cid:20)= j. Node-
disjoint paths are very attractive to peer-to-peer networks
as they provide independent backup routing options when
the main shortest path fails.
Now notice that even though all three graphs under study
have k node-disjoint paths for each pair (x,y), not all of these
paths can be found using greedy routing at each node. In
fact, in order to deterministically ﬁnd all k non-overlapping
paths between x and y in a generic graph, one needs to
ﬂood the entire graph using breadth-ﬁrst search or similar
techniques. Below we examine how well the routing rules in
each graph are able to ﬁnd non-overlapping paths and what
happens to the diameter of the graph when nodes along the
best path are failed.
For any pair of nodes (x,y), deﬁne Pi(x,y) to be the short-
est (according to the greedy routing rules of the correspond-
ing graph) path to y through x’s neighbor i. We are inter-
ested in the structure of these shortest paths, because when
the best neighbor towards y fails, the graph routes through
the second-best neighbor also trying to achieve the shortest
path to y. Hence, if these paths overlap and nodes com-
mon to multiple parallel paths fail, both the diameter and
connectivity may signiﬁcantly deteriorate.
Deﬁne T (x, y) to be the total number of vertices in all
shortest paths Pi(x,y) from x to y and U (x,y) to be the num-
ber of unique vertices in all such paths: T (x, y) = Σ|Pi(x,y)|
and U (x,y) = | ∪ Pi(x,y)|. Further deﬁne the average per-
centage U (G) of unique nodes in all parallel paths:
(cid:1)
(cid:1)
Finally, deﬁne path overlap J(G) to be 1 − U (G). We
demonstrate the performance of the graphs using the same
example of N = 1,024 for Chord and N = 1,000, k = 10
for de Bruijn since the two graphs are almost identical in
their size and node degree. In these graphs, path overlap
J(G) is 36% for Chord and only 3.7% for de Bruijn.
In
fact, for larger k, de Bruijn’s overlap J(G) monotonically
decays to zero inverse proportionally to the product of k and
µd (whereas in Chord, overlap J(G) actually increases for
higher k and N ). This decrease in de Bruijn graphs is easy
to explain – each set of k parallel paths between any pair of
nodes (x,y) contains kµd nodes on average, out of which only
one vertex is repeated in more than one path. The diﬀerence
in J(G) between Chord and de Bruijn is signiﬁcant, but not
U (G) =
x
(cid:1)
y
(cid:1)
x
y
U (x, y)
.
T (x, y)
(15)
m
a
r
g
o
t
s
h
i
0.6
0.5
0.4
0.3
0.2
0.1
0
1
2
3
4
5
6
7
8
9 10
m
a
r
g
o
t
s
i
h
1
0.8
0.6
0.4
0.2
0
1
2