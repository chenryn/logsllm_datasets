accomplished using a number of eﬃcient SNARK techniques
[GGP+13; BCT+14; BCS16; BCT+17]. In light of this, we
shall ﬁrst discuss the challenges that arise in achieving privacy.
A. Achieving privacy for a single arbitrary function
Zerocash [BCG+14] is a protocol that achieves privacy for
a speciﬁc functionality, namely, value transfers within a single
currency. Therefore, it is natural to consider what happens if
we extend Zerocash from this special case to the general case
of a single arbitrary function that is publicly known.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
949
Sketch of Zerocash. Money in Zerocash is represented via
coins. The commitment of a coin is published on the ledger
when the coin is created, and its serial number is published
when the coin is consumed. Each transaction on the ledger
attests that some “old” coins were consumed in order to
create some “new” coins: it contains the serial numbers of
the consumed coins, commitments of the created coins, and a
zero knowledge proof attesting that the serial numbers belong
to coins created in the past (without identifying which ones),
and that the commitments contain new coins of the same total
value. A transaction is private because it only reveals how
many coins were consumed and how many were created, but
no other information (each coin’s value and owner address
remain hidden). Also, revealing a coin’s serial number ensures
that a coin cannot be consumed more than once (the same
serial number would appear twice). In sum, data in Zerocash
corresponds to coin values, and state transitions are the single
invariant that monetary value is preserved.
Extending to an arbitrary function. One way to extend
Zerocash to a single arbitrary function Φ (known in advance
to everybody) is to think of a coin as a record that stores
some arbitrary data payload, rather than just some integer
value. The commitment of a record would then be published
on the ledger when the record is created, and its unique serial
number would be published when the record is consumed. A
transaction would then contain serial numbers of consumed
records, commitments of created records, and a proof attesting
that invoking the function Φ on (the payload of) the old records
produces (the payload of) the new records.
Data privacy holds because the ledger merely stores each
record’s commitment (and its serial number once consumed),
and transactions only reveal that some number of old records
were consumed in order to create some number of new records
in a way that is consistent with Φ. Function privacy also holds
but for trivial reasons: Φ is known in advance to everybody,
and every transaction is about computations of Φ.
Note that Zerocash is indeed a special case of the above: it
corresponds to ﬁxing Φ to the particular (and publicly known)
choice of a function Φ$ that governs value transfers within
a single currency. However the foregoing protocol supports
only a single hard-coded function Φ, while instead we want to
enable users to select their own functions, as we discuss next.
B. Diﬃculties with achieving privacy for user-deﬁned functions
We want to enable users to execute functions of their choice
concurrently on the same ledger without seeking permission
from anyone. That is, when preparing a transaction, a user
should be able to pick any function Φ of their choice for creating
new records by consuming some old records. If function privacy
is not a concern, then this is easy: just attach to the transaction
a zero-knowledge proof that Φ was correctly evaluated oﬄine.
However, because this approach reveals Φ, we cannot use it
because function privacy is a goal for us.
An approach that does achieve function privacy would be to
modify the sketch in Section II-A by ﬁxing a single function that
is universal, and then interpreting data payloads as user-deﬁned
functions that are provided as inputs. Indeed, zero knowledge
would ensure function privacy in this case. However merely
allowing users to deﬁne their own functions does not by itself
yield meaningful functionality, as we explain next.
The problem: malicious functions. A key challenge in this
setting is that malicious users could devise functions to attack
or disrupt other users’ functions and data, so that a particular
user would not know whether to trust records created by other
users; indeed, due to function privacy, a veriﬁer would not
know what functions were used to create those records. For a
concrete example, suppose that we wanted to realize the special
case of value transfers within a single currency (i.e., Zerocash).
One may believe that it would suﬃce to instruct users to pick
the function Φ$ (or similar). But this does not work: a user
receiving a record claiming to contain, say, 1 unit of currency
does not know if this record was created via the function Φ$
operating on prior records; a malicious user could have instead
used a diﬀerent function to create that record, for example, one
that illegally “mints” records that appear valid to Φ$, and thus
enables arbitrary inﬂation of the currency. More generally, the
lack of any enforced rules about how user-deﬁned functions
can interact precludes productive cooperation between users
that are mutually distrustful. We stress that this challenge arises
speciﬁcally due to the requirement that functions be private:
if the function that created (the commitment of) a record was
public knowledge, users could decide for themselves if records
they receive were generated by “good” functions.
One way to address the foregoing problem is to augment
records with a new attribute that identiﬁes the function that
“created” the record, and then impose the restriction that in
a valid transaction only records created by the same function
may participate. This new attribute is contained within a hiding
commitment and thus is never revealed publicly on the ledger
(just like a record’s payload); the zero knowledge proof is
tasked with ensuring that records participating in the same
transaction are all of the same “type”. This approach now
does suﬃce to realize value transfers within a single currency,
by letting users select the function Φ$. More generally, this
approach generalizes that in Section II-A, and can be viewed
as running multiple segregated “virtual ledgers” each with a
ﬁxed function. Function privacy holds because one cannot tell
if a transaction belongs to one virtual ledger or another.
The problem: functions cannot communicate. The limita-
tion of the above technique is that it forbids any “inter-process
communication” between diﬀerent functions, and so one cannot
realize even simple functionalities like transferring value
between diﬀerent currencies on the same ledger. It also rules
out more complex smart contract systems, as communication
between contracts is a key part of such systems. It is thus clear
that this crude “time sharing” of the ledger is too limiting.
III. Our system design
The approaches in Section II-B lie at opposite extremes:
unrestricted inter-process interaction prevents the secure con-
struction of even basic applications such as a single currency,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
950
while complete process segregation limits the ability to con-
struct complex applications that interact with with each other.
Balancing these extremes requires a shared execution environ-
ment: one can think of this as an operating system for a shared
ledger. This operating system manages user-deﬁned functions: it
provides process isolation, determines data ownership, handles
inter-process communication, and so on. Overall, processes
must be able to concurrently share a ledger, without violating
the integrity or conﬁdentiality of one another.
However, function privacy (one of our goals) dictates
that user-deﬁned functions are hidden, which means that an
operating system cannot be maintained publicly atop the ledger
(as in current smart contract systems) but, instead, must be part
of the statement proved in zero knowledge. This is unfortunate
because designing an operating system that governs interactions
across user-deﬁned functions within a zero knowledge proof
is not only a colossal design challenge but also entails many
arbitrary design choices that we should not have to take.
In light of the above, we choose to take the following
approach: we formulate a minimalist shared execution envi-
ronment that imposes simple, yet expressive, rules on how
records may interact, and enables programming applications in
the UTXO model (see Remark III.3 for details on privacy
in the UTXO model). Section III-A describes this shared
execution environment, which we call the “records nano-
kernel”. Section III-B then shows how to realise this nano-
kernel via a novel cryptographic primitive, decentralized private
computation schemes.
A. The records nano-kernel: a minimalist shared execution
environment
As stated above, our setting calls for a minimalist shared
execution environment, or “nano-kernel”, that enables users to
manage records containing data by programming two boolean
functions (or predicates) associated with each record. These
predicates control the two deﬁning moments in a record’s life,
namely creation (or “birth”) and consumption (or “death”), and
are hence called the record’s birth and death predicates. A user
can create and consume records in a transaction by satisfying
the predicates of those records. In more detail,
The records nano-kernel (RNK) is an execution envi-
ronment that operates over units of data called records. A
record contains a data payload, a birth predicate Φb, and
a death predicate Φd. Records are created and consumed
by valid transactions. These are transactions where
the death predicates of all consumed records and the
birth predicates of all created records are simultaneously
satisﬁed when given as input the transaction’s local data
(see Fig. 4), which includes: (a) every record’s contents
(such as its payload and the identity of its predicates);
(b) a piece of shared memory that is publicly revealed,
called transaction memorandum; (c) a piece of shared
memory that is kept hidden, called auxiliary input; and
(d) other construction speciﬁcs.
The foregoing deﬁnition enables predicates to see the contents
of the entire transaction and hence to individually decide if
the local data is valid according to its own logic. This in
turn enables predicates to communicate with each other in a
secure manner without interference from malicious predicates.
In more detail, a record r can protect itself from other records
that contain “bad” birth or death predicates the r’s predicates
could refuse to accept when they detect (from reading the local
data) that they are part of a transaction containing records
having bad predicates. At the same time, a record can interact
with other records in the same transaction when its predicates
decide to accept, thus providing the ﬂexibility that we seek.
We brieﬂy illustrate this via an example, user-deﬁned assets,
whereby one can use birth predicates to deﬁne and transact
with their own assets, and also use death predicates to enforce
custom access control policies over these assets.
Example III.1 (user-deﬁned assets). Consider records whose
payloads encode an asset identiﬁer id, the initial asset supply
v, and a value v. Fix the birth predicate in all such records
to be a mint-or-conserve function MoC that is responsible for
creating the initial supply of a new asset, and then subsequently
conserving the value of the asset across all transactions. In
more detail, MoC can be invoked in one of two modes. In mint
mode, when given as input a desired initial supply v, MoC
deterministically derives a fresh unique identiﬁer id for a new
asset and stores (id, v, v = v) in a genesis record. Later on,
MoC can be invoked in conserve mode, where it inspects all
records in a transaction having birth predicate equal to MoC
and whose asset identiﬁers equal the identiﬁer of the current
record, and ensures that these records conserve asset values.
Users can program death predicates of such records to
enforce conditions on how assets can be consumed, e.g.,
by realizing conditional exchanges with other counter-parties.
Suppose that Alice wishes to exchange 100 units of an asset
id1 for 50 units of another asset id2, but does not have a
counter-party for the exchange. She creates a record r with 100
units of id1 whose death predicate enforces that any transaction
consuming r must also create another record, consumable by
Alice, with 50 units of id2. She then publishes out of band
information about r, and anyone can subsequently claim it by
creating a transaction doing the exchange.
Since death predicates can be arbitrary, many diﬀerent
access policies can also be realized, e.g., to enforce that a
transaction redeeming a record (a) must be authorized by two
of three public keys, or (b) becomes valid only after a given
amount of time, or (c) must reveal the pre-image of a hash.
One can generalize this basic example to show how the RNK
can realize smart contract systems in which the transaction
creator knows both the contract code being executed, as well
as the (public and secret) state of the contract. At a high level,
these contracts can be executed within a single transaction, or
across multiple transactions, by storing suitable intermediate
state/message data in record payloads, or by publishing that
data in transaction memoranda (as plaintext or ciphertext as
needed). We discuss in more detail below.
Example III.2 (smart contracts with caller-known state). At
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
951
the highest level, smart contract systems operate over a set of
individual contracts, each of which consists of a function (or
collection of functions), some state variables, and some form
of address that serves to uniquely identify the contract. The
contract address ensures that the same code/functions can be
deployed multiple times by diﬀerent individuals, without two
contracts inadvertently sharing state.4 A standard feature of
smart contract systems is that a contract can communicate with
other contracts: that is, a contract can invoke a second smart
contract as a subroutine, provided that the second contract
provides an interface to allow this behavior. In our setting, we
consider contracts in which the caller knows at least part of
the state of each contract.
In this setting, one can use the records nano-kernel to
realize basic smart contracts as follows. Each contract can be
implemented as a function Φsc. The contract’s state variables
can be stored in one or more records such that each record
ri is labeled with Φsc as the birth and death predicate. Using
this labeling, Φsc (via the RNK) can enforce that only it can
update its state variables, thus fulﬁlling one requirement of a
secure contract. Of course, while this serves to prevent other
functions from updating the contract’s state, it does not address
the situation where multiple users wish to deploy diﬀerent
instances of the same function Φsc, each with isolated state.
Fortunately (and validating our argument that the RNK realizes
the minimal requirements needed for such a system), addressing
this problem does not require changes to the RNK. Instead,
one can devise the function Φsc so that it reasons over a
unique contract address identiﬁer id, which is recorded within
the payload of every record.5 The function Φsc can achieve
contract state isolation by enforcing that each input and output
state record considered by single execution of Φsc shares the
same contract address.
To realize “inter-contract calls” between two functions Φsc1
and Φsc2, one can use “ephemeral” records that communicate
between the two functions. For example, if Φsc1 wishes to call
Φsc2, the caller may construct a record re that contains the
“arguments” to the called function Φsc2, as well as the result
of the function call. A transaction would then show that both
Φsc1 and Φsc2 are satisﬁed.
The above example outlines how to implement a general
smart contract system atop the RNK. We leave to future work
the task of developing this outline into a full-ﬂedged smart
contract framework, and instead focus on constructing a scheme
that implements the RNK, and on illustrating how to directly
program the RNK to construct speciﬁc applications such as
private user-deﬁned assets and private decentralized asset
exchanges. We discuss these applications in detail in Section V.
4In concrete implementations such as Ethereum [Woo17], contract identiﬁ-
cation is accomplished through unique contract addresses, each of which can
be bound to a possibly non-unique codeHash that identiﬁes the code of the
program implementing the contract.
5This identiﬁer can be generated in a manner similar to the asset identiﬁer
in Example III.1.
Remark III.3 (working in the UTXO model). In the records
nano-kernel, applications update their state by consuming
records containing the old state, and producing new records
that contain the updated state. This programming model is
popularly known as the “unspent transaction output” (UTXO)
model. This is in contrast to the “account-based” model which
is used by many other smart contract systems [Goo14; Woo17;
EOS18]. At present, it is not known how to eﬃciently achieve
strong privacy properties in this model even for the simple
case of privacy-preserving payments among any number of
users, as we explain below.
In the account-based model, application state is stored in a
persistent location associated with the application’s account, and
updates to this state are applied in-place. A smart contract that
implements a currency in this model would store user balances
in a persistent table T that maps user account identiﬁers to
user balances. Transactions from a user A to another user B
would then decrement A’s balance in T and increment B’s
balance by a corresponding amount. A straightforward way to
make this contract data-private (i.e., to hide the transaction
value and the identities of A and B) would be to replace
the user balances in T with hiding commitments to these
balances; transactions would then update these commitments
instead of directly updating the balances. However, while this
hides transaction values, it does not hide user identities; to
further hide these, every transaction would have to update all
commitments in T , which entails a cost that grows linearly
with the number of users. This approach is taken by zkLedger
[NVV18], which enables private payments between a small
number of known users (among other things).
Even worse, achieving function privacy when running
multiple applications in such a system would require each
transaction to hide which application’s data was being updated,
which means that the transaction would have to update the
data of all applications at once, again severely harming the
eﬃciency of the system.
In sum, it is unclear how to eﬃciently achieve strong data and
function privacy in the account-based model when users can
freely join and leave the system at any time. On the other hand,
we show in this paper that these properties can be achieved in
the UTXO model at a modest cost.
B. Decentralized private computation
A new cryptographic primitive. To realize a ledger-based
system that supports privacy-preserving computations in the
records nano-kernel, we introduce a new cryptographic primi-
tive called decentralized private computation (DPC) schemes.
Fig. 1 provides an overview of their interface; see the full
version for a formal deﬁnition, including the ideal functionality
that we use to express security.
Below we describe only a high-level sketch of our construc-
tion of a DPC scheme, and provide the details in Appendix B.
We take Zerocash [BCG+14] as a starting point, and then
extend the protocol to support the records nano-kernel and
also to facilitate proving security in the simulation paradigm
relative to an ideal functionality (rather than via a collection