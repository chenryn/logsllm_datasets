所制作出来的比萨一定定义
pizza.box();
了这些方法。
PDI
onderPixxa(）方法得到一个比萨，但不知
遂它实际的具体类是什么。
你现在的位置
127
---
## Page 164
比萨类
刚刚忽略了一件事：比萨本身！
如果没有比萨可出售，我们的比萨店开得再多
也不行。现在让我们来实现比萨：
从一个抽象比萨类开始，所有
的具体比萨都必须派生自这个
public abstract class Pizza {
每个比萨都具有名称、面团类型、
String name;
警科类型、一套佐科。
String dough;
String sauce;
ArrayList toppings = new ArrayList ();
此抽象类提供了某些默认的
void prepare (){
System.out.println ("Preparing " + name);
基本做法，用来进行烘博、
System.out.println ("Tossing dough.") ;
切件、装盒。
System.out.println("Adding toppings: ");
for (int i = 0;i < toppings.size (); i++)(
System.out.println ("
"+ toppings.get (i)) ;
准务工作需要以特定的
顺序进行，有一遵串的
步。
void bake(){
System.out.println("Bake for 25 minutes at 350");
/
void cut(){
System.out.println("Cutting the pizza into diagonal slices)
void box(){
System.out.println("Place pizza in official PizzaStore box");
public String getName ()(
return name;
别忘了，这里的代码并没有提供import和packase语
句。如果想要完整的代码，可参考xxxv页记载的
URL，到wickedlysmazt网站取得。
128
第4章
---
## Page 165
工厂模式
现在我们需要一些具体子类来定义纽约和芝加哥风味
的芝士比萨，怎么样？
组约比萨有自己的大蒜番茄
public class NYStyleCheesePizza extends Pizza {
警（Matinaza）和薄料。
public NYStyleCheesePizza () (
name = "NY Style Sauce and Cheese Pizza";
dough ="Thin Crust Dough";
sauce = "Marinara Sauce";
toppings.add("Grated Reggiano Cheese") ;
上面覆盖的是意大利
zessiano高级干璐！
芝如哥比萨使用小番茄作为
琴料，并使用厚饼。
public class ChicagoStyleCheesePizza extends Pizza {
public ChicagoStyleCheesePizza() (
name = "Chicago Style Deep Dish Cheese Pizza";
dough ="Extra Thick Crust Dough";
芝加哥风味的深盘比
toppings.add("Shredded Mozzarella Cheese");
萨使用许多moxxarella
（意大利白干酪）！
void cut(){
System.out.println("Cutting the pizza into square slices");
这个延加哥风味比萨覆盖了cut（）方法，
将比萨切成正方形。
你现在的位置
129
---
## Page 166
做一些比萨
你已经等得够久了，来吃些比萨吧！
public class PizzaTestDrive {
首无建立两个不同的店。
public static void main(String[] args){
然后用一个店帮
PizzaStore nyStore = new NYPizzaStore ();
PizzaStore chicagoStore = new ChicagoPizzaStore ();
Ethax下订单
Pizza pizza = nyStore,orderPizza("cheese");
(u\ +()web zzd +  paopxo ao)uuxd*no*ws
F
这个是3oel的行单。
&java PizzaTestDrive
Preparing NY Style Sauce and Cheese Pizza
Tossing dough...
Adding sauce...
Adding toppings:
Grated Regiano cheese
Bake for 25 minutes at 350
Cutting the pizza into diagonal slices
两个比萨都准务好了，佐
Place pizza in official PizzaStore box
科都加上了、烘储究成了
Ethan ordered a NY Style Sauce and Cheese Pizza
切片装盒了。
Preparing Chicago Style Deep Dish Cheese Pizza
超类从来不管细节。通过
Tossing dough..
Adding sauce
实例化正确的比萨类，子
Adding toppings:
类会自行照科这一切。
Shredded Mozzarella Cheese
Bake for 25 minutes at350
Cutting the pizza into square slices
Place pizza in official PizzaStore box
Joel ordereda Chicago Style Deep Dish Cheese Pizza
130
第4章
---
## Page 167
工厂模式
认识工厂方法模式的时刻终于到了
所有工厂模式都用来封装对象的创建。工厂方法模式（FactoryMethodPattern）通过让子
类决定该创建的对象是什么，来达到将对象创建的过程封装的目的。让我们来看看这些
类图，以了解有哪些组成元素：
创建者（Creator）类
这是抽象创建者类：它定
创建者通常金包含依赖于抽象产品的
义了一个抽象的工厂方法，
代码，而这些抽象产品由子类制造。
让子类实现此方法制造产
创建者不需要真的知道在制造哪种具
品。
PizzaStore
体户品。
crestePizza(
ortderPizza()
因为每个加显店都有自己的
NYPizzaStore
ChicagoPizzaStore
PixxaStore子类，所w可以利
cveatePixxa(）方法正是工厂方
()ezz)g0(e90
createPizza()
用实现createPizxa（）创）建自己
法，用来制通产品。
风味的比萨。
能够产生产品的类称为具
体创建者。
产品类
I厂生户户品。对PixxaStore来
说，产品就是Pixxa
Pizza
这些是具体的产品，所
有店里能实际制造的比
萨都在这里。
NYStyleCheesePizza
NYStylePepperoniPizza
ChicagoStylePepperoniPtzza
PDG
NYStyleClamPizza
NYStyleVeggiePizza
ChicagoStyleVegglePizza
你现在的位置
131
---
## Page 168
创建者和产品
另一个观点：平行的类层级
我们已经看到，将一个orderPizza()方法和一个工厂方法联合起来，就可以成为
一个框架。除此之外，工厂方法将生产知识封装进各个创建者，这样的做法，
也可以被视为是一个框架。
让我们来看看这两个平行的类层级，并认清它们的关系：
请注意这两个类层级为
什么是平行的：因为它
们都有抽象类，而抽象
类都有许多具体的子类
产品类
创建者类
每个子类都有自己特定
的实现。
Pizza
PlzzaStore
createPizza()
orderPiza(
ChicagoStyleCheesePizza
NYPizzaStore
NYStylePepperoniPizz
ChlcagoStylePepperoniPzza
crestePizza()
NYStyleClamPizza
ChicagoStyleClamPizza
NYStyleVeggiePizza
ChicagoStyleVegglePizza
所封装
NYPixxaStove所封装的知识是
关于如何制作组约风味的比
的知识是美于如何制作
芝加哥风味的比萨。
静。
PDG
工厂方法就是封装这种知识的关键所在。
132
第4章
---
## Page 169
工厂模式
设计谜题
我们需要另一种比萨来符合那些疯狂加州人的需求（当然，这里的疯狂是指好
的那一方面）。请绘制出另一组平行的类，把加州区域纳人PizzaStore中。
PizzaStore
creatsPizze8
orderPizza(]
你的图函在这里.
NYPizzaStore
ChicagoPizzaStore
crealePlizza()
eatePizza()
NYStyleCheesePizza
NYStylePepperoniPizza
ChicagoStylePepperoniPizzx
NYStyleClamPizza
ChicagoStyleClamPizza
NYStyleVegglePizza
ChicagoStyleVeggiePizza
好了，发挥你的想象力，找出五个“最奇特”的东西加人到比萨中。然后
你就可以准备到加州去开比萨店了！
PDG
你现在的位置
133
---
## Page 170
定义工厂方法模式
定义工厂方法模式
下面是工厂方法模式的正式定义：
工厂方法模式定义了一个创建对象的接口，但由子类
决定要实例化的类是哪一个。工厂方法让类把实例化推迟
到子类。
工厂方法模式能够封装具体类型的实例化。看看下面的类图，抽象的Creator提供了一
个创建对象的方法的接口，也称为“工厂方法”。在抽象的Creator中，任何其他实现
的方法，都可能使用到这个工厂方法所制造出来的产品，但只有子类真正实现这个工
决
厂方法并创建产品。
你可以问他们，
如同在正式定义中所说的，常常听到其他开发人员说：工厂方法让子类决定要实例化
定”是什么意思。我
的类是哪一个。希望不要理解错误，所谓的“决定”，并不是指模式允许子类本身在
敢打储，你比他们更
运行时做决定，而是指在编写创建者类时，不需要知道实际创建的产品是哪一个。选
清楚！
择了使用哪个子类，自然就决定了实际创建的产品是什么。
个
Creator是一个类，它实现了所有
操纵产品的方法，但不实现工厂
方法。
Product
Creator
Creator所有的子类都
所有的产品必须实现这
factoryMethod(
anOperafion()
必须实现这个抽象的
个共同的接口，这样一
factoryMethod（）方法。
来，使用这些产品的类
就可以引用这个接口，
而不是具体类。
ConcteteCreator实现了
ConcreteProduct
ConcreteCreator
factoryMethodO.以实际制进
factoryMethod()
出产品。
K
ConcreteCteaton负责创建一个或多个
具体产品.只有ConcteteCreatot类知
道如何创建这些产品。
134第4章
---
## Page 171
工厂模式
方法模式有什么优点？
法”。它可以根据传入的参数创建不同的对象。然而，
工厂经常只产生一种对象，不需要参数化。模式的这两
种形式都是有效的。
模式依然很有用，因为它帮助我们将产品的“实
现”从“使用”中解耦，如果增加产品或者改变产品
利用字符串传入参数化的类型，似乎有点
的实现，Creator并不会受到影响（因为Creator与任何
危险，万一把Clam（蛤）英文拼错，成了Calm（平
ConcreteProduct之间都不是紧耦合）。
静），要求供应“CalmPizza”，怎么办？
合：说得很对，这样的情形会造成所谓的“运
创建的，这样的说法是否正确？看起来倒是很像。
行时错误”。有几个其他更复杂的技巧可以避开这个麻
烦，在编译时期就将参数上的错误批出来。比方说，你
合：他们很类似，但用法不同。虽每个具体
可以创建代表参数类型的对象和使用静态常量或者Java
商店的实现看起来都很像是SimplePizza-Factory，但
5所支持的enum。
是别忘了，这里的具体商店是扩展自一个类，此类有
问：
一个抽象的方法crcatePizza（）。由每个商店自行负责
对于简单工厂和工厂方法之间的差异，我依
createPizza(方法的行为。在简单工厂中，工厂是另一个
然感到困惑。他们看起来很类似，差别在于，在工厂方
由Pizzasfore使用的对象。
法中，返回比萨的类是子类。能解释一下吗？
问：
：子类的确看起来很像简单工厂。简单工厂把
全部的事情、在一个地方都处理完了，然而工厂方法却
是创建一个框架，让子类决定要如何实现。比方说，在
些具体的产品，这么一来，即使创建者没有任何子类，
工厂方法中、orderPizza(）方法提供了一般的框架，以便
依然可以创建产品。
创建比萨，orderPizza（）方法依赖工厂方法创建具体类，
并制造出实际的比萨。可通过继承PizzaStore类，决定
实际制造出的比萨是什么。简单工厂的做法，可以将对
象的创建封装起来，但是简单工厂不具备工厂方法的弹
比萨。是否所有的具体创建者都必须如此？能不能只创
性，因为简单工厂不能变更正在创建的产品。
建一种比萨？
你现在的位置，135
---
## Page 172
大师与门徒
大师与徒
大师：蚱，告诉我训练进行得如何了？
门徒：大师，我已经更进一步研究了“封装变化”。
大师：继续说..
门徒：我已经学习到，可以将创建对象的代码封装起来。实例化具体类的代码，
很可能在以后经常需要变化。我学到一个称为“工厂”的技巧，可以封装实例
化的行为。
大师：那么这些所谓的“工厂”究竞能带来什么好处？
门徒：有许多好处。将创建对象的代码集中在一个对象或方法中，可以避免代
码中的重复，并且更方便以后的维护。这也意味着客户在实例化对象时，只会
依赖于接口，而不是具体类。我在学习中发现，这可以帮助我针对接口编程，
而不针对实现编程。这让代码更具有弹性，可以应对未来的扩展。
大师：很好，蚱，你的O0直觉正在增强。今天对师父可有问题要问吗？
门徒：大师，我知道封装起创建对象的代码，就可以对抽象编码，将客户代
码和真实的实现解耦。然而在我的工厂代码中，不可避免的，仍然必须使用
具体类来实例化真正的对象。我这不是“蒙着眼睛骗自己”吗？（译注：原文
pullingwoolovermyowneyes，作者在下面大师的回答中，将引l用此句作双关
语，因此如此翻译。其实，pullwooloversomeone'seyes原意为“骗人”）。
大师：蚱呀！对象的创建是现实的，如果不创建任何对象，就无法创建任何
Java程序。然而，利用这个现实的知识，可将这些创建对象的代码用栅栏围起
来，就像你把所有的羊毛堆到眼前一样，一旦围起来后，就可以保护这些创建
对象的代码。如果让创建对象的代码到处乱跑，那就无法收集到“羊毛”，你
说是吧？
门徒：大师，我已经认识到真理。