滴水逆向课程笔记  –  Win32
Win32课程介绍  –  1
1 Win32课程介绍
很多人对Win32的认识是错误的，他们认为Win32就是画界面，都已经学MFC了还学什么Win32？
Win32不是用来画界面的，如果你以后要在Windows写好程序，是必须要学Win32的；摆正学习态度。
滴水逆向课程笔记  –  Win32
字符编码  –  2
2 字符编码
我们会经常接触到各种各样的字符编码，本章节就来讲解一下常见的编码。
2.1 原始的ASCII编码
计算机是由美国人发明的，所以一开始设计编码的时候只会考虑到自身的元素，采用ASCII编码完全可以满足其
需求，但是计算机普及之后，很多国家的文字是象形文字，所以我们使用ASCII编码是无法满足需求的。
2.2 ASCII编码的拓展：GB2312或GB2312-80
由于ASCII编码无法满足需求，所以在其基础上进行扩展，大家都知道ASCII编码只有0-127，用十六进制表示是
0x00-0x7F，而之后的0x80-0xFF在标准的ASCII编码中是不存在的，所以就出现了我们所说的ASCII编码的扩展。
滴水逆向课程笔记  –  Win32
字符编码  –  3
但是这样能满足中文、韩文这种象形文字吗？其实并不可以，如上这张表实际上使用频率很低，而这时候
GB2312编码（该编码与GBK没有什么本质区别，无非就是收录的汉字和图形符号的区别：GB2312标准共收录
6763个汉字，GBK共收入21886个汉字和图形符号）考虑到这个因素就占用了这张表，那么是怎么占用的呢？
其本质就是创建两张如上图所示的表，然后进行拼接，两个字节加起来就组成一个新的中文文字。
例如：中国的“中”这个字，就是0xD0和0xD6拼接起来的。这种编码是否存在问题？这是必然的，我们已经知道
了该编码的设计原理，假设我们将“中国”这两个字发给国外的朋友，他的电脑上并没有该编码表，所以解析出
来的则不会是汉字，而会出现大家所熟知的“乱码”。
2.3 Unicode编码
为了解决ASCII的缺陷，Unicode编码就诞生了，那么Unicode是如何解决这一问题的呢？
其实很简单，Unicode编码创建了一张包含世界上所有文字的编码表，只要世界上存在的文字符号，都会赋予
一个唯一的编码。
Unicode编码的范围是：0x0-0x10FFFF，其可以容纳100多万个符号，但是Unicode本身也存在问题，因为
Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何去存储。
假设中这个字以Unicode方式表示占2个字节，而国这个字却占4个，这个时候你该如何去存储？
2.4 Unicode存储的实现方式
2.4.1 UTF-16
UTF-16/UTF-8是Unicode存储的实现方式；UTF-16编码是以16个无符号整数位单位，注意是16位为一个单位，
但不表示一个字符就只有16位，具体的要看字符的Unicode编码所在范围，有可能是2字节，有可能是4字节，
现在机器上的Unicode编码一般指的就是UTF-16。
滴水逆向课程笔记  –  Win32
字符编码  –  4
我们举个例子（虚构）：
中（Unicode编码）：0x1234
国（Unicode编码）：0x12345
UTF-16存储的时候，“中”这个字肯定是存储的0x1234，但是“国”这个字就不一样， 我们知道UTF-16是16位（2
字节）为一个单位，所以国这个字拆下来存储应该是0x00 0x01 0x23 0x45。
UTF-16的优点一看便知：计算、拆分、解析非常方便，2个字节为一个单位，一个一个来。
UTF-16是否是最优解呢？其实不然，我们通过如上的例子中可以看到一个很明显的缺点，那就是UTF-16会存在
浪费空间的情况，因为其16位（2字节）为一个单位，它需要字节对齐，例如字母A只需要一个字节就可以表
示，而使用UTF-16时就会变成2个字节，所以很浪费，而这时候UTF-8横空出世。（UTF-16在本地存储是没有
啥问题的，顶多就是浪费一点硬盘空间，但是如果在网络中传输，那就太过于浪费了）
2.4.2 UTF-8
UTF-8称之为可变长存储方案，其存储根据字符大小来分配，例如字母A就分配一个字节，汉字“中”就分配两个
字节。
优点：节省空间；缺点：解析很麻烦。
UTF-8存储的方式是有对应表的：
例如字母A，在0x000000 - 0x00007F范围之间，则采用0XXXXXX的方式进行存储，也就是按照一个字节的方式来
不会改变什么，而汉字”中“则不一样了。
中（Unicode编码）：0x4E 0x2D，它属于0x000800 - 0x00FFFF范围之间。
0x4E 0x2D = 0100 1110 0010 1101，其以UTF-8的方式存储就是1110 (0100) 10(11 1000) 10(10 1101)，括号包裹起来
的就是汉字“中”的Unicode编码。
最后一个问题，假设我们把UTF-8的文本格式发给对方，那对方如果按照UTF-16的方式去解析该怎么办？如何
让对方只采用UTF-8的方式去解析呢？
2.5 BOM（Byte Order Mark）
BOM中文为字节顺序标记，其就是用来插入到文本文件起始位置开头的，用于识别Unicode文件的编码类型。
对应关系如下：
滴水逆向课程笔记  –  Win32
C语言中的宽字符  –  5
3 C语言中的宽字符
本章主要是讲解在C语言中如何使用上一章所述的编码格式表示字符串。
ASCII码：char strBuff[] = "中国";
Unicode编码（UTF-16）：wchar_t strBuff[] = L"中国"; // 这里需要在双引号之前加上L是因为如果你不加的话，
编译器会默认使用当前文件的编码格式去存储，所以我们需要加上。（注意使用这个的时候需要包含stdio.h这
个头文件）
Unicode编码这种表现形式实际上就是宽字符，所以在提起宽字符的时候我们就应该想到这种方式。
ASCII编码和Unicode编码在内存中的存储方式不一样，所以我们使用相关函数的时候也要注意，如下图所示，
ASCII编码使用左边的，而Unicode则是右边的：
滴水逆向课程笔记  –  Win32
C语言中的宽字符  –  6
例如我们想要在控制台中打印一个宽字符的字符串：
再一个例子就是字符串的长度：
char strBuff[] = "China";
wchar_t strBuff1[] = L"China";
strlen(strBuff); //取得多字节字符串中字符长度，不包含 00
wcslen(strBuff1); //取得多字节字符串中字符长度，不包含 00 00
滴水逆向课程笔记  –  Win32
Win32 API中的宽字符  –  7
1.
2.
3.
4 Win32 API中的宽字符
4.1 了解什么是Win32 API
Win32 API就是Windows操作系统提供给我们的函数（应用程序接口），其主要存放在C:\Windows\System32
（存储的DLL是64位）、C:\Windows\SysWOW64（存储的DLL是32位）下面的所有DLL文件（几千个）。
重要的DLL文件：
Kernel32.dll：最核心的功能模块，例如内存管理、进程线程相关的函数等；
User32.dll：Windows用户界面相关的应用程序接口，例如创建窗口、发送信息等；
GDI32.dll：全称是Graphical Device Interface（图形设备接口），包含用于画图和显示文本的函数。
在C语言中我们想要使用Win32 API的话直接在代码中包含windows.h这个头文件即可。
比如我们想要弹出一个提示窗口，Win32 API文档中弹窗API的格式如下：
这个代码可能看起来非常可怕，好像我们都没有接触过，但实际上其不是什么新的类型，所谓的新的类型无非
就是给原有的类型重新起了一个名字，这样做是为了将所有类型统一化，便于读写，如果涉及到跨平台的话将
原来的类型修改一下就好了，无需对代码进行重写。
例如以上代码中的类型LPCTSTR，实际上我们跟进一下代码（选中F12）会发现其本质就是const char *这个类
型，只不过是换了一个名字罢了。
常用的数据类型在Win32中都重新起了名字：
4.2 在Win32中使用字符串
字符类型：
int MessageBox(
1
    HWND hWnd,          // handle to owner window
2
    LPCTSTR lpText,     // text in message box
3
    LPCTSTR lpCaption,  // message box title
4
    UINT uType          // message box style
5
);
6
滴水逆向课程笔记  –  Win32
Win32 API中的宽字符  –  8
字符串指针:
4.3 使用Win32 API弹框
之前我们了解到Win32 API中的弹框，其名称为MessageBox，其实际上本质就是MessageBoxW和MessageBoxA：
MessageBoxA只接受ASCII编码的参数，而MessageBoxW则只接受Unicode编码的参数。
从本质上来讲，Windows字符串都是宽字符的，所以使用MessageBoxW这种方式性能会更好一些，因为当你使
用MessageBoxA的时候，在到内核的时候（系统底层）其会转化Unicode，所以性能相对差一些。
弹框调用如下：
CHAR strBuff[] = "中国"; // char
WCHAR strBuff[] = L"中国"; // wchar_t
TCHAR strBuff[] = TEXT("中国"); // TCHAR 根据当前项目的编码自动选择char还是wchar_t，在Win32中推
荐使用这种方式
PSTR strPoint = "中国"; // char*
PWSTR strPoint = L"中国"; // wchar_t*
PTSTR strPoint = TEXT("中国"); // PTSTR 根据当前项目的编码自动选择如char*还是wchar_t*，在Win32
中推荐使用这种方式
CHAR strTitle[] = "Title";
1
CHAR strContent[] = "Hello World!";
2
MessageBoxA(0, strContent, strTitle, MB_OK);
3
4
WCHAR strTitle[] = L"Title";
5
WCHAR strContent[] = L"Hello World!";
6
MessageBoxW(0, strContent, strTitle, MB_OK);
7
8
TCHAR strTitle[] = TEXT("Title");
9
TCHAR strContent[] = TEXT("Hello World!");
10
MessageBox(0, strContent, strTitle, MB_OK);
11
滴水逆向课程笔记  –  Win32
Win32 API中的宽字符  –  9
滴水逆向课程笔记  –  Win32
进程的创建过程  –  10
1.
2.
3.
4.
5.
a.
b.
5 进程的创建过程
5.1 什么是进程
程序所需要的资源（数据、代码...）是由进程提供的；进程是一种空间上的概念，它的责任就是提供资源，至
于资源如何使用，与它无关。
每一个进程都有自己的一个4GB大小的虚拟空间，也就是从0x0-0xFFFFFFFF这个范围。
进程内存空间的地址划分如下，每个进程的内核是同一份（高2G），只有其他三个分区是进程独有的（低
2G），而只有用户模式区是我们使用的范围：
进程也可以理解为是一对模块组成的，我们可以使用OD打开一个进程看一下：
这里面有很多的模块，每个模块都是一个可执行文件，它们遵守相同的格式，即PE结构，所以我们也可以理解
进程就是一堆PE组合。
5.2 进程的创建
我们需要知道任何进程都是别的进程创建的，当我们在Windows下双击打开一个文件，实际上就是explore.exe
这个进程创建的我们打开文件的进程，其使用的方法就是：CreateProcess()
进程创建的过程也就是CreateProcess函数：
映射EXE文件（低2G）
创建内核对象EPROCESS（高2G）
映射系统DLL（ntdll.dll）
创建线程内核对象RTHREAD（高2G）
系统启动线程：
映射DLL（ntdll.LdrInitializeThunk）
线程开始执行
滴水逆向课程笔记  –  Win32
进程的创建过程  –  11
如上图就是打开A.exe的创建过程图，进程是空间上的概念，只用于提供代码和数据资源等等...而想要使用这些
资源的是线程，每个进程至少需要一个线程。
滴水逆向课程笔记  –  Win32
创建进程  –  12
6 创建进程
创建进程的函数是CreateProcess()，这个函数的使用方法如下：
本章节对CreateProcess函数的了解就是前2个参数和后2个参数，前两个参数：lpApplicationName、
lpCommandLine，第一个是需要启动的进程文件路径，第二个是命令行参数，如果你启动的进程有参数的可
以可以传入。
命令行参数是指在CMD命令行下运行程序所需要提供的参数，例如我们的main入口函数：
其函数传参char* argv[]就是命令行参数，要使用的话就是argv[0]则表示程序本身，其余往后则是参数，
argv[1]、argv[2]...等等：
所以我们要使用CreateProcess函数创建进程的话，如果需要提供命令行参数则需要填写第二个参数
lpCommandLine：
BOOL CreateProcess(
1
    LPCTSTR lpApplicationName,                 // name of executable module 进程名（完整文件路径）
2
    LPTSTR lpCommandLine,                      // command line string 命令行传参
3
    LPSECURITY_ATTRIBUTES lpProcessAttributes, // SD 进程句柄
4
    LPSECURITY_ATTRIBUTES lpThreadAttributes,  // SD 线程句柄
5
    BOOL bInheritHandles,                      // handle inheritance option 句柄
6
    DWORD dwCreationFlags,                     // creation flags 标志
7
    LPVOID lpEnvironment,                      // new environment block 父进程环境变量
8
    LPCTSTR lpCurrentDirectory,                // current directory name 父进程目录作为当前目录，设置目
录
9
    LPSTARTUPINFO lpStartupInfo,               // startup information 结构体详细信息（启动进程相关信
息）
10
    LPPROCESS_INFORMATION lpProcessInformation // process information 结构体详细信息（进程ID、线程ID、
进程句柄、线程句柄）
11
);
12
int main(int argc, char* argv[])
1
{
2
    printf("%s - %s", argv[0], argv[1]);
3
    return 0;
4
}
5
滴水逆向课程笔记  –  Win32
创建进程  –  13
如上图所示代码，首先我定义了进程路径、进程命令行参数，其次创建了si、pi两个结构体，然后使用
ZeroMemory函数用0填充结构体数据，再给si.cb成员赋值当前结构体大小（为什么需要？这是因为Windows会
有很多个版本，便于未来更新换代）；最后CreateProcess函数创建进程，由于CreateProcess函数本身返回值
是布尔类型的，所以使用if来判断，如果出问题则使用GetLastError函数来获取问题编号，具体编号对应什么
内容可以参考百度百科：https://baike.baidu.com/item/GetLastError/4278820?fr=aladdin
#include 
1
#include 
2
3
int main(int argc, char* argv[])
4
{
5
    TCHAR childProcessName[] = TEXT("C:/WINDOWS/system32/cmd.exe");
6
    TCHAR childProcessCommandLine[] = TEXT(" /c ping 127.0.0.1");
7
8
    STARTUPINFO si;
9
    PROCESS_INFORMATION pi;
10
11
    ZeroMemory(&si, sizeof(si));
12
    ZeroMemory(&pi, sizeof(pi));
13
14
    si.cb = sizeof(si);
15
16
    if(CreateProcess(childProcessName, childProcessCommandLine, NULL, NULL, FALSE, 0, NULL, NULL, 
&si, &pi)) {
17
        printf("CreateProcess Successfully! \n");
18
    } else {
19
        printf("CreateProcess Error: %d \n", GetLastError());
20
    }
21
22
    CloseHandle(pi.hProcess);
23
    CloseHandle(pi.hThread);
24
25
    system("pause");
26
    return 0;
27
}
28
滴水逆向课程笔记  –  Win32
创建进程  –  14
在创建完进程之后需要关闭进程，但是我们所知道，每个进程至少有一个线程，所以我们也要关闭线程，使用
CloseHandle函数来关闭。
6.1 课外扩展-反调试(STARTUPINFO结构体)
CreateProcess()函数创建进程，其有一个参数是STARTUPINFO结构体，这个参数是进程启动的一些信息，我
们一开始会将其ZeroMemory()函数处理，填充0，那么在运行的时候是否还都是0呢？或者说在载入调试工具的
时候所有成员是否都是0呢？
首先我们来看一下STARTUPINFO结构体的成员：
typedef struct _STARTUPINFOA {
1
    DWORD   cb;
2
    LPSTR   lpReserved;
3
    LPSTR   lpDesktop;
4
    LPSTR   lpTitle;
5
    DWORD   dwX;
6
    DWORD   dwY;
7
    DWORD   dwXSize;
8
    DWORD   dwYSize;
9
    DWORD   dwXCountChars;
10
    DWORD   dwYCountChars;
11
    DWORD   dwFillAttribute;
12
    DWORD   dwFlags;
13
    WORD    wShowWindow;
14
    WORD    cbReserved2;
15
    LPBYTE  lpReserved2;
16
    HANDLE  hStdInput;
17
    HANDLE  hStdOutput;
18
    HANDLE  hStdError;
19
} STARTUPINFOA, *LPSTARTUPINFOA;
20
滴水逆向课程笔记  –  Win32
创建进程  –  15
将这几个DWORD类型的成员打印一下看看，通过GetStartupInfo函数来获取信息：
正常打开（P1）和在DTDebug调试工具（P2）中打开：
我们可以很清楚的看见了几个值在调试工具中打开发生变化：si.dwXSize, si.dwYSize, si.dwXCountChars, 
si.dwFillAttribute, si.dwFlags
所以我们可以根据这几个值来判断从而进行反调试：
#include "stdafx.h"
1
#include 
2
#include 
3
4
int main(int argc, char* argv[])
5
{
6
    STARTUPINFO si;
7
    ZeroMemory(&si, sizeof(si));
8
    si.cb = sizeof(si);
9
10
    GetStartupInfo(&si);
11
12
    printf("%d %d %d %d %d %d %d %d\n", si.dwX, si.dwY, si.dwXSize, si.dwYSize, si.dwXCountChars, 
si.dwYCountChars, si.dwFillAttribute, si.dwFlags); 
13
    system("pause");
14
    return 0;
15
}
16
滴水逆向课程笔记  –  Win32
句柄表  –  16
7 句柄表
在上一章节中，我们了解到了CreateProcess()函数创建进程会有一个结构体LPPROCESS_INFORMATION 
lpProcessInformation，这个结构体会有进程和线程的ID、句柄信息，那么什么是ID？什么是句柄？
7.1 内核对象
7.1.1 什么是内核对象
首先我们来了解一下内核对象，以后会经常与内核对象打交道，例如进程、线程、文件、互斥体、事件等等在
内核都有一个对应的结构体，这些结构体都由内核负责管理，所以我们都可以称之为内核对象（当我们创建一
个进程，在内核层（高2G）就会创建一个结构体EPROCESS...）。
记不住没关系，我们可以在MSDN Library中搜索CloseHandle这个函数，它是用来关闭句柄的，暂时先不用管
其原理，我们只要知道它所支持关闭就都是内核对象：