-
-
-
18
3
-
-
1
-
1
R4
-
-
-
N/A
-
1467
17
-
-
104
-
71
N/A
RCX
RDX
R1
-
-
R2
-
-
R3
-
-
N/A N/A N/A N/A
N/A N/A N/A N/A
-
-
2
-
-
-
1
1
-
-
3
-
-
-
1
1
-
-
4
-
-
-
2
2
R4
-
-
-
-
10
-
-
-
6
8
N/A N/A N/A
N/A N/A N/A
N/A N/A N/A N/A
have register state interactions with the hypervisor during the
boot period of a SEV-ES-enabled VM. The OVMF version
used was downloaded from branch sev-es-v27 with the default
setting. As shown in Table 3, the collected register states are
divided into 4 intervals. Range 1 (R1) is ﬁeld [0,1] with only
two numbers and is the most important interval since a return
of true or false is very common in function implementation.
Most observed NAE events can help the hypervisor to collect
both two values in R1 while frequent IOIO_PROT (260648
for IO out and 246527 for IO in) events during the boot period
can help the hypervisor to ﬁll Range 2 (R2) which is [0,15]
and Range 3 (R3) which is [0,127]. Range 4 (R4) contains all
264 for an 8-byte register. Some NAE events are not observed
during the boot period like RDPMC and RDTSC. However, these
NAE events are still considered exploitable as long as some
programs use these instructions during VM’s lifetime. In the
table, we separate RBX and RDX to present different register
values the hypervisor can observe during the boot period.
However, the adversary is only able to observe the ciphertext
of the (RBX, RDX) pair, as these two registers are in an the
same aligned 16-byte encryption block.
Different Versions. We have tested three latest (as of Nov.,
25th, 2020) OVMF git branches provided by AMD [5] for
SEV-ES (“sev-es-v27”1) and SEV-SNP (“sev-es-v21+snp”2)
as well as the ofﬁcial OVMF repository used by SEV
(“https://github.com/tianocore/edk2.git”3). All these three ver-
sions adopt the same CMOS/RTC design ﬂow we mentioned
in this section under the default conﬁguration provided by
AMD [5], and the hypervisor is able to collect all the 7-bits
(plaintext from 0 to 0x7F) plaintext-ciphertext pairs in all
these three versions.
Different Settings. We have also tested OVMF debug conﬁg-
1commit:834f296d3e1864b676fac9db53bc7dbb83c6eee7
2commit:e7bf4dfeaba60089f427af518936f29db79dd159
3commit:21f984cedec1c613218480bc3eb5e92349a7a812
uration options. The default debug conﬁguration is to write
debug messages to IO port 0x402. OVMF also supports orig-
inal debug behavior where the debug messages are written
to the emulated serial port if the DEBUG_ON_SERIAL_PORT
option is set. AMD adopts the DEBUG_ON_SERIAL_PORT op-
tion according to their Github repository [5]. In both these
two settings, the hypervisor is able to collect all the 7-bits
plaintext-ciphertext pairs by monitoring CMOS/RTC activi-
ties in I/O PORT 0x70. The DebugDumpCmos can be disabled
if the developer chooses to ignore all debug information by
setting the -b RELEASE option. However, the hypervisor can
still collect 19 out of the 7-bits plaintext-ciphertext pairs (with
2 numbers lying in R1, 13 numbers in R2, and 19 numbers
in R3) by monitoring CMOS/RTC activities in I/O PORT
0x70. When targets at all IOIO_PROT OUT events, the hy-
pervisor shows the potential ability to collect 115 out of the
7bits plaintext-ciphertext pairs (with 2 numbers lying in R1,
16 numbers in R2, and 115 numbers in R3), even disabling
all debug activities.
4 Case Studies
In this section, we present two case studies to illustrate the
CIPHERLEAKS attack. In the ﬁrst attack, we show that the
constant-time RSA implementation in OpenSSL can be bro-
ken with known ciphertext for the plaintext values of 0 to 31.
In the second attack, we show that the constant-time ECDSA
signature can be compromised with known ciphertext of the
plaintext values of 0 and 1.
4.1 Breaking Constant-Time RSA
RSA is asymmetric cryptography, which is widely used in
various crypto systems. In the RSA algorithm, the plaintext
message m can be recovered from the ciphertext c via m =
cd mod n, where d is the private key and n is the modulus
724    30th USENIX Security Symposium
USENIX Association
of the RSA public key system. As such, we show how the
CIPHERLEAKS attack steals the private key d.
Targeted RSA implementation. Our demonstrated attack
targets at the modular exponentiation used in RSA opera-
tions from the latest OpenSSL implementation (as of Nov,
4th, 2020)4 . OpenSSL implements the modular exponentia-
tion using a ﬁxed-length sliding window method in function
BN_mod_exp_mont_consttime(). We target at a while loop
inside this function, which iteratively calculates the exponen-
tiation in a 5-bit windows. The while loop is shown in Listing
1. For a 2048-bit private key, the while loop has about 2048/5
= 410 iterations. In each iteration, bn_get_bits5 is called to
retrieve the 5-bit of the private key d.
1 /*
2
* Scan the exponent one window at a time starting
from the most significant bits .
*/
3
4 while ( bits > 0) {
5
bn_power5 ( tmp .d , tmp .d , powerbuf , np , n0 , top ,
6
7 }
bn_get_bits5 (p ->d , bits -= 5) );
Listing 1: Code snippet of BN_mod_exp_mont_consttime.
The attacker can steal the 2048-bit private key d in the
following steps:
 Infer the physical address of the target function. The
attacker ﬁrst uses the method introduced in Section 3.2 to
obtain the physical address of the target function. We use
gPAt0 and gPAt1 to denote the guest physical addresses of the
target functions bn_power5 and bn_get_bits5, respectively.
 Monitor NPFs. The attacker clears the P bit of the two tar-
geted physical pages. Once a NPF of gPAt0 is intercepted, she
clears the P bit of gPAt1; when a NPF of gPAt1 is intercepted,
she clears the P bit of gPAt0. For a 2048-bit RSA encryption,
410 iterations can be observed, the attacker will observe 820
NPFs of gPAt0 and gPAt1 in total.
 Extract the private key d. As shown in Listing 2,
bn_get_bits5 obtains 5 bits of d in each iteration, stores
the value in RAX, and returns. Since the hypervisor clears
the P bit of gPAt0, returns to bn_power5 will trigger a NPF
of gPAt0. When the hypervisor handles this NPF, it reads and
records the ciphertext of RAX in the VMSA. The RAX now
stores 5 bits of the private key d, and its value range is 0 to
31. The hypervisor can infer the plaintext by searching the
plaintext-ciphertext pairs collected during the boot period as
described in Section 3.3.2. The hypervisor can recover the
whole 2048-bit private key d after a total of 410 iterations.
1 . globl
2
3
4
5
6
bn_get_bits5
......
cmova %r11 ,% r10
cmova %eax ,% ecx
movzw (% r10 , $num ,2) ,% eax
shrl
%cl ,% eax
7
8
9
and \$31 ,% eax
ret
......
Listing 2: Code segment of bn_get_bits5().
4.2 Breaking Constant-time ECDSA
Elliptic Curve Digital Signature Algorithm ECDSA) is a cryp-
tographical digital signature based on the elliptic-curve cryp-
tography (ECC). ECDSA follows the steps below to generate
a signature:
1. Randomly generate a 256-bit nonce k.
2. Calculate r = (k× G)x mod n
3. Calculate s = k−1(h(m) + rda) mod n
where G is a base point of prime order on the curve, n is the
multiplicative order of the point G, da is the private key, h(m)
is the hash of the message m, and (r, s) form the signature.
With a known nonce k, the private key da can be calculated
directly:
da = r−1 × ((ks)− h(m)) mod n
As such, a side-channel attack against ECDSA aims to steal
the nonce k. The secret private key can be inferred thereafter.
Targeted ECDSA implementation. Our demonstrated at-
tack targets the secp256k1 curve, which is also used in
Bitcoin wallets. In the latest OpenSSL’s implementation
(as of Nov, 4th, 2020) , when ECDSA_do_sign is called to
generate a signature, ecdsa_sign_setup is ﬁrst called to
generate a random 256-bit nonce k per NIST SP 800-90A
standard. To do so, EC_POINT_mul, ec_wNAF_mul, and then
ec_scalar_mul_ladder are called to compute r, which is
the x-coordinate of nonce k. ec_scalar_mul_ladder is used
regardless of the value of the BN_FLG_CONSTTIME ﬂag.
As
shown in Listing 3, the core component of
ec_scalar_mul_ladder uses conditional swaps (a.k.a.,
EC_POINT_CSWAP) to compute point multiplication without
branches. Speciﬁcally, in each iteration, BN_is_bit_set(k,
i) is called to get the ith bit of the nonce k. The conditional
swaps are determined by kbit, which is the XOR result of
the ith bit of the nonce k and pbit.
1 for (i = cardinality_bits - 1; i >= 0; i - -) {
2
kbit = BN_is_bit_set (k , i) ^ pbit ;
EC_POINT_CSWAP ( kbit ,r ,s , group_top , Z_is_one );
3
4 // Perform a single step of the Montgomery ladder
5
if (! ec_point_ladder_step ( group , r , s , p , ctx )
){
6
7
8
ERR_raise ( ERR_LIB_EC ,
EC_R_LADDER_STEP_FAILURE );
goto err ;
}
9
10 // pbit logic merges this cswap with that of the
4Github commit: 8016faf156287d9ef69cb7b6a0012ae0af631ce6
11
next iteration
pbit ^= kbit ;
USENIX Association
30th USENIX Security Symposium    725
12 }
Listing 3: Code snippet of ec_scalar_mul_ladder().
The attacker can steal the nonce k in the following steps:
 Infer the functions’ physical addresses. The attacker ﬁrst
obtains the guest physical addresses of the target functions
ec_scalar_mul_ladder gPAt0 and BN_is_bit_set gPAt1
using the execution inference method we introduced.
 Monitor NPFs. The attacker clears the P bit of the two
targeted physical pages. Once a NPF of gPAt0 is intercepted,
she clears the P bit of gPAt1; when a NPF of gPAt1 is inter-
cepted, she clears the P bit of gPAt0. In this way, the control
ﬂow internal to the ec_scalar_mul_ladder function can be
learned by the attacker.
 Learn the value of k. In the 256-iteration while loop, the
attacker will observes 256*5 = 1280 NPFs of gPAt0 and 1280
NPFs of gPAt1. In each iteration of the while loop, the ﬁrst
NPFs of gPAt0 is triggered when BN_is_bit_set returns. As
shown in Listing 4, the ith bit of the nonce k is returned in
RAX. Thus, the ith bit of the nonce k is stored in the RAX
ﬁeld of the VMSA for the ﬁrst NPFs of gPAt0 in each iteration.
The attacker then compares the ciphertext of the RAX ﬁeld
to recover the nonce k.
......
1 000 f8e20 :
2
3 f8e38 :
4 f8e3c :
5 f8e3f :
6 f8e42 :
7
48 8b 04 d0
48 d3 e8