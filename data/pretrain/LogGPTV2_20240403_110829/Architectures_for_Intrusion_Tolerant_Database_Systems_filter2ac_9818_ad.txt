Adaptor with the ability to map QoIA requirements asso-
ciated with services to a set of state trustworthiness require-
ments and the ability to maintain differential state trustwor-
thiness. The adaptation operations performed by the QoIA
Adaptor are determined based on the difference between the
inferred set of state trustworthiness measurements and the
set of state trustworthiness requirements mapped from user
QoIA requirements.
To develop an Architecture V system, we face several
key challenges. First, although the QoIA requirements as-
sociated with a service can be straightforwardly speciﬁed
based on the results and outputs of the service, delivering
a set of QoIA services in a differential way is challeng-
ing. Our idea is to indirectly deliver QoIA services through
differential state trustworthiness maintenance via the map-
Proceedings of the Foundations of Intrusion Tolerant Systems (OASIS’03) 
0-7695-2057-X/03 $17.00 © 2003 IEEE
ping from QoIA requirements to state trustworthiness re-
quirements. Although it is not very difﬁcult to map one
service’s QoIA requirements to a set of state trustworthi-
ness requirements based on the “function” performed by
the service, it could be difﬁcult to resolve the inconsis-
tencies among the set of different state trustworthiness re-
quirements that the set of QoIA services have on a shared
data object. Second, how can we maintain differential state
trustworthiness? Our idea is to apply different intrusion
tolerance controls on different parts of the database. To
make this idea feasible, we need to make sure that one set
of intrusion-tolerance controls does not inﬂuence another
set of intrusion-tolerance controls. Third, how do we en-
sure that the (mapped) state trustworthiness requirements
on a part of the database can be satisﬁed in the face of at-
tacks? Our idea is through QoIA-aware adaptations where
the set of intrusion-tolerance controls enforced on a part of
the database can adapt to the changing environment in such
a way that the set of state trustworthiness requirements can
be satisﬁed with minimum cost. To make this idea feasible,
we need to be able to accurately measure state trustworthi-
ness. However, this is not an easy job. The measurements
observed by the Observer are usually incomplete and could
even be misleading due to false negatives, false positives,
and detection delays. New techniques are needed to infer
the “real” trustworthiness of the database state based on the
observed measurements. For example, a statistics based ap-
proach could work for this purpose.
8 Conclusion
In this paper, we have presented ﬁve intrusion-tolerant
database-systems architectures which can be built on top of
COTS components. These architectures indicate that: (1)
a multi-layer, defense-in-depth approach, as summarized
in Figure 6, is usually more cost-effective than having the
system’s survivability depend on the effectiveness of one
or two mechanisms such as intrusion detection; (2) adap-
tive intrusion-tolerant mechanisms are usually more cost-
effective than pre-programmed intrusion tolerant mecha-
nisms; (3) service-oriented, intrusion-tolerant database sys-
tems are usually more cost-effective than state-oriented,
intrusion-tolerant database systems.
Finally, we would like to mention a couple of exciting
future research directions that should be able to further im-
prove the proposed architectures:
(cid:0) Malicious transactions may be able to be masked by a
set of partially replicated database servers where each
server executes only a group of but not all transac-
tions. The key challenge for such a masking frame-
work should be the tradeoff between security and data
consistency.
6
5
4
3
2
1
Damage Repair
Damage Containment
Damage Assessment
Merging
Isolation
Intrusion Detection
Access Control
Reconfiguration
Figure 6. Intrusion Tolerance in Depth
(cid:0) It is in general true that the accuracy and latency of the
Intrusion Detector can have a big impact on the overall
cost-effectiveness of an intrusion-tolerant (database)
system. Hence it is very desirable to know how “good”
a detector needs to be (in terms of false positive rate,
false negative rate, and detection latency) in order to
make an intrusion tolerant database system (of Archi-
tectures I, II, III, IV, or V) that deploys the detector,
cost-effective.
(cid:0) OS-level and transaction-level
intrusion-tolerance
mechanisms should be seamlessly integrated to build
multi-layer, intrusion-tolerant database systems. This
integration requires careful study of the relationships
between these two layers of mechanisms. For exam-
ple, although OS-level data corruptions cannot be de-
tected using transaction-level approaches, transaction-
level approaches can be very useful to recover from
these corruptions.
Acknowledgements
This work is supported by the Defense Advanced Re-
search Projects Agency (DARPA) and Air Force Research
Laboratory, Air Force Material Command, USAF, under
agreement number F30602-00-2-0575, and by DARPA and
AFRL, AFMC, USAF, under award number F20602-02-1-
0216.
References
[1] M. R. Adam.
Security-Control Methods for Statistical
Database: A Comparative Study. ACM Computing Surveys,
21(4), 1989.
[2] P. Ammann, S. Jajodia, and P. Liu. Recovery from malicious
IEEE Transactions on Knowledge and Data
transactions.
Engineering, 15(5):1167–1185, 2002.
[3] P. Ammann, S. Jajodia, C. McCollum, and B. Blaustein. Sur-
viving information warfare attacks on databases.
In Pro-
ceedings of the IEEE Symposium on Security and Privacy,
pages 164–174, Oakland, CA, May 1997.
Proceedings of the Foundations of Intrusion Tolerant Systems (OASIS’03) 
0-7695-2057-X/03 $17.00 © 2003 IEEE
[4] V. Atluri, S. Jajodia, and B. George. Multilevel Secure
Transaction Processing. Kluwer Academic Publishers,
1999.
[5] D. Barbara, R. Goel, and S. Jajodia. Using checksums to
detect data corruption. In Proceedings of the 2000 Interna-
tional Conference on Extending Data Base Technology, Mar
2000.
[6] Carter and Katz. Computer Crime: An Emerging Challenge
for Law Enforcement. FBI Law Enforcement Bulletin, 1(8),
Dec. 1996.
[7] C. Y. Chung, M. Gertz, and K. Levitt. Demids: A misuse
detection system for database systems. In 14th IFIP WG11.3
Working Conference on Database and Application Security,
2000.
[8] C. Cowan, C. Pu, D. Maier, H. Hinton, P. Bakke, S. Beattie,
A. Grier, P. Wagle, and Q. Zhang. Stackguard: Automatic
adaptive detection and prevention of buffer-overﬂow attacks.
In Proc. 7th USENIX Security Symposium, 1998.
[9] S. B. Davidson.
Optimism and consistency in parti-
tioned distributed database systems. ACM Transactions on
Database Systems, 9(3):456–581, September 1984.
[10] T. Garvey and T. Lunt. Model-based intrusion detection. In
Proceedings of the 14th National Computer Security Con-
ference, Baltimore, MD, October 1991.
[11] K. Goseva-Popstojanova, F. Wang, R. Wang, G. Feng,
K. Vaidyanathan, K. Trivedi, and B. Muthusamy. Char-
acterizing intrusion tolerant systems using a a state transi-
tion model. In Proc. 2001 DARPA Information Survivability
Conference (DISCEX), June 2001.
[12] R. Graubart, L. Schlipper, and C. McCollum. Defending
database management systems against information warfare
attacks. Technical report, The MITRE Corporation, 1996.
[13] P. P. Grifﬁths and B. W. Wade. An Authorization Mechanism
for a Relational Database System. ACM Transactions on
Database Systems, 1(3):242–255, Sept. 1976.
[14] K. Ilgun, R. Kemmerer, and P. Porras. State transition analy-
sis: A rule-based intrusion detection approach. IEEE Trans-
actions on Software Engineering, 21(3):181–199, 1995.
[15] S. Ingsriswang and P. Liu. Aaid: An application aware
transaction-level database intrusion detection system. Tech-
nical report, Dept. of Information Systems, UMBC, 2001.
[16] S. Jajodia, P. Samarati, V. S. Subrahmanian, and E. Bertino.
A uniﬁed framework for enforcing multiple access control
policies.
In Proceedings of ACM SIGMOD International
Conference on Management of Data, pages 474–485, May
1997.
[17] H. S. Javitz and A. Valdes. The sri ides statistical anomaly
In Proceedings IEEE Computer Society Sympo-
detector.
sium on Security and Privacy, Oakland, CA, May 1991.
[18] J. Knight, K. Sullivan, M. Elder, and C. Wang. Survivability
architectures: Issues and approaches. In Proceedings of the
2000 DARPA Information Survivability Conference & Expo-
sition, pages 157–171, CA, June 2000.
[19] W. Lee and D. Xiang.
Information-theoretic measures for
anomaly detection. In Proc. 2001 IEEE Symposium on Se-
curity and Privacy, Oakland, CA, May 2001.
[20] P. Liu. Dais: A real-time data attack isolation system for
commercial database applications.
In Proceedings of the
17th Annual Computer Security Applications Conference,
2001.
Proceedings of the Foundations of Intrusion Tolerant Systems (OASIS’03) 
0-7695-2057-X/03 $17.00 © 2003 IEEE
[21] P. Liu and S. Jajodia. Multi-phase damage conﬁnement
in database systems for intrusion tolerance.
In Proc. 14th
IEEE Computer Security Foundations Workshop, Nova Sco-
tia, Canada, June 2001.
[22] P. Liu, S. Jajodia, and C. McCollum. Intrusion conﬁnement
by isolation in information systems. Journal of Computer
Security, 8(4):243–279, 2000.
[23] P. Liu and Y. Wang. The design and implementation of a
multiphase database damage conﬁnement system.
In Pro-
ceedings of the 2002 IFIP WG 11.3 Working Conference on
Data and Application Security, 2002.
[24] P. Luenam and P. Liu. Odar: An on-the-ﬂy damage assess-
ment and repair system for commercial database applica-
tions. In Proceedings of the 2001 IFIP WG 11.3 Working
Conference on Database and Application Security, 2001.
[25] P. Luenam and P. Liu. The design of an adaptive intrusion
tolerant database system. In Proc. IEEE Workshop on Intru-
sion Tolerant Systems, 2002.
[26] T. Lunt. A Survey of Intrusion Detection Techniques. Com-
puters & Security, 12(4):405–418, June 1993.
[27] U. Maheshwari, R. Vingralek, and W. Shapiro. How to build
a trusted database system on untrusted storage. In Proceed-
ings of 4th Symposium on Operating System Design and Im-
plementation, San Diego, CA, October 2000.
[28] D. Malkhi, M. Reiter, D. Tulone, and E. Ziskind. Persistent
objects in the ﬂeet system. In Proc. 2001 DARPA Informa-
tion Survivability Conference (DISCEX), June 2001.
[29] J. McDermott and D. Goldschlag. Towards a model of stor-
age jamming. In Proceedings of the IEEE Computer Secu-
rity Foundations Workshop, pages 176–185, Kenmare, Ire-
land, June 1996.
[30] D. Medhi and D. Tipper. Multi-layered network survivabil-
ity - models, analysis, architecture, framework and imple-
mentation: An overview. In Proceedings of the 2000 DARPA
Information Survivability Conference & Exposition, pages
173–186, CA, June 2000.
[31] B. Mukherjee, L. T. Heberlein, and K. Levitt. Network in-
trusion detection. IEEE Network, pages 26–41, June 1994.
[32] G. C. Necula. Proof-carrying code. In Proc. 24th ACM Sym-
posium on Principles of Programming Languages, 1997.
[33] P. P. Pal, J. P. Loyall, R. E. Schantz, and J. A. Zinky. Open
implementation toolkit for building survivable applications.
In Proc. 2000 DARPA Information Survivability Conference
(DISCEX), June 2000.
[34] F. Rabitti, E. Bertino, W. Kim, and D. Woelk. A model of
authorization for next-generation database systems. ACM
Transactions on Database Systems, 16(1):88–131, 1994.
[35] D. Samfat and R. Molva.
Idamn: An intrusion detection
architecture for mibile networks. IEEE Journal of Selected
Areas in Communications, 15(7):1373–1380, 1997.
[36] R. Sandhu and F. Chen. The multilevel relational (mlr) data
model. ACM Transactions on Information and Systems Se-
curity, 1(1), 1998.
[37] S. Sekar, M. Bendre, and P. Bollineni. A fast automaton-
based method for detecting anomalous program behaviors.
In Proc. 2001 IEEE Symposium on Security and Privacy,
Oakland, CA, May 2001.
[38] Z. Shao, B. Saha, and V. Trifonov. A type system for certi-
ﬁed binaries. In Proc. 29th ACM Symposium on Principles
of Programming Languages, 2002.
[39] S. Smith, E. Palmer, and S. Weingart. Using a high-
performance, programmable secure coprocessor.
In Proc.
International Conference on Financial Cryptography, An-
guilla, British West Indies, 1998.
[40] V. Stavridou. Intrusion tolerant software architectures. In
Proceedings of the 2001 DARPA Information Survivability
Conference & Exposition, CA, June 2001.
[41] P. Stenstrom and et al. Trends in shared memory multipro-
cessing. IEEE Computer, (12):44–50, Dec. 1997.
[42] S. Stolfo, D. Fan, and W. Lee. Credit card fraud detection
using meta-learning: Issues and initial results. In Proc. AAAI
Workshop on AI Approaches to Fraud Detection and Risk
Management, 1997.
[43] M. Tallis and R. Balzer. Document integrity through medi-
ated interfaces. In Proc. 2001 DARPA Information Surviv-
ability Conference (DISCEX), June 2001.
[44] C. Taylor. Behind the hack attack. Time, (2):45–47, Feb.
2000.
[45] F. Webber, P. P. Pal, R. E. Schantz, and J. P. Loyall. Defense-
In Proc. 2001 DARPA Information
enabled applications.
Survivability Conference (DISCEX), June 2001.
[46] M. Winslett, K. Smith, and X. Qian. Formal query lan-
guages for secure relational databases. ACM Transactions
on Database Systems, 19(4):626–662, 1994.
[47] J. J. Wylie, M. W. Bigrigg, J. D. Strunk, G. R. Ganger,
H. Kiliccote, and P. K. Khosla. Survivable information stor-
age systems. IEEE Computer, (8):61–68, August 2000.
Proceedings of the Foundations of Intrusion Tolerant Systems (OASIS’03) 
0-7695-2057-X/03 $17.00 © 2003 IEEE