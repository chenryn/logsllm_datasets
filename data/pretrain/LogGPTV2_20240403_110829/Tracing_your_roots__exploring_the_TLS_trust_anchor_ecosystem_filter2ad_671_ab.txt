no
no
no
no
Table 1: Major CDN Top 200 User Agents—We collect root
store history for at least 77% of popular clients.
provide a root store for applications running on each platform. We
also examined nineteen widely used TLS libraries and found that
only three (NSS, NodeJS, Java Secure Socket Extensions) provide a
root store that application developers may use. The remaining TLS
libraries either default to the base platform/OS root store or are
configurable at build time. Finally, we looked into twelve common
HTTPS clients and web browsers and find that only 360Browser,
Firefox, and Chrome do not rely on system root stores and ship
their own. Table 2 summarizes our final root store dataset, and we
further describe each root store provider below.
NSS/Firefox/Mozilla Mozilla’s Network Security Services (NSS)
is a set of libraries that provide secure client-server communica-
tions. Mozilla develops and uses NSS solely for its Firefox web
browser, Thunderbird email client, and “other Mozilla-related soft-
ware products” [57]. Since 2000, NSS has maintained a trust anchor
store through its certdata.txt file. This file follows the PKCS#11
format and contains a list of two types of elements: certificates
and trust objects. Certificates contain raw certificate data and some
extracted fields. Trust objects contain 1) trust anchor identifiers (i.e.,
issuer name, serial number, and SHA1/MD5 hashes of a certificate)
as well as 2) trust details, which include the trust purpose (i.e., server
authentication HTTPS, email protection S/MIME, code signing) and
level (i.e., trusted, needs verification, or distrusted). This trust con-
text is solely determined by NSS maintainers through independent
due diligence, such as audit review and discussion with the PKI
community.
Unfortunately, not all of Mozilla’s trust anchor policies are fully
encapsulated within certdata.txt, due to their complexity and
technical considerations [33]. For instance, special constraints for
the Turkish government CA are implemented in C / C++ code.
Also the distrust of Symantec was partially implemented in code to
whitelist subordinate CAs of Symantec that were independently op-
erated. Mozilla also manages EV trust outside of certdata.txt [33].
As discussed in Section 3.1, we do not account for these nuanced
modifications when performing broadly-scoped analysis, but we
do consider them when examining specific roots.
NSS is the most well maintained trust anchor store for HTTPS
(and TLS server auth) by several measures. First, NSS has the most
transparent root inclusion / removal process. NSS abides by the
Mozilla Root Store policy, which requires maintainers to work with
the community [50, 51] to solicit feedback on all root CA inclu-
sion/removal proposals and on policy improvements for the Mozilla
Root Store. NSS also monitors CA issues through its public bug
tracking system and presents evidence for actions taken against
problematic CAs [36, 39, 40]. Second, NSS holds CAs to a relatively
high standard through its strict root store policy. CA issues fre-
quently first surface through NSS bug reports. As a result, NSS is
also the most responsive root store, often mitigating CA incidents
ahead of other root stores. For instance, Mozilla lead the commu-
nity discussion of DarkMatter’s trustworthiness as a CA [108], and
uncovered WoSign’s surreptitious ownership of StartCom [100].
We refer to NSS/Mozilla interchangeably in this manuscript.
Microsoft Microsoft updates the root certificates for its Win-
dows operating systems via Automatic Root Updates (partially sup-
ported as early as Windows XP SP2 [76]) through which Microsoft
ships authrootstl.cab. This file decompresses to authroot.stl
and contains a list of trust anchors and their Microsoft-specific OIDs,
which specify restrictions on each trust anchor. These restrictions
define the purposes for which a certificate is trusted or distrusted,
as well as other more nuanced trust, as discussed later in Section 5.3.
Full certificates are not included in authroot.stl, but they can
be downloaded from Microsoft by SHA1 hash through a separate
URL. This study uses an open-source archive of authroot.stl and
associated certificates [107].
Since at least 2005 [75], Apple has managed its own root
Apple
certificate program to support products such as “Safari, Mail.app,
and iChat.” More recently, this root store has supported both macOS
and iOS product lines. Apple stores trust anchors in keychain files
that can contain a wide range of credentials (e.g., passwords, private
3
181
Root store
Alpine
AmazonLinux
Android
Apple
Debian
Java
Microsoft
NodeJS
NSS
Ubuntu
From
2019-03
2016-10
2016-08
2002-08
2005-05
2018-03
2006-12
2015-01
2000-10
2003-10
To
2021-04
2021-03
2020-12
2021-02
2021-01
2021-02
2021-03
2021-04
2021-05
2021-01
# SS
42
43
14
109
39
7
86
16
225
38
# Uniq
7
15
7
43
29
7
70
11
63
29
Data source
docker [46]
docker [47]
source code [26]
source code [69]
source code [45]
source code [62]
update file [107]
source code [59]
source code [58]
source code [73]
Details
/etc/ssl/cert.pem or /etc/ssl/ca-certificates.crt
ca-trust/extracted/pem/tls-ca-bundle.pem aggregate file of root certs
List of root certificate files.
Both macOS and iOS. certificates/roots directory of files
/etc/ssl/certs and /usr/share/ca-certificates, directory of cert files
make/data/cacerts JKS file that has migrated over time
authroot.stl updates roots, trust purpose, addl. constraints
src/node_root_certs.h list of certificates
certdata.txt stores roots, trust purpose, additional constraints
/etc/ssl/certs and /usr/share/ca-certificates, directory of cert files
Table 2: Dataset—Root store history of 619 total snapshots (SS) for ten root providers: seven OS, three library.
keys, etc.) in addition to root certificates. While recent versions of
the keychain format are capable of specifying specific key usages
(kSecTrustSettingsKeyUsage), specific usage restrictions are not
provided by default. We collect roots from Apple’s open source
repository [69].
Linux distributions Most Linux distributions derive their trust
anchor stores from NSS. However, rather than use NSS’s custom
certdata.txt file, they express their trust through a list of X.509
certificates stored in a menagerie of directories. This format for
trust anchor stores omits the trust purposes that are specified by
NSS/Microsoft. To account for this discrepancy, recent versions
of AmazonLinux, Fedora, and others provide additional purpose-
specific root stores1 that distinguish between TLS server authenti-
cation, S/MIME email signing, and code signing use cases. For this
study, we only consider TLS server authentication certificates when
the distinction is available. Although they rely on NSS, Linux trust
anchor stores are updated manually and may make custom modifi-
cations to certdata.txt. To account for this possibility, we either
run the build process to extract accurate root store information, or
we collect data from a pre-built, officially distributed Docker image.
Android Android maintains its own trust anchor store [26]. It
consists of three root directories: general purpose, Google Services,
and Wi-Fi Alliance (WFA). We collect the general purpose roots
only. Although the Android root store repository has been active
since 2008, Android version tags have only been applied since 2015,
so we only have definitive snapshots after that date.
Chrome Chrome installations traditionally inherited the oper-
ating system trust store (except on ChromeOS or for EV) with its
own specialized control. For example, to protect its users against
the distrusted CA Symantec, Chrome implemented bespoke CA dis-
trust policies across all platforms besides iOS2. In late 2020, Google
announced their transition to its own TLS root store [41] to provide
a consistent experience for all of its users. However, as of May 2021,
the transition is still in-progress, and we exclude it from this study.
Java Oracle, the developer of Java, operates a root program [52]
to provide Java developers with a default set of root CAs for TLS
server authentication, email signing, and code signing. We measure
these trusted CAs through OpenJDK’s source repository. These CA
certificates are typically stored in a Java-specific JKS file, which we
parse using Java’s keytool utility. Java’s default root store does
not include additional trust contexts or restrictions.
NodeJS NodeJS provides a compile flag to trust system root
stores, but by default, it ships a file that contains trusted root cer-
tificates.
Opera Opera maintained its own root store until 2013 [66], when
it switched to adopting NSS’s root store and Chrome’s EV store.
Opera does not provide its software open source, so we do not
include it in our dataset. Opera migrated to Chromium in 2013 and
now utilizes system root stores.
Electron Electron is an application development framework used
by applications such as Slack, Discord, Skype, etc. that combines
NodeJS and Chromium to allow developers to build applications
using only web technologies: JavaScript, HTML, and CSS. Depend-
ing on the networking library used [79], Electron can rely on either
Node’s root store, or the system root store, which Chromium de-
faults to.
3.1 Data Collection & Limitations
The root store providers described above manage and publicly
release3 their trust anchors in different formats. We parse these
formats and consolidate them into a single database. For each root
store provider, we store snapshots, which represent a root store at a
single point in time. Each snapshot is a collection of trust entries
that include a certificate along with any additional trust/distrust
constraints (e.g., as provided by NSS and Microsoft). This study only
examines root stores, and does not evaluate certificate chains or
intermediate certificates, which are complicated by cross-signing,
CRL/OCSP certificate revocation, and other client-specific methods
such as Mozilla’s OneCRL and Chrome’s CRLSets.
Our dataset and methodology have a few limitations. First, the
dates for each root store snapshot do not always reflect the earliest
release date of each root store; instead, they should be viewed
as approximations. We take a best-effort approach to collecting
the root stores for a wide range of OSes and TLS software, and
as as result, our data collection represents different stages of root
store deployment. For some root store providers, we can collect
1Whether applications utilize these purpose-based roots is beyond the scope of this
study.
2Apple prohibits custom root policies on iOS.
3Notable exceptions with no reliable root history include ChromeOS and Fedora/-
CentOS. The latter releases Docker images, but with inconsistent timestamping and
versioning.
4
182
the source code repositories, which provide release tags that are
a proxy for release dates. For others, we can only collect pre-built
Docker images or root store update files, which may not correspond
perfectly with actual release dates. In order to compare the root
store dates derived from different means, we treat snapshot dates as
a rough approximation, and only make coarse-grained comparisons
between them, on the order of months or years.
Second, the data we collect represents default values and may not
reflect customized root store deployments. While no prior studies
have comprehensively measured root store deployments in the wild,
some have suggested that root stores may be altered by cellular
carriers [109] and locally installed AV / monitoring software [90].
We recognize that our dataset represents only the default root stores
provided by popular OSes and TLS software. However, we have
not discovered any reports of manual trust anchor removal from
default root stores4. This fact, coupled with the fault-intolerant
nature of the TLS PKI means that the results from our study are
likely a lower bound on real-world deployments.
Third, certificate chain validation is complex, and understanding
root stores is only part of the overall process that involves chain-
building and bespoke trust restrictions embedded in code. A root
certificate’s inclusion in a trust anchor store does not guarantee
that it is trusted. From our experience looking through TLS library
code, additional modifications to root store trust typically address
exceptional cases, rather than commonplace scenarios. When we
discuss specific root store inclusions/removals in Sections 5 and 6,
we make a best-effort attempt to account for any trust logic exter-
nal to the root store itself. For example, Apple utilizes a custom
revocation mechanism that downloads over-the-air updates from
valid.apple.com, and we note when this extends to questionable
roots.
4 ROOT STORE FAMILIES
Although OSes and some libraries/clients ship their own root stores,
they are not necessarily independent. Properly managing a root
store takes significant, sustained effort, and not all TLS software
developers have the capacity to manage a root store. Instead, some
root store providers derive their roots from other sources, making
identical copies or bespoke modifications. For instance, many Linux
distributions rely on NSS as the foundation of their root stores.
Unfortunately, not all root stores are open source and can be traced
directly to an independent source (e.g., NSS) through documenta-
tion. Some of our data sources are pre-built software (e.g., docker
images of AmazonLinux / Alpine), which lack transparent root
store provenance. To develop a general mechanism for determining
the interrelatedness/lineage of root stores, we take inspiration from
community ecology. We perform ordination analysis to visualize
the relationship of communities (collection of trust anchors in a
root store) across different sites (OS/library/client).
We collect root store histories and perform multidimensional
scaling (MDS) to cluster root store providers based on the pairwise
Jaccard distance between each root store community over time.
MDS is a dimensionality reduction technique where the lower di-
mensional representation preserves intra-object distances as well
4Chrome/Firefox apply their own restrictions on top of root stores, but do not modify
them.
5
183
as possible. We use the stress majorization variant of metric MDS
as implemented by Python’s sklearn library [104].
From Figure 1, we can see four clusters emerge from the root
store providers in our dataset. These correspond (from left to right)
with Microsoft, NSS/Linux/NodeJS, Apple, and Java. Each cluster
reflects a family of root providers that rely on a single indepen-
dent root program. The clusters are disjoint and do not overlap
(excluding three Apple and one Java outlier described below), which
indicates that as each root store family has evolved, they have not
converged or diverged with other root programs. Only the NSS
cluster contains derivative root stores (Android, Linux distributions,
and NodeJS) that copy the NSS root store. However, we also ob-
serve derivative snapshots that do not completely overlap with
NSS snapshots. This suggests not all NSS derivatives make perfect
copies; some make custom modifications, which we explore further
in Section 6.
We observed four outliers in our cluster analysis, all located be-
tween the NSS and Microsoft clusters. These outliers all occur when
substantial changes occur before and/or after a given snapshot. For
example, one Java outlier from August 2018 occurs due to the re-
moval of 9 roots (3 of which were unique to Java), and the addition
of 21 roots, which is a total of 30 (37.5%) changed certificates be-
tween relatively small Java snapshots. The subsequent Java version
removed 6 roots and added 2 new roots. Similar incidents occur
for Apple’s October 2011 snapshot (10 changed roots), February
2014 snapshot (67 changed roots), and September 2018 snapshot (19
changed roots). Due to the lack of root program transparency, we
can only examine what roots changed and try to infer why these
large changes occurred. For example, in the most prominent outlier