and Herbert Bos. 2016. Flip Feng Shui: Hammering a Needle in the Soft-
ware Stack. In USENIX Security Symposium.
[26] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi,
Ahmad-Reza Sadeghi, and Thorsten Holz. 2015.
Counterfeit Object-
oriented Programming: On the Difficulty of Preventing Code Reuse At-
tacks in C++ Applications. In IEEE Symposium on Security and Privacy.
[27] Mark Seaborn and Thomas Dullien. 2016. Exploiting the DRAM rowham-
mer bug to gain kernel privileges. https://googleprojectzero.blogspot.de/
2015/03/exploiting-dram-rowhammer-bug-to-gain.html.
[28] Hovav Shacham. 2007. The geometry of innocent flesh on the bone: return-
into-libc without function calls (on the x86). In ACM Conference on Com-
puter and Communications Security.
[29] Sam Silvestro, Hongyu Liu, Corey Crosser, Zhiqiang Lin, and Tongping Liu.
2017. FreeGuard: A Faster Secure Heap Allocator. In ACM Conference on
Computer and Communications Security.
[30] Chengyu Song, Byoungyoung Lee, Kangjie Lu, William R. Harris, Taesoo
Kim, and Wenke Lee. 2016. Enforcing Kernel Security Invariants with Data
Flow Integrity. In Annual Network and Distributed System Security Sympo-
sium.
[31] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. 2013. SoK: Eter-
nal War in Memory. In IEEE Symposium on Security and Privacy.
[32] Andrei Tatar, Radhesh Krishnan Konoth, Elias Athanasopoulos, Cristiano
Giuffrida, Herbert Bos, and Kaveh Razavi. 2018. Throwhammer: Rowham-
mer Attacks over the Network and Defenses. In USENIX Annual Technical
Conference.
[33] Victor van der Veen, Yanick Fratantonio, Martina Lindorfer, Daniel Gruss,
Clementine Maurice, Giovanni Vigna, Herbert Bos, Kaveh Razavi, and Cris-
tiano Giuffrida. 2016. Drammer: Deterministic Rowhammer Attacks on
Commodity Mobile Platforms. In ACM Conference on Computer and Com-
munications Security.
[34] Victor van der Veen, Martina Lindorfer, Yanick Fratantonio, Harikrishnan
Padmanabha Pillai, Giovanni Vigna, Christopher Kruegel, Herbert Bos,
and Kaveh Razavi. 2018. GuardION: Practical Mitigation of DMA-Based
Rowhammer Attacks on ARM. In Detection of Intrusions and Malware, and
Vulnerability Assessment.
[35] Yuan Xiao, Xiaokuan Zhang, Yinqian Zhang, and Mircea-Radu Teodorescu.
2016. One Bit Flips, One Cloud Flops: Cross-VM Row Hammer Attacks and
Privilege Escalation. In USENIX Security Symposium.
[36] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka,
N. Narula, and N. Fullagar. 2009. Native Client: A Sandbox for Portable,
Untrusted x86 Native Code. In IEEE Symposium on Security and Privacy.
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand570Test
Kraken (all LIB)
astar
beat
dft
fft
oscillator
gaussian
darkroom
desaturate
parse
stringify
aes
ccm
pbkdf2
sha256
Total
Octane (all HIB)
Richards
Deltablue
Crypto
Raytrace
EarleyBoyer
Regexp
Splay
SplayLat
NavierStokes
pdf.js
Mandreel
MandreelLat
GB Emu
CodeLoad
Box2DWeb
zlib
Typescript
Total
Plain 4.10 RIP-RH
OH
A DETAILED EVALUATION RESULTS
File Size Plain 4.10 RIP-RH (isolated)
512MB
1GB
10GB
3.59s
10.33s
143.89s
3.71s
10.24s
148.83s
OH
3.34%
-0.87%
3.44%
Table 1: Our real-world test runs OpenSSH as an physically
isolated server process while transfering different file sizes
over the local network.
LMBench3
File & VM Latency:
1K File Create
1K File Delete
10K File Create
10K File Delete
Mmap Latency
Mean
Local Bandwidth:
Bcopy (libc)
Bcopy (hand)
Mem read
Mem write
Mean
Memory Latency:
Stride 16
Stride 32
Stride 64
Stride 128
Rand mem
Mean
RIP-RH
-3.39%
4.54%
1.49%
3.00%
0.80%
1.29%
1.12%
1.62%
-3.88%
2.18%
0.26%
0.37%
-0.08%
0.77%
-2.53%
4.85%
0.68%
Table 2: Our microbenchmarks using LMBench show that
apart from a small setup overhead during process initial-
ization RIP-RH incurs no measurable memory or run-time
overhead.
119.7ms
171.0ms
232.6ms
86.3ms
93.1ms
124.6ms
163.3ms
107.3ms
71.7ms
91.4ms
94.3ms
160.8ms
196.1ms
72.2ms
1784.4ms
118.7ms
182.7ms
203.3ms
96.5ms
102.0ms
124.4ms
161.1ms
106.6ms
70.1ms
96.1ms
95.4ms
168.7ms
192.4ms
73.5ms
1791.5ms
19932
30018
19722
64157
21723
2150
11124
14789
27992
7556
12608
14491
38697
10566
24158
48055
14200
17616
20013
29713
19488
65793
21962
2089
10245
13678
27992
8036
12800
13848
36548
8082
24302
50136
13484
17137
-0.84%
6.40%
-12.59%
11.82%
9.56%
-0.16%
-1.35%
0.65%
-2.23%
5.14%
1.17%
4.91%
-1.89%
1.80%
0.4%
-0.41%
1.02%
1.19%
-2.55%
-1.1%
2.84%
7.90%
7.51%
0%
-6.35%
-1.52%
4.44%
5.55%
23.51%
-0.6%
-4.33%
5.04%
2.72%
Table 3: In our second real-world test we start Firefox as
a physically isolated user process. We measure the perfor-
mance impact within Firefox using the widely used browser
benchmarking tools Kraken and Octane. These test show
a high variance in the results, hence, the negative perfor-
mance overhead has to be accounted to measurement inac-
curacy.
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand571Phoronix
IOZone (HIB)
PostMark (HIB)
7-Zip (HIB)
OpenSSL (HIB)
PyBench (LIB)
Apache (HIB)
PHPBench (HIB)
stream (HIB)
ramspeed (HIB)
cachebench (HIB)
Mean
Geomean
Plain
25011.10
3363
7768
137.8
3227
14868.43
237096
41492.82
88084.72
34407.55
RIP-RH (none)
25817.16
3318
7756
137.7
3215
15097.01
234941
41477.74
87790.59
34338.04
RIP-RH (all isolated)
24813.43
3055
6717
137.97
3220
15190.69
233913
41550.9
87269.41
34351.52
OH (none)
-3.2%
1.34%
0.15%
0.07%
-0.37%
-1.53%
0.91%
0.04%
0.29%
0.20%
-0.22%
-1.08%
OH (all isolated)
0.79%
0.88%
13.39%
-0.12%
-0.22%
-2.17%
1.34%
-0.14%
0.89%
0.16%
1.48%
1.31%
Table 4: The benchmarking results for Phoronix indicate that RIP-RH induces no significant performance overhead with all
tests started as critical processes. In some cases, we observed a negative performance overhead, i.e., an improvement. We
attribute such results to measurement inaccuracies.
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand572