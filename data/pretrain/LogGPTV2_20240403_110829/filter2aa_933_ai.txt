number of detections:
• Renamed the function from RunShell to Run
• Renamed the function parameters from C2Server and C2Port to Server and 
Port
• Manipulated the "cmd.exe" string of the Process variable, splitting it into 
two different strings, P1 and P2, which are then concatenated using the standard 
strcat() C function into the P variable that is then passed as the second 
parameter of the CreateProcess Windows application programming interface 
(API) function
After taking these extremely simple steps to modify the original code, we compiled the 
simple TCP-based reverse shell once more, uploaded the file to VirusTotal, and received 
the following far more successful detection results—only 9 engines detected the file, down 
from 28 previously:
Figure 5.9 – VirusTotal's detection result of 9/68 
116     Bypassing the Static Engine
Here is a list of major antivirus vendors that we could successfully bypass using only  
this technique:
• Avast
• Avira (No Cloud)
• Bitdefender
• Comodo
• CrowdStrike Falcon
• Cybereason
• Cynet
• Fortinet
• F-Secure
• G-Data
• Malwarebytes
• Palo Alto Networks
• Sophos
• Symantec
• Trend Micro
For the purpose of the presented Proof of Concept (PoC), we did not use prewritten 
obfuscators but used a manual approach to manipulate antivirus static engines.
Important note
When antivirus software detects your malware, always look at the signature 
name provided by the antivirus. The signature name is the reason why the 
file was detected as malware. For example, if the detection name includes the 
string All your files have been encrypted, it is likely that 
the ransomware has been detected because the ransomware file includes a 
"malicious" string. Armed with this information, you may be able to bypass 
static engines by simply renaming the strings.
To summarize, YARA is a lightweight but powerful pattern-matching tool used by  
many antivirus vendors as part of their static detection engines. By exploring the building 
blocks of YARA, as we have done here, it is easier to understand how, if a YARA rule 
is not written precisely, it can be easily bypassed with some basic strings and code 
manipulations. 
Antivirus bypass using encryption     117
Now that we know how to use basic obfuscation to bypass antivirus software, we can move 
on to the next technique we used during our research: encryption. 
Antivirus bypass using encryption
Encrypting code is one of the most common ways to succeed with a bypass and one of the 
most efficient ways to hide the source code.
Using encryption, the malicious functionality of the malware will appear as a harmless 
piece of code and sometimes seem to be completely irrelevant, meaning the antivirus 
software will treat it as such and will allow the malware to successfully run on the system.
But before malware starts to execute its malicious functionality, it needs to decrypt its 
code within runtime memory. Only after the malware decrypts itself will the code be 
ready to begin its malicious actions.
The following diagram shows the difference between an EXE file with and  
without encryption:
Figure 5.10 – Malware before and after encryption took place 
In order to use code encryption techniques correctly, there are a few basic sub-techniques 
to be familiar with that we used while writing this book. Here are these sub-techniques:
• Oligomorphic code
• Polymorphic code
• Metamorphic code—this is not necessarily a code-encryption technique, but we 
have included it in this category to emphasize the distinctions
Let's expand these three sub-techniques.
118     Bypassing the Static Engine
Oligomorphic code
Oligomorphic code includes several decryptors that malware can use. Each time it runs 
on the system, it randomly chooses a different decryptor to decrypt itself, as shown in the 
following diagram:
Figure 5.11 – Oligomorphic diagram
To simplify our explanation, in this diagram we have illustrated seven ways to conduct 
the decryption mechanism, but in reality, malware can have 50, 100, and even several 
hundreds of types of decryptors that it can use to perform decryption on itself. The 
number is never fixed, but because of the limited quantity of decryptors that oligomorphic 
code uses, it is still possible to conduct detection using static signatures. 
Polymorphic code
Polymorphic code is more advanced than oligomorphic code. Polymorphic code mostly 
uses a polymorphic engine that usually has two roles. The first role is choosing which 
decryptor to use, and the second role is loading the relevant source code so that the 
encrypted code will match the selected decryptor.
Antivirus bypass using encryption     119
The number of decryptors will be far higher than with oligomorphic code. In fact, the 
quantity can reach the hundreds of thousands—and, in extreme cases, even millions of 
relevant decryptors, but the malicious result of the malware is always the same. You can 
see an example diagram here:
Figure 5.12 – Polymorphic diagram 
This example diagram presents a certain type of malware that has 15 different methods to 
achieve a single malicious functionality. We can see that each time it runs, the malware 
calls the polymorphic engine and chooses a decryptor it is going to use to execute the 
decryption. Based on this choice, it loads the relevant source code and then recompiles 
itself, thus managing to avoid detection by the static engine of the antivirus software.
This diagram is also a little different from malware in the real world. In the real world, 
there are more than 15 decryptors. In fact, there is an unlimited number of different 
methods to reach its malicious functionality.
120     Bypassing the Static Engine
Metamorphic code
Metamorphic code is code whose goal is to change the content of malware each time it 
runs, thus causing itself to mutate.
For example, the change can be such that the malware adds completely useless conditions 
and variables to itself with no effect on its functionality, changes machine instructions, 
adds no operation (NOP) instructions to itself in various locations, and more. 
The following diagram demonstrates an example of malware mutation using  
metamorphic code:
Figure 5.13 – Metamorphic diagram 
In this diagram, we can see three versions of the same code in x86 assembly language. 
With each mutation, the code looks different, but the result is always the same. Since the 
result of the mutation is identical to that of the original malware, it is possible to detect 
metamorphic-based malware using the heuristic engine.
These three sub-techniques are very powerful and can be used as part of our antivirus 
bypass techniques' arsenal.
Let's move on to the next technique we used during our research: packing. 
Antivirus bypass using packing     121
Antivirus bypass using packing
Packers are programs that are used most of the time to compress code in binary files 
(mostly EXE files). While these programs are not, in themselves, harmful and can in fact 
be used for a variety of useful purposes, malware authors tend to use packers to hide their 
code's intentions, making malware research more difficult and potentially aiding their 
code in thwarting static antivirus engines. This section of the book will present the major 
differences between regular and packed executables, explore how to detect packers, and 
explain how to defeat them. Central to this task is understanding the importance and 
maintenance of unpacking engines used by various types of antivirus software.
How packers work
To explain how packers work, we will run a simple "Hello World.exe" file through 
two different packers, Ultimate Packer for eXecutables (UPX) and ASPack, each of 
which uses a different packing technique.
In general, packers work by taking an EXE file and obfuscating and compressing the code 
section (".text" section) using a predefined algorithm. Following this, packers add a 
region in the file referred to as a stub, whose purpose is to unpack the software or malware 
in the operating system's runtime memory and transfer the execution to the original 
entry point (OEP). The OEP is the entry point that was originally defined as the start 
of program execution before packing took place. The main goal of antivirus software is 
to detect which type of packer has been used, unpack the sample using the appropriate 
techniques for each packer using its unpacking engine, and then classify the unpacked file 
as either "malicious" or "benign." 
The unpacking process
Some unpacking techniques are as simple as overwriting a memory region or a specific 
section in the executable. Many of them use various self-injection techniques, by 
injecting a blob or a shellcode to a predefined or allocated region of memory, transferring 
execution to the injected code, and finally overwriting their own process. Unpacking 
can also be achieved by loading an external dynamic-link library (DLL) to do the dirty 
job. Furthermore, some packers can use process-injection techniques such as process 
hollowing, discussed previously, which in most cases creates a legitimate process such 
as notepad.exe in a suspended state, hollows a part of its memory region, and finally 
injects the unpacked payload before resuming the suspended process. 
Let's look at a few practical unpacking examples to understand this concept in detail.
122     Bypassing the Static Engine
UPX – first example
This packer is widely used by legitimate software and malware authors alike. First, we 
will pack our sample Hello World.exe file, and then we will unpack it using the -d 
argument built into UPX. Finally, we will conduct the unpacking process manually to 
understand some of the inner workings of this packer. These two examples will give you 
an idea of the concepts and practice of the unpacking flow.
Before we pack the sample, we first put the Hello World.exe executable into a tool 
called DiE (short for Detect it Easy). The following screenshot tells us that the executable 
has been compiled with C/C++ and that there is no sign of any "protection" mechanism:
Figure 5.14 – DiE output 
We then check the entropy of the file. Entropy is a measurement of randomness in a given 
set of values or, in this case, when we check whether the file is packed or not. 
In the following screenshot, we can see that the entropy value is not high (less than 7.0), 
which tells us that the executable is not packed yet:
Antivirus bypass using packing     123
Figure 5.15 – DiE entropy value
Another great indicator of a packed file is the function imports that the file includes, 
which are small compared to a non-packed executable. The following screenshot shows 
a normal number of imported DLLs and API functions used by the executable using the 
PE-bear tool (https://github.com/hasherezade/bearparser):
Figure 5.16 – The Import Address Table (IAT) of the file 
124     Bypassing the Static Engine
In addition, in the following screenshot, we can see that the entry point (EP) of this 
program is 0x12D0, which is the address where this executable needs to begin  
its execution:
Figure 5.17 – The entry-point value of the file
Now that we understand what a regular file looks like before packing takes place, we can 
pack the Hello World.exe executable using UPX, with the following command:
UPX.exe  -o 
The following screenshot demonstrates how to do this using Command Prompt:
Figure 5.18 – The Hello World.exe packing UPX command 
Antivirus bypass using packing     125
Now, testing the packed Hello World.exe executable in the DiE tool reveals very 
different results, as shown here:
Figure 5.19 – DiE output after UPX packing took place
And as you can see, the executable is successfully detected as a UPX-packed binary.  
The entropy and the section names support this conclusion, as seen in the  
following screenshot:
Figure 5.20 – DiE entropy value after UPX packing took place 
126     Bypassing the Static Engine
Also, notice that the names of the sections changed to UPX0, UPX1, and UPX2, which can 
be taken as another indicator.
The following diagram shows the PE sections before and after UPX packing took place:
Figure 5.21 – UPX packing illustration
In addition, using the PE-bear tool again, we can see here that the entry point of this 
packed version of Hello World.exe has also been changed to 0xC230:
Figure 5.22 – The entry-point value of the file after UPX packing took place 
Antivirus bypass using packing     127
In the following screenshot, you can also clearly see the fairly small number of API 
function imports compared to the original executable:
Figure 5.23 – The IAT of the file after UPX packing took place
Once you understand the differences between the file before and after UPX packing, let's 
understand how to perform manual unpacking. 
Unpacking UPX files manually
Here, we will first unpack the UPX-packed file using UPX's built-in -d argument, and 
then we will tackle it manually.
With the following command, it is possible to unpack the UPX packed file:
UPX.exe -d  
128     Bypassing the Static Engine
The following screenshot demonstrates the unpacked, cleaned version of the Hello 
World.exe executable after unpacking it using the -d argument:
Figure 5.24 – The entry point of the file after unpacking 
Antivirus bypass using packing     129
We can see that we got the same clean binary with the same OEP and, of course, the DLLs' 
API function imports, as these existed before packing took place.
Please note that the entry point will not always be the same as it was before packing, 
especially when conducting manual unpacking. 
Now, we can execute the unpacking process manually to help us better understand the 
inner mechanisms of UPX and the unpacking flow, as follows:
1.  We first open the packed binary in x32dbg and find the entry point, with the 
instruction of pushad, as illustrated in the following screenshot:
Figure 5.25 – The pushad instruction in x32dbg
This screenshot shows that the instructions start at the earlier mentioned address of 
0xC230, which is the entry point of the UPX1 section.  
130     Bypassing the Static Engine
2. To confirm this, you can click on one of the memory addresses in the left pane 
of the debugger and choose Follow in Memory Map. This will point you to the 
mapped memory of the "UPX1" section, as seen in the following screenshot:
Figure 5.26 – The UPX1 section in x32dbg 
3. It is standard for UPX to overwrite the "UPX0" section with the unpacked data. 
With this knowledge, we can proceed to right-click on the "UPX0" section and 
click on Follow in Dump, as shown in the following screenshot:
Antivirus bypass using packing     131
Figure 5.27 – Follow in Dump button
Notice that this section is assigned ERW memory protection values, meaning that 
this section of memory is designated with execute, read, and write permissions.
4. Now, we can set a Dword Hardware, Access breakpoint on the first bytes in the 
memory offset of this section so that we can see when data is first being written to 
this location during execution, as can be seen in the following screenshot:
Figure 5.28 – Dword | Hardware on access breakpoint 
132     Bypassing the Static Engine
5. Then, we press F9 to execute the program—notice that this process repeats itself a 
number of times. As it executes, the Hardware, Access breakpoint will be triggered 
a number of times, and each time, it writes chunks of data to this memory section, 
as illustrated in the following screenshot:
Figure 5.29 – Written data chunks to the UPX0 section 
6. Now, if we right-click on the memory address—at 0x00401000, in this case— and 
click Follow in Disassembly, we will get to a place in the memory that looks strange 
at first glance, but if we scroll down a little bit, we can identify a normal "prologue" 
or function start, which is our actual OEP, as shown in the following screenshot:
Figure 5.30 – The OEP 
7. Another great indicator to check whether we have located the OEP is to check 
the strings. In the following screenshot, you can see that we found our "Hello 
World!" string after we located the OEP:
Antivirus bypass using packing     133
Figure 5.31 – String indicator after the unpacking process
Finally, we can use a tool such as Scylla (integrated into x32dbg) to dump the 
process and reconstruct the program's Import Address Table (IAT).
8. First, it is better to point the Extended IP (EIP) (or the RIP in 64-bit executables) 
register to the address of the OEP so that Scylla can detect the correct OEP and, 
from there, locate the IAT and get the imports.
This screenshot demonstrates how Scylla looks once we found the OEP, and then 
clicked IAT Autosearch and Get Imports:
Figure 5.32 – Scylla view: dump process 
134     Bypassing the Static Engine
9. Afterward, we select the Dump button to dump the process and save it as a file.
There are times where the unpacked executable will not work, so it is always helpful 
to try the Fix Dump button in Scylla, and then select the dumped executable. Here 
is a screenshot of IDA Pro recognizing the Hello World.exe executable with 
the Hello world! string:
Figure 5.33 – The "Hello World!" string followed by a working code (IDA Pro view)
Once we have followed these steps, the unpacked and dumped executable runs smoothly 
and without any problems. 
Now, let's proceed to the next example of manual unpacking.
Unpacking ASPack manually – second example
ASPack is another packer designed to pack PE files across a range of older and newer 
Windows versions. Malware authors also tend to use it to make detection by static 
antivirus engines harder and to potentially bypass them.
ASPack is similar in some ways to UPX. For instance, execution is transferred from 
different memory regions and sections to the OEP after unpacking has taken place. 
Antivirus bypass using packing     135
In this practical example, we packed the same Hello World.exe file we used with the 
UPX packer, this time using the ASPack packer. Then, as we did before, we inspected the 
packed executable with the DiE tool, as can be seen in the following screenshot:
Figure 5.34 – DiE output after ASPack packing took place
As you can see, DiE has detected the file as an ASPack packed file. Now, let's proceed  
as follows:
1. If we check the sections and imports using PE-bear, we notice that there are 
relatively few imported functions, as seen in the following screenshot:
Figure 5.35 – The IAT of the file after ASPack packing took place 
136     Bypassing the Static Engine
Please note that the section name where the packed executable is defined to start 
from is .aspack.
In this case, the ASPack-packed executable dynamically loads more API functions 
during runtime, using both LoadLibraryA()and GetProcAddress().
The function that we want to focus on is VirtualAlloc(), which allocates 
virtual memory at a given memory address. In the case of ASPack, after the second 
time that VirtualAlloc()is executed, we can go to the .text section and find 
there our OEP, and then dump the unpacked data, as we presented in the section on 
manually unpacking UPX.
2. As we saw before, this starts at the defined entry point with the pushad instruction, 
which is located in the .aspack section, as seen in the following screenshot:
Figure 5.36 – The entry point
3. Now, we can put a breakpoint on the VirtualAlloc() API function. This can 
be done by typing the bp command followed by the function name, as seen in the 
following screenshot:
Figure 5.37 – The breakpoint on VirtualAlloc using the bp command 
Antivirus bypass using packing     137
This will cause the process to break at the call to the VirtualAlloc()  
API function.
4. Once we return from the VirtualAlloc() API function, we can observe 
that two memory regions were allocated: at the 0x00020000 address and at 
the 0x00030000 address. The following screenshot shows the two calls to 
VirtualAlloc() and the return value of the starting address of the second 
memory region, as part of the EAX register:
Figure 5.38 – The two allocated memory regions using the VirtualAlloc Windows API function
5. The allocated memory of 0x00020000 will contain a "blob" or set of instructions 
that will unpack the code into the second memory region of 0x00030000, and 
from there, the unpacked code will be moved to the .text section of the process. 
This is done in the form of a loop that in turn parses and builds the unpacked code. 
After the loop is done, the Central Processing Unit (CPU) instruction of rep 
movsd is used to move the code to the .text section, where our OEP will appear. 
The following screenshot demonstrates the use of the rep movsd instruction, 