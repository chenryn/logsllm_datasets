title:LFI: A practical and general library-level fault injector
author:Paul Dan Marinescu and
George Candea
978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
379
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:24 UTC from IEEE Xplore.  Restrictions apply. 
LFI:APracticalandGeneralLibrary-LevelFaultInjectorPaulD.MarinescuandGeorgeCandeaSchoolofComputerandCommunicationSciencesEPFLLausanne,SwitzerlandAbstractFaultinjection,acriticalaspectoftestingrobustsys-tems,isoftenoverlookedinthedevelopmentofgeneral-purposesoftware.Webelievethisisduetotheabsenceofeasy-to-usetoolsandtotheextensivemanuallaborrequiredtoperformfaultinjectiontests.ThispaperintroducesLFI(LibraryFaultInjector),atoolthatautomatestheprepa-rationoffaultscenariosandtheirinjectionatthebound-arybetweensharedlibrariesandapplications.LFIextendspriorworkbyautomaticallyproﬁlingfaultbehaviorsofli-brariesviastaticanalysisoftheirbinaries,thusreducingthedependenceonhumanlaborandperfectdocumenta-tion.Wepresenttechniquesforautomaticallygeneratinginjectionscenariosandwedescribeasimplelanguageforexpressingsuchscenarios.LFIdoesnotrequireaccesstolibraries’sourcecodeandworksforLinux,Windows,andSolarisonx86andSPARCplatforms.1.IntroductionGeneral-purposeapplicationsrelyheavilyonsharedli-braries.Forexample,wefoundthattheMySQLdatabaseserverdirectlylinksto13sharedlibraries,theApacheWebservercanlinktomorethan30sharedlibrariesdepend-ingoncompileoptionsandAdobePhotoshopdirectlylinksto36sharedlibraries.Ifwecountrecursivelythesharedlibrariesusedbylibrariesthemselves,thenumbersareashighas138inthecaseofAdobePhotoshop.Theseapplicationsmakeimportantassumptionsabouthowtheunderlyinglibrarieswork,andanyguaranteestheytrytoprovidetousersdependheavilyonthecorrectnessofsuchassumptions.Forsoftwarethatisexpectedtobehighlydependable(databaseservers,Webservers,emailclients,etc.)testingmustverifythatthewaysinwhichapplica-tionsusetheselibrariesisconsistentwiththeactuallibrarybehavior.Inparticular,itisessentialtoverifythattheappli-cationscorrectlyhandlefaultsatorbelowthelibrarylayerthatmanifestaserrorsreturnedbythelibraryfunctions.Unfortunately,cornercasesareeasytomissandcanleadtocrashesorcorrectnessviolations,suchaswhentheresultofamemoryallocationisnotchecked,orwhenaread()callisnotretriedaftergettinganEINTRreturncode.Thesebugsarehardtoﬁndthroughinputtesting,becausetheyaretriggeredbylow-probabilityeventsthataretypicallyinput-independentandoccurbelowthelibrarylayer.Totestprogramrobustness,wewishtosimulatesucherroreventsattheprogram/libraryinterfaceandthenobservethepro-gram’sreaction.Ideally,thesimulationshouldbemini-mallyinvasiveandshouldnotrequireaccesstoproprietaryportions(e.g.,sourcecode)oftheprogramorlibrary.Thechallenge,though,isthatregularsystemshaveanoverwhelmingnumberoflibraries:atypicalLinuxsystemhas∼1000libraries,WindowsXP∼1400,andWindowsVista∼1650.Toourknowledge,currentlibraryfaultinjec-torsrequireconsiderableamountsofmanualworkandarerestrictedtotheCstandardlibrary(libc),thusnotscalingtotestalllibrariesusedbyprograms.Libraryfaultinjectionmustthereforebegeneralizedandautomatedtotheutmost,orelsethescopeoftestingwillhavetostaynarrow.Notonlyisitnecessarytoautomatetheinjectionoffaults,butalsotheinferenceofthelibraries’faultproﬁles.Librariescanchangefrequently;e.g.,GNUlibc,perhapsthemostwidelyusedsharedlibrary,hasalreadyseentworeleasesintheﬁrstthreemonthsofthisyear[8].Byus-ingsharedlibraries,applicationsacceptthattheselibrariesmaychangeunderneaththem;yet,cantheysuitablycope?Frequentchangescanintroduceunexpectednewbehavior,muchofwhichmaynotevenbedocumented.Whilemanylibrariesaimforbackwardcompatibility,evenGNUlibchasnotalwaysguaranteedcompatibility.Relyingondocumentationtodecidehowalibrarymayexposefaultsisrisky:evenifthedocumentationexistsandiscorrectforonelibraryversion,itcangetoutofsyncwiththenextone.Asweshowin§3.1,librarydocumen-tationcanbeincompleteandmisssomeoftheerrorreturncodes.Wemustthereforeextractinformationonthepo-tentialerrorsdirectlyfromthelibraries;sincesourcecodeisoftennotavailable,thelibrarybinariesthemselvesmust978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
380
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:24 UTC from IEEE Xplore.  Restrictions apply. 