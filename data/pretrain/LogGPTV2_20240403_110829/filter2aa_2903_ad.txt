15.4.4 反跟踪和调试的程序
15.4.5 时间敏感的代码
15.4.6 应对措施
15.5 可调试性例析
15.5.1 健康性检查和BSOD
15.5.2 可控制性
15.5.3 公开的符号文件
15.5.4 WER
15.5.5 ETW和日志
15.5.6 性能计数器
15.5.7 内置的内核调试引擎
15.5.8 手动触发崩溃
15.6 与安全、商业秘密和性能的关系
15.6.1 可调试性与安全性
15.6.2 可调试性与商业秘密
15.6.3 可调试性与性能
15.7 本章小结
参考资料
第16章 可调试性的实现
16.1 角色和职责
16.1.1 架构师
16.1.2 程序员
16.1.3 测试人员
16.1.4 产品维护和技术支持工程师
16.1.5 管理者
16.2 可调试架构
16.2.1 日志
16.2.2 输出调试信息
16.2.3 转储
16.2.4 基类
16.2.5 调试模型
16.3 通过栈回溯实现可追溯性
16.3.1 栈回溯的基本原理
16.3.2 利用DbgHelp函数库回溯栈
16.3.3 利用RTL函数回溯栈
16.4 数据的可追溯性
16.4.1 基于数据断点的方法
16.4.2 使用对象封装技术来追踪数据变化
16.5 可观察性的实现
16.5.1 状态查询
16.5.2 WMI
16.5.3 性能计数器
16.5.4 转储
16.5.5 打印或者输出调试信息
16.5.6 日志
16.6 自检和自动报告
16.6.1 BIST
16.6.2 软件自检
16.6.3 自动报告
16.7 本章小结
参考资料
版权信息
书名：软件调试（第2版）卷1：硬件基础
ISBN：978-7-115-49250-0
本书由人民邮电出版社发行数字版。版权所有，侵权必究。
您购买的人民邮电出版社电子书仅供您个人使用，未经授权，不得
以任何方式复制和传播本书内容。
我们愿意相信读者具有这样的良知和觉悟，与我们共同保护知识产
权。
如果购买者有侵权行为，我们可能对该用户实施包括但不限于关闭
该帐号等维权措施，并可能追究法律责任。
版权
著    张银奎
责任编辑 陈冀康
人民邮电出版社出版发行  北京市丰台区成寿寺路11号
邮编 100164  电子邮件 PI:EMAIL
网址 http://www.ptpress.com.cn
读者服务热线：(010)81055410
反盗版热线：(010)81055315
内容提要
本书堪称是软件调试的“百科全书”。作者围绕软件调试的“生态”系
统（ecosystem）、异常（exception）和调试器 3 条主线，介绍软件调试
的相关原理和机制，探讨可调试性（debuggability）的内涵、意义以及
实现软件可调试性的原则和方法，总结软件调试的方法和技巧。
第1卷主要围绕硬件技术展开介绍。全书分为4篇，共16章。第一
篇“绪论”（第1章），介绍了软件调试的概念、基本过程、分类和简要
历史，并综述了本书后面将详细介绍的主要调试技术。第二篇“CPU及
其调试设施”（第2～7章），以英特尔和ARM架构的CPU为例系统描述
了CPU的调试支持。第三篇“GPU及其调试设施”（第8～14章），深入
探讨了Nvidia、AMD、英特尔、ARM和Imagination 这五大厂商的
GPU。第四篇“可调试性”（第15～16章），介绍了提高软件可调试性的
意义、基本原则、实例和需要注意的问题，并讨论了如何在软件开发实
践中实现可调试性。
本书理论与实践紧密结合，既涵盖了相关的技术背景知识，又针对
大量具有代表性和普遍意义的技术细节进行了讨论，是学习软件调试技
术的宝贵资料。本书适合所有从事软件开发工作的读者阅读，特别适合
从事软件开发、测试、支持的技术人员，从事反病毒、网络安全、版权
保护等工作的技术人员，以及高等院校相关专业的教师和学生学习参
考。
历史回眸
我是1949年进入麻省理工学院（MIT）的。就在那一年，第一台存
储程序计算机在英国的剑桥和曼彻斯特开始运行。我的一个本科同学
Kenneth Ralston是学数学的，他偶尔会和我如痴如醉地谈起一台神秘的
机器，说这台机器当时正在MIT附近的Smart街上的Barta楼内组装。我
的好奇心后来在1954年的秋天得到了满足，那时我开始学习我的第一门
计算机课程“数字计算机编码与逻辑”。那门课程是Charles Adams教的，
他是自动编程（现在称为编译）领域的先锋。当时使用的机器叫作“旋
风”，被放置在一间充满了真空管电路的房间内。它由美国海军投资建
立，用来研究飞机模拟。
因为我的知识背景及我所完成的电子工程专业的硕士课程，一个助
研基金约请我在旋风计算机上用“最速下降法”解决一个最优化问题。这
让我彻底熟悉了那一套烦琐的程序准备工作。我们以旋风机器的汇编语
言编写程序，然后使用Friden电传打字机将以字符和数字表示的代码以
打孔的方式输出到纸带上。纸带是用一个Ferrante光电读出器读入计算
机的，然后交给“综合系统2”的“系统软件”进行处理。处理结果是一个
二进制纸带，以大约每秒钟10行的速度打孔出来，每行代表一个6位字
符。而后，用户可以调用一个简单的装载程序（装载程序是保存在几个
可以来回交换的内存单元中的）将二进制的纸带装入2048字的内存中，
之后就期待着程序的正常运行。用户也可以在控制台的电传打字机上调
用“综合系统”的输出例程来把结果打印出来，或者把它们写到一个原始
的磁带单元中，留待以后离线打印。
那时最漂亮的输出设备是CRT显示屏，用户可以在上面一个点一个
点地画出图表和图片。上面配备了一部照相机，可以把显示的图片录制
在胶片上。系统程序员已经开发好了“崩溃照相”功能，可以把程序出错
时内存中的内容显示在CRT显示屏上。用户可以在第二天早上取到显影
后的胶片，然后用一个缩微胶卷阅读器来研究上面的八进制数字。在那
时，这是调试旋风程序的主要方法，除此之外，就是把中间结果打印出
来。
大多数我们这样的普通用户不知道的是，在Barta楼里有一个后屋，
在那里第一个基于计算机的飞机跟踪和威胁检测系统上的分类工作正在
进行。那里放置了一些更先进的设备，有很多台PPI（计划和位置标识
器）显示器，并且已经开发出了第一个定点设备—— 光笔，用来跟计
算机实时交互。
旋风计算机最初的主内存是威廉斯管型的，这还不足以满足实时操
作的可靠性标准。这一需求带动了相关研究工作并促进了磁心内存的产
生。旋风工程师建造了一个非常简单的计算机，称作内存测试机
（MTC），用来测试新的内存。因为新内存表现良好，所以立刻把它安
装在旋风计算机上，而后MTC也就功成身退了。
旋风计算机上的工作促使了MIT林肯实验室的成立，实验室的主要
责任是基于旋风计算机上的实时系统技术开发一个美国国家空中防御系
统。同时，林肯实验室也进行了计算机技术的研究，并建立了两台使用
新的晶体管技术的机器TX-0和TX-2。之所以编号都是偶数，是因为奇
数（odd）在英文中同时有古怪的意思，主管设计者之一Wesley Clark曾
经说：“林肯不做奇数的（古怪的）计算机”。TX-0和TX-2的关系类似
于MTC和旋风的关系：TX-0用于测试非常大的（按当时标准）内存，
然后这些内存再用于功能更强大的TX-2。这些新机器继承了旋风系统中
使用CRT显示屏和发光笔这些与用户实时交互的能力，同时也保留了使
用纸带作为程序的主要介质。
在开发TX-0的同时，在MIT安装了一台IBM 704机器。它用来补充
并最终接替了旋风作为MIT一般用户的主计算机。当林肯实验室不再需
要TX-0后，MIT电子工程系长期租用了它。MIT的师生（特别是电子研
究实验室的师生），都为拥有了一台计算机而大喜过望，因为从此研究
人员便可以自由使用并亲手操作这台计算机，这要比IBM 704计算机采
用的批处理方式方便得多。
我于1958年8月完成了我的博士论文，成为一个四处寻找机遇的学
校教员。我的新办公室在康普顿实验室楼（26号楼）的二楼。有一天那
里发生的事情引起了我的注意，人们正在一块宽广的区域安装一台TX-
0，它的位置就在IBM 704计算机的正上方。
与TX-0一起到来的软件工具只有两个，一个是简单的汇编器程序，
另一个是“UT-3”（3号工具纸带）。两个程序都是二进制打孔纸带的形
式，没有源代码。因为它们是以八进制代码手工输入的。UT-3通过一个
控制台打字机与用户交互（这里仍然是一个电传打字机，它包含了普通
打字机的功能，可以被用户或被TX-0所驱动，将输入的字符传递到计算
机或打印在纸上；这台打字机还带有一个机械纸带打孔器和阅读器，可
以将字符打在纸带上或从纸带把字符读入计算机中）。用户可以以八进
制形式把数据输入到指定的内存位置，也可以要求打印指定内存位置或
区域的内容。在MIT，我们马上着手给这两个程序增加功能。汇编器最
后演化为一个叫作MACRO的程序，除了有其他熟悉的汇编语言功能
外，它还支持宏指令（宏功能是从Doug McIlroy在贝尔实验室的研究工
作中得到启发的）。
有了汇编器后，就使得大范围重写和扩展UT-3成为可能。Tom
Stockham和我使新的程序支持符号，新的程序可以使用汇编器生成的符
号表。我们把这个程序称作FLIT（电传打字机询问纸带），这个名字仿
用了当时一个很常用的杀虫喷雾剂的名字（当Grace Hopper在哈佛的继
电器计算机上工作时，跟踪到一次故障是由于继电器触点上的一只飞蛾
造成的，从此人们开始把计算机的问题称作bug，即“臭虫”）。FLIT最
重要的功能是为调试程序（“除虫”）提供了断点设施。用户可以要求
FLIT在被测试程序中向指定的指令位置插入最多4个断点。当被测试的
程序遇到一个断点时，FLIT 会通知用户，并且允许用户分析或修改内
存的内容。分析结束后，用户可以要求FLIT继续执行程序，就像没有中
断过一样。FLIT程序是后来的DDT（另一种杀虫剂）调试程序的典范，
DDT是MIT的学生为DEC公司生产的PDP-1计算机开发的。
FLIT（以及TX-0）的缺点之一是，没有办法防止被测试程序向调
试程序占用的内存里存储数据，这会使调试程序停止工作。在给DEC
PDP-1建立分时系统时，我们做了特别的设计，使得DDT与待测试的程
序在各自的地址空间中执行，但DDT仍可以观察和改变被测试程序中的
信息。我们把它称为“隐身调试器”。为了提供这种保护，需要对PDP-1
增加一些逻辑，它们是随着为支持分时系统而做的更改和补充一起安装
的。这个系统在1963年前后开始运行。
PDP-1上的分时系统为伯克利加州大学在SDS 940上建立的分时系
统提供了典范（L. Perter Deutsch兜里装着的那个小操作系统从MIT转移
到了伯克利加州大学）。我隐约地相信，隐身调试器的机制对于DEC
PDP-11/45的设计产生了重要影响，贝尔实验室就为这个系统开发了
UNIX。
Jack B. Dennis
2008年4月于马萨诸塞州贝尔蒙特
第2版前言
在900多年前的一个秋夜，一轮明月高高地挂在黄州的天空。夜深
了，很多人都已经入睡。但在承天寺的庭院里，还有两个人在散步。他
们一边交谈，一边欣赏美丽的夜景。洁白的月光泼洒在庭院里，像是往
庭院里注入了一汪汪清水，把地面变成了水面，清澈透明。翠竹和松柏
的影子映在其中，随风摇摆，仿佛水草在晃动。这两个人中，一位是大
文豪苏轼，另一位是他的好朋友张怀民。这一年是公元1083年，苏轼46
岁。
可能是在当晚，也可能是在第二日，苏轼写了一篇短文来记录这次
夜游。这篇短文便是著名的《记承天寺夜游》。第一次看到这篇散文，
我便爱不释手。每次读苏轼文集，都喜欢把这一篇再读一遍。文章很
短，不足百字，但意境隽永，令人回味无穷。
“元丰六年十月十二日夜，解衣欲睡，月色入户，欣然起行。 念无