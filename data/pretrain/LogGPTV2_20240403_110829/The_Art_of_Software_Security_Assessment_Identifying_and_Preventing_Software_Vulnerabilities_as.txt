As you can see, there's a major difference between handling a failure in read_integer() 
and one in read(). This simple example shows how subtle changes can drastically 
affect a code path in a way that's not obvious. Functions in real-world applications are 
usually more complicated and contain many code paths. When examining a function 
you've identified and traversing the relevant code paths, minimizing your chances of 
missing vulnerabilities is important. Many code paths share common sections, so 
analyzing all the relevant ones isn't quite as much work as it seems. Also, you can 
usually handle reading several code paths at once. For example, reading the previous 
function, you can safely ignore most of the error-checking failures as not being 
relevant to security. However, be careful when you make the distinction between 
what is and isn't security relevant. Reviewers tend to overlook code paths containing 
serious vulnerabilities in these two areas: error-checking branches and pathological 
code paths. 
Error-checking branches are the code paths that are followed when validity checks 
result in an error. They include the two paths shown in the preceding examples and 
typically cause a return from a function or exit from the program. In the examples, 
these simple code paths could be dismissed easily, but remember that they are still 
code paths. Even if triggering the error seems unlikely, it's important to see what 
happens when the error does occur because the error-handling code belongs to a 
code path that's hardly ever traversed and probably not as well tested and audited. 
This topic is discussed more in Chapter 7(? [????.]), "Program Building Blocks." 
Pathological code paths describe functions with many small and nonterminating 
branches (that is, branches that don't result in abrupt termination of the current 
function). These functions create an exponential number of similar code paths and 
can be extremely difficult to trace. Going through these functions several times and 
examining each code path in isolation is a good idea, as some paths can be triggered 
by unexpected conditions. That is, it's possible to trigger paths that make no sense 
logically but aren't prohibited by the implementation. 
Subsystem and Dependency Analysis 
A common misconception is that security code review should be targeted at modules 
that deal directly with user input from a specified entry point. Although this approach 
sounds reasonable, it could fail to account for all possible control flows and data flows 
affected by the input. First, the application design might not allow easy separation of 
the entry point and data parsing from the rest of the codebase. For instance, the 
relevant data-parsing module might depend on several other system components. 
Second, the application might not be especially modular in its implementation. Both 
reasons result in the same problemyou can't just pick relevant code paths and 
examine them without much knowledge of the rest of the application. Therefore, you 
need to make an early effort to identify module subsystems and dependencies and 
familiarize yourself with their behavior. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
150 
For example, large applications commonly use their own memory allocation 
subsystems. These allocators might be wrappers to system memory allocators or 
complete replacements, which fall back on the system allocator only when requesting 
large blocks the application manages (the Apache Web server manages its memory in 
a similar manner). Any variance between the system allocator's and the custom 
allocator's behavior might be important, as you see later in Chapter 7(? [????.]). 
In addition to allocators, you might need to review a variety of common subsystems 
more thoroughly, including the following: 
String and binary data buffer handlers 
String parsers 
System API replacements (such as file manipulation APIs and network APIs) 
Data storage subsystems (hash table classes, for example) 
You also need to be familiar with the quirks of any standard system functionality in 
use. Later chapters cover these issues for both Windows and UNIX operating systems. 
However, many less used functions aren't mentioned. When you encounter system 
functions you don't know, learn exactly how that function works. After all, such 
functions can often provide you with new security relevant quirks to look for in the 
future. 
Rereading Code 
Even the simple act of reading tends to be an iterative process. Often you need to 
read the same code paths several times over to account for all the vulnerability 
classes you need to consider. For example, one approach is to focus on 
integer-related vulnerabilities, memory management vulnerabilities, and formatted 
data vulnerabilities in one pass. Then you make another pass to focus on functional 
audits (checking return values, error prone API calls, and so on). Finally, you could 
make a pass to identify any synchronization vulnerabilities. 
There's no metric to determine how many passes a piece of code requires. For 
example, you don't need to consider synchronization vulnerabilities if the code 
doesn't run in a multithreaded context, deal with asynchronous events, or modify 
shared data. Exercise your own judgment in determining how many passes to make; 
however, at least two passes are recommended because with only one pass, you 
might miss subtle complexities in the code or make an obvious oversight. 
Especially complex code can be difficult to wrap your brain around, so you might need 
several passes to understand what it's doing. Even after reaching a thorough 
understanding, it's a good idea to go back later and check that your comprehension of 
the code is correct as well as complete. Security vulnerabilities usually exist because 
of oversights in seemingly minor details that have a major impact on the code. You 
need to keep asking questions about even simple-looking code. Are global variables 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
151 
or structure members altered? Are return values or arguments not always initialized? 
Are return values ignored or misinterpreted because of typing errors or incorrect calls? 
These questions are just a few things you need to consider for each function you 
examine. The best way to make sure you cover all your bases is to evaluate some 
code and then go back and make sure you didn't miss anything. Even Santa has to 
check his list twice! 
Desk-Checking 
Sometimes you see code that's difficult to evaluate in your head. The code might have 
too many variables coming from different places and being reassigned, or peculiar 
code constructs with side effects that aren't obvious. In these cases, desk-checking is 
recommended. Desk-checking is a technique consisting of creating a table of all 
variables in a code fragment and then populating them with some initial values. They 
should be values that you think the code might not handle correctly (such as those 
gained from test cases, explained in the next section). Then you step through each 
line of the function, updating each value according to the code. To see how this 
technique works, first look at this simple code: 
int read_line(int sock, char *buf, size_t length) 
{ 
    int i, c = 0, n; 
    for(i = 0; ; i++){ 
        n = read(sock, (void *)&c, 1); 
        if(n != 1) 
            return -1; 
        if(c == '\n') 
            break; 
        if(i = length) 
        return 1; 
    new_size = length + data_used + EXTRA; 
    if(new_size < length)    // check for integer overflow 
        return 0; 
    new_data = (unsigned char *)myrealloc(data, new_size); 
    if(new_data == NULL) 
        return 0; 
    data_size = new_size; 
    data = new_data; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
156 
    return 1; 
} 
void *myrealloc(void *data, size_t new_size) 
{ 
    void *block; 
    new_size = (new_size + 15) & 0xFFFFFFF0; 
    block = realloc(data, new_size); 
    return block; 
} 
This fairly complicated code path has a subtle vulnerability. Specifically, an integer 
overflow can occur in myrealloc() when rounding up new_size (as shown in the bold 
line), but because of an integer overflow check in GrowBuffer(), only a select few 
values trigger the vulnerability. (Again, if the vulnerability isn't clear to you, don't 
worry. Integer overflows are covered in more detail in Chapter 6(? [????.]).) The 
exact value of len being passed to ConnectionRead() (or any function that calls the 
GrowBuffer() function) to trigger the integer overflow depends on what the data_used 
value is. If you assume it's 0, the previous test cases don't trigger the integer 
overflow because of the following code snippet from GrowBuffer(): 
     new_size = length + data_used + EXTRA; 
     if(new_size < length)   // check for integer overflow 
         return 0; 
The EXTRA added to new_size causes an integer overflow when using the test case of 
len = -1, and the large negative value test case doesn't overflow and realloc() 