Modern token-based authentication
    return tokenId;
}
@Override
public Optional read(Request request, String tokenId) {
    return database.findOptional(this::readToken,
            "SELECT user_id, expiry, attributes " +
            "FROM tokens WHERE token_id = ?", hash(tokenId)); 
}
@Override
public void revoke(Request request, String tokenId) {
    database.update("DELETE FROM tokens WHERE token_id = ?",
            hash(tokenId));                                   
}
private String hash(String tokenId) {             
    var hash = CookieTokenStore.sha256(tokenId);  
    return Base64url.encode(hash);                
}                                                 
5.3.2
Authenticating tokens with HMAC
Although effective against token theft, simple hashing does not prevent an attacker
with write access from inserting a fake token that gives them access to another user’s
account. Most databases are also not designed to provide constant-time equality
comparisons, so database lookups can be vulnerable to timing attacks like those dis-
cussed in chapter 4. You can eliminate both issues by calculating a message authentica-
tion code (MAC), such as the standard hash-based MAC (HMAC). HMAC works like a
normal cryptographic hash function, but incorporates a secret key known only to
the API server. 
DEFINITION
A message authentication code (MAC) is an algorithm for comput-
ing a short fixed-length authentication tag from a message and a secret key. A
user with the same secret key will be able to compute the same tag from the
same message, but any change in the message will result in a completely dif-
ferent tag. An attacker without access to the secret cannot compute a correct
tag for any message. HMAC (hash-based MAC) is a widely used secure MAC
based on a cryptographic hash function. For example, HMAC-SHA-256 is
HMAC using the SHA-256 hash function.
The output of the HMAC function is a short authentication tag that can be appended
to the token as shown in figure 5.8. An attacker without access to the secret key can’t
calculate the correct tag for a token, and the tag will change if even a single bit of the
token ID is altered, preventing them from tampering with a token or faking new ones.
 In this section, you’ll authenticate the database tokens with the widely used HMAC-
SHA256 algorithm. HMAC-SHA256 takes a 256-bit secret key and an input message
and produces a 256-bit authentication tag. There are many wrong ways to construct a
secure MAC from a hash function, so rather than trying to build your own solution
Hash the 
provided token 
when storing 
or looking up in 
the database.
Reuse the SHA-256 
method from the 
CookieTokenStore 
for the hash.
173
Hardening database token storage
you should always use HMAC, which has been extensively studied by experts. For
more information about secure MAC algorithms, I recommend Serious Cryptography by
Jean-Philippe Aumasson (No Starch Press, 2017).
 Rather than storing the authentication tag in the database alongside the token ID,
you’ll instead leave that as-is. Before you return the token ID to the client, you’ll com-
pute the HMAC tag and append it to the encoded token, as shown in figure 5.9. When
the client sends a request back to the API including the token, you can validate the
authentication tag. If it is valid, then the tag is stripped off and the original token ID
passed to the database token store. If the tag is invalid or missing, then the request
can be immediately rejected without any database lookups, preventing any timing
attacks. Because an attacker with access to the database cannot create a valid authenti-
cation tag, they can’t use any stolen tokens to access the API and they can’t create
their own tokens by inserting records into the database.
 Listing 5.10 shows the code for computing the HMAC tag and appending it to the
token. You can implement this as a new HmacTokenStore implementation that can be
L2xuanMgu3ejXRjw1GmBOdLLbxI
HMAC-SHA256
URL-safe Base64
L2xuanMgu3ejXRjw1GmBOdLLbxI.dnYUdylHgTGpNcv39ol...
f9d9d851dca5...
The encoded token
is authenticated with
HMAC using a secret key.
The HMAC tag is encoded
and appended to the token.
Key
The random database token
ID is encoded with Base64.
Figure 5.8
A token can be protected against theft and forgery by computing 
a HMAC authentication tag using a secret key. The token returned from the 
database is passed to the HMAC-SHA256 function along with the secret key. 
The output authentication tag is encoded and appended to the database ID to 
return to the client. Only the original token ID is stored in the database, and 
an attacker without access to the secret key cannot calculate a valid 
authentication tag.
174
CHAPTER 5
Modern token-based authentication
wrapped around the DatabaseTokenStore to add the protections, as HMAC turns out
to be useful for other token stores as you will see in the next chapter. The HMAC tag
can be implement using the javax.crypto.Mac class in Java, using a Key object passed
to your constructor. You’ll see soon how to generate the key. Create a new file Hmac-
TokenStore.java alongside the existing JsonTokenStore.java and type in the contents
of listing 5.10.
package com.manning.apisecurityinaction.token;
import spark.Request;
import javax.crypto.Mac;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.util.*;
public class HmacTokenStore implements TokenStore {
    private final TokenStore delegate;                        
    private final Key macKey;                                 
    public HmacTokenStore(TokenStore delegate, Key macKey) {  
        this.delegate = delegate;
        this.macKey = macKey;
    }
Listing 5.10
Computing a HMAC tag for a new token
Token
database
Database token
store
HMAC token
store
tokenId
tokenId.tag
Secret key
API server boundary
The token given to the client
has an authentication tag.
The token in the database
is missing the tag.
tokenId: data
Figure 5.9
The database token ID is left untouched, but an HMAC authentication tag is 
computed and attached to the token ID returned to API clients. When a token is presented to 
the API, the authentication tag is first validated and then stripped from the token ID before 
passing it to the database token store. If the authentication tag is invalid, then the token is 
rejected before any database lookup occurs.
Pass in the real 
TokenStore 
implementation 
and the secret key 
to the constructor.
175
Hardening database token storage
    @Override
    public String create(Request request, Token token) {
        var tokenId = delegate.create(request, token);    
        var tag = hmac(tokenId);                          
        return tokenId + '.' + Base64url.encode(tag);    
    }
    private byte[] hmac(String tokenId) {
        try {
            var mac = Mac.getInstance(macKey.getAlgorithm());  
            mac.init(macKey);                                  
            return mac.doFinal(                                
                    tokenId.getBytes(StandardCharsets.UTF_8)); 
        } catch (GeneralSecurityException e) {
            throw new RuntimeException(e);
        }
    }
    @Override
    public Optional read(Request request, String tokenId) {
        return Optional.empty(); // To be written
    }
}
When the client presents the token back to the API, you extract the tag from the pre-
sented token and recompute the expected tag from the secret and the rest of the
token ID. If they match then the token is authentic, and you pass it through to the
DatabaseTokenStore. If they don’t match, then the request is rejected. Listing 5.11
shows the code to validate the tag. First you need to extract the tag from the token and
decode it. You then compute the correct tag just as you did when creating a fresh
token and check the two are equal.
WARNING
As you learned in chapter 4 when validating anti-CSRF tokens, it is
important to always use a constant-time equality when comparing a secret
value (the correct authentication tag) against a user-supplied value. Timing
attacks against HMAC tag validation are a common vulnerability, so it is criti-
cal that you use MessageDigest.isEqual or an equivalent constant-time
equality function.
@Override
public Optional read(Request request, String tokenId) {
    var index = tokenId.lastIndexOf('.');            
    if (index == -1) {                               
        return Optional.empty();                     
    }                                                
    var realTokenId = tokenId.substring(0, index);   
Listing 5.11
Validating the HMAC tag
Call the real TokenStore to generate the
token ID, then use HMAC to calculate the tag.
Concatenate the 
original token ID 
with the encoded tag 
as the new token ID.
Use the javax 
.crypto.Mac class 
to compute the 
HMAC-SHA256 tag.
Extract the tag from the end 
of the token ID. If not found, 
then reject the request.
176
CHAPTER 5
Modern token-based authentication
    var provided = Base64url.decode(tokenId.substring(index + 1));     
    var computed = hmac(realTokenId);                                  
    if (!MessageDigest.isEqual(provided, computed)) {   
        return Optional.empty();
    }
    return delegate.read(request, realTokenId);   
}
GENERATING THE KEY
The key used for HMAC-SHA256 is just a 32-byte random value, so you could generate
one using a SecureRandom just like you currently do for database token IDs. But many
APIs will be implemented using more than one server to handle load from large num-
bers of clients, and requests from the same client may be routed to any server, so they
all need to use the same key. Otherwise, a token generated on one server will be
rejected as invalid by a different server with a different key. Even if you have only a sin-
gle server, if you ever restart it, then it will reject tokens issued before it restarted
unless the key is the same. To get around these problems, you can store the key in an
external keystore that can be loaded by each server.
DEFINITION
A keystore is an encrypted file that contains cryptographic keys
and TLS certificates used by your API. A keystore is usually protected by a
password. 
Java supports loading keys from keystores using the java.security.KeyStore class,
and you can create a keystore using the keytool command shipped with the JDK. Java
provides several keystore formats, but you should use the PKCS #12 format (https://
tools.ietf.org/html/rfc7292) because that is the most secure option supported by
keytool. 
 Open a terminal window and navigate to the root folder of the Natter API project.
Then run the following command to generate a keystore with a 256-bit HMAC key:
keytool -genseckey -keyalg HmacSHA256 -keysize 256 \     
    -alias hmac-key -keystore keystore.p12 \
    -storetype PKCS12 \       
    -storepass changeit     
You can the load the keystore in your main method and then extract the key to pass to
the HmacTokenStore. Rather than hard-code the keystore password in the source
code, where it is accessible to anyone who can access the source code, you can pass it
in from a system property or environment variable. This ensures that the developers
writing the API do not know the password used for the production environment. The
Decode the tag
from the token
and compute
the correct tag.
Compare the two tags with a 
constant-time equality check.
If the tag is valid, then call 
the real token store with 
the original token ID.
Generate a 
256-bit key for 
HMAC-SHA256.
Store it in a 
PKCS#12 
keystore.
Set a password for the keystore—
ideally better than this one!
177
Hardening database token storage
password can then be used to unlock the keystore and to access the key itself.5 After
you have loaded the key, you can then create the HmacKeyStore instance, as shown
in listing 5.12. Open Main.java in your editor and find the lines that construct the
DatabaseTokenStore and TokenController. Update them to match the listing.
var keyPassword = System.getProperty("keystore.password",   
        "changeit").toCharArray();                          
var keyStore = KeyStore.getInstance("PKCS12");       
keyStore.load(new FileInputStream("keystore.p12"),   
        keyPassword);                                
var macKey = keyStore.getKey("hmac-key", keyPassword);    
var databaseTokenStore = new DatabaseTokenStore(database);        
var tokenStore = new HmacTokenStore(databaseTokenStore, macKey);  
var tokenController = new TokenController(tokenStore);
TRYING IT OUT
Restart the API, adding -Dkeystore.password=changeit to the command line argu-
ments, and you can see the update token format when you authenticate:
$ curl -H 'Content-Type: application/json' \         
  -d '{"username":"test","password":"password"}' \   
  https://localhost:4567/users                       
{"username":"test"}
$ curl -H 'Content-Type: application/json' -u test:password \   
  -X POST https://localhost:4567/sessions                       
{"token":"OrosINwKcJs93WcujdzqGxK-d9s
➥ .wOaaXO4_yP4qtPmkOgphFob1HGB5X-bi0PNApBOa5nU"}
If you try and use the token without the authentication tag, then it is rejected with a
401 response. The same happens if you try to alter any part of the token ID or the tag
itself. Only the full token, with the tag, is accepted by the API.
5.3.3
Protecting sensitive attributes
Suppose that your tokens include sensitive information about users in token attri-
butes, such as their location when they logged in. You might want to use these attri-
butes to make access control decisions, such as disallowing access to confidential
documents if the token is suddenly used from a very different location. If an attacker
5 Some keystore formats support setting different passwords for each key, but PKCS #12 uses a single password
for the keystore and every key.
Listing 5.12
Loading the HMAC key
Load the keystore password
from a system property.
Load the keystore, unlocking 
it with the password.
Get the HMAC key from the keystore, 
using the password again.
Create the HmacTokenStore, passing in the
DatabaseTokenStore and the HMAC key.
Create a 
test user.
Log in to get a 
token with the 
HMAC tag.
178
CHAPTER 5
Modern token-based authentication
gains read access to the database, they would learn the location of every user currently
using the system, which would violate their expectation of privacy. 
The main threat to your token database is through injection attacks or logic errors in
the API itself that allow a user to perform actions against the database that they should
not be allowed to perform. This might be reading other users’ tokens or altering or
deleting them. As discussed in chapter 2, use of prepared statements makes injection
attacks much less likely. You reduced the risk even further in that chapter by using a
database account with fewer permissions rather than the default administrator account.
You can take this approach further to reduce the ability of attackers to exploit weak-
nesses in your database storage, with two additional refinements:
 You can create separate database accounts to perform destructive operations
such as bulk deletion of expired tokens and deny those privileges to the database
user used for running queries in response to API requests. An attacker that
exploits an injection attack against the API is then much more limited in the
damage they can perform. This split of database privileges into separate accounts
can work well with the Command-Query Responsibility Segregation (CQRS; see https://
martinfowler.com/bliki/CQRS.html) API design pattern, in which a completely
separate API is used for query operations compared to update operations.
Encrypting database attributes
One way to protect sensitive attributes in the database is by encrypting them. While
many databases come with built-in support for encryption, and some commercial
products can add this, these solutions typically only protect against attackers that
gain access to the raw database file storage. Data returned from queries is transpar-
ently decrypted by the database server, so this type of encryption does not protect
against SQL injection or other attacks that target the database API. You can solve
this by encrypting database records in your API before sending data to the database,
and then decrypting the responses read from the database. Database encryption is
a complex topic, especially if encrypted attributes need to be searchable, and could
fill a book by itself. The open source CipherSweet library (https://ciphersweet.parag-
onie.com) provides the nearest thing to a complete solution that I am aware of, but
it lacks a Java version at present.
All searchable database encryption leaks some information about the encrypted val-
ues, and a patient attacker may eventually be able to defeat any such scheme. For
this reason, and the complexity, I recommend that developers concentrate on basic
database access controls before investigating more complex solutions. You should
still enable built-in database encryption if your database storage is hosted by a cloud
provider or other third party, and you should always encrypt all database backups—
many backup tools can do this for you.
For readers that want to learn more, I’ve provided a heavily-commented version of the
DatabaseTokenStore providing encryption and authentication of all token attributes,
as well as blind indexing of usernames in a branch of the GitHub repository that accom-
panies this book at http://mng.bz/4B75.
179
Hardening database token storage
 Many databases support row-level security policies that allow queries and updates
to see a filtered view of database tables based on contextual information sup-
plied by the application. For example, you could configure a policy that
restricts the tokens that can be viewed or updated to only those with a username
attribute matching the current API user. This would prevent an attacker from
exploiting an SQL vulnerability to view or modify any other user’s tokens. The
H2 database used in this book does not support row-level security policies. See
https://www.postgresql.org/docs/current/ddl-rowsecurity.html for how to con-
figure row-level security policies for PostgreSQL as an example.
Pop quiz
4
Where should you store the secret key used for protecting database tokens with
HMAC?
a
In the database alongside the tokens.
b
In a keystore accessible only to your API servers.
c
Printed out in a physical safe in your boss’s office.
d
Hard-coded into your API’s source code on GitHub.
e
It should be a memorable password that you type into each server.
5
Given the following code for computing a HMAC authentication tag:
byte[] provided = Base64url.decode(authTag);
byte[] computed = hmac(tokenId);
which one of the following lines of code should be used to compare the two values?
a
computed.equals(provided)
b
provided.equals(computed)