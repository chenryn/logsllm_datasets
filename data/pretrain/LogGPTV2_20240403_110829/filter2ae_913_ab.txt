     */
    int scull_trim(struct scull_dev *dev)
    {
        struct scull_qset *next, *dptr;
        int qset = dev->qset;   /* "dev" is not-null */
        int i;
        for (dptr = dev->data; dptr; dptr = next) { /* all the list items */
            if (dptr->data) {
                for (i = 0; i data[i]);
                kfree(dptr->data);
                dptr->data = NULL;
            }
            next = dptr->next;
            kfree(dptr);
        }
        dev->size = 0;
        dev->quantum = scull_quantum;
        dev->qset = scull_qset;
        dev->data = NULL;
        return 0;
    }
    int scull_release(struct inode *inode, struct file *filp)
    {
        printk(KERN_DEBUG "process %i (%s) success release minor(%u) file\n", current->pid, current->comm, iminor(inode));
        return 0;
    }
    /*
     * Open and close
     */
    int scull_open(struct inode *inode, struct file *filp)
    {
        struct scull_dev *dev; /* device information */
        dev = container_of(inode->i_cdev, struct scull_dev, cdev);
        filp->private_data = dev; /* for other methods */
        /* If the device was opened write-only, trim it to a length of 0. */
        if ( (filp->f_flags & O_ACCMODE) == O_WRONLY) {
            if (mutex_lock_interruptible(&dev->mutex))
                return -ERESTARTSYS;
            scull_trim(dev); /* Ignore errors. */
            mutex_unlock(&dev->mutex);
        }
        printk(KERN_DEBUG "process %i (%s) success open minor(%u) file\n", current->pid, current->comm, iminor(inode));
        return 0;
    }
    /*
     * The "extended" operations -- only seek.
     */
    loff_t scull_llseek(struct file *filp, loff_t off, int whence)
    {
        struct scull_dev *dev = filp->private_data;
        loff_t newpos;
        switch(whence) {
          case 0: /* SEEK_SET */
            newpos = off;
            break;
          case 1: /* SEEK_CUR */
            newpos = filp->f_pos + off;
            break;
          case 2: /* SEEK_END */
            newpos = dev->size + off;
            break;
          default: /* can't happen */
            return -EINVAL;
        }
        if (newpos f_pos = newpos;
        return newpos;
    }
    struct file_operations scull_fops = {
        .owner =    THIS_MODULE,
        .llseek =   scull_llseek,
        .read =     scull_read,
        .write =    scull_write,
        // .unlocked_ioctl = scull_ioctl,
        .open =     scull_open,
        .release =  scull_release,
    };
    /*
     * Set up the char_dev structure for this device.
     */
    static void scull_setup_cdev(struct scull_dev *dev, int index)
    {
        int err, devno = MKDEV(scull_major, scull_minor + index);
        cdev_init(&dev->cdev, &scull_fops);
        dev->cdev.owner = THIS_MODULE;
        dev->cdev.ops = &scull_fops;
        err = cdev_add (&dev->cdev, devno, 1);
        /* Fail gracefully if need be. */
        if (err)
            printk(KERN_NOTICE "Error %d adding scull%d", err, index);
        else
            printk(KERN_INFO "scull: %d add success\n", index);
    }
    void scull_cleanup_module(void)
    {
        int i;
        dev_t devno = MKDEV(scull_major, scull_minor);
        /* Get rid of our char dev entries. */
        if (scull_devices) {
            for (i = 0; i `[[5]](https://raw.githubusercontent.com/torvalds/linux/master/include/linux/fs.h
"\[5\]") header file.
In the code I illustrated above:
    struct file_operations scull_fops = {
        .owner =    THIS_MODULE,
        .llseek =   scull_llseek,
        .read =     scull_read,
        .write =    scull_write,
        .open =     scull_open,
        .release =  scull_release,
    };
I declare a structure and assign it. Except for the `owner`, the values of
other members are function pointers.
Then I used `cdev_add` to register the file operation structure with each
driver in the `scull_setup_cdev` function.
For example, if I perform "open" operation on the driver device, I will
execute the `scull_open` function, which is equivalent to "hooking" the `open`
function in the system call.
#### Knowledge Point 4 -- Generate the Corresponding Device under /dev
Compile the above code, get `scull.ko`, then sign it, and finally load it into
the kernel via `insmod`.
Check if it is loaded successfully:
![
](https://images.seebug.org/content/images/2019/01/b129b201-93ce-491b-b1b2-351c4c357c36.png-w331s)
Although the driver has been loaded successfully, it does not create a device
file in the /dev directory. We need to manually use `mknod` for device
linking:
![
](https://images.seebug.org/content/images/2019/01/2118fab7-653e-4d2f-ac15-b299e77e92be.png-w331s)
### Summary
In this example, there is no operation on the actual physical device, just
simply use `kmalloc` to apply for a block of memory in the kernel space.
No more details about the code, which can be found by looking up the header
files or Google.
Here I would like to share my way of learning the development of drivers: read
books to understand the basic concept firstly, and then look up for the
details when you need to use them.
For example, I don't need to know what API the driver can provide, and all I
need to know is that the API provided by the drivers is all about file
operations. As for the file operations, currently I only need to `open`,
`close`, `read` and `write`. I will look up for more file operations when
necessary.
### Reference
  1. 
  2. 
  3. 
  4. 
  5. 
### About Knownsec & 404 Team
Beijing Knownsec Information Technology Co., Ltd. was established by a group
of high-profile international security experts. It has over a hundred frontier
security talents nationwide as the core security research team to provide
long-term internationally advanced network security solutions for the
government and enterprises.
Knownsec's specialties include network attack and defense integrated
technologies and product R&D under new situations. It provides visualization
solutions that meet the world-class security technology standards and enhances
the security monitoring, alarm and defense abilities of customer networks with
its industry-leading capabilities in cloud computing and big data processing.
The company's technical strength is strongly recognized by the State Ministry
of Public Security, the Central Government Procurement Center, the Ministry of
Industry and Information Technology (MIIT), China National Vulnerability
Database of Information Security (CNNVD), the Central Bank, the Hong Kong
Jockey Club, Microsoft, Zhejiang Satellite TV and other well-known clients.
404 Team, the core security team of Knownsec, is dedicated to the research of
security vulnerability and offensive and defensive technology in the fields of
Web, IoT, industrial control, blockchain, etc. 404 team has submitted
vulnerability research to many well-known vendors such as Microsoft, Apple,
Adobe, Tencent, Alibaba, Baidu, etc. And has received a high reputation in the
industry.
The most well-known sharing of Knownsec 404 Team includes: [KCon Hacking
Conference](http://kcon.knownsec.com/#/ "KCon Hacking Conference"), [Seebug
Vulnerability Database](https://www.seebug.org/ "Seebug Vulnerability
Database") and [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/
"ZoomEye Cyberspace Search Engine").
* * *