的时候都做特例
处理。
----------------------- Page 69-----------------------
78 ⼈⼈都是产品经理
其次，我们把⼯作量再简化为开发量。我经历的项⽬，各类⼈⼒资源
有：产品、
开发、测试、服务等。但⼀般情况下，团队⾥产品⼈员资源相对富
裕，测试资源可以
调配，服务资源可以临时补充，所以开发资源经常成为瓶颈。于是，
我们⼀般评估每
个需求的开发⼯程师⼯作量来表征其实现难度，这背后的道理是以团
队⾥的瓶颈资源
为评估基准（如表 2-7 所⽰），⼤家视⾃⼰团队的情况灵活应⽤。
表 2-7 需求的开发量
需求属性 属性说明
开发量(*) 需求的开发⼯作量，表征实现难度
在这个时候，需求其实并不明确，只知道要做哪些，还是⽐较粗略的
要点，⽽具
体怎么做根本还没有考虑，所以有的技术⼈员会觉得⽆法评估开发
量，这很正常，这
个问题我们和技术⼈员纠结过许多次。他们说你们不明确每个需求怎
么做，他们就⽆
法准确评估开发量，我们说没那么多时间明确每个需求该怎么做，你
们不评估每个需
求的开发量，我们就不知道哪些值得进⼀步分析怎么做，⽽哪些又不
值……于是就死
循环了。这类先有鸡还是先有蛋的问题也⽆须纠缠，我们继续讲实际
的。
开发量是⾮评估不可的，我把它叫做“初评”，允许误差，并且会要经
验丰富的
⼈来评估，通常是技术经理，或者系统分析师、架构师 。他们做出简
单的评估，并且
靠不断的实践来反复修正，评估者通常估计⾃⼰做这个需求要多少时
间，然后乘以⼀
个系数，这个系数⼤于 1，反映着相应技术团队的平均技术能⼒。这
⾥的评估⼀般⽤“⼈
天”作为单位，某个需求需要“ 1 ⼈天”意味着需要 1 个⼈做 1 个⼯作
⽇。
相对于“初评”，在项⽬启动之后，制定项⽬开发计划的时候还会有⼀
次更精确
的评估，那时候需求怎么做已经知道、由哪位开发⼯程师来做也知
道，所以可以推算
出相对准确的⼯期，⼯期和⼯作量是有很⼤区别的，⽐如⽣⼀个⼩
孩，需要 1 个⼥⼈
10 个⽉的时间，⼯作量可以说“ 10 ⼈⽉”，但 10 个⼥⼈ 1 个⽉的时
间，同样“ 10 ⼈
⽉”是绝对完成不了这个任务的，不管⼏个⼈，⼯期都只能是 10 个
⽉……这个话题在
第 3 章还有机会慢慢谈。
性价⽐啊性价⽐
我们已经做了需求采集，把⽤户需求转化为产品需求 ，知道了某个需
求的基本属
性、种类、商业价值、开发量，现在似乎应该开始写⽂档、⼲活了，
但经验告诉我们
不是这样的 ：
----------------------- Page 70-----------------------
第 2 章 ⼀个需求的奋⽃史 79
绝对不能因为某个需求的实现难度很⼩就马上去做，也不能因为另⼀
个需求的实
现难度⼤就不做。
⼀个实际的例⼦：
我做过的某个产品页⾯的访客，在2009 年某段时间内使⽤各种⽹页浏
览器的⽐例
如图2- 15 所⽰：第⼀名是微软的IE ，99.14% （其中IE6.0 又占75%
）；第⼆名Firefox ，
0.45%……
图 2-15 某产品页⾯的浏览器使⽤情况
对应的需求是：“产品页⾯在Firefox 下显⽰有问题，⽐如……”，⽽我
在注释⾥写
道“对不起，我们就是不⽀持Firefox”。当然，这句话是写给⾃⼰⼈看
的，千万别对⽤
户讲。
这个需求实现难度不⼤，但⼀直在功能列表⾥放着没动，说实话，能
在列表⾥出
现的需求，严格意义上讲，没有任何⼀个是没有价值的，也没有任何
⼀个是做不了的，
那么到底先做哪个，后做哪个？
就像早在第 2. 1.1 节中就谈到的“不要试图满⾜所有⽤户”，⼀切皆看
性价⽐。
有了那么多的准备，现在我们只要做⼀道简单的⼩学算术题就可以回
答上⾯的问
题了。
性价⽐ = 商业价值÷实现难度（简化为开发量）
现在可以做决定了，我们把产品需求列表按照“性价⽐”⼀列从⼤到⼩
排序，先
做排在上⾯的就可以了（如表 2-8 所⽰）。
----------------------- Page 71-----------------------
80 ⼈⼈都是产品经理
表 2-8 需求的性价⽐
需求属性 属性说明
性价⽐(*) “商业价值/开发量”，⽤于决定先做哪个
但是⼯作中对“性价⽐”的判断还是会经常有偏差，很实际的⼀个原
因，是⾃⼰
经常和哪类⼈接触。2007 年下半年的⼯作中，由于⼀直和⼯程师直接
接触，经常听到
他们抱怨某个需求太⿇烦之类的，所以综合考虑时有点倾向于做实现
难度⼩的；⽽如
果经常和销售、运营的同学⼀起开会，就会倾向于更多的考虑商业价
值，这点与⼤家
共勉，时刻注意。
道理说完了，对需求的 DNA 检测也暂告⼀个段落，接下来我们将迎
来⼀场残酷的
“战争”。
2.4 活下来的永远是少数
2008 年春。
每个⽉来⼀次的，除了账单，还有那场“战争”。虽然活下来的永远是
少数，但我
越来越觉得，为了我们的产品，有些需求死得其所。
这是⼀场公司内部的战争，每个产品的产品经理都要上场，打仗总是
为了抢点什
么，我们争夺的是下个⽉的⼈⼒资源，即总是不够⽤的开发⼯程师、
测试⼯程师等。
战场就是闻之⾊变的产品会议，⽽我们⼿上的武器，则是精⼼准备的
商业需求⽂档。
这个过程，就是需求筛选，如图 2-16 所⽰，也有个很传神的说法：需
求 PK 。
图 2-16 需求筛选
----------------------- Page 72-----------------------
第 2 章 ⼀个需求的奋⽃史 81
2.4.1 永远忘不掉的那场战争
为什么原来没有这样的战争？
我没找到理论⽀撑，但就个⼈经历和与同事的交流来说，下⾯是⼀个
因素：更早
的时候 ，公司是按照产品线划分部门的，对于某个产品来说，有⾃⼰
的产品设计师、
开发与测试等，下⼀段时间要做哪些需求 ，完全可以在产品经理的层
⾯上决定，所以
就算有战争也是部门 内部的，⽐较温和，基本上在分析商业价值的需
求讨论会上，也
就顺带着确定了下⼀段时间做哪些。
为什么现在有战争了？
2008 年初，公司组织结构调整，变成了按职能线划分团队，有了统⼀
的产品中⼼ ，
包括所有的产品经理和设计师；研发中⼼，包括所有的开发⼯程师、
架构师等；质控
中⼼，包括所有的测试⼯程师……这样的话，每个产品还是由原来的
产品⼈员做，但
是开发与测试资源在⼀定程度上就有了流动的可能。每个产品想做的
需求都很多，所
以都想尽可能多地抢到开发与测试的资源，然⽽⼈⼒资源总是严重不
⾜的，所以最终
把资源投给哪个产品，就必须上升到⼏个中⼼的⼤⽼板层⾯来决定
了，⽽⼤⽼板的决
策依据就是各个产品团队制作的商业需求⽂档。
其实，后来我们又经历过⼏次反复，部门总是⼀会按产品线划分、⼀
会按职能线
划分，这让我忍不住也对这个问题给出点⾃⼰的解释。
按产品线划分的团队对产品本⾝是有利的，产品经理权⼒更⼤，可以
按照⾃⼰的
想法做，资源有保证，产品规划不容易被动改变。此外，各种职能的
员⼯之间沟通顺
畅，单线领导，开发的头、测试的头等都向产品经理负责。
按职能线划分的团队对多个产品间的资源共享有利，可以让资源流向
更需要的地
⽅，保证对核⼼产品的投⼊，但是效率不⾼，由于产品规划的决策需
要在更⾼层⾯上
敲定，单个产品的发展速度会有所降低。此外，资源战争可以把“鲶鱼
效应 18”从产
品内部扩⼤到公司层⾯，使产品经理和设计师们更抓狂地为产品的发
展⽽苦苦思索，
这是⼀件好事。
两种组织结构，给我“⼀攻⼀守”的感觉，产品在创业期的时候，需要
全速发展，
必然是产品线结构，产品经理带头往前冲。⽽当公司⾥有多个产品慢
慢成熟之后，就
多⽤职能线来更充分地利⽤资源，因为在成熟的产品团队中，要做的
事情通常⽐创业
18 鲶鱼效应 即采取⼀种⼿段或措施，刺激⼀些企业活跃起来投⼊到市
场中积极参与竞争，从⽽激活市场中的同⾏业
企业。其实质是⼀种负向激励，是激活员⼯队伍之奥秘 。
----------------------- Page 73-----------------------
82 ⼈⼈都是产品经理
时期少，或者说没那么急，那么各种资源就显得有富裕，可以更加的
稳扎稳打，所以
按职能线划分以实现资源共享，同时还可以促进不同产品团队之间的
互相学习，让员
⼯的个⼈能⼒得到更多的提升。
更多有关组织结构的话题，将在第 4.1.3 节“团队之⼤”与⼤家讨论，到
时候再见。
准备出发：把需求打个包
上战场之前，就像战⼠要把⾃⼰的物品打包⼀样，需求也要打包。我
们现在来解
决这个包有多⼤的问题，即某个将来的潜在项⽬⾥，到底应该包括多
少需求的问题。
这⾥不得不提前谈⼀点项⽬管理的内容了。
做项⽬，终极⽬标就是：多快好省 19，即范围⼤、时间短、品质⾼、