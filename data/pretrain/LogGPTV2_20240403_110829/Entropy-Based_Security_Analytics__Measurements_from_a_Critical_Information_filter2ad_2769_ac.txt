system is exercised with operational radar traces from aircraft
operations recorded/replayed by the provider. The workload
contains the operations detailed in the following:
•
•
•
•
•
•
•
•
•
Flight Data Plan creation (CRE), which allows the
operator to create a new ﬂight plan and submit it to
the system, leading the FDPS to both calculate the
trajectory of the new ﬂight and update its ﬂight plan.
Flight Data Plan update (UPD), where an existing
ﬂight data plan is retrieved from the system and its
ﬁelds are updated.
Check the existence of a ﬂight (CHK), which is re-
quested by the operator to verify if a ﬂight exists in the
system, i.e., if a ﬂight data plan has been generated.
Flight position report generation (REP), which pro-
vides to the operator a detailed report about the current
position of the selected ﬂight.
Flight control acquisition (CTA), which allows the
operator to take control of a ﬂight before its departure.
Check ﬂight status (STA), which is requested by the
operator to verify the status of a ﬂight.
Flight control transfer (CTT), which allows the op-
erator to transfer the control of a ﬂight to another
CWP, which controls a different airspace sector. This
operation is performed when the ﬂight reaches the
sector controlled by another CWP.
Flight re-routing (FRT), which allows to modify the
trajectory of a ﬂight, e.g., when a conﬂict between two
trajectories has been detected.
Flight Data Plan removal (REM), which is used to
remove a ﬂight data plan from the system.
It should be noted that for all the operations composing the
workload, except for the Flight Data Plan creation, the ﬂight
targeted by the operation is randomly selected between the
existing ones, i.e., ﬂights that have been already created in the
system.
Fig. 6: Architecture of the reference information system.
vation comes with the position in the log of the chunk that
originated the observation. The collector is a bolt.
Both the replacements base and the term-by-chunk matrix
have been implemented as Apache Cassandra9 databases, since
Cassandra is a NoSQL database that allows storing both
structured and unstructured data and provides scalability, high
availability and fault-tolerance.
V. REFERENCE SYSTEM
We use a real-world critical information system from the
Air Trafﬁc Control (ATC) domain in order to assess our
method/framework under representative datasets. The system
encompasses distributed nodes and many heterogeneous log
sources, which have been addressed through the proposed
data analytics framework. ATC underlies a number of tasks
that ensure safe aerospace operations, such as aircraft trajec-
tory monitoring, collisions prevention/detection and air trafﬁc
management. Over the past decades ATC has become an
increasingly software-intensive domain involving a variety of
networked distributed processes. In this respect, ATC is likely
subjected to both accidental and malicious threats.
A. System architecture
The system installation has been made available by
LEONARDO in the context of
the NAPOLI FUTURA
academia-industry project. The architecture of the system is
depicted in Fig. 6. The system consists of several nodes
running distributed applications that cooperate in order to
implement ATC-related capabilities. The main applications run
by the system nodes are described in the following.
The Surveillance Data Processing Subsystem (SDPS) pro-
vides information about the status of an airspace over a well-
deﬁned geographical area. It processes surveillance data from
different sources, such as radar subsystems and weather data
processing. SDPS runs on two different nodes of the system,
i.e., MS1 and SFN in Fig. 6.
The Flight Data Processor Subsystem (FDPS) is in charge
of receiving, processing and updating ﬂight plans. A ﬂight plan
contains the data of a given ﬂight, such as the expected route,
the trajectory and vector-related information. FDPS also allows
the visualization of the current position of aircrafts, leveraging
the SDPS information, and runs on the FP1 node.
The Medium Term Conﬂict Detection (MTCD) is designed
to alert the ATC controller of potential conﬂicts between ﬂight
plans in his area of responsibility. MTCD runs on MT1.
9http://cassandra.apache.org/
384
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:24 UTC from IEEE Xplore.  Restrictions apply. 
1 19 0 9 : 4 5 : 3 2 . 7 2 0 #TIMEALIGN:1458380732720
2 19 0 9 : 4 5 : 3 2 . 7 2 0 #TRJPARAM : 0 , , , 0 9 4 5 , − 3 4 0 0 0 , − 1 , 0 , 0 , , 0 , 0 , 0 , 0 , 1 , FIRSTAORFIX,094500 ,34000 , −1 , −1 ,0 ,
3 19 0 9 : 4 5 : 3 2 . 7 2 0 #OTHERTRJSETCOP : 1 0 0 0 , , 0 , , 1 4 5 8 3 8 0 7 0 0 , 0
4 19 0 9 : 4 5 : 3 2 . 7 2 0 #INIT : SECTORCONF
5
6 19 0 9 : 2 6 : 1 3 . 9 3 6 [ RCDT−006] Acd : Message NOTORDVOLO [ 0 x63d4c000 ] received from ACD .
7 19 0 9 : 2 6 : 1 3 . 9 9 2 [ AC03−026] Warning : No DBConnection found in TM for flight key ’1630500 ’
8 19 0 9 : 2 6 : 1 4 . 0 1 9 [ AC03−026] Acd : HandleNotifyOrder NOTIFYORDER received − FIF RGG2658 Order OK .
9 19 0 9 : 2 6 : 1 4 . 0 1 9 [ AC03−026] Env : lockWriter [ RGG2658 ] : 1
Fig. 7: Examples of entries in two log ﬁles from the case study: FP1NTN (lines 1 to 4) and MN1MNA (lines 6 to 9).
node to preserve the resources of the ATC system during
operations. Moreover, the dedicated monitoring network has
been used for the Storm streams in order to avoid interference
with the communication between the ATC nodes.
VI. MEASUREMENTS
Measurements have been done with the aim of tuning the
method, beforehand (i.e., the off-line step mentioned in Section
III); we then collect on-line log.entropy observations during
both regular operations and misuse conditions by leveraging
the proposed data analytics framework.
A. Tuning
As described in Section III, a dedicated, on-line, sampling
task periodically computes the log.entropy of a given Li every
T time unit by (i) extracting terms/counts from the entries of Li
generated during the latest T , and (ii) weighing terms/counts
with respect to (M-1) chunks of Li of duration T . The values
of T and (M-1) are established off-line prior the framework is
run by means of a set of experiments, as follows.
We run the system under the above-described workload
to gain explorative insights into the logs Li. Fig. 9 shows
the number of entries per minute generated by D02PAN,
FP1LNR, MN1PAN, MN1MNA and SFNPAN over 100 minutes
of operations. The most entries-prone log is D02PAN, i.e., total
450,684 in 100min (an average of 4,507 per minute); although
Fig. 9 shows ﬁve logs for the sake of readability, the rate
of all the remaining logs is similar to FP1LNR, MN1PAN and
SFNPAN. We use D02PAN to tune the duration of the chunks T
because it is the worst case log from the sampling perspective
(i.e., the larger the number of entries in the chunk the larger the
time taken by terms/counts extraction and weighting). Fig. 10
shows how the time to compute log.entropy varies with respect
to the size of the chunk in (50; 2,000) by step 50 for D02PAN
and FP1LNR, i.e., the worst and best case log, respectively.
For each value of size s, we run the log.entropy procedure on
30 different D02PAN and FP1LNR chunks of size s and infer
the related box plot. It can be noted that when the size of the
Fig. 8: Representation of the workload.
The workload continuously runs of the above-presented
operations, according to the speciﬁcations from the industry
provider. For each run the operations are executed in a random
order, with the aim of obtaining a diverse mixture of operations
over time, as shown in Fig. 8. Flight re-routing and Flight Data
Plan removal, i.e., the grey arrows in Fig. 8, are not executed
at every run because they are less frequent in production, as
stated by the ATC operator. The workload performs re-routings
every 3 runs and removals every 5 runs, shown in Fig. 8. The
time between two operations is randomly selected between 3
and 10 seconds.
C. Log sources and Data Analytics deployment
The nodes composing the reference ATC system provide a
number of log ﬁles where applications record events occurred
during their operations. Overall 11 log sources are made
available in the reference system, which are listed in TABLE
I by system node. A minimum of one, up to four logs for
each node have been considered, encompassing legacy logs
implemented by means of a variety of custom formats. Beside
the lines that have been shown in Fig. 2 (which represent the
format of the PAN logs, such as D02PAN and DB1PAN in
TABLE I), Fig. 7 shows few lines from FP1NTN (lines 1 to
4) and MN1MNA (lines 6 to 9), respectively. It can be noted
that the logs are strongly heterogeneous in both formats and
semantics, even if they come from the same system.
Each log is periodically sampled in order to compute the
log.entropy by means of the data analytics framework. There-
fore, dedicated sampler, replacer, column builder and entropy
compute have been deployed for each log source in order
to implement the streaming pipeline. Sampler, replacer and
column builder have been deployed on each ATC node, while
entropy compute and collector components run on a dedicated
TABLE I: Log sources by system node.
node
D02
DB1
FP1
MN1
MS1
MT1
SFN
log sources
D02PAN.log
DB1PAN.log
FP1PAN.log, FP1NTN.log, FP1LNR.log, FP1AFS.log
MN1PAN.log, MN1MNA.log
MS1PAN.log
MT1PAN.log
SFNPAN.log
Fig. 9: Number of entries per minute generated by ﬁve logs.
385
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:58:24 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 10: Computation time with respect to the chunk size.
chunk is 2,000 the sampling time converges around 8.5sec and
3.0sec for D02PAN and FP1LNR, respectively. Accordingly,
we set T =10sec. It is worth noting that, on average, D02PAN
generates 751 entries in 10sec, i.e., 4,507/6, where computation
takes around 7.5sec as it can be inferred from Fig. 10.
The value of (M-1) is a relevant parameter because it
represents the number of regular chunks that will be used
as a reference to compute the log.entropy of on-line chunks.
Each Li obtained during the long running experiment is split
into 10sec chunks; we compute the log.entropy of each chunk.
The second leftmost column of TABLE II reports μ, i.e., the
population log.entropy mean, which is obtained over all the
chunks. In order to compute the number of chunks, which are
needed to obtain an accurate characterization of μ, we adopt
the procedure described in [35]. For each Li we randomly
select 30 chunks, beforehand. The third column of TABLE
II shows mean (x) and standard deviation (s) of the sample
consisting of 30 observations for each log. These values are
used to estimate the number of observations, i.e., n, that are
needed to approximate the value of μ at a given accuracy and
conﬁdence. As shown in [35], starting from an exploratory
sample with mean x and standard deviation s, n = ( 100·z·s
r·x )2,
where r is the desired accuracy (in percentage %) and z is
the (1 − α/2) quantile of the standard gaussian distribution,
i.e., N (0, 1). TABLE II shows the value of n when r=10%
and z=1.645, i.e., the conﬁdence level is set to 90%. It can
be noted that n ranges between 82 and 119, which means
that in all the cases 120 chunks are enough to approximate
the population mean at high accuracy and conﬁdence. The
four rightmost columns of TABLE II report x and s, which
are obtained when the size of the sample is 120. It can be
noted that, in all the cases, μ belongs to the 90% conﬁdence
interval, which further conﬁrms the goodness of 120 chunks
at characterizing the system behavioral baseline for each log
source. Fig. 11 shows the absolute frequency of the log.entropy
values of D02PAN, FP1LNR and MN1PAN when the sample
TABLE II: Results from the chunk number determination.
μ
3.05
1.78
1.89
1.47
2.21
3.43
1.86
3.54
1.81
1.85
1.88
D02PAN
DB1PAN
FP1PAN
FP1NTT
FP1LNR
FP1AFS
MN1PAN
MN1MNA
MS1PAN
MT1PAN
SFNPAN
x
s
(size=30)
2.73
1.59
2.20
1.74
2.17
2.45
2.07
4.24
1.82
2.01
1.73
1.60
0.93
1.28
0.96
1.44
1.58
1.29
2.41
1.03
1.33
1.13
n
x
93
93
92
82
119
112
106
87
87
117
115
3.08
1.91
1.76
1.45
2.32
3.82
1.85
3.46
1.86