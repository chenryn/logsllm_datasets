### Introduction

In our investigation, we found that none of the popular libraries we examined had a dedicated mailing list for security announcements. In fact, most of these libraries did not even have a general mailing list for any type of announcement. Additionally, only a few JavaScript library developers provided a dedicated email address for users to submit vulnerability reports. When release notes do mention that a vulnerability has been fixed, they often lack details about the affected code or which prior versions are vulnerable. This lack of information is problematic because web developers using these libraries cannot determine if the vulnerable code is part of a function they depend on, and whether an update is necessary. Libraries can also silently reintroduce vulnerabilities to maintain backwards compatibility [12].

For example, jQuery, despite being one of the most popular libraries, does not provide any search results for "security" or "vulnerability" in its official learning center as of August 2016. This situation is emblematic of the state of JavaScript library security on the Internet. A similar lack of adequate information about security issues has also been reported in the Android library ecosystem [3].

Another complication is that patches are often only provided for the most recent versions of a library. However, these newer versions may not be backwards-compatible with the versions still in use by many web developers. The short development lifecycle common in web development can become a burden for developers who need to keep up with frequent breaking changes in libraries to maintain their websites up to date and free of vulnerabilities.

### Third-Party Components

We observed that libraries included by third-party components, such as advertising, tracking, or social media widget code, have a higher rate of vulnerabilities than other inclusions. These components are often hosted on third-party servers and loaded dynamically through client-side JavaScript. Additional libraries loaded at runtime by these components do not appear in the website’s codebase, and web developers may be unaware that they are indirectly including vulnerable code into their website. Similarly, dynamic inclusions of libraries by third-party components may explain some of the same-document duplicate inclusions we noticed.

To mitigate these issues, developers of web services intended to be included in other websites could avoid replacing an existing library instance by testing whether the library has already been loaded into the page before adding their own copy. On the other hand, web developers who intend to use third-party components, such as advertising code, can attempt to limit potential damage by isolating these components in separate frames whenever feasible.

### Related Work

Our work is related to prior studies on JavaScript security, measurements of vulnerability patching and dependency management, a series of blog posts about inclusions of vulnerable libraries that inspired our more in-depth analysis, and existing tools that implement a subset of our detection methodology.

#### JavaScript Security

Nikiforakis et al. [22] identify the network sources of JavaScript inclusions in the Alexa Top 10k websites, without special consideration for libraries or corresponding versioning semantics, and develop host-based metrics for maintenance quality to assess whether remote code providers could be compromised by attackers and subsequently serve malicious JavaScript. While Nikiforakis et al. study where included code is hosted, we focus on the narrower but semantically richer setting of libraries to investigate whether included code is outdated or known to be vulnerable, and we leverage our deep browser instrumentation to determine the initiators and causes of such inclusions.

A separate class of related work examines specific attack vectors in client-side JavaScript and conducts crawls to estimate how many websites are subject to the attack. For example, Lekies and Johns [16] survey insecure usage of JavaScript's `localStorage()` function for code caching purposes, Son and Shmatikov [31] examine vulnerabilities arising from unsafe uses of the `postMessage()` function, Lekies et al. [17] detect and validate DOM-based XSS vulnerabilities, and Richards et al. [29] analyze websites' usage patterns of the problematic `eval()` API. Yue and Wang [39] study several insecure practices related to JavaScript, namely cross-domain inclusion of scripts and the execution and rendering of dynamically generated JavaScript and HTML through `eval()` and `document.write()`, respectively. Li et al. [18] detect malicious redirection code hidden in JavaScript files on compromised hosts by deriving signatures from the differences between infected library files and the original, benign copies. In contrast to the above work, we do not focus on specific vulnerabilities, the use of security-critical functions, or malicious files. Instead, we provide empirical results at a more abstract level to highlight and explain the prevalence of benign-but-vulnerable JavaScript libraries in the wild.

#### Vulnerability and Dependency Management

Four studies have examined vulnerability patching and dependency management in large software ecosystems, although not with respect to JavaScript or the Web. Sonatype Inc., the company behind Maven, released a report [32] examining security maintenance practices observed from the vantage point of the largest repository of Java components. According to the report, the mean time-to-repair of a security vulnerability in component dependencies is 390 days, 51,000 of the components in the repository have known security concerns, and 6.2% of downloaded components include known vulnerabilities. A key observation in the report is that fixing serious flaws in open source code does not stop vulnerable versions from being used. Our work in this paper shows that there are similar trends with respect to JavaScript library usage on the Web.

Nappa et al. [21] analyze the patch deployment process for 1,593 vulnerabilities in 10 applications installed on 8.4 million Windows hosts worldwide. The authors show that the time until a patch is released for different applications affected by the same vulnerability in a shared library can differ by up to 118 days, with a median of 11 days. Furthermore, patching rates vary among applications and depend, among other factors, on the update mechanism. At most 14% of vulnerable hosts are patched before an exploit is released.

Thomas et al. [35] propose an exponential decay model to estimate patching delays of Android devices. According to the model, when a new version of the operating system is released, it takes 3.4 years to reach 95% of the devices.

Backes et al. [3] build LIBSCOUT, a system to detect third-party library code in Android applications using a static approach based on abstracted package trees and method signatures. They find that 70.4% of library inclusions in their dataset include an outdated version, and it takes developers an average of almost one year to migrate their applications to a newer library version after the library has been updated. In a case study of two vulnerabilities, the authors show that the average update delay is 59 and 188 days after the library patch is first made available, while some applications remain without any update. Furthermore, 10 out of 39 advertising libraries contain one or more versions that improperly use cryptographic APIs.

In contrast to LIBSCOUT, our detection approach requires that the library API methods used in our signatures not be renamed or removed. While a theoretical possibility, we believe that such eager minification settings are exceedingly rare on the Web since they would necessitate processing all code potentially referencing the library, including in HTML attributes and inline script. To the best of our knowledge, the default settings of minifiers typically do not rename methods or remove dead code in client-side JavaScript (see, for instance, the Closure Compiler [9]). This assumption allows us to detect the version of a JavaScript library more reliably since most libraries self-identify via their version attribute or method.

#### Blog Posts

In 2014, a series of blog posts by Oftedal [24, 25, 26] raised awareness about the use of outdated JavaScript libraries on the Web and the fact that many large companies, including banks, use versions that are known to be vulnerable. We complement this first exploration of the issue with a more comprehensive detection methodology and a more detailed analysis. To the best of our knowledge, we are the first to report on the modality and causes of JavaScript library inclusions in websites, uncovering issues such as duplicate library inclusions as well as transitive (and on average more vulnerable) inclusions of libraries by third-party modules such as advertising, tracking, and social media widget code.

#### Tools

From the point of view of our library detection methodology, we are aware of two open-source tools with a similar approach: Retire.js and the Library Detector extension.

- **Library Detector Chrome Extension**: This browser extension [20] aims to detect the JavaScript libraries running on a website. It injects a script into the website’s main document to test for the presence of known libraries and extracts their version, using dynamic detection code similar to the approach presented in Section III-B. The extension does not warn against known vulnerabilities, does not reveal how or why a library was included, cannot reliably detect duplicate inclusions, and does not analyze libraries loaded in frames.

- **Retire.js**: Along with his blog posts, Oftedal released a tool [27] to help web developers detect JavaScript libraries with known vulnerabilities. Retire.js is a browser extension that intercepts network requests for JavaScript files while a website is loading and detects libraries based on known file hashes, regular expressions over the file contents, and API method signatures dynamically evaluated in an empty sandbox environment. While we also use dynamic detection and hash detection approaches in our methodology, Retire.js makes several simplifications that limit the tool’s utility for our analysis. First, detecting a script as a library in an empty sandbox fails when the library has unmet dependencies. For example, jQuery-UI requires jQuery and hence cannot be detected dynamically if jQuery is not present in the environment. Second, intercepting requests only at the network level may miss inline scripts, dynamically evaluated scripts, and duplicate inclusions of cached scripts. Most importantly, Retire.js does not reveal why a library was included, that is, whether the inclusion was caused by advertising code, for instance. We support all of these scenarios and found interesting results as a consequence, such as the vulnerability rates per inclusion type in Table V and the duplicate inclusions observed in Section IV-G.

### Conclusion

Third-party JavaScript libraries such as Angular, Bootstrap, and jQuery are frequently used on websites today. While these libraries allow web developers to create highly interactive, visually appealing websites, vulnerabilities in these libraries might increase the attack surface of the websites that depend on them. Hence, it is very important to ensure that only recent, patched versions of these libraries are being utilized.

In this paper, we presented the first comprehensive study on the security implications surrounding JavaScript library usage on real-world websites. We found that:

- 87.7% of ALEXA Top 75k websites and 46.5% of COM websites use at least one of the 72 JavaScript libraries in our catalogue (Section IV-C).
- More than 37% of websites use at least one library version with a known vulnerability, and vulnerable inclusions can account for a significant portion of all observed inclusions of a library (Section IV-D).
- The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA and 1,476 days in COM (Section IV-F), and development of some libraries still in active use ceased years ago.
- Surprisingly often, libraries are not referenced directly in a page, but also inlined, or included transitively by other content such as advertising, tracking, or social media widget code (Table IV), and those inclusions have a higher rate of vulnerability than other, direct inclusions (Table V, Section IV-E).
- Composition of content modules or third-party content in the same document can lead to duplicate inclusions of a library and potentially nondeterministic behavior with respect to vulnerability (Section IV-G).
- Remediation efforts are hindered by a lack of backwards-compatible patches (Section IV-H) and, more generally, scant availability of information (Section V).

The results of this work highlight the need for more thorough and systematic approaches to JavaScript library inclusion and dependency management on the Web. The causality trees shown in this work can be viewed online: https://seclab.ccs.neu.edu/static/projects/javascript-libraries/

### Acknowledgements

This work was supported by the National Science Foundation under grants CNS-1409738 and CNS-1563320.

### References

[References listed as in the original text]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.