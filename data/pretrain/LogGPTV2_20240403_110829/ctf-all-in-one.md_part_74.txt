程序中某个过程的起始点或者某个特定的程序点。
逆向的符号执行
逆向的符号执行用于对可能存在漏洞的部分代码进行有针对性的分析。通过分析这
些程序语句，可以得到变量取值满足怎样的约束表示程序存在漏洞，将这样的约束
记录下来，在之后的分析中，通过逆向分析判断程序存在漏洞的约束是否是可以满
足的。通过不断地记录并分析路径条件，检查程序是否可能存在带有程序漏洞的路
径。
例如下面的代码片段：
767
5.3 符号执行
if (j > -6) {
a = i;
i = j + 6;
if (i len(a) 是否可以满
足，直到碰到语句 if(ilen(a) ，如果 len(a)≥15 ，则通过对约束进行求解可
知当前约束是不满足的，这时停止对该路径的分析。否则如果 len(a)len(a) 。而无关的赋值，如 a=i ，
则可以忽略它。然而变量之间的别名关系常常会对分析产生影响，所以可以在逆向
分析之前，对程序进行别名分析或者指向分析。
逆向符号执行的过程间分析：
当过程内分析中遇到不能根据语义进行处理的过程，这些过程是程序实现的，
并且影响所关心的存在漏洞的约束时
通常选择直接对调用的过程进行过程内分析。
当过程内分析已经到达过程的入口点，且仍然无法判断存在漏洞的约束是否一
定不可满足时
可以根据调用图或其他调用关系找到调用该过程的过程，然后从调用点开
始继续逆向分析。
实例分析
我们来看一段缓冲区溢出漏洞的例子，分析规则和漏洞代码如下：
768
5.3 符号执行
array[x]; len(array) = x
array[y]; 0  get_slot_by_minor() --> get_drv_by_nr() --> spin_lock_irqsav
e()
我们首先用正向的分析方法，过程如下：
将函数 get_drv_by_nr() 的参数 di 作为符号处理，用符号 a 表示其
值。
接下来声明了两个变量，但未对其赋值，所以不进行处理。
769
5.3 符号执行
语句 if(di>> import angr
>>> proj = angr.Project('/bin/true')
WARNING | 2017-12-08 10:46:58,836 | cle.loader | The main binary
is a position-independent executable. It is being loaded with a
base address of 0x400000.
这样就得到了二进制文件的各种信息，如：
772
5.3.1 angr
>>> proj.filename # 文件名
'/bin/true'
>>> proj.arch # 一个 archinfo.Arch 对象
>>> hex(proj.entry) # 入口点
'0x401370'
程序加载时会将二进制文件和共享库映射到虚拟地址中，CLE 模块就是用来处理这
些东西的。
>>> proj.loader
所有对象文件如下，其中二进制文件本身是 main_object，然后还可以查看对象文
件的相关信息：
>>> for obj in proj.loader.all_objects:
... print obj
...
>>> proj.loader.main_object
>>> hex(proj.loader.main_object.min_addr)
'0x400000'
>>> hex(proj.loader.main_object.max_addr)
'0x60721f'
>>> proj.loader.main_object.execstack
False
通常我们在创建工程时选择关闭 auto_load_libs 以避免 angr 加载共享库：
773
5.3.1 angr
>>> p = angr.Project('/bin/true', auto_load_libs=False)
WARNING | 2017-12-08 11:09:28,629 | cle.loader | The main binary
is a position-independent executable. It is being loaded with a
base address of 0x400000.
>>> p.loader.all_objects
[, , , ]
project.factory 提供了很多类对二进制文件进行分析，它提供了几个方便的构
造函数。
project.factory.block() 用于从给定地址解析一个 basic block，对象类型为
Block：
>>> block = proj.factory.block(proj.entry) # 从程序头开始解析一
个 basic block
>>> block
>>> block.pp() # 打印
0x401370: xor ebp, ebp
0x401372: mov r9, rdx
0x401375: pop rsi
0x401376: mov rdx, rsp
0x401379: and rsp, 0xfffffffffffffff0
0x40137d: push rax
0x40137e: push rsp
0x40137f: lea r8, qword ptr [rip + 0x32da]
0x401386: lea rcx, qword ptr [rip + 0x3263]
0x40138d: lea rdi, qword ptr [rip - 0xe4]
0x401394: call qword ptr [rip + 0x205b76]
>>> block.instructions # 指令数量
11
>>> block.instruction_addrs # 指令地址
[4199280L, 4199282L, 4199285L, 4199286L, 4199289L, 4199293L, 419
9294L, 4199295L, 4199302L, 4199309L, 4199316L]
774
5.3.1 angr
另外，还可以将 Block 对象转换成其他形式：
>>> block.capstone
>>> block.capstone.pp()
>>> block.vex
IRSB > at 0x401370
>>> block.vex.pp()
程序的执行需要初始化一个模拟程序状态的 SimState 对象：
>>> state = proj.factory.entry_state()
>>> state
该对象包含了程序的内存、寄存器、文件系统数据等等模拟运行时动态变化的数
据，例如：
>>> state.regs # 寄存器名对象
>>> state.regs.rip # BV64 对象
>>> state.regs.rsp
>>> state.regs.rsp.length # BV 对象都有 .length 属性
64
>>> state.regs.rdi
 # BV64 对象，符号变量
>>> state.mem[proj.entry].int.resolved # 将入口点的内存解释为 C 语
言的 int 类型
这里的 BV，即 bitvectors，可以理解为一个比特串，用于在 angr 里表示 CPU 数
据。看到在这里 rdi 有点特殊，它没有具体的数值，而是在符号执行中所使用的符
号变量，我们会在稍后再做讲解。
775
5.3.1 angr
下面是 Python int 和 bitvectors 之间的转换：
>>> bv = state.solver.BVV(0x1234, 32) # 创建值 0x1234 的 BV32 对象
>>> bv
>>> hex(state.solver.eval(bv)) # 将 BV32 对象转换为 Pytho
n int
'0x1234'
>>> bv = state.solver.BVV(0x1234, 64)
>>> bv
>>> hex(state.solver.eval(bv))
'0x1234L'
于是 bitvectors 可以进行数学运算：
>>> one = state.solver.BVV(1, 64)
>>> one_hundred = state.solver.BVV(100, 64)
>>> one_hundred + one # 位数相同时可以直接运算
>>> one_hundred + one + 0x100
>>> state.solver.BVV(-1, 64) # 默认为无符号数
>>> five = state.solver.BVV(5, 27)
>>> five
>>> one + five.zero_extend(64 - 27) # 位数不同时需要进行扩展
>>> one + five.sign_extend(64 - 27) # 或者有符号扩展
使用 bitvectors 可以直接来设置寄存器和内存的值，当传入的是 Python int 时，
angr 会自动将其转换成 bitvectors：
776
5.3.1 angr
>>> state.regs.rsi = state.solver.BVV(3, 64)
>>> state.regs.rsi
>>> state.mem[0x1000].long = 4 # 在地址 0x1000 存放一个 l
ong 类型的值 4
>>> state.mem[0x1000].long.resolved # .resolved 获取 bitvecto
rs