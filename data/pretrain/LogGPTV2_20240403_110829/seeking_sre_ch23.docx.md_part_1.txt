# SRE 反模式
作者：Blake Bisset, Dropbox, Inc.

人类的大脑天生就倾向于避免威胁。然而，我们在评估相对风险方面可能并不擅长，甚至可能不如植物可靠。请参阅 [Hagai Shemesh 和 Alex Kacelnik 的相关文章](https://www.nytimes.com/2016/07/01/science/pea-plants-risk-assessment.html) 以及随后的 [风险分析协会的文章](http://sds.hss.cmu.edu/risk/articles/WhyStudyRiskPercep.pdf)。尽管如此，我们非常善于识别与自己相关的失败模式。关于风险感知的精彩论述，请参考 [Bruce Schneier 的安全心理学论文](https://www.schneier.com/essays/archives/2008/01/the_psychology_of_se.html)。

承认吧，失败其实很有趣，尤其是别人的失败。当然，我们也乐于回顾自己很久以前犯下的错误，因为那时的错误现在看起来已经无关紧要。用兔八哥的经典台词来说：“好一个大傻瓜！” 失败的故事往往引人入胜。因此，提示那些不应该做的事情，不仅是一种教育方式，而且通常既简单又有效。

所谓“反模式”，是指那些反复出现的、看似常识但实际上并不明智的决策。这些反模式像陷阱一样，常常在离成功仅一步之遥时出现。本书其余部分将讨论应该做什么，而本章则关注那些不应重复的错误。你可以将这一节视为你的“防御艺术”词汇表，或者只是享受一下想象我们和许多同事在过去和现在所犯的错误，从而为你提供这份简短的清单。SRE 并非完美无缺，有些错误我甚至不止一次地犯过。这就是为什么它们被称为反模式。

## 反模式 1：站点可靠性运维

> *新的任务不能总是用旧的工具和方法来实现。*

**定义**：站点可靠性运维指的是在不改变解决问题的方法和预期工作性质的情况下，将运维团队重新命名为 SRE 的做法。

站点可靠性不仅仅是一个名称；它是一门涉及软件、网络和系统工程的实践。简单地让一群技术人员坐在网络运营中心（NOC）办公室，并给他们一个 GitHub 账户和公共云计算资源，然后让他们将一些东西移到容器中，并不会使他们神奇地变成 SRE。虽然个别情况下可能会成功，但最终系统的可靠性并不会显著提高。尽管如此，人们仍然一次又一次地尝试这种方法，并在讲座中夸耀其效果。

NOC 的存在源于几个过时的思想。首先，有特定人员的工作是不惜一切代价保持已构建系统的正常运行。SRE 不会这样做。他们通过设计更少需要人工干预且故障率更低的系统，并通过改进现有系统以避免紧急故障模式来实现可靠性。他们不会把系统当作孩子来照顾，也不需要用任何生物制品来供养机器。

SRE 应该花费一半以上的时间来构建更好的系统，而不是执行或记录运维任务。总之，他们是工程师。好的工程师需要关注流程。在故障环境中，流程是无法发挥作用的。为你的团队提供所需的时间和空间，通过工程技术在问题发生之前就将其解决，这样即使将来要扩大规模、速度和服务范围时，也能确保效率。

我们看到很多人来到 SRE 会议，谈论他们为 SRE 构建的 NOC。确实，NOC 办公环境很酷，也能鼓舞人心。最好的地方在于那个氛围让你感觉自己像一个英雄，掌握着世界的命运（或者至少是生意的命运）。但是，英雄文化本身就是一种反模式，SRE 在 NOC 中正襟危坐并不起作用，即使最初构建 NOC 的原因非常合理。

有时，让每个人都在同一物理空间中处理问题会导致更多的麻烦而非效率。要知道，他们用于执行完成工作的那些工具不应与某个房间绑定，人员和头衔也不应被绑定。NOC 不利于良好的工程化运作。

NOC 应该算是开放式办公环境中最开放的办公室，在同事的海洋中，你会感受到额外的嘈杂和干扰。令人费解的是，我们这个宣扬数据驱动至上的行业，如此故意地无视越来越多的科学证据，不能理解开放式办公室对于工程团队的工作而言是多么低效。[生产力下降](https://onlinelibrary.wiley.com/doi/10.1002/9781119992592.ch6)、[幸福指数下降](http://www.jstor.org/stable/255498)、[病假增多...](https://www.ncbi.nlm.nih.gov/pubmed/21528171)[2014 年《纽约客》文学评论](https://www.newyorker.com/business/currency/the-open-office-trap)、[如果我们有自己熟悉的空间，记忆力会更好](http://www.bbc.com/capital/story/20170105-open-offices-are-damaging-our-memories)、[中断对工程师工作效率的影响](http://blog.ninlabs.com/2013/01/programmer-interrupted/)。

不要浪费宝贵的时间和财务来建造那种让人机距离更近的办公室，因为那会导致人与人之间的关系也机械化。关键是从任何地方进行分布式共享和协作，这样真正应该轮值的工程师可以立即做出远程响应，而不必强迫他离开某处住房、办公室、格子间或任何让他感觉舒适的工作区域。比起没有视觉或听觉隔离的无边无际的办公桌，任何地方都算是办公天堂，哪怕格子间也会感觉很酷。

如果需要共享特定问题的特定时间状况，应能够把相关链接发布到聊天工具或事件响应工具中，以便对事件感兴趣的人能够通过相同的条件查看相同的问题，确定其开始和结束时间、解决方法等。理想情况下，这些工具应该共享实时数据，而不仅仅是静态图片或屏幕截图，这样人们就可以持续获得一致的理解，并可能发现问题的关键，从而提出解决思路。这些链接对应的数据应该可以批量保存下来，以便事后编写故障检查报告。

哪怕是通过共享的显示器来呈现要讨论的内容，虽然其他人不能以 NOC 或老派的作战室那种方式对你指指点点，也仍然不算足够好。更多人的参与能够直接推动问题的发现，同时仍然保持协作和共享，让问题的修复也更加高效。将工程师从 NOC 中解救出来，将为他们提供实际进行工程设计的能力。

## 反模式 2：人类盯着屏幕

> *如果必须等待人类发现错误，你已经落伍了。*

**定义**：检测问题完全依赖工作人员注意到特定数据系列的异常、或多个数据集的组合有问题、或特定条件与已知问题或故障相关，而不是依赖于阈值、相关引擎、速度指标、结构化日志解析器和其他工具来检测这些条件并将其呈现出来，以便供相关人员进行分析。

另一个古老的 NOC 模式：让人类查看数据（哪怕是部分聚合或相关的数据），认为这是在潜在问题爆发之前检测并响应它们的好方法。这是一个恰当的方法，但并不是一个好的方法。计算机更善于在大型数据集中发现瑕疵，并且应该尽可能使用它们来发现问题。

即使以统计上有效但仍易于理解的方式对海量数据进行建模也很困难，更不用说无限量数据或多年积累的数据了。不要把你的创意和注意力花在感受不断演变的复杂系统上。机器不需要漂亮的用户界面 (UX) 来分析结构化数据。只要把数据喂给它们，然后梳理出对人类来说容易理解的输出就好了。

人类查看图表并手动触发警报，然后启动处理流程，这是荒谬的。当你发现这类流程上的问题时（人们为计算机提供有价值的数据，而非反过来），就意味着应该构建系统，以便由机器来监视数据并检测可能的问题。设计优良的系统可以尝试某种形式的自动响应，如果快速自动响应不能解决这个问题才提醒人类。如果没有这样的系统，当服务级别目标 (SLO) 开始接近 99.99% 时，人类无法足够快地处理事件检测和响应。

理应构建工具，使工程师能在良好的工程环境中花费时间考虑工程问题（而不是 NOC 或开放式办公环境中做灭火的事情），在需要人类关注时也能获得可靠通知，并能快速找到相关信息、系统和团队成员。

## 反模式 3：事件响应时一窝蜂

> *眼睛盯着球，但你的脚要留在自己负责的区域。*

**定义**：处理事件时一拥而上，很少考虑对协调工作、资源储备和 OSHT1) Observe 观察情况。2) State 说明问题。3) Hypothesize 假设原因/解决方案。4. Test 测试解决方案。故障排除、睡眠周期、人类认知限制或项目工程上的有害影响。

将 NOC 模型照搬到 SRE 团队（或者哪怕使用分布式系统，但未仔细限定其产生的警报范围）所产生的另一个问题是，人类的自然倾向是在警报或警报范围内的每个人会被打扰并开始关注这个潜在的问题。或者至少会分心，并在潜意识中开始被搅扰，直到问题确实得到解决。

这不仅对工程师的工作造成干扰，而且如果没有围绕事件响应的极好策略和纪律，实际上可以增加分析和解决问题的时间。当多人开始进行更改以同时测试多个假设，并互相交头接耳，并且可能在私下里完成了问题的处理时（以便遮掩保护问题根源），你就会意识到我说的是什么意思。

即使通过良好的协调来避免此类复杂情况，若问题无法立即解决，可能导致团队中的每个人都感到受挫，因此没有新的人（或新的班次）愿意加入解决问题，因为之前一窝蜂式的过激反应仍然在衰退期。

事故指挥系统（ICS）[维基百科关于事故指挥系统的条目](https://en.wikipedia.org/wiki/Incident_Command_System)。能提供一个良好的程序框架来处理这种情况，并学习和实施类似于 PagerDuty 故障响应指南 [的"轮值当班"](https://response.pagerduty.com/) 和 Paul 的建议。