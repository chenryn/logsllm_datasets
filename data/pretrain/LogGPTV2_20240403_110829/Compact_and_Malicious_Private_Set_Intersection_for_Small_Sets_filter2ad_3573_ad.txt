𝐻1, 𝐻2 are random oracles, and Π± is an ideal permutation.
Before giving the proof, we first sketch the main idea of the simu-
lator. The simulator’s job, when the adversary gives the polynomial
𝑃, is to extract a set ˜𝑌 that it can send to the ideal functionality.
Then, after learning 𝑋 ∩ ˜𝑌, it simulates the message 𝐾 appropriately.
Intuitively, we want to make a distinction between KA instances
where the receiver participates versus KA instances where the re-
ceiver acts as an eavesdropper. The former instances will correspond
to the items of ˜𝑌 and the latter instances will contribute to KA
outputs (and elements of 𝐾) that look random.
The honest sender will interpret Π(𝑃(𝐻1(𝑥))) as a KA message,
for every 𝑥 ∈ 𝑋. The receiver only “controls” this value if: (1) it made
a query to 𝐻1(𝑥); (2) it made a backwards query to Π−1 that resulted
in the value 𝑃(𝐻1(𝑥)). If on the other hand the adversary chose
𝑃(𝐻1(𝑥)) first and only then made a forward query at Π(𝑃(𝐻1(𝑥))),
then intuitively it will have no control over the resulting value.
The simulator observes all queries to Π± and to 𝐻1, and can
therefore use these criteria to identify which KA instances will give
outputs that the receiver can recognize. All other KA outputs can
safely be replaced with random.
We draw the reader’s attention to two subtleties in the proof:
Suppose the adversary queries Π to obtain some KA message 𝑚∗.
Since (intuitively) the adversary has no control over 𝑚∗, we would
like to argue that the corresponding KA.key(𝑚∗) (slightly abusing
notation here) looks random. But suppose the adversary programs
𝑃 so that Π(𝑃(𝐻1(𝑦))) = 𝑚∗ and Π(𝑃(𝐻1(𝑦′))) = 𝑚∗ + 1. If the
sender has both inputs 𝑦 and 𝑦′, then she will compute and send
KA.key(𝑚∗) and KA.key(𝑚∗ + 1). Does the former KA output look
random even in the presence of the latter? It does if the KA protocol
is non-malleable in the sense of Definition 3.3.
Another subtlety is that the receiver may choose its polynomial 𝑃
to have “collisions” in the sense that 𝑃(𝐻1(𝑦)) = 𝑃(𝐻1(𝑦′)). This is
not a problem or an attack per se, but it means that the hybrids in the
proof must be structured carefully. The goal of the proof is to justify
that the sender’s messages of the form 𝐻2(𝑥𝑖, KA.key(Π(𝑃(𝐻1(𝑥𝑖))))
can be replaced with random values, for all 𝑥𝑖 not in the intersection.
But the sequence of hybrids does not replace these real values with
random one at a time. Instead, we replace Π(𝑃(𝐻1(·))) outputs, one
at a time, with KA messages chosen by the simulator. Then we can
argue that KA.key(Π(𝑃(𝐻1(𝑥𝑖)))) is indistinguishable from random
for possibly many values of 𝑥𝑖 that give the same 𝑃(𝐻1(𝑥𝑖)).
Proof. We first formally describe the behavior of the simulator:
• The simulator honestly plays the role of random oracle 𝐻1 and
ideal permutation Π±. For every query 𝐻1(𝑦) made by the adver-
sary, record 𝑦 in a set O1. For every query Π−1(𝑚) = 𝑓 , where
there was no previous query of the form Π(𝑓 ) = 𝑚, record 𝑓
in a set OΠ.
• The simulator runs steps 1–2 honestly.
• Upon receiving 𝑃 in step 4, the simulator defines the set
˜𝑌 = {𝑦 | 𝑦 ∈ O1 and 𝑃(𝐻1(𝑦)) ∈ OΠ}
and sends ˜𝑌 to the ideal PSI functionality.
• Upon receiving output 𝑍 = 𝑋 ∩ ˜𝑌 from the functionality, the
simulator computes 𝑘𝑧 = KA.key1(𝑎, Π(𝑃(𝐻1(𝑧))) for each 𝑧 ∈ 𝑍.
Define 𝐾 = {𝐻2(𝑧, 𝑘𝑧) | 𝑧 ∈ 𝑍} and then keep adding uniformly
random values to 𝐾 until |𝐾| = |𝑋|. The simulator finally sends
this 𝐾 to the adversary.
We prove that this simulation is indistinguishable from the real
interation via the following sequence of hybrids.
Hybrid 0: The real interaction, with the sender running honestly
on input 𝑋. In particular, the protocol message 𝐾 is generated as
follows:
(cid:16)𝑥, KA.key1(cid:0)𝑎, Π(𝑃(𝐻1(𝑥))(cid:1)(cid:17) | 𝑥 ∈ 𝑋(cid:111)
(cid:110)𝐻2
𝐾 =
The lists O1 and OΠ are also maintained, as defined above.
Hybrid 1: Same as the previous hybrid, except the interaction
aborts in step 5 if there is an 𝑥 ∈ 𝑋 where 𝑥 ∉ O1 and yet
𝑃(𝐻1(𝑥)) ∈ OΠ. In other words, the adversary nevery queried
𝐻1(𝑥) and yet 𝑃(𝐻1(𝑥)) is a value that it previously received as
output from Π−1.
It suffices to show that the probability of such an abort is negligi-
ble. For any 𝑓 ∈ OΠ, the polynomial equation 𝑃(·) = 𝑓 has at most
𝑛 solutions, since 𝑃 is a polynomial of degree 𝑛, and not the zero
polynomial (that would mean 𝑃 is a constant polynomial and the
sender would have already aborted in step 4). Since 𝐻1(𝑥) is a fresh
query never made before (until the simulated sender makes it), it is
uniformly distributed in F and therefore has at most 𝑛/|F| proba-
bility of satisfying 𝑃(𝐻1(𝑥)) = 𝑓 . Suppose the adversary makes a
total of 𝑞 queries to its oracles. By a union bound over all 𝑛 choices
of 𝑥 ∈ 𝑋 and 𝑞 choices of 𝑓 ∈ OΠ, the total probability of this event
is 𝑛2𝑞/|F|, which is negligible.
Hybrid (2, 𝑖), for 𝑖 ∈ [𝑞]: Same as the previous hybrid, except for
the following changes. For the first 𝑖 queries of the form Π(𝑓 ) = 𝑚,
where there was no previous query to Π−1(𝑚), add 𝑓 to the set S𝑖.
Note that S𝑖 and OΠ are necessarily disjoint (based on whether Π
or Π−1 was queried first). Intuitively, S𝑖 are the first 𝑖 Π-outputs
(interpreted in the protocol as KA protocol messages) that the
adversary has no control over. Then compute 𝐾 instead as:
(cid:16)𝑥, KA.key1(cid:0)𝑎, Π(𝑃(𝐻1(𝑥))(cid:1)(cid:17) | 𝑥 ∈ 𝑋 and 𝑃(𝐻1(𝑥)) ∉ S𝑖
𝐾 =
and thereafter add uniformly random elements to 𝐾 until |𝐾| = 𝑛.
Note that there may be many values of 𝑥 giving the same 𝑃(𝐻1(𝑥))
(cid:110)𝐻2
(cid:111)
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1173Compact and Malicious Private Set Intersection for Small Sets
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
output, so there may be many values of 𝑥 treated differently between
Hybrids (2, 𝑖) and (2, 𝑖 + 1).
It should be clear that Hybrid (2, 0) is identical to Hybrid 2, since
S0 = ∅ and the new condition is always true. In Lemma 4.3 we
prove that Hybrids (2, 𝑖) and (2, 𝑖 + 1) are indistinguishable.
Hybrid 3: We rewrite Hybrid (2, 𝑞) for clarity. In this hybrid,
every Π(𝑓 ) = 𝑚 that is known in the interaction is represented in
either S𝑞 (for those known by an initial Π-query) or OΠ (for those
known by an initial Π−1 query). In other words, these two sets form
a partition of all known Π(𝑓 ) = 𝑚 points.
Let us consider how the set 𝐾 is computed in this hybrid. The
condition 𝑃(𝐻1(𝑥)) ∉ S𝑞 is equivalent to 𝑃(𝐻1(𝑥)) ∈ OΠ, meaning
that we can write:
(cid:16)𝑥, KA.key1(cid:0)𝑎, Π(𝑃(𝐻1(𝑥))(cid:1)(cid:17) | 𝑥 ∈ 𝑋 and 𝑃(𝐻1(𝑥)) ∈ OΠ
𝐾 =
(padded with random values).
Recall that the interaction aborts if there is any 𝑥 ∉ O1 but
𝑃(𝐻1(𝑥)) ∈ OΠ. In other words, conditioned on even reaching this
point in the interaction, 𝑃(𝐻1(𝑥)) ∈ OΠ implies 𝑥 ∈ O1. Hence we
can further rewrite the definition of 𝐾 as:
(cid:110)𝐻2
(cid:16)𝑥, KA.key1(cid:0)𝑎, Π(𝑃(𝐻1(𝑥))(cid:1)(cid:17) |
(cid:16)𝑥, KA.key1(cid:0)𝑎, Π(𝑃(𝐻1(𝑥))(cid:1)(cid:17) | 𝑥 ∈ 𝑋 ∩ ˜𝑌 (cid:111)
(cid:110)𝐻2
𝑥 ∈ 𝑋 ∩ O1
and 𝑃(𝐻1(𝑥)) ∈ OΠ
Now, suppose we define ˜𝑌 = {𝑦 | 𝑦 ∈ O1 and 𝑃(𝐻1(𝑦)) ∈ OΠ}.
Then 𝐾 can be rewritten in the equivalent form:
(cid:111)
(cid:110)𝐻2
𝐾 =
𝐾 =
In this form, it is now clear that the hybrid corresponds to the
behavior of the ideal interaction. That is, the simulator computes
˜𝑌, and then computes 𝐾 based only on the contents of 𝑍 = 𝑋 ∩ ˜𝑌,
its output from the functionality.
□
Lemma 4.3. Hybrids (2, 𝑖 − 1) and (2, 𝑖) are indistinguishable, if
the KA protocol is non-malleable (Definition 3.3) and |KA.K| ≥ 2𝜅.
Proof. The hybrids differ only in the following way: Hybrid
(2, 𝑖) replaces KA.key1(𝑎, Π(𝑓 ∗)) with random, in the event that 𝑓 ∗
was the 𝑖th query to Π (with no corresponding prior Π−1 query).
Recall that in the game that defines non-malleability of a KA,
the distinguisher receives (𝑚1 = KA.msg1(𝑎), 𝑚2, 𝑘) and also gets
access to an oracle for K(·) = KA.key1(𝑎, ·), which it cannot query
on 𝑚2. Below is a reduction algorithm that is a distinguisher for
the non-malleability game:
RK(𝑚1, 𝑚2, 𝑘):
• Run Hybrid (2, 𝑖 − 1) against the adversary, using 𝑚1 as the PSI
protocol message 𝑚.
• Maintain set S𝑖−1 as described. On the 𝑖th query to Π (i.e., the
value that would have been added to S𝑖), let 𝑓 ∗ denote the input
and simulate 𝑚2 = Π(𝑓 ∗) as the response.
• For every expression of the form KA.key1(𝑎, Π(𝑃(𝐻1(𝑥)))) used
in the definition of 𝐾:
– If 𝑃(𝐻1(𝑥)) = 𝑓 ∗ then replace the entire expression with 𝑘
(input to this reduction algorithm).
– Otherwise, replace the entire expression with the result of
K(Π(𝑃(𝐻1(𝑥)))), where K is the reduction algorithm’s oracle.
Since Π is a permutation, we have Π(𝑃(𝐻1(𝑥))) ≠ Π(𝑓 ∗) =
𝑚2; in other words, the oracle K is never invoked on 𝑚2.
Intuitively, this reduction algorithm runs the hybrid interaction
without knowing the KA randomness 𝑎. Instead, 𝑎 is used implicitly
via 𝑚1, 𝑘, and the oracle K.
When the input 𝑘 is the correct key 𝑘 = KA.key1(𝑎, 𝑚2), then the
simulation exactly matches Hybrid (2, 𝑖 − 1), since the reduction
correctly uses 𝑘 in place of the expression KA.key1(𝑎, Π(𝑓 ∗)) =
KA.key1(𝑎, 𝑚2).
Now consider the case that 𝑘 is a random key. Then when-
ever 𝑃(𝐻1(𝑥)) = 𝑓 ∗, the value 𝐻2(𝑥, 𝑘) is added to 𝐾. Since 𝐻2
is a random oracle, and since 𝑘 is uniform (and |𝑘| ≥ 𝜅), outputs
𝐻2(𝑥, 𝑘) are indistinguishable from random, even for multiple val-
ues of 𝑥 (e.g., in the case where the adversary constructs 𝑃 so that
𝑃(𝐻1(𝑥)) = 𝑓 ∗ for several values of 𝑥). In summary, when 𝑘 is
uniform, the simulation is indistinguishable from Hybrid (2, 𝑖) in
which a random value is added to the set 𝐾 in these cases. The
non-malleabiity of KA means that these two cases are indistin-
guishable.
□
(cid:111)
Optimizations. When KA is a one-round key agreement proto-
col (i.e., message 2 doesn’t depend on message 1, as in the Diffie-
Hellman instantiation), then the two messages 𝑚 and 𝐾 from the
sender can be combined. This leads to a 2-round PSI protocol
where the first flow is 𝑃 from the receiver and the second flow is
𝑚, 𝐾 from the sender.
Note that the direction of the last message (𝐻2 outputs from
sender to receiver) is important. It is not possible to save a round
of communication by letting the receiver send 𝐻2 outputs to the
sender. These 𝐻2 outputs are computed using the result of a KA
between a common 𝑎 (chosen by the sender) and various 𝑏𝑖 (chosen
by the receiver). Knowing 𝑎, the sender can compute the “correct”
𝐻2 for any 𝑥, so the receiver would expose a dictionary attack by
sending their set of 𝐻2 outputs.
If security is required against only semi-honest adversaries,
then the protocol can be streamlined slightly, as follows (full details
are given in Appendix A):
• The polynomial can be interpolated on values 𝑃(𝑦𝑖) instead of
• Instead of sending values of the form 𝐻2(𝑥𝑖, 𝑘𝑖), the sender can
simply send the 𝑘𝑖 values. Again, 𝐻2 was used only to extract.
Furthermore, the 𝑘𝑖 values can have length of only 𝜆 + 2 log(𝑛)
in order to ensure correctness with probability 1 − 2−𝜆.
𝑃(𝐻1(𝑦𝑖)); 𝐻1 was used only to help extract.
Two other possible optimizations are presented in Appendix B.
Costs. The sender must compute one KA message and 𝑛 KA
keys/outputs. The receiver computes 𝑛 KA responses and 𝑛 KA
keys/outputs. Both parties make 𝑛 queries to each of 𝐻1, 𝐻2, and
Π±. Finally, the receiver must interpolate a polynomial of degree 𝑛,
and the sender must evaluate such a polynomial on 𝑛 points. These
are both possible with 𝑂(𝑛 log2 𝑛) field operations, as described in
Section 2.3.
The total communication cost of the protocol consists of: (1) 1
KA message from the sender, (2) 𝑛 field elements (each equivalent in
size to a KA response) from the receiver to describe 𝑃, (3) 𝑛 outputs
of 𝐻2, each 2𝜅 bits.
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1174CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
Mike Rosulek and Ni Trieu
4.1 Size of Adversary’s Set
Recall that we consider an ideal functionality in which a corrupt
party can provide an input set that is “larger than advertised.” If
a corrupt party (specifically, the receiver) provides an input that
is as large as the universe of possible items, then PSI provides no
security whatsoever. Hence, it is important to bound the size of the
set that the simulator extracts.
Corrupt Sender. The sender gives a set 𝐾 during the protocol,
which is supposed to contain 𝐻2-outputs. The simulator extracts
by finding 𝑥 such that 𝐻2(𝑥, 𝑘) ∈ 𝐾, for an appropriate value 𝑘.
Since the output of 𝐻2 is 2𝜅 bits, the probability of the adversary
encountering a collision in 𝐻2 is negligible. Hence for each item in
𝐾, there is at most one preimage known to the adversary/simulator
and hence at most one item that will be included in the extracted
set ˜𝑋.
In other words, the simulator extracts an input set for a corrupt
sender of size at most |𝐾| = 𝑛. The protocol strictly enforces the
size of a corrupt sender’s input set.
Corrupt Receiver. The simulator for a corrupt receiver extracts
their input set as
˜𝑌 = {𝑦 | 𝑦 ∈ O1 and 𝑃(𝐻1(𝑦)) ∈ OΠ}
Abstractly speaking, the adversary sees 𝑞 outputs of 𝐻1, and it
sees 𝑞 outputs of Π. In the simulation, outputs of both 𝐻1 and
Π are uniform. The adversary then generates a polynomial 𝑃 of
degree less than 𝑛 (and greater than 0) and the simulator checks
whether 𝑃(𝛼) = 𝛽 for all outputs 𝛼 from 𝐻1 and all outputs 𝛽 from
Π. The number of such pairs is the size of the set that is extracted.
The question is therefore how many random points can the
adversary fit on a degree < 𝑛 polynomial?
CDJ shows that if the size of the field is 2𝑛𝜔(log 𝜅) then with over-
whelming probability no polynomial can fit more points than its
degree suggests. However, such a large field leads to quadratic total
communication (𝑛 coefficients in a field of more than 2𝑛 elements).
We instead prefer to stick to a field of minimum size (large enough
only to encode a KA message) and obtain bounds on the number of
items.
Definition 4.4. Let F be a field and define the PolyOverfit𝑛,𝑛′
game against an adversary A to be as follows:
F
(𝑞)
sample 𝛼1, . . . , 𝛼𝑞, 𝛽1, . . . , 𝛽𝑞 ← F
𝑃 ← A(𝛼1, . . . , 𝛼𝑞, 𝛽1, . . . , 𝛽𝑞)
if 0 < deg(𝑃) < 𝑛 and(cid:12)(cid:12)(cid:12){𝛼𝑖 | 𝑃(𝛼𝑖) ∈ {𝛽1, . . . , 𝛽𝑞}}(cid:12)(cid:12)(cid:12) ≥ 𝑛′:
declare A the winner
In other words, the adversary tries to generate a polynomial that
hits some 𝛽 𝑗 on at least 𝑛′ distinct 𝛼𝑖’s.
all PPT A, the adversary wins with negligible probability.
We say that PolyOverfit𝑛,𝑛′
is hard if for all polynomial 𝑞 and
F
Proposition 4.5. If PolyOverfit𝑛,𝑛′
is hard, then the simulator
for a corrupt receiver in our PSI protocol outputs a set of size bounded
by 𝑛′, except with negligible probability.
F
In Appendix C we show the following using a standard compres-
sion argument. If such an “overfitting” polynomial existed, it could
be used to generate a compressed representation of the 𝛼𝑖’s and
𝛽𝑖’s, which is impossible if they are uniform.
Lemma 4.6. The probability of winning PolyOverfit𝑛,𝑛′
(𝑞) is at
F
most (𝑞2𝑛)𝑛′/|F|𝑛′−𝑛.
Some concrete examples of this bound for |F| = 2256 are given
below:
𝑞
2107
2115
2102
2110
𝑛
210
210
220
220
𝑛′
8𝑛 + 4
16𝑛 + 8
8𝑛 + 4
16𝑛 + 8
bound
2−128
2−128
2−128
2−128
For example, when running the protocol for 𝑛 = 210 items, the
adversary will not be able to have an effective input of size 8𝑛 + 4,
with high probability.
We emphasize that the above bound is unconditional, meaning
that for the parameters above, such an “overfitting” polynomial
simply does not exist except with negligible probability. It seems
reasonable to conjecture that even when such polynomials exist,
finding them is hard for PPT adversaries. If such a claim were
proven, it would imply a tighter enforcement of set sizes in our
protocol.
We also emphasize that all malicious PSI protocols based on OT
extension have similar “slack” in the size of corrupt parties’ sets.