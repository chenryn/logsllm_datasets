sn -p keyPair.snk publicKey.snk 
以下命令显示公钥和包含在 publicKey.snk 中的公钥标记。 
sn -tp publicKey.snk 
以下命令验证组件 MyAsm.dll。 
sn-v MyAsm.dll 
以下命令从默认 CSP 中删除 MyContainer。 
sn -d MyContainer 
使用程序集链接器 
该工具是用 Visual Studio 和 Windows SDK 自动安装的。要运行该工具，我们建议您
使用 Visual Studio 命令提示符或 Windows SDK 命令提示符(CMD 外壳)。这些实用程序
使您能够轻松运行该工具，而无需导航到安装文件夹。有关更多信息，请参见 Visual Studio
和 Windows SDK 命令提示。 
如果您的计算机上安装了 Visual Studio: 
在任务栏上，单击开始，单击所有程序，单击 Visual Studio，单击 Visual Studio 工
具，然后单击 Visual Studio 命令提示符。 
-或者- 
如果您的计算机上安装了 Windows SDK: 
在任务栏上，单击开始，单击所有程序，单击 Windows SDK 文件夹，然后单击命令
163 
提示符(或 CMD 外壳)。 
在命令提示符下，键入以下内容:所有源选项 
注意： 
所有 Visual Studio 编译器都会生成程序集。但是，如果您有一个或多个模块(没有清单
的元数据)，您可以使用 Al.exe 在单独的文件中创建带有清单的程序集。 
若要在缓存中安装程序集、从缓存中移除程序集或列出缓存的内容，请使用全局程序集
缓存工具(Gacutil.exe)。 
以下命令使用 t2.netmodule 模块中的程序集创建一个可执行文件 t2a.exe。入口点是
我的类中的 Main 方法。 
al T2 . net module/target:exe/out:t2a . exe/main:MyCLaSS.main 
使用程序集属性 
您可以直接在代码中插入强名称信息。为此，根据密钥文件的位置，可以使用
AssemblyKeyFileAttribute 或 AssemblyKeyNameAttribute 
使用编译器选项:使用/keyfile 或/delaysign 
为了维护和保证组件的完整性，对开发人员来说保护密钥对是必要的。公钥应该是可访
问的，但对私钥的访问仅限于少数个人。开发具有强名称的程序集时，参考强名称目标程序
集的每个程序集都包含用于为目标程序集提供强名称的公钥标记。这要求公钥在开发过程中
可用。 
164 
您可以在构建时使用延迟签名或部分签名来为强名称签名在可移植可执行文件(PE)中
保留空间，但将实际签名推迟到稍后的某个阶段(通常是在发送程序集之前)。 
您可以在 C#和 VB.NET(MSDN)中使用/keyfile 或/delaysign 
参考 
• http://msdn.microsoft.com/en-us/library/wd40t7ad(v=vs.80).aspx 
• http://msdn.microsoft.com/en-us/library/c405shex(v=vs.110).aspx 
• http://msdn.microsoft.com/en-us/library/k5b5tt23(v=vs.80).aspx 
• http://msdn.microsoft.com/en-us/library/t07a3dye(v=vs.80).aspx 
• http://msdn.microsoft.com/en-us/library/t07a3dye(v=vs.110).aspx 
3.5.11 反编译 
往返是一种逆向工程技术，允许攻击者从某个应用程序反编译程序集。Ildasm.exe 可
用于此目的，ILAsm 用于重新编译程序集。 
MSIL 反汇编器(Ilasm.exe)是 MSIL 汇编器的配套工具。Ildasm.exe 获取了一个包含微
软中间语言(MSIL)代码的可移植可执行文件，并创建了一个适合作为 Ilasm.exe 输入的文本
文件。该工具是用 Visual Studio 和 Windows SDK 自动安装的。 
混淆的重要性 
如前所述，反编译是一种用于反向工程组件的技术。因此，如果您想避免您的程序集被
165 
逆向工程，更有甚者，代码是使用 Ildasm 和 Ilasm 工具恶意操作的受害者，那么最好应用
它。有不同种类的产品可以用于这一目的，如 DeepSea, Crypto 或 Dotfuscator。 
使用模糊处理 
避免逆向工程和篡改程序集的最有效的技术是使用模糊处理。Visual Studio 包含
Dotfuscator 的一个版本。这个程序可以通过选择 VS 菜单上的工具来访问 Dotfuscator(社
区版菜单命令)。注意:此工具在 Express 版本中不可用。 
若要混淆您的程序集: 
⚫ 
在 Visual Studio 中构建项目 
⚫ 
工具->Dotfuscator 版社区版 
⚫ 
屏幕提示询问项目类型，选择“创建新项目”，然后单击“确定” 
⚫ 
在 Dotfuscator 界面的“输入”选项卡上，单击“浏览并将程序集添加到列表” 
浏览已编译的应用程序 
ASPNetConfigs 
简介 
保护 ASP.NET 应用程序中的资源是 Web.config 文件中配置设置的组合，但是记住 IIS
配置在这方面也起着很大的作用，这一点很重要。这是一种集成的方法，提供了一个整体的
166 
安全框架。 
下面重点介绍了 web.config 文件中 ASP.NET 配置设置的最重要方面。有关总体概述，
请参见 ASP.NET 安全
(https://www.owasp.org/index.php/CRV2_FrameworkSpecIssuesASPNet)一章 
安全配置值 
保存在配置文件中的敏感信息应该加密。存储在 machineKey 元素中的加密密钥，例
如，带有用户名和密码的连接字符串，用于登录数据库。 
锁定 ASP.NET 配置设置 
您可以通过向位置元素添加一个 allowOverride 属性来锁定 ASP.NET 配置文件中的配
置设置 
使用位置设置配置目录 
通过元素，您可以为特定的文件夹和文件建立设置。路径属性用于指定文
件或子目录。这是在 Web.config 文件示例中完成的: 
示例： 
167 
为错误代码处理配置异常 
当用户发送错误请求或无效参数时，显示正确的错误代码是一个重要的配置。在分析对
应用程序的潜在攻击时，记录这些错误也是很好的帮助。 
可以在代码或 web.config 中配置这些错误。 
HttpException 方法描述了在处理 HTTP 请求期间发生的异常。 
例如: 
if (string.IsNullOrEmpty(Request[“id”])) 
throw new HttpException(400, “Bad request”); 
或者在网络配置文件中: 
168 
输入验证 
来自外部来源的任何东西都可以被认为是 web 应用程序中的输入。不仅是指用户通过
web 表单插入数据，而且从 web 服务或数据库中检索的数据，从浏览器发送的标题也属于
这一概念。定义确保输入安全的一种方法可以通过勾画信任边界来实现。 
定义所谓的信任边界可以帮助我们可视化所有可能的不可信输入。其中之一是用户
input.ASP.NET 有不同类型的验证，这取决于要应用的控制级别。默认情况下，网页代码针
对恶意用户进行验证。以下是使用的验证类型列表(MSDN，2013 年): 
图: IIS 输入验证 
验证类型 
使用的字段 
描述 
请求实体 
RequiredFieldValidator 
确保用户不绕过输入。 
对比值 
CompareValidator 
将用户输入的内容与常量值，另一个控件的
值（使用比较运算符，例如小于，等于或大于）
进行比较，或针对特定数据类型进行比较。 
169 
范围审计 
RangeValidator 
审计用户的输入内容是否在指定的上下边界
之间。 您可以审计数字，字母和日期对中的范围。 
模式匹配 
RegularExpressionValidator 
审计条目是否与正则表达式定义的模式匹
配。 通过这种类型的验证，您可以审计可预测的
字符序列，例如电子邮件地址，电话号码，邮政
编码等中的字符。 
用户自定
义 
CustomValidator 
使用您自己编写的验证逻辑审计用户的输
入。 通过这种类型的验证，您可以审计在运行时
派生的值。 
参考 
MSDN，2013 年“保护 ASP.NET 配置”，见
http://msdn.microsoft.com/en-us/library/ms178699%28v=vs.100%29.aspx (最后一
次查看，2013 年 7 月 25 日) 
3.5.12 .NET 身份验证控件 
在.NET，配置文件中有身份验证标记。元素配置应用程序使用的身
份验证模式。适当的身份验证模式取决于您的应用程序或 Web 服务的设计方式。默认的机
器配置设置应用如下所示的安全双向身份验证默认值： 
170 
authentication Attributes:mode=”[Windows|Forms|Passport|None]” 
表单认证指南 
要使用表单身份验证，请在元素上设置 mode=“表单”。接下来， 
使用子元素配置窗体身份验证。以下片段显示了安全身份验证元素
配置: 
示例： 
 Sliding session lifetime 
使用以下建议来提高表单身份验证安全性: 
⚫ 
对您的网站进行分区。 
⚫ 
设置 protection=“all”。 
171 
⚫ 
使用小的 cookie 超时值。 
⚫ 
考虑使用固定的有效期。 
⚫ 
将 SSL 与表单身份验证结合使用。 
⚫ 
如果不使用 SSL，请将 slidingExpiration 设置为“假”。 
⚫ 
请勿在生产服务器上使用元素。 
⚫ 
配置元素。 
⚫ 
使用唯一的 cookie 名称和路径。 
经典 ASP 
对于传统的 ASP 页面，身份验证通常是在对照数据库进行验证后，通过将用户信息包
含在变量中来手动执行的，因此您可以查找如下内容: 
Session (“UserId”) = UserName 
Session (“Roles”) = UserRoles 
代码审计.NET 管理代码 
.NET 托管代码不太容易受到非托管代码中常见漏洞的攻击，例如缓冲区溢出和内存损