# Title: A Control Flow Obfuscation Method to Discourage Malicious Tampering of Software Codes

## Authors:
- **Yu-Lun Huang**  
  Assistant Professor, National Chiao-Tung University, Taiwan  
  +886-3-5131476
- **F. S. Ho**  
  Manager, Alpha Networks, Inc., Hsinchu, Taiwan  
  +886-3-5636666
- **Hsin-Yi Tsai**  
  National Chiao-Tung University, Taiwan  
  +886-3-5712121
- **H. M. Kao**  
  Manager, Institute for Information Industry, Taiwan  
  +886-2-2739-9616

## Abstract
This paper introduces a control flow obfuscation method designed to discourage reverse engineering and malicious tampering of software codes. Given the original source code and desired obfuscation criteria, the proposed method decomposes the source code into fragments and applies various transformations to these fragments. The transformed fragments are then reassembled and obfuscated according to the specified criteria. Since only the control flows are obfuscated using a sequence of transformations that produce equivalent results to the original fragments, the final output retains the same execution results as the original code. This method can be combined with other security technologies such as watermarking or fingerprinting, thereby making it more difficult to reverse engineer or tamper with watermarked information embedded in the software.

**Keywords:** Software Obfuscation, Intellectual Property Protection, Control Flow Obfuscation, Reverse Engineering, Tamper-Resistance

## Introduction
The protection of intellectual property rights has become a significant challenge with the rapid growth of mobile services, where mobile code is distributed in the form of executables. The dilemma lies in distributing executable code while maintaining its secrecy and integrity. The ability to reverse engineer and alter these executables can undermine intellectual property rights, leading to software piracy, which is a major economic problem in the software industry, resulting in substantial profit losses.

In this paper, we propose a control flow obfuscation method focused on source-code level obfuscation for high-level programming languages like C or Pascal. Before applying the obfuscation method, the source program must be decomposed into a directed graph of control flows and its entry point. For any given source program, we parse the program to derive two sets of code blocks and branches along with their relationships. To obscure the program, a set of transformations that implement equivalent code should be applied to the source program. We present four fundamental sets of transformations: branch, split, reorder, and arbitrary.

### Transformations
1. **Branch Transforms**: These insert three types of opaque predicates (always true, always false, and random) inside a given code block.
2. **Split Transform**: This further obfuscates a code block by dividing it into many small pieces.
3. **Reorder Transform**: This obfuscates a code block by shifting it to another location in the program while preserving the same execution result.
4. **Arbitrary Transform**: This is any type of transformation inserted at a place that will never be reached, allowing for arbitrary implementation.

These transformations are the building blocks for more advanced or composite transformations, offering more complex obfuscation results.

### Implementation of Equivalent Codes
Implementing equivalent codes is a critical aspect of creating opaque predicates. In this paper, we present four possible methods for creating equivalent codes during obfuscation:
1. **Dependency Analysis**: Analyze the dependency of statements in the original blocks. If dependencies exist, apply dummy code, inline-outline methods, or create parallel tasks.
2. **Reordering Statements**: If no dependencies exist, reordering statements can also be used to create equivalent codes.

These transformations manipulate the control flow of a program to make it difficult to observe its original structure.

### Considerations
When considering the side effects of obfuscating software code, such as increased code size and slower execution time, it is essential to carefully determine the criteria for different applications and balance security and overhead. Practically, we only need to obfuscate code that must be protected against tampering, such as code with embedded watermarks, access control functions, and confidential algorithms. Not all portions of a software code need to be obfuscated; for example, timing-critical code is not a good target for obfuscation, and obfuscating publicly available functions may not be necessary.

Providing the expected effort of de-obfuscation, potency, and resilience of obfuscation transformations can be used to assess the strength and robustness of obfuscated code and suggest a better composition of the transformation sequence to be applied to the original code.

## Acknowledgments
This work is supported in part by Alpha Networks, Inc. and the Institute for Information Industry, Taiwan.

---

**Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.**

**ASIACCS’06, March 20–22, 2006, Taipei, Taiwan. Copyright 2006 ACM 1-59593-321-0/06/0003…$5.00.**