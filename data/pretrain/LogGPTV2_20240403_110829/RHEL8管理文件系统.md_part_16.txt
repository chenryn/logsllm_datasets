::: itemizedlist
-   `xfs`{.literal}
-   `ext2`{.literal}
-   `ext3`{.literal}
-   `ext4`{.literal}
-   `fat16`{.literal}
-   `fat32`{.literal}
-   `hfs`{.literal}
-   `hfs+`{.literal}
-   `linux-swap`{.literal}
-   `ntfs`{.literal}
-   `ReiserFS`{.literal}
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-file-systems.html#partition-naming-scheme_assembly_creating-a-partition}分区命名方案 {.title}
:::
Red Hat Enterprise Linux 使用基于文件的命名方案，其文件名采用
`/dev/xxyN`{.literal} 的形式。
设备和分区名称由以下结构组成：
::: variablelist
[`/dev/`{.literal}]{.term}
:   这是所有设备文件所在的目录名称。由于分区放置在硬盘上，而硬盘就是设备，代表所有可能分区的文件位于
    `/dev`{.literal} 中。
[`xx`{.literal}]{.term}
:   分区名称的前两个字母表示分区所在的设备类型，通常是 `sd`{.literal}。
[`y`{.literal}]{.term}
:   这个字母标明分区所在的设备。例如，第一个硬盘为
    `/dev/sda`{.literal}，第二个硬盘为
    `/dev/sdb`{.literal}，以此类推。在超过 26
    个驱动器的系统中，您可以使用更多字母。例如：
    `/dev/sdaa1`{.literal}。
[`N`{.literal}]{.term}
:   最后的字母代表分区的数字。前四个（主分区或扩展分区或扩展分区）编号为
    `1`{.literal} 到 `4`{.literal}。逻辑分区从 `5`{.literal}
    开始.例如，`/dev/sda3`{.literal}
    是第一个硬盘上的第三个主分区或扩展分区，`/dev/sdb6`{.literal}
    是第二个硬盘上的第二个逻辑分区。驱动器分区编号只适用于 MBR
    分区表。请注意，[**[*N*]{.emphasis}**]{.strong} 并不总是意味着分区。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
即使 Red Hat Enterprise Linux 可以识别和引用
[*所有*]{.emphasis}类型的磁盘分区，它可能无法读取文件系统，因此无法访问分区类型中保存的数据。然而，在很多情况下，成功访问专用于另一个操作系统的分区中的数据是可能的。
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-file-systems.html#mount-points-and-disk-partitions_assembly_creating-a-partition}挂载点和磁盘分区 {.title}
:::
在 Red Hat Enterprise Linux
中，每个分区都被用来成为支持一组文件和目录所必需的存储的一部分。这可使用名为
[*mounting*]{.emphasis}
的进程完成，该进程可将分区和目录相关联。[*挂载分区后，可以从指定的目录（称为挂载点*]{.emphasis}
）开始使用其存储。
例如，如果分区 `/dev/sda5`{.literal} 挂载在 `/usr/`{.literal}
上，这意味着 `/usr/`{.literal} 实际下的所有文件和目录都驻留在
`/dev/sda5`{.literal} 上。因此，文件
`/usr/share/doc/FAQ/txt/Linux-FAQ`{.literal} 将存储在
`/dev/sda5 上，而文件 /etc/`{.literal} gdm/custom.conf 则不会存储在
/dev/``{=html} sda5 上。
继续这个示例，也可以将 `/usr/`{.literal}
下的一个或多个目录作为其他分区的挂载点。例如，分区 `/dev/sda7`{.literal}
可以挂载到 `/usr/local`{.literal} 上，即
`/usr/local/man/whatis`{.literal} 将位于 `/dev/sda7`{.literal}，而不是
`/dev/sda5`{.literal} 上。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-file-systems.html#proc_creating-a-partition-with-parted_assembly_creating-a-partition}使用 parted 创建分区 {.title}
:::
这个步骤描述了如何使用 `parted`{.literal} 工具在块设备中创建新分区。
::: itemizedlist
**先决条件**
-   磁盘上有一个分区表。有关如何格式化磁盘的详情请参考
    ["在磁盘中创建分区表"一节](#assembly_getting-started-with-partitions_managing-file-systems.html#assembly_creating-a-partition-table-on-a-disk_assembly_getting-started-with-partitions "在磁盘中创建分区表"){.xref}。
-   如果您要创建的分区大于 2TiB，则必须使用 GUID
    分区表(GPT)格式化该磁盘。
:::
::: orderedlist
**流程**
1.  启动交互式 `部分`{.literal} shell：
    ``` screen
    # parted block-device
    ```
    ::: itemizedlist
    -   使用您要创建分区的设备的路径替换
        [*[block-device]{.replaceable}*]{.emphasis} ：例如
        `/dev/sda`{.literal}。
    :::
2.  查看当前的分区表来确定是否有足够空闲空间：
    ``` screen
    (parted) print
    ```
    ::: itemizedlist
    -   如果没有足够的可用空间，您可以调整现有分区的大小。更多信息请参阅
        ["重新定义分区尺寸"一节](#assembly_getting-started-with-partitions_managing-file-systems.html#assembly_resizing-a-partition_assembly_getting-started-with-partitions "重新定义分区尺寸"){.xref}。
    -   从分区表中决定：
        ::: itemizedlist
        -   新分区的开始和结束点
        -   在 MBR 上，它应该是什么分区类型。
        :::
    :::
3.  创建新分区：
    ``` screen
    (parted) mkpart part-type name fs-type start end
    ```
    ::: itemizedlist
    -   使用 `primary`{.literal}、`logical`{.literal} 或 extend（
        `根据`{.literal} 您在分区表中决定）替换
        [*[part-type]{.replaceable}*]{.emphasis}。这只适用于 MBR
        分区表。
    -   使用任意分区名称替换 [*[name]{.replaceable}*]{.emphasis}。对于
        GPT 分区表，这是必需的。
    -   使用 `xfs`{.literal}
        [*[、`ext2、ext3`{.literal}、ext``{=html}
        `4`{.literal}、fat`16`{.literal}、fat`32`{.literal}、hfs、`hfs`{.literal}
        `+、Linux-swap`{.literal}、`ntfs`{.literal} ``{=html} 或
        `reiserfs`{.literal} 之一替换
        fs-type]{.replaceable}*]{.emphasis}。[*[fs-type]{.replaceable}*]{.emphasis}
        参数是可选的。请注意 `，parted`{.literal}
        不会在分区上创建文件系统。
    -   用从磁盘开头起计算分区开始和结束点的大小替换
        [*[start]{.replaceable}*]{.emphasis} 和
        [*[end]{.replaceable}*]{.emphasis}。您可以使用大小后缀，如
        `512MiB`{.literal}、`20GiB`{.literal} 或
        `1.5TiB`{.literal}。默认大小 MB。
    :::
    ::: example
    []{#assembly_getting-started-with-partitions_managing-file-systems.html#idm139716087684256}
    **例 10.3. 创建小的主分区**
    ::: example-contents
    例如：要在 MBR 表中创建主分区（从 1024MiB 到 2048MiB），使用：
    ``` screen
    (parted) mkpart primary 1024MiB 2048MiB
    ```
    :::
    :::
    输入此命令后，这些更改就会生效，因此在执行前请先重新检查。
4.  查看分区表以确认创建的分区位于分区表中，并带有正确的分区类型、文件系统类型和大小：
    ``` screen
    (parted) print
    ```
5.  退出 `parted`{.literal} shell:
    ``` screen
    (parted) quit
    ```
6.  使用以下命令等待系统注册新设备节点：
    ``` screen
    # udevadm settle
    ```
7.  验证内核是否识别了新的分区：
    ``` screen
    # cat /proc/partitions
    ```
:::
::: itemizedlist
**其它资源**
-   `parted(8)手册页`{.literal}.
:::
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-file-systems.html#proc_setting-a-partition-type-with-fdisk_assembly_creating-a-partition}使用 fdisk 设置分区类型 {.title}
:::
这个步骤描述了如何使用 `fdisk`{.literal} 实用程序设置分区类型或标志。
::: itemizedlist
**先决条件**
-   磁盘上有一个分区。
:::
::: orderedlist
**流程**
1.  启动交互式 `fdisk`{.literal} shell：
    ``` screen
    # fdisk block-device
    ```
    ::: itemizedlist
    -   使用您要设置分区类型的设备的路径替换
        [*[block-device]{.replaceable}*]{.emphasis} ：例如
        `/dev/sda`{.literal}。
    :::
2.  查看当前的分区表以确定副分区号码：
    ``` screen
    Command (m for help): print
    ```
    您可以在 `Type`{.literal} 列中看到当前的分区类型及其对应的类型
    ID（在 `Id`{.literal} 列中）。
3.  输入分区类型命令并使用它的副号码选择分区：
    ``` screen
    Command (m for help): type
    Partition number (1,2,3 default 3): 2
    ```
4.  另外，还可列出可用的十六进制代码：
    ``` screen
    Hex code (type L to list all codes): L
    ```
5.  设置分区类型：
    ``` screen
    Hex code (type L to list all codes): 8e
    ```
6.  编写更改并退出 `fdisk`{.literal} shell：
    ``` screen
    Command (m for help): write
    The partition table has been altered.
    Syncing disks.
    ```
7.  验证您的更改：
    ``` screen
    # fdisk --list block-device
    ```
:::
:::
:::
::: section
::: titlepage
# []{#assembly_getting-started-with-partitions_managing-file-systems.html#assembly_removing-a-partition_assembly_getting-started-with-partitions}删除分区 {.title}
:::
作为系统管理员，您可以删除不再用来释放磁盘空间的磁盘分区。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
删除分区将删除保存在分区中的所有数据。
:::
::: section
::: titlepage
## []{#assembly_getting-started-with-partitions_managing-file-systems.html#con_considerations-before-modifying-partitions-on-a-disk_assembly_removing-a-partition}修改磁盘分区前的注意事项 {.title}
:::
本节列出了在创建、删除或重新定义分区大小前需要考虑的关键点。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
本节不涵盖 DASD 分区表，它特定于 IBM Z 构架。有关 DASD 的详情请参考：
::: itemizedlist
-   [在 IBM Z 中配置 Linux
    实例](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/performing_a_standard_rhel_installation/configuring-a-linux-instance-on-ibm-z_installing-rhel){.link}
-   IBM [知识库中您应该了解的
    DASD](https://www.ibm.com/support/knowledgecenter/linuxonibm/com.ibm.linux.z.lgdd/lgdd_c_dasd_know.html){.link}
    文章
:::
:::
#### []{#assembly_getting-started-with-partitions_managing-file-systems.html#_the_maximum_number_of_partitions_3}分区的最大数量
设备中的分区数量受分区表类型的限制：
::: itemizedlist
-   [**在使用主引导记录(MBR)分区表格式化的设备中**]{.strong}，您可以使用：
    ::: itemizedlist
    -   最多四个主分区，或者
    -   最多有三个主分区，以及一个扩展分区，其中包括多个逻辑分区。
    :::
-   在使用 [**GUID 分区表(GPT)**]{.strong} 格式化的设备中，最多分区数为
    128。尽管 GPT 规范通过增大为分区表保留的区域来允许更多分区，但
    `parted`{.literal} 实用程序使用的常见做法是将其限制为 128
    个分区的足够区域。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
红帽建议，除非有其他原因，否则 [*至少应*]{.emphasis} 创建以下分区：
`swap`{.literal}、`/boot/`{.literal} 和 `/`{.literal} (root)。
:::
#### []{#assembly_getting-started-with-partitions_managing-file-systems.html#_the_maximum_size_of_a_partition_3}分区的最大大小
设备中的分区大小受分区表类型的限制：
::: itemizedlist
-   在使用[**主引导记录（MBR）**]{.strong}
    分区表格式化的设备中，最大值为 2TiB。
-   在使用 [**GUID 分区表(GPT)**]{.strong} 格式化的设备中，最大大小为
    8ZiB。
:::
如果要创建一个大于 2TiB 的分区，该磁盘必须使用 GPT 格式化。
#### []{#assembly_getting-started-with-partitions_managing-file-systems.html#_size_alignment_3}大小协调
`parted`{.literal} 工具可让您使用多个不同的后缀指定分区大小：
::: variablelist
[MiB、GiB 或 TiB]{.term}
:   大小为 2 的指数代表。
    ::: itemizedlist
    -   分区的起点与根据大小指定的扇区一致。
    -   结束点与指定大小减 1 扇区一致。
    :::
[MB、GB 或 TB]{.term}
:   以 10 的指数表示容量。