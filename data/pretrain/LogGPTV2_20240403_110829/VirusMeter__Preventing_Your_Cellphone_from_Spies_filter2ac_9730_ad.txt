FlexiSPY can also collect user events, such as call logs, and then deliver collected
information via a GPRS connection periodically at a pre-conﬁgured time inter-
val. Clearly, transferring data through GPRS consumes power and the power
consumption depends on the time interval and the characteristics of user oper-
ations such as the number of text messages sent during each interval.
In our detection experiments, we set the interval from 30 minutes to 6 hours,
with an interval of 30 minutes. Under each setting, we keep sending and receiv-
ing text messages of diﬀerent sizes ranging from 10 bytes to 1000 bytes.Table 3
shows the detection results. We can see all three approaches achieve detection
rates above 88%. The long-term detection with linear regression and neural net-
work can achieve a detection rate up to 98.6%. Our analysis shows that this is
because such a FlexiSPY functionality consumes additional power other than
communication: although when the interval is large, FlexiSPY may not transfer
data for a while, FlexiSPY still needs to monitor and save information related to
user activities, which also consumes battery power. Thus, even in short-term ex-
periments, the detection rate is quite high. To our surprise, decision tree does not
achieve comparable results to linear regression and neural networks for middle-
term and long-term detection. We believe that the performance of decision tree
is highly related to the training dataset, for which we are currently constrained
by a limited number of malware samples.
8.4 Experiments on Detecting Cabir
Cabir, a cellphone worm spreading via Bluetooth, searches nearby Bluetooth
equipments and then transfers a sis ﬁle to them once found. The power con-
sumption of Cabir mainly comes from two parts: neighbor discovery and ﬁle
transferring. Because Bluetooth normally does not consume signiﬁcant bat-
tery power, we conduct the experiments in an environment full of Bluetooth
260
L. Liu et al.
Table 4. Detection Rate (%) on Cabir
Short-Term Middle-Term Long-Term
Linear Regression
Neural Network
Decision Tree
84.6
88.6
86.8
89.8
93.4
87.6
92.9
93.5
88.7
Table 5. Detection Rate (%) on Multiple Malware Infection
Short-Term Middle-Term Long-Term
Linear Regression
Neural Network
Decision Tree
84.8
88.9
72.6
87.9
90.2
76.3
88.1
92.0
73.6
equipments, in which Cabir keeps ﬁnding new equipments and thus consumes
a nontrivial amount of power. To control the frequency of ﬁle transferring, we
repeatedly turn oﬀ Bluetooth on these devices for a random amount of time after
a transfer completes and then turns it on again.
Table 4 shows the detection results. For linear regression, the middle-term and
long-term detection can remarkably improve the detection result. The table also
indicates that although Bluetooth discovery and ﬁle transferring only consume
a limited amount of battery power, it can be detected with a reasonably high
rate by VirusMeter at real time.
8.5 Experiments on Detecting Multiple Malware Infections
Previous detection experiments all involve only one malware program running
on the cellphone. It is possible that a mobile device is infected by more than one
malware program and each malware program could perform diﬀerent attacks
simultaneously. To test such cases, we activate both FlexiSPY and Cabir on our
experimental cellphone and randomly conduct various attack combinations.
Table 5 shows the detection rates. The results show that both linear re-
gression and neural network still have reasonably high true positive rates. But
decision tree results in a much higher false negative rate than in single mal-
ware infection experiments. Although it is seemingly counterintuitive, the un-
derlying principle of these three approaches can explain this: linear regression
and neural network regression only predict the power consumption of normal
user operations rather than describing power consumption of speciﬁc malware
activities, which is the objective of decision tree. However, our decision tree
model is not trained with a mixture of malware samples. Thus for data samples
collected when multiple malware programs are active, its performance is the
worst.
VirusMeter: Preventing Your Cellphone from Spies
261
Table 6. VirusMeter False Positive Rate (%)
Short-Term Middle-Term Long-Term
Linear Regression
Neural Network
Decision Tree
22.4
10.0
15.2
14.2
5.1
15.1
10.3
4.3
14.4
8.6 False Positive Experiments
In addition to the detection rates, we also conduct experiments to evaluate false
positives. By feeding power models with a clean dataset, we can get the predic-
tion result and calculate the false positive rate. For this purpose, we collect more
than 100 clean data samples for experiments.
Table 6 shows the false positive rates. The results show that linear regression
in short-term detection has the highest false positive rate. This is due to the
inaccuracy of the underlying assumption of linear regression model. However,
both middle-term and long-term experiments can signiﬁcantly reduce the false
positive rates. With a more accurate power model, neural network achieves the
best results among the three for all three terms.
8.7 VirusMeter Overhead Measurement
As VirusMeter targets to run on commodity devices, its power consumption over-
head is a great concern. As we cannot directly measure the power consumption
of VirusMeter, we conduct experiments as follows: with and without VirusMeter
running on the cellphone, we conduct the same set of user operations and then
)
s
e
t
u
n
m
i
(
n
o
i
t
a
r
u
D
120
100
80
60
40
20
0
1
6
7
8
VirusMeter−Off
VirusMeter−On
2
3
4
5
Experiments
Fig. 7. VirusMeter overhead evaluation
262
L. Liu et al.
compare the operating durations under these two scenarios. Figure 7 shows our
experimental results. We can see that with and without VirusMeter, the duration
of various user operations is very close. The average duration when VirusMeter
is oﬀ is 109.5 minutes across our experiments, while the average duration when
VirusMeter is on is 108 minutes. This indicates the VirusMeter running overhead
is less than 1.5%. Note the above results show the overhead when VirusMeter
uses the linear regression model. For the other two approaches, we do not eval-
uate their power consumption because they run in a battery-charging mode.
9 Further Discussion
VirusMeter, in principle, has the potential to detect any misbehavior with abnor-
mal power consumption as long as the battery power metering is suﬃciently ac-
curate. Currently, precisions of battery power indicators vary signiﬁcantly among
diﬀerent mobile OSes, which can aﬀect the detection eﬃciency of VirusMeter.
This is particularly important for real-time detection. Practically, on our exper-
imental device, this changes the real-time detection mode of VirusMeter to a
near-real-time mode.
Since VirusMeter relies on the user-centric power models to detect malware,
the accuracy of the models themselves is important. Our experimental results
have shown that linear regression, although consuming trivial additional power,
may generate high false negative rates due to the inaccurate underlying assump-
tion between variables. On the other hand, in a battery-charging mode, neural
network often improves the detection rate remarkably due to lack of such an
assumption. The decision tree model does not perform as eﬀectively as neural
networks in our experiments. We believe that our limited malware samples may
adversely aﬀect its performance, and we plan to collect more samples in the
future to further evaluate this method. In addition, for some types of user oper-
ations, such as entertainment and Web surﬁng, more ﬁne-grained proﬁling can
further improve the accuracy of the power model.
As we suggested, VirusMeter can also run in the battery-charging mode to
improve the detection accuracy. Malware may leverage this as well since when
the battery is charging, there is no way for VirusMeter to accurately measure
the power consumption without any external assistance. To capture this kind
of malware, VirusMeter needs external devices to measure how much power is
charged and how much power is consumed. On the other hand, currently most
mobile OSes are only accessible to manufacturers. If we place VirusMeter in the
mobile OS, VirusMeter becomes more resilient to those attacks that could fail
signature- or anomaly-based detection schemes. But if the mobile OS is also
cracked and the malware knows how to inject faked events, VirusMeter will also
fail because the data collected by VirusMeter cannot be trusted any more.
10 Conclusion
The battery power supply is often regarded as the Achilles’ heel of mobile de-
vices. Provided that any activity conducted on a mobile device, either normal or
VirusMeter: Preventing Your Cellphone from Spies
263
malicious, inevitably consumes some battery power, VirusMeter exploits this to
detect existence of malware with abnormal power consumption. VirusMeter re-
lies on a concise lightweight user-centric power model and aims to detect mobile
malware in two modes: While the real-time detection mode provides immediate
detection, running VirusMeter under the battery-charging mode can further im-
prove the detection accuracy without concerns of resource consumption. Using
real-world malware such as Cabir and FlexiSpy, we experimentally show that
VirusMeter can eﬀectively and eﬃciently detect their existence.
Acknowledgment
We thank the anonymous referees for providing constructive comments. The
work has been supported in part by U.S. AFOSR under grant FA9550-09-1-
0071, and by U.S. National Science Foundation under grants CNS-0509061, CNS-
0621631, and CNS-0746649.
References
1. http://www.wellingtonfund.com/blog/2007/02/19/gmp-3gsm-wrapup/
2. http://en.wikipedia.org/wiki/Smartphone
3. http://www.viruslibrary.com/
4. http://vx.netlux.org/29a/
5. http://www.flexispy.com/
6. http://www.panasonic.com/inustrial_oem/battery/battery_oem/chem/lith/
lith.htm
7. http://en.wikipedia.org/wiki/Stepwise_regression
8. Commwarrior, http://www.f-secure.com/v-descs/commwarrior.shtml
9. Sprots fans in helsinki falling prey to cabir, http://news.zdnet.com
10. Bose, A., Hu, X., Shin, K., Park, T.: Behavioral detection of malware on mobile
handsets. In: Proceedings of Mobisys, Breckenridge, CO (June 2008)
11. Bose, A., Shin, K.: On mobile virus exploiting messaging and bluetooth services.
In: Proceedings of Securecomm (2006)
12. Bose, A., Shin, K.: Proactive security for mobile messaging networks. In: Proceed-
ings of WiSe (2006)
13. Cheng, J., Wong, S., Yang, H., Lu, S.: Smartsiren: Virus detection and alert for
smartphones. In: Proceedings of ACM MobiSys, San Juan, Puerto Rico (2007)
14. Chiasserini, C., Rao, R.: Pulsed battery discharge in communication devices. In:
Proceedings of MobiComm, Seattle, WA (August 1999)
15. Dagon, D., Martin, T., Starner, T.: Mobile phones as computing devices: The
viruses are coming! IEEE Pervasive Computing (2004)
16. Enck, W., Traynor, P., McDaniel, P., Porta, T.: Exploiting open functionality in
sms-capable cellular networks. In: Proceedings of CCS 2005 (November 2005)
17. Fleizach, C., Liljenstam, M., Johansson, P., Voelker, G., Mehes, A.: Can you in-
fect me now? malware propagation in mobile phone networks. In: Proceedings of
WORMS, Alexandria, VA (November 2007)
18. Fuller, T., Doyle, M., Newman, J.: Simulation and optimization of the dual lithium
ion insertion cell. Journal of Electrochem. Soc. 141 (April 1994)
264
L. Liu et al.
19. Guo, C., Wang, H., Zhu, W.: Smart-phone attacks and defenses. In: Proceedings
of HotNets III, San Diego, CA (November 2004)
20. Hu, G., Venugopal, D.: A malware signature extraction and detection method
applied to mobile networks. In: Proceedings of IPCCC (April 2007)
21. Hypponen, M.: http://www.usenix.org/events/sec07/tech/hypponen.pdf
22. Kim, H., Smith, J., Shin, K.: Detecting energy-greedy anomalies and mobile mal-
ware variants. In: Proceedings of Mobisys, Breckenridge, CO (June 2008)
23. Mickens, J., Noble, B.: Modeling epidemic spreading in mobile networks. In: Pro-
ceedings of ACM WiSe (2005)
24. Mulliner, C., Vigna, G., Dagon, D., Lee, W.: Using labeling to prevent cross-service
attacks against smart phones. In: B¨uschkes, R., Laskov, P. (eds.) DIMVA 2006.
LNCS, vol. 4064, pp. 91–108. Springer, Heidelberg (2006)
25. Park, S., Savvides, A., Srivastava, M.: Battery capacity measurement and analysis
using lithium coin cell battery. In: Proceedings of ISLPED (August 2001)
26. Racic, R., Ma, D., Chen, H.: Exploiting mms vulnerabilities to stealthily exhaust
mobile phone’s battery. In: Proceedings of SecureComm 2006 (August 2006)
27. Sarat, S., Terzis, A.: On the detection and origin identiﬁcation of mobile worms.
In: Proceedings of WORMS, Alexandria, VA (November 2007)
28. Simunic, T., Benini, L., Micheli, G.: Energy-eﬃcient design of battery-powered
embedded systems. In: Proceedings of ISLPED (August 1999)
29. Su, J., Chan, K., Miklas, A., Po, K., Akhavan, A., Saroiu, S., Lara, E., Goel, A.:
A preliminary investigation of worm infections in a bluetooth environment. In:
Proceedings of WORM (2006)
30. Traynor, P., Enck, W., McDaniel, P., Porta, T.: Mitigating attacks on open func-
tionality in sms-capable cellular networks. In: Proceedings of Mobicom 2006 (2006)
31. Venugopal, D., Hu, G., Roman, N.: Intelligent virus detection on mobile devices.
In: Proceedings of ACM PST, Markham, Ontario, Canada (October 2006)
32. Yan, G., Eidenbenz, S.: Modeling propagation dynamics of bluetooth worms. In:
Proceedings of ICDCS 2007 (2007)