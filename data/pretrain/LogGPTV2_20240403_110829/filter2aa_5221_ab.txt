    让$R = r_1r_2r_3\cdots r_m$，同时找到$P_0$使得$(P_0^2-4, N) = 1$，定义$V_n(P) = V_n(P, 1), U_n(P) = U_n(P, 1)$且
    $$
    P_j \equiv V_{r_j}(P_{j-1})\pmod{N}(j = 1,2,3,\dots,m)
    $$
    根据`公式2.7`，有
    $$
    P_m \equiv V_R(P_0)\pmod{N}\tag{3.1}
    $$
    要计算$V_r = V_r(P)$可以用如下公式
    根据`公式2.2`，`公式2.3`，`公式2.4`有
    $$
    \begin{cases}
        V_{2f-1}&\equiv V_fV_{f-1}-P\\
        V_{2f}&\equiv V_f^2 - 2\\
        V_{2f+1}&\equiv PV_f^2-V_fV_{f-1}-P\pmod(N)
    \end{cases}
    $$
    令
    $$
    r = \sum_{i=0}^t{b_t2^{t-i}}\ \ \ \ (b_i=0,1)
    $$
    $f_0=1, f_{k+1}=2f_k+b_{k+1}$，则$f_t=r$，同样$V_0(P) = 2, V_1(P) = P$，则最终公式为
    $$
    (V_{f_{k+1}}, V_{f_{k+1}-1}) = \begin{cases}
    (V_{2f_k}, V_{2f_k-1})\ \ \ \ if\ b_{k+1}=0\\
    (V_{2f_k+1}, V_{2f_k})\ \ \ \ if\ b_{k+1}=1
    \end{cases}
    $$
* `第二种情况`：已知p+1是一个光滑数
    $$
    p = s\left(\prod_{i=1}^k{q_i^{\alpha_i}}\right)-1
    $$
    当$s$是素数，且$B_1 题目来源：XMan 一期夏令营课堂练习 
可以看出两个公钥的 N 是一样的，并且两者的 e 互素。写一个脚本跑一下：
```python
import gmpy2
n = 6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249
e1 = 773
e2 = 839
message1 = 3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349
message2 = 5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535
# s & t
gcd, s, t = gmpy2.gcdext(e1, e2)
if s < 0:
    s = -s
    message1 = gmpy2.invert(message1, n)
if t < 0:
    t = -t
    message2 = gmpy2.invert(message2, n)
plain = gmpy2.powmod(message1, s, n) * gmpy2.powmod(message2, t, n) % n
print plain
```
得到
```shell
➜  Xman-1-class-exercise git:(master) ✗ python exp.py
1021089710312311910410111011910111610410511010710511610511511211111511510598108101125
```
这时候需要考虑当时明文是如何转化为这个数字了，一般来说是 16 进制转换，ASCII 字符转换，或者 Base64 解密。这个应该是 ASCII 字符转换，进而我们使用如下代码得到 flag
```python
i = 0
flag = ""
plain = str(plain)
while i < len(plain):
    if plain[i] == '1':
        flag += chr(int(plain[i:i + 3]))
        i += 3
    else:
        flag += chr(int(plain[i:i + 2]))
        i += 2
print flag
```