nerability
the normal digest values. The normal digests can be ex-
tracted from the TCG event logs. When a value is ex-
tended to a PCR, the ﬁrmware makes an entry in the
TCG event logs for later veriﬁcation. According to TCG
ACPI speciﬁcation [38], the starting address of the pre-
boot event logs is written in the Local Area Start Address
ﬁeld of the Hardware Interface Description Table in the
ACPI table. This ﬁeld is located at offset 42 in TPM 1.2,
whereas it is optionally located at offset 68 in TPM 2.0.
TPM
2.0
X
Bootloader
GRUB for
CoreOS [5]
Trusted-
GRUB1 [40]
Trusted-
GRUB2 [41]
GRUB-
IMA [24]
BIOS
support
UEFI
support
TPM
1.2
X
X
X
X
X
X
X
X
X
Table 2: List of bootloaders with BIOS/UEFI support
and TPM version
When the ﬁeld is not there, there is another option for
obtaining the logs. The BIOS/UEFI ﬁrmware saves the
event logs separately as well for its own use. These logs
are accessible until the control is given to the kernel in
UEFI mode because they are removed when ExitBoot-
Service() is called [36].
To obtain and reuse the normal digests in the logs, we
crafted exploits modifying an existing bootloader and the
kernel. The bootloader calls the GetEventLog() UEFI in-
terface and collects all event logs. The logs are passed to
the kernel through a reserved memory region. The logs
are saved in a 64K memory block starting from 0x80000,
which is below the 1MB address space. This area should
be excluded from the kernel range by setting the kernel’s
command line parameter “memmap = 64K $ 0x80000”
so that the data written in that region can be kept after
booting. Our exploit in the kernel resets TPM by making
the system enters the S3 sleeping state, and ﬁnally ex-
tends the measurements, one after another, in the normal
order as presented in the logs.
We take the GRUB implementation from the open
source Container Linux [4] to implement our exploit.
To our knowledge, it is the only existing bootloader im-
plementation that supports UEFI and both versions of
the TPM. Table 2 summarizes the bootloaders that have
TPM support. Our customized bootloader functions as
the SRTM and extracts the event logs for both TPM 1.2
and 2.0. Figure 7 shows an example of the event logs
extracted from an Intel mini PC (NUC5i5MYHE).
The normal measurements can be obtained after pars-
ing the event logs. A log entry of the event logs is
composed of a PCR index, an event type, a digest, an
event size, and event data. The PCR index is the PCR
to which a digest is extended. The event type can be
either a CRTM version, UEFI ﬁrmware variable, initial
program loader (IPL), or IPL data. Table 3 summarizes
the types needed to parse the event logs. The digest is
the hashed result of binary or text values depending on
the event type, whereas the event data stores raw data.
The event size is the size of the raw data.
except
The parsed digest values,
for
the nor-
USENIX Association
27th USENIX Security Symposium    1235
Event Type 0 x8 ,
Size 16 ,
Event Type 0 x80000001 , Size 52 ,
Event Type 0 x80000001 , Size 36 ,
Event Type 0 x80000001 , Size 38 ,
Event Type 0 x80000001 , Size 36 ,
Event Type 0 x80000001 , Size 38 ,
Dump A d d r e s s 0 x F F F F B 8 F F C 1 E 4 0 0 0 0 ( P h y s i c a l A d d r e s s 0 x80000 )
TCG E v e n t _ v e r s i o n = 1
PCR 0 ,
PCR 7 ,
PCR 7 ,
PCR 7 ,
PCR 7 ,
PCR 7 ,
PCR 0 -7 , Event Type 0 x4 ,
PCR 5 ,
PCR 4 ,
PCR 8 ,
... o m i t t e d ...
Digest C 4 2 F E D A D 2 6 8 2 0 0 C B 1 D 1 5 F 9 7 8 4 1 C 3 4 4 E 7 9 D A E 3 3 2 0
Digest 2 F 2 0 1 1 2 A 3 F 5 5 3 9 8 B 2 0 8 E 0 C 4 2 6 8 1 3 8 9 B 4 C B 5 B 1 8 2 3
Digest 9 B 1 3 8 7 3 0 6 E B B 7 F F 8 E 7 9 5 E 7 B E 7 7 5 6 3 6 6 6 B B F 4 5 1 6 E
Digest 9 A F A 8 6 C 5 0 7 4 1 9 B 8 5 7 0 C 6 2 1 6 7 C B 9 4 8 6 D 9 F C 8 0 9 7 5 8
Digest 5 B F 8 F A A 0 7 8 D 4 0 F F B D 0 3 3 1 7 C 9 3 3 9 8 B 0 1 2 2 9 A 0 E 1 E 0
Digest 734424 C 9 F E 8 F C 7 1 7 1 6 C 4 2 0 9 6 F 4 B 7 4 C 8 8 7 3 3 B 1 7 5 E
Digest 9069 C A 7 8 E 7 4 5 0 A 2 8 5 1 7 3 4 3 1 B 3 E 5 2 C 5 C 2 5 2 9 9 E 4 7 3
Event Type 0 x80000006 , Size 484 , Digest 5 C 6 4 E D A E A 6 7 4 F 7 0 8 F 2 4 B 1 5 2 A 7 9 A F 2 6 D 4 5 9 9 0 B F 6 5
Event Type 0 x80000003 , Size 186 , Digest 41 C 0 6 C D 2 A 3 8 E B 0 B 6 2 0 8 A 9 3 D 0 2 2 7 E 5 C 4 9 6 6 8 A A 5 5 0
Event Type 0 xD ,
Digest 3 E D C 5 4 7 4 C C 2 D 9 B D C C A B 0 3 1 E 7 5 C 6 C 7 C 3 D F 0 6 D F 7 2 9
Size 4 ,
Size 75 ,
Figure 7: TPM event logs of Intel NUC5i5MYHE extracted by the custom bootloader
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/
/* Skip t p m _ s a v e s t a t e and t p m 2 _ s h u t d o w n
/* in d r i v e r s / char / tpm / tpm - i n t e r f a c e . c
*/
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int t p m _ p m _ s u s p e n d ( struct device * dev )
{
... o m i t t e d ...
printk ( K E R N _ I N F O " tpm : t p m _ s a v e s t a t e () "
" and t p m 2 _ s h u t d o w n () are s k i p p e d \ n " ) ;
return 0;
+
+
+
+
if ( chip - > flags &
T P M _ C H I P _ F L A G _ A L W A Y S _ P O W E R E D )
return 0;
if ( chip - > flags & T P M _ C H I P _ F L A G _ T P M 2 ) {
t p m 2 _ s h u t d o w n ( chip , T P M 2 _ S U _ S T A T E ) ;
return 0;
... o m i t t e d ...
Figure 8: Patch code summary of custom kernel for TPM
reset
mal bootloader and kernel (PCR #4 and PCR #9),
are the ones to be replayed.
The log entry for
the bootloader hash can be identiﬁed by event
EV EFI BOOT SERVICES APPLICATION
type
(0x80000003) and the one for the kernel (including
the kernel ﬁle and the initial RAM disk ﬁle) hash is
identiﬁed by event type EV IPL (0x0D). Note that the
digest originates from our customized bootloader and
kernel, not from the original ones. The bootloader and
kernel hash values can be obtained from the original
bootloader and kernel instead. The bootloader hash
value has to follow the Windows Authenticode Portable
Executable Signature Format [23, 35]; however,
the
kernel hash value can be calculated using the sha1sum
tool.
To reset the TPM, two tasks must be performed.
One is to modify the kernel so that it skips to sav-
ing the TPM state and calling TPM Startup(CLEAR)
or TPM2 Startup(CLEAR) after waking up. The code
listed in Figure 8 shows how simple this modiﬁca-
tion is. We add return code at the start of function
tpm pm suspend() and call function tpm startup() in the
TPM driver using our test kernel module (see include/lin-
ux/tpm.h [19]). The other task is to wait until the sys-
tem sleeps or make the system sleep by giving a sus-
pend command like the ones that systemd or the pm-
utils package provides. After resetting the TPM, the nor-
mal measurements can be re-extended. We call function
tpm pcr extend() in the TPM driver to replay the hashes.
4.3 DRTM Vulnerability:
CVE-2017-
16837
4.3.1 Problem: Lost Pointer
DRTM builds up the dynamic chain of trust at runtime,
and it uses the set of PCRs from PCR #17 to PCR #22.
These dynamic PCRs [32, 39] need to be initialized dur-
ing runtime, but the initialization is restricted to locality
4 [34], which means their access is controlled by trusted
hardware and not accessible to software. However, in
addition to the hardware buttons, there is another chance
to reset the PCRs. The dynamic PCRs are initialized
when the host platform escapes from the S3 and S4 sleep-
ing states. The DRTM speciﬁcation [33] explains how
DRTM can be reinitialized after the sleeping states.
4.3.2 Exploit Scenario
To undermine a DRTM, some of the extended measure-
ments sent to dynamic PCRs should be forgeable. This
is not easy because the DCE, being executed prior to
the DLME [33], launches the DLME after extending the
measurement of the DLME, as shown in Section 2, how-
ever, after the DLME has started, security is a matter of
the trustworthiness of the DLME. In other words, it is
still possible to break the dynamic trust chain as long as
the DLME implementation has own vulnerability.
As shown in Figure 9, the DRTM exploit is mostly
similar to the SRTM one. The attacker obtains the good
1236    27th USENIX Security Symposium
USENIX Association
Event Type
0x00000001
0x00000004
0x00000008
0x0000000D
0x80000001
0x80000003
0x80000006
0x80000008
Label and Description
EV POST CODE
This event must be extended to PCR #0. It is
used to record power-on self test (POST)
code, embedded SMM code, ACPI ﬂash
data, boot integrity services (BIS) code, or
manufacturer-controlled embedded option
ROMs.
EV SEPARATOR
This event must be extended to PCR #0-PCR
#7. It is used to delimit actions taken during
the pre-OS and OS environments. In case of
TPM 1.2, the digest ﬁeld must contain a hash
of the hex value 0x00000000 for UEFI
ﬁrmware and 0xFFFFFFFF for BIOS. In
case of TPM 2.0, the digest ﬁeld must
contain a hash of the hex value 0x00000000
or 0xFFFFFFFF for TPM 2.0.
EV S CRTM VERSION
This event must be extended to PCR #0. It is
used to record the version string of the
SRTM.
EV IPL
This event ﬁeld contains IPL data.
EV EFI VARIABLE DRIVER CONFIG
This event is used to measure conﬁguration
for EFI variables. The digests ﬁeld contains
the tagged hash of the variable data, e.g.
variable data, GUID, or unicode string.
EV EFI BOOT SERVICES APPLICATION
This event measures information about the
speciﬁc application loaded from the boot
device (e.g., IPL).
EV EFI GPT EVENT
This event measures the UEFI GPT table.
EV EFI PLATFORM FIRMWARE BLOB
This event measures information about
non-PE/COFF images. The digests ﬁeld
contains the hash of all the code (PE/COFF
.text sections or other sections).
Table 3: Summary of event types that are frequently
used [39]
hash values left in the logs. After sleep, the values are
re-extended to the PCRs by hooking the functions in the
DCE and DLME. The result is the same as that of the
SRTM exploit.
4.3.3
Implementation in Detail
We explain how to reset the TPM state and counterfeit
the PCR values. The tboot [11] is an open source im-
plementation of Intel TXT that employs the notion of
DRTM to support a measured launch of a kernel or a vir-
tual machine monitor (VMM). It consists of the secure
initialization (SINIT) ACM and tboot, which correspond
to the DCE and DLME, respectively. In Intel TXT, the
Normal State 
(TPM shows normal 
PCRs) 
Reboot 
BIOS/UEFI 
DCE and DLME 
Compromised 
Software Stack 
Leaves normal hashes 
in event logs 
Extract and calculate  
the normal hashes 
Compromised State 
(TPM shows abnormal 
Hash 
values 
Store the normal hashes 
in RAM 
Hook function pointers in 
the DCE and the DLME 
Reset the TPM and replay  
the normal hashes with  
the hooked functions 
PCRs) 
Sleep 
Sleep 
Wake up 
DCE and DLME 
Hooked 
functions 
Compromised 
Software Stack 
Faked State 
(Still compromised 
but TPM shows the normal 
PCRs) 
Figure 9: Exploit scenario for the DRTM vulnerability
DLME is called the MLE. The steps of tboot are shown
in Figure 10.
The tboot part is loaded by a bootloader, together
with a kernel or a VMM. When the bootloader transfers
the control to tboot, its pre-launch part starts the SINIT
ACM. It measures the MLE (tboot) and extends the mea-
surements to the dynamic PCRs. SINIT ACM starts the
post-launch part of tboot, it measures the DRTM com-
ponents, and extends the dynamic PCRs according to
either legacy PCR mappings or details/authorities PCR
mappings. Legacy PCR mappings use PCR #17, PCR
#18, and PCR #19 for extending the measurements of the
launch control policy (LCP), kernel ﬁle, and initial RAM
disk (initrd) ﬁle, respectively. Details/authorities PCR
mappings use PCR #17 for the measurements of the LCP,
kernel ﬁle, and initrd ﬁle. PCR #18 is reserved for mea-
surements of the veriﬁcation key for SINIT ACM and
LCP. When exiting the S3 sleeping state, tboot restarts
DRTM using the data loaded in the memory at the boot
USENIX Association
27th USENIX Security Symposium    1237
%N,,%"6@A1#O"1A#:"
3?1"
6@?#:"
0,+%"
A)2’.*"
?,(&"
B&5’&4"
1"
@K+L"
/012’"%!.’.#%
%4&N$’-#I’$+#81"
L#828$
!"#$%&’(")"*)+*",-"’&$%".,(&"%,"/01"
!"#$&.2%&"’&$%".,(&"
Figure 10: Steps of tboot
time. This means that the process of measuring and ex-
tending the kernel or the VMM can be interfered with by
compromising the data loaded in the memory.
After reviewing the source code of tboot, we found
that some mutable function pointers that are not mea-
sured open up a window of attack. Figure 11 shows the