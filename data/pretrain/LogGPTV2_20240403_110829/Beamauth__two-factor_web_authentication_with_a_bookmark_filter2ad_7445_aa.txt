title:Beamauth: two-factor web authentication with a bookmark
author:Ben Adida
Two-Factor Web Authentication with a Bookmark
BeamAuth:
Ben Adida
Harvard University
33 Oxford Street
School of Engineering and Applied Sciences
Cambridge, MA 02138
PI:EMAIL
ABSTRACT
We propose BeamAuth, a two-factor web authentication tech-
nique where the second factor is a specially crafted book-
mark. BeamAuth presents two interesting features: (1) only
server-side deployment is required alongside any modern,
out-of-the-box web browser on the client side, and (2) cre-
dentials remain safe against many types of phishing attacks,
even if the user fails to check proper user interface indicators.
BeamAuth is deployable immediately by any login-protected
web server with only minimal work, and it neither weakens
nor interferes with other anti-phishing techniques. We be-
lieve BeamAuth may be most useful in preventing a number
of phishing attacks at high-value single sign-on sites, e.g.
OpenID providers.
Categories and Subject Descriptors
K.6.5 [Management of Computing and Information
Systems]: Security and Protection—Authentication; K.4.2
[Computers and Society]: Social Issues
General Terms
Design, Human Factors, Security
Keywords
phishing, two-factor authentication, web security
1.
INTRODUCTION
Web-based authentication is vulnerable to a staggering
number of social engineering attacks, typically called phish-
ing [19]. Attackers provide a spoofed web page, where the
user is fooled into entering her credentials. The spoof can
take the form of a simple user-interface deception, sometimes
with a URL crafted to resemble the purported destination
in order to trick even users who check the address bar. Re-
cent variants, called pharming attacks [37, 38], are signiﬁ-
cantly more cunning: by spooﬁng DNS or even IP addresses,
Copyright is held by the author/owner(s).
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
ACM 978-1-59593-703-2/07/0010
the attacker’s phishing URL matches exactly the purported
destination. Pharming attacks are becoming easier to carry
out using, for example, malicious base stations to which wi-ﬁ
users might innocently connect. The only remaining defense
is the SSL certiﬁcate warning, which many users ignore [11].
Much recent work proposes defenses against phishing at-
tacks, including site-speciﬁc password pre-processing [41],
cryptographic protocols combined with trusted-path user-
interface indicators [12], and altogether novel methods of
web authentication [8]. Unfortunately, all of these solutions
require new client-side code, which greatly limits their de-
ployability until major web browsers implement the feature
and a large portion of web users upgrade accordingly. When
the proposed change is implemented as a browser add-on,
new trust and attack surface issues arise: the add-on usu-
ally has full control over the user’s browser.
At a high level, it is well known that multi-factor au-
thentication is preferable, though not foolproof, in defend-
ing against social engineering attacks. Yet multi-factor au-
thentication is diﬃcult to implement in an out-of-the-box
browser. One extension-free approach to web-based two-
factor authentication is site-image veriﬁcation, e.g. BankO-
fAmerica’s SiteKey [3] or Yahoo’s sign-in seal [52]: the server
provides a personalized login image to browsers previously
tagged with a long-lasting cookie, and the user is expected
to enter her password only if she notices her expected per-
sonal login image. The long-lasting cookie plays the role
of a second factor, and the login image provides some form
of human authentication of the server requesting the user’s
credentials.
Our solution, BeamAuth, provides second-factor authen-
tication using a specially crafted bookmark instead of a
cookie. We believe this approach provides a few notable
advantages:
1. our token is hidden inside a bookmark rather than a
cookie so that it is less vulnerable to cross-site scripting
(XSS) attacks [9],
2. a bookmark has fewer privacy side-eﬀects than a cookie,
making it less likely to be deleted by routine cookie
deletion, and
3. a user’s multiple browsers and computers can be au-
tomatically set up for BeamAuth using any one of nu-
merous existing bookmark synchronization tools.
48Target Audience. Our proposal’s major downside is its re-
quirement of a distinct bookmark for each site protected by
BeamAuth. Thus, BeamAuth is useful mostly to secure a
user’s few high-value sites, i.e. banks or single-sign-on sys-
tems. We believe our approach may be of particular interest
to OpenID [39] and other single-sign-on providers that au-
tomatically redirect users to their login page. Some consider
that such auto-redirect behavior leads to increased phishing
risk [7, 30]. BeamAuth should help alleviate some of this risk
while furthering the goal of a login solution that does not
require browser changes.
1.1 The Fragment Identiﬁer
The fragment identiﬁer is a long-standing and well-speciﬁed
web feature for accessing portions of URLs [6]. As an exam-
ple, the URL http://example.org/stuff#paragraph4 spec-
iﬁes the fragment named paragraph4 within the primary
resource designated by http://example.org/stuff. When
encountering a fragment identiﬁer, web browsers scroll the
viewport to the designated chunk, e.g paragraph4.
In accordance with the speciﬁcation, major web browsers
never send the fragment identiﬁer over the network: the
primary URL is requested, and the fragment is used only
for client-side scrolling. In addition, when a user navigates
from one fragment identiﬁer to another within the same pri-
mary URL, the page is not reloaded, it is only scrolled ap-
propriately1.
If no fragment with the requested identiﬁer
exists, all major browsers simply ignore the fragment identi-
ﬁer, though it remains in the address bar. (It is interesting
to note that browsers also omit the fragment identiﬁer from
the HTTP_REFERER ﬁeld, though we do not make use of this
property in this work.)
Notably, a page’s JavaScript code can read, update, and
delete the fragment identiﬁer at will, without causing a reload
or causing any data to be sent over the network. All up-
dates are immediately reﬂected in the address bar, and the
JavaScript code can even choose whether this change should
be reﬂected in the browser history or if the previous frag-
ment should be forgotten altogether, inaccessible even using
the “back” button.
1.2 Our Contribution: Second-Factor Authen-
tication with a Bookmark
We propose BeamAuth, which treats the fragment identi-
ﬁer as a local cryptographic input to the web page’s JavaScript
code. Alice, the user, installs a bookmark containing a se-
cret token in its fragment identiﬁer: https://site.com/
login#[TOKEN]. She can use this bookmark to reach the
site directly. Alternatively, if she is directed to https://
site.com/login by normal web surﬁng activity, she can be
prompted to click her BeamAuth bookmark. Since the book-
mark click doesn’t change the primary URL, the page does
not reload or cause any network access 2: the only change is
that #[TOKEN] is now appended to the URL. In either case,
by polling the address bar ﬁeld, the login page’s JavaScript
notices this fragment identiﬁer, stores the token in a vari-
able, clears it from the address bar, and prompts Alice for
her password. Once entered, this password is cryptographi-
cally combined with the token and used as the credential for
the login.
1with some exceptions addressed in Section 3.
2with some exceptions, which we work around in Section 3.
Importantly, if Alice is being phished and is thus not at
her real login page, the bookmark click will cause the browser
to load the real login page.
If she notices this page load,
Alice may realize she was being phished. However, even if
she doesn’t, her credentials remain safe. If the phishing site
convinces her not to click her bookmark (or she forgets), her
password may be compromised, but this is only one of two
required tokens for login. In other words, it becomes much
more diﬃcult to phish Alice: even if she makes a simple
mistake, her credentials remain safe.
Auto-Redirect Single Sign-On Sites. Each site that uses
BeamAuth requires a setup procedure and some bookmarks-
bar real-estate. Thus, this technique is best left to high-value
sites, like ﬁnancial institutions or single sign-on systems.
BeamAuth may be particularly interesting for auto-redirect
single-sign-on sites like OpenID identity providers [39], where
Alice may be more easily phished because she is accustomed
to being redirected to her login site by the site requesting
authentication. The BeamAuth bookmark click prevents the
most common phishing attacks in this scenario.
1.3 Limitations
Though we believe BeamAuth provides signiﬁcantly en-
hanced security against phishing with close-to-optimal de-
ployability, it is by no means perfect.
JavaScript Required. BeamAuth requires JavaScript. A
user who turns oﬀ JavaScript cannot get the proposed ben-
eﬁts. Fortunately, the login provider can detect JavaScript
during bookmark setup, and either prompt the user to en-
able it or fall back to another authentication mechanism
which doesn’t require JavaScript.
Certain Attacks May Still Succeed. Malware on the user’s
computer, pharming attacks on non-SSL sites, or pharm-
ing attacks on SSL sites where users pay no attention to
certiﬁcate validity indicators may succeed in defeating Bea-
mAuth. These are considered out of scope for this proposal,
though we note that BeamAuth generally does not interfere
with other proposed defenses against these more advanced
attacks.
1.4 Related Work
Anti-Phishing. The range of anti-phishing solutions is vast.
Some techniques focus on detecting spoofed emails in email-
based phishing attacks using cryptographic techniques [4,
46, 2], origin or path-based veriﬁcation [23, 32, 31, 20],
or heuristics similar to those used for spam detection [42,
33, 35]. Other techniques focus on providing web-browser
toolbars that use various heuristics or collaborative ﬁlter-
ing to determine what might be a phishing attack [36, 22].
Both Internet Explorer 7 and Firefox 2 consult databases
of known phishing web sites to warn users. More recently,
techniques have emerged that strengthen the cryptographic
and trusted-user-interface-path capabilities of web browsers
in order to implement more intricate authentication proto-
cols [41, 12, 8]. It takes a whole book to describe the range
of phishing variants and known defenses [25]. We note that
most of these defenses require software-install updates to
either the user’s web or email client.
JavaScript Use of the Fragment Identiﬁer. The fragment
identiﬁer has been usurped in other ways, usually as a mech-
anism to maintain state in a single-page JavaScript web ap-
plication. S5 [34], an HTML slide presentation tool, uses the
fragment identiﬁer to indicate which slide to display, with
the whole slideshow contained in a single HTML ﬁle. The
Dojo JavaScript toolkit [27] and other JavaScript libraries
use the fragment identiﬁer to maintain state information, so
that a user may click the forward and back buttons normally
in an AJAX [17] web application without full page reloads.
As far as we know, fragment identiﬁers have not yet been
used as secure tokens in cryptographic authentication pro-
tocols.
Security in the Web Application Layer. Others have pro-
posed security protocols that make use of existing browser
features in novel ways, eﬀectively building security into the
web application layer. Juels et al. [28] propose to use “cache
cookies” for security: the browser cache stores secret tokens
for two-channel authentication at secure sites, e.g. online
banking. Jackson and Wang [24] explore various existing
browser features to enable secure cross-domain communica-
tion for web mashups. BeamAuth aims to achieve the same
deployability for phishing-resistant web authentication.
Bookmarks for Security. Two recent Internet web post-
ings [7, 30] suggest the use of a bookmark to curtail phish-
ing attacks against OpenID servers, or generally any web
single sign-on system where users are automatically redi-
rected to their login page. Though these are very interesting
and useful suggestions, our technique is a bit diﬀerent: we
do not need to change existing single sign-on protocols; we
only tweak how Alice enters her credentials. We also use
the bookmark as more than a server locator: the BeamAuth
bookmark serves as a second authentication factor.
1.5 This Paper
We present the core technical components of the Bea-
mAuth technique in Section 2. Section 3 describes the details
of the protocol, in particular the “user login ritual” and the
initial browser setup procedure. Implementation details and
an overview of performance metrics are described in Section
4. Threats, defenses, comparison to other solutions, and
potential impact are discussed in Section 5.
2. BEAMAUTH BASICS
The core BeamAuth features are relatively simple: a se-
cret cryptographic token is “injected” into the local page
scope via the fragment identiﬁer, a portion of the URL never
sent over the network but accessible from JavaScript code.
In this section, we present these issues in detail, especially
their speciﬁc implementation diﬀerences across the four ma-
jor browsers: Internet Explorer (6 and 7), Firefox (1.5 and
2.0), Safari (2.0), and Opera (8 and 9).
2.1 The URL Fragment Identiﬁer
A URL [6] may contain a fragment identiﬁer, which, as its
name implies, addresses a fragment of the resource denoted
by the primary URL. Speciﬁcally, a URL with a fragment
identiﬁer looks like:
http://hostname/rest/of/url#fragment_id
The resolution of a fragment identiﬁer within a given docu-
ment depends on the document’s MIME type. In the case
of an HTML document, with MIME type text/html, the
fragment identiﬁer speciﬁes a portion of the HTML page
identiﬁed accordingly. Importantly, a web browser will re-
solve the above URL as follows:
1. connect to host hostname on port 80,
2. request /rest/of/url and render the HTML page,
3. scroll the viewport to the position indicated by frag-
ment_id if it exists, ignore it otherwise.
Note how fragment_id is never sent over the network. This
property has been conﬁrmed on all major browsers, and it
is, in fact, part of the URI speciﬁcation.
Navigation. When a user navigates from one fragment iden-
tiﬁer to another within the same primary URL, the browser