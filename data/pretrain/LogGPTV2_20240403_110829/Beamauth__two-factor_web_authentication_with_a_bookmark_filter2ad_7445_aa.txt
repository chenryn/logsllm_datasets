# BeamAuth: Two-Factor Web Authentication with a Bookmark

## Author
Ben Adida  
Harvard University  
33 Oxford Street  
School of Engineering and Applied Sciences  
Cambridge, MA 02138  
Email: [Your Email]

## Abstract
We introduce BeamAuth, a two-factor web authentication method that utilizes a specially crafted bookmark as the second factor. BeamAuth offers two key advantages: (1) it only requires server-side deployment, working seamlessly with any modern, out-of-the-box web browser, and (2) it provides robust protection against various phishing attacks, even if users overlook standard user interface indicators. BeamAuth can be easily implemented by any login-protected web server with minimal effort and does not interfere with other anti-phishing measures. We believe BeamAuth is particularly effective for high-value single sign-on sites, such as OpenID providers.

## Categories and Subject Descriptors
K.6.5 [Management of Computing and Information Systems]: Security and Protectionâ€”Authentication; K.4.2 [Computers and Society]: Social Issues

## General Terms
Design, Human Factors, Security

## Keywords
Phishing, Two-Factor Authentication, Web Security

## 1. Introduction
Web-based authentication is highly susceptible to social engineering attacks, commonly known as phishing. Attackers create spoofed web pages to deceive users into entering their credentials. These attacks can involve simple user interface deceptions or more sophisticated methods like pharming, where attackers spoof DNS or IP addresses, making the phishing URL identical to the legitimate one. Pharming attacks are becoming increasingly common, especially with the use of malicious base stations to which Wi-Fi users may inadvertently connect. The only remaining defense is the SSL certificate warning, which many users ignore.

Recent research has proposed various defenses against phishing, including site-specific password pre-processing, cryptographic protocols with trusted-path user-interface indicators, and novel web authentication methods. However, these solutions often require new client-side code, limiting their deployability until major web browsers implement the features and a significant number of users upgrade. When implemented as browser add-ons, these solutions also introduce new trust and attack surface issues.

Multi-factor authentication is generally recognized as an effective defense against social engineering attacks, but it is challenging to implement in a standard web browser. One approach to web-based two-factor authentication is site-image verification, such as Bank of America's SiteKey or Yahoo's sign-in seal. These systems use a personalized login image and a long-lasting cookie to provide a second factor. The image serves as a human-readable confirmation of the server's authenticity.

BeamAuth, our proposed solution, uses a specially crafted bookmark instead of a cookie for the second factor. This approach offers several advantages:
1. The token is hidden within a bookmark, reducing vulnerability to cross-site scripting (XSS) attacks.
2. Bookmarks have fewer privacy implications than cookies, making them less likely to be deleted during routine cookie management.
3. Multiple browsers and computers can be set up for BeamAuth using existing bookmark synchronization tools.

### Target Audience
The primary drawback of BeamAuth is the requirement for a unique bookmark for each protected site. Therefore, it is most useful for securing high-value sites, such as banks or single-sign-on systems. BeamAuth is particularly relevant for OpenID and other single-sign-on providers, where auto-redirect behavior can increase phishing risk. BeamAuth helps mitigate this risk without requiring browser changes.

### 1.1 The Fragment Identifier
The fragment identifier is a well-established web feature used to access specific portions of a URL. For example, the URL `http://example.org/stuff#paragraph4` specifies the fragment named `paragraph4` within the resource at `http://example.org/stuff`. When a fragment identifier is encountered, the browser scrolls to the designated section without reloading the page.

According to the specification, major web browsers do not send the fragment identifier over the network. JavaScript can read, update, and delete the fragment identifier without causing a page reload or network activity. These changes are immediately reflected in the address bar, and JavaScript can control whether the change is recorded in the browser history.

### 1.2 Our Contribution: Second-Factor Authentication with a Bookmark
BeamAuth leverages the fragment identifier as a local cryptographic input to the web page's JavaScript. The user, Alice, installs a bookmark containing a secret token in its fragment identifier: `https://site.com/login#[TOKEN]`. She can use this bookmark to directly access the site or, if she is directed to `https://site.com/login` through normal browsing, she can be prompted to click her BeamAuth bookmark. This click appends `#[TOKEN]` to the URL without reloading the page. The login page's JavaScript then detects the fragment identifier, stores the token, clears it from the address bar, and prompts Alice for her password. The entered password is cryptographically combined with the token to form the credential for login.

If Alice is being phished and clicks her bookmark, the browser will load the real login page, potentially alerting her to the phishing attempt. Even if she doesn't notice, her credentials remain safe because the phisher would need both the password and the token.

### 1.3 Limitations
While BeamAuth significantly enhances security against phishing, it is not perfect:
- **JavaScript Required**: BeamAuth requires JavaScript. Users who disable JavaScript cannot benefit from it. The login provider can detect this during setup and prompt the user to enable JavaScript or use an alternative authentication method.
- **Certain Attacks May Still Succeed**: Malware, pharming attacks on non-SSL sites, or SSL sites where users ignore certificate validity indicators can still succeed. BeamAuth does not interfere with other proposed defenses against these advanced attacks.

### 1.4 Related Work
Anti-phishing solutions range from email-based detection techniques to browser toolbars and database checks. Many of these solutions require software updates, limiting their deployability. The fragment identifier has been used in single-page JavaScript applications for state management, but not for secure tokens in cryptographic authentication. BeamAuth aims to achieve similar deployability for phishing-resistant web authentication.

### 1.5 This Paper
In Section 2, we detail the core technical components of BeamAuth. Section 3 describes the protocol, including the "user login ritual" and initial browser setup. Section 4 covers implementation details and performance metrics. Section 5 discusses threats, defenses, comparisons to other solutions, and potential impact.

## 2. BeamAuth Basics
BeamAuth's core feature is the injection of a secret cryptographic token into the local page scope via the fragment identifier, which is never sent over the network but is accessible from JavaScript. This section delves into the specifics, including implementation differences across major browsers: Internet Explorer (6 and 7), Firefox (1.5 and 2.0), Safari (2.0), and Opera (8 and 9).

### 2.1 The URL Fragment Identifier
A URL with a fragment identifier looks like: `http://hostname/rest/of/url#fragment_id`. The fragment identifier specifies a portion of the HTML page. A web browser resolves this URL by connecting to the host, requesting the resource, and scrolling to the specified fragment if it exists. The fragment identifier is never sent over the network, as confirmed in the URI specification.

When a user navigates between fragment identifiers within the same primary URL, the browser scrolls the viewport without reloading the page.