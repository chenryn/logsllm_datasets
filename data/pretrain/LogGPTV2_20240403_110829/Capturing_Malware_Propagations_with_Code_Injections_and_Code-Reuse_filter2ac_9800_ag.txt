Symposium (SEC’14). USENIX Association, Berkeley, CA, USA, 401–416. h(cid:138)p:
//dl.acm.org/citation.cfm?id=2671225.2671251
[11] Cuckoo developers. 2017. Cuckoo Sandbox. (2017). h(cid:138)ps://www.cuckoosandbox.
org/
[12] Artem Dinaburg, Paul Royal, Monirul Sharif, and Wenke Lee. 2008. Ether:
Malware Analysis via Hardware Virtualization Extensions. In Proceedings of the
15th ACM Conference on Computer and Communications Security (CCS ’08). ACM,
New York, NY, USA, 51–62. h(cid:138)ps://doi.org/10.1145/1455770.1455779
[13] Manuel Egele, Christopher Kruegel, Engin Kirda, Heng Yin, and Dawn Song.
2007. Dynamic Spyware Analysis. In 2007 USENIX Annual Technical Conference
on Proceedings of the USENIX Annual Technical Conference (ATC’07). USENIX
Association, Berkeley, CA, USA, Article 18, 14 pages. h(cid:138)p://dl.acm.org/citation.
cfm?id=1364385.1364403
[14] William Enck, Peter Gilbert, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung,
Patrick McDaniel, and Anmol N. Sheth. 2010. TaintDroid: An Information-(cid:131)ow
Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings
of the 9th USENIX Conference on Operating Systems Design and Implementation
(OSDI’10). USENIX Association, Berkeley, CA, USA, 393–407. h(cid:138)p://dl.acm.org/
citation.cfm?id=1924943.1924971
[15] Volatility Foundation. Volatility - Open Source Memory Forensics. ((cid:146)(cid:146)). h(cid:138)p:
//www.volatilityfoundation.org/
[16] Enes G¨oktas¸, Elias Athanasopoulos, Michalis Polychronakis, Herbert Bos, and
Georgios Portokalidis. 2014. Size Does Ma(cid:138)er: Why Using Gadget-Chain
Length to Prevent Code-Reuse A(cid:138)acks is Hard. In 23rd USENIX Security
Symposium (USENIX Security 14). USENIX Association, San Diego, CA, 417–
432. h(cid:138)ps://www.usenix.org/conference/usenixsecurity14/technical-sessions/
presentation/goktas
(2016).
[19]
[17] Mariano Graziano, Davide Balzaro(cid:138)i, and Alain Zidouemba. 2016. ROPMEMU: A
Framework for the Analysis of Complex Code-Reuse A(cid:138)acks. In Proceedings of the
11th ACM on Asia Conference on Computer and Communications Security (ASIA
CCS ’16). ACM, New York, NY, USA, 47–58. h(cid:138)ps://doi.org/10.1145/2897845.
2897894
(2015). h(cid:138)ps:
[18] Pin Yahoo Groups. 2015. Failure to instrument process tree.
//groups.yahoo.com/neo/groups/pinheads/conversations/topics/12019
Jan Gustafsson, Adam Be(cid:138)s, Andreas Ermedahl, and Bj¨orn Lisper. 2010. (cid:140)e
M¨alardalen WCET benchmarks: Past, present and future. In OASIcs-OpenAccess
Series in Informatics, Vol. 15. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.
[20] Andrew Henderson, Aravind Prakash, Lok Kwong Yan, Xunchao Hu, Xujiewen
Wang, Rundong Zhou, and Heng Yin. 2014. Make It Work, Make It Right, Make
It Fast: Building a Platform-neutral Whole-system Dynamic Binary Analysis
Platform. In Proceedings of the 2014 International Symposium on So(cid:135)ware Testing
and Analysis (ISSTA 2014). ACM, New York, NY, USA, 248–258. h(cid:138)ps://doi.org/
10.1145/2610384.2610407
[21] Andrew Henderson, Lok Kwong Yan, Xunchao Hu, Aravind Prakash, Heng
Yin, and Stephen McCamant. 2017. DECAF: A Platform-Neutral Whole-System
Dynamic Binary Analysis Platform. IEEE Trans. So(cid:135)w. Eng. 43, 2 (Feb. 2017),
164–184. h(cid:138)ps://doi.org/10.1109/TSE.2016.2589242
[22] Min Gyung Kang, Pongsin Poosankam, and Heng Yin. 2007. Renovo: A Hidden
Code Extractor for Packed Executables. In Proceedings of the 2007 ACM Workshop
on Recurring Malcode (WORM ’07). ACM, New York, NY, USA, 46–53. h(cid:138)ps:
//doi.org/10.1145/1314389.1314399
[23] (cid:140)omas Ki(cid:138)el, Sebastian Vogl, Julian Kirsch, and Claudia Eckert. 2015. Counter-
acting Data-Only Malware with Code Pointer Examination. Springer International
Publishing, Cham, 177–197. h(cid:138)ps://doi.org/10.1007/978-3-319-26362-5 9
[24] D. Korczynski. 2016. RePEconstruct: reconstructing binaries with self-modifying
code and import address table destruction. In 2016 11th International Conference
on Malicious and Unwanted So(cid:135)ware (MALWARE). 1–8. h(cid:138)ps://doi.org/10.1109/
MALWARE.2016.7888727
[25] Peter Kruse. 2012. W32.Tinba (TinyBanker) (cid:140)e Turkish Incident. (2012).
[26] Persistence Labs. 2013. Semtrax. (2013). h(cid:138)p://www.persistencelabs.com/blog
[27] Tal Liberman. 2016. AtomBombing: Brand New Code Injection for Windows.
[28] Tal Liberman. 2017. BSidesSF 2017, AtomBombing: Injecting Code Using Win-
dows’ Atoms. (2017). h(cid:138)ps://www.youtube.com/watch?v=9HV69QGiBAU
[29] Wayne Low. 2012. Code injection via return-oriented programming. Virus
Bulletin (2012).
[30] Lorenzo Martignoni, Mihai Christodorescu, and Somesh Jha. 2007. Omniunpack:
Fast, generic, and safe unpacking of malware. In In Proceedings of the Annual
Computer Security Applications Conference (ACSAC.
[31] Monnappa22. HollowFind. ((cid:146)(cid:146)). h(cid:138)ps://github.com/monnappa22/HollowFind
[32] Andreas Moser, Christopher Kruegel, and Engin Kirda. 2007. Exploring Multiple
Execution Paths for Malware Analysis. In Proceedings of the 2007 IEEE Symposium
on Security and Privacy (SP ’07). IEEE Computer Society, Washington, DC, USA,
231–245. h(cid:138)ps://doi.org/10.1109/SP.2007.17
[33] PaloAlto Networks. 2013. (cid:140)e Modern Malware Review. (2013).
[34] Michalis Polychronakis and Angelos D. Keromytis. 2011. ROP Payload Detection
Using Speculative Code Execution. In Proceedings of the 2011 6th International
Conference on Malicious and Unwanted So(cid:135)ware (MALWARE ’11). IEEE Computer
Society, Washington, DC, USA, 58–65. h(cid:138)ps://doi.org/10.1109/MALWARE.2011.
6112327
[35] Symantec Security Response. 2015. W32.Ramnit analysis. (2015).
[36] Eugene Rodionov and Aleksandr Matrosov. 2016. Mind the Gapz: (cid:140)e Most
Complex Bootkiv Ever Analyzed? (2016).
[37] Paul Royal, Mitch Halpin, David Dagon, Robert Edmonds, and Wenke Lee. 2006.
PolyUnpack: Automating the Hidden-Code Extraction of Unpack-Executing
Malware. In Proceedings of the 22Nd Annual Computer Security Applications
Conference (ACSAC ’06). IEEE Computer Society, Washington, DC, USA, 289–300.
h(cid:138)ps://doi.org/10.1109/ACSAC.2006.38
[38] Hovav Shacham. 2007. (cid:140)e Geometry of Innocent Flesh on the Bone: Return-
into-libc Without Function Calls (on the x86). In Proceedings of the 14th ACM
Conference on Computer and Communications Security (CCS ’07). ACM, New York,
NY, USA, 552–561. h(cid:138)ps://doi.org/10.1145/1315245.1315313
[39] Dawn Song, David Brumley, Heng Yin, Juan Caballero, Ivan Jager, Min Gyung
Kang, Zhenkai Liang, James Newsome, Pongsin Poosankam, and Prateek Saxena.
2008. BitBlaze: A New Approach to Computer Security via Binary Analysis. In
Proceedings of the 4th International Conference on Information Systems Security
(ICISS ’08). Springer-Verlag, Berlin, Heidelberg, 1–25. h(cid:138)ps://doi.org/10.1007/
978-3-540-89862-7 1
[40] Xabier Ugarte-pedrero, Davide Balzaro(cid:138)i, Igor Santos, and Pablo G. Bringas. SoK:
Deep Packer Inspection: A Longitudinal Study of the Complexity of Run-Time
Packers. ((cid:146)(cid:146)).
[41] Sebastian Vogl, Jonas Pfoh, (cid:140)omas Ki(cid:138)el, and Claudia Eckert. 2014. Persistent
Data-only Malware: Function Hooks without Code. In Proceedings of the 21th
Annual Network and Distributed System Security Symposium (NDSS).
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1706[42] Andrew White, Bradley Schatz, and Ernest Foo. 2013. Integrity veri(cid:128)cation of
[43] Lok Yan and Heng Yin. 2017.
user space code. Digital Investigation (2013).
Dynamic Taint Analysis.
cs260-winter2017/formaltaint.pdf
SoK: On the Soundness and Precision of
(2017). h(cid:138)p://www.cs.ucr.edu/„heng/teaching/
[44] Lok Kwong Yan and Heng Yin. 2012. DroidScope: Seamlessly Reconstructing
the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In
Proceedings of the 21st USENIX Conference on Security Symposium (Security’12).
USENIX Association, Berkeley, CA, USA, 29–29. h(cid:138)p://dl.acm.org/citation.cfm?
id=2362793.2362822
[45] Udi Yavo and Tomer Bi(cid:138)on. 2015. Injection on Steroids: Code-less Code Injections
and 0-Day Techniques. (2015).
[46] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin Kirda.
2007. Panorama: Capturing System-wide Information Flow for Malware De-
tection and Analysis. In Proceedings of the 14th ACM Conference on Computer
and Communications Security (CCS ’07). ACM, New York, NY, USA, 116–127.
h(cid:138)ps://doi.org/10.1145/1315245.1315261
A FORMAL COMPARISON TO PREVIOUS
WORK
(cid:140)e de(cid:128)nition of malware execution trace given in De(cid:128)nition 1
allows us to formally compare Tartarus to previous works [5, 40].
Before we make the comparison, however, we need to give a few
more de(cid:128)nitions. First, for a given instruction, let irWs denote the
memory it writes, irAs the instruction address and irOs the output of
the instruction. We have that irWs Ď irOs and for convenience that
irAs Ď irWs Ď irOs Ď S. Second, let the function T P : S ˆ i Ñ
S represent the taint propagation function, and CR : S ˆ i Ñ
ttrue, f alseu be the predicate that identi(cid:128)es code-reuse.
We now proceed to formally de(cid:128)ne the malware analysers of pre-
vious work [5, 40] and the approach by Tartarus, and then continue
to show malware execution trace collected by previous work is a
subtrace of the one collected by Tartarus. Both [5, 40] propose the
malware analyser PA,U B that updates the shadow memory with
any memory wri(cid:138)en by instructions already in the shadow memory,
as such they de(cid:128)ne δA as follows:
#
irWs,
H,
if irAs P s
otherwise
δA,U Bps,iq “ s Y tU B where tU B “
Furthermore, in the malware execution trace they only include
instructions that are part of the shadow memory, and therefore
de(cid:128)ned ΛA as follows:
#
ΛA,U Bps,iq “
if irAs P s
true,
f alse, otherwise
Tartarus updates the shadow memory based on the taint propa-
gation function T P and also all output by instructions in the shadow
memory. As such, the malware analyser Tartarus PA,T A de(cid:128)nes δA
as follows
if irAs P s
δA,T Aps,iq “ s Y tT A where tT A “
otherwise
Furthermore, Tartarus includes in the malware execution trace
any instruction part of the shadow memory or part of a code-reuse
a(cid:138)ack, given by the CR function, and therefore de(cid:128)nes ΛA as follows
#
T Ppi,sq Y irOs
T Ppi,sq
#
ΛA,T Aps,iq “
if irAs P s _ CRpi,sq
true,
f alse, otherwise
We now show shat the malware execution trace collected by
previous work is indeed a subset of the malware execution trace
collected by Tartarus.
Theorem A.1. Let PA,U B and PA,T A be the malware tracer de-
(cid:128)ned above and TpP,Eq be some execution trace. Furthermore, let
STU BpTpP,Eqq “ psu,0, . . . su,lq and STT ApTpP,Eqq “ pst,0, . . . ,st,lq
be the respective shadow memory sets. Given that su,0 = st,0, we have
that there is no element i P TpP,Eq such that i P ΠU B ^ i R ΠT A.
Proof. We prove by contradiction that there is no element i P
TpP,Eq such that i P ΠU B ^ i R ΠT A.
We (cid:128)rst show that each element in the shadow memories col-
lected by PA,U B is a subset of the corresponding element in the
shadow memories collected by PA,T A. We have that su,0 “ st,0
and therefore su,0 Ď st,0. From the de(cid:128)nitions of δA,U B and δA,T A,
we then have have tU B Ď tT A and therefore δA,U Bpsu,0,i0q Ď
δA,T Apst,0,i0q. Because δA is a monotonic increasing function, we
then have that @su,i P STU BpTpP,Eqq|su,i Ď st,i. As such, each
element in the shadow memories collected by PA,U B is a subset of
the corresponding element in the shadow memories collected by
PA,T A.
Assume there exist an element m such that m P ΠA,U B ^ m R
ΠA,T A. (cid:140)is means there exists an element i P TpP,Eq such that
ΛA,U Bpsu,j ,iq is true and ΛA,T Apst,j ,iq is false. From the de(cid:128)ni-
tions of ΛA,U B and ΛA,T A, this is only possible if su,j contains an
element that is not in st,j. We have shown above that this is not
the case, and the proof is done.
(cid:3)
B CODE INJECTION GRAPH OF GAPZ
SAMPLE.
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1707rep movsd
0x804de7f4
ntoskrnl.exe
mov edx, [ebp + 0x10]
0xbf834abf
win32k.sys
mov [esi + 0x94], eax
0xa40
9b3748
[eax] chaser
Call SendNotifyMessage
eax chaser
1001b4b Call [eax]
KiUserAPCDispatcher
eax chaser
1001b59 Call [eax + 8]
mov eax, [esi]
std
ret
push [ebp + 0x10]
0x7e42c285
ntoskrnl.exe
push [ebp + 0x10]
0xbf834b15
win32k.sys
mov [ecx], edx
0xbf834ac4
win32k.sys
esi chaser
mov esi, eax
0x1001b3e
explorer.exe
push [ebp + 0x10]
0x7e42c2a4
User32.dll
SetWindowsLong
push eax
0xa40, wave1
0x9b3aee
mov eax, [esi + eax + 0xa4]
0x7e418894
explorer.exe
mov [esi + 0x9c], eax
0xa40
0x9b3765
mov [esi + 0x64], eax
0x9b3799
wave1
Malware.exe
mov [esi+0x70], eax
0x9b37b7
wave1
Malware.exe
mov [esi + 0x78], eax
0x9b384a
wave1
Malware.exe
eax chaser
[eax + 8] chaser
1001b6e Call [eax + 4]
mov ecx, 0x94
rep movsd
pop edi
xor eax, eax
pop esi
pop edi
[eax+4] chaser
mov [esi + 0x94], eax
0xa40
0x9b3748
7c9ee5ca ret
cld
77ec5b27 ret
pop eax
101179d ret
alloca probe
mov [esi + 0x7c], eax
0x9b3824
Malware.exe
rep movsd
7c9ee5c3
explorer.exe
mov eax, [eax]
push eax
7c90160c ret
WriteProcessMemory
mov [esi + 0x10], eax
0x9b3830
wave1
Malware.exe
mov [esi + 0x2c], eax
0x9b384a
Malware.exe
rep movsb
0x9b39a1
wave1
Malware.exe
7c802298 ret
pop eax
101179d ret
jmp eax
rep movsd
System
0x805758ad
rep movsd
System
0x80575907
0x77ef48c0 chaser
0x77ef48c0 mov ebp, esp
Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1708