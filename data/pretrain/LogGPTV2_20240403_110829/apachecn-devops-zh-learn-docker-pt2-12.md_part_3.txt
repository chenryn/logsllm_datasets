*   **业务挑战**:这包括为客户提供可靠、易于维护的 DaaS，同时实现高效运行所需的服务器密度。
*   **解决方案方法**:ClusterHQ 的 Flocker 提供了以编程方式管理存储在 EMC ScaleIO 中的 Docker 容器的持久数据的能力。
*   **业务成果**:该解决方案大幅提升了每台服务器托管的应用密度，改善了数据库的运营管理，为消费者和企业 IT 部门的可持续创新提供了一个令人振奋的闪亮平台。
### 启用 DevOps
如今，为了优雅地确保业务的敏捷性、适应性和可负担性，敏捷开发越来越受到信息技术行业的关注。这意味着，通过严格采用适合信息技术敏捷性的方法，确实实现了非常需要的业务敏捷性。有越来越多可行且古老的机制来实现 IT 敏捷性。首先，信息技术敏捷性是通过敏捷编程方法驱动的，如结对编程、**极限编程** ( **XP** )、精益、Scrum 和看板、**测试驱动开发** ( **TDD** )和**行为驱动开发** ( **BDD** )。
现在软件开发过程显著加快。然而，开发和运营之间有很大的脱节。这意味着，当运营团队也严格遵循敏捷、自适应和自动化的信息技术运营时，真正的信息技术敏捷性就实现了。企业 DevOps 是在开发人员和运营商之间建立有益联系的最有前途的方法，这样 IT 系统可以快速启动和运行。容器化是最积极的发展，它使 DevOps 变得普及、深入和有说服力。
Docker 非常适合快速设置开发和测试环境以及沙盒环境。有趣的是，Docker 为保证效率的 DevOps 提供了更好的关注点分离；容器工匠只需要专注于构建 Docker 映像，并承诺将它们作为容器。运营团队可以监控、管理和维护容器。最后，Docker 可以轻松集成到多个 DevOps 工具中，以实现更好的工作流自动化和持续集成。此外，它还使 DevOps 团队能够快速、经济地扩展开发和测试环境，并以无缝的方式将应用从开发、测试转移到生产。
### 持续集成和持续部署
**持续集成** ( **CI** )和**持续部署** ( **CD** )是拥有敏捷 IT 最受欢迎的技术和工具。过去，开发人员会使用任何一种构建工具来自动化他们的构建过程。然后，他们将把他们的代码交给操作团队，继续进行部署、管理、管理和支持。有许多配置管理和软件部署工具来自动化软件部署和交付的繁琐和困难的事情。这种隔离模式带来了许多反复出现的问题。使用容器，操作团队可以构建他们想要部署和交付的完整栈的标准容器映像。开发人员可以使用它们来部署他们的代码来进行单元测试。相同的经过测试、提炼和强化的映像可以跨所有环境(开发、测试、阶段和生产)使用，以每次获得相同的结果。这种由容器化赞助的设置以无风险的方式加速了软件部署和交付活动。
根据 Docker 网站，CI/CD 通常将开发和测试结合在一起，允许开发人员协作构建代码，将其提交给主分支，并检查任何问题。这意味着开发人员可以构建和测试他们的代码，以便在应用开发生命周期的早期捕获 bug。由于 Docker 可以与 Jenkins 和 GitHub 等工具集成，开发人员可以在 GitHub 中提交代码，测试代码，并使用 Jenkins 自动触发构建，一旦映像完成，就可以将其添加到 Docker 注册表中。这最终简化了过程并节省了构建和设置过程的时间，同时允许开发人员并行运行测试并使其自动化，以便他们可以在测试运行时继续处理其他项目。容器化消除了环境依赖性和不一致性。
### 连续交货
**持续交付**方法包括快速的软件开发迭代和对部署的应用的频繁、安全的更新。这一切都是为了通过在短期迭代中生产可靠的软件来降低风险和更快地交付价值。因为 Docker 封装了应用和应用的环境或基础架构配置，所以它为持续交付管道的两个基本方面提供了一个关键的构建块。Docker 使准确测试您将要部署的内容变得很容易。在这种情况下，在切换过程中出现严重错误或带来任何不良变化的可能性较小。Docker 容器鼓励持续交付的核心原则:它们在管道的每个步骤重用相同的二进制文件，以确保在构建过程中不会引入错误。
如前所述，Docker 容器为不可变的基础设施提供了基础。可以添加、删除、克隆应用，和/或更改它们的支持者，而不会留下任何残余。IT 基础架构可以在不影响其上运行的应用的情况下进行更改。Docker 工具生态系统是增长的轨迹，因此许多与交付相关的工作可以简单地自动化和加速，以增加业务价值。正如马丁·福勒所说，你实际上是在以下情况下进行持续交付的:
*   如果您的软件在其整个生命周期中都是可部署的
*   如果你的团队优先考虑保持软件的可部署性而不是开发新的特性
*   如果任何人在任何时候有人对他们的系统进行更改时，都能获得关于他们的系统生产就绪性的快速、自动化的反馈
*   如果您可以按需将软件的任何版本按下按钮部署到任何环境
Docker 还可以轻松地与 CI 和持续交付平台集成，支持开发和测试，从而为生产提供无缝更新。在任何一种故障的情况下，都有可能回滚到以前的工作版本。
#### 精确测试
Docker 通过创建一个独立于语言、开发工具或环境变量的构建、测试和管理分布式应用的通用框架来加速开发。Docker 通过允许开发人员、**质量保证** ( **QA** )团队和系统管理员高效地共享代码、交换内容和集成应用来改进协作。我们可以确信，我们的质量保证环境与将在生产环境中部署的环境完全匹配。
#### 促进 CAa
我们一直在摆弄 IT 基础设施和**平台即服务** ( **PaaS** )。裸机服务器和虚拟机是信息技术中心的关键计算资源。现在，随着容器的成功扩散，**容器即服务** ( **CaaS** )变得非常受欢迎和诱人。传统环境中的平台即服务存在某些问题。CaaS 被吹捧为克服 PaaS 棘手问题的解决方案:
![](img/image_12_002.png)
The high-level CaaS architecture
在上图中，左边的开发人员正在从一个可信的和精选的基础映像库中拉取和推送应用内容。右侧的运营团队正在监控和管理已部署的应用和基础架构。这两个团队可以通过一个工具集进行协作，该工具集允许分离关注点，同时在应用生命周期中统一这两个团队。Docker 平台就是这样一个工具集，它能够构建一个符合不同业务需求的 CaaS。
添加新技术组件大大简化。假设一家公司想将 MongoDB 添加到其投资组合中。现在，经过认证的映像可以从 Docker Hub 上下载下来，根据需要进行调整，然后快速部署。然后，这个容器可以提供给开发人员使用。容器也允许更多的实验。由于构建和拆卸容器非常容易，开发人员可以快速比较栈组件的特性。例如，一个开发人员想要测试三种不同的 NoSQL 数据库技术的性能，他们可以简单地为每种 NoSQL 技术启动适当的容器，而不必处理管理基础设施和底层技术栈的复杂性。然后，开发人员可以对每个不同的容器运行性能测试，并快速选择合适的容器。
就完全抽象底层基础设施而言，容器具有天生的、不可思议的能力来提供类似 JVM 的可移植性。真正的 CaaS 模型是为在多云环境中部署多容器应用铺平道路。
### 加快工作负载现代化
有各种各样的工作负载需要进行适当的现代化，并迁移到强大的环境(云)中，以便全球用户能够轻松找到、绑定和使用这些工作负载来生产关键业务应用。工作负载通常代表软件应用、中间件、平台等。过去，**面向服务架构** ( **SOA** )是通过集成和组合实现软件现代化的推动者。在最近的过去，管理服务协议被吹捧为实现遗留、单一和大规模应用现代化的最佳方法。为了便于管理，应用被相应地分割开来。随着复杂的应用作为可互操作、可移植和可组合的微服务的集合被表达和公开，开发、部署和管理的复杂性预计会下降。这意味着应用模块正在被重构，并准备好松散耦合或轻度耦合，甚至解耦。此外，建议应用是无状态的，以便可扩展和独立部署。
一些应用可以采取“提升和转移”的方式来云。这意味着，如果引入一些代码修改，它们可以被显著重构，以利用云中心的独特优势。这些应用正在针对特定的云平台进行重新设计、重新编码和调整用途。这给了遗留应用新的生命和新的目的。
容器是托管和交付微服务的高度优化和组织的运行时。容器和微服务在许多方面正成为信息技术领域最重要的组合。使用容器来“包装”或容器化现有的遗留应用有几个优点。容器负责底层平台和基础设施以及与之相关的复杂性。容器化的应用是可移植的，提高了执行传统现代化的速度。通过使用容器，云迁移变得更加顺畅。安全性、web 和服务支持以及治理等附加功能可以轻松快速地附加到容器化的应用中。此外，现代化的遗留应用更适合分布式计算。
当我们将当前和传统的应用迁移到云中时，实现它们现代化的一个好方法是利用 Kubernetes 和 Mesos 等技术，而不是构建所有的**非功能需求** ( **NFRs** )，例如可扩展性、安全性和可持续性。
#### 有状态应用的 Docker