1, 
fullFileName.length()); 
} else { 
return null; 
} 
} 
2.1.8 命令注入 
审计方法：可以搜索以下关键词： 
getRuntime,exec,cmd,shell 
在第 205 行中，通过拼接传过来的 ip 值来执行命令。如果 ip 值通过外部传入，则可以构造
以下的 ip 值来执行 net user 命令： 
127.0.0.1&&net user 
2.1.9 缓冲区溢出 
审计方法：主要通过搜索关键词定位，再分析上下文 
可搜索以下关键字： 
strcpy,strcat,scanf,memcpy,memmove,memeccpy Getc(),fgetc(),getchar;read,printf 
漏洞示例： 
文件\kt\frame\public\tool\socket_repeater\mysocket.h 中第 177 行，这里的的参数
hostname 拷贝到 m_hostname，具体如下图所示： 
m_hostname 的大小为 MAXNAME 
： 
继续看，可以看到大小为 255 
如果传入的长度比 255 要大，就会造成缓冲区溢出。 
2.1.10XML 注入 
审计方法： 
XML 解析一般在导入配置、数据传输接口等场景可能会用到，可通过搜索以下关键字定位： 
DocumentBuilder、XMLStreamReader、SAXBuilder、SAXParser、SAXReader 、XMLReader、
SAXSource 、TransformerFactory 、SAXTransformerFactory 、SchemaFactory 
涉及到 XML 文件处理的场景可留意下 XML 解析器是否禁用外部实体，从而判断是否存在 XXE 
漏洞示例： 
在代码 6 行处、获取 DOM 解析器，解析 XML 文档的输入流，得到一个 Document 
如果没有禁用 DTD 则存在 XXE 漏洞，以下代码为 XXE 防御代码 
2.1.11 日志记录敏感信息 
审计方法： 
通过搜索关键词 log.info logger.info 来进行定位 
在SFtpOperate.java文件中，代码134行处，直接将用户名密码记录在日志中 
2.1.12URL 跳转 
审计方法：通过搜索以下关键词定位： 
sendRedirect、setHeader、forward 
需注意有没有配置 url 跳转白名单 
漏洞示例： 
以下代码中 40 行处只判断 site 只是否为空，没有对 url 进行判断是否为本站 url，导致了 url
跳转漏洞 
2.1.13 敏感信息泄露及错误处理 
审计方法：查看配置文件是否配置统一错误页面，如果有则不存在此漏洞，如果没有再通过
搜索以下关键词搜索定位, 
Getmessage、exception  
漏洞代码示例： 
在以下文件中代码 89 行处打印出程序发生异常时的具体信息 
2.1.14 反序列化漏洞 
审计方法： 
Java 程序使用 ObjectInputStream 对象的 readObject 方法将反序列化数据转换为 java 对象。
但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化
产生非预期的对象，在此过程中执行构造的任意代码。 
反序列化操作一般在导入模版文件、网络通信、数据传输、日志格式化存储、对象数据落磁
盘或 DB 存储等业务场景,在代码审计时可重点关注一些反序列化操作函数并判断输入是否
可控，如下： 
ObjectInputStream.readObject 
ObjectInputStream.readUnshared 
XMLDecoder.readObject 
Yaml.load 
XStream.fromXML 
ObjectMapper.readValue 
JSON.parseObject 
漏洞示例： 
以下代码中，程序读取输入流并将其反序列化为对象。此时可查看项目工程中是否引入可利
用的 commons-collections 3.1、commons-fileupload 1.3.1 等第三方库，即可构造特定反序列
化对象实现任意代码执行。 
2.1.15 不安全组件暴露 
审计方法： 
通过查看配置文件 AndroidManifest.xml,查看属性有没有配置 false 
AndriodManifest.xml 文件中，代码 24 行处 activity 组件添加属性，没有配置 false,
默认组件可被导出 
3.1 其他漏洞审计方法 
3.1.1CSRF 
审计方法:通过查看配置文件有没有配置 csrf 全局过滤器，如果没有则重点看每个操作前有
没有添加 token 的防护机制 
在 Smpkpiappealcontroller.java 中 200 处，直接用用 ids 控制删除操作，而没有添加防
csrf 的随机 token 验证检查，存在 csrf 漏洞。 
Java/main/com/venustech/tsoc/cupid/smp/kpi/dao/smpkpideclardao.java 517 行，对传
入的 ids 进行删除操作。 
3.1.2Struts2 远程代码执行漏洞 
审计方法：查看 struts 插件的版本信息是否为漏洞版本 
漏洞版本查询网址：https://www.exploit-db.com/ 
3.1.3 越权操作 
审计方法：重点关注用户操作请求时查看是否有对当前登陆用户权限做校验从而确定是否存
在漏洞，有些厂商会使用一些主流的权限框架，例如 shiro ,spring security 等框架，那么需要
重点关注框架的配置文件以及实现方法 
漏洞示例： 
在以下文件中采用了 shiro 框架进行权限控制，在代码 58-72 行处为控制访问路径的权限设
置，51-55 行处为对 admin 路径下访问限制，只有 SysyUserFilter 设置了 isAccessAllowed
方法,其他过滤均没有 
SysUserFilter 中 isAccessAllowed 具体实现方法如下，90-93 行处没有对是否为当前用户进
行判断，导致了越权 
其他过滤文件均只设置了 onAccessDaniad()方法 
如果没有使用框架的话，就要注意每个操作是否有权限 
代码 7 行处获取 session 里的 username，只判断了 username 是不是为空，如果在截取
数据包的时候将 username 再重新赋一个值就有可能造成越权漏洞。 
以这个年度服务费用编制功能为例，测试一下，代码如图所示： 
3.1.4 会话超时设置 
审计方法： 
Javaweb 应用会话超时设置一般有俩种方法： 
一是在配置文件 web.xml 设置 
二是通过 java 代码设置 
3.1.5 敏感数据弱加密 
审计方法： 
敏感数据弱加密主要看数据传输中的加密方法，一般写在工具类 util 中 
以下文件中为 base64 编码方法 
4.1 工具使用 
1. Fortify 
1.1 新建扫描 
1.1.1 命令行自定义扫描目录： 
如果想自定义 Fortify 扫描的目录的话，下面命令比较方便： 
sourceanalyzer -scan  -cp "lib/*.jar" "src/**/*.java" "web/**/*.jsp" -f result.fpr 
-cp 指定类库的路径，如果没有就不用这个选项 
"src/**/*.java" "web/**/*.jsp" 这两个参数指定扫描 src 目录下的所有 java 文件和
web 目录中的所有 jsp 文件 
-f 指定扫描结果的输出文件为 result.fpr,扫描完后双击就可以通过 Fortity 查看了。 
1.1.2 图形化界面 
1.2 查看结果 
漏洞列表： 
漏洞介绍： 
Details 
漏洞修复建议： 
Recommendations 
漏洞跟踪图： 
Diagram 
2. Sublime Text 
2.1 打开项目相应目录： 
2.2 全局搜索 
Ctrl + Shift + F 全局搜索 
上面红框的几个图标可以设置是否大小写敏感，是否搜索整个单词。 
3. JD-GUI 
没源码时，要分析 jar 包或者 class 文件，就要用到 JD-GUI。 
直接拖动某个 jar 或者 class 文件进 jd-gui 就可以打开了，然后搜索关键词审计： 
把那些勾都勾上搜索。 
4. 文件浏览器 
Windows 自带的文件浏览器可以方便地搜索某个文件或者 java,jsp 文件： 
实际中，都是 Fortify、Sublime Text 和文件浏览器结合一起用最高效。