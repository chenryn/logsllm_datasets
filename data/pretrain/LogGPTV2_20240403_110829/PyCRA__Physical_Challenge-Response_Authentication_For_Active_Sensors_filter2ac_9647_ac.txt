hardware to counter the physical challenges issued by PyCRA—
can instantaneously detect the change in the physical challenge.
That is, there always exists a non-zero probability of the attacker
missing the changes in the physical challenge. In Section 4, we
detail a theoretical result that explains the relationship between the
amplitude of the physical challenge within the confusion phase and
the probability that the attacker will fail to detect changes in the
physical challenge.
3.3 Effect of Physical Delays at the Sensor
As with the attacker, the actuator used by the active sensor it-
self suffers from physical delays. This means that when PyCRA
issues a physical challenge, the actuator output does not transition
immediately. Apparently, if the physical delay in the active sensor
is greater than τattack, then an adversary can conceal his signal. To
counter this, PyCRA constructs a mathematical model for the sen-
sor that is used—in real time—to predict and eliminate the effects
of the active sensor’s physics. By calculating the residual between
the expected output and the measured output, PyCRA can still de-
tect the existence of an attack even if the sensor’s dynamics are
slower than those of the attacker.
3.4
χ2 PyCRA Attack Detector
If we obtain an accurate model of the sensor’s actuator dynam-
ics, then we can remove its effects from the measured response,
ensuring that any residual energy measured while u(t) = 0 belongs
to an external source such as an attacker.
3.4.1 Obtaining the Sensor Model
To compensate for the actuator dynamics, we ﬁrst need to ac-
quire an accurate model that captures the underlying physics of the
active sensor. Below we model the active sensor using the generic
nonlinear state update of the form:
y(t) = h(x(t)) + v(t)
x(t + 1) = f (x(t),u(t)) + w(t)
(2)
(3)
where x(t) ∈ Rn is the active sensor state at time t ∈ N0 (e.g., the
electrical current and voltages inside the sensor at time t), u(t) ∈ R
is the modulation input to the sensor, the function f : Rn × R → Rn
ActuatorActive SensorSensorMeasured EntityActuatorActive SensorSensorMeasured EntityActuatorActive SensorSensorMeasured Entity1008Figure 5: Sensor actuator output (top) with confusion and silence
phases and the corresponding raw signal (bottom) with an attack.
is a model describing how the physical quantities of the sensor
evolve over time, and the function h : Rn → R models the sensor
measurement physics. Such models can be either derived from ﬁrst
principles [9, 2, 10] or through experimental studies [23, 20]. Ad-
ditionally, these models are used to design the sensors themselves
and are typically known to the sensor manufacturers. Finally, since
no mathematical model can capture the true system behavior ex-
actly, the term w(t) ∈ Rn represents the mismatch between the true
sensor and the mathematical model while v(t) models the noise in
the sensor measurements.
3.4.2
χ2 Detector
We use the dynamical model of the sensor (Equations (2) and (3))
in designing a χ2 detector to detect the existence of an attacker. χ2
detectors appear in the literature of automatic control, where they
are used in designing fault tolerant systems [26, 28, 25, 38]. The
χ2 detector works as follows:
[Step 1] Select random times, tchallenge and tcon f usion.
[Step 2] Issue a physical challenge by entering the confusion phase
at time tchallenge and then enter the silent phase at time tchallenge +
tcon f usion.
[Step 3] Residual Calculation: Here we use Equations (2) and (3)
to calculate an estimate for the current sensor state ˆx(t) and the pre-
dicted output ˆy(t) = h( ˆx(t)). This operation is initiated at tchallenge +
tcon f usion when u(t) transitions to 0—the actuator “silence time”—
and terminates once u(t) transitions back to one, signaling the end
of actuator “silence.”
The model represented by Equations (2) and (3) describes the
output of the sensor when the attack is equal to zero. Therefore,
the residual1 between the measured output and the predicted out-
put, z(t) = y(t)− ˆy(t), corresponds to both the attack signal as well
as the environmental dynamics during the time interval before u(t)
drops to 0. For each segment of length T where u(t) = 0, we cal-
culate the norm of the residual z(t) as:
g(t) =
1
T
t
∑
τ=t−T +1
z2(τ)
(4)
[Step 4] Detection Alarm: Once calculated, we compare the χ2
residual g(t) against a pre-computed alarm threshold α. This alarm
threshold is chosen based on the noise v(t). Whenever the condition
g(t) > α is satisﬁed, the sensor declares that an attacker has been
detected.
4. THEORETICAL GUARANTEES
As discussed before, PyCRA is based on the concept that physics
impose fundamental and immutable constraints on how quickly an
attacker can detect changes in the physical-challenge and how fast
1The name of the Chi-squared (χ2) detector follows from the fact
that, in the case of no attack, the residual z(t) is a Gaussian ran-
dom variable, and hence its square g(t) is a χ2 distributed random
variable.
he can react to these challenges. In this section, we show a theo-
retical result that allows PyCRA to increase the probability of an
attacker failing to detect the changes in the physical-challenge by
correctly designing the confusing phase (discussed in Section 3.2)
and hence increase the probability of detecting the attack.
THEOREM 1. Consider an attacker attempting to detect changes
in a physical challenge signal with mis-detection probability α. For
any strategy the attacker chooses, and because of the SNR exists at
any sensor, the probability of the attacker having a constant detec-
tion delay τ > 0 is bounded away from zero, i.e., with high proba-
bility the attacker will detect a change and turn off his signal only
after time T after the beginning of the confusion period. In addi-
tion, decreasing the amplitude of the signal emitted by the active
sensor during the confusion period by a factor of β > 1 increases
the delay τ by a factor of β 2.
PROOF SKETCH. We base the proof on the results reported in
[36] on change point detection which measure fundamental limits
on checking changes in noisy signal. In the change point detection
setting, the false alarm probability is analogous to the event where
the attacker switches off his signal before the beginning of the silent
period. Delay in [36] is deﬁned as the time that elapses from the
change point until the change is detected. When α (cid:28) 1, the false
alarm probability induces a probability which is proportional to α
for the event that change is detected within a time interval shorter
than T (a constant independent of α).
Decreasing the amplitude of the signal actuated by the active sen-
sor during the confusion period by a factor of β leads to a decrease
in SNR by a factor of β 2. Based on this relation, the attacker has to
increase the delay by a factor of β 2 in order to maintain false alarm
probability α.
5. CASE STUDY (1): DETECTING ACTIVE
SPOOFING ATTACKS FOR MAGNETIC
ENCODERS
Magnetic encoders are active sensors used in a wide array of
industrial, robotics, aerospace, and automotive applications. The
goal of an encoder is to measure the angular velocity or position of
a gear or wheel in order to provide feedback to a motor controller.
The operation of these systems depends heavily on the accuracy
and timeliness of the individual encoders. This section describes
the basic operation of magnetic encoders in particular and the types
of attacks that can be mounted against them as well as how PyCRA
can be used to provide security for them.
5.1 Magnetic Encoders
Magnetic encoders rely on magnetic variations to measure the
angular velocity of a gear or wheel and are often designed to handle
dust, mud, rain, and extreme temperatures without failing. The goal
of each encoder is to provide a signal whose frequency corresponds
to the speed of a gear. These signals are conditioned and passed to
a motor controller unit which detects if any corrective actions need
to be taken.
Typical magnetic encoders operate by generating a magnetic ﬁeld
in the presence of a rotating ferromagnetic tone ring or tone wheel.
This ring has a number of teeth on its edge so that the reﬂected mag-
netic wave as observed by the encoder varies over time as a (noisy)
sinusoidal wave. By measuring the frequency of this reﬂected sig-
nal over time, each sensor and consequently the motor controller is
able to infer the angular velocity of any given gear, wheel, or motor
as illustrated in Figure 6.
Attacks on magnetic encoders have been studied in [33] in the
context of Anti-lock Braking Systems in automotive vehicles. Both
1009Figure 6: Flow diagram for a typical magnetic encoder: The signal
begins as a reﬂected magnetic wave from a gear. This signal is
captured by a pick-up coil or Hall Effect sensor, conditioned into a
clean square wave, and ﬁnally translated into an angular velocity.
simple spooﬁng [T2] and advanced spooﬁng [T3] attacks are shown
to inﬂuence the vehicle stability. In this case study, we show how
PyCRA can detect the existence of such attacks.
5.2 The PyCRA-secured Magnetic Encoder
Physically, the proposed secure magnetic encoder sensor con-
sists of two main parts: (i) the front-end containing the actuator
and pickup coils responsible for both probing the rotating tone ring
and measuring the response, and (ii) the processing backend. Fig-
ure 7 shows the front-end of the sensor used in our evaluation. The
actuator coil depicted is much larger than would be required in a
commercial product, because it consists of a magnetic core and a
hand-wound high-gauge wire. The following is an overview of the
main blocks of the sensor.
5.2.1 Actuator Coil
The main component required for the secure sensor is the actu-
ator coil. In this work, we use an insulated copper wire wrapped
around a ferromagnetic core and driven using a power ampliﬁer.
5.2.2 Pickup and Filtering
The pickup (measurement) coil is wrapped around the same fer-
romagnetic core used for the actuator coil. In order to reduce the
effect of noise from other EMI sources within the vehicle body,
the output of the pickup coil is connected to a differential ampliﬁer
with high common-mode rejection. The output of this differential
ampliﬁer is connected to the digital processing backend.
Another security concern of the magnetic encoder is the wires
connecting the coils to the digital backend. These wires pose a po-
tential vulnerability, as an attacker can cut them and connect his at-
tack module directly. However, such attacks are already accounted
for in many systems as addressed in Assumption A1.
5.2.3 Processing Elements
The secure sensor requires enough processing power to perform
the necessary computations in real-time. The DSP calculations take
place on a high power ARM Cortex (M4 STM32F407) processor,
which has ample ﬂoating point support. We do not consider any
power consumption issues in our design.
5.3 Obtaining the Sensor Model
The dynamics of the sensor (including the actuator, high gain
current ampliﬁer, sensors, and the signal conditioning circuit) are
identiﬁed using standard system identiﬁcation methods [23]. That
is, we applied four different pseudo random binary sequences (PRBS)
to the system, collected the output, and then applied subspace sys-
tem identiﬁcation techniques in order to build models of increasing
complexity [23]. Finally we used both whiteness tests and correla-
tion tests to assess the quality of the obtained model [20]. In order
to validate the model, we generated a random sequence similar to
those used in the real implementation of the sensor. We fed the
same input to both the sensor and the model and recorded the error.
Figure 7: PyCRA encoder actuator coil, sensor, and gear setup.
Experiments show that the model is reasonably accurate with an
error in the range of 5 milli-Volts.
5.4 Testbed
In order to test the PyCRA-secured magnetic encoder, we con-
structed a testbed consisting of the proposed secure sensor attached
to a Mazda Rx7 tone ring. The tone ring is attached to a DC mo-
tor which simulates a rotating wheel. An additional coil is added
to simulate the effect of an attacker. The attacker coil is also con-
trolled by a high gain ampliﬁer controlled through a real-time xPC
Target system connected to MATLAB.
A Mazda RX7 magnetic encoder sensor is also attached to the
same tone ring in order to provide ground truth. The output of this
sensor is connected to a MAX9926U evaluation kit which includes
an interface capable of converting the raw sinusoidal wave into the
encoded square wave as shown in Figure 6. The output of the pro-
posed secure sensor as well as the output of the MAX9926U is
monitored by the same real-time xPC Target for comparison.
5.5 Calibration against natural variations
Sensor modeling is usually done in a controlled environment.
However, once the sensor is placed in a testbed, multiple natural
variations, mechanical asymmetries, and other environmental fac-
tors degrade the accuracy of such models. To account for these
variations, we use a simple learning mechanism to estimate the
noise level in the measurements and the deviation between the ex-
pected outputs (as per the model) and the actual outputs. Once
these parameters are learned, we can set the alarm threshold ac-
cordingly. Results can be further improved by considering online
identiﬁcation-and-calibration of the sensor model.
5.6 Attack Detection for Magnetic Encoders
We begin with a simple spooﬁng attack [T2] in which an attacker
injects a sinusoidal wave of varying frequency. Spooﬁng attacks of
this nature attempt to overpower the true frequency of the system
and force the sensor to track the false frequency (mirroring the sim-
plistic spooﬁng attack in [13]). In this experiment the original tone
ring frequency is ﬁxed at 71 Hz, and the frequency of the attacking
coil increases linearly from 60 Hz to just over 400 Hz.
As per our attacker model in Section 2, we assume that the at-
tacker attempts to conceal his or her presence (Adversarial goal
[G1]). This means that the adversary will be able to detect when
the actuator coil is turned off and will, after some time τattack, tem-
porarily halt the attack.
The stealthiness of the attacker necessitates that the PyCRA de-
tection scheme have high accuracy even when the attacker is quick
GearEncoderMotorControllerActuatorCoilPickupCoilGear1010(a)
(b)
Figure 8: Results from 30 experiments showing (a) the accuracy