complete mediation of communication channels.
Volume settings The volume-setting covert channel is sim-
ilar to the vibration-setting channel. The difference is that
changes in the volume setting are not automatically broad-
casted, which means that two applications communicating
through this channel have to set and check the volume alter-
natively, requiring tighter synchronization in time (i.e., the
receiving application has to be certain that it only checks
after next setting has been set by the sending application).
On the other hand, because the volume is a setting be-
tween 0 and 7, the channel allows Soundcomber to transmit
3 bits per iteration. Generally speaking, the sending appli-
cation will set the volume at times ts = k · ti ms within
each second, for k = 0, . . . , ( 1000ms
− 1) while the re-
ceiving application will read the volume setting at times
ti
tr = k ·ti +(ti/2). Initial experiments indicated that setting
and getting the volume settings takes on the order of 7ms, so
we set the iteration length to ti = 20 ms and thus achieved
150 bps. Speciﬁcally, the sender will set the volume at times
0ms, 20ms, 40ms, and so forth, while the receiver will read
the volume at times 10ms, 30ms, 40ms, and so on. At this
speed, however, here is a small chance that if Android is
doing some “housekeeping” during the transmission that ei-
ther the sender or receiver will miss a window and get out
of sync. No permission is needed to exploit this channel.
Screen Another channel speciﬁc to Android, which might
well be speciﬁc to mobile phones, is the mobile phone
screen. This channel is particularly interesting because it
turns out to be an invisible visible channel. Mobile phones
typically conserve power by switching off the screen if the
user is not using it for a certain period of time. The screen
can be re-awakened through a press of a button or touching
the screen.
Android allows individual applications to inﬂuence the
screen. For example, applications that need to prevent the
screen from dimming out (e.g., a car GPS application) can
request a wake-lock from the operating system. Acquisition
of the wake-lock immediately turns on the screen if it was
dark, and the screen will only be switched off again when
the lock is released. The change of the screen states (on or
off) triggers a notiﬁcation mechanism, which Android uses
to inform applications of the screen setting. These notiﬁca-
tions are used by Soundcomber to create a covert channel
with its colluding application. More speciﬁcally, Sound-
comber acquires and releases a wake-lock at regular inter-
vals, which transmits to Deliverer one bit of information for
each iteration through the notiﬁcations issued by the sys-
tem.
At ﬁrst glance, this channel is not stealthy: the alteration
of screen states seems to be too conspicuous to go unno-
ticed. We found, however, that on the Android G1 phone, if
the wake-lock was held for a short enough time, a latency in
the electronics of the device would prevent the screen from
actually turning on, but the notiﬁcation that the screen had
been turned on was still sent. The channel is thus again
invisible to the user.
Compared with the vibration and volume settings
channels, exploiting this channel needs the permission
WAKE_LOCK, which is explained by Android as prevent
phone from sleeping. Also, the bandwidth of the channel
is fairly low, less than 5.29 bits per second. Nevertheless,
it offers a practical way to deliver a small amount of data
within a short period of time: for example, sending a 16-
digit credit card number (54 bits) takes around 11 seconds.
File Locks Covert channels using ﬁle locks have been
known since 1989 [9] and are far from speciﬁc to the An-
droid platform. We show, however, that this channel also
works well (we characterize the bit rate) on a smartphone
platform and can be used to practically leak sensitive data
to an unauthorized party. The basic idea is that two applica-
tions can stealthily exchange information through compet-
ing for a ﬁle lock.
Speciﬁcally, if Soundcomber wants to signal a 1 to De-
liverer, it requests a ﬁle lock on a ﬁle shared between them.
Deliverer also tries to lock that ﬁle:
if this attempt fails,
‘1’ is sent, otherwise, ‘0’ is sent. Communication through
this channel can even evade the stringent Bell-LaPadula
(BLP) [2] model: a high process (the process with access
to microphone) can read-lock the shared ﬁle, while the low
process (Deliverer) tries to get a write-lock on it. This does
not violate the “no-reads-up” and “no-writes-down” poli-
cies of the BLP.
Our implementation of the ﬁle-locking channel on An-
droid employs an efﬁcient synchronization mechanism.
Soundcomber and Deliverer each maintain m signaling
ﬁles, S1 · · · Sm and one data ﬁle. The signaling ﬁles are or-
ganized in a round-robin fashion. Before transmitting data,
both parties lock their own signaling ﬁles (S1 to Sm/2 for
Soundcomber, Sm/2+1 to Sm for Deliverer) and Deliverer
also blocks itself by attempting to lock S1, a ﬁle already
locked by Soundcomber. Soundcomber then sets/releases
the lock on the data ﬁle according to the ﬁrst bit it wants
to transmit, and after that, wakes up Deliverer by releas-
ing its lock on S1 and blocks itself by waiting for the lock
on Sm/2+1, the ﬁrst of the signaling ﬁles already held by
Deliverer. Deliverer then tests the data ﬁle to acquire the
bit, removes its lock on Sm/2+1 to invoke Soundcomber
and waits for the next bit by attempting to lock S2. By ro-
tating through the m signaling ﬁles, the two processes can
synchronize themselves during the data transmission, which
helps achieve a bandwidth of more than 685 bps. Develop-
ing the idea of rotating ﬁle locks became necessary because
experiments showed that Android does not honor the se-
quence of ﬁle locking requests if the requests are made very
closely spaced.
5 Defense Architecture
The current Android platform performs only static per-
mission checks, without taking context information into ac-
count. For example, once an application is granted the
permission to record the microphone, it can always make
use of the permission, independent of the phone state (e.g.,
idle/call in progress) or the number currently called. This
threat cannot be mitigated by the reference monitor archi-
tectures proposed in prior research [10]. Even though such
work considers context while regulating inter-application
communication, the collection of one type of sensor data
based on other context information is not yet supported.
In our research, we built the ﬁrst defense architecture to
counter this threat. Our approach is not meant to be a re-
placement for the defense mechanism proposed by prior re-
search. Instead, we intend to develop a new technique that
can be incorporated into existing mechanisms. To this end,
we implement a prototype to add a context-sensitive refer-
ence monitor to control the AudioFlinger service, the An-
droid kernel service in charge of media data. This approach
prevents audio data from leaking to untrusted applications
during a sensitive call.
Our reference monitor is designed to block all applica-
tions from accessing the audio data when a sensitive call is
in progress. It consists of two components:
• Reference Service: The reference service determines
whether the phone enters or leaves a sensitive state by
monitoring call activity. When a sensitive call is made
the reference service alerts the controller. In our pro-
totype the reference service is implemented in the RIL,
the “radio interface layer” which mediates access from
the Android OS to the baseband hardware. Any at-
tempt to make a call, no matter how it is made, has
to pass through the RIL. The reference service inter-
cepts attempts to make outgoing calls and checks the
called number. Whenever a call to a sensitive number
is made, it notiﬁes the controller.
• Controller: The controller embedded in the Au-
It
dioFlinger service mediates access to audio data.
operates in one of the following two modes:
– Exclusive Mode:
In exclusive mode, the con-
troller blanks all audio data being delivered to
applications requesting audio data. Instead of the
actual audio data, these applications will simply
record silence.
– Non-Exclusive Mode: In non-exclusive mode, the
controller does not intervene and the audio data
is delivered normally to applications.
When the reference service detects that a sensitive call is
being made, it alerts the controller. On receiving the alert
from the reference service, the controller enters exclusive
mode and blanks all audio data being delivered to applica-
tions. Once the sensitive call has ended, the reference ser-
vice again notiﬁes the controller, which reverts back to non-
exclusive mode. Our reference service can be used by exist-
ing reference monitor architectures to intercept phone calls,
and use the controller to enable/disable recording from the
microphone. Although we focus on audio data, the princi-
ple of adding context information to protect Android kernel
services can be extended to protect other sensor data. We
believe that existing architectures can use a similar tech-
nique to defend against sensory malware.
With the controller being a part of the AudioFlinger, we
assume that the integrity of the Android OS itself is guaran-
teed. If the OS has been compromised by malware then the
malware already has access to all data and can circumvent
the controller. With the integrity intact, on the other hand,
the controller can guarantee that no application can record
audio while a sensitive call is in progress. Since the refer-
ence service is on the critical path to making a phone call,
we measure the delay added by the service in Section 6 and
show that it is negligible.
6 Evaluation
In this section, we report on our evaluation of Sound-
comber. Our experimental study was aimed at under-
standing Soundcomber’s capabilities to detect whether a
hotline number was called, extract high-value data from
a phone conversation using proﬁles, recover digits from
tones/speech and transmit them through covert channels.
We also wanted to determine the performance of these op-
erations and the overhead they incurred.
6.1 Experiment settings
We carefully designed a set of experiments which stud-
ied hotline detection, tone/speech recognition, proﬁle-based
data discovery and different covert channels.
Speech
recordings from three participants were used.11 Each par-
ticipant was asked to speak or dial menu choices or credit
card numbers, just as they normally would during a call to a
bank service line. These credit card numbers were obtained
from an online automatic generator.12 After each phone
conversation, Soundcomber analyzed the recordings, identi-
ﬁed and delivered the credit-card numbers, which was mon-
itored and measured to evaluate the effectiveness and per-
formance of its operations. All the experiments were per-
formed on an Android development phone with Firmware
version 1.6 and kernel version 2.6.29-00479-g3c7df37. The
phone contained a 1GB SD card and was connected to the
Internet through Wi-Fi. We elaborate on the settings for in-
dividual experiments below.
Service hotline detection. When detecting whether the
user called a service hotline it is important to minimize
false positives. Too many false positives means that Sound-
comber spends time analyzing phone calls that do not con-
tain relevant sensitive information such as credit card num-
bers. We tested Soundcomber with 5 different service hot-
lines of ﬁnancial institutions. For each hotline we recorded
4 samples and then extracted keywords using speech recog-
nition to build a database of hotlines. The accuracy of the
11Indiana University IRB Approved Protocol ID: 1001000932.
12http://mediakey.dk/˜cc/wp-dyn/
credit-card-number-generator.php
detection was then tested using another set of 4 recordings
each per hotline. To determine the false positive rate, we
created 20 simulated normal phone calls by formatting nor-
mal speech from a corpus13 to look like a phone conversa-
tion. We then ran the hotline detection on those simulated
calls.
Tone recognition. To test the accuracy and performance
of tone recognition, we recorded 20 samples of phone con-
versations with a phone line that we controlled.14 The out-
comes of the recognition were compared with the real digits
the participant entered to determine the accuracy. We also
measured the performance. The Goertzel’s algorithm we
implemented (see Section 3.2.1) utilized a frame length of
N = 205 samples, corresponding to 25.625ms. Our exper-
iment required 5 frames in a row to minimize false positives
when detecting DTMF tones, and used a detection threshold
parameter β = 2 (see Section 3.2.1).
Speech recognition. The performance of speech recog-
nition was tested by analyzing 60 recordings of simulated
phone calls (20 samples from three subjects each) where a
user spoke a credit card number by pronouncing individual
digits. Again, the accuracy can be determined by compar-
ing the recognized numbers with the spoken numbers and
the performance was measured using the getrusage()
function call.
Proﬁle-based data discovery. To test the effectiveness of
using proﬁles to discover high-value data, we created two
proﬁles describing service hotlines. Participants then sim-
ulated 20 calls following a speciﬁc script for each of the
hotlines and tested whether Soundcomber correctly recog-
nized and extracted the high-value information. We also let
the participants deviate from a given script to understand
whether Soundcomber could correctly identify the opera-
tions that did not lead to high-value information.
Covert channel study. The most important performance
measurement for covert channels is bandwidth in bits per
second, which determines how long it takes to covertly
transmit the extracted high-value information from Sound-
comber to the Deliverer application. To measure the band-
width of each channel, we ran a pair of applications to ex-
change 440-bit (55-byte) messages through the channel. All
channels were parameterized to guarantee zero bit errors,
sometimes at the cost of achievable bandwidth.
Reference monitor. To measure the performance impact
of the reference monitor we ﬁrst made the relevant modiﬁ-
cations to the AudioFlinger service and then compiled the
modiﬁed Android OS and installed it onto an Android de-
13VoxForge—http://www.voxforge.org/
14Our demo shows a real phone call to a real credit card company, but
we hesitated to have our subjects call real credit card company hotlines
repeatedly. We thus had subjects follow a script for a simulated phone call.
veloper phone (HTC Dream). We then made test calls to
numbers marked as sensitive to measure effectiveness and
performance.
6.2 Experiment results
6.2.1 Effectiveness
Service hotline detection. When testing the hotline detec-
tion on 20 recordings of actual hotlines, Soundcomber cor-
rectly identiﬁed 55% of the hotlines (among 5 different hot-
lines), detected 5% as the wrong hotline and missed 40%
of hotline calls. Running the detection on 20 recordings of
simulated normal conversations resulted in 100% being cor-
rectly identiﬁed as normal conversations, i.e., the false pos-
itive rate of the hotline detection is 0%. If a malware master
includes detection information for the 5 largest ﬁnancial in-
stitutions, the accuracy of the hotline detection is sufﬁcient
for Soundcomber to detect more than half of all the calls
to those hotlines on average and analyze them, while not
analyzing any calls containing a normal conversation. We
deem this performance as sufﬁcient for a malware master to
collect a large number of credit card numbers.
Tone/speech recognition. Table 2 presents the accuracy
of tone/speech recognition Soundcomber achieved. For
speech recognition, Soundcomber identiﬁed 55% of the
credit card numbers we tested without any error, and 20%
with either one digit wrong or one missing digit. Note
that single digit errors are often easy to correct: given the
known digit pattern of credit card numbers and the use of
the Luhn algorithm to remove invalid sequences, the brute-
force search space is only 16 possible credit card numbers,
or, when knowing the bank name, 12. The attacker could
try charging each of these 12 numbers to see which one is
valid. Tone recognition was found to be even more suc-
cessful: Soundcomber could recover 85% of all credit card
numbers correctly, and incur one-digit errors for the remain-
ing 15%.
Detection by anti-virus applications. We tested two anti-
virus applications for the Android platform: VirusGuard
from SMobile Systems15 and AntiVirus from Droid Secu-
rity.16 Neither of them reported Soundcomber as malware,
even when it was recording audio and uploading data to the
malware master.
Reference monitor. To test the performance overhead of
both reference service and controller, we implemented them
on an Android Developer Phone (HTC Dream). Since the
reference monitor is on the critical path it is effective at
blocking recording of audio from sensitive calls. We tested
15http://www.smobilesystems.com/
16http://www.droidsecurity.com/
Table 2. Accuracy of speech and tone recognition
> 2 error
No error
1 error
12.5%
2 error
10%
Speech
Tone
55%
85%
5%
0
5%
0
1 missing
2 missing > 2 missing
Speech
Tone
7.5%
10%
7.5%
0
2.5%
0
this functionality and present the performance overhead be-