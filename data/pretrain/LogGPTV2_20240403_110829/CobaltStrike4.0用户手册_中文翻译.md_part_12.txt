prepend，append 和 strrep。
prepend 命令在 Beacon 的反射 DLL 之前插入一个字符串。append 命令在 Beacon 的反射 DLL 之后
添加一个字符串。请确保前置数据是 stage 架构（x86，x64）的有效代码。 c2lint 程序对此没有检
查。 strrep 命令会替换 Beacon 的反射 DLL 中的字符串。
stage 块接受将字符串添加到 Beacon DLL 的 .rdata 节的命令。string 命令添加以零结尾的字符
串。stringw 命令添加一个宽（UTF-16LE 编码的）字符串。 data 命令按原样添加你的字符串。
stage 块接受几个选项来控制 Beacon DLL 的内容，并提供提示以更改 Beacon 的反射加载器的行
为：
克隆 PE 头
Cobalt Strike 的 Linux 程序包包含一个工具 peclone，用于从 DLL 中提取 PE 头并将其显示为可立即
使用的 stage 块：
./peclone [/path/to/sample.dll]
内存中的规避和混淆
使用 stage 块的 prepend 命令来击败一些分析，那种分析会扫描内存段的前几个字节以查找注入的
DLL的迹象。 如果目标的安全分析系统使用特定于工具的字符串来检测你的 agent（代理），请使用
strrep 命令对这些工具特定的字符串进行更改。
如果 strrep 还不够，请将 sleep_mask 选项设置为 true。 这将引导 Beacon 在进入睡眠之前对其内
存进行混淆。进入睡眠模式后，Beacon 将对自己进行混淆处理、以请求和处理任务。SMB 和 TCP
Beacon 将在等待新连接或等待来自其父会话的数据时对其进行混淆。
确定要看起来像内存中的 DLL 的等级。 如果要允许轻松被检测到，请将 stomppe 设置为false。 如果
你想轻微混淆内存中的 Beacon DLL，请将 stomppe 设置为true。如果你想高度混淆，请将
obfuscate 选项设置为 true。此选项将采取很多步骤来混淆你的 Beacon stage 和内存中 DLL 的最终
状态。
将 userwx 设置为 false 可以要求 Beacon 的加载程序避免 RWX 权限。具有这些权限的内存段将引起
分析人员和安全产品的额外关注。
默认情况下，Beacon 加载程序通过 VirtualAlloc 分配内存。 模块 stomping 是一种替代方法。 将
module_x86 设置为一个 DLL，其大小约为 Beacon payload 本身的两倍。Beacon 的 x86 加载程序将
加载指定的 DLL，在内存中找到其位置，然后将其覆盖。这是一种将 Beacon 放置在与磁盘上的文件关
联的 Windows 内存中的方法。重要的是，你打算驻留的应用程序不需要你选择的DLL。module_x64
选项是相同的情况，但是会影响 x64 Beacon。
如果你担心 Beacon stage 会初始化内存中的 Beacon DLL，请将 cleanup 选项设置为 true。此选项
将在不再需要关联 Beacon stage 的内存时将其释放。
12.3 进程注入
可扩展 C2 中的 process-inject 块可对注入的内容进行配置，并控制 Beacon payload 的进程注入行
为。
process-inject {
# set how memory is allocated in a remote process
set allocator "VirtualAllocEx";
# shape the memory characteristics and content
set min_alloc "16384";
set startrwx "true";
set userwx "false";
transform-x86 {
prepend "\x90\x90";
}
transform-x64 {
# transform x64 injected content
}
# determine how to execute the injected code
execute {
CreateThread "ntdll.dll!RtlUserThreadStart";
SetThreadContext;
RtlCreateUserThread;
}
}
process-inject 块接受几个选项来控制 Beacon 中的进程注入过程：
transform-x86 和 transform-x64 块填充 Beacon 注入的内容。 这些块支持两个命令：prepend 和
append。prepend 命令在注入的内容之前插入一个字符串。append 命令在注入的内容之后添加一个
字符串。需要确保前置数据是符合注入内容的架构（x86，x64）的有效代码。c2lint 程序对此没有检
查。
execute 块控制 Beacon 在需要将代码注入到进程中时将使用的方法。Beacon 检查 execute 块中的
每个选项、确定该选项是否可用于当前上下文，在可用时尝试该方法。如果未执行代码，则移至下一个
选项。 执行选项包括：
CreateThread 和 CreateRemoteThread 选项有一些变量，它们会使用另一个函数的地址生成一个挂
起的线程，更新该挂起的线程以执行注入的代码，然后恢复该线程。使用 [function]
"module!function+0x##" 指定欺骗的起始地址。对于远程进程，ntdll 和 kernel32 是从中拉取的
唯一推荐模块。可选的 0x## 部分是添加到起始地址的偏移量。这些变量仅对 x86→x86 和 x64→x64
生效。
你选择的 execute（执行）选项必须涵盖各种极端情况。这些极端情况包括自我注入、注入到暂挂的
临时进程中、跨会话远程进程注入、 x86→x64 注入、x64→x86 注入以及带有或不带有参数传递的注
入。 c2lint 工具会对你的 execute 块未覆盖的上下文发出警告。
12.4 后渗透任务
Windows DLL 实现了更大的 Cobalt Strike 后渗透功能（例如，屏幕截图、键盘记录程序、哈希转储
等）。要执行这些功能，Cobalt Strike 会派生一个临时进程，然后将功能注入其中。process-inject
块控制进程注入步骤。post-ex 块控制 Cobalt Strike 的后渗透功能所特有的内容和行为。
post-ex {
# control the temporary process we spawn to
set spawnto_x86 "%windir%\\syswow64\\rundll32.exe";
set spawnto_x64 "%windir%\\sysnative\\rundll32.exe";
# change the permissions and content of our post-ex DLLs
set obfuscate "true";
# pass key function pointers from Beacon to its child jobs
set smartinject "true";
# disable AMSI in powerpick, execute-assembly, and psinject
set amsi_disable "true";
}
spawnto_x86 和 spawnto_x64 选项控制 Beacon 用于派生其后渗透功能的默认临时进程。以下是有
关这些值的一些提示：
1. 始终指定你想要 Beacon 派生的程序的完整路径
2. 指定路径时可以使用环境变量（例如 %windir%）。
3. 不要直接指定 %windir%\system32 或 c:\windows\system32。始终使用 syswow64 (x86) 和
sysnative (x64)。Beacon 会在必要时将这些值调整为 system32。
4. 对于 x86 spawnto 值，必须指定一个 x86 程序。对于 x64 spawnto 值，必须指定一个 x64 程
序。
5. 你指定的路径（减去自动的 syswow64/sysnative 调整）必须同时存在于文件系统的 x64（本
机）视图和 x86（wow64）视图中。
obfuscate 选项以更安全的 OPSEC 方式对 post-ex DLL的内容进行加密，并将 post-ex 功能建立到
内存中。这与通过 stage 块可用于 Beacon 的 obfuscate 和 userwx 选项非常相似。
smartinject 选项指示 Beacon 将关键函数指针（如 GetProcAddress 和 LoadLibrary）嵌入到其相
同体系结构的 post-ex DLL 中。 这使 post-ex DLL可以在新进程中进行自我引导，而无需通过监视对
PEB 和 kernel32.dll 的内存访问来检测和缓解类似 shellcode 的行为。
amsi_disable 选项指示 powerpick、execute-assembly 和 psinject 在加载 .NET 或
PowerShell 代码之前修补 AmsiScanBuffer 函数。这限制了反恶意软件扫描接口对这些功能的可见
性。
第十三章 报告和日志
13.1 日志
Cobalt Strike将其所有活动记录在团队服务器上。这些日志位于你从中启动团队服务器的目录的
logs/ 文件夹中。所有 Beacon 活动均在此处记录并且带有日期和时间戳。
13.2 报告
Cobalt Strike 有几个报告选项，可帮助你理解数据并向客户传达整个行动。你可以配置大多数报告中显
示的标题、描述和主机。
图46. 导出报告对话框
转到 Reporting 菜单，然后选择一种报告来生成。Cobalt Strike 会将你的报告导出为 MS Word 或
PDF 文档。
活动报告
活动报告提供了红队活动的时间表。此文档中记录了你的每个后渗透活动。
图47. 活动报告
主机报告
主机报告汇总了 Cobalt Strike 逐主机收集的信息。服务、凭据和会话也在此文档中列出。
侵害指标（IoC）报告
该报告类似于威胁情报报告中的“侵害指标”（IoC）附录。内容包括对你的 C2 拓展文件的分析、使用
的域名以及你上传的文件的 MD5 哈希。
图48. 侵害指标报告
会话报告
该报告逐会话记录了指标和活动。该报告包括：每个会话用于回连到你的通信路径，会话期间落地到磁
盘的文件的 MD5 哈希值，杂项指标（例如服务名）以及后渗透活动的时间线。该报告是帮助网络防御
团队了解红队的所有活动并将他们的监控设备获取的信息与你的红队活动相匹配的出色工具。
图49. 会话报告
社会工程学报告
社会工程报告记录了每一轮网络钓鱼行动的电子邮件、谁点击了、以及从每个点击的用户那里收集的信
息。该报告还显示了 Cobalt Strike 的 System Profiler 发现的应用程序。
TTPs（战术、技巧和程序）报告
此报告将你的 Cobalt Strike 行动映射到 MITRE 的 ATT＆CK 矩阵中的战术。ATT＆CK 矩阵使用检测和
缓解策略描述了每种战术。 你可以在以下网址了解有关 MITRE ATT＆CK 的更多信息：
https://attack.mitre.org/
13.3 自定义报告中的 Logo
Cobalt Strike 报告在其首页顶部显示 Cobalt Strike Logo。你可以将其替换为你自己选择的图像。通过
Cobalt Strike → Preferences → Reporting 进行此设置。
你的自定义图片应为 1192x257px，设置为 300dpi。必须设置 300dpi，这样报告引擎才能以正确的
大小呈现你的图像。
你也可以设置强调色。强调色指的是报表第一页上图像下方的粗线颜色。报表内的链接也使用强调色。
图50. 一份定制化的报告
13.4 自定义报告
Cobalt Strike 3.0 支持自定义报告。这些脚本是在 Aggressor 脚本语言的子集中定义的。查阅
Aggressor 脚本文档以了解有关此功能的更多信息：
https://www.cobaltstrike.com/aggressor-script
附录A. 键盘快捷键
以下键盘快捷方式可用：
|---|--|--|--|
| 0 |  |  |  |
| 1 |  |  |  |
| 2 |  |  |  |