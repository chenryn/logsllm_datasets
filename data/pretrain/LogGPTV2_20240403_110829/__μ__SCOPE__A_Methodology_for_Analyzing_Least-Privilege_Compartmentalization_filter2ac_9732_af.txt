of µSCOPE’s approach.
11 DISCUSSION AND FUTURE WORK
µSCOPE analysis shows that the Linux kernel runs with exces-
sive privilege (over 25,000×) and has the potential for considerable
privilege reduction (500×) while indicating minimal restructuring
and excessive overhead (15%). This should be viewed as bringing
an enticing opportunity to light, but it stops far short of showing
how to engineer solutions that fully exploit it; it will still require
significant contributions to fully extract this promise.
Coverage and Dynamic Analysis: µSCOPE uses dynamic anal-
ysis to collect privileges and their runtime usage counts for privilege
and performance analysis. Our coverage results stabilized over our
test suites and kernel workloads (Fig. 4), indicating that our analysis
is quite comprehensive for the configuration under study. However,
coverage is a limitation of dynamic analysis. Like other works [15],
our framework could be combined with static analysis for a hybrid
design. The PSmin difference between static and dynamic analysis
would be interesting to explore. Note that, most mechanisms will
incur some generalization when applying a CAPMAP, e.g., accesses
could be generalized on a per-function or per-module level. It is
unlikely that data will only be touched in uncovered passes and
the implicit generalization will naturally include some potentially
missed accesses. Omissions discovered from µSCOPE can be used
to improve the quality of kernel test suites [3], and µSCOPE could
be used in conjunction with related fields such as Whitebox Fuzz
Testing [28] in discovering test cases for additional privilege cov-
erage. Our needs for privilege coverage are well aligned with the
needs for test coverage by the community at large.
Runtime modes, usability and alert messages: The refer-
ence monitor would support two modes: audit mode (in which
violations are written to a log file) and strict mode (in which vio-
lations produce failstop behavior). The logs produced from audit
mode include rich context, including the call stack and instruction-
level access that produced the violation, which allows an engineer
to discern whether or not to include the missing privilege and how
to extend the testing suite to capture it. A system would typically
be run in audit mode until the rate of violations drops below an
acceptable threshold. Even in strict mode, note that not all viola-
tions would cause the OS to terminate: when acting on behalf of a
program, only the offending system call or process need fail.
Interface Integrity: Our privilege metric identifies a “first or-
der” separation in that it quantifies memory accessibility and the
reachability of function calls. It does not assess indirect privilege
that might come from, for example, an exported getter or setter. Re-
fining privilege metrics to account for such effects, such as making
the weight w(o, op) of a call be a function of the privilege available
to the callee, would be interesting future work.
Correlation of Security and Privilege Metrics: We hypoth-
esize that privilege reduction is strongly correlated with security
improvement (Sec. 4) and provide some evidence that it does (Sec. 2).
Nonetheless, there is a need for a more complete and systematic
characterization of the relationship between privilege separation
and security to refine and validate efforts such as this one and
PM [47].
Dynamically Loaded or Generated Code: In some cases a
static instruction-level CAPMAP will not be adequate to define
privileges: kernels load dynamic kernel modules, application soft-
ware loads dynamically linked libraries, and code can be compiled
dynamically (and compilation may be data-dependent). In these
cases we can identify subjects and objects at a higher-level.
12 CONCLUSION
In this work we conduct a limit study on the privilege separability
of complex software. Our analysis is made possible by µSCOPE, a
framework that includes new models, metrics and algorithms for
exploring the continuum of compartmentalization spaces. We apply
µSCOPE to the Linux kernel and show that orders of magnitude
of privilege separation are possible, how the separability of kernel
objects can be explored and tuned, and that we can automatically
identify important refactorings for further improving separability.
We also highlight the potential for lightweight separation mecha-
nisms to enable greater privilege separation for lower costs. These
results demonstrate the utility of systematic privilege analysis.
ACKNOWLEDGMENTS
This research was funded in part by DARPA contracts HR0011-18-C-
0011 and HR001119S0089-AMP-FP-034; NSF grants CNS-1513687,
TWC-1513854, CNS-1801601, CNS-16-57534, CNS-17-50024 and
307µSCOPE: A Methodology for Analyzing Least-Privilege Compartmentalization in Large Software Artifacts
RAID ’21, October 6–8, 2021, San Sebastian, Spain
CNS-2008867; ERC StG 850868; and ONR grant BAA N00014-17-S-
B010. Any opinions, findings, and conclusions or recommendations
expressed in this material are those of the authors and do not reflect
the official policy or position of the U.S. Government.
REFERENCES
[1] [n.d.]. The Linux Kernel Open Source Project on Open Hub. https://www.
openhub.net/p/linux.
org/index.php/Main_Page.
[2] [n.d.]. SELinux Project. https://selinuxproject.org/.
[3] 2018. Linux Test Project. https://linux-test-project.github.io.
[4] 2018. perf: Linux profiling with performance counters. https://perf.wiki.kernel.
[5] 2018. Phoronix Test Suite. https://www.phoronix-test-suite.com.
[6] Mike Accetta, Robert Baron, William Bolosky, David Golub, Richard Rashid,
Avadis Tevanian, and Michael Young. 1986. Mach: A New Kernel Foundation for
UNIX Development. In Proc. USENIX. 93–112.
[7] Daniel Aloise, Amit Deshpande, Pierre Hansen, and Preyas Popat. 2009. NP-
hardness of Euclidean sum-of-squares clustering. Machine Learning 75, 2 (01
May 2009), 245–248. https://doi.org/10.1007/s10994-009-5103-0
[8] James P. Anderson. 1972. Computer Security Technology Planning Study. Technical
[9] V.R. Basili and B.T. Perricone. 1984. Software Errors and Complexity: An Empirical
Report ESD-TR-73-51. Air Force Electronic Systems Division.
[10] Ian Beer. 2020.
Investigation. Commun. ACM (1984), 42–52.
https://googleprojectzero.blogspot.com/2020/12/an-ios-zero-click-radio-
proximity.html?m=1.
An iOS zero-click radio proximity exploit odyssey.
[11] Simon Biggs, Damon Lee, and Gernot Heiser. 2018. The Jury Is In: Monolithic OS
Design Is Flawed—Microkernel-based Designs Improve Security. In Proceedings
of the ACM Asia-Pacific Workshop on Systems (APSys).
[12] Andrea Bittau, Petr Marchenko, Mark Handley, and Brad Karp. 2008. Wedge:
Splitting Applications into Reduced-Privilege Compartments. In Proceedings of
the 5th USENIX Symposium on Networked Systems Design and Implementation
(NSDI’08). USENIX Association, Berkeley, CA, USA, 309–322.
[13] David Brumley and Dawn Song. 2004. Privtrans: Automatically Partitioning
Programs for Privilege Separation. In Proceedings of the 13th Conference on USENIX
Security Symposium - Volume 13 (SSYM’04). USENIX Association, Berkeley, CA,
USA, 5–5.
[14] Yaohui Chen, Sebassujeen Reymondjohnson, Zhichuang Sun, and Long Lu. 2016.
Shreds: Fine-Grained Execution Units with Private Memory. In IEEE Sympo-
sium on Security and Privacy, SP 2016, San Jose, CA, USA, May 22-26, 2016. IEEE
Computer Society, 56–71. https://doi.org/10.1109/SP.2016.12
[15] Abraham A. Clements, Naif Saleh Almakhdhub, Saurabh Bagchi, and Mathias
Payer. 2018. ACES: Automatic Compartments for Embedded Systems. In 27th
USENIX Security Symposium (USENIX Security 2018). USENIX Association, 65–82.
https://www.usenix.org/conference/usenixsecurity18/presentation/clements
https:
//www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-
32-architectures-software-developer-vol-3a-part-1-manual.pdf
4.10.1 Paging Modes and Control Bits.
[16] Intel Corporation. [n.d.].
[17] Intel Corporation. [n.d.]. Intel 64 and IA-32 Architectures Optimization Reference
Manual.
[18] John Criswell, Andrew Lenharth, Dinakar Dhurjati, and Vikram Adve. 2007.
Secure Virtual Architecture: A Safe Execution Environment for Commodity
Operating Systems. In Proceedings of Twenty-First ACM SIGOPS Symposium on
Operating Systems Principles (SOSP ’07). ACM, New York, NY, USA, 351–366.
https://doi.org/10.1145/1294261.1294295
[19] Nathan Dautenhahn, Theodoros Kasampalis, Will Dietz, John Criswell, and
Vikram Adve. 2015. Nested Kernel: An Operating System Architecture for Intra-
Kernel Privilege Separation. SIGARCH Comput. Archit. News 43, 1 (March 2015),
191–206. https://doi.org/10.1145/2786763.2694386
Linux.
in
https://www.kernel.org/doc/Documentation/security/credentials.txt.
[21] Joe Devietti, Colin Blundell, Milo M. K. Martin, and Steve Zdancewic. 2008.
HardBound: Architectural Support for Spatial Safety of the C Programming
Language. In International Conference on Architectural Support for Programming
Languages and Operating Systems. 103–114. http://acg.cis.upenn.edu/papers/
asplos08_hardbound.pdf
[22] Udit Dhawan, Catalin Hritcu, Raphael Rubin, Nikos Vasilakis, Silviu Chiricescu,
Jonathan M. Smith, Thomas F. Knight, Jr., Benjamin C. Pierce, and André DeHon.
2015. Architectural support for software-defined metadata processing. ACM
SIGARCH Computer Architecture News 43, 1 (2015), 487–502.
[23] Xinshu Dong, Hong Hu, Prateek Saxena, and Zhenkai Liang. 2013. A quanti-
tative evaluation of privilege separation in web browser designs. In European
Symposium on Research in Computer Security. Springer, 75–93.
[24] Petros Efstathopoulos, Maxwell Krohn, Steve VanDeBogart, Cliff Frey, David
Ziegler, Eddie Kohler, David Mazieres, Frans Kaashoek, and Robert Morris. 2005.
Credentials
[20] David
Howells.
[n.d.].
Labels and event processes in the Asbestos operating system. In ACM SIGOPS
Operating Systems Review, Vol. 39. ACM, 17–30.
[25] Kevin Elphinstone and Gernot Heiser. 2013. From L3 to seL4 What Have We
Learnt in 20 Years of L4 Microkernels?. In Proceedings of the ACM Symposium on
Operating Systems Principles (Farminton, Pennsylvania) (SOSP ’13). ACM, New
York, NY, USA, 133–150. https://doi.org/10.1145/2517349.2522720
[26] Ulfar Erlingsson, Martín Abadi, Michael Vrable, Mihai Budiu, and George C.
Necula. 2006. XFI: Software guards for system address spaces. In Proceedings
of the 7th symposium on Operating systems design and implementation. USENIX
Association, 75–88.
[27] Adrien Ghosn, Marios Kogias, Mathias Payer, James R. Larus, and Edouard
Bugnion. 2020. Enclosure: language-based restriction of untrusted libraries.
In Proceedings of the International Conference on Architectural Support for Pro-
gramming Languages and Operating Systems (ASPLOS).
[28] Patrice Godefroid, Michael Y Levin, and David Molnar. 2008. Automated White-
box Fuzz Testing. In The Network and and Distributed System Security Symposium
NDSS.
[29] Khilan Gudka, Robert N.M. Watson, Jonathan Anderson, David Chisnall, Brooks
Davis, Ben Laurie, Ilias Marinos, Peter G. Neumann, and Alex Richardson. 2015.
Clean Application Compartmentalization with SOAAP. In Proceedings of the 22Nd
ACM SIGSAC Conference on Computer and Communications Security (CCS ’15).
ACM, New York, NY, USA, 1016–1031. https://doi.org/10.1145/2810103.2813611
[30] Norm Hardy. 1988. The Confused Deputy (or why capabilities might have been
invented). SIGOPS Operating Systems Review 22, 4 (October 1988), 36–38.
[31] L. Hatton. 1997. Reexamining the fault density component size connection. IEEE
Software 14, 2 (Mar 1997), 89–97. https://doi.org/10.1109/52.582978
[32] M.S. Hecht, M.E. Carson, C.S. Chandersekaran, R.S. Chapman, L.J. Dotterer, V.D.
Gligor, W.D. Jiang, A. Johri, G.L. Luckenbaugh, and N. Vasudevan. 1987. UNIX
without the Superuser. In Proceedings of the Summer 1987 USENIX Conference.
USENIX Association.
[33] Mohammad Hedayati, Spyridoula Gravani, Ethan Johnson, John Criswell,
Michael L. Scott, Kai Shen, and Mike Marty. 2019. Hodor: Intra-Process Isolation
for High-Throughput Data Plane Libraries. In 2019 USENIX Annual Technical
Conference (USENIX ATC 19). 489–504.
[34] Terry Ching-Hsiang Hsu, Kevin Hoffman, Patrick Eugster, and Mathias Payer.
2016. Enforcing Least Privilege Memory Views for Multithreaded Applications. In
Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’16). Association for Computing Machinery, Vienna, Austria, 393–
405. https://doi.org/10.1145/2976749.2978327
[35] Terry Ching-Hsiang Hsu, Kevin Hoffman, Patrick Eugster, and Mathias Payer.
2016. Enforcing Least Privilege Memory Views for Multithreaded Applications.
In ACM Conf on Computer and Communication Security. https://doi.org/10.1145/
2976749.2978327
[36] Paul A. Karger. 1987. Limiting the Damage Potential of Discretionary Trojan
Horses. In 1987 IEEE Symposium on Security and Privacy. IEEE Computer Society,
Los Alamitos, CA, USA, 32. https://doi.org/10.1109/SP.1987.10011
[37] Douglas Kilpatrick. 2003. Privman: A Library for Partitioning Applications. In
Proceedings of the FREENIX Track: 2003 USENIX Annual Technical Conference, June
9-14, 2003, San Antonio, Texas, USA. 273–284.
[38] Gerwin Klein, Kevin Elphinstone, Gernot Heiser, June Andronick, David Cock,
Philip Derrin, Dhammika Elkaduwe, Kai Engelhardt, Rafal Kolanski, Michael
Norrish, et al. 2009. seL4: Formal verification of an OS kernel. In Proceedings of
the ACM SIGOPS 22nd symposium on Operating systems principles. 207–220.
[39] Koen Koning, Xi Chen, Herbert Bos, Cristiano Giuffrida, and Elias Athanasopou-
los. 2017. No Need to Hide: Protecting Safe Regions on Commodity Hardware. In
Proceedings of the Twelfth European Conference on Computer Systems (EuroSys ’17).
ACM, New York, NY, USA, 437–452. https://doi.org/10.1145/3064176.3064217
[40] Andre Konovalov. [n.d.]. Linux kernel: CVE-2017-18344: arbitrary-read vul-
https://www.openwall.com/lists/oss-
nerability in the timer subsystem.
security/2018/08/09/6
18–24. https://doi.org/10.1145/775265.775268
[41] Butler W. Lampson. 1974. Protection. SIGOPS Oper. Syst. Rev. 8, 1 (Jan. 1974),
[42] Wenhao Li, Yubin Xia, Haibo Chen, Binyu Zang, and Haibing Guan. 2015. Re-
ducing World Switches in Virtualized Environment with Flexible Cross-World
Calls. In Proceedings of the 42Nd Annual International Symposium on Com-
puter Architecture (ISCA ’15). ACM, New York, NY, USA, 375–387.
https:
//doi.org/10.1145/2749469.2750406
[43] W. Li, Y. Xia, H. Chen, B. Zang, and H. Guan. 2015. Reducing world switches in
virtualized environment with flexible cross-world calls. In International Sympo-
sium on Computer Architecture (ISCA). 375–387. https://doi.org/10.1145/2749469.
2750406
[44] James Litton, Anjo Vahldiek-Oberwagner, Eslam Elnikety, Deepak Garg, Bobby
Bhattacharjee, and Peter Druschel. 2016. Light-weight Contexts: An OS Abstrac-
tion for Safety and Performance. In Proceedings of the 12th USENIX Conference on
Operating Systems Design and Implementation.
[45] Shen Liu, Gang Tan, and Trent Jaeger. 2017. PtrSplit: Supporting General Pointers
in Automatic Program Partitioning. In Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security (Dallas, Texas, USA) (CCS
308RAID ’21, October 6–8, 2021, San Sebastian, Spain
Roessler and Dautenhahn, et al.
’17). ACM, New York, NY, USA, 2359–2371. https://doi.org/10.1145/3133956.
3134066
[46] Shen Liu, Dongrui Zeng, Yongzhe Huang, Frank Capobianco, Stephen McCamant,
Trent Jaeger, and Gang Tan. 2019. Program-Mandering: Quantitative Privilege
Separation. In Proceedings of the 2019 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’19). Association for Computing Machinery,