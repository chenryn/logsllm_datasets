### 11. Discussion and Future Work

The µSCOPE analysis reveals that the Linux kernel operates with an excessive level of privilege, approximately 25,000 times more than necessary, and has the potential for a significant reduction (up to 500 times) with minimal restructuring and only a 15% overhead. This finding highlights an exciting opportunity, but it also underscores the need for further research to fully realize this potential. Significant contributions are still required to engineer practical solutions.

#### Coverage and Dynamic Analysis
µSCOPE employs dynamic analysis to collect and analyze runtime privileges and their usage counts. Our results, as shown in Figure 4, indicate that the coverage is stable across our test suites and kernel workloads, suggesting comprehensive analysis for the studied configuration. However, dynamic analysis inherently has limitations in coverage. As with other studies [15], combining our framework with static analysis could create a hybrid design, potentially improving overall coverage. The difference in PSmin (minimum privilege set) between static and dynamic analysis would be an interesting area for future exploration. 

Most mechanisms will introduce some generalization when applying a CAPMAP, such as per-function or per-module access generalizations. It is unlikely that data will only be accessed in uncovered passes, and implicit generalization will naturally include some potentially missed accesses. Omissions identified by µSCOPE can be used to enhance the quality of kernel test suites [3], and µSCOPE can be integrated with related fields like Whitebox Fuzz Testing [28] to discover additional test cases for better privilege coverage. Our needs for privilege coverage align well with the broader community's needs for test coverage.

#### Runtime Modes, Usability, and Alert Messages
The reference monitor in µSCOPE supports two modes: audit mode, where violations are logged, and strict mode, where violations result in fail-stop behavior. Audit mode logs provide rich context, including call stacks and instruction-level access details, which help engineers decide whether to include missing privileges and how to extend the testing suite. Typically, a system would run in audit mode until the violation rate drops below an acceptable threshold. Even in strict mode, not all violations would cause the OS to terminate; only the offending system call or process would fail.

#### Interface Integrity
Our privilege metric quantifies "first-order" separation, focusing on memory accessibility and function call reachability. It does not account for indirect privileges, such as those from exported getters or setters. Future work could refine these metrics to consider such effects, for example, by making the weight \( w(o, op) \) of a call a function of the callee's available privileges.

#### Correlation of Security and Privilege Metrics
We hypothesize that reducing privilege is strongly correlated with security improvements (Section 4), and we provide some evidence supporting this (Section 2). However, a more complete and systematic characterization of the relationship between privilege separation and security is needed to refine and validate efforts like ours and PM [47].

#### Dynamically Loaded or Generated Code
In some scenarios, a static instruction-level CAPMAP may not be sufficient to define privileges. Kernels load dynamic modules, applications use dynamically linked libraries, and code can be compiled at runtime (possibly data-dependent). In these cases, subjects and objects can be identified at a higher level.

### 12. Conclusion

This study explores the privilege separability of complex software using µSCOPE, a framework that includes new models, metrics, and algorithms for analyzing compartmentalization. Applying µSCOPE to the Linux kernel, we demonstrate that orders of magnitude of privilege separation are possible, and we show how to explore and tune the separability of kernel objects. We also identify key refactorings for further improving separability. Additionally, we highlight the potential for lightweight separation mechanisms to achieve greater privilege separation at lower costs. These results underscore the utility of systematic privilege analysis.

### Acknowledgments

This research was partially funded by DARPA contracts HR0011-18-C-0011 and HR001119S0089-AMP-FP-034; NSF grants CNS-1513687, TWC-1513854, CNS-1801601, CNS-16-57534, CNS-17-50024, and CNS-2008867; ERC StG 850868; and ONR grant BAA N00014-17-S-B010. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not reflect the official policy or position of the U.S. Government.

### References

[References remain unchanged]

---

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the text is more structured and easier to follow.