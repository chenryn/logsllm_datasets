printf(" Distance from origin = %lu instructions\n",
(ppcRegs32->ppcPC - vm_page_size) >> 2);
printf(" PC = %p (%lu)\n",
(void *)ppcRegs32->ppcPC, ppcRegs32->ppcPC);
printf(" Instruction at PC = %#08x\n",
((u_int32_t *)(guestTextPage))[(ppcRegs32->ppcPC - vm_page_size) >> 2]);
printf(" CR = %#08lx\n"
" ", ppcRegs32->ppcCR);
prbits32(ppcRegs32->ppcCR);
printf(" LR = %#08lx (%lu)\n",
ppcRegs32->ppcLR, ppcRegs32->ppcLR);
printf(" MSR = %#08lx\n"
" ", ppcRegs32->ppcMSR);
prbits32(ppcRegs32->ppcMSR);
printf(" return_code = %#08lx (%lu)\n",
vmmUState->return_code, vmmUState->return_code);
return_params32 = vmmUState->vmmRet.vmmrp32.return_params;
for (i = 0; i ppcGPRs[j * 2 + i]);
}
printf("\n");
}
// Tear down the virtual machine ... that's all for now
kr = my_vmm_dispatch(kVmmTearDownContext, vmmIndex);
OUT_ON_MACH_ERROR("vmm_init_context", kr);
Printf("Virtual machine context torn down\n");
out:
if (vmmUStatePage)
(void)vm_deallocate(myTask, vmmUStatePage, vm_page_size);
if (guestTextPage)
(void)vm_deallocate(myTask, guestTextPage, vm_page_size);
if (guestStackPage)
(void)vm_deallocate(myTask, guestStackPage, vm_page_size);
exit(kr);
}
Virtual PC
The Virtual PC software for Mac OS X is implemented using the VMM facility. In the
xnu kernel source corresponding to Mac OS X 10.0, the VMM source is copyrighted to
Connectix Corporation, the developer of Virtual PC. Connectix was later acquired by
Microsoft.
The code in Figure 651 provides two demonstrations, demo 0 and demo 1. Demo 0 calls
initGuestText_Dummy() to populate the VM's text page with a contrived sequence of instructions
terminated by an illegal instruction. The first few words of the page are as follows, assuming the page
starts at virtual address addr:
addr+00 addi r10,0,4 ; load the value '4' in r10
addr+04 addi r11,0,5 ; load the value '5' in r11
addr+08 ; branch to addr+16
addr+12 0xdeadbeef ; no such instruction
addr+16 add r12,r11,r11 ; place (r10 + r11) in r12
addr+20 0xfeedface ; no such instruction
The VM bypasses the first illegal instruction in the sequence by branching over it. When execution
reaches the second illegal instruction, control returns back to our host program. Alternatively, you can
make the last instruction be an infinite loop, in which case the VM will run until interrupted.
When vmachmon32 finishes running demo 0, the VM's GPR10, GPR11, and GPR12 should contain
the values 4, 5, and 9, respectively. Moreover, the program counter should contain addr+20, where
addr is the starting address of the guest's text page. Figure 652 shows the result of running demo 0.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 132 of 137
Figure 652. Result of running a sequence of machine instructions in a VM using the vmachmon32 program
$ gcc -Wall -o vmachmon32 vmachmon32.c
$ ./vmachmon32
usage: vmachmon32 
Supported demos:
ID Description
0 executes a few hand-crafted instructions in a VM
1 executes a recursive factorial function in a VM
$ ./vmachmon32 0
Vmm> Mac OS X virtual machine monitor (version 1.7)
Vmm> Vmm features:
LittleEndian = Yes
Stop = Yes
ExtendedMapping = Yes
ListMapping = Yes
FastAssist = Yes
XA = Yes
SixtyFourBit = No
MultAddrSpace = No
GuestShadowAssist = Yes
GlobalMappingAssist = No
HostShadowAssist = No
MultAddrSpaceAssist = No
Vmm> Page size is 4096 bytes
Vmm> Allocated page-aligned memory for virtual machine user state
Vmm> Allocated page-aligned memory for guest's text
Vmm> Allocated page-aligned memory for guest's stack
Vmm> New virtual machine context initialized, index = 1
Vmm> Guest virtual machine PC set to 0x00001000
Vmm> Guest virtual machine SP set to 0x00002f20
Vmm> Mapping guest stack page
Vmm> Fabricated instructions for executing in the guest virtual machine
Vmm> Mapping guest text page and switching to guest virtual machine
*** vmm_map_execute32 (os/kern) not receiver
Vmm> Returned to vmm
Vmm> Processor state:
Distance from origin = 5 instructions
PC = 0x00001014 (4116)
Instruction at PC = 0x00000060
CR = 0x00000000
0000000000000000 0000000000000000
LR = 0x00000000 (0)
MSR = 0x0008d030
0000000000001000 1101000000110000
return_code = 0x00000007 (7)
return_params32[0] = 0x00001000 (4096)
return_params32[1] = 0x40000000 (1073741824)
return_params32[2] = 0x00000000 (0)
return_params32[3] = 0x00000000 (0)
GPRs:
r0 = 0x00000000 r1 = 0x00002f20
r2 = 0x00000000 r3 = 0x00000000
r4 = 0x00000000 r5 = 0x00000000
r6 = 0x00000000 r7 = 0x00000000
r8 = 0x00000000 r9 = 0x00000000
r10 = 0x00000004 r11 = 0x00000005
r12 = 0x00000009 r13 = 0x00000000
r14 = 0x00000000 r15 = 0x00000000
r16 = 0x00000000 r17 = 0x00000000
r18 = 0x00000000 r19 = 0x00000000
r20 = 0x00000000 r21 = 0x00000000
r22 = 0x00000000 r23 = 0x00000000
r24 = 0x00000000 r25 = 0x00000000
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 133 of 137
r26 = 0x00000000 r27 = 0x00000000
r28 = 0x00000000 r29 = 0x00000000
r30 = 0x00000000 r31 = 0x00000000
Vmm> Virtual machine context torn down
As noted in the program's comments in Figure 651, compiling vmachmon32.c requires that you copy
osfmk/ppc/vmachmon.h from the kernel source tree to the current directory (with respect to
vmachmon32.c). Additionally, the source line that includes  must be commented
out in vmachmon.h.
Demo 1 populates the guest's text page by calling initGuestText_Factorial(), which copies
machine instructions for a recursive factorial function into the page and populates the LR so that the
function returns to an address containing an illegal instruction. The function takes a single argument
in GPR3: the number whose factorial to compute. It returns the computed factorial in GPR3. Again,
we will verify the program's working by examining the register dump at the end of the program's
execution. Figure 653 shows the result of running demo 1. The vmachmon32 code shown in Figure
651 passes 10 as an argument to the factorial function. Correspondingly, GPR3 should contain
0x00375f00 as the result.
Figure 653. Result of running a recursive factorial function within a VM using the vmachmon32 program
$ ./vmachmon32 1
Vmm> Mac OS X virtual machine monitor (version 1.7)
...
Vmm> Returned to vmm
Vmm> Processor state:
Distance from origin = 1023 instructions
PC = 0x00001ffc (8188)
Instruction at PC = 0x00000000
CR = 0x00000002
0000000000000000 0000000000000010
LR = 0x00001ffc (8188)
MSR = 0x0008d030
0000000000001000 1101000000110000
return_code = 0x00000007 (7)
return_params32[0] = 0x00001000 (4096)
return_params32[1] = 0x40000000 (1073741824)
return_params32[2] = 0x00000000 (0)
return_params32[3] = 0x00000000 (0)
GPRs:
r0 = 0x00001ffc r1 = 0x00002f20
r2 = 0x00058980 r3 = 0x00375f00
r4 = 0x00000000 r5 = 0x00000000
...
Vmm> Virtual machine context torn down
6.10. Compiling the Kernel
In this section, we will briefly discuss the kernel compilation procedure in Mac OS X. Depending on
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 134 of 137
the Darwin release, you might need the following Darwin packages to compile the xnu kernel:
 bootstrap_cmds
 cctools
 IOKitUser
 kext_tools
 Libstreams
 xnu
Mac OS X does not have a publicly well-defined kernel compilation procedure. Compiling the kernel
requires certain tools and libraries that are part of Darwin but are not installed by default. These
prerequisites must be compiled from source. However, they are few in number, and it is
straightforward to compile them. Moreover, depending on the specific Darwin release you use, you
may require more or fewer steps than the ones described in this section.
6.10.1. Retrieving Prerequisite Packages
We begin by retrieving and unpacking the required package archives.[20] Let us assume all package
archives have been expanded within the /work/darwin/ directory. Each package will expand into a
directory whose name includes the package's name and version. We will omit the version number in
the examples in this section.
[20] On some Mac OS X versions, the header file ar.h may be missing from the Kernel
framework's Headers/ subdirectory. If this is the case, copy /usr/include/ar.h
to /System/Library/Frameworks/Kernel.framework/Headers/.
Compiler Version Dependency
Mac OS X releases have typically included two versions of the GNU C compiler: a
default version (the gcc package) and another version for compiling the operating system
(gcc_os). For example, on Mac OS X 10.4, the kernel is compiled using GCC 3.3,
whereas the default compiler is GCC 4.0.
You can switch between compiler versions through the gcc_select command-line tool.
Before compiling the kernel or the prerequisite packages, you should switch to the
kernel-specific GNU C compiler for your system.
6.10.2. Compiling Prerequisite Packages
Change directory to bootstrap_cmds/relpath.tproj/, and run make to compile and install the
relpath tool, which calculates the relative path from a given directory to a given path.
$ cd /work/darwin/bootstrap_cmds/relpath.tproj
$ sudo make install
...
$ relpath /usr/local/ /usr/local/bin/relpath
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 135 of 137
bin/relpath
relpath is used in various "doconf" shell scripts in the kernel source tree to set up build paths during
the precompilation ("config") stage of the kernel build process.
The tools and libraries that you compile and install from these support packages are installed by
default in the /usr/local/ directory hierarchy. You must ensure that /usr/local/ is in your shell's
path. A benefit of confining this software to /usr/local/ is that you will not accidentally overwrite
any standard files belonging to the operating system.
The rest of the packages are needed to satisfy the following requirements:
Compilation of the libsa in-kernel library
Generation of symbol sets for various kernel components after compilation finishesthis requires
the kextsymboltool program
Figure 654 shows dependencies between the packages. libsa links against a static kernel link editor
library (libkld.a), which comes from the cctools package. libkld.a in turn depends on the
Libstreams package, the libmacho library, and the libstuff library. libmacho and libstuff come from
the cctools package. libsa also requires a tool called seg_hack, which can change all segment names
in a Mach-O file to the one specified on the command line. The kernel compilation process uses
seg_hack to change segment names to __KLD while compiling libsa. We can satisfy these
dependencies by appropriately traversing the graph shown in Figure 654.
Figure 654. Software dependencies in the kernel build process
[View full size image]
Change directory to the Libstreams package, and run make to compile and copy the required headers
and libraries to the /usr/local/ hierarchy.
$ cd /work/darwin/Libstreams/
$ sudo make install
...
The components within the cctools package must be compiled in a particular sequence since they
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 136 of 137
have internal dependencies.
Change directory to cctools/libstuff/, and run make. No installation is required since we need the
result of this build only to compile other components in this package.
Change directory to cctools/misc/, and run the following commands, which compile and install
seg_hack in /usr/local/bin/ with the appropriate ownership and permissions.
$ make seg_hack.NEW
$ sudo install -o root -g wheel -m 0755 seg_hack.NEW /usr/local/bin/seg_hack
Change directory to cctools/libmacho/, and run make. Again, no installation is required.
Change directory to cctools/ld/, and run the following commands.
$ make kld_build
$ sudo install -o root -g wheel -m 0755 static_kld/libkld.a /usr/local/lib/
$ sudo ranlib /usr/local/lib/libkld.a
Finally, we need to compile kextsymboltool, which the build process uses for generating symbol
sets from compiled kernel components. BSDKernel.symbolset, IOKit.symbolset,
Libkern.symbolset, and Mach.symbolset are examples of the resultant files that exist in the BUILD
directory hierarchy of a compiled kernel source tree. These Mach-O relocatable object files contain
nothing besides a symbol table, for example:
$ cd /work/darwin/xnu/BUILD/obj/DEBUG_PPC/
$ file Mach.symbolset
Mach.symbolset: Mach-O object ppc
$ otool -l Mach.symbolset
Mach.symbolset:
Load command 0
cmd LC_SYMTAB
cmdsize 24
symoff 52
nsyms 2652
stroff 31876
strsize 49748
$ cd /work/darwin/xnu/BUILD/obj/RELEASE_PPC/
$ otool -l Mach.symbolset
Mach.symbolset:
Load command 0
cmd LC_SYMTAB
cmdsize 24
symoff 52
nsyms 52
stroff 676
strsize 1128
The source for kextsymboltool is in the kext_tools package. However, its compilation depends on
header files from the IOKitUser and cctools packages. Change directory to kext_tools/, and run
the following commands.
$ mkdir IOKit
$ ln -s /work/darwin/IOKitUser/kext.subproj IOKit/kext
$ gcc -I /work/darwin/cctools/include -I . -o kextsymboltool kextsymbool.c
$ sudo install -o root -g wheel -m 0755 kextsymboltool /usr/local/bin/
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 137 of 137
6.10.3. Compiling the xnu Package
At this point, we are ready to compile the kernel. Change directory to xnu/, and run the following
command to initiate kernel compilation.
$ make exporthdrs && make all
This will create a standard (RELEASE configuration) kernel, which will be available as
xnu/BUILD/obj/RELEASE_PPC/mach_kernel at the end of the compilation. Alternative build
configurations include DEBUG and PROFILE, which yield debugging and profiling versions,
respectively, of the kernel. The following command will compile a debug version, which will be
available as xnu/BUILD/obj/DEBUG_PPC/mach_kernel at the end of the compilation: