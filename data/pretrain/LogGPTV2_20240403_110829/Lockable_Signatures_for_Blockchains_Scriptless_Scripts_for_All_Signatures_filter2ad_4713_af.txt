and
(cid:17)
to Pi.
, tx pay,i
(cid:96)kn−1 := Lock(sk n−1, tx pay,n−1, sk n, tx pay,n) to Pn, where tx pay,n is some message known to P0 and Pn and sk n is a
secret key shared among P0, Pn+1 and Pn.
Payment Release Phase
The sender (parties P0, Pn+1) initiates the payment release by jointly generating σn ← ΠDS .Sign(sk n, tx pay,n) with Pn via
the MPC protocol Γ. Parties Pi for i ∈ [n, 2] do the following:
1) Release the locks by computing σi−1 ← Unlock (3-PCi, tx pay,i, σi, 3-PCi−1, tx pay,i−1(cid:96)ki−1).
2) Store (tx Setup,i−1, σs,i−1, tx pay,i−1, σi−1) to post on the blockchain if the case arises.
Fig. 7: Generic Payment Channel Network Protocol run between parties P1, . . . , Pn
E. On the Privacy our PCN Protocols
V I . I M P L E M E N TAT I O N A N D E F F I C I E N C Y A N A LY S I S
In both of our PCN protocols, the keys involved in the
same payment path are not correlated to the eyes of an external
observer. Thus, they achieve the same notion of on-chain privacy
as in existing proposals based on scriptless scripts [3]. For off-
chain privacy, our generic protocol reveals to the intermediate
node Pi the identity of (i) the sender P0, (ii) its neighbours Pi−1
and Pi+1, and (iii) the neighbours’ neighbours Pi−2 and Pi+2,
in that session. On the other hand, in our BLS-based protocol
the corrupted intermediate users only learn the identities of the
sender and of the direct neighbours (same as in [3]).
We implemented our BLS-based PCN protocol and we
compare its performance against the Schnorr and ECDSA based
PCN protocols from [3].
Instantiations. The three PCN protocols under consideration
make use of a NIZK (PNIZK,LDL,VNIZK,LDL) for LDL which
we instantiate with the Schnorr identiﬁcation scheme [53] and
make non-interactive using the Fiat-Shamir transformation [54].
While this scheme is not known to be UC-secure (the classical
proof [55] is in the stand-alone model) we view this as a
reasonable compromise in favor of a more efﬁcient protocol.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
948
N U M B E R O F C A L L S T O T H E A L G O R I T H M S O F T H E N I Z K F O R LDL A N D O F T H E B L S S I G N AT U R E S C H E M E F O R E A C H PA R T Y D U R I N G
PAY M E N T S E T U P P H A S E ( F I G U R E 1 1 ) . H E R E P1 ’ S O P E R AT I O N S I N C L U D E T H O S E O F P0 A N D Pn+1 .
TABLE I
Party
P1
Pi, i ∈ [2, n]
PNIZK,LDL
n + 1
2
VNIZK,LDL
2n
4
ΠBLS.KGen ΠBLS.Sign ΠBLS.Vf
n − 1
n + 1
2
2
n
4
ΠBLS.Agg ΠBLS.VfAgg
0
2
0
0
We further note that the same trade-off is common to other
works in the literature (e.g. [3]).
Efﬁciency and Comparison. We consider an n party pay-
ment path for the PCN. Given that
the PCN protocols
of [3] also follows a similar structure, we compare the
timing cost of the operations performed in each phase:
The payment setup, payment lock, and payment release. We
measured the costs on a local machine with 1,8 GHz
Octa-Core Intel Core i7-8550U processor and 16
GB 2133 MHz LPDDR3 memory. We used the python li-
braries charm [56] and BLS signature library blspy [57]
for evaluating the ECDSA/Schnorr-based PCN protocol [3]
and our BLS-based PCN protocol, respectively. We ran the
operations 10K times and the measurements (taken as the
average) are reported in Table II. From [2], [3], we can also
see that multi-hop HTLC based payments where n = 5, takes
about 5 seconds to complete with a communication cost of 17
MB. This is much more expensive than the scriptless variants.
For extensive comparisons with non-private PCN protocols and
HTLC based protocols we refer the reader to [3].
In measuring the efﬁciency of the payment setup phase we
also consider the time to sign a revoke transaction tx revoke,i
for every tx Setup,i (recall that tx revoke,i was used to realize the
expiry of the 3-party channel 3-PCi). Notice that the payment
lock phase is interactive, with 3 rounds of messages being
sent to party Pi who sets the lock (cid:96)ki−1. While we do not
consider the network latency in our measurements, this does
not constitute the efﬁciency bottleneck of our approach.
TABLE II
C O M PA R I S O N O F T H E C O M P U TAT I O N A L T I M E A N D
C O M M U N I C AT I O N C O S T S A C R O S S P C N P R O T O C O L S , F O R A PAT H
L E N G T H O F n. T I M E S A R E R E P O R T E D I N M I L L I S E C O N D S ( M S )
A N D C O M M U N I C AT I O N C O S T S A R E R E P O R T E D I N B Y T E S .
Phase
Setup
Lock
Release
Resource
Time
Comm.
Time
Comm.
Time
Comm.
Schnorr [3]
ECDSA [3]
1.75 n
128 n
4.58 (n − 1)
256 (n − 1)
0.0009 n
0
1.91 n
128 n
38.81 (n − 1)
416 (n − 1)
1.95 n
0
Our BLS
19.43 n
242 n
13.78 (n − 1)
196 (n − 1)
0.39 n
0
The more expensive setup phase for our BLS-based PCN
protocol comes from the generation of a 3-party local channel.
We provide a more detailed overview of the operations
that constitute the setup phase and their computational costs
in Table I. For the lock phase, our BLS-based protocol performs
signiﬁcantly better when compared to the ECDSA/Schnorr
variants: The signature and key aggregation property of BLS
signatures help signiﬁcantly reduce the communication costs,
i
while the uniqueness property of the signatures help in saving
computation, as we discuss below.
Optimizations. We observe that, in the execution of two
consequent locking phase, each intermediate party Pi has
to generate two pairs signatures σ(i)
i−1 on tx Pay,i−1 and σ(i)
on tx Pay,i, respectively. Since BLS signatures are unique, we
can safely generate each signature exactly once. Furthermore,
reduce the cost of the sender by half, leveraging a similar
observation. A naive implementation of our protocol (Figure 11)
would require the sender to run ΠBLS.Sign and ΠBLS.Agg, 2n
times each, twice for each lock, during the lock phase. However,
since the sender has to send signatures on the same transaction
twice with respect to the same secret key, he only needs to run
the signing algorithm once and re-send the same signature. For
additional clarity, we report the computation cost in the payment
lock phase in terms of the number of signature operations of
a BLS signature in Table III.
N U M B E R O F C A L L S T O T H E A L G O R I T H M S O F T H E B L S
TABLE III
S I G N AT U R E S C H E M E F O R E A C H PA R T Y D U R I N G PAY M E N T L O C K
P H A S E ( F I G U R E 1 1 ) . H E R E P1 ’ S O P E R AT I O N S I N C L U D E T H O S E
O F P0 A N D Pn+1 .
Party
P1
Pi, i ∈ [2, n]
ΠBLS.Sign ΠBLS.Vf
n + 1
2
0
2
n − 1
2
ΠBLS.Agg ΠBLS.VfAgg
0
1
V I I . C O N C L U S I O N
In this work we introduced the notion of lockable signatures
as the cornerstone to construct PCNs. As a result we obtain a
PCN protocol that does not require any special scripts and is
compatible with any signature scheme. Our approach expands
the scope of PCNs to signature schemes with extra properties
(e.g. aggregatable, post-quantum secure, etc.) and facilitates
payments across different chains. Our BLS-based PCN protocol
is the ﬁrst that is fully compatible with the BLS signature
scheme and makes lightweight use of cryptographic tools, thus
offering competitive performances. As an exciting next step,
we plan to explore the large scale adoption of our BLS-based
construction as to study the beneﬁts offered by the signature
aggregation in the context of PCNs.
A C K N O W L E D G M E N T S
The work was also partially supported by the Deutsche
Forschungsgemeinschaft (DFG – German Research Foundation)
under SCHR 1415/4-1, and by the state of Bavaria at the
Nuremberg Campus of Technology (NCT). The authors wish
to thank Sebastian Faust, Kristina Hostakova and Siavash Riahi
for insightful comments on an earlier draft of this work.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:49 UTC from IEEE Xplore.  Restrictions apply. 
949
R E F E R E N C E S
[1]
J. Poon and T. Dryja, The bitcoin lightning network:
Scalable off-chain instant payments, 2016.
[2] G. Malavolta, P. Moreno-Sanchez, A. Kate, M. Maffei,
and S. Ravi, “Concurrency and privacy with payment-
channel networks,” in ACM CCS 2017, B. M. Thuraising-
ham, D. Evans, T. Malkin, and D. Xu, Eds., ACM Press,
2017, pp. 455–471. D O I: 10.1145/3133956.3134096.
[3] G. Malavolta, P. Moreno-Sanchez, C. Schneidewind,
A. Kate, and M. Maffei, “Anonymous multi-hop locks
for blockchain scalability and interoperability,” in
NDSS 2019, The Internet Society, Feb. 2019.
[4] C. Egger, P. Moreno-Sanchez, and M. Maffei, “Atomic
multi-channel updates with constant collateral in bitcoin-
compatible payment-channel networks,” in ACM CCS
2019, L. Cavallaro, J. Kinder, X. Wang, and J. Katz,
Eds., ACM Press, Nov. 2019, pp. 801–815. D O I: 10.
1145/3319535.3345666.
[5] Lightning network, https://lightning.network/.
[6] Raiden network, https://raiden.network/.
[7] Payment channels in ripple, https://xrpl.org/use-payment-
channels.html.
[8] R. W. F. Lai, V. Ronge, T. Rufﬁng, D. Schröder, S. A. K.
Thyagarajan, and J. Wang, “Omniring: Scaling private
payments without trusted setup,” in ACM CCS 2019,
L. Cavallaro, J. Kinder, X. Wang, and J. Katz, Eds., ACM
Press, Nov. 2019, pp. 31–48. D O I: 10.1145/3319535.
3345655.
[9] A. Poelstra, Mimblewimble, https://download.wpsoftware.
net/bitcoin/wizardry/mimblewimble.pdf.
[10] D. Schwartz, N. Youngs, A. Britto, et al., “The ripple
protocol consensus algorithm,” Ripple Labs Inc White
Paper, vol. 5, no. 8, 2014.
[11] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers,
E. Tromer, and M. Virza, “Zerocash: Decentralized
anonymous payments from bitcoin,” in 2014 IEEE
Symposium on Security and Privacy, IEEE Computer
Society Press, May 2014, pp. 459–474. D O I: 10.1109/
SP.2014.36.
[12] Scriptless scripts, https://tlu.tarilabs.com/cryptography/
scriptless-scripts/introduction-to-scriptless-scripts.html.
[13] M. F. Esgin, O. Ersoy, and Z. Erkin, Post-quantum adap-
tor signatures and payment channel networks, Cryptology
ePrint Archive, Report 2020/845, https://eprint.iacr.org/
2020/845, 2020.
[14] E. Tairi, P. Moreno-Sanchez, and M. Maffei, Post-
quantum adaptor signature for privacy-preserving off-
chain payments, Cryptology ePrint Archive, Report
2020/1345, https://eprint.iacr.org/2020/1345, 2020.
[15] Chia network faq, https://www.chia.net/faq/.
[16] Pragmatic signature aggregation with bls, https : / /
ethresear.ch/t/pragmatic- signature- aggregation- with-
bls/2105.
[17] D. Boneh, B. Lynn, and H. Shacham, “Short signatures
from the Weil pairing,” in ASIACRYPT 2001, C. Boyd,
Ed., ser. LNCS, vol. 2248, Springer, Heidelberg, Dec.
2001, pp. 514–532. D O I: 10.1007/3-540-45682-1_30.
[18] D. Boneh, M. Drijvers, and G. Neven, “Compact multi-
signatures for smaller blockchains,” in ASIACRYPT 2018,
Part II, T. Peyrin and S. Galbraith, Eds., ser. LNCS,
vol. 11273, Springer, Heidelberg, Dec. 2018, pp. 435–464.
D O I: 10.1007/978-3-030-03329-3_15.
[19] L. Ducas, A. Durmus, T. Lepoint, and V. Lyuba-
shevsky, “Lattice signatures and bimodal Gaussians,”
in CRYPTO 2013, Part I, R. Canetti and J. A. Garay,
Eds., ser. LNCS, vol. 8042, Springer, Heidelberg, Aug.
2013, pp. 40–56. D O I: 10.1007/978-3-642-40041-4_3.
[20] W. A. A. Torres, R. Steinfeld, A. Sakzad, J. K. Liu, V.
Kuchta, N. Bhattacharjee, M. H. Au, and J. Cheng, “Post-
quantum one-time linkable ring signature and application
to ring conﬁdential transactions in blockchain (lattice
ringct v1. 0),” in Australasian Conference on Information
Security and Privacy, Springer, 2018, pp. 558–576.
[21] L. Ducas, E. Kiltz, T. Lepoint, V. Lyubashevsky,
P. Schwabe, G. Seiler, and D. Stehlé, “CRYSTALS-
Dilithium: A lattice-based digital signature scheme,”
IACR TCHES, vol. 2018, no. 1, pp. 238–268, 2018, https:
//tches.iacr.org/index.php/TCHES/article/view/839,
I S S N: 2569-2925. D O I: 10.13154/tches.v2018.i1.238-
268.
[22] D. J. Bernstein, A. Hülsing, S. Kölbl, R. Niederhagen,
J. Rijneveld, and P. Schwabe, “The sphincs+ signature
framework,” in Proceedings of the 2019 ACM SIGSAC
Conference on Computer and Communications Security,
2019, pp. 2129–2146.
[23] From post-quantum cryptography to post-quantum
blockchains and cryptocurrencies: An introduction,
https : / / medium . com / abelian / from - post - quantum -
cryptography - to - post - quantum - blockchains - and -
cryptocurrencies-an-introduction-eb0b50ed129a.
[24] Understanding serenity, https://blog.ethereum.org/2015/
12/24/understanding-serenity-part-i-abstraction/.
[25] Hcash, https://h.cash/.
[26] Zcash faq, https://z.cash/support/faq/.
[27] R. Cleve, “Limits on the security of coin ﬂips when half
the processors are faulty (extended abstract),” in 18th
ACM STOC, ACM Press, May 1986, pp. 364–369. D O I:
10.1145/12130.12168.
[28] M. Green and I. Miers, “Bolt: Anonymous payment
channels for decentralized currencies,” in ACM CCS
2017, B. M. Thuraisingham, D. Evans, T. Malkin, and
D. Xu, Eds., ACM Press, 2017, pp. 473–489. D O I: 10.
1145/3133956.3134093.
J. Kilian, “A note on efﬁcient zero-knowledge proofs
and arguments (extended abstract),” in 24th ACM STOC,
ACM Press, May 1992, pp. 723–732. D O I: 10.1145/
129712.129782.
[29]
[30] S. Micali, “CS proofs (extended abstracts),” in 35th