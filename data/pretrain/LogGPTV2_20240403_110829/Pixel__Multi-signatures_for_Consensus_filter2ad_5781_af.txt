tine agreements for cryptocurrencies. In Proceedings of
the 26th Symposium on Operating Systems Principles,
SOSP ’17, pages 51–68, New York, NY, USA, 2017.
ACM.
[33] Felix Günther, Britta Hale, Tibor Jager, and Sebastian
Lauer. 0-RTT key exchange with full forward secrecy. In
Jean-Sébastien Coron and Jesper Buus Nielsen, editors,
EUROCRYPT 2017, Part III, volume 10212 of LNCS,
pages 519–548. Springer, Heidelberg, April / May 2017.
[34] Timo Hanke, Mahnush Movahedi, and Dominic
Dﬁnity technology overview series,
Williams.
consensus system, 2018.
[35] K. Itakura and K. Nakamura. A public-key cryptosystem
suitable for digital multisignatures. Technical report,
NEC Research and Development, 1983.
[36] Gene Itkis and Leonid Reyzin. Forward-secure signa-
tures with optimal signing and verifying. In Joe Kilian,
editor, CRYPTO 2001, volume 2139 of LNCS, pages
332–354. Springer, Heidelberg, August 2001.
[37] Thomas Kerber, Aggelos Kiayias, Markulf Kohlweiss,
and Vassilis Zikas. Ouroboros crypsinous: Privacy-
preserving proof-of-stake. In IEEE Symposium on Secu-
rity and Privacy SP, pages 157–174, 2019.
[42] Derek Leung, Adam Suhl, Yossi Gilad, and Nickolai
Zeldovich. Vault: Fast bootstrapping for the algorand
cryptocurrency. In 26th Annual Network and Distributed
System Security Symposium, NDSS 2019, San Diego,
California, USA, February 24-27, 2019, 2019.
[43] Steve Lu, Rafail Ostrovsky, Amit Sahai, Hovav
Shacham, and Brent Waters.
Sequential aggregate
signatures and multisignatures without random oracles.
In Serge Vaudenay, editor, EUROCRYPT 2006, volume
4004 of LNCS, pages 465–485. Springer, Heidelberg,
May / June 2006.
[44] Changshe Ma, Jian Weng, Yingjiu Li, and Robert H.
Deng. Efﬁcient discrete logarithm based multi-signature
scheme in the plain public key model. Des. Codes
Cryptography, 54(2):121–133, 2010.
[45] Di Ma and Gene Tsudik. Forward-secure sequential
aggregate authentication. In 2007 IEEE Symposium on
Security and Privacy (S&P 2007), pages 86–91. IEEE
Computer Society, 2007.
[46] Tal Malkin, Daniele Micciancio, and Sara K. Miner. Ef-
ﬁcient generic forward-secure signatures with an un-
bounded number of time periods.
In Lars R. Knud-
sen, editor, EUROCRYPT 2002, volume 2332 of LNCS,
pages 400–417. Springer, Heidelberg, April / May 2002.
[47] Silvio Micali. ALGORAND: the efﬁcient and demo-
cratic ledger. CoRR, abs/1607.01341, 2016.
[38] Thomas Kerber, Markulf Kohlweiss, Aggelos Kiayias,
and Vassilis Zikas. Ouroboros crypsinous: Privacy-
preserving proof-of-stake. Cryptology ePrint Archive,
Report 2018/1132, 2018.
https://eprint.iacr.
org/2018/1132.
[48] Silvio Micali, Kazuo Ohta, and Leonid Reyzin.
Accountable-subgroup multisignatures: Extended ab-
stract. In Michael K. Reiter and Pierangela Samarati,
editors, ACM CCS 2001, pages 245–254. ACM Press,
November 2001.
[39] Aggelos Kiayias, Alexander Russell, Bernardo David,
and Roman Oliynykov. Ouroboros: A provably secure
proof-of-stake blockchain protocol. In Jonathan Katz
and Hovav Shacham, editors, CRYPTO 2017, Part I,
volume 10401 of LNCS, pages 357–388. Springer, Hei-
delberg, August 2017.
[40] Eleftherios Kokoris-Kogias, Philipp Jovanovic, Nicolas
Gailly, Ismail Khofﬁ, Linus Gasser, and Bryan Ford.
Enhancing bitcoin security and performance with strong
consistency via collective signing. In Thorsten Holz and
Stefan Savage, editors, USENIX Security 2016, pages
279–296. USENIX Association, August 2016.
[41] Hugo Krawczyk. Simple forward-secure signatures
from any signature scheme. In Dimitris Gritzalis, Sushil
Jajodia, and Pierangela Samarati, editors, ACM CCS
2000, pages 108–115. ACM Press, November 2000.
[49] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic
cash system,” http://bitcoin.org/bitcoin.pdf, 2008.
[50] Kazuo Ohta and Tatsuaki Okamoto. A digital multisig-
nature scheme based on the Fiat-Shamir scheme.
In
Hideki Imai, Ronald L. Rivest, and Tsutomu Matsumoto,
editors, ASIACRYPT’91, volume 739 of LNCS, pages
139–148. Springer, Heidelberg, November 1993.
[51] Rafael Pass and Elaine Shi. Thunderella: Blockchains
with optimistic instant conﬁrmation. In EUROCRYPT,
pages 3–33, 2018.
[52] Andrew Poelstra. On stake and consensus. https:
//download.wpsoftware.net/bitcoin/pos.pdf,
2015.
[53] Thomas Ristenpart and Scott Yilek. The power of
proofs-of-possession: Securing multiparty signatures
USENIX Association
29th USENIX Security Symposium    2107
against rogue-key attacks. In Moni Naor, editor, EURO-
CRYPT 2007, volume 4515 of LNCS, pages 228–245.
Springer, Heidelberg, May 2007.
[54] David Schwartz, Noah Youngs, and Arthur Britto. The
Ripple protocol consensus algorithm. Ripple Labs Inc
White Paper, https://ripple.com/files/ripple_
consensus_whitepaper.pdf, 2014.
[55] N. R. Sunitha and B. B. Amberker. Forward-secure
multi-signatures. In Manish Parashar and Sanjeev K.
Aggarwal, editors, Distributed Computing and Internet
Technology, 5th International Conference, ICDCIT 2008,
volume 5375 of Lecture Notes in Computer Science.
Springer, 2009.
[56] Algorand Team. Algorand blockchain features speciﬁ-
cation version 1.0. Github, 2019.
[57] Algorand Team. Algorand byzantine fault tolerance
protocol speciﬁcation. Github, 2019.
[58] The Elrond Team. Elrond: A highly scalable pub-
lic blockchain via adaptive state sharding and se-
cure proof of stake. https://elrond.com/files/
Elrond_Whitepaper_EN.pdf, 2019.
[59] The ZILLIQA Team. The zilliqa technical whitepa-
per, 2017. http://docs.zilliqa.com/whitepaper.
pdf.
[60] Riad S. Wahby and Dan Boneh. Fast and simple
constant-time hashing to the BLS12-381 elliptic
IACR TCHES, 2019(4):154–179, 2019.
curve.
https://tches.iacr.org/index.php/TCHES/
article/view/8348.
[61] Jia Yu, Fanyu Kong, Xiangguo Cheng, Rong Hao,
Yangkui Chen, Xuliang Li, and Guowen Li. Forward-
secure multisignature, threshold signature and blind sig-
nature schemes. Journal of Networks, 5(6):634–641,
2010.
A Security Proof of Forward-Secure Signa-
tures
Proof. We prove the theorem in two steps. First, we show
that the scheme is selectively secure when the message space
M = {0,1}κ and Hq is the identity function, meaning, inter-
preting a κ-bit string as an integer in Zq.
Step 1: sfu-cma. We show that the above scheme with mes-
sage space M = {0,1}κ and Hq the identity function is
sfu-cma-secure under the (cid:96)-wBDHI∗
3 assumption by describ-
ing an algorithm B that, given a successful sfu-cma forger
A(cid:48), solves the (cid:96)-wBDHI∗
1 ,A2 =
3 problem. On input (A1 = gα
1
,B1 = gα
2 , . . . ,B(cid:96) = g(α(cid:96))
,C), algorithm B
g(α2)
, . . . ,A(cid:96) = g(α(cid:96))
1
proceeds as follows.
It ﬁrst runs A to obtain (¯t,t∗,M∗). That is, A receives sk¯t
and produces a forgery on t∗,M∗. Let w∗ ∈ {0,1,2}(cid:96)−1 such
(cid:96)−1 = t∗(cid:107)0(cid:96)−1−|t∗|. It then sets the public
that w∗ = w∗
key and public parameters as
1(cid:107) . . .(cid:107)w∗
2
y ← B1
h ← gγ
h0 ← gγ0
hi ← gγi
1 · A(cid:96)
1 · (cid:96)−1
−w∗
(cid:96)−i+1 · A−M∗
∏
A
i
1 · A(cid:96)−i+1
where γ,γ0, . . . ,γ(cid:96) ←$ Zq.
i=1
1
for i = 1, . . . , (cid:96) ,
By setting the parameters as such, B implicitly sets x = α
. The reduction allows us to achieve two
1 · g(α(cid:96)+1)
1
and hx = Aγ
goals:
• extract the value of hx from a forgery on t∗,M∗ (provided
by A(cid:48)), allowing B to easily compute its (cid:96)-wBDHI∗
3 so-
lution e(g1,C)(α(cid:96)+1);
• simulate (cid:101)skw(cid:48) for all w(cid:48) ∈ {0,1,2}≤(cid:96)−1 which are not a
preﬁx of w∗; this would be useful for simulating both
the signing and the break-in oracle.
Algorithm B responds to A(cid:48)’s oracle queries as follows.
Key update. There is no need for B to simulate anything
beyond keeping track of the current time period t.
Signing. We ﬁrst describe how to answer a signing query for
a message M in time period t (cid:54)= t∗, and then describe the
case that t = t∗ and M (cid:54)= M∗. Let w ∈ {0,1,2}(cid:96)−1 be such
that w = t(cid:107)0(cid:96)−1−|t|.
Case 1: t (cid:54)= t∗. It is easy to see that t (cid:54)= t∗ ⇒ w (cid:54)= w∗.
(This crucially uses the fact that t,t∗ ∈ {1,2}∗.) Then, let
w(cid:48) = w1(cid:107)···(cid:107)wk denote the shortest preﬁx of w which
w(cid:48) ∈ {0,1,2}≤(cid:96)−1, we describe how B can derive a valid
is not a preﬁx of w∗. Extending the notation of (cid:101)skw(cid:48) to
key(cid:101)skw(cid:48), from which it is straight-forward to derive both(cid:101)skw
and a signature for t,M. Recall that (cid:101)skw(cid:48) has the structure
(c,d,ek+1, . . . ,e(cid:96)) =
(cid:18)
2 , hx(cid:0)h0
gr
(cid:1)r
(cid:19)
, hr
k+1 , . . . , hr
(cid:96)
k
∏
i=1
hwi
i
for a uniformly distributed value of r. Focusing on the second
2108    29th USENIX Security Symposium
USENIX Association
component d ﬁrst, we have that
(cid:33)r
hwi
i
(cid:32)
h0 · k
(cid:32)(cid:18)
∏
(cid:1)α ·
(cid:32)
i=1
1A(cid:96)
d = hx ·
= (cid:0)gγ
(cid:96)−1
∏
gγ0
1
i=1
gγ0+∑k
1
1
−w∗
(cid:96)−i+1A−M∗
A
i
· k
∏
(cid:96)−k+1 · (cid:96)−1
Awk−w∗
∏
i=1
k
(cid:19)
(cid:18)
(cid:19)wi(cid:33)r
1 A(cid:96)−i+1
(cid:33)r
gγi
,
1
1
·
i=k+1
i=1 γiwi
= Aγ
1g(α(cid:96)+1)
−w∗
(cid:96)−i+1A−M∗
A
i
i for 1 ≤ i  (cid:96) − 1.) Let us denote the four factors
between parentheses in the last equation as F1, F2, F3, and
F4, and denote their product as F. If we let
αk
k − wk
w∗
r ← r(cid:48) +
mod q
for a random r(cid:48) ←$ Zq, then we have that
αk
w∗
k−wk .
· Fr(cid:48) · F
d = Aγ
1 · g(α(cid:96)+1)
1
The ﬁrst and third factors in this product are easy to compute.
The second factor would allow B to compute the solution
,C), so B cannot simply
its (cid:96)-wBDHI∗
3 problem as e(g(α(cid:96)+1)
αk
w∗
k−wk can be written as the
compute it. The last factor F
product of
1
αk
w∗
k−wk
F
1
αk
w∗
k−wk
F
2
αk
w∗
k−wk
F
3
αk
w∗
k−wk
F
4
γ0+∑k
i=1 γiwi
w∗
k−wk
= A
k
1
=
−w∗
i
w∗
k−wk
(cid:96)+k−i+1 =
(cid:96)−k+1 = g−(α(cid:96)+1)