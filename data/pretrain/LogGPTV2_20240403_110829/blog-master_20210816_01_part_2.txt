# 修改  
standAlone=y  
# 修改  
dataDirRoot=/data01/polardb/data  
#---- Datanodes -------------------------------------------------------------------------------------------------------  
#---- Shortcuts --------------  
datanodeMasterDir=$dataDirRoot/dn_master  
datanodeSlaveDir=$dataDirRoot/dn_slave  
datanodeLearnerDir=$dataDirRoot/dn_learner  
datanodeArchLogDir=$dataDirRoot/datanode_archlog  
#---- Overall ---------------  
primaryDatanode=datanode_1				# Primary Node.  
datanodeNames=(datanode_1)  
datanodePorts=(10001)					# Master and slave use the same port!  
#datanodePoolerPorts=(10011)				# Master and slave use the same port!  
#datanodePgHbaEntries=(::1/128)			# Assumes that all the coordinator (master/slave) accepts  
										# the same connection  
										# This list sets up pg_hba.conf for $pgxcOwner user.  
										# If you'd like to setup other entries, supply them  
										# through extra configuration files specified below.  
datanodePgHbaEntries=(172.17.164.62/32 172.17.164.63/32 172.17.164.64/32)     # Same as above but for IPv4 connections  
#---- Master ----------------  
datanodeMasterServers=(172.17.164.62)					# none means this master is not available.  
													# This means that there should be the master but is down.  
													# The cluster is not operational until the master is  
													# recovered and ready to run.	  
datanodeMasterDirs=($datanodeMasterDir)  
datanodeMaxWalSender=16								# max_wal_senders: needed to configure slave. If zero value is   
													# specified, it is expected this parameter is explicitly supplied  
													# by external configuration files.  
													# If you don't configure slaves, leave this value zero.  
datanodeMaxWALSenders=($datanodeMaxWalSender)  
						# max_wal_senders configuration for each datanode  
#---- Slave -----------------  
datanodeSlave=y			# Specify y if you configure at least one coordiantor slave.  Otherwise, the following  
						# configuration parameters will be set to empty values.  
						# If no effective server names are found (that is, every servers are specified as none),  
						# then datanodeSlave value will be set to n and all the following values will be set to  
						# empty values.  
datanodeSlaveServers=(172.17.164.63)	# value none means this slave is not available  
datanodeSlavePorts=(10001)			# Master and slave use the same port!  
#datanodeSlavePoolerPorts=(10011)	# Master and slave use the same port!  
datanodeSlaveSync=y					# If datanode slave is connected in synchronized mode  
datanodeSlaveDirs=($datanodeSlaveDir)  
datanodeArchLogDirs=($datanodeArchLogDir)  
datanodeRepNum=2  					#  no HA setting 0, streaming HA and active-active logcial replication setting 1 replication,  paxos HA setting 2 replication.	  
datanodeSlaveType=(3) 				# 1 is streaming HA, 2 is active-active logcial replication, 3 paxos HA.  
#---- Learner -----------------  
datanodeLearnerServers=(172.17.164.64)	# value none means this learner is not available  
datanodeLearnerPorts=(10001)		# learner port!  
#datanodeSlavePoolerPorts=(10011)	# learner pooler port!  
datanodeLearnerSync=y				# If datanode learner is connected in synchronized mode  
datanodeLearnerDirs=($datanodeLearnerDir)  
# ---- Configuration files ---  
# You may supply your bash script to setup extra config lines and extra pg_hba.conf entries here.  
# These files will go to corresponding files for the master.  
# Or you may supply these files manually.  
datanodeExtraConfig=datanodeExtraConfig	  
cat > $datanodeExtraConfig <<EOF
#================================================  
# Added to all the datanode postgresql.conf  
# Original: $datanodeExtraConfig  
log_destination = 'csvlog'  
unix_socket_directories = '., /tmp'  
logging_collector = on  
log_directory = 'log'  
listen_addresses = '0.0.0.0'  
max_connections = 1000  
hot_standby = on  
synchronous_commit = on  
max_worker_processes = 30  
cron.database_name = 'postgres'  
tcp_keepalives_idle = 30  
tcp_keepalives_interval = 10    
tcp_keepalives_count = 6                           
shared_buffers = 16GB  
maintenance_work_mem = 1GB  
bgwriter_delay = 10ms  
bgwriter_lru_maxpages = 1000  
bgwriter_lru_multiplier = 5.0  
effective_io_concurrency = 0  
parallel_leader_participation = off  
max_wal_size = 48GB  
min_wal_size = 8GB  
wal_keep_segments = 4096 
wal_sender_timeout = 5s  
random_page_cost = 1.1  
effective_cache_size = 32GB  
log_truncate_on_rotation = on  
log_min_duration_statement = 3s  
log_checkpoints = on  
log_lock_waits = on  
log_statement = 'ddl'  
log_autovacuum_min_duration = 0  
autovacuum_freeze_max_age = 800000000  
autovacuum_multixact_freeze_max_age = 900000000  
autovacuum_vacuum_cost_delay = 0ms  
vacuum_freeze_min_age = 700000000  
vacuum_freeze_table_age = 850000000  
vacuum_multixact_freeze_min_age = 700000000  
vacuum_multixact_freeze_table_age = 850000000  
statement_timeout = 0                    # in milliseconds, 0 is disabled  
lock_timeout = 0                         # in milliseconds, 0 is disabled  
idle_in_transaction_session_timeout = 0  # in milliseconds, 0 is disabled  
shared_preload_libraries = 'pg_cron'  
max_parallel_replay_workers = 0        
EOF
# Additional Configuration file for specific datanode master.  
# You can define each setting by similar means as above.  
datanodeSpecificExtraConfig=(none)  
datanodeSpecificExtraPgHba=(none)  
```  
9、初始化三节点集群  
master node:  
```  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf clean all  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf init all  
```  
```
psql
postgres=# select * from pg_stat_replication ;
-[ RECORD 1 ]----+------------------------------
pid              | 18745
usesysid         | 10
usename          | digoal
application_name | walreceiver
client_addr      | 172.17.164.63
client_hostname  | 
client_port      | 53338
backend_start    | 2021-08-16 16:10:59.414899+08
backend_xmin     | 
state            | streaming
sent_lsn         | 0/4000120
write_lsn        | 0/4000120
flush_lsn        | 0/4000120
replay_lsn       | 0/4000120
write_lag        | 
flush_lag        | 
replay_lag       | 
sync_priority    | 0
sync_state       | async
-[ RECORD 2 ]----+------------------------------
pid              | 19166
usesysid         | 10
usename          | digoal
application_name | walreceiver
client_addr      | 172.17.164.64
client_hostname  | 
client_port      | 50968
backend_start    | 2021-08-16 16:11:09.975107+08
backend_xmin     | 
state            | streaming
sent_lsn         | 0/4000120
write_lsn        | 0/4000120
flush_lsn        | 0/4000120
replay_lsn       | 0/4000120
write_lag        | 
flush_lag        | 
replay_lag       | 
sync_priority    | 0
sync_state       | async
```
10、常用管理命令  
检查三节点状态  
```  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf monitor all  
/bin/bash  
Installing pgxc_ctl_bash script as /home/digoal/pgxc_ctl/pgxc_ctl_bash.  
Installing pgxc_ctl_bash script as /home/digoal/pgxc_ctl/pgxc_ctl_bash.  
Reading configuration using /home/digoal/pgxc_ctl/pgxc_ctl_bash --home /home/digoal/pgxc_ctl --configuration /home/digoal/polardb/etc/polardb_paxos.conf  
Finished reading configuration.  
   ******** PGXC_CTL START ***************  
Current directory: /home/digoal/pgxc_ctl  
Running: datanode master datanode_1  
Running: datanode slave datanode_1  
Running: datanode learner datanode_1  
```  
查看三节点配置  
```  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf show configuration all  
```  
start cluster or node  
```  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf start all  
```  
stop cluster or node  
```  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf stop all  
```  
failover datanode (datanode_1 is node name configured in polardb_paxos.conf).  
```  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf failover datanode datanode_1  
```  
cluster health check (check cluster status and start failed node).  
```  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf healthcheck all  
```  
examples of other commands  
```  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf kill all  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf log var datanodeNames  
pgxc_ctl -c $POLARDBHOME/etc/polardb_paxos.conf show configuration all  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")