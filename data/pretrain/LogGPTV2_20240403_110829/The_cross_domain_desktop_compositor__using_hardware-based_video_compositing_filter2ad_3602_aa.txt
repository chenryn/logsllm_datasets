title:The cross domain desktop compositor: using hardware-based video compositing
for a multi-level secure user interface
author:Mark R. Beaumont and
Jim McCarthy and
Toby C. Murray
The Cross Domain Desktop Compositor:
Using hardware-based video compositing for a
multi-level secure user interface
Mark Beaumont and Jim McCarthy
Defence Science & Technology Group
Edinburgh, SA, Australia
PI:EMAIL
Toby Murray
University of Melbourne and Data61
PI:EMAIL
Melbourne, VIC, Australia
ABSTRACT
We have developed the Cross Domain Desktop Compositor,
a hardware-based multi-level secure user interface, suitable
for deployment in high-assurance environments.
Through composition of digital display data from multi-
ple physically-isolated single-level secure domains, and ju-
dicious switching of keyboard and mouse input, we provide
an integrated multi-domain desktop solution. The system
developed enforces a strict information ﬂow policy and re-
quires no trusted software. To fulﬁl high-assurance require-
ments and achieve a low cost of accreditation, the archi-
tecture favours simplicity, using mainly commercial-oﬀ-the-
shelf components complemented by small trustworthy hard-
ware elements.
The resulting user interface is intuitive and responsive and
we show how it can be further leveraged to create integrated
multi-level applications and support managed information
ﬂows for secure cross domain solutions.
This is a new approach to the construction of multi-level
secure user interfaces and multi-level applications which min-
imises the required trusted computing base, whilst maintain-
ing much of the desired functionality.
1.
INTRODUCTION
High assurance systems require greater rigour in their de-
sign, development, implementation, and veriﬁcation to en-
sure they correctly satisfy certain safety or security critical
properties [9]. Examples include avionics [24], or national
security infrastructure systems [8], where the consequences
of failing to enforce these properties can be grave. As such,
systems targeted for operation in these environments are
usually subjected to strict evaluation and accreditation re-
quirements before they are put into service [3, 21]. Often the
accreditation requirements either unduly constrain a system,
or limit its use to operation in lower assurance environments.
Typically, a formal analysis of the system reasoning about
the critical properties is needed [23] prior to deployment. As
Publication rights licensed to ACM. ACM acknowledges that this contribution was
authored or co-authored by an employee, contractor or afﬁliate of a national govern-
ment. As such, the Government retains a nonexclusive, royalty-free right to publish or
reproduce this article, or to allow others to do so, for Government purposes only.
ACSAC ’16, December 05 - 09, 2016, Los Angeles, CA, USA
c(cid:13) 2016 Crown Copyright
ACM ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991087
a consequence, high assurance systems require a balance be-
tween complexity, security or safety properties, and usability
to ensure a system is suitable for the intended environment.
In a computing environment, separate security domains
enforce strict isolation to prevent data leakage and maintain
system integrity and availability. This is especially impor-
tant for government, national security, and other sensitive
networks (e.g., ﬁnancial, medical), where data compromise,
data loss, or system down-time can have severe impact [10].
Using multiple of these single-level secure systems in par-
allel can be cumbersome and ineﬃcient, often resulting in
replicated infrastructure and multiple user interfaces.
Extant high assurance hardware solutions allow user in-
terface infrastructure to be shared [20], however the user
still interfaces with each domain independently. Extant soft-
ware solutions do combine the user interfaces for multiple
domains onto the same desktop [1], however these rely on
large trusted computing bases comprising hypervisor, secu-
rity domain software, and drivers – making them too com-
plex to evaluate and too risky to accredit for high assurance
use. Software solutions fail to address the increasing risk of
compromised hardware [22], implicitly incorporating many
hardware components into the trusted computing base.
Protecting the integrity of isolated security domains, and
preventing information leakage between the domains, pre-
cludes the use of existing software solutions on our most sen-
sitive networks. We instead present an approach that inte-
grates the user interface from multiple computing domains,
external to the domain computing infrastructure. We sacri-
ﬁce some functionality and loss of semantic information for a
smaller trusted computing base and a veriﬁably more secure
solution – attempting to combine the security of existing
hardware solutions, with the cognitive integration beneﬁts
of the software solutions.
The Cross Domain Desktop Compositor (CDDC) is a mul-
ti-level secure (MLS) user interface that uses hardware-based
composition to simultaneously display and decorate graph-
ical output from multiple single-level-secure domains on a
single computer monitor. There is no need to trust any
software residing on the individual domains, or the hard-
ware platforms on which they exist. Secure keyboard and
mouse switching dynamically directs user input between do-
mains to provide a seamless user experience and maintain
conﬁdentiality between domains.
Orchestration of the composited graphical output regions
and the keyboard/mouse switching allows a uniﬁed user in-
terface to be constructed. Through this interface a user can
Figure 1: The Cross Domain Desktop Compositor
interact with the domains as though they were part of a sin-
gle desktop environment. At any point in time, one domain
is designated as the active domain which has its windows
composited foremost and exclusively receives all user input.
Figure 1 shows three domains being composited and DO-
MAIN 2 is currently active.
Creating an MLS user interface for use in high assur-
ance environments is diﬃcult: the CDDC achieves this and
creates a converged desktop for modern operating systems
using simple, hardware-based compositing and intelligent
trusted switching. Once in use, the CDDC can be leveraged
to facilitate the deployment of true MLS-like applications
without many of the usual requirements for evaluation and
accreditation of such solutions.
In this paper, we position and analyse the CDDC in the
ﬁeld of related solutions, describe the threat model and
architecture of the CDDC, cover the implementation of a
hardware-based demonstrator, and detail the operation of
domain-side software. Consideration is given to the oper-
ation of the trustworthy elements within the design and a
formal analysis of the security properties of the CDDC is
presented.We analyse potential covert channels and steps
that can be taken to mitigate information leakage. We then
look at deploying integrated cross-domain applications on
the architecture and examine the beneﬁts, as a generalised
approach for application delivery across multiple domains.
We conclude with some remarks on the architecture and for-
ward looking research.
2. RELATED WORK
Historically, the development of an MLS desktop experi-
ence has been tackled in a variety of manners from multi-
level secure workstations [18] to virtualised desktops [6], se-
cure graphical user interfaces (GUIs) and secure keyboard-
video-mouse (KVM) switches. The goal of these approaches
is to provide a user experience where multiple computing do-
mains can share a common interface and a user can interact
with all applications in a common environment.
Modern systems that virtualise access to desktops include:
AFRL’s SecureView [1, 15], which runs multiple environ-
ments in logically isolated Virtual Machines and provides
secure software based compositing of diﬀerent level win-
dows. SecureView provides similar window decoration and
input switching as the CDDC; and Raytheon’s Trusted Thin
Client [16] which uses a customised Centos operating envi-
ronment to support the delivery of remote desktops from
multiple domains across a single wire.
Increasingly, the trusted element in these solutions is a
hypervisor such as Xen [2]. Often a relatively small secure
domain will contain additional trusted code to further sup-
port the required user interface functionality. Some exam-
ples include TrustGraph [13] which implements a trustwor-
thy graphics subsystem, and Qubes OS which implements a
secure GUI virtualisation subsystem [17].
Similarly, secure GUIs and trusted windowing systems op-
erate on top of trusted operating systems, hypervisors, or
microkernels. Examples include: Nitpicker [5] which pro-
vides secure window buﬀers for diﬀerent applications to write
into, and then be displayed and moved around on the screen;
and Trusted X [4] which secures client interaction with the
X server, preventing applications accessing each others’ dis-
play data. Although these models are useful, they often do
not operate or interact well with the complexities incorpo-
rated in modern desktop user interfaces – the windowing
environments and API constructs are too complex.
The above solutions all have a software trusted comput-
ing base and also assume for a large part that the underlying
hardware mechanisms can be unconditionally trusted. Two
issues with the software trusted computing base arise: ﬁrst,
the size of the code is often too large and unwieldy to for-
mally analyse; and second, the software is often vulnerable
to many well-known attacks, as well as zero-day attacks.
Conversely, the CDDC does not rely on trusting any soft-
ware or any commercial-oﬀ-the-shelf hardware. Instead, a
simple trusted computing base is constructed in hardware
and can be retroﬁtted to existing multi-desktop environ-
ments, removing any vulnerability to software-based attacks
and making it more amenable to formal security evaluation.
The computing domains themselves remain untrusted, push-
ing the trust boundary into the small, well controlled exter-
nal hardware, which both strengthens the security guaran-
tees, and increases the performance of the solution, whilst
making it easier to accredit for high-assurance environments.
The K424F-SH from Smart Security Labs [20, 19] is a
secure KVM switch that allows multiple domains to be si-
multaneously viewed on a single screen. The domains are
each presented within their own decorated window that can
be moved or scaled on the screen in either a tiled or cascaded
type of display. The keyboard and mouse are switched be-
tween the domain through mouse interaction.
The CDDC architecture is similar to the K424F-SH, tak-
ing advantage of isolating input video paths, and isolating
and proxying Human Interface Device (HID) paths. Visual
desktop integration in the K424F-SH occurs at a coarse level;
where the entire graphical user interfaces for each domain
are presented separately and a user still interacts with each
domain separately. In contrast, the CDDC presents individ-
ual windows from each domain together on a single graphical
desktop interface – providing a user with the cognitive ben-
eﬁts of operating within a single desktop environment.
The draw-back of operating in hardware is the loss of
semantic information – the CDDC operates purely on the
video output from a desktop, with no implicit notion of
windows, widgets, or other interface elements. This issue
is mitigated by the aid of untrusted domain-side software.
3. THREAT MODEL
The single-level secure computing infrastructure from each
domain is untrusted. This includes the hardware platforms,
operating systems, and application software; even if that
software supports the operation of the CDDC.
The display is trusted, more so than for a single level
display as it is relied upon to accurately reﬂect the multi-
level secure state of the user interface. The keyboard and
mouse are also trusted. The consequences of a malicious
keyboard and mouse are discussed in Section 7.
The CDDC device is trusted to operate correctly. A deeper
analysis of the trusted computing base is provided in Sec-
tion 4.4.
4. THE CDDC ARCHITECTURE
Desktop computers from separate single-level secure do-
mains are connected to the CDDC via their digital display
output (e.g., displayport) and USB input to accept HID in-
put, i.e., keyboard and mouse data – Figure 2.
The main components of the architecture are: unidirec-
tional forcing elements on the input video streams and the
HID outputs; video processing blocks to extract display re-
Figure 2: Basic CDDC architecture
gions to composite from each input video stream; a com-
positing engine that generates the composited output in real-
time; and a trusted switch that directs the key strokes and
cursor position to the correct domain.
The CDDC is diﬀerentiated from a secure KVM in the
manner it identiﬁes and operates on sub-regions of each
video stream and consequently how the user interacts with
the composited output.
4.1 Window Identiﬁcation
Modern operating environment GUIs are often constructed
using rectangular windowed regions of the display; e.g., ap-
plication windows, dialog boxes, and desktop icons. These
rectangular elements combine together to form the familiar
desktop interface. The CDDC constructs an MLS user inter-
face by compositing these windowed regions from multiple
isolated domains onto a single graphical output.
There are various methods to identify window regions,
e.g., chroma-key information or image processing algorithms.
These methods can be complex and unreliable and result in
inadequate composition. In the prototype CDDC, windows
are identiﬁed by untrusted domain-side software and sent
in-band within the raw video stream, encoded as pixel data.
This approach has two beneﬁts, ﬁrstly the location of all
windows is accurately known, and secondly the reported lo-
cations are implicitly associated with each and every frame
of the video stream received. We address the trustworthiness
of the window locations in Section 7.1.
4.2 Composition
The CDDC receives a separate video stream containing a
full graphical desktop from each domain. The CDDC identi-
ﬁes window regions from each desktop and composites them
based on a dynamically deﬁned domain ordering, outputting
only the pixel value from the foremost domain window region
at any speciﬁc pixel location. Necessarily, window regions
within any one domain are kept in the same order, as the
CDDC only has access to the raw video stream, and hence
can only manipulate already drawn window regions.
Domain ordering prescribes which content to display when
multiple window regions are identiﬁed at the same pixel lo-
cation. Domain ordering is controlled by the CDDC and
updated based on user interaction with the domains. The
active domain has the highest priority and its content is
output in preference to all other domains.
The CDDC augments the composition by generating and
rendering its own content. CDDC generated content is MLS
content, it is used to identify windows from diﬀerent domains
by decorating them with a unique coloured border. CDDC
generated content is output in preference to other content
at any pixel location, and cannot be modiﬁed by any in-
dividual domain. CDDC generated MLS content is trusted.
Figure 3 shows a typical converged desktop with composited
and decorated windows from three separate domains.
Figure 3: Composited Desktop view for three do-
mains. DOMAIN 1 is the active domain.
Undecorated regions of the composited display are treated
according to a predetermined security policy, e.g., render-
ing as a static background colour, or rendering a greyed-out
version of the unidentiﬁed content from the currently active
domain. Rendering this content unaltered may encourage
certain spooﬁng attacks.
4.3 User Interaction
To facilitate secure user interaction, the CDDC renders
a cursor, as the highest priority, on the composited output.
The position of this cursor is dictated solely by the move-
ments of the mouse as interpreted by the CDDC. The cursor
position and keyboard input are exclusively directed to the
active domain. The user is alerted to the currently active do-
main by a non-maskable CDDC generated banner rendered
across the top of the composited output. It is large and eas-
ily distinguishable from other elements, to aid correct user
interaction and understanding of the current context.
A user can interact with all visible windows through nor-
mal move and click cursor actions. The CDDC reacts ap-
propriately, fordwarding the HID actions to the correct do-
main. The active domain is changed by: a mouse click when
the cursor is positioned above content from a diﬀerent do-
main; a physical button press on the CDDC; or a click on a
virtual button rendered by the CDDC. The domain order,
top banner, and keyboard and mouse switch are all consis-
tently updated with the active domain. The set of window
regions from the newly active domain are composited fore-
most. Figure 3 shows the trusted banner across the top of