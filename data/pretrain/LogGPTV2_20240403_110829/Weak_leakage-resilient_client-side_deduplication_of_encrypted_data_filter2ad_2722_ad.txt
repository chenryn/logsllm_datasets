lation does not address protection of partial information,
the constructions in Halevi et al. [20] indeed protects the
privacy of physical bits F [i]’s against outside adversaries
(Of course, this is not true for inside adversaries).
• Leakage: PoW allows a stronger leakage setting than
CSD. PoW allows multi-time leakage at any time ex-
cept during the course of the interactive proof between
the veriﬁer and prover, while CSD allows only one-time
leakage before CSD scheme starts to execute. Putting
the PoW formulation in our context, the security game
of PoW consists of multiple interleaved executions of
Learning-I and Learning-II phases, i.e. (Learning-I,
Learning-II, Learning-I, Learning-II, . . .), subject to
an additional constraint that the adversary cannot make
the LEAK-QUERY and PROVE-QUERY concurrently. On
the other side, our CSD allows larger amount of leakage
than the PoW formulation (precisely Deﬁnition 2 and 3
in PoW [20]).
4. Secure Client-side Deduplication
4.1 Construction
We present the construction of a CSD scheme (E, D, (cid:104)P,V(cid:105))
in Figure 2 on page 9. Since this construction relies on uni-
versal hash function to achieve leakage-resilience, we call
the constructed CSD scheme as UH-CSD. Suppose Alice
is the ﬁrst user who uploads ﬁle F . She will execute al-
gorithm E with ﬁle F and security parameter 1λ as input
and obtain a short secret encryption key τ, a short encod-
ing Cτ ∈ {0, 1}3λ and a long encoding CF . Alice will send
both Cτ and CF to the cloud storage server Bob. Bob will
compute the hash value hash(CF ), put Cτ in secure and
small primary storage, and put CF in the potentially inse-
cure but large secondary storage. At the last, Bob will add
(key = hash(F ), value = (hash(CF ), Cτ ) into his lookup
database. Suppose Carol is another user who tries to up-
load the same ﬁle F after Alice. Carol will send hash(F )
to the cloud storage server Bob. Bob ﬁnds that hash(F ) is
already in his lookup database. Then Bob, who is running
algorithm V with Cτ as input, interacts with Carol, who is
running algorithm P with F as input. At the end of interac-
tion, Carol will learn τ and Bob will compare the hash value
hash(CF ) provided by Carol with the one computed by him-
self. Later, Carol is allowed to download CF from Bob at any
11 Probabilistic deduplication that saves the duplicated copy only with a
certain probability (say 0.5) still allows brute force attack, since the success
probability of deduplication can be ampliﬁed close to 1 via repetition.
time and decrypt it to obtain the ﬁle F by running algorithm
D(τ, CF ).
Figure 2. The construction of a CSD scheme, denoted as
UH-CSD. Let E = (KeyGen, Enc, Dec) be a symmetric
encryption scheme with λ (= ρ) bits long key length and
hk : {0, 1}∗ → {0, 1}ρ be a key-ed hash function. Notice
that the random coin of Enc will be put in the generated
ciphertext.
E(F, 1λ)
1. τ := KeyGen(1λ) ∈ {0, 1}λ.
2. s
3. CF := Encτ (F ).
4. Cτ := (s, hs(F ) ⊕ τ, hash(F )).
5. Output (τ, Cτ , CF ).
(cid:104)P(F (cid:48)), V(Cτ )(cid:105)
V1: Parse Cτ as (s, hs(F )⊕ τ, hash(F )). Send (s, hs(F )⊕
D(τ, CF )
1. F (cid:48) := Decτ (CF )
2. Output F (cid:48).
$←− {0, 1}λ.
τ ) to the prover.
P1: Compute the secret key y0 as below
y0 := hs(F
(cid:48)
) ⊕ (cid:0)hs(F ) ⊕ τ(cid:1), where ⊕ refers to XOR.
Encrypta F (cid:48) with key y0 to generate ciphertext CF (cid:48)
and compute the hash value y2 := hash(CF (cid:48)) of the
ciphertext. Send y2 to veriﬁer.
V2: Let HCF := hash(CF ) be computed previously when
:=
receiving ciphertext CF . If y2 = HCF , set y1
accept, otherwise y1 := reject.
a As mentioned in the overview in Section 1, this encryption step is re-
quired to compute the hash value hash(CF (cid:48) ), which will help the veriﬁer
(i.e. cloud storage server) to detect poison attack.
4.2 Security Analysis
Theorem 1. Let ξ0 > ξ1 = 2λ + Ω(λ). Let hash be a
collision-resistant full domain hash function. Suppose the
encryption scheme E is private-key semantic secure (Deﬁ-
nition 5.2.1 in Goldreich [18]) and the hash function family
{hk} is a universal hash. Then the UH-CSD scheme in Fig-
ure 2 is (ξ0, ξ1)-secure. (Proof is in Appendix A)
The proof of correctness of UH-CSD scheme under Def-
inition 1 is straightforward. We save the details. Notice that
the leakage rate (i.e. the ratio of the amount of leakage to
the entropy of the sensitive ﬁle) of our scheme UH-CSD is
1 − ξ1/ξ0, which could be close to 1 for suitable ξ0 and ξ1.
4.3 Comparison with Convergent Encryption
4.3.1 Our custom encryption method is derived from
convergent encryption
Convergent encryption encrypts a ﬁle F as Enchash(F )(F ).
In our scheme UH-CSD given in Figure 2, the encryption of
ﬁle F is (s, hs(F ) ⊕ τ, Encτ (F )). This encryption method
can be treated as a natural extension of convergent encryp-
tion which overcomes the below shortcomings of convergent
encryption.
Revocation of encryption key.
It is very difﬁcult, if not
impossible, to revoke the encryption key of convergent en-
cryption, when the current encryption key is compromised.
Suppose a user tries to encrypt ﬁle F using hash(F ) as AES
encryption key, and ﬁnds that the value of hash(F ) has al-
ready been revealed to Internet by some other owner of ﬁle
(cid:48)
F . He may switch to use hash
(F ) as encryption key where
(·) is another secure hash function. Meanwhile, the
(cid:48)
hash
user has to broadcast this switch of hash function to all future
users. This approach will face two issues: (1) The number of
different secure hash function is very limited. (2) Users may
abuse the above hash-revoking functionality. A natural ﬁxes
to the above two issues are: (1) Use a secure key-ed hash
function and revoke the hash key if necessary. (2) It is not
necessary that every user adopts the same hash function (i.e.
the same keyed-hash function and hash key) to generate the
AES encryption key. Every user can independently choose
a new hash key without notifying others. As a result, a user
can encrypt a ﬁle F in this way: Randomly choose a hash
key s and generate the ciphertext (s, AEShs(F )(F )).
Can any hash value be a valid encryption key?
It is a
coincidence that the range of hash function (e.g. SHA256)
is consistent with the key space of encryption method (e.g.
AES). Many other encryption schemes have special key gen-
erating algorithm and the generated key should have a par-
ticular structure, for example, some public key encryption
schemes. Therefore, convergent encryption cannot general-
ize to generic encryption scheme. Our proposed encryption
method overcomes this weakness, by invoking the key gen-
erating algorithm of the underlying encryption method to
generate an encryption key and protect this generated en-
cryption key using a one-time pad. Let (KeyGen, Enc, Dec)
be the underlying encryption method. The ciphertext of F
will be (s, hs(F ) ⊕ τ, Encτ (F )), where the hash key s is
randomly generated and the underlying encryption key τ is
generated by algorithm KeyGen.
Leakage Resilient. More importantly, convergent en-
cryption is insecure if a bounded amount of efﬁciently-
extractable information of the plaintext F is leaked before
encryption (i.e. the leakage setting of CSD in this paper).
Our encryption method is resilient to such bounded leak-
age of the plaintext F , in the random oracle (assuming h
is a random oracle) or in the standard model (assuming h is
pairwise-independent hash function). It is worth pointing out
that no encryption schemes could be secure in the stronger
leakage setting model (e.g. POW [20]) where leakage may
occur before and after the encryption process.
4.3.2 Advantage of Convergent Encryption
Convergent encryption can be used for both client-side
and server-side deduplication. In contrast, our encryption
method can be used only for client-side deduplication, since
the one round interaction in the client-side deduplication
is essential for our solution to synchronize the hash key.
Unsurprisingly, both convergent encryption and our custom
encryption method are not semantically secure [18].
5. Performance
We have implemented a prototype of the proposed scheme
UH-CSD with SHA256 as the collision-resistant full domain
hash function hash(·), and with SHA256(k(cid:107)x) as the keyed-
hash12 hk(x), and AES encryption13 as the semantic-secure
symmetric cipher E. The hash function SHA256 [29] and the
symmetric cipher AES [11] are provided in OpenSSL [31]
library (version 1.0.0g). The whole program is written in C
language and compiled with GCC 4.4.5. It runs in a single
process. Our implementation is not optimized and further
performance improvements can be expected.
The test machine is a laptop computer, which is equipped
with a 2.5GHz Intel Core 2 Duo mobile CPU (model
T9300), a 3GB PC2700-800MHZ RAM and a 7200RPM
hard disk. The test machine runs 32 bits version of Gentoo
Linux OS with kernel 3.1.10. The ﬁle system is EXT4 with
4KB page size.
We run the proposed client-side deduplication scheme
UH-CSD over ﬁles14 of size 128MB, 256MB, 512MB, and
1024MB, respectively. The running time of the proof pro-
tocol (i.e. interactive algorithm (cid:104)P,V(cid:105) ) in UH-CSD is re-
ported in Figure 3, compared with network transfer time of
test ﬁles without encryption or deduplication. The running
time of encoding algorithm E is very close to (and smaller
than) the interactive algorithm (cid:104)P,V(cid:105). The decoding algo-
rithm D is just the AES decryption algorithm, which is more
efﬁcient than E. Here we save the actual running time for
E and D. All measurement represents the mean of 5 trails.
Since the variants are very small, we do not report it.
We observe that, for small ﬁles, the saving in uploading
time is small if the network upload speed is as fast as 5Mbps
or even 20Mbps, but saving in server storage still matters
to the cloud storage server and is independent on network
speed. We remark that, leakage resilient server-side dedupli-
cation over encrypted ﬁles remains an open problem.
6. Conclusion and Future work
In this paper, we addressed an important security concern in
cross-user client-side deduplication of encrypted ﬁles in the
cloud storage: conﬁdentiality of users’ sensitive ﬁles against
12 We treat SHA256 as a random oracle and choose SHA256(k(cid:107)x) to simu-
late the universal hash function hk(x) in order to achieve high performance.
Software performance of universal hash is reported by Nevelsteen and Pre-
neel [27].
13 AES encryption in CBC mode with fresh random IV, where IV will be a
part of the ciphertext.
14 Our test ﬁles are generated by encrypting a large ﬁle using AES method
with a random encryption key, so could be considered as random ﬁles.
Figure 3. Comparison between the running time of the
proof protocol (i.e. interactive algorithm (cid:104)P,V(cid:105) ) of our
client-side deduplication scheme UH-CSD and the network
transfer time of ﬁles without encryption.
both outside adversaries and the honest-but-curious cloud
storage server in the bounded leakage model. On technique
aspect, we enhanced and generalized the convergent en-
cryption method, and the resulting encryption scheme could
support client-side deduplication of encrypted ﬁle in the
bounded leakage model.
We clarify that this paper adopts a weaker leakage setting
than Halevi et al. [20]. Our unpublished full paper [42] with
stronger result adopts the same leakage setting as Halevi et
al. w.r.t. outside adversaries. Furthermore, construction of
secure client-side deduplication scheme in the strong leak-
age setting w.r.t. both outside adversaries and honest-but-
curious cloud storage server is in our future work.
References
[1] Jo¨el Alwen, Yevgeniy Dodis, and Daniel Wichs. Leakage-Resilient Public-
In CRYPTO ’09: Annual
Key Cryptography in the Bounded-Retrieval Model.
International Cryptology Conference on Advances in Cryptology, pages 36–54,
2009.
[2] Amazon.
agreement/.
AWS Customer Agreement.
http://aws.amazon.com/
[3] Paul Anderson and Le Zhang. Fast and secure laptop backups with encrypted
In Proceedings of the 24th international conference on Large
de-duplication.
installation system administration, LISA’10, pages 1–8, 2010.
[4] Giuseppe Ateniese, Randal Burns, Reza Curtmola, Joseph Herring, Lea Kissner,
Zachary Peterson, and Dawn Song. Provable data possession at untrusted stores.
In CCS ’07: ACM conference on Computer and communications security, pages
598–609, 2007.
[5] Boaz Barak, Yevgeniy Dodis, Hugo Krawczyk, Olivier Pereira, Krzysztof
Pietrzak, Franc¸ois-Xavier Standaert, and Yu Yu. Leftover Hash Lemma, Re-
visited. In CRYPTO, pages 1–20, 2011.
[6] Boaz Barak, Oded Goldreich, Russell Impagliazzo, Steven Rudich, Amit Sahai,
Salil Vadhan, and Ke Yang. On the (im)possibility of obfuscating programs. J.
ACM, 59(2):6:1–6:48, 2012.
[7] Mihir Bellare, Sriram Keelveedhi, and Thomas Ristenpart. Message-locked en-
cryption and secure deduplication. Cryptology ePrint Archive, Report 2012/631,
2012. http://eprint.iacr.org/.
Our Scheme (Dedup+Enc)No‐Dedup + No‐Enc (5Mbps)16381800No‐Dedup + No‐Enc (20Mbps)1400160081910001200e (Sec)410410600800Time1116421362054105110220541020040001282565121024File Size (MB)()[8] Lawrence Carter and Mark Wegman. Universal classes of hash functions (Ex-
tended Abstract). In STOC ’77: ACM symposium on Theory of computing, pages
106–112, 1977.
[9] Ee-Chien Chang and Jia Xu. Remote Integrity Check with Dishonest Storage
In ESORICS ’08: European Symposium on Research in Computer
Server.
Security: Computer Security, pages 223–237, 2008. http://eprint.iacr.
org/2008/346.
[10] CNET.
Who
owns