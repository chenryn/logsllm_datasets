# redis
> redis是一款高性能的NOSQL系列的非关系型数据库
## 应用场景
- 缓存
- 实时性要求高的数据
- 消息队列
- 热点数据
- 计数器
- 数据过期处理（可以精确到毫秒）
- 分布式集群架构中的session分离
- 分布式锁
### redis不可以做什么
不适合冷数据 大量的数据
### 作为缓存
缓存数据不重要，且不是全量数据
- 缓存中的过期时间不会随着访问而延长，只有发生写，才会重置过期时间，缓存过期的判定有两种：一是访问时判断是否会过期，二是周期性轮训，判断是否过期
- 缓存所占的内存空间是有限的，随着时间推进，内存满了，就要逐步淘汰掉冷数据
## 简单使用
可执行文件|作用
-|-
redis-server|启动Redis
redis-cli|Redis命令行客户端
redis-benchmark|Redis基准测试工具
redis-check-aof|Redis AOF持久化文件检测和修复工具
redis-check-dump|Redis RDB持久化文件检测和修复工具
redis-sentinel|启动Redis Sentinel
```sh
redis-server # 默认配置启动
redis-server --port 6379 # 指定配置
redis-cli -h 主机名 -p 连接端口
redis-cli get key # 直接执行get命令
redis-cli shutdown # 关闭redis server
```
## 慢查询分析
一条客户端命令的生命周期：
```mermaid
stateDiagram-v2
  客户端 --> Redis: 发送命令
  Redis --> Redis: 命令排队
  Redis --> Redis: 执行命令
  Redis --> 客户端: 返回结果
```
慢查询阈值设置：
- slowlog-log-slower-than：超过xx微秒则记录为慢查询
- slowlog-max-len
```sh
config set slowlog-log-slower-than 2 # 设置阈值
slowlog get [n] # 获取慢查询日志 n 指定条数
slowlog len # 获取慢查询日志列表长度
slowlog reset # 清空慢查询日志
```
慢查询日志结构：
1. id
2. time
3. duration
4. command
    - 参数..
5. ip:port
最佳实践：
- 线上建议调大慢查询列表
- 根据qps来配置slowlog-log-slower-than
- 及时转储slowlog
## redis shell
- redos-cli
```sh
redis-cli -r 3 ping # 重复执行3次ping命令
redis-cli -r 3 -i 1 ping # 每隔1秒发一次ping 重复3此
echo "world" | redis-cli -x set hello # 从stdin读入 作为redis的最后一个参数
redis-cli --scan # scan命令
redis-cli --rdb ./bak.rdb # 生成rdb文件
echo -en '*3\r\n$3\r\nSET\r\n$5\r\nhello\r\n$5\r\nworld\r\n*2\r\n$4\r\nincr\r\n$7\r\ncounter\r\n' | redis-cli --pipe # 直接发送命令给redis执行
redis-cli --bigkeys  # 分析内存占用比较大的键值对
redis-cli --latency # 查看客户端到目标redis的网络延时
redis-cli --latency-history -i 10 # 每隔10秒查看一次网络延时
redis-cli --latency-dist # 以统计图表的方式输出
redis-cli --stat # 获取redis的统计信息
redis-cli --raw get name # 返回数据不进行格式化(\xexxx)
```
- redis-server
```sh
redis-server --test-memory 1024 # 测试是否有足够的内存
```
- redis-benchmark
```sh
redis-benchmark -c 100 -n 20000 # 100个客户 共请求20000次
redis-benchmark -c 100 -n 20000  -q # 只显示 requests per second
redis-benchmark -c 100 -n 20000 -r 10000 # -r选项会在key、counter键上加一个12位的后缀，-r10000代表只对后四位做随机处理
redis-benchmark -c 100 -n 20000 -P 10 # 每隔请求的pipline数据量
redis-benchmark -c 100 -n 20000 -q -k 1 # k为1代表启用客户端连接keepalive
redis-benchmark -t get,set -q # 只对指定的命令测试
redis-benchmark -t get,set -q --csv # 按照csv文件格式输出
```
## Pipeline
Pipeline（流水线）机制能将一组Redis命令进行组装，通过一次RTT传输给Redis，再将这组Redis命令的执行结果按顺序返回给客户端
- redis-cli 的--pipeline选项
- 各种语言客户端的pipeline
客户端和服务端的网络延时越大，Pipeline的效果越明显
如果pipeline传递的数据过大 也会增加客户端的等待时间及网络阻塞
vs. 原生批量命令：
- 原生批量命令是原子的，Pipeline是非原子的
- 原生批量命令是一个命令对应多个key，Pipeline支持多个命令
- 原生批量命令是Redis服务端支持实现的，而Pipeline需要服务端和客户端的共同实现
## 分布式
通用集群方案：
- 主备集群
  - 全量数据同步
- 分片集群
## 线程模型
redis 采用 IO 多路复用机制如 epoll 同时监听多个 socket，使用 Reactor 模型将产生事件的 socket 压入内存队列中，事件分派器根据 socket 上的事件类型来选择对应的事件处理器进行处理
```c
// 事件处理
int aeProcessEvents(aeEventLoop *eventLoop, int flags)
{
    int processed = 0, numevents;
    /* 若没有事件处理，则立刻返回*/
    if (!(flags & AE_TIME_EVENTS) && !(flags & AE_FILE_EVENTS)) return 0;
    /*如果有IO事件发生，或者紧急的时间事件发生，则开始处理*/
    if (eventLoop->maxfd != -1 || ((flags & AE_TIME_EVENTS) && !(flags & AE_DONT_WAIT))) {
       …
    }
    /* 检查是否有时间事件，若有，则调用processTimeEvents函数处理 */
    if (flags & AE_TIME_EVENTS)
        processed += processTimeEvents(eventLoop);
    /* 返回已经处理的文件或时间*/
    return processed; 
}
```
- IO事件：建立、读写连接
- 时间事件：在主线程中执行的定时任务
```mermaid
graph TD
    A[bind/listen] --> B[epoll_wait]
    B --> FD
    B --> FD1
    B --> FD2
    FD --> D[AcceptEvent]
    FD1 --> D[AcceptEvent]
    FD2 --> D[AcceptEvent]
    FD --> E[ReadEvent]
    FD1 --> E[ReadEvent]
    FD2 --> E[ReadEvent]
    FD --> F[WriteEvent]
    FD1 --> F[WriteEvent]
    FD2 --> F[WriteEvent]
    D --> 队列
    E --> 队列
    F --> 队列
    队列 --> 事件分派器
    事件分派器 --> accept
    事件分派器 --> get
    事件分派器 --> put
    事件分派器 --> return
```
Redis 单线程模型指的是只有一条线程来处理命令，单线程对每个命令的执行时间是有要求的 某个命令执行过长 就会造成其他命令的阻塞
Redis 的以下操作会产生阻塞
- 网络IO
- 键值对增删改查
- 数据库操作
- 生成RDB快照
- 记录AOF日志
- AOF日志重写
- RDB传输
- 加载RDB
- 哈希槽扩散
- 数据迁移
如果阻塞点不在关键路径上，就可以异步执行。Redis 主线程启动后，会创建 3 个子线程，分别由它们负责 AOF 日志写操作、键值对删除以及文件关闭的异步执行：
```c
static unsigned int bio_job_to_worker[] = {
    [BIO_CLOSE_FILE] = 0,
    [BIO_AOF_FSYNC] = 1,
    [BIO_CLOSE_AOF] = 1,
    [BIO_LAZY_FREE] = 2,
};
// 内部通过 bioCreateXXJob后，由线程执行bioProcessBackgroundJobs方法执行具体的内容
```
6.0 之后，Redis 引入了 IO 多线程，Redis 会在初始化过程中，根据用户设置的 IO 线程数量，创建对应数量的 IO 线程，这样 Redis 在进入事件循环流程前，都会将待读写客户端以分配给 IO 线程，由 IO 线程负责读写
```c
void *IOThreadMain(void *myid) {
    ...
    while(1) {
        ...
        while((ln = listNext(&li))) {
            client *c = listNodeValue(ln);
            if (io_threads_op == IO_THREADS_OP_WRITE) {
                writeToClient(c,0);
            } else if (io_threads_op == IO_THREADS_OP_READ) {
                readQueryFromClient(c->conn);
            } else {
                serverPanic("io_threads_op value is unknown");
            }
        }
        ...
    }
}
```
### 发现阻塞
- 当Redis阻塞时，线上应用服务应该最先感知到，这时应用方会收到大量Redis超时异常，比如Jedis客户端会抛出JedisConnectionException异常
此时可以进行日志记录 监控系统通过日志来进行监控报警 需要注意的是要改造Redis客户端 使其记录具体的Redis实例
开源的监控系统：CacheCloud
### 阻塞原因
#### 内在原因
- API或数据结构使用不合理
有些操作的时间复杂度为O(n) 这在高并发场景是不能接受的
这种情况需要重点注意**慢查询**以及**大对象** 针对它们进行优化
- CPU饱和
请求量很大 需要进行水平扩容来降低单实例的压力
- 持久化阻塞
fork阻塞：如避免使用过大的内存实例和规避fork缓慢的操作系统等
AOF刷盘阻塞：当硬盘压力过大 fsync命令可能会导致阻塞
HugePage写阻塞：对于开启Transparent HugePages的操作系统，每次写命令引起的复制内存页单位由4K变为2MB 会拖慢写操作的速度
#### 外在原因