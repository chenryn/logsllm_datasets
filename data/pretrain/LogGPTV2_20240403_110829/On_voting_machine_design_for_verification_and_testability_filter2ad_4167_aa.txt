title:On voting machine design for verification and testability
author:Cynthia Sturton and
Susmit Jha and
Sanjit A. Seshia and
David A. Wagner
On Voting Machine Design for Veriﬁcation and Testability
Cynthia Sturton
Susmit Jha
Sanjit A. Seshia
David Wagner
EECS Department
University of California, Berkeley
Berkeley, CA 94720
{csturton,jha,sseshia,daw}@eecs.berkeley.edu
ABSTRACT
We present an approach for the design and analysis of an electronic
voting machine based on a novel combination of formal veriﬁca-
tion and systematic testing. The system was designed speciﬁcally
to enable veriﬁcation and testing. In our architecture, the voting
machine is a ﬁnite-state transducer that implements the bare es-
sentials required for an election. We formally specify how each
component of the machine is intended to work and formally verify
that a Verilog implementation of our design meets this speciﬁca-
tion. However, it is more challenging to verify that the composition
of these components will behave as a voter would expect, because
formalizing human expectations is difﬁcult. We show how system-
atic testing can be used to address this issue, and in particular to
verify that the machine will behave correctly on election day.
Categories and Subject Descriptors
B.5.2 [Register-Transfer-Level Implementation]: Design Aids;
D.2.1 [Software Engineering]: Requirements/Speciﬁcations; D.2.4
[Software/Program Veriﬁcation]; H.1.2 [Human factors]
General Terms
Design, Security, Veriﬁcation, Human Factors
INTRODUCTION
1.
Electronic voting has brought with it concerns about reliability, ac-
curacy, and trustworthiness. A challenge with using technology to
run elections is that it is difﬁcult to be sure that a complex computer
system will perform correctly and as desired. Existing electronic
voting systems provide a relatively low level of assurance. They
are complex systems, often consisting of hundreds of thousands of
lines of code, and a single bug anywhere in the code could poten-
tially cause votes to be lost, misrecorded, or altered. As a result,
it is difﬁcult for independent evaluators to be conﬁdent that these
systems will record and count the votes accurately. Moreover, in
order to completely verify the voting machine, it is necessary to
also verify the interface to human voters, i.e., that the operation
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’09, November 9–13, 2009, Chicago, Illinois, USA.
Copyright 2009 ACM 978-1-60558-352-5/09/11 ...$10.00.
of the voting machine is consistent with the behavior expected by
voters.
In this paper, we present a new approach: design an electronic vot-
ing machine with assurance that it will work correctly. The nov-
elty of our approach is in the manner in which we integrate design,
formal veriﬁcation, and systematic testing to certify correctness.
We make three key contributions. First, we present the design of
a voting machine where design decisions are made so as to ease
veriﬁcation and testability. Second, we formally and automatically
verify that the implementation satisﬁes a number of low-level cor-
rectness properties. Third, we show how to verify that the machine
will behave on election day in a manner consistent with the voters’
expectations of correct operation, by using a combination of sys-
tematic testing and formal methods. We elaborate below on this
integration of design, veriﬁcation, and testing.
We follow the philosophy of “design for veriﬁcation” and “design
for testability.” Rather than waiting until the implementation is ﬁn-
ished to begin veriﬁcation or testing, every design choice was made
with an eye towards its impact on our ability to verify these prop-
erties, and the implementation was built with veriﬁcation in mind
from the start. In many cases, we started with the properties we
wanted to prove, and then considered how to design the system so
that these properties would be easy to verify.
We formally verify the correctness of each of the individual mod-
ules of the voting machine, as well as verifying some crucial cor-
rectness properties of their composition. For each module, we con-
struct a formal speciﬁcation that fully characterizes the intended
behavior of that module. Also, we identify a number of structural
and functional properties that the machine as a whole must satisfy.
We use automated techniques such as model checking and satisﬁa-
bility solving to verify that our Verilog implementation meets these
speciﬁcations. We emphasize that we apply formal veriﬁcation to
the actual code that is executed, not just to a high-level abstract
model. One of the contributions of this work is to demonstrate that
formal veriﬁcation of voting machine logic is feasible.
In addition, we use systematic manual testing to check that the ma-
chine will behave on election day in a way consistent with voter
expectations. Verifying this with formal methods is challenging
because it is difﬁcult to formally specify a voter’s expectations.
Instead, we assume that an observant human tester can recognize
incorrect behavior if it should occur (e.g., if the voting machine
records a vote for a candidate the tester did not select, the tester will
detect this fact). We generate a set of tests that, in combination with
the formal veriﬁcation, are provably sufﬁcient to explore all possi-
ble behaviors of the machine, and we employ human testers to sys-
tematically check that the machine works correctly in these tests.
Testing is well-suited for checking election-speciﬁc behavior, such
as that the machine is properly conﬁgured for this election with
463the correct set of contests and candidates. However, a limitation of
conventional testing is that exhaustive testing takes too long (e.g.
exponential time), so in practice testing can only ﬁnd bugs; it can-
not guarantee their absence. Perhaps surprisingly, we show that
this limitation of testing can be eliminated if testing is combined
with a limited amount of formal veriﬁcation and if the machine is
designed appropriately. In particular, we show that for an election
with N contests in which each contest involves selecting one out
of k candidates, we can verify correctness with just O(kN ) tests,
instead of the Ω(kN ) tests exhaustive testing would require.
The kind of voting machine that we focus on in this paper is known
as a direct-recording electronic (DRE) voting machine. A DRE
voting machine is one where voters interact with the machine to
make their selections and then the votes are recorded electroni-
cally. The most familiar example is a touchscreen voting machine,
where the voter interacts with a graphical user interface displayed
on the screen by software running on the voting machine. The voter
presses at various locations on the screen to register her selections,
and the voting software records the voter’s selections once she is
ready to cast her ballot. DREs are widely deployed throughout the
US: for instance, in 2008 DREs were used by approximately 33%
of registered voters [2].
DRE’s are commonly thought to be large, complex machines, but
we demonstrate that a small ﬁnite-state machine is sufﬁcient to
build a functional DRE. Our design is a ﬁnite-state machine that
implements a bare-bones, stripped-down DRE. We implement the
machine directly in hardware, in custom Verilog code, so that there
is no operating system or runtime to verify. At present, one limi-
tation of our implementation is that it supports only the minimum
functionality needed to conduct an election, and does not support
many features typically found in today’s deployed DREs. How-
ever, using this stripped-down version helps to enable veriﬁcation
and has the added beneﬁt that the complete state machine can be
“held in your head”, allowing for better design decisions than can
be commonly achieved in commodity software.
In order to deem an electronic voting system secure, one must con-
sider everything from the machine on which users make their se-
lections and the tabulator that counts votes to the poll workers on
election day and the layout of the polling place [16]. Our goal in
this work is to provide a provably correct electronic voting machine
that can provide a foundation for secure elections. We do not claim
that a provably correct voting machine is sufﬁcient for a secure vot-
ing system, but it is certainly necessary.
The paper is structured as follows. We mathematically specify the
intended behavior of the machine in Section 2. We describe the
design principles and architecture of our voting machine in Sec-
tion 3, the implementation in Section 4 and then discuss in Sec-
tions 5 and 6 how we formally veriﬁed that the components of the
implementation met their speciﬁcations. Section 7 explains how
we use systematic testing to check that the composed machine be-
haves as desired. Finally, we conclude the paper with a discussion
of related work and limitations of our approach.
2. SPECIFICATION
In order to validate a voting machine and guarantee its correctness,
we need to formalize the speciﬁcations and properties that we are
trying to prove. We focus on four veriﬁcation goals:
1. Each individual component of the voting machine must work
correctly (i.e., meet its speciﬁcation) when considered in isola-
tion;
2. When these components are composed, the resulting machine
must satisfy certain behavioral properties that we would expect
a correct voting machine to satisfy;
3. The voting machine must be structured in a way that makes our
use of systematic testing sound; and,
4. When conﬁgured with a particular election deﬁnition ﬁle, the
voting machine must display and allow selection of candidates
in accordance with the election deﬁnition, and must behave and
record votes in a way consistent with what a typical human voter
would expect.
The ﬁrst three are properties of the voting machine’s design alone
and thus can be veriﬁed once and for all, without any election-
speciﬁc information. The fourth is election-speciﬁc and, in our
approach, must be veriﬁed separately for each election.
To enable veriﬁcation of the ﬁrst three goals above, our speciﬁca-
tion includes the following three parts:
• for each component of the voting machine, a formal speciﬁca-
tion of the desired behavior of that component;
• behavioral properties of the voting machine, speciﬁed as state-
ments in some formal logic; and,
• structural properties, specifying which input variables and state
variables each state variable can depend upon.
Sections 3.2, 3.3, and 3.4 formalize these parts of the speciﬁca-
tion. In our approach, these are veriﬁed using formal veriﬁcation
techniques, namely, model checking [7] and satisﬁability check-
ing [32].
This leaves the question of how to formalize our fourth veriﬁca-
tion goal: that the voting machine must behave consistently with
human expectations. This is much more difﬁcult to cleanly specify
in a precise, mathematical manner. For instance, if there is a rect-
angular region on the screen that displays “Thomas Jefferson” in
some readable font, a human might expect that pressing that por-
tion of the screen would select Jefferson, causing Jefferson’s name
to be highlighted and eventually causing a vote to be recorded for
Jefferson if no other selection is subsequently made in this con-
test. However, because it involves semantic interpretation of the
contents of a particular screen image by a human it is not clear
how to specify this expected behavior in a precise, mathematical
fashion. For instance, given a bitmap image, mechanically rec-
ognizing which portions of the screen a human would expect to
correspond to a touchable region might require non-trivial image
processing; moreover, mechanically determining that the touchable
region should be associated with Thomas Jefferson might require
OCR and other complex computation. Formalizing these kinds of
human expectations in a formal logic would be horribly messy, and
probably error-prone as well.
We take a different approach: we involve humans in the validation
process. In particular, we ask human voters to cast test votes on the
voting machine during pre-election testing. We ask them to check
that the machine seems to be working correctly and recording their
votes accurately. We assume that if the machine behaves in a way
inconsistent with their expectations, they will notice and complain.
Consequently, if the voting machine passes all of these tests, then
at least we know that the voting machine has behaved in a way
consistent with human expectations during those tests. We assume
the voting machine will be used in the election only if it passes all
of these tests.
In addition, we formally verify that the voting machine behaves
deterministically. This ensures that the voting machine will behave
the same way on election day as it did in pre-election testing. So,
if a real voter interacts with the machine on election day in exactly
the same way as some tester did during pre-election testing, then
we can be conﬁdent that the machine will behave correctly and will
record the voter’s vote in accordance with the voter’s intentions.
However, this alone is not enough to provide useful guarantees in
464practice, because the number of tests needed to exhaustively test all
possible machine behaviors is astronomically large. For instance,
in an election with N contests and k choices in each contest, the
number of different ways to vote (assuming voters are only allowed
to vote for a single candidate in each contest) is kN , an exponential
function of N . Taking into account the possibility to change one’s
selections in a contest as many times as one likes, the number of
ways to interact with the voting machine becomes inﬁnitely large.
Clearly, we cannot exhaustively try all of these possibilities in pre-
election testing: we need something more selective.
Our approach involves conducting many fewer tests: something
like O(kN ) tests. We prove that, if the machine behaves as ex-
pected in each of these tests, then it will behave as expected for
every possible interaction. Of course, this does not follow in gen-
eral: for any ﬁxed set of tests, one can devise a machine that works
correctly on those tests but behaves incorrectly on some other in-
teraction. We are able to show that if the voting machine has a
particular structure, then a limited number of tests sufﬁce.
Very roughly speaking, if the state and behavior for each contest is
independent of the state of all other contests, it sufﬁces to choose
a test suite that attains 100% transition coverage in each individ-
ual contest and of navigation between contests, rather than 100%
coverage of the whole voting machine’s statespace. This can be
achieved with O(k) tests per contest, since the state space in a sin-
gle contest is only of size O(k) (whereas the statespace for the
entire voting machine has size O(kN ) and thus would require ex-
ponentially many tests to fully cover).
Therefore, we must verify that our voting machine has the appro-
priate structure needed in order to apply these results, e.g., that it
behaves deterministically and that its state and behavior in each
contest is independent of the state of all other contests. The struc-
tural properties, mentioned earlier and described in more detail in
Section 3.4, are intended to capture these requirements and ensure
that our use of systematic testing is sound.
It is also necessary to formalize what it means for the voting ma-
chine to behave as a human would expect. We model this in two
pieces: a model of human expectations for how the voting machine
should respond to inputs; and human interpretation of the meaning
of each screen image produced by the voting machine. We for-
malize the former by deﬁning a speciﬁcation voting machine (Sec-
tion 2.2), which captures our assumptions about how voters will
expect the voting machine to update its internal state in response
to inputs from the voter. The speciﬁcation machine speciﬁes, for
instance, how the set of candidates currently selected should be up-
dated when the voter presses a button. However, the speciﬁcation
machine does not specify what kinds of screen images should be
produced by the voting machine: it is solely concerned with the
evolution of the internal state of the machine.
Reasoning about the interface provided by the voting machine to
human voters requires us to reason about how humans will interpret
any particular screen image. Therefore, we assume the existence of
an interpretation function I that maps screen images to their hu-
man interpretation (Section 2.3). For the purposes of this paper,