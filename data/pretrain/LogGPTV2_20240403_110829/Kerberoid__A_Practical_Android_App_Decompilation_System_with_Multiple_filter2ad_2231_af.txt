all decompilers in the study and were covered by at least one
test12. Arlecchino produces semantically equivalent results
123 of the 137 classes that led to syntactically incorrect outputs for all
decompilers are not covered by any tests.
Table 6
Comparison of Arlecchino results with state of the art.
#Recompilable
3097 (79%)
3281 (84%)
3479 (89%)
3928 (100%)
#PassTest
1713 (71%)
1869 (78%)
2087 (87%)
2397 (100%)
Decompiler
CFR
Procyon
Arlecchino
Total
Deceptive
#
22 (1.27%)
33 (1.74%)
30 (1.42%)
-
Diﬀ
AST
0.05
0.08
0.06
-
for 59 out of 157 (37.6%) classes. It produces deceptive de-
compilationfor 11(7.0%)classesandfailstoproducerecom-
pilableresultsfor 87outof 157(55.4%)classes. Thesuccess
case where Arlecchino produces correct output is when: 1)
at least one compiler is able to read the correct signature for
all type members of a class and, 2) an error free decompila-
tion exists for all of these type members. However, when no
decompiler is able to decompile a speciﬁc type member or
that no decompiler reads correctly the signature of all type
members, no meta decompilation can be successful. These
results demonstrate that successful decompilation (in terms
ofbothsyntacticcorrectnessandsemanticequivalencemod-
ulo inputs) can be found by Arlecchino for classes where no
other decompilers can.
Table 6 shows the results obtained when running Ar-
lecchino on the whole dataset presented in Section 3 and
compares it with Procyon and CFR. Procyon is the de-
compilerthatscoresthehighestintermsofsyntacticcorrect-
ness as well as semantic equivalence modulo inputs, while
CFR scores the lowest in deceptive decompilation rate and
syntactic distortion. The ﬁrst column indicates the num-
ber of classes for which each decompiler produced syntac-
tically correct sources, among the 3928 from the dataset.
The second column shows the number of classes for which
each decompiler produced semantically correct modulo in-
puts sources among the 2397 classes covered by tests. The
third column indicates the number of deceptive decompi-
lations produced by each decompiler. The percentage of
deceptive decompilation is computed with #Deceptive ࢧ
(#Deceptive + #PassTests). The last column shows the
median syntactic distortion in number of edits per nodes in
the original AST.
Arlecchino produced syntactically correct sources for
3479 classes (89%).
It produces semantically equivalent
moduloinputssourcesfor 2087(87%)classes,and 30decep-
tive decompilations. Compared with Procyon, Arlecchino
produces syntactically correct sources for 198 more classes,
semantically correct modulo inputs sources for 218 more.
It also produces 3 less deceptive decompilations, and has
a lower syntactic distortion. Compared with CFR, Ar-
lecchino produces 8 more deceptive decompilations but it
produces semantically correct modulo inputs sources for
374 more classes.
In percentage of deceptive decompi-
lation among recompilable decompilation, Arlecchino pro-
duces 1.42% of deceptive decompilation which is lower than
Procyon’s 1.74% but slightly higher than CFR’s 1.27%.
Harrand et al.: Preprint submitted to Elsevier
Page 14 of 19
Java Decompiler Diversity and its Application to Meta-decompilation
used, meaning that there is no need for meta-decompilation.
For 287 classes, Arlecchino combines the output of 2 de-
compilers. It uses 3 and 4 decompilers for 20 classes and 2
classes respectively. The color indicates which decompiler’s
base solution was used. In the overwhelming majority, the
Procyon solution is used.
Figure 9 shows the distribution of transplanted frag-
ments’ origin for the 309 classes where several decompil-
ers are used. For 252 classes, one or more fragments from
CFR’s solution were transplanted to build Arlecchino’s so-
lution. 55 classes have fragments coming from Fernﬂower,
and the rest of the distribution is negligible. Note that Ar-
lecchino stops as soon as it ﬁnds an admissible solution.
Thus, the order of decompilers when building a solution
largely impacts this distribution.
Arlecchino produces a deceptive decompilation either
when the ﬁrst recompilable solution of a given type mem-
berisadeceptiveone, ortheassemblyofdiﬀerentfragments
introduces an error.
In order to minimize these problems, Arlecchino uses
Procyon as the ﬁrst decompiler and orders the other decom-
pilers by their deceptive decompilation rate.
Therefore, most of the decompilers’ deceptive decompi-
lations are for the same classes as Procyon’s one. In a lesser
way, deceptive decompilation originating from type mem-
bers decompiled with CFR aﬀect Arlecchino when those
type member are decompiled with syntactic errors by Pro-
cyon. Note that, as no software is free of bugs, the imple-
mentation of Arlecchino could also add new sources of er-
ror. In practice, as shown by Table 6, the number of decep-
tive decompilations (30) corresponds to a better deceptive
decompilation rate than all decompilers of this study except
CFR.
5.4.2. Case studies
and one failed meta decompilation.
Here we discuss two examples in details: one successful
In this example,
Success: Request. Listing 15 shows the decompiled
sources
for org.junit.runner.Request produced
by Procyon.
there are ambiguous
references because two types share the same simply
qualiﬁed name: both org.junit.runners.model and
org.junit.internal.runners contain a type named
InitializationError, therefore the decompiled sources
generated by Procyon lead to a compilation error.
Listing 16 shows the decompiled sources for org.
junit.runner.Request produced by CFR.
These
sources contain an error in the body of the static method
runner(Runner). Since this method contains an anony-
mous class, when the original sources are compiled, a syn-
thetic ﬁeld runner is created, by the compiler, for the
anonymous class. This ﬁeld contains the parameter runner
fromtheenclosingmethod. When CFRdecompilesthebyte-
code,itincorrectlyreplacesthestatementthatreturnsthepa-
rameteroftheenclosingmethodbyastatementthatreturnsa
Figure 8: Distribution of the number of decompilers used by
Arlecchino.
Figure 9: Distribution of the origin of transplanted fragments
in Arlecchino results.
Overall, Arlecchino scores higher than all studied de-
compilersintermsofsemanticcorrectnessaswellasseman-
tic equivalence modulo inputs, and ranks second in decep-
tive decompilation rate by a small margin. The rate of se-
manticallyequivalentdecompilationmoduloinputsishigher
because Arlecchino produces, by design, more syntactically
correct decompilations. On the other hand, the rate of de-
ceptive decompilation is slightly higher than CFR, as Ar-
lecchino aggregates some of the deceptive decompilations
from all used decompilers. This is, to our knowledge, the
ﬁrst implementation of this meta-decompilation approach.
It demonstrates the validity of the approach and adds a new
state of the art tool that practitioners can use to decompile
Java bytecode.
Note that Arlecchino also has its implementation ﬂaws
and may fail where other decompilers may succeed. In par-
ticular, not all AST nodes transplantation produce syntac-
tically correct code. But it may be used in conjunction of
other decompilers. The union of classes for which at least
one decompiler (including Arlecchino) produces semanti-
cally equivalent modulo inputs sources, presented in RQ5,
now covers 2299 out of 2397 classes (96%) of our dataset.
5.4.1. Remaining deceptive decompilations
In order to investigate deceptive decompilations pro-
duced by Arlecchino, we need to investigate the origins of
the AST fragments used in each decompilation.
Figure 8 shows the distribution of the number of decom-
pilers used by Arlecchino for each of the 2397 classes of our
dataset for which we have tests. Arlecchino ﬁnds no solution
for 166 classes. For 1922 classes, only one decompiler was
Harrand et al.: Preprint submitted to Elsevier
Page 15 of 19
1661922287202025507510001234#Decompilers% classesMain DecompilerCFR (43)Fernflower (13)JD−Core (2)Jode (2) None (166)Procyon (2171)25255191060255075100CFRFernflowerJADXJD−CoreJodeProcyonDecompiler% transplantationJava Decompiler Diversity and its Application to Meta-decompilation
1 import org.junit.runners.model.*;
2 import org.junit.internal.runners.*;
3 public abstract class Request {
4
5
[...]
public static Request classes(final Computer
6
7
8
9
10
11
12
13
14
15
16
computer, final Class... classes) {
try {
final AllDefaultPossibilitiesBuilder
builder = new
AllDefaultPossibilitiesBuilder(true);
final Runner suite =
computer.getSuite(builder, classes);
return runner(suite);
}
catch ( InitializationError e) {
throw new RuntimeException("Bug in saff's
brain: Suite constructor, called as
above, should always complete");
}
}
public static Request runner(final Runner runner)
{
return new Request() {
@Override
public Runner getRunner() {
return runner;
}
};
}
24 }Listing 15: Excerpt of org.junit.runner.Request
decompiled with Procyon.
17
18
19
20
21
22
23
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
1 import org.junit.runners.model.InitializationError;
2
3 public abstract class Request {
4
5
6
public static Request classes(Computer computer,
[...]
Class ... classes) {
try {
AllDefaultPossibilitiesBuilder builder =
new
AllDefaultPossibilitiesBuilder(true);
Runner suite = computer.getSuite(builder,
classes);
return Request.runner(suite);
}
catch (InitializationError e) {
throw new RuntimeException("Bug in saff's
brain: Suite constructor, called as
above, should always complete");
}
}
public static Request runner(Runner runner) {
return new Request(){
public Runner getRunner() {
return Runner.this;
}
};
}
25 }Listing 16: Excerpt of org.junit.runner.Request
decompiled with CFR.
1
2
3
4
5
6
7
8
9
private final Closure iDefault;
private SwitchClosure(final boolean clone,
final Predicate[] predicates,
final Closure[] closures,
final Closure defaultClosure) {
super();
iPredicates = clone ?
FunctorUtils.copy(predicates) :
predicates;
iClosures = clone ?
FunctorUtils.copy(closures) : closures;
}
10 -aaaaaiDefault = (Closure) (defaultClosure
11 -aaaaaaaaa== null ? NOPClosure.nopClosure() :
12 -aaaaaaaaadefaultClosure);
13 +aaaaathis.iDefault = (defaultClosure == null ?
14 +aaaaaaaaaNOPClosure.nopClosure() : defaultClosure);
15
Listing 17:
Excerpt of org.apache.commons.
collections4.functors.SwitchClosure, original
(in red marked with a -) and decompiled (in green marked
with a +).
ﬁeldthatdoesnotexistinthesources. Thisleadstoacompi-
lation error when attempting to recompile. Since our report,
CFR’s author has ﬁxed this bug.13
While both Procyon and CFR’s solutions contain
an error,
these errors are not
located on the same
type member. Hence, CFR’s fragment for the method
classes(Computer, Class[]) is transplanted on
Procyon’s solution. Since the pretty printer used by Ar-
lecchino only lists imports at a type granularity, and CFR’s
fragment contains references that are non-ambiguous, the
combined solution is recompilable and semantically equiva-
lent modulo input.
Failure: SwitchClosure. There are Java constructs for
which all decompilers struggle. In these cases, all decom-
pilers may produce an error on the same type member, and
this leads to a failed meta-decompilation. The following ex-
ample illustrates the problem of generic type lower bounds,
which challenges all decompilers.
Listing 17 shows an excerpt of the original sources
for org.apache.commons.collections4.functors.
SwitchClosure. The line highlighted in red is the orig-
inal line. The line highlighted in green is the correspond-
ing line as decompiled by Procyon, CFR and JD-Core.
None of them is able to correctly reproduce the cast to
super E>. This leads to a compilation er-
ClosurenopClosure() return
type is Closure, which is not a subtype of Closure in the general case.
As the decompiled sources for SwitchClosure pro-
duced by all decompilers contain at least one error on this
constructor, no solution is completable with the fragment
store at the end of Algorithm 1. Therefore, the meta decom-
pilation fails to produce recompilable sources.
13
https://github.com/leibnitz27/cfr/issues/50
Harrand et al.: Preprint submitted to Elsevier
Page 16 of 19
Java Decompiler Diversity and its Application to Meta-decompilation
5.5. Discussion
In this section we discuss how alternative design deci-
sions might be applied for meta decompilation. In particu-
lar, we discuss the use of diﬀerent oracles to choose among
decompiled fragments and the order of decompilers in Al-
gorithm 1.
A beneﬁt of embedding a compiler in the meta decompi-
ler is that it allows to use many diﬀerent oracles to pick
among the decompiled (and optionally recompiled) frag-
ments. Inthispaper, weusethesyntacticcorrectnessassess-
ment done by the compiler. But it would be possible to use
other oracles. For certain decompilation use cases, such as
source recovery, tests covering the original bytecode could
be available. In the case of reverse engineering, it is realistic