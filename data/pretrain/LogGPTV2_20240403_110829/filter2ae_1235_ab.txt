                    if ( v13 == ATL::CSimpleStringT::GetAt(&v52, 0) )
                    {
                      ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                      v14 = ATL::CSimpleStringT::GetBuffer(&v52);
                      itow_s(v42 + v40, v14, 0xAu, 10);
                      v15 = ATL::CSimpleStringT::GetAt(&serial, 2);
                      if ( v15 == ATL::CSimpleStringT::GetAt(&v52, 0) )
                      {
                        ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                        v16 = ATL::CSimpleStringT::GetBuffer(&v52);
                        itow_s(v44 + v34, v16, 0xAu, 10);
                        v17 = ATL::CSimpleStringT::GetAt(&serial, 3);
                        if ( v17 == ATL::CSimpleStringT::GetAt(&v52, 0) )
                        {
                          ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                          v18 = ATL::CSimpleStringT::GetBuffer(&v52);
                          itow_s(v48 + v36, v18, 0xAu, 10);
                          v19 = ATL::CSimpleStringT::GetAt(&serial, 4);
                          if ( v19 == ATL::CSimpleStringT::GetAt(&v52, 0) )
                          {
                            ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                            v20 = ATL::CSimpleStringT::GetAt(&username, 2);
                            v21 = (v20 & 1) + 5;
                            v49 = ((v20 >> 4) & 1) + 5;
                            v43 = ((v20 >> 1) & 1) + 5;
                            v45 = ((v20 >> 2) & 1) + 5;
                            v47 = ((v20 >> 3) & 1) + 5;
                            v22 = ATL::CSimpleStringT::GetAt(&username, 3);
                            v35 = (v22 & 1) + 1;
                            v41 = ((v22 >> 4) & 1) + 1;
                            v37 = ((v22 >> 1) & 1) + 1;
                            v23 = ((v22 >> 2) & 1) + 1;
                            v39 = ((v22 >> 3) & 1) + 1;
                            v24 = ATL::CSimpleStringT::GetBuffer(&v52);
                            itow_s(v21 + v23, v24, 0xAu, 10);
                            v25 = ATL::CSimpleStringT::GetAt(&serial, 6);
                            if ( v25 == ATL::CSimpleStringT::GetAt(&v52, 0) )
                            {
                              ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                              v26 = ATL::CSimpleStringT::GetBuffer(&v52);
                              itow_s(v47 + v39, v26, 0xAu, 10);
                              v27 = ATL::CSimpleStringT::GetAt(&serial, 7);
                              if ( v27 == ATL::CSimpleStringT::GetAt(&v52, 0) )
                              {
                                ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                                v28 = ATL::CSimpleStringT::GetBuffer(&v52);
                                itow_s(v43 + v41, v28, 0xAu, 10);
                                v29 = ATL::CSimpleStringT::GetAt(&serial, 8);
                                if ( v29 == ATL::CSimpleStringT::GetAt(&v52, 0) )
                                {
                                  ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                                  v30 = ATL::CSimpleStringT::GetBuffer(&v52);
                                  itow_s(v45 + v35, v30, 0xAu, 10);
                                  v31 = ATL::CSimpleStringT::GetAt(&serial, 9);
                                  if ( v31 == ATL::CSimpleStringT::GetAt(&v52, 0) )
                                  {
                                    ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                                    v32 = ATL::CSimpleStringT::GetBuffer(&v52);
                                    itow_s(v49 + v37, v32, 0xAu, 10);
                                    v33 = ATL::CSimpleStringT::GetAt(&serial, 10);
                                    if ( v33 == ATL::CSimpleStringT::GetAt(&v52, 0) )
                                    {
                                      ATL::CSimpleStringT::ReleaseBuffer(&v52, -1);
                                      ATL::CStringT>>::~CStringT>>(&v52);
                                      ATL::CStringT>>::~CStringT>>(&serial);
                                      ATL::CStringT>>::~CStringT>>(&username);
                                      return 1;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_2;
              }
            }
          }
        }
      }
    LABEL_2:
      ATL::CStringT>>::~CStringT>>(&v52);
      ATL::CStringT>>::~CStringT>>(&serial);
      ATL::CStringT>>::~CStringT>>(&username);
      return 0;
    }
#### 0x1 初步分析，输入有效性分析
username 只有4个字节。 serial 只有11字节，且第serial[5]=='-'。
#### 0x2 进一步分析，约束条件
这段代码量不是很多，只要细心，很快就能找出所有的限制条件。
  1. username[0~3]值域为['a','z']
  2. username[3] == 'p' //这个是题目给出的条件，非逆向所得。
  3. 0x0代码片段中有10个方程:
    ((username[0]&1)+5+(((username[1]>>2) & 1 )+1))==ord('7')-0x30
    ((((username[0]>>3) & 1)+5)+(((username[1]>>3)&1)+1))==ord('6')-0x30
    (((username[0]>>1) & 1)+5+(((username[1]>>4) & 1 )+1))==ord('8')-0x30
    (((username[0]>>2) & 1)+5+(((username[1]) & 1 )+1))==ord('7')-0x30
    (((username[0]>>4) & 1)+5+(((username[1]>>1) & 1 )+1))==ord('6')-0x30
    (((username[2]) & 1)+5+(((username[3]>>2) & 1 )+1))==ord('7')-0x30
    (((username[2]>>3) & 1)+5+(((username[3]>>3) & 1 )+1))==ord('7')-0x30
    (((username[2]>>1) & 1)+5+(((username[3]>>4) & 1 )+1))==ord('7')-0x30
    (((username[2]>>2) & 1)+5+(((username[3]) & 1 )+1))==ord('7')-0x30
    (((username[2]>>4) & 1)+5+(((username[3]>>1) & 1 )+1))==ord('6')-0x30
ord是python中的函数，功能是将字符转成对应int。为什么我要这么做呢？从逆向出的代码片段可知，原程序用itow_s将运算值转为文本，然后取文本的最高位和输入的ASCII进行比较，但是运算结果只有一位数，我就直接用加减0x30，其次z3条件里面好像不能有str()这样的函数出现。
#### 0x3 编写程序，取得flag！
    from z3 import *
    username = [BitVec('u%d'%i,8) for i in range(0,4)]
    solver = Solver() #76876-77776
    solver.add(((username[0]&1)+5+(((username[1]>>2) & 1 )+1))==ord('7')-0x30)
    solver.add(((((username[0]>>3) & 1)+5)+(((username[1]>>3)&1)+1))==ord('6')-0x30)
    solver.add((((username[0]>>1) & 1)+5+(((username[1]>>4) & 1 )+1))==ord('8')-0x30)
    solver.add((((username[0]>>2) & 1)+5+(((username[1]) & 1 )+1))==ord('7')-0x30)
    solver.add((((username[0]>>4) & 1)+5+(((username[1]>>1) & 1 )+1))==ord('6')-0x30)
    solver.add((((username[2]) & 1)+5+(((username[3]>>2) & 1 )+1))==ord('7')-0x30)
    solver.add((((username[2]>>3) & 1)+5+(((username[3]>>3) & 1 )+1))==ord('7')-0x30)
    solver.add((((username[2]>>1) & 1)+5+(((username[3]>>4) & 1 )+1))==ord('7')-0x30)
    solver.add((((username[2]>>2) & 1)+5+(((username[3]) & 1 )+1))==ord('7')-0x30)
    solver.add((((username[2]>>4) & 1)+5+(((username[3]>>1) & 1 )+1))==ord('6')-0x30)
    solver.add(username[3] == ord('p'))
    for i in range(0,4):
        solver.add(username[i] >= ord('a'))
        solver.add(username[i] 
* * *