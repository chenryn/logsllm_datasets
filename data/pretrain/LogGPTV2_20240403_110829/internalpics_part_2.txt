Query *subquery; /* the sub−query */
/*
* Fields valid in all RTEs:
*/
Attr *alias; /* user−written alias clause, if any */
Attr *eref; /* expanded reference names */
bool inh; /* inheritance requested? */
bool inFromCl; /* present in FROM clause */
bool checkForRead; /* check rel for read access */
bool checkForWrite; /* check rel for write access */
Oid checkAsUser; /* if not zero, check access as this user */
} RangeTblEntry;
PostgreSQL Internals 21
Var Structure
typedef struct Var
{
NodeTag type;
Index varno; /* index of this var’s relation in the range
* table (could also be INNER or OUTER) */
AttrNumber varattno; /* attribute number of this var, or zero for all */
Oid vartype; /* pg_type tuple OID for the type of this var */
int32 vartypmod; /* pg_attribute typmod value */
Index varlevelsup;
/* for subquery variables referencing outer
* relations; 0 in a normal var, >0 means N
* levels up */
Index varnoold; /* original value of varno, for debugging */
AttrNumber varoattno; /* original value of varattno */
} Var;
PostgreSQL Internals 22
TargetEntry Structure
typedef struct TargetEntry
{
NodeTag type;
Resdom *resdom; /* fjoin overload this to be a list?? */
Fjoin *fjoin;
Node *expr;
} TargetEntry;
PostgreSQL Internals 23
Query Structure
typedef struct Query
{
NodeTag type;
CmdType commandType; /* select|insert|update|delete|utility */
Node *utilityStmt; /* non−null if this is a non−optimizable
* statement */
int resultRelation; /* target relation (index into rtable) */
char *into; /* portal (cursor) name */
bool isPortal; /* is this a retrieve into portal? */
bool isBinary; /* binary portal? */
bool isTemp; /* is ’into’ a temp table? */
bool hasAggs; /* has aggregates in tlist or havingQual */
bool hasSubLinks; /* has subquery SubLink */
List *rtable; /* list of range table entries */
FromExpr *jointree; /* table join tree (FROM and WHERE clauses) */
List *rowMarks; /* integer list of RT indexes of relations
* that are selected FOR UPDATE */
List *targetList; /* target list (of TargetEntry) */
List *groupClause; /* a list of GroupClause’s */
Node *havingQual; /* qualifications applied to groups */
List *distinctClause; /* a list of SortClause’s */
List *sortClause; /* a list of SortClause’s */
Node *limitOffset; /* # of result tuples to skip */
Node *limitCount; /* # of result tuples to return */
Node *setOperations; /* set−operation tree if this is top level
* of a UNION/INTERSECT/EXCEPT query */
List *resultRelations; /* integer list of RT indexes, or NIL */
/* internal to planner */
List *base_rel_list; /* list of base−relation RelOptInfos */
List *join_rel_list; /* list of join−relation RelOptInfos */
List *equi_key_list; /* list of lists of equijoined
* PathKeyItems */
List *query_pathkeys; /* pathkeys for query_planner()’s result */
} Query;
PostgreSQL Internals 24
Query Output
{ QUERY
:command 3
:utility <>
:resultRelation 1
:into <>
:isPortal false
:isBinary false
:isTemp false
:hasAggs false
:hasSubLinks false
:rtable (
{ RTE
:relname friend
:relid 26914
:subquery <>
:alias <>
:eref
{ ATTR
:relname friend
:attrs ( "firstname" "lastname" "city" "state" "age" )
}
:inh false
:inFromCl false
:checkForRead false
:checkForWrite true
:checkAsUser 0
}
)
:jointree
{ FROMEXPR
:fromlist <>
:quals <>
}
:rowMarks ()
:targetList (
{ TARGETENTRY
:resdom
{ RESDOM
:resno 1
:restype 1042
:restypmod 19
:resname firstname
:reskey 0
:reskeyop 0
:ressortgroupref 0
PostgreSQL Internals 25
Optimizer
Scan Methods
Join Methods
Join Order
PostgreSQL Internals 26
Scan Methods
Sequential Scan
Index Scan
PostgreSQL Internals 27
Sequential Scan
D D D D D D D D D D D D
A A A A A A A A A A A A
Heap
T T T T T T T T T T T T
A A A A A A A A A A A A
PostgreSQL Internals 28
Btree Index Scan
Index
Heap
D D D D D D D D D D D D
A A A A A A A A A A A A
T T T T T T T T T T T T
A A A A A A A A A A A A
PostgreSQL Internals 29
Join Methods
Nested Loop
Merge Join
Hash Join
PostgreSQL Internals 30
Nested Loop Join
Table 1 Table 2
aag aai
aay aag
aar aas
aai aar
aay
aaa
aag
PostgreSQL Internals 31
Merge Join
Table 1 Table 2
aaa aaa
aab aab
Sorted
aac aab
Sorted
aad aac
aae
aaf
aaf
PostgreSQL Internals 32
Hash Join
Table 1 Table 2
aay aak aas
aag
aak aam aay aar
aar
Hashed
aao aaw
PostgreSQL Internals 33
Path Structure
typedef struct Path
{
NodeTag type;
RelOptInfo *parent; /* the relation this path can build */
/* estimated execution costs for path (see costsize.c for more info) */
Cost startup_cost; /* cost expended before fetching any
* tuples */
Cost total_cost; /* total cost (assuming all tuples
* fetched) */
NodeTag pathtype; /* tag identifying scan/join method */
/* XXX why is pathtype separate from the NodeTag? */
List *pathkeys; /* sort ordering of path’s output */
/* pathkeys is a List of Lists of PathKeyItem nodes; see above */
} Path;
PostgreSQL Internals 34
PathKeys Structure
typedef struct PathKeyItem
{
NodeTag type;
Node *key; /* the item that is ordered */
Oid sortop; /* the ordering operator (’<’ op) */
/*
* key typically points to a Var node, ie a relation attribute, but it
* can also point to a Func clause representing the value indexed by a
* functional index. Someday we might allow arbitrary expressions as
* path keys, so don’t assume more than you must.
*/
} PathKeyItem;
PostgreSQL Internals 35
RelOptInfo Structure
typedef struct RelOptInfo
{
NodeTag type;
/* all relations included in this RelOptInfo */
Relids relids; /* integer list of base relids (RT
* indexes) */
/* size estimates generated by planner */
double rows; /* estimated number of result tuples */
int width; /* estimated avg width of result tuples */
/* materialization information */
List *targetlist;
List *pathlist; /* Path structures */
struct Path *cheapest_startup_path;
struct Path *cheapest_total_path;
bool pruneable;
/* information about a base rel (not set for join rels!) */
bool issubquery;
bool indexed;
long pages;
double tuples;
struct Plan *subplan;
/* used by various scans and joins: */
List *baserestrictinfo; /* RestrictInfo structures (if
* base rel) */
Cost baserestrictcost; /* cost of evaluating the above */
Relids outerjoinset; /* integer list of base relids */
List *joininfo; /* JoinInfo structures */
List *innerjoin; /* potential indexscans for nestloop joins */
/*
* innerjoin indexscans are not in the main pathlist because they are
* not usable except in specific join contexts; we have to test before
* seeing whether they can be used.
*/
} RelOptInfo;
PostgreSQL Internals 36
Three-Table Join Query
SELECT part.price
FROM customer, salesorder, part
WHERE customer.customer_id = salesorder.customer_id AND
salesorder.part = part.part_id
PostgreSQL Internals 37
Three-Table Join, Pass 1, Part 1
(2 3 ): rows=575 width=76
path list:
HashJoin rows=575 cost=3.57..41.90
clauses=(salesorder.part_id = part.part_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(3) rows=126 cost=0.00..3.26
Nestloop rows=575 cost=0.00..1178.70
SeqScan(2) rows=575 cost=0.00..13.75
IdxScan(3) rows=126 cost=0.00..2.01
Nestloop rows=575 cost=0.00..1210.28
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(3) rows=126 cost=0.00..2.01
cheapest startup path:
Nestloop rows=575 cost=0.00..1178.70
SeqScan(2) rows=575 cost=0.00..13.75
IdxScan(3) rows=126 cost=0.00..2.01
cheapest total path:
HashJoin rows=575 cost=3.57..41.90
clauses=(salesorder.part_id = part.part_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(3) rows=126 cost=0.00..3.26
PostgreSQL Internals 38
Three-Table Join, Pass 1, Part 2
(1 2 ): rows=575 width=76
path list:
HashJoin rows=575 cost=3.00..40.75
clauses=(salesorder.customer_id = customer.customer_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(1) rows=80 cost=0.00..2.80
MergeJoin rows=575 cost=0.00..64.39
clauses=(salesorder.customer_id = customer.customer_id)
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
cheapest startup path:
MergeJoin rows=575 cost=0.00..64.39
clauses=(salesorder.customer_id = customer.customer_id)
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
cheapest total path:
HashJoin rows=575 cost=3.00..40.75
clauses=(salesorder.customer_id = customer.customer_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(1) rows=80 cost=0.00..2.80
PostgreSQL Internals 39
Three-Table Join, Pass 2, Part 1
(2 3 1 ): rows=575 width=112
path list:
HashJoin rows=575 cost=6.58..68.90
clauses=(salesorder.customer_id = customer.customer_id)
HashJoin rows=575 cost=3.57..41.90
clauses=(salesorder.part_id = part.part_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(3) rows=126 cost=0.00..3.26
SeqScan(1) rows=80 cost=0.00..2.80
HashJoin rows=575 cost=3.57..92.54
clauses=(salesorder.part_id = part.part_id)
MergeJoin rows=575 cost=0.00..64.39
clauses=(salesorder.customer_id = customer.customer_id)
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
SeqScan(3) rows=126 cost=0.00..3.26
HashJoin rows=575 cost=3.00..1205.70
clauses=(salesorder.customer_id = customer.customer_id)
Nestloop rows=575 cost=0.00..1178.70
SeqScan(2) rows=575 cost=0.00..13.75
IdxScan(3) rows=126 cost=0.00..2.01
SeqScan(1) rows=80 cost=0.00..2.80
PostgreSQL Internals 40
Three-Table Join, Pass 2, Part 2
MergeJoin rows=575 cost=0.00..1229.35
clauses=(salesorder.customer_id = customer.customer_id)
Nestloop rows=575 cost=0.00..1210.28
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(3) rows=126 cost=0.00..2.01
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
cheapest startup path:
MergeJoin rows=575 cost=0.00..1229.35
clauses=(salesorder.customer_id = customer.customer_id)
Nestloop rows=575 cost=0.00..1210.28
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(2) rows=575 cost=0.00..45.33
pathkeys=((salesorder.customer_id, customer.customer_id) )
IdxScan(3) rows=126 cost=0.00..2.01
IdxScan(1) rows=80 cost=0.00..10.88
pathkeys=((salesorder.customer_id, customer.customer_id) )
cheapest total path:
HashJoin rows=575 cost=6.58..68.90
clauses=(salesorder.customer_id = customer.customer_id)
HashJoin rows=575 cost=3.57..41.90
clauses=(salesorder.part_id = part.part_id)
SeqScan(2) rows=575 cost=0.00..13.75
SeqScan(3) rows=126 cost=0.00..3.26
SeqScan(1) rows=80 cost=0.00..2.80
PostgreSQL Internals 41
Plan Structure
typedef struct Plan
{
NodeTag type;
/* estimated execution costs for plan (see costsize.c for more info) */
Cost startup_cost; /* cost expended before fetching any
* tuples */
Cost total_cost; /* total cost (assuming all tuples
* fetched) */
/*
* planner’s estimate of result size (note: LIMIT, if any, is not
* considered in setting plan_rows)
*/
double plan_rows; /* number of rows plan is expected to emit */
int plan_width; /* average row width in bytes */
EState *state; /* at execution time, state’s of
* individual nodes point to one EState
* for the whole top−level plan */
List *targetlist;
List *qual; /* implicitly−ANDed qual conditions */
struct Plan *lefttree;
struct Plan *righttree;
List *extParam; /* indices of _all_ _external_ PARAM_EXEC
* for this plan in global
* es_param_exec_vals. Params from
* setParam from initPlan−s are not
* included, but their execParam−s are
* here!!! */
List *locParam; /* someones from setParam−s */
List *chgParam; /* list of changed ones from the above */
List *initPlan; /* Init Plan nodes (un−correlated expr
* subselects) */
List *subPlan; /* Other SubPlan nodes */
/*
* We really need in some TopPlan node to store range table and
* resultRelation from Query there and get rid of Query itself from
* Executor. Some other stuff like below could be put there, too.
*/
int nParamExec; /* Number of them in entire query. This is
* to get Executor know about how many
* param_exec there are in query plan. */
} Plan;
PostgreSQL Internals 42
Plan Output
DEBUG: plan:
{ SEQSCAN
:startup_cost 0.00
:total_cost 22.50
:rows 10
:width 12
:qptargetlist (
{ TARGETENTRY
:resdom
{ RESDOM
:resno 1
:restype 1042
:restypmod 19
:resname firstname
:reskey 0
:reskeyop 0
:ressortgroupref 0