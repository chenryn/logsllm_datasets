drive heads.
9.2.1 Recommendations
Direct register access is not detected by existing
anti-virus software. Current software in this ﬁeld
only watches for improper usage of the Palm OS
API function calls (such as the DmEraseDatabase
function).
Discerning a legitimate application from a malicious
application is challenging when direct register access
is involved. One solution is to prevent any third-
party application from direct register access. While
this would hinder legacy applications that did not
adhere to the published API, the minor loss in back-
wards compatibility would most likely be deemed
acceptable for the increase in security.
9.3 Memory Corruption
Devices using Flash memory supporting ﬁeld-
upgradeable operating systems have
inﬂection
points that ROM-based devices do not. Malicious
code is capable of taking advantage of the ﬁeld-
upgradeable capabilities of the Flash device to mod-
ify or destroy data. Through this, they can patch
the operating system with custom code or com-
pletely overwrite it. [9, 10] provides details of per-
forming operating system upgrades in the Flash
memory of Palm OS devices.
Figure 9: Possible design conﬁguration for a secure PDA
Successful attacks on Flash can be crippling for the
Palm OS device. The critical boot loader function-
ality for controlling ﬁeld-upgrades is often stored in
Flash. If this area is not properly protected using
the Software Protection and Boot-Block locking fea-
tures provided by the Flash memory device, it can
be altered. Complete erasure of the boot loader pre-
vents ﬁeld-reprogramming of the operating system
and will require the device to be returned to the fac-
tory for replacement. Any data not stored in pro-
tected areas of Flash memory is subject to erasure
or modiﬁcation, often without detection.
9.3.1 Recommendations
Current implementations of Palm OS devices do not
use any Flash memory for application data stor-
age and is used solely to store the operating sys-
tem itself. All applications and data reside on
battery-backed RAM. Therefore, a trivial solution
for security-critical deployments would be to use de-
vices that store the OS in ROM (such as the PalmPi-
lot family) or guarantee that the entire Flash device
is read-only. A similar scenario (Figure 9) would be
to use a ROM device for all boot loading and Flash
memory upgrade routines, still leaving the actual
operating system in Flash. This would allow the
critical routines to be protected and still allow the
OS to be upgraded. It is apparent that the current
PDA model places convenience of OS upgrades of
greater importance than security.
A disadvantage to using Flash memory for the stor-
age of applications and other often-modiﬁed data is
the low amount of write-cycles (typically ≈10,000)
guaranteed during the memory’s lifetime. Given
that RAM has no such limitation, it is still a natural
choice for this type of data storage.
The Boot-Block areas of Flash memory could be
used to implement a secure boot process similar
to [1], which will guarantee the integrity of the sys-
tem.
Implementing a hardware-based memory manage-
ment unit (MMU) will aid in supplying memory
isolation and preventing applications from unau-
thorized access to external memory. The MMU,
commonly designed into embedded microprocessors,
is not available in the DragonBall core. For pur-
poses of Palm OS devices, this unit could be im-
plemented in an application-speciﬁc IC (ASIC) or
programmable logic device.
It is hoped that an
MMU is designed into the ARM core for future
DragonBall processors. The MMU is located on the
address and data buses between the microproces-
sor and the external memory.
If the address re-
quested for read/write access is outside of a legal,
pre-deﬁned range, the MMU can either prevent the
operation outright or respond back to the processor
in some manner.
It should be noted that solely implementing an
MMU is not enough for proper memory protection.
If the Palm OS is modiﬁed by an adversary, it may
still be possible to access “restricted” areas of Flash.
Using [1] in conjunction with an MMU implementa-
tion will work nicely, as there is integrity to guaran-
tee that the operating system and underlying com-
ponents are trusted and there is hardware-based
memory protection for fault isolation. Figure 9 is
one possible design conﬁguration. The ROM and
the MMU could be internal to the CPU, depend-
ing on its type. The MMU will monitor the address
and data buses as described previously. The en-
tire conﬁguration could be designed as an ASIC or
as a secure cryptographic coprocessor, along with
the proper tamper-response and physical protection
systems as recommended in [4, 6].
Another solution to the problem of accessible Flash
uPMMUROMBoot LoaderRAMApplicationsFlashOperatingSystemA/Dmemory and risks of intentional corruption would
be to introduce hardware jumper protection. This
would physically allow or prevent writing to the
Flash device.
In order to accomplish this, a user
would typically have to place a jumper or depress a
button to enable or disable writing to Flash mem-
ory areas. Such a jumper could be connected to the
Chip Enable, Write Enable, or Output Enable line
of the memory device. Alternatively, it could en-
able circuitry that would connect the required ad-
dress lines between the processor and memory de-
vice. When enabling ﬁeld-upgradeable functional-
ity, some modicum of due diligence must be taken
to ensure integrity and authorization for such ac-
tions. Even if the hardware jumper was only active
for the regions storing the base operating system,
this would increase the security of the system.
If
applications are stored in Flash in future devices,
the same scenario would exist and the user would
have to physically “approve” each application as it
is loaded into their device. This, however, is tedious
for the user and could easily be bypassed with sim-
ple modiﬁcations to the hardware.
Secure coprocessors, such as [8, 26], enable secure
distributed applications by providing safe havens
where an application program can execute, free of
observation and interference by an adversary with
direct physical access to the device [26]. Designing
such a conﬁguration into the underlying Palm OS
hardware will greatly enhance the security of the de-
vice and may minimize enough risk to be a suitable
platform for security-based applications. It is pos-
sible that smartcards can serve as interim crypto-
graphic coprocessors for portable devices [28]. Ad-
ditionally, [3] proposes a software-based solution of
using PDAs as cryptographic tokens.
Currently, Palm OS devices are extremely vulner-
able to Flash memory attacks and have no protec-
tion mechanisms as described in this section. This is
quite possibly the case for other PDAs and portable
devices, as well.
10 Conclusions
has been pointed out that a variety of problems exist
that can be exploited at both the operating system
and hardware levels. Speciﬁc changes to Palm OS
and its associated hardware were recommended and
would be required to begin to properly implement
preventive measures.
For solutions, it becomes apparent that implement-
ing layer-based access control may be necessary to
allow the application level to communicate only
with the operating system. Conjunctively, these
access control mechanisms would allow the oper-
ating system only to communicate with the hard-
ware. The current design of the Palm OS soft-
ware and hardware is not laid out in this fashion.
As a result, many of the attacks discussed in this
paper remain extremely diﬃcult to defend against
with third-party software running at the application
layer.
If future versions of Palm OS allow third-
party applications to run as multi-threaded, anti-
virus applications could essentially run in the “back-
ground” and use monitoring techniques as proven
useful in desktop environments. Additionally,
it
may be possible to emulate a virtual machine that
provides integrity and memory protection. Virtual
memory areas of RAM used during cryptographic
operations can be encrypted similar to [24] to pro-
tect temporarily stored plaintext.
The cryptographic code signing of applications has
been used in many ActiveX scripts and Java applets
for a number of years. Portable devices should em-
ploy such methods to verify the integrity of trusted
applications. Ideally, the code signing routines and
resultant signatures would be stored in ROM along
with the Certiﬁcate Authority (CA) public key of
the product vendor.
It may be possible to store
signatures in Secure Digital (SD) external memory
cards (which are planned to be designed into Palm
OS devices in late 2001) or Handspring’s Spring-
board modules.
In lieu of any operating system upgrades or hard-
ware re-designs, there are a number of simple and
immediate precautionary measures a user can ex-
ercise to reduce the risk of data theft or malicious
attacks:
In this paper, we analyzed the design of the Palm OS
and hardware platform with respect to data storage
issues, improper security design, and malicious code
threats. Vulnerable and at-risk areas were identiﬁed
that could be taken advantage of for such attacks. It
• Be aware of what applications are being loaded
onto the portable device.
If an application
comes from an untrusted source, extra care
must be taken. This may entail using an ex-
isting anti-virus package on the PC to scan the
ﬁle for known threats or testing the application
functionality on a spare device.
• Monitor the HotSync Log and Last HotSync
Operation date to verify that there were no
unauthorized HotSync operations performed.
• Disable the “Beam Receive” functionality in
the System Preferences panel. Enable this fea-
ture only when necessary. This prohibits any-
one from beaming information to the Palm OS
device.
• Be aware of the physical location of your Palm
device at all times. Attaching a belt clip or
lanyard will reduce loss, misplacement, or theft.
Because Palm OS devices account for the majority
of the PDA market, it is hoped that the research in
this paper is used to create a more secure computing
environment in the short term. It is also hoped that
the analyses and ideas provided in this paper will be
used in future work to design more secure products.
In the current state, caution should be taken when
employing portable devices for security purposes. In
a War College-style approach, it is believed by the
authors that oftentimes the simple knowledge of a
vulnerable area is enough to help steer the user to-
wards more security-conscious use.
Acknowledgments
The authors would like to thank @stake’s Research
Labs, especially Brian Carrier, for constructive crit-
icism and interesting discussions.
References
[1] W. Arbaugh, D. Farber, and J. Smith, “A
Secure and Reliable Bootstrap Architecture,”
IEEE Security and Privacy Conference, May
1997.
[2] ARM, Ltd., “Motorola’s DragonBall Proces-
sor Portfolio to Include ARM Architecture in
2001,” Press Release, December 11, 2000.
[3] D. Balfanz and E. Felten, “Hand-Held Comput-
ers Can Be Better Smart Cards,” 8th USENIX
Security Symposium, Washington, D.C., Au-
gust 1999.
[4] D. Chaum, “Design Concepts for Tamper Re-
sponding Systems,” Advances in Cryptology:
Proceedings of Crypto ’83, 1984.
[5] E. Chien, “Malicious Threats to PDAs & Pro-
totype Solutions,” Virus Bulletin Conference
2000, September 2000.
[6] A.J. Clark, “Physical Protection of Crypto-
graphic Devices,” Advances in Cryptology: EU-
ROCRYPT ’87, 1988.
[7] I. Goldberg, D. Wagner, R. Thomas, and E.
A. Brewer, “A Secure Environment for Un-
trusted Helper Applications,” 6th USENIX Se-
curity Symposium, San Jose, California, July
1996.
[8] P. Gutmann, “An Open-Source Cryptographic
Coprocessor,” 9th USENIX Security Sympo-
sium, Denver, Colorado, August 2000.
[9] T. Harbaum,
April
http://bodotill.suburbia.com.au/
flashy/flashy.html.
“Flashlib,”
1999,
[10] T. Harbaum, “OS Flash,” September 2000,
http://bodotill.suburbia.com.au/
osflash/osflash.html.
[11] IDC, “Market Mayhem: The Smart Handheld
Devices Market Forecast and Analysis, 1999-
2004,” Report 22430, June, 2000.
[12] I. Jermyn, A. Mayer, F. Monrose, M. Reiter, A.
Rubin, “The Design and Analysis of Graphical
Passwords,” 8th USENIX Security Symposium,
Washington, D.C., August 1999.
[13] E. Keyes, “Hacking the Pilot: Bypassing the
Palm OS,” PDA Developers 4.6, November
1996.
“Palm
OS
Beam
[14] Kingpin,
Bit
Modiﬁcation
1999,
http://www.atstake.com/research/tools/
beamcrack.zip.
January
Tool,”
[15] Kingpin,
“Palm OS
and Decoding,”
Password
@stake
trieval
rity Advisory,
26,
http://www.atstake.com/research/
advisories/2000/a092600-1.txt.
September
Re-
Secu-
2000,
[16] Kingpin, “Palm OS Password Lockout By-
pass,” @stake Security Advisory, March 1,
2001, http://www.atstake.com/research/
advisories/2001/a030101-1.txt.
[17] D. Klein, “Foiling the cracker: A survey of,
and improvements to, password security,” 2nd
USENIX Security Workshop, August 1990.
[18] McAfee.com, “Increased Protection for Wire-
less Users in Wake of Recent PDA Trojan Dis-
covery,” Press Release, September 5, 2001.
[19] United States General Accounting Oﬃce, Re-
port
to the Chairman, Subcommittee on
Telecommunications and Finance, Committee
on Energy and Commerce – House of Rep-
resentatives, “Virus Highlights Need for Im-
proved Internet Management,” GAO/IMTEC-
89-57, June 1989.
[20] Palm, Inc., Palm OS Programmer’s Compan-
ion, DN 3004-003.
[21] Palm, Inc., Palm OS Programming Develop-
ment Tools Guide, DN 3011-002.
[22] Palm, Inc., Palm OS SDK Reference, DN 3003-
003.
[23] W. T. Polk and L. E. Bassham, “A Guide to the
Selection of Anti-Virus Tools and Techniques,”
National Institute of Standards and Technology
Computer Security Division, SP 800-5, Decem-
ber 1995.
[24] N. Provos, “Encrypting Virtual Memory,” 9th
USENIX Security Symposium, Denver, Col-
orado, August 2000.
[25] B. Schneier, “The Trojan Horse Race,” Com-
munications of the ACM, Volume 42, Number
9, September 1999.
[26] S.W. Smith and S.H. Weingart, “Building a
High-Performance, Programmable Secure Co-
processor,” Computer Networks (Special Issue
on Computer Network Security), 31: 831-860,
April 1999.
[27] TRG
“FlashPro,”
http://www.trgnet.com/cat-flashpro.htm
Products,
Inc.,
[28] University
of
Research
Card
http://www.citi.umich.edu/projects/
smartcard.
Michigan,
At
“Smart
CITI,”