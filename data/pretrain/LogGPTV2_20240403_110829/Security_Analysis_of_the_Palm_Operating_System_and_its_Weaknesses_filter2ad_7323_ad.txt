# 9.2.1 Recommendations

Current antivirus software does not detect direct register access, instead focusing on improper usage of Palm OS API function calls, such as `DmEraseDatabase`. Distinguishing between legitimate and malicious applications becomes challenging when direct register access is involved. One potential solution is to prohibit third-party applications from accessing registers directly. While this approach may affect legacy applications that do not adhere to the published API, the minor loss in backward compatibility would likely be deemed acceptable for the enhanced security.

# 9.3 Memory Corruption

Devices using Flash memory for field-upgradeable operating systems have vulnerabilities that ROM-based devices do not. Malicious code can exploit the field-upgradeable capabilities of Flash memory to modify or destroy data, including patching the operating system with custom code or completely overwriting it. For more details on performing operating system upgrades in the Flash memory of Palm OS devices, refer to [9, 10].

## 9.3.1 Recommendations

Current Palm OS devices use Flash memory exclusively for storing the operating system, while all applications and data reside in battery-backed RAM. A simple solution for security-critical deployments is to use devices that store the OS in ROM (e.g., the PalmPilot family) or ensure that the entire Flash device is read-only. Another option is to use a ROM device for boot loading and Flash memory upgrade routines, while keeping the actual operating system in Flash. This configuration protects critical routines and still allows for OS upgrades.

### Flash Memory Write Cycles
Flash memory has a limited number of write cycles (typically around 10,000), making it unsuitable for frequently modified data. RAM, which has no such limitation, remains the preferred choice for storing applications and other dynamic data.

### Secure Boot Process
The Boot-Block areas of Flash memory can be used to implement a secure boot process, ensuring the integrity of the system. This can be similar to the method described in [1].

### Memory Management Unit (MMU)
Implementing a hardware-based MMU can provide memory isolation and prevent unauthorized access to external memory. The MMU, typically found in embedded microprocessors, is not available in the DragonBall core. For Palm OS devices, an MMU could be implemented in an ASIC or programmable logic device. Future DragonBall processors should include an MMU in the ARM core. The MMU would monitor the address and data buses between the microprocessor and external memory, preventing operations outside predefined legal ranges.

### Hardware Jumper Protection
Another solution is to introduce hardware jumper protection, allowing or preventing writing to the Flash device. This would require the user to place a jumper or depress a button to enable or disable writing to Flash memory. Such a jumper could be connected to the Chip Enable, Write Enable, or Output Enable line of the memory device. This would increase the security of the system, especially if applied to regions storing the base operating system.

### Secure Coprocessors
Secure coprocessors, such as those described in [8, 26], can enhance the security of Palm OS devices by providing a safe environment for application execution. Smartcards can also serve as interim cryptographic coprocessors for portable devices [28]. Additionally, [3] proposes using PDAs as cryptographic tokens.

### Current Vulnerabilities
Palm OS devices are highly vulnerable to Flash memory attacks and lack the protection mechanisms discussed. This vulnerability is likely shared by other PDAs and portable devices.

# 10 Conclusions

This paper has identified several vulnerabilities in the Palm OS and its associated hardware. Specific changes are recommended to implement preventive measures. Layer-based access control and the use of virtual machines for integrity and memory protection are potential solutions. Cryptographic code signing, as used in ActiveX scripts and Java applets, should be employed to verify the integrity of trusted applications. 

### Immediate Precautionary Measures
Until these changes are implemented, users can take several immediate steps to reduce the risk of data theft or malicious attacks:
- Be cautious about the applications loaded onto the device.
- Monitor the HotSync Log and Last HotSync Operation date for unauthorized activities.
- Disable the "Beam Receive" functionality in System Preferences.
- Keep the physical location of the device secure.

### Acknowledgments
The authors thank @stakeâ€™s Research Labs, particularly Brian Carrier, for their constructive criticism and discussions.

### References
[References listed as provided in the original text.]