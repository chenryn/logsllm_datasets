  "registeredResources": [             
    {                 
      "name": "CPU",                 
      "type": "INTEGER",                 
      "integerValue": 1024             
    },
    {                 
       "name": "MEMORY",                 
       "type": "INTEGER",                 
       "integerValue": 993             
    },
    {
       "name": "PORTS",                 
       "type": "STRINGSET",                 
       "stringSetValue": ["22","2376","2375","51678","51679"]
    }
  ],
  "remainingResources": [ 
    { 
      "name": "CPU", 
      "type": "INTEGER", 
      "integerValue": 774 
    },
    { 
       "name": "MEMORY", 
       "type": "INTEGER", 
       "integerValue": 593 
    },
    {
       "name": "PORTS", 
       "type": "STRINGSET", 
       "stringSetValue": ["22","2376","2375","51678","51679"]
    }
  ],
  ...
  ...
}
```
`registeredResources`属性定义了分配给实例的总资源，而`remainingResources`表示每个资源的当前剩余数量。因为上例中的事件是在 ECS 为 todobackend 服务启动新的 ECS 任务时引发的，所以分配给该任务的总共 250 个 CPU 单元和 400 MB 内存从`registeredResources`中扣除，然后反映在`remainingResources`属性中。还要注意，在示例 12-6 的输出顶部，该事件包括其他有用的信息，例如 ECS 集群 ARN 和 ECS 容器实例 ARN 值(由`clusterArn`和`containerInstanceArn`属性指定)。
# 对计算集群容量的 Lambda 函数进行编程
现在，您已经设置了 CloudWatch 事件和 Lambda 函数，每当检测到 ECS 容器实例状态更改时，就会调用该函数，现在，您可以在 Lambda 函数中实现所需的应用代码，该代码将执行适当的 ECS 集群容量计算:
```
...
...
Resources:
  ...
  ...
  EcsCapacityFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - EcsCapacityLogGroup
    Properties:
      Role: !Sub ${EcsCapacityRole.Arn}
      FunctionName: !Sub ${AWS::StackName}-ecsCapacity
      Description: !Sub ${AWS::StackName} ECS Capacity Manager
      Code:
 ZipFile: |
 import json
          import boto3
          ecs = boto3.client('ecs')
          # Max memory and CPU - you would typically inject these as environment variables
          CONTAINER_MAX_MEMORY = 400
          CONTAINER_MAX_CPU = 250
          # Get current CPU
          def check_cpu(instance):
            return sum(
              resource['integerValue']
              for resource in instance['remainingResources']
              if resource['name'] == 'CPU'
            )
          # Get current memory
          def check_memory(instance):
            return sum(
              resource['integerValue']
              for resource in instance['remainingResources']
              if resource['name'] == 'MEMORY'
            )
          # Lambda entrypoint
          def handler(event, context):
            print("Received event %s" % json.dumps(event))
            # STEP 1 - COLLECT RESOURCE DATA
            cluster = event['detail']['clusterArn']
            # The maximum CPU availble for an idle ECS instance
            instance_max_cpu = next(
              resource['integerValue']
              for resource in event['detail']['registeredResources']
              if resource['name'] == 'CPU')
            # The maximum memory availble for an idle ECS instance
            instance_max_memory = next(
              resource['integerValue']
              for resource in event['detail']['registeredResources']
              if resource['name'] == 'MEMORY')
            # Get current container capacity based upon CPU and memory
            instance_arns = ecs.list_container_instances(
              cluster=cluster
            )['containerInstanceArns']
            instances = [
              instance for instance in ecs.describe_container_instances(
                cluster=cluster,
                containerInstances=instance_arns
              )['containerInstances']
              if instance['status'] == 'ACTIVE'
            ]
            cpu_capacity = 0
            memory_capacity = 0
            for instance in instances:
              cpu_capacity += int(check_cpu(instance)/CONTAINER_MAX_CPU)
              memory_capacity += int(check_memory(instance)/CONTAINER_MAX_MEMORY)
            print("Current container cpu capacity of %s" % cpu_capacity)
            print("Current container memory capacity of %s" % memory_capacity)
            # STEP 2 - CALCULATE OVERALL CONTAINER CAPACITY
            container_capacity = min(cpu_capacity, memory_capacity)
            print("Overall container capacity of %s" % container_capacity)
            # STEP 3 - CALCULATE IDLE HOST COUNT
            idle_hosts = min(
              cpu_capacity / int(instance_max_cpu / CONTAINER_MAX_CPU),
              memory_capacity / int(instance_max_memory / CONTAINER_MAX_MEMORY)
            )
            print("Overall idle host capacity of %s" % idle_hosts)
      Runtime: python3.6
      MemorySize: 128
      Timeout: 300
      Handler: index.handler
...
...
```
在前面的示例中，您首先定义了您的群集将支持的 ECS 任务的最大 CPU 和最大内存，这是进行各种群集容量计算所必需的，我们使用当前为 todobackend 服务配置的 CPU 和内存设置，因为这是我们群集上唯一支持的应用。在`handler`功能中，第一步是使用接收到的 CloudWatch 事件收集当前资源容量数据。该事件包括`registeredResources`属性中有关您的 ECS 容器实例的最大容量的详细信息，还包括该实例所属的 ECS 集群。该函数首先列出集群中的所有实例，然后使用 ECS 客户端上的`describe_container_instances`调用加载每个实例的详细信息。
在每个实例上收集的信息仅限于活动实例，因为您不希望包含可能处于 DRAINING 状态或其他非活动状态的实例的资源。
The code in the preceding example, will only work correctly in a Python 3.x environment, so ensure your Lambda function is configured to use Python 3.6.
收集了关于每个 ECS 容器实例的必要信息后，您可以遍历每个实例并计算 CPU 和内存容量。这将调用帮助器函数来查询每个实例的`remainingResources`属性，返回每个资源的当前可用容量。每一个计算都是用您前面定义的最大容器来表示的，并被加在一起以提供整个集群的 CPU 和内存容量，这是为了提供信息而打印的。
下一步是计算整体容器容量，这很容易通过取先前计算的资源容量的最小值来计算，这将用于确定您的 ECS 群集何时需要横向扩展，至少是在容器容量降至零以下时。最后，进行空闲主机容量计算–该值将用于确定您的 ECS 群集何时应进行扩展，这只有在空闲主机容量大于 1.0 时才会发生，如前所述。
# 添加用于计算群集容量的 IAM 权限
关于前面例子中的代码，需要注意的一点是，它需要调用 ECS 服务并执行`ListContainerInstances`和`DescribeContainerInstances` API 调用的能力。这意味着您需要向 Lambda 函数 IAM 角色添加适当的 IAM 权限，如下例所示:
```
...
...
Resources:
  ...
  ...
  EcsCapacityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: EcsCapacityPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: ListContainerInstances
 Effect: Allow
 Action:
 - ecs:ListContainerInstances
 Resource: !Sub ${ApplicationCluster.Arn}
 - Sid: DescribeContainerInstances
 Effect: Allow
 Action:
 - ecs:DescribeContainerInstances
 Resource: "*"
 Condition:
 ArnEquals:
 ecs:cluster: !Sub ${ApplicationCluster.Arn}
              - Sid: ManageLambdaLogs
                Effect: Allow
                Action:
                - logs:CreateLogStream