# Using Replicated Execution for a More Secure and Reliable Web Browser

**Authors:**
- Hui Xue
- Nathan Dautenhahn
- Samuel T. King

**Affiliation:**
University of Illinois at Urbana-Champaign

## Browsers: Important Application Platforms
- Email, banking, shopping, social networking, and more.

## Browsers Are Not Safe
- **Vulnerabilities in 2010:**
  - Internet Explorer: 59 new vulnerabilities
  - Firefox: 100 new vulnerabilities
  - Safari: 119 new vulnerabilities
  - Chrome: 191 new vulnerabilities
- Attackers often target browsers, as evidenced by studies from the University of Washington, Microsoft, and Google.

## Example: Firefox Browser Exploit
- **Firefox 3.0.x Malicious Popup (CVE-2009-3076)**
  - This exploit demonstrates how a malicious popup can be triggered in Firefox.

## Example: Opera Exploit Fails
- **Opera Shows No Popup**
  - The same exploit does not work in Opera, highlighting the importance of browser-specific vulnerabilities.

## Reason: Browser-Specific Vulnerabilities
- Different browsers have different code bases.
- A bug is often unique to one specific browser.

## Cocktail: Mixing Browsers for Better Security
- **Overview:**
  - Example
  - Observation
  - Design
    - Non-determinism
  - Implementation
  - Evaluation
  - Conclusion

### How Cocktail Works: Example
- **HTTP GET Request:**
  - User clicks on a link, triggering an HTTP GET request.
  - The proxy intercepts and replicates the request to multiple browsers.
  - The response from the server is then compared across the browsers.

### Withstanding False Positives/Attacks
- **Handling Malformed URLs:**
  - Browsers treat malformed URLs differently, which can lead to false positives.
  - Cocktail uses a voting mechanism to determine the correct response.

### Observation: Opportunistic N-Version Programming
- **Different Code Bases + DOM:**
  - Different browsers follow the same specification but implement it slightly differently.

### How to Compare Different Browsers?
- **States to Compare:**
  - Display: Visual-based page layout abstraction
  - Network: Interaction with the server
  - Client-side non-determinism

### Challenge: Interaction with Server
- **Pages from the Server Can Be Different:**
  - The content served by the server may vary, leading to discrepancies between browsers.

### Request Duplication Is Bad
- **Time Difference:**
  - Pages can get updated, leading to inconsistencies.
- **Post Requests:**
  - Output commitment issues can arise.

### Solution: Proxy Replication
- **Avoid Major Changes to Browsers:**
  - Browsers self-update easily.
  - Open-source is not required.
- **Proxy Replication:**
  - Replicate incoming network data using a proxy.
- **HTTPS Handling:**
  - Man-in-the-middle (MITM) approach.

### Solution: Proxy Replication
- **One Browser as Seen by the Server:**
  - The proxy ensures that the server sees only one browser, while replicating the data to multiple browsers.

### Challenge: Client-Side Non-Determinism
- **Same Page Content, Different Execution Result:**
  - Script-related randomness and browser-specific behaviors can lead to non-deterministic results.

### Client Non-Determinism Summary
- **Script-Related Randomness:**
  - `Math.random()`, `new Date()`
  - Browser-specific values: `window.opera`, `navigator.appName`
  - Browser locale: "en-us" vs. "en-US"
- **Browser-Specific Behaviors:**
  - E.g., Opera community features

### Solution
- **Extension Modifies Script Execution:**
  - Overwrite `Math`, `Date`, `window.opera` to eliminate non-determinism.
- **Browser Configuration Change:**
  - Disable specific features like Opera community.
  - Adjust browser locale settings.

### False Positive
- **Browsers Treat Malformed URLs Differently:**
  - This can lead to false positives, which Cocktail mitigates through its voting mechanism.

### Why Cocktail Is More Secure
- **Voting Mechanism:**
  - Only two out of three browsers need to agree to proceed.
- **Elimination of Non-Determinism:**
  - Extensions help to standardize script execution.
- **Uncompromised Browser:**
  - If it looks and acts like a good browser, it likely is one.

### Implementation
- **UI Replication:**
  - Recorder and replayer: Extension
  - Passing UI events across browsers: Proxy
- **UI Display Capturing and Voting:**
  - ImageMagick and OpenCV
- **Proxy:**
  - OpenSSL for MITM

### Evaluation
- **Security Analysis:**
  - User interaction: CVE-2009-3076
  - Heap overflow: CVE-2009-2477
  - DOS attack: Firefox 3.0.4, April 2009
  - Same origin policy bypassing: CVE-2007-0981
- **Performance:**
  - 30% slower compared to Firefox

### Conclusion
- **Mixing Different Browsers for Better Security:**
  - Practical N-Version programming for browsers.
  - Solutions for design challenges.
  - Security shifted to a thin layer instead of a large software system.

## Thank You!
- **Q&A:**
- **Contact:**
  - Hui Xue (PI: EMAIL)
  - [Personal Website](https://netfiles.uiuc.edu/huixue2/www/)

---

This optimized version aims to make the text more clear, coherent, and professional.