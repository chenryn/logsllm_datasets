(&(objectCategory=computer)(objectClass=computer)(userAccountControl:1.2.840.113556.1.4.803:=16777216))
以adfind为例(其他支持ldap的工具都可以实现)
2.找到该服务账号委派1委派的服务账户2
约束的资源委派，除了配置TRUSTEDTOAUTHFORDELEGATION 之外，还有个地方是存储对哪个spn 进行委派的，位于msDS-AllowedToDelegateTo ，查询该服务账号的msDS-AllowedToDelegateTo位
3.通过一定手段拿下这个服务账户1
4.发起一个从服务1到服务2的正常的约束委派的流程，从而访问服务2
这个流程见上面的委派>约束委派，使用rubeus也可以很方便得进行一键访问，详细利用见部分相关工具>rubrus>s4u)，从而访问到这个服务账户委派的服务
使用约束委派也可以很方便得留下后门，如果我们配置了服务1到服务2的约束委派，那么只要我们控制服务1，也就可以访问服务2。服务2可以是任何服务。比如服务2是krbtgt，那么只要我们控制着服务1，那么模拟任意用户最后生成的TGS就是任意用户的TGT，这算是一种变形的黄金票据。如果服务2是CIFS/域控计算账户，那么只要我们控制着服务1，是不是就可以随时从域控里面提取任意用户的hash。思路挺多的，懂得约束委派的原理就可以自己扩展。
###  6\. 基于资源的约束委派攻击
基于资源的约束委派具有传统的约束委派的所有安全问题，但是相较于传统的约束委派。基于资源的约束委派的利用又相对较为简单。
主要体现为，普通的约束委派的配置需要SeEnableDelegation权限，而这个权限通常仅授予Domain
Admins。因此我们对普通的约束委派的利用，往往在于寻找域内已有的约束委派，再利用。但是对于基于资源的约束委派，假如我们已经拥有服务账号1，那么只要我们具备用户2的LDAP权限，这样就可以配置服务1对服务2的约束委派(在服务账户2的用户属性上配置msDS-AllowedToActOnBehalfOfOtherIdentity为1的sid)，服务1就可以控制服务2。
所以基于资源的约束委派的利用，就有一种新的攻击思路
1.我们拥有一个任意的服务账户1 或者计算机账户1
这一步不难，我们我们拥有域内机器，提升到system权限，该计算机用户，用户名为计算机账号$就是服务账号。如果我们只有普通的域内用户，可以滥用MachineAccountQuota,详细细节见[
部分相关的工具>Powermad](%20#%E9%83%A8%E5%88%86%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B7%A5%E5%85%B7)
2.我们获得服务账户2 的LDAP权限
这一步可以结合ntlm relay，从其他协议relay 而来，关于这一步，更多的是ntlm
relay的过程，限于篇幅原因，这里面会在ntlm篇的relay详细介绍。典型案例就是CVE2019-1040。
3.配置服务1对服务2的约束委派
在服务账户2的用户属性上配置msDS-AllowedToActOnBehalfOfOtherIdentity为服务账户1的sid
4.发起一个从服务1到服务2的正常的约束委派的流程，从而访问服务2。
这个流程见上面的委派>约束委派，使用rubeus也可以很方便得进行一键访问，详细利用见部分相关工具>rubrus>s4u)
## 0x07 部分相关工具
###  1\. rubeus
  * asktgs
这个功能用于发送tgs请求包，并将凭据以base64打印出来。
  * kerberoast
Rubes里面的kerberoast支持对所有用户或者特定用户执行kerberoasting操作，其原理在于先用LDAP查询于内的spn，再通过发送TGS包，提取拼接得到hashcat或者john能爆破的格式。
  * monitor/harvest
这个模块用于非约束委派的利用
rubeus的monitor或者harvest模块会从日志里面过滤出 4624 ，然后提取TGT票据打印出来。
提取完之后是base64，可以利用powershell
导出为kirbi格式的文件(注意回车换行，然后就可以使用mimikatz的ptt，rubeus的ptt，或者转化为ccache使用impacket的ptt都可以，然后rubeusde
ptt是支持base64的)
[IO.File]::WriteAllBytes(“ticket.kirbi”, [Convert]::FromBase64String(“aa…”))
  * s4u
rubeus的s4u支持一条命令发起一个约束委派的流程
###  2\. mimikatz
  * kerberos::golden
mimikatz的kerberos::golden模块可以用于制作白银票据,票据格式是.kirbi
利用已知的服务账号的密码(如通过kerberosting)计算出hash
    python -c 'import hashlib,binascii; print binascii.hexlify(hashlib.new("md4", "p@Assword!123".encode("utf-16le")).digest())'
获取sid
制作白银票据
  * kerberos::ptt
mimikatz的kerberos::ptt 模块可以用于 pass the ticket
  * sekurlsa::tickets
kerberos 的sekurlsa::tickets可用于导出票据
对于非约束委派，使用mimikatz利用如下
(1) 通过adfind 寻找具有非约束委派的机子
(2) 打下jackson-PC
然后使用钓鱼或者打印机哪个漏洞，诱导域管过来访问jackson-PC
(3) 在jackson-PC使用mimikatz 导出域管的TGT(因为要从lsass里面导出来，所以需要本机管理员的权限)
（4）ptt
###  3\. impacket
在impakcet里面很多程序都支持pass the key,只需要
export KRB5CCNAME=/path/to/ccache/file
然后在需要pass the key的程序里面加-k -no-pass就行。
以secretsdump.py为例
Impact 里面跟TGT_REQ相关的脚本主要有3个。
  * getST.py
在ccache中输入密码，哈希，aesKey或TGT后，此脚本将请求服务票证并将其另存为ccache。
  * GetUserSPNs.py
此示例将尝试查找和获取与普通用户帐户关联的服务主体名称。输出与JtR和HashCat兼容。
  * ticketer.py
该脚本将从零开始或基于模板（从KDC合法请求）创建Golden /
Silver票据，允许您自定义PACLOGONINFO结构中设置的一些参数，特别是组，ExtraSids，持续时间等，票据格式是ccache.
利用已知的服务账号的密码(如通过kerberosting)计算出hash
    python -c 'import hashlib,binascii; print binascii.hexlify(hashlib.new("md4", "p@Assword!123".encode("utf-16le")).digest())'
获取域的sid
制作白银票据
在使用白银票据进行 传递的时候会出现KRBAPERR_MODIFIED(Message stream modified)，尚未解决
###  4\. [kerberoast](https://github.com/nidem/kerberoast)
Kerberoast是用于攻击MS Kerberos实现的一系列工具
用系统内置的工具setspn提取出所有的spn
    > setspn  -Q */*
请求票据
    > Add-Type -AssemblyName System.IdentityModel  
    > New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "MSSQLSvc/sqlserver.jmu.com:1433" 
从 Mimikatz 里面提取票据
    mimikatz # kerberos::list /export
使用 tgsrepcrack 爆破票据
    ./tgsrepcrack.py wordlist.txt 1-MSSQLSvc~sql01.medin.local~1433-MYDOMAIN.LOCAL.kirbi
###  5\. [Powermad](%20https:/github.com/Kevin-Robertson/Powermad%20)
默认的Active Directory ms-DS-MachineAccountQuota属性设置允许所有域用户向一个域中最多添加10个计算机帐户。
Powermad包括一组用于利用ms-DS-MachineAccountQuota的功能，而无需将实际系统附加到AD。
这个时候的账户还没有在DNS服务器里面注册
添加个DNS记录