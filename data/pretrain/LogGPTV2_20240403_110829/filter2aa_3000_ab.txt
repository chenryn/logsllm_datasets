### Process and Privilege Elevation Overview

#### Consent Verification and Process Launch
- **AiLaunchProcess**: Creates a suspended consent process using `CreateProcessAsUserW`.
- **AipVerifyConsent**: Verifies that the consent is not patched by `ReadProcessMemory`.
- **Trust Flag Check**: The consent process resumes, checks the `trustFlag`, and decides whether to display an alert UI.

#### Timeline and Privilege Changes
- **NtOpenProcess**
- **RpcImpersonateClient**
- **Privilege Transition**: Low to High
- **NtDuplicateToken(-2)**
- **RpcRevertToSelf**
- **File Handle Creation**: `ExeFileHandle = CreateFileW`
- **Path Conversion**: `$p = ToDosName(GetLongPathNameW(pathInput))`
- **Trust Authentication**: `TrustAuth_A($p)` and `TrustAuth_B($p)`
- **Process Launch**: `AiLaunchConsentUI` and `AiLaunchProcess(pathInput)`

#### Path Normalization
- **DOS Paths (2.0)**: `C:\Test\Foo.txt`
  - A full volume name. If it doesn't start with all 3 characters, it is considered partially qualified or relative to the current directory.
- **UNC Paths**: `\\Server\Share\Test\Foo.txt`
  - Starts with two separators. The first component is the host name (server), followed by the share name.
- **DOS Device Paths**:
  - `\\.\C:\Test\Foo.txt`
  - `\\?\C:\Test\Foo.txt`
  - `\\.\UNC\Server\Share\Test\Foo.txt`
  - `\\?\UNC\Server\Share\Test\Foo.txt`

#### Path Normalization Rules
- **Identifying the Path and Legacy Devices**
- **Applying the Current Directory**
- **Canonicalizing Separators**
- **Evaluating Relative Components**
- **Trimming Characters**
- **Skipping Normalization**

  - If the path doesn't end in a separator, all trailing periods and `\x20` will be removed.
  - If the last segment is simply a single or double period, it falls under the relative components rule.
  - This rule allows creating a directory with a trailing space by adding a trailing separator.

  - **Important Exception**: If you have a device path that begins with a question mark instead of a period, it must use the canonical backslash. If the path does not start with exactly `\\?`, it will be normalized.

#### Example Scenarios
- **Path Conversion and Trust Authentication**:
  ```c
  $p = RtlDosPathNameToRelativeNtPathName_U_WithStatus(GetLongPathNameW(pathInput));
  TrustAuth_A($p);
  TrustAuth_B($p);
  AiLaunchProcess(pathInput);
  ```

- **Specific Examples**:
  - `RtlDosPathNameToRelativeNtPathName_U_WithStatus(GetLongPathNameW(L"C:\sea\food \seafood.exe"))`
  - `RtlDosPathNameToRelativeNtPathName_U_WithStatus(L"C:\Windows\System32\a.exe")`
  - `$p = L"\\??\C:\Windows\System32\a.exe"`

  - **Note**: We cannot write files inside `C:\Windows\System32` due to Windows DACL. However, we can create a directory "Windows\x20" via the `\\?` prefix to avoid path normalization.

#### Attack Vectors
- **TrustAuth_A**:
  - Path normalization issues can be bypassed using the `\\?` prefix.
- **TrustAuth_B**:
  - Whitelisted EXE files with trusted signatures.
  - Auto-elevated marked EXE files.
  - DLL side-loading tricks to hijack auto-elevated marked EXE files.

#### Summary
- **TrustAuth_A** is used for verifying child processes launched from a trustable directory.
- If trusted, **TrustAuth_B** checks if the child process is signed with a legal signature or marked as auto-elevate.
- **Consent.exe** is launched, and the UAC prompt appears if the child process is not fully trusted.
- **TrustAuth_A/B** is an extra design. The different paths between verification and forking processes lead to elevation of privilege (EoP).

#### Additional Resources
- **TenableSecurity**: UAC Bypass by Mocking Trusted Directories by David Wells
- **Google Project Zero**: The Definitive Guide on Win32 to NT Path Conversion by James Forshaw
- **MSDN Developer Blog**: Path Normalization by Jeremy Kuhne, Path Format Overview by Jeremy Kuhne

#### Payload and Tools
- **$_payload?**
- **$_Siofra**: [github.com/Cybereason/siofra](https://github.com/Cybereason/siofra)

#### Social Media and Contact
- **Github**: @aaaddress1
- **Facebook**: [Link]

Thank you!