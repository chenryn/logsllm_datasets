lowing manner. We will build a distinguisher that can tell
if a quadruple is a Diﬃe-Hellman quadruple4 with greater
than negligible advantage. Our technique is to take the
quadruple (w1, w2, w3, w4) and call the distinguisher with
O((w1, w2), (w3, w4)). To use the distinguisher we will also
A
need to be able to simulate the decryption oracle in the
Random Oracle model (we show how to do this in the next
O can distinguish between
subsection). We notice that if A
the two experiments this corresponds exactly with our dis-
tinguisher being able to distinguish between Diﬃe-Hellman
quadruples, which is assumed to be hard. We now show
that we can simulate the decryption oracle to complete our
proof.
B.1 Simulator Construction
We will build a simulator of the decryption oracle de-
scribed above. The simulator is initiated with the public
keys (w1, w2) and (w3, w4).
The decryption oracle simulator acts as follows. When
a query is made to the random oracle, H, the simulator
randomly chooses a bitstring, h, as a response and records
the query/response pair in a table. The chances of a collision
are negligible in the security parameter.
A decryption query is of the form ((d, e), h, M). The sim-
ulator will have access to the two public keys and the oracle
query table, but not the corresponding private key(s). For
both public keys the simulator will take the following ac-
tions. For convenience we describe the actions in terms of
the ﬁrst key (w1, w2) = (g, ga) for some a. Keep in mind
that the simulator does not know a. The simulation will be
repeated for the key (w3, w4).
1. Look up h in the response half of the random oracle
query table and set r to be the corresponding query.
If no entry for h exists, reject the decryption. The
chances of success are negligible if the oracle was not
consulted to get h.
2. Compute K = e
(ga)r and decrypt the envelope, M, to
(cid:2) (cid:3)= r or if the public key from the envelope
, PublicKey, message.
get r
(cid:2)
is not the one being used in the simulation.
3. Reject if r
4. Reject if d (cid:3)= gr.
5. If not rejected, output message.
4A Diﬃe Hellman quadruple is of the form (g1, ga
where g1 and g2 are generators of the group.
2 )
1 , g2, ga
We now show that our simulator is equivalent to the true
decryption oracle with very high probability. The true de-
cryption oracle will have access to the valid public keys and
the private keys. Our simulator has access to the valid public
keys and runs the random oracle. The simulator and decryp-
tion oracle are equivalent if every message that is output by
the true oracle is output by the simulator and every message
output by the simulator is output by the true oracle.
Suppose the true decryption oracle accepts and outputs
a certain message. The cryptographic envelope would then
have to contain a valid public key (g, ga) that our simula-
tor would have access to. The envelope would also contain r
where h = H(r). Our simulator would (with very high prob-
ability) have derived the same r from h and the random ora-
cle query table. The ﬁnal check of the true decryption oracle
is that d = gr. The true oracle gets the decryption envelope
key K by dividing e by da = (gr)a = (ga)r. However, in
our simulation for key g, ga we will have divided e by (ga)r
and then performed the same authenticity checks. There-
fore any messages that are decrypted by the true oracle are
decrypted by our simulator with very high probability.
Suppose a message were decrypted by our simulator using
the hash table and public key (g, ga). Then the simulator
is able to get r from h and the random oracle table. The
simulator gets the envelope key K by dividing e by (ga)r.
However, after the simulator decrypts the envelope it checks
that the public key being used is g, ga and that d = gr. The
true decryption oracle that has the secret key a will divide
e by da = gar and compute the same K as the simula-
tor. The simulator is able to perform the same authenticity
checks as the decryption oracle. The simulator simulates
the decryption oracle correctly since with high probability
the simulator will decrypt a message if and only if the true
decryption oracle will.
C. TWO-KEY IMPLEMENTATION
In Section 3.3 we stated that there existed a construction
of an Incomparable Public Key scheme for which the security
proof could be made outside the Random Oracle model. We
now present a detailed description of the construction and
a proof of the Incomparable property.
C.1 Description
C.1.1 Structure of Keys
All receivers share a prime p where q = p−1
is a prime.
The public key consists of two ElGamal public keys (g1, ga
1 ),
∗
(g2, gb
p . Again
the receiver records the public key pair to mark them as
being valid.
2) where g1 and g2 are quadratic residues in Z
2
C.1.2 Encryption
To encrypt a message the sender will ﬁrst randomly choose
a key K for a symmetric cipher. He will then encrypt the
message as (gr
message).
2 K), EK(r, (g1, ga
1 K), (gr
1 ), (g2, gb
1, gar
2, gbr
2),
C.1.3 Decryption
Suppose a message is received of the form ((d, e), (i, j), M).
Decryption will proceed as follows.
1. Let K = e
da . Also check that the same K = j
ia Use K
to decrypt the envelope M. This decryption gives us
r, g1, ga
2, message.
1 , g2, gb
C.3 Simulator Construction
Using similar arguments to those of Appendix B.1 we
build a simulator of the decryption oracle described above.
The simulator is initiated with input from one of the ex-
periments.
2) and
(cid:2)
(w3, w4, g
2, g
It knows the public keys (w1, w2, g2, gb
(cid:2)
b) and the private key b.
2
The simulator will be able to use the knowledge of the pri-
vate key b to begin decryption of the envelope, and will use
the information inside to check the validity of the message.
A decryption query is of the form ((d, e), (i, j), M). For
both public keys the simulator will take the following ac-
tions. For convenience we describe the actions in terms of
the ﬁrst key (w1, w2, g2, gb
2) for some a that
is unknown to the simulator.
2) = (g1, ga
1 , g2, gb
1. Compute K = j
ib and decrypt the envelope to get
(cid:2)
r
, PublicKey, message.
(cid:1)
(cid:1)
(ga
1 )r .
1 ,i (cid:3)= gr
2 , or K (cid:3)= e
one being used in the simulation.
2. Reject if the public key inside the envelope is not the
3. Reject if d (cid:3)= gr
4. If not rejected output message.
We now show that the output from the simulator matches
the output from a true decryption oracle. Suppose the true
decryption oracle accepted a message. Then the key K that
was used by the true decryption oracle to decrypt the en-
velope could be derived from either of the two ElGamal en-
cryptions. Otherwise the message would have been rejected
by the decryption oracle.
The simulator can use its knowledge of the private key, b,
to derive K from the second ElGamal encryption. Once it
opens the envelope using K it will perform the same validity
checks that the true random oracle performs. Additionally,
it will use the knowledge of r and the public keys to check
that the both ElGamal encryptions are encryptions of the
same K. This ensures that the simulator doesn’t accept any
messages that the true oracle rejects. Likewise, the oracle
only accepts messages that the simulator does. Therefore,
the simulator is equivalent to the decryption oracle.
C.4 Case 2
(cid:1)
a
(cid:2)
1
(cid:2)
1, g
O((g1, ga
1 , w1, w2), (g
There is also the possibility that the adversary can only
distinguish between Experiment2 and Experiment3. In that
case we call A
given a possible Diﬃe-Hellman quadruple (w1, w2, w3, w4).
If it is a Diﬃe-Hellman tuple, the input matches Experi-
ment2, otherwise it matches Experiment3. The decryption
simulator will know the public keys that were input to the
(cid:2). The simulator is built
adversary and the private keys a, a
analogously to the one described above by using the private
keys it knows as hints for decryption.
, w3, w4)) when
2. Check that the public keys inside the envelope have
been recorded as a valid ones.
3. Check that gr
1 = d, gr
2 = i where (g1, ga
1 , g2, gb
2) is the
key in the envelope.
4. If any of these checks fail, disregard the message; oth-
erwise the decryption is message.
C.1.4 Key-Privacy
Key-Privacy follows for the same reason as in original con-
struction.
C.1.5 Efﬁciency
Encryption requires two exponentiations to use both com-
ponents of the public key. A successful decryption requires
four exponentiations, however, an unsuccessful decryption
can be detected after one exponentiation.
C.2 Proof for two-key implementation
Again the common global parameter I = p where p is a
strong prime. We deﬁne three experiments.
Experiment1(I, K, L)
R← K(I)
2) = pk0
(cid:2)
2
a, b = sk0
(g1, ga
1 , g2, gb
(cid:2)
(cid:2)
(cid:2)
a, g
(g
2, g
1, g
1
output(pk0, pk1, )
b) = pk1
R← L(sk0)
R← L(sk0)
Experiment2(I, K, L)
R← K(I)
(cid:2) R← K(I)
, b
, b = sk1
a, b = sk0
(cid:2)
a
(cid:2)
a
(g1, ga
1 , g2, gb
(cid:2)
(cid:2)
(cid:2)
a
(g
2, g
1, g
1
output(pk0, pk1)
, g
(cid:2)
2
2) = pk0
(cid:1)
R← L(sk0)
R← L(sk1)
b) = pk1
, b
Experiment3(I, K, L)
R← K(I)
R← K(I)
2) = pk0
a, b = sk0
(cid:2) = sk1
(cid:2)
a
(g1, ga
1 , g2, gb
(cid:2)
(cid:2)
(cid:2)
a
(g
2, g
1, g
1
output(pk0, pk1)
, g
(cid:1)
b
(cid:2)
2
(cid:1)
R← L(sk0)
R← L(sk1)
) = pk1
For each experiment the adversary, A
O, will be given an
oracle that knows the private and public keys from the ex-
periment. Again it will output a list of all legal decryptions
of a ciphertext when given that ciphertext as input.
Suppose that an adversary can break our scheme and thus
distinguish between Experiment1 and Experiment3. Then
the same adversary can either distinguish between Experi-
ment1 and Experiment2 or between Experiment2 and Ex-
periment3 (or both). We prove this is impossible by con-
O
tradiction. First, let’s suppose we are in the case where A
can distinguish between experiments one and two. We will
build a distinguisher than can tell if a quadruple is a Diﬃe-
Hellman quadruple. Let our quadruple be (w1, w2, w3, w4).
b)), where
We will then call A
(cid:2)
g2,g
2 and b are chosen randomly. If the quadruple is a Diﬃe-
Hellman quadruple then we passed the adversary input from
Experiment1, otherwise we passed an input drawn from Ex-
periment2. Thus, if we can simulate the decryption oracle
we can distinguish Diﬃe-Hellman quadruples, which is as-
sumed to be hard.
O((w1, w2, g2, gb
2), (w3, w4, g
(cid:2)
2, g
(cid:2)
2