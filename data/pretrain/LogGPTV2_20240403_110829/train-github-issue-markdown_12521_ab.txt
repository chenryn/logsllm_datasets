    var __webpack_default__ = { "default": function () {} }["default"];
    __webpack_require__.export(__webpack_module__, {
      "default": function() { return __webpack_default__; }
    });
### of anonymous class
The same wrapper is employed, but it is not hoisted like in the anonymous
function case. All engines that support `class` also support `let`, so it
should be safe to use `let` in this case to ensure proper TDZ.
    export default class {}
    __webpack_require__.export(__webpack_module__, {
      "default": function() { return __webpack_default__; }
    });
    let __webpack_default__ = { "default": class {} }["default"];
### of named function or class
No `__webpack_default__` or explicit hoisting involved.
    export default class Name {}
    __webpack_require__.export(__webpack_module__, {
      "default": function() { return Name; }
    });
    class Name {}
### of expression (i.e. anything else)
No hoisting allowed.
    export default 1 + 1
    __webpack_require__.export(__webpack_module__, {
      "default": function() { return __webpack_default__; }
    });
    var __webpack_default__ = (1 + 1);
## Named export
### With specifier
A specifier without `as` is treated as if it was exported `as` itself. For
example, `export { foo }` is treated the same as `export { foo as foo }`.
    let foo = 1
    export { foo as bar }
    __webpack_require__.export(__webpack_module__, {
      "bar": function () { return foo; }
    });
    let foo = 1
### With declarations
The emit is the same regardless of the declaration type; however, `var`, `let`
and `const` can specify more than one name.
    export function foo () {}
    export class Bar {}
    export let hoge, fuga
    __webpack_require__.export(__webpack_module__, {
      "foo": function () { return foo; },
      "Bar": function () { return Bar; },
      "hoge": function () { return hoge; },
      "fuga": function () { return fuga; }
    });
    function foo () {}
    class Bar {}
    let hoge, fuga
# Reexports
This depends on the answer to
https://gist.github.com/Kovensky/2caf0eaefc9c00b46ab5afaed59ebd0b
If it's allowed to be an implicit dependency, a much simpler reexport emit can
be produced.
If it has to be a TDZ error, then reexports are emitted identically to `import
{ name } from` followed by `export { name }`.
## of namespace
    import * as namespace from './esmodule'
    export { namespace }
Implicit dependency:
    __webpack_require__.reexport(__webpack_module__, {
      "namespace": "./esmodule.js"
    });
    var __imported_esmodule__ = __webpack_require__.module("./esmodule.js");
TDZ (doesn't quite work because of the `var` instead of `const`, but...):
    __webpack_require__.export(__webpack_module__, {
      "namespace": function () { return __imported_esmodule__; }
    });
    var __imported_esmodule__ = __webpack_require__.module("./esmodule.js");
If the exported namespace comes from a cjs module, or a harmony module that
reexports  
a cjs module, all accesses to members of this export should use the
`namespaceGet` helper.
## of named
    export { default, foo as bar } from './esmodule'
Implicit dependency:
    __webpack_require__.reexport(__webpack_module__, {
      "default": ["./esmodule.js", "default"],
      "bar": ["./esmodule.js", "foo"]
    });
    var __imported_esmodule__ = __webpack_require__.module("./esmodule.js");
TDZ:
    __webpack_require__.export(__webpack_module__, {
      "default": function () { return __imported_esmodule__["default"]; }
      "bar": function () { return __imported_esmodule__["foo"]; }
    });
    var __imported_esmodule__ = __webpack_require__.module("./esmodule.js");
Webpack will not be able to statically check if the reexported symbols
actually  
exist in a commonjs module, so when reexporting names from them, the generated  
getter should `return` something similar to  
`__webpack_require__.namespaceGet(__imported_cjs__, "foo")`.
# Star Reexports
Assuming "./esmodule.js" has `default`, `foo` and `bar` as exports.
## of ES module
    export * from './esmodule'
    export function foo () {}
Implicit dependency:
As, in this example, exports are combined with reexports, an additional
argument to `__webpack_require__.export` is required.
    __webpack_require__.export(__webpack_module__, {
      "foo": function () { return foo; }
    }, true);
    __webpack_require__.reexport(__webpack_module__, {
      "bar": [ "./esmodule.js", "bar" ]
    });
    var __imported_esmodule__ = __webpack_require__("./esmodule.js");
    function foo () {}
TDZ:
    __webpack_require__.export(__webpack_module__, {
      "foo": function () { return foo; },
      "bar": function () { return __imported_esmodule__["bar"]; }
    });
    var __imported_esmodule__ = __webpack_require__("./esmodule.js");
    function foo () {}
## of CJS module
This emit is the same regardless of Implicit dependency or TDZ.
`reexportAll` receives the list of all named exports local to this module.  
This includes explicit reexports, but does _not_ include names coming from  
other star reexports.
As `reexportAll` will freeze the exports, it will have to internally  
`__webpack_require__` the dependent modules in order to be able to expose  
their exports.
This also poisons all imports of this module such that they have to use  
the `__webpack_require__.namespaceGet` helper to be able to read any  
export that is not statically known to exist.
    export * from './cjs'
    export function foo () {}
    __webpack_require__.export(__webpack_module__, {
      "foo": function () { return foo; }
    }, true);
    __webpack_require__.reexportAll(__webpack_module__, [
      "./cjs.js"
    ], [ "foo" ])
    function foo () {}
# All export kinds combined
With the same esmodule as the previous section.
Also has an import and a default anonymous export to demonstrate ordering.
    import * as some from 'some-module'
    export { some }
    export default function () {}
    require('other-module')
    export let foo
    export { default as baz } from './esmodule'
    export * from './esmodule';
    export * from './cjs';
Implicit dependency:
When combining ES star reexport with CJS star reexport, a `true` third
argument is required on `reexport` as well.
    //exports
    var __webpack_default__ = { "default": function () {} }["default"];
    __webpack_require__.export(__webpack_module__, {
      "default": function () { return __webpack_default__; },
      "foo": function () { return foo; }
    }, true);
    __webpack_require__.reexport(__webpack_module__, {
      "some": "some-module",
      "baz": [ "./esmodule.js", "default" ]
    }, true);
    __webpack_require__.reexportAll(__webpack_module__, [
      "./cjs.js"
    ], [ "some", "foo", "baz" ]);
    // imports
    var __imported_some_module__ = __webpack_require__.module("some-module");
    var __imported_esmodule__ = __webpack_require__.module("./esmodule.js");
    // code
    __webpack_require__("other-module");
    let foo;
TDZ:
    // exports
    var __webpack_default__ = { "default": function () {} }["default"];
    __webpack_require__.export(__webpack_module__, {
      "some": function () { return __imported_some_module__; },
      "default": function () { return __webpack_default__; },
      "foo": function () { return foo; },
      "baz": function () { return __imported_esmodule__["default"]; }
    }, true);
    __webpack_require__.reexportAll(__webpack_module__, [
      "./cjs.js"
    ], [ "some", "foo", "baz" ]);
    // imports
    var __imported_some_module__ = __webpack_require__.module("some-module");
    var __imported_esmodule__ = __webpack_require__.module("./esmodule.js");
    // code
    __webpack_require__("other-module");
    let foo;