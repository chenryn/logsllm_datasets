我们看看这个沙盒sandbox，同样是在10.11有的功能，可能更早。沙盒是依赖于底层和用户态的这种自定义沙盒语言对系统进行防护的，可以在系统的/Library/Sandbox/Profiles/目录下找到所有和沙盒相关的文件，这些文件是由系统维护升级，用户是没办法进行修改的。沙盒是由sandbox.kext扩展，底层也是Hook了MACF的一些回调实现的。
这是XProtect，是苹果内置的一款可以理解为“杀软”的工具，它的工具实现依赖于一个签名文件，这个文件的路径是在/System/Library/CoreServices/CoreTypes.bundle下面，所有的签名会动态更新。
MRT是苹果到目前为止还在更新的一款软件删除工具，这款工具和XProtect一样类似于“杀软”，MRT是一个二进制，在底层当中没有用签名文件机制，所有的签名是内置在二进制当中。
我们可以手动的去运行这个MRT程序，让它以守护进程的形式去启动。前一段时间火热的苹果系统上的zoom软件出现漏洞，苹果后台推送了更新，静默的删除了其web
server，其底层用到的工具就是MRT，采用了比较激进的方式处理了电脑上的恶意／漏洞软件。
终端安全模块是苹果在10.14.5
Catalina里面引入的一个新功能，终端安全模块的用途是为了代替苹果公司早年使用的内核扩展，可能在以后的发展过程中，苹果的内核扩展会被限制或者会被移除，而采用用户态的终端安全模块给安全开发者提供接口。目前它是测试状态，可以看到少量的数据结构。
## macOS终端agent技术实现方案
终端安全实现的细节分成四部分：第一部分是事件部分，事件是所有数据的基础，event事件代表了每一个API发生时一条数据、一条日志信息。
Incident是一组事件的集合，所有事件加在一块就形成了一个incident。我们看如何去对这些事件进行管理。这是安全架构上，主要讨论自身安全以及对系统加固如何适时。然后是攻击检测和安全防护。
1、事件部分，首先是事件与事件的响应，数据源从哪里来？怎样采集数据源？如何处理这些数据？
2、数据源就是我们要采集系统中哪些数据，哪些数据需要受到我们的监管。这里列出了5张图是开源工具获取的数据，由Facebook开发的一款工具，它对苹果操作系统当中的数据进行了归类，我展示了它的进程、网络、登陆用户以及进程打开文件这5个部分，这只是数据当中很小的一部分。
比较权威的数据源是MITRE这个组织在官网上公开的企业安全的攻击向量，从攻击者视角向开发者提供数据源，非常详细、专业的一份数据源。
3、数据采集。我们采用哪种方式去采集数据？一是是系统调用表的hook，这是比较传统、使用比较多的一种方案，在Windows以及Linux系统上比较常见，在苹果系统上同样有系统调用表这个数据结构。
这个数据结构可以在内核当中通过查找内核当中的前三个系统调用去判断这个是不是sysent这块表，对表里的系统调用指针替换可以达到Hook系统调用表的后果。
二是审计部分早先是实现一个开源技术方案，后来苹果公司也采用了这种方式，这种审计的方式有一个好处是在内核当中、在这个文件中对每条指令都插入了这两条指令。通过用户态praudit访问管道设备可以抓取系统中每条系统调用的日志信息。
三是kauth机制，这个机制是由10.4系统引入的，它和MACF一样提供了回调注册接口，开发人员可以编写一些回调函数，对系统发生的事件进行监控。Kauth分为四部分：常规、进程、VNODE、文件操作，但是kauth提供的接口比较少，在现实当中。
开发人员更倾向于使用MACF框架，它的上层是一串以mac_开头的一组调用的封装，所有资源访问的系统调用都会经过一组预先注册好的回调函数进行预检。可以向系统当中注册一个、一组甚至多个回调。它的底层有一个结构体。当前操作系统中支持所有的回调类型非常详细。
## 安全加固/防护
对操作系统的打补丁、软件补丁、内核加固、自我防护、风险扫描。
1、系统打补丁。苹果公司自带的这个命令可以用来底层静默发现并且更新操作系统的功能，这个功能可以通过APP store手动去点击。
2、软件补丁。APP store或者第三方的mas可以检测这个系统当中安装软件的版本信息。
3、内核加固。当我们发现比较常见的内核漏洞，这些内核漏洞还来不及被苹果公司去打补丁，或者用户没有去升级操作系统的情况下，引入内核加固这个功能非常必要。内核加固可以针对常见的内核漏洞，自己去做一个内核的patch。
4、自我防护。Agent安装在用户主机上之后，首先需要一个自我防护的功能，才能保证稳定的去采集系统上的数据。
我提出两种防护方式，一种是由系统自带的launch daemons和launch
agents，前者是守护进程，后者是代理程序，它们都会在电脑启动过程中去启动，类似于Windows平台的自启动技术。前面的launch
daemons以入口身份运行的，而launc agents是以用户态的方式运行。
如果keepalive加上设置为true的情况下，这个组件会常驻系统当中，即使用户去关闭这个进程，它的父进程也就是1号进程launchd会对它重启。我们看一下天擎的APP在启动时会有两个进程，launch
daemons和launch agents，它们之间可以通过XPC进行通信。
第二种方案是信号，关闭一个程序时会向程序发出信号，我们可以在MACF中注册这个信号检测，在信号里对它进行屏蔽检测，就可以实现内核态的防护功能。
5、风险配置扫描。类似于杀软的首次启动对系统的预检，它需要我们预先配置好，这里有一个开源的方案，这个工具是Linux上比较常用的一款风险配置扫描工具，它在macOS上也是同样支持的。
## 攻击检测
当所有数据采集到以后，经过引擎处理需要实现攻击检测功能。常见攻击检测有以下攻击种类。
1、勒索攻击。对系统磁盘中的文件进行大量读写操作以及进程启动执行的操作，我们可以重点关注这两个事件。
2、挖矿攻击。
3、信息窃取。对用户敏感资源访问以及网络数据中是否有网络数据这么一个规则去检测。
4、权限提升。首先是有进程执行这个动作，它可以是进程的命令执行，执行的过程中我们可以去检查进程的信息，查看它的信息权限是否被提升。
我们重点讲一下安全防护，我这里所有安全防护的功能是采用MACF的方式去实现。
1、文件读写是重点关注vnode的API，vonode类似于Linux的inode，是文件系统对文件抽象的一个数据类型，可以对常见的write、unlink等进行挂钩，检测文件读写信息。
2、文件执行管理。首先是一个进程启动fork，通常一个应用执行是fork和exec两部分组成。可以在fork时检测应用程序启动过程中的证书信息、签名信息以及teamID信息。
启动的第二个阶段我们可以去检测它的权限信息，包括权限、父进程、参数信息。另外一种管理文件执行的方案是挂钩这个函数接口，是应用程序执行后会调用的一个API，我们可以在内核当中获取这个API，对它进行hook操作，同样也是可以实行文件执行管理的功能。
3、网络访问管理。可以通过这一系列API，socket创建、设置socket属性的这么一个API，或者使用NKE的一个接口。NKE需要传入一个信息，这个信息可以包含它的协议，包括TCP、UDP甚至ITV6这些信息。
4、进程管理。进程信息由一组proc_check开头的信息，我们可以挂钩这些接口去实现进程的管理。
5、系统调用审计。系统调用审计可以看一下一个进程执行过程中所有的流程，它最终是调用了这个调用，在底层10.15里引入了这个接口，可以完全对所有的syscall的调用审计。
6、终端隔离。终端隔离主要分为网络访问阻断和进程启动阻断，这两个机制可以通过前面介绍的方式对它进行管控。
7、资产报备。EDR会对用户的信息进行统计。
## 开发调试与注意事项
我们看一下是如何获取内核符号的地址，以及如何去查找内核符号，这是两种方式，一种方式是去从内核启动循序渐进一页页去查找，另一种方式是调用一个函数去进行unslide操作。
模块调试部分也需要对MACF接口进行大量调试，从10.12之后MACF变成了私有框架，苹果不鼓励使用这个框架，如果我们还需要使用这个框架，需要关注每一次系统升级之后接口的变化，我们需要做大量测试，包括对不同版本的操作系统做一个快照，然后进行自动化的措施。
完整PPT下载：
链接: https://pan.baidu.com/s/1wOCAnqzkLMZcZz0eM2vy7Q
提取码: 4vns