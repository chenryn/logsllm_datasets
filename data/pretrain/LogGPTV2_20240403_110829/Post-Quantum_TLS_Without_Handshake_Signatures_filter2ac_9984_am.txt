AHS←HKDF.Extract(dHS, ss𝑆)
accept CAHTS←HKDF.Expand(AHS, "c ahs traffic", CH..CKC)
accept SAHTS←HKDF.Expand(AHS, "s ahs traffic", CH..CKC)
dAHS←HKDF.Expand(AHS, "derived", ∅)
{ClientCertificate}𝑠𝑡𝑎𝑔𝑒3: cert[pk𝐶], int. CA cert.
stage 1
stage 2
stage 3
stage 4
(ss𝐶, ct𝐶)←KEMc.Encapsulate(pk𝐶)
{ServerKemCiphertext}𝑠𝑡𝑎𝑔𝑒4: ct𝐶
ss𝐶←KEMc.Decapsulate(ct𝐶, sk𝐶)
MS←HKDF.Extract(dAHS, ss𝐶)
fk𝑐←HKDF.Expand(MS, "c finished", ∅)
fk𝑠←HKDF.Expand(MS, "s finished", ∅)
{ClientFinished}𝑠𝑡𝑎𝑔𝑒3: CF←HMAC(fk𝑐, CH..SKC)
abort if CF ̸= HMAC(fk𝑐, CH..SKC)
accept CATS←HKDF.Expand(MS, "c ap traffic", CH..CF)
record layer, AEAD-encrypted with key derived from CATS
stage 5
{ServerFinished}𝑠𝑡𝑎𝑔𝑒4: SF←HMAC(fk𝑠, CH..CF)
abort if SF ̸= HMAC(fk𝑠, CH..CF)
accept SATS←HKDF.Expand(MS, "s ap traffic", CH..SF)
record layer, AEAD-encrypted with key derived from SATS
stage 6
e
g
n
a
h
c
x
e
y
e
k
l
a
r
e
m
e
h
p
e
:
1
e
s
a
h
P
e
g
n
a
h
c
x
e
y
e
k
d
e
t
a
c
i
t
n
e
h
t
u
a
y
l
t
i
c
i
l
p
m
I
:
2
e
s
a
h
P
n
o
i
t
a
c
i
t
n
e
h
t
u
a
t
i
c
i
l
p
x
e
/
n
o
i
t
a
m
r
fi
n
o
C
:
3
e
s
a
h
P
Figure 7: The KEMTLS handshake with client authentication
C.1 Extending KEMTLS with client
authentication
We permit the client and server to use different KEM algorithms
(KEMc and KEMs, respectively) as that may be desirable for func-
tionality or efficiency purposes.
In TLS 1.3, a server is only allowed to send a CertificateRequest
message if it has been authenticated with a certificate [93, Sec. 4.3.2].
This restriction ensures that the certificate containing the identity
of the client is only revealed to the intended server. Transferring
this property to KEMTLS requires a careful modification of the key
schedule. In the KEMTLS key schedule, we derive the CAHTS and
SAHTS “authenticated” handshake traffic secrets from the shared
Post-Quantum TLS Without Handshake Signatures
CCS ’20, November 9–13, 2020, Virtual Event, USA
secret ss𝑆 encapsulated against the public key in the server’s cer-
tificate. This allows the client to encrypt its certificate such that it
can only be decrypted by someone holding the server certificate’s
private key.
After that, the server encapsulates against the public key con-
tained in the client certificate to compute another shared secret
ss𝐶. We mix this shared secret ss𝐶 into the derivation of MS (in a
straightforward extension of the key schedule of KEMTLS). Mixing
together ss𝐶 and ss𝑆 ensures that all application traffic encrypted
under keys derived from MS (stage 5 and 6) will only be legible to
the authenticated server and client; the ephemeral shared secret
ss𝑒 further provides forward secrecy. Additionally, by sending the
ClientFinished message containing a MAC under a key derived
from MS, the client explicitly authenticates itself to the server at
stage 5.
Security properties of KEMTLS with client authentication. For
KEMTLS with client authentication, the properties of each stage
key in a client instance are the same as in KEMTLS. The properties
of each stage key in a server instance are as follows:
• Stages 1 and 2: wfs1 from when they are accepted, retroactive
fs once stage 5 has accepted. No authentication at the time
of acceptance, retroactive explicit authentication once stage
5 has accepted. For internal use.
• Stages 3 and 4: wfs2 from when they are accepted, retroactive
fs once stage 5 has accepted. Implicit authentication at the
time of acceptance, retroactive explicit authentication once
stage 5 has accepted. For internal use..
• Stage 5 and 6: fs and explicit authentication from the time
of acceptance; for external use.
Proving this would follow the same approach as game B2, using
the IND-CCA property of KEMc. If the KEM is appropriately secure,
only the intended client should be able to decapsulate and recover
ss𝐶. Thus, ss𝐶 and the MS value and other keys derived from it, are
implicitly authenticated keys that the adversary should not be able
to compute.
C.2 Alternative protocol flows
The extension sketched in this section introduces an extra round-
trip. This is a consequence of staying close to the existing key
schedule for KEMTLS.
Allowing ServerFinished to be transmitted immediately after
ServerKemCiphertext and deriving SATS then would allow the
server to initiate transmitting data sooner. This would reduce the
overhead to an extra half round-trip, but rely on implicit authenti-
cation. This change however greatly complicates the key schedule,
as ServerFinished would no longer be sent last.
We might also allow the client to send ClientFinished im-
mediately after ClientCertificate. The client would then derive
CATS without mixing in ss𝐶. This would not introduce extra round-
trips before the client can send data, but the data that the client
sent can then not be straightforwardly authenticated.
D XMSS AT NIST SECURITY LEVEL 1
The security of XMSS parameter sets specified in [56] reach NIST
security level 5 (equivalent to AES-256) and above. This high level
of security has only a very minor impact on computational perfor-
mance, but it does have a significant impact on signature size. The
draft of the NIST standard also considers parameter sets targeting
security level 3 (equivalent to AES-192); the simple modification
is to truncate all hashes to 192 bits. The extension to a parameter
set targeting NIST level 1 is straight-forward: hashes are simply
truncated to 128 bits; we obtain this by using SHAKE-128 [83] with
128 bits of output.
We define XMSSMT
s as an instantiation of XMSSMTusing two
trees of height 12 each, i.e., a total tree height of 24, which limits
the maximum number of signatures per public key to 224 ≈ 16.7 M.
Increasing this maximum number of signatures to, for example,
230 ≈ 1 billion increases signature size by only 96 bytes and has
negligible impact on verification speed. It does have an impact on
key-generation speed and signing latency, but as mentioned in
Section 6.3, latency of signing is not very relevant when used by
certificate authorities as in our paper.
Multi-tree XMSS is particularly well-suited for efficient batch
signing. The idea is to compute one whole tree (of height ℎ/𝑑) on
the lowest level and use it on-the-fly to sign 2ℎ/𝑑 messages. The
computational effort per signature is then essentially reduced to
one WOTS+ key-pair generation.
We set the Winternitz parameter in XMSSMT
to 𝑤 = 256 to op-
timize for signature size. Changing to the more common 𝑤 = 16
would increase signature size by about a factor of 2 and speed up
verification by about a factor of 8.
s
E NOTES ON INTERACTIONS WITH TCP
The TLS protocol is layered on top of the TCP transport layer
protocol. This means that optimizations and settings that apply
to TCP have an effect on the measured behavior. We do not mean
to give an exhaustive analysis of these and their interplay with
KEMTLS. However, we did see some behavior that will be relevant
to anyone trying to reproduce our results in new implementations.
Nagle’s algorithm [23, 82] is a congestion-control algorithm that
is enabled by default on most systems. It attempts to solve the
problem of large streams of TCP packets being sent out, where
each packet is very small. It does this by waiting to send undersized
TCP packets, where the size is less than the maximum segment
size, until all the sent-out data has been acknowledged. Disabling
Nagle’s algorithm, for example by setting the TCP_NODELAY flag on
a socket, will mean TCP packets get sent out immediately as TLS
messages are written to the socket.
However, this leads to a second interaction with the TCP slow
start congestion-control algorithm [18, 23]. This algorithm speci-
fies an initial congestion window size (initcwnd). This is the num-
ber of packets that can be sent out before receiving an acknowl-
edgement. As more acknowledgements get received, the window
increases, but this is not very relevant during the short lifetime
of the TLS and KEMTLS handshakes. The default window size
is set to 10 on current Linux kernels. This is large enough for
most of our algorithm choices to complete the handshake before
running into the maximum window size. However, this is only
true if they only send out (roughly) one TCP packet per message
“flow”, sending messages that follow each other at the same time.
As an example of this, ServerHello, EncryptedExtensions and
CCS ’20, November 9–13, 2020, Virtual Event, USA
Schwabe, Stebila, Wiggers
ServerCertificate can be sent in the same TCP packet, size of
the certificate permitting. Disabling Nagle’s algorithm would, for
naive implementations, lead to all of the handshake messages being
sent separately. This quickly runs into the slow start algorithm,
which introduces full round-trip delays.
We have found that these effects do not always show up. It seems
implementation strategies, such as asynchronous I/O or synchro-
nous I/O, can also have a great effect on exactly how the messages
are picked up. However, we suggest implementors to consider using
vectored I/O, such as the writev system call. These allow to write
multiple TLS messages to the socket at the same time, allowing
them to be sent in the same TCP packet. Alternatively, consider
explicitly controlling when the socket submits packets to the net-
work, for example by using the TCP_CORK mechanism in the Linux
kernel [78].
During our experiments, we saw such interactions only with the
Kyber and Dilithium KEMTLS instantiation where we included the
intermediate CA certificate in the chain. We do not have a clear
understanding of why exactly this occurred. We were able to patch
our Rustls implementation to use vectored I/O to write to the TCP
socket.9 This appears to have solved the problems and we saw the
expected performance without having to turn off Nagle’s algorithm
or modifying initcwnd.
9The maintainers of Rustls independently also applied this optimization and it appeared
in Rustls 0.18.0.