Methodology. Raccoon is implemented in the LLVM
compiler framework v3.6. In our test setup, the host op-
440  24th USENIX Security Symposium 
USENIX Association
10
Name
Classiﬁer
IP resolver
Medical risk analysis
CRC32
Genetic algorithm
Tax calculator
Radix sort
Binary search
Dijkstra
Find max
Heap add
Heap pop
Histogram
Map
Matrix multiplication
Lines
86
247
92
76
446
350
675
35
50
27
24
42
40
29
28
Data size
5 features, 5 records
3,500 records
3,200 records
10 KB
pop. size = 1 KB
-
256K elements
10K elements
1K edges
1K elements
1K elements
10K elements
1K elements
1K elements
500 x 500 values
Table 3: Benchmark programs used for performance
evaluation of Raccoon. The bottom eight programs are
also used to evaluate GhostRider. The remaining seven
programs cannot be transformed by GhostRider because
these programs use pointers and invoke functions in the
secret context.
stash size is selected at ORAM initialization time and is
set to ORAM block count
or 64 entries, whichever is higher.
100
6.1 Obfuscation Overhead
There are two main sources of Raccoon overhead: (1) the
cost of the ORAM operations (or streaming) and (2) the
cost of control-ﬂow obfuscation (including the cost of
buffering transactional memory accesses,
the cost of
copying program stack and CPU registers, and the cost
of obliviously patching arithmetic and memory access in-
structions). We account for ORAM/streaming overhead
over both real and decoy paths. Of course, the overhead
varies with program characteristics, such as size of the
input data, number of obfuscated statements, and number
of memory access statements. Figure 8 shows the obfus-
cation overhead for the benchmark programs when com-
pared with an aggressively optimized (compiled with
-O3) non-obfuscated binary executable. The geometric
mean of the overhead is ∼16.1×. Applications closer
to the left end of the spectrum had low overheads due
to Raccoon’s ability to leverage existing compiler opti-
mizations (if-conversion, automatic loop unrolling, and
memory to register promotion).
In most applications
with high obfuscation overhead, a majority of the over-
head arises from transactional execution in control-ﬂow
obfuscation.
6.2 Comparison with GhostRider
To place our work in the context of similar solutions
to side-channel defenses, we compare Raccoon with the
Figure 7: Confusion matrices for ip-resolv, find-max
and tax. The top matrices describe original execution.
The bottom matrices describe obfuscated execution.
erating system is CentOS 6.3. To evaluate performance,
we use 15 programs (eight small kernels and seven small
applications). Table 3 summarizes their characteristics
and the associated input data sizes. The bottom eight
programs in the table are the same programs used to eval-
uate GhostRider [20, 21], and we use these to compare
Raccoon’s overhead against that of GhostRider. To sim-
plify the comparison between Raccoon and GhostRider,
we use data sizes that are similar to those used to evaluate
GhostRider [20]. Raccoon uses the
con-
struct to mark secret variables—which mandates that the
input programs are written in C/C++. However the rest of
Raccoon operates entirely on the LLVM IR and does not
use any source-language features. Thus, Raccoon can
easily be ported to work with any language that can be
compiled to the LLVM IR. All tests use the LLVM/Clang
compiler toolchain.
attribute
We run all experiments on a machine with two Intel
Xeon (Sandy Bridge) processors and with 32 GB (8 ×
4 GB) DDR3 memory. Each processor has eight cores
with 256 KB private L2 caches. The eight cores on a
processor chip share a 20 MB L3 cache. Streaming en-
cryption/decryption hardware makes the cost of access-
ing memory from encrypted RAM banks almost the same
as the cost of accessing a DRAM bank. The underlying
hardware does not support encrypted RAM banks, but we
do not separately add any encryption-related overhead to
our measurements because the streaming access cost is
almost the same with or without encryption.
our
simulated
ORAM use the native hardware performance event—
UNHALTED CORE CYCLES. We measure overhead using
clock gettime(). Our software Path ORAM imple-
mentation is conﬁgured with a block size of 64 bytes.
Each node in the Path ORAM tree stores 10 blocks. The
Performance measurements
of
USENIX Association  
24th USENIX Security Symposium  441
11
#1#2#3#4#5#1#2#3#4#5ActualPredictedip−resolv.ascdscrndascdscrndActualPredictedfindmax2k100k500k2k100k500kActualPredictedtax#1#2#3#4#5#1#2#3#4#5ActualPredictedobfs. ip−resolv.ascdscrndascdscrndActualPredictedobfs. findmax2k100k500k2k100k500kActualPredictedobfs. taxORAM/Streaming Obfuscation
Control−Flow Obfuscation
2000
1500
)
X
1000
(
d
a
e
h
r
e
v
O
500
GhostRider
Raccoon
1987
1294
1,000
500
]
l
e
a
c
s
−
g
o
l
[
)
X
(
d
a
e
h
r
e
v
O
100
50
10
5
1
genetic−algo
matrix−mul
heap−add
med−risks
radix−sort
findmax
ip−tree
bin−search
heap−pop
histogram
classifier
dijkstra
crc−32
map
tax
Figure 8: Sources of obfuscation overhead.
GhostRider hardware/software framework [20, 21] that
implements Memory Trace Obliviousness. This section
focuses on the performance aspects of the two systems,
but as mentioned in Section 2, Raccoon provides sig-
niﬁcant beneﬁts over GhostRider beyond performance.
First, Raccoon provides a broad coverage against many
different side-channel attacks. Second, the dynamic ob-
fuscation scheme used in Raccoon strengthens the threat
model, since it allows the transformed code to be re-
leased to the adversary. Third, Raccoon does not require
special-purpose hardware. Finally, since GhostRider
adds instructions to mimic address traces in both branch
paths, it requires that address traces from obfuscated
code be known at compile-time, which signiﬁcantly lim-
its the programs that GhostRider can obfuscate. Rac-
coon relaxes this requirement by executing actual code,
so Raccoon can transform more complex programs than
GhostRider.
Methodology. We now describe our methodology for
simulating the GhostRider solution. As with our Rac-
coon setup, we compare GhostRider’s obfuscated pro-
gram with an aggressively optimized (compiled with
-O3) non-obfuscated version of the same program. Var-
ious compiler optimizations (dead code elimination,
vectorization, constant merging, constant propagation,
global value optimizations, instruction combining, loop-
invariant code motion, and promotion of memory to reg-
isters) interfere with GhostRider’s security guarantees,
so we disable optimizations for the obfuscated program.
We manually apply the transformations implemented in
495
320
152
127
432
46 81 115
heap−pop
histogram
0
map
find−max
dijkstra
112
20
0
26
0
0
matrixmul
heap−add
bin−search
Figure 9: Overhead comparison on GhostRider’s bench-
marks.
Even when we generously underestimate
GhostRider’s overhead, GhostRider sees an average
overhead of 195×, while Raccoon’s overhead is 21.8×.
the GhostRider compiler. We simulate a processor that
is modelled after the GhostRider processor, so we use
a single-issue in-order processor that does not allow
prefetching into the cache.
There are four reasons why our methodology signiﬁ-
cantly underestimates GhostRider’s overhead. The ﬁrst
three reasons stem from our inability to faithfully sim-
ulate all features of the GhostRider processor: (1) We
simulate variable-latency instructions, (2) we simulate
the use of a dynamic branch predictor, and (3) we sim-
ulate a perfect cache for non-ORAM memory accesses.
All three of these discrepancies give GhostRider an un-
realistically fast hardware platform. The fourth reason
arises because our simulator does not support AVX vec-
tor instructions, so we are unable to compare GhostRider
against a machine that can execute AVX vector instruc-
tions.
The non-obfuscated execution uses a 4-issue, out-of-
order core with support for Access Map Pattern Match-
ing prefetching scheme [12] for the L1, L2 and L3 data
caches. In all other respects, the two processor conﬁg-
urations are identical. Both processors are clocked at 1
GHz. The processor conﬁguration closely matches the
conﬁguration described by Fletcher et al. [10], and based
on their measurements, we assume that the latency to all
ORAM banks is 1,488 cycles per cache line. We run
GhostRider’s benchmarks on this modiﬁed Marss86 sim-
ulator and manually add the cost of each ORAM access
442  24th USENIX Security Symposium 
USENIX Association
12
to the total program execution latency.
can be further reduced by using such special purpose
hardware [22].
Performance Comparison. Figure 9 compares the
overhead of GhostRider on the simulated processor and
the overhead of Raccoon. Only those benchmark pro-
grams that meet GhostRider’s assumptions are used in
this comparison. The remaining seven applications can-
not be transformed by the GhostRider solution because
they use pointers or because they invoke functions in the
secret context. We see that Raccoon’s overhead (geo-
metric mean of 16.1× over all 15 benchmarks, geomet-
ric mean of 21.8× over GhostRider-only benchmarks)
is signiﬁcantly lower than GhostRider’s overhead (geo-
metric mean of 195×), even when giving GhostRider’s
processor substantial beneﬁts (perfect caching, lack of
AVX-vector support in the baseline processor, and dy-
namic branch prediction).
6.3 Software Path ORAM
This section considers choices for Raccoon’s ORAM im-
plementation.
In particular, to run on typical general-
purpose processors, we need to modify the Path ORAM
algorithm to assume just a tiny amount of trusted mem-
ory, which forces us to stream the position map and stash
multiple times to obliviously copy or update elements.
We thus consider three possible implementations. The
ﬁrst, recursive ORAM [33], places the position map in
a smaller ORAM until the position map of the smallest
ORAM ﬁts in the CPU registers. The second is a non-
recursive solution that streams over a single large posi-
tion map. The third uses AVX intrinsic operations and
streams over the entire array to access a single element.
Figure 10(a) compares the cost of ORAM initial-
ization for different ORAM sizes in our recursive and
non-recursive ORAM implementations. On this log-log
scale, we see that the non-recursive ORAM is signiﬁ-
cantly faster than the recursive ORAM for all sizes. Fig-
ure 10(b) compares our non-recursive ORAM implemen-
tation against the streaming approach.
In particular, it
measures the cost of accessing a single element and the
cost of 64 single-element random accesses using ORAM
and streaming. We see that the streaming implementa-
tion is orders of magnitude faster than our non-recursive
ORAM.
In summary, our software implementation of Path
ORAM requires non-trivial changes to the original Path
ORAM algorithm. Unfortunately, these changes im-
pose a prohibitively large memory bandwidth require-
ment, making the modiﬁed software Path ORAM far
costlier than streaming over arrays. Raccoon’s obfusca-
tion technique is compatible with the use of dedicated
ORAM memory controllers, and Raccoon’s overhead
7 Discussion
Closing Other Side-Channels. The existing Raccoon
implementation does not defend against kernel-space
side-channel attacks. However, many of Raccoon’s ob-
fuscation principles can be applied to OS kernels as well.
Memory updates in systems such as TxOS [28] can be
made oblivious using Raccoon’s cmov operation. By
contrast, non-digital side-channels appear to be funda-
mentally beyond Raccoon’s scope since physical charac-
teristics (power, temperature, EM radiation) of hardware
devices make it possible to differentiate between real val-
ues and decoy values.