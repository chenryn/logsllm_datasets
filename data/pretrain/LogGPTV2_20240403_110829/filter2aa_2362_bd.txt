7David E. Goldberg. (1989). Genetic Algorithms in Search, Optimization and Machine Learning.
(Boston: Addison-Wesley). ISBN: 0201157675
4. Copy all of the A legs into A′ up until the leg that contains the cross point.
Create a new leg in A′. Copy all tokens from current A leg into the new A′
leg up until the cross point. In session B, advance to the leg that contains
the cross point. In that leg, advance to the token after the cross point. From
there, copy the remaining tokens into the current A′ leg. Copy all the
remaining legs from B into A′.
5. If we have enough sessions stop. Else:
6. Create B′ from (B x A).
7. Start in B. Copy all of the B legs into B′ up until the leg that contains the
cross point. Create a new leg in B′. Copy all tokens from that B leg into the
new B′ leg, until the cross point. In session A advance to the leg that con-
tains the cross point. In that leg, advance to the token after the cross point.
From there, copy the remaining tokens into the current B′ leg. Copy all the
remaining legs from A into B′.
8. Repeat until our total number of sessions (1st + new children) equals the
number we started with.
7.4.13
Session Mutation
Since we are using elitism, the elite session is not modified. Otherwise, every session
is potentially mutated with probability p. The algorithm is shown in Figure 7.4:
1. For each session, we randomly choose a leg to do a data mutation on. We
then randomly choose another leg to do a type mutation on.
2. A data mutation modifies the data in one random token in the chosen leg.
Fuzzing heuristics are applied, but a few rules are in place to keep the
tokens from growing too large.
3. If the token is too large or invalid, we truncate or reinitialize.
4. The heuristics file also contains the rules detailing how each token is
mutated. For example, a token that contains strings (ASCII, STRING,
ASCII_CMD, etc.) is more likely to be mutated by the insertion of a large
or format string. Also, as part of the information we carry on each token,
208
Advanced Fuzzing
Figure 7.3
Session crossover.
we will know if each token contains specific ASCII traits such as numbers,
brackets, quotes, and so forth. We may mutate those as well. Tokens of
type (BINARY, LEN, and others.) are more likely to have bits flipped, hex
values changed, etc.
5. The type mutation has a chance to modify both the type of the leg and the
type of one token in that leg. Leg->type = _rand(2) could reinitialize the
legs type. (That will pick either a 0 or a 1. 0 indicates READ and 1 indi-
cates WRITE.) tok->type = _rand(14) could reinitialize the tokens type.
There are 0-13 valid types. For example, STRING is type 0 (structs.h con-
tains all the definitions and structure types).
7.4.14
Pool Crossover
Pool crossover is very similar to session crossover, but the fitness is measured dif-
ferently. Pool fitness is measured as the sum of the code uniquely covered by the ses-
sions within. That is, count all the unique functions or basic blocks hit by all
sessions in the pool. This provides a different (typically better) measure than, say,
the coverage by the best session in the pool (see Figure 7.5).
The algorithm is:
1. Order the pools by fitness, with the most fit being first. Again, pool fitness
is the sum of all the sessions’ fitness.
2. The first pool is copied to the next generation untouched. Thus, elitism is
also operating at the pool level.
3. Randomly pick two parents and perform single point crossover. The
crossover point in a pool is the location that separates one set of sessions
from another. 70% of the time we use only the top half of the sorted list to
pick parents from. 30% of the time we choose from the entire list of pools.
7.4
Evolutionary Fuzzing
209
Figure 7.4
Session mutation.
4. Create A′ from (A x B):
5. Start in A. Copy all of the sessions from A into A′ until the cross point. In
pool B, advance to the session after the cross point. From there, copy the
remaining sessions into A′.
6. If we have enough pools stop. Else:
7. Create B′ from (B x A).
8. Start in B. Copy all of the sessions from B into B′ until the cross point. In
pool A, advance to the session after the cross point. From there, copy the
remaining sessions into B′.
9. Repeat until the total number of pools (1st + new children) equals the
number started with.
7.4.15
Pool Mutation
As with session mutation, pool mutation does not modify the elite pool. The algo-
rithm is (example in Figure 7.6):
1. 50% of time add a session according to the new session initialization
rules.
2. 50% of the time delete a session.
3. If the sessions/pool are fixed, do both.
4. In all cases, don’t disturb the first session.
210
Advanced Fuzzing
Figure 7.5
Pool crossover.
7.4.16
Running EFS
From a high level, the protocol between EFS-GPF and EFS-PaiMei is as follows:
GPF initialization/setup data Æ PaiMei
Ready ¨ PaiMei
GPF {OK|ERR} Æ PaiMei
When all of the sessions for a given generation have been played, GPF contacts the
database, calculates a fitness for each session (counts hits) and for each pool (dis-
tinct hits for all sessions within a pool), and breeds sessions and pools as indicated
by the configuration options. Figures 7.7 and 7.8 show the EFS-GPF and EFS-
PaiMei portions of EFS in action. For the GUI portion we see:
1. Two methods to choose an executable to stalk:
a. The first is from a list of process identifications (PIDs). Click the
“Refresh Process List” to show running processes. Click the process
you wish to stalk.
b. The second is by specifying the path to the executable with arguments.
An example would be: “c:\textserver.exe” med
7.4
Evolutionary Fuzzing
211
Figure 7.6.
Pool mutation.
Figure 7.7.
The GUI portion of EFS.
2. We can choose to stalk functions (funcs) or basic blocks (BBs).
3. The time to wait for each target process load defaults to 6 seconds, but
could be much less (1 second) in many cases.
4. Hits can be stored to the GPF or PaiMei subdatabases that are in the
MySQL database. PaiMei should be used for tests or creating filter tags,
while GPF should be used for all EFS runs.
5. After each session, or stalk, we can do nothing, detach from the process
(and reattach for the next stalk), or terminate the process. The same
options are available if the process crashes.
6. Use the PIDA Modules box for loading the .pida files. These are derived
from executables or dynamically linked libraries (.DLLs) and are used to
set the breakpoints that enable the process stalking to occur. One exe-
cutable needs to be specified and as many .DLLs as desired.
7. There is a dialog box under Connections to connect to the MySQL data-
base. Proper installation and setup of EFS-PaiMei (database, etc.) is
included in a document in the EFS source tree.
8. The Data Sources box is the place to view target lists and to create filter
tags. This is done to speed up EFS by weeding out hits that are common to
every session. The process to create a filter tag is:
212
Advanced Fuzzing
a. Define a filter tag. (We called ours “ApplictionName_startup_conn_
junk_disconn_shutdown”)
b. Stalk with that tag and record to the PaiMei database.
c. Start the target application.
d. Using netcat, connect to the target application.
e. Send a few random characters.
f.
Disconnect.
g. Shutdown the target application.
9. There is another dialog box that defines the GPF connection to EFS-PaiMei
called Fuzzer Connect.
a. The default port is 31338.
b. The general wait time describes how long each session has to complete
before EFS will move on to the next session. This is needed to coordi-
nate the hit dumping to MySQL after each session. The default is .8
seconds, but for lean applications, running around .2 should be fine.
For larger applications, more time will be required for each session.
Tuning this number is the key to the speed that EFS will run (for exam-
ple: .4*100000=11hrs, .8*100000=22hrs, 1.6*100000=44hrs).
7.4
Evolutionary Fuzzing
213
Figure 7.8
The GPF Unix command line portion of EFS.
c. The “dump directory” defines a place for EFS to dump crash informa-
tion should a robustness issue be found. We typically create a directory
of the structure “..\EFS_crash_data\application_name\number.”
d. The number should coordinate to the GPF_ID for clarity and
organization.
For the GPF (command line) portion of EFS we have 32 options:
1. –E indicates GPF is in the evolving mode. GPF has other general purpose
fuzzing modes that will not be detailed here.
2. IP of Mysql db.
3. Username of Mysql db.
4. Password for Mysql db.
5. GPF_ID.
6. Starting generation. If a number other than zero is specified, a run is picked
up where it left off. This is helpful if EFS were to crash, hang, or quit.
7. IP of GUI EFS.
8. Port of GUI EFS.
9. Stalk type. Functions or basic blocks.
10. Play mode. Client indicates we connect to the target and server is the opposite.
11. IP of target. (Also IP of proxy in proxy mode.)
12. Port of target. (Also port of proxy in proxy mode.)
13. Source port to use. ‘?’ lets the OS choose.
14. Protocol. TCP or UDP.
15. Delay time in milliseconds between each leg of a session.
16. Number of .01 seconds slots to wait while attempting to read data.
17. Output verbosity. Low, med, or high.
18. Output mode. Hex, ASCII, or auto.
19. Number of pools.
20. Number of sessions/pool.
21. Is the number fixed or a max? Fixed indicates it must be that number,
while max allows any number under that to be valid as well.
22. Legs/session.
23. Fixed or max.
24. Tokens/leg.
25. Fixed or max.
26. Total generations to run.
27. Generation at which to perform session mutation.
28. Generation at which to perform pool crossover.
29. Generation at which to perform pool mutation.
30. User definable function on outgoing sessions. None indicates there isn’t one.
31. Seed file name.
32. Proxy mode. Yes or no. A proxy can be developed to all EFS to run against
none network protocols such as internal RPC API calls, etc.
33. (UPDATE: A 33rd was added to control diversity.)
214
Advanced Fuzzing
7.4.17
Benchmarking
The work in this section has become intense enough to warrant a whole new paper.
See Benchmarking Grey-box Robustness Testing Tools with an Analysis of the
Evolutionary Fuzzing System (EFS).8 The topics in that paper include
• Attack surface example;
• Functions vs. basic blocks;
• Learning a binary protocol;
• Pools vs. niching.
• EFS fitness function updates to achieve greater diversity.
7.4.18
Test Case—Golden FTP Server
The first test target was the Golden FTP server (GFTP).9 It is a public domain ftp
server GUI application for Windows that has been available since 2004. Analysis
shows approximately 5,100 functions in GFTP, of which about 1,500 are con-
cerned with the GUI/startup/shutdown/config file read/, leaving potentially 3,500
functions available. However, the typical attack surface of a program is consider-
ably smaller, often around 10%. We show more evidence of this in the benchmark-
ing research.
Three sets of experiments were run. Each experiment was run three times on
two separate machines (six total runs/experiment). The reason for two machines
was twofold: time savings, as each complete run can take about 6hrs/100genera-
tions and to be sure configurations issues were not present on any one machine.
Experiment 1 is one pool of 100 sessions. Experiment 2 had four pools each with
25 sessions. Experiment 3 had 10 pools each with 10 sessions. All other parameters
remain the same: The target was Golden Ftp Server v1.92, there were 10 legs/ses-
sion, 10 tokens/leg, 100 total generations, a session mutation every 7 generations,
for multiple pool runs—pool crossover every 5 generations, and pool mutation
every 9 generations. For these experiments we used function hits as the code cover-
age metric. The session, leg, and token sizes are fixed values.
7.4.19
Results
Figure 7.9 shows the average fitness for both pool and session runs, averaged over
all the runs for each group. Figure 7.10 shows the best fitness for both pool and ses-
sion, selected from the “best” run (that is, the best session of all the runs in the
group, and the best pool of all the runs in the group). The first thing that Figure 7.9
shows us is that pools are more effective at covering code than any single session.
Even the worst pool (1-pool) covers more code than the best session. Roughly
speaking, the best pool covers around twice as much as the best session. The second
observation that Figure 7.9 shows us is that multiple, interacting pools are more
7.4
Evolutionary Fuzzing
215
8J. DeMott, “Benchmarking Grey-Box Robustness Testing Tools with an Analysis of the Evolu-
tionary Fuzzing System (EFS).” www.vdalabs.com
9www.goldenftpserver.com/
effective than a single large pool. Note that this is not just a conclusion about
island-parallel evolutionary computation,10 since the interaction between pools is
more frequent and of a very different nature than the occasional exchange of a
small number of individuals as found in island parallelism. The pool interaction is
more in line with a second-order evolutionary process, since we are evolving not
only at the session level, but also at the pool level. While pool-1 starts out with bet-
ter coverage, it converges to less and less coverage. Both 4-pool and 10-pool start
out with less coverage, but have a positive fitness trajectory on average, and 4-pool
nearly equals the original 1-pool performance by around generation 180 and
appears to still be progressing.
Figure 7.10 shows that, selecting for the best pool/session from all the runs, 4-
pool does slightly outperform other approaches. That is, the best 4-pool run outper-
formed any other best pool and greatly outperformed any best session.
The information provided by Figures 7.11 through 7.13 shows the following:
First, they show the total number of crashes that occurred across all runs for 1-
pool, 4-pool, and 10-pool. The numbers around the outside of the pie chart are the
actual number of crashes that occurred for that piece, while the size of each pie
chart piece indicates that crash’s relative frequency with respect to all crashes
encountered. Furthermore, the colors of each piece reflect the addresses in just
called GFTP elsewhere where the crashes occurred. Remember that the only meas-
ure of fitness that EFS uses is the amount of code covered, not the crashes. How-
ever, these crash numbers provide a kind of history of the breadth of search each
experiment has developed. For example, all three experiments crashed predomi-
216
Advanced Fuzzing
Figure 7.9
Average fitness of pool and session over six runs.
10E. Cantu-Paz. (2000). Efficient and Accurate Parallel Genetic Algorithms. Norwell, MA:
Kluwer Academic Publishers.
nantly at address 0x7C80CF60. However, 10-pool found a number of addresses
that neither of the others did—for example, the other 0x7C addresses. While the
ultimate goal is to discover the address of the bug, the crash address provides a
place to start the search.
GFTP is an interesting (and obviously buggy) application. It creates a new
thread for each connection, and even if that thread crashes, it can keep processing
7.4
Evolutionary Fuzzing
217
Figure 7.11
One-pool crash total (all runs).
Figure 7.10
Best of pool and session over six runs.
Figure 7.13
Ten-pool crash total (all runs).
the current session in a new thread. This allows for multiple crashes/session, some-
thing that was not originally considered. This accounts for the thousands of crashes
observed. Also, keep in mind these tests are done in a lab environment, not on pro-
duction systems. Nothing was affected by our crashes or could have caused them.
These tests were done in January 2007, and no ongoing effort against GFTP is in
218
Advanced Fuzzing
Figure 7.12
Four-pool crash total (all runs).
place to observe whether these bugs have been patched. Also, no time was spent
attempting to develop exploits from the recorded crash data. It is the authors’ opin-
ion that such exploits could be developed, but we would rather focus on continued
development and testing of EFS.
7.4.20
Conclusions and Future Work
The Evolving Fuzzing System was able to learn a protocol and find bugs in real soft-
ware using a gray-box evolutionary robustness testing technique. Continuing
research might include:
• What is the probability of finding various bug types, as this is the final goal
of this research?
• How does its performance compare with existing fuzzing technologies?
• What bugs can be found and in what software?
• Could this type of learning be important to other fields?
• Is it possible to cover the entire attack surface with this approach? How
would one know, since we don’t have the source code?
• Pools don’t seem to have completely covered the target interface, is there a
niching or speciation approach we can design?
• Testing of clear text protocols was done, but is it also possible to learn more
complex binary protocols?
7.5
Summary
This chapter discussed advanced fuzzing techniques used to find bugs in modern
software. Generation fuzzers with high code coverage (CC) perform the best, but
the issue focused on in this chapter is developing methods to automatically gener-
ate data, so this doesn’t have to be done manually. The focus was on technologies
that automatically increase CC by either solving branch constraints or by evolving
groups of inputs.