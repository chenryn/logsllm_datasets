title:Towards Formal Verification of State Continuity for Enclave Programs
author:Mohit Kumar Jangid and
Guoxing Chen and
Yinqian Zhang and
Zhiqiang Lin
Towards Formal Verification of State Continuity 
for Enclave Programs
Mohit Kumar Jangid, The Ohio State University; Guoxing Chen, Shanghai Jiao 
Tong University; Yinqian Zhang, Southern University of Science and Technology; 
Zhiqiang Lin, The Ohio State University
https://www.usenix.org/conference/usenixsecurity21/presentation/jangid
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Towards Formal Veriﬁcation of State Continuity for Enclave Programs
Mohit Kumar Jangid
The Ohio State University
Southern University of Science and Technology
PI:EMAIL
Yinqian Zhang∗ (cid:66)
PI:EMAIL
Abstract
Trusted Execution Environments such as Intel SGX provide
software applications with hardware support for preventing
attacks from privileged software. However, these applications
are still subject to rollback or replay attacks due to their lack
of state continuity protection from the hardware. Therefore,
maintaining state continuity has become a burden of soft-
ware developers, which is not only challenging to implement
but also difﬁcult to validate. In this paper, we make the ﬁrst
attempt towards formally verifying the property of state conti-
nuity for SGX enclave programs by leveraging the symbolic
veriﬁcation tool, Tamarin Prover, to model SGX-speciﬁc pro-
gram semantics and operations, and verify the property of
state continuity with respect to monotonic counters, global
variables, and sealed data, respectively. We apply this method
to analyze these three types of state continuity issues exhib-
ited in three open-source SGX applications. We show that our
method can successfully identify the ﬂaws that lead to fail-
ures of maintaining state continuity, and formally verify the
corrected implementation with respect to the desired property.
The discovered ﬂaws have been reported to the developers
and some have been addressed.
1 Introduction
The demand for conﬁdential computing has driven the recent
rapid development of trusted execution environments (TEE),
such as Intel Software Guard Extension (SGX) and AMD Se-
cure Encrypted Virtualization (SEV), in mainstream proces-
sors. These hardware-assisted TEEs allow the applications to
compute directly on conﬁdential data without leaking secrets
to powerful adversaries who control the computing infrastruc-
tures (e.g., operating systems). Introduced in 2013 [7, 30, 39]
and ofﬁcially released in 2015, Intel SGX becomes a lead-
ing TEE product that gains signiﬁcant attractions from both
∗The bulk of the research was done while the author was a faculty member
at The Ohio State University.
Guoxing Chen
Shanghai Jiao Tong University
PI:EMAIL
Zhiqiang Lin
The Ohio State University
PI:EMAIL
academia and industry in developing various novel systems
(e.g., [8,13,32,50,52]) and applications (e.g., [43,45,51,56]).
However, software built with TEE support is not secure
by default. Building a secure SGX application comes with
many challenges, one of which is the lack of state continu-
ity protection in SGX. State continuity is a well-known re-
search problem in the literature of trusted computing (e.g.,
[6, 16, 22, 38, 41, 49, 50, 57]). It states that when a protected
module resumes execution from an interruption (e.g., reboots
or system crashes), it should resume from the same state be-
fore the interruption [41].
Unfortunately, the issue of state continuity becomes even
more complex in the context of Intel SGX. An SGX appli-
cation is divided into untrusted and trusted components; the
trusted components running inside the protected memory re-
gions (dubbed enclaves) form the trusted computing base
(TCB) of the application. Because the trusted components
cannot directly access system services, such as ﬁle systems,
network I/O, and memory management, the execution of the
TCB is interleaved with frequent requests to the untrusted
part for such services. The support of enclave multi-threading
further complicates the execution states of the TCB, which
allows concurrent updates of the TCB states.
The SGX hardware cannot ensure state continuity of the
enclave programs for two reasons. First, the execution state
can be distorted by data input from the untrusted component.
Even when such data is encrypted and integrity protected, e.g.,
monotonic counters, sealed storage, and authenticated mes-
sages, a previously used data can be replayed to the enclave
program—bypassing decryption and integrity checks—and
effectively rolling the TCB state back to a previous one. Sec-
ond, the execution state can be affected by global enclave
variables altered by concurrently executed enclave threads.
As thread scheduling can be manipulated by the adversary,
thread-unsafe enclave code is particularly susceptible to data
races [53]. As such, improperly implemented enclave pro-
grams may ﬁnd itself vulnerable to attacks due to its lack of
state continuity protection.
USENIX Association
30th USENIX Security Symposium    573
Ensuring state continuity in an enclave program is not easy.
To do so, the developer must clearly understand the boundary
between trusted and untrusted components, carefully use the
SGX SDK to implement synchronization locks and the re-
mote/local attestation logic, and properly implement accesses
to monotonic counters, secure clocks, sealed storage, and var-
ious cryptographic primitives. This is unquestionably tedious
and error-prone. Validating the correctness of enclave im-
plementation, nevertheless, in a programtic and automated
manner is a research problem yet to be solved.
In this paper, we make the ﬁrst step towards formal
veriﬁcation of state continuity for enclave programs. Specif-
ically, we resort to symbolic veriﬁcation, which has been
shown with signiﬁcant success in proving protocol secu-
rity [10]. Symbolic veriﬁcation tools, such as Tamarin [40]
and ProVerif [15], typically come with built-in support
for standard cryptographic primitives, Dolev-Yao Model
adversary capabilities, and desired properties speciﬁed in
ﬁrst order logic. These tools have been used to analyze TLS
1.3 [14, 21, 26], the Noise framework [29, 36], the secure
messaging protocol (e.g., Signal) [35], 5G authentication key
exchange [12], and so on. However, symbolic veriﬁcation has
never been applied to verify state continuity for SGX enclave
programs. Modeling state continuity involves interaction
among the CPU hardware, the operating systems, and
the enclave software, which is intuitively more complex
than modeling message passing between network entities.
Therefore, prior to this work, whether symbolic veriﬁcation
can be applied to this problem remains unclear.
Our key observation is that the operations of enclave
programs can be approximated by the execution logic of
Tamarin and the Dolev-Yao model [27]. Because the memory
of enclaves is encrypted, the untrusted software cannot direct
inspect the internal states of the enclave program; however the
untrusted software may act as a man-in-the-middle adversary,
who is capable of eavesdropping, reordering, blocking,
delaying, replaying, modifying, or even generating messages
between trusted entities (e.g., enclaves, remote users), by
manipulating the instantiation, data inputs, and execution
ordering of enclave threads. Moreover, the property of state
continuity can be modeled as the problem of uniqueness
of objects and events, one-to-one mapping of requests and
responses, and speciﬁc ordering of events. As such, ﬁrst-order
logic commonly used in symbolic veriﬁcation tools should
be sufﬁcient for reasoning state continuity.
Therefore, we propose to automate formal veriﬁcation of
state continuity for SGX programs using Tamarin prover [40],
a well-known symbolic veriﬁcation tool. Speciﬁcally, we use
Tamarin to model the execution of SGX programs, including
enclave APIs, isolated memory, monotonic counters, SGX
derived keys, etc., and then verify their state continuity prop-
erties. Tamarin is chosen over other similar tools, such as
ProVerif, for several reasons. First, Tamarin supports the ab-
straction of mutable global states and adopts a more generic
and low-level encoding language [10]—Multiset Rewriting
rules—than ProVerif. This capability allows us to model the
execution of SGX applications in sufﬁcient details. Second,
whereas ProVerif uses approximation to make the prover au-
tomatic and efﬁcient, Tamarin’s prover engine does not make
any approximation over the model developed by its users.
Therefore, the use of Tamarin gives us ﬁne-grained control of
the model and the execution of the prover.
We apply our method on three categories of ﬂaws that
allow violation of state continuity; in these three categories,
the TCB states are stored in monotonic counters, global
variables, and data in the sealed storage, respectively. We
have discovered such problems in many open source SGX
applications and selected one application from each category,
namely, Hyperledger Sawtooth [1], SGXEnabledAccess [19],
and BI-SGX [42]. We developed Tamarin models1 for the
core part of each of these three applications.
While expertise of using the Taramin Prover is still re-
quired, templates for modeling individual SGX primitives
and state continuity properties could signiﬁcantly facilitate
the construction of the Tamarin models. Experiments suggest
that our method can successfully identify the state continuity
vulnerabilities in these applications. We have empirically val-
idated the identiﬁed ﬂaws and found that they can indeed be
exploited by the adversary to alter the integrity of the execu-
tion of the vulnerable enclave programs. We also show that
Tamarin can provide proofs of the absence of such vulnerabil-
ities after these ﬂaws have been mitigated.
Contributions. The contributions of this paper are three-fold:
• It makes the ﬁrst attempt towards using symbolic veriﬁ-
cation tools to verify the property of state continuity for
SGX enclave programs in a semi-automated manner. To
the best of our knowledge, there is no prior work on the
automated detection or veriﬁcation of logic ﬂaws like state
continuity.
• It presents new techniques of utilizing the Tamarin Prover
to model SGX primitives and reason about the state con-
tinuity property with ﬁrst-order logic. Prior to our work,
use cases of Tamarin are limited to veriﬁcation of cryp-
tography protocols against Dolev-Yao adversaries. This
work for the ﬁrst time extends the application of Tamarin
to verify program logic.
• It applies the new techniques on the veriﬁcation of three
open-source SGX applications. Our proposed method can
successfully identify the state continuity ﬂaws and verify
the absence of such ﬂaws in the modiﬁed versions. The
discovered ﬂaws have been reported to the developers of
these applications and some have been addressed in later
versions of these applications.
1Our Tamarin code is released at Github: https://github.com/
OSUSecLab/SGX-Enclave-Formal-Verification.
574    30th USENIX Security Symposium
USENIX Association
2 Background
Intel Software Guard Extension
2.1
Intel Software Guard eXtensions (SGX) [30] is microarchi-
tectural extensions introduced in recent Intel processors, aim-
ing at providing shielded execution environment, dubbed en-
claves, for applications. An application for Intel SGX is di-
vided into trusted and untrusted components, with the trusted
components protected by the enclaves. Each enclave could
support multiple threads running concurrently; the thread
metadata is managed in a particular data structure called
thread control structure (TCS).
Enclave identities. When an enclave is created, the hash
value of its initial code and data is calculated by hardware
as the enclave identity (i.e., MRENCLAVE). Additionally,
each enclave will be signed by its developer—Independent
Software Vendor (ISV) as coined by Intel—before release.
The hash value of the public signature veriﬁcation key is used
as the enclave’s sealing identity (i.e., MRSIGNER).
Remote attestation (RA). Intel provides a remote attestation
mechanism for the remote client to verify that the enclave
code is running on a legitimate Intel CPU with proper mi-
crocode patches, and the enclave identity is the same as ex-
pected by the client. A successful RA will allow the client to
trust the execution environment of the enclave program and
then provision secrets into the enclave.
Sealing. Intel SGX provides a mechanism called sealing to
enable enclaves to securely store sensitive data outside the
protected memory. A private key called sealing key can be
derived within the enclave to encrypt the sensitive data before
storing it outside the enclave memory. The sealing key, like
other SGX-speciﬁc secrets, can be conﬁgured accessible to
all enclaves with the same MRENCLAVE or with the same
MRSIGNER.
Ecalls and Ocalls. To facilitate the development of SGX ap-
plications, Intel provides an ofﬁcial SGX SDK [4], which pro-
vides standard interfaces (ecalls) for calling into the enclave
code from the untrusted application and interfaces (ocalls)
for the enclave code to call untrusted functions for system
services. The SDK also provides standard cryptographic APIs
and high-level functions for sealing and remote attestation.
Platform service enclave. Intel provides a privileged enclave,
called Platform Service Enclave (PSE), to access Converged
Security and Manageability Engine (CSME), a secure co-
processor on the same machine. PSE provides other enclaves
an interface to access trusted monotonic counters and trusted
clocks that are maintained in the CSME.
2.2 Tamarin Prover
Tamarin [40] is a software tool for symbolic modeling of
cryptographic protocols and veriﬁcation of desired security
properties. In particular, it models agents of a security
protocol and messages passed among them, a desired security
property that the protocol aims to maintain, and a proactive
or passive adversary. The foundation of the Tamarin prover
is a multiset rewriting rules (MSR) for modeling a protocol,
including a set of equational theories dictating cryptographic
operations, and a ﬁrst-order logic formula specifying the de-
sired property. Tamarin offers automated or semi-automated
construction of proofs by checking the satisﬁability of the
negated formula of the desired security property.
The input to a Tamarin tool comprises a model of a crypto-
graphic protocol, in the form of a set of MSRs, and the desired
property, which is represented in ﬁrst-order logic. Each agent
of the protocol is modeled by several MSRs, each of which
abstracts one or multiple actions of the agent, e.g., receiving
requests, performing operations cryptographic operations, or
producing responses. Tamarin then outputs reports of whether
the property is satisﬁed in all possible executions of the
model. If so, a proof is provided; otherwise, Tamarin produces
a counter-example execution of the model (which is visually
presented in a graph). Since proving a property for a given
model is undecidable, Tamarin does not always terminate.
2.2.1 Terms and Functions
In Tamarin, cryptographic messages are modeled as terms,
which are categorized into fresh terms and public terms. The
former are used to model nonces and private keys, and the