title:Self-Encrypting Deception: Weaknesses in the Encryption of Solid State
Drives
author:Carlo Meijer and
Bernard van Gastel
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
Self-encrypting deception: weaknesses in the
encryption of solid state drives
Carlo Meijer
Institute for Computing and Information Sciences
Radboud University Nijmegen
PI:EMAIL
Abstract—We have analyzed the hardware full-disk encryption
of several solid state drives (SSDs) by reverse engineering their
ﬁrmware. These drives were produced by three manufacturers
between 2014 and 2018, and are both internal models using the
SATA and NVMe interfaces (in a M.2 or 2.5" traditional form
factor) and external models using the USB interface.
In theory, the security guarantees offered by hardware encryp-
tion are similar to or better than software implementations. In
reality, we found that many models using hardware encryption
have critical security weaknesses due to speciﬁcation, design,
and implementation issues. For many models, these security
weaknesses allow for complete recovery of the data without
knowledge of any secret (such as the password).
BitLocker, the encryption software built into Microsoft Win-
dows will rely exclusively on hardware full-disk encryption if
the SSD advertises support for it. Thus, for these drives, data
protected by BitLocker is also compromised.
We conclude that, given the state of affairs affecting roughly
60% of the market, currently one should not rely solely on
hardware encryption offered by SSDs and users should take
additional measures to protect their data.
I. INTRODUCTION
In recent years, the protection of sensitive data has received
increased attention. Protection of digital data has become a
necessity, certainly in the light of the new European Data
Protection Regulation. Technically, encryption is the go-to
protection mechanism; it may be implemented in software or
hardware (or both). It can be applied on the level of ﬁles, or
the entire drive, which is called full-disk encryption. Full-disk
encryption is often the solution of choice as it takes away
concerns of sensitive data leakage through, e.g. temporary
ﬁles, page ﬁles, and caches. Several software solutions for full-
disk encryption exist, and modern operating systems typically
integrate it. Purely software-based encryption has inherent
weaknesses, such as the encryption key being present in RAM
at all times and performance drawbacks.
In an attempt to address these weaknesses, hardware full-
disk encryption is often proposed; the encryption is performed
within the drive itself, thereby conﬁning the encryption key
exclusively to the drive. Typically, the encryption itself is
performed by a dedicated AES co-processor, whereas the
software on the drive (ﬁrmware) takes care of the key man-
agement. It is often regarded as the successor of software
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:36)(cid:66)(cid:83)(cid:77)(cid:80)(cid:1)(cid:46)(cid:70)(cid:74)(cid:75)(cid:70)(cid:83)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:25)(cid:25)
(cid:24)(cid:19)
Bernard van Gastel
School of Computer Science
Open University of the Netherlands
and
Institute for Computing and Information Sciences
Radboud University Nijmegen
Bernard.vanGastel@{ou.nl,ru.nl}
full-disk encryption. Full-disk encryption software, especially
those integrated in modern operating systems, may decide to
rely solely on hardware encryption in case it detects support
by the storage device. In case the decision is made to rely on
hardware encryption, typically software encryption is disabled.
As a primary example, BitLocker, the full-disk encryption
software built into Microsoft Windows, switches off software
encryption and completely relies on hardware encryption by
default if the drive advertises support.
Contribution. This paper evaluates both internal and external
storage devices, from three vendors, adhering to standards
for secure storage. The vendors combined produce roughly
60% of the SSDs sold between 2014 and 2018 [1]. An
overview is given of possible ﬂaws that apply in particular
to hardware-based full-disk encryption (Section IV), and a
methodology is provided for the analysis (Section V). We
have analyzed ﬁrmware from different SSD models offering
hardware encryption, focusing on these ﬂaws (see Section VI
and Table I). The analysis uncovers a pattern of critical issues
across vendors. For multiple models, it is possible to bypass
the encryption entirely, allowing for a complete recovery of
the data without any knowledge of passwords or keys. The
situation is worsened by the delegation of encryption to the
drive by BitLocker. Due to the default policy, many BitLocker
users are unintentionally using hardware encryption, exposing
them to the same threats. We should reconsider how we view
hardware encryption: as a layered defense, or exclusively in
charge of protecting data (without active software encryption).
Related work. In 2013 the possibility of debugging a hard
drive through JTAG (hardware debug port which can control
the processor and memory) was demonstrated and created
possibly the ﬁrst public hard drive ﬁrmware rootkit [2].
Domburg’s work has inspired more research around anti-
forensics such as [3], [4]. Background on reverse engineering
embedded devices such as SSDs and PLCs can be found in [5].
Leaked documents indicate that even the NSA is using these
techniques [6]. Besides, proprietary cryptographic systems
have often shown to be much weaker in practice than stan-
dardized publicly available alternatives once implementation
details are uncovered [7]. Within the scope of storage devices
with integrated hardware encryption, serious vulnerabilities
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
have also previously been identiﬁed in external drives using
proprietary protection schemes. An example is the external
Secustick, which unlocks by simply sending a command (not
containing a password) [8]. Another example is the Western
Digital MyPassport family of external drives, which suffers
from RAM leakage, weak key attacks, or even hardcoded
keys [9]. However these ﬁndings are isolated incidents limited
to proprietary solutions, and neither consider implementations
of established standards for secure storage nor consider these
issues across multiple vendors. We focus on an ofﬂine attack
where an attacker has physical control of a switched off drive.
Online attacks against SSDs are shown to be possible [10].
Responsible disclosure. After discovering these vulnerabil-
ities, we followed a process of responsible disclosure. In
this case,
the National Cyber Security Center (NCSC) of
the Netherlands was informed ﬁrst, which assisted in the
responsible disclosure process, by setting up the contact with
the manufacturers involved. We cooperated with Microsoft,
Crucial, Samsung, and Western Digital/Sandisk to ﬁx their
products and agreed not to disclose the vulnerabilities for
up to six months. The parties involved were notiﬁed at the
beginning of 2018 (and released to the public on November 5,
2018), except for Western Digital/Sandisk which was notiﬁed
in December of 2018 due to new ﬁndings. These vendors have
conﬁrmed the reported issues. For models being supported,
ﬁrmware updates are either released or in development.
II. BACKGROUND
A. Software vs Hardware Encryption
To avoid negatively impacting the data throughput when
encryption is switched on, SSDs with encryption support
or self-encrypting drives (SEDs) always house a dedicated
AES co-processor that provides for the encryption. Therefore,
data encryption is essentially ‘free’ in terms of computational
resources. These drives encrypt all data stored on them with
the disk encryption key (DEK), even in the case when the data
is not password-protected. All drives considered in this paper
use this approach. This essentially transforms the problem of
protecting the data into protecting the DEK, introducing two
beneﬁts: the data stored can be wiped instantly by erasing the
DEK, and setting or changing the password does not require
re-encryption of all user data.
B. Hardware encryption standards
ATA Security: The standard for ATA (AT Attachment, with
AT being a reference to the IBM PC/AT) storage devices [11]
deﬁnes the security feature set, which allows for locking and
unlocking with a password. The goal of the ATA security
feature set was limited to access control: it did not aim to stop
a well-motivated attacker with physical access. At the time
SEDs were ﬁrst created, it made sense to re-purpose the ATA
security password for encryption. However, since the feature
set already existed, ATA does not standardize cryptographic
primitives or even state that encryption should be used.
SED manufacturers commonly advertise that their products
use strong cryptography, such as AES-256. Unfortunately,
(cid:24)(cid:20)
drive manufacturers typically do not provide encryption im-
plementation details, or in case of ATA security, even state
whether encryption is used at all. In our opinion, it is rea-
sonable to assume so. However, the standard is not violated
in any way in case the password is used for access control
alone. From the ATA standard [11]: "If security is enabled
on the device, the use of the Master password is indicated
by the MASTER PASSWORD CAPABILITY bit. The MASTER
PASSWORD CAPABILITY bit represents High or Maximum as
described in this subclause. The MASTER PASSWORD CAPA-
BILITY bit is modiﬁed during the processing of a SECURITY
SET PASSWORD command that speciﬁes a User password. If
the MASTER PASSWORD CAPABILITY bit is set to High (i.e.,
zero), either the User password or Master password are used
interchangeably. If the MASTER PASSWORD CAPABILITY bit
is set to Maximum (i.e., one), the Master password is not
used with the SECURITY DISABLE PASSWORD command and
SECURITY UNLOCK command. The SECURITY ERASE UNIT
command, however, uses either a valid User password or
Master password."
By default, the Master password is set by the manufacturer.
In case the user sets a password, he must
take care to
either also change the Master password, or set the MASTER
PASSWORD CAPABILITY bit to Maximum. If he fails to do
so, the Master password allows anyone with knowledge of the
factory-default password to access his data.
TCG Opal: TCG Opal [12] is a newer speciﬁcation for
SEDs. It encompasses a communication protocol that is lay-
ered on top of ATA or NVMe (Non Volatile Memory express,
a recent storage interface). Furthermore, Opal mandates the
use of either AES-128 or AES-256. The encryption should
meet the bandwidth capability of the storage device. Opal
compliant drives allow multiple passwords (credentials in Opal
terminology) to be deﬁned. Each can be assigned to perform
various actions within the Opal subsystem. Special Admin
credentials are used to perform provisioning and conﬁguration.
A storage device can be divided into multiple locking
ranges, that can be locked or unlocked independently. Each
locking range is encrypted with a different DEK (Media
Encryption Key in Opal terminology), and each locking range
can be erased independently of the others. A range can be
erased by generating a new DEK for that range. A special
global range is deﬁned as the range that covers all sectors
of the disk not covered in other ranges. Multiple passwords
can be assigned permission to unlock a particular range.
Additionally, a single password can be assigned permission to
unlock multiple ranges. Phrased differently: a many-to-many
relation exists between passwords and locking ranges.
A scheme supporting all of the aforementioned properties,
and cryptographically enforces them, is complex to implement.
On top of that, no reference implementation by the Trusted
Computing Group exists. Consequently, drive manufacturers
all have to design and implement encryption (schemes) them-
selves. Finally, compliance tests do not reveal design and im-
plementation weaknesses, as they only verify whether the drive
behaves as expected given certain sequences of commands. We
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
believe that these circumstances combined are likely to be the
root cause of several implementation weaknesses.
Proprietary alternatives: Several proprietary alternatives
to TCG Opal exist. Examples are Seagate DriveTrust, the
Western Digital MyPassport family of drives and Samsung’s
portable SSDs. Manufacturers may opt for a proprietary
solution for example because the standard may have been
introduced before Opal came into existence, or because a
simpler scheme is preferred over Opal.
III. ATTACKER MODEL
Here we list the attacker models relevant to full-disk en-
cryption. In the rest of this article, we will only be concerned
with the last one, as the implications of the ﬁrst two are
roughly equivalent when offsetting software against hardware
encryption. We do, however, list them all here because it is in
our opinion important to state why they are equivalent.
Machine off, no awareness. The adversary has momentary
physical access to the powered-down machine, and the victim
is unaware of this, creating an opportunity for the so-called evil
maid attack. The encounter is used to install data exﬁltration
software or hardware on the victim’s machine. In case of a
hardware modiﬁcation, e.g. a physical key logger device, to the
best of our knowledge, no meaningful countermeasure exists
today. For software modiﬁcations, the story is more nuanced.
PCs ﬁtted with a Trusted Platform Module (TPM) can take
advantage of the sealing functionality, where cryptographic
key material is bound to the software and hardware. Hardware
full-disk encryption does not mitigate the evil maid scenario in
a meaningful way. Hence, this attacker model is out of scope.
Machine on. The adversary has physical access to a powered-
on machine while the encryption containers are unlocked.
Software-based encryption solutions typically keep the crypto-
graphic key in RAM, which is vulnerable to cold boot attacks,
DMA attacks, or any other means of data exﬁltration, including
physical removal and readout with an external device. How-
ever, it is worth mentioning that software encryption exists
that defends against such attacks, by storing the secret keys in
CPU registers [13], [14].
An argument that is often put forward in favor of hardware
encryption is that the secret key is not stored in RAM, and
therefore is not vulnerable to the aforementioned attacks. In
reality, this argument is invalid for several reasons.
First, the software running on the host PC controlling the
hardware encryption, typically does keep a secret key in RAM,
in order to support Suspend-to-RAM (S3), a low-power state
wherein all peripheral devices are shut down. Since the SSD is
powered down, it must be unlocked again once the system is
resumed, and therefore either the operating system must retain
a copy of the secret key at all times, or the user must enter
it again. In virtually all implementations, including BitLocker,
the former approach is chosen [15].
Second, the burden of keeping the secret key is moved to the
SSD, not eliminated. The SSD typically keeps the key in the
main memory of its controller. SSDs are not security-hardened
devices by any standard. In fact, many have a debugging
interface exposed on their PCB, allowing one to attach a
debugging device and extract the secret key. Several means of
obtaining code execution on the drive exist (see Section V-B2).
Third, a memory readout attack against software encryption
requires physical access. Given this, the attacker also has the
opportunity to carry out a hot-plugging attack against hardware
encryption. This has been demonstrated in practice [15].
As with the previous attacker model, opportunities and sub-
sequent impact are roughly equivalent compared to software
encryption. Therefore, this attacker model is also out of scope.
Machine off, awareness. The adversary has physical access
to a powered-down machine, and the victim is aware of this
(such as during a border-control search in a back room).
Therefore, from that point onward, the victim is unwilling to
enter key information into the machine. In this scenario, given
that the implementation is sound, software full-disk encryption
offers full conﬁdentiality of the data, and hardware encryption
supposedly does so as well. In this paper, we focus on this
attacker model.
IV. POSSIBLE SECURITY ISSUES WITH HARDWARE
ENCRYPTION
Properly implementing a hardware full disk encryption
scheme is not trivial, as can be seen by the following list of
possible pitfalls. We divide these issues in three categories:
speciﬁcation, design and implementation issues. The issues
presented in the remainder of this section are used as a
guideline in Section VI in order to assess how well hardware
encryption is implemented.
A. Speciﬁcation issues
Both lack of speciﬁcation and too detailed speciﬁcation
can have an impact on the difﬁculty to implement a standard
properly. An example of lack of speciﬁcation and misuse can
be seen in the ATA security standard, and an example of too
detailed speciﬁcations is TCG Opal, both discussed below.
The purpose of the ATA security feature set is limited to
access control only. It was never intended to be used for
encryption. Nevertheless, manufacturers decided to use it for
this purpose. The ATA standard offers no implementation
guidance of any kind on how the data is stored securely.
The TCG Opal standard, being speciﬁcally designed for