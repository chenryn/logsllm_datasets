# 强网杯2020决赛RealWord的Chrome逃逸——GOOexec（GOO）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
刚开始接触v8方面的漏洞利用，就从这题分享一下我学习的过程。
## 0x01 前置知识
###  JIT
简单来说，JS引擎在解析javascript代码时，如果发现js里有段代码一直在做重复的类似操作，比如一个循环语句，且重复次数超过某个阈值，那么就会将这段JS代码翻译为本机的汇编代码，以提高代码的执行速度，这就叫JIT优化，如下的js代码可以触发v8的JIT优化
    for (var i=0;i [FastProperties]
     - prototype: 0x15ed082cb529 
     - elements: 0x15ed080426dd  [HOLEY_SMI_ELEMENTS]
     - length: 0
     - properties: 0x15ed080426dd  {
        0x15ed08044649: [String] in ReadOnlySpace: #length: 0x15ed08242159  (const accessor descriptor)
     }
    new Array(0): 0x15ed08148575: [JSArray]
     - map: 0x15ed083038d5  [FastProperties]
     - prototype: 0x15ed082cb529 
     - elements: 0x15ed080426dd  [HOLEY_SMI_ELEMENTS]
     - length: 0
     - properties: 0x15ed080426dd  {
        0x15ed08044649: [String] in ReadOnlySpace: #length: 0x15ed08242159  (const accessor descriptor)
     }
    []: 0x15ed08148585: [JSArray]
     - map: 0x15ed0830385d  [FastProperties]
     - prototype: 0x15ed082cb529 
     - elements: 0x15ed080426dd  [PACKED_SMI_ELEMENTS]
     - length: 0
     - properties: 0x15ed080426dd  {
        0x15ed08044649: [String] in ReadOnlySpace: #length: 0x15ed08242159  (const accessor descriptor)
     }
我们看到，Array(0)和new
Array(0)产生的对象在`不考虑JIT的情况下`是一样的，而[]类型为PACKED_SMI_ELEMENTS，如果考虑了JIT，那么情况会变得复杂，稍后的题中将遇到这种情况。
## 0x02 漏洞分析
###  切入点
题目给了我们一个diff文件，以及经过patch后编译的chrome浏览器和v8引擎。其中diff文件如下
    diff --git a/src/compiler/load-elimination.cc b/src/compiler/load-elimination.cc
    index ff79da8c86..8effdd6e15 100644
    --- a/src/compiler/load-elimination.cc
    +++ b/src/compiler/load-elimination.cc
    @@ -866,8 +866,8 @@ Reduction LoadElimination::ReduceTransitionElementsKind(Node* node) {
         if (object_maps.contains(ZoneHandleSet(source_map))) {
           object_maps.remove(source_map, zone());
           object_maps.insert(target_map, zone());
    -      AliasStateInfo alias_info(state, object, source_map);
    -      state = state->KillMaps(alias_info, zone());
    +      // AliasStateInfo alias_info(state, object, source_map);
    +      // state = state->KillMaps(alias_info, zone());
           state = state->SetMaps(object, object_maps, zone());
         }
       } else {
    @@ -892,7 +892,7 @@ Reduction LoadElimination::ReduceTransitionAndStoreElement(Node* node) {
       if (state->LookupMaps(object, &object_maps)) {
         object_maps.insert(double_map, zone());
         object_maps.insert(fast_map, zone());
    -    state = state->KillMaps(object, zone());
    +    // state = state->KillMaps(object, zone());
         state = state->SetMaps(object, object_maps, zone());
       }
       // Kill the elements as well.
首先，patch点出现在`ReduceTransitionElementsKind`和`ReduceTransitionAndStoreElement`函数中，从源文件路径知道这个类跟JIT编译器有关，在某些情况下会影响到编译出的代码。经过个人的研究，发现
`ReduceTransitionElementsKind`的作用是为了加快`elements`的类型转换，如果在一段会被JIT优化的js代码段中对数组的element进行类型转换操作，就会调用这个函数来构建相关的汇编代码。
###  小实验
首先`b
ReduceTransitionElementsKind`和`bReduceTransitionAndStoreElement`设置断点，运行如下的测试代码
    var a;
    for (var i=0;i
    0x33ea00084f6c    ac  4d8d5910       REX.W leaq r11,[r9+0x10]
    0x33ea00084f70    b0  4d8918         REX.W movq [r8],r11
    0x33ea00084f73    b3  4983c101       REX.W addq r9,0x1
    0x33ea00084f77    b7  41bb5d383008   movl r11,0x830385d      ;; (compressed) object: 0x33ea0830385d 
    0x33ea00084f7d    bd  458959ff       movl [r9-0x1],r11
    0x33ea00084f81    c1  4d8bb550010000 REX.W movq r14,[r13+0x150] (root (empty_fixed_array))
    0x33ea00084f88    c8  45897103       movl [r9+0x3],r14
    0x33ea00084f8c    cc  45897107       movl [r9+0x7],r14
    0x33ea00084f90    d0  41c7410b00000000 movl [r9+0xb],0x0
    0x33ea00084f98    d8  49bf89252d08ea330000 REX.W movq r15,0x33ea082d2589    ;; object: 0x33ea082d2589  value=0x33ea08383dd5 >
    0x33ea00084fa2    e2  45894f0b       movl [r15+0xb],r9
可以看到，在这里，Array(0)初始为了`PACKED_SMI_ELEMENTS`类型的数组，因此对其条目赋予double值时，会发生类型转换。  
接下来，我们看第二段js代码的JIT代码中创建new Array(0)的部分
    0x57300084f47    87  49b8e83d22e5f8550000 REX.W movq r8,0x55f8e5223de8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
    0x57300084f51    91  4d8b08         REX.W movq r9,[r8]
    0x57300084f54    94  4d8d5910       REX.W leaq r11,[r9+0x10]
    0x57300084f58    98  49bcf03d22e5f8550000 REX.W movq r12,0x55f8e5223df0    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
    0x57300084f62    a2  4d391c24       REX.W cmpq [r12],r11
    0x57300084f66    a6  0f86b5010000   jna 0x57300085121  
    0x57300084f6c    ac  4d8d5910       REX.W leaq r11,[r9+0x10]
    0x57300084f70    b0  4d8918         REX.W movq [r8],r11
    0x57300084f73    b3  4983c101       REX.W addq r9,0x1
    0x57300084f77    b7  41bb25393008   movl r11,0x8303925       ;; (compressed) object: 0x057308303925 
    0x57300084f7d    bd  458959ff       movl [r9-0x1],r11
    0x57300084f81    c1  4d8bb550010000 REX.W movq r14,[r13+0x150] (root (empty_fixed_array))
    0x57300084f88    c8  45897103       movl [r9+0x3],r14
    0x57300084f8c    cc  45897107       movl [r9+0x7],r14
    0x57300084f90    d0  41c7410b00000000 movl [r9+0xb],0x0
    0x57300084f98    d8  49bf8d252d0873050000 REX.W movq r15,0x573082d258d    ;; object: 0x0573082d258d  value=0x057308373935 >
可以看到，new Array(0)一开始就是`HOLEY_DOUBLE_ELEMENTS`类型，可以满足a[0] = 1.1的操作，不需要再做类型转换。  
接下来，我们看第三段js代码的JIT代码中创建[]的部分，发现[]一开始就是`PACKED_DOUBLE_ELEMENTS`类型，可以满足a[0] =
1.1的操作，不需要再做类型转换。
    0x30bd00084f47    87  49b8e80d40d4c6550000 REX.W movq r8,0x55c6d4400de8    ;; external reference (Heap::NewSpaceAllocationTopAddress())
    0x30bd00084f51    91  4d8b08         REX.W movq r9,[r8]
    0x30bd00084f54    94  4d8d5910       REX.W leaq r11,[r9+0x10]
    0x30bd00084f58    98  49bcf00d40d4c6550000 REX.W movq r12,0x55c6d4400df0    ;; external reference (Heap::NewSpaceAllocationLimitAddress())
    0x30bd00084f62    a2  4d391c24       REX.W cmpq [r12],r11
    0x30bd00084f66    a6  0f8695010000   jna 0x30bd00085101  
    0x30bd00084f6c    ac  4d8d5910       REX.W leaq r11,[r9+0x10]
    0x30bd00084f70    b0  4d8918         REX.W movq [r8],r11
    0x30bd00084f73    b3  4983c101       REX.W addq r9,0x1
    0x30bd00084f77    b7  41bbfd383008   movl r11,0x83038fd      ;; (compressed) object: 0x30bd083038fd 
    0x30bd00084f7d    bd  458959ff       movl [r9-0x1],r11
    0x30bd00084f81    c1  4d8bb550010000 REX.W movq r14,[r13+0x150] (root (empty_fixed_array))
    0x30bd00084f88    c8  45897103       movl [r9+0x3],r14
    0x30bd00084f8c    cc  45897107       movl [r9+0x7],r14
    0x30bd00084f90    d0  41c7410b00000000 movl [r9+0xb],0x0
    0x30bd00084f98    d8  49bf81252d08bd300000 REX.W movq r15,0x30bd082d2581    ;; object: 0x30bd082d2581  value=0x30bd083c4e5d >
####  实验总结
从上面的实验来看，数组的elements类型在JIT下和普通js下是不一样的，JIT会对其进行优化。其中如果是`new
Array(0)`和`[]`创建的数组，那么其数组的elements初始时的类型就已经是目标数据的类型了。因此就不需要再调用`ReduceTransitionElementsKind`和`ReduceTransitionAndStoreElement`进行类型转换。因此在利用中，我们应该使用Array(0)的方式来创建数组。
###  漏洞分析