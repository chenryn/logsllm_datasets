uniformly at random.
sets D0, D1, each with N items.
to the client OClient, respectively.
$← {0, 1} is chosen
• Initially, a challenge bit b
• The adversary A, given no input, outputs two data
(cid:4)D, K) ← Encode(D) is computed, and we
give (cid:4)D and K as initial inputs to the server SS and
• Then, (
the adversary A communicates with
the adversarial interface of SS. Also, the network
interfaces of OClient and SS are connected with
each other. Finally, at any point in time, A can
output a pair of operations (opi,0, opi,1), and the
operation opi,b is forwarded to the user interface
of OClient.
• When each operation terminates and a reply is
given at OClient’s user interface, the adversary A
is going to be notiﬁed (however, it does not learn
the result of the operation).a
• Finally, A outputs a guess b(cid:2). If b = b(cid:2),
the
experiment returns true, and false otherwise.
aNote that leaking which value is returned by the operation can
lead to easy distinguishability.
Fig. 10: Experiment for aaob-security deﬁnition.
Deﬁnition 1 (ORAM Security). We say that am ORAM Pro-
tocol ORAM = (Encode, OClient) is aaob-secure (or simply
ORAM(A) is negligible for every polynomial-time
secure) if Advaaob
adversary A.
We note that aaob-security in particular implies13 security
according to Deﬁnition 1 in [36], which has adversaries issue
a ﬁxed sequence of operations with ﬁxed timings.
B. Security of TaORAM
We now prove the following theorem, assuming that the
underlying encryption scheme satisﬁes the traditional notion
of (secret-key) IND-CPA security [18], [3].
Theorem 2 (Security). Assume that the underlying encryption
scheme is IND-CPA secure, then TaORAM is secure.
Proof (Sketch): The proof is more involved than for tradi-
tional, non-concurrent, ORAM schemes. We omit a complete
formal proof for lack of space. However, we outline the main
steps necessary for the formal argument to go through, which
in particular explains the central role played by the sequencer.
Speciﬁcally, we note the following central properties of
TaORAM:
13Formally speaking, their deﬁnition allows the choice of the scheduling
of operations to be ﬁxed according to some absolute clock. Following the
cryptographic literature here we omit access to an absolute clock, and parties
have only accesses to logical sequences of events. We note that [36] does not
include a formal model.
215215
• Every operation op to OClient results in the Processor
immediately starting a thread retrieving the contents of
exactly one fresh random tree-path pidop from the server.
This is regardless of the type of operation issued, or
whether fake.read is set or not. The adversary can then
schedule OClient’s requests as it wishes.
• The processor never replies to an operation before the
whole contents of pidop have been received from the
storage server, and never replies after the last path
pidop(cid:3) associated with an operation op(cid:2) preceding op in
sequencer.queue is completely retrieved.
• The sequencer replies to an operation request op imme-
diately after pidop and all paths pidop(cid:3) associated with
operations op(cid:2) preceding op in sequencer.queue have
been completely retrieved.
• Write backs occur after a ﬁxed number of paths have been
retrieved, independently of the actual operations having
been issued, and consists of fresh encryptions.
The above four items imply that the communication patterns
are oblivious: The view of the adversary A in the experiment
ORAM(A) does not depend on the actual choice of the
Expaaob
challenge bit b, when the adversary cannot see the contents
of the messages sent over the network. In particular, A can
see explicitly the mapping between op and the path pidop, and
A’s decision on when the contents of the path are given back
to OClient completely determines the timings of the responses.
Given this, we note that the case b = 0 and b = 1 cannot
be distinguished even given the contents of the messages and
the storage server. To show this, the proof ﬁrst replaces every
encrypted block (either in a message or on the server) with a
fresh encryption of a dummy block (e.g., the all-zero block).
This does not affect the adversary’s aaob advantage much by
IND-CPA security of the underlying encryption scheme, and
the fact that the adversary never sees the actual responses to
its operations. Given now that the encrypted contents can be
simulated and are independent of the actual operations issued,
we can now apply the above argument showing that the actual
access patterns are indistinguishable.
C. Histories, Linearizability, and Correctness
We note that security of an asynchronous ORAM scheme
as deﬁned above does not imply its correctness – one can
just have the client do nothing (i.e., not sending any message
to a server) and immediately reply requests with random
contents, and have a secure scheme. For this reason, we handle
correctness separately and show that our TaORAM satisﬁes
very strong correctness guarantees, and in particular provides
so-called atomic semantics of the underlying storage from
a user-perspective. This means that every operation appears
to have taken place atomically at some point between the
request and the answer is provided. To formalize this notion,
we follow the tradition of the literature on distributed systems
and consistency semantics. We start with some deﬁnitions.
To reason about correctness, let us think of a variation of
ORAM(A) deﬁned above where the reply to
Experiment Expaaob
each adversarial request is actually given back to the adversary,
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:10 UTC from IEEE Xplore.  Restrictions apply. 
and moreover, we do not have a challenge bit any more. More
ORAM(A) as the following experiment,
formally, we deﬁne Expcorr
with no output:
Experiment Expcorr
ORAM(A):
• After that,
D with N items.
to the client OClient, respectively.
• The adversary A, given no input, outputs a data set
(cid:4)D, K) ← Encode(D) is computed, and we
give (cid:4)D and K as initial inputs to the server SS and
• Then, (
the adversary A communicates with
the adversarial interface of SS. Also, the network
interfaces of OClient and SS are connected with
each other. Finally, at any point in time, A can
output an operation opi, which is forwarded to the
user interface of OClient.
• When each operation terminates and a reply is
given at OClient’s user interface, the adversary A
is going to be notiﬁed and learns the outcome of
the operation.
Recall that the client OClient processes requests of the form
(bidi, vi), where vi is either a data item (for an overwrite
operation), or vi = ⊥ (for a read operation), and this
operation is replied with a data item ui. In an execution of the
above experiment, we associate with every request a unique
operation identiﬁer i ∈ N in increasing order, with the goal
of paring it with the corresponding reply.
A history Hist consists of the initial data set D, as well
as a sequence of items of the form reqi = (bidi, vi) and
repi = ui, such that every occurrence of some item repi = ui
is preceded by a (unique) element reqi = (bidi, vi) with the
same identiﬁer i. We say that a history is partial if there
exists reqi = (bidi, vi) without a corresponding repi = ui,
ORAM(A)
and otherwise it is complete. An execution of Expcorr
naturally generates a history at the user interface of OClient,
where the sequence of requests and responses corresponds to
the point in time in which they were given as an input to
OClient by A, and returned as an output to A, respectively.
In a complete history Hist, we refer to the pair (reqi, repi)
as opi (the i-th operation) and we say that opi precedes opj
if and only if repi occurs before reqj. Also, we often write
opi = (bidi, ui, vi). We say that a complete history Hist is
linearizable if there exists a total order ≤lin over the operation
identiﬁers such that: (1) If opi precedes opj, then opi ≤lin
opj. (2) If opi = (bidi, vi, ui), then either the largest opj =
(bidj, vj, ui) such that opj ≤lin opi and vj (cid:8)= ⊥, if it exists,
is such that vj = ui, or no such opj exists and D[bidi] = ui.
With the above deﬁnitions in place, we are ready to state
the following deﬁnition.
Deﬁnition 2 (Correctness). An asynchronous ORAM scheme
ORAM = (Encode, OClient) is correct, if for all adversaries
A (even computationally unbounded ones) that deliver all
ORAM(A) is complete
messages, the history generated by Expcorr
and linearizable, except with negligible probability.
D. Correctness Proof for TaORAM
We apply the above deﬁnition to TaORAM.
Theorem 3 (Correctness). TaORAM is correct.
Proof: For this analysis, we assume that memory never
overﬂows, and thus the system will never crash or abort.
(We discussed above that lack of memory overﬂows can be
assumed without loss of generality.)
We show below that if A delivers all messages, then every
ORAM(A).
history is complete at the end of the execution of Expcorr
The core of the proof is to show that the resulting complete
history Hist is linearizable. This requires ﬁrst deﬁning the
corresponding order ≤lin.
For every operation opi = (bidi, vi, ui), there is a point in
time ti in which it takes effect in the global event sequence (we
assume that every event is associated with a unique time). This
is always within ANSWER-REQUEST in the execution of Item
3. In particular, an operation opi = (bidi, vi, ui) takes effect
when it is popped from the queue request.map[bidi]. (Note
that this may be within a thread running ANSWER-REQUEST
for another operation opj for which bidj = bidi.) We order
two operations opi = (bidi, vi, ui) and opj = (bidj, vj, uj) so
that opi ≤lin opj if opi takes effect before opj. Clearly, if opi
precedes opj, then opi ≤lin opj, since every operation takes
effect between the request and the response.
During the execution of TaORAM, we can track the contents
of the local storage, and we are going to prove the following
invariant:
Invariant. At every point in time, there exists at
most one value Bbid for the block bid in the local
storage (sub-tree or stash). Moreover,
this value
is the latest value assigned to bid according to
the “take-effect” order deﬁned above (or the initial
value, if no such value exists).
Note that before returning a value u for an operation on bid, we
must have set the local value Bbid before returning Bbid[bid],
and thus the above implies that ≤lin is a proper ordering to
show that the history is linearizable.
To prove the invariant, we proceed by induction over steps
that can modify the contents of the local storage. The invariant
is true when the system has been initialized, and the client’s
local memory is empty. The following operations can modify
the contents of the local storage (here, a pair (bid, Bbid) in the
local storage simply denotes a pointer to block bid and the
actual contents of the block).
1) A pair (bid, Bbid) is added to the local storage as part
of some node w through processing of some path pid in
Step 1 of ANSWER-REQUEST.
2) A pair (bid, Bbid) is deleted at Step 5 of WRITE-BACK
because it is on a path pid written back to the server.
3) A pair (bid, Bbid) is moved to a new location (either in
the tree or into the stash) when shufﬂing within FLUSH
4) A pair (bid, Bbid) is present in the local storage, and we
assign Bbid to some new value v, in the third item of
Step 3 of ANSWER-REQUEST.
216216
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:10 UTC from IEEE Xplore.  Restrictions apply. 
in READ-PATH always terminates, and the thread is waken up.
Therefore, every retrieved path is eventually received by the
client. Now there are two cases, for the thread executed for
an operation accessing bidi – either it results in a fake read or
not, i.e., the ﬂag fake.read returned by READ-PATH is either
1 or 0.
• Case 1: fake.read = 0: Here, we know that the path P
contains bid, and when executing ANSWER-REQUEST,
either the entry in response.map for this operation has
form (false, x) for x (cid:8)= ⊥,
then the operation is
answered right away in Step 2. Alternatively, if x = ⊥,
because the block is in the path P , this query must be
replied later in Step 3.
• Case 2: fake.read = 1. Then, this means that while
executing READ-PATH in the main thread T , another
thread T (cid:2) has invoked READ-PATH for the same bidi
without returning fake.read = 1, and thread T (cid:2) has not
yet gone through Step 3 in ANSWER-REQUEST. Now,
there are two cases. Either T (cid:2) will update the value
for the current request in response.map in Step 3 of
ANSWER-REQUEST before T goes though Step 2 in its
own ANSWER-REQUEST, in which case T will return the
value. Alternatively, if T goes through Step 2 ﬁrst, the
value will be output when T (cid:2) goes through Step 3.
Finally note that the sequencer module may delay answering,
but the above argument implies that the processor eventually
answers all previous requests, and thus the sequencer will also
eventually answer them all.
Clearly, 3–4 do not violate the invariant. As for 2, if Bbid
has been modiﬁed after it has been written to the server, then
it will not be deleted due to the node timestamp being now
higher than v · k. If it is deleted, then no modiﬁcation has
occurred since the write-back has started, and thus the server
holds the latest version.
The core of the proof is showing that 1 cannot violate the
invariant, which we do next. In fact, we prove now that if at
some time t∗ the invariant has been true so far, and we now
insert (bid, Bbid) as part of the contents of a node N, then this
is the latest value of bid and no other value for bid appears in
the local storage at this point in time t∗.
The ﬁrst (and more difﬁcult) case is that, at
First off, if this is the initial value written by the Encode
procedure into the server, and it gets written into node N,
and (bid, Bbid) was never locally in node N, then the value of
bid was never modiﬁed locally, because we need to retrieve
it from the server at least once for the ﬁrst change to take
effect. Therefore, we can assume that (bid, Bbid) was already
once earlier in the local storage at node N, either because it
was written back from there (if this is not the initial value),
or because we need to retrieve it at least once if this is the
initial value and some modiﬁcation has taken place. Now,
consider the time t ≤ t∗ at which (bid, Bbid) was in N for
the last time. Note that if t = t∗, then the value would not be
overwritten (as the node N is occupied in the local storage)
and by the induction assumption this node holds the latest
value. Therefore, assume that t < t∗, and we have two cases.
time t,
(bid, Bbid) left N, and was possibly modiﬁed one or more
times. In this case, we show that the local storage is not
updated because the node N is already occupied with some
pre-existing contents. The important observation here is that
if there are one or more completed write-backs between t and
t∗, the node N is never deleted after the write back completed.
If it left N, then N was modiﬁed, and a write-back terminating
after t would not delete N unless it just wrote this new contents
of N back (or an even newer version). But this means that
at that point we have already overwritten the contents of N
on the server with something different than what received
within pid (i.e., where in particular (bid, Bbid) would not be
in N any more). Hence, the contents (bid, Bbid) of N received
with pid must have been sent by the server before the new
contents have been written (this is ensured by our server time
stamping), and thus when this write-back completes, we have
pid ∈ PathReqMultiSet, and hence N is left untouched and
unmodiﬁed.
The second case is that, at time t, (bid, Bbid) was deleted
after a successful write back completed. As this was the last
time (bid, Bbid) ever appeared in N before t∗ it cannot be that
any operation to effect on bid between t and t∗, and thus the
value re-covered with pid is the latest one.
We still need to show that every operation eventually termi-
nates, and thus every history is eventually completed. We ﬁrst
show that the Processor Module replies to every request. Note
that if all messages are delivered by A, the wait instructions
217217
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:10 UTC from IEEE Xplore.  Restrictions apply.