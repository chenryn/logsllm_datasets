data/ServerOptioninfo.xml
/data/ServerOptioninfo.xml
OManager.10026.exe
/OManager.exe
在此XML文件中，localsrc与remotesrc分别表示本地存储地址及远程URL路
径，远程URL文件与本地路径建议保持一致，可以提高系统的可维护性，如本地
的“data/Serverinfo.xml”与远程的“/data/Serverinfo.xml”，远程升级包目录结构见图
16-14。
图16-14 远程升级包存储路径
在此配置中，需要升级的程序包为OManager.exe、Serverinfo.xml、
ServerOptioninfo.xml三个，变更项包括了添加主机信息、主程序优化等，下面介
绍升级步骤。
1）上传升级相关文件到版本服务器指定位置，具体见图16-14。
2）更新数据库中平台最新版本号，即更新upgrade表的version字段，如更新
版本号为“10026”；用户会根据data/config.ini中的upversion键值与最新版本号进
行匹配，当小于最新版本号时将触发升级。
3）点击“系统升级”工具栏图标进行升级，升级成功后如图16-15所示。
升级结束后，平台根目录下多了一个“OManager.10026.exe”最新版本的程序
包，见图16-16。
运行“OManager.10026.exe”，在主程序左侧的服务器列表框中多了一
台“218.31.20.11”主机，见图16-17。再查看data/config.ini中的upversion键值，已
经改为“10026”，说明系统已成功升级。
图16-15 系统升级成功
图16-16 升级后的文件列表
图16-17 更新后的主机列表
介绍完系统升级的操作过程，下面介绍OManager实现升级功能的源码分
析，使用模块urllib.urlopen（url）.read（）方法实现HTTP协议文件下载，使用
xml.etree.ElementTree模块实现XML文件的分析。
def load_data（self，event）： #系统升级方法
try：
if self.button.GetLabel（）==u"关闭"：
self.Destroy（）
url=self.updateURL+"/updateMS.xml" #指定升级描述文件远程及本地路径
localfile=sys.path[0]+'/tmp/updateMS.xml'
if not self.download（url，localfile）： #下载升级描述文件
return
except Exception，e：
wx.MessageBox（u"更新描述文件下载失
败"+str（e），u"OManager："，style=wx.
OK|wx.ICON_ERROR）
self.Destroy（）
return
try： #打开升级描述文件，为下面的分析做好准备
import xml.etree.ElementTree as ET
update_tree = ET.parse（sys.path[0]+'/tmp/updateMS.xml'）
up_doc = update_tree.getroot（）
except Exception，e：
wx.MessageBox（u"导入更新包出
错"，u"OManager："，style=wx.OK|wx.ICON_ERROR）
self.Destroy（）
return
try： #遍历描述文件，获取升级描述文件中所有程序包的远程及本地路径，调用
#download（）方法实现下载
upgrade_count=0
for cur_child in up_doc：
upgrade_count+=1
url=self.updateURL+cur_child[1].text
localfile=sys.path[0]+'/'+cur_child[0].text
if self.download（url，localfile）==False：
break
self.cf.set（"system"， "Upversion"， self.lastversion） #更新
config.ini
#最新版本号
self.cf.write（open（sys.path[0]+'/data/config.ini'， "w"））
self.ConnStaticText.SetLabel（u"成功更新"+str（upgrade_count）+"个
数据包..."）
self.button.SetLabel（u"关闭"）
except Exception，e：
wx.MessageBox（u"系统文件下载失
败"，"OManager"，style=wx.OK|wx.ICON_ERROR）
self.Destroy（）
return
finally：
pass
event.Skip（）
16.5.5 客户端模块编写
OManager提供客户端模块开发支持，与OMserver的实现思想一样，区别是
OMserver基于HTML表单来定义，而OManager基于XRC。XRC（XML
Resource）的设计来源于wxWidgets，原理是将界面设计的工作从程序中独立出
来，类似于Django开发框架中模板系统的角色，目的是将业务逻辑与界面进行分
离，好处是代码的结构会更加清晰，可读性也会大大提高。具体做法是通过
XML格式定义系统界面，当程序运行时再载入。XRC的使用手册见
http://wiki.wxwidgets.org/Using_XML_Resources_with_XRC。OManager平台将功
能模块采用XRC设计，在主程序中按功能分类导入，效果见图16-18和图16-19。
图16-18 功能模块菜单
OManager平台提供了最多2个控件参数的定义，控件类别支持
wxSpinCtrl（微调控制器）、wxListBox（列表控件）、wxTextCtrl（文本输入控
件）等，当然，扩展更多的控件类型也非常简单，前提是需要了解各控件的属
性及方法，其中控件值会被当成模块参数通过rpyc传输到服务器端。下面
为“bas_1001_系统日志.xrc”功能模块的设计，包括一个容量控件wxPanel对
象，wxPanel对象包含了两个对象，一个文字标签控件wxStaticText对象，通过
元素定义该模块的功能文字说明；另一个对象为微调控制器wxSpinCtrl，
通过元素定义默认值，与定义控件的最小值及最大值。更多
的控件介绍请参考：
http://wiki.wxwidgets.org/Using_XML_Resources_with_XRC。该功能模块的XRC
定义内容如下：
图16-19 功能模块窗口
【Module/bas_1001_系统日志.xrc】
200，100
功能描述：显示服务器Message最新选择条数的记录。
30，20
30
1
100
30，50
在主程序中，通过xrc.XmlResource（）方法加载XRC模块文件，使用
xrc.XRCCTRL（）方法获取控件对象，使用对象的GetValue（）或
GetStringSelection（）方法得到控件输入值，其中wxSpinCtrl、wxTextCtrl控件使
用GetValue（）方法，wxListBox控件使用GetStringSelection（）方法。在主程序
中调用XRC的方法，源码（部分）如下：
from wx import xrc
self.res = xrc.XmlResource（sys.path[0]+'/Module/bas_1001_系统日志.xrc'）
#加载模块资源文件
panel = self.res.LoadPanel（self， "panel"） #加载panel面板控件
try：
self.Parameter1 = xrc.XRCCTRL（panel， 'Parameter1_object_id'） #加载控件1
对象名
except Exception，e：
pass
#获取不同控件的返回值，GetClassName（）方法返回控件类别名，用于定位不同控件获取value的方法
try：
if self.Parameter1.GetClassName（）=="wxSpinCtrl"：
self.Parameter1_value=self.Parameter1.GetValue（）
elif self.Parameter1.GetClassName（）=="wxListBox"：
self.Parameter1_value=self.Parameter1.GetStringSelection（）
except Exception，e：
pass
…
平台功能模块XRC文件命名遵循一定的标准规范，即“模块功能类别_模块
ID_功能中文名称.xrc”，文件名将会以“_”作为分隔符，拆分的数据将应用到系统
功能中，比如文件名前缀“模块功能类别”会根据不同类别代号加载到不同功能菜
单，实现源码（部分）如下：
bashmenu = wx.Menu（） #定义"基本功能"二级菜单
appmenu = wx.Menu（） #定义"应用功能"二级菜单
dbmenu = wx.Menu（） #定义"数据库功能"二级菜单
servicemenu = wx.Menu（） #定义"后台服务功能"二级菜单
middlemenu = wx.Menu（） #定义"中间件功能"二级菜单
#根据不同XRC文件前缀，将三级菜单追加到对应的二级菜单中
for file_info in self.Moduledetail：
file_array=string.split（file_info，'_'）
if file_info[0：3]=="bas"：
bashmenu.Append（int（file_array[1]），file_array[2]，file_array[2]）
elif file_info[0：3]=="app"：
appmenu.Append（int（file_array[1]），file_array[2]，file_array[2]）
elif file_info[0：3]=="dba"：
dbmenu.Append（int（file_array[1]），file_array[2]，file_array[2]）
elif file_info[0：3]=="ser"：
servicemenu.Append（int（file_array[1]），file_array[2]，file_array[2]）
elif file_info[0：3]=="mid"：
middlemenu.Append（int（file_array[1]），file_array[2]，file_array[2]）
文件“模块ID”段将作为该模块的唯一标识，与服务器端模块进行匹配。另
外，要求模块XRC文件必须存放于平台Module目录。以下为客户端的所有模块
清单，其中ID为“100*”的模块，服务器端已完成对接，其他部分读者可以根据自
身的需求自行开发或扩展，平台功能模块XRC文件列表见图16-20。
图16-20 功能模块XRC文件列表
16.5.6 执行功能模块
由于OManager只有两层结构，与服务器端的通信就是一个交互过程，由客
户端发起任务请求，服务器执行任务并返回操作结果，操作步骤见图16-21。
图16-21 功能模块执行步骤
为提高平台的通用性及兼容度，OManager的数据封装、传输、加密方式及
服务器端与OMserver一致，即传输采用了rpyc框架、RC4加密算法、服务器端同
一监听服务。服务器端的实现本节不再做介绍，具体可参考13.5.3节。下面介绍
基于wxPython实现的客户端提交任务的几个方法。
try：
conn=rpyc.connect（self._ip，int（self._port）） #连接rpyc服务器
#调用login（）方法实现通信账号、密码校验
conn.root.login（'OMuser'，'KJS23o4ij09gHF734iuhsdfhkGYSihoiwhj38u4h'）
except Exception，e：
message=u"系统提示：连接远程服务器超时。"+str（e）
wx.MessageBox（message，u"OManager服务器管理平
台："，style=wx.OK|wx.ICON_ERROR）
return
#调用OnGetSelectServerinfo方法获取计算机名、字符串、服务器数量
_server_list=self.OnGetSelectServerinfo（'serverserial_ip'，1，int（self._max_servers））
#判断用户是否选择了至少一台服务器，不选择则直接返回
if not _server_list：
return
#操作记录调用了Addsyslogs（）方法写入user_logs表，用于操作记录追溯
Intologs.Addsyslogs（self.CurrentAdmin，u"操作对象："+\
self.OnGetSelectServerinfo（'lip'，1，20）+u"-操作MID："+GetModelestrrow[0]）
#合并提交串，格式：“模块ID@@主机IP*主机名，N@@参数1@@参数2@@”
例如：“1001@@192.168.1.21*SN2013-08-021@@30@@”
put_string+=str（GetModelestrrow[0]）+"@@"+_server_list+"@@"+Parameter_string
#调用tencode（）方法对提交串进行加密
put_string=FunApp.tencode（put_string，self._secret_key）
# #调用rpyc的Runcommands（）方法执行任务，返回的结果通过tdecode（）方法解密
OPresult= FunApp.tdecode（conn.root.Runcommands（put_string），self._secret_key）.decode（'utf8'）
#在“输出消息”框输出返回结果
self.OnWriteMessageBox（FunApp.format_str（OPresult））
conn.close（）
下面为“输出消息”框输出消息方法，使用SetInsertionPoint（0）获取消息插
入点，通过WriteText（）方法写入消息，代码如下：
def OnWriteMessageBox（self，message）：
t = time.localtime（time.time（））
st = time.strftime（"%Y-%m-%d %H：%M：%S"， t） #获取当前系统时间
self.SysMessaegText.SetInsertionPoint（0） #设置消息框插入点，参数0为开始
位置
#将方法参数message（消息内容）写入消息框
self.SysMessaegText.WriteText（"++++++++++++"+str（st）+"++++++++++++++++\n"+message+"\n"）
self.SysMessaegText.SetInsertionPoint（0）
执行任务返回的结果见图16-22。另外OManager的窗体元素支持任意角度的
组合、分离、拖动等，管理员可以根据不同喜好进行调整。
16.5.7 平台程序发布
为了让平台在没有Python以及第三方模块包的环境中正常运行，对源程序进
行打包发布是项目最后一个环节，对此pyinstaller（http://www.pyinstaller.org）提
供了很好的解决方案，其支持Linux与Windows平台可执行程序的制作，简单易
用。Pyinstaller 2.0无须安装，解压即可使用，下面为平台打包的bat批处理脚本。
图16-22 功能模块执行结果
【install.bat】
cd D：\python\OManager\OManager
d：
rd /S /Q dist
rd /S /Q build
del logdict2.7.3.final.0-1.log
python d：/soft/pyinstaller-2.0/pyinstaller.py --onedir -w --
icon=img/imac.ico OManager.py
copy MD5sum.exe dist\OManager
xcopy /s data dist\OManager\data\
xcopy /s img dist\OManager\img\
xcopy /s Module dist\OManager\Module\
xcopy /s numbers dist\OManager\numbers\
xcopy /s tmp dist\OManager\tmp\
rd /S /Q build
rd /S /Q build
del logdict2.7.3.final.0-1.log
假设项目目录为“D:\python\OManager\OManager”，参数“--onedir”为创建的一
个目录，包含exe文件以及相关依赖类包；“-w”表示制作视窗界面，无控制台
（命令行）；“--icon”指定执行程序图标；“OManager.py”为平台入口源程序。通
过xcopy复制平台相关目录到打包路径（如dist\OManager）。打包后的目录结构
见图16-23。
图16-23 打包后生成的文件列表
最后一步就是制作安装包，我们可以简单对目录制作压缩包发布，也可以使
用更加专业的安装包制作工具，如Advanced Installer、Inno Setup、Smart Install
Maker等，最终将生成一个安装包文件“Setup.exe”，单击安装后的效果见图16-
24。
图16-24 系统安装界面
参考提示 RC4加密算法参考文章
http://www.snip2code.com/Snippet/27937/Blockout-encryption-decryption-methods-
p。