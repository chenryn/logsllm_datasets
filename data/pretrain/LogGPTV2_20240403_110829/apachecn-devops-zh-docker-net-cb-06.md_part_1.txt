# 六、保护容器网络
在本章中，我们将介绍以下食谱:
*   启用和禁用 ICC
*   禁用出站伪装
*   管理网络过滤器到 Docker 的集成
*   创建自定义 iptables 规则
*   通过负载平衡器公开服务
# 简介
当您转向基于容器的应用时，您需要认真考虑的事项之一是网络安全。尤其是容器，会导致需要保护的网络端点数量激增。诚然，并非所有端点都完全暴露在网络中。然而，默认情况下，那些没有直接对话的人会互相交谈，这可能会引起其他问题。当涉及到基于容器的应用时，有许多方法可以解决网络安全问题，本章并不打算讨论所有可能的解决方案。相反，本章旨在回顾配置选项和相关网络拓扑，它们可以根据您自己的网络安全要求以多种不同的方式进行组合。我们将详细讨论我们在前面章节中接触到的一些特性，例如 ICC 模式和出站伪装。此外，我们将介绍几种不同的技术来限制容器的网络暴露。
# 启用和禁用 ICC
在早期的章节中，我们接触到了 ICC 模式的概念，但是没有太多关于其工作原理的信息。ICC 是一种 Docker-native 方式，用于隔离连接到同一网络的所有容器。所提供的隔离防止了容器之间的直接对话，同时仍然允许它们公开的端口被发布，并允许出站连接。在本食谱中，我们将回顾默认`docker0`网桥上下文以及用户定义网络中基于 ICC 的配置选项。
## 做好准备
在本食谱中，我们将使用两台 Docker 主机来演示 ICC 如何在不同的网络配置中工作。假设本实验中使用的两台 Docker 主机都处于默认配置。在某些情况下，我们所做的更改可能要求您具有对系统的根级访问权限。
## 怎么做…
ICC 模式既可以在本机`docker0`网桥上配置，也可以在任何使用网桥驱动程序的用户定义网络上配置。在本食谱中，我们将回顾如何在`docker0`桥上配置 ICC 模式。正如我们在前面章节中看到的，与`docker0`桥相关的设置需要在服务级别进行。这是因为`docker0`桥是作为服务初始化的一部分创建的。这也意味着，要对其进行更改，我们需要编辑 Docker 服务配置，然后重新启动服务以使其生效。在进行任何更改之前，让我们借此机会回顾一下默认的 ICC 配置。为此，我们先来看看`docker0`桥的配置:
```
user@docker1:~$ docker network inspect bridge
[
    {
        "Name": "bridge",
        "Id": "d88fa0a96585792f98023881978abaa8c5d05e4e2bbd7b4b44a6e7b0ed7d346b",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Containers": {},
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]
user@docker1:~$
```
### 注
重要的是要记住`docker network`子命令用于管理所有 Docker 网络。一个常见的误解是，它只能用于管理用户定义的网络。
正如我们所见，`docker0`桥配置为开启 ICC 模式(`true`)。这意味着 Docker 不会干扰或阻止连接到此桥的容器直接相互对话。为了证明这一点，让我们从两个容器开始:
```
user@docker1:~$ docker run -d --name=web1 jonlangemak/web_server_1
417dd2587dfe3e664b67a46a87f90714546bec9c4e35861476d5e4fa77e77e61
user@docker1:~$ docker run -d --name=web2 jonlangemak/web_server_2
a54db26074c00e6771d0676bb8093b1a22eb95a435049916becd425ea9587014
user@docker1:~$
```
请注意我们没有指定`-P`标志，它告诉 Docker 不要发布任何暴露端口的容器。现在，让我们获取每个容器的 IP 地址，以便验证连通性:
```
user@docker1:~$ docker exec web1 ip addr show dev eth0 | grep inet
    inet 172.17.0.2/16 scope global eth0
    inet6 fe80::42:acff:fe11:2/64 scope link
 user@docker1:~$ docker exec web2 ip addr show dev eth0 | grep inet
    inet 172.17.0.3/16 scope global eth0
    inet6 fe80::42:acff:fe11:3/64 scope link
user@docker1:~$
```
现在我们知道了 IP 地址，我们可以验证每个容器都可以访问该容器正在侦听的任何服务上的另一个容器:
```
user@docker1:~$ docker exec -it web1 ping 172.17.0.3 -c 2
PING 172.17.0.3 (172.17.0.3): 48 data bytes
56 bytes from 172.17.0.3: icmp_seq=0 ttl=64 time=0.198 ms
56 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.082 ms
--- 172.17.0.3 ping statistics ---
2 packets transmitted, 2 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.082/0.140/0.198/0.058 ms
user@docker1:~$
user@docker1:~$ docker exec web2 curl -s http://172.17.0.2
    Web Server #1 - Running on port 80
user@docker1:~$
```
基于这些测试，我们可以假设容器被允许在任何正在监听的协议上相互对话。这是启用 ICC 模式时的预期行为。现在，让我们更改服务级别设置并重新检查我们的配置。为此，请在您的系统中为 Docker 服务设置以下配置:
```
ExecStart=/usr/bin/dockerd --icc=false
```
现在重新加载系统配置，重新启动 Docker 服务，并检查 ICC 设置:
```
user@docker1:~$ sudo systemctl daemon-reload
user@docker1:~$ sudo systemctl restart docker
user@docker1:~$ docker network inspect bridge
……
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
 "com.docker.network.bridge.enable_icc": "false",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500" 
…… 
user@docker1:~$
```
现在我们已经确认 ICC 已被禁用，让我们再次启动两个容器并运行相同的连接测试:
```
user@docker1:~$ docker start web1
web1
user@docker1:~$ docker start web2
web2
user@docker1:~$
user@docker1:~$ docker exec -it web1 ping 172.17.0.3 -c 2
PING 172.17.0.3 (172.17.0.3): 48 data bytes
user@docker1:~$ docker exec -it web2 curl -m 1 http://172.17.0.2
curl: (28) connect() timed out!
user@docker1:~$
```
正如你看到的，我们两个容器之间没有连接。但是，Docker 主机本身仍然能够访问这些服务:
```
user@docker1:~$ curl http://172.17.0.2
    Web Server #1 - Running on port 80
user@docker1:~$ curl http://172.17.0.3
    Web Server #2 - Running on port 80
user@docker1:~$
```
我们可以通过查看过滤器表的`iptables`规则`FORWARD`链来检查用于实现 ICC 的网络过滤器规则:
```
user@docker1:~$ sudo iptables -S FORWARD
-P FORWARD ACCEPT
-A FORWARD -j DOCKER-ISOLATION
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j DROP
user@docker1:~$ 
```
前面的粗体规则是阻止`docker0`桥上容器到容器通信的原因。如果我们在禁用 ICC 之前检查了这个`iptables`链，我们会看到这个规则设置为`ACCEPT` ，如下所示:
```
user@docker1:~$ sudo iptables -S FORWARD
-P FORWARD ACCEPT
-A FORWARD -j DOCKER-ISOLATION
-A FORWARD -i docker0 -o docker0 -j ACCEPT
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
user@docker1:~$
```
正如我们前面看到的，链接容器允许你绕过这个规则，允许一个源容器访问一个目标容器。如果我们移除这两个容器，我们可以通过如下链接重新启动它们:
```
user@docker1:~$ docker run -d --name=web1 jonlangemak/web_server_1
9846614b3bac6a2255e135d19f20162022a40d95bd62a0264ef4aaa89e24592f
user@docker1:~$ docker run -d --name=web2 --link=web1 jonlangemak/web_server_2
b343b570189a0445215ad5406e9a2746975da39a1f1d47beba4d20f14d687d83
user@docker1:~$
```
现在如果我们用`iptables`检查规则，我们可以看到两个新的规则被添加到过滤器表中: