## []{#ch-alertscripts-HAAR.html#s2-alertrecipients-HAAR}警报 Recipients {.title}
:::
通常，警报是针对接收方的。因此，每个警报可能被额外配置为一个或多个接收方。集群将为每个接收者单独调用代理。
接收者可以是警告代理可识别的任何内容：IP
地址、电子邮件地址、文件名或特定代理支持的任何内容。
以下命令为指定警报添加新的接收者。
``` screen
pcs alert recipient add alert-id value=recipient-value [id=recipient-id] [description=description] [options [option=value]...] [meta [meta-option=value]...]
```
以下命令更新现有警报接收者。
``` screen
pcs alert recipient update recipient-id [value=recipient-value] [description=description] [options [option=value]...] [meta [meta-option=value]...]
```
以下命令移除指定警报接收者。
``` screen
pcs alert recipient remove recipient-id
```
或者，您可以运行 [**pcs alert receiver delete**]{.command}
命令，该命令与 [**pcs alert receiver remove**]{.command}
命令相同。[**pcs alert receiver remove**]{.command} 和 [**pcs alert
receiver delete**]{.command} 命令都允许您删除多个警报接收者。
以下示例命令将警报接收者 `my-alert-reci`{.literal} pipient
`-id`{.literal} 添加到警报 `my-alert`{.literal}
中。这会将群集配置为调用为每个事件配置了 `my-alert`{.literal}
的警报脚本，并将接收者 `some-address`{.literal} 作为环境变量传递。
``` screen
#  pcs alert recipient add my-alert value=my-alert-recipient id=my-recipient-id options value=some-address
```
:::
::: section
::: titlepage
## []{#ch-alertscripts-HAAR.html#s2-alertmetaoptions-HAAR}警报元数据选项 {.title}
:::
与资源代理一样，可以对警报代理配置 meta 选项来影响 Pacemaker
调用它们的方式。[表 13.1
"警报元数据选项"](#ch-alertscripts-HAAR.html#tb-alert-meta-HAAR "表 13.1. 警报元数据选项"){.xref}
描述警报 meta 选项。meta 选项可以为每个警报代理和接收者配置。
::: table
[]{#ch-alertscripts-HAAR.html#tb-alert-meta-HAAR}
**表 13.1. 警报元数据选项**
::: table-contents
  meta-Attribute                 默认值          描述
  ------------------------------ --------------- ----------------------------------------------------------------------------------------------
  `timestamp-format`{.literal}   %H:%M:%S.%06N   将事件时间戳发送到代理时，集群将使用的格式。这是与 `date`{.literal}(1)命令一起使用的字符串。
  `timeout`{.literal}            30s             如果警报代理没有在这段时间内完成，它将被终止。
:::
:::
以下示例配置了调用脚本 `myscript.sh`{.literal}
的警报，然后为警报添加两个接收者。第一个接收者 ID 为
`my-alert-recipient1`{.literal}，第二个收件人的 ID 为
`my-alert-recipient2`{.literal}。这个脚本会为每个事件调用两次，每个调用都使用
15 秒超时。一个调用将被传递给接收者
`PI:EMAIL`{.literal}，格式为 %D
%H:%M，另一个调用将被传递给接收者
`PI:EMAIL`{.literal}，格式为 %c。
``` screen
# pcs alert create id=my-alert path=/path/to/myscript.sh meta timeout=15s
# pcs alert recipient add my-alert value=PI:EMAIL id=my-alert-recipient1 meta timestamp-format="%D %H:%M"
# pcs alert recipient add my-alert value=PI:EMAIL id=my-alert-recipient2 meta timestamp-format=%c
```
:::
::: section
::: titlepage
## []{#ch-alertscripts-HAAR.html#s2-alertexamples-HAAR}警报配置命令示例 {.title}
:::
以下后续示例演示了一些基本警报配置命令，以显示用于创建警报、添加接收方和显示配置的警报的格式。请注意，虽然您必须在集群中的每个节点上安装警报代理，但您需要只运行一次
\'pcs\' 命令。
以下命令创建了一个简单的警报，为警报添加两个接受者，并显示配置的值。
::: itemizedlist
-   由于没有指定警报 ID 值，系统会创建警报的警报 ID 值 `。`{.literal}
-   第一个接收者创建命令指定 `rec_value`{.literal}
    的接收者。由于这个命令没有指定接收者 ID，`alert-recipient`{.literal}
    的值被用作接收者 ID。
-   第二个接收者创建命令指定 `rec_value2`{.literal} 的接收者。此命令
    `为接收者指定 my-`{.literal} repient 的接收者 ID。
:::
``` screen
# pcs alert create path=/my/path
# pcs alert recipient add alert value=rec_value
# pcs alert recipient add alert value=rec_value2 id=my-recipient
# pcs alert config
Alerts:
 Alert: alert (path=/my/path)
  Recipients:
   Recipient: alert-recipient (value=rec_value)
   Recipient: my-recipient (value=rec_value2)
```
以下命令添加第二个警报以及该警报的接收者。第二个警报的警报 ID 是
`my-alert`{.literal}，接收者值为
`my-other-recipient`{.literal}。因为没有指定接收者 ID，系统会提供接收者
ID `my-alert-recipient`{.literal}。
``` screen
# pcs alert create id=my-alert path=/path/to/script description=alert_description options option1=value1 opt=val meta timeout=50s timestamp-format="%H%B%S"
# pcs alert recipient add my-alert value=my-other-recipient
# pcs alert
Alerts:
 Alert: alert (path=/my/path)
  Recipients:
   Recipient: alert-recipient (value=rec_value)
   Recipient: my-recipient (value=rec_value2)
 Alert: my-alert (path=/path/to/script)
  Description: alert_description
  Options: opt=val option1=value1
  Meta options: timestamp-format=%H%B%S timeout=50s
  Recipients:
   Recipient: my-alert-recipient (value=my-other-recipient)
```
以下命令修改警报 my-alert 和接收者 ` my-alert`{.literal}
-recipient``{=html} 的警报值。
``` screen
# pcs alert update my-alert options option1=newvalue1 meta timestamp-format="%H%M%S"
# pcs alert recipient update my-alert-recipient options option1=new meta timeout=60s
# pcs alert
Alerts:
 Alert: alert (path=/my/path)
  Recipients:
   Recipient: alert-recipient (value=rec_value)
   Recipient: my-recipient (value=rec_value2)
 Alert: my-alert (path=/path/to/script)
  Description: alert_description
  Options: opt=val option1=newvalue1
  Meta options: timestamp-format=%H%M%S timeout=50s
  Recipients:
   Recipient: my-alert-recipient (value=my-other-recipient)
    Options: option1=new
    Meta options: timeout=60s
```
以下命令从 `警报`{.literal} 中删除接收者
`my-alert-recipient`{.literal}。
``` screen
# pcs alert recipient remove my-recipient
# pcs alert
Alerts:
 Alert: alert (path=/my/path)
  Recipients:
   Recipient: alert-recipient (value=rec_value)
 Alert: my-alert (path=/path/to/script)
  Description: alert_description
  Meta options: timestamp-format="%M%B%S" timeout=50s
  Meta options: m=newval meta-option1=2
  Recipients:
   Recipient: my-alert-recipient (value=my-other-recipient)
    Options: option1=new
    Meta options: timeout=60s
```
以下命令将从配置中删除 `myalert`{.literal}。
``` screen
# pcs alert remove my-alert
# pcs alert
Alerts:
 Alert: alert (path=/my/path)
  Recipients:
   Recipient: alert-recipient (value=rec_value)
```
:::
::: section
::: titlepage
## []{#ch-alertscripts-HAAR.html#s2-alertagentwrite-HAAR}编写警报代理 {.title}
:::
Pacemaker
警报有三种类型：节点警报、保护警报和资源警报。传递给警报代理的环境变量可能会根据警报类型而有所不同。[表 13.2
"传递给警报代理的环境变量"](#ch-alertscripts-HAAR.html#tb-alert-environmentvariables-HAAR "表 13.2. 传递给警报代理的环境变量"){.xref}
描述传递给警报代理的环境变量，并指定环境变量何时与特定警报类型关联。
::: table
[]{#ch-alertscripts-HAAR.html#tb-alert-environmentvariables-HAAR}
**表 13.2. 传递给警报代理的环境变量**
::: table-contents
  环境变量                              描述
  ------------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `CRM_alert_kind`{.literal}            警报类型（节点、保护或资源）
  `CRM_alert_version`{.literal}         Pacemaker 发送警报的版本
  `CRM_alert_recipient`{.literal}       配置的接收者
  `CRM_alert_node_sequence`{.literal}   每当在本地节点上发出警报时，序列数量会增加，它可以用来引用 Pacemaker 发出警报的顺序。稍后发生事件警告的序列号比之前的事件的警报要高。请注意，这个数字没有集群范围的含义。
  `CRM_alert_timestamp`{.literal}       执行代理前创建的时间戳，采用由 `timestamp-format`{.literal} meta 选项指定的格式。这可以确保在事件发生时代理有一个可靠、高度准确的时间，无论代理本身何时被调用（这可能会因为系统负载或其他情况而延迟）。
  `CRM_alert_node`{.literal}            受影响节点的名称
  `CRM_alert_desc`{.literal}            有关事件的详情。对于节点警报，这是节点的当前状态（成员或丢失）。对于隔离警报，这是请求的隔离操作的总结，其中包括原始数据、目标以及隔离操作错误代码（若有）。对于资源警报，这是等同于 `CRM_alert_status`{.literal} 的可读字符串。
  `CRM_alert_nodeid`{.literal}          状态更改的节点 ID（仅由节点警报提供）
  `CRM_alert_task`{.literal}            请求的隔离或资源操作（仅由隔离和资源警报提供）
  `CRM_alert_rc`{.literal}              保护或资源操作的数字返回代码（仅由隔离和资源警告提供）
  `CRM_alert_rsc`{.literal}             受影响资源的名称（仅限资源警报）
  `CRM_alert_interval`{.literal}        资源操作的时间间隔（仅限资源警报）
  `CRM_alert_target_rc`{.literal}       操作的预期数字返回代码（仅用于资源警报）
  `CRM_alert_status`{.literal}          Pacemaker 用来表示操作结果的数字代码（仅用于资源警报）
:::
:::
在编写警报代理时，您必须考虑以下问题。
::: itemizedlist
-   警告代理可以在没有接收者的情况下被调用（如果没有配置任何接收者），因此代理必须能够处理这种情况，即使它只在那种情况下才会退出。用户可以修改配置阶段，并在以后添加一个接收者。
-   如果为警报配置了多个接收者，则会为每个接收者调用一个警报代理。如果代理无法同时运行，则应该只使用单个的接收者进行配置。不过，代理可以自由地将接收者解析为一个列表。
-   当发生集群事件时，所有警报都会与独立进程同时触发。根据配置了警报和接收方的数量以及警报代理中的操作，可能会发生大量负载。可以编写代理来考虑这一点，例如将资源密集型操作排队到其他实例中，而不是直接执行。
-   警报代理以
    `hacluster 用户身份运行`{.literal}，该用户具有最小权限集。如果代理需要额外的特权，建议配置
    [**sudo**]{.command}
    以允许代理以具有适当特权的另一用户身份运行必要的命令。
-   请小心地验证和清理用户配置的参数，如 `CRM_alert_timestamp`{.literal}
    （由用户配置的
    `timestamp-format`{.literal}）、`CRM_alert_recipient`{.literal}
    和所有警报选项指定的内容。这是防止配置错误所必需的。此外，如果某些用户可以在没有
    `hacluster`{.literal}-level 访问集群节点的情况下修改
    CIB，则也是潜在的安全问题，您应该避免注入代码的可能性。
-   如果群集包含将 `on-fail`{.literal} 参数设置为 `隔离`{.literal}
    的操作的资源，则失败时会有多个隔离通知，每个资源都有一个用于设置此参数的资源，再加上一个附加通知。STONITH
    守护进程和 `crmd`{.literal} 守护进程都将发送通知。pacemaker
    在这种情况下只能执行一个实际隔离操作，无论发送了多少条通知。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
警报接口设计为与 `ocf:pacemaker:ClusterMon 资源使用`{.literal}
的外部脚本界面向后兼容。为了保持这种兼容性，传递给警报代理的环境变量会预先带有
`CRM_notify_`{.literal} 和 `CRM_alert_`{.literal}。兼容性问题之一是
`ClusterMon`{.literal} 资源以 root 用户身份运行外部脚本，而警报代理则以
`hacluster 用户身份运行`{.literal}。有关配置由 `ClusterMon`{.literal}
触发的脚本的详情请参考
["使用监控资源的事件通知"一节](#ch-alertscripts-HAAR.html#s1-eventnotification-HAAR "使用监控资源的事件通知"){.xref}。
:::
:::
:::
::: section
::: titlepage
# []{#ch-alertscripts-HAAR.html#s1-eventnotification-HAAR}使用监控资源的事件通知 {.title}
:::
`ocf:pacemaker:ClusterMon`{.literal}
资源可以监控集群状态，并触发每个集群事件的警报。此资源在后台以固定间隔运行
[**crm_mon**]{.command} 命令。
默认情况下，cr [**m_mon**]{.command}
命令仅侦听资源事件；若要启用隔离事件列表，您可以在配置
`ClusterMon`{.literal} 资源时为 命令提供 `--watch-fencing`{.literal}
选项。[**crm_mon**]{.command}
命令不会监控成员资格问题，而是在启动隔离以及为该节点启动监控时打印一条消息，这意味着成员刚加入群集。
`ClusterMon`{.literal} 资源可以执行外部程序，以确定如何使用
`extra_options`{.literal} 参数来使用集群通知。[表 13.3
"传递给外部监控程序的环境变量"](#ch-alertscripts-HAAR.html#tb-clustermon-options-HAAR "表 13.3. 传递给外部监控程序的环境变量"){.xref}
列出传递给该程序的环境变量，以描述发生的集群事件类型。
::: table
[]{#ch-alertscripts-HAAR.html#tb-clustermon-options-HAAR}
**表 13.3. 传递给外部监控程序的环境变量**
::: table-contents
  环境变量                           描述
  ---------------------------------- ----------------------------------------------------
  `CRM_notify_recipient`{.literal}   资源定义的静态外部通知
  `CRM_notify_node`{.literal}        发生状态更改的节点
  `CRM_notify_rsc`{.literal}         更改状态的资源名称
  `CRM_notify_task`{.literal}        导致状态更改的操作
  `CRM_notify_desc`{.literal}        导致状态更改的操作的文本输出相关错误代码（如果有）
  `CRM_notify_rc`{.literal}          操作的返回代码
  `CRM_target_rc`{.literal}          操作的预期返回代码
  `CRM_notify_status`{.literal}      操作状态的数字表示
:::
:::
以下示例配置了一个 `ClusterMon`{.literal} 资源，用于执行外部程序
[**crm_logger.sh**]{.command}，它将记录程序中指定的事件通知。
以下流程创建此资源 `要使用的 crm_logger.sh`{.literal} 程序。
::: orderedlist
1.  在集群的一个节点上，创建将记录事件通知的程序。
    ``` screen
    # cat /usr/local/bin/crm_logger.sh
    #!/bin/sh
    logger -t "ClusterMon-External" "${CRM_notify_node} ${CRM_notify_rsc} \
    ${CRM_notify_task} ${CRM_notify_desc} ${CRM_notify_rc} \
    ${CRM_notify_target_rc} ${CRM_notify_status} ${CRM_notify_recipient}";
    exit;
    END
    ```
2.  设置程序的所有权和权限。
    ``` screen
    # chmod 700 /usr/local/bin/crm_logger.sh
    # chown root.root /usr/local/bin/crm_logger.sh
    ```
3.  使用 [**scp**]{.command} 命令将 [**crm_logger.sh**]{.command}
    程序复制到集群的其他节点上，将程序放置在同一位置上，并为程序设置相同的所有权和权限。
:::
以下示例配置名为 `ClusterMon`{.literal}
`-External 的 ClusterMon`{.literal} 资源，该资源运行程序
`/usr/local/bin/crm_logger.sh`{.literal}。`ClusterMon`{.literal}
资源将集群状态输出到 a `html`{.literal} 文件，在这个示例中是
`/var/www/html/cluster_mon.html`{.filename}。The `pidfile`{.literal}
检测 `ClusterMon 是否已`{.literal} 在运行；在本示例中，该文件为
`/var/run/crm_mon-external.pid`{.filename}。此资源作为克隆创建，以便其在群集中的每个节点上运行。指定了