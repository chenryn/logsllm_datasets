指令清单 16.11  MSVC 2010 
_a$ = 8       
; size = 4 
_f  
  PROC 
  mov     eax, DWORD PTR _a$[esp-4] 
  shr     eax, 2 
  ret     0 
_f     ENDP 
上述代码中的 SHR（SHift Right）指令将 EAX 寄存器中的数值右移 2 位，使用零填充位移产生的空缺位，
并且舍弃那些被右移指令移动出存储空间的比特位。实际上，那些被舍弃的比特位正是除法运算的余数。 
SHR 指令和 SHL 指令的运算模式相同，只是位移方向不同。 
右移与余数的关系与十进制运算的移动小数点运算相似：当被除数为 23、除数为 10 时，我们将 23 的
小数点左移一位，2 为商、3 为余数。 
毕竟本例是整数运算，商也应当是整数（不会是浮点数），所以我们舍弃余数完全没有问题。 
“除以 4”运算的 ARM 程序如下所示。 
指令清单 16.12  Non-optimizing Keil 6/2013 (ARM mode) 
f  PROC 
  LSR      r0,r0,#2 
  BX       lr 
  ENDP 
“除以 4”运算的 MIPS 程序如下所示。 
指令清单 16.13  Optimizing GCC 4.4.5 (IDA) 
jr   
$ra 
srl      
$v0, $a0, 2 ; branch delay slot 
上述程序中的 SRL 指令是“逻辑右移指令/Shift-Right Logical”。 
16.3 练习题 
16.3.1 题目 1 
请分析下列程序的功能。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 16 章  数学计算指令的替换 
187 
指令清单 16.14  Optimizing MSVC 2010 
_a$ = 8 
_f      PROC 
  mov     ecx, DWORD PTR _a$[esp-4] 
  lea     eax, DWORD PTR [ecx*8] 
  sub     eax, ecx 
  ret     0 
_f       ENDP 
指令清单 16.15  Non-optimizing Keil 6/2013 (ARM mode) 
f PROC 
  RSB  
r0,r0,r0,LSL #3 
  BX       lr 
  ENDP 
指令清单 16.16  Non-optimizing Keil 6/2013 (Thumb mode) 
f PROC 
  LSLS   
r1,r0,#3 
  SUBS    r0,r1,r0 
  BX        lr 
  ENDP 
指令清单 16.17  Optimizing GCC 4.9 (ARM64) 
f: 
  lsl   
w1, w0, 3 
  sub      w0, w1, w0 
  ret 
指令清单 16.18  Optimizing GCC 4.4.5 (MIPS) (IDA) 
f: 
sll      
$v0, $a0, 3 
jr       
$ra 
subu     
$v0, $a0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1177 章
章    FFPPUU  
FPU 是专门处理浮点数的运算单元，是 CPU 的一个组件。 
在早期的计算机体系中，FPU 位于 CPU 之外的单独的运算芯片上。 
17.1 IEEE 754 
IEEE 754 标准规定了计算机程序设计环境中的二进制和十进制的浮点数的交换、算术格式以及方法。
符合这种标准的浮点数由符号位、尾数（又称为有效数字、小数位）和指数位构成。 
17.2 x86 
事先接触过 stack machine
①或 Forth 语言编程基础
②的读者，理解本节内容的速度会比较快。 
在 80486 处理器问世之前，FPU（与 CPU 位于不同的芯片）叫作协作（辅助）处理器。而且那个时候
的 FPU 还不属于主板的标准配置；如果想要在主板上安装 FPU，人们还得单独购买它。
③ 
80486 DX 之后的 CPU 处理器集成了 FPU 的功能。 
若没有 FWAIT 指令和 opcode 以 D8～DF 开头的所谓的“ESC”字符指令（opcode 以 D8～DF 开头），恐怕
很少有人还会想起 FPU 属于独立运算单元的这段历史。FWAIT 指令的作用是让 CPU 等待 FPU 运算结束，而
ESC 字符指令都在 FPU 上执行。 
FPU 自带一个由 8 个 80 位寄存器构成的循环栈。这些 80 位寄存器用以存储 IEEE 754 格式的浮点数据
④，
通常叫作 ST(0)～ST(7)寄存器。IDA 和 OllyDbg 都把 ST(0)显示为 ST。也有不少教科书把 ST(0)叫作“栈顶/Stack 
Top”寄存器。 
17.3 ARM、MIPD、x86/x64 SIMD 
在 ARM 和 MIPS 平台的概念里，FPU 寄存器不构成栈结构，仅仅是一组寄存器。x86/64 构架的 SIMD 
扩展（单指令多数据流扩展）也延承了这种理念。 
17.4 C/C++ 
标准 C/C++语言支持两种浮点类型数据，即单精度 32 位浮点数据（float）和双精度 64 位浮点数据（double）。 
GCC 编译器还支持 long double 类型浮点，即 80 位增强精度的扩展浮点类型数据（extended precision）。
不过 MSVC 编译器不支持这种类型的浮点数据。
⑤ 
① 中文叫“堆栈机”或“堆栈结构机”。请参见 http://en.wikipedia.org/wiki/Stack_machine。 
② 请参见 http://en.wikipedia.org/wiki/Forth_%28programming_language%29。 
③ 当初，为了使没有 FPU 的 32 位计算机（例如 80386\80486 SX）兼容其研发的 DOOM 游戏，John Carmack 设计了一套“软”
FPU 运算系统。这种系统使用 CPU 寄存器的高 16 位地址存储整数部分、低 16 位地址存储浮点数值的小数部分，仅通过标准
32 位通用寄存器即可实现浮点运算。更多详情请参阅：https://en.wikipedia.org/wiki/Fixed-point_arithmetic。 
④ 如需详细了解 IEEE 754 格式规范，请参见 http://en.wikipedia.org/wiki/IEEE_754-2008。 
⑤ 如需详细了解这三种不同精度的数据类型，请参见： 
http://en.wikipedia.org/wiki/Single-precision_floating-point_format。 
http://en.wikipedia.org/wiki/Double-precision_floating-point_format。 
http://en.wikipedia.org/wiki/Extended_precision。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
189 
虽然单精度浮点（float）型数据和整数（int）型数据在 32 位系统里都是 32 位数据，但是它们的数据
格式完全不一样。 
17.5 举例说明 
本节围绕下述例子进行讲解： 
#include  
double f (double a, double b) 
{ 
          return a/3.14 + b*4.1; 
}; 
int main()  
{ 
          printf ("%f\n", f(1.2, 3.4)); 
  }; 
17.5.1 x86 
MSVC 
使用 MSVC 编译上述程序，可得到如下所示的指令。 
指令清单 17.1  MSVC 2010：f() 
CONST    SEGMENT 
__real@4010666666666666 DQ 04010666666666666r ; 4.1 
CONST    ENDS 
CONST    SEGMENT 
__real@40091eb851eb851f DQ 040091eb851eb851fr ; 3.14 
CONST    ENDS 
_TEXT    SEGMENT 
_a$ = 8             ; size = 8 
_b$ = 16            ; size = 8 
_f PROC 
   push    ebp 
   mov     ebp, esp 
   fld     QWORD PTR _a$[ebp] 
; current stack state: ST(0) = _a 
    fdiv   QWORD PTR __real@40091eb851eb851f 
; current stack state: ST(0) = result of _a divided by 3.14 
    fld    QWORD PTR _b$[ebp] 
; current stack state: ST(0) = _b; ST(1) = result of _a divided by 3.14 
    fmul   QWORD PTR __real@4010666666666666 
; current stack state: 
; ST(0) = result of _b * 4.1; 
; ST(1) = result of _a divided by 3.14 
    faddp ST(1), ST(0) 
; current stack state: ST(0) = result of addition 
    pop   ebp 
    ret   0 
_f  ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
190 
逆向工程权威指南（上册） 
FLD 指令从栈中读取 8 个字节，把这个值转换为 FPU 寄存器所需的 80 位数据格式，并存入 ST(0)寄存器。 
FDIV 指令把 ST(0)寄存器的值用作被除数，把参数__real@40091eb851eb851f（即 3.14）的值当作除数，
进行除法运算。因为汇编语法不支持含有小数点的浮点立即数，所以程序使用 64 位 IEEE 754 格式的 16
进制数 040091eb851eb851fr 表示 3.14 。 
在进行 FDIV 运算之后，ST(0)寄存器将保存商。 
此外，FDIVP 也是 FPU 的除法运算指令。FDIVP 在进行 ST(1)/ST(0)运算时，先把两个寄存器的值 POP
出来进行运算，再把商推送入(PUSH)FPU 的栈（即 ST(0)寄存器）。这相当于 Forth 语言
①中的堆栈机
②。 
下一条 FLD 指令，把变量 b 的值推送到 FPU 的栈。 
此时，ST(1)寄存器里是上次除法运算的商，ST(0)寄存器里是变量 b 的值。 
接下来的 FMUL 指令做乘法运算。它用 ST(0)寄存器里的值（即变量 b），乘以参数__real 
@4010666666666666（即 4.1），并将运算结果（积）存储到 ST(0)寄存器。 
最后一条运算指令 FADDP 计算栈内顶部两个值的和。它先把运算结果存储在 ST(1)寄存器，再 POP 
ST(1)。所以，运算表达式的运算结果存储在栈顶的 ST(0)寄存器里。 
根据有关规范，函数必须使用 ST（0）寄存器存储浮点运算的返回结果。所以在 FADDP 指令之后，
除了函数尾声的指令之外再无其他指令。 
MSVC＋OllyDbg 
图 17.1 标记出了两对 32 位数据。这两对数据都是由 main()函数传递过来的、以 IEEE 754 格式存储的
双精度浮点数据。我们可看到首条 FLD 指令从栈内读取了 1.2、然后把它推送到 ST(0)。 
图 17.1  OllyDbg：执行首条 FLD 指令 
在把 64 位 IEEE 754 格式的数据转换为 FPU 所用的 80 位浮点数据的过程中，会不可避免地存在误差。图
中 1.1999„„所要表示的量，就是 1.2 的近似值。此后，EIP 寄存器的值指向下一条指令 FDIV。FDIV 指令会
从内存中读取双精度浮点常量。OllyDbg 人性化地显示出了第二个参数的值—— 3.14。 
继续执行 FDIV 指令。如图 17.2 所示，此时 ST(0)寄存器存储着上一次运算的商 0.382„ 
执行第三条指令即 FLD 指令之后，ST(0)寄存器加载了数值 3.4（3.39999„„）。如图 17.3 所示。 
在 3.4 入栈的同时，先前运算出来的商被推送到 ST(1)寄存器，而后 EIP 指针的值指向下一条指令
FMUL。如同 OllyDbg 提示的那样，FMUL 指令会从内存中读取因子 4.1。 
① https://en.wikipedia.org/wiki/Forth_(programming_language)。 
② Stack machines，https://en.wikipedia.org/wiki/Stack_machine。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
191 
图 17.2  OllyDbg：执行 FDIV 指令 
图 17.3  OllyDbg：执行第二个 FLD 指令 
在执行 FMUL 指令之后，ST（0）寄存器将存储着乘法运算的积，如图 17.4 所示。 
图 17.4  OllyDbg：执行 FMUL 指令 
然后运行 FADDP 指令，运算求得的和会被存储在 ST(0)寄存器中。同时，指令会清空 ST(1)寄存器。
如图 17.5 所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
192 
逆向工程权威指南（上册） 
图 17.5  OllyDbg：执行 FADDP 指令 
在FPU 的运算指令结束之后，运算结果存储在 ST(0)寄存器里。main()函数稍后会从这个寄存器提取运算结果。 
值得注意的是 ST(7)寄存器——它的值是 13.93„„这是为什么？ 
这不难理解。前文介绍过，FPU 的寄存器构成了自己的栈结构。因为需要用硬件直接实现数据栈，所
以栈结构也比较简单。在对 FPU 进行出入栈操作的时候，如果每次都要把所有 7 个寄存器的内容转移（或
者说复制）到相邻的寄存器，那么开销会非常高。实际的 FPU 只有 8 个寄存器和 1 个栈顶指针（TOP）寄
存器。栈顶指针寄存器专门记录“栈顶”寄存器的寄存器编号。在 FPU 进行数据入栈（PUSH）操作时，
它首先令栈顶指针寄存器指向下一个寄存器，然后在那个寄存器里存储数据。出栈（POP）指令的过程相
反。但是在进行出栈操作时，FPU 不会清空原有寄存器（否则必定影响性能）。所以，在执行完程序的浮
点运算指令后，FPU 寄存器的状态就如图 17.5 所示。这种现象可以说是“FADDP 指令把运算结果推送入
栈，然后进行了出栈操作”，但是实际上这条指令把和存入寄存器后调整了栈顶指针寄存器的值。所以，确
切地说，FPU 的寄存器构成了循环缓冲区（circular buffer）。 
GCC 
使用 GCC 4.4.1（启用 –O3 选项）编译上述代码，生成的程序略有不同。 
指令清单 17.2  Optimizing GCC 4.4.1 
public f 
f                
proc near 
arg_0            = qword ptr  8 
arg_8            = qword ptr  10h 
push    ebp 
fld     ds:dbl_8048608 ; 3.14 
; stack state now: ST(0) = 3.14 
mov     ebp, esp 
fdivr   [ebp+arg_0] 
; stack state now: ST(0) = result of division 
fld     ds:dbl_8048610 ; 4.1 
; stack state now: ST(0) = 4.1, ST(1) = result of division 
fmul    [ebp+arg_8] 
; stack state now: ST(0) = result of multiplication, ST(1) = result of division 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
193 
pop     ebp 
faddp   st(1), st 
; stack state now: ST(0) = result of addition 
retn  
f 
endp 
第一处不同点，同时也是最显著的不同之处是：GCC 把 3.14 送入 FPU 的栈（ST(0)寄存器），用作 arg_0
的除数。 
FDIVR 是 Reverse Divide 的缩写。FDIVR 指令的除数和被除数，对应 FDIV 指令的被除数和除数，即
位置相反。在乘法运算中，因子的位置不影响运算结果，所以没有 FMULR 指令。 
FADDP 指令从栈中 POP 出一个值进行加法运算，并用 ST(0)存储和。 
17.5.2 ARM: Optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
在 ARM 统一浮点运算标准之前，很多厂商都推出了各自的扩展指令以实现浮点运算。后来，VFP（Vector 
Floating Point）成为了行业的标准。 
x86 平台的 FPU 有自己的栈；但是 ARM 平台里没有栈结构，只能操作寄存器。 
指令清单 17.3  Optimizing Xcode 4.6.3 (LLVM) (ARM mode) 
f 
VLDR  
D16, =3.14 
VMOV  
D17, R0, R1 ; load "a" 
VMOV  
D18, R2, R3 ; load "b" 
VDIV.F64 D16, D17, D16 ; a/3.14 
VLDR  
D17, =4.1 
VMUL.F64 D17, D18, D17 ; b*4.1 
vVADD.F64 D16, D17, D16 ; + 
VMOV  
R0, R1, D16 
BX 
LR 
dbl_2C98 
DCFD 3.14  
   ; DATA XREF: f 
dbl_2CA0 
DCFD 4.1  
   ; DATA XREF: f+10 
上述程序出现了 D 字头的寄存器。ARM 平台有 32 个 64 位的 D 字头寄存器。这些寄存器即可用来存
储（双精度）浮点数，又可用于单指令流多数据流运算/SIMD（ARM 平台下这种运算叫 NEON）。ARM 平
台还有 32 个 S 字头的寄存器。S 字头寄存器用于处理单精度浮点数据。简单地说，S 字头寄存器用于存储
单精度浮点，而 D 字头寄存器用于处理双精度浮点。详细规格请参见附录 B.3.3。 
本例中的两个浮点都以 IEEE 754 的格式存储于内存之中。 
望文生义，VLDR 和 VMOV 指令就是操作 D 字头寄存器的 LDR 和 MOV 指令。这些 V 字头的指令和
D 字头的寄存器，不仅能够处理浮点类型数据，而且可以用于 SIMD（NEON）运算。 
即使涉及浮点运算，但是它还是 ARM 平台的程序，还会遵循 ARM 规范使用 R 字头寄存器传递参数。
双精度浮点数据是 64 位数据，所以每传递一个双精度浮点数据就需要使用 2 个 R 字头寄存器。 
“VMOV D17, R0, R1”指令从 R0 和R1 寄存器读取64 位数据的2 个部分，并把最终数值存储在 D17 寄存器中。 
“VMOV R0, R1, D16”与上述指令的作用相反。它把 D16 寄存器的值（64 位）分解成两个 32 位数据，
并分别存储于 R0 和 R1 寄存器。 
后面出现的 VDIV、VMUL、VADD 指令都是浮点运算指令，不再介绍。 
使用 Xcode 生成 Thumb-2 模式的代码，会跟这段程序相同。 
17.5.3 ARM: Optimizing Keil 6/2013 (Thumb mode) 
f 
PUSH    {R3-R7,LR} 
MOVS    R7, R2 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
194 
逆向工程权威指南（上册） 
MOVS    R4, R3 
MOVS    R5, R0 
MOVS    R6, R1 
LDR     R2, =0x66666666;4.1 
LDR     R3, =0x40106666 
MOVS    R0, R7 
MOVS    R1, R4 
BL      __aeabi_dmul 
MOVS    R7, R0 
MOVS    R4, R1 
LDR     R2, =0x51EB851F;3.14 
LDR     R3, =0x40091EB8 
MOVS    R0, R5 
MOVS    R1, R6 
BL      __aeabi_ddiv 
MOVS    R2, R7 
MOVS    R3, R4 
BL      __aeabi_dadd 
POP     {R3-R7,PC} 
; 4.1 in IEEE 754 form: 
dword_364  
DCD 0x66666666  
; DATA XREF: f+A 
dword_368  