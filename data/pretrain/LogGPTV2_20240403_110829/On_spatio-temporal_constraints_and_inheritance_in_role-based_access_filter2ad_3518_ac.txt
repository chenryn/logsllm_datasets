Instead, the standard deﬁnes two additional functions –
authorized users and authorized permissions, each of
which take a role as a parameter.
We propose new deﬁnitions for the functions session roles
and avail session perms for the hierarchical component.
These are shown in the second section of Table 1.
Note that in core RBAC, assigned permissions(r) =
authorized permissions(r) for all r. Hence, this deﬁnition
is consistent with that given in the ANSI-RBAC standard.
4. SPATIO-TEMPORAL ERBAC
In this section we extend the spatio-temporal model we
have developed for RBAC96 to include the features deﬁned
in ERBAC07.
4.1 The standard model
The
standard
ST )
spatio-temporal ERBAC model
(or
ERBAC=
and
ERBAC07. In other words, we extend the directed labeled
graph (V, E, λ), where E = UA ∪ RH a ∪ RH u ∪ PA.
features of RBAC=
ST
combines
the
Definition 11. In ERBAC=
ST :
• a user v ∈ U may activate role v′ ∈ R at point d ∈ D if
and only if there exists an a-path v = v1, v2, . . . , vn =
v′ and d ∈ bλ(v, v′);
• a role v ∈ R is authorized for permission v′ ∈ P at
ANSI-RBAC
assigned users(r) = {u ∈ U : (u, r) ∈ UA}
assigned permissions(r) = {p ∈ P : (p, r) ∈ PA}
session users(s) = u
session roles(s) ⊆ {r ∈ R : (session users(s), r) ∈ UA}
authorized users(r) = {u ∈ U : r 6 r′, (u, r′) ∈ UA}
authorized permissions(r) = {p ∈ P : r > r′, (p, r′) ∈ PA}
avail session perms(s) = Sr∈session roles(s) assigned permissions(r)
Proposed extensions for hierarchical ANSI-RBAC
session roles(s) ⊆ {r ∈ R : r 6 r′, (session users(s), r′) ∈ UA}
avail session perms(s) = Sr∈session roles(s) authorized permissions(r)
RBAC=
ST
assigned users(r, d) = {u ∈ U : (u, r) ∈ UA, d ∈ λ(u) ∩ λ(r)}
assigned permissions(r, d) = {p ∈ P : (p, r) ∈ PA, d ∈ λ(p) ∩ λ(r)}
session roles(s, d) ⊆ {r ∈ R : r 6 r′, (session users(s), r′) ∈ UA, d ∈ bλ(r′, r)}
authorized users(r, d) = {u ∈ U : r 6 r′, (u, r′) ∈ UA, d ∈ λ(u) ∩ bλ(r′, r)}
authorized permissions(r, d) = {p ∈ P : r > r′, (p, r′) ∈ PA, d ∈ λ(p) ∩ bλ(r, r′)}
avail session perms(s, d) = Sr∈session roles(s,d) authorized permissions(r, d)
RBAC+
ST
assigned users(r, d) = {u ∈ U : (u, r) ∈ UA, d ∈ µ(u, r)}
assigned permissions(r, d) = {p ∈ P : (p, r) ∈ PA, d ∈ µ(p, r)}
session roles(s, d) ⊆ {r ∈ R : r 6 r′, (session users(s), r′) ∈ UA, d ∈ bµ(session users(s), r)}
authorized users(r, d) = {u ∈ U : r 6 r′, (u, r′) ∈ UA, d ∈ bµ(u, r)}
authorized permissions(r, d) = {p ∈ P : r > r′, (p, r′) ∈ PA, d ∈ bµ(r, p)}
avail session perms(s, d) = Sr∈session roles(s,d) authorized permissions(r, d)
Table 1: ANSI-RBAC mapping functions
point d ∈ D if and only if there exists a u-path v =
v1, v2, . . . , vn = v′ and d ∈ bλ(v, v′);
• a user v ∈ U is authorized for permission v′ ∈ P at
point d ∈ D if and only if there exists a path v =
v1, v2, . . . , vi, . . . , vn = v′ such that vi ∈ R for some
i, v1, . . . , vi is an a-path, vi, . . . , vn is a u-path, and
d ∈ bλ(v, v′).
4.2 The strong model
The strong spatio-temporal ERBAC model (or ERBAC+
ST )
combines the features of RBAC+
In
other words, we have the extended directed labeled graph
(V, E, λ, µ), where E = UA ∪ RH a ∪ RH u ∪ PA.
ST and ERBAC07.
Definition 12. In ERBAC+
• a user v ∈ U may activate role v′ ∈ R at point d ∈ D if
and only if there exists an a-path v = v1, v2, . . . , vn =
ST :
v′, and d ∈ bµ(v, v′);
• a role v ∈ R is authorized for permission v′ ∈ P at
point d ∈ D if and only if there exists a u-path v =
v1, v2, . . . , vn = v′, and d ∈ bµ(v, v′);
• a user v ∈ U is authorized for permission v′ ∈ P at
point d ∈ D if and only if there exists a path v =
v1, v2, . . . , vi, . . . , vn = v′ such that vi ∈ R for some
i, v1, . . . , vi is an a-path, vi, . . . , vn is a u-path, and
d ∈ bµ(v, v′).
4.3 The weak model
The weak spatio-temporal ERBAC model (or ERBAC−
ST )
ST and ERBAC07. Like
ST , we have the extended directed labeled graph
combines the features of RBAC−
ERBAC=
(V, E, λ), where E = UA ∪ RH a ∪ RH u ∪ PA.
Definition 13. In ERBAC−
ST :
• a user v ∈ U may activate role v′ ∈ R at point d ∈ D if
and only if there exists an a-path v = v1, v2, . . . , vn =
v′, and d ∈ λ(v) ∩ λ(v′);
• a role v ∈ R is authorized for permission v′ ∈ P at
point d ∈ D if and only if there exists a u-path v =
v1, v2, . . . , vn = v′, and d ∈ λ(v) ∩ λ(v′);
• a user v ∈ U is authorized for permission v′ ∈ P at
point d ∈ D if and only if there exists a path v =
v1, v2, . . . , vi, . . . , vn = v′ such that vi ∈ R for some
i, v1, . . . , vi is an a-path, vi, . . . , vn is a u-path, and
d ∈ λ(v) ∩ λ(vi) ∩ λ(v′).
5. PRACTICAL CONSIDERATIONS IN
SPATIO-TEMPORAL RBAC
5.1 Is the use of hierarchies realistic?
The examples in Figure 1 illustrate that the presence of
a role hierarchy signiﬁcantly complicates the speciﬁcation
of spatio-temporal constraints. We argued in Section 3 that
there were at least three diﬀerent models that could be used;
even then, it was necessary to introduce the notion of trusted
entities for certain scenarios. This suggests that there are
many possible interpretations of spatio-temporal restrictions
in the presence of a role hierarchy. Choosing the appropriate
model may well be diﬃcult, and encoding the desired enter-
prise security policies within such a model is also likely to be
non-trivial. In the next two sections, we consider four simple
strategies that might be used to mitigate these diﬃculties.
5.1.1 Flat spatio-temporal RBAC
In practical applications, it might well be preferable to
assume that the set of roles is unordered, as in core ANSI-
RBAC standard or ﬂat RBAC96 (RBAC0). This means,
of course, that the number of user- and permission-role as-
signments will increase (because such assignments are often
implicitly generated by assignments to other roles in the
presence of a role hierarchy). However, it does mean that
ﬂat RBAC+
ST is suﬃcient for specifying all spatio-temporal
constraints.
Consider the spatio-temporal requirements for the conﬁg-
uration of RBAC in Figure 1(f). We transform the RBAC96
conﬁguration to ﬂat RBAC as follows: U = {u, v}, R =
{r, r′, r′′} and UA = {(v, r′), (v, r), (v, r′′), (u, r), (u, r′′)}.
We only need to deﬁne µ(u, r) = D; all other nodes and
edges are enabled for any d ∈ D.
It is obvious that we
can easily encode the spatio-temporal requirements for other
conﬁgurations of RBAC in Figure 1 using ﬂat RBAC+
ST .
5.1.2 Eliminate enabling restrictions on roles
An alternative approach is to eliminate enabling restric-
tions on roles: that is, set λ(r) = D for all r ∈ R.
In
other words, all roles are enabled at all points in the spatial-
temporal domain. This approach is completely contrary to
existing approaches, in which roles are usually the only en-
tities for which such enabling conditions are deﬁned. In this
approach, restrictions are imposed at the outer nodes and
edges of the RBAC graph. As such, it extends the approach
advocated in the previous section by including a role hier-
archy.
An example that is often quoted in the temporal RBAC
literature is that of a night-doctor role, which should only
be enabled during the night shift hours. We would ar-
gue that instead of imposing the enabling condition on the
night-doctor role, we should impose the condition on any
assignment of that role to a user. This does not preclude
the same user from also being assigned to the day-doctor
role (which would have a diﬀerent enabling condition on the
user-role assignment).
It would not be diﬃcult to implement this kind of ap-
proach. Let us assume that we have a night-doctor role,
which should only be activated during the night shift. Then,
whenever a user is assigned to this role, an enabling con-
dition is automatically generated for that user-role assign-
ment. (If the intersection of the user’s enabling condition
and this condition is empty, then the assignment fails.)
Let us now consider the impact of setting λ(r) = D for
all r. Then, in RBAC=
ST , a user u may activate a role r at
point d if there is an au-path u, r1, . . . , rn = r and d ∈ λ(u),
a role r is authorized for permission p at point d if there
is an au-path r = r1, . . . , rn, p and d ∈ λ(p), and user u
is authorized for permission p at point d if there is an au-
path u, r1, . . . , rn, p and d ∈ λ(u) ∩ λ(p); in RBAC+
ST , a user
u may activate a role r at point d if there is an au-path
u, r1, . . . , rn = r and d ∈ µ(u, r1), a role r is authorized for
permission p at point d if there is an au-path r = r1, . . . , rn, p
and d ∈ µ(rn, p), and user u is authorized for permission p
at point d if there is an au-path u, r1, . . . , rn, p and d ∈
µ(u, r1) ∩ µ(rn, p).
5.2 Partial transitive closure
Let us now assume, however, that there is a requirement
for a role hierarchy and for having enabling conditions on the
roles. We note that checking whether a user may activate a
role or is granted a permission may be a relatively complex
operation when there are spatio-temporal constraints and a
role hierarchy. This is because there may be multiple paths
between two roles in a role hierarchy and because we need
to check whether the point at which the access request was
made belongs to each of the enabling conditions. Hence,
we suggest that in practical implementations, it might be
useful to pre-compute the transitive closure of (part of) the
RBAC96 graph.
One possibility is to construct RH ∗, the transitive closure
of RH , and assign D ⊆ D to (r, r′) ∈ RH ∗.
5.2.1 RBAC=
ST
In RBAC=
ST , for example, this value would be the union
of the individual bλ values for each path between r and r′.
That is, given r, r′ ∈ R, let π(r, r′) denote the set of paths
between r and r′, and for p ∈ π(r, r′), let bλ(p, r, r′) denote
bλ(r, r′) for path p. We deﬁne bλ∗ : RH ∗ → 2D, where
bλ∗(r, r′) = [
p∈π(r,r′)bλ(p, r, r′)
Suppose, for example, that r4 < r2 < r1 and r4 < r3 < r1
and that r2 and r3 are incomparable. Suppose also that
λ(ri) = Di. Then
bλ∗(r1, r4) = (D1 ∩ D2 ∩ D4) ∪ (D1 ∩ D3 ∩ D4)
= D1 ∩ D4 ∩ (D2 ∪ D3).
We represent the partial transitive closure of RBAC=
ST as
a tuple (V, E ∗, λ,bλ∗), where E ∗ = UA ∪ RH ∗ ∪ PA, λ :
V → 2D and bλ∗ : RH ∗ → 2D. Given G∗ = (V, E ∗, λ,bλ∗), a
request by u to exercise a permission p at point d is granted
if u has activated a role r1 at d and there exists (r1, rn) and
(rn, p) in E ∗ such that d ∈ bλ∗(r1, rn) ∩ λ(p).
5.2.2 RBAC+
ST
Similarly, in RBAC+
ST , for p ∈ π(r, r′), let bµ(p, r, r′) de-
note bµ(r, r′) for path p. We deﬁne bµ∗ : RH ∗ → 2D, where
bµ∗(r, r′) = [
p∈π(r,r′) bµ(p, r, r′)
We represent the partial transitive closure of RBAC+
ST
as a tuple (V, E ∗, λ, µ, bµ∗). Given G∗ = (V, E ∗, λ, µ, bµ∗), a
request by u to exercise a permission p at point d is granted
if u has activated a role r1 at d and there exists (r1, rn) and
(rn, p) in E ∗ such that d ∈ bµ∗(r1, rn) ∩ µ(rn, p).
5.2.3 Spatio-temporal ERBAC07
For the models based on ERBAC07, we compute RH ∗
a, the
u, the transitive closure
transitive closure of RH a, and RH ∗
of RH u, and deﬁne functions bλ∗
further details.
a, bλ∗
u, bµ∗
a and bµ∗
u. We omit
5.3 Full transitive closure
We now brieﬂy consider the full transitive closure of G,
G⋆ = (V, E ⋆), where E⋆ = (UA ∪ RH ∪ PA)∗. In RBAC=
ST ,
given v, v′ ∈ V , let π(v, v′) denote the set of paths between
v and v′, and for p ∈ π(v, v′), let bλ(p, v, v′) denote bλ(v, v′)
for path p. We deﬁne bλ⋆ : E⋆ → 2D, where
p∈π(v,v′)bλ(p, v, v′)
bλ⋆(v, v′) = [
u to exercise permission p at point d is granted if there exists
We represent the full transitive closure of RBAC=
ST as a
tuple (V, E ⋆, λ,bλ⋆). Given G⋆ = (V, E ⋆, λ,bλ⋆), a request by
(u, p) in E⋆ such that d ∈ bλ⋆(u, p).
The full transitive closure of RBAC+
ST and
ERBAC+
ST are similar, and are omitted. Computing the
full transitive closure will only be practical for relatively
small numbers of users and permissions, so it is likely that
computing the partial transitive closure will be more useful
in practice.
ST , ERBAC=
5.4 Concluding remarks
We have developed three spatio-temporal RBAC models
and introduced the notion of trusted entities to specify the
spatio-temporal requirements in diﬀerent conﬁgurations of
RBAC. The need for diﬀerent models arises because once
enabling conditions are imposed on roles, there are a num-
ber of diﬀerent choices for the semantics of authorization. In
practice, it is complicated and error-prone to specify compre-
hensive spatio-temporal requirements in hierarchical RBAC
model. Therefore, we would argue that, in many practi-
cal situations, the most appropriate approach is to use ﬂat
RBAC+
ST to specify spatio-temporal requirements.
However, when there are very large numbers of user
and permissions,
it may well be appropriate to use role
hierarchies, thereby avoiding large numbers of user- and
permission-role assignments. In this case, it is appropriate
to set λ(r) = D for all r ∈ R, and specify enabling condi-
tions on restrictions on outer nodes and edges, such as users
and user-role assignments, of the RBAC graph. We should
perhaps note that the underlying “philosophy” of RBAC is
to use roles to reduce the burden of administration, and that
our suggestion of applying enabling constraints to users and
user-role assignment is inconsistent with this basic tenet.
As we have seen, however, many situations may require con-
straints on users and user-role assignment, rather than roles.
This suggests that incorporating spatio-temporal constraints
within RBAC is likely to require some trade-oﬀ between the
complexity of policies that can be supported and the com-
plexity of constraint speciﬁcation and administration.
In addition, when there are requirements for role hierar-
chy and enabling conditions on the roles, we suggest that it
is appropriate to pre-compute the transitive closure of the
role hierarchy to avoid complex computations when checking
access requests. On the other hand, it is unlikely that it is
useful to pre-compute the full transitive closure of RBAC96
graph in many practical systems, because the size of E⋆ will
be very large. However, deciding access requests can be per-
formed far more quickly than in the other three approaches.