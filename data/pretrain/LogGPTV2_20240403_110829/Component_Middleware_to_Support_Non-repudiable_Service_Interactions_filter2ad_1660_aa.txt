# Component Middleware to Support Non-repudiable Service Interactions

**Authors:**
- Nick Cook
- Paul Robinson
- Santosh K. Shrivastava

**Affiliation:**
School of Computing Science, University of Newcastle, UK

**Emails:**
- nick.cook@ncl.ac.uk
- p.robinson@ncl.ac.uk
- santosh.shrivastava@ncl.ac.uk

## Abstract
The diverse array of services and resources available over the Internet presents new opportunities to create value-added, inter-organizational Composite Services (CSs) from multiple existing services. To preserve their autonomy and privacy, each organization must regulate access to their services and shared information within the CS. Key mechanisms to facilitate such regulated interactions include the collection and verification of non-repudiable evidence of the actions of the parties involved in the CS. This paper describes how component-based middleware can be enhanced to support non-repudiable service invocation and information sharing. A generic implementation based on a J2EE application server is presented.

**Keywords:** System Security, FT Architecture/Middleware, Software Engineering, Non-repudiation, Service Composition

## 1. Introduction
The wide variety of services and resources available over the Internet offers new opportunities to create value-added, inter-organizational Composite Services (CSs) from multiple existing services. The resulting CS often involves close interaction among the constituent services of participating organizations. However, each organization needs to maintain its autonomy and privacy. This implies the regulation of access both to the services offered within a CS and to information that is shared in a CS. Regulation of access to shared information includes validation by all interested parties of any proposed changes to that information. Since the intention is to compose a CS from existing services, regulatory requirements should be met by extending, rather than replacing, these services. The main contribution of this paper is to address this requirement by extending component-based middleware to provide a flexible framework for regulated interaction between organizations.

It is assumed that each organization has a local set of policies for an interaction that is consistent with an overall agreement (or set of agreements) between organizations (the business contract). The formation and operation of the CS must not compromise local policies and must comply with the business contract. There are two aspects to regulation in this context: (i) high-level mechanisms to specify and enforce contractual rights and obligations (e.g., work on Law-Governed Interaction [13] and on contract representation and monitoring [14]); and (ii) lower-level mechanisms to generate a non-repudiable audit trail that can be used to record and verify that observed interaction behavior adheres to agreements. An interaction is non-repudiable if it is impossible for any party to subsequently deny their participation. This paper presents two mechanisms that together form the basic building blocks for trusted interaction: non-repudiable service invocation and non-repudiable information sharing. These provide abstractions familiar from the intra-organizational context and result in regulated interaction in the inter-organizational context. For example, non-repudiable service invocation can be used to audit requests between organizations to access or modify each other's internal information, or for the transfer of control over shared information. Non-repudiable information sharing regulates access to and updates of shared information.

The contributions of this paper are:
- Introducing the abstraction of trusted interceptors that mediate the interaction between organizations to achieve the exchange of non-repudiation evidence and to validate changes to shared information.
- Showing that this abstraction is sufficiently general to apply to a variety of interaction scenarios.
- Demonstrating the practicality of the abstraction through a prototype implementation in component-based middleware (such as J2EE [16]).

Section 2 provides a motivating example. Section 3 discusses the trusted interceptor abstraction and our model of non-repudiable interaction. Section 4 describes the prototype component-based implementation of non-repudiation services. Related work is discussed in Section 5. Section 6 concludes the paper.

## 2. Motivating Example
This section describes a scenario involving a specialist car manufacturer that combines components from various part suppliers to satisfy the requirements of a specialist car dealer (acting on behalf of the ultimate customer). Figure 1 presents the overall structure of the interaction between the specialist car dealer, the car manufacturer, and, in this example, three car part suppliers. In effect, these enterprises collaborate to form a virtual enterprise (VE) to deliver a specialist car to the car dealer’s customer. The VE creates a Composite Service (CS) for the specification and delivery of a specialist car. The CS interactions must be regulated to ensure that each member of the VE obtains the value they expect from the collaboration and is bound to the corresponding commitments they make.

CS interactions involve the invocation of services between members of the VE and the sharing of information held in common by the VE. For example, Figure 1 depicts the car manufacturer and suppliers A and B negotiating the delivery of some component. The component is required to meet an overall specification negotiated between the dealer and the manufacturer. The manufacturer then reaches an agreement with the suppliers on details such as interfaces between parts, cost of customization, and delivery schedules. It is natural to share this information so that each party can update it (subject to the agreement of the other parties). Other artifacts that are shared and may be subject to renegotiation are the agreements governing the interaction. In addition to updates to shared information, the process of reaching agreement on the specification of a car component, and the car as a whole, will involve requests between parties to perform actions on each other’s behalf. Actions may range from resolving queries on the range of parts available to requests to act on shared information (initiating a transfer of control). These requests are naturally expressed as service invocations.

To regulate interactions of the above type, a given action must be attributable to the party who performed the action, and commitments made must be attributable to the committing party. For example, it should not be possible for a client to subsequently disavow the request and consumption of a service. Similarly, it should not be possible for the service provider to subsequently deny having delivered a service. If information is shared, the parties sharing the information should be able to validate a proposed update, the update should be attributable to its proposer, and the validation decisions with respect to the update should be attributable to the other parties. That is, to regulate an interaction, we require attribution, validation, and audit. Non-repudiable attribution binds an action to the party performing the action. Validation determines the legality of an action with respect to interaction agreements. Audit ensures that evidence is available in case of dispute and to inform future interactions. This paper addresses these requirements by providing two building blocks for regulated interaction between organizations: non-repudiable service invocation (NR-Invocation) and non-repudiable information sharing (NR-Sharing). Component middleware support for regulated service interactions ensures that actions of a member of a VE are non-repudiably bound to the member; the acceptance, or otherwise, of those actions is non-repudiably bound to the other members of the VE; and that service invocations, and the results of those invocations, are bound to the parties to the invocation.

## 3. Building Blocks for Trusted Interaction
This section discusses the abstraction of trusted interceptors that mediate inter-organizational interaction and describes our model of non-repudiable interaction in terms of this abstraction. We argue that the trusted interceptor abstraction is sufficiently general to apply to a variety of interaction scenarios. For example, it is not bound to particular non-repudiation protocols but can be seen as a flexible framework in which protocols can be deployed as appropriate to the regulatory regime governing an interaction or to the trust relationships between the parties to an interaction.

### 3.1. Trusted Interceptors and Trust Domains
Inter-organizational interaction requires regulatory mechanisms to ensure: (i) that misbehavior by dishonest parties does not disadvantage honest parties, and (ii) that honest parties share a verifiable, consistent view of the nature of the interaction. However, different types of interaction will demand different mechanisms. The choice of mechanisms to deploy will be determined by application-specific factors such as the relationship between the parties to the interaction, the legal framework and agreements that govern the interaction, and the application domain within which the organizations operate. The common feature of all regulatory mechanisms is that they somehow mediate the interaction between parties. The trusted interceptor abstraction generalizes this notion of mediation.

As shown in Figure 2, conceptually, each party has a trusted interceptor that acts on its behalf. The introduction of trusted interceptors transforms an unregulated domain into a trust domain for the conduct of regulated, audited, and fair interaction. Informally, a fair interaction is one in which honest parties cannot be disadvantaged by the behavior of dishonest parties (for details, see Markowitch et al. [12], who discuss the evolution of the notion of fairness in exchange protocols). The trusted interceptor abstraction insulates the parties to the interaction from the detail of underlying mechanisms used to meet regulatory requirements. Interceptors can implement different mechanisms to meet different interaction requirements and can be reconfigured to meet changing requirements as relationships evolve.

Trusted interceptors provide a trust domain by policing access to the domain and regulating and auditing actions within the domain. To support dispute resolution, the fact that trusted interceptors mediated the interaction provides any honest party with irrefutable evidence of their own actions within the domain and of the observed actions of other parties. The regulatory mechanisms used to support a trust domain will vary according to the degree of trust between parties. For example, a more lightweight mechanism can be used when parties, who otherwise trust each other, need a verifiable audit trail of their interaction compared to the situation where parties are mutually mistrusting (and require strong fairness guarantees). Also, certain types of interaction may be inherently more trustworthy than others. For example, there may be stronger incentives to good behavior in a long-running interaction involving updates to shared information between members of a VE compared with a one-off service invocation. This observation is supported by work on the Iterative Prisoner’s Dilemma [1], where the prospect of and payoff from future interaction can even induce antagonists to cooperate. Ultimately, trusted interceptors construct a trust domain that, under assumptions agreed between the parties to an interaction, delivers safety and liveness guarantees. Safety guarantees ensure that the interaction complies with agreements between organizations—e.g., that changes to shared information are unanimously agreed. Liveness guarantees address forward progress—e.g., that honest parties can resolve an exchange despite non-cooperation of dishonest parties.

Figure 3 shows three approaches to the use of trusted interceptors to provide a trust domain (for simplicity, between two organizations). In both Figure 3(a) and 3(b), communication between organizations A and B is routed via Trusted Third Parties (TTP(s)). Figure 3(a) shows a single TTP acting on behalf of both organizations. Figure 3(b) is the construction of an inline TTP from TTPs acting on behalf of A and B. However constructed, the inline TTP is an interceptor between the organizations and is responsible for ensuring that agreed safety and liveness guarantees are delivered to honest parties.

The alternative to interaction through inline TTPs is the formation of a direct trust domain by the organizations themselves. As shown in Figure 3(c), in this case, each party hosts its trusted interceptor. The interceptors execute protocols that deliver the guarantees required to form a trust domain appropriate to the given interaction. Depending on the relationship between organizations and the specific interaction requirements, this direct trust domain may demand the availability of one or more TTPs. These TTP(s) are not directly involved in all communication between the parties but may be called upon to resolve or abort a protocol run to deliver fairness and/or liveness guarantees to honest parties. The organizations forming a trust domain can agree on the deployment of different interceptors to deliver different fairness or reliability guarantees or to satisfy different evidentiary requirements. An advantage of the formation of a direct trust domain is that it is easier to make trade-offs between different requirements. For example, the implementation of non-repudiable information sharing described in Section 4.3 involves direct interaction between organizations without the support of a TTP. Nevertheless, as shown in [5], it has the safety property that an honest party can irrefutably assert the validity of the (agreed) state of shared information despite failure and/or misbehavior by other parties. It also has the liveness property that if no party misbehaves, agreed interactions take place despite a bounded number of temporary network and computer-related failures. In effect, the risk of a loss of liveness and the resultant breakdown of an interaction leading to dispute is traded against the advantage of direct interaction between parties without the involvement of a TTP. An alternative implementation, using different interceptors, could involve a TTP to deliver a stronger liveness guarantee.

In the remainder of this section, we describe how trusted interceptors are used to achieve regulated service invocation and information sharing. First, we enumerate the trusted interceptor assumptions (some of which are trivially met when a single TTP acts as an interceptor for all parties):
1. Trusted interceptors use perfect cryptography. For example, signatures cannot be forged, and encrypted data cannot be decrypted except with the appropriate decryption key.
2. The communication channel between trusted interceptors provides eventual message delivery (there is a bounded number of temporary network and computer-related failures).
3. Trusted interceptors have persistent storage for messages (or, more precisely, evidence extracted from messages). The minimum requirement is that interceptors ensure evidence is available for as long as is necessary to meet their obligations to the other interceptors mediating an interaction. Longer-term storage to protect the interests of the party on whose behalf an interceptor acts will be determined by agreement between the party and its interceptor.
4. Trusted interceptors only exchange messages that are well-constructed with respect to the interaction they are mediating. For example, interceptors do not relay information provided by the organization they represent that is invalid with respect to a given protocol execution; and messages exchanged are either tamper-resistant (encrypted), or tampering is detectable, and interceptors will cooperate to ensure a well-constructed message is eventually delivered.
5. Trusted interceptors execute on reliable nodes, or the interaction between them is made fault-tolerant by employing mechanisms such as those described by Ezhilchelvan and Shrivastava [7].

Given these assumptions, trusted interceptors can cooperate to ensure fairness and liveness for honest parties to an interaction. Ultimately, since the cooperation of dishonest parties cannot be enforced, the guarantee is that trusted interceptors will provide a verifiable and consistent view of the interaction, thereby ensuring that honest parties are not disadvantaged.