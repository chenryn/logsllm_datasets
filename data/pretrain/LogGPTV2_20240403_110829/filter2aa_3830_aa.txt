# DoSaTTaCK
* Category: Reverse Engineering 
* 1200 Points
* Solved by the JCTF Team
## Description
> What is this file and how can it help you get the flag?
Attached was a file called `challenge.flp`.
## Solution
Let's inspect this file:
```console
root@kali:/media/sf_CTFs/bsidestlv/DoSaTTaCK# file challenge.flp
challenge.flp: DOS/MBR boot sector, code offset 0x58+2, OEM-ID "WINIMAGE", sectors/cluster 2, root entries 112, sectors 640 (volumes  The New Executable (abbreviated NE or NewEXE) is a 16-bit .exe file format, a successor to the DOS MZ executable format. It was used in Windows 1.0â€“3.x, multitasking MS-DOS 4.0 [...].
>
> The first product to be released using the New Executable format was Windows 1.0 in 1985, followed by the 1986 multitasking MS-DOS 4.0, which was a separate branch of MS-DOS development, released between mainstream MS-DOS versions 3.2 and 3.3, and sometimes referred to as "European MS-DOS 4.0".
> 
> [...]
> 
> The Portable Executable (PE) format replaced NE format in 32-bit and 64-bit versions of Windows [...].
Why is this important? Because support for NE files in modern disassemblers is usually partial at most. IDA Free doesn't support it (IDA Pro does, but is pretty expensive). Ghidra has partial support but basic functionality such as string referencing isn't supported. In this writeup, we'll use a tool called `W32Dasm` (version 10.0) which probably is much less convenient than IDA-Pro, but can be used freely.
We'll start from the client. After opening CLIENT.EXE in the disassembler, we click the "String Data References" button and get the following string references:
![](images/client_stringref.png)
Since "Calculating Key" was the first string printed to the console, let's search for it.
The reference brings us to the following function:
```assembly
* Referenced by a CALL at Address:
|:0001.01B6
|
:0001.0076 C85E0100               enter 015E, 00
:0001.007A 57                     push di
:0001.007B 56                     push si
:0001.007C 8B4606                 mov ax, [bp+06]
:0001.007F A37200                 mov word ptr [0072], ax
* Possible StringData Ref from Data Seg 002 ->"Calculating key.."
                                  |
:0001.0082 687400                 push 0074
:0001.0085 0E                     push cs
:0001.0086 E8C3FF                 call 004C
:0001.0089 83C402                 add sp, 0002
:0001.008C 9AFFFF0000             call KERNEL.GETCURRENTTASK
:0001.0091 8946FC                 mov [bp-04], ax
:0001.0094 8BC8                   mov cx, ax
:0001.0096 2BDB                   sub bx, bx
:0001.0098 899EA8FE               mov [bp+FEA8], bx
:0001.009C 8986AAFE               mov [bp+FEAA], ax
:0001.00A0 81C3FA00               add bx, 00FA
:0001.00A4 83D100                 adc cx, 0000
:0001.00A7 8EC1                   mov es, cx
:0001.00A9 8BC8                   mov cx, ax
:0001.00AB 8BB6A8FE               mov si, [bp+FEA8]
:0001.00AF 81C6B400               add si, 00B4
:0001.00B3 83D100                 adc cx, 0000
:0001.00B6 8CC0                   mov ax, es
:0001.00B8 899EA4FE               mov [bp+FEA4], bx
:0001.00BC 8C86A6FE               mov [bp+FEA6], es
:0001.00C0 8EC1                   mov es, cx
:0001.00C2 268A6401               mov ah, es:[si+01]
:0001.00C6 2AC0                   sub al , al 
:0001.00C8 268A0C                 mov cl , es:[si]
:0001.00CB 2AED                   sub ch, ch
:0001.00CD 03C1                   add ax, cx
:0001.00CF 2D3953                 sub ax, 5339
:0001.00D2 8BC8                   mov cx, ax
:0001.00D4 2BD2                   sub dx, dx
:0001.00D6 8E86A6FE               mov es, [bp+FEA6]
:0001.00DA 2AC0                   sub al , al 
:0001.00DC 268A6701               mov ah, es:[bx+01]
:0001.00E0 8986A2FE               mov [bp+FEA2], ax
:0001.00E4 268A07                 mov al , es:[bx]