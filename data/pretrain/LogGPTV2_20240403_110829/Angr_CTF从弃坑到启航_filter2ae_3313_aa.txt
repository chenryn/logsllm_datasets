# Angr_CTF从弃坑到启航
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> PS：打国赛、强网杯开学七七八八的杂事拖延了一点时间，拖更一下，上次提到的API变化可以查看一下附录
承接上一篇文章，上一章教程我们主要学习了angr的Hook接口的利用，这次我们把剩下的题目一网打尽
## 12_angr_veritesting
如题主要学习使用`Veritesting`的技术解决路径爆炸问题
###  Veritesting
动态符号执行（DSE）和静态符号执行（SSE）一个为路径生成公式，一个为语句生成公式。前者生成公式时会产生很高的负载，但生成的公式很容易解；后者生成公式很容易，公式也能覆盖更多的路径，但是公式更长更难解。方法上的区别在于DSE会摘要路径汇合点上两条分支的情况，而SSE为两条分支fork两条独立的执行路径
SSE目前还不能对大规模的程序分析（如Cloud9+state
merging），问题主要在于循环的表示、方程复杂度、缺少具体状态、和对syscall等的模拟。Veritesting可以在SSE和DSE之间切换，减少负载和公式求解难度，并解决静态方法需要摘要或其他方法才能处理的系统调用和间接跳转
简单来说就是Veritesting结合了静态符合执行与动态符号执行，减少了路径爆炸的影响，在angr里我们只要在构造模拟管理器时，启用Veritesting了就行
    project.factory.simgr(initial_state, veritesting=True)
首先检测一下文件：
    zxy@ubuntu:~/Desktop/TEMP$ checksec 12_angr_veritesting
    [*] '/home/syc/Desktop/TEMP/12_angr_veritesting'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
用IDA打开查看一下函数：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      const char **v3; // ST1C_4
      int v4; // ST08_4
      int v5; // ebx
      int v7; // [esp-10h] [ebp-5Ch]
      int v8; // [esp-Ch] [ebp-58h]
      int v9; // [esp-8h] [ebp-54h]
      int v10; // [esp-4h] [ebp-50h]
      int v11; // [esp+4h] [ebp-48h]
      int v12; // [esp+8h] [ebp-44h]
      int v13; // [esp+Ch] [ebp-40h]
      int v14; // [esp+10h] [ebp-3Ch]
      int v15; // [esp+10h] [ebp-3Ch]
      int v16; // [esp+14h] [ebp-38h]
      signed int i; // [esp+14h] [ebp-38h]
      int v18; // [esp+18h] [ebp-34h]
      int string; // [esp+1Ch] [ebp-30h]
      int v20; // [esp+20h] [ebp-2Ch]
      int v21; // [esp+24h] [ebp-28h]
      int v22; // [esp+28h] [ebp-24h]
      int v23; // [esp+2Ch] [ebp-20h]
      int v24; // [esp+30h] [ebp-1Ch]
      unsigned int v25; // [esp+40h] [ebp-Ch]
      int *v26; // [esp+44h] [ebp-8h]
      v26 = &argc;
      v3 = argv;
      v25 = __readgsdword(0x14u);
      print_msg();
      memset((char *)&string + 3, 0, 0x21u);
      printf("Enter the password: ");
      __isoc99_scanf(
        "%32s",
        (char *)&string + 3,
        v4,
        v7,
        v8,
        v9,
        v10,
        v3,
        v11,
        v12,
        v13,
        v14,
        v16,
        v18,
        string,
        v20,
        v21,
        v22,
        v23,
        v24);
      v15 = 0;
      for ( i = 0; i  90 )
      {
        puts("Try again.");
        exit(1);
      }
      return (a1 - 65 + 47 * a2) % 26 + 65;
    }
回忆一下`08_angr_constraints`我们很快就能发现容易产生路径爆炸的地方
    for ( i = 0; i  90 )
      {
        puts("Try again.");
        exit(1);
      }
      return (37 * a2 + a1 - 65) % 26 + 65;
    }
通常，Angr会自动地用工作速度快得多的simprocedure代替标准库函数，但是这题中库函数都已经因为静态编译成了静态函数了，angr没法自动替换。要解决这题，需要手动Hook所有使用标准库的C函数，angr已经在simprocedure中为我们提供了这些静态函数,
这里列举一些常用的函数
    angr.SIM_PROCEDURES['libc']['malloc']
    angr.SIM_PROCEDURES['libc']['fopen']
    angr.SIM_PROCEDURES['libc']['fclose']
    angr.SIM_PROCEDURES['libc']['fwrite']
    angr.SIM_PROCEDURES['libc']['getchar']
    angr.SIM_PROCEDURES['libc']['strncmp']
    angr.SIM_PROCEDURES['libc']['strcmp']
    angr.SIM_PROCEDURES['libc']['scanf']
    angr.SIM_PROCEDURES['libc']['printf']
    angr.SIM_PROCEDURES['libc']['puts']
    angr.SIM_PROCEDURES['libc']['exit']
我们只需要手动找到程序中用到静态函数的地址，将其利用simprocedure提供的函数Hook掉即可
话不多说上EXP：
    import angr
    import claripy
    import sys
    def Go():
        path_to_binary = "./13_angr_static_binary" 
        project = angr.Project(path_to_binary, auto_load_libs=False)
        initial_state = project.factory.entry_state()
        project.hook(0x804ed40, angr.SIM_PROCEDURES['libc']['printf']())
        project.hook(0x804ed80, angr.SIM_PROCEDURES['libc']['scanf']())
        project.hook(0x804f350, angr.SIM_PROCEDURES['libc']['puts']())
        project.hook(0x8048d10, angr.SIM_PROCEDURES['glibc']['__libc_start_main']())
        simulation = project.factory.simgr(initial_state, veritesting=True)
        def is_successful(state):
            stdout_output = state.posix.dumps(1)
            if b'Good Job.\n' in stdout_output:
                return True
            else: 
                return False
        def should_abort(state):
            stdout_output = state.posix.dumps(1)
            if b'Try again.\n' in  stdout_output:
                return True
            else: 
                return False
        simulation.explore(find=is_successful, avoid=should_abort)
        if simulation.found: