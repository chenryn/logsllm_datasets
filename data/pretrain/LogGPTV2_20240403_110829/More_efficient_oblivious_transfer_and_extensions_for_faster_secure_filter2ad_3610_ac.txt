### Optimized Semi-Honest Oblivious Transfer (OT) Protocol

In this section, we present a new semi-honest OT protocol that is secure in the standard model. This protocol is an optimized instantiation of the OT protocol from [16]. When implemented over elliptic curves, our protocol is approximately three times faster than the standard model OT of [46] and only two times slower than the random oracle OT of [46] (see ยง6.1 for a detailed comparison of the protocol runtimes). Thus, our protocol is a viable alternative for those who prefer not to rely on random oracles.

#### Security Assumptions and Setup

Our \( n \times \text{OT}^{\ell} \) protocol is based on the Decisional Diffie-Hellman (DDH) assumption and uses a key derivation function (KDF). We assume that it is possible to sample a random element from the group, and the DDH assumption remains hard even when the coins used to sample the element are given to the distinguisher. Specifically, \((g, h, g^a, h^a)\) is indistinguishable from \((g, h, g^a, g^b)\) for random \(a, b\), even if the coins used to sample \(h\) are known. This holds for all known groups where the DDH problem is assumed to be hard.

For finite fields, one can sample a random element \(h \in \mathbb{Z}_p\) of order \(q\) by choosing a random \(x \in_R \mathbb{Z}_p\) and computing \(h = x^{(p-1)/q}\) until \(h \neq 1\). For elliptic curves, one chooses a random x-coordinate, obtains a quadratic equation for the y-coordinate, and randomly selects one of the solutions as \(h\) (if no solution exists, start over).

#### Computational Complexity

The computational complexity of our \( n \times \text{OT}^{\ell} \) protocol is as follows:
- **Sender (S):** 2n exponentiations and 2n KDF computations.
- **Receiver (R):** 2n fixed-base exponentiations and n KDF computations. R also samples n random group elements.

#### Security Analysis

The protocol is secure in the presence of a semi-honest adversary. The view of a corrupted sender consists of pairs \(\{(h_{i,0}, h_{i,1})\}_{i=1}^n\), which are independent of the receiver's inputs and can be perfectly simulated. For a corrupted receiver, we need to show the existence of a simulator \(S_1\) that produces a computationally indistinguishable view given the inputs and outputs of the receiver, without knowing the other sender values. \(S_1\) works by running an honest execution of the protocol with the receiver's inputs and setting the other sender values to 0.

#### Protocol Description

**PROTOCOL 51 (Optimized \( n \times \text{OT}^{\ell} \) Protocol)**

**Inputs:**
- **Sender (S):** \(n\) pairs \((x_{i,0}, x_{i,1})\) of \(\ell\)-bit strings, for every \(1 \leq i \leq n\).
- **Receiver (R):** Selection bits \(\sigma = (\sigma_1, \ldots, \sigma_n)\).
- **Common:** A group \(\langle G, q, g \rangle\) where the DDH is hard, and a key derivation function KDF.

**First Round (Receiver):**
1. Choose random exponents \(\alpha_i \in_R \mathbb{Z}_q\) and random group elements \(h_i \in_R G\) for every \(1 \leq i \leq n\).
2. For each \(i\), set \((h_{i,0}, h_{i,1})\) as follows:
   - If \(\sigma_i = 0\), set \((h_{i,0}, h_{i,1}) = (g^{\alpha_i}, h_i)\).
   - If \(\sigma_i = 1\), set \((h_{i,0}, h_{i,1}) = (h_i, g^{\alpha_i})\).
3. Send the pairs \((h_{i,0}, h_{i,1})\) to S.

**Second Round (Sender):**
1. Choose a random element \(r \in_R \mathbb{Z}_q\) and compute \(u = g^r\).
2. For each pair \((h_{i,0}, h_{i,1})\):
   - Compute the keys: \(k_{i,0} = (h_{i,0})^r\) and \(k_{i,1} = (h_{i,1})^r\).
   - Compute the ciphertexts: \(v_{i,0} = x_{i,0} \oplus \text{KDF}(k_{i,0})\) and \(v_{i,1} = x_{i,1} \oplus \text{KDF}(k_{i,1})\).
3. Send \(u\) together with the \(n\) pairs \((v_{i,0}, v_{i,1})\) to R.

**Output Computation (Receiver):**
1. For each \(1 \leq i \leq n\):
   - Compute \(k_{\sigma_i} = u^{\alpha_i}\).
   - Compute \(x_{\sigma_i} = v_{\sigma_i} \oplus \text{KDF}(k_{\sigma_i})\).
2. R outputs \((x_{\sigma_1}, \ldots, x_{\sigma_n})\); S has no output.

#### Additional Optimization for Random OT

When constructing OT extensions (see ยง2.2), the parties first run \(\kappa \times \text{OT}^\kappa\) on random inputs. In this case, the sender only needs to send \(u = g^r\) to the receiver. The parties can then derive the values locally, reducing communication and making the protocol a single round. This optimization is particularly useful in high-latency networks.

#### Optimized General OT Extension

We optimize the \(m \times \text{OT}^\ell\) extension protocol of [32], described in ยง2.2. In the original protocol, R chooses a large \(m \times \kappa\) matrix \(T\), and the parties engage in \(\kappa \times \text{OT}^m\). Our main observation is that instead of choosing \(t_i\) randomly, we can set \(t_i = G(k_{i,0})\) and \(u_i = t_i \oplus G(k_{i,1})\). This reduces the communication complexity, especially when \(m\) is very large and \(\ell\) is short, such as in GMW.

**PROTOCOL 52 (General OT Extension Protocol)**

**Inputs:**
- **Sender (S):** \(m\) pairs \((x_{j,0}, x_{j,1})\) of \(\ell\)-bit strings, for every \(1 \leq j \leq m\).
- **Receiver (R):** Selection bits \(r = (r_1, \ldots, r_m)\).

**Initial OT Phase (Base OTs):**
1. S chooses a random string \(s = (s_1, \ldots, s_\kappa)\) and R chooses \(\kappa\) pairs of \(\kappa\)-bit seeds \((k_{i,0}, k_{i,1})\) for every \(1 \leq i \leq \kappa\).
2. The parties invoke the \(\kappa \times \text{OT}^\kappa\)-functionality, where S plays the receiver with input \(s\) and R plays the sender with inputs \((k_{i,0}, k_{i,1})\).
3. For each \(1 \leq i \leq \kappa\), let \(t_i = G(k_{i,0})\) and \(u_i = t_i \oplus G(k_{i,1})\). Let \(T = [t_1 | \ldots | t_\kappa]\) denote the \(m \times \kappa\) bit matrix, and let \(t_j\) denote the \(j\)-th row of \(T\).

**OT Extension Phase:**
1. R computes \(t_i = G(k_{i,0})\) and \(u_i = t_i \oplus G(k_{i,1})\) for every \(1 \leq i \leq \kappa\).
2. For each \(1 \leq i \leq \kappa\), S defines \(q_i = (s_i \cdot u_i) \oplus G(k_{i,s_i})\).

This optimization significantly reduces the communication complexity in applications where \(m\) is very large and \(\ell\) is short, such as in GMW. It also allows for continual OT extension with no a priori bound on \(m\), which is useful in secure computation settings.