当我们找到 start() 函数的时候，映入眼帘的实际上是一个很平坦的流程，我们简化一下，以下图代码为例：
我们仍然看到了 `conf` 中一些很奇怪的选项，针对这些选项我们在 0x01 节中强调过，可以在某一些地方找到这些选项的线索，我们以
`conf.direct` 为例，可以在 `lib.parse.cmdline` 中明确找到这个选项的说明：
根据说明，这是直连数据库的选项，所以我们可能暂时并不需要关心他，我们暂时只关注 sqlmap 是如何检测漏洞的，而不关心他是怎么样调用数据库相关操作的。
接下来稍有一些想法的读者当然知道，我们直接进行第四部分针对这个目标循环的分析是最简单有效的办法了！
好的，接下来我们就打开最核心的检测方法：
进入循环体之后，首先进行检查网络是否通断的选项，这个选项很容易理解我们就不多叙述了；确保网络正常之后，开始设置
`conf.url,conf.method,conf.data,conf.cookie` 和 headers 等字段，并且在
`parseTargetUrl()` 中进行各种合理性检查；之后会根据 HTTP 的 Method
提取需要检查的参数；随后如果当前启动时参数接受了多个目标的话，会在第4步中做一些初始化的工作。
在完成上述操作之后，执行 `setupTargetEnv()` 这个函数也是一个非常重要的函数，其包含如下操作：
    def setupTargetEnv():
        _createTargetDirs()
        _setRequestParams() 
        _setHashDB()
        _resumeHashDBValues()
        _setResultsFile()
        _setAuthCred()
其中除了 `setRequestParams()` 都是关于本身存储（缓存）扫描上下文和结果文件的。当然我们最关注的点肯定是
`setRequestParams()` 这个点。在深入了解这一个步骤之后，我们发现其中主要涉及到如下操作：
所以我们回归之前的 `start()` 方法中的 foreach targets 的循环体中，在 `setupTargetEnv()`
之后，我们现在已经知道了关于这个目标的所有的可以尝试注入测试的点都已经设置好了，并且都存在了 `conf.paramDict` 这个字典中了。
至此，在正式开始检测之前，我们已经知道，`conf.url, conf.method, conf.headers ...`
之类的包含基础的测试的目标的信息，在 `conf.paramDict` 中包含具体的不同位置的需要测试的参数的字典，可以方便随时渲染
Payload。关于其具体的行为，其实大可不必太过关心，因为我们其实并不需要具体的处理细节，这些细节应该是在我们遇到问题，或者遇到唔清楚的地方再跳出来在这些步骤中寻找，并且进行研究。
## 0x03 万事俱备
可以说在读者了解上面两节讲述的内容的时候，我们就可以正式探查真正的 SQL 注入检测时候 sqlmap 都坐上了什么。其实简单来说，需要经过下面步骤：
笔者通过对 `controller.py` 中的 `start()`
函数进行分析，得出了上面的流程图。在整个检测过程中，我们暂且不涉及细节；整个流程都是针对检查一个目标所要经历的步骤。
### checkWaf
在 `checkWaf()` 中，文档写明：`Reference: http://seclists.org/nmap-dev/2011/q2/att-1005/http-waf-detect.nse`，我们可以在这里发现他的原理出处，有兴趣的读者可以自行研究。在实际实现的过程中代码如下：
笔者在关键部分已经把标注和箭头写明，方便大家理解。我们发现 `payload` 这个变量是通过随机一个数字 + space + 一个特制
Payload（涉及到很多的关于敏感关键词，可以很容易触发 WAF 拦截）。
随即，sqlmap 会把 payload 插入该插入的位置：对于 GET 类的请求，sqlmap 会在之前的 query
语句后面加入一个新的参数，这个参数名通过 `randomStr()` 生成，参数的值就是经过处理的
Payload。如果有读者不理解，我们在这里可以举一个例子：
如果我们针对
    http://this.is.a.victim.com/article.php?id=1
这样的 URL 进行 Waf 的检查，sqlmap 会发起一个
    http://this.is.a.victim.com/article.php?id=1&mbjwe=2472%20AND%201%3D1%20UNION%20ALL%20SELECT%201%2CNULL%2C%27%3Cscript%3Ealert%28%22XSS%22%29%3C/script%3E%27%2Ctable_name%20FROM%20information_schema.tables%20WHERE%202%3E1--/%
    2A%2A/%3B%20EXEC%20xp_cmdshell%28%27cat%20../../../etc/passwd%27%29%23
的新的请求，这个请求会有很大概率触发 Waf 的反应，然后 sqlmap 通过判断返回页面和之前页面的 Page Ratio 来判断是否触发了 WAF。
### 我们似乎遇到一些问题
有心的读者可能发现，我们在上小节出现了一个神奇陌生的词 Page Ratio, 这个词其实在整个 sqlmap
中是非常重要的存在，我们之后会在后续的文章中详细介绍这部分理论。
## 0x04 然后呢
其实我们当然可以继续讲解每一个函数都做了什么，但是限于篇幅问题，我们可能要先暂停一下了；与此同时，我们本文的内容“基础流程”实际上已经介绍完了，并且引出了我们需要在下一篇文章介绍的概念之一“Page
Ratio”。
所以接下来我们可能要结束本文了，但是我更希望的是，每一个读者都能够尝试自己分析，自己去吃透 sqlmap 的细节。
## 0x05 结束语
感谢读者的耐心，在接下来的文章中，笔者将会更加深入介绍 sqlmap 最核心的算法和细节处理。