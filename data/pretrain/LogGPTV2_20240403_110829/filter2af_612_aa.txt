### 一、前言
在前一篇的蜜罐合约中，我们介绍并测试了部分由于继承等问题而搭建的蜜罐合约。蜜罐合约顾名思义，就是利用了受害者的投机想法，从而另普通用户自行进行转账的合约。在我们文章中演示的相关合约对owner友好，即普通用户很难从合约中获得利益，所以读者如果看到类似的合约请不要轻易的使用以太币进行尝试。
而本文中，我们在蜜罐合约之上分析由Solidity的结构体产生的漏洞，而此漏洞危害性极大，倘若合约开发不到位会导致owner的篡改，即普通用户的提权操作。
### 二、由合约漏洞而导致的蜜罐
#### 1 蜜罐合约介绍
  * 合约的地址为：[0xd1915A2bCC4B77794d64c4e483E43444193373Fa](https://etherscan.io/address/0xd1915A2bCC4B77794d64c4e483E43444193373Fa#code)
    pragma solidity ^0.4.19;
    /*
     * This is a distributed lottery that chooses random addresses as lucky addresses. If these
     * participate, they get the jackpot: 1.9 times the price of their bet.
     * Of course one address can only win once. The owner regularly reseeds the secret
     * seed of the contract (based on which the lucky addresses are chosen), so if you did not win,
     * just wait for a reseed and try again!
     *
     * Jackpot chance:   50%
     * Ticket price: Anything larger than (or equal to) 0.1 ETH
     * Jackpot size: 1.9 times the ticket price
     *
     * HOW TO PARTICIPATE: Just send any amount greater than (or equal to) 0.1 ETH to the contract's address
     * Keep in mind that your address can only win once
     *
     * If the contract doesn't have enough ETH to pay the jackpot, it sends the whole balance.
     *
     * Example: For each address, a random number is generated, either 0 or 1. This number is then compared
     * with the LuckyNumber - a constant 1. If they are equal, the contract will instantly send you the jackpot:
     * your bet multiplied by 1.9 (House edge of 0.1)
    */
    contract OpenAddressLottery{
        struct SeedComponents{
            uint component1;
            uint component2;
            uint component3;
            uint component4;
        }
        address owner; //address of the owner
        uint private secretSeed; //seed used to calculate number of an address
        uint private lastReseed; //last reseed - used to automatically reseed the contract every 1000 blocks
        uint LuckyNumber = 1; //if the number of an address equals 1, it wins
        mapping (address => bool) winner; //keeping track of addresses that have already won
        function OpenAddressLottery() {
            owner = msg.sender;
            reseed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp)); //generate a quality random seed
        }
        function participate() payable {
            if(msg.valuethis.balance) //if the balance isnt sufficient...
                    win=this.balance; //...send everything we've got
                msg.sender.transfer(win);
            }
            if(block.number-lastReseed>1000) //reseed if needed
                reseed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp)); //generate a quality random seed
        }
        function luckyNumberOfAddress(address addr) constant returns(uint n){
            // calculate the number of current address - 50% chance
            n = uint(keccak256(uint(addr), secretSeed)[0]) % 2; //mod 2 returns either 0 or 1
        }
        function reseed(SeedComponents components) internal {
            secretSeed = uint256(keccak256(
                components.component1,
                components.component2,
                components.component3,
                components.component4
            )); //hash the incoming parameters and use the hash to (re)initialize the seed
            lastReseed = block.number;
        }
        function kill() {
            require(msg.sender==owner);
            selfdestruct(msg.sender);
        }
        function forceReseed() { //reseed initiated by the owner - for testing purposes
            require(msg.sender==owner);
            SeedComponents s;
            s.component1 = uint(msg.sender);
            s.component2 = uint256(block.blockhash(block.number - 1));
            s.component3 = block.difficulty*(uint)(block.coinbase);
            s.component4 = tx.gasprice * 7;
            reseed(s); //reseed
        }
        function () payable { //if someone sends money without any function call, just assume he wanted to participate
            if(msg.value>=0.1 ether && msg.sender!=owner) //owner can't participate, he can only fund the jackpot
                participate();
        }
    }
下面我们简单的分析一下这个类彩票合约。
为何称这个合约为蜜罐合约么？我们根据合约内容可以知道，合约在起始时赋值`LuckyNumber`为1，而在参与函数中根据参与者的地址生成随机数`0 or
1`，之后如果为1，那么就返还value *
1.9的赌金。看似0.5的高概率，但是合约利用了一种以太坊的bug，从而导致用户永远不可能取到钱。下面请看我们的分析。
首先，合约定义了一个结构体。（我认为本来不需要结构体这样的类型来进行随机数的生成，所以我觉得这里的结构体是为了触发合约的漏洞）
    struct SeedComponents{
            uint component1;
            uint component2;
            uint component3;
            uint component4;
        }
之后定义了五个变量，分别代表合约的`owner、随机数种子、上一次的记录值、幸运数、竞猜获胜者集合`。
    address owner; //address of the owner
        uint private secretSeed; //seed used to calculate number of an address
        uint private lastReseed; //last reseed - used to automatically reseed the contract every 1000 blocks
        uint LuckyNumber = 1; //if the number of an address equals 1, it wins
        mapping (address => bool) winner; //keeping track of addresses that have already won
而下一个部分是构造函数。
    function OpenAddressLottery() {
            owner = msg.sender;
            reseed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp)); //generate a quality random seed
        }
构造函数将`owner`赋初值为合约创建者，之后调用`reseed`函数。而我们下面就看一看这个函数的作用。
    function reseed(SeedComponents components) internal {
            secretSeed = uint256(keccak256(
                components.component1,
                components.component2,
                components.component3,
                components.component4
            )); //hash the incoming parameters and use the hash to (re)initialize the seed
            lastReseed = block.number;
        }
在这个函数中，我们会传入`components`结构体，并使用`keccak256
()哈希函数`更新`secretSeed`的值，并初始化`lastReseed`。
也就是说，我们在构造函数中调用此函数来更新`secretSeed`的值。
之后，我们来看`participate()`，此函数是用户调用参与接口，用于竞猜的环节。
    function participate() payable {
            if(msg.valuethis.balance) //if the balance isnt sufficient...