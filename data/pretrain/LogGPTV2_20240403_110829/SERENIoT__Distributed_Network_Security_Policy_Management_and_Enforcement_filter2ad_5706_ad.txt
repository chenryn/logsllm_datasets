device chain. However, if the infected devices’ behavior is different,
they will be registered to a chain with similarly-infected devices.
Attacks against IoT devices during enforcement. Once the
Sentinel is in the enforcement phase (see Section 3.7), we differenti-
ate two types of attacks against the IoT devices. Attacks from the
local network and attacks from the internet.
Attacks from the local network will eventually succeed and com-
promise devices as Sentinels do not enforce any network filtering
on the local network. However, Sentinels will block any behavior
deviating from the specification trying to reach the internet. This
protects against compromised local IoT devices trying to attack
targets on the internet and restricts them to the strict behavior
listed in the specifications. Due to the open nature of its blockchain,
SERENIoT also provides new metrics allowing experts to monitor
the behavior of a large number of IoT devices in real time.
Attacks originating from a remote attacker targeting a specific
IoT model will be blocked by Sentinels as long as only a minority
of Sentinels observe the same attack pattern. Thus, these attacks
grow in difficulty with more Sentinels protecting more devices of
a specific model. For an attack to succeed, its network footprint
has to be similar on a majority of Sentinels (meaning that Sentinels
should record packets signatures with the same IP address). The
attacker also needs to target 51% of all devices in less than one
block-interval (the time interval between blocks). For popular IoT
devices, attacker unlikely have the resources to initiate an attack
targeting simultaneously a large number of devices from a single
host. Commonly, attackers rely botnets to carry massive attacks
against IoT devices. IoT botnets such as Mirai [5], Brickerbot [18]
and Hajime [14] share similar network footprints during the infec-
tion phase: they scan for listening telnet, ssh and http services and
try to bruteforce the credentials. However, the source IP addresses
of the attacker vary as botnets use infected devices to spread and
infect new hosts. The packet signatures of each botnet attack will
thus likely vary from one target to another as the IP and port used
by the attacking device will vary. By design, SERENIoT should
effectively block P2P botnets, particularly those having multiple
attackers. Because these signatures are not consistent across all
Sentinels, they are unlikely to be added to the allow list and the
attack will be blocked.
In both cases, unpopular devices are more prone to attacks be-
cause packets are filtered based on policies built from observations
from a smaller number of Sentinels. However using SERENIoT to
protect unpopular devices still provides a better protection than
using no protection as long as an attacker does not control more
than half of the Sentinels for a particular device.
Attacks on Sentinels. Sentinels act as both blockchain nodes and
network traffic enforcement points. Thus, if a Sentinel is compro-
mised, the attacker may insert or remove traffic rules arbitrarily16.
16This is not unlike the security of a firewall or router, which should typically be better
protected than internal hosts on the network.
551SERENIoT
ACSAC 2020, December 7–11, 2020, Austin, USA
However, attacking a specific node does not allow the inclusion
of malicious packet signatures into the blockchain, as these must
still be validated and confirmed by the majority of the nodes. SERE-
NIoT’s blockchains are vulnerable to two types of majority attacks.
• Majority attacks against the control chain can succeed if
an attacker has the computational capacity of more than
half of all Sentinels. This adversary can win every proof-
of-work round, allowing the inclusion of arbitrary packet
signatures into any device blockchain/allow list. This type
of attack is devastating to the network since allow lists are
shared amongst all Sentinels. We discuss alternative consen-
sus protocols to lower the probability of such an attack in
Section 6.1.
• Majority attacks against device chains can succeed if an
attacker controls more Sentinels than half of all Sentinels
registered on a specific device chain. This adversary will be
able to append blocks to these chains more often than legiti-
mate Sentinels which can result in incorporating malicious
blocks into the longest device chain. This attack grows in
difficulty with more Sentinels protecting the same device of
a specific model and contributing to its chain. For popular
IoT devices, with a large number of Sentinels registered on
their chain, this attack’s difficulty is similar to a majority
attack on the control chain.
5 LIMITATIONS
Our system currently only monitors LAN-to-WAN connections so
it does not protect IoT devices from other infected devices on the
local network. While this limitation allows P2P infection methods
to succeed on the local network, infected IoT devices will be unable
to attack remote hosts; Sentinels will block the outgoing traffic that
does not comply with the policy.
Our system is tailored to support IoT devices with a small net-
work footprint. It is unclear, however, how effective the system can
be in protecting IoT devices with more diverse network behavior.
An open question is whether any collaborative intrusion detection
system (ours included) can converge on a set of connections that
should be permitted. One strategy for complex devices is to make
the packet signature algorithm less specific, but this may have the
disadvantage of missing certain attacks.
In its current design, SERENIoT will block any user-defined
connection to remote servers (e.g., a cloud-based FTP server for
video stream backups). Connecting to user-defined endpoints will
typically be blocked because connections to these arbitrary servers
will not be observed amongst the broader population of Sentinels.
One option to permit user-defined servers to be allowed is to enable
a manual override in the user interface, allowing advanced users to
allow specific connections without impacting the distributed allow
list. We will explore adding this feature in future work.
Finally, like any collaborative system, performance (both accu-
racy and resilience to attack) improves with the deployment of each
additional node. By deploying more Sentinels, manipulating the
blockchain (and therefore the allow lists) requires more effort from
an attacker. Similarly, in the case of a small number of Sentinels,
the likelihood of an attack influencing the packet signatures that
get added to the allow list is higher.
6 DISCUSSION
6.1 Consensus
In our proof of concept, we used Proof of Work for its implementa-
tion simplicity and wide availability. However, we expect that most
Sentinels will be deployed on devices with limited computational
power such as small office and home routers. Since proof of work
relies on computationally intensive problems to secure the chain, an
attacker with large computing resources can easily overpower even
a large number of routers. To mitigate this, an alternative consensus
algorithm could be used. In addition to the consensus algorithms
mentioned in Section 2.2, two promising alternatives are proof of
elapsed time (PoET) [15] and robust round robin (RRR) [3]. These
algorithms both leverage Intel’s Safe Guard Extension (SGX) [16].
PoET has the same objective as proof of work: to randomly delay
block production so that it is evenly spread across the network
over time. To do so, nodes are required to run the code generat-
ing the delay inside Intel’s SGX to certify they effectively wait a
random time at each block production round. On the other hand,
RRR selects nodes alternately to distribute block production across
all participants. In RRR, node selection is based on elapsed time
since last block mined; the node that has not mined a block for
the longest time is selected. To join the network, nodes require a
unique identity provided by SGX. This ensures that each partici-
pant is unique, as it is not possible to generate multiple identities
with a single SGX chip. Unlike PoW, PoET and RRR do not require
heavy computational effort and thus are less energy consumptive.
However, these methods also have limitations: they are tied to a
given chip vendor and rely entirely on a third party platform to
work exposing them to vulnerabilities [11, 27, 34, 35].
6.2 Transparency and privacy
Blockchain systems, in particular those which are public tend to
elicit privacy concerns since the ledger is replicated across all par-
ticipants. By using SERENIoT, IoT device behaviour is published
into an immutable public data structure that can help users under-
stand the expected functionality of a device before it is purchased.
Auditors and regulators can use this information as well to inform
regulation of future devices. The disadvantage of this transparency
is that directly connected nodes can query each other for the avail-
ability of blocks corresponding to particular chain. Because Sen-
tinels only keep blocks for devices they are protecting, this could
allow an attacker who knows the mapping between a device and a
chain to learn the presence of specific devices on specific Sentinels.
We see two possible mitigations: (1) Sentinels could store a copy of
device-specific chains for devices they don’t protect, allowing them
to respond to block requests even if they do not protect the corre-
sponding device. This privacy improvement comes at the expense
of block storage. (2) Sentinels could throttle requests per source IP
address and exponentially increase the response delay for every
subsequent request from the same source.
6.3 Usability
Despite its complexity, SERENIoT can fully operate without any user
interaction to protect the vast majority of simple IoT devices. We
expect that this zero-configuration will encourage adoption even
552ACSAC 2020, December 7–11, 2020, Austin, USA
Corentin Thomasset and David Barrera
by non-expert users. However, in the event of software updates that
change the behaviour of an IoT device, the system will prevent new
functionality from working until the majority of Sentinels observe
the same behaviour on their devices. The research community has
not yet measured the speed of deployment of software updates on
IoT. Lack of updating may leave early adopters without the ability
to use the new features. One might argue that for security reasons,
waiting for the majority of devices to upgrade is safer, but some
users may want the latest features as soon as possible.
In future, we may add a manual override to allow expert users
to clear the currently learned behaviour of their device and treat
it as new after the update has been applied which will likely force
the device onto a different chain.
The system provides usability for regular users. It does not re-
quire any user interaction to work and will protect devices once
they are onboarded. For real world deployment, SERENIoT could
be deployed by ISPs on consumer gateways.
7 CONCLUSION
IoT devices in smart homes are often unnecessarily overprivileged,
increasing the risk of compromise and impact of attacks. This paper
explored leveraging blockchain technology to assist in determining
a strict specification of essential network behavior of IoT devices.
We presented SERENIoT as a proof of concept network policy man-
agement and enforcement system that can operate with little to no
user input. Our evaluation shows that the system is able to converge
on small network security policies for many simple consumer IoT
devices without requiring changes to firmware, software, or apps,
and without requiring vendor buy-in. The consensus algorithm
forces attackers to execute majority attacks to make changes to
those policies. While implementation and deployment challenges
remain, we hope that SERENIoT can be viewed as a first step toward
blockchain-based network security policy enforcement systems.
ACKNOWLEDGMENTS
We thank Jeremy Clark and the members of Catallaxy for insight-
ful discussions that helped shape the ideas in this paper. We also
thank José Fernandez for his support and guidance. We’d like to
thank François Labrèche, Chris Bellman and members of the se-
curity groups at Polytechnique Montréal and Carleton University
for their comments and suggestions on drafts of this paper. The
second author acknowledges support from the Natural Sciences
and Engineering Research Council of Canada (NSERC) through a
Discovery Grant.
REFERENCES
[1] 2018. Your smart fridge could be mining Bitcoins for criminals. CBC News. https:
//www.cbc.ca/news/technology/bitcoin-hacking-smart-devices-1.4728222
[2] 2020. Google denies Xiaomi access over security bug. BBC. https://www.bbc.
com/news/technology-50981993
[3] Mansoor Ahmed-Rengers and Kari Kostiainen. 2020. Don’t Mine, Wait in Line:
Fair and Efficient Blockchain Consensus with Robust Round Robin. arXiv preprint
arXiv:1804.07391v3 (2020).
[4] Omar Alrawi, Chaz Lever, Manos Antonakakis, and Fabian Monrose. 2019. SoK:
Security evaluation of home-based IoT deployments. In IEEE 40th Symposium on
Security and Privacy (S&P).
[5] Manos Antonakakis, Tim April, Michael Bailey, Matt Bernhard, Elie Bursztein,
Jaime Cochran, Zakir Durumeric, J Alex Halderman, Luca Invernizzi, Michalis
Kallitsis, et al. 2017. Understanding the Mirai Botnet. In 26th USENIX Security.
[6] Adam Back. 1997. A partial hash collision based postage scheme. http://www.
hashcash.org/papers/announce.txt
[7] David Barrera, Ian Molloy, and Heqing Huang. 2017. IDIoT: Securing the Internet
of Things like it’s 1994. arXiv preprint arXiv:1712.03623 (2017).
[8] Christian Cachin and Marko Vukolić. 2017. Blockchain Consensus Protocols in
the Wild. In 31st International Symposium on Distributed Computing.
[9] Earlence Fernandes, Jaeyeon Jung, and Atul Prakash. 2016. Security analysis
of emerging smart home applications. In IEEE 37th Symposium on Security and
Privacy (S&P).
[10] Tomer Golomb, Yisroel Mirsky, and Yuval Elovici. 2018. CIoTA: Collaborative
IoT anomaly detection via blockchain. arXiv preprint arXiv:1803.03807 (2018).
[11] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel, and Tilo Müller. 2017.
Cache attacks on Intel SGX. In 10th European Workshop on Systems Security.
[12] Sanket Goutam, William Enck, and Bradley Reaves. 2019. Hestia: Simple Least
Privilege Network Policies for Smart Homes. In 12th Conference on Security and
Privacy in Wireless and Mobile Networks (WiSec).
[13] Javid Habibi, Daniele Midi, Anand Mudgerikar, and Elisa Bertino. 2017. Heimdall:
Mitigating the internet of insecure things. IEEE Internet of Things Journal 4, 4
(2017), 968–978.
[14] Stephen Herwig, Katura Harvey, George Hughey, Richard Roberts, and Dave
Levin. 2019. Measurement and Analysis of Hajime, a Peer-to-peer IoT Botnet.. In
NDSS.
[15] Hyperledger. [n.d.]. PoET 1.0 Specification. https://sawtooth.hyperledger.org/
docs/core/releases/latest/architecture/poet.html
[16] Intel. [n.d.]. Software Guard Extensions. https://software.intel.com/en-us/sgx
[17] Ari Juels and John Brainard. 1999. Client Puzzles: A Cryptographic Defense
Against Connection Depletion Attacks. In NDSS.
https:
[18] Simon Kenin. 2017.
BrickerBot mod_plaintext Analysis.
//www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/brickerbot-
mod_plaintext-analysis/
[19] Aggelos Kiayias, Alexander Russell, Bernardo David, and Roman Oliynykov. 2017.
Ouroboros: A Provably Secure Proof-of-Stake Blockchain Protocol. In Springer
Advances in Cryptology (CRYPTO).
[20] Ayush Kumar and Teng Joon Lim. 2019. Early Detection of Mirai-Like IoT Bots
in Large-Scale Networks through Sub-sampled Packet Traffic Analysis. In Future
of Information and Communication Conference.
[21] Deepak Kumar, Kelly Shen, Benton Case, Deepali Garg, Galina Alperovich, Dmitry
Kuznetsov, Rajarshi Gupta, and Zakir Durumeric. 2019. All things considered:
An analysis of IoT devices on home networks. In 28th USENIX Security.
[22] Eliot Lear, Dan Romascanu, and Ralph Droms. 2019. Manufacturer Usage De-
scription Specification. Technical Report 8520. Internet Engineering Task Force.
https://tools.ietf.org/html/rfc8520
[23] Jon Matonis. 2014. The Bitcoin Mining Arms Race: GHash.io and the 51% Issue.
https://www.coindesk.com/bitcoin-mining-detente-ghash-io-51-issue
[24] Yair Meidan, Michael Bohadana, Yael Mathov, Yisroel Mirsky, Asaf Shabtai, Do-
minik Breitenbacher, and Yuval Elovici. 2018. N-BaIoT—Network-based detection
of IoT botnet attacks using deep autoencoders. IEEE Pervasive Computing 17, 3
(2018), 12–22.
[25] Diego M Mendez Mena and Baijian Yang. 2018. Blockchain-Based Whitelisting
for Consumer IoT Devices and Home Networks. In 19th Annual SIG Conference
on Information Technology Education.
[26] Markus Miettinen, Samuel Marchal, Ibbad Hafeez, N Asokan, Ahmad-Reza
Sadeghi, and Sasu Tarkoma. 2017. IoT Sentinel: Automated device-type identi-
fication for security enforcement IoT. In IEEE 37th International Conference on
Distributed Computing Systems (ICDCS).
[27] Kit Murdock, David Oswald, Flavio D. Garcia, Jo Van Bulck, Daniel Gruss, and
Frank Piessens. 2020. Plundervolt: Software-based Fault Injection Attacks against
Intel SGX. In IEEE 41st Symposium on Security and Privacy (S&P).
[28] Satoshi Nakamoto. 2008. Bitcoin: A peer-to-peer electronic cash system. (2008).
[29] Lily Hay Newman. 2018. An Elaborate Hack Shows How Much Damage IoT Bugs
Can Do. wired.com/story/elaborate-hack-shows-damage-iot-bugs-can-do/
[30] Ray and Michael Huebler. 2019. Moving from Hacking IoT Gadgets to Breaking
into One of Europe’s Highest Hotel Suites. Black Hat USA.
[31] Shahid Raza, Linus Wallgren, and Thiemo Voigt. 2013. SVELTE: Real-time intru-
sion detection in the Internet of Things. Ad hoc networks 11, 8 (2013), 2661–2674.
[32] Scott Ruoti, Ben Kaiser, Arkady Yerukhimovich, Jeremy Clark, and Robert Cun-
ningham. 2019. SoK: Blockchain Technology and Its Potential Use Cases. arXiv
preprint arXiv:1909.12454 (2019).
[33] Robin Sommer and Vern Paxson. 2010. Outside the closed world: On using
machine learning for network intrusion detection. In IEEE 31st Symposium on
Security and Privacy (S&P).
[34] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Thomas F Wenisch, Yuval Yarom, and Raoul Strackx.
2018. Foreshadow: Extracting the keys to the Intel SGX kingdom with transient
out-of-order execution. In 27th USENIX Security.
[35] Nico Weichbrodt, Anil Kurmus, Peter Pietzuch, and Rüdiger Kapitza. 2016. Async-
Shock: Exploiting synchronisation bugs in Intel SGX enclaves. In 21st European
Symposium on Research in Computer Security.
553SERENIoT
ACSAC 2020, December 7–11, 2020, Austin, USA
A APPENDICES
A.1 SERENIoT screenshots
Figure 10 shows the identification and rejection of a fork with anomalous packet signatures.
Figure 10: Rejected fork with anomalous packet signatures. The whitelist contains only packet signatures listed in the longest
chain.
Figures 11, 12 and 13 show screenshots of the Web UI during a simulation with 100 Sentinels.
Figure 11: Screenshot of the Network view of the Web UI.
554ACSAC 2020, December 7–11, 2020, Austin, USA
Corentin Thomasset and David Barrera
Figure 12: Screenshot of the Sentinel view of the Web UI.
Figure 13: Screenshot of the Blockchain view of the Web UI.
555