### Device Chain and Attack Mitigation

#### Device Chain Formation
When an infected device exhibits different behavior, it is registered to a chain with similarly-infected devices. This ensures that the behavior of these devices is grouped and managed effectively.

#### Attacks During Enforcement
Once the Sentinel system enters the enforcement phase (refer to Section 3.7), we differentiate two types of attacks against IoT devices: attacks from the local network and attacks from the internet.

- **Local Network Attacks**: These attacks will eventually succeed and compromise devices as Sentinels do not enforce any network filtering on the local network. However, Sentinels will block any behavior deviating from the specified norms when attempting to reach the internet. This protects against compromised local IoT devices trying to attack targets on the internet and restricts them to the strict behavior listed in the specifications. The open nature of the blockchain in SERENIoT also provides new metrics, allowing experts to monitor the behavior of a large number of IoT devices in real time.

- **Internet-Based Attacks**: Attacks originating from a remote attacker targeting a specific IoT model will be blocked by Sentinels as long as only a minority of Sentinels observe the same attack pattern. Thus, these attacks become more difficult with more Sentinels protecting more devices of a specific model. For an attack to succeed, its network footprint must be similar on a majority of Sentinels (meaning that Sentinels should record packets with the same IP address). The attacker also needs to target 51% of all devices within one block interval (the time interval between blocks). For popular IoT devices, attackers are unlikely to have the resources to initiate an attack targeting a large number of devices simultaneously from a single host. Commonly, attackers rely on botnets to carry out massive attacks against IoT devices. IoT botnets such as Mirai, Brickerbot, and Hajime share similar network footprints during the infection phase: they scan for listening telnet, ssh, and http services and try to brute-force the credentials. However, the source IP addresses of the attacker vary as botnets use infected devices to spread and infect new hosts. The packet signatures of each botnet attack will likely vary from one target to another as the IP and port used by the attacking device will differ. By design, SERENIoT should effectively block P2P botnets, particularly those with multiple attackers, because these signatures are not consistent across all Sentinels and are unlikely to be added to the allow list.

#### Unpopular Devices
Unpopular devices are more prone to attacks because packet filtering is based on policies built from observations from a smaller number of Sentinels. However, using SERENIoT to protect unpopular devices still provides better protection than using no protection, as long as an attacker does not control more than half of the Sentinels for a particular device.

#### Attacks on Sentinels
Sentinels act as both blockchain nodes and network traffic enforcement points. If a Sentinel is compromised, the attacker may insert or remove traffic rules arbitrarily. However, attacking a specific node does not allow the inclusion of malicious packet signatures into the blockchain, as these must still be validated and confirmed by the majority of the nodes. SERENIoT’s blockchains are vulnerable to two types of majority attacks:

- **Majority Attacks on the Control Chain**: These can succeed if an attacker has the computational capacity of more than half of all Sentinels. This adversary can win every proof-of-work round, allowing the inclusion of arbitrary packet signatures into any device blockchain/allow list. This type of attack is devastating to the network since allow lists are shared amongst all Sentinels. Alternative consensus protocols to lower the probability of such an attack are discussed in Section 6.1.

- **Majority Attacks on Device Chains**: These can succeed if an attacker controls more Sentinels than half of all Sentinels registered on a specific device chain. This adversary will be able to append blocks to these chains more often than legitimate Sentinels, which can result in incorporating malicious blocks into the longest device chain. This attack becomes more difficult with more Sentinels protecting the same device of a specific model and contributing to its chain. For popular IoT devices, with a large number of Sentinels registered on their chain, this attack’s difficulty is similar to a majority attack on the control chain.

### Limitations
- **LAN-to-WAN Monitoring**: Our system currently only monitors LAN-to-WAN connections, so it does not protect IoT devices from other infected devices on the local network. While this allows P2P infection methods to succeed on the local network, infected IoT devices will be unable to attack remote hosts; Sentinels will block the outgoing traffic that does not comply with the policy.
- **Diverse Network Behavior**: The system is tailored to support IoT devices with a small network footprint. It is unclear how effective the system can be in protecting IoT devices with more diverse network behavior. An open question is whether any collaborative intrusion detection system can converge on a set of connections that should be permitted. One strategy for complex devices is to make the packet signature algorithm less specific, but this may have the disadvantage of missing certain attacks.
- **User-Defined Connections**: In its current design, SERENIoT will block any user-defined connection to remote servers (e.g., a cloud-based FTP server for video stream backups). Connecting to user-defined endpoints will typically be blocked because connections to these arbitrary servers will not be observed amongst the broader population of Sentinels. One option to permit user-defined servers is to enable a manual override in the user interface, allowing advanced users to allow specific connections without impacting the distributed allow list. We will explore adding this feature in future work.
- **Performance and Resilience**: Like any collaborative system, performance (both accuracy and resilience to attack) improves with the deployment of each additional node. By deploying more Sentinels, manipulating the blockchain (and therefore the allow lists) requires more effort from an attacker. Similarly, in the case of a small number of Sentinels, the likelihood of an attack influencing the packet signatures that get added to the allow list is higher.

### Discussion
#### Consensus Algorithms
In our proof of concept, we used Proof of Work for its implementation simplicity and wide availability. However, most Sentinels will be deployed on devices with limited computational power such as small office and home routers. Since proof of work relies on computationally intensive problems to secure the chain, an attacker with large computing resources can easily overpower even a large number of routers. To mitigate this, alternative consensus algorithms could be used. Two promising alternatives are Proof of Elapsed Time (PoET) and Robust Round Robin (RRR). These algorithms leverage Intel’s Safe Guard Extension (SGX). PoET aims to randomly delay block production, while RRR selects nodes alternately to distribute block production. Unlike PoW, PoET and RRR do not require heavy computational effort and thus are less energy consumptive. However, these methods are tied to a given chip vendor and rely entirely on a third-party platform, exposing them to vulnerabilities.

#### Transparency and Privacy
Blockchain systems, especially public ones, tend to raise privacy concerns as the ledger is replicated across all participants. By using SERENIoT, IoT device behavior is published into an immutable public data structure, which can help users understand the expected functionality of a device before purchase. Auditors and regulators can also use this information to inform regulation of future devices. The disadvantage of this transparency is that directly connected nodes can query each other for the availability of blocks corresponding to particular chains. Because Sentinels only keep blocks for devices they are protecting, this could allow an attacker who knows the mapping between a device and a chain to learn the presence of specific devices on specific Sentinels. Possible mitigations include storing copies of device-specific chains for devices they don’t protect and throttling requests per source IP address.

#### Usability
Despite its complexity, SERENIoT can fully operate without any user interaction to protect the vast majority of simple IoT devices. This zero-configuration approach is expected to encourage adoption even by non-expert users. However, in the event of software updates that change the behavior of an IoT device, the system will prevent new functionality from working until the majority of Sentinels observe the same behavior on their devices. Future enhancements may include a manual override to allow expert users to clear the currently learned behavior of their device and treat it as new after the update has been applied, which will likely force the device onto a different chain.

### Conclusion
IoT devices in smart homes are often unnecessarily overprivileged, increasing the risk of compromise and the impact of attacks. This paper explored leveraging blockchain technology to assist in determining a strict specification of essential network behavior of IoT devices. We presented SERENIoT as a proof-of-concept network policy management and enforcement system that can operate with little to no user input. Our evaluation shows that the system is able to converge on small network security policies for many simple consumer IoT devices without requiring changes to firmware, software, or apps, and without requiring vendor buy-in. The consensus algorithm forces attackers to execute majority attacks to make changes to those policies. While implementation and deployment challenges remain, we hope that SERENIoT can be viewed as a first step toward blockchain-based network security policy enforcement systems.

### Acknowledgments
We thank Jeremy Clark and the members of Catallaxy for insightful discussions that helped shape the ideas in this paper. We also thank José Fernandez for his support and guidance. We’d like to thank François Labrèche, Chris Bellman, and members of the security groups at Polytechnique Montréal and Carleton University for their comments and suggestions on drafts of this paper. The second author acknowledges support from the Natural Sciences and Engineering Research Council of Canada (NSERC) through a Discovery Grant.

### References
[References are provided as in the original text.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.