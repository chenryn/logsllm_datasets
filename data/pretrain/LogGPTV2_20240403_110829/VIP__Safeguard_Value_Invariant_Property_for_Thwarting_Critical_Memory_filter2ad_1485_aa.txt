title:VIP: Safeguard Value Invariant Property for Thwarting Critical Memory
Corruption Attacks
author:Mohannad Ismail and
Jinwoo Yom and
Christopher Jelesnianski and
Yeongjin Jang and
Changwoo Min
VIP: Safeguard Value Invariant Property for
Thwarting Critical Memory Corruption Attacks
Mohannad Ismail*
Virginia Tech, USA
PI:EMAIL
Jinwoo Yom*†
Virginia Tech, USA
PI:EMAIL
Christopher Jelesnianski
Virginia Tech, USA
PI:EMAIL
Yeongjin Jang
Oregon State University, USA
PI:EMAIL
Changwoo Min
Virginia Tech, USA
PI:EMAIL
Abstract
Most modern software attacks are rooted in memory corruption
vulnerabilities, which are capable of altering security-sensitive data
(e.g., function pointers) to unintended values. This paper introduces
a new security property, the Value Invariant Property (VIP), and
HyperSpace, our prototype that enforces VIP on security-sensitive
data. HyperSpace safeguards the integrity of “data values” instead
of enforcing control/data flow, allowing for low runtime over-
head, yet defeating critical attacks effectively. We implement four
representative security policies including Control Flow Integrity
(VIP-CFI), Code Pointer Integrity (VIP-CPI), Virtual function Table
protection (VIP-VTPtr), and heap metadata protection based on
HyperSpace. We evaluate HyperSpace with SPEC CPU2006 bench-
marks and real-world applications (NGINX and PostgreSQL) and
test how HyperSpace defeats memory corruption-based attacks, in-
cluding three real-world exploits and six attacks that bypass existing
defenses (COOP, heap exploits, etc.). Our experimental evaluation
shows that HyperSpace successfully stops all these attacks with low
runtime overhead: 0.88% and 6.18% average performance overhead
for VIP-CFI and VIP-CPI, respectively, and overall approximately
13.18% memory overhead with VIP-CPI in SPEC CPU2006.
CCS Concepts
• Security and privacy → Software and application security;
Systems security.
Keywords
Memory corruption attack; Value Invariant Property
ACM Reference Format:
Mohannad Ismail*, Jinwoo Yom*†, Christopher Jelesnianski, Yeongjin
Jang, and Changwoo Min . 2021. VIP: Safeguard Value Invariant Property
for Thwarting Critical Memory Corruption Attacks. In Proceedings of the
2021 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New
York, NY, USA, 15 pages. https://doi.org/10.1145/3460120.3485376
*Co-first authors. †The author is currently in Qualcomm.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
Conference’17, July 2017, Washington, DC, USA
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3485376
1 Introduction
The foundation of most software stacks is written in unsafe lan-
guages such as C/C++. This jeopardizes not only the security of
programs written in those languages but also the security of pro-
grams written in modern type-safe languages, as the latter often
utilize libraries written in unsafe languages. This causes applica-
tions to be prone to memory corruption vulnerabilities.
Successful memory corruption attacks aim to modify the in-
tended value of security-sensitive data. For example, control-flow
hijacking attacks exploit memory corruption vulnerabilities to over-
write code pointers. In most cases, these targeted code pointers are
return addresses [4, 5, 67, 71], function pointers [9, 16, 24, 31], or
virtual function table pointers in C++ [64, 82]. Overwriting such val-
ues allows attackers to achieve arbitrary code execution. Similarly,
heap overflow attacks exploit memory corruption vulnerabilities
to overwrite heap metadata [3, 21, 22, 56, 69, 70, 81]. Tainting heap
metadata can mislead the memory allocator, allowing attackers to
either have arbitrary write or arbitrary code execution capabilities;
both are capabilities that can be considered critical security threats.
Memory-corruption Defense Landscape.
In response, many
defenses have been proposed to thwart memory corruption-based
attacks. However, they suffer from high runtime overhead, or they
are imprecise and thus susceptible to attacks.
Full memory safety enforcement techniques [49, 65, 85] prevent
memory corruption attacks by enforcing spatial and temporal mem-
ory safety. However, these approaches fall short in practicality due
to high runtime performance and memory overhead. For example,
a state-of-the-art system BOGO [85] has 60% runtime overhead and
36% memory overhead.
Control-flow integrity (CFI) techniques [1, 6, 12, 18, 29, 34–
36, 42, 47, 54, 55, 59, 61, 74, 77, 79, 80, 83, 84] provide control data
protection by enforcing the integrity of expected control flows based
on a program’s control-flow graph (CFG). However, CFI techniques
struggle to balance precision and runtime overhead in their control
flow enforcement. Numerous efficient CFI proposals suffer from a
large equivalence class (EC) [41], which is a set of indistinguishable
code targets for each indirect transfer due to the imprecise control
flow analysis. In this case, CFI cannot accurately detect an illegally
bent control transfer for a given EC [9, 24, 64]. Recent work [36] at-
tempts to address this inherent problem by enforcing a unique code
target (UCT) property (i.e., EC = 1). However, this technique suffers
from scalability, thus inhibiting wide adoption because it requires
background threads to process Intel PT packets, and dedicating a
CPU core for analysis.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1612Code-pointer integrity (CPI) [45] protects all code pointers (re-
cursively) in a program. Similar to CFI, CPI defends against con-
trol data attacks. CPI protects code pointers via isolation relying
on information hiding; however, attacks against information hid-
ing [23, 32, 57] can break this security guarantee. Furthermore, CPI
has a high memory overhead (105% on average) to keep track of
metadata for all sensitive pointers.
Data-flow integrity (DFI) [11, 72, 73] prevents both control and
non-control data attacks. DFI ensures that the data flow at runtime
does not deviate from a statically computed data flow graph (DFG).
DFI is a generic defense with broad coverage but suffers from high
runtime overhead due to frequent instrumentation of all load and
store instructions for data-flow tracking. It has a 104% performance
overhead and a 50% memory overhead on average.
Goal. Under this circumstance, we set our goal to provide a defense
mechanism that strikes balance between efficiency and effective-
ness. In particular, we focus on thwarting two critical classes of
memory corruption attacks, namely control-flow hijacking and
heap metadata corruption attacks, both of which let attackers
achieve arbitrary code execution. These two attacks are very popu-
lar and commonly exploited [13], making them a valuable target to
defend against. By focusing on these two critical attacks, we aim to
provide a pragmatic memory security defense that is both efficient
and effective.
Value Invariant Property. To this end, we propose the Value
Invariant Property (VIP), a new security policy that thwarts these
two attacks. VIP does this by enforcing the integrity of data values
for security-sensitive data (e.g., function pointers for an indirect call,
virtual function table pointers in C++ objects, and heap metadata).
VIP prevents software from accepting maliciously altered security-
sensitive data via memory corruption attacks. VIP achieves this
by capitalizing on the life cycle of security-sensitive data; security-
sensitive data should only be altered by legitimate updates so it
should be immutable between two legitimate updates. We call this
its value invariant period. This write-protection approach is similar
to WIT [2]. WIT assigns a color to each object and each write
instruction so that all objects written by a given instruction are
a specific color. However, WIT suffers from information hiding
limitations of its color table. VIP makes data immutable during this
life cycle period, by having a secure copy of security-sensitive data,
which is immutable to memory corruption attacks.
HyperSpace. We realize VIP as HyperSpace, our prototype de-
fense mechanism that applies VIP to thwart critical memory cor-
ruption attacks while maintaining low runtime overhead and mini-
mal additional hardware resources. HyperSpace records values of
security-sensitive data into a safe memory region and validates val-
ues before use to enforce value integrity. The safe memory region
is protected by Intel Memory Protection Keys (MPK) [39, 43, 60],
an efficient per-thread memory protection mechanism.
HyperSpace enforces VIP to thwart control-flow hijacking and
heap metadata corruption attacks. We implement four state-of-the-
art security mechanisms with HyperSpace: 1) control-flow integrity
(VIP-CFI), 3) code pointer integrity (VIP-CPI), 2) virtual function
table pointer protection for C++ objects (VIP-VTPtr), and 4) inline
heap metadata protection. For the pointer protection mechanisms
(1-3), we design a compiler pass that automatically instruments code
pointers and sensitive data pointers to protect VIP. This is similar
to the protection scope offered by other protection mechanisms
such as CPI [45]. However, HyperSpace goes one step further by
supporting heap metadata protection, which is an additional source
of many sophisticated attacks. Our choice of protecting against
both control-flow hijacking and heap metadata corruption is to
demonstrate that VIP is capable of protecting not only sensitive
code pointers but also other sensitive data types.
In addition, we propose optimization techniques to significantly
lower the runtime overhead via reducing: the cost of each VIP pro-
tection instrumentation, the number of pointers to protect, and the
number of costly permission changes needed for the safe memory
region.
To summarize, our contributions include:
We evaluate HyperSpace using standard benchmarks (all C/C++
benchmarks in SPEC CPU2006) and real-world applications (NG-
INX web server and PostgreSQL database server). In addition, we
test HyperSpace against three real-world exploits and six synthe-
sized attacks that include: virtual function pointer table hijacking
attacks, a COOP attack [64], and a heap exploit, demonstrating
the effectiveness of HyperSpace. We detail how these attacks are
successfully detected and blocked by HyperSpace when an attempt
of corrupted sensitive data usage is detected. HyperSpace incurs
a small performance and memory overhead even when programs
are armored with HyperSpace’s strongest defense, VIP-CPI, which
guarantees the full integrity of all security-sensitive pointers.
• We propose a new security policy: by protecting the Value Invari-
ant Property (VIP) of security-sensitive data, we can effectively
mitigate critical memory corruption attacks.
• We built HyperSpace, a full prototype of the defense mechanism
that enforces the integrity of VIP for security-sensitive data in a
program. We implemented four state-of-the-art security mech-
anisms as HyperSpace use-cases to demonstrate how VIP and
HyperSpace can be used for protecting sensitive code/data point-
ers and heap metadata. We also design HyperSpace to prevent
attacks originating from malicious MPK use in userspace [14].
• We devised novel compiler optimization techniques that signifi-
cantly reduce the runtime overhead of HyperSpace instrumen-
tation and make HyperSpace a practical, deployable defense.
• We evaluate HyperSpace and its security mechanisms on bench-
marks, real-world applications, and synthesized attacks. Our re-
sults show that HyperSpace can defeat control-flow hijacking
and heap overflow attacks with an average of 6.18% performance
overhead and 13.18% memory overhead in SPEC CPU2006.
• We make our source code of HyperSpace publicly available at
https://github.com/cosmoss-vt/vip.
2 Background and Motivation
In this section, we describe our target attack classes that VIP
and HyperSpace aim to defend. We particularly focus on two of
the most critical memory corruption attacks – 1) control-flow hi-
jacking attacks caused by code/data pointer corruption and 2) heap
metadata corruption attacks – because they are the main avenue to
achieve arbitrary code execution (ACE) and arbitrary memory write,
which let attackers take full control of a system. We note that secu-
rity vulnerabilities and Common Vulnerability Exposures (CVEs)
that allow arbitrary code execution are rated between 7.5 (high)
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1613if (uid1) return; // only allows uid == 0 or 1
func = arr[uid]; // func pointer assignment, either X or Y.
(*func)(buf); // func is corrupted!
strcpy(buf, input); // stack overflow corrupting a code pointer!!!
FP func; // control data to be corrupted!
char buf[20]; // buffer that may overflow
21 /** == An example of a heap metadata corruption attack == */
22 // allocate 3 heap objects
23 A = malloc(100);
24 B = malloc(100);
25 C = malloc(100);
26 // frees object B
27 free(B); // Heap status: [ A ] [
28
29 // a heap buffer overflow vulnerability
30 strcpy(A, input); // heap overflow corrupting metadata!!!
31
// Heap status: [ A ] [ corrupted metadata ] [ C ]
32 ... // arbitrary allocation attack of D
33 B = malloc(100); // corrupted metadata poisons tcache
34 D = malloc(100); // may result in arbitrary allocation for D
35 ... // overlapping allocation attack of D
36 free(C); // unlink based on the corrupted metadata
37 D = malloc(100); // may result in overlapping allocation for D
38 ...
39 // Overlapping/arbitrary allocation enables arbitrary memory write here
40 fgets(D, 100, stdin) // END
1 /** == An example of a code pointer corruption attack ========= */
2 void X(char *); void Y(char *); void Z(char *);
3
4 typedef void (*FP)(char *);
5 static const FP arr[2] = {&X, &Y};
6
7 void handle_req(int uid, char * input) {
8
9
10
11
12
13
14
15
16
17
18
19 }
20 // END
Figure 1: Two examples of vulnerable C code. Attackers can overwrite security-sensitive data by exploiting memory corruption vulnerabilities
to subvert a program’s control-flow or change a program’s intended behavior. On the left, an attacker exploits a stack overflow (strcpy() at
Line 15), which overwrites a function pointer (func) to subvert control-flow (e.g., arbitrary code execution at Line 17). On the right, an attacker
exploits a heap overflow (Line 30), which overwrites the heap metadata to control subsequent memory allocations (Line 37), which can be a
primitive for other attacks – e.g., arbitrary memory write at Line 40.
and 9.8 (critical) regarding their security impact [25, 26]. Then, we
present our analysis of two example vulnerabilities in Figure 1 and
patternize common characteristics of these attack classes. In par-
ticular, we define the notion of security-sensitive data, whose value
changes are critical to successful memory corruption. Subsequently,
we identify the Value Invariant Property as the key characteristic to