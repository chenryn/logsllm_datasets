multiplicative subgroups of order 2α for α ≥ 40 by a suitable
condition on the parameter of the BLS family.7
Next we use the Cocks–Pinch method to pick a pairing-
friendly elliptic curve E2 = ECP over a ﬁeld Fq such that the
curve group ECP(Fq) contains a subgroup of prime order p
(the size of EBLS’s base ﬁeld). Since the method outputs a
prime q that has about 2× more bits than the desired p, and in
turn p has about 1.5× more bits than r (due to properties of
the BLS family), we only need ECP to have embedding degree
6 in order to achieve 128 bits of security [FST10].
In sum, a SNARK over EBLS is used to generate proofs of
predicates’ satisﬁability; after that a zkSNARK over ECP is
used to generate proofs that these predicate proofs are valid
(along with the remaining NP statement’s checks). Because
the two curves have “matching” ﬁelds, proofs over EBLS are
eﬃciently veriﬁable.
Problem 3: Cocks–Pinch curves are costly. While the curve
ECP was chosen to facilitate eﬃcient checking of proofs over
EBLS, the curve ECP is at least 2× more expensive (in time and
space) than EBLS simply because ECP’s base ﬁeld is 2× larger
than EBLS’s base ﬁeld. Checks in the NP relation Re that are
not directly related to proof checking are now unnecessarily
performed on a less eﬃcient curve.
Solution 3: split relations across two curves. We split Re
into two NP relations RBLS and RCP, with the latter containing
just the proof check and the former containing all other checks
7We achieve this by choosing the parameter x of the BLS family to satisfy
x ≡ 1 mod 3 · 2α; indeed, for such a choice of x both r(x) = x4 − x2 + 1
and p(x) = (x − 1)2r(x)/3 + x are divisible by 2α. This also ensures that
x ≡ 1 mod 3, which ensures that there are eﬃcient towering options for the
relevant ﬁelds [Cos12].
(see the full version for details on these). We can then use a
zkSNARK over the curve EBLS (an eﬃcient curve) to produce
proofs for RBLS, and a zkSNARK over ECP (the less eﬃcient
curve) to produce proofs for RCP. This approach signiﬁcantly
reduces the running time of DPC.Execute (producing proofs
for the checks in RBLS is more eﬃcient over EBLS than over
ECP), at the expense of a modest increase in transaction size
(a transaction now includes a zkSNARK proof over EBLS in
addition to a proof over ECP). An important technicality that
must be addressed is that the foregoing split relies on certain
secret information to be shared across the NP relations, namely,
the identities of relevant predicates and the local data.
Problem 4: the NP relations have many checks. Even
using ECP only for SNARK veriﬁcation and EBLS for all other
checks does not suﬃce: the NP relations RBLS and RCP still
have to perform expensive checks like verifying Merkle tree
authentication paths and commitment openings, and evaluating
pseudorandom functions and collision resistant functions.
Similar NP relations, like the one in Zerocash [BCG+14],
require upwards of four million gates to express such checks,
resulting in high latencies for producing transactions and large
public parameters for the system.
Solution 4: eﬃcient EC primitives. Commitments and
collision-resistant hashing can be expressed as very eﬃcient
arithmetic circuits if one opts for Pedersen-type constructions
over suitable Edwards elliptic curves (and techniques derived
from these ideas are now part of deployed systems [HBH+18]).
To do this, we pick two Edwards curves, EEd/BLS over the ﬁeld
Fr (matching the group order of EBLS) and EEd/CP over the
ﬁeld Fp (matching the group order of ECP). This enables us
to achieve very eﬃcient circuits for primitives used in our NP
relations, including commitments, collision-resistant hashing,
and randomizable signatures. (Note that EEd/BLS and EEd/CP
do not need to be pairing-friendly as the primitives only rely
on their group structure.) Overall, we obtain highly optimized
realizations of all checks in Fig. 5.
A note on deploying Zexe with trusted setup.
DPC
schemes include a setup algorithm that speciﬁes how to sample
public parameters for the scheme. The setup algorithm in our
DPC construction (see Section III-B) simply consists of running
the setup algorithms for the various cryptographic building
blocks that we rely on (like NIZKs). However, this can be a
challenge for deployment because the entity performing the
setup may be able to break certain security properties of the
scheme by acting maliciously.
While one can mitigate this by using primitives that have
a transparent setup (one that uses only public randomness),
the eﬃciency considerations mentioned above drive our imple-
mented system to use pairing-based zkSNARKs whose setup is
not transparent (all other primitives we use are transparent). We
thus discuss below how to perform this setup when deploying
our implemented system.
Recall that prior zkSNARK deployments have used secure
multiparty computation [BCG+15; Zcab; BGM17; BGG18],
so that the sampled public parameters are secure as long as
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
955
even a single participating party is honest. One can use this
technique to sample “master” parameters for SNARKs for the
NP relations RBLS and RCP. Since these public parameters do
not depend on any user-deﬁned functions, they can be sampled
once and for all regardless of which applications will run over
the system. Note that these public parameters must be trusted by
everyone, because if they were compromised then the security
(but not privacy) of all applications running over the system
would be compromised as well.
In addition to these “master” parameters, application devel-
opers must also sample “application” parameters. These are
the parameters corresponding to the predicates comprising an
application. Unlike “master” parameters, “application” parame-
ters can be sampled as applications are developed and deployed.
Furthermore, users only need to trust the parameters needed by
applications that the user cares about; compromised parameters
for other applications will not aﬀect (the security and privacy
of) the user’s applications.
Very recent works [MBK+19; CFQ19; CHM+19; GWC19]
have proposed pairing-based SNARKs that have a universal
setup that can be used for any circuit. Once such SNARK
constructions mature into eﬃcient implementations, our system
can be easily modiﬁed to use these instead of [GM17] to
mitigate the above concerns, as both our construction and
implementation make use of the underlying SNARKs in a
modular manner.
V. Applications
We describe example applications of DPC schemes by
showing how to “program” these within the records nano-kernel.
We focus on ﬁnancial applications of smart contract systems
as these are not only popular, but also demand strong privacy.
We begin in Section V-A by describing how to enable users to
privately create and transact with custom user-deﬁned assets
(expanding on Example III.1). We then describe in Section V-B
how to realize private DEXs, which enable users to privately
trade these assets while retaining custody of the same. These
descriptions are a high-level sketch; further details are available
in the full version.
A. User-deﬁned assets
One of the most basic applications of smart contract systems
like Ethereum is the construction of assets (or tokens) that can
be used for ﬁnancial applications. For example, the Ethereum
ERC20 speciﬁcation [VB15] deﬁnes a general framework
for such assets. These assets have two phases: asset minting
(creation), and asset conservation (expenditure). We show below
how to express such custom assets via the records nano-kernel.
We consider records whose payloads encode: an asset
identiﬁer id, the initial asset supply v, a value v, and application-
dependent data c (we will use this in Section V-B). We
ﬁx the birth predicate in all such records to be a mint-or-
conserve function MoC that is responsible for asset minting
and conservation. In more detail, the birth predicate MoC can
be invoked in two modes, mint mode or conserve mode.
When invoked in mint mode, MoC creates the initial supply
v of the asset in a single output record by deterministically
deriving a fresh, globally-unique identiﬁer id for the asset,
and storing the tuple (id, v, v,⊥) in the record’s payload.
The predicate MoC also ensures that in the given transaction
contains no other non-dummy input or output records. If MoC
is invoked in mint mode in a diﬀerent transaction, a diﬀerent
identiﬁer id is created, ensuring that multiple assets can be
distinguished even though anyone can use MoC as the birth
predicate of a record.
When invoked in conserve mode, MoC inspects all records in
a transaction whose birth predicates all equal MoC (i.e., all the
transaction’s user-deﬁned assets) and whose asset identiﬁers all
equal to the identiﬁer of the current record. For these records
it ensures that no new value is created: that is, the sum of the
value across all output records is less than or equal to the sum
of the value in all input records.
The full version contains pseudocode for MoC.
B. Decentralized exchanges
We describe how to use death predicates that enforce custom-
access policies to build privacy-preserving decentralized ex-
changes, which allow users to exchange custom assets with
strong privacy guarantees while retaining full custody of these
assets. We proceed by ﬁrst providing background on centralized
and decentralized exchanges. Then, we formulate desirable
privacy properties for decentralized exchanges. Finally, we
describe constructions that achieve these properties.
Motivation. Exchanging digital assets is a compelling use case
of ledger-based systems. A straightforward method to exchange
such assets is via a centralized exchange: users entrust the
exchange with custody of their assets via an on-chain transaction
so that subsequent trades require only oﬀ-chain modiﬁcations in
the exchange’s internal database. To “exit”, users can request an
on-chain transaction that transfers their assets from the exchange
to the user. Examples of such exchanges include Coinbase [Coi]
and Binance [Bin]. This centralized architecture is eﬃcient,
because trades are recorded only in the exchange’s oﬀ-chain
database, and relatively private, because only the exchange
knows the details of individual trades. However, it also has
a serious drawback: having given up custody of their assets,
users are exposed to the risk of security breaches and fraud
by the exchange [PA14; De18; Zha18; Cim18].
In light of this, decentralized exchanges (DEXs) have been
proposed as an alternative means of exchanging assets that
enable users to retain custody of their assets. However, existing
DEX constructions have poor eﬃciency and privacy guarantees.
Below we describe how we can provide strong privacy for DEXs
(and leave improving the eﬃciency of DEXs to future work).
DEX architectures. There are diﬀerent DEX architectures
with diﬀerent trade-oﬀs; see [Pro18] for a survey. In the
following, we consider DEX architectures where the exchange
has no state or maintains its state oﬀ-chain.8 Here we focus on
8This is in contrast to DEX architectures that involve, say, a smart contract
that stores on-chain the standing orders of all users.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
956
one such category of DEXs, namely intent-based DEXs; we
discuss other kinds of DEXs in the full version.
In intent-based DEXs, the DEX maintains an index, which
is a table where makers publish their intention to trade (say,
a particular asset pair) without committing any assets. A
taker interested in a maker’s intention to trade can directly
communicate with the maker to agree on terms. They can jointly
produce a transaction for the trade, to be broadcast for on-chain
processing. An example of such a DEX is AirSwap [Air]. An
attractive feature of intent-based DEXs is that they reduce
exposure to front-running because the information required for
front-running (like prices or identities of the involved parties)
has been ﬁnalized by the time the transaction representing the
trade is broadcast for processing.
Privacy shortcomings and goals. While the foregoing
DEX architecture oﬀers attractive security and functionality,
it does not provide strong privacy guarantees. First, each
transaction reveals information about the corresponding trade,
such as the assets and amounts that were exchanged. Prior
work [BDJ+17; BBD+17; EMC19; DGK+19] shows that such
leakage enables front-running that harms user experience and
market transparency, and proposes mitigations that, while
potentially useful, do not provide strong privacy guarantees.
Even if one manages to hide these trade details, transactions in
existing DEXs also reveal the identities of transacting parties.
Onlookers can use this information to extract trading patterns
and frequencies of users. This reduces the privacy of users,
violates the fungibility of assets, and increases exposure to
front-running, because onlookers can use these patterns to infer
when particular assets are being traded.
These shortcomings motivate the following privacy goals
for DEXs. Throughout, we assume that an order is deﬁned by
the pair of assets to be exchanged, and their exchange rates.
1) Trade conﬁdentiality: No eﬃcient adversary A should be
able to learn the trade details (i.e., the asset pairs or amounts
involved) of completed or cancelled trades.
2) Trade anonymity: No eﬃcient adversary A should be able
to learn the identities of the maker and taker.
that achieves trade conﬁdentiality and trade
A protocol
anonymity against an adversary A is secure against front-
running by A. We now describe how to construct an intent-
based DEX that achieves trade conﬁdentiality and anonymity.9
Record format.
Recall from Section V-A that records
representing units of an asset have payloads of the form
(id, v, v, c), where id is the asset identiﬁer, v is the initial
asset supply, v is the asset amount, and c is arbitrary auxiliary
information. In the following, we use records that, in addition
to the mint-or-conserve birth predicate MoC, have an exchange-
or-cancel death predicate EoC. Informally, EoC allows a record
(cid:3) units of an
r to be consumed either by exchanging it for v
asset with birth predicate Φ(cid:3)
b and v
b and identiﬁer id(cid:3) (id(cid:3), Φ(cid:3)
(cid:3)
9Throughout, we assume that users interact with index operators via
anonymous channels. (If this is not the case, operators can use network
information to link users across diﬀerent
interactions regardless of any
cryptographic solutions used.).
M
are speciﬁed in c), or by “cancelling” the exchange and instead
sending new records with r’s asset identiﬁer to an address
apk(cid:3) (also speciﬁed in c). The information required for the
exchange includes the asset’s birth predicate in addition to its
identiﬁer, as it enables users to interact with assets that have
birth predicate diﬀerent from MoC. See the full version for
detailed pseudocode for EoC.
Private intent-based DEXs. We describe an intent-based
DEX that hides all information about an order and the involved
parties:
1) A maker M can publish to the index an intention to trade,
which is a tuple (idA, idB, pk
) to be interpreted as: “I
want to buy assets with identiﬁer idB in exchange for assets
with identiﬁer idA. Please contact me using the encryption
public key pk
M if you would like to discuss the terms.”
2) A taker T who is interested in this oﬀer can use pk
M to
privately communicate with M and agree on the terms of
the trade (the form of communication is irrelevant). Suppose
that T and M agree that T will give 10 units of asset idB
to M and will receive 5 units of asset idA from M.
3) The taker T creates a new record r with payload
(idB, vB, 10, c) for auxiliary data c = (idA, 5, apk
), and
with death predicate EoC. Then T sends r (along with the
information necessary to redeem r) to M.
4) If M has a record worth 5 units of asset idA, she can use
T’s message to construct a DPC transaction that consumes r
and produces appropriate new records for M and T, thereby
completing the exchange.
new
The record r produced by the taker T can be redeemed by
M only via an appropriate record in exchange. If M does not
possess such a record, T can cancel the trade (at any time)
and retrieve his funds by satisfying the “cancel” branch of
the predicate EoC (which requires knowing the secret key
corresponding to apk
Note that regardless of whether the trade was successful
or not,
this protocol achieves trade anonymity and trade
conﬁdentiality against all parties (including the index operator).
Indeed, the only information revealed in the ﬁnal transaction
is that some records were consumed and others created; no
information is revealed about M, T, the assets involved in the
trade (idA and idB), or the amounts exchanged.
new).
VI. System implementation
We now summarize our implementation of DPC schemes in
our system named named Zexe (Zero knowledge EXEcution).10
Zexe follows the strategy described in Section IV, and consists
of several Rust libraries: (a) a library for ﬁnite ﬁeld and
elliptic curve arithmetic, adapted from [Bow17b]; (b) a library
for cryptographic building blocks, including zkSNARKs for
constraint systems (using components from [Bow17a]); (c) a
library with constraints for many of these building blocks;
and (d) a library that realizes our DPC construction. Our
codebase, like our construction, is written in terms of abstract
building blocks, which allows to easily switch between diﬀerent
10The code is available at https://github.com/scipr-lab/zexe.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:02:38 UTC from IEEE Xplore.  Restrictions apply. 
957
instantiations of the building blocks. In the rest of this section
we describe the eﬃcient instantiations used in the experiments
reported in Section VII.
libzexe
constraints for building blocks
zkSNARK
cryptographic building
blocks
algebra
Fig. 6: Stack of libraries comprising Zexe.
Pseudorandom function. Fixing key length and input length
at 256 bits, we instantiate PRF using the Blake2s hash function
[ANW+13]: PRFk(x) := b2s(k(cid:4)x) for k, x ∈ {0, 1}256.
Elliptic curves. Our implementation strategy (see Section IV)
involves several elliptic curves: two pairing-friendly curves
EBLS and ECP, and two “plain” curves EEd/BLS and EEd/CP
whose base ﬁeld respectively matches the prime-order subgroup
of EBLS and ECP. Details about these curves are in Fig. 7;