---
## Page 211
单件模式
巧克力工厂
大家都知道，现代化的巧克力工厂具备计算机控制的巧克力锅炉。锅炉做的事，就
是把巧克力和牛奶融在一起，然后送到下一个阶段，以制造成巧克力棒。
这里有一个Choc-O-Holic公司的工业强度巧克力锅炉控制器。看看它的代码，你会
发现代码写得相当小心，他们在努力防止不好的事情发生。例如：排出500加仑的
未煮沸的混合物，或者锅炉已经满了还继续放原料，或者锅炉内还没放原料就开始
空烧。
public class ChocolateBoiler {
private boolean empty:
private boolean boiled;
代码开始时，
public ChocolateBoiler()
锅炉是空的。
empty = true;
boiled = false;
在锅炉内填入原科时，锅炉必
须是空的。一旦续入原科，就
public void fil1(){
托empty和6oiled标志设置好。
if (isEmpty（））(
empty = false;
boiled - false;
//在锅炉内填满巧克力和牛奶的混合物
锅炉排出时，必须是满的（不可以
public void drain()(
V
是空的）而且是责过的。排出完毕
if (!isEmpty()&& isBoiled () )(
后，把empty标志设回true。
//排出煮沸的巧克力和牛奶
empty = true;
煮混合物时，锅炉必须是满
public void boil() (
的，并且是没有妻过的。
if (!isEmpty()&&!isBoiled())(
旦麦沸后，就把boiled标志设
//将炉内物煮沸
为ttae。
boiled = true;
public boolean isEmpty()(
return empty;
1
public boolean isBoiled(){
return boiled;
你现在的位置
175
---
## Page 212
巧克力锅炉单件
BRAIN
POWER
Choc-O-Holic公司在有意识地防止不好的事情发生，你不这么认为吗？你可能会担心，
如果同时存在两个ChocolateBoiler（巧克力锅炉）实例，可能将发生很糟糕的事情。
万一同时有多于一个的ChocolateBoiler（巧克力锅炉）实例存在，可能发生哪些很糟糕的
事呢？
enci
请帮Choc-O-Holic改进ChocolateBoiler类，把这个类设计
成单件。
public class ChocolateBoiler {
private boolean empty;
private boolean boiled;
ChocolateBoiler()(
empty = true;
boiled = false;
public void fill()
if (isEmpty()){
empty = false;
boiled = false;
//在锅炉内填充巧克力和牛奶的混合物
PD
//
其他的部分省略不列出来
176
第5章
---
## Page 213
单件模式
定义单件模式
现在你脑海中已经有了单件的经典实现，该是坐下来享受一条巧
克力棒，并细细品味单件模式的时候了。
先看看单件模式的简要定义：
单件模式确保一个类只有一个实例，并提供一个全
局访问点。
这定义一点儿都不让人吃惊，但是让我们更深入一点儿：
■到底怎么回事？我们正在把某个类设计成自已管理的一个单独实例，同
时也避免其他类再自行产生实例。要想取得单件实例，通过单件类是唯一
的途径。
·我们也提供对这个实例的全局访问点：当你需要实例时，向类查询，它
会返回单个实例。前面的例子利用延迟实例化的方式创建单件，这种做法
对资源敏感的对象特别重要。
好吧！来看看类图：
这个uingue3nstance类变量持有
唯一的单件实例。
setJnstance(）方法是静态的，这意味著它
是一个类方法，所以可以在代码的任何
Singleton
地方使用Sinsleton.setJnstance(）访问它。
static uniquelnstance
这和访问全局变量一样简单，只是多了一
//其他有用的单件数据
个优点：单件可以延迟实例化。
M
static getlnstance()
//其他有用的单件方法
T
单件模式的类也可以是一般的类
具有一般的数据和方法。
你现在的位置
177
---
## Page 214
线程是个问题
Hershey
HoustoH，我们遇到麻烦了....
看起来巧克力锅炉要让我们失望了，尽管我们利用经典的单件来改进代码，但
是ChocolateBoiler的fill(方法竞然允许在加热的过程中继续加入原料。这可是
会溢出五百加仑的原料（牛奶和巧克力）呀！怎么会这样！？
不知道这是怎么了！新的单件代码原本是一切
顺利的。我们唯一能悲到的原因就是刚刚使用多线
程对ChocolateBoller进行了优化。
多加线程，就会造成这样吗？不是
只要为ChocolateBolier的单件设
置好uniquelnstance变量，所有的
告
getlnstance(）调用都会取得相同的实
注意溢出
热巧克力
例吗？对不对？
178
第5章
---
## Page 215
单件模式
化身为JVM
这里有两个线程都要执行这段代码。你的工作是扮演JVM留色并判断出两个线程是否可
能抓住不同的锅炉对象而扰乱这段代码。提示：你只需要检查getlnstancell方法内的操作
次序和uniquelnstance的值，看它们是否互相
重。
ChocolateBoiler boiler
围代码帖来帮你研究这段代码为什么可能
ChocolateBoiler.getInst
产生两个锅炉对象。
fi11();
boil() ;
drain ();
public static ChocolateBoiler
记得在翻页前，先看看188页的答
getInstance (){
案。
if (uniqueInstance == null)
uniqueInstance
new ChocolateBoiler ();
线程
线程二
uniquelnstance
的值
return uniqueInstance;
你现在的位置
179
---
## Page 216
多线程与单件
处理多线程
只要把getlnstance（）变成同步（synchronized）方法，多线程灾难几乎就可
以轻易地解决了：
通过增加synchtonixed关键字到
setJnstamce(）方法中，我们追使每
public class Singleton {
个线程在进入这个方法之前，要
private static Singleton uniqueInstance;
先等候别的线程离开该方法。也
就是说，不会有两个线程可以同
//其他有用的实例化的变量
private Singleton() ()
时进入这个方法。
public static synchronized Singleton getInstance()(
if (uniqueInstance == null)(
uniqueInstance = new Singleton();
return uniqueInstance;
//
其他有用的方法
我同意这样可以
解决问题。但是同步会
降低性能，这不又是另
一个问题吗？
说得很对，的确是有一点不好。而比你所想象的还要严重一些的是：
只有第一次执行此方法时，才真正需要同步。换句话说，一旦设置
好uniquelnstance变量，就不再需要同步这个方法了。之后每次调用
这个方法，同步都是一种累赞。
180
第5章
---
## Page 217
单件模式
能够改善多线程吗？
为了要符合大多数Java应用程序，很明显地，我们需要确保单件模式能在多线程的状况
下正常工作。但是似乎同步getlnstance（）的做法将拖垮性能，该怎么办呢？
可以有一些选择
1.如果getlnstance()的性能对应用程序不是很关键，就什么都别做
没错，如果你的应用程序可以接受getInstance（造成的额外负担，就忘了这件事吧。同
步getInstance(）的方法既简单又有效。但是你必须知道，同步一个方法可能造成程序执
行效率下降100倍。因此，如果将getInstanceO的程序使用在频繁运行的地方，你可能就
得重新考虑了。
2.使用“急切”创建实例，而不用延迟实例化的做法
如果应用程序总是创建并使用单件实例，或者在创建和运行时方面的负担不太繁重，你
可能想要急切（eagerly）创建此单件，如下所示：
在静态初始化器
(static initializet)
中创建单件。这
public class Singleton {
private static Singleton uniqueInstance = new Singleton();
段代码保证了线
程安全（thread
private Singleton() ()
safe)。
public static Singleton getInstance() {
return uniqueInstance;
1
已经有实例了
直接使用它。
利用这个做法，我们依赖IVM在加载这个类时马上创建此唯一的单件实例。JVM保
证在任何线程访问uniquelnstance静态变量之前，一定先创建此实例。
你现在的位置
181
---
## Page 218
双重检查加锁
3.用“双重检查加锁”，在getlnstance（）中减少使用同步
利用双重检查加锁（double-checkedlocking），首先检查是否实例已经创建了，如果尚
未创建，“才”进行同步。这样一来，只有第一次会同步，这正是我们想要的。
来看看代码：
public class Singleton {
private Volatile*static Singleton uniqueInstance;
private Singleton()(}
检叠实例，如果不
存在，就进入同步区
public static Singleton getInstance ()
if （uniqueInstance ==null）(
快。
synchronized （Singleton.class)(
if（uniqueInstance--null）(
uniqueInstance -new Singleton();
注象，只有第一次才
翻底执行这里的代
人
码。
return uniqueInstance;
进入区块后，再检查一次。如果
仍是null，才创建实例。
★uolatile关键词确保：它uniguenstance变量被
初始化成Singleton实例时.多个线程正确她处理
aniqueJnstance变量。
如果性能是你关心的重点，那么这个做法可以帮你大大地减少getInstanccO的时间耗费。
双重检查加锁不适用于1.4及更早版本
注意！
的Java!
很不幸地，在1.4及更早版本的Java中，许多JVM对于
volatile关键字的实现会导致双重检查加锁的失效。如果
你不能使用Java5，而必须使用旧版的Java，就请不要
利用此技巧实现单件模式。
182
第5章
---
## Page 219
单件模式
再度回到巧克力工厂.·
在研究如何摆脱多线程的梦魔同时，巧克力锅炉也被清理干净可以再度开工
了。首先，得处理多线程的问题。我们有一些选择方案，每个方案都有优缺点，
到底该采用哪一个？
Sharpen your pencil
描述每一种方案对于修改巧克力锅炉代码所遇到的问题的适用性。
同步getlnstance（）方法：
急切实例化
双重检查加锁
恭喜！
此刻，巧克力工厂的问题已经解决了，而且Choc-O-Holic很高兴在锅炉的代码中能够采用这些专业
PDG
知识。不管你使用哪一种多线程解决方案，锅炉都能顺畅工作，不会有闪失。恭喜你，不但避免了
500磅热巧克力的危机，也认清了单件所带来的所有潜在问题。
你现在的位置》
183
---
## Page 220
单件Q&A
thereyare_no
DumbQuestions
问：
问：
难道我不能创建一个
那么类加载器（class
应该是很简单的模式，但是问题似
类，把所有的方法和变量都定义为
loader）呢？听说两个类加载器可能
乎不少。
静态的，把类直接当做一个单件？
有机会各自创建自己的单件实例。
分：
如果你的类自给自足，
是的。每个类加载器都
警告，读者不要因为这点儿问题而
而且不依赖于复杂的初始化，那么
定义了一个命名空间，如果有两个
泄气。固然正确地实现单件模式需
你可以这么做。但是，因为静态初
以上的类加载器，不同的类加载器
始化的控制权是在Java手上，这么
可能会加载同一个类，从整个程序
要一点技巧，但是在阅读完本章之
做有可能导致混乱，特别是当有许
来看，同一个类会被加载多次，如
后、你已经具备了用正确的方法实
现单件模式的能力。当你需要控制
多类牵涉其中的时候，这么做常常
果这样的事情发生在单件上，就会
会造成一些微妙的、不容易发现的
产生多个单件并存的怪异现象。所
实例个数时，还是应当使用单件模
和初始化的次序有关的bug。除非你
以、如果你的程序有多个类加载器
式。
有绝对的必要使用类的单件，否则
又同时使用了单件模式，请小心。
还是建议使用对象的单件，比较保
有一个解决办法：自行指定类加载
险。
器，并指定同一个类加载器。
放轻松
谣传垃圾收集器会吃掉单件，这过分夸大了！
在Java1.2之前，垃圾收集器有个bug，会造成当单件在没有全局的引I用时被当
作垃圾清除。也就是说，如果一个单件只有本单件类引用它本身，那么该单件
就会被当做垃圾清除。这造成让人困惑的bug：因为在单件被清除之后，下次
调用getInstance（）会产生一个“全新的”单件。对很多程序来说，这会造成让
人困惑的行为，因为对象的实例变量值都不见了，一切回到最原始的设置（例
如：网络连接被重新设置）。
Java1.2以后，这个bug已经被修正了，也不再需要一个全局引1用来保护单件。
如果出于某些原因你还在用旧版的Java，要特别注意这个问题。如果你使用
1.2以后的Java，就可以高枕无忧了。
184第5章
---
## Page 221
单件模式
问：
问：
我想把单件类当成超
我还是不了解为何全局
是：类应该做一件事，而且只做一类，设计出子类，但是我遇到了问