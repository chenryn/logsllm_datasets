    #include "windows.h"
    #include "tchar.h"
    #include "winbase.h"
    #include "stdio.h"
    #include "tlhelp32.h"
    BOOL EnableDebugPriv() //提权函数
    {
        HANDLE hToken;
        LUID Luid;
        TOKEN_PRIVILEGES tkp;
        if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))
        {
            printf("OpenProcessToken failed!\n");
            return FALSE;
        }
        if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &Luid))
        {
            CloseHandle(hToken);
            printf("LookupPrivilegeValue failed!\n");
            return FALSE;
        }
        tkp.PrivilegeCount = 1;
        tkp.Privileges[0].Luid = Luid;
        tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
        if (!AdjustTokenPrivileges(hToken, FALSE, &tkp, sizeof tkp, NULL, NULL))
        {
            printf("AdjustTokenPrivileges failed!");
            CloseHandle(hToken);
        }
        else
        {
            printf("privilege get!\n");
            return TRUE;
        }
    }
    BOOL Inject(DWORD dwPID, LPCTSTR szDllName) //注入DLL
    {
        HANDLE hProcess = NULL;
        HANDLE hThread = NULL;
        LPVOID pfRemoteBuf = NULL;
        DWORD dwBufSize = (DWORD)(_tcslen(szDllName) + 1) * sizeof(TCHAR);
        LPTHREAD_START_ROUTINE pThreadProc;
        if (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))
        {
            printf("OpenProcess failed!\n");
            return FALSE;
        }
        pfRemoteBuf = VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE); //为ThreadProc线程函数的参数分配空间
        WriteProcessMemory(hProcess, pfRemoteBuf, (LPVOID)szDllName, dwBufSize, NULL);
        pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "LoadLibraryW"); //指定远程线程执行的函数操作
        hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pfRemoteBuf, 0, NULL); //创建远程线程并执行
        if (hThread)
        {
            printf("inject successfully!");
        }
        else
        {
            printf("inject failed!");
            CloseHandle(hProcess);
            CloseHandle(hThread);
            return FALSE;
        }
        WaitForSingleObject(hThread, INFINITE);
        CloseHandle(hProcess);
        CloseHandle(hThread);
        return TRUE;
    }
    BOOL Eject(DWORD dwPID, LPCTSTR szDllName)
    {
        BOOL bMore = FALSE;
        BOOL bFound = FALSE;
        HANDLE hSnapshot = NULL; //指向进程映像结构体的指针
        HANDLE hProcess = NULL;
        HANDLE hThread = NULL;
        MODULEENTRY32  me = { sizeof(MODULEENTRY32) }; //描述模块列表的相关结构体
        LPTHREAD_START_ROUTINE pThreadProc; //对应的线程函数
        if ((hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID)) == INVALID_HANDLE_VALUE) //获取进程映像结构体
        {
            printf("Snapshot get failed!\n");
            return FALSE;
        }
        bMore = Module32First(hSnapshot, &me);
        for (; bMore; bMore = Module32Next(hSnapshot, &me)) //遍历获取对应DLL模块的模块列表
        {
            if (!_tcsicmp(me.szModule, szDllName) || !_tcsicmp(me.szExePath, szDllName))
            {
                bFound = TRUE;
                break;
            }
        }
        if (!bFound)
        {
            printf("Module SnapShot not found!\n");
            CloseHandle(hSnapshot);
            return FALSE;
        }
        if (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))
        {
            printf("OpenProcess failed!\n");
            CloseHandle(hSnapshot);
            return FALSE;
        }
        pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "FreeLibrary");
        hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, me.modBaseAddr, 0, NULL); //创建远程线程并执行
        //在MODULEENTRY32当中，modBaseAddr成员即为该模块在程序中加载的地址，改地址作为FreeLibrary的参数
        if (hThread)
        {
            printf("Eject successfully!");
        }
        else
        {
            printf("Eject failed!");
            CloseHandle(hProcess);
            CloseHandle(hThread);
            return FALSE;
        }
        WaitForSingleObject(hThread, INFINITE);
        CloseHandle(hSnapshot);
        CloseHandle(hProcess);
        CloseHandle(hThread);
        return TRUE;
    }
    int _tmain(int argc, _TCHAR* argv[])
    {
        EnableDebugPriv();
        if (!_tcsicmp(argv[1], L"i")) //当命令行输入i时执行注入DLL操作
        {
            Inject((DWORD)_tstoi(argv[2]), argv[3]);
        }
        else if (!_tcsicmp(argv[1], L"e")) //当命令行输入e时执行卸载DLL操作
        {
            Eject((DWORD)_tstoi(argv[2]), argv[3]);
        }
        return 0;
    }
这个程序主要执行DLL的注入与卸载操作，程序逻辑也比较简单：
  1. 相关进程提权（EnableDebugPriv）
  2. 在目标进程中注入DLL（Inject）
  3. 从目标进程中卸载DLL（Eject）
  4. 根据命令行参数选择需要执行的操作（_tmain）
由于提权函数和注入操作函数在[以前的文章](https://xz.aliyun.com/t/11914)中已经详细分析过了，这里就不在做赘述，下面主要分析一下DLL卸载函数
## Eject：
由于卸载DLL是注入DLL的镜像操作，所以其实在原理上来说差异是不大的，注入操作通过一个API函数LoadLibrary来完成注入；相应的，卸载操作也是通过一个API函数：FreeLibrary来实现的。这里看一下MSDN关于FreeLibrary的说明：
    BOOL FreeLibrary(
      [in] HMODULE hLibModule
    );
只有一个参数：hLibModule。这里要注意其与LoadLibrary的不同，LoadLibrary的参数一个指向需要加载的DLL的名字的字符串指针，而FreeLibrary的参数是一个指向目标DLL的模块句柄。
那么重点即是如何获取这个DLL的句柄。
这里就需要提一下Windows中的一个映像机制了。Windows编程中的进程可以使用CreateToolhelp32Snapshot函数来为其拍摄快照，以及其使用的线程，堆，模块等相关信息。CreateToolhelp32Snapshot函数在MSDN上查到的说明如下：
    HANDLE CreateToolhelp32Snapshot(
      [in] DWORD dwFlags,
      [in] DWORD th32ProcessID
    );
而这个快照信息可以用于遍历搜索该进程所加载使用的各个模块。而在Windows编程中，加载模块的具体数据列表被解释为一个结构体：MODULEENTRY32，它可以在TIHelp32.h中查到如下：
    typedef struct tagMODULEENTRY32W
    {
        DWORD   dwSize;
        DWORD   th32ModuleID;       // This module
        DWORD   th32ProcessID;      // owning process
        DWORD   GlblcntUsage;       // Global usage count on the module
        DWORD   ProccntUsage;       // Module usage count in th32ProcessID's context
        BYTE  * modBaseAddr;        // Base address of module in th32ProcessID's context
        DWORD   modBaseSize;        // Size in bytes of module starting at modBaseAddr
        HMODULE hModule;            // The hModule of this module in th32ProcessID's context
        WCHAR   szModule[MAX_MODULE_NAME32 + 1];
        WCHAR   szExePath[MAX_PATH];
    } MODULEENTRY32W;
其中modBaseAddr即是指向该模块在对应进程虚拟内存中的加载的基地址，这个数据就可以作为FreeLibrary的参数用于从目标进程中卸载DLL了。
**注：成员hModule也可以使用，但是直接使用地址指针比使用句柄要好一点（关于句柄与指针前面有提到过），可以避免一些难以解释的bug**
所以DLL的卸载操作流程可以总结如下：
  1. 获取目标进程的快照：
        if ((hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPID)) == INVALID_HANDLE_VALUE) //获取进程映像结构体
        {
            printf("Snapshot get failed!\n");
            return FALSE;
        }
  2. 通过快照遍历模块列表找到对应模块的MODULEENTRY32结构体
        bMore = Module32First(hSnapshot, &me);
        for (; bMore; bMore = Module32Next(hSnapshot, &me)) //遍历获取对应DLL模块的模块列表
        {
            if (!_tcsicmp(me.szModule, szDllName) || !_tcsicmp(me.szExePath, szDllName))
            {
                bFound = TRUE;
                break;
            }
        }
  3. 通过远程线程注入完成卸载操作
        pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(L"kernel32.dll"), "FreeLibrary");
        hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, me.modBaseAddr, 0, NULL); //创建远程线程并执行
        //在MODULEENTRY32当中，modBaseAddr成员即为该模块在程序中加载的地址，改地址作为FreeLibrary的参数
# 运行测试：
首先打开计算器程序：
现在是正常的显示为阿拉伯数字，然后在命令提示符中运行注入程序：
之后可以看到计算器中已经显示的是中文数字了：
对应的进程下也出现了相应的DLL文件：
之后再执行注入程序中的卸载操作：
这时候计算器的数值恢复为阿拉伯数字：
# 调试运行：
这里我们使用x32dbg来调试一下这个注入操作，首先用x32dbg打开计算器程序并设置中断于新模块的载入：
然后F9运行程序至出现计算器的操作窗口：
启动注入程序将DLL文件注入到进程当中，注入后调试器会停止在DLL文件的入口处（ **注意此处的注入程序要以管理员权限运行，否则会出现进程打开失败的错误**
）：
调试会停止在此处：
这里就是DLL的入口点函数，之后我们需要找到执行IAT钩取的函数IAT_Hook，这里可以通过步进跟随程序流程（因为程序本身比较简单），也可以结合程序用到的字符串查找来找到函数的调用位置如下：
这里可以看见调用了GetModuleHandle和GetProcAddress等参数，符合程序中的流程，并且下面可以看到一个call
IAT_Hook的函数调用标记，直接步进即可进入IAT_Hook函数：
这里就是IAT_Hook函数的实际执行部分，向下步进到这个位置：
这里有一组明显的比较以及条件跳转指令，其实就是程序中遍历寻找IAT表中对应API函数地址的操作部分，可以试着自己步进跟踪一下这个流程：
在右侧的寄存器界面也可以看到调试器标记出了一个uer32.dll库中API函数的位置。
接下来步进到这个位置：
发现一条赋值指令：
    mov eax, dword ptr ss:[ebp+0x8]
结合其注释可以知道这里就是具体修改IAT表中SetWindowTextW的真实地址为伪造函数MySetWindowTextW的操作部分。
至此IAT_Hook的修改操作结束。
# 参考资料：
  1. 
  2. 《逆向工程核心原理》[韩] 李承远