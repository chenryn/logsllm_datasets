# Tools and Examples
- **Tools/Examples**: [https://goo.gl/HzZ2Gw](https://goo.gl/HzZ2Gw)
- **Workbook**: [https://goo.gl/P4Q9GN](https://goo.gl/P4Q9GN)

## Previous Processor Mode
- The previous processor mode is used to determine whether to enforce security.

### Function: `SeAccessCheck`
```c
BOOLEAN SeAccessCheck(
    _In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
    _In_ PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
    _In_ BOOLEAN SubjectContextLocked,
    _In_ ACCESS_MASK DesiredAccess,
    _In_ ACCESS_MASK PreviouslyGrantedAccess,
    _Out_ PPRIVILEGE_SET *Privileges,
    _In_ PGENERIC_MAPPING GenericMapping,
    _In_ KPROCESSOR_MODE AccessMode,
    _Out_ PACCESS_MASK GrantedAccess,
    _Out_ PNTSTATUS AccessStatus
);
```

## Demo 2: Displaying Object Namespace

## Hunting for Attack Surface
- Finding what to attack is the most important part.
- This is similar to hunting for memory corruption, but the types of things you look for may differ.
- Identify interesting functionality accessible from your privilege level.
- **Attack Surface Types**:
  - **Passive**: Privileged code interacts with a resource the attacker can control.
  - **Active**: The attacker can get privileged code to perform some action for them.

## Privilege Escalation Routes
- **Kernel Drivers**
- **Privileged Service**
- **User Application**
- **Sandboxed Application**

## Don’t Always Think of Going Up
- Consider lateral movement and other privilege levels.

## Probing Accessible Resources
- Determine the attack surface by probing resources accessible from your desired privilege level.
- Focus on WRITE access, but READ access is also important in some cases (e.g., processes).
- **Resources to Probe**:
  - Files
  - Registry Keys
  - Processes and Threads
  - Sections/File Mappings
  - Kernel Driver Device Objects
  - Named Pipes

## Passive Resource Locations
- **File Locations**:
  - Subfolders under `%SYSTEMDRIVE%\ProgramData`
  - `%WINDIR%\Temp`
- **Registry Locations**: Some locations inside the Local Machine registry.
- **General Kernel Resources**: May be found in the Object Manager namespace.
- Use tools like Process Monitor to find privileged users of this functionality.

## Sandbox Attack Surface Analysis Tools
- **Tool Name**: Description
  - **CheckFileAccess**: Enumerate accessible files or named pipes.
  - **CheckProcessAccess**: Enumerate accessible processes and/or threads.
  - **CheckDeviceAccess**: Enumerate accessible device objects.
  - **CheckRegistryAccess**: Enumerate accessible registry keys.
  - **CheckObjectManagerAccess**: Enumerate accessible kernel resources (e.g., Sections, Mutexes, Events).

### Common Command Line Arguments
- `-p PID`: Specify a process to impersonate during the access check.
- `-w`: Only show writable resources.
- `-r`: Recursively enumerate resources.
- `-k ACCESS`: Comma-separated list of access rights to check for.
- `-q`: Suppress printing errors during enumeration.

## Services
- **Services as Securable Resources**:
  - Look for write privileges to change configuration.
  - Look for start privileges to increase the attack surface.
  - Some services take arguments during start, such as the Mozilla Maintenance Service.
  - Use `CheckServiceAccess -k=Start` to find services you can start.

### Example Code
```c
ServiceController svc = new ServiceController("blah");
svc.Start(new string[] { "Arg1", "Arg2" });
```

## Service Triggers
- **Windows 7 and Later**: Introduced Service Triggers, which start/stop services based on certain events.
  - Access to Named Pipe or RPC Endpoints
  - Creation of Firewall Access Rules
  - Joining of a Domain
  - Custom Event Tracing for Windows event
  - Adding a Hardware Device
- **ETW (Event Tracing for Windows)**: One of the most common and easiest to execute.

### ETW Event Trigger
- Use the `-t` switch to display service triggers.
- Example: WebClient service
  - **Trigger**: Type: Custom, Action: Start
  - **Subtype**: [ETW UUID] {22b6d684-fa63-4578-87c9-effcbe6643c7}

### C++ Code to Start the WebClient Service
```cpp
const GUID _MS_Windows_WebClntLookupServiceTrigger_Provider = { 0x22B6D684, 0xFA63, 0x4578, { 0x87, 0xC9, 0xEF, 0xFC, 0xBE, 0x66, 0x43, 0xC7 } };
REGHANDLE Handle;
if (EventRegister(&_MS_Windows_WebClntLookupServiceTrigger_Provider, nullptr, nullptr, &Handle) == ERROR_SUCCESS) {
    EVENT_DESCRIPTOR desc;
    EventDescCreate(&desc, 1, 0, 0, 4, 0, 0, 0);
    if (EventWrite(Handle, &desc, 0, nullptr) == ERROR_SUCCESS) {
        EventUnregister(Handle);
    }
}
```

## Demo 3: Enumerating Accessible Resources

## RPC Services
- **Common Technique**: Used for privilege separation between components.
- **Common Services**:
  - Local Security Subsystem (LSASS)
  - AppInfo service (UAC)
  - Secondary Logon service (seclogon)
- Many RPC services are undocumented and contain complex functionality.

### Windows RPC Architecture
- **RPCSS (Remote Procedure Call Service)**
- **Endpoint Mapper**: Registers and looks up endpoints.
- **Server and Client Applications**: Communicate through marshaled interfaces.

### Network Data Representation (NDR)
- **IDL (Interface Definition Language)**: Defines server interfaces.
- **NDR**: Handles marshaling of parameters and structures.
- **Client Proxy**: Must match the server stub to avoid mismatches.
- **UUID**: Each interface has a unique ID.

### Working with RPC Interfaces
- **RPCView**: Supports basic decompilation of interface definitions.
- **Decompile Interface**: Right-click and choose Decompile.

### RPC Endpoints
- **Protocols**: Supported by RPC.
- **Configuration**:
  - **Server**: `RpcServerUseProtseqEp`
  - **Client**: `RpcStringBindingCompose`

### Protocol Sequences
- **Types**:
  - ncalrpc: Local RPC (ALPC)
  - ncacn_np: Windows Named Pipe
  - ncacn_ip_tcp: TCP/IP
  - ncacn_ip_udp: UDP/IP
  - ncacn_http: HTTP

### RPC Security
- **Connect Time Security (Local)**: Static security descriptor.
- **Runtime Security**: Security callback to verify the client.
- **Function**: `RpcServerRegisterIf3`

### Configuring RPCView Symbols
- **Symbol Information**: Provides better insight into exported functions.
- **Configure Symbols**: Through Options -> Configure Symbols.
- **Manual Symbol Pull**: Use `symchk` from Debugging Tools for Windows.

### Local COM Services
- **COM (Component Object Model)**: An ABI definition for multiple programming languages.
- **Out-of-Process Objects**: Supported.
- **Activation**: Creation of services from the registry.
- **Attack Surface**: Larger than normal RPC due to activation features.

### COM Technical Architecture
- **DLL for In-Process COM Server**
- **Executable or Service for Out-of-Process COM Server**
- **COM Class**: Registered using a unique GUID (CLSID).
- **COM Interface**: Referred to using a unique GUID (IID).

### IUnknown, The Root of All COM Evil
- **IUnknown**: Base interface for all COM interfaces.
- **IID**: {00000000-0000-0000-C000-000000000046}
- **Methods**:
  - `QueryInterface`: Queries for other supported interfaces.
  - `AddRef`: Increments object reference count.
  - `Release`: Decrements object reference count.
- **Error Handling**: If an object doesn’t support an interface, `QueryInterface` should return `E_NOINTERFACE` (0x80004002).

### COM Activation
- **RPCSS (Remote Procedure Call Service)**
- **COM Activator**: Manages activation of COM objects.
- **Client and Server Communication**: Through marshaled interfaces and endpoints.

### Proxies and Stubs
- **Proxy**: Represents the client-side interface.
- **Stub**: Represents the server-side interface.