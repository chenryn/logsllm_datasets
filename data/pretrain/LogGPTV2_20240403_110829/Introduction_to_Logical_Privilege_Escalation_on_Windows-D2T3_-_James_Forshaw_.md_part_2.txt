Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Previous Processor Mode
User
ZwOpenFile NtOpenFile
Application
Previous Mode = User Mode
User
Device Driver ZwOpenFile NtOpenFile
Application
Previous Mode = User Mode Previous Mode = Kernel Mode
39
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Previous Processor Mode
● Previous processor mode used to determine whether to
enforce security!
BOOLEAN SeAccessCheck(
_In_ PSECURITY_DESCRIPTOR SecurityDescriptor,
_In_ PSECURITY_SUBJECT_CONTEXT SubjectSecurityContext,
_In_ BOOLEAN SubjectContextLocked,
_In_ ACCESS_MASK DesiredAccess,
_In_ ACCESS_MASK PreviouslyGrantedAccess,
_Out_ PPRIVILEGE_SET *Privileges,
Explicit processor
_In_ PGENERIC_MAPPING GenericMapping,
mode setting.
_In_ KPROCESSOR_MODE AccessMode,
_Out_ PACCESS_MASK GrantedAccess,
_Out_ PNTSTATUS AccessStatus
);
40
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
DEMO 2: Displaying Object Namespace
41
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Hunting for Attack Surface
42
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Above all Else, find something to Attack
● Might seem obvious but finding what to attack is the most
important part
○ Not that different from hunting for memory corruption, just the types of things
you’re looking for changes.
○ Need to find interesting functionality accessible from your privilege level
● The attack surface could be Passive or Active
○ Passive means privileged code interacts with a resource the attacker can
control
○ Active means the attacker can get privileged code to perform some action for
them
43
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Privilege Escalation Routes
Kernel Drivers
Privileged Service
egelivirP
gnisaercnI
User Application
Sandboxed Application
44
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Don’t Always Think of Going Up
Kernel Drivers
egelivirP
gnisaercnI
Sandboxed Application Sandboxed Application
45
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Don’t Always Think of Going Up
Kernel Drivers
egelivirP
gnisaercnI
Sandboxed Application Sandboxed Application
46
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Probing Accessible Resources
● Good idea to determine levels of attack surface is to probe
what resources you can access from your desired privilege
level.
● Primarily interested in WRITE, but in some cases (such as
processes) READ is also important.
● This could include:
○ Files
○ Registry Keys
○ Processes and Threads
○ Sections/File Mappings
○ Kernel Driver Device Objects
○ Named Pipes
47
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Passive Resource Locations
● There’s a number of file locations on a default Windows system
that a non-administrator can control which could be used by
privileged code
○ Subfolders under %SYSTEMDRIVE%\ProgramData
○ %WINDIR%\Temp
● Also some locations inside the Local Machine registry
● General kernel resources could also end up inside the Object
Manager namespace
● Find privileged users of this functionality by using something
like Process Monitor
48
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Sandbox Attack Surface Analysis Tools
Tool Name Description
CheckFileAccess Enumerate accessible files or named pipes
CheckProcessAccess Enumerate accessible processes and/or threads
CheckDeviceAccess Enumerate accessible device objects
CheckRegistryAccess Enumerate accessible registry keys
CheckObjectManagerAccess Enumerate accessible names kernel resources (such as
Sections/Mutexes/Events etc.)
Tools take a number of common command line arguments:
-p PID : Specify a process to impersonate when doing the access check
-w : Only show writable resources
-r : Recursively enumerate names resources
-k ACCESS: Comma separated list of access rights to check for
-q : Suppress printing errors during enumeration
49
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Services
● Services are also a securable resource
● Typically look for write privileges to change configuration
○ Everyone should already know about this.
● Instead look for start privileges
○ Increase potential attack surface
○ Some services take arguments during start such as the Mozilla Maintenance
Service
ServiceController svc = new
ServiceController ("blah");
// Start a service with arbitrary arguments.
svc.Start(new string[] { "Arg1", "Arg2" });
● “CheckServiceAccess -k=Start” is your friend to find what you
can start.
50
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Service Triggers
● Some services can be started without an explicit Start privilege
● Windows 7 introduced Service Triggers, starts/stops services on
certain events:
○ Access to Named Pipe or RPC Endpoints
○ Creation of Firewall Access Rules
○ Joining of a Domain
○ Custom Event Tracing for Windows event
○ Adding a Hardware Device
● ETW is one of the most common and easiest to execute
51
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
ETW Event Trigger
● Use the -t switch to display service triggers
● For example the WebClient service would print:
WebClient Granted Access: QueryConfig, QueryStatus, EnumerateDependents, Interrogate,
UserDefinedControl, ReadControl
Trigger: 0 - Type: Custom - Action: Start
Subtype: [ETW UUID] {22b6d684-fa63-4578-87c9-effcbe6643c7}
● Use the following C++ code to start the WebClient service
const GUID _MS_Windows_WebClntLookupServiceTrigger_Provider =
{ 0x22B6D684, 0xFA63, 0x4578,
{ 0x87, 0xC9, 0xEF, 0xFC, 0xBE, 0x66, 0x43, 0xC7 } };
REGHANDLE Handle;
if (EventRegister(
&_MS_Windows_WebClntLookupServiceTrigger_Provider,
nullptr, nullptr, &Handle) == ERROR_SUCCESS) {
EVENT_DESCRIPTOR desc;
EventDescCreate(&desc, 1, 0, 0, 4, 0, 0, 0);
EventWrite(Handle, &desc, 0, nullptr) == ERROR_SUCCESS;
EventUnregister(Handle);
}
52
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
DEMO 3 - Enumerating Accessible Resources
53
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
RPC Services
● The most common technique on Windows to provide privilege
separation between components.
● Used in many common services:
○ Local Security Subsystem (LSASS)
○ AppInfo service (UAC)
○ Secondary Logon service (seclogon)
● Many RPC services are undocumented and contain complex
functionality
54
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Windows RPC Architecture
RPCSS
Endpoint Mapper
Register
UUID 1
Server Application
RPC Server RPC Server
Interface: UUID 1 Interface: UUID 2
Marshal Marshal
Stub Stub
Endpoint
Listener
55
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Windows RPC Architecture
RPCSS
Endpoint Mapper
Lookup
Binding for
Client Application UUID 1 Server Application
RPC Client RPC Server RPC Server
Interface: UUID 1 Interface: UUID 1 Interface: UUID 2
Marshal Marshal
Stub Stub
Endpoint
Listener
56
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Windows RPC Architecture
RPCSS
Endpoint Mapper
Client Application Server Application
RPC Client RPC Server RPC Server
Interface: UUID 1 Interface: UUID 1 Interface: UUID 2
Marshal Marshal
Marshal
Stub Stub
Proxy
Endpoint Endpoint
Protocol: E.g ALPC, Named Pipe, TCP
Client Listener
57
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Network Data Representation (NDR)
● Server defined interface using an IDL file. Compiler converts to
a server Stub build with NDR which handles marshaling of
parameters and structures
● Client must have a corresponding Proxy built from the same IDL
interface definition otherwise there’s likely to be a mismatch.
● Each interface has a defined unique ID (UUID)
[
uuid (201ef99a-7fa0-444c-9399-19ba84f12a1a),
version(1.0),
]
interface LaunchAdminProcess
{
long RAiLaunchAdminProcess([in][unique][string] wchar_t* ExecutablePath);
}
58
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Working with RPC Interfaces
● RPCView Supports basic Decompilation of interface definitions.
● Right click interface and choose Decompile
59
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
RPC Endpoints
● RPC Supports multiple different endpoint protocols.
● Configured on server using RpcServerUseProtseqEp
● Configured on client using RpcStringBindingCompose
RPC_STATUS RPC_ENTRY RpcServerUseProtseqEp(
unsigned char *Protseq,
Protocol
unsigned int MaxCalls,
sequence
unsigned char *Endpoint,
void *SecurityDescriptor
); Optional
Endpoint
Name
RPC_STATUS RPC_ENTRY RpcStringBindingCompose(
TCHAR *ObjUuid,
TCHAR *ProtSeq,
TCHAR *NetworkAddr,
TCHAR *EndPoint,
TCHAR *Options,
TCHAR **StringBinding
60
);
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Protocol Sequences
Protocol Sequence Optional Endpoint Name Description
ncalrpc NAME Local RPC (ALPC)
ncacn_np \pipe\NAME Windows Named Pipe
ncacn_ip_tcp (port number) TCP/IP
ncacn_ip_udp (port number) UDP/IP
ncacn_http (port number) HTTP
Note all endpoints and protocol sequences are
multiplexed in a single process.
61
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
RPC Security
Connect Time Security (Local) Runtime Security
RPC_STATUS RPC_ENTRY RpcServerRegisterIf3(
_In_ RPC_IF_HANDLE IfSpec,
_In_opt_ UUID *MgrTypeUuid,
_In_opt_ RPC_MGR_EPV *MgrEpv,
_In_ unsigned int Flags,
_In_ unsigned int MaxCalls,
_In_ unsigned int MaxRpcSize,
_In_opt_ RPC_IF_CALLBACK_FN *IfCallbackFn,
_In_opt_ void *SecurityDescriptor
);
Security callback, run code
to verify the client
Static Security Descriptor
As all endpoints of multiplexed, you can pick
the one with the lowest connect time security
62
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Configuring RPCView Symbols
● Getting Symbol Information gives you a better idea on what
functions are exported.
● Configure local path to symbols through Options -> Configure
Symbols
RPCView doesn’t seem to work with symbol servers. So need to pull symbols manually. Use symchk from
Debugging Tools for Windows, cache in a known directory such as c:\symbols.
symchk /s srv*c:\symbols*https://msdl.microsoft.com/download/symbols c:\windows\system32\*.dll
63
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Local COM Services
● COM itself is just an ABI definition to allow multiple
programming languages to create and call objects
● Supported out-of-process objects
● Effectively an extension of RPC services.
● Key difference is supports Activation, creation of services from
a registry, they don’t have to already be running like RPC
● Much bigger attack surface than normal RPC
● Activation brings some fun:
○ RunAs/Different User activation
○ Service starting and object hosting
○ UAC auto-elevation.
64
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
COM Technical Architecture
DLL for in-process
COM Server
Executable or Service for
out-of-process
65
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
COM Technical Architecture
DLL for in-process
COM Server
Executable or Service for
out-of-process
COM Class
COM Class
COM Class
COM Class
COM Class
Each class is registered
using a unique GUID,
called a Class ID or CLSID
66
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
COM Technical Architecture
DLL for in-process
COM Server
Executable or Service for
out-of-process
IUnknown
COM Class Each interface is referred to
COM Class IInterface1
using a unique GUID, called
COM Class
COM Class an Interface ID or IID
COM Class
IInterface2
Each class is registered
using a unique GUID,
called a Class ID or CLSID
67
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
COM Technical Architecture
Server
Executable
Class
Supported
Interfaces
68
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
IUnknown, The Root of all COM Evil
● All COM interfaces derive from a special interface, IUnknown
● Has the IID {00000000-0000-0000-C000-000000000046}
● Supports 3 methods:
○ QueryInterface - Used to query for other supported interfaces
○ AddRef - Increment object reference count
○ Release - Decrement object reference count
● If an object doesn’t support an interface QueryInterface should
return E_NOINTERFACE (0x80004002)
● Code should not be casting objects to other interfaces without
going through QueryInterface. That would be a type confusion
bug in waiting :-)
69
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
COM Activation
RPCSS
COM Activator
RPC Service
Client Application
COM Client
Interface: IID1
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
COM Activation
RPCSS
COM Activator
RPC Service
Client Application Server Application
COM Client COM Server
Interface: IID1 Interface: IID1
Marshal
Stub
Endpoint
Listener
71
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
COM Activation
RPCSS
COM Activator
RPC Service
Client Application Server Application
COM Client COM Server
Interface: IID1 Interface: IID1
Marshal
Marshal
Stub
Proxy
Endpoint Endpoint
Client Listener
72
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
COM Activation
RPCSS
COM Activator
RPC Service
Client Application Server Application
COM Client COM Server
Interface: IID1 Interface: IID1
Marshal
Marshal
Stub
Proxy
Endpoint Endpoint
Protocol: E.g ALPC, Named Pipe, TCP
Client Listener
73
Tools/Examples at: https://goo.gl/HzZ2Gw - Wookbook at:
https://goo.gl/P4Q9GN
Proxies and Stubs