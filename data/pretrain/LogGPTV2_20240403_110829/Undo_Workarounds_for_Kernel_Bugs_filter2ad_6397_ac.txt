17
18
19
...
mutex_lock(&device->mutex); CGOTO;
bowknot_set_bit(bowknot_pairmask, 2);
if(unlikely(param == unexpected_ctx))
goto bowknot_label;
context =
kgsl_context_get_owner(dev_priv, param->context_id); CGOTO;
...
Figure 3: Example function in the Qualcomm KGSL
GPU device driver after instrumentation with a bowknot.
(Up) Automatically-triggered, (Down) Manually-triggered
bowknot. The blue and bold text highlights the automatically
added code. The green and italic text highlights the manu-
ally added lines. The code presented here is slightly modiﬁed
from the actual function code and from the one generated by
Hecaton for better readability.
we instrument. Our exception handler code sets the redirection
ﬂag (bowknot_flag), which is a thread-speciﬁc ﬂag, and then
returns the execution back to the function resulting in a jump
to the undo block. In the previous example, assume that param
is null and results in a crash at line 19. The exception handler
is then invoked, sets the ﬂag, and resumes the execution in
the function (by skipping the crashing instruction), which
then executes the conditional goto statement in the same
line and jumps to the undo block. This condition is typically
false during normal execution in the kernel. Hence, we use the
compiler’s unlikely directive, which helps with performance
in normal execution by instructing the compiler to insert some
instructions in the binary to assist CPU’s branch prediction.
We also support automatic redirection for bugs detected by
a kernel sanitizer (if activated, e.g., during a fuzzing session).
In this case, we force-execute the kernel exception handler
for bugs detected by the sanitizers, e.g., memory safety bugs
detected by KASAN [11].
Note that automatically-triggered bowknots only get trig-
gered on system crashes and warnings generated by kernel
sanitizers. As a result, for non-crashing bugs that can poten-
tially result in kernel corruption, the security of automatically-
triggered bowknots depends on the appropriate use of kernel
sanitizers (e.g., KASAN and KMSAN) to catch the bug be-
fore the corruption happens. Although currently sanitizers are
enabled only during testing due to their memory and perfor-
mance overhead, there are recent efforts to enable efﬁcient
sanitizers to be used in deployed products as well [40] [25].
Manually-triggered bowknots. There are two important
scenarios when manually-triggered bowknots are desired or
needed. First, some bugs do not result in a crash nor are
detected by a kernel sanitizer. However, the security analyst
knows the condition under which the bug is triggered. In
this case, the analyst can add an explicit condition to the
function containing the bug to redirect the execution to the
undo block before the bug is triggered. Figure 3 (Down)
shows an example. In this (hypothetical) case, if the param
parameter is equal to a known global object, the behavior is
buggy resulting in the corruption of the object. Therefore, the
analyst can add the conditional block between lines 17 and 18
to jump to bowknot’s undo block. The analyst does not need
to generate the bowknot nor ﬁgure out which undo statements
need to be called. She only needs to determine where and
under what conditions the bowknot needs to be executed.
Second, in some production systems, instrumenting the
kernel exception handler or deploying a kernel sanitizer (as
needed for automatically-triggered bowknots) might not be
acceptable. In such cases, manually-triggered bowknots can
be used, even for simple bugs such as crash bugs.
4.2 Recursive Undo of Call Stack
When a bug is triggered, bowknot executes the undo code for
the function the bug is in. It then needs to undo the effects of
2386    30th USENIX Security Symposium
USENIX Association
the statements in the parent functions.
To do this, we undo the parent functions similar to the
buggy function. Figure 3 shows the parent function as well.
We perform the recursive undo through the use of the thread-
speciﬁc ﬂag mentioned earlier (current->bowknot_flag).
When returning from the buggy function, this ﬂag is set. More-
over, the parent function is also instrumented with the con-
ditional goto statements. Therefore, after returning from the
buggy function, the parent function jumps to its own bowknot
and executes its own undo code. This recursive undo contin-
ues until the syscall returns, at which point the ﬂag is cleared.
It is important to note that the bowknots in the parent func-
tions are always automatically-triggered. Only the last func-
tion in the stack might need manual triggering of the bowknot.
Also, note that it is feasible to rely on the existing error
handling blocks in some functions rather than using bowknots.
We use this approach for the ﬁrst few functions in the execu-
tion paths of a syscall, which receive a syscall and route them
to an underlying component to handle. As a practical guide-
line, when dealing with a bug in a speciﬁc kernel component,
e.g., a device driver, we only apply bowknots to the functions
in the path within the driver. When recursively undoing the
functions, the entry function in the kernel component sim-
ply returns an error, which is elegantly handled by existing
kernel code by routing the error to the user space. We take
this approach for two reasons. First, the functions parsing and
routing a syscall are triggered for every syscall and hence have
impact on the system’s performance. Second, these functions
are mature and have adequate error handling code, eliminating
the need to inject custom undo code for them.
5 Automatic Generation of Bowknots
In this section, we describe how Hecaton generates the undo
block of the bowknot automatically. Hecaton also automati-
cally instruments the designated kernel functions, which we
do not discuss further here.
We build Hecaton as a static analysis tool. It generates
the undo block by analyzing the entire kernel to infer the
relationship between state-mutating statements and their cor-
responding error handling undo statements. Hecaton achieves
so in two main steps: (i) generating a kernel-wide knowledge
database of function pairs and (ii) generating the undo block
using the database as well as function-level analysis. We next
describe these two steps.
5.1 Function-Pair Knowledge Database
The goal of the function-pair knowledge database is to store
pairs of functions that mutate and undo the kernel state. In
other words, a state-mutating function and an undo func-
tion are paired, if the latter undoes the effect of the for-
mer.
(kmalloc, kfree), (mutex_lock, mutex_unlock),
and (msm_camera_power_down, msm_camera_power_up)
are a few examples of such function pairs. The function-pair
knowledge database can be reused across various kernels,
e.g., the kernels of different Android devices, with minimal
changes. Therefore, our general approach is to automatically
extract function pair candidates, manually inspect them, and
add them to the database if veriﬁed. This approach provides
high conﬁdence in the database. Moreover, since generating
the database is mostly a one-time effort, the manual effort
is not signiﬁcant. (We provide some quantiﬁcation of the
manual effort later in this section and in §7.2).
Identifying function pair candidates. Hecaton statically
analyzes the entire kernel to identify function pair candidates.
It uses two methods to identify the candidates. First, it uses
the function names. In this method, Hecaton considers a
function pair as a candidate, if the names of two functions
only differ in one word and the difference is one of the
following: (put, get), (put, create), (release, get),
(release, create), (remove, create), (deinit, init),
(unregister, register), (unlock, lock), (down, up),
(disable, enable),
(unset,
set),
(stop, start),
(clear, set),
(suspend, resume),
(unmap,
map), (dequeue, enqueue), (unprepare, prepare), and
(detach, attach). Using this method, for example, Hecaton
found 540 pairs of function in the Linux kernel used in the
Pixel3 smartphone.
(disconnect, connect),
(free, alloc),
(sub, add),
(dec, inc),
Unfortunately, not all function pairs differ in one word
only. As a result, Hecaton employs a second method, in
which it uses existing error handling blocks in the kernel
to identify undo functions and then match them to candidate
state-mutating functions in the same function using string
matching. More speciﬁcally, Hecaton marks all the functions
in error handling blocks as undo functions. Then, for each
undo function, it matches it with a candidate state-mutating
function in the same function using similarity in their names
and input/output variables. For the similarity score, Hecaton
calculates the sum of the lengths of all mutually-exclusive
substrings. To do so, Hecaton ﬁnds the longest common sub-
string (LCS) and adds its length to the similarity score. Then
it deletes the LCS from both strings and repeats the previous
steps recursively until there is no common substring with
more than two characters.
Towards this goal, Hecaton needs to be able to identify error
handling blocks in the kernel. Hecaton does so by looking for
common conditional statements used to identify and handle an
error in the kernel. By investigating a large amount of kernel
code, we have identiﬁed four such conditional blocks includ-
ing (i) if (rc < 0) {...} where rc is an integer, (ii) if
(IS_ERR(p)) {...} or if (p == NULL) {...}, where p
is a pointer, (iii) if (...) {...; return ERROR;} where
ERROR is a constant negative integer, often one of the com-
monly used error numbers in the kernel such as -ENOMEM and
-EFAULT, and (iv) if (...) {...; goto LABEL;}. It also
considers simple variations of these four categories such as
USENIX Association
30th USENIX Security Symposium    2387
checking within the else block rather than the then block
for categories (iii) and (iv).
Once it identiﬁes the error handling blocks, Hecaton needs
to match the undo functions in them with state-mutating func-
tions. That is, it assumes that every undo function call state-
ment undoes the effects of a single state-mutating function
call in the same parent function. For example, kfree() is an
undo function statement that corresponds to the state-mutating
function statement kmalloc(). Hecaton uses the same heuris-
tic string matching discussed above to identify the candidates.
For example, kgsl_context_put(context) is paired with
context = kgsl_context_get_owner(...). To do this,
Hecaton calculates the string-based similarity score between
the undo statement and all statements prior to the correspond-
ing error handling block. It then chooses the function with the
highest similarity score. Using this method, for example, we
identiﬁed 1158 candidate pairs in the Pixel3 kernel (excluding
the pairs found using the previous method).
Manual inspection of function pair candidates. Not all
function pair candidates are true pairs of state-mutating and
undo ones. This is because the method discussed above, i.e.,
string matching, is not precise. Therefore, we perform manual
inspection on the candidates to identify the true pairs. In this
step, we use our knowledge of kernel code. In addition, we
use the frequency of appearances of a function pair candi-
date as a hint to facilitate the manual inspection. Pairs that
appear many times together in many functions are less likely
to be false pairs. Using manual inspection, in the case of the
Pixel3 kernel, we veriﬁed all 540 pairs identiﬁed using the
ﬁrst method and 658 of the function pairs identiﬁed using
the second one, bringing the total number of function pairs
in the database to 1198. This manual inspection took one of
the authors 7 days to complete. However, as mentioned, this
is largely a one-time effort. Supporting a new version of the
kernel or a new device driver adds a small number of new
candidate pairs, which can be veriﬁed fast. As an example,
once we had the database for the Pixel3 kernel, we ran our
static analysis tool on a Nexus 5X driver that we needed to
test. Doing so resulted only in 9 new candidate pairs, which
we quickly inspected. We evaluate the amount of manual
effort for x86 kernels in §7.2.
5.2 Generating the Undo Block
To generate the bowknot’s undo block, we need to identify
all the state-mutating statements in the function, and generate
the corresponding block. Hecaton is not currently able to
generate an undo statement, as it might require ﬁxing the
parameters passed to a function. Therefore, Hecaton tries to
reuse existing undo statements in a function and match them
with the state-mutating ones. If Hecaton does not ﬁnd a match
for an undo statement in a function, or if it does not ﬁnd a
match for a state-mutating one, it inserts a warning in the undo
blocks that it generates so that the analyst can manually ﬁx
the problem. Simply reusing existing statements is adequate
in a large number of functions (§7.1.1).
As mentioned, Hecaton attempts to ﬁnd all undo statements
in the function for which it generates the undo block. An undo
statement might be a function call or not. Hecaton uses the
knowledge database to identify all the undo function call state-
ments. For other undo statements, e.g., a counter decrement,
it relies on the error handling blocks in the function.
To identify the error handling block candidates, we use
the patterns often used for these blocks as discussed earlier.
In addition, we also inspect all blocks that have one of the
following jump statements in their bodies: break, continue,
return, and goto. If such a block contains an undo function
call (determined by consulting our knowledge database), we
mark that block as an error handling one as well. In addition
to the error handling blocks, some functions incorporate undo
statements prior to the return statement. For example, it is
common in kernel functions to allocate, acquire, enable, or
turn on a resource, perform a task on it and then free, release,
disable, or turn off that resource before returning a success
value. Hecaton reuses these undo statements as well.
Having all the undo statements, the next step is to ﬁnd their
corresponding state-mutating statements. For error handling
statements that are function calls, Hecaton uses its knowledge
database. If there are multiple instances of the same state-
mutating function, Hecaton chooses the one that shares more
variables with the error handling statement. For all other types
of statements, Hecaton uses string matching to pair them with
state-mutating statements.
Incompleteness and Conﬁdence Score
5.3
As mentioned, a small portion of bowknots generated automat-
ically by Hecaton are not complete and require manual amend-
ments. We analyze the underlying reasons for this incomplete-
ness through experiments and a case-by-case study. We enable
Hecaton to automatically detect features in functions that may
result in the generation of an incomplete bowknot. For each
generated bowknot, Hecaton provides a conﬁdence score, in-
dicating the probability of its effectiveness. Also, in cases that
manual effort is necessary, Hecaton highlights the function(s)
in the call stack that have the most negative effect on the
conﬁdence score and need manual corrections. Our experi-
ence and analysis show that six features play critical roles in
generating complete bowknots. We quantify these features
and linearly combine them into a single conﬁdence score us-
ing adjustable coefﬁcients. Finally, we tune these adjustable
coefﬁcients using real bugs (§7.1.3).
The ﬁrst feature we use is the location of the bug. Our
experience shows that if the last function of the call stack of
the bug is inside a kernel component (e.g., a device driver), it is
more likely that Hecaton could generate a complete working