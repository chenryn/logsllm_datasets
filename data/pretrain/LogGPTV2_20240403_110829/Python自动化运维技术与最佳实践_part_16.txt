(o pbsu  sa- ox
roles（*webservers*，*dbservers*)publictask任务函数同时引用两个角色佛将
def publictask() :
部署公共类环境，如epel、ntp 等
(**·dqu tada tree)aotto utad
×ith settings (warn_only=True) :
run (*rpm -Uvh http: //d1 fedoraproject,org/pub/epe1/6/x86_64/epe1-
release-6-8.noarch.rpm*)
run (“yun =y Instal1 stp*)
def deploy():
execute (publictask)
(saa) eoaxa
(xseaap) asnoaxa
本示例通过角色来区别不同业务服务环境，分别部署不同的程序包。我们只需要一个
Python脚本就可以完成不同业务环境的定制。
---
## Page 122
第7章系统批量运维管理器Fabric详解101
7.4.3示例3：生产环境代码包发布管理
程序生产环境的发布是业务上线最后一个环节，要求具备源码打包、发布、切换、回
滚、版本管理等功能，本示例实现了这一整套流程功能，其中版本切换与回滚使用了Limux
下的软链接实现。详细源码如下：
[ /home/test/fabric/simple6.py 1
:/usz/bin/env pyt.hon
from fabric.api import *
from fabric.colors inport *
from fabric.context_nanagers import *
from fabric.contrib.console import confirm
inport tine
env,user='root'
env.hosts=[*192.168.1.21*, *192.168.1.22′]
env,passrord=*LKs934h3*
env,project_dev_source = */data/dev/Lwebadnin/ *
开发机项目压缩包存储目录
开发机项目主目录
env project_taz_source = */data/dev/releases/*
env,project_pack_name = *release*
项目压缩气名前级，文件名为release.tar.gz
env,deploy_project_root - */data/vww/Lvebadmin/
项目生产环境主目录
env,deploy_release_dir = *releases*
项目发布目录。位于主目录下图
env.deploy_current_dir - *current*
对外服务的当前版本软链接
env, deploy_veraion=t.ine , strftime (*$Ytmtd) +*v2*
版水号
Bruns_once
def input_versionid():
获得用户输入的版本号，以便做脱本回涨操作
return prompt (*please input project rollback version ID:*,default=**)
ftask
gruns_once
def tar_source (): 
打包本地项目主目录，并将压缩包存储到本地压缩包目录
print yellow(*Creating source package..,")
vith 1cd (env-projeet_dev_source) :
1ocal (*tar =czf s,tar,gz -* $ (env-project_tar_source + env.project_pack_name))
print green (*Creating source package success!*)
eta8k
def put_package () :
上传任务函数
print yellow(*Start put package...)
vith settings (arn_only=True) :
with cd (env,deploy_project_root+env, deploy_release_dir) :
env,deploy_fu11_path=env,deploy_project_root + env,deploy_release_dir +
run (*mkdiz 4s* $ (env, deploy_version) )
创建版本目录
"/*+env,deploy_version
---
## Page 123
102第二部分高级篇
vith settings (varn_only=True) :
上传项目压综包至此目录
'x6*rea*+ eueuyoed4oaoxdaue +9oxnosa4oa[osdaua) nd - tnso
env.deploy_fu11_path)
If result.falled and no(*put fle falled, Continue[Y/N]?") :
abort(*Aborting fle put task!")
ith_cd (env,deploy_fu11_path) :
成功解压后期除压婚包
run ("tar -zxvE \s,tar gz* $ (env.project_pack_name))
run (*rm -rf %s.tar,gz* % (env.project_pack_name) )
print green (*Put & untar package success!")
def make_symlink (1 :
为当前版本目乘做款链换
print ye1lov (*update current symlink*)
env,deploy_ful1_path=env.deploy_project_root + env.deploy_release_dir +
"/*+env,deploy_version
vith settings (warn_only=True) 1
删除软链接，重新创建并指定软链源目录，新版本生效
run ("m -rf §s*  (env,deploy_project_root + env,deploy_current_dir) )
run ("1n -s $s $s* $ (env,deploy_ful1_path, env,deploy_project_root
env.deploy_current_dir))
print green (*nake symlink success!*)
ftask
def roliback():
版本团浓任务函数
print yellov(*rollback project version*)
versionid= input_versLonid ()
获得用户输入的因滚版本号
if versionidu=*';
abort(*Project version ID error,abortI*)
*/*+versionid
env,deploy_full_path=env,deploy_project_root + env,deploy_release_dir 4
run (*zm -f $s* $ env.deploy._project_root + env.deploy_current_dir)
run(*ln =s $s ss" & (env.deploy_ful1_path, env.deploy_project_root + env.
deploy_current_dir)）删除软链楼。重新创建并指定软链源目录，新版本生效
(isseoons xoeatrox)ueex6 xuad
etask
def go () : 
·自效免程序版本发事入口酒数
()aoxnos"ae3
put_package ()
() xuuxe
本示例实现了一个通用性很强的代码发布管理功能，支持快速部署与回滚，无论发布
还是回滚，都可以通过切换current的软链来实现，非常灵活。该功能的流程图如图7-5
所示。
---
## Page 124
第7章系统批量运维管理器Fabrlc详解103
系换管理员
开麦环
生产环境康群
0140309A2
.pfp
图7-5生产环境代码包发布管理流程图
在生产环境中Nginx的配置如下：
Index index.html index.htm index.php;
server_nane domain.con
root /data/w/Lwebadnin/current;
将站点根目录指向“/data/www/Lwebadmin/current"，由于使用Linux软链接做切换，管
理员的版本发布、回滚操作用户无感知，同时也规范了我们业务上线的流程。
7.2节fab常用参数说明参考http://docs.fabfile.org/en/1.8/官网文档。
---
## Page 125
Cl第8章
从“零”开发一个轻量级WebServer
当今互联网行业中，Web服务几乎覆盖所有业务，包括搜索、电商、社交、视频、游戏
等。作为该行业的从业人员，尤其是一名运维人员，深人了解HTTP协议的工作原理及机制
尤为重要，可以帮助运维人员对Web服务优化、运营提供理论指导。比如前端元素结构是
否合理，HTTP缓存配置是否与业务特性相符，HTTP压缩比应该如何选择等，通过这些优
化点可以提高业务服务质量，用户体验也会得到不少提升。本章节介绍作者开发的一轻量缓
WebServer一Yorserver，从一个WebServer所具备的基本功能出发，详细介绍每个功能点的
实现原理与方法。
8.1Yorserver介绍
8.1.1功能特点
Yorserver是基于Python实现的轻量级WebServer，具备一般WebServer的基本功能，支
持Linux i386与x86系统。Yorserver安装、配置都非常简单，其最新版本为1.0.1，具备以下
功能特点：
口支持自定义response服务及协议版本；
支持 Expires及max-age 功能；
口支持多进程或线程开启；
口支持错误页及默认页配置：
---
## Page 126
第8章从“零”开发一个轻量级WebServer105
口支持access_log及error_log 配置；
口支持gzip压缩配置：
口支持安全套连接服务HTTPS；
口支持HTTPMIME自定义配置；
支持PHP、Perl、Python 脚本cgi访问；
口支持配置文件。
Yorscrver程序目录结构及功能说明如图8-1所示，“可更改”表示支持配置文件定义，
另外需要确保cgi-bin中的CGI文件具备可执行权限，具体操作命令：chmod+x index.pl。
 yorsener
9&b
由-bin cm文作有量（可更次）
i key
 conf
项配透文排有目录
s航排、证书存放目录（可更改）
&i sbin
d logs
期基穿的目录（可患改)
P src
图8-1Yorserver 目录结构
运行：sbin/server.sh start，启动Yorserver服务。
8.1.2配置文件
Yorserver采用ConfigObj读取配置文件，ConfigObj是一个简单且功能强大的用于读写配
置文件的Python应用接口。提供一个简单的编程接口和一个简单的语法配置文件。Yorserver
完整的配置文件内容如下：
[ /usr/local/yorserver/conf/yorserver.conf ]
 server_version: Add response HrTP beader server version infornation,
server_version = *YorServerl.0*
 bind_ip: Allows you to bind yorserver to specific IP addresses.
bind_1p=*0.0.0.0*
+ sys_version: Add response HrrP header python version information.
08=120d
sys_version = "#
# protocol_version: Add response HTTP header protocol version.
protoco1_version = *HTTP/1.0*
 Expires1 Add response HTTP header Explres and Max-age version. format:d/h/n) 
Expires=*7d*
 Multiprocess1 configure yorserver Melti process support (on/off) .
Multiprocess="off*
 Multithreading: configure yorserver Multi threading support (on/off),
---
## Page 127
106第二部分高级篇
Multithreading=*on*
 DocumentRoot1 configure web server document root.
DocumentRoot=*/usr/1ocal/yorserver/wm*
 page404: configure web server deafult 404 page.
page404-*/404.htm1*
 Indexes: directory 1ist (on/off) .
Indexes=*off*
Indexpage: configure web server deafult index page.
indexpage=*/ Index,htm1*
 Logfile: configure veb server log tile path, disable logs Logfile="*,
Logfile=*/usr/1ocal/yorserver/logs/access.1og*
 errorfile: configure web server error file path.
errorfile=*/usr/local/yorserver/logs/error . 1og*
 gzip: Enable (on) or Disable(off) gzip options.
[dtz6]
configure compress 1evel (19)
gzip=*on*
ssl: Enable (on) or Disable (off) Htrps options,port options must configure
[ss1]
"443".
ss1=*off*
 configure privatekey and certificate pen.
privatekey=*/usr/1loca1/yorserver/key/server. key*
certificate="/usr/local/yorserver/key/server,crt*
[cgin]
cgl_moudle: Enable (on)or Disable (off) cgi support.
cg1_noudle="on*
 cgi_path: contigure cgi path,multiple cgi path use *,* delimited,cgi_path In
,uq-o/,=ed6o
bin directory-
 cgi_extensions: configure cgi file extension,
(,dqd·, ',rd: ,*,&d·, *,Tbo*,)=suoTsuaxa"bo
 contentTypes: configure file mime support.
[contentTypes]
,s80/2x91,=880
doc=*app1ication/msword*
gif="image/g1r*
gz=*app1ication/×-gz1p*
了解Nginx或Apahce配置的人对Yorserver的配置并不会陌生，读者可以尝试通过修改
不同参数值，来观察Web服务器与客户端表现出的差异，客户端可以使用HttpWatch工具来
跟踪。下面介绍Yorserver各个功能点具体的实现原理及方法。
8.2功能实现方法
Python默认自带的模块已经可以实现简单的HTTP服务器，如 BaseHTTPServer模块提
---
## Page 128
第8章从“零”开发一个轻量级WebServer107
供基本的Web服务和处理器类：SimpleHTTPServer模块包含GET与HEAD请求与处理支
持；CGIHTTPServer模块包含处理POST请求的支持。Yorserver是基于BaseHTTPServer模
块Web服务类HTTPServer扩展面来，同时也使用CGIHTTPServer模块提供CGI程序的接
收与执行。下面详细介绍各个功能点。
8.2.1HTTP缓存功能
（1） Expires 机制
在HTTP/1.1协议中，Expires字段声明了一个网页或URL地址不再被浏览器缓存的时
间，一旦超过了这个时间，测览器会重新向原始服务器发起新请求，在Yorserver中Expires
字段的配置如下，指定“Expires="7d"”，表示文件在客户端缓存7天。
 Expires1 Add response BrrP header Expires and Max-age version. formatid/h/
m(day/hour/minute) 。
Expires-*7d*
访问Yorserver 服务下的站点URL“http:/192.168.1.20/index2.html”，通过HttpWatch进
行跟踪，跟踪结果见图8-2，可见Expires字段显示“Tue，22Jul201423:18:49GMT”.请
求原始服务器时间Date字段为“Tue，15Jul201415:18:49GMT”.由于Date描述的时间为
世界标准时间，换算成本地时间需“+8”，即“Tue，15Jul201423:18:49”，加上配置的7天
（7d）过期值，结果等于Expires字段值。
Q, ra 3 tx
14 4 A 
图s-2返回的Expires字段信息
---
## Page 129
108第二部分高级篇
关于Yorserver实现文件过期Expires的方法，实现原理为返回“当前时间”+“配置过
期时间”，“过期时间”是通过datetime.timedeltaO方法转换不同单位时间后，再与“当前时间”
累加，“过期时间”支持通过days（日）、hours（小时）、minutes（分钟）等单位来表示，以下
为Yorserver文件过期Expires 的实现方法：
文伊过期Expires 实现方法
def get_http_expiry (_Expirestype,_num) :
if _Expirestype=*d*: 
当前时间+过期时间（E、小时、分钟)
expire_date = datetine,datetime-nou() + Gatetime,timedelta (day8=_num)
elif _Expirestype==*h":
expire_date = datetine,datetime.nov () + datetime,timedelta (hours=_nun)
return expire_date.strftine (*ha, ld tb &Y %B:iM:sS GMT*)
·格式化时间为
 Expires 格式
(2） max-age 机制
字段实现在原始服务器返回的max-age配置的秒数内，浏览器将不会发送相关请求到服务
器，而是由缓存直接提供，超过这一时间段后才向原始服务器发起请求，由服务器决定返回
新数据还是仍由缓存提供。与Expires不同，max-age是通过指定相对时间秒数来实现缓存过
期，当与 Expires 同时存在时，max-age 会覆盖 Expires。下面详细介绍 max-age的实现原理，
由于max-age与Expires 的时间结果是等价的，只是表现形式不同，因此只要得到其中一个
值都可以计算出另—个值。Yorserver是通过已知Expires值计算出max-age，实现源码如下：
定又过期时间类型，统一成“秒”单位
ExpiresTypes = {
*d*
*h*