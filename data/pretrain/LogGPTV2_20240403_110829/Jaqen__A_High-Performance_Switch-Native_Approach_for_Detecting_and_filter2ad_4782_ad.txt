in the seq. no. header ﬁeld while modifying the acknowl-
edgment number ﬁeld to a large out-of-window number
(e.g., +218). (b) When the client receives such a SYN-ACK
with a wrong ack. no., it realizes issues in the current TCP
handshake and generates an RST with the received seq. no.
(cookie), according to standard TCP specs [70]. (c) When
the RST packet is received by the switch and the cookie
is veriﬁed, the connection identity (e.g., 5-tuple) will be
added to an allowlist. Then the client will retry to estab-
lish a connection. Note that this proxy can also be used as
mitigation for DNS trafﬁc carried over TCP.
Extra connection setup time: This mode requires the
client to retry a SYN to establish the connection. As we
show in Table 4, most legitimate clients should retry the
4The expected collisions for a sequence of n values and a hash function
m )n.
of m values, can be calculated using birthday paradox as n− m + m( m−1
Figure 6: On-switch SYN Proxy workﬂows.
We can treat it as a high-performance, trustworthy registry
service for certain protocols. For instance, we can leverage
this function to build a high-performance DNS cache.
3. Update: After the analysis step, the (suspicious) trafﬁc has
been marked with a label (e.g., benign). As the ﬁnal step of
the mitigation, we may want to update an allow/blocklist or
rate limiter to allow/block or rate limit the succeeding trafﬁc
from that ﬂow. Since the ﬁltering functions are placed ahead
of the analysis components in the switch pipeline, we need
either the switch controller or packet recirculation to update a
list, as the following two API calls.
• ReportCtr(identity,type) requests to update one type of
the ﬁltering lists (i.e., blocklist, allowlist, and rate limiter)
via switch controller. Speciﬁcally, the packet will be mir-
rored to the controller CPU via a dedicated PCIe lane and
write information (identity) back to the switch data plane
via the control API.
• Recirculate(identity,type) implements a similar update
functionality without going through the switch controller.
Speciﬁcally, this API function modiﬁes a mirrored packet
and recirculates it to the ingress port to update a ﬁltering
list with the required ﬂow identity.
Hardware constraints: When using these two update func-
tions, we as developers need to pay close attention to the
hardware constraints: (1) The PCIe lane between the switch
data plane and the control CPU has limited bandwidth (e.g.,
100Gbps). It is impossible to process every packet on the
controller, especially when the throughput is at a Tbps level.
Thus, as shown in our mitigation examples later, we update
the allow/block/rate-limit lists only when necessary. Take
SYN ﬂood mitigation as an example; we do not perform an
update for every attack ﬂow but update the allowlist only
when legitimate clients pass DropFirstSYN and SYN Proxy
tests successfully. (2) Packet recirculation affects the switch
processing capability. For example, recirculating every packet
will halve the total capability. We can perform recirculations
without performance degradation when the effective through-
put is lower than the switch limit. But as a general rule, any
mitigation strategy should control the expected number of
recirculated packets.
3836    30th USENIX Security Symposium
USENIX Association
ClientSwitchServerSYNError SYN-ACK w/cookieRSTw/cookieSYN-ACKSYNACKCookieVerify cookie +allowlist(a) SYN proxy mode 1.ClientSwitchServerSYNSYN-ACK w/cookieACKw/cookie+1Verify cookie +allowlist(b) SYN proxy mode 2.RSTSYN-ACKSYNACKClient
Wget (Ubuntu)
Curl (Ubuntu)
Chrome (Ubuntu)
Chrome (Android)
Safari (iOS)
Firefox (Windows)
Retried Conn.
Setup Time
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
2.1s (Local Testbed)
2.1s (Local Testbed)
1.5s (Local Testbed)
1.8s (Campus VPN)
1.3s (Campus VPN)
1.9s (Campus VPN)
Table 4: Connection setup time in SYN Proxy Mode 1.
Figure 8: Example network-wide resource management on a
simpliﬁed Claranet topology [71].
from a legitimate client via HeaderHashAndTest(conn,synack)
(SYNProxy). If this client passes the SYN cookie analysis, we
will update the allowlist accordingly using Recirculate. The
succeeding trafﬁc from this legitimate client will be allowed
without going through the analysis modules.
In DNS ampliﬁcation, DNS trafﬁc will go through a rate
limiter to control the per-source rates using RateLimit. If a
DNS reply has not been requested from a valid client be-
fore, we mark this packet as “unmatched” and drop it via
UnmatchAndAction(drop,dns); Otherwise, we will forward this
reply to the destination. Once the unmatched DNS replies
from certain sources exceed a threshold (using detection),
we will update the rate limiter to control the rate from these
sources via ReportCtr.
6 Network-wide Resource Manager
In an ISP, Jaqen needs to deploy mitigation modules as they
are needed in the network, with minimized possible switch
hardware resources. This minimization is to help preserve
resources for other ISP services and to reduce the number of
deployed modules for faster reaction. We describe a resource
allocation problem that Jaqen needs to solve as a mixed in-
teger program (MIP) and present a heuristic algorithm that
returns a near-optimal allocation. As an example, Figure 8
shows the mitigation resource allocation on a simple topol-
ogy. Compared to the solver-based allocation, our algorithm
achieves better responsiveness given the scale of an ISP.
Problem inputs. Our basic assumption in the network-wide
setting is that the ISP has available hardware resources on
the path for potential DDoS attacks; we cannot mitigate the
attacks otherwise.
• Network topology and mitigation modules: We deﬁne the
ISP network topology as an undirected graph G = (V,E),
where V is the set of all switch nodes that carry network
trafﬁc and have enabled programmability and E is the
set of interconnected links. We deﬁne V = {v1,v2, . . . ,vn}
where each vi is a vector of available information about
Switch i. For instance, vi =
where AvailResi is the number of available programmable
pipelines, Bandi is the allowed bandwidth, and Typei is the
Figure 7: Mitigation strategy examples.
connection. In fact, a retried SYN is a best-practice indica-
tor to ﬂag legitimate connections ([28]).
• SYNProxyMode2 is an alternative SYN proxy design on
switches. In SYNProxyMode1, there can be a wait time
between the RST (w/ cookie) is sent from the client and
the client starts to retry the connection with a new SYN.
This wait time is usually not long (within a few seconds)
depends on the client implementation. To reduce this wait,
we also consider an alternative design that asks the client to
resend the SYN immediately, as shown in Figure 6(b). This
mode uses the same logic as original SYN proxy but will
reply an RST to the client once the cookie is veriﬁed. In
the midst of an unsuccessful connection initialization, the
client usually resends a SYN to reestablish the connection
once an RST is received.
Mitigation strategy examples. Using our mitigation API,
Jaqen supports sophisticated and best practice mitigation
strategies for volumetric attacks. We brieﬂy summarize a
broad range of volumetric attacks and Jaqen’s mitigation in
Table 16. To illustrate the use of the API, we describe two rep-
resentative examples on mitigating SYN ﬂood and DNS am-
pliﬁcation with sophisticated defense strategies, as depicted
in Figure 7. In addition to DNS ampliﬁcation, Figure 7(b)’s
workﬂow can be applied to other ampliﬁcation attacks. Both
examples ﬁt in a single switch pipeline.
In SYN ﬂood, the suspicious trafﬁc will ﬁrst go through
a BlockList and an AllowList. If the packet passes the lists
and is a ﬁrst-time SYN, we drop it via ActionAndTest(drop,
firstsyn) (DropFirstSYN) to reduce the trafﬁc for SYN proxy
analysis. If this SYN is not a ﬁrst-timer, we analyze if it is
USENIX Association
30th USENIX Security Symposium    3837
SYN?DropFirstSYNYBlockListDropYPassAllowListSYN Prox(cid:92)NYRecirculateRepl(cid:92) w/CookieNTraf(cid:192)cDropNYBenignTest(a) SYN flood mitigationU(cid:81)(cid:80)a(cid:87)c(cid:75)&D(cid:85)(cid:82)(cid:83)Ra(cid:87)eL(cid:76)(cid:80)(cid:76)(cid:87)D(cid:85)(cid:82)(cid:83)YDNST(cid:85)a(cid:73)(cid:192)cNRe(cid:83)(cid:82)(cid:85)(cid:87)C(cid:87)(cid:85)U(cid:80)a(cid:87)c(cid:75)ed>T(cid:75)(cid:85)e(cid:86)(cid:75)(cid:82)(cid:79)dPa(cid:86)(cid:86)D(cid:85)(cid:82)(cid:83)YN(b) DNS amp. mitigationIngressEgressEgressDetection[0.3 SYN, 0.2 DNS,0.2 NTP][0.2 SYN,0.2 DNS][0.1 SYN,0.2 NTP]Avail. Res.: 2Avail. Res.: 1[0.2SYN][0.1SYN][0.2 NTP]Avail. Res.: 3[0.2NTP]Avail. Res.: 1Egress[0.2 DNS][0.1DNS][0.1 DNS][0.1DNS]Avail. Res.: 2Switch w/ detectionSwitch w/ mitigationOther switchMinimize: TotalRes, subject to
TotalRes = ∑
∀i : ∑
TotalAvailRes = ∑
∑
Alloci, j
Alloci, j ≤ AvailResi
i
j
j
∀i, j : Alloci, j ∈ {0,1, . . . ,TotalAvailRes}
AvailResi
i
(1)
(2)
(3)
(4)
∀d,e,k : Nd,e,k ⊆ {1 . . .i}
(5)
Alloci∈Nd,e,k, j ∗MCapi, j,k ≥ AttackVold,e,k (6)
∀d,e,k : ∑
i
∑
j
∀e,d,k : ∑
i
∑
j
Alloci∈Nd,e,k, j ∗ BCapi, j,k ≥ ResVole,d,k
∀i : ∑
j
∑
k
Alloci, j ∗ (MCapi, j,k + BCapi, j,k) ≤ Bandi
(7)
(8)
Figure 9: MIP to compute optimal resource allocation
hardware type of the programmable switch. Further, the
mitigation capability of module j on switch i for attack
k is given as MCapi, j,k and the processing capability for
reverse trafﬁc is BCapi, j,k.
• ISP routing and Trafﬁc Engineering information: We as-
sume the ISP has a controller that maintains and imple-
ments the routing and trafﬁc engineering decision for all
the network trafﬁc that passes through the ISP. For instance,
in a software-deﬁned network (SDN), the (virtually) cen-
tralized controller maintains the routing decisions for each
network ﬂow on each switch. In our network-wide set-
ting, we have the aggregated trafﬁc distribution informa-
tion at the controller level, which is deﬁned as Bandi,k for
switch i, trafﬁc type k , e.g., Bandi,DNS =
and Bandi,SYN =.
Problem statement. Given the problem inputs from the ISP,
we deﬁne our network-wide resource allocation problem. In-
tuitively, based on the existing trafﬁc distribution, we want to
minimize the usage of hardware resources while still cover
all attack trafﬁc from all ingresses. We deﬁne a MIP formula
in Figure 9 with constraints and deﬁnitions described below:
• Eq. (1) deﬁnes the total allocated resource as TotalRes,
which is the aggregation of the resource allocated for each
switchi and module j.
• Eq. (2) ensures that the module resource allocation on any
switch will not go over the available resource budget.
• Eq. (3) deﬁnes the total available resource as the sum of
the available resources on all switches.
• Eq. (4) deﬁnes the number of allocated module j as an
integer from total available resource.
• Eq. (5) deﬁnes the switch set that route the trafﬁc of Attack
k from Ingress d to Egress e. This information is given from
Algorithm 1 Greedy Algorithm for Resource Allocation
1: Inputs:
2: Topology graph G = (V,E) with IN as the ingress set and EG
as the egress set
3: Routing info Routei for each switch
4: Ingress d ∈ IN, egress e ∈ EG, and attacks k ∈ K
5: ∀d,e,k: Nd,e,k
6: ∀i ∈ |V|: AvailResi
7: ∀d,e,k: AttackVold,e,k and initialize AttackVold,e,k,i
8: ∀d,e,k: ResVole,d,k and initialize ResVole,d,ki
9: ∀k,i, j: MCapi, j,k and BCapi, j,k
10: procedure GREEDYHEURISTIC(D(m,n))
11:
12:
13:
14:
15:
16:
17:
18:
19:
BFS with AttackVold,e,k and Routei
→ update AttackVold,e,k,i
BFS with ResVole,d,k and Routei
→ update ResVold,e,k,i
Sort Nd,e,k by AttackVold,e,k,i∈Nd,e,k
Sort the (d,e) paths P by total volume of the attacks.
for p in P do
for e in EG do
for d in IN do
20:
21:
22:
23:
for d in IN do
for e in EG do