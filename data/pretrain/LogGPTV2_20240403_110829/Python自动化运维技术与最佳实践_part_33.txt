---
## Page 271
250第三部分案例篇
fcoding:utf-8
import sys
import socket
lmport fcnt1
import 1ogging
import struct
from contig inport *
1mport ur11ib,httplib
socket ,setdefaulttimeout (Connect_TimeOut)
设置全局Socket超时时网（覆盖 HTTP 连
接短时)
logging-basicConfig (level=1ogging.0e8UG,
启用日志记录
format=*$ (asctime) a [3 (levelnane) s] (message)s′,
fl1emode=*a*)
对s（history1）售惠进行合法校极，夕于6个参数则报错，正确的格式为“173root 2014-06-07
,9t 95190122
1f len (sys .argv) LastID”，从面达到实时获取最新记录
的目的，同时也支持选择主机来作为过滤条件，功能实现流程图见图14-5。
Dhdory_cmand
ser_hiatoyR
1
ls/hona
2
cd-
uptine
4
tee-m
5
do
6
pi
tree -
8 08.9
场3秒调
图14-5前端数据展示流程图
omaudit_runO方法实现源码如下：
-事件任务前增展示方法
def omaudit_run (request) :
if not *LastID' in request.GET:
获取上次查询到的最新记录ID
LastID=**
else:
LastID=request,GET[*LastID′]
if not *hosts′ in request,GET:
获取选择的主机地址信息
*,=S1SOH
eLse1
Hosts=request.GET[*hosts']
ServerHistory_string=**
---
## Page 275
254第三部分案例篇
host_array=target_host (Hosts, "IP*) ,8plit (*:*)
调用 target_host 方法过滤出 IP 地址
if LastID==*0*:
特合第一次提交条件，查询不加“id>LastID”条件，反之
if Hosts"=*";
特合没有选择主机条件。查询不加“hiatory_ip in host_array”
条件，反之
ServerlistoryObg - Serverlistory,objects 1
.order_by (*id*) [:5]
else1
ServerHistoryObj - Serveriiatory.objects \
fltex (history_ip_in=host_array) ,order_by (*id′) [:5]
else1
if Hosts==**:
ServerlistoryObj = ServezRiatory.objects \
flter(id__gt=LastID) order_by(*-1d′)
e1se1
ServerlistoryObj - Serverlistory.objects \
flter (id_gt=LastIo,history_1p__in=host_array) ,order_by (*-Id′)
Lastid=**
for e in ServezliatoryObj:
L =0
遍历查询继果，返国给前墙
f {==0:
lastid=e.1d
ServerHistory_string+=""+e.history_ip+ \
*6nbsp;&nbsp\t*+ e.history_user+*6nbsp, &nbsp/\t*+ \
stx(e-db_datet.ime) +*\t  *+e.history_command+***
1+=1
ServerHistory_string+="ee*+str (lastid)
通过“09”字将分照事件记录与1ast1d.
return HttpResponse (ServerHistory_string)
官端拆分
（2）数据接收（omaudit_pull）方法
数据接收方法相对比较简单，即将接收到的信息直接入库，实现的源码如下：
= 事件任务 pu11 方法
def omaudit_pull (request) :
if request,method = 'GEr' : 
校验 HTTP（GET）请求参数合法性
if not request.G&T.get ('history_id', **):
if not request.G&r,get (*history_ip', **):
return HttpResponse (*history_id nul1*)
return BttpResponse (*history_ip nul1*)
if not reqvest.G&T.get (*history_user′, **):
return HttpResponse (*history_user nul1")
if not request.GBr.get ('history_datetine*,
**) 1
return HttpResponse (*history_datetime nul1*)
If not request.GsT.get (*history_command*,
return 8ttpResponse (*history_command nu11*)
---
## Page 276
第14章打造Linux系统安全审计功能255
history_id=request.GEr[*history_id*]
获取HTTP请求参数值
history_ip=request.GEr[*history_ip′)
history_user=request ,GEr(*history_user*]
history_datetime=request.GET[*history_datetime*]
history_command=request.G8r[*history_command*]
historyob] = ServerHistory (history_id=history_id, \
数据入库（insert)
history_user=history_user, \
history_ip=history_ip, \
history_command=history_command)
history_datetime=history_datetime, \
try:
h1storyobj save ()
except Exception, e:
return 目ttpResponse(*入库失版。请与管理员联系！“+str（e))
return HttpResponse (Response_result)
:0819
当然，如接入的集群过于庞大，服务器端数据库会逐步形成瓶颈，主机审计信息人库会
出现一定延时，影响Linux用户操作体验，一个可行的方案是采用信息异步人库，即先将信
息写人本地，再通过上报程序后台提交信息，用户将无感知。
---
## Page 277
" *
**1
Clydri
第15章
构建分布式质量监控平台
中国互联网呈多运营商并存的发展格局，一个注重用户体验的业务平台，在上线前就必
须解决多运营商互联互通的问题，例如电信、联通、移动等网络的接人。目前有两个常见方
案，一是将服务器资源放置不同运营商的IDC，二是直接接入支持BGP协议的IDC。在此之
后，我们还要考虑监控不同运营网络访问业务平台的质量问题，例如骨干网络路由延时或调
度不合理甚至网络故障，导致访问业务网络出现延时、丢包等现象，影响用户体验。因此，
必须提供一种分布式（多运营商支持）的业务服务质量监控机制。本章通过实现一套分布式
的质量监控平台整体进行说明。
15.1平台功能介绍
分布式质量监控平台实现了多个数据采集点（不同运营商链路）对Web业务平台进
行探测，采集的信息包括DNS解析时间、建立连接时间、准备传输时间、开始传输时
间、传输总时间、HTTP状态、下载数据包大小、下载速度等，覆盖了HTTP请求的整个
生命周期。分析这些数据，可以帮助我们快速发现（异常告警）、定位访问业务延时过大
问题。通过RRDTOOL做数据报表展示，报表类型包括请求响应时间、下载速度、可用
性的自定义、日、月、年等，可以让管理员了解业务服务质量的整体趋势，平台截图见
° 1-S1 l
---
## Page 278
第15章构建分布式质量监控平台257
业务质量监控
服业员：[汽]
提交添加用
111:21
图15-1平台首页截图
15.2系统构架设计
分布式质量监控平台由三种不同功能角色组成，第一种为数据采集探测功能，采用
Python+pycurl模块实现数据的采集并人库MySQL；第二种为后台定时rrdtool作业，实现
MySQL数据导出并更新RRDTOOL，采用了Python+rrdtool模块实现；第三种为Web报表
展示，采用Django+MySQL+rrdtool模块实现，服务器端采用了Nginx+uwsgi构建高效的
Web服务，根据管理员发起的请求条件输出不同类型的报表。系统架构图见图15-2。
从图15-2中可以看出系统的整体架构，首先通过不同采集点向业务服务集群发起定时
探测任务，将获取的响应数据入库MySQL，异常返回信息将触发告警。功能模块定时从
MySQL数据库拉取数据做rdtoolupdate操作，为后续的报表输出提供数据支持。最后管理
员通过前端Web页面查询、定制输出报表，整个流程结束。
---
## Page 279
258第三部分案例篇
让务服异集群
生鼠
报表