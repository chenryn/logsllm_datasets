# 【缺陷周话】第29期：返回栈地址
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 2、 返回栈地址的危害
返回栈地址通常会导致程序运行出错，原因是函数指向的地址中的内容随着函数生命周期结束而被释放了，此时指针指向的内容是不可预料的，对返回的栈地址进行访问会导致未定义的行为，甚至可能造成程序崩溃。
## 3、示例代码
示例源于Samate Juliet Test Suite for C/C++ v1.3
(https://samate.nist.gov/SARD/testsuite.php)，源文件名：CWE562_Return_of_Stack_Variable_Address__return_buf_01.c。
### 3.1缺陷代码
在上述示例代码中，在第14行声明和初始化了一个字符数组，并在17行使用 return charString;
进行返回，此时返回的是栈地址。因此该示例存在“返回栈地址”问题。
使用360代码卫士对上述示例代码进行检测，可以检出“返回栈地址”缺陷，显示等级为高。如图1所示：
图1：返回栈地址的检测示例
### 3.2 修复代码
在上述修复代码中，Samate 给出的修复方式为： 在第14行将字符数组定义为 static，当 static
用来修饰局部变量的时候，它就改变了局部变量的存储位置，从原来的栈中存放改为静态存储区，因此在第21行 return charString;
时，避免了返回栈地址。同时 Samate 样本也指出这并不是一个完全的顺应性例子，需要根据实际场景来针对性修复。
使用360代码卫士对修复后的代码进行检测，可以看到已不存在“返回栈地址”缺陷。如图2：
图2：修复后检测结果
## 4、如何避免返回栈地址
（1）注意指针指向的内存，避免返回栈地址。
（2）使用源代码静态分析工具，可以有效发现这类问题。