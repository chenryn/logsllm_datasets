.B \-gstabs+
以 stabs 格式 (如果支持) 输出 调试信息, 使用 只有 GNU 调试器 (GDB)
理解的 GNU 扩展. 使用 这些扩展 有可能 导致 其他 调试器 崩溃 或 拒绝
读入 程序.
.TP
.B \-gcoff
以 COFF 格式 (如果支持) 输出 调试信息. 这是 在 System V 第四版 以前
的 大多数 System V 系统 上 SDB 使用 的 格式.
.TP
.B \-gxcoff
以 XCOFF 格式 (如果支持) 输出 调试信息. 这是 IBM RS/6000 系统
上 DBX 调试器 使用 的 格式.
.TP
.B \-gxcoff+
以 XCOFF 格式 (如果支持) 输出 调试信息, 使用 只有 GNU 调试器 (GDB)
理解的 GNU 扩展. 使用 这些扩展 有可能 导致 其他 调试器 崩溃 或 拒绝
读入 程序.
.TP
.B \-gdwarf
以 DWARF 格式 (如果支持) 输出 调试信息. 这是 大多数 System V 第四版
系统 上 SDB 使用 的 格式.
.TP
.B \-gdwarf+
以 DWARF 格式 (如果支持) 输出 调试信息, 使用 只有 GNU 调试器 (GDB)
理解的 GNU 扩展. 使用 这些扩展 有可能 导致 其他 调试器 崩溃 或 拒绝
读入 程序.
.PP
.BI "\-g" "level"
.br
.BI "\-ggdb" "level"
.br
.BI "\-gstabs" "level"
.br
.BI "\-gcoff" "level"
.BI "\-gxcoff" "level"
.TP
.BI "\-gdwarf" "level"
请求 生成 调试信息, 同时 用 \c
.I level\c
\& 指出 需要 多少 信息. 默认的 level 值 是 2.
.Sp
Level 1 输出 最少量 的 信息, 仅够 在 不打算 调试 的 程序段 内 backtrace.
包括 函数 和 外部变量 的 描述, 但是 没有 局部变量 和 行号 信息.
.Sp
Level 3 包含 更多的 信息, 如 程序中出现 的 所有 宏定义. 当 使用 `\|\c
.B \-g3\c
\&\|' 选项 的 时候, 某些 调试器 支持 宏扩展.
.TP
.B \-p
产生 额外代码, 用于 输出 profile 信息, 供 分析程序 \c
.B prof\c
\& 使用.
.TP
.B \-pg
产生 额外代码, 用于 输出 profile 信息, 供 分析程序 \c
.B gprof\c
\& 使用.
.TP
.B \-a
产生 额外代码, 用于 输出 基本块 (basic block) 的 profile 信息,
它 记录 各个 基本块 的 执行 次数, 供 诸如 \c
.B tcov\c
\& 此类 的 程序 分析.  但是 注意, 这个 数据格式 并非 \c
.B tcov\c
\& 期待的. 最终 GNU \c
.B gprof\c
\& 将 处理 这些数据.
.TP
.B \-ax
产生 额外代码, 用于 从 'bb.in' 文件 读取 基本块 的 profile 参数, 
把 profile 的 结果 写到 'bb.out' 文件.
`bb.in' 包含 一张 函数 列表. 一旦 进入 列表 中的 某个 函数, profile 操作
就 开始, 离开 最外层 的 函数 后, profile 操作 就 结束.
以 `-' 为 前缀名 的 函数 排除在 profile 操作 之外. 
如果 函数名 不是 唯一的, 它 可以 写成
`/path/filename.d:functionname' 来 澄清. `bb.out' 将 列出 一些 有效的
文件名. 这四个 函数名 具有 特殊含义:
`__bb_jumps__' 导致 跳转 (jump) 频率 写进 `bb.out'.
`__bb_trace__' 导致 基本块 序列 通过 管道 传到 `gzip', 输出 `bbtrace.gz' 文件.
`__bb_hidecall__' 导致 从 跟踪 (trace) 中 排除 call 指令.
`__bb_showret__' 导致 在 跟踪 中 包括 返回指令.
.TP
.BI "\-d" "letters"
编译 的 时候, 在 \c
.I letters\c
\& 指定 的 时刻 做 调试转储 (dump). 用于 调试 编译器.
大多数 转储 的 文件名 通过 源文件名 添加 字词 获得 (例如  `\|\c
.B foo.c.rtl\c
\&\|' 或 `\|\c
.B foo.c.jump\c
\&\|').
.TP
.B \-dM
预处理 结束 的 时候 转储 所有的 宏定义, 不输出到 文件.
.TP
.B \-dN
预处理 结束 的 时候 转储 所有的 宏名.
.TP
.B \-dD
预处理 结束 的 时候 转储 所有的 宏定义, 同时 进行 正常 输出.
.TP
.B \-dy
语法分析 (parse) 的 时候 在 标准错误 转储 调试信息.
.TP
.B \-dr
RTL 阶段 后 转储到 `\|\c
.I file\c
.B \&.rtl\c
\&\|'.
.TP
.B \-dx
仅对 函数 生成 RTL, 而不是 编译. 通常 和 `\|\c
.B r\c
\&\|' 联用.
.TP
.B \-dj
第一次 跳转优化 后 转储到 `\|\c
.I file\c
.B \&.jump\c
\&\|'.
.TP
.B \-ds
CSE (包括 有时候 跟在 CSE 后面的 跳转优化) 后 转储到 `\|\c
.I file\c
.B \&.cse\c
\&\|'.
.TP
.B \-dL
循环优化 后 转储到 `\|\c
.I file\c
.B \&.loop\c
\&\|'.
.TP
.B \-dt
第二次 CSE 处理 (包括 有时候 跟在 CSE 后面的 跳转优化) 后 转储到 `\|\c
.I file\c
.B \&.cse2\c
\&\|'.
.TP
.B \-df
流程分析 (flow analysis) 后 转储到 `\|\c
.I file\c
.B \&.flow\c
\&\|'.
.TP
.B \-dc
指令组合 (instruction combination) 后 转储到 `\|\c
.I file\c
.B \&.combine\c
\&\|'.
.TP
.B \-dS
第一次 指令安排 (instruction schedule) 后 转储到 `\|\c
.I file\c
.B \&.sched\c
\&\|'.
.TP
.B \-dl
局部寄存器分配 后 转储到 `\|\c
.I file\c
.B \&.lreg\c
\&\|'.
.TP
.B \-dg
全局寄存器分配 后 转储到 `\|\c
.I file\c
.B \&.greg\c
\&\|'.
.TP
.B \-dR
第二次 指令安排 (instruction schedule) 后 转储到 `\|\c
.I file\c
.B \&.sched2\c
\&\|'.
.TP
.B \-dJ
最后一次 跳转优化 后 转储到 `\|\c
.I file\c
.B \&.jump2\c
\&\|'.
.TP
.B \-dd
推迟分支调度 (delayed branch scheduling) 后 转储到 `\|\c
.I file\c
.B \&.dbr\c
\&\|'.
.TP
.B \-dk
寄存器\-堆栈转换 后 转储到 `\|\c
.I file\c
.B \&.stack\c
\&\|'.
.TP
.B \-da
产生 以上 所有的 转储.
.TP
.B \-dm
运行结束后, 在 标准错误 显示 内存使用统计.
.TP
.B \-dp
在 汇编输出 加注 指明 使用了 哪些 模式 (pattern) 及其 替代模式.
.TP
.B \-fpretend\-float
交叉编译 的 时候, 假定 目标机 和 宿主机 使用 同样的 浮点格式. 
它 导致 输出 错误的 浮点常数, 但是 在 目标机 上 运行 的 时候, 
真实的 指令序列 有可能 和 GNU CC 希望 的 一样.
.TP
.B \-save\-temps
保存 那些 通常 是 \*(lq临时\*(rq 的 中间文件; 置于 当前目录 下,
并且 根据 源文件 命名. 因此, 用 `\|\c
.B \-c \-save\-temps\c
\&\|' 选项 编译 `\|\c
.B foo.c \c
\&\|' 会 生成 `\|\c 
.B foo.cpp\c
\&\|' 和 `\|\c
.B foo.s\c
\&\|' 以及 `\|\c
.B foo.o\c
\&\|' 文件.
.TP
.BI "\-print\-file\-name=" "library"
显示 库文件 \|\c
.nh
.I library
.hy
\&\| 的 全路径名, 连接 时 会 使用 这个库 \(em\& 其他 什么事情 都不作.
根据 这个选项, GNU CC 既不编译, 也不连接, 仅仅 显示 文件名.
.TP
.B \-print\-libgcc\-file\-name
和 `\|\c
.B \-print\-file\-name=libgcc.a\c
\&\|' 一样.
.TP
.BI "\-print\-prog\-name=" "program"
类似于 `\|\c
.B \-print\-file\-name\c
\&\|', 但是 查找 程序 program 如 `\|\c
.B cpp\c
\&\|'.
.SH "优化选项 (OPTIMIZATION OPTION)"
这些选项 控制 多种 优化措施:
.TP
.B \-O
.TP
.B \-O1
优化. 对于 大函数, 优化编译 占用 稍微多 的 时间 和 相当大 的 内存.
.Sp
不使用 `\|\c
.B \-O\c
\&\|' 选项 时, 编译器 的 目标 是 减少 编译 的 开销, 使 编译结果 能够 调试.
语句 是 独立的: 如果 在 两条语句 之间 用 断点 中止 程序, 你 可以 对
任何 变量 重新 赋值, 或者 在 函数体 内 把 程序计数器 指到 其他语句,
以及 从 源程序 中 精确地 获取 你 期待 的 结果.
.Sp
不使用 `\|\c
.B \-O\c
\&\|' 选项 时, 只有 声明了 \c
.B register\c
\& 的 变量 才 分配使用 寄存器.  编译结果 比 不用 `\|\c
.B \-O\c
\&\|' 选项 的 PCC 要 略逊一筹.
.Sp
使用了 `\|\c
.B \-O\c
\&\|' 选项, 编译器 会试图 减少 目标码 的 大小 和 执行时间.
.Sp
如果 指定了 `\|\c
.B \-O\c
\&\|' 选项, `\|\c
.B \-fthread\-jumps\c
\&\|' 和 `\|\c
.B \-fdefer\-pop\c
\&\|' 选项 将被 打开. 在 有 delay slot 的 机器 上, `\|\c
.B \-fdelayed\-branch\c
\&\|' 选项 将被 打开. 在 即使 没有 帧指针 (frame pointer) 也支持 调试 
的 机器 上, `\|\c
.B \-fomit\-frame\-pointer\c
\&\|' 选项 将被 打开. 某些机器 上 还可能会 打开 其他选项.
.TP
.B \-O2
多优化一些. 除了 涉及 空间 和 速度 交换 的 优化选项, 执行 几乎 所有的
优化工作. 例如 不进行 循环展开 (loop unrolling) 和 函数内嵌 (inlining). 和 \c
.B \-O\c
\& 选项 比较, 这个选项 既增加了 编译时间, 也提高了 生成代码 的 运行效果.
.TP
.B \-O3
优化的更多. 除了 打开
.B \-O2
所做的 一切, 它 还 打开 了
.B \-finline\-functions
选项.
.TP
.B \-O0
不优化.
.Sp
如果 指定了 多个
.B \-O
选项, 不管 带不带 数字, 最后一个 选项 才是 生效 的 选项.
.PP
诸如 `\|\c
.B \-f\c
.I flag\c
\&\c
\&\|' 此类 的 选项 描述 一些 机器无关 的 开关. 大多数 开关 具有 肯定 和 
否定 两种格式; `\|\c