An outline of the updated code should look like this:
### [C\#](#tab/csharp)
```csharp
using Kusto.Data;
using Kusto.Data.Net.Client;
using Kusto.Data.Common;
using Kusto.Ingest;
using System.Data;
namespace BatchIngest {
  class BatchIngest {
    static void Main(string[] args) {
      ...
      string singleLine = "2018-01-26 00:00:00.0000000,2018-01-27 14:00:00.0000000,MEXICO,0,0,Unknown,\"{}\"";
      var stringStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(singleLine));
      using (var kustoClient = KustoClientFactory.CreateCslQueryProvider(clusterKcsb))
      using (var ingestClient = KustoIngestFactory.CreateQueuedIngestClient(ingestKcsb)) {
        string database = "";
        string table = "MyStormEvents";
        ...
        Console.WriteLine("\nIngesting data from memory:");
        ingestProps.AdditionalProperties = new Dictionary() {{ "ignoreFirstRecord", "False" }};
        _= ingestClient.IngestFromStreamAsync(stringStream, ingestProps, new StreamSourceOptions {Size = stringStream.Length}).Result;
        ...
      }
    }
    static void PrintResultsAsValueList(IDataReader response) {
      ...
    }
  }
}
```
### [Python](#tab/python)
```python
import io
import time
from azure.kusto.data import KustoClient, KustoConnectionStringBuilder, DataFormat
from azure.kusto.ingest import QueuedIngestClient, IngestionProperties, StreamDescriptor
from azure.identity import InteractiveBrowserCredential
def main():
  ...
  single_line = '2018-01-26 00:00:00.0000000,2018-01-27 14:00:00.0000000,MEXICO,0,0,Unknown,"{}"'
  string_stream = io.StringIO(single_line)
  with KustoClient(cluster_kcsb) as kusto_client:
    with QueuedIngestClient(ingest_kcsb) as ingest_client:
      database = ""
      table = "MyStormEvents"
      ...
      print("\nIngesting data from memory:")
      ingest_props = IngestionProperties(database, table, DataFormat.CSV, ignore_first_record=False)
      stream_descriptor = StreamDescriptor(string_stream, is_compressed=False, size=len(single_line))
      ingest_client.ingest_from_stream(stream_descriptor, ingest_props)
      ...
  def print_result_as_value_list(response):
    ...
if __name__ == "__main__":
  main()
```
### [Typescript](#tab/typescript)
```typescript
import path from 'path';
import { Client, KustoConnectionStringBuilder } from "azure-kusto-data";
import { IngestClient, IngestionProperties, DataFormat } from "azure-kusto-ingest";
import { InteractiveBrowserCredential } from "@azure/identity";
import { Readable } from "stream";
async function main() {
  ...
  const singleLine = "2018-01-26 00:00:00.0000000,2018-01-27 14:00:00.0000000,MEXICO,0,0,Unknown,\"{}\"";
  const stringStream = Readable.from(singleLine);
  stringStream.push(singleLine);
  stringStream.push(null);
  const kustoClient = new Client(clusterKcsb);
  const ingestClient = new IngestClient(ingestKcsb);
  const database = ""
  const table = "MyStormEvents"
  ...
  console.log("\nIngesting data from memory:");
  stringStream.size = singleLine.length;
  ingestProps.ignoreFirstRecord = false;
  await ingestClient.ingestFromStream(stringStream, ingestProps);
  ...
}
function sleep(time) {
  ...
}
function printResultsAsValueList(response) {
  ...
}
main();
```
### [Java](#tab/java)
```java
import com.microsoft.azure.kusto.data.Client;
import com.microsoft.azure.kusto.data.ClientFactory;
import com.microsoft.azure.kusto.data.KustoOperationResult;
import com.microsoft.azure.kusto.data.KustoResultSetTable;
import com.microsoft.azure.kusto.data.KustoResultColumn;
import com.microsoft.azure.kusto.data.auth.ConnectionStringBuilder;
import com.microsoft.azure.kusto.ingest.IngestClientFactory;
import com.microsoft.azure.kusto.ingest.IngestionProperties;
import com.microsoft.azure.kusto.ingest.IngestionProperties.DataFormat;
import com.microsoft.azure.kusto.ingest.QueuedIngestClient;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import com.microsoft.azure.kusto.ingest.source.StreamSourceInfo;
public class BatchIngestion {
  public static void main(String[] args) throws Exception {
    ...
    String singleLine = "2018-01-26 00:00:00.0000000,2018-01-27 14:00:00.0000000,MEXICO,0,0,Unknown,\"{}\"";
    InputStream stream = new ByteArrayInputStream(StandardCharsets.UTF_8.encode(singleLine).array());
    StreamSourceInfo streamSourceInfo = new StreamSourceInfo(stream);
    try (Client kustoClient = ClientFactory.createClient(clusterKcsb);
         QueuedIngestClient ingestClient = IngestClientFactory.createClient(ingestKcsb)) {
        String database = "";
        String table = "MyStormEvents";
        ...
        System.out.println("\nIngesting data from memory:");
        ingestProps.setIgnoreFirstRecord(false);
        ingestClient.ingestFromStream(streamSourceInfo, ingestProps);
        ...
    }
  }
  public static void printResultsAsValueList(KustoResultSetTable results) {
    ...
  }
}
```
---
When you run the app, you should see a result similar to the following. Notice that after the ingestion, the number of rows in the table increased by one.
```bash
Number of rows in MyStormEvents BEFORE ingestion:
         Count - 1000
Ingesting data from memory:
Waiting 30 seconds for ingestion to complete ...
Number of rows in MyStormEvents AFTER ingesting from memory:
         Count - 1001
Last ingested row:
         StartTime - 2018-01-26 00:00:00+00:00
         EndTime - 2018-01-27 14:00:00+00:00
         State - MEXICO
         DamageProperty - 0
         DamageCrops - 0
         Source - Unknown
         StormSummary - {}
```
## Queue a blob for ingestion and query the results
You can ingest data from Azure Storage blobs, Azure Data Lake files, and Amazon S3 files.
For example, you can modify the app replacing the *ingest from memory* code with the following:
1. Start by uploading the *stormevent.csv* file to your storage account and generate a URI with read permissions, for example, using [a SAS token](../connection-strings/generate-sas-token.md) for Azure blobs.
1. Add the blob descriptor package to the imports at the top of the file.
    ### [C\#](#tab/csharp)
    No additional packages are required.
    ### [Python](#tab/python)
    ```python
    from azure.kusto.ingest import BlobDescriptor
    ```
    ### [Typescript](#tab/typescript)
    ```typescript
    No additional packages are required.
    ```
    ### [Java](#tab/java)
    ```java
    import com.microsoft.azure.kusto.ingest.source.BlobSourceInfo;
    ```
    ---
1. Create a blob descriptor using the blob URI, set the ingestion properties, and then ingest data from the blob. Replace the `` placeholder with the blob URI.
    ### [C\#](#tab/csharp)
    ```csharp
    string blobUri = "";
    ingestProps.AdditionalProperties = new Dictionary() { { "ignoreFirstRecord", "True" } };
    _= ingestClient.IngestFromStorageAsync(blobUri, ingestProps).Result;
    ```
    ### [Python](#tab/python)
    ```python
    blob_uri = ""
    ingest_props = IngestionProperties(database, table, DataFormat.CSV, ignore_first_record=True)
    blob_descriptor = BlobDescriptor(blob_uri)
    ingest_client.ingest_from_blob(blob_descriptor, ingest_props)
    ```
    ### [Typescript](#tab/typescript)
    ```typescript
    const blobUri = "";
    ingestProps.ignoreFirstRecord = true;
    await ingestClient.ingestFromBlob(blobUri, ingestProps);
    ```
    ### [Java](#tab/java)
    ```java
    String blobUri = "";
    ingestProps.setIgnoreFirstRecord(true);
    BlobSourceInfo blobSourceInfo = new BlobSourceInfo(blobUri, 100);
    ingestClient.ingestFromBlob(blobSourceInfo, ingestProps);
    ```
    ---
An outline of the updated code should look like this:
### [C\#](#tab/csharp)
```csharp
using Kusto.Data;
using Kusto.Data.Net.Client;
using Kusto.Data.Common;
using Kusto.Ingest;
using System.Data;
namespace BatchIngest {
  class BatchIngest {
    static void Main(string[] args) {
      ...
      string blobUri = "";
      using (var kustoClient = KustoClientFactory.CreateCslQueryProvider(clusterKcsb))
      using (var ingestClient = KustoIngestFactory.CreateQueuedIngestClient(ingestKcsb)) {
        string database = "";
        string table = "MyStormEvents";
        ...
        Console.WriteLine("\nIngesting data from memory:");
        ingestProps.AdditionalProperties = new Dictionary() { { "ignoreFirstRecord", "True" } };
        _=_ ingestClient.IngestFromStorageAsync(blobUri, ingestProps).Result;
        ...
      }
    }
    static void PrintResultsAsValueList(IDataReader response) {
      ...
    }
  }
}
```
### [Python](#tab/python)
```python
import time
from azure.kusto.data import KustoClient, KustoConnectionStringBuilder, DataFormat
from azure.kusto.ingest import QueuedIngestClient, IngestionProperties, BlobDescriptor
from azure.identity import InteractiveBrowserCredential
def main():
  ...
  blob_uri = ""
  with KustoClient(cluster_kcsb) as kusto_client:
    with QueuedIngestClient(ingest_kcsb) as ingest_client:
      database = ""
      table = "MyStormEvents"
      ...
      print("\nIngesting data from a blob:")
      blob_descriptor = BlobDescriptor(blob_uri)
      ingest_props = IngestionProperties(database, table, DataFormat.CSV, ignore_first_record=True)
      ingest_client.ingest_from_blob(blob_descriptor, ingest_props)
      ...
  def print_result_as_value_list(response):
    ...
if __name__ == "__main__":
  main()
```
### [Typescript](#tab/typescript)
```typescript
import path from 'path';
import { Client, KustoConnectionStringBuilder } from "azure-kusto-data";
import { IngestClient, IngestionProperties, DataFormat } from "azure-kusto-ingest";
import { InteractiveBrowserCredential } from "@azure/identity";
import { Readable } from "stream";
async function main() {
  ...
  const blobUri = "";
  const kustoClient = new Client(clusterKcsb);
  const ingestClient = new IngestClient(ingestKcsb);
  const database = ""
  const table = "MyStormEvents"
  ...
  console.log("\nIngesting data from a blob:");
  ingestProps.ignoreFirstRecord = true;
  await ingestClient.ingestFromBlob(blobUri, ingestProps);
  ...
}
function sleep(time) {
  ...
}
function printResultsAsValueList(response) {
  ...
}
main();
```
### [Java](#tab/java)
```java
import com.microsoft.azure.kusto.data.Client;
import com.microsoft.azure.kusto.data.ClientFactory;
import com.microsoft.azure.kusto.data.KustoOperationResult;
import com.microsoft.azure.kusto.data.KustoResultSetTable;
import com.microsoft.azure.kusto.data.KustoResultColumn;
import com.microsoft.azure.kusto.data.auth.ConnectionStringBuilder;
import com.microsoft.azure.kusto.ingest.IngestClientFactory;
import com.microsoft.azure.kusto.ingest.IngestionProperties;
import com.microsoft.azure.kusto.ingest.IngestionProperties.DataFormat;
import com.microsoft.azure.kusto.ingest.QueuedIngestClient;
import com.microsoft.azure.kusto.ingest.source.BlobSourceInfo;
public class BatchIngestion {
  public static void main(String[] args) throws Exception {
    ...
    String blobUri = "";
    try (Client kustoClient = ClientFactory.createClient(clusterKcsb);
         QueuedIngestClient ingestClient = IngestClientFactory.createClient(ingestKcsb)) {
      String database = "";
      String table = "MyStormEvents";
      ...
      System.out.println("\nIngesting data from a blob:");
      ingestProps.setIgnoreFirstRecord(true);
      BlobSourceInfo blobSourceInfo = new BlobSourceInfo(blobUri, 100);
      ingestClient.ingestFromBlob(blobSourceInfo, ingestProps);
      ...
    }
  }
  public static void printResultsAsValueList(KustoResultSetTable results) {
    ...
  }
}
```
---
When you run the app, you should see a result similar to the following. Notice that after the ingestion, the number of rows in the table increased by 1,000.
```bash
Number of rows in MyStormEvents BEFORE ingestion:
         Count - 1001
Ingesting data from a blob:
Waiting 30 seconds for ingestion to complete ...
Number of rows in MyStormEvents AFTER ingesting from a blob:
         Count - 2001
Last ingested row:
         StartTime - 2018-01-26 00:00:00+00:00
         EndTime - 2018-01-27 14:00:00+00:00
         State - MEXICO
         DamageProperty - 0
         DamageCrops - 0
         Source - Unknown
         StormSummary - {}
```
## Next step
 [!div class="nextstepaction"]
> [TBD](../../../kql-quick-reference.md) -->
> [!div class="nextstepaction"]
> [KQL quick reference](../../../kql-quick-reference.md)