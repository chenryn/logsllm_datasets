2,𝑖 ← Prove(cid:169)(cid:173)(cid:173)(cid:171)crs,(cid:169)(cid:173)(cid:173)(cid:171)𝑈
(cid:18)
(cid:18)𝑈
ensure ∀𝑗 ∈ 𝑃 \ {𝑖} : Vf(cid:169)(cid:173)(cid:173)(cid:171)crs,(cid:169)(cid:173)(cid:173)(cid:171)
(cid:16)
(cid:16)
(cid:17) ∧ Vf
(cid:16)𝑗∈𝑃∪{0} ˜𝑈 𝑗 ,𝑗∈𝑃∪{0} ˜𝑉𝑗
(cid:17)
(cid:16)𝑗∈𝑃∪{0} ˜𝑈 ′
𝑗 ,𝑗∈𝑃∪{0} ˜𝑉′
ensure Vf
( ˜𝑈 , ˜𝑉) :=
( ˜𝑈 ′, ˜𝑉′) :=
ensure ∀𝑗 ∈ 𝑃 \ {𝑖} : Vf
˜𝑈 ′
˜𝑉′
𝑖
𝑆𝑖
˜𝑈 𝑗
˜𝑉𝑗
crs, (𝑈 , ˜𝑈0), 𝜋2,0
(cid:170)(cid:174)(cid:174)(cid:172) ,
(cid:19)
𝐼
𝜆𝑃,𝑖
1
𝐺
crs,
crs,
𝜋′
, ˜𝑟𝑖
(cid:17)
𝑉
𝐼
𝑉
𝐼
𝑈
𝑋
𝑋
𝑉
𝑉
𝑖
(cid:18) ˜𝑟′
𝑖
𝑠𝑖
(cid:19)(cid:170)(cid:174)(cid:174)(cid:172)
, 𝜋2,𝑗
(cid:19)
(cid:170)(cid:174)(cid:174)(cid:172)
𝑗
(cid:170)(cid:174)(cid:174)(cid:172) , 𝜋′
(cid:17)
˜𝑈 ′
˜𝑉′
𝑗
𝑆 𝑗
0), 𝜋′
2,0
2,𝑗
𝐼
𝜆𝑃,𝑗
1
𝐺
crs, (𝑈 , ˜𝑈 ′
( ˜𝑈 , ˜𝑉) :=
( ˜𝑈 ′, ˜𝑉′) :=
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Joint decryption . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
𝑇0 := ˜𝑈 𝑘0 , 𝑇′
ℓ=0 ¯𝐾 𝑗ℓ
𝐾𝑗 :=𝑡−1
0 := ˜𝑈 ′𝑘0
, ∀𝑗 ∈ 𝑃
𝑖 := ˜𝑈 ′𝑘𝑖
ℓ
𝑗
𝑇𝑖 := ˜𝑈 𝑘𝑖 , 𝑇′
𝐾𝑖 := 𝐺𝑘𝑖
𝜋3,𝑖 ← Prove
(cid:18)
(cid:18)
crs,
crs,
(cid:18)𝐺
(cid:18) 𝐺
˜𝑈
˜𝑈 ′
(cid:19)
(cid:19)
, 𝑘𝑖
, 𝑘𝑖
(cid:19)
(cid:19)
𝐾𝑖
𝑇𝑖
𝐾𝑖
𝑇′
𝑖
𝑇𝑖 , 𝜋3,𝑖 ,𝑇′
𝑖 , 𝜋′
3,𝑖
𝜋′
3,𝑖 ← Prove
(cid:18)
(cid:18)
(cid:19)
(cid:19)
˜𝑈
, 𝜋3,𝑗
(cid:19)
(cid:18)𝐺
(cid:18) 𝐺
(cid:19)
, 𝑇′ :=𝑗∈𝑃∪{0}𝑇
𝐾𝑗
𝑇𝑗
𝐾𝑗
𝑇′
𝑗
˜𝑈 ′
, 𝜋′
3,𝑗
crs,
′𝜆𝑃,𝑗
𝑗
ensure ∀𝑗 ∈ 𝑃 : Vf
crs,
ensure ∀𝑗 ∈ 𝑃 : Vf
𝑇 :=𝑗∈𝑃∪{0}𝑇
𝜆𝑃,𝑗
𝑗
if ( ˜𝑉 ≠ 𝑇) then return 𝜖
𝑀 := (𝐶1/( ˜𝑉′ · 𝑇′−1))
return 𝑀
return 𝑛
Figure 4: Decryption Protocol (Procedures for fine-grained rate-limiting in Figure 8)
8
𝑝, ¯𝛽 𝑗 , ¯𝛿 𝑗 ←$ Z𝑝, ∀𝑗 ∈ [0, 𝑡 − 1]
¯𝛿 𝑗 𝑥 𝑗
𝑗=0
𝑗=0
𝑡−1∑︁
𝑡−1∑︁
¯𝛽 𝑗 𝑥 𝑗 , ¯𝛿(𝑥) :=
Rotate⟨S(“rot”, sk0), · · ·⟩
𝛾 ←$ Z∗
¯𝛽(𝑥) :=
𝛽𝑖 := ¯𝛽(𝑖), 𝛿𝑖 := ¯𝛿(𝑖), ∀𝑖 ∈ [𝑚]
𝑠′
0 := SKE.KGen(1𝜆)
𝑘′
0 := 𝛾 · 𝑘0
𝐾′
0 := 𝐾𝛾
0
¯𝛽 𝑗 , ¯𝐾′
¯𝑆′
𝑗 := ¯𝑆 𝑗 · 𝐺
send (𝛽𝑖, 𝛾, 𝛿𝑖, { ¯𝑆′
sk′
0 ← (𝑠′
0, 𝐾′
0, 𝑘′
return (sk′
0, 𝜏)
¯𝛿 𝑗 , ∀𝑗 ∈ {0, . . . , 𝑡 − 1}
𝑗 := ¯𝐾𝛾
𝑗 𝐺
𝑗 }𝑡−1
𝑗 , ¯𝐾′
𝑗=0) to R𝑖, ∀𝑖 ∈ [𝑚]
𝑗 }𝑡−1
𝑗=0), 𝜏 := (𝑠0, 𝑠′
𝑗 , ¯𝐾′
0, { ¯𝑆′
0, ¯𝛽0)
𝑗 , ¯𝐾′
Rotate⟨· · · , R𝑖(“rot”, sk𝑖), · · ·⟩
𝑗 }𝑡−1
receive (𝛽𝑖, 𝛾, 𝛿𝑖, { ¯𝑆′
𝑗=0) from S
ensure 𝛾 ≠ 0
𝑠′
𝑖 := 𝑠𝑖 + 𝛽𝑖
𝑘′
𝑖 := 𝛾 · 𝑘𝑖 + 𝛿𝑖
𝐾′
0 := 𝐾𝛾
0
0, { ¯𝑆′
𝑖, 𝐾′
𝑖, 𝑘′
𝑖 := (𝑠′
sk′
ensure KVf(𝑖, sk′
𝑖)
return sk′
𝑗 }𝑡−1
𝑗=0)
𝑗 , ¯𝐾′
𝑖
Udt(𝜏, 𝑛, 𝐶)
parse 𝜏 as (𝑠0, ˜𝑠0, ¯𝛽0)
parse SKE.Dec((𝑠0, 𝐶) as (𝐶0, 𝐶1)
0 := 𝐶0 · 𝐻0(𝑛) ¯𝛽0, 𝐶′
𝐶′
return 𝐶′ := SKE.Enc( ˜𝑠0, (𝐶′
KVf(𝑖, sk𝑖)
else return (𝐺𝑠𝑖 =𝑡−1
if 𝑖 = 0 then return (𝐺𝑘0 = 𝐾0)
𝑗 ∧ 𝐺𝑘𝑖 =𝑡−1
0, 𝐶′
1))
𝑗=0 ¯𝑆𝑖 𝑗
1 := 𝐶1 · 𝐻1(𝑛) ¯𝛽0
𝑗=0 ¯𝐾𝑖 𝑗
𝑗
)
Figure 5: Key-Rotation Protocol, Update Algorithm, and Key Verification Algorithm of TPHE
random elements, and the output 𝑀 of the server (if honest)
is always the empty string 𝜖.
It remains to show that for all 𝑏 ∈ {0, 1} and all 𝑞 ∈ [𝑄Dec],
1
|PW| + negl(𝜆) ,
Hyb𝑏,3,𝑞 = 1(cid:105)(cid:12)(cid:12)(cid:12) ≤
= 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ negl(𝜆) .
Hyb1,3,𝑄Dec
(cid:12)(cid:12)(cid:12) Pr(cid:104)
Hyb𝑏,3,𝑞−1 = 1(cid:105) − Pr(cid:104)
and(cid:12)(cid:12)(cid:12) Pr(cid:104)
= 1(cid:105) − Pr(cid:104)
(cid:12)(cid:12)(cid:12) Pr(cid:104)
Hyb𝑏,3,𝑞−1 = 1(cid:105) − Pr(cid:104)
The theorem then follows.
Hyb0,3,𝑄Dec
3.3.1
Hyb𝑏,3,𝑞 = 1(cid:105)(cid:12)(cid:12)(cid:12) ≤
From Hyb𝑏,3,𝑞−1 to Hyb𝑏,3,𝑞. We show that
1
|PW| + negl(𝜆)
under the DDH assumption in the random oracle model for all
𝑏 ∈ {0, 1} and 𝑞 ∈ [𝑄Dec].
, which
is mostly identical to Hyb𝑏,3,𝑞 except that when answering the
adversary’s 𝑞-th critical query, then the server returns 𝑀 = 𝑀∗
if
pw = pw∗. Otherwise the server returns 𝜖.
We define an intermediate hybrid experiment Hyb′
𝑏,3,𝑞
We can immediately see that
Hyb′
(cid:12)(cid:12)(cid:12) Pr(cid:104)
𝑏,3,𝑞 = 1(cid:105) − Pr(cid:104)
(cid:12)(cid:12)(cid:12) Pr(cid:104)
Hyb𝑏,3,𝑞−1 = 1(cid:105) − Pr(cid:104)
|PW|
Hyb𝑏,3,𝑞 = 1(cid:105)(cid:12)(cid:12)(cid:12) ≤
𝑏,3,𝑞 = 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ negl(𝜆)
Hyb′
since the only way to distinguish between the two is to query DecO
with pw = pw∗.
It thus suffices to show that
1
𝑏
under the DDH assumption.
Suppose not, we construct an adversary B against DDH as fol-
lows. Let the 𝑡-th honest key rotation query be the latest one before
the 𝑞-th critical query. We can assume without loss of generality
that B knows 𝑡 as B can guess 𝑡 correctly with inverse-polynomial
probability. Let 𝐼 be the set of corrupt parties requested by A during
the 𝑡-th honest key rotation query. We consider two cases.
9
Case 1: 0 ∉ 𝐼. Without loss of generality, we can assume that
𝐼 = [𝑚]. In this case, B receives a DDH instance (𝐺, 𝐺𝛼, 𝐺 𝛽, 𝐺𝛾),
and set 𝐾′
0 := 𝐺𝛼 when answering the 𝑡-th honest key rotation
query. Note that B does not know 𝑘0 := 𝛼 and hence, during the
time between the 𝑡-th and (𝑡 + 1)-st honest key rotation, cannot