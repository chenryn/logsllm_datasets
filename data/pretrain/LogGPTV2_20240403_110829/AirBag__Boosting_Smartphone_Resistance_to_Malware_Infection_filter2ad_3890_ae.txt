### Related Work

#### Extensions to the Android Framework
Several approaches, such as MockDroid [21], AppFence [38], Kantola et al. [42], Airmid [44], Apex [45], and CleanOS [51], extend the Android framework to better control apps' access to sensitive resources. Aurasium [55] takes a different approach by repackaging untrusted apps and enforcing access control policies at runtime. While these methods have varying levels of success, they all assume a trustworthy Android framework, which may not hold true for advanced attacks that can compromise privileged system daemons like `init` or `zygote`. In contrast, our system, AirBag, assumes that the Android framework inside it could be compromised but ensures that any damage is contained within AirBag, thus protecting the native runtime environment.

#### Enhancements to the Android Permission System
Other systems, such as Kirin [33], Saint [47], and Stowaway [34], focus on extending the Android permission system. For example, Kirin analyzes apps at install time to block those with dangerous permission combinations, while Saint enforces policies at both install and runtime to govern permission assignment and usage. Stowaway identifies apps that request more permissions than necessary. Unlike these, AirBag does not directly deal with Android permissions. Instead, it aims to mitigate risks by proposing a separate, isolated runtime enforced through a lightweight OS-level extension.

### Virtualization Approaches

#### Type-I and Type-II Hypervisors
Recent efforts in virtualization include the development and adoption of various solutions to strengthen mobile platform security [53]. Type-I hypervisors, such as OKL4 Microvisor [46], L4Android [43], and Xen on ARM [39], offer a smaller Trusted Computing Base (TCB) but require significant effort to support new devices and cannot readily leverage commodity OS kernels for hardware device support. In contrast, Type-II hypervisors, like VMwareâ€™s MVP [20] and KVM/ARM [26], can take advantage of commodity OS kernels to support hardware devices. However, they require running multiple instances of guest OS kernels, increasing memory footprint and power consumption. Additionally, the world switching operation degrades performance, which is particularly problematic in resource-constrained mobile environments.

#### OS-Level Virtualization
OS-level virtualization approaches, such as Cells [19], are also being applied to mobile devices. Cells introduces a foreground/background virtual phone usage model and proposes a lightweight OS-level virtualization to multiplex phone hardware across multiple virtual phones. Our system, AirBag, differs from Cells in two key aspects:
1. **Usage Model**: Cells supports multiple virtual phone instances to embrace the "bring-your-own-device" (BYOD) paradigm, treating each instance equally and achieving isolation at the coarse-grained virtual phone boundary. AirBag, on the other hand, maintains a single phone usage model, ensuring the same user experience while enforcing reliable isolation of untrusted apps.
2. **Integration and Portability**: Cells requires an always-on root namespace for management and hardware device virtualization. AirBag integrates seamlessly with the native runtime without such a root namespace, enhancing portability and user experience. The presence of a root namespace in Cells is similar to the management domain in Type-I Xen hypervisor, which can affect portability on new phone models. As part of the native system, AirBag can be easily ported to new devices with stock firmware.

#### User-Level Solutions
Researchers have also explored user-level solutions to provide separate mobile runtime environments. For example, TrustDroid [22] enhances the Android framework to provide domain-level isolation, confining unauthorized data access and cross-domain communications. Recent Android releases, such as Jellybean 4.2, extend the Android framework to add multi-user support. These solutions require a trustworthy framework, which is often targeted by advanced attacks, and necessitate deep modifications to the Android framework. In comparison, AirBag adds a lightweight OS-level extension to confine cross-namespace communications without affecting the native Android framework, achieving backward and forward compatibility.

### Virtualization-Based Security
A long stream of research projects has aimed to improve host security using virtualization [28], [40], [41], [50], [54]. For instance, Ether [28] uses hardware virtualization extensions to trace malware transparently, and Lockdown [54] divides the runtime environment into trusted and untrusted parts with a lightweight hypervisor. These systems benefit from a layered architecture design and strong isolation provided by underlying virtualization. With a decoupled runtime environment to transparently confine user-level apps, AirBag can be naturally combined with these approaches to enhance the protection of Android-based mobile devices.

### Conclusion
We have presented the design, implementation, and evaluation of AirBag, a client-side solution to significantly boost the capability of Android-based smartphones to defend against mobile malware. By instantiating a separate app isolation runtime that is decoupled from the native runtime and enforced through lightweight OS-level virtualization, our system allows for the transparent execution of untrusted apps while effectively preventing them from leaking personal information or damaging the native system. We have implemented a proof-of-concept prototype that seamlessly supports three representative mobile devices: Google Nexus One, Nexus 7, and Samsung Galaxy S III. Evaluation results with 20 representative Android malware successfully demonstrate its practicality and effectiveness. Performance measurements with several benchmark programs show that our system incurs low overhead.

### Acknowledgment
We would like to thank the anonymous reviewers for their comments, which greatly helped improve the presentation of this paper. This work was supported in part by the US National Science Foundation (NSF) under Grants 0855297, 0855036, 0910767, and 0952640. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF.

### References
[References listed here, formatted and organized as per the original text.]