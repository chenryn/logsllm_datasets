data. MockDroid [21], AppFence [38], Kantola et al. [42],
Airmid [44], Apex [45], and CleanOS [51] also rely on exten-
sions on Android framework to better control apps’ access to
potential sensitive resources. Aurasium [55] takes a different
approach by repackaging untrusted apps and then enforcing
certain access control policies at runtime. With varying levels
of successes, they share a common assumption of a trustworthy
Android framework, which unfortunately may not be the case
for advanced attacks (that could directly compromise privi-
leged system daemons such as init or zygote). In contrast,
our system assumes that the Android framework inside AirBag
could be compromised (by untrusted apps) but the damages
are still contained in AirBag to prevent the native runtime
environment being affected.
From another perspective, a number of systems have
been proposed to extend the Android permission system. For
example, Kirin [33] analyzes apps at install time to block
apps with a dangerous combination of permissions. Saint [47]
enforces policies in both install time and run time to govern
the assignment as well as the usage of permissions. Stowaway
[34] identiﬁes the apps which request more permissions than
necessary. In comparison, our system is different in not directly
dealing with Android permissions. Instead, we aim to mitigate
the risks by proposing a separate runtime that is isolated and
enforced through a lightweight OS-level extension.
11
Virtualization The third category of related work includes
recent efforts to develop or adopt various virtualization solu-
tions which can strengthen the security properties of mobile
platforms [53]. Starting from the approaches based on Type-
I hypervisors (e.g., OKL4 Microvisor [46], L4Android [43],
and Xen on ARM [39]), they may have smaller TCB but
require signiﬁcant efforts to support new devices and cannot
readily leverage commodity OS kernels to support hardware
devices. In a similar vein, researchers have also applied tradi-
tional Type-II hypervisor approaches on mobile devices (e.g.,
VMware’s MVP [20] and KVM/ARM [26]). Compared to
Type-I hypervisors, Type-II hypervisors might take advantage
of commodity OS kernels to support various hardware devices.
However, it still needs to run multiple instances of guest OS
kernels, which inevitably increase memory footprint and power
consumption. Also, the world switching operation causes ad-
ditional performance degradation, which affects the scalability
in resource-constrained mobile device environments.
Beside traditional Type-I and Type-II hypervisors, OS-level
virtualization approaches are also being applied to mobile
devices. For example, Cells [19] introduces a foreground
/background virtual phones usage model and proposes a
lightweight OS-level virtualization to multiplex phone hard-
ware across multiple virtual phones. Our system differs from
Cells in two important aspects: First, as mentioned earlier,
Cells aims to embrace the emerging “bring-your-own-device”
(BYOD) paradigm by supporting multiple virtual phone in-
stances in one hardware device. Each virtual phone instance
is treated equally and the isolation is achieved at the coarse-
grained virtual phone boundary. AirBag instead is an app-
centric solution that aims to maintain a single phone usage
model and the same user experience while enforcing reliable
isolation of untrusted apps. Second, to support multiple virtual
phones, Cells needs to maintain an always-on root namespace
for their management and hardware device virtualization. In
comparison, AirBag is integrated with the native runtime for
seamless user experience without such a root namespace. At
the conceptual level, the presence of a root namespace is
similar to the management domain in Type-I Xen hypervisor,
which could greatly affect the portability on new phone mod-
els. Being a part of native system, our system can be readily
ported to new devices with stock ﬁrmware.5
In addition, researchers also explore user-level solutions to
provide separate mobile runtime environments. For example,
TrustDroid [22] enhances the Android framework to provide
domain-level
isolation that conﬁnes the unauthorized data
access and cross-domain communications. Recent Android
release (Jellybean 4.2) extends the Android framework to
add multi-user support. Such a user-level solution requires
a trustworthy framework that is often the target for advance
attacks. Moreover, these solutions require deep modiﬁcations
on the Android framework. In comparison, AirBag adds a
lightweight OS-level extension to conﬁne cross-namespace
communications without affecting the native Android frame-
work, achieving backward and forward compatibility.
Virtualization-based security
The last category of the
related work includes a long stream of research projects to
5Our prototyping experience conﬁrms that AirBag can be readily ported to
a new phone model. In fact, the very ﬁrst prototype on Google Nexus One is
ported to Nexus 7 and Samsung Galaxy S III each within one week!
improve host security with virtualization: [28], [40], [41], [50],
[54]. For example, Ether [28] transparently traces malware
with the help of hardware virtualization extensions. Lockdown
[54] divides the runtime environment into trusted and untrusted
with a lightweight hypervisor. These systems beneﬁt from a
layered architecture design as well as the strong isolation guar-
antee provided by underlying virtualization. With a decoupled
runtime environment to transparently conﬁne user-level apps,
AirBag can be naturally combined with the above approaches
for better protection of Android-based mobile devices.
VII. CONCLUSION
We have presented the design, implementation and eval-
uation of AirBag, a client-side solution to signiﬁcantly boost
Android-based smartphone capability to defend against mobile
malware. By instantiating a separate app isolation runtime
that is decoupled from native runtime and enforced through
lightweight OS-level virtualization, our system not only allows
for transparent execution of untrusted apps, but also effectively
prevents them from leaking personal information or damaging
the native system. We have implemented a proof-of-concept
prototype that seamlessly supports three representative mobile
devices,
i.e., Google Nexus One, Nexus 7, and Samsung
Galaxy S III. The evaluation results with 20 representative
Android malware successfully demonstrate its practicality and
effectiveness. Also, the performance measurement with a num-
ber of benchmark programs shows that our system incurs low
performance overhead.
ACKNOWLEDGMENT
We would like to thank the anonymous reviewers for
their comments that greatly helped improve the presentation
of this paper. This work was supported in part by the US
National Science Foundation (NSF) under Grants 0855297,
0855036, 0910767, and 0952640. Any opinions, ﬁndings, and
conclusions or recommendations expressed in this material are
those of the authors and do not necessarily reﬂect the views
of the NSF.
REFERENCES
features
unveiled:
SELinux,
http:
4.2
potential
and
with malware,”
http:
Android
users
infected
http://www.symantec.com/security
security
Premium SMS Conﬁrmation,”
“260,000
//www.infosecurity-magazine.com/view/16526/260000-android-users-
infected-with-malware/.
“Android
VPN Lockdown
//www.androidauthority.com/android-4-2-potential-security-features-
unveiled-selinux-vpn-lockdown-premium-sms-conﬁrmation-123785/.
“Android Malware Genome Project,” http://www.malgenomeproject.
org/.
“Android.Golddream|Symantec,”
response/writeup.jsp?docid=2011-070608-4139-99.
“AnTuTu Benchmark,” http://www.antutulabs.com.
“App Store,” http://www.apple.com/iphone/from-the-app-store/.
“BrowserMark,” http://browsermark.rightware.com.
“Bug 714271,” https://bugzilla.redhat.com/show bug.cgi?id=714271.
“Google Play,” http://play.google.com/.
“linux/kernel/git/torvalds/linux.git,”
kernel/git/torvalds/linux.git.
“NenaMark2,” http://nena.se/nenamark/view?version=2/.
“Neocore,”
qualcomm.qx.neocore.
“PM: Implement autosleep and ”wake locks”, take 3,” http://lwn.net/
Articles/493924/.
https://play.google.com/store/apps/details?id=com.
http://git.kernel.org/?p=linux/
[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
12
[14]
[15]
[16]
[17]
[18]
[19]
JavaScript Benchmark,”
http://www.webkit.org/perf/
“Security Alert: New Android Malware DKFBootKit Moves To-
wards The First Android BootKit,” http://www.csc.ncsu.edu/faculty/
jiang/DKFBootKit/.
“SunSpider
sunspider/sunspider.html.
“SystemTap,” http://sourceware.org/systemtap/.
“Virtual ethernet device (tunnel),” http://lwn.net/Articles/232688/.
“Advanced Linux Sound Architecture (ALSA) project homepage,” http:
//www.alsa-project.org/main/index.php/Main Page.
J. Andrus, C. Dall, A. V. Hof, O. Laadan, and J. Nieh, “Cells: A Virtual
Mobile Smartphone Architecture,” in Proceedings of the Twenty-Third
ACM Symposium on Operating Systems Principles, 2011.
[20] K. Barr, P. Bungale, S. Deasy, V. Gyuris, P. Hung, C. Newell, H. Tuch,
and B. Zoppis, “The VMware mobile virtualization platform: is that a
hypervisor in your pocket?” SIGOPS Oper. Syst. Rev., vol. 44, no. 4,
2010.
[21] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan, “MockDroid:
Trading Privacy for Application Functionality on Smartphones,” in
Proceedings of the 12th International Workshop on Mobile Computing
System and Applications, 2011.
[23]
[24]
[22] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi, and
B. Shastry, “Practical and Lightweight Domain Isolation on Android,”
in Proceedings of the 1st ACM workshop on Security and privacy in
smartphones and mobile devices, 2011.
“Smart phones overtake client PCs in 2011,” http://www.canalys.com/
newsroom/smart-phones-overtake-client-pcs-2011.
“CGROUPS,”
cgroups.txt.
“comScore Reports December 2012 U.S. Smartphone Subscriber
Market
http://www.comscore.com/Insights/Press Releases/
2013/2/comScore Reports December 2012 U.S. Smartphone
Subscriber Market Share.
http://www.kernel.org/doc/Documentation/cgroups/
Share,”
[25]
[26] C. Dall and J. Nieh, “KVM for ARM,” in Proceedings of the Ottawa
Linux Symposium, 2010.
[27] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund,
S. Nurnberger, and A.-R. Sadeghi, “MoCFI: A Framework to Mitigate
Control-Flow Attacks on Smartphones,” in Proceedings of the 19th
Annual Symposium on Network and Distributed System Security, 2012.
[28] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, “Ether: Malware Analysis
via Hardware Virtualization Extensions,” in Proceedings of the 15th
ACM Conference on Computer and Communications Security, 2008.
[29] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Gifﬁn, and W. Lee, “Virtuoso:
Narrowing the Semantic Gap in Virtual Machine Introspection,” in
Proceedings of the 2011 IEEE Symposium on Security and Privacy,
2011.
[30] M. Egele, C. Kruegel, E. Kirda, and G. Vigna, “PiOS: Detecting
Privacy Leaks in iOS Applications,” in Proceedings of the Network
and Distributed System Security Symposium (NDSS), 2011.
[31] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel,
and A. N. Sheth, “TaintDroid: An Information-Flow Tracking System
for Realtime Privacy Monitoring on Smartphones,” in Proceedings
of
the 9th USENIX conference on Operating systems design and
implementation, 2010.
[32] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A Study of
Android Application Security,” in Proceedings of the 20th USENIX
conference on Security, 2011.
[33] W. Enck, M. Ongtang, and P. McDaniel, “On Lightweight Mobile Phone
Application Certiﬁcation,” in Proceedings of the 16th ACM Conference
on Computer and Communications Security, 2009.
[34] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android
Permissions Demystiﬁed,” in Proceedings of the 18th ACM Conference
on Computer and Communications Security, 2011.
[35] Y. Fu and Z. Lin, “Space Traveling across VM: Automatically Bridging
the Semantic Gap in Virtual Machine Introspection via Online Kernel
Data Redirection,” in Proceedings of the 2012 IEEE Symposium on
Security and Privacy, 2012.
[36] T. Garﬁnkel and M. Rosenblum, “A Virtual Machine Introspection
Based Architecture for Intrusion Detection,” in Proceedings of the 10th
Network and Distributed System Security Symposium, 2003.
13
[37] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic Detection of
Capability Leaks in Stock Android Smartphones,” in Proceedings of the
19th Annual Symposium on Network and Distributed System Security,
2012.
[38] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall, “These
Aren’t the Droids You’re Looking For: Retroﬁtting Android to Protect
Data from Imperious Applications,” in Proceedings of the 18th ACM
Conference on Computer and Communications Security, 2011.
[39]
J.-Y. Hwang, S.-B. Suh, S.-K. Heo, C.-J. Park, J.-M. Ryu, S.-Y. Park,
and C.-R. Kim, “Xen on ARM: System Virtualization Using Xen
Hypervisor for ARM-Based Secure Mobile Phones,” in Proceedings of
the 5th Consumer Communications and Networking Conference, 2008.
[40] X. Jiang, X. Wang, and D. Xu, “Stealthy Malware Detection Through
VMM-based “Out-Of-the-Box” Semantic View Reconstruction,” in Pro-
ceedings of the 14th ACM Conference on Computer and Communica-
tions Security, 2007.
[41] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau, “VMM-
based Hidden Process Detection and Identiﬁcation using Lycosid,”
in ACM International Conference on Virtual Execution Environments,
2008.
[42] D. Kantola, E. Chin, W. He, and D. Wagner, “Reducing Attack Surfaces
for Intra-Application Communication in Android,” in Proceedings of
the second ACM workshop on Security and privacy in smartphones
and mobile devices, 2012.
[43] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and M. Peter,
“L4Android: A Generic Operating System Framework for Secure
Smartphones,” in Proceedings of the 1st Workshop on Security and
Privacy in Smartphones and Mobile Devices, 2011.
[44] Y. Nadji, J. Gifﬁn, and P. Traynor, “Automated Remote Repair for
Mobile Malware,” in Proceedings of the 27th Annual Computer Security
Applications Conference, 2011.
[45] M. Nauman, S. Khan, and X. Zhang, “Apex: Extending Android Permis-
sion Model and Enforcement with User-Deﬁned Runtime Constraints,”
in Proceedings of the 5th ACM Symposium on Information, Computer
and Communications Security, 2010.
[46]
“OKL4 Microvisor,” http://www.ok-labs.com/products/okl4-microvisor.
[47] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel, “Semantically
Rich Application-Centric Security in Android,” in Proceedings of the
2009 Annual Computer Security Applications Conference, 2009.
[48] D. P. Quigley, J. Sipek, C. P. Wright, and E. Zadok, “UnionFS: User-
and Community-oriented Development of a Uniﬁcation Filesystem,” in
Proceedings of the 2006 Linux Symposium, July 2006.
[49] M. Sharif, W. Lee, W. Cui, and A. Lanzi, “Secure In-VM Monitoring
the 16th ACM
Using Hardware Virtualization,” in Proceedings of
Conference on Computer and Communications Security, 2009.
[50] R. Ta-Min, L. Litty, and D. Lie, “Splitting Interfaces: Making Trust
between Applications and Operating Systems Conﬁgurable,” in Pro-
ceedings of
the 7th Symposium on Operating Systems Design and
Implementation, 2006.
[51] Y. Tang, P. Ames, S. Bhamidipati, A. Bijlani, R. Geambasu, and
N. Sarda, “CleanOS: Limiting Mobile Data Exposure with Idle Evic-
tion,” in Proceedings of the 10th USENIX conference on Operating
Systems Design and Implementation, 2012.
[52] P. Varanasi and G. Heiser, “Hardware-Supported Virtualization on
ARM,” in 2nd Asia-Paciﬁc Workshop on Systems (APSys’11), 2011.
[53] A. Vasudevan, E. Owusu, Z. Zhou, J. Newsome, and J. M. McCune,
“Trustworthy Execution on Mobile Devices: What security properties
can my mobile platform give me?” in Proceedings of the 5th interna-
tional conference on Trust and Trustworthy Computing, 2012.
[54] A. Vasudevan, B. Parno, N. Qu, V. D. Gligor, and A. Perrig, “Lockdown:
Towards a Safe and Practical Architecture for Security Applications
on Commodity Platforms,” in Proceedings of the 5th International
Conference on Trust and Trustworthy Computing (TRUST), 2012.
[55] R. Xu, H. Sa¨ıdi, and R. Anderson, “Aurasium: Practical Policy Enforce-
ment for Android Applications,” in Proceedings of the 21st USENIX
conference on Security symposium, 2012.
[56] L.-K. Yan and H. Yin, “DroidScope: Seamlessly Reconstructing OS
and Dalvik Semantic Views for Dynamic Android Malware Analysis,”
in Proceedings of the 21st USENIX Security Symposium, 2012.