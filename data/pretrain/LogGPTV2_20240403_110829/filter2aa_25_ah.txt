### 7.2 跨站脚本（XSS）测试

#### 7.2.1 XSS类型
- **存储型XSS**：攻击者将恶意脚本直接写入服务端数据库，当网站管理员或普通用户查看包含该脚本的页面时，脚本会在浏览器中执行。例如，弹出对话框。
- **反射型XSS**：恶意脚本不写入数据库，而是通过URL参数或输入框传递给服务器。服务器解析后生成一段类似的脚本并返回给用户的浏览器执行。

#### 7.2.2 测试过程
**发现疑似存在跨站链接时，在漏洞参数处添加测试Payload，如果达到预期效果则确定跨站漏洞存在。根据漏洞实际类型分为反射型和存储型XSS。**

##### 7.2.2.1 反射型XSS
以`http://xxx.xxx.local`中的高级搜索模块为例：
1. 抓包并在工单编号输入处添加XSS漏洞测试代码。
2. 成功弹出对话框，证明XSS漏洞存在。

##### 7.2.2.2 存储型XSS
以`http://xxx.xxx.local`中的商调函模块为例：
1. 新建一工单并在功能说明处添加XSS Payload，数据会存储于数据库。
2. 当网站管理员或普通用户访问该页面时，XSS Payload会被执行。

#### 7.2.3 修复建议
- **输入验证**：对所有客户端提交的数据进行严格的检查和过滤，包括HTML标签、JavaScript关键字等。
- **编码处理**：对用户提供的数据进行编码，移除冲突字符、括号和引号。
- **限制输入**：尽可能限制用户输入为字母数字数据，非字母数字字符应先编码为HTML实体。
- **身份验证**：使用双因素身份验证机制。
- **脚本验证**：不要完全信任他人提供的脚本，使用前务必验证其来源。
- **错误处理**：设置出错页面，防止Web服务器在内部错误时返回敏感信息。

### 7.3 命令执行测试

#### 7.3.1 测试原理和方法
应用在调用外部程序处理内容时，可能会使用一些系统命令执行函数（如PHP中的`system`、`exec`、`shell_exec`）。若用户可以控制这些函数的参数，则可能注入恶意命令，导致命令执行攻击。测试中，如果没有对参数进行过滤，就可以直接造成命令执行漏洞。

#### 7.3.2 测试过程
- **发现疑似存在命令执行的漏洞链接**，添加命令执行Payload，确认漏洞。
- **以某网络安全审计系统为例**，由于未对`register_key`参数进行过滤，可能存在命令执行漏洞。抓包并对其进行测试，构造命令执行语句并成功执行，证明此参数未经严格过滤。

#### 7.3.3 修复建议
- **尽量少用执行命令的函数**，或直接禁用。
- **参数值使用引号**，确保使用的函数是指定的函数之一。
- **参数过滤**：在进入执行命令的函数/方法之前，对参数进行过滤和转义处理。

### 第8章 回退模块测试

#### 8.1 回退测试

##### 8.1.1 测试原理和方法
许多Web业务在密码修改成功或订单付款成功后，允许用户回退到上一步重新操作。如果能返回上一步重复操作并更改或重置结果，则存在业务回退漏洞。

##### 8.1.2 测试过程
- **攻击者按正常流程更改业务信息**，更改完成后尝试回退到上一流程再次修改业务信息。
- **以某网站修改密码为例**，密码修改成功后进行回退测试，判断是否可以回退并再次修改密码。

##### 8.1.3 修复建议
- **请求验证**：对于多步骤业务流程，判断请求是否来自上一步骤，如果不是则返回错误提示或页面失效。

### 第9章 验证码机制测试

#### 9.1 验证码暴力破解测试

##### 9.1.1 测试原理和方法
验证码主要用于防止暴力破解、DDoS攻击和识别用户身份。常见的验证码类型有图片验证码、邮件验证码、短信验证码、滑动验证码和语音验证码。

##### 9.1.2 测试过程
- **以短信验证码为例**，验证码通常由4～6位数字组成。如果没有对验证码的失效时间和尝试失败次数做限制，攻击者可以通过暴力破解尝试所有可能的数字组合。
- **以某会员网站任意手机号码注册为例**，填写任意号码进行注册，抓取数据包并对验证码进行暴力破解。

##### 9.1.3 修复建议
- **设置验证码失效时间**，建议为180秒。
- **限制失败尝试次数**，如5分钟内连续失败5次即锁定账号15分钟。

#### 9.2 验证码重复使用测试

##### 9.2.1 测试原理和方法
如果验证码认证成功后没有及时清空session，可能导致验证码被重复使用。测试时抓取携带验证码的数据包并重复提交，查看是否提交成功。

##### 9.2.2 测试过程
- **以某App手机客户端应用程序为例**，在客户投诉建议处输入验证码，抓取数据包并重复提交，查看是否成功提交多个投诉信息。

##### 9.2.3 修复建议
- **清空session**：验证码在一次认证成功后，服务端应清空认证成功的session，防止验证码被重复使用。

#### 9.3 验证码客户端回显测试

##### 9.3.1 测试原理和方法
当验证码在客户端生成而非服务器端生成时，可能会导致问题。通过浏览器工具查看客户端与服务器交互的详细信息，判断是否存在此类问题。

##### 9.3.2 测试过程
- **以某P2P金融平台为例**，进入找回密码页面，输入手机号与证件号，获取验证码。通过浏览器工具查看返回包信息，判断是否包含验证码。

希望以上优化后的文本更加清晰、连贯和专业。如果有进一步的需求，请随时告知。