sumnary interval, seconds
-D DURATI0N,
duration DURATION
total duzration of trace, seconds
-T
--tinestanp
include timestanp on output
F,
--regexp
use regular expxesslons. Default lg "** vlldcards
only-
-3,
 --offset
shov address offsets
-P,
--perpid
display stacks separately for each process
x-
-keznel-stacks-only
kernel stack only
-0,
user stack only
V,
--verbose
shov rav addresses
d
--delinited
insert delimiter betveen kernel/user stacks
-f, --fo1ded
xeuxog peptog sndno
--debug
print BPF progran before starting (for debugging
purpose.s)
---
## Page 141
104
Chapter 4 BCC
examples1
./stackcount subnlt_bio
 count kernel atack traces for subnit_bio
/stackcount =d ip_output
 include a user/kernel stack deliniter
/stackcount =s lp_output
shov synbol offset.s
/stackcount -av ip_output
 shov offsets and rax addresses (verbose)
/stackcount *tcp_send**
count stacks for funcs natching tcp_send*
/stackcount -r *^tcp_send, *
 sane as above, using regular expressions
/stackcount =T1 5 1p_output
#output evezy 5 seconds, vith tinestanps
/stackcount -p 185 ip_output
 count ip_output stacks for PID 185 only
[.--]
A planned addition is an option to limit the stack depth recorded.
4.7trace
trace(8)* is a BCC multi-tool for per-event tracing from many different sources: kprobes, uprobes,
tracepoints, and USDT probes.
It can answer questions such as:
• What are the arguments when a kernel- or user-level function is called?
• W'hat is the return value of this function? Is it failing?
●How is this function called? What is the user- or kernel-level stack trace?
As it prints a line of output per event, trace(8) is suited for events that are called infrequently.
Very frequent events, such as network packets, context switches, and memory allocations, can
occur millions of times per second, and trace(8) would produce so much output that it would cost
significant overhead to instrument. One way to reduce the overhead is to use a filter expression
to print only events of interest. Frequently occurring events are usually better suited for analysis
with other tools that do in-kernel summaries, such as funccount(8), stackcount(8), and argdist(8).
argdist(8) is covered in the next section.
4.7.1 trace Example
The following example shows file opens by tracing the do_sys_open() kernel function and is a
trace(8) version of opensnoop(8):
trace 'do_sys_open *ss”, arg2′
PID
TID
COHMN
FUBIC
29588
2 9591
device po11
uados.s"op
/dev/bus/u.sb
2958B
29591
Trod sotasp
do_ays_open
/dev/bus/usb/04
[...]
4 0rigin: This tool 
and included in BCC on 22-Feb-2016.
---
## Page 142
4.7trace105
arg2 is the second argument to do_sys_open(), and is the filename opened and has the type
char *. The final column, labeled *-*, is the custom format string provided to trace(8).
4.7.2 trace Syntax
The arguments to trace(8) are options to change behavior and one or more probes:
tzace [options] probe [probe ..-]
The syntax for probe is:
eventnase (slgnature) (boolean filter) *fornat string*, argusents
The eventname signature is optional, and it is needed only in some cases (see Section 4.7.4)
The filter is also optional, and allows Boolean operators: ==, , and !=. The format string with
arguments is also optional. Without it, trace(8) still prints a line of metadata per event; however,
there is no custom field.
The syntax for eventname is similar to the eventname syntax for funccount(8), with the addition
of return probes:
* name or p: name: Instrument the kernel function called name(
r: : nane: Instrument the return of the kernel function called mame(
* 1ib: aame or p : Lib: aame: Instrument the user-level function called name) in the
library lib
·r: Iib: name: Instrument the return of the user-level function mame() in the library lib
• path: name: Instrument the user-level function called name( found in the file at path
• r: path: aase: Instrument the return of the user-level function mame() found in the file
at puth
* t: system: name: Instrument the tracepoint called system:nzme
 u: Iib: name: Instrument the USDT probe in library Jib called nwne
aq o suossandxa ze[nsa1 smoe uogdo a suL (Sunqqo8) Suns ue yeu o preopm y : 
used instead.
The format string is based on printf(), and supports:
=u: unsigned int
• Id: int
41u: unsigned long
▪ s1d: long
411u: unsigned long long
*411d: long long
---
## Page 143
106
6Chapter 4 BCC
•shu: unsigned short
hd: short
·4x: unsigned int, hexadecimal
41x: unsigned long, hexadecimal
•411x: unsigned long long, hexadecimal
=e: character
•K: kernel symbol sring
 40: user-level symbol string
▪ As: string
The overall syntax resembles programming in other languages. Consider this trace(8) one-liner
trace *c:open(arg2 == 42)*ss ad*, argl,arg2*
Here is the equivalent program in a more C-like language (for illustration only; trace(8) will not
execute this):
tzace *c:open [ if (arg2 == 42) I pzintf (*hs hd",n*, argl, arg2l ) 1*
The ability to custom print argurments for an event is used frequently in ad hoc tracing analysis, so
trace(8) is a go-to tool.
4.7.3 trace One-Liners
Many one-liners are listed in the usage message. Here is a selection with additional one-liners
Trace the kernel do_sys_open( function with the filename:
trace *do_Bys_open *is*, arg2'
Trace the return of the kernel do_sys_open() function and print the return value:
trace *e:ido_Bys_open *ret: ed", retval'
Trace do_nanosleep0 with mode and user-level stacks:
,7bre upe rapou, daoTgoueuop,-aoe3
Trace authentication requests via the pam library:
trace *pamipam_start *es: la*, argl, arg2'
---
## Page 144
4.7 trace
107
4.7.4 trace Structs
BCC uses the system headers as well as the kernel headers package to understand some structs.
For example, consider this one-liner, which traces do_nanosleep0 with the task address:
(se120000 bytes
Tenqex *xtT。uedossop:+x, eoex
Trace the return fron the open syscall and print the return ralue
trace *c:open (arg2 == 42) *ss 5d*, argl, arg2*
Trace the open() call fron libc only if the flags (arg2) argument is 42
[. - -]
As this is a mini programming language that you may use only occasionally,the examples at the
end of the usage message are invaluable reminders.
While trace(8) is extremely useful, it is not a fully-fledged language. For a complete language, see
Chapter 5 on bpftrace.
4.8argdist
argdist(8)? is a multi-tool that summarizes arguments. Here is another real-world example from
Netflix: A Hadoop server was suffering a TCP performance issue, and we had tracked it down to
zero-sized window advertisements. I used an argdist(8) one-liner to summarize the window size in
production. Here is some output from the issue:
+ argdist -H 'r::__tcp_select_window() :int:$retval'
[21:50:03]
$retvs1
1 count
distribution
0 -> 1
: 6100
2 -> 3
: 0
4 -> 7
: 0
8 -> 15
: 0
1.6 -> 31
: 0
5 Origin: This tool was deve
by Sasha Goidsi
and included in BCC on 12-Feb-2016,
---
## Page 148
4.8argdist
111
32 -> 63
: 0
64 -> 127
: 0
128 -> 255
: 0
256 -> 511
: 0
51.2 -> 1023
: 0
1024 -> 2047
: 0
2048 -> 4095
: 0
4096 -> 8191
: 0
8192 -> 16383
: 24
L9LZE  65535
: 1752
x×s.[
65536 -> 131071
: 2774
131072 -> 262143
: 1001
|******
262144 -> 524287
: 464
| ***
524288 -> 1048575
: 3
T5T6602  4194303