### 解析Bootloader安全

#### 个人简介
- **程君**  
  - **邮箱**: [EMAIL]
- **专业背景**
  - 10年系统安全、移动与嵌入式安全研究与开发经验
  - 2008-2010: Comodo 主动防御研究与开发
  - 2010-2011: 网秦移动安全高级研究员
  - 2011-至今: 猎豹移动研发经理，参与手机毒霸的研发
- **主要研究方向**
  - 移动安全支付
  - 社会工程（短信诈骗、电话诈骗）
  - 盗号（程序伪冒、钓鱼、键盘记录、网络截获）
  - 系统漏洞（Root提权、内存读取）
  - Bootloader级别漏洞

#### 议程
1. **Bootloader基本介绍**
   - 定义与作用
   - 研究意义
   - 研究对象
   - 组成结构
2. **Bootloader获取与分析**
   - 获取方法
   - 分析方法
3. **Bootloader具体流程**
   - 一般流程
   - Android平台
   - iPhone平台
4. **Bootloader攻击向量及漏洞介绍**
   - 攻击向量
   - 漏洞案例分析
5. **Bootloader安全总结**

### Bootloader基本介绍

#### 什么是Bootloader
- **定义**: Bootloader是启动加载程序，在PC时代，Windows系统开机时会首先加载BIOS，然后是MBR，再到OS Loader系统内核，最后启动完毕。Bootloader相当于MBR和OS Loader，它在手机启动时初始化硬件，引导系统内核直到系统启动。
- **常见例子**: PC的GRUB和嵌入式的U-Boot。

#### 研究Bootloader的意义
1. **修复变砖机器**
2. **寻找漏洞**: 越狱（iPhone）与解锁（Android）
   - **iPhone**: BootROM漏洞，Key提取
   - **Android**: 永久Root, 安装第三方ROM
3. **安全移动操作系统设计**: 如Knox

#### 研究对象
- 由于Bootloader涉及芯片厂商和系统，不同厂商和系统的启动流程各不相同。本议题将以高通芯片和Android平台为例进行说明，并简要介绍iPhone的Bootloader流程。

#### Bootloader组成 (Android)
1. **PBL (Prime Bootloader)**: 类似于iPhone的BootROM
2. **SBL (Second Bootloader) 1/2/3**
3. **APPSBL (Application Bootloader)**: HTC称为hboot，其他厂商称为aboot
4. **HLOS (High-Level OS)**: 基带也称为baseband或radio
5. **TZ (TrustZone)**

#### Bootloader组成 (iPhone)
1. **BootROM**: PBL, SecureROM
2. **LLB (Low Level Bootloader)**: 检查iBoot的签名
3. **iBoot**: 第二阶段Bootloader, 支持恢复模式
4. **iBBS**: iBoot的简化版本
5. **iBEC**: 在LLB中通过Fake DFU执行恢复

### Bootloader获取与分析

#### Bootloader获取
1. **从ROM中获取**
   - Android后缀为`.mbn`或`.img`
2. **从系统中dump**
   - 例如华为P1:
     ```sh
     dd if=/dev/block/mmcblk0p3 of=/sdcard/mnt/bootloader.img
     ```
   - iPhone: 使用Limera1n Exploit dump BootROM
3. **使用JTAG接口获取**
   - Android手机通常可以通过JTAG接口获取

#### Bootloader分析 (以Android SBL1为例)
- **直接反汇编效果不佳**，因为缺少加载地址。
- **确定加载地址的方法**:
  1. **CPU体系手册规定的加载地址**
     - 以高通MSM8960为例:
       - sbl1: `0x2A000000`
       - tz: `0x2a020000`
       - sbL2: `0x2E000000`
       - sbl3: `0x47f00000`
  2. **文件格式结构中的加载地址**
  3. **手动分析，经验猜测**
     - 如果出现大量未知但相近的地址，可能是加载地址。

### Bootloader具体流程

#### 一般流程
- **第一阶段**:
  1. 初始化基本硬件
  2. 将Bootloader搬运到内存中
  3. 设置堆栈指针并将BSS段清零
- **第二阶段**:
  1. 初始化本阶段要用到的硬件
  2. 读取环境变量
  3. 启动:
     - 自启动模式: 从Flash或通过网络加载内核并执行
     - 下载模式: 接收到用户命令后执行

#### 具体流程 (Android)
- **PBL (BootROM) -> SBL1 -> SBL2 -> TZ -> SBL3 -> APPSBL (app bootloader)**

#### 具体流程 (iPhone)
- **Normal Mode**
- **DFU Mode (Device Firmware Upgrade)**

#### 流程总结
- Bootloader分为多阶段引导，除了进行正常的硬件初始化，还负责签名验证，确保下一层系统的完整性，最终加载操作系统内核。

### Bootloader攻击向量

#### fastboot接口
- **fastboot oem unlock**: 厂商预留的解锁命令
- **fastboot boot**: 危险接口

#### 对于未解锁的设备
- 通过fastboot接口绕过签名验证，改写系统目录权限

#### 对于已解锁的设备
- **修改boot.img系统文件init.rc**: 加载恶意服务
- **在Bootloader中嵌入rootkit代码**

#### 未解锁漏洞攻击
- **Google Nexus One**: Bootloader签名被绕过
- **Motorola Android系统 TrustZone内核安全漏洞 (CVE-2013-3051)**
- **Samsung Galaxy S4 aboot漏洞**

#### 已解锁修改boot.img init.rc启动文件
- **OldBoot系列**: 修改boot.img的init.rc添加服务
  ```sh
  service imei_chk /sbin/imei_chk
  class core
  socket imei_chk stream 666
  ```

#### 已解锁Bootloader rootkit
- 还未发现攻击，但估计很快将会出现

### Bootloader漏洞介绍

#### Google Nexus One的Bootloader签名被绕过
- **工具**: blackrose
  - [Link](http://forum.xda-developers.com/showthread.php?t=1270)
- **原理**: [Link](http://hi.baidu.com/vessial/item/830e961d2c2bea623e87ce47)

#### Samsung Galaxy S4 aboot漏洞
- **工具**: [Link](https://github.com/Berrrry/loki)
- **原理**: [Link](http://blog.azimuthsecurity.com/2013/05/exploiting-samsung-galaxy-s4-secure-boot.html)

#### Motorola Android系统 TrustZone内核安全漏洞 (CVE-2013-3051)
- **漏洞描述**: 使用Qualcomm MSM8960芯片的Motorola Razr HD, Razr M, 以及Atrix HD设备中，某Motorola定制版的Android 4.1.2系统TrustZone内核中存在漏洞。该漏洞源于程序没有校验物理地址参数与内存区域之间的关联。本地攻击者可利用该漏洞解锁Bootloader。
- **工具**: motopocalypse
  - [Link](http://vulnfactory.org/public/motopocalypse.zip)
- **原理**: [Link](http://blog.azimuthsecurity.com/2013/04/unlocking-motorola-bootloader.html)

### Bootloader安全总结

1. **信任链安全**: 任何输入文件的信任都必须经过签名和校验。Nexus One的漏洞是因为没有签名Kernel文件，导致已有签名被绕过；Oldboot的利用是没有签名boot.img。
2. **解锁的Bootloader不能保证系统的安全性**。
3. **关键内核函数地址隐藏关闭kptr_restrict写权限**，对内核结构进行写保护。

### 后续待研究
- **Bootloader rootkit**
- **主流Android未解锁解锁Bootloader漏洞发掘**

### 参考资料
- **8960 Boot Architecture**
- **Azimuth Security Blog**: [Link](http://blog.azimuthsecurity.com)
- **绕过Nexus One的Bootloader数字签名**: by xee
- **Android系统典型Bootloader分析**: by 火翼
- **XDA Developers Forum**: [Link](http://forum.xda-developers.com/)

谢谢！