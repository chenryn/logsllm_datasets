(cid:12)(cid:12)(cid:12)exp(cid:16) c
(cid:17) − 2 ·(cid:0)1 + 17933 · 2−43(cid:1)(cid:12)(cid:12)(cid:12) ≤ 2−46
of precision. Thus, exp(cid:16) c
we simply use a first order approximation of the exponential at c:
2σ 2
2
.
2σ
4.5 Implementation of the approximation
We provide a SageMath code [4] which takes a function and an interval I as input and generates a
polynomial approximation of the function on I according to the previously described procedure.
This program was used to generate P I3exp, the approximation of exp on I3 = [− ln(2), 0] and P I2
cosh, the
direct approximation of cosh on I2 = [0, B2
σ α ]. Given the refinement provided for cosh approximation,
the direct approximation is not used for the constant time implementation. Although, it is suited
for the masking of the Rejection Sampling of Section 5.3.2.
Remark 4. We actually added some granularity on η and turned it into a vector that indicates the
number of bits for each coefficient of the polynomial. This makes it possible to select more precision
on the high degree coefficients and less on the lower degree ones. In this setting, η corresponds to the
maximum size of the coefficients.
26
For BLISS-I parameters, we get the parameters
 exp on I3,
exp on I3,
cosh on I2,
(γ , η) = (9, 35) with K = 40
(γ , η) = (11, 45) with K = 48
(γ , η) = (96, 110) with K = 48.
Note that P I2
cosh has only 48 coefficients due to its parity. The description of the polynomials are
given in Appendix B.4.
5 HIGH ORDER MASKING OF BLISS
In this section, BLISS is turned into a functionally equivalent scheme which is both constant-time
(from the previous sections) and secure against more powerful side-channel attacks which exploit
the leakage of several executions. This can be done after a preliminary step in which BLISS is
slightly tweaked into a new scheme referred to as u-BLISS which outputs u even in case of failure.
Then, only the key derivation scheme and the signature scheme must be protected, since the
verification step does not manipulate sensitive data.
5.1 Side-channel attacks and masking
Theoretical leakage models have been introduced in order to properly reason on the security of
implementations exposed to side-channel attacks.
The probing model or ISW model from its inventors [27] is undoubtedly the most deployed. In a
nutshell, a cryptographic implementation is d-probing secure iff any set of at most d intermediate
variables is independent from the secrets. This model is practically sound from the reduction
established in [14] and also convenient to prove the security of an implementation as it manipulates
finite sets of exact values.
The masking countermeasure, which performs computations on secret-shared data, appears as a
natural countermeasure in this landscape. Basically, each input secret x is split into d + 1 variables
(xi)0≤i ≤d referred to as shares. d of them are generated uniformly at random whereas the last one
is computed such that their additive combination reveals the secret value x. d is called masking
order and represents the security level of an implementation.
While the conceptual idea behind the masking countermeasure is pretty simple, implementing it
to achieve d-probing security has been shown to be a complex and error-prone task. Although it
is straightforward on linear operations on which masking is equivalent to applying the original
operation on each share of the sensitive data, the procedure is much more complicated on non-linear
functions. In the latter, the mix of shares to compute the result makes it mandatory to introduce
random variables and the bigger the program is, the more dependencies to be considered. This is
why Barthe et al. formally defined in [2] two security properties, namely non-interference and strong
non-interference, which (1) ease the security proofs for small gadgets (as algorithms operating on
shared data), and (2) allows to securely combine secure gadgets by inserting refreshing gadgets
(which refresh sharings using fresh randomness) at carefully chosen locations10. In a nutshell, a
gadget is d-non-interfering (d-NI) iff any set of at most d observations can be perfectly simulated
from at most d shares of each input. A gadget is d-strong non-interfering (d-SNI) iff any set of at
most d observations whose dint observations on the internal data and dout observations on the
outputs can be perfectly simulated from at most dint shares of each input. It is easy to check that
d-SNI implies d-NI which implies d-probing security. An additional notion was introduced in [3]
to reason on the security of lattices-based schemes in which some intermediate variables may be
10Notice that non-interference was already used in practice [13, 38] to prove probing security of implementations.
27
(aq)0≤i≤d
(a1)0≤i≤d
Lin
PkGen
a1
pk
Unmask
GenA
PolyGen
(fi)0≤i≤d
f ail
Re jSp
PolyGen
(дi)0≤i≤d
(Si)0≤i≤d
SkGen
RSKG
FailTestKG
(Si)0≤i≤d
or ⊥
(Si)0≤i≤d
Fig. 14. Masked BLISS key generation. The white (resp. blue, red) gadgets are proved d-NI (resp. d-NIo with
public outputs, unmasked).
revealed to the adversary. Intuitively, a gadget with public outputs X is d-non-interfering with
public outputs (d-NIo) iff every set of at most d intermediate variables can be perfectly simulated
with the public outputs and at most d shares of each input.
Let u-BLISS be the variant of BLISS that outputs u even in case of failure. The following sections
justify the security of u-BLISS and prove the probing security of the key derivation and the signature
procedures from the security properties fulfilled by their gadgets among d-NI, d-NIo, and d-SNI.
5.2 Overall structure
To achieve d-probing security, we need to carefully mask both the key derivation scheme and
the signature scheme. For the sake of clarity, we focus on a single iteration of the latter. In other
words, from now on, the signature algorithm considered is the same as in Figure 2 except that if
the rejection sampling asks for a restart, the algorithm output ⊥. The masking can be generalized
by calling the masked signature algorithm when it fails.
For efficiency purposes, our masking countermeasure splits each sensitive data into d + 1 shares,
namely y1, y2, s1, s2, z1, z2, and the intermediate variables that stricly depend on them. The public
variables (a1, a2) (i.e., the public key), µ (i.e., the message), RejSp (i.e., the bit corresponding to the
success of the rejection sampling), f ail (i.e., the bit corresponding to the success of the public
key generation), (z1, z2, c) (i.e., the signature) are left unmasked. Furthermore, because anyone can
recombine ⌊u⌉d mod p, even if u is an intermediate value, it is considered as a public output, as
well as bits RejSp and f ail.
Decompositions into sub-gadgets are provided in Figure 14 for the key derivation scheme and in
Figure 15 for the signature scheme.
Some of these sub-gadgets are either trivial to mask or an efficient masked version is already
provided in [3]. Efficient masked versions are designed and proved for the other ones in section 5.3.
To further achieve global probing security for the signature, two calls of a d-SNI refreshing gadget
are inserted at the outputs of Sign’s calls for the signature. Table 4 recalls the security property
achieved by the masked version of each one of the sub-gadgets used in the key derivation scheme,
the signature scheme, or both. In all these reported cases, masking is efficiently performed either
through a Boolean sharing or an arithmetic sharing coming with a dedicated modulus, depending
on the sub-gadget and the manipulated data. To go from one sharing to another while preserving
the d-probing security, we need to apply a conversion algorithm. An efficient algorithm between
Boolean and arithmetic sharing for a non-prime modulus is already defined in [3]. Two tweaks to
convert between two arithmetic sharings with different non-prime moduli are discussed afterwards.
28
c
FailTest
c or ⊥
(z1i)i
f ail =
false
FailTest
f ail = true
Unmask
z1
Re jSp
Re jSp
f ail = true
⊥
⊥
(z2i)i
f ail =
false
Unmask
z2
(y1i)i
µ
Sign
Refresh
(s1i)i
GaussGen
GaussGen
(y1i)i
(y2i)i
(ui)i
Comm
Unmask
u
c
H ash
(bi)i
BitGen
(si)i
c
(s2i)i
(z1i)i
RS
A
(y2i)i
Sign
Refresh
(z2i)i
FailTest
Fig. 15. Masked BLISS signature. The green (resp. white, blue, red) gadgets are proved d-SNI (resp. d-NI,
d-NIo with public outputs, unmasked).
Table 4. Gadgets and their security properties.
Key Derivation
Gadget
Property Reference
Signature
Property Reference
Gadget
PkGen
SkGen
PolyGen
d-NI
d-NIo
d-NI
d-NIo
RSKG
FailTestKG d-NI
d-NI
Lin
d-NIo
none
Unmask
GenA
sec. 5.3
sec. 5.3
sec. 5.3
sec. 5.3
sec. 5.3
sec. 5.3
[3]
Unmask
Hash
GaussGen d-NI
d-NI
Comm
d-NIo
none
d-NI
d-NI
d-SNI
d-NIo
RS
FailTest d-NI
Refresh
BitGen
Sign
sec. 5.3
[3]
[3]
sec. 5.3
[3]
[27]
sec. 5.3
sec. 5.3
The security of masked key derivation and signature schemes as displayed in Figures 14 and 15
with gadgets’ security properties in Table 4 is captured in Theorems 5.1 and 5.2. Proofs are given in
the supplementary material (sections A.1 and A.2, and 5.3 for the individual gadgets).
Theorem 5.1. The masked u-BLISS key generation algorithm is d-NIo secure with public outputs
pk, RejSp, and f ail.
The proof is given in Appendix A.
Theorem 5.2. The masked u-BLISS sign algorithm is d-NIo secure with public outputs u, RejSp,
and f ail.
The proof is given in Appendix A.
Theorems 5.1 and 5.2 allow to reduce the EUF-CMA security of the BLISS signature scheme
masked at order d in the d-probing model and in the random oracle model to the EUF-CMA security
of the u-BLISS variant of the scheme in the random oracle model.
Based on the work of [3] we can prove that the security of u-BLISS reduces to the EUF-CMA
security of the orginal BLISS scheme by introducing a mild computational assumption which is
29
close to the classical LWE problem. This problem informally states that distinguishing the output
distribution of u when a rejection occurs from the uniform distribution on R2q is hard.
It can seem artifical and ad-hoc to introduce such a new problem. However we can avoid it by
hashing not u but f (u) for some statistically hiding commitment f (which can itself be constructed
under standard lattice assumptions). The downside of that approach is that it has a non negligible
overhead in terms of key size, signature size, and to a lesser extent signature generation time.
5.3 Masked Gadgets
In this section, we give the masked versions of the sub-gadgets listed in Table 4 that are involved
in the computation of the key derivation and/or the signature. They come with a sketch of proof of
the property they achieve from Table 4. All the proofs use the security properties of smaller gadgets
together with the compositional properties of [2]. We additionally discuss new methods to go from
one arithmetic sharing to another with a different modulus, which can be used as independent
contributions in other masking schemes.
5.3.1 Gadgets for Key Generation Scheme. As illustrated on Figure 14, the masked key generation
algorithm can be divided into eight different sub-gadgets. We briefly describe the sub-gadgets
for which masked version is trivially achieved and we provide deeper explanations for the more
complex ones.
PolyGen. The first masked sub-gadget to be called is PolyGen for the uniformly random generation
of two polynomials f and g with exactly d1 entries in {±1} and d2 entries in {±2} (Step 2 in
Figure 1). Basically, for each polynomial, we first attribute the d1 first coefficients to 1 and the next
d2 coefficients to 2. Then, a d-NI linear refresh gadget from [38] is applied on the sharing of d + 1