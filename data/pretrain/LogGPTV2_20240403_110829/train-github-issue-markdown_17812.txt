React version: 16.13.1
## Steps To Reproduce
  1. I used the following code in Jest
      it("should not rerender when setting state to the same value via click", async () => {
        const callback = jest.fn();
        function MyComponent() {
          const [foo, setFoo] = useState("bir");
          callback();
          return ( setFoo("bar")}>{foo});
        }
        const { getByTestId } = render()
        const testElement = getByTestId("test");
        expect(testElement.textContent).toEqual("bir");
        expect(callback).toBeCalledTimes(1);
        act(() => { fireEvent.click(testElement); });
        expect(testElement.textContent).toEqual("bar");
        expect(callback).toBeCalledTimes(2);
        act(() => { fireEvent.click(testElement); });
        expect(testElement.textContent).toEqual("bar");
        expect(callback).toBeCalledTimes(2); // gets 3 here
        /*
         assuming we update the last line as follows
         expect(callback).toBeCalledTimes(3); // really should be 2
         act(() => { fireEvent.click(testElement); });
         expect(testElement.textContent).toEqual("bar");
         expect(callback).toBeCalledTimes(3); // does not re-render
        */
      })
Link to code example:
  * Similar code in codesandbox
  * Simlar AND working code in an Expo Snack
## The current behavior
On initial render OK  
On first click, rerender due to value change OK  
On second click, rerender even with the same value NOT OK
## The expected behavior
On initial render OK  
On first click, rerender due to value change OK  
On second click, no rerender because useState dispatch with the same value
Note this works correctly on React-Native as shown by Expo