malware solutions) too. While we assume the ransomware
only executes with user-level privileges, most contemporary
malware is packed. Therefore, our threat model assumes
that the malware is packed with common-oﬀ-the-shelf pack-
ers. More precisely, the threat model only considers packers
that unpack the whole binary at once and not those that ap-
ply advanced strategies such as incremental unpacking and
repacking or emulation-based packers such as Themida [14].
We acknowledge that more sophisticated packers and obfus-
cation techniques can defeat our proposed system. While
such techniques have been known in scienti(cid:12)c literature for
years (e.g.,[43]), these techniques have not gained traction in
the malware community at large. Whatever the reason for
the slow uptake, we argue that our proposed approach sig-
ni(cid:12)cantly raises the bar for malware authors to evade detec-
tion (i.e., attackers would have to overcome these reasons).
Finally, we assume the user can create an uncompromised
asymmetric keypair to activate our system and does so be-
fore being infected with ransomware.
3. OVERVIEW
PayBreak consists of three diﬀerent components which
are combined to form a cohesive system that is able to re-
verse (cid:12)le encryption performed by hybrid cryptosystem ran-
somware.
In this section we provide an overview of these
components and their roles in the system. Figure 1 shows
a working scenario of PayBreak. Upon installation, the
user con(cid:12)gures PayBreak with the public key (pku) of an
asymmetric key pair (pku; sku), while the private key (sku)
is secured oﬀ site. The system continuously stores encrypted
session keys used on the machine in a secure key vault. In
the unfortunate event that the user’s machine is infected
with ransomware, the system’s key vault is accessed with
the private key, sku. The data stored in the key vault is
then used to decrypt ransomed (cid:12)les granting the user a pay
break.
The system leverages the fact that in a hybrid cryptosys-
tem the session key must be used during the symmetric en-
cryption. In a practical ransomware attack this encryption
must happen on the user’s machine. Because of this char-
acteristic, we can sidestep the challenges imposed by the
strong cryptography employed by modern ransomware.
Crypto Function Hooking.
Ransomware authors require secure cryptography for long
term success. The reason is that, historically, developing
their own implementations was met with cryptographic de-
feat. Thus, today’s malware authors can choose to either
dynamically link against (system-provided) cryptographic li-
braries, or statically link external libraries into their code.
PayBreak supports both types of linking behaviors and
identi(cid:12)es procedures in dynamically linked libraries by their
name and address, whereas statically linked procedures are
identi(cid:12)ed based on fuzzy byte signatures. Hooks are then
created at the location of these procedures. The hook redi-
rects control from these cryptographic procedures and ex-
ports session keys, and any parameters for the symmetric
encryption scheme. Once data is exported, the system then
returns control back to the original cryptographic procedure,
and (cid:13)ow continues as normal. The details of this component
are discussed in x4.1.
Key Vault.
The key material and algorithm details (recovered from
hooked procedures as explained above) to recover symmet-
rically encrypted data are stored in a safe and securely en-
crypted key vault. Due to the threat of ransomware target-
ing the key vault, our implementation stores the harvested
key material into an append-only (cid:12)le protected with Admin-
istrator privileges. This integrity mechanism has shown to
be suﬃcient in our evaluation. However, we discuss further
key vault integrity improvements in x6. The contents that
enter the key vault are securely encrypted with the user’s
public key. By encrypting the data prior to storing it, we
ensure that the key vault is secure for the user. The details
of this component are discussed in x 4.2.
File Recovery.
In the unfortunate, but rare situation where a user gets
infected with ransomware and her (cid:12)les are held ransom, the
key vault is accessed with the user’s private key, sku. Pay-
Break is used to access the key material and algorithm de-
tails used to encrypt the (cid:12)les being held ransom. The algo-
rithm details are used to con(cid:12)gure the appropriate symmet-
ric encryption scheme and the key material is used with this
con(cid:12)guration to attempt recovery. Because, ransomware
typically stores meta data, such as the original (cid:12)le length,
the date of encryption, and encrypted key data, at the be-
ginning of encrypted (cid:12)les the actual encrypted (cid:12)le data is
often oﬀset by this meta data. Prior to decryption with
vaulted symmetric keys, PayBreak determines the correct
oﬀset into the encrypted (cid:12)le. The details of this component
are discussed in x 4.3.
4.
IMPLEMENTATION
We implemented our prototype system, PayBreak, to
target hybrid cryptosystem ransomware on the Windows 7
operating system. Our implementation is con(cid:12)gured to hook
encryption performed by Microsoft’s Crypto APIs and the
Crypto++ library. The implementation additionally uses
the strong cryptography in Microsoft’s CryptoAPI to se-
curely store session keys employed by ransomware. In the
unfortunate event of a ransomware infection, these keys may
be retrieved by the user of PayBreak to be used for the de-
cryption of (cid:12)les held for ransom.
4.1 Crypto Function Hooking
Hooking is a scheme that is used to modify application be-
havior by augmenting original functions with arbitrary new
functionality. In Windows, functions can be hooked by vari-
ous means, ranging from modifying a processes’ Import Ad-
dress Table, to injecting DLLs [19]. Our prototype employs
Microsoft Research’s Detours library for hooking. Detours
hooks a function by (cid:12)rst saving a minimum of 5 bytes (the
size of an unconditional JMP instruction in x86 assembly)
from the beginning of the original function’s memory ad-
dress into a new hook function. This speci(cid:12)c amount saved
might extend past 5 bytes due to variable length instructions
in the x86 architecture. The hook function also contains the
new functionality that is added. For PayBreak this is the
code that exports the session keys and algorithm parame-
ters to the key vault. At the end of the newly created hook
function, Detours creates an unconditional jump instruction
that transfers control to the original function skipping over
the bytes already saved into the hook function. To activate
the hook and redirect control from the original function to
the hook function, an unconditional jump instruction to the
hook function overwrites the (cid:12)rst (cid:12)ve bytes in the original
function. This completes the hook, and any calls made to
the original function, will now be redirected to the hook
function. Our system employs this scheme for hooking and
injects itself into every new process launched on a Windows
7 machine.
Ransomware authors include cryptography into their mal-
ware by dynamically linking against system provided cryp-
tographic libraries, or statically linking external libraries.
These two linking behaviors pose diﬀerent challenges to the
hooking portion of the system.
Hooking in dynamically linked libraries.
Windows has included feature rich cryptographic libraries
as part of their platform for decades. This ubiquitous pres-
ence makes it easy for malware to dynamically link to the
cryptographic libraries found on Windows machines. Mi-
crosoft’s CryptoAPI hides sensitive information such as keys
and their locations in memory by only allowing operation
through a set of subroutines that have special access to it.
The security, platform consistency, and API completeness of
the CryptoAPI makes it a common choice for local (cid:12)le en-
cryption by ransomware authors. Microsoft’s CNG library,
is the long term replacement for the classic CryptoAPI (both
are included in Windows 7), but operates much the same
way, and is seamlessly handled by PayBreak too.
Due to the abstract and opaque design of the CryptoAPI,
usage and exportation of the session key can only be ac-
complished through speci(cid:12)c CryptoAPI procedures. All en-
cryption through the CryptoAPI must be performed via the
CryptEncrypt function, or be exported (i.e., for external
use) via the CryptExport function. CryptoAPI based ran-
somware uses the CryptEncrypt function of the CryptoAPI
to perform local encryption of (cid:12)les. Because, the CryptoAPI
is dynamically linked, adding a hook is completely indepen-
dent of the calling process, and malware obfuscation does
not impact this capability. Through a hook con(cid:12)gured in
CryptEncrypt, PayBreak securely exports the session key
Figure 1: Overview of PayBreak.
using the CryptExport API function. While the hook in
CryptEncrypt successfully exports the session key, details
such as the cipher mode, and the initialization vector are not
included. To obtain these parameters and then recreate the
appropriate con(cid:12)guration, our system hooks the CryptAc-
quireContext, and CryptSetKeyParam functions. The hook
into CryptAcquireContext provides PayBreak with knowl-
edge of the algorithm that was used for encryption, includ-
ing the default parameters. Changes to these parameters
are performed with the CryptSetKeyParam function, as such
this API function is hooked as well.
Alternatively to encrypting with the CryptoAPI, a user
may wish to generate a cryptographically secure random
number with the API instead. The random number can
then be used to derive a session key for another encryption
function.
In Window’s case, the supported API to gener-
ate a random number is CryptGenRandom, and many crypto-
graphic libraries (OpenSSL, NaCl, LibTomCrypt, and more)
leverage this API for their cryptographically secure pseu-
dorandom number generator (CSPRNG). By dynamically
hooking, and recording this system function, PayBreak
stores the base material used to generate many session keys
used by ransomware linking these libraries either dynami-
cally, or statically.
Hooking in statically linked libraries.
Ransomware that statically links a cryptographic library
forces PayBreak to follow a slightly diﬀerent approach.
Statically linked libraries are embedded into the executable
code of the application, and thus are aﬀected by obfusca-
tion. Thus, PayBreak identi(cid:12)es cryptographic procedures
at runtime in a process’ memory, and subsequently hooks
them. To this end, our system uses 32-byte fuzzy func-
tion signatures to identify statically linked library functions.
This approach is similar to IDA’s Fast Library Identi(cid:12)ca-
tion and Recognition Technology (FLIRT) [7]. A signature
consists of the (cid:12)rst 32 bytes of a known procedure and a
procedure is identi(cid:12)ed when a threshold percentage of these
32 bytes is identi(cid:12)ed contiguously in memory. Because, mal-
ware is typically packed, PayBreak scans executable mem-
ory of all executed processes for function signatures. Our
prototype implementation performs a scan after the (cid:12)rst
NtReadFile system call in each process. The rationale is,
that in order to encrypt user data, the malware must read
the data (cid:12)rst. When a signature is identi(cid:12)ed, a hook is
placed at its address through the use of Detours. This hook
securely exports the session key, and encryption algorithm
details. While our current prototype is eﬀective against con-
temporary ransomware, advanced packing and obfuscation
can thwart the system (x6). An avenue to strengthen the
detection of cryptographic code could leverage the semantic
detection of cryptographic functionality such as the analysis
presented in [35].
Our prototype implementation is out(cid:12)t with signatures
for the Crypto++ statically linked library. These signatures
consist of the (cid:12)rst 32 bytes of Crypto++’s SetKey, Cipher-
ModeBase, and SymmetricCipherBase class methods. The
export of Crypto++’s session key, and algorithm details is
done with the CryptoAPI’s CryptExport API function. We
evaluate and discuss the robustness of our signatures in x5.2.
4.2 Key Vault
The system’s key vault asserts that symmetric keys used
by Microsoft’s CryptoAPI and Crypto++ are securely stored
only to be accessed by the ransom victim when necessary.
The details about the symmetric encryption schemes are
Ironically, PayBreak’s key vault system
stored as well.
is designed similarly to the hybrid cryptosystems that ran-
somware deploys. Session keys are encrypted and exported
using the user’s public key (pku) generated during installa-
tion of the system. Our implementation uses 2048-bit RSA
keys for this step. The large key size of 2048 bits guarantees
secure encryption of data in size less than or equal to the
key size |{ more than enough for typical 256-bit symmetric
keys.
As explained in the previous section, a call to CryptEn-
crypt is augmented with the behavior of the CryptExport
function. The auxiliary CryptExport call takes as arguments
the handle to a session key that is passed to the CryptEn-
crypt function, as well as our system’s exchange key (i.e.,
the user’s pku) to securely export the session key. Keys
being used by CryptEncrypt also contain algorithm (i.e.,
AES, 3DES, RC4, etc.) information, and as such this in-
formation is exported as well. Additionally, in order to re-
construct the symmetric encryption con(cid:12)guration used by a
ransomware infection, algorithm parameters such as the ini-
tialization vector (IV), and the block cipher mode used must
be saved. This information is extracted from hooks that
perform recording of the parameters passed to the CryptAc-
quireContext and CryptSetKeyParam functions. Akin to
the Cryptographic Message Syntax2, these parameters are
concatenated to the session key material in cleartext, as their
disclosure does not aﬀect the security of modern crypto sys-
tems. This concatenated ‘blob’ is appended to PayBreak’s
key vault. Additionally, as described in x4.1, our prototype
implementation stores the cryptographic key material (sim-
ple byte arrays) passed to Crypto++’s functions into the key
vault. The system also stores the outputted random bytes
from CryptGenRandom function calls. These bytes can be
used on a reverse engineered ransomware family to recreate
session keys used to encrypt (cid:12)les.
As a safety precaution to prevent the vault itself from
being encrypted by ransomware, the vault is con(cid:12)gured to
be append-only and all other access is only allowed to the
Windows Administrator group.
In the unfortunate event
that the key vault requires access, the private key (sku) set
up during installation of PayBreak is used to decrypt the
key material stored. This yields access to the individual
session keys, and encryption scheme parameters.
4.3 File Recovery
The last component of PayBreak is the actual recovery
of the (cid:12)les encrypted during a ransomware infection. File
recovery works in three phases. First, the key vault is ac-
cessed using the stowed away private key. Second, the data
in the vault is parsed into the symmetric keys and the cor-
responding encryption scheme parameters such as, block ci-
pher mode, and initialization vector. Finally, the retrieved
session keys are then used to decrypt the victim’s (cid:12)les.
Each (cid:12)le encrypted by ransomware is typically concate-
nated with meta data, such as the ransomware version, and
original size of the encrypted (cid:12)le. Because of this meta data
the actual encrypted (cid:12)le data is often oﬀset in (cid:12)les held for
ransom. Without knowledge of each ransomware family’s
individual meta data structure, our system is forced to test
decryption at every possible oﬀset in the (cid:12)les held for ran-
som. Our system leverages dynamic programming to lower
the eﬀort required for subsequent (cid:12)le decryption, once a suc-
cessful oﬀset is found, future (cid:12)le decryption attempts will be
attempted at the previously successful oﬀset.
PayBreak iteratively attempts decryption of a (cid:12)le with
each escrowed key and each oﬀset, until a decryption state
is reached that is not identi(cid:12)ed as ‘data’ by libmagic3. Once
a decryption state is identi(cid:12)ed as a common oﬃce document
(cid:12)le type, such as a Microsoft Word Document, JPEG image,
or PDF (cid:12)le, the state is saved as the actual decrypted (cid:12)le. Of
course, if the resulting (cid:12)le is incorrectly (cid:13)agged as decrypted,
the user can instruct the system to continue its search until
the right key and oﬀset is identi(cid:12)ed. While this possibility
exists, we did not encounter it during our evaluation. Fur-
2CMS, http://www:ietf:org/rfc/rfc5652:txt
3Fine Free File Command, http://www:darwinsys:com/(cid:12)le/
thermore, albeit this unoptimized brute-force approach can
be improved, it is successful in recovering encrypted user
(cid:12)les as detailed in x 5.2.
5. EVALUATION
As illustrated in x4, we implemented PayBreak for the
Windows 7 operating system. Based on this prototype im-
plementation we performed the evaluation described in this
section. The goal of the evaluation was to answer a set of
research questions: