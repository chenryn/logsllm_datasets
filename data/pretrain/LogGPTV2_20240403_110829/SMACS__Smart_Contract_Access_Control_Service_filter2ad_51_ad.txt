### TheDAO Attack and Re-Entrancy Vulnerability

TheDAO attack, which resulted in a loss of over $50 million worth of Ether at the time, highlights the critical importance of smart contract security. To illustrate this, let's consider a simplified version of TheDAO, the vulnerable smart contract `Bank`, as shown in Figure 7.

#### The Bank Smart Contract

```solidity
contract Bank {
    mapping(address => uint) balance;

    function addBalance() public payable {
        balance[msg.sender] += msg.value;
    }

    function withdraw() public {
        uint amount = balance[msg.sender];
        if (msg.sender.call.value(amount)()) {
            balance[msg.sender] = 0;
        }
    }
}
```

In this contract, anyone can deposit Ether into `Bank`, and the deposited amount is recorded in the `balance` mapping. Deposited Ether can be withdrawn by calling the `withdraw()` function, which sends the Ether to the `msg.sender` address. This transfer implicitly triggers the fallback method (an anonymous method that does not take any arguments) of the receiver. This default behavior can have significant security implications, as the execution flow can be controlled by a remote fallback method.

#### The Re-Entrancy Attack

An attacker can exploit the re-entrancy vulnerability in the `Bank` contract using another smart contract, `Attacker`, as shown in Figure 7.

```solidity
contract Attacker {
    bool isAttack;
    address bank;

    constructor(address _bank, bool _isAttack) public {
        bank = _bank;
        isAttack = _isAttack;
    }

    function() external payable {
        if (isAttack) {
            bank.withdraw();
        }
    }

    function deposit() public payable {
        bank.call.value(2).addBalance();
    }

    function withdraw() public {
        isAttack = false;
        if (bank.withdraw()) {
            revert();
        }
    }
}
```

The attacker first calls the `deposit()` method to deposit two ethers into the `Bank` contract. Then, the attacker calls the `withdraw()` method of the `Attacker` contract. This triggers a recursive call to `Bank.withdraw()` via the `Attacker`'s fallback method, and the line 11 of the `Bank` smart contract (which sets the balance to zero) is never reached. This effectively drains all Ether from the `Bank` contract into the attacker's account.

#### Preventing the Attack with SMACS

To prevent such attacks, we integrate SMACS (Smart Contract Access Control System) with a rule employing ECFChecker, a tool for detecting effectively callback-free objects. The Token Service (TS) deploys an ECFChecker-supported implementation running on an off-chain testnet with the `Bank` contract deployed. For each token request, the TS calls the requested method with the passed arguments and observes the output of ECFChecker. Tokens are issued only if ECFChecker does not report any security issues. This integration provides ECFChecker security benefits without requiring Ethereum participants to update their configurations.

### Implementation and Evaluation

To evaluate our design, we fully implemented the SMACS framework. The SMACS-enabled smart contracts were developed using Solidity v0.4.24 and deployed on a testnet. The TS was implemented as a web server running Node.js v10.2.1, bundled with the node-localStorage package for storing rules and signature key-pairs. The client and owner interactions were implemented using web3.js.

#### Gas Cost Analysis

We conducted experiments to measure the gas consumption introduced by SMACS. Table II shows the gas cost for different types of tokens, including the cost converted to US dollars. The signature verification is the most gas-consuming operation, with the overall cost of token verification being around $0.04 for super and method tokens and around $0.1 for argument tokens.

For tokens with the one-time property, the verification gas consumption is similar despite additional operations required by the bitmap. Table III and Figure 8 show the results for the argument token type, indicating that the verification cost increases linearly with the call chain length.

#### Storage Cost for Bitmap

Implementing the one-time property requires storing a bitmap by smart contracts. The storage size depends on the token lifetime and transaction frequency, but this cost is one-time, paid upon contract creation. We analyzed the ten most popular smart contracts based on the number of transactions by January 2019 and found that the average transaction peak is 35 tx/s. Assuming a one-hour token lifetime and all transactions using one-time tokens, Table IV shows the required storage and its cost. Even for 35 one-time tokens/s, the one-time fee is only $2.14.

#### Token Service Performance

##### TS Throughput

We evaluated the TS throughput by running a TS instance on a system with macOS Sierra 10.12.6, Intel Core i5 CPU (2.7 GHz), and 8GB RAM. For each token type, we sent 10^i (0 ≤ i ≤ 5) token requests to the TS, recorded the total time, and computed the average time per token request. The results, summarized in Figure 9, show that the throughput becomes stable when the number of requests is greater than 10^5, with a time cost of about 5ms for most token types. A single TS instance can handle all transactions processed by the current Ethereum main network even during peak times.

##### Integration with Runtime Tools

In Section V, we integrated SMACS with two runtime verification tools: Hydra and ECFChecker. This integration enhances the security of smart contracts by providing real-time monitoring and detection of potential vulnerabilities.