59 | BOF | UPDATE | Verified | ? | MDEV22464  
60 | BOF | UPDATE | Verified | ? | MDEV22476  
61 | AF | JOIN | Verified | ? | MDEV22461  
62 | AF | SELECT | Verified | ? | MDEV22462  
63 | AF | Array OOB | Verified | ? | MDEV22463  
**错误多样性:** 表3中的63个错误几乎涵盖了所有常见的内存错误类型，这表明Squirrel可以从多个方面提高DBMS安全性。
尤其是，通常认为缓冲区溢出和释放后重用的bug可以被利用，而Squirrel分别发现了12个bug和2个bug。
Squirrel还从SQLite中检测到33个断言失败，这表明执行已达到意外状态。
更糟糕的是，已发布的二进制文件中的断言检查被禁用，这可能导致严重的安全问题。 例如，在案例研究3中，断言失败会导致严重的事后使用漏洞。
**案例研究1: 一个11年的Bug** 。 Squirrel检测到11年前引入SQLite的Bug（表3中的ID
16，附录1的清单1中的PoC），该错误位于IN子句的优化例程中。具体来说，isCandidateForInOpt检查各种条件以确定IN子句中的子查询是否可以优化。这些检查之一应确保子查询没有任何GROUP
BY子句。由于SQL语法不允许IN子句中使用GROUP BY，因此开发人员无法为这种情况找到测试用例，因此通过签入将检查转换为assert（）[…]
（2009-05-28）。在发布的SQLite版本中禁用了断言。 Squirrel发现，如果两个具有DISTINCT的查询通过NATURAL
JOIN连接，则SQLite将在内部将GROUP
BY属性设置为这些查询。在IN子句中使用此类查询时，它将使先前的断言失败。但是，发布的SQLite将错误地继续优化，并可能导致意外结果，例如错误结果。
Squirrel仅在14分钟内通过8个突变发现了这个11岁的bug。 图8显示了Squirrel从良性查询生成错误触发查询的八个步骤。 我们将表示为突变。
原始查询包含三个CREATE语句：第一个CREATE不必更改； 第二个CREATE被更改五次，其中有三个插入（1，，5和8）和两个替换（4和7）；
最后的CREATE更改了两次，分别有两次替换（2和6）和一次插入（3）。 每一轮突变都提供了新的语法结构，并保持了语法和语义的正确性。
最终查询满足断言失败的条件，因为SQLite会将最后一个SELECT放入第二条语句的IN中，这使IN的子查询包含两个自然连接的SELECTs。
**案例研究2：数据库泄漏。** Squirrel确定了一个基于堆的缓冲区溢出漏洞（表3中的ID
5，附录2中的PoC），攻击者可以利用该漏洞读取内存空间中的任意数据。 此错误使攻击者有可能访问SQLite DBMS中存储的所有数据库。
由于SQLite被广泛用作多用户服务，因此攻击者可以检索其他用户的数据，这些用户默认情况下没有访问权限。
即使数据库的所有者明确删除了该数据库，攻击者仍然可以从其内存残留中窃取该数据库。
除了窃取数据库外，此错误还使攻击者能够读取敏感的关键信息，这些信息可能使攻击者能够进行进一步的攻击，例如远程执行代码。
例如，读取代码页地址将帮助攻击者绕过基于随机化的防御，而泄漏堆栈Canary将使堆栈缓冲区溢出再次可利用。
**案例研究3：断言失败导致释放后重用。** 我们检查了几个断言失败，并发现了一个断言失败（表3中的ID
3，附录3中的PoC）最终导致了严重性高的释放后重用Bug（得分7.5 /
10）。断言确认只要执行到达断言点，谓词就始终为真。否则，开发人员会认为程序正在运行意外状态。此错误使SQLite失败了pParse->
pWith断言，因为由于无法创建圆形视图，pWith是一个悬空的指针。在调试模式下，SQLite将在断言失败后终止执行。但是，发布的二进制文件将禁用所有断言。有了触发错误的输入，SQLite将继续在意外状态下运行，并最终触发释放后使用的错误。
**案例研究4：模糊测试作为回归测试。**
Squirrel可以有效地发现新引入的错误，因此可以用于快速回归测试。例如，表3中ID为35的错误（附录中的清单4中的PoC）仅存在不到一天，然后才发现。
ID为38的Bug（附录5中的PoC）在存在后仅一小时内就被检测到，报告并修复。引入此错误的提交旨在解决与生成的列功能有关的另一个问题。但是，此修复程序并不完全正确，因此在USING子句中引入了新问题。这两个案例表明Squirrel可以对DBMS进行快速有效的回归测试。
### 8.2 与现有工具的对比
我们将Squirrel与五个不同方面的最新模糊测试器进行比较，以了解其在测试DBMS方面的优势和劣势。图9显示了我们的评估结果，包括唯一崩溃的次数，唯一错误的数目，新边缘的数目，语法正确性和语义正确性。我们评估的p值显示在附录表6中。大多数p值都小于0.05，这意味着Squirrel的结果与其他结果之间的差异具有统计意义。我们将逐案讨论异常的高p值。
> 图9：与现有工具的对比。图（a）和（b）显示了使SQLite模糊化的独特崩溃次数和独特错误数量。
> 图（c）-（k）显示了每个模糊实例的新边缘数，语法正确性和语义正确性。 我们将每个模糊测试实例运行24小时，将每个模糊测试重复五次，并报告平均结果。
**唯一的崩溃：**
我们利用边缘覆盖图来计算唯一崩溃的次数，并在图9（a）中显示模糊SQLite的结果。我们排除了PostgreSQL和MySQL的结果，因为只有Squirrel在MySQL中发现很少crash，而其他模糊测试实例在24小时内都没有发现crash。
Squirrel在四分钟内检测到SQLite的第一次崩溃，总共检测到约600个唯一的崩溃。 AFL在32分钟内捕获了第一个crash，总共获得30次uniq
crash，而QSYM在14分钟内发现了第一个crash，最终收集了13g个crashes。
Angora，GRIMOIRE和SQLsmith无法找到任何崩溃。
我们可以看到，最新的高级模糊测试工具并没有明显优于AFL。在某些情况下，他们甚至可能发现更少的唯一崩溃。我们认为，由于模糊的不确定性和对DBMS系统的严格语义要求，这种结果是合理的。
**独特的错误:**
我们会根据官方补丁将每次崩溃映射到相应的错误。在SQLite中，Squirrel发现的600个崩溃仅属于两个bug，而AFL检测到的30个崩溃和QSYM发现的13个崩溃属于同一个bug。由于少量的错误在统计上不是有用的，因此我们采取了不同的策略来获取更多的错误：每隔一个小时，我们会检查检测到的崩溃（如果有的话），将它们映射到真实的bug并进行patch，以避免以后发生类似的崩溃。我们在图9（b）中显示了新策略的结果。这种方法对于Squirrel查找更多错误（从两个到九个）非常有效，因为每次patch后，Squirrel几乎可以立即查找一个新的bug。
AFL和QSYM在一个小时内只能发现一个错误，即使进行patch也没有任何进展。表4显示了检测到的错误的分布，其中Squirrel还涵盖了AFL和QSYM发现的唯一错误。
**New Edges:**
与基于突变的工具相比，Squirrel可以识别出2.0×-10.9×的新边缘，并且可以获得与基于世代的测试器SQLsmith相当的结果。图9（c），（f）和（i）分别显示了SQLite（S），PostgreSQL（P）和MySQL（M）的新优势。
Squirrel在八项比较中胜过其他模糊测试：它比AFL多收集6.6×（S），4.4×（P）和2.0×（M）的新边，比SQLsmith，7.7×（S）多收集新的边，3.6×（S）和比QSYM高10.9倍（P），比安哥拉（Angora）高2.3倍（S），比GRIMOIRE高3.3倍（S）。
**唯一的例外是使用SQLsmith对PostgreSQL进行模糊处理，其中Squirrel通过SQLsmith收集了89.3％的新优势。考虑到SQLsmith是为处理PostgreSQL的特定语法而设计的，这不足为奇。由于SQLsmith在PostgreSQL上的性能略好于Squirrel，因此表6中的相关p值大于0.05。**
**语法有效性:** Squirrel的语法正确性比基于突变的工具高1.8×-20.9×，并且获得与SQLsmith相当的结果。
图9（d），（g）和（j）分别显示了在测试SQLite（S），PostgreSQL（P）和MySQL（M）期间语法有效性的变化。
Squirrel的语法正确性比AFL高1.8倍（S），11.5倍（P）和2.5倍（M），比SQLsmith高6.1倍（S），比QSYM更高2.4倍（S）和20.9倍（P）
比Angora高×（S），比GRIMOIRE高2.9×（S）。
例外来自使用SQLsmith混淆PostgreSQL，其中Squirrel在语法上达到SQLsmith的97.1％。
同样，我们认为原因是SQLsmith是针对PostgreSQL的特定语法高度定制的。
例如，在模糊SQLite时，SQLsmith只能达到12.7％的语法正确性，而在模糊PostgreSQL时却可以获得近100％的语法准确性。
由于类似的结果，PostgreSQL上Squirrel与SQLsmith的p值大于0.05。
**语义有效性:**
Squirrel的语义正确性比其他工具高2.4×-243.9×。图9（e），（h）和（k）分别显示了在测试SQLite（S），PostgreSQL（P）和MySQL（M）期间语义有效性的趋势。
Squirrel的语义正确率比AFL高8.3倍（S），7.0倍（P）和27.0倍（M），比SQLsmith分别高125.4倍（S）和243.9倍（P），8.8倍（S）和4.7倍（P）
）高于QSYM，比Angora高8.3×（S），比GRIMOIRE高2.4×（S）。有趣的是，尽管SQLsmith在测试PostgreSQL方面在新边缘和语法正确性方面表现稍佳，但Squirrel在语义上却获得了更高的准确性。另一个值得注意的观察结果是，AFL实际上为PostgreSQL比Squirrel生成了更多正确的输入（2.2x，请参阅附录中的表7），但仍然实现了较低的边缘覆盖率。这表明更多的正确查询或更高的正确率不能保证探索更多的程序状态。一个极端的例子是继续使用相同的正确查询，这将具有更多的执行次数（无生成开销）和100％的正确性。但是显然，它不会导致代码覆盖率的增加。
Squirrel的优势既来自保留各种语法的变异，也源自语义指导的实例化，后者推断参数之间的语义关系以协助查询合成。
> 总体而言，Squirrel的性能优于所有基于变异的工具，即使它们通过污点分析或符号执行加以增强，或将结构信息也考虑在内。
> 它可以达到与为PostgreSQL定制的SQLsmith相当的结果。
> 更重要的是，与所有其他经过测试的工具相比，Squirrel可以检测到明显更多的错误。
### 8.3 有效性和反馈
为了了解Squirrel中不同因素的作用，特别是保留语法的变异，语义指导的实例化和基于覆盖率的反馈，我们通过禁用每个因素并测量模糊过程的各个方面来执行单元测试。
结果在图10中给出。在Squirrel [!semantic]中，我们仅禁用了语义指导的实例化；仅启用了基于语义的实例化。 在Squirrel
[!feedback]中，我们仅禁用基于coverage的反馈； Squirrel
[!syntax＆!semantic]禁用语义引导的实例化和语法正确的突变，并且实际上与AFL相同。
由于语义指导的实例化需要语法正确的查询，因此我们无法创建仅禁用突变的版本。 我们还排除了所有禁用的设置，这将是AFL的哑模式。
表6中显示了我们评估的p值。大多数p值均小于0.05，这表明Squirrel的结果与其他结果之间的差异具有统计学意义。 我们将解释高于0.05的特殊p值。
> 图10：有效性和反馈的作用。 图（a）和（b）显示了使SQLite模糊化的独特崩溃次数和独特错误数量。
> 图（c）-（k）显示了每个模糊实例的新边缘数，语法正确性和语义正确性。 我们将每个模糊测试实例运行24小时，将每个模糊测试重复五次，并报告平均结果。
**独特的崩溃:**
图10（a）显示了每种设置在SQLite中发现的唯一崩溃的数量。同样，由于24小时评估期间崩溃的次数很少，因此我们跳过了PostgreSQL和MySQL的结果。功能齐全的Squirrel可达到最佳效果。首先，Squirrel在四分钟之内找到了第一起坠机事故。
Squirrel[!semantic]需要60倍以上的时间才能检测到第一次崩溃（261分钟）。有趣的是，Squirrel
[!syntax＆!semantic]在32分钟内发现了第一次崩溃-比Squirrel差，但比Squirrel
[!semantic]好。考虑到后者每秒运行220个查询，而前者每秒可以执行507个查询（即快1.3倍），因此我们认为Squirrel