/* Update edge eij ∈ E */
eij .access = access(ekj )
eij .chainID = eik
Figure 3. potentialNewMaximalAccess al-
gorithm.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
We also suggest that the access graph can be used to con-
duct analysis on the potential impacts of giving different
permissions or credentials to users. For example, this type
of analysis can be done to model insider attacks. To com-
pute this type of analysis, an additional node is used for the
special case attacker along with the attacker’s credentials
and permissions added to the set of trust relationships. Then
the potentialNewMaximalAccess algorithm, shown
in Figure 3, is used to determine what new access levels are
gained.
potentialNewMaximalAccess is designed to
leverage the existing access graph when adding additional
hosts to the graph. The algorithm ﬁrst focuses on adding
any existing trust relationship edges the new host can
achieve. This is accomplished on lines 11 through 18,
where the new attack host attempts to leverage its ac-
cess to other hosts in the network, in absence of apply-
ing any exploits. Next the algorithm computes and pos-
sibly updates any new additional relevant direct and indi-
rect edges. This is accomplished on lines 20 − 43. Once
potentialNewMaximalAccess is ﬁnished computing
a new access graph, the analyst can now determine what ad-
ditional accesses a user gains by having a new speciﬁc set of
permissions. This information can then be used to modify
the network to minimize the undesired access.
The computational cost saving of running poten-
tialNewMaximalAccess instead of findInitial-
Access and findMaximalAccess is seen when com-
puting new access edges from trust relationships and di-
rect exploits. The new host will attempt to gain new ac-
cess on the other hosts, n.
In the worse case, the algo-
rithm will examine all trust relationships, T , exploits, X,
and vulnerabilities, V , for each host in the network mak-
ing the cost T n + XV n. The indirect edges are com-
puted in the same fashion as in findMaximalAccess,
thus making the total computational cost of potential-
NewMaximalAccess (T n + XV n) + n3. Since the total
computational cost is smaller, it makes sense for an analyst
to use this algorithm rather than to recompute the entire ac-
cess graph from scratch.
Another way our approach can be used to secure a net-
work is by analyzing network policy rules. An analyst can
use a stable access graph to determine policy violations in a
network. Policy rules, such as limiting access to speciﬁc ar-
eas, is a typical way system administrators think about safe-
guarding their network. Since our approach meshes well
with this typical mental model, such policy rules can be ex-
pressed as access edges. For example, a network adminis-
trator may not want any outside access to a particular inter-
nal database host. This can be expressed as a set of access
edges (Any, Database, attacker, any, pass through), (Any,
Database, attacker, any, user), (Any, Database, attacker, any,
admin). An analyst, given a set of policy rules expressed as
can determine the policy rules violations using P T E. An
edges, P , and the computed set of maximal access edges, E,
analyst can not only determine which policy rules are com-
promised, but also can determine the exploit(s) that lead to
these violations by examining the edge’s tags. The edge tags
will identify any direct exploits that were used to compro-
mise the policy rules, as well as, any indirect paths with a
complete trail of how they were achieved. Through several
quick iterations of ﬁxing the problematic exploits, the ana-
lyst can properly prevent policy rules from being violated.
4. Example
To demonstrate how our approach works, we have cre-
ated a small example network. In it, there are three target
hosts. These are a publicly accessible web server, a pub-
licly accessible ﬁle server, and a back–end database server.
In addition, there is a host to represent the attacker located
somewhere out on the Internet. The target hosts are pro-
tected by a ﬁrewall, which is limiting connectivity between
the Internet, the DMZ, and the internal networks. The ﬁre-
wall rules are shown in Table 1. Finally, each of the hosts
has certain vulnerabilities, which the attacker would like to
be able to exploit. These are shown in Table 2 along with
the corresponding access level gained when these vulner-
abilities are exploited. Data in Table 2 is easily obtained
from vulnerability scanners such as Nessus and Retina.
Source Destination
All
All
All
Web
File
All
Web
Web
File
Database
Database
All
http
ftp
ftp
Service Action
Allow
Allow
Allow
Allow
Allow
Deny
Oracle
ftp
All
Table 1. Firewall Rules
Vulnerability
Bugtraq
Access
admin
admin
pass-thr.
admin
5033
8668
126
4033
Host
Web
Web
File
Apache Chunked-Enc.
Wu-Ftpd SockPrintf()
FTP Bounce
Database
Oracle TNS Listener
Table 2. Host Vulnerabilities
The chief data structure in our model is an access graph.
Consequently, initialization of the model proceeds by cre-
ating a node in the access graph for every host, and then
adding directed edges to represent any initial trust relation-
ships that may exist using findInitialAccess. In this
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
example our set of host nodes, H, is {Database (d), File
(f), Web (w), Attacker (a)}. Trust relationships, T , are
represented as (source, destination, access level) and deter-
mined based on the information gathered in network scan-
ning tools. In this example, the trust relationships are: { (d,
f, connectivity), (d, w, connectivity), (f, d, user), (f, w, user),
(w, d, user), (w, f, user), (a, w, connectivity), (a, f, connec-
tivity)}. Lines 9 − 10 of findInitialAccess ensure
that every host pair is examined and lines 11 − 16 ensure
that the appropriate edges are added. In this example, the
ﬁrst host pair to be examined is (d, d). Since (d, d) does not
have a trust relationship in T , the algorithm moves to the
next host–pair, namely (d, f). Since (d, f) has a trust rela-
tionship (line 11) that will give Database connectivity
on File (this is higher than no access that is currently in
our graph), an edge will be updated to reﬂect this on line
14. Using the deﬁned format for edges, it will be marked
as (D F, Database, File, Trust, Connectivity, -, -). Since the
highest access has not been achieved, the algorithm will ex-
amine the next trust relationship between Database and File.
However since only one exists, the algorithm returns to line
10 to examine the next destination host, Web. The algo-
rithm looks at the ﬁrst trust relationship and on line 12 de-
termines that Database can have connectivity on Web
and it is higher than no access. The edge (D W, Database,
Web, Trust, Connectivity, -, -) will be updated on line 14.
This process continues until there are no remaining desti-
nation hosts. Then the algorithm returns to line 9 to get
another source host to conduct the same analysis. Once the
algorithm is completed, the resulting graph for our example
is shown in Figure 4. This graph shows how much access
each host has to each other host prior to any exploitation at-
tempts. Note, that in order to keep the graph readable and to
emphasize our point, only the edges with pass-through
access or higher are included in the diagrams. However, all
edges are still used during the computations.
The next step in the analysis is to determine the best ex-
ploit a host can run against each of its neighbors, which is
accomplished by findMaximalAccess. In this exam-
ple, the algorithm will ﬁrst start with Database attempting
to attack itself. In this case, the source and destination hosts
are the same. The only exploit available on the Database
is (bugtraq 4033), which must be done as a remote at-
tack and thus no edge can be added. With the exploits ex-
hausted, the algorithm moves onto the next destination host,
File. Since the edge between Database and File exists, and
is not at admin level of access, the analysis proceeds in an
attempt to improve the current access. File’s only vulnera-
bility is the FTP Bounce exploit (bugtraq 126). Although
Database has connectivity access on File, it does not
satisfy all the preconditions necessary run the exploit, so the
edge is not updated. Having examined all the exploits avail-
able on File, the algorithm moves to the next destination
Figure 4. Access graph with intended access.
host, Web. Since the edge between Database and Web is not
at admin level of access, the algorithm will attempt to use
one of Web’s two known exploits. Web’s Apache service
is vulnerable to a remote root exploit (bugtraq 5033).
Database can communicate with this service on Web and by
exploiting this vulnerability, Database gains admin level
control of Web. Since admin is higher than its current ac-
cess level of connectivity, we update the directed edge
between Database and Web, labeled by a route ID (D W),
with the vulnerability that was used (Chunk), the access that
was gained (admin), and the bugtraq ID 5033: (D W, d,
w, Chunk, admin, 5033, -). The chain ﬂag remains empty
because this edge is not part of a chained attack. Since the
edge from Database to Web is at the highest level of access,
there is no need to continue examining any more exploits
and the algorithm breaks out of the For loop on line 13.
This process continues until all the possible source and des-
tination host pairs have been examined.
The second half of findMaximalAccess, lines 23 −
33, calculates access achieved through a series of attacks.
The algorithm works by examining existing edges that can
be leveraged to achieve an attack on another host through
an indirect edge. In essence, the algorithm computes the
transitive closure of the access graph. The algorithm works
by representing all possible host–pair combinations as an
adjacency matrix. Systematically, each edge is examined
and updated only if it is more beneﬁcial to use an indirect
attack path (through some other host(s)) rather than a direct
edge to the target. More speciﬁcally, an edge eij (between
hosts hi and hj) is updated only when it is more beneﬁcial
for host hi to go through some other (intermediate) host hk
whose access level to host hj is higher than the current level
of access for the edge eij (i.e., line 30 of the algorithm). The
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
DFWA(W_F, w, f, Trust, user, _ , _ )(W_D, w, d, Trust, user, _ , _ )(F_W, f, w, Trust, usr, _ , _ )(F_D, f, d, Trust, user, _ , _ )gorithm, two checks are being done. First, line 26 checks
whether–or–not the path through an intermediate host has
an access level higher than none.
If the answer is yes,
the inner–most loop is executed since we are at least guar-
anteed connectivity through the intermediate host. If
the answer is no, it makes no sense to continue since there
does not exist an edge to the intermediate host whose access
level is higher than none. Second, lines 28 − 29 quit the
inner–most loop if the currently examined edge is already at
admin level of access. The resulting access graph in Fig-