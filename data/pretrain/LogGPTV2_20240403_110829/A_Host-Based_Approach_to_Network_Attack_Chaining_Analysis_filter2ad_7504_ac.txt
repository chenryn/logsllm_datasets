### Update Edge \( e_{ij} \in E \)

The edge \( e_{ij} \) is updated as follows:
- \( e_{ij}.access = \text{access}(e_{kj}) \)
- \( e_{ij}.chainID = e_{ik} \)

### Potential New Maximal Access Algorithm

1. **Introduction:**
   - The access graph can be used to analyze the potential impacts of granting different permissions or credentials to users, such as modeling insider attacks.
   - To perform this analysis, an additional node representing a special case attacker is added, along with the attackerâ€™s credentials and permissions included in the set of trust relationships.
   - The `potentialNewMaximalAccess` algorithm (Figure 3) determines the new access levels gained.

2. **Algorithm Description:**
   - The `potentialNewMaximalAccess` algorithm leverages the existing access graph when adding new hosts.
   - It first adds any existing trust relationship edges that the new host can achieve (lines 11 through 18).
   - Next, it computes and updates any new relevant direct and indirect edges (lines 20 through 43).
   - After the algorithm completes, the analyst can determine the additional accesses a user gains with a new set of permissions and use this information to modify the network to minimize undesired access.

3. **Computational Cost:**
   - The computational cost savings of using `potentialNewMaximalAccess` over `findInitialAccess` and `findMaximalAccess` are significant.
   - The new host will attempt to gain new access on other hosts, \( n \).
   - In the worst case, the algorithm examines all trust relationships \( T \), exploits \( X \), and vulnerabilities \( V \) for each host, resulting in a cost of \( Tn + XVn \).
   - Indirect edges are computed similarly to `findMaximalAccess`, making the total computational cost \( (Tn + XVn) + n^3 \).
   - Since the total computational cost is smaller, it is more efficient for an analyst to use this algorithm rather than recomputing the entire access graph from scratch.

4. **Network Policy Analysis:**
   - The approach can also be used to secure a network by analyzing network policy rules.
   - An analyst can use a stable access graph to determine policy violations.
   - Policy rules, such as limiting access to specific areas, can be expressed as access edges.
   - For example, a network administrator may not want any outside access to a particular internal database host. This can be expressed as a set of access edges.
   - An analyst, given a set of policy rules and the computed set of maximal access edges, can determine which policy rules are compromised and identify the exploits leading to these violations.
   - Through several iterations of fixing problematic exploits, the analyst can prevent policy rule violations.

### Example

To demonstrate the approach, we created a small example network with three target hosts: a publicly accessible web server, a publicly accessible file server, and a back-end database server. Additionally, there is a host representing an attacker located on the Internet. The target hosts are protected by a firewall with rules shown in Table 1. Each host has certain vulnerabilities, as shown in Table 2.

#### Tables
**Table 1: Firewall Rules**
| Source | Destination | Service | Action |
|--------|-------------|---------|--------|
| All    | All         | http    | Allow  |
| All    | All         | ftp     | Allow  |
| Web    | File        | ftp     | Allow  |
| Web    | Database    | Oracle  | Deny   |
| All    | All         | All     | Deny   |

**Table 2: Host Vulnerabilities**
| Host   | Vulnerability              | Bugtraq ID | Access Level |
|--------|---------------------------|------------|--------------|
| Web    | Apache Chunked-Enc.        | 5033       | admin        |
| Web    | Wu-Ftpd SockPrintf()       | 8668       | admin        |
| File   | FTP Bounce                | 126        | pass-thr.    |
| Database | Oracle TNS Listener     | 4033       | admin        |

#### Initialization
- The chief data structure is an access graph.
- Nodes are created for each host, and directed edges are added to represent initial trust relationships using `findInitialAccess`.
- In this example, the set of host nodes \( H \) is {Database (d), File (f), Web (w), Attacker (a)}.
- Trust relationships \( T \) are: { (d, f, connectivity), (d, w, connectivity), (f, d, user), (f, w, user), (w, d, user), (w, f, user), (a, w, connectivity), (a, f, connectivity)}.
- The `findInitialAccess` algorithm ensures that every host pair is examined and appropriate edges are added.

#### Exploitation
- The next step is to determine the best exploit a host can run against each of its neighbors using `findMaximalAccess`.
- For example, the Database host attempts to attack itself and then other hosts, updating edges based on the highest access level achieved.
- The second half of `findMaximalAccess` calculates access achieved through a series of attacks, computing the transitive closure of the access graph.

### Conclusion
- The `potentialNewMaximalAccess` algorithm efficiently updates the access graph when new hosts are added, providing valuable insights into potential security risks and helping to secure the network.