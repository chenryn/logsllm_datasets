receive any scan follows the probability distribution function:
P (z0) =  d
z0! (cid:2) Stirling2(n; d (cid:0) z0) (cid:2) (d (cid:0) z0)!=dn
uniform estimation
hit list
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes
uniform
Property name
scanning
Yes
Global target scope
Yes
Total # of bots
Yes
Total # of scans
Yes
Average scan speed per bot
Yes
Coverage hit ratio
Yes
Sender OS distribution
Yes
Sender AS distribution
Sender IP pre(cid:2)x distribution Yes
Table 1: Global properties estimated from local observations.
The Stirling2(n; y) denotes the Stirling number of the second
kind [29], which is the number of ways to partition n elements
to y non-empty sets. The proof is in Appendix B.
method
indirect
indirect
indirect
indirect
direct
direct
direct
direct
However, if n (cid:29) d, then the sensor range will be sparsely popu-
lated, and this distribution does not give us much statistical power.
Instead, we need to use a larger value of k. The more detailed anal-
ysis is in our technique report version [18].
We validate our tests using Monte Carlo simulations with and
without introduced correlations. We also con(cid:2)rm that the test cor-
rectly detects the correlations introduced by our ABPS scheme. Fi-
nally, when applying our test to our two years’ worth of data, we do
not in fact (cid:2)nd any cases exhibiting likely coordinated scanning.
4. EXTRAPOLATING GLOBAL PROPER-
TIES
We now turn to the problem of estimating a probing event’s
global scope (target size, participating scanners) based only on lo-
cal information. This task is challenging because the size of the lo-
cal sensor may be very small compared to the whole range scanned
by a botnet, giving only a very limited view of the scanning event.
For our estimation, we considered eight global properties, as shown
in Table 1.
For both uniform-random and uniform-hit-list scanning, the uni-
formity property enables us to consider the local view as a random
sample of the global view. Thus, the operating system (OS), au-
tonomous system (AS), and IP pre(cid:2)x distributions observed in local
measurements provide an estimate of the corresponding global dis-
tributions (bottom three rows). However, we need to consider that
if bots exhibit heterogeneity in their scanning rates, then the prob-
ability of observing a bot decreases for slower-scanning ones. The
scanning rate heterogeneity mentioned above introduces a bias to-
wards the faster bots in the population for these distributional prop-
erties. By extrapolating the total number of bots, however, we can
roughly estimate the prevalence of this effect. It turns out that in
all of our analyzed events, we (cid:2)nd that more than 70% of the bots
appear at the local sensor3 by comparing the number of bots seen
at the local sensors with the extrapolated global bot population as
shown in Table 6. Thus, the bias is relatively small.
The (cid:147)coverage hit ratio(cid:148) gives the percentage of target IP ad-
dresses scanned by the botnet. As this metric is dif(cid:2)cult to esti-
mate for hit-list probing, we mainly consider uniform scanning, for
which certain destinations are not reached due to statistical varia-
tions. For uniform scanning, we can directly estimate this metric
based on the coverage seen in our local sensor.
In the remainder of this section we focus on how to estimate the
four remaining properties, each of which requires indirect extrapo-
lation.
4.1 Assumptions and Requirements
To proceed with indirect extrapolation, we must make two key
3The high percentage of bots appearing at the local sensor arises
due to the fact that probing events continue long enough to expose
majority of the bots.
Approach
Both
Approach I
Approach II
Property name
Affected
by botnet
dynamics
No
# of bots
Global target scope
No
No
Total # of scans
Average scan speed per bot Yes
Global target scope
Yes
Total # of scans
Yes
Average scan speed per bot Yes
Require IPID
or port #
continuity
No
Yes
Yes
Yes
No
No
No
Table 2: Additional assumptions and requirements.
assumptions:
1 The attacker is oblivious to our sensors and thus sends
probes to them without discrimination. This assumption is
fundamental to general honeynet-based traf(cid:2)c study, (cf. the
probe-response attack developed in [9] and
counter-defenses [10]). A general discussion of the problem
is beyond the scope of this paper. However, since we assume
our technique is mainly used by a single enterprise or a set
of collaborating enterprises, we need not release sensing
information to the public, which counters the basic attack
in [9]. With this assumption, we can treat the local view as
providing unbiased samples of the global view.
2 Each sender has the same global scan scope. This should be
true if all the senders are controlled by the same botmaster
and each sender scans uniformly using the same set of
instructions.
We argue that these two fundamental assumption likely apply to
any local-to-global extrapolation scheme.
In addition, we check
for one general requirement before applying extrapolation, namely
consistency with the presumption that each sender evenly dis-
tributes its scans across the global scan scope. This requirement
is valid for the dark regions shown in Figure 4 (Section 3 above),
i.e., both uniform random scanning and random permutation scan-
ning, regardless of whether employing a hit-list. Therefore, prior to
applying the extrapolation approaches, we test for consistency with
uniformity (via methodology discussed in Section 3), which many
of the botnet scan events pass (80.3%).
There are some additional requirements speci(cid:2)c to certain ex-
trapolation approaches, as listed in Table 2. Botnet dynamics,
such as churn or growth, can in(cid:3)uence certain extrapolation ap-
proaches. Accordingly these approaches work better for short-lived
events. Approach I, as discussed in section 4.3, requires continu-
ity of the IP fragment identi(cid:2)er (IPID) or ephemeral port, which
holds for botnets dominated by Windows or MacOS machines (in
our datasets we found all the events are dominated by Windows
machines). We use passive OS (cid:2)ngerprinting to check whether we
can assume that this property holds.
4.2 Estimating Global Population
Table 3 shows the notation we use in our problem formulation
and analysis, marking estimates with (cid:147)hat(cid:148)s. For example, ^(cid:26) repre-
sents the estimated local over global ratio, i.e., ratio of local sensor
size comparing to the global target scope of the botnet event, and
^G represents the estimated global target scope.
If (cid:26) is small, many senders may not arrive at the sensor at all.
In this case, we cannot measure the total bot population directly.
Instead, we extrapolate the total number of bots as follows. With
the uniform scan assumption discussed above, we have:
m1
M
=
m12
m2
(1)
based on the following reasoning. We can split the address range of
the sensor into two parts. Since the senders observed in each part
are independent samples from the total population M, Equation 1
follows from independence. For example, suppose there are total
Event duration observed in the local sensor
T
Size of the local sensor
d
Size of global target scope
G
Local over global ratio d=G
(cid:26)
Total # of senders in the global view in T
M
Total # of senders in the local view in T
m
# of senders in the (cid:2)rst half of the local view in T
m1
# of senders in the second half of the local view in T
m2
# of overlapped senders of m1 and m2 in T
m12
Average scanning speed per bot
R
RGi Global scanning speed of bot i
Time between (cid:2)rst and last scan arrival time from bot i
Ti
Number of local scans observed from bot i in T
ni
Inter-arrival time between the j and j + 1 scans
(cid:1)tj
Local total # of scans in T
Q
Table 3: Table of notations.
M = 400 bots. In the (cid:2)rst half sensor, we see m1 = 100 bots,
which is 1=4 of the total bot population. Consider the second half
as another independent sensor, so the bots it observes form another
random sample from the total population. Then we have a 1=4
chance to see if there is a bot already seen in the (cid:2)rst half. If the
second half observes m2 = 100 bots too, the shared bots will be
close to m12 = 100=4 = 25. Since in Equation 1 we can directly
measure m1, m2, and m12, we can therefore solve for M, the total
number of bots in the population. This is a simple variation of
a general approach used to estimate animal populations known as
Mark and Recapture. Since the m1,m2 and m12 are measured at
exactly the same time window4, the estimated total population M
is the number of bots of the botnet in the time window.
4.3 Exploiting IPID/Port Continuity
We now turn to estimating the global scan scope. We investi-
gated two basic strategies: (cid:2)rst, inferring the number of scans sent
by sources in between observations of their probes at the Honeynet
(Approach I); second, estimating the average bot global scanning
speed using the minimal inter-arrival time we observe for each
source (Approach II, covered in the next section).
Approach I is based on measuring changes between a source’s
probes in the IPID or ephemeral port number. We predicate use
of this test on (cid:2)rst applying passive OS (cid:2)ngerprinting to identify
whether the sender exhibits continuous IPID and/or ephemeral port
selection. This property turns out (see below) to hold for modern
Windows and Mac systems, as well as Linux systems for ephemeral
ports.
IPID continuity. Windows and MacOS systems set the 16-bit
IPID (cid:2)eld in the IP header from a single, global packet counter,
which is incremented by 1 per packet. During scanning, if the ma-
chine is mainly idle, and if the 16-bit counter does not over(cid:3)ow,
we can use the difference in IPID between two observed probes
to measure how many additional (unseen by us) scans the sender
sent in an interval. (The algorithm becomes a bit more complex
because of the need to identify and correct IPID over(cid:3)ow/wrap, as
discussed below. We also need to take into account the endianness
of the counter as present in the IP header.)
A potential problem that arises with this approach is retransmis-
sion of TCP SYN’s, which may increment the IPID counter even
though they do not re(cid:3)ect new scans. Thus, when estimating global
scan speed we divide by the average TCP SYN retransmission rate
we observe for the sender.
Ephemeral port number continuity. All of the botnets for
which we could inspect source code let the operating system al-
locate the ephemeral source port associated with scanning probes.
Again, these are usually allocated by sequentially incrementing a
single, global counter. As with IPID, we then use observed gaps in
4Mark and Recapture requires the (cid:147)close(cid:148) system assumption since
the two visits do not happen in the same time, which is different
here.
Operating System
Windows
Windows 2000/XP
Windows 2003/Vista
Windows NT4
Windows 98
Windows 95
Windows other
BSD
Linux
Novell
Unidenti(cid:2)ed
Total
Clients
159,152
155,869
231
1708
1237
68
39
458
126
20
27,047
186,725
(85.2%)
(97.9%)
(<.1%)
( 1.07%)
(0.7%)
(<.01%)
(<.01%)
(0.2%)
(<.1%)
(<.01%)
(14.4%)
Table 4: Aggregate operating system distribution, from passive
OS (cid:2)ngerprinting of probing events.
this header (cid:2)eld to estimate the number of additional scans we did
not see. (In this case, the logic for dealing with over(cid:3)ow/wrapping
is slightly more complex, since different operating systems con(cid:2)ne
the range used for ephemeral ports to different ranges. If we know
the range from the (cid:2)ngerprinted OS, we use it directly; otherwise,
we estimate it using the range observed locally, i.e., the maximum
port number observed minus the minimum port number observed.)
IPID and ephemeral port number continuity validation. In
a controlled experimental environment, we installed (cid:2)ve versions
of Windows, one of MacOS X, and two versions of Linux, each in
a different virtual machine. We then ran Nmap on each to gener-
ate scans, con(cid:2)rming that all but Linux (2.4/2.6) exhibit continu-
ity of IPID (with Win98 and NT4 incrementing it little-endian, but
Win2000, WinXP, Win2003, and MacOS X using network order)
and that all 8 systems allocated the ephemeral ports sequentially.
As shown in Table 4, for all the probing events in the two-year
Honeynet dataset, OS (cid:2)ngerprinting (via the p0f tool) indicates
that the large majority of bots run Windows 2000/XP/2003/Vista
(85%), enabling us to apply both IPID and ephemeral port number
based estimation. From this analysis, we also know that the propor-
tion of Windows 95/98/NT4 is very low (0.8%), and only for those
cases do we need switch the byte order. (These percentages match
install-based statistics [5] indicating that Win98 and NT4 comprise
less than 1.5% of systems overall.)
NAT effects on IPID and ephemeral port continuity. Since
NATs can potentially alter IPID and ephemeral ports, we test three
popular home routers in this regard(cid:151)Linksys, Netgear and D-Link,
which comprise more than 70% of the home router market [1]. We
use Nmap to send the scans from hosts behind these NATs and
examine whether their IPID or ephemeral ports changed. For all
three, IPID remains unchanged, and for a single scanner behind
the NAT, the ephemeral port also remains unchanged. For multiple
scanners behind the NAT, the ephemeral port numbers of the (cid:2)rst
sender remain unchanged, though for the D-Link router the ports
of additional scanners become arbitrary.
Even though IPID remains unchanged, the intermingling of mul-
tiple IPID sequences for a single apparent source address renders
simple extrapolation of scanning speed impractical. Techniques ex-
ist for detecting the presence of multiple sources behind a NAT
(also based on IPID), but these require observing a large portion of
the traf(cid:2)c coming out of the NAT [8], which is impractical in our
case. However, given that we usually have a large number of dis-
tinct sources, we can restrict our analysis to those cases that exhibit
strong linearity for either IPID or ephemeral port numbers, which
avoids con(cid:3)ating patterns in these arising from multiple sources
aliased to the same public IP address. In our evaluation, we (cid:2)nd
that on an average 463 senders maintain linearity in IPID and/or
ephemeral port numbers for an event; thus, they can be used for
extrapolation purpose.
Global scan speed estimation. As the IPID and ephemeral port