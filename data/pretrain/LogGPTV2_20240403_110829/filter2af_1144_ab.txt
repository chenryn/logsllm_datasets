  * orderByDesc
    orderByDesc(R... columns)
    orderByDesc(boolean condition, R... columns)
  * 排序：ORDER BY 字段, (ASC/DESC) 
  * 注：Order by排序时不能进行预编译处理,故相关内容用户可控的话会存在sql注入风险。
  * 示例：
    @RequestMapping("/orderbyvuln")
    public List mybatishorderbyvuln(String column) {
        QueryWrapper wrapper = new QueryWrapper<>();
        wrapper.select().orderBy(true, true, column);
        List list = tutorialMapper.selectList(wrapper);
        return list;
    }
    @RequestMapping("/orderbyAscvuln")
    public List mybatishorderbyAscvuln(String column) {
        QueryWrapper wrapper = new QueryWrapper<>();
        wrapper.select().orderByAsc(column);
        List list = tutorialMapper.selectList(wrapper);
        return list;
    }
    @RequestMapping("/orderbyDescvuln")
    public List mybatishorderbyDescvuln(String column) {
        QueryWrapper wrapper = new QueryWrapper<>();
        wrapper.select().orderByDesc(column);
        List list = tutorialMapper.selectList(wrapper);
        return list;
    }
#### group By
    groupBy(R... columns)
    groupBy(boolean condition, R... columns)
  * 分组：GROUP BY 字段, ... 主要用于用于结合聚合函数，根据一个或多个列对结果集进行分组
  * 示例：
    @RequestMapping("/gropbycvuln")
    public List mybatishsgropbycvuln(String column) {
        QueryWrapper wrapper = new QueryWrapper<>();
        wrapper.select().groupBy(column);
        List list = tutorialMapper.selectList(wrapper);
        return list;
    }
#### insql/notinsql
    inSql(R column, String inValue)
    inSql(boolean condition, R column, String inValue)
    notInSql(R column, String inValue)
    notInSql(boolean condition, R column, String inValue)
  * 字段IN / NOT IN ( sql语句 )
  * column字段、inValue字段可控的情况下存在注入风险。
  * 示例：
    @RequestMapping("/insqlcvuln")
    public List mybatisinsqlvuln(String column,String id) {
        QueryWrapper wrapper = new QueryWrapper<>();
        wrapper.select().inSql(column,"select id from tutorials where id >" + id);
        List list = tutorialMapper.selectList(wrapper);
        return list;
    }
### 2.使用 Wrapper 自定义SQL（特殊的预编译场景）
​ Wrapper提供了自定义SQL场景，与传统的mybatis一样使用$进行注解，但实际上ew已经做了预编译处理。同样的也支持注解&xml配置。
注：需要mybatis-plus版本 >= 3.0.7 param 参数名要么叫ew,要么加上注解@Param(Constants.WRAPPER)
使用${ew.customSqlSegment} 不支持 Wrapper 内的entity生成where语句
示例：
#### 1.注解模式
  * 配置mapper
    import com.baomidou.mybatisplus.core.conditions.Wrapper;
    import com.baomidou.mybatisplus.core.toolkit.Constants;
    import org.apache.ibatis.annotations.Mapper;
    import org.apache.ibatis.annotations.Param;
    import org.apache.ibatis.annotations.Select;
    import org.joychou.dao.Person;
    import java.util.List;
    @Mapper
    public interface PersonMapper {
        @Select("select * from persons ${ew.customSqlSegment}")
        List selectPerson(@Param(Constants.WRAPPER) Wrapper wrapper);
    }
  * ​ 配置controller
    import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
    import org.joychou.dao.Person;
    import org.joychou.dao.Tutorial;
    import org.joychou.mapper.PersonMapper;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import java.util.List;
    @RestController
    @RequestMapping("/sqlimybatis_plus")
    public class Mybatis_Plus_SQLI_2 {
        @Autowired
        PersonMapper personMapper;
        //orderby  R... columns 可控，存在SQL注入风险
        @RequestMapping("/selectperson")
        public List selectPerson(String column){
            QueryWrapper wrapper = new QueryWrapper<>();
            wrapper.orderByAsc(column);
            return personMapper.selectPerson(wrapper);
        }
        //like 自动进行预编译，不存在SQL注入风险
        @RequestMapping("/selectpersonlike")
        public List selectPersonlike(String name) {
            QueryWrapper wrapper = new QueryWrapper<>();
            wrapper.like("name", name);
            return personMapper.selectPerson(wrapper);
        }
    }
​
Wrapper自定义模式下like、in等会自动进行预编译，但若存在last、orderby等未进行预编译方法，若相应数据用户可控仍会存在SQL注入风险，风险API仍为2.1中常见注入场景。
#### 2.XML模式
  * 配置mapper
    import com.baomidou.mybatisplus.core.conditions.Wrapper;
    import com.baomidou.mybatisplus.core.toolkit.Constants;
    import org.apache.ibatis.annotations.Mapper;
    import org.apache.ibatis.annotations.Param;
    import org.apache.ibatis.annotations.Select;
    import org.joychou.dao.Person;
    import java.util.List;
    @Mapper
    public interface PersonMapper {
        @Select("select * from persons ${ew.customSqlSegment}")
        List selectPerson(@Param(Constants.WRAPPER) Wrapper wrapper);
        List selectPersonXML1(Wrapper ew);
        List selectPersonXML2(Wrapper ew);
        List selectPersonXMLOrdeyBy(Wrapper ew);
    }
  * 配置XXXXMapper.xml
            select * from persons where ${ew.customSqlSegment}
            select * from persons
                ${ew.SqlSegment}
            select * from persons ${ew.SqlSegment}
  * 配置controller
    import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
    import org.joychou.dao.Person;
    import org.joychou.dao.Tutorial;
    import org.joychou.mapper.PersonMapper;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import java.util.List;
    @RestController
    @RequestMapping("/sqlimybatis_plus")
    public class Mybatis_Plus_SQLI_2 {
        @Autowired
        PersonMapper personMapper;
        @RequestMapping("/selectperson")
        public List selectPerson(String column){
            QueryWrapper wrapper = new QueryWrapper<>();
            wrapper.orderByAsc(column);
            return personMapper.selectPerson(wrapper);
        }
        @RequestMapping("/selectperson1")
        public List selectPersonXML1(String name) {
            QueryWrapper wrapper = new QueryWrapper<>();
            wrapper.eq("name", name);
            return personMapper.selectPerson(wrapper);
        }
        @RequestMapping("/selectperson2")
        public List selectPersonXML2(String name) {
            QueryWrapper wrapper = new QueryWrapper<>();
            wrapper.eq("name", name);
            return personMapper.selectPerson(wrapper);
        }
        @RequestMapping("/selectperson3")
        public List selectPersonXMLOrderBy(String column) {
            QueryWrapper wrapper = new QueryWrapper<>();
            wrapper.orderByAsc(column);
            return personMapper.selectPerson(wrapper);
        }
    }
​ 以上selectPersonXML1、selectPersonXML2均实现相同功能，SQL注入问题与注解模式相同。
### 3.分页插件
#### 1.PaginationInnerInterceptor
  * 配置分页插件
    import com.baomidou.mybatisplus.annotation.DbType;
    import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;
    import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    @Configuration
    public class MybatisPlusConfig {
        /**
         * 注册插件
         */
        @Bean
        public MybatisPlusInterceptor mybatisPlusInterceptor() {
            MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
            // 添加分页插件
            PaginationInnerInterceptor pageInterceptor = new PaginationInnerInterceptor();
            // 设置请求的页面大于最大页后操作，true调回到首页，false继续请求。默认false
            pageInterceptor.setOverflow(false);
            // 单页分页条数限制，默认无限制
            pageInterceptor.setMaxLimit(500L);
            // 设置数据库类型
            pageInterceptor.setDbType(DbType.MYSQL);
            interceptor.addInnerInterceptor(pageInterceptor);
            return interceptor;
        }
    }
  * 配置controller
    @RequestMapping("/selectpage")
    public List mybatispluspage(Long page,Long size,String order){
        QueryWrapper qw = new QueryWrapper<>();
        Page personPage = new Page<>(page,size);
        personPage.addOrder(OrderItem.asc(order));
        IPage iPage = personMapper.selectPage(personPage, qw);
        List persons = iPage.getRecords();
        return persons;
    }
​ 若直接使用addOrder()未进行过滤，则存在SQL注入漏洞。
#### 2.pagehelper
因为Order by排序时不能进行预编译处理，所以在使用插件时需要额外注意如下function，同样会存在SQL注入风险：
  * **com.github.pagehelper.Page**
    * 主要是setOrderBy(java.lang.String)方法
  * **com.github.pagehelper.page.PageMethod**
    * 主要是startPage(int,int,java.lang.String)方法
  * **com.github.pagehelper.PageHelper**
    * 主要是startPage(int,int,java.lang.String)方法
## 四.Hibernate框架下的SQL注入
​
Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。
Hibernate可以使用hql来执行SQL语句，也可以直接执行SQL语句，无论是哪种方式都有可能导致SQL注入
### HQL
hql语句：
    String hql = "from People where username = '" + username + "' and password = '" + password + "'";
这种拼接方式存在SQL注入
正确使用以下几种HQL参数绑定的方式可以有效避免注入的产生：
#### 1.命名参数（named parameter）
    Query query = session.createQuery("from users name = ?1", User.class);
    String parameter = "g1ts";
    Query query = session.createQuery("from users name = :name", User.class);
    query.setParameter("name", parameter);
#### 2.位置参数（Positional parameter）
    String parameter = "g1ts";
    Query query = session.createQuery("from users name = ?1", User.class);
    query.setParameter(1, parameter);
#### 3.命名参数列表（named parameter list）
    List names = Arrays.asList("g1ts", "g2ts");
    Query query = session.createQuery("from users where name in (:names)", User.class);
    query.setParameter("names", names);
#### 4.类实例（JavaBean）
    user1.setName("g1ts");
    Query query = session.createQuery("from users where name =:name", User.class);
    query.setProperties(user1);
#### 5.HQL拼接方法
​ 这种方式是最常用，而且容易忽视且容易被注入的，通常做法就是对参数的特殊字符进行过滤，推荐大家使用
Spring工具包的StringEscapeUtils.escapeSql()方法对参数进行过滤：
    import org.apache.commons.lang.StringEscapeUtils;
    public static void main(String[] args) {
      String str = StringEscapeUtils.escapeSql("'");
      System.out.println(str);
    }
### SQL
Hibernate支持使用原生SQL语句执行，所以其风险和JDBC是一致的，直接使用拼接的方法时会导致SQL注入
语句如下：
    Query query = session.createNativeQuery("select * from user where username = '" + username + "' and password = '" + password + "'");
正确写法：
    String parameter = "g1ts";
    Query query = session.createNativeQuery("select * from user where name = :name");
    query.setParameter("name",parameter);
注：此文为总结多位师傅文章，包括不限于以下文章：  
.......