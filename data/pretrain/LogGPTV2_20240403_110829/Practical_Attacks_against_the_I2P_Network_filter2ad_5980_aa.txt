title:Practical Attacks against the I2P Network
author:Christoph Egger and
Johannes Schlumberger and
Christopher Kruegel and
Giovanni Vigna
Practical Attacks Against The I2P Network
Christoph Egger1, Johannes Schlumberger2,
Christopher Kruegel2, and Giovanni Vigna2
1 Friedrich-Alexander University Erlangen-Nuremberg
PI:EMAIL
2 University of California, Santa Barbara
{js,chris,vigna}@cs.ucsb.edu
Abstract. Anonymity networks, such as Tor or I2P, were built to allow
users to access network resources without revealing their identity. Newer
designs, like I2P, run in a completely decentralized fashion, while older
systems, like Tor, are built around central authorities. The decentralized
approach has advantages (no trusted central party, better scalability), but
there are also security risks associated with the use of distributed hash
tables (DHTs) in this environment.
I2P was built with these security problems in mind, and the network
is considered to provide anonymity for all practical purposes. Unfortu-
nately, this is not entirely justiﬁed. In this paper, we present a group of
attacks that can be used to deanonymize I2P users. Speciﬁcally, we show
that an attacker, with relatively limited resources, is able to deanonymize
a I2P user that accesses a resource of interest with high probability.
1
Introduction
In modern societies, freedom of speech is considered an essential right. One
should be able to express his/her opinion without fear of repressions from
the government or other members of society. To protect against retribution, the
laws of democratic countries recognize the importance of being able to publish
information without disclosing one’s identity in the process. Unfortunately, this
essential right to anonymity is not available on today’s Internet.
Local observers, such as Internet providers, site administrators, or users on
the same wireless network, can typically track a person while she is using the
Internet and build a record of her actions. While encryption hides the actual
content transmitted, it is still possible to identify which services are used. There-
fore, an observer can link the user to the websites that she visits and, based on
these observations, take action.
Tor [1, 2] was one of the early solutions to provide anonymous communica-
tion on the Internet. It works by routing trafﬁc through a number of intermedi-
ate nodes, and each node only knows about its direct communication partners.
Hence, looking at the ﬁrst (or last) link, it is not possible to infer the destination
(or source) of the trafﬁc. Tor has a centralized design built around trusted au-
thority servers. Each of these servers keeps track of all nodes in the network and
their performance. The authority servers regularly publish this list for clients to
use. The clients pick nodes from this list to create encrypted tunnels, until they
reach exit nodes. These exit nodes then act as proxies, allowing Tor users to
access the public Internet (called clearnet) without revealing their identity.
As there are only few trusted authority servers, the integrity of these nodes
is essential for the entire network, making them a valuable target for attacks.
In addition, since all of the authorities need to keep track of the whole network
and regularly agree on its state, this design has limited scalability.
To address limitations of Tor’s centralized design, researchers have pro-
posed distributed alternatives. Arguably, the most popular instance of decen-
tralized anonymity systems is I2P. I2P stores all metadata in a distributed hash
table (DHT), which is called netDB. The DHT ensures scalability of the network.
Being run on normal I2P nodes, the netDB also avoids a small group of author-
ity servers that would need to be trusted. Finally, I2P provide a separate net-
work (called darknet) where both, service providers and users, act only within
the I2P network. All connections inside the darknet are end-to-end encrypted,
and participants are well-aware of the anonymity of each other.
The use of DHTs in peer-to-peer anonymity systems has been successfully
attacked in the past [3]. Continued research on this problem ﬁnally led to gen-
eral results [4] that showed that the additional effort to verify the correctness
of lookup results directly increases vulnerability to passive information-leak at-
tacks. I2P itself has been attacked successfully by exploiting the decentralized
performance analysis of its participants [5].
The developers of I2P have reacted to the publication of attacks, and they
have improved their network to resist the DHT-based attacks introduced in [3]
and [4], by limiting the database to a subset of well-performing nodes. This
reduces the number of nodes involved in each individual lookup to only one
for most cases. Moreover, the performance computation techniques were up-
dated to make it more difﬁcult for an attacker to exploit them. As a result, I2P
is considered secure in practice. Unfortunately, this is not entirely justiﬁed.
In this paper, we describe an attack that can be used to break the anonymity
of a victim who is using anonymized resources in I2P – for example, a user
browsing eepsites (I2P’s terminology for anonymous websites) or chatting.
We are able, with high probability, to list the services the victim accesses regu-
larly, the time of access, and the amount of time that is spent using the service
We ﬁrst show how an attacker can tamper with the group of nodes provid-
ing the netDB, until he controls most of these nodes. This is possible because I2P
has a ﬁxed maximum number of database nodes (only a small fraction of nodes
in the entire network host the database). The set of nodes can be manipulated
by exploiting the normal churn in the set of participating nodes or by carrying
out a denial of service (DoS) attack to speed up the change. We show how a
Sybil attack [6] can be used as an alternative approach to control the netDB.
By leveraging control over the network database, we demonstrate how an
Eclipse [7, 8] attack can be launch. This results in services being unavailable or
peers getting disconnected from the network.
Finally, our deanonymization attack exploits the protocol used by peers to
verify the successful storage of their peer information in the netDB. The stor-
age and veriﬁcation steps are done through two independent connections that
can be linked based on timing. Using the information gathered by linking these
two interactions, an attacker can determine (with high probability) which tun-
nel endpoints belong to speciﬁc participants (nodes) in the I2P network, and,
therefore, deanonymize the participant.
Experimental results were gathered by tests performed both on our test net-
work and on the real I2P network (against our victim nodes running the un-
modiﬁed I2P software; no service disruption was caused to the actual users of
the network).
In summary, the main contributions in this paper are the following:
1. A novel deanonymization attack against I2P, based on storage veriﬁcation
2. Complete experimental evaluation of this attack in the real I2P network
3. Suggestions on how to improve the I2P to make it more robust
2
I2P Overview
In this section, we will describe key concepts of I2P, as well as how well-known
attacks have been taken into account when designing its network infrastruc-
ture and protocols. I2P is an application framework (or middleware layer) built
around the so-called I2P router. The router is a software component that runs
on a host and provides connectivity for local I2P applications. An application
can either accesses darknet services (as client), or it can host a service (as server).
Connectivity between applications is implemented via a fully decentralized
peer-to-peer network, which runs as an overlay on top of IP. Applications can
either use a TCP-like protocol called NTCP or a UDP-like protocol called SSU. The
router maps these connections to packet-based I2P tunnels. These I2P tunnels
provide anonymity using standard onion routing (similar to the well-known
approach used by the Tor network). Tunnels are identiﬁed by the outermost
peer in the chain and a unique tunnelID (these elements are roughly analog to
the IP-address and port pair used in the clearnet).
Example applications include websites (called eepsites in the I2P commu-
nity) and ﬁle sharing services, which together account for at least 30 % of I2P
services [9], as well as email and chat systems. In February 2013, there were
about 20,000 users in the I2P network at any given point in time; up from
around 14,000 at the beginning of 2012.
2.1 Tunnels and Tunnel Pools
I2P uses paired, unidirectional tunnels handling onion-encrypted packets. It
uses two different types of tunnels: Exploratory tunnels are used for all
database lookups. They typically have a length of two hops. Client tunnels
in contrast are used for all data connections. These client tunnels are bound to a
local application but are used to reach any service this application is accessing,
or, in the case of a server application, for communication with several clients.
They have a typical length of three nodes.
For each application, the I2P router keeps a pool of tunnel pairs. Explo-
ratory tunnels for interactions with the netDB are shared among all users of
a router. If a tunnel in the pool is about to expire or the tunnel is no longer
useable (e.g., because one of the nodes in the tunnel is failing) the router cre-
ates a new tunnel and adds it to the pool. It is important to recall later that
tunnels periodically expire every ten minutes, and hence, need to be refreshed
frequently. This is done to prevent long-lived tunnels from becoming a threat
to anonymity.
2.2 Router Info and Lease Set
The netDB keeps two types of records: Peer and service information. Peer infor-
mation is stored in so-called routerInfo structures containing the information
needed to reach a peer – its IP address and port – as well as its public keys.
This information is needed also to cooperate in a tunnel with this peer. Peer in-
formation has no explicit period of validity, however during normal operation
peers refresh their routerInfo by uploading it to the netDB every ten minutes.
Participants invalidate them after a period of time depending on the number
of peers they know, in order to make sure a reasonable number of peers are
known locally at any point in time.
The leaseSets contain service information, more speciﬁcally the public
keys for communicating with a service as well as the tunnel endpoints that can
be contacted to reach the service. Since tunnels expire after ten minutes, old ser-
vice information is useless after that period of time, and it expires together with
the tunnels. Users have to re-fetch them from the netDB if they want to continue
communicating with the service even if the same application-layer connection
is used the whole time.
In order for I2P to provide anonymity, service information has to be unlink-
able to the peer information. However, in this paper, we show a way to actually
link these two pieces of information and, therefore, deanonymize I2P partici-
pants.
2.3 Network Database
Database records are stored in a Kademlia-style DHT [10] with some modiﬁca-
tions to harden it against attacks. This modiﬁed database is called floodfill
database and the participating nodes floodfill nodes.
To request a resource on vanilla Kademlia implementations, a client requests
the desired key from the server node considered closest to the key. If the piece
of data is located at the server node, it is returned to the client. Otherwise, the
server uses its local knowledge of participating nodes and returns the server it
considers nearest to the key. If the returned server is closer to the key than the
one currently tried, the client continues the search at this server.
Since a malicious node at the right position relative to the key can prevent a
successful lookup in standard Kademlia, I2P adds redundancy by storing each
database record onto the eight closest nodes (instead of a single one). Addition-
ally, clients do not give up when they reached the closest node they can ﬁnd
but continue until their query limit (currently eight lookups) is reached.
Both servers and records are mapped into a global keyspace by their cryp-
tographic hash, which is what the notion of closeness is based upon.
The number of floodfill nodes is limited to only few well-connected mem-
bers. This is done because the research by Mittal et al. [4] showed how longer
lookup paths compromise anonymity. With only few nodes (around 3 % of total
network size) acting as database servers and these being well connected, it is
assumed that an I2P client already knows one of the nodes storing the informa-
tion. This keeps the lookup path length to a minimum.
2.4 Floodﬁll Participation
Floodfill participation is designed to regulate the number of floodfill nodes
in the network and keep them at a constant count.
There are two kinds of database servers, manual floodfill participants and
automatic floodfill participants. The manual floodfill participants are con-
ﬁgured by their operator to serve in the database. The automatic floodfill
participants are I2P nodes using the default floodfill conﬁguration and are
therefore not conﬁgured to always or never participate. They consider acting as
floodfill nodes if the maximum amount of floodfill nodes, which was at
300 during our attack and increased in later releases, is currently not reached.
As no node has global knowledge about all participants and nodes therefore de-
ciding on their local knowledge only, the actual count is a bit higher. This max-
imum amount of floodfill nodes does not affect manual floodfill nodes.
Based on their performance characteristics, automatic nodes can decide to par-
ticipate. They regularly re-evaluate their performance, and step down if they
no longer meet the needed performance characteristics.
To estimate the proportion of automatic floodfill participants, we moni-
tored the network database from the nodes under our control, and detected
peers changing their participation status, which does not happen for manual
floodfill participants but does happen for automatic ones. Results show that
around 95 % of the database servers are automatic.
2.5 Example Interactions
Server applications register themselves on the local I2P router with their public
key for data encryption. The router then allocates a tunnel pool for the server
application and publishes the public key and all tunnel endpoints allocated to
this application (service information) to the netDB. The ﬁngerprint of the appli-
cation’s public key serves as key into the netDB. The router then keeps the ser-
vice information up-to-date every time it replaces a tunnel. This key ﬁngerprint
remains the primary identiﬁer to reach a service. A list of bookmarks called the
address book is supplied with the I2P software and users can amend this list
for themselves and share it with others.
If an application wants to access an I2P service, it ﬁrst needs to locate the