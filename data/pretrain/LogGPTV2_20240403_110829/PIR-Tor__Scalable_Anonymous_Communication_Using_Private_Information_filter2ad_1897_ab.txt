Aguilar-Melchor et al. [1] as an example of CPIR, and
the multi-server scheme by Goldberg [12] as an exam-
ple of ITPIR. The CPIR scheme is the best-performing
single-server scheme [32], and both are available as
open-source libraries.
4 System Overview
4.1 Design goals
1. Scalable architecture: We target a design for anony-
mous communication that is able to scale the number of
relays and clients in the network. We note that a design
that is able to accommodate more relays in the network
not only improves the network performance, but also im-
proves user anonymity [9].
2. Security: Prior work on scalable anonymous com-
munication only provides heuristic security guarantees,
and the security community has been very successful at
breaking the state-of-art designs. We target a design that
leverages well-understood security mechanisms making
it relatively easy to analyze the security of the system.
Secondly, we aim to achieve similar security properties
as in the existing Tor network. We show that reasonable
parameters of PIR-Tor are able to provide equivalent se-
curity to the Tor network.
3. Efﬁcient circuit creation: Architectures that im-
pose additional latency during circuit creation may not
be practical, since the user needs to wait for the circuit
creation to ﬁnish before starting anonymous communi-
cation.
4. Minimal changes: We target a design that requires
minimal changes to the existing Tor architecture. For in-
stance, transitioning Tor to a peer-to-peer system will re-
quire a signiﬁcant engineering effort. Our design lever-
ages existing implementations and requires changes to
only the directory functionality and relay selection mech-
anism in Tor and can be incrementally deployed by both
clients and relays.
5. Preserving Tor constraints: The Tor network im-
poses several constraints on the selection of relays during
circuit construction. For example, the ﬁrst relay must be
one of the user’s guards, the ﬁnal relay must allow trafﬁc
to exit to a user’s desired port, and the relays must be se-
lected in proportion to their bandwidth for load balancing
the network. Some prior work like ShadowWalker [24]
and Salsa [29] did not focus on these issues.
Limitations:
Our architecture achieves its scalabil-
ity properties by trading off bandwidth for computation;
thus directory servers will be required to spend additional
computational resources. In our performance evaluation
we show that the computational resources required to
support our architecture are feasible.
4.2 System architecture
Our key insight when designing PIR-Tor is that the
client-server model in Tor can be preserved while si-
multaneously improving its scalability by having users
download the descriptors of only a few relays in the
system, as opposed to downloading the global view.
However, naively doing so can enable malicious direc-
tory servers to launch ﬁngerprinting attacks against the
users, thereby compromising anonymity. We propose
that users leverage private information retrieval proto-
cols to download the identities of a few relays, thereby
protecting their privacy against compromised directory
servers. Note that a client does not need to use a PIR
protocol to select its guard relays; a full download of the
network consensus and relay descriptors sufﬁces, since
guard relay selection is a one-time operation that does
not affect the scalability of the protocol.
Recall that private information retrieval has two ﬂa-
vors: computational PIR and information-theoretic PIR.
While both CPIR and ITPIR can be used by clients, the
underlying techniques have different threat models, re-
sulting in slightly different architectures, as depicted in
Figure 1.
Computational PIR at directory servers: Computa-
tional PIR can guarantee user privacy even when there
is a single untrusted database. In this scenario, we pro-
pose that as in the current Tor architecture, any relay can
act as a directory server. The directory servers maintain
a global view of the system, and act as a PIR database.
Clients can then use a CPIR protocol to query the direc-
tory servers and obtain the identities of random relays in
the system.
Information-theoretic PIR at directory authorities
(rejected):
Information-theoretic PIR can guarantee
user privacy only when a threshold number of databases
do not collude. Since directory servers in the current
Tor network are untrusted, they cannot be used as PIR
databases. However, Tor has eight directory authorities
sign the global system view (the network consensus).
(a) CPIR-based architecture
(b) ITPIR-based architecture
Figure 1: System Architecture: For the CPIR architecture, an arbitrary set of relays are selected as the directory
servers (PIR servers) that maintain a current copy of the PIR database, while for the ITPIR architecture, guard relays
are the directory servers. Directory servers download the PIR database from trusted directory authorities. To perform
a PIR query, clients ﬁrst obtain meta-information about the PIR database from the directory servers, and then use the
meta-information to select the index of the PIR block to query, taking into consideration the bandwidths and the exit
policies of the relays. Relay information from the results of the PIR queries can be used to build circuits for anonymous
communication. Note that in the ITPIR architecture, clients use PIR to query for only the exit relays.
Since Tor already trusts that the majority of directory
authorities are honest, one potential solution could have
been to use the directory authorities as PIR databases.
However, we reject this approach since the directory au-
thorities would become performance bottlenecks in the
system, in addition to targets for DDoS attacks.
Information-theoretic PIR at guard relays:
Instead,
we note that Tor already places signiﬁcant trust in guard
nodes. If all of a client’s guard relays are compromised,
then they can perform end-to-end timing analysis [2] in
conjunction with selective denial of service attacks [4] to
break user anonymity in the current Tor network. Thus
we consider using a client’s three guard nodes as the
servers for ITPIR. Unless all three guard nodes are com-
promised they cannot learn the identities of the relays
downloaded by the clients. Even if all three guard relays
are compromised, they cannot actively manipulate ele-
ments in the PIR database since they are signed by the
directory authorities; they can only learn which exit re-
lay descriptors were downloaded by the clients. (In Tor,
guards always know the identities of the middle nodes in
circuits through them.) If the exit relay in a circuit is hon-
est, then guard relays cannot break user anonymity. On
the other hand, if the exit relay used is malicious, then
user anonymity is broken [6], but in this scenario, the ad-
versary could have performed end-to-end timing analysis
anyway [2] (in the current Tor network).
5 PIR-Tor Protocol Details
5.1 Database organization and formatting
We ﬁrst note that Tor relays are selected based on some
constraints. For instance, the ﬁrst relay must be an en-
try guard, and the last relay must be an exit relay. We
propose to organize the list of relays into three separate
databases, corresponding to guard nodes, middle nodes
and exit nodes. Note that some relays function as entry
guards as well as exit relays — such relays are duplicated
in both the guard database and the exit database.
In addition to the last relay being an exit, its exit pol-
icy must satisfy the client application requirements. In
a February 2011 snapshot of the current Tor network,
there were 471 standard exits (default exit policy) and
482 non-standard exits sharing 221 policies. Had the
number of non-standard exits been small, then clients in
PIR-Tor could download all the relay descriptors for the
non-standard exits, and use PIR to select descriptors for
the standard exits. However, this is not the case. Instead,
we propose that nodes in the exit database be grouped
by their exit policies. Furthermore, in order to keep the
number of groups manageable, we propose that there be
a small set of standard exit policies that exit relays can
choose from. Our architecture can accommodate a small
set of relays with non-standard exit policies, and these
outliers can be downloaded in their entirety as above.
Tor relays have heterogeneous bandwidth capabilities,
and relays with higher capacities are selected with a
ClientDirectory/PIR server(any node)5. 2 PIR Queries (1 middle, 1 exit)2. Initial connectTrusted directory authorities3. Signed meta-information4. Load balanced index selection6. PIR Response•Middle database sorted by relay bandwidth. •Exit database first grouped by exit policy, each group sorted by relay bandwidth.  1.Download PIR databaseClientDirectory/PIR servers(3 guard nodes)5. 1 middle, 1 PIR Query (1 exit)2. Initial connectTrusted directory authorities•Middle database sorted by relay bandwidth. •Exit database first grouped by exit policy, each group sorted by relay bandwidth.  3. Signed meta-information4. Load balanced index selection6. PIR Response1.Download PIR databasehigher probability in order to load balance the network.
Bandwidth-weighted selection is straightforward given a
global view of the network. We now outline two strate-
gies to enable clients to perform weighted relay selection
without this global view. The ﬁrst strategy implements
the Snader-Borisov [41, 42] criterion for relay selection,
where only the relative rank of the relays in terms of their
bandwidths is used for relay selection.2 The second strat-
egy is more similar to the current Tor algorithm, where
the entire bandwidth distribution of relays is taken into
consideration for relay selection. In both scenarios, we
ﬁrst sort relays in each of the databases in order of band-
width. Clients can use the Snader-Borisov mechanism
by choosing the relay index to query with probability that
depends on the index value. For example, if the relays are
sorted in descending order of bandwidth, then clients can
select relays having a smaller index with higher probabil-
ity. To implement an algorithm similar to the current Tor
network, we propose that clients download a bandwidth
distribution synopsis from the directory servers, and use
it to make the relay selection. Finally, we note that the
exit database is treated as a special case since relays are
ﬁrst grouped based on their exit policies, and within each
group, relays are further sorted by bandwidth. This en-
ables a client to select an exit relay whose exit policy
satisﬁes its application requirements in a load-balanced
manner.
The PIR protocols we consider are block-based: the
database is composed of a number of equal-sized blocks.
The block size must be large enough to hold at least a sin-
gle relay descriptor, but may hold more. We must also
ensure that relay descriptors do not cross block bound-
aries by padding the database. To guard against active
attacks by directory servers, each block is signed by the
directory authorities; the data signed also includes the
block number (index), the consensus timestamp and a
database identiﬁer. To minimize overhead, we use the
threshold BLS signature scheme [3] since signatures in
that scheme are single group elements (22 bytes, for ex-
ample, for 80-bit security), regardless of the number of
directory authorities issuing signatures.
5.2 PIR Protocols and database locations
5.2.1 Computational PIR
Computational PIR protocols can guarantee privacy of
user queries even with a single untrusted relay acting as
a PIR database. Thus, we can designate an arbitrary set
of relays in the network as directory servers, and only
2The use of the Snader-Borisov criterion may have an impact on
the performance of the Tor network. Murdoch and Watson’s queueing
model [28] suggests that it will cause greater congestion at Tor relays,
whereas Snader and Borisov’s ﬂow-level simulations [42] predict sim-
ilar or even improved network utilization.
the directory servers need to maintain a global view of
all the relays, i.e., a current copy of the network con-
sensus formatted as above. Then, instead of download-
ing the entire consensus document from the directory
server, clients connecting to these directory servers use
a computational PIR protocol to retrieve a block of their
choice, without revealing any information about which
block, to the directory server. While our architecture is
compatible with all existing CPIR protocols, we use the
lattice-based scheme proposed by Agular-Melchor and
Gaborit [1] since it is the computationally fastest scheme
available. Note that the lattice-based CPIR protocol is a
single-server protocol, and does not require any interac-
tion with other directory servers.
5.2.2
Information-Theoretic PIR
Information-theoretic PIR protocols guarantee privacy of
user queries only if a threshold number of PIR databases
do not collude. As stated above, we use a client’s three
guard relays as ITPIR directory servers. The parameters
of the protocol are set such that the guard relays do not
learn any information about the client’s block unless all
three of them collude.
5.3 Client query protocol and meta-
information exchange
To query for a middle and exit relay, a client connects
to one of its directory (PIR) servers, which responds
back with the meta-information about each of the PIR
databases, such as the number of blocks in the database,
the block size, the distribution of exit policies, and a
bandwidth distribution synopsis. Note that the meta-
information is also timestamped and signed by the di-
rectory authorities. Based on this information, clients
can construct a PIR query to select Tor relays while sat-
isfying the constraints of the user. Clients can perform
load balancing based on the Snader-Borisov mechanism
by selecting an index to query with a probability that de-
pends on the index value. For greater ﬂexibility, clients
can perform load balancing in a manner similar to the
current Tor architecture by using the bandwidth distribu-
tion synopsis to select an index to query. The PIR queries
are performed by the clients well in advance of construct-
ing the circuit, so as not to impose extra latency during
circuit construction. Note that clients may not be able to
predict the exit policies required by circuits in advance.
To bypass this constraint, recall that the relays in the exit
database are grouped based on a small set of standard
exit policies, and clients can perform a few PIR queries
to obtain exit relays that satisfy all standard exit poli-
cies. Finally, clients can periodically download the relay
descriptors of the small set of exit relays that have non-
standard exit policies (every 3 hours).
Next, we propose an optimization that clients can per-
form while using guard relays as directory servers in the
case of information-theoretic PIR. We note that during
circuit creation, a guard relay learns the identity of the
middle relay. Thus the clients could simply skip the
PIR for the middle database, and directly query a single
guard relay for a particular block. Note that all blocks are
signed by the directory authorities, and any active attacks
by the guard relay will be detected by the client. Also
note that the fetched descriptors should only be used in
conjunction with the guard relay from which they were
obtained; otherwise, even a single compromised guard
would be able to perform ﬁngerprinting attacks [6].
5.4 Circuit Construction
The circuit creation mechanism remains the same as in
the current Tor network.
In the current Tor network,
clients construct a new circuit every 10 minutes. As we
show in Section 8, in the ITPIR scenario, the cost of all
Tor clients performing one PIR query (since the middle
relay is fetched without using PIR) every 10 minutes is
manageable.
In the CPIR setting, the communication
overhead of all Tor clients performing two PIR queries
in a 10-minute interval is rather high, and we propose to
perform fewer PIR queries, and reuse descriptors in sub-
sequent time intervals. We discuss this further in Sec-
tion 7.
6 Trafﬁc Analysis Resistance of PIR-Tor
In this section we evaluate the resistance to trafﬁc anal-
ysis of PIR-Tor. We consider an adversary that can ob-
serve some fraction of the network and has the ability to
generate, modify, delete, or delay trafﬁc. She can com-
promise a fraction of the relays, or introduce relays of
her own. Further, we consider that the adversary can ob-
serve clients’ requests to the PIR-Tor directory servers,
and knows that in these requests the client only learns
about a fraction of the relays in the network.
As pointed out in the past [6,7], clients’ partial knowl-
edge of the relays belonging to the anonymity network
enables route ﬁngerprinting attacks. In these papers it is
assumed that relay discovery is a non-anonymous pro-
cess. Hence, an adversary observing the discovery pro-
cess can build a mapping between users and the relays
they know. If clients learn unique (disjoint) sets of relays,
their paths can be “ﬁngerprinted”, and the client’s iden-
tity can be trivially recovered from this mapping. This
problem does not exist in the current Tor, where query-
ing the directories provides clients with a global view of
the network.
In PIR-Tor the threat model slightly differs from the
one in [6, 7]. Directory queries continue being identiﬁ-
able, but PIR prevents the adversary from learning which
exact relays were retrieved from the database, avoiding
the creation of a mapping describing users’ knowledge.
Therefore, when route ﬁngerprinting is performed the at-
tack does not result in a direct loss of anonymity. Even
if the choice of relays appearing in the ﬁngerprint were
unique, the adversary does not have a way to link this
ﬁngerprint to a speciﬁc client. In fact, the only way for
the attacker to link the client with the destination of her
trafﬁc is to control the ﬁrst and last relays in the path