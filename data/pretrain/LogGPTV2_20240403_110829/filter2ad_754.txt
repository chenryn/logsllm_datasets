# Virtual Network Function Orchestration with Scylla

**Authors:**
- Roberto Riggio, CREATE-NET, Trento, Italy
- Julius Schulz-Zander, TU-Berlin, Berlin, Germany
- Abbas Bradai, CNRS-LiG, Grenoble, France

## Abstract
Network Function Virtualization (NFV) promises to reduce the costs of deploying and operating large networks by migrating various network functions from dedicated hardware appliances to software instances running on general-purpose networking and computing platforms. In this paper, we present Scylla, a Programmable Network Fabric architecture for Enterprise WLANs. The framework supports basic Virtual Network Function (VNF) lifecycle management functionalities such as instantiation, monitoring, and migration. We release the entire platform under a permissive license for academic use.

**Categories and Subject Descriptors**
C.2.3 [Computer Communication Networks]: Network Operations

**Keywords**
Network Function Virtualization, Enterprise WLANs

## 1. Introduction
Network Function Virtualization (NFV) aims to reduce the cost of deploying and operating large networks by moving various network functions from dedicated hardware appliances to software instances running on general-purpose networking and computing platforms. This approach enhances flexibility and scalability, allowing for quicker deployment of new features and services, and enabling different network functions to share the same computing resources, leading to further economies of scale.

However, current NFV platforms typically only account for virtualized computing, storage, and networking resources, each managed separately. In this demo, we introduce the concept of a Programmable Network Fabric to achieve a truly deep programmable network. Our architecture leverages a single platform consisting of general-purpose hardware (x86) and an operating system (Linux) to deliver three types of virtualized network resources: basic forwarding nodes (e.g., OpenFlow-enabled Ethernet switches), packet processing nodes, and radio processing nodes (WiFi).

During the demo, we will showcase Scylla, a Programmable Network Fabric architecture for Enterprise WLANs. Scylla supports basic VNF lifecycle management functionalities, including instantiation, monitoring, and migration. The demo will demonstrate the framework's operation using three sample VNFs: a performance-enhancing VNF, a security VNF, and a monitoring VNF. The code is released under a permissive license for academic use.

## 2. Programmable Network Fabric
We define a Programmable Network Fabric as the set of all packet processing nodes. As shown in Figure 1, each packet processing node includes an OpenVSwitch instance, one or more VNFs, and a Packet Processor Agent. The Packet Processor Agent monitors the status of each VNF and handles CRUD requests from the Programmable Network Fabric Controller (PNFC). Monitoring features include the number of packets/bytes transmitted and received, as well as the amount of CPU time, memory, and storage utilized by each VNF.

The PNFC acts as an orchestrator, deciding whether to accept or reject a VNF request. If accepted, the PNFC maps the request onto the substrate network, allocating and configuring network resources and installing VNFs on selected nodes.

Our architecture uses a combination of frameworks:
- POX [2] for configuring resources in the switching fabric.
- The SD-RAN controller [3] for wireless access.
- Click [4] for advanced packet processing, which allows building complex VNFs using simple and reusable components called Elements.

The PNFC is built on top of the Tornado Web Framework [5]. Communication between packet processors and the PNFC occurs over a persistent TCP connection. Control applications run on top of the PNFC and interact with its programming primitives through either a REST API or a native Python API.

Scylla VNFs are modular and reusable, consisting of a Click instance wrapped inside a Python object that exposes lifecycle management functions. A Manifest specifies the Click configuration, the number of input/output ports, and a list of events that control applications can subscribe to. For example, the `cpu_util` primitive triggers a callback when the CPU utilization of any Packet Processor in a tenant’s network exceeds 70%.

```python
cpu_util(relation='GT', value=0.7, tenant_id='', callback=cpu_callback)
```

After the trigger fires and as long as the CPU utilization remains above 70%, the callback method is not called again by the same packet processor, but it may be triggered by other packet processors. Scylla VNFs can also declare a state in their Manifest file, defined in the form of Click handlers that provide snapshots of active VNFs. These snapshots are atomic and lock the VNF execution for the time required to invoke the handlers. State handlers must support both read and write operations, allowing VNF states to be migrated between nodes.

## 3. Demo
In this demo, we will demonstrate the operation of the Scylla framework using three VNFs. A web-based dashboard will show real-time statistics (traffic, CPU load, memory usage, energy consumption) and allow for VNF deployment and migration.

### 3.1 Uplink/Downlink Decoupling
Wireless networks, particularly mobile networks, have traditionally been designed around downlink requirements. However, the growth of uplink-centric applications like Machine Type Communications and the Internet of Things calls for a paradigm shift. Traffic from a wireless client should be opportunistically received by multiple in-range APs. If not properly controlled, this can lead to an overload in the network core and unstable behavior at the transport layer.

To address this, we implemented a VNF that filters out duplicate 802.11 frames based on their sequence numbers. Traffic from clients is received at one or more APs, encapsulated (802.11 over Ethernet), and forwarded to a packet processing node where the frame filtering VNF is deployed. This VNF also removes 802.11 and LLC headers and encapsulates the frame into an Ethernet header before forwarding it to its destination.

```python
FromHost(vnf0) -> in::Counter -> Strip(14) -> dupe::WifiDupeFilter() -> decap::WifiDecap() -> out::Counter -> ToHost(vnf0)
```

### 3.2 Firewall Migration
Enterprise networks often need to handle Bring Your Own Device (BYOD) scenarios, where employees or customers connect their own devices to the corporate network. This raises new requirements for network access policies. Our second VNF implements a straightforward firewall where rules can be moved from one instance to another based on the client association state. Rules are migrated when clients perform a handoff from one AP to another. This firewall VNF takes a list of tcpdump-like patterns as input from the controller and applies them to incoming traffic.

### 3.3 SLA Monitoring
This VNF aims to implement a basic Service Level Agreement (SLA) monitoring solution. A packet sniffing VNF is deployed on radio nodes to collect all transmissions within decoding range. For each link-layer event, the following metadata is tracked: RSSI (in dB), Transmission Rate (in Mb/s), Length (in bytes), and Duration (in µsec). The collected metadata is then forwarded to another VNF, which computes aggregate statistics by filtering out duplicate frames. For each active WiFi station, the number of packets/bytes transmitted and received, as well as the retransmission count, are tracked.

## 4. References
[1] R. Riggio, T. Rasheed, and R. Narayanan, “Virtual network functions orchestration in enterprise WLANS,” in Proc. of IEEE ManFI, Ottawa, ON, Canada, 2015.

[2] “POX.” [Online]. Available: http://www.noxrepo.org/pox/about-pox/

[3] R. Riggio, M. Marina, J. Schulz-Zander, S. Kuklinski, and T. Rasheed, “Programming abstractions for software-defined wireless networks,” Network and Service Management, IEEE Transactions on, vol. 12, no. 2, pp. 146–162, June 2015.

[4] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek, “The click modular router,” ACM Trans. Comput. Syst., vol. 18, no. 3, pp. 263–297, Aug. 2000.

[5] “Tornado Web Server.” [Online]. Available: http://www.tornadoweb.org/

**Note:** `vnf0` is a virtual interface attached to the OpenVSwitch instance running on the packet processing node.