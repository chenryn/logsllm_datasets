particular, the proof details out the correctness argument for the
abstractions of the CALL rule by covering call initiation as well as
returning from contracts calls.
′) ≤ ∆
Proof. (sketch) By complete induction on the number n of small-
steps.
• Case n = 0. In the case of the empty reduction sequence, we
have that S′ = [sc∗] and consequently the claim trivially follows
by the reflexivity of ⊢.
S′′ and Γ ⊨ S′′ → S′ ++ S.
• Case n > 0. Let Γ ⊨ sc∗ :: S →n−1
By Lemma B.5, it holds that S′′ = S∗ ++ S for some S∗ with
|S∗| > 0. By the inductive hypothesis we know that for all ∆I ≥
αc∗([sc∗]) there is some ∆S∗ ≥ αc∗(S∗) such that ∆I ∪ δ(c∗) ⊢
∆S∗. Consequently, for proving the claim, it is sufficient to show
that there is some ∆S′ ≥ αc∗(S′) such that ∆S∗ ∪δ(c∗) ⊢ ∆S′. As
|S∗| > 0, we know that S∗ = s′
c′ :: S∗∗ for some execution state
s′, contract c′ and callstack S∗∗. The proof is by case analysis
on the rule applied in the last reduction step. We show here
exemplary the cases for arithmetic operations as well as the
rule for calling.
ADD (non exception case). Then s′ = (µ, ι, σ , η), ι.code[µ.pc] =
ADD and S′ = (µ′, ι, σ , η)c′ :: S∗∗. We distinguish the two
cases on whether the top stack element s′
c′ is translated
or not (c′ = c∗)
c′ (cid:44) c∗ In this case αc∗(S∗) = αc∗(S∗∗). As ADD is a local in-
struction, we know that S′ = s′′
c′ :: S∗∗ and hence also
αc∗(S′) = αc∗(S∗∗). The claim hence follows trivially
from the reflexivity of ⊢. The same reasoning applies
to all other local instructions.
c′ = c∗ In this case αc∗(S∗) = αs(s′, c∗.addr, cℓ) ∪ αc∗(S∗∗) for
some cℓ ∈ B. As s′ is strongly consistent with c∗ (by
Lemma B.14), we know that ι.code = c∗.code and hence
δ(c∗) ⊇(cid:76)ADD(cid:77)µ .pc. The claim then follows from the
monotonicity of δ(c∗) (Theorem B.17) and the sound-
ness of abstract addition (Lemma B.26). The same ar-
gumentation applies to all other local operations.
CALL (all preconditions satisfied, called account exists). Then s′ =
(µ, ι, σ , η), ι.code[µ.pc] = CALL and S′ = (µ′, ι′, σ ′, η)(cid:219)c :: S∗
such that µ′ is initial, and σ(a).stor = σ ′(a).stor for all
addresses a. Again we distinguish the cases whether the
newly pushed callstack element (µ′, ι′, σ ′, η)(cid:219)c is abstracted
by α or not.
(cid:219)c (cid:44) c∗ Then αc∗(S′) = αc∗(S∗) and the claim trivially holds.
(cid:219)c = c∗ We do another case distinction on whether c′ = c∗
is
µ′
ι.code
c′ = c∗ In this case, we know that αs(s′, addr.c∗, cℓ) ≤ ∆S∗
(where cℓ = (S∗∗ (cid:44) ϵ)). Since s′ is strongly
consistent with c∗
(by Lemma B.14), we
c∗.code and hence
(cid:76)CALL(cid:77)µ .pc ⊆ δ(c∗). Since s′ is a call state,
have that
=
we have that (cid:76)CALL(cid:77)µ .pc ∪ αs(s′, addr.c∗, cℓ) ⊢
{MState0((0, λx . 0), λx . 0, σ(c∗.addr).stor, 1)}.
As
=
σ ′(a).stor, we
that
{MState0((0, λx . 0), λx . 0, σ(c∗.addr).stor, 1)}
=
αs((µ′, ι′, σ ′, η), c∗.addr, cℓ′) (for cℓ′ = (S∗ (cid:44) ϵ)).
By
(Theo-
rem B.17), we know that there is also some
∆x ≥ αs((µ′, ι′, σ ′, η), c∗.addr, cℓ′) such that
∆S∗ , δ(c∗) ⊢ ∆x which concludes the proof since
∗) ⊢ ∆x ∪ ∆S∗
′
′
σ(a).stor
know additionally
the monotonicity
δ(c∗)
initial
and
of
∆S∗ ∪ δ(c
∗
′
.addr, cℓ
′) ∪ α(S
∗)
, η), c
, ι
, σ
≥ αs((µ
′)
= α(S
c′ (cid:44) c∗ By Lemma B.15, we know (since s′
either
execution
that
=
∈
we
this
case
know
state)
c∗
c′ :: S∗∗ ++ S
is a
(1)
regular
there exists some s∗
S∗∗ such that
s′.σ(c∗.addr).stor = s∗.σ(c∗.addr).stor or (2) there
exist S†, σ∗, gas∗, d∗, η∗, and m 
α(HALT(σ∗, gas∗, d∗, η∗)c∗
from the induc-
tive hypothesis for m (since m 
δ(c∗)
some ∆x
such that ∆x
.µ .pc
⊢
=
1
1
Halt (returning
=
=
from regular halting). Then s′
c′′ :: S† and S′ = s′′′
HALT(σ ′, η′, gas′, d′), S∗∗ = s′′
We make a case distinction on c′′ = c∗:
c′′ :: S†.
c′′ (cid:44) c∗ In this case clearly α(S∗) ⊇ α(S†) and α(S′) = α(S†)
and consequently ∆S′ ≥ α(S′) and hence the claim
trivially follows by the reflexivity of ⊢.
c′′ = c∗ In this case α(S∗) ⊇ αs(s′′, c∗.addr, cℓ′′) ∪ α(S†) and
α(S′) = αs(s′′′, c∗.addr, cℓ′′)∪α(S†). From Lemma B.7,
we know that s′′ is a call state. With Lemma B.14,
we additionally have that s′′.ι.code = c∗.code
and hence also c∗.code[s′′.µ.pc]
CALL13.
Consequently δ(c∗) ⊇ (cid:76)CALL(cid:77)s′′.µ .pc.
In addi-
tion we have that αs(s′′, c∗.addr, cℓ′′) ≤ ∆S∗
and since s′′
in (cid:76)CALL(cid:77)s′′.µ .pc are sat-