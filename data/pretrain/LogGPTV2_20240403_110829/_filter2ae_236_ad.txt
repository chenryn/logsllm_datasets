如果首次加载页面时，表单的action属性（密码将提交到的URL）存在差异，则KeePassXC，LastPass和Firefox将显示警告，而Firefox也拒绝填写密码。如果在页面加载后（即动态地）更改了动作属性，则KeePassXC和Firefox将显示警告，尽管与之前不同，Firefox会继续输入密码。密码管理器不会对方法属性中的类似差异做出反应。如果表单中的输入字段已被重命名或删除，LastPass将需要用户交互。
###  4）非标准登录字段
调查了密码管理器是否将用type =“ text”（而不是type =“
password”）填充表单字段，发现在这种情况下只有DashLane会自动填充密码。还检查了这些工具是否会自动填充最小表单（即非登录表单），该表单仅包含两个输入字段：文本字段和密码字段；在这种情况下，自动填充将减少攻击者收集凭据所需的工作。在这种情况下发现Bitwarden，Chrome，Edge，Firefox，IE和Opera都将自动填写这些非登录表单，而其余的浏览器仅在用户明确要求时才填写。
###  5）潜在缓解
建议使用一种更安全的自动填充形式来解决XSS漏洞，没有将密码填充到容易受到XSS攻击的网页上，而是将随机数作为密码填充到了网站中。当随机数即将通过网络传输到网站时，密码管理器将用真实密码替换随机数。这种方法使网页上的JavaScript无法访问用户的密码。此外，密码管理器可以检查密码仅发送到与该密码相关联的网站，并且密码表单没有提交到其他网站。
本研究检查了所有密码管理器以查看它们是否支持此功能，并发现它们均不支持此功能。在调查此功能时，尝试自己实施该功能，并发现浏览器不允许扩展程序修改请求正文，从而阻止了基于扩展程序的行为密码管理器利用这种更安全的操作模式。启用安全密码输入是浏览器可以做的工作，以改善Web上的身份验证，接下来将对此进行更深入的讨论。
查看当前的W3C规范，尚不清楚autocomplete属性是否应排除登录凭据的存储和自动填充。尽管规范确实指出“用户代理”不应填充标有自动完成功能的字段，但尚不清楚这是仅指主要用户代理（即浏览器）还是用户代理扩展（即密码管理器）。
Mozilla的文档还指出，为了支持密码管理器功能，大多数现代浏览器已明确选择忽略登录字段的autocomplete属性。这有助于解释为什么即使在先前的研究中，浏览器中对此属性有一些支持，也没有密码管理器当前遵循此参数。
###  6） Web Vault安全性和书签
在线密码库的安全性问题可能会放大自动填充问题。这些Web保险库既包括密码库的独立接口，又充当基于扩展的密码管理器的同步后端。例如，跨站请求伪造（CSRF）可用于更改与一组凭据关联的URL，从而允许自动填充所有用户凭据并从单个恶意域中窃取所有凭据。或者，可以使用Web
Vault上的XSS漏洞窃取其所有密码。
本文评估了五个基于扩展的密码管理器及其Web Vault后端，以查看它们是否已正确解决了潜在的CSRF和XSS攻击。发现1Password
X，Bitwarden，DashLane和LastPass使用CSRFtokens来防止CSRF攻击。
RoboForm似乎没有使用CSRF令牌，并且能够针对更改了会话超时参数的Web Vault发起CSRF攻击。无法找到其他CSRF攻击，因为Web
Vault似乎使用加密身份验证而不是Cookie来验证其他请求。
为了评估Web Vault对XSS攻击的敏感性，手动检查了每个Web Vault的内容安全策略（CSP）标头。评估结果未发现1Password
X或Dashlane的CSP政策存在问题。 Bitwarden的政策有两个小问题：script-src允许“self”，而object-src允许“self”和“ blob：”。 LastPass的策略允许在script-src中使用“ unsafe-inline”，从而为XSS攻击留出了很大的空间。
RoboForm的网站没有任何CSP策略。本研究确实尝试为LastPass和RoboForm制作XSS漏洞，但是由于两个站点都进行了广泛的输入清理，因此这些努力没有成功。无论如何，两个Web保管库都将从实施更严格的（或任何）CSP策略中受益。
最后，检查了基于扩展的密码管理器是否仍然具有易受攻击的基于书签的部署选项（用于支持移动设备）。发现除了LastPass之外，基于扩展的密码管理器不再支持基于书签的部署。取而代之的是，密码管理器依靠本机移动应用程序来处理移动设备上的密码管理。
LastPass的小书签可以在受保护的iframe中正确执行代码，并过滤发送给小书签的危险消息，从而解决了Li等人发现的问题类型。
## 0x07 Discussion
研究表明，与以往研究中这些类型的工具相比，基于应用程序和基于扩展的密码管理器得到了改进。通常，他们在解决特定漏洞方面做得很好：改进了对密码库中存储的元数据的保护，删除了（不安全的）小书签，限制了自动填充iframe的能力（防止了密码收集攻击）以及解决了在线密码库的Web安全问题。另一方面，与早期工作相比，它们在处理没有特定漏洞的区域时如何处理密码几乎没有什么变化：警告用户有关填写表单与保存密码的表单之间的差异或XSS缓解措施的实现。同样，基于浏览器的密码管理器在安全性和功能方面仍然大大落后于基于应用程序和基于扩展的密码管理器。
根据发现，建议用户避免使用Firefox的内置密码管理器。特别是，它的自动填充功能极其不安全，并且容易受到密码收集攻击的攻击。如果攻击者可以对用户（例如，控制WiFi访问点）发起网络注入攻击，那么该攻击者就很难窃取用户Firefox密码库中存储的所有凭据。希望这些问题将在Firefox过渡到Firefox
Lockbox密码管理器时得到解决。
KeePassXC浏览器扩展程序的用户还应确保他们在自动填充之前不禁用用户交互要求，因为这样做还会使客户端容易受到相同的密码收集攻击。
还建议用户避免使用基于浏览器的密码管理器，而应使用基于应用程序和扩展的密码管理器，因为后者通常具有更多功能，更安全地存储密码，并拒绝在跨域iframe中填写密码。
Safari的密码管理器是其中一个例外，它虽然缺乏良好的密码生成器，但却可以很好地存储密码并避免自动填充错误。
使用基于应用程序和扩展的密码管理器，仍然需要用户确保对其进行正确配置。在自动将密码填充到网站中之前，Dashlane和LastPass都不需要用户交互，并且Bitwarden和Roboform允许禁用此交互。如果禁用了用户交互，则访问受感染网站（例如，攻击者利用了XSS漏洞）的用户可能会在该用户的密码被盗的情况下不知道发生了这种情况。虽然这不像密码收集攻击那样糟糕（现在已由基于扩展的密码管理器阻止），但它仍然是用户无需了解或担心的漏洞。在研究的基于扩展的密码管理器中，只有1Password
X拒绝自动填充密码。
###  1）建议
**过滤弱密码：**
研究表明，密码管理器将随机生成可被在线或离线猜测攻击轻易破解的密码。这是密码生成的自然扩展，它实际上是随机的，即可以生成任何密码，即使它是带有通用替换的自然语言单词（例如，“
d @ rKn3s5”）或表现出重复的字符模式（例如，“’ +’+’+ _
+”）。尽管对于足够长的密码（对于在线抵抗而言，为10个字符，对于离线抵抗而言，为18个字符），这是极不可能的，但仍然可以实现。为解决此问题，建议密码生成器添加一个简单的过滤器，以检查生成的密码是否易于猜测（使用zxcvbn轻松检查），如果是，则生成替换密码。
**更好的主密码策略：**
密码管理器要求用户选择和管理主密码，希望如此，因为他们只需要一个密码，用户便可以选择足够强的秘密。如果用户未能选择好的主密码，特别是如果所选的主密码被在线攻击，那么密码管理器将成为该用户帐户的弱点。不幸的是，信任用户始终选择强主密码是有问题的：（1）用户不一定了解强密码的构成；（2）他们选择的密码可能具有独特的转换，但认为是通用的；（3）用户仍然可以选择简单的密码，因为它更方便。
由于这些原因，建议密码管理器对主密码的选择采取严格的要求，以防止用户将其密码管理器变成弱点。此外，密码管理者都应过渡到使用存储硬KDF来将主密码转换为加密密钥。
**安全的自动填充：**
如果网站受到XSS攻击，则无需用户交互即可自动填充凭据，这些凭据将处于危险之中。因此，建议密码管理器默认在自动填充密码之前要求用户交互。在可能的情况下，还建议您删除禁用用户交互的选项，因为用户不太可能了解将其关闭的含义。自动填充到相同或交叉来源的iframe中也很危险，因为它允许点击劫持攻击来规避用户交互要求。因此，建议您禁用iframe自动填充功能，否则，如果考虑将用户交互活动从网页移出浏览器（如Bitwarden和RoboForm所做的那样）不可行，则使点击劫持攻击变得更加困难。
###  2）未来工作
浏览器支持的密码管理器：当前，身份验证是浏览器中的第二级。未来的研究应检查浏览器如何更好地支持基于密码的身份验证，例如，使基于密码的身份验证接口成为浏览器实现的一流HTML元素，以确保正确处理密码。这可能包括为基于密码的身份验证提供通用的可识别界面，允许使用替代协议（例如，强密码协议），并防止恶意网站创建类似网络钓鱼的界面。
研究还应探索浏览器如何为密码管理器扩展提供附加功能，包括：（1）允许密码管理器生成现时随机数，以自动填充代替浏览器在以下情况下将其替换为密码的密码：目标域与密码管理器中与密码关联的域匹配；
（2）为密码管理者提供对系统密钥环（例如macOS密钥环，Windows Vault）的访问权限，从而为他们提供了一种更安全和标准化的机制来存储帐户凭据；
（3）处理自动填充的用户交互组件，并确保其具有抗点击性。 （4）添加描述网站密码策略的HTML属性，允许密码管理者生成将被网站接受的密码。
研究衍生的字符集：密码管理器使用不同的字符集生成密码，它们允许使用的符号以及将其删除为不可用的字符差异很大（例如，难以记住，难以区分）。提倡以数据为动力，努力建立标准化的字符集。
应进行用户研究，以识别用户难以阅读和输入的字符，并注意其他输入方式（例如，使用遥控器或可访问的键盘输入密码）。对现有密码策略的度量也可以用于识别网站密码策略通常拒绝哪些字符。可能是没有一个理想的字符集，而是针对不同类型的密码（例如，具有限制性策略的密码，以非键盘方式输入的密码）使用了不同的字符集。在这种情况下，可以使用统计模型来识别各种形式的密码的理想长度。
HTML支持的密码生成：建议添加HTML属性，以帮助密码管理员识别生成密码时要使用的策略，认为这种方法应引起更多关注。尤其值得一提的是，查看开发人员研究的可行性研究，以将该功能添加到现有网站中，并进行用户研究，以确保该功能易于理解并对用户有所帮助。值得一提的是，是否可以通过语义评估检查密码的代码来自动推断和添加此类注释。
移动端密码管理器：本文工作检查了桌面环境中密码管理器的安全性，考虑到移动设备的普遍性，有必要对移动密码管理器的安全性进行类似的分析。
## 0x08 Conclusion
媒体目前正在建议使用密码管理器，但用户在选择密码管理器时需要谨慎，并且还必须花费时间来确保他们了解如何正确配置它。正如经验所表明的那样，将这些责任推给用户很少会有预期的好结果。因此研究人员要继续评估密码管理器的发展进度，并且要努力继续提高密码管理器的安全性和可用性。