### References

1. **Speech from Gyroscope Signals.** In *USENIX Security Symposium*, 1053–1067.
2. **Emiliano Miluzzo, Alexander Varshavsky, Suhrid Balakrishnan, and Romit Roy Choudhury.** 2012. Tapprints: Your finger taps have fingerprints. In *Proceedings of the 10th International Conference on Mobile Systems, Applications, and Services*.
3. **Mounir Lamouri, Marcos Cáceres.** 2018. Screen Orientation API. https://www.w3.org/TR/screen-orientation/. Accessed: 2018-07-13.
4. **Patrick Mutchler, Adam Doupé, John Mitchell, Chris Kruegel, and Giovanni Vigna.** 2015. A large-scale study of mobile web app security. In *Proceedings of the Mobile Security Technologies Workshop (MoST)*.
5. **Vinod Nair and Geoffrey E Hinton.** 2010. Rectified linear units improve restricted Boltzmann machines. In *ICML*.
6. **Sashank Narain, Triet D Vo-Huu, Kenneth Block, and Guevara Noubir.** 2016. Inferring user routes and locations using zero-permission mobile sensors. In *Security and Privacy (SP), 2016 IEEE Symposium on*. IEEE, 397–413.
7. **Trung Tin Nguyen, Michael Backes, Ninja Marnau, and Ben Stock.** 2021. Share First, Ask Later (or Never?)-Studying Violations of GDPR’s Explicit Consent in Android Apps. In *USENIX Security Symposium*.
8. **Nick Nikiforakis, Alexandros Kapravelos, Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna.** 2013. Cookieless monster: Exploring the ecosystem of web-based device fingerprinting. In *Security and Privacy (SP), 2013 IEEE Symposium on*. IEEE, 541–555.
9. **Łukasz Olejnik, Gunes Acar, Claude Castelluccia, and Claudia Diaz.** 2015. The leaking battery. In *Data Privacy Management, and Security Assurance*. Springer.
10. **Emmanuel Owusu, Jun Han, Sauvik Das, Adrian Perrig, and Joy Zhang.** 2012. ACCessory: Password inference using accelerometers on smartphones. In *Proceedings of the Twelfth Workshop on Mobile Computing Systems & Applications*.
11. **Pierluigi Paganini.** 2019. Android apps use the motion sensor to evade detection and deliver Anubis malware. https://securityaffairs.co/wordpress/80037/malware/android-apps-motion-sensor.html.
12. **Elias P Papadopoulos, Michalis Diamantaris, Panagiotis Papadopoulos, Thanasis Petsas, Sotiris Ioannidis, and Evangelos P Markatos.** 2017. The long-standing privacy debate: Mobile websites vs mobile apps. In *Proceedings of the 26th International Conference on World Wide Web*. International World Wide Web Conferences Steering Committee.
13. **Panagiotis Papadopoulos, Nicolas Kourtellis, and Evangelos P. Markatos.** 2018. Exclusive: How the (Synced) Cookie Monster Breached My Encrypted VPN Session (EuroSec’18).
14. **BI INDIA PARTNER.** 2020. Freecharge’s innovative ad that used accelerometer and gyroscope motion sensors helped the brand reach 4.5 million users. https://www.businessinsider.in/advertising/ad-tech/article/freecharges-innovative-ad-that-used-accelerometer-and-gyroscope-motion-sensors-helped-the-brand-reach-4-5-million-users/articleshow/78384923.cms. Accessed: 2021-04-26.
15. **Paul Pearce, Adrienne Porter Felt, Gabriel Nunez, and David Wagner.** 2012. AdDroid: Privilege separation for applications and advertisers in Android. In *Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security (Seoul, Korea) (ASIACCS ’12)*. Association for Computing Machinery, New York, NY, USA, 2 pages. https://doi.org/10.1145/2414456.2414498
16. **Paul Pearce, Adrienne Porter Felt, Gabriel Nunez, and David Wagner.** 2012. Addroid: Privilege separation for applications and advertisers in Android. In *Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security*. 71–72.
17. **Dan Ping, Xin Sun, and Bing Mao.** 2015. TextLogger: Inferring longer inputs on touch screen using motion sensors. In *Proceedings of the 8th ACM Conference on Security & Privacy in Wireless and Mobile Networks (WiSec ’15)*.
18. **Andrea Possemato and Yanick Fratantonio.** 2020. Towards HTTPS Everywhere on Android: We Are Not There Yet. In *29th USENIX Security Symposium (USENIX Security 20)*. 343–360.
19. **Rahul Raguram, Andrew M. White, Dibyendusekhar Goswami, Fabian Monrose, and Jan-Michael Frahm.** 2011. iSpy: Automatic reconstruction of typed input from compromising reflections. In *Proceedings of the 18th ACM Conference on Computer and Communications Security (Chicago, Illinois, USA) (CCS ’11)*. ACM, New York, NY, USA, 527–536. https://doi.org/10.1145/2046707.2046769
20. **Ashis Kumar Ratha, Shibani Sahu, and Priya Meher.** 2018. HTML5 in Web Development: A New Approach. (2018).
21. **Joel Reardon, Álvaro Feal, Primal Wijesekera, Amit Elazari Bar On, Narseo Vallina-Rodriguez, and Serge Egelman.** 2019. 50 ways to leak your data: An exploration of apps’ circumvention of the Android permissions system. In *28th USENIX Security Symposium (USENIX Security 19)*. 603–620.
22. **Sasank Reddy, Min Mun, Jeff Burke, Deborah Estrin, Mark Hansen, and Mani Srivastava.** 2010. Using mobile phones to determine transportation modes. *ACM Transactions on Sensor Networks (TOSN)* 6, 2 (2010), 13.
23. **Tomas Reimers/Github.** 2017. Axolotl Machine Learning Framework. https://github.com/tomasreimers/axolotl. Accessed: 2020-10-28.
24. **Jingjing Ren, Martina Lindorfer, Daniel J Dubois, Ashwin Rao, David Choffnes, and Narseo Vallina-Rodriguez.** 2018. A longitudinal study of PII leaks across Android app versions. In *Network and Distributed System Security Symposium*.
25. **Jingjing Ren, Ashwin Rao, Martina Lindorfer, Arnaud Legout, and David Choffnes.** 2016. ReCon: Revealing and controlling PII leaks in mobile network traffic. In *MobiSys '16*.
26. **Yanzhi Ren, Yingying Chen, Mooi Choo Chuah, and Jie Yang.** 2013. Smartphone-based user verification leveraging gait recognition for mobile healthcare systems. In *Sensor, Mesh and Ad Hoc Communications and Networks (SECON), 2013 10th Annual IEEE Communications Society Conference on*. IEEE, 149–157.
27. **Irwin Reyes, Primal Wijesekera, Joel Reardon, Amit Elazari Bar On, Abbas Razaghpanah, Narseo Vallina-Rodriguez, Serge Egelman, et al.** 2018. "Won’t somebody think of the children?" Examining COPPA compliance at scale. In *The 18th Privacy Enhancing Technologies Symposium (PETS 2018)*.
28. **Rich Tibbett, Tim Volodine, Steve Block, Andrei Popescu.** 2018. Device orientation event. https://www.w3.org/TR/orientation-event/. Accessed: 2018-07-13.
29. **Claudio Rizzo, Lorenzo Cavallaro, and Johannes Kinder.** 2018. Babelview: Evaluating the impact of code injection attacks in mobile WebViews. In *International Symposium on Research in Attacks, Intrusions, and Defenses*. Springer, 25–46.
30. **Franziska Roesner, Tadayoshi Kohno, and David Wetherall.** 2012. Detecting and defending against third-party tracking on the web. In *9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12)*. 155–168.
31. **rovo89.** 2018. Xposed framework. https://repo.xposed.info.
32. **Android SYSTEM_ALERT_WINDOW permission.** 2021. SDK. https://developer.android.com/reference/android/Manifest.permission#SYSTEM_ALERT_WINDOW. Accessed: 2021-02-10.
33. **Android SDK.** 2021. Window Layout - FLAG_SECURE. https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE. Accessed: 2021-02-10.
34. **Shashi Shekhar, Michael Dietz, and Dan S Wallach.** 2012. Adsplit: Separating smartphone advertising from applications. In *21st USENIX Security Symposium (USENIX Security 12)*. 553–567.
35. **Anastasia Shuba, Anh Le, Minas Gjoka, Janus Varmarken, Simon Langhoff, and Athina Markopoulou.** 2015. Antmonitor: Network traffic monitoring and real-time prevention of privacy leaks in mobile devices. In *Proceedings of the 2015 Workshop on Wireless of the Students, by the Students, & for the Students*.
36. **Prabhsimran Singh.** 2020. Install Burpsuite’s or any CA certificate to system store in Android 10 and 11. https://pswalia2u.medium.com/install-burpsuites-or-any-ca-certificate-to-system-store-in-android-10-and-11-38e508a5541a.
37. **Raphael Spreitzer.** 2014. Pin skimming: Exploiting the ambient-light sensor in mobile devices. In *Proceedings of the 4th ACM Workshop on Security and Privacy in Smartphones & Mobile Devices*. ACM, 51–62.
38. **Nitish Srivastava, Geoffrey Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdinov.** 2014. Dropout: A simple way to prevent neural networks from overfitting. *The Journal of Machine Learning Research* 15, 1 (2014), 1929–1958.
39. **Terry Stancheva.** 2021. 50+ App Revenue Statistics - Mobile Is Changing the Game. https://techjury.net/blog/app-revenue-statistics/#gref.
40. **Statcounter.** 2021. Mobile Operating System Market Share Worldwide. https://gs.statcounter.com/os-market-share/mobile/worldwide. Accessed: 2021-02-10.
41. **Keen Sung, JianYi Huang, Mark D Corner, and Brian N Levine.** 2020. Re-identification of mobile devices using real-time bidding advertising networks. In *Proceedings of the 26th Annual International Conference on Mobile Computing and Networking*. 1–13.
42. **Mohammad Tahaei and Kami Vaniea.** 2021. "Developers Are Responsible": What ad networks tell developers about privacy. (2021).
43. **NEXD team.** 2020. The Nexd Perspective: Gyroscope ads engage your audience. https://www.nexd.com/blog/using-gyroscope-ads-to-better-engage-your-audience/. Accessed: 2020-10-28.
44. **Randika Upathilake, Yingkun Li, and Ashraf Matrawy.** 2015. A classification of web browser fingerprinting techniques. In *New Technologies, Mobility and Security (NTMS), 2015 7th International Conference on*. IEEE, 1–5.
45. **Tom Van Goethem, Wout Scheepers, Davy Preuveneers, and Wouter Joosen.** 2016. Accelerometer-based device fingerprinting for multi-factor mobile authentication. In *International Symposium on Engineering Secure Software and Systems*. Springer, 106–121.
46. **Rick Waldron.** 2019. Generic Sensor API. https://www.w3.org/TR/generic-sensor/. Accessed: 2021-02-10.
47. **Wardell Bagby.** 2021. Sensor Disabler - This Xposed module allows you to modify and disable various sensors on your device. https://github.com/wardellbagby/Sensor-Disabler. Accessed: 2021-08-10.
48. **Takuya Watanabe, Mitsuaki Akiyama, and Tatsuya Mori.** [n. d.]. RouteDetector: Sensor-based positioning system that exploits spatio-temporal regularity of human mobility. In *9th USENIX Workshop on Offensive Technologies (WOOT ’15)*.
49. **Robert Williams.** 2020. Facebook’s ad revenue rises 25% to record $20.7B. https://www.mobilemarketer.com/news/facebooks-ad-revenue-rises-25-to-record-207b/571362/. Accessed: 2020-10-28.
50. **xda developers.** 2021. A Magic Mask to alter System Systemless-ly. https://www.xda-developers.com/how-to-install-magisk/.
51. **Zhi Xu, Kun Bai, and Sencun Zhu.** 2012. Taplogger: Inferring user inputs on smartphone touchscreens using on-board motion sensors. In *Proceedings of the fifth ACM conference on Security and Privacy in Wireless and Mobile Networks*.
52. **Guangliang Yang, Abner Mendoza, Jialong Zhang, and Guofei Gu.** 2017. Precisely and scalably vetting JavaScript bridge in Android hybrid apps. In *International Symposium on Research in Attacks, Intrusions, and Defenses*. Springer, 143–166.
53. **Shuochao Yao, Shaohan Hu, Yiran Zhao, Aston Zhang, and Tarek Abdelzaher.** 2017. DeepSense: A unified deep learning framework for time-series mobile sensing data processing. In *Proceedings of the 26th International Conference on World Wide Web (WWW ’17)*. 351–360.
54. **Jiexin Zhang, Alastair Beresford, and Ian Sheret.** [n. d.]. SensorID: Sensor calibration fingerprinting for smartphones. In *2019 IEEE Symposium on Security and Privacy (SP)*.
55. **Zhe Zhou, Wenrui Diao, Xiangyu Liu, and Kehuan Zhang.** 2014. Acoustic fingerprinting revisited: Generate stable device ID stealthily with inaudible sound. In *Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 429–440.
56. **John Zulueta, Andrea Piscitello, Mladen Rasic, Rebecca Easter, Pallavi Babu, Scott A Langenecker, Melvin McInnis, Olusola Ajilore, Peter C Nelson, Kelly Ryan, et al.** 2018. Predicting mood disturbance severity with mobile phone keystroke metadata: A BiAffect digital phenotyping study. *Journal of Medical Internet Research* 20, 7 (2018).

### Appendix

#### A.1 Additional Technical Details

In our analysis, we used Nexus 5X devices running Google’s AOSP version 7.1.1 and the latest version of Chrome. Our framework installs and analyzes each application individually (e.g., install app, analyze, clear app data, and uninstall app). Additionally, we limit any other background app activities using the `adb` toolkit to avoid contamination from other apps. This is a common technique when dynamically analyzing Android apps (e.g., [8, 72, 85]).

**Network Interception:**
We intercepted network traffic using Mitmproxy’s transparent proxy option. Since apps by default do not trust the user trust store unless explicitly stated in the network security configuration, we installed Mitmproxy’s certificate into Android’s system store. This requires mounting the system partition as writable, adding Mitmproxy’s certificate, and updating the file’s permissions. This approach requires that the Android device is rooted; for Android versions 10 and 11, altering the system partition and inserting the Mitmproxy’s certificate in the system store requires Magisk [110]. Due to space constraints, we refer the reader to appropriate online tutorials (e.g., [96]). Furthermore, WebView for Android 7 - 9 is built into Chrome, and the latest version of Chrome no longer allows certificates whose validity is too long (e.g., `NET::ERR_CERT_VALIDITY_TOO_LONG`). As such, we changed the `DEFAULT_EXP_DUMMY_CERT` in Mitmproxy’s `certs.py` file accordingly and recompiled Mitmproxy.

**Certificate Pinning:**
Even though apps’ core functionality can implement certificate pinning to better protect network communication with their backend servers, we empirically found that our methodology for monitoring and intercepting WebViews’ ad-related network traffic was effective. Certificate pinning is inherently unsuitable for ad-network deployments due to the complexity of the ad ecosystem and the various entities involved during the process of rendering an advertisement, making it difficult to list all the domains that an embedded ad library should be able to reach. Recent work [78] found that many embedded ad libraries tend to weaken the app’s network security policies (e.g., asking developers to allow cleartext network communication).

**HTML5 WebAPIs:**
Table 7 provides a complete list of the HTML5 WebAPIs monitored by our system. This list is based on the functions that access and retrieve mobile-specific sensor data through the official mobile HTML5 WebAPI [40], as well as prior work on mobile sensors attacks and device tracking (e.g., [25, 34, 69]).

#### A.2 Ad Campaign - Ethical Considerations

This exploratory experiment aimed to provide an initial indication of whether any countermeasures exist against ads accessing sensor measurements. While this experiment did not collect any user or device data, it is important to detail the ethical considerations behind our experimental design and setup. When framing our experiment within the guidelines and conceptual framework provided by the Menlo and Belmont reports, the main dimension pertinent in our case is that of beneficence, which emphasizes that subjects should not be harmed and that any ethical research should strive to maximize potential benefits while minimizing probable harms. During our design phase, we assessed our experiment to ensure its ethical nature.

In more detail, our experiment involved an ad being delivered to users’ devices. The potential harms could stem from the ad adversely affecting the user’s device or exfiltrating personal data. However, our experiment did not incur any such harm. Our ad used the appropriate API calls to read sensor data but did not store or exfiltrate any data, nor did it attempt to infer user inputs or actions. As users come across numerous ads during their everyday browsing activities, we believe that showing them an ad does not deviate from their normal browsing experience.

Thus, our experiment did not pose any harm to users, and we believe the potential benefits of our research are substantial. We have identified a novel attack vector and a series of serious flaws that pose an important privacy threat to users. We hope our research will result in more attention from the wider research and developer communities and ultimately lead to changes in the underlying ecosystems and additional safeguards for protecting users.

1. The guideline of respect for persons, which revolves around informed consent, is not applicable in this scenario. Regarding the guideline of justice, all users were treated equally, and no additional burden was incurred by specific users. Additionally, any benefits resulting from this research will be equally distributed to all users.

### Table 7: Full List of WebAPIs Monitored by Our Framework

| WebAPI | Information |
| --- | --- |
| **Mobile-specific Sensor APIs** |  |
| Accelerometer | Provides acceleration applied to the device along all three axes. |
| Gyroscope | Provides the angular velocity of the device along all three axes. |
| AbsoluteOrientationSensor | Describes the device’s physical orientation regarding Earth’s reference coordinate system. |
| RelativeOrientationSensor | Describes the device’s physical orientation without regard to the Earth’s reference coordinate system. |
| `window.addEventListener('devicemotion')` | Fired at a regular interval, indicating the amount of physical force of acceleration the device is receiving. |
| `window.addEventListener('deviceorientation')` | Fired when new data is available about the current orientation (compared to the Earth’s coordinate frame). |
| `window.addEventListener('deviceorientationabsolute')` | Event handler containing information about an absolute device orientation change. |
| `window.addEventListener('deviceproximity')` | Provides information about the distance of a nearby physical object. |
| `window.addEventListener('userproximity')` | Provides a rough approximation of the distance, expressed through a boolean. |
| `window.addEventListener('devicelight')` | Provides information from photo sensors or similar detectors about ambient light levels near the device. |
| `window.addEventListener('orientationchange')` | Fired when the orientation of the device has changed. |
| `screenOrientation.addEventListener('change')` | Event handler fired when the screen changes orientation. |
| `screen.orientation.lock` | Locks the orientation of the containing document to its default orientation. |
| `screen.orientation.lockOrientation` | Locks the screen into a specified orientation. |
| `navigator.getBattery` | Provides information about the system’s battery. |
| `navigator.vibrate` | Pulses the vibration hardware on the device, if such hardware exists. |
| `navigator.geolocation.watchPosition` | Registers a handler function that will be called automatically each time the position of the device changes. |
| `navigator.geolocation.getCurrentPosition` | Gets the current position of the device. |
| **General WebAPIs** |  |
| `XMLHttpRequest.send` | The XMLHttpRequest method `send()` sends a request to the server. |
| `XMLHttpRequest.response` | The XMLHttpRequest `response` property returns the response’s body content. |
| `Date.prototype.getTimezoneOffset` | Returns the time zone difference, in minutes, from the current locale (host system settings) to UTC. |
| `HTMLCanvasElement.toDataURL` | Returns a URI containing a representation of the image in the format specified by the type parameter. |
| `HTMLCanvasElement.getContext` | Returns an object that provides methods and properties for drawing on the canvas. |
| `WebGLRenderingContext` | Interface to OpenGL ES 2.0 graphics rendering context for the drawing surface of a `<canvas>` element. |
| `Storage.setItem` | When passed a key name and value, will add (or update) that key to the given Storage object. |
| `Storage.getItem` | When passed a key name, will return that key’s value, or null if the key does not exist. |
| `Storage.removeItem` | When passed a key name, will remove that key from the given Storage object if it exists. |
| `Storage.key` | When passed a number n, returns the name of the nth key in a given Storage object. |
| `document.createElement('canvas')` | The HTML5 `<canvas>` tag is used to draw graphics, on the fly, with JavaScript. |
| `document.createElement('webgl')` | A different context of the `<canvas>` element. |

---

This optimized version of the text is more structured, coherent, and professional, making it easier to read and understand.