# 07 \| Kafka：如何分析一个软件的实现？你好！我是郑晔。上一讲，我们学习了如何看接口，今天我们进入第三个部分------看实现。在一个系统中，模型和接口是相对稳定的部分。但是，同样的模型和接口，如果采用不同的实现，稳定性、可扩展性和性能等诸多方面相差极大。而且，只有了解实现，你才有改动代码的基础。但是，不得不说，"看实现"是一个很大的挑战，因为有无数的细节在那里等着你。所以，在很多团队里，一个新人甚至会用长达几个月的时间去熟悉代码中的这些细节。面对这种情况，我们该怎么办呢？首先，你要记住一件事，你不太可能记住真实项目的所有细节，甚至到你离开项目的那一天，你依然会有很多细节不知道，可这并不妨碍你的工作。但是，如果你心中没有一份关于项目实现的地图，你就一定会迷失。像我前面所说的新人，他们用几个月的时间熟悉代码，就是在通过代码一点点展开地图，但是，这不仅极其浪费时间，也很难形成一个整体认知。所以我建议，你应该直接把地图展开。怎么展开呢？**你需要找到两个关键点：软件的结构和关键的技术。**可能你还不太理解我的意思，下面我就以开源软件 Kafka为例，给你讲一下如何把地图展开，去看一个软件的实现。按照我们之前讲过的思路，了解一个软件设计的步骤是"先模型，再接口，最后看实现"。所以，我们要先了解Kafka 的模型和接口。消息队列的模型与接口Kafka 是这么自我介绍的：Kafka是一个分布式流平台。这是它现在的发展方向，但在更多人的心目中，Kafka的角色是一个消息队列。可以说，消息队列是 Kafka这个软件的核心模型，而流平台显然是这个核心模型存在之后的扩展。所以，我们要先把焦点放在Kafka的核心模型------消息队列上。简单地说， 消息队列（MessagingQueue）是一种进程间通信的方式，发消息的一方（也就是生产者）将消息发给消息队列，收消息的一方（也就是消费者）将队列中的消息取出并进行处理。站在看模型的角度上，消息队列是很简单的，无非是生产者发消息，消费者消费消息。而且消息队列通常还会有一个topic的概念，用以区分发给不同目标的消息。消息队列的基本接口也很简单。以 Kafka为例，生产者是这样发消息的：    producer.send(new KafkaRecord<>("topic", new Message()));而消费者收消息是这样的：    ConsumerRecords records = consumer.poll(1000);有了对模型和接口的基本了解，我们会发现，消息队列本身并不难。但我们都知道，消息队列的实现有很多，Kafka 只是其中一种，还有诸如ActiveMQ、RabbitMQ等的实现。为什么会有这么多不同的消息队列实现呢？因为每个消息队列的实现都会有所侧重，不同的消息队列有其适用的场景。消息队列还有一个最常见的特性是，它会提供一定的消息存储能力。这样的话，当生产者发消息的速度快于消费者处理消息的速度时，消息队列可以起到一定的缓冲作用。所以，有一些系统会利用消息队列的这个特性做"削峰填谷"，也就是在消息量特别大时，先把消息收下来，慢慢处理，以减小系统的压力。Kafka之所以能从一众消息队列实现中脱颖而出，一个重要的原因就是，它针对消息写入做了优化，它的生产者写入速度特别快。从整体的表现上看，就是吞吐能力特别强。好，我们已经对 Kafka的能力有了一个初步的认识。显然，介绍接口和模型不足以将它与其他消息队列实现区分开来。所以，我们必须拉开大幕，开始去了解它的实现。软件的结构前面我提到，**当我们想去看一个软件的实现时，有两件事特别重要：软件的结构和关键的技术**。我们先来看软件的结构。软件的结构其实也是软件的模型，只不过，它不是整体上的模型，而是展开实现细节之后的模型。我在第 1 讲slate-object="inline"也说过，模型是分层的。对于每个软件来说，当你从整体的角度去了解它的时候，它是完整的一块。但当你打开它的时候，它就变成了多个模块的组合，这也是所谓"分层"的意义所在。而上一层只要使用下一层提供给它的接口就好。所以，当我们打开了一个层次，了解它的实现时，也要先从大处着手。最好的办法就是我们能够**找到一张结构图**，准确地了解它的结构。如果你能够找到这样一张图，你还是很幸运的。因为在真实的项目中，你可能会碰到各种可能性：1.  结构图混乱：你找到一张图，上面包含了各种内容。比如，有的是模块设计，有的是具体实现，更有甚者，还包括了一些流程；        2.  结构图复杂：一个比较成熟的项目，图上画了太多的内容。确实，随着项目的发展，软件解决的问题越来越多，它必然包含了更多的模块。但对于初次接触这个项目的我们而言，它就过于复杂了；        3.  无结构图：这是最糟糕的情况，你最好先想办法画出一张图来。        无论遇到上述的哪种情况，你了解项目都不会很顺利。所以，你还是要先了解模型和接口，因为它们永远是你的主线，可以帮你从混乱的局面中走出来。那么，假设现在你有了一张结构图，在我们继续前进之前，我想先问一个问题：现在你有了一张结构图，你打算做什么？你可能会问，难道不是了解它的结构吗？是，但不够。我们不仅要知道一个设计的结果，最好还要推断出**设计的动因**。所以，一种更好的做法是，带着问题上路。我们不妨假设自己就是这个软件的设计者，问问自己要怎么做。然后再去对比别人的设计，你就会发现，自己的想法和别人想法的相同或不同之处。对于理解Kafka 而言，第一个问题就是**如果你来设计一个消息队列，你会怎么做呢？**如果在网上搜索 Kafka的架构图，你会搜到各种各样的图，上面包含了不同的信息。有的告诉你分区（Partition）的概念，有的告诉你Zookeeper。根据前面对模型的介绍，我特意挑了一张看上去最简单的架构图，因为它最贴近消息队列的基础模型：![](Images/a537250d4c1332731257afc643704f0c.png)savepage-src="https://static001.geekbang.org/resource/image/ee/79/ee05f6c6446600da97d824591e5a4d79.jpg"}那么，从这个图中，你能看到什么呢？你能看到，Kafka的生产者一端将消息发送给 Kafka集群，然后，消费者一端将消息取出来进行处理。这样的结构和你想的是不是一样的呢？如果让你负责进一步设计，你会怎么做呢？1.  生产者端封装出一个    SDK，负责消息的发送；        2.  消费者端封装出一个    SDK，负责消息的接收；        3.  设计一个集群系统，作为生产者和消费者之间的连接。        然后，你就可以问自己更多的问题：1.  生产端如果出现网络抖动，消息没有成功发送，它要怎么重试呢？        2.  消费端处理完的消息，怎样才能保证集群不会重复发送呢？        3.  为什么要设计一个集群呢？要防止出现单点的故障，而一旦有了集群，就会牵扯到下一个问题，集群内的节点如何保证消息的同步呢？        4.  消息在集群里是怎么存储的？        5.  生产端也好，消费端也罢，如果一个节点彻底掉线，集群该怎么处理呢？        6.  ......        你有了更多的问题之后，你就会在代码里进行更深入地探索。你可以根据需要，打开对应模块，进一步了解里面的实现。比如，消息重发的问题，你就可以看看生产端是怎么解决这些问题的。当问题细化到具体实现时，我们就可以打开对应的源码，去里面寻找答案。从结构上来说，Kafka不是一个特别复杂的系统。所以，如果你的项目更复杂，层次更多，我建议你把各个层次逐一展开，先把整体结构放在心中，再去做细节的探索。关键的技术我们再来看看理解实现的另一个重要方面：关键技术。什么算是关键技术呢？就是能够让这个软件的"实现"与众不同的地方。了解关键技术可以保证一点，就是我们对代码的调整不会使项目出现明显的劣化。幸运的是，大多数项目都会愿意把自己的关键技术讲出来，所以，找到这些信息并不难。以 Kafka为例，前面说过，它针对写入做了优化，使得它的整体吞吐能力特别强。那它是怎么做到的呢？消息队列实现消息存储的方式通常是把它写入到磁盘中，而 Kafka的不同之处在于，它利用了**磁盘顺序读写**的特性。对于普通的机械硬盘而言，如果是随机写，需要按照机械硬盘的方式去寻址，然后磁头做机械运动，写入速度就会慢得多。但顺序写的话，会大幅度减少磁头的运动，效率自然就得到了大幅度的提高。之所以可以这样实现，是充分利用了消息队列本身的特性：有序。它是技术实现与需求完美结合的产物。有了这个基础，就可以有进一步的优化。比如，利用内存映射文件减少用户空间到内核空间复制的开销。如果站在了解实现的角度，你会觉得非常地自然。但要想从设计的角度学到更多，我们还是应该带着问题上路，多问自己一个问题，为什么其他的消息队列之前不这么做呢？这是一个值得深思的问题。**Kafka这个实现到底是哪里不容易想到呢？答案是软硬结合。**之前的消息队列实现也会把消息写入到文件里，但文件对它们来说，只是一个通用的接口。开发者并没有想过利用硬件的特性做开发。而Kafka的开发者突破了这个限制，把硬件特性利用了起来，从而取得了更好的结果。一旦理解了这一点，我们再来看其他的一些设计，就能学到更多的东西。比如，有一个著名的开源项目LMAX Disruptorslate-object="inline"，它号称是最强劲的线程通信库。它有一段非常奇怪的代码，类似这样：    protected long p1, p2, p3, p4, p5, p6, p7;以正常程序员的标准，这简直是无厘头的低劣代码。而想要理解这段代码，你必须理解CPU缓存行的机制，这也是一种软硬结合的思路。对于习惯写"软"件的程序员而言，在软件上投入的努力到达极限时，软硬结合是一种思路上的突破。当然，这种突破的前提是要对硬件的机制有所了解，这往往是很多程序员在基本功上欠缺的，可以学习一下计算机组成原理之类的课程。如果你有时间去学习，《深入理解计算机系统slate-object="inline"》一书值得一读。总结时刻今天是了解设计的第三部分：看实现。理解一个实现，是以对模型和接口的理解为前提的。每个系统的实现都有非常多的细节，我们不可能一上来就把所有的细节吃透。如果想了解一个系统的实现，应该从**软件结构**和**关键技术**两个方面着手。无论是软件结构，还是关键技术，我们都需要带着自己的问题入手，而问题的出发点就是我们对模型和接口的理解。了解软件的结构，其实，就是把分层的模型展开，看下一层的模型。一方面，你要知道这个层次给你提供了怎样的模型，另一方面，你要带着自己的问题去了解这些模型为什么要这么设计。最后，我借着 Kafka的关键技术还给你讲了**软硬结合**的思路，在系统优化之路上寻求突破时，可以增加你选择的道路。不过，实现都是有约束的，比如，Kafka的实现主要是针对机械硬盘做的优化，现在的 SSD硬盘越来越多，成本越来越低，这个立意的出发点已经不像以前那样稳固了。至此，了解设计的三步我们已经全部走完了。接下来，我们就要开始自己的设计历程了。首先，我们需要掌握一些关于设计的基础知识。下一讲，我们就从最基础的部分入手，我们来谈谈程序设计语言。如果今天的内容你只能记住一件事，那请记住：**理解实现，带着自己的问题，了解软件的结构和关键的技术。**![](Images/34bd0c18614d4903e99b1e9161342bdd.png)savepage-src="https://static001.geekbang.org/resource/image/29/ef/29c6a18e1e1313ff0e6c7aad3642f3ef.jpg"}思考题最后，我想请你来思考一下，在项目上学习的哪些东西对你个人在实现思路上有了一个极大的突破。欢迎在留言区分享你的经历。感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。
# 08 \| 语言的模型：如何打破单一语言局限，让设计更好地落地？你好！我是郑晔。 经过前面几讲，我们已经学习了如何去了解一个现有软件的设计。从这一讲开始，我们就进入到新的模块，讨论如何设计一个软件。做设计之前，我们要先知道手边有哪些工具。所以在这个模块开启之初，我们先来讨论程序设计语言。 或许你会觉得，程序设计语言有啥好讨论的？哪个程序员没有一门看家的程序设计语言呢？不知道你是否遇到过这样的问题： 1.  面向对象用来组织程序是好，但我用的是 C    语言；    2.  我用的是    C++，函数式编程的好，跟我有什么关系；        3.  动态语言那些特性很好，可惜我用的是    Java；    4.  ......        如果你这么想，说明你被自己的看家本事给局限住了，这种思维方式会让你即便学到了更多的好东西，也只能无可奈何。 其实，程序设计语言之间没有那么泾渭分明的界限，程序员唯有多学习几门语言，才能打破语言的局限，让设计更好地落地。你可以根据项目特点选择合适的语言，也可以将其它语言一些优秀的地方借鉴过来。AndrewHunt 和 David Thomas 在《程序员修炼之道》（The PragmaticProgrammer）中给程序员们提了一项重要的建议：**每年至少学习一门新语言。** 可是，语言那么多，我要一个一个都学过去吗？学语言到底在学什么呢？ 其实，程序设计语言本身也是一个软件，它也包含模型、接口和实现。而**我们学习程序设计语言主要是为了学习程序设计语言提供的编程模型**，比如：不同的程序组织方式，不同的控制结构等等。因为不同的编程模型会带给你不同的思考方式。 既然要学习编程模型，我们就要先知道编程模型设计的来龙去脉，所以，今天我先带你领略一下程序设计语言的发展历程。 程序设计语言发展简史我们今天接触到的程序设计语言都是图灵完备的。这里的"图灵完备"指的是语言指定的数据操作规则能够实现图灵机的全部功能（图灵机的概念是由阿兰·图灵提出的，图灵机为计算机能够解决的问题划定了一个边界）。所以，图灵机是所有程序设计语言最底层的模型，程序设计语言都是在这个基础上生长出来的，包括众所周知的计算机基础：用0 和 1 编码。 我们今天的计算机能够识别的都是 0 和 1，但真正用 0 和 1直接写代码的人少之又少，因为实在太麻烦了。所以，早在计算机诞生之初，就产生了**汇编语言**，它可以将那些 0101 的操作符变成更容易记住的 ADD、MOV之类的指令。 相比于 01串，汇编虽然进步了一些，但人们很快就发现，用汇编写程序也是非常痛苦的事情，因为只有对计算机了如指掌，才能写好汇编。更可怕的是，即便你熟练掌握了一种计算机的汇编语言，换成另外一种计算机，你也必须从头学过。 这时，就轮到**高级程序设计语言**登场了。 第一门被广泛使用的高级程序设计语言是Fortran，它为程序设计语言的发展奠定了基础。比如，一些基本控制结构出现了，数据开始拥有了类型（类型就是一种对内存数据的解释方式）。虽然这些东西在今天看来非常简单，但和那个年代使用的汇编相比，简直是一个巨大的飞跃。 Fortran对于计算机的发展起到了巨大的推动作用，人们也逐渐认识到高级程序设计语言对于开发效率的提高。接下来，人们开发了各种高级程序设计语言，不断地探索怎样写好程序。 早期程序设计语言探索的集大成者就是 **C语言**，它提供了对于计算机而言最为恰当的抽象，屏蔽了计算机硬件的诸多细节。时至今日，C语言依然受众广泛。 随着高级程序设计语言的发展，门槛逐步降低，人们可以开发的程序规模也逐渐膨胀。这时候，**如何组织程序**成了新的挑战。有一种语言搭着 C语言的便车将面向对象的程序设计风格带入了主流视野，这就是C++。很长一段时间内，C++ 成为了行业中最主流的选项，既兼容 C语言，又提供了很好的程序组织方式。 虽然各种高级程序设计语言已经屏蔽了很多细节，但有一个问题始终没有得到很好的解决，也由此引发了更多的问题，这就是**内存管理**。其实，人们早就在尝试各种屏蔽内存管理的方式，但因为早期计算机硬件性能有限，所以没有任何一种方式能够成为行业主流。 后来，计算机硬件的能力得到了大幅度提升，这让那些在故纸堆里的技术又焕发了新的活力。这个阶段的胜利者是Java，一方面，它支持面向对象编程；另一方面，它还有垃圾回收机制------一种内存管理的方式。 Java的路其实也很坎坷，因为它早期在个人电脑上的尝试并不算成功。后来选择了企业级开发的赛道，才有机会展现自己的优势。因为企业级服务器本身性能优于个人电脑，对Java有更高的容忍度，它才得到了机会，不断进行自身的优化。 当硬件不再是程序设计语言的发展障碍之后，程序设计语言又该如何发展呢？ 从前面的历程不难看出，程序设计语言的发展就是一个"逐步远离计算机硬件，向着待解决的问题靠近"的过程。所以，程序设计语言接下来的发展方向就是**探索怎么更好地解决问题**了。 前面说的这些只是程序设计语言发展的主流路径，其实还有一条不那么主流的路径也一直在发展，就是**函数式编程的程序设计语言**，这方面的代表就是LISP。 在这条路上，刚开始，很多人都是偏学术风格的，他们更关心的是解决方案是否优雅，也就是说，如何解决问题，如何一层层构建抽象。他们也探索更多的可能，垃圾回收机制就是从这里来的。但同样受限于当时硬件的性能，这条路上的探索在很长一段时间之内都只是一个小众游戏。 当硬件的性能不再成为阻碍，如何解决问题开始变得越来越重要时，函数式编程终于和程序设计语言发展的主流汇合了。促进函数式编程引起广泛重视也还有一个硬件因素：**多核**。 多核的出现，本身是 IT 行业应对 CPU发展进入瓶颈期的一个解决方案，但它却打破了很多程序员只习惯于利用一个 CPU写程序的传统方式。 为了利用多核的优势，人们探索了各种方案，今天看到的各种并发模型、异步模型等解决方案都从那时开始得到了蓬勃的发展。函数式编程在这个方面的探索就是利用自己声明式的表达方式屏蔽了硬件差异。让人们注意到函数式编程的价值的就是著名的MapReduce。 函数式编程的兴起，让那些在函数式编程社区的探索随之兴起，比如，声明式编程、DSL、元编程等等。一些后出现的程序设计语言开始将面向对象和函数式编程二者融合起来，比如Scala。而像 Java 和 C++这些"老战士"则逐渐地将函数式编程的支持加入到语言之中。 相比于这些"正规军"，还有一股力量也逐渐从边缘走上了舞台，这就是**动态语言**，代表语言有 Perl、Python、Ruby、PHP等等。以前，人们更喜欢用"脚本语言"称呼这类程序设计语言，这个名字表明，它就是为了简单地解决一些特定的问题而出现的。所以，在人们心目中，它们显得并不那幺正式。但它们简单、轻巧的特性有效地降低了入门的门槛，也赢得了一大批拥趸。 **语言的发展就是一个互相学习和借鉴的过程**。以前，动态语言的弱项在于不适用于规模比较大的工程，而近些年来，随着动态语言用户的增多，配套的工具也逐渐多了起来，动态语言项目的规模也逐渐增大。而在主航道的程序设计语言，也纷纷向动态语言学习，努力地简化代码编写的难度，比如，Java和 C++ 都开始支持类型推演（TypeInference），目的就是让程序员少敲几个字符。 至此，我简单地带你回顾了一下程序设计语言的发展历程，梳理了程序设计语言的发展脉络。从中不难看出，如果把程序设计语言当作一个软件，它的发展历程就是一个逐渐添加新模型的过程，而其发展的结果就是如今的开发门槛越来越低，能够开发的程序规模越来越大。 一切语法都是语法糖现在，你已经能更好地理解我们在前面提出的说法，**学习程序设计语言其实就是要学习语言提供的编程模型。** 以我学过的一些程序设计语言为例： 1.  C    语言提供了对汇编指令直接的封装。        2.  C++    先是提供了面向对象，后来又提供了泛型编程。        3.  Java 把内存管理从开发者面前去掉了，后来引入的 Annotation    可以进行声明式编程。        4.  Ruby 提供了动态类型，以及由 Ruby on Rails 引导出的 DSL    风格。    5.  Scala 和 Clojure    提供了函数式编程。        6.  Rust 提供了新的内存管理方式，而 Libra 提供的 Move    语言则把它进一步抽象成了资源的概念。        既然学习新的程序设计语言是为了学习新的编程模型，反过来也可以说，**不提供新编程模型的语言是不值得刻意学习的**。如果你已经学会了一两门程序设计语言，学习一门新的语言其实并不困难，因为每种语言提供的新模型是有限的，基本的元素是类似的，无非是用了不同的关键字。 所以，学习新语言，只是在做增量的学习，思维负担并没有那么沉重。一旦对于程序设计语言的模型有了新的认识，你就能理解一件事：**一切语法都是语法糖**。 语法糖（Syntacticsugar）是英国计算机科学家彼得·兰丁发明的一个术语，指的是那些为了方便程序员使用的语法，它对语言的功能没有影响。 懂得了语法糖的道理，要想更好地理解程序设计语言，一种好的做法就是打开语法糖，了解一下语法是怎么实现的： 1.  类型是一种对内存的解释方式。        2.  class/struct    是把有相关性的数据存放到一起的一种数据组织方式。        3.  Groovy、Scala、Kotlin、Clojure 等 JVM    上的新语言，提供了一种不同于 Java 的封装 JVM    的方式。    4.  ......        通过前面的介绍，你也看到了，语言的发展并非一蹴而就，而是一个渐进式的发展历程。一些新的尝试总会在一些不起眼的地方冒出来，而且语言之间也在相互借鉴。 如果你能每年学习一门新语言，起初，你可以了解不同的编程模型。当你的积累足够多了，学习语言就是在跟踪程序设计语言的最新发展了。 **当你手里有了足够多的"武器"时，你就可以打开思路，运用不同的方式解决问题了**，甚至把其它语言的好东西，借鉴到自己使用的语言中。 总结时刻今天，我们谈到了程序设计语言。学习不同的程序设计语言可以帮助我们更好地落地设计，也可以让我们向不同的语言借鉴优秀的方面。 我们简要地了解了程序设计语言的发展历史，从最开始的对机器模型的封装，到今天不断降低的开发门槛，程序设计语言的演化从未停止。我们也看到各种不同的编程风格在经历了最初各自独立的发展之后，开始慢慢融合。 对程序设计语言发展的了解，可以帮助我们理解一件事：**一切语法都是语法糖**。新的语法通常是在既有的结构上不断添加出来的，为的是简化代码的编写。 《程序员修炼之道》鼓励程序员们每年至少学习一门新语言，主要是为了让我们去学习新的编程模型，而不提供新编程模型的语言不值得刻意去学习。 不过，这就需要你对程序设计语言有着更深的理解。下一讲，我们来看程序设计语言的接口，看看更具体的语言演化是如何发生的。 如果今天的内容你只能记住一件事，那请记住：**每年至少学习一门能够提供新编程模型的程序设计语言。** ![](Images/aaa68bd2e0f72aef887b8b82d0b0d15c.png)savepage-src="https://static001.geekbang.org/resource/image/e9/ad/e9b1ccd6cdb75768cf8070fa60e2ecad.jpg"}思考题最后，我想请你分享一下，你最近打算学习哪门新的程序设计语言呢？为什么？欢迎在留言区分享你的想法。 感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。 