only checked at system API calls. This suffices to block exploita-
tion of developer-unintended features, but not abusable developer-
intended functionalities.
7.3 Partial Evaluation
Partial evaluation [40] is a program analysis and transformation
that specializes code designed to accommodate many inputs to
instead accommodate only a specific subset of possible inputs. This
can have the effect of shrinking and optimizing the code, at the
expense of deriving code of less generality. Although partial evalu-
ation has traditionally only been applied to source code programs,
recent work has applied it to de-bloat native codes without sources.
WiPEr [27, 75] lifts Intel IA-32 native code to CodeSurfer/x86 in-
termediate form [9], converts it to a quantifier-free bit-vector logic
amenable to specialization, and then synthesizes specialized native
code using McSynth [76]. While the approach is promising, it is
currently only applicable to relatively small binary programs with
clearly demarcated inputs, such as integers. Larger inputs, such
as string command-lines or user-interactive behaviors, prevent
the slicing algorithm from effectively extracting and eliminating
concept-irrelevant portions of the code automatically.
7.4 Abnormal Behavior Detection
Our approach to learning CCFG policies from traces is a form of
anomaly-based intrusion detection, which also has security appli-
cations for malware detection and software behavior prediction.
7.4.1 Malware Detection and Code Reuse. Static and dynamic anal-
yses are both used in modern malware detection. Static analysis
can be based on source code or binaries, and does not use any run-
time information. For example, Apposcopy [30] uses static taint
analysis and inter-component call graphs to match applications
with malware signatures specified in a high level language that de-
scribes semantic characteristics of malware. Static code analysis for
malware detection has been proved to be undecidable in general, as
witnessed by opaque constants [53], which can obfuscate register-
load operations from static analyses. As a result, most of the recent
works in this genre use dynamic or hybrid static-dynamic analyses
(e.g., [7, 41, 62]). As an example of dynamic analysis, Crowdroid [15]
uses system calls, information flow tracking, and network moni-
toring to detect malware and trojans as they are being executed.
TaintDroid [28] is another Android application that constantly
monitors the system and detects leaks of user-sensitive information
using dynamic taint analysis.
Software Behavior Prediction. Prior works have leveraged
7.4.2
machine learning to classify program traces. Markov models trained
on execution traces can learn a classifier of program behaviors [13].
Random forests are another effective technique [34]. Software be-
havioral anomalies have also be identified via intra-component
CFGs constructed from templates mined from execution traces [56].
Recent work has also applied clustering of input/output pairs and
their amalgamations for this purpose [6]. Our approach adopts a
decision tree forest model because of its efficient implementation
as in-lined native code (see §4) and its amenability to relaxation
and specialization at control-flow transfer points (see §3.2).
8 CONCLUSION
Control-flow trimming is the first work to offer an automated,
source-free solution for excluding developer-intended but con-
sumer-unwanted functionalities expressible as CCFGs from binary
software products with complex input spaces, such as command-
lines, files, user interactivity, or data structures. Using only traces
that exercise consumer-desired behaviors, the system learns a con-
textual CFG policy that whitelists desired semantic features, and in-
lines an enforcement of that policy in the style of context-sensitive
CFI into the target binary. A prototype implementation for Intel x86-
64 native code architectures exhibits low runtime overhead (about
1.87%) and high accuracy (zero misclassifications) for training sets
as small as 100–500 samples). Experiments on real-world software
demonstrate that control-flow trimming can eliminate zero-day
vulnerabilities associated with consumer-unwanted features, and
resist control-flow hijacking attacks based on code-reuse.
ACKNOWLEDGMENTS
The research reported herein was supported in part by ONR Award
N00014-17-1-2995, NSF Award #1513704, and an endowment from
the Eugene McDermott family.
REFERENCES
[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-flow
Integrity. In Proc. 12th ACM Conf. Computer and Communications Security (CCS).
340–353.
[2] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2009. Control-flow
Integrity Principles, Implementations, and Applications. ACM Trans. Information
and System Security (TISSEC) 13, 1 (2009).
[3] Tigist Abera, N. Asokan, Lucas Davi, Jan-Erik Ekberg, Thomas Nyman, Andrew
Paverd, Ahmad-Reza Sadeghi, and Gene Tsudik. 2016. C-FLAT: Control-flow
Attestation for Embedded Systems Software. In Proc. 23rd ACM Conf. Computer
and Communications Security (CCS). 743–754.
[4] Periklis Akritidis, Cristian Cadar, Costin Raiciu, Manuel Costa, and Miguel Castro.
2008. Preventing Memory Error Exploits with WIT. In Proc. 29th IEEE Sym.
Security & Privacy (S&P). 263–277.
[5] Mahmoud Al-Qudsi. 2017. Will AMD’s Ryzen Finally Bring SHA Extensions to
Intel’s CPUs? NeoSmart Technologies (2017).
[6] Rafig Almaghairbe and Marc Roper. 2017. Separating Passing and Failing Test
Executions by Clustering Anomalies. Software Quality J. 25, 3 (2017), 803–840.
[7] Blake Anderson, Daniel Quist, Joshua Neil, Curtis Storlie, and Terran Lane. 2011.
Graph-based Malware Detection Using Dynamic Analysis. J. Computer Virology
7, 4 (2011), 247–258.
http://httpd.apache.org/docs/current/
[8] Apache. 2019. Apache benchmark.
programs/ab.html.
[9] Gogul Balakrishnan, Radu Gruian, Thomas Reps, and Tim Teitelbaum. 2005.
CodeSurfer/x86. In Proc. 14th Int. Conf. Compiler Construction (CC). 250–254.
[10] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazières, and Dan Boneh.
2014. Hacking Blind. In Proc. 35th IEEE Sym. Security & Privacy (S&P). 227–242.
[11] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump-
oriented Programming: A New Class of Code-reuse Attacks. In Proc. 6th ACM
Sym. Information, Computer and Communications Security (ASIACCS). 30–40.
[12] Dimitar Bounov, Rami Gökhan Kici, and Sorin Lerner. 2016. Protecting C++
Dynamic Dispatch Through VTable Interleaving. In Proc. 23rd Annual Network &
Distributed System Security Sym. (NDSS).
[13] James F. Bowring, James M. Rehg, and Mary Jean Harrold. 2004. Active Learning
for Automatic Classification of Software Behavior. In Proc. ACM SIGSOFT Int.
Sym. Software Testing and Analysis (ISSTA). 195–205.
[14] Derek L. Bruening. 2004. Efficient, Transparent, and Comprehensive Runtime
Code Manipulation. Ph.D. Dissertation. Massachusetts Institute of Technology,
Cambridge, MA, USA.
[15] Iker Burguera, Urko Zurutuza, and Simin Nadjm-Tehrani. 2011. Crowdroid:
Behavior-based Malware Detection System for Android. In Proc. 32nd IEEE Sym.
Security & Privacy (S&P). 15–26.
[16] Nathan Burow, Derrick McKee, Scott A. Carr, and Mathias Payer. 2018. CFIXX:
Object Type Integrity for C++. In Proc. 25th Annual Network & Distributed System
Security Sym. (NDSS).
[17] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R.
Gross. 2015. Control-flow Bending: On the Effectiveness of Control-flow Integrity.
In Proc. 24th USENIX Security Sym. 161–176.
Modern Defenses. In Proc. 23rd USENIX Security Sym. 385–399.
[19] Dominique Chanet, Bjorn De Sutter, Bruno De Bus, Ludo Van Put, and Koen De
Bosschere. 2005. System-wide Compaction and Specialization of the Linux
[18] Nicholas Carlini and David Wagner. 2014. ROP is Still Dangerous: Breaking
Kernel. In Proc. ACM SIGPLAN/SIGBED Conf. Languages, Compilers, and Tools for
Embedded Systems (LCTES). 95–104.
[20] Yueqiang Cheng, Zongwei Zhou, Yu Miao, Xuhua Ding, and Huijie Robert Deng.
2014. ROPecker: A Generic and Practical Approach for Defending Against ROP
Attacks. In Proc. 21st Annual Network & Distributed System Security Sym. (NDSS).
[21] Frederick B. Cohen. 1993. Operating System Protection Through Program Evolu-
tion. Computer Security 12, 6 (1993), 565–584.
[22] Lucas Davi, Ra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten Holz, Ralf
Hund, Stefan Nürnberger, and Ahmad-Reza Sadeghi. 2012. MoCFI: A Framework
to Mitigate Control-flow Attacks on Smartphones. In Proc. 19th Annual Network
& Distributed System Security Sym. (NDSS).
[23] Lucas Davi, Matthias Hanreich, Debayan Paul, Ahmad-Reza Sadeghi, Patrick
Koeberl, Dean Sullivan, Orlando Arias, and Yier Jin. 2015. HAFIX: Hardware-
assisted Flow Integrity Extension. In Proc. 52nd Annual Design Automation Conf.
(DAC).
[24] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z. Snow, and
Fabian Monrose. 2015.
Isomeron: Code Randomization Resilient to (Just-in-
Time) Return-oriented Programming. In Proc. 22nd Annual Network & Distributed
System Security Sym. (NDSS).
[25] Baden Delamore and Ryan K.L. Ko. 2015. A Global, Empirical Analysis of the
Shellshock Vulnerability in Web Applications. In Proc. 1st IEEE Int. Workshop
Trustworthy Software Systems (TrustSoft).
[26] Ren Ding, Chenxiong Qian, Chengyu Song, William Harris, Taesoo Kim, and
Wenke Lee. 2017. Efficient Protection of Path-sensitive Control Security. In Proc.
26th USENIX Security Sym.
[27] Evan Driscoll and Tom Johnson. 2016. Lean and Efficient Software: Whole-Program
Optimization of Executables. Technical Report. GrammaTech.
[28] William Enck, Peter Gilbert, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung,
Patrick McDaniel, and Anmol N. Sheth. 2010. TaintDroid: An Information-flow
Tracking System for Realtime Privacy Monitoring on Smartphones. In Proc.
USENIX Sym. Operating Systems Design and Implementation (OSDI). 393–407.
[29] Úlfar Erlingsson, Martín Abadi, Michael Vrable, Mihai Budiu, and George C.
Necula. 2006. XFI: Software Guards for System Address Spaces. In Proc. USENIX
Sym. Operating Systems Design and Implementation (OSDI). 75–88.
[30] Yu Feng, Saswat Anand, Isil Dillig, and Alex Aiken. 2014. Apposcopy: Semantics-
based Detection of Android Malware Through Static Analysis. In Proc. 22nd ACM
SIGSOFT Sym. Foundations of Software Engineering (FSE). 576–587.
[31] Robert Gawlik, Benjamin Kollenda, Philipp Koppe, Behrad Garmany, and
Thorsten Holz. 2016. Enabling Client-side Crash-resistance to Overcome Diver-
sification and Information Hiding. In Proc. 23rd Annual Network & Distributed
System Security Sym. (NDSS).
[32] Enes Göktaş, Elias Athanasopoulos, Michalis Polychronakis, Herbert Bos, and
Georgios Portokalidis. 2014. Size Does Matter: Why Using Gadget-chain Length
to Prevent Code-reuse Attacks is Hard. In Proc. 23rd USENIX Security Sym. 417–
432.
[33] Zhongshu Gu, Brendan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. 2014.
Face-Change: Application-driven Dynamic Kernel View Switching in a Virtual
Machine. Proc. 44th Annual IEEE/IFIP Int. Conf. Dependable Systems and Networks
(DSN), 491–502.
[34] Murali Haran, Alan Karr, Alessandro Orso, Adam Porter, and Ashish Sanil. 2005.
Applying Classification Techniques to Remotely-collected Program Execution
Data. In Proc. 10th European Software Engineering Conf. (ESEC). 146–155.
[35] Haifeng He, Saumya K. Debray, and Gregory R. Andrews. 2007. The Revenge of
the Overlay: Automatic Compaction of OS Kernel Code via On-demand Code
Loading. In Proc. 7th ACM/IEEE Int. Conf. Embedded Software (EMSOFT). 75–83.
[36] Kihong Heo, Woosuk Lee, Pardis Pashakhanloo, and Mayur Naik. 2018. Effective
Program Debloating via Reinforcement Learning. In Proc. 25th ACM SIGSAC Conf.
Computer and Communications Security (CCS). 380–394.
[37] Andrei Homescu, Michael Stewart, Per Larsen, Stefan Brunthaler, and Michael
Franz. 2012. Microgadgets: Size Does Matter in Turing-Complete Return-oriented
Programming. In Proc. 6th USENIX Workshop Offensive Technologies (WOOT). 64–
76.
[38] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William R.
Harris, Taesoo Kim, and Wenke Lee. 2018. Enforcing Unique Code Target Property
for Control-Flow Integrity. In Proc. 25th ACM Conf. Computer and Communications
Security (CCS). 1470–1486.
[39] Intel. 2019. Intel 64 and IA-32 Architectures Optimization Reference Manual. In-
tel Corporation, Chapter 2.6.3: Intel Microarchitecture Code Name Nehalem:
Execution Engine.
[40] Neil D. Jones, Carsten K. Gomard, and Peter Sestoft. 1993. Partial Evaluation and
Automatic Program Generation. Prentice Hall International.
[41] Clemens Kolbitsch, Paolo Milani Comparetti, Christopher Kruegel, Engin Kirda,
Xiaoyong Zhou, and XiaoFeng Wang. 2009. Effective and Efficient Malware
Detection at the End Host. In Proc. 18th USENIX Security Sym. 351–366.
[42] Anil Kurmus, Sergej Dechand, and Rüdiger Kapitza. 2014. Quantifiable Run-Time
Kernel Attack Surface Reduction. In Detection of Intrusions and Malware, and
Vulnerability Assessment (DIMVA). 212–234.
[43] Anil Kurmus, Alessandro Sorniotti, and Rüdiger Kapitza. 2011. Attack Surface
Reduction for Commodity OS Kernels: Trimmed Garden Plants May Attract Less
Bugs. In Proc. 4th European Workshop System Security (EUROSEC).
[44] Anil Kurmus, Reinhard Tartler, Daniela Dorneanu, Bernhard Heinloth, Valentin
Rothberg, Andreas Ruprecht, and Daniel Lohmann. 2013. Attack Surface Metrics
and Automated Compile-Time OS Kernel Tailoring. In Proc. 20th Network and
Distributed System Security Sym. (NDSS).
[45] Che-Tai Lee, Zeng-Wei Rong, and Jim-Min Lin. 2003. Linux Kernel Customization
for Embedded Systems by using Call Graph Approach. In Proc. 6th Asia and South
Pacific Design Automation Conf. (ASP-DAC). 689–692.
[46] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
Building Customized Program Analysis Tools with Dynamic Instrumentation. In
Proc. 26th ACM Conf. Programming Language Design and Implementation (PLDI).
190–200.
[47] Anirban Majumdar and Clark Thomborson. 2005. Securing Mobile Agents Control
Flow Using Opaque Predicates. In Proc. 9th Int. Conf. Knowledge-based Intelligent
Information and Engineering Systems (KES). 1065–1071.
[48] Gregory Malecha, Ashish Gehani, and Natarajan Shankar. 2015. Automated
Software Winnowing. In Proc. 30th Annual ACM Sym. Applied Computing (SAC).
1504–1511.
[49] Ali José Mashtizadeh, Andrea Bittau, Dan Boneh, and David Mazières. 2015.
CCFI: Cryptographically Enforced Control Flow Integrity. In Proc. 22nd ACM
Conf. Computer and Communications Security (CCS). 941–951.
[50] Stephen McCamant and Greg Morrisett. 2006. Evaluating SFI for a CISC Archi-
tecture. In Proc. 15th USENIX Security Sym.
[51] Shachee Mishra and Michalis Polychronakis. 2018. Shredder: Breaking Exploits
Through API Specialization. In Proc. 34th Annual Computer Security Applications
Conf. (ACSAC). 1–16.
[52] Vishwath Mohan, Per Larsen, Stefan Brunthaler, Kevin W. Hamlen, and Michael
Franz. 2015. Opaque Control-flow Integrity. In Proc. 22nd Annual Network &
Distributed System Security Sym. (NDSS).
[53] Andreas Moser, Christopher Kruegel, and Engin Kirda. 2007. Limits of Static Anal-
ysis for Malware Detection. In Proc. 23rd Annual Computer Security Applications
Conf. (ACSAC). 421–430.
[54] Collin Mulliner and Matthias Neugschwandtner. 2015. Breaking Payloads with
Runtime Code Stripping and Image Freezing. Black Hat USA.
[55] Paul Muntean, Matthias Fischer, Gang Tan, Zhiqiang Lin, Jens Grossklags, and
Claudia Eckert. 2018. τ CFI: Type-Assisted Control Flow Integrity for x86-64
Binaries. In Proc. 21st Sym. Research in Attacks, Intrusions, and Defenses (RAID).
423–444.
[56] Animesh Nandi, Atri Mandal, Shubham Atreja, Gargi B. Dasgupta, and Subhrajit
Bhattacharya. 2016. Anomaly Detection Using Program Control Flow Graph
Mining From Execution Logs. In Proc. 22nd ACM SIGKDD Int. Conf. Knowledge
Discovery and Data Mining (KDD). 215–224.
[57] Ben Niu and Gang Tan. 2013. Monitor Integrity Protection with Space Efficiency
and Separate Compilation. In Proc. 20th ACM Conf. Computer and Communications
Security (CCS). 199–210.
[58] Ben Niu and Gang Tan. 2014. Modular Control-flow Integrity. In Proc. 35th ACM
Conf. Programming Language Design and Implementation (PLDI). 577–587.
[59] Ben Niu and Gang Tan. 2014. RockJIT: Securing Just-in-Time Compilation
Using Modular Control-flow Integrity. In Proc. 21st ACM Conf. Computer and
Communications Security (CCS). 1317–1328.
[60] Ben Niu and Gang Tan. 2015. Per-input Control-flow Integrity. In Proc. 22nd
ACM Conf. Computer and Communications Security (CCS). 914–926.
[61] Vasilis Pappas, Michalis Polychronakis, and Angelos D. Keromytis. 2013. Trans-
parent ROP Exploit Mitigation Using Indirect Branch Tracing. In Proc. 22nd
USENIX Security Sym. 447–462.
[62] Younghee Park, Douglas S. Reeves, and Mark Stamp. 2013. Deriving Common
Malware Behavior Through Graph Clustering. Computers & Security 39 (2013),
419–430.
[63] Mathias Payer, Antonio Barresi, and Thomas R. Gross. 2015. Fine-grained Control-
flow Integrity Through Binary Hardening. In Proc. 12th Int. Conf. Detection of
Intrusions and Malware, and Vulnerability Assessment (DIMVA). 144–164.
[64] Anh Quach, Aravind Prakash, and Lok-Kwong Yan. 2018. Debloating Software
through Piece-Wise Compilation and Loading. In USENIX Security Sym. 869–886.
[65] Eric Steven Raymond. 2003. The Art of Unix Programming. Addison-Wesley, 313.
[66] Giampaolo Rodola’. 2018. pyftpdlib. https://github.com/giampaolo/pyftpdlib.
[67] Jonathan Salwan. 2018. ROPgadget Tool. https://github.com/JonathanSalwan/
ROPgadget. Retrieved 5/6/2018.
[68] Fred B. Schneider. 2000. Enforceable Security Policies. ACM Trans. Information
and System Security (TISSEC) 3, 1 (2000), 30–50.
[69] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza
Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming. In
Proc. 36th IEEE Sym. Security & Privacy (S&P). 745–762.
[70] Edward J. Schwartz, Thanassis Avgerinos, and David Brumley. 2011. Q: Exploit
Hardening Made Easy. In Proc. 20th USENIX Security Sym.
Information Leaks
[71] Jeff Seibert, Hamed Okhravi, and Eric Söderström. 2014.
Without Memory Disclosures: Remote Side Channel Attacks on Diversified Code.
In Proc. 21st ACM Conf. Computer and Communications Security (CCS). 54–65.
[72] Hovav Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-
into-libc Without Function Calls (on the x86). In Proc. 14th ACM Conf. Computer
and Communications Security (CCS). 552–561.
[73] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher
Liebchen, and Ahmad-Reza Sadeghi. 2013.
Just-in-time Code Reuse: On the
Effectiveness of Fine-grained Address Space Layout Randomization. In Proc. 34th
IEEE Sym. Security & Privacy (S&P). 574–588.
[74] Solar Designer. 1997. “return-to-libc” attack. Bugtraq, Aug (1997).
[75] Venkatesh Srinivasan and Thomas Reps. 2015. Partial Evaluation of Machine Code.
In Proc. 30th ACM SIGPLAN Int. Conf. Object-Oriented Programming, Systems,
Languages, and Applications (OOPSLA). 860–879.
[76] Venkatesh Srinivasan and Thomas Reps. 2015. Synthesis of Machine Code
From Semantics. In Proc. 36th ACM Conf. Programming Language Design and
Implementation (PLDI). 596–607.
[77] Reinhard Tartler, Anil Kurmus, Bernhard Heinloth, Valentin Rothberg, Andreas
Ruprecht, Daniela Dorneanu, Rüdiger Kapitza, Wolfgang Schröder-Preikschat,
and Daniel Lohmann. 2012. Automatic OS Kernel TCB Reduction by Leveraging
Compile-time Configurability. In Proc. 8th Conf. Hot Topics in System Dependability
(HotDep).
[78] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-edge Control-
flow Integrity in GCC & LLVM. In Proc. 23rd USENIX Security Sym. 941–955.
[79] Victor van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc,
Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical Context-
sensitive CFI. In Proc. 22nd ACM Conf. Computer and Communications Security
(CCS). 927–940.
[80] Victor van der Veen, Enes Göktas, Moritz Contag, Andre Pawlowski, Xi Chen,
Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano
Giuffrida. 2016. A Tough Call: Mitigating Advanced Code-reuse Attacks at the
Binary Level. In Proc. 37th IEEE Sym. Security & Privacy (S&P).
[81] Steven J. Vaughan-Nichols. 2014. Shellshock: Better ‘bash’ patches now available.
ZDNet (September 2014). https://www.zdnet.com/article/shellshock-better-bash-
patches-now-available.
[82] Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. 1993.
Efficient Software-based Fault Isolation. In Proc. 14th ACM Sym. Operating Systems
Principles (SOSP). 203–216.
[83] James Walden, Jeff Stuckman, and Riccardo Scandariato. 2014. Predicting Vul-
nerable Components: Software Metrics vs Text Mining. In Proc. 25th Int. Sym.
Software Reliability Engineering (ISSRE). 23–33.
[84] Chenxi Wang, Jonathan Hill, John Knight, and Jack Davidson. 2000. Software
Tamper Resistance: Obstructing Static Analysis of Programs. Technical Report. U.
Virginia, Charlottesville.
[85] Minghua Wang, Heng Yin, Abhishek Vasisht Bhaskar, Purui Su, and Dengguo
Feng. 2015. Binary Code Continent: Finer-grained Control Flow Integrity for
Stripped Binaries. In Proc. 31st Annual Computer Security Applications Conf. (AC-
SAC). 331–340.
[86] Shuai Wang, Pei Wang, and Dinghao Wu. 2015. Reassembleable Disassembling.
In Proc. 24th Conf. USENIX Security Sym. 627–642.
[87] Wenhao Wang, Xiaoyang Xu, and Kevin W. Hamlen. 2017. Object Flow Integrity.
In Proc. 24th ACM Conf. Computer and Communications Security (CCS). 1909–
1924.
[88] David A. Wheeler. 2015. Shellshock. In Learning from Disaster. https://dwheeler.
[89] Bennet Yee, David Sehr, Greg Dardyk, Brad Chen, Robert Muth, Tavis Ormandy,
Shiki Okasaka, Neha Narula, and Nicholas Fullagar. 2009. Native Client: A
Sandbox for Portable, Untrusted x86 Native Code. In Proc. 30th IEEE Sym. Security
& Privacy (S&P). 79–93.
[90] Chao Zhang, Dawn Xiaodong Song, Scott A. Carr, Mathias Payer, Tongxin Li,
Yu Ding, and Chengyu Song. 2016. VTrust: Regaining Trust on Virtual Calls. In
Proc. 23rd Annual Network & Distributed System Security Sym. (NDSS).
[91] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen Mc-
Camant, Dawn Song, and Wei Zo. 2013. Practical Control Flow Integrity and
Randomization for Binary Executables. In Proc. 34th IEEE Sym. Security & Privacy
(S&P). 559–573.
[92] Mingwei Zhang and R. Sekar. 2013. Control Flow Integrity for COTS Binaries. In
Proc. 22nd USENIX Security Sym. 337–352.
[93] Thomas Zimmermann, Nachiappan Nagappan, and Laurie Williams. 2010. Search-
ing for a Needle in a Haystack: Predicting Security Vulnerabilities for Windows
Vista. In Proc. 3rd Int. Conf. Software Testing, Verification and Validation (ICST).
421–428.
com/essays/shellshock.html.