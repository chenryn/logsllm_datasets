      13 => 
        array (size=3)
          0 => int 268
          1 => string '=>' (length=2)
          2 => int 5
      14 => 
        array (size=3)
          0 => int 323
          1 => string '"c"' (length=3)
          2 => int 5
      15 => string ',' (length=1)
      16 => 
        array (size=3)
          0 => int 323
          1 => string '"d"' (length=3)
          2 => int 5
      17 => 
        array (size=3)
          0 => int 268
          1 => string '=>' (length=2)
          2 => int 5
      18 => 
        array (size=3)
          0 => int 323
          1 => string '"d"' (length=3)
          2 => int 5
      19 => string ')' (length=1)
      20 => string ';' (length=1)
      21 => 
        array (size=3)
          0 => int 320
          1 => string '$d' (length=2)
          2 => int 6
      22 => string '=' (length=1)
      23 => string '[' (length=1)
      24 => 
        array (size=3)
          0 => int 323
          1 => string ''1'' (length=3)
          2 => int 6
      25 => string ',' (length=1)
      26 => 
        array (size=3)
          0 => int 323
          1 => string ''2'' (length=3)
          2 => int 6
      27 => string ']' (length=1)
      28 => string ';' (length=1)
      29 => 
        array (size=3)
          0 => int 319
          1 => string 'backticks' (length=9)
          2 => int 9
      30 => string '(' (length=1)
      31 => 
        array (size=3)
          0 => int 322
          1 => string 'ls' (length=2)
          2 => int 9
      32 => string ')' (length=1)
      33 => string ';' (length=1)
      34 => 
        array (size=3)
          0 => int 327
          1 => string 'if' (length=2)
          2 => int 11
      35 => string '(' (length=1)
      36 => 
        array (size=3)
          0 => int 320
          1 => string '$a' (length=2)
          2 => int 11
      37 => 
        array (size=3)
          0 => int 285
          1 => string '==' (length=2)
          2 => int 11
      38 => 
        array (size=3)
          0 => int 323
          1 => string '"1"' (length=3)
          2 => int 11
      39 => string ')' (length=1)
      40 => string '{' (length=1)
      41 => 
        array (size=3)
          0 => int 320
          1 => string '$b' (length=2)
          2 => int 11
      42 => string '=' (length=1)
      43 => 
        array (size=3)
          0 => int 323
          1 => string '"2"' (length=3)
          2 => int 11
      44 => string ';' (length=1)
      45 => string '}' (length=1)
      46 => 
        array (size=3)
          0 => int 320
          1 => string '$a' (length=2)
          2 => int 13
      47 => string '=' (length=1)
      48 => 
        array (size=3)
          0 => int 358
          1 => string 'isset' (length=5)
          2 => int 13
      49 => string '(' (length=1)
      50 => 
        array (size=3)
          0 => int 320
          1 => string '$c' (length=2)
          2 => int 13
      51 => string ')' (length=1)
      52 => string '?' (length=1)
      53 => 
        array (size=3)
          0 => int 323
          1 => string '"aa"' (length=4)
          2 => int 13
      54 => string ':' (length=1)
      55 => 
        array (size=3)
          0 => int 323
          1 => string '"bb"' (length=4)
          2 => int 13
      56 => string ';' (length=1)
最终经过`fix_ternary`函数处理,是三元运算符的表达形式得到重写(`$a=isset($c)?"aa":"bb";` =>
`$a="aa":"bb"`):
    /Applications/MAMP/htdocs/rips/lib/tokenizer.php:558:
    array (size=52)
      0 => 
        array (size=3)
          0 => int 320
          1 => string '$a' (length=2)
          2 => int 3
      1 => string '=' (length=1)
      2 => 
        array (size=4)
          0 => int 320
          1 => string '$_GET' (length=5)
          2 => int 3
          3 => 
            array (size=1)
              0 => string 'a' (length=1)
      3 => string ';' (length=1)
      4 => 
        array (size=3)
          0 => int 320
          1 => string '$b' (length=2)
          2 => int 4
      5 => string '=' (length=1)
      6 => 
        array (size=4)
          0 => int 320
          1 => string '$_POST' (length=6)
          2 => int 4
          3 => 
            array (size=1)
              0 => string 'b' (length=1)
      7 => string ';' (length=1)
      8 => 
        array (size=3)
          0 => int 320
          1 => string '$c' (length=2)
          2 => int 5
      9 => string '=' (length=1)
      10 => 
        array (size=3)
          0 => int 368
          1 => string 'array' (length=5)
          2 => int 5
      11 => string '(' (length=1)
      12 => 
        array (size=3)
          0 => int 323
          1 => string '"c"' (length=3)
          2 => int 5
      13 => 
        array (size=3)
          0 => int 268
          1 => string '=>' (length=2)
          2 => int 5
      14 => 
        array (size=3)
          0 => int 323
          1 => string '"c"' (length=3)
          2 => int 5
      15 => string ',' (length=1)
      16 => 
        array (size=3)
          0 => int 323
          1 => string '"d"' (length=3)
          2 => int 5
      17 => 
        array (size=3)
          0 => int 268
          1 => string '=>' (length=2)
          2 => int 5
      18 => 
        array (size=3)
          0 => int 323
          1 => string '"d"' (length=3)
          2 => int 5
      19 => string ')' (length=1)
      20 => string ';' (length=1)
      21 => 
        array (size=3)
          0 => int 320
          1 => string '$d' (length=2)
          2 => int 6
      22 => string '=' (length=1)
      23 => string '[' (length=1)
      24 => 
        array (size=3)
          0 => int 323
          1 => string ''1'' (length=3)
          2 => int 6
      25 => string ',' (length=1)
      26 => 
        array (size=3)
          0 => int 323
          1 => string ''2'' (length=3)
          2 => int 6
      27 => string ']' (length=1)
      28 => string ';' (length=1)
      29 => 
        array (size=3)
          0 => int 319
          1 => string 'backticks' (length=9)
          2 => int 9
      30 => string '(' (length=1)
      31 => 
        array (size=3)
          0 => int 322
          1 => string 'ls' (length=2)
          2 => int 9
      32 => string ')' (length=1)
      33 => string ';' (length=1)
      34 => 
        array (size=3)
          0 => int 327
          1 => string 'if' (length=2)
          2 => int 11
      35 => string '(' (length=1)
      36 => 
        array (size=3)
          0 => int 320
          1 => string '$a' (length=2)
          2 => int 11
      37 => 
        array (size=3)
          0 => int 285
          1 => string '==' (length=2)
          2 => int 11
      38 => 
        array (size=3)
          0 => int 323
          1 => string '"1"' (length=3)
          2 => int 11
      39 => string ')' (length=1)
      40 => string '{' (length=1)
      41 => 
        array (size=3)
          0 => int 320
          1 => string '$b' (length=2)
          2 => int 11
      42 => string '=' (length=1)
      43 => 
        array (size=3)
          0 => int 323
          1 => string '"2"' (length=3)
          2 => int 11
      44 => string ';' (length=1)
      45 => string '}' (length=1)
      46 => 
        array (size=3)
          0 => int 320
          1 => string '$a' (length=2)
          2 => int 13
      47 => string '=' (length=1)
      48 => 
        array (size=3)
          0 => int 323
          1 => string '"aa"' (length=4)
          2 => int 13
      49 => string ':' (length=1)
      50 => 
        array (size=3)
          0 => int 323
          1 => string '"bb"' (length=4)
          2 => int 13
      51 => string ';' (length=1)
## 流程总结
  1. 通过`prepare_token`生成初始token信息
  2. 通过`array_reconstruct_tokens`函数重写数组相关token信息
  3. 通过`fix_tokens`修复大量写法不统一的语句
  4. 用过`fix_ternary`统一三元运算符的表达形式
通过以上四步,我们可以得到大致处理好的token信息,而对于漏洞的扫描也是建立在上面这四步生成的token信息基础上的.