### Multiple Contact Attempts Over Seven Months

We made multiple contact attempts over a period of more than seven months with the vendors of several PDF applications, including Expert PDF, PDF Editor Pro, Perfect PDF, and PDFelement. Seven months after our initial report, we re-evaluated all the PDF applications listed in Table II using their latest available software versions as of December 7th, 2020. The current status of the fixes can be summarized as follows:

- **Fixed Applications**: We verified that 15 PDF applications have implemented fixes. For PDF Architect, PDFelement, and Soda PDF, users need to upgrade to the next program version: PDF Architect 8, PDFelement 8, and Soda PDF 12.
- **Unfixed Applications**: Six vulnerable PDF applications still have unaddressed security gaps (Master PDF on Windows and Linux, Nitro Pro, PDF-XChange Editor, and Perfect PDF Reader). Additionally, five applications (Expert PDF 14, Nitro Reader, PDF Editor 6 Pro, Perfect PDF 8 Reader, and Perfect PDF 10 Premium) have not been updated, leaving the reported vulnerabilities present in these eleven cases.

To understand how the vendors fixed the vulnerabilities, we contacted all 15 vendors and requested details about their fixes. We provided them with multiple-choice answers derived from our PDF-Detector implementation (see Section VIII-C) to facilitate comparison. We received responses from five vendors:

- **Adobe and PDF Architect**: Both responded that if an incremental update exists after signing, they compare the parsed document with and without this update. PDF Architect also noted that if an incremental update contains a font that overwrites an existing one, they mark the signed document as invalid.
- **Foxit**: Described a similar attack detection procedure, analyzing the incremental part after the signature and checking for any modifications within the scope of permission.
- **LibreOffice**: Always informs the user about a partially signed document if there are further incremental updates after the signature. Before our security report, LibreOffice marked signed documents as invalid only if there were changes in the signed area ("byte range"). Using shadow attacks, we demonstrated that the entire document can be changed with incremental updates without altering the signed area. In a bilateral exchange, we convinced the LibreOffice development team to mark signed PDF documents as invalid even if the signed area remains cryptographically untouched and an incremental update modifies the content.
- **Master PDF and Okular**: Stated that the vulnerabilities should be closed soon.

Additionally, two online signing and validation services recognized the impact of the attacks and implemented countermeasures [9, 10].

### VIII. PDF-Detector

On an abstract level, shadow attacks are executed in two steps:
1. Attackers prepare a shadow document that hides malicious content and then sign it.
2. Attackers manipulate the signed document to reveal the hidden content while keeping the signature valid.

We developed PDF-Detector, a tool to prevent and detect shadow attacks. PDF-Detector proposes two approaches to mitigate and detect shadow documents:

- **Prevention (Section VIII-A)**: Detects shadow documents before they are signed, preventing shadow attacks in the first step of their execution. This countermeasure is suitable for any PDF viewer or application capable of signing PDF documents.
- **Detection (Section VIII-B)**: Identifies shadow documents that have already been signed, addressing the forensic analysis of signed PDF documents. By combining both countermeasures, we can prevent shadow attacks in both phases of their execution.

#### A. Prevention

In this section, we introduce an algorithm capable of detecting hidden content, warning users before they sign the document. To find hidden (inactive) shadow content, it is necessary to reliably extract text, images, and forms from the PDF document for analysis. Attacks in the "Hide" category use overlays of different objects, such as hiding text under an image. PDF-Detector must extract the objects' rectangular coordinates within the PDF document to detect these overlays. It uses these coordinates (left, bottom, right, top) to determine an object's exact position on a page. An image overlaying a text box can be identified by calculating a collision of both objects using the coordinates [11]. Slight overlapping of images and text boxes is common, so the collision calculation should provide the overlap percentage. The lower the value, the less content is covered by the object.

For the "Replace" category, a prevention phase cannot be sensibly implemented because the first step, "injecting shadow content," is indistinguishable from benign behavior. For example, inserting multiple fonts when creating a PDF document is not unusual. However, for the "Hide-and-Replace" category, the first step can be detected because the shadow document path is contained in the document. A promising way to recognize this is to exchange the references to the Kids objects for all Pages objects. Subsequently, all correctly referenced objects of the newly created PDF document are compared with the source document. In an unmanipulated PDF document, only the positions of the contained pages are swapped. If the PDF document contains shadow content of the "Hide-and-Replace" category, the attackers make it visible in the second step by referencing it, allowing identification.

#### B. Detection

While active (hidden) shadow content should be discovered during the prevention phase, active (visible) shadow content is the focus of the detection phase. In practice, this means that attackers create a shadow document, which the signers sign, and then make the shadow content visible. For detecting "Hide," "Hide-and-Replace," and the overlay variant of "Replace" attack classes, PDF-Detector can compare the current document with the document before it was signed. This comparison can be technically implemented by removing all data, i.e., all incremental updates, after the first signature. The discrepancy between the two documents becomes apparent in the second step of the "Hide" attacks, by the absence of an object in the signed document, such as a missing image object. In contrast, in the second step of "Hide-and-Replace," attackers deliver different overall content compared to the unsigned document. The detection of a "Replace" attack in the Font variant is less complex. It is sufficient to scan updates after signing for added FontFile objects and compare their object number with already contained FontFiles.

#### C. Implementation Details

PDF-Detector uses a combination of the Python libraries PDFMiner and pdfrw. PDF documents are often compressed, complicating content analysis since pdfrw cannot handle the Deflate compression algorithm used in PDF [12, 13]. Therefore, PDF-Detector decompresses the entire PDF document using pypdftk and pdftk if necessary.

The command-line tool accepts a PDF document as input. First, it checks if the document already contains a signature to select the correct mode. If no signature is found, the prevention mode starts and analyzes the document as described in Section VIII-A. If the document has already been signed, the detection mode starts and checks the document for any visible shadow content as described in Section VIII-B. If no visible shadow content is found, the analysis is additionally started in prevention mode to search for hidden (inactive) shadow content.

To ensure all exploits are correctly detected, we used the PDF files generated by our PDF-Attacker implementation. This processing ensures that both phases, prevention and detection, can be tested. We verified and fine-tuned the correct analysis based on these 26 PDF documents, including 4 unsigned documents, 7 inactive shadow documents, 7 signed but inactive shadow documents, and 8 active shadow documents. We plan to train the tool with additional documents to strengthen the detection rate and minimize the false positive rate.

### IX. Shadow Attack: Beyond Signature Bypasses

The concept of the shadow attack is not limited to attacks on PDF signatures. Analyzing the PDF specification and Adobe products, we observed interesting features and configuration possibilities.

- **High Privileged Actions in PDF**: The PDF specification defines two kinds of Code Execution (CE): PDF actions and JavaScript. Actions are limited in functionality, such as URL invocation. JavaScript provides a large function set, including control structures (e.g., if, while). For security reasons, both types of CE are restricted in PDF. For example, URL invocations require user confirmation, and access to other documents and files is blocked.

During our research, we determined that both CE variants can run in privileged mode, allowing the execution of security-critical actions without restriction or user consent. For example, privileged JavaScript can change the UI and functionality of the viewer application's menu items, read the content of other opened PDF tabs, or even files stored on the machine, and invoke URLs without confirmation.

Typically, a PDF is not allowed to execute privileged JavaScript or actions without user confirmation or configuration changes in the PDF viewer. One exception exists for digitally signed PDFs, specifically certified PDFs. Adobe Products users can configure PDFs signed with a specific certificate to be given permission to execute high-privileged operations. This setting is disabled by default for most preconfigured CAs and all manually trusted certificates. To our surprise, we found an exception in Adobe Products: if the private key for a certificate is known, PDF documents signed with this particular certificate are automatically allowed to execute high-privileged code.

- **Attack Idea**: Inspired by the shadow attacks concept, we raised the question of whether attackers could hide shadow actions or shadow JavaScript in the PDF so that it is executed after its signing.

For this purpose, we created a new attack based on the following simplified attacker model. We assume that the signers and the victims are the same entities. Additionally, the attackers do not need to manipulate the PDF document after its signing. When taking note of Figure 3, the only step executed by the attackers is to create PDF1 and embed the high-privileged code inside. Once the PDF1 is signed, the high-privileged code is executed automatically on the signers' machine.

- **Attack Description**:
  1. The attackers generate a PDF containing malicious, high-privileged code, such as read access to other PDF tabs using privileged JavaScript. The code is stored on a specific execution event that will be triggered after signing the document, such as the `willClose` event or any other event triggered after signing (e.g., `willSave`, `didSave`).
  2. The PDF is sent to the signers, who sign the document.
  3. After signing, the victims save and close the PDF.
  4. The closing of the document triggers the `willClose` event, and the malicious code inside the PDF is executed.
  5. Typically, the privileged JavaScript is not executed because the special permission for this is not granted. However, the application sees that the private key for the certificate used to sign the PDF is known, mistakenly convincing the application to execute the privileged JavaScript, assuming that the signer intended to execute the script because they signed it.

This attack is limited to Adobe products, as they define a special policy regarding CE and handle signed PDFs differently than unsigned ones.

- **Responsible Disclosure**: When we initially reported this issue to Adobe, their security team rejected classifying our findings as a vulnerability, assuming that all collaborators working on the document trust each other. After a short discussion, we convinced them that this is not always the case. As a direct result of our finding, Adobe implemented security controls in their May 2020 release, which "prevent signing until warnings are reviewed."

### X. Related Work

- **PDF Signatures**: Attacks on electronic signatures that abuse the missing cryptographic protection were described in 2008 and 2012 by Grigg [15, 14]. In 2010, Raynal et al. [16] considered potential security issues regarding signature verification by criticizing the design of the certificate trust establishment. The first attack bypassing cryptography in PDFs was introduced in 2017 by Stevens et al. [17], attacking the collision resistance of SHA-1 and creating two different PDF files with the same digest value but different content. In 2019, Mladenov et al. [6] published a comprehensive study on the security of PDF signatures, discovering three novel attacks and revealing all current applications to be vulnerable. More details regarding their relation to our work are discussed in Section V-E.

- **Content Masking Attacks**: In 2012, Popescu [18] presented a novel polymorphic attack containing two different files: a PDF and a TIFF. Depending on the viewer used, different content is shown, posing a risk if the victims sign the document and are unaware of the hidden content. A similar approach was introduced in 2014 by Albertini [19], combining a PDF and a JPEG into a single polyglot file. In 2015, Lax et al. [20] systematized potential security topics related to digitally signed documents, including the signature generation process, signed documents containing dynamic content like macros or JavaScript, and polymorphic documents similar to Popescu [18]. All of these attacks rely on different viewers or loading dynamic content from attackers' controlled sources, which are not required for the attacks presented in this paper. In 2017, Markwood et al. [7] introduced a novel attack related to content masking by using font encoding, tricking automated content analyzing software to process different data than the displayed data.

- **PDF Malware**: Since 2010, Raynal et al. [16] have abused legitimate features in PDFs to carry out attacks such as Denial-of-Service (DoS), Server-Side-Request-Forgery (SSRF), and information leakage. In 2013 and 2014, multiple vulnerabilities in Adobe Reader were reported, abusing legitimate PDF features, JavaScript, and XML [21, 22]. In 2015, Inführ [23] systematized the current risks related to features in PDFs leading to security issues. Valentin [24] published a study revealing weaknesses related to malicious URI invocation. In 2018, Franken et al. [25] extended these attack vectors, revealing weaknesses in two PDF readers by forcing them to call arbitrary URIs. In the same year, multiple vulnerabilities in Adobe Reader and different Microsoft products were discovered, leading to URI invocation and NTLM credentials leakage [26, 27].

Motivated by the discovered attacks since 2010, different security tools were implemented to detect maliciously crafted documents [28, 29, 30, 31]. Such tools relied on the detection of known attack patterns and structural analysis of PDFs. The list of tools was extended by new malware classifiers based on machine learning [32, 33, 34, 35, 36, 37, 38, 39]. Motivated by previously discovered problems regarding the detection of malicious PDF files [40, 41], Chen et al. [42] published in 2020 a methodology for robust classification of PDF malware, achieving 92.27% accuracy and a 0.56% false positive rate.

### XI. Future Work

In this section, we discuss several problems that should be addressed by future research.

- **Secure and Insecure Document Updates**: One of the main features we abused is Incremental Update. Using Incremental Update, previously hidden content could be displayed without raising security warnings. The main problem is the flexibility of the current specification, allowing multiple incremental updates without invalidating the signature. Developers of applications are left to themselves to address the problem, differing between dangerous and harmless incremental updates. As a result, inconsistencies regarding the signature validation status and the displayed content exist, depending on the PDF viewer used. Future research should systematically discover all allowed and forbidden changes to address these inconsistencies, analyze their impact on security, and propose countermeasures if needed. Our attacks only considered one-time signed documents. The attacker model could be adjusted to simulate use cases involving multiple signer entities. In such cases, attackers can insert content before the next signature is applied. It is currently unclear what kind of changes they can apply and what kind of content could be shadowed.

Establishing a systematic evaluation approach is not trivial. For instance, the `/Catalog` object can contain up to 28 attributes. One of these attributes is the reference to the `/Pages` object, which can also have up to 30 attributes and refer to further objects. Due to the large number of test cases, a tool for (semi-)automatically generating PDF test cases should be implemented. One possible approach is to implement a tool producing a series of test cases that contain many varieties of manipulations, following a fuzzing-like approach. The main challenge is to create a meaningful incremental update without invalidating the digital signature by applying trivial manipulations.

- **Updates and Parsing Errors**: While our research concentrated on PDF standard-compliant documents, previous research focused on incremental updates that are not standard-compliant [6]. A combination of both techniques could reveal new insights. During the responsible disclosure period, we bypassed the implemented countermeasures several times by simply removing or commenting out code fragments within the PDF document. We encourage the development of fuzzing techniques capable of covering a large number of document variants.

A recently published research article by Kuchta et al. [43] revealed new insights into this problem. The authors analyzed 230,000 real-world PDF documents provided by Garfinkel et al. [44] and discovered that 13.5% of the PDFs were improperly rendered. The authors concentrated only on rendering inconsistencies without evaluating the security implications. A second study could extend the scope to security and consider more real-world examples than mentioned by Garfinkel et al. [44].

### XII. Conclusion

In conclusion, our research highlights the vulnerabilities in PDF signatures and the potential for shadow attacks. We have developed PDF-Detector, a tool to prevent and detect such attacks, and have worked with vendors to implement fixes. Future research should focus on systematically addressing the inconsistencies in incremental updates and developing robust testing methods to enhance the security of PDF documents.