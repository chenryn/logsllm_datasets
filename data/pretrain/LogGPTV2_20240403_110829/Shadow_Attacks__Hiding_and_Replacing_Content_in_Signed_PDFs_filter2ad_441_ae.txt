multiple contact attempts within more than seven months
(Expert PDF, PDF Editor Pro, Perfect PDF , PDFelement).
Seven months after our report, we re-evaluated all PDF ap-
plications listed in Table II, using the latest available software
version7. The current status of the ﬁxes can be summarized as
follows.
7Status as of Dec. 7th, 2020
¸ Fixed applications: We veriﬁed the vendors’ ﬁxes for 15
PDF applications. For PDF Architect, PDFelement and
Soda PDF, it is necessary to upgrade to the next program
version: PDF Architect 8, PDFelement 8, Soda PDF 12.
o Unﬁxed applications: The security gaps in six of the
vulnerable PDF applications have not yet been closed
(Master PDF in Windows and Linux, Nitro Pro, PDF-
XChange Editor, Perfect PDF Reader). Five applications
(Expert PDF 14, Nitro Reader, PDF Editor 6 Pro, Perfect
PDF 8 Reader, Perfect PDF 10 Premium) have not been
updated in the meantime. Hence, the reported vulnerabil-
ities are still present in these eleven cases.
To ﬁnd out how the vendors ﬁxed the vulnerabilities, we
contacted all 15 vendors and asked for details of their ﬁxes.
We used multiple-choice answers (see section A) that we
derived from our PDF-Detector implementation (cf. subsec-
tion VIII-C) to be able to compare the ﬁxes. We received
responses from ﬁve vendors. Adobe and PDF Architect re-
sponded: “If there exists an Incremental Update after signing,
we compare the parsed document with and without this Incre-
mental Update”. PDF Architect also reported: “If an Incremen-
tal Update contains a font that overwrites an existing font, we
mark a signed document as invalid”. Foxit described an attack
detection procedure comparable to Adobe’s solution: “For
Replace and Hide-and-Replace, our solution is to analyze the
incremental part after the signature, and check whether there is
any part that can be modiﬁed within the scope of permission.
If it is not allowed, the direct return is invalid, if it is allowed,
it will show that there is modiﬁcation”. LibreOfﬁce always
informs the user about a partially signed document if there
were further Incremental Updates after the signature. Before
our security report, LibreOfﬁce marked signed documents as
invalid only if there were changes in the signed area (“byte
range”). Using the shadow attacks, we could show that the
whole document can be changed with Incremental Updates and
without manipulating the signed area. In a bilateral exchange,
we were able to convince the LibreOfﬁce development team
to mark signed PDF documents as invalid even if the signed
area remains cryptographically untouched and an Incremental
Update modiﬁes the content. Master PDF and Okular wrote
that the vulnerabilities should be closed soon.
Besides the applications, we also found out that two online
signing and validation services recognized the impact of the
attacks and implemented countermeasures [9, 10].
VIII. PDF-DETECTOR
On an abstract level shadow attacks are executed in two
steps. First, the attackers prepare a shadow document, which
hides malicious content. This document is then signed. Second,
the attackers manipulate the signed document to show the
hidden content while keeping the signature status valid.
We developed PDF-Detector, a tool to prevent and de-
tect shadow attacks. PDF-Detector proposes two different
approaches to mitigate and detect shadow documents concern-
ing the countermeasures. In subsection VIII-A, we discuss
a countermeasure detecting shadow documents before they
are signed. Thus, we prevent shadow attacks in the ﬁrst step
of their execution. This countermeasure is suitable for every
PDF viewer or application capable of signing PDF documents.
12
In subsection VIII-B, we propose an algorithm encounter-
ing shadow documents that have already been signed. This
countermeasure addresses the forensic analysis of signed PDF
documents assuming that previous software did not prevent
the signing of shadow documents. By combining both coun-
termeasures, we can prevent shadow attacks in both phases of
their execution.
We implemented both, prevention and detection, and tested
our code against all exploit ﬁles. See subsection VIII-C for our
results.
A. Prevention
it
text,
In this section, we introduce an algorithm capable of
detecting hidden content. Thus, users can be warned before
signing.
To ﬁnd hidden (inactive) shadow content,
is necessary
to reliably extract
images, and forms from the PDF
document for analysis. The attacks of the Hide category
use overlays of different objects, for example, hiding a text
under an image. To detect these overlays, PDF-Detector must
extract the objects’ rectangular coordinates within the PDF
document. It can then use these coordinates (left, bottom,
right, top) to determine an object’s exact position within a
page. An image that overlays a text box can be identiﬁed by
calculating a collision of both objects using the coordinates
[11]. When creating a PDF document, a slight overlapping
of images and text boxes is not unusual. For this reason,
the collision calculation should calculate the value of the
overlay in percent. The lower the value, the less content is
covered by the object. For the Replace category, a prevention
phase cannot be sensibly implemented. The ﬁrst step “injecting
shadow content” is indistinguishable from a benign injection.
For example, inserting multiple fonts when creating a PDF
document is not an unusual malicious behavior. For the Hide-
and-Replace category, this does not apply at all. Here, the
ﬁrst step can be detected, because the shadow document path
is contained in the document. A promising way to recognize
this is to exchange the references to the Kids objects for all
Pages objects. Subsequently, all correctly referenced objects
of the newly created PDF document are compared with the
source document. In an unmanipulated PDF document, only
the positions of the contained pages are swapped. Suppose the
PDF document contains shadow content of the category Hide-
and-Replace. In that case, the attackers make it visible in the
second step by referencing it. Thus, it can be identiﬁed.
B. Detection
While active (hidden) shadow content should be discovered
during the prevention phase, active (visible) shadow content is
in the focus of the detection phase. In practice, this means at-
tackers created a shadow document, which the signers signed.
Afterwards, the attackers made the shadow content visible.
For detecting Hide, Hide-and-Replace and the overlay variant
of Replace attack classes, PDF-Detector can compare the
current document with the document before it was signed. This
comparison can be technically implemented by removing all
data, that is, all Incremental Updates, after the ﬁrst signature.
The discrepancy between the two documents becomes apparent
in the second step of the Hide attacks, by the absence of
an object in the signed document, for example, a missing
13
image object. In contrast, in the second step in Hide-and-
Replace, attackers deliver a different overall content compared
to the unsigned document. The detection of a Replace attack
in the Font variant is less complex. For this purpose, it is
sufﬁcient to scan updates after signing for added FontFile
objects and to comparing their object number with already
contained FontFiles.
C. Implementation Details
PDF-Detector uses combination of the Python libraries
PDFMiner and pdfrw. In practice, PDF documents are often
compressed, which further complicates the analysis of the
content, since pdfrw cannot handle the Deﬂate compression
algorithm used in PDF [12, 13]. For this reason the PDF-
Detector decompresses the whole PDF document using pypdftk
and pdftk if necessary.
the correct mode. If no signature is found,
The command-line tool accepts a PDF document as input.
First, it checks if the document already contains a signature
to select
the
prevention mode starts and analyzes the document as described
in subsection VIII-A. If the document has already been signed,
the detection mode starts and checks the document for any
visible shadow content as described in subsection VIII-B. If
no visible shadow content is found, the analysis is additionally
started in prevention mode to search for hidden (inactive)
shadow content.
For assuring that all exploits are correctly detected, we used
the PDF ﬁles generated by our PDF-Attacker implementation.
This processing ensures that both phases, prevention and
detection, can be tested. We were able to verify and ﬁne-tune
the correct analysis based on these 26 PDF documents, in-
cluding 4 unsigned documents, 7 inactive shadow documents,
7 signed but inactive shadow documents, and 8 active shadow
document. We plan to train the tool with additional documents
to strengthen the detection rate and minimize the false positive
rate.
IX. SHADOW ATTACK: BEYOND SIGNATURE BYPASSES
The concept of the shadow attack is not limited to the
attacks on PDF signatures. Analyzing the PDF speciﬁcation
and Adobe products, we observed exciting features and con-
ﬁguration possibilities.
a) High Privileged Actions in PDF: The PDF speciﬁ-
cation basically deﬁnes two kinds of Code Execution (CE):
PDF actions and JavaScript. Actions are limited in their
functionality. A popular example of actions is URL invocation.
In contrast, JavaScript provides a huge function set, including
control structures (e.g., if, while). For security reasons, both
types of CE are restricted in PDF. For example, URL invoca-
tions require user conﬁrmation, and access to other documents
and ﬁles is blocked.
During our research, we determined that both CE variants
can run in privileged mode. This mode allows the execution of
security-critical actions without any restriction or user consent.
For example, privileged JavaScript can change the UI and
functionality of the viewer application’s menu items. It can
read the content of other opened PDF tabs or even ﬁles
stored on the machine. It can also invoke URLs without any
conﬁrmation.
Typically, a PDF is not allowed to execute privileged
JavaScript or actions without user conﬁrmation or conﬁgura-
tion changes in the PDF viewer.
One exception exists by using digitally signed PDFs, more
concrete certiﬁed PDFs. Adobe Products users can conﬁgure
PDFs signed with a speciﬁc certiﬁcate to be given permission
to execute high privileged operations. This setting is disabled
by default for most preconﬁgured CAs and all manually
trusted certiﬁcates. To our surprise, we found an exception in
Adobe Products: if the private key for a certiﬁcate is known,
PDF documents signed with this particular certiﬁcate are
automatically allowed to execute high privileged code.
b) Attack Idea: Inspired by the shadow attacks concept,
we raised the question whether attackers could hide shadow
actions or shadow JavaScript in the PDF so that it is executed
after its signing.
For this purpose, we create a new attack based on the
the
following simpliﬁed attacker model. We assume that
signers and the victims are the same entities. Additionally,
the attackers do not need to manipulate the PDF document
after its signing. When taking note of Figure 3, the only step
executed by the attackers is to create PDF1 and to embed
the high privileged code inside. Once the PDF1 is signed, the
high privileged code is executed automatically on the signers’
machine.
c) Attack Description: The attack works as follows:
1) The attackers generate a PDF containing malicious, high
privileged code, for example, read access to other PDF
tabs using privileged JavaScript. The code is stored on
a speciﬁc execution event that will be triggered after
signing the document, for example, during the willClose
event, or any other event which is triggered after the
signing (e.g., willSave, didSave).
2) The PDF is sent to the signers. They sign the document.
3) After the signing, the victims save and close the PDF.
4) The closing of the document triggers the willClose event
and the malicious code inside the PDF is executed.
5) Typically, the privileged JavaScript is not executed be-
cause the special permission for this is not granted.
However, the application sees that the private key for the
certiﬁcate used to sign the PDF is known. This mistakenly
convinces the application to execute privileged JavaScript
– the application assumes that the signer intended to
execute the script, because they signed it.
This attack is limited to Adobe products since they deﬁne
a special policy regarding the CE and handle signed PDFs
differently than unsigned.
d) Responsible Disclosure: When we initially reported
this issue to Adobe, their security team rejected to classify our
ﬁndings as a vulnerability. They assumed that all collaborators
who are working on the document trust each other. After a
short discussion, we convinced them that this is not always the
case. As a direct result of our ﬁnding, Adobe has implemented
security controls in their May 2020 release, which “prevent[s]
signing until warnings are reviewed”.
14
X. RELATED WORK
a) PDF Signatures: Attacks on electronic signatures
which abuse the missing cryptographic protection were de-
scribed in 2008 and 2012 by Grigg [15, 14]. In 2010, Raynal
et al. [16] considered potential security issues regarding the
signature veriﬁcation by criticizing the design of the certiﬁcate
trust establishment. The ﬁrst attack that bypassed the cryp-
tography in PDFs was introduced in 2017 by Stevens et al.
[17]. The researchers attacked the collision resistance of SHA-
1 and created two different PDF ﬁles containing the same
digest value but different content. In 2019, Mladenov et al. [6]
published a comprehensive study regarding the security of PDF
signatures and they discovered three novel attacks and revealed
all current applications to be vulnerable. More details regarding
their relation to our work is discussed in subsection V-E.
b) Content Masking Attacks:
In 2012, Popescu [18]
presented a novel polymorphic attack containing two different
ﬁles: a PDF and TIFF. Depending on the viewer used, different
content
is shown. This risk exists if the victims sign the
document and are unaware of the hidden content. A similar ap-
proach was introduced in 2014 by Albertini [19]. He combined
a PDF and a JPEG into a single polyglot ﬁle. In 2015, Lax et al.
[20] systematized potential security topics related to digitally
signed documents including the signature generation process,
signed documents containing dynamic content like macros or
JavaScript, and polymorphic documents similar to Popescu
[18]. All of the attacks rely either on different viewers’
usage to open the malicious PDF or loading dynamic content
from attackers’ controlled source. None of these requirements
are needed for the attacks presented in this paper. In 2017,
Markwood et al. [7] introduced a novel attack related to content
masking by using font encoding. As a result, the researchers
could trick automated content analyzing software to process
different data than the data displayed.
c) PDF Malware: Since 2010, Raynal et al. [16] abuse
legitimate features in PDFs to carry out attacks such as Denial-
of-Service (DoS), Server-Side-Request-Forgery (SSRF), and
information leakage. In 2013 and 2014, multiple vulnerabilities
in Adobe Reader were reported to be abusing legitimate PDF
features, JavaScript, and XML [21, 22]. In 2015, Inf¨uhr [23]
systematized the current risks related to features in PDFs,
which lead to security issues. Valentin [24] published a study
revealing weaknesses related to malicious URI invocation. In
2018, these attack vectors were extended by Franken et al. [25]
who revealed weaknesses in two PDF readers by forcing them
to call arbitrary URIs. In the same year, multiple vulnerabil-
ities in Adobe Reader and different Microsoft products were
discovered, leading to URI invocation and NTLM credentials
leakage [26, 27].
Motivated by the discovered attacks since 2010, different
security tools were implemented to detect maliciously crafted
documents [28, 29, 30, 31]. Such tools relied on the detection
of known attack patterns and structural analysis of PDFs. The
list of tools was extended by new malware classiﬁers based on
machine learning [32, 33, 34, 35, 36, 37, 38, 39]. Motivated
by previously discovered problems regarding the detection of
malicious PDF ﬁles [40, 41], Chen et al. [42] published in 2020
a methodology for robust classiﬁcation of PDF Malware. The
authors achieved 92.27% accuracy and a 0.56% false positive
rate.
XI. FUTURE WORK
In this section, we discuss several problems that should be
addressed by future research.
a) Secure and Insecure Document Updates: One of
the main features we abused is Incremental Update. Using
Incremental Update, previously hidden content could be dis-
played without raising security warnings. The main problem
is the ﬂexibility of the current speciﬁcation allowing multiple
Incremental Updates without invalidating the signature. How-
ever, the developers of the applications are left to themselves
to address the problem. They differ between dangerous and
harmless Incremental Updates on their own. As a result,
inconsistencies regarding the signature validation status and
the displayed content exist, depending on which PDF viewer
is used. Future research should systematically discover all
allowed and forbidden changes to address these inconsisten-
cies, analyze their impact regarding security, and propose a
countermeasure if needed. Our attacks only considered one-
time signed documents. The attacker model could be adjusted
to simulate use cases in which multiple signer entities are
involved. In such cases, the attackers can insert content before
the next signature is applied. It is currently unclear what kind
of changes they can apply and which kind of content could be
shadowed.
Establishing a systematic evaluation approach is not a
trivial task. For instance, the /Catalog object can contain up
to 28 attributes. One of these attributes is the reference to
the /Pages object, which can also have up to 30 attributes,
and it can refer to further objects. Due to the large amount
of test cases, a tool for (semi-)automatically generating PDF
test cases should be implemented. One possible approach to
achieve this is to implement a tool producing a series of test
cases that contains many varieties of manipulations, following
a fuzzing alike approach. The main challenge here is to create a
meaningful Incremental Update without invalidating the digital
signature by applying trivial manipulations.
b) Updates and Parsing Errors: While our research
concentrated on PDF standard compliant documents, previous
research focused on Incremental Updates that are not standard
compliant [6]. A combination of both techniques could reveal
new insights. For example, during the responsible disclosure
period, we could bypass the implemented countermeasures
several times by just removing (or commenting out) code
fragments within the PDF document. We encourage the de-
velopment of fuzzing techniques capable of covering a large
number of document variants.
A recently published research article by Kuchta et al. [43]
revealed new insights into this problem. The authors analyzed
230 000 real-word PDF documents provided by Garﬁnkel et al.
[44] and discovered that 13.5% of the PDFs were improperly
rendered. The authors concentrated only on inconsistencies
during rendering without evaluating the security implications.
The second study could be provided by extending the scope
to security and considering more real-world examples than
mentioned by Garﬁnkel et al. [44].
XII. CONCLUSION