showing the email’s cleartext body; otherwise, an error
message is displayed.
  Decapsulate VDOFireVanish Extension for the Web. Self-destructing
data is broadly applicable in today’s Web-oriented world,
in which users often leave permanent traces on many
Web sites [61]. Given the opportunity, many privacy-
concerned users would likely prefer that certain mes-
sages on Facebook, documents on Google Docs, or in-
stant messages on Google Talk disappear within a short
period of time.
To make Vanish broadly accessible for Web usage,
FireVanish provides a simple, generic, yet powerful, in-
terface that permits all of these applications. Once the
FireVanish plugin has been installed, a Firefox user can
select text in any Web page input box, right click on that
selected text, and cause FireVanish to replace that text in-
line with an ecapsulated VDO. Similarly, when reading a
Web page containing a VDO, a user can select that VDO
and right click to decapsulate it; in this case, FireVanish
leaves the VDO in place and displays the cleartext in a
separate popup window.
Figure 5 shows two uses of FireVanish to encapsulate
and read VDOs within Facebook and Google Docs. The
screenshots demonstrate a powerful concept: FireVanish
can be used seamlessly to empower privacy-aware users
with the ability to limit the lifetime of their data on Web
applications that are unaware of Vanish.
Vanishing Files. Finally, we have implemented a van-
ishing ﬁle application, which can be used directly or by
other applications, such as a self-destructing trash bin
or Microsoft Word’s autosave. Users can wrap sensi-
tive ﬁles into self-destructing VDOs, which expire after
a given timeout. In our prototype, the application creates
a VDO wrapping one or more ﬁles, deletes the cleartext
ﬁles from disk, and stores the VDO in their place. This
ensures that, even if an attacker copies the raw bits from
the laptop’s disks after the timeout, the data within the
VDO will be unavailable. Like traditional ﬁle encryp-
tion, Vanishing Files relies upon existing techniques for
securely shredding data stored on disks or memory.
5.4 Performance Evaluation
We measured the performance of Vanish for our applica-
tions, focusing on the times to encapsulate and decapsu-
late a VDO. Our goals were to (1) identify the system’s
performance bottlenecks and propose optimizations, and
(2) determine whether our Vuze-based prototype is fast
enough for our intended uses. Our measurements use an
Intel T2500 DUO with 2GB of RAM, Java 1.6, and a
broadband network.
To identify system bottlenecks, we executed VDO
operations and measured the times spent in the three
main runtime components: DHT operations (stor-
ing and getting shares), Shamir secret sharing opera-
tions (splitting/recomposing the data key), and encryp-
(a) Scalability of DHT operations.
(b) VDO operation execution times.
Figure 6: Performance in the Vuze-based Vanish system.
(a) The scalability of DHT operation times as a function of the
number of shares being gotten from or stored in the DHT (re-
sults are averages over 20 trials and error bars indicate stan-
dard deviations). (b) Total VDO encapsulation (with and with-
out pre-push) and decapsulation times for FireVanish for a 2KB
email, N = 50, and threshold 90%.
tion/decryption.
In general, the DHT component ac-
counts for over 99% of the execution time for all Vanish
operations on small and medium-size data (up to tens of
MB, like most emails). For much larger data sizes (e.g.,
ﬁles over hundreds of MB), the encryption/decryption
becomes the dominating component.
Our experiments also revealed the importance of con-
ﬁguring Vuze’s parameters on our latency-aware appli-
cations. With no special tuning, Vuze took 4 minutes to
store 50 shares, even using parallel stores. By employing
several Vuze optimizations we lowered the 50-share store
time by a factor of 7 (to 32 seconds). Our most effective
optimization — signiﬁcantly lowering Vuze’s UDP time-
out based on suggestions from previous research [28] —
proved non-trivial, though. In particular, as we deployed
Vanish within our group, we learned that different In-
ternet providers (e.g., Qwest, Comcast) exhibited utterly
different network behaviors and latencies, making the
setting of any one efﬁcient value for the timeout impossi-
ble. Hence, we implemented a control-loop-based mech-
anism by which Vanish automatically conﬁgures Vuze’s
UDP timeout based on current network conditions. The
optimization requires only node-local changes to Vuze.
Figure 6(a) shows how the optimized DHT operation
times scale with the number of shares (N), for a ﬁxed
threshold of 90%, over a broadband connection (Com-
cast). Scaling with N is important in Vanish, as its se-
020406080100120140050100150200Number of shares (N)Time (sec)   Store shares in DHTGet shares from DHT19.00.082124.320014.00.08294.71509.20.08264.51004.70.08232.8502.00.08216.9200.90.08210.510With prepushWithout prepushDecapsulate VDOEncapsulate VDOTime (seconds)Ncurity is highly dependent on this parameter. The graph
shows that getting DHT shares are relatively fast — un-
der 5 seconds for N = 50, which is reasonable for emails,
trash bins, etc. The cost of storing VDO shares, however,
can become quite large (about 30 seconds for N = 50),
although it grows liniarly with the number of shares. To
mask the store delays from the user, we implemented a
simple optimization, where Vanish proactively generates
data keys and pre-pushes shares into the DHT. This op-
timization leads to an unnoticeable DHT encapsulation
time of 82ms.
Combining the results in this section and Section 6,
we believe that parameters of N = 50 and a threshold of
90% provide an excellent tradeoff of security and per-
formance. With these parameters and the simple pre-
push optimization we’ve described, user-visible latency
for Vanish operations, such as creating or reading a Van-
ish email, is relatively low — just a few seconds for a
2KB email, as shown in Figure 6(b).
5.5 Anecdotal Experience with FireVanish
We have been using the FireVanish plugin within our
group for several weeks. We also provided Vanish to
several people outside of our group. Our preliminary ex-
perience has conﬁrmed the practicality and convenience
of FireVanish. We also learned a number of lessons even
in this short period; for example, we found our minimal-
istic interface to be relatively intuitive, even for a non-CS
user to whom we gave the system, and the performance
is quite acceptable, as we noted above.
We also identiﬁed several limitations in the current im-
plementation, some that we solved and others that we
will address in the future. For example, in the begin-
ning we found it difﬁcult to search for encrypted emails
or data, since their content is encrypted and opaque to
the Web site. For convenience, we modiﬁed FireVan-
ish to allow users to construct emails or other data by
mixing together non-sensitive cleartext blocks with self-
destructing VDOs, as illustrated in Figure 5(b). This fa-
cilitates identifying information over and above the sub-
ject line. We did ﬁnd that certain types of communica-
tions indeed require timeouts longer than 8 hours. Hence,
we developed and used Vanish in a proxy setting, where
a Vanish server runs on behalf of a user at an online lo-
cation (e.g., the user’s home) and refreshes VDO shares
as required to achieve each VDO’s intended timeout in
8-hour units. The user can then freely execute the Vanish
plugin from any connection-intermittent location (e.g., a
laptop).
We are planning an open-source release of the soft-
ware in the near future and are conﬁdent that this release
will teach us signiﬁcantly more about the usability, limi-
tations, and security of our system.
6 Security Analyses
To evaluate the security of Vanish, we seek to assess
two key properties: that (1) Vanish does not introduce
any new threats to privacy (goal (5) in Section 3), and
(2) Vanish is secure against adversaries attempting to
retroactively read a VDO post-expiration.
It is straightforward to see that Vanish adds no new
privacy risks. In particular, the key shares stored in the
DHT are not a function of the encapsulated data D; only
the VDO is a function of D. Hence, if an adversary
is unable to learn D when the user does not use Van-
ish, then the adversary would be unable to learn D if the
user does use Vanish. There are three caveats, however.
First, external parties, like the DHT, might infer informa-
tion about who is communicating with whom (although
the use of an anonymization system like Tor can allevi-
ate this concern). Second, given the properties of Van-
ish, users might choose to communicate information that
they might not communicate otherwise, thus amplifying
the consequences of any successful data breach. Third,
the use of Vanish might raise new legal implications. In
particular, the new “eDiscovery” rules embraced by the
U.S. may require a user to preserve emails and other data
once in anticipation of a litigious action. The exact legal
implications to Vanish are unclear; the user might need to
decapsulate and save any relevant VDOs to prevent them
from automatic expiration.
We focus the remainder of this section on attacks tar-
geted at retroactively revoking the privacy of data encap-
sulated within VDOs (this attack timeline was shown in
Figure 2). We start with a broad treatment of such attacks
and then dive deeply into attacks that integrate adversar-
ial nodes directly into the DHT.
6.1 Avoiding Retroactive Privacy Attacks
Attackers. Our motivation is to protect against retroac-
tive data disclosures, e.g., in response to a subpoena,
court order, malicious compromise of archived data, or
accidental data leakage. For some of these cases, such
as the subpoena, the party initiating the subpoena is the
obvious “attacker.” The ﬁnal attacker could be a user’s
ex-husband’s lawyer, an insurance company, or a pros-
ecutor. But executing a subpoena is a complex process
involving many other actors, including potentially: the
user’s employer, the user’s ISP, the user’s email provider,
unrelated nodes on the Internet, and other actors. For our
purposes, we deﬁne all the involved actors as the “adver-
sary.”
Attack Strategies. The architecture and standard prop-
erties of the DHT cause signiﬁcant challenges to an ad-
versary who does not perform any computation or data
interception prior to beginning the attack. First, the key
shares are unlikely to remain in the DHT much after the
timeout, so the adversary will be incapable of retrieving
the shares directly from the DHT. Second, even if the ad-
versary could legally subpoena the machines that hosted
the shares in the past, the churn in Vuze makes it difﬁ-
cult to determine the identities of those machines; many
of the hosting nodes would have long disappeared from
the network or changed their DHT index. Finally, with
Vuze nodes scattered throughout the globe [63], gaining
legal access to those machines raises further challenges.
In fact, these are all reasons why the use of a DHT such
as Vuze for our application is compelling.
We therefore focus on what an attacker might do prior
to the expiration of a VDO, with the goal of amplifying
his ability to reveal the contents of the VDO in the future.
We consider three principal strategies for such precom-
putation.
Strategy (1): Decapsulate VDO Prior to Expiration.
An attacker might try to obtain a copy of the VDO and
revoke its privacy prior to its expiration. This strategy
makes the most sense when we consider, e.g., an email
provider that proactively decapsulates all VDO emails in
real-time in order to assist in responding to future sub-
poenas. The natural defense would be to further encap-
sulate VDOs in traditional encryption schemes, like PGP
or GPG, which we support with our FireVanish applica-
tion. The use of PGP or GPG would prevent the web-
mail provider from decapsulating the VDO prior to expi-
ration. And, by the time the user is forced to furnish her
PGP private keys, the VDO would have expired. For the
self-destructing trash bin and the Vanishing Files appli-
cation, however, the risk of this attack is minimal.
Strategy (2): Sniff User’s Internet Connection. An at-
tacker might try to intercept and preserve the data users
push into or retrieve from the DHT. An ISP or employer
would be most appropriately positioned to exploit this
vector. Two natural defenses exist for this:
the ﬁrst
might be to use a DHT that by default encrypts com-
munications between nodes. Adding a sufﬁcient level
of encryption to existing DHTs would be technically
straightforward assuming that the ISP or employer were
passive and hence not expected to mount man-in-the-
middle attacks. For the encryption, Vanish could com-
pose with an ephemeral key exchange system in order to
ensure that these encrypted communications remain pri-
vate even if users’ keys are later exposed. Without mod-
ifying the DHT, the most natural solution is to compose
with Tor [19] to tunnel one’s interactions with a DHT
through remote machines. One could also use a different
exit node for each share to counter potentially malicious
Tor exit nodes [36, 66], or use Tor for only a subset of
the shares.
Strategy (3): Integrate into DHT. An attacker might try
to integrate itself into the DHT in order to: create copies
of all data that it is asked to store; intercept internal
DHT lookup procedures and then issue get requests of
his own for learned indices; mount a Sybil attack [26]
(perhaps as part of one of the other attacks); or mount an
Eclipse attack [60]. Such DHT-integrated attacks deserve
further investigation, and we provide such an analysis in
Section 6.2.
We will show from our experiments in Section 6.2 that
an adversary would need to join the 1M-node Vuze DHT
with approximately 80,000—90,000 malicious nodes to
mount a store-based attack and capture a reasonable
percentage of the VDOs (e.g., 25%). Even if possible,
sustaining such an attack for an extended period of time
would be prohibitively expensive (close to $860K/year in
Amazon EC2 computation and networking costs). The
lookup-based attacks are easy to defeat using localized
changes to Vanish clients. The Vuze DHT already in-
cludes rudimentary defenses against the Sybil attack and
a full deployment of Vanish could leverage the existing
body of works focused on hardening DHTs against Sybil
and Eclipse attacks [9, 14, 16, 26, 51].
Deployment Decisions. Given attack strategies (1) and
(2), a user of FireVanish, Vanishing Files, or any future
Vanish-based application is faced with several options:
to use the basic Vanish system or to compose Vanish with
other security mechanisms like PGP/GPG or Tor. The
speciﬁc decision is based on the threats to the user for
the application in question.
Vanish is oriented towards personal users concerned
that old emails, Facebook messages, text messages, or
ﬁles might come back to “bite” them, as eloquently put
in [42]. Under such a scenario, an ISP trying to assist in
future subpoenas seems unlikely, thus we argue that com-
posing Vanish with Tor is unnecessary for most users.
The use of Tor seems even less necessary for some of the