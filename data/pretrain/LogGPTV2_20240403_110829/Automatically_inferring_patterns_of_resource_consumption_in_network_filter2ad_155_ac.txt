clusters. 
If we go back to our original example for computing all
clusters that send over 5% of the total traﬃc, we ﬁnd that
the number of clusters in the compressed report (assuming
C = H = 5%) is at most 20 and not roughly 20 · 26. The
compressed report corresponding to Figure 1 is in Figure 2.
Note that the number of nodes retained in the report (nodes
with double circles) has dropped from 7 to 4 which is actu-
ally less than the 5 Lemma 1 would have predicted for the
20% threshold.
Our algorithm for computing the unique non-redundant
compressed report, exempliﬁed in Figure 2, relies on a single
traversal of the tree of the high volume traﬃc clusters. Each
10.8.0.0/28
500
10.8.0.0/29
120
10.8.0.8/29
380
10.8.0.8/30
305
10.8.0.8/31
270
160
110
10.8.0.8
10.8.0.9
Figure 2: The clusters from the compressed re-
port are represented with double circles. Node
10.8.0.8/31 is not in the compressed report because
its traﬃc is exactly the sum of the traﬃc of its chil-
dren. Node 10.8.0.8/30 is not in the compressed
report because its traﬃc is within a small amount
(35) of as what we can compute based on its two
descendants in the report.
node in the tree maintains two counters: one reﬂecting its
traﬃc and one reﬂecting an estimate of its traﬃc based on
the more speciﬁc clusters included in the report. We per-
form a post order traversal and decide for each node whether
it goes into the report or not. We compute the node’s “es-
timate” as the sum of the estimates of its children. If the
diﬀerence between this value and the actual traﬃc is below
the threshold, the node is ignored, otherwise it is reported
with its exact traﬃc and its “estimate” counter is set to its
actual traﬃc. This algorithm signiﬁcantly reduces the size
of the report while guaranteeing that all clusters of size H
or larger can be reconstructed within error C.
Computing Unidimensional Cluster Deltas
While compressed reports provide a complete traﬃc char-
acterization for a given input, sometimes we are more in-
terested in how the structure of traﬃc has changed. More
speciﬁcally, the challenge is to produce a concise report that
indicates the amount of the change for all the clusters whose
increase or decrease in traﬃc is larger than a given thresh-
old.
There are two ways to deﬁne the problem: by looking at
the absolute change in the traﬃc of clusters, or by looking
at the relative change. If the lengths of the measurement in-
tervals are equal and the total traﬃc doesn’t change much,
one can use absolute change: the number of bytes or pack-
ets by which the clusters increase or decrease. However, to
compare the traﬃc mix over intervals of diﬀerent lengths
(e.g. how does the traﬃc mix between 10 and 11 AM diﬀer
from the traﬃc mix of the whole day), we can only meaning-
fully measure relative change and must normalize the sizes
of traﬃc clusters so that the normalized total traﬃc is the
same in both intervals. Thus, even if the traﬃc of a given
cluster changed signiﬁcantly, if it represents the same per-
centage of the total traﬃc, its relative change is zero. For
the rest of this paper we assume that the we are comput-
ing the absolute change or that the traﬃc has already been
normalized.
To detect the clusters that change by more than H, we
can use the full traces from each interval, but a more eﬃ-
cient algorithm can be built simply using the uncompressed
reports computed earlier. Since each cluster in the uncom-
pressed report is above a threshold of H, if a cluster was
below H in both intervals it could not have changed by
more than H overall. But operating only on the reports
for the two intervals still leaves some ambiguities: we can-
not be sure whether a cluster that appears only in one of
the intervals and is close to H was zero in the other one and
thus changed by more than H, or was close to but below H
and thus changed by very little. Of course, if the threshold
used by the input reports is much below H, the ambiguity
is reduced and we can ignore it in practice. A simple pre-
processing step can provide the exact input required for the
delta algorithm as follows: using reports with threshold H
for both intervals we compute the set of clusters that were
above H in either of them and in one more pass over the
trace we compute the exact traﬃc in both intervals for each
of these clusters.
We can apply to delta reports a compression algorithm
similar to that from the previous section. We decide whether
to include a cluster into the compressed delta report by com-
paring its actual change to the estimate based on more spe-
ciﬁc clusters already reported:
if the estimate is lower or
larger by at least H than the actual change, the cluster is
reported. Note that this can (and does) lead to putting
clusters that did not change by more than the threshold
into the compressed delta report. Consider the following
example. The traﬃc from port 80 (Web) increased by more
than the threshold and therefore we put it into the delta re-
port. At the same time, no traﬃc from individual low ports
changed much and the total traﬃc from low ports remained
the same. This is possible because traﬃc from many low
ports may have decreased slightly, thus compensating for
the increase in port 80 traﬃc. Our compressed delta report
needs to indicate that the total traﬃc from low ports did not
change because otherwise the manager would assume that
it increased by approximately as much as the Web traﬃc.
Lemma 2. The number of clusters in a non-redundant
compressed delta report is at most s1 + s2.
Proof Each cluster in the report covers a traﬃc of at least
H from one of the intervals that was not reported by any
of its descendants. The sum of the absolute value of these
diﬀerences is at most T1 + T2 (T1 is the total traﬃc of the
ﬁrst measurement interval and T2 is the total traﬃc of the
second one) because each ﬂow can be associated with at
most one most speciﬁc cluster in the report and the sum
of the sizes of all ﬂows is T1 + T2. Therefore, there are at
most (T1 + T2)/H = s1 + s2 clusters in the compressed delta
report. 
While this result suggests that compressed delta reports
could be double the size of compressed reports, in practice
traﬃc changes slowly, so the deltas are much more compact
than compressed reports using the same threshold.
3.2 Multidimensional clustering
The relationships between multidimensional clusters form
a more complex space deﬁned by combining multiple unidi-
Root − all traffic
Root − all traffic
Engineering (E)
Medicine (M)
TCP (T)
Structural Eng. (S)
Computer Science (C)
Dermatology (D)
Pediatrics (P)
UDP (U)
Root
E
M
S
C
TE
T
P
U
D
UE
UC
Figure 3: The multidimensional model combines
unidimensional hierarchies (trees) into a graph. The
hierarchy on the near side of the cube breaks up the
traﬃc by preﬁxes; the hierarchy on the right side
of the cube by protocol. For example, the node la-
beled C on the near side represents the Computer
Science Department, the node labeled U on the right
side represents the UDP traﬃc and the node labeled
UC in the graph represents the UDP traﬃc of the
Computer Science Department.
mensional hierarchies. In the top of Figure 3, the closer face
of the cube shows the preﬁx hierarchy that breaks up the
traﬃc of a hypothetical university between the Engineering
School and the Medical School, and breaks up the traﬃc of
the Engineering School between the Structural Engineering
Department and the Computer Science Department. On the
right side of the cube we illustrate another hierarchy that
breaks up the traﬃc by protocol into TCP and UDP. When
we combine these hierarchies in the bottom of Figure 3 we
obtain a speciﬁc type of directed acyclic graph, a semi-
lattice. Nodes in this graph have up to k parents instead
of just one: one parent for each dimension along which they
are not deﬁned as *. For example, node UC represents the
UDP traﬃc of the Computer Science Department and has
as parents the nodes UE (the UDP traﬃc of the Engineer-
ing School) and C (the total traﬃc of the Computer Science
Department). Unlike unidimensional clusters, two multidi-
mensional clusters can overlap and still neither includes the
other: one can be more general along one dimension, while
the second can be more general along another one. For ex-
ample, clusters UE and C overlap (their intersection is UC)
but neither includes the other. As a result, the size of the
graph is much larger than the sizes of the trees representing
the hierarchies of individual ﬁelds: it is the product of their
sizes.
We use the phrase unidimensional ancestor of cluster X
along dimension i to denote the cluster that is identical to X
in its ith ﬁeld and has wildcards in all the other k − 1 ﬁelds.
This is also a unidimensional cluster along dimension i. In
our example, C is the unidimensional ancestor of UC along
the preﬁx dimension and U is its unidimensional ancestor
along the protocol dimension. We use the phrase children
of cluster X along dimension i to denote the clusters that
have exactly the same sets for all other dimensions and for
dimension i their sets are one step more speciﬁc (i.e. they
are children of the set used by X in the hierarchy of ﬁeld i).
For example S and C are the children of E along the preﬁx
hierarchy and UE and TE are its children along the protocol
hierarchy.
Computing Multidimensional Clusters
Our algorithm examines all clusters that may be above the
threshold; for each such cluster, the algorithm examines all
n ﬂows, and adds up the ones that match.
If the traﬃc
is above the threshold, the cluster is reported, otherwise it
is not. Explicitly evaluating all the clusters generated by
k
i=1 di, is not
the n ﬂows in the input, approximately n 	
an acceptable approach for the conﬁgurations we ran on.
Therefore our algorithm restricts its search (thereby reduc-
ing running time) based on a number of optimizations that
prune the search space.
The ﬁrst optimization exploits that all the unidimensional
ancestors of a certain cluster include it, so the cluster can be
above the threshold only if all its unidimensional ancestors
are also above threshold. We ﬁrst solve the k unidimensional
problems. After this, we restrict the search to those clusters
that have ﬁeld values appearing in each of the uncompressed
unidimensional reports. Next, observe that traversal of the
search space is such that we always visit all the ancestors of a
given node before visiting the node itself. Thus our second
optimization is to consider only clusters with all parents
above the threshold. This is very easy to check because in
our graph nodes have pointers to their parents. A third
optimization is to batch a number of clusters when we go
through the list of ﬂow records.
Even with all three optimizations, among all our algo-
rithms, this one produces the largest outputs and takes the
longest to run. For example, computing both packet and
byte reports with a 5% threshold takes on average 16 min-
utes for a one day measurement interval, 2 minutes for a one
hour measurement interval and 1 minute for a ﬁve minute
measurement interval using a 1 GHz Intel processor, however
using a threshold of 0.5% for a one day trace it takes over 3
hours to compute the uncompressed report. We believe this
algorithm can be improved signiﬁcantly. In [5] we bound
the number of high volume clusters in the multidimensional
k
case by s 	
i=1 di. While there are pathological inputs that
could force the size of the output close to its worst case
bound, the results for real data are much smaller.
Compressing Multidimensional Trafﬁc Reports
For the multidimensional case Operation 2, compression,
is absolutely necessary to achieve reports of reasonable size.
We ﬁrst bound the maximum size of the compressed report.
Lemma 3. For any traﬃc mix, there exists a compressed
k
i=1 di)/(max di).
report of size at most (s 	
sort more speciﬁc ﬁrst(cluster list)
foreach cluster in cluster list
for f ield = 1 to 5
COMPRESS REPORT
1
2
3
4
5
6
7
8
9
10
11 endforeach
endif
sum[i]=add estimates(cluster.childlists[f ield])
endfor
cluster.estimate = max(sum[i])