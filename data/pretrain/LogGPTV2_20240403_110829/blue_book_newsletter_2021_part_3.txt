    class Data(pydantic.BaseModel):
        regex: List[Regex]
    data = Data(**{"regex": ["abc", "123", "asdf"]})
    print(data)
    print(data.json())
    ```
### [Pipenv](requests_mock.md)
* New: Explain how to set cookies and headers in responses.
* New: Introduce the AWS SDK library and explain how to test it.
    [Boto3](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html) is
    the AWS SDK for Python to create, configure, and manage AWS services,
    such as Amazon Elastic Compute Cloud (Amazon EC2) and Amazon Simple Storage
    Service (Amazon S3). The SDK provides an object-oriented API as well as
    low-level access to AWS services.
    For [testing](boto3.md#testing), try to use [moto](boto3.md#moto), using the [Botocore's stubber](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/stubber.html) as fallback option.
* New: Explain how to test ec2, route53, s3, and rds resources.
* New: Explain how to test vpc and auto scaling group resources.
* Improvement: Explain how to extract the instance when testing autoscaling groups.
    Also track the [issue to add support to launch templates](boto3.md#issues).
* New: [Explain how to test security groups.](boto3.md#test-security-groups)
* Correction: [Add note that pagination is not yet supported when testing route53.](boto3.md#test-route53)
    I've [opened an issue](https://github.com/spulec/moto/issues/3879) to
    solve it.
* New: [Explain how to test IAM users and groups.](boto3.md#test-iam-users)
* Improvement: Monitor motor issue with the `cn-north-1` rds and autoscaling endpoints.
* New: [Testing full screen applications.](prompt_toolkit_fullscreen_applications.md#testing)
* New: [Pass more than one key.](prompt_toolkit_fullscreen_applications.md#pass-more-than-one-key)
    To map an action to two key presses use `kb.add('g', 'g')`.
* New: [Add note on how to debug the styles of the components.](prompt_toolkit_fullscreen_applications.md#styles)
    Set the style to `bg:#dc322f` and it will be highlighted in red.
* New: [How to use Conditional Containers.](prompt_toolkit_fullscreen_applications.md#conditional-containers)
    ```python
    from prompt_toolkit.layout import ConditionalContainer
    from prompt_toolkit.filters.utils import to_filter
    show_header = True
    ConditionalContainer(
        Label('This is an optional text'), filter=to_filter(show_header)
    )
    ```
* New: Introduce the pipenv package manager.
    [Pipenv](https://github.com/pypa/pipenv) is a tool that aims to bring the best
    of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the
    Python world.
### [Poetry](type_hints.md)
* Improvement: Explain how to ignore a linter error and a type error.
    With `# type: ignore # noqa: W0212`
* Improvement: [Explain how to define the type hints of functions and methods that use subclasses.](type_hints.md#allow-any-subclass)
    It's a complex topic that has taken me many months to get it right :).
* New: [Explain how to write type hints for generator functions.](type_hints.md#type-hints-of-generators)
* New: Explain how to log in using pass.
    ```bash
    pass show dockerhub | docker login --username foo --password-stdin
    ```
* New: Explain how not to store the credentials in plaintext.
    It doesn't work, don't go this painful road and assume that docker is broken.
    The official steps are horrible, and once you've spent two hours debugging
    them, you [won't be able to push or pull images with your
    user](https://github.com/docker/docker-credential-helpers/issues/154).
* Improvement: Explain how to change the command line help description.
* New: [Explain how to use watchtower to keep docker containers updated.](docker.md#how-to-keep-containers-updated)
    With [watchtower](https://containrrr.dev/watchtower/) you can update the running
    version of your containerized app simply by pushing a new image to the Docker
    Hub or your own image registry. Watchtower will pull down your new image,
    gracefully shut down your existing container and restart it with the same
    options that were used when it was deployed initially.
* Correction: Explain how to run the watchtower checks immediately.
    With the `--run-once` flag
* New: [Invoke other commands from a command.](click.md#invoke-other-commands-from-a-command)
    This is a pattern that is generally discouraged with Click, but possible
    nonetheless. For this, you can use the `Context.invoke()` or `Context.forward()` methods.
* New: [Define a TypeVar with restrictions.](type_hints.md#define-a-typevar-with-restrictions)
    ```python
    from typing import TypeVar
    AnyStr = TypeVar('AnyStr', str, bytes)
    ```
* New: [Use a constrained TypeVar in the definition of a class attributes.](type_hints.md#use-a-constrained-typevar-in-the-definition-of-a-class-attributes)
    If you try to use a `TypeVar` in the definition of a class attribute:
    ```python
    class File:
        """Model a computer file."""
        path: str
        content: Optional[AnyStr] = None # mypy error!
    ```
    [mypy](mypy.md) will complain with `Type variable AnyStr is unbound
    [valid-type]`, to solve it, you need to make the class inherit from the
    `Generic[AnyStr]`.
    ```python
    class File(Generic[AnyStr]):
        """Model a computer file."""
        path: str
        content: Optional[AnyStr] = None
    ```
* New: Deeply introduce Poetry, a python package manager.
    [Poetry](https://github.com/python-poetry/poetry) is a command line program that
    helps you declare, manage and install dependencies of Python projects, ensuring
    you have the right stack everywhere.
* New: [Debugging why a package is not updated to the latest version.](python_poetry.md#debugging-why-a-package-is-not-updated-to-the-latest-version)
* New: [Checking what package is using a dependency.](python_poetry.md#checking-what-package-is-using-a-dependency)
* New: [Try to use `pass` as a keyring backend to store the PYPI token.](python_poetry.md#configuration)
* Correction: Warn against upper version pinning.
    The main problem is that `poetry add` does [upper pinning of dependencies](versioning.md#upper-version-pinning) by default, which is a **really bad idea**.
### [Dash](python_logging.md)
* New: Explain how to log python program exceptions better than to a file.
    Using `logging` to write write exceptions and breadcrumbs to a file
    might not be the best solution because unless you look at it directly
    most errors will pass unnoticed.
    To actively monitor and react to code exceptions use an application monitoring
    platform like [sentry](https://sentry.io/welcome/).
    In the article I explain what are the advantages of using this solution
    and do a comparison between Sentry and [GlitchTip](https://glitchtip.com).
* New: [Testing Dash applications.](dash.md#testing)
    `dash.testing` provides some off-the-rack pytest fixtures and a minimal set of
    testing APIs with our internal crafted best practices at the integration
    level. The commit includes a simple example and some guides on how to test Dash application.
* New: [Test programs that use `sh`.](python_sh.md#testing)
    `sh` can be patched in your tests the typical way, with `unittest.mock.patch()`:
    ```python
    from unittest.mock import patch
    import sh
    def get_something():
        return sh.pwd()
    @patch("sh.pwd", create=True)
    def test_something(pwd):
        pwd.return_value = "/"
        assert get_something() == "/"
    ```
### [Code Styling](python_code_styling.md)
* Improvement: Don't use try-except to initialize dictionaries.
    Instead of:
    ```python
    try:
        dictionary['key']
    except KeyError:
        dictionary['key'] = {}
    ```
    Use:
    ```python
    dictionary.setdefault('key', {})
    ```
* New: Introduce the awesome, life saving library `pydantic_factories`.
    [Pydantic factories](https://github.com/Goldziher/pydantic-factories) is
    a library offers powerful mock data generation capabilities for pydantic based
    models and dataclasses. It automatically creates [FactoryBoy](factoryboy.md)
    factories from a [pydantic](pydantic.md) model.
    ```python
    from datetime import date, datetime
    from typing import List, Union
    from pydantic import BaseModel, UUID4
    from pydantic_factories import ModelFactory
    class Person(BaseModel):
        id: UUID4
        name: str
        hobbies: List[str]
        age: Union[float, int]
        birthday: Union[datetime, date]
    class PersonFactory(ModelFactory):
        __model__ = Person
    result = PersonFactory.build()
    ```
* Reorganization: Moved the semantic versioning commit guidelines to the semver article.
### [DeepDiff](deepdiff.md)
* Correction: Remove murmur from the installation steps.
    It seems it's the default for the new versions
* Improvement: Add warning that regular expressions are not yet supported.
    Until [#239](https://github.com/seperman/deepdiff/pull/239) is merged, the
    official library doesn't support searching for regular expressions. You can
    use [my fork](https://github.com/lyz-code/deepdiff) instead.
* Improvement: Remove advice to use my fork instead.
    The original one has already merged my [PR](https://github.com/seperman/deepdiff/pull/239) `＼\ ٩( ᐛ )و /／`. Beware though as the `regexp` are not enabled by default (against my will). You need to use the `use_regexp=True` as an argument to `grep` or `DeepSearch`.
### [Properties](factoryboy.md)
* New: Explain how to generate your own attributes.
    We earlier used lazy_attribute but if you want to use Faker inside the
    attribute definition, you're going to have a bad time. The new solution
    uses the creation of custom Fake providers.
* New: [Explain how to use `Enum` with factoryboy.](factoryboy.md#word-from-enum-choices)
* New: [Automatically generate a factory from a pydantic model.](factoryboy.md#automatically-generate-a-factory-from-a-pydantic-model)
    Sadly [it's not yet supported](https://github.com/FactoryBoy/factory_boy/issues/869), [it will at some point though](https://github.com/FactoryBoy/factory_boy/issues/836). If you're interested in following this path, you can start with [mgaitan snippet](https://gist.github.com/mgaitan/dcbe08bf44a5af696f2af752624ac11b) for dataclasses.
* New: Give an overview on Python's @property decorator.
### [Package Management](faker.md)
* New: Explain how to create your own provider.
    Useful to generate custom objects for testing purposes.
* New: [Explain how to create `Optional` data.](faker.md#create-optional-data)
    [`faker-optional`](https://lyz-code.github.io/faker-optional/) is
    a custom faker provider that acts as a wrapper over other Faker providers to return their value or `None`. Useful to
    create data of type `Optional[Any]`.
* New: [Create a random string with a defined format.](faker.md#create-a-random-string-with-a-defined-format)
    ```python
    faker.pystr_format("id-#######{{random_letter}}")
    'id-6443059M'
    ```
* New: [Create an IP address.](faker.md#create-an-ip-address)
    ```python
    faker.ipv4()
    ```
    If you want a CIDR, use `network=True`.
* New: Compare Poetry, Pipenv and PDM package management tools.
    Pipenv has broad support. It is an official project of the Python Packaging
    Authority, alongside pip. It's also supported by the Heroku Python buildpack,
    which is useful for anyone with Heroku or Dokku-based deployment strategies.
    Poetry is a one-stop shop for dependency management and package management. It
    simplifies creating a package, managing its dependencies, and publishing it.
    Compared to Pipenv, Poetry's separate add and install commands are more
    explicit, and it's faster for everything except for a full dependency install.
    I liked Poetry most, and in the end I didn't analyze `pdm`.
* New: [Describe what a dependency solver does.](python_package_management.md#solver)
    A Solver tries to find a working set of dependencies that all agree with each other. By looking back in time, it’s happy to solve very old versions of packages if newer ones are supposed to be incompatible. This can be helpful, but is slow, and also means you can easily get a very ancient set of packages when
    you thought you were getting the latest versions.
    In the section we compare Pip's and Poetry's solver.
* New: [Add downsides of Poetry.](python_package_management.md#poetry)
    It does upper version capping by default, which is becoming [a big problem](versioning.md#upper-version-pinning) in the Python environment.
    This is specially useless when you add dependencies that follow [CalVer](calendar_versioning.md). `poetry add` packaging will still do `^21` for the version it adds. You shouldn’t be capping versions, but you really shouldn’t be capping CalVer.
    It's equally troublesome that it upper pins [the python version](versioning.md#pinning-the-python-version-is-special).
### [FastAPI](fastapi.md)
* New: Introduce FastAPI the pydantic friendly python framework to build APIs.
    [FastAPI](https://fastapi.tiangolo.com/) is a modern, fast (high-performance),
    web framework for building APIs with Python 3.6+ based on standard Python type
    hints.
* New: Sum up the basic documentation.
    Explain how to:
    * [Sending data to the server](fastapi.md#sending-data-to-the-server):
        Through [path parameters](fastapi.md#path-parameters), [query parameters](fastapi.md#query-parameters) and [body requests](fastapi.md#body-requests).
    * [Handle errors](fastapi.md#handling-errors).
    * [Update data](fastapi.md#updating-data)
    * [Configure OpenAPI](fastapi.md#openapi-configuration)
    * [Test FastAPI applications](fastapi.md#testing)
    And add a lot of [more interesting features](fastapi.md#interesting-features-to-explore) I've discovered.
* New: [Explain how to log exceptions to sentry.](fastapi.md#logging-to-sentry)
* New: [Explain how to send raw data to the client.](fastapi.md#sending-data-to-the-client)
    With the [`Response`](https://fastapi.tiangolo.com/advanced/response-directly/#returning-a-custom-response) object.
* New: [Explain how to configure the application.](fastapi.md#configuration)
* New: [Explain how to inject a testing configuration in the tests.](fastapi.md#inject-testing-configuration)
* New: [Explain how to deploy it using Docker.](fastapi.md#deploy-with-docker)
* New: [Explain how to show logging messages in the logs.](fastapi.md#logging)
* New: [Explain how to make redirections with fastapi.](fastapi.md#create-redirections)
* New: [Explain how to run a FastAPI server in the background for testing purposes.](fastapi.md#run-a-fastapi-server-in-the-background-for-testing-purposes)
* Improvement: Add link to the Awesome FastAPI page.
### [Plugin System](python_plugin_system.md)
* New: Add beets system as a first approach.
    When building Python applications, it's good to develop the core of your
    program, and allow extension via plugins.
    I still don't know how to do it, but [Beets plugin system](https://beets.readthedocs.io/en/stable/dev/plugins.html)
    looks awesome for a first start.
### [Flask Restplus](flask_restplus.md)
* New: Introduce the Flask-RESTPlus library.