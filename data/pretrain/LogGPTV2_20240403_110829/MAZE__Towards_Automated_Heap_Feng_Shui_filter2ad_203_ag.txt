n, y∗
If there are integers xgi and ygi(i = 1,2..n) and
∆d f 1xg1 + ...∆d f nxgn − ∆dd1yg1 − ...∆ddmygm = 0
(2)
Equation 2 can be changed into:
∆d f 1xg1 + ...∆d f nxgn = ∆dd1yg1 + ...∆ddmygm
(3)
For equation 3, if n ≤ m, we select ∀xgi, and let
xgi=∑m−n+1
xgi j, and equation 3 can be changed into:
j=1
m−n+1
∑
j=1
∆d f 1xg1 +...∆d f i
xgi j +...∆d f nxgn = ∆dd1yg1 +...∆ddmygm
(4)
For equation 4, the left and right side have the same number of
terms. So we can select ∀xgi and ∀ygi from each side, and let
xgi=lcm(∆d f i, ∆ddi)÷∆d f i, and ygi=lcm(∆d f i, ∆ddi)÷∆ddi,
Because ∆d f 1...∆d f n > 0 and ∆dd1...∆ddm > 0, therefore xgi
Then Linear Diophantine Equation 1 has a general
> 0(i = 1,2...n) and ygi > 0(i = 1,2...m).
solution (where k are integers):
x1 = x∗
1 + kxg1
...
xn = x∗
n + kxgn
y1 = y∗
1 + kyg1
...
ym = y∗
m + kygm
Because xgi > 0(i = 1,2...n) and ygi > 0(i = 1,2...m), therefore
i are positive or negative, we can get a
no matter x∗
positive solution by increasing k.
i and y∗
USENIX Association
30th USENIX Security Symposium    1661
B Linear Additivity of Dig and Fill Primitives
In this section, we assume that the size of O and P are equal.
If their sizes are not equal, the cause of non-linear additivity
may be different, but MAZE can still use the same techniques
to derive new linear additive primitives.
If the Delta Distance of a dig and a ﬁll primitive are
d1 and d2, after MAZE inserted them into the POC path, the
Target Distance changed from d to d + d1 + d2, then we
call the two primitives are linearly additive. Only if all the
primitives in Linear Diophantine Equation are linearly
additive, the solution can be used to guide the combination of
primitives and counteract the noise. But due to the complexity
of allocators, especially the splitting and merging mechanism,
not all the primitives are linearly additive. The non-linear
additivity can be divided into two types:
Non-linearly accumulated with the same type of primi-
tives: This type of non-linear additivity is caused by the
mix of allocations and deallocations in one primitive. For
example, if a deallocation sub-primitive of a dig primitive
has allocation operations, they may wrongly ﬁll other holes
created by other dig primitives, so this type of dig primitives
are not linearly accumulated with themselves.
Non-linearly accumulated with different types of primi-
tives Many allocators support the splitting mechanism. If
there is a memory hole that is larger than the size of an alloca-
tion, allocators usually split the bigger chunk into two smaller
parts and return one part to service the allocation.
After an in-depth analysis, we found three types of heap
operation mainly cause this type of non-linear additivity. 1)
Bad allocation: its size is not equal to the target allocation
O’s. 2) Bad hole: its size is not equal to the target hole P’s.
3) Little allocation: its size is less than half of P’s.
It because, according to rule 3 in Section 2.3.2, if the mem-
ory hole’s size is equal to the allocation request, it has a higher
re-use priority. So bad holes in dig primitives will always
have a lower priority than P. Therefore they can not place
the target allocation O. It means that they have no contri-
bution to Delta Distance. But according to rule 2 in Sec-
tion 2.3.2, the bad allocations in ﬁll primitives can be
placed in any freed area, including the bad holes and the
target hole P, so they can contribute to Delta Distance. If
the bad allocations ﬁll the bad holes, they do not have
linear additivity.
For little allocation, due to the splitting mechanism
in allocators, P will be cut into a smaller hole, and O can not be
placed at P again, which means the hole is ﬁlled. So the Delta
Distance is measured as +1. But if the primitive is added
again, the little allocation will be placed at the rest part
of P, i.e. Delta Distance is 0. Therefore this primitive does
not have linear additivity.
To solve the above problems, MAZE utilizes three tech-
niques:
Figure 8: a Grouping technique example.
Grouping Grouping’s core idea is to put multiple dig or
ﬁll primitives together and create a new primitive which is
linearly accumulative with itself.
As shown in Figure 8, there is a dig primitive which is not
linearly accumulated with itself. Then MAZE keeps inserting
this dig primitive and the number of memory holes and allo-
cations grows periodically, so the Delta Distance of this
dig primitive will also change periodically. MAZE puts all the
primitives in one cycle together and derives a new dig primi-
tive. In Figure 8, one cycle includes three dig primitives, after
grouping, Delta Distance of the new dig primitive group is
-6 (-1-2-3), and the new dig primitive is linearly accumulative
with itself. The same operation can also be applied for ﬁll
primitives.
Correcting MAZE also needs to correct
the Target
Distance and Delta Distance. For example, if there is a
deallocation in a ﬁll primitive and the allocator adopts a LIFO
policy, the memory hole created by this ﬁll primitive has a
higher priority than the target hole P. So O will always be
placed into this noise hole. To reach the expected heap layout,
this memory hole and P must coincide, which means the noise
allocation should be placed in P and then be freed to create
a same memory hole as P.So Target Distance needs to be
corrected.
MAZE corrects the Delta Distance and calculates a d f ix
and generates a new Linear Diophantine Equation as be-
low: ∆d1x1 +··· + ∆dixi + ... + ∆dnxn + d + d f ix = 0
x1,x2,x3...xn ≥ 0
xi > 0
Shifting There are also bad allocations and bad holes
in POC’s execution trace. So after inserting a linear additive
primitive, the actual change of Target Distance may not
equal to the Delta Distance.
So MAZE utilizes the shifting technique to counteract
the non-linear additive factors in POC. If there are bad or
little allocations, MAZE keeps inserting dig primitives
1662    30th USENIX Security Symposium
USENIX Association
Test pathmalloc id2(target allocation)AB1CB2Dig primitivedeallocationsallocations(dependence)free id1(target hole)Fill primitiveallocationsdependencedeallocationsallocations(dependence)deallocationsallocations(dependence)deallocationsallocations(dependence)…….Delta : -5Delta : -1Delta : -2Delta : -3…Delta : 3Delta : 2Delta : 1Delta : 2Delta : 1new groupnew groupmalloc id1allocationsallocationsallocationsallocationsdependencedependencedependencedependenceuntil all of them are placed in the newly created memory
holes. Similarly, if there are bad holes, MAZE keeps insert-
ing ﬁll primitives to ﬁll all of them. Then MAZE evaluates
the new Target Distance and generates another Linear
Diophantine Equation.
C Generate Diophantine Equations Based on
Primitives’ Linear Additivity
After grouping, correcting and shifting techniques, MAZE
can derive new heap layout primitives which have better lin-
ear additivity, and then generate different types of Linear
Diophantine Equations
C.1 Multi-Variable Diophantine Equation
If ﬁll primitives do not contain bad allocations or
little allocations. These ﬁll primitives are linearly ac-
cumulated with almost arbitrary dig primitives. If MAZE can
also ﬁnd dig primitives that are linearly accumulated with
dig primitives, then MAZE can generate a Multi-variable
Diophantine Equation to derive the expected memory lay-
out. Similarly, MAZE also searches dig primitives which con-
tain no bad hole, and the following process is the same.
C.2 Two-Variable Diophantine Equation
If a ﬁll pritimive contains bad or little allocations,
or a dig primitive contains bad holes, but they are lin-
early accumulated with each other, MAZE will generate a
Two-Variable Diophantine Equation for them. It may
be extremely complicated to ﬁnd three or more primitives
that containts bad allocations or holes but are linearly
accumulated with each other. It because MAZE has to enumer-
ate all the possible permutations. So MAZE only generates
Two-Variable Diophantine Equation for this situation.
C.3 Half Diophantine Equation
contains
bad or little
allocations or bad holes, and MAZE can not ﬁnd
a pair of dig and ﬁll primitives that are accumulated with each
other, MAZE will utilize the grouping technique again. In
this grouping process, MAZE will select a pair of primitives
and insert lots of dig primitives ﬁrst, then keep inserting ﬁll
primitives and derives another new ﬁll primitive group. This
new ﬁll primitive that the dig primitive are linearly additive
now.
primitives
If
all
the
In this situation, it is almost impossible to measure
the Target Distance, so MAZE will generate a Half
Diophantine Equation without Target Distance. If the
Delta Distance of the dig and the new ﬁll primitive are co-
prime, which means that gcd(∆d1, ∆d2) = 1, it can always
divide Target Distance and the Linear Diophantine
Equation will always have solutions.
MAZE infers
solution of Half Diophantine
equation in a novel way. If the Target Distance is greater
than 0, MAZE keeps inserting dig primitives, and if the
the
Figure 9: The example of locating a memory hole.
Target Distance is less than 0, MAZE keeps inserting ﬁll
primitives, until O is placed at P.
D Solutions to Equation Decoupling
For a speciﬁc heap layout, MAZE needs to ﬁnd suitable
positions, i.e. memory holes, and then utilizes Dig & Fill
to place target objects at the appropriate target holes.
As discussed above, consistency between the hole creation
order and the object allocation order affects the success rate, as
well as the lack of primitive instrumentation points. Because
of these factors, MAZE proposed two techniques to adjust
the order of target allocations and target hole creations (de-
allocations), so that the system of Diophantine equations can
be decoupled.
Locate Suitable Memory Holes Based on the vulnerabil-
ity type and exploit technique, MAZE locates a potential target
hole P. For example, to exploit a heap overﬂow vulnerabil-
ity, a attacker needs to place a sensitive heap object next to
the overﬂowed object. As shown in Figure 9, MAZE will lo-
cate the overﬂowed object (Vul_object) ﬁrst. If the adjacent
object (x_object) can be freed in another primitive (free_x)
and the size is equal to the sensitive object (victim_object),
MAZE will insert the deallocation primitive after the alloca-
tion of the overﬂowed object. Then MAZE utilizes Dig &
Fill to generate a Linear Diophantine Equation for the
sensitive object, because the ﬁll and dig primitives’ inserting
point is after the allocation of the overﬂowed object, so that it
will not affect its position. Similarly, MAZE can also locate
the sensitive object ﬁrst, then inserts a deallocation primitive
to free the object ahead of it, to create a target hole for the
overﬂowed object.
If the adjacent object can not be freed in another primi-
tive, MAZE will try to ﬁnd appropriate memory holes (e.g.
contiguous holes) in the whole heap layout. If these memory
holes can be freed in different heap primitives, MAZE can
generate independent Diophantine equations by adjusting the
Dig & Fill timing for each target object’s allocation and
target hole’s deallocation. The core idea is to start a new Dig
& Fill after the previous object’s Dig & Fill is ﬁnished.
USENIX Association
30th USENIX Security Symposium    1663
beforeafterMemory(cid:3)(cid:91)(cid:66)(cid:82)(cid:69)(cid:77)(cid:72)(cid:70)(cid:87)(cid:57)(cid:88)(cid:79)(cid:66)(cid:82)(cid:69)(cid:77)(cid:72)(cid:70)(cid:87)(cid:335)(cid:335)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)(cid:66)(cid:82)(cid:69)(cid:77)(cid:72)(cid:70)(cid:87)Timelinecreate vulcreate victimtrigger vulMemory(cid:57)(cid:88)(cid:79)(cid:66)(cid:82)(cid:69)(cid:77)(cid:72)(cid:70)(cid:87)(cid:335)(cid:335)(cid:3)(cid:91)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:89)(cid:76)(cid:70)(cid:87)(cid:76)(cid:80)DigFillfree_xFigure 10: The example of creating memory holes.
Create Suitable Memory Holes
If MAZE failed to locate
suitable target holes, it would try to create them. First, MAZE
searches for the heap primitive whose last allocation (size
is equal to target object, i.e. overﬂowed object) can be freed
in another primitive. For example, as shown in Figure 10,
x_object’s size is equal to the overﬂowed object, and it is the
last allocation of create_x, it can also be freed in another prim-
itive (free_x). Then MAZE searches for a primitive, which
contains an allocation (size is equal to another target object,
i.e. the sensitive object). In this example, it is the create_y.
The next step is to insert create_x and create_y into the POC’s
beginning. Before the insertion, MAZE will utilize heap spray
to ﬁll all the holes in heap layout, so that all the objects allo-
cated in create_x and create_y can be adjacent. Then MAZE
will calculate the number of objects allocated before y_object
in create_y and create the same amount of memory holes
(the free holes hexagon in Figure 10) so that x_object and
y_object can be adjacent. In the end, MAZE will free x_object,
and then utilize Dig & Fill to generate a Diophantine equa-
tion for the overﬂowed object, after the object is placed at
x_object’s address, MAZE will use Dig & Fill to place the
sensitive object. This solution can be applied to segregated
storage allocators (tcmalloc, jemalloc) and boundary tag allo-
cators (ptmalloc, dlmalloc).
If there is no such primitive, MAZE will create a memory
hole with enough size to hold multi-objects. Then MAZE
slightly changes the Dig & Fill algorithm to support plac-
ing an object to a memory hole with unequal size. The only
difference is the cause of non-linear additivity. But MAZE
can still use grouping, correcting and shifting techniques to
derive new linear additive primitives. In the end, MAZE only
needs to place objects to the big memory hole one by one by
using Dig & Fill. This solution can be applied to boundary
tag allocators that support the splitting mechanism, such as
ptmalloc and dlmalloc.
Figure 11: Proportion of multi-variable, two-variable and
half Linear Diophantine Equation in different nonlinear
additive situation.
E Inﬂuence of Nonlinear Additivity
The mix of allocations and deallocations and size diver-
sity are non-linear additive factors. So we also evaluated the
Dig & Fill algorithm on a more complex heap layout situ-
ation. In this evaluation, the allocation primitives count is 6,
deallocation is 5, and the noise number is 5.
Mix of allocations and deallocations: We added 2 to 8 al-
locations to each dig primitive’s deallocation part and 2 deallo-
cations to each ﬁll primitive and evaluated MAZE against 200
random test cases. The result is shown in Figure 11. Because
all the allocations’ size is the same, most of the generated
Diophantine equations are multi-variable.
Size diversity: We added a size list that contains 5 random
allocation sizes, and each primitive selected one size form
this list randomly, the selection probability of each size is
5:2:1:1:1. The result is also shown in Figure 11. In this test,
for almost 50% of the test cases, MAZE can only generate
half Diophantine equations.
Mix + Size diversity: We put above two nonlinear additive
factors together, and the result is also in Figure 11. MAZE
still generated half Diophantine equations for 50% of the test
cases. So we can conclude that the size diversity factor has
more inﬂuence on the nonlinear additivity of primitives, and
MAZE has to generate more half Diophantine equations.
1664    30th USENIX Security Symposium
USENIX Association
beforeafterMemory(cid:3)(cid:91)(cid:66)(cid:82)(cid:69)(cid:77)(cid:72)(cid:70)(cid:87)(cid:335)(cid:335)(cid:3)(cid:92)(cid:66)(cid:82)(cid:69)(cid:77)(cid:72)(cid:70)(cid:87)TimelineMemory(cid:335)(cid:3)(cid:91)(cid:66)(cid:82)(cid:69)(cid:77)(cid:72)(cid:70)(cid:87)(cid:11)(cid:73)(cid:85)(cid:72)(cid:72)(cid:71)(cid:12)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:92)(cid:66)(cid:82)(cid:69)(cid:77)(cid:72)(cid:70)(cid:87)(cid:11)(cid:73)(cid:85)(cid:72)(cid:72)(cid:71)(cid:12)(cid:335)free holesdig and ﬁlldig and ﬁll(cid:335)(cid:335)create_xcreate_yfree_xfree_y(De)alloc MixSize DiversityMix + Diversity0.00.20.40.60.81.0ptmallocdlmallochalfbinmulti