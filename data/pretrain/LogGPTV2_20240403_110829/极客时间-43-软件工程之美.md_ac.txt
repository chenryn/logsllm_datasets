## 5. 安全性这些年，互联网发展很快，但是安全事故却层出不穷：开房记录被泄漏、密码被泄漏、比特币被盗......这暴露出业界的普遍问题，对安全的重视度不够。所以信中也不止一次提到安全问题：> 公司已经明确，把网络安全和隐私保护作为公司的最高纲领。> 我们要深入钻研软件技术，尤其是安全技术。> 我们要遵循权限和攻击面最小化等安全设计原则，科学设计模块之间的隔离与接口，提升安全性> "编写出简洁、规范、可读性强、健壮安全的代码。要打造一个安全的软件，就是首先要有安全意识，然后要懂安全技术，在整个开发过程中要从架构设计、代码等方方面面去注意。
## 6. 技术是工具这些年，开发界一直有些不好的风气，就是都认为自己的技术是最牛的，写后端的看不上前端的，用Angular 的看不上 Vue，写 PHP的认为自己的语言是全世界最好的，做开发的还看不上做测试的。但是这封信中有一句话，大家不要忽视，"软件技术是我们打造产品的基本工具"，技术只是工具，只是我们用来打造产品的工具！> 技术是否先进，技术选择是否合理，将决定我们软件的高度。技术的选型，不仅要看技术是不是先进，还要看它是不是适合当前的产品项目。并不是什么技术很新酷，就用什么！> 我们要深入学习架构与设计、编码、测试、安全、可用性、性能、维护性、体验等技术，并科学运用这些技术。既然技术只是工具，那么我们就没必要给自己设置各种技术壁垒障碍。如果开发就只学编码，测试就只学测试，认为安全问题，那应该是搞安全的人的事，这样的话是非常不利于团体协作的。每个人都能在一个领域深入地钻研，同时对其他领域有一定了解，对个人、对团队都是非常有利的一件事。这样的话，也不需要DevOps 这种为了兼顾开发、测试、运维三种角色而存在的工种。
## 7. 一致性我们做软件开发工作的人都知道，一致性很重要，然而现实中这样不一致的例子却比比皆是：-   从客户的需求，到最终的实现，总是差别很大；-   我们良好的设计，在编码实现的时候，因为赶进度、开发人员偷懒等各种原因绕开设计，抄近路，最后设计和编码无法一致；-   我们在项目初始的时候制定了很多规范，却总是不了了之，难以执行；-   ......通常是一步错步步错，就像下面的秋千图：客户想要一个给三个孩子玩的秋千；产品经理以为就是一个板子加两绳子就行；架构师发现除非把树截开，否则秋千没法荡起来的；程序员以为用绳子和板子连一起就完事了；而真正满足客户需求的，也就只要在绳子上挂个轮胎而已！![](Images/3a3358308eb61cca73d1130adf9c4765.png){savepage-src="https://static001.geekbang.org/resource/image/f5/12/f5cab900cf55678259b63bc6c21cab12.png"}一致性在软件开发领域，一直都是理想美好而现实却很残酷，信中也提到：> 我们要遵守过程的一致性。遵守适用的法律法规、遵循业界共识的标准、规范，确保规范到实现的一致性、代码到二进制的一致性。架构要符合架构原则，设计要遵循设计模式，代码要符合编程规范，最终做到需求与实现一致，达成各项对客户的承诺。我们只有脚踏实地做好每一步，才能真正打造出可信的高质量产品。无论这个目标有多难，但是从"遵守过程的一致性"开始，在每个阶段都去做到一致性，"脚踏实地做好每一步"，还是有希望能做到"真正打造出可信的高质量产品"。
## 8. 改变习惯在实施软件工程的过程中，有两个难题，一个就是转变思想，另一个就是改变习惯了，这种改变的过程也一定是很痛苦的。> 为此，我们要改变行为习惯，追求精品。我们要开放透明、积极和勇于揭示问题并主动推动改进。软件开发是一种创造性和艺术性的工作，需要充分发挥我们的聪明才智和潜力。我们要改变只重视功能结果、不重视代码质量的行为习惯，要严格遵守软件工程规范；改变被动的修修补补；改变碎片化知识获取，主动去学习提升并贡献经验、代码，形成共享知识库。我们需要改变的行为和习惯还有很多，对绝大多数人来讲都将是一个痛苦的转变过程，会脱一层皮，但我相信大家能够迎接这种挑战。从事软件开发工作越久，恐怕养成的坏习惯就越多，信中列的几条都很有代表性：-   "只重视功能结果、不重视代码质量。"功能实现完了就完事了，质量那是 QA 的事。这种坏习惯不改,质量是很难有保障的。-   "不遵守软件工程规范。"软件工程的各种规范不是约束，也不是摆设，而是实实在在为了团队整体更好地协作。对于定好的规范，要严格执行，不合理的规范，也要提出来一起改进。-   "被动的修修补补。"为了能继续凑合，继续修修补补，而没有考虑重构改进，也是一个不好的习惯。-   "碎片化知识获取，不主动去学习提升。"在现在的信息时代，碎片化的知识获取是容易的，但是像软件工程这种知识，仅仅通过碎片化的学习还是不够的，必须主动的，系统的去学习，虽然这个过程会很辛苦，但是非常有必要。-   "不愿意贡献经验、代码，不去形成共享知识库。"很多人不愿意去分享知识和经验，有的是因为太懒，有的是觉得没什么好处。但是分享本身就是学习和提升的最好手段。知识库这种事不仅是对别人有帮助，对自己也是一个特别好的学习精进的过程。想象下你新加入一个团队，如果这个团队有很好的知识库，你可以通过知识库，很快上手工作。同样的，如果你把你的经验写到知识库，后面的新人也可以从你的分享中受益。
## 9. "软件工程"和"质量工程"需要依靠架构技术> "软件工程"和"质量工程"需要依靠架构技术，而不是依靠 CMM 和 QA> 管理流程。一切工程问题，首先要思考能否通过技术解决，当前技术无法解决的问题，暂时由管理手段代劳，同时不停止寻找技术手段。所有的涉及到的管理问题，最终都要归结到人管理还是制度管理的问题上，软件项目管理也不例外。如果过多的依赖于人的管理，那么项目经理的职责就太重了，优秀的项目经理本身就是稀缺资源，最终会变成瓶颈。所以通过架构技术和工具，把管理流程落实下来是一个非常好的方式。有两个例子可以很好地说明这点。早些年软件服务规模庞大、模块耦合度紧密，所以需要一个庞大的开发团队，团队一大，沟通成本就高，进而管理成本很高。后来微服务这种架构提出后，将大的服务拆成小的服务，整个组织也从大项目部门拆分成各个小组，各小组可以独立更新维护。另一个例子是，以前单元测试和代码审查还有自动部署很难执行，后来借助源代码管理工具和CI（Continuousintegration，持续集成）工具，就可以很容易地进行代码审查，并且可以确保单元测试跑通过后才进行部署。这一点其实信中也有体现：> 我们将全面强化以 Committer> 角色为核心的代码审核和提交机制，代码经过更加严格和系统的审核才能合入版本。为此我们将建立一支更高水平的> Committer> 角色群体，负责软件架构的看护、代码的审核和提交，整体保障合入代码的高质量。我们要变革考核机制，要让架构设计好、代码写得好的人脱颖而出，对编程能力不满足要求的人给予帮助和培训。但任何人如果编写的代码长时间不能合入版本，将会被团队抛弃。
## 10. 软件工程就像一个国家的农业> 软件工程就像一个国家的农业，是最基础的设施！看到这句时，我很感动。这些年软件工程被提起的其实不多，大家关注更多的是各种新酷的技术，而对于这种软件开发最基础的理论视而不见。还有人一提到软件工程，就马上说软件工程不是银弹。软件工程从来不说自己是银弹，就像现代医学，也不会号称自己包治百病，它只会不断改进，对症下药。好，这就是我对这封信的全部解读，我希望它能帮助你更好地理解软件工程，认识到软件工程的重要性。如果你觉得这篇文章对你有一些启发，也欢迎把它分享给你的朋友。![](Images/da183fec69b316d65c37d6f003a9f298.png){savepage-src="https://static001.geekbang.org/resource/image/31/af/315c3c753591fbaf480f39cdc9e0f3af.jpg"}