mismotch user
101
Love
11
user_id
102
Love
11
2
103
Hate
11
3
username
104
Love
11
password
join_date
first_name
last_name
mismatch_response
gender
birthdate
response_id
topic_id
city
response
user_id
name
state
category
topic_id
picture
432
第8章
---
## Page 469
控制你的数据，世界在你手中
mismatch user
user_id
mismatch_user
username
vser_d
password
mismatch_response
join_date
response_id
inetles
first_name
category
last_name
topic
gender
response
mismatch_response
birthdate
user_id
response_d
topic
user_id
city
state
101
Appearance
Tattoos
Love
11
picture
102
Appearance
Cowboy boots
Love
11
103
Entertainment
Reality TV
Hate
11
104
Entertainment
Horror movies
Love
11
mismatch_user
mismatch user
eser_dserompossword
res
user_id
11
jnettles
**...*..
Love
username
11
jnettles
........
Love
Hate
password
11
jnettles
........
3
Love
join_date
11
jnetles
***.....
4
first_name
last_name
gender
mismatch_topic
birthdate
mismatch_topic
name
cetegoery
city
topic_id
1
Toftoos
state
name
2
Cowboy hats
picture
category
3
Reality TV
Entertainn
topic_id
Horror movies
4
Entertainment
response
你现在的位置》
433
---
## Page 470
mismatch的最佳数据库模式
Mismatch数据库需要存储用户对好恶主题的响应，另外还要存储主题名及相应的类别。
xeRciSe
以下是将类别、主题和响应加人Mismatch数据库的3种不同数据库设计。你认为哪一个
SoLUtiOn
最合适，请圈出并说明为什么。
首先，可以确定用户给出好恶响应所涉及的新数据只是响应本身
这一点很重要—
一数据库中所有其他内容都是固定的，至少从用
户的角度来看是这样。
mismatch_topic
mismatch_user
topic_id
nome
谁说过越简单超好：这个数据库模式将
Taftoos
Appearance
响应存储在自己单独的表中，与不受响
wser_iwerr
psrd
2
Cowbay hats
Appearance
应直接影响的其他数据分离。这里不会
3
Reality TV
++*++**
Entertoinment
因为响应而导致重复，因为用户、类别
Horrormovies
Entertoinmen
和主题都在mismatch_zesponse表之外。
新的mismatch_topic表存
储了主题名及其相应类
别。
mismatch_response
mismatch user
101
Love
11
1
102
user_id
Love
11
2
对于各个响应没有
103
Hate
11
3
重复的数据，这一点
username
104
Love
11
4
非常棒！
password
join_date
first_name
last_name
mismatch _response
gender
mismatch_topic
birthdate
response_id
topic_id
city
response
user_id
name
state
category
topic_id
picture
个
mismatch_response表将用户和主题通过
user_id和topic_id列连接在一起。
原mismatch_user表仍保持
不变。
434
第8章
---
## Page 471
控制你的数据，世界在你手中
响应没有存储在用户表中，这一点很好。
但是这里有太多的重复数据，因为类别和
主题金对每一个响应重复。
mismatch user
G
user_id
mismatch_user
username
ser_dusenam
password
mismatch_response
join_date
response_id
1
jneles
........
first_name
category
last_name
topic
gender
response
mismatch_response
birthdate
user_id
response_d
catogery
topie
city
state
101
Tattoos
Love
11
picture
102
Cowboy boots
Love
11
103
Entertain
Reality TV
Hate
11
104
Entertair
11
类别和主题对每一个响应重
复，实在太浓费了。
用户数据对每一个响应都重复，
这太可怕了。
V
把类别和主题分离到它们自己
mismatch_user
mismatch_user
的表中，这种想法还不错，不
user_d
poswordopkrespose
过我们必须为每一个响应创建
user_id
一个用户行。这样一来，对子4
1
jnetles
1
Love
username
个响应就会有4个3ohans。这可
11
jnetfles
*****.**
2
Love
password
不太好！
11
jnetles
3
Hate
Love
join_date
1
jneles
+*******
4
first_name
last_name
gender
mismatch_topic
birthdate
mismatch topic
category
city
topic_id
pk
nome
Taltoos
Appearance
state
name
1
2
Cowboy hats
Appearance
picture
category
3
Reolity TV
Entertainment
topic_id
4
Horror movies
Entertainment
response
你现在的位置
435
---
## Page 472
mismatch的模式使用了外键
关联多个表
将表连接在一起构成一个一体化数据系统，这需要使用键（key）。
外键是一个表中
我们已经使用了主键（primarykey）为表中的数据提供唯一的标识符，
不过我们现在还需要外键（foreignkey）将一个表中的一行链接到另一
的一列，它引用了
个表中的一行。一个表中的外键引用另一个表的主键，从而可以建立
另一个表的主键。
这两个表之间的一个联系用于查询。
前面的练习中得到的Mismatch模式依赖于mismatch_response表中
的一组外键将响应行连接到其他表中的用户和主题行。
mismatch_user
OP!Josn
记住，这个符号标识一
username
个主键。
这个主键不仅唯一标识mismatch
password
topic表中的主题，还将主题连接
到mismatch_response表中的响应。
join_date
first_name
mismatch_response
last_name
response_idO
mismatch_topic
gender
response
topic_idO
birthdate
user_id
name
city
topic_id
category
state
picture
mismatch_responsefomismatch_topic
表合作来存储对主题的好恶响应，
这个箭头表明，
mismatch_uset表通
这个符号表示这个列是一个
<一猫<一第
过键连接到mismatch_response表。
外键，引用另一个表中的
远足
主键。
如果没有外键，将很难将一个表中的数据与另一个表中的数