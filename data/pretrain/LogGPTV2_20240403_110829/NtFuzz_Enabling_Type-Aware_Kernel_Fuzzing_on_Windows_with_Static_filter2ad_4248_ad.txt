i
j
k
...
}
(b) Example without struct.
Fig. 8. Example for the inference of structure allocated on stack.
High
(d) Stack layout for (b).
where the function f allocates a structure s on the stack. At
the binary level, the initialization of the two int ﬁelds cannot
be distinguished from the initialization of two local variables.
That is, the binaries obtained from compiling the two different
sources in Figure 8a and Figure 8b will be identical. Therefore,
if a syscall argument is a pointer to the stack, we cannot
decide whether it is a pointer to a structure (e.g. &s) or a
singleton variable (e.g. &i). If we conservatively consider it
as a structure, we have to determine its boundary. We may
assume that the structure continues until the end of the stack
frame, but we will end up having too many spurious ﬁelds.
We heuristically address this problem by observing memory
access patterns of a function. First, when an adjacent stack
variable is deﬁned but never used, we consider it as a structure
ﬁeld passed to the syscall. Second, if such a variable is used
without any deﬁnition, we consider it as a structure ﬁeld
initialized by the syscall.
Assume that we are inferring the syscall type at Line 7
of Figure 8a. To decide the boundary of the structure s, we
ﬁrst examine the most adjacent next location of it, which is
s.y in this case. Since this location is deﬁned at Line 5 but
not used anywhere within the function, we conclude that this
location must be a part of the structure s. In contrast, for
the next adjacent location (int k), we can observe its use
at Line 8. Therefore, we decide that this location does not
necessarily belong to the structure. To avoid including spurious
ﬁelds, we conclude that the structure has only two ﬁelds.
For ﬁnding undeﬁned/unused locations, we use the standard
reaching deﬁnition analysis and liveness analysis [1].
2) Array Inference: There are mainly two ways to infer
array types. First, a known array type from a documented API
may ﬂow into a syscall. We found that an array size is often
declared with a variable, which means that the array size is
passed to a function as a separate argument. Let us consider the
example in Figure 9. The declaration of the Data structure is
annotated with the SAL annotation _Field_size_, which
describes that the size of the array buf is speciﬁed by the
ﬁeld n. When a Data structure ﬂows from a documented API
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
683
1
2
3
4
5
6
7
8
9
void f(struct Data* d) {
syscall_1(d->buf, d->n);
}
void g(x) {
p = malloc(x);
memset(p, 0, x);
syscall_2(p, x);
}
VI. KERNEL FUZZER DESIGN
In this section, we present the design details of the kernel
fuzzer module, which utilizes type information obtained from
the static analyzer and runs type-aware fuzzing on syscall
interfaces to ﬁnd kernel vulnerabilities.
A. Launcher
struct Data {
_Field_size_(n)
int* buf;
size_t n;
};
(a) Example snippet in C.
(b) The Data structure.
Fig. 9. Example for the array inference.
function to the function f, we know that the ﬁrst argument of
the syscall_1 is a pointer to an int array, and the second
argument of it is the size of the array.
Second, NTFUZZ can also directly infer an array type by
observing the memory allocation pattern. Let us consider
function g in Figure 9. Recall from §V-B, we initialize the
argument x with a symbolic value. In Line 8, we can ﬁgure
out that the size of the heap object pointed to by p is always
the same as x. Therefore, we can infer that the ﬁrst argument
of the syscall is an array pointer, whose size is given by the
second argument of the syscall.
constraints. For
3) Resolving Conﬂicts: Due to the over-approximating
nature of static analysis, we inevitably encounter con-
tradictory type
analysis
can return an abstract value for a syscall argument as
(cid:104)α, φ,{handle, integer}(cid:105). When such contradictory type con-
straints are encountered, a sound type system like TIE [45] will
output a (cid:62) type. However, since the goal of our analysis is to
help in type-aware kernel fuzzing, we try to emit more precise
type information instead of returning too many (cid:62) types.
example, our
To this end, we aggregate the type information obtained
from different call sites of a syscall. The key intuition here is
that since the same syscall is often invoked from multiple dif-
ferent functions, we can have a majority vote from them. While
some of them may suffer from imprecise results, we expect the
remainders to yield accurate type information. Therefore, for
each syscall argument, we collect type constraints from every
call site of the syscall, and select the majority type as its ﬁnal
type. Note that such a decision has to be recursively performed
in certain cases. For example, when a syscall argument is a
pointer type, we should determine the type of the pointee again
with the majority decision.
D. Implementation
To implement the binary front-end, we imported the B2R2
project [36], and wrote 739 source lines of our own F# code.
For the API speciﬁcation front-end, we wrote 1,854 source
lines of F# code. We also wrote 1,239 lines of Lex/Yacc rules
and used FsLexYacc [89] package to automatically generate
the parser code for SDK header ﬁles. Finally, the core engine
for static analysis and type inference is implemented in 6,227
source lines of F# code. Although our analyzer currently
targets Windows binaries only, the idea is general enough to
be extended to other OSes. The main engineering challenge is
on modifying the front-end.
Our kernel fuzzer runs by intercepting syscalls requested by
a seed application. Speciﬁcally, it mutates syscall arguments
encountered during the execution of the program. This type
of kernel fuzzing technique is often referred to as hooking-
based fuzzing [8], [74]. Hooking-based fuzzers can easily
explore deep kernel states by means of valid syscall sequences
generated from a regular program execution.
It is crucial for hooking-based fuzzers to provide proper
user inputs to the seed application in order to observe various
syscalls. Since most Windows applications require GUI inter-
actions, such as clicking buttons or dragging icons, hooking-
based fuzzers typically run with a proxy script
that per-
forms GUI interaction. NTFUZZ has the same requirements.
Therefore, we manually wrote a Python script for each seed
application listed in §VII-A for our evaluation. Although such
manual effort is inevitable, writing a script for GUI interaction
does not require domain-speciﬁc knowledge and expertise as
in template-based fuzzers that require writing harness code,
e.g., kAFL [84]. In our experiment, the size of the scripts
used for each application was only 29 SLoC on average.
We implement syscall hooking by directly modifying the
System Service Descriptor Table (SSDT) [10]. Note that on
x86-64 Windows, Kernel Patch Protection [59] prevents this
hooking mechanism. Therefore, we have to use Windows
debugging APIs [54] to hook syscalls in x86-64 Windows.
Currently, NTFUZZ targets x86 Windows, since hooking SSDT
incurs less overhead than relying on debugger APIs.
B. Mutator
We address two technical challenges in designing our syscall
mutator. First, our mutator should be aware of type information
obtained from the static analyzer (type-aware mutation in
§VI-B1). Second, our mutation should not get stuck by syscall
error handlers (lazy mutation in §VI-B2).
1) Type-Aware Mutation: Our mutator changes its mutation
strategy based on the type of a target syscall argument.
• Integer types (int, long, ...). We adopt the mutation
strategies employed by AFL [99], which are proven to be
effective for ﬁnding bugs. More speciﬁcally, we randomly
choose one of the four operations: (1) bit ﬂipping, (2)
arithmetic mutation, (3) trying extreme values such as 0
or INT_MAX, (4) generating a completely random value.
During these mutations, we consider the width of an
integer, as well.
• String types (char*, wchar_t*, ...). We perform three
different mutations at random: (1) randomly choose a
character and replace it with a random character, (2)
extend the string with a random string, or (3) randomly
truncate the string.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
684
Algorithm 2: Hooking-based Fuzzing Algorithm.
1 function Fuzz(seedApp, typeInfo)
2
3
4
5
proc ← Launch(seedApp)
cntList.Add(CountSyscall(proc))
cntList ← []
for i in 1 to ITER_N do
6
7
8
9
10
avgSysCnt ← Average(cntList)
while true do
n ← RandInt(avgSysCnt)
proc ← Launch(seedApp)
MutateSyscall(proc, typeInfo, n)
• Handle type (HANDLE). We do not perform mutation for
HANDLE because passing incorrect handle values often
makes syscall handlers prematurely return with an error.
• Struct types. We simply perform type-aware fuzzing on
every ﬁeld in a structure.
• Array types. If we know the size of the target array (from
our analysis in §V-C2), we simply iterate through each
element of an array and perform type-aware mutation.
Otherwise, we consider the target array as a singleton
array, and mutate only the ﬁrst element.
• Pointer types. We mutate both pointee value and pointer
value. To mutate pointee values, we recursively follow the
pointee type and perform type-aware mutation. For exam-
ple, when a pointer points to a structure, we recursively
traverse every ﬁeld of the structure until we meet a non-
pointer type and mutate them. To mutate pointer values,
we use the similar strategies used for integer values.
Of course, mutating every syscall argument will likely lower
the chance of ﬁnding bugs; the syscall sequences will be likely
invalid. Therefore, NTFUZZ controls the degree of mutation
with a conﬁguration parameter called mutation probability. For
every chance of mutation, we decide whether to mutate the
argument or not based on this probability. Let us denote the
mutation probability by p. Our mutator will uniformly sample
a value between 0 and 1 for every mutation candidate, and
perform a mutation only when the sampled value is below p.
2) Lazy Mutation: Although hooking-based fuzzing is ef-
fective in generating meaningful syscall sequences, there is a
caveat. When performing hooking-based fuzzing, the syscall
handlers in kernel may return an error, and user-level code
often terminates its execution upon detecting such errors. As
a result, syscalls requested earlier during an execution of a
seed program have more chance to be mutated, leading to a
considerable bias. Error handling routines help in writing se-
cure code, but they necessarily impede hooking-based fuzzing.
To mitigate this problem, we perform a novel mutation
strategy that we call lazy mutation. The key intuition is to
hold mutation off until a random point is reached. Algorithm 2
presents the idea. In Line 3-6, we ﬁrst estimate the number of
syscalls invoked by a seed application (seedApp) when there
is no mutation. Particularly, we measure the average count
of syscalls over ITER_N executions of seedApp, where
ITER_N = 3 in our current implementation. In Line 7-10,
we randomly choose a number between 0 and avgSysCnt
for every iteration, which determines the number of syscalls
to skip. The MutateSyscall function starts mutation only
after the ﬁrst n syscalls are executed.
C. Crash Detector
Unlike user-level fuzzers, kernel fuzzers should deal with
system reboots because the entire system will shut off with
BSoD whenever we ﬁnd a kernel crash. Therefore, we con-
ﬁgured our Windows VMs to create a memory dump when
the system crashes. When the system reboots, the fuzzer will
discover the crash dump ﬁle and send it to the host machine.
Also, we made our fuzzer to store the recent syscall payloads
in memory, so that memory dumps provide useful information
to analyze and reproduce the crashes.
D. Implementation
We implemented the fuzzer’s top-level logic (Fuzz of Al-
gorithm 2) with 196 source lines of python code. The hooking
and mutation logics (MutateSyscall) are implemented as
a kernel driver, which is written in 2,724 source lines of C/C++
code. This driver is loaded in kernel space, and installs syscall
hookers as described in §VI-A. It also identiﬁes the syscalls
invoked from the seed application, and applies the type-aware
mutations described in §VI-B1.
VII. EVALUATION
In this section, we address the following research questions.
RQ1 How accurate and scalable is our static analysis? How
RQ2 How does the mutation ratio affect the effectiveness of
is it affected by NSE? (§VII-B)
kernel fuzzing? (§VII-C)
ﬁnding more bugs? (§VII-D)
RQ3 Does the type-aware fuzzing strategy indeed help in
RQ4 Can NTFUZZ ﬁnd previously unknown bugs from the
latest version of Windows? How does it compare with
existing fuzzers? (§VII-E)
A. Experimental Setup
1) Runtime Environment: For the evaluation of the static
analyzer (RQ1), we used a desktop machine with an Intel
i7-6700 3.4GHz CPU and 64GB of memory. For the rest
of the experiments (RQ2–RQ4), we used server machines
by assigning two cores of Intel Xeon E5-2699 2.2GHz CPU
and 4GB of memory to each VM running under VirtualBox-
6.1.0 [75].
2) Windows Versions: We used two versions of x86 Win-
dows 10 for the evaluation. For the self-evaluation with differ-
ent parameters (RQ2 and RQ3), we used an old Windows 10
17134.1 build, released in April 2018, because we can easily
evaluate the bug-ﬁnding ability of NTFUZZ with more number
of conﬁrmed bugs. For the real-world evaluation (§VII-E), we
used Windows 10 18362.592 released in January 2020, which
was the latest version at the time of evaluation.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
685
BASIC STATISTICS OF OUR TARGET SYSTEM BINARIES.
TABLE II
Binary
ntdll.dll
kernelbase.dll
kernel32.dll
win32u.dll
gdi32.dll
gdi32full.dll
user32.dll
Total
Size (KB)
1,582
1,942
622
101
132
1,432
1,496
7,307
# Funcs
3,303
2,599
971
1,244
1,135
1,716
2,012
12,980
# BasicBlks
63,432
52,483
19,771
2,448
3,797
36,572