### 4.2.3 Vulnerability in Mount Service

`IMountServiceListener` is an interface in the Android `android.os.storage` package, which defines two synchronous callback methods. As shown in Fragment 3 of Appendix A, the tainted callback handle propagates into the global variable `mListeners` (line 1557). The Mount Service (MS) also registers a broadcast receiver to listen for intents that are broadcast when the state of USB storage changes (line 1498). When MS receives such an intent, it makes callbacks to every element in `mListeners` (lines 1247 and 1249). To ensure mutual exclusivity of `mListeners`, the related code is placed within a synchronized block. Exploiting this vulnerability can lead to hazard situation A1. This vulnerability exists in Android 5.1.0 but is mitigated in Android 6.0.1, as the callback type was changed from synchronous to asynchronous. The vulnerable service interface does not require any specific permissions from the client app.

### 4.2.4 Vulnerability in Package Manager Service

The Package Manager Service (PMS) manages all `.apk` files on the device. The vulnerable service interface in PMS is `freeStorage()`, which is responsible for clearing the cache of a given volume with a Universally Unique Identifier (UUID). The relevant code is shown in Fragment 4 of Appendix A. Cache clearing is a time-consuming task, so PMS performs this operation in an assistant thread using the Handler mechanism (line 2196). The `freeStorage()` method contains code that operates on the IPC call parameter `pi`, whose class is `android.content.IntentSender`. Similar to `PendingIntent`, `IntentSender` contains a member variable `mTarget`, which is a callback handle. The `mTarget` class, `IIntentSender`, defines a single synchronous callback method, `send()`. After the cleaning work is completed, the assistant thread invokes `pi.sendIntent()` (line 2207), which actually calls `pi.mTarget.send()`. In line 2206, PMS attempts to check the validity of `pi`, but it cannot validate the identity of the service represented by `pi.mTarget`. Additionally, PMS can only handle one type of exception, `SendIntentException` (line 2212), leaving it vulnerable to other types of exceptions that may be thrown by the callback method. Exploiting this vulnerability can lead to hazard situation A2. The vulnerable service interface is protected by the `clear_app_cache` permission, which third-party apps could acquire before Android 5.1.0 but not in Android 6.0.1. Therefore, although the vulnerability still exists in Android 6.0.1, it is only exploitable in versions 2.3.7 through 5.1.0.

### 4.2.5 Vulnerability in SystemUI App

The USB Service (US) manages all USB-related states, including host and device support. The `requestAccessoryPermission()` interface in US allows a client app to request permission for USB accessories. When invoked, US starts an activity in the SystemUI app to let the user decide whether to grant the permission. This interface receives a callback handle as an IPC call parameter, named `pi`, which is an instance of `android.os.PendingIntent`. This parameter is passed to the activity component in SystemUI, which uses it to inform the client app of the user's decision. As described in Section 4.2.2, invoking `pi.send()` in the SystemUI activity component actually invokes a synchronous callback method. The relevant code is shown in Fragments 5.1, 5.2, and 5.3 of Appendix A. US starts the activity component in SystemUI and passes the callback handle via an intent object (line 1045 in Fragment 5.2). The target activity acquires the callback handle in the `onCreate()` method (line 68 in Fragment 5.3) and invokes it when the activity is destroyed (line 146 in Fragment 5.3). Malicious services can block the activity component's code by preventing the callback method from returning, leading to hazard situation B1. This vulnerability exists in Android versions 4.1.1 through 6.0.1 and is not protected by any permissions. Another interface in US, `requestDevicePermission()`, also has this vulnerability.

### 4.2.6 Vulnerability in Phone App

The `imms` system service bridges the public SMS/MMS APIs with the service interfaces of the `MmsService` component in the Phone app. This design protects the integrity of the SS but leaves the Phone app vulnerable to attacks. The vulnerable service interfaces in `imms` are `downloadMessage()`, `sendMessage()`, and `sendStoredMessage()`, all of which receive an IPC call parameter of type `PendingIntent`. As described in Section 4.2.2, the `PendingIntent` class contains a callback handle as a member variable. For example, in the `downloadMessage()` interface, the relevant code is shown in Fragments 6.1, 6.2, and 6.3 of Appendix A. Line 253 in Fragment 6.1 shows that `imms` calls the corresponding service interface of the `MmsService` component, passing the received callback handle to `MmsService`. This callback handle is used to inform the client app about the result of sending or downloading MMS (line 230 in Fragment 6.3). The invocation of this callback is located in an assistant thread of `MmsService` (line 427 in Fragment 6.2) and is not protected by any try-catch block to handle exceptions. Exploiting this vulnerability can lead to hazard situation B2. This vulnerability exists in Android versions 5.0.0 through 6.0.1, and the exploit code requires the `receive(send)_mms` permission, which is acquirable by malicious apps.

### 5. Proof-of-Concept Attacks

#### 5.1 Basic Attacks and Hazards

We present the basic exploitation of the new vulnerabilities. These attacks are implemented by directly invoking the vulnerable service interfaces of the SS rather than through APIs, making them more direct and flexible.

##### 5.1.1 System Service Freeze

To freeze a system service, a malicious app must implement a callback method that prevents the return of the callback for an extended period. For example, in V ul#1, the logical relationship of the attack is shown in Figure 3. The instance of `MyMaliciousService`'s proxy class is forged as an IPC call parameter and passed to the `startInstrumentation()` interface of the Activity Manager Service (AMS). AMS then starts a thread (Thread X) to handle the request. When Thread X invokes the callback method, the `onTransact()` method in the `MyMaliciousService` component handles the request. The attack code in `MyMaliciousService` simply sleeps for ten minutes, blocking Thread X. Another thread (Thread Y) started by another service request also needs to acquire the `AMS.this` lock but must wait until Thread X releases it. After a while, the watchdog thread in AMS will kill the process providing AMS, causing a system soft-reboot. V ul#2 is similar to V ul#1 but requires specific permissions. V ul#3 is slightly different, as it is not triggered immediately after the callback handle is injected, making the attacks more latent.

##### 5.1.2 System Soft-Reboot

To cause a timely system soft-reboot, a malicious app must find a way to make the SS throw an exception. There are two possible attack measures:

- **Leverage a Malicious Service Component to Attack**: A malicious service is used to conduct the attack. When the callback method is invoked, the malicious service throws a `NullPointerException`.
- **Induce PackageManagerService to Attack Itself**: The instance of `PMS`'s proxy class is forged as a callback handle and injected into the `freeStorage()` interface of PMS as an IPC call parameter. PMS invokes this callback in one of its assistant threads, believing the callee is a service defined by the `IIntentSender` class. However, the real callee is PMS itself, defined by the `android.content.pm.IPackageManager` class. The new thread started by PMS finds that the interface descriptors do not match and throws a `java.lang.SecurityException` back to the assistant thread in PMS, causing the crash of the process providing PMS and a system soft-reboot.

##### 5.1.3 System Application Freeze and Crash

Even if the victim is a system app, the attack can seriously threaten critical system functionalities. For example, exploiting V ul#5 causes SystemUI to raise an activity component on the screen. Regardless of user interaction, the callback method in the malicious app is invoked, and the attacker can block the code in this activity, making SystemUI unresponsive. V ul#6 exists in the Phone app, which manages cellular networks. Attacks on this app can cause it to crash and disable all cellular network functionalities.

#### 5.2 Representative Attack Scenarios

Indiscriminate attacks are ineffective. To maximize the impact, attackers should choose the best time to exploit the vulnerabilities. Previous work [14] has shown that it is possible to infer the UI state of apps, allowing attackers to trigger vulnerabilities during critical tasks. For example:

- **V ul#2** can block location updates in map apps, disabling navigation functions.
- **V ul#3** can make the SD card unusable, affecting installed apps and app data.
- **V ul#5** can repeatedly block SystemUI, preventing the user from pressing specific buttons.
- **V ul#6** can disable cellular networks.

V ul#1 and V ul#4 are the most significant among the new vulnerabilities. We have designed four attack scenarios leveraging these vulnerabilities, and a video of the attacks is available at [https://youtu.be/w9BMZdvZZec](https://youtu.be/w9BMZdvZZec).

##### 5.2.1 Anti Process Killer

**Scenario**: To conduct a timely attack, the process of a malicious app must stay alive in the background. However, background processes are often killed irregularly.

**Design**: Android supports running services in different processes. If an app is forced to stop, all its processes are killed successively. In our design, the malicious app registers N services in N different processes. Each service listens to the death of the other N-1 services by implementing the `ServiceConnection.onServiceDisconnected()` method. Code in this method exploits V ul#4, causing an immediate system soft-reboot. The malicious app can register a broadcast receiver to listen for the `boot_completed` intent and start its services again to stay alive.

**Result**: We tested the PoC app on Android 5.1.0, Nexus 6, registering 10 services in 10 processes. Using the third-party app 360 Mobile Safe and the system app Settings, we attempted to kill the processes. The test results show that the PoC app can function as an anti-process killer.

##### 5.2.2 Anti Anti-Virus

**Scenario**: When a user encounters frequent system crashes and functional failures, they may suspect a malware infection and use an anti-virus app for a security inspection. Malicious apps need to hinder this to ensure their survival.

**Design**: A malicious app can detect whether an anti-virus app is scanning by monitoring characteristics such as increased memory usage or the start of new processes. The malicious app only needs a list of process names of the anti-virus apps and can monitor these processes in real-time.

**Result**: We tested the PoC app on Android 5.1.0, Nexus 6, with 360 Mobile Safe as the target. According to our study, it starts two processes, `scan` and `engine`, when scanning installed apps. The PoC app checks these processes every second and uses V ul#1 to conduct the attack, making the device unresponsive.