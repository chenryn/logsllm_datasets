2.9.4修改内核参数
注意，通过 sysctl.conf 文件修改的内核参数不会立刻生效，修改完成后，使用 sysctl-p命
通过 man proc可以获得大量关于内核参数的描述信息。但以上通过直接修改/proc 相关文件
调整所有的进程可以打开的文件总数量（当大量的用户访问网站资源时，可能会因该数字
开启内核路由转发功能（通过0或1设置开关）：
Linux内核参数随着系统的启动会被写入内存中，我们可以直接修改/proc目录下的大量文
fs.file-max=108248
net.ipv4.icmp_echo_ignore_all = 1
net.ipv4.ip_forward =1
2.永久调整内核参数
禁止所有的icmp回包（禁止其他主机ping本机）功能：
1．临时调整内核参数
[root@centos6~]#modprobe-r ip_vs
当内核模块不再需要时，可以通过将/etc/rc.sysinit文件中对应的modprobe命令删除，但需
第2章命令工具
103
---
## Page 120
Shell为例讲解，也即是Bash。
统有哪些可用的 Shell。不同的 Shell有不同的特点以及操作方式，这里以CentOS 默认使用的
可以使用的Shell有/bin/sh、/bin/bash、/bin/tcsh、/bin/csh这几种，/etc/shells文件说明了当前系
目的。由于Linux的开放性特点，使得在Linux下对Shell的选择也有很多，CentOS6.3系统中
在Linux环境下，我们可以通过Shell与内核进行交流，并最终实现我们想要使用计算机资源的
传给内核，内核在得知用户的需求后调度硬件资源来完成操作（比如，使用网卡发送数据包）。
过应用程序或部分系统软件发出指令（可能是通过浏览器发送一封邮件），这些指令会被翻译并
对硬件进行管理与操作的是系统软件的内核部分，用户是无法与硬件或内核打交道的，用户通
3.1Shell 简介
第3
自动化运维
一个完整的计算机体系结构包括：硬件与软件，而软件又分为系统软件与应用软件，负责
章
---
## Page 121
Linux中以“”开头的文件或目录为隐藏文件或目录。
写，为常用且复杂的命令及选项创建别名可以大大提高日常工作效率。
有ⅡI命令，它只是被提前定义好的一个别名而已，别名的好处是可以把本来很长的指令简化缩
空所有的历史记录。
的1000条命令，当有第1001条命令执行时，第一条命令会被覆盖，执行history-c命令可以清
CentOS6.3默认通过/etc/profile文件定义了HISTSIZE=1000，也就是最多可以记录最近所使用
录，所有的命令历史都有记录编号。命令历史能够记录的信息数量由HISTSIZE变量所决定，
来查看，也可以通过键盘的上下键来上翻或下翻历史记录，还可以通过history命令查看历史记
下的.bash_history隐藏文件中。查看这些命令历史记录的方法有很多，可以通过直接打开文件
2
3.2.2
3.2.1命令历史
在CentOS6.3系统中，我们可以直接使用Ⅱl命令来显示文件的详细信息，其实系统中并没
记录命令历史除了可以查看历史记录外，还可以在需要时直接调用历史记录再次执行该命
Bash拥有自动记录命令历史的功能，用户所执行的命令会在注销时自动记录到自己家目录
alias
alias
alias
[root@centos6~]#alias
Bash 功能介绍
命令别名
按回车键完成执行操作。如果没有搜索到适合的命令，按Esc 键退出搜索。
通过Ctrl+r快捷键打开搜索功能，接着输入关键字，即可在命令历史中搜索相关命令，
记录并执行。
头的命令。或者通过!n来准确定位历史记录，如!242将直接调用命令历史的第242条
输入!string调用命令历史（string为关键字），如!vim将调用最后一次执行的以vim开
上下键翻阅历史命令，找到合适的命令后直接回车键即可执行。
1s='1s
11='1s
--color=auto'
--color=auto'
--color=auto'
#查看系统当前所有的别名
第3章自动化运维
105
---
## Page 122
或2>>符号实现。输入重定向可以使用
如果文件不存在，则创建该文件，如果文件已经存在，则会覆盖该文件的内容；而使用>>可以
可以从文件中读取输入信息。输出重定向可以使用>或>>符号，使用>可以将输出导入至文件，
时不需要在屏幕上看到这些信息。另外，对于输入，一般是通过键盘输入，而有时你或许希望
ifconfig 命令的所有输出都将作为 grep命令的输入内容，最终实现过滤包含 IP地址的行。
含IP地址的行，ifconfig本身会输出大量的网络接口信息，由于这里使用了管道符号（l)，所以
>、>、I）重新定义输入与输出。
描述符为2。但有时我们需要改变这样的标准输入与输出方式，Linux中可以使用重定向符（error.txt#仅将错误重定向，不影响正确输出
~1#
hostname >> list.txt
ls > list.txt
install.log.syslog
#查看当前文件列表
#将输出保存至list.txt，屏幕无输
#查询计算机中是否安装了gcc软件
#标准输出与错误输出均导入至al1
#查看文件详细信息，abc并不存在
#取消别名定义
#定义新的别名
民
---
## Page 123
存在两个不同的记录文件中，那么分离重定向就显得尤为重要了。下面检查系统中是否存在tom
令执行成功了，哪些命令出现了问题，并且为了方便管理，需要将正确输出与错误输出分别保
负载最低时以无人职守方式运行的，那么当管理员去检查脚本运行情况时，会希望看到哪些命
令如下。
东西往里写入都将永远消失。对大量无意义的输出信息，可以通过管道导入/dev/null设备，命
可以考虑将标准正确输出屏蔽，Linux中提供了一个特殊设备/dev/null，它很像太阳黑洞，任何
案例，大量的成功提示信息并不是我们关注的重点，管理员更多的是关心错误提示。所以这时
出现 successfully提示信息，如果需要修改20个账户密码，则显示20条这样的信息。像这样的
表3-1
出了常用的快捷键及其功能描述。
3.3.1重定向技巧
Ctrl+u
Ctrl+1
Ctrl+b
Ctrl+f
Ctrl+e
Ctral+a
快捷键
3.2.4
如果你编写了一个脚本实现自动修改系统账号的密码，那么默认当密码修改成功后系统会
Bash提供了大量的快捷键为用户所使用，
标准输出与错误输出分离重定向，很多时候自动运行的脚本编写完成后，是在深夜服务器
[root@centos6~]#1s-1abcinstall.log>>all 2>&1 #标准输出与错误输出均追加至al1
Bash使用技巧
快捷键
删除光标至行首的字符
清屏，等同于clear命令
光标左移一个字符
光标右移一个字符
光标移动至行尾
光标移动至行首
功能描述
Tab
Alt+d
Ctrl+w
Ctrl+z
Ctrl+c
Ctrl+k
快捷键
熟练掌握这些快捷键会提高工作效率。表3-1列
自动补齐
删除光标后一个单词
删除光标前一个单词（以空格为分隔符）
挂起进程（jobs命令查看挂起的进程）
终止进程
删除光标至行尾的字符
功能描述
第3章
自动化运维
107
---
## Page 124
这些后台进程，并且会为每个这样的进程分配一个编号，通过fg的形式可以将这些后台
执行后使用Ctrl+Z快捷键可以将该进程放入后台并暂停执行，以后随时可以使用jobs命令查看
否执行成功，成功就显示问候语，否则显示没有该用户。
相反，仅当前一个命令执行失败才会执行Ⅲ控制符后面的命令。下面通过实例演示。
但仅当前一个命令执行成功后才会执行[&&]控制符后面的命令；[控制字符的作用与[&&]刚好
个命令之间没有任何逻辑上的关系，仅按循序执行；使用[&&]控制字符也可以将多个命令组合，
控制符使得命令开启一个子Shell，并在后台执行；使用[；控制字符可以把多个命令组合，但多
用户，如果存在，则将 tom 相关信息记录至user文件中，否则记录至error 文件中。
Linux运维之道
3.3.3
3.3.2命令序列使用技巧
108
Bash环境中通过命令开启进程的时候使用&符可以使该进程进入后台执行，或者一个命令
实例6首先通过&>重定向符将id命令的所有输出屏蔽，然后使用&&与来判断id命令是
实例6：如果id tom执行成功，则说明用户存在，屏幕将显示Hi,tom，否则显示No such user。
实例5：如果有gedit 编辑器，则打开该程序，否则打开vim 编辑器。
实例4：如果某个文件存在，则显示该文件内容，否则报错（仅当ls执行成功才会执行cat)。
实例3：所有的命令按顺序执行（不管前面的命令是否成功，后面的命令一定正常执行）。
实例2：后台运行浏览器，不影响当前Shell的使用。
实例1：火狐浏览器通过前端启动，使当前Shell将暂时无法使用。
在Linux中，我们可以使用控制字符（；、&&、I、&）来控制命令的执行方式。其中，[&]
[root@centos6~]#id tom &>/dev/null &&echo "Hi,tom"IIecho"No such user'
[root@centos6~]# gedit1l vim
[root@centos6 ~]# ls test.txt && cat test.txt
[root@centos6 ~]# 1s /tmp ;1s /root ;1s /home
[root@centos6~]#firefox&
[root@centos6 ~]# firefox
[root@centos6~]# id tom >>user 2>>error
作业控制技巧
---
## Page 125
的值。变量名称为字母、数字以及下画线的组合，但首字母不可以为数字，变量名称没有硬性
量的语法格式为：
1
的语法格式案例。
号分割的多个项目，连续的序列包括一个起点与一个终点，并使用“.”分隔。接下来看看具体
进程再次调回前台执行。
3.4.1
3.3.4花括号{的使用技巧
如果value没有指定，变量将被赋值为空字符串，变量定义后使用来调用变量
变量是用来存储非固定值的载体，它具有一个值，以及零个或多个属性。在Shell中定义变
通过括号扩展可以生成命令行或脚本所需要的字串，括号中可以包含连续的序列或使用逗
name=[value]
[root@centos6~]#chmod777/tmp/dir{1,2}
a2ala0a-1
abc
[root@centos6~]#echo[a,b,c}
[root@centos6
[root@centos6
[root@centos6
O
[root@centos6~]#echo
[root@centos6
userluser5user8
[root@centos6~]#echouser{1,5,8}
[root@centos6~]#fg1
[root@centos6~]#firefox&
变量
[1]+
root@centos6
246810
自定义变量
Running
~]#mkdir/tmp/(dir1,dir2,dir3}
]#echo a(2..-1}
~]#echo
~]#jobs
~]#
1s-1d/tmp/dir{1,2,3}
910
(0..10..2}
[0..10}
firefox&
第3章自动化运维
109
---
## Page 126
直接定义环境变量并赋值，也可以先定义一
量，使用export命令会将变量放入环境中，这样新的进程会从父进程那里继承环境，export可以
添加相应的提示信息。
整数，也可以使用该命令添加相应的属性。
可以通过typeset为这个变量添加只读属性来防止误操作，如果需要限定变量的值仅可以设置为
Linux运维之道
3.4.2
110
使用name=[value]的形式定义的变量默认仅在当前Shell中有效，子进程不会继承这样的变
[root@centos6 ~]# TEsT=pass
Please input a number:100
此外，还可以通过read命令来设置变量，read 从标准输入中读取变量值，使用-p 选项可以
[root@centos6 ~]#bash
[root@centos6~]# unset P_NUMBER
100
[root@centos6~]# echo $P_NUMBER
[root@centos6~]# echo $P_NUMBER
200
如果希望预先定义一个变量，但暂时不赋值给它，可以使用declare命令。
root@centos6~]#
[root@centos6~]# set
22
22
[root@centos6 ~]# echo $INT_NUMBER
[rOot@centoS6~]#INTNUMBER=200
[root@centos6
[root@centos6
[root@centos6
[root@centos6~]#declare INT_NUMBER
bash:NAME:readonlyvariable
tomcat
[root@centos6 ~]#echo $NAME
[root@centos6~]#NAME=tomcat
变量的使用范围
~]#eCho $INT_NUMBER
~1#
echo $TEST
typeset -i INT_NUMBER
一个普通的用户变量，再通过export转换为环境变量。
#在当前Shell下开启新进程bash
#查看当前系统中设置的所有变量及值
#在提示符后输入要赋值给变量的值
#删除变量
#回车后输入要赋值给P_NUMBER的值
#查看变量结果为0
#强制为该变量赋值字符型数据
#使用-i选项设置整数变量
#添加readonly只读属性
---
## Page 127
系统只会在/root目录下查找有没有ls命令。
下面将PATH直接赋值/root目录，则以后再执行一个简单的ls命令都将提示命令没找到，因为
有找到ls程序，则提示命令没有找到。
下查找这个命令，若找到，就执行该命令，没有则继续查找下一个目录，如果搜索到最后都没
是一个目录集合，系统会按照顺序查找这些命令，如果找不到，则提示命令未找到。
这里我们暂时不考虑别名与函数的问题。
知道Is命令存放在哪里？其实，Linux系统是通过PATH变量来搜索命令的，PATH变量的值就
变量，在Linux系统中，我们输入一个ls命令就可以查看当前目录的文件列表，那么系统怎么
GROUPS
表3-2
RANDOM
OLDPWD
PWD
HOSTNAME
BASHPID
一些比较常用的变量名称及其含义。关于变量的详细定义，可以参考Bash手册。
3.4.3
对于PATH路径的修改需要注意，
变量名称
以上这些变量中，有些是可以设置的，有些则是只读而不可设置的。这里我们重点看看PATH
Bash为预设了很多环境变量，
[root@centos6~]#PATH=/root
根据以上说明，我们知道用户在命令行中输入Is命令后，
[root@centos6
[root@centos6~]#ls
/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
[root@centos6~]#echo$PATH
[root@centos6
[root@centos6
[root@centos6
[root@centos6
环境变量
0~32767之间的随机数
前一个工作目录
当前工作目录
当前主机的主机名称
当前用户所属组的组ID号
当前bash进程的进程号
~]#ls
~]#
~]#
~]#
export TEST
exit
echo $TEST
含义
，在实际工作中，我们可以直接调用这些变量，表3-2列出了
，不可以直接对其赋新值，否则将覆盖PATH现有的值。
PS2
PS1
PATH
HOME
HISTSIZE
UID