AC_B
AC_A
AC_B
Client
Fig. 6. Rejoin protocol to join another area.
The rejoin protocol is comprised of six steps, and employs
security mechanisms similar to those used in the join protocol
(Section III-B) to address message conﬁdentiality, message
integrity, authentication, man-in-the-middle attack, and replay
attack. In the ﬁrst step, the member sends a message to (cid:3)(cid:4)(cid:11)
containing the following information:  (cid:8)(cid:9)(cid:13)(cid:11); Ticket; and
a MAC computed over the ﬁrst two pieces of information.
This message is encrypted using the public key of (cid:3)(cid:4)(cid:11). On
receiving this message, (cid:3)(cid:4)(cid:11) ﬁrst decrypts the message and
veriﬁes the integrity of the message and the validity of the
ticket. If veriﬁed, it sends a message to the member containing
 (cid:8)(cid:9)(cid:13)(cid:11)  (cid:2);  (cid:8)(cid:9)(cid:11)(cid:13); and a MAC computed over the ﬁrst
two pieces of information. This message is encrypted using
the public key of the member.  (cid:8)(cid:9)(cid:13)(cid:11)  (cid:2) is used by the
client to authenticate (cid:3)(cid:4)(cid:11), and  (cid:8)(cid:9)(cid:11)(cid:13) is a challenge to
the member to authenticate itself. In the third step, the member
authenticates itself to (cid:3)(cid:4)(cid:11) by sending a message containing
 (cid:8)(cid:9)(cid:11)(cid:13)  (cid:2) and a MAC computed over  (cid:8)(cid:9)(cid:11)(cid:13)  (cid:2) to
(cid:3)(cid:4)(cid:11). This message is encrypted using the public key of (cid:3)(cid:4)(cid:11).
At this stage, (cid:3)(cid:4)(cid:11) has all the information to let the member
join its area. However, there is a possibility that a malicious
client (cid:4)(cid:0) may have shared its ticket and public/private key pair
with its cohort (cid:4)(cid:0), and (cid:4)(cid:0) is attempting to join area (cid:2), even
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:05:28 UTC from IEEE Xplore.  Restrictions apply. 
though (cid:0)(cid:0) is still a member of area (cid:1). Notice that the mutual
authentication procedure implemented in the ﬁrst three steps
prevents an adversary (cid:0)(cid:0) who happens to steal (cid:0)(cid:0)’s ticket
from joining the group. This is because (cid:0)(cid:0) does not know the
corresponding private key of (cid:0)(cid:0), and so cannot authenticate
itself (impersonate (cid:0)(cid:0)) in the third step.
To address the issue of malicious cohorts sharing a ticket
and the corresponding public/private key pair, steps 4 and 5
are included in the rejoin protocol. In these steps, (cid:1)(cid:0)(cid:1) ﬁrst
contacts (cid:1)(cid:0)(cid:2) to ensure that the client is no longer a member
of (cid:1). Recall that the identity of area (cid:1) is included in the
ticket. In step 4, (cid:1)(cid:0)(cid:1) sends a message to (cid:1)(cid:0)(cid:2) containing
the following information: client’s ID; Time stamp; and a
MAC computed over the ﬁrst two pieces of information. This
message is encrypted using the public key of (cid:1)(cid:0)(cid:2), and signed
using the private key of (cid:1)(cid:0)(cid:1). Here time stamp is included to
prevent a replay attack by an adversary who happens to sniff
this message. After verifying the validity of this message and
if the client is no longer a member of (cid:1), (cid:1)(cid:0)(cid:2) sends a message
to (cid:1)(cid:0)(cid:1) containing the following information: client’s ticket;
time stamp; and a MAC computed over the ﬁrst two pieces of
information. This message is encrypted using the public key
of (cid:1)(cid:0)(cid:1) and signed using the private key of (cid:1)(cid:0)(cid:2).
Finally, after receiving and verifying the validity of this
message, (cid:1)(cid:0)(cid:1) lets the client join its area by adding it in
its auxiliary key tree, and sending a message containing the
following information: all auxiliary keys in the path from
the client’s leaf to the root of the auxiliary key tree; an
updated ticket; and a MAC computed over the two pieces of
information. This message is encrypted using the public key
of the client and signed using the private key of (cid:1)(cid:0)(cid:1).
Steps 4 and 5 require that the area controllers (cid:1)(cid:0)(cid:2) and
(cid:1)(cid:0)(cid:1) exchange messages between each other. This may not
be possible, if there is a communication partition between
the two areas. In case (cid:1)(cid:0)(cid:1) cannot communicate with (cid:1)(cid:0)(cid:2),
there are two options: (1) (cid:1)(cid:0)(cid:1) denies the member to join its
area; and (2) (cid:1)(cid:0)(cid:1) allows the member to join its area without
verifying that the member has indeed left area (cid:1). The ﬁrst
option is unfair to a legitimate mobile client, but prevents
misuse by malicious cohorts that share keys and tickets. The
second option on the hand allows members to avail multicast
service despite communication partitions, but is subject to the
misuse by malicious cohorts. One way to prevent this misuse
in the second option is to verify the MAC address of the NIC
being used by the rejoining member. Recall that the MAC
address of the NIC is stored in a ticket. This will require a
member to use the same NIC when rejoining. Of course, it is
indeed possible for a malicious cohort to tamper with the NIC
address. However, doing so will be difﬁcult, and hopefully
diminish any gains from sharing the ticket.
There is also the issue of how does a group member ﬁnd
out the address and public key of a new area controller while
moving. It needs them to start the rejoin protocol. One way to
do this is to have the registration server provide a list of all
area controllers’ addresses and public keys when a member
registers with a multicast group (step 5 of join protocol).
When there are new area controllers joining after the member
joins the group, we multicast a list of these new joining area
controllers to the existing members of the whole multicast
group. This list
is signed by the private key of the area
controller that forwards it to its area members. This event of
joining of new area controller doesn’t occur often, and so the
use of private key for signature is reasonable.
C. Fault Tolerance: Area Controller and Registration Server
When an area controller determines that it can no longer
communicate with one of its area member, it unilaterally
terminates the membership of that member from its area. It
essentially executes the protocol for member leave described
in Section III-C.
When an area controller (cid:1)(cid:3) detects that it can no longer
communicate with the area controller of its parent area, it
attempts to change its parent area by contacting another
area’s area controller. Each area controller maintains a list
of one or more preferred area controllers. (cid:1)(cid:3) chooses an
appropriate area controller (cid:1)(cid:0) from this list, and sends a
area-join request to that area controller. This request contains
the following information: (cid:1)(cid:3)’s identity; Time stamp; and a
MAC computed over the ﬁrst two pieces of information. This
message is encrypted using the public key of (cid:1)(cid:0) , and is
signed using (cid:1)(cid:3)’s private key. On receiving this message,
(cid:1)(cid:0) veriﬁes the signature and the integrity of the message. If
veriﬁed, it sends an ack message to (cid:1)(cid:3) containing its area key,
time stamp and a MAC. This message is encrypted using the
public key of (cid:1)(cid:3), and signed using the private key of (cid:1)(cid:0) .
Finally, Mykil replicates an area controller to tolerate the
failure of a node on which an area controller is running. We
assume a crash failure model [5] for node failures in our
implementation. A primary-backup mechanism [2] is used to
manage this replication. To minimize performance overhead,
only a minimal state information is replicated: complete aux-
iliary tree; public keys of the area members, area controllers
and the registration server; and the identities of the parent area
controller and all child area controllers. Primary and backup
servers are synchronized during key updates, and whenever
there is a change in the parent/child area controllers.
Notice that the state information about the multicast mes-
sages being exchanged is not replicated. This is done to min-
imize communication between primary and backup servers.
A consequence of this is that the area members may not
receive some multicast messages while the backup server takes
over the primary during a primary server failure. The backup
server monitors the health of the primary server by exchanging
heartbeat messages at regular time intervals.
The replication of area controller is to prevent hardware
failure of the primary server. A related problem is what
happens if there is a communication partition between the
primary and the backup server. To prevent both the primary
and the backup servers running in parallel, we provide a
controllable power switch that the backup server uses to switch
off the primary before taking over the area controller role.
The replication is done through a serial link from backup
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:05:28 UTC from IEEE Xplore.  Restrictions apply. 
to primary server, so that the synchronization between them
doesn’t interfere normal communication. When the backup
server detects primary server failure, it ﬁrst shut down the
primary server via the controllable power switch, and then
promotes itself to the primary role.
Finally, we replicate the registration server to tolerate node
failures and increase its availablity. Replication of registration
server is done using a group communication service [12].
Access to this replicated server pool is provided by assigning
a virtual IP address to the registration server and using virtual
IP interface redundancy as described in [1].
D. Reliable Rekeying
A rekeying operation typically requires a small number
of message multicasts from an area controller to its area
members. An important requirement of rekeying operation is
that it must be reliable. Notice that most of the multicast
applications under consideration here do not require strong
reliability guarantees. For example, multimedia (audio/video)
distribution can tolerate a few packet losses. However, if a
client misses a rekeying message, it will not be able to decrypt
any future multicast messages. In fact, it may take a long time
for this client to get new keys after it detects (on receiving a
new multicast message) that it has missed a rekeying message.
We propose two solutions to address this problem and
make rekeying operation more reliable. The ﬁrst solution is to
use some well-known positive ack based multicast protocol,
e.g. RMTP [9], [16]. In this approach, each client sends
an acknowledgement to the area controller after receiving a
rekey message. The area controller persists with sending the
rekeying message at regular intervals, until it has received
acknowledgements from all clients. The well-known problem
with this approach is that of ack implosion, where an area
controller may be swamped by acknowledgements. Protocols
like RMTP address ack implosion problem to some extent by
aggregating acks [9], [16].
Our second solution exploits scenarios in which rekeying
is done only at well known times, e.g. after a program ends
in a pay-per-view application. For these scenarios, an area
controller ensures that a key is valid for only a limited
period of time, and the clients know when the next rekeying
message is expected. If a client does not receive a new
rekeying message when expected, it can proactively contact
its area controller to request the new key. Notice that this
solution requires a loose time synchronization between an area
controller and all its area members.
V. IMPLEMENTATION AND PERFORMANCE
A prototype of Mykil has been implemented on a net-
work of Linux workstations. OpenSSL libraries for cryp-
tography has been used. We have used RSA public encrypt
and RSA private decrypt for encryption and decryption, and
RSA sign and RSA verify for digital signatures and signature
veriﬁcation. We used 2048 bit RSA keys and 128 bit sym-
metric keys for area and auxiliary keys. We evaluate Mykil
with respect to 5 criteria: storage requirements; computation
requirements; bandwidth requirements; join and rejoin proto-
col performance; and feasibility on hand-held devices.
A. Storage Requirements
In addition to its own public/private key pair, each member
needs to store the public keys of its area controller and the
registration server. Given a 2048 bit RSA key, a member will
need at least 2048*4 = 8192 bits (1 KB) to store these keys.
In addition, a member may store the public keys of other
area controllers that are needed in the rejoin protocol. If there
are 10 such other area controllers, a member will need an
additional 2.5 KB of memory. Initial registration protocol is
not described in detail for Iolus or LKH. However, public keys
will deﬁnitely be needed in Iolus and LKH as well to facilitate
initial registration. Our guess is that a member will need to
store four or ﬁve public keys in these protocols, requiring
approximately 1-2 KB of memory.
In addition, a group member needs to store symmetric
keys as well. Suppose a multicast group consists of 100,000
members. In LKH, this will result in an auxiliary-key tree of
depth 16 (4 children for each node). This implies that each
member will have to store 16 auxiliary keys and a group
requiring 128*17 = 2176 bits (272 B). On the other hand a
member in Iolus will need to store 2 keys, an area key and
a pairwise secret key with area controller. Assuming that we
limit the membership size of an area to about 5000 members in
Mykil, a member in Mykil will need to store about 11 keys.
This means that a user needs 32 bytes in Iolus, 272 bytes
in LKH, 176 bytes in Mykil to store the required symmetric
keys. This shows that Iolus incurs minimum amount of storage
overhead and LKH incurs the maximum amount of overhead.
Mykil’s storage overhead per member falls in between. An
important point to note is that the memory requirements to
store cryptographic are fairly small in all three protocols.
Storage requirements to store keys at the area controllers or
key management servers are relatively high. An area controller
needs to store public keys of all other area controllers and
registration server, and all auxiliary keys. Again, for a group
of 100,000 members divided into 20 areas, this requirement
is about 132 KB (5 KB for 20 public keys; 127 KB for 8092
symmetric keys) in Mykil. In LKH, a key management server
will have to store approximately (cid:0)(cid:0)(cid:0) auxiliary keys. This will
require about 4 MB of memory. In Iolus, a subgroup controller
will need about 80 KB (5001 symmetric keys; some public
keys). Thus the storage requirements for area controller in
Mykil and subgroup controller in Iolus are moderate, while
they are signiﬁcantly larger in LKH.
B. CPU Requirements
For a join event, the computational requirements at the
joining member are similar in all three protocols. The joining
member receives the new area/group key and auxiliary keys.
However, a join event requires existing members to do some
computation as well. In particular, group key of all members
is updated in LKH, while area key of the members of only one
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 10:05:28 UTC from IEEE Xplore.  Restrictions apply. 
area is updated in Iolus and Mykil. So, the CPU requirements
are larger in LKH compared to Iolus or Mykil.
For a leave event, each member will receive a new area
key in Iolus. For a group of 100,000 members with maximum
area size of 5000 members, 5000 members will update one
key. In case of LKH, on an average, 50% of members will
need to update one key, 25% will update two keys, 12.5%
will update three keys, 6.25% will update four keys, and so
on. For a group of 100,000 members, this implies that 50,000