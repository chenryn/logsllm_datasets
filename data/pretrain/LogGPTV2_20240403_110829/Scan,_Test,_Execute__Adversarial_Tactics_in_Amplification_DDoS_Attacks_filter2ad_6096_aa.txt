title:Scan, Test, Execute: Adversarial Tactics in Amplification DDoS Attacks
author:Harm Griffioen and
Kris Oosthoek and
Paul van der Knaap and
Christian Doerr
Adversarial Tactics in Amplification DDoS Attacks
Scan, Test, Execute:
Harm Griffioen
PI:EMAIL
Hasso Plattner Institute
Potsdam, Germany
Paul van der Knaap
PI:EMAIL
Technische Universiteit Delft
Delft, The Netherlands
Kris Oosthoek
PI:EMAIL
Technische Universiteit Delft
Delft, The Netherlands
Christian Doerr
PI:EMAIL
Hasso Plattner Institute
Potsdam, Germany
ABSTRACT
Amplification attacks generate an enormous flood of unwanted
traffic towards a victim and are generated with the help of open,
unsecured services, to which an adversary sends spoofed service
requests that trigger large answer volumes to a victim. However,
the actual execution of the packet flood is only one of the activities
necessary for a successful attack. Adversaries need, for example, to
develop attack tools, select open services to abuse, test them, and
adapt the attacks if necessary, each of which can be implemented
in myriad ways. Thus, to understand the entire ecosystem and how
adversaries work, we need to look at the entire chain of activities.
This paper analyzes adversarial techniques, tactics, and proce-
dures (TTPs) based on 549 honeypots deployed in 5 clouds that
were rallied to participate in 13,479 attacks. Using a traffic shaping
approach to prevent meaningful participation in DDoS activities
while allowing short bursts of adversarial testing, we find that ad-
versaries actively test for plausibility, packet loss, and amplification
benefits of these servers, and show evidence of a “memory” of pre-
viously exploited servers among attackers. In practice, we demon-
strate that even for commonplace amplification attacks, adversaries
exhibit differences in how they work.
CCS CONCEPTS
• Security and privacy → Denial-of-service attacks.
KEYWORDS
Cyber Threat Intelligence, Internet Measurements, DDoS
ACM Reference Format:
Harm Griffioen, Kris Oosthoek, Paul van der Knaap, and Christian Doerr.
2021. Scan, Test, Execute: Adversarial Tactics in Amplification DDoS At-
tacks. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and
Communications Security (CCS ’21), November 15–19, 2021, Virtual Event,
Republic of Korea. ACM, New York, NY, USA, 15 pages. https://doi.org/10.
1145/3460120.3484747
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3484747
1 INTRODUCTION
In order to impair the availability of Internet services, adversaries
commonly deploy distributed denial-of-service (DDoS) attacks.
Such attacks typically take one of two forms: (1) they target commu-
nication protocols, for example, by exhausting a maximum number
of concurrent connections, a classic example of this being the TCP
SYN flood; or (2) they target the connection itself by flooding the
victim with large volumes of unwanted data so other data cannot
come through anymore. As such packet floods would require the at-
tacker to generate lots of traffic, these assaults are expensive for the
adversary. For this reason, they are typically executed as reflection
attacks, where the attacker forges a request on behalf of the victim
to a third party by address spoofing and lets the answer be delivered
to the impersonated victim. If the request is much smaller than the
resulting response, the cost and effort for the adversary are minimal.
Amplification attacks are conceptually easy, straightforward to
implement, and enable large attacks using minimal resources. The
attacker only needs to find open services running on a connection-
less protocol with an attractive amplification ratio. The importance
of this attack vector to DDoS attacks has led to several research
projects that looked into the ecosystem of these amplification at-
tacks over the past decades. Notable contributions to the field have
been made by Paxson [24] and Rossow [27], who created amplifica-
tion honeypots to capture attacks in-the-wild, or Krämer et al. who
ran 21 nodes with their AmpPot to discover previously unknown
details on amplification attacks and their victims [17].
While several studies look at amplification attacks in the wild,
little is known to date about the activity behind these attacks. In
other words: how do adversaries plan, prepare, and execute these
attacks? For example, when attackers collect lists of abusable ser-
vices, do they indiscriminately use any servers they encounter, or
do they carefully test, select and curate a portfolio of amplifiers?
Do adversaries go for “textbook” attacks, or do they make efforts
to understand and adjust their actions to cause the most damage?
To help answer these questions, we can look at DDoS attacks not
just in the context of the resulting packet flood but aim to under-
stand the entire chain of events that led to the execution and (suc-
cessful) completion of the attack. As shown in figure 1, before pack-
ets flow towards the victim, adversaries will have to go through a se-
ries of planning and preparatory steps, understanding which attack
vector to use, locating infrastructure that could be abused for ampli-
fication, selecting how the victim should be targeted, implementing
 This work is licensed under a Creative Commons Attribution International 4.0 License. CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea. © 2021 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-8454-4/21/11. https://doi.org/10.1145/3460120.3484747  Session 3D: DoS CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea940Figure 1: To understand how adversaries work, we can separate DDoS attacks into separate phases and activities and investigate
actor-specific techniques and commonalities in behavior between adversaries.
software and payloads to implement the attack, to eventual testing.
Each of these steps can be implemented in various ways. By study-
ing adversarial behavior, we gain better insights into the threat
landscape of DDoS attacks assisting in developing better defenses.
In this paper, we perform an investigation into the different
phases of DDoS attacks and in-depth analysis into the steps and
techniques used by adversaries while developing, preparing, and
executing such attacks. By deploying 549 honeypots in 5 public
clouds around the world over a period of 3 months, we have col-
lected a total of 605,181 reconnaissance and testing activities lead-
ing up to 13,479 attacks consisting of 720,995 individual attack flows
on 8,315 victim systems. Through careful design of experimental
conditions where we use a new traffic shaping approach to ensure
we are not actively participating in these attacks, our study elicits
adversarial behaviors by monitoring amplification attacks through
an infrastructure an order of magnitude larger than previous work
and provides significant new insights into the threat landscape that
have been primarily investigated based on the attacks themselves.
We show that a bulk of these 13,479 attacks can be linked together
based on shared adversarial techniques, tactics, and procedures
(TTPs). With this work, we make the following main contributions:
• We are the first to investigate the full ecosystem of amplifi-
cation DDoS attacks and the impact of amplification power
offered by a service on the level of abuse.
• We demonstrate a wide variety of ways how attackers main-
tain and curate their lists of abusable servers. We find that
there is a “memory” on the Internet for some protocols that
IPs once ran a service. Adversaries still return to these weeks
after the service has stopped responding to requests.
• We show how sophisticated attackers optimize their band-
width usage by conducting attacks in pulses rather than a
constant packet stream, reducing the cost of attacks.
• We demonstrate that the number of honeypots needed to
obtain sufficient attack coverage is much higher than previ-
ously shown in related work and that the threat landscape
is more diverse than previously thought once we employ a
large number of honeypots.
• We show that while the bulk of the threat landscape consists
of unsophisticated actors with little capability, there are very
knowledgeable adversaries who test services they abuse.
2 RELATED WORK
While DDoS attacks have historically been conducted using botnets
as a means to amass enough firepower [5], the largest attacks to
date were recorded as amplification attacks, with Google reporting
attacks peaking at 2.5 Tbps [1]. The ease with which these amplifi-
cation attacks create large traffic floods popularized this method,
and researchers report a median of 1,930 attacks per day since 2014
[32]. Many works exist analyzing observed amplification attacks
by setting up amplification honeypots. In 2001, Paxson conducted
the first work on capturing these amplification attacks “in the wild”
by setting up these fake amplification services [24]. In more re-
cent work, Rossow [27] provides an in-depth study into attacks
performed in 2014, analyzing captured traces on various protocols
and evaluating open amplification services on the Internet. Subse-
quently Kührer et al. have performed significant work to reduce vul-
nerable NTP services and IP address spoofing [20], complemented
by others that have focused on amplification using specific proto-
cols, such as DNS [3, 8, 10, 21, 22, 31] or NTP [6, 25, 28, 30]. The
largest study on amplification attacks to date has been performed
by Thomas et al., who capture attack traces using a mean of 59.7
honeypots over 1010 days [32].
While the work on executed amplification attacks is abundant,
research on the ecosystem behind these attacks is scarce. The first
work to address this is from Krämer et al. [17], who deployed hon-
eypots with different modes to capture differences in the behavior
of adversaries using these systems. The authors used a fixed rate-
limiting threshold to prevent their experiment from causing seri-
ous damage but identify the concern that this rate limit might lead
to honeypots being detected as such by scanners. While work by
Krämer et al. [17] has tried to establish how many honeypots are
needed to capture a significant part of these attacks by setting up 21
honeypots in different geographical regions, the lack of understand-
ing on how “smart” adversaries select their amplification servers
can significantly bias the results as these attackers might test the
devices and consequently stop using them. To further understand
the ecosystem of amplification attacks, Krüpp et al. analyzed the
reconnaissance activity performed as part of DDoS operations [18].
In another experiment, Krüpp et al. used a set of 11 honeypots to at-
tribute their use to certain booter services [19]. While the authors
could link usage of their honeypots to actual booter services, they
only found their results representative for DNS and NTP as they
Session 3D: DoS CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea941missed portions of self-attacks for SSDP and CHARGEN. Other
works have also investigated the use of booter services in order to
gain more understanding of the ecosystem [12, 14, 15, 29]. How-
ever, only some of them have specifically explored the use of ampli-
fication DDoS honeypots in the context of these services, such as
Kopp et al. [16] who have investigated spatial and temporal trends
of DDoS attacks launched by booter services.
Contrary to honeypots aimed at compromisation attempts [33], it
is currently unknown to which extent adversaries test and abandon
amplification honeypots. While some works set initial steps into
this direction by creating different configurations in the honeypots
[17], none of the prior works has deployed a large enough network
of honeypots to accurately capture these adversarial differences nor
used a traffic shaping method to allow adversarial testing traffic. As
prior works on DDoS attacks have mostly considered the execution
and only look at a narrow set of the entire chain of attacks required
for the attack to be successful, it is currently unknown to what
extent adversaries test systems to use in their attack and whether
they are actively weeding out known honeypots. The closest work
to address the entire chain of steps is by Krupp et al. [18] who
analyze the scanning behavior between different attacks but do not
investigate other activities around the preparation or testing of an
attack. Analyzing the entirety of these attacks will allow researchers
to describe and discuss these attacks in more detail.
In this work, we go beyond adversarial scanning and set up
various experiments using a configurable honeynet an order of
magnitude larger than prior work. In a series of experiments, we not
only investigate how adversaries discover and abuse amplifiers but
study all steps adversaries take leading up to the DDoS attack itself.
This allows us to study the sophistication of adversarial activities
and a deeper assessment of the threat landscape than before.
3 DDOS ATTACK CHAIN AND SYSTEM SETUP
Previous studies discovered several methods used by adversaries to
select amplification servers and victims. However, as discussed in
the previous section, most research is limited to the attack itself and
does not study the sequence of events before and during the attack
nor investigates the adversarial characteristics behind the attack.
In this study, we aim to address this gap through configurable,
adaptive honeypots, which enable us to investigate how actors
work towards attacks, how they prepare, what they look for in a
service to abuse until the actual execution of the attack.
The DDoS Attack Chain. Amplification attacks typically do not
suddenly emerge, but the onset of an attack on a victim results from
a series of preparatory steps by the adversary that we can identify
and measure. In this paper, we structure these activities along a
sequence of six consecutive phases as depicted in figure 1, which
allows for an effective discussion and thus a better understanding
of how DDoS operations are realized. Although the concrete attack
on a particular victim may be unique, adversaries can be assumed to
recycle much of the supporting activities, such as the list of abusable
servers or attack methods, which allows the recognition and linking
of individual attacks, as well as to provide a better understanding of
the ecosystem and an early warning system for upcoming activities.
As shown in figure 1, a pre-requisite for a DDoS attack is some
Capability Development by the adversary. Depending on attacker
(a) Honeypot Design
(b) System Architecture
Figure 2: Deployed honeypots maintain a control connec-
tion to a coordinator to perform effective rate-limiting.
sophistication, this can range from modifying standard scripts to
tailor-made attack vectors. Next, the attacker would have to perform
Infrastructure Reconnaissance to identify and collect systems that
can be used as part of the attack. In terms of amplification attacks,
the attacker would locate available amplifiers, but other attacks
could recruit unsecured IoT devices or bots as a platform for the
attack. The adversary then needs to know where to attack the
victim. In Target Reconnaissance the fundamental details necessary
for the attack, such as the victim’s IP address, open ports, and
vulnerabilities, are collected. During Weaponization, the output of
the previous three phases is fused to craft the attack technique that
will be used to perform the attack. To assess whether the developed
weaponization is suitable to harm the target or even work with
the identified infrastructure, some Testing may be required, before
finally, the Execution commences, and is ‘delivered’ to the victim.
In order to observe these adversarial TTPs
System Overview.
along the DDoS attack chain, we developed a framework for the
operation and management of honeypots. The system aims to en-
able deployment and exposure of commonly used services towards
the Internet and allow us to facilitate attacker-dependent, config-
urable responses to incoming requests dynamically.
Figure 2(a) shows an architectural diagram of the honeypot. In
order to provide an authentic appearance, each honeypot runs a se-
lection of containerized services, for example, BIND to service DNS
requests or ntpd for NTP queries. Incoming requests from the Inter-
net are either proxied to these instances or to an emulated service
that returns (obviously) fake answers. This emulated service does
not implement all features the protocol requires in order to test the
interaction and reaction of adversaries to services. The Bandwidth
Amplification Ratio (BAF) [27] of the honeypots are listed in Ta-
ble 1. In addition to logging the interactions of adversary and back-
end services at the application layer, packets are also recorded at
the link layer to discover reconnaissance actions like port scanning
as well as implementation characteristics in the attack packets to
potentially relate individual attacks and adversaries.
Our behavior differs depending on how the honeypots are con-
tacted. As shown in figure 2(b), all honeypots are in constant com-
munication with a central coordinator, which tracks the requests
sent to all 549 honeypots. Suppose the incoming requests exhibit
Flow DirectorToken BucketDockerized Authentic ServiceEmulated Fake ServiceConﬁgHoneypotCoordinationPCAPPublic IPEndpointInternetTelescope for scan quantiﬁcationNet1Net2Net3Net4HoneypotcoordinatorOpen ampliﬁable servicesHoneypotsSession 3D: DoS CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea942features of selected testing (e.g., only individual honeypots are trig-
gered, short bursts instead of a packet flood are requested, requests
are typical reconnaissance but no amplification packets, etc.). In
that case, the coordinator instructs the honeypot to comply, if the
requests show the characteristics of an attack, which we can detect
due to our distributed setup, which will be explained in Section 5.2,