### Performance Improvements on Tor
**or,**
**Why Tor is Slow and What We’re Going to Do About It**

**Authors:**
- Roger Dingledine
- Steven J. Murdoch

**Date:**
March 11, 2009

---

As the user base of Tor has expanded, the performance of the Tor network has deteriorated. This document provides an overview of the current understanding of why Tor is slow and outlines potential solutions to address these issues.

Over the past few years, our funding and development efforts have primarily focused on enhancing usability and resistance to censorship. We have developed a portable, self-contained Windows bundle; deployed tools to counter upcoming censorship challenges; further refined supporting applications such as Vidalia, Torbutton, and Thandy; simplified the process for users to become relays by implementing better rate limiting and a user-friendly graphical interface with uPnP support; established an effective translation and localization team and infrastructure; and promoted the use of Tor through safe, word-of-mouth methods that remain largely undetected by censors.

In parallel with these enhancements, we have also been laying the groundwork for performance improvements. We have collaborated with academics to write research papers on improving Tor's speed, funded academic groups to develop prototypes, and carefully considered how to safely collect metrics about network performance. However, it is becoming increasingly clear that theoretical approaches alone are insufficient. We need to implement and test potential solutions to gain practical insights into effectively solving these problems.

We have identified six primary reasons for the slowness of the Tor network:

1. **Ineffective Congestion Control:** Tor’s congestion control does not adequately manage the coexistence of high-volume (e.g., bulk transfer) and low-volume (e.g., web browsing) streams.
2. **Excessive Traffic from Some Users:** Some Tor users generate more traffic than they contribute, necessitating measures to limit their impact or prioritize other users.
3. **Insufficient Network Capacity:** The Tor network lacks the capacity to handle all users seeking privacy on the Internet. Strategies are needed to increase the number of relays and potentially introduce incentives to make the network more self-sustaining.
4. **Suboptimal Path Selection Algorithms:** Current path selection algorithms do not distribute load evenly across the network, leading to some relays being overloaded while others are underutilized.
5. **Poor Client Handling of Latency and Failures:** Tor clients need better mechanisms to handle high or variable latency and connection failures, including heuristics to automatically switch away from problematic circuits.
6. **High Overhead for Low-Bandwidth Users:** Low-bandwidth users spend too much time downloading directory information, which needs to be addressed to reduce overhead.

Each of these issues is discussed in detail in the following sections. For each section, we provide our current understanding of the problem, potential solutions, the expected effectiveness of these solutions, the associated effort and risks, and recommended next steps, with a focus on what can be achieved in 2009.

While all six categories need to be addressed to significantly improve Tor's performance, we have prioritized the sections based on their precedence. Solving the earlier issues will be necessary to fully benefit from addressing the later ones.

---

### Contents
1. **Tor’s Congestion Control Does Not Work Well**
   - 1.1 TCP Backoff Slows Down Every Circuit at Once
   - 1.2 Tor’s Congestion Control Window Sizes Are Incorrect

2. **Some Users Add Too Much Load**
   - 2.1 Squeeze Over-Active Circuits
   - 2.2 Throttle Certain Protocols at Exits
   - 2.3 Throttle Certain Protocols at the Client Side
   - 2.4 Throttle All Streams at the Client Side
   - 2.5 Default Exit Policy of 80,443
   - 2.6 Better User Education

3. **The Tor Network Lacks Sufficient Capacity**
   - 3.1 Tor Server Advocacy
     - 3.1.1 Talks and Trainings
     - 3.1.2 Better Support for Relay Operators
     - 3.1.3 A Facebook App to Showcase Relays
     - 3.1.4 New Ways to Encourage People to Run Relays
   - 3.2 Funding More Relays Directly
   - 3.3 Handling Fast Tor Relays on Windows
   - 3.4 Relay Scanning to Identify Overloaded Relays or Broken Exits
   - 3.5 Quickly Reintegrate Dynamic-IP Relays
   - 3.6 Incentives to Relay
   - 3.7 Automatically Convert Reachable Clients to Relays

4. **Tor Clients Choose Paths Imperfectly**
   - 4.1 Imbalanced Traffic Distribution Based on Bandwidth Numbers
   - 4.2 Inaccurate Bandwidth Estimates
   - 4.3 Bandwidth May Not Be the Right Metric
   - 4.4 Considering Exit Policy in Relay Selection
   - 4.5 Overloaded Older Entry Guards

5. **Clients Need to Handle Variable Latency and Failures Better**
   - 5.1 Granular Round-Robin and Rate Limiting
   - 5.2 Improved Timeouts for Circuit Abandonment
   - 5.3 Multiple Circuit Extension Attempts
   - 5.4 Bundling First Data Cell with Begin Cell

6. **High Network Overhead for Modem Users**
   - 6.1 Progress in Reducing Directory Overhead
   - 6.2 Improving TLS Overhead

7. **Final Thoughts**
   - 7.1 Lessons from Economics
   - 7.2 The Plan Moving Forward

---

### 1. Tor’s Congestion Control Does Not Work Well

One of the critical performance issues in Tor is the way it manages high-volume and low-volume streams. We need to find ways to allow "quiet" streams (like web browsing) to coexist more effectively with "loud" streams (like bulk transfers).

#### 1.1 TCP Backoff Slows Down Every Circuit at Once

Tor combines all circuits between two relays into a single TCP connection. This approach enhances anonymity by preventing observers from linking packets to specific circuits. However, recent research has shown that this design is detrimental to performance. When the connection sends too many bytes, TCP's backoff mechanism slows down all circuits on that connection.

A potential solution is to use one TCP connection per circuit, but this would require a relay with 1000 connections and 1000 circuits per connection to open a million sockets, which is impractical even for well-designed operating systems and routers.

Currently, Tor uses two levels of congestion avoidance: TCP flow control per link and a simple windowing scheme per circuit. This dual-layer approach may cause performance issues due to poor interaction between the two schemes.

Experiments have shown that moving congestion management to be fully end-to-end can significantly improve performance.

Two proposals aim to resolve this issue by using an unreliable protocol for links between Tor relays and performing error recovery and congestion management between the client and exit relay. Joel Reardon’s thesis, partially funded by Tor, proposed using DTLS (a UDP variant of TLS) as the link protocol and a simplified version of TCP for reliability and congestion avoidance. Csaba Kiraly et al. suggested using IPSec to replace the entire Tor cell and link protocol.

Each proposal has its strengths and weaknesses. DTLS is relatively immature, and there are deficiencies in the OpenSSL implementation. Additionally, a high-quality, privacy-preserving TCP stack under a compatible license is needed. Previous work has shown that TCP stacks and clock skew can leak identity information, so any adopted solution must address these privacy concerns.

Reardon built a prototype using the TCP-Daytona stack, but its availability and licensing are unclear, making it unsuitable for Tor. Writing a TCP stack from scratch is a significant undertaking, and other attempts to move different operating system stacks into user space are still in the experimental phase.

Kiraly et al. rely on the operating system IPsec stack and modifications to the IKE key exchange protocol to support onion routing. Like Reardon’s proposal, there is a risk of fingerprinting from exposing the client TCP stack to the exit relay, which could be mitigated with careful implementation.