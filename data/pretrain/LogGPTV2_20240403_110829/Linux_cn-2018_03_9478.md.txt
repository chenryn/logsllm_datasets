---
author: Thomas & Erin Ptacek
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 7712
date: '2018-03-25 10:33:32'
editorchoice: false
excerpt: 太长了，懒得看：直接使用 urandom 吧。
fromurl: https://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers/
id: 9478
islctt: true
largepic: /data/attachment/album/201803/25/103321odkv11vbjidznn8d.jpg
permalink: /article-9478-1.html
pic: /data/attachment/album/201803/25/103321odkv11vbjidznn8d.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 9697
- displayorder: 0
  raid: 10816
reviewer: ''
selector: ''
summary: 太长了，懒得看：直接使用 urandom 吧。
tags:
- 随机数
- 加密
thumb: false
title: 如何安全地生成随机数
titlepic: true
translator: kimii
updated: '2018-03-25 10:33:32'
---

![](/data/attachment/album/201803/25/103321odkv11vbjidznn8d.jpg)

## 使用 urandom

强烈建议使用 [urandom](http://blog.cr.yp.to/20140205-entropy.html)！[urandom](http://cr.yp.to/talks/2011.09.28/slides.pdf) 是一个非常可靠的选择。无论是在 [Go 语言](http://golang.org/src/pkg/crypto/rand/rand_unix.go)、[安全讨论](http://security.stackexchange.com/questions/3936/is-a-rand-from-dev-urandom-secure-for-a-login-key) 还是 [Stack Overflow](http://stackoverflow.com/a/5639631) 上，urandom 都被广泛推荐。此外，Bram Cohen 在 [Twitter](https://twitter.com/bramcohen/status/206146075487240194) 上也支持使用 urandom。

## 但对于密码学密钥呢？

即使是生成密码学密钥，仍然推荐使用 [urandom](https://twitter.com/bramcohen/status/206146075487240194)。

## 为什么不是 SecureRandom、OpenSSL、havaged 或 C 语言实现呢？

这些工具都是用户空间的 CSPRNG（密码学伪随机数生成器）。你应该优先使用内核提供的 CSPRNG，原因如下：
- 内核可以直接访问原始设备熵。
- 它可以确保应用程序之间不会共享相同的状态。
- 好的内核 CSPRNG（如 FreeBSD 中的）在播种之前不会提供随机数据。

过去十年中，许多随机数生成失败案例都与用户空间的 CSPRNG 有关。例如，Debian 的 OpenSSH 崩溃和安卓比特币钱包中的重复 ECDSA 随机 k 值问题，都是由于使用了用户空间的 CSPRNG。用户空间的生成器通常依赖于内核生成器，即使它们不这样做，整个系统的安全性也会受到影响。**用户空间的 CSPRNG 不会增加防御深度；相反，它会产生两个单点故障。**

## 手册页不是说要使用 /dev/random 吗？

手册页建议使用 `/dev/random`，但这是基于一种过时的观点。实际上，你应该忽略这一建议，而选择使用 `/dev/urandom`。`/dev/random` 和 `/dev/urandom` 之间的区别是一个 Unix 设计缺陷。手册页试图掩盖这一点，从而产生了不必要的安全顾虑。将 `random(4)` 中的密码学建议视为过时的信息，继续使用 `/dev/urandom` 即可。

## 但如果我需要的是真随机值，而非伪随机值呢？

`/dev/urandom` 和 `/dev/random` 提供的是同一类型的随机性。与流行观点相反，`/dev/random` 并不提供“真正的随机”。在大多数情况下，你不需要“真正的随机”。

这两个设备的设计基于一个小秘密（熵），并将其扩展为不可预测的输出流。Linux 内核的 CSPRNG 会定期更新密钥（通过收集更多的熵），但 `/dev/random` 试图跟踪剩余的熵，并在熵不足时暂停。这种设计是不合理的，类似于 AES-CTR 在密钥流中剩余密钥不足时的行为。

如果你使用 `/dev/random` 而不是 `/dev/urandom`，你的程序可能会在 Linux 对其 RNG 工作方式感到困惑时挂起。这不仅会使你的程序不稳定，也不会提高密码学安全性。

## 这是个缺陷吗？

虽然这不是一个严重的缺陷，但在某些情况下，你需要了解 Linux 内核的一个 bug。如果你的软件在系统启动时立即运行，或者刚安装完操作系统，你的代码可能会与 RNG 发生竞争。如果赢得竞争，你可能会从 `/dev/urandom` 获得可预测的输出。这是一个 Linux 内核的 bug，如果你正在为 Linux 嵌入式设备编写平台级代码，需要特别注意。

在这种情况下，明确地为 `/dev/urandom` 提供种子可以解决这个问题。长期以来，大多数 Linux 发行版都是这样做的。但**不要**切换到其他 CSPRNG。

## 在其他操作系统上呢？

FreeBSD 和 macOS 消除了 `/dev/urandom` 和 `/dev/random` 之间的区别。这两个设备的行为是相同的。不幸的是，手册页并没有很好地解释这一点，延续了关于 `/dev/urandom` 的错误观念。

无论你使用 `/dev/random` 还是 `/dev/urandom`，FreeBSD 的内核加密 RNG 都不会停摆。只有在未提供种子的情况下，两者才会停止工作。这种行为是有道理的，Linux 应该采用这种方法。但对于应用程序开发人员来说，无论是在 Linux、FreeBSD 还是 iOS 上，都应该使用 `/dev/urandom`。

## 太长了，懒得看

直接使用 `/dev/urandom` 吧。

## 结语

[ruby-trunk Feature #9569](https://bugs.ruby-lang.org/issues/9569) 提出了一个改进 SecureRandom.random_bytes 的建议：
> 
> 目前，SecureRandom.random_bytes 会在尝试检测 `/dev/urandom` 之前先检测 OpenSSL。我认为应该反过来。在这两种情况下，你只需要解压随机字节，所以 SecureRandom 可以跳过中间环节（和第二个故障点），直接与 `/dev/urandom` 交互。
> 

总结：
> 
> `/dev/urandom` 适用于直接生成会话密钥和频繁生成其他应用程序级随机数据。
> 
> GNU/Linux 上的 random(4) 手册所述......
> 

感谢 Matthew Green、Nate Lawson、Sean Devlin、Coda Hale 和 Alex Balducci 阅读了本文草稿。Matthew 主要同意我的观点。

---
via: 
作者：[Thomas & Erin Ptacek](https://sockpuppet.org/blog)  
译者：[kimii](https://github.com/kimii)  
校对：[wxy](https://github.com/wxy)  
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出