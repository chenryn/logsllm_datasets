### Challenges of TLS Client Authentication at Web Scale

While TLS client authentication is effective in small, managed systems such as enterprise networks, its limitations become apparent when applied at web scale. The primary issues include poor user experience, layer confusion, privacy concerns, portability, and the trusted computing base in data centers.

#### Poor User Experience
One major drawback of conventional TLS client authentication is the cumbersome, complicated, and onerous interface that users must navigate to use a client certificate. When web servers request that browsers generate a TLS client certificate, users are often presented with a dialog where they must choose the certificate cipher and key length. This process is further complicated when users are prompted to select the client certificate to use for a specific site during the TLS handshake, before they can inspect any content of the website. This premature "login action" can be confusing and frustrating for users.

#### Layer Confusion
TLS client authentication places user identity at the wrong layer in the network stack. For example, Google's multi-login feature allows multiple accounts to be logged into a website simultaneously, with identities encoded in cookies. This enables quick switching between accounts and even the potential to display a "mashup" of several users' accounts on one page. However, with TLS client authentication, the user identity is established at the TLS layer and inherited by the HTTP and application layers. Since client certificates typically contain only one user identity, this forces the application layer to recognize only that single identity, limiting the flexibility of multi-login features.

#### Privacy Concerns
Once a user obtains a certificate, any website can request TLS client authentication using that certificate. This means the user must either not log in at all or use the same identity across multiple sites, which is undesirable. Creating different certificates for different sites exacerbates the user experience, as users are then presented with a list of certificates every time they visit a site requiring TLS client authentication.

#### Portability
Certificates are ideally linked to a private key that cannot be extracted from the underlying platform, making them non-portable. Solutions to this problem, such as re-obtaining certificates from the Certificate Authority (CA) for different devices, extracting private keys (which is against best security practices), or cross-certifying certificates from different devices, have not yet provided satisfactory user interfaces.

#### Trusted Computing Base in Data Centers
Large data centers often terminate TLS connections at the data center boundary, sometimes using specialized hardware. If the TLS client certificate is used for user authentication, the source of that authentication is lost at the data center boundary. This makes the TLS terminators part of the trusted computing base, as they report to the backends who the authenticated user is. A compromised TLS terminator could essentially become "root" with respect to the applications running in the data center. In contrast, a cookie-based authentication system, where the TLS terminator forwards the cookie to the app frontend, would not allow a compromised TLS terminator to fabricate arbitrary authentic cookies.

### Other Related Efforts

#### CardSpace
Microsoft's CardSpace addressed two key issues: it replaced passwords with a public-key-based protocol and moved user identity from the TLS layer to the application layer. It allowed users to manage multiple digital identities from a single interface, storing them as "cards." Users could choose which card to use when visiting a website, and CardSpace would authenticate them by sending cryptographic tokens. Despite its features, CardSpace did not become an industry standard, likely due to its complexity, which unnecessarily complicated the user interface and development models.

#### BrowserID
Mozilla's BrowserID abstracted identity to the level of email addresses, aiming to replace password bearer tokens for websites that choose to become relying parties to email providers. Users authenticate by providing cryptographic proof of email ownership. BrowserID maintains a cache of emails and generates the respective proofs for the user. Unlike CardSpace, BrowserID is based on a simpler model of identity and implementation platform. It is complementary to the ideas in this paper and could be adjusted to bind BrowserID identity assertions to the underlying TLS channel if the browser supports origin-bound certificates.

#### TLS-SA
Opplinger et al. proposed the TLS Session Aware (TLS-SA) User Authentication scheme to address the disconnect between user authentication and TLS channels. TLS-SA aims to solve the man-in-the-middle (MITM) problem by providing the server side of a TLS connection with the information necessary to determine if a user's credentials have been sent over a different TLS session than the one the client thought. However, these protections apply only to initial user credentials and not to subsequent bearer tokens. To our knowledge, TLS-SA has not been implemented or tested at a large scale.

#### Hardening Cookies
Some work has focused on hardening HTTP cookies. For example, Murdoch presented a method for toughening cookies by encoding values based on a secret server key and a hash of the user's password. This approach makes it harder for attackers to fabricate fake cookies but does not protect the user if the cookie is stolen.

### Conclusion

In this paper, we presented TLS origin-bound certificates (TLS-OBCs) as a new approach to TLS client certificates. TLS-OBCs act as a foundational layer for establishing an authenticated channel for the web. We demonstrated how TLS-OBCs can be used to harden existing HTTP layer authentication mechanisms like cookies, federated login protocols, and user authentication. We implemented TLS-OBCs as an extension to OpenSSL and NSS TLS implementations and deployed them in the Chromium open-source browser and the TLS terminator of a major website. Finally, we showed that the performance overhead of using TLS-OBCs is minimal in terms of CPU and memory load on the TLS server and observed latency on the TLS client.

We see origin-bound certificates as a first step towards enabling more secure web protocols and applications.

### Acknowledgements

Many individuals contributed to the work presented in this paper. We thank the team at Google, including Mayank Upadhyay, Adam Langley, Wan-Teh Chang, Matt Mueller, Ryan Hamilton, Diana Smetters, Adam Barth, and Warren Zhang, for helping us develop, implement, and test the ideas. We also thank Ben Adida, Mike Hanson, and Brian Smith from Mozilla, as well as the members of the IETF TLS Working Group for their feedback and improvements. Special thanks to Tadayoshi Kohno for his support and the anonymous reviewers of our manuscript for their valuable input.

### References

[1] H. Adkins. Man-in-the-middle update: An attempted attack. http://googleonlinesecurity.blogspot.com/2011/08/update-on-attempted-man-in-middle.html, Aug 2011.

[2] D. Balfanz. TLS Origin-Bound Certificates. http://tools.ietf.org/html/draft-balfanz-tls-obc-01, Nov 2011.

[3] J. Barr. AWS Elastic Load Balancing: SSL Termination Support. http://aws.typepad.com/aws/2010/10/elastic-load-balancer-support-for-ssl-termination.html, Oct 2010.

[4] S. Blake-Wilson, T. Dierks, and C. Hawk. ECC Cipher Suites for TLS. http://tools.ietf.org/html/draft-ietf-tls-ecc-01, March 2001.

[5] S. Blake-Wilson, M. Nystrom, D. Hopwood, J. Mikkelsen, and T. Wright. Transport Layer Security (TLS) Extensions. http://tools.ietf.org/html/rfc4366, Apr 2006.

[6] A. Bortz, A. Barth, and A. Czeskis. Origin cookies: Session integrity for web applications. In Web 2.0 Security & Privacy, 2011.

[7] E. Butler. Firesheep. http://codebutler.com/firesheep, 2010.

[8] A. Czeskis and D. Balfanz. Protected Login. In Proceedings of the Workshop on Usable Security (at the Financial Cryptography and Data Security Conference), March 2012.

[9] T. Dierks and C. Allen. The TLS Protocol, Version 1.0. Internet Engineering Task Force, Jan. 1999. RFC-2246, ftp://ftp.isi.edu/in-notes/rfc2246.txt.

[10] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2 – Client Certificates, 2008. http://tools.ietf.org/html/rfc5246#section-7.4.6.

[11] I. Hickson. HTML5 Web Messaging. http://dev.w3.org/html5/postmsg/, Jan 2012.

[12] J. Hurwich. Chrome Benchmarking Extension. http://www.chromium.org/developers/design-documents/extensions/how-the-extension-system-works/chrome-benchmarking-extension, Sept 2010.

[13] Microsoft. Introducing Windows CardSpace, 2006. http://msdn.microsoft.com/en-us/library/aa480189.aspx.

[14] Mozilla. BrowserID, 2012. https://developer.mozilla.org/en/BrowserID.

[15] S. Murdoch. Hardened stateless session cookies. Security Protocols XVI, pages 93–101, 2011.

[16] A. Mushaq. Man in the Browser: Inside the Zeus Trojan, 2010. http://threatpost.com/en_us/blogs/man-browser-inside-zeus-trojan-021910.

[17] R. Oppliger, R. Hauser, and D. Basin. SSL/TLS session-aware user authentication–or how to effectively thwart the man-in-the-middle. Computer Communications, 29(12):2338–2246, 2006.

[18] R. Opplinger, R. Hauser, and D. Basin. SSL/TLS session-aware user authentication revisited. Computers & Security, 27(3-4):64–70, 2008.

[19] S. Park and D. L. Dill. Verification of cache coherence protocols by aggregation of distributed transactions. Theory of Computing Systems, 31(4):355–376, 1998.

[20] D. Recordon and B. Fitzpatrick. OpenID Authentication 1.1. http://openid.net/specs/openid-authentication-1_1.html, May 2008.

[21] E. Rescorla. Keying Material Exporters for Transport Layer Security (TLS). http://tools.ietf.org/html/rfc5705, March 2010.

[22] J. Rizzo and T. Duong. BEAST. http://vnhacker.blogspot.com/2011/09/beast.html, Sept 2011.

[23] N. Sakimura, D. Bradley, B. de Mederiso, M. Jones, and E. Jay. OpenID Connect Standard 1.0 - Draft 07. http://openid.net/specs/openid-connect-standard-1.

[24] C. M. Shields and M. M. Toussain. Subterfuge: The MITM Framework. http://subterfuge.googlecode.com/files/Subterfuge-WhitePaper.pdf, 2012.

[25] A. S. Tanenbaum, S. J. Mullender, and R. van Renesse. Using sparse capabilities in a distributed operating system. In 6th International Conference on Distributed Computing Systems, pages 558–563, Cambridge, Massachusetts, May 1986.

[26] The Chromium Project. SPDY, 2012. http://www.chromium.org/spdy.

[27] E. Wobber, M. Abadi, M. Burrows, and B. Lampson. Authentication in the Taos operating system. ACM Transactions on Computer Systems (TOCS), 12(1):3–32, 1994.