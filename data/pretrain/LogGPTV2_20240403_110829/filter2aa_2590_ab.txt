### 3.5 Thread-Specific Hooks
The final type of hook discussed in this section is the thread-specific hook. These hooks are created when `dwThreadId` is set to a specific thread ID, rather than `NULL`, which targets all threads. To implement one of these hooks, we added the code shown in Figure 5 to our Proof of Concept (PoC) application.

**Figure 5: SetWindowsHookEx with a Thread-Specific Hook**

In the code, it is evident that the mouse monitoring hook is registered against a particular process, which, in our PoC, is a `notepad.exe` process spawned earlier by the PoC. The `module` parameter is a handle to the DLL implementing the mouse hook procedure. Since this hook is process-specific, Windows will load the referenced DLL into the target process.

#### 3.5.1 Volatility Support
Our testing revealed that the existing Volatility `messagehooks` plugin did not support thread-specific hooks. Therefore, we needed to investigate why these hooks were being missed. Analysis of the kernel functions that activate hooks showed that thread-specific hooks were stored in an `aphkStart` array inside the `tagTHREADINFO` structure, rather than in the array referenced from the `tagDESKTOPINFO` structure. Based on this discovery, we updated the `messagehooks` plugin to enumerate both `aphkStart` arrays. This allowed our previous keyboard hook and the new thread-specific mouse hook to be enumerated. Figure 6 shows the output of our updated `messagehooks` plugin against a memory sample with our mouse hook active. As can be seen, the plugin is now capable of recovering thread-specific hooks.

**Figure 6: messagehooks Recovering our Thread-Specific Hook**

We then tested this new support across different Windows versions and noticed that the DLL path was not recovered for a single memory sample. We manually ran Volatility’s `atomscan` plugin across the memory samples, which scans Windows atom tables and outputs individual atoms. We determined that the DLL path for the hooking DLL was not present in the atom table for any of the samples. This indicated a potential issue with the plugin, as we expected the `ihmod` value of `tagHOOK` to reference a global atom containing the path of the hooking DLL, as it does for global hooks.

This led us to re-examine the internal implementation of `SetWindowsHookEx`. We found that thread-specific hooks do not populate the global atom table at all. Instead, the `ihmod` value of thread-specific hooks references an index into the `ahmodLibLoaded` array stored inside the `tagPROCESSINFO` structure, which holds the base addresses of DLLs associated with the process. With this information, we were able to update `messagehooks` to conditionally retrieve the DLL path based on whether the hook is global or local. This change allows Volatility to now retrieve the DLL path, if present, for all hook types and variations. Figure 7 shows the output of our fully updated plugin, which is aware of both DLL path sources.

**Figure 7: Properly Recovering the DLL Path**

As illustrated, the full path is retrieved for the DLL hosting the mouse hook, rather than simply printing out the `ihmod` value. By extracting the DLL to disk, the investigator can begin analyzing the hook procedure starting at offset `0x10f0` of the DLL.

With all the updates described in this section, the `messagehooks` plugin of Volatility can now successfully recover complete information about all message hook variations through the latest version of Windows 10.

### 4 Windows Analysis - RegisterRawInputDevices

#### 4.1 Background
Abuse of the `RegisterRawInputDevices` API is the second popular method that Windows userland malware employs to monitor device activity. Many high-profile attack samples and APT groups have abused this feature, including PlugX variants, the Dexter Point-of-Sale malware, HawkEye, FIN7, and APT27 [10, 11, 12, 13, 14, 15]. An article on Code Project by Mike Mee provides a very accessible read on how these hooks are registered by a programmer [16]. We strongly suggest reading this article before proceeding if you are new to this type of keylogger.

The typical method for abusing this API involves first registering an invisible window that will be used to attach the malware’s callback function. This is done by registering a custom class through the `RegisterClass` API. Once registered, the class can be used to create the hidden window. Figure 8 shows how this is performed in our PoC application.

**Figure 8: RegisterRawInputDevices Prototype**

As shown, we define a callback function named `WndProc` that receives GUI messages, and we name our custom class `VolGUI-kl`. Next, we write information to the output file for future verification and then create our hidden window. The first parameter to `CreateWindow` must be the name of a registered class, which we set to our previously registered instance. We then give our window a predefined name so that we can verify it during future plugin runs.

To receive all input events, the callback function must properly handle `WM_CREATE` and `WM_INPUT` messages. `WM_CREATE` is sent upon the creation of a window of the given class, and this is when a keylogger must use `RegisterRawInputDevices` to receive future `WM_INPUT` messages that contain each keystroke. Figure 9 shows the prototype for `RegisterRawInputDevices`, and Figure 10 displays the input structure (`tagRAWINPUTDEVICE`).

**Figure 9: RegisterRawInputDevices Prototype**

**Figure 10: tagRAWINPUTDEVICE Definition**

The first parameter, `pRawInputDevices`, specifies one or more `tagRAWINPUTDEVICE` structures that describe the devices to be monitored. The second parameter specifies the number of devices described, and the last parameter specifies the size of each input structure.

To properly monitor the keyboard or other desired devices, the `usUsagePage` and `usUsage` members of the `tagRAWINPUTDEVICE` structure must be set correctly. For malware targeting common devices (keyboard, mouse), the `usUsagePage` must be set to `HID_USAGE_PAGE_GENERIC`, which has a constant value of 1. Figure 11 shows the possible options for the `usUsage` member.

**Figure 11: Possible Options for usUsage**

For malware that wants to perform keylogging, it will set this value to `HID_USAGE_GENERIC_KEYBOARD`, which has a constant value of 6. Once registered, the window callback procedure will receive `WM_INPUT` messages after each keystroke, and the `GetRawInputData` API can be used to translate these messages to the keys typed on the monitored keyboard.

#### 4.2 Internals
A blog post on the “Eye of Ra” blog provides a good overview of the data structures that Windows 7 uses to track raw input device monitors [17]. This includes a high-level view of determining which processes called `RegisterRawInputDevices` and most of the data structures involved. We used this blog post as a starting point for our research, but given that it only targeted Windows 7 and many of the functions and implementation details were modified in Windows 10, there was still a substantial amount of work to do. We also aimed to determine not only which processes were monitoring input devices but also the addresses of the input handlers. Finally, this blog post uses WinDBG to parse the types of the GUI subsystem, as Microsoft released full type information for several versions of Windows 7. Unfortunately, this was stopped, and later versions of Windows 7 and all versions of Windows 10 must be reverse-engineered to discover type and algorithm changes inside the GUI subsystem. This meant we needed to perform a significant reverse-engineering effort to understand the modern versions of the handling code.

The use of `RegisterRawInputDevices` leads to a `tagPROCESS_HID_TABLE` instance being tracked from the process' `tagPROCESSINFO` structure. This HID table structure then tracks the monitors associated with each process in `tagPROCESS_HID_REQUEST` structures, which contain the `usUsagePage` and `usUsage` values described previously, as well as a handle to the window that the hook is associated with. Inside each window, which is tracked by a `tagWND` structure, there is a member named `lpfnWndProc` that holds the address of the window callback procedure, if any. This per-monitor request data is what we used to build our new Volatility plugin, capable of uncovering `RegisterRawInputDevices` abuse.

#### 4.3 Adding Volatility Support
Before our research, Volatility had no plugin to report instances of `RegisterRawInputDevices` usage. We addressed this issue by developing a new `rawinputdevicemonitors` plugin. Our previous work to make `messagehooks` function properly across Windows 10 versions gave us a head start in this effort. Specifically, `messagehooks` already enumerates `tagPROCESSINFO` instances, which is what we need to start our analysis of input device monitors.

For each `tagPROCESSINFO` found, we check if its HID table pointer is set. If so, that means the process has registered at least one monitor. We then proceed from the `tagPROCESS_HID_TABLE` to the list of valid `tagPROCESS_HID_REQUEST` structures. This allows us to determine which requests are monitoring devices of interest (keyboard and mouse) and to report the process ID and name, window name, and window procedure callback address. Figure 12 shows the output block of our new plugin when run against a memory sample with our PoC input device monitor active.

**Figure 12: rawinputdevicemonitors Recovering our PoC**

As shown, the monitoring application (GUITesterAll) is reported along with the name and address of the window procedure. The `usUsage` value is reported as 6, which corresponds to keyboard monitoring. With this information available, an investigator can immediately begin static analysis of the malicious application to determine which actions it takes upon each keystroke.

### 5 Linux Analysis - strace and ptrace

After completing our research on Windows, we turned our attention to Linux. Linux has three main methods for userland keylogging: 1) `strace` (debugging APIs), 2) Input Events, and 3) `TIOCSTI`. We will now cover these in order.

#### 5.1 Background
`strace` is a built-in Linux utility that leverages the Linux debug API (`ptrace`) to record system calls made by applications. `strace` is extremely popular with system administrators and malware analysts, as it not only records the names of system calls made but also the parameters, such as file names, network addresses, and process IDs. The power afforded by `strace` and the `ptrace` system call it relies on has resulted in widespread abuse by malware and attackers to spy on victim processes. Many resources show how trivial it is to spy on victim users with `strace`, including the theft of SSH credentials and recording of commands (e.g., [18]).

The abuse of these debugging facilities sometimes leads systems administrators to lock down `ptrace`, even for root users [19, 20]. However, these settings are not enabled by default on common distributions and are not universally applied to production servers. Given the threat posed by these interfaces, we investigated the debugging API internals with the goal of detecting processes being debugged.

#### 5.2 Internals
Each Linux process is tracked by a `task_struct` structure, which serves the same purpose as `EPROCESS` on Windows. Inside each `task_struct` is a member named `ptraced` that holds a linked list of all processes that the examined process is tracing. This allows us to directly enumerate all processes being traced.

`ptrace` supports various options, such as `PTRACE_O_TRACEFORK` and `PTRACE_O_TRACECLONE`, which allow tracing programs to automatically trace (debug) child processes spawned by the original. `strace` supports this capability by following child processes if the `-f` option is specified in the command-line invocation. To determine all instances of programs being debugged and to discover the process debugging them, we must compare the `parent` member of `task_struct` to the `real_parent` member. These will not be the same when a process is being debugged by a process other than its direct parent, such as a debugger, and we can use this discrepancy to determine the real tracing process, even if it is several parents up the chain.

#### 5.3 Volatility Support
Before our research, Volatility had no existing plugin to report processes that were being debugged. To remedy this, we developed the `linux_process_ptrace` plugin, which reports on all processes being debugged, the process IDs of tracing processes, and the tracing state of each process. We have two sets of figures that demonstrate this plugin.

##### 5.3.1 Detecting gdb Usage
The first, Figure 13, shows us loading the `cat` executable into `gdb` followed by executing it inside the debugger.

**Figure 13: Debugging the cat command with gdb**

We then ran the `ps` command to determine the process IDs of the created `cat` process (780) and the PID of the controlling `gdb` process (778). Figure 14 shows the output of `linux_process_ptrace` when run against the memory sample with these processes active.

**Figure 14: Our new plugin detecting cat being debugged**

As shown, Volatility correctly reports that `gdb` is tracing PID 780 and that `cat` has the `PTRACED` flag set. The `Traced by` column of `cat` is empty since it is being directly traced by its parent `gdb` process, so its `parent` and `real_parent` members have the same value.

##### 5.3.2 Detecting SSH Daemon Monitoring
Our second demonstration of `linux_process_ptrace` focuses on the detection of an `strace` instance being used to keylog SSH sessions. Figure 15 shows our invocation of `strace` to attach to the running SSH daemon and to follow all future child processes.

**Figure 15: Monitoring SSHD with strace**

After attaching `strace` to the SSH daemon, we then logged into the system through SSH from a remote computer. After successfully logging in, we ran the `netstat` command and observed the output. Figure 16 shows select portions of this output as generated by our `strace` invocation.

**Figure 16: strace output During SSH login and Session**

In the first block of output, the string `secretpassword!` can be observed, which is the password of the user account that was logged in remotely. This theft of plaintext passwords is one of the main reasons that the SSH daemon is a common target of malware, and it also highlights why the use of SSH keys can provide a significant security boost. The second block of output shows our `netstat` command being read one character at a time, leading to the third and final blocks of output showing `netstat` being executed and then network connection information being read from files under `/proc/net/`.

**Figure 17: Volatility detecting the SSH Daemon Monitoring**

As shown, our `strace` process has a PID of 1127, and four processes (three `sshd` instances and one `bash` instance) report PID 1127 as their `Traced by` value. Furthermore, they all have the `SEIZED` flag set. `SEIZED` indicates that `strace` either attached to an already running process or was attached to a child automatically as a result of tracing the parent. As we know, we manually attached `strace` to the running `sshd` instance with PID 436, and our supplied `-f` option to `strace` told it to follow all future child processes. This information, combined with the `Tracing` column of `strace` matching the four PIDs of the other processes, confirms that `strace` is truly the process responsible for tracing the others.

As demonstrated in this section, our new `linux_process_ptrace` plugin can successfully detect all debugged processes in a memory sample, which can lead to automated detection of a wide variety of malware and attacker abuses.

### 6 Linux Analysis - Input Events

The next Linux keylogging method we examined was the abuse of input events [21].

#### 6.1 Background
The `/dev/input` directory of Linux systems is powered by the input subsystem, which exposes a wide range of local devices in a uniform manner. By reading from a specific device’s `/dev/input` file, applications can receive event data as it is generated. In the case of keyboard devices, this data includes each keystroke typed on the physical keyboard. Figure 18 shows how devices are exported on a live system.

**Figure 18: Viewing Input Devices**

In this output, it can be seen that the physical keyboard is mapped to the `event1` file, while `event2` and `mouse0` correspond to the physical mouse. Given the power of the input subsystem, malware frequently abuses this interface to perform keylogging. This is accomplished by opening a file handle to the device of interest and then calling the `read` system call in a loop to obtain event data as it is generated.

#### 6.2 Internals
The input subsystem matches devices to input handlers that pass generated events back to the userspace components waiting for them to populate. Documentation maintained by the Linux kernel developers discusses the internals of the kernel portion and userland API of this interface [22]. We show that it is possible to automatically detect malware abusing this interface solely from its file handle activity, so a deep understanding of the kernel internals is not relevant to our Volatility plugin in this instance.

#### 6.3 Volatility Support
We created the `linux_input_events` plugin to detect processes that are monitoring input events. This plugin operates by enumerating the open file descriptors (handles) of each process and reporting any that reference a path under the `/dev/input/` directory. Figure 19 shows the output of our test sample with the `logkeys` keylogger running [23]. This keylogger uses input device monitoring to record keystrokes typed on a physical keyboard attached to a system.

**Figure 19: Detecting Device Input Monitoring Processes**

As shown, three entries are reported by the plugin. The first two belong to the `systemd-logind` process, which is a legitimate component of `systemd`. The process of the third entry, `logkeys`, is not part of `systemd` and immediately informs the investigator that the process is suspicious and requires further investigation.

### 7 Linux Analysis - TIOCSTI
The last keylogging approach we researched for Linux is the abuse of the `TIOCSTI` ioctl [24].