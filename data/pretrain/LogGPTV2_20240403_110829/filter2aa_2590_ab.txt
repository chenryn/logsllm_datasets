just demonstrated, our addition of analysis of the per-thread TIF FLAGS has
transformed an error-prone, manual process into a more automated solution.
3.5
Thread-Specific Hooks
The last type of hook covered in this section are thread-specific hooks. These
are created when the dwThreadId is set to a specific thread ID instead of NULL
to target all threads. To create one of these, we added the code shown in Figure
5 to our POC application.
Figure 5: SetWindowsHookEx with a Thread-Specific Hook
In the code it can be seen that the mouse monitoring hook is registered
against a particular process, which in our POC is a notepad.exe process spawned
previously by the POC. The module parameter is a handle to the DLL imple-
menting mouse hook procedure. Since this hook is process specific, Windows will
9
load the referenced DLL into the victim process.
3.5.1
Volatility Support
Our testing showed that the existing Volatility messagehooks plugin had no
support for thread-specific hooks, so we needed to research why these were missed.
Analysis of the kernel functions that activate hooks showed that thread-specific
hooks were placed in a aphkStart array inside the tagTHREADINFO structure,
and not in the one referenced from the tagDESKTOPINFO structure. Based on
this discovery, we updated the messagehooks plugin to enumerate both aphkStart
arrays and then our previous keyboard hook was enumerated along with the
addition of our thread-specific mouse hook. Figure 6 shows the output of our
updated messagehooks plugin against a memory sample with our mouse hook
active. As can be seen, the plugin is now capable of recovering thread-specific
hooks.
Figure 6: messagehooks Recovering our Thread-Specific Hook
We then proceeded to test this new support across Windows versions and
noticed that the DLL path was not recovered for a single memory sample. We
then manually ran Volatility’s atomscan plugin across the memory samples, which
scans Windows atom tables and outputs the individual atoms. We determined
that the DLL path for the hooking DLL was not present in the atom table for
any of the samples. This indicated that something might be wrong with the
plugin, as we expected the ihmod value of tagHOOK to reference a global atom
containing the path of the hooking DLL as it does for the global hooks described
previously.
This led us to re-examine the internal implementation of SetWindowsHookEx,
and we determined that thread-specific hooks do not populate the global atom
table at all. Instead, the ihmod value of thread-specific hooks reference an index
into the ahmodLibLoaded array stored inside the tagPROCESSINFO structure
referenced from the hooked thread. This array holds the base addresses of DLLs
associated with the process. With this information, we were able to update
10
messagehooks to conditionally retrieve the DLL path based on whether the hook
being global or local. With this change, Volatility can now retrieve the DLL
path, if present, for all hook types and variations. Figure 7 shows the output of
our fully updated plugin that is aware of both DLL path sources.
Figure 7: Properly Recovering the DLL Path
As illustrated, the full path is retrieved for the DLL hosting the mouse hook
as opposed to simply printing out an ihmod value. By extracting the DLL to
disk, the investigator can then begin analysis of the hook procedure beginning
at offset 0x10f0 of the DLL.
With all of the updates described in this section, the messagehooks plugin of
Volatility is now able to successfully recover complete information of all message
hook variations through the latest version of Windows 10.
4
Windows Analysis - RegisterRawInputDevices
4.1
Background
Abuse of the RegisterRawInputDevices API is the second popular method that
Windows userland malware employs to monitor device activity. Many samples
used in high profile attacks and by APT groups have abused this feature, including
PlugX variants, the Dexter Point-of-Sale malware, HawkEye, FIN7, and APT27
[10, 11, 12, 13, 14, 15]. An article on Code Project by Mike Mee provides a very
accessible read on how these hooks are registered by a programmer [16]. We
strongly suggest reading this article before proceeding if you are new to this
type of keylogger.
The normal method for abusing this API is to first register an invisible
window that will be used to attach the malware’s callback function. This is
performed by registering a custom class through the use of the RegisterClass
API. Once registered, the class can then be used to create the hidden window.
Figure 8 shows how this is performed in our POC application.
11
Figure 8: RegisterRawInputDevices Prototype
As shown, we define a callback function named WndProc that receives GUI
messages and we named our custom class Vol GUI-kl. Next, we write information
to the output file for future verification and then we create our hidden window.
The first parameter to CreateWindow must be the name a registered class,
which we set to our previously registered instance. We then give our window a
pre-defined name so that we can verify it during future plugins runs.
To receive all input events, the callback function must properly handle
WM CREATE and WM INPUT messages. WM CREATE is sent upon cre-
ation of a window of the given class, and this is when a keylogger must use
RegisterRawInputDevices to receive future WM INPUT messages that contain
each keystroke. Figure 9 shows the prototype for RegisterRawInputDevices and
Figure 10 displays the input structure (tagRAWINPUTDEVICE).
Figure 9: RegisterRawInputDevices Prototype
12
Figure 10: tagRAWINPUTDEVICE Definition
The first parameter, pRawInputDevices, specifies one or more tagRAWIN-
PUTDEVICE structures that describe the devices to be monitored. The second
parameter specifies how many devices are described and the last parameter
specifies how large each input structure is.
To properly monitor the keyboard or other desired device, the usUsagePage
and usUsage of the tagRAWINPUTDEVICE structure must be set correctly.
For malware that targets common devices (keyboard, mouse), the usUsagePage
must be set to HID USAGE PAGE GENERIC, which has a constant value of 1.
Figure 11 shows the possible options for the usUsage member.
Figure 11: messagehooks Recovering our Thread-Specific Hook
For malware that wants to perform keylogging, it will set this value to
HID USAGE GENERIC KEYBOARD, which has a constant value of 6.
Once registered, the window callback procedure will then receive WM INPUT
messages after each keystroke, and the GetRawInputData API can be used to
13
translate these messages to the keys typed on the monitored keyboard.
4.2
Internals
A blog post on the “Eye of Ra” blog provides a good overview of the data struc-
tures that Windows 7 uses to track raw input device monitors [17]. This includes
a high level view of determining which processes called RegisterRawInputDevices
and most of the data structures involved. We used this blog post as a starting
point for our research, but given that it only targeted Windows 7 and many of
the functions and implementation details were modified in Windows 10, there
was still a substantial amount of work to do. We also aimed to determine not
only which process(es) were monitoring input devices, but also the addresses
of the input handlers. Finally, this blog post is able to use WinDBG to parse
the types of the GUI subsystem as Microsoft released full type information for
several versions of Windows 7. Unfortunately, this was stopped and later versions
of Windows 7 and all versions of Windows 10 must be reverse engineered to
discover type and algorithm changes inside the GUI subsystem. This meant
we needed to perform a significant reverse engineering effort to understand the
modern versions of the handling code.
The use of RegisterRawInputDevices leads to a tagPROCESS HID TABLE
instance being tracked from the process’ tagPROCESSINFO structure. This
hid table structure then tracks the monitors associated with each process in
tagPROCESS HID REQUEST structures that contain the usUsagePage and
usUsage values described previously as well a handle to the window that the
hook is associated with. Inside of each window, which is tracked by a tag-
WND structure, there is a member named lpfnWndProc that holds the address
of the window callback procedure, if any. This per-monitor request data is
what we used to build our new Volatility plugin that is capable of uncovering
RegisterRawInputDevices abuse.
4.3
Adding Volatility Support
Before our research effort, Volatility had no plugin to report instances of Regis-
terRawInputDevices usage. We addressed this issue through the development of
a new rawinputdevicemonitors plugin. Our previous work to make messagehooks
function properly across Windows 10 versions meant that we had a head start in
this effort. In particular, messagehooks already enumerates tagPROCESSINFO
instances, which is what we need to start our analysis of input device monitors.
For each tagPROCESSINFO found, we check if its HID table pointer is
set. If so, that means the process has registered at least one monitor. We
then proceed from the tagPROCESS HID TABLE to the list of valid tagPRO-
CESS HID REQUEST structures. This allows us to determine which requests
are monitoring devices of interest (keyboard and mouse) and to report the
process ID and name, window name, and window procedure callback address.
Figure 12 shows the output block out our new plugin when run against a
memory sample with our POC input device monitor active.
14
Figure 12: rawinputdevicemonitors Recovering our POC
As shown, the monitoring application (GUITesterAll) is reported along with
the name and address of the window procedure. The usUsage value is reported
as 6, which corresponds to keyboarding monitoring. With this information
available, an investigator can immediately begin static analysis of the malicious
application to determine which action(s) it takes upon each keystroke.
5
Linux Analysis - strace and ptrace
After finishing our research on Windows, we turned our attention to Linux.
Linux has three main methods for userland keylogging: 1) strace (debugging
APIs) 2) Input Events 3) TIOCSTI. We will now cover these in order.
5.1
Background
strace is a built-in Linux utility that leverages the Linux debug API (ptrace)
to record system calls made by applications. strace is extremely popular with
system administrators and malware analysts as it not only records the names of
system calls made but also the parameters, such as file names, network addresses,
and process IDs. The power afforded by strace and the ptrace system call that
it relies on has resulted in widespread abuse by malware and attackers to spy on
victim processes. Many resources show how it trivial it is to spy on victim users
with strace, including the theft of SSH credentials and recording of commands
(e.g., [18]).
The abuse of these debugging facilities sometimes leads systems administra-
tors to lock down ptrace, even for root users [19, 20]. As with most security
controls, however, these settings are not enabled by default on common distribu-
tions and are not universally applied to production servers. Given the threat
posed by these interfaces, we investigated the debugging API internals with a
goal of detecting processes being debugged.
5.2
Internals
Each Linux process is tracked by a task struct structure that serves the same
purpose as EPROCESS on Windows. Inside each task struct is a member
15
named ptraced that holds a linked list of all processes that the examined process
is tracing. This allows us to directly enumerate all processes being traced.
ptrace supports a variety of options, such as PTRACE O TRACEFORK and
PTRACE O TRACECLONE, that allow tracing programs to automatically trace
(debug) child processes spawned by the original. strace supports this capability
by following children processes if the -f option is specified in the command
line invocation. To determine all instances of programs being debugged and
to discover the process debugging them, we must compare the parent member
of task struct to the real parent member. These will not be the same when a
process is being debugged by a process other than its direct parent, such as a
debugger, and we can use this discrepancy to determine the real tracing process
even if it is several parents up the chain.
5.3
Volatility Support
Before our research, Volatility had no existing plugin to report processes that
were being debugged. To remedy this, we developed the linux process ptrace
plugin, which reports on all processes being debugged, the process IDs of tracing
processes, and the tracing state of each process. We have two sets of figures that
demonstrate this plugin.
5.3.1
Detecting gdb Usage
The first, Figure 13, shows us loading the cat executable into gdb followed by
executing it inside the debugger.
Figure 13: Debugging the cat command with gdb
We then ran the ps command to determine the process IDs of the created cat
process (780) as well as the PID of the controlling gdb process (778). Figure 14
shows the output of linux process ptrace when run against the memory sample
with these processes active.
16
Figure 14: Our new plugin detecting cat being debugged
As shown, Volatility correctly reports that gdb is tracing PID 780 and that
cat has the PTRACED flag set. The Traced by column of cat is empty since it
is being directly traced by its parent gdb process, so its parent and real parent
members have the same value.
5.3.2
Detecting SSH Daemon Monitoring
Our second demonstration of linux process ptrace focuses on detection of an
strace instance being used to keylog SSH sessions. Figure 15 shows our invocation
of strace to attach to the running SSH daemon and to follow all future children
processes.
Figure 15: Monitoring SSHD with strace
After attaching strace to the SSH daemon, we then logged into the system
through SSH from a remote computer. After successfully logging in, we then ran
the netstat command and observed the output. Figure 16 shows select portions
of this output as generated by our strace invocation.
17
Figure 16: strace output During SSH login and Session
In the first block of output, the string secretpassword!
can be observed,
which is the password of the user account that was logged in with remotely.
This theft of plaintext passwords is one of the main reasons that SSHD is a
common target of malware, and it also highlights why the use of SSH keys
can provide a significant security boost. The second block of output shows our
netstat command being read one character at a time, leading to the 3rd and final
blocks of output showing netstat being executed and then network connection
information being read from files under /proc/net/.
Figure 17 shows the output of linux process ptrace against the memory sample
taken after our SSH activity.
Figure 17: Volatility detecting the SSH Daemon Monitoring
To start, it can be seen that our strace process has a PID of 1127, and that
four processes (3 sshd instances, plus one bash instance) report PID 1127 as
their Traced by value. Furthermore, they all have the SEIZED flag set. SEIZED
indicates that strace either attached to an already running process or was
attached to a child automatically as a result of tracing the parent. As we know,
18
we manually attached strace to the running sshd instance with PID 436 and then
our supplied -f option to strace told it to follow all future children processes.
This information combined with the Tracing column of strace matching the
four PIDs of the other processes confirms to us that strace is truly the process
responsible for tracing the others.
As demonstrated in this section, our new linux process ptrace plugin can
successfully detect all debugged processes in a memory sample, which can lead
to automated detection of a wide variety of malware and attacker abuses.
6
Linux Analysis - Input Events
The next Linux keylogging method that we examined was the abuse of input
events [21].
6.1
Background
The /dev/input directory of Linux systems is powered by the input subsystem
that exposes a wide range of local devices in a uniform manner. By reading from
a specific device’s /dev/input file, applications can receive event data as it is
generated. In the case of keyboard devices, this data includes each keystroke
typed on the physical keyboard. Figure 18 shows hows devices are exported on
a live system.
Figure 18: Viewing Input Devices
In this output, in it can be seen that the physical keyboard is mapped to the
event1 file while event2 and mouse0 correspond to the physical mouse. Given
the power of the input subsystem, malware frequently abuses this interface to
perform keylogging. This is accomplished by opening a file handle to the device
of interest, and then calling the read system call in a loop to obtain event data
as it is generated.
6.2
Internals
The input subsystem matches devices to input handlers that pass generated events
back to the userspace components waiting for them to populate. Documentation
maintained by the Linux kernel developers discuss the internals of the kernel
portion and userland API of this interface [22]. Next, we show that it is possible
19
to automatically detect malware abusing this interface solely from its file handle
activity, so a deep understanding of the kernel internals is not relevant to our
Volatility plugin in this instance.
6.3
Volatility Support
We created the linux input events plugin to detect processes that are monitoring
input events. This plugin operates by enumerating the open file descriptors
(handles) of each process and reporting any that reference a path under the
/dev/input/ directory. Figure 19 shows the output of our test sample with the
logkeys keylogger running [23]. This keylogger uses input device monitoring to
record keystrokes typed on a physical keyboard attached to a system.
Figure 19: Detecting Device Input Monitoring Processes
As shown, three entries are reported by the plugin. The first two belong to the
system-logind process, which is a legitimate component of systemd. The process
of the third entry, logkeys, is not part of systemd and immediately informs the
investigator that the process is suspicious and requires further investigation.
7
Linux Analysis - TIOCSTI
The last keylogging approach that was researched for Linux is the abuse of the
TIOCSTI ioctl [24].