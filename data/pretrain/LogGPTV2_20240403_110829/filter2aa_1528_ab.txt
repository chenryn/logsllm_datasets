]>
&ha128;
– 
In the above example, the CPU is monopolized while the entities are being expanded, and each 
entity takes up X amount of memory - eventually consuming all available resources and 
effectively preventing legitimate traffic from being processed. 
XML/SOA Threat Model
XML Structure Manipulation
•The Schema Poisoning attack is one of the earliest reported forms of 
XML threat. 
•
XML Schemas provide formatting and processing instructions for 
parsers when interpreting XML documents. 
•
Schemas are used for all of the major XML standard grammars 
coming out of OASIS.
•
A schema file is what an XML parser uses to understand the XML’s 
grammar and structure, and contains essential preprocessor 
instructions. 
•Because these schemas describe necessary pre-processing 
instructions, they are very susceptible to poisoning. 
XML/SOA Threat Model
Infrastructure Attacks
•
Targeting the infrastructure that supports SOA and web services to 
disrupt or compromise the services and
– Infrastructure misuse.
•
An example of infrastructure target is to DoS the application server 
hosting the services thus causing DoS to the service as well. 
•
A more complex example is DNS Poisoning of the CA server used by the 
SOA infrastructure to validate signatures.
Payload/Content Threat 
Examples
SOAP: SQL Injection Example
’or 1=1 or uid=‘
1234
Source: Steve Orrin
XSS in XML Example
%22%3e%3c%73%63%72%69%70%74%3e
>%22%3e%3c%73%63%72%69%70%74%3e
alert(document.cookie)%3c%2f%73%63%72%69%70%74%3e
alert(document.cookie)%3c%2f%73%63%72%69%70%74%3e
Source: Steve Orrin
XML Misuse and Abuse 
Threat Examples
XQuery Injection
•XQuery is a SQL like language.
– 
It is also flexible enough to query a broad spectrum of XML information sources, 
including both databases and documents. 
•XQuery Injection is an XML variant of the classic SQL injection attack. 
– 
Uses improperly validated data that is passed to XQuery commands to traverse and 
execute commands that the XQuery routines have access to. 
– 
Can be used to enumerate elements on the victim's environment, inject commands to 
the local host, or execute queries to remote files and data sources. 
– 
An attacker can pass XQuery expressions embedded in otherwise standard XML 
documents or an attacker may inject XQuery content as part of a SOAP message 
causing a SOAP destination service to manipulate an XML document incorrectly. 
•
The string below is an example of an attacker accessing the users.xml to 
request the service provider send all user names back.
doc(users.xml)//user[name='*']
•
The are many forms of attack that are possible through XQuery and are very 
difficult to predict, if the data is not validated prior to executing the XQL.
Source: Steve Orrin
XPath Injection
•XPath is a language used to refer to parts of an XML document. 
•
It can be used directly by an application to query an XML document, or as part of 
a larger operation such as applying an XSLT transformation to an XML document, 
or applying an XQuery to an XML document.
•Why XPath Injection?
•
Traditional Query Injection:
– 
' or 1=1 or ''= ' 
•
XPath injection: 
– 
abc' or name(//users/LoginID[1]) = 'LoginID' or 'a'='b 
•
XPath Blindfolded Injection
– 
Attacker extracts information per a single query injection. 
•
The novelty is:
– 
No prior knowledge of XPath query format required (unlike “traditional” SQL Injection 
attacks).
– 
Whole XML document eventually extracted, regardless of XPath query format used by 
application
•
http://www.packetstormsecurity.org/papers/bypass/Blind_XPath_Injection_20040518.pdf
Source: Amit Klein
http://www.webappsec.org/whitepapers.shtml
Structural Manipulation 
Threat Examples
The Schema Poisoning attack 
Here is an example of a XML Schema for a order shipping application:
…
An attacker may attempt to compromise the schema in its stored location and replace it with a 
similar but modified one. 
An attacker may damage the XML schema or replace it with a modified one which would then 
allow the parser to process malicious SOAP messages and specially crafted XML files to inject OS 
commands on the server or database.
The Schema Poisoning attack
Here is the schema after a simple poisoning 
…
In this example of Schema Poisoning, by removing the various Schema conditions and 
strictures the attacker is free to send a malicious XML message that may include content 
types that the application is not expecting and may be unable to properly process.
Schema Poisoning may also be used to implement Man in the Middle and Routing detour 
attacks by inserting extra hops in the XML application workflow.
Source: Steve Orrin & W3C XML Schema
www.w3.org/XML/Schema
Type: Data Theft/System Compromise
Target: XML Parsers
The attack on an Application Server
1. Find a web service which echoes 
back user data such as the parameter "in"
2. Use the following SOAP request 
3. And you'll get
C:\WinNT\Win.ini in the response (!!!)
How it works:
A. The App Server expands the entity “foo” into full text, gotten 
from the entity definition URL - the actual attack takes place 
at this phase (by the Application Server itself)
B. The App Server feeds input to the web service
C. The web service echoes back the data
...
]>
...
&foo;
XML Entity Expansion/Referral Attack
Source: Amit Klein
Quadratic Blowup DoS attack 
Type: Denial of Service
Target: XML Parsers
Attacker defines a single huge entity (say, 100KB), and references it many times 
(say, 30000 times), inside an element that is used by the application (e.g. inside a 
SOAP string parameter). 
]>
&x;&x;….[30000 of them] … &x;&x;
Source: Amit Klein
DoS attack using SOAP arrays
Type: Denial of Service
Target: SOAP Interpreter
A web-service that expects an array can be the target of a DoS attack by forcing 
the SOAP server to build a huge array in the machine’s RAM, thus inflicting a DoS 
condition on the machine due to memory pre-allocation.
 Data1
 Data2
 Data3
Source: Amit Klein
Array href Expansion 
Type: Denial of Service
Target: SOAP Interpreter
This attack sends an array built using a quadratic expansion of elements. This allows the array to be built and 
sent relatively cheaply on the attacking side, but the amount of information on the server will be enormous.
7
7
... and so on
... and so on
Source CADS & Steve Orrin
http://www.c4ads.org
Unclosed Tags (Jumbo Payload) 
Type: Denial of Service
Target: XML Parsers
This attack sends a SOAP packet to a web service. The actual SOAP packet sent to the web 
service contains unclosed tags with the “mustUnderstand” attribute set to 1.
... and so on
Source CADS & Steve Orrin
http://www.c4ads.org
Name Size (Jumbo Payload) 
Type: Denial of Service
Target: XML Parsers
This attack sends a SOAP packet that contains an extremely long element name to the web 
service.
Source CADS & Steve Orrin
http://www.c4ads.org
Attribute Name Size (Jumbo Payload)
Type: Denial of Service
Target: XML Parser, XML Interpreter
Similar to the other jumbo payload attacks. This attack uses large attribute names to attempt 
to overwhelm the target. Many parsers have set buffer sizes, in which case this can overflow 
the given buffer.
10
Source CADS & Steve Orrin
http://www.c4ads.org
Reading Blocking Pipes using External Entities
Type: Denial of Service
Target: XML Parsers
This attack abuses external entities by using them to read blocking pipes such as /de-v/stderr 
on Linux systems. This causes the processing thread to block forever (or until the application 
server is restarted). Repetitive use of this attack could cause a DoS once all threads are used 
up.
&test0
…
Source CADS & Steve Orrin
http://www.c4ads.org
Repetitive Loading of Onsite Services Using Entities
Type: Denial of Service
Target: XML Parsers
This attack abuses external entities to repetitively load expensive onsite 
services to effect a denial of service. This is extremely effective as it has 
the result of the server doing the majority of the work while the attacker 
just tells it which pages to load.
&test0;&test1;&test2;&test3;
…
Source CADS & Steve Orrin
http://www.c4ads.org
Other Threats
Threat
Description
WSDL 
Scanning
Web Services Description Language (WSDL) is an advertising mechanism for web services to dynamically describe 
the parameters used when connecting with specific methods. These files are often built automatically using 
utilities. These utilities, however, are designed to expose and describe all of the information available in a 
method. In addition, the information provided in a WSDL file may allow an attacker to guess at other methods. 
Coercive 
Parsing
Exploits the legacy bolt-on - XML-enabled components in the existing infrastructure that are operational. Even 
without a specific Web Services application these systems are still susceptible to XML based attacks whose main 
objective is either to overwhelm the processing capabilities of the system or install malicious mobile code.
Content & 
Parameter 
Tampering
Since instructions on how to use parameters are explicitly described within a WSDL document, malicious users 
can play around with different parameter options in order to retrieve unauthorized information. For example by 
submitting special characters or unexpected content to the Web service can cause a denial of service condition or 
illegal access to database records.
XML Virus & 