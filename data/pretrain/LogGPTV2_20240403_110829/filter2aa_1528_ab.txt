### XML/SOA Threat Model

#### Resource Exhaustion
- **CPU Monopolization and Memory Consumption**: In the provided example, the CPU is monopolized during the expansion of entities. Each entity consumes a specific amount of memory, eventually depleting all available resources. This effectively prevents legitimate traffic from being processed.

#### XML Structure Manipulation
- **Schema Poisoning Attack**: One of the earliest reported forms of XML threats, schema poisoning targets the XML Schemas that provide formatting and processing instructions for parsers.
  - **Schemas and Their Role**: 
    - Schemas are essential for major XML standard grammars, such as those from OASIS.
    - They contain preprocessor instructions that help parsers understand the XML's grammar and structure.
  - **Vulnerability to Poisoning**:
    - Because schemas describe necessary pre-processing instructions, they are highly susceptible to poisoning attacks.

#### Infrastructure Attacks
- **Targeting SOA and Web Services Infrastructure**:
  - **Disruption and Compromise**: These attacks aim to disrupt or compromise the services by targeting the supporting infrastructure.
  - **Examples**:
    - **DoS on Application Server**: An attacker can cause a Denial of Service (DoS) by targeting the application server hosting the services.
    - **DNS Poisoning**: A more complex attack involves DNS poisoning of the Certificate Authority (CA) server used by the SOA infrastructure to validate signatures.

#### Payload/Content Threat Examples
- **SOAP: SQL Injection Example**:
  - **Example**: `’or 1=1 or uid=‘1234`
  - **Source**: Steve Orrin

- **XSS in XML Example**:
  - **Example**: `%22%3e%3c%73%63%72%69%70%74%3e>%22%3e%3c%73%63%72%69%70%74%3ealert(document.cookie)%3c%2f%73%63%72%69%70%74%3e`
  - **Source**: Steve Orrin

#### XML Misuse and Abuse Threat Examples
- **XQuery Injection**:
  - **Description**: XQuery is a SQL-like language used to query a broad spectrum of XML information sources.
  - **Attack Mechanism**:
    - **Improperly Validated Data**: Passed to XQuery commands, this data can be used to traverse and execute commands with access to the XQuery routines.
    - **Potential Actions**:
      - Enumerate elements on the victim's environment.
      - Inject commands to the local host.
      - Execute queries to remote files and data sources.
  - **Example**:
    - `doc(users.xml)//user[name='*']`: An attacker accesses the `users.xml` to request the service provider to send all user names back.
  - **Source**: Steve Orrin

- **XPath Injection**:
  - **Description**: XPath is a language used to refer to parts of an XML document.
  - **Why XPath Injection?**:
    - **Traditional Query Injection**: `' or 1=1 or ''= '`
    - **XPath Injection**: `abc' or name(//users/LoginID[1]) = 'LoginID' or 'a'='b`
    - **XPath Blindfolded Injection**: The attacker extracts information per a single query injection without prior knowledge of the XPath query format.
  - **Novelty**:
    - No prior knowledge of the XPath query format is required.
    - The whole XML document can be extracted, regardless of the XPath query format used by the application.
  - **Source**: Amit Klein, [Blind XPath Injection](http://www.packetstormsecurity.org/papers/bypass/Blind_XPath_Injection_20040518.pdf)

#### Structural Manipulation Threat Examples
- **Schema Poisoning Attack**:
  - **Example**: An XML Schema for an order shipping application.
  - **Attack Mechanism**:
    - **Compromising the Schema**: An attacker may modify the stored schema, allowing the parser to process malicious SOAP messages and specially crafted XML files.
    - **Impact**: This can lead to the injection of OS commands on the server or database.
  - **Source**: Steve Orrin & W3C XML Schema, [W3C XML Schema](http://www.w3.org/XML/Schema)

- **Application Server Attack**:
  - **Steps**:
    1. Find a web service that echoes back user data, such as the parameter "in".
    2. Use a specific SOAP request.
    3. Receive a response containing `C:\WinNT\Win.ini`.
  - **How it Works**:
    - **Entity Expansion**: The App Server expands the entity “foo” into full text from the entity definition URL.
    - **Data Echo**: The App Server feeds input to the web service, which then echoes back the data.
  - **Source**: Amit Klein

#### Denial of Service (DoS) Attacks
- **XML Entity Expansion/Referral Attack**:
  - **Description**: An attacker defines a single large entity (e.g., 100KB) and references it many times (e.g., 30,000 times) within an element used by the application.
  - **Example**: `&x;&x;….[30000 of them] … &x;&x;`
  - **Source**: Amit Klein

- **DoS Using SOAP Arrays**:
  - **Description**: A web service expecting an array can be targeted by forcing the SOAP server to build a huge array in RAM, causing a DoS condition.
  - **Example**:
    ```xml
    <Array>
      <Data1>Data1</Data1>
      <Data2>Data2</Data2>
      <Data3>Data3</Data3>
    </Array>
    ```
  - **Source**: Amit Klein

- **Array Href Expansion**:
  - **Description**: This attack sends an array built using a quadratic expansion of elements, making it cheap to send but expensive to process.
  - **Example**:
    ```xml
    <Array href="7">
      <Array href="7">
        ... and so on
      </Array>
    </Array>
    ```
  - **Source**: CADS & Steve Orrin, [C4ADS](http://www.c4ads.org)

- **Unclosed Tags (Jumbo Payload)**:
  - **Description**: Sends a SOAP packet with unclosed tags and the `mustUnderstand` attribute set to 1.
  - **Source**: CADS & Steve Orrin, [C4ADS](http://www.c4ads.org)

- **Name Size (Jumbo Payload)**:
  - **Description**: Sends a SOAP packet with an extremely long element name.
  - **Source**: CADS & Steve Orrin, [C4ADS](http://www.c4ads.org)

- **Attribute Name Size (Jumbo Payload)**:
  - **Description**: Uses large attribute names to overwhelm the target, potentially causing buffer overflows.
  - **Source**: CADS & Steve Orrin, [C4ADS](http://www.c4ads.org)

- **Reading Blocking Pipes Using External Entities**:
  - **Description**: Abuses external entities to read blocking pipes, such as `/dev/stderr` on Linux systems, causing the processing thread to block.
  - **Source**: CADS & Steve Orrin, [C4ADS](http://www.c4ads.org)

- **Repetitive Loading of Onsite Services Using Entities**:
  - **Description**: Abuses external entities to repetitively load expensive onsite services, leading to a DoS.
  - **Example**: `&test0;&test1;&test2;&test3;`
  - **Source**: CADS & Steve Orrin, [C4ADS](http://www.c4ads.org)

#### Other Threats
- **WSDL Scanning**:
  - **Description**: WSDL (Web Services Description Language) files often expose detailed information about methods, which can be used by attackers to guess other methods.
  - **Source**: CADS & Steve Orrin, [C4ADS](http://www.c4ads.org)

- **Coercive Parsing**:
  - **Description**: Exploits legacy XML-enabled components in the existing infrastructure, even without a specific Web Services application.
  - **Objective**: Overwhelm the processing capabilities of the system or install malicious mobile code.

- **Content & Parameter Tampering**:
  - **Description**: Malicious users can manipulate parameters described in WSDL documents to retrieve unauthorized information or cause a DoS condition.
  - **Source**: CADS & Steve Orrin, [C4ADS](http://www.c4ads.org)

- **XML Virus**:
  - **Description**: Not fully detailed in the original text, but typically refers to malware embedded in XML documents.

This structured and detailed overview should help in understanding the various threats and their mechanisms in the context of XML and SOA.