900 Canneal-1
12.2GB 20.7GB 12.3GB 12.9GB 17.8GB 800
Canneal-2
700
600 Canneal-3
(a)Redismemoryconsumptionindifferentconfigurations.The 500
percentageinthelabelisautilizationthreshold. 400
300
200
Throughput 90thlat. 99thlat. 99.9thlat. 100
0 50 100 150 200 250
Linux-nohuge 19.0K 4 5 109
Linuxhugepagepromotion
Linux 21.7K 3 4 8 1000 )BM(.pmusnocegapeguH
900 Canneal-1
Ingens-90% 20.9K 3 4 64 800
Canneal-2
Ingens-70% 21.1K 3 4 55 700
600 Canneal-3
Ingens-50% 21.6K 3 4 23 500
400
300
(b)RedisGETPerformance:Throughput(operations/sec)and 200
latency(millisecond). 100 0 50 100 150 200 250
time(sec)
Table10: Redismemoryuseandperformance.
Canneal-1 Canneal-2 Canneal-3
Linux 181 192 195
latencyofthereadoperationsinthebenchmark. Ingens Ingens 186 186 187
reducesanaveragelatencyupto29.2%overLinux. In
Figure5: Hugepageconsumption(MB)andexecution
thetail,thereductionimprovesfurther,upto41.4%atthe
time(second). 3instancesofcanneal(Parsec3.0bench-
90thpercentile.
mark)runconcurrentlyandPromote-kthpromoteshuge
PerformanceforIngensimprovesbecauseitreduces
pages. Executiontimeinthetableexcludesdataloading
theaveragepage-faultlatencybynotcompactingmemory
time.
synchronously in the page fault handler. We measure
461,383pagecompactionsthroughouttheruntimeofthe
benchmarkinLinuxwhenmemoryisfragmented. thendelete70%ofthekeyspaceusingarandompattern.
When memory is not fragmented, Ingens reduces WethenmeasuretheGETperformanceusingthebench-
throughputby13.4%andincreaseslatencyupto18.1% marktoolshippedwithRedis. ForIngens,weevaluate
compared with Linux. The benchmark contains many differentutilizationthresholdsforhugepagepromotion.
short-livedrequestsandLinux’sgreedyhugepageallo- Table10showsthatmemoryuseforthe90%and70%
cationpaysoffbydrasticallyreducingthetotalnumber utilization-basedconfigurationsisveryclosetothecase
ofpagefaults. Ingensislessaggressiveabouthugepage where only base pages are used. Only at 50% utiliza-
allocationtoavoidmemorybloat,soitincursmanymore tion does Ingens approach the memory use of Linux’s
pagefaults. aggressivehugepagepromotion.
Ingenscopeswiththisperformanceproblemwithan The throughput and latency of the utilization-based
adaptivepolicy. Whenmemoryfragmentationisbelow approach is very close to using only huge pages. Only
0.5IngensmimicsLinux’saggressivehugepagealloca- inthe99.9thpercentiledoesIngensdeviatefromLinux
tion.ThispolicyrestoresIngens’sperformancetoLinux’s usinghugepagesonly,whilestilldeliveringmuchbetter
levels. However,whilebloat(§3.2)isnotaproblemfor taillatencythanLinuxusingbasepagesonly.
thisworkload,theadaptivepolicyincreasesriskofbloat
6.4 Fairhugepagepromotion
in the general case. Like any management problem, it
mightnotbepossibletofindasinglepolicythathasevery Ingens guarantees a fair distribution of huge pages. If
desirablepropertyforagivenworkload. Weverifiedthat applicationshavethesamesharepriority(§4.6),Ingens
thispolicyperformssimilarlytothedefaultpolicyused providesthesameamountofhugepages. Toevaluatefair-
inTable4,butitismostappropriateforworkloadswith ness,werunasetofthreeidenticalapplicationsconcur-
manyshort-livedprocesses. rentlywiththesamesharepriorityandidlenessparameter,
andmeasuretheamountofhugepageseachoneholdsat
6.3 Memorybloatingevalution
anypointintime.
ToevaluateIngens’sabilitytominimizememorybloating Figure5showsthatLinuxdoesnotallocatehugepages
withoutimpactingperformance,weevaluatethememory fairly,itsimplyallocateshugepagestothefirstapplica-
useandthroughputofabenchmarkusingtheRediskey- tionthatcanusethem(Canneal-1). Infact,Linuxasyn-
valuestore. Redisisknowntobesusceptibletomemory chronously promotes huge pages by scanning linearly
bloat,asitsmemoryallocationsareoftensparse.Tocreate through each application’s address space, only consid-
asparseaddressspaceinourbenchmark,wefirstpopulate ering the next application when it is finished with the
Rediswith2millionkeys,eachwith8KBobjectsand current application. Time 160 is when Linux has pro-
716 12th USENIX Symposium on Operating Systems Design and Implementation USENIX Association
7 Relatedwork
Policy Memsaving Performanceslowdown H/M
Tunkrank:274(12.7%) Tunkrank:66%
KVM 1438MB Virtualmemoryisanactiveresearcharea. Ourevidence
MovieRecmd:210 (6.5%)MovieRecmd:10%
(Linux) (9.6%) SVM:232(20.2%) SVM:72% ofperformancedegradationfromaddresstranslationover-
Tunkrank:243 Tunkrank:99% headsiswell-corroborated[44,53,47,67].
Hugepage 317MB
MovieRecmd:197MovieRecmd:99%
sharing (2.1%)
SVM:193 SVM:99% Operatingsystemsupport. Navarroetal.[68]imple-
Tunkrank:247(1.6%) Tunkrank:90% mentOSsupportformultiplepagesizeswithcontiguity-
1026MB
Ingens MovieRecmd:200(1.5%)MovieRecmd:79%
(6.8%) awarenessandfragmentationreductionasprimarycon-
SVM:198(2.5%) SVM:94%
cerns. Theyproposereservation-basedallocation,allocat-
ingcontiguousrangesofpagesinadvance,anddeferring
Table 11: Memory saving (MB) and performance (second)
promotion. Manyoftheirideasarewidelyused[80],and
trade off. H/M - huge page ratio out of total memory used.
itformsthebasisofFreeBSD’shugepagesupport. In-
ParenthesesintheMemsavingcolumnexpressesthememory
savedasapercentageofthetotalmemory(15GB)allocatedto gens’s utilization-based promotion uses a util bitvector
allthreevirtualmachines. that is similar to the population map [68]. In contrast
to that work, Ingens does not use reservation-based al-
location, decouples huge page allocation from promo-
moted almost all of Canneal-1’s address space to huge tiondecisions,andredistributescontiguityfairlywhenit
pagessoonlythendoesitbegintoallocatehugepagesto becomes available (e.g., after process termination). In-
Canneal-2. genshashigherperformancebecauseitpromotesmore
huge pages; it does not require promoted pages to be
In contrast, Ingens promotes huge pages based on
read-onlyorcompletelymodified(§3.4).Featuresinmod-
thefairnessobjectivedescribedinSection4.7andthus
ernsystemssuchasmemorycompactionandsame-page
equallydistributestheavailablehugepagestoeachappli-
merging[63]posenewchallengesnotaddressedbythis
cation. Fairdistributionofhugepagestranslatestofair
previouswork.
end-to-endexecutiontimeaswell. Allapplicationsfinish
Gormanetal.[56]proposeaplacementpolicyforan
atthesametimeinIngens,whileCanneal-1finisheswell
OS’sphysicalpageallocatorthatmitigatesfragmentation
before2and3onLinux.
andpromotescontiguitybygroupingpagesaccordingto
relocatability. Subsequentwork[57]proposesasoftware-
6.5 Tradeoffofmemorysavingandperformance
exposed interface for applications to explicitly request
Finally,weevaluatethememoryandperformancetrade- huge pages like libhugetlbfs [65]. The foci of In-
offsofidenticalpagesharing. Werunaworkloadmixof gens,includingtrade-offsbetweenmemorysharingand
three different applications, each in its own virtual ma- performance,andunfairallocationofhugepagesareun-
chine. Wemeasuretheirmemoryuseandperformance addressedbypreviouswork.
slowdown under three different OS configurations: (1)
Hardware support. TLB miss overheads can be re-
KVM with aggressive page sharing, where huge pages
duced by accelerating page table walks [42, 46] or re-
aredemotedifunderlyingbasepagescanbeshared. (2)
ducingtheirfrequency[52];byreducingthenumberof
KVMwhereonlypagesofthesametypemaybeshared
TLBmisses(e.g. throughprefetching[48,60,74],pre-
andhugepagesareneverbrokenup(hugepagesharing).
diction[69],orstructuralchangetotheTLB[79,72,71]
(3)Ingens,whereonlyinfrequentlyusedhugepagesare
orTLBhierarchy[47,66,78,39,38,61,44,53]). Multi-
demotedforpagesharing. Toavoidunusedmemorysav-
pagemappingtechniques[79,72,71]mapmultiplepages
ing, we intentionally fit guest physical memory size to
withasingleTLBentry,improvingTLBreachbyasmall
memoryusagesoftheworkloads.
factor (e.g. to 8 or 16); much greater improvements to
Table11showsthatKVM’saggressivepagesharing TLBreachareneededtodealwithmodernmemorysizes.
savesthemostmemory(9.6%),butalsocedesthemost Directsegments[44,53]extendstandardpagingwitha
performance(between6.5%and20.2%slowdown)when large segment to map the majority of an address space
comparedtohugepagesharing. Whensharingonlypages toacontiguousphysicalmemoryregion,butrequireap-
of the same type, it saves memory only 2.1%. Finally, plicationmodificationsandarelimitedtoworkloadsable
Ingens allows us to save 6.8% of memory, while only toasinglelargesegment. Redundantmemorymappings
slowing down the application up to 2.5%. The main (RMM) [61] extend TLB reach by mapping ranges of
reason for the low performance degradation is that the virtuallyandphysicallycontiguouspagesinarangeTLB.
ratioofhugepagestototalpagesremainshighinIngens, Thelevelofadditionalarchitecturalsupportissignificant,
duetoitsaccessfrequency-basedapproachtohugepage whileIngensworksoncurrenthardware.
demotionandinstantpromotionwhenIngensstopspage Anumberofrelatedworksproposehardwaresupport
sharing. to recover and expose contiguity. GLUE [73] groups
USENIX Association 12th USENIX Symposium on Operating Systems Design and Implementation 717
contiguous,alignedsmallpagetranslationsunderasingle References
speculativehugepagetranslationintheTLB.Speculative
[1] http://www.7-cpu.com/cpu/Skylake.
translations, (similar to SpecTLB [43]) can be verified
html. [AccessedApril,2016].
byoff-critical-pathpage-tablewalks,reducingeffective
page-tablewalklatency. GTSM[49]provideshardware [2] http://www.7-cpu.com/cpu/Haswell.
supporttoleveragecontiguityofphysicalmemoryextents html. [AccessedApril,2016].
evenwhenpageshavebeenretiredduetobiterrors. Were
[3] ApacheCloudstack. https://en.wikipedia.
suchfeaturestobecomeavailable,hardwaremechanisms
org/wiki/Apache_CloudStack. [Accessed
forpreservingcontiguitycouldreduceoverheadsinduced
April,2016].
byproactivecompactioninIngens.
Architecturalassistsareultimatelycomplementaryto [4] Apache Hadoop. http://hadoop.apache.
our own work. Hardware support can help, but higher- org/. [AccessedApril,2016].
levelcoordinationofhardwaremechanismsbysoftware
isafundamentalnecessity. Additionally,asnoneofthese [5] ApacheSpark. http://spark.apache.org/
assistsarelikelytoberealizedinimminentlyavailable docs/latest/index.html. [AccessedApril,
hardware,usingtechniquessuchasthoseweproposein 2016].
Ingensareadefactonecessity.
[6] Application-friendly kernel interfaces. https:
8 Conclusion //lwn.net/Articles/227818/. [March,
2007].
Hardware vendors are betting on huge pages to make
addresstranslationoverheadsacceptableasmemoryca- [7] Cloudera recommends turning off mem-
pacitiescontinuetogrow. Ingensprovidesprincipled,co- ory compaction due to high CPU utiliza-
ordinatedtransparenthugepagesupportfortheoperating tion. http://www.cloudera.com/
systemandhypervisor,enablingchallengingworkloads documentation/enterprise/latest/
toachievetheexpectedbenefitsofhugepages,without topics/cdh_admin_performance.html.
harmingworkloadsthatarewellservedbystate-oftheart [AccessedApril,2016].
hugepagesupport. Ingensreducestail-latencyandbloat,
whileimprovingfairnessandperformance. [8] Cloudsuite. http://parsa.epfl.ch/
cloudsuite/graph.html. [Accessed April,
Acknowledgement
2016].
FortheirinsightsandcommentswethankreadersMark
[9] CouchBase recommends disabling huge pages.
Silberstein,NadavAmit,RezaTaheri,KathrynS.McKin-
http://blog.couchbase.com/often-
ley, the anonymous reviewers, and our shepherd Sasha
overlooked-linux-os-tweaks. [March,
Fedorova. We acknowledge funding from NSF grants
2014].
CNS-1228843andCNS-1618563.