Snapdragon S1
Snapdragon S2
Hummingbird
Snapdragon S1
Pattern/PIN Sample Rate
∼ 25 Hz
∼ 62 Hz
∼ 50 Hz
∼ 50 Hz
5/5
6/6
1/0
0/1
Table 1: Android smartphones used in experiments, their chipsets,
number times used in either pattern or PIN experiments, and their
observed accelerometer sample rate.
handed, and less than 50% of the users owned a smartphone. All
users, however, have used a smartphone at some point. Only two
users locked their phone, and they did so using a PIN and not a
password pattern.
We used a total of four phones in our experiment, two were pro-
vided by us: Nexus One and G2. If the user owned an Android
phone, we installed the application directly on his/her phone for the
experiment. This occurred twice, and experiments were also con-
ducted on a Nexus S and Droid Incredible. All the phones in our ex-
periments indicate through the standard API that the accelerometer
can sample at 76 Hz. In practice, we observed this to almost never
be the case, and even phones with the same chipset sampled at dif-
ferent rates. This is likely due to slight differences in the Android
OS installed. Details about the phones used in the experiments can
be found in Table 1.
Experiment Overview. The experiment for both PINs and pat-
terns consisted of two rounds. In the ﬁrst, the users were asked to
sit at a table and enter in 50 PINs/patterns in random order using
their dominant hand a total of 5 times. Following, we asked users
to walk in a circle (around our lab) while entering in the same set
of 50 PINs/patterns using their dominant hand. We provided very
little oversight during the experiment: After providing instructions,
we periodically checked in on users’ status, but did not provide
further instruction.
For each user, we collected 5 samples of each PIN/pattern in
a controlled setting (i.e., sitting) and 1 sample in an uncontrolled
setting (i.e., walking). We considered the sitting data set as train-
ing data, and the walking data set as the testing data, only testing
against it once all the models were tuned using the sitting data. All
the results presented, unless otherwise noted, are an average across
multiple runs of a 5-fold cross validation using the training set,
while the user was sitting.
It is important to note that the patterns and PINs used in the
experiment are not the users’ real patterns or PINs, and that real-
world users will likely be very well practiced at entering in their
own PINs or patterns. This familiarity could affect the way (e.g.,
the way the phone moves in space) a user enters a pattern or PIN.
We do not model this in our experiments (indeed, performing such
an experiment on users’ actual secure input could be seen as un-
ethical). However, our test users, by the end of data collection,
have entered each PIN and pattern a number of times, and many
even commented about their familiarity with the patterns/PINs in
the test set upon completion.
PIN Data. PINs were selected at random. A total of 50 PINs were
used in the experiment, and all twelve users entered the same set
of PINs a total of 5 times. We only considered accelerometer data
when the user entered the PIN correctly, and users are re-prompted
until the PIN was entered correctly. In addition to recording ac-
celerometer readings, we also log the timing of the touch events to
ensure that the accelerometer data matches the timing of PIN entry.
We considered all accelerometer readings that occurred within 50
ms of entering the ﬁrst digit and 50 ms after entering the last digit.
Pattern Data. Pattern data is collected in a similar way to PIN
data – twelve users enter a set of 50 patterns a total of 5 times and
44
Figure 3: PIN and Pattern Entry Applications
touch information is logged when a user gestures across a contact
point. We initially selected a set of 50 patterns at random. However,
we quickly discovered that the vast majority of the patterns selected
were surprisingly hard to enter. The patterns were convoluted and
overly complicated, and in a initial test of the application, our test
users reported that it took many iterations (5+) to enter the pattern
correctly. As a result, we wished to use a set of reasonable and
representative password patterns that our test users could reliably
enter on their ﬁrst attempt. We developed two simple criteria to
select patterns at random that meet this requirement.
The ﬁrst criterion limits the number of cross-overs, that is, it
limits the number of swipe segments that cross (or double back)
over previous swipe segments (e.g., the pattern in Figure 3 contains
a single cross-over). The motivation for this criterion is that users
would likely move in consistent directions. We anticipate that users
would generally select the next contact point in region near the cur-
rent contact point. The second criterion restricts contact points that
are untouched, requiring that untouched contact points be gener-
ally near other untouched contact points. Similar to the cross-over
criteria, this restriction again assumes that users will likely connect
points in nearby regions.
We do not argue that real world users apply these criteria while
selecting their patterns, but in our experience, these criteria do pro-
duce patterns that our test users found reasonable to enter. Studying
user selection criteria for password patterns is beyond the scope of
this paper, and we are unaware of any such study.
6. ANALYSIS AND ML TECHNIQUES
In this section, we present our analysis of the collected accelerom-
eter data as well as present our machine learning techniques for
classifying data. The accelerometer measurements for both PINs
and patterns consist of a sequence of readings in each accelerom-
eter dimension (x,y,z). In addition to the accelerometer measure-
ments, we also record the timing of touch events. A touch event
for a PIN is when the user presses a digit, and a touch event for
a pattern is when a user swipes across a contact point. The touch
events are used to properly align the accelerometer data.
A malicious application distributed by an attacker will not have
direct access to touch events from other applications—if it did, then
there would be no need to employ side channels. A malicious ap-
plication must also determine when secure input begins and how to
segment the accelerometer readings. Automatically detecting touch
events from raw accelerometer data is beyond the scope of this
study; however, other machine learning techniques (or information
from other side channels) could be employed to solve this problem.
Additionally, techniques suggested in [34] could be applied here,
but in our investigation, we found that it may be ineffective with
low sample rates and gentler tap events, as what seems to occur for
single hand input. Further, the techniques in [34] would be inef-
fective for gesture input, as required to determine touch events for
patterns.
Feature
STATS
3D-Poly-Deg
3D-Poly-STATS
iFFT-Poly
iFFT-Acc
Length Description
6
4
6
35
35
Root mean square, mean, standard devia-
tion, variance, max and min
Parameters of a degree-3 polynomial ﬁt
STATS for a degree-3 polynomial ﬁt recon-
struction
The inverse Discrete Fourier Transform
(DFT) of a DFT of the 3-D polynomial ﬁt
curve using 35 samples.
The inverse DFT of the DFT of the ac-
celerometer readings using 35 samples.
Table 2: Features Set: Each feature is extracted in each linear di-
rection in the accelerometer reading.
1.8
1.6
1.4
1.2
1.0
0.8
0.6
0.4
0.2
0.0
0
1.0
0.8
0.6
0.4
0.2
0.0
0.2
0.4
0.6
0.8
0
0.8
0.6
0.4
0.2
0.0
0.2
0.4
0.6
0
0.8
0.6
0.4
0.2
0.0
0.2
0.4
0.6
0
Mean Fit
Raw Acceleromter Data
Linear Fit
Quadratic Fit
20
40
60
80
100
Mean Normalized
20
40
60
80
100
Linear Normalized
20
40
60
80
100
Quadratic Normalized
20
40
60
80
100
1.6
1.4
1.2
1.0
0.8
0.6
0.4
0.2
0.0
0
0.6
0.4
0.2
0.0
0.2
0.4
0.6
0.8
1.0
0
0.4
0.2
0.0
0.2
0.4
0.6
0.8
0
0.5
0.4
0.3
0.2
0.1
0.0
0.1
0.2
0.3
0.4
0
Mean Fit
Raw Acceleromter Data
Linear Fit
Quadratic Fit
10
20
30
40
50
60
70
80
90
Mean Normalized
10
20
30
40
50
60
70
80
90
Linear Normalized
10
20
30
60
Quadratic Normalized
40
50
70
80
90
10
20
30
40
50
60
70
80
90
Figure 4: Visual example of normalization: In the top plot, the raw
accelerometer data is presented with the appropriate mean, linear,
and quadratic ﬁts, and following plots show the affect on the raw
accelerometer data when normalized to those ﬁts, respectively.
6.1 Feature Extraction
In this section, we describe the feature set used as input to the
machine learning classiﬁers. For notation, consider a stream of ac-
celerometer readings A = {a1, . . . , an} of size n. Each data value
ai ∈ A contains four sub-values (or elements): ax
i , the accelera-
tion in the x direction; ay
i , the acceleration in the y direction; az
i ,
the acceleration in the z direction; and, at
i, the time stamp of this
reading. Additionally, allow Ad to refer to the projection of the dth
element of the readings in A, that is, Ad = {ad
n}.
1, . . . , ad
As is, the accelerometer data is varied, affected by subtle tilts and
shifts. For example, often the z dimension is close to 9.8 m/s2,
i.e., the force of gravity. The ﬁrst step in feature extraction is to
normalize the readings in each dimension such that they ﬂuctuate
about 0. We use three normalized forms of A for feature extraction:
1. Mean Normalization: For each linear direction d, compute
i − md}.
2. Linear Normalization: Perform a linear ﬁt and compute the
n} for each accelerometer direc-
i − ld
i }.
the mean md = mean(Ad), and return: Am = {ad
ﬁt curves Ld = {ld
1, . . . , ld
tion d, and return: Al = {ad
3. Quadratic Normalization: Perform a quadratic ﬁt and com-
n} for each accelerome-
i − qd
i }.
pute the ﬁt curves Qd = {qd
1 , . . . , qd
ter direction d, and return: Aq = {ad
A visual example of the normalization is provided in Figure 4. Fol-
lowing the normalization, we have three representations of A, Am,
Al, and Aq. Now, for each normalized accelerometer data stream,
we extract the features in Table 2.
The ﬁrst set of features extracted is standard statistics of the ac-
celerometer stream (STATS), such as the root mean square, mean,
standard deviation, variance, max and min. Each of these stats are
computed for each normalization in each dimension, e.g., for Am,
we compute STATS(Ax
m), STATS(Az
m) and the re-
sulting 18 features are appended to the feature vector.
m), STATS(Ay