architecture also supports programmable tag update and check
operations. On each forwarded instruction from the main core,
Harmoni can compute a new tag for the destination that is
accessed by the instruction. More speciﬁcally,
this update
operation can be performed either by a tag ALU (UALU) or a
software-controlled table (UTBL). The UALU can handle full
32-bit integer computations on two tags, which can be from tag
registers, tag memory, or the tag object table, and is designed
for monitoring techniques with regular tag update policies. For
example, in reference counting, each pointer creation event
results in a regular increment of the object’s reference count.
The update table (UTBL) works as a cache that stores recent
tag update rules and enables complex software-controlled tag
update policies. The UTBL takes two input tags along with
control bits that deﬁne an operation. Each entry stores a new
tag value for the speciﬁed tag operation with speciﬁc input tag
values. The UTBL raises an exception if an entry cannot be
found for a monitored instruction that is conﬁgured to use the
table. Then, software computes the new tag value and caches
it in the UTBL. The updated tag can be simply read from the
table if an identical tag operation with input tag values is later
performed.
Similar to the update, the tag check operation can also be
performed using either a check ALU (CALU) or a software-
controlled check table (CTBL). The check operation can take
up to two input tags and outputs a 1-bit signal indicating
whether a check passes or not. One input tag comes from the
output of the tag update unit, and the other input tag is from
the tag register, the tag memory, or the object table. The CALU
can handle a range of full 32-bit binary or unary comparison
operations on one or two tags. The CTBL handles complex
check policies by storing recent check results from software
in the same way that the UTBL caches recent update rules. In
our prototype, both UTBL and CTBL are implemented as a
direct-mapped caches with 32 entries.
To conﬁgure the tag operations, Harmoni uses a statically-
programmed look-up table for pipeline control signals (CON-
TBL). The CONTBL is indexed by the opcode of the for-
warded instruction and holds one set of control signals for each
opcode type. Our prototype supports 32 instruction types. The
control signals from the CONTBL determine where tags are
read from, how the tag update and check should be performed,
and where the updated tag should be written to. As an example,
for the tag update operation, the CONTBL signals specify
whether the computation will be handled by the UALU or
the UTBL, which tag values are used as inputs (up to two
from the tag registers, up to two from the tag memory, up
to one from the object table), and what the UALU or UTBL
operation should be.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply. 
Tag Read
Tag Compute
Tag Update
Tag Read
Tag Compute
Tag Update
Decode
Tag Read
Tag Update
Tag Check
Tag Write
Decode
Tag Read
Tag Update
Tag Check
Tag Write
r1
r2
rd
inst
RF Select
CONTBL
value
OBJTBL
TRF
REN
TMEM
REN
OBJTBL
REN
UALU
CALU
UTBL
CTBL
TRF
WEN
TMEM
WEN
OBJTBL
WEN
r1
r2
rd
inst
RF Select
CONTBL
value
OBJTBL
TRF
REN
TMEM
REN
OBJTBL
REN
UALU
CALU
UTBL
CTBL
TRF
WEN
TMEM
WEN
OBJTBL
WEN
(a) DIFT - dynamic information ﬂow tracking
(b) UMC - uninitialized memory checking
Tag Read
Tag Compute
Tag Update
Tag Read
Tag Compute
Tag Update
Decode
Tag Read
Tag Update
Tag Check
Tag Write
r1
r2
rd
inst
RF Select
CONTBL
value
OBJTBL
TRF
REN
TMEM
REN
OBJTBL
REN
UALU
CALU
UTBL
CTBL
TRF
WEN
TMEM
WEN
OBJTBL
WEN
Decode
Tag Read
Tag Update
Tag Check
Tag Write
r1
r2
rd
inst
RF Select
CONTBL
value
OBJTBL
TRF
REN
TMEM
REN
OBJTBL
REN
UALU
CALU
UTBL
CTBL
TRF
WEN
TMEM
WEN
OBJTBL
WEN
(c) BC - memory bounds checking
(d) RC - hardware support for reference counting
Fig. 5. Run-time monitoring techniques mapped to the Harmoni co-processor.
C. Tag Processing Pipeline
Having described the Harmoni architecture at a high-level,
we now describe the Harmoni pipeline in more detail, which is
shown in Figure 4. The Harmoni pipeline can be broken down
into ﬁve stages. The ﬁrst two stages read the relevant tags for
the monitored instruction, the third stage updates the tag, the
fourth stage performs a tag check, and the ﬁfth stage writes
the updated tag back to the tag register ﬁle, the tag memory,
or the object tag table.
In the ﬁrst stage of the pipeline, the instruction is “decoded”.
The CONTBL is accessed using the opcode of the forwarded
instruction. The tag register ﬁle indexes to read tags from are
speciﬁed in this control table. At the same time, the stage looks
up the OBJTBL by checking the base and bound addresses
with the pointer address from the main processing core.
In the second stage of the pipeline,
tag information is
accessed from the tag register ﬁle (TRF), the tag memory
(TMEM), and the software-controlled table (OBJTBL). Up to
two tags are read from the TRF, the TMEM is accessed for up
to two tags corresponding to the memory content or address
(value or location tag), and one object tag is read from the
OBJTBL.
In the third stage of the pipeline,
the updated tag is
computed. Up to two tags are used by either the UALU or the
UTBL to calculate the updated tag. The UALU allows broad
range of typical tag processing operations including bit-wise
logic operations (AND, NOT, OR, XOR), integer arithmetic
operations (Add and Sub), bit-shifting operations (shift and
rotate), and propagation of either operand. The UTBL caches
software speciﬁed tag update results in order to perform a
more complex tag update. The output of either the UALU or
the UTBL is selected using control signals from the CONTBL
at the end of the third stage and propagated to the next stage
of the Harmoni pipeline.
In the fourth stage of the pipeline, the tag is checked against
invariants. The CALU takes the updated tag along with another
tag from the TRF, the TMEM, or the OBJTBL, and performs
a unary or binary comparison to determine if an exception
should be raised. The CTBL uses the same input tags to
perform a complex tag check. The CONTBL selects which
module, the CALU or the CTBL, should drive an exception
signal back to the main processing core.
In the ﬁfth and ﬁnal stage of the pipeline, the updated tag
is written back to the tag register, the tag memory, and/or the
object tag table. The updated tag is sent on a broadcast bus
to these three structures, and the writing of this tag for each
module is controlled by a set of control signals generated from
the CONTBL.
D. Monitor Examples
Figure 5 shows how the run-time monitoring techniques that
we discussed in Section II can be mapped to Harmoni. The
ﬁgure highlights the modules that are used by each monitoring
scheme in block diagrams.
The modules used by dynamic information ﬂow tracking
(DIFT) are shown in Figure 5(a). In DIFT, ALU instruc-
tions propagate taint information between registers, memory
instructions propagate taint information between registers and
memory, and taint is checked on control transfer instructions.
For ALU instructions, the CONTBL enables reading from the
TRF and register tags are sent to the UALU. The UALU is
programmed to propagate the tag based on the input tags and
the instruction opcode by performing an OR operation, and
the result is written back to the TRF. For load instructions, the
CONTBL enables reading a tag from the TMEM and sends
the tag to to the UALU. The UALU passes through the taint
tag unaltered and this result is written to the TRF using the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:21:47 UTC from IEEE Xplore.  Restrictions apply. 
destination register index for the load. For store instructions,
the CONTBL enables reading of the tag from the TRF. This
tag is propagated through the UALU and into the TMEM. For
indirect jump instructions, the tag of the jump target address
is read from the TRF, propagated through the UALU, and
checked in the CALU. If the tag is non-zero, an exception is
raised.
The modules that are used by uninitialized memory check-
ing (UMC) are shown in Figure 5(b). In UMC, the location
tag of the memory that is accessed is read and checked on
a load, and the location tag of the accessed memory address
is set on a store. For load instructions, the CONTBL enables
reading of the tag of the accessed memory location from the
TMEM. This tag is propagated through the UALU unchanged,
and checked in the CALU to conﬁrm that the accessed memory
location was initialized (the tag is set). For store instructions,
the control table sets the UALU to output a constant ”1”, which
is stored to the TMEM at the address from the store.
The modules used by bounds checking (BC) are shown in
Figure 5(c). In bounds checking, explicit instructions set and
clear a value tag (pointer tag) and location tags (corresponding
locations) on memory allocation and deallocation events, the
pointer tags are propagated on an ALU instruction and a
load/store operation, and then the pointer and location tags
are compared on each memory access instruction to ensure
in-bound accesses. In our prototype, we implemented the
scheme using 4-bit tags, which represent 16 colors. For ALU
instructions, the value tags (pointer colors) of source operands
are read from the TRF and propagated to the UALU. The
UALU calculates the tag for the result, and this tag is written to
the TRF for destination register. For memory load instructions,
the CONTBL enables both the TRF and the TMEM in the
second state to read both the value tag of the load address
(TRF) and the value and location tags of the accessed memory
location (TMEM). Then, the pointer tag of the memory address
is compared with the memory location tag from the TMEM
in the CALU to ensure that they match. The tag of the loaded
memory value is then written back to the TRF. For memory
store instructions, the pointer tag of the accessed address is
read from the TRF and compared with the memory location
tag from the TMEM as in the load case. The tag of the value
that is being stored is then stored to the TMEM. To improve
the accuracy of the bounds checking scheme,
the pointer
tag propagation can be complemented by the UTBL so that
software can make more intelligent decisions on exceptional
cases.
The modules used by hardware reference counting (RC) are
shown in Figure 5(d). In the reference counting, specialized
instructions that create or overwrite a pointer explicitly send
the pointer that was created or overwritten to the co-processor.
The pointer is compared to a stored list of object base and
bound addresses in the OBJTBL to determine the reference
count (tag) that needs to be updated. If the pointer does not
lie within the base and bound addresses of any objects in
the OBJTBL, an exception is raised so that software on the
main processing core can update the OBJTBL. For instructions
7-stage, in-order
32 KB, 4-way set-associative
32 KB, 4-way set-associative
32 B
write-through
144 registers, 8 windows
32 entries (28 bits per entry)
32 entries
32 entries
Leon3 Processor
Pipeline
Instruction cache
Data cache
Cache block Size
Cache write policy
Register ﬁle
Harmoni Pipeline
Control table
UTBL
CTBL
Harmoni Support Structures
Core-Harmoni FIFO
Tag cache
Tag cache block size
Tag cache write policy
64 entries
4KB, direct-mapped
32B
write-back
TABLE II
ARCHITECTURE PARAMETERS.
that create a pointer, the object that the created pointer points
to is looked up and the reference count for that object is
incremented in the UALU. This updated reference count is
written back to the OBJTBL. For instructions that overwrite
a pointer, the object that the overwritten pointer points to is
looked up, the reference count for that object is decremented
in the UALU, and this updated reference count is written back
to the OBJTBL. The reference counts can be read by the main
core to quickly determine if a certain object can be removed.