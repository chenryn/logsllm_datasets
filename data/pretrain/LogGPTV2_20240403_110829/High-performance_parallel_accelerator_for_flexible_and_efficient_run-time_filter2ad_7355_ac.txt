### Harmoni Architecture: Tag Update and Check Operations

The Harmoni architecture supports programmable tag update and check operations. For each instruction forwarded from the main core, Harmoni can compute a new tag for the destination accessed by the instruction. This update operation can be performed using either a Tag Arithmetic Logic Unit (UALU) or a software-controlled table (UTBL).

#### Tag Update Operation
- **UALU**: The UALU can handle full 32-bit integer computations on two tags, which can be sourced from tag registers, tag memory, or the tag object table. It is designed for monitoring techniques with regular tag update policies. For example, in reference counting, each pointer creation event results in a regular increment of the objectâ€™s reference count.
- **UTBL**: The UTBL acts as a cache that stores recent tag update rules and enables complex software-controlled tag update policies. It takes two input tags along with control bits that define an operation. Each entry in the UTBL stores a new tag value for the specified tag operation with specific input tag values. If an entry cannot be found for a monitored instruction configured to use the table, an exception is raised, and the software computes the new tag value and caches it in the UTBL. Subsequent identical tag operations with the same input tag values can simply read the updated tag from the table.

#### Tag Check Operation
Similar to the update operation, the tag check operation can also be performed using either a Check ALU (CALU) or a software-controlled check table (CTBL).
- **CALU**: The CALU can handle a range of full 32-bit binary or unary comparison operations on one or two tags. One input tag comes from the output of the tag update unit, and the other input tag is from the tag register, tag memory, or the object table. The CALU outputs a 1-bit signal indicating whether the check passes or not.
- **CTBL**: The CTBL handles complex check policies by storing recent check results from software, similar to how the UTBL caches recent update rules.

In our prototype, both the UTBL and CTBL are implemented as direct-mapped caches with 32 entries.

### Configuration of Tag Operations
Harmoni uses a statically-programmed look-up table (CONTBL) for pipeline control signals. The CONTBL is indexed by the opcode of the forwarded instruction and holds one set of control signals for each opcode type. Our prototype supports 32 instruction types. The control signals from the CONTBL determine where tags are read from, how the tag update and check should be performed, and where the updated tag should be written to.

For the tag update operation, the CONTBL signals specify:
- Whether the computation will be handled by the UALU or the UTBL.
- Which tag values are used as inputs (up to two from the tag registers, up to two from the tag memory, and up to one from the object table).
- What the UALU or UTBL operation should be.

### Tag Processing Pipeline
The Harmoni pipeline consists of five stages:
1. **Decode**: The CONTBL is accessed using the opcode of the forwarded instruction. The tag register file indexes to read tags from are specified in this control table. The OBJTBL is also looked up by checking the base and bound addresses with the pointer address from the main processing core.
2. **Tag Read**: Tag information is accessed from the tag register file (TRF), the tag memory (TMEM), and the software-controlled table (OBJTBL). Up to two tags are read from the TRF, the TMEM is accessed for up to two tags corresponding to the memory content or address, and one object tag is read from the OBJTBL.
3. **Tag Compute**: The updated tag is computed using up to two tags by either the UALU or the UTBL. The UALU allows a broad range of typical tag processing operations, including bitwise logic operations, integer arithmetic operations, bit-shifting operations, and propagation of either operand. The UTBL caches software-specified tag update results to perform more complex tag updates.
4. **Tag Check**: The updated tag is checked against invariants. The CALU takes the updated tag along with another tag from the TRF, TMEM, or OBJTBL and performs a unary or binary comparison to determine if an exception should be raised. The CTBL uses the same input tags to perform a complex tag check.
5. **Tag Write**: The updated tag is written back to the tag register, the tag memory, and/or the object tag table. The updated tag is sent on a broadcast bus to these three structures, and the writing of this tag for each module is controlled by a set of control signals generated from the CONTBL.

### Monitoring Examples
Figure 5 illustrates how various run-time monitoring techniques can be mapped to the Harmoni co-processor.

#### Dynamic Information Flow Tracking (DIFT)
- **ALU Instructions**: Propagate taint information between registers. The CONTBL enables reading from the TRF, and register tags are sent to the UALU, which performs an OR operation and writes the result back to the TRF.
- **Load Instructions**: The CONTBL enables reading a tag from the TMEM and sends the tag to the UALU, which passes through the taint tag unaltered and writes it to the TRF.
- **Store Instructions**: The CONTBL enables reading the tag from the TRF, which is propagated through the UALU and into the TMEM.
- **Indirect Jump Instructions**: The tag of the jump target address is read from the TRF, propagated through the UALU, and checked in the CALU. If the tag is non-zero, an exception is raised.

#### Uninitialized Memory Checking (UMC)
- **Load Instructions**: The CONTBL enables reading the tag of the accessed memory location from the TMEM. This tag is propagated through the UALU unchanged and checked in the CALU to confirm that the accessed memory location was initialized.
- **Store Instructions**: The control table sets the UALU to output a constant "1", which is stored to the TMEM at the address from the store.

#### Bounds Checking (BC)
- **Memory Allocation/Deallocation**: Explicit instructions set and clear value tags (pointer tags) and location tags on memory allocation and deallocation events.
- **ALU Instructions**: Value tags (pointer colors) of source operands are read from the TRF and propagated to the UALU, which calculates the tag for the result and writes it to the TRF.
- **Memory Load Instructions**: The CONTBL enables both the TRF and the TMEM to read the value tag of the load address and the value and location tags of the accessed memory location. The pointer tag of the memory address is compared with the memory location tag from the TMEM in the CALU to ensure they match.
- **Memory Store Instructions**: The pointer tag of the accessed address is read from the TRF and compared with the memory location tag from the TMEM. The tag of the value being stored is then stored to the TMEM.

#### Hardware Reference Counting (RC)
- **Pointer Creation/Overwrite**: Specialized instructions create or overwrite a pointer, which is compared to a stored list of object base and bound addresses in the OBJTBL to determine the reference count (tag) that needs to be updated. If the pointer does not lie within the base and bound addresses of any objects, an exception is raised so that software on the main processing core can update the OBJTBL.
- **Pointer Creation**: The object that the created pointer points to is looked up, and the reference count for that object is incremented in the UALU and written back to the OBJTBL.
- **Pointer Overwrite**: The object that the overwritten pointer points to is looked up, the reference count for that object is decremented in the UALU, and the updated reference count is written back to the OBJTBL.

### Architecture Parameters
- **Pipeline**: 7-stage, in-order
- **Instruction Cache**: 32 KB, 4-way set-associative
- **Data Cache**: 32 KB, 4-way set-associative
- **Cache Block Size**: 32 B
- **Cache Write Policy**: Write-through
- **Register File**: 144 registers, 8 windows
- **Control Table**: 32 entries (28 bits per entry)
- **UTBL**: 32 entries
- **CTBL**: 32 entries
- **Core-Harmoni FIFO**: 64 entries
- **Tag Cache**: 4 KB, direct-mapped
- **Tag Cache Block Size**: 32 B
- **Tag Cache Write Policy**: Write-back

This comprehensive overview provides a detailed understanding of the Harmoni architecture's capabilities and its application in various monitoring techniques.