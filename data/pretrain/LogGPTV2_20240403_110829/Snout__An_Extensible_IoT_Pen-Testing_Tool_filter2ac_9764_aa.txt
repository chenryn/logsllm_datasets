# Title: Snout: An Extensible IoT Pen-Testing Tool

## Authors
- John Mikulskis, Boston University, Boston, MA, USA
- Johannes K. Becker, Boston University, Boston, MA, USA
- Stefan Gvozdenovic, Boston University, Boston, MA, USA
- David Starobinski, Boston University, Boston, MA, USA

## Poster: Snout - An Extensible IoT Pen-Testing Tool

### Abstract
Network mapping tools designed for IP-based networks generally do not provide access to non-IP based wireless protocols used by Internet of Things (IoT) devices, such as Zigbee and Bluetooth Low Energy (BLE). We present Snout, a versatile and extensible software-defined radio (SDR)-based tool for IoT network mapping and penetration testing. Snout is designed to address the limitations of traditional network enumeration tools like Nmap, which cannot interact with various IoT protocols. The tool supports device enumeration, vulnerability assessment, and advanced techniques such as packet replay and spoofing, demonstrated for the Zigbee protocol. Snout is built on an open-source stack and is designed for extensibility to other IoT protocols and capabilities.

### CCS Concepts
- **Security and Privacy**: Penetration Testing, Vulnerability Scanners, Mobile and Wireless Security
- **Networks**: Cross-layer Protocols, Network Performance Analysis, Mobile and Wireless Security, Wireless Local Area Networks
- **Hardware**: Analog, Mixed-Signal, and Radio Frequency Test
- **Applied Computing**: Forecasting

### Keywords
- Internet of Things (IoT)
- Device Enumeration
- Vulnerability Assessment
- Fuzzing

### ACM Reference Format
John Mikulskis, Johannes K. Becker, Stefan Gvozdenovic, and David Starobinski. 2019. Poster: Snout - An Extensible IoT Pen-Testing Tool. In 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3319535.3363248

## 1. Introduction
Traditional network administration tools are fundamentally limited when it comes to Internet of Things (IoT) devices, as they typically operate on the TCP/IP network stack. This limits visibility into wireless devices that communicate using non-IP IoT protocols, such as Zigbee and BLE, to information provided by gateways like IoT smart hubs. These gateways bridge the respective wireless networks to the IP network.

From both security and asset management perspectives, the ability to enumerate and analyze the security of installed IoT devices without relying on gateways is highly desirable. Possible applications include detecting mismatches between the device inventory reported by a gateway and the actual inventory observed from IoT wireless traffic (e.g., orphaned devices, forgotten legacy devices, or even malicious rogue devices), and gathering intelligence on vulnerabilities of certain devices deployed in the organization (e.g., unpatched devices).

We introduce the SDR-Based Network Observation Utility Toolkit (Snout) to address this limitation. Snout leverages Software-Defined Radio (SDR) to passively sniff and interact with various common IoT protocols. Our contributions in this context are as follows:
- We present an open-source IoT pen-testing tool capable of communicating with a variety of non-IP based wireless devices, usable both interactively and through automated tasks.
- We describe the open-source software architecture that enables Snout.
- We demonstrate device enumeration capabilities of Snout for two major wireless IoT protocols (Bluetooth LE and Zigbee).
- We highlight passive and active detection of a recent Zigbee vulnerability.
- We outline future directions for development and research envisioned for this tool.

## 2. Tool Description
Snout can be installed as a Python 3 package or as a stand-alone Docker container for easy deployment. It leverages well-established open-source projects for SDR and network stack management as a foundation (see Figure 1) and interoperates with the PyBOMBS [7] package manager for GNU Radio software package management. We demonstrate an initial feature set on our website [2].

Snout is built as an abstraction layer above the low-level signal transcoding processes required for SDR-based communication. To provide interoperability with existing tools and facilitate advanced packet handling, Snout leverages established software. Its functionality is prioritized based on the most prevalent use cases of network mapping tools, such as Nmap. The current functionality can be broken down as follows:

- **Device Enumeration**: Depending on the protocol, Snout can passively monitor wireless communication and enumerate devices, or actively query devices for information.
- **Vulnerability Assessment**: Different vulnerabilities can be detected by listening to ongoing communication (passively) or by triggering vulnerable processes (actively). Snout can also find specific vendor, OS, and protocol versions.
- **Advanced Packet Replay**: Snout can replay received packets as-is or with specific modifications, such as dynamic sequence number increments or other packet modifications, making it a useful tool for replay vulnerability detection.
- **Packet Fuzzing**: Snout allows the user to configure smart fuzzing functionality on both the preamble and the body of packets, enabling a large range of use cases around wireless communication physical layer fuzzing.

## 3. Results
Currently, Snout's most advanced capabilities relate to the Zigbee and BTLE wireless IoT protocols [2], which we highlight below.

### 3.1 Zigbee
- **Device Enumeration**: Using passive scanning, Snout can enumerate devices by sniffing traffic on any of the Zigbee protocol’s 15 RF channels in the 2.4 GHz band (11-26).
- **Vulnerability Assessment**: Through active scanning, Snout can assess the vulnerability of Zigbee devices to certain exploits, such as the recent Zigbee Light Link (ZLL) Commissioning exploit, which allows an attacker to take over ZLL-enabled smart light devices [4, 14]. While entirely passive detection is possible, it requires waiting for ZLL commissioning to happen in the wild, which may not produce immediate insights. We stress that Snout detects the vulnerability without running the exploit.
- **Command Replay**: Snout can replay any Zigbee packet sequence from either a PCAP file or from a live scan, with transmit times that are true to the packets’ original timestamps. This feature can be used to test whether certain devices are vulnerable to replay attacks.
- **Fuzzing**: Snout’s transmission mode has the ability to fuzz the preamble and higher layers of Zigbee packets. This feature is useful for security research, i.e., fingerprinting devices based on their response to different preambles [9].

### 3.2 Bluetooth Low Energy (BTLE)
- **Passive and Continuous Device Enumeration**: Using its BTLE scanning mode, Snout can track devices that broadcast BTLE packets, collect MAC addresses, and analyze traffic information (such as message frequency and uptime).
- **Device Analysis**: Snout can further analyze messages for information about device vendor, OS, model, and other device details. For Apple devices, Snout implements the majority of OS and activity intelligence gathering using recent techniques developed by Martin et al. [13], based on reverse engineering Apple’s Continuity protocol.

### Figure 1: The Snout Application Leverages an Entirely Open-Source Software Stack

This figure illustrates the open-source software stack that Snout leverages, ensuring flexibility and extensibility.

---

By providing these features, Snout aims to enhance the security and management of IoT devices, offering a powerful and flexible tool for researchers and administrators.