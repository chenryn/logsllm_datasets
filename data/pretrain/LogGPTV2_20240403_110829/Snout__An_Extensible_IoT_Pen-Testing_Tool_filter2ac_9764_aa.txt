title:Snout: An Extensible IoT Pen-Testing Tool
author:John Mikulskis and
Johannes K. Becker and
Stefan Gvozdenovic and
David Starobinski
Poster: Snout - An Extensible IoT Pen-Testing Tool
John Mikulskis
PI:EMAIL
Boston University
Boston, MA, USA
Stefan Gvozdenovic
PI:EMAIL
Boston University
Boston, MA, USA
Johannes K Becker
PI:EMAIL
Boston University
Boston, MA, USA
David Starobinski
PI:EMAIL
Boston University
Boston, MA, USA
ABSTRACT
Network mapping tools designed for IP-based networks generally
do not provide access to non-IP based wireless protocols used by
Internet of Things (IoT) devices, such as Zigbee and Bluetooth LE.
We present Snout, a versatile and extensible software defined radio-
based tool for IoT network mapping and penetration testing. Snout
is geared towards the various IoT protocols that are not accessible
with traditional network enumeration tools, such as Nmap. The tool
allows for device enumeration, vulnerability assessment, as well
as more offensive techniques such as packet replay and spoofing,
which we demonstrate for the Zigbee protocol. Snout is built on an
open-source stack, and is designed for extensibility towards other
IoT protocols and capabilities.
CCS CONCEPTS
• Security and privacy → Penetration testing; Vulnerability
scanners; Mobile and wireless security; • Networks → Cross-
layer protocols; Network performance analysis; Mobile and wireless se-
curity; Wireless local area networks; • Hardware → Analog, mixed-
signal and radio frequency test; • Applied computing → Forecast-
ing.
KEYWORDS
Internet of Things, Device Enumeration, Vulnerability Assessment,
Fuzzing
ACM Reference Format:
John Mikulskis, Johannes K Becker, Stefan Gvozdenovic, and David Starobin-
ski. 2019. Poster: Snout - An Extensible IoT Pen-Testing Tool. In 2019 ACM
SIGSAC Conference on Computer and Communications Security (CCS ’19),
November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA,
3 pages. https://doi.org/10.1145/3319535.3363248
1 INTRODUCTION
Traditional network administration tools are fundamentally limited
when it comes to Internet of Things (IoT) devices, as they typically
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3363248
operate on the TCP/IP network stack. As such, visibility into wire-
less devices that communicate using non-IP IoT protocols is limited
to information provided by gateways, such as IoT smart hubs. Such
gateways create bridges between the respective wireless networks
(e.g., Zigbee) and the IP network.
Yet, from both security and asset management perspectives, the
ability to enumerate and further analyze the security of installed
IoT devices without having to rely on gateways is highly desirable.
Possible applications include detecting mismatches between the
device inventory reported by a gateway and the actual inventory
observed from IoT wireless traffic (e.g., orphaned devices, forgotten
legacy devices or even malicious rogue devices), and gathering
intelligence on vulnerabilities of certain devices deployed in the
organization (e.g., unpatched devices).
We introduce the SDR-Based Network Observation Utility Toolkit
(Snout) to address this limitation. Snout leverages Software-Defined
Radio (SDR) to passively sniff, and interact with various common
IoT protocols. Our contributions in this context are as follows:
• We present an open-source IoT pen-testing tool capable of
communicating with a variety of non-IP based wireless de-
vices. We show that it can be used both interactively and
through automated tasks.
• We describe the open-source software architecture that en-
• We demonstrate device enumeration capabilities of Snout for
two major wireless IoT protocols (Bluetooth LE and Zigbee).
• We highlight passive and active detection of a recent Zigbee
• We outline future direction of development and research
vulnerability.
ables Snout.
envisioned for this tool.
2 TOOL DESCRIPTION
Snout can be installed as a Python 3 package or as a stand-alone
Docker container for easy deployment. It leverages a number of
well-established open-source projects for SDR and network stack
management as a foundation (see Figure 1) and interoperates with
the PyBOMBS [7] package manager for GNU Radio software pack-
age management. We demonstrate an initial feature set on our
website [2].
Snout is built as an abstraction layer above the low-level signal
transcoding processes required for SDR-based communication. In
order to provide interoperability with existing tools and facilitate
PosterCCS ’19, November 11–15, 2019, London, United Kingdom2529Snout’s functionality is prioritized based on the most prevalent
use cases of network mapping tools, such as Nmap. Its current
functionality can be broken down as follows:
Device Enumeration: Depending on the protocol, Snout can
passively monitor wireless communication and enumerate
devices, or actively query devices for information.
Vulnerability Assessment: Different vulnerabilities can be
detected by listening to ongoing communication (passively)
or by triggering vulnerable processes (actively). Snout can
also find specific vendor, OS, and protocol versions.
Advanced Packet Replay: Snout can replay received pack-
ets as-is or with specific modifications, such as dynamic
sequence number increments or other packet modifications,
making it a useful tool for replay vulnerability detection.
Packet Fuzzing: Snout allows the user to configure smart
fuzzing functionality on both the preamble and the body
of packets, enabling a large range of use cases around wire-
less communication physical layer fuzzing.
3 RESULTS
Currently, Snout’s most advanced capabilities relate to the Zigbee
and BTLE wireless IoT protocols [2], which we highlight below.
3.0.1 Zigbee.
• Device Enumeration: Using passive scanning, Snout can enu-
merate devices by sniffing traffic on any of the Zigbee proto-
col’s 15 RF channels in the 2.4 GHz band (11-26).
• Vulnerability assessment: Through active scanning, Snout can
assess the vulnerability of Zigbee devices to certain exploits,
such as the recent Zigbee Light Link (ZLL) Commissioning
exploit which allows an attacker to take over ZLL enabled
smart light devices [4, 14]. While entirely passive detection
is possible, it requires waiting for ZLL commissioning to
happen in the wild, which may not produce immediate in-
sights. We stress that Snout detects the vulnerability without
running the exploit.
• Command Replay: Snout can replay any Zigbee packet se-
quence from either a PCAP file or from a live scan, with trans-
mit times that are true to the packets’ original timestamps.
This feature can be used to test whether certain devices are
vulnerable to replay attacks.
• Fuzzing: Snout’s transmission mode has the ability to fuzz the
preamble and higher layers of Zigbee packets. This feature is
useful for security research, i.e., fingerprinting devices based
on their response to different preambles [9].
3.0.2 Bluetooth Low Energy (BTLE).
• Passive and Continuous Device Enumeration: Using its BTLE
scanning mode, Snout can track devices which broadcast
BTLE packets, collect MAC addresses, and analyze traffic
information (such as message frequency and uptime).
• Device Analysis: Snout can further analyze messages for in-
formation about device vendor, OS, model, and other device
details. For Apple devices, Snout implements the majority
of OS and activity intelligence gathering using recent tech-
niques developed by Martin et al. [13], based on reversing
enginering Apple’s Continuity protocol.
Figure 1: The Snout application leverages an entirely open-
source software stack.
advanced packet handling, Snout leverages established software