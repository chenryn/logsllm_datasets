### Network Traffic Analysis and Potential Security Incidents

#### 1. SSH Connection via Backdoor
The following log entries show an attempt to establish an SSH connection using a backdoor on `sshd` from a different IP address.

- **Timestamp:** 17:46:46.104626
- **Source:** xx.yyy.zzz.3.1126
- **Destination:** aaa.bb.c.125.cfinger
- **Packet Details:**
  - **Sequence Number:** 389507617
  - **Window Size:** 8760
  - **Flags:** S (SYN)
  - **Data:**
    ```
    0x0000  4500 0030 1ac2 4000 6f06 30b7 51c4 e503         E..0..@.o.0.Q...
    0x0010  800a 097d 0466 07d3 1737 6a21 0000 0000         ...}.f...7j!....
    0x0020  7002 2238 16a3 0000 0204 0218 0101 0402         p."8............
    ```

- **Response:**
  - **Timestamp:** 17:46:46.105445
  - **Source:** aaa.bb.c.125.cfinger
  - **Destination:** xx.yyy.zzz.3.1126
  - **Packet Details:**
    - **Sequence Number:** 2758367448
    - **Acknowledgment Number:** 389507618
    - **Window Size:** 5840
    - **Flags:** S (SYN), ACK
    - **Data:**
      ```
      0x0000  4500 0030 0000 4000 4006 7a79 800a 097d         E..0..@.@.zy...}
      0x0010  51c4 e503 07d3 0466 a469 58d8 1737 6a22         Q......f.iX..7j"
      0x0020  7012 16d0 211c 0000 0204 05b4 0101 0402         p...!...........
      ```

- **Further Communication:**
  - **Timestamp:** 17:46:46.422319
  - **Source:** xx.yyy.zzz.3.1126
  - **Destination:** aaa.bb.c.125.cfinger
  - **Packet Details:**
    - **Acknowledgment Number:** 1
    - **Window Size:** 9112
    - **Flags:** ACK
    - **Data:**
      ```
      0x0000  4500 0028 1ac3 4000 6f06 30be 51c4 e503         E..(..@.o.0.Q...
      0x0010  800a 097d 0466 07d3 1737 6a22 a469 58d9         ...}.f...7j".iX.
      0x0020  5010 2398 4118 0000 4100 0000 0000              P.#.A...A.....
      ```

  - **Response:**
    - **Timestamp:** 17:46:46.728800
    - **Source:** aaa.bb.c.125.cfinger
    - **Destination:** xx.yyy.zzz.3.1126
    - **Packet Details:**
      - **Sequence Number:** 1
      - **Acknowledgment Number:** 1
      - **Window Size:** 5840
      - **Flags:** PSH, ACK
      - **Data:**
        ```
        0x0000  4510 0037 55d5 4000 4006 248d 800a 097d         E..7U.@.@.$....}
        0x0010  51c4 e503 07d3 0466 a469 58d9 1737 6a22         Q......f.iX..7j"
        0x0020  5018 16d0 ac5b 0000 5353 482d 312e 352d         P....[..SSH-1.5-
        0x0030  312e 322e 3235 0a                               1.2.25.
        ```

  - **Final Communication:**
    - **Timestamp:** 17:46:47.050246
    - **Source:** xx.yyy.zzz.3.1126
    - **Destination:** aaa.bb.c.125.cfinger
    - **Packet Details:**
      - **Sequence Number:** 1
      - **Acknowledgment Number:** 16
      - **Window Size:** 9097
      - **Flags:** PSH, ACK
      - **Data:**
        ```
        0x0000  4500 0043 1ac5 4000 6f06 30a1 51c4 e503         E..C..@.o.0.Q...
        0x0010  800a 097d 0466 07d3 1737 6a22 a469 58e8         ...}.f...7j".iX.
        0x0020  5018 2389 4c55 0000 5353 482d 312e 352d         P.#.LU..SSH-1.5-
        0x0030  5075 5454 592d 5265 6c65 6173 652d 302e         PuTTY-Release-0.
        0x0040  3533 0a                                         53.
        ```

**Figure 8:** Collapsar log information showing a possible stepping stone attack.

#### 2. Network Scanning
Network scanning is a common incident, with various methods such as ping sweeping, port knocking, OS fingerprinting, and firewalking. The following log entries show ICMP (ping) sweeping activity from the same source address (xx.yy.zzz.125) against three honeypots within a very short period of time (1.0 second). The honeypots are virtually present in three different production networks. Based on the payload, it is likely that a Nachi worm [20] is performing the scan.

- **ICMP Echo Request:**
  - **Timestamp:** 14:49:44.139231
  - **Source:** xx.yy.zzz.125
  - **Destination:** aaa.bb.9.126
  - **Data:**
    ```
    0x0000   4500 005c 30de 0000 7301 0798 0c26 797d        E..\0...s....&y}
    0x0010   800a 097e 0800 95dc 0200 0ace aaaa aaaa        ...~............
    0x0020   aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa        ................
    0x0030   aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa        ................
    0x0040   aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa        ................
    0x0050   aaaa                                           ..
    ```

- **ICMP Echo Request:**
  - **Timestamp:** 14:50:21.853938
  - **Source:** xx.yy.zzz.125
  - **Destination:** ccc.dd.8.32
  - **Data:**
    ```
    0x0000   4500 005c 2ece 0000 7301 0b06 0c26 797d        E..\....s....&y}
    0x0010   800a 0820 0800 f2dd 0200 adcc aaaa aaaa        ................
    0x0020   aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa        ................
    0x0030   aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa        ................
    0x0040   aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa        ................
    0x0050   aaaa    
    ```

- **ICMP Echo Request:**
  - **Timestamp:** 14:50:50.970419
  - **Source:** xx.yy.zzz.125
  - **Destination:** eee.ff.21.9
  - **Data:**
    ```
    0x0000   4500 005c 3e04 0000 7301 eee6 0c26 797d        E..\>...s....&y}
    0x0010   800a 1509 0800 16d1 0200 89d9 aaaa aaaa        ................
    0x0020   aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa        ................
    0x0030   aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa        ................
    0x0040   aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa        ................
    0x0050   aaaa                  
    ```

**Figure 9:** Collapsar log information showing a possible ICMP sweeping scan.

### Related Work

Several recent projects are related to Collapsar, including honeyd [36], Network Telescope [35], Netbait [23], and SANSâ€™s Internet Storm Center [1].

- **Honeyd [36]:** This project is comparable to Collapsar in terms of support for multiple honeypots and traffic diversion. Honeyd simulates multiple virtual computer systems at the network level, deceiving network fingerprinting tools and providing arbitrary routing topologies and services. The key difference is that honeyd is a low-interaction virtual honeypot framework, while Collapsar uses high-interaction virtual honeypots. Honeyd is more scalable, but Collapsar provides a more authentic environment for intruders and has potential for early worm detection.

- **Network Telescope [35]:** This framework provides distributed presence for the detection of global-scale security incidents. Netbait [23] runs simplified network services on each participating machine, logging all incoming requests and federating data to a centralized server for pattern matching. Neither Network Telescope nor Netbait involve real-time traffic diversion mechanisms or interactive environments for monitoring intruder activities.

- **Internet Storm Center [1]:** Set up by SANS in November 2000, this center gathers log data from distributed intrusion detection sensors. It does not provide an interactive environment for intruders or real-time traffic diversion.

### Conclusion

We have presented the design, implementation, and evaluation of Collapsar, a high-interaction virtual honeypot architecture for network attack detention. Collapsar features centralized honeypot management and decentralized honeypot presence, ensuring consistent expertise and quality in deploying, administering, investigating, and correlating multiple honeypots. Real-world deployment and several representative attack incidents captured by Collapsar demonstrate its effectiveness and practicality.

### Acknowledgments

We thank Dr. Eugene H. Spafford for his valuable comments and advice. We also thank the anonymous reviewers for their helpful feedback and suggestions, and Paul Ruth for his help with the camera-ready preparation. This work was supported in part by a grant from the e-Enterprise Center at Discovery Park, Purdue University.

### References

[1] Internet Storm Center. http://isc.sans.org.
[2] Iroffer. http://iroffer.org/.
[3] Napster. http://www.napster.com/.
[4] psyBNC. http://www.psychoid.net/psybnc.html.
[5] Sebek. http://www.honeynet.org/tools/sebek/.
[6] Snort. http://www.snort.org.
[7] Snort-inline. http://sourceforge.net/projects/snort-inline/.
[8] Tcpdump. http://www.tcpdump.org.
[9] The Honeynet Project. http://www.honeynet.org.
[10] Virtual PC. http://www.microsoft.com/windowsxp/virtualpc/.
[11] VMware. http://www.vmware.com/.
[12] VMWare FootPrinting. http://chitchat.at.infoseek.co.jp/vmware/vmtools.html.
[13] CERT Advisory CA-2002-01 Exploitation of Vulnerability in CDE Subprocess Control Service. Jan. 2002. http://www.cert.org/advisories/CA-2002-01.html.
[14] CERT Advisory CA-2002-17 Handling Chunked Encoding Vulnerability in Apache Web Server. Mar. 2003. http://www.cert.org/advisories/CA-2002-17.html.
[15] CERT Advisory CA-2003-20 W32/Blaster Worm. Aug. 2003. http://www.cert.org/advisories/CA-2003-20.html.
[16] CERT/CC Overview Incident and Vulnerability Trends. May 2003. http://www.cert.org/present/cert-overview-trends/.
[17] CERT/CC Coordination Center Vulnerability Note VU-298233. Mar. 2003. http://www.kb.cert.org/vuls/id/298233.
[18] Collapsar. Dec. 2003. http://www.cs.purdue.edu/homes/jiangx/collapsar.
[19] Linux Kernel Ptrace Privilege Escalation Vulnerability. Mar. 2003. http://www.secunia.com/advisories/8337/.
[20] MA-055.082003: W32.Nachi Worm. Aug. 2003. http://www.mycert.org.my/advisory/MA-055.082003.html.
[21] Microsoft Security Bulletin MS03-026. 2003. http://www.microsoft.com/technet/treeview/default.asp?url=/technet/security/bulletin/MS03-026.asp.
[22] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, R. N. Alex Ho, I. Pratt, and A. Warfield. Xen and the Art of Virtualization. Proceedings of ACM Symposium on Operating Systems Principles (SOSP 2003), Oct. 2003.
[23] B. N. Chun, J. Lee, and H. Weatherspoon. Netbait: a Distributed Worm Detection Service. Intel Research Berkeley Technical Report IRB-TR-03-033, Sept. 2003.
[24] J. Dike. User Mode Linux. http://user-mode-linux.sourceforge.net.
[25] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen. ReVirt: Enabling Intrusion Analysis Through Virtual-Machine Logging and Replay. Proceedings of USENIX Symposium on Operating Systems Design and Implementation (OSDI 2002), Dec. 2002.
[26] T. Garfinkel and M. Rosenblum. A Virtual Machine Introspection Based Architecture for Intrusion Detection. Proceedings of Internet Society Symposium on Network and Distributed System Security (NDSS 2003), Feb. 2003.
[27] A. Goel, M. Shea, S. Ahuja, W.-C. Feng, W.-C. Feng, D. Maier, and J. Walpole. Forensix: A Robust, High-Performance Reconstruction System. The 19th Symposium on Operating Systems Principles (SOSP) (poster session), Oct. 2003.
[28] S. Hanks, T. Li, D. Farinacci, and P. Traina. Generic Routing Encapsulation (GRE). RFC 1701, Oct. 1994.
[29] S. Hanks, T. Li, D. Farinacci, and P. Traina. Generic Routing Encapsulation over IPv4 networks. RFC 1702, Oct. 1994.
[30] H. J. Hoxer, K. Buchacker, and V. Sieh. Implementing a User-Mode Linux with Minimal Changes from Original Kernel. Linux-Kongress 2002, KÃ¶ln, Germany, Sept. 2002.
[31] X. Jiang, D. Xu, and R. Eigenmann. Protection Mechanisms for Application Service Hosting Platforms. Proceedings of IEEE/ACM Symposium on Cluster Computing and the Grid (CCGrid 2004), Apr. 2004.
[32] S. T. King and P. M. Chen. Backtracking Intrusions. Proceedings of ACM Symposium on Operating Systems Principles (SOSP 2003), Oct. 2003.
[33] K. Kortchinsky. VMware Honeypots: Counter measures to fingerprinting. Jan. 2004. http://seclists.org/lists/honeypots/2004/Jan-Mar/0015.html.
[34] J. V. Miller. SHV4 Rootkit Analysis. Oct. 2003. https://tms.symantec.com/members/AnalystReports/030929-Analysis-SHV4Rootkit.pdf.
[35] D. Moore. Network Telescopes: Observing Small or Distant Security Events. Proceedings of the 11th USENIX Security Symposium, Aug. 2002.
[36] N. Provos. A Virtual Honeypot Framework. Proceedings of the 13th USENIX Security Symposium, Aug. 2004.
[37] L. Spitzner. Honeypots: Tracking Hackers. Addison-Wesley, 2003 ISBN: 0-321-10895-7.
[38] L. Spitzner. Dynamic Honeypots. Sept. 2003. http://www.securityfocus.com/infocus/1731.
[39] L. Spitzner. Honeypot Farms. Aug. 2003. http://www.securityfocus.com/infocus/1720.
[40] L. Spitzner. Honeytokens: The Other Honeypot. July 2003. http://www.securityfocus.com/infocus/1713.
[41] J. Twycross and M. M. Williamson. Implementing and testing a virus throttle. Proceedings of the 12th USENIX Security Symposium, Aug. 2003.
[42] Y. Zhang and V. Paxson. Detecting Stepping Stones. Proceedings of the 9th USENIX Security Symposium, Aug. 2000.
[43] C. C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring and Early Warning for Internet Worms. Proceedings of the 10th ACM Conference on Computer and Communication Security (CCS 2003), Washington DC, USA, Oct. 2003.