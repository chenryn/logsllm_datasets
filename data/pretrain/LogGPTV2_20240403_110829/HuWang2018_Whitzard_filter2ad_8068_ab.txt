    18 mem = 70
    23 reg1 = mem
    25 cmp reg0 reg1
    27 jg 68
    29 mem = 48
    34 reg1 = mem
    36 cmp reg0 reg1
    38 jl 62
    40 mem = 57
    45 reg1 = mem
    47 cmp reg0 reg1
    49 jl 62
    51 mem = 65
    56 reg0 = mem
    58 cmp reg0 reg1
    60 jl 68
    62 reg0 ^= reg0
    64 cmp reg0 reg0
    66 jz 73
    68 reg0 ^= reg0
    70 reg0++
    72 exit
    73 rep reg3 9
    75 mem = 7
    80 reg3 = mem
    82 reg1 = 0
    84 hashp--    85 reg0 = hash[hashp]
    87 mem = 48
    92 reg2 = mem
    94 reg0 -= reg2
    96 mem = 10
    101 reg2 = mem
    103 cmp reg0 reg2
    105 jl 116
    107 mem = 7
    112 reg2 = mem
    114 reg0 -= reg2
    116 mem = 16
    121 reg2 = mem
    123 reg1 *= reg2
    125 reg1 += reg0
    127 rep reg3 84
    129 mem = 3954878541
    134 reg2 = mem
    136 cmp reg1 reg2
    138 reg0 ^= reg0
    140 jz 145
    142 reg0++
    144 exit
    145 mem = 7
    150 reg3 = mem
    152 reg1 ^= reg1
    154 hashp--    155 reg0 = hash[hashp]
    157 mem = 48
    162 reg2 = mem
    164 reg0 -= reg2
    166 mem = 10
    171 reg2 = mem
    173 cmp reg0 reg2
    175 jl 186
    177 mem = 7
    182 reg2 = mem
    184 reg0 -= reg2
    186 mem = 16
    191 reg2 = mem
    193 reg1 *= reg2
    195 reg1 += reg0
    197 rep reg3 154
    199 mem = 1406938271
    204 reg2 = mem
    206 cmp reg1 reg2
    208 reg0 ^= reg0
    210 jz 215
    212 reg0++
    214 exit
    215 mem = 7
    220 reg3 = mem
    222 reg1 ^= reg1
    224 hashp--    225 reg0 = hash[hashp]
    227 mem = 48
    232 reg2 = mem
    234 reg0 -= reg2
    236 mem = 10
    241 reg2 = mem
    243 cmp reg0 reg2
    245 jl 256
    247 mem = 7
    252 reg2 = mem
    254 reg0 -= reg2
    256 mem = 16
    261 reg2 = mem
    263 reg1 *= reg2
    265 reg1 += reg0
    267 rep reg3 224
    269 mem = 1858824029
    274 reg2 = mem
    276 cmp reg1 reg2
    278 reg0 ^= reg0
    280 jz 285
    282 reg0++
    284 exit
    285 mem = 7
    290 reg3 = mem
    292 reg1 ^= reg1
    294 hashp--    295 reg0 = hash[hashp]
    297 mem = 48
    302 reg2 = mem
    304 reg0 -= reg2
    306 mem = 10
    311 reg2 = mem
    313 cmp reg0 reg2
    315 jl 326
    317 mem = 7
    322 reg2 = mem
    324 reg0 -= reg2
    326 mem = 16
    331 reg2 = mem
    333 reg1 *= reg2
    335 reg1 += reg0
    337 rep reg3 294
    339 mem = 2143952328
    344 reg2 = mem
    346 cmp reg1 reg2
    348 reg0 ^= reg0
    350 jz 355
    352 reg0++
    354 exit
    355 mem = 7
    360 reg3 = mem
    362 reg1 ^= reg1
    364 hashp--    365 reg0 = hash[hashp]
    367 mem = 48
    372 reg2 = mem
    374 reg0 -= reg2
    376 mem = 10
    381 reg2 = mem
    383 cmp reg0 reg2
    385 jl 396
    387 mem = 7
    392 reg2 = mem
    394 reg0 -= reg2
    396 mem = 16
    401 reg2 = mem
    403 reg1 *= reg2
    405 reg1 += reg0
    407 rep reg3 364
    409 mem = 2386147433
    414 reg2 = mem
    416 cmp reg1 reg2
    418 reg0 ^= reg0
    420 jz 425
    422 reg0++
    424 exit
    425 mem = 7
    430 reg3 = mem
    432 reg1 ^= reg1
    434 hashp--    435 reg0 = hash[hashp]
    437 mem = 48
    442 reg2 = mem
    444 reg0 -= reg2
    446 mem = 10
    451 reg2 = mem
    453 cmp reg0 reg2
    455 jl 466
    457 mem = 7
    462 reg2 = mem
    464 reg0 -= reg2
    466 mem = 16
    471 reg2 = mem
    473 reg1 *= reg2
    475 reg1 += reg0
    477 rep reg3 434
    479 mem = 2597864506
    484 reg2 = mem
    486 cmp reg1 reg2
    488 reg0 ^= reg0
    490 jz 494
    492 reg0++
    494 exit
开始的一段代码判断了hash的字符在数字和大写字母'A'-'F'内。  
然后后面有四段非常相似的代码，每段代码均从hash的结尾开始取8个十六进制字符，转为十进制，最后与一个4字节的int进行比较。  
将这四个用来比较的int拿出来，反向连接起来即可得到flag。
附上vm中用到的struct：
    00000000 obj             struc ; (sizeof=0x28, mappedto_35)
    00000000 func_p          dd ?
    00000004 reg0            dd ?
    00000008 reg1            dd ?
    0000000C reg2            dd ?
    00000010 reg3            dd ?                    ; offset
    00000014 reg4            dd ?
    00000018 hash            dd ?                    ; offset
    0000001C field_1C        dd ?
    00000020 mem             dd ?                    ; offset
    00000024 vmcode          dd ?                    ; offset
    00000028 obj             ends
## CRYPTO
### fez
fez的本质就是一些异或操作，虽然不知道密钥，但是我们有两段密文和其中的一段明文，密文与密文异或可以消去密钥，再异或明文就可以得到另一段明文  
具体脚本如下
    import os
    def xor(a,b):
        assert len(a)==len(b)
        c=""
        for i in range(len(a)):
            c+=chr(ord(a[i])^ord(b[i]))
        return c
    def f(x,k):
        return xor(xor(x,k),7)
    def round(M,K):
        L=M[0:27]
        R=M[27:54]
        new_l=R
        new_r=xor(xor(R,L),K)
        return new_l+new_r
    def deround(M,K):
        L=M[0:27]
        R=M[27:54]
        new_l=L
        new_r=xor(xor(R,L),K)
        return new_r+new_l
    def fez(m,K):
        for i in K:
            m=round(m,i)
        return m
    def defez(m,K):
        for i in reversed(K):
            m=deround(m,i)
        return m    
    K=[]
    for i in range(7):
        K.append(os.urandom(27))
    m=open("flag","rb").read()
    assert len(m)> 8) & 0xFF)
        B0 += chr(data_len & 0xFF)
        AAD = '\x00' * 2  # [0] [1]
        AAD += chr(ord(inputpkt[0]) & 0x8F)  # [2]
        AAD += chr(ord(inputpkt[1]) & 0xC7)  # [3]
        AAD += inputpkt[4:4 + 3 * 6]  # [4]..[21]
        AAD += chr(ord(inputpkt[22]) & 0x0F)  # [22]
        AAD += '\x00'  # [23]
        if (is_a4):
            AAD += inputpkt[24:24 + 6]  # [24]..[29]
            if (is_qos):
                AAD += chr(ord(inputpkt[z - 2]) & 0x0F)  # [30]
                AAD += '\x00'  # [31]
                tmp = list(B0)
                tmp[1] = AAD[30]
                B0 = ''.join(tmp)
                tmp = list(AAD)
                tmp[1] = chr(22 + 2 + 6)
                AAD = ''.join(tmp)
            else:
                AAD += '\x00' * 2  # [30]..[31]
                tmp = list(B0)
                tmp[1] = '\x00'
                B0 = ''.join(tmp)
                tmp = list(AAD)
                tmp[1] = chr(22 + 6)
                AAD = ''.join(tmp)
        else:
            if (is_qos):
                AAD += chr(ord(inputpkt[z - 2]) & 0x0F)  # [24]
                AAD += '\x00'  # [25]
                tmp = list(B0)
                tmp[1] = AAD[24]
                B0 = ''.join(tmp)
                tmp = list(AAD)
                tmp[1] = chr(22 + 2)
                AAD = ''.join(tmp)