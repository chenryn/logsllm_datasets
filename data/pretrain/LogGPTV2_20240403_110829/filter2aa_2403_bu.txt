month$ = 8 
get_month1 PROC 
         movsxd  rax, ecx 
         lea     rcx, OFFSET FLAT:month1 
         mov     rax, QWORD PTR [rcx+rax*8] 
         ret     0 
get_month1 ENDP 
上述程序的功能如下： 
 第一条指令 MOVSXD 把 ECX 的 32 位整型数值、连同其符号扩展位(sign-extension)扩展为 64 位
整型数据，再存储于 RAX 寄存器中。ECX 存储的“月份”信息是 32 位整形数据。因为程序随后
还要进行 64 位运算，所以需要把输入变量转换为 64 位值。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
240 
逆向工程权威指南（上册） 
 然后函数把指针表的地址存储于 RCX 寄存器。 
 最后，函数的输入变量(month)的值乘以 8、再与指针表的地址相加。因为是 64 位系统的缘故，每
个地址（即指针）的数据需要占用 64 位（即 8 字节）。所以指针表中的每个元素都占用 8 字节空
间。因此，最终字符串的地址要加上 month*8。MOV 指令不仅完成了字符串地址的计算，而且还
完成了指针表的查询。在输入值为 1 时，函数将返回字符串“February”的指针地址。 
编译器的优化编译结果更为直接。 
指令清单 18.10  Optimizing GCC 4.9 x64 
        movsx   rdi, edi 
        mov     rax, QWORD PTR month1[0+rdi*8] 
        ret 
18.5.2  32 位 MSVC 
使用 32 位 MSVC 编译器编译上述程序可得如下所示的指令。 
指令清单 18.11  Optimizing MSVC 2013 x86 
_month$ = 8 
_get_month1 PROC 
  mov     eax, DWORD PTR _month$[esp-4] 
  mov     eax, DWORD PTR _month1[eax*4] 
  ret     0 
_get_month1 ENDP 
32 位程序就不用把输入值转化为 64 位数据了。此外，32 位系统的指针属于 4 字节数据，所以相关的
计算因子变为了 4。 
18.5.3 32 位 ARM 
ARM in ARM mode 
指令清单 18.12  Optimizing Keil 6/2013 (ARM mode) 
get_month1 PROC 
  LDR      r1,|L0.100| 
  LDR      r0,[r1,r0,LSL #2] 
  BX       lr 
  ENDP 
|L0.100| 
  DCD      ||.data|| 
  DCB      "January",0 
  DCB      "February",0 
  DCB      "March",0 
  DCB      "April",0 
  DCB      "May",0 
  DCB      "June",0 
  DCB      "July",0 
  DCB      "August",0 
  DCB      "September",0 
  DCB      "October",0 
  DCB      "November",0 
  DCB      "December",0 
  AREA ||.data||, DATA, ALIGN=2 
month1 
  DCD      ||.conststring|| 
  DCD      ||.conststring||+0x8 
  DCD      ||.conststring||+0x11 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
241 
  DCD      ||.conststring||+0x17 
  DCD      ||.conststring||+0x1d 
  DCD      ||.conststring||+0x21 
  DCD      ||.conststring||+0x26 
  DCD      ||.conststring||+0x2b 
  DCD      ||.conststring||+0x32 
  DCD      ||.conststring||+0x3c 
  DCD      ||.conststring||+0x44 
  DCD      ||.conststring||+0x4d 
数据表的首地址存储于 R1 寄存器。其余元素的指针地址则通过 LDR 指令现场计算。实参 month 在左
移 2 位之后与 R1 的值（表地址）相加，从而计算出地址表中的指针地址。此后，再用这个指针在 32 位地
址表中进行查询，把最终的字符串地址存储在 R0 寄存器里。 
Thumb 模式的 ARM 程序 
由于在 Thumb 模式里的 LDR 指令不能进行 LSL 运算，所以代码略长一些。 
get_month1 PROC 
  LSLS     r0,r0,#2 
  LDR      r1,|L0.64| 
  LDR      r0,[r1,r0] 
  BX       lr 
  ENDP 
18.5.4 ARM64 
指令清单 18.13  Optimizing GCC 4.9 ARM64 
get_month1: 
  adrp     x1, .LANCHOR0 
  add      x1, x1, :lo12:.LANCHOR0 
  ldr      x0, [x1,w0,sxtw 3] 
  ret 
.LANCHOR0 = . + 0 
  .type    month1, %object 
  .size    month1, 96 
month1: 
  .xword  .LC2 
  .xword  .LC3 
  .xword  .LC4 
  .xword  .LC5 
  .xword  .LC6 
  .xword  .LC7 
  .xword  .LC8 
  .xword  .LC9 
  .xword  .LC10 
  .xword  .LC11 
  .xword  .LC12 
  .xword  .LC13 
.LC2: 
  .string "January" 
.LC3: 
  .string "February" 
.LC4: 
  .string "March" 
.LC5: 
  .string "April" 
.LC6: 
  .string "May" 
.LC7: 
  .string "June" 
.LC8: 
  .string "July" 
.LC9: 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
242 
逆向工程权威指南（上册） 
  .string "August" 
.LC10: 
  .string "September" 
.LC11: 
  .string "October" 
.LC12: 
  .string "November" 
.LC13: 
  .string "December" 
表地址由 ADRP/ADD 指令对传送到 X1 寄存器。然后，单条 LDR 指令完成表查询的运算。它把 W0
寄存器（传递实参 month）的值左移 3 位（相当于乘以 8），将其进行有符号数扩展（sxtw 后缀的含义）并
与 X0 寄存器的值相加。通过表查询获取的 64 位运算结果最终存储在 X0 寄存器里。 
18.5.5 MIPS 
指令清单 18.14  Optimizing GCC 4.4.5 (IDA) 
get_month1: 
; load address of table into $v0: 
la       $v0, month1 
; take input value and multiply it by 4: 
sll      $a0, 2 
; sum up address of table and multiplied value: 
addu     $a0, $v0 
; load table element at this address into $v0: 
lw       $v0, 0($a0) 
; return 
jr       $ra 
or       $at, $zero ; branch delay slot, NOP 
.data # .data.rel.local 
.globl month1 
month1:         
.word aJanuary        
# "January" 
                   .word aFebruary       
# "February" 
                   .word aMarch          
# "March" 
                   .word aApril          
# "April" 
.word aMay            
# "May" 
.word aJune           
# "June" 
.word aJuly           
# "July" 
.word aAugust         
# "August" 
.word aSeptember      
# "September" 
.word aOctober        
# "October" 
.word aNovember       
# "November" 
.word aDecember       
# "December" 
.data # .rodata.str1.4 
aJanuary:        .ascii "January" 
aFebruary:       .ascii "February" 
aMarch:          .ascii "March" 
aApril:          .ascii "April" 
aMay:            .ascii "May" 
aJune:           .ascii "June" 
aJuly:           .ascii "July" 
aAugust:         .ascii "August" 
aSeptember:      .ascii "September" 
aOctober:        .ascii "October" 
aNovember:       .ascii "November" 
aDecember:       .ascii "December" 
18.5.6 数组溢出 
本例参数的取值范围是 0～11。如果输入值为 12，会发生什么情况？虽然查询表里没有对应的值，但
是程序还是会计算、取值并返回结果，只是返回值不可预料。如果其他函数访问这种超越数据边界的地址，
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 18 章  数    组 
243 
那么在读取字符串地址时可能引发程序崩溃。 
本文通过 MSVC 编译器生成一个 Win64 程序，然后使用 IDA 打开这个可执行程序，观察编译器的 linker
组件在数组后面存储了哪些信息： 
指令清单 18.15  在 IDA 里观察问题程序 
off_140011000  
dq offset aJanuary_1  ; DATA XREF: .text:0000000140001003 
; "January" 
dq offset aFebruary_1  
; "February" 
dq offset aMarch_1   
; "March" 
dq offset aApril_1   
; "April" 
dq offset aMay_1  
; "May" 
dq offset aJune_1  
; "June" 
dq offset aJuly_1  
; "July" 
dq offset aAugust_1   
; "August" 
dq offset aSeptember_1  
; "September" 
dq offset aOctober_1   
; "October" 
dq offset aNovember_1  
; "November" 
dq offset aDecember_1  
; "December" 
aJanuary_1   
db 'January',0   
; DATA XREF: sub_140001020+4 
; .data:off_140011000 
aFebruary_1  
db 'February',0  
; DATA XREF: .data:0000000140011008 
align 4 
aMarch_1  
db 'March',0  
; DATA XREF: .data:0000000140011010 
align 4 
aApril_1  
db 'April',0  
; DATA XREF: .data:0000000140011018 
本例的程序很小，所以数据段里的信息以月份名称为主，没有什么其他信息。但是应当注意的是，linker
可能在实际生成的程序中安插“任何信息”。 
输入值为 12 时会发生什么情况？程序应当返回数组首地址之后的第 13 个元素。我们一起来看 CPU 是
如何处理第“13”个元素的那个 64 位值： 
指令清单 18.16  Executable file in IDA 
off_140011000  
dq offset qword_140011060 
; DATA XREF: .text:0000000140001003 
dq offset aFebruary_1  
; "February" 
dq offset aMarch_1   
; "March" 
dq offset aApril_1   
; "April" 
dq offset aMay_1  
; "May" 
dq offset aJune_1  
; "June" 
dq offset aJuly_1  
; "July" 
dq offset aAugust_1   
; "August" 
dq offset aSeptember_1  
; "September" 
dq offset aOctober_1   
; "October" 
dq offset aNovember_1  
; "November" 
dq offset aDecember_1  
; "December" 
qword_140011060 dq 797261756E614Ah ; DATA XREF: sub_140001020+4 
; .data:off_140011000 
aFebruary_1 db 'February',0 ; DATA XREF: .data:0000000140011008 
align 4 
aMarch_1 db 'March',0  
; DATA XREF: .data:0000000140011010 
那个地址的值是 0x797261756E614A。假如某个函数以字符串指针的格式访问这个地址，那么整个程
序多半会立即崩溃。毕竟这个值不太会是一个有效地址。 
数组溢出保护 
如果指望调用函数的用户能够保证参数不超出正常的取值范围，那么这个程序员真的算得上是很傻很天真
了。在编程领域里，成熟的应用程序应当具备“Fail Early, Fail Loudly”或“Fail-fast”这类的早期错误处理功能。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
244 
逆向工程权威指南（上册） 
C/C++ assertions 就是处理手段之一。我们可以修改源程序，令其验证输入参数是否在预期范围之内。 
指令清单 18.17  assert() added 
const char* get_month1_checked (int month) 
{ 
  assert (month<12); 
  return month1[month]; 
}; 
只要在函数启动的时候调用一个验证参数有效性的 assert()函数，那么当输入值在取值区间之外时，程
序将进行异常处理。 
指令清单 18.18  Optimizing MSVC 2013 x64 
$SG3143 DB   
'm', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'h', 00H, '.', 00H 
  DB   
'c', 00H, 00H, 00H 
$SG3144 DB   
'm', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'h', 00H, '<', 00H 
  DB   
'1', 00H, '2', 00H, 00H, 00H 
month$ = 48 
get_month1_checked PROC 
$LN5: 
  push     rbx 
  sub      rsp, 32 
  movsxd   rbx, ecx 
  cmp      ebx, 12 
  jl       SHORT $LN3@get_month1 
  lea      rdx, OFFSET FLAT:$SG3143 
  lea      rcx, OFFSET FLAT:$SG3144 
  mov      r8d, 29 
  call     _wassert 
$LN3@get_month1: 
  lea      rcx, OFFSET FLAT:month1 
  mov      rax, QWORD PTR [rcx+rbx*8] 