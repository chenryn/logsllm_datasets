        }
}
```
:::
::: section
::: titlepage
# [⁠]{#mpio_configfile.html#config_file_devices}4.5. 配置文件设备 {.title}
:::
[]{#mpio_configfile.html#idm140613846318848
.indexterm}[]{#mpio_configfile.html#idm140613846317408
.indexterm}[]{#mpio_configfile.html#idm140613846315968
.indexterm}[]{#mpio_configfile.html#idm140613846313888 .indexterm}
::: para
[表 4.3
"设备属性"](#mpio_configfile.html#tb-multipath_attributes){.xref}
显示您可以为 `multipath.conf`{.filename} 配置文件 `devices`{.literal}
部分的每个独立储存设备能设置的属性。DM Multipath
会使用这些属性，除非它们被 `multipath.conf`{.filename} 文件
`multipaths`{.literal}
部分为包含该设备的路径所指定的属性覆盖。这些属性会覆盖
`multipath.conf`{.filename} 文件 `defaults`{.literal} 部分设定的属性。
:::
::: para
多路径配置中默认包含许多支持 multipath
的设备。如需了解默认配置值（包括支持的设备）的相关信息，请运行以下命令之一。
:::
``` screen
# multipathd show config
# multipath -t 
```
::: para
您可能不需要为这些设备修改默认值，但如果您想要修改，可以通过在配置文件中添加条目来覆盖默认值。您可以为设备复制
`multipathd show config`{.command}
命令显示的设备配置默认值，并覆盖您想要修改的值。
:::
::: para
如需在配置文件的这部分添加没有默认自动配置的设备，您需要设置
`vendor`{.literal} 和 `product`{.literal} 参数。您能在
`/sys/block/device_name/device/vendor`{.filename} 和
`/sys/block/device_name/device/model`{.filename} 中找到这些值，其中
*device_name* 是要进行多路径操作的设备，示例如下：
:::
``` screen
# cat /sys/block/sda/device/vendor
WINSYS  
# cat /sys/block/sda/device/model
SF2372
```
::: para
要指定的附加参数要视具体设备而定。如果设备是主动/主动模式，您通常不需要设置附加参数。您可能想要将
`path_grouping_policy`{.literal} 设为
`multibus`{.literal}。其它您可能需要设定的参数有
`no_path_retry`{.literal} 和 `rr_min_io`{.literal}，详见 [表 4.3
"设备属性"](#mpio_configfile.html#tb-multipath_attributes){.xref}。
:::
::: para
如果设备是主动/被动模式，但它会自动将路径切换到被动路径，那么您需要将检查器功能改为不需向路径发送
I/O
来测试其是否工作（否则，您的设备将一直进行出错冗余）的功能。这几乎意味着您将
`path_checker`{.literal} 设为 `tur`{.literal}。这对所有支持 Test Unit
Ready 命令的 SCSI 设备都适用。
:::
::: para
如果该设备需要一个特殊的命令切换路径，那么为多路径配置此设备需要硬件处理器内核模块。当前的硬件处理器是
`emc`{.literal}。如果这样还不能满足您的设备，则您可能无法为多路径配置该设备。
:::
[]{#mpio_configfile.html#idm140613785733136
.indexterm}[]{#mpio_configfile.html#idm140613785731376
.indexterm}[]{#mpio_configfile.html#idm140613785730096
.indexterm}[]{#mpio_configfile.html#idm140613785728336
.indexterm}[]{#mpio_configfile.html#idm140613785727056
.indexterm}[]{#mpio_configfile.html#idm140613785725296
.indexterm}[]{#mpio_configfile.html#idm140613826468400
.indexterm}[]{#mpio_configfile.html#idm140613826466640
.indexterm}[]{#mpio_configfile.html#idm140613826465360
.indexterm}[]{#mpio_configfile.html#idm140613826463600
.indexterm}[]{#mpio_configfile.html#idm140613826462320
.indexterm}[]{#mpio_configfile.html#idm140613849064944
.indexterm}[]{#mpio_configfile.html#idm140613849063664
.indexterm}[]{#mpio_configfile.html#idm140613849061904
.indexterm}[]{#mpio_configfile.html#idm140613849060624
.indexterm}[]{#mpio_configfile.html#idm140613849058864
.indexterm}[]{#mpio_configfile.html#idm140613849057584
.indexterm}[]{#mpio_configfile.html#idm140613824707376
.indexterm}[]{#mpio_configfile.html#idm140613824706096
.indexterm}[]{#mpio_configfile.html#idm140613824704336
.indexterm}[]{#mpio_configfile.html#idm140613824703056
.indexterm}[]{#mpio_configfile.html#idm140613824701296
.indexterm}[]{#mpio_configfile.html#idm140613824700016
.indexterm}[]{#mpio_configfile.html#idm140613835026256
.indexterm}[]{#mpio_configfile.html#idm140613835024976
.indexterm}[]{#mpio_configfile.html#idm140613835023216
.indexterm}[]{#mpio_configfile.html#idm140613835021936
.indexterm}[]{#mpio_configfile.html#idm140613835020176
.indexterm}[]{#mpio_configfile.html#idm140613835018896
.indexterm}[]{#mpio_configfile.html#idm140613842832624
.indexterm}[]{#mpio_configfile.html#idm140613842831344
.indexterm}[]{#mpio_configfile.html#idm140613842829584
.indexterm}[]{#mpio_configfile.html#idm140613842828304
.indexterm}[]{#mpio_configfile.html#idm140613842826544
.indexterm}[]{#mpio_configfile.html#idm140613853862528
.indexterm}[]{#mpio_configfile.html#idm140613853860768
.indexterm}[]{#mpio_configfile.html#idm140613853859488
.indexterm}[]{#mpio_configfile.html#idm140613853857728
.indexterm}[]{#mpio_configfile.html#idm140613853856448
.indexterm}[]{#mpio_configfile.html#idm140613853854688
.indexterm}[]{#mpio_configfile.html#idm140613855215792
.indexterm}[]{#mpio_configfile.html#idm140613855214032
.indexterm}[]{#mpio_configfile.html#idm140613855212752
.indexterm}[]{#mpio_configfile.html#idm140613855210992
.indexterm}[]{#mpio_configfile.html#idm140613855209712
.indexterm}[]{#mpio_configfile.html#idm140613841392256 .indexterm}
::: table
[⁠]{#mpio_configfile.html#tb-multipath_attributes}
**表 4.3. 设备属性**
::: table-contents
+----------------------+-----------------------------------------------+
| 属性                 | 描述                                          |
+======================+===============================================+
| ` vendor `{.literal} | 指定 `device`{.literal}                       |
|                      | 采用的存储设备的零售商名称，例如              |
|                      | `COMPAQ`{.literal}。                          |
+----------------------+-----------------------------------------------+
| `                    | 指定 `device`{.literal}                       |
|  product `{.literal} | 属性使用的存储设备产品名，比如                |
|                      | `HSV110 (C) COMPAQ`{.literal}。               |
+----------------------+-----------------------------------------------+
| `                    | 指定存储设备的产品修订识别程序。              |
| revision `{.literal} |                                               |
+----------------------+-----------------------------------------------+
| ` product_b          | 根                                            |
| lacklist `{.literal} | 据产品指定用来将设备列入黑名单的正则表达式。  |
+----------------------+-----------------------------------------------+
| ` alia               | 这个设备类型使用的                            |
| s_prefix `{.literal} | `user_friendly_names`{.literal}               |
|                      | 前缀，而不是默认的\"mpath\"。                 |
+----------------------+-----------------------------------------------+
| ` hardware           |   --------------------------------------      |
| _handler `{.literal} | --------------------------------------------- |
|                      |   指定将在切换路径组群或者处理 I/O 错误       |
|                      | 时用来执行硬件具体动作的模块。可能的值包括：  |
|                      |   `1                                          |
|                      |  emc`{.literal}：EMC 存储阵列的硬件处理程序。 |
|                      |   `1 alua                                     |
|                      | `{.literal}：SCSI-3 ALUA 阵列的硬件处理程序。 |
|                      |   `1 hp_sw                                    |
|                      | `{.literal}：Compaq/HP 控制器的硬件处理程序。 |
|                      |   `1 rdac`{.lite                              |
|                      | ral}：LSI/Engenio RDAC 控制器的硬件处理程序。 |
|                      |   --------------------------------------      |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path_groupin       |   -------------------                         |
| g_policy `{.literal} | --------------------------------------------- |
|                      |   指定用于                                    |
|                      | 未指定路径的默认路径分组策略，可能的值包括：  |
|                      |                                               |
|                      | `failover`{.literal} = 每个优先组群有一个路径 |
|                      |   `multi                                      |
|                      | bus`{.literal} = 所有有效路径在一个优先组群中 |
|                      |   `group_by_serial`                           |
|                      | {.literal} = 每个检测到的系列号有一个优先组群 |
|                      |   `group_by_p                                 |
|                      | rio`{.literal} = 每个路径优先值有一个优先组群 |
|                      |   `group_by_node_n                            |
|                      | ame`{.literal} = 每个目标节点名有一个优先组群 |
|                      |   -------------------                         |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path_              |   ----------------------------------------    |
| selector `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定用来决定下一个                          |
|                      |  I/O 操作所使用路径的默认算法。可能的值包括： |
|                      |   `round-robin 0`{.literal}：在路径组中       |
|                      | 循环每个路径，向每个路径发送同样数量的 I/O。  |
|                      |   `queue-length 0`{.literal}：将下一          |
|                      | 组 I/O 发送到具有最少未处理 I/O 请求的路径。  |
|                      |   `service-time 0`{.literal}：将下一组 I      |
|                      | /O 发送到具有最短预计服务时间的路径，这是由未 |
|                      | 处理 I/O 的总量除以每个路径的相对流量决定的。 |
|                      |   ----------------------------------------    |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` path               |   -----------------------------------         |
| _checker `{.literal} | --------------------------------------------- |
|                      |   指                                          |
|                      | 定用于决定路径状态的默认方法，可能的值包括：  |
|                      |   `r                                          |
|                      | eadsector0`{.literal}：读取该设备的第一扇区。 |
|                      |   `tur`{.literal}：                           |
|                      | 在该设备中执行 `TEST UNIT READY`{.command}。  |
|                      |   `emc_clariion`{.literal}：查询 EM           |
|                      | C Clariion 具体 EVPD 页面 0xCO 以便决定路径。 |
|                      |   `hp_sw`{.literal}：为使用 Ac                |
|                      | tive/Standby 固件的 HP 存储阵列检查路径状态。 |
|                      |   `rdac`{.literal}：                          |
|                      | 为 LSI/Engenio RDAC 存储控制器检查路径状态。  |
|                      |   `direc                                      |
|                      | tio`{.literal}：使用直接 I/O 读取第一个扇区。 |
|                      |   -----------------------------------         |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    |   ----------------------                      |
| features `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   多路径设                                    |
|                      | 备的默认额外功能，使用以下格式：\"*number_of  |
|                      | _features_plus_arguments* *feature1* \...\"。 |
|                      |   `features`{.literal} 可能的值包括：         |
|                      |   `queue_if_no_p                              |
|                      | ath`{.literal}，与将 `no_path_retry`{.literal |
|                      | } 设置为 `queue`{.literal} 相同。欲了解使用此 |
|                      | 功能可能出现的问题，请参阅〈[第 5.7 节 "有 qu |
|                      | eue_if_no_path 功能的问题"](#MPIO_admin-troub |
|                      | leshoot.html#queueifnopath_issues){.xref}〉。 |
|                      |   `retain_attached_hw_ha                      |
|                      | ndler`{.literal}：如果此参数被设为 `yes`{.lit |
|                      | eral}，并且 SCSI 层已经为路径设备附加硬件处理 |
|                      | 程序，multipath 将不会强制设备使用 `multipat  |
|                      | h.conf`{.filename} 文件指定的 `hardware_handl |
|                      | er`{.literal}。如果 SCSI 层未附加硬件处理程序 |
|                      | ，multipath 将会继续使用配置的硬件处理程序。  |
|                      |                                               |
|                      | `pg_init_retries n`{.literal}：路径组初始化重 |
|                      | 试，失败前最多重试 *n* 次，1 \<= *n* \<= 50。 |
|                      |   `pg_init                                    |
|                      | _delay_msecs n`{.literal}：在路径组初始化重试 |
|                      | 的间隔，等待 *n* 毫秒，0 \<= *n* \<= 60000。  |
|                      |   ----------------------                      |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` prio `{.literal}   |   ---------------                             |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   指定要获得路径优先值所需调用的默认程序      |
|                      | 及参数。例如：SPC-3 中的 ALUA 字节提供了一个  |
|                      | 可改变的 `prio`{.literal} 值。可能的值包括：  |
|                      |   `const`{.literal}：为所有路径设定优先权 1。 |
|                      |                                               |
|                      |  `emc`{.literal}：为 EMC 阵列生成路径优先权。 |
|                      |   `alua`{.liter                               |
|                      | al}：根据 SCSI-3 ALUA 设置生成路径有限级。从  |
|                      | Red Hat Enterprise Linux 7.3 开始，如果在设备 |
|                      | 配置中指定 `prio "alua exclusive_pref_bit"`{. |
|                      | literal}，多路径将生成包含只使用 `pref`{.lite |
|                      | ral} 字节集的路径组，并为该组设定最高优先级。 |
|                      |   `ont                                        |
|                      | ap`{.literal}：为 NetApp 阵列生成路径优先权。 |
|                      |   `rdac`{.literal}：                          |
|                      | 为 LSI/Engenio RDAC 控制程序生成路径优先权。  |
|                      |   `hp_sw`{.literal}：为 Compaq                |
|                      | /HP 控制程序在激活/等待模式中生成路径优先权。 |
|                      |   `hds`{.literal}：为                         |
|                      |  Hitachi HDS Modular 存储阵列生成路径优先权。 |
|                      |   ---------------                             |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| `                    |   -----------------------------------------   |
| failback `{.literal} | --------------------------------------------- |
|                      | --------------------------------------------- |
|                      |   管理路径组群出错切换。                      |
|                      |   `immediate`{.literal} 值指                  |
|                      | 定立即恢复到包含活跃路径的最高级别路径组群。  |
|                      |   `manual`{.literal} 值指定不需要立           |
|                      | 即恢复，只有在操作者干预的情况下会发生恢复。  |
|                      |   `followover`{.literal} 值指定当路径组的第   |
|                      | 一个路径成为活跃路径时应执行自动恢复。这可让  |
|                      | 节点在另一个节点请求故障修复时不会自动恢复。  |
|                      |   大于 0 的数字值指定推迟出错切换，以秒表示。 |
|                      |   -----------------------------------------   |
|                      | --------------------------------------------- |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` r                  | 如果将其设为                                  |
| r_weight `{.literal} | `priorities`{.literal}，就不会在调用          |
|                      | `selector`{.literal}                          |
|                      | 选择下一个路径前向路径发送                    |
|                      | `rr_min_io`{.literal} 请求，而是由            |
|                      | `rr_min_io`{.literal}                         |
|                      | 乘以路径优先权决定发送的请求数，即由          |
|                      | `prio`{.literal} 功能决定。如果将其设定为     |
|                      | `u                                            |
|                      | niform`{.literal}，则所有路径都有相同的加权。 |
+----------------------+-----------------------------------------------+
| ` no_pa              |   -----------------------                     |
| th_retry `{.literal} | --------------------------------------------- |
|                      |   此属性的数字值指定了系                      |
|                      | 统在禁用队列前，应该尝试使用失败路径的次数。  |
|                      |   值为                                        |
|                      |  `fail`{.literal} 意味着立即失败，无需排队。  |
|                      |   值为 `qu                                    |
|                      | eue`{.literal} 意味着路径固定前不会停止排队。 |
|                      |   -----------------------                     |
|                      | --------------------------------------------- |
+----------------------+-----------------------------------------------+
| ` r                  | 指定                                          |
| r_min_io `{.literal} | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O 请求数。这个设置值用于运行内核为 2.6.31   |
|                      | 之前的系统。使用新版本的系统应使用            |
|                      | `rr_min_io_rq`{.literal}。默认值为 1000。     |
+----------------------+-----------------------------------------------+
| ` rr_m               | 使用 request-based device-mapper-multipath    |
| in_io_rq `{.literal} | 指定                                          |
|                      | 切换到当前路径组的下一个路径前路由到该路径的  |
|                      | I/O                                           |
|                      | 请求数。                                      |
|                      | 这个设置值用于运行当前内核的系统。在使用内核  |
|                      | 2.6.31 版本之前的系统应使用                   |
|                      | `rr_min_io`{.literal}。默认值为 1。           |
+----------------------+-----------------------------------------------+
| ` fast_io_           | 在 FC                                         |
| fail_tmo `{.literal} | 远程                                          |
|                      | 端口发现问题后，无法在那个远程端口设备中执行  |
|                      | I/O 前 SCSI 层要等待的时间。默认值应小于      |
|                      | `dev_loss_tmo`{.literal} 值。将其设定为       |
|                      | `off`{.literal} 则会禁用超时。                |
+----------------------+-----------------------------------------------+
| ` dev_               | 在 FC                                         |
| loss_tmo `{.literal} | 远程端口发现问题后，到从该系统中删除它之前    |
|                      | SCSI                                          |
|                      | 层                                            |
|                      | 要等待的时间。将其设定为无限，则会将其设定为  |
|                      | 2147483647 秒，或者 68 年。                   |
+----------------------+-----------------------------------------------+
| ` flush_on_          | 如果被设为                                    |
| last_del `{.literal} | `yes`{.literal}，当设备的                     |
|                      | 最后一条路径被删除时，`multipathd`{.command}  |
|                      | 守护程序将会禁用队列。                        |
+----------------------+-----------------------------------------------+
| ` user_friend        | 如果将其设为                                  |
| ly_names `{.literal} | `yes`{.literal}，即指定该系统应该使用文件     |
|                      | `/etc/multipath/bindings`{.filename}          |
|                      | 为该多路径分配一个持久且唯一的别名，格式为    |
|                      | `mpath`{.literal}*`n`*。如果设定为            |
|                      | `no`{.literal}，即指定该系统应使用 WWID       |
|                      | 作为该多路径的别名。在这两                    |
|                      | 种情况下，您在这里指定的数值将被您在配置文件  |
|                      | `multipaths`{.literal}                        |
|                      | 部分指定的具体设备别名覆盖。默认值为          |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` retain_attached_hw | 如果此参数被设为 `yes`{.literal}，并且 SCSI   |
| _handler `{.literal} | 层已经为路径设备附加了硬件处理程序，那么      |
|                      | multipath 将不会强制设备使用                  |
|                      | `multipath.conf`{.filename} 文件指定的        |
|                      | `hardware_handler`{.literal}。如果 SCSI       |
|                      | 层未附加硬件处理程序，multipath               |
|                      | 将会继续使用其配置的硬件处理程序。默认值为    |
|                      | `no`{.literal}。                              |
+----------------------+-----------------------------------------------+
| ` det                | 如果被设为 `yes`{.literal}，multipath         |
| ect_prio `{.literal} | 将会首先检查设备是否支持                      |
|                      | ALUA。若支持，将会自动为设备分配              |
|                      | `alua`{.literal}                              |
|                      | 排序器；若不支持，将会按惯例确定排序器。      |
+----------------------+-----------------------------------------------+
| ` uid_a              | 提供唯一路径标识符。                          |
| ttribute `{.literal} |                                               |
+----------------------+-----------------------------------------------+
| ` delay_watc         | （从 Red Hat Enterprise Linux Release 7.2     |
| h_checks `{.literal} | 开始）如果将其设定为大于 0                    |