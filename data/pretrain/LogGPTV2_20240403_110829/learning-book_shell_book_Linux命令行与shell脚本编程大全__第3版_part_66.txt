The quick green elephant
jumpa over the lazy cat.
The quick green elephant 
jumpa over the lazy cat.
The quick green elephant
jumpa over the lazy cat.
The quick green elephant jumps over the lazy cat.
必须记住，要在封尾单引号所在行结束命令。bash shell一旦发现了封尾的单引号，就会执行
命令。开始后，sed命令就会将你指定的每条命令应用到文本文件中的每一行上。
3.从文件中读取编辑器命令
最后，如果有大量要处理的sec命令，那么将它们放进一个单独的文件中通常会更方便一些。
可以在sed命令中用-f选项来指定文件。
---
## Page 419
t0
第19章初识sed和gawk
s/brovn/green/
α/fox/elephant/
α/dog/cat:/
S sed -f scriptl.sed datal.txt
The qulck green elephant
junpa over the lazy cat.
The qulck green elephant
Jumps over the lazy cat ,
The qulck green elephant Junpa over the lazy cat.
Jumpa over the lazy cat.
在这种情况下，不用在每条命令后面放一个分号。sed编辑器知道每行都是一条单独的命令。
跟在命令行输人命令一样，sed编辑器会从指定文件中读取命令，并将它们应用到数据文件中的
每一行上。
窍门我们很容易就会把sed编辑器脚本文件与bash shell脚本文件搞混。为了避免达种情况，可
以使用.sed作为sed脚本文件的扩展名。
19.2节将继续介绍另外一些便于处理数据的sed编辑器命令。在这之前，我们先快速了解一下
其他的Linux数据编辑器。
19.1.2gawk程序
虽然sed编辑器是非常方便自动修改文本文件的工具，但其也有自身的限制。通常你需要一
个用来处理文件中的数据的更高级工具，它能提供一个类编程环境来修改和重新组织文件中的数
据。这正是gawk能够做到的。
说明在所有的发行版中都没有默认安装gawk程序。如果你所用的Linux发行版中没有包含
gawk，请参考第9章中的内容来安装gawk包。
gawk程序是Unix中的原始awk程序的GNU版本。gawk程序让流编辑迈上了一个新的台阶，它
提供了一种编程语言而不只是编辑器命令。在gawk编程语言中，你可以做下面的事情：
口定义变量来保存数据；
口使用算术和字符串操作符来处理数据；
口使用结构化编程概念（比如if-then语句和循环）来为数据处理增加处理逻辑；
口通过提取数据文件中的数据元系，将其重新排列或格式化，生成格式化报告。
gawk程序的报告生成能力通常用来从大文本文件中提取数据元素，并将它们格式化成可读的
报告。其中最完美的例子是格式化日志文件。在日志文件中找出错误行会很难，gawk程序可以让
你从日志文件中过滤出需要的数据元素，然后你可以将其格式化，使得重要的数据更易于阅读。
---
## Page 420
19.1文本处理
405
1.gawk命令格式
gawk程序的基本格式如下：
gavk options program file
表19-2显示了gawk程序的可用选项。
表19-2gawk选项
选
描
述
-F f8
指定行中划分数据字段的字段分隔符
- fi1e
从指定的文件中读取程序
=v var=value
定义gam%程序中的一个变量及其默认值
-f 
指定要处理的数据文件中的最大字段数
- 
指定数据文件中的最大数据行数
f keyvord
指定gawk的兼容模式或警告等级
19
命令行选项提供了一个简单的途径来定制gawk程序中的功能。我们会在探索gawk时进一步
了解这些选项。
gawk的强大之处在于程序脚本。可以写脚本来读取文本行的数据，然后处理并显示数据，创
建任何类型的输出报告。
2.从命令行读取程序脚本
gawk程序脚本用一对花括号来定义。你必须将脚本命令放到两个花括号（{1）中。如果你
错误地使用了圆括号来包含gawk脚本，就会得到一条类似于下面的错误提示。
{ip[zoy oTta quxd) 1xxe
gawk:^ syntax error
由于gawk命令行假定脚本是单个文本字符串，你还必须将脚本放到单引号中。下面的例子
在命令行上指定了一个简单的gawk程序脚本：
{=1p[aon otto quxd}. xxe5S
这个程序脚本定义了一个命令：print命令。这个命令名副其实：它会将文本打印到sTDOUT。
如果尝试运行这个命令，你可能会有些失望，因为什么都不会发生。原因在于没有在命令行上指
定文件名，所以gawk程序会从STDIN接收数据。在运行这个程序时，它会一直等待从STDIN输人
的文本。
如果你输人一行文本并按下回车键，gawk会对这行文本运行一遍程序脚本。跟sed编辑器一
样，gawk程序会针对数据流中的每行文本执行程序脚本。由于程序脚本被设为显示一行固定的文
本字符串，因此不管你在数据流中输人什么文本，都会得到同样的文本输出。
{=1paom otto uad}. xxe5S
This is a test
Hello Korld!
he1l1o
---
## Page 421
406
第19章初识sed和gawk
Hello Horld:
This ia another test
Hello Horld!
要终止这个gawk程序，你必须表明数据流已经结束了。bash shell提供了一个组合键来生成
EOF（End-of-File）字符。Ctrl+D组合键会在bash中产生一个EOF字符。这个组合键能够终止该gawk
程序并返回到命令行界面提示符下。
3.使用数据字段变量
gawk的主要特性之一是其处理文本文件中数据的能力。它会自动给一行中的每个数据元素分
配一个变量。默认情况下，gawk会将如下变量分配给它在文本行中发现的数据字段：
s0代表整个文本行；
口$1代表文本行中的第1个数据字段；
口$2代表文本行中的第2个数据字段；
口Sn代表文本行中的第r个数据字段。
在文本行中，每个数据字段都是通过宇段分隔特划分的。gawk在读取一行文本时，会用预定
义的字段分隔符划分每个数据字段。gawk中默认的字段分隔符是任意的空白字符（例如空格或制
表符）
在下面的例子中，gawk程序读取文本文件，只显示第1个数据字段的值。
S cat data2.txt
Tvo llnes of test text.
One llne of test text.
Three lines of test text.
 gawk '{print $1}' data2.txt
One
Tvo
Three
$
该程序用s1字段变量来仅显示每行文本的第1个数据字段。
如果你要读取采用了其他字段分隔符的文件，可以用-F选项指定。
 gawk -F:*{print $1)+/ete/passwd
bin
root
daemon
adn
1p
sync
shutdown
ha1t
na11
[ - . . ]
这个简短的程序显示了系统中密码文件的第1个数据字段。由于/etc/passwd文件用冒号来分隔
数字字段，因而如果要划分开每个数据元素，则必须在gawk选项中将冒号指定为字段分隔符。
---
## Page 422
19.1文本处理
407
4.在程序脚本中使用多个命令
如果一种编程语言只能执行一条命令，那么它不会有太大用处。gawk编程语言允许你将多条
命令组合成一个正常的程序。要在命令行上的程序脚本中使用多条命令，只要在命令之间放个分
号即可。
My name is Christine
第一条命令会给字段变量s4赋值。第二条命令会打印整个数据字段。注意，gawk程序在输
出中已经将原文本中的第四个数据字段替换成了新值。
也可以用次提示符一次一行地输人程序脚本命令。
Sgaxk ·{
> $4="Christine"
> print $0}*
19
ty name is Christine
在你用了表示起始的单引号后，bashshell会使用次提示符来提示你输人更多数据。你可以每
次在每行加一条命令，直到输人了结尾的单引号。因为没有在命令行中指定文件名，gawk程序会
从STDIN中获得数据。当运行这个程序的时候，它会等着读取来自STDIN的文本。要退出程序，
只需按下Ctrl+D组合键来表明数据结束。
5.从文件中读取程序
跟sed编辑器一样，gawk编辑器允许将程序存储到文件中，然后再在命令行中引用。
S cat script2.gawk
(print $1 **s hone directory is * $6)
S gawk -F1 -f script2.gawk /etc/passud
root's bome directory is /root
daemon*s home direetory is /sbin
bin's home directory is /bin
adn's home directory is /var/adn.
lp′s hone directory is /var/egool/lpd
Christine′s bome directory is /home/Christine
[ - -+ J
Tinothy*s hone directory is /home/Tinothy
Samantha′s home directory is /home/Sanantha
script2.gawk程序脚本会再次使用print命令打印/etc/passwd文件的主目录数据字段（字段变
量s6），以及useria数据字段（字段变量s1）。
可以在程序文件中指定多条命令。要这么做的话，只要一条命令放一行即可，不需要用分号。
S cat script3.gawk
text - *'s home directory is *
print $1 text $6
---
## Page 423
408
第19章初识sed和gawk
(
root*a hone Girectory la /root
S gawk -F: -f script3-gawk /etc/passvd
bin'α home directory la /bin 
daemon*α hone dlrectory iα /abln
adn's bome Girectory La /var/adn
1p*a home Glrectozy 1α /vax/apool/1pd
Chziatine*α hone directory la /home/Chriatine
[ - .. ]
Samantha*α home GLrectory La /home/Samantha
Plmothy'a home dlrectory Le /hone/Tinothy
script3.gawk程序脚本定义了一个变量来保存print命令中用到的文本字符串。注意，gawk
程序在引用变量值时并未像shell脚本一样使用关元符。
6.在处理数据前运行脚本
gawk还允许指定程序脚本何时运行。默认情况下，gawk会从输入中读取一行文本，然后针
对该行的数据执行程序脚本。有时可能需要在处理数据前运行脚本，比如为报告创建标题。BEGIN
关键字就是用来做这个的。它会强制gawk在读取数据前执行BEGIN关键字后指定的程序脚本。
这次print命令会在读取数据前显示文本。但在它显示了文本后，它会快速退出，不等待任
何数据。如果想使用正常的程序脚本中处理数据，必须用另一个脚本区域来定义程序。
S cat data3.txt
L1ne 2
L1ne 1
L1ne 3
 gawk 'BEGIN (print *The data3 File Contents:*)
$
>{print $o)' data3.txt
The data3 Pile Contents:
L1ne 1
L1ne 2
L1ne 3
在gawk执行了BEGIN脚本后，它会用第二段脚本来处理文件数据。这么做时要小心，两段
脚本仍然被认为是gawk命令行中的一个文本字符串。你需要相应地加上单引号。
7.在处理数据后运行脚本
与BEGIN关键字类似，END关键字允许你指定一个程序脚本，gawk会在读完数据后执行它。
 gawk 'BEGIN (print *The data3 File Contents:*)
> END {print "End of File*)' data3.txt
>{print $o}
The data3 F1le Contents:
L1ne 1
---
## Page 424
19.1文本处理
409
Line 2
Line 3
End of F11e
当gawk程序打印完文件内容后，它会执行END脚本中的命令。这是在处理完所有正常数据
后给报告添加页脚的最佳方法。
可以将所有这些内容放到一起组成一个漂亮的小程序脚本文件，用它从一个简单的数据文件
中创建一份完整的报告。
S cat script4.gawk
BEGIN(
pr1nt
:*The latest 1ist of users and shella*
pr1nt
* UserID \t Shel1*
pr1nt
FS=* : *
19
print $1 *
\t *$7
END{
print *Thia concludea the llating
这个脚本用BEGIN脚本来为报告创建标题。它还定义了一个叫作FS的特殊变量。这是定义
字段分隔符的另一种方法。这样你就不用依靠脚本用户在命令行选项中定义字段分隔符了。
下面是这个gawk程序脚本的输出（有部分删节）。
S gawk -f script4.gawk /etc/passvd
The latest list of users and she1l1s
UserID
She11
bin
root
/ebin/nologin
/bin/bash
uosaep
/ebin/no1ogin
[. . .]
Christine
/bin/bash
mysg]
/bin/bash
Sanantha
/bin/bash
This coneludes the listing
Tinothy
/bin/bash
与预想的一样，BEGIN脚本创建了标题，程序脚本处理特定数据文件（/etc/passwd）中的信
息，END脚本生成页脚。
这个简单的脚本让你小试了一把gawk的强大威力。第22章介绍了另外一些编写gawk脚本时
的简单原则，以及一些可用于gawk程序脚本中的高级编程概念。学会了它们之后，就算是面对最
晦涩的数据文件，你也能够创建出专业范儿的报告。
---
## Page 425
410第19章初识sed和gawk
19.2sed编辑器基础
成功使用sed编辑器的关键在于掌握其各式各样的命令和格式，它们能够帮助你定制文本编