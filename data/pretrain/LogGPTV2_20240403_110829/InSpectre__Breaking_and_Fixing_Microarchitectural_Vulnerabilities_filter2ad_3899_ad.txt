tive and non-speculative execution of a microinstruction.
From state Speculated, a microinstruction can: (a) roll back to
Decoded (if the predicted values were wrong); (b) speculatively
fetch the next ISA instruction to be executed, thus moving to state
Speculatively Fetched, doubled dashed circle) and generating newly
decoded microinstructions; or (c) retire in state Retired (single cir-
cle) if it no longer depends on speculated values.
Microinstructions in state Speculatively Fetched can either be
rolled back due to misspeculation, otherwise move to state Fetched
(double circle). Finally, in state Retired, as in the OoO case, a PC
store microinstruction can be (non-speculatively) fetched and gen-
erate newly decoded microinstructions, or, if it is a memory store,
it can be commiŠed to the memory subsystem (bold circle).
, δ ′
5.3 Microinstruction Semantics
We now present a speculative semantics, denoted by the transi-
tion relation (σ , δ , P) −→→→ (σ ′
, P ′), that reﬂects the microinstruc-
tions’ lifecycle in Figure 2. We illustrate the rules of our semantics
using the graph in Example 4 and the interpretation of states (cir-
cles) in Figure 2. Additionally, for two microinstruction identiﬁers
t and t ′ in speculative state h = (I , s, C, F , δ , P), we draw an edge
from t to t ′ labeled with v whenever δ (t )(t ′) = v.
(Predict) Œe semantics allows to predict the value of an internal
operation choosing a value v ∈ V . Œe rule updates the storage
and records the predicted name, while ensuring that the microin-
struction has not been executed already.
(Prd)
t ← c?e ∈ I
(I , s, C, F , δ , P) −→→→ (I , s[t 7→ v], C, F , δ ′
s(t )↑
δ ′ = δ ∪ {t 7→ ∅}
, P ∪ {t })
We remark that the semantics can predict a value only for an
internal operation (t ← c?e) that has not been already executed
(s(t )↑). As we will see, this choice does not hinder expressiveness
while it avoids the complexity in modeling speculative execution of
program counter updates and loads. Concretely, the rule assigns
an arbitrary value to the name of the predicted microinstruction
(s[t 7→ v]) and records that the result is speculated (δ ∪ {t 7→ ∅}).
Observe that the snapshot δ ′(t ) is ∅ because the prediction does
not depend on the results of other microinstructions.
Consider state h0 in Example 4 containing all microinstructions
of our running program, which have just been decoded (gray cir-
cles). Œe CPU can predict that the value of arithmetic operation
t2 is 0. Rule Prd updates the storage with t2 7→ 0 (doŠed circle), the
snapshot for t2 with an empty mapping, and adds t2 to the predic-
tion set.
(Execute) Œe rules for execution, commit, and fetch reuse the
OoO semantics. First for the case when the instruction has not
been predicted already:
for t2 with the values of its dependencies, i.e., t1 7→ 1. Notice
that in case of a misprediction, the rule does not immediately roll
back all other speculated microinstructions that are aﬀected by the
mispredicted values, e.g., t6.
(Commit) To commit a microinstruction it is suﬃcient to ensure
that there are no dependencies le‰ (δ (t )↑), i.e., the microinstruction
has been retired. Since memory commits have observable side ef-
fects outside the processor pipeline, only retired memory stores
can be sent to the memory subsystem.
(Cmt)
l
−→→ σ ′
σ
step-param(σ , σ ′) = (Cmt(a, v), t ) δ (t )↑
(σ , δ , P)
l
−→→→ (σ ′
, δ , P)
Consider the state h4 and the memory store t4 in our example.
Since t4 has not been retired (i.e., δ (t4) = {t1 7→ 1}) it cannot be
commiŠed as δ (t4)↓. By contrast, the commit of t4 is allowed in
state h8 where δ (t4)↑.
(Fetch) Finally, for the case of (speculative or non-speculative)
fetching, the snapshot must be updated to record the dependency
of the newly added microinstructions:
(Exe)
σ
l
−→→ σ ′
l
−→→→ (σ ′
(σ , δ , P)
step-param(σ , σ ′) = (Exe, t )
, δ ∪ {t 7→ s |deps(t, σ )}, P)
Œe rule executes a microinstruction t using the OoO semantics
and updates the snapshot δ , recording that the execution of t was
determined by the value of its dependencies in deps(t , σ ) in storage
s of state σ . Notice that the premise step-param(σ , σ ′) = (Exe, t )
ensures that microinstruction t has not been predicted.
In fact,
step-param(σ , σ ′) = (Exe, t ) only if σ (t )↑, while rule Prd would up-
date the storage with a value for name t, hence t < P.
Consider now the state h2 resulting from the execution of t1
and t3 in Example 4. In h2 the CPU can execute the PC update t6,
updating the storage with t6 7→ 36. Œe rule additionally updates
the snapshot for t6 with the current values of its dependencies,
i.e., {t2 7→ 0, t3 7→ 32}. Since the executed microinstruction t6
is a store, its dependencies are the free names occurring in the
microinstruction. Œese snapshots are used by rules Cmt and Rbk to
identify mispredictions. Similarly, the rule enables the execution of
the memory store t4 in h3, which updates the storage with t4 7→ 1
and the snapshot for t4 with the values of its dependencies {t1 7→
1}.
Œe following rule enables the execution of microinstructions
whose result has been previously predicted:
(Pexe)
(I , s \ {t }, C, F)
step-param(σ , σ ′) = (Exe, t )
σ = (I , s, C, F)
l
−→→ σ ′
t ∈ P
(σ , δ , P)
l
−→→→ (σ ′
, δ ∪ {t 7→ s |deps(t, σ )}, P \ {t })
Œe rule removes the value predicted for t from the storage (s \
{t }) to enable the actual execution of t in the OoO semantics. It
also removes t from the set of predicted names P and updates the
snapshot with the new dependencies of t.
In our example, rule Pexe computes the actual value of t2 in state
h4, which was previously mispredicted as 0. Œe rule corrects the
misprediction updating the storage with t2 7→ 1 and the snapshot
8
(Ftc)
σ
l
−→→ σ ′
l
−→→→ (σ ′
(σ , δ , P)
step-param(σ , σ ′) = (F (I ), t )
, δ ∪ {t ′ 7→ s |{t } | t ′ ∈ I }, P)
Following the OoO semantics, if step-param(σ , σ ′) = (F (I ), t )
then t is a PC update and s(t ) is the new value of the PC. For every
newly added microinstruction in t ′ ∈ I , we extend the snapshop δ
recording that t ′ was added as result of updating the PC microin-
struction t with the value s(t ) (formally, we project the storage s
on t, i.e., s |{t }). Œe new snapshop may be used later to roll back
the newly added microinstructions in I if the value of the PC is
misspeculated.
1 and t ′
For example, in state h5 the CPU can speculatively fetch the PC
update t6, which sets the program counter to 36. Suppose that the
newly added microinstructions in I (i.e., the microinstructions re-
sulting from the translation of the ISA instruction at address 36)
are t ′
2. Following the OoO semantics, I is added to existing
microinstructions in σ ′ . Œe rule additionally updates the snap-
shot for t ′
2 recording the PC store that generated the new
microinstructions, i.e., t6 7→ 36.
(Retire) Œe following transition rule allows to retire a microin-
struction in case of correct speculation:
1 and t ′
(Ret)
s(t )↓
(I , s, C, F) ∼t (I , δ (t ), C, F)
dom(δ (t )) ∩ dom(δ ) = ∅
t < P
(I , s, C, F , δ , P) −→→→ (I , s, C, F , δ \ {t }, P)
Œe map δ (t ) contains the snapshot of t’s dependencies at time
of t’s execution. A microinstruction can be retired only if all its
dependencies have been retired (dom(δ (t )) ∩ dom(δ ) = ∅), the mi-
croinstruction has been executed (i.e. its value has not been just
predicted s(t )↓ ∧ t < P), and the snapshot of t’s dependencies is ∼t
equivalent with the current state, hence the semantics of t has been
correctly speculated (see Lemma 5.3). Retiring a microinstruction
results in removing the state of its dependencies from δ , as cap-
tured by δ \ {t }.
For instance, in state h6 the PC store t6 cannot be retired for two
reasons: one of its dependencies has not been retired (i.e., δ (t6) =
t1
l d R z
t4
t2
t1 = 1
t5
t3
l d P C
t6
st M 16 t1
t2
st P C a
¬t2
st P C t3 + 4
t3
t6
Prd, t2
t2
t5
h0
0
h1
1
0
32
∗
However, if t is a program counter store, the speculative evalu-
ation using rule Ftc will have caused a new microinstruction to be
speculatively fetched. Œis fetch needs to be undone. To that end
let t ′ ≺ t (t ′ refers to t) if t ∈ dom(δ (t ′)), let ≺+ be the transitive
closure of ≺. As expected ≺+ is antisymmetric and its the reﬂexive
closure is a partial order. Deﬁne then the set ∆+ as {t ′ | t ′ ≺+ t }:
i.e., ∆+ is the set of names that reference t, not including t itself.
Finally, let ∆∗ = ∆+ ∪ {t }.
h2
Exe, t6
(Rbk)
t < P
t ∈ F
(I , s, C, F , δ , P) −→→→ (I \ ∆+
(I , s, C, F) /t (I , δ (t ), C, F)
, s \ ∆∗
, C, F \ ∆∗
, δ \ ∆∗
, P \ ∆∗)
t1
t4
1
1
1
1
1
1
1
1
1
32
0
32
Pexe, t2
1
36
h5
Ftc(I ), t6
1
32
0
32
Ret, t4
36
36
36
1
1
1
1
t ′
1
t ′
2
h6
0
32
1
0
32
0
32
Exe, t4
36
0
32
36
h4
h3
1
1
32
0
32
Rbk, t6
36
36
36
t ′
1
t ′
2
h7
1
1
1
1
1
1
1
32
h8
Cmt, t4
1
32
h9
Example 4: Execution trace of speculative semantics.
{t2 7→ 0, t3 7→ 32} and δ (t2) = {t1 7→ 1}, hence dom(δ (t6)) ∩
dom(δ ) = {t2}), and the snapshot for t6 diﬀers with respect to the
storage (i.e., δ (t6)(t2) , s(t2)). Instead, the microinstruction t4 can
be retired because its dependencies (i.e., t1) have been retired (i.e.,
δ (t1)↑) and the snapshot for t4 (i.e., t1 7→ 1) exactly matches the
values in the storage. Notice that retiring t4 would simply remove
the mapping for t4 from δ .
Notice that in case of a load, (I , s, C, F) ∼t (I , δ (t ), C, F) may
hold even if some dependencies of t diﬀer in s and δ (t ). In fact,
a load may have been executed as a result of misspeculating the
address of a previous store. In this case, ∼t implies that the mis-
speculation has not aﬀected the calculation of str-act of the load
(i.e., it does not cause a store bypass), hence there is no reason to
re-execute the load. Œis mechanism is demonstrated in examples