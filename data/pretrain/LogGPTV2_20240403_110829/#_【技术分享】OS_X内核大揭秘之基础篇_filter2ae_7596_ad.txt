            r9 = 0x00007fffda6afa50
           r10 = 0x000000000000000a
           r11 = 0x0000000000000246
           r12 = 0xffffff801ebec780
           r13 = 0xffffff801ec3e4f8
           r14 = 0x0000000000000000
           r15 = 0xffffff806eb6bf20
           rip = 0xffffff8014751a8c  kernel`fp_lookup + 92 at kern_descrip.c:3879
        rflags = 0x0000000000010246
            cs = 0x0000000000000008
            fs = 0x0000000000000000
            gs = 0x0000000000000000
    (lldb)
LLDB 和 GDB 的命令有所不同，最好将它们分开学习。或者使用一个名为 kgmacros 的脚本，总的来说使用 GDB 进行调试也不错。
**记录堆日志**
运行 Poc 并设置断点来跟踪堆是很困难的。但是，你可以通过上面说到的 boot-args 来跟踪堆。这可以跟踪 OSX 堆的所覆盖的 zone。
    $ sudo nvram boot-args="debug=0x144 -v -zc zlog1=kalloc.128 zlog2=kalloc.256"
与上面的命令一样，使用 -zc zlog1=zone，然后重启。最重要的是知道 Poc 所使用的 zone。我们只跟踪所选择的
zone，而不是全部，所以如果你想跟踪起来比较轻松，就只传递一个 zone 到 boot-args 中。
使用 zlog 时
    (lldb) bt
    * thread #2: tid = 0x0cb5, 0xffffff801200bb4e kernel`Debugger [inlined] hw_atomic_sub(delt=1) at locks.c:1513, name = '0xffffff8019752980', queue = '0x0', stop reason = signal SIGSTOP
      * frame #0: 0xffffff801200bb4e kernel`Debugger [inlined] hw_atomic_sub(delt=1) at locks.c:1513 [opt]
        frame #1: 0xffffff801200bb4e kernel`Debugger(message=) + 910 at model_dep.c:1025 [opt]
        frame #2: 0xffffff8011ef368c kernel`panic(str=""a freed zone element has been modified in zone %s: expected %p but found %p, bits changed %p, at offset %d of %d in element %p, cookies %p %p"@/Library/Caches/com.apple.xbs/Sources/xnu/xnu-3789.21.4/osfmk/kern/zalloc.c:651") + 236 at debug.c:458 [opt]
        frame #3: 0xffffff8011f3f5c0 kernel`backup_ptr_mismatch_panic [inlined] zone_element_was_modified_panic(offset=0) + 800 at zalloc.c:642 [opt]
        frame #4: 0xffffff8011f3f559 kernel`backup_ptr_mismatch_panic(zone=, element=, primary=4702111234474983745, backup=) + 697 at zalloc.c:710 [opt]
        frame #5: 0xffffff8011f3e739 kernel`try_alloc_from_zone(zone=, check_poison=) + 521 at zalloc.c:832 [opt]
        frame #6: 0xffffff8011f3d174 kernel`zalloc_internal(zone=, canblock=1, nopagewait=0) + 484 at zalloc.c:2284 [opt]
        frame #7: 0xffffff8011f84580 kernel`vm_map_copyin_internal + 51 at vm_map.c:9428 [opt]
        frame #8: 0xffffff8011f8454d kernel`vm_map_copyin_internal(src_map=, src_addr=140351705630208, len=3240, flags=, copy_result=) + 253 at vm_map.c:10279 [opt]
        frame #9: 0xffffff8011ed7629 kernel`ipc_kmsg_copyin_ool_descriptor [inlined] vm_map_copyin_common(src_map=, src_destroy=, copy_result=0xffffff8071adbe40, use_maxprot=0) + 201 at vm_map.c:10187 [opt]
        frame #10: 0xffffff8011ed7616 kernel`ipc_kmsg_copyin_ool_descriptor(dsc=0xffffff8018874c98, user_dsc=, is_64bit=, paddr=, copy=0xffffff8071adbe40, space_needed=, map=, mr=) + 182 at ipc_kmsg.c:2701 [opt]
        frame #11: 0xffffff8011ed7c25 kernel`ipc_kmsg_copyin_body(kmsg=0xffffff8018874c00, space=0xffffff8018925b40, map=0xffffff801c0e9e08) + 613 at ipc_kmsg.c:3035 [opt]
        frame #12: 0xffffff8011ee992f kernel`mach_msg_overwrite_trap(args=) + 287 at mach_msg.c:548 [opt]
        frame #13: 0xffffff8011ff26ae kernel`mach_call_munger64(state=0xffffff8018dd12c0) + 430 at bsd_i386.c:562 [opt]
        frame #14: 0xffffff8011ea5f66 kernel`hndl_mach_scall64 + 22
未使用 zlog 时
    (lldb) bt
    * thread #2: tid = 0x13ab, 0xffffff8015c0bb4e kernel`Debugger [inlined] hw_atomic_sub(delt=1) at locks.c:1513, name = '0xffffff80200f4288', queue = '0x0', stop reason = signal SIGSTOP
      * frame #0: 0xffffff8015c0bb4e kernel`Debugger [inlined] hw_atomic_sub(delt=1) at locks.c:1513 [opt]
        frame #1: 0xffffff8015c0bb4e kernel`Debugger(message=) + 910 at model_dep.c:1025 [opt]
        frame #2: 0xffffff8015af368c kernel`panic(str=""Invalid queue element linkage for %p: next %p next->prev %p prev %p prev->next %p"@/Library/Caches/com.apple.xbs/Sources/xnu/xnu-3789.21.4/osfmk/kern/queue.h:245") + 236 at debug.c:458 [opt]
        frame #3: 0xffffff8015bec040 kernel`pmap_enter_options [inlined] __QUEUE_ELT_VALIDATE + 81 at queue.h:244 [opt]
        frame #4: 0xffffff8015bebfef kernel`pmap_enter_options [inlined] insque at queue.h:347 [opt]
        frame #5: 0xffffff8015bebfef kernel`pmap_enter_options [inlined] pv_hash_add + 32 at pmap_internal.h:544 [opt]
        frame #6: 0xffffff8015bebfcf kernel`pmap_enter_options(pmap=, vaddr=, pn=, prot=, fault_type=, flags=, wired=, options=, arg=) + 5103 at pmap_x86_common.c:926 [opt]
        frame #7: 0xffffff8015b6fb41 kernel`vm_fault_enter(m=0xffffff801c1c3c00, pmap=, vaddr=140736734584832, prot=, caller_prot=, wired=0, change_wiring=, no_cache=0, cs_bypass=, user_tag=1962753648, pmap_options=, need_retry=, type_of_fault=) + 4481 at vm_fault.c:3292 [opt]
        frame #8: 0xffffff8015b71405 kernel`vm_fault_internal(map=, vaddr=, caller_prot=, change_wiring=0, interruptible=2, caller_pmap=0x0000000000000000, caller_pmap_addr=0, physpage_p=) + 4421 at vm_fault.c:4086 [opt]
        frame #9: 0xffffff8015c069fc kernel`user_trap [inlined] vm_fault(map=, vaddr=, fault_type=, change_wiring=0, interruptible=2, caller_pmap=, caller_pmap_addr=0) + 652 at vm_fault.c:3397 [opt]
        frame #10: 0xffffff8015c069d8 kernel`user_trap(saved_state=0xffffff801ff11060) + 616 at trap.c:1120 [opt]
        frame #11: 0xffffff8015aa5655 kernel`hndl_alltraps + 229
当查看调用栈时，差异是很明显的。使用了 zlog 时，你可以看到调用栈被分配给了 zalloc，但未使用 zlog 时就看不到。所以如果你要分析 1day
漏洞的堆腐败时，了解 zone 的概念并使用 zlog 可以进行更好的调试。
**更多内容**
了解 bug 很重要，但调试也很重要。做调试时我会使用一些简单的命令。
    (lldb) bt
    * thread #2: tid = 0x1650, 0xffffff801200bb4e kernel`Debugger [inlined] hw_atomic_sub(delt=1) at locks.c:1513, name = '0xffffff801a0eee18', queue = '0x0', stop reason = signal SIGSTOP
      * frame #0: 0xffffff801200bb4e kernel`Debugger [inlined] hw_atomic_sub(delt=1) at locks.c:1513 [opt]
        frame #1: 0xffffff801200bb4e kernel`Debugger(message=) + 910 at model_dep.c:1025 [opt]
        frame #2: 0xffffff8011ef368c kernel`panic(str=""a freed zone element has been modified in zone %s: expected %p but found %p, bits changed %p, at offset %d of %d in element %p, cookies %p %p"@/Library/Caches/com.apple.xbs/Sources/xnu/xnu-3789.21.4/osfmk/kern/zalloc.c:651") + 236 at debug.c:458 [opt]
        frame #3: 0xffffff8011f3f5c0 kernel`backup_ptr_mismatch_panic [inlined] zone_element_was_modified_panic(offset=0) + 800 at zalloc.c:642 [opt]
        frame #4: 0xffffff8011f3f559 kernel`backup_ptr_mismatch_panic(zone=, element=, primary=4702111234474983745, backup=) + 697 at zalloc.c:710 [opt]
        frame #5: 0xffffff8011f3e739 kernel`try_alloc_from_zone(zone=, check_poison=) + 521 at zalloc.c:832 [opt]
        frame #6: 0xffffff8011f3d174 kernel`zalloc_internal(zone=, canblock=1, nopagewait=0) + 484 at zalloc.c:2284 [opt]
        frame #7: 0xffffff8011ed5248 kernel`ipc_kmsg_alloc(msg_and_trailer_size=4352) + 248 at ipc_kmsg.c:929 [opt]
        frame #8: 0xffffff8011ef832d kernel`ipc_kobject_server(request=, option=) + 141 at ipc_kobject.c:299 [opt]
        frame #9: 0xffffff8011ed5f61 kernel`ipc_kmsg_send(kmsg=, option=, send_timeout=) + 225 at ipc_kmsg.c:1826 [opt]
        frame #10: 0xffffff8011ee9957 kernel`mach_msg_overwrite_trap(args=) + 327 at mach_msg.c:556 [opt]
        frame #11: 0xffffff8011ff26ae kernel`mach_call_munger64(state=0xffffff8019fed920) + 430 at bsd_i386.c:562 [opt]
        frame #12: 0xffffff8011ea5f66 kernel`hndl_mach_scall64 + 22
bt 命令是 BackTrace 的缩写，它用于将线程堆栈信息打印出来。你可以选择跳转到单个 frame 并查看其局部变量。
    (lldb) frame select 5
    frame #5: 0xffffff8011f3e739 kernel`try_alloc_from_zone(zone=, check_poison=) + 521 at zalloc.c:832 [opt]
如果你使用 frame select 命令选择了一个 frame，则会把当前 frame 的信息打印出来，并且 rip 也会变为该 frame
的地址。如下所示。
    (lldb) register read
    General Purpose Registers:
           rbx = 0xffffff801f977000
           rbp = 0xffffff8872cabc50
           rsp = 0xffffff8872cabc10
           r12 = 0x7e415085550ee3c7
           r13 = 0x4141414141414141
           r14 = 0xffffff8017cd70a0
           r15 = 0x4141414141414141
           rip = 0xffffff8011f3e739  kernel`try_alloc_from_zone + 521 at zalloc.c:832
你可以看到 rip 确实在我们选择的 frame 中，并且可以看到该函数局部变量的值。
    (lldb) frame var
    (zone_t) zone = 
    (boolean_t *) check_poison = 
    (zone_page_metadata *) page_meta = 0xffffff8017cd70a0
    (vm_offset_t) element = 18446743524483756032
    (vm_offset_t *) primary = 0xffffff801f977000
    (vm_offset_t) next_element_primary = 4702111234474983745
    (vm_offset_t) next_element = 9097641255853024199
    (vm_offset_t) next_element_backup = 4702111234474983745
    (vm_offset_t *) backup = 
OSX 中 Page 的第一部分被称为元数据（Meta data），它包含了有关该 zone 的大量信息，如堆的元数据。
对于 iOS 10，有如下元数据：
**zindex：** zone_array 中的索引
**Page_count：** 分配的页面大小
**free_count：** 页面中 free element 数量
**freelist_offset：** 页面中第一个 free element 的地址
下面我们看一下名为 primary 的变量。
    (lldb) memory read 0xffffff801f977000
    0xffffff801f977000: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
    0xffffff801f977010: 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
如果 PoC 被正确地触发，那幺正常情况下会显示一串 A。由于分配给 zone 的元素在 memset 中以 A 填充，因此结果如上所示。
以这种方式触发 PoC 后，如果存在你所需的 frame，则可以通过选择该 frame 并检查局部变量的方式进行调试。请注意 frame
相关的命令通常是很有用的。
我们可以查看在 Mac 上运行的所有任务的基址，内核任务也在其中。可以看到内核任务名为 kernel_task，你可以使用下面的命令将其输出。
    (lldb) showalltasks 
    task                 vm_map               ipc_space            #acts flags    pid       process             io_policy  wq_state  command             
    0xffffff80185b3aa0   0xffffff8014d1e6e8   0xffffff80180ab800     134            0   0xffffff80126ba360                -1 -1 -1    kernel_task         
    0xffffff80185b3000   0xffffff8018db0838   0xffffff80180ab840       6            1   0xffffff8018d81128                -1 -1 -1    launchd             
    0xffffff801961c000   0xffffff8019603268   0xffffff80195c2740       4 D         34   0xffffff8018d80cb0                -1 -1 -1    UserEventAgent      
    0xffffff801961caa0   0xffffff8019603838   0xffffff80195c2980       2 D         36   0xffffff8018d80838             TQ -1 -1 -1    uninstalld          
    0xffffff8019634aa0   0xffffff8019603458   0xffffff80195c29c0       2 D         37   0xffffff8018d81e90                -1 -1 -1    kextd     &n