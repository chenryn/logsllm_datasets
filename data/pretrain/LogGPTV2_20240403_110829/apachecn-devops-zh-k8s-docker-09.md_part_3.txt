*   **身份注入**:一旦代理对用户进行了认证，它需要能够在每个请求上注入一个 HTTP 授权头，该请求是标识登录用户的 JWT，由相同的 OpenID Connect 身份提供者签名，并且具有与 API 服务器相同的颁发者和接收者。例外情况是使用模拟，如第 7 章[](07.html#_idTextAnchor203)**所述，将认证集成到集群中*将特定的头注入请求中。*
 *反向代理不需要在群集上运行。根据您的设置，这样做可能是有利的，尤其是在集群中使用模拟时。使用模拟时，反向代理使用服务帐户的令牌，因此该令牌最好永远不要离开群集。
本章的重点是 Kubernetes 项目的仪表板。仪表板功能有多个选项。接下来，我们将探讨这些仪表板如何与应用编程接口服务器交互，以及如何评估它们的安全性。
## 本地仪表盘
第三方仪表盘的一个常见主题是在您的工作站上本地运行，并使用 Kubernetes SDK 与 API 服务器进行交互，就像 kubectl 一样。这些工具的好处是不必部署额外的基础架构来保护它们。
Visual Studio Code 的 Kubernetes 插件是一个利用直接 API 服务器连接的本地应用的例子。当启动插件时，Visual Studio Code 访问您当前的 kubectl 配置，并使用该配置与应用编程接口服务器交互。它甚至会在 OpenID 连接令牌过期时刷新它:
![Figure 9.7 – Visual Studio Code with the Kubernetes plugin ](img/Fig_9.7_B15514.jpg)
图 9.7–带有 Kubernetes 插件的 Visual Studio 代码
Visual Studio Code 的 Kubernetes 插件能够刷新它的 OpenID Connect Token，因为它是用 client-go SDK 构建的，与 Kubernetes 使用的客户端库相同。评估客户端仪表板时，确保它与您的认证类型一起工作，即使它不是 OpenID Connect。Kubernetes 的许多 SDK 不支持 OpenID Connect 令牌刷新。Java 和 Python SDKs 最近才开始支持 OpenID Connect 令牌的更新，就像客户端转 SDK 一样。评估本地仪表板时，确保它能够利用您的短期令牌，并能够根据需要刷新它们，就像 kubectl 一样。
## 其他集群级应用
这一章的介绍讨论了集群是如何由除了 Kubernetes 之外的几个应用组成的。其他应用可能会遵循与仪表板相同的安全模型，反向代理方法是比 kubectl 端口转发更好的公开这些应用的方法，即使应用没有内置的安全性。以常见的普罗米修斯栈为例。Grafana 支持用户认证，但 Prometheus 和 Alert Manager 不支持。您如何跟踪谁有权访问这些系统，或者何时使用端口转发访问这些系统？
没有提供用户上下文。使用反向代理，每个网址的日志和被认证为访问该网址的用户可以被转发到中央日志管理系统，并由**安全信息和事件管理器** ( **SIEM** )进行分析，从而为集群的使用提供额外的可见性。
就像仪表板一样，在这些应用中使用反向代理提供了一种分层的安全方法。它从有问题的应用中卸载了会话管理，并提供了增强认证措施的功能，例如多因素认证和会话撤销。这些优势将带来更安全、更易于使用的集群。
# 将仪表板与 OpenUnison 集成
OpenUnison 如何使用模拟将身份头注入到第 7 章[](07.html#_idTextAnchor203)**中，将认证集成到您的集群中*中，而不是 OpenUnison 如何使用 OpenID Connect 集成集群将用户身份注入到仪表板中。奏效了，但没人解释。本节将使用 OpenUnison 实现作为如何为仪表板构建反向代理的示例。使用本节中的信息来更好地了解 API 安全性，或者构建您自己的仪表板认证解决方案。*
 *OpenUnison 部署包括两个集成的应用:
*   **OpenID 连接身份提供者&登录门户**:该应用托管登录过程和发现网址，由应用编程接口服务器用来获取验证`id_token`所需的密钥。它还提供了屏幕，您可以在其中获取 kubectl 的令牌。
*   **仪表盘**:反向代理应用，向集成的 OpenID Connect 身份提供者进行认证，并将用户的`id_token`注入到每个请求中。
此图显示了仪表板的用户界面如何通过反向代理与服务器端组件交互，反向代理注入用户的`id_token` `:`
![Figure 9.8 – OpenUnison integration with the dashboard ](img/Fig_9.8_B15514.jpg)
图 9.8–open unison 与仪表板的集成
仪表板使用与 API 服务器相同的 OpenID Connect 身份提供者，但不使用其提供的`id_token`。相反，OpenUnison 有一个插件，它将生成一个新的`id_token`，独立于身份提供者，其中包含用户的身份数据。OpenUnison 之所以能够做到这一点，是因为 kubectl 和 API 服务器使用的用于为 OpenID Connect 身份提供者生成`id_token`的密钥存储在 OpenUnison 中。
一个新的、短暂的令牌独立于与 kubectl 一起使用的 OpenID Connect 会话生成。这样，令牌可以独立于 kubectl 会话进行刷新。这一过程提供了 1 到 2 分钟令牌生命的好处以及直接登录过程的便利。
如果你对安全有眼光，你可能会指出这种方法在安全模型中有一个明显的单点故障，一个用户的凭证！就像本章前面*了解仪表板安全风险部分*中构建的 Secret 仪表板一样，攻击者通常只需要请求凭据就可以获得它们。这通常是通过名为网络钓鱼的攻击中的电子邮件来完成的，在这种攻击中，攻击者向受害者发送一个页面链接，该页面看起来像他们的登录页面，但实际上只是收集凭据。这就是多因素认证对于基础架构系统如此重要的原因。
在 2019 年的一项研究中，谷歌显示多因素认证阻止了 99%的自动攻击和网络钓鱼攻击(https://security . googleblog . com/2019/05/new-research-how-effective-is-basic . html)。将多因素认证添加到身份提供者 OpenUnison 进行认证，或者将其直接集成到 OpenUnison 中，是保护仪表板和集群安全的最有效方法之一。
# 总结
在本章中，我们详细探讨了 Kubernetes 仪表板的安全性。首先，我们介绍了体系结构以及仪表板如何将您的身份信息传递给 API 服务器。然后，我们探讨了仪表板是如何被破坏的，最后，我们详细介绍了如何安全地正确部署仪表板。
有了这些知识，您现在可以为用户提供一个安全的工具。许多用户更喜欢通过网络浏览器访问仪表板的简单性。添加多因素认证增加了额外的安全和安心层。当您的安全团队质疑仪表板的安全性时，您将获得满足他们的顾虑所需的答案。
前三章集中讨论了 Kubernetes APIs 的安全性。接下来，我们将探索如何保护每个 Kubernetes 部署节点的软肋！
# 问题
1.  The dashboard is insecure.
    A.真实的
    B.错误的
2.  How can the dashboard identify a user?
    A.选项是不进行认证，或者从反向代理注入令牌
    B.用户名和密码
    C.服务帐户
    D.多因素认证
3.  How does the dashboard track session state?
    A.会话存储在 etcd 中。
    B.会话存储在名为`DashboardSession`的自定义资源对象中。
    C.没有会话。
    D.如果令牌被上传，它将被加密并作为 cookie 存储在浏览器中。
4.  When using a token, how often can the dashboard refresh it?
    A.一分钟一次
    B.每三十秒
    C.当令牌到期时
    D.以上都不是
5.  What's the best way to deploy the dashboard?
    A.使用`kubectl port-forward`
    B.使用`kubectl proxy`
    C.使用机密入口主机
    D.反向代理背后
6.  The dashboard doesn't support impersonation.
    A.真实的
    B.错误的
7.  OpenUnison is the only reverse proxy that supports the dashboard.
    A.真实的
    B.错误的**