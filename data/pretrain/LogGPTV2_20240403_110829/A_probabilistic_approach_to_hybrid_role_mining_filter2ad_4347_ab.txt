using any kind of (digitally) available business information.
We will give examples in Section 6.1.
5. HYBRID ROLE MINING
Our goal is to infer user-role and role-permission assign-
ments based on a direct user-permission assignment matrix
and additional business information. The basic assumption
of role mining is the existence of a role structure underly-
ing the direct assignment. It is this structure that should be
discovered by a role mining algorithm. Our method searches
for the role decomposition that is most likely to explain the
direct user-permission assignment.
In Section 5.1, we explain the probabilistic model [20] un-
derlying our computations of the probabilities of diﬀerent
role decompositions. Afterwards, we show how to combine
business information with this model in Section 5.2 and we
103present an optimization strategy for inferring the parame-
ters of the combined model in Section 5.3.
5.1 The Likelihood of a Role Decomposition
Our model has two parts: a structured and an unstruc-
tured part. The structured part pS(·) represents the role
structure, i.e., the entries of the user-permission matrix x
that can be explained by the matrix decomposition x =
z ⊗ u. Computing this decomposition with minimal error
was shown to be NP-hard in [21]. We solve a polynomial
variant of the problem by optimizing the (soft) probabilities
βkj := P (ukj = 0) that the role k does not contain per-
mission j, instead of the (hard) assignments ukj. β denotes
the full K × D-matrix of these probabilities. Upon conver-
gence of the optimization algorithm, the βkj are very close
to either 0 or 1. Formally, the probability that user i who is
assigned to roles zi· has permission j under the structured
part is
!xij 
KY
!1−xij
1− KY
pS (xij | zi·, β) =
βzik
kj
βzik
kj
,
(5)
k=1
k=1
where zik is the hard (non-probabilistic) binary assignment
of user i to role k. As explained above, the goal of role min-
ing is to determine the parameters β and z. Since a users’
roles are combined using Boolean disjunction, the probabil-
ity of not having a permission decreases as the number of
roles that are likely to contain this permission increases.
The unstructured part pU (·) represents all elements of
the user-permission matrix that cannot be explained with
the detected role structure.
It comprises namely the per-
missions a user gets exceptionally (e.g., for “special tasks”)
and the mistakes made when originally specifying the user-
permission matrix. As we assume exceptional assignments
as well as errors to be uniformly distributed over all users
and permissions, we model the probability p (xij | r) for the
user i to have the permission j by a global Bernoulli process
with parameter r:
pU (xij | r) = rxij (1 − r)1−xij .
(6)
This process allows a user to have a permission without get-
ting it from the structured part pS. Technically, this part of
the model allows one to explain the predominant structure
of the data without letting exceptional or erroneous permis-
sion assignments inﬂuence the roles. Exceptions can then
be automatically reported and manually checked for errors.
Let  be the probability that an assignment xij is gener-
ated by the unstructured part of the model pU . Then the
full model pM gives the likelihood
pM (xij|zi·, β, r, ) =  pU (xij|r) + (1−) pS(xij|zi·, β) . (7)
For a more convenient notation, we introduce the notion of
a role set Li, which contains the indices of all roles that the
user i belongs to, i.e. Li := {k ∈ {1, . . . , K} | zik = 1}. Li
is an alternative representation of the row zi·. The set of all
possible role sets is denoted by L. With this notation, the
likelihood (7) becomes
pM (xij|Li, β, r, ) = pU (xij|r) + (1 − )pS(xij|Li, β) . (8)
Assuming that diﬀerent elements of the user-permission ma-
trix x are independent of each other given the parameters β
and z, the total probability is given as
pM (x|z, β, r, ) =
pM (xij |Li, β, r, ) .
(9)
Y
i,j
The unknown model parameters that must be inferred are
thus the user-role assignment z, the roles expressed in terms
of their probabilities β of not containing particular permis-
sions, the global noise probability , and the probability r
of exceptionally getting a permission. These parameters
will be chosen to maximize the likelihood of the observed
data. While direct maximization of (9) is computationally
demanding, its logarithm is easier to handle (when taking
derivatives) and attains the maximum at the same param-
eter values. We therefore deﬁne the bottom-up costs of as-
signing a given user i to a set of roles L as the negative
logarithm of the likelihood function (8):
!
 Y
X
i,L = − log
R(ll)
= −
j
pM (xij |L, β, r, )
j
log ( · pU (xij) + (1−) · pS(xij|L, β)) . (10)
The costs R(ll) for all users are then
X
i,L
R(ll) =
ziLR(ll)
i,L ,
(11)
with ziL ∈ {0, 1} indicating the assignment of i to the set of
roles L.
5.2
Incorporating Business Information
Business Information and Likelihood
Optimizing the model parameters with respect to the log-
likelihood (11) seeks to ﬁnd roles and user-role assignments
that best explain the given direct-assignment data. Since
many diﬀerent user-role and role-permission assignments can
equip the users with their permissions, there are many role
conﬁgurations with very similar likelihood. Technically speak-
ing, the solution space for a solution with maximum like-
lihood has many local optima with similar values for the
objective function. However, many of these local optima
represent RBAC conﬁgurations that are unintuitive from a
business perspective. A hybrid role mining algorithm that
combines the likelihood with business information will ﬁnd
solutions that are more meaningful.
More formally, incorporating business information leads
to an optimization problem with two objectives.
1. The role decomposition (z, u) should accurately ap-
proximate a user-permission matrix, both for the cur-
rent users and for new users.
2. The role assignments should agree with the business
information.
These two objectives are weighted and combined to a uni-
ﬁed objective function. The weighting allows us to choose
the inﬂuence of each of the two sub-objectives. Note that if
these sub-objectives conﬂict, the solutions of the joint objec-
tive will not be a solution of the single objectives. However,
as we will show later (e.g. see Figure 3), the business mean-
ing of a role decomposition can be substantially increased
without signiﬁcantly increasing the bottom-up costs (11).
104As mentioned above, this behavior is caused by the fact
that many conﬁgurations exist with similarly low bottom-
up costs (i.e. similarly high likelihood) but diﬀering degrees
of business interpretability.
In the following, we will introduce a cost function R(S) for
business information S, reﬂecting the above assumption. We
then deﬁne a uniﬁed objective function as a linear combina-
tion of the business information costs and the log-likelihood
costs (11):
R = R(ll)/D + λR(S) ,
(12)
where λ ≥ 0 is the mixing parameter, weighting the inﬂuence
of the business information. A weighted linear combination
is the easiest way to merge the two cost functions into a
single one, and allows a smooth transition from a scenario
without business information (λ = 0) to one that is com-
pletely determined by the business information (λ → ∞).
The term 1/D makes the log-likelihood costs independent
of the number of permissions D. This makes it easier to
compare with the permission-independent term R(S), which
we subsequently give in (13), for arbitrary sized systems.
Objective Function for Business Information
Setting up requirements for a role decomposition from the
business information perspective is probably the most cru-
cial step in designing a hybrid role-mining technique. Our
goal is to make the role decomposition as meaningful as pos-
sible from the business perspective. This perspective is rep-
resented by the business information at hand which could
denote, for instance, organizational units or contract types.
Our assumption about the relationship between business
information and permissions is as follows: The business in-
formation abstractly describes what users should be able to
do. This assumption implies that two users with the same
business attributes will have essentially the same tasks within
the company. This assumption, together with the principle
of least privileges, which states that users should only have
the permissions required for their tasks, therefore implies
that users with the same business attributes should have
similar permissions. Furthermore, note that only the entire
set of roles assigned to a user determines his permissions.
Hence, to evaluate if two users of the same business attribute
have similar permissions, one must compute a measure of
similarity based on their full role sets.
Summing up the above considerations, we assume that
a role decomposition is meaningful if employees satisfying
identical business predicates (i.e., having the same business
information attributes) are also assigned to a similar (ideally
the same) set of roles.
Note that this design decision is diﬀerent from requiring
that all users with identical roles have similar business at-
tributes, as proposed in [4]. We advocate our approach for
two reasons: First, it favors solutions where knowledge of
the business attributes determines the roles, while the other
approach leads to solutions where the roles determine the
business attributes. In practice, one usually seeks the assign-
ment of roles and knows the business information. Second,
most enterprises have some permissions that are granted to
almost all users, such as reading email. Our objective avoids
an unnecessarily high number of roles by allowing roles cap-
turing such permissions to be shared among users with dif-
ferent business attributes (e.g. across organizational units).
Given the above considerations, we propose an objective
function that compares all pairs of users (i, i0) having the
business attribute s with respect to their role assignments
(zi·, zi0·). Using the Boolean variable wis∈{0, 1} to encode
whether user i has business attribute s (wis = 1) or not
(wis = 0), the total costs of a role assignment z are given as
zi0k (1 − 2zi0kzik) . (13)
X
X
X
R(S) =
wiswi0s
1
N
s
i,i0
k
P
1 ≤ P
N is the total number of users and k ∈ {1, .., K} is the
P
role index. Each user has a single business attribute s,
s wis = 1, but can be assigned to multiple roles,
i.e.
k zi0k (1 − 2zi0kzik) in (13)
k zik ≤ K. The term
computes the agreement between the binary assignment vec-
tors (zi·, zi0·) for all pairs of users (i, i0) having the same
attribute s (which is the case iﬀ wiswi0s = 1). The sub-
term (1 − 2zi0kzik) switches the sign of a single term such
that agreements (zikzi0k = 1) are rewarded and diﬀerences
(zikzi0k = 0) are penalized.1
For notational convenience, let Nsk :=
i zikwis be the
number of users that have the business attribute s and are
assigned to role k, and let si be the attribute of user i. With
these auxiliary variables, we simplify the above expression
as follows.
P
X
k
wis
X
k
1
N
X
X
X
1
N
s,i
i
i,k
R(S) =
=
=
(Nsk − 2zikNsk)
(Nsik − 2zikNsik)
X
i,k
(1 − zik)
Nsik
N
−
zik
Nsik
N
(14)
This formulation of the costs is more intuitive: a user i has a
business attribute si and Nsik is the number of users having
the same attribute that are assigned to role k. User i should
be assigned to k if Nsik is high. The ﬁrst term in (14)
penalizes role decompositions not assigning i to such roles
(zik = 0). The second term rewards solutions with such
assignments (zik = 1).
We would like to directly compare this function with the
i,L of assigning a given user i to a set of roles L.
costs R(ll)
We therefore restate the above expression by substituting
P
zik by the assignments ziL from user i to the set of roles
L and the assignments zLk from role sets to roles. Then,
zik =
L ziLzLk, and therefore
X
L
−
!
X
X
k
k∈L
ziLzLk
Nsik
N
−
Nsik
N
Nsik
N
−
−
zLk
Nsik
N
!
Nsik
N
1 −
X
 X
 X
ziL
L
k
ziL
k /∈L
ziLR(S)
i,L .
i,k
X
X
X
X
i,L
i,L
i,L
R(S) =
=
=
=
!
!
Nsik
N