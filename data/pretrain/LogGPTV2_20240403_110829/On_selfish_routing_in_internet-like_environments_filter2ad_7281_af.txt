### 8.3 Summary

To summarize, with reasonable OSPF weights (e.g., hop-count), different routing schemes can share network resources effectively without negatively impacting each other. Conversely, with poor OSPF weights, selfish overlays improve performance for both themselves and compliant traffic. These findings are consistent with previous research by Zegura et al. [43], which showed that selfish routing coexists well with non-selfish routing in the context of server selection.

**Figure 13: Coexistence of two routing schemes: varying OSPF weights in ISP Topology.**

### 9. SELFISH ROUTING VS. TRAFFIC ENGINEERING

#### 9.1 Effects of Network Load and Traffic Distribution Among Overlays

We further examine the performance of two competing overlays as we vary the network load or the fraction of foreground traffic. In both cases, we observe that selfish routing outperforms compliant routing without harming the latter.

So far, all our experiments assume that the network-level routing is fixed. We find that while selfish routing can achieve near-optimal latency, it often increases maximum link utilization and network cost. In practice, network-level routing may be constantly changing, as one of the main goals of traffic engineering is to reduce network costs by adapting the routing in response to varying traffic patterns. This motivates us to examine the interactions between selfish routing and traffic engineering, which we term vertical interactions. Specifically, we ask: Will the system reach a state with both low latency and low network cost, as selfish routing and traffic engineering each try to minimize their own cost functions by adapting to the other process?

#### 9.2 Evaluation of Vertical Interactions in OSPF and MPLS Route Optimization

Below, we evaluate vertical interactions in the context of OSPF and MPLS route optimization. As we will see, OSPF route optimization provides little control over selfish traffic, resulting in system performance (in terms of user latency and network cost) that is no better than using hop-count-based OSPF routing. In contrast, MPLS offers fine-grained control and can potentially lead to better performance.

##### 9.2.1 Specification of Vertical Interactions

We specify vertical interactions as an iterative process between two players: traffic engineering and selfish overlays.

- **Traffic Engineering**: Adjusts physical routing based on network traffic patterns, typically represented as a traffic matrix. Let \( T_t \) denote the estimated traffic matrix for time slot \( t \). \( T_t(s, d) \) represents the total traffic from source \( s \) to destination \( d \) during time slot \( t \). Traffic engineering takes \( T_t \) as input and computes a routing matrix \( R_t \) to optimize network performance. For our study, we assume \( T_t \) is given. In reality, \( T_t \) can be obtained through direct measurements [12] or estimated based on link loads [44].

- **Selfish Routing**: Interferes with traffic engineering by changing the traffic matrix. After traffic engineering installs the routing matrix \( R_t \) to the network, selfish routing redistributes traffic through overlay nodes, leading to a new traffic matrix \( T_{t+1} \). This process repeats.

**Figure 15: Process of vertical interactions.** We also add a relaxation option to improve stability, but our results show that it does not yield significant performance improvements. Thus, for brevity, we only present the results of traffic engineering without relaxation.

- \( T^*_t \): Traffic matrix when routing matrix is \( R_{t-1} \).
- If (relaxation):
  - \( T_t = (1 - \alpha_t)T_{t-1} + \alpha_t T^*_t \)
- Else:
  - \( T_t = T^*_t \)
- \( R_t = \text{OptimizedRoutingMatrix}(T_t) \)
- Traffic engineering installs \( R_t \) to the network.
- Selfish routing redistributes traffic to form \( T^*_{t+1} \).

**Figure 15: One round during vertical interaction.**

##### 9.2.2 Does Selfish Routing Work Well with OSPF Optimizer?

We first evaluate vertical interactions when the route controller uses OSPF. In all our experiments, the traffic engineering process uses an OSPF optimizer to optimize link weights as described in [14], and the starting routing matrix of the interactions is computed using hop-count-based OSPF. We choose this starting point to model a scenario where selfish routing initially has full control over the routing of its traffic in the physical network (see Section 7), and then the network decides to start using traffic engineering.

**Figure 16: Dynamics of vertical interactions for the Sprint topology.** The results indicate that the response of OSPF traffic engineering could yield considerably worse performance than compliant routing using optimized-compliant OSPF weights (i.e., traffic engineering without selfish traffic) and worse than overlay source routing on top of hop-count-based OSPF (i.e., selfish routing without traffic engineering). We observe qualitatively similar results as we vary network topologies, the fractions of selfish traffic, and the sizes of selfish overlays.

These results suggest that the interactions between the two separate routing control processes are so ineffective that each individual control process, when applied alone, can yield better performance than having such interactions. This inefficiency is partly due to the adaptive nature of selfish traffic, which creates considerable variability in traffic demands, making it harder to do traffic engineering. Another important reason is the limited control of OSPF over selfish overlay traffic. When all network nodes belong to an overlay, the only way OSPF can affect the selfish overlay traffic is by violating DLS, which effectively reduces available network resources. As a result, both latency and network cost could be worse than those of hop-count-based OSPF, which gives the overlay full access to all available network resources.

##### 9.2.3 Does Selfish Routing Work Well with MPLS Optimizer?

The poor interactions between selfish routing and the OSPF optimizer motivate us to look for alternative solutions. We examine vertical interactions between selfish routing and the MPLS optimizer, which allows for general multi-commodity routing. Given a traffic matrix and a piece-wise linear, increasing, convex network cost function, the MPLS optimizer can find the optimal routing matrix \( R \) that minimizes the network cost by solving a linear programming problem [1, Chapter 17]. We have implemented such an optimizer based on lp_solve [24].

**Figure 17: Average latency and maximum link utilization for the Sprint topology.** We observe that the routing performance is noticeably better than that of OSPF. It allows the system to reach a state where the network cost is close to that of optimal traffic engineering without selfish routing, and the average latency is only marginally higher than what selfish routing can achieve in the absence of traffic engineering. This is important because the traffic engineering process can choose to stop at any moment and settle on a routing matrix that gives a satisfactory result; that is, the traffic engineering process can be considered a type of Stackelberg game.

We observe similar results on other topologies. These results indicate that MPLS-based traffic engineering can interact much more effectively with selfish routing, likely due to the fine-grained control MPLS has over selfish overlay traffic. Unlike OSPF, MPLS can adjust the routing matrix \( R \) without reducing available network resources.

Despite the encouraging results, there are practical challenges in applying MPLS-based traffic engineering, or traffic engineering in general, in the presence of selfish traffic. For example, in our evaluation, we assume perfect knowledge of traffic matrices, which need to be estimated in practice. The adaptive nature of selfish traffic makes it very difficult to accurately estimate traffic matrices. Another challenge is that MPLS-based traffic engineering requires solving a very large linear programming problem, which may contain millions of unknowns and is infeasible to solve using current software. A thorough exploration of these subjects is outside the scope of this paper and is deferred to future work.

##### 9.3 Summary

In this section, we examine the interactions between selfish routing and traffic engineering. We find that OSPF route optimization interacts very ineffectively with selfish routing, largely due to its limited control over selfish traffic. In contrast, MPLS route optimization has more fine-grained control and therefore interacts with selfish traffic more effectively. However, further research is required to investigate such interactions in more detail.

### 10. CONCLUSIONS AND FUTURE WORK

In this paper, we use a game-theoretic approach to study the performance of selfish routing in Internet-like environments. Our results show that, unlike the theoretical worst case, selfish routing in such environments achieves near-optimal average latency when the network-level routing is static. On the other hand, such performance often comes at the cost of overloading certain links. Moreover, when selfish routing and traffic engineering each try to minimize their own cost by adapting to the other process, the resulting performance could be considerably worse.

There are several avenues for future work. First, we would like to investigate how the multi-AS nature of the Internet affects routing performance. This involves modeling inter-domain topologies, routing policies, and traffic demands, as well as handling larger topologies. Second, our study focuses on the performance at traffic equilibria. The dynamics of selfish routing, i.e., how equilibria are reached, is an interesting question. Additionally, we are interested in better understanding and improving the interactions between selfish routing and traffic engineering. Finally, we plan to study selfish routing with alternative performance metrics, such as loss and throughput.

### Acknowledgments

We are grateful for helpful comments from Jennifer Rexford, Ellen Zegura, Jitendra Padhye, Ted Jewell, and the anonymous reviewers. We would also like to thank Stan Eisenstat, Joan Feigenbaum, Eric Friedman, and Yanbin Liu for helpful discussions.

### 11. REFERENCES

[1] R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. *Network Flows: Theory, Algorithms, and Applications*. Prentice Hall, Upper Saddle River, New Jersey, 1993.

[2] A. Akella, S. Seshan, R. Karp, and S. Shenker. Selfish behavior and stability of the Internet: A game-theoretic analysis of TCP. In *Proceedings of ACM SIGCOMM '02*, Pittsburgh, PA, Aug. 2002.

[3] E. Altman, R. E. Azouzi, and A. Vyacheslav. Non-cooperative routing in loss networks. In *Proceedings of Performance '02*, Rome, Italy, Sept. 2002.

[4] E. Altman, T. Boulogne, R. E. Azouzi, and T. Jimenez. A survey on networking games. *Telecommunication Systems*, Nov. 2000.

[5] D. G. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. Morris. Resilient overlay networks. In *Proceedings of SOSP '01*, Banff, Canada, Oct. 2001.

[6] D. O. Awduche. MPLS and traffic engineering in IP networks. *IEEE Communication Magazine*, pages 42–47, Dec. 1999.

[7] T. Boulogne, E. Altman, O. Pourtallier, and H. Kameda. Mixed equilibrium for multiclass routing games. *IEEE Transactions on Automatic Control*, 47(6):903–916, Jun. 2002.

[8] I. Castineyra, N. Chiappa, and M. Steenstrup. The Nimrod Routing Architecture, RFC 1992, Aug. 1996.

[9] A. Chen, D.-H. Lee, and R. Javakrishnan. Computational study of state-of-the-art path-based traffic assignment algorithms. *Mathematics and Computers in Simulation*, pages 509–518, 2002.

[10] A. Collins. The Detour framework for packet rerouting. PhD Qualifying Examination, Nov. 1998.

[11] M. Faloutsos, P. Faloutsos, and C. Faloutsos. On power-law relationships of the Internet topology. In *Proceedings of ACM SIGCOMM '99*, Cambridge, MA, Aug. 1999.

[12] A. Feldmann, A. Greenberg, C. Lund, N. Reingold, and J. Rexford. Deriving traffic demands for operational IP networks: Methodology and experience. *IEEE/ACM Transactions on Networking*, Jun. 2001.

[13] M. Florian and D. Hearn. Network Routing, chapter 6, Network equilibrium models and algorithms. Elsevier Science, 1995.

[14] B. Fortz, J. Rexford, and M. Thorup. Traffic engineering with traditional IP routing protocols. *IEEE Comm. Magazine*, Oct. 2002.

[15] B. Fortz and M. Thorup. Internet traffic engineering by optimizing OSPF weights. In *Proceedings of IEEE INFOCOM '00*, Tel Aviv, Israel, Mar. 2000.

[16] E. Friedman. Selfish routing on data networks isn't too bad: Genericity, TCP, and OSPF. Working paper. Available from http://www.orie.cornell.edu/~friedman/papers.html, Oct. 2002.

[17] L. Gao. On inferring autonomous system relationships in the Internet. *IEEE/ACM Transactions on Networking*, 9(6), Dec. 2001.

[18] D. Gross and C. Harris. *Fundamentals of Queueing Theory*. John Wiley, 3rd edition, 1998.

[19] C. M. Harris, P. H. Brill, and M. J. Fischer. Internet-type queues with power-tailed interarrival times and computational methods for their analysis. *INFORMS Journal on Computing*, pages 261–271, 2000.

[20] S. Iyer, S. Bhattacharyya, N. Taft, and C. Diot. An approach to alleviate link overload as observed on an IP backbone. In *Proceedings of IEEE INFOCOM '03*, San Francisco, CA, Apr. 2003.

[21] Y. A. Korilis, A. A. Lazar, and A. Orda. Architecting noncooperative networks. *IEEE Journal of Selected Areas in Communications*, 13(7):1241–1251, Sept. 1995.

[22] E. Koutsoupias and C. Papadimitriou. Worst-case equilibria. In *Proceedings of the 16th Annual Symposium on Theoretical Aspects of Computer Science*, pages 404–413, 1999.

[23] J. B. Krawczyk and S. Berridge. Relaxation algorithms in finding Nash equilibria. In *Computational Economics from Economics Working Paper Archive at WUSTL*, Jul. 1997.

[24] lp solve. ftp://ftp.ics.ele.tue.nl/pub/lp solve/.

[25] A. Medina, A. Lakhina, I. Matta, and J. Byers. BRITE: Boston University representative Internet topology generator. Available from http://www.cs.bu.edu/brite.

[26] Multiprotocol label switching (MPLS). http://www.ietf.org/html.charters/mpls-charter.html.

[27] The network simulator: ns-2. http://www.isi.edu/nsnam/ns/.

[28] Open shortest path first (OSPF). http://www.ietf.org/html.charters/ospf-charter.html.

[29] M. Patriksson. Algorithms for computing traffic equilibria. In *Networks and Spatial Economics*. 2003. http://www.cs.chalmers.se/~mipat/LATEX/NSE.ps.

[30] T. Roughgarden. *Selfish Routing*. PhD thesis, Cornell University, May 2002.

[31] T. Roughgarden and E. Tardos. How bad is selfish routing? *Journal of ACM*, 49(2):236–259, 2002.

[32] S. Savage, T. Anderson, A. Aggarwal, D. Becker, N. Cardwell, A. Collins, E. Hoffman, J. Snell, A. Vahdat, G. Voelker, and J. Zahorjan. Detour: a case for informed Internet routing and transport. *IEEE Micro*, volume 19(1), pages 50–59, Jan. 1999.

[33] S. Savage, A. Collins, E. Hoffman, J. Snell, and T. Anderson. The end-to-end effects of Internet path selection. In *Proceedings of ACM SIGCOMM '99*, pages 289–299, Cambridge, MA, Aug. 1999.

[34] Y. Sheffi. *Urban Transportation Networks: Equilibrium Analysis with Mathematical Programming Methods*. Prentice-Hall, 1985.

[35] S. Shenker. Making greedy work in networks: A game-theoretic analysis of switch service discipline. *IEEE/ACM Transactions on Networking*, 3, 1995.

[36] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP topologies with Rocketfuel. In *Proceedings of ACM SIGCOMM '02*, Pittsburgh, PA, Aug. 2002.

[37] J. W. Stewart. *BGP4: Inter-Domain Routing in the Internet*. Addison Wesley, 1998.

[38] L. Subrmanian, S. Agarwal, J. Rexford, and R. Katz. Characterizing the Internet hierarchy from multiple vantage points. In *Proceedings of IEEE INFOCOM '02*, New York, NY, June 2002.

[39] H. Tangmunarunkit, R. Govindan, S. Jamin, S. Shenker, and W. Willinger. Network topology generators: Degree-based vs. structural. In *Proceedings of ACM SIGCOMM '02*, Pittsburgh, PA, Aug. 2002.

[40] H. Tangmunarunkit, R. Govindan, S. Shenker, and D. Estrin. The impact of routing policy on Internet paths. In *Proceedings of IEEE INFOCOM '01*, Anchorage, AK, Apr. 2001.

[41] S. Uryas'ev and R. Y. Rubinstein. On relaxation algorithms in computation of noncooperative equilibria. *IEEE Transactions on Automatic Control*, 39(6):1263–1267, Jun. 1995.

[42] X. Xiao, A. Hannan, B. Bailey, and L. Ni. Traffic engineering with MPLS in the Internet. *IEEE Network Magazine*, Mar. 2000.

[43] E. Zegura, M. Ammar, Z. Fei, and S. Bhattacharjee. Application-layer anycasting: A server selection architecture and use in a replicated web service. *IEEE/ACM Transactions on Networking*, 8(4), Aug. 2000.

[44] Y. Zhang, M. Roughan, N. Duffield, and A. Greenberg. Fast accurate computation of large-scale IP traffic matrices from link loads. In *Proceedings of ACM SIGMETRICS '03*, Jun. 2003.

### APPENDIX

In this Appendix, we provide more details about the algorithms we use to compute traffic equilibria.

#### Computing Traffic Equilibrium for Non-Overlay Traffic

We use the linear approximation algorithm (a variant of the Frank-Wolfe algorithm) [13] to compute traffic equilibrium. The linear approximation algorithm is a gradient algorithm for solving non-linear optimization problems. Specifically, in each iteration, we compute shortest paths and use them to construct the gradient direction. We then move towards that direction by taking a step size that optimizes the objective function. The number of iterations is controlled by the stopping condition from [13]. When the link latency functions satisfy the monotonicity condition, which is the case for our latency functions, there is a unique equilibrium.

#### Computing Traffic Equilibrium for Selfish Overlay Routing

Using the logical networks we described in Section 4, we can compute the traffic equilibrium of overlay routing by either a relaxation algorithm or a modified linear approximation algorithm.

- For a logical network that is asymmetric (i.e., there are two logical links that share the same physical link but send different fractions of traffic through the physical link), we use Jacob's relaxation algorithm on top of Sheffi's diagonalization method [34] to determine the traffic equilibrium, since in this case, we cannot formulate the equilibrium problem as an optimization problem.
- For a logical network that is symmetric (i.e., not asymmetric; an example of a symmetric logical network is OSPF routing without equal weight splitting), we can still formulate the problem as an optimization problem by using a line integral to replace the normal summation of cost on each link. As a result, we can still use the linear approximation algorithm.

**Figure 18: The linear approximation algorithm to compute the best response of source routing or overlay routing, when the network is symmetric, assuming the other overlay’s traffic is background.**

- Assume \( l_e(x) \) is increasing and convex for any edge \( e \).
- Assume \( x l_e(x) \) is convex for any edge \( e \).
- If the overlay is latency optimal, \( f = \sum_e x l_e(x) \); otherwise, \( f = \sum_e l_e(x) \).
- Set other overlay's traffic as background traffic.
- Repeat until (best lower bound gap < threshold):
  - Assume the current traffic vector on each edge is \( x_t \).
  - Determine link latency according to \( x_t \).
  - Use Dijkstra's algorithm to find all-or-nothing traffic assignment \( y_t \).
  - Use line search to find optimal \( \lambda \) so that \( f(x_t + \lambda(y_t - x_t)) \) is minimal.

#### Computing Traffic Equilibrium for Multiple Overlays

Guaranteeing convergence poses a major challenge in computing traffic equilibrium when there are multiple overlays. To this end, we use the relaxation framework proposed in [23, 41] to ensure convergence to one equilibrium. The basic structure of the algorithm is that in each round, each overlay computes its best response by considering the other's traffic as background traffic. Then the best response and the previous state are merged using the relaxation factor \( \alpha_t \).

- \( N \) is the number of overlays.
- \( x_t(i) \) is a vector of overlay \( i \)'s traffic at round \( t \).
- \( y_t(i) \) is the best response of overlay \( i \) at round \( t \).
- Assume \( \sum_t \alpha_t \to \infty \); \( \alpha_t \to 0 \) as \( t \to \infty \).

**Figure 19: The relaxation framework to compute the traffic equilibrium of \( N \) overlays.**

- Repeat until (change between rounds < threshold):
  - Assume the traffic state is \( x_t(i) \) of overlay \( i \).
  - For each \( i \):
    - Compute its best response \( y_t(i) \), assuming other overlays as background.
  - For each overlay \( i \):
    - Set \( x_{t+1}(i) \leftarrow (1 - \alpha_t)x_t(i) + \alpha_t y_t(i) \).

**Figure 19: The relaxation framework to compute the traffic equilibrium of \( N \) overlays.**