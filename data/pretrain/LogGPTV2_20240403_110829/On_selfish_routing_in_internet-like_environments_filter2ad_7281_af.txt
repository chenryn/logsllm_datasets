t
p
o
/
t
p
o
m
o
c
/
c
r
s
t
p
o
/
c
r
s
c
r
s
/
c
r
s
opt-comp
hop-count
random
foreground
background
8.3 Summary
To summarize, with reasonable OSPF weights (e.g., hop-count),
different routing schemes can share network resources reasonably
well without hurting each other; with bad OSPF weights, selﬁsh
overlays improve performance both for themselves and for compli-
ant trafﬁc. Note that these results are consistent with previous ﬁnd-
ings (by Zegura et al. [43]) that selﬁsh routing co-exists well with
non-selﬁsh routing in the context of server selection.
Figure 13: Coexistence of two routing schemes: varying OSPF
weights in ISP T opo.
9. SELFISH ROUTING VS.
TRAFFIC ENGINEERING
Effects of network load and trafﬁc distribution among over-
lays: We further examine the performance of two competing over-
lays as we vary the network load, or vary the fraction of foreground
trafﬁc. In both cases, we observe consistent results: selﬁsh routing
out-performs compliant routing without hurting the latter.
So far all of our experiments assume that the network-level rout-
ing is ﬁxed. We ﬁnd that while selﬁsh routing can achieve close to
optimal latency, it often increases maximum link utilization and net-
work cost. In practice, the network-level routing may be constantly
changing since one principal goal of trafﬁc engineering is to reduce
network cost by adapting the network-level routing in response to
varying trafﬁc patterns. This motivates us to examine the interac-
tions between selﬁsh routing and trafﬁc engineering, which we term
vertical interactions. More speciﬁcally, we ask the following basic
question: Will the system reach a state with both low latency and low
network cost, as selﬁsh routing and trafﬁc engineering each tries to
minimize its own cost function by adapting to the other process?
Below we evaluate vertical interactions in the context of OSPF
and MPLS route optimization. As we will see, OSPF route opti-
mization provides little control over selﬁsh trafﬁc and as a result,
the system performance, both in terms of user latency and network
cost, is no better than using hop-count-based OSPF routing. In con-
trast, MPLS provides ﬁne-grained control and can potentially lead
to better performance.
9.1 Speciﬁcation of vertical interactions
We specify vertical interactions as an iterative process between
the two players: trafﬁc engineering and selﬁsh overlays.
Trafﬁc engineering adjusts physical routing based on network traf-
ﬁc patterns, which are usually in the form of a trafﬁc matrix. More
speciﬁcally, let Tt denote the estimated trafﬁc matrix for time slot
t, then Tt(s, d) represents the total trafﬁc from source s to destina-
tion d during the time slot t. Trafﬁc engineering takes Tt as input,
and computes a routing matrix Rt to optimize network performance.
For our study, we assume Tt is given. In reality, Tt can either be ob-
tained through direct measurements [12] or be estimated based on
link loads [44].
Selﬁsh routing interferes with trafﬁc engineering by changing the
trafﬁc matrix. More speciﬁcally, after trafﬁc engineering installs
the routing matrix Rt to the network, selﬁsh routing will respond
and redistribute trafﬁc through overlay nodes, which leads to a new
trafﬁc matrix Tt+1. This process repeats.
Figure 15 speciﬁes the process of vertical interactions. We also
add a relaxation option in the hope of improving stability; however,
our results show that it does not yield much performance improve-
ment. Thus, in the interest of brevity, below we only present the
results of trafﬁc engineering without relaxation.
(cid:7)
t is the real trafﬁc matrix at time t.
t αt → ∞; αt → 0 as t → ∞.
(cid:1) Tt is the estimated trafﬁc matrix at time t.
(cid:1) T ∗
(cid:1) Rt is the routing matrix at time t.
(cid:1) Assume
T ∗
t = Trafﬁc matrix when routing matrix is Rt−1
if (relaxation)
Tt = (1 − αt)Tt−1 + αtT ∗
else
Tt = T ∗
Rt = OptimizedRoutingMatrix(Tt )
Trafﬁc engineering installs Rt to network
Selﬁsh routing redistributes trafﬁc to form T∗
t
t
t+1
Figure 15: One round during vertical interaction.
9.2 Does selﬁsh routing work well with OSPF
optimizer?
We ﬁrst evaluate vertical interactions when the route controller
uses OSPF. In all of our experiments, the trafﬁc engineering pro-
cess uses an OSPF optimizer to optimize link weights as described
in [14], and the starting routing matrix of the interactions is com-
puted using hop-count-based OSPF. We choose this starting point to
model a scenario in which selﬁsh routing initially has full control
over the routing of its trafﬁc in the physical network (see Section 7),
and then the network decides to start using trafﬁc engineering.
Figure 16 shows the dynamics of vertical interactions for the Sprint
topology. The results indicate that the response of OSPF trafﬁc en-
gineering could yield considerably worse performance than com-
pliant routing using optimized-compliant OSPF weights (i.e., trafﬁc
)
s
u
(
y
c
n
e
t
a
l
e
g
a
r
e
v
A
)
%
(
n
o
i
t
a
z
i
l
i
t
u
k
n
i
l
x
a
M
25000
20000
15000
10000
5000
0
0
overlay src: TE OSPF
overlay src: hop-count
compliant
5
10
15
20
25
30
35
40
45
50
Round
200
180
160
140
120
100
80
60
40
20
0
overlay src: TE OSPF
overlay src: hop-count
compliant
0
5
10
15
20
25
30
35
40
45
50
Round
Figure 16: Vertical interaction with OSPF optimization for the
Sprint topology.
engineering without selﬁsh trafﬁc), and worse than overlay source
routing on top of hop-count-based OSPF (i.e., selﬁsh routing with-
out trafﬁc engineering). We observe qualitatively similar results as
we vary network topologies, the fractions of selﬁsh trafﬁc, and the
sizes of selﬁsh overlays.
These results suggest that the interactions between the two sepa-
rate routing control processes is so ineffective that each individual
control process, when applied alone, can yield better performance
than having such interactions.
Such inefﬁciency is partly due to the fact that the adaptive nature
of selﬁsh trafﬁc creates considerable variability in trafﬁc demands
and therefore makes it harder to do trafﬁc engineering. Another
important reason is the limited control of OSPF over selﬁsh over-
lay trafﬁc. Recall in Section 7 we have shown that when all net-
work nodes belong to an overlay, the only way in which OSPF can
affect the selﬁsh overlay trafﬁc is by violating DLS, which effec-
tively reduces available network resources. As a result, both latency
and network cost could be worse than those of hop-count-based
OSPF, which gives the overlay full access to all available network
resources.
9.3 Does selﬁsh routing work well with MPLS
optimizer?
The poor interactions between selﬁsh routing and the OSPF opti-
mizer motivates us to look for alternative solutions. In this subsec-
tion, we examine vertical interactions between selﬁsh routing and
the MPLS optimizer, which allows one to implement general multi-
commodity routing. Given a trafﬁc matrix and a piece-wise linear,
increasing, convex network cost function, the MPLS optimizer can
ﬁnd the optimal routing matrix R that minimizes the network cost
by solving a linear programming problem [1, Chapter 17]. We have
implemented such an optimizer based on lp solve [24].
Figure 17 shows the average latency and maximum link utiliza-
tion for the Sprint topology. We observe that the routing perfor-
mance is noticeably better than that of OSPF. It allows the system
to reach a state in which the network cost is close to that of optimal
trafﬁc engineering without selﬁsh routing, and the average latency is
only marginally higher than what selﬁsh routing can achieve in the
absence of trafﬁc engineering. This is important because the trafﬁc
engineering process can choose to stop at any moment and settle on
a routing matrix that gives a satisfactory result; that is, the trafﬁc en-
gineering process can be considered as a type of Stackelberg game.
)
s
u
(
y
c
n
e
t
a
l
e
g
a
r
e
v
A
)
%
(
n
o
i
t
a
z
i
l
i
t
u
k
n
i
l
x
a
M
14000
12000
10000
8000
6000
4000
2000
0
0
120
100
80
60
40
20
0
0
overlay src: TE MPLS
overlay src: hop-count
compliant
5
10
15
20
25
30
35
40
45
50
Round
overlay src: TE MPLS
overlay src: hop-count
compliant
5
10
15
20
25
30
35
40
45
50
Round
Figure 17: Vertical interaction with MPLS optimization for the
Sprint topology.
We observe similar results on other topologies.
These results indicate that MPLS-based trafﬁc engineering can
interact much more effectively with selﬁsh routing. This is likely
due to the fact that MPLS has much more ﬁne-grained control over
selﬁsh overlay trafﬁc. Speciﬁcally, unlike OSPF, MPLS can adjust
the routing matrix R without having to reduce available network
resources.
Despite the encouraging results, however, we note that there are a
number of practical challenges in applying MPLS-based trafﬁc en-
gineering, or trafﬁc engineering in general, in the presence of selﬁsh
trafﬁc. For example, in our evaluation we assume that we know the
perfect trafﬁc matrices, which need to be estimated in practice. The
adaptive nature of selﬁsh trafﬁc can make it very difﬁcult to accu-
rately estimate trafﬁc matrices. Another challenge is that MPLS-
based trafﬁc engineering requires solving a very large linear pro-
gramming problem. For large networks, the problem may contain
millions of unknowns, which is infeasible to solve using software
available today. A thorough exploration of these subjects is outside
the scope of this paper, so we defer it to future work.
9.4 Summary
To summarize, in this section we examine the interactions be-
tween selﬁsh routing and trafﬁc engineering. We ﬁnd that OSPF
route optimization interacts very ineffectively with selﬁsh routing,
largely due to its limited control over selﬁsh trafﬁc.
In contrast,
MPLS route optimization has more ﬁne-grained control and there-
fore interacts with selﬁsh trafﬁc more effectively. However, further
research is required to investigate such interactions in more detail.
10. CONCLUSIONS AND FUTURE WORK
In this paper, we use a game-theoretic approach to study the per-
formance of selﬁsh routing in Internet-like environments. Our re-
sults show that unlike the theoretical worst case, selﬁsh routing in
such environments achieves close to optimal average latency, when
the network-level routing is static. On the other hand, such perfor-
mance often comes at the cost of overloading certain links. More-
over, when selﬁsh routing and trafﬁc engineering each tries to min-
imize its own cost by adapting to the other process, the resulted
performance could be considerably worse.
There are a number of avenues for future work. First, we would
like to investigate how the multi-AS nature of the Internet affects the
routing performance. There are a few challenges involved, includ-
ing modeling inter-domain topologies, routing policies, and trafﬁc
demands, as well as handling larger topologies. Second, our study
focuses on the performance at trafﬁc equilibria. The dynamics of
selﬁsh routing, i.e., how equilibria are reached, is an interesting
question. In addition, we are interested in better understanding and
improving the interactions between selﬁsh routing and trafﬁc engi-
neering. Finally, we plan to study selﬁsh routing with alternative
performance metrics, such as loss and throughput.
Acknowledgments
We are grateful for helpful comments from Jennifer Rexford, Ellen
Zegura, Jitendra Padhye, Ted Jewell, and the anonymous reviewers.
We would also like to thank Stan Eisenstat, Joan Feigenbaum, Eric
Friedman, and Yanbin Liu for helpful discussions.
11. REFERENCES
[1] R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. Network Flows: Theory,
Algorithms, and Applications. Prentice Hall, Upper Saddle River,
New Jersey, 1993.
[2] A. Akella, S. Seshan, R. Karp, and S. Shenker. Selﬁsh behavior and
stability of the Internet: A game-theoretic analysis of TCP. In
Proceedings of ACM SIGCOMM ’02, Pittsburgh, PA, Aug. 2002.
[3] E. Altman, R. E. Azouzi, and A. Vyacheslav. Non-cooperative routing
in loss networks. In Proceedings of Performance ’02, Rome, Italy,
Sept. 2002.
[4] E. Altman, T. Boulogne, R. E. Azouzi, and T. Jimenez. A survey on
networking games. Telecommunication Systems, Nov. 2000.
[5] D. G. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. Morris.
Resilient overlay networks. In Proceedings of SOSP ’01, Banff,
Canada, Oct. 2001.
[6] D. O. Awduche. MPLS and trafﬁc engineering in IP networks. IEEE
Communication Magazine, pages 42–47, Dec. 1999.
[7] T. Boulogne, E. Altman, O. Pourtallier, and H. Kameda. Mixed
equilibrium for multiclass routing games. IEEE Transactions on
Automatic Control, 47(6):903–916, Jun. 2002.
[8] I. Castineyra, N. Chiappa, and M. Steenstrup. The Nimrod Routing
Architecture, RFC 1992, Aug. 1996.
[9] A. Chen, D.-H. Lee, and R. Javakrishnan. Computational study of
state-of-the-art path-based trafﬁc assignment algorithms. Mathematics
and Computers in Simulation, pages 509–518, 2002.
[10] A. Collins. The Detour framework for packet rerouting. PhD
Qualifying Examination, Nov. 1998.
[11] M. Faloutsos, P. Faloutsos, and C. Faloutsos. On power-law
relationships of the Internet topology. In Proceedings of ACM
SIGCOMM ’99, Cambridge, MA, Aug. 1999.
[12] A. Feldmann, A. Greenberg, C. Lund, N. Reingold, and J. Rexford.
Deriving trafﬁc demands for operational IP networks: Methodology
and experience. IEEE/ACM Transactions on Networking, Jun. 2001.
[13] M. Florian and D. Hearn. Network Routing, chapter 6, Network
equilibrium models and algorithms. Elsevier Science, 1995.
[14] B. Fortz, J. Rexford, and M. Thorup. Trafﬁc engineering with
traditional IP routing protocols. IEEE Comm. Magazine, Oct. 2002.
[15] B. Fortz and M. Thorup. Internet trafﬁc engineering by optimizing
OSPF weights. In Proceedings of IEEE INFOCOM ’00, Tel Aviv,
Israel, Mar. 2000.
[16] E. Friedman. Selﬁsh routing on data networks isn’t too bad:
Genericity, TCP, and OSPF. Working paper. Available from
http://www.orie.cornell.edu//˜friedman/papers.html, Oct. 2002.
[17] L. Gao. On inferring autonomous system relationships in the Internet.
IEEE/ACM Transactions on Networking, 9(6), Dec. 2001.
[18] D. Gross and C. Harris. Fundamentals of Queueing Theory. John
Wiley, 3rd edition, 1998.
[19] C. M. Harris, P. H. Brill, and M. J. Fischer. Internet-type queues with
power-tailed interarrival times and computational methods for their
analysis. INFORMS Journal on Computing, pages 261–271, 2000.
[20] S. Iyer, S. Bhattacharyya, N. Taft, and C. Diot. An approach to
alleviate link overload as observed on an IP backbone. In Proccedings
of IEEE INFOCOM ’03, San Francisco, CA, Apr. 2003.
[21] Y. A. Korilis, A. A. Lazar, and A. Orda. Architecting noncooperative
networks. IEEE Journal of Selected Areas in Communications,
13(7):1241–1251, Sept. 1995.
[22] E. Koutsoupias and C. Papadimitriou. Worst-case equilibria. In
Proceedings of the 16th Annual Symposium on Theoretical Aspects of
Computer Science, pages 404–413, 1999.
[23] J. B. Krawczyk and S. Berridge. Relaxation algorithms in ﬁnding
Nash equilibria. In Computational Economics from Economics
Working Paper Archive at WUSTL, Jul. 1997.
[24] lp solve. ftp://ftp.ics.ele.tue.nl/pub/lp solve/.
[25] A. Medina, A. Lakhina, I. Matta, and J. Byers. BRITE: Boston
University representative Internet topology generator. Available from
http://www.cs.bu.edu/brite.
[26] Multiprotocol label switching (MPLS).
http://www.ietf.org/html.charters/mpls-charter.html.
[27] The network simulator: ns-2. http://www.isi.edu/nsnam/ns/.
[28] Open shortest path ﬁrst (OSPF).
http://www.ietf.org/html.charters/ospf-charter.html.
[29] M. Patriksson. Algorithms for computing trafﬁc equilibria. In
Networks and Spatial Economics. 2003.
http://www.cs.chalmers.se/˜mipat/LATEX/NSE.ps.
[30] T. Roughgarden. Selﬁsh Routing. PhD thesis, Cornell University, May
2002.
[31] T. Roughgarden and E. Tardos. How bad is selﬁsh routing? Journal of
ACM, 49(2):236–259, 2002.
[32] S. Savage, T. Anderson, A. Aggarwal, D. Becker, N. Cardwell,
A. Collins, E. Hoffman, J. Snell, A. Vahdat, G. Voelker, and
J. Zahorjan. Detour: a case for informed Internet routing and
transport. In IEEE Micro, volume 19(1), pages 50–59, Jan. 1999.
[33] S. Savage, A. Collins, E. Hoffman, J. Snell, and T. Anderson. The
end-to-end effects of Internet path selection. In Proceedings of ACM
SIGCOMM ’99, pages 289–299, Cambridge, MA, Aug. 1999.
[34] Y. Shefﬁ. Urban Transportation Networks: Equilibrium Analysis with
Mathematical Programming Methods. Prentice-Hall, 1985.
[35] S. Shenker. Making greedy work in networks: A game-theoretic
analysis of switch service discipline. IEEE/ACM Transactions on
Networking, 3, 1995.
[36] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP topologies
with Rocketfuel. In Proceedings of ACM SIGCOMM ’02, Pittsburgh,
PA, Aug. 2002.
[37] J. W. Stewart. BGP4: Inter-Domain Routing in the Internet. Addison
Wesley, 1998.
[38] L. Subrmanian, S. Agarwal, J. Rexford, and R. Katz. Characterizing
the Internet hierarchy from multiple vantage points. In Proceedings of
IEEE INFOCOM ’02, New York, NY, June 2002.
[39] H. Tangmunarunkit, R. Govindan, S. Jamin, S. Shenker, and
W. Willinger. Network topology generators: Degree-based vs.
structural. In Proceedings of ACM SIGCOMM ’02, Pittsburgh, PA,
Aug. 2002.
[40] H. Tangmunarunkit, R. Govindan, S. Shenker, and D. Estrin. The
impact of routing policy on Internet paths. In Proceedings of IEEE
INFOCOM ’01, Anchorage, AK, Apr. 2001.
[41] S. Uryas’ev and R. Y. Rubinstein. On relaxation algorithms in
computation of noncooperative equilibria. IEEE Transactions on
Automatic Control, 39(6):1263–1267, Jun. 1995.
[42] X. Xiao, A. Hannan, B. Bailey, and L. Ni. Trafﬁc engineering with
MPLS in the Internet. IEEE Network Magazine, Mar. 2000.
[43] E. Zegura, M. Ammar, Z. Fei, and S. Bhattacharjee. Application-layer
anycasting: A server selection architecture and use in a replicated web
service. IEEE/ACM Transactions on Networking, 8(4), Aug. 2000.
[44] Y. Zhang, M. Roughan, N. Dufﬁeld, and A. Greenberg. Fast accurate
computation of large-scale IP trafﬁc matrices from link loads. In
Proceedings of ACM SIGMETRICS ’03, Jun. 2003.
APPENDIX
In this Appendix, we give more details about the algorithms we use
to compute trafﬁc equilibria.
Computing trafﬁc equilibrium for non-overlay trafﬁc: We use
the linear approximation algorithm (a variant of Frank-Wolfe algo-
rithm) [13] to compute trafﬁc equilibrium. The linear approximation
algorithm is a gradient algorithm for solving non-linear optimization
problems. Speciﬁcally, in each iteration we compute shortest paths,
and use them to construct the gradient direction. We then move
towards that direction by taking a step size that optimizes the objec-
tive function. The number of iterations is controlled by the stopping
condition from [13]. When the link latency functions satisfy the
monotonicity condition, which is the case for our latency functions,
there is a unique equilibrium.
Computing trafﬁc equilibrium for selﬁsh overlay routing: Us-
ing the logical networks we described in Section 4, we can compute
the trafﬁc equilibrium of overlay routing by either a relaxation algo-
rithm or a modiﬁed linear approximation algorithm.
Speciﬁcally, for a logical network that is asymmetric (i.e., there
are two logical links that share the same physical link but send dif-
ferent fractions of trafﬁc through the physical link), we use Jacob’s
relaxation algorithm on top of Shefﬁ’s diagonalization method [34]
to determine the trafﬁc equilibrium, since in this case we cannot for-
mulate the equilibrium problem as an optimization problem. For a
logical network that is symmetric (i.e., not asymmetric; an exam-
ple of a symmetric logical network is OSPF routing without equal
weight splitting), we still can formulate the problem as an optimiza-
tion problem by using a line integral to replace the normal summa-
tion of cost on each link. As a result, we still can use the linear
approximation algorithm. Figure 18 speciﬁes the structure of our
algorithm. Note that for overlay networks, the trafﬁc equilibrium
may not be unique [21, 4, 7] and our algorithm identiﬁes only one
equilibrium.
(cid:1) Assume le(x) is increasing and convex for any edge e.
(cid:7)
(cid:1) Assume xle(x) is convex for any edge e.
(cid:1) If the overlay is latency optimal, f =
(cid:1)
e xle(x);
otherwise, f =
le(x);
(cid:8)
set other overlay’s trafﬁc as background trafﬁc
repeat
assume the current trafﬁc vector on each edge is xt
determine link latency according to xt
use Dijkstra’s algorithm to ﬁnd all-or-nothing
use line search to ﬁnd optimal λ so that
trafﬁc assignment yt
f (xt + λ(yt − xt)) is minimal.
until (best lower bound gap < threshold)
Figure 18: The linear approximation algorithm to compute the
best response of source routing or overlay routing, when the net-
work is symmetric, assuming the other overlay’s trafﬁc is back-
ground.
Computing trafﬁc equilibrium for multiple overlays:
Guar-
anteeing convergence poses a major challenge in computing traf-
ﬁc equilibrium when there are multiple overlays. To this end, we
use the relaxation framework proposed in [23, 41] to ensure con-
vergence to one equilibrium. Figure 19 shows the algorithm. The
basic structure of the algorithm is that in each round, each over-
lay computes its best response by considering the other’s trafﬁc as
background trafﬁc. Then the best response and the previous state
are merged using the relaxation factor αt.
(cid:1) N is the number of overlays.
(cid:1) xt(i) is a vector of overlay i’s trafﬁc at round t.
(cid:1) yt(i) is the best response of overlay i at round t.
(cid:1) Assume
t αt → ∞; αt → 0 as t → ∞.
(cid:7)
repeat
assume the trafﬁc state is xt(i) of overlay i
for each i
computes its best response yt(i),
for each overlay i
assuming other overlays as background.
set xt+1(i) ← (1 − αt)xt(i) + αtyt(i).
until (change between round < threshold)
Figure 19: The relaxation framework to compute the trafﬁc
equilibrium of N overlays.