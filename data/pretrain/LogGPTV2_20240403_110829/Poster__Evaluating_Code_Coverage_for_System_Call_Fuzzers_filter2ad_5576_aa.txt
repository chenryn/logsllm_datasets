# Title: Evaluating Code Coverage for System Call Fuzzers

## Authors:
- Seoyoung Kim
- Seyeon Jeong
- Mingi Cho
- Soochang Chung
- Taekyoung Kwon

### Contact Information:
{kseoy4046, yeonny, imgc, warpstar, taekyoung}@yonsei.ac.kr

### Affiliation:
Yonsei University

## Abstract
The OS kernel, with its extensive system privileges, is a prime target for attackers. To mitigate this threat, it is essential to identify security vulnerabilities in the kernel before they can be exploited. System call fuzzing is a widely used technique for this purpose. However, many system call fuzzers have not been thoroughly evaluated for their code coverage, which is a critical metric in fuzzing. In this poster, we propose a methodology to evaluate the code coverage performance of system call fuzzers using a strategy that combines virtualization and Intel Processor Trace (PT). Our approach involves extracting all kernel functions that can be executed by system calls, performing fuzzing on a guest OS, and recording coverage information using Intel PT. We then evaluate the fuzzer by comparing the list of system call-related functions with the executed functions logged by Intel PT.

## CCS Concepts
- Security and Privacy → Software and Application Security

## Keywords
- Fuzzing
- Evaluation
- Kernel Fuzzing

## ACM Reference Format
Seoyoung Kim, Seyeon Jeong, Mingi Cho, Soochang Chung, and Taekyoung Kwon. 2019. Poster: Evaluating Code Coverage for System Call Fuzzers. In 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3319535.3363288

## 1. Introduction
Software bugs can lead to incorrect and unintended states in a computer system, often exploited by attackers. It is particularly crucial to discover and patch such bugs in the OS kernel, as exploiting these vulnerabilities can give attackers full control over the system. Over the past five years, more than 1,000 CVEs have been assigned to the Linux kernel, indicating that many vulnerabilities remain latent [5].

To detect these latent bugs, various methods such as static, dynamic, or combined analysis are used. Fuzzing is a dynamic bug-finding technique that automatically generates or mutates inputs to trigger bugs. It has successfully discovered many bugs in real software [10]. Fuzzing is also frequently used to find bugs in OS kernels, focusing on interfaces that handle user-mode and kernel-mode communications. Most kernel fuzzers target system calls, which request services from the kernel, including process control, file management, and device management.

While numerous system call fuzzers have emerged, there is a lack of rigorous evaluation of their performance. Although the primary goal of a fuzzer is to find more bugs, a simple list of discovered bugs (e.g., CVE IDs) is insufficient to assess the fuzzer's effectiveness. A comprehensive evaluation should consider both the number of distinct bugs and the number of code blocks discovered during fuzzing [7]. Code coverage is a key indicator of a fuzzer's performance, but measuring it is challenging due to the lack of immediate feedback. This motivates our work to evaluate the performance of system call fuzzers by measuring code coverage and gaining insights for improving existing fuzzers.

In this poster, we present a methodology to evaluate the code coverage performance of system call fuzzers using a strategy that combines virtualization and Intel PT. We first extract a list of functions related to system calls (§3.1). Then, we build a guest OS environment on a virtual machine (e.g., KVM) and perform fuzzing with the target system call fuzzer. During fuzzing, we use Intel PT to record the execution trace of CoFI (Change of Flow Instruction) that affects the control flow (§3.2). Finally, we evaluate the fuzzer by comparing the list of system call-related functions with the executed functions logged by Intel PT.

The contributions of this poster are:
- **Novel Coverage Evaluation Approach:** We extracted functions related to system calls and evaluated the fuzzer by comparing the number of executed functions with the number of extracted functions.
- **Evaluation of Open-Source System Call Fuzzer:** We performed coverage evaluation on the Linux system call fuzzer Trinity [4] using our proposed approach. As a result, Trinity executed 1,048 out of 3,990 system call-related functions (§4).

## 2. Background
### Intel Processor Trace
Intel Processor Trace (PT) records software execution traces in a packet format using the processor's hardware. Intel PT records packets when instructions that change the control flow (CoFI) are executed. The types of packets include:
- **Taken Not-Taken (TNT) Packets:** Record the result (true or false) of the branch condition.
- **Target IP (TIP) Packets:** Record the address of the next instruction to be executed when an indirect jump instruction using a relative address is executed.
- **Flow Update Packets (FUP):** Record information about asynchronous events such as interrupts and traps.

### System Call
A system call is used by user-level programs to request privileged services from the OS kernel. Figure 1 illustrates the processing steps of the kernel when the `read()` function, a system call, is called. When `read()` is called in the user space, the kernel finds its entry function from the syscall table and executes it.

## 3. System Design and Implementation
Figure 2 shows the system architecture. We use the system call list, System.map, and kernel images to retrieve the memory addresses of functions related to system calls. We then perform system call fuzzing with a target fuzzer on the guest OS environment while recording the addresses of executed functions using Intel PT. Finally, we compare the system call-related functions with the executed functions to evaluate the coverage performance of the system call fuzzer.

### 3.1. System Call Related Functions
To evaluate the coverage performance of the system call fuzzer, we first need to extract the system call-related functions among those implemented in the kernel and find their memory addresses. These functions are part of the function call graph (FCG) of the entry function that can be executed when a system call is called. We generate the list of system call-related functions as follows:

1. **Extracting System Call Entry List:** We use the `arch/x86/entry/syscalls/syscall_64.tbl` from the Linux source code to get the names of system call entry functions.
2. **Extracting System Call Entry Function Addresses:** We use System.map, which contains kernel image symbols and corresponding addresses, to find the kernel memory address of the entry function of the system call from the loaded kernel image. Since System.map also includes functions not related to system calls, we only collect the addresses of the entry functions obtained in step 1.
3. **Generating Function Call Graph:** To get all system call-related functions, we create an FCG for each entry function. We generate the FCG from the `vmlinux`, a Linux kernel image, which can be obtained by decompressing `vmlinuz`. We use Radare2 [1] to generate the FCG.

## Figures
### Figure 1: The Steps of Invoking a System Call
### Figure 2: System Architecture

---

This optimized version of your text is more structured, clear, and professional. It maintains the original content while improving readability and coherence.