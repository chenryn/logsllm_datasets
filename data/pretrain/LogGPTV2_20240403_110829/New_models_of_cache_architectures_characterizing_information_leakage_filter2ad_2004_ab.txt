Then we have the following principle to judge the infor-
mation ﬂow in the state machine:
Principle: Given a state machine M, and its subjects
S and S(cid:48), if S is non-interfering with S(cid:48), then there is no
information ﬂow from S to S(cid:48).
We now consider the side-channel information leakage.
We treat a side channel C as a state machine. It is a con-
nection between two subjects: a victim who performs some
actions as inputs I to one side of the channel, and an at-
tacker who retrieves certain observations as outputs O from
the other side of the channel. The input I can change C’s
state, and aﬀect the output O. So the measurement of side-
channel information leakage is equivalent to the evaluation
of the non-interfering property between the channel’s input
and output: if I is non-interfering with O, then there is no
side-channel information leakage through C.
Quantiﬁcation: Side-channel leakage is a statistical pro-
cess, so we use mutual information [23] to quantify the non-
interference property between the channel’s input and out-
put. We denote PI(i) as the probability that the side chan-
nel C is fed with the input i, PO(o) as the probability that
C produces the output o, PI,O(i, o) as the joint probability
that C produces the output o with the input i, PO|I(o|i)
as the conditional probability that C produces the output o
given the input i, and PI|O(i|o) as the conditional probabil-
ity that the input of C is i given the output is o. Then the
mutual information between I and O is deﬁned below:
I(I;O) =
=
(cid:88)
(cid:88)
i∈I
(cid:88)
(cid:88)
o∈O
i∈I
o∈O
(cid:18) PI,O(i, o)
(cid:19)
(cid:18) PI|O(i|o)
PI(i)PO(o)
PI(i)
(cid:19)
(1a)
(1b)
PI,O(i, o) log
PO(o) PI|O(i|o) log
I(I;O) measures how much information about I is leaked
to O through the side channel. If I(I;O) is close to zero,
then I is non-interfering with O, and there is little side-
channel information ﬂow from I to O.
Equation 1(b) is the product of three terms. To reduce
the mutual information to zero, we can make any of the
three terms equal zero. So we have three conditions that
can realize the non-interference property:
C1 (Output Elimination) The channel C does not pro-
duce any output. Then the input does not interfere with the
output. We have the following expression:
∀o ∈ O, PO(o) ≈ 0
(2)
C2 (Noise Domination) For any output o, if its gen-
eration is due to the channel’s inherent noise instead of the
input, then the output is not aﬀected by the input:
∀o ∈ O, i ∈ I, PI|O(i|o) ≈ 0
(3)
C3 (Input Ambiguity) For any output o, the input of
the channel C can be any i with the same probability. Then
the input does not interfere with the output. That is:
∀i ∈ I, o ∈ O, PI|O(i|o) ≈ const
(cid:88)
o(cid:48)∈O
(cid:88)
Plugging this into the probability equation gives
PI(i) =
PI,O(i, o
) =
PI|O(i|o
(cid:48)
)PO(o
(cid:48)
)
≈ PI|O(i|o)
o(cid:48)∈O
) = PI|O(i|o)
(cid:48)
PO(o
(cid:48)
(cid:88)
o(cid:48)∈O
This gives the desired expression of Input Ambiguity:
∀o ∈ O, i ∈ I,
log
≈ 0
(4)
(cid:18) PI|O(i|o)
(cid:19)
PI(i)
These three conditions are the key ideas for designing
countermeasures to mitigate side-channel leakage. In Sec-
tion 5, we show how to use these conditions to evaluate the
side-channel leakage from diﬀerent cache architectures.
4. SECURITY MODELING OF HARDWARE
CACHE ARCHITECTURES
In this section, we show how to build ﬁnite state machines
to model the security aspects of cache architectures.
4.1 Cache State Machine
We ﬁrst consider the state machine of a single cache line
shared by the attacker and the victim, which is shown in
Figure 1. Each cache line can be in one of three states: A
(occupied by the attacker), V (occupied by the victim) or
INV (invalid - does not have any valid contents). There
are ﬁve events that cause state transitions: V miss, the
victim has a cache miss for a memory line that maps into
this cache line; A miss, the attacker has a cache miss for
data that maps into this cache line; and similarly, V hit
and A hit, which indicate a cache hit for this cache line by
the victim or the attacker, respectively; and Invalidate, the
cache clears out the data to invalidate this line.
Figure 1: State machine for a single cache line
Now we consider how to model the whole cache as the
combination of all the cache lines, and the dynamic oper-
ations within the cache state machine. Table 2 shows our
model structure and transition rules for the cache states. It
has four columns. For each Event, the cache will transition
from the Current State to the Next State, and output
the Information Flow Log. Assume m is the number of
ways for set-associativity (columns), and n is the number of
cache sets (rows). Then:
Current/Next State: State Matrix Sp,q = {A, V, INV}
is the state of the cache line for set p and way q. Replacement
Matrix lp,q = {0, ..., m− 1} is used to model the LRU (Least
Recently Used) replacement policy ordering of set p and way
q for replacement, when a new line has to be brought into
the cache set. If lp,q = 0, the line in set p and way q has the
highest priority to be replaced. If lp,q = m − 1, then this
line has the lowest priority to be replaced in the set.
V miss, V hit, Invalidate}, which is the cache action on set
p that causes a state transition from Sp,q to S(cid:48)
p,q, following
the rules in Figure 1.
Event: We deﬁne the Event Vector as Tp = {A miss, A hit,
We will discuss the Information Flow Log in detail
in Section 5. For now, it suﬃces to say that it is a new
output generated for the cache state machine that counts
state transitions that violate the non-interference property.
For example, external interference occurs when an attacker’s
cache line is replaced with a victim’s cache line.
4.2 Secure Cache Modeling
The state machine of each secure cache architecture de-
scribed in Section 2.2 can be built based on Figure 1 and
Table 2. We now show the diﬀerences in the cache models
based on the caches’ unique features. Details can be found
in our technical report [24].
Conventional Cache: Caches start out empty, which means
all cache lines are in the INV state at the beginning of each
experiment, transitioning to either V or A state on a V miss
or A miss event, respectively. Subsequently, they transition
between these 2 states. Conventional caches do not invali-
date cache lines on load or store instructions. Hence, the In-
validate event only occurs on a special “Invalidate addresses”
instruction – if this exists in the Instruction Set.
External InterferenceINVVAV_missA_missA_hitA_missV_missA_missV_missV_hitInvalidateInvalidateStartFake InterferenceTable 2: Cache structure and state transition
Current State
 S0,0
...
Sn−1,0
State Matrix
S0,m−1
···
. . .
··· Sn−1,m−1
...
Replacement Matrix
l0,m−1
 l0,0
...
ln−1,0
···
. . .
···
...
ln−1,m−1
Event Vector
Event
 T0
...
Tn−1
 I0 → O0
...
I0 → On−1
Information Flow Log
In−1 → O0
Interference Matrix
···
. . .
···
In−1 → On−1
...
I−1 → O0
...
I−1 → On−1
State Matrix
 S(cid:48)
0,0
...
S(cid:48)
n−1,0
Next State
 l(cid:48)
...
l(cid:48)
n−1,0
···
. . .
···
S(cid:48)
0,m−1
...
···
. . .
··· S(cid:48)
n−1,m−1
Replacement Matrix
l(cid:48)
0,m−1
0,0
...
l(cid:48)
n−1,m−1
Static-Partitioning (SP) Cache: For SP cache, the dif-
ference with the conventional cache is that each cache line
can only have two states (INV and V, or INV and A). So
transitions of A → V or V → A can never happen.
Partition-Locked (PL) Cache: We consider two uses of PL
cache: (1)PL cache without preload of the security-critical
data before the victim’s program begins: the cache is ini-
tially empty. Both the victim and attacker can ﬁll the cache
with its data. However, once the victim’s critical cache lines
are locked in the cache, they can not be replaced by the at-
tacker. So we have the transition of A → V, but V → A
is forbidden. When the cache is in the state of V and en-
counters the event of A miss, the attacker’s data will be sent
to the CPU directly, and the cache stays in V. (2)PL cache
with preload of the security-critical data: the victim initially
occupies the cache line and locks it in the cache. So neither
transition of A → V, nor V → A can happen. The A miss
cannot change the state of the PL cache and A hit can never
happen for these security-critical lines.
Random-Eviction (RE) Cache: Compared with a conven-
tional cache, the RE cache state machine has two more tran-
sitions due to the introduction of random noise: A → INV
(attacker’s line is randomly chosen to be evicted) and V →
INV (victim’s line is randomly chosen to be evicted).
Random-Permutation (RP) Cache: An event for RP cache
may involve mutiple cache lines when swapping the cache
sets. When Line l in set s is in state V and encounters an
A miss, it still stays in state V. Instead, a random Line l(cid:48)
in a random set s(cid:48) is selected and replaced by the incoming
attacker’s line, thus jumping to state A from whatever state
it was in before. All lines of set s and s(cid:48) in state A will be
evicted out of the cache and go to state INV. In the mean-
time, the mappings of set s and s(cid:48) will be swapped in the
attacker’s permutation table. A similar procedure happens
when Line l in state A encounters a V miss. Line l(cid:48)(cid:48) in set
s(cid:48)(cid:48) is randomly selected and replaced, and all the lines of set
s and s(cid:48)(cid:48) in state V go to INV state when swapping sets s
and s(cid:48)(cid:48) in the victim’s permutation table.
NewCache: We consider diﬀerent cache events on a cache
line l. When there is a cache hit for the victim (V index hit
& V tag hit) or the attacker (A index hit & A tag hit), the
cache will stay in state V or A, respectively. When there
is an index hit but a tag miss for the victim (V index hit
& V tag miss) or the attacker (A index hit & A tag miss)
for line l, according to NewCache’s replacement policy [14,
21], line l will be directly replaced by the incoming line,
jumping from state V to V or from state A to A. When
there is an index miss for the victim (V index miss) or the
attacker (A index miss), a random cache line l(cid:48) is selected
to be replaced, and line l(cid:48) will jump to state V or A respec-
tively, from whatever state it was in previously.
5. LEAKAGE MEASUREMENT
To evaluate cache systems’ side-channel vulnerabilities, we
now integrate the leakage model (Section 3) into the cache
state machine model (Section 4). We deﬁne the Interfer-
ence Probability to measure the information leakage through
cache side channels. As an example, we use our method to
evaluate Type I attacks (observing cache misses due to ex-
ternal interference) in Table 1.
5.1 Side-channel Leakage Interpretation
As we stated in Section 3, the cache is shared by the victim
and the attacker, and is treated as a potential side channel.
The victim’s actions are the inputs to the side channel, and
the attacker’s observations are the outputs from the side
channel. To evaluate the side-channel leakage, we need to
study the interference between the victim’s actions and the
attacker’s observations. That is, how the victim’s actions
can aﬀect the attacker’s observations.
We deﬁne Ip as the victim’s actions on cache set p (0 ≤
p < n), and Oq as the attacker’s observations of cache set q
(0 ≤ q < n). During the transitions between diﬀerent cache
states, we deﬁne a novel Information Flow Log to record
the side channel’s inputs and outputs, as shown in Table 2.
Information Flow Log: This log is used to track the
root causes of interference. It deﬁnes a structure called In-
terference Matrix. Inside this matrix, Ip → Oq = {1, 0}
depicts if this cache state transition happens with the vic-
tim’s action on cache set p, which will lead to the attacker’s
later observation on cache set q. An extra input for noise,
I−1, and transition I−1 → Oq = {1, 0} depicts if the inher-
ent noise from the cache channel will lead to the attacker’s
later observation on cache set q.
The mutual information (Equation 1) and 3 non-interference
conditions (Equations 2, 3 and 4) can be used to evaluate
the side-channel leakage. To do so, we need to go over all the
possible cache states and count the number of each kind of
interference, N (Ip → Oq), where −1 ≤ p < n and 0 ≤ q < n.
Then we calculate the Interference Probabilities:
PI,O(Ip, Oq) =
(cid:80)
−1≤p(cid:48)<n
N (Ip → Oq)
(cid:80)
0≤q(cid:48)<n N (Ip(cid:48) → Oq(cid:48) )
(5)
From Equations 1 and 5 we can evaluate the mutual infor-
mation between the victim’s actions and attacker’s observa-
tions. In Equation 6, we only use the range (0 ≤ p(cid:48) < n), and
omit the noise represented by p(cid:48) = −1, which we consider