in decryption queries only, and the number of encryption queries
overall is QE (the IV is chosen randomly so the adversary cannot
in(cid:30)uence the number of queries with the ith nonce).
2.5 Encryption Security with Many Random
encryption queries and at most Qi
D
Functions
In order to prove security of the modes presented here, we will
refer to an encryption experiment, denoted ExptEncRF, which is
the same encryption experiment as above, except that the block
cipher operations used in encryption and decryption are replaced
by random functions (over the same domain as the block cipher).
Furthermore, we consider multiple random functions via an indexed
oracle, as in experiment ExptPRF.
The aim of this notion is to enable an analysis of the mode
of operation via random functions, and relate this to the original
construction. We stress that our comparison is of a block cipher to
a random function and not to a random permutation. However, we
will still be able to use this to obtain very good bounds, via the use
of key derivation.
For an encryption scheme (Gen, Enc, Dec) that uses a block ci-
pher as its underlying primitive, we denote by (Genf , Encf , Decf )
an analogous scheme where Genf chooses a random function over
the same domain and range as the block cipher, and each block
cipher invocation in encryption and decryption is replaced by a
call to the random function f . We note that this is only de(cid:27)ned
for modes of operation that do not invert the block cipher during
decryption (thus, it is de(cid:27)ned for CTR but not for CBC). The ex-
periment is formally de(cid:27)ned given an adversary A, encryption
scheme Π and oracle O for the appropriate security notion. As for
the multi-key PRF experiment, we use an indexed oracle to choose
which key is used. However, we wish to model the fact that a dif-
ferent function is used for each di(cid:29)erent nonce. Thus, for an oracle
O(b, k, X ), where X may be a vector of inputs, we de(cid:27)ne ˜O(b, X )
to return a response as would be computed by O(b,· · · ), but where
the block cipher computation with key k is replaced with one of the
random functions f1, . . . , fN. The choice of the random function
is made based on the nonce/IV; speci(cid:27)cally, a di(cid:29)erent function is
used for each di(cid:29)erent nonce (or di(cid:29)erent IV). We de(cid:27)ne:
Experiment ExptEncRFNA,Π,O:
(1) Choose a random b ← {0, 1}, random keys
k1, . . . , kN ← {0, 1}κ, and random functions
f1, . . . , fN under the constraint that if ki = kj
then fi = fj.
(2) Obtain b(cid:48) ← A ˜O(··· ) (1κ ), where ˜O(· · · ) is
(3) Output 1 if and only if b(cid:48) = b.
(cid:103)
de(cid:27)ned as above.
(cid:102)
We de(cid:27)ne the advantage of the adversary to be
AdvEncRFNA, Π,O = 2 · Prob
ExptEncRFNA, Π,O = 1
− 1.
2.6 Glossary of Notations
Throughout this paper, we consider di(cid:29)erent types of adversaries
for di(cid:29)erent settings, and the notation can sometimes be confusing.
We therefore summarize these all here for reference.
Primitive
KDF
Multi-instance
block cipher
Adversary for
nonce-based
encryption
Adversary for
random-IV
based
encryption
Adversary
Parameters
(t, N)
(t, N, (cid:126)B, µ)
(t, N, (cid:126)QE , (cid:126)QD , (cid:126)B, a, m)
(t, N, QE , (cid:126)QD , (cid:126)B, a, m)
Parameter Explanation
t = running time
N = number of queries to O
t = running time
N = number of block-cipher instances
Bi = number of queries to ith instance
µ = maximum query frequency
t = running time
N = number of di(cid:29)erent nonces in
encryption & decryption queries
= # of enc queries with ith nonce
= # of dec queries with ith nonce
Qi
E
Qi
D
Bi = # of blocks processed with ith nonce
2a − 1 = longest AAD in blocks
2m − 1 = longest message in blocks
t = running time
N = number of di(cid:29)erent nonces in
decryption queries only
QE = # of enc queries overall
Qi
D
Bi = # of blocks processed with ith nonce
2a = longest AAD in blocks
2m = longest message in blocks
= # of dec queries with ith nonce
3 THE MAIN THEOREM
In this section we prove our main theorem, that provides the secu-
rity bounds when applying key derivation at every encryption.The
theorem is very generic and can be used for di(cid:29)erent notions of
security and di(cid:29)erent schemes to obtain di(cid:29)erent concrete bounds,
as will be shown below. In Section 4, we show how to implement
an e(cid:28)cient KDF with very good bounds.
3.1 Nonce-Based Encryption
We begin by considering the case of nonce-based encryption. Recall
that A is a (t, N, (cid:126)QE , (cid:126)QD , (cid:126)B, a, m)-nonce adversary if it runs in at
most t steps, queries its encryption and decryption oracle with at
most N di(cid:29)erent nonces, queries the ith nonce with at most Qi
E
encryption queries and at most Qi
decryption queries, the number
D
of blocks processed with the ith nonce in both encryption and
decryption queries is Bi, the longest AAD is less than 2a blocks
and the longest message is less than 2m blocks.
Theorem 3.1 (nonce-based encryption schemes). Let Π =
(Gen, Enc, Dec) be a nonce-based encryption scheme using block
cipher E, let Π(cid:48) be the scheme obtained by applying the key derivation
function F to the nonce in order to derive the key for encrypting the
message, and let Π(cid:48)(cid:48) be the same as Π(cid:48) except that a truly random
function is used instead of F.
Consider any black-box encryption game with oracle O. Then,
for every (t, N, (cid:126)QE , (cid:126)QD , (cid:126)B, a, m)-nonce adversary A, there exists an
(O (t ), N)-adversary A1 for F, and an (O (t ), N, (cid:126)B, µ)-adversary A2
for E where µ depends on Π, such that
AdvEncΠ(cid:48),A,O =
1
2 · AdvKDFA1,F
1
2 · AdvPRFNA2,E
+
+ AdvEncRFN
Π(cid:48)(cid:48),A,O .
Proof. Let A be a (t, N, (cid:126)QE , (cid:126)QD , (cid:126)B, a, m)-nonce-adversary in
ExptEnc with scheme Π(cid:48). We claim that there exists an (O (t ), N)-
adversary A1 for ExptKDF and F1 such that
AdvEncΠ(cid:48),A,O =
1
2 · AdvKDFA1,F1 + AdvEncΠ(cid:48)(cid:48),A,O .
(6)
In order to see this, observe that the only di(cid:29)erence between Π(cid:48)
and Π(cid:48)(cid:48) is whether the KDF is F or a truly random function. We
therefore construct an adversary A1 that attempts to distinguish F
from random, using A.
Adversary A1 works in ExptKDF and attempts to distinguish
F from random. A1 invokes A and simulates an execution of
ExptEncΠ(cid:48),A,O with A. Speci(cid:27)cally, upon receiving any encryp-
tion or decryption oracle query, A1 calls its own oracle with the
nonce as input and uses the result as the key to carry out the
encryption or decryption, respectively. At the end of the exper-
iment, A1 outputs 1 if and only if A outputs b(cid:48) = b. It is clear
that if A1’s oracle is F then it perfectly simulates ExptEncΠ(cid:48),A,O,
whereas if A1’s oracle is a truly random function then it perfectly
simulates ExptEncΠ(cid:48)(cid:48),A,O. Let ExptKDF0A1,F
denote an execution
of ExptKDFA1,F where b = 0, and likewise ExptKDF1A1,F
where
b = 1. Then,
=
Prob[ExptKDFA1, F = 1]
1
2 Prob[ExptKDF
1
2 Prob[ExptEncΠ(cid:48)(cid:48),A,O = 0] +
0A1, F
= 1] +
=
1
2 Prob[ExptKDF
1
2 Prob[ExptEncΠ(cid:48),A,O = 1]
1A1, F
= 1]
where the last equality is due to the fact that we wish to analyze
when A1 outputs b(cid:48) = b (when b = 0 we have that b(cid:48) = b if A
is incorrect in ExptEncΠ(cid:48)(cid:48),A,O, whereas when b = 1 we have that
b(cid:48) = b if A is correct in ExptEncΠ(cid:48),A,O). Using the fact that
Prob[ExptEncΠ(cid:48)(cid:48),A,O = 0] = 1 − Prob[ExptEncΠ(cid:48)(cid:48),A,O = 1]
we conclude that
Prob[ExptKDFA1,F = 1] =
1
1
2Prob[ExptEncΠ(cid:48),A,O = 1]
2 +
−1
2Prob[ExptEncΠ(cid:48)(cid:48),A,O = 1].
Thus,
AdvKDFA1,F = 2 · Prob[ExptKDFA1,F = 1] − 1
= Prob[ExptEncΠ(cid:48),A,O = 1] − Prob[ExptEncΠ(cid:48)(cid:48),A,O = 1]
= 2 · AdvEncΠ(cid:48),A,O + 1 − 2 · AdvEncΠ(cid:48)(cid:48),A,O − 1
= 2 · AdvEncΠ(cid:48),A,O − 2 · AdvEncΠ(cid:48)(cid:48),A,O
and so AdvEncΠ(cid:48),A,O = 1
Noting that A1 runs in essentially the same time as A and
queries its oracle once for every di(cid:29)erent nonce, we have that A1
runs at most O (t ) steps and makes at most N oracle queries. This
concludes the proof of Eq. (6).
2 · AdvKDFA1,F + AdvEncΠ(cid:48)(cid:48),A,O .
AdvEncΠ(cid:48)(cid:48),A,O =
+ AdvEncRFNA, Π(cid:48)(cid:48),O .
Next, we claim that for every (t, N, (cid:126)QE , (cid:126)QD , (cid:126)B, a, m))-adversary
A for ExptEnc, there exists an (O (t ), N, (cid:126)B, µ)-adversary A2 for E
in ExptPRFN, such that
1
2 · AdvPRFNA2,E
(7)
In order to see this, note that if we replace the block cipher E in
Π(cid:48)(cid:48) with a truly random function, then by de(cid:27)nition the resulting
experiment is exactly that of ExptEncRFNA, Π(cid:48)(cid:48),O. Thus, we construct
an adversary A2 who simulates the experiment with scheme Π(cid:48)(cid:48)
for A, and using its oracle to compute the encryption/decryption
responses. Observe that in order to simulate the entire experiment,
A2 needs to call its oracle for every block encrypted/decrypted,
and needs to call a di(cid:29)erent function for each nonce. Thus, it calls
its ith oracle Bi times. At the end of the experiment, A2 outputs 1
if and only if A outputs b(cid:48) = b.
As above, if A2 receives a series of random functions for an
oracle then it simulates ExptEncRFNA, Π(cid:48)(cid:48),O, and if A2 receives a
series of pseudorandom functions E for an oracle then it simulates
ExptEncΠ(cid:48)(cid:48),A,O. Thus, denoting by ExptPRFN,b the experiment
where the bit b is chosen, we have:
Prob[ExptPRFNA2,E
= 1]
1
2Prob[ExptPRFN,0
A2,E
1
2Prob[ExptEncRFΠ(cid:48)(cid:48),A,O = 0] +
= 1] +
=
=
1
2Prob[ExptPRFN,1
A2,E
= 1]
1
2Prob[ExptEncΠ(cid:48)(cid:48),A,O = 1]
where the last equality is due to the fact that we wish to analyze
when A2 outputs b(cid:48) = b, as above. Using the same manipulation
as above, we have that Eq. (7) holds.
Combining Equations (6) and (7), we conclude that
AdvEncΠ(cid:48),A,O =
1
2 · AdvKDFA1,F
1
2 · AdvPRFNA2,E
+
completing the proof.
+ AdvEncRFN
Π(cid:48)(cid:48),A,O,
(cid:3)
3.2 Security for Random-IV Encryption
In the case of encryption using a random IV, the adversary does
not input nonces. Furthermore, since an IV can repeat and does so
with high probability when the birthday bound is approached, the
.
analysis is di(cid:29)erent to that of a “nonce-respecting” adversary for
which unique nonces are guaranteed. We treat this by bounding the
number of times that an IV will repeat and then using this as the
upper bound on the number of times each random function is used
in ExptEncRF. Towards this, we use the bound in Theorem 2.1, that
states that the probability that at least one IV of length (cid:96) bits repeats
at least 4 times out of q randomly selected IVs is at most
We now apply this by bounding the number of times the ith
random function is used by 2m+2, where 2m − 1 is the maximum
length of any message encrypted or decrypted in the encryption
experiment. The fact that no more than 3 collisions are observed is
taken into account by adding
to the bound. Furthermore, we
take 2m+2 as an upper bound on the number of blocks encrypted
using any single nonce since we “allow” 3-way collisions and so
the same IV can be used to encrypt three messages, each of length
less than 2m.)
q4
24·23(cid:96)
q4
24·23(cid:96)
Given the above, it follows that for every encryption scheme
Π with IV of length (cid:96) bits and every (t, N, QE , (cid:126)QD , (cid:126)B, a, m)-IV ad-
versary A,2 there exists a (t, N(cid:48), (cid:126)QE , (cid:126)QD , (cid:126)B(cid:48), a, m)-nonce adversary
A(cid:48) such that
AdvEncΠ,A,O ≤ AdvEncΠ,A(cid:48),O + QE
4
(8)
24 · 23(cid:96)
where N(cid:48) = N + QE, and for every i it holds that Qi
E ≤ 3 and
B(cid:48)
i ≤ Bi + 2m+2. (Recall that in the random-IV game, N only refers
to the nonces in decryption queries; therefore the number of nonces
overall in the nonce-game with A(cid:48) is at most N + QE. Also, B(cid:48)
i ≤
Bi + 2m+2 since the number of blocks encrypted or decrypted
with the ith nonce is equal to the number decrypted by A plus an
additional 3 encryptions at most.) The adversary A(cid:48) just invokes A
and chooses the nonces used in encryption at random. As long as
there is no 4-way collision on an IV, it follows that A(cid:48) distinguishes
successfully whenever A does. Thus, A(cid:48)’s advantage is at least that
of A, minus the probability of a 4-way collision. Eq. (8) follows.
.
Combining Theorem 3.1 with Eq. (8), we have:
Theorem 3.2 (random-IV-based encryption schemes). Let
Π = (Gen, Enc, Dec) be a random-IV-based encryption scheme using
block cipher E and an IV of length (cid:96) bits, let Π(cid:48) be the scheme obtained
by applying the key derivation function F to the nonce in order to
derive the key for encrypting the message, and let Π(cid:48)(cid:48) be the same as
Π(cid:48) except that a truly random function is used instead of F.
Consider any black-box encryption game with oracle O. Then, for
every (t, N, QE , (cid:126)QD , (cid:126)B, a, m)-IV adversary A, there exists an (O (t ), N(cid:48))-
adversary A1 for F, and an (O (t ), N(cid:48), (cid:126)B(cid:48), µ)-adversary A2 for E
where µ depends on Π, and a (t, N(cid:48), (cid:126)QE , (cid:126)QD , (cid:126)B(cid:48), a, m)-nonce adver-
sary A3 for Π(cid:48)(cid:48) such that
1
2 · AdvKDFA1,F
1
2 · AdvPRFN(cid:48)
A2,E
Π(cid:48)(cid:48),A3,O + QE
where N(cid:48) = N + QE, and for every i it holds that Qi
B(cid:48)
i ≤ Bi + 2m+2.