长度。
另外，实现 Hot Swap 的 EPL 模型，如果同一时间点有许多数据，就在中途修改规
则。为保证语义的完整性和不丢失结果数据，这一时间点的数据将按新的规则重新
计算。所以可能在这一时间点产生重复结果数据。解决方法：在此 EPL 后级联一个计算。所以可能在这一时间点产生重复结果数据。解决方法：在此 EPL 后级联一个
Filter，这个 Filter 用 Watermark 去重输出。
以嵌入式方式使用 Hot Swap 功能的话，可以使用下面示例 Java 代码中的 API。
[java] view plaincopy 
1.staticpublicvoid main(String[] args) 
2.{ 
3.    GraphModelData graphModelData = GraphModelExecutorUtil 
4.            .convertXmlToObject("files/hotswap/demoquery.xml"); 
5.    graphModelData.getSODSQLs().clear(); 
6.    //使用 HotSwap 时，查询名称 demoquery、流名称 stock 与原模型保持不变7.    graphModelData 
8.            .getSODSQLs() 
9.            .add("CREATE QUERY demoquery SELECT T1._start_time_ AS i
d,T1.name AS name,T1.price AS price FROM T1:stock PATTERN T1 WHERE T
1.price>80 WITHIN 0"); 
10.    GraphModelExecutorI graphModelExecutor = new GraphModelExecutorI
mpl(); 
11.try
12.    { 
13.        // 以 Hot Swap 模式启动 EPL 
14.        graphModelExecutor.executeGraphModelHotSwap(graphModelData,"demo"); 
15.        Thread.sleep(10000); 
	北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
17.        graphModelExecutor.stopGraphModelHotSwap(); 
18.        System.out.println("restart hotswap "); 
19.        Thread.sleep(10000); 
20.        // 修改 SODSQL,输入不停止
21.        graphModelData.getSODSQLs().clear(); 
22.        graphModelData 
23.                .getSODSQLs()23.                .getSODSQLs() 
24.                .add("CREATE QUERY demoquery SELECT T1._start_time_ 
AS id,T1.name AS name,T1.price AS price FROM T1:stock PATTERN T1 WHE
RE T1.price>50 WITHIN 0"); 
25.    } catch (InterruptedException e) 
26.    { 
27.        e.printStackTrace(); 
28.    } 
29.    // 以 Hot Swap 模式重启 EPL 
30.    graphModelExecutor.restartGraphModelHotSwap(graphModelData, "demo"); 
31.} 
注意：要给 configuration/global.properties 中 maxqueuelength 配置足够大，表示 缓冲的事件数，能容得下 hotswap 切换过程中的事件。
以服务器方式使用 Hot Swap 功能时，则通过 Web service 接口或 RESTful 接口进 行调用。
大家装 SODBASE CEP Server 的时候会发现，它本身就是一个分布式系统，
可以非常方便的快速建立分布式运算模型。
1. 启用集群方法
只要修改
sodbase-cep-server-webservice-1.0.1/configuration/configuration/db.properties 即
可。所有的计算服务器共享了一个状态服务器 State Server,也就是 db.properties 中
的指向的数据库。的指向的数据库。
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
2. 状态服务器
状态服务器维护的是所有 EPL 和 CEP 模型的信息。通过 SODBASE CEP 自带的 工具 Server Admin 可以登录到任意一台计算服务器，管理员账号可以看到这个集群 的 EPL 模型部署情况，也可以操作计算服务器上运行的 CEP 模型实例。
管理员还可以根据数据字典，在数据库中做一些维护工作。
3.  CEP 模型运行状态
目前 Server Admin 开放版本中的模型状态有三种：运行中"started"、停止运行 "stopped"、刚部署未运行"installed"。但要注意，这些状态是用户要求模型所处的 状态，也就是说如果 SODBASE CEP Server 重启，原来处于"started"状态的所有 CEP 模型将被重启，原来处于"stopped"状态的 CEP 模型仍将处于停止状态。当然，模型的高可用性方法在前面文章中已有介绍，可与分布式集群结合使用。
4. 计算服务器间的通信
计算服务器间的通信一般由 socket 输入、输出适配器完成，通过计算服务器的连接，
形成一个分布式的计算拓扑。拓扑的透明程度可以由用户自己掌握，例如如何进行
数据的分发，哪些计算在哪些机器上执行。
5. 应用场景举例
（1）当一些 CEP 模型的运算量过大时，可能是数据速率过大、也可能是计算过为
复杂，大家可以用多台服务器来进行运算。
（2）EPL 规则大规模增长时，实现计算能力的扩展。
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
对于不懂程序的普通用户来说，类 SQL 的 EPL（事件处理语言）还是不够友 好的。例如在算法交易系统或一些监控系统中，往往需要给用户通过操作界面
来配置修改规则和策略。本文介绍一些帮助开发者完成这样功能的方法。来配置修改规则和策略。本文介绍一些帮助开发者完成这样功能的方法。
CEP 模型模板的原理：将模型 XML 文件中的参数用${variable}代替，放到 templateDir 目录中。然后用户配置阈值参数时，用阈值替换${variable}。阈值替换 的代码如下所示
[java] view plaincopy 
1.HashMap customization=new HashMap(); 
2.customization.put("variable","PI:EMAIL"); 
3.String ret = new ModelCustomization().customizeCEPModelXML(templateD 	ir,templateFileName,customization, generatedFilePath);制作用户界面如下图所示
许多监测系统、交易系统、实时数据挖掘分析算法是用 C++写的，而且第三方 接口也往往以 C++动态库的方式出现。当你更偏好于使用 C++编程语言的话，可以用 SODBASE CEP C++ 接口来搭建流式计算系统。本文相关的软件和代 北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
码可以到 ，下载软件。里
面有较为详细的介绍。
1. 只用 C++
一些项目中，希望就将 SODBASE CEP 引擎作为一个 C++的库，由 C++程序来调
用。可以用 C++版的接口，例如下面的代码
[cpp]  
1.#include  
2.#include  
3.#include  
4.#include "CEPModelExecutionUtil.h"4.#include "CEPModelExecutionUtil.h" 
5.#include "ServerManagementImpl.h" 
6.int main(int argc,char** argv) 
7.{ 
8.    //set the CEP engine home path 
9.    GraphModelExecutionUtil_set_cep_home("./cep_home"); 
10.    //run the CEP model 
11.    GraphModelExecutionUtil_runXML("files/filter6.xml"); 
12.struct timespec req, rem; 
13.    req.tv_sec =  1; 
14.    req.tv_nsec = 0; 
15.    nanosleep(&req,&rem);15.    nanosleep(&req,&rem); 
16.    //inset event to the stream 
17.    ServerManagementImpl_insertevent("filter6.input","price:20.0,nam
e:Google,volumn:100","double,string,double"); 
18.    cepengine_wait_to_close(); 
19.return 0; 
20.} 
2. Java 调用 C/C++库
如果用 Java 版的 SODBASE CEP 引擎或服务器，里面需要调用 C++的代码或程序，
linux 下可以使用
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程SODBASECEP 入门与进阶教程
com.sodbase.outputadaptor.clib.linux.LinuxClibraryOutputAdaptor 适配器，每个事
件输出会调用动态链接库中函数。配置如下
参数 1：动态库路径。可以为绝对地址。如果设置为相对地址，目前版本的
LinuxClibraryOutputAdaptor 会到 SODBASE CEP  Server 的 clib 目录中寻找。
参数 2：函数名
参数 3：函数的第 1 个参数
参数 4：函数的第 2 个参数
。。。函数还有参数就继续往下加
参数里面可以引用输出结果中的字段值，例如下面的?{id} 
[html] view plaincopy 
1.
2.true3.com.sodbase.outputadaptor.clib.linux.Lin
uxClibraryOutputAdaptor
4.sodbase_c_trade_stub.so
5.buy
6.?{id}
7.20
8.false
9.filter5
10.
在 IT 系统运维和性能监控中，常常需要对日志进行分析，得到系统的故障点或在 IT 系统运维和性能监控中，常常需要对日志进行分析，得到系统的故障点或
性能瓶颈。采用现成的日志分析软件，通常着重于监测节点和网络状态，几乎
都难以满足大型应用系统对故障点或性能瓶颈分析的要求。
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
举几个例子：
（1）找出故障的上下层调用的关系，定位应用层故障对应的底层接口
（2）分析父子调用的时间差，找出性能瓶颈
（3）分析指定系统调用和服务的响应时间、是否超时
SODBASE CEP 可以处理各类复杂的日志实时分析和图表显示功能。用户可以自己
定义日志服务接口，采集日志数据，也可以用一些日志采集客户端，如 flume、splunk
等，完成采集功能。
本文用 flume 作为日志采集客户端，将日志信息发送到 SODBASE CEP 引擎。
1.操作步骤1.操作步骤
（1）Windows 环境（Linux 环境类似），安装 JDK1.6+ 
（2）下载 
解压点击 cepstudio.exe 打开 
下载 
在 SODBASE Studio 中点击菜单“文件”->“导入" 选择 loganalysis.sod 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
在工作区面板空白处，右键点击测试运行
（3）下载 ，解压到 E:\software 或其它自定义
目录。
用记事本代开 flume 的 bin/flume-win.bat，需要编辑两个地方：FLUME_HOME，
flume 解压后的目录；JAVA_HOME，设置自己的 JDK 安装目录。
（4）运行 flume-win.bat 
（5）结果输出。在 Studio 中可以看到接收的日志结果，如下图所示（5）结果输出。在 Studio 中可以看到接收的日志结果，如下图所示
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
示例操作完成，如果想了解工作原理，请看下文。
2.工作原理
flume 比较其它日志采集客户端的优点是 Java 编写跨平台，轻量级，不需要安装额 外的如 elasticsearch 等检索软件。本文用 flume 作为日志采集客户端，将日志信息 发送到 SODBASE CEP 引擎。示例中，我们实现一个将数据通过 socket 传输到 CEP 引擎的 Sink。在 CEP 引擎中通过 socket 输入适配器负责接收数据。
需要用到的类库有 sodbase-cep-engine.jar,sodbase-dataadaptor-socket.jar，运行 时放到 flume 的 lib 目录下即可。注：sodbase-cep-engine.jar 在 flume 中用的版本 需要和 CEPserver 中的版本一致，保证对象能够正常解序列化。[java] view plaincopy 
1.package com.sodbase.dataadaptor.flume; 
2.
3.import java.io.IOException; 
4.import java.util.Date; 
5.
6.import org.apache.flume.Channel; 
7.import org.apache.flume.Context; 
8.import org.apache.flume.Event; 
9.import org.apache.flume.EventDeliveryException; 
10.import org.apache.flume.Transaction; 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程SODBASECEP 入门与进阶教程
11.import org.apache.flume.conf.Configurable; 
12.import org.apache.flume.sink.AbstractSink; 
13.
14.import com.sodbase.outputadaptor.socket.SocketUtil; 
15.
16.import zstreamplus.eventbuffer.PrimitiveEvent; 
17.import zstreamplus.eventbuffer.ValueType; 
18.
19.publicclass CEPServerSink extends AbstractSink implements Configura
ble 
20.{ 
21.private String CEPServerSocketIpPort;22.private String retrynum; 
23.privatestaticfinal String DEFAULT_ENCODING = "UTF-8"; 
24.private SocketUtil socketUtil=new SocketUtil(); 
25.    @Override 
26.publicvoid configure(Context context) 
27.    { 
28.        /** 
29.         * 在 flume-conf.properties 中配置
30.         */ 
31.        CEPServerSocketIpPort = context.getString("CEPServerSocketIp
Port", 
32.                "localhost:12345");32.                "localhost:12345"); 
33.        retrynum = context.getString("CEPServerSocketRetryNum", "30"
); 
34.    } 
35.
36.    @Override 
37.publicvoid start() 
38.    { 
39.        socketUtil.setRunning(true); 
40.    } 
41.
42.    @Override 
43.publicvoid stop() 
44.    { 
45.        socketUtil.setRunning(false); 