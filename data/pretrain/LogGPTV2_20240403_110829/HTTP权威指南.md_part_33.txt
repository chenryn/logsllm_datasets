7.10.2 通过HTTP-EQUIV控制HTML缓存
HTTP服务器响应首部用于回送文档的到期信息以及缓存控制信息。Web服务器与
配置文件进行交互，为所提供的文档分配正确的Cache-Control首部。
为了让作者在无需与Web服务器的配置文件进行交互的情况下，能够更容易地为所
提供的HTML文档分配HTTP首部信息，HTML 2.0定义了
标签。这个可选的标签位于HTML文档的顶部，定义了应该与文档有所关联的
HTTP首部。这里有一个标签设置的例子，它将HTML文档
标记为非缓冲的：
My Document
...
最初，HTTP-EQUIV标签是给Web服务器使用的。如HTML RFC 1866所述，Web
服务器应该为HTML解析标签，并将规定的首部插入HTTP
响应中：
HTTP服务器可以用此信息来处理文档。特别是，它可以在为请求此文档的报文所
发送的响应中包含一个首部字段：首部名称是从HTTP-EQUIV属性值中获取的，首
部值是从CONTENT属性值中获取的。
不幸的是，支持这个可选特性会增加服务器的额外负载，这些值也只是静态的，而
且它只支持HTML，不支持很多其他的文件类型，所以很少有Web服务器和代理支
持此特性。
但是，有些浏览器确实会解析并在HTML内容中使用HTTP-EQUIV标签，像对待真
的HTTP首部那样来处理嵌入式首部（参见图7-17）。这样的效果并不好，因为支
持HTTP-EQUIV标签的HTML浏览器使用的Cache-control规则可能会与拦截代
理缓存所用的规则有所不同。这样会使缓存的过期处理行为发生混乱。
总之，标签并不是控制文档缓存特性的好方法。通过配置正
确的服务器发出HTTP首部，是传送文档缓存控制请求的唯一可靠的方法。
196 ｜ 第7章
HTML文件
可以对某些HTTP服务器进行配置，使其为HTML文
标签。这些 CONTENT="text/html; charset=utf-8">
（HTML文档中的）元数据标签描述了作者希望客户 
端接收的HTTP首部。 
Welcome to XYZ Industries, a
但是，大部分Web服务器并不处理HTTP-EQUIV标签， leader in mechanical drilling
会这么做的代理则更少。这样，客户端缓存就会收到 machines for 30 years. Our new line of
100% automated manufacturing tools sets
代理缓存并不一定能看得到的Cache-control命令。 the standard for CAM, at a suprisingly
low price.
HTML请求 
GET /xyz.html HTTP/1.0
客户端 HTTP/1.0 200 OK 服务器
Date: Fri, 07 Apr 2002, 19:21:13 GMT
Content-length: 124
Cache-control: max-age=3600
Content-type: text/html; charset=utf-8
Welcome to XYZ Industries, a leader
in mechanical drilling machines for...
HTTP响应
有些服务器会在响应首部插入HTTP-EQUIV
特有的首部，传送给代理。有些服务器则不会。
图7-17 大多数软件都会忽略HTTP-EQUIV 标签，所以这些标签可能会带来一些问题
7.11 详细算法
HTTP规范提供了一个详细，但有点儿含糊不清而且经常会让人混淆的算法，来计
算文档的使用期以及缓存的新鲜度。本节会对HTTP的新鲜度计算算法进行详细的
讨论（参见图7-12中那个“足够新鲜？”菱形框），并对此算法的动机进行解释。 187
本节最适用于那些研究缓存内部机制的人。为了便于说明HTTP规范中的内容，我
们使用了Perl伪代码。如果对计算缓存过期时间的公式中那些繁复的细节不感兴趣
的话，可以跳过这一节。 188
缓 存 ｜ 197
7.11.1 使用期和新鲜生存期
为了分辨已缓存文档是否足够新鲜，缓存只需要计算两个值：已缓存副本的使用期
（age），和已缓存副本的新鲜生存期（freshness lifetime）。如果已缓存副本的时长小
于新鲜生存期，就说明副本足够新鲜，可以使用。用Perl表示为：
$is_fresh_enough = ($age < $freshness_lifetime);
文档的使用期就是自从服务器将其发送出来（或者最后一次被服务器再验证）之后
“老去”的总时间。19缓存可能不知道文档响应是来自上游缓存，还是来自服务器
的，所以它不能假设文档是最新的。它必须根据显式的Age首部（优先），或者通
过对服务器生成的Date首部的处理，来确定文档的使用期。
文档的新鲜生存期表明，已缓存副本在经过多长时间之后，就会因新鲜度不足而无
法再向客户端提供了。新鲜生存期考虑了文档的过期日期，以及客户端可能请求的
任何新鲜度覆盖范围。
有些客户端可能愿意接受稍微有些过期的文档（使用Cache-Control: max-stale
首部）。有些客户端可能无法接受会在近期过期的文档（使用Cache-Control:
min-fresh首部）。缓存将服务器过期信息与客户端的新鲜度要求结合在一起，以
确定最大的新鲜生存期。
7.11.2 使用期的计算
响应的使用期就是服务器发布响应（或服务器对其进行了再验证）之后经过的总
时间。使用期包含了响应在因特网路由器和网关中游荡的时间，在中间节点缓存
中存储的时间，以及响应在你的缓存中停留的时间。例 7-1 给出了使用期计算的
伪代码。
例7-1 HTTP/1.1使用期计算算法计算了已缓存文档的总体使用期
$apparent_age = max(0, $time_got_response - $Date_header_value);
$corrected_apparent_age = max($apparent_age, $Age_header_value);
$response_delay_estimate = ($time_got_response - $time_issued_request);
$age_when_document_arrived_at_our_cache =
$corrected_apparent_age + $response_delay_estimate;
$how_long_copy_has_been_in_our_cache = $current_time - $time_got_response;
$age = $age_when_document_arrived_at_our_cache +
$how_long_copy_has_been_in_our_cache;
注19： 记住，服务器上总是有所有文档的最新版本的。
198 ｜ 第7章
HTTP使用期计算的细节有点儿棘手，但其基本概念很简单。响应到达缓存时，缓
存可以通过查看Date首部或Age首部来判断响应已使用的时间。缓存还能记录下
文档在本地缓存中的停留时间。把这些值加在一起，就是响应的总使用期。HTTP
用一些魔法对时钟偏差和网络时延进行了补偿，但基本计算非常简单： 189
$age = $age_when_document_arrived_at_our_cache +
$how_long_copy_has_been_in_our_cache;
缓存可以很方便地判断出已缓存副本已经在本地缓存了多长时间（这就是简单的簿
记问题），但很难确定响应抵达缓存时的使用期，因为不是所有服务器的时钟都是
同步的，而且我们也不知道响应到过哪里。完善的使用期计算算法会试着对此进行
补偿。
1. 表面使用期是基于Date首部的
如果所有的计算机都共享同样的、完全精确的时钟，已缓存文档的使用期就可以是
文档的“表面使用期”——当前时间减去服务器发送文档的时间。服务器发送时间
就是Date首部的值。最简单的起始时间计算可以直接使用表面时间：
$apparent_age = $time_got_response - $Date_header_value;
$age_when_document_arrived_at_our_cache = $apparent_age;
但并不是所有的时钟都实现了良好的同步。客户端和服务器时钟之间可能有数分钟
的差别，如果时钟没有设置好的话，甚至会有数小时或数天的区别。20
Web应用程序，尤其是缓存代理，要做好与时间值有很大差异的服务器进行交互
的准备。这种问题被称为时钟偏差（clock skew）——两台计算机时钟设置的不同。
由于时钟偏差的存在，表面使用期有时会不太准确，而且有时会是负的。
如果使用期是负的，就将其设置为零。我们还可以对表面使用期进行完整性检查，
以确定它没有大得令人不可思议，不过，实际上，表面使用期可能并没错。我们
可能在与一个将文档缓存了很久的父缓存对话（缓存可能还存储了原始的Date首
部）：
$apparent_age = max(0, $time_got_response - $Date_header_value);
$age_when_document_arrived_at_our_cache = $apparent_age;
要明确Date首部描述的是原始服务器的日期。代理和缓存一定不能修改这个日期！
注20： HTTP规范建议客户端、服务器和代理使用NTP这样的时间同步协议来强制使用统一的时间基准。
缓 存 ｜ 199
2. 逐跳使用期的计算
这样就可以去除时钟偏差造成的负数使用期了，但对时钟偏差给精确性带来的整体
偏差，我们能做的工作很少。文档经过代理和缓存时，HTTP/1.1会让每台设备都将
相对使用期累加到Age首部中去，以此来解决缺乏通用同步时钟的问题。这种方式
并不需要进行跨服务器的、端到端的时钟对比。
文档经过代理时，Age首部值会随之增加。使用HTTP/1.1的应用程序应该在Age
190 首部值中加上文档在每个应用程序和网络传输过程中停留的时间。每个中间应用程
序都可以很容易地用本地时钟计算出文档的停留时间。
但响应链中所有的非HTTP/1.1设备都无法识别Age首部，它们会将首部未经修改
地转发出去，或者将其删除掉。因此，在HTTP/1.1得到普遍应用之前，Age首部
都将是低估了的相对使用期。
除了基于Date计算出来的Age之外，还使用了相对Age值，而且不论是跨服务器
的Date值，还是计算出来的Age值都可能被低估，所以会选择使用估计出的两个
Age值中最保守的那个（最保守的值就是最老的Age值）。使用这种方式，HTTP就
能容忍Age首部存在的错误，尽管这样可能会搞错究竟哪边更新鲜：
$apparent_age = max(0, $time_got_response - $Date_header_value);
$corrected_apparent_age = max($apparent_age, $Age_header_value);
$age_when_document_arrived_at_our_cache = $corrected_apparent_age;
3. 对网络时延的补偿
事务处理可能会很慢。这是使用缓存的主要动因。但对速度非常慢的网络，或者那
些过载的服务器来说，如果文档在网络或服务器中阻塞了很长时间，相对使用期的
计算可能会极大地低估文档的使用期。
Date首部说明了文档是在什么时候离开原始服务器的，21但并没有说明文档在到缓
存的传输过程中花费了多长时间。如果文档的传输经过了一长串的代理和父缓存，
网络时延可能会相当大。22
没有什么简便的方法可以用来测量从服务器到缓存的单向网络时延，但往返时延则
比较容易测量。缓存知道它请求文档的时间，以及文档抵达的时间。HTTP/1.1会在
这些网络时延上加上整个往返时延，以便对其进行保守地校正。这个从缓存到服务
注21： 注意，如果文档来自一个父缓存，而不是原始服务器，Date首部反映的仍是原始服务器，而不是父
缓存上的日期。
注22： 实际上，这个时延不会高于几十分之一秒（不然用户就会放弃），但即使是对生存期很短的对象来说，
HTTP的设计者也希望使用尽可能精确的过期时间。
200 ｜ 第7章
器再到缓存的时延高估了从服务器到缓存的时延，但它是保守的。如果出错了，它
只会使文档看起来比实际使用期要老，并引发不必要的再验证。计算是这样进行的： 191
$apparent_age = max(0, $time_got_response - $Date_header_value);
$corrected_apparent_age = max($apparent_age, $Age_header_value);
$response_delay_estimate = ($time_got_response - $time_issued_request);
$age_when_document_arrived_at_our_cache =
$corrected_apparent_age + $response_delay_estimate;
7.11.3 完整的使用期计算算法
上一节说明了当HTTP所承载的文档抵达缓存时，如何计算其使用期。只要将这条
响应存储到缓存中去，它就会进一步老化。当对缓存中文档的请求到达时，我们需
要知道文档在缓存中停留了多长的时间，这样才能计算文档现在的使用期：
$age = $age_when_document_arrived_at_our_cache +
$how_long_copy_has_been_in_our_cache;
嗒嗒！这样就有了例7-1中给出的完整的HTTP/1.1使用期计算算法。这就是简单的
簿记问题了——我们知道了文档是什么时候到达缓存的（$time_got_reponse），
也知道当前请求是什么时候到达的（刚才），这样停留时间就是两者之差了。所有这
些都以图形方式显示在图7-18中了。
已缓存文档的使用期
服务器 服务器 响应的
处理时间 处理时间 网络时延
date_value
服务器
current_time
缓存停留时间
time_issued_request time_got_response
缓存
time_client_issued_request
客户端
图7-18 已缓存文档的使用期包括在网络和缓存中停留的时间
缓 存 ｜ 201
7.11.4 新鲜生存期计算
回想一下，我们是在想办法弄清楚已缓存文档是否足够新鲜，是否可以提供给客户
端。要回答这个问题，就必须确定已缓存文档的使用期，并根据服务器和客户端限
制来计算新鲜生存期。我们刚刚解释了如何计算使用期；现在我们来看看新鲜生存
期的计算。