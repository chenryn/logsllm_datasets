2. You can review the contents of the raw LSO data directly on disk. The
location of this data depends on the browser and operating system. For
example, on recent versions of Internet Explorer, the LSO data resides
within the following folder structure:
C:\Users\{username}\AppData\Roaming\Macromedia\Flash Player\
#SharedObjects\{random}\{domain name}\{store name}\{name of
SWF file}
TRY IT!
http://mdsec.net/auth/245/
Silverlight Isolated Storage
The Silverlight browser extension implements its own local storage mechanism
called Silverlight Isolated Storage.
HACK STEPS
You can review the contents of the raw Silverlight Isolated Storage data
directly on disk. For recent versions of Internet Explorer, this data resides
within a series of deeply nested, randomly named folders at the following
location:
C:\Users\{username}\AppData\LocalLow\Microsoft\Silverlight\
TRY IT!
http://mdsec.net/auth/239/
cc1133..iinndddd 555533 88//1199//22001111 1122::1144::0033 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 554
554 Chapter 13 n Attacking Users: Other Techniques
Internet Explorer userData
Internet Explorer implements its own custom local storage mechanism called
userData.
HACK STEPS
You can review the contents of the raw data stored in IE’s userData directly on
disk. For recent versions of Internet Explorer, this data resides within the fol-
lowing folder structure:
C:\Users\user\AppData\Roaming\Microsoft\Internet Explorer\
UserData\Low\{random}
TRY IT!
http://mdsec.net/auth/232/
HTML5 Local Storage Mechanisms
HTML5 is introducing a range of new local storage mechanisms, including:
n Session storage
n Local storage
n Database storage
The specifi cations and usage of these mechanisms are still evolving. They are
not fully implemented in all browsers, and details of how to test for their usage
and review any persisted data are likely to be browser-dependent.
Preventing Local Privacy Attacks
Applications should avoid storing anything sensitive in a persistent cookie.
Even if this data is encrypted, it can potentially be resubmitted by an attacker
who captures it.
Applications should use suitable cache directives to prevent sensitive data
from being stored by browsers. In ASP applications, the following instructions
cause the server to include the required directives:
In Java applications, the following commands should achieve the same result:
cc1133..iinndddd 555544 88//1199//22001111 1122::1144::0033 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 555
Chapter 13 n Attacking Users: Other Techniques 555
Applications should never use URLs to transmit sensitive data, because these
are liable to be logged in numerous locations. All such data should be transmit-
ted using HTML forms that are submitted using the POST method.
In any instance where users enter sensitive data into text input fi elds, the
autocomplete=off attribute should be specifi ed within the form or fi eld tag.
Other client-side storage mechanisms, such as the new features being intro-
duced with HTML5, provide an opportunity for applications to implement
valuable application functionality, including much faster access to user-specifi c
data and the ability to keep working when network access is not available. In
cases where sensitive data needs to be stored locally, this should ideally be
encrypted to prevent easy direct access by an attacker. Furthermore, users
should be advised of the nature of the data that is being stored locally, warned
of the risks of local access by an attacker, and allowed to opt out of this feature
if they want to.
Attacking ActiveX Controls
Chapter 5 described how applications can use various thick-client technologies
to distribute some of the application’s processing to the client side. ActiveX con-
trols are of particular interest to an attacker who targets other users. When an
application installs a control to invoke it from its own pages, the control must be
registered as “safe for scripting.” After this occurs, any other website accessed
by the user can use that control.
Browsers do not accept just any ActiveX control that a website asks them to
install. By default, when a website seeks to install a control, the browser pres-
ents a security warning and asks the user for permission. The user can decide
whether she trusts the website issuing the control and allow it to be installed
accordingly. However, if she does so, and the control contains any vulnerabilities,
these can be exploited by any malicious website the user visits.
Two main categories of vulnerability commonly found within ActiveX controls
are of interest to an attacker:
n Because ActiveX controls typically are written in native languages such
as C/C++, they are at risk from classic software vulnerabilities such as
buffer overfl ows, integer bugs, and format string fl aws (see Chapter 16
for more details). In recent years, a huge number of these vulnerabilities
cc1133..iinndddd 555555 88//1199//22001111 1122::1144::0044 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 556
556 Chapter 13 n Attacking Users: Other Techniques
have been identifi ed within the ActiveX controls issued by popular web
applications, such as online gaming sites. These vulnerabilities normally
can be exploited to cause arbitrary code execution on the computer of
the victim user.
n Many ActiveX controls contain methods that are inherently dangerous
and vulnerable to misuse:
n LaunchExe(BSTR ExeName)
n SaveFile(BSTR FileName, BSTR Url)
n LoadLibrary(BSTR LibraryPath)
n ExecuteCommand(BSTR Command)
Methods like these usually are implemented by developers to build some
fl exibility into their control, enabling them to extend its functionality in the
future without needing to deploy a fresh control. However, after the control
is installed, it can, of course, be “extended” in the same way by any malicious
website to carry out undesirable actions against the user.
Finding ActiveX Vulnerabilities
When an application installs an ActiveX control, in addition to the browser
alert that asks your permission to install it, you should see code similar to the
following within the HTML source of an application page:
This code tells the browser to instantiate an ActiveX control with the speci-
fi ed name and classid and to download the control from the specifi ed URL. If
a control is already installed, the codebase parameter is not required, and the
browser locates the control from the local computer, based on its unique classid.
If a user gives permission to install the control, the browser registers it as “safe
for scripting.” This means that it can be instantiated, and its methods invoked,
by any website in the future. To verify for sure that this has been done, you can
check the registry key HKEY_CLASSES_ROOT\CLSID\classid of control taken
from above HTML\Implemented Categories. If the subkey 7DD95801-9882-
11CF-9FA9-00AA006C42C4 is present, the control has been registered as “safe for
scripting,” as shown in Figure 13-6.
cc1133..iinndddd 555566 88//1199//22001111 1122::1144::0044 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 557
Chapter 13 n Attacking Users: Other Techniques 557
Figure 13-6: A control registered as safe for scripting
When the browser has instantiated an ActiveX control, individual methods
can be invoked as follows:
HACK STEPS
A simple way to probe for ActiveX vulnerabilities is to modify the HTML that
invokes the control, pass your own parameters to it, and monitor the results:
1. Vulnerabilities such as buffer overflows can be probed for using the same
kind of attack payloads described in Chapter 16. Triggering bugs of this
kind in an uncontrolled manner is likely to result in a crash of the browser
process that is hosting the control.
2. Inherently dangerous methods such as LaunchExe can often be identi-
fied simply by their name. In other cases, the name may be innocuous or
obfuscated, but it may be clear that interesting items such as filenames,
URLs, or system commands are being passed as parameters. You should
try modifying these parameters to arbitrary values and determine whether
the control processes your input as expected.
It is common to fi nd that not all the methods implemented by a control are
actually invoked anywhere within the application. For example, methods may
have been implemented for testing purposes, may have been superseded but
not removed, or may exist for future use or self-updating purposes. To perform
a comprehensive test of a control, it is necessary to enumerate all the attack
surface it exposes through these methods, and test all of them.
cc1133..iinndddd 555577 88//1199//22001111 1122::1144::0044 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 558
558 Chapter 13 n Attacking Users: Other Techniques
Various tools exist for enumerating and testing the methods exposed by
ActiveX controls. One useful tool is COMRaider by iDefense, which can display
all of a control’s methods and perform basic fuzz testing of each, as shown in
Figure 13-7.
Figure 13-7: COMRaider showing the methods of an ActiveX control
Preventing ActiveX Vulnerabilities
Defending native compiled software components against attack is a large and
complex topic that is outside the scope of this book. Basically, the designers and
developers of an ActiveX control must ensure that the methods it implements
cannot be invoked by a malicious website to carry out undesirable actions against
a user who has installed it. For example:
n A security-focused source code review and penetration test should be car-
ried out on the control to locate vulnerabilities such as buffer overfl ows.
n The control should not expose any inherently dangerous methods that
call out to the fi lesystem or operating system using user-controllable
cc1133..iinndddd 555588 88//1199//22001111 1122::1144::0044 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 559
Chapter 13 n Attacking Users: Other Techniques 559
input. Safer alternatives are usually available with minimal extra effort.
For example, if it is considered necessary to launch external processes,
compile a list of all the external processes that may legitimately and safely
be launched. Then either create a separate method to call each one or use
a single method that takes an index number into this list.
As an additional defense-in-depth precaution, some ActiveX controls
validate the domain name that issued the HTML page from which they
are being invoked. Microsoft’s SiteLock Active Template Library template
allows developers to restrict the use of an ActiveX control to a specifi c list
of domain names.
Some controls go even further by requiring that all parameters passed to the
control must be cryptographically signed. If the signature passed is invalid, the
control does not carry out the requested action. You should be aware that some
defenses of this kind can be circumvented if the website that is permitted to
invoke the control contains any XSS vulnerabilities.
Attacking the Browser
The attacks described so far in this and the preceding chapter involve exploiting
some feature of an application’s behavior to compromise users of the application.
Attacks such as cross-site scripting, cross-site request forgery, and JavaScript
hijacking all arise from vulnerabilities within specifi c web applications, even
though the details of some exploit techniques may leverage quirks within spe-
cifi c browsers.
A further category of attacks against users does not depend on the behav-
ior of specifi c applications. Rather, these attacks rely solely on features of
the browser’s behavior, or on the design of core web technologies them-
selves. These attacks can be delivered by any malicious website or by any
benign site that has itself been compromised. As such, they lie at the edge
of the scope of a book about hacking web applications. Nevertheless, they
are worthy of brief consideration partly because they share some features
with attacks that exploit application-specifi c functions. They also provide
context for understanding the impact of various application behaviors by
showing what is possible for an attacker to achieve even in the absence of
any application-specifi c fl aws.
The discussion in the following sections is necessarily concise. There is cer-
tainly room for an entire book to be written on this subject. Would-be authors
with a signifi cant amount of spare time are encouraged to submit a proposal
to Wiley for TheBrowserHacker’sHandbook.
cc1133..iinndddd 555599 88//1199//22001111 1122::1144::0044 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 560
560 Chapter 13 n Attacking Users: Other Techniques
Logging Keystrokes
JavaScript can be used to monitor all keys the user presses while the browser
window has the focus, including passwords, private messages, and other per-
sonal information. The following proof-of-concept script captures all keystrokes
in Internet Explorer and displays them in the browser’s status bar:
These attacks can capture keystrokes only while the frame in which the code is
running has the focus. However, some applications leave themselves vulnerable
to keylogging when they embed a third-party widget or advertising applet in a
frame within the application’s own pages. In so-called “reverse strokejacking”
attacks, malicious code running in a child frame can grab the focus from the top-
level window, since this operation is not prevented by the same-origin policy. The
malicious code can capture keystrokes by handling onkeydown events and can
pass the separate onkeypress events to the top-level window. That way, typed
text still appears in the top-level window in the normal way. By relinquishing the
focus briefl y during pauses in typing, the malicious code can even maintain the
appearance of a blinking caret in the normal location within the top-level page.
Stealing Browser History and Search Queries
JavaScript can be used to perform a brute-force exercise to discover third-party
sites recently visited by the user and queries he has performed on popular search
engines. This technique was already described in the context of performing a
brute-force attack to identify valid anti-CSRF tokens that are in use on a differ-
ent domain. The attack works by dynamically creating hyperlinks for common
websites and search queries and by using the getComputedStyle API to test
whether the link is colorized as visited or not visited. A huge list of possible
targets can be quickly checked with minimal impact on the user.
Enumerating Currently Used Applications
JavaScript can be used to determine whether the user is presently logged in to
third-party web applications. Most applications contain protected pages that
can be viewed only by logged-in users, such as a My Details page. If an unau-
thenticated user requests the page, she receives different content, such as an
error message or a redirection to the login.
This behavior can be leveraged to determine whether a user is logged in to a
third-party application by performing a cross-domain script include for a pro-
tected page and implementing a custom error handler to process scripting errors:
window.onerror = fingerprint;
cc1133..iinndddd 556600 88//1199//22001111 1122::1144::0044 PPMM
Stuttard c13.indd V4 - 08/17/2011 Page 561
Chapter 13 n Attacking Users: Other Techniques 561
Of course, whatever state the protected page is in, it contains only HTML,
so a JavaScript error is thrown. Crucially, the error contains a different line
number and error type, depending on the exact HTML document returned.
The attacker can implement an error handler (in the fingerprint function) that
checks for the line number and error type that arise when the user is logged
in. Despite the same-origin restrictions, the attacker’s script can deduce what
state the protected page is in.
Having determined which popular third-party applications the user is pres-
ently logged in to, the attacker can carry out highly focused cross-site request
forgery attacks to perform arbitrary actions within those applications in the
security context of the compromised user.
Port Scanning
JavaScript can be used to perform a port scan of hosts on the user’s local net-
work or other reachable networks to identify services that may be exploitable.
If a user is behind a corporate or home fi rewall, an attacker can reach services
that cannot be accessed from the public Internet. If the attacker scans the client
computer’s loopback interface, he may be able to bypass any personal fi rewall
the user installed.
Browser-based port scanning can use a Java applet to determine the user’s
IP address (which may be NATed from the public Internet) and therefore infer
the likely IP range of the local network. The script can then initiate HTTP con-
nections to arbitrary hosts and ports to test connectivity. As described, the
same-origin policy prevents the script from processing the responses to these
requests. However, a trick similar to the one used to detect login status can be
used to test for network connectivity. Here, the attacker’s script attempts to
dynamically load and execute a script from each targeted host and port. If a web
server is running on that port, it returns HTML or some other content, result-
ing in a JavaScript error that the port-scanning script can detect. Otherwise,
the connection attempt times out or returns no data, in which case no error is
thrown. Hence, despite the same-origin restrictions, the port-scanning script
can confi rm connectivity to arbitrary hosts and ports.
Note that most browsers implement restrictions on the ports that can be
accessed using HTTP requests, and that ports commonly used by other well-
known services, such as port 25 for SMTP, are blocked. Historically, however,
bugs have existed in browsers that have enabled this restriction to sometimes