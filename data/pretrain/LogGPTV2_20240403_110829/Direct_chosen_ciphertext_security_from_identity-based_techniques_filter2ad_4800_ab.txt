We deﬁne the advantage of A in this game as AdvCCAA(λ) =
2|. An encryption system is (t, q, )-IND-CCA2
| Pr[b = b0]− 1
secure if there is no randomized algorithm A that runs in
time t, makes at most q decryption queries, and has advan-
tage at least  in the IND-CCA2 game.
2.2 Key Encapsulation
A Key Encapsulation Mechanism (KEM) is a cryptographic
primitive whose purpose is to securely convey a random ses-
sion key to the recipient. Unlike interactive key exchange
protocols such as Diﬃe-Hellman, the session key is entirely
determined by the random bits used by the sender. Unlike
with ordinary encryption as above, the session key is not a
message that can be chosen by the sender. Formally a KEM
is modeled by three algorithms:
Setup(λ): Takes as input a security parameter λ ∈ Z+. It
outputs a public key and a private key.
Encapsulate(PK): Takes as input a public key PK. It out-
puts a ciphertext and a session key.
Decapsulate(SK, C): Takes as input a private key SK and
a ciphertext C. It outputs a session key or the special
symbol ⊥.
The notion of adaptive chosen ciphertext security for key
encapsulation is similar to that for encryption, except that
there are no challenge messages to encrypt. Instead, in the
challenge phase the challenger ﬂips a coin b ∈ {0, 1}, and the
adversary is given a ciphertext C∗ and a string K∗, which
will be the session key encapsulated by the ciphertext if b =
1, or a random string if b = 0. The adversary makes adaptive
decapsulation queries (except on C∗, once revealed), and
eventually outputs a guess b0 for b.
We refer to this interaction as the KEM-CCA2 game, and
2|.
deﬁne the advantage of A as AdvCCAA(λ) = | Pr[b = b0]− 1
A key encapsulation system is (t, q, )-KEM-CCA2 secure if
there is no randomized algorithm A that runs in time t,
makes at most q decapsulation queries, and has advantage
at least  in the KEM-CCA2 game.
2.3 Asymmetric Bilinear Groups and Maps
Our constructions make use of bilinear pairings. For the
sake of generality, we shall describe them in the asymmet-
ric bilinear group framework, which provides for two, pos-
sibly distinct, isomorphic groups G and ˆG, between which
a bilinear map is deﬁned. Pairing-based encryption systems
have traditionally been described in the simpler symmet-
ric bilinear setting where these groups are equal, although
there are signiﬁcant practical beneﬁts to consider the more
general case (e.g., a broader choice of elliptic curve imple-
mentations, more compact ciphertexts, etc.). The security
of our systems relies on the familiar Bilinear Diﬃe-Hellman
assumption, which we restate in the asymmetric setting.
Let G and ˆG be a pair of (possibly distinct) cyclic groups
of large prime order p, related by some homomorphism φ :
ˆG → G. Let g ∈ G∗ and h ∈ ˆG∗ be generators of G and ˆG,
respectively, such that φ(h) = g. Let e : G × ˆG → GT be a
function that maps pairs of elements in (G, ˆG) to elements
of some group GT , where GT has order p (and is distinct
from G and ˆG). Further suppose that:
to tell whether (g, ga, h, ha) is a legitimate Diﬃe-Hellman
tuple using the bilinear map.
– the maps e, φ, and the respective group operations in
G, ˆG, and GT (written multiplicatively), are all eﬃ-
ciently computable;
– the map e is non-degenerate, i.e. e(g, h) 6= 1;
– the map e is bilinear, i.e., ∀u ∈ G,∀v ∈ ˆG,∀a, b ∈
Z, e(ua, vb) = e(u, v)ab.
Then we say that (G, ˆG) is a bilinear group pair, and that e
is a bilinear map or pairing in (G, ˆG).
We emphasize that, in our formulation, the homomor-
phism φ is only used in the abstract deﬁnitions, and not
in the actual constructions or even the security reductions.
The ‘asymmetry’ refers to the non-interchangeability of the
arguments of the bilinear map e.
2.4 Bilinear Difﬁe-Hellman Assumption
The Bilinear Diﬃe-Hellman (BDH) problem was ﬁrst pro-
posed in the symmetric setting in [19, 7], and later general-
ized to the asymmetric setting in the full version of [3]. The
generalization proposed by Boneh and Boyen diﬀers from
other proposals in that it does not require the homomor-
phism φ to be eﬃciently computable, which gives a weaker
assumption.
Thus, following Boneh and Boyen, we consider the BDH
problem stated for ﬁxed G, ˆG, GT , e, as follows:
Given (g, ga, gc, h, ha, hb) ∈ G3 × ˆG3 for random a, b, c ∈ Zp,
h ∈ ˆG∗, output e(g, h)abc ∈ GT .
Notice that φ and the elements gb and hc are omitted from
the statement.
Accordingly, we say that an algorithm A has advantage 
in solving the (computational) BDH problem in (G, ˆG) if
hA(g, ga, gc, h, ha, hb) = e(g, h)abci ≥ 
Pr
where the probability is over the random choice of generators
g ∈ G and h ∈ ˆG∗, the random choice of exponents a, b, c ∈
Zp, and the random bits used by A.
Similarly, we say that an algorithm B that outputs b ∈
{0, 1} has advantage  in solving the decisional BDH prob-
lem in (G, ˆG) if
hB(g, ga, gc, h, ha, hb, e(g, g)abc) = 0
i
i ≥ 
hB(g, ga, gc, h, ha, hb, T ) = 0
Pr
− Pr
where the probability is over the random choice of gener-
ators g ∈ G and h ∈ ˆG∗, the random choice of exponents
a, b, c ∈ Zp, the random choice of T ∈ GT , and the random
bits used by B.
We say that the (t, )-BDH or Decision (t, )-BDH as-
sumption holds in (G, ˆG) if no t-time algorithm has advan-
tage at least  in solving the BDH or Decision BDH problem
in (G, ˆG), respectively.
Observe that we avoid specifying φ in the BDH problem
instance by providing selected powers of both g and h to the
adversary. Indeed, providing g and ga would be unnecessary
if φ had been given. We note that, even in the general case,
providing both ga and ha may seem redundant, but it is
necessary to preserve the formal equivalence between G and
ˆG; it is also harmless since given a problem instance it is easy
3. SECURE ENCRYPTION FROM
ADAPTIVE-ID IBE
We now present our scheme which is a direct construction
based oﬀ the Waters [27] identity-based encryption scheme.
We ﬁrst describe our construction and then present the intu-
ition behind its security. The full proof is in the full version
of our paper [9].
3.1 Encryption System
Let G and ˆG be two cyclic groups of prime order, p, be-
tween which there exists an eﬃciently computable bilinear
map into GT . Speciﬁcally, let e : G × ˆG → GT denote the
bilinear map, and let g ∈ G and h ∈ ˆG be the corresponding
generators. The size p of the groups is determined by the
security parameter. We also assume the availability of some
collision resistant function family (but not necessarily one-
way). Without any further assumptions, we may use any
ﬁxed injective encoding H0 : GT × G → {0, 1}n, which by a
counting argument demands that n ≥ d2 log2(p)e. However,
since the public key size and encryption time will be seen
to grow linearly with n, it may be more economical as an
alternative to H0 to substitute a family of collision resistant
functions Hs : GT × G → {0, 1}n, indexed from some ﬁnite
set {s}, in which case adequate collision resistance may be
provided with an output size of only n ≈ log2(p).
The following description is written so as to provide the
most compact ciphertexts under the assumption that G’s el-
ements have a shorter representation than ˆG’s. An example
of this is when the bilinear map is realized as the Weil or
Tate pairing on certain algebraic curves, where G and ˆG are
subgroups of points in the ground ﬁeld and in an extension
ﬁeld, respectively.
If the converse is true—namely, if the
elements of ˆG have the shorter representation—it suﬃces
to exchange all occurrences of g and h and then swap the
arguments of all pairings e(·,·) to restore the short cipher-
text property. The same trick can be used if it is desirable
to minimize the private key size rather than the ciphertext.
Although this is not true in general, this trick is applicable
throughout this paper because G and ˆG play equivalent roles
in all our constructions.
The cryptosystem is described by the following three al-
gorithms.
Key Generation: A user’s public/private key pair gener-
ation algorithm proceeds as follows. First, a secret
α ∈ Zp is chosen at random, from which the values
h0 = hα and Z = e(g, h0) are calculated. Next, the
algorithm chooses a random y0 ∈ Zp and a random
n-length vector ~y = (y1, . . . , yn), whose elements are
chosen at random from Zp. It then calculates u0 = gy0
and ui = gyi for i = 1 to n. Finally, a random seed
s for the collision resistant family is chosen, if needed
(for notational convenience, we always write Hs, and
peg s = 0 whenever the injective encoding H0 is used).
` s, Z = e(g, h)α, u
The published public key is
= gy0
0
. . . , un = gyn ´ ∈ {s} × GT × Gn+1,
,
u1 = gy1 ,
and the private key is
` h0 = hα, y
0
, y1,
. . . , yn
´ ∈ ˆG × Zn+1
p
.
Encryption: A message M ∈ GT is encrypted as follows.
First, a value t ∈ Zp is randomly chosen. Next, the
ﬁrst two elements of the ciphertext are computed: C0 =
M · Z t = M · e(g, h)αt and C1 = gt. Next, a bit
string w ∈ {0, 1}n is derived as w = Hs(C0, C1). Let
w1w2 . . . wn denote the binary expansion of w, where
each bit wi ∈ {0, 1}. The ﬁnal step is to compute
i )t. The complete ciphertext, C =
i=1 uwi
(C0, C1, C2), consists of the three group elements
C2 = (u0Qn
“
M · Z t, gt, `u
0 nY
´t ” ∈ GT × G2.
uwi
i
i=1
ple (g, C1, u0Qn
Decryption: Let C = (C0, C1, C2) be a ciphertext and w =
Hs(C0, C1). In a well-formed ciphertext, the quadru-
, C2) ∈ G4 will be a Diﬃe-Hellman
tuple, which can be eﬃciently tested by the private key
holder as follows.
i=1 uwi
i
it raises C1 to the power of w0 = y0 +Pn
values are unequal, then (g, C1, u0Qn
Given a ciphertext C the algorithm ﬁrst computes w =
Hs(C0, C1), expressed in binary as w1w2 . . . wn. Next,
i=1 yiwi mod p,
and compares the result (C1)w0
with C2. If these two
, C2) is not
a Diﬃe-Hellman tuple, and the algorithm outputs ⊥.
Otherwise, the ciphertext is valid, and the algorithm
decrypts the message as
i=1 uwi
i
.
e(C1, h0) = M ∈ GT .
C0
3.2 Analogy to the Waters IBE
The above system bears a strong resemblence to Waters’
adaptive-ID semantically secure IBE [27]: the public and
private keys are essentially identical to the master public
and secret parameters in the IBE system, and the bit string
w plays the role of the recipient identity.
Other than notational diﬀerences, the distinguishing fea-
ture is that the identity is not chosen by the encryption party
but determined by the ﬁrst two ciphertext elements; it is this
feature that conveys our scheme its chosen ciphertext secu-
rity. Additionally, all the secret exponents u0, u1, . . . , un
are retained in the private key, which allows for faster va-
lidity checking and decryption than in the IBE system. (In
practice, these exponents could be generated from a pseudo
random number generator seeded by h0 in order to reduce
the cost of secure storage for the private key.)
Again, we note that while our scheme is derived from the
Waters IBE scheme, an IBE private key is never generated,
since it is more eﬃcient to decrypt directly using the “master
key”.
3.3 Security
We now give the intuition for the security of our system.
As noted before a ciphertext in our scheme is essentially
an IBE ciphertext where the identity is determined from the
ﬁrst two elements. It is possible to generate ciphertexts this
way since in the Waters scheme only the third ciphertext
element depends on the identity.
Our simulation roughly works as follows. For all decryp-
tion requests of a ciphertext C the simulator ﬁrst checks
0 , C∗
1 , C∗
that the ciphertext is well formed. This amounts to check-
ing the DDH property, which the simulator can do without
the private exponents by using the bilinear map. If the ci-
phertext is well formed, the simulator creates a private key
for the identity string determined from the ﬁrst two elements
of the ciphertext, and uses this to decrypt the ciphertext.
The simulator will then create a challenge ciphertext C∗ =
(C∗
2 ) which will be equivalent to an identity-based
encryption under the identity w∗ = Hs(C∗
1 ). Since Hs
is collision resistant (or injective), the adversary will not be
able to make any well-formed ciphertext queries that would
require the simulator to use an IBE key for the same iden-
tity string w∗. Thus, the security of our scheme follows by
virtue of the underlying IBE security. We emphasize that
even though C2 acts only as a checksum in the regular de-
cryption algorithm, it plays an active role in the decryption
process conducted by the simulator.
0 , C∗
We remark that the above argument is not a generic re-
duction from the underlying IBE. The problem is that in
the challenge phase of the IBE game, the adversary is al-
lowed to choose the identity it wants to attack, whereas
here it is the challenge ciphertext itself that determines the
target identity w∗. Additionally, we note that since C∗
0 de-
pends partially on input from the adversary; the value of
w∗ = Hs(C∗
0 , . . .) cannot be determined at setup time by
the simulator as in previous IBE-to-CCA2 transformations