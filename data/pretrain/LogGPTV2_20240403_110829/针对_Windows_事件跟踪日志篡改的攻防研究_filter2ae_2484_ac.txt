WriteEvent方法实现如下：
    internal void WriteEvent(PSEventId id, PSChannel channel, PSOpcode opcode, PSLevel level, PSTask task, PSKeyword keyword, params object[] args)
    {
      long keywords;
      if (keyword == PSKeyword.UseAlwaysAnalytic || keyword == PSKeyword.UseAlwaysOperational) {
        keywords = 0L;
      } else {
        keywords = (long)keyword;
      }
      EventDescriptor eventDescriptor = new EventDescriptor((int)id, 1, (byte)channel, (byte)level, (byte)opcode, (int)task, keywords);
      PSEtwLogProvider.etwProvider.WriteEvent(ref eventDescriptor, args);
    }
最后整理事件信息，并调用[EventWriteTransfer](https://docs.microsoft.com/en-us/windows/desktop/api/evntprov/nf-evntprov-eventwritetransfer)，将事件数据发送给Microsoft-Windows-PowerShell提供者。
发送  
给`EventWriteTransfer`的相关数据如下：
  * Microsoft-Windows-PowerShell提供者的GUID: `{A0C1853B-5C40-4b15-8766-3CF1C58F985A}`
  * Event ID: `PSEventId.ScriptBlock_Compile_Detail - 4104`
  * 通道值（Channel value）：`PSChannel.Operational - 16`，使用通道值表明提供者将被事件日志一起使用。[这里](https://github.com/PowerShell/PowerShell-Native/blob/master/src/PowerShell.Core.Instrumentation/PowerShell.Core.Instrumentation.man#L2194-L2202)可以查看PowerShell ETW manifest的通道定义。当未提供显式通道值时，[Message Compiler](https://docs.microsoft.com/en-us/windows/desktop/wes/message-compiler--mc-exe-)(mc.exe)将分配从16开始的默认值。由于首先定义了操作通道，因此分配了16条。
  * Opcode值（Opcode value）: `PSOpcode.Create - 15`
  * 日志记录级别（Logging Level）: `PSLevel.Warning - 3`
  * 任务值（Task value）: `PSTask.CommandStart-102`
  * 关键字值（Keyword value）:`PSKeyword.UseAlwaysAnalytic-0x40000000000000`。如上面的代码块所示，这个值之后被转换为0。通常情况下，不会记录这个事件，但是因为应用程序事件日志跟踪会话为其所有提供者设置了`EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0 Enable`，尽管未指定关键字值，但所有提供者都将记录该事件。
  * 事件数据（Event data）：代码内容和事件字段
PowerShell ETW提供者接收到事件后，事件日志服务将解析二进制`WEVT_TEMPLATE` schema([原始XML
schema](https://github.com/PowerShell/PowerShell-Native/blob/master/src/PowerShell.Core.Instrumentation/PowerShell.Core.Instrumentation.man))，并显示可读的、已解析的事件属性/字段：
###  amsi.dll事件跟踪
你可能已经注意到Windows
10有一个通常为空的AMSI/Operational事件日志。要理解为什么没有将事件记录到该事件日志，必须首先检查数据如何被输入AMSI
ETW提供者(`Microsoft-Antimalware-Scan-Interface -{2A576B87-09A7-520E-C21A-4942F0271D67}`)，然后观察事件日志跟踪会话(`EventLog-Application`)如何订阅AMSI ETW提供者。我们首先查看事件日志中的提供者注册情况。使用以下PowerShell命令查看：
    > Get-EtwTraceProvider -SessionName EventLog-Application -Guid '{2A576B87-09A7-520E-C21A-4942F0271D67}'
    SessionName     : EventLog-Application
    Guid            : {2A576B87-09A7-520E-C21A-4942F0271D67}
    Level           : 255
    MatchAnyKeyword : 0x8000000000000000
    MatchAllKeyword : 0x0
    EnableProperty  : {EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0, EVENT_ENABLE_PROPERTY_SID}
注意下面的信息：
  * 捕获操作通道事件(由MatchAnyKeyword值的0x8000000000000000设置)
  * 捕获所有日志记录级别
  * 即使事件关键字值为零，也应该捕获事件，通过`EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0`设置。
这些信息本身并不说明为什么AMSI事件不被记录，但它提供了在检查amsi.dll如何将事件写入ETW时所需的上下文信息。把amsi.dl加载到IDA中，我们可以看到`CAmsiAntimalware::GenerateEtwEvent`函数中有一个对`EventWrite`函数的调用：
调用`EventWrite`的相关部分是`EventDescriptor`参数。以下是一些关于将`EVENT_DESCRIPTOR`结构类型应用于`_AMSI_SCANBUFFER`的信息：
EventDescriptor上下文提供了相关信息：
  * 事件ID（Event ID）：1101(0x44D)，事件的详细信息可以从提取的manifest中获取，[这里](https://gist.github.com/mattifestation/6b3bbbea56cfc01bbfed9f74d94db618#file-microsoft-antimalware-scan-interface-manifest-xml-L12-L25)。
  * 通道（Channel）：16(0x10)，操作事件日志通道
  * 级别（Level）：4(Informational)
  * 关键词（Keyword）：0x80000000000001(AMSI/Operationor Event1)。这些值是通过运行`logman query providers Microsoft-Antimalware-Scan-Interface`命令得到的。
现在我们了解到，1101事件没有被记录到`ApplicationEvent`日志，因为它只考虑关键字值与`0x8000000000000000`匹配的事件。为了解决这个问题并将事件写入事件日志，需要修改事件日志跟踪会话(不建议使用，并且需要SYSTEM权限)，也可以创建自己的持久跟踪会话(例如[autologger](https://docs.microsoft.com/en-us/windows/desktop/etw/configuring-and-starting-an-autologger-session))，以便在事件日志中捕获AMSI事件。下面的PowerShell脚本创建这样一个跟踪会话：
    $AutoLoggerGuid = "{$((New-Guid).Guid)}"
    New-AutologgerConfig -Name MyCustomAutoLogger -Guid $AutoLoggerGuid -Start Enabled
    Add-EtwTraceProvider -AutologgerName MyCustomAutoLogger -Guid '{2A576B87-09A7-520E-C21A-4942F0271D67}' -Level 0xff -MatchAnyKeyword 0x80000000000001 -Property 0x41
运行上述命令后，重新启动，将开始写入AMSI事件日志。
逆向分析显示，`scanResult`字段引用的是`AMSI_RESULT`
enum，在本例中，32768映射到`AMSI_RESULT_DETECTED`，这表明缓冲区(内容字段中的Unicode编码缓冲区)被确定为是恶意的。
如果不了解ETW的内部结构，防御者就无法确定是否可以将额外的数据源(在本例中为AMSI日志)输入到事件日志中。同时不得不猜测AMSI事件是如何被错误配置的，以及错误配置是否是故意的。
## ETW篡改技术
如果攻击者的目标是破坏事件日志记录，那么ETW提供了一种隐蔽的机制来保护日志记录，而不会生成事件日志跟踪。下面是部分篡改技术，攻击者可以使用这些技术来切断特定事件日志的事件来源。
  1. 持久性——需要重新启动。也就是说，在攻击生效之前必须重新启动。更改可以恢复，但需要重新启动。这些攻击涉及更改[autologger](https://docs.microsoft.com/en-us/windows/desktop/etw/configuring-and-starting-an-autologger-session)，持久化ETW跟踪会话和注册表中的设置。与暂时的攻击相比，持久性攻击的类型更多，而且它们通常更容易被检测到。
  2. 暂时的——也就是说，可以在不重新启动的情况下攻击。
## 删除autologger提供者
**篡改类别：** 持久性, 需要重启
**最低权限：** Administrator
**检测方法：** 删除注册表项:  
HKLMSYSTEMCurrentControlSetControlWMIAutologgerAUTOLOGGER_NAME{PROVIDER_GUID}
**描述：** 这项技术涉及从配置的autologger中删除提供者条目。从autologger中删除提供者注册将导致事件停止传输相应的跟踪会话。
**示例：** 下面的PowerShell代码禁用Microsoft-WindowsPowerShell事件日志记录：
    Remove-EtwTraceProvider -AutologgerName EventLog-Application -Guid '{A0C1853B-5C40-4B15-8766-3CF1C58F985A}'
在上面的例子中，`A0C1853B-5C40-4B15-8766-3CF1C58F985A`引用了MicrosoftWindows-PowerShell
ETW提供者。该命令最终会删除`HKLMSystemCurrentControlSetControlWMIAutologgerEventLog-Application{a0c1853b-5c40-4b15-8766-3cf1c58f985a}`注册表项。
## 修改提供者“Enable”属性
**篡改类别：** 持久性, 需要重启
**最低权限：** Administrator
**检测方法：**
删除注册表项：`HKLMSYSTEMCurrentControlSetControlWMIAutologgerAUTOLOGGER_NAME{PROVIDER_GUID}-EnableProperty(REG_DWORD)`
**描述：** 这种技术涉及autologger的Enable关键字。例如，默认情况下，`EventLog-Application`
autoologger会话中的所有ETW提供者项都设置为0x41，这将转换为`EVENT_ENABLE_PROPERTY_SID`和`EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0`。`事件_Enable_Property_Enable_关键字_0`没有文档说明；它指定即使关键字值设置为0，也应该记录为提供者生成的任何事件。攻击者可以将`EVENT_ENABLE_PROPERTY_ENABLE_KEYWORD_0`替换为`Event_Enable_Property_NORE_KEKEY_0`，结果值为0x11，这将导致所有关键字为0的事件不启用日志记录。例如，PowerShell事件在其事件中提供了一个0关键字值，导致禁用了PowerShell事件日志。
**示例：** 下面的PowerShell代码禁用Microsoft-WindowsPowerShell事件日志记录：
    Set-EtwTraceProvider -Guid '{A0C1853B-5C40-4B15-8766-3CF1C58F985A}' -AutologgerName 'EventLog-Application' -Property 0x11
在上面的例子中，`A0C1853B-5C40-4B15-8766-3CF1C58F985A`引用了Microsoft Windows-PowerShell
ETW提供者。该命令将最终将`HKLMSystemCurrentControlSetControlWMIAutologgerEventLog-Application{a0c1853b-5c40-4b15-8766-3cf1c58f985a}EnableProperty`设置为0x11。重新启动后，将停用PowerShell事件日志。
攻击者不受限制，仅使用`[Set-EtwTraceProvider](https://docs.microsoft.com/en-us/powershell/module/eventtracmancmdlets/set-etwtraceprovider?view=win10-ps)`就能执行该攻击。攻击者可以直接修改注册表中的值。`Set-EtwTraceProvider`提供了一个抽象的 autologger。
**其他检测方法：**
如果可能，建议检测`HKLMSYSTEMCurrentControlSetControlWMIAutologgerAUTOLOGGER_NAME{PROVIDER_GUID}`注册表项中值的改动。请注意，修改`EnableProperty`只是一个特定的例子，攻击者也可以通过其他方式更改ETW提供者。
## 从跟踪会话中删除ETW提供者
**篡改类别：** 暂时
**最低权限：** SYSTEM
**检测方法：**
不幸的是，没有任何文件、注册表或事件日志与该事件相关联。虽然下面的技术示例表明logman.exe用于执行攻击，但攻击者可以直接使用Win32
API、WMI、DCOM、PowerShell等进行混淆。
**描述：**
该技术涉及从跟踪会话中移除ETW提供者，切断事件日志记录，直到遇到重新启动，或直到攻击者恢复提供者。虽然攻击者必须拥有执行该攻击的系统权限，但如果攻击者依赖事件日志进行威胁检测，则不太可能注意到这种攻击。
**示例：** 下面的PowerShell代码会禁用Windows-PowerShell事件日志记录，直到重新启动或攻击者恢复ETW提供者：
    logman update trace EventLog-Application --p Microsoft-Windows-PowerShell -ets
**其他方法：**
  * Microsoft-Windows-Kernel-EventTracing/Analytic日志中的事件ID 12指定何时修改跟踪会话，但它没有提供已删除的提供者名称或GUID，因此使用该事件很难确定是否发生可疑事件。
  * 到目前为止，已经有几个引用包含在`EventTracingManagement`模块中的ETW PowerShell命令，这个模块本身就是一个基于CDXML的模块。这意味着`EventTracingManagement`中的所有命令都由WMI类支持。例如，`Get-EtwTraceProvider`命令由`ROOT/Microsoft/Windows/EventTracingManagement:MSFT_EtwTraceProvider`类支持。考虑到ETW提供者可以WMI类实例的形式表示，可以创建一个永久WMI事件订阅，记录所有从特定跟踪会话到事件日志删除提供者的操作。[这段代码](https://gist.github.com/mattifestation/9f07e4ab0df84cfd176fe40db2d60aa8)创建一个`NtEventLogEventConsumer`实例，用于在事件日志跟踪会话`EventLog-Application`中删除提供者时将事件ID 8记录到事件日志(Source：WSH)。记录的事件如下所示：
  * 目前尚不清楚在大型环境中从事件日志中移除提供者的频率。但我们仍然建议环境中记录logman.exe、wpr.exe和PowerShell的执行情况。
## 结论
识别警报和检测策略中的盲点和假设是确保检测弹性的关键步骤。因为ETW是事件日志的核心，所以深入了解ETW篡改攻击是提高安全相关的数据源完整性的一种重要的方法。
## 深入学习
[ETW — Overview](https://blogs.msdn.microsoft.com/dcook/2015/09/30/etw-overview/)
[Instrumenting Your Code with ETW](https://docs.microsoft.com/en-us/windows-hardware/test/weg/instrumenting-your-code-with-etw)
[Event Tracing for Windows: Reducing Everest to Pike’s
Peak](https://www.codeproject.com/Articles/1190759/Event-Tracing-for-Windows-Reducing-Everest-to-Pike)
[Use this not this: Logging / Event
Tracing](https://blogs.msdn.microsoft.com/seealso/2011/06/08/use-this-not-this-logging-event-tracing/)
[Writing an Instrumentation Manifest](https://docs.microsoft.com/en-us/windows/desktop/wes/writing-an-instrumentation-manifest)
[Event Tracing Functions](https://docs.microsoft.com/en-us/windows/desktop/etw/event-tracing-functions)
[Configuring and Starting an AutoLogger
Session](https://docs.microsoft.com/en-us/windows/desktop/ETW/configuring-and-starting-an-autologger-session)
[Event Tracing](https://docs.microsoft.com/en-us/windows/desktop/etw/event-tracing-portal)
[TraceLogging](https://docs.microsoft.com/en-us/windows/desktop/tracelogging/trace-logging-portal)