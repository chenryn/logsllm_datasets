ydx-badcrxids-digestvar
ydx-badbin-digestvar
ydx-mitb-uids
ydx-badcrxids-testing-digestvar
Description
malware
mobile malware
phishing
adult website
test ﬁle
malicious image
malware
man-in-the-browser
malware
phishing
pornography
sms fraud
test ﬁle
shocking content
test ﬁle
.crx ﬁle ids
malicious binary
man-in-the-browser
app UID
test ﬁle
android
#preﬁxes
283,211
2,107
31,593
434
535
0
283,211
87
2,107
31,593
99,990
10,609
0
209
370
*
*
*
*
that
the
identical. The
Table II provides the name and description of
for
ydx-mobile-only-malware-shavar,
the
in each.
blacklists with the number of preﬁxes present
lists goog-malware-shavar
We highlight
same
and ydx-malware-shavar are
holds
goog-mobile-only-malware-shavar
and
and
for goog-phish-shavar and ydx-phish-shavar
respectively. By comparing the goog-malware-shavar
lists of GOOGLE and YANDEX, we observed that there are
only 36,547 preﬁxes in common. Similarly, the phishing lists
googpub-phish-shavar and goog-phish-shavar
of GOOGLE and YANDEX respectively have only 195 preﬁxes
in common. These anomalies exist because the lists might not
be up-to-date on the YANDEX server.
V. THREAT MODEL
Clients using SB tools and especially web browsers are
exposed to several privacy threats. We note that an honest-but-
curious SB provider may attempt to reconstruct completely or
partly the browsing history of a client from the data sent to
the servers. As previously mentioned, this is the case for most
SB tools. This is also why the Lookup API of GSB was
rejected by the community and later discontinued. Another
threat posed by SB services consists in revealing if a client
has visited some selected web pages and not the full browsing
history. By associating traits to pages, the ultimate goal of
the SB provider is to detect users’ behavior such as political
opinions, sexual orientation or allegiance to terrorist groups.
These threats are viable only when GOOGLE and YANDEX
can be justiﬁed to be potentially malicious. To this end, we
350
take the self-explanatory example of Mozilla Firefox. In fact,
Firefox, a major client of GSB assumes that GOOGLE via
GSB can indeed be malicious, and takes concrete measures
to reduce information leakage to the servers (see Section IX
for further details). Moreover, the threat persists even if one
assumes that the SB vendors are honest. This is because GSB
is open-source, hence any third party may clone it (as currently
done by YANDEX) and offer a similar service. If the third party
is malicious, then it can abusively use GSB for tracking.
It is pertinent to mention that both GOOGLE and YANDEX
have other means to track users, for instance through search
queries, search clicks, ad impression/clicks, social network
trackers, etc. However, they can not use these tools against
users who distrust them and rely on other technologies to
navigate on the web, for instance, Firefox with DuckDuckGo
search engine. But, since Firefox incorporates GSB, the privacy
of such users is still under threat. In other words, SB services
may prove to be a handy tweak for GOOGLE and YANDEX
to turn other browsers into a tracking tool of their own.
Apparently, around 40% of users do not use Chrome and an
equivalent number do not use GOOGLE search engine (source
statcounter.com). Furthermore, in comparison with traditional
tracking techniques the threat posed by SB tracking is more
severe. The reason being that unlike these techniques, SB does
not necessarily require the client to load the target web page.
We note that the capabilities of SB providers are often
immense and that we cannot restrict our adversary to the
honest-but-curious model. To reach their goal, we assume that
the provider is willing to do anything including tampering
with the database. In GSB and YSB, the providers may on
their own initiative include values in the preﬁx database of
the client to track them or they can be constrained by a third
party (governmental agencies) to do so. Since, GOOGLE and
YANDEX have web indexing capabilities, we safely assume
that they maintain the database of all web pages and URLs on
the web. We further assume that the SB servers may aggregate
requests for full hashes and exploit the temporal correlation
between the queries. In the sequel, we analyze GSB and YSB
for the afore-mentioned threats. To this end, we consider two
cases depending on whether or not more than one preﬁx per
URL is sent by the client to the server.
VI. SINGLE PREFIX MATCH
A simple way to understand GSB and YSB consists in
considering them as a probabilistic test run by the client
to ﬁlter malicious URLs. Whenever,
the test executed by
the browser is positive, GOOGLE or YANDEX servers are
contacted to remove any ambiguity. While a negative test leaks
no information about the URL to GOOGLE and YANDEX, a
positive test sends preﬁx(es) of certain decompositions of the
target URL. In this section, we analyze the privacy provided
by GSB and YSB when their servers receive a single preﬁx
for a URL. Studying this case allows us to know if a user’s
browsing history can be fully/partly constructed.
A. Privacy Metric
In order to exemplify the evoked privacy concern and deﬁne
a privacy metric, let us consider the following CFP URL for a
conference: https://conf.org/2016/cfp.html. Its decompositions
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:43:08 UTC from IEEE Xplore.  Restrictions apply. 
are shown in Table III. We suppose that the ﬁrst decomposition
creates a hit in the local database, i.e., 0x24e04dde is present
in one of the blacklists.
TABLE III: Decompositions of a conference CFP URL.
URL
conf.org/2016/cfp.html
conf.org/2016/
conf.org/
32-bit preﬁx
0x24e04dde
0xf9aef594
0xed37d926
Let us consider a situation where a client visits a web
page that creates a hit on the preﬁx 0x24e04dde. Hence,
it sends the preﬁx to the server. In order to determine if this
preﬁx is enough for GOOGLE or YANDEX to re-identify the
corresponding URL, we consider the following privacy metric.
The metric is deﬁned as the number of URLs which share
a given preﬁx and is often referred to as the anonymity set
size in the literature. This measures the uncertainty in re-
identifying the URL from a preﬁx. The higher is the value
of the metric, the more difﬁcult is the re-identiﬁcation and
hence better is the privacy achieved. The metric yields a simple
yet reliable method to analyze and quantify the information
leakage through preﬁxes. Furthermore,
the metric may be
viewed as a k-anonymity argument [5] to support the fact that
URLs are anonymized through hashing-and-truncation.
B. Analysis
In this section, we compute the afore-deﬁned privacy met-
ric. One may argue that there are inﬁnite number of pre-images
for a 32-bit preﬁx, hence the privacy metric that estimates
the uncertainty in re-identiﬁcation should be inﬁnitely large.
However, the crucial point here is that the total number of
URLs on the web is ﬁnite and hence the privacy metric can at
most be ﬁnitely small.
We estimate the privacy metric using the probabilistic
model of balls-into-bins. In the SB context, preﬁxes represent
the bins and URLs are considered as the balls. We are
interested in the maximum and the average value that the
privacy metric can take. These values respectively measure the
worst-case and average-case uncertainty for re-identiﬁcation.
Let us suppose m to be the number of balls and n to be
the number of bins. A simple computation shows that the
n . We further note that,
average number of balls in any bin is m
according to the result of Ercal-Ozkaya [22], for a constant
c > 1, and m ≥ cn log n, the minimum number of balls in
. As a result, the minimum value of the
any bin is Θ
metric should not deviate too much from the average value
and hence to avoid redundancy, we do not consider it in our
analysis. Finally, in order to compute the maximum, we use
the following result from Raab and Steger [23].
(cid:2)
(cid:3)
m
n
Theorem 1 (Raab and Steger [23]): Let M be the random
variable that counts the maximum number of balls into any bin.
If we throw m balls independently and uniformly at random
into n = 2(cid:2) bins, then Pr[M > kα] = o(1) if α > 1 and
Pr[M > kα] = 1 − o(1) if 0 < α < 1, where:
351
⎧⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎩
kα =
(cid:8)
1 + α log(2)
log
(cid:2)
n log n
m
n log n
m
(cid:9)
(cid:3)
,
(cid:13)
log n
log
m
n log n
(cid:10)
(dc − 1 − α) log n,
(cid:11)
(cid:12)
n + α
n log n,
2 m
m
n +
2m log n
m
n
1 − 1
α
log(2) n
2 log n
,
n
polylog(n)
≤ m (cid:4) n log n,
if
if m = c · n log n,
if n log n (cid:4) m ≤ n · polylog(n),
if m (cid:5) n · (log n)3.
The equation for computing dc can be found in [23].
In 2008, GOOGLE [24] claimed to know 1 trillion unique
URLs. Since then, GOOGLE has reported 30 trillion URLs in
2012 and 60 trillion in 2013. These data are summarized in the
ﬁrst two rows of Table IV. The table also presents the number
of domain names recorded by VERISIGN [25].
Using the previous results and the provided Internet data,
we compute the maximum and the average value of the metric
for unique URLs and domain names. Results are provided for
different preﬁx sizes in Table IV. When GSB was started in
2008, at most 443 URLs matched a given 32-bit preﬁx. It
has increased over the years to reach 14,757 in 2013. Even in
the average case, it is hard for GOOGLE and YANDEX to re-
identify a URL from a single 32-bit preﬁx. The case of domain
names is slightly different because the space of domain names
is much smaller and its dynamic is far slower than the one
of URLs. In the worst case, two domain names will collide
to the same preﬁx. Domain names can hence be re-identiﬁed
with high certainty. However, the server does not know if the
received preﬁx corresponds to a domain name or to a URL.
TABLE IV: Max. and avg. values for URLs and domains with
preﬁx size (cid:3). 0
∗ represents a value close to 0.
Year
Number
(cid:2) (bits)
16
32
64
96
URLs (1012)
2008
1
2012
30
228, 223
443, 232
∗
2, 0
∗
1, 0
max, avg
228, 228
7541, 6984
∗
2, 0
∗
1, 0
2013
60
2008
177
229, 229
14757, 13969
∗
2, 0
∗
1, 0
3101, 2700
2, 0.04
∗
1, 0
∗
1, 0
domains (106)
2012
252
max, avg
4196, 3845
3, 0.05
∗
1, 0
∗
1, 0
2013
271
4498, 4135
3, 0.06
∗
1, 0
∗
1, 0
Hence, a single preﬁx per URL does not allow the SB
server to reconstruct the browsing history of the client. So
far, the solution seems to be privacy preserving as long as the
client only reveals a single preﬁx.
VII. MULTIPLE PREFIX MATCH
In this section, we analyze the case when the backend
SB servers receive multiple preﬁxes. SB servers may receive
multiple preﬁxes for three reasons. First, it could be the result
of accidental hits in the local database. This may happen
when several decompositions of a non-malicious URL create
hits in the database. Second, the SB providers may aggregate
preﬁxes received over time. This could mainly be done to
exploit any temporal correlation between the queries. Third
and most importantly, in certain cases an SB provider may
be forced to include several preﬁxes for a target URL in the
local database. This might be necessary when a domain has
a subset of sub-domains and URL paths which host several
malicious URLs. Then, the sub-domains and the paths can
be blacklisted instead of including each malicious URL in
the database. This approach saves memory footprint on the
client’s side. Consequently, whenever a client visits any of the
malicious URLs, multiple preﬁxes are sent to the servers. We
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:43:08 UTC from IEEE Xplore.  Restrictions apply. 
note that one could possibly include only the preﬁx of the
domain to blacklist all its malicious sub-domains and paths.
However, this approach also blacklists all non-malicious URLs
on the domain. Whence, multiple preﬁxes are indispensable to
prevent certain URLs from being ﬂagged as malicious.
Multiple preﬁx match for a URL forces the client to send
more information to the servers than in the case of a single
preﬁx match. Clearly, the amount of information on the URL
obtained by the server is proportional to the actual number
of preﬁxes received or aggregated. In the sequel, we analyze
whether multiple preﬁxes may allow GSB and YSB to re-
identify the URL visited by a client.
In order to present a comprehensible privacy analysis, we
henceforth consider the simpliﬁed case of 2 preﬁxes. The
analysis for the case when the server receives more than 2
preﬁxes per URL follows in a straightforward manner.
A. Collisions on 2 Preﬁxes
As in the single preﬁx case, more than two distinct URLs
may yield the same two preﬁxes. The larger is the number of
such URLs, the more difﬁcult is the re-identiﬁcation. These
URLs exist due to three possible types of collisions on 32-bit
preﬁxes. In the ﬁrst type (Type I), several distinct yet related
URLs share common decompositions and these decomposi-
tions yield the shared preﬁxes. We note that 2 distinct URLs
are related if they have common sub-domains. The second
type of collisions (Type II) is due to distinct yet related URLs