# 滴水逆向课程笔记 - Win32 编程

## 14.2 进行简单的绘画
在桌面进行简单绘图的代码如下，详细的注释已经包含在代码中。对于不熟悉的API函数，可以在MSDN Library中查询相关信息。

```cpp
#include <windows.h>

int main(int argc, char* argv[])
{
    HWND hWnd; // 窗口句柄
    HDC hDc;   // 设备上下文对象
    HPEN hPen; // 画笔

    // 1. 设备对象，要绘画的位置
    // 设置为NULL则表示在桌面中绘画
    hWnd = (HWND)NULL;

    // 2. 获取设备的上下文对象（DC）
    hDc = GetDC(hWnd);

    // 3. 创建画笔，设置线条的属性
    hPen = CreatePen(PS_SOLID, 5, RGB(0xFF, 0x00, 0x00)); // RGB表示红绿蓝，红绿蓝的组合就可以组成新的一种颜色。

    // 4. 关联
    SelectObject(hDc, hPen);

    // 5. 开始画线
    LineTo(hDc, 400, 400);

    // 6. 释放资源
    DeleteObject(hPen);
    ReleaseDC(hWnd, hDc);

    return 0;
}
```

## 15 消息队列
### 15.1 什么是消息
当我们点击鼠标或按下键盘时，操作系统会将这些动作记录下来，并存储在一个结构体中，这个结构体就是消息。

### 15.2 消息队列
每个线程只有一个消息队列。

### 15.3 窗口与线程
当用户点击窗口的关闭按钮时，操作系统会将这个操作封装成一个消息。那么，这个消息是如何精确地传递给对应进程的线程呢？

操作系统可以通过坐标等信息作为索引，找到对应的窗口。窗口在内核中有一个窗口对象，该对象包含一个指向线程对象的指针。因此，通过窗口对象可以找到对应的线程，从而将消息传递给正确的线程。

注意：一个线程可以有多个窗口，但一个窗口只属于一个线程。

## 16 第一个Windows程序
### 16.1 新建Windows窗口程序项目
使用VC6创建一个新的Win32 Application项目，选择一个简单的Win32程序模板。控制台程序从`main`函数开始执行，而Win32窗口程序从`WinMain`函数开始执行。

新建的项目已经包含了所需的`<windows.h>`头文件。

### 16.2 `WinMain`函数
`WinMain`函数是Win32窗口程序的入口点，其参数解释如下：

- `HINSTANCE hInstance`：当前实例的句柄。
- `HINSTANCE hPrevInstance`：总是为`NULL`，无需理解。
- `LPSTR lpCmdLine`：命令行参数。
- `int nCmdShow`：窗口显示状态。

### 16.3 调试信息输出
在窗口程序中，不能使用`printf`来输出信息，而是使用`OutputDebugString`函数。该函数只能打印固定字符串，不能打印格式化的字符串。如果需要格式化输出，可以先使用`sprintf`函数进行格式化。

示例代码：
```cpp
#include "stdafx.h"

int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR     lpCmdLine,
                     int       nCmdShow)
{
    DWORD dwAddr = (DWORD)hInstance;
    char szOutBuff[0x80];
    sprintf(szOutBuff, "hInstance address: %x \n", dwAddr); // 需要包含<stdio.h>头文件
    OutputDebugString(szOutBuff);

    return 0;
}
```

### 16.4 创建窗口程序
以下代码创建了一个简单的窗口程序：

```cpp
// Windows.cpp : Defines the entry point for the application.
#include "stdafx.h"

// 窗口过程函数
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR     lpCmdLine,
                     int       nCmdShow)
{
    TCHAR className[] = TEXT("My First Window");
    WNDCLASS wndClass = {0};
    wndClass.hbrBackground = (HBRUSH)COLOR_BACKGROUND;
    wndClass.lpszClassName = className;
    wndClass.hInstance = hInstance;
    wndClass.lpfnWndProc = WindowProc;
    RegisterClass(&wndClass);

    HWND hWnd = CreateWindow(className, TEXT("窗口"), WS_OVERLAPPEDWINDOW, 10, 10, 600, 300, NULL, NULL, hInstance, NULL);
    if (hWnd == NULL) {
        char szOutBuff[0x80];
        sprintf(szOutBuff, "Error: %d", GetLastError());
        OutputDebugString(szOutBuff);
        return 0;
    }

    ShowWindow(hWnd, SW_SHOW);

    MSG msg;
    BOOL bRet;
    while ((bRet = GetMessage(&msg, NULL, 0, 0)) != 0) {
        if (bRet == -1) {
            char szOutBuff[0x80];
            sprintf(szOutBuff, "Error: %d", GetLastError());
            OutputDebugString(szOutBuff);
            return 0;
        }
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int)msg.wParam;
}
```

以上代码展示了如何创建和显示一个简单的窗口，并处理消息循环。