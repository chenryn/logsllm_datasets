the extended version of this paper [55].
Theorem 2. Job Execution (Informally)
1) If the veriﬁer completes with a set of output IDs, then
the decryptions of key-value pairs with these IDs (if they
succeed) yield the correct and complete job output.
2) Code and data remains secret up to trafﬁc analysis: The
adversary learns at most (i) encrypted sizes for code,
input splits, intermediate key-value pairs, and output key-
value pairs; and (ii) key-repetition patterns in intermedi-
ate key-value pairs.
We observe that, if the veriﬁer completes with a set of output
IDs, then the decryptions of key-value pairs with these IDs
(if they succeed) yield the correct and complete job output.
For each cryptographic data key, AEAD encryption guarantees
the integrity of all messages exchanged by the job execution
protocol; it also guarantees that any tampering or truncation
of input splits will be detected.
Each message between mappers, reducers, and veriﬁer
(KV (cid:2)
inter, KVclose, FM, and FR) includes the job-speciﬁc
ID j, so any message replay between different jobs is also
excluded. Thus, the adversary may at most attempt to duplicate
or drop some messages within the same job. Any such attempt
is eventually detected as well: if the veriﬁer does not receive
the complete set of messages it expects, veriﬁcation fails;
otherwise, given the FM messages from the set m(cid:2) of mappers,
it can verify that the mappers with distinct IDs ((cid:2)m)m∈m(cid:2)
together processed the correct input splits. Otherwise, if any
inputs splits are missing, veriﬁcation fails. Furthermore, given
one FR message for each r ∈ 0..R − 1, the veriﬁer can verify
that every reducer communicated with every mapper. Given
R, the veriﬁer can also trivially verify that it communicated
with all reducers that contributed to the output.
Reducers do not know which mappers are supposed to
send them key-pairs. Reducers though know from the KVclose
messages how many key-value pairs to expect from mappers
they know of. Accordingly, every reducer is able to locally
verify the integrity of all its communication with every mapper.
Although the adversary can remove or replicate entire streams
of mapper/reducer communications without being detected by
the reducer, this would lead to an incomplete set Pr of mapper
IDs at the reducer, eventually detected by the veriﬁer.
B. Analysis of Veriﬁcation Cost
We now analyze the cost for the veriﬁcation of a job with
M mappers and R reducers. VC3’s full runtime cost
is
experimentally assessed in §X.
There are M + R veriﬁcation messages that mappers and
reducers send to the veriﬁer. These messages most signiﬁcantly
contain for each mapper the set Bin,m of processed input split
IDs and for each reducers the set Bout,r of IDs of produced
outputs. Each ID has a size of 128 bits. Typically, input splits
have a size of 64 MB or larger in practice. Hence, mappers
need to securely transport only 16 bytes to the veriﬁer per 64+
MB of input. As reducers should batch many output key-value
pairs into one KV (cid:2)
out, a similarly small overhead is possible for
reducer/veriﬁer communication. There are M × R veriﬁcation
messages sent from mappers to reducers. These messages are
small: they contain only four integers. The computational cost
of veriﬁcation amounts to the creation and veriﬁcation of
the MACs for all M + R + M × R veriﬁcation messages.
Additionally, book keeping has to be done (by all entities).
We consider the cost for veriﬁcation to be small.
C. Integrating the Veriﬁer with Hadoop
For the job execution protocol it is again desirable to avoid
online connections between the involved entities. We now
describe a variant of the protocol
implements an in-
band veriﬁer as a simple MapReduce job. Our VC3 prototype
implements this variant of the job execution protocol.
that
4545
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:24 UTC from IEEE Xplore.  Restrictions apply. 
Mappers send FM messages in the form of key-value pairs
to reducers. Reducers output all FM key-value pairs received
from mappers and also output their own FR messages in the
form of key-value pairs. The veriﬁcation job is given Sjob
of the actual job and is invoked on the entire corresponding
outputs. The mappers of the veriﬁcation job parse input splits
for FM and FR messages and forward them to exactly one
veriﬁcation reducer by wrapping them into key-value pairs
with a predeﬁned key K(cid:2)
inter. On success, the veriﬁcation
reducer outputs exactly one key-value pair certifying Bout as
valid output for Sjob. This key-value pair can ﬁnally easily
be veriﬁed by the user. In practice, the veriﬁcation job can be
bundled with a regular job that already processes the outputs
to be veriﬁed while parsing for veriﬁcation messages. In such
a case, one of the regular reducers also acts as veriﬁcation
reducer (we use the reducer with r = 0). The bundled job in
turn creates its own veriﬁcation messages FM and FR. This
way, it is possible to chain an arbitrary number of secure
MapReduce jobs, each verifying the integrity of its immediate
successor with low overhead.
VII. REGION SELF-INTEGRITY
The ﬁnal aspect of our design is the enforcement of region
self-integrity invariants for user code loaded into enclaves. By
design, code within an enclave can access the entire address
space of its host process. This enables the implementation of
efﬁcient communication channels with the outside world but
also broadens the attack surface of enclaves: if enclave code,
due to a programming error, ever dereferences a corrupted
pointer to untrusted memory outside the enclave, compromise
of different forms becomes possible. For example, the enclave
code may write through an uninitialized pointer or a null
pointer; if the pointer happens to contain an address that is
outside of the enclave, data immediately leaks out. Conversely,
reads through such pointers may cause the user code to read
data from arbitrary addresses outside the enclave;
in this
case, the untrusted environment is in the position to inject
arbitrary data into the enclave. Such a data injection may in
the simplest case affect the correctness of computations but
may also, depending on the context of the corrupted pointer
dereference, pave the way for a control-ﬂow hijacking attack
eventually allowing the adversary to capture all the enclave’s
secrets. We stress that we assume the code inside the enclave is
not malicious, but it may have low-level defects; applications
written in languages like C and C++ have a long history of
problems induced by unsafe memory accesses.
Since memory safety implementations for C/C++ have high
overhead [43], [44], [60], we instead address this problem
with a compiler that efﬁciently enforces two security invariants
for code running inside the enclave. Before presenting the
invariants, we introduce some terminology. An address-taken
variable is a variable whose address is taken in the code,
e. g. &v, or an array (the address of arrays is implicitly taken).
By write through a pointer we mean writing to the memory
targeted by the pointer (this includes array accesses, which use
a pointer and an offset). Likewise for read through a pointer.
We deﬁne two invariants:
indirect call
Region-write-integrity guarantees that writes through point-
ers write only to address-taken variables in the enclave or to
allocations from the enclave heap. Additionally, it guarantees
that
instructions can target only the start of
address-taken functions in the enclave.
includes
region-write-
integrity guarantee, plus the guarantee that reads through
pointers read only from addresses inside the enclave.
Region-read-write-integrity
the
Region-write-integrity prevents memory corruption: it pre-
vents corruption of all non-address-taken variables in the
program (typically a large fraction of the stack frames contain
only non-address-taken variables [34]) and it prevents corrup-
tion of all compiler-generated data such as return addresses on
the stack. It also prevents information leaks caused by writes to
outside of the enclave. Region-read-write-integrity additionally
prevents use of un-authenticated data from outside the enclave,
which may be injected by an attacker.
The integrity invariants are enforced with dynamic checks
on memory reads, writes and control-ﬂow transitions. The
compiler inserts dynamic checks when it cannot verify the
safety of memory operations or control-ﬂow transitions at
compile time. Note that direct writes/reads to local or global
variables access memory at ﬁxed offsets in the stack-frame
or from the enclave base address are guaranteed to neither
corrupt memory, nor access memory outside the enclave (we
reserve space for global variables when creating the enclave;
and we stop the program if we exhaust stack space). Hence,
we only need to check memory accesses through pointers.
Checking memory reads adds runtime overhead. We therefore
let users choose between no integrity, region-write-integrity,
and full region-read-write-integrity, depending on the runtime
cost they are willing to pay.
The checks on indirect calls together with the integrity
of return addresses enforce a form of control-ﬂow integrity
(CFI) [1], but our invariants are stronger than CFI. Attacks on
CFI [24] typically require an initial step to corrupt memory
(e. g., through a buffer overﬂow) and/or leak information. CFI
solutions do not try to prevent memory corruption; they aim
only to mitigate the malicious effects of such corruption by
restricting the sets of possible targets for indirect control-ﬂow
transitions. On the other hand, our read and write checks are
mainly designed to prevent memory corruptions and informa-
tion leaks; the main purpose of our control-ﬂow checks is
to guarantee that the checks on writes and reads cannot be
bypassed: control never ﬂows to unaligned code potentially
containing unexpected and unchecked memory reads or writes.
Our invariants share some properties with recent proposals
for efﬁcient execution integrity, such as CPI [34] and WIT [2],
but our invariants and enforcement mechanisms are adapted to
the enclave environment. For example, on x64 (VC3’s target
environment), CPI relies on hiding enforcement information
at a random address (with leak-proof information hiding);
while that is effective in large address-spaces, it would be
less effective inside VC3’s small (512MB) memory regions.
4646
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:08:24 UTC from IEEE Xplore.  Restrictions apply. 
Our enforcement data structures are also a factor of 8 smaller
than WIT’s, and unlike CPI and WIT we do not require
sophisticated compiler analysis (e. g., points-to analysis).
The instrumentation for memory accesses is applied for all
enclave code except for the functions that implement commu-
nication with the outside world through the shared memory
area, but these functions encrypt/decrypt and authenticate the
data being written/read. Next, we describe how we enforce the
integrity invariants.
A. Enforcing region-write-integrity
To enforce that writes through pointers go to address-taken
variables in the enclave or memory allocated from the enclave
heap, we maintain a bitmap to record which memory areas
inside the enclave are writable. The bitmap maps every 8-
byte slot of enclave memory to one bit. When the bit is set,
the memory is writable. The bitmap is updated at runtime,
when stack frames with address-taken variables are created and
destroyed and when heap memory is allocated and freed. When
the compiler determines that a stack frame contains address-
taken variables, it generates code to set the corresponding
bits on the bitmap on function entry, and to reset them on
function exit. The compiler also ensures that address-taken
variables have free 8-byte slots around them (and similarly
for heap allocations),
to detect sequential overﬂows. The
compiler also records the addresses and sizes of address-taken
global variables in a data structure that our runtime uses to
set the corresponding bits in the bitmap at enclave startup.
Our heap implementation sets/resets the bits in the bitmap
on heap allocations/deallocations. When the compiler cannot
prove statically that a write conforms to region-write-integrity,
it inserts a check of the form (VC3 works on x64 processors):
mov
and
xor
je
int
$L1:mov
mov
shr
mov
shr
mov
bt
jb
int
$L2:mov
rax,r8
rax,0xFFFFFFFFE0000000
rax,0x20000000
$L1
3
rdx,_writeBitmap
rcx,r8
rcx,9
rax,r8
rax,3
rcx,[rdx+rcx*8]
rcx,rax
$L2
3
[r8],4 #unsafe write
The ﬁrst part of the check, up to the L1 label, checks that the
address being written to is within the enclave address range. If
the check fails, the program stops with an exception; we chose
this exception because it uses an efﬁcient encoding: a single
byte. If the check succeeds, we then check that the address is
marked as writable in the bitmap. The initial range check on
the address allows us to allocate the bitmap to cover only a
small portion of the address space. If the bitmap check also
succeeds, the write is allowed to proceed (label L2).
This design is efﬁcient: the bitmap is a compact repre-
sentation of which addresses are writable: one bit per 8
bytes of enclave address space and, as shown above, we can
access it with fast code sequences. The compiler also includes
optimizations to make write checks more efﬁcient (§IX).
To implement the checks on indirect control-ﬂow transi-
tions, we maintain a separate bitmap that records where the
entry points of address-taken functions are. This bitmap maps
each 16-byte slot of enclave memory to a bit. The bit is set
if an address-taken function starts at the beginning of the
slot. The compiler aligns address-taken functions on 16-byte
boundaries, and records the addresses of these function in a
data structure that our runtime uses to set the corresponding
bits in the bitmap at enclave startup. Using a 16-byte slot keeps
the bitmap small and wastes little space due to alignment; we
use smaller slots for the write bitmap to reduce the amount of
free space around address-taken variables and heap allocations.
When generating code for an indirect control-ﬂow transfer, the
compiler emits code to check that the target is 16-byte aligned
and that the corresponding bit is set in the bitmap (the code
sequence is similar to the write checks).
Note that code outside the enclave cannot corrupt
the
bitmaps used for the integrity checks, since the bitmaps are
allocated inside the enclave. Even writes inside the enclave
cannot corrupt the bitmaps, because they are always instru-
mented and the write bitmap disallows writes to the bitmaps.
B. Enforcing region-read-write-integrity
To enforce region-read-write-integrity,
emits checks of the form:
the compiler further
mov
and
xor
je