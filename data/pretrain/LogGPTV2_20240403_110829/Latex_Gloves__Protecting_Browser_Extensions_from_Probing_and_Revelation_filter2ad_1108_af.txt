enumerated without them being active on the attacker page.
They demonstrated that approximately 28% of all Chrome
extensions and approximately 6.7% of all non-WebExtension
Firefox extensions could be enumerated from a web page.
Guly´as et al. [33] combine known ﬁngerprinting techniques
13
with the Chrome extension enumeration attack presented by
Sj¨osten et al. [55], along with a login-leak which determines
the web pages that a user is logged in to [40]. They conclude
that 54.86% of users which have installed at least one de-
tectable extension and 19.53% of users which have at least one
detectable active login, are unique. A combination of at least
one detectable extension installed, and at least one detectable
active login make the uniqueness number go up to 89.23%,
indicating that installed browser extensions can make a good
ﬁngerprint, further showing the necessity of a mechanism to
prevent extension ﬁngerprinting.
S´anchez-Rola et al. [53] presented a timing attack against
Chrome and Firefox by using the fact that the internal branch-
ing time for WARs differs between installed and non-installed
extensions, thus detecting 100% of all extensions. A temporary
solution has been implemented in Chrome [20], and the plan
is to implement a randomization scheme similar to Firefox’s,
when they can make “a breaking change” [8]. In [53], S´anchez-
Rola et al. also presented the revelation attack against Safari,
which was the ﬁrst browser to use randomized UUIDs. Based
on a static analysis of 718 extensions, they estimated more than
40% of the extensions could leak the random UUID. They
manually analyzed 68 security extensions, ﬁnding one false
negative and 20 out of 29 extensions ﬂagged as suspicious
indeed leaked the random UUID. Contrarily to S´anchez-Rola
et al, we investigate all Chrome and Firefox extensions to see
which leak their UUID on actual web pages.
Chen and Kapravelos [17] developed a taint analysis frame-
work for browser extensions to study their privacy practices.
From sources, such as DOM API calls (e.g. document.
location), and extension API calls (e.g. chrome.history),
they ﬁnd 2.13% of Chrome and Opera extensions to potentially
be leaking privacy-sensitive information to sinks such as
XMLHttpRequest and chrome.storage. However, they do
not seem to consider extension UUIDs as part of the privacy-
sensitive information.
it
Finally,
is worth mentioning that an attacker might
use any of the attacks presented in this paper to detect
browser extensions and thus, perform more harmful attacks.
Buyukkayhan et al. [14] for instance, exploit the lack of non-
isolation worlds on the previous version of the Firefox add-ons
architecture, allowing legitimate extensions which make use of
Cross Platform Component Object Model (XPCOM) to access
system resources such as the ﬁle system and the network. A
prerequisite for this attack is that there must be a mechanism
to disclose installed extensions in the victim’s browser. Thus,
the attacks described in our work may be used as a stepping
stone to escalate the attacker’s privileges in the browser.
extension UUIDs in the code injected by extensions into the
web pages, which, due to the design of the randomization of
UUIDs, giving the ability to uniquely track users.
We have conducted an empirical study assessing the fea-
sibility of revelation attacks. Our experiments show that com-
bining revelation and probing attacks, it is possible to uniquely
identify 90% out of all extensions injecting content, in spite
of a randomization scheme. Furthermore, we have conducted a
large-scale study assessing the pervasiveness of probing attacks
on the Alexa top 10,000 domains, providing new evidence for
probing beyond what was captured by previous work.
As a countermeasure, we have designed a mechanism that
controls what extensions are enabled on what pages. As such,
our mechanism supports two types of whitelists: specifying
which web pages are allowed to probe for which extensions
and specifying which extensions are allowed to inject content
on which web pages. We have presented a proof of concept
prototype that blocks both probing and revelation attacks,
unless explicitly allowed in the whitelists.
For
future work,
it would be interesting to consider
XHOUND [56] and Hulk [35] to make a comparison on the
different extensions that provide arbitrary DOM modiﬁcations
(XHOUND), extensions that are deemed malicious (Hulk), and
that inject WAR URLs. Unfortunately, the tools are unavailable
at present.
Next steps for Firefox and Chrome: We have reported
the details of our study and our suggestions for mitigation to
both involved browser vendors.
The issue with the randomized UUIDs has been conﬁrmed
by Firefox developers [1]. They agree that attacks like the
revelation attack defeat anti-ﬁngerprinting measures. While
the problem is clear to the developers,
the discussion on
countermeasures is still ongoing.
As mentioned earlier, Google has recently announced that
Chrome will allow users to restrict extensions from accessing
websites by a whitelisting mechanism in line with ours [7].
Users will be able to restrict the host permissions for an
extension, paving the way for an in-browser mechanism to
control the extension whitelist.
Acknowledgments: This work was partly funded by
the Swedish Foundation for Strategic Research (SSF) under
the WebSec project and the Swedish Research Council (VR)
under the PrinSec and PolUser projects.
REFERENCES
[1] https://bugzilla.mozilla.org/show bug.cgi?format=default&id=1372288,
X. CONCLUSION
We have investigated the problem of detecting browser
extensions by web pages. With the intention to prevent probing
for browser extensions by web pages, Mozilla Firefox recently
introduced randomized extension UUIDs. A similar move is
currently being discussed by the Google Chrome developers.
We have demonstrated that the randomized UUIDs can in
fact hurt user privacy rather than protect
it. To this end,
we have studied a class of attacks, which we call revelation
attacks, allowing web pages to detect the randomized browser
[2]
[3]
[4]
[5]
[6]
14
accessed July-2018.
“AdBlock Plus,” https://chrome.google.com/webstore/detail/adblock-
plus/cfhdojbkjhnklbpkdaibdccddilifddb, accessed Aug-2018.
“Adobe: Adobe Acrobat Force-Installed Vulnerable Chrome Exten-
sion,” https://bugs.chromium.org/p/project-zero/issues/detail?id=1088,
accessed May-2018.
“Avast Online Security,” https://chrome.google.com/webstore/detail/
avast-online-security/gomekmidlodglbbmalcneegieacbdmki,
accessed
May-2018.
“Common Crawl,” http://commoncrawl.org/, accessed May-2018.
“Ghostery – Privacy Ad Blocker,” https://chrome.google.com/webstore/
detail/ghostery---privacy-ad-blo/mlomiejdfkolichcﬂejclcbmpeaniij, ac-
cessed Aug-2018.
[7]
[8]
by Default,”
“Trustworthy Chrome Extensions,
googleblog.com/2018/10/trustworthy-chrome-extensions-by-
default.html, accessed Nov-2018.
“WebAccessibleResources take too long to make a decision about
loading if
the extension is installed,” https://bugs.chromium.org/p/
chromium/issues/detail?id=611420#c19, accessed Feb-2018.
https://security.
[9] G. Acar, M. Juarez, N. Nikiforakis, C. Diaz, S. G¨urses, F. Piessens, and
B. Preneel, “FPDetective: Dusting the Web for Fingerprinters,” in CCS,
2013, pp. 1129–1140.
“AdBlock,”
gighmmpiobklfepjocnamgkkbiglidom, accessed Aug-2018.
https://chrome.google.com/webstore/detail/adblock/
[10]
[11] P. Baumann, S. Katzenbeisser, M. Stopczynski, and E. Tews, “Disguised
Chromium Browser: Robust Browser, Flash and Canvas Fingerprinting
Protection,” in WPES, 2016, pp. 37–46.
[12] K. Boda, A. M. F¨oldes, G. G. Guly´as, and S. Imre, “User Tracking
on the Web via Cross-browser Fingerprinting,” in NordSec, 2012, pp.
31–46.
[13] M. Brinkmann, “Firefox WebExtensions may be used to iden-
tify you on the Internet,” https://www.ghacks.net/2017/08/30/ﬁrefox-
webextensions-may-identify-you-on-the-internet/, 2017.
[14] A. S. Buyukkayhan, K. Onarlioglu, W. K. Robertson, and E. Kirda,
“CrossFire: An Analysis of Firefox Extension-Reuse Vulnerabilities,”
in NDSS, 2016.
[15] Y. Cao, S. Li, and E. Wijmans, “(Cross-)Browser Fingerprinting via OS
and Hardware Level Features,” in NDSS, 2017.
[16] S. Cassidy,
2018.
“LostPass,”
https://www.seancassidy.me/lostpass.html,
[17] Q. Chen and A. Kapravelos, “Mystique: Uncovering Information Leak-
age from Browser Extensions,” in CCS 2018, 2018, pp. 1687–1700.
[18] Chrome, “Match Patterns,” https://developer.chrome.com/extensions/
match patterns, accessed Apr-2018.
[19] ——, “Webstore Hosting and Updating,” https://developer.chrome.com/
extensions/hosting, accessed Apr-2018.
[20] Chromium Code Reviews, “Issue 2958343002: [Extensions] Change
renderer-side web accessible
resource determination (Closed),”
accessed Feb-2018. [Online]. Available: https://codereview.chromium.
org/2958343002
[21] A. Cortesi, M. Hils, T. Kriechbaumer, and contributors, “mitmproxy: A
free and open source interactive HTTPS proxy,” https://mitmproxy.org/,
2010–, [Version 3.0], accessed May-2018.
[22] U. Fiore, A. Castiglione, A. De Santis, and F. Palmieri, “Countering
Browser Fingerprinting Techniques: Constructing a Fake Proﬁle with
Google Chrome,” in NBiS, 2014, pp. 355–360.
[23] Google,
“Browse
in private,” https://support.google.com/chrome/
answer/95464, accessed May-2018.
[24] ——,
“Chrome Web Store,” https://chrome.google.com/webstore/
category/extensions? feature=free, accessed Feb-2018.
[25] ——,
“chrome.runtime,”
https://developer.chrome.com/extensions/
runtime#method-getURL, accessed Feb-2018.
[26] ——,
“Content Scripts,”
https://developer.chrome.com/extensions/
content scripts, accessed Feb-2018.
[27] ——, “Developer Program Policies,” https://developer.chrome.com/
webstore/program policies, accessed May-2018.
[28] ——, “Google Safe Browsing,” https://safebrowsing.google.com/, ac-
cessed July-2018.
[29] ——, “Manifest
chrome.com/extensions/manifest/web accessible resources,
Apr-2018.
- Web Accessible Resources,” https://developer.
accessed
[30] ——, “Manifest File Format,” https://developer.chrome.com/extensions/
manifest, accessed Feb-2018.
[31] ——, “New Cast functionality in Chrome,” https://support.google.com/
chromecast/answer/6398952, accessed Apr-2018.
[32] G. G. Guly´as, D. F. Som´e, N. Bielova, and C. Castelluccia, “Browser
Extension and Login-Leak Experiment,” https://extensions.inrialpes.fr/,
accessed Apr-2018.
[33] ——, “To Extend or not to Extend: On the Uniqueness of Browser
Extensions and Web Logins,” in WPES@CCS, 2018, pp. 14–27.
15
[34] A. G´omez-Boix, P. Laperdrix, and B. Baudry, “Hiding in the Crowd:
an Analysis of the Effectiveness of Browser Fingerprinting at Large
Scale,” in WWW, 2018.
[35] A. Kapravelos, C. Grier, N. Chachra, C. Kruegel, G. Vigna, and
V. Paxson, “Hulk: Eliciting Malicious Behavior in Browser Extensions,”
in USENIX Sec., 2014, pp. 641–654.
J. Kettle,
skeletonscribe.net/2011/07/sparse-bruteforce-addon-scanner.html,
2011.
“Sparse Bruteforce Addon Detection,”
http://www.
[36]
[37] K. Kotowicz, “Intro to Chrome addons hacking: ﬁngerprinting,”
http://blog.kotowicz.net/2012/02/intro-to-chrome-addons-hacking.html,
2012.
[38] P. Laperdrix, W. Rudametkin, and B. Baudry, “Beauty and the Beast: Di-
verting Modern Web Browsers to Build Unique Browser Fingerprints,”
in S&P, 2016, pp. 878–894.
[39] LastPass,
“LastPass:
Manager,”
//chrome.google.com/webstore/detail/lastpass-free-password-
ma/hdokiejnpimakedhajhdlcegeplioahd, accessed May-2018.
Password
Free
https:
[40] R. Linus, “Your Social Media Fingerprint,” https://robinlinus.github.io/
socialmedia-leak/, 2016.
[41] L. Liu, X. Zhang, V. Inc, G. Yan, and S. Chen, “Chrome extensions:
Threat analysis and countermeasures,” in NDSS, 2012.
[42] Microsoft,
“Internet
Extensions,”
//docs.microsoft.com/en-us/previous-versions/windows/internet-
explorer/ie-developer/platform-apis/aa753587(v%3dvs.85), 2018.
Explorer
Browser
https:
[43] Mozilla, “Add-on Policies,” https://developer.mozilla.org/en-US/Add-
ons/AMO/Policy/Reviews, accessed May-2018.
[44] ——, “content scripts,” https://developer.mozilla.org/en-US/Add-ons/
WebExtensions/manifest.json/content scripts, accessed Feb-2018.
[45] ——,
“extension.geturl(),” https://developer.mozilla.org/en-US/Add-
ons/WebExtensions/API/extension/getURL, accessed Feb-2018.
[46] ——,
“manifest.json,” https://developer.mozilla.org/en-US/Add-ons/
WebExtensions/manifest.json, accessed Feb-2018.
[47] ——, “Most Popular Extensions,” https://addons.mozilla.org/en-US/
ﬁrefox/search/?sort=updated&type=extension, accessed Feb-2018.
[48] ——, “Private Browsing - Use Firefox without saving history,”
https://support.mozilla.org/en-US/kb/private-browsing-use-ﬁrefox-
without-history, accessed May-2018.
[49] ——, “Proﬁles - Where Firefox stores your bookmarks, passwords and
other user data,” https://support.mozilla.org/en-US/kb/proﬁles-where-
ﬁrefox-stores-user-data/, accessed Mar-2018.
[50] ——,
“web accessible resoruces,”
https://developer.mozilla.org/en-
US/Add-ons/WebExtensions/manifest.json/web accessible resources,
accessed Feb-2018.
[51] Mozilla Add-ons Blog, “WebExtensions in Firefox 57,” https://blog.
mozilla.org/addons/2017/09/28/webextensions-in-ﬁrefox-57/, accessed
Feb-2018.
[52] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and
G. Vigna, “Cookieless monster: Exploring the ecosystem of web-based
device ﬁngerprinting,” in S&P, 2013, pp. 541–555.
I. S´anchez-Rola, I. Santos, and D. Balzarotti, “Extension Breakdown:
Security Analysis of Browsers Extension Resources Control Policies,”
in USENIX Security Symposium, 2017, pp. 679–694.
[53]
[54] A. Sj¨osten, S. Van Acker, and A. Sabelfeld, “Non-behavioral exten-
sion detector,” http://blueberry-cobbler-11673.herokuapp.com, accessed
May-2018.
[55] ——, “Discovering Browser Extensions via Web Accessible Re-
sources,” in CODASPY. ACM, 2017, pp. 329–336.
[56] O. Starov and N. Nikiforakis, “XHOUND: Quantifying the Fingerprint-
ability of Browser Extensions,” in S&P, May 2017, pp. 941–956.
[57] StatCounter, “Desktop Browser Market Share Worldwide,” http://
gs.statcounter.com/browser-market-share/desktop/worldwide, accessed
May-2018.
[58] W3C, “CSP2,” https://www.w3.org/TR/CSP2/, accessed Nov-2018.
[59] ——, “User Timing,” https://www.w3.org/TR/user-timing, accessed
May-2018.