nerability, which aids us in verifying the reliability of our scans
and assess the accuracy of our findings.
We investigate XSS and SQLi vulnerabilities because they pose
significant risks to website operators and website users. SQLi at-
tacks allow adversaries to execute SQL queries on a web applica-
tion‚Äôs database, which can lead to sensitive user information being
leaked (e.g., personally identifiable information (PII)), privileges
being escalated, or access control being bypassed (e.g., SQLi for a
login form). Similarly, cross-site scripting (XSS) attacks can allow
attackers to inject and execute arbitrary JavaScript code within the
user‚Äôs browsers in the scope of the website, which can allow the
attacker to steal user data and login tokens; worse, depending on
involved URLs, domain, and scopes for cookies, an orphaned page
might have access to cookies set by non-orphaned pages of a web-
site. Last, we study their security configuration to get insights into
how security is being handled. See Section 6.2 for a discussion of
the ethics of our security analysis, that is, how we minimized harm
and performed responsible disclosure.
5.1.3 Requirements Minimization We also minimize our data set
to not scan pages that cannot be vulnerable because they do not
satisfy the requirements for the specific vulnerability. This is im-
portant from an ethical perspective, to reduce network load and to
not cause website operators to expend resources to serve requests
that have no purpose.Notably, XSS and SQLi vulnerabilities require
that the website processes user input in some form. Hence, for XSS
and SQLi, we limit us to pages allowing user input.
To establish whether a page allows user input, we err on the side
of caution and include all pages having any indicator that they
might process input. We consider the presence of any query pa-
rameter and the presence of form and input tags within the HTML
code of a page as an indicator of user input. When only including
such pages, we find 636 Orphaned pages, 997 pages from Control 1,
and 1007 pages from Control 2 that might allow for user input.
Please note that this filter was applied after group selection.
Furthermore, albeit first released in 1995, JavaScript only be-
came widely adopted with more available libraries, like the promi-
nent jQuery library, first released in late 2006 and still being widely
used today, and the use of AJAX. In turn, encountering it, and
therefore XSS vulnerabilities, in pages from before 2007 is unlikely,
which is why we limit our XSS tests to pages newer than 2007.
5.2 Results
Following, we present the results of our security scans. Please see
Table 3 and Table 4 for an overview of our results.
5.2.1 Cross-Site Scripting (XSS) Limiting our security scan for XSS
vulnerabilities to the exact URL, we find that 128 orphan pages suf-
fer from XSS vulnerabilities (20.1%). This stands in stark contrast
to the general Internet (Control 1) with 17 vulnerable pages (1.7%)
and also the non-orphaned pages on the same websites themselves
(Control 2) with 64 pages (6.3%) vulnerable to XSS, with both dif-
ferences being statistically significant at ùëù alert('VULNERABLE').‚Äù We also verified that it is no
longer the current login page, that is, it is indeed orphaned.
Overall, we find that orphaned pages are more likely to be vul-
nerable to XSS than a general sample of pages (Control 1) and non-
orphaned pages on websites that have orphans (Control 2), statis-
tically significant at ùëù < 0.01 in ùúí 2. Interestingly, websites that
have orphaned pages (Control 2) also have a worse security pos-
ture than pages for which we identified no orphans (Control 1),
also statistically significant at ùëù < 0.01 in ùúí 2.
SQL Injections (SQLi) Considering SQLi vulnerabilities, we
5.2.2
find 25 orphan pages (3.9%), 22 general pages (1.7%, Control 1, dif-
ference significant at ùëù < 0.05 in ùúí 2), and 81 non-orphaned pages
for websites with orphans (8.0%, Control 2, significant at ùëù < 0.01
in ùúí 2) are vulnerable to SQLi when scoping our scan to the exact
URL. This is interesting: Orphan pages themselves are only slightly
more vulnerable than general pages, but non-orphaned pages on
website with orphans are almost five times as likely to be vulnera-
ble to SQLi than general pages (significant at ùëù < 0.01 in ùúí 2).
Broadening our measurement scope from the URL to the page,
however, these results change. Here, we see a significant increase
to 69 vulnerable orphan pages (10.8%), and slight increases to 27
general pages (2.7%, Control 1, significant at ùëù < 0.05 in ùúí 2) as well
as 96 pages for Control 2 (9.5%, ùëù ‚âà 0.39 in ùúí 2). This highlights
that restricting scans to the exact URL is insufficient, for exam-
ple, because of SQLi on some parameters that were not part of the
original URL, such as a pagination parameter. Similar to our XSS
scans, our page-scoped scans were performed after our first round
of notifications and some vulnerabilities have been remedied be-
fore our page-scoped scan. Overall, by broadening the scope of our
scan, we found 53 new vulnerable orphan pages, 18 new vulnerable
pages for our general sample (Control 1), and 43 new vulnerable
non-orphaned pages for websites with orphans (Control 2).
We manually validated the PoCs to assess our accuracy for SQLi
vulnerabilities. We find that 122 (38.1%) pages can be readily ver-
ified to be vulnerable with the PoCs. A further 73 (22.8%) pages
have been taken down by their operators since, possibly in re-
sponse to our notifications. Sixty-five (65, 20.3%) pages adopted
Table 3: Number of Cross-Site Scripting (XSS) and SQL Injec-
tion (SQLi) vulnerabilities among pages that allow for user
input. ùëù-values are relative to the Orphan group in ùúí 2.
Scope
Vuln.
URL
Page
XSS
SQLi
XSS
SQLi
Control 1
n=997
17 (1.7%)
22 (2.2%)
20 (2.0%)
27 (2.7%)
Control 2
n=1007
64 (6.3%)
81 (8.0%)
59 (5.9%)
96 (9.5%)
Orphaned
n=636
128 (20.1%)
25 (3.9%)
123 (19.3%)
69 (10.8%)
ùëùùëê1
ùëùùëê2
<0.01
<0.05
<0.01
<0.01
<0.01
<0.01
<0.01
‚âà0.39
other mitigations after our notification, leaving 60 (18.8%) PoCs
that require manual in-depth analysis. Unfortunately, we have
been unable to assess whether they are truly false positives: They
are blind SQLi that rely on the sleep function, and, while the pages
do behave differently for the generated PoCs and the original URL,
we did not find any correlation to the value provided to the sleep
function. For some cases sampled at random, we could determine
that the sleep function was unsupported by the databases (e.g.,
MSSQL), resulting in the database query failing, the page load never
completing, and no response being sent to the user. Accordingly,
while we believe that these cases are true positive injections due
to their behavioral differences, we refrained from further manual
in-depth analysis to not cause undue harm.
A noteworthy SQLi example is an orphaned page of a govern-
ment organization that is responsible for entrance exams for edu-
cation in medical professions, which still provides access to old in-
stances of applicant handling systems via example.med/index.php/
applicants/applicants-2008/apps08prospective?tmpl=index\&pri
nt=1\&page=1. Here, the tmpl parameter is vulnerable to SQLi, such
as, 1+or+sleep(10)#. After our notifications, this page was removed
without providing a reply back to us.
Overall, for SQLi, we find orphaned pages to be significantly
more likely to be vulnerable than a random sample on the web
(Control 1), statistically significant at ùëù < 0.05 in ùúí 2 for our URL-
scoped scan and at ùëù < 0.01 in ùúí 2 for our page-scoped scan. More-
over, for the broader page-scoped scan, there is no longer a signifi-
cant difference between pages that are orphaned and non-orphaned
for websites that have orphans (Control 2). In fact, all pages on
websites with orphans have a comparable share of SQLi vulner-
abilities (9.5% and 10.8% respectively), which is also significantly
higher than that of general pages (2.7%) with ùëù < 0.01 in ùúí 2.
Security Configuration Issues Finally, in addition to XSS and
5.2.3
SQLi, we also assess if sites set a Content Security Policy (CSP)
or HTTP Security Headers, as well as if they use the Secure or
HttpOnly flags for cookies. We only report URL-scoped results
as the scan scope does not affect these issues. Although we en-
counter a similar trend as to our XSS evaluation, the effect sizes
(even though significant in ùúí 2) are too small to allow for conclusive
statements. Similarly, we only found a limited number of cases of
Open Redirects and Path Traversal vulnerabilities (0 to 7), prevent-
ing us from drawing conclusions regarding their differences.
6 Discussion
In this section, we discuss the applied and scientific use cases for
our methodology. Furthermore, we discuss ethical implications
of our approach, how we addressed these, and the limitations our
methodology and measurements have.
Session 1A: Cybercrime CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea31Table 4: Comparison of found security configuration issues.
We omit some ùëù-values (ùúí 2) due to small effect size.
Issue
No Content Security Policy
No HTTP Security Headers
No Secure Flag Cookie
No HttpOnly Flag Cookie
Path Traversal
Open Redirect
Control 1
n=1875
1758 (93.8%)
1660 (88.6%)
738 (39.4%)
545 (29.1%)
0 (0%)
1 (<1%)
Control 2
n=1944
1838 (94.5%)
1751 (90.1%)
755 (38.8%)
713 (36.7%)
7 (<1%)
0 (0%)
Orphaned
n=1953
1896 (97.1%)
1859 (95.2%)