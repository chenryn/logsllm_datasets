博客原文地址:
> 
# 原型对象及相关基础
在JavaScript中只有一种结构:对象,也就是常说的"万物皆对象"。
而每个实例对象都有一个原型对象,而原型对象则引申出其对应的原型对象,经过一层层的链式调用,就构成了我们常说的"原型链"。
实例对象可以通过`__proto__`访问其原型对象:
    >  let obj = {};
      obj.__proto__;
      obj.__proto__.__proto__;
     传入的`querytoken`与`user.admintoken`的md5哈希值一样
因此我们可以通过上面发现的原型链的漏洞对`admintoken`进行赋值。那么继续探讨如何对其进行赋值。
`Array`实例继承自`Array.prototype`,因此我们可以通过更改构造函数的原型对象来对所有的`Array`实例进行修改。
那么我们可以通过这个思路来做到变量覆盖。
通过代码我们可以发现`user`为`Array`,`matrix`同样是`Array`,因此我们根据上面的思路,通过对`matrix`进行赋值进而篡改`user.admintoken`的值。
在控制台演示原型链污染如下:
    >  a=[];
      b=[];
      b["__proto__"];
      b["__proto__"]["admintoken"]="ccda";
      a
      a.admintoken
    <· "ccda"
因此我们传入的payload就可以构造出来了。