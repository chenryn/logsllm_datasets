### Correctness of Root Triggers in Dataset I

- **Correct (cases a-c)**
- **Incorrect (cases d-f)**
- **Incorrect (case g)**

| Classifier | Cost Matrix | Correct (%) | Incorrect (d-f) (%) | Incorrect (g) (%) |
|-----------|-------------|-------------|---------------------|-------------------|
| Naive Bayes | \(\langle 0, 1 \rangle\) | 10, 0 | 99.94 | 0.06 |
| Bayesian Network | \(\langle 0, 1 \rangle\) | 10, 0 | 99.94 | 0.06 |
| SVM | \(\langle 0, 1 \rangle\) | 100, 0 | 99.37 | 0.28, 0.35 |

**Table 6: Correctness of root triggers in Dataset I. Cases (a-g) refer to the various predicted root-trigger outcomes in Figure 4 in the Appendix.**

### 4.3 Abnormal Traffic in Datasets I

#### 4.3.1 Malicious Browser Extension
We developed a proof-of-concept malicious Firefox extension, which is a password-stealing spyware. This malware sends the username and password when a user clicks the "Submit" button in the browser. The spyware, similar to existing ones like FormSpy and FFsniff, captures login credentials from email services and Internet forums. The HTTP requests containing the username and password are sent to a remote host. Our causality analysis tool successfully detected all malicious HTTP requests without any false positives or false negatives.

#### 4.3.2 Data Exfiltrating Malware
We also created a proof-of-concept data-exfiltrating malware that runs as a standalone process, similar to Pony bot. This malware sends HTTP GET/POST requests with system information to remote servers. It transmits its payload immediately after a user event on the host, attempting to blend in with legitimate outbound traffic. Our method successfully identified the network activities of this malware by detecting the lack of valid triggering relations, i.e., the absence of any user event as the root trigger.

#### 4.3.3 Detection of Malicious Traffic in Dataset I
As defined in Section 3.5, vagabond events are those without valid user events as their root triggers. In Dataset I, 1.2% of the HTTP requests are vagabond. Some of these are malicious traffic to known blacklisted websites. Our analysis found 169 suspicious requests sent to 36 distinct domains. Manual inspection revealed that these requests were directed to tracking sites, malware-hosting, or blacklisted sites, and aggressive adware. These requests are partly due to users visiting compromised websites. For example, some requests track user cookies and send them to known blacklisted sites (e.g., 2o7.net, imrworldwide.com, mediaplex.com). Geographically, most of the malicious servers are located in the US, with one in the Netherlands.

#### 4.3.4 False Alerts
In our model, false alerts are network requests that are vagabond (i.e., without proper triggers) but are legitimate. The main reasons for false alerts in Dataset I include:
- **Automatic and periodic updates**: System and application updates occur without user triggers. There were 157 update requests to 13 well-known legitimate domains.
- **Missing or incomplete attributes**: Due to server configuration issues, such as redirection without setting the referrer field properly. There were 244 misconfigured requests to 38 different domains, typically image/video hosting sites.
- **Unconventional attribute values**: Requests to googlesyndication.com (for Google Maps) often have long referrers that our prototype does not expect.
- **Delayed parent request triggers**: Requests for favorites or bookmark icons sent out much later than their parent request.

Reducing false alerts can be achieved through more sophisticated inference methods under incomplete information, which will be explored in future work.

### 4.4 Causality Analysis of Datasets II

#### 4.4.1 Pairwise Classification Accuracy
The pairwise classification results on Dataset II, which includes mixed traffic types like DNS and HTTP requests, are presented in Table 5. All three methods (Naive Bayes, Bayesian Network, and SVM) provided high pairwise classification accuracy, confirming our method's ability to discover triggering relations in mixed traffic. Bayesian Network and SVM performed better than Naive Bayes, indicating dependencies among attributes. The pairwise classification accuracy under various cost matrices is shown in Figure 3(c).

#### 4.4.2 Correctness of Root Triggers
We analyzed the root-trigger accuracy for Dataset II, with results shown in Figure 3(d). All three classifiers yielded high root-trigger accuracy, with Bayesian Network and SVM outperforming Naive Bayes. The root-trigger accuracy results under the cost matrix \(\langle 0, 1 \rangle\) are highlighted in Table 7.

| Classifier | Cost Matrix | Correct (%) | Incorrect (d-f) (%) | Incorrect (g) (%) |
|-----------|-------------|-------------|---------------------|-------------------|
| Naive Bayes | \(\langle 0, 1 \rangle\) | 98.44 | 1.37 | 0.19 |
| Bayesian Network | \(\langle 0, 1 \rangle\) | 100.00 | 0.00 | 0.00 |
| SVM | \(\langle 0, 1 \rangle\) | 100.00 | 0.00 | 0.00 |

**Table 7: Root-trigger results on Dataset II. Cases (a-g) refer to the various predicted root-trigger outcomes in Figure 4 in the Appendix.**

### 4.5 DNS Bot Detection
Botnet command and control channels using DNS tunneling are extremely stealthy and difficult to detect. We developed a proof-of-concept bot that communicates with its bot master by tunneling command and control messages in DNS traffic. The bot generates carefully crafted outbound DNS queries with encoded data. These queries were mixed with a 2-hour DNS-HTTP traffic dataset and analyzed by our causality tool. Our evaluation confirmed that our method successfully recognized all the bot DNS queries as anomalies, as they lacked valid user-event root triggers.

### 4.6 Causality Analysis of Datasets III
For Dataset III, the goal was to find the triggering relation between inbound and outbound TCP packets using our machine learning method. The pairwise classification accuracy results are in Table 5. All three classifiers yielded high values, with Bayesian Network and SVM outperforming Naive Bayes. The features used for classification are shown in Table 10 in the Appendix.

### 4.7 Precision and Recall
Our methods resulted in high precision and recall for all datasets. Bayesian Network and SVM achieved 100% pairwise classification accuracy and 100% root-trigger correctness for Dataset II. Precision values were slightly lower than recall values, indicating more false positives than false negatives. This is partly due to the customized penalty weights in the cost matrix.

### 4.8 Performance
Runtime results were obtained on a machine with an Intel Duo Processor E8400, 3GB RAM, and 250GB HDD. For each dataset, we report the runtime of pairing, training, classification, and find-root operations. The means reported in Table 8 are averaged from five runs. Standard deviations were negligible and not shown.

| Data | Pair (s) | Train (s) | Classify (s) | Find Root (s) |
|------|----------|-----------|--------------|---------------|
| I    | 1848     | 0.5       | 1.2          | 79.9          |
| II   | 622      | 0.8       | 2.1          | 13.4          |
| III  | 14686    | 2.6       | 7.9          | 546           |

**Table 8: Averaged performance (in seconds) of Pairing, Training, Classification, and Find-root operations. NB and BN stand for Naive Bayes and Bayesian Network classifiers, respectively. Pairing time includes feature extraction.**

The most time-consuming task is the Pairing operation, which can take up to 4 hours to generate pairs from 3 million TCP messages. On a single day, at most 200MB of pairwise data can be generated from a serverâ€™s TCP packet headers, taking only 6 minutes on average, indicating that our method is efficient enough for practical use.

### 4.9 Summary
- **Bayesian Network** provided the best analysis accuracy for all datasets, while Naive Bayes gave the lowest accuracy, indicating dependencies in pairwise features. The accuracy can be improved by strategically defining the cost matrix.
- **Precision and recall** metrics are more sensitive to the quality of classification results than pairwise accuracy, due to the sparsity of triggering relations.
- Our causality analysis successfully revealed all outbound traffic to 36 malicious domains with zero false negative rate and detected the stealthy network activities from our proof-of-concept browser spyware, DNS bot, and standalone data-exfiltrating malware.
- **Limitations**: The Pairing operation has high computational overhead due to quadratic complexity. Heuristics to improve pairing efficiency may decrease analysis accuracy, a tradeoff we will investigate in future work. Our current feature extraction method struggles with HTTP requests involving incomplete or unconventional attributes, leading to false alerts. Advanced inference techniques are needed to improve this recognition.

### 5. Related Work
Recent works on classifying and discovering application or service dependencies for management and reliability purposes [7, 9, 22, 23, 31, 43] differ from our triggering relation discovery in two aspects:
- **Semantics of relations**: Dependency in those papers refers to reliance on services, not triggering relations.
- **Granularity of analysis**: Our request-level triggering relations are more fine-grained than service- or application-level dependencies.

Machine learning approaches have been widely adopted in security literature [26]. Solutions described in [13, 29] use machine learning to identify malicious JavaScript code. Xie et al. [39] proposed using Bayesian networks for real-time security analysis, but their work is not designed for analyzing request-level network traffic. EXPOSURE [8] detects malicious domains through large-scale and passive DNS analysis, classifying DNS requests individually, while we use machine learning on pairwise relations. Our method can be applied to various types of network traffic. Nguyen and Armitage [32] surveyed Internet traffic classification using machine learning, and Williams et al. [38] studied summarizing payload-independent features for IP traffic flow classification. Other learning-based security research includes database intrusion detection [35], identifying botnet traffic [30], and SMS/social network spam detection [37, 42]. Our triggering relation discovery model and technique uniquely extract and recognize directional relations and structures, going beyond conventional approaches.