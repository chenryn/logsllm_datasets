G (i.e., for a polynomial f of degree ≤ d, f (−b) =
for each (a, k) ∈ [ℓ
for each i ∈ [n].
a
′
i
n−2t
m=1 λb,mf (zm)).
∑
Each Ledger Server locally computes its share of
V (k)
b =
n−2t
m=1 λb,mU (k)
zm for each (b, k) ∈ [ℓ] × [K].
∑
To see that the interpolation in step 12 results in batch
(−a)
a (−b)
] × [ℓ] × [K]. Thus the sharings V (k)
∑
sharings of
=
for each (a, b, k) ∈ [ℓ
hold the same secrets as H (k)
a .
correct values, note
n−2t
m=1 λb,mH (k)
that V (k)
a (zm) = H (k)
the
n−2t
m=1 λb,mU (k)
zm (−a) =
′
b
b
The Convert Sharings protocol is used in the Ledger Server
Loop (see Section 3.7) to convert single secret sharings to
batch sharings as needed to conserve space.
The Ledger Servers use the protocol Refresh Ledge to proac-
tively refresh their ledger secret sharings and batch sharings.
Refresh Ledger
Parties: S1, . . . , Sn.
Input: Each Ledger Server use all its ledger entries as
input.
Output: Each Ledger Server holds refreshed shares of
the shared data in the ledger.
1. Each Ledger Server broadcasts a list of all addresses
that they have stored in the balance ledger. Any
address that is broadcast by at least n − t of the
servers is added to a list SA of addresses.
2. Each Ledger Server broadcasts a list of all transac-
tion ledger entries whose sending and receiving ad-
dresses are in SA (although they do not broadcast
their shares of the transaction values). Any trans-
action broadcast by at least n − t of the servers is
added to a list ST of transactions.
3. For each address in SA and each secret-shared trans-
action in ST , the Ledger Servers locally add the as-
sociated secret sharings into a list, (f (1), . . . , f (m1)).
Similarly, the batch-shared transactions in ST are
added into a list (g(1), . . . , g(m2)).
invoke
4. The
Servers
Ledger
Refresh with
input and RefreshB with
(f (1), . . . , f (m1)) as
(g(1), . . . , g(m2)) as input.
5. Each server adds its refreshed shares to the balance
and transaction ledgers.
Since refreshing the ledger adds to the computational and
communication cost of maintaining the system, the transac-
tion ledger entries need not be retained inde(cid:12)nitely. They
could be deleted after some (cid:12)xed amount of time.
3.5 Transaction Protocols
Initializing an Address
This section describes the protocols used to initialize ad-
dresses, transfer coins from one address to another, and to
retrieve data from the ledger of balances and transactions.
3.5.1
The user, U , has an Identity Veri(cid:12)cation Server, V , verify
that the user’s ID is legitimate, the user generates a private
key and corresponding address, then the ID is secret-shared
among the Ledger Servers. This allows the Ledger Servers
to de-anonymize an address if needed at some point in time.
Each message sent to the Ledger Servers will contain a
nonce. The nonce will contain both a time-stamp (used to
prevent replay attacks) and a κ-bit random number.
Initialize AddressU
Parties: U , V , S1, . . . , Sn.
Input: U ’s identifying information, ID.
Output: Signed messages mi (described in the last
step) to each Si.
1. U sends ID to V .
2. V veri(cid:12)es that ID is the identity of a real person.
If so, V returns SigV (ID) to U . If not, V sends the
message reject to U and the protocol terminates.
3. U generates a private key and corresponding public
key A.
4. V generates polynomials f and g of degree t such
that f (0) = ID and g(0) = SigV (ID) and sends
mi = (init_addr, nonce, A, V, f (i), g(i)) along with
SigA(mi) to each Si.
As discussed in Section 3.4.2, after U runs Initialize AddressU ,
the Ledger Servers collect the received data into blocks the
Ledger Server Loop, and after broadcasting these blocks, they
run Initialize AddressS.
Initialize AddressS
Parties: S1, . . . , Sn.
Input: A, V ; at least n − t of the Si hold vi, wi. (The
values vi, wi are the (purported) shares f (i), g(i) re-
ceived from the user in Initialize AddressU .)
Output: Each Si has a balance ledger entry for A.
1. The servers invoke Random twice to generate degree
t polynomials r1 and r2, and each Si that had input
vi, wi broadcasts vi + r1(i) and wi + r2(i).
2. Each server performs the Berlekamp-Welch algo-
rithm to determine if the values broadcast in the
previous step lie on two degree t polynomials, and
if so compute the constant terms. If the Berlekamp-
Welch algorithm fails for either polynomial, the pro-
tocol terminates without initializing the address.
6′
′
′
3. Let v denote the constant term interpolated from
the vi + r1(i), and let w denote the constant term
interpolated from the wi + r2(i). Each Si locally
(i) = v − r1(i). This de(cid:12)nes
computes its share of f
a new polynomial f
(0) = f (0) = ID,
where f is the polynomial from Initialize AddressU
(if U is honest). Similarly, the servers de(cid:12)ne and
(x) = w − r2(x) such that
compute shares of g
′
g
(0) = g(0) = SigV (ID).
such that f
4. The servers run an MPC protocol for verifying that
the value of SigV (ID) received from U is, in fact,
a valid signature for ID. This is performed using
f
as inputs. If the signature is invalid, the
protocol terminates.
and g
′
′
′
5. The servers invoke Zero to generate a polynomial
(i), b(i), 0) to the balance
′
b, and each Si adds (A, f
ledger.
The use of an MPC protocol to verify a secret-shared sig-
nature for a secret-shared identity is the slowest part of the
protocol, but note that this process need only be performed
once for each address. The complexity of the protocol will
vary depending on which public key scheme is being used.
Protocols from [20] for modular arithmetic on secret-shared
values can be used for implementing that step.
3.5.2 Transfer
To transfer coins from one address to another, the sender
secret-shares the amount to be transferred, the Ledger Servers
use a secure comparison protocol to check that the sender is
not overdrawing the address, and then the amount is sub-
tracted from the sender’s balance and added to the recip-
ient’s balance. However, it is also necessary to verify that
the amount being transferred falls into the proper range;
namely, it must be less than 2γ. Therefore, instead of the
sender secret sharing the value as a single (cid:12)eld element, the
sender will secret-share each of the γ bits of the value sepa-
rately.
The transfer protocol must prevent replay attacks in which
the adversary re-sends the transfer request, thereby mov-
ing more coins out of the sender’s address than anticipated.
Therefore, the (signed) transaction will contain a counter;
the counter will be set to j for the jth transaction out of the
address. If the user forgets the value of the counter, she can
perform a balance check (described later).
We allow the Ledger Servers to collect a transaction fee,
z, for each transaction. For simplicity, we assume there is
a single address, X, to which all fees are sent, although
one could modify the protocol to divide the fees among the
Ledger Servers if desired.
TransferU
Parties: U , S1, . . . , Sn.
Input: Sending address A1, receiving address A2, and
transfer value, s.
Output: Signed messages mi (described in the last
step) to each Si.
1. U decomposes s into its binary representation,
p , where s(γ−1) is the most sig-
(s(γ−1), . . . , s(0)) ∈ Zγ
ni(cid:12)cant bit and s(0) is the least signi(cid:12)cant bit.
2. U constructs γ degree t polynomials f (γ−1), . . . , f (0)
such that f (k)(0) = s(k) for each k = 0, . . . , γ − 1.
(tx, nonce, A1, A2, j,
(f (γ−1)(i), . . . , f (0)(i))) and SigA1
to each
Si.
sends mi
3. U
(mi)
=
After receiving the requests to transfer coins from the user,
the Ledger Servers run their portion of the protocol.
TransferS
i
i
i
).
, . . . , v(0)
Parties: S1, . . . , Sn.
Input: A1, A2, j; at least n − t of the Si hold
(v(γ−1)
(The value v(k)
is the (purported)
share f (k)(i) received in TransferU .)
Output: Each Ledger Server has a new entry in the
transaction ledger; additionally, the balance ledger en-
tries for A1 and A2 are updated to re(cid:13)ect the transac-
tion.
1. The Ledger Servers invoke Random γ times to gener-
ate polynomials (r(γ−1), . . . , r(0)), and each Si that
had input (v(γ−1)
, . . . , v(0)
i + r(k)(i)
for each k = 0, . . . , γ − 1.
) broadcasts v(k)
i
i
2. Each server performs the Berlekamp-Welch algo-
rithm to determine if the values broadcast in the
previous step lie on γ degree t polynomials, and if
so compute the constant terms. If the Berlekamp-
Welch algorithm fails for any polynomial, the pro-
tocol terminates without transferring the coins.
i + r(k)(i). Each Si
3. Let C (k) denote the constant term interpolated from
the v(k)
locally computes its
share of g(k)(i) = C (k) − r(k)(i) for each k =
0, . . . , γ − 1. This de(cid:12)nes new polynomials g(k) such
that g(k)(0) = f (k)(0) = s(k), where the f (k) are the
polynomials from TransferU (if U is honest).
4. The servers invoke Zero γ times to generate polyno-
mials {µ(k)}γ−1
k=0, invoke Mult to generate a sharing of
(g(k) + µ(k) − 1)g(k), and invoke Open on the sharing
of the product for each k = 0, . . . , γ−1. If any of the
∑
opened values is not zero, the protocol terminates.
5. Each server locally computes its share s(i) =
γ−1
k=0 2kg(k)(i) of the degree t polynomial s.
6. Let b1 and b2 denote the polynomials stored in the
balance ledger that represent the balances in the ad-
dresses A1 and A2 (respectively). The servers invoke
Compare to verify that b1(0) ≥ z + s(0). If this does
not hold, the protocol terminates.
7. The servers locally update their shares of the bal-
ances in addresses A1 and A2 as follows: b1(i) ←
b1(i) − s(i) − z and b2(i) ← b2(i) + s(i).
8. Each server locally updates the balance ledger entry
for the address X, incrementing its share by z.
9. Each server
locally increments the transaction
counter in the balance ledger for address A1 by one.
10. Each Si adds the entry (A1, A2, j, B, s(i)) to the
transaction ledger, where B is the block in which
this transaction was processed.
3.5.3 Balance Checks and Transaction Conﬁrmations
In the balance check protocol, the user sends a request
for the data, and each Ledger Server sends its copy of the
7transaction \meta-data" (addresses, counter numbers, and
block numbers) as well as shares of the required values. As
far as secret sharings are concerned, this is relatively simple:
Each Ledger Server sends the share as-is. For batch-shared
transactions, some computation by the Ledger Servers is
required before sending shares.
Suppose that U has requested some transactional data
that is stored in a batch with other users’ data. If U ’s re-
quested data is stored in locations k1, k2, . . . , km within the
batch, the Ledger Servers construct a canonical sharing of
a batch with ones in locations k1, k2, . . . , km and zeros else-
where. By canonical sharing, we mean a polynomial g such
that g(−kj) = 1 for each j = 1, . . . , m and g(−k) = 0 for all
other k = 1, . . . , t + ℓ. Since a canonical sharing for a known
set {k1, k2, . . . , km} is completely deterministic, the Ledger
Servers can compute their shares locally without any inter-
action. This sharing is then added to a random sharing of
a batch of all zeros for privacy reasons. The Ledger Servers
invoke MultB to multiply this sum by the batch sharing in
the transaction ledger. The shares of the resultant product
are then sent to the user.
The user looks up transactions that she authorized by
the counter number of the transaction. However, she has
no way to know what the counter number for transactions
she receives will be. Therefore, she looks them up by block
number, which is equivalent to looking them up by the time
at which the coins were received.
Check BalanceU
Parties: U , S1, . . . , Sn.
Input: Address A, for which U holds the private key.
Output: U holds values of the requested ledger entries.
If U wants to view some transactions with A as the
1.
sending address, then U sets j1 to be the earliest
transaction counter value requested and j2 to be the
latest. Otherwise, U sets j1 = j2 =⊥. If U wants
to view some transactions with A as the receiving
address, then U sets B1 to be the earliest block num-
ber requested and B2 to be the latest. Otherwise,
U sets B1 = B2 =⊥.
2. U sends m = (check_bal, nonce, A, j1, j2, B1, B2)
along with SigA(m) to each server Si.
3. U waits some pre-determined amount of time for the
Ledger Servers to respond. Upon receiving shares
of the requested data, U uses the Berlekamp-Welch
algorithm to reconstruct the shared data.
After receiving balance check requests from users in the
main loop, the Ledger Servers run their portion of the pro-
tocol.
Check BalanceS
Input: A, j1, j2, B1, B2.
Parties: U , S1, . . . , Sn.
Output: Requested ledger entries are sent to U .
1. Each server looks for the entry for address A in the
balance ledger, all entries in the transaction ledger
with A as the sending address with counter values
between j1 and j2, and all entries in the transaction
ledger with A as the receiving address with block
numbers between B1 and B2. (If j1 or j2 equals ⊥,
then the server assumes that U does not want infor-
2.