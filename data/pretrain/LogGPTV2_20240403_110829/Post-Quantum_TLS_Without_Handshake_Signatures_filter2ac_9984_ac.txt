e
g
n
a
h
c
x
e
y
e
k
l
a
r
e
m
e
h
p
e
:
1
e
s
a
h
P
e
g
n
a
h
c
x
e
y
e
k
d
e
t
a
c
i
t
n
e
h
t
u
a
y
l
t
i
c
i
l
p
m
I
:
2
e
s
a
h
P
/
n
o
i
t
a
m
r
fi
n
o
C
n
o
i
t
a
c
i
t
n
e
h
t
u
a
:
3
e
s
a
h
P
t
i
c
i
l
p
x
e
Figure 4: The KEMTLS handshake
can contact (since certificates must be pre-installed), and the latter
requires changes to the DNS infrastructure and moreover precludes
connections to servers identified solely by IP address.
3 THE KEMTLS PROTOCOL
KEMTLS achieves unilaterally authenticated key exchange using
solely KEMs for both key establishment and authentication, without
requiring extra round trips and without requiring caching or exter-
nal pre-distribution of server public keys: the client is able to send
its first encrypted application data after just as many handshake
round trips as in TLS 1.3.
KEMTLS is to a large extent modelled after TLS 1.3. A high-level
overview of the handshake is shown in Fig. 2, and a detailed pro-
tocol flow is given in Fig. 4. Note that Fig. 4 omits various aspects
of the TLS 1.3 protocol that are not relevant to our presentation
and cryptographic analysis but which would still be essential if
KEMTLS was used in practice. KEMTLS is phrased in terms of two
KEMs: KEMe for ephemeral key exchange, and KEMs for implicit
authentication; one could instantiate KEMTLS using the same algo-
rithm for both KEMe and KEMs (as we do in all our instantiations),
or different algorithms for different efficiency trade-offs, such as
an algorithm with slow key generation but fast encapsulation for
the long-term KEM. Either or both could also be a “hybrid” KEM
combining post-quantum and traditional assumptions [15].
There are conceptually three phases to KEMTLS, each of which
establishes one or more “stage” keys.
Phase 1: Ephemeral key exchange using KEMs. After estab-
lishing the TCP connection,1 the KEMTLS handshake begins with
the client sending one or more ephemeral KEM public keys pk𝑒
in its ClientHello message, as well as the list of public key au-
thentication, key exchange, and authenticated encryption meth-
ods it supports. The server responds in the ServerHello message
with an encapsulation ct𝑒 against pk𝑒 and the algorithms it se-
lected from the client’s proposal; note that if (none of) the pk𝑒 the
client sent was for the key-exchange method the server selected,
a special HelloRetryRequest message is sent, prompting a new
ClientHello message. Nonces 𝑟𝑐 and 𝑟𝑠 are also transmitted for
freshness. At this point, the client and server have an unauthenti-
cated shared secret ss𝑒. KEMTLS follows the TLS 1.3 key schedule,
which applies a sequence of HKDF operations to the shared secret
ss𝑒 and the transcript to derive (a) the client and server handshake
traffic secrets CHTS and SHTS which are used to encrypt subse-
quent flows in the handshake, and (b) a “derived handshake secret”
dHS which is kept as the current secret state of the key schedule.2
Phase 2: Implicitly authenticated key exchange using KEMs.
In the same server-to-client flight as ServerHello, the server also
sends a certificate containing its long-term KEM public key pk𝑆.
The client encapsulates against pk𝑆 and sends the resulting ci-
phertext in its ClientKemCiphertext message. This yields an im-
plicitly authenticated shared secret ss𝑆. The key schedule’s secret
state dHS from phase 1 is combined with ss𝑆 using HKDF to give
an “authenticated handshake secret” AHS from which are derived
(c) the client and server authenticated handshake traffic secrets
CAHTS and SAHTS which are used to encrypt subsequent flows
in the handshake,3 and (d) an updated secret state dAHS of the
key schedule. A master secret MS can now be derived from the
key schedule’s secret state dAHS. From the master secret, several
more keys are derived: (e) “finished keys” fk𝑐 and fk𝑠 which will
be used to authenticate the handshake and (f) client and server ap-
plication transport secrets CATS and SATS from which are derived
application encryption keys.4 The client now sends a confirma-
tion message ClientFinished to the server which uses a message
authentication code with key fk𝑐 to authenticate the handshake
transcript. In the same flight of messages, the client is also able to
1Our exposition and experiments deal with the general scenario of KEMTLS running
over TCP, analogously to TLS 1.3. As with TLS 1.3, the overhead from the TCP hand-
shake may be reduced by a variety of techniques as discussed in [29], such as using
TCP Fast Open [30] or QUIC with UDP [58].
2The key schedule in Fig. 4 starts with a seemingly unnecessary calculation of ES and
dES; these values play a role in TLS 1.3 handshakes using pre-shared keys; we retain
them to keep the state machine of KEMTLS aligned with TLS 1.3 as much as possible.
3CAHTS and SAHTS are implicitly authenticated: subsequent handshake traffic can
only be read by the intended peer server. This is particularly useful in the client-
authenticated version of KEMTLS in Appendix C when the client sends its certificate.
4TLS 1.3 also derives exporter and resumption master secrets EMS and RMS from the
master secret MS. We have omitted these from our presentation of KEMTLS in Fig. 4,
but extending KEMTLS’s key schedule to include these is straightforward, and security
of EMS and RMS follows analogously.
CCS ’20, November 9–13, 2020, Virtual Event, USA
Schwabe, Stebila, Wiggers
start sending application data encrypted under keys derived from
CATS; this is implicitly authenticated.
Phase 3: Confirmation / explicit authentication. The server
responds with its confirmation in the ServerFinished message,
authenticating the handshake transcript using MAC key fk𝑠. In
the same flight, the server sends application data encrypted un-
der keys derived from SATS. Once the client receives and verifies
ServerFinished, the server is explicitly authenticated.
4 SECURITY ANALYSIS
As KEMTLS is an adaptation of TLS 1.3, our security analysis follows
previous techniques for proving security of TLS 1.3. In particular, we
base our approach on the reductionist security approach of Dowl-
ing, Fischlin, Günther, and Stebila [38, 39]. Briefly, that approach
adapts a traditional Bellare–Rogaway-style [6] authenticated-key-
exchange security model to accommodate multiple stages of session
keys established in each session, following the multi-stage AKE
security model of Fischlin and Günther [41]. The model used for
TLS 1.3 in [38, 39] supports a variety of modes and functionality,
such as mutual versus unilateral authentication, full handshake and
pre-shared key modes, and other options. We are able to simplify the
model for this application, though we also add some other features,
such as explicit authentication and granular forward secrecy.
In this section, we give an informal description of the security
model, including the adversary interaction (queries) for the model;
the specific security properties desired (Match security, which en-
sures that session identifiers effectively match partnered sessions,
and Multi-Stage security, which models confidentiality and authen-
tication as described below); and a sketch of the proofs showing
that KEMTLS satisfies these properties. The full syntax and specifi-
cation of the security properties as well as the detailed proofs of
security for KEMTLS appear in Appendix B.
Security goal. The main security goal we aim for is that keys estab-
lished in every stage of KEMTLS should be indistinguishable from
a random key, in the face of an adversary who sees and controls
all communications, who can learn other stages’ keys, who can
compromise unrelated secrets (such as long-term keys of parties
not involved in the session in question), and who may, after-the-
fact, have learned long-term keys of parties involved in the session
(“forward secrecy”). This is the same security goal and threat model
for TLS 1.3 [38, 93]. We distinguish between implicit authentication
(where a key could only be known by the intended peer), which
follows from key indistinguishability and forward secrecy, and ex-
plicit authentication (which assures that the intended peer actually
participated). In this section we consider KEMTLS with unilateral
server-to-client authentication only; a sketch of KEMTLS with mu-
tual authentication is given in Appendix C.
4.1 Security model
In the following we describe informally the security model, focusing
on how it differs from the multi-stage AKE model used by Dowling
et al. [38, 39] to analyze signed-Diffie–Hellman in TLS 1.3. The
precise formulation of the model appears in Appendix B.
Model syntax. Each server has a long-term public key and corre-
sponding private key; we assume a public-key infrastructure for
certifying these public keys, and that the root certificates are pre-
distributed, but server certificates are not pre-distributed. Each
participant (client or server) can run multiple instances of the pro-
tocol, each of which is called a session. Note that a session is a
participant’s local instance of a protocol execution; two parties
communicating with each other each have their own sessions. Each
session may consist of multiple stages (for KEMTLS, there are 6
stages as marked in Fig. 4).
For each session, each participant maintains a collection of
session-specific information, including: the identity of the intended
communication partner; the role of the session owner (either initia-
tor or responder); the state of execution (whether it has accepted a
key at a certain stage, or is still running, or has rejected); as well
as protocol-specific state. For each stage within a session, each
participant maintains stage-specific information, including: the key
established at the stage (if any); a session identifier for that stage;
and a contributive identifier for that stage. Two stages at different
parties are considered to partnered if they have the same session
identifier. The session identifiers for KEMTLS are the label of the
key and the transcript up to that point (see Appendix B.3). For the
first stage, the contributive identifier is the ClientHello initially,
then updated to the ServerHello message; for all other stages, the
contributive identifier is the session identifier.
The model also records security properties for each stage key:
1) The level of forward secrecy obtained for each stage key. The
three levels of forward secrecy we meet are detailed in Section 4.2
below. The model allows for retroactive revision of forward secrecy:
the stage-𝑖 key may have weak forward secrecy at the time it is
established in stage 𝑖, but may have full forward secrecy once a
later stage 𝑗 > 𝑖 has completed (i.e., after receiving an additional
confirmation message). The level of forward secrecy also implies
whether the key should be considered implicitly authenticated.
2) Whether the stage is explicitly authenticated: if a party accepts
a stage, is it assured that its partner was live and established an
analogous stage? Again our model allows for retroactive explicit
authentication: while a stage-𝑖 key may not have explicit authenti-
cation when established in stage 𝑖, completion of a later stage 𝑗 > 𝑖
may imply that a partner to stage 𝑖 is now assured to exist.
3) Whether the key is intended for internal or external use.
TLS 1.3 and KEMTLS internally use some of the keys established
during the handshake to encrypt later parts of the handshake to
improve privacy, whereas other keys are “external outputs” of the
handshake to be used for authenticated encryption of application
data. Internally used keys must be treated more carefully in the
security experiment.
Our inclusion of forward secrecy and explicit authentication is
an extension to the multi-stage AKE model used for TLS 1.3 [38, 39].
Adversary interaction. The adversary is a probabilistic algorithm
which triggers parties to execute sessions and controls the commu-
nications between all parties, so it can intercept, inject, or drop any