SNARKs implementations [36], [83] have been proposed. An
updated survey for both interactive proofs and SNARKs can
be found in Thaler [92]. Most of the SNARKs require non-
falsifiable assumptions [54], though some of the recent works
that all partial results sum to(cid:81)d
such as [61] allows one to sidestep non-falsifiable assumptions
by using stronger computational models. SNARKs in general
provide no input privacy.
Homomorphic authenticators (HAs). HAs [1], [21], [22],
[30], [32], [53] allow a client to compute authenticators for the
elements of a dataset x = (x1, x2, . . . , xm) such that the server
is able to generate authenticator for a computation F (x). The
verification however is as heavy as the native computation.
Catalano et al. [31], [33] constructed outsourceable HAs with
multilinear maps. By considering multiple datasets, Backes
et al. [9] and Gorbunov et al. [59] constructed HAs that
have efficient amortized verification. None of them keeps data
private. Fiore et al. [49] constructed HAs for encrypted data
that can only compute quadratic polynomials.
Multiplicative secret sharing (MSS). In MSS [12], a client
secret-shares the data x = (x1, x2, . . . , xd) among multiple
servers; each server can locally compute a partial result such
i=1 xi. Verifiably MSS (VMSS)
[96] additionally enables the client to verify the servers’ partial
results and achieves information-theoretic privacy and security.
However, it only allows the computation of monomials.
Homomorphic secret sharing (HSS). HSS [23], [74] allows
a client to secret-share the data x among servers and then
offload the computation of F (x) to servers. HSS provides
computational input privacy and no verifiability.
Multiparty computation. In the client-servers setting, Barkol
et al. [11] constructed MPC protocols that allow a client to
privately compute constant-depth circuits, but without verifi-
cation. Dachman-Soled et al. [42] proposed an MPC protocol
for computing multivariate polynomials where parties hold
different variables as private inputs. The work of making MPC
practical has been successful [72]. However, the primary focus
of MPC is not outsourcing and each party’s computation is
typically as heavy as the native computation.
Multi-prover interactive proofs. The multi-prover interactive
proofs (arguments) [20], [71] are quite efficient. However, they
are interactive and leave the client’s input unprotected.
Verifiable secret sharing (VSS). In VSS [26], [47], the adver-
sary can completely dictate the behavior of the participants un-
der its control and may also control the dealer. The verifiability
of VSS guarantees that even if the dealer is corrupted, it still
has consistently shared some value among the participants and
the same value is later reconstructed. In our MSVC, the client
may be considered as a dealer that shares x among the servers
(participants). There are four fundamental differences between
MSVC and VSS. First, the client in MSVC is never cheating.
Second, the servers in MSVC never directly reconstruct x.
Instead, each server locally computes a partial result with
its share. The client is responsible to reconstruct F (x) from
partial results. Third, although VSS is applicable to MPC, the
resulting protocols require communications among the parties.
Fourth, MSVC allows the detection of cheating but provides
no guarantee of reconstructing a unique value.
Verifiable PIR. In the verifiable PIR protocols of [97], [98],
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
4599
The running time Tclient of the client and the total running time Tservers of
TABLE II
all servers (seconds)
case
medium
large
Π4
Π5
Trinocchio
Tclient
0.29
0.49
Tservers
33
115
Tclient
0.07
0.13
Tservers
17
59
Tclient
0.04
0.05
Tservers
6561
20106
any server that provided a wrong answer will be identified.
Although these protocols use no additional servers, both the
client and the servers in these protocols have to do a lot of
public-key operations. For example, in the protocols of [97],
[98], the client has to spend thousands of seconds in retrieving
an item from a database of 216 items. In contrast, our client
and severs only need tens of milliseconds and tens of seconds
respectively to retrieve an item from a database of 106 items.
Trinocchio. Comparing with [81], our schemes are free
of server communications and non-falsifiable assumptions.
Trinocchio [81] has a case study of multivariate polynomial
evaluations (a medium case and a large case). We do the same
case studies with Π4 and Π5, which share the same properties
of public delegation/verification with [81]. The experimental
results (Table II) show that the clients in our schemes may be
slightly slower but the servers are at least two orders faster.
Moreover, Π5 is free of a heavy preprocessing of F , which is
needed by Trinocchio. Trinocchio represents any function as
an arithmetic circuit and the servers need to perform a large
number of exponentiations, which result in worse performance.
The number of required servers in MSVC depends on the
degree of F . However, this is a theoretical consequence of
information-theoretic privacy plus non-communicating servers.
In [81], the servers have to interactively run MPC to evaluate
F (x). The same number of servers would be needed if the
Trinocchio servers are not allowed to communicate.
II. MULTI-SERVER VERIFIABLE COMPUTATION
For any set S, we denote with “s ← S” the procedure of
choosing an element s uniformly from S. For an algorithm
A, we denote with “y ← A(x)” the procedure of running A
on an input x and assigning its output to y. For any integer
k > 0, we denote [k] = {1, 2, . . . , k}. For any set T and any
vector x, xT will stand for the subvector (xi)i∈T .
A k-server verifiable computation scheme is a protocol
between a client and k servers S1, . . . ,Sk. In such a protocol,
the client provides both a share of the input x and a share of
the function F to each server; each server computes a partial
result; and finally the client recovers F (x) from the k partial
results. Let F be a set of functions. A k-server verifiable
computation scheme Π = (KeyGen, ProbGen, Compute,
Verify) for F consists of the following algorithms:
i=1) ← KeyGen(λ, F ): The key gener-
ation algorithm takes a security parameter λ and any
function F ∈ F as input and generates a value pkF ,
which will be used by the client to prepare its input
x ∈ Dom(F ), k function shares ρ1, . . . , ρk, which will
be used by the servers to compute partial results, and a
value vkF , which will be used by the client to perform
verifications.
• (pkF , vkF ,{ρi}k
• (vkx,{σi}k
i=1) ← ProbGen(pkF , x): The problem gen-
eration algorithm uses pkF to encode any input x ∈
Dom(F ) as k input shares σ1, . . . , σk, which will be
given to the servers to compute with, and a value vkx,
which will used by the client to perform verifications.
• πi ← Compute(i, ρi, σi): For every i ∈ [k], the server’s
• {F (x),⊥} ← Verify(vkF , vkx,{πi}k
algorithm computes a partial result πi with (ρi, σi).
i=1): The verification
algorithm uses vkF and vkx to determine if {πi}k
i=1 form
a valid encoding of F (x). If it is invalid, outputs ⊥;
otherwise, reconstructs F (x) from {πi}k
i=1.
An MSVC scheme is publicly delegatable if pkF is public
such that anyone is able to run ProbGen to delegate computa-
tions. An MSVC scheme is publicly verifiable if both vkF and
vkx are public. Otherwise, the scheme is privately verifiable.
Public delegation/verification are generally preferred. In this
paper, we will construct publicly delegatable schemes, among
which some are publicly verifiable and the others are privately
verifiable. In particular, all schemes have a public vkF .
An MSVC scheme is correct if KeyGen and ProbGen pro-
duce values that always enable the honest servers to compute
values that will verify successfully and be converted into F (x).
Definition 1. (Correctness) An MSVC scheme Π is said to
be F-correct if for any F ∈ F, any (pkF , vkF ,{ρi}k
i=1) ←
KeyGen(λ, F ), any x ∈ Dom(F ), any (vkx,{σi}k
i=1) ←
ProbGen(pkF , x), any {πi ← Compute(i, ρi, σi)}k
i=1, it holds
that Pr[Verify(vkF , vkx,{πi}k
i=1) = F (x)] ≥ 1 − negl(λ).
In MSVC, a set of colluding servers may try to persuade the
client to output a wrong value with incorrect partial results. For
privately verifiable schemes, security against such attacks may
be defined by properly generalizing the security experiment
of [17], where the adversary can make a number of trials, to
our multi-server setting (see Experiment 1). While the trials
are essential in [17], they are not necessary here because the
vkF in MSVC is always public and the colluding servers can
finish the trials on their own. In Experiment 1, the adversary
A models a set ST of colluding servers for some T ⊆ [k].
Given F, pkF , vkF and ST ’s shares of the function, A picks
an input x, learns ST ’s shares of the input, and then chooses a
set of partial results for ST . It breaks the security of MSVC if
finally the challenger accepts and reconstructs a wrong value.
Experiment 1. (ExpPriVA,Π (T, F, λ))
(a) (pkF , vkF ,{ρi}k
(b) x ← A(F, pkF , vkF , ρT );
(c) (vkx,{σi}k
(d) ˆπT ← A(F, pkF , vkF , ρT , x, σT );
(e) ˆπi ← Compute(i, ρi, σi) for every i ∈ [k] \ T ;
if ˆy /∈ {⊥, F (x)}, output 1; otherwise, output 0.
(f) ˆy ← Verify(cid:0)vkF , vkx,{ˆπi}k
(g)
Definition 2. (Security for privately verifiable schemes) For
T ⊆ [k] and ϵ > 0, an MSVC scheme Π is said to be (T, ϵ)-
secure if for any function F ∈ F, any input x ∈ Dom(F ),
and any adversary A, Pr[ExpPriVA,Π (T, F, λ) = 1] ≤ ϵ, where
the probability is taken over the randomness of A and the
i=1) ← ProbGen(pkF , x);
i=1) ← KeyGen(λ, F );
(cid:1);
i=1
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:01 UTC from IEEE Xplore.  Restrictions apply. 
5600
experiment. Moreover, Π is (t, ϵ)-secure if it is (T, ϵ)-secure
for any set T ⊆ [k] of cardinality ≤ t.
evaluations of F on k points, which will allow the client to
interpolate a degree ≤ dt polynomial
While Experiment 1 deals with schemes where vkF is public
but vkx is private. In our publicly verifiable schemes, both vkF
and vkx are public. The security of such schemes may defined
by generalizing the security experiment of [80] in single-server
setting to our multi-server setting. The resulting experiment
ExpPubVA,Π (T, F, λ) is identical to ExpPriVA,Π (T, F, λ) (as shown
in Experiment 1), except that the item (d) is replaced with
ˆπT ← A(F, pkF , vkF , ρT , x, vkx, σT ) such that A’s strategy
is also based on the public key vkx.
Definition 3. (Security for publicly verifiable schemes) For
T ⊆ [k], an MSVC scheme Π is T -secure if for any F ∈ F, for
any PPT adversary A, Pr[ExpPubVA,Π (T, F, λ) = 1] ≤ negl(λ),
where the probability is taken over the randomness of A and
the experiment. In particular, Π is t-secure if it is T -secure
for any set T ⊆ [k] of cardinality ≤ t.
Procedure. σΠ(T, F, x)
(pkF , vkF ,{ρi}k
(vkx,{σi}k
output σT .
i=1) ← KeyGen(λ, F );
i=1) ← ProbGen(pkF , x);
In MSVC, a set of colluding servers may try to learn the
client’s input from their input shares. For any T ⊆ [k], F ∈ F,
and x ∈ Dom(F ), ST will learn |T| input shares, which can
be generated by the procedure σΠ(T, F, x). Informally, we say
that Π is T -private if no strategy of ST is able to distinguish
between two inputs.
Definition 4. (Input privacy) For T ⊆ [k], an MSVC scheme
Π is T -private if for any F ∈ F, any x0, x1 ∈ Dom(F ),
σΠ(T, F, x0) and σΠ(T, F, x1) are identically distributed. If
Π is T -private for any T ⊆ [k] of cardinality ≤ t, then Π is
said to be t-private.
Remark. The adversaries in Definition 2 and 4 are un-
bounded. Thus, both the private verifiability and the input
privacy are information-theoretic.
III. PRIVATELY VERIFIABLE SCHEMES
d
In this section we show three privately verifiable schemes
for P(q, m, d). Each polynomial F (x) = F (x1, . . . , xm) in
this family has up to n =(cid:0)m+d
(cid:1) terms. For any t, we shall
show k-server schemes that are both t-secure and t-private.
The three schemes will require d(t + 1) + 1, (d + 1)t + 1 and
dt + 1 servers, respectively. The third scheme is optimal in
terms of the number of servers; and the other two will be
turned into publicly verifiable schemes in Section IV.
In all constructions, the basic idea of achieving t-privacy
is secret-sharing the input x ∈ Fm
q among all servers using
Shamir’s threshold scheme [87] for vectors. That is, the client
draws a random degree-t curve
c(u) = x + r1u + ··· + rtut
(1)
that resides in Fm
q and passes through (0, x), and then dis-
tributes k curve points to k servers. The k servers return the