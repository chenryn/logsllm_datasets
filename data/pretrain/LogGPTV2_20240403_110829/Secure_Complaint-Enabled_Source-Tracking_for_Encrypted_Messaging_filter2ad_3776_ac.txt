gets to choose the plaintext 𝑚 that is sent as well as the metadata md
included with authored messages. The same game applies for both
tree-linkable and tree-unlinkable security, with the only change
being that the 𝑙𝑖𝑛𝑘𝑎𝑏𝑙𝑒 flag in the malRec oracle is set to true for
tree-linkable security.
In order to keep track of messages and their associated forward-
ing trees, each message sent in the game is identified by a unique
message id 𝑚𝑖𝑑, and each forwarding tree is identified by a unique
𝑡𝑖𝑑, which is the value of 𝑚𝑖𝑑 for the message at the root of the tree.
The game uses table 𝑇𝑎𝑢𝑡ℎ to keep track of authoring data 𝑎𝑑 for
each honest user and table 𝑇𝑟𝑒𝑐 to keep track of messages received
by honest users. The set S𝑠𝑒𝑒𝑛 records which forwarding trees the
adversary has encountered, and the set S𝑎𝑙𝑙𝑜𝑤𝑒𝑑 keeps track of the
pairs of trees from which malRec can be given messages without
enabling a trivial win in the tree-linkable variant of the game.
Definition 3.2. The user confidentiality advantage of an adversary
A against a source-tracking scheme 𝑆𝑇 and messaging scheme E
is defined as
𝑆𝑇 ,E = 1(cid:105)(cid:12)(cid:12)(cid:12)
𝑆𝑇 ,E = 1(cid:105) − Pr(cid:104)𝑈𝐶𝑂𝑁 𝐹 A,0,ℓ
(cid:12)(cid:12)(cid:12)Pr(cid:104)𝑈𝐶𝑂𝑁 𝐹 A,1,ℓ
Adv
𝑆𝑇 ,E (A) =
uconf
where the adversary is given access to send and receive oracles for
all malicious users in U𝑚𝑎𝑙 as well as oracles getUser, goodAuth,
goodFwd, malSend, and malRecℓ,𝑏(·, ·, ·, ·). We refer to the advan-
tage as the tree-linkable advantage if ℓ = true and as the tree-
unlinkable advantage otherwise.
Platform confidentiality. We assume that a platform for an en-
crypted messaging scheme can see that a user 𝑈𝑠 sent a message
to 𝑈𝑟 , but that it cannot learn anything about the content of that
message, or whether it was a forward. There has been research into
the possibility of metadata-hiding messaging schemes where the
sender or receiver of a message can be hidden from the platform
(e.g., [8, 17–19, 36]), but we will be aligning our confidentiality
goals with the former setting, which corresponds to most deployed
messaging schemes, and assuming that the identities of the sending
and receiving users are visible to the platform.
The platform confidentiality game operates similarly to the user
confidentiality game, except that now the adversary controls the
platform and an arbitrary number of malicious users. Similar to user
confidentiality, the game gives the adversary oracles goodSend and
goodRec for sending messages between honest users and malSend
and malRec to send a message from or to a malicious user, respec-
tively. We separate the sending and receiving of messages into
separate oracles to allow the adversary to launch attacks that in-
volve delivering message data to unintended recipients or otherwise
tampering with the message delivery process. Additionally, a new
report oracle allows a user to report a message to the platform.
Finally, since the security game must ensure that the platform
adversary learns nothing about the plaintext of messages, the chal-
lenge message in the platform confidentiality game is sent to an
honest user instead of a malicious user. We formalize platform
confidentiality with the 𝑃𝐶𝑂𝑁 𝐹 game, described in Appendix A.1.
Definition 3.3. The advantage of an adversary A in the 𝑃𝐶𝑂𝑁 𝐹
game against a source-tracking scheme 𝑆𝑇 and messaging scheme
E is defined as
pconf
𝑆𝑇 ,E (A) =
Adv
𝑆𝑇 ,E = 1(cid:105)(cid:12)(cid:12)(cid:12)
𝑆𝑇 ,E = 1(cid:105) − Pr(cid:104)𝑃𝐶𝑂𝑁 𝐹 A,0
(cid:12)(cid:12)(cid:12)Pr(cid:104)𝑃𝐶𝑂𝑁 𝐹 A,1
where the adversary is given access to the oracles in Figure 7.
Definition 3.4. We say that a source-tracking scheme 𝑆𝑇 and
associated messaging scheme E satisfy confidentiality if for all effi-
cient adversaries A𝑢 and A𝑝, we have that both Adv
𝑆𝑇 ,E (A) and
uconf
pconf
𝑆𝑇 ,E (A𝑝) are negligible. If the advantage used in the 𝑈𝐶𝑂𝑁 𝐹
Adv
game is tree-linkable, then we say the scheme is tree-linkably con-
fidential, and likewise tree-unlinkably confidential if the advantage
is tree-unlinkable.
3.3 Accountability and Unforgeability
Accountability and unforgeability ensure that a source-tracking
scheme can provide the platform with useful and accurate informa-
tion when a message is reported. We present security games for
both properties in Figure 2.
The 𝑠𝑟𝑐𝐵𝐼 𝑁 𝐷 game addresses accountability by allowing a user
to send and receive any messages it would like, and then challenging
the adversary to send a message that is received by an honest user,
but fails when the honest user tries to report it to the platform.
The 𝑢𝑛𝐹𝑂𝑅𝐺𝐸 game addresses unforgeability by challenging an
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1488getUser(𝑈 , 𝑖𝑠𝑀𝑎𝑙)
U ← Uℎ𝑜𝑛𝑒𝑠𝑡 ∪ U𝑚𝑎𝑙
if 𝑈 ∈ U : return ⊥
if 𝑖𝑠𝑀𝑎𝑙 : U′ ← ⟨A, 𝑃𝑛𝑒𝑤 (sk, U)⟩(𝑈 , pk)
return ⊥
return ⊥
if U′ = ⊥ : return ⊥
return U𝑚𝑎𝑙 .𝑎𝑑𝑑(𝑈)
(𝑎𝑑, U′) ← ⟨𝑈𝑛𝑒𝑤, 𝑃𝑛𝑒𝑤 (sk, U)⟩(𝑈 , pk)
if (𝑎𝑑, U′) = ⊥ : return ⊥
𝑇𝑎𝑢𝑡ℎ[𝑈 ] ← ad
return Uℎ𝑜𝑛𝑒𝑠𝑡 .𝑎𝑑𝑑(𝑈)
goodAuth(𝑈𝑠, 𝑈𝑟 , 𝑚, md)
if 𝑈𝑠 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 ∨ 𝑈𝑟 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 :
ad ← 𝑇𝑎𝑢𝑡ℎ[𝑈𝑠 ], 𝑚𝑠𝑔 ← (𝑚, ad)
(𝑎𝑑′, 𝑝𝑑, 𝑒) ← ⟨𝑈𝑎𝑢𝑡ℎ(𝑚𝑠𝑔), 𝑃𝑠𝑒𝑛𝑑 (sk, md)⟩(𝑈𝑠, 𝑈𝑟 , pk)
(𝑚, fd) ← ⟨𝑈𝑟𝑒𝑐, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
if (𝑚, fd) = ⊥ :
𝑇𝑎𝑢𝑡ℎ[𝑈𝑠 ] ← ad′
𝑚𝑖𝑑 ←R {0, 1}𝑛
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑] ← (𝑈𝑠, 𝑈𝑟 , 𝑚, fd, 𝑚𝑖𝑑)
return 𝑚𝑖𝑑
goodFwd(𝑈𝑠, 𝑈𝑟 , 𝑚𝑖𝑑, md)
if 𝑈𝑠 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 ∨ 𝑈𝑟 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 ∨ 𝑚𝑖𝑑 ∉ 𝑇𝑟𝑒𝑐 :
(𝑈 ′
if 𝑈 ′
𝑚𝑠𝑔 ← (𝑚, fd)
(fd𝑠, 𝑝𝑑, 𝑒) ← ⟨𝑈𝑓 𝑤𝑑 (𝑚𝑠𝑔), 𝑃𝑠𝑒𝑛𝑑 (sk, md)⟩(𝑈𝑠, 𝑈𝑟 , pk)
(𝑚, fd𝑟) ← ⟨𝑈𝑟𝑒𝑐, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
if fd𝑟 ∨ fd𝑠 = ⊥ :
𝑚𝑖𝑑′ ←R {0, 1}𝑛
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑] ← (𝑈 ′
𝑟 , 𝑚, fd𝑠, 𝑡𝑖𝑑)
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑′] ← (𝑈𝑠, 𝑈𝑟 , 𝑚, fd𝑟 , 𝑡𝑖𝑑)
return 𝑚𝑖𝑑′
𝑟 , 𝑚, fd, 𝑡𝑖𝑑) ← 𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑]
𝑠, 𝑈 ′
𝑟 ≠ 𝑈𝑠 :
return ⊥
return ⊥
𝑠, 𝑈 ′
return ⊥
𝑈𝐶𝑂𝑁 𝐹 A,𝑏,ℓ
𝑆𝑇 ,E
(pk, sk) ← KGen(𝑝𝑎𝑟𝑎𝑚𝑠)
𝑏′ ← AOℓ,𝑏 (pk)
return 𝑏′
malSend(𝑈𝑠, 𝑈𝑟 , md)
if 𝑈𝑠 ∉ U𝑚𝑎𝑙 : return ⊥
(𝑝𝑑, 𝑒) ← ⟨A, 𝑃𝑠𝑒𝑛𝑑 (sk, md)⟩(𝑈𝑠, 𝑈𝑟 , pk)
if 𝑈𝑟 ∈ U𝑚𝑎𝑙 :
return ⊥
return ⟨A, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
(𝑚, fd) ← ⟨𝑈𝑟𝑒𝑐, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
if fd = ⊥ :
𝑚𝑖𝑑 ←R {0, 1}𝑛
S𝑠𝑒𝑒𝑛 .𝑎𝑑𝑑(𝑚𝑖𝑑), S𝑎𝑙𝑙𝑜𝑤𝑒𝑑 .𝑎𝑑𝑑((𝑚𝑖𝑑, 𝑚𝑖𝑑))
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑] ← (𝑈𝑠, 𝑈𝑟 , 𝑚, fd, 𝑚𝑖𝑑)
return 𝑚𝑖𝑑
malRec𝑙𝑖𝑛𝑘𝑎𝑏𝑙𝑒,𝑏(𝑈𝑟 , 𝑚𝑖𝑑0, 𝑚𝑖𝑑1, md)
if 𝑈𝑟 ∉ U𝑚𝑎𝑙 : return ⊥
if 𝑚𝑖𝑑0 ∨ 𝑚𝑖𝑑1 ∉ 𝑇𝑟𝑒𝑐 :
(𝑈 (0)
(𝑈 (1)
if 𝑈 (0)
if 𝑙𝑖𝑛𝑘𝑎𝑏𝑙𝑒 ∧ (𝑡𝑖𝑑0, 𝑡𝑖𝑑1) ∉ S𝑎𝑙𝑙𝑜𝑤𝑒𝑑 ∧ {𝑡𝑖𝑑0, 𝑡𝑖𝑑1} ∩ S𝑠𝑒𝑒𝑛 ≠ ∅ :
, 𝑚0, fd0, 𝑡𝑖𝑑0) ← 𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑0]
, 𝑚1, fd1, 𝑡𝑖𝑑1) ← 𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑1]
𝑟 ∨ 𝑈 (0)
, 𝑈 (0)
, 𝑈 (1)
𝑟 ≠ 𝑈 (1)
∈ U𝑚𝑎𝑙 ∨ 𝑚0 ≠ 𝑚1 :
return ⊥
return ⊥
𝑠
𝑠
𝑟
𝑟
𝑟
return ⊥
S𝑎𝑙𝑙𝑜𝑤𝑒𝑑 .𝑎𝑑𝑑((𝑡𝑖𝑑0, 𝑡𝑖𝑑1)), S𝑠𝑒𝑒𝑛 .𝑎𝑑𝑑(𝑡𝑖𝑑0, 𝑡𝑖𝑑1)
𝑚𝑠𝑔 ← (𝑚𝑏, fd𝑏)
(fd𝑠, 𝑝𝑑, 𝑒) ← ⟨𝑈𝑓 𝑤𝑑 (𝑚𝑠𝑔), 𝑃𝑠𝑒𝑛𝑑 (sk, md)⟩(𝑈 (𝑏)
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑𝑏] ← (𝑈 (𝑏)
return ⟨A, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈 (𝑏)
, 𝑚𝑏, fd𝑠, 𝑡𝑖𝑑𝑏)
, 𝑈𝑟 , 𝑒, pk)
, 𝑈 (𝑏)
𝑠
𝑟
𝑟
𝑟
, 𝑈𝑟 , pk)
Figure 1: User confidentiality game and oracles. The oracle Oℓ,𝑏 gives the adversary access to getUser(·, ·), goodAuth(·, ·, ·, ·),
goodFwd(·, ·, ·, ·), malSend(·, ·, ·), and malRecℓ,𝑏 (·, ·, ·, ·) as well as the send(·, 𝑈 , ·) and receive(·, ·, 𝑈) oracles for the underlying encrypted
messaging scheme for all 𝑈 ∈ U𝑚𝑎𝑙 . ℓ is a fixed variable that determines whether the 𝑈 𝐶𝑂𝑁 𝐹 game requires tree-linkability (ℓ = 1) or
tree-unlinkability (ℓ = 0), and 𝑏 is a hidden variable that determines which version of the game the adversary sees.
adversary who can see the result of receiving and sending messages
to malicious users to create a report that is validated by the platform
but implicates an honest user in sending a message it never sent.
Both games give the adversary a set of oracles which allow it to
send and receive messages between arbitrary users and control the
sending and receiving on a set of users that it controls. The oracle
getUser allows an adversary to add honest and malicious users.
Oracles goodAuth and goodFwd allow sending messages from hon-
est users, and malSend allows malicious users to send messages to
honest users. The adversary is also given access to a reporting ora-
cle ⟨·, 𝑃𝑟𝑒𝑝(sk)⟩(·, pk) and oracles for sending messages between
malicious users in the underlying messaging scheme.
We assume the oracle has an associated M𝑠𝑒𝑛𝑡 set that keeps
track of the messages that have been sent by honest users. As in
the confidentiality games (Section 3.2), we use unique message ids
(𝑚𝑖𝑑) to refer to message transactions between honest users, use a
table 𝑇𝑎𝑢𝑡ℎ to keep track of the authoring data for honest users, and
use a table 𝑇𝑟𝑒𝑐 indexed by 𝑚𝑖𝑑 to keep track of the data associated
with messages received by honest users.
Definition 3.5. We define the advantage of an adversary A in the
𝑠𝑟𝑐𝐵𝐼 𝑁 𝐷 game for a source-tracking scheme 𝑆𝑇 and messaging
scheme E as
src−bind
𝑆𝑇 ,E
Adv
(A) = Pr[𝑠𝑟𝑐𝐵𝐼 𝑁 𝐷A
𝑆𝑇 ,E = 1].
Session 5C: Messaging and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1489goodAuth(𝑚, md, 𝑈𝑠, 𝑈𝑟)
if 𝑈𝑠 ∉ Uℎ𝑜𝑛𝑒𝑠𝑡 :
return ⊥
ad ← 𝑇𝑎𝑢𝑡ℎ[𝑈𝑠 ]
𝑚𝑠𝑔 ← (𝑚, ad)
(𝑎𝑑′, 𝑝𝑑, 𝑒) ← ⟨𝑈𝑎𝑢𝑡ℎ(𝑚𝑠𝑔), 𝑃𝑠𝑒𝑛𝑑 (sk, md)⟩(𝑈𝑠, 𝑈𝑟 , pk)
𝑇𝑎𝑢𝑡ℎ[𝑈𝑠 ] ← ad′, M𝑠𝑒𝑛𝑡 .𝑎𝑑𝑑((𝑈𝑠, md, 𝑚))
if 𝑈𝑟 ∈ U𝑚𝑎𝑙 :
return ⟨A, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
(𝑚, fd) ← ⟨𝑈𝑟𝑒𝑐, 𝑃𝑟𝑒𝑐 (sk, 𝑝𝑑)⟩(𝑈𝑠, 𝑈𝑟 , 𝑒, pk)
𝑚𝑖𝑑 ←R {0, 1}𝑛
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑] ← (𝑈𝑠, 𝑈𝑟 , 𝑚, fd)
return 𝑚𝑖𝑑
goodFwd(𝑚𝑖𝑑, md, 𝑈𝑟)
return ⊥
if 𝑚𝑖𝑑 ∉ 𝑇𝑟𝑒𝑐 :
(𝑈 ′
𝑠, 𝑈𝑠, 𝑚, fd) ← 𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑]
𝑚𝑠𝑔 ← (𝑚, fd)
(fd′, 𝑝𝑑, 𝑒) ← ⟨𝑈𝑓 𝑤𝑑 (𝑚𝑠𝑔), 𝑃𝑠𝑒𝑛𝑑 (sk, md)⟩(𝑈𝑠, 𝑈𝑟 , pk)
𝑇𝑟𝑒𝑐 [𝑚𝑖𝑑] ← (𝑈 ′
if 𝑈𝑟 ∈ U𝑚𝑎𝑙 :
𝑠, 𝑈𝑠, 𝑚, fd′)