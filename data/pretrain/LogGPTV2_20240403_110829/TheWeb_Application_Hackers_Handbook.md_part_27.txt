if (user == null) {
// invalid credentials
session.setMessage(“Login failed. “);
return doLogin(session);
}
}
catch (Exception e) {}
// valid user
session.setMessage(“Login successful. “);
return doMainMenu(session);
}
In the fi eld, you would not expect code like this to pass even the most cursory
security review. However, the same conceptual fl aw is much more likely to exist
in more complex mechanisms in which numerous layered method invocations
cc0066..iinndddd 118855 88//1199//22001111 1122::0066::4400 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 186
186 Chapter 6 n Attacking Authentication
are made, in which many potential errors may arise and be handled in different
places, and where the more complicated validation logic may involve maintain-
ing signifi cant state about the login’s progress.
HACK STEPS
1. Perform a complete, valid login using an account you control. Record
every piece of data submitted to the application, and every response
received, using your intercepting proxy.
2. Repeat the login process numerous times, modifying pieces of the data
submitted in unexpected ways. For example, for each request parameter
or cookie sent by the client, do the following:
a. Submit an empty string as the value.
b. Remove the name/value pair altogether.
c. Submit very long and very short values.
d. Submit strings instead of numbers and vice versa.
e. Submit the same item multiple times, with the same and different
values.
3. For each malformed request submitted, review closely the application’s
response to identify any divergences from the base case.
4. Feed these observations back into framing your test cases. When one
modification causes a change in behavior, try to combine this with other
changes to push the application’s logic to its limits.
TRY IT!
http://mdsec.net/auth/300/
Defects in Multistage Login Mechanisms
Some applications use elaborate login mechanisms involving multiple stages,
such as the following:
n Entry of a username and password
n A challenge for specifi c digits from a PIN or a memorable word
n The submission of a value displayed on a changing physical token
Multistage login mechanisms are designed to provide enhanced security over
the simple model based on username and password. Typically, the fi rst stage
requires the users to identify themselves with a username or similar item, and
subsequent stages perform various authentication checks. Such mechanisms
cc0066..iinndddd 118866 88//1199//22001111 1122::0066::4400 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 187
Chapter 6 n Attacking Authentication 187
frequently contain security vulnerabilities — in particular, various logic fl aws
(see Chapter 11).
COMMON MYTH
It is often assumed that multistage login mechanisms are less prone to secu-
rity bypasses than standard username/password authentication. This belief
is mistaken. Performing several authentication checks may add considerable
security to the mechanism. But counterbalancing this, the process is more
prone to fl aws in implementation. In several cases where a combination of
fl aws is present, it can even result in a solution that is less secure than a nor-
mal login based on username and password.
Some implementations of multistage login mechanisms make potentially
unsafe assumptions at each stage about the user’s interaction with earlier stages:
n An application may assume that a user who accesses stage three must
have cleared stages one and two. Therefore, it may authenticate an attacker
who proceeds directly from stage one to stage three and correctly com-
pletes it, enabling an attacker to log in with only one part of the various
credentials normally required.
n An application may trust some of the data being processed at stage two
because this was validated at stage one. However, an attacker may be able
to manipulate this data at stage two, giving it a different value than was
validated at stage one. For example, at stage one the application might
determine whether the user’s account has expired, is locked out, or is in
the administrative group, or whether it needs to complete further stages
of the login beyond stage two. If an attacker can interfere with these
fl ags as the login transitions between different stages, he may be able to
modify the application’s behavior and cause it to authenticate him with
only partial credentials or otherwise elevate privileges.
n An application may assume that the same user identity is used to complete
each stage; however, it might not explicitly check this. For example, stage
one might involve submitting a valid username and password, and stage
two might involve resubmitting the username (now in a hidden form
fi eld) and a value from a changing physical token. If an attacker submits
valid data pairs at each stage, but for different users, the application might
authenticate the user as either one of the identities used in the two stages.
This would enable an attacker who possesses his own physical token and
discovers another user’s password to log in as that user (or vice versa).
Although the login mechanism cannot be completely compromised with-
out any prior information, its overall security posture is substantially
weakened, and the substantial expense and effort of implementing the
two-factor mechanism do not deliver the benefi ts expected.
cc0066..iinndddd 118877 88//1199//22001111 1122::0066::4400 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 188
188 Chapter 6 n Attacking Authentication
HACK STEPS
1. Perform a complete, valid login using an account you control. Record every
piece of data submitted to the application using your intercepting proxy.
2. Identify each distinct stage of the login and the data that is collected at
each stage. Determine whether any single piece of information is collected
more than once or is ever transmitted back to the client and resubmitted
via a hidden form field, cookie, or preset URL parameter (see Chapter 5).
3. Repeat the login process numerous times with various malformed
requests:
a. Try performing the login steps in a different sequence.
b. Try proceeding directly to any given stage and continuing from there.
c. Try skipping each stage and continuing with the next.
d. Use your imagination to think of other ways to access the different
stages that the developers may not have anticipated.
4. If any data is submitted more than once, try submitting a different value
at different stages, and see whether the login is still successful. It may
be that some of the submissions are superfluous and are not actually
processed by the application. It might be that the data is validated at one
stage and then trusted subsequently. In this instance, try to provide the
credentials of one user at one stage, and then switch at the next to actu-
ally authenticate as a different user. It might be that the same piece of
data is validated at more than one stage, but against different checks. In
this instance, try to provide (for example) the username and password of
one user at the first stage, and the username and PIN of a different user
at the second stage.
5. Pay close attention to any data being transmitted via the client that was
not directly entered by the user. The application may use this data to store
information about the state of the login progress, and the application may
trust it when it is submitted back to the server. For example, if the request
for stage three includes the parameter stage2complete=true, it may
be possible to advance straight to stage three by setting this value. Try to
modify the values being submitted, and determine whether this enables
you to advance or skip stages.
TRY IT!
http://mdsec.net/auth/195/
http://mdsec.net/auth/199/
http://mdsec.net/auth/203/
http://mdsec.net/auth/206/
http://mdsec.net/auth/211/
cc0066..iinndddd 118888 88//1199//22001111 1122::0066::4400 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 189
Chapter 6 n Attacking Authentication 189
Some login mechanisms employ a randomly varying question at one of the stages
of the login process. For example, after submitting a username and password, users
might be asked one of various “secret” questions (regarding their mother’s maiden
name, place of birth, name of fi rst school) or to submit two random letters from a
secret phrase. The rationale for this behavior is that even if an attacker captures
everything that a user enters on a single occasion, this will not enable him to log
in as that user on a different occasion, because different questions will be asked.
In some implementations, this functionality is broken and does not achieve
its objectives:
n The application may present a randomly chosen question and store the
details within a hidden HTML form fi eld or cookie, rather than on the
server. The user subsequently submits both the answer and the question
itself. This effectively allows an attacker to choose which question to
answer, enabling the attacker to repeat a login after capturing a user’s
input on a single occasion.
n The application may present a randomly chosen question on each login
attempt but not remember which question a given user was asked if he
or she fails to submit an answer. If the same user initiates a fresh login
attempt a moment later, a different random question is generated. This
effectively allows an attacker to cycle through questions until he receives
one to which he knows the answer, enabling him to repeat a login having
captured a user’s input on a single occasion.
NOTE The second of these conditions is really quite subtle, and as a result,
many real-world applications are vulnerable. An application that challenges a
user for two random letters of a memorable word may appear at fi rst glance
to be functioning properly and providing enhanced security. However, if the
letters are randomly chosen each time the previous authentication stage is
passed, an attacker who has captured a user’s login on a single occasion can
simply reauthenticate up to this point until the two letters that he knows are
requested, without the risk of account lockout.
HACK STEPS
1. If one of the login stages uses a randomly varying question, verify whether
the details of the question are being submitted together with the answer.
If so, change the question, submit the correct answer associated with that
question, and verify whether the login is still successful.
2. If the application does not enable an attacker to submit an arbitrary
question and answer, perform a partial login several times with a single
account, proceeding each time as far as the varying question. If the ques-
tion changes on each occasion, an attacker can still effectively choose
which question to answer.
cc0066..iinndddd 118899 88//1199//22001111 1122::0066::4411 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 190
190 Chapter 6 n Attacking Authentication
TRY IT!
http://mdsec.net/auth/178/
http://mdsec.net/auth/182/
NOTE In some applications where one component of the login varies ran-
domly, the application collects all of a user’s credentials at a single stage.
For example, the main login page may present a form containing fi elds for
username, password, and one of various secret questions. Each time the
login page is loaded, the secret question changes. In this situation, the ran-
domness of the secret question does nothing to prevent an attacker from
replaying a valid login request having captured a user’s input on one occa-
sion. The login process cannot be modifi ed to do so in its present form,
because an attacker can simply reload the page until he receives the varying
question to which he knows the answer. In a variation on this scenario, the
application may set a persistent cookie to “ensure” that the same varying
question is presented to any given user until that person answers it cor-
rectly. Of course, this measure can be circumvented easily by modifying or
deleting the cookie.
Insecure Storage of Credentials
If an application stores login credentials insecurely, the security of the login
mechanism is undermined, even though there may be no inherent fl aw in the
authentication process itself.
It is common to encounter web applications in which user credentials are
stored insecurely within the database. This may involve passwords being
stored in cleartext. But if passwords are being hashed using a standard algo-
rithm such as MD5 or SHA-1, this still allows an attacker to simply look up
observed hashes against a precomputed database of hash values. Because the
database account used by the application must have full read/write access to
those credentials, many other kinds of vulnerabilities within the application
may be exploitable to enable you to access these credentials, such as command
or SQL injection fl aws (see Chapter 9) and access control weaknesses (see
Chapter 8).
TIP Some online databases of common hashing functions are available here:
http://passcracking.com/index.php
http://authsecu.com/decrypter-dechiffrer-cracker-hash-md5/
script-hash-md5.php
cc0066..iinndddd 119900 88//1199//22001111 1122::0066::4411 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 191
Chapter 6 n Attacking Authentication 191
HACK STEPS
1. Review all of the application’s authentication-related functionality, as well
as any functions relating to user maintenance. If you find any instances in
which a user’s password is transmitted back to the client, this indicates
that passwords are being stored insecurely, either in cleartext or using
reversible encryption.
2. If any kind of arbitrary command or query execution vulnerability is
identified within the application, attempt to find the location within the
application’s database or filesystem where user credentials are stored:
a. Query these to determine whether passwords are being stored in
unencrypted form.
b. If passwords are stored in hashed form, check for nonunique val-
ues, indicating that an account has a common or default password
assigned, and that the hashes are not being salted.
c. If the password is hashed with a standard algorithm in unsalted form,
query online hash databases to determine the corresponding cleartext
password value.
Securing Authentication
Implementing a secure authentication solution involves attempting to simultane-
ously meet several key security objectives, and in many cases trade off against
other objectives such as functionality, usability, and total cost. In some cases
“more” security can actually be counterproductive. For example, forcing users
to set very long passwords and change them frequently often causes users to
write down their passwords.
Because of the enormous variety of possible authentication vulnerabilities,
and the potentially complex defenses that an application may need to deploy to
mitigate against all of them, many application designers and developers choose
to accept certain threats as a given and concentrate on preventing the most seri-
ous attacks. Here are some factors to consider in striking an appropriate balance:
n The criticality of security given the functionality that the application offers
n The degree to which users will tolerate and work with different types of
authentication controls
n The cost of supporting a less user-friendly system
n The fi nancial cost of competing alternatives in relation to the revenue likely
to be generated by the application or the value of the assets it protects
cc0066..iinndddd 119911 88//1199//22001111 1122::0066::4411 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 192
192 Chapter 6 n Attacking Authentication
This section describes the most effective ways to defeat the various attacks
against authentication mechanisms. We’ll leave it to you to decide which kinds
of defenses are most appropriate in each case.
Use Strong Credentials
n Suitable minimum password quality requirements should be enforced.
These may include rules regarding minimum length; the appearance of
alphabetic, numeric, and typographic characters; the appearance of both
uppercase and lowercase characters; the avoidance of dictionary words,
names, and other common passwords; preventing a password from being
set to the username; and preventing a similarity or match with previ-
ously set passwords. As with most security measures, different password
quality requirements may be appropriate for different categories of user.
n Usernames should be unique.
n Any system-generated usernames and passwords should be created
with suffi cient entropy that they cannot feasibly be sequenced or pre-
dicted — even by an attacker who gains access to a large sample of suc-
cessively generated instances.
n Users should be permitted to set suffi ciently strong passwords. For example,
long passwords and a wide range of characters should be allowed.
Handle Credentials Secretively
n All credentials should be created, stored, and transmitted in a manner
that does not lead to unauthorized disclosure.
n All client-server communications should be protected using a well-
established cryptographic technology, such as SSL. Custom solutions
for protecting data in transit are neither necessary nor desirable.
n If it is considered preferable to use HTTP for the unauthenticated areas of
the application, ensure that the login form itself is loaded using HTTPS,
rather than switching to HTTPS at the point of the login submission.
n OnlyPOST requests should be used to transmit credentials to the server.
Credentials should never be placed in URL parameters or cookies (even
ephemeral ones). Credentials should never be transmitted back to the
client, even in parameters to a redirect.
n All server-side application components should store credentials in a man-
ner that does not allow their original values to be easily recovered, even
by an attacker who gains full access to all the relevant data within the
cc0066..iinndddd 119922 88//1199//22001111 1122::0066::4411 PPMM
Stuttard c06.indd V3 - 07/22/2011 Page 193
Chapter 6 n Attacking Authentication 193
application’s database. The usual means of achieving this objective is to
use a strong hash function (such as SHA-256 at the time of this writing),