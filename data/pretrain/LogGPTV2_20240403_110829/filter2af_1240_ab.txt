          USHORT CompressionAlgorithm;
          USHORT Flags;
          ULONG Length;
        }COMPRESSION_TRANSFORM_HEADER, *PCOMPRESSION_TRANSFORM_HEADER;
在srv2.sys中找和compress相关的函数，如下：  
Smb2GetHonorCompressionAlgOrder  
Srv2DecompressMessageAsync  
Srv2DecompressData  
Smb2ValidateCompressionCapabilities  
Smb2SelectCompressionAlgorithm
smb会调用Srv2!Srv2ReceiveHandler函数接收smb数据包，如果SMB Header中的ProtocolId是0xFC, 'S',
'M', 'B'，说明数据是压缩的，则smb会调用Srv2DecompressMessageAsync函数进行解压缩。  
Srv2!Srv2DecompressMessageAsync会调用Srv2!Srv2DecompressData函数，申请buffer，解压缩并copy到buffer  
附上[Lucas Georges](https://www.synacktiv.com/author/lucas-georges.html "lucas-georges")美化后的代码：
> For that, I used three sources of public information:  
>  DevDays Redmond 2019, where they present an overview of "compressed" SMB
> packets:
> > SMB3doc-19H1-DevDays%20Redmond%202019.pdf> ([4])  
>  [MS-SMBv2] the open specification documenting the SMB v2/3 protocol:
>  smb2/5606ad47-5ee0-437a-817e-70c366052962> ([5])  
>  Public patches from Microsoft engineers in the open-source CIFS project,
> e.g.:   
>  \---Lucas Georges
    __int64 __fastcall Srv2DecompressData(__int64 _smb_packet)
    {
      __int64 smb_packet; // rdi
      __int64 _header; // rax
      SMB_V2_COMPRESSION_TRANSFORM_HEADER v3; // xmm0
      AAA smb_header_compress; // xmm0_8
      unsigned int CompressionAlgorithm; // ebp
      __int64 __alloc_buffer; // rax
      __int64 __allocated_buffer; // rbx
      int PayloadSize; // eax
      SMB_V2_COMPRESSION_TRANSFORM_HEADER Header; // [rsp+30h] [rbp-28h]
      int UncompressedSize; // [rsp+60h] [rbp+8h]
      UncompressedSize = 0;
      smb_packet = _smb_packet;
      _header = *(_QWORD *)(_smb_packet + 0xF0);
      // Basic size checks
      if ( *(_DWORD *)(_header + 0x24)  v9 )
                  return 0xC0000242i64;
                ...
                v33 = a1;
                a1 += v21;
                qmemcpy(v33, v23, v21);
    }
//代码来源[blogs.360.cn/post/CVE-2020-0796.html](blogs.360.cn/post/CVE-2020-0796.html
"blogs.360.cn/post/CVE-2020-0796.html")
a1指向SrvNetAllocateBuffer分配的alloc_buffer，
>
> a2的值为OriginalCompressedSegmentSize，v21的值为从smb数据包中解析的解压缩数据的大小，该值可由攻击者控制，若该大小大于OriginalCompressedSegmentSize，则会返回0xC0000242错误，由于之前对长度没有检查，如果我们传入一个很大的OriginalCompressedSegmentSize触发整数溢出，同时v21就可以设置一个极大值，而依然可以通过对decompress
> size的判断，最终调用qmemcpy拷贝一个极大的size导致缓冲区溢出  
>  \---blogs.360.cn
补丁对比：  
美化后代码：
    unsigned int _v_allocation_size = 0;
      if (!NT_SUCCESS(RtlUlongAdd(Header.OriginalCompressedSegmentSize, smb_header_compress.OffsetOrLength, &_v_allocation_size)))
      {
        SEND_SOME_ETW_EVENT_FOR_TELEMETRY_AND_CATCHING_BAD_GUYS(&wpp_guid);
        goto ON_ERROR;
      }
      if (_v_allocation_size > another_smb_size_i_guess)
      {
        SEND_SOME_ETW_EVENT_FOR_TELEMETRY_AND_CATCHING_BAD_GUYS(&wpp_guid);
        goto ON_ERROR;
      }
      __alloc_buffer = SrvNetAllocateBuffer(
        _v_allocation_size,
        0i64
      );
      if ( !__alloc_buffer )
        return 0xC000009A;
      if (!NT_SUCCESS(RtlULongSub(_v_allocation_size, smb_header_compress.OffsetOrLength, &_v_uncompressed_size)))
      {
        SEND_SOME_ETW_EVENT_FOR_TELEMETRY_AND_CATCHING_BAD_GUYS(&wpp_guid);
        goto ON_ERROR;
      }
      if (!NT_SUCCESS(SmbCompressionDecompress(
                  AlgoId,
                  (BYTE *)(*(_QWORD *)(*(_QWORD *)(smb_packet + 240) + 24i64) + (unsigned int)Header.OffsetOrLength
                                                                              + 0x10i64),
                  _v_uncompressed_size,
                  Size.m128i_u32[3] + *(_QWORD *)(v10 + 24),
                  Header.OriginalCompressedSegmentSize,
                  &UncompressedSize)) 
使用RtlULongAdd对OriginalCompressedSegmentSize和Offset（Length）进行检查。  
用RtULongSub在计算偏移量字段的同时计算压缩缓冲区的大小。  
这两个函数是安全的，可在运行时检查整数上溢/下溢出。
# 0x06 结语
继ms17-010，cve-2019-0708后，又一个蠕虫级RCE漏洞，尽快打补丁吧！  
//附件是srv2.sys和符号表文件
# 0x07 参考资料
[blogs.360.cn/post/CVE-2020-0796.html](blogs.360.cn/post/CVE-2020-0796.html
"blogs.360.cn/post/CVE-2020-0796.html")  