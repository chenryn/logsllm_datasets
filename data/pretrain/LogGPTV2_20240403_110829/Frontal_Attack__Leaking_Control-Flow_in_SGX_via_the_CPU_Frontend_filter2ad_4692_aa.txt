title:Frontal Attack: Leaking Control-Flow in SGX via the CPU Frontend
author:Ivan Puddu and
Moritz Schneider and
Miro Haller and
Srdjan Capkun
Frontal Attack: Leaking Control-Flow 
in SGX via the CPU Frontend
Ivan Puddu, Moritz Schneider, Miro Haller, and Srdjan Čapkun, ETH Zurich
https://www.usenix.org/conference/usenixsecurity21/presentation/puddu
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Frontal Attack: Leaking Control-Flow in SGX via the CPU Frontend
Ivan Puddu, Moritz Schneider, Miro Haller, Srdjan ˇCapkun
Department of Computer Science
ETH Zurich
Abstract
We introduce a new timing side-channel attack on Intel CPU
processors. Our Frontal attack exploits timing differences
that arise from how the CPU frontend fetches and processes
instructions while being interrupted. In particular, we observe
that in modern Intel CPUs, some instructions’ execution times
will depend on which operations precede and succeed them,
and on their virtual addresses. Unlike previous attacks that
could only proﬁle branches if they contained different code
or had known branch targets, the Frontal attack allows the
adversary to distinguish between instruction-wise identical
branches. As the attack requires OS capabilities to set the
interrupts, we use it to exploit SGX enclaves. Our attack
further demonstrates that secret-dependent branches should
not be used even alongside defenses to current controlled-
channel attacks. We show that the adversary can use the
Frontal attack to extract a secret from an SGX enclave if that
secret was used as a branching condition for two instruction-
wise identical branches. We successfully tested the attack
on all the available Intel CPUs with SGX (until 10th gen)
and used it to leak information from two commonly used
cryptographic libraries.
1 Introduction
Today’s computing world runs in the cloud. Massive data cen-
ters maintained by cloud providers are the infrastructure upon
which companies and most of the internet are increasingly
relying [1]. For many use cases, renting computing resources
is cost-effective and convenient. Resources can dynamically
scale up when demand is high, while not having to maintain
them. Security-wise, on the other hand, cloud computing is
a much harder sell. Ofﬂoading computation and data to a
third party raises questions about conﬁdentiality and integrity.
Not only can a remote attacker rent the same server and be
co-located with the victim, but the provider itself could be ma-
licious. In such a scenario, hypervisors and operating systems
(OS), which usually provide isolation, can be easily compro-
mised and thus offer little to no assurance in terms of security.
This setting has been a driving force in recent efforts to
develop trusted execution environments (TEEs). While there
are many TEE proposals [2, 3, 4, 5, 6, 7, 8], they are uniﬁed
in their goal: providing an integrity and conﬁdentiality oasis
in an environment ruled by malicious operating systems and
hypervisors. The fundamentals for this oasis are rooted in the
lowest level of the computing stack: the CPU. When applica-
tion security is provided through CPU primitives, the layers
above need not be trusted. Intel SGX [2] is the most widely
deployed among all the TEE proposals, being available in
almost every modern consumer CPU Intel manufactures.
It protects applications by running them in enclaves. SGX
authenticates and encrypts enclaves’ memory accesses that
cross the CPU boundary and blocks any other software in
the system, including OS and hypervisor, from accessing
enclaves’ code and data. Nevertheless, as protected as they
might be, enclaves do not execute in isolation. Enclaves share
resources with other applications running in the same system,
particularly memory and CPU time. By design, SGX leaves
the (untrusted) OS in charge of managing these resources.
However, whenever shared resources are involved, so
are side-channels. Researchers were quick to point out this
shortcoming of SGX [2, 9, 10, 11, 12], casting doubt into
enclaves’ ability to provide conﬁdentiality, one of the core
TEE goals.
Intel acknowledged the problem but shifted
the burden of protecting against side-channels to enclave
developers [13]. Curbing side-channels is not trivial, and
in the case of SGX, it is particularly challenging due to the
role the OS plays. To manage the system resources, the OS is
responsible for the enclave scheduling, memory paging, and
interrupt and exception handling, to name a few. These OS
capabilities, which the attacker controls, decrease the noise of
traditional side-channel attacks [9, 14] and enable new types
of side-channels, called controlled-channel attacks [12].
The ﬁrst controlled-channel attacks allowed the adversary
to observe enclave accesses at page granularity (4 KiB) with-
out any noise by merely abusing memory paging. Revoking
permissions to the enclave’s pages leads to page-faults, which
in turn give the OS attacker a trace of every page the enclave
USENIX Association
30th USENIX Security Symposium    663
static int mpi_montmul ( ... ) {
...
if( mbedtls_mpi_cmp_abs ( A , N ) >= 0 )
mpi_sub_hlp ( n , N ->p , A ->p );
else
/* prevent timing attacks */
mpi_sub_hlp ( n , A ->p , T ->p );
return( 0 );
}
Listing 1: Protection against timing attacks in the latest ver-
sion (v2.16.6 at the time of writing) of MbedTLS. The library
balances branches by having symmetric execution paths.
accesses.
Initial defenses that worked on the assumption
that the attacker would need to trigger page-faults [15], just
prompted the emergence of stealthier attacks that observe
page metadata set by the CPU [16, 17].
In response to
these attacks, Intel ofﬁcially recommends SGX developers
place sensitive data and code within a page [18]. Controlled
channels, however, do not stop at the page boundary. OS
capabilities can be used to enhance cache attacks [9, 10, 11]
and extract enough information from the branch prediction
unit (BPU) to give the attacker a branch granularity view of
the victim [14, 19, 20]. As this undermines defenses against
paging-based controlled channels, further defenses leveraged
the coarse timing resolution of the attacker and the inability of
BPU attacks to leak the target of unconditional branches [14].
Nemesis [21] later showed that it is possible to time each
instruction through interrupts, invalidating the assumptions
on the best temporal resolution available to the attacker.
Therefore, successive defenses [22] relied upon randomizing
control-ﬂow through unconditional jumps to protect enclaves.
The current understanding of the attacker’s capabilities
leaves the impression that as long as branches do not have
observable timing differences, do not leave a different cache
trace, and BPU attacks are prevented, controlled channels can
be contained. As shown in the snippet of code in Listing 1,
even widely used crypto libraries tend to use balanced
branches1 to “prevent timing attacks.” This might seem
reasonable; after all, the branches in Listing 1 would neither
be observable with page attacks, since the same function
is called on both paths, nor with Nemesis as both paths
have the same instructions. We question this last line of
defense by increasing the attacker’s resolution further and
demonstrating that virtually any binary with control-ﬂow
secret dependencies leaks information in SGX.
Frontal attack: For the ﬁrst time, we show that when
interrupts are frequently issued, instructions’ execution time
is correlated to their virtual address and that the fetch and
pre-decode module of the CPU frontend plays a role in this
correlation. Based on this observation, we construct a new
attack against Intel SGX that we call the Frontal attack. Our
1branches that contain the very same instructions on both execution paths
attack allows an attacker to associate a measured instruction’s
execution time with its offset in the instruction fetch window
and thus with the instruction’s virtual address. The attacker
can then use these leaked execution times and addresses to
infer control-ﬂow and, therefore, branch-dependent secrets.
We focus on extracting branch-dependent secrets, showing
that an adversary can distinguish between two code sequences
executed within SGX and hence, derive the secret branch con-
dition that led to their execution. Unlike previous attacks [21,
23], which could only distinguish between sequences of dif-
ferent instructions, the Frontal attack allows the adversary
to distinguish between two execution sequences even if they
contain identical instructions (and even identical data). These
differences are observable even when the two snippets of code
reside in the same cache line and are thus not susceptible to
cache side-channel attacks. We show that by using the Frontal
attack, the adversary can extract the correct secret from the en-
clave with probability up to 99% on our test binaries. We dis-
cuss how two different libraries, the mbedTLS library [24] and
the Intel IPP [25] Cryptography library, can be exploited us-
ing our attack. Showing that, with just a few runs, the attacker
can recover the condition of the executed victim branches
with high conﬁdence (> 99.9%), and that with a single trace
it is possible to recover a full RSA key within seconds on
65% of the runs (out of 1000). We validated our attack on
all available Intel microarchitectures since the introduction of
Intel SGX (up to Comet Lake at the time of writing).We show
that the attack works with high probability on all tested CPUs
irrespective of their microcode version. We further discuss
which system conﬁgurations are better than others for the
attacker. For instance, unlike in most other microarchitectural
attacks, disabling hyperthreading helps the attacker.
Defenses: Given the resolution achieved with our attack,
a more realistic SGX adversary model should be one that
considers the instruction pointer to be available to the
attacker at any time. Conﬁdentiality in SGX can only be
guaranteed in this model if secret-dependent branching is
avoided altogether, for instance, by if-conversion [26] or
by writing code following data-oblivious practices [27].
These defenses are effective against any side-channel attack
- including ours. However, practically deploying them is
not straightforward for two reasons. First, general compiler
transformations incur high-performance overheads or require
developer assistance to mark secrets [26]. Second, custom
data oblivious solutions are not trivial to develop correctly
and require domain-speciﬁc knowledge [27].
These practical hurdles for data-oblivious code have led
to several spot defenses being continuously reﬁned based on
the adversary’s capabilities. We give further evidence in this
paper that these are bound to be broken whenever previous
assumptions about the attacker are challenged.
In summary, we make the following contributions:
• We investigate how frequent interrupts affect instruction
execution times. In particular, we show a dependency
664    30th USENIX Security Symposium
USENIX Association
between the observed execution times and their
alignments within the CPU fetch window.
• We introduce the Frontal attack.
It leverages the
dependency between execution time and virtual address
to attack Intel SGX enclaves. The Frontal attack leaks
ﬁne-grained control-ﬂow in branches containing the
same instructions, and that only span a single cacheline.
It can do so with more than 99% accuracy in our
synthetic binaries.
• We exploit two commonly used cryptographic libraries
using the Frontal attack: the Intel IPP Cryptography
library, and the mbedTLS library. We further test which
CPUs are vulnerable to our attack and found that all
available CPUs with SGX at the time of writing (up
to 10th gen) are vulnerable. Newer CPUs that include
hardware mitigations against Spectre [28] seem to be
more vulnerable than older CPUs. We responsibly
disclosed the ﬁndings to the affected vendors.
2 Background
SGX-Step & Nemesis SGX-Step [29] is an open-source
framework that allows single-stepping through the execution
of SGX enclaves. SGX-Step uses APIC timers to interrupt
the enclave after every instruction and inserts custom routines
in between the interrupt handler and the enclave resumption.
It does not rely on any adversarial capability not given in the
standard Intel SGX attacker model as interrupt handlers and
APIC timers are controlled by the OS, which is assumed to
be under the control of the adversary.
When an enclave receives an interrupt, it performs an
Asynchronous Enclave Exit (AEX) and then jumps to the
interrupt-vector entry deﬁned in the interrupt descriptor table
(IDT) to handle the interrupt. After the interrupt has been
handled, it jumps to the address set in the asynchronous
enclave pointer (AEP). The function in the AEP eventually
executes the ERESUME instruction to resume the enclave [2].
SGX-Step installs a custom interrupt handler in user-space
to gain control as soon as possible after the interrupt. It also
replaces the AEP to execute custom instructions right before
ERESUME. SGX-Step uses these modiﬁed routines to store
the current cycle count just before entering the enclave and
right after an AEX. To interrupt the enclave at the right time,
it conﬁgures a cycle-accurate APIC timer. This timer can be
conﬁgured so that the execution is interrupted after a single
instruction is executed inside the enclave. These changes
allow an adversary to single-step an enclave and measure
the execution time of individual instructions (including a
constant offset by the ERESUME and AEX).
The Nemesis [21] attack exploits the fact that the interrupt
timings obtained through SGX-Step are correlated with the
instruction type currently pending in the CPU. Since current
processors execute some instructions faster than others, the ad-
versary can make an educated guess about the type of instruc-
tion that was executed in a single step. Based on a trace of
these timings and knowledge of the binary executing in the en-
clave, the attacker can detect where the instruction pointer (IP)
was in the enclave when the interrupt was received. Because
Nemesis can only infer the instruction type, it cannot resolve
the IP whenever a balanced branch is executed in the enclave.
CPU Background: The Frontend Although the x86
instruction set architecture (ISA) is well speciﬁed [30], the
microarchitecture is typically proprietary, and its details are
conﬁdential. Generally, the processor core can be split into
three main parts: the frontend, the backend, and the memory
subsystem. Here, we will focus on the frontend of the
processor. For further information into the other components,
we refer to [31].
The frontend of a processor is responsible for fetching
and decoding instructions into a format that the backend
understands. Modern Intel processors need to fetch a large
number of macro-ops to feed the extremely performant
out-of-order backend. A modern Intel core fetches 16 bytes
at once [31], from 16 bytes aligned blocks, also called the
instruction fetch window. In x86, there is an extra step during
decoding where the fetched x86 instructions (macro-ops)
get translated to a different internal instruction format called
micro-operations (micro-ops).
3 Overview of the Frontal attack
Attacker model We consider an attacker that wants to leak
secret data from a victim SGX enclave running on a system
under their control. The victim enclave has a control-ﬂow
dependency related to the secret data the attacker wants
to leak. The adversary operates under the standard SGX
attacker model [2]. That is, they control the entire software
stack, including the operating system (OS), on the machine
in which the enclave executes. Since the attacker controls
the OS, we assume they can disable any CPU core to reduce
noise or prevent the scheduler from running tasks on a
particular core. However, the CPU package is not physically
compromised. We assume that the secret that the enclave
holds was remotely loaded after a successful attestation.
Otherwise, if the secret would be contained in the enclave
code, it would be trivially available to the OS.
Attack overview We introduce our attack through an
example code snippet that we show in Figure 1a (C code), and
Figure 1b (x86 assembly). The code ﬁts in a single cacheline
and has a branch whose target depends on a secret value. On
both branches, the code contains the very same instructions
and writes to the same memory addresses. Thus, we expect
USENIX Association
30th USENIX Security Symposium    665
if ( secret == ’a ’) {
var1 = 1 + var1 ;
var2 = 1 + var2 ;
} else {
var1 = 2 + var1 ;
var2 = 2 + var2 ;
}
return;
(a) Secret-dependent branch
H
)
s
e
t
y
B
6
1
(
w
o
d
n
i
W
h
c
t