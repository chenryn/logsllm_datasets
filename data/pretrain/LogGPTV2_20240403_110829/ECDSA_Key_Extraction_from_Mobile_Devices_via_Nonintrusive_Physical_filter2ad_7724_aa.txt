# ECDSA Key Extraction from Mobile Devices via Non-Intrusive Physical Side Channels

## Authors
- Daniel Genkin
- Lev Pachmanov
- Itamar Pipman
- Eran Tromer
- Yuval Yarom

### Affiliations
- **Daniel Genkin, Lev Pachmanov, Itamar Pipman, Eran Tromer**: Technion and Tel Aviv University
- **Yuval Yarom**: The University of Adelaide and Data61, CSIRO

**Contact**: [PI:EMAIL] (for all authors)

**Date**: August 18, 2016
(Initial public disclosure: March 1, 2016)

## Abstract
We demonstrate that elliptic-curve cryptography (ECC) implementations on mobile devices are vulnerable to electromagnetic and power side-channel attacks. Specifically, we show full extraction of ECDSA secret signing keys from OpenSSL and CoreBitcoin running on iOS devices, and partial key leakage from OpenSSL on Android and iOS's CommonCrypto. These non-invasive attacks use a simple magnetic probe placed near the device or a power probe on the phone’s USB cable, requiring only a few hundred kHz bandwidth and can be performed using an audio card and an improvised magnetic probe.

## 1. Introduction

### 1.1 Overview
Side-channel analysis, which exploits unintentional information leakage from physical computation devices, has been used to break numerous cryptographic implementations (see [MOP07, And08, KJJR11] and references therein). While traditional research has focused on small embedded devices like smartcards, RFID tags, FPGAs, and microcontrollers, recent studies have also examined the vulnerability of complex PC-class computers (laptops, desktops, and servers) to physical key-extraction attacks [ZP14, GST14, GPT14, GPPT15, GPPT16].

In this paper, we investigate the vulnerability of another class of complex devices: mobile devices (smartphones and tablets). Recent results support this prospect. Invasive access to the device allows for high-fidelity electromagnetic and power measurements, which have been used in key extraction attacks on naive RSA implementations [NSN+14, GS15]. A non-invasive attack was demonstrated by Kenworthy and Rohatgi [KR12, CRI12] on BouncyCastle’s RSA implementation running on a smartphone. However, these attacks required expensive lab-grade equipment such as oscilloscopes.

This paper focuses on the Elliptic Curve Digital Signature Algorithm (ECDSA), a popular signature scheme critical in mobile payment apps like Bitcoin wallets and Apple Pay. Attacking ECDSA presents new challenges:
- ECDSA signatures are computed faster than RSA, providing less physical information at a given sampling rate.
- ECDSA signatures are randomized, making it difficult to aggregate traces to improve signal-to-noise ratio and handle transient events like interrupts.

We address the following questions:
1. How vulnerable are ECDSA implementations on mobile phones to physical side-channel attacks?
2. Are these vulnerabilities common across different implementations and phone models?
3. What physical channels can be used for the attacks?
4. What is the cost and complexity of such attacks? Can they be conducted with concealed, portable equipment, or do they require high-grade lab equipment?

A concurrent and independent work by Belgarric et al. [BFMRT16a] provides valuable insights, demonstrating full key extraction from BouncyCastle’s ECDSA implementation on a phone. Their attack used an invasive electromagnetic probe inside the open case of the phone, relying on triggering via the USB interface and an expensive oscilloscope. This leaves many questions unexplored.

### 1.2 Our Results
In this paper, we demonstrate the first side-channel attack on ECC running on a smartphone, achieving the following properties:
1. **Real-World Implementations**: We attacked the ECDSA implementation of OpenSSL on iOS and Android devices, including the CoreBitcoin library (used by popular Bitcoin wallets on iOS) and iOS’s CommonCrypto library.
2. **Non-Invasive**: The attacks are non-invasive, using a magnetic probe near the device or a power tap on its USB charging cable. No opening of the device’s case or specific triggering software is required.
3. **Cheap EM and Power Analysis**: Our attack utilizes physical emanations (electromagnetic or power) below 200 kHz, well below the GHz-scale processor clock speed. This allows us to acquire secret-key information using cheap, compact, and readily available equipment like sound cards and improvised probes.

In some cases, such as CoreBitcoin on iPhone devices, we achieved full key extraction. For other combinations, we found clear leakage of key material, suggesting the feasibility of full key extraction (see Table 1).

We achieve these results using new techniques to enhance the measured side-channel signal in the presence of noise from the device’s internal components. Unlike typical averaging techniques, our methods enhance the signal present in a single trace without relying on additional information from other traces.

### 1.3 Targeted Software and Hardware
**Hardware**: We target mobile devices such as tablets and phones, measuring various models and manufacturers. Many devices exhibit key-dependent leakage. All devices were in their default configuration with WiFi on and connected, Bluetooth off, and no SIM card installed. Experiments were primarily conducted on an Apple iPhone 3GS, which provided a particularly clear signal.

**Software**: We target popular ECDSA implementations running on various mobile devices:
1. **OpenSSL (version 1.0.1m)**: A ubiquitous cryptographic library running on iOS and Android devices, using wNAF with \( w = 3 \) for scalar multiplication.
2. **Apple’s CommonCrypto library**: Built into iOS versions 7.1.2 through 8.3, using wNAF with \( w = 1 \).
3. **CoreBitcoin**: A popular cryptographic library for iOS used by many Bitcoin clients, implementing deterministic ECDSA (following RFC6979 [Por13]) using OpenSSL for scalar multiplication.

**Attack Scenario**: Our attacks require side-channel measurements while the victim performs multiple ECDSA signing operations. This is common in scenarios where the key is fixed by a public key infrastructure or a PGP “web of trust,” and necessary for Bitcoin micropayment channels, which require frequent and automated signatures under the same key.

**Disclosure and Status**: Practicing responsible disclosure, we have worked with the vendors of all targeted software to convey our findings and coordinate responses prior to public disclosure. See Appendix A for the current status of targeted software, including newer versions.

### 1.4 Related Work
**Physical Attacks on ECC on Small Devices**: Extensive side-channel attacks have been demonstrated on cryptographic implementations in small devices using various channels, particularly electromagnetic emanations [AARR02, GMO01, QS01]. Physical key-extraction attacks have been shown on many ECC implementations, starting with Coron [Cor99]; see surveys [FGM+10, FV12] and references therein. However, these techniques often utilize subtle physical effects visible at high bandwidths, attack naive implementations, or use chosen ciphertexts.

**Key-Extraction Side-Channel Attacks on Phones**: High-bandwidth electromagnetic attacks on symmetric ciphers were demonstrated by Aboulkassimi et al. [AAF+11] on Java-based feature-phones. Clock-rate frequency attacks on public key cryptography were demonstrated by Goller and Sigl [GS15] on Android smartphones, often with the phone’s shielding plate removed. Lower-frequency attacks on smartphones executing naive RSA and ECC implementations were demonstrated by [NSN+14] with the battery cover opened and battery removed. A non-invasive low-frequency attack was demonstrated by Kenworthy and Rohatgi [KR12] against naive RSA, later extended to RSA windowed exponentiation [CRI12]. Finally, Kenworthy and Rohatgi [KR12] presented an attack on a naive double-and-sometimes-add ECC, known to have side-channel weaknesses.

In a concurrent and independent work, Belgarric et al. [BFMRT16a] presented an invasive low-frequency attack on the ECDSA implementation of Android’s BouncyCastle library, using a magnetic probe inside the opened phone. The attack used a 50 kHz bandwidth, triggered via a self-written software sending a trigger signal via the phone’s USB port. Signal acquisition and analysis were done manually by observing double and add operations in hundreds of traces.

**Software Side-Channel Attacks**: Cache contentions have been used to demonstrate partial AES key extraction on ARM devices [LGSM15], requiring attacker code to run on the device.

---

This optimized version aims to make the text more coherent, professional, and easier to read.