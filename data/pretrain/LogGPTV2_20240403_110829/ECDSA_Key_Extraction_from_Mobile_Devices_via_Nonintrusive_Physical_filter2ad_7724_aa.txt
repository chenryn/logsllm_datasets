title:ECDSA Key Extraction from Mobile Devices via Nonintrusive Physical
Side Channels
author:Daniel Genkin and
Lev Pachmanov and
Itamar Pipman and
Eran Tromer and
Yuval Yarom
ECDSA Key Extraction from Mobile Devices
via Nonintrusive Physical Side Channels ∗
Daniel Genkin
Lev Pachmanov
Itamar Pipman
Technion and Tel Aviv University
PI:EMAIL
Tel Aviv University
PI:EMAIL
Tel Aviv University
PI:EMAIL
Eran Tromer
Tel Aviv University
PI:EMAIL
Yuval Yarom
The University of Adelaide and Data61, CSIRO
PI:EMAIL
August 18, 2016
(Initial public disclosure: March 1, 2016)
Abstract
We show that elliptic-curve cryptography implementations on mobile devices are vulnerable
to electromagnetic and power side-channel attacks. We demonstrate full extraction of ECDSA
secret signing keys from OpenSSL and CoreBitcoin running on iOS devices, and partial key
leakage from OpenSSL running on Android and from iOS’s CommonCrypto. These non-intrusive
attacks use a simple magnetic probe placed in proximity to the device, or a power probe on the
phone’s USB cable. They use a bandwidth of merely a few hundred kHz, and can be performed
cheaply using an audio card and an improvised magnetic probe.
1 Introduction
1.1 Overview
Side channel analysis, exploiting unintentional and abstraction-defying information leakage from
physical computation devices, has been used to break numerous cryptographic implementations
(see [MOP07, And08, KJJR11] and the references therein). While traditional side channel research
has mainly focused on small embedded devices such as smartcards, RFID tags, FPGAs and mi-
crocontrollers, recent works also study the vulnerability of complex PC-class computers (laptop,
desktop and server) to physical key-extraction attacks [ZP14, GST14, GPT14, GPPT15, GPPT16].
In this paper we study vulnerability to side-channel key extraction in another class of complex
devices: mobile devices (smartphones and tablet computers). This prospect is already supported by
some recent results. Using invasive access to the device, it is possible to acquire electromagnetic and
power measurements with very high ﬁdelity in terms of bandwidth, noise and spatial locality. Such
invasive access has been used for key extraction attacks on intentionally-naive RSA implementa-
tions [NSN+14, GS15]. A non-invasive attack was shown by Kenworthy and Rohatgi [KR12, CRI12]
on BouncyCastle’s RSA implementation running on a smartphone. All of these attacks used ex-
pensive lab-grade equipment, such as oscilloscopes, for their measurements.
∗
The authors thank Noam Nissan for programming and lab support during the course of this research.
1
This paper focuses, instead, on the Elliptic Curve Digital Signature Algorithm (ECDSA) [NIS13],
a very popular signature scheme that is especially pertinent and critical in mobile devices due to
its use in mobile payment apps such as Bitcoin wallets and Apple Pay. Attacking ECDSA raises
new challenges:
• ECDSA signatures are computed faster than RSA, and thus the attacker gets less physical in-
formation at a given sampling rate. Increasing the sampling rate increases costs and runs into
frequency-limited physical eﬀects.
• More fundamentally, ECDSA signatures are randomized. When attacking deterministic opera-
tions, such as RSA decryption, attackers can rely on triggering numerous identical decryptions
and then aggregating their recorded traces in order to improve signal-to-noise ratio and cope
with transient events such as interrupts. But with ECDSA, one has to make deductions from
individual traces that are noisy and frequently interrupted.
We raise the following questions:
1. How vulnerable are implementations of ECDSA, running on mobile phones, to physical side
channel attacks?
2. Are these vulnerabilities common across diﬀerent implementations and across diﬀerent phone
models?
3. What physical channels can be used for the attacks?
4. How expensive are such attacks, both in terms of complexity and in terms of ﬁnancial outlay?
Can they be conducted with concealed, portable equipment? Do they require high-grade lab
equipment or can they be implemented using cheap, over-the-shelf equipment?
A concurrent and independent work of Belgarric et al. [BFMRT16a] provides a valuable insight
on some of these questions, demonstrating full key extraction from BouncyCastle’s ECDSA im-
plementation on a phone. That attack used an electromagnetic probe placed invasively inside the
open case of a phone. It relied on triggering measurement via the USB interface, and (even though
essentially relying on low-frequency signals) used an expensive oscilloscope. This leaves unexplored
much of the space posed by the aforementioned questions.
1.2 Our Results
In this paper we demonstrate the ﬁrst side channel attack on Elliptic Curve Cryptography (ECC)
running on a smartphone which simultaneously achieves the following properties:
1. Real-World Implementations. We attacked the ECDSA implementation of OpenSSL run-
ning on iOS devices (iPhone and iPad) as well as Android devices. In particular, we attacked
the CoreBitcoin library, based on OpenSSL, which is used by popular Bitcoin wallets on iOS
devices. We also attacked the built-in ECDSA implementation of iOS’s CommonCrypto library.
2. Non-Invasive. The demonstrated attacks are non invasive and can be conducted by merely
placing a magnetic probe in the proximity of the device, or using a power tap on its USB charging
cable. The attack does not require opening the device’s case and does not utilize any software
or hardware in order to trigger the measuring equipment. See Figures 1 and 9.1
3. Cheap EM and Power Analysis. Our attack utilizes physical emanations (electromagnetic
or power) at frequencies below 200 kHz, which is well below the GHz-scale processor clock speed.
Consequentially, our attack can acquire secret-key information using cheap, compact and readily
available equipment, such as sound cards and improvised probes.
1While we do not require any speciﬁc triggering software, the attack does require the target to repeatedly perform
ECDSA signing operations. Several such scenarios exist, see Section 1.3.
2
(a) Top view. The target (top right) is measured by the impro-
vised probe (taped to the underside of a glass table). The signal
is captured by a Tracker Pre sound card connected to a laptop
(under the table).
(b) Improvised probe (view from under the
glass table).
Figure 1: Mounting a cheap EM attack on an iPhone 4 using an improvised EM probe.
Library
OpenSSL
OpenSSL
Version
1.0.x
1.1.x
1.0.x
1.1.x
7.1.2–8.3
Common-
Crypto
CoreBitcoin Commit
81762ae3
Platform Result
Android
iOS
iOS
iOS
Scalar dependent
leakage (Section 3.3).
Key extraction
(Section 3.2).
Scalar dependent
leakage (Section 3.3).
Key extraction
(Section 3.3).
Table 1: Summary of our attack results.
In some cases (e.g., CoreBitcoin on iPhone devices), we demonstrated full key extraction.
It
was impractical to do so for all combinations of target software, target hardware and acquisition
hardware, but for numerous such combinations we found clear leakage of key material suggesting
feasibility of full key extraction, as discussed in Sections 3 and 4. See Table 1 for a summary of
our results.
We achieve the above using new techniques for enhancing the measured side-channel signal
in the presence of noise generated by the device’s internal components. While typical techniques
for overcoming measurement noise involve averaging the signal obtained from several secret-key
operations, this is not applicable to ECDSA since the nonce is generated afresh for every signature.
Instead, we present techniques which are capable of enhancing the signal present in a single trace,
without relying on additional information from other traces.
3
1.3 Targeted Software and Hardware
Hardware. We target mobile devices such as tablets and phones. We have measured numerous
devices of various models and manufactures. Many devices exhibit key-dependent leakage (see
Figure 3). All the devices were in their default conﬁguration and we did not disable any background
services and notiﬁcations. WiFi was on and connected and bluetooth was oﬀ. All phones were
without a simcard installed.2 In the sequel, unless stated otherwise, the experiments were performed
on Apple iPhone 3GS which exhibited a particularly clear signal.
Software.
devices. More speciﬁcally, we target the following implementations:
In this work, we target popular ECDSA implementations running on various mobile
1. The ECDSA implementation of OpenSSL (version 1.0.1m), a ubiquitous cryptographic library,
running on iOS and Android devices.3 The underlying Elliptic Curve (EC) scalar multiplication
algorithm is wNAF with w = 3.
2. The built-in ECDSA implementation of Apple’s CommonCrypto library, which is a part of
iOS. We targeted iOS versions 7.1.2 through 8.3, whose underlying EC multiplication algorithm
is wNAF with w = 1.
3. CoreBitcoin [Cor], a popular cryptographic library for iOS used by many Bitcoin clients
(including ArcBit [Arc], BitStore [Bitb], BitWallet [Bitc], Mycelium [Myc] and Yellet [Yel]).
CoreBitcoin implements deterministic ECDSA(following RFC6979 [Por13]), using OpenSSL for
the underlying EC multiplication.
Attack Scenario. Our attacks require side-channel measurements while the victim performs
multiple ECDSA signing operations. Signing multiple messages under the same key is common
when the key is ﬁxed by a public key infrastructure or a PGP “web of trust”. It is also necessary
for Bitcoin micropayment channels [Mic, Smi15], which allow making lightweight out-of-blockchain
automated payments for an ongoing service. Since each such micropayment requires an ECDSA
signature this will cause frequent and automated signatures under the same key.
Disclosure and Status. Practicing responsible disclosure, we have worked with the vendors of
all targeted software to convey our ﬁndings and coordinate response, prior to public disclosure. See
Appendix A for the current status of targeted software, including newer versions.
1.4 Related Work
Physical Attacks on ECC on Small Devices. For small devices (smartcards, RFID tags, FP-
GAs and microcontrollers), side-channel attacks have been extensively demonstrated on numerous
cryptographic implementations, using various channels, and in particular electromagnetic emana-
tions starting with [AARR02, GMO01, QS01]. See [And08, KJJR11, MOP07] and the references
therein. In particular, physical key-extraction attacks were shown on many ECC implementations
on small devices, starting with Coron [Cor99]; see the surveys [FGM+10, FV12] and the refer-
ences therein. However these techniques either utilize subtle physical eﬀects which are only visible
at bandwidths comparable to the device’s clock rate, attack naive implementations (such as the
double-and-sometimes-add algorithm), or utilize a chosen ciphertext in order to deduce additional
information about the algorithm’s secret internal state.
2The phones are SIM-locked to a foreign carrier and we do not have the appropriate sim cards.
3We used OpenSSL compiled with its default options. In particular, the “enable-ec nistp 64 gcc 128” option,
which enables a constant-time implementation for some curves [K¨as12], is disabled by default and works only on
64-bit x86 (32-bit processors are unsupported, and the built-in tests fail on 64-bit ARM).
4
Unfortunately, all of the above approaches have signiﬁcant drawbacks in the case of a non-
naive implementation of ECDSA running on a high-speed smartphone. Non-invasively recording
clock-rate signals from a smartphone running a multi GHz-scale CPU is diﬃcult, often requiring
expensive, cumbersome, and delicate lab equipment. Chosen-input attacks are usually inapplicable
to signature schemes, since the inputs are processed through a cryptographic hash function.
Key-Extraction Side-Channel Attacks on Phones.
High bandwidth electromagnetic at-
tacks (sampling at clock-rate speeds) on symmetric ciphers were demonstrated by Aboulkassimi
et al. [AAF+11] on Java-based feature-phones. Attacks at clock-rate frequencies on public key
cryptography were also recently demonstrated by Goller and Sigl [GS15] on Android smartphones
running a naive square-and-sometimes-multiply RSA, with the phone’s shielding plate often re-
moved. Lower-frequency attacks on smartphones executing naive implementations of square-
and-sometimes-multiply RSA as well as double-and-sometimes-add ECC were also demonstrated
by [NSN+14] with the phone battery cover opened, battery removed and the probe positioned
directly over the leaky component. A non-invasive low-frequency attack was demonstrated by Ken-
worthy and Rohatgi [KR12] against naive square-and-sometimes-multiply RSA. These attacks were
also later extended to RSA windowed exponentiation as used in BouncyCastle [CRI12]. Finally,
measuring at clock-rate frequencies, the work of Kenworthy and Rohatgi [KR12] also presented
an attack on a naive and self-written double-and-sometimes-add ECC, which is known to have
side-channel weakness.
In a concurrent and independent work, Belgarric et al. [BFMRT16a] presented an invasive low-
frequency attack on the ECDSA implementation of Android’s BouncyCastle library, running on
a smartphone, using a magnetic probe placed inside the (opened) phone. It used a bandwidth of
50 kHz, measured by an oscilloscope. The oscilloscope was triggered, via a self-written triggering
software installed on the phone. The software sends a trigger signal via phone’s USB port (connected
to oscilloscope’s triggering port) and then immediately invokes the BouncyCastle signing function.
The acquisition and analysis of the signal were done by manual observation of the double and
add operations in the (hundreds of) traces.
Software side-channel attacks, utilizing cache contentions, were demonstrated on ARM devices,
showing partial extraction of an AES key [LGSM15]. These require attacker’s code to run on the
device.