        const REQUEST_COMPLETE     = 0;
        const CANT_MPX_CONN        = 1;
        const OVERLOADED           = 2;
        const UNKNOWN_ROLE         = 3;
        const MAX_CONNS            = 'MAX_CONNS';
        const MAX_REQS             = 'MAX_REQS';
        const MPXS_CONNS           = 'MPXS_CONNS';
        const HEADER_LEN           = 8;
        /**
         * Socket
         * @var Resource
         */
        private $_sock = null;
        /**
         * Host
         * @var String
         */
        private $_host = null;
        /**
         * Port
         * @var Integer
         */
        private $_port = null;
        /**
         * Keep Alive
         * @var Boolean
         */
        private $_keepAlive = false;
        /**
         * Constructor
         *
         * @param String $host Host of the FastCGI application
         * @param Integer $port Port of the FastCGI application
         */
        public function __construct($host, $port = 9001) // and default value for port, just for unixdomain socket
        {
            $this->_host = $host;
            $this->_port = $port;
        }
        /**
         * Define whether or not the FastCGI application should keep the connection
         * alive at the end of a request
         *
         * @param Boolean $b true if the connection should stay alive, false otherwise
         */
        public function setKeepAlive($b)
        {
            $this->_keepAlive = (boolean)$b;
            if (!$this->_keepAlive && $this->_sock) {
                fclose($this->_sock);
            }
        }
        /**
         * Get the keep alive status
         *
         * @return Boolean true if the connection should stay alive, false otherwise
         */
        public function getKeepAlive()
        {
            return $this->_keepAlive;
        }
        /**
         * Create a connection to the FastCGI application
         */
        private function connect()
        {
            if (!$this->_sock) {
                //$this->_sock = fsockopen($this->_host, $this->_port, $errno, $errstr, 5);
                $this->_sock = stream_socket_client($this->_host, $errno, $errstr, 5);
                if (!$this->_sock) {
                    throw new Exception('Unable to connect to FastCGI application');
                }
            }
        }
        /**
         * Build a FastCGI packet
         *
         * @param Integer $type Type of the packet
         * @param String $content Content of the packet
         * @param Integer $requestId RequestId
         */
        private function buildPacket($type, $content, $requestId = 1)
        {
            $clen = strlen($content);
            return chr(self::VERSION_1)         /* version */
                . chr($type)                    /* type */
                . chr(($requestId >> 8) & 0xFF) /* requestIdB1 */
                . chr($requestId & 0xFF)        /* requestIdB0 */
                . chr(($clen >> 8 ) & 0xFF)     /* contentLengthB1 */
                . chr($clen & 0xFF)             /* contentLengthB0 */
                . chr(0)                        /* paddingLength */
                . chr(0)                        /* reserved */
                . $content;                     /* content */
        }
        /**
         * Build an FastCGI Name value pair
         *
         * @param String $name Name
         * @param String $value Value
         * @return String FastCGI Name value pair
         */
        private function buildNvpair($name, $value)
        {
            $nlen = strlen($name);
            $vlen = strlen($value);
            if ($nlen > 24) | 0x80) . chr(($nlen >> 16) & 0xFF) . chr(($nlen >> 8) & 0xFF) . chr($nlen & 0xFF);
            }
            if ($vlen > 24) | 0x80) . chr(($vlen >> 16) & 0xFF) . chr(($vlen >> 8) & 0xFF) . chr($vlen & 0xFF);
            }
            /* nameData & valueData */
            return $nvpair . $name . $value;
        }
        /**
         * Read a set of FastCGI Name value pairs
         *
         * @param String $data Data containing the set of FastCGI NVPair
         * @return array of NVPair
         */
        private function readNvpair($data, $length = null)
        {
            $array = array();
            if ($length === null) {
                $length = strlen($data);
            }
            $p = 0;
            while ($p != $length) {
                $nlen = ord($data{$p++});
                if ($nlen >= 128) {
                    $nlen = ($nlen & 0x7F = 128) {
                    $vlen = ($nlen & 0x7F _sock, self::HEADER_LEN)) {
                $resp = $this->decodePacketHeader($packet);
                $resp['content'] = '';