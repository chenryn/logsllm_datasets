[toc]
前几天在 Buuctf 上做了 [安洵杯 2019]iamthinking 这道题，题目给了源码，目的是让通过pop链审计出ThinkPHP6反序列化漏洞。
这里总结一下ThinkPHP6的反序列化漏洞的利用。
## 搭建环境
    composer create-project topthink/think=6.0.x-dev thinkphp-v6.0
    cd thinkphp-v6.0
    php think run
ThinkPHP6需要php7.1及以上的环境才能搭建成功。
## 利用条件
这个漏洞的利用需要利用ThinkPHP进行二次开发，当源码中存在unserialize()函数且参数可控时，既可触发这个洞。
下面手动设置漏洞点，在Index控制器中写入：
    lazySave==true` 时，它里面含有save()方法会被触发，我们跟进save()方法。
### （2）跟进save()方法
发现对 `$this->exists`
属性进行判断，如果为true则调用updateData()方法，如果为false则调用insertData()方法。而要想到达这一步，则要先避免被前面的判断给return掉，所以需要先满足下面这个if语句：
    if ($this->isEmpty() || false === $this->trigger('BeforeWrite')) {
        return false;
    }
只需 `$this->isEmpty()` 为返回false，`$this->trigger('BeforeWrite')` 返回true即可。
  * 先跟进 `$this->isEmpty()` 方法：
可见只需要满足`$this->data`不为空即可。
  * 再跟进 `$this->trigger()` 方法（位于vendor\topthink\think-orm\src\model\concern\ModelEvent.php中）：
可见只需要满足 `$this->withEvent == false` 即可返回true。
在通过if判断语句之后，就可以进入到：
    $result = $this->exists ? $this->updateData() : $this->insertData($sequence);
当 `$this->exists == true` 时进入 `$this->updateData()`；当 `$this->exists == false`
时进入 `$this->insertData()` 。
分别跟进这两个方法，发现 `updateData()` 存在继续利用的点，所以需要 `$this->exists == true`，跟进分析。
### （3）跟进updateData()方法
这里下一步的利用点存在于 `$this->checkAllowFields()` 中，但是要进入并调用该函数，需要先通过①②两处的if语句：
**通过①处if语句：** 通过上面对trigger()方法的分析，我们知道需要令 `$this->withEvent == false`
即可通过。由于前面已经绕过了save()方法中的trigger()，所以这里就不用管了。
**通过②处if语句：** 需要 `$data == 1`（非空）即可，所以我们跟进 `$this->getChangedData()`
方法（位于vendor\topthink\think-orm\src\model\concern\Attribute.php中）看一下：
可见，我们只需要令 `$this->force == true` 即可直接返回 `$this-data`，而我们之前也需要设置 `$this-data`
为非空。
回到 `updateData()` 中，之后就可以成功调用到了 `$this->checkAllowFields()` 。
### （4）跟进checkAllowFields()方法
可见，要想成功进入并执行 `$this->db()` 方法，我们要先通过前面的两个if语句：
**通过①处if语句：** 只需令 `$this->field` 为空。
**通过②处if语句：** 只需令 `$this->schema` 非空。
但可以看到field和schema是默认为空的（位于vendor\topthink\think-orm\src\model\concern\Attribute.php中），所以不用管，然后进一步跟进`$this->db()`。
### （5）跟进db()方法
可以看到这里已经出现了用 `.` 进行字符串连接的操作了， 所以我们可以把 `$this->table` 或 `$this->suffix`
设置成相应的类对象，此时通过 `.` 拼接便可以把类对象当做字符串，就可以触发 `__toString()` 方法了。
### （6）__destruct() 链构造小结
目前为止，前半条POP链已经完成，即可以通过字符串拼接去调用 `__toString()`，所以先总结一下我们需要设置的点：
    $this->data不为空
    $this->lazySave == true
    $this->withEvent == false
    $this->exists == true
    $this->force == true
调用过程如下：
    __destruct()——>save()——>updateData()——>checkAllowFields()——>db()——>$this->table . $this->suffix（字符串拼接）——>toString()
但是还有一个问题就是 `Model` 类是抽象类，不能实例化。所以要想利用，得找出 `Model` 类的一个子类进行实例化，这里可以用 `Pivot`
类（位于\vendor\topthink\think-orm\src\model\Pivot.php中）进行利用：
## __toString() 链构造
### （1）寻找 __toString() 方法
既然前半条POP链已经能够触发 `__toString()` 了，下面就是寻找利用点。这次漏洞的 `__toString()` 利用点位于
vendor\topthink\think-orm\src\model\concern\Conversion.php 中名为`Conversion`
的trait中：
代码很简单，我们继续跟进 `toJson()` 方法。
### （2）跟进toJson()方法
没什么好说的，继续跟进 `toArray()` 方法。
### （3）跟进toArray()方法
对 `$date`进行遍历，其中 `$key` 为 `$date` 的键。默认情况下，会进入第二个 `elseif` 语句，从而将 `$key`
作为参数调用 `getAttr()` 方法。
我们接着跟进 `getAttr()` 方法（位于 vendor\topthink\think-orm\src\model\concern\Attribute.php 中）。
### （4）跟进getAttr()方法
`$value` 的值返回自 `$this->getData()` 方法，且 `getData()` 方法的参数为上面 `toArray()` 传进来的
`$key`，跟进一下 `getData()` 方法：
第一个if判断传入的值，如果 `$name` 值不为空，则将 `$name`值传入到getRealFieldName()方法。
这里面 `getRealFieldName()` 方法的参数，即 `$name`，依然是上面 `toArray()` 传进来的 `$key`。
继续跟进 `getRealFieldName()` 方法：
当满足 `$this->strict == true` 时（默认为true），直接返回`$name`，也就是最开始从 `toArray()` 方法中传进来的
`$key` 值。
从 `getRealFieldName()` 方法回到 `getData()` 方法，此时 `$fieldName` 即为 `$key`。而返回语句如下：
这实际上就是返回了 `$this->data[$key]` 。
然后再从 `getData()` 回到 `getAttr()`，最后的返回语句如下：
这时参数 `$name` 则是从 `toArray()` 传进来的 `$key`，而参数 `$value` 的值就是
`$this->data[$key]`。
继续跟进一下 `getValue()` 方法。
### 跟进getValue()方法
我们在getValue()方法中可以看到最终的利用点，即：
    $closure = $this->withAttr[$fieldName];
    $value = $closure($value, $this->data);
只要我们令 `$closure` 为 "system"，`$this->data` 为要执行的命令就可以动态执行system()函数来Getshell了。
我们尝试令 `withAttr[$fieldName]="system"`、`$this->data="whoami"` ，即执行
`system('whoami');`。
但如果要构造以上命令还需要绕过前面的两个if语句：
**通过①处if语句：** 只需 `$this->withAttr[$key]` 存在。
**通过②处if语句：** 只需 `$this->withAttr[$key]` 存在且不为数组。
即 `$this->withAttr` 数组存在和 `$date` 一样的键 `$key`，并且这个键对应的值不能为数组。
### （6）__toString() 链构造小结
至此，后半个POP链也构造完成，总结下__toString() 链需要构造的点：
    trait Attribute
    {
        private $data = ["evil_key" => "whoami"];
        private $withAttr = ["evil_key" => "system"];
    }
除此之外还需要将前面说的字符串拼接处的 `table` 声明为Pivot类的对象，从而将两个POP链串联起来。
第二个POP链调用过程如下：
## POC
最终POC如下：
     "whoami"];
        private $withAttr = ["evil_key" => "system"];
    }
    namespace think;
    abstract class Model
    {
        use model\concern\Attribute;
        private $lazySave;
        protected $withEvent;
        private $exists;
        private $force;
        protected $table;
        function __construct($obj = '')
        {
            $this->lazySave = true;
            $this->withEvent = false;
            $this->exists = true;
            $this->force = true;
            $this->table = $obj;