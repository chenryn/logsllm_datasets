(cid:16)(cid:8)M1[ti
n(cid:88)
w](cid:9)
(cid:32)(cid:110) n(cid:88)
(cid:111)
(cid:16)(cid:8)tw∆1
(cid:17)
(cid:9)
M1[ti
w]
i=1
w∈W
= H
w∈W
= H({tw}w∈W ) · ∆1.
Thus, H({tw}w∈W ) · ∆1 = e, as(cid:80)
= H
chosen error. Note that z1 is correct, as P1 is honest. Since H is additively homomorphic, we have that
i(cid:54)=1 ˆzi = 0 if P1 does not abort.
Below, we analyze the probability that H({tw}w∈W ) (cid:54)= 0 but P1 does not abort. We assume that the
adversary A leaks c1 bits of ∆1 for some c1 ∈ [κ] ∪ {0} by the (leak) command of Fprep. In this case,
the real protocol execution will abort except with probability 2−c1. Then the remaining κ − c1 bits of ∆1
are uniformly random from the adversary’s view. Thus, e and {tw}w∈W are independent of the unknown
κ − c1 bits of ∆1. As P1 is honest, linear hash function H deﬁned by a random seed χ is independent
of ∆1. Therefore, under the condition that c1 bits of ∆1 have already been leaked, the probability that
∆1 = H({tw}w∈W )−1 · e is at most 2c1−κ. Overall, with probability 2−c1 · 2c1−κ = 2−κ, P1 does not
abort and H({tw}w∈W ) (cid:54)= 0. Since {tw}w∈W are independent of H and H is |C|/2κ-almost universal, the
probability that there exists one w ∈ W such that tw (cid:54)= 0 is at most |C|/2κ. Overall, with probability at least
1 − (|C| + 1)/2κ, we have tw = 0 for all w ∈ W.
Below, we prove by induction that for each wire w, public value Λw is correct.
Base step: The public values for all circuit-input wires are correct, according to how xi
i ∈ [n], w ∈ Ii.
Induction step: It is easy to verify that the public values for the output wires of XOR gates are correct. So,
we will focus on each AND gate (α, β, γ,∧). According to the induction hypothesis, we have that P1 holds
correct public values Λα and Λβ. Recall that the correctness of public value Λγ is checked by computing
the following value:
w is deﬁned for each
tγ = (Λα ⊕ λα) ∧ (Λβ ⊕ λβ) ⊕ (Λγ ⊕ λγ).
w = Λw ⊕ λw is correct for each w ∈ O1, except with probability (|C| + q + 2)/2κ.
From tγ = 0, we have Λγ = (Λα ⊕ λα) ∧ (Λβ ⊕ λβ) ⊕ λγ. According to the correctness of Λα and Λβ,
Λα ⊕ λα and Λβ ⊕ λβ are the correct actual values for input wires α and β respectively. Therefore, Λγ is
correct.
If P1 does not abort in Step 13 of protocol Πmpc, the probability that there exists a corrupt party Pj ﬂipping
w for some w ∈ O1 is (q + 1)/2κ, according to Lemma 1. From the above proof by induction, we
its share λj
have that public value Λw is correct for each w ∈ O1, except with probability (|C| + 1)/2κ. In conclusion, if
P1 does not abort, y1
Lemma 11. For every PPT adversary A corrupting a subset of parties, every honest party Pi /∈ A either
aborts, or outputs yi = fi(x1, . . . , xn) with probability at least 1 − 3q/2κ, where fi denotes the output of
function f to Pi and q is the number of H queries.
Proof. We ﬁrst prove that Pi /∈ A either aborts or obtains the correct public values in Step 11 of protocol
w}w∈W be the public values received by Pi in Step 11 when P1
Πmpc, even if P1 is corrupted by A. Let {Λ(cid:48)
is corrupted, and {Λw}w∈W be the correct public values that should be sent by an honest P1. Below, we
w (cid:54)= Λw. In Step 11, A on behalf of P1
analyze the probability that there exists some w ∈ W such that Λ(cid:48)
(cid:17)
(cid:9)
i to Pi. If Pi /∈ A does not abort, then we have that
sends a value h(cid:48)
(cid:16)(cid:8)Li
h(cid:48)
i = H
w,0 ⊕ Λ(cid:48)
w∆i
w∈W
.
47
w,Λ(cid:48)
w
= Li
w,0 ⊕ Λ(cid:48)
w∆i for each w ∈ W is learned by A. In addition, A has learned Li
Since H is a random oracle, the probability that A ﬁnds a target collision is q/2κ. Therefore, with probability
1 − q/2κ, Li
=
w (cid:54)= Λw for some w ∈ Oi, then A learns both
w,0 ⊕ ∆w∆i by evaluating the circuit on behalf of P1. If Λ(cid:48)
Li
w,1 for the wire w. By Lemma 9, this happens with probability at most q/2κ−1.
garbled labels Li
Overall, except with probability at most 3q/2κ, the public values on all wires in W received by Pi are
correct, if Pi does not abort. Together with that the public values for all circuit-input wires are correct and
the public values on the output wires of XOR gates are correct by induction, we obtain that the public values
on all wires in the circuit are correct, except with probability at most 3q/2κ.
w,0 and Li
w,Λw
Based on the proof of Lemma 1, the probability that Pi does not abort in Step 13 and there exists a
w for some w ∈ Oi is bounded by 3q/2κ. In this probability, the
malicious party Pj ﬂipping its share λj
probability that A ﬁnds a target collision for H is bounded by q/2κ; the probability that the real protocol
execution does not abort and adversary A learns ∆i is at most q/2κ−1 from the proof of Lemma 9. Therefore,
Pi will obtain a correct wire mask λw for each w ∈ Oi, except with probability at most 3q/2κ.
w = Λw ⊕ λw is correct for each w ∈ Oi, except with
In conclusion, if Pi does not abort, then yi
probability at most 3q/2κ.
E.2 Proof of Theorem 3
Given the Lemmas 8−11, the proof of Theorem 3 is relatively easy. Below, we present the details of the
proof.
Theorem 7 (Theorem 3, restated). Let f : {0, 1}|I| → {0, 1}|O| be an n-party functionality. Then pro-
tocol Πmpc shown in Figures 6 and 7 securely computes f in the presence of a static malicious adversary
corrupting up to n − 1 parties in the Fprep-hybrid model, where H is a random oracle.
Proof. Let A be a PPT adversary who corrupts a subset of parties A. We construct a PPT simulator S,
which runs A as a subroutine, simulates the adversary’s view, and has access to an ideal functionality Fmpc
that implements f. Whenever any honest party simulated by S aborts or A aborts, S outputs whatever A
outputs and aborts. The simulator S is deﬁned as below.
Description of the simulation.
– INITIALIZATION: After A corrupted a subset of parties A, S corrupts the same parties in the ideal world,
and internally emulates an execution of the honest parties running Πmpc with A.
– PREPROCESSING: S emulates the functionality Fprep, and records all the values from adversary A. Sim-
ulator S acts as every honest party Pi /∈ A and simulates honestly the execution of Pi in function-
(in)dependent phases.
– ONLINE: S simulates honestly the execution of honest parties, with the following exceptions:
– For every honest party Pi /∈ A, S adopts xi := 0|Ii| as Pi’s input, and broadcasts Λw := λw to all
– For each corrupt party Pi ∈ A, for every w ∈ Ii, S receives a public value Λw from A, and computes
– For every corrupt party Pi ∈ A, S sends (input, xi) on behalf of Pi to Fmpc, and receives an output yi.
parties for each circuit-input wire w ∈ Ii.
w := Λw ⊕ λw as an input bit of Pi.
xi
S computes
where(cid:8)˜xi := 0|Ii|(cid:9)
i /∈A and(cid:8)˜xi := xi(cid:9)
(˜y1, . . . , ˜yn) := f (˜x1, . . . , ˜xn),
Oi, deﬁnes ˜λj∗
S acts as honest party Pj∗ and opens {˜λj∗
w := λj∗
w ⊕ yi
w ⊕ ˜yi
w and computes Mi[˜λj∗
i∈A. Then S chooses any j∗ /∈ A, and then for each i ∈ A, w ∈
w )∆i. For each i ∈ A,
w }w∈Oi to corrupt party Pi in the amortized way.
w ] := Mi[λj∗
w ]⊕ (˜λj∗
w ⊕ λj∗
48
Based on Lemmas 8–11 in the previous section, we prove that the real protocol execution is indistinguishable
from the ideal world execution by a sequence of games.
Hybrid0. This is the same as the real protocol execution shown in Figures 6 and 7, where the actual inputs
{xi}i /∈A are used for honest parties.
Hybrid1. This is the same as Hybrid0, except that S plays the role of honest parties {Pi}i /∈A.
Hybrid1 is essentially the same as Hybrid0.
Hybrid2. This is the same as Hybrid1, except that a) for each i ∈ A, w ∈ Ii, S receives a public value
Λw from A and computes xi
w := Λw ⊕ λw; b) for each i ∈ A, S sends (input, xi) on behalf of Pi to Fmpc
and receives an output yi.
The distributions on the view of adversary A in Hybrid1 and Hybrid2 are identical. If P1 is honest,
then the outputs obtained by P1 in two hybrids are the same except with probability at most (|C|+q+2)/2κ =
negl(κ) from Lemma 8 and Lemma 10, where q is an upper bound of the number of H queries. If Pi is
honest for each i /∈ A, i (cid:54)= 1, then the outputs obtained by Pi in two hybrid games are the same except with
probability at most 3q/2κ = negl(κ) by Lemma 11. Therefore, the distributions in Hybrid1 and Hybrid2
are indistinguishable, except with probability negl(κ).
Hybrid3. This is the same as Hybrid2, except that simulator S executes as follows:
1. Use {xi = 0|Ii|}i /∈A as the inputs of honest parties in Step 9 of protocol Πmpc.
2. Compute (˜y1, . . . , ˜yn) := f (˜x1, . . . , ˜xn), where ˜xi := 0|Ii| for each i /∈ A and ˜xi := xi for each i ∈ A.
3. Choose any j∗ /∈ A, and for each i ∈ A, w ∈ Oi deﬁne ˜λj∗
w. Then compute
w := λj∗
w ⊕ ˜yi
w ⊕ yi
Mi[˜λj∗
w ] := Mi[λj∗
w ] ⊕ (˜λj∗
w ⊕ λj∗
w )∆i.
γ = λi
α ⊕ λi
We ﬁrst prove that for every honest party Pi, its share λi
4. For each i ∈ A, act as honest party Pj∗ and open {˜λj∗
w }w∈Oi to corrupt party Pi in the amortized way.
w for each wire w in the circuit is uniformly
random and kept secret in A’s view, before these shares are revealed in the phases of input and output
processing. Here we do not consider the circuit-input wires associated with other parties’ inputs, as the
corresponding shares are set as 0. If i = 1, it is easy to see that the P1’s shares for all wires are kept secret
in the information-theoretic sense. If i (cid:54)= 1, we show that Pi’s shares are computationally hidden, even if
β is kept unknown for A, if at least one of
P1 is corrupted. For each XOR gate (α, β, γ,⊕), λi
β is kept secret. Thus, we focus on each AND gate (α, β, γ,∧). The half-gates garbled rows Gi
α and λi
λi
γ,1 for γ ∈ W are encrypted by both garbled labels for input wires. Therefore, A are still unknown
and Gi
for Pi’s shares λi
β on input wires α and β, unless it learns ∆i. From Lemma 9, this occurs with
γ,uv for each γ ∈ W, u, v ∈ {0, 1} and
probability at most q/2κ−1 = negl(κ). Besides, each garbled row Gi,j
j (cid:54)= i, 1 is encrypted using different combinations of Li
β,1. To open at least two garbled
α,1 and Li
β,0, Li
rows, A needs to learn both garbled labels for some wire. From Lemma 9, this happens with probability
at most q/2κ−1 = negl(κ). Therefore, A does not learn the shares λi
β for the input wires. In the
process of checking public values, if Pi with i (cid:54)= 1 does not abort, the public values on the output wires
of all AND gates are correct except with probability at most 3q/2κ = negl(κ), according to the proof of
Lemma 11. Therefore, the value zi sent by Pi does not reveal its shares for each AND gate (α, β, γ,∧), as
αβ is uniformly random and masks Pi’s shares.
λi
w is uniformly random and unknown for A. Therefore,
the distributions of the public values {Λw}w∈(cid:83)
i /∈A Ii in Hybrid2 and Hybrid3 are both independently
random, and thus are exactly the same. For each wire w associated with the outputs of corrupt parties, A
For each i /∈ A, w ∈ Ii, we have proved that λi
α and λi
α and λi
α,0, Li
γ,0
49
does not know the share λj∗
i ∈ A, w ∈ Oi, ˜λj∗
Hybrid2.
w of Pj∗ /∈ A, and both λj∗
w and ˜λj∗
w sent by S in Hybrid3 has the same distribution as λj∗
w are uniformly random. Therefore, for each
w sent by honest party Pj∗ in
For each w ∈ W, the public value Λw is uniformly random and has the same distribution in Hybrid2
w}i /∈A are uniformly random and not known to A. If P1 ∈ A, then P1 is able to
and Hybrid3, as {λi
learn only one garbled label for each wire except with probability at most q/2κ−1 = negl(κ) by Lemma 9.
γ,11 for each γ ∈ W, i /∈ A and
Thus, P1 can open only one of four garbled rows Gi,j
j (cid:54)= i, 1. In two hybrids, the distribution of garbled rows evaluated by corrupt party P1 is indistinguishable,
as the distribution of public values {Λw}w∈W is the same. Moreover, the garbled labels obtained by P1 are
indistinguishable in two hybrids.
γ,00, Gi,j
γ,01, Gi,j
γ,10, Gi,j
for each i ∈ A and w ∈ Oi, Λw ⊕ ((cid:76)
Based on the proof of Lemma 10, if honest party P1 /∈ A does not abort in Step 12 of protocol Πmpc,
w) for each w ∈ Oi except with probability at most (|C|+1)/2κ = negl(κ). Therefore,
w, which means
that A will obtain the correct output. If P1 ∈ A, A will also get the correct output for each i ∈ A, due to
the setting of the shares {˜λj∗
w = Λw ⊕ ((cid:76)
w }w∈Oi of honest party Pj∗.
w) ⊕ ˜λj∗
w) ⊕ yi
w ⊕ ˜yi
w⊕((cid:76)
Λw = ˜yi
j∈[n] λj
j(cid:54)=j∗ λj
j∈[n] λj
w = yi
In conclusion, Hybrid3 is indistinguishable from Hybrid2, except with probability negl(κ).
50