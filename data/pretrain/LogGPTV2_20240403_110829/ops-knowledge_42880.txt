User: 请解答这个和日志有关的问题Why is root security enforced but $HOME typically unprotected? Coming from the comments in this question Why is it bad to log in as root?:

The sudo mechanics is in use so non-administrative tools "cannot harm your system." I agree that it would be pretty bad if some github project I cloned was able to inject malicious code into /bin. However, what is the reasoning like on a desktop PC? The same github code can, once executed, without sudo rights, wipe out my entire home folder, put a keylogger in my autostart session or do whatever it pleases in ~.

Unless you have backups, the home folder is usually unique and contains precious, if not sensitive data. Root directories however build up the system and can often be recovered by simply reinstalling the system. There are configurations saved in /var and so on, but they tend to have less significance to the user than the holiday pictures from 2011. The root permissions system makes sense, but on desktop systems, it feels like it protects the wrong data.

Is there no way to prevent malicious code happening in $HOME? And why does nobody care about it?

Assistant: I'm going to disagree with the answers that say the age of the Unix security model or the environment in which it was developed are at fault.  I don't think that's the case because there are mechanisms in place to handle this.


  The root permissions system makes sense, but on desktop systems, it feels like it protects the wrong data.


The superuser's permissions exist to protect the system from its users.  The permissions on user accounts are there to protect the account from other non-root accounts.

By executing a program, you give it permissions to do things with your UID.  Since your UID has full access to your home directory, you've transitively given the program the same access.  Just as the superuser has the access to make changes to the system files that need protection from malicious behavior (passwords, configuration, binaries), you may have data in your home directory that needs the same kind of protection.

The principle of least privilege says that you shouldn't give any more access than is absolutely necessary.  The decision process for running any program should be the same with respect to your files as it is to system files.  If you wouldn't give a piece of code you don't trust unrestricted use of the superuser account in the interest of protecting the system, it shouldn't be given unrestricted use of your account in the interest of protecting your data.


  Is there no way to prevent malicious code happening in $HOME? And why does nobody care about it?


Unix doesn't offer permissions that granular for the same reason there isn't a blade guard around the rm command:  the permissions aren't there to protect users from themselves.

The way to prevent malicious code from damaging files in your home directory is to not run it using your account.  Create a separate user that doesn't have any special permissions and run code under that UID until you've determined whether or not you can trust it.

There are other ways to do this, such as chrooted jails, but setting those up takes more work, and escaping them is no longer the challenge it once was.