### Container Size and Namespace Awareness

The container is significantly larger. Since the namespace-unaware system cannot correctly infer provenance within containers, it leads to inaccuracies. Below, we illustrate the differences in behavior with and without namespace and container awareness.

#### Without Namespace/Container Awareness
- **Host:**
  - `5.lstat6.readdockerdpid=21992.symlink(write)1.symlink(read)4.renameat(read) (RENAME_EXCHANGE)3.renameat(read)symlink_swappid=2230subtype:filepath:/var/lib/docker/overlay2/container_hash/merged/stash_pathctr_path: /stash_pathsubtype:filepath: /var/lib/docker/overlap2/container_hash/merged/totally_safe_pathctr_path: /totally_safe_path`
  - `subtype:filepath:/subtype:filepath:/w00t_w00t_im_a_flag7.write subtype:filepath:~/ex101/out`

- **Container:**
  - `5.lstat6.readdockerdpid=21992.symlink(write)4.renameat(read) (RENAME_EXCHANGE)3.renameat(read)1.symlink(read)symlink_swappid=2230subtype:filepath:/stash_pathsubtype:filepath: /totally_safe_path`
  - `subtype:filepath:/subtype:filepath:/w00t_w00t_im_a_flag7.write subtype:filepath:~/ex101/out`

#### With Namespace/Container Awareness
- **Host:**
  - `1.execverktpid=26617ns_pid:a0ns_pid_for_cdr:a0ns_mnt:c0ns_net:d02.unsharenew_netinitpid=266173.unsharenew_nsinitpid=26617ns_net:d1initpid=26617ns_mnt:c15.clone4.execveld-linux-x86-64pid=26617ld-linuxpid=26654(call chroot)6.clonenew_pid7.execvesystemdpid=26655ctr_pid=1ns_pid:a1ns_pid_for_cdr:a1hellopid=26655ctr_pid=1`

- **Container:**
  - `1.clonecontainerdpid=21456ns_pid:a0ns_pid_for_cdr:a0ns_mnt:c0ns_net:d02.clonecontainerd-shimpid=214653.clonerunCpid=21468runC[Parent]pid=214716.clone5.execverunC[Child]pid=21471runC[INIT]pid=21473unsharenew_pid|new_mnt|new_net7.clonerunC[INIT]pid=21473ns_pid_for_cdr:a1ns_mnt:c1ns_net:d18.execverunC[INIT]pid=21474ns_pid:a1(call pivot_root)hellopid=21474ctr_pid=1`

### Overhead of CLARION

The overall overhead of CLARION includes SPADE overhead and the overhead from CLARIONâ€™s kernel modules (PID namespace, Netfilter). By comparing the base values with CLARION's overhead, we observe that the primary overhead comes from Linux Audit rather than the additional modules introduced by CLARION.

#### Storage Overhead

We compared the size of raw logs collected by SPADE and CLARION in a microservice environment with 10 microservices. Logs were collected for 24 hours, and the results are summarized in Table 11. The additional storage overhead for CLARION is modest (under 5%) and significantly lower than CamFlow.

### Related Work

#### Container Security

With the increasing popularity of container-based virtualization, numerous security issues have been identified in container orchestration systems [8,9,14,18]. These issues often arise from design flaws. For example, Docker does not enable user namespaces by default to simplify support for file-system features like "bind mount," which can lead to file access privilege problems. Disabling user namespaces means the root user inside the container also has root privileges on the host. This vulnerability can be exploited for privilege escalation. Developing defensive technologies for container environments is crucial. This paper presents a step towards a robust forensics analysis framework for containerized applications.

#### Container Vulnerability Analysis

Many existing efforts [37] focus on container system vulnerability analysis. Some use static analysis techniques for compliance checking of Docker images but do not protect container instances at runtime [33, 40]. Contemporary tools are limited in their ability to conduct long-term forensic analysis. Our study complements these tools by providing a dynamic analysis view that leverages semantics-aware comprehension of attacks on running containers.

#### Provenance Tracking and Causality Analysis

Provenance tracking and causality analysis are vital in system forensics [31, 32, 34, 36]. These tools build provenance/causal graphs by connecting system objects like processes, files, and sockets using low-level events such as system calls. When an attack entry point is identified, forward and backward tracking along the graph can be performed to find attack-related subgraphs, aiding analysts in understanding the attack's origin and impact. Several prior efforts have proposed mechanisms to improve the quality of generated graphs [31, 32, 36], some addressing dependency explosion and others focusing on real-time and scalable graph generation [34]. Systems like Winnower [26] and CamFlow [39] have limitations. CamFlow is namespace-aware but not container-aware, while Winnower is container-aware but not namespace-aware. Both run on SPADE, making them complementary and potentially integrable. Our work is more general and agnostic to specific container-management frameworks.

#### Alternative OS-level Virtualization Techniques

Other OS-level virtualization techniques, such as Solaris zones [11] and FreeBSD jails [12], are similar to Linux namespaces in providing resource isolation while sharing the same kernel. Provenance effects from these techniques depend on various factors, including virtualized resources, OS platforms, and audit frameworks. We provide a summary of our investigation into BSD Jails and Solaris Zones in Section 3.1.

### Conclusion

In this paper, we present a comprehensive analysis of the soundness and clarity challenges in data provenance analysis due to Linux namespaces and containerization. Our analysis informed the development of CLARION, a namespace-aware provenance tracking solution for Linux container-based microservice deployments. We resolved soundness challenges in each affected Linux namespace and developed abstraction patterns to clarify container-specific semantics. Evaluation results on real-world microservice benchmarks show that our solution is more effective than state-of-the-art provenance-tracking techniques and introduces acceptable additional overhead.

### Acknowledgements

We thank our shepherd, Kevin Butler, and the anonymous reviewers for their insightful comments and suggestions. This work was sponsored in part by the U.S. Department of Homeland Security (DHS) Science and Technology Directorate under Contract HSHQDC-16-C-00034 and the National Science Foundation under Grants 1514503 and 1547467. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of DHS or NSF and should not be interpreted as representing the official policies or endorsements, either expressed or implied, of DHS, NSF, or the U.S. government.