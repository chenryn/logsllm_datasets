title:MAD-HTLC: Because HTLC is Crazy-Cheap to Attack
author:Itay Tsabary and
Matan Yechieli and
Alex Manuskin and
Ittay Eyal
0
8
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
MAD-HTLC: Because HTLC is Crazy-Cheap to Attack
Itay Tsabary
Technion, IC3
Matan Yechieli
Technion, IC3
Alex Manuskin
ZenGo-X
Ittay Eyal
Technion, IC3
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract—Smart Contracts and transactions allow users to
implement elaborate constructions on cryptocurrency blockchains
like Bitcoin and Ethereum. Many of these constructions,
in-
cluding operational payment channels and atomic swaps, use
a building block called Hashed Time-Locked Contract (HTLC).
In this work, we distill from HTLC a speciﬁcation (HTLC-
Spec), and present an implementation called Mutual-Assured-
Destruction Hashed Time-Locked Contract (MAD-HTLC). MAD-
HTLC employs a novel approach of utilizing the existing
blockchain operators, called miners, as part of
the design.
If a user misbehaves, MAD-HTLC incentivizes the miners to
conﬁscate all her funds. We prove MAD-HTLC’s security using
the UC framework and game-theoretic analysis. We demonstrate
MAD-HTLC’s efﬁcacy and analyze its overhead by instantiating
it on Bitcoin’s and Ethereum’s operational blockchains.
Notably, current miner software makes only little effort to
optimize revenue, since the advantage is relatively small. How-
ever, as the demand grows and other revenue components shrink,
miners are more motivated to fully optimize their fund intake.
By patching the standard Bitcoin client, we demonstrate such
optimization is easy to implement, making the miners natural
enforcers of MAD-HTLC.
Finally, we extend previous results regarding HTLC vulnera-
bility to bribery attacks. An attacker can incentivize miners to
prefer her transactions by offering high transaction fees. We
demonstrate this attack can be easily implemented by patching
the Bitcoin client, and use game-theoretic tools to qualitatively
tighten the known cost bound of such bribery attacks in presence
of rational miners. We identify bribe opportunities occurring on
the Bitcoin and Ethereum main networks where a few dollars
bribe could yield tens of thousands of dollars in reward (e.g., $2
for over $25K).
I. INTRODUCTION
Blockchain-based cryptocurrencies like Bitcoin [1] and
Ethereum [2] are monetary systems with a market cap
of $400B [3]. They enable simple transactions of internal
tokens and implementation of more elaborate smart contracts.
The transactions create the smart contracts and interact with
them. Entities called miners create data structures called blocks
that contain transactions. They publish and order the blocks to
form a blockchain, thus conﬁrming the included transactions
and achieving system progress. The system state is obtained
by parsing the transactions according to the block order.
Blockchain security relies on incentives, rewarding miners
with tokens for carrying out their tasks.
A prominent smart-contract design pattern is the Hashed
Time-Locked Contract (HTLC), set up for two participants,
Alice, A, and Bob, B (§II). It asserts that A gets tokens
for presenting a hash preimage of a speciﬁc value before a
certain timeout, otherwise B gets them. A variety of more
elaborate smart-contract designs rely on HTLC as a building
block. These include high-frequency payment channels [4]–
[10], atomic swaps [11]–[15], contingent payments [16]–[20],
and vaults [21]–[24]. We identify the speciﬁcation required by
the variety of contracts using HTLC and call it HTLC-Spec.
Unfortunately, HTLC is vulnerable to incentive manipula-
tion attacks [25]–[27]. Winzer et al. [28] showed that B can
bribe miners using designated smart contracts to ignore A’s
transactions until the timeout elapses. Similarly, Harris and
Zohar [29] show that B can delay A’s transaction conﬁrmation
by overloading the system with his own transactions. Both of
these allow B to obtain the HTLC tokens while depriving A
of them, even if A published the preimage.
In this work, we provide a secure implementation of HTLC-
Spec, and further analyze HTLC’s susceptibility to bribery.
We begin by describing the model (§III) for an underlying
blockchain mechanism like that of Bitcoin or Ethereum. The
system’s state is a set of contracts; each contract comprises
a token amount and a predicate; transactions redeem contract
tokens by providing inputs that satisfy their predicates. Users
publish transactions initiating new contracts, assigning them
with the redeemed tokens while also offering some as fees. In
each round one miner adds a block with a transaction to the
chain and receives its fee.
We proceed to present MAD-HTLC, our HTLC-Spec im-
plementation (§IV). MAD-HTLC relies on the fact that miners
can participate in a smart contract execution, and thus their
interests should be taken into account. MAD-HTLC utilizes
miners as enforcers of its correct execution, allowing and
incentivizing them to seize its contract
tokens in case of
any bribery attempt. That, in turn, incentivizes A and B to
refrain from such attempts and to interact with MAD-HTLC
as intended. To the best of our knowledge, this is the ﬁrst work
to utilize miner incentives in this way.
In addition to the preimage speciﬁed by HTLC-Spec, which
we denote prea, MAD-HTLC uses a second preimage, preb,
known only to B. MAD-HTLC comprises a main deposit
contract (MH-Dep) and an auxiliary collateral contract (MH-
Col), which work as follows. MH-Dep has three so-called
redeem paths. First, it allows A to redeem it with a transaction
including the predeﬁned preimage, prea. Alternatively, it al-
lows B to redeem it after a timeout with a transaction including
the other preimage, preb. This is essentially the speciﬁcation,
but MH-Dep provides another option, allowing any user, and
speciﬁcally any miner, to redeem it herself with a transaction
including both prea and preb.
© 2021, Itay Tsabary. Under license to IEEE.
DOI 10.1109/SP40001.2021.00080
1230
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
Now, if both A and B try to redeem MH-Dep, then their
transactions must reveal preimages prea and preb, respectively.
Any miner can then simply take these preimages and issue
her own transaction that uses the third redeem path to seize
the tokens for herself. Speciﬁcally, if A tries to redeem MH-
Dep, then B is assured that she cannot do so – if she tries
to redeem the tokens then the miners would get them instead.
Assuming B is benign, i.e., rational but prefers to act honestly
for the same reward, then this construction is sufﬁcient to
satisfy HTLC-Spec. But we can do better.
If B is spiteful, then he will prefer to reduce A’s reward if
it does not affect his. When A knows prea and tries to redeem
MH-Dep, B cannot redeem it as well, but he can publish
a redeeming transaction nonetheless allowing the miners to
collect the tokens instead of A.
We strengthen MAD-HTLC such that B is strictly incen-
tivized to refrain from such deviant behavior with the auxiliary
contract MH-Col. It can be redeemed only after the same
timeout as MH-Dep, either by a transaction of B, or by any
miner that provides both prea and preb. Now, if A knows prea
then she can redeem MH-Dep and B can redeem MH-Col.
If instead B contends with A for MH-Dep, both still lose
the MH-Dep for the miners; but now both prea and preb are
revealed, allowing miners to seize the MH-Col tokens as well.
B is therefore strictly incentivized not to contend, allowing A
to receive the MH-Dep tokens as required.
This means the MAD-HTLC construction is secure against
the known incentive manipulation attacks [25]–[29] – B cannot
incentivize miners to exclude A’s transaction and getting his
conﬁrmed instead.
MAD-HTLC utilizes the mutual assured destruction [30],
[31] principle: If a party misbehaves then all parties lose
everything. Although penalizing the well-behaved party as
well, this mechanism design [32] technique ensures rational
players act as intended.
To prove the security of MAD-HTLC (§V), we ﬁrst bound
the possible leakage and interactions of system entities using
the UC framework [33]. These interactions include the setup,
initiation and redeeming of MAD-HTLC. Then, we formalize
MAD-HTLC as a game played by A, B and the miners, where
the action space comprises the aforementioned possible inter-
actions. We model all parties as rational non-myopic players,
and show the prescribed behavior is incentive-compatible [34].
We prove the efﬁcacy of MAD-HTLC by implementing
it both in the less expressive Bitcoin Script [35] and in the
richer Ethereum Solidity [36] smart-contract languages (§VI).
We deploy it on Bitcoin’s and Ethereum’s main networks,
and show it bears negligible overhead (e.g., 2.2e-6 BTC)
compared to the secured amount (e.g., 2.6 BTC). Speciﬁcally
for payment-channels [4]–[10], this negligible overhead is only
incurred in the abnormal case of a dispute.
MAD-HTLC relies on miners non-myopically optimizing
their transaction choices, often referred to as Miner Ex-
tractable Value (MEV) [37]–[39]. While such optimizations
are common in the Ethereum network, as of today, Bitcoin’s
default cryptocurrency client only offers basic optimization.
Changes in miners’ revenue structure will make better opti-
mizations more important. To demonstrate miners can easily
enhance transaction choice optimization once they choose to
do so, we patch the standard Bitcoin client [40] to create
Bitcoin-MEV infrastructure, allowing for easy additions of
elaborate logic. In particular, we implement the logic enabling
miners to beneﬁt from enforcing the correct execution of
MAD-HTLC.
We then revisit the security of the prevalent HTLC im-
plementation and reﬁne previous results [28] regarding its
vulnerability to bribing attacks (§VII). We show that HTLC
is vulnerable even in blockchains with limited Script-like
languages, and bribe can be made using the built-in transaction
fee mechanism. We analyze miners’ behavior as a game for
the HTLC timeout duration. Each sufﬁx of the game can be
analyzed as a subgame, and all players have perfect knowledge
of the system state. B can take advantage of this setting to
incentivize miners to withhold A’s transaction until the time-
out, making this the single subgame perfect equilibrium [41].
So, in presence of rational non-myopic miners the required
bribe cost is independent of the timeout duration. This matches
the lower bound, and qualitatively tightens the exponential-in-
timeout upper bound, both presented by Winzer et al. [28].
In our Bitcoin-compatible attack variation, miners only
have to be non-myopic for the attack to succeed, a simple
optimization we implement by patching the standard Bitcoin
client with merely 150 lines of code. We identify several
potential bribe opportunities on the Bitcoin and Ethereum main
networks, including examples of a few dollars bribe would
have yielded tens of thousands of dollars in payout (e.g.,
payment channel where bribe of $2 could have yielded payout
of $25K).
We conclude by discussing future directions (§VIII), includ-
ing attacks and mitigations in a weaker model where A or B
have mining capabilities, and using MAD-HTLC to reduce
latency in systems using HTLC-Spec.
In summary, we make the following contributions:
• We formalize the speciﬁcation HTLC-Spec of the preva-
• prove MAD-HTLC is secure and incentive compatible;
• implement, deploy, and evaluate MAD-HTLC on the
Bitcoin and Ethereum main networks;
• patch the prevalent Bitcoin Client
to create Bitcoin-
MEV infrastructure, and to speciﬁcally support enforcing
correct MAD-HTLC execution;
• prove HTLC is vulnerable to bribery attacks in limited
smart-contract environments; and
• qualitatively tighten the bound of Winzer et al. [28] and
implement the required rational miner behavior.
Open Source and Responsible Disclosure: We completed
a responsible-disclosure process with prominent blockchain
development groups. We intend to open source our code,
subject to security concerns of the community.
• present MAD-HTLC that satisﬁes HTLC-Spec utilizing
lent HTLC contract;
miners as participants;
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1231
II. RELATED WORK
We are not aware of prior work utilizing miners’ incen-
tives to use them as enforcers of correct smart contract
execution. We review previous work on bribing attacks in
blockchains (§II-A), detail exhibited and postulated mining
behavior with respect
to transaction selection (§II-B), and
present systems and applications using HTLC-Spec (§II-C).
A. Bribery Attacks
Winzer et al. [28] present attacks that delay conﬁrmation
of speciﬁc transactions until a given timeout elapses. Their
attacks apply to HTLC where B delays the conﬁrmation of A’s
redeeming transaction until he can redeem it himself. Their
presented attack requires predicates available only in rich
smart contract languages like Ethereum’s Solidity [36], [42]
and Libra’s Move [43], [44], but not Bitcoin’s Script [35].
Speciﬁcally, the attack requires setting a bribe contract that
monitors what blocks are created and rewards participants