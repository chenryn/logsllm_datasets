title:Return to the Zombie Gadgets: Undermining Destructive Code Reads via
Code Inference Attacks
author:Kevin Z. Snow and
Roman Rogowski and
Jan Werner and
Hyungjoon Koo and
Fabian Monrose and
Michalis Polychronakis
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Return to the Zombie Gadgets: Undermining
Destructive Code Reads via Code Inference Attacks
Kevin Z. Snow, Roman Rogowski, Fabian Monrose
Department of Computer Science
University of North Carolina at Chapel Hill, USA
Email: kzsnow,rogowski,PI:EMAIL
Jan Werner
Renaissance Computing Institute (RENCI)
Chapel Hill, USA
Email: PI:EMAIL
Hyungjoon Koo, Michalis Polychronakis
Department of Computer Science
Stony Brook University, USA
Email: hykoo,PI:EMAIL
by chaining together existing code fragments within the ex-
ploited program. These code reuse attacks either link together
entire functions (i.e., return-to-libc attacks) or combine short
instruction sequences (dubbed gadgets) ending with ret,
call, or jmp instructions.
Abstract‚ÄîThe concept of destructive code reads is a new defen-
sive strategy that prevents code reuse attacks by coupling Ô¨Åne-
grained address space layout randomization with a mitigation
for online knowledge gathering that destroys potentially useful
gadgets as they are disclosed by an adversary. The intuition is
that by destroying code as it is read, an adversary is left with
no usable gadgets to reuse in a control-Ô¨Çow hijacking attack. In
this paper, we examine the security of this new mitigation. We
show that while the concept initially appeared promising, there
are several unforeseen attack tactics that render destructive code
reads ineffective in practice.
SpeciÔ¨Åcally, we introduce techniques for leveraging constructive
reloads, wherein multiple copies of native code are loaded
into a process‚Äô address space (either side-by-side or one-after-
another). Constructive reloads allow the adversary to disclose
one code copy, destroying it in the process, then use another
code copy for their code reuse payload. For situations where
constructive reloads are not viable, we show that an alternative,
and equally powerful, strategy exists: leveraging code association
via implicit reads, which allows an adversary to undo in-place code
randomization by inferring the layout of code that follows already
disclosed bytes. As a result, the implicitly learned code is not
destroyed, and can be used in the adversary‚Äôs code reuse attack.
We demonstrate the effectiveness of our techniques with concrete
instantiations of these attacks against popular applications. In
light of our successes, we argue that the code inference strategies
presented herein paint a cautionary tale for defensive approaches
whose security blindly rests on the perceived inability to undo
the application of in-place randomization.
Index Terms‚Äîmemory disclosure; code reuse; return-oriented
programming; application security; Ô¨Åne-grained randomization
I. INTRODUCTION
Despite decades of research into application-level defenses,
a multitude of vulnerabilities continue to be discovered and
exploited in today‚Äôs feature-rich software ecosystem, includ-
ing web browsers, email clients, and document readers. A
seemingly endless cycle marches onwards‚Äîdefenses address
known problems, new problems arise or prior assumptions
are invalidated, then attacks quickly bypass those previous
defenses, ad inÔ¨Ånitum. For instance,
the no-execute (NX)
primitive was introduced to prevent the execution of malicious
code injection into exploited program memory. As a result,
attackers turned to constructing their malicious program logic
[40] or
In computer security parlance, this is called return-oriented
programming (ROP)
jump-oriented programming
(JOP) [15, 10], depending on the type of gadgets used.
To thwart these attacks, address-space layout randomization
(ASLR) was widely adopted over the past decade as a means
to obfuscate the location of code necessary to construct these
code reuse payloads. Soon thereafter, ASLR was bypassed
by leveraging a memory disclosure vulnerability to disclose a
code pointer, then subsequently using this information to align
malicious code pointers with gadgets in the newly discovered
code region.
To address the shortcomings of contemporary ASLR,
Bhatkar et al. [6] proposed diversifying software between
subsequent runs using an instantiation of what is now called
Ô¨Åne-grained randomization. In short, the idea is to not only
randomize code region locations, but also the functions within
those regions, the basic blocks within those functions, as well
as the instructions and registers therein. In doing so, leaked
function pointers presumably provide too little information
to derive the location of useful ROP or JOP gadgets, thus
preventing this form of code reuse. Given the promise of
this idea, a plethora of Ô¨Åne-grained ASLR schemes have
appeared in the academic literature [35, 24, 47, 23, 28, 7, 19],
each with their own advantages and disadvantages. In gen-
eral, however, all of the various instantiations of Ô¨Åne-grained
randomization achieve their goal by enforcing a policy that
attempts to prevent the adversary from inferring the location
of gadgets given knowledge of leaked code pointers. However,
applications have since evolved to commonly provide dynamic
features, such as interactive scripting, that fundamentally al-
ter the adversarial model. That is, ASLR depends on the
secrecy of code region addresses, but a script controlled by
the adversary provides an opportunity for leaking this secret
prior to exploitation. Unfortunately, shortly after these works
2375-1207/16 $31.00 ¬© 2016 IEEE
¬© 2016, Kevin Z. Snow. Under license to IEEE.
DOI 10.1109/SP.2016.61
DOI 10.1109/SP.2016.61
954
954
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:39 UTC from IEEE Xplore.  Restrictions apply. 
began gaining traction, Snow et al. [42] presented a technique
called just-in-time code reuse (JIT-ROP), which expands this
technique to leak not just code pointers, but also the code
itself by following those pointers and recursively disclosing
each discovered page of code. Afterwards, the leaked code is
inspected, gadgets are identiÔ¨Åed, and a payload is compiled
just-in-time.
Spurred by the just-in-time attack paradigm, numerous
defenses that adapt, or improve upon, Ô¨Åne-grained ASLR have
recently been proposed to better fortify applications against
these attacks. Generally speaking, the approaches they take can
be categorized as either attempting to prevent the disclosure
of code [3, 4, 21, 16, 11], or attempting to prevent
the
execution of disclosed code [45, 48]. Of these approaches,
only the work of Backes et al. [4], called XnR, and the concept
of destructive reads proposed by Tang et al. [45] (dubbed
Heisenbyte) and Werner et al. [48] (called NEAR) are
speciÔ¨Åcally designed to support commodity software, i.e., they
forgo the requirement of source code access and recompilation.
In this work, we shed light on the difÔ¨Åculty of designing
binary-compatible techniques for preventing the execution of
disclosed code, especially when real-world constraints are
taken into consideration. For example, the use of dynamically
loaded shared libraries, just-in-time code generation engines
(e.g., JavaScript or ActionScript), and the adversary‚Äôs ability
to control some aspects of program operation (such as open-
ing new browser tabs) are often neglected in the design of
application-level defenses, but are requisite features to support
performance and user experience goals. We focus on the
approaches of Tang et al. [45] and Werner et al. [48] which
both attempt to ensure that code or data can be executed if
and only if it has not been previously read. The instantiation
of this relaxed property is meant to avoid disruption of any
legitimate reads to data embedded within code segments,
which cannot be precisely identiÔ¨Åed during static analysis,
due to the complexity of many closed-source applications. At
the same time, this property ensures that gadgets revealed via
a memory disclosure cannot be later executed, as they have
been ‚Äúdestroyed‚Äù in the execute-only mapping of the same
locations. Sadly, we show that this primitive fails to account
for two new classes of attacks that are relatively easy to mount.
Our speciÔ¨Åc contributions are as follows:
‚Ä¢ We introduce three new security properties that we argue
must be considered by application defenses that prevent
the execution of disclosed code; namely, code persistence,
singularity and dis-association.
‚Ä¢ We show that implementing the notion of destructive code
reads for commodity applications is more difÔ¨Åcult than
Ô¨Årst thought, especially in light of the adversary‚Äôs ability
to break each of the aforementioned properties in recently
proposed work [45, 48].
‚Ä¢ We explore novel methods of undermining binary com-
patible Ô¨Åne-grained randomization, which has potential
implications for the larger body of work that relies on
the notion of Ô¨Åne-grained randomization in general.
‚Ä¢ We highlight
the need for a series of potential new
directions for application defenses, such as the need for
binary-compatible randomization schemes, that prevent
code inference and the use of re-randomization at strate-
gic ‚Äútrigger points.‚Äù
II. BACKGROUND AND RELATED WORK
For pedagogical reasons, we quickly review two concepts
that are key to the remainder of this paper, namely Ô¨Åne-grained
layout randomization and just-in-time code reuse attacks.
Execution i 
0x65000000: 

	












Program Memory 
Execution i + 1 
0x52000000: 

	













Program Memory 
Fig. 1. Fine-grained randomization changes the location of the gadgets present
in a code segment.
Fine-grained randomization [6, 35, 24, 47, 23, 28, 7, 19]
attempts to address well-known weaknesses [32, 22, 41, 38,
44, 26, 5] of contemporary ASLR by not only randomizing the
locations of memory regions, but also shufÔ¨Çing functions, ba-
sic blocks, instructions, registers, and even the overall structure
of code and data. The outcome of this diversiÔ¨Åcation process
is that the locations of any previously pinpointed gadgets are
arbitrarily different in each instance of the same code segment,
as illustrated in Figure 1. Even so, Snow et al. [42] showed
that Ô¨Åne-grained randomization alone, even assuming a perfect
implementation, does not prevent all control-Ô¨Çow hijacking
attacks that leverage code reuse. Consider, for instance, a
leaked code pointer that is not used to infer the location of
gadgets, but is rather used along with a memory disclosure
vulnerability to reveal the actual code bytes at the referenced
location.
As depicted in Figure 2, a just-in-time code reuse attack
uses the initially disclosed code pointer to recursively map
out as many code pages as possible in step ¬Ç. As it does
so, gadgets and system API pointers are identiÔ¨Åed, then a
ROP payload is compiled on-the-spot, during the course of
exploitation. The payload is returned to the adversary‚Äôs script
and control Ô¨Çow is hijacked to execute the payload in step ¬É.
The attack is fundamentally enabled by the adversary‚Äôs ability
to repeatedly leverage a memory disclosure to leak actual code
bytes, rather than only code pointers. In response, a number of
works have emerged that attempt to mitigate just-in-time code
reuse attacks by either (i) making code regions executable but
non-readable‚Äîthus preventing code disclosure in step ¬Ç, or
955955
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:39 UTC from IEEE Xplore.  Restrictions apply. 
(ii) allowing code to be disclosed, but preventing the execution
of that disclosed code in step ¬É.
Vulnerable Application
(w/ Ô¨Åne-grained randomization)
Adversary's 
Script
¬ñ
¬ó
Disclose
ROP Payload
JIT-ROP Script
Map Memory
Execute
ROP Payload
JIT Compile
In a JIT-ROP attack, code is disclosed to generate a ROP payload
Fig. 2.
on-the-Ô¨Çy, and then program control Ô¨Çow is redirected to execute the gadgets
of the assembled payload.
A. Preventing Code Disclosure
The approaches that attempt to stop attack progression at
step ¬Ç are, for the most part,
instantiations of the long-
standing idea of execute-only memory (XOM) [31] but ap-
plied to contemporary OSes. Backes and N¬®urnberger [3], for
example, propose an approximation of XOM by eliminating
all code-to-code pointer references‚Äîthus preventing the recur-
sive code memory mapping step of just-in-time code reuse.
To do so, a special translation table mediates all function
calls. Unfortunately, such an approach requires heavy program
instrumentation, and the necessary program transformations
are only demonstrated to be achievable given source-level
instrumentation. Additionally, Davi et al. [18] later showed
that just-in-time payloads can still be constructed even in the
absence of code-to-code pointers.
Crane et al. [16, 17], Brookes et al. [12], and Braden
et al. [11] approach the problem of execute-only memory by
starting with the requirement of source-level access. Hence,
the many challenges that arise due to computed jumps and
the intermingling of code and data in commodity (stripped)
binaries, are alleviated. Readactor [16], for example, relies on
a modiÔ¨Åed compiler to ensure that all code and data is ap-
propriately separated. Execute-only memory is then enforced
by leveraging Ô¨Åner-grained memory permission bits made