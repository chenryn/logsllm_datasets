```
关联漏洞:
`中风险-逻辑问题`
#### 2.9 【必须】函数每个分支都应有返回值
函数的每个分支都应该有返回值，否则如果函数走到无返回值的分支，其结果是未知的。
```c++
// Bad
int Foo(int bar) {
  if (bar > 100) {
    return 10;
  } else if (bar > 10) {
    return 1;
  }
}
```
上述例子当bar 100) {
    return 10;
  } else if (bar > 10) {
    return 1;
  }
  return 0;
}
```
开启适当级别的警告（GCC 中为 `-Wreturn-type` 并已包含在 `-Wall` 中）并设置为错误，可以在编译阶段发现这类错误。
关联漏洞:
`中风险-逻辑问题`
`中风险-信息泄漏`
#### 2.10 【必须】不得使用栈上未初始化的变量
在栈上声明的变量要注意是否在使用它之前已经初始化了
```c++
// Bad
void Foo() {
  int foo;
  if (Bar()) {
    foo = 1;
  }
  Foobar(foo); // foo可能没有初始化
}
```
最好在声明的时候就立刻初始化变量，或者确保每个分支都初始化它。开启相应的编译器警告（GCC 中为 `-Wuninitialized`），并把设置为错误级别，可以在编译阶段发现这类错误。
```c++
// Good
void Foo() {
  int foo = 0;
  if (Bar()) {
    foo = 1;
  }
  Foobar(foo);
}
```
关联漏洞:
`中风险-逻辑问题`
`中风险-信息泄漏`
#### 2.11  【建议】不得直接使用刚分配的未初始化的内存（如realloc）
一些刚申请的内存通常是直接从堆上分配的，可能包含有旧数据的，直接使用它们而不初始化，可能会导致安全问题。例如，CVE-2019-13751。应确保初始化变量，或者确保未初始化的值不会泄露给用户。
```c++
// Bad
char* Foo() {
  char* a = new char[100];
  a[99] = '\0';
  memcpy(a, "char", 4);
  return a;
}
```
```c++
// Good
char* Foo() {
  char* a = new char[100];
  memcpy(a, "char", 4);
  a[4] = '\0';
  return a;
}
```
在 C++ 中，再次强烈推荐用 `string`、`vector` 代替手动内存分配。
关联漏洞:
`中风险-逻辑问题`
`中风险-信息泄漏`
#### 2.12 【必须】校验内存相关函数的返回值
与内存分配相关的函数需要检查其返回值是否正确，以防导致程序崩溃或逻辑错误。
```c++
// Bad
void Foo() {
  char* bar = mmap(0, 0x800000, .....);
  *(bar + 0x400000) = '\x88'; // Wrong
}
```
如上例mmap如果失败，bar的值将是0xffffffff (ffffffff)，第二行将会往0x3ffffff写入字符，导致越界写。
```c++
// Good
void Foo() {
  char* bar = mmap(0, 0x800000, .....);
  if(bar == MAP_FAILED) {
    return;
  }
  *(bar + 0x400000) = '\x88';
}
```
关联漏洞:
`中风险-逻辑问题`
`高风险-越界操作`
#### 2.13 【必须】不要在if里面赋值
if里赋值通常代表代码存在错误。
```c++
// Bad
void Foo() {
  if (bar = 0x99) ...
}
```
通常应该是：
```c++
// Good
void Foo() {
  if (bar == 0x99) ...
}
```
建议在构建系统中开启足够的编译器警告（GCC 中为 `-Wparentheses` 并已包含在 `-Wall` 中），并把该警告设置为错误。
关联漏洞:
`中风险-逻辑问题`
#### 2.14 【建议】确认if里面的按位操作
if里，非bool类型和非bool类型的按位操作可能代表代码存在错误。
```c++
// Bad
void Foo() {
  int bar = 0x1;     // binary 01
  int foobar = 0x2;    // binary 10
  if (foobar & bar)     // result = 00, false
    ...
}
```
上述代码可能应该是：
```c++
// Good
void foo() {
  int   bar = 0x1;
  int foobar = 0x2;
  if (foobar && bar)  // result : true
    ...
}
```
关联漏洞:
`中风险-逻辑问题`
### 3    多线程
#### 3.1  【必须】变量应确保线程安全性
当一个变量可能被多个线程使用时，应当使用原子操作或加锁操作。
```c++
// Bad
char  g_somechar;
void foo_thread1() {
  g_somechar += 3;
}
void foo_thread2() {
  g_somechar += 1;
}
```
对于可以使用原子操作的，应当使用一些可以确保内存安全的操作，如：
```c++
// Good
volatile char g_somechar;
void foo_thread1() {
  __sync_fetch_and_add(&g_somechar, 3);
}
void foo_thread2() {
  __sync_fetch_and_add(&g_somechar, 1);
}
```
对于 C 代码，`C11` 后推荐使用 [atomic](https://en.cppreference.com/w/c/atomic) 标准库。
对于 C++代码，`C++11` 后，推荐使用 [`std::atomic`](https://zh.cppreference.com/w/cpp/atomic/atomic)。
关联漏洞:
`高风险-内存破坏`
`中风险-逻辑问题`
#### 3.2 【必须】注意signal handler导致的条件竞争
竞争条件经常出现在信号处理程序中，因为信号处理程序支持异步操作。攻击者能够利用信号处理程序争用条件导致软件状态损坏，从而可能导致拒绝服务甚至代码执行。
1. 当信号处理程序中发生不可重入函数或状态敏感操作时，就会出现这些问题。因为信号处理程序中随时可以被调用。比如，当在信号处理程序中调用`free`时，通常会出现另一个信号争用条件，从而导致双重释放。即使给定指针在释放后设置为`NULL`，在释放内存和将指针设置为`NULL`之间仍然存在竞争的可能。
2. 为多个信号设置了相同的信号处理程序，这尤其有问题——因为这意味着信号处理程序本身可能会重新进入。例如，malloc()和free()是不可重入的，因为它们可能使用全局或静态数据结构来管理内存，并且它们被syslog()等看似无害的函数间接使用；这些函数可能会导致内存损坏和代码执行。
```c++
// Bad
char *log_message;
void Handler(int signum) {
  syslog(LOG_NOTICE, "%s\n", log_m_essage);
  free(log_message);
  sleep(10);
  exit(0);
}
int main (int argc, char* argv[]) {
  log_message = strdup(argv[1]);
  signal(SIGHUP, Handler);
  signal(SIGTERM, Handler);
  sleep(10);
}
```
可以借由下列操作规避问题：
1. 避免在多个处理函数中共享某些变量。
2. 在信号处理程序中使用同步操作。
3. 屏蔽不相关的信号，从而提供原子性。
4. 避免在信号处理函数中调用不满足[异步信号安全](https://www.man7.org/linux/man-pages/man7/signal-safety.7.html)的函数。
关联漏洞:
`高风险-内存破坏`
`中风险-逻辑问题`
#### 3.3 【建议】注意Time-of-check Time-of-use (TOCTOU) 条件竞争
TOCTOU： 软件在使用某个资源之前检查该资源的状态，但是该资源的状态可以在检查和使用之间更改，从而使检查结果无效。当资源处于这种意外状态时，这可能会导致软件执行错误操作。
当攻击者可以影响检查和使用之间的资源状态时，此问题可能与安全相关。这可能发生在共享资源(如**文件、内存**，甚至多线程程序中的**变量**)上。在编程时需要注意避免出现TOCTOU问题。
例如，下面的例子中，该文件可能已经在检查和lstat之间进行了更新，特别是因为printf有延迟。
```c++
struct stat *st;
lstat("...", st);
printf("foo");
if (st->st_mtimespec == ...) {
  printf("Now updating things\n");
  UpdateThings();
}
```
TOCTOU难以修复，但是有以下缓解方案：
1. 限制对来自多个进程的文件的交叉操作。
2. 如果必须在多个进程或线程之间共享对资源的访问，那么请尝试限制”检查“（CHECK）和”使用“（USE）资源之间的时间量，使他们相距尽量不要太远。这不会从根本上解决问题，但可能会使攻击更难成功。
3. 在Use调用之后重新检查资源，以验证是否正确执行了操作。
4. 确保一些环境锁定机制能够被用来有效保护资源。但要确保锁定是检查之前进行的，而不是在检查之后进行的，以便检查时的资源与使用时的资源相同。
关联漏洞:
`高风险-内存破坏`
`中风险-逻辑问题`
### 4    加密解密
#### 4.1  【必须】不得明文存储用户密码等敏感数据
用户密码应该使用 Argon2, scrypt, bcrypt, pbkdf2 等算法做哈希之后再存入存储系统, https://password-hashing.net/
https://libsodium.gitbook.io/doc/password_hashing/default_phf#example-2-password-storage
用户敏感数据，应该做到传输过程中加密，存储状态下加密
传输过程中加密，可以使用 HTTPS 等认证加密通信协议
存储状态下加密，可以使用 SQLCipher 等类似方案。
#### 4.2  【必须】内存中的用户密码等敏感数据应该安全抹除
例如用户密码等，即使是临时使用，也应在使用完成后应当将内容彻底清空。
错误：
```c++
#include 
#include 
    {
        ...
        string user_password(100, '\0');
        snprintf(&user_password, "password: %s", user_password.size(), password_from_input);
        ...
    }
```
正确：
```c++
    {
        ...
        string user_password(100, '\0');
        snprintf(&user_password, "password: %s", user_password.size(), password_from_input);
        ...
        OPENSSL_cleanse(&user_password[0], user_password.size());
    }
```
关联漏洞:
`高风险-敏感信息泄露`
#### 4.3  【必须】rand() 类函数应正确初始化
rand类函数的随机性并不高。而且在使用前需要使用srand()来初始化。未初始化的随机数可能导致某些内容可预测。
```c++
// Bad
int main() {
  int foo = rand();
  return 0;