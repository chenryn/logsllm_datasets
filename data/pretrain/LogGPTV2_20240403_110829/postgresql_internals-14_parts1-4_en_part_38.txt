19.3 IndexingEngineInterface
includesthepartitionkey). Inthiscase,theglobaluniquenessisensuredby
localuniqueindexesofeachpartition,asdifferentpartitionscannothavethe
samepartitionkeys.
CMC Theabilitytobuildamulticolumnindex.1
Amulticolumn index can speed up search by several conditions imposed on
differenttablecolumns. Forexample,theticket_flightstablehasacomposite
primarykey,sothecorrespondingindexisbuiltonmorethanonecolumn:
=> \d ticket_flights_pkey
Index "bookings.ticket_flights_pkey"
Column | Type | Key? | Definition
−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−+−−−−−−−−−−−−
ticket_no | character(13) | yes | ticket_no
flight_id | integer | yes | flight_id
primary key, btree, for table "bookings.ticket_flights"
Aflightsearchbyaticketnumberandaflightisperformedusinganindex:
=> EXPLAIN (costs off)
SELECT * FROM ticket_flights
WHERE ticket_no = '0005432001355'
AND flight_id = 51618;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Scan using ticket_flights_pkey on ticket_flights
Index Cond: ((ticket_no = '0005432001355'::bpchar) AND
(flight_id = 51618))
(3 rows)
As a rule,a multicolumn index can speed up search even if filter conditions
involve only some of its columns. In the case of a -tree,the search will be
efficient if the filter condition spans a range of columns that appear first in
theindexdeclaration:
=> EXPLAIN (costs off)
SELECT *
FROM ticket_flights
WHERE ticket_no = '0005432001355';
1 postgresql.org/docs/14/indexes-multicolumn.html
367
Chapter19 IndexAccessMethods
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Scan using ticket_flights_pkey on ticket_flights
Index Cond: (ticket_no = '0005432001355'::bpchar)
(2 rows)
Inallothercases(forexample,iftheconditionincludesonlyflights_id),search
will be virtually limited to the initial columns (if the query includes the cor-
respondingconditions),whileotherconditionswillonlybeusedtofilterout
thereturnedresults.Indexesofothertypesmaybehavedifferentlythough.
CE Supportforconstraints.1
Anconstraintguaranteesthataconditiondefinedbyanoperatorwill
not be satisfied for any pair of table rows. To impose this constraint, Post-
gre automatically creates an index; there must be an operator class that
containstheoperatorusedintheconstraint’scondition.
It is the intersection operator && that usually serves this purpose. For in-
stance,youcanuseittoexplicitlydeclarethataconferenceroomcannotbe
bookedtwiceforthesametime,orthatbuildingsonamapcannotoverlap.
Withtheequalityoperator,theexclusionconstrainttakesonthemeaningof
uniqueness: the table is forbidden to have two rows with the same key val-
ues. Nevertheless,itisnotthesameasaconstraint: inparticular,the
exclusionconstraintkeycannotbereferredtofromforeignkeys,andneither
canitbeusedintheclause.
v. CI Theabilitytoaddnon-keycolumnstoanindex,whichmakethisindex
p. covering.
Usingthisproperty,youcanextendauniqueindexwithadditionalcolumns.
Suchanindexstillguaranteesthatallthekeycolumnvaluesareunique,while
dataretrievalfromtheincludedcolumnsincursnoheapaccess:
=> CREATE UNIQUE INDEX ON flights(flight_id) INCLUDE (status);
=> EXPLAIN (costs off)
SELECT status FROM flights
WHERE flight_id = 51618;
1 postgresql.org/docs/14/ddl-constraints#DDL-CONSTRAINTS-EXCLUSION.html
368
19.3 IndexingEngineInterface
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Only Scan using flights_flight_id_status_idx on flights
Index Cond: (flight_id = 51618)
(2 rows)
IndexProperties
Herearethepropertiesrelatedtoanindex(shownforanexistingone):
=> SELECT p.name, pg_index_has_property('seats_pkey', p.name)
FROM unnest(array[
'clusterable', 'index_scan', 'bitmap_scan', 'backward_scan'
]) p(name);
name | pg_index_has_property
−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−
clusterable | t
index_scan | t
bitmap_scan | t
backward_scan | t
(4 rows)
C Theabilitytophysicallymoveheaptuplesinaccordancewiththeor-
derinwhichtheirsarereturnedbyanindexscan. p.
Thispropertyshowswhetherthecommandissupported.
IS Indexscansupport. p.
This property implies that the access method can return s one by one.
Strangeasitmayseem,someindexesdonotprovidethisfunctionality.
BS Bitmapscansupport. p.
This property defines whether the access method can build and return a
bitmapofallsatonce.
BS The ability to return results in reverse order as compared to the
onespecifiedatindexcreation.
Thispropertymakessenseonlyiftheaccessmethodsupportsindexscans.
369
Chapter19 IndexAccessMethods
Column Properties
Andfinally,let’stakealookatthecolumnproperties:
=> SELECT p.name,
pg_index_column_has_property('seats_pkey', 1, p.name)
FROM unnest(array[
'asc', 'desc', 'nulls_first', 'nulls_last', 'orderable',
'distance_orderable', 'returnable', 'search_array', 'search_nulls'
]) p(name);
name | pg_index_column_has_property
−−−−−−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
asc | t
desc | f
nulls_first | f
nulls_last | t
orderable | t
distance_orderable | f
returnable | t
search_array | t
search_nulls | t
(9 rows)
A,D,NF,NL Orderingcolumnvalues.
Thesepropertiesdefinewhethercolumnvaluesshouldbestoredinascending
p. or descending order,and whether  values should appear before or after
regularvalues.Allthesepropertiesareapplicableonlyto-trees.
O Theability tosortcolumnvaluesusingtheclause.
Thispropertyisapplicableonlyto-trees.
p. DO Supportfororderingoperators.1
Unlike regular indexing operators that return logical values,ordering opera-
torsreturnarealnumberthatdenotesthe“distance”fromoneargumentto
another. Indexessupportsuchoperatorsspecifiedintheclauseofa
query.
For example, the ordering operator  can find the airports located at the
shortestdistancetothespecifiedpoint:
1 postgresql.org/docs/14/xindex#XINDEX-ORDERING-OPS.html
370
19.3 IndexingEngineInterface
=> CREATE INDEX ON airports_data USING gist(coordinates);
=> EXPLAIN (costs off)
SELECT * FROM airports
ORDER BY coordinates  point (43.578,57.593)
LIMIT 3;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Limit
−> Index Scan using airports_data_coordinates_idx on airpo...
Order By: (coordinates  '(43.578,57.593)'::point)
(3 rows)
R Theabilitytoreturndatawithoutaccessingthetable(index-onlyscan p.
support).
This property defines whether an index structure allows retrieving indexed
values. It is not always possible: for example,some indexes may store hash
codesratherthanactualvalues.Inthiscase,theCIpropertywillnot
beavailableeither.
SA Supportforsearchingseveralelementsinanarray.
Anexplicituseofarraysisnottheonlycasewhenitmightbenecessary. For
example,theplannertransformsthe(list)expressionintoanarrayscan:
=> EXPLAIN (costs off)
SELECT * FROM bookings
WHERE book_ref IN ('C7C821', 'A5D060', 'DDE1BB');
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Scan using bookings_pkey on bookings
Index Cond: (book_ref = ANY
('{C7C821,A5D060,DDE1BB}'::bpchar[]))
(3 rows)
Iftheindexmethoddoesnotsupportsuchoperators,theexecutormayhaveto
performseveraliterationstofindparticularvalues(whichcanmaketheindex
scanlessefficient).
SN Searchforandconditions.
Shouldweindexvalues? Ontheonehand,itallowsustoperformindex
scansforconditionslike [] ,aswellasusetheindexasacovering
371
Chapter19 IndexAccessMethods
one if no filter conditions are provided (in this case,the index has to return
thedataofalltheheaptuples,includingthosethatcontainvalues).But
ontheotherhand,skippingvaluescanreducetheindexsize.
Thedecisionremainsatthediscretionofaccessmethoddevelopers,butmore
oftenthannotvaluesdogetindexed.
Ifyoudonotneedvaluesinanindex,youcanexcludethembybuilding
apartialindex1thatcoversonlythoserowsthatarerequired.Forexample:
=> CREATE INDEX ON flights(actual_arrival)
WHERE actual_arrival IS NOT NULL;
=> EXPLAIN (costs off)
SELECT * FROM flights
WHERE actual_arrival = '2017-06-13 10:33:00+03';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Scan using flights_actual_arrival_idx on flights
Index Cond: (actual_arrival = '2017−06−13 10:33:00+03'::ti...
(2 rows)
A partial index is smaller than the full one, and it gets updated only if the
modifiedrowisindexed,whichcansometimesleadtotangibleperformance
gains. Obviously,apart from  checks,the clause can provide any
condition(thatcanbeusedwithimmutablefunctions).
The ability to build partial indexes is provided by the indexing engine,so it
doesnotdependontheaccessmethod.
Naturally,theinterfaceincludesonlythosepropertiesofindexmethodsthatmust
beknowninadvanceforacorrectdecisiontobetaken. Forexample,itdoesnot
listanypropertiesthatenablesuchfeaturesassupportforpredicatelocksornon-
blockingindexcreation().Suchpropertiesaredefinedinthecodeof
thefunctionsthatimplementtheinterface.
1 postgresql.org/docs/14/indexes-partial.html
372
20
Index Scans
20.1 Regular Index Scans
Therearetwobasicwaysofaccessingsprovidedbyanindex. Thefirstoneis
toperformanindexscan. Mostoftheindexaccessmethods(butnotallofthem)
havetheISpropertytosupportthisoperation. p.
IndexscansarerepresentedintheplanbytheIndexScan1node:
=> EXPLAIN SELECT * FROM bookings
WHERE book_ref = '9AC0C6' AND total_amount = 48500.00;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Index Scan using bookings_pkey on bookings
(cost=0.43..8.45 rows=1 width=21)
Index Cond: (book_ref = '9AC0C6'::bpchar)
Filter: (total_amount = 48500.00)
(4 rows)
During anindexscan,the accessmethod returns sone byone.2 Uponreceiv-
inga,theindexingengineaccessestheheappagethisrefersto,getsthe
correspondingtuple,and,ifthevisibilityrulesaremet,returnstherequestedset
offieldsofthistuple. Thisprocesscontinuesuntiltheaccessmethodrunsoutof
sthatmatchesthequery.
TheIndexCondlineincludesonlythosefilterconditionsthatcanbecheckedusing
anindex. Otherconditionsthathavetoberecheckedagainsttheheaparelisted
separatelyintheFilterline.
1 backend/executor/nodeIndexscan.c
2 backend/access/index/indexam.c,index_getnext_tidfunction
373
Chapter20 IndexScans
As this example shows, both index and heap access operations are handled by a
common Index Scan node rather by two different ones. But there is also a sepa-
rateTid Scannode,1 whichfetchestuplesfromtheheapiftheirsareknownin
advance:
=> EXPLAIN SELECT * FROM bookings WHERE ctid = '(0,1)'::tid;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Tid Scan on bookings (cost=0.00..4.01 rows=1 width=21)
TID Cond: (ctid = '(0,1)'::tid)
(2 rows)
Cost Estimation
Cost estimation of an index scan comprises the estimated costs of index access
operationsandheappagereads.
Obviously,theindex-relatedpartoftheestimationfullydependsontheparticular
access method. For -trees, the cost is mostly incurred by fetching index pages
and processing their entries. The number of pages and rows to be read can be
p. determined by the total volume of data and the selectivity of the applied filters.
Index pages are accessed at random (pages that follow each other in the logical
structurearephysicallyscatteredondisk). Theestimationisfurtherincreasedby
resourcesspentongettingfromtheroottotheleafnodeandcomputingall
therequiredexpressions.2
Theheap-relatedpartoftheestimationincludesthecostofheappageaccessand
the  time required to process all the fetched tuples. It is important to note
that/estimationdependsonboththeindexscanselectivityandthecorrelation
between the physical order of tuples on disk and the order in which the access
methodreturnstheirs.
1 backend/executor/nodeTidscan.c
2 backend/utils/adt/selfuncs.c,btcostestimatefunction
postgresql.org/docs/14/index-cost-estimation.html
374
20.1 RegularIndexScans
Good Scenario: High Correlation
Ifthephysicalorderoftuplesondiskhasaperfectcorrelationwiththelogicalorder
ofsintheindex,eachpagewillbeaccessedonlyonce: theIndexScannodewill
sequentiallygofromonepagetoanother,readingthetuplesonebyone.
heap
page
atuple
matching
filterconditions
Postgrecollectsstatisticsoncorrelation: p.
=> SELECT attname, correlation
FROM pg_stats WHERE tablename = 'bookings'
ORDER BY abs(correlation) DESC;
attname | correlation
−−−−−−−−−−−−−−+−−−−−−−−−−−−−−
book_ref | 1
total_amount | 0.0026738467
book_date | 8.02188e−05
(3 rows)
The correlation is high if the corresponding absolute value is close to one (like
in the case of book_ref); values that are close to zero are a sign of chaotic data
distribution.
Inthisparticularcase,highcorrelationinthebook_refcolumnisofcourseduetothefact
that the data has been loaded into the table in ascending order based on this column,
andtherehavebeennoupdatesyet. Wewouldseethesamepictureifweexecutedthe
commandfortheindexcreatedonthiscolumn.
375
Chapter20 IndexScans
However,theperfectcorrelationdoesnotguaranteethatallquerieswillbereturningre-
sultsinascendingorderofbook_refvalues.Firstofall,anyrowupdatemovestheresulting
tupletotheendofthetable.Second,theplanthatreliesonanindexscanbasedonsome
othercolumnreturnstheresultsinadifferentorder.Andevenasequentialscanmaynot
p. startatthebeginningofthetable.Soifyouneedaparticularorder,youshouldexplicitly
defineitintheclause.