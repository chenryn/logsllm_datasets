s44-s54". 
To avoid the problem of path length explosion, IFDS does 
not analyze the S period yet still achieves good accuracy. How-
ever, further monitoring of the S period is beneficial. If there is 
a leakage path that includes an S period, it will cause false neg-
atives in the IFDS. The use of an over-accurate STA algorithm 
for the S period can easily lead to excessive overhead because 
q0
q1
...
q2
...
qi
...
qn
Take Input
Push or Pop
Finite control unit
σ1
σ2
σ3 σ4
...
Input Tape
(Sequence of executed monitoring points )
Fig. 6.  Path control Automaton 
...
S
P
P
N
Stack
STA has difficulty in determining the number of loop executions 
in the S period. Thus, a more effective and reasonable method is 
required to solve this problem. Before the execution enters into 
the  S  period  of  a  loop,  it  has  experienced  the  P  period  and 
reached the maximum taint state by taint accumulation. Thus, to 
maintain the maximum taint state of the loop, the repetitive ex-
ecution of the same code segment of a loop in the S period often 
tends to be stable. In practice, the code in the loops may be re-
petitive  logical  behaviors,  such  as  scientific  calculation,  file 
reading, and writing, etc. The execution of the path usually does 
not  change  the  final  propagation  state  of  the  P  period.  Thus, 
these paths are still valid but have no role in propagation. In most 
cases, to ensure safety, FSAFlow continues to monitor the stable 
period, and only monitors the key branch nodes to ensure per-
formance and correctness, as shown in Table III. In a few cases, 
a false positive judgment may occur during the S period. Then, 
this path’s monitoring policy is revised to reduce the false posi-
tive judgments by no longer monitoring its stable period.  
FSAFlow  implements  the  control  of  the  path  based  on  a 
pushdown automaton, which is an extension of the finite-state 
automaton and is composed of a state controller, an input, and 
a stack. As shown in Figure 6, given a path path output by static 
analysis  and  assuming  its  length  is  N,  at  runtime  the  corre-
sponding automaton is formally expressed as M=(Q,Σ,Γ,δ,q0,F), 
where:  
1) Q is a finite set of states. Each node i on the path corre-
sponds to a state qi(i>0). q0 corresponds to the inactive state of 
the path; q1 corresponds to the source node; qn corresponds to 
the sink node. 
2) Σ: 2{0,1,…,N}×TYPE×LID is the input alphabet. Each input 
symbol corresponds to a monitoring point of FSAFlow, and the 
input sequence represents the sequence execution of monitoring 
points for program execution. The input symbol σ is composed 
of  a  tuple (SNs,type,lid).  SNs∈2{0,1,…,N}  is  the  set  of  allowed 
node  numbers  corresponding  to  the  monitoring  point.  Each 
node qi(i>0) on the path is assigned a node number i in sequence. 
In a special case, SNs={0} indicates that the monitoring point 
the location of the monitoring point. in/out/x respectively indi-
cate  that  the  monitoring  point  is  an  entry/exit  point  of  loop 
structure and other types. lid represents the identification of the 
loop structure. If type=x, then lid=-1. 
is on the non-target branch path. type∈{in,out,x} is the type of 
3) Γ: Period×LID is the stack alphabet. Stack is a “last in, 
(N), loop propagation period (P), and loop stable period (S). 𝐿𝐿𝐼𝐼𝐼𝐼 
is the set of IDs of the loop. For a stack symbol γ= (period, lid), 
first out” storage device that records the corresponding execu-
tion  period  of  a  loop  when  executing  nested  loops.  Period: 
{N,P,S} respectively represent the forward propagation period 
4) δ: Q×Σ×Γ→Q×Γ is  the  transition  function.  According 
to the current state, if the current input and the symbol are at the 
top of the stack, the next action of M is determined, including 
the state transition, and the Push or Pop operation.  
if period=N, then lid=-1.  
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:26 UTC from IEEE Xplore.  Restrictions apply. 
2119
TABLE Ⅰ.  TRANSITION FUNCTION OF M 
Rule  State 
1 
2 
3 
q0 
(N>i>0) 
qi 
4 
5 
6 
7 
8 
9 
10 
11 
12 
Inputa 
satisfying i+1∈SNs 
or  
satisfying i+1∈SNs 
 satisfying 
i+1∈SNs, lid ≠lid   
satisfying i+1∈SNs 
satisfying i+1∉SNs 
 or  
satisfying lid≠ lid 
other 
Stacka 
empty 
top: 
qi+1 
qi+1 
Output/Action 
State 
Stack 
q1 
qi+1 
push(N,-1) 
pop(); 
pop(); 
qi+1  push(P, lid ) 
qi+1  push(P, lid ) 
push(S, lid) 
a. - = wildcard 
qi 
qi  push(S, lid ) 
qi 
q0  Clear stack 
pop(); 
qi+1 
 or   q0  Clear stack 
else if (stack[top].phase==P && path.state+1∉{2,3,4}) 
①/*---- Monitor point of source---------------------------*/
path.state=1;        //Variable Path records path state,
push(N);             //stack operations are performed on Variable stack.
②/*---- Monitor point of branch entering a loop-----------*/
if (stack[top].phase!=S && path.state+1∈{2,3,4})
     path.state++; 
     if(stack[top].phase==N)     //forward propagation period(N),
        stack[top]=P;           //loop propagation period(P)
        stack[top]=S;          //loop stable period(S)
        path.state++; 
     else                      /*Here, there is only one loop on the path,
        clear(stack);             and our simplified code does 
        path.state=0;            not distinguish the loop ID.*/
③/*-----Monitor point of branch exiting a loop-------------*/
if (stack[top].phase!=S && paths.state+1∈{5})
     Pop; paths.state++;
else if (stack[top].phase==S)
        pop;
     else 
        clear(stack);
        path.state=0;
④/*-----Monitor point of sink------------------------------*/
c=0; sendMessage("Warnning: FSAFlow:…information leak…");
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
Fig. 7.  Code instrumentation 
not activated.  
5) q0∈Q is the initial state, which indicates that the path is 
6) F:{q0, qn}⊆Q is the set of accepting states.  
The transition function of M is listed in Table Ⅰ. M starts 
from the state q0 and the empty stack. After the source statement 
is executed, it reaches the q1 state and enters the N period. Dur-
ing the N period, when a branch jump such as If/Switch is en-
countered,  the  state  will  be  updated  one  step  forward  if  the 
jumping  target  points  to  the  next  node  in  path;  when  a 
While/For loop is encountered, M will enter the P period, and 
the state is updated one step forward if both the jumping target 
and the target path point must enter the loop body. During the 
P period, when a branch jump is encountered, the state will be 
updated one step forward if the jumping target points to the next 
node in path; otherwise, M will enter the S period if the branch 
jump enters the loop body again while the next node in path 
points to the loop exit branch. In this case, it is indicated that 
the program should continue to execute the loop body after the 
execution reaches the path’s maximum value of taint propaga-
tion. During the S period, the branch that does not jump from 
the loop body is continuously monitored, and the path state re-
mains  unchanged.  When  a  branch  that  jumps  from  the  loop 
body is encountered, M will pop up the stack and restore the last 
period indicated by the stack as the current period. Then, it con-
tinues tracking and monitoring according to different period re-
quirements. During the P or S period, loop nesting will occur if 
M  determines  to  enter  a  different  loop  by  distinguishing  the 
loop ID. In this case, new period information will be pushed 
into the stack, and the assignment of the new period remains 
that of the current period. If other situations are encountered, M 
will return to the q0 state and clear the stack.  
FSAFlow exploits global variables to record the execution 
states and the stack of all supervised paths. As shown in Figure 
1, the example has four monitoring points. The main control 
codes of these monitoring points are shown in Figure 7.  
If the execution reaches the corresponding monitoring point 
of the sink, FSAFlow will check whether the execution matches 
the required state. If so, FSAFlow will limit the execution of 
the sink. If the intercepted sensitive data are numeric, they are 
assigned the value 0. If the intercepted sensitive data are char-
acter data, the character is first replaced with the ASCII code 
for 0. To prevent covert communication by using the length of 
sensitive  data,  the  random  number  generation  API  is  further 
called  to  determine  the  length  of  cleared  character  data  ran-
domly. This confuses potential eavesdroppers, rendering it dif-
ficult to determine if the received information is truly sensitive 
and from their partners. Finally, to avoid affecting the normal 
functioning of the program, the purified data is passed to the 
sink point for execution. Moreover, the users will be notified 
that information has been intercepted, as shown in Figure 8 (c). 
To prevent attackers from removing path monitoring code from 
an app by upgrading the software, FSAFlow records the finger-
print of each app’s executable file. FSAFlow will always first 
check whether the fingerprint has changed before an app runs. 
If it has changed, the user must re-apply for the app’s path mon-
itoring. Furthermore, to prevent attackers from escaping detec-
tion through complex reflections, we will adopt a strict taint-
sensitive policy: if any input parameters are tainted, all output 
parameters in the reflections will be tainted. This taint propaga-
tion policy is relatively strict, but it may be the best practical 
approach to prevent attacks.  
As  concerns  the  tracking  of  native  calls,  similar  to 
FlowDroid, FSAFlow directly updates the taint state of the pa-
rameter variables of the call by following predefined propaga-
tion rules, rather than entering the native call body to continue 
the analysis. This reduces the difficulty of path control in track-
ing. Accordingly, the internal statements of the native method 
will not be recorded on the path. FSAFlow can still monitor the 
path by setting monitoring points at branch statements without 
additional processing. 
E.  Implementation 
The  completion  of  each  step  in  the  FSAFlow  system  is 
shown in Figure 8. The interaction between the client and server 
adopts the WebSocket protocol and full-duplex mode to enhance 
the stability and availability of the system. 
The cloud server was written in Java, JDK 1.8. The static 
path analysis module was developed by modifying more than 
2000 lines of FlowDroid code. The path monitoring instrumen-
tation framework of FSAFlow was developed on the SOOT plat-
form,  where  the  intermediate  representation  of  the  3-address 
code provided by Jimple, and the accurate call graph analysis 
framework lay an important foundation for the FSAFlow system. 
Meanwhile, the Dexpler plugin and Heros framework were also 
used. The client apps can run on the latest version of Android, 
which is downward compatible with Android 4.0 and above.  
Figure  8(a)  illustrates  the  user-defined  information  flow-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:26 UTC from IEEE Xplore.  Restrictions apply. 
2120
(a)
(b)
(c)
(d)
Fig. 8.  Components of FSAFlow 
(f)
(e)
are managed through synchronized monitoring functions. Calls 
to  these  functions  are  multithreading-safe.  FSAFlow's  static 
analysis is implemented on the modified FlowDroid. FlowDroid 
itself  partially  supports  multithreading  analysis,  including 
AsyncTask/Java's  normal  threading/Java's  Runnable  mecha-
nisms.  Should  the  improvement  to  FlowDroid  support  more 
multithreading mechanisms, such as Java's Executor mechanism, 
FSAFlow would provide full multithreading support. 
Implicit  flows:  Untrusted  programs  can  launder  taint 
through implicit flows [63] [64], which poses a greater chal-
lenge to privacy protection. Similar to FlowDroid, FSAFlow 
cannot analyse implicit flows through table lookups. For im-
plicit flows through control dependencies, pure DTA systems 
may incur significant performance overhead due to the lack of 
comprehensive  branch  structure  information  [30].  Although 
both our evaluations and the analysis of the IFDS algorithm in 
Section V-B-3) show that the performance of FSAFlow is not 
significantly affected in most cases, there remain a few where 
large-scale implicit flows can be identified, and solutions must 
still be developed. For how to decide whether an implicit flow 
is a true violation, FSAFlow comes to a decision according to 
the user-defined policies,  avoiding  the difficulties  in  judging 
the code among benign and malicious cases. All information 
flows, including implicit information flows, from a source to a 
sink  that  are  prohibited  by  the  user  will  be  prevented  by 
FSAFlow.  
In general, implicit flows (as well as reflection and native 
code) remain major problems, however, our solution to implicit 
flow control caters mostly to benign code that is written so as 
to avoid such complicating constructs. For instance, a developer 
may vouch for a program's trustworthiness by indicating that it 
is fit for FSAFlow. Future work will attempt to analyze the spe-
cific characteristics and behaviors of malicious implicit flows 
for reducing misjudgment.  
IV.  FUNCTION & COMPLEXITY ANALYSIS 
This section reports on the theoretical analysis conducted to 
prove  that  FSAFlow  can  perform  correct  instruction  tracking 
and it is more efficient than the classic DTA system. 
A.  Function Analysis 
For ease of description, a definition is presented as follows: 
Definition 1 (Basic block) Basic block refers to a sequence 
of statements executed sequentially in a program with only one 
entry and one exit. The entry is the first statement and the exit is 
the last statement.  
path management interface of FSAFlow. The function of select-
ing  the  target  APK  file  and  selecting  the  information  flow 
source node and sink node has been realized. After being sub-
mitted to the cloud server for processing, as shown in Figure 