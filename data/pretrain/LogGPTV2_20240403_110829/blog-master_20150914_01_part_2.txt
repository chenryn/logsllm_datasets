scaling factor: 1  
query mode: prepared  
number of clients: 20  
number of threads: 20  
duration: 60 s  
number of transactions actually processed: 1217195  
latency average: 0.973 ms  
latency stddev: 3.563 ms  
tps = 20283.314001 (including connections establishing)  
tps = 20490.143363 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002703        \setrandom id 1 1  
        0.970209        select f(:id);  
postgres=# select * from pg_stat_all_tables where relname='t1';  
-[ RECORD 1 ]-------+-------  
relid               | 184731  
schemaname          | public  
relname             | t1  
seq_scan            | 0  
seq_tup_read        | 0  
idx_scan            | 75927  
idx_tup_fetch       | 75927  
n_tup_ins           | 0  
n_tup_upd           | 75927  
n_tup_del           | 0  
n_tup_hot_upd       | 75902  
n_live_tup          | 0  
n_dead_tup          | 962  
n_mod_since_analyze | 75927  
last_vacuum         |   
last_autovacuum     |   
last_analyze        |   
last_autoanalyze    |   
vacuum_count        | 0  
autovacuum_count    | 0  
analyze_count       | 0  
autoanalyze_count   | 0  
```  
除了吞吐率的提升，我们其实还看到真实的处理数（更新次数）也有提升，所以不仅仅是降低了等待延迟，实际上也提升了处理能力。  
最后提供一个物理机上的数据参考，使用128个并发连接，同时对一条记录进行更新：  
不做任何优化的并发处理能力：  
```  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 128  
number of threads: 128  
duration: 100 s  
number of transactions actually processed: 285673  
latency average: 44.806 ms  
latency stddev: 45.751 ms  
tps = 2855.547375 (including connections establishing)  
tps = 2855.856976 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002509        \setrandom id 1 1  
        44.803299       update t1 set info=now()::text where id=:id;  
```  
使用for update nowait的并发处理能力：  
```  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 128  
number of threads: 128  
duration: 100 s  
number of transactions actually processed: 6663253  
latency average: 1.919 ms  
latency stddev: 2.804 ms  
tps = 66623.169445 (including connections establishing)  
tps = 66630.307999 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.001934        \setrandom id 1 1  
        1.917297        select f1(:id);  
```  
使用advisory lock后的并发处理能力：  
```  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 80  
number of threads: 80  
duration: 60 s  
number of transactions actually processed: 13883387  
latency average: 0.344 ms  
latency stddev: 0.535 ms  
tps = 231197.323122 (including connections establishing)  
tps = 231376.427515 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.344042        select f(1);  
```  
此时的perf top  
```     
   PerfTop:   23883 irqs/sec  kernel:32.2%  exact:  0.0% [1000Hz cycles],  (all, 32 CPUs)  
--------------------------------------------------------------------------------       
 samples  pcnt function         DSO  
 _______ _____ ____________________________ ______________________________________________  
10645.00  3.5% GetSnapshotData  /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 7963.00  2.6% AllocSetAlloc    /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 4720.00  1.6% _int_malloc      /lib64/libc-2.12.so     
 4270.00  1.4% __schedule       [kernel.kallsyms]       
 4234.00  1.4% fmgr_info_cxt_security       /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 4217.00  1.4% LWLockAcquire    /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 3958.00  1.3% hash_search_with_hash_value  /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 3656.00  1.2% __GI_vfprintf    /lib64/libc-2.12.so     
 3572.00  1.2% update_blocked_averages      [kernel.kallsyms]       
 3338.00  1.1% PostgresMain     /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 3267.00  1.1% __switch_to      [kernel.kallsyms]       
 3095.00  1.0% __strlen_sse42   /lib64/libc-2.12.so     
 2996.00  1.0% memcpy           /lib64/libc-2.12.so     
 2930.00  1.0% _int_free        /lib64/libc-2.12.so     
 2568.00  0.8% LWLockRelease    /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 2446.00  0.8% SearchCatCache   /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 2178.00  0.7% ExecInitExpr     /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 2053.00  0.7% hash_any         /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 2035.00  0.7% __GI___libc_malloc           /lib64/libc-2.12.so     
 2009.00  0.7% _raw_spin_lock_irqsave       [kernel.kallsyms]       
 1804.00  0.6% exec_stmt        /u02/digoal/soft_bak/pgsql9.5/lib/plpgsql.so    
 1764.00  0.6% __memset_sse2    /lib64/libc-2.12.so     
 1717.00  0.6% pqParseInput3    /u02/digoal/soft_bak/pgsql9.5/lib/libpq.so.5.8  
 1696.00  0.6% do_select        [kernel.kallsyms]       
 1686.00  0.6% __strcpy_ssse3   /lib64/libc-2.12.so     
 1685.00  0.6% update_curr      [kernel.kallsyms]       
 1619.00  0.5% enqueue_entity   [kernel.kallsyms]       
 1607.00  0.5% pfree/u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 1598.00  0.5% doCustom         /u02/digoal/soft_bak/pgsql9.5/bin/pgbench       
 1594.00  0.5% idle_cpu         [kernel.kallsyms]       
 1589.00  0.5% update_cfs_rq_blocked_load   [kernel.kallsyms]       
 1554.00  0.5% lapic_next_deadline          [kernel.kallsyms]       
 1512.00  0.5% update_cfs_shares[kernel.kallsyms]       
 1491.00  0.5% MemoryContextCreate          /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 1482.00  0.5% _raw_spin_lock   [kernel.kallsyms]       
 1423.00  0.5% palloc           /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 1419.00  0.5% __GI___sigsetjmp /lib64/libc-2.12.so     
 1412.00  0.5% __cfree          /lib64/libc-2.12.so     
 1399.00  0.5% unix_stream_recvmsg          [kernel.kallsyms]       
 1393.00  0.5% __fget_light     [kernel.kallsyms]       
 1359.00  0.4% ResourceOwnerReleaseInternal /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 1351.00  0.4% AllocSetFree     /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 1277.00  0.4% unix_stream_sendmsg          [kernel.kallsyms]       
 1246.00  0.4% __memcmp_sse4_1  /lib64/libc-2.12.so     
 1240.00  0.4% plpgsql_exec_function        /u02/digoal/soft_bak/pgsql9.5/lib/plpgsql.so    
 1225.00  0.4% expression_tree_walker       /u02/digoal/soft_bak/pgsql9.5/bin/postgres      
 1160.00  0.4% exec_stmt_block  /u02/digoal/soft_bak/pgsql9.5/lib/plpgsql.so  
```  
使用advisory lock，性能相比不做任何优化性能提升了约66倍，相比for update nowait性能提升了约1.8倍。  
这种优化可以快速告诉用户是否能秒杀到此类商品，而不需要等待其他用户更新结束后才知道。所以大大降低了RT，提高了吞吐率。  
最后提一下9.5的新特性, select ,,, for update ,,, skip locked.  
http://blog.163.com/digoal@126/blog/static/163877040201551552017215/  
如果能做到UPDATE语法里面，就完美了，直接跳过无法获得锁的行。并发能力瞬间提升，也不用advisory了。  
## 参考  
1\. http://www.postgresql.org/docs/9.5/static/functions-admin.html#FUNCTIONS-ADVISORY-LOCKS  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")