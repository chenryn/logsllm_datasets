# Demystifying Modern Windows Rootkits

## Speaker
**Bill Demirkapi**  
- 19 years old
- Sophomore at the Rochester Institute of Technology
- Self-taught in Windows Internals (with guidance)
- Strong background in Game Hacking

---

## Overview
In this talk, we will cover:
- Loading a rootkit.
- Communicating with a rootkit.
- Abusing legitimate network communications.
- An example rootkit I wrote and the design choices behind it.
- Executing commands from the kernel.
- Tricks to cover up the filesystem trace of your rootkit.

---

## Introduction to Windows Rootkits

### Why Use a Rootkit?
- Kernel drivers have significant access to the machine.
- They operate at the same privilege level as typical kernel-based antivirus solutions.
- There are fewer mitigations and security solutions targeting kernel malware.
- Antivirus software often has less visibility into operations performed by kernel drivers.
- Kernel drivers are often ignored by antivirus software.

### Example: Treatment by Antivirus
Antivirus software tends to trust kernel drivers more than user-mode applications. For instance, both Carbon Black and Malwarebytes treat kernel drivers with significant trust in their process/thread handle callbacks.

---

## Loading a Rootkit

### Abusing Legitimate Drivers
Many drivers have vulnerabilities. With some reverse engineering knowledge, finding a "0-day" in a driver can be relatively simple. Examples include:
- Capcom’s Anti-Cheat driver
- Intel’s NAL Driver
- Microsoft's own drivers

#### Benefits of Using Legitimate Drivers
- Only a few primitives are needed to escalate privileges.
- Finding a vulnerable driver is relatively trivial, especially among OEM drivers.
- Detection is difficult due to compatibility reasons.

#### Drawbacks of Using Legitimate Drivers
- Compatibility issues across different operating system versions.
- Higher likelihood of stability issues, which could lead to a Blue Screen of Death (BSOD).

### Code Signing Certificates
For red teamers, buying a legitimate code signing certificate might be an option:
- Useful for targeted attacks.
- No stability concerns.
- However, it can potentially reveal your identity and the certificate can be blacklisted.

### Abusing Leaked Certificates
Using a leaked certificate is another approach:
- Many public leaked certificates are available for download.
- It offers most of the benefits of buying a certificate without deanonymization.
- However, the certificate may be detected in the future.
- If issued after July 29th, 2015, it won't work on Secure Boot machines running certain versions of Windows 10.

- In most cases, Windows doesn’t care if the driver has an expired or revoked certificate.
- Several leaked certificates are already publicly posted, but it’s not impossible to find your own.
- Most of these certificates go undetected by the majority of antivirus software.

---

## Communicating with a Rootkit

### Beacon Out to a Command and Control (C2)
A common method, but it comes with downsides:
- Firewalls can block or flag outgoing requests to unknown or suspicious IP addresses or ports.
- Advanced Network Inspection can catch exfiltration techniques that try to blend in with normal traffic.

### Opening a Port
Some malware allows the C2 to connect directly to the victim:
- Relatively simple to set up.
- Can be blocked by a firewall.
- Difficult to blend in with normal traffic.

### Application-Specific Hooking
More advanced malware hooks specific application communication:
- Difficult to detect, especially if using a legitimate protocol.
- Not very flexible.
- The target machine might not have the required service exposed.

### Choosing a Communication Method
**Desired Features:**
- Limited detection vectors.
- Flexibility for various environments.

**Assumptions:**
- Victim machines will have some services exposed.
- Inbound and outbound access may be monitored.

### Abusing Legitimate Communication
Instead of hooking an application directly, we can:
- Hook network communication, similar to tools like Wireshark.
- Place a special indicator in "malicious" packets, a "magic" constant.
- Send these "malicious" packets to legitimate ports on the victim machine.
- Search packets for this "magic" constant to pass data to our malware.

### Hooking the User-Mode Network Stack
- A significant amount of services on Windows can be found in user-mode.
- Networking related to WinSock is handled by `Afd.sys`, the Ancillary Function Driver for WinSock.
- Reversing a few functions in `mswsock.dll` revealed that much of the communication is done through IOCTLs. Intercepting these requests allows us to snoop on the data being received.

### How IRPs Know Where to Go
When you call `NtDeviceIoControlFile` on a file handle to a device, how does the kernel determine which function to call?

### Standard Methods of Intercepting IRPs
- Replace the Major Function you’d like to hook in the driver’s object.
- Perform a code hook directly on the dispatch handler.

### Picking a Method
Consider the following:
- Number of detection vectors.
- Usability of the method.
- Cost of detection.

### Hooking a Driver Object
- **Detection Vectors:** Memory artifacts.
- **Usability:** Stable, well-documented, and easy to find.
- **Cost of Detection:** Inexpensive, as antivirus software can enumerate loaded drivers and check major functions.

### Hooking a Driver’s Dispatch Function
- **Detection Vectors:** Memory artifacts.
- **Usability:** Requires finding the function yourself, not all drivers are compatible, and HVCI incompatible.
- **Cost of Detection:** Potentially inexpensive, with several methods to detect hooking.

### Hooking File Objects
I wanted a method that was:
- Undocumented.
- Stable.
- Relatively expensive to detect.

#### Approach
- Create our own device object and driver object.
- Patch our copy of the driver object.
- Replace the `DeviceObject` pointer of our file object with our own device.

#### Steps
1. **Find a File Object to Hook:**
   - Use `SystemHandleInformation` to query all handles on the system.
   - Open the Afd device to recognize file objects for the Afd device.

2. **Create Fake Objects:**
   - Call `ObCreateObject` with `IoDriverObjectType` or `IoDeviceObjectType` to create fake objects.
   - Copy existing objects to contain the same member values.

3. **Hook the Driver Object:**
   - Use the standard “Hook a Driver Object” method on a fake driver object used exclusively for our hooks.

4. **Prevent Race Conditions:**
   - Ensure no race conditions while replacing the `DeviceObject` member.

---

This structured and detailed approach should provide a clear and professional presentation of the topic.