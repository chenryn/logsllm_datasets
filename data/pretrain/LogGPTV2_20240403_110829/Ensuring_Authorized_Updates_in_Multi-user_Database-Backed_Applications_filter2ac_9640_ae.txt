We conducted a second set of experiments using Pol-
icy 2 in order to artiﬁcially force both strategies (SafeD
and built-in) to perform joins during their access control
checks.
The results are shown in Figure 4b. In Policy 2, the
write set for the New Order table was deﬁned as a join
between the New Order and OOrder tables. This consid-
erably lowered the performance of V-Copy, due to its cre-
ation of temporary tables and copying of the write sets.
Since V-Copy resulted in database thrashing and was un-
able to sustain any transaction rates, it is omitted from
Figure 4b. The Postgres’s throughput also dropped sig-
niﬁcantly with its built-in access control, down to only 9
tps (transactions per second). The throughput with No-
Copy remained an order of magnitude higher, namely 85
tps. As reported in Table 5, even at 9 tps, Postgres’s built-
in mechanism is 387 times slower than SafeD when pro-
cessing delivery transactions. The delivery transaction
executes a large number of SELECT and UPDATE queries
on the New Order table. These results indicate that when
a user’s write set contains joins, SafeD using No-Copy
signiﬁcantly outperforms Postgres’s built-in access con-
trol.
While SafeD outperforms the built-in access control,
the performance of both strategies could be improved. In
particular, we identiﬁed two sources of overhead when
USENIX Association
26th USENIX Security Symposium    1455
(a) Postgres: Policy 1
(b) Postgres: Policy 2
Figure 4: The performance overhead of different access control strategies compared to no access control (NULL),
using TPC-C on Postgres for Policy 1 (a) and Policy 2 (b). All numbers are average latencies.
Transaction Null(s)
0.05247
Delivery
Built-in(s) No-Copy(s)
41.03159
0.10597
Speedup
x387
Table 5: Transaction latency at 9 tps. Speedup is SafeD’s
performance compared to the built-in access control.
Figure 5: Average latency in SafeD for varying ratio of
unsafe queries in the workload, at 100 tps.
enforcing Policy 2: (1) when the write set contains a join,
a join query is issued to the database to create a copy of
the write set; and (2) when the transformed query intro-
duces a join or a nested sub-query. Thus, to reduce the
performance overhead, we repeated the experiment with
a denormalized database, i.e, we added a new column,
NO C ID, to the New Order table. As shown in Figure
4b, while the performance of both strategies improved
signiﬁcantly, SafeD remained the superior strategy.
8.3
Impact of Unsafe Queries on Perfor-
mance
Unsafe queries are those that attempt to view or modify
unauthorized tuples. In previous experiments, we mea-
sured SafeD’s overhead when all queries in the work-
load were safe. To measure the impact of having unsafe
queries on SafeD’s performance, we modiﬁed the TPC-
C workload by adding additional queries that are unsafe
under Policy 1. We varied the ratio of such queries be-
tween 1% to 10% of the overall workload. The results
for this experiment are shown in Figures 5 and 6.
As the number of unsafe queries increases, V-Copy’s
Figure 6: Achievable throughput in SafeD for varying
ratio of unsafe queries in the workload.
latency greatly increases, whereas No-Copy’s latency
overhead is relatively constant. This is because V-Copy
creates temporary tables and executes additional queries
to verify write-safety. Consequently, when 3% of the
workload is unsafe, V-Copy thrashes. Figure 6 shows
a similar trend for throughput.
In conclusion, when a
large number of unsafe queries are expected, No-Copy is
a superior choice in terms of performance.
8.4 Developer Effort
The primary manual effort required by developers when
using SafeD is the deﬁning of desired security policies.
SafeD’s policies are relatively compact. For example,
Table 6 reports the number of lines of code needed to
deﬁne Policy 1 in SafeD, Oracle (which also offers row-
level access control), and Postgres. For SafeD, we count
each read or write set declaration as one line of code.
For Oracle, the count includes all of the procedural code
necessary to establish the user context and enforce the
read and write policies. For Postgres, we count each pol-
icy declaration and each ALTER TABLE command as one
line. We also count the lines of code required to create
an administrator role and a default role with no access.
We observe that Oracle requires the most lines of
code, while Postgres and SafeD both require consider-
ably fewer lines. Furthermore, Oracle requires the de-
veloper to understand how to deﬁne policy functions,
policies, and system context triggers. Postgres requires
1456    26th USENIX Security Symposium
USENIX Association
Access Control Mechanism
SafeD
Postgres’s Built-in Access Control
Oracle’s Built-in Access Control (a.k.a. VPD)
LOC
36
54
544
Table 6: Lines of code required to deﬁne a policy using
three different syntaxes.
developers to work with DBAs to deﬁne policies and
manage end-user roles. SafeD requires an understanding
of SELECT statements to deﬁne policies. Thus, overall,
deﬁning security policies in SafeD seems to be relatively
straightforward.
SafeD also simpliﬁes developer effort when ensuring
the application issues safe queries. To enforce a desired
access control policy, developers add multiple security-
oriented checks within the code to protect the database.
For example, in WordPress 4.6.1, we identiﬁed about 515
lines of security-oriented checks in the code base. Each
check is required to ensure no sensitive data is leaked,
but there may be more checks necessary to fully protect
the database [8], especially if the application’s code is
updated. SafeD reduces the effort required to protect the
database because the security policies are declared ex-
plicitly within SafeD, thus they exist separately from the
application and persist despite changes made to the ap-
plication’s code.
9 Conclusion
Database-backed application developers often imple-
ment their access control policies procedurally in code
because the access control mechnisms of database sys-
tems are not adequate for enforcing access control for
multi-user applications.
Implementing access control
procedurally in applicaton logic is both cumbersome and
error-prone. Previous work has examined access con-
trol solutions for such situations, often using database
views as the main mechanism for enforcing per-user ac-
cess control. However, due to the view update problem,
database views are not updatable when the view deﬁni-
tion involves a join query. As our survey of 10 popular
open-source web applications showed, on average, 21%
of the tables require a join query to deﬁne a security pol-
icy. Therefore, previous work cannot enforce access con-
trol rules on write queries.
We proposed a new technique, phantom extraction
that, given a write query, extracts a similar write query
(known as the query’s phantom), which only modiﬁes
permitted tuples in the database. Phantom extraction
does not use database views, thus avoiding the view up-
date problem. The correctness of the technique is estab-
lished by a formal notion of query safety. We incorpo-
rated this technique into a system, SafeD, and provided
a simple syntax for deﬁning per-user (or per-role) access
control policies declaratively. We also provide two possi-
ble design strategies, V-Copy and No-Copy, for perform-
ing query extraction.
References
[1] Cyclos: Online & mobile banking software. http:
//www.cyclos.org/.
[2] Drupal. https://www.drupal.org/.
[3] Limesurvey. https://www.limesurvey.org/.
[4] Mediawiki.
wiki/MediaWiki.
https://www.mediawiki.org/
[5] Mybb. https://mybb.com/.
[6] MySQL customers. https://www.mysql.com/
customers/.
[7] oscommerce. https://www.oscommerce.com/.
[8] Sql injection vulnerability in ninja forms. http:
//tinyurl.com/z277h9f.
[9] Webid. http://www.webidsupport.com/.
[10] Wordpress. https://wordpress.com/.
[11] Zen cart. https://www.zen-cart.com/.
[12] Coverity scan open source report 2014. Technical
report, 2014.
[13] Oracle database online documentation 12.1. http:
//tinyurl.com/jjgzavq, 2014.
[14] Snapchat
- gibsec full disclosure.
tinyurl.com/h6yk3za, 2014.
http://
[15] Bug in Uber app leaks driver information. http:
//tinyurl.com/gtj5t54, 2015.
[16] Elements of row level security. http://tinyurl.
com/jctpcll, 2015.
[17] PostgreSQL powers all new apps for 77% of
http://tinyurl.com/
the database’s users.
zlhnfuf, 2015.
[18] Row and column access control (rcac) overview.
http://tinyurl.com/zavtmtx, 2015.
[19] Creating MySQL database and user.
tinyurl.com/huv7uh7, 2016.
http://
[20] Execute as (transact-sql). http://tinyurl.com/
jjkd2fjFDB, 2016.
[21] Manual:security.
qhylfza, 2016.
http://tinyurl.com/
USENIX Association
26th USENIX Security Symposium    1457
[22] MySQL internals manual.
com/j8sou7y, 2016.
http://tinyurl.
[23] PostgreSQL 9.5.0 documentation.
tinyurl.com/hnjf7u6, 2016.
http://
[24] Row-level
security.
jq7q2p2, 2016.
http://tinyurl.com/
[25] Symantec patches high risk vulnerabilities in
http://tinyurl.com/
endpoint protection.
zlgpfsg, 2016.
[26] R. Abela. Infographic: Statistics about the security
scans of 396 open source web applications. http:
//tinyurl.com/zur7yfj, 2016.
[27] F. Bancilhon and N. Spyratos. Update semantics of
relational views. ACM Trans. Database Syst., 1981.
[28] D. Bisson. The talktalk breach: Timeline of a hack.
http://tinyurl.com/jpp9epx, 2015.
[29] K. Browder and M. A. Davidson. The Virtual Pri-
vate Database in Oracle9iR2. Oracle Corporation,
2002.
[30] S. Buckley.
Swiftkey leaked user email ad-
http://tinyurl.
dresses as text predictions.
com/zj5wv37, 2016.
[31] cguler. Can I switch the ’connected’ user within
an sql script that is sourced by mysql? http://
tinyurl.com/gv3rhwd, 2011.
[32] S. Chaudhuri, T. Dutta, and S. Sudarshan. Fine-
grained authorization through predicated grants. In
ICDE, 2007.
[33] I.-Y. Chen and C.-C. Huang. A service-oriented
agent architecture to support telecardiology ser-
vices on demand. Journal of Medical and Biologi-
cal Engineering, 2005.
[34] C. Cimpanu. Teamp0ison hacks time warner cable
business website, dumps customer data. http://
tinyurl.com/zxvwjmj, 2016.
[35] A. Coyne. Hacker convicted for inﬁltrating coun-
http://tinyurl.com/
try liberals’ website.
znfsnt3, 2016.
[36] M. Dalton, C. Kozyrakis, and N. Zeldovich. Neme-
sis: Preventing authentication & access control vul-
nerabilities in web applications. In USENIX, 2009.
[37] D. E. Difallah, A. Pavlo, C. Curino, and P. Cudre-
Mauroux. Oltp-bench: An extensible testbed for
In PVLDB,
benchmarking relational databases.
2013.
[38] D. Drinkwater. Up to 100k archos customers
http://
compromised by sql injection attack.
tinyurl.com/jpv6mhj, 2015.
[39] A. P. Felt, M. Finifter, J. Weinberger, and D. Wag-
ner. Diesel: Applying privilege separation to
database access. In ICCS, 2011.
[40] E. Kohler. hotcrp. https://hotcrp.com/.
[41] A. Levai. Using queryband. http://tinyurl.
com/hu2l6cj, 2014.
[42] J. Murdock. Qatar national bank leak: Security
experts hint ’sql injection’ used in database hack.
http://tinyurl.com/h7ew4zf, 2016.
[43] B. Parno, J. M. McCune, D. Wendlandt, D. G. An-
dersen, and A. Perrig. Clamp: Practical prevention
of large-scale data leaks. In S & P, 2009.
[44] I. Raafat. Vulnerability in Yahoo allowed me
to delete more than 1 million and half records
from Yahoo database.
http://tinyurl.com/
hb4jvn2, 2014.
[45] S. Rizvi, A. Mendelzon, S. Sudarshan, and P. Roy.
Extending query rewriting techniques for ﬁne-
grained access control. In SIGMOD, 2004.
[46] M. Stonebraker and E. Wong. Access control in a
relational data base management system by query
modiﬁcation. In ACM Annual Conference, 1974.
[47] N. Teodoro and C. Serrao. Web application se-
curity: Improving critical web-based applications
In i-
quality through in-depth security analysis.
Society, 2011.
[48] S. Visveswaran. Dive into connection pooling with
j2ee. http://tinyurl.com/hpfl9b9, 2000.
A Proof of Theorem 1
To prove Theorem 1, we ﬁrst prove the following lem-
mas.
Lemma 1. Distributive Laws for Tables and their Read-
/Write Sets
The read and write set, V ∈ {Vr,Vw}, are distributive
with respect to the basic set operations. That is, for any
tables or other subsets A,B ⊆ S ,
V (A∪ B,u) = V (A,u)∪V (B,u)
V (A∩ B,u) = V (A,u)∩V (B,u)
V (A\ B,u) = V (A,u)\V (B,u)
1458    26th USENIX Security Symposium
USENIX Association
Proof. These follow trivially from laws for set opera-
tions since V (A,u) = A∩ p(u), where p is pr or pw de-