# BLACK OPS OF TCP/IP: Spliced NAT2NAT and Other Packet-Level Misadventures

**Dan Kaminsky, CISSP**  
DoxPara Research  
www.doxpara.com

## Introduction
This presentation explores advanced techniques in TCP/IP networking, focusing on packet-level manipulation and unconventional methods for establishing connections through restrictive networks. The discussion draws from my experiences at Black Hat 2001 and delves into the possibilities of tunneling, port scanning, and NAT traversal.

## Background
### Black Hat 2001
- **Impossible Tunnels through Improbable Networks with OpenSSH**
  - **Getting Out**: Using ProxyCommands for non-TCP communication layers (HTTP, SOCKS, UDP, Packet Radio, AIM/Yahoo).
  - **Coming In**: Active Connection Brokering for NAT2NAT.
    - One host exports SSHD to a broker.
    - Another host imports access from the broker.
  - **Passing Through**: Dynamic Forwarding for pseudo-VPN work (web browsing, Dialpad, etc.).

## Interesting Problems
### Instant Portscan
- **Question**: Can we instantly discover available network services, even on large networks?
- **Answer**: Yes, using stateless pulse scanning with SYN cookies.

### Guerrilla Multicast
- **Question**: Can we send a single packet to multiple recipients on today's multicast-free Internet?
- **Answer**: Yes, by linking a unicast IP to a broadcast MAC address.

### NATless NAT
- **Question**: Can we share a globally addressable IP without translating private IP ranges?
- **Answer**: Yes, by using dynamic ARP tables and state management.

### NAT Deadlock Resolution
- **Question**: Can we establish a TCP connection between two hosts behind NATs?
- **Answer**: Yes, using a connection broker to coordinate port selection and spoof SYN|ACKs.

## On Possibility
- **Restraint-Free Engineering**: Abandon all practicality; focus on what is possible.
- **Security Considerations**: Once security is no longer a concern, amazing things can be achieved.
- **Practicality**: Start with the impossible and make it practical and secure.

## TCP Three-Way Handshake
- **Connection Request (Alice -> Bob)**: SYN (I want to talk to you).
- **Connection Response (Bob -> Alice)**: SYN|ACK (OK, let's talk) or RST|ACK (I'm not listening).
- **Connection Initiation (Alice -> Bob)**: ACK (Beginning conversation).

## Port and Sequence Numbers
- **Port Ranges**:
  - **Local Port**: Application requesting the connection (usually random, 0-65535).
  - **Remote Port**: Application accepting the connection (e.g., 80 for HTTP, 443 for HTTPS).
- **Sequence Numbers**:
  - 32-bit number, randomly generated, reflected in the TCP handshake.
  - Used to track successful packet acquisition.

### SYN Cookies
- Developed in 1996 to combat SYN floods.
- Encrypts connection state into the SYN|ACK's sequence number.
- Uses legitimate remote hosts to store handshake state.

## Stateless Pulse Scanning
- **Sending**: Directly send n SYN packets with the same local port and SYN cookies.
- **Receiving**: Filter packets arriving at the local port, verify SYN cookies, and mark ports as up or down.
- **Results**: Scanned ~8300 web servers in 4 seconds with minimal overhead.

## Packet Structure and Layers
- **Layers**:
  - Layer 1: Medium
  - Layer 2: Previous Hop, Next Hop
  - Layer 3: First Hop, Last Hop
  - Layer 4: Previous App, Next App
  - Layer 5: First App, Last App
- **Redundancy**:
  - L2: Broadcast MAC Address (FF:FF:FF:FF:FF:FF)
  - L3: Broadcast IP Address (last IP of subnet)

## Broadcast Ghosts and Firewall Issues
- **Guerrilla Multicast**: Use broadcast MAC addresses to send a single packet to multiple recipients.
- **Firewall Issues**:
  - **NAT**: 100% penetration if implementation doesn't refuse broadcast MAC.
  - **PIX**: Multicast through NAT.
  - **UDP**: Remote side can send data indefinitely if it keeps packets coming in before UDP state expires.

## TCP with Guerrilla Multicast
- **Without Listeners**: Stream dies.
- **With One Listener**: Stream operates normally.
- **With Many Listeners**: Only one should acknowledge the stream, with others queuing responses.

## Recontextualizing L2/L3
- **Transformation**: One IP can be transformed at L2 into all hosts at a given subnet.
- **Other Uses**: True L2 Multicast packets for "many hosts" scenarios.

## MAC Address Translation
- **NATless NAT**: Share a globally addressable IP without translating private IP ranges.
- **State Management**: Use dynamic ARP tables and NAT-style state management.

## Managing Local Ports
- **NAT Multiplexing**: Split on local port, munge IP and ports.
- **Collision Chance**: 1/256 connections to the same host.
- **Alternate Strategies**: Munge SEQ# or use TCP Timestamps.

## The “Anyone Order A Pizza” Protocol
- **Stateless Approach**: Ask everyone, drop RSTs, forward everything else.
- **Stateful Approach**: Remember who's hosting and send to the first responder.

## TCP Splicing
- **NAT Deadlock Resolution**: Coordinate port selection and spoof SYN|ACKs using a connection broker.

## Conclusion
- **Interesting Things Are Possible**: All code available for download at [DoxPara Research](http://www.doxpara.com).

By exploring these advanced techniques, we can push the boundaries of what is possible in TCP/IP networking, opening new avenues for both research and practical applications.