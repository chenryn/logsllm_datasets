# Mikrotik Chimay-Red 分析
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
`Chimay-Red`是针对`MikroTik RouterOs`中`www`程序存在的一个漏洞的利用工具，该工具在泄露的`Vault
7`文件中提及。利用该工具，在无需认证的前提下可在受影响的设备上实现远程代码执行，从而获取设备的控制权。该漏洞本质上是一个整数溢出漏洞，对漏洞的利用则通过堆叠远程多线程栈空间的思路完成。更多信息可参考博客[Chimay-Red](https://blog.seekintoo.com/chimay-red/)。
下面结合已有的漏洞利用脚本[Chimay-Red](https://github.com/BigNerd95/Chimay-Red)，对该漏洞的形成原因及利用思路进行分析。
## 环境准备
`MikroTik`官方提供了多种格式的镜像，可以利用`.iso`和`.vmdk`格式的镜像，结合`VMware`虚拟机来搭建仿真环境。具体的步骤可参考文章
[Make It Rain with MikroTik](https://medium.com/tenable-techblog/make-it-rain-with-mikrotik-c90705459bc6) 和 [Finding and exploiting
CVE-2018–7445](https://medium.com/@maxi./finding-and-exploiting-cve-2018-7445-f3103f163cc1)，这里不再赘述。
根据`MikroTik`官方的公告，该漏洞在`6.38.5`及之后的版本中进行了修复，这里选取以下镜像版本进行分析。
  * `6.38.4`，`x86`架构，用于进行漏洞分析
  * `6.38.5`，`x86`架构，用于进行补丁分析
搭建起仿真环境后，还需要想办法获取设备的`root shell`，便于后续的分析与调试。参考议题`《Bug Hunting in
RouterOS》`，获取`root shell`的方法如下：
  1. 通过挂载`vmdk`并对其进行修改：在`/rw/pckg`目录下新建一个指向`/`的符号链接(`ln -s / .hidden`)
  2. 重启虚拟机后，以`ftp`方式登录设备，切换到`/`路径(`cd .hidden`)，在`/flash/nova/etc`路径下新建一个`devel-login`目录
  3. 以`telnet`方式登录设备(`devel/`)，即可获取设备的`root shell`
## 漏洞定位
借助`bindiff`工具对两个版本中的`www`程序进行比对，匹配结果中相似度较低的函数如下。
逐个对存在差异的函数进行分析，结合已知的漏洞信息，确定漏洞存在于`Request::readPostDate()`函数中，函数控制流图对比如下。
`6.38.4`版本中`Request::readPostDate()`函数的部分伪代码如下，其主要逻辑是：获取请求头中`content-length`的值，根据该值分配对应的栈空间，然后再从请求体中读取对应长度的内容到分配的缓冲区中。由于`content-length`的值外部可控，且缺乏有效的校验，显然会存在问题。
    char Request::readPostData(Request *this, string *a2, unsigned int a3)
    {
      // ...
      v9 = 0;
      string::string((string *)&v8, "content-length");
      v3 = Headers::getHeader((Headers *)this, (const string *)&v8, &v9);
      // ...
      if ( !v3 || a3 && a3  Stack space for a new thread is created by the parent thread with
> `mmap(MAP_ANONYMOUS|MAP_STACK)`. So they’re in the “memory map segment”, as
> your diagram labels it. It can end up anywhere that a large `malloc()` could
> go. (glibc `malloc(3)` uses `mmap(MAP_ANONYMOUS)` for large allocations.)
> ([来源](https://stackoverflow.com/questions/44858528/where-are-the-stacks-for-> the-other-threads-located-in-a-process-virtual-address))
结合上述知识，当`content-length`的值过小(为负数)或过大时，都会存在问题，下面分别对这2种情形进行分析。
###  content-length的值过小(为负数)
以`content-length=-1`为例，设置相应的断点后，构造数据包并发送。命中断点后查看对应的栈空间，可以看到，进程栈空间的起始范围为`0x7fc20000~0x7fc41000`，而当前线程栈空间的起始范围为`0x774ea000~0x77509000`，夹杂在映射的`lib`库中间。
    pwndbg> i threads
      Id   Target Id         Frame
      1    Thread 286.286 "www" 0x77513f64 in poll () from target:/lib/libc.so.0
    * 2    Thread 286.350 "www" 0x08055a53 in Request::readPostData(string&, unsigned int)
    pwndbg> vmmap
    LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
     0x8048000  0x805c000 r-xp    14000 0      /nova/bin/www
    // ...
     0x805d000  0x8069000 rw-p     c000 0      [heap]
    0x774d7000 0x774db000 r-xp     4000 0      /lib/libucrypto.so
    // ...
    0x774e9000 0x774ea000 ---p     1000 0
    0x774ea000 0x77509000 rw-p    1f000 0       xinfo esp
    Extended information for virtual address 0x77508180:
      Containing mapping:
    0x774ea000 0x77509000 rw-p    1f000 0
      Offset information:
             Mapped Area 0x77508180 = 0x774ea000 + 0x1e180
对应断点处的代码如下，其中`alloca()`变成了对应的内联汇编代码。
    pwndbg> x/12i $eip
    => 0x8055a53    mov    edx,DWORD PTR [ebp-0x1c]        // 保存的是content-length的值
       0x8055a56     lea    eax,[edx+0x10]    // 以下3行为与alloca()对应的汇编代码
       0x8055a59    and    eax,0xfffffff0                
       0x8055a5c    sub    esp,eax        // 计算后的eax为0,故esp不变
       0x8055a5e    mov    edi,esp
       0x8055a60    push   eax
       0x8055a61    push   edx            // content-length的值, 为-1
       0x8055a62    push   edi
       0x8055a63    mov    eax,DWORD PTR [ebp+0x8]
       0x8055a66    lea    esi,[eax+0x20]
       0x8055a69    push   esi