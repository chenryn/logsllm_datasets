web page, Java script is a client side scripting language, so when it is
executed, it will be executed in the Client machine not in the server side.
When a Java script is inserted in a website the script will run in the machines
of people who browse the web page, the web server is used as a deliverer of
the code.
There are three types of XSS vulnerabilities:
Persistent/stored XSS
The Java script will be stored in the web page so that any time a user
browse the page the code will be executed in his machine.
Reflected XSS
Attacker create a URL and send it to a user, the code will be executed
when the user clicks on the URL.
DOM Based XSS
The Dom based is the Java script is run in the Client side without any
communication with the webserver, the code is interpreted and run in
the web browser.
14.1. Discovering XSS vulnerabilities
The easiest way to discover that the website has XSS vulnerability is to look
for forms or other user input points that end up re displaying or reusing the
user data on the site. For example, if there is a box where you can enter your
name and your name is then displayed on the next webpage, then entering a
script may cause the script to run on the following page because the script
gets interpreted as part of the html instead of a string value. This will only
work if user input to the site is not html encoded (as it should be) on the site,
or if you can come up with some obfuscated script that will run despite html
encoding. There are also many tools that scan websites for XSS vulnerability
such as OWASP ZAP tool.
To find XSS vulnerability in any website.
S_E_Oblako
find all the input fields like search, comment box, username,
password, feedback form, contact form.
One by one try to inject a simple script like this . Try this simple script on every text field
and analyze the response. if script is run successful and show the
alert box ,than website have the XSS vulnerability .
Exercise 60: Example of Reflected XSS
1. Start Metasploitable machine
2. From Kali open web browser and go to DVWA page
3. Login admin/password, and change the security to low
4. Click on XSS Reflected tap
5. The page will ask you to put your Name and it will Replay with
Hello
6. This is just an example, the idea is that you can inject Java code into
text boxes, also looking at the URL you can see that it is a GET
S_E_Oblako
URL then you can inject on the URL as well.
7. In the Text box where the site asks, “what’s your name?” enter the
following basic java script:
and click submit
S_E_Oblako
S_E_Oblako
8. If you look at the URL
9. Now if you send this URL to anyone, they will get the code
executed and the get the Alert box.
14.2. Stored XSS vulnerabilities
Cross-site Scripting (XSS) is a client-side code injection attack. The attacker
aims to execute malicious scripts in a web browser of the victim by including
malicious code in a legitimate web page or web application. The actual attack
occurs when the victim visits the web page or web application that executes
the malicious code. The web page or web application becomes a vehicle to
deliver the malicious script to the user’s browser. Vulnerable vehicles that are
commonly used for Cross-site Scripting attacks are forums, message boards,
and web pages that allow comments.
A web page or web application is vulnerable to XSS if it uses unsensitized
user input in the output that it generates. This user input must then be parsed
by the victim’s browser.
Exercise 61: Example of Stored XSS
1. Open Kali to DVWA webpage and login
2. Click on Stored XSS and write and a name and message.
S_E_Oblako
3. Open the Windows machine and go to Metasploitable webpage to
DVWA then XSS stored tap, you will see the message that written
by the Kali user.
Note
This exresie require three virtual machines opened at the same time (
Metasplitable, Windows 10 and Kali Linux) if the Laptop used is less than 8
G RAM, the laptop performance will be impacted and it will be very slow.
S_E_Oblako
4. Now go back to Kali machine and enter java code in the message
body as in the following screenshot
S_E_Oblako
5. Click on Sign Guestbook
6. Go back to Windows 10 machine and just refresh the page in the
browser, you will notice that the java code is executed, and you will
S_E_Oblako
receive the alert.
S_E_Oblako
14.3. Injecting BeEF hook as a stored XSS
As we have seen in chapter 9, BeEF code allow us to track, monitor and
exploit any machine access a Website that have BeEF hook code. If a website
has Stored XSS vulnerability attackers can utilize this vulnerability to inject
BeEF hook java code. This will compromise any machine that access that
website.
Exercise 62: Injecting BeEF hook as stored XSS
We explained Beef in Chapter 9 how it can take control of a machine through
web browser hooks. In this lesson we are going to inject BeEF hook into a
web page as stored XSS, zny person access this page will be hooked to Beef
automatically.
1. In Kali machine open Beef
#cd /opt/beef
#./beef
2. Open web browser and go to Beef URL link
http://127.0.0.1:3000/ui/panel
S_E_Oblako
3. Login as beef/beef
Note
If you forget Beef username and password check the file
/opt/beef/config.yaml
4. Copy Beef Hook
S_E_Oblako
5. Insert the hook in the message body, then change the IP address to
Kali IP address. you will need to extend the max. characters of the
message body, inside the browser to 500 by:
In Kali machine Firefox that showing the DVWA webpage
Right click and then click on inspect element
Change maxlength to 500
S_E_Oblako
6. Add the hook URL in a java script to the message body then click
Sign Guestbook
7. The Script run in kali machine and it is hooked to BeEF
8. From windows machine just refresh the XSS stored webpage
9. See Beef webpage in Kali Linux
S_E_Oblako
10. The windows machine will be hooked because the stored hook
in the webpage connect windows machine to the beef command
center page.
S_E_Oblako
14.4. Preventing XSS Vulnerability
Escaping
The first method you can and should use to prevent XSS vulnerabilities from
appearing in your applications is by escaping user input. Escaping data means
taking the data an application has received and ensuring it is secure before
rendering it for the end user. By escaping user input, key characters in the
data received by a web page will be prevented from being interpreted in any
malicious way. In essence, you’re censoring the data your web page receives
in a way that will disallow the characters – especially “” characters
– from being rendered, which otherwise could cause harm to the application
and/or users.
If the page does not allow users to add their own code to the page, a good
rule of thumb is to escape all HTML, URL, and JavaScript entities. However,
if the web page does allow users to add rich text, such as on forums or post
comments, you have a few choices. You’ll either need to carefully choose
which HTML entities you will escape and which you won’t, or by using a
replacement format for raw HTML such as Markdown, which will in turn
allow you to continue escaping all HTML.
Validating Input
Any untrusted data should be treated as malicious. What’s untrusted data?
Anything that originates from outside the system and you don’t have
absolute control over so that includes form data, query strings, cookies, other
request headers, data from other systems (i.e. from web services) and
basically anything that you can’t be 100% confident doesn’t contain evil
things.”
Validating input is the process of ensuring an application is rendering the
correct data and preventing malicious data from doing harm to the site,
database, and users. While whitelisting and input validation are more
commonly associated with SQL injection, they can also be used as an
additional method of prevention for XSS. Whereas blacklisting, or
disallowing certain, predetermined characters in user input, disallows only
known bad characters, whitelisting only allows known good characters and is
a better method for preventing XSS attacks as well as others.
Input validation is especially helpful and good at preventing XSS in forms, as
it prevents a user from adding special characters into the fields, instead
refusing the request. However, as OWASP maintains, input validation is not
a primary prevention method for vulnerabilities such as XSS and SQL
S_E_Oblako
injection, but instead helps to reduce the effects should an attacker discover
such a vulnerability.
Sanitizing
A third way to prevent cross-site scripting attacks is to sanitize user input.
Sanitizing data is a strong defense but should not be used alone to battle XSS
attacks. It is totally possible you’ll find the need to use all three methods of
prevention in working towards a more secure application. Sanitizing user
input is especially helpful on sites that allow HTML markup, to ensure data
received can do no harm to users as well as your database by scrubbing the
data clean of potentially harmful markup, changing unacceptable user input
to an acceptable format.
WAF
we explained in in previous chapters WAF can protect against XSS attacks.
S_E_Oblako
15
OWASP ZAP
Web Pen-Testing tool
The OWASP Zed Attack Proxy (ZAP) is one of the world’s most
popular free security tools and is actively maintained by hundreds
of international volunteers. The OWASP ZAP tool automate the
Website penetration testing and it is used by most Penetration
Testers.
S_E_Oblako
15. OWASP ZAP Web Site Penetration testing tool
OWASP ZAP tool which comes part of Kali is a tool that can-do
vulnerability scanning and penetration testing of web site automatically, the
tool run all the testing we did manual in the above sections and more.
15.1. Scanning Websites using OWASP-ZAP tool
Exercise 63: Running OWASP ZAP
1. To run the tool, go to Kali application and search for ZAP.
S_E_Oblako
2. Start the tool
3. Click Start , then Tools / options, will allow you to modify the
options
S_E_Oblako
4. Choose Default policy then click OK
5. Click on automated scan
Exercise 64: Start Website scan
6. To start scan, type the URL in the page
7. Then click Attack
8. The Attack will take some time to finish, the tool will first try to
find all pages in the website then it will start attack based on the
policy we used.
9. You can monitor the attack progress by clicking on the graph icon
beside the progress status bar under active scan tap.
S_E_Oblako
Exercise 65: Scan Analysis
When the scan finish, it will give a summary of found vulnerabilities in the
page categorized based on the severity of the vulnerability as shown in the
screenshot below:
10. The ZAP tool successfully discovered 13 red , 8 orange and 7
yellow flags. clicking on the alerts will show the details of the alert
S_E_Oblako
and what information the tool was successful to get from the
website, for example in the below screen shot, the tool was able to
read /ect/passwd file
S_E_Oblako
16
Mobile Phone Penetration Testing
In this section we will take brief look at the major threats which are
present in current mobile devices with a focus on IOs and Android
as these two accounts for 90% of the global mobile device market.
This section will include the following topics:
•Mobile Phone attack victors.
•App stores
•Introduction to Android OS
•Introduction to Apple iOS
•Practical exercises about how to hack android devices
S_E_Oblako
16. Mobile phone penetration testing
16.1. Introduction
The Current global estimate of mobile devices is around 14 billion, with an
estimated 3.5 billion users. The number of devices is anticipated to increase
to 16.8 billion by the year 2023
.
With the world growing ever dependent on mobile services such as online
banking, social media, ecommerce and more, the amount of sensitive data
being transmitted is truly staggering. This mobile revolution has resulted in
mobile security becoming the new front line of cyber security.
The concept of mobile security revolves around identifying the vulnerabilities
within mobile devices, the possible ways these vulnerabilities can be
exploited and how to protect against cybercriminals who may try to use these
exploits.
In this section we will take brief look at the major threats which are present in
current mobile devices with a focus on IOs and Android as these two
accounts for 90% of the global mobile device market.
This section will include the following topics:
Mobile Phone attack victors.
App stores
Introduction to Android OS
Introduction to Apple iOS
Practical exercises about how to hack android devices
16.2. Mobile phone attack vectors
Attack Vector is a method or technique that a hacker uses to gain access to
S_E_Oblako
another computing device or network to inject a “bad code” often called
payload. This vector helps hackers to exploit system vulnerabilities. Many of
these attack vectors take advantage of the human element as it is the weakest
point of this system.
Mobile phones attack vectors are listed in the table below:
16.3. Outcomes of attack vectors
Data Loss: stored data in the mobile phone is lost and taken by the
attacker.
Use of mobile resources: attacker may install a bot software to
attack other networks such as launching DDOS attack using the
victim mobile phone.
Reputation loss: The attacker may use the victim social networks
accounts such as twitter, Facebook, or victim email to send fake
S_E_Oblako
messages to the victim friends and business partners or send threats
to others which might damage the victim reputation.
Identity theft: the attacker may use the victim data found in the
mobile phone such as victim photos, name, address, credit card to
fake victim identity.
Mobile phone attack lifecycle
The mobile phone attack lifecycle starts with the infection phase then
installation of a backdoor and data exfiltration.
Device Infection
Device infection with spyware is performed differently for Android and iOS
devices.
Android: Victims are tricked to download an APK file from a
third-party source generally using social engineering attack, the
android feature to allow “Install unknown apps” must be turned
on for external APK files to be installed. The attacker tricks the
victim by offering for free an application that is not free in the
Google play store, giving victim instruction to allow APK from
unknown sources.
iOS: iOS infection requires physical access to the mobile.
Infecting the device can also be through exploiting a zero-day
such as the JailbreakME exploit.
Backdoor Installation
To install a backdoor requires administrator privileges by rooting Android
devices and jailbreaking Apple devices. Despite device manufacturers
placing rooting/jailbreaking detection mechanisms, mobile spyware can
easily bypass them.
Android: Rooting detection mechanisms do not apply to
intentional rooting.
iOS: The jailbreaking “community” is vociferous and
S_E_Oblako
motivated.
Data Exfiltration
Spyware sends mobile content such as encrypted emails and messages to the
attacker servers in plain text. The spyware does not directly attack the secure
container. It grabs the data at the point where the user pulls up data from the
secure container to read it. At that stage, when the content is decrypted for the
user’s usage, the spyware takes controls of the content and sends it on.
16.5. App Stores
Google (Play store) and Apple (AppStore) are a centralized marketplace for
authenticated developers to show and sell their mobile applications. The
mobile applications developed by developers are submitted to these
marketplaces making them available to millions of mobile users. If you are
downloading the application from an official app store, then you can trust the
application as the hosting store has vetted it. However, if you are
downloading the application from a third-party app store, then there is a
possibility of downloading malware along with the application because third-
party app stores do not vet the apps.
The attacker downloads a legitimate mobile app such as a game and
S_E_Oblako
repackages it with malware or backdoor and uploads the mobile apps to a
third-party application store from where the end users download this
malicious gaming application, believing it to be genuine. As a result, the
malware gathers and sends user credentials such as call logs, photo, videos,
and sensitive docs to the attacker without the user's knowledge. The backdoor
will enable the attacker to upload more malicious software to victim machine
and use it to attack other devices and networks.
16.6. Introduction Android OS
Android OS is developed by Google for mobile devices with processing
capabilities for smartphones and tablets. Its kernel is based on Linux and
installed applications run in a sandbox.
Sandbox
Android provides layer of protection because it does not give one application
access to the resource of another application. This is known as the ‘sandbox’
where every application plays in its own sandbox and cannot use another
application’s resources, Android does this by giving each application a
unique user id (UID), the application will be running as a separate process
with that UID. Only processes with the same UIDs can share resources
which, as each ID is uniquely assigned, means that no other apps have
permission.
This means that if an application attempts to do something it shouldn’t, like
read the data from another application, or dial the phone (which is a separate
application) then Android protects against this because the app doesn’t have
the right privileges. Android antiviruses like Kaspersky, MacAfee, and AVG
Technologies runs under sandbox also which lead to limit antivirus scanning
environment.
Permissions
Because Android applications are sandboxed, they can access only their own
files and any world-accessible resources on the device. Such a limited
application would not be remarkably interesting though, and Android can
grant additional, fine-grained access rights to applications to allow for richer
functionality. Those access rights are called permissions, and they can control
access to hardware devices, Internet connectivity, data, or OS services.
Applications can request permissions by defining them in the
AndroidManifest.xml file. At application install time, Android inspects the
list of requested permissions and decides whether to grant them or not. Once
S_E_Oblako
granted, permissions cannot be revoked, and they are available to the
application without any additional confirmation.
Additionally, for features such as private key or user account access, explicit
user confirmation is required for each accessed object, even if the requesting
application has been granted the corresponding permission. Some permission
can only be granted to applications that are part of the Android OS, either
because they are preinstalled or signed with the same key as the OS. Third-
party applications can define custom permissions and define similar
restrictions known as permission protection levels, thus restricting access to
an app’s services and resources to apps created by the same author.
Permission can be enforced at different levels. Requests to lower-level
system resources, such as device files, are enforced by the Linux kernel by
checking the UID or GID of the calling process against the resource’s owner
and access bits. When accessing higher-level Android components,
enforcement is performed either by the Android OS or by each component
(or both).
How android Antivirus software works
The primary job of many Android antivirus applications is to scan for
applications from unofficial third parties and check against a known list of