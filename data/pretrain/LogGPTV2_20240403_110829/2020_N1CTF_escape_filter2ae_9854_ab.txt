                       (value0 == nullptr ||
                        NodeProperties::GetType(value0).Is(access.type)) &&
                       vobject->FieldAt(OffsetOfElementAt(access, 1)).To(&var1) &&
                       current->Get(var1).To(&value1) &&
                       (value1 == nullptr ||
                        NodeProperties::GetType(value1).Is(access.type))) {
              if (value0 && value1) {
                // The {object} has exactly two elements, so the LoadElement
                // must return one of them (i.e. either the element at index
                // 0 or the one at index 1). So we can turn the LoadElement
                // into a Select operation instead (still allowing the {object}
                // to be scalar replaced). We must however mark the elements
                // of the {object} itself as escaping.
                Node* check =
                    jsgraph->graph()->NewNode(jsgraph->simplified()->NumberEqual(),
                                              index, jsgraph->ZeroConstant());
                NodeProperties::SetType(check, Type::Boolean());
                Node* select = jsgraph->graph()->NewNode(
                    jsgraph->common()->Select(access.machine_type.representation()),
                    check, value0, value1);
                NodeProperties::SetType(select, access.type);
                current->SetReplacement(select);
                current->SetEscaped(value0);
                current->SetEscaped(value1);
                break;
              } else {
                // If the variables have no values, we have
                // not reached the fixed-point yet.
                break;
              }
            }
          }
          current->SetEscaped(object);
          break;
        }
        case IrOpcode::kTypeGuard: {
          current->SetVirtualObject(current->ValueInput(0));
          break;
        }
        case IrOpcode::kReferenceEqual: {
          Node* left = current->ValueInput(0);
          Node* right = current->ValueInput(1);
          const VirtualObject* left_object = current->GetVirtualObject(left);
          const VirtualObject* right_object = current->GetVirtualObject(right);
          Node* replacement = nullptr;
          if (left_object && !left_object->HasEscaped()) {
            if (right_object && !right_object->HasEscaped() &&
                left_object->id() == right_object->id()) {
              replacement = jsgraph->TrueConstant();
            } else {
              replacement = jsgraph->FalseConstant();
            }
          } else if (right_object && !right_object->HasEscaped()) {
            replacement = jsgraph->FalseConstant();
          }
          // TODO(tebbi) This is a workaround for uninhabited types. If we
          // replaced a value of uninhabited type with a constant, we would
          // widen the type of the node. This could produce inconsistent
          // types (which might confuse representation selection). We get
          // around this by refusing to constant-fold and escape-analyze
          // if the type is not inhabited.
          if (replacement && !NodeProperties::GetType(left).IsNone() &&
              !NodeProperties::GetType(right).IsNone()) {
            current->SetReplacement(replacement);
            break;
          }
          current->SetEscaped(left);
          current->SetEscaped(right);
          break;
        }
        case IrOpcode::kCheckMaps: {
          CheckMapsParameters params = CheckMapsParametersOf(op);
          Node* checked = current->ValueInput(0);
          const VirtualObject* vobject = current->GetVirtualObject(checked);
          Variable map_field;
          Node* map;
          if (vobject && !vobject->HasEscaped() &&
              vobject->FieldAt(HeapObject::kMapOffset).To(&map_field) &&
              current->Get(map_field).To(&map)) {
            if (map) {
              Type const map_type = NodeProperties::GetType(map);
              if (map_type.IsHeapConstant() &&
                  params.maps().contains(
                      map_type.AsHeapConstant()->Ref().AsMap().object())) {
                current->MarkForDeletion();
                break;
              }
            } else {
              // If the variable has no value, we have not reached the fixed-point
              // yet.
              break;
            }
          } else if (vobject) {
            Node* cache_map = vobject->Map();
            if (cache_map) {
              Type const map_type = NodeProperties::GetType(cache_map);
              if (map_type.IsHeapConstant() &&
                  params.maps().contains(
                      map_type.AsHeapConstant()->Ref().AsMap().object())) {
                current->MarkForDeletion();
                break;
              }
            }
          }
          current->SetEscaped(checked);
          break;
        }
        case IrOpcode::kCompareMaps: {
          Node* object = current->ValueInput(0);
          const VirtualObject* vobject = current->GetVirtualObject(object);
          Variable map_field;
          Node* object_map;
          if (vobject && !vobject->HasEscaped() &&
              vobject->FieldAt(HeapObject::kMapOffset).To(&map_field) &&
              current->Get(map_field).To(&object_map)) {
            if (object_map) {
              current->SetReplacement(LowerCompareMapsWithoutLoad(
                  object_map, CompareMapsParametersOf(op), jsgraph));
              break;
            } else {
              // If the variable has no value, we have not reached the fixed-point
              // yet.
              break;
            }
          }
          current->SetEscaped(object);
          break;
        }
        case IrOpcode::kCheckHeapObject: {
          Node* checked = current->ValueInput(0);
          switch (checked->opcode()) {
            case IrOpcode::kAllocate:
            case IrOpcode::kFinishRegion:
            case IrOpcode::kHeapConstant:
              current->SetReplacement(checked);
              break;
            default:
              current->SetEscaped(checked);
              break;
          }
          break;
        }
        case IrOpcode::kMapGuard: {
          Node* object = current->ValueInput(0);
          const VirtualObject* vobject = current->GetVirtualObject(object);
          if (vobject && !vobject->HasEscaped()) {
            current->MarkForDeletion();
          }
          break;
        }
        case IrOpcode::kStateValues:
        case IrOpcode::kFrameState:
          // These uses are always safe.
          break;
        default: {
          // For unknown nodes, treat all value inputs as escaping.
          int value_input_count = op->ValueInputCount();
          for (int i = 0; i ValueInput(i);
            current->SetEscaped(input);
            // Invalidate associated map cache for all value input nodes.
            VirtualObject* vobject = current->GetVirtualObject(input);
            if (vobject) {
              vobject->SetMap(nullptr);
            }
          }
          if (OperatorProperties::HasContextInput(op)) {
            current->SetEscaped(current->ContextInput());
          }
          break;
        }
      }
    }
在这个函数里面主要patch的两个地方是
    case IrOpcode::kStoreField: {
          Node* object = current->ValueInput(0);
          Node* value = current->ValueInput(1);
          VirtualObject* vobject = current->GetVirtualObject(object);//====>
          Variable var;
          if (vobject && !vobject->HasEscaped() &&
              vobject->FieldAt(OffsetOfFieldAccess(op)).To(&var)) {
            // Attach cached map info to the virtual object.   //====>
            if (OffsetOfFieldAccess(op) == HeapObject::kMapOffset) {
              vobject->SetMap(value);
            }////////////////////////////////////////////////////====>
            current->Set(var, value);
            current->MarkForDeletion();
          } else {
            current->SetEscaped(object);
            current->SetEscaped(value);
          }
          break;
        }
    patch的位置在上面进行了标记
    在patch脚本中给了一句话// Attach cached map info to the virtual object.
    前面对于patch中的.h文件进行了介绍
    上面的case是对于StoreField节点进行的操作，可见如果我们绕过一些分支限制，到达
    vobject->SetMap(value);位置，是可以给这个Node设置一个cached map的、
     但是我现在不清楚的object和value分别是什么、对于setEscaped和MarkForDeletion也略有不清楚
还有
    case IrOpcode::kCheckMaps: {
          CheckMapsParameters params = CheckMapsParametersOf(op);
          Node* checked = current->ValueInput(0);
          const VirtualObject* vobject = current->GetVirtualObject(checked);
          Variable map_field;
          Node* map;
          if (vobject && !vobject->HasEscaped() &&
              vobject->FieldAt(HeapObject::kMapOffset).To(&map_field) &&
              current->Get(map_field).To(&map)) {
            if (map) {
              Type const map_type = NodeProperties::GetType(map);
              if (map_type.IsHeapConstant() &&
                  params.maps().contains(
                      map_type.AsHeapConstant()->Ref().AsMap().object())) {
                current->MarkForDeletion();
                break;
              }
            } else {
              // If the variable has no value, we have not reached the fixed-point
              // yet.
              break;
            }
          } else if (vobject) { //Map();
            if (cache_map) {
              Type const map_type = NodeProperties::GetType(cache_map);
              if (map_type.IsHeapConstant() &&
                  params.maps().contains(
                      map_type.AsHeapConstant()->Ref().AsMap().object())) {
                current->MarkForDeletion();SetEscaped(checked);
          break;
        }
    同样先将patch的部位进行了标记
    这里的case是针对CheckMaps Node，在store之前是有CheckMaps节点的
    这里就是绕过一些条件，达到这个分支之后
        首先取出vobject对应的Map_(这里的vobject对应哪个节点也还没有搞明白)
        取出map值后，经过一个if判断，将current标记成删除
经过上面的分析，我自己的想法是，首先store让一个节点标记上这个cached_map，然后绕过一些判定条件，使CheckMap节点消除，从而可以进行类型混淆（甚至更多）
###### POC与动态调试
官方poc
    function opt(cb) {
    for(var i = 0; i  {});
    }
    console.log(opt((o) => { o[0][0] = x; }));
    断点位置
    Num     Type           Disp Enb Address            What
    1       breakpoint     keep y   0x00007f9542e891d4 in v8::internal::compiler::(anonymous namespace)::ReduceNode(v8::internal::compiler::Operator const*, v8::internal::compiler::EscapeAnalysisTracker::Scope*, v8::internal::compiler::JSGraph*) at ../../src/compiler/escape-analysis.cc:755
        breakpoint already hit 1 time
    2       breakpoint     keep y   0x00007f9542e88127 in v8::internal::compiler::(anonymous namespace)::ReduceNode(v8::internal::compiler::Operator const*, v8::internal::compiler::EscapeAnalysisTracker::Scope*, v8::internal::compiler::JSGraph*) at ../../src/compiler/escape-analysis.cc:584
        breakpoint already hit 12 times
    关于reduceNode总共触发了一次，所以就先研究一下这个
官方POC的内存变化
mem.js
    function opt(cb) {
    //for(var i = 0; i  {});
    //}
    let foo = opt((o) => { o[0][0] = x;});
    %SystemBreak();
    //%OptimizeFunctionOnNextCall(opt);
    //console.log(opt((o) => { o[0][0] = x; }));
第一次内存情况
    DebugPrint: 0xc6e08148dd5: [JSArray]
     - map: 0x0c6e0830394d  [FastProperties]
     - prototype: 0x0c6e082cb5e9 