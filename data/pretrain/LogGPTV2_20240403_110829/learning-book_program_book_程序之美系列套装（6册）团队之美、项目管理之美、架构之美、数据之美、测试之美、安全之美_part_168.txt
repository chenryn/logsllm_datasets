---
## Page 943
我想我们之所以没有使用OSGi，部分原因是因为时间紧迫，部分原
因是因为我们不愿意采用技术风险更大的东西。我一般会赞成“获
取并集成”，而不是“自己来搞一套”，但似乎有一个盈亏平衡点：很
少支持的并源项目和较弱的社区与众所周知的、广泛采用的并源项
目相比，具有更大的风险。类似地，我倾向于避免准开源框架，它
们实际上是供应商公会。他们服务的社区通常是供应商社区，而不
是用户社区。
那时我们不清楚OSGi属于哪一种类型。如果我们今天来做这个项
目，我想我们可能会使用OSGi，而不是自已搞一套。
在这个项目的过程中，我们数次重构了模块结构。manifest文件和加
载程序提供了巨大的帮助，让我们只需进行小小的改变。我们最后
得到了6个非常不同的部署配置，它们都由同样的结构来支持。
这些模块都有着类似的结构，但它们不一定是完全一样的。这是这
种方法的副作用之一。每个模块都可以隐藏其他模块不关心的部
分。
[]http://www.springframework.org/.
[2]参见AndrewHunt和David Thomas的《PragmaticProgrammer》
（Addison-Wesley Professional）。
4.3.2自助服务终端风格的GUI
照相馆合伙人选择的标准是能够很好地使用照相机，并与家庭（特
别是孩子）合作，而不是具有很好的计算机技能。在家里，他们可
能是Photoshop专家，但在照相馆里，没有人希望他们成为强大的用
户。实际上，在忙的季节，照相馆可能会请一些临时工。因此，能
够快速上手是很重要的。
一名架构师也承担UI设计师的工作。他总是对界面有着清晰的愿
景，即使我们并不总是对实现它的可行性持一致意见。他希望用户
界面是发好的、可视的。不会有菜单。用户应该通过直接操作与图
像打交道。大的像糖果包装一样的按钮让所有的选项一目了然。简
而言之，工作站看起来应该像一个自助服务终端。
剩下来的决定就是选用哪种技术来实现显示。
942
---
## Page 944
我们团队中的一个人调查了可用的Java富Ui技术，包括主流技术和
边缘技术。我们希望找到一个好的声明式U框架，能够帮助我们避
免在与Swing的搏斗中无尽地艰难前行。结果让我们很震惊。
在2005年，即使是Java诞生十年之后，也只有两种基本选择占据了
主流：XML地狱或GUI构建工具生成的混乱代码。基于XML的各种
技术或多或少地直接将Swing组件映射为XML实体和属性。这对我
们没有什么意义。GUI改变要求发布新版本的代码，不论这种改变
是直接用Java代码实现的还是用XML文件实现的。为什么要在脑子
里记住两种语言（Java和XMLschema）？为什么不只使用Java？另
外，作为一种编程语言，XML显得很笨拙。
GUI构建工具以前曾对我们都造成过伤害。没有人想将业务逻辑编
织到JPanel中嵌入的动作监听者中。
我们很不情愿地采用了纯SwingGUI，但是使用了一些基本原则。
经过了几次在本地Applebee的午餐之后，我们想出了一种使用Swing
的创新方式，同时又不会陷入其中。
943
---
## Page 945
4.3.3UI和UI模型
典型的分层架构包含“表示层”、“业务领域层"和"持久层”。在实践
中，代码的重心集中到了表示层，业务领域层变成了简单的数据容
器，持久层则转变成对框架的调用。但在同时，一些重要的信息在
各层之间重复出现。例如，姓名的最大长度会体现为数据库中列的
宽度，可能也是业务领域中的一项验证规则，还是UI中JTextField的
一项属性设置。
同时，表示层嵌入了这样的逻辑：如果选中了这个复选框，那就让
这4个文本字段也生效。这看起来是关于UI的论述，但它实际上反
映的是一些业务逻辑：如果客户是“肖像俱乐部"的会员，应用需要
记录下他们的会员编号和到期时间。
所以在典型的三层架构中，一种类型的信息会散布在各层中，而另
一种类型的重要信息存在于GUI控制逻辑中。
最后，我们的解决方案是将GUI与业务领域层的正常关系颠倒过
来。我们让业务领域层负责将屏幕的可视外观与它的值和属性的逻
辑操作分离开来。
表格
在这个模型中，表格对象将一个或多个领域对象的属性表示成有类
型的属性。表格管理着领域对象的生命周期，也负责调用底层事务
和持久的外观方法。每个表格代表了一整屏的交互对象，虽然在少
数情况下我们使用了子表格。
但这里的技巧在于，表格是完全不可视的。它不处理UI组件，只包
含对象、属性以及这些属性之间的交互。U可以将一个布尔属性绑
定到任何类型的UI表示和控制组件上：复选框、标记按钮、文本框
或标记并关。表格并不关心表示。它只知道它有一个属性，取值可
以是true或false。
表格从不直接调用屏幕对象。实际上，绝大多数表格甚至不知道它
们屏幕上的具体类。表格和屏幕间的所有通信都通过属性和绑定来
完成。
属性
944
---
## Page 946
不像一般的基于表格的应用，表格暴露出来的属性不只是Java的原
生类型或像Java.lang.Integer这样的基本类型。属性包含了一个值和
这个值的元数据。属性可以回答它是单值的还是多值的，它是否允
许空值，它是否是启用的。它也允许注册监听者对象来监听它的变
化。
表格及其属性对象为我们提供了用户界面的清晰模型，同时我们又
不必处理实际的GUI组件。我们把这一层称为"UI模型”层，如图4-4
所示。
属性的每个子类处理一种不同类型的值。具体的子类有自己的方法
来访问其值。例如，StringProperty有getStringValue（）和
setStringValue（String）方法。属性值总是对象类型，而不是Java原
生类型，因为原生类型不允许出现空值。
Swing
显示服务器
屏幕
UI
绑定
属性
导航
表格
UI模型
应用程序外观
外观
启动bean
领域对象
领域模型
Hibernate
MySQL
图4-4：分层架构
属性类似乎可以无休止地膨胀下去。如果我们为每个领域对象类创
建一个属性类，肯定会出现这种情况。多数时候，表格不会直接暴
945
---
## Page 947
露出领域对象，而是暴露出代表该领域对象不同方面的多个属性
值。例如，客户表格暴露出StringProperty对象来表示客户的姓，
名、地址、城市和邮编。它也暴露出一个DateProperty来表示客户会
员资格的到期时间。
某些领域对象在应用这种方法时会让人觉得很奇怪。连接一个滚动
条来控制图像的缩放，或将图案中的图像嵌入到底层的几何图形上
可能需要超过半打的属性。让表格具有这么多属性，目的只是为了
拖动一个滚动条，这明显是不好的代码味道。另一方面，添加另一
种属性类型似乎文在朝着类型膨胀的方向前进。
最后，我们进行了折中，引入了一个对象属性来保存任意类型的
Java对象。关于这个类的讨论意见包括"一步错，步步错"和"垃圾
场”。幸运的是，我们对这种类进行了检查一我觉得这是类型检查
语言的一种危险。
我们创建了一种“命令属性”来处理动作，它封装了一些命令对象，
也表明功能启用。因此，我们可以将命令属性对象绑定到GU按
钮，利用属性的启用值的变化来启用或禁用按钮。
UI模型让我们能够将Swing保持在UI层之内。它也为单元测试提供
了巨大的好处。我们的单元测试可以通过UI模型的属性来驱动U模
型，并断言这些动作所导致的属性改变。所以，表格本身是不可视
的，但它们暴露出命名的、强类型的属性。在某个地方，这些属性
必须与可视控件联系起来。这就是绑定层的工作。
绑定
属性针对的是它们的值的类型，而绑定针对的是单个的Swing组
件。屏幕创建它们自已的组件，然后注册一些绑定，将这些组件和
底层表格对象的属性联系起来。每个屏幕并不知道它所处理的具体
表格类型，表格也不知道与它联系在一起的具体屏幕类型。
绝大多数的绑定都会在每次GUI变化时更新它们的属性。例如，文
本字段会在每次击键时更新。我们使用立即验证的方式来提供经常
的、细致的反馈，而不是让用户输入一串不正确的数据之后再弹出
一个对话框。
绑定也负责处理从属性的对象类型到组件的合理视觉呈现之间的转
换。所以，文本字段绑定知道如何将整型、布尔型和日期型转换成
946
---
## Page 948
文本（以及反向转换）。但并不是所有的绑定都能够处理所有的值
类型。例如，把图像属性转换成文本字段是没有什么意义的。我们
确保所有不匹配的情形在应用启动时都能发现。
当我们构建了这个属性绑定的第一次选代时，发生了一个有趣的插
曲。我们尝试的第一个屏幕是客户注册表格。客户注册是相当简单
的，只是一些文本字段、一个复选框和几个按钮。第二个屏幕是相
册屏幕，在视觉和交互方面的要求更高一些。它使用了多个GUI组
件：2个验证表单、一个大图像编辑器、一个滚动条和几个命令按
钮。即使这样，表格也负责通过属性来决定所有的选择、可见性和
功能启用。所以相册表格对象知道验证表单的选择会影响中央的图
像编辑器，但屏幕对象是不知道的。
一个够了吗？
在某些屏幕上，验证表单允许多项选择；在另一些屏幕上，只允许
一项选择。更糟糕的是，某些动作只有在选择某一个缩略图时才允
许执行。哪个组件负责决定哪个选择模型适用、何时根据选择来启
用其他命令？这明显是U逻辑，所以它属于U模型层。也就是说，
它属于表格。UI模型永远不应该引入Swing类，那么表格如何能够
在不涉及Swing代码表达它们关于选择模型的意见呢？我们决定，
没有理由让GUI组件只有一个绑定。换言之，我们可以对组件的某
一个方面做多个绑定，这些绑定可以关联到不同的表单属性。
例如，我们常常有不同的绑定，代表组件的内容和它的选择状态。
选择绑定可以将组件配置为单项选择和多项选择，这由绑定属性的
数目来决定。
虽然花了很长时间来解释属性-绑定架构，我还是认为这是Creation
Center最优雅的部分之一。从本质上来说，CreationCenter是高度可
视化的，带有丰富的用户交互。它的领域是创建和操作照片，所以
它不是灰色的、基于表格的业务应用！然而，从一小组容易理解的
对象出发，让每个对象都由单一的行为定义，我们组建了非常动态
的界面。
客户应用最后支持了拖放、图像中的部分选择、随时图像缩放、主