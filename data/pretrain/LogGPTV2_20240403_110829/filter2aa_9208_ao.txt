\&    f   A single-precision float in the native format.
\&    d   A double-precision float in the native format.
.Ve
.Sp
.Vb 6
\&    F   A floating point value in the native native format
\&           (a Perl internal floating point value, NV).
\&    D   A long double-precision float in the native format.
\&          (Long doubles are available only if your system supports long
\&           double values _and_ if Perl has been compiled to support those.
\&           Causes a fatal error otherwise.)
.Ve
.Sp
.Vb 2
\&    p   A pointer to a null-terminated string.
\&    P   A pointer to a structure (fixed-length string).
.Ve
.Sp
.Vb 3
\&    u   A uuencoded string.
\&    U   A Unicode character number.  Encodes to UTF-8 internally
\&        (or UTF-EBCDIC in EBCDIC platforms).
.Ve
.Sp
.Vb 4
\&    w   A BER compressed integer.  Its bytes represent an unsigned
\&        integer in base 128, most significant digit first, with as
\&        few digits as possible.  Bit eight (the high bit) is set
\&        on each byte except the last.
.Ve
.Sp
.Vb 5
\&    x   A null byte.
\&    X   Back up a byte.
\&    @   Null fill to absolute position, counted from the start of
\&        the innermost ()-group.
\&    (   Start of a ()-group.
.Ve
.Sp
The following rules apply:
.RS 8
.IP "*" 8
Each letter may optionally be followed by a number giving a repeat
count.  With all types except \f(CW\*(C`a\*(C'\fR, \f(CW\*(C`A\*(C'\fR, \f(CW\*(C`Z\*(C'\fR, \f(CW\*(C`b\*(C'\fR, \f(CW\*(C`B\*(C'\fR, \f(CW\*(C`h\*(C'\fR,
\&\f(CW\*(C`H\*(C'\fR, \f(CW\*(C`@\*(C'\fR, \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`X\*(C'\fR and \f(CW\*(C`P\*(C'\fR the pack function will gobble up that
many values from the \s-1LIST\s0.  A \f(CW\*(C`*\*(C'\fR for the repeat count means to use
however many items are left, except for \f(CW\*(C`@\*(C'\fR, \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`X\*(C'\fR, where it is
equivalent to \f(CW0\fR, and \f(CW\*(C`u\*(C'\fR, where it is equivalent to 1 (or 45, what
is the same).  A numeric repeat count may optionally be enclosed in
brackets, as in \f(CW\*(C`pack 'C[80]', @arr\*(C'\fR.
.Sp
One can replace the numeric repeat count by a template enclosed in brackets;
then the packed length of this template in bytes is used as a count.
For example, \f(CW\*(C`x[L]\*(C'\fR skips a long (it skips the number of bytes in a long);
the template \f(CW\*(C`$t X[$t] $t\*(C'\fR \fIunpack()\fRs twice what \f(CW$t\fR unpacks.
If the template in brackets contains alignment commands (such as \f(CW\*(C`x![d]\*(C'\fR),
its packed length is calculated as if the start of the template has the maximal
possible alignment.
.Sp
When used with \f(CW\*(C`Z\*(C'\fR, \f(CW\*(C`*\*(C'\fR results in the addition of a trailing null
byte (so the packed result will be one longer than the byte \f(CW\*(C`length\*(C'\fR
of the item).
.Sp
The repeat count for \f(CW\*(C`u\*(C'\fR is interpreted as the maximal number of bytes
to encode per line of output, with 0 and 1 replaced by 45.
.IP "*" 8
The \f(CW\*(C`a\*(C'\fR, \f(CW\*(C`A\*(C'\fR, and \f(CW\*(C`Z\*(C'\fR types gobble just one value, but pack it as a
string of length count, padding with nulls or spaces as necessary.  When
unpacking, \f(CW\*(C`A\*(C'\fR strips trailing spaces and nulls, \f(CW\*(C`Z\*(C'\fR strips everything
after the first null, and \f(CW\*(C`a\*(C'\fR returns data verbatim.  When packing,
\&\f(CW\*(C`a\*(C'\fR, and \f(CW\*(C`Z\*(C'\fR are equivalent.
.Sp
If the value-to-pack is too long, it is truncated.  If too long and an
explicit count is provided, \f(CW\*(C`Z\*(C'\fR packs only \f(CW\*(C`$count\-1\*(C'\fR bytes, followed
by a null byte.  Thus \f(CW\*(C`Z\*(C'\fR always packs a trailing null byte under
all circumstances.
.IP "*" 8
Likewise, the \f(CW\*(C`b\*(C'\fR and \f(CW\*(C`B\*(C'\fR fields pack a string that many bits long.
Each byte of the input field of \fIpack()\fR generates 1 bit of the result.
Each result bit is based on the least-significant bit of the corresponding
input byte, i.e., on \f(CW\*(C`ord($byte)%2\*(C'\fR.  In particular, bytes \f(CW"0"\fR and
\&\f(CW"1"\fR generate bits 0 and 1, as do bytes \f(CW"\e0"\fR and \f(CW"\e1"\fR.
.Sp
Starting from the beginning of the input string of \fIpack()\fR, each 8\-tuple
of bytes is converted to 1 byte of output.  With format \f(CW\*(C`b\*(C'\fR
the first byte of the 8\-tuple determines the least-significant bit of a
byte, and with format \f(CW\*(C`B\*(C'\fR it determines the most-significant bit of
a byte.
.Sp
If the length of the input string is not exactly divisible by 8, the
remainder is packed as if the input string were padded by null bytes
at the end.  Similarly, during \fIunpack()\fRing the \*(L"extra\*(R" bits are ignored.
.Sp
If the input string of \fIpack()\fR is longer than needed, extra bytes are ignored.
A \f(CW\*(C`*\*(C'\fR for the repeat count of \fIpack()\fR means to use all the bytes of
the input field.  On \fIunpack()\fRing the bits are converted to a string
of \f(CW"0"\fRs and \f(CW"1"\fRs.
.IP "*" 8
The \f(CW\*(C`h\*(C'\fR and \f(CW\*(C`H\*(C'\fR fields pack a string that many nybbles (4\-bit groups,
representable as hexadecimal digits, 0\-9a\-f) long.
.Sp
Each byte of the input field of \fIpack()\fR generates 4 bits of the result.
For non-alphabetical bytes the result is based on the 4 least-significant
bits of the input byte, i.e., on \f(CW\*(C`ord($byte)%16\*(C'\fR.  In particular,
bytes \f(CW"0"\fR and \f(CW"1"\fR generate nybbles 0 and 1, as do bytes
\&\f(CW"\e0"\fR and \f(CW"\e1"\fR.  For bytes \f(CW"a".."f"\fR and \f(CW"A".."F"\fR the result
is compatible with the usual hexadecimal digits, so that \f(CW"a"\fR and
\&\f(CW"A"\fR both generate the nybble \f(CW\*(C`0xa==10\*(C'\fR.  The result for bytes
\&\f(CW"g".."z"\fR and \f(CW"G".."Z"\fR is not well\-defined.
.Sp
Starting from the beginning of the input string of \fIpack()\fR, each pair
of bytes is converted to 1 byte of output.  With format \f(CW\*(C`h\*(C'\fR the
first byte of the pair determines the least-significant nybble of the
output byte, and with format \f(CW\*(C`H\*(C'\fR it determines the most-significant
nybble.
.Sp
If the length of the input string is not even, it behaves as if padded
by a null byte at the end.  Similarly, during \fIunpack()\fRing the \*(L"extra\*(R"
nybbles are ignored.
.Sp
If the input string of \fIpack()\fR is longer than needed, extra bytes are ignored.
A \f(CW\*(C`*\*(C'\fR for the repeat count of \fIpack()\fR means to use all the bytes of
the input field.  On \fIunpack()\fRing the bits are converted to a string
of hexadecimal digits.
.IP "*" 8
The \f(CW\*(C`p\*(C'\fR type packs a pointer to a null-terminated string.  You are
responsible for ensuring the string is not a temporary value (which can
potentially get deallocated before you get around to using the packed result).
The \f(CW\*(C`P\*(C'\fR type packs a pointer to a structure of the size indicated by the
length.  A \s-1NULL\s0 pointer is created if the corresponding value for \f(CW\*(C`p\*(C'\fR or
\&\f(CW\*(C`P\*(C'\fR is \f(CW\*(C`undef\*(C'\fR, similarly for \fIunpack()\fR.
.IP "*" 8
The \f(CW\*(C`/\*(C'\fR template character allows packing and unpacking of strings where
the packed structure contains a byte count followed by the string itself.
You write \fIlength-item\fR\f(CW\*(C`/\*(C'\fR\fIstring-item\fR.
.Sp
The \fIlength-item\fR can be any \f(CW\*(C`pack\*(C'\fR template letter, and describes
how the length value is packed.  The ones likely to be of most use are
integer-packing ones like \f(CW\*(C`n\*(C'\fR (for Java strings), \f(CW\*(C`w\*(C'\fR (for \s-1ASN\s0.1 or
\&\s-1SNMP\s0) and \f(CW\*(C`N\*(C'\fR (for Sun \s-1XDR\s0).
.Sp
For \f(CW\*(C`pack\*(C'\fR, the \fIstring-item\fR must, at present, be \f(CW"A*"\fR, \f(CW"a*"\fR or
\&\f(CW"Z*"\fR. For \f(CW\*(C`unpack\*(C'\fR the length of the string is obtained from the
\&\fIlength-item\fR, but if you put in the '*' it will be ignored. For all other
codes, \f(CW\*(C`unpack\*(C'\fR applies the length value to the next item, which must not
have a repeat count.
.Sp
.Vb 3
\&    unpack 'C/a', "\e04Gurusamy";        gives 'Guru'
\&    unpack 'a3/A* A*', '007 Bond  J ';  gives (' Bond','J')
\&    pack 'n/a* w/a*','hello,','world';  gives "\e000\e006hello,\e005world"
.Ve
.Sp
The \fIlength-item\fR is not returned explicitly from \f(CW\*(C`unpack\*(C'\fR.
.Sp
Adding a count to the \fIlength-item\fR letter is unlikely to do anything
useful, unless that letter is \f(CW\*(C`A\*(C'\fR, \f(CW\*(C`a\*(C'\fR or \f(CW\*(C`Z\*(C'\fR.  Packing with a
\&\fIlength-item\fR of \f(CW\*(C`a\*(C'\fR or \f(CW\*(C`Z\*(C'\fR may introduce \f(CW"\e000"\fR characters,
which Perl does not regard as legal in numeric strings.
.IP "*" 8
The integer types \f(CW\*(C`s\*(C'\fR, \f(CW\*(C`S\*(C'\fR, \f(CW\*(C`l\*(C'\fR, and \f(CW\*(C`L\*(C'\fR may be
immediately followed by a \f(CW\*(C`!\*(C'\fR suffix to signify native shorts or
longs\*(--as you can see from above for example a bare \f(CW\*(C`l\*(C'\fR does mean
exactly 32 bits, the native \f(CW\*(C`long\*(C'\fR (as seen by the local C compiler)
may be larger.  This is an issue mainly in 64\-bit platforms.  You can
see whether using \f(CW\*(C`!\*(C'\fR makes any difference by
.Sp
.Vb 2
\&        print length(pack("s")), " ", length(pack("s!")), "\en";
\&        print length(pack("l")), " ", length(pack("l!")), "\en";
.Ve
.Sp
\&\f(CW\*(C`i!\*(C'\fR and \f(CW\*(C`I!\*(C'\fR also work but only because of completeness;
they are identical to \f(CW\*(C`i\*(C'\fR and \f(CW\*(C`I\*(C'\fR.
.Sp
The actual sizes (in bytes) of native shorts, ints, longs, and long
longs on the platform where Perl was built are also available via
Config:
.Sp
.Vb 5
\&       use Config;
\&       print $Config{shortsize},    "\en";
\&       print $Config{intsize},      "\en";
\&       print $Config{longsize},     "\en";
\&       print $Config{longlongsize}, "\en";
.Ve
.Sp
(The \f(CW$Config{longlongsize}\fR will be undefined if your system does
not support long longs.)
.IP "*" 8
The integer formats \f(CW\*(C`s\*(C'\fR, \f(CW\*(C`S\*(C'\fR, \f(CW\*(C`i\*(C'\fR, \f(CW\*(C`I\*(C'\fR, \f(CW\*(C`l\*(C'\fR, \f(CW\*(C`L\*(C'\fR, \f(CW\*(C`j\*(C'\fR, and \f(CW\*(C`J\*(C'\fR
are inherently non-portable between processors and operating systems
because they obey the native byteorder and endianness.  For example a
4\-byte integer 0x12345678 (305419896 decimal) would be ordered natively
(arranged in and handled by the \s-1CPU\s0 registers) into bytes as
.Sp
.Vb 2
\&        0x12 0x34 0x56 0x78     # big-endian
\&        0x78 0x56 0x34 0x12     # little-endian
.Ve
.Sp
Basically, the Intel and \s-1VAX\s0 CPUs are little\-endian, while everybody
else, for example Motorola m68k/88k, \s-1PPC\s0, Sparc, \s-1HP\s0 \s-1PA\s0, Power, and
Cray are big\-endian.  Alpha and \s-1MIPS\s0 can be either: Digital/Compaq
used/uses them in little-endian mode; SGI/Cray uses them in big-endian
mode.
.Sp
The names `big\-endian' and `little\-endian' are comic references to
the classic \*(L"Gulliver's Travels\*(R" (via the paper \*(L"On Holy Wars and a
Plea for Peace\*(R" by Danny Cohen, \s-1USC/ISI\s0 \s-1IEN\s0 137, April 1, 1980) and
the egg-eating habits of the Lilliputians.
.Sp
Some systems may have even weirder byte orders such as
.Sp
.Vb 2
\&        0x56 0x78 0x12 0x34
\&        0x34 0x12 0x78 0x56
.Ve
.Sp
You can see your system's preference with
.Sp
.Vb 2
\&        print join(" ", map { sprintf "%#02x", $_ }
\&                            unpack("C*",pack("L",0x12345678))), "\en";
.Ve
.Sp
The byteorder on the platform where Perl was built is also available
via Config:
.Sp
.Vb 2
\&        use Config;
\&        print $Config{byteorder}, "\en";
.Ve
.Sp
Byteorders \f(CW'1234'\fR and \f(CW'12345678'\fR are little\-endian, \f(CW'4321'\fR
and \f(CW'87654321'\fR are big\-endian.
.Sp
If you want portable packed integers use the formats \f(CW\*(C`n\*(C'\fR, \f(CW\*(C`N\*(C'\fR,
\&\f(CW\*(C`v\*(C'\fR, and \f(CW\*(C`V\*(C'\fR, their byte endianness and size are known.
See also perlport.
.IP "*" 8
Real numbers (floats and doubles) are in the native machine format only;
due to the multiplicity of floating formats around, and the lack of a
standard \*(L"network\*(R" representation, no facility for interchange has been
made.  This means that packed floating point data written on one machine
may not be readable on another \- even if both use \s-1IEEE\s0 floating point
arithmetic (as the endian-ness of the memory representation is not part
of the \s-1IEEE\s0 spec).  See also perlport.
.Sp
Note that Perl uses doubles internally for all numeric calculation, and
converting from double into float and thence back to double again will
lose precision (i.e., \f(CW\*(C`unpack("f", pack("f", $foo)\*(C'\fR) will not in general
equal \f(CW$foo\fR).
.IP "*" 8
If the pattern begins with a \f(CW\*(C`U\*(C'\fR, the resulting string will be
treated as UTF\-8\-encoded Unicode. You can force \s-1UTF\-8\s0 encoding on in a
string with an initial \f(CW\*(C`U0\*(C'\fR, and the bytes that follow will be
interpreted as Unicode characters. If you don't want this to happen,
you can begin your pattern with \f(CW\*(C`C0\*(C'\fR (or anything else) to force Perl
not to \s-1UTF\-8\s0 encode your string, and then follow this with a \f(CW\*(C`U*\*(C'\fR
somewhere in your pattern.
.IP "*" 8
You must yourself do any alignment or padding by inserting for example
enough \f(CW'x'\fRes while packing.  There is no way to \fIpack()\fR and \fIunpack()\fR
could know where the bytes are going to or coming from.  Therefore
\&\f(CW\*(C`pack\*(C'\fR (and \f(CW\*(C`unpack\*(C'\fR) handle their output and input as flat