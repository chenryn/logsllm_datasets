等是相同的。
• 依赖关系type是一种特定的软件包相互关系（depends、predepends、recommends、suggests、conflicts、replaces、provides）。
• 默认的type依赖关系是“depends”。
提示
当regex_pattern为空字符串时，请立即在命令后面添加”~T”。
下面是一些快捷方式。
• ”~Pterm”==”~Dprovides:term”
• ”~Cterm”==”~Dconflicts:term”
• ”…~W term”==”(…|term)”
用户熟悉mutt的快速选择，因为mutt的灵感来源于表达式语法。参见“用户手册“”/usr/share/doc/aptitude/README”
中的“SEARCHING,LIMITING,ANDEXPRESSIONS”。
注意
lenny版本的aptitude(8)中，新的长格式语法，例如“?broken”，在正则表达式中可以用来等效为它旧的短
格式“~b”。现在空格字符“ ”被认为是除了波浪字符“~”外的另一个正则表达式终止字符。新的长格式语法参
见“用户手册”。
Debian参考手册 52/233
扩展匹配规则描述 正则表达式
匹配软件包名称 ~nregex_name
匹配描述 ~dregex_description
匹配软件集名称 ~tregex_task
匹配debtag ~Gregex_debtag
匹配维护者 ~mregex_maintainer
匹配软件包的section ~sregex_section
匹配软件包版本 ~Vregex_version
匹配档案库 ~A{bookworm,trixie,sid}
匹配来源 ~O{debian,…}
匹配优先级 ~p{extra,important,optional,required,standard}
匹配必要的软件包 ~E
匹配虚拟软件包 ~v
匹配新的软件包 ~N
匹配待执行的动作 ~a{install,upgrade,downgrade,remove,purge,hold,keep}
匹配已安装软件包 ~i
匹配带有A标签的已安装软件包（自动安
~M
装的软件包）
匹配不带有A标签的已安装软件包（管理
~i!~M
员选择的软件包）
匹配已安装并且是可升级的软件包 ~U
匹配已删除但未清除的软件包 ~c
匹配已移除，已清除或可移除的软件包 ~g
匹配破坏依赖关系的软件包 ~b
匹配破坏type依赖关系的软件包 ~B 类型
匹配pattern软件包的type依赖关系 ~D[类型:] 模式
匹配pattern软件包破坏的type依赖关系 ~DB[类型:] 模式
匹配依赖于pattern软件包的type依赖的软
~R[类型:] 模式
件包
匹配依赖于pattern软件包破坏的type依赖
~RB[类型:] 模式
的软件包
匹配其它已安装软件包所依赖的软件包 ~R~i
匹配没有被其它已安装软件包所依赖的软件
!~R~i
包
匹配其它已安装软件包所依赖或建议安装的
~R~i|~R 推荐:~i
软件包
匹配pattern过滤版本之后的软件包 ~S 过滤 模式
匹配所有软件包（真） ~T
不匹配软件包（假） ~F
Table2.11: aptitude正则表达式
Debian参考手册 53/233
2.2.8 aptitude 的依赖解决
如果通过菜单“F10→选项→首选项→正在处理依赖关系”进行相应的设置，则在aptitude中选择一个软件包
时，不仅会将其“Depends:”列表中的软件包选上，“Recommends:”列表中的软件包也会被选上。在aptitude
下，这些自动安装的软件包在不再需要时会自动移除。
aptitude命令中控制“自动安装”行为的标签也可以通过apt软件包中的apt-mark(8)命令来设置。
2.2.9 软件包活动日志
你可以在日志文件里查询到软件包活动历史。
文件 内容
/var/log/dpkg.log dpkg级的软件包活动日志
/var/log/apt/term.log 通用APT活动日志
/var/log/aptitude aptitude命令活动日志
Table2.12: 软件包活动日志文件
事实上，很难从这些日志上快速获得有用的信息。较简便的方法参见第 9.3.9 节。
2.3 aptitude 操作范例
下面是一些aptitude(8)的操作范例。
2.3.1 查找感兴趣的软件包
你可以根据aptitude这个包管理工具中的软件包描述或者是任务面板下的列表信息，来查找你所需要的软件包。
2.3.2 通过正则表达式匹配软件包名称来列出软件包
下面的命令列出了通过正则表达式匹配软件包名称来列出软件包。
$ aptitude search ’~n(pam|nss).*ldap’
p libnss-ldap - NSS module for using LDAP as a naming service
p libpam-ldap - Pluggable Authentication Module allowing LDAP interfaces
这种方式查找精确的软件包名称很方便。
2.3.3 使用正则表达式匹配浏览
在”新扁平软件包列表”中使用”l”提示查看，正则表达式”~dipv6”可以限制性地匹配软件描述，并交互式地展示信
息。
2.3.4 完整地清理已删除软件包
您能清除所有已移除软件包的剩余配置文件。
检查以下命令的结果。
Debian参考手册 54/233
# aptitude search ’~c’
如果您确认所列出的软件包应当被完整删除，请运行以下命令。
# aptitude purge ’~c’
您可能想要在交互模式中做类似的操作进行细粒度的控制。
在”新软件包视图”使用”l”提示并输入正则匹配式”~c”，这将仅匹配软件包，比如，”移除但不清空配置”。所有符
合匹配的软件包可以在顶层标题上使用”[”显示。
当您在顶层标题如“未安装的包”中输入“_”，当前标题下的软件包只有匹配正则式才会被清除。您还可以使用“=”
来交互式地排除软件包以避免删除它们。
这种技术方便易用且适用于许多其他的命令键。
2.3.5 调整自动/手动安装状态
下面是调整软件包的自动/手动安装状态的方法（在使用非aptitude软件包管理器之后）。
1. 用root以交互模式运行aptitude。
2. 用”u”命令更新可用的软件包列表，”U”命令标记所有可升级的软件包以执行升级，”f”命令清除新软件包列表，
”g”命令执行所有可升级的软件包以执行升级。
3. 按下“l”，并输入“~i(~R~i|~Rrecommends:~i)”来限制软件包的显示，按下“M”将“已安装软件包”的
状态改为自动安装。
4. 按下“l”，并输入“~prequired|~pimportant|~pstandard|~E”来限制软件包的显示，按下“m”将“已
安装软件包”的状态改为手动安装。
5. 按下“l”，并输入“~i!~M”来限制软件包的显示，在“已安装软件包”上按下“[”来陈列无用的软件包，按
下“-”将它们移除。
6. 按下“l”，并输入“~i”来限制软件包的显示，之后在“软件集”上按下“m”将那些软件包标记为手动安装。
7. 退出aptitude。
8. 用root用户执行”apt-get -s autoremove|less”命令，来查看有那些软件包是不再需要的。
9. 在交互模式下重启aptitude程序，用“m”命令标记所需要的软件包。
10. 用root用户重新执行”apt-get -s autoremove|less”这个命令来复查移除的包中是不是只含有自己所希
望移除的软件包。
11. 用root用户执行”apt-get autoremove|less”命令来自动移除不再需要的软件包。
在你所需要执行的”Tasks”上，运行”m”命令是一个可选的操作，目的就是为了防止大量软件包被卸载的情况出现。
2.3.6 全面的系统升级
注意
当你迁移到新的发行版的时候，虽然正如下面所描述的那样，Debian是可升级的，但是你还是应该考虑纯净的安
装新的系统。这给了你机会去移除废弃的软件包同时还可以接触到最新软件包的完美集合体。当然，在做迁移之前，
你也应该对你的系统做完整的备份，并把它移到安全的地方去（查看第 10.2 节)。“我”也建议用不同的分区做另
外一个启动项，来实现平稳的升级。
Debian参考手册 55/233
你可以通过改变源列表的内容使之指向新的发行版所在地址的方法来进行系统的全面升级，然后运行”apt update;
apt dist-upgrade”命令。
在bookworm-作为-stable发布循环中,从stable升级到testing或者unstable，你应该用”trixie”或者”sid”
替换源列表文件里的”bookworm”示例，参考第 2.1.5 节。
事实上，由于一些软件包版本变迁的问题，你可能会遇到一些困难，主要是由于软件包的依赖问题。升级之后的差异
越大，你越有可能遇到麻烦。在新版本发行后，系统从旧的stable过渡到新的 stable，你可以查看ReleaseNotes
然后按照里面的步骤去做，来尽可能的减少麻烦。
在它正式发布之前，你决定要从先前的 stable迁移到将要发布的 testing，这里没有ReleaseNotes可以帮到你。
在前一个stable发布以后， stable发行版跟将要发布的 testing发行版之间的差异可能变得相当大同时也使
得升级系统变得更加的复杂。
在全面升级系统的时候，你应该谨慎的操作，同时你也应该从邮件列表中获取最新的资料然后根据你的常识作出正确
的判断。
1. 查看先前的“发行说明”。
2. 备份整个系统(尤其是数据和配置信息）。
3. 当bootloader坏了的时候，手边应该有可以引导电脑启动的存储介质。
4. 事先通知系统上的用户。
5. 用 script(1)记录升级的过程。
6. 用“unmarkauto”命令来保留你想要的软件包，例如”aptitude unmarkauto vim”这个命令是用来防止移除
vim这个软件的。
7. 为了减少软件包之间可能会发生的冲突，应该尽量减少要安装的软件包的数目，例如，移除桌面环境这个软件
包。
8. 移除”/etc/apt/preferences”文件（禁用apt-pinning）。
9. 试着一步步的升级：oldstable→stable→testing→unstable.
10. 升级源列表文件，使其指向新的档案库然后运行”aptitude update”命令。
11. 可选的安装选项，首先是新的 corepackages，例如“aptitude install perl”。
12. 运行”apt-get -s dist-upgrade”命令来评估升级造成的影响。
13. 最后运行”apt-get dist-upgrade”命令。
小心
在 stable版本升级的时候，跳过主要的Debian发行版是不明智的。
小心
在先前的“发行手册”里，GCC、Linux内核、initrd-tools、Glibc、Perl、APT工具链等等，有一些关于系统
全面升级的重要注意事项。
关于 unstable版本的日常升级，查看第 2.4.3 节。
Debian参考手册 56/233
命令 操作
COLUMNS=120 dpkg -l
列出已安装软件包的列表用于错误报告
package_name_pattern
dpkg -L package_name 显示一个已安装软件包的内容
dpkg -L package_name | egrep
列出一个已安装软件包的man手册页
’/usr/share/man/man.*/.+’
dpkg -S file_name_pattern 列出匹配文件名的已安装软件包
apt-file search
列出档案库中匹配文件名的软件包