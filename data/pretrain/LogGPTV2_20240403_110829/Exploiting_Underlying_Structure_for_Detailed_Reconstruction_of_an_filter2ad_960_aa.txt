title:Exploiting Underlying Structure for Detailed Reconstruction of an
Internet-scale Event
author:Abhishek Kumar and
Vern Paxson and
Nicholas Weaver
Exploiting Underlying Structure for Detailed Reconstruction of an
Internet-scale Event
Abhishek Kumar
Georgia Institute of Technology
PI:EMAIL
Vern Paxson
ICSI
Nicholas Weaver
ICSI
PI:EMAIL
PI:EMAIL
Abstract
Network “telescopes” that record packets sent to unused blocks
of Internet address space have emerged as an important tool for
observing Internet-scale events such as the spread of worms and
the backscatter from ﬂooding attacks that use spoofed source ad-
dresses. Current telescope analyses produce detailed tabulations
of packet rates, victim population, and evolution over time. While
such cataloging is a crucial ﬁrst step in studying the telescope ob-
servations, incorporating an understanding of the underlying pro-
cesses generating the observations allows us to construct detailed
inferences about the broader “universe” in which the Internet-
scale activity occurs, greatly enriching and deepening the analysis
in the process.
In this work we apply such an analysis to the propagation of
the Witty worm, a malicious and well-engineered worm that when
released in March 2004 infected more than 12,000 hosts world-
wide in 75 minutes. We show that by carefully exploiting the
structure of the worm, especially its pseudo-random number gen-
eration, from limited and imperfect telescope data we can with
high ﬁdelity: extract the individual rate at which each infectee in-
jected packets into the network prior to loss; correct distortions
in the telescope data due to the worm’s volume overwhelming the
monitor; reveal the worm’s inability to fully reach all of its po-
tential victims; determine the number of disks attached to each
infected machine; compute when each infectee was last booted,
to sub-second accuracy; explore the “who infected whom” infec-
tion tree; uncover that the worm speciﬁcally targeted hosts at a
US military base; and pinpoint Patient Zero, the initial point of
infection, i.e., the IP address of the system the attacker used to
unleash Witty.
1 Introduction
Network “telescopes”have recently emerged as important
tools for observing Internet-scale events such as the spread
of worms, the “backscatter” of responses from victims
attacked by a ﬂood of requests with spoofed source ad-
dresses, and incessant “background radiation” consisting
of other anomalous trafﬁc [10, 14, 15]. Telescopes record
packets sent to unused blocks of Internet address space,
with large ones using /8 blocks covering as much as 1/256
of the total address space. During network-wide anomalous
events, such as the propagation of a worm, telescopes can
collect a small yet signiﬁcant slice of the worm’s entire traf-
ﬁc. Previously, such logs of worm activity have been used
to infer aggregate properties, such as the worm’s infection
rate (number of infected systems), the total scanning rate
(number of worm copies sent per second), and the evolu-
tion of these quantities over time.
The fundamental premise of our work is that by care-
fully considering the underlying structure of the sources
sending trafﬁc to a telescope, we can extract a much more
detailed reconstruction of such events. To this end, we
analyze telescope observations of the Witty worm, a ma-
licious and well-engineered1 worm that spread worldwide
in March 2004 in 75 minutes. We show that it is possible to
reverse-engineer the state of each worm infectee’s Pseudo-
Random Number Generator (PRNG), which then allows us
to recover the full set of actions undertaken by the worm.
This process is greatly complicated by the worm’s use of
periodic reseeding of its PRNG, but we show it is possible
to determine the new seeds, and in the process uncover de-
tailed information about the individual hosts, including ac-
cess bandwidth, up-time, and the number of physical drives
attached. Our analysis also enables inferences about the
network, such as shared bottlenecks and the presence or ab-
sence of losses on the path from infectees to the telescope.
In addition, we uncover details unique to the propagation
of the Witty worm: its failure to scan about 10% of the IP
address space, the fact that it initially targeted a US mili-
tary base, and the identity of Patient Zero — the host the
worm’s author used to release the worm.
Our analysis reveals systematic distortions in the data
collected at telescopes and provides a means to correct this
distortion, leading to more accurate estimates of quantities
such as the worm’s aggregate scan rate during its spread.
It also identiﬁes consequences of the speciﬁc topological
placement of telescopes. In addition, detailed data about
hitherto unmeasured quantities that emerges from our anal-
ysis holds promise to aid future worm simulations achieve
USENIX Association
Internet Measurement Conference 2005  
351
a degree of realism well beyond today’s abstract models.
The techniques developed in our study, while speciﬁc to
the Witty worm, highlight the power of such analysis, and
provide a template for future analysis of similar events.
We organize the paper as follows. § 2 presents back-
ground material: the operation of network telescopes and
related work, the functionality of Witty, and the structure of
linear-congruential PRNGs. In § 3 we provide a roadmap
to the subsequent analysis. We discuss how to reverse-
engineer Witty’s PRNG in § 4, and then use this to estimate
access bandwidth and telescope measurement distortions
in § 5. § 6 presents a technique for extracting the seeds
used by individual infectees upon reseeding their PRNGs,
enabling measurements of each infectee’s system time and
number of attached disks. This section also discusses our
exploration of the possible infector-infectee relationships.
We discuss broader consequences of our study in § 7 and
conclude in § 8.
2 Background
Network Telescopes and Related Work. Network tele-
scopes operate by monitoring unused or mostly-unused
portions of the routed Internet address space, with the
largest able to record trafﬁc sent to /8 address blocks
(16.7M addresses) [10, 22]. The telescope consists of
a monitoring machine that passively records all packets
headed to any of the addresses in the block. Since there
are few or no actual machines using these addresses, trafﬁc
headed there is generally anomalous, and often malicious,
in nature. Examples of trafﬁc observed at network tele-
scopes include port and address scans, “backscatter”from
ﬂooding attacks, misconﬁgurations, and the worm packets
that are of immediate interest to this work.
The ﬁrst major study performed using a network tele-
scope was the analysis of backscatter by Moore et al. [14].
This study assessed the prevalence and characteristics of
spoofed-source denial-of-service (DoS) attacks and the
characteristics of the victim machines. The work built on
the observation that most DoS tools that spoof source ad-
dresses pick addresses without a bias towards or against the
telescope’s observational range. The study also inferred
victim behavior by noting that the response to spoofed
packets will depend on the state of the victim, particularly
whether there are services running on the targeted ports.
Telescopes have been the primary tool for understand-
ing the Internet-wide spread of previous worms, begin-
ning with Code Red [2, 20]. Since, for a random-scanning
worm, the worm is as likely to contact a telescope address
as a normal address, we can extrapolate from the telescope
data to compute the worm’s aggregate scanning rate as it
spreads. In addition, from telescope data we can see which
systems were infected, thus estimate the average worm
scanning rate. For high-volume sources, we can also es-
timate a source’s effective bandwidth based on the rate at
which its packets arrive and adjusting for the telescope’s
“gatheringpower”(portion of entire space monitored).
A variation is the distributed telescope, which monitors
a collection of disparate address ranges to create an overall
picture [1, 4]. Although some phenomena [6, 2]) scan uni-
formly, others either have biases in their address selection
[11, 12] or simply exclude some address ranges entirely
[5, 16]. Using a distributed telescope allows more opportu-
nity to observe nonuniform phenomenon, and also reveals
that, even correcting for “local preference” biases present
in some forms of randomized scanning, different telescopes
observe quantitatively different phenomena [4].
The biggest limitation of telescopes is their passive na-
ture, which often limits the information we can gather.
One solution useful for some studies has been active tele-
scopes: changing the telescope logic to either reply with
SYN-ACKs to TCP SYNs in order to capture the resulting
trafﬁc [4], or implementing a more complex state machine
[15] that emulates part of the protocol. These telescopes
can disambiguate scans from different worms that target
the same ports by observing subsequent transactions.
In this work we take a different approach for enhancing
the results of telescope measurements: augmenting traces
from a telescope with a detailed analysis of the structure of
the sources sending the packets. One key insight is that the
PRNG used to construct “random”addresses for a worm
can leak the internal state of the PRNG. By combining the
telescope data with our knowledge of the PRNG, we can
then determine the internal state for each copy of the worm
and see how this state evolves over time.
While there have been numerous studies of Internet
worms, these have either focused on detailed analysis of
the worm’s exact workings, beginning with analysis of the
1988 Morris Worm [7, 19], or with aggregate propagation
dynamics [23, 11, 18, 20, 13].
In contrast, our analysis
aims to develop a detailed understanding of the individual
infected hosts and how they interacted with the network.
Datasets. We used traces from two telescopes, operated
by CAIDA [10] and the University of Wisconsin [22]. Both
telescopes monitor /8 blocks of IP addresses. Since each
/8 contains 1/256 of all valid IPv4 addresses, these tele-
scopes see an equivalent fraction of scan trafﬁc addressed
to random destinations picked uniformly from the 32-bit
IP address space. The CAIDA telescope logs every packet
it receives, while the Wisconsin telescope samples the re-
ceived packets at the rate of 1/10. The CAIDA trace [17]
begins at 04:45 AM UTC, running for 75 minutes and total-
ing 45.5M packets. The Wisconsin trace runs from 04:45
AM UTC for 75 minutes, totaling 4.1M packets.
Functionality of
the Witty worm.
As chroni-
cled by Shannon and Moore [18], an Internet worm
was released on Friday March 19, 2004 at approx-
imately 8:45 PM PST (4:45 AM UTC, March 20).
352
Internet Measurement Conference 2005 
USENIX Association
1.
2.
3.
4.
5.
6.
7.
8.
Seed the PRNG using system time.
Send 20,000 copies of self to random destinations.
Open a physical disk chosen randomly between 0 & 7.
If success:
Overwrite a randomly chosen block.
Goto line 1.
Else:
Goto line 2.
Figure 1: Functionality of the Witty worm
Its payload contained the phrase “(ˆ.ˆ) insert
witty message here (ˆ.ˆ)” so it came to be
known as the Witty worm. The worm targeted a buffer
overﬂow vulnerability in several Internet Security Systems
(ISS) network security products.
The vulnerability exploited was a stack-based overﬂow
in the ICQ analyzer of these security products. When they
received an ICQ packet, deﬁned as any UDP packet with
source port 4000 and the appropriate ICQ headers, they
copied the packet into a ﬁx ed-sized buffer on the stack
in preparation for further analysis. The products executed
this code path regardless of whether a server was listen-
ing for packets on the particular UDP destination port. In
addition, some products could become infected while they
passively monitored network links promiscuously, because
they would attempt to analyze ICQ packets seen on the link
even though they were not addressed to the local host.
Figure 1 shows a high-level description of the function-
ality of the Witty worm, as revealed by a disassembly [9].
The worm is quite compact, ﬁtting in the ﬁrst 675 bytes of
a single UDP packet. Upon infecting a host, the worm ﬁrst
seeds its random number generator with the system time
on the infected machine and then sends 20,000 copies of
itself to random destinations. (These packets have a ran-
domly selected destination port and a randomized amount
of additional padding, but keep the source port ﬁx ed.) Af-
ter sending the 20,000 packets, the worm uses a three-bit
random number to pick a disk via the open system call.
If the call returns successfully, the worm overwrites a ran-
dom block on the chosen disk, reseeds its PRNG, and goes
back to sending 20,000 copies of itself. Otherwise, the
worm jumps directly to the send loop, continuing for an-
other 20,000 copies, without reseeding its PRNG.
The LC PRNG. The Witty worm used a simple
feedback-based pseudo-random number generator (PRNG)
of the form known as linear congruential (LC):
Xi+1 = Xi ∗ a + b mod m
(1)
For a given m, picking effective values of a and b re-
quires care lest the resulting sequences lack basic proper-
ties such as uniformity. One common parameterization is:
a = 214, 013, b = 2, 531, 011, m = 232.
With the above values of a, b, m, the LC PRNG gener-
ates a permutation of all the integers in [0, m − 1]. A key
point then is that with knowledge of any Xi, all subsequent
pseudo-random numbers in the sequence can be generated
by repeatedly applying Eqn 1. It is also possible to invert
Eqn 1 to compute Xi if the value of Xi+1 is known:
Xi = (Xi+1 − b) ∗ a−1 mod m
(2)
where, for a = 214, 013, a−1 = 3, 115, 528, 533.
Eqns 1 and 2 provide us with the machinery to gener-
ate the entire sequence of random numbers as generated
by an LC PRNG, either forwards or backwards, from any
arbitrary starting point on the sequence. Thus, if we can
extract any Xi, we can compute any other Xi+n, given n.
However, it is important to note that most uses of pseudo-
random numbers, including Witty’s, do not directly expose
any Xi, but rather extract a subset of Xi’s bits and inter-
mingle them with bits from additionally generated pseudo-
random numbers, as detailed below.
3 Overview of our analysis
The ﬁrst step in our analysis, covered in § 4, is to develop
a way to uncover the state of an infectee’s PRNG. It turns
out that we can do so from the observation of just a sin-
gle packet sent by the infectee and seen at the telescope.
(Note, however, that if recovering the state required observ-
ing consecutive packets, we would likely often still be able
to do so: while the telescopes record on average only one in
256 packets transmitted by an infectee, occasionally — i.e.,
roughly one time out of 256 — they will happen to record
consecutive packets.)
An interesting fact revealed by careful inspection of the
use of pseudo-random numbers by the Witty worm is that
the worm does not manage to scan the entire 32-bit address
space of the Internet, in spite of using a correct implemen-
tation of the PRNG. This analysis also reveals the identity
of a special host that very likely was used to start the worm.
Once we have the crucial ability to determine the state of
an infectee’s PRNG, we can use this state to reproduce the
worm’s exact actions, which then allows us to compare the
resulting generated packets with the actual packets seen at
the telescope. This comparison yields a wealth of informa-
tion about the host generating the packets and the network
the packets traversed. First, we can determine the access
bandwidth of the infectee, i.e., the capacity of the link to
which its network interface connects.
In addition, given
this estimate we can explore signiﬁcant ﬂaws in the tele-
scope observations, namely packet losses due to the ﬁnite
bandwidth of the telescope’s inbound link. These losses
cause a systematic underestimation of infectee scan rates,
but we design a mechanism to correct for this bias by cali-
brating against our measurements of the access bandwidth.
We also highlight the impact of network location of tele-
scopes on the observations they collect (§ 5).
We next observe that choosing a random disk (line 3 of
Figure 1) consumes another pseudo-random number in ad-
USENIX Association
Internet Measurement Conference 2005  
353
rand(){