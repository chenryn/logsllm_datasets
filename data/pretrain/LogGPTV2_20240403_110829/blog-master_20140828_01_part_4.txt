----+----+---------+----+----+----+----------------------------+----  
  1 |  1 | te\\s\t | c4 | c6 |  1 | 2014-08-28 23:06:09.790227 |   
(1 row)  
postgres=# insert into "TBL" values (3,1,'test','c4','c6',1,now(),'c8');  
INSERT 0 1  
postgres=# select * from "TBL";  
 c1 | c2 |   C3    | c4 | c6 | c7 |          crt_time          | c8   
----+----+---------+----+----+----+----------------------------+----  
  1 |  1 | te\\s\t | c4 | c6 |  1 | 2014-08-28 23:06:09.790227 |   
  3 |  1 | test    | c4 | c6 |  1 | 2014-08-28 23:17:24.722663 | c8  
(2 rows)  
```  
回退到1301666  
```  
postgres=#  do language plpgsql $$  
declare  
  v_op text;  
  v_encoding_curr text := pg_client_encoding();  
  v_encoding_tmp text;  
  v_old text;  
  v_new text;  
  v_xid int8 := 1301666;   
begin  
  for v_op, v_encoding_tmp, v_old, v_new in   
    select op,encoding,old_rec::text,new_rec::text from undo_t where xid>=v_xid order by xid desc,id desc  
  LOOP  
    execute 'set client_encoding='''||v_encoding_tmp||'''';   
    case v_op   
    when 'INSERT' then   
      delete from public."TBL" t where t=v_new::public."TBL";   
    when 'DELETE' then  
      insert into public."TBL" values ((v_old::public."TBL").*);   
    when 'TRUNCATE' then  
      insert into public."TBL" values ((v_old::public."TBL").*);   
    when 'UPDATE' then  
      delete from public."TBL" t where t=v_new::public."TBL";   
      insert into public."TBL" values ((v_old::public."TBL").*);   
    else  
    end case;   
  end loop;   
  execute 'set client_encoding='''||v_encoding_curr||'''';   
end;   
$$;  
DO  
postgres=# select * from "TBL";  
 c1 | c2 |   C3    | c4 | c6 | c7 |          crt_time          | c8   
----+----+---------+----+----+----+----------------------------+----  
  1 |  1 | te\\s\t | c4 | c6 |  1 | 2014-08-28 23:06:09.790227 |   
(1 row)  
```  
测试完全没有问题, 数据类型正常的转换, 字段和值的顺序匹配没有出现错乱.  
## 其他  
1\. 使用标记为来标记delete在程序设计中用得比较多, 主要是防止程序的使用者误点删除操作, 可以把标记位改回来.  
但是这种方法仅仅适用于不是直接执行SQL来删除的场景, 如果是直接使用delete from table 来删除的话, 有没有标记位都于事无补, 因为DELETE掉了.  
## 注意  
1\. 如果事务中包含多个表的变更, 为了达到一致性的闪回, 那么多个表都要记录他们的UNDO, 所以需要在多个表上创建对应的触发器.  
2\. 我们记录的是事务号分配的顺序, 而不是提交顺序, 所以闪回到一个事务号时, 并不是闪回到这个事务提交的点, 而是这个事务分配的点上, 这与通过XLOG来还原是不一样的, 必须注意. 如果要达到提交点, 可以在跟踪表添加一列存储txid_current_snapshot(), 在恢复时跳过当时未提交的事务即可.  
3\. 还需要注意编码和逃逸的问题.   
插入数据时的client_encoding和闪回数据时的client_encoding如果不一致可能会有问题. 所以我们在闪回时, 每次都指定跟踪时记录到的当时的client_encoding. 闪回操作结束后改回来.  
触发器记录的是逃逸前的字符串, 在闪回时需要注意逃逸.  可以使用quote_nullable来解决, 使用record时不会有问题.  
4\. 注意表名, 列名的大小写问题, 使用quote_ident 来解决.  
## 参考  
1\. http://blog.163.com/digoal@126/blog/static/16387704020128772037884/  
2\. http://blog.163.com/digoal@126/blog/static/163877040201252575529358/  
3\. http://www.postgresql.org/docs/9.4/static/hstore.html  
4\. http://blog.163.com/digoal@126/blog/static/163877040201321125220134/  
5\. http://blog.163.com/digoal@126/blog/static/1638770402012731944439/  
6\. http://blog.163.com/digoal@126/blog/static/1638770402012731203716/  
7\. http://blog.163.com/digoal@126/blog/static/1638770402013283547959/  
8\. http://blog.163.com/digoal@126/blog/static/1638770402013211102130526/  
9\. src/pl/plpgsql/src/pl_gram.y  
```  
                        case T_DATUM:  
                                check_assignable(yylval.wdatum.datum, yylloc);  
                                if (yylval.wdatum.datum->dtype == PLPGSQL_DTYPE_ROW ||  
                                        yylval.wdatum.datum->dtype == PLPGSQL_DTYPE_REC)  
                                        ereport(ERROR,  
                                                        (errcode(ERRCODE_SYNTAX_ERROR),  
                                                         errmsg("\"%s\" is not a scalar variable",  
                                                                        NameOfDatum(&(yylval.wdatum))),  
                                                         parser_errposition(yylloc)));  
                                fieldnames[nfields] = NameOfDatum(&(yylval.wdatum));  
                                varnos[nfields++]       = yylval.wdatum.datum->dno;  
                                break;  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")