output and thus their Npkt with leakage remains the same. In §7.3,
we provide more details on these results.
We further conduct an experiment to understand the effects of
our static analysis enhancement. As shown in Table 4, we break-
down the accuracy improvement with each analysis enhancement
using the rcv_nxt leakage analysis in TCP-kernel. The evalua-
tion includes TP, FP, FN, and low-entropy leakage, and due to the
difﬁculty of determining ground truth, we use the result of the tool
with all features as baseline to evaluate FN for other cases. The re-
sults show that all static analysis enhancements, especially implicit
ﬂow tainting tracking, are necessary and play an important role.
7.2 Tool Efﬁciency
Before the taint analysis, the code pre-process is a one-time ef-
fort which takes around 8.7 hours for the entire Linux kernel, and
only less than a minute for oRTP, PJSIP, and VLC.
For taint-based summarizer, since summarizing the entire Linux
kernel is infeasible, we limit the scope of TCP-Kernel, SCTP-
Kernel, and DCCP-Kernel
to the net folder under the self-
contained Linux kernel networking subsystem. TCP-kernel takes
the longest time of 7.8 hours, which we believe is acceptable con-
sidering that the computed summary can be reused later for further
analysis. In addition, the time can further improved by analyzing
functions in parallel as shown in Saturn [52], which is another ad-
vantage of our choice of summary-based approach.
With the function summaries, the accept path and protocol state
leakage path analysis are very efﬁcient, and perform these analysis
on all code bases is less than 10 seconds. Note that this efﬁciency
also beneﬁts a lot from our layered analysis mode, for example, for
rcv_nxt leakage analysis in TCP-Kernel, it takes 984.5 seconds
in total if not using layered analysis mode.
7.3 Result analysis
In this section, we detail the vulnerability analysis results sum-
marized in Table 5. Due to the space limit we cannot provide code-
level details for all results, and for more details about the experi-
ment setup and vulnerability results, please visit our result website
http://tinyurl.com/PacketInjectionVulnerability [1].
7.3.1 TCP-Kernel
Accept path analysis. Our tool outputs 9 inject-payload accept
paths which are all TPs. 6 out of them are in TCP fast path pro-
cessing. The conditions for entering fast path is shown in Fig. 6.
On line 1, to match the prediction ﬂag it requires the receiver’s ex-
act send window size, which is possible to achieve in some cases,
e.g., when TCP connection is idle. The hard requirement of falling
into fast path is that the sequence number, seq, needs to equal to
the protocol state rcv_nxt on line 2. The other 3 output paths are
on the slow path, which correctly implements the latest standard
speciﬁed in RFC 5961 to defend against off-path attacks. In short,
they all require the seq to fall in the receive window, and ack to
fall into another window like shown in Fig. 2. Thus, their Npkt is
roughly 2
win1 × 2
win2 .
For channel-close case, our tool outputs 1 path due to the effec-
tiveness of our pruning and it is a TP. This path resets the TCP con-
nection in tcp_validata_incoming(), and requires seq to
be equal to rcv_nxt. Thus, its Npkt is 232. Note this an update
as speciﬁed in RFC 5961 from the previous TCP implementation
where a TCP RST is accepted as long as the seq falls in the receive
32
32
396Code base
Protocol state
TCP-Kernel
rcv_nxt
snd_nxt/una
SCTP-Kernel
base_tsn, cumulative
_tsn_ack_point
#
18
65
3
DCCP-Kernel
dccps_gsr/swh/swl
5
Output Validated Hard to
trigger #
FP #
Low-
entropy #
(cid:10)(cid:11)(cid:12)(cid:11)(cid:13)(cid:9)(cid:14)(cid:14)(cid:15)(cid:2)(cid:16)(cid:15)
(cid:17)(cid:11)(cid:18)(cid:19)(cid:19)(cid:7)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:8)(cid:2)(cid:9)(cid:7)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:2)(cid:5)(cid:6)(cid:7)
#
4
7
N/A
N/A
0
6
N/A
N/A
0
9
0
1
14
43
3
4
Table 6: Protocol state leakage analysis result. Ssrc for RTP-VLC and my/peer_vtag for SCTP-
Kernel is not included since our tool does not output any high-entropy leakage for them.
Figure 5: Leakage of snd_nxt through
sink TCPChallengeACK.
1: If ((tcp_flag_word(th) & TCP_HP_HITS) == tp->pred_flags &&
2: 
3: 
 TCP_SKB_CB(skb)->seq == tp->rcv_nxt &&
 !after(TCP_SKB_CB(skb)->ack_seq, tp->snd_nxt) {
...
4: }
Figure 6: Code snippet for conditions of entering TCP fast path.
window. This change signiﬁcantly increases the blind in-window
RST attacks.
Protocol state leakage. Both inject-payload and close-channel ac-
cept paths are protected by protocol state rcv_nxt, so we ﬁrst use
this as the leakage source in our leakage path analysis. In our exper-
iments, we use network statistics output in netstat, snmp and
sockstat in /proc/net/ as storage channel leakage sinks. To
ﬁnd the variables that are output to these sinks for taint analysis, we
perform static analysis in ﬁle net/ipv4/proc.c starting from
proc_create(), locate the proc ﬁle function operation regis-
tration and ﬁnd the target variables in the output function, e.g.,,
netstat_seq_show() for netstat. With these sink vari-
ables, we ﬁrst check taint summary for the entry function, and ﬁnd
that these variables are tainted only by rcv_nxt through implicit
ﬂow. Then we use these tainted variables as leakage sinks in the
leakage path analysis.
The leakage results are summarized in Table 6. For rcv_nxt
our tool outputs 18 leakage candidates, and 4 of them are high-
entropy TPs. 14 of them are low-entropy leakage, which are mostly
pruned out by layered analysis. Note that since falling into fast
path requires seq equaling to rcv_nxt, all fast path related leak-
age are ﬁltered out automatically as invalid low-entropy leakage.
Among the 4 TPs, one of them is reported by previous work [38]
by manual discovery. The other 3 are all new discovery, and one
uses the same high-entropy constraint in tcp_send_dupack()
as the one reported, but has a newly-discovered sink TCPDSACK-
OldSent in netstat. For the other 2, the attacker packet also
makes the code calling into tcp_send_dupack() but with dif-
ferent calling context by deliberately failing the PAWS check, e.g.,
by using an old time stamp, before the seq check (line 2 in Fig. 2).
After knowing rcv_nxt, the attacker can successfully reset the
connection and causing DoS. However, to injection payload, the
attacker still lacks the knowledge of snd_nxt or snd_una to
pass the ack check. We then run another leakage path analysis
with these two values together as leakage sources. Like rcv_nxt,
the sink variables are only tainted by implicit ﬂow. In this setting,
we assume that the attacker already knows the correct rcv_nxt
using the leaks discovered above. For leakage sinks, we use the
same ones as those in the rcv_nxt analysis.
Since at this time the exact rcv_nxt is known, the attacker’s
packet can exploit leakage vulnerabilities in more program paths
including both fast path and slow path area. Our tool outputs 66
leakage candidates for snd_una, and 43 of them are low-entropy
leakage which are ﬁltered during layered analysis. Among the 9
FPs, 3 cases are caused by requiring packet length to be smaller
than data offset ﬁeld or having an incorrect checksum value, but ac-
tually such packets are dropped in tcp_v4_rcv() before enter-
ing our entry function tcp_rcv_established(). Other 4 FP
cases requires a fast path protocol state tcp_header_len to be
greater than 4, but in the implementation it can only be 0 or 4. The
last 2 cases are caused by conﬂicting constraints across procedures,
which can be solved by applying more advanced constraint solver
such as a SMT solver [13], which we leave as future improvement.
The 13 TPs are all new discovery, and 8 are in fast path while 5 are
in slow path. All the 8 fast path ones use the comparison between
snd_nxt and ack one line 3 in Fig. 6, and after this compari-
son, there are 8 different sinks in tcp_rcv_established(),
tcp_send_ack(), etc.
232
In the code base,
The 5 leaks in slow path both goes into tcp_ack(), and
the high-entropy constraint
they use is on line 1 and 2 in
tcp_ack() of Fig. 2. As shown in Fig. 5, probability of reach-
ing the return on line 3 is 231−win2
, which leaks around
1 bit of information under the assumption that win2 is usu-
ally smaller than 220.
right before the
return on line 3 there is a tcp_send_challenge_ack(),
in which sink TCPChallengeACK is triggered when the chal-
lenge ACKs that are already sent
is under a threshold set
in /proc/sys/net/ipv4/tcp_challenge_ack_limit,
which is usually around 100.
Validation. We setup a TCP connection between desktop com-
puter A and B, and have another attack computer using raw socket
to send attack packets to B to validate these leaks. Computer B
is installed with Linux kernel 3.15.8 and added debug information
along the program path to validate whether the leakage path is trig-
gered exactly as our tool output, and at the same time monitor the
corresponding leakage sinks in A’s proc ﬁle system. For rcv_nxt,
we validate all 4 high-entropy leakage. For snd_nxt/snd_una,
7 out of the 13 cases are validated. The other 6 cases are relatively
hard to trigger, for example, 5 of them requires kernel conﬁgura-
tion CONFIG_NET_DMA, which is only available for processors of
certain architecture, e.g., Intel Xscale I/O processors 32/33x.
7.3.2 RTP
Since the 3 RTP code bases ﬂow the same network protocol and
thus similar to each other in most of the core logic, we cover their
results all together in this section. RTP usually doesn’t have the
option to close the channel with an incoming packet, so our accept
path analysis are all inject-payload accept path analysis.
RTP-oRTP. The output for RTP-oRTP has 15 paths, among which
10 are TPs and 5 are FPs. The 5 FPs are all caused by two chan-
nel variables having the same meaning, one indicating whether
ssrc is set, and another indicating whether the ﬁrst packet is de-
livered. The changing of two variables is usually correlated and
thus they have equivalent values, but our analysis treats them sep-
arately, resulting in FP paths with semantically-conﬂicting con-
straints. Among the 10 TP cases, 3 requires guessing the correct
3971: matched_ssrc = NULL;
2: for (i=0; issrc == ssrc) {
 matched_ssrc = ssrc;
4  
5: 
 break;
6:    }
7: }
8: if (matched_ssrc != NULL) {
9: ...
Figure 7: False positive causes for RTP-VLC accept path analysis.
32-bit protocol state ssrc value, thus Npkt is 232. However, an-
other 3 TPs indicate that in its logic by default after 50 packets
with a new ssrc and consecutive sequence numbers, RTP-oRTP
will change the ssrc to the new one, making the Npkt reducing
to 51. The other 6 TPs are all under very special channel condi-
tions, for example Npkt can be as low as 1 if the attacker precisely
captures the moment when ssrc is not set yet.
RTP-PJSIP. For RTP-PJSIP, the output only has 1 path and it is
a TP. In this path, unlike RTP-oRTP, it changes its protocol state
ssrc right away if it sees a new one, and relies its robustness solely
on the sequence number. According to its logic output by our tool,
2 packets with consecutive sequence numbers will trigger a channel
restart, and the 3rd packet’s payload will be accepted. Thus, Npkt
for RTP-PJSIP is 3.
RTP-VLC. The output for RTP-VLC has 8 paths and 4 of them
are TPs. The causes of the 4 FPs are shown in Fig. 7. In these
paths, it takes both the false branch of i<n on line 2 and the true
branch on line 8, which is actually not feasible. This is mainly be-
cause we construct paths in a ﬂow-sensitive framework and merge
the paths from the break on line 5 and i<n on line 2 when reach-
ing line 8. This can be solved by path-sensitive analysis which has
higher precision but also much higher overhead. For the 4 TPs, 2 of
them requires the correct ssrc, thus their Npkt is 232. Like RTP-
PJSIP, the other 2 TPs change ssrc right away, and since RTP-
VLC maintains sequence number state separately for each ssrc,
the Npkt is actually 1. However, changing ssrc in RTP-VLC
is only when the channel is conﬁgured to support more than one
ssrc, and by default RTP-VLC only supports one. Thus, in nor-
mal cases the Npkt is 232 for RTP-VLC.
RTP-VLC protocol state leakage. Among these 3 RTP code
bases, only RTP-VLC is hard to inject in default setting due to the
protection from the protocol state ssrc. In the taint summary of
the entry function, 14 variables are tainted by ssrc, all through
implicit ﬂows. To check the leakage possibility, we set all these
14 variables as leakage sinks in the leakage path analysis but no
high-entropy leak is found.
Validation. We build oRTP 0.24.1 and PJSIP in pjproject 2.4,
establish audio communication between computer A and B, and
read payload in B from application layer APIs. Since proc ﬁle
netstat only shows the local IP address and UDP port for the
RTP channel, the attacker computer sends attack RTP packets to B
with correct destination IP address and port but different source IP
address and port from A’s. In the audio data we sent, we include
packet number so that we know which packet’s payload gets in to
the upper layer. We successfully validate that the payload of the
51-st packet for oRTP, and the 3rd packet for PJSIP gets accepted.
We also conﬁrm that for VLC without correct ssrc the injection
cannot succeed.
7.3.3 SCTP-Kernel
Accept path analysis. Our tool outputs 5 paths for inject-payload
accept path analysis, and 4 are TPs. One SCTP packet can have
multiple chunks, and the 1 FP case is because it requires previous
chunks from the same packet to have ready been accepted, which
is an implementation semantic information that is not known by
our tool. One of the TPs has no special channel condition depen-
dence, and it requires (1) it has the correct 32-bit protocol state
my_vtag, and (2) the sequence number tsn falls into a win-
dow win starting from a protocol state base_tsn, and by de-
fault this win is 4096. At the same time, tsn also needs to
be larger than the previously-received tsn, stored in a third pro-
tocol state, cumulative_tsn_ack_point. We denote the
valid tsn range as rem_win, which is win excluding the parts
the Npkt is
before cumulative_tsn_ack_point. Thus,
232 × 2
rem_win . The other 3 TPs all depend on special channel
conditions and their Npkt is not smaller.
32
For close-channel case, our tool outputs 2 results and both are
TPs. One path handles error cause code in the incoming packet,
and the other handles packets without error cause code. In both
cases, the packet needs to have correct my_vtag or peer_vtag,
which are both 32 bits. Considering the probability that my_vtag
equals peer_vtag, the Npkt is 231.
Protocol state leakage.
The accept paths are protected by
my_vtag, base_tsn, and cumulative_tsn_ack_point,
so we use them as leak sources. For sinks, we also use storage
channel like in TCP-Kernel, and for SCTP we use SNMP statistics
in proc ﬁle /proc/net/sctp/snmp. To get the variables in
these sinks, we perform the same static analysis described in §7.3.1.