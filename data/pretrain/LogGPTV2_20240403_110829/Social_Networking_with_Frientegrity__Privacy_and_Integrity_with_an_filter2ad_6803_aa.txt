# Title: Social Networking with Frientegrity: Privacy and Integrity with an Untrusted Provider

**Authors:**
Ariel J. Feldman, Aaron Blankstein, Michael J. Freedman, and Edward W. Felten  
Princeton University

## Abstract
Current social networking services require users to trust the service provider with the confidentiality and integrity of their data. However, these services have a history of data leaks and privacy controversies, making such trust questionable. A malicious provider could not only violate users' privacy but also equivocate, showing different users divergent views of the system's state, leading to various harms, including surreptitious censorship.

This paper introduces Frientegrity, a framework for social networking applications that can operate with an untrusted service provider. In Frientegrity, the provider observes only encrypted data and cannot deviate from correct execution without being detected. Previous secure social networking systems either decentralized, sacrificing the availability and convenience of a centralized provider, or focused primarily on privacy while ignoring the threat of equivocation. Existing systems robust to equivocation do not scale to the needs of social networking applications where users may have hundreds of friends and are mainly interested in the latest updates.

To address these challenges, we present a novel method for detecting provider equivocation, where clients collaborate to verify correctness. We also introduce an access control mechanism that offers efficient revocation and scales logarithmically with the number of friends. Our prototype implementation demonstrates that Frientegrity provides latency and throughput that meet the needs of a realistic workload.

## Introduction

Popular social networking sites, such as Facebook, have hundreds of millions of active users [20]. These platforms have enabled new forms of communication, organization, and information sharing. However, these benefits come at the cost of trusting centralized services with the privacy of one's social interactions. The history of these services is rife with unplanned data disclosures (e.g., [22, 40]), and they are attractive targets for attacks by malicious insiders and outsiders. Additionally, social networking sites face pressure from government agencies worldwide to release information on demand, often without search warrants [24].

Service providers themselves have also been a source of privacy concerns. They have repeatedly changed their privacy policies and default settings, and have made public information that users thought was private [46, 47]. Less recognized is the extent to which users trust social networking sites with the integrity of their data. A malicious provider could be more insidious, for example, by hiding posts from some users while showing them to others, as claimed in the case of Sina Weibo [51]. This behavior, known as server equivocation, presents divergent views of the system state to different clients.

To address these security concerns, prior works have proposed decentralized designs, but these often sacrifice availability, reliability, and convenience. In contrast, Frientegrity is a framework for building social networking services that protect the privacy and integrity of users' data from a potentially malicious provider while preserving the benefits of centralization. Frientegrity supports familiar features such as walls, news feeds, comment threads, and photos, as well as common access control mechanisms like friends, friends-of-friends, and followers. In Frientegrity, the provider's servers only see encrypted data, and clients can collaborate to detect server equivocation and other forms of misbehavior. Frientegrity bases its confidentiality and integrity guarantees on the security of users' cryptographic keys rather than on the service provider's good intentions or the correctness of its complex server code.

To defend against server equivocation, Frientegrity enforces fork* consistency [33], ensuring that if the provider is honest, clients see a strongly-consistent ordering of updates. If a malicious provider presents divergent views, it must prevent clients from seeing each other's subsequent updates. Prior systems have used variants of fork* consistency, but they assumed a small number of users or frequent client connections. Frientegrity addresses these scalability challenges by allowing clients to collaboratively detect server equivocation with minimal work per client.

Frientegrity also supports efficient access control, enabling fast revocation of friends and friends-of-friends, and verifying that the provider has only allowed writes from authorized users. We implemented a prototype to evaluate Frientegrity's scalability, demonstrating reasonable performance with tens of thousands of updates per object and access control lists containing hundreds of users.

### Roadmap
- **§2**: Introduces Frientegrity's goals and the threat model.
- **§3**: Presents an overview of Frientegrity's architecture using the task of fetching a news feed.
- **§4**: Details Frientegrity's data structures and protocols for enforcing fork* consistency, establishing dependencies, and access control.
- **§5**: Discusses additional issues for untrusted social networks, such as friend discovery and group administration.
- **§6**: Describes our prototype implementation.
- **§7**: Evaluates the performance and scalability.
- **§8**: Discusses related work.
- **Conclusion**: Summarizes the contributions and future directions.

## System Model

In Frientegrity, the service provider runs a set of servers that store objects corresponding to familiar social networking constructs such as walls, comment threads, and photos. Clients submit encrypted operations on behalf of their users, and the provider's role is limited to storing, ordering, and returning these operations, ensuring only authorized clients can write to each object. Clients collaborate to verify the provider's output, checking for consistency with responses received by other clients.

### Goals
- **Broadly Applicable**: Support features of popular social networks, including symmetric and asymmetric relationships.
- **Confidentiality**: Ensure that only authorized clients can obtain necessary encryption keys.
- **Misbehavior Detection**: Guarantee detection of forgery, alteration, and equivocation by the provider, even if up to a predetermined threshold of malicious users collude.
- **Efficiency**: Scalable to handle recent updates and large access control lists efficiently.

### Detecting Server Equivocation
Frientegrity uses digital signatures and fork* consistency to detect provider equivocation. Clients share views of the history in every operation, and if the provider equivocates, clients will discover the misbehavior. Frientegrity enforces fork* consistency on a per-object basis, but allows for explicit entanglement of multiple object histories when necessary.

### Threat Model
- **Provider**: May be actively malicious, attempting to violate confidentiality and integrity through equivocation or tampering.
- **Mitigation**: Provider misbehavior is detectable, and clients can replicate data and use fork-recovery techniques to resolve inconsistencies. Legal and reputational incentives discourage misbehavior.

The provider does not have access to the contents of objects or operations, as they are encrypted. While the provider can learn the pseudonymous social graph, we do not seek to hide social relationships, as inferring them from operation sizes and timings is likely unavoidable.

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.