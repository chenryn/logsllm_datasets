20.2.1单表替代密码
1.凯撒密码
提起单表替代密码，不得不提的就是凯撒密码，这个密码在无数
CTF竞赛中被作为考题。其原理相当简单，凯撒密码通过将字母移动
一定的位数来实现加密和解密。明文中的所有学母都在学母表上向后
（或向前）按照一个固定的数目进行偏移后被替换成密文。例如，当
扁移量是3的时候，所有的学母A都将被替换成D，B变成E，依此类
推，X将变成A，Y变成B，Z变成C。在偏移量为4的时候，学母的替
代结果如下所示：
ABCDEFGHIJKLMNOPQRSTUVWXYZ
EFGHIJKLMNOPQRSTUVWXYZABCD
由此可见，位数就是凯撒密码加密和解密的密钥。因为只考虑可
见字符，并且都是ASCI码，所以128是模数。
举个例子，样例数据如下：
k=3
---
## Page 660
CTF特训营：技术详解、解题方法与
20.2.1单表替代密码
660/1144
加密方法非常简单，在每个字符上加上k的取值3即可。使用
python加密，代码如下：
def caesar_encrypt(m,k):
r=
for i in m:
r+=chr（ord(i）+k)%128）
returnr
m="flag(kaisamima)"
k=3
printcaesar_encrypt(m,k)
结果输出如下：
iodj-ndlvdplpd
解密方法是加密的逆过程，将加号换成减号即可，代码如下：
def caesar_decrypt（c,k):
for i in c:
r+=chr（(ord(i)-k)%128）
returnr
c="iodj~ndlvdplpdx0o"
k=3
print caesar_decrypt(c,k)
结果如下：
---
## Page 661
CTF特训营：技术详解、解题方法与
20.2.1单表替代密码
661/1144
flag(kaisamima)
针对单表替代密码的攻击方法本来是词频分析，但是凯撒密码的
密钥的取值空间太小了，直接爆破也是很简单的攻击方法。所以针对
凯撒密码的攻击方法就是爆破密钥k，样例数据如下：
C="39.4H/?BA2,0.2@.?J"
如上所示的密文c，在没有密钥k的情况下，我们爆破密钥k，并
判断结果中是否包含flag格式的字符串，以爆破出明文m，代码如下：
def caesar_decrypt(c,k):
r=/"
for i in c:
r+=chr（（ord(i)-k)%128）
returnr
def caesar_brute(c,match_str):
result=]
for k in range(128):
tmp=caesar_decrypt(c,k)
if match_str in tmp:
result.append(tmp)
returnresult
C=39.4H/?BA2,0.2@.?J"
print caesar_brute(c,"flag")
结果如下：
---
## Page 662
CTF特训营：技术详解、解题方法与
20.2.1单表蓄代密码
662/1144
[flag(brute_caesar)]
由此可见，凯撒密码是非常容易破解的。如果不知道flag的格式
match_str可以为空，那就可以打印出所有的爆破结果，然后通过肉
眼去观察哪个结果是具有语言逻辑的
2.ROT13
在凯撒密码中，有一种特例，当k=13，并且只作用于大小写英
文字母的时候，我们称之为ROT13。ROT13准确来说并不能算是一
种密码，而是一种编码，它没有密钥。ROT13也是CTF中的常客。
ROT13通常会作用于MD5、flag等学符串上，而我们都知道
MD5中的字符只有“ABCDEF”，其对应的ROT13为"NOPQRS”
flag对应的ROT13为“SYNT”，所以当看到这些字眼的时候，就可以
识别出ROT13了。因为英文学母只有26个，所以不论是加13还是减
13，效果都是一样的，所以ROT13的加密和解密函数也是一样的
示例代码如下：
def rot13(m):
r="*
fori inm:
if ord(i)in range(ord(A),ord(Z)+1):
---
## Page 663
CTF特训营：技术详解、解题方法与
20.2.1单表营代密码
663/1144
r+=chr（（ord（i)+13-ord（'A））%26+ord（'A））
elif ord(i) inrange(ord（a）),ord(Z）+1):
r+= chr（（ord(i)+13-ord（a²）)%26+ord（a））
else:
r+=i
returnr
c="2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824"
printrot13(c)
printrot13（rot13（c))
结果如下：
2ps24qon5so0n30r26r83o2np5o9r29r1o161r5p1sn7425r73043362938o9824
2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
可以看到，经过两次加密之后，字符串就恢复原状了，这是因为
第二次加密实际上是一个解密的过程。
3.埃特巴什码
与凯撒密码不同的是，埃特巴什码（AtbashCipher）的替代表不
是通过移位获得的，而是通过对称获得的。其通过将字母表的位置完
全镜面对称后获得字母的替代表，然后进行加密，如下：
ABCDEFGHIJKLMNOPQRSTUVWXYZ
ZYXWVUTSRQPONMLKJIHGFEDCBA
---
## Page 664
CTF特训营：技术详解、解题方法与
20.2.1单表替代密码
664/1144
加密的Python代码如下：
def atbash_encode(m):
alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Origin=alphabet+alphabet.lower()
TH_A=alphabet[:-1]
TH_a=alphabet.lower()[:-1]
TH=TH_A+TH_a
r=""
for i in m:
tmp=Origin.find(i)
if tmp!=-1:
[dun]H⊥=+]
else:
r+=i
returnr
print atbash_encode("flag(ok_atbash_flag)")
输出结果如下：
{zonsyz6zzon
因此，解密方式可以直接再次替换为如下内容：
def atbash_encode(m):
alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Origin=alphabet+alphabet.lower()
TH A=alphabet[:-1]
TH_a=alphabet.lower()[:-1]
TH=TH_A+TH_a
r="
for i in m:
tmp=Origin.find(i)
if tmpl=-1:
[dn]HI=+]
---
## Page 665
CTF特训营：技术详解、解题方法与
20.2.1单表替代密码
665/1144
else:
r+=i
returnr
print atbash_encode(atbash_encode("flag(ok_atbash_flag)"))
输出结果如下：
flag(ok_atbash_flag)
4.经典单表替代密码
上述几种密码都是单表替代密码的特例，经典的单表替代密码就
是用一个替代表对每一个位置的字符进行查表替换。例如，假设替换
表内容如下：
abcdefghijklmnopqrstuvwxyz
zugxjitlrkywdhfbnvosepmacq
即将所有的a替换为z，b替换为u，依此类推，加密方式如下：
r="*
for i in m:
if origin.find(i)!=-1:
r+=k[origin.find(i)]
else:
r+=i
returnr
---
## Page 666
CTF特训营：技术详解、解题方法与
20.2.1单表普代密码
666/1144
print substitution_encode("flag(good_good_study)","zugxjitlrkywdhfbnvosepmacq")
输出结果如下：
iwzt{tffx_ffx_osexc)
因为是单表替代，所以没有替代表时，爆破的难度会较高，一般
来说会给出一段具有足够语言意义的密文，然后使用词频统计的方法
进行攻击，详情请参见多表替代密码。如果有替代表，则使用如下方
式解密：
def substitution_decode（c,k,origin=”abcdefghijklmnopqrstuvwxyz"）：
for i in c:
if k.find(i) =-1:
r += origin[k.find(i)]
else:
r+=i
returnr
print substitution_decode(iwzt{tffx_tfx_osexc)","zugxjitlrkywdhfbnvosepmacq")
输出结果如下：
flag(good_good_study}
5.培根密码
---
## Page 667
CTF特训营：技术详解、解题方法与
20.2.1单表替代密码
667/1144
培根密码一般使用两种不同的字体表示密文，密文的内容不是关
键所在，关键是字体。使用AB代表两种字体，五个一组，表示密
文，明密文对应如表20-2所示。
表20-2培根密码对应表
a
VVVVV
g
AABBA
n
ABBAA
BAABA
6
AAAAB
h
AABBB
ABBAB
u-V
BAABB
C
AAABA
ij
ABAAA
P
ABBBA
W
BABAA
d
AAABB
ABAAB
q
ABBBB
BABAB
e
VV8VV
1
ABABA
BAAAA
y
BABBA
AABAB
ABABB
BAAAB
BABBB
可以使用在线工具解密：
http://rumkin.com/tools/cipher/
baconian.php
6.图形替代密码
猪圈密码和跳舞的小人都是典型的图形替代类密码，图形替代密
码是通过将明文用图形进行替代以实现加密。猪圈密码使用不同的格
子来表示不同的字母，如图20-2所示。
---
## Page 668
CTF特训营：技术详解、解题方法与
20.2.1单表蓄代密码
668/1144
A
B
C
K
D
E
F
M·
N
0
Q
G
P
H
R
S
W
X
图20-2
猪圈密码
例如，flag这四个字符就是：
CLJT
---
## Page 669
CTF特训营：技术详解、解题方法与
20.2.1单表蓄代密码
669/1144
解密时一一对应即可。
跳舞的小人密码源自《福尔摩斯探案集》，是使用小人图案来表
示不同的字母，同时用举旗子来表示单词结束。读者可自行在网上查
找对应表。
7.仿射密码
仿射密码的替代表的生成方式依据：c=am+bmodn，其中，m
为明文对应字母得到的数字，n为字符数量，c为密文，a和b为密
钥。加密代码如下：
def affine_encode(m,a,b,origin="abcdefghijklmnopqrstuvwxyz"):
r="
for i in m:
if origin.find(i)!=-1:
r+=origin[（a*origin.index(i)+b)%len(origin)]
else:
[=+J
returnr
print affine_encode("affinecipher",5,8)
输出如下：
ihhwwcswfrcp
在拥有密钥的情况下，解密只需要求出a关于n的逆元即可，即
---
## Page 670
CTF特训营：技术详解、解题方法与
20.2.1单表替代密码
670/1144
m=modinv（a)-（c-b)modn，代码如下：
def affine_decode(c,a,b,origin="abcdefghijklmnopqrstuvwxyz"):
r=
n=len(origin)
ai=primefac.modinv(a,n)%n
foriin c:
if origin.find(i)!=-1:
r+=origin[(ai*(origin.index(i)-b))%len(origin)]
else:
=+J
returnr
print affine_decode("ihhwwcswfrcp",5,8)
输出如下：
affinecipher
因为明密文空间一样，所以n很容易得知。那么，在没有密钥的
情况下，一般有以下几种思路：第一种是爆破，在密钥空间小的时候
可以这样做；第二种是因为仿射密码也是单表替代密码的特例，字母
也是一一对应的，所以也可以使用词频统计进行攻击；第三种是已知
明文攻击，如果我们知道了任意两个字符的明密文对，那么我们可以
推理出密钥ab，代码如下：
def affine_guessab（m1,c1,m2,c2,origin="abcdefghijklmnopqrstuvwxyz"):
x1=origin.index(m1)
---
## Page 671
CTF特训营：技术详解、解题方法与
20.2.1单表营代密码
671/1144
x2=origin.index（m2)
y1=origin.index(c1)
y2=origin.index(c2)
n=len(origin)
dxi=primefac.modinv(x1-x2,n)%n
a=dxi*（y1-y2)%n
b=(y1-a*x1)%n
return(a,b)
print affine_guessab("a","","f","h")
输出如下：
(5,8)
---
## Page 672