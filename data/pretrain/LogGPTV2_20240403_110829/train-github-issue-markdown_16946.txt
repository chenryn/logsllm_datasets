I would like to set an http request timeout in the kubernetes Go client,
however:
  1. The underlying http client is not exposed.
  2. Even if I access the underlying http client through an (admittedly inelegant) cast and set the timeout, requests fail because the Transport does not support the CancelRequest method.
The example below fails with `cannot make request: net/http: Client Transport
of type *unversioned.userAgentRoundTripper doesn't support CancelRequest;
Timeout not supported`
    package main
    import (
            "fmt"
            k8sClient "k8s.io/kubernetes/pkg/client/unversioned"
            "net/http"
            "time"
    )
    func main() {
            client, err := k8sClient.NewInCluster()
            if err != nil {
                    fmt.Printf("cannot create client: %s\n", err)
                    return
            }
            httpClient, ok := client.RESTClient.Client.(*http.Client)
            if !ok {
                    fmt.Println("cannot cast k8s client to http client")
            }
            httpClient.Timeout = time.Millisecond * 500
            if _, err := client.Services("default").Get("foo"); err != nil {
                    fmt.Printf("cannot make request: %s\n", err)
            }
    }