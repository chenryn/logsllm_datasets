# 十一、管理 ECS 基础设施生命周期
与操作 ECS 基础设施相关的一个基本的持续活动是管理 ECS 容器实例的生命周期的需求。在任何生产级场景中，您都需要修补您的 ECS 容器实例，并确保 ECS 容器实例的核心组件(如 Docker Engine 和 ECS 代理)经常更新，以确保您能够访问最新的功能以及安全性和性能增强。在一个不可改变的基础设施世界中，您的 ECS 容器实例被认为是“牛”，标准的方法是您通过滚动新的亚马逊机器映像(AMIs)来销毁和替换您的 ECS 容器实例，而不是采取修补*宠物*并长时间保留您的 ECS 容器实例的传统方法。另一个需要管理生命周期的常见用例与自动扩展有关，例如，如果您在一段时间的大量需求之后扩展您的 ECS 集群，您需要能够从集群中删除 ECS 容器实例。
让一个 ECS 容器实例停止服务听起来可能是一项非常简单的任务，但是考虑一下如果您的实例上有正在运行的容器会发生什么。如果立即停止实例的服务，连接到在这些容器上运行的应用的用户将会中断，这可能会导致数据丢失，至少会导致用户不高兴。需要一种机制，使您的 ECS 容器实例能够正常退出服务，保持当前用户连接，直到它们可以关闭而不会对最终用户产生任何影响，然后在您可以确定实例完全退出服务后，实际终止实例。
在本章中，您将学习如何通过利用两个关键的 AWS 特性来实现这样的功能——EC2 自动扩展生命周期挂钩和 ECS 容器实例清空。EC2 自动扩展生命周期挂钩让您了解与正在启动或停止服务的 EC2 实例相关的挂起生命周期事件，并在发出生命周期事件可以继续的信号之前，为您提供执行任何适当的初始化或清理操作的机会。这是您可以利用 ECS 容器实例清空的地方，它将受影响的 ECS 容器实例上的 ECS 任务标记为清空或停止服务，并通过在集群中的其他 ECS 容器实例上启动新的替换 ECS 任务，然后清空与受影响的 ECS 任务的连接，直到任务可以停止并且 ECS 容器实例被清空，来优雅地使任务停止服务。
将涵盖以下主题:
*   了解 ECS 基础架构生命周期管理
*   构建新的 ECS 容器实例 AMI
*   配置 EC2 自动缩放滚动更新
*   创建 EC2 自动扩展生命周期挂钩
*   创建一个 Lambda 函数来使用生命周期挂钩
*   部署和测试自动扩展生命周期挂钩
# 技术要求
下面列出了完成本章的技术要求:
*   对 AWS 帐户的管理员访问权限
*   根据第 3 章中的说明配置本地 AWS 配置文件
*   AWS CLI 版本 1.15.71 或更高版本
*   本章从第 9 章(而不是第 10 章)继续，因此它要求您已经成功地完成了第 9 章中定义的所有配置任务，并确保您已经将**重新设置到主分支的数据库中(这应该基于第 9 章的完成)**
以下 GitHub URL 包含本章使用的代码示例-[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch11](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch11)[。](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)
查看以下视频，了解《行动守则》:
[http://bit.ly/2BT7DVh](http://bit.ly/2BT7DVh)
# 了解 ECS 生命周期管理
如本章介绍中所述，ECS 生命周期管理是指在不影响终端用户的情况下停止现有 ECS 容器实例服务的过程，终端用户可能连接到您的受影响实例上运行的应用。
这要求您利用 AWS 提供的两个关键功能:
*   EC2 自动扩展生命周期挂钩
*   ECS 容器实例排放
# EC2 自动扩展生命周期挂钩
EC2 自动扩展生命周期挂钩允许您接收挂起的生命周期事件的通知，并在事件发生之前执行一些操作。目前，您可以收到以下生命周期挂钩事件的通知:
*   `EC2_INSTANCE_LAUNCHING`:即将启动 EC2 实例时引发
*   `EC2_INSTANCE_TERMINATING`:当 EC2 实例即将终止时引发
一般来说，您不需要担心`EC2_INSTANCE_LAUNCHING`事件，但是任何运行生产级 ECS 集群的人都应该对`EC2_INSTANCE_TERMINATING`事件感兴趣，因为一个即将被终止的实例可能正在运行具有活动最终用户连接的容器。一旦您订阅了生命周期挂钩事件，EC2 自动缩放服务将等待您发出生命周期操作可以继续的信号。这为您提供了一种机制，允许您在发生`EC2_INSTANCE_TERMINATING`事件时执行优雅的拆除操作，这是您可以利用 ECS 容器实例清空的地方。
# ECS 容器实例排放
ECS 容器实例清空是一项功能，允许您优雅地*清空*正在运行的 ECS 任务的 ECS 容器实例，最终结果是您的 ECS 容器实例没有正在运行的 ECS 任务或容器，这意味着在不影响您的容器应用的情况下终止实例是安全的。ECS 容器实例排空首先将您的 ECS 容器实例标记为正在排空状态，这将导致该实例上运行的所有 ECS 任务正常关闭，并在集群中的其他容器实例上启动。此排出活动使用您已经在 ECS 服务中看到的标准*滚动*行为，例如，如果您有一个与集成了应用负载平衡器的 ECS 服务相关联的 ECS 任务，ECS 将首先尝试在另一个 ECS 容器实例上注册一个新的 ECS 任务，作为应用负载平衡器目标组中的新目标，然后将与正在被排出的 ECS 容器实例相关联的目标置于连接排出状态。
请注意，重要的是您的 ECS 群集有足够的资源和 ECS 容器实例来迁移每个受影响的 ECS 任务，考虑到您还在减少一个实例的 ECS 群集容量，这可能会很有挑战性。这意味着，例如，如果您正在执行群集中 ECS 容器实例的计划替换(例如，您正在更新到一个新的 AMI)，那么您需要临时向群集中添加额外的容量，以便以滚动方式交换实例，而不会降低整个群集的容量。如果您使用云信息来部署您的 EC2 自动扩展组，一个非常有用的功能是能够指定更新策略，这些策略可以在滚动更新期间临时向您的自动扩展组添加额外的容量，您将了解如何利用此功能来确保在执行滚动更新时始终保持 ECS 群集容量。
# ECS 生命周期管理解决方案
现在您已经对 ECS 生命周期管理有了一些了解，让我们讨论一下您将在本章中实现的解决方案，它将利用 EC2 生命周期挂钩来触发 ECS 容器实例清空，并在可以安全终止 ECS 容器实例时向 EC2 自动扩展服务发出信号。
下图说明了一个简单的 EC2 自动扩展组和一个 ECS 集群，其中有两个 ECS 容器实例正在运行，支持 ECS **服务 A** 和 ECS **服务 B** ，这两个服务都有两个 ECS 任务或 ECS 服务实例正在运行:
![](img/3d9ec502-31d9-4b33-bf8b-3f86c5ae59cb.png)
In Service EC2 Auto Scaling Group/ECS Cluster
让我们假设您现在想要用新的亚马逊机器映像更新您的 EC2 自动缩放组中的 ECS 容器实例，这需要终止和替换每个实例。下图说明了我们的生命周期挂钩解决方案将如何处理这一需求，并确保自动扩展组中的每个实例都能以不中断连接到每个 ECS 服务所服务的应用的最终用户的方式进行替换:
![](img/e6a15c2d-7fc9-4819-875d-25b7e000dba6.png)
Performing Rolling Updates on an In-Service EC2 Auto Scaling Group/ECS Cluster
在上图中，发生了以下步骤:
1.  为 EC2 自动缩放组配置了云信息滚动更新，这将导致云信息服务临时增加 EC2 自动缩放组的大小。
2.  EC2 自动缩放组向自动缩放组添加了一个新的 EC2 实例(ECS 容器实例 C)，以响应云信息带来的组大小增加。
3.  一旦新的 EC2 实例启动并向云信息服务发出成功信号，云信息服务就指示 EC2 自动扩展服务终止 ECS 容器实例 A，因为给定的 ECS 容器实例 C 现在已加入 EC2 自动扩展组和 ECS 集群。
4.  在终止实例之前，EC2 自动扩展服务会触发一个生命周期挂钩事件，将此事件发布到一个已配置的简单通知服务(SNS)主题。SNS 是一种发布/订阅风格的通知服务，可以用于各种用例，在我们的解决方案中，我们将为 SNS 主题订阅一个 Lambda 函数。
5.  一个 Lambda 函数由 SNS 主题调用，以响应发布到该主题的生命周期挂钩事件。
6.  Lambda 函数指示 ECS 排出即将被终止的 ECS 容器实例。然后，该函数在 ECS 容器实例上轮询正在运行的任务计数，直到任务计数为零，才认为排出过程完成。
7.  ECS 将 ECS 容器实例 A 上运行的当前任务排出到具有备用容量的其他容器实例。在上图中，由于 ECS 容器实例 C 最近被添加到集群中，因此在 ECS 容器实例 A 上运行的 ECS 任务可以被排到容器实例 C 中。请注意，如果容器实例 C 没有被添加到集群中，集群中的容量将不足以排出容器实例 A，因此确保您的集群有足够的容量来处理这些类型的事件非常重要。
8.  在许多情况下，ECS 容器实例清空的时间可能比 Lambda 的当前五分钟执行超时限制要长。在这个场景中，您可以简单地将生命周期挂钩事件通知重新发布到 SNS 主题，这将自动重新调用 Lambda 函数。
9.  Lambda 函数再次指示 ECS 排出容器实例 A(已经在进行中)，并继续轮询正在运行的任务计数，直到正在运行的任务计数为零。
10.  假设容器实例完成了排放，并且正在运行的任务计数减少到零，则 Lambda 函数向 EC2 自动缩放服务发出信号，表明生命周期挂钩已经完成。
11.  既然生命周期挂钩已经完成，EC2 自动扩展服务将终止 ECS 容器实例。
此时，CloudFormation 在第 1 步中启动的滚动更新已完成 50%，因为旧的 ECS 容器实例 A 已被 ECS 容器实例 c 替换。上图中描述的过程再次重复，新的 ECS 容器实例被引入集群，ECS 容器实例 B 被标记为终止。一旦 ECS 容器实例 B 的清空完成，自动扩展组/集群中的所有实例都已被替换，滚动更新完成。
# 构建新的 ECS 容器实例 AMI
为了测试我们的生命周期管理解决方案，我们需要一种机制来强制终止您的 ECS 容器实例。虽然您可以简单地调整自动缩放组的期望计数(这实际上是自动缩放组缩小时的常见情况)，但发生这种情况的另一种常见情况是，您需要通过引入新构建的亚马逊机器映像(AMI)来更新 ECS 容器实例，该映像包含最新的操作系统和安全补丁以及最新版本的 Docker Engine 和 ECS 代理。至少，如果您正在使用类似于您在第 6 章中所学的方法构建一个定制的 ECS 容器实例 AMI，那么每次亚马逊发布新版本的基本 ECS 优化 AMI 时，您都应该重新构建您的 AMI，并且通常的做法是每周或每月更新您的 AMI。
要模拟将新的 AMI 引入到您的 ECS 集群中，您可以简单地执行您在第 6 章中执行的相同步骤，这将输出一个新的 AMI，然后您可以将其用作栈的输入，并强制您的 ECS 集群升级其每个 ECS 容器实例。
以下示例演示了从**打包器-ecs** 存储库的根目录运行`make build`命令，该命令将为新创建和发布的映像输出一个新的 AMI 标识。请务必记下此急性心肌梗死识别号，因为您将在本章稍后要求:
```
> export AWS_PROFILE=docker-in-aws
> make build
packer build packer.json
amazon-ebs output will be in this color.
==> amazon-ebs: Prevalidating AMI Name: docker-in-aws-ecs 1518934269
...
...
Build 'amazon-ebs' finished.
==> Builds finished. The artifacts of successful builds are:
--> amazon-ebs: AMIs were created:
us-east-1: ami-77893508
```
Running a Packer build
# 配置 EC2 自动缩放滚动更新
当您使用云信息来创建和管理您的 EC2 自动扩展组时，一个有用的功能是管理滚动更新的能力。滚动更新是指将新 EC2 实例中的*滚动到您的自动缩放组中的能力，以受控的方式确保您的更新过程可以在不造成中断的情况下完成。在第 8 章中，当您通过云信息创建 EC2 自动扩展组时，您学习了云信息如何支持创建策略，这可以帮助您确保 EC2 自动扩展中的所有实例都已成功初始化。CloudFormation 还支持更新策略，正如您在前面的图表中看到的，它可以帮助您管理和控制如何管理对 EC2 自动伸缩组的更新。*
如果打开 todobackend-aws 存储库并浏览到位于`stack.yml`文件中的 CloudFormation 模板，则可以向`ApplicationAutoscaling`资源添加更新策略，如下例所示:
```
...
...
Resources:
  ...
  ...
  ApplicationAutoscaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: !Ref ApplicationDesiredCount
        Timeout: PT15M
    UpdatePolicy:
 AutoScalingRollingUpdate:
 MinInstancesInService: !Ref ApplicationDesiredCount
 MinSuccessfulInstancesPercent: 100
 WaitOnResourceSignals: "true"
 PauseTime: PT15M
  ...
  ...
```
Configuring a CloudFormation Auto Scaling Group Update Policy
在前面的示例中，`UpdatePolicy`设置应用于`ApplicationAutoscaling`资源，每当需要替换自动缩放组中的实例时，该资源将云信息配置为根据以下`AutoScalingRollingUpdate`配置参数编排滚动更新(*更新后的*):
*   `MinInstancesInService`:滚动更新期间必须服务的最小实例数。这里的标准方法是指定自动缩放组的期望计数，这意味着自动缩放将随着新实例的添加而临时增加大小，以保持所需实例的最小数量。
*   `MinSuccessfulInstancesPercent`:要使滚动更新成功，必须成功部署的新实例的最小百分比。如果未达到该百分比，CloudFormation 将回滚栈更改。
*   `WaitOnResourceSignals`:设置为 true 时，指定 CloudFormation 在认为实例成功部署之前，等待来自每个实例的 SUCCESS 信号。这要求您的 EC2 实例具有在第 6 章中安装并在第 7 章中配置的`cfn-bootstrap`脚本，以便在实例初始化完成后向云信息发出信号。
*   `PauseTime`:配置`WaitOnResourceSignals`时，指定等待每个实例发出成功信号的最长时间。该值以 ISO8601 格式表示，在下面的示例中被配置为最多等待 15 分钟。
然后，使用`aws cloudformation deploy`命令部署您的更改，如下例所示，您的自动缩放组现在将应用更新策略:
```
> export AWS_PROFILE=docker-in-aws
> aws cloudformation deploy --template-file stack.yml \
 --stack-name todobackend --parameter-overrides $(cat dev.cfg) \
 --capabilities CAPABILITY_NAMED_IAM
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - todobackend
  ...
  ...
```
Configuring a CloudFormation Auto Scaling Group Update Policy
此时，您现在可以更新栈，以使用您在第一个示例中创建的新 AMI。这要求您首先更新 todobackend-aws 存储库根目录下的`dev.cfg`文件:
```
ApplicationDesiredCount=1
ApplicationImageId=ami-77893508
ApplicationImageTag=5fdbe62
ApplicationSubnets=subnet-a5d3ecee,subnet-324e246f
VpcId=vpc-f8233a80
```
Updating the ECS AMI