title:Systematic Fuzzing and Testing of TLS Libraries
author:Juraj Somorovsky
Systematic Fuzzing and Testing of TLS Libraries
Juraj Somorovsky
Horst Görtz Institute for IT Security
Ruhr University Bochum
Hackmanit GmbH
PI:EMAIL
Abstract
We present TLS-Attacker, an open source framework for
evaluating the security of TLS libraries. TLS-Attacker al-
lows security engineers to create custom TLS message ﬂows
and arbitrarily modify message contents using a simple in-
terface in order to test the behavior of their libraries.
Based on TLS-Attacker, we present a two-stage fuzzing
approach to evaluate TLS server behavior. Our approach
automatically searches for cryptographic failures and bound-
ary violation vulnerabilities. It allowed us to ﬁnd unusual
padding oracle vulnerabilities and overﬂows/overreads in
widely used TLS libraries, including OpenSSL, Botan, and
MatrixSSL.
Our ﬁndings motivate developers to create comprehensive
test suites, including positive as well as negative tests, for the
evaluation of TLS libraries. We use TLS-Attacker to create
such a test suite framework which ﬁnds further problems in
Botan.
1.
INTRODUCTION
Transport Layer Security (TLS) [27] is used to secure the
connection to websites, Web services, or to create Virtual
Private Networks (VPNs) and connect LANs from diﬀerent
locations. Diﬀerent application scenarios and protocol ex-
tensions quickly raised the complexity of this standard. Its
complexity led to various designs as well as implementation
failures in various attack scenarios.
In the last few years,
we saw attacks targeting improper encryption algorithms
and conﬁgurations [12, 13, 44], complex state machines [17,
25, 39], extension speciﬁcations [19, 47], or attacks target-
ing implementation failures with buﬀer overﬂows and over-
reads [49].
The large number of recent attacks has motivated re-
searchers to provide further security analyses of TLS and
to develop novel security evaluation tools. In recent scien-
tiﬁc studies authors have considered the proper evaluation
of TLS state machines [25, 17], and they have also developed
tools for sending protocol messages in an arbitrary order [25]
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978411
and even tools for modifying speciﬁc message ﬁelds [17].
The message ﬁeld modiﬁcations provided by these tools are
rather static, i.e., a developer only has the ability to ex-
plicitly deﬁne values of speciﬁc message ﬁelds; however, he
cannot execute dynamic ﬁeld modiﬁcations given precom-
puted values in TLS message ﬂows, which is very important
for dynamic fuzzing. In view of the shortcomings of previous
approaches, and with intentions for extending the test cov-
erage of existing TLS libraries, it was necessary to develop a
new TLS testing framework – TLS-Attacker. TLS-Attacker
is able to create arbitrary TLS protocol ﬂows and execute
dynamic modiﬁcations in TLS messages based on precom-
puted values.
Impact and applicability. Our approach allowed us to
ﬁnd new vulnerabilities in widely used TLS libraries. These
include padding oracle vulnerabilities in OpenSSL [8], Ma-
trixSSL [6] and Botan [1], or boundary violations in Botan
and the ﬁrst pre-release of OpenSSL-1.1.0. Furthermore,
with this approach we exposed the fact that GnuTLS [10]
does not verify speciﬁc message variables but instead silently
proceeds the TLS handshake. The vulnerabilities have been
reported to the developers and ﬁxed in the newest versions.
TLS-Attacker and modiﬁable variables. Our frame-
work relies on a construct called modiﬁable variable. A mod-
iﬁable variable is a container for basic data types like integers
or byte arrays. By accessing these data types, the modiﬁable
variable can dynamically modify the content of the original
variable value. For example, it is possible to increase or de-
crease an integer value or to execute an XOR operation on
a given byte array. We use modiﬁable variables to construct
TLS messages and TLS records. This allows us to dynami-
cally modify any byte at any time in the TLS protocol ﬂow.
The main goal of TLS-Attacker is to provide an easy-to-
use framework with a simple user interface, allowing devel-
opers to create custom TLS protocol ﬂows in order to dis-
cover state machine attacks [25, 17] or test countermeasures
against cryptographic attacks [55, 23]. This is possible di-
rectly in Java, using the TLS-Attacker interface. Further-
more, it is even possible to deﬁne custom protocol ﬂows and
modiﬁcations using simple XML messages.
Two-stage fuzzing approach. To prove the practica-
bility of TLS-Attacker, we use it to construct a two-stage
fuzzing approach. In the ﬁrst stage, we introduce crypto-
graphic fuzzing for known vulnerabilities like padding ora-
cle attacks [55] or Bleichenbacher attacks [23]. In the second
stage, we then systematically modify protocol message vari-
1492ables and protocol ﬂows to trigger speciﬁc implementation
bugs or buﬀer boundary violations.
TLS test suite. The padding oracle vulnerability we dis-
covered in OpenSSL [9] (CVE-2016-2107) was introduced by
writing a constant-time patch that should have mitigated
the Lucky 13 attack [13]. Unfortunately, a missing length
check for suﬃcient HMAC length turned the OpenSSL server
from a rather complex timing oracle to a direct padding or-
acle since the server responded with a diﬀerent TLS alert.
This issue went unnoticed for nearly three years even though
OpenSSL became the primary TLS target library of the se-
curity research community. We observed a similar problem
in the MatrixSSL library. The impact of the insuﬃcient
padding check, however, was worse than in OpenSSL; the
developers introduced a buﬀer overﬂow vulnerability by at-
tempting to patch the Lucky 13 attack.
These two cases clearly show that writing and maintain-
ing critical cryptographic libraries is of huge importance.
New security critical functionalities must be validated with
proper test suites. These test suites should not only include
positive tests, they must include negative tests verifying cor-
rect library behavior when sending invalid messages or in-
correctly formatted data.
We use TLS-Attacker to create a test suite concept for val-
idating TLS libraries. With our concept, the developers can
create valid and invalid TLS message ﬂows containing arbi-
trary messages. The TLS responses can be validated with
predeﬁned assertions which check for the correct message
contents. For example, it is possible to validate the correct-
ness of TLS alert message types or proper cryptographic
properties. The ﬁrst test cases in our test suite already
showed insuﬃciencies in the Botan cipher suite support.
Contributions. This work makes the following contribu-
tions:
• TLS-Attacker: We provide a novel framework for the
evaluation of TLS libraries, which can be used by secu-
rity researchers or developers. The code is on GitHub:
https://github.com/RUB-NDS/TLS-Attacker.
• Novel fuzzing approach for TLS: Based on TLS-
Attacker, we implement a two-stage fuzzing approach
for the evaluation of TLS servers. Our approach al-
lows us to ﬁnd diﬀerent vulnerabilities in widely used
libraries.
• Modiﬁable variables: We present a concept of mod-
iﬁable variables which provide a high ﬂexibility for the
implementation of arbitrary cryptographic protocols
beyond TLS.
• TLS test suite: We also create a concept for testing
TLS libraries which is easily extensible with positive
and negative tests.
In our work we do not attempt to claim TLS-Attacker is
complete or that it detects every vulnerability. Our ﬁndings,
however, show that such a tool is necessary for the devel-
opment of secure TLS libraries. TLS-Attacker is currently
being integrated into Botan and MatrixSSL test suites.
2. TRANSPORT LAYER SECURITY
In the TCP/IP reference model, the TLS protocol is lo-
cated between the transport layer and the application layer.
Figure 1: TLS protocol. After performing a TLS
handshake, the peers can communicate securely and
exchange Application or Heartbeat messages.
Its main purpose is to protect application protocols like
HTTP or IMAP. The ﬁrst (unoﬃcial) version was devel-
oped in 1994 by Netscape, and was named Secure Sockets
Layer. In 1999, SSL version 3.1 was oﬃcially standardized
by the IETF Working Group and renamed Transport Layer
Security [26]. The current version is 1.2 [27]. Version 1.3
is currently under development [28].
In addition to TLS,
which acts over reliable TCP channels, the working group
standardized DTLS [48] (Datagram TLS), which works on
the top of UDP.
TLS is complex and allows communication peers to choose
from a large number of diﬀerent algorithms for various cryp-
tographic tasks (key agreement, authentication, encryption,
integrity protection). A cipher suite is a concrete selection of
algorithms for the required cryptographic tasks. For exam-
ple, TLS_RSA_WITH_AES_128_CBC_SHA deﬁnes RSA-PKCS#1
v1.5 public-key encryption in order to exchange a premaster
secret, and it also deﬁnes symmetric AES-CBC encryption
with a 128-bit key and SHA-1-based HMACs.
2.1 The Handshake Protocol
In order to establish a TLS connection between two peers
and exchange application data, a TLS handshake is executed
(cf. Figure 1). A TLS handshake is initiated by a TLS
client with a ClientHello message. This message contains
information about the TLS version and a list of supported
cipher suites. The server now responds with a ServerHello
message containing the selected cipher suite. Furthermore,
it sends its certiﬁcate in the Certificate message and in-
dicates the end of transmission with the ServerHelloDone
message. The client then sends a ClientKeyExchange mes-
sage, which contains an encrypted premaster secret. Based
on the premaster secret, all further connection keys are de-
rived. Finally, both parties send the ChangeCipherSpec and
Finished messages. The former notiﬁes the receiving peer
that subsequent TLS messages will use the newly negotiated
cipher suite. The Finished message contains an HMAC
computed over all the previous handshake messages based
on a key derived from the premaster secret. Thereby, both
peers are authenticated and can exchange application data
or Heartbeat messages [50].
Note that this is an example of a TLS handshake with an
RSA cipher suite. The speciﬁcation also supports (EC)DH
ClientClientServerServerClientHelloServerHello, Certificate, (ServerKeyExchange), ServerHelloDone(Certificate), ClientKeyExchange, (CertificateVerify), ChangeCipherSpec, FinishedChangeCipherSpec, FinishedApplicationData / HeartbeatApplicationData / Heartbeat1493Figure 2: When processing ﬁve plaintext bytes with
AES-CBC and HMAC-SHA, the encryptor needs
to append 20 bytes of the HMAC-SHA output and
seven bytes of padding.
cipher suites or usage of preshared keys. In addition, it is
possible for the client to authenticate with a certiﬁcate or to
use a session resumption to resume previous sessions. These
methods result in TLS handshakes with slightly diﬀerent
structures with additional protocol messages. For exam-
ple, if a client-authentication is used, the client additionally
sends Certificate and CertificateVerify messages.
The exchanged messages have strict structures. For ex-
ample, an RSA-based ClientKeyExchange message consists
of a handshake type identiﬁer (0x10), 3-byte long length in-
dication and an encrypted premaster secret.
Diﬀerent messages and ﬂows result in a complex protocol
making the design of TLS state machines and the proper
veriﬁcation of protocol message structures very challenging.
2.2 The Record Layer
The record layer is used to transmit protocol messages.
Basically, it wraps the protocol messages and adds the in-
formation about the TLS protocol version, message type,
and message length. The contents of the TLS records are
encrypted after ChangeCipherSpec messages are exchanged.
In order to encrypt TLS records, it is possible to use diﬀer-
ent cryptographic primitives. One of them is a MAC com-
bined with AES in CBC mode of operation.
It uses the
MAC-then-Pad-then-Encrypt mechanism [27]. This means
that the encryptor ﬁrst computes a MAC over the plain-
text, then it pads the message to achieve a multiple of block
length, and ﬁnally it uses AES-CBC to encrypt the cipher-
text. For example, if the encryptor attempts to encrypt ﬁve
bytes of data and uses HMAC-SHA (with 20 bytes long out-
put), we end up with two blocks. The second block needs to
be padded with seven bytes 0x06, see Figure 2. Note that
the encryptor can also choose a longer padding and append
23, 39, ...or 247 padding bytes.
For the description of our work, it is also crucial that one
record message can include one protocol message or several
messages at once. It is even possible to split one protocol
message into several records. This adds to the complexity
of the TLS standard.
2.3 TLS Extensions
Diﬀerent application scenarios and cryptographic usages
have resulted in deﬁnition of various extensions to the TLS