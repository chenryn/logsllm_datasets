dent software vendors, thus adding undesirable obscurity to
the design.
3.2 Key Management and Certiﬁcation
Entertainment platforms have guided the industry regard-
ing the execution of signed code for DRM purposes. Mi-
crosoft’s Xbox [10] and Sony Playstation 3 execute only code
signed by keys directly under vendors’ root CAs. With the
Cell Processor [25], Sony advances further: unsigned code
running on PS3 has limited access to the device’s peripher-
als, notably the GPU. Only signed code has full access to
hardware features. The VVSG (Section 5.5.1) forbids non-
signed code from running on DRE hardware, similarly to
console platforms. The VVSG also recommends a TPM-like
component for controlling software execution.
In addition to certifying (signing) the voting machine soft-
ware stack, cryptographic key material is extensively used
in many voting systems [28, 23, 3, 16, 17] for other reasons,
from voting, to producing closeout records, audit log signa-
ture and veriﬁcation, to encryption/decryption of votes and
other sensitive material.
Although key management and storage could be handled
in software by the DRE, cryptographic tamper-resistant hard-
ware is preferred. The VVSG recommends the existence of
a hardware tamper-proof signature module (SM) in DREs,
whose primary function is to manage the life cycle of two
asymmetric key pairs: i) the Election Signature Key (ESK),
a unique per-election/per-device key used to sign votes and
closeout records; and b) a per-device DRE Signature Key
(DSK), which identiﬁes the device and is used to produce
certiﬁcates for the ESK. The usage of DSK and ESK is
strictly controlled by the SM by means of two counters:
CountESK and CountDSK. CountDSK counts the number
of generated ESK certiﬁcates ever signed by DSK. CountESK
counts the number of ESK usages. When the closeout record
is produced, ESK is erased by the MSM and both counters
are included in the resulting record.
3.3 DRE System Veriﬁcation
Easy auditing is a paramount requirement for voting sys-
tems as it is central to the establishment of trust on the
DREs’ integrity and correct operation. The concerns with
integrity veriﬁcation of the entire DRE system stack (hard-
ware, ﬁrmware, and software) are not new. Although auxil-
iary devices (software or hardware) can be used, ideally so-
lutions should provide eﬀective user-computable veriﬁcation
mechanisms of the DRE integrity, so that less, not more,
hardware and software components are used to verify the
main system. In this sense, device integrity veriﬁcation it-
self should be also software-independent.
Sastry [24] describes a handful of desired DRE verifying
properties, mainly aiming at software insulation, by con-
structing a proof-of-concept DRE with multiple (seven) pro-
cessors. Gennaro et al [9] establish a condition for tamper-
proofness of general hardware and give some clues on how
to check device integrity by means of cryptographic chal-
193¨Oks¨uzoglu and Wallach [19] present, in VoteBox
lenges.
Nano, an elegant human-veriﬁable software and ﬁrmware
(FPGA bitstreams) checking mechanism based on random
“session identiﬁers”, which change every time the DRE is
rebooted. Gallo et al [8] generalize Gennaro et al’s con-
ditions, prototyping a human-readable, cryptographically-
strong system veriﬁcation method called Time-Base One-
Time Veriﬁcation (TOTV), which allows for multiple device
veriﬁcation in a trust amplifying fashion, making humans
part of the veriﬁcation protocol. Although both [19, 8] can
be used by poll workers and party advocates to assert DRE
integrity, they are not practical for large-scale veriﬁcation
by voters, as they require comparison of multiple digit veri-
ﬁcation numbers, a hindrance when illiterate voters are con-
sidered.
4. OUR PROPOSALS
4.1 The T-DRE Architecture and the Master
Security Module
The T-DRE architecture was devised to meet security and
availability requirements, as well as cost restrictions. Some
key requirements are:
• (R1) Run solely signed code, even if the opponent has
operational access to the DRE media.
• (R2) Enforce the veriﬁcation of the entire software
stack, from the BIOS to the voting application, estab-
lishing an eﬀective software trust chain;
• (R3) Allow the system state (integrity) to be widely
attested by any user. Voters, party advocates and the
electoral authority (EA) should be able to verify the
integrity of the DRE without additional electronic de-
vices;
• (R4) Resist physical and logical attacks, preventing
unauthorized access to key material and application
tampering;
• (R5) Contain only fully auditable components, en-
abling thorough system veriﬁcation by the EA and the
society;
• (R6) Allow the use of low cost, widely available hard-
ware components, with reasonable computing power
and fully open source development chain;
• (R7) Allow maintenance of the DRE machine and up-
grade of its cryptographic mechanisms during its long
expected lifetime (10 years);
• (R8) Enable and ease software and ﬁrmware devel-
opment cycle, including ﬁeld testing and simulations;
allow faithful simulations which are clearly veriﬁable
as such, which includes the production of non-valid
results only.
In order to achieve these objectives, we based our proposal
on the fundamentals of secure hardware presented by Gen-
naro et al [9] and Gallo et al [8]. The latter introduces the
concept of cryptographic identity, which states conditions
for the establishment and veriﬁcation of a root of trust for
general secure hardware. Both suggest the use of their ver-
iﬁcation schemes in DREs. Here we go further, presenting
Figure 1: PC-TPM architecture (left) and the T-
DRE architecture. The T-DRE components sur-
rounded by the dotted box are under physical pro-
tection; BIOS physical protection is optional. Dark-
gray components are under MSM direct control.
a DRE system architecture which also brings new control
mechanisms and a new veriﬁcation method (Section 4.3).
Our architecture is depicted in Figure 1, along with a clas-
sical PC-TPM system. In both, the CPU pool (one or more
main processors) is the main processing unit, which runs the
voting application (and software stack).
In the PC-TPM
design, the CPU pool is the bus master of all peripherals,
including the TPM chip, which can be completely bypassed
by tampered software at boot time. There is no way for the
TPM to prevent CPU access to peripherals, nor to inform
users that non-signed code is running.
The T-DRE Architecture, in contrast, is fundamen-
tally diﬀerent from the PC-TPM: the security is based on
the proposed Master Security Module (MSM), which con-
centrates the DRE’s cryptographic mechanisms and controls
system peripherals (encrypted voter keypad, poll worker ter-
minal, status lights), BIOS, and CPU pool. This centraliza-
tion allows for a multi-level certiﬁcation-based peripherals’
access policy which can be enforced on the software running
on the CPU pool. This is further explained in Section 4.2.
The MSM control over the human interface devices (HID)
also plays crucial role in our solution. Its implications are
explored in Section 4.3. The MSM is also a CID-enabled de-
vice, i.e. a device whose root of trust, represented by a cryp-
tographic key, is bound to the device’s physical integrity:
crossing the cryptographic boundary is highly likely to cause
the device’s root key destruction (and thus its identity), pre-
venting the production of valid closeout voting records.
The T-DRE Software Veriﬁcation, in contrast to PC-
TPM, allows for full software stack veriﬁcation, including
BIOS. Prior to the CPU boot, after the DRE hardware
power-up, the MSM checks the authenticity (and possibly
decrypts) the BIOS contents; only if a valid (signed) BIOS
is found, the CPU pool is able to boot. Now the CPU
runs signed code from the very beginning of the boot se-
quence and is able to use the MSM to check the remaining
of the software stack (bootloader, O.S., voting applications,
scripts, conﬁguration data). The diﬀerences between the
T-DRE and the PC-TPM boot processes are illustrated in
Figure 2. It goes beyond VVSG’s required signed code ver-
iﬁer hardware module (VVSG, Section 5.5.1).
Both the T-DRE peripheral architecture and the software
veriﬁcation mechanisms are novel to DREs. Moreover, the
MSM also acts as a VVSG Signature Module (VVSG Sec-
tion 5.1.2).
In spite of these advancements, our architec-
ture can be implemented with oﬀ-the-shelf electronic com-
ponents, enabling secure, fully auditable systems and low
cost realizations. In Section 5 we describe a prototype using
only commodity, general purpose components.
194Figure 2: Veriﬁcation chain for code execution, PC
TPM and our proposed MSM
4.2 Hardware-Reinforced Certiﬁcation-Based
Privileges
Satisfying Section 1 goals (in special privacy) and Sec-
tion 4.1 requisites (in special R3, 5, 7, and 8) requires strict
control over the DRE software. Only oﬃcial (highly au-
dited) voting software must be able to produce valid close-
out records. Maintenance (loosely audited) software must
be prevented from accessing the DRE’s key material (thus
preventing production of valid closeout records) and from
running an apparently valid, but otherwise fake poll (thus
breaking privacy). Also, voting software being developed
must be able to exercise all DRE features without being
able to produce valid tallies or deceiving voters.
To attain the desired software control, we combined the
MSM’s control over the DRE’s peripherals and the running
software stack, with a custom key hierarchy based on Public
Key Infrastructure (PKI) technology (with established pro-
cedures and audit controls), thus reducing required audit
points. Our proposal centers the conﬁdence of the electoral
system on the EA root certiﬁcation authority (EA-rootCA),
which is audited (cryptographically) by the parties and the
society. Figure 3 illustrates the PKI architecture with its
three intermediate CAs, VoteCA, DevelCA, and ServiceCA,
each with distinct purposes and privileges.
In common,
these CAs are responsible for”: a) managing the DSK cer-
tiﬁcate life cycle; b) signing the DRE’s software stack; and
c) decrypting any messages coming from the DRE, when
the voting protocol so demands. Software signed under each
certiﬁcation branch has diﬀerent execution privileges and
access to diﬀerent key materials. Each DRE has three DSK
certiﬁcates (and key pairs), one for each tree branch. All
DRE certiﬁcates (and corresponding keys) are stored within
the MSM, which controls both the key usage and the signed
code execution privileges.
Vote CA Branch: Binaries signed under this branch
have total control over the DRE hardware and are used in
the actual election days - they have access to the oﬃcial
voting key material (DSKvote, ESKvote), producing valid
election closeout records, controlling the voter’s keypad use,
the poll worker’s keypad use, and the access to the Secure
Output HID (Section 4.3). The MSM is responsible for en-
forcing the privileges of the signed code over the DRE hard-
ware, without any software interference.
Development CA Branch enables the necessary func-
tions for development and election simulation activities ,
granting restricted access to peripherals and keys:
i) the
MSM produces signatures only with DSKdevel, ESKdevel,
Otherdevel keys; and ii) the signed code has no access to the
Figure 3: Certiﬁcation hierarchy, code and data, and
key usage
CA
Privilegies
Key
Material
Input HID
access
Output HID
access
Security API
(Secure HID)
VoteCA
DevelCA
ServiceCA
(DSK)vote
(ESK)vote
(Others)vote
(DSK)devel DSKservice
(ESK)devel
(Others)devel
Full
Full
Full
Full
Full
Restricted
Restricted
Only test
results
None
Table 1: Signed code execution privileges for our
DRE proposal; MSM enforcement
secure output HID which signals valid polls. This prevents
in-development code from being used to deceive voters, and
easily distinguishes valid signatures on real closeout records
from those produced under simulation.
Service CA Branch enables DRE maintenance (mem-
ory, battery, peripherals testing and systems components
replacement). Servicing operations are highly distributed,
thus hard to audit. Under ServiceCA, signed code is not al-
lowed access to keypads nor the secure output HID nor any
ESK key material. The allowed operations are: a) re-pairing
the input/output of cryptographic devices, and b) signatures
of maintenance logs. Table 1 summarizes the privileges en-
forced by the MSM in each certiﬁcation branch.
Other Considerations: Although our proposal targets
centralized elections, it can be naturally extended to de-
centralized scenarios, as those in the USA, by adding Lo-
cal Electoral Authorities CAs (as additional intermediate
CAs) to the tree of Figure 3. Then, each local author-
ity would maintain three CAs (VoteCAlocal, DevelCAlocal,
ServiceCAlocal). This allows a great deal of independence
and ﬂexibility, where local authorities can produce and run
their own software without depending on the national au-
thority. Furthermore, DREs can be easily shared by local
195authorities.
4.3 T-DRE Veriﬁcation: Secure Human Inter-
face - S-HI
Integrity veriﬁcation schemes provide variable conﬁdence
level in their output. As a rule, the better the scheme the
more intrusive an adversary has to be in order to fake a
result. From less to more intrusive we list: software mod-
iﬁcation (SWM), hardware modiﬁcation (HWM), and key
extraction from hardware (KXT). Human veriﬁcation is es-
pecially hard to attain if tampering with the communication
channel between the user and the system under veriﬁcation
is a possibility. We call a human interface secure (S-HI)
up to a class of intervention (S-HI-SWM, S-HI-HWM, S-
HI-KX) if it does not produce false results even when it is
subject to tampering of that class.
The VoteBox Nano random number display (along with
its veriﬁcation scheme) is S-HI-SWM, i.e., it resists logi-
cal (bitstream) attacks, but not S-HI-HWM. In T-DRE we
provide users with two interfaces: one S-HI-SWM and one
S-HI-HWM. For the S-HI-SWM interface, we employ the
MSM (hardware-)controlled ’out SHID’ (Figure 1) as a four-
state LED which indicates VoteCA, DevelCA, ServiceCA,
and non/corrupted signed code. This is a clear improve-
ment over VoteBox nano, as we attain the same security
level with a much simpler user veriﬁcation scheme.
For the S-HI-HWM interface, we employ a modiﬁed ver-
sion of TOTV [8] that does not require the high-stability se-
cure real-time clock (HSSRTC) of Gallo et al’s solution. The
TOTV protocol is similar to the Time-Base One-Time pass-