in this paper, when we say instruction, we mean an instruction
at the LLVM IR level.
III. RELATED WORK
There have been many papers that tolerate hardware faults
through software techniques. We consider these below.
EDDI [19] and SWIFT [21] are compiler-based techniques
that use full duplication to protect program data. Full du-
plication can achieve high coverage but
incurs signiﬁcant
runtime overhead. Feng et al. [8] have attempted to reduce
runtime overhead by only protecting critical instructions in
the program that are unlikely to be detected by other means.
However, these techniques do not focus speciﬁcally on LLCs,
and consequently overprotect the application, resulting in high
overheads.
Another direction of research is on reducing the time taken
to perform fault injections by pre-analyzing the application’s
code and only injecting faults into a few representative loca-
tions to evaluate the program’s error resilience. Examples of
this class of techniques are Relyzer [11] and GangES [12],
both of which focus on SDC-causing errors. Unfortunately, it
is difﬁcult to extend these approaches to LLCs, as the analysis
used by these approaches is speciﬁc to SDC-causing errors.
A third direction of research in this area has attempted
to identify program characteristics that correlate with failure
propensity through static and dynamic analysis [17], [26].
These techniques develop heuristics based on dominant code
patterns that cause SDCs, and selectively protect the SDC caus-
ing code regions using the heuristics. While broadly similar
to our work, the heuristics developed by these techniques are
speciﬁc to SDCs and do not apply to LLC causing errors.
To the best of our knowledge,
there have been only
two studies of LLCs in programs. The ﬁrst one by Gu et.
al. [9] injected faults into the Linux kernel and found that
less than 1% of the errors resulted in LLCs. They further
found that many of the severe failures that result in extended
downtimes in the system were caused by these LLCs, due to
error propagation. The authors give examples of faults that
resulted in the LLCs, but they do not attempt to categorize
the code patterns that were responsible for the LLCs. The
second study is by Yim et al. [30], who studied the correlation
between LLC-causing errors and the fault
location in the
program. However, they perform a coarse-grained categoriza-
tion of the fault locations based on where the data resides
(e.g., stack, heap etc.). Such a coarse-grained categorization
is unfortunately not very useful when one wants to protect
speciﬁc variables or program locations, as protecting the entire
stack/heap segment is too expensive. Although they provide
some insights on the characteristics of possible LLC-causing
errors, they do not develop an automated way to predict which
faults would lead to an LLC and which would not. It
is
also worth noting that neither of the above papers achieves
exhaustive characterization of the LLC-causing faults.
to predict
Rashid et. al. [20] have built an analytical trace-based
model
the propagation of intermittent hardware
errors in a program. The model can be used to predict the
latency of crash causing faults in the program, and hence ﬁnd
the LLC locations. They ﬁnd that less than 0.5% of faults cause
LLCs using the model. While useful, their model requires
building the program’s Dynamic Dependence Graph (DDG),
which can be prohibitively expensive for large programs as it
is directly proportional to the number of instructions executed
by it. Further, they make many simplifying assumptions in
their model which may not hold in the real world. Similarly,
Lanzaro et. al. [14] built an automated tool which is able to
analyze arbitrary memory corruptions based on execution trace
when faults present in system. While their technique is useful
in terms of analyzing fault propagation, it incurs prohibitive
overheads as it requires the entire trace to be captured at
runtime. Further, they focus on software faults as opposed
to hardware faults. Finally, they do not make any attempt to
identify LLC-causing faults.
Chandra et. al. [5] study program errors that violate the
fail-stop model and result in corrupting the data written to
permanent storage, or communicated to other processes. They
ﬁnd that between 2% to 7% of faults cause such violations, and
propose using a transaction-based mechanism to prevent the
propagation of these faults. While transaction-based techniques
are useful, they require signiﬁcant software engineering effort,
452452
as the application needs to be rewritten to use transactions.
This is very difﬁcult for most commodity systems.
60%). We focus on crashes in the rest of this paper, as our
focus is on LLCs.
In contrast to the above techniques, our technique identiﬁes
speciﬁc program locations that result in LLCs, and can hence
support ﬁne-grained protection. Further, it uses predominantly
static analysis coupled with dynamic analysis and a selective
fault injection experiment, making it highly scalable and efﬁ-
cient compared to the above approaches. Finally, our technique
does not require any programmer intervention or application
rewriting and is hence practical to deploy on existing software.
IV.
INITIAL FAULT INJECTION STUDY
In this section, we perform an initial fault injection study
for characterizing the LLC causing locations in a program.
The goal of this study is to measure the frequency of LLCs,
and understand the reasons for them in terms of the program’s
code. In turn, this will allow us to formulate heuristics for
identifying the LLC-causing code patterns in Section V. We
ﬁrst explain our experimental setup for this study, and then
discuss the results.
A. Fault Injection Experiment
To perform the fault injection study, we use LLFI [28],
an open-source fault injector that operates at the LLVM com-
piler’s IR level. We inject faults into the destination registers
of LLVM IR instructions, as per our fault model in Section II.
We ﬁrst proﬁle each program to get
the total number of
dynamic instructions. We then inject a single bit ﬂip in the
result (i.e., register or memory location) of a single dynamic
instruction chosen at random from the set of all dynamic
instructions executed by the program. Our benchmarks are
chosen from the SPEC [13], PARBOIL [25], PARSEC [2] and
SPLASH-2 suites [29]. We choose ten programs at random
from these suites, and inject a total of 1, 000 faults in each,
for a total of 10, 000 fault injection experiments. The details
of the benchmarks are explained in Section VII-A.
Note that our way of injecting faults using LLFI ensures
that the fault is activated right away as it directly corrupts
the program’s state during the injection. Therefore, we do not
measure activation as the set of activated faults is the same
as the set of injected faults. We categorize the results into
Crashes, SDCs, Hangs and Benign faults in our experiment.
Because our focus in this paper is on LLCs, we record the
crash latency for crash-causing faults in terms of the number
of dynamic LLVM IR instructions between the fault injection
and the crash. However, when the program crashes, its state
will be lost, and hence we periodically write to permanent
storage the number of dynamic instructions executed by the
program after the fault injection. The counting of the dynamic
instructions is done using the tracing feature of LLFI, which
we have enabled in our experiments.
B. Fault Injection Results
We classify the results of the fault injection experiments
into SDC, crash and benign. Hangs were negligible in our
experiment and are not reported. Figure 2 shows the aggregated
fault injection results across the benchmarks. We ﬁnd that
on average, crashes constitute about 35% of the faults, SDC
constitute 4.2%, and the remaining are benign faults (about
Fig. 2: Aggregate Fault Injection Results across Benchmarks
Figure 3 shows the distribution of crash latencies for all
the faults that led to crashes in the injections. On average, the
percentage of LLCs is about 0.38% across the ten benchmarks.
Recall that we set 1,000 dynamic instructions as the threshold
for determining whether a crash is an LLC. Therefore, LLCs
constitute a relatively small fraction of the total crashes in
programs. This is why it is important to devise ﬁne-grained
techniques to identify them, as even a relatively large fault
injection experiment such as ours exposes very few LLCs in
the program (38 in absolute numbers). The percentages of
LLCs among all the crash causing faults, vary from 0% to 3.6%
across programs due to benchmark speciﬁc characteristics. The
reasons for these variations are discussed in Section VIII.
We also categorized the LLCs based on the code patterns
in which the LLC locations occurred. In other words, we study
the kinds of program constructs which when fault injected, are
likely to cause LLCs. We choose the largest ﬁve applications
from the ten benchmarks for studying the code characteristics
since the larger the programs, the more code patterns they
may reveal. Thus we choose sjeng, hmmer, href, libquantum
and mcf for our detailed investigation.
Figure 4 shows the distribution of the LLC-causing code
patterns we found in our experiments. The patterns themselves
are explained in Section IV-C. We ﬁnd that about 95% of the
LLC causing code falls into three dominant patterns, namely
(1) Pointer Corruption (20%), (2) Loop Corruption (56%), and
(3) State Corruption (19%). Therefore we focus on these three
patterns in the rest of this paper.
C. Code Patterns that Lead to LLCs
As mentioned in the previous section, we ﬁnd that LLCs
fall into three dominant patterns namely, pointer related LLC,
loop related LLC and state related LLC. We explain each
category with code examples in the following subsections.
Although these observations were made at the LLVM IR level,
we use C code for clarity to explain them.
Pointer Corruption LLC occurs when a fault is injected
into pointers that are written to memory. An erroneous pointer
value is stored in the memory, and this value can be used as a
memory operation later on to cause crash. Because the pointer
may not be read for a long time, this pattern has the potential to
cause an LLC. Figure 5A shows the case we observed in sjeng
453453
Fig. 3: Latency Distribution of Crash-Causing Errors in Programs: The purple bars represent the LLCs as they have a crash
latency of more than 1000 instructions. The number shown at the top of each bar shows the percentage of crashes that resulted
in LLCs. The error bars for LLCs range from 0%(cutcp) to 1.85%(sjeng).
large area of stack since an erroneous array index is used for
array address offset calculations in every iteration of the loop.
This large-scale corruption to the stack signiﬁcantly increases
the chance of corrupting address values (i.e., pointers, return
address etc) on the stack, which in turn can result in a crash
much later. For example, in Figure 5B, when a fault is injected
into next making a corrupted value saved back to it at the line
5, the struct array perm[] at line 9 corrupts values on the stack.
When the corrupted value is used for memory operations later
in the program, an LLC is observed.
The second case occurs when faults are injected into
termination conditions of the loop, causing a stack overﬂow
to occur. This is shown in Figure 5C. Assume that a fault is
injected into piece count at line 3, and makes it a large value.
This will cause the for loop at line 5 to execute for a much
larger number of iterations, thereby corrupting the stack and
eventually leading to a LLC.
State Corruption LLC occurs when faults are injected
into state variables or lock (synchronization) variables in state
machine structures. These variables are declared as static or
global variables and are used to allocate or deallocate particular
pieces of memory. If these states are corrupted, crashes may
happen between states, thus causing LLC. For the code shown
in Figure 5D, when we inject a fault in opstatus at line 7,
the variable opstatus becomes a nonzero value (from zero)
when the state goes to quantum objcode stop. Later in the
function quantum objcode put when the state is updated to
quantum objcode stop, the opstatus variable is examined to
decide whether a particular memory area should be accessed
(line 23). Due to the fault injected, we observed that objcode is
Fig. 4: Distribution of LLC Categories across 5 Benchmarks
(sjeng, libquantum, hmmer, h264ref and mcf). Three dominant
categories account for 95% of the LLCs.
from our fault injection experiment. In the function reloadMT,
*p0 and next are assigned to a global static variable, state,
at line 7 and line 8 respectively. The fault is injected on the
pointer, *p0, at line 10. As a result, an erroneous pointer value
is saved in the memory and it is used as a memory operation
in the function randomMT at line 18 after a long time. This
leads to an LLC.
Loop Corruption LLC When faults are injected into
loop conditions or array indices inside the loop, the array
manipulated by the loop (if any) may aggressively corrupt the
stack, and cause LLC. We categorize this as Loop Corruption
LLC. There are two cases in which this LLC can occur.
The ﬁrst case is when a fault occurs in the array index
of an array written within the loop. This fault can corrupt a
454454
Fig. 5: Code examples showing the three kinds of LLCs that occurred in our experiments.
accessed at line 28 while in the state quantum objcode stop.
This leads to a LLC as it accesses the unallocated memory
area objcode, which is illegal.
V. APPROACH
In
this
section, we
tech-
nique CRASHFINDER, to ﬁnd all the LLCs in a program.
CRASHFINDER consists of three phases, as Figure 6 shows
proposed
describe
our
(cid:38)(cid:82)(cid:80)(cid:83)(cid:76)(cid:79)(cid:72)(cid:71)(cid:3)(cid:47)(cid:47)(cid:57)(cid:48)(cid:3)
(cid:44)(cid:53)(cid:3)(cid:54)(cid:82)(cid:88)(cid:85)(cid:70)(cid:72)(cid:3)(cid:38)(cid:82)(cid:71)(cid:72)
(cid:55)(cid:72)(cid:86)(cid:87)(cid:3)(cid:38)(cid:68)(cid:86)(cid:72)(cid:86)
(cid:38)(cid:85)(cid:68)(cid:86)(cid:75)(cid:41)(cid:76)(cid:81)(cid:71)(cid:72)(cid:85)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)(cid:3)
(cid:54)(cid:87)(cid:68)(cid:87)(cid:76)(cid:70)
(cid:47)(cid:76)(cid:86)(cid:87)(cid:3)(cid:82)(cid:73)(cid:3)
(cid:47)(cid:82)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:86)
(cid:38)(cid:85)(cid:68)(cid:86)(cid:75)(cid:41)(cid:76)(cid:81)(cid:71)(cid:72)(cid:85)(cid:3)
(cid:39)(cid:92)(cid:81)(cid:68)(cid:80)(cid:76)(cid:70)
(cid:47)(cid:76)(cid:86)(cid:87)(cid:3)(cid:82)(cid:73)(cid:3)
(cid:47)(cid:82)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:86)
(cid:54)(cid:72)(cid:79)(cid:72)(cid:70)(cid:87)(cid:76)(cid:89)(cid:72)(cid:3)
(cid:41)(cid:68)(cid:88)(cid:79)(cid:87)(cid:3)(cid:44)(cid:81)(cid:77)(cid:72)(cid:70)(cid:87)(cid:76)(cid:82)(cid:81)
(cid:47)(cid:76)(cid:86)(cid:87)(cid:3)(cid:82)(cid:73)(cid:3)(cid:47)(cid:47)(cid:38)(cid:3)
(cid:47)(cid:82)(cid:70)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:86)
In the ﬁrst phase, it performs a static analysis of the pro-
gram’s source code to determine the potential locations that can