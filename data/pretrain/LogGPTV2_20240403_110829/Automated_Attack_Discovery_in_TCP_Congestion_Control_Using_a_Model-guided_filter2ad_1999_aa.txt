title:Automated Attack Discovery in TCP Congestion Control Using a Model-guided
Approach
author:Samuel Jero and
Md. Endadul Hoque and
David R. Choffnes and
Alan Mislove and
Cristina Nita-Rotaru
Automated Attack Discovery in TCP Congestion
Control Using a Model-guided Approach
Samuel Jero
Purdue University
PI:EMAIL
Endadul Hoque†
Florida International University
ehoque@ﬁu.edu
David Choffnes, Alan Mislove and Cristina Nita-Rotaru
Northeastern University
{choffnes,amislove,crisn}@ccs.neu.edu
Abstract—One of the most important goals of TCP is to ensure
fairness and prevent congestion collapse by implementing conges-
tion control. Various attacks against TCP congestion control have
been reported over the years, most of which have been discovered
through manual analysis. In this paper, we propose an automated
method that combines the generality of implementation-agnostic
fuzzing with the precision of runtime analysis to ﬁnd attacks
against implementations of TCP congestion control. It uses a
model-guided approach to generate abstract attack strategies, by
leveraging a state machine model of TCP congestion control to
ﬁnd vulnerable state machine paths that an attacker could exploit
to increase or decrease the throughput of a connection to his
advantage. These abstract strategies are then mapped to concrete
attack strategies, which consist of sequences of actions such as
injection or modiﬁcation of acknowledgements and a logical time
for injection. We design and implement a virtualized platform,
TCPWN, that consists of a a proxy-based attack injector and
a TCP congestion control state tracker that uses only network
trafﬁc to create and inject these concrete attack strategies. We
evaluated 5 TCP implementations from 4 Linux distributions and
Windows 8.1. Overall, we found 11 classes of attacks, of which
8 are new.
I.
INTRODUCTION
TCP is the protocol that underlies most of the Internet
trafﬁc including encrypted trafﬁc via TLS and HTTPS. In
addition to reliable and in-order data delivery, TCP has two
critical goals – efﬁcient delivery based on network conditions
and fairness with respect to other TCP ﬂows in the network.
These two goals are achieved by using congestion control
mechanisms that cause a sender to adapt its sending rate to the
current network conditions (e.g., network congestion) or to the
receiver’s processing resources (e.g., slow receiver). Without
congestion control, the network can enter a condition where the
majority of sent data is eventually dropped, known as conges-
tion collapse; such a collapse occurred on the Internet in 1986,
causing throughput to drop by a factor of a thousand [20].
TCP congestion control relies on acknowledgement packets
(see Appendix A for details) from the receiver to explicitly
† This work was done while Endadul Hoque was at Northeastern University
Network  and  Distributed  Systems  Security  (NDSS)  Symposium  2018 
18-21  February  2018,  San  Diego,  CA,  USA
ISBN  1-891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23115
www.ndss-symposium.org
provide the sender with correct information about the number
of data bytes received (and implicitly about the real network
conditions). However, TCP does not have any cryptographic
mechanisms to ensure authentication and integrity of the sent
packets, including acknowledgments. Application-layer secure
protocols such as TLS provide no protection for TCP headers
or TCP control messages, and network-layer secure protocols
such as IPsec [23] require separate infrastructure and protect
only up to the tunnel termination point. Thus, an attacker that
can intercept acknowledgment packets can modify them with-
out being detected by the intended recipient, who will blindly
trust the information. TCP has a protection mechanism against
packet injection in the form of a sequence number included
on each packet. However, numerous attacks demonstrate that
this protection mechanism can be bypassed by blind attackers
performing TCP sequence guessing [33], [32], [10], [18] or by
off-path or on-path attackers that can observe the target stream.
Thus, an attacker can also inject well-crafted acknowledgment
packets into a TCP stream without detection. By creating such
crafted acknowledgments that propagate malicious information
about
the data received, an attacker can manipulate TCP
congestion control
into sending data at rates that beneﬁt
the attacker. For example, by creating an acknowledgement
that acknowledges data packets prior to receiving them and
injecting it into a target stream, an adversarial TCP receiver
can persuade the sender to increase its sending rate beyond the
rate prescribed by correct congestion control, possibly forcing
the network into congestion collapse [37].
Several manipulation attacks against TCP congestion con-
trol have been discovered; some of these attacks use external
data ﬂows to create the impression of congestion [26], [25]
and others use acknowledgement packets to directly mislead
the congestion control mechanisms [22], [37], [12], [2]. These
attacks are more subtle and difﬁcult to detect than traditional
crash or control-hijacking attacks. Acknowledgement-based
attacks, in particular, do not raise suspicions as long as the
packets are consistent with the receiver’s state (unlike data
that might not assemble properly at the application level). We
focus on attacks against congestion control created through
maliciously crafted acknowledgement packets (by fabrication
of new ones or modiﬁcation of existing ones) and refer to them
as manipulation attacks.
Manipulation attacks on congestion control can have severe
implications such as ﬁnancial loss. Consider an attacker who
wishes to degrade video quality and streaming experience for a
subset of Netﬂix users. While Netﬂix recently began to encrypt
all of its video trafﬁc with TLS [40], TLS relies on TCP to
transfer data across the network. As a result, an attacker can
simply launch an attack misleading TCP into believing that the
network is congested. This will cause TCP to repeatedly slow
down its sending rate, causing rebuffering events and reduced
video quality for any Netﬂix user subjected to this attack. Due
to poor streaming experience, the users may consider turning
to other video providers.
Previous work on attacks against TCP congestion control
relied mainly on manual analysis. The only work we are aware
of that used automation for ﬁnding attacks in TCP congestion
control implementations is the work in [24] which relies on
the user to provide a vulnerable line of code and then performs
static analysis. The vulnerable line of code from the user is
critical to ensure scalability of the approach. In addition, the
method is restricted to a speciﬁc implementation, language,
and operating system.
In this paper, we aim to automatically discover manipula-
tion attacks on congestion control without requiring the user to
provide any vulnerable line of code and without being depen-
dent on speciﬁc implementation, language, or operating system
characteristics. Protocol fuzzing [27], [1], [16] is a well-known
approach where packet contents are either randomly generated
and injected into the network or randomly mutated in-transit.
However, without explicit guidance, given a vast input space,
fuzzing fails to concentrate on relevant portions of the source
code (i.e., for inducing protocol-compliant behaviors).
Previous work on testing TCP connection establishment
[21] used the protocol’s connection state machine to guide the
fuzzing process and prune unnecessary executions. However,
unlike attacks against connection establishment which usually
consist of one action, attacks against congestion control require
a potentially long sequence of actions spanning several states
and transitions, where each action might trigger a new state,
which in turn might require a different attack action. Automati-
cally discovering these combinations at runtime is not practical
for scalability reasons. For example, using the approach in
[21] for congestion control would require a search space of
about 1.2×1024 cases, assuming only 5 types with 4 parameter
choices for creating the malicious acknowledgements and 4
possible states for injecting them. Even limiting this to test at
most one manipulation at a time in each state would generate
194,480 cases, which is still impractical for testing in a real
network.
To address this scalability challenge while still guarantee-
ing that we test relevant portions of the code, we use model-
based testing (MBT) [43], an approach that generates effective
test cases based on a model of the program. The approach uses
a model, an abstract representation of the desired behavior
of the program that is typically derived from speciﬁcations,
to derive functional tests. These functional tests contain the
same level of abstraction as the model, and are converted to
concrete test cases to be tested against the implementation.
MBT does not require the source code and guides the testing
to concentrate only on relevant portions of the source code.
Our approach. We propose to automatically ﬁnd manipu-
lation attacks by guiding a protocol fuzzer with concrete attack
actions derived from abstract attack strategies, which are
obtained using a model-guided technique inspired by model-
based testing. Our model is a ﬁnite state machine (FSM) that
captures the main functionality of several types of congestion
control algorithms used by deployed TCP implementations and
is constructed from RFC speciﬁcations. We use this abstract
model to generate abstract attack strategies by exploring the
different paths in the FSM that modify state variables control-
ling throughput, and thus can be leveraged to mount an attack.
We then map these abstract strategies to concrete attack strate-
gies that correspond to real attacker capabilities; a concrete
strategy consists of acknowledgment-packet-level actions with
precise information about how the packets should be crafted
and the congestion control states in which these actions should
be performed. Our approach provides maximum coverage of
the model of congestion control while generating an optimum
number of abstract strategies. The number of concrete attack
strategies is bounded by the number of malicious actions
that describe an attacker’s capabilities. We consider off-path
attackers and on-path attackers; both can sniff trafﬁc and obtain
TCP sequence numbers and data that has been acknowledged
or sent. However, there is one fundamental difference, an off-
path attacker can only inject malicious acknowledgements, but
cannot prevent the correct ones from reaching the receiver; an
on-path attacker can modify acknowledgements such that the
victim sees only acknowledgments from the attacker.
the right
We created and implemented a platform, TCPWN,
to
create and inject concrete attack scenarios. The platform
combines virtualization (to run different implementations in
their native environment), proxy-based attack injection, and
runtime congestion control state machine tracking (to inject
the attacks at
time during execution). Our state
machine tracking at runtime does not require instrumenting the
code. Speciﬁcally, we use a general congestion control state
machine (e.g., TCP New Reno) and infer the current state of
the sender by monitoring network packets exchanged during
fuzzing. While this option is less accurate than extracting
the state machine from an implementation’s code, it is less
complex and more general. TCPWN is publicly available at
https://github.com/samueljero/TCPwn.
Our model-based attack generation ﬁnds 21 abstract strate-
gies that are mapped into 564 (for on-path attackers) and 753
(for off-path attackers) concrete strategies. Each strategy can be
tested independently and takes between 15 and 60 seconds. We
evaluated 5 TCP implementations from 4 Linux distributions
and Windows 8.1, all using congestion control mechanisms
that can be modeled as the ﬁnite state machine we used to
generate abstract strategies. Overall, we found 11 classes of
attacks, of which 8 were previously unknown.
The rest of the paper is organized as follows. First, we
describe the TCP congestion control state machine model we
assume in this work, in Section II. We then describe our
attacker model in Section III. We provide details on the design
of our system in Section IV and describe our implementation
in Section V. We summarize our results in Section VI and
present related work in Section VII. Finally, we conclude the
paper in Section VIII.
II. TCP CONGESTION CONTROL MODEL
We present the ﬁnite state machine (FSM) for TCP con-
gestion control considered in this work. This FSM is based
on the classic TCP New Reno [19], [4]. We then discuss op-
2
Fig. 1. TCP New Reno State Machine
tional improvements and variants like SACK [8], DSACK [7],
TLP [17], PRR [28], FRTO [35], and others [34], [13].
A. Finite State Machine Model
At a high level, the congestion control of TCP New Reno
consists of four phases: (1) slow start, (2) congestion avoid-
ance, (3) fast recovery, and (4) exponential backoff. During the
slow start phase the sender is probing the network to quickly
ﬁnd the available bandwidth without overloading the network;
once such bandwidth is found, the sender enters a congestion
avoidance phase in which the sender can send without causing
congestion; in case of congestion and data loss, fast recovery
or exponential backoff reduce the rate at which data is sent.
The fast recovery phase is intended for less signiﬁcant events
where the beginning of congestion is detected through lost
packets and acknowledgments, while the exponential backoff
phase deals with more signiﬁcant events where congestion is
detected by the expiration of a large timeout. We present the
ﬁnite state machine model assumed for congestion control in
Figure 1. Below we describe the associated events, variables,
and states.
(1) Events. TCP congestion control relies on two events
for its operation, the reception of an acknowledgement (ACK)
and the occurrence of a timeout (RTO Timeout):
ACK. This event denotes that an acknowledgement packet
was received by the sender. We describe in detail in Appendix
A these TCP acknowledgments. TCP acknowledgements are
byte-based and cumulative, i.e. the receiver acknowledges the
highest byte of data at which all prior data has been received.
A duplicate acknowledgment, and particularly three duplicate
acknowledgments, are used to signal timely information about
the network conditions.
RTO Timeout. This event denotes that a timeout occurred
when data was outstanding and no acknowledgements were
received for several Round-Trip-Times (RTTs). This indicates
more severe conditions in the network since the last acknowl-
edgement. This timer is started when new data packets are
sent, reset on every acknowledgement, and stopped if all data
has been acknowledged.
(2) Variables. The variables capturing the main functional-
ity of congestion control can be grouped into three categorizes:
variables related to the amount of data to be sent (cwnd
and ssthresh), variables keeping track of acknowledged
data (dupACKctr and high_water), and variables controlling
timeouts (rto_timeout).
Congestion window – cwnd. This variable represents the
number of bytes of data that TCP is allowed to have in the
network at any given time. It is modiﬁed by TCP congestion
control to increase or decrease the sending rate in response to
network conditions.
Slow start threshold – ssthresh. This variable indicates
the value of the congestion window cwnd at which TCP
switches from slow start to congestion avoidance. TCP uses
this information later in the connection by growing the window
exponentially up to ssthresh after a timeout or idle period.
Duplicate ACK – dupACKctr. This variable tracks the
number of duplicate acknowledgements received in slow start
and congestion avoidance. Receiving three duplicate acknowl-
edgements triggers a transition to fast recovery.
Highest sequence sent – high_water. This variable
records the highest sequence number sent prior to entering
fast recovery. Only once this sequence number has been
acknowledged (or a timeout occurred) will fast recovery be
exited.
3
RTO Timeout – rto_timeout. This variable indicates
the current length of the RTO Timeout. It is usually set to
max(200ms, 2 ∗ RT T + 4 ∗ RT T V ariance). If the RTO
timer expires, this value is doubled, resulting in an exponential
backoff.
(3) States. We can now describe the state machine from
Figure 1. The states capture the four high-level phases de-
scribed before.
Slow Start. In this state TCP rapidly increases its sending
rate, as indicated by the congestion window cwnd, in order to
quickly utilize the available bandwidth of the path while not
overloading the network with a huge initial burst of packets.
For each acknowledgement acknowledging new data, cwnd
is incremented by MSS (Maximum Segment Size), which
results in a doubling of the sending rate every RTT. TCP
exits slow start on the RTO Timeout, after three duplicate
acknowledgements—which indicate a lost packet—, or when
the congestion window cwnd becomes bigger than the slow
start threshold ssthresh. This last condition indicates that
TCP is approaching a prior estimate of the fair-share connec-
tion bandwidth. TCP connections start in the slow start state
with ssthresh set to MAX INT, such that slow start is only