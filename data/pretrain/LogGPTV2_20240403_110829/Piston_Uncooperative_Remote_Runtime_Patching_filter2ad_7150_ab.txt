3 PATCH GENERATION
Piston receives, as input, the original binary representing the target
process and the replacement binary to which the target process should
be updated. Given these binaries, it must identify specific patches that
must be applied in order to accomplish this update.
Similar to other systems, such as Ksplice, Piston applies patches
on a function level rather than replacing the entire binary in the re-
mote process. If a function is updated in the replacement binary, its
counterpart in the remote process (running the original binary) will
be replaced at runtime. If a function is found to be unique to the
replacement binary, it will be added to the remote process.
Additionally, in the updated binary, addresses of code and data will
usually change. Therefore any references to code and globals must be
updated in the replacement functions. Piston will fix the references
to point to those in the currently running process.
Piston’s preprocessing works in several stages:
(1) Piston matches updated functions between the original and replace-
ment binaries. The matches are filtered to eliminate superficial
differences.
(2) Piston chooses a location in the memory space of the remote pro-
cess, in which, to place remaining updated functions. These func-
tions are “fixed up” to allow them to function in the memory space
of the remote process and run in the context of the original binary.
The output is a patch set (represented as a diff of memory) that
Piston will apply to the remote process in the remote patching step.
3.1 Function Matching
First, Piston must identify the functions that need to be updated or
added to the remote process. This requires Piston to understand which
functions in the original binary correspond to which functions in the
replacement binary. We leverage existing binary diffing techniques
[17] for this step, allowing us to support the correlation of functions
even when there are no symbols in the binaries. These techniques work
on the control flow graph, so they are robust to small compiler artifacts.
At the end of this stage, Piston generates a set of pairs of matching
functions and a set of introduced functions. Additionally, a candi-
date set of original function to replacement pairs is constructed by
checking for differences in the content of matched functions.
Piston’s initial candidate set of updated functions contains some
false positives. This is because any change in the length of code will
cause addresses to be different in the replacement binary; in turn,
the differing addresses will show up as changes in the operand of
instructions. We consider all references to the same code or data be-
tween a pair of matched functions to be superficial. An example of
a superficial difference is shown in Figure 1.
Thus, Piston filters this set of updated functions to remove superfi-
cial changes. If an updated function contains only superficial changes,
143ebp
ebp , esp
esp , 0 x18
eax , 0x804a02c
push
mov
sub
mov
:
0x804a02c " H e l l o %s "
push
mov
sub
mov
ebp
ebp , esp
esp , 0 x18
eax , 0x805a084
:
0x805a084 " H e l l o %s "
Figure 1: Superficial difference example
we discard it and its match from the candidate set. The remaining
members of the candidate set, along with the introduced functions,
are the ones that Piston will patch into the new binary.
3.2 Replacement Function Placement
Because Piston replaces individual functions rather than the entire
binary, it runs into the challenge of function placement. As previously
discussed, replacement functions may be larger than their original
counterparts. Because of this, Piston chooses a new address in the
executable memory space of the remote process to place replacement
functions. This requires an addition function fix-up step: any relative
references in the function will need to be updated to compensate for
the new location.
New functions or data that were not in the original binary can be
resolved by adding the code or data to the new process. Newly added
code and data might also have references to other code and data, so
it needs to be handled similarly until all references are resolved.
After determining a place for the replacement function in this new
area of memory, Piston places a trampoline (direct jump instruction)
at the beginning of the old function. Piston checks that the trampoline
will fit entirely inside of the first basic block of a function to ensure
that execution will never jump to the middle of an instruction. This
is useful for several reasons. First, it lets us replace the function while
keeping all references to it, such as function pointers and direct calls
from other places in the code. Second, if there are any return addresses
to code inside the original function on the stack, they remain valid,
although the patched code will not be executed until the function
returns. Note that this means that Piston can only patch functions that
will eventually return, and infinite looping functions, such as a main
loop, cannot be patched. This minor limitation is also common among
other hot-patching systems.
4 REPAIR PLANNING
Piston achieves the hot-patching of a remote process by leveraging
an exploit to achieve code execution in the context of the process, and
then using this capability to inject patched code before resuming pro-
cess execution. Unfortunately, exploits typically cause the corruption
of the memory space of the remote process, and resuming a process
after such corruption can be non-trivial.
For example, during the exploitation of a stack-based buffer over-
flow, process data on the stack is overwritten with either shellcode or
a ROP chain, ultimately leading to the hijacking of control flow by the
exploiter. If this memory corruption is not corrected before execution
is resumed, the process will simply crash. To remedy this, a repair
step is required before Piston can resume the patched process.
Piston can fully automatically generate a repair routine in cases of
stack-based buffer overflows. This automatic approach uses redundant
data in memory and registers to restore the state of the process. In prin-
ciple, this approach applies to any corruption, not just that on the stack.
However, empirically, we have not found an adequate level of data re-
dundancy in other classes of exploits, and therefore, require the analyst
to provide the repair routine if the exploit is not a stack-based buffer
overflow. We discuss the redundancies inherent in stack data in Sec-
tion 4.3 and the limitations in repairing other corruption in Section 7.
We focus on buffer overflows in Piston’s current implementation, as
they still represent the third most common type of vulnerability in all
software [4]. Furthermore, a recent analysis of trends in CVE’s found
that buffer overflows rank the highest for severity, and that buffer
overflows are the second most common vulnerability that applies to
binary software, behind denial of service vulnerabilities [13].
Piston carries out an offline analysis of the original binary and the
exploit specification to assess the damage that an exploit causes and
creates such a repair plan. This analysis is done off-line, before the
patching process itself, and the repair plan is applied to the remote
process after it is patched. The on-line patch application step is dis-
cussed in Section 5. Piston assumes that the exploit it will use to patch
the remote process will hijack execution either partway through a
function or at the return point of a function. We term this the hijacked
function, and reason about exploitation after-effects as they relate to
this function. We name the function that calls the hijacked function
the caller function.
Piston can restart the remote process after patching if the following
conditions are met:
(1) The hijacked function either completes successfully (i.e., the ex-
ploit does not influence its operation and simply hijacks the control
flow when it returns), or its effects (such as memory writes) can
be analyzed and undone and the function can be restarted. In the
former case, Piston can simply return to the caller function after the
remote process is patched. However, in the latter case, the effects
of the hijacked function, such as the modification of memory and
registers, must be undone. After undoing this modification, Piston
can return to the call-site of the hijacked function, and trigger its
re-execution after the patching is complete.
(2) Any state of the caller function that was corrupted (such as local
variables within in the stack frame) can either be recovered or is
not needed after the patched process resumes. If the caller function
has corrupted state that cannot be recovered, Piston can try to treat
the caller function as hijacked and, instead, undo its effects and try
to restart it. In this case, Piston’s recovery process is repeated with
the prior caller function being the new hijacked function and the
caller of the original caller function to be the new caller function.
To meet these requirements, Piston creates a repair plan that in-
cludes two routines that will be executed inside the remote process
after it is exploited. These routines are the rollback routine, which
will undo the actions of the hijacked function (if necessary), and the
repair routine, which will restore the local state of the caller function
to be non-corrupted.
Automatically generating these routines represents a significant
challenge, and there are two cases when manual analyst intervention
might be required. First, depending on the complexity of the hijacked
function, Piston might be unable to automatically undo its effects.
In this case, the analyst must manually provide the rollback routine
that will be run in the remote process before the hijacked function is
restarted.
144Second, the exploit might cause irreparable damage to the caller
function’s state. In this case, Piston provides two options to the an-
alyst: the analyst can manually provide a repair routine, or Piston
can attempt to undo and restart the caller function as well. To do so,
it moves further up the callstack, classifying the caller function as
the new hijacked function and that function’s caller as the new caller
function and repeating its analysis.
Piston creates the repair plan in three steps:
Exploit effect reconstruction. To reason about the state of the re-
mote process after exploitation, Piston carries out the exploit against
the original binary in an instrumented environment. The trace that
is created during this step is used in further analyses.
Hijacked function analysis. Piston analyzes the exploit trace to de-
termine whether the hijacked function had successfully completed
its work. If the hijacked function was interrupted, Piston must annul
the function’s effects and restart it after the patch completes. To
understand how to properly undo the effects of the function, Pis-
ton performs an in-depth analysis of the function using symbolic
execution techniques.
Caller state recovery. Next, Piston determines the extent of state
clobbering outside of the hijacked function’s stack frame by ana-
lyzing the exploit trace. It attempts to create a state repair plan for
this damage, leveraging symbolic execution of the caller function
to identify uncorrupted parts of the state that can be used to restore
corrupted values.
Different types of exploits cause different damage to the remote
process. For example, a simple pointer overwrite might not require
much memory repairing, whereas a stack overflow can corrupt much
of the stack. In its current state, Piston can automatically create a
repair plan for memory corruption resulting from most stack-based
buffer overflows. Piston automatically detects corruption resulting
from stack-based overflows as well as heap-based overflows, but au-
tomatically supporting corruption detection for additional exploits
simply requires a routine to recognize the corruption they cause (i.e.,
expanding the processes described in Sections 4.1.1 and 4.1.2).
4.1 Exploit Effect Reconstruction
Piston generates an exploitation trace to reason about the damage that
the exploit will cause to the remote process. The exploitation trace is
created by executing the original binary (configured with the remote
configuration), using the exploit specification as input. During the
trace, control flow transitions and writes to and reads from registers
and memory are recorded for future analysis.
4.1.1 Detecting the Exploitation Point. To understand what
repairs are needed after exploitation, Piston must classify memory
writes based on whether or not they are a result of the exploit or of
the intended operation of the binary. Piston does this by identifying
the exploitation point. Intuitively, the exploitation point is a point in
the trace after which the process can no longer be considered to be
operating properly.
For stack-based buffer overflows, Piston uses a simple heuristic
to identify this point: Piston tracks all saved return addresses and
callee-saved registers throughout execution. When one of these is
overwritten, Piston assumes that it has identified the exploitation
point. The function where this exploitation point takes place, is the
hijacked function.
For heap-based overflows, Piston tracks calls to heap allocation
and deallocation functions such as malloc(), realloc() and
free(). 1 During the exploitation trace, Piston keeps a list of the
heap buffers and updates it at every call to these functions. At every
write to the heap, Piston checks whether or not the address resides in
one of these buffers. If the address does not reside in any such buffer,
it is assumed that the exploitation point has been identified.
One caveat of these heuristics is that Piston cannot identify the ex-
act exploitation point for exploits which perform the overflow entirely
within a stack frame, or within a struct on the heap. Although advanced
type analysis can automatically infer the data types and structure of ob-
jects and stack frames [26] [36], such analysis is out of the scope of this
paper. Piston can be extended with additional routines in order to sup-
port automatic detection of corruption of other exploits such as these.
4.1.2 Identifying Corruption. Once the exploitation point has
been identified, Piston can determine the parts of the program state
that were corrupted. Again, a heuristic specific to buffer overflows
is leveraged: Piston marks as “corrupted” all data that was written
to the buffer that was overflowed. This step is done retroactively by
analyzing all of the writes to memory that occurred.
Piston uses a simple heuristic to identify buffers: it assumes that
all writes that are initiated by the same instruction (not the same in-
vocation of that instruction, but all invocations) are writes to the same
buffer. This approach is inspired by the buffer detection proposed
by MovieStealer [50], which groups buffers by loops instead of in-
structions. Piston marks all writes by the same instruction during the
invocation of the hijacked function as writes to the same corrupted
buffer. We term this instruction the overflow instruction.
4.1.3 Exploitation Trace Soundness. It is possible that the
analysis results might not perfectly match the state of the remote pro-
cess during exploitation. For this reason, Piston augments the trace
with more general analyses in other steps and only assumes that two
pieces of information from the trace are accurate:
(1) The exploit will overflow the buffer by the same number of bytes in
the exploitation trace as it will when run against the remote process.
(2) The hijacked function and its caller function will be the same on
the remote process as in the exploitation trace.
We have not seen a case that violates either of these assumptions,
but it is a theoretical possibility.
4.2 Hijacked Function Analysis
Having identified the hijacked function and the range of the corrupted
data, Piston must next determine whether the hijacked function ter-
minated successfully or whether it needs to be restarted.
Conceptually, the determination of whether the hijacked function
terminated successfully is simple: Piston considers the function as
having successfully completed if it can show that no action was taken
based on corrupted data. This happens fairly frequently: modern com-
pilers tend to avoid placing local variables after buffers in memory,
since doing so would allow the local variables (instead of just the
return address) to be overwritten by a buffer overflow, potentially
allowing the attacker to influence program behavior even before the
1In statically linked binaries, such as firmware, an extra step is necessary identify these
functions as they may not contain symbols. We use test cases, comprising of input states
and expected outputs to identify these functions as described in [44].
145function returns. However, in cases where this is not the case (either
because the compiler did not choose such a placement or because
there is more than one buffer on the stack), we consider the hijacked
function’s operation to have been interrupted, and Piston must undo
the corrupted effects and restart the function after patching.
4.2.1 Checking for Successful Completion. Functions have
memory that can be written to without influencing the operation of the
remainder of the program; we call this memory scratch space. Scratch
space is considered to be the local stack frame as well as any memory
regions which are freed before the return site of the function. Data in
these ranges will not be used outside the function in a well-formed