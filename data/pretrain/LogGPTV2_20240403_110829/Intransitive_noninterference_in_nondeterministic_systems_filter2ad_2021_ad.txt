alize the deﬁnition of ta to take as a parameter, in place of a single
agent u, a nonempty set X ⊆ U. Inductively, we deﬁne taX by
taX () =  and, for α ∈ A∗ and a ∈ A,
taX (αa) =
(taX (α), tadom(a)(α), a)
taX (α)
if X ∩ dom(a)
otherwise
(cid:55)→ (cid:54)= ∅
(cid:40)
It is easily seen that ta{u}(α) = tau(α), so this is in fact a gen-
eralization of the previous notion. Using this notion, we obtain the
following deﬁnition.
Deﬁnition 11. A nondeterministic machine M is nTA-secure
w.r.t. runtime coalitions (RCnTA) for a policy (cid:55)→ if for all nonempty
sets X ⊆ U, viewX contains no more information than taX ◦ Act
about Act.
By Proposition 1, an equivalent statement is that for all X ⊆ U and
α, β in A∗, if taX (α) = taX (β) then poss(viewX | Act = α) =
poss(viewX | Act = β).
We have the following straightforward implications between these
notions:
Proposition 2. RCnTA implies nTA; PCnTA implies nTA.
These containment relationships are strict, as is shown by the fol-
lowing two examples.
(s)
Example 4. For a machine that is RCnTA but not PCnTA, con-
sider M as given in Fig. 6 under the security policy ∆{H1,H2}. The
two domains have observations in the set {⊥, 0, 1}. Each domain
Hi has one action, hi. Below each state s of M there is a label
of the form obsH1
(s) to indicate the observations made by the two
obsH2
domains in s.
Machine M is not only nTA but also RCnTA for ∆{H1,H2}.
For instance, for α = h1h2, β = h2h1, and the coalition H =
{H1, H2} we have that taH(α) = (taH(h1), taH2 (h1), h2) =
((, , h1), , h2) (cid:54)= ((, , h2), , h1) = taH(β) and thus it is con-
sidered secure that
poss(viewH | Act = α)
0⊥ h2
⊥
0 h1
= { ⊥
(cid:54)= { ⊥
⊥ h1
⊥ h2
0
0 , ⊥
0 , ⊥
⊥ h1
⊥ h2
0
1
1
0 , ⊥
1 , ⊥
⊥ h1
⊥ h2
1⊥ h2
⊥
1 h1
= poss(viewH | Act = β) .
1⊥ h2
⊥
1 h1
1}
1}
1
0
On the other hand, we have that M is not PCnTA. The individual
h1−→
taHi (α) = taHi (hi) = taHi (β), for i = 1, 2. But r = s0
h2−→ s6 ∈ R(α) gives the pair (cid:104)viewH1 (r), viewH2 (r)(cid:105) =
s3
(cid:104)⊥h11,⊥h20(cid:105) of views. There is no run in R(β) with this pair of
views.
We next show that PCnTA does not imply RCnTA.
Example 5. Consider the security policy HNLL consisting of a
High domain H and two Low domains L1 and L2 who are all al-
lowed to interfere with each other, except that H is not permitted
to interfere with any Low domain. (See Fig. 7b.) Let M be the
machine depicted in Fig. 7a where the only actions are (cid:96)2 in do-
main L2 and h in domain H. Only L1 has non-trivial observations,
in {0, 1}, as indicated by the external labels below states. Machine
M is not only nTA but also PCnTA for HNLL. That it is not RC-
nTA for HNLL can be seen by comparing α = (cid:96)2h and β = (cid:96)2
s1
0⊥
h2
h2
s2
⊥
0
h1
h1
s5
0
0
s0
⊥
⊥
h2
s6
1
0
h1
s3
1⊥
h2
h2
s7
1
1
s4
⊥
1
h1
h1
s8
0
1
Figure 6: A system that is RCnTA but not PCnTA.
h
h
s3
0
s4
1
(cid:96)2
(cid:96)2
s0
0
s1
0
s2
1
L1
H
L2
(a) A system that is PCnTA
but not RCnTA for HNLL.
(b) Policy HNLL
Figure 7: Example 5.
for the coalition X = {L1, L2}. We have taX (α) = taX (β), by
deﬁnition, but
poss(viewX | Act = α)
= { 0⊥ (cid:96)2
(cid:54)= { 0⊥ (cid:96)2
0⊥ 1⊥}
0⊥ , 0⊥ (cid:96)2
0⊥ , 0⊥ (cid:96)2
1⊥ , 0⊥ (cid:96)2
1⊥}
= poss(viewX | Act = β) .
Note that this problem does not show up in the views considered
separately:
poss((cid:104)viewu(cid:105)u∈X | Act = α)
= {(cid:104)0,⊥(cid:96)2⊥(cid:105),(cid:104)01,⊥(cid:96)2⊥(cid:105)}
= poss((cid:104)viewu(cid:105)u∈X | Act = β)
Checking the other cases, it can be veriﬁed that machine M is PC-
nTA for HNLL.
Evidently, like the machine of Example 2, the machine of Exam-
ple 5 should not be considered to be secure on a causal interpreta-
tion of security, since at state s1, the occurrence of the H action h
causes a change to the L1 observation, whereas H is not supposed
to interfere with L1.
To obtain notions of security that avoid this difﬁculty, we can
apply the persistence construct of Deﬁnition 5. This yields sev-
eral further notions of security: P-nTA, P-PCnTA and P-RCnTA.
Plainly the latter two imply the former, and each P-X implies the
source notion X from which it is derived. We now present some
examples that show that these notions are all distinct.
875The ﬁrst such example demonstrates that PCnTA and RCnTA but
neither of their persistent variants.
Example 6. Reconsider the machine of Example 5, but with an
additional edge H (cid:55)→ L2 in the security policy. That is, we have
an instance of the well-known downgrader policy where D hap-
pens to be called L2. Making the policy more liberal plainly cannot
turn a secure system to an insecure system (for any of our deﬁni-
tions) so M is still PCnTA. Moreover, now the counter-example to
this from Example 5 no longer works because now we have that
taX (α) = (taX ((cid:96)2), taH((cid:96)2), h) = ((, , (cid:96)2), (, , (cid:96)2), h) dif-
fers from taX (β) = (, , (cid:96)2).
It can be veriﬁed that M now
satisﬁes RCnTA. However, it is immediate that this example does
not satisfy any of the persistent notions of security (in particular, it
does not satisfy the weakest of these, P-nTA) because the H action
h changes the L1 observation from state s1.
The next examples shows that P-nTA does not imply P-RCnTA,
and at the same time that P-PCnTA also does not imply P-RCnTA.
Example 7. Recall the policy HNLL (see Fig. 7b) and let M
be as depicted in Fig. 8. Only L1 has non-trivial observations in
{0, 1}, indicated by labels below states. The other domains observe
⊥ at all states. Actions (cid:96)2 and h belong to domains L2 and H,
respectively. Machine M is P-nTA for HNLL, and also P-PCnTA.
(cid:96)2
(cid:96)2
s3
0
s4
1
(cid:96)2
s0
0
h
(cid:96)2
s1
0
s2
1
Figure 8: A system that is P-nTA and P-PCnTA but not P-
RCnTA.
That it is not P-RCnTA can be seen by comparing α = h(cid:96)2(cid:96)2
and β = (cid:96)2(cid:96)2 for the coalition X = {L1, L2}. We have taX (α) =
((, , (cid:96)2), (, , (cid:96)2), (cid:96)2) = taX (β) but
poss(viewX | Act = α)
= { 0⊥ (cid:96)2
(cid:54)= { 0⊥ (cid:96)2
0⊥ (cid:96)2
0⊥ (cid:96)2
0⊥ , 0⊥ (cid:96)2
0⊥ , 0⊥ (cid:96)2
1⊥}
1⊥ , 0⊥ (cid:96)2
1⊥ (cid:96)2
0⊥ (cid:96)2
= poss(viewX | Act = β) .
1⊥}
1⊥ (cid:96)2
This problem vanishes when considering the views separately: both
poss((cid:104)viewu(cid:105)u∈X | Act = α) and poss((cid:104)viewu(cid:105)u∈X | Act = β)
are equal to {(cid:104)0,⊥(cid:96)2⊥(cid:96)2⊥(cid:105),(cid:104)01,⊥(cid:96)2⊥(cid:96)2⊥}.
Finally, P-RCnTA implies neither PC-PCnTA nor PCnTA. For
this, note that the machine in Example 4 (Fig. 6) is P-RCnTA. We
have already argued that it is RCnTA, so the veriﬁcation of this
claim amounts to checking RCnTA on each of the very simple ma-
chines that result from choosing any state other than s0 as the ini-
tial state. This is easily done by inspection. We have already noted
above that this machine is not PCnTA, so, a fortiori, it is also not
PC-PCnTA.
5. SPECIAL CASES
In this section we reconsider some simple special cases of poli-
cies and systems and show that our new deﬁnitions of security re-
duce to some of the existing notions of security discussed above.
This lends credibility to the deﬁnitions and helps clarify their posi-
tioning with respect to the existing literature.
We have started with the aim of generalizing the notion of TA-
security on deterministic systems, and introduced a variety of dis-
tinct deﬁnitions in the more general setting of nondeterministic sys-
tems. The following result shows that all of these notions collapse
to TA-security in the deterministic setting.
Proposition 3. Given a security policy, the classes of determin-
istic machines that are nTA-, PCnTA-, or RCnTA-secure are all
equal to the class of TA-secure machines. Moreover, the persis-
tent versions of these notions in deterministic machines are also all
identical to TA-security.
We have built our deﬁnitions of security for intransitive poli-
cies using ingredients from prior work on nondeterministic systems
with respect to the simple policy H (cid:54)
(cid:55)→ L. The following result
characterizes our deﬁnitions in the special case of this policy (in
nondeterministic systems) as collapsing to variants of the notion of
Correctability.
Proposition 4. For the policy H (cid:54)
(cid:55)→ L, we have that nTA = PC-
nTA = RCnTA = COR and P-nTA = P-PCnTA = P-RCnTA = P-
COR.
We showed in Example 2 that COR and its persistent version P-