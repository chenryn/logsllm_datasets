ID-NIZK.Simulate, then ID-NIZK.Extract outputs a witness for Φ∗ with overwhelming probability.
This is easy to see by simulating such an experiment within the signature scheme’s unforgeability
experiment. Each time a simulated proof is needed, we request a signature on (id, Φ) and use it
to generate a simulated signature. By the correctness of NIWI.Extract, when the adversary outputs
π∗, we obtain a witness for (Φ∗)(cid:48)
vk,id∗ with overwhelming probability. This is either a witness for
Φ∗, or a signature on (id∗, Φ∗). However, the latter would constitute a signature forgery, thus with
overwhelming probability we do in fact obtain a witness for Φ∗, as desired.
Finally, to prove Theorem 7, we describe an eﬃcient application of the above construction,
using Groth-Sahai proofs and Waters signatures. Groth-Sahai proofs are zero-knowledge only for
statements that can be expressed (perhaps after adding extra variables) as pairing equations of the
form:
i,j e(Xi,Yj)γij = e(g, h)
where Xi,Yj are the formal variables, and Ai, Bj, γij are public coeﬃcients.
Suppose (A, V0, . . . , Vn) is the Waters public key, and let (σ1, σ2) ∈ G × H be a candidate
signature. Our approach is to develop a proof of the following statment:
j e(Aj,Yj)(cid:81)
j )(cid:89)
e(Aj,Y β
i,j
(cid:81)
i e(Xi, Bi)(cid:81)
i , Bi)(cid:89)
(cid:89)
(cid:81)
× e(V ∗, σ1−β
e(X β
2
j
i
e(X β
i ,Y β
j )γij
) e(g1−β, A) = e(gβ, h) e(σ1, h1−β)
∧ β ∈ {0, 1}
In the above expression, V ∗ = V0
, a public coeﬃcient when µ is known. This new statement
says that either the original statement was satisﬁed, or (σ1, σ2) is a valid signature on µ, as desired.
We can rewrite any term of the form e(C, z1−β) as e(C, z) · e(C−1, zβ), and thus we must commit
i V µi
i
26
to additional values: each X β
above, using the commitments to these values.
i and Y β
e((cid:10)gβ(cid:11) ,(cid:10)hβ(cid:11)) = e((cid:10)gβ(cid:11) , h) and e((cid:10)gβ(cid:11) , h) = e(g,(cid:10)hβ(cid:11)). We must also prove that the commitments
2 . We prove the expression
Finally, we add additional pairing equations to prove that β ∈ {0, 1}. First, equations
i ,Y β
2 are consistent with β, using equations of the form:
j , σβ
1 , σβ
j , as well as gβ, hβ, σ1, σβ
1 , σ2, σβ
to X β
, h);
e(
,(cid:104)Yj(cid:105)) = e(g,
(cid:69)
(cid:68)Y β
j
).
(cid:68)
hβ(cid:69)
e((cid:104)Xi(cid:105) ,
) = e(
(cid:69)
(cid:68)X β
i
(cid:68)
gβ(cid:69)
We note that this transformation can be applied to every pairing equation in the Groth-Sahai proof,
re-using the same β, σ1, σ2, and shared X β
j variables. Thus the overhead of the transformation
is linear in the number of variables, and independent of the number of pairing equations proven on
those variables.
i ,Y β
F Multiple Attribute Authorities
When an attribute-based system is in an enterprise setting (say, an attribute-based messaging
system for communications within a corporation), there would be a single authority issuing
attributes to the users and setting up the ABS scheme. However, for many practically interesting
settings, it is important to allow users to obtain attributes from diﬀerent attribute authorities who
may not trust each other, or may not even be aware of each other. Indeed, some of the attribute
authorities may be corrupt, and this should not aﬀect the attributes issued by other authorities.
As a simple illustrative example, suppose Alice wishes to anonymously publish an anecdote on
user experience in online social networks. To give credibility to her story she decides to use the
following claim to endorse her message:
(Facebook user for 2 years AND Has 100 Facebook friends)
OR (Has 100 Orkut friends AND Participated in 100 Orkut discussion forums)
OR ((Princeton professor OR Yale professor) AND Expert on online social networks).
Alice wants to endorse her anecdote using this claim, without having to reveal how she satisﬁes
the claim. These attributes are owned by diﬀerent attribute authorities like Facebook, Orkut,
Princeton University, Yale University and the American Sociological Association, who may not
trust each other, or may not even be aware of each other. Nor might all these authorities trust
a common central agency. To satisfy the claim Alice may need to use attributes she acquired
from diﬀerent authorities, say Yale and the ASA. To make matters more challenging, Alice may
have never interacted with Facebook’s attribute-authority, and yet she wishes to use an arbitrary
attribute string from Facebook as part of her claim.
In the following we extend the notion of ABS to such a multi-authority setting. Then in
Appendix F.2 we will illustrate how Alice can use multi-authority ABS to solve her problem.
In a multi-authority ABS scheme, apart from (mutually distrusting) attribute authorities, there
needs to be an entity to set up the various public parameters of the signature system. We call this
entity the signature trustee. However, we shall require that the signature trustee does not have
to trust any attribute authority. In particular, the attribute authorities use only the public keys
from the signature trustee.
Finally, we shall also allow there to be multiple signature trustees. In this case, the attribute
authorities would issue attribute keys to a user for all the signature trustees she wishes to work
with. Here, an attribute authority or a signer need not trust the signature trustee.
Below we give a summary of the modiﬁcations in the syntax and security deﬁnitions of the ABS
primitive for the multi-authority setting, followed by the formal deﬁnition.
27
Modiﬁed syntax. Our main changes in syntax involve separating the key material into pieces
originating from diﬀerent authorities. Further, the syntax must now include new safety checks on
the key material, since (a) the authorities depend on the user to provide key material from the
trustees, and (b) the users no longer consider all authorities as trusted entities.
The claim-predicates in the signatures are now required to carry the identity of the attribute-
authorities who own the various attributes (possibly as meta-data attached to the attribute
description). Note that if for any attribute appearing in the claim-predicate the veriﬁer uses a
diﬀerent attribute-authority than what the signer used, the veriﬁcation will simply fail. So it is in
the interest of the signer to point to the correct attribute-authorities.
Deﬁnition 10 (Multi-Authority ABS). A multi-authority ABS scheme consists of the following
algorithms/protocols:
ABS.TSetup: The signature trustee runs the algorithm ABS.TSetup which produces a trustee public
key P K and trustee secret key T SK. The trustee publishes P K and stores T SK.
ABS.TRegister: When a user with user id uid registers with the signature trustee, the trustee runs
ABS.TRegister(T SK, uid) which outputs a public user-token τ. The trustee gives τ to the user.
ABS.ASetup: An attribute authority who wishes to issue attributes runs ABS.ASetup(P K) which
outputs an attribute-authority public key AP K and an attribute-authority secret key ASK.
The attribute authority publishes AP K and stores ASK.
ABS.AttrGen: When an attribute authority needs to issue an attribute u ∈ A to a user uid,
ﬁrst it obtains (from the user) her user-token τ, and runs a token veriﬁcation algorithm
ABS.TokenVerify(P K, uid, τ). If the token is veriﬁed, then it runs ABS.AttrGen(ASK, τ, u)
which outputs an attribute key Ku. The attribute authority gives Ku to the user.
The user checks this key using ABS.KeyCheck(P K, AP K, τ, Ku) and accepts this attribute key
only if it passes the check.
ABS.Sign: A user signs a message m with a claim-predicate Υ, only if there is a set of attributes
A such that Υ(A) = 1, the user has obtained a set of keys {Ku | u ∈ A} from the attribute
authorities, and they have all passed ABS.KeyCheck. Then the signature σ can be generated
using
ABS.Sign(cid:0)P K,{AP Kauth(u) | u ∈ AΥ}, τ,{Ku | u ∈ A}, m, Υ(cid:1) .
Here auth(u) stands for the authority who owns the attribute u (as described in u), and AΥ
is the set of attributes appearing in Υ. (m, Υ, σ) can be given out for veriﬁcation.
ABS.Ver: To verify a signature σ on a message m with a claim-predicate Υ, a user runs
ABS.Ver(cid:0)P K,{AP Kauth(u) | u ∈ AΥ}, m, Υ, σ(cid:1)
which outputs a boolean value, accept or reject.
Security Deﬁnitions The security deﬁnitions are now a little more elaborate to accommodate
for the diﬀerent cases corresponding to diﬀerent entities (signers, veriﬁers, attribute-authorities and
signature-trustees) being corrupt.
The privacy requirement is formulated as a perfect information-theoretic property: for every
P K, m, and Υ, the output distribution of ABS.Sign(P K,{AP Kauth(u) | u ∈ AΥ},·,·, m, Υ) is the
same no matter which τ, and attribute signing keys {Ku} are used, as long as the keys {Ku} have
28
all passed ABS.KeyCheck. In other words, there is a (computationally infeasible) procedure AltSign
such that AltSign(P K, m, Υ,{AP Kauth(u) | u ∈ AΥ})) is distributed exactly as a valid signature on
m with claim-predicate Υ.
The unforgeability deﬁnition is modiﬁed to account for the case where some of the attribute
authorities, and some signature trustees are corrupt. The unforgeability requirement is with respect
to an uncorrupted signature trustee (whose setup is carried out by the experimenter in the security
experiment).
Deﬁnition 11. A multi-authority ABS scheme is unforgeable if the success probability of every
polynomial-time adversary is negligible in the following experiment:
The adversary is given P K and access to the
1. Run (P K, T SK) ← ABS.TSetup.
ABS.TRegister(T SK,·) oracle.
2. The adversary can ask for honest attribute authorities to be instantiated using ABS.ASetup.
For each of these, the adversary receives only the public key AP K and gets access to
a ABS.AttrGen(ASK,·,·) oracle. The adversary can also instantiate (corrupt) attribute
authorities and publish public keys for them.
3. The adversary gets access to the alternate signing oracle AltSign(P K,·,·,·).
4. At the end the adversary outputs (m, Υ, σ).
Let Auid be the set of u ∈ A such that the adversary queried the ABS.AttrGen oracle on (uid, u).
Let A0 be the set of possible attributes corresponding to corrupt attribute authorities. Then the
adversary succeeds if σ veriﬁes as a valid signature on (m, Υ), and (m, Υ) was never queried to the
signing oracle, and Υ(A0 ∪ Auid) = 0 for all uid queried to the ABS.TRegister oracle.
F.1 Construction
All our constructions generalize to the multi-authority setting. In the case of Schemes 1, 2 and
3, recall that the credential-bundles are implemented as signatures by the attribute authority on
(nonce,attribute) pairs. In the multi-authority setting each attribute authority publishes their own
signature veriﬁcation key. The nonce will be derived deterministically (using a collision-resistant
hash function) from the identity uid of the user, so that all authorities agree on the same nonce. The
signature trustee publishes its own signature veriﬁcation key and a CRS for the NIWI argument
of knowledge. The NIWI system will be used to prove possession of suﬃcient attributes (valid
signatures, under diﬀerent veriﬁcation keys) or a signature on the (message, predicate) pair under
the the veriﬁcation key of the signature trustee. With this modiﬁcation, the rest of the construction
is almost identical to that in the case of the single authority setting.
Our ﬁnal scheme, which is secure in the generic group model, also extends to the multi-authority
setting. Below we sketch in more detail the modiﬁcations required for this.
ABS.TSetup: Here the signature trustee selects
the cyclic groups G and H, generators
g, C, h0, . . . , htmax, hash function H, and A0 = ha0
0 , as in the single-authority setting.
In addition,
it generates a signature key-pair (T Sig, T V er) for a (conventional) digi-
tal signature scheme. The private key is T SK := (a0, T Sig), and the public key is
P K := ((G, H),H, g, A0, h0, . . . , htmax, C, T V er).
ABS.TRegister: Given uid, draw at random Kbase ← G. Let K0 := K1/a0
base , where a0 is retrieved
from T SK. Output τ := (uid, Kbase, K0, ρ) where ρ is (conventional) signature on uid(cid:107)Kbase
using the signing key T Sig (also retrieved from T SK).
ABS.ASetup: Choose a, b ← Zp and compute Aj = ha
ASK := (a, b) and the public key is AP K := {Aj, Bj | j ∈ [tmax]}.
j , Bj = hb
j for j ∈ [tmax]. The private key is
29
ABS.AttrGen: The token veriﬁcation ABS.TokenVerify(P K, uid, τ) veriﬁes the signature contained
in τ using the signature veriﬁcation T V er in P K. ABS.AttrGen(ASK, τ, u) extracts Kbase
from τ, and using (a, b) from ASK, computes Ku := K1/(a+bu)
The key Ku can be checked for consistency using ABS.KeyCheck(P K, AP K, τ, Ku), which
j ) = e(Kbase, hj) for all j ∈ [tmax], where Aj and Bj are from AP K.
checks that e(Ku, AjBu
) is used
(corresponding to the attribute u(i) associated with the ith row of the monotone span
program), we use AijBu(i)
ij where Aij and Bij are Aj and Bj from AP K (as described in
ABS.ASetup above) published by the authority auth(u(i)) who owns the attribute u(i).
ABS.Sign, ABS.Ver: These algorithms proceed verbatim as before, except where (AjBu(i)
j
base
.
In the above construction we used a τ which contained a certiﬁcate from the signature
trustee binding Kbase to uid. The need for this certiﬁcate can be avoided if we derive Kbase as
Kbase = R(uid), where R : {0, 1}∗ → G is a hash function modeled as a random oracle. We use
a random oracle because it is important that users have no advantage in computing the discrete
logarithms of their Kbase values. This eliminates the need for a user to present the token to the
attribute authorities, and the need for token veriﬁcation, because the attribute authorities could
themselves derive the Kbase. We stress that in our construction, we do not employ a random oracle
anywhere, except for this optional eﬃciency improvement.