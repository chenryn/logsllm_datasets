COM（DistributedCOM，DCOM）作为对COM的扩展以及对公共对象请求代理体系结构
---
## Page 212
第18章Web测览器的模糊测试：自动化197
（CommonObjectRequest BrokerArchitecture,CORBA）的回应。分布式计算环境/远程过程
调用°（Distributed Computing Environment/Remote Procedure Call,DCE/RPC）是DCOM后面
潜在的RPC机制。DCOM进一步扩展了COM的灵活性，因为它允许软件开发者通过像Internet
这样的媒介来暴露功能，而不用提供对潜在代码的访问。
COM的历史上最近发生的事件是COM+的引人，它是同Windows2000操作系统一起发布
的。COM+提供的额外好处是同Windows2000绑定在一起的微软事务服务器所管理的“构件工
厂”。像DCOM一样，COM+构件也可以是分布式的，并且不需要从内存中卸载该构件就可以
实现重用。
18.1.2对象和接口
COM体系结构定义了对象和接口。一个对象，例如一个ActiveX控件，通过定义和实现一
个接口来描述其功能。于是软件就可以查询一个COM对象以确定它可能会暴露哪个接口和功
能。每个COM对象被分配了一个唯一的128位标识符，该标识符被称为一个类ID（CLSID）。
另外，每个COM接口也被分配了一个唯一的被称为接口ID（IID）的标识符。COM接口的例子
包括IStream,IDispatch和IObjectSafety。这些接口以及其他的接口都是从一个被称为IUnknown
的基接口派生而来的。
除了CLSID之外，对象能够可选地为验证指定一个程序ID（ProgID）。ProgID是一个人工
可读的字符串，它非常便于引用一个对象。例如，考虑下面的别名：
• 000208D5-0000-0000-C000-000000000046
Excel应用程序
CLSID和ProgID都被定义在注册表中，并且可以互相替换使用。然而，要注意ProID并不
能被保证是唯一的。
18.1.3 ActiveX
类似于Javaapplets，ActiveX控件对操作系统的访问范围更广，并被用来开发许多对浏览器来
说不可用的扩展。ActiveX控件的应用非常广泛，并且就像是直接分布在Web上一样同许多软件
包绑定在一起。可能会依赖于ActiveX技术的产品和服务的例子包括在线病毒扫描器，Web会议
和通话，即时消息传输器以及在线游戏等等。
微软的InternetExplorer是唯一从本质上支持ActiveX，并实现了标准的文档对象模型
（DocumentObjectModel.DOM）以处理实例化、参数和方法调用的浏览器。下面的例子为此
问题提供了参考和说明：
cobject c1ass1d = “c1sid:F08DF954-8592-11D1-B16A-00C0F0283628*
Pure DOM
 http://en.wikipedia.org/wiki/Corba
@ http://en.wikipedia.org/wiki/DCE/RPC
---
## Page 213
198
第二部分目标和自动化
id
=“Slider1”
width
-“100"
height="50">
value="1"
/
value="0"/>
Slider1.method(arg,arg,arg)
Outdated Enbed
foo.method（arg,arg,arg)
Javascript/ Jscript
Visual Basic
E.161
'Wscript.echo typenane(target)
SubSelectAndActivateButton（Byva11Button As Lor
argl-2147483647
target.property-arg1
target.method arg1
除了直接将控件加载到浏览器之外，一个ActiveX控件也可以直接作为标准COM对象来被
加载并提供接口，直接加载一个控件对我们的模糊器而言是有利的，因为它省略了生成浏览器
代码井将其加载到InternetExplorer的中间步骤。
微软COM的编程及其内部机理是一个很大的研究课题，有许多书都专门讲述该课题。为了
滴客资源网WwW.176Ku.CoM，1000G无加密版教程书籍杂志全免KEY提供，完全无加密。
---
## Page 214
第18章Web测览器的模糊测试：自动化199
了解关于COM的更多信息，可以访问微软的COMWeb站点以获得更高层次的一个概览，同
时可以通过MSDN的文章《组件对象模型：技术概览》（TheComponentObjectModel：A
TechnicalOverview），来得到低层的信息。
在下一节中，我们将深入到一个ActiveX控件的开发中，同时也将进一步讨论有关COM技
术的一些细节。
18.2模糊器的开发
有许多语言适合于开发ActiveX模糊器。这是显而易见的，因为目前在不同ActiveX模糊器
的实现中使用了大量的编程语言。COMRaider大部分是用VisualBasic编写的，还有一小部分
是用C++语言编写的。AxMan是混合采用C++，JavaScript和HTML等多种语言来编写的。我
们采用与这些模糊器所使用的相同的通用方法来对我们的模翻器进行建模：
·枚举所有的可加载的ActiveX控件。
·枚举针对每个ActiveX控件可访问的方法和属性。
·解析类型库以确定方法参数的类型。
·生成模糊测试用例。
·执行模糊测试用例并监视异常情况。
与前面所开发的模糊器不同，我们完全采用一种单一的语言Python来实现我们的模糊器。
你可能一开始会对所选择的语言感到吃惊，因为你会认为它完全不可行。然而，采用Python来
开发实际上是可能的，因为现代的分布式应用包含暴露有潜在的WindowsAPI的模块。我们所
依赖的与COM进行接口的不同模块包括win32api，win32com，pythoncom和win32con。（如果你
有兴趣进一步了解关于Windows环境下Python编程的一些详细信息，那么可以参阅由Mark
Hammond编写的名为《Win32中的Python编程》（Python Programming onWin32）的文章?，
MarkHammond开发了一些模块，我们以这些模块作为桥梁将Python引人到了COM领域。）图
18-1和图18-2是分别取自于PythonWinCOM浏览器和PythonWin类型库浏览器的屏幕截图，显
示了从高层对低层COM信息的访问。
作为一个程序例子，考虑下面的代码片段，它将启动微软Excel的一个实例，并通过设置布
尔属性Visible将其变为可见的：
import win32com.client
x1 = win32con,c11ent.Dispatch(*Exce1.App1ication°)
x1.Visible = 1
下面我们将通过研究如何枚举所有的可加载的ActiveX控件来深人分析更多的例子。本章
 http://www.microsoft.com/com/default.mspx
xidse 08660gsmm1/sn-2/uoosuszupsu/.dq
③ http:/labs.idefense.com/software/fuzzing.phpfmore_comraider
@ http://metasploit.com/users/hdm/tools/axman/
③http:/www.oreilly.com/catalog/pythonwin32/
---
## Page 215
第二部分目标和自动化
剩余部分所列出的代码片段引自于一个具有完整特性的COM模糊器，该模糊器可以从本书的官
方Web站点（http://www.fuzzing.org）上下载。
torg
Cords
A
SDS.
dDS1
图18-1PythonWin COM浏览器
图18-2PythonWin类型库浏览器
18.2.1枚举可加载的ActiveX控件
我们的首要开发任务是枚举出在目标系统中所有可用的COM对象。COM对象的完整列表
显示在Windows注册表中HKEY_LOCAL_MACHINE（HKLM）键值和子键
SOFTWAREVClasses的下面。我们可以使用标准的Windows注册表访问API来访问该键值：
import win32api,win32con
import pythoncom,win32com.client
from win32com.axscript import axscript
elcebnnoumsh
try:
classes_key-win32api.RegOpenKey（\
TE
win32con.HKEY_LOCAL_MACHINE,
except win3Zapi.error:
*SOFTwARE\\CTasses")
print“Prob1en opening key HKLM\\SOFTWARE\\Classes
上述代码片段的前三行负责导入访问注册表以及与COM对象进行接口所需要的功能。一且
接口打开，键值就通过搜索有效的类CLSID来被枚举。如果发现了一个CLSID，那么条目就被
保存到以后所使用的一个列表中。
clsid_1ist =[]
skey_index=0
whi1e True:
try:
http://en.wikipedia.org/wiki/Windows_registry
---
## Page 216
第18章Web浏览器的模期测试：自动化
201
skey - win32api.RegEnumkKey(c1asses_key, skey_index)
except win32api.error:
print “End of keys"
break
progid = skey
try:
skey -win32ap1.Reg0penKey(win32con.HKEY_LOCAL_MAOHINE,\
"SOFTwARE\\C1asses\\%s\\CLSID" % progid)
except win32api.error:
print “Couldn’t get CLSID key...skipping”
skey_index +=1