下⾯面的代码⽚片段演示了了⼀一个简单的检查：
//Compare our origin with Host and act accordingly
if r.Header.Get("Origin") != "http://"+r.Host {
  http.Error(w, "Origin not allowed", 403)
    return
} else {
    websocket.Handler(EchoHandler).ServeHTTP(w, r)
}
Websocket通信通道可以通过未加密的TCP或加密的TLS建⽴立。
当使⽤用未加密的Websockets时， URI scheme 是 ws:// ，其默认端⼝口是 80 。如果使⽤用TLS Websockets, URI scheme 是 wss:// ，默认
端⼝口是 443 。
涉及到Websockets时，⽆无论是使⽤用TLS⽅方式还是⽤用未加密⽅方式，我们必须考虑原始连接。
在本节中，我们将展示连接从HTTP升级到Websocket时发送的信息，以及如果处理理不不当所带来的⻛风险。在第⼀一个示例例中，我们看到常规HTTP连接正
在升级到Websocket连接：
注意，请求头包含此次会话的cookie。为确保不不泄漏漏敏敏感信息，升级连接时应该使⽤用TLS。如下图所示：
机密性和完整性
bloodzer0&Lingfighting
在后⼀一个例例⼦子中，和Websocket⼀一样，我们的连接升级请求使⽤用SSL：
Websockets不不处理理认证或授权，这意味着必须使⽤用诸如cookie、HTTP身份验证或TLS身份验证等机制来确保安全性。有关这⽅方⾯面的更更详细信息，请
参阅本⽂文档的“身份验证”和“访问控制”部分。
与来⾃自不不可信源的任何数据⼀一样，应该对数据进⾏行行适当的清理理和编码。有关这些主题的更更详细内容，请参阅本⽂文档的“数据清理理”和“输出编码”部分。
保持更更新是安全的关键。因此，开发⼈人员应该将Go更更新到最新版本，包括Web应⽤用程序中使⽤用的外部包和框架。
关于Go中的HTTP请求，你需要知道任何传⼊入服务器器的请求都是使⽤用HTTP/1.1或HTTP/2来完成的。如果请求是：
req, _ := http.NewRequest("POST", url, buffer)
req.Proto = "HTTP/1.0"
Proto  将被忽略略，请求会使⽤用HTTP/1.1发出。
如果开发⼈人员忘记禁⽤用⽬目录列列表（OWASP也称其为⽬目录索引），攻击者可以通过⽬目录导航出⼀一些敏敏感⽂文件。
如果你运⾏行行⼀一个Go Web服务器器应⽤用程序，你还应该⼩小⼼心：
http.ListenAndServe(":8080", http.FileServer(http.Dir("/tmp/static")))
如果你访问 localhost:8080 ，它将打开你的index.html。但是假设你有⼀一个测试⽬目录 localhost:8080/test/ ，内部有敏敏感⽂文件：
为什什么会这样？ Go尝试在⽬目录中找到index.html，如果它不不存在，它将显示⽬目录列列表。
要解决这个问题，有三个可⾏行行的解决⽅方案:
在你的web应⽤用程序中禁⽤用⽬目录列列表
限制对不不必要的⽬目录和⽂文件的访问
为每个⽬目录创建⼀一个索引⽂文件
这⾥里里我们将描述⼀一种禁⽤用⽬目录列列表的⽅方法，⾸首先，创建⼀一个函数来检查所请求的路路径，以及是否可以显示该路路径。
认证和授权
输⼊入数据清理理
系统配置
⽬目录列列表
bloodzer0&Lingfighting
type justFilesFilesystem struct {
    fs http.FileSystem
}
func (fs justFilesFilesystem) Open(name string) (http.File, error) {
    f, err := fs.fs.Open(name)
    if err != nil {
        return nil, err
    }
    return neuteredReaddirFile{f}, nil
}
然后我们在 http.ListenAndServe 中使⽤用它：
fs := justFilesFilesystem{http.Dir("tmp/static/")}
http.ListenAndServe(":8080", http.StripPrefix("/tmp/static", http.FileServer(fs)))
请注意，我们的应⽤用程序仅允许显示 tmp/static 路路径。当我们试图直接访问受保护的⽂文件，我们得到：
如果我们尝试获取 test/ ⽬目录列列表，我们将得到相同的错误
在⽣生产环境中，删除所有不不需要的功能点和⽂文件。测试代码和函数，只应该留留在开发⼈人员层，⽽而不不是每个⼈人都能看到的位置。最终版本 (准备上⽣生产
的版本) 不不需要任何测试代码和函数。
我们还应该检查HTTP响应头。删除响应头中暴暴露露的敏敏感信息，例例如:
操作系统版本
Webserver版本
框架或编程语⾔言版本
攻击者可以使⽤用这些信息来检查你公开的版本中的漏漏洞洞，因此建议删除它们。 默认情况下，Go不不会公开这些内容。但是，如果你使⽤用任何类型的外
部包或框架，不不要忘记仔细检查。
类似这样的：
w.Header().Set("X-Request-With", "Go Vulnerable Framework 1.2")
在代码中搜索，暴暴露露的HTTP头的代码，然后删除它。
你还可以在web应⽤用程序中定义⽀支持哪些HTTP⽅方法。如果应⽤用程序只接受 POST 和 GET 请求，使⽤用以下代码实现CORS：
w.Header().Set("Access-Control-Allow-Methods", "POST, GET")
删除/禁⽤用你不不需要的内容
bloodzer0&Lingfighting
不不要担⼼心禁⽤用WebDAV之类的东⻄西，因为如果要实现WebDAV服务器器，需要导⼊入⼀一个包。
调整好⼼心态，然后遵循Web服务器器，流程和服务帐户上的最⼩小权限原则。
关注web应⽤用程序中的错误处理理。发⽣生异常时，安全地处理理错误。 你可以查看本指南中的错误处理理]
(https://www.giac.org/paper/gsec/2693/implementation-methodology-information-security-management-system-to-comply-bs-7799-requi/104600)) )
和⽇日志记录部分，以获取有关此主题的更更多信息。
防⽌止在 robots.txt ⽂文件中暴暴露露⽬目录结构。robots.txt是⼀一个⽅方向⽂文件，⽽而不不是⼀一个安全控件。 采⽤用⽩白名单⽅方法：
User-agent: *
Allow: /sitemap.xml
Allow: /index
Allow: /contact
Allow: /aboutus
Disallow: /
上⾯面的示例例将允许任何⽤用户代理理或机器器⼈人索引这些特定⻚页⾯面，并禁⽌止其余⻚页⾯面。 这样就不不会泄露露敏敏感⽂文件夹或⻚页⾯面 - 例例如管理理路路径或其他重要数据。
将开发环境与⽣生产环境的⽹网络隔离开来。为开发⼈人员和测试组，提供正确的访问权限，更更好的是创建额外的安全层来保护它们。在⼤大多数情况下，开
发环境更更容易易成为攻击的⽬目标。
最后，但仍然⾮非常重要的是，要有⼀一个软件更更改控制系统来管理理和记录Web应⽤用程序代码（开发和⽣生产环境）中的更更改。有许多在你⾃自⼰己主机上搭建
类似Github的克隆隆可以⽤用于此⽬目的。
虽然资产管理理系统不不是Go特定的问题，但以下部分将简要概述该概念及其实践。
资产管理理包括组织执⾏行行的⼀一系列列活动，以便便根据组织⽬目标实现资产的最佳配置，以及对每项资产所需安全级别的评估。应该注意的是，在本节中，当
我们提到资产时，我们不不仅讨论系统的组件，⽽而且还讨论软件。
实施该系统涉及的步骤如下：
1. 确定信息安全在企业中的重要性。
2. 定义AMS的范围。
3. 定义安全策略略。
4. 建⽴立安全组织结构。
5. 识别和分类资产。
6. 识别和评估⻛风险。
7. 规划⻛风险管理理。
8. 实施⻛风险缓解策略略。
9. 写下适⽤用性声明。
10. 培训员⼯工并树⽴立安全意识。
11. 监控并查看AMS性能。
12. 维护AMS并确保持续改进。
可以在此处找到对此实现更更深⼊入的分析。
关于OWASP SCP的这⼀一节，将讨论开发⼈人员和DBA，在web应⽤用程序中使⽤用数据库时，需要采取的所有数据库安全问题和操作。
Go没有数据库驱动程序，⽽而是在database/sql包上有⼀一个核⼼心接⼝口驱动程序。这意味着在使⽤用数据库连接时需要注册SQL驱动程序(例例
如:MariaDB、sqlite3)。
实现更更好的安全性
资产管理理系统：
数据库安全
最佳实践
bloodzer0&Lingfighting
在Go中实现数据库之前，您应该注意下⾯面我们将讨论的⼀一些配置：
安全数据库安装
更更改/设置root账户的密码；
删除本地主机外部可访问的root帐户；
删除任何匿匿名⽤用户帐户；
删除任何现有的测试数据库；
删除任何不不必要的存储过程、实⽤用程序包、不不必要的服务、vendor内容(例例如示例例模式)。
安装数据库与Go⼀一起使⽤用所需的最少功能和选项集。
禁⽤用web应⽤用程序上不不需要连接到数据库的任何默认帐户。
另外，由于验证数据库上的输⼊入和编码输出⾮非常重要，所以请务必阅读本指南的输⼊入验证 和输出编码部分。
在使⽤用数据库时，这基本上可以适⽤用于任何编程语⾔言。
sql.Open 不不返回数据库连接，⽽而是返回 *DB ：数据库连接池。当运⾏行行⼀一个数据库操作（例例如查询）时，从池中取出⼀一个可⽤用连接，该连接应该
在操作完成后⽴立即返回到连接池中。
请记住，仅在⾸首次执⾏行行数据库操作（如查询）时才会打开⼀一个数据库连接。 sql.Open 并不不会测试数据库连接：数据库凭据错误，要在第⼀一个数据
库操作执⾏行行时才会触发。
根据经验，应该始终使⽤用 database/sql 接⼝口的上下⽂文变体(例例如QueryContext())，并提供适当的上下⽂文。
来⾃自Go官⽅方⽂文档：“Package上下⽂文定义了了Context类型，它跨API边界和进程之间传递截⽌止⽇日期，取消信号和其他请求范围的值。” 在数据库级别，
当上下⽂文被取消时，如果没有提交事务，将回滚事务，rows(来⾃自QueryContext)将被关闭，并返回所有资源。
数据库连接
概念
bloodzer0&Lingfighting
package main
import (
    "context"
    "database/sql"
    "fmt"
    "log"
    "time"
    _ "github.com/go-sql-driver/mysql"
)
type program struct {
    base context.Context
    cancel func()
    db *sql.DB
}
func main() {
    db, err := sql.Open("mysql", "user:@/cxdb")
    if err != nil {
        log.Fatal(err)
    }
    p := &program{db: db}
    p.base, p.cancel = context.WithCancel(context.Background())
    // Wait for program termination request, cancel base context on request.
    go func() {
        osSignal := // ...
        select {
        case <-p.base.Done():
        case <-osSignal:
            p.cancel()
        }
        // Optionally wait for N milliseconds before calling os.Exit.
    }()
    err =  p.doOperation()
    if err != nil {