Escape character is '^]'. 
GET / HTTP/1.1 
Host: example.org 
HTTP/1.1 200 OK 
Date: Sat, 21 May 2005 12:34:56 GMT 
Server: Apache/1.3.31 (Unix) 
Accept-Ranges: bytes 
Content-Length: 410 
Connection: close 
Content-Type: text/html 
Example Web Page 
You have reached this web page by typing "example.com", 
"example.net", or "example.org" into your web browser. 
These domain names are reserved for use in documentation and are not 
available for registration. See 
RFC 2606, Section 
3. 
Connection closed by foreign host. 
$  
《PHP 安全基础详解》        www.528163.cn 提供 
上例中所显示的请求是符合 HTTP/1.1 规范的最简单的请求，这是因为 Host
信息是头部信息中所必须有的。一旦你输入了表示请求结束的连续两个换行符，
整个 HTML 的回应即显示在屏幕上。 
Telnet 实用程序不是与 Web 服务器直接通信的唯一方法，但它常常是最方便
的。可是如果你用 PHP 编码同样的请求，你可以就可以实现自动操作了。前面
的请求可以用下面的 PHP 代码实现： 
当然，还有很多方法去达到上面的目的，但其要点是 HTTP 是一个广为人知
的标准协议，稍有经验的攻击者都会对它非常熟悉，并且对常见的安全漏洞的攻
击方法也很熟悉。 
相对于欺骗表单，欺骗 HTTP 请求的做法并不多，对它不应该关注。我讲述
这些技巧的原因是为了更好的演示一个攻击者在向你的应用输入恶意信息时是
如何地方便。这再次强调了过滤输入的重要性和 HTTP 请求提供的任何信息都是
不可信的这个事实。 
第三章
第三章
第三章
第三章 数
数
数
数据库及
据库及
据库及
据库及 SQL 
PHP 的作用常常是沟通各种数据源及用户的桥梁。事实上，有些人认为 PHP
更像是一个平台而不是一个编程语言。基于这些原因，PHP 频繁用于与数据库的
交流。 
PHP 可以很好的胜任这个任务，其原因特别是由于它能与很多种数据库连
接。下面列举了 PHP 支持的小部分数据库： 
DB2 
ODBC 
《PHP 安全基础详解》        www.528163.cn 提供 
SQLite 
InterBase 
Oracle 
Sybase 
MySQL 
PostgreSQL 
DBM 
与任何的远程数据存储方式相同，数据库本身也存在着一些风险。尽管数据
库安全不是本书讨论的问题，但数据库安全是需要时刻注意的，特别是关于如何
对待从数据库读取作为输入的数据的问题。 
正如第一章所讨论的，所有输入必需要进行过滤，同时所有的输出必须要转
义。当处理数据库时，意味着所有来自数据库的数据要过滤，所有写入数据库的
数据要进行转义。 
小提示 
常犯的错误是忘记了 SELECT 语句本身是向数据库传送的数据。尽管该语
句的目的是取得数据，但语句本身则是输出。 
很多 PHP 开发人员不会去过滤来自数据库的数据，他们认为数据库内保存
的是已过滤的数据。虽然这种做法的安全风险是很小的，但是这不是最好的做法，
同时我也不推荐这样做。这种做法是基于对数据库安全的绝对信任，但同时违反
了深度防范的原则。如果恶意数据由于某些原因被注入了数据库，如果你有过滤
机制的话，就能发现并抓住它。请记住，冗余的安全措施是有价值的，这就是一
个很好的例子。 
本章包括了其它几个需要关心的主题，包括访问权限暴露及 SQL 注入。SQL
注入是需要特别关注的，这是因为在流行的 PHP 应用中频繁发现了 SQL 注入漏
洞。 
3.1. 访问权限暴露
访问权限暴露
访问权限暴露
访问权限暴露 
数据库使用中需要关注的主要问题之一是访问权限即用户名及密码的暴露。
在编程中为了方便，一般都会用一个 db.inc 文件保存，如：  
《PHP 安全基础详解》        www.528163.cn 提供 
用户名及密码都是敏感数据，是需要特别注意的。他们被写在源码中造成了
风险，但这是一个无法避免的问题。如果不这么做，你的数据库就无法设置用户
名和密码进行保护了。 
如果你读过 http.conf（Apache 的配置文件）的默认版本的话，你会发现默
认的文件类型是 text/plain（普通文本）。这样，如果 db.inc 这样的文件被保存在
网站根目录下时，就引发了风险。所有位于网站根目录下的资源都有相应的
URL，由于 Apache 没有定义对.inc 后缀的文件的处理方式类型，在对这一类文
件进行访问时，会以普通文本的类型进行返回（默认类型），这样访问权限就被
暴露在客户的浏览器上了。 
为了进一步说明这个风险，考虑一下一个以/www 为网站根目录的服务器，
如果 db.inc 被保存在/www/inc，它有了一个自已的
URLhttp://example.org/inc/db.inc(假设 example.org 是主机域名)。通过访问该 URL
就可以看到 db.inc 以文本方式显示的源文件。无论你把该文件保存在/www 哪个
子目录下，都无法避免访问权限暴露的风险。 
对这个问题最好的解决方案是把它保存在网站根目录以外的包含目录中。你
无需为了达到包含它们的目的而把它们放至在文件系统中的特定位置，所有只要
做的只是保证 Web 服务器对其有读取权限。因此，把它们放在网站根目录下是
没有必要的风险，只要包含文件还位于网站根目录下，任何减少风险的努力都是
徒劳的。事实上，你只要把必须要通过 URL 访问的资源放置在网站根目录下即
可。毕竟这是一个公共的目录。 
前面的话题对于 SQLite 数据库也有用。把数据库保存在当前目录下是非常
方便的，因为你只要调用文件名而无需指定路径。但是，把数据库保存在网站根
目录下就代表着不必要的风险。如果你没有采用安全措施防止直接访问的话，你
的数据库就危险了。 
如果由于外部因素导致无法做到把所有包含文件放在网站根目录之外，你可
以在 Apache 配置成拒绝对.inc 资源的请求。  
Order allow,deny 
Deny from all 
译注：如果只是因为要举个例子而这么写的话，可以理解，毕竟大家学到了
一些手段，但这个例子未免生硬了一点。实际上只要把该文件更名为 db.inc.php
就可以了。就好象房子破了个洞而不去修补，却在外面去造一个更大的房子把破
房子套起来一样。 
在第 8 章中你还可以看到另外一种防止数据库访问权限暴露的方法，该方法
《PHP 安全基础详解》        www.528163.cn 提供 
对于共享服务器环境（在该环境下尽管文件位于网站根目录之外，但依然存在暴
露的风险）非常有效。 
3.2. SQL 注入
注入
注入
注入 
SQL 注入是 PHP 应用中最常见的漏洞之一。事实上令人惊奇的是，开发者
要同时犯两个错误才会引发一个 SQL 注入漏洞，一个是没有对输入的数据进行
过滤（过滤输入），还有一个是没有对发送到数据库的数据进行转义（转义输出）。
这两个重要的步骤缺一不可，需要同时加以特别关注以减少程序错误。 
对于攻击者来说，进行 SQL 注入攻击需要思考和试验，对数据库方案进行
有根有据的推理非常有必要（当然假设攻击者看不到你的源程序和数据库方案），
考虑以下简单的登录表单：  
CODE: 
Username:  
;Password:  
图 3-1 给出了该表单在浏览器中的显示。 
作为一个攻击者，他会从推测验证用户名和密码的查询语句开始。通过查看
源文件，他就能开始猜测你的习惯。 
图 3-1. 登录表单在浏览器中的显示 
命名习惯。通常会假设你表单中的字段名为与数据表中的字段名相同。当然，
确保它们不同未必是一个可靠的安全措施。 
第一次猜测，一般会使用下面例子中的查询：  
CODE: 
使用用户密码的 MD5 值原来是一个通行的做法，但现在并不是特别安全了。
最近的研究表明 MD5 算法有缺陷，而且大量 MD5 数据库降低了 MD5 反向破解
《PHP 安全基础详解》        www.528163.cn 提供 
的难度。请访问 http://md5.rednoize.com/ 查看演示。 
译注：原文如此，山东大学教授王小云的研究表明可以很快的找到 MD5 的
“碰撞”，就是可以产生相同的 MD5 值的不同两个文件和字串。MD5 是信息摘
要算法，而不是加密算法，反向破解也就无从谈起了。不过根据这个成果，在上
面的特例中，直接使用 md5 是危险的。 
最好的保护方法是在密码上附加一个你自己定义的字符串，例如：  
当然，攻击者未必在第一次就能猜中，他们常常还需要做一些试验。有一个
比较好的试验方式是把单引号作为用户名录入，原因是这样可能会暴露一些重要