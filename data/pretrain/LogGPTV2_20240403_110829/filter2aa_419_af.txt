### 逃逸字符与HTTP请求示例

逃逸字符是`^]`。

以下是一个符合HTTP/1.1规范的最简单的请求示例，其中包含了必需的`Host`头部信息。一旦输入了表示请求结束的两个连续换行符，整个HTML响应就会显示在屏幕上。

```plaintext
GET / HTTP/1.1
Host: example.org

HTTP/1.1 200 OK
Date: Sat, 21 May 2005 12:34:56 GMT
Server: Apache/1.3.31 (Unix)
Accept-Ranges: bytes
Content-Length: 410
Connection: close
Content-Type: text/html

Example Web Page
You have reached this web page by typing "example.com", "example.net", or "example.org" into your web browser.
These domain names are reserved for use in documentation and are not available for registration. See RFC 2606, Section 3.

Connection closed by foreign host.
```

### Telnet实用程序与PHP编码请求

Telnet 实用程序不是与Web服务器直接通信的唯一方法，但它通常是较为便捷的方式之一。如果你使用PHP来编码同样的请求，则可以实现自动化操作。例如：

```php
<?php
$fp = fsockopen("example.org", 80, $errno, $errstr, 30);
if (!$fp) {
    echo "$errstr ($errno)<br />\n";
} else {
    $out = "GET / HTTP/1.1\r\n";
    $out .= "Host: example.org\r\n";
    $out .= "Connection: Close\r\n\r\n";
    fwrite($fp, $out);
    while (!feof($fp)) {
        echo fgets($fp, 128);
    }
    fclose($fp);
}
?>
```

### HTTP协议的安全性

HTTP是一个广为人知的标准协议，有经验的攻击者对其非常熟悉，并且对常见的安全漏洞和攻击方法也很了解。虽然相对于欺骗表单，伪造HTTP请求的情况较少见，但理解这些技术对于更好地防御恶意输入非常重要。这再次强调了过滤输入的重要性以及不可信任任何通过HTTP请求提供的信息。

### 第三章：数据库及SQL

#### PHP作为数据源与用户之间的桥梁

PHP经常用于连接各种数据源与用户。它支持多种数据库类型，包括但不限于DB2、ODBC、SQLite、InterBase、Oracle、Sybase、MySQL、PostgreSQL和DBM等。尽管本书不专门讨论数据库安全问题，但在处理从数据库读取的数据时，确保其安全性是非常重要的。

正如第一章所述，所有输入都必须经过过滤，而所有输出则需要进行转义。当涉及到数据库操作时，这意味着所有来自数据库的数据都需要被过滤，同时写入数据库的所有数据也需要被转义。

**提示**：不要忘记`SELECT`语句本身也是向数据库发送的数据。即使它的目的是获取数据，该语句本身也属于输出。

许多PHP开发者不会过滤从数据库中读取的数据，因为他们假设数据库内部存储的是已经过滤过的数据。虽然这种做法的安全风险相对较小，但这并不是最佳实践，也不被推荐。这样的做法基于对数据库安全性的绝对信任，违背了纵深防御的原则。如果由于某种原因恶意数据被注入到数据库中，那么如果没有适当的过滤机制，就无法发现并阻止它。

本章还将涵盖其他几个关键主题，如访问权限暴露和SQL注入。特别是SQL注入，在流行的PHP应用中频繁出现。

#### 访问权限暴露

数据库使用中的一个主要问题是用户名和密码（即访问权限）的暴露。通常情况下，为了方便起见，这些敏感信息会被保存在一个名为`db.inc`的文件中。然而，这样做存在一定的风险，因为默认情况下Apache将文件类型设置为`text/plain`。因此，如果`db.inc`文件位于网站根目录下，则可以通过URL直接访问，从而导致凭证泄露。

解决这一问题的最佳方案是将包含此类敏感信息的文件置于网站根目录之外的位置。这样既能保证Web服务器能够读取这些文件，又能避免它们被直接访问的风险。此外，还可以通过配置Apache拒绝`.inc`文件类型的请求来进一步加强安全性。

#### SQL注入

SQL注入是PHP应用程序中最常见的漏洞之一。要引发SQL注入攻击，开发者需要同时犯两个错误：未对输入数据进行充分过滤以及未对发送至数据库的数据进行适当转义。这两个步骤对于减少编程错误至关重要。

对于攻击者而言，进行SQL注入攻击需要一定的推理能力和试验。他们通常会尝试猜测验证用户名和密码的查询语句。例如，考虑一个简单的登录表单：

```html
<form action="login.php" method="post">
    <label>Username:</label>
    <input type="text" name="username" />
    <br/>
    <label>Password:</label>
    <input type="password" name="password" />
    <br/>
    <input type="submit" value="Login" />
</form>
```

攻击者可能会首先假设你的查询类似于如下形式：

```sql
SELECT * FROM users WHERE username = '$_POST[username]' AND password = MD5('$_POST[password]')
```

虽然使用MD5哈希值曾是一种常见做法，但现在已不再被视为特别安全的方法。最新的研究表明，MD5算法存在缺陷，且大量MD5数据库的存在使得反向破解变得更加容易。因此，建议在密码上附加一个自定义字符串以增加安全性。

总之，正确处理输入和输出数据对于防止SQL注入和其他类型的安全威胁至关重要。