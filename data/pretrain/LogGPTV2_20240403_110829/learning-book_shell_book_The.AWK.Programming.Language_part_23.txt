regular expression match, negated match
string concatenation (no explicit operator)
relationals
add, subtract
/%
multiply, divide, mod
+
unary plus, unary minus, logical NOT
exponentiation
++
increment, decrement (prefix and postfix)
$
field
All operators are left associative, except assignment, ?:, and ~, which are right associa-
tive. Any expression may be parenthesized.
---
## Page 201
AWK SUMMARY
APPENDIX A
161
Regular expressions
The regular expression metacharacters are
The following table summarizes regular expressions and the strings they match:
matches the nonmetacharacter c
matches the escape sequence or literal character c
matches the beginning of a string
$
matches the end of a string
matches any single character
[abc... ]
character class: matches any of abc..
[dabec... ]
negated class: matches any single character but abc...
r,ir
 ao 1  p s ee se oe
（)（)
concatenation: matches xy where 7 matches x and 7 matches y
(r)·
matches zero or more consecutive strings matched by r
()
(r)+
matches one or more consecutive strings matched by r
matches the null string or one string matched by r
(r)
grouping: matches the same strings as 7
expressions may be omitted as long as the precedence of operators is respected.
Escape sequences
These sequences have special meanings in strings and regular expressions.
\b
backspace
\f
formfeed
\n
newline
√r
carriage return
\t
tab
ddd
octal value ddd, where ddd is 1 to 3 digits between 0 and 7
any other character c literally, e.g., \" for " and \\ for \
Limits
Any particular implementation of awk enforces some limits. Here are typical values:
100 fields
3000 characters per input record
3000 characters per output record
1024 characters per field
3000 characters per printf string
400 characters maximum literal string
400 characters in character class
15 open files
1 pipe
double-precision floating point
Numbers are limited to what can be represented on the local machine, e.g., 10_10”;
numbers outside this range will have string values only.
---
## Page 202
192AWK SUMMARY
APPENDIX A
Initialization, comparison, and type coercion
Each variable and field can potentially be a string or a number or both at any time.
When a variable is set by an assignment
var = expr
its type is set to that of the expression. ("Assignment" includes +#, ==, etc.) An arith-
metic expression is of type number, a concatenation is of type string, and so on. If the
 o yei  as s jo ad1 q u  =u se do s  s usse
In comparisons, if both operands are numeric, the comparison is made numerically
Otherwise, operands are coerced to string if necessary, and the comparison is made on
strings. The type of any expression can be coerced to numeric by subterfuges such as
and to string by
expr + 0
expr
(i.e., concatenation with a null string). The numeric value of an arbitrary string is the
numeric value of its numeric prefix.
Uninitialized variables have the numeric value 0 and the string value "*. Accord-
ingly, if x is uninitialized,
if (x) ...
is false, and
if (1x) ...
if (x  **)..*
are all true. But note that
if（x =s*0").·.
is false.
The type of a field is determined by context when possible; for example,
$1++
implies that $1 must be coerced to numeric if necessary, and
$1 = $1 *,* $2
ressu  sus o po sq m  pe Ls te sd
In contexts where types cannot be reliably determined, e.g-
If ($1 s= $2) ..*
the type of each field is determined on input. All fields are strings; in addition, each
field that contains only a number is also considered numeric.
Fields that are explicitly null have the string value "*: they are not numeric. Non-
existent fields (i.e., fields past NF) and $0 for blank lines are treated this way too.
As it is for fields, so it is for array elements created by split.
Mentioning a variable in an expression causes it to exist, with the values O and ** as
described above. Thus, if arr[i] does not currently exist,
if （arr[1] os *")...
causes it to exist with the value *" and thus the if is satisfied. The test
if (i in arr) ...
determines if azz [I] exists without the side effeet of creating it.
---
## Page 203
R
ANSWERSTOSELECTEDEXERCISES
Exercise 3-1. An easy way to ignore blank lines is to replace the first line of sum3 by
nf1d == 0 s& NF > 0 { nf1d = NP
口
Exercise 3-3. Without the test, sums of nonnumeric columns get accumulated, but not
printed. Having the test avoids the possibility that something will go wrong (like over-
flow) while accumulating the useless sums. There is no significant effect on speed. 
Exercise 3-4. This problem is easily handled with an associative array:
END (for (x in total) print x, total[x]1*sort")
（total[$1] += $2}
 x s   ss     o  
25, the following program leaves the data unchanged if the longest line would fit, and
otherwise scales the lines so the longest is 25 long.
.The new array y is used to hold the
scaled lengths so that the x counts are still correct.
END { maX = MAXSTARS = 25
(x[int($1/10)]++}
for（1=0:1nax)
for（1=0:1 0)
t=ts
return t
口
Exercise 3-6. This requires two passes over the data, one to determine the range of the
buckets and one to assign items to them. 
61
---
## Page 204
APPENDIX B
Exercise 3-7. The problem of where commas go in numbers is not clearly defined.
Despite the canons of software engineering, it is common to have to solve a problem
without knowing exactly what it is. Here are two possible answers. The following pro-
gram sums integers that have commas in the conventional places:
/[+-]7[0-9][0-9]7[0-9]7(,[0-9][0-9][0-9]]+$/ {
sun += $0
gsub(/,/.
next
END
{print sum }
(print "bad format:", s0 )
Decimal numbers usually don’t have commas after the decimal point. The program
/[+-]7[0-9][0-9]7[0-9]7(,[0-9]0-9]0-9])+([.1(0-9]+)7s/(
geub(/,/,
sun += $0
next
(print “bad fornat:", s0}
END
（print sun )
sums decimal numbers that have commas and a digit before the decimal point. 
Exercise 3-8. The function daynum(y,m,d) returns the number of days, counting
from January 1, 1901. Dates are written as year month day, e.g., 2001 4 1. February
q p s u s  s      s u s 6 
00 1ng se de 1u e 01 pue 0061 s 00 q 1u 1g
function daynun(y, ，d，
split(°31 28 3130 31 30 31 31 30 31 30 31°, day8)
days,，n)(1  Jan 1,1901
n=(y-1901)365+int((y-1901)/4)
365 days a year, plus one for cach leap year
if (y % 4= 0) # 1eap year from 1901 to 2099
for (1 = 1; 1=0
if （1patch（$1,right))
1vid = max(lvid,RLENGTH)
rwid = max(rwid, RLENGTH)
RLENGTH=0
)else
vid = nax(vid, 1wid + rwid)
vid = max(vid, length(s1))
1
END(
for （x = 1;r  y)? x :y }
function numjust(s)(position 8
if （laatch(s,right))
return s substr(blanks, 1, int(rvid-RLENGTH+(vid-(1vid+rwid))/2))
RLENGTH =0
1
Each number that doesn’t use all of 1wid has to be shifted left, so there is a slightly
more elaborate calculation in numjust. 口
Exercise 4-5.
awk*
BEGIN ( PS ="\t*; pat = ARGV[1]; ARGV[1] =*-* }
14ed.1s
printf(“%s:\n*，$1)
printf("\txd mi1lion people\n°,$3)
printf("\tx.1f people per sq.md.n*,1000+s3/s2)
"s1” nrel)
1++
missing(qattr)
 didn't find a table with all attributes
else(
table 1 contains attributes in query
for （j inqattr)
 create awk progran
1f（lexists[1]&4ncmd[1] >0）(
for (j = 1;3<a ncnd[1]: j++)
print“executingn*xfor debagging
x=xcmd[1, j]*n*
if（systea（x）1= 0)（create table i
print *command failed, query skipped\n*, x
return
exists[i]+*
awkcnd = sprintf("avk -r'\t′*%s′%o", query， relnane[1])
printf(*query: %s\n*, avkcmd)
for debugging
system(avkcnd)
1
The array exists remembers which derived files have been computed. This version of
doquery also includes the answer to the last problem. 
Exercise 4-12. The simplest answer is to change qawk to begin
---
## Page 208
198
ANSWERS TO SELECTED EXERCISES
APPENDIX B
Then a query consists of everything up to a blank line. Regardless of the mechanism,
queries have to turn into legal awk programs. 
Exercise 5-1. The “random” numbers are of course completely deterministic: knowing
the seed and the algorithm fixes the sequence of values. There are many properties,
however, that the sequence shares with a random sequence. A complete discussion may
be found in Knuth’s The Art of Computer Programming, Volume 2. 
is due to R. W. Floyd:
 print k distinct randon integers betveen 1 and n
{randon($1, $2) }
function randon(k, n,
A,1，r）（
for （1 = n-k+1;i<# n;i++)
[(r = randint(1)) in A) ? A[1]:A[x]
for (i in A)
1
print 1
function randint(n) ( return int(n*zand())+1 )
口
Exercise 5-3. The problem is to generate random bridge hands of the form:
S:1096 4
NORTH
H: 8 7
C:10853
D:J 106
5: K 8 7 3
S: A J 5
EAST
H: K Q 4 3 2
D: 8 7
D: A K Q9 2
H:J
C:A J
HLAOS
C:KQ62
S:Q2
H:A 10 9 6 5
C:97 4
D:543
The program below generates a random permutation of the integers 1 through 52, which
is put into the array deck. The array is sorted into four sequences of thirteen integers
spades, 51 to the king of spades, 1 to the deuce of clubs.
The function permute(k,n) uses Floyd’s technique from the previous exercise to
generate a random permutation of length k of integers between 1 and n. The function
sort(x,y) uses a method called insertion sort, discussed in Section 7.1, to sort the ele-
ments in deck[x..y]. Finally, the function prhands formats and prints the four
hands in the manner shown above.
---
## Page 209
ANSWERS TO SELECTED EXERCISES
APPENDIX B
661
# bridge - generate random bridge hands
BEGIN (split(permute(52,52),deck)
generate a random deck
sort(1,13）; sort(14,26);sort(27,39); sort（40,52)  sort hands
prhands()
 format and print the four hands
}
funetion peraute(k, n,
i,p.r)(
generate a randos permutation
for (1 = n-k+1; i <= n; i++)
srand(): p =
of k integers betveen 1 and n
else p.*·r p
sub("* r "*,
**", p)
put i after r in p
return p
 put r at beginning of p
funetion sort(left,right,
1.j,t) (# sort hand in deck[left..right]
for（1=1eft+1;1<=right; 1++)