MROO
T%
\system32\wbemsvc.dll
%SYSTE
MROO
T%
\system32\windows.storage.
dll
%SYSTE
MROO
T%
\system32\windowsudk.shell
common.dll
%SYSTE
MROO
T%
\system32\XmlLite.dll
%SYSTE
MROO
T%
Microsoft Ofﬁce 2021
C:\Program Files (x86)\Microsoft
Ofﬁce\root\Ofﬁce16\excel.exe
\system3
2\direct
manipul
ation.dll
%SYSTE
MROO
T%
\system32\msctf.dll
%SYSTE
MROO
T%
\system32\mswsock.dll
环境变量
应⽤
可执⾏⽂件
DLL（相
对于变
量）
%SYSTE
MROO
T%
\system32\netprofm.dll
%SYSTE
MROO
T%
\system32\npmproxy.dll
%SYSTE
MROO
T%
\system32\rsaenh.dll
%SYSTE
MROO
T%
\system32\twinapi.dll
%SYSTE
MROO
T%
\system32\windows.storage.
dll
%SYSTE
MROO
T%
\system32\windowscodecs.d
ll
%SYSTE
MROO
T%
C:\Program Files (x86)\Micro
soft Ofﬁce\root\Ofﬁce16\out
look.exe
\system32\msctf.dll
%SYSTE
MROO
T%
\system32\mswsock.dll
%SYSTE
MROO
T%
\system32\netprofm.dll
%SYSTE
MROO
T%
\system32\npmproxy.dll
%SYSTE
MROO
T%
\system32\rsaenh.dll
环境变量
应⽤
可执⾏⽂件
DLL（相
对于变
量）
%SYSTE
MROO
T%
\system32\windows.storage.
dll
%SYSTE
MROO
T%
\system32\windowscodecs.d
ll
%SYSTE
MROO
T%
C:\Program Files (x86)\Micro
soft Ofﬁce\root\Ofﬁce16\po
werpnt.exe
\system32\dataexchange.dll
%SYSTE
MROO
T%
\system32\msctf.dll
%SYSTE
MROO
T%
\system32\mswsock.dll
%SYSTE
MROO
T%
\system32\netprofm.dll
%SYSTE
MROO
T%
\system32\npmproxy.dll
%SYSTE
MROO
T%
\system32\propsys.dll
%SYSTE
MROO
T%
\system32\rsaenh.dll
%SYSTE
MROO
T%
\system32\twinapi.dll
%SYSTE
MROO
T%
\system32\windows.storage.
dll
环境变量
应⽤
可执⾏⽂件
DLL（相
对于变
量）
%SYSTE
MROO
T%
\system32\windowscodecs.d
ll
%SYSTE
MROO
T%
C:\Program Files (x86)\Micro
soft Ofﬁce\root\Ofﬁce16\wi
nword.exe
\system32\explorerframe.dll
%SYSTE
MROO
T%
\system32\msctf.dll
%SYSTE
MROO
T%
\system32\mswsock.dll
%SYSTE
MROO
T%
\system32\netprofm.dll
%SYSTE
MROO
T%
\system32\npmproxy.dll
%SYSTE
MROO
T%
\system32\propsys.dll
%SYSTE
MROO
T%
\system32\rsaenh.dll
%SYSTE
MROO
T%
\system32\twinapi.dll
%SYSTE
MROO
T%
\system32\windows.storage.
dll
%SYSTE
MROO
T%
\system32\windowscodecs.d
ll
环境变量
应⽤
可执⾏⽂件
DLL（相
对于变
量）
%SYSTE
MROO
T%
Microsoft Teams (built-in)
C:\Program Files\WindowsApps
\MicrosoftTeams_21253.510.996.
1465_x64__8wekyb3d8bbwe\mst
eams.exe
\system3
2\mswso
ck.dll
%SYSTE
MROO
T%
\system32\netprofm.dll
%SYSTE
MROO
T%
\system32\propsys.dll
%SYSTE
MROO
T%
\system32\twinui.dll
%SYSTE
MROO
T%
\system32\windows.storage.
dll
%SYSTE
MROO
T%
C:\Program Files (x86)\Micro
soft\EdgeWebView\Applicati
on\90.0.818.66\msedgeweb
view2.exe
\system32\dataexchange.dll
%SYSTE
MROO
T%
\system32\msctf.dll
%SYSTE
MROO
T%
\system32\mswsock.dll
%SYSTE
MROO
T%
\system32\ntmarta.dll
%SYSTE
MROO
T%
Mozilla Firefox 100
C:\Program Files\Mozilla Firefox
\ﬁrefox.exe
\system3
2\dataex
change.d
ll
环境变量
应⽤
可执⾏⽂件
DLL（相
对于变
量）
%SYSTE
MROO
T%
\system32\explorerframe.dll
%SYSTE
MROO
T%
\system32\mswsock.dll
%SYSTE
MROO
T%
\system32\netprofm.dll
%SYSTE
MROO
T%
\system32\propsys.dll
%SYSTE
MROO
T%
\system32\rsaenh.dll
%SYSTE
MROO
T%
\system32\windows.storage.
dll
%SYSTE
MROO
T%
\system32\winrnr.dll
%SYSTE
MROO
T%
Zoom 5.9.3
C:\Users%username%\AppData
\Roaming\Zoom\bin\Zoom.exe
\system3
2\mswso
ck.dll
%SYSTE
MROO
T%
\system32\propsys.dll
%SYSTE
MROO
T%
\system32\rsaenh.dll
%SYSTE
MROO
T%
\system32\windows.storage.
dll
上述列表并⾮详尽⽆遗；许多其他软件解决⽅案和可执⾏⽂件可能已经过测试，和/或在不同
的情况下（例如，使⽤某些命令⾏参数、提升权限等）。上⾯列出的最重要的⼀点是，这种新
型的 DLL 劫持通常存在于受信任的可执⾏⽂件中，这意味着检测个别情况不会扩展。
对特权升级和持久性的影响
考虑到所有这些，值得探索这种类型的 DLL 劫持是否以及如何与普通执⾏之外的策略结合使
⽤。这种⽅法的⼀个关键⽅⾯是，易受攻击的可执⾏⽂件必须以与平常略有不同的⽅式启动，
因为需要更新进程级环境变量。这就是使⽤它创建适当持久性的原因：传统的持久性机制，例
如⾃动启动注册表项和启动⽂件夹中的 .LNK ⽂件，不提供指定执⾏⽬标命令时应设置的环境
变量的⽅法。当然，仍然可以使⽤设置环境变量然后运⾏易受攻击的程序的“中间命令”，类似
于运⾏之前讨论的 VBScript 或 PowerShell 脚本，
但是，存在允许设置环境变量的持久性机制。⼀个例⼦是 Windows 服务：很少使⽤的注册表
值 Environment 可⽤于为服务的⽬标可执⾏⽂件（在 中指定 ImagePath ）设置进程级环境
变量。如果⽬标可执⾏⽂件容易受到基于环境变量的 DLL 劫持的攻击，则可以以持久的⽅式
利⽤它。
例如，请考虑 C:\Windows\System32\spoolsv.exe 在启动时执⾏的 Printer Spooler 服务。
将 Environment 值设置为使⽤不同的路径覆盖 SYSTEMROOT ，然后重新启动服务或（因为默
认启⽤打印机后台处理程序）重新启动机器，将导致 spoolsv.exe 使⽤操纵的路径。因为 sp
oolsv.exe 试图加载 %SYSTEMROOT%\System32\mswsock.dll ，它现在会被欺骗加载恶意版
本的 mswsock.dll . 事实上，由于服务在SYSTEM⽤户下运⾏，DLL 将在该上下⽂中执⾏。
在打印机 Spooler 服务中成功劫持 mswsock.dll 的 DLL 演示，将恶意版本的 DLL 加载为
SYSTEM。
由于更改服务注册表项需要管理权限，因此这不会导致“适当的”权限提升。毕竟，如果有⼈⽆
论如何都提升了权限，他们也可以更改 ImagePath 值并以这种⽅式提升到SYSTEM。然⽽，改
变 ImagePath 更有可能被防御机制检测到，⽽添加⼀个 Environment 价值可能会被忽视。此
外，由于执⾏依赖于合法的服务可执⾏⽂件，因此以这种⽅式执⾏代码⽐运⾏恶意可执⾏⽂件
或恶意 PowerShell 命令要隐蔽得多。此外，如果 DLL Hijacking 执⾏得当，服务将继续按预
期⼯作，⽽更改服务的命令可能会导致功能缺失，从⽽导致系统不稳定。
使⽤这种类型的 DLL 劫持获得“适当的”权限提升甚⾄只是绕过⽤户帐户控制 (UAC) 是⼀项挑
战。如前所述，在⼤多数情况下，新⽣成的进程从⽗进程获取它们的环境变量。有⼀个例外：
当⼀个低完整性进程启动⼀个⾼完整性进程时，⾼完整性进程的环境变量被“重置”为系统级环
境变量。因此，如果⼀个新进程导致 UAC 被调⽤，那么新进程将被提供系统级别指定的环境
变量，⽽不管⽗进程本身已设置或在创建新进程时提供了哪些环境变量。Microsoft 可能做出
此设计决定是为了通过环境变量限制权限提升机会的范围（例如 %PATH% 拦截 [ 11 ]); 不得不
说，在这种情况下，它这样做是相当成功的。尽管有记录的应⽤程序覆盖此⾏为的案例 [ 12
]，但这些案例似乎很少⻅。
预防和检测
与每种类型的 DLL 劫持⼀样，完全防⽌这种情况发⽣的最佳⽅法是让应⽤程序始终使⽤绝对
且明确（即完全解析）的路径。有各种可⽤的 Windows API 调⽤，完全消除了依赖环境变量
获取路径的需要；例如，函数 GetWindowsDirectory [ 13 ] 是 SYSTEMROOT 变量的替代品。
更好的做法是在将 DLL 加载到内存之前始终验证它们的有效性。
具体到环境变量：正如⼀开始提到的，随着Windows Registry的引⼊，Windows中已经没有明
显需要环境变量的概念了。系统设置类参数，如静态路径、⽤户名等，可以在Registry中设
置，也可以通过API调⽤获取；进程类型参数可以在命令⾏上设置。因此，向后兼容性可能是
我们在 Windows 中仍然有环境变量的原因。
从检测的⻆度来看，可以做的⼀些显⽽易⻅的事情是检查 DLL 是否从意外位置加载。例如，
位于其中的可执⾏⽂件 C:\Windows\System32 不太可能从“temp”或 AppData ⽂件夹加载
DLL - 因此从这些位置加载的 DLL 值得仔细研究。然⽽，System32 ⽂件夹之外的应⽤程序可
能会从此类⽂件夹（例如 Microsoft Teams 和 Slack）合法地加载 DLL，因此很难将其转变为
通⽤规则。
寻找具有已知由易受攻击的应⽤程序加载的名称的 DLL ⽂件的创建是⼀种效果不佳的⽅法 [
14 ]。⼀种相关但稍微可⾏的⽅法是在意外位置寻找某些⽂件夹结构的创建。例如，⼏乎所有
劫持⽅法都依赖 %SYSTEMROOT% 或 %WINDIR% 需要 System32 在⽤户可写位置创建⼀个⽂件
夹。⼀般来说，这应该很少⻅——尽管⼀些合法软件似乎也在这样做，但在排除此类情况后，
这可能是⼀种检测最明显形式的基于环境变量的 DLL 劫持的简单⽅法。
话虽如此，如果易受攻击的可执⾏⽂件使⽤另⼀个环境变量，上述⽅法也可能不起作⽤。因
此，重要的是不要只关注检测 DLL 劫持本身，⽽更关注随后的活动。检测对于执⾏它的进程
来说很少⻅的活动，是⼀天结束时出现问题的最佳指标。因此，虽然您的防御系统可能⽆法检
测到所有内容，但它检测到的越多，攻击者就越难以完全被忽视。
这项研究⾸次在 DEF CON 30 上提出；[你可以在这⾥]
(https://www.wietzebeukema.nl/literature/Beukema, WJB - Save The Environment
(Variable).pdf)找到幻灯⽚。
1. 从技术上讲，还有⼀种记录不⾜的第四种类型，VOLATILE。这与 USER 级别的环境变量相
同，但在⽤户注销后会重置。↩
2. 作为旁注，不幸的是，基于环境变量的 DLL 劫持⽬前不能很好地映射到 MITRE ATT&CK [
7 ]。由于我之前的 DLL Hijacking 博客⽂章中提到的这个和其他原因，我已经提交了⼀个
提案 [ [8](https://www.wietzebeukema.nl/literature/Beukema, WJB - A Single Sub-
Technique for DLL Hijacking.pdf) ]，我希望 MITRE 在开发框架的下⼀个版本时能够考虑到
该提案。[↩]
译⽂申明
⽂章来源为 近期阅读⽂章 ，质量尚可的，⼤部分较新，但也可能有⽼⽂章。
开卷有益，不求甚解 ，不需⾯⾯俱到，能学到⼀个⼩技巧就赚了。
译⽂仅供参考 ，具体内容表达以及含义,  以原⽂为准  (译⽂来⾃⾃动翻译)
如英⽂不错的， 尽量阅读原⽂ 。(点击原⽂跳转)
每⽇早读 基本⾃动化发布(不定期删除)，这是 ⼀项测试
最新动态: Follow Me
微信/微博： red4blue
公众号/知乎： blueteams
收录于合集 #红队 18
阅读原⽂
喜欢此内容的⼈还喜欢
收录于合集 #红队 18
下⼀篇 · 译⽂ | 使⽤ .NET 动态 PINVOKE 执⾏⾮托管代码
Sublert ⾃动监控⽬标⼦域⼯具
菜⻦⼩新
Web3系列教程之⾼级篇---9：检测看似合法但实际上是恶意的合约
李留⽩
android中webview的安全攻防
编码安全