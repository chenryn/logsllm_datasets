TCP prototype, fault tolerance mechanisms mainly addressed
HW/OS crashes. However, a common failure scenario is one
in which there are no HW/OS crashes and one of the appli-
cation replica (primary or backup) crashes or hangs, while
the other continues to function correctly. This can happen
because of differences in resources available on the primary
and backup server, e.g., the application on the primary may
run out of memory, while the application on the backup has
sufﬁcient memory available. We have enhanced ST-TCP to
address these scenarios.
A crash failure model is assumed (Byzantine failures are
not supported). ST-TCP handles all HW/OS failures, and
all those application failures whose underlying cause can be
traced back to the HW/OS (e.g., failures arising from mem-
ory allocation errors). Speciﬁcally, ST-TCP cannot handle
failures resulting from software bugs in the application since
these are likely to manifest both on the primary and the
backup (and thus would count as a double failure). When a
failure occurs at the primary server, the client sees one of the
following two events: (1) No response from the server, e.g.,
a crash failure of the server due to HW or OS crash. (2) A
TCP FIN or RST segment from the server indicating socket
closure, e.g., OS closes socket after application has crashed.
In ST-TCP, single crash failures are masked from the client
by suppressing the corresponding failure event and migrating
the TCP connection to the backup. Table 1 summarizes all sin-
gle crash failure conditions, symptoms observed and recovery
actions taken.
4.1 HW/OS Crash Failures
A HW/OS crash failure causes the primary to stop send-
ing/receiving any data on the TCP connection (i.e. it does not
send or ack any bytes). The backup concludes that the pri-
mary server has crashed if it detects HB failure on both links
(IP and serial links). The underlying assumption here is that
a single failure cannot take both links down, unless the pri-
mary has failed. In this case, the backup takes over the TCP
connection and shuts the primary down.
Similarly,
the primary concludes that
the backup has
crashed if it detects a HB failure on both links. The primary
shuts the backup down and runs in non fault-tolerant mode.
4.2 Application Crash Failures
Managing application failures is more complicated. Since
HW/OS is functioning correctly in these scenarios, the TCP
layer stays up and HB between the servers also stays up on
both the links. It is convenient to consider two separate cases
here depending on whether the OS cleans up or does not clean
up the failed application state.
4.2.1 Application Crash Failure without Cleanup
In this case, the application has failed, but the TCP socket is
not closed. This can happen if neither the OS detects the appli-
cation failure nor does the application itself close the socket
due to the failure. The key point here is that a TCP FIN or
RST segment is not generated. No data is sent or received
by the application layer, but client bytes received by TCP are
acknowledged by the TCP layer as long as the receive buffer
does not ﬁll up. Further, any bytes already in the send buffer
may be sent out to the client. If the application running on
the primary fails in this manner, the backup can observe one
or both of the following about the primary application: (1)
The application does not read any bytes from its TCP receive
buffer (2) The application does not write any bytes to its TCP
send buffer.
The last byte read and written by the application on the pri-
mary is available to the backup through the HB mechanism.
Failure detection is based on the following two parameters:
(1) The number of bytes that the primary application lags the
backup by (AppMaxLagBytes) (2) The time duration for
which some number of bytes, already read or written by the
backup application, have not been read or written by the pri-
mary application (AppMaxLagTime).
The two threshold values, AppMaxLagBytes and App-
MaxLagTime, are conﬁgurable parameters and inﬂuence the
failover time. A simple failure detection criteria would be: the
primary application is considered failed if it lags behind the
backup application by AppMaxLagBytes for a short dura-
tion of time (e.g., a few sec.) or, a particular byte read/written
by the primary application lags the corresponding one at the
backup by AppMaxLagTime. It is possible that the primary
application has not really failed but just degraded in perfor-
mance. However, if the failure criteria are met, the perfor-
mance degradation is considered to be severe enough to war-
rant a failover. There is no danger of a dual active server here,
because the backup powers down the primary [2] before tak-
ing over the TCP connection. The primary uses a similar cri-
teria for detecting failure of the backup application.
In some instances - when there is no activity on the con-
nection - failure detection may be delayed. However, these
failures will be detected when the connection is used again. It
should be noted that ST-TCP detects all application failures of
the type discussed in this subsection, that is, where a FIN or
RST segment is not generated.
4.2.2 Application Crash Failure with Cleanup
In this case, the application failure is detected by the OS. As
part of the application cleanup, the OS closes the TCP connec-
tion. An example of such a failure is an application crashing
as a result of receiving a SEGV signal. Such a failure could
also occur if the application detects a failure (e.g., a memory
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
3
Failure
HW/OS crash failure
Location
Primary
Symptom
Backup detects HB failure on both links
Backup
Primary detects HB failure on both links
1
2
3
Application
FIN/RST not generated)
failure
(TCP
Primary
Backup
Application
FIN/RST generated)
failure
(TCP
Primary
Backup
4
NIC or cable failure
Primary
Backup
5
Temporary Network failure
Backup
Primary
Recovery Action Taken
Backup takes over the TCP connection and
shuts primary down
Primary runs in non fault-tolerant mode and
shuts backup down
Backup takes over TCP connection and shuts
primary down
Primary runs in non fault-tolerant mode and
shuts backup down
FIN/RST suppressed for MaxDelayFIN; if
failure detected, backup takes over the TCP
connection and shuts primary down
FIN/RST discarded; if failure detected, pri-
mary runs in non fault-tolerant mode and
shuts backup down
Backup takes over the TCP connection and
shuts primary down
Primary runs in non fault-tolerant mode and
shuts backup down
Backup server requests and receives missed
bytes from the primary
None required; normal TCP behavior
Primary app. lags backup app. by AppMaxLag-
Bytes or by AppMaxLagTime (see Section 4.2.1)
Backup app. lags primary app. by AppMaxLag-
Bytes or by AppMaxLagTime (see Section 4.2.1)
TCP FIN/RST generated at primary but not at
backup; same symptoms of app. failure as in 2 above
(see Section 4.2.2)
TCP FIN/RST generated at backup but not at pri-
mary; same symptoms of app. failure as in 2 above
(see Section 4.2.2)
Both primary and backup detect HB failure on IP
link (but not on serial link); backup receives client
data but primary does not, or, backup can ping gate-
way, but primary cannot (see Section 4.3)
Both primary and backup detect HB failure on IP
link (but not on serial link); primary receives client
data or acks but backup does not (see Section 4.3)
HB on both links up; backup does not receive some
client bytes received by primary
Primary misses bytes; client retransmits
Table 1: Single Failure Scenarios
allocation error) and closes the TCP connection.
The main challenge in detecting this kind of failure is to
be able to distinguish between a TCP FIN generated due to
a normal closure of the socket and that generated due to an
abnormal one. To understand the complexity of this scenario,
consider that the application on the primary fails, and the TCP
on primary generates a FIN as a result. If this FIN is sent to the
client, the TCP connection will be terminated. This is despite
the fact that the application on the backup is running correctly.
To address this scenario, ST-TCP requires that a server
generating a FIN should immediately communicate the FIN
to the other server through the HB. If the primary generates a
FIN, it sends it to the client as soon as it learns (via HB) that
the backup has also generated a FIN. This scenario is a normal
closure of the TCP socket. While a failure can also result in
both the primary and the backup producing a FIN, it is a case
of double failure and is not currently handled by ST-TCP.
The interesting cases are where the primary and the backup
disagree, i.e., only one of them produces a FIN. In this case
the server generating the FIN delays sending it to the client
for a short period of time, MaxDelayFIN, e.g., 1 minute.
This is to account for cases where a failure may be detected
via other indications during this time.
In fact, by delaying
the FIN temporarily, this failure scenario during the delayed
time period becomes identical to the one described in Section
4.2.1, where no FIN is produced. However, if at the end of
MaxDelayFIN a failure is not detected, it is assumed that
the behavior of the primary is correct.
We decided not to do a failover whenever the primary pro-
duced a FIN and the backup did not, since it is quite possible
that it is the backup that has failed and hence not produced
a FIN for normal socket closure. It should be noted that the
primary always immediately sends out a FIN if it has already
received a FIN from the client. Furthermore, note that during
normal operation – when neither the primary nor the backup
has failed – the FIN is not delayed by MaxDelayFIN. This
only happens if there is a failure.
All failure scenarios where only one of primary or backup
generates a FIN are summarized below.
1. Primary application has failed; Backup is working cor-
rectly.
Primary generates a FIN, but backup does not gener-
ate a FIN. Here the primary application fails and a FIN
is generated. The primary delays sending the FIN for
MaxDelayFIN time units. During this time it is likely
that the backup will detect the primary failure (if the ap-
plication performs read/write operations on the socket).
The backup will shut the primary down and take over the
TCP connection. However, if the failure is not detected
within MaxDelayFIN time units, the primary will send
out the FIN to the client.
Primary does not generate a FIN, but backup gener-
ates a FIN. Here the primary application fails and a FIN
is not produced. The backup generates a FIN due to nor-
mal socket closure. This FIN on the backup is dropped
like any other segment sent to the client. The FIN is
treated specially here, and although it has a sequence
number, it is not considered in the failure detection crite-
ria. The backup will detect the primary application fail-
ure if there are other bytes that the backup application
reads/writes but the primary does not. In that case, it will
shut off the primary, take over the TCP connection, and
retransmit the FIN (in fact, the backup has already been
retransmitting and dropping the FIN).
2. Primary is working correctly; Backup application has
failed.
Primary generates a FIN, but backup does not gen-
erate a FIN. In this case, the primary produces a FIN
due to normal socket closure, but since the backup ap-
plication has failed, the backup does not generate a FIN.
Here the primary will wait for at most MaxDelayFIN
time units before sending out the FIN. Meanwhile, if it
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 