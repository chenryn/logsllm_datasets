### 优化后的文本

#### 从弹性负载均衡器中注销实例
- **注销3个实例**：耗时121.13秒。
- **注销12个实例**：耗时438.53秒（修复）。

**未终止的实例**：
- RP1, RP2, RP3, RP4, RP5, RP6, RP8

- **再次终止3个实例**：耗时957.19秒（修复）。

#### 设置自动扩展组的期望容量
- **将自动扩展组的期望容量设置为12**，并等待其终止3个实例：耗时998.24秒（直接重做）。

**步骤**：
1. **从弹性负载均衡器中注销12个实例**。
2. **将自动扩展组的期望容量从24减少到12**。
3. **等待自动扩展组终止12个实例**。

**恢复点**：
- 恢复点1
- 恢复点2

### 满足恢复要求R3
所选恢复操作的恢复影响是最优/可接受的，这意味着其恢复影响相对较小。这种选择和优化机制确保了恢复影响可以满足利益相关者设定的恢复影响目标。因此，降低负面影响的要求得以实现。

### 降低恢复成本
#### 实验过程
此恢复要求关注恢复对云系统的货币成本。我们通过在云应用上执行缩减操作来衡量恢复的货币成本。初始情况下，云应用中有24个实例，这些实例连接到一个自动扩展组，并注册到一个弹性负载均衡器。运行在这些实例中的云应用是TPC-W，这是一个在Tomcat服务中运行的三层Web基准应用。每个实例的平均工作负载是每秒50个查询请求。我们使用自有的专有故障注入工具，在两个确定的恢复点分别注入故障，自动确定适用的恢复模式，并根据两种恢复动作选择方法之一执行恢复。注入的故障如表40所示。故障的选择基于行业访谈和故障报告，具有代表性。恢复的货币成本是通过累加恢复动作中每个步骤产生的货币成本来计算的。我们进行了30次实验，测量了平均恢复货币成本。

**表40. 缩减操作中注入的故障**
| 恢复点 | 注入的故障 |
|--------|----------------|
| 恢复点1 (步骤1后) | 3个实例仍在ELB中 |
| 恢复点2 (步骤3后) | 3个实例未终止 |

#### 实验结果
**表41. 缩减操作的恢复货币成本**

| 项目 | 说明 |
|------|----------|
| 恢复模式ID | 恢复模式 |
| RP1 | 补偿撤销与重做 |
| RP2 | 补偿撤销与替代 |
| RP3 | 回退与重放 |
| RP4 | 回退与替代 |
| RP5 | 修复 |
| RP6 | 直接重做 |
| RP7 | 直接替代 |
| RP8 | 更远的撤销与重做 |

| 恢复点 | 步骤 | 错误 | 适用的恢复模式 | 货币成本 (用户约束) | 选定的恢复动作 (Pareto集) | 货币成本 (Pareto集) | 选定的恢复动作 (用户约束) |
|--------|------|-------|-----------------|--------------------|-----------------------------|---------------------|-------------------------------|
| 恢复点1 | 从ELB中注销3个实例 | $0 | 从ELB中注销3个实例 | $0 | 从ELB中注销12个实例 (修复) (直接重做) | 3个实例仍在ELB中 | RP1, RP3, RP5, RP6 |
| 恢复点2 | 终止3个实例 | $0 | 再次终止3个实例 (修复) | 设置自动扩展组的期望容量为12；等待自动扩展组终止3个实例 (直接重做) | 从ELB中注销12个实例 | 减少自动扩展组的期望容量从24到12 | 等待自动扩展组终止12个实例 | 3个实例未终止 | RP1, RP2, RP3, RP4, RP5, RP6, RP8 |

表41显示了缩减操作的恢复货币成本。表格中的恢复货币成本代表30次运行的平均值。对于每个恢复点，基于Pareto集搜索优化方法选择的恢复动作的货币成本不大于其他适用的恢复动作；基于用户约束优化方法选择的恢复动作的货币成本不一定小于所有其他恢复动作，但符合业务利益相关者设定的货币成本约束。

### 满足恢复要求R4
所选恢复操作的恢复货币成本是最优/可接受的，这意味着其恢复货币成本相对较小。这种选择和优化机制确保了恢复货币成本可以满足利益相关者设定的目标。因此，降低货币成本的要求得以实现。

### 无需已知原因的恢复
#### 实验过程
POD-Recovery不需要已知的原因：其恢复计划生成动态地从当前错误状态找到达到期望状态的计划——无论是捕获的早期状态还是预期的未来状态。为了详细研究这一方面，我们进行了额外的实验，注入了各种故障，并在不提供错误原因的情况下触发恢复。每种类型的注入故障进行了30次实验。

#### 实验结果
**表42. 无已知原因的恢复**

| 恢复点 | 发生的错误 | 注入的故障 (原因) | 成功恢复次数 |
|--------|------------|------------------|--------------|
| 恢复点1 | 3个实例仍在ELB中 | "DeregisterInstancesFromELB"调用失败 | 30 |
| 恢复点2 | 3个实例未终止 | 其他团队重新将实例附加到ELB | 30 |
| 恢复点2 | 3个实例未终止 | 自动扩展组未正常工作 | 其他团队重新将3个实例附加到ASG | 30 |

### 满足恢复要求R5
由于动态恢复计划生成，我们的方法可以从无已知原因的错误中恢复——只要错误原因包含在资源空间中并通过API调用进行恢复。如果原因不包含或API无法访问（例如，云系统断开连接），我们的方法无法恢复错误。因此，错误的原因不影响恢复，尽管它可能影响错误是否仍然存在或再次发生。

### 处理错误检测的误报
#### 实验过程
为了测试POD-Recovery对错误检测误报的反应，我们在没有注入错误的情况下触发恢复服务，并观察POD-Recovery是否会采取任何行动。对于每个恢复点（RP），我们进行了50次实验。由于错误检测会触发恢复服务，且POD-Recovery不考虑触发消息提供的任何原因，我们不研究更复杂的误报。此外，如果瞬态错误在恢复开始前消失，我们认为它是从恢复的角度来看的误报。

#### 实验结果
**表43. 处理错误检测的误报**

| 恢复点 | 误报次数 | 未采取恢复措施的次数 |
|--------|----------|----------------------|
| RP 1 | 50 | 50 |
| RP 2 | 50 | 50 |

表43显示了恢复服务处理错误检测误报的能力。我们可以看到所有的误报都被成功检测到：在我们的100次实验中，没有任何一次采取了恢复措施。