such as the Microsoft Windows family, investigating the
suitability of UMIP or a similar model for Microsoft Win-
dows is beyond the scope of this paper.
We now identify the security objective of our policy
model. We aim at protecting the system integrity against
network-based attacks. We assume that network server and
client programs contain bugs and can be exploited if the at-
tacker is able to feed input to them. We assume that users
may make careless mistakes in their actions, e.g., down-
loading a malicious program from the Internet and running
it. However, we assume that the attacker does not have
physical access to the host to be protected. Our policy
model aims at ensuring that under most attack channels, the
attacker can only get limited privileges and cannot compro-
mise the system integrity. For example, if a host runs privi-
leged network-facing programs that contain vulnerabilities,
the host will not be completely taken over by an attacker as
a bot. The attacker may be able to exploit bugs in these pro-
grams to run some code on the host. However, the attacker
cannot install rootkits. Furthermore, if the host reboots, the
attacker does not control the host anymore. Similarly, if a
network client program is exploited, the damage is limited.
We also aim at protecting against indirect attacks, where the
attacker creates malicious programs to wait for users to exe-
cute them, or creates/changes ﬁles to exploit vulnerabilities
in programs that later read these ﬁles.
The usability goals for UMIP are twofold: First, con-
ﬁguring a UMIP system should not be more difﬁcult than
installing and conﬁguring an operating system. Second, ex-
isting applications and common usage practices can still be
used under UMIP. Depending on the needs of a system, the
administrator of the system should be able to conﬁgure the
system in a less-secure, but easier-to-user manner.
One constraint that we have for UMIP is that it can
be implemented using an existing mechanism (namely the
Linux Security Modules framework).
3.1 An overview of the UMIP model
An important design question for any operating system
access control system is: What is a principal? That is,
when a process requests to perform certain operations, what
information about the process should be used in deciding
whether the request should be authorized. The traditional
UNIX access control system treats a pair of (uid,gid) as a
principal. The effective uid and gid together determine the
privileges of a process. As many operations can be per-
formed only when the effective uid is 0, many programs
owned by the root user are designated setuid. One problem
with this approach is that it does not consider the possi-
bility that these programs may be buggy. If all privileged
programs are written correctly, then this approach is ﬁne.
However, when privileged programs contain bugs, they can
be exploited so that attackers can use the privileges to dam-
age the system.
As having just uid and gid is too coarse-granulated, a nat-
ural extension is to treat a triple of uid, gid, and the current
program that is running in the process as a principal. The
thinking is that, if one can identify all possible operations a
privileged program would do and only allows it to do those,
then the damage of an attacker taking over the program is
limited. This design is also insufﬁcient, however. Consider
a request to load a kernel module3 that comes from a pro-
cess running the program insmod with effective user-id 0.
As loading a kernel module is what insmod is supposed to
do, such access must be allowed. However, this process
might be started by an attacker who has compromised a
daemon process running as root and obtained a root shell
as the result of the exploits.
If the request is authorized,
then this may enable the installation of a kernel rootkit, and
lead to complete system compromise. One may try to pre-
vent this by preventing the daemon program from running
certain programs (such as shell); however, certain daemons
have legitimate need to run shells or other programs that can
lead to running insmod. In this case, a daemon can legiti-
mately run a shell, the shell can legitimately run insmod,
3A loadable kernel module is a piece of code that can be loaded into
and unloaded from kernel upon demand. LKMs (Loadable Kernel Mod-
ules) are a feature of the Linux kernel, sometimes used to add support for
new hardware or otherwise insert code into the kernel to support new fea-
tures. Using LKMs is one popular method for implementing kernel-mode
rootkits on Linux.
4
Figure 1. The summary of the UMIP model
and insmod can legitimately load kernel modules. If one
looks at only the current program together with (uid,gid),
then any individual access needs to be allowed; however,
the combination of them clearly needs to be stopped.
The analysis above illustrates that, to determine what the
current process should be allowed to do, one has to consider
the parent process who created the current process, the pro-
cess who created the parent process, and so on. We call this
the request channel. For example, if insmod is started by a
series of processes that have never communicated with the
network, then this means that this request is from a user who
logged in through a local terminal. Such a request should
be authorized, because it is almost certainly not an attacker,
unless an attacker gets physical access to the host, in which
case not much security can be provided anyway. On the
other hand, if insmod is started by a shell that is a descen-
dant of the ftp daemon process, then this is almost certainly
a result from an attack; the ftp daemon and its legitimate
descendants have no need to load a kernel module.
The key challenge is how to capture the information in
a request channel in a succinct way. The domain-type en-
forcement approach used in SELinux and DTE Unix can
be viewed as summarizing the request channel in the form
of a domain. Whenever a channel represents a different set
of privileges from other channels, a new domain is needed.
This requires a large number of domains to be introduced.
The approach we take is to use a few ﬁelds associated
with a process to record necessary information about the re-
quest channel. The most important ﬁeld is one bit to classify
the request channel into high integrity or low integrity. If a
request channel is likely to be exploited by an attacker, then
the process has low integrity. If a request channel may be
used legitimately for system administration, then the pro-
cess needs to be high-integrity. Note that a request chan-
nel may be both legitimately used for system administra-
tion and potentially exploitable. In this case, administrators
must explicitly set the policy to allow such channels for sys-
tem administration. The model tries to minimize the attack
surface exposed by such policy setting when possible.
When a process is marked as low-integrity, this means
that it is potentially contaminated. We do not try to iden-
tify whether a process is actually attacked. The success
of our approach depends on the observation that with such
an apparently crude distinction of low-integrity and high-
integrity processes, only a few low-integrity processes need
to perform a small number of security critical operations,
which can be speciﬁed using a few simple policies as ex-
ceptions.
Basic UMIP Model: Each process has one bit
that denotes its integrity level. When a process is
created, it inherits the integrity level of the parent
process. When a process performs an operation
that makes it potentially contaminated, it drops
its integrity. A low-integrity process by default
cannot perform sensitive operations.
The basic UMIP model is then extended with exceptions
to support existing softwares and system usage practices.
Figure 1 gives an overview of UMIP. A high-integrity pro-
cess may drop its integrity to low in one of three ways.
There are two classes of exceptions that can be speciﬁed
for programs. The ﬁrst class allows a program binary to be
5
identiﬁed as one or more of: RAP (Remote Administration
Point), LSP (Local Service Point), and FPP (File Processing
Program). Such exceptions allow a process running the bi-
nary to maintain its integrity level when certain events that
normally would drop the process’s integrity occur. In the
second class, a program binary can be given special privi-
leges (e.g., using some capabilities, reading/writing certain
protected ﬁles) so that a process running the program can
have these privileges even in low integrity.
In the rest of this section, we describe the UMIP model
in detail. Section 3.2 discusses contamination through net-
work and interprocess communications. Section 3.3 dis-
cusses restrictions on low-integrity processes. Section 3.4
discusses contamination through ﬁles. Section 3.5 discusses
protecting ﬁles owned by non-system accounts.
In Sec-
tion 3.6 we discuss how the design principles in Section 2
are applied in designing UMIP. Comparison of UMIP with
closely related integrity models is given in Section 3.7.
3.2 Dealing with communications
When a process receives remote network trafﬁc (network
trafﬁc that is not from the localhost loopback), its integrity
level should drop, as the program may contain vulnerabili-
ties and the trafﬁc may be sent by an attacker to exploit such
vulnerabilities. Under this default policy, system mainte-
nance tasks (e.g., installing new softwares, updating system
ﬁles, and changing conﬁguration ﬁles) can be performed
only through a local terminal. Users can log in remotely,
but cannot perform these sensitive tasks. While this offers
a high degree of security, it may be too restrictive in many
systems, e.g., in a collocated server hosting scenario.
In the UMIP model, a program may be identiﬁed as a
remote administration point (RAP). The effect is that a pro-
cess running the program maintains its integrity level when
receiving network trafﬁc. If one wants to allow remote sys-
tem administration through, e.g., the secure shell daemon,
then one can identify /usr/sbin/sshd as a remote adminis-
tration point. (Note that if a process descending from sshd
runs a program other than sshd and receives network traf-
ﬁc, its integrity level drops.) Introducing RAP is the result
of trading off security in favor of usability. Allowing re-
mote administration certainly makes the system less secure.
If remote administration through sshd is allowed, and the
attacker can successfully exploit bugs in sshd, then the at-
tacker can take over the system, as this is speciﬁed as a le-
gitimate remote administration channel. However, note that
in this case the attack surface is greatly reduced from all
daemon programs, to only sshd. Some daemon programs
(such as httpd) are much more complicated than sshd and
are likely to contain more bugs. Moreover, ﬁrewalls can
be used to limit the network addresses from which one can
connect to a machine via sshd; whereas one often has to
open the httpd server to the world. Finally, techniques such
as privilege separation [5, 18] can be used to further mitigate
attacks against sshd. The UMIP model leaves the decision
of whether to allow remote administration through channels
such as sshd to the system administrators.
We also need to consider what happens when a pro-
cess receives Inter-Process Communications (IPC) from an-
other local process. UMIP considers integrity contamina-
tion through those IPC channels that can be used to send
free-formed data, because such data can be crafted to ex-
ploit bugs in the receiving process. Under Linux, such
channels include UNIX domain socket, pipe, ﬁfo, message
queue, shared memory, and shared ﬁle in the tmpfs ﬁlesys-
tem. In addition, UMIP treats local loopback network com-
munication as a form of IPC. When a process reads from
one of these IPC channels which have been written by a
low-integrity process, then the integrity level of the process
drops, even when the process is a RAP.
Similar to the concept of RAP, a program may be identi-
ﬁed as a Local Service Point (LSP), which enables a process
running the program to maintain its integrity level after re-
ceiving IPC communications from low-integrity processes.
For example, if one wants to enable system administration
and networking activities (such as web browsing) to happen
in one X Window environment, the X server and the desk-
top manager can be declared as LSPs. When some X clients
communicate with network and drop to low-integrity, the X
server, the desktop manager and other X clients can still
maintain high integrity.
3.3 Restricting low-integrity processes
Our approach requires the identiﬁcation of security-
critical operations that would affect system integrity so that
our protection system can prevent low-integrity processes
from carrying them out. We classify security-critical opera-
tions into two categories, ﬁle operations and operations that
are not associated with speciﬁc ﬁles.
Examples of non-ﬁle administrative operations include
loading a kernel module, administration of IP ﬁrewall, mod-
iﬁcation of routing table, network interface conﬁguration,
rebooting the machine, ptrace other processes, mounting
and unmounting ﬁle systems, and so on. These operations
are essential for maintaining system integrity and availabil-
ity, and are often used by malicious code. In modern Linux,
these operations are controlled by capabilities, which were
introduced since version 2.1 of the Linux kernel. Capabil-
ities break the privileges normally reserved for root down
to smaller pieces. As of Linux Kernel 2.6.11, Linux has 31
different capabilities. The default UMIP rule grants only
two capabilities CAP SETGID and CAP SETUID to low-
integrity processes; furthermore,
low-integrity processes
are restricted in that they can use setuid and setgid only in
6
the following two ways: (1) swapping among effective, real,
and saved uids and gids, and (2) going from the root account
to another system account. (A system account, with the ex-
ception of root, does not correspond to an actual human
user.) We allow low-integrity processes to use setuid and
setgid this way because many daemon programs do them
and they do not compromise our security objective. Note
that by this design, a low-integrity process running as root
cannot set its uid to a new normal user.
It is much more challenging to identify which ﬁles
should be considered sensitive, as a large number of objects
in an operating system are modeled as ﬁles. Different hosts
may have different softwares installed, and have different
sensitive ﬁles. The list of ﬁles that need to be protected
is quite long, e.g., system programs and libraries, system
conﬁguration ﬁles, service program conﬁguration ﬁles, sys-
tem log ﬁles, kernel image ﬁles, and images of the mem-
ory (such as /dev/kmem and /dev/mem). We cannot ask the
end users to label ﬁles, as our goal is to have the system
conﬁgurable by ordinary system administrators who are not
security experts. Our novel approach here is to utilize the
valuable information in existing Discretionary Access Con-
trol (DAC) mechanisms.
Using DAC info for MAC All commercial operating
systems have built-in DAC mechanisms. For example,
UNIX and UNIX variants use the permission bits to sup-
port DAC. While DAC by itself is insufﬁcient for stopping
network-based attacks, DAC access control information is
nonetheless very important. For example, when one in-
stalls Linux from a distribution, ﬁles such as /etc/passwd
and /etc/shadow would be writable only by root. This in-
dicates that writing to these ﬁles is security critical. Sim-
ilarly, ﬁles such as /etc/shadow would be readable only by
root, indicating that reading them is security critical. Such
DAC information has been used by millions of users and
examined for decades. Our approach utilizes this informa-
tion, rather than asking the end users to label all ﬁles, which
is a labor intensive and error-prone process. UMIP offers
both read and write protection for ﬁles owned by system ac-
counts. A low-integrity process (even if having effective uid
0) is forbidden from reading a ﬁle that is owned by a system
account and is not readable by world; such a ﬁle is said to
be read-protected. A low-integrity process is also forbidden
from writing to a ﬁle owned by a system account and is not
writable by world. Such a ﬁle is said to be write-protected.
Finally, a low-integrity process is forbidden from changing
the DAC permission of any (read- or write-) protected ﬁle.
Exception policies: least privilege for sensitive opera-
tions Some network-facing daemons need to access re-
sources that are protected. Because these processes re-
ceive network communications, they will be low-integrity,
and the default policy will stop such access. We deal with
this by allowing the speciﬁcation of policy exceptions for
system binaries. For example, one policy we use is that
the binary “/usr/sbin/vsftpd” is allowed to use the capa-
bilities CAP NET BIND SERVICE, CAP SYS SETUID,
CAP SYS SETGID, and CAP SYS CHROOT, to read the
ﬁle /etc/shadow,
to read all ﬁles under the directory
/etc/vsftpd, and to read or write the ﬁle /var/log/xferlog.
This daemon program needs to read /etc/shadow to authen-
ticate remote users. If an attacker can exploit a vulnerability
in vsftpd and inject code into the address space of vsftpd,
this code can read /etc/shadow ﬁle. However, if the attacker
injects shell code to obtain an shell by exploiting the vul-