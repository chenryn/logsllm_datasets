0x1c ULONGLONG ImageBase; * //00 00 00 01 40 00 00 00 内存镜像基址
0x20 DWORD SectionAlignment; * //00 00 10 00 内存对齐
0x24 DWORD FileAlignment; * //00 00 02 00 文件对齐
0x28 WORD MajorOperatingSystemVersion; //00 06 要求操作系统的最低版本号的主版本号
0x2a WORD MinorOperatingSystemVersion; //00 03 要求操作系统的最低版本号的次版本号
0x2c WORD MajorImageVersion; //00 06 该可执行文件的主版本号
0x2e WORD MinorImageVersion; //00 03 该可执行文件的次版本号
0x30 WORD MajorSubsystemVersion; //00 06 要求最低子系统版本的主版本号
0x32 WORD MinorSubsystemVersion; //00 03 要求最低子系统版本的次版本号
0x34 DWORD Win32VersionValue; //00 00 00 00 从来不用的字段，通常设置为0
0x38 DWORD SizeOfImage; * //00 03 B0 00 内存中整个PE文件的映射的尺寸
0x3c DWORD SizeOfHeaders; * //00 00 04 00 所有头+节表按照文件对齐后的大小，必须是正确的，否则加载会出错
0x40 DWORD CheckSum; * //00 03 CE 33 校验和，用来判断文件是否被修改
0x44 WORD Subsystem; //00 02 表明可执行文件所期望的子系统的枚举值
0x46 WORD DllCharacteristics; //C1 60 DllMain（）函数何时被调用，默认为0
0x48 ULONGLONG SizeOfStackReserve; * //00 00 00 00 00 08 00 00 初始化时保留的堆栈大小
0x50 ULONGLONG SizeOfStackCommit; * //00 00 00 00 00 01 10 00 初始化时实际提交的大小
0x58 ULONGLONG SizeOfHeapReserve; * //00 00 00 00 00 10 00 00 初始化时保留的堆的大小
0x60 ULONGLONG SizeOfHeapCommit; * //00 00 00 00 00 00 10 00 初始化时实际提交的大小
0x68 DWORD LoaderFlags; //00 00 00 00 与调试有关，默认为0
0x6C DWORD NumberOfRvaAndSizes; * //00 00 00 10 目录项数目
0x70 _IMAGE_DATA_DIRECTORY DataDirectory[16];
};
**在64位程序中如下图所示：**
**在32位程序中可选PE头比较重要的参数有以下几个：**
`Magic`：说明文件是ROM镜像（0107h），还是普通的可执行的镜像（010Bh），一般来说32位程序是010Bh，64位程序是020Bh。
`SizeOfCode`：存储了所有代码节的和，他必须是FileAlignment文件对齐的整数倍，此程序文件对齐的大小是200H，所以SizeOfCode的大小为1000H，为200H的整数倍，由编译器填写。
`SizeOfInitializedData`：存储已经初始化数据块的大小，即在编译的时候所构成的块的大小（不包括代码段），此值也为文件对齐的整数倍，由编译器填写。
`SizeOfUninitializedData`：未初始化数据块的大小，装载程序要在虚拟地址空间中为这些数据约定空间，一般存在.bss节中，为文件对齐的整数倍，由编译器填写。
`AddressOfEntryPoint`：可选PE头中最重要的一个参数，也就是我们通常说的OEP，是当前程序的入口位置，该地址是一个相对虚拟地址，指向了程序执行的第一条代码，如果程序被加壳，那么这个地址就会被修改，通常在使用OD进行动态调试的时候，OD首次停留的位置就是AddressOfEntryPoint。
`BaseOfCode`：代码开始的基址，在内存中，代码段通常在PE文件头之后，数据段开始之前，此值通常由编译器填写。
`BaseOfData`：数据开始的基址，数据段通常在内存的末尾，在64位程序中没有该参数，此值通常由编译器编写。
`ImageBase`：内存的镜像地址，也称基地址，是文件在内存中的首选装入地址，如果文件需要在内存中执行的话，会首先使用ImageBase中存放的地址，如果地址被占用，文件会被装入到其他地址中，因为直接装入这个地址不需要进行重定位，所以速度会很快，如果当前地址被占用就需要重定位后装入其他的地址，相对来说速度就会慢一些。
`SectionAlignment`：程序被装入内存后的对齐大小，通常为1000H。
`FileAlignment`：程序在没有被装入内存前文件对齐的大小，通常为200H或者1000H，在为1000H的时候文件对齐和内存对齐相同，会加快程序的运行速度。为200H时程序装载到内存中需要进行拉伸操作，把对齐大小拉伸到1000H，这样做相对来说速度会慢一些，但是在磁盘中存储会节省空间。
`SizeOfImage`：是程序在装入内存后的整个PE文件在内存中的映射尺寸，指的就是装入文件从ImageBase到最后一个块的大小，可以比实际的值大，但必须是SectionAlignment内存对齐的整数倍。
`SizeOfHeaders`：是DOS头，PE文件头和节表的总大小，该值必须是正确的，否则程序无法运行。
`CheckSum`：映像的校验和，可以用来检查文件是否被更改。
`SizeOfStackReserve`：初始化时保留的堆栈大小。
`SizeOfStackCommit`：初始化时实际提交的大小。
`SizeOfHeapReserve`：初始化时保留的堆的大小。
`SizeOfHeapCommit`：初始化时实际提交的大小。
`NumberOfRvaAndSizes`：数据目录的项数。
`DataDirectory`：数据目录表，由数个IMAGE_DATA_DIRECTORY结构组成，指向输出表、输入表、资源块等数据，如下图所示
## 0x04 节表
**节表大小为24H（40字节）**
节表不止一个，可能有多个，节表的数量存在标准PE头中的NumberOfSections属性，虽然节表有多个，但是每个节表中的结构是相同的。
**节表的基本结构如下：**
typedef struct _IMAGE_SECTION_HEADER {
0x00 BYTE Name[IMAGE_SIZEOF_SHORT_NAME]; //00 00 00 74 78 65 74 2E
8字节，节表的名字，一般情况下”\0″来结束，内容可以自己定义
union {
0x08 DWORD PhysicalAddress;
0x08 DWORD VirtualSize;
} Misc; //00 01 80 6C 双字，是该节在没有对齐前的真是尺寸，内容可以不准确
0x0c DWORD VirtualAddress; //00 00 10 00 节区在内存中的偏移地址
0x10 DWORD SizeOfRawData; //00 01 82 00 节在文件中对齐后的尺寸
0x14 DWORD PointerToRawData; //00 00 04 00 节区在文件中的偏移
0x18 DWORD PointerToRelocations; //00 00 00 00 在exe文件中无意义
0x1c DWORD PointerToLinenumbers; //00 00 00 00 在exe文件中无意义
0x20 WORD NumberOfRelocations; //00 00 在exe文件中无意义
0x22 WORD NumberOfLinenumbers; //00 00 该节在行号表中的行号数
0x24 DWORD Characteristics; //60 00 00 20 节的属性
};
`Name`：存储节表的名字，一般情况下‘.’开始，”\0″来结束，内容可以自定义，所以并不能完全靠`Name`参数来判断节表中的内容。
`VirtualSize`：实际使用的节的大小，也就是对齐前的节的大小。如果VirtualSize的值大SizeOfRawData，那么SizeOfRawData表示来自可执行文件初始化数据的大小，与VirtualSize相差的字节用0填充。
`VirtualAddress`：存储节区在内存中的偏移地址，需要加上ImageBase才是真实的地址。
`SizeOfRawData`：节在文件中的尺寸，也就是该节在磁盘中所占用的空间。
`PointerToRawData`：节区在文件中的偏移。
`Characteristics`：节的属性，通过属性表里的值相加得到。
本例中节的属性值为60 00 00 20H，也就是包含可执行代码+该块可执行+该块可读。
**节表在程序中如下图所示：**
## 0x05 简单的32位PE头解析器编写
//程序打印DOS头，PE头和所有的节表，代码比较简单，主要是便于理解DOS头，PE头和所有的节表
#include “stdafx.h”
#include “malloc.h”
#include “windows.h”
LPVOID ReadPEFile(LPSTR lpszFile){
FILE* pFile = NULL;
DWORD FileSize = 0;
LPVOID pFileBuffer = NULL;
pFile = fopen(lpszFile,”rb”);
if(!pFile){
printf(“无法打开exe文件”);
return NULL;
}
fseek(pFile,0,2);
FileSize = ftell(pFile);
fseek(pFile,0,0);
pFileBuffer = malloc(FileSize);
if(!pFileBuffer){
printf(“初始化空间失败”);
fclose(pFile);
return NULL;
}
size_t n = fread(pFileBuffer,FileSize,1,pFile);
if(!n){
printf(“读取数据失败”);
free(pFileBuffer);
fclose(pFile);
return NULL;
}
fclose(pFile);
return pFileBuffer;
}
VOID PrintSectionHeader(){
LPVOID pFileBuffer = NULL;
PIMAGE_DOS_HEADER pDosHeader = NULL;
PIMAGE_NT_HEADERS pNTHeader = NULL;
PIMAGE_FILE_HEADER pPEHeader = NULL;
PIMAGE_OPTIONAL_HEADER32 pOptionHeader = NULL;
PIMAGE_SECTION_HEADER pSeationHeader = NULL;
int SectionsCounts = 0;
pFileBuffer = ReadPEFile(“xxxxx/notepad.exe”);
if(!pFileBuffer){
printf(“读取文件失败”);
return ;
}
if(*((PWORD)pFileBuffer) != IMAGE_DOS_SIGNATURE){
printf(“不是有效的MZ标志\n”);
free(pFileBuffer);
return ;
}
pDosHeader = (PIMAGE_DOS_HEADER)pFileBuffer;
if(*((PWORD)((DWORD)pFileBuffer + pDosHeader -> e_lfanew)) !=
IMAGE_NT_SIGNATURE){
printf(“不是有效的PE标志\n”);
free(pFileBuffer);
return ;
}
pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pFileBuffer + pDosHeader -> e_lfanew);
printf(“****************NT头***************\n”);
printf(“NT：%x\n\n”,pNTHeader -> Signature);
pPEHeader = (PIMAGE_FILE_HEADER)(((DWORD)pNTHeader) + 4);
printf(“****************PE头***************\n”);
printf(“PE：%x\n”,pPEHeader -> Machine);
printf(“节的数量：%x\n”,pPEHeader -> NumberOfSections);
printf(“可选PE头的大小：%x\n”,pPEHeader -> SizeOfOptionalHeader);
SectionsCounts = pPEHeader -> NumberOfSections;
printf(“节表数：%x\n\n”,SectionsCounts);
pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader +
IMAGE_SIZEOF_FILE_HEADER);
printf(“****************OPTION_PE头***************\n”);
printf(“OPTION_PE: %x\n\n”,pOptionHeader -> Magic);
pSeationHeader = (PIMAGE_SECTION_HEADER)(((DWORD)pOptionHeader) + pPEHeader ->
SizeOfOptionalHeader);
printf(“****************节表***************\n”);
for (int i = 0; i  Misc);
printf(“VirtualAddress:%x\n”,pSeationHeader -> VirtualAddress);
printf(“SizeOfRawData:%x\n”,pSeationHeader -> SizeOfRawData);
printf(“PointerToRawData:%x\n”,pSeationHeader -> PointerToRawData);
printf(“Characteristics:%x\n\n”,pSeationHeader -> Characteristics);
}
free(pFileBuffer);
}
int main(int argc, char* argv[])
{
PrintSectionHeader();
getchar();
return 0;
}