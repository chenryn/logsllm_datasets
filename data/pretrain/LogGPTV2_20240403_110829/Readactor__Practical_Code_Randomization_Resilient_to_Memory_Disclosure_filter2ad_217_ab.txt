# Trampolines and Code-Pointer Hiding

## System Overview
Figure 2 provides a high-level overview of the Readactor system. Our compiler generates diversified code that can be mapped with execute-only permissions and inserts trampolines to hide code pointers. We modify the kernel to use Extended Page Table (EPT) permissions to enable execute-only pages.

## V. READACTOR DESIGN

### Overview
Readactor protects against both direct and indirect disclosure (as detailed in Section III). To handle attacks based on direct disclosure, it leverages the virtualization capabilities of commodity x86 processors to map code pages with execute-only permissions at all times. This ensures that an adversary cannot read or disassemble a code page during program execution, unlike previous related work [7]. For indirect disclosure attacks, Readactor hides the targets of all function pointers and return addresses by converting these into direct branches stored in a dedicated trampoline code area with execute-only permissions. This approach allows for practical and efficient fine-grained code randomization while maintaining security against indirect memory disclosure.

### Architecture
Figure 2 illustrates the overall architecture of Readactor. Our approach benefits from precise control-flow information, which binary analysis cannot provide, so we use a compiler-based solution. This choice enhances the efficiency and practicality of our solution, making it scalable to complex, real-world software such as the Chromium web browser and its V8 JavaScript engine (see Section X). Diversification could also be done at program load-time to protect against theft of the on-disk representation of the program.

As shown in Figure 2, our compiler converts unmodified source code into a readacted application by:
1. Separating code and data to eliminate benign read accesses to code pages.
2. Randomizing the code layout.
3. Emitting trampoline code to hide code pointers from the adversary.

The right side of Figure 2 shows how our patched kernel maps all executable code pages with execute-only permissions at runtime, while data areas, including the stack and heap, remain readable and writable.

### Code-Pointer Hiding
In an ideal fine-grained code randomization scheme, the content and location of every single instruction is random. Execute-only pages offer sufficient protection against all forms of memory disclosure at this granularity because indirect disclosure of a code address gives the adversary no information about the location of any other instruction. However, ideal fine-grained randomization is inefficient and does not allow code sharing between processes. Therefore, practical protection schemes randomize code at a coarser granularity to reduce performance overhead [40]. Efficient use of modern processor instruction caches requires that frequently executed instructions are adjacent, e.g., in sequential basic blocks. Randomization schemes like Oxymoron [6] allow code pages to be shared between processes but randomize at an even coarser granularity (i.e., page-level randomization).

To relax the requirement of ideal fine-grained code randomization, we observe that indirect JIT-ROP relies on disclosing code pointers in readable memory. The sources of code pointers in data pages include:
1. C++ virtual tables.
2. Function pointers stored on the stack and heap.
3. Return addresses.
4. Dynamic linker structures (e.g., the global offset table on Linux).
5. C++ exception handling.

Our prototype system currently handles sources (i)-(iv); protecting code pointers related to C++ exceptions is an ongoing effort requiring additional compiler modifications (discussed in Section VII-C).

Figure 3 illustrates our technique for hiding code pointers from readable memory pages. When the program takes the address of a code location to store in readable memory, we instead store a pointer to a corresponding trampoline. For example, function pointers now point to trampolines rather than functions. When a call is made via a function pointer, the execution is redirected to a Readactor trampoline, which then branches directly to the target function. Because trampolines are located in execute-only memory and their layout is not correlated with the layout of functions, trampoline addresses do not leak information about non-trampoline code. This combination allows us to use a more practical fine-grained randomization scheme, such as function permutation and register randomization, which adds negligible performance overhead and aligns with current cache models.

For a more detailed pictorial overview of the design of Readactor, see Appendix A. In the following sections, we describe each component of Readactor in detail.

## VI. READACTOR – EXECUTE-ONLY MEMORY

Enforcing execute-only memory for all executable code is a key component of our system. Below, we discuss the challenges of implementing hardware-enforced execute-only memory on the x86 architecture.

### A. Extended Page Tables (EPTs)
The x86 architecture provides two hardware mechanisms for memory protection: segmentation and paging. Segmentation is a legacy feature fully supported only in 32-bit mode, while paging is used by modern operating systems. Modern x86 CPUs include a permission to mark memory as non-executable, but it was previously impossible to mark memory as executable and non-readable simultaneously. This changed in late 2008 when Intel introduced Extended Page Tables (EPTs), a new virtualization feature [35]. Modern AMD processors have a similar feature called Rapid Virtualization Indexing.

Readactor uses EPTs to enforce execute-only page permissions in hardware. EPTs add an additional abstraction layer during memory translation, translating guest physical memory to host physical memory. Access permissions are enforced during these translations, allowing independent enforcement of (non-)readable, (non-)writable, and (non-)executable memory permissions. This enables efficient enforcement of execute-only code pages.

Figure 4 shows the role of the page table and EPT during the translation from a virtual page to a host physical page. In this example, the loaded application consists of two pages: a code page marked execute-only and a data page marked readable and writable. These permissions are set by the compiler and linker. If a code page is labeled with only execute permission, the operating system sets the page to point to a page marked execute-only in the EPT. Access control is enforced for each translation step, ensuring that a read operation on the code page is allowed during the translation of the virtual to the guest physical page but generates an access fault when translated to the host physical page due to the EPT's execute-only permission.

### B. Hypervisor
Our approach can be used in two scenarios: software already operating inside a virtualized environment and software executing directly on physical hardware. For the former, common in cloud computing, the execute-only interface can be implemented as an extension to an existing hypervisor [43, 47, 48, 64, 66]. We focus on the non-virtualized scenario for two reasons:
1. While standard virtualization is common for cloud computing, we want a more general approach that does not require a conventional hypervisor.
2. Many of the attacks we defend against (including our indirect JIT-ROP attack in Section III) target software like browsers and document viewers running on non-virtualized end-user systems.

Our hypervisor transparently transfers the currently running operating system into a virtual environment on-the-fly. It is designed to be small (less than 500 lines of C code) and interfaces with the operating system to manage EPT permissions and forward EPT access violations. Our hypervisor can also revert the virtualized operating system back to direct hardware execution if needed for testing or error handling.

Figure 5 shows how we enable execute-only page permissions by creating two mappings of the host physical memory: a normal and a readacted mapping. The EPT permissions for the normal mapping allow the conventional page table to control the effective page permissions, while the readacted mapping enforces execute-only permissions. Legacy applications can execute without modification when Readactor is active, using the normal mapping by default. Readactor also supports code sharing between legacy and readacted applications.

### C. Operating System
Our prototype uses the Linux kernel, but our approach is operating system agnostic and can be ported to other operating systems. Our patch to the Linux kernel is minimal (82 lines of code) and changes how the kernel writes page table entries. When a readacted application requests execute-only memory, we set the guest physical address to point to the readacted mapping.

## VII. READACTOR – COMPILER INSTRUMENTATION

To support Readactor protections, we modified the LLVM compiler infrastructure [41] to:
1. Generate diversified code.
2. Prevent benign code from reading data residing in code pages.
3. Prevent the adversary from exploiting code pointers to perform indirect disclosure attacks.