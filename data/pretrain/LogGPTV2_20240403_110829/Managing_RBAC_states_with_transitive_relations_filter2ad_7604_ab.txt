a RBAC state.
the set of users of group g.
the set of privileges of role r.
relation of group-to-role authorizations.
It is a set of (g, r) tuples.
relation of role-to-privilege authorizations.
a restricted-access relation of GM . CM = CS ∪ CA
conﬂicts of shared elements on GM
conﬂicts of assignments on GM
the set of redundant arcs of G.
the transitive closure of G.
S ∪ {(u, u)|u is a node in S}.
the size of set S.
Table 1: Notations
A sequence u0u1...un (n > 0) of nodes in G is a path from
u0 to un if (ui−1, ui) is in A for each i ∈ [1..n]; the sequence
is a cycle if u0 = un and ui (cid:54)= uj for all 0 ≤ i < j ≤ n such
that (i, j) (cid:54)= (0, n). An arc on a cycle is called a cyclic arc.
G is acyclic if it contains no cycles.
In the paper, all graphs discussed are directed acyclic graphs
(DAG).
Let G = (V, A) be a graph. We will use G(a, b) or G(e) to
denote “arc e = (a, b) is in G”, V(a) to denote “node a is in
G”. We use G+E to denote the graph resulted from inserting
a set of arcs E to G where E∩A = ∅, and use G−E to denote
the graph resulted from deleting E ⊆ A from G. We assume
that trivial arcs of the form {(x, x)} are not included in G.
Let TCG be the transitive closure of G, i.e., TCG = {(x, y) |
there exists a path from x to y in G}. Since arcs of the
form (u, u) in a digraph contribute only in a trivial way to
its transitive closure, we will only consider digraphs without
such arcs.
Let G = (V, A) be a graph. Suppose S and T are two subsets
of A. S (cid:46)(cid:47) T = {(s, t)|(∃u)S(s, u) ∧ T (u, t) ∧ (s (cid:54)= t)}.
The transitive reduction [1] of DAG G = (V, A) is the unique
minimum subgraph Gr = (V, Ar) of G such that Ar ⊆ A
In this case, an arc of A − Ar is called
TCGr = TCG.
redundant. Arc e = (u, v) ∈ G is redundant if and only if
there exists a path from node u to node v in G − e.
Given a DAG G, we use (cid:60)(G) to denote the transitive re-
duction and RedA(G) to denote the set of redundant arcs.
Lemma 1. Let G be a DAG. Then
RedA(G) = TCG (cid:46)(cid:47) TCG
(cid:60)(G) = G − TCG (cid:46)(cid:47) TCG
= TCG − TCG (cid:46)(cid:47) TCG
Proof. Since TCG does not contain {(u, u)} tuples and
G is a DAG, each tuple of TCG (cid:46)(cid:47) TCG is formed by more
than one arc. That is, the set of redundant arcs of TCG
is RedA(G) = TCG (cid:46)(cid:47) TCG. Therefore, we proved the
lemma.
3. BUILD A RBAC STATE
To eliminate the interactive impact, RBAC model separate
groups, roles and privileges [13, 14, 20]. We will introduce
each of them in the following.
Groups and group graph GU : An user group (or simply,
group) is a set of users who should be given the same autho-
rizations. For example, there could be a group consisting of
all users in a given department or all users working on a par-
ticular project. Such sets are constructed where necessary
in the application environment to ease the task of assigning
the same authorizations to everyone in the group at once.
Groups are organized into a group graph. A group graph is
a DAG GU = (VU , AU ) where VU is a set of distinct groups
and AU ⊂ VU × VU is a set of arcs. A node of GU is called
It is otherwise called
a user node if it has only one user.
group node. GU depicts the hierarchies among groups. We
use g.U or g{} to denote the set of users of group g. Arc
(g1, g2) ∈ AU means g1.U ⊂ g2.U . We regard group g1 = g2
if g1.U = g2.U .
After g.U has been deﬁned for each group of VU , GU can
be constructed by ﬁnding the complete true-subsumption
relation TCGU , which is the transitive closure of GU .
TCGU = {(g, g
(cid:48)
)|g, g
(cid:48) ∈ VU , g.U ⊂ g
(cid:48)
.U}.
From Lemma 1, the reduction of GU is
(cid:60)(GU ) = TCGU − TCGU (cid:46)(cid:47) TCGU .
RedA(GU ), the set of redundant arcs of GU , is GU −(cid:60)(GU ),
which equals GU ∩ (TCGU (cid:46)(cid:47) TCGU ).
141
Figure 1: Group Graph GU and its Transitive Closure
In the deﬁnition of a role graph, we use inverted arcs as
those in [14, 15]. The reason for using inverted arcs is to
simplify the authorization propagation [13]. For example,
if a user group could access role r, then the group could
also access the roles that is less privileged and is reachable
from r. Other advantages of such deﬁnition is to ﬁnd redun-
dancy and to simplify some common queries, which will be
illustrated in later sections.
Assignments: To ultimately determine who is allowed to
do what, two assignments are used to link GU , GR and
GP . The assignment of user groups to roles, which is called
the group-role authorization, is expressed by LU R. LU R
is a set of arcs that satisfy LU R ⊂ VU × VR: arc (g, r) ∈
LU R means that group g is allowed to access role r. The
assignment of roles to privileges, which is called the role-
privilege authorization, is denoted by LRP . LRP is a set of
arcs that satisfy LRP ⊂ VR × VP : arc (r, p) ∈ LRP means
that role r has privilege p. LRP is used to build a role graph,
which will be described in the following.
Generate a role graph: A role of role graph GR is deter-
mined by the privilege set on roles. Let r be a role of GR. For
a privilege p of GP , if p ∈ r.P then {q|T CGP (p, q)} ⊆ r.P .
This can be implemented by a trigger mechanism on T CGP
in database systems. Therefore, roles of GR are deﬁned from
LRP and T CGP on a set of role names. That is, for role r
of VR, r.P is accumulated through
r.P = {p|(∃VP (p
(cid:48)
)) LRP (r, p) ∨ LRP (r, p
) ∧ T CGP (p
, p)}.
(cid:48)
(cid:48)
Physically, r.P can be stored as n-tuple where n = |VP|.
Assuming that the set of privileges VP = {p1, p2, ..., pn}, r.P
can be expressed as (z1, z2, ..., zn) where zi = 1 if pi ∈ r.P .
Otherwise, zi = 0 for i = 1, 2, ..., n. Bit-map indices can be
built on r.P for eﬃcient execution.
The transitive closure of GR,
)|r, r
TCGR = {(r, r
(cid:48)
(cid:48) ∈ VR, r.P ⊃ r
(cid:48)
.P},
describes the hierarchical structure of GR.
LRP may include redundant assignments. Such redundancy
will add to the complexity of structure/policy evolution.
Example 1. Let GU and TCGU be the graphs depicted in
Figure 1. Then TCGU (cid:46)(cid:47) TCGU is the set of arcs that are
denoted in dotted lines. In this case, (cid:60)(GU ) = GU holds.
Privileges and privilege graph GP : A privilege p is a
pair (o, m) where o refers to an object, and m is an access
mode for object o. Given privilege p, we use p.o and p.m to
refer to p’s object and mode, respectively. o can be any name
or identiﬁer that uniquely speciﬁes the associated object.
The access mode m, can be any valid operation (or method)
on o.
In systems with simple access modes such as read,
write, execute, etc., m is one of these access modes.
The set of privileges may form a privilege hierarchy. The
privilege hierarchy is caused by implication, which is denoted
as (cid:186). Implication results from knowledge of the semantics or
the procedural structure of the operation being authorized.
For example, the privilege which allows a user to update an
object might imply that any such user should also be able to
read the object. A privilege graph is a DAG GP = (VP , AP )
where VP is the set of privileges and AP ⊂ VP × VP is
the set of arcs. (p1, p2) ∈ AP means that p1.o ⊇ p2.o and
p1.m (cid:186) p2.m.
The transitive closure of GP can either be computed from
GP with non-SQL language or is derived from the deﬁnition
directly as follows.
.m}.
TCGP = {(p, p
Similar to the situation of group graph GU , the transitive
reduction of GP and the set of redundant arcs of GP can be
obtained as follows:
(cid:48) ∈ VP , p.o ⊇ p
.o and p.m (cid:186) p
(cid:48)
)|p, p
(cid:48)
(cid:48)
(cid:60)(GP ) = TCGP − TCGP (cid:46)(cid:47) TCGP
RedA(GP ) = GP ∩ (T CGP (cid:46)(cid:47) T CGP ).
Roles and role graph GR: A role is a set of privileges.
We use r.P or r{} to refer the set of privileges on role r.
Roles and their relationships are described by a role graph.
A role graph is a DAG GR = (VR, AR) where VR is the set
of roles and AR ⊂ VR × VR is the set of arcs. (r1, r2) ∈ AR
means that r2.P ⊂ r1.P .
142
Figure 2: Generate role graph
a path from g to p. Therefore, our model describes access
controls in a natural way.
If (g, r) ∈ LU R, and (g(cid:48), g) ∈ TCGU , then group g(cid:48) can access
role r. Furthermore, if TCGR (r, r(cid:48)) holds, then group g(cid:48) can
access role r(cid:48) as there exists a path from group g(cid:48) to role r(cid:48)
via arc (g, r) ∈ LU R. Therefore, the transitive reachability
from GU to GR via LU R describes the accessability of groups
to roles.
The set of redundant arcs of LU R is
RedA(LU R) = LU R ∩ TU→R
where
TU→R = {(g, r)|TCGU (g, w1) ∧ LU R(w1, r)
∨LU R(g, w2) ∧ TCGR (w2, r)
∨TCGU (g, w1) ∧ LU R(w1, w2) ∧ TCGR (w2, r)}
is the set of tuples from a group to a role that is reachable.
Let Rg→ be the set of roles that is accessible from group g,
and U→r be the set of groups that access role r. Then,
Rg→ = {r| ˜TU→R(g, r)}
U→r = {g| ˜TU→R(g, r)}
where ˜TU→R denotes the relation that a group can access a
role, and2
˜TU→R = TU→R ∪ LU R
= (cid:99)TCGU (cid:46)(cid:47) LU R (cid:46)(cid:47) (cid:99)TCGR
= {(g, r)|(cid:99)TCGU (g, w1) ∧ LU R(w1, w2)
∧(cid:99)TCGR (w2, r)}.
˜TU→R can be used to process the authorization or rejection
of a groups request.
Other queries can be derived similarly. For example,
2(cid:98)S is the set of S ∪ {(u, u)|u is a node in S}
The set of redundant tuples of LRP , which is denoted as
RedA(LRP ), is:
RedA(LRP ) = LRP ∩ {(u, v)|(∃w)LRP (u, w) ∧ T CGP (w, v)}
(cid:60)(LRP ) is deﬁned to be LRP − RedA(LRP ). The transitive
reduction of GR and the set of redundant arcs of GR are
(cid:60)(GR) = TCGR − TCGR (cid:46)(cid:47) TCGR
RedA(GR) = GR − (cid:60)(GR).
Example 2. Assume that GR, LRP and GP are as de-
picted in Figure 2. For instance, r1.P = {p1, p2, p3, p4}
and r3.P = {p5, p6}. RedA(LRP ) = {(r3, p6)}; (cid:60)(GR) =
TCGR − {(r2, r6), (r1, r6)}; and TCGR = {(r1, r4), (r1, r5),
(r1, r6), (r4, r6), (r2, r4), (r2, r6), (r2, r3)}.
4. RBAC STATES AND AUTHORIZATIONS
A RBAC state GM is a 5-tuple (GU , GR, GP , LU R, LRP )
where
• GU = (VU , AU ), GR = (VR, AR) and GP = (VP , AP )
are a group graph, a role graph and a privilege graph
respectively;
• VU , VR and VP are mutually disjointed;
• LU R and LRP are group-role and role-privilege autho-
rizations respectively.
Given a user-privilege pair, the decision about whether the
user is authorized to the privilege is the result of the impli-
cations of group graph GU , assignment LU R and role graph
GR as roles are deﬁned as a set of privileges. The group-role
authorization LU R links user groups to roles: Arc (g, r) of
LU R means that group g can access role r, which is desig-