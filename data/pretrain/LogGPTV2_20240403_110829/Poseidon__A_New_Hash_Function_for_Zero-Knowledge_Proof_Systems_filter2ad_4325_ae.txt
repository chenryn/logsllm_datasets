dependent on the hash function that constitutes the tree.
Unfortunately, a single hash function cannot be optimal for all
ZK proof systems, because they use different arithmetizations:
STARKs can use prime and binary ﬁelds, Bulletproofs uses
any prime ﬁeld, whereas most SNARKs use a prime ﬁeld
based on a scalar ﬁeld of a pairing-friendly elliptic curve.
Therefore, for each proof system a new instance of POSEIDON
may be needed. In the following we describe how this is done
and how to optimize a circuit for some proof systems.
6.2 SNARKs with POSEIDONπ
In SNARKs, the prime ﬁeld is typically the scalar ﬁeld
of some pairing-friendly elliptic curve. The primitive
POSEIDONπ can be represented as such a circuit with rea-
sonably few gates, but the parameters of POSEIDONπ must
have been determined ﬁrst by p. Concretely, after p is ﬁxed,
we ﬁrst check if xα is invertible in GF(p), which is true if
p mod α (cid:54)= 1. If this inequality is not satisﬁed for a small α,
we use the inverse S-box or consider another prime power for
the S-box.
6.2.1 Groth16
Groth16 [35] is an optimization of the Pinocchio proof sys-
tem and currently the fastest SNARK with the smallest proofs.
The Groth16 prover complexity is O(s), where s is the num-
ber of rank-1 constraints – quadratic equations of the form
(∑i uiXi)(∑i viXi) = ∑i wiXi, where ui,vi,wi are ﬁeld elements
and Xi are program variables. It is easy to see that the S-box x3
is represented by 2 constraints, the S-box x5 by 3 constraints,
and the S-box 1/x by 3 constraints (1 for the non-zero case,
and two more for the zero case). Thus, in total we have
2tRF + 2RP constraints for x3-POSEIDONπ,
3tRF + 3RP constraints for x5-POSEIDONπ,
3tRF + 3RP constraints for x−1-POSEIDONπ.
It requires a bit more effort to see that we do not need more
constraints as the linear layers and round constants can be
incorporated into these ones. However, it is necessary to do
some preprocessing. For example, in the POSEIDONπ setting,
the full S-box layers are followed by a linear transformation
M. Each round with a full S-box layer can be represented by
the following constraints in the SNARK setting:
(cid:18)
∑
j
Mi, jxi, j
(cid:19)
·
yi ·
(cid:18)
(cid:18)
∑
∑
j
j
(cid:19)
(cid:19)
Mi, jxi, j
Mi, jzi, j
= yi 1 ≤ i ≤ t,
= zi,
where M = It×t for the ﬁrst round. However, in a round with a
partial S-box layer, we will have only one such constraint for
j = 1. For the rest of the t − 1 variables we will have linear
constraints of the form
Mi, jxi, j = ui ,where 2 ≤ i ≤ t.
∑
j
Since the linear constraints have little complexity effect in
Groth16, in the partial S-box rounds they can be composed
with the ones from the previous round(s) using
(cid:18)
∑
j
Mi,k
∑
k
(cid:19)
Mi, jxi, j
= vk 2 ≤ k ≤ t.
We can now calculate the number of constraints for the sponge
mode of operation and for Merkle trees. In sponges, the 2M
bits are reserved for the capacity, so N − 2M bits are fed with
the message. Therefore, we get
• 2tRF +2RP
• 3tRF +3RP
• 3tRF +3RP
N−2M constraints per bit for x3-POSEIDONπ,
N−2M constraints per bit for x5-POSEIDONπ,
N−2M constraints per bit for x−1-POSEIDONπ.
For the Merkle tree, we suggest a 1-call sponge where all
branches must ﬁt into the rate. Then a Merkle tree has arity
2M − 1. Based on that we can calculate how many constraints
N
we need to prove the opening in a Merkle tree of, for example,
232 elements (the recent ZCash setting). The tree will have
log2[N/(2M)−1] levels with the number of constraints in each
according to the above. The libsnark performance of the
POSEIDON preimage prover (proof that for given y you know
x such that H(x) = y) is given in Table 3. These experiments
32
530    30th USENIX Security Symposium
USENIX Association
Table 3: libsnark [1] performance of the POSEIDON preim-
age prover (one permutation call). Here t denotes the width.
Table 4: Number of R1CS constraints for a circuit proving a
leaf knowledge in the Merkle tree of 230 elements.
POSEIDON-128
Total constraints
7290
4500
4050
8640
4500
5400
41400
826020
630180
MiMC-2p/p (Feistel)
1:1
2
324
-
19440
stored, where B is an elliptic curve point and · denotes scalar
multiplication. A PLONK proof is a combination of KZG
polynomial commitments [40] and their openings, both using
the SRS.
The standard version of PLONK works with the same con-
straint system as we have described, plus it uses special ma-
chinery to lay out wires in the circuit. A prover ﬁrst crafts
three polynomials of degree equal to the number of gates,
which are responsible for the left input, the right input, and
the output, respectively. Then they allocate several supple-
mentary polynomials to describe the wire layout. The prover
complexity for a POSEIDONπ permutation with the S-box x5
of width w and R rounds is 11(w(w + 6) + 3)R point multi-
plications, and the proof has 7 group elements and 7 ﬁeld
elements. A third-party non-optimized implementation of a
PLONK prover in Rust (Intel(R) Core(TM) i5-7300HQ CPU
@ 2.50GHz) gives us benchmarks, which we provide in Ta-
ble 6.
As we have almost identical rounds, the PLONK compiler can
be heavily optimized. Concretely, we suggest the following.
• Deﬁne a separate polynomial for each S-box line.
• Get rid of wire layout polynomials.
• Express round transitions as a system of afﬁne equations
Arity Width
2:1
4:1
8:1
3
5
9
2:1
4:1
8:1
3
5
9
510
171
510
171
510
171
RF
RP
8
57
8
60
8
63
Rescue-x5
16
10
10
-
-
-
Pedersen hash
-
-
SHA-256
-
-
Blake2s
-
-
libsnark ZK proof time
for one hash
Verify
Field
Arity (t)
BN254
2:1 (3)
4:1 (5)
Prove
POSEIDON-128
43.1ms
57.9ms
1.2ms
1.1ms
POSEIDON-80
BN254
2:1 (3)
4:1 (5)
32.8ms
46.9ms
1.2ms
1.1ms
R1CS
constraints
276
440
180
290
were performed on a desktop with an Intel Core i7-8700 CPU
(@3.2GHz) and 32 GiB of memory.
As an example, we calculate the concrete number of con-
straints for a Merkle tree proof, where the tree has 230 ele-
ments, assuming a security level of 128 bits and a prime ﬁeld
of size close to 2256. We take the S-box equal to x5 as it ﬁts
many prime ﬁelds: Ristretto (the prime group based on the
scalar ﬁeld of Ed25519), BN254, and BLS12-381 scalar ﬁelds.
The results are in Table 4.
6.2.2 Bulletproofs
Bulletproofs [19] is a proof system that does not require a
trusted setup. It is notable for short proofs which are loga-
rithmic in the program size, and also for the shortest range
proofs that do not require a trusted setup. However, its veriﬁer
is linear in the program size. For the use cases where the
trusted setup is not an option, the Bulletproofs library “dalek”
is among the most popular ZK primitives. We have imple-
mented14 a Merkle tree prover for POSEIDON in Bulletproofs
using the same constraint system as for Groth16 with results
outlined in Table 5. The performance varies since the under-
lying curves are based on prime ﬁelds of different size and
weight: BN254 uses a 254-bit prime whereas BLS12-381 uses
a 381-bit one (the reason for that is the recent reevaluation
of discrete logarithm algorithms speciﬁc to pairing-friendly
curves).
6.2.3 PLONK
PLONK [27] is a novel but popular SNARK using a universal
trusted setup, where a structured reference string of size d
can be used for any circuit of d gates or less. The setup is
pretty simple as for the secret k the values {ki · B}i≤d are
14https://github.com/lovesh/bulletproofs-r1cs-gadgets/bl
ob/master/src/gadget_poseidon.rs
USENIX Association
30th USENIX Security Symposium    531
Table 5: Bulletproofs performance to prove 1 out of 230-
Merkle tree.
Merkle 230-tree ZK proof
Bulletproofs time
Verify
Prove
POSEIDON-128
16.8s
13.8s
11s
11.2s
9.6s
7.4s
8.4s
6.45s
5.25s
SHA-256 [19]
582s
1.5s
1.65s
1.4s
1.1s
1.15s
1s
0.78s
0.72s
0.76s
21s
Field
Arity
BLS12-381
BN254
Ristretto
2:1
4:1
8:1
2:1
4:1
8:1
2:1
4:1
8:1
GF(2256)
2:1
R1CS
constraints
7290
4500
4050
7290
4500
4050
7290
4500
4050
762000
Table 6: PLONK performance to prove a 1-out-of-2n-Merkle
tree of arity 4.
Field
Set size
Merkle 2n-tree ZK proof
PLONK time
Verify
Prove
POSEIDON-128
R1CS
constraints
BLS12-381
216
234
268
3.59s
6.3s
9.9s
0.7ms
1.55ms
2.7ms
2400
5100
10200
over polynomial values at adjacent points.
As a result, our optimized PLONK compiler makes only