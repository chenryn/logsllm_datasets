### Index

#### T
- **Trunks.capsulecorp.local**: 252
- **Trunksadm account**: 251
- **tspkg command**: 142
- **type [FILE] | find /I [STRING] command**: 94
- **type [FILE] command**: 94

#### U
- **Ubuntu**
  - Building virtual machines: 221–222
  - Managing packages with apt: 223
  - Virtual penetration testing platform: 14
- **UNIX post-exploitation**: 174
  - Credential harvesting: 163–166
  - Escalating privileges with SUID binaries: 166–171
  - Maintaining reliable re-entry with cron jobs: 156–163
  - Passing SSH keys: 171–174
- **Unknown protocol**: 264
- **Unpatched services, attacking**: 132
  - Compromising Eternal Blue with Metasploit: 121–124
  - Using ms17_010_psexec exploit module: 124
  - Verifying that patch is missing: 122–123
  - Meterpreter shell
    - Payload: 125–130
    - Useful commands: 127–130
  - Public exploit database
    - Cautions about: 130–132
    - Generating custom shellcode: 130–132
  - Software exploits: 119–121
- **up ping**: 24
- **use module**: 238
- **username variable**: 105
- **/usr/bin/passwd binary**: 167

#### V
- **-v admin123**: 243
- **vagrant ssh pentest command**: 23
- **Vegeta hostname**: 249
- **Vegeta.capsulecorp.local**: 252
- **Vegetaadm account**: 251
- **VHOST parameter**: 238
- **vim hello.rb script**: 230
- **Virtual penetration testing platform**: 13–15, 221–239
  - Linux: 13–14
  - Metasploit: 233–239
    - msfconsole: 237–239
  - OS dependencies: 233
  - Ruby gems: 234–235
  - Setting up PostgreSQL: 235–236
  - Nmap: 224–228
    - Compiling and installing from source: 227
    - Exploring documentation: 228
    - Nmap Scripting Engine: 224–226
    - OS dependencies: 226
  - OS dependencies: 222–224
    - Customizing terminal look and feel: 224
    - Installing CrackMapExec: 224
    - Managing Ubuntu packages with apt: 223
  - Pentest distributions: 14–15
  - Ruby: 228–233
    - Hello World example: 230–233
    - Installing Ruby Version Manager: 229–230
  - Ubuntu project: 14
  - Ubuntu virtual machines: 221–222
- **vnc protocol**: 264
- **vnc_login module**: 72
- **vnc-brute script**: 225
- **vnc-http protocol**: 264
- **VNC, brute-force password guessing**: 72–73
- **VSC (Volume Shadow Copies)**: 185–188, 190
- **vssadmin command**: 185–186, 190
- **vssadmin list shadow command**: 186
- **Vulnerability discovery**: 81
  - Authentication vulnerabilities: 65–73
    - Brute-forcing local Windows account passwords: 68–69
    - Brute-forcing MSSQL and MySQL database passwords: 69–72
    - Brute-forcing VNC passwords: 72–73
    - Creating client-specific password list: 66–67
  - Configuration vulnerabilities: 75–80
    - Analyzing output from Webshot: 77
    - Manually guessing web server passwords: 78–80
    - Setting up Webshot: 75–76
  - Following path of least resistance: 61–62
  - Overview: 60–62
  - Patching vulnerabilities
    - General discussion: 62–65
    - Scanning for Eternal Blue: 64–65

#### W
- **-W 1 flag**: 26
- **WAR files**
  - Creating malicious: 90
  - Deploying: 91
  - Undeploying from Apache Tomcat: 202–203
- **wc -l command**: 28
- **wc command**: 243–244
- **wdigest command**: 142
- **Web services, attacking**: 101
  - Compromising vulnerable Jenkins server
    - General discussion: 99–101
    - Groovy script console execution: 100–101
  - Compromising vulnerable Tomcat server: 89–92
    - Accessing web shell from browser: 92
    - Creating malicious WAR file: 90
    - Deploying WAR file: 91
    - Gaining initial foothold: 88–89
    - Interactive vs. non-interactive shells: 94
    - Upgrading to interactive shell: 94–98
      - Backing up sethc.exe: 95–96
      - Launching sticky Keys via RDP: 97–98
      - Modifying file ACLs with cacls.exe: 96–97
- **Web shells**
  - Accessing from browser: 92
  - Deploying backdoor: 87
  - Generating custom shellcode: 130–132
  - Interactive vs. non-interactive shells: 94
  - Killing active shell connections: 195
  - Meterpreter shell
    - Payload: 125–130
    - Useful commands: 127–130
  - Upgrading to interactive: 94–98
    - Backing up sethc.exe: 95–96
    - Launching Sticky Keys via RDP: 97–98
    - Modifying file ACLs with cacls.exe: 96–97
- **Webshot**
  - Analyzing output from: 77
  - Setting up: 75–76
- **wget command**: 76
- **where command**: 148–149
- **white-box scoping**: 22
- **whoami command**: 92, 109, 182, 200

#### Windows
- **Accounts**
  - Brute-force password guessing: 68–69
  - Stealing password hashes: 110–114
- **Post-exploitation**: 154
  - Credential harvesting from filesystem: 147–149
  - Credential harvesting with Mimikatz: 141–143
  - Credential harvesting, domain cached credentials: 143–147
  - Maintaining reliable re-entry with Meterpreter: 138–139
  - Moving laterally with Pass-Hash: 149–154
- **Server creation**: 250–252
  - Gohan.capsulecorp.local: 251
  - Goku.capsulecorp.local: 250–251
  - Krillin.capsulecorp.local: 252
  - Nappa.capsulecorp.local: 252
  - Tien.capsulecorp.local: 252
  - Trunks.capsulecorp.local: 252
  - Vegeta.capsulecorp.local: 252
  - Yamcha.capsulecorp.local: 252
- **windows**: 244

#### Workflow
- **Overview**: 5–8, 12
- **Documentation phase**: 11–219
- **Focused penetration phase**: 9–10, 86–88
  - Accessing remote management services: 87–88
  - Attacking unpatched services: 132
  - Attacking vulnerable database services: 117
  - Attacking vulnerable web services: 101
  - Deploying backdoor web shells: 87
  - Exploiting missing software patches: 88
- **Information gathering phase**: 8–9
  - Host discovery: 37
  - Service discovery: 58
  - Vulnerability discovery: 81
- **Post-exploitation and privilege escalation phase**: 10–11, 136–138
  - Controlling entire network: 190
  - Credential harvesting: 137
  - Linux or UNIX post-exploitation: 174
  - Maintaining reliable re-entry: 137
  - Moving laterally: 137–138
  - Windows post-exploitation: 154

#### X
- **-X command argument**: 138
- **:x shorthand**: 231

#### XML (Extensible Markup Language)
- **XML output**
  - Creating protocol-specific target lists: 57–58
  - Parsing with Ruby: 52–58

#### xp_cmdshell
- **Enabling**: 106–108
- **Running OS commands with**: 108–109
- **xp_cmdshell stored procedure**: 104–109, 111, 117, 200

#### Y
- **-y flag**: 94
- **Yamcha account**: 249, 251
- **Yamcha.capsulecorp.local**: 252

### Penetration Testing Workflow
1. **Identify domain admin user accounts**.
2. **Locate systems with domain admins logged in**.
3. **Elevate to domain admin privileges**.
4. **Obtain NTDS.dit and SYSTEM from VSC on the domain controller**.
5. **Extract all domain account password hashes**.

### The Art of Network Penetration Testing
Penetration testers uncover security gaps by attacking networks exactly like malicious intruders do. To become a world-class pentester, you need to master offensive security concepts, leverage a proven methodology, and practice, practice, practice. This book delivers insights from security expert Royce Davis, along with a virtual testing environment you can use to hone your skills.

**What’s Inside**
- Set up a virtual pentest lab
- Exploit Windows and Linux network vulnerabilities
- Establish persistent re-entry to compromised targets
- Detail your findings in an engagement report

**For tech professionals. No security experience required.**

**Royce Davis** has orchestrated hundreds of penetration tests, helping to secure many of the largest companies in the world.

To download their free eBook in PDF, ePub, and Kindle formats, owners of this book should visit [www.manning.com/books/the-art-of-network-penetration-testing](http://www.manning.com/books/the-art-of-network-penetration-testing)

**$49.99 / Can $65.99 [INCLUDING eBOOK]**

**ISBN: 978-1-61729-682-6**

**M A N N I N G**

**“An excellent reference for all stages of the penetration process.” —Sven Stumpf, BASF**

**“A practical approach that covers everything a beginner needs to get into the field.” —Imanol Valiente Martín, Full On Net**

**“Leads you through a practical and well-structured process. Highly recommended!” —Sithum Nissanka, Worldline**

**“Excellent book! It teaches you how to defend yourself against attacks, but also how to execute penetration tests yourself.” —Marcel van den Brink, TBAuctions**