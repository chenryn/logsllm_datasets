An input string is valid if:
valid.
Given a string containing just the characters ', ), '′, ','′' and '], determine if the input string is 
题目
20. Valid Parentheses
Output: false
Input: "([)]"
Output: false
Input: "(]" 
Output: true 
Input:"()[]{}"
Output: true
Input: "()"
---
## Page 96
题目
21. Merge Two Sorted Lists
代码
需要注意，空字符串是满足括号匹配的，即输出true。
还有没有其他元素，如果为空，即匹配。
遇到左括号就进栈push，遇到右括号并且栈顶为与之对应的左括号，就把栈顶元素出栈。最后看栈里面
解题思路
括号匹配问题
题目大意
func isvalid(s string) bool {
package leetcode
Output: true
Input: "{[]}"
return len(stack) == 0
for
stack := make([]rune,
if len(s) == 0 {
//空字符串直接返回 true 
if (v =='') ll (v ==
 return true
 stack = append(stack, v) 
return false
else {
stack = stack[:len(stack)-1]
（(0 && stack[len(stack)-1] =='{'） {
‘'）  ( =='）
---
## Page 97
22. Generate Parentheses
代码
按照题意做即可。
解题思路
合并2个有序链表
题目大意
Example:
together the nodes of the first two lists.
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing 
func mergeTwoLists(l1 *ListNode, 12 *ListNode) *ListNode {
package leetcode
Output: 1->1->2->3->4->4
Input: 1->2->4,1->3->4
if ll == nil {
/
return 12 
12.Next = mergeTwoLists(71, 12.Next)
if l1.val  0 {
findGenerateParenthesis(n, n, "", &res)
res := []string{} 
匹配上的。
虽然也可以 AC，但是时间复杂度巨高。
"0○O"
return res 
"(O)",
○(O)
(O)
"((の))"
findGenerateParenthesis(lindex-1, rindex, str+"(", res)
return
*res = append(*res, str) 
return []string{}
---
## Page 99
代码
借助分治的思想，把K个有序链表两两合并即可。相当于是第 21题的加强版。
解题思路
合并K个有序链表
题目大意
Example:
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
题目
23. Merge k Sorted Lists
package leetcode
0utput: 1->1->2->3->4->4->5->6
Input:
* Definition for singly-linked list.
2->6
1->3->4,
1->4->5,
if rindex > 0 && lindex 2->3->4, you should return the list as 2->1->4->3.
func mergeTwoListsl(l1 *ListNode, 12 *ListNode) *ListNode {
func mergeKLists(lists []*ListNode) *ListNode {
12.Next = mergeTwoLists1(l1, 12.Next)
if 12 == nil {
if l1 == nil {
if length 2->1->4->5
For k = 2, you should return: 2->1->4->3->5
Given this linked list: 1->2->3->4->5
* Definition for singly-linked list.
for i := O; i <k; i++ { 
node := head 
 type ListNode struct {
Val int 
Next *ListNode
---
## Page 103
Example 2: 
Example 1: 
place with O(1) extra memory.
Given a sorted array nums, remove the duplicates in-place such that each element appear only
题目
26. Remove Duplicates from Sorted Array.
once and return the new length. 
It doesn't matter what you leave beyond the returned length.
being 1 and 2 respectively.
Your function should return length = 2, with the first two elements of nums 
Given nums = [1,1,2],
   x  
return prev
for first != last {
prev := last 
returnnewHead
head.Next = reverseKGroup(node, k)
newHead := reverse(head, node)
first = tmp
prev = first
first.Next = prev
tmp := first.Next
node = node.Next
if node == nil {
 return head 
---
## Page 104
代码
的元素个数，〇最终判断题目的时候会读取数组剩余个数的元素进行输出。
这里数组的删除并不是真的删除，只是将删除的元素移动到数组后面的空间内，然后返回数组实际剩余
素，这一题是删除重复元素，实质是一样的。
这道题和第 27题很像。这道题和第 283 题，
解题思路
重以后数组的长度值。
给定一个有序数组 nums，对数组中的元素进行去重，使得原数组中的每个元素只有一个。最后返回去
题目大意
Internally you can think of this:
will be known to the caller as well.
Note that the input array is passed in by reference, which means modification to the input array
Confused why the returned value is an integer but your answer is an array?
Clarification:
//解法一
package leetcode
for （int i = O; i<len; i++) {
elements.
l asty an suiud z 'uoaoung unos Ka pauau yahul aua buisn //
// nums is passed in by reference. (i.e., without making a copy)
It doesn't matter what values are set beyond the returned length.
int len = removeElement(nums, val); 
being modified to 0, 1, 2, 3, and 4 respectively.
 jo sa  aty  im ' =  u ps ug 
Given nums = [0,0,1,1,1,2,2,3,3,4],
print(nums[i]);
，第27题基本一致，283题是删除0，27题是删除指定元
---
## Page 105
func removeElementl(nums []int, start, val int) int {
func removeDuplicatesl(nums []int) int 
//解法二
func removeDuplicates(nums []int) int {
if len(nums) == 0 {
if len(nums) == 0 { 
for i := start; i < len(nums); i++ {
return i + 1
for i = O; i < length-1; i++ { 
i:=0
lastNum := nums[length-1]
length := len(nums) 
return last + 1
for last < len(nums)-1 { 
last, finder := 0, 0
if nums[i] != val {
:= start 
if nums[i] == lastNum {
return 0 
 return 0
return 0
if nums[i+1] == nums[i] {
nums[last+l] = nums [finder]
for nums[finder] == nums[last] {
last++ 
if i!=j{ 
break
}else {
// fmt.Printf("此时 num = %v length = %v\n", nums, length)
removeElementl(nums, i+l, nums[i]) 
if finder == len(nums) {
finder++ 
 nums[i], nums[j] = nums[j], nums[i]
 return last + 1
j++
---
## Page 106
Confused why the returned value is an integer but your answer is an array?
Clarification:
Example 2: 
Example 1: 
The order of elements can be changed. It doesn't matter what you leave beyond the new length.
place with O(1) extra memory. 
Do not allocate extra space for another array, you must do this by modifying the input array in-
new length.
Given an array nums and a value val, remove all instances of that value in-place and return the
题目
27. Remove Element
It doesn't matter what values are set beyond the returned length.
Given nums = [0,1,2,2,3,0,4,2], val = 2,
It doesn't matter what you leave beyond the returned length.
Given nums = [3,2,2,3], val = 3,
Note that the order of those five elements can be arbitrary.
containing 0,1,3，0,and 4.
Your function should return length = 5, with the first five elements of nums
being 2.
Your function should return length = 2, with the first two elements of nums
returnj
j++
---
## Page 107
代码
的元素个数，〇J最终判断题目的时候会读取数组剩余个数的元素进行输出。
这里数组的删除并不是真的删除，只是将删除的元素移动到数组后面的空间内，然后返回数组实际剩余
质是一样的。
这道题和第 283题很像。这道题和第 283 题基本一致，283 题是删除0，这一题是给定的一个val，实
解题思路
给定一个数组 nums 和一个数值 val，将数组中所有等于 val 的元素删除，并返回剩余的元素个数。
题目大意
Internally you can think of this: 
will be known to the caller as well.
Note that the input array is passed in by reference, which means modification to the input array 
func removeElement(nums []int, val int) int {
package leetcode
for （int i = O; i < len;i++） {
elements.
// using the length returned by your function, it prints the first len 
// any modification to nums in your function would be known by the caller.
int len = removeElement(nums, val);
// nums is passed in by reference. (i.e., without making a copy)
for i := O; i < len(nums); i++ {
if nums[i] != val {
:=0
 return 0
print(nums[i]);
else{
j++
j++
nums[i]， nums[j] = nums[j]， nums[i]
---
## Page 108