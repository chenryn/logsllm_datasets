title:Syntia: Synthesizing the Semantics of Obfuscated Code
author:Tim Blazytko and
Moritz Contag and
Cornelius Aschermann and
Thorsten Holz
Syntia: Synthesizing the Semantics  
of Obfuscated Code
Tim Blazytko, Moritz Contag, Cornelius Aschermann,  
and Thorsten Holz, Ruhr-Universität Bochum
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/blazytko
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXSyntia: Synthesizing the Semantics of Obfuscated Code
Tim Blazytko, Moritz Contag, Cornelius Aschermann, Thorsten Holz
Ruhr-Universität Bochum, Germany
{firstname.lastname}@rub.de
Abstract
Current state-of-the-art deobfuscation approaches operate
on instruction traces and use a mixed approach of sym-
bolic execution and taint analysis; two techniques that
require precise analysis of the underlying code. However,
recent research has shown that both techniques can easily
be thwarted by speciﬁc transformations.
As program synthesis can synthesize code of arbitrary
code complexity, it is only limited by the complexity of
the underlying code’s semantic. In our work, we propose
a generic approach for automated code deobfuscation
using program synthesis guided by Monte Carlo Tree
Search (MCTS). Speciﬁcally, our prototype implementa-
tion, Syntia, simpliﬁes execution traces by dividing them
into distinct trace windows whose semantics are then
“learned” by the synthesis. To demonstrate the practical
feasibility of our approach, we automatically learn the se-
mantics of 489 out of 500 random expressions obfuscated
via Mixed Boolean-Arithmetic. Furthermore, we synthe-
size the semantics of arithmetic instruction handlers in
two state-of-the art commercial virtualization-based ob-
fuscators (VMProtect and Themida) with a success rate
of more than 94%. Finally, to substantiate our claim that
the approach is generic and applicable to different use
cases, we show that Syntia can also automatically learn
the semantics of ROP gadgets.
1
Introduction
Code obfuscation describes the process of applying an
obfuscating transformation to an input program to obtain
an obfuscated copy of the program. Said copy should be
more complex than the input program such that an analyst
cannot easily reason about it. An obfuscating transfor-
mation is further desired to be semantics-preserving, i. e.,
it must not change observable program behavior [12].
Code obfuscation can be leveraged in many application
domains, for example in software protection solutions
to prevent illegal copies, or in malicious software to im-
pede the analysis process. In practice, different kinds of
obfuscation techniques are used to hinder the analysis
process. Most notably, industry-grade obfuscation solu-
tions are typically based on Virtual Machine (VM)-based
transformations [38, 55, 57, 58], which are considered one
of the strongest obfuscating transformations available [2].
While these protections are not perfect and in fact are
broken regularly, attacking them is still a time-consuming
task that requires highly speciﬁc domain knowledge of
the individual Virtual Machine implementation. Conse-
quently, for example, this gives game publishers a head-
start in which enough revenue can be generated to stay
proﬁtable. On the other hand, obfuscated malware stays
under the radar for a longer time, until concrete analysis
results can be used to effectively defend against it.
To deal with this problem, prior research has explored
many different approaches to enable deobfuscation of
obfuscated code. For example, Rolles proposes static
analysis to aid in deobfuscation of VM-based obfuscation
schemes [44]. However, it incorporates speciﬁc imple-
mentation details an attacker has to know a priori. Further,
static analysis of obfuscated code is notoriously known
to be intractable in the general case [12]. Hence, recent
deobfuscation proposals have shifted more towards dy-
namic analysis [13, 61, 62]. Commonly, they produce
an execution trace and use techniques such as (dynamic)
taint analysis or symbolic execution to distinguish input-
dependent instructions. Based on their results, the pro-
gram code can be reduced to only include relevant, input-
dependent instructions. This effectively strips the obfus-
cation layer. Even though such deobfuscation approaches
sound promising, recent work proposes several ways to
effectively thwart underlying techniques, such as sym-
bolic execution [2]. For this reason, it suggests itself to
explore distinct techniques that may be leveraged for code
deobfuscation.
In this paper, we propose an approach orthogonal to
prior work on approximating the underlying semantics
USENIX Association
26th USENIX Security Symposium    643
of obfuscated code. Instead of manually analyzing the
instruction handlers used in virtualization-based (VM) ob-
fuscation schemes in a complex and tedious manner [44]
or learning merely the bytecode decoding (not the seman-
tics) of these instruction handlers [53], we aim at learning
the semantics of VM-based instruction handlers in an auto-
mated way. Furthermore, our goal is to develop a generic
framework that can deal with different use cases. Natu-
rally, this includes constructs close to obfuscation, such
as Mixed Boolean-Arithmetic (MBA), different kinds of
VM-based obfuscation schemes, or even analysis of code
chunks (so called gadgets) used in Return-oriented Pro-
gramming (ROP) exploits.
To this extend, we explore how program synthesis can
be leveraged to tackle this problem. Broadly speaking,
program synthesis describes the task of automatically con-
structing programs for a given speciﬁcation. While there
exists a variety of program synthesis approaches [21], we
focus on SMT-based and stochastic program synthesis in
the following, given its proven applicability to problem
domains close to trace simpliﬁcation and deobfuscation.
SMT-based program synthesis constructs a loop-free pro-
gram based on ﬁrst-order logic constraints whose satisﬁa-
bility is checked by an SMT solver. For component-based
synthesis, components are described that build the instruc-
tion set of a synthesized program; for instance, compo-
nents may be bitwise addition or arithmetic shifts. The
characteristics of a well-formed program such as the inter-
connectivity of components are deﬁned and the semantics
of the program are described as a logical formula. Then,
an SMT solver returns a permutation of the components
that forms a well-encoded program following the previ-
ously speciﬁed intent [22,24], if it is satisﬁable, i. e., such
a permutation does exist.
Instead of relying on a logical speciﬁcation of program
intent, oracle-guided program synthesis uses an input-
output (I/O) oracle. Given the outputs of an I/O oracle
for arbitrary program inputs, program synthesis learns
the oracle’s semantics based on a ﬁnite set of I/O sam-
ples. The oracle is iteratively queried with distinguishing
inputs that are provided by an SMT solver. Locating
distinguishing inputs is the most expensive task in this ap-
proach. The resulting synthesized program has the same
input-output behavior as the I/O oracle [24]. Contrary to
SMT-based approaches that only construct semantically
correct programs, stochastic synthesis approximates pro-
gram equivalence and thus remains faster. In addition, it
can also ﬁnd partial correct programs. Program synthesis
is modeled as heuristic optimization problem, where the
search is guided by a cost function. It determines, for
instance, output similarity of the synthesized expression
and the I/O oracle for same inputs [50].
As program synthesis is indifferent to code complex-
ity, it can synthesize arbitrarily obfuscated code and is
only limited by the underlying code’s semantic complex-
ity. We demonstrate that a stochastic program synthesis
algorithm based on Monte Carlo Tree Search (MCTS)
achieves this in a scalable manner. To show feasibility
of our approach, we automatically learned the semantics
of 489 out of 500 MBA-obfuscated random expressions.
Furthermore, we synthesize the semantics of arithmetic
instruction handlers in two state-of-the art commercial
virtualization-based obfuscators with a success rate of
more than 94%. Finally, to show applicability to areas
more focused on security aspects, we further automati-
cally learn the semantics of ROP gadgets.
Contributions
contributions in this paper:
In summary, we make the following
• We introduce a generic approach for trace simpli-
ﬁcation based on program synthesis to obtain the
semantics of different kinds of obfuscated code. We
demonstrate how Monte Carlo Tree Search (MCTS)
can be utilized in program synthesis to achieve a
scalable and generic approach.
• We implement a prototype of our method in a tool
called Syntia. Based on I/O samples from assembly
code as input, Syntia can apply MCTS-based pro-
gram synthesis to compute a simpliﬁed expression
that represents a deobfuscated version of the input.
• We demonstrate that Syntia can be applied in sev-
eral different application domains such as simplify-
ing MBA expressions by learning their semantics,
learning the semantics of arithmetic VM instruction
handlers and synthesizing the semantics of ROP gad-
gets.
2 Technical Background
Before presenting our approach to utilize program syn-
thesis for recovering the semantics of obfuscated code,
we ﬁrst review several concepts and techniques we use
throughout the rest of the paper.
2.1 Obfuscation
In the following, we discuss several techniques that
qualify as an obfuscating transformation, namely
virtualization-based obfuscation, Return-oriented Pro-
gramming and Mixed Boolean-Arithmetic.
2.1.1 Virtualization-based Obfuscation
Contemporary software protection solutions such as VM-
Protect [58], Themida [38], and major game copy protec-
tions such as SecuROM base their security on the concept
644    26th USENIX Security Symposium
USENIX Association
handler function by looking it up in a global handler table
(depicted in Figure 1). The latter maps indices, obtained
from the instruction’s bytecode in the decoding step, to
handlers addresses. In its most simple implementation,
all handler functions return to a central dispatching loop
which then dispatches the next handler. Eventually, exe-
cution ﬂow reaches a designated handler, VM exit, which
performs the context switch back to the native processor
context and transfers control back to native code.
Custom ISA. The design of the target VM-ISA is en-
tirely up to the VM designer. Still, to maximize the
amount of handlers an analyst has to reverse engineer,
VMs often opt for reduced complexity for the individual
handlers, akin to the RISC design principle. To exemplify,
consider the following Intel x86 code:
1 mov eax , dword ptr [0 x401000 + ebx * 4]
2 pop dword ptr [ eax ]
This might get translated into VM-ISA as follows:
T0 , vm_context . real_ebx
T1 , 4
T2 , T0 , T1
T3 , 0 x401000
T4 , T2 , T3
1 vm_mov
2 vm_mov
3 vm_mul
4 vm_mov
5 vm_add
6 vm_load T5 , dword ( T4 )
7 vm_mov
8 vm_mov
9 vm_mov
10 vm_add
11 vm_mov
12 vm_load T9 , dword ( T7 )
13 vm_store dword ( T6 ), T9
vm_context . real_eax , T5
T6 , T5
T7 , vm_context . real_esp
T8 , T7 , T1
vm_context . real_esp , T8
It favors many small, simple handlers over fewer more
complicated ones.
Bytecode Blinding.
In order to prevent global analysis
of instructions, the bytecode bc of each VM instruction is
blinded based on its instruction type, i. e., its correspond-
ing handler h, at protection time. Likewise, each han-
dler unblinds the bytecode before decoding its operands:
(bc,vm_key) ← unblindh(blinded_bc,vm_key).
The routine is parameterized for each handler h and
updates a global key register in the VM context. Conse-
quently, instruction decoding can be ﬂow-sensitive: An
adversary is unable to patch a single VM instruction with-
out re-blinding all subsequent instructions. This, in turn,
requires her to extract the unblinding routines from ev-
ery handler involved. The individual unblinding routines
commonly consist of a combination of arithmetic and
logical operations.
Handler Duplication.
In order to easily increase anal-
ysis complexity, common VMs duplicate handlers such
Figure 1: The Fetch–Decode–Execute cycle of a Virtual
Machine. Native code calls into the VM, upon which
startup code is executed (VM entry). It performs the con-
text switch from native to VM context. Then, the next
instruction is fetched from the bytecode stream, mapped
to the corresponding handler using the handler table (de-
coding) and, ﬁnally, the handler is executed. The process
repeats for subsequent VM instructions in the bytecode
until the exit handler is executed, which returns back to
native code.
of Virtual Machine-based obfuscation (also known as
virtualization-based obfuscation [44]).
Similar to system-level Virtual Machines (VMs) that
emulate a whole system platform, process-level VMs em-
ulate a foreign instruction set architecture (ISA). The
core idea is to translate parts of a program, e. g., a func-
tion f containing intellectual property, from its native
architecture—say, Intel x86—into a custom VM-ISA. The
obfuscator then embeds both the bytecode of the virtual-
ized function (its instructions encoded for the VM-ISA)
along with an interpreter for the new architecture into
the target binary whilst removing the function’s origi-
nal, native code. Every call to f is then replaced with
an invocation of the interpreter. This effectively thwarts
any naive reverse engineering tool operating on the native
instruction set and forces an adversary to analyze the inter-
preter and re-translate the interpreted bytecode back into
native instructions. Commonly, the interpreter is heavily
obfuscated itself. As VM-ISAs can be arbitrarily complex
and generated uniquely upon protection time, this process
is highly time-consuming [44].
Components. The (VM) context holds internal vari-
ables of the VM-ISA such as general-purpose registers or
the virtual instruction pointer. It is initialized by sequence
called VM entry, which handles the context switch from
native code to bytecode.
After initialization, the VM dispatcher fetches and de-
codes the next instruction and invokes the corresponding
USENIX Association
26th USENIX Security Symposium    645
5b 60 97 84 66 d8 aa 11 22Bytecodehandler_add8handler_mul16handler_not8…handler_sub32Handler TableFetchDecodeExecuteVM Entryswitch from nativeto VM contextNative Codecorresponds tohandler_exitthat the same virtual instruction can be dispatched by mul-
tiple handlers. In presence of bytecode blinding, these
handlers’ semantics only differ in the way they unblind
the bytecode, but perform the same operation on the VM
context.
Architectures.
In his paper about interpretation tech-
niques, Klint denotes the aforementioned concept using
a central decoding loop as the “classical interpretation
method” [28]. An alternative is proposed by Bell with
Threaded Code (TC) [4]: He suggests inlining the dis-