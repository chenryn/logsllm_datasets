time, e.g., validating server certi(cid:12)cate.
/system/bin/-
time_daemon is developed by Qualcomm, therefore other
Android phones using Qualcomm time daemon are also vul-
nerable. This vulnerability has been reported and was as-
signed CVE-2016-3683.
5.2.3 Bluedroid
The Android Bluetooth stack implementation is call blue-
droid, which exposes a Unix domain socket channel for con-
trolling the A2DP protocol [1]. The ABSTRACT address,
@/data/misc/bluedroid/.a2dp_ctrl, is expected to be en-
forced by SEAndroid. To our surprise, we are able to con-
nect to the server through this address and send control
commands to it on a Nexus 4. We are able to control the
audio playing on a peripheral device connected to the phone
through Bluetooth. Though the LG G3 and the Galaxy
S4 also expose the same channel, accesses from third-party
apps always fail at connecting stage due to insuﬃcient per-
mission. This case suggests that vendors may have made
some security improvements despite their tendency to intro-
duce vulnerabilities [34].
6. COUNTERMEASURE DISCUSSION
As our study suggests, the misuse of Unix domain sock-
ets on Android has resulted in severe vulnerabilities. We
discuss possible countermeasures to minimize the problem
from two aspects: (1) OS-level mitigations and (2) better
approaches to implementing secure IPC that utilizes Unix
domain sockets.
6.1 OS-level Solutions
Changing the default namespace. For now, Unix do-
main socket channels created by apps use the ABSTRACT
namespace by default. Due to the lack of DAC, socket chan-
nels based on ABSTRACT addresses are less secure than
those based on FILESYSTEM addresses. Therefore, an in-
tuitive mitigation is to change the default namespace from
ABSTRACT to FILESYSTEM; or more radically, disable
the use of ABSTRACT namespace.
More (cid:12)ne-grained SEAndroid policies and domain
assignment.
In the current SEAndroid model, all third-
party apps, although having individual UIDs and GIDs, are
assigned the same domain label, i.e., untrusted_app. Unix
domain sockets accesses between third-party apps are not
enforceable by SEAndroid because domain-level policies can-
not tell one third-party app from another.
Therefore, we need to assign diﬀerent domain labels to
diﬀerent third-party apps so that more (cid:12)ne-grained policies
can be made to regulate Unix domain socket accesses. Nev-
ertheless, this could introduce new problems: pre-de(cid:12)ned
policies would not be able to cover apps, and making (cid:12)xed
policies editable at runtime may open new attack vectors.
Moreover, it would be untenable to de(cid:12)ne policies for every
app; each user may install any number of apps.
6.2 Secure IPC on Unix Domain Sockets
We demonstrate three scenarios where apps and system
daemons require Unix domain sockets for IPC and discuss
possible solutions to their security problems.
A privileged system daemon exposes its function-
ality to apps. A system daemon may need to provide
diverse functionality to apps that have diﬀerent privileges.
For example, the LG AT daemon may want to expose the
capability of doing factory reset to only system apps, and
allow apps with location permissions to get the user’s GPS
coordinates. To achieve this, system daemons will have to
enforce app permissions themselves. Unfortunately, the lack
of Android runtime context in system daemons precludes
daemons from easily obtaining the app’s permission(s).
Figure 6 demonstrates the proposed solution. The goal
being to delegate peer authentication to the existing An-
droid security model. Instead of letting apps and daemons
communicate directly through a Unix domain socket, a sys-
tem service acts as an intermediary between the two. This
new system service runs as the system user with UID 1000,
thus can be easily authenticated by the daemon. Apps talk
to this system service through Android Binder and their per-
missions are validated by the system service. In this way,
daemon functionality is indirectly exposed to apps with the
help of a system service.
Figure 6: A secure way to expose system daemon function-
ality to apps. A system service is added between apps and
the system daemon.
An app consisting of both Java and native code
performs cross-layer IPC. Apps having native executa-
bles need an intra-application, cross-layer IPC. An app cre-
ates a native process to run its executable, and uses Unix
domain sockets to communicate with the native process from
its non-native part. In this case, executables still have the
same UID as their owner apps. Therefore, it is convenient
to check UID on both client and server sides.
An app exposes interfaces to other apps. Android-
speci(cid:12)c IPCs such as Intents are expected to be used for
inter-application communications. However, apps have to
choose Unix domain sockets for cross-layer IPCs. We pro-
pose a token-based mechanism inspired by Helium described
in x4.3, as Figure 7 illustrates. The client app (cid:12)rst sends a
broadcast to the server app to request a communication to-
ken. The server responds by asking the user to allow or deny
the incoming request. If the user allows, the server app gen-
erates a one-time token for that particular client and returns
the token. After that, the client connects to the server with
its token and a Unix domain socket connection will be es-
tablished. Note that the token is not meaningful to anyone
else. Even if it was stolen, the attacker would not be able
to use it to talk to the server app.
Figure 7: Token-based secure Unix domain socket IPC. Dot-
ted arrow lines stand for permission-protected broadcasts.
7. RELATED WORK
As the community continues to explore and understand
Android and its ecosystem, novel attacks and innovative
ways of uncovering vulnerabilities are being developed.
Many of the existing works in Android security leverage
static and/or dynamic analysis of Android apps and frame-
work. By comparing our work with that of others we distin-
guish and demonstrate how our work contributes to Android
security research.
Android IPC and framework vulnerabilities. The
Android IPC mechanisms, e.g., Binder, Messenger, and In-
tents, have been thoroughly studied [17, 27, 20, 14, 31, 22].
These works aim to exploit the IPC mechanisms in order
to disclose sensitive information such as SMS messages, call
history, and GPS data [30]. For example, Chin et. al. [17]
examined Android application interaction and identi(cid:12)ed se-
curity risks in app components. They presented ComDroid
to detect app communication vulnerabilities. There also ex-
ist works focusing on detecting implemention (cid:13)aws of the
Android framework. Aafer et. al.
[13] studied the threat
of hanging attribute references; Kratos [29] found frame-
work vulnerabilities from the perspective of inconsistent se-
curity enforcement. Unfortunately, none of the aforemen-
tioned works explore traditional Linux IPCs on Android,
e.g., Unix domain sockets, as exploitable interfaces.
Static analysis of Android apps. We use static anal-
ysis to detect the misuse of Unix domain sockets in apps.
Techniques that serve this purpose have been extensively
studied [14, 31, 21, 22]. Particularly, FlowDroid [14] has
been widely used for doing taint analysis on Android apps.
However, it does not handle inter-component communica-
tions (ICC) well. Amandroid [31] is a data (cid:13)ow analysis
framework that provides better ICC support, and we build
our tool on top of it.
Security risks in customizations. Customizations to
the Android framework has been known to introduce new
vulnerabilities not present in the AOSP [32]. Wu et. al.
discovered that over 85% of all preinstalled apps in stock
images have more privileges than they need. Of those 85%
of apps, almost all vulnerabilities are a direct result of vendor
customization. They discovered that many of these (cid:12)rmware
and pre-installed apps are susceptible to a litany of vulner-
abilities that range from injected malware, to pre-installed
malware, and signing vulnerabilities. These all point to a
systemic problem introduced by customization of the An-
droid framework. ADDICTED [34] is a tool for automat-
ically detecting (cid:13)aws exposed by customized driver imple-
mentations. On a customized phone, it performs dynamic
analysis to correlate the operations on a security-sensitive
device to its related Linux (cid:12)les. Our work reveals and studies
a new customization domain | privileged system daemons
| which can be exploited to perform dangerous operations.
8. CONCLUSION
In this paper, we conducted the (cid:12)rst systematic study in
understanding the usage of Unix domain sockets by both
apps and system daemons as an IPC mechanism on An-
droid, especially for cross-layer communications between the
Java and the native layers. We presented SInspector, a tool
for discovering potential security vulnerabilities through the
process of identifying socket addresses, detecting authen-
tication checks, and performing data (cid:13)ow analysis on na-
AppSystem Daemon(Check sys UID)System Service(Check app permission)BinderUnixdomainsocketDirect access deniedClientAppRequest tokenServerAppReply a tokenUnix domain socketAsk for user decisiontive code. We analyzed 14,644 Android apps and 60 system
daemons, (cid:12)nding that some apps, as well as certain system
daemons, suﬀer from serious vulnerabilities, including root
privilege escalation, arbitrary (cid:12)le access, and factory reset-
ting. Based on our study, we proposed countermeasures to
prevent these attacks from occurring.
Acknowledgments
We thank the anonymous reviewers for their valuable feed-
back on our work. This research was supported in part by
the National Science Foundation under grants CNS-1318306
and CNS-1526455, as well as by the Oﬃce of Naval Research
under grant N00014-14-1-0440.
9. REFERENCES
[1] Advanced audio distribution pro(cid:12)le (a2dp).
https://developer.bluetooth.org/
TechnologyOverview/Pages/A2DP.aspx.
[2] An Analysis of Android App Permissions.
http://www.pewinternet.org/2015/11/10/
an-analysis-of-android-app-permissions/.
[3] Android Security Overview.
https://source.android.com/security/.
[4] Android Security Tips: Using Interprocess
Communication. http://developer.android.com/
training/articles/security-tips.html#IPC.
[5] ApkPure website. https://apkpure.com/.
[6] Es app group. http://www.estrongs.com/.
[7] How to create a android native service and use binder
to communicate with it? http://stackover(cid:13)ow.com/
questions/14215462/how-to-create-a-android-native-
service-and-use-binder-to-communicate-with-it.
[8] Jeb decompiler by pnf software.
https://www.pnfsoftware.com/.
[9] ProGuard. http://proguard.sourceforge.net/.
[10] Qualcomm’s cne brings \smarts" to 3g/4g wi-(cid:12)
seamless interworking. https://www.qualcomm.com/
news/onq/2013/07/02/qualcomms-cne-bringing-
smarts-3g4g-wi-(cid:12)-seamless-interworking.
[11] Security | Platform Security Architecture.
https://source.android.com/security/index.
html#android-platform-security-architecture.
[12] Xposed development tutorial. https://github.com/
rovo89/XposedBridge/wiki/Development-tutorial.
[13] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen,
X. Wang, X. Zhou, W. Du, and M. Grace. Hare
hunting in the wild android: A study on the threat of
hanging attribute references. In Proc. of ACM CCS,
2015.
[14] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel,
J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel.
Flowdroid: Precise context, (cid:13)ow, (cid:12)eld, object-sensitive
and lifecycle-aware taint analysis for android apps. In
Proc. of ACM PLDI, 2014.
[17] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner.
Analyzing inter-application communication in
Android. In Proc. of ACM MobiSys, 2011.
[18] W. Cui, J. Kannan, and H. J. Wang. Discoverer:
Automatic protocol reverse engineering from network
traces. In Proc. of USENIX Security, 2007.
[19] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and
M. Winandy. Privilege escalation attacks on android.
In Information Security, pages 346{360. Springer,
2010.
[20] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G.
Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N.
Sheth. TaintDroid: an information-(cid:13)ow tracking
system for realtime privacy monitoring on
smartphones. ACM Transactions on Computer
Systems (TOCS), 32(2):5, 2014.
[21] Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda,
C. Kruegel, and G. Vigna. Triggerscope: Towards
detecting logic bombs in android applications. In Proc.
of IEEE S&P, 2016.
[22] C. Gibler, J. Crussell, J. Erickson, and H. Chen.
AndroidLeaks: automatically detecting potential
privacy leaks in android applications on a large scale.
Springer, 2012.
[23] M. Grace, Y. Zhou, Z. Wang, and X. Jiang.
Systematic detection of capability leaks in stock
android smartphones. In Proc. of ISOC NDSS, 2012.
[24] N. Hardy. The Confused Deputy:(or why capabilities
might have been invented). ACM SIGOPS, 1988.
[25] C.-C. Lin, H. Li, X.-y. Zhou, and X. Wang.
Screenmilker: How to milk your android screen for
secrets. In Proc. of ISOC NDSS, 2014.
[26] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic
protocol format reverse engineering through
context-aware monitored execution. In Proc. of ISOC
NDSS, 2008.
[27] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex:
statically vetting android apps for component
hijacking vulnerabilities. In Proc. of ACM CCS, 2012.
[28] F. Nielson, H. R. Nielson, and C. Hankin. Principles
of program analysis. Springer, 2015.
[29] Y. Shao, J. Ott, Q. A. Chen, Z. Qian, and Z. M. Mao.
Kratos: Discovering Inconsistent Security Policy
Enforcement in the Android Framework. In Proc. of
ISOC NDSS, 2016.
[30] T. Vennon. Android malware. A study of known and
potential malware threats. SMobile Global Threat
Centre, 2010.
[31] F. Wei, S. Roy, X. Ou, et al. Amandroid: A precise
and general inter-component data (cid:13)ow analysis
framework for security vetting of android apps. In
Proc. of ACM CCS, 2014.
[32] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The
impact of vendor customizations on android security.
In Proc. of ACM CCS, 2013.
[15] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R.
[33] H. Zhang, D. She, and Z. Qian. Android root and its
Sadeghi, and B. Shastry. Towards taming
privilege-escalation attacks on android. In Proc. of
ISOC NDSS, 2012.
providers: A double-edged sword. In Proc. of ACM
CCS, 2015.
[34] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang.
[16] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot:
Automatic extraction of protocol message format using
dynamic binary analysis. In Proc. of ACM CCS, 2007.
The peril of fragmentation: Security hazards in
android device driver customizations. In Proc. of
IEEE S&P, 2014.