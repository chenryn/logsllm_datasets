ory is used. All approaches except S2-CAN add up to 30% more RAM
and 70–90% of Flash usage compared to the memory consumption
for regular CAN. The memory consumption (both RAM and Flash)
for S2-CAN is minimal.
8 SECURITY ANALYSIS
To measure the security level of S2-CAN, we need to determine
the time an attacker requires to correctly spoof a specific CAN
message. To be more concrete, we assume the adversary will try to
accelerate the vehicle by CAN injection through the OBD-II port.
Furthermore, we assume that the gateway blocks CAN messages
with IDs under a certain threshold to secure the handshake (see
Sec. 5.2) and no intrusion detection system is installed in the target
vehicle. Given the current state of commercial passenger vehicle
security, this is a very likely scenario. In order to affect the accel-
eration behavior by CAN message injection, the adversary needs
to know the message format (i.e., CAN ID, signal position, scale
and offset) of the signal they want to spoof. For regular CAN, this
is possible by existing automated CAN bus reverse-engineering
tools such as LibreCAN [36]. In the following security analysis, we
will deploy Phases 0 and 1 of LibreCAN with some modifications
to adapt to S2-CAN and try to measure the time an attacker would
need to determine the correct payload to inject into the CAN bus.
The modified attack tool is called LibreCAN+, consisting of three
stages that are discussed below.
8.1 Experimental Setup
All experiments were conducted using Python 3 on a computer
running 64-bit Ubuntu 18.04.4 LTS with 128 GB of registered ECC
DDR4 RAM and two Intel Xeon E5-2683 V4 CPUs (2.1 GHz with
16 cores/32 threads each). We evaluate the security of S2-CAN by
using one-hour real-world traces collected from four recent (2016-
2019) vehicles: Veh. A is a luxury mid-size sedan, Veh. B a compact
crossover SUV, Veh. C a full-size crossover SUV and Veh. D a full-
size pickup truck. Veh. A, C and D have at least two HS-CAN buses,
both of which are routed out to the OBD-II connector, whereas Veh.
B has at least one HS-CAN and one MS-CAN, with only the former
being accessible via OBD-II. All raw CAN data was collected with
the OpenXC VI [6].
8.2 Stage 0: Generating S2-CAN Traces
The recorded traces from our four evaluation vehicles are in regu-
lar CAN-syntax. To enable S2-CAN-compliant communication, we
have to process the one-hour traces according to simulated hand-
shake parameters and convert them into S2-CAN-syntax. First, we
analyze the DBC file of the vehicle to determine the ECU nodes
that are present in the network, free space of each CAN ID payload,
and group CAN IDs based on the node that emits them since the
handshake assigns the parameters on a per-node basis. Then, we
randomly assign each node a unique internal ID ∈ [0, NECU − 1].
The counter of each node is also initialized to a random number in
range [0, 216 − 1]. Third, we assign incrementing counter values for
each CAN message. After specifying values for the internal ID and
counter of each CAN message, we XOR the two values to obtain
qj, assign it to a free space in each CAN message (if possible) and
finally OR it with the original payload. In order to be compliant
with S2-CAN, the payload needs to have at least 2 bytes of free
space, but these do not have to be contiguous. We removed CAN
IDs from the trace that do not have the necessary free space. Finally,
we perform the byte-wise circular shift (CS) on each remaining
message according to the randomly generated encoding parameter
f .
8.3 Stage 1: Cracking the Encoding
First, the adversary can assume that the targeted CAN signal is two
bytes or less in size since this applies to most powertrain-related
signals. In all four vehicles the target signal is 13 bits long. Next, the
attacker can brute-force the CAN trace with each possible encoding
for each of the 7 pairs of contiguous bytes in the CAN message.
Our encoding scheme has 8 possibilities for each byte, so without
accounting for duplicates, there are 8 · 8 · 7 = 448 combinations an
attacker must try. However, because encodings for unconsidered
bytes are set to zero, we can reduce this to 400 combinations by
eliminating duplicates: One combination of all zeros, 7 · 8 = 56
combinations where all but one byte are zero, and 7 · 7 · 7 = 343
combinations where all but two contiguous bytes are zero. For
each potential encoding, the attacker decodes the trace and runs
it through Phases 0 and 1 of the original LibreCAN, resulting in a
list of three-tuples (candidate CAN ID, encoding, normalized cross-
correlation score). The pairs with the highest X correlation scores
(X is a design parameter in Sec. 8.5) can then be used in Stage 2.
Note that we used multi-threading in this stage to calculate up to
50 combinations simultaneously.
8.4 Stage 2: Authenticating Correctly
For the adversary to successfully spoof a message, they must be
able to increment the message counter to the correct value. This
requires the knowledge of the position of the counter bits within
the message, the value of the counter, and the internal ID. After
determining the top X CAN IDs by correlation score from Stage 1,
the adversary can extract a subtrace consisting of only the messages
for that candidate CAN ID. With the subtrace in hand, the adversary
calculates the frequency of bit flips for each bit in the subtrace’s
messages, and matches these flip frequencies to what frequency the
bits of a counter should be. This is done using Algorithm 1. Note
that only the lowest ⌊log2(trace length)⌋) bits of the counter can
be determined, since these are the only bits that are guaranteed to
flip at least once.
Algorithm 1 Determine Counter Position
procedure match-freqency(f lip_f r eqs, tr ace_len)
counter_lenдth ← min(16, ⌊log2 tr ace_len⌋)
counter_positions ← []
for i ← counter_lenдth to 1 do
match ← argmin({|f − 2−(i−1)| : f ∈ f lip_f r eqs })
append(counter_positions, match)
return counter_positions
After determining the position of the counter bits, the internal
ID can be extracted. To do this, the adversary compares consecutive
messages in the subtrace, and sees if one of the counter bits flips in
434S2-CAN: Sufficiently Secure Controller Area Network
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
the second message. If this occurs, the adversary knows the next
lowest bit of the counter must have been a 1 in the first message.
Then, to extract the internal ID, the adversary XORs the counter bit
with 1. This is repeated until all bits of the internal ID are known.
This procedure is summarized in Algorithm 2.
Algorithm 2 Determine Internal ID
procedure calculate-int-id(counter_pos, subtr ace)
c_lenдth ← length(counter_pos)
id_lenдth ← min(8, c_lenдth − 1)
int_id ← []
of f set ← c_lenдth − id_lenдth
c_pos ← counter_pos[of f set : c_lenдth]
pr ev_m ← get(subtr ace, 0)
for i ← 0 to id_lenдth − 1 do
for m ∈ subtr ace do
if m[c_pos[i]] (cid:44) pr ev_m[c_pos[i]] then
int_id[i] ← pr ev_m[c_pos[i + 1]] ⊕ 1
break
return bits-to-integer(int_id)
Now, after obtaining the position of the counter and the internal
ID, the attacker can spoof a message. First, they use the encoding
determined in Stage 1 to decode the latest message from the desired
CAN ID. Next, the attacker replaces the value of the signal they are
spoofing with their own fabricated value in that message. Before
re-encoding the message with f , the attacker extracts the counter
value from the latest real-time message on the CAN bus, increments
it by 1, and inserts it into their new message. This spoofed message
will then be injected through the adversary’s rogue node into the
CAN bus and accepted by the respective receiver ECUs.
8.5 Difficulty of Successful Cracking
The recorded traces of all evaluation vehicles were around 60 min-
utes long. We integrated the above procedure into LibreCAN —
creating a new version of LibreCAN, named LibreCAN+ — and eval-
uated its success on those four traces using the ground truth DBC
files of each vehicle. The outcome is shown in the last column of
Table 4. The cracking success is dependent on finding the correct
CAN ID and encoding in Stage 1 (abbreviated at ST1 in the table)
by picking the top candidate in the sorted correlation list, as well
as determining the correct internal ID (ID) and counter (cnt). For
Vehicles A, B and C, cracking S2-CAN with LibreCAN+ works. Ve-
hicle D already failed in Stage 1 to determine the correct CAN ID
for spoofing the desired signal.
Furthermore, we wanted to analyze how a shorter recording
would affect this metric. We re-ran all three stages with 5%, 10%,
25%, 50% and 75% of full trace length. To avoid bias towards more
city or highway driving, we calculated the precision for all non-
overlapping segments of this trace. As can be seen in Table 4, traces
of 5% and 10% length fail in most cases. We color-coded the table to
indicate the number of split traces cracked correctly. If all split traces
can be cracked, we highlighted them in green color. Otherwise, if
under 2/3 of split traces are unsuccessful, we highlighted these in
red, with the remaining portion colored in orange.
Table 4 only considers those candidates in Stage 1 with the
highest correlation score (X = 1) that match the correct encoding
and CAN ID as successful. In many cases, we observed that the
Table 4: Cracking Success based on Trace Length (in %)
Trace Length
Veh. A
Veh. B
Veh. C
Veh. D
5
11/20
10/20
11/20
12/20
11/20
12/20
8/20
8/20
8/20
6/20
6/20
6/20
10
6/10
6/10
6/10
4/10
3/10
4/10
5/10
5/10
5/10
3/10
3/10
3/10
25
4/4
4/4
4/4
3/4
3/4
3/4
3/4
3/4
3/4
0/4
0/4
0/4
50
3/3
3/3
3/3
2/3
1/3
2/3
3/3
3/3
3/3
0/3
0/3
0/3
75
2/2
2/2
2/2
1/2
1/2
1/2
2/2
2/2
2/2
0/2
0/2
0/2
100
1/1
1/1
1/1
1/1
1/1
1/1
1/1
1/1
1/1
0/1
0/1
0/1
ST1
ID
cnt
ST1
ID
cnt
ST1
ID
cnt
ST1
ID
cnt
second-best candidate was ideal. As a result, we also wanted to
see if considering the top X = {2, 3, 5, 10} candidates from Stage 1
would lead to success in cracking S2-CAN . If any of the candidates
in the top X were correct, we would mark ST1 for the respective
vehicle and split trace as correct. Similar tables for the aforemen-
tioned values of X are presented in Appendix A. Based on these, we
summarize the cracking performance for varying X in Table 5. The
values are reported as average numbers over all four vehicles. Note
that the color coding is different from Table 4. Green cells indicate
that the adjacent X value to its right is identical and thus does not
provide a performance improvement. We suggest using at least a
trace of 25% length (15 minutes) and consider the Top 3 candidates
for optimal brute-forcing success.
Table 5: Brute-Forcing Success for Top X Candidates
TL (%)
5
10
25
50
75
100
ST1
ID
cnt
ST1
ID
cnt
ST1
ID
cnt
ST1
ID
cnt
ST1
ID
cnt
ST1
ID
cnt
Top 1 Top 2 Top 3 Top 5 Top 10
46%
44%
46%
45%
43%
45%
63%
63%
63%
67%
58%
67%
63%
63%
63%
75%
75%
75%
58%
54%
58%
68%
58%
68%
81%
81%
81%
92%
83%
92%
88%
88%
88%
100%
100%
100%
58%
54%
58%
68%
58%
68%
88%
88%
88%
92%
83%
92%
88%
88%