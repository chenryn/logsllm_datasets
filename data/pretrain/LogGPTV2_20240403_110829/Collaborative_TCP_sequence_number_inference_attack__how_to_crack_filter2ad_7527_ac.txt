DelayedACKLost packet counter (four-way search)
Client-side sequence number inference. Sometimes,
it is necessary to infer the client-side sequence number, for
the purpose of either injecting data to the victim server,
or injecting data to the victim client with an appropri-
ate ACK number. The latter is currently unnecessary as
Linux/Android and BSD/Mac OS allows half of the ACK
number space to be valid [26]. For the former, we can still
use the same DelayedACKLost counter to infer the ACK
number.
Speciﬁcally, as discussed in §3.3, the only ending sequence
number that can satisfy the retransmission check is the one
equal to the next expected sequence number. When that
happens, the TCP stack increments the DelayedACKLost
packet counter again. The source code of the retransmission
check is shown in Figure 6.
Since the retransmission check is after the ACK num-
ber check, it allows an attacker to send a non-zero payload
packet that has the ending sequence number equal to the
next expected sequence number with a guessed ACK num-
ber. If it does not pass the ACK number check, the packet
is dropped and the DelayedACKLost counter does not incre-
ment. Otherwise, the packet is considered a retransmitted
packet and triggers the counter to increment. Based on such
behavior, we can perform a binary search or N-way search
on the ACK number similar to the sequence number search.
In fact, the procedure is mostly identical.
Figure 6: Retransmission check source code snippet from
tcp data queue() in Linux
3.5 Sequence-Number-Dependent Counters
in BSD/Mac OS
Inspired by the newly discovered counter in Linux, we
further conduct a survey on the latest FreeBSD source code
04G(a). First iteration(b). Second iteration2G1Bin 1Counter++0# of packets:# of packets:Bin 2Counter += 01G2G1Bin 1Counter++Bin 2Counter += 004G(a). First iteration(b). A later iteration2G1G3G132Bin 1Counter += 20250M1# of packets:# of packets:Bin 2Counter += 1Bin 3Counter += 4Bin 4Counter += 5500M750M1G11Bin 1Counter += 0Bin 2Counter += 1Bin 3Counter += 2Bin 4Counter += 3if (!after(TCP_SKB_CB(skb)->end_seq, tp->rcv_nxt)) {NET_INC_STATS_BH(sock_net(sk),        LINUX_MIB_DELAYEDACKLOST);…}597(version 10). Surprisingly, we ﬁnd that at least four pairs
of packet counters can leak TCP sequence number. The
counters are conﬁrmed to exist in Mac OS as well. This ﬁnd-
ing shows that the sequence-number-dependent counters are
widely available and apparently considered safe to include in
the OS. They are: 1) rcvduppack and rcvdupbyte; 2) rcvpack-
afterwin and rcvbyteafterwin; 3) rcvoopack and rcvoobyte; 4)
rcvdupack and rcvacktoomuch. They can be either accessed
through the standard “netstat -s” interface or sysctl API [11].
The ﬁrst three pairs can be used to infer server-side se-
quence numbers. Speciﬁcally, based on the source code, the
semantic of rcvduppack is identical to that of DelayedACK-
Lost. rcvdupbyte, however, additionally provides informa-
tion on the number of bytes (payload) carried in the incom-
ing packets that are considered duplicate (with an old se-
quence number). This counter greatly beneﬁts the sequence
number inference. Following the same “N-way” procedure,
the ﬁrst iteration can be improved by changing the “k pack-
ets sent per bin” to “a single packet with k bytes payload”.
This improvement substantially reduces the number of pack-
ets/bytes sent in each iteration, especially when “N” is large
(shown in §3.7).
The semantic of rcvpackafterwin and rcvbyteafterwin is
similar to rcvduppack and rcvdupbyte, except that the for-
mer increments only when the sequence number is bigger
than (instead of smaller than) certain sequence number X.
In this case, X is the expected sequence number plus the
receive window size. rcvbyteafterwin can be used similarly
as rcvdupbyte to conduct the sequence number inference.
rcvoopack and rcvoobyte diﬀer from the previous two pairs.
They increment only when packets arrive out of order, or
more precisely, when the sequence number is bigger than
the expected sequence number yet smaller than the expected
sequence number plus the receive window size. Even though
an attacker needs to send a lot more packets to infer the
TCP sequence number using this counter pair, at least they
can be used to replace the original noisy side-channel in the
Phrack attack [1] to improve success rate.
rcvdupack and rcvacktoomuch are used to determine the
client-side sequence numbers. Speciﬁcally, the former in-
crements when the ACK number of an incoming packet
is smaller than or equal to the unacknowledged number
(SND.UNA). The latter increments when the ACK num-
ber is greater than the sequence number of the next origi-
nal transmit (SND.MAX). The comparison again follows the
“unsigned integer to signed integer conversion” such that half
of the ACK number space is considered to match the condi-
tion.
We currently did not combine the counters together to im-
prove the inference speed. However, we do realize there are
potential ways to speed things up. For instance, the rcvdup-
byte and rcvdupack allows the client-side sequence number
inference to be piggybacked with the server-side sequence
number inference.
3.6 Sequence-Number-Dependent Counters
in Microsoft Windows
Interestingly, Microsoft Windows OSes do not appear to
expose such sequence-number-dependent counters and are
thus not vulnerable to the attack. On Windows 7, for ex-
ample, the TCP-related packet counters include the total
number of incoming packets, outgoing packets, and the num-
ber of packets retransmitted from the output of “netstat -
s”. These packet counters do not leak sequence numbers
directly.
3.7 Inference Performance and Overhead
We have implemented the sequence number inference on
both Android (which incorporates the Linux kernel) and
Mac OS. We are interested in the tradeoﬀs between diﬀerent
strategies in picking “N” in the “N-way search”.
Generally, as “N” goes up, the total number of bytes sent
should also increase. Since the ﬁrst iteration in the “N-way”
search requires sending more bytes, we pick a smaller “N”
for the ﬁrst iteration and a bigger “N” in the later iterations
to ensure that the number of bytes sent in each round is
similar. In the Linux implementation, we pick the following
pairs of N, (2/2, 4/6, 8/30, 12/84); For Mac OS, we pick
(2/2, 4/6, 34/50, 82/228). Here 4/6 means that we pick
N=4 for the ﬁrst iteration and N=6 for the later iterations.
As shown in Figure 7, we can see that the general tradeoﬀ
is that the fewer iterations an attacker wants, the more bytes
he needs to send in total. For instance, when the number of
iterations is 4, an attacker on Linux needs to send 13.7KB.
With the presence of the rcvdupbyte counter in Mac OS, it
requires to send only 8.4KB. This is a rather low network
resource requirement because it takes only 70ms to push
8.4KB onto the wire with even just 1Mbps bandwidth. Go-
ing further down to 3 iterations requires sending 27.75KB
for Mac OS. Depending on the available bandwidth and the
RTT, we may or may not want to increase the number of
bytes to save one round trip.
Next, we pick N=34/50 (4 round trips) for Mac OS at-
tacks, and N=8/30 (5 round trips) for Linux attacks (with
roughly the same resource requirement), and plot the infer-
ence time measured under various conditions. We control
the RTT between the attacker and the victim in three dif-
ferent settings: 1) The victim is in an oﬃce environment
(enterprise-like) connected to the network using WiFi, and
the attacker is in the same building (the RTT is around
5-10ms). 2) The victim is in a home environment and the
attacker is 50ms RTT away. 3) The victim is in a home envi-
ronment and the attacker is 100ms RTT away. In Figure 8,
we see that in the ﬁrst setting the inference time for Android
and Mac OS are 80ms and 50ms, which are low enough to
directly launch injection attacks on HTTP connections with
the guarantee that the inference ﬁnishes before the ﬁrst le-
gitimate response packet comes back (also discussed later
in §4.2). In fact, inference time between 350ms and 700ms
can be short enough in certain scenarios (see §5.1).
3.8 Noisiness
Sequence-Number-
Dependent Counters
of
So far, we have claimed that these sequence-number-
dependent counters are “clean” side-channels that rarely in-
crement naturally even with background traﬃc. To quanti-
tatively support this claim, we conduct a worse-case-scenario
experiment as follows: We open a YouTube video at the
background and browse web pages at the same time to see
how often the counters get incremented. Since it is easier
to do the multi-tasking on Mac OS, we choose it over the
Android platform. The Android counters should increment
even less frequently since smartphones are rarely used for
video streaming and web browsing simultaneously.
We pick the rcvdupbyte counter (which is equivalent to De-
layedACKLost on Linux) and run the experiments for about
5988.5 minutes. The video is long enough that it has not been
fully buﬀered by the end of the experiment. To quantify
the counter noisiness, we break down the time into 30ms in-
tervals to mimic the window of exposure during one round
of probing, and then count how many intervals in which
we observe any counter increment. As expected, there are
only 10 intervals out of 16896 that have the increment. This
indicates that the probability that the counter increments
due to noise and interference with one round of probing is
roughly 0.059%. Even if there are 22 rounds (worse case),
the probability that the entire probing will be aﬀected by
the counter noisiness is only 1.2%.
4. DESIGN AND IMPLEMENTATION OF
TCP ATTACKS
In the previous section, we described how to infer TCP
sequence number eﬃciently and reliably using the newly dis-
covered set of sequence-number-dependent packet counters.
Since the sequence number inference only takes less than a
second, it can be fast enough to launch many application-
layer attacks. In this section, we discuss four possible TCP
attacks that can be launched against a variety of applica-
tions. All of the attacks leverage the TCP sequence number
inference as the essential building block, but the main dif-
ference is in the timing and reliability with slightly diﬀerent
requirements. We have implemented the attacks on both
Android and Mac OS. We use Android as the example for
description
Injection vs. Hijacking. Using the same terminology as a
recent work [26], we deﬁne TCP hijacking to be the more
powerful attack than TCP injection. Speciﬁcally, TCP hi-
jacking allows an attacker to inject packets right after the
TCP 3-way handshake. For instance, it enables an attacker
to inject a complete HTTP response without any interfer-
ence. In contrast, TCP Injection is more general and does
not require this capability.
The four attacks are named as: (1). client-side TCP Injec-
tion, (2). passive TCP hijacking, (3). active TCP hijacking,
(4). server-side TCP injection.
4.1 Attack Requirements
There are a number of base requirements that need to
be satisﬁed for all of these TCP attacks. Note that our
attacks have much fewer requirements than the one proposed
in the recent study [26]. Speciﬁcally, we do not require a
ﬁrewall middlebox in the network, which makes our attacks
applicable in a much more general environment.
The set of requirements include: (1) malware on the client
with Internet access, (2) malware that can run in the back-
ground and read packet counters, (3) malware that can
read the list of active TCP connections and their four tu-
ples, and (4) a predictable external port number if NAT
is deployed. The ﬁrst three requirements are straightfor-
ward. All of the Android applications can easily request In-
ternet access, read packet counters (i.e.,/proc/net/netstat
and /proc/net/snmp, or “netstat -s”), and read active TCP
connections’ four tuples (e.g., through /proc/net/tcp and
/proc/net/tcp6, or “netstat”). The requirements can be eas-
ily satisﬁed on most modern OSes as well. In addition, an
oﬀ-path attacker needs the client’s external port mapping to
choose the correct four tuples when sending probing packets,
so we need the fourth requirement. This requirement is also
commonly satisﬁed, since many NAT mapping types allow
the external port to be predictable to facilitate NAT traver-
sal. For instance, our home routers directly map the internal
ports to the external ports. According to recent measure-
ment studies on the NAT mapping types [21, 31], the major-
ity of the NATs studied do have predictable external ports.
Further, even if the prediction is not 100% accurate, attacks
may still succeed by guessing the mappings.
Additional requirements for passive TCP hijacking are C1
and S1:
(C1). Client-side ISN has only the lower 24-bit random-
ized. This requirement is necessary so that the malware
can roughly predict the range of the ISN of a newly created
TCP connection.
In Linux kernels earlier than 3.0.2, the
ISN generation algorithm is designed such that ISNs for dif-
ferent connections are not completely independent. Instead,
the high 8 bits for all ISNs is a global number that incre-
ments slowly (every ﬁve minutes). This feature is designed
to balance security, reliability, and performance. It is long
perceived as a good optimization, with the historical details
and explanations in this article [5]. The result of this design
is that the ISN of two back-to-back connections will be at
most 224 = 16, 777, 216 apart. Even though it is a design
decision and not considered a “vulnerability”, since Linux
3.0.2, the kernel has changed the ISN generation algorithm
such that two consecutive connections will have independent
ISNs. The majority of Android systems that are on the mar-
ket are still on Linux 2.6.XX, which means that they are all
vulnerable to the passive TCP hijacking attack.
(S1). The legitimate server has a host-based stateful TCP
ﬁrewall. Such a ﬁrewall is capable of dropping out-of-state
TCP packets. Many websites such as Facebook and Twitter
deploy such host ﬁrewalls to reduce malicious traﬃc. For
instance, iptables can be easily conﬁgured to achieve this
purpose [10]. Interestingly, as we will discuss later, this se-
curity feature on the server actually enables TCP hijacking
attacks.