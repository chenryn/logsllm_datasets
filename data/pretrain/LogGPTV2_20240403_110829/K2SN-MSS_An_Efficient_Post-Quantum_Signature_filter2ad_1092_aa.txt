title:K2SN-MSS: An Efficient Post-Quantum Signature
author:Sabyasachi Karati and
Reihaneh Safavi-Naini
K2SN-MSS: An Efficient Post-Quantum Signature (Full Version)
Sabyasachi Karati∗
School of Computer Sciences
National Institute of Science Education and Research, India
PI:EMAIL
Reihaneh Safavi-Naini
Department of Computer Science
University of Calgary, Canada
rei@ucalgary.ca.
ABSTRACT
With the rapid development of quantum technologies, quantum-
safe cryptography has found significant attention. Hash-based sig-
nature schemes have been in particular of interest because of (i)
the importance of digital signature as the main source of trust
on the Internet, (ii) the fact that the security of these signatures
relies on existence of one-way functions, which is the minimal
assumption for signature schemes, and (iii) they can be efficiently
implemented. Basic hash-based signatures are for a single message,
but have been extended for signing multiple messages. In this paper
we design a Multi-message Signature Scheme (MSS) based on an
existing One-Time Signature (OTS) that we refer to as KSN-OTS.
KSN uses SWIFFT, an additive homomorphic lattice-based hash
function family with provable one-wayness property, as the one-
way-function and achieves a short signature. We prove security
of our proposed signature scheme in a new strengthened security
model (multi-target multi-function) of MSS, determine the system
parameters for 512 bit classical (256 bit quantum) security, and
compare parameter sizes of our scheme against XMSS, a widely
studied hash based MSS that has been a candidate for NIST stan-
dardization of post-quantum signature scheme. We give an efficient
implementation of our scheme using Intel SIMD (Single Instruction
Multiple Data) instruction set. For this, we first implement SWIFFT
computation using a SIMD parallelization of Number Theoretic
ˆn + 1), that can
Transform (NTT) of elements of the ring Zp[X]/(X
support different levels of parallelization. We compare efficiency of
this implementation with a comparable (security level) implemen-
tation of XMSS and show its superior performance on a number of
efficiency parameters.
KEYWORDS
OTS, Merkle Tree, NTT, SWIFFT, Cover-Free Family, SIMD.
Sabyasachi Karati and Reihaneh Safavi-Naini
1 INTRODUCTION
Cryptographic primitive Digital signatures [16] form the basis of
establishing trust over the Internet. Today’s commonly used sig-
natures are RSA, DSA and ECDSA [14], and use the hardness of
Integer Factorization and Discrete Logarithm problems as the basis
of security. Shor [37] gave efficient quantum algorithms for both
the problems which make these signature schemes insecure against
quantum computers. The recent call by security agencies [38] has
resulted in efforts by IETF [4], NIST [34] and other organizations
to move to post-quantum algorithms, and this has made develop-
ment of post-quantum secure digital signature of high importance.
∗The work was done while the author was a post-doctoral fellow at the Department of
Computer Science, University of Calgary, Canada.
As the digital signatures form the backbone of trust on the Inter-
net, it is essential to employ quantum-safe signature algorithms
to extend this trust into the future. To provide security against
quantum computers, digital signature schemes may use computa-
tional assumptions such as the hardness of decoding of random
codes [11], or finding short vectors in lattices [17], for which no
efficient quantum algorithm is known today. Such schemes will
remain secure as long as no efficient quantum algorithms for the
underlying problems are found. However, these signatures suffer
from inefficient computation, large signature length and/or public
keys, or unproven security [7].
Quantum-safe digital signature schemes can be based on One-
Way-Functions (OWF) which are known to be the minimum as-
sumption for digital signatures [36], and is expected to provide
long-term security assurance. Hash-based signature schemes use
hash function families as OWF. OTS, introduced by Lamport in
1979 [25], uses a secret and public key-pair to sign a single message.
In Lamport’s construction, the secret key is a set of random binary
strings, called component secret keys, and the public key is obtained
by applying a OWF to each component secret key. A message is as-
sociated with a subset of component keys and signature will be the
set of secret component keys associated with the subset. Security
of the scheme depends on the hardness of inverting the OWF. The
main advantages of OTS are: (i) it can be built using any OWF, and
(ii) the signing and the verification are fast [40]. The sizes of the
keys and the signature, however, can be significantly larger than
today’s digital signatures such as RSA, DSA or ECDSA.
To sign 2h messages, one needs to use a OTS scheme with 2h
different keys. Using a Merkle tree [29], the public keys of the 2h
OTSs can be hashed into a single short public key. A signature now
will include the signature that is generated by a OTS, together with
a list of nodes in the Merkle tree which are required to compute the
OTS public key to the root of the Merkle tree. A signed message
will have an index/address that will indicate the position of OTS
public key in the set of leaves of the Merkle tree, that will be used
for authentication path verification.
In [13], a generic construction of a multi-message signature from
a OTS using Merkle tree is given and the security of MSS is reduced
to the security of the OTS and the second pre-image resistance of the
hash function. The construction, known as SPR-MSS, is particularly
attractive because it relaxes the requirement on the hash function
(second pre-image instead of one-wayness and collision-freeness),
and has been the basis of widely studied construction of multi-
message signature scheme XMSS [9, 19]. XMSS (eXtended Merkle
Signature Scheme) uses W-OTS+ [30] as the one-time signature.
XMSS is a prime candidate of standardization [33] of quantum-safe
secure signature schemes by NIST [34] and IETF [4]. In [21], it was
shown that the security model of MSS must be strengthened to
realistically capture all the hash values that become available to
xxx, yyy, zzz
Sabyasachi Karati and Reihaneh Safavi-Naini
the adversary in a MSS setting and can significantly improve their
success chance of a forgery. The new security notion is captured by
multi-target-multi-function preimage (or second-preimage) prop-
erty in [21].
In [24], Kalach and Safavi-Naini introduced a hash-based OTS
scheme, called as KSN-OTS, that reduces the number of secret key
components of Lamport’s system [25] by using a 1-CFF (Cover-
Free-Family - See Definition 3.1). KSN-OTS has a short signature
because of using a family of homomorphic (additive) hash func-
tions called SWIFFT that allows the component secret keys of a
message be combined. KSN-OTS security proof reduces unforgeabil-
ity of the signature to the collision resistance of SWIFFT. KSN-OTS
has short signature length, and fast signing and verification (Table
1 of [24]). The main computation step in KSN-OTS is the com-
putation of SWIFFT function that needs ˆm multiplications over
R = Zp[X]/(X
ˆn + 1). The fastest method of implementing ring
multiplication uses Number Theoretic Transform (NTT) [26] to
transform the ring elements to vectors of dimension ˆn, and allows
ring multiplication and addition to become component-wise vector
multiplication and addition modulo p.
1.1 Our Contribution
We design K2SN-MSS, a multi-message signature scheme, using an
approach that is inspired by SPR-MSS [13], and prove its security
using the notion of multi-target, multi-function pre-image and
second pre-image resistance. We use SWIFFT as the hash function
for KSN-OTS and also the Merkle tree. This has the benefit of using
a single optimized code for the whole construction. However it
requires addressing a number of challenges, including the need
to introduce a new operation, called Merge, for constructing the
Merkle tree to compensate for the mis-match between parameter
sizes of SWIFFT and the SPR-MSS construction. We prove that use
of this operation does not affect security of the construction.
We implement the signature scheme using an efficient imple-
mentation of SWIFFT which relies on an efficient implementation
of NTT. We use SIMD parallelization to achieve low level instruc-
tional efficiency. SWIFFT and KSN-OTS are highly parallelizable
algorithms that can be further parallelized at higher levels (process
level).
To compare our results with XMSS, we will obtain concrete
security parameters of K2SN-MSS taking into account security
level and parameters of existing implementations of XMSS. Our
results show that K2SN-MSS has 3 times faster key generation,
signature generation and verification. It however has 5% larger
public key and 4 times longer signature.
1.1.1 K2SN-MSS. Our construction uses a modified construction
of SPR-MSS in two ways: (i) the Merge operation is used in each
tree node to combine the hash output of the lower level, and (ii)
different hash keys and random pads are used at each node and so
each node is effectively using a different hash function. We prove
that with these modifications, the resulting MSS is secure in the
multi-function multi-target attack model, and the security of the
scheme reduces to the multi-function multi-target preimage and
second-preimage resistance of the underlying hash function.
1.1.2 K2SN-MSS implementation. K2SN-MSS consists of three al-
gorithms: key generation, signing and verification algorithms. To
generate component secret keys, hash keys and random pads of
the Merkle tree, ChaCha20 pseudo-random function family (PRF)
is used. ChaCha20 is a state-of-the-art PRF which takes 40-bytes
input seed and can generate output of 128 bytes long [6]. We choose
parameters of SWIFFT such that it provides 512-bit classical (256-bit
quantum) security for K2SN-MSS against existential unforgeabil-
ity in chosen message attack (EUF-CMA) (See Section 3.3). We
implement the following code modules
• Key generation algorithm, that uses Chacha20 as a sub-
module, and computes the component secret keys, hash
keys and the random pads. SWIFFT hash function was used
to compute the component public keys, and construct the
Merkle tree.
• We implemented the 1-CFF Algorithm [8] to determine the
subset of component keys that are associated with a message.
This module is called in signing and verification, both.
• The signing and the verification algorithms use ChaCha20,
SWIFFT, and the 1-CFF algorithm above.
The time for key generation, signing and verification is dominated
by the time required for calculating the hash function SWIFFT.
Below we briefly describe our efficient implementation of SWIFFT
using SIMD instructions.
1.1.3 Efficient implementation of SWIFFT using SIMD. Ring multi-
plication over the ring R dominates the computation cost of SWIFFT
function. For the efficient implementation of multiplication in the
ring R, we use NTT. We show that the computation of NTT trans-
formation can be parallelized using SIMD, with different levels of
parallelization that is parametrized by δ, denoting simultaneous
computation of 2δ components of the output vector. The paral-
lelization can be used for δ = 0 (no parallelization) to δ = 6 (full
parallelization for the ring R with ˆn = 64). The parallelization
in [5, 28, 31] is an instance of our general approach with δ = 3.
We show the result of SWIFFT function with δ = 4 that leads to
25% higher speed compared to [31]. Our implementations of NTT
computation can be with, or without, precomputation. The former
approach results in improved speed but the memory requirement
grows double-exponentially O(22δ
) in the value of δ. Thus we
consider precomputation when the required memory is acceptable.
For efficient verification of KSN-OTS (and also K2SN-MSS), we
also implemented gSWIFFT (generalized input SWIFFT) that allows
non-binary input strings. This extension was introduced in [24]
and is used in our work.
1.1.4 Evaluation of K2SN-MSS. We compare performance of K2SN-
MSS with XMSS for 2h messages, each of length 256 bits, and
security parameter n = 512-bit. We use SWIFFT function with
parameters ˆm = 16, ˆn = 64, p = 257 (Sec Section 2.5). As we
will discuss in Section 2.2, these parameters allow us to have a
fair comparison in terms of functionality and security level, with
XMSS. Additionally, they allow us to compare our implementation
of SWIFFT with the existing SWIFFT implementation in [28].
It shows that K2SN-MSS has smaller processing time for all algo-
rithms: key generation, signing and verification. The corresponding
times for K2SN-MSS are 2.76, 2.89 and 2.65 times faster than XMSS.
K2SN-MSS: An Efficient Post-Quantum Signature (Full Version)
xxx, yyy, zzz
On the other hand, the signature length of K2SN-MSS is approxi-
mately 4 times larger than that of XMSS. Public and secret key sizes
of the two schemes are comparable (almost same). Thus the two
schemes will have complementary speed/signature size properties,
while enjoying similar security guarantee.
Table 1: Comparison between XMSS and K2SN-MSS scheme
at 512-bit classical security level
For example, in SHA nϵ = 0. On the other hand, in SWIFFT with
parameters ˆm = 16, ˆn = 64 and p = 257, nϵ = 64.
Definition 2.2. Preimage Resistance (PR) [21]. This is the stan-
dard notion of preimage resistance where we define the success
probability of an adversary B against preimage resistance of a hash
function family Hn as:
Succpr
H (B) = Pr[K
$←− {0, 1}n′
, x
$←− {0, 1}2n,
y = HK (x );
′ $←− B(K, y) : y = HK (x
x
′
)].
Definition 2.3. Second-Preimage Resistance (PR) [21]. This
is the standard notion of second-preimage resistance where we
define the success probability of an adversary B against preimage
resistant of a hash function family Hn as:
Succspr
H (B) = Pr[K
, x
$←− {0, 1}n′
′ $←− B(K, y) : x
$←− {0, 1}2n;
′ (cid:44) x ∧ HK (x ) = HK (x
Definition 2.4. Multi-function, Multi-target Preimage Re-
sistance (MM-PR) [21]. We define the success probability of an
adversary B against multi-function multi-target preimage resistant
of a hash function family Hn which is parameterized by the number
of targets as:
Succmm-pr
(B) = Pr[Ki
$←− {0, 1}2n,
$←− {0, 1}n′
, xi
′
)].
x
H,q′
′;
′
yi = HKi (xi ), 0 < i ⩽ q
(j, x
yj = HKj (x
)].
′
)
$←− B((K1, y1), . . . , (Kq′, yq′ )) :
K2SN-MSS/SWIFFT-16-avx2 XMSS/SHA512/w = 16 [15]
Name
Key Generation (ms)
Signing (ms)
Verification (ms)
Signature Size
Secret Key Size
Public Key Size
526069
4.70
0.34
21331 Bytes
Seed
152 Bytes
1452600
13.57
0.90
5571 Bytes
Seed
144 Bytes
We note that although we implemented KSN-OTS using a single
hash function, but the homomorphic property of SWIFFT is only
required in the verification of KSN signatures and one can use a
different hash function, such as SHA2-512, for the construction of
the Merkle tree. Our choice of SWIFFT for Merkle tree is further
discussed in Section 7.
2 PRELIMINARIES
We use the following notations and function definitions.
t2