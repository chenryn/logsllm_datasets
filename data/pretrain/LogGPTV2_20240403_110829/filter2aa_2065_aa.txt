T
e
c
h
n
i
c
a
l 
A
n
a
l
y
s
i
s
o
f 
A
c
c
e
s
s
T
o
k
e
n 
T
h
e
f
t
a
n
d 
M
a
n
i
p
u
l
a
t
i
o
n
REPORT
Technical Analysis of Access Token Theft and Manipulation
2
REPORT
Table of Contents
3 
 Introduction
5 
 Access Token Creation and User Account Control
7 
 Access Token Manipulation
8 
 Looking at the Code: Technique 1: 
CreateProcessWithTokenW
9 
 Looking at the Code: Technique 2: 
ImpersonateLoggedOnUser
9 
 Looking at the Code: Technique 3: 
CreateProcessAsUser
10 
 Looking at the Code: Technique 4: SetThreadToken 
ResumeThread 
11 
 Other SYSTEM Level Processes
14 
 Coverage
14 
 MITRE ATT&CK
15 
Detecting Access Token Manipulation Attacks
15 
  YARA Rule
16 
Conclusion
16 
About the Author
16 
 Chintan Shah
17 
About McAfee
17 
McAfee ATR
Connect With Us
Author
This report was researched  
and written by:
■ Chintan Shah
Subscribe to receive threat 
information.
 Introduction
Privilege escalation is one of the primary tasks malware 
must perform to be able to access Windows resources 
that require higher privileges, perform privileged actions 
(like executing privileged commands, etc.) on the system, 
and move laterally inside the network to access and 
infect other systems. Access token manipulation attacks 
are massively adopted and executed by malware and 
advanced persistent threats to gain higher privileges on 
a system after the initial infection. These attacks are also 
executed to perform privileged actions on behalf of other 
users, which is known as Access Token Impersonation.
When a user is authenticated to Windows, it creates 
a logon session for the user and returns the user SID 
(Security Identifier) and SID of the groups to which the 
user belongs, which is eventually used to control access 
to various system resources. Local Security Authority 
(LSA) creates the access token for the user. This 
access token is primarily a kernel object that describes 
the security context of the process or the thread, 
as described here. Subsequently, all the processes 
started in the context of the current logged-on user will 
inherit the same access token. An access token has the 
information about the current user SID, SID of the user 
group, privileges enabled for the user, Token Integrity 
level, Token type (Primary or Impersonation token), etc. 
Technical Analysis of Access Token 
Theft and Manipulation 
Technical Analysis of Access Token Theft and Manipulation
3
REPORT
Below is an example of some of the information contained in a user’s access 
token. 
When the user attempts to access the securable object, or makes an 
attempt to perform a privileged task, the access token is checked against 
the respective object’s Discretionary Access Control List (DACL) or System 
Access Control List (SACL). The attributes set for the user’s or a group’s 
SID in the access token determines the level of access for the user or group. 
However, apart from the standard user accounts, Windows typically 
has many other user accounts under which the processes and services 
execute, like SYSTEM account, Administrators account, service accounts, 
etc. If the malware infects the machine and runs under the lower privileged 
administrator account or any other lower privileged account, it will need to 
elevate is privileges further to be able to perform meaningful actions and 
do lateral movement. Hence, to be able to run with the elevated privileges, 
the malware would attempt to change the security context of the calling 
process by using Windows inbuilt functionality or impersonate the security 
context of the process running with higher privileges. By default, a process 
running as a SYSTEM will have the highest level of privileges. 
If malware running with the lower privileges steals the token of the process 
running with the higher privileges or SYSTEM by abusing Windows 
functionality and spawns the process with the stolen access token, then a 
resulting created process will have SYSTEM level privileges as well, helping 
it to advance its further lateral movement activities. However, attacker will 
have to bypass UAC to be able to further execute this attack. 
In the following sections, we will attempt to outline how this task is 
accomplished by malware authors, leading to the escalated privileges 
on the system. We will also discuss how we can detect access token 
manipulation attacks on the endpoint. 
Technical Analysis of Access Token Theft and Manipulation
4
REPORT
 Access Token Creation and User Account Control
As a fundamental aspect of the User Account Control (UAC) in Windows, 
standard users as well as those who are a part of the administrator’s group, 
access system resources in the context of standard users. When a user 
who is a part of the administrator’s group logs on to the system, multiple 
access tokens are granted to the user by the Local Security Authority 
(LSA): a restricted access token or a filtered token which is the stripped-
down SID with limited privileges, and an administrator or elevated access 
token which can be used to perform administrative or privileged tasks. 
Any user-initiated process will inherit the standard access token from 
explorer.exe which starts when the user first authenticates to the system. 
Users belonging to the local administrator group can run all apps and 
perform actions like browsing using the standard access token. If the 
administrative or standard user attempts to access any secured object 
or intends to execute any privileged tasks, they will be prompted for 
consent or credentials respectively, after which they can use the elevated 
token. High level flow of access token creation, as described by Microsoft 
documentation, can be visualized as below: 
Authenticates
SAM database
User part of
administrator group?
Assign the standard
user access token
to explore.exe
Ask for admin credentials
if the user performs
privileged tasks
Assign the standard user
and administrator access
token to explore.exe
Ask for the consent
if the user performs
privileged tasks
YES
NO
The structure of the access token in the kernel is as seen below. It has many 
useful pieces of information like token type, privileges assigned to the 
token, impersonation level, user, and primary group info, etc.
Technical Analysis of Access Token Theft and Manipulation
5
REPORT
As we notice the above token structure in the kernel, some of the 
important and relevant structures are the SEP_TOKEN_PRIVILEGES array 
which describes the privileges assigned to the access token depending 
upon the token elevation type, TOKEN_TYPE which is either primary 
or impersonation token, describing the security context of the user 
associated with the process, and SECURITY_IMPERSONATION_LEVEL 
containing the constants, describing the impersonation level, which is the 
ability of the calling process to impersonate the security context of the 
target process. The definition of SECURITY_IMPERSONATION_LEVEL 
constants can be found in the MS docs. The following figure helps with 
visualizing the populated token structure details in WinDbg, highlighting 
the differences when the process is started as a standard user belonging to 
the administrator group, with and without an elevated token. We can clearly 
notice the difference in the token elevation type, respective privileges 
assigned to the token, and the process integrity level.
Token structure of 
a process started 
as a low privileged 
administrative 
user (No elevation 
prompt)
Token structure of 
a process started 
as the standard 
user belonging 
to administrator 
group, with 
elevation prompt 
eventually using 
elevated token
Technical Analysis of Access Token Theft and Manipulation
6
REPORT
We notice that some of the privileges assigned to the user are enabled by 
default, while other privileges must be explicitly enabled. Malicious code would 
usually try to steal the token of the SYSTEM level process, impersonating 
its security context, eventually leading to the process running with elevated 
privileges. During this process it would also enable the SE_DEBUG_NAME 
(SeDebugPrivilege) which is required to access the memory of the process 
running under another user context. In the following section, we will see how 
this activity is performed by malware using Windows functionality.
 Access Token Manipulation
Malware can use multiple methods to achieve token manipulation resulting 
in privilege escalation:
■ Duplicating the token and assigning it to a running thread: Once the 
required privileges on the calling process are enabled, malware would 
attempt to open the process running with higher privileges, acquire the 
access token of the process, and duplicate it using DuplicateTokenEx. 
It takes one of the SECURITY_IMPERSONATION_LEVEL constants as 
its argument, which would usually be “SecurityImpersonation,” to 
impersonate the security context of another process on the local system, 
and subsequently use SetThreadToken Windows API to assign the 
impersonated token to the current running thread. Consequently, the 
calling thread will resume with the security context of the other process. 
■ Starting a new process with the impersonation token: 
Here again, after using DuplicateTokenEx, malware could use 
CreateProcesswithToken, to launch another process with the duplicated 
token, eventually resulting in the new process running in the security 
context of the specified token. The calling process must have 
SeImpersonatePrivilege which is enabled by default for processes 
running under the context of elevated local administrator.
Below is a visualization of the path followed by malware to execute token 
manipulation attacks. 
OpenProcess—Open the 
process with the specified PID.
DWORD dwDesiredAccess, 
BOOL  bInheritHandle, 
DWORD dwProcessId
OpenProcessToken—Opens 
the process access token for 
specified PID.
 HANDLE  ProcessHandle,
 DWORD   DesiredAccess,
 PHANDLE TokenHandle
ImpersonateLoggedOnuser— 
Lets the calling thread 
impersonate the security 
context of a logged-on user.
 HANDLE  hToken
CreateProcessAsUserW—
New process runs in the security 
context of the user represented 
by the specified token.
HANDLE  hToken, 
LPCSTR   lpApplicationName,
:
CreateProcessWithTokenW—
New process runs in the security 
context of the specified token.
SetTokenInformation—Sets 
various types of information for a 
specified access token. 
HANDLE   TokenHandle,
TOKEN_INFORMATION_CLASS   
TokenInformationClass,
LPVOID   TokenInformation,
DWORD  TokenInformationLength