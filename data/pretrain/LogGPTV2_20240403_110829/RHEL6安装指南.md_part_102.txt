## [⁠]{#ch-partitions-x86.html#s2-partitions-mt-points-x86}A.1.8. 磁盘分区和挂载点 {.title}
:::
[]{#ch-partitions-x86.html#idm139817114027984
.indexterm}[]{#ch-partitions-x86.html#idm139817113785952 .indexterm}
::: para
令许多 Linux 的新用户感到困惑的地方是 Linux
操作系统如何使用和访问各个分区。在 DOS/Windows
中相对较为简单。每一分区有一个\"驱动器字母\"，使用正确的驱动器字母指代相应分区上中文件和目录。
:::
::: para
这与 Linux 处理分区及磁盘贮存问题的方法截然不同。其主要的区别在于，Linux
中的每一个分区都是构成支持一组文件和目录所必需的贮存区的一部分。它是通过*挂载*来实现的，挂载是将分区关联到某一目录的过程。挂载分区使初始化于这个指定目录（通称为*挂载点*）的贮存区能够被使用。
:::
::: para
例如，如果分区 `/dev/hda5/`{.filename} 被挂载在 `/usr/`{.filename}
上，这意味着所有 `/usr/`{.filename} 中的文件和目录在物理意义上位于
`/dev/hda5/`{.filename} 中。因此文件
`/usr/share/doc/FAQ/txt/Linux-FAQ`{.filename} 被保存在
`/dev/hda5/`{.filename}上，而文件 `/etc/gdm/custom.conf`{.filename}
却不是。
:::
::: para
继续以上的示例，`/usr/`{.filename}
之下的一个或多个目录还有可能是其他分区的挂载点。例如，某个分区（假设为，`/dev/hda7/`{.filename}）可以被挂载到
`/usr/local/`{.filename} 下，这意味着 `/usr/local/man/whatis`{.filename}
将位于 `/dev/hda7`{.filename} 上而不是 `/dev/hda5`{.filename} 上。
:::
:::
::: section
::: titlepage
## [⁠]{#ch-partitions-x86.html#s2-partitions-how-many-x86}A.1.9. 多少个分区？ {.title}
:::
[]{#ch-partitions-x86.html#idm139817164171520 .indexterm}
::: para
在准备安装 Red Hat Enterprise Linux
的这一阶段，应该开始考虑新操作系统所要使用的分区数量及大小。\"多少个分区\"一直是
Linux
社区中的一个具有争议性的问题，在没有定论之前，可以说可用的分区布局与争论这一问题的人一样多。
:::
::: para
记住，我们推荐，除非有特殊的原因，应该至少创建下面的分区：`swap`{.filename}、`/boot/`{.filename}以及
`/`{.filename}（root）。
:::
::: para
详情请参考 [第 9.15.5 节
"推荐的分区方案"](#ch-guimode-x86.html#s2-diskpartrecommend-x86){.xref}。
:::
:::
:::
::: footnotes
\
------------------------------------------------------------------------
::: {#ch-partitions-x86.html#ftn.idm139817184256016 .footnote}
::: para
[^\[15\]^](#ch-partitions-x86.html#idm139817184256016){.para}
与图示不同，块实际上[*是*]{.emphasis}大小一致的。此外还请留意，普通磁盘驱动器中含有数以千计的块。不过，在本次讨论中，我们可以忽略这些细微出入。
:::
:::
:::
:::
[]{#ISCSI_disks.html}
::: appendix
::: titlepage
# [⁠]{#ISCSI_disks.html#ISCSI_disks}附录 B. iSCSI 磁盘 {.title}
:::
::: para
*互联网小计算机系统接口*（iSCSI）是允许计算机与 SCSI
需要的存储设备沟通，并响应结转的 TCP/IP 协议。因为 iSCSI 是基于标准 SCSI
协议，所以它沿用 SCSI 的术语。要被发送的 SCSI
总线中的设备（回应这些请求）被称为*对象（target）*，发出请求的设备被称为*发起方（initiator）*。换句话说，iSCSI
磁盘是一个对象，而等同于 SCSI 控制器或者 SCSI 主机总线适配器（HBA）的
iSCSI 软件被称为发起方。本附录只讨论将 Linux 作为 iSCSI 发起方：Linux
是如何使用 iSCSI 磁盘？Linux 又是如何托管 iSCSI 磁盘的?
:::
::: para
Linux 在内核中有一个软件 iSCSI 发起方并组成 SCSI HBA
驱动程序，因此可允许 Linux 设备 iSCSI 磁盘。但是因为 iSCSI
是完全基于网络的协议，iSCSI 发起方支持需要的功能不仅仅是可以通过网络发送
SCSI 数据包。因为 Linux 可以使用 iSCSI 对象，所以 Linux
必须找到网络中的对象并与其连接。在有些情况下，Linux
必须发送验证信息以获得对该对象的访问。Linux
还必须侦测所有网络连接失败，并建立新的连接，包括在必要时重新登录。
:::
::: para
查找、连接和登录操作是在用户空间由 [**iscsiadm**]{.application}
程序处理的，错误信息也是在用户空间由 [**iscsid**]{.application} 处理的。
:::
::: para
[**iscsiadm**]{.application} 和 [**iscsid**]{.application} 都是 Red Hat
Enterprise Linux 中 [**iscsi-initiator-utils**]{.application}
软件包的一部分。
:::
::: section
::: titlepage
# [⁠]{#ISCSI_disks.html#sn-iSCSI_disks_in_anaconda}B.1. [**anaconda**]{.application} 中的 iSCSI 磁盘 {.title}
:::
::: para
[**anaconda**]{.application} 可使用两种方法找到（然后登录到）iSCSI
磁盘：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    当启动 anaconda 时，它会检查系统 BIOS 或者附加引导 ROM是否支持
    *iSCSI 引导固件表*（iBFT），它是可使用 iSCSI 引导的系统 BIOS
    扩展。[**anaconda**]{.application} 会为配置的引导磁盘从 BIOS 中读取
    iSCSI 对象信息并登录到这个对象，使其成为可用安装对象。
    :::
2.  ::: para
    如果在安装过程中选择 [**指定的存储配置**]{.guilabel}
    选项，存储设备选择页面会出现 [**添加高级目标**]{.guilabel}
    按钮。点击这个按钮，就可以添加 iSCSI 目标信息，比如发现的 IP
    地址。[**Anaconda**]{.application} 探测给出的 IP
    地址，并将其记录到所有找到的目标中。有关可以指定 iSCSI
    目标的详情，请参考 [第 9.6.1.1 节
    "高级存储选项"](#ch-guimode-x86.html#s1-advanced-storage-x86){.xref}。
    :::
:::
::: para
当 [**anaconda**]{.application} 使用 [**iscsiadm**]{.application}
查找并登录到 iSCSI 目标时，[**iscsiadm**]{.application}
会将有关这些目标的所有信息自动保存到 iscsiadm iSCSI
数据库中。[**Anaconda**]{.application}
会将这个数据库复制到安装的系统中，并标记所有不用于 `/`{.filename} 的
iSCSI 目标，以便系统可在启动时自动登录到该目标。如果将 `/`{.filename}
放在 iSCSI 目标中，[**initrd**]{.application} 将登录到这个目标，同时
[**anaconda**]{.application}
将不在启动脚本中包含这个目标以避免多次尝试登录到同一目标中。
:::
::: para
如果将 `/`{.filename} 放在 iSCSI 对象中，[**anaconda**]{.application}
会将 [**NetworkManager**]{.application}
设置为忽略任意在安装过程中激活的网络接口。系统启动时
[**initrd**]{.application} 还会配置这些接口。如果
[**NetworkManager**]{.application} 要重新配置这些接口，则系统会丢失其与
`/`{.filename} 的连接。
:::
:::
::: section
::: titlepage
# [⁠]{#ISCSI_disks.html#sn-iSCSI_disks_during_start_up}B.2. 启动过程中的 iSCSI 磁盘 {.title}
:::
::: para
系统启动时会在很多处发生与 iSCSI 关联的事件：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    [**initrd**]{.application} 中的初始化脚本将登录到用于 `/`{.filename}
    的 iSCSI 对象中（如果有的话）。这是使用
    [**iscsistart**]{.application} 程序完成的，它可在不需要运行
    [**iscsid**]{.application} 的情况下完成此操作。
    :::
2.  ::: para
    当挂载根文件系统并运行各种服务初始化脚本时会调用
    [**iscsid**]{.application} 初始化脚本。如果有用于 `/`{.filename} 的
    iSCSI 对象，或者 iSCSI
    数据库中的任意对象被标记为自动登录到该对象，这个脚本接着将启动
    [**iscsid**]{.application}。
    :::
3.  ::: para
    在运行典型网络服务脚本后（或者在启用时应该运行），该 iscsi
    初始化脚本将运行。如果网络是可以访问的，这就会登录到任意在 iSCSI
    数据库中标记为可自动登录的对象中。如果网络不可访问，这个脚本将在没有提示的情况下退出。
    :::
4.  ::: para
    当使用 [**NetworkManager**]{.application}
    访问网络（而不是典型网络服务脚本）时，[**NetworkManager**]{.application}
    将调用 iscsi 初始化脚本。请查看
    `/etc/NetworkManager/dispatcher.d/04-iscsi`{.filename}
    :::
    ::: important
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    因为 [**NetworkManager**]{.application} 是安装在 `/usr`{.filename}
    中，所以如果 `/usr`{.filename} 是通过网络连接的存储，比如 iSCSI
    对象，就无法使用它配置网络访问。
    :::
    :::
    :::
:::
::: para
如果在系统启动时不需要
[**iscsid**]{.application}，就不会自动启动。如果启动
[**iscsiadm**]{.application}，[**iscsiadm**]{.application} 就会依此启动
[**iscsid**]{.application}。
:::
:::
:::
[]{#Disk_Encryption_Guide.html}
::: appendix
::: titlepage
# [⁠]{#Disk_Encryption_Guide.html#Disk_Encryption_Guide}附录 C. 磁盘加密 {.title}
:::
::: section
::: titlepage
# [⁠]{#Disk_Encryption_Guide.html#idm139817192386256}C.1. 什么是块设备加密？ {.title}
:::
::: para
块设备加密通过加密保护块设备中的数据。要访问设备中加密的内容，用户必须提供密码短语或者密钥供验证。这可提供现有操作系统安全性机制以外的安全性，这样可在从系统中物理删除该设备时仍可保护其内容。
:::
:::
::: section
::: titlepage
# [⁠]{#Disk_Encryption_Guide.html#idm139817197020384}C.2. 使用 dm-crypt/LUKS 加密块设备 {.title}
:::
::: para
*Linux
通用密钥设置*（LUKS）是关于块设备加密的具体说明。它为数据建立了一个非磁盘格式以及密码短语/密钥管理策略。
:::
::: para
LUKS 通过 `dm-crypt`{.command}
模块使用内核设备映射器子系统。这个协议提供处理设备数据加密和解密底层映射。用户级别操作，比如生成和访问加密的设备，是通过使用
`cryptsetup`{.command} 程序完成的。
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817126901952}C.2.1. LUKS 概要 {.title}
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    LUKS 做什么：
    ::: itemizedlist
    -   ::: para
        LUKS 加密整个块设备
        ::: itemizedlist
        -   ::: para
            LUKS 因此非常适合保护移动设备的内容，比如：
            ::: itemizedlist
            -   ::: para
                可移动存储介质
                :::
            -   ::: para
                笔记本磁盘驱动器
                :::
            :::
            :::
        :::
        :::
    -   ::: para
        加密块设备的基本内容是随机的。
        ::: itemizedlist
        -   ::: para
            这可使其用于加密 `swap`{.command} 设备。
            :::
        -   ::: para
            这还对使用特殊格式块设备进行数据存储的某些数据库有用。
            :::
        :::
        :::
    -   ::: para
        LUKS 使用现有设备映射器内核子系统。
        ::: itemizedlist
        -   ::: para
            这与 LVM 使用的子系统相同，因此经过测试。
            :::
        :::
        :::
    -   ::: para
        LUKS 提供密码短语增强。
        ::: itemizedlist
        -   ::: para
            这可以防止字典攻击。
            :::
        :::
        :::
    -   ::: para
        LUKS 设备包含多密钥插槽。
        ::: itemizedlist
        -   ::: para
            这可允许用户添加备份密钥/密码短语。
            :::
        :::
        :::
    :::
    :::
-   ::: para
    LUKS [*不能*]{.emphasis}做什么：
    ::: itemizedlist
    -   ::: para
        LUKS 不适用于需要很多（超过 8
        个）用户对同一设备有不同访问密钥的程序。
        :::
    -   ::: para
        LUKS 不适用于需要文件级别加密的程序。
        :::
    :::
    :::
:::
::: para
有关 LUKS
详情可参考其项目网站，地址为：。
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817167922704}C.2.2. 安装后如何访问加密的设备？(系统启动) {.title}
:::