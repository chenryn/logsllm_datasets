for websites supplying large content.
Overhead on the service provider. We evaluate the
overhead for the SP by measuring the memory space that
needs to be available, as well as the time required to per-
form detection, according to the number of detection rules
and the size of network connections.
Detection Time. The only signiﬁcant overhead for using our
solution compared to BlindBox is the detection time on the
DPI appliance. Using a ruleset of 3 thousand rules, each
rule including in average 3 trapdoor tokens (nearly 10 thou-
sand tokens in total, which is the same as the experimen-
tal setup used to evaluate the BlindBox solution in [25]),
it takes almost 74 seconds for the SP to apply DPI over
an encrypted packet. Compared to the 97s for connection
setup using BlindBox, our solution still reduces by 25% the
overall overhead (including both setup and detection time).
However, it still does not scale well for realtime intrusion
detection in large networks. This is mainly because of the
Test procedure for our DSE protocol. It tests, using a cryp-
tographic operation, each trapdoor in the detection ruleset
against each ciphertext in the network traﬃc. It is thus dif-
ferent from the Detect procedure implemented by BlindBox,
which searches for perfect matching between the encrypted
rules and the encrypted tokens.
570Role
Sender/
Receiver
Service
provider
(Detection time)
Service
provider
(RAM usage)
Description
SSL inspection BlindBox Our solution
Setup (1 keyword)
Setup (3K Rules)
Encrypt (128 bits)
Encrypt (1500 bytes)
1 Rule, 1 Token
1 Rule, 1 Packet
3K Rules, 1 Token
3K Rules, 1 Packet
1 Rule, 1 Connection
3K Rules, 1 Connection
1 Rule, 100 Connections
3K Rules, 100 Connections
73ms
73ms
13ns
3µs
Not applicable
Not applicable
Not applicable
Not applicable
Not applicable
Not applicable
Not applicable
Not applicable
588ms
97s
69ns
90µs
20ns
5µs
137ns
33µs
1.75MB
5.12GB
175MB
512GB
73ms
73ms
729µs
27ms
691µs
41.3ms
700ms
74s
0.2KB
0.58MB
0.2KB
0.58MB
Figure 5: Performance of our solution during connection setup and detection, and benchmark with the
standard SSL inspection technique and the BlindBox solution
Website
CNN
Facebook
Twitter
BBC
BoA
Size
131KB
74KB
284KB
196KB
74KB
HTTPS BlindBox Our solution
0.073
0.073
0.073
0.073
0.073
97.008
97.004
97.017
97.011
97.004
2.373
1.073
5.073
3.573
1.073
Figure 6: Loadtime (in seconds) for some popular
websites
However, by removing the overhead for connection setup
on the sender, and partially shifting this overhead to the
detection procedure on the SP side, our solution provides
a signiﬁcant advantage compared to BlindBox. First, the
SP may use additional heuristics, such as domain or IP rep-
utation, in order to identify possibly suspicious ﬂows, and
subsequently to inspect only encrypted connections towards
risky destinations. Moreover, the SP may use load balanc-
ing to distribute computation over multiple servers, which
may not be feasible for the sender. Our solution is also
well suited for oﬄine usage, during investigation and post-
intrusion forensics. Although this functionality may be at
least theoretically supported using BlindBox, the SP would
need to store and manage the garbled circuits generated for
each single HTTPS connection. This adds a signiﬁcant over-
head compared to the contribution in this paper. Our so-
lution enables the SE to generate the trapdoors only once
for every new detection rule. These trapdoors are further
applied by the SP to all encrypted connections that are in-
spected by the DPI appliance. Finally, our solution is better
suited than BlindBox for investigation and post-intrusion
forensics also because it allows the SP to retroactively test
newly supplied detection rules by the SE. These rules may
capture zero-day attacks that were yet unknown at the time
when the encrypted connection had occurred. The SE can
indeed encrypt these new rules using its trapdoor key and
deliver them to the SP. This functionality is not supported
using BlindBox because it requires the sender to prepare a
garbled circuit and to send it to the SP, which indeed may
not be feasible in the context of post-intrusion forensics.
Memory usage. While the detection time for the SP is much
longer using our DSE protocol than for BlindBox, our ap-
proach drastically decreases the memory space that needs
to be available on the DPI appliance. This is mainly be-
cause of replacing the garbled circuits used in BlindBox by
generic trapdoors that are derived from the malicious key-
words in the detection rules.
In fact the garbled circuits
used in BlindBox are prepared by the sender for every sin-
gle HTTPS connection. Each garbled circuit has a size of
599KB, and needs be stored by the SP during the entire
duration of this connection. Therefore, the memory space
required on the DPI appliance will grow linearly with respect
to both the number of rules and the number of concurrent
HTTPS connections. As shown in the table of ﬁgure 5, the
memory space required to store garbled circuits for 100 con-
current HTTPS connections, and for 3,000 detection rules,
is evaluated to 512GB RAM.
However, using our solution, the SE generates a trapdoor
only once for every single detection keyword. The trap-
doors are further applied by the SP for all the encrypted
connections that are inspected by the DPI appliance. Each
trapdoor has a unique size of 508 bits, which in turn does
not depend on the size of the encryption key. The required
memory space does no longer depend on the number of con-
current connections, but only on the number of detection
rules, the same as for all DPI appliances used for clear-text
intrusion detection. In case of 100 concurrent HTTPS con-
nections, and for 3,000 detection rules, our BlindIDS solu-
tion requires only 0.58MB RAM.
6. CONCLUSION
In this paper, we presented BlindIDS, a new system that
operates Deep Packet Inspection (DPI) directly over en-
crypted traﬃc. We formally introduced our solution based
on a security model that represents an ideal intrusion detec-
tion system over encrypted traﬃc. Then we provided appro-
priate security proofs in order to validate the main features
of our system. To the best of our knowledge, BlindIDS is
the ﬁrst system that bridges the gap between network secu-
rity and privacy, while also preserving the delicate balance
in the security market ecosystem.
It enables security edi-
tors and service providers to securely collaborate in order
to provide value added security services that also preserve
the conﬁdentiality of end users’ data. Our solution is bene-
ﬁcial for everyone: users will preserve their privacy, security
editors will be able to protect their distinctive attack signa-
tures, and service providers will be able to deliver intrusion
detection services without aﬀecting the privacy of end user
traﬃc. We made a prototype implementation of BlindIDS,
and we performed extensive evaluation in order to evaluate
the functionality and performance of this solution. Our ex-
periments show that, compared to similar state of the art
solutions such as [25], BlindIDS enhances by several orders
of magnitude both the connection setup time and the re-
sources required to perform DPI on the security appliance.
5717. REFERENCES
[1] Malware domain list.
https://www.malwaredomainlist.com/mdl.php, 2016.
[2] Snort. https://www.snort.org/downloads/, 2016.
[3] Url blacklist.
http://www.urlblacklist.com/?sec=home, 2016.
[4] Yara rules repository.
https://github.com/Yara-Rules/rules, 2016.
[5] M. and Markets. Threat intelligence security market
by solution - global forecast to 2020. In
MarketsandMarkets report TC 3591, 2015.
[6] H. J. Asghar, L. Melis, C. Soldani, E. D. Cristofaro,
M. A. Kaafar, and L. Mathy. Splitbox: Toward
eﬃcient private network function virtualization. In
workshop on Hot topics in Middleboxes and Network
Function Virtualization, pages 7–13, August 2016.
[7] M. Augustin and A. Balaz. Intrusion detection with
early recognition of encrypted application. In IEEE
Conference on Intelligent Engineering Systems
(INES), June 2011.
[8] M. Barati, A. Abdullah, R. Mahmod, N. Mustapha,
and N. I. Udzir. Feature selection for ids in encrypted
traﬃc using genetic algorithm. In International
Conference on Computing and Informatics (ICCI),
pages 279–285, 2013.
[9] M. Barati, A. Abdullah, N. I. Udzir, M. Behzadi,
R. Mahmod, and N. Mustapha. Intrusion detection
system in secure shell traﬃc in cloud environment. In
Journal of Computer Science, volume 10, 2014.
W.-T. Chen. Privacy-preserving deep packet ﬁltering
over encrypted traﬃc in software-deﬁned networks. In
IEEE Conference on Communications (ICC), 2016.
[19] R. McMillan and K. Pratap. Market guide for security
threat intelligence services. In Gartner report
(G00259127), 2014.
[20] L. Melis, H. J. Asghar, E. D. Cristofaro, and M. A.
Kaafar. Private processing of outsourced network
functions: Feasibility and constructions. In ACM
International Workshop on Security in Software
Deﬁned Networks & Network Function Virtualization,
pages 39–44, March 2016.
[21] S. MITSUNARI. A fast implementation of the optimal
ate pairing over bn curve on intel haswell processor.
Cryptology ePrint Archive, Report 2013/362, 2013.
http://eprint.iacr.org/2013/362.
[22] B. Mukherjee, L. T. Heberlein, and K. N. Levitt.
Network intrusion detection. In IEEE Network,
volume 8, pages 26–41, 1994.
[23] P. Paganini. French government anssi responsible of a
mitm against google ssl-tls. In Security Aﬀairs
magazine, 2013.
[24] Sandvine. Encrypted internet traﬃc: A global internet
phenomena spotlight. In Sandvine report on Global
Internet Phenomena, 2016.
[25] J. Sherry, C. Lan, R. A. Popa, and S. Ratnasamy.
Blindbox: Deep packet inspection over encrypted
traﬃc. In ACM Conference on Special Interest Group
on Data Communication (SIGCOMM), 2015.
[10] M. Bellare, M. Fischlin, A. O’Neill, and T. Ristenpart.
[26] T. Skybakmoen, J. Pathak, B. Venkateswaran,
Deterministic encryption: Deﬁnitional equivalences
and constructions without random oracles. In
Advances in Cryptology - CRYPTO 2008, volume 5157
of Lecture Notes in Computer Science, pages 360–378,
2008.
[11] D. Boneh, X. Boyen, and E. Goh. Hierarchical identity
based encryption with constant size ciphertext. In
Advances in Cryptology - EUROCRYPT 2005, 24th
Annual International Conference on the Theory and
Applications of Cryptographic Techniques, Aarhus,
Denmark, May 22-26, 2005, Proceedings, pages
440–456, 2005.
[12] T. Fuhr and P. Paillier. Decryptable searchable
encryption. In Provable Security, volume 4784, pages
228–236, 2007.
[13] R. Holland, S. Balaouras, and J. Blackborow. The
state of the cyberthreat intelligence market. In
Forrester report, 2015.
[14] L.-S. Huang, A. Rice, E. Ellingsen, and C. Jackson.
Analyzing forged ssl certiﬁcates in the wild. In IEEE
Symposium on Security and Privacy, 2014.
[15] J. Jarmoc. Ssl interception proxies and transitive
trust. In Black Hat Europe, 2012.
[16] T. Kovanen, G. David, and T. Hamalainen. Survey:
Intrusion detection systems in encrypted traﬃc. In
Internet of Things, Smart Spaces, and Next
Generation Networks and Systems, volume 9870 of
LNCS, pages 281–293, 2016.
[17] C. Lan, J. Sherry, R. A. Popa, S. Ratnasamy, and
Z. Liu. Embark: Securely outsourcing middleboxes to
the cloud. In Usenix NSDI, 2016.
[18] Y.-H. Lin, S.-H. Shen, M.-H. Yang, D.-N. Yang, and
M. Spanbauer, and B. Walder. Breach detection
systems comparative report. In NSS Labs Security
Value Map, 2016.
[27] B. Stricker. Uncovering hidden threats within
encrypted traﬃc: A study of north america & emea.
In A10 and Ponemon institute report, 2016.
[28] G. Vigna. The uc santa barbara ictf competition.
https://ictf.cs.ucsb.edu/#/, 2016.
[29] A. Yamada, Y. Miyake, and K. Takemori. Intrusion
detection for encrypted web accesses. In Advanced
Information Networking and Applications Workshops,