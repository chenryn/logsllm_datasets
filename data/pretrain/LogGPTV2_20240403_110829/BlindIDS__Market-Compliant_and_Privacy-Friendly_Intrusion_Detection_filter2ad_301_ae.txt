### Overhead on the Service Provider

To evaluate the overhead for the service provider (SP), we measure the memory space required and the time needed to perform detection. This is based on the number of detection rules and the size of network connections.

#### Detection Time

Compared to BlindBox, the most significant overhead in our solution is the detection time on the Deep Packet Inspection (DPI) appliance. Using a ruleset of 3,000 rules, with an average of 3 trapdoor tokens per rule (totaling nearly 10,000 tokens, consistent with the experimental setup used in [25]), it takes approximately 74 seconds for the SP to apply DPI to an encrypted packet. This is a 25% reduction compared to the 97 seconds required for connection setup using BlindBox. However, this still does not scale well for real-time intrusion detection in large networks. The primary reason for this is the test procedure for our DSE protocol, which involves testing each trapdoor in the detection ruleset against each ciphertext in the network traffic using cryptographic operations. This differs from the Detect procedure in BlindBox, which searches for perfect matches between encrypted rules and encrypted tokens.

### Performance Comparison

| Role | Description | SSL Inspection | BlindBox | Our Solution |
|------|-------------|----------------|----------|--------------|
| **Sender/Receiver** | Setup (1 keyword) | 73ms | 73ms | 73ms |
| **Service Provider (Detection Time)** | Setup (3K Rules) | 588ms | 97s | 74s |
| **Service Provider (RAM Usage)** | Encrypt (128 bits) | 13ns | 69ns | 729µs |
| **Service Provider (RAM Usage)** | Encrypt (1500 bytes) | 3µs | 90µs | 27ms |
| **Service Provider (RAM Usage)** | 1 Rule, 1 Token | 20ns | 137ns | 691µs |
| **Service Provider (RAM Usage)** | 1 Rule, 1 Packet | 5µs | 33µs | 41.3ms |
| **Service Provider (RAM Usage)** | 3K Rules, 1 Token | 1.75MB | 5.12GB | 0.2KB |
| **Service Provider (RAM Usage)** | 3K Rules, 1 Packet | 512GB | 0.58MB | 0.58MB |
| **Service Provider (RAM Usage)** | 1 Rule, 1 Connection | 73ms | 73ms | 729µs |
| **Service Provider (RAM Usage)** | 3K Rules, 1 Connection | 73ms | 73ms | 27ms |
| **Service Provider (RAM Usage)** | 1 Rule, 100 Connections | 700ms | 74s | 41.3ms |
| **Service Provider (RAM Usage)** | 3K Rules, 100 Connections | 74s | 74s | 0.58MB |

### Load Time for Popular Websites

| Website | Size | HTTPS | BlindBox | Our Solution |
|---------|------|-------|----------|--------------|
| CNN     | 131KB | 0.073s | 97.008s | 2.373s |
| Facebook | 74KB | 0.073s | 97.004s | 1.073s |
| Twitter | 284KB | 0.073s | 97.017s | 5.073s |
| BBC     | 196KB | 0.073s | 97.011s | 3.573s |
| BoA     | 74KB | 0.073s | 97.004s | 1.073s |

### Advantages of Our Solution

By removing the overhead for connection setup on the sender and partially shifting this overhead to the detection procedure on the SP side, our solution offers several advantages over BlindBox:

1. **Heuristics and Risky Destinations**: The SP can use additional heuristics, such as domain or IP reputation, to identify potentially suspicious flows and inspect only encrypted connections towards risky destinations.
2. **Load Balancing**: The SP can distribute computation across multiple servers, which may not be feasible for the sender.
3. **Offline Usage**: Our solution is well-suited for offline usage during investigations and post-intrusion forensics. Although BlindBox theoretically supports this, it requires storing and managing garbled circuits for each HTTPS connection, adding significant overhead.
4. **Trapdoor Generation**: The Security Editor (SE) can generate trapdoors once for each new detection rule, which are then applied by the SP to all inspected encrypted connections. This allows the SP to retroactively test newly supplied detection rules, capturing zero-day attacks that were unknown at the time of the encrypted connection.

### Memory Usage

While the detection time for the SP is longer with our DSE protocol than with BlindBox, our approach significantly reduces the required memory space on the DPI appliance. This is because we replace the garbled circuits used in BlindBox with generic trapdoors derived from malicious keywords in the detection rules. Each trapdoor has a fixed size of 508 bits, independent of the encryption key size. Therefore, the required memory space no longer depends on the number of concurrent connections but only on the number of detection rules. For 100 concurrent HTTPS connections and 3,000 detection rules, our BlindIDS solution requires only 0.58MB of RAM, compared to 512GB for BlindBox.

### Conclusion

In this paper, we presented BlindIDS, a system that performs Deep Packet Inspection (DPI) directly over encrypted traffic. We introduced our solution based on a security model representing an ideal intrusion detection system for encrypted traffic and provided appropriate security proofs. To our knowledge, BlindIDS is the first system to bridge the gap between network security and privacy while preserving the balance in the security market ecosystem. It enables secure collaboration between security editors and service providers, ensuring the confidentiality of end users' data. Our experiments show that, compared to state-of-the-art solutions like [25], BlindIDS significantly enhances both the connection setup time and the resources required for DPI on the security appliance.

### References

[1] Malware domain list. https://www.malwaredomainlist.com/mdl.php, 2016.
[2] Snort. https://www.snort.org/downloads/, 2016.
[3] URL blacklist. http://www.urlblacklist.com/?sec=home, 2016.
[4] Yara rules repository. https://github.com/Yara-Rules/rules, 2016.
[5] M. and Markets. Threat intelligence security market by solution - global forecast to 2020. In MarketsandMarkets report TC 3591, 2015.
[6] H. J. Asghar, L. Melis, C. Soldani, E. D. Cristofaro, M. A. Kaafar, and L. Mathy. Splitbox: Toward efficient private network function virtualization. In workshop on Hot topics in Middleboxes and Network Function Virtualization, pages 7–13, August 2016.
[7] M. Augustin and A. Balaz. Intrusion detection with early recognition of encrypted application. In IEEE Conference on Intelligent Engineering Systems (INES), June 2011.
[8] M. Barati, A. Abdullah, R. Mahmod, N. Mustapha, and N. I. Udzir. Feature selection for IDS in encrypted traffic using genetic algorithm. In International Conference on Computing and Informatics (ICCI), pages 279–285, 2013.
[9] M. Barati, A. Abdullah, N. I. Udzir, M. Behzadi, R. Mahmod, and N. Mustapha. Intrusion detection system in secure shell traffic in cloud environment. In Journal of Computer Science, volume 10, 2014.
[10] W.-T. Chen. Privacy-preserving deep packet filtering over encrypted traffic in software-defined networks. In IEEE Conference on Communications (ICC), 2016.
[11] R. McMillan and K. Pratap. Market guide for security threat intelligence services. In Gartner report (G00259127), 2014.
[12] L. Melis, H. J. Asghar, E. D. Cristofaro, and M. A. Kaafar. Private processing of outsourced network functions: Feasibility and constructions. In ACM International Workshop on Security in Software Defined Networks & Network Function Virtualization, pages 39–44, March 2016.
[13] S. MITSUNARI. A fast implementation of the optimal ate pairing over BN curve on Intel Haswell processor. Cryptology ePrint Archive, Report 2013/362, 2013. http://eprint.iacr.org/2013/362.
[14] B. Mukherjee, L. T. Heberlein, and K. N. Levitt. Network intrusion detection. In IEEE Network, volume 8, pages 26–41, 1994.
[15] P. Paganini. French government ANSSI responsible of a MITM against Google SSL-TLS. In Security Affairs magazine, 2013.
[16] Sandvine. Encrypted internet traffic: A global internet phenomena spotlight. In Sandvine report on Global Internet Phenomena, 2016.
[17] J. Sherry, C. Lan, R. A. Popa, and S. Ratnasamy. Blindbox: Deep packet inspection over encrypted traffic. In ACM Conference on Special Interest Group on Data Communication (SIGCOMM), 2015.
[18] M. Bellare, M. Fischlin, A. O’Neill, and T. Ristenpart. Deterministic encryption: Definitional equivalences and constructions without random oracles. In Advances in Cryptology - CRYPTO 2008, volume 5157 of Lecture Notes in Computer Science, pages 360–378, 2008.
[19] D. Boneh, X. Boyen, and E. Goh. Hierarchical identity-based encryption with constant size ciphertext. In Advances in Cryptology - EUROCRYPT 2005, 24th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Aarhus, Denmark, May 22-26, 2005, Proceedings, pages 440–456, 2005.
[20] T. Fuhr and P. Paillier. Decryptable searchable encryption. In Provable Security, volume 4784, pages 228–236, 2007.
[21] R. Holland, S. Balaouras, and J. Blackborow. The state of the cyberthreat intelligence market. In Forrester report, 2015.
[22] L.-S. Huang, A. Rice, E. Ellingsen, and C. Jackson. Analyzing forged SSL certificates in the wild. In IEEE Symposium on Security and Privacy, 2014.
[23] J. Jarmoc. SSL interception proxies and transitive trust. In Black Hat Europe, 2012.
[24] T. Kovanen, G. David, and T. Hamalainen. Survey: Intrusion detection systems in encrypted traffic. In Internet of Things, Smart Spaces, and Next Generation Networks and Systems, volume 9870 of LNCS, pages 281–293, 2016.
[25] C. Lan, J. Sherry, R. A. Popa, S. Ratnasamy, and Z. Liu. Embark: Securely outsourcing middleboxes to the cloud. In Usenix NSDI, 2016.
[26] Y.-H. Lin, S.-H. Shen, M.-H. Yang, D.-N. Yang, and M. Spanbauer, and B. Walder. Breach detection systems comparative report. In NSS Labs Security Value Map, 2016.
[27] B. Stricker. Uncovering hidden threats within encrypted traffic: A study of North America & EMEA. In A10 and Ponemon institute report, 2016.
[28] G. Vigna. The UC Santa Barbara ICTF competition. https://ictf.cs.ucsb.edu/#/, 2016.
[29] A. Yamada, Y. Miyake, and K. Takemori. Intrusion detection for encrypted web accesses. In Advanced Information Networking and Applications Workshops,