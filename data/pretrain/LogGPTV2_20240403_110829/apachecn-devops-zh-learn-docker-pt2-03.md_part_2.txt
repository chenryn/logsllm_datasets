```
以下是带有作者姓名和电子邮件地址的`MAINTAINER`说明示例:
```
MAINTAINER Dr. Peter  
```
### COPY 指令
`COPY`指令使您能够将文件从 Docker 主机复制到新映像的文件系统中。以下是`COPY`指令的语法:
```
COPY  ...  
```
这里解释了前面的代码术语:
*   ``:这是源目录，构建上下文中的文件，或者调用`docker build`子命令的目录。
*   `...`:表示可以直接指定多个源文件，也可以用通配符指定多个源文件。
*   ``:这是源文件或目录将被复制到的新映像的目标路径。如果指定了多个文件，那么目标路径必须是一个目录，并且必须以斜杠(`/`)结尾。
建议使用目标目录或文件的绝对路径。在没有绝对路径的情况下，`COPY`指令将假设目标路径将从根(`/`)开始。`COPY`指令对于创建新目录和覆盖新创建映像中的文件系统足够强大。
在下面的示例中，我们将使用`COPY`指令，将`html`目录从源构建上下文复制到位于映像文件系统中的`/var/www/html`，如下所示:
```
COPY html /var/www/html 
```
下面是将从源构建上下文复制到位于映像文件系统中的`/etc/httpd/conf/`的多个文件(`httpd.conf`和`magic`)的另一个示例:
```
COPY httpd.conf magic /etc/httpd/conf/ 
```
### 加法指令
`ADD`指令类似于`COPY`指令。然而，除了`COPY`指令支持的功能之外，`ADD`指令还可以处理 TAR 文件和远程 URL。我们可以将`ADD`说明注释为`COPY`类固醇。
以下是`ADD`指令的语法:
```
ADD  ...  
```
`ADD`指令的参数与`COPY`指令的参数非常相似，如下所示:
*   ``:这是源目录，或者是构建上下文中的文件，或者是将调用`docker build`子命令的目录。但是，值得注意的区别是，源可以是存储在构建上下文中的 TAR 文件，也可以是远程 URL。
*   `...`:表示可以直接指定多个源文件，也可以使用通配符指定多个源文件。
*   ``:这是源文件或目录将要复制到的新映像的目标路径。
下面是一个示例，演示将多个源文件复制到目标映像文件系统中的不同目标目录的过程。在本例中，我们在源代码构建上下文中获取了一个带有`http`守护程序配置文件的 TAR 文件(`web-page-config.tar`)，并且网页的文件存储在适当的目录结构中，如下所示:
```
$ tar tf web-page-config.tar
etc/httpd/conf/httpd.conf
var/www/html/index.html
var/www/html/aboutus.html
var/www/htimg/welcome.gif
var/www/htimg/banner.gif  
```
`Dockerfile`内容的下一行有`ADD`指令，用于将 TAR 文件(`web-page-config.tar`)复制到目标映像，并从目标映像的根目录(`/`)提取 TAR 文件，如下图所示:
```
ADD web-page-config.tar /  
```
因此，`ADD`指令的 TAR 选项可用于将多个文件复制到目标映像。
### ENV 指令
`ENV`指令在新映像中设置一个环境变量。环境变量是键值对，任何脚本或应用都可以访问它。Linux 应用在启动配置中大量使用环境变量。
以下一行构成了`ENV`指令的语法:
```
ENV   
```
这里，代码术语表示以下内容:
*   ``:这是环境变量
*   ``:这是要为环境变量设置的值
以下几行给出了`ENV`指令的两个例子，其中，在第一行中，`DEBUG_LVL`被设置为`3`，在第二行中，`APACHE_LOG_DIR`被设置为`/var/log/apache`:
```
ENV DEBUG_LVL 3 
ENV APACHE_LOG_DIR /var/log/apache 
```
### ARG 指令
`ARG`指令允许您定义可以在 Docker 映像构建期间传递的变量。`Docker build`子命令支持`--build-arg`标志向使用`ARG`指令定义的变量传递一个值。如果您指定了一个没有在您的`Dockerfile`中定义的构建参数，构建将会失败。换句话说，构建参数变量必须在`Dockerfile`中定义，以便在 Docker 映像构建期间传递。
`ARG`指令的语法如下:
```
ARG [=] 
```
这里，代码术语的含义如下:
*   ``:这是构建参数变量
*   ``:这是您可以选择指定给构建参数变量的默认值
这里有一个`ARG`指令的例子:
```
ARG usr 
ARG uid=1000 
```
以下是`docker build`子命令的`--build-arg`标志示例:
```
$ docker build --build-arg usr=app --build-arg uid=100 . 
```
### 环境变量
使用`ENV`或`ARG`指令声明的环境变量可以在`ADD`、`COPY`、`ENV`、`EXPOSE`、`LABEL`、`USER`、`WORKDIR`、`VOLUME`、`STOPSIGNAL`和`ONBUILD`指令中使用。
以下是环境变量用法的示例:
```
ARG BUILD_VERSION 
LABEL com.example.app.build_version=${BUILD_VERSION}  
```
### 用户指令
`USER`指令在新映像中设置启动用户标识或用户名。默认情况下，容器将以`root`作为用户标识或`UID`启动。本质上，`USER`指令会将`root`的默认用户标识修改为本指令中指定的用户标识。
`USER`指令的语法如下:
```
USER | 
```
`USER`指令接受``或``作为其论据:
*   ``:这是一个数字用户标识
*   ``:这是一个有效的用户名
下面是一个将启动时的默认用户 ID 设置为`73`的例子。这里，`73`是用户的数字标识:
```
USER 73 
```
虽然建议您有一个有效的用户标识来匹配`/etc/passwd`文件，但是用户标识可以包含任何随机的数值。但是，用户名必须与`/etc/passwd`文件中的有效用户名匹配，否则，`docker run`子命令将失败，并显示以下错误消息:
```
finalize namespace setup user get supplementary groups Unable to find user
```
### 工作目录指令
`WORKDIR`指令将当前工作目录从`/`变为该指令指定的路径。随后的指令，如`RUN`、`CMD`和`ENTRYPOINT`也将在`WORKDIR`指令设置的目录下工作。
下面一行给出了`WORKDIR`指令的适当语法:
```
WORKDIR  
```
这里，``是工作目录要设置的路径。路径可以是绝对的，也可以是相对的。在相对路径的情况下，它将相对于由`WORKDIR`指令设置的先前路径。如果在目标映像文件系统中找不到指定的目录，则将创建该目录。
下面一行是`Dockerfile`中`WORKDIR`指令的一个明显例子:
```
WORKDIR /var/log 
```
### VOLUME 指令
`VOLUME`指令在映像文件系统中创建一个目录，以后可以用来从 Docker 主机或其他容器装载卷。
`VOLUME`指令有两种语法，如下所示:
*   第一种类型是 exec 或 JSON 数组(所有值必须在双引号(`"`)内):
```
      VOLUME [""] 
```
*   第二种类型是外壳，如下所示:
```
      VOLUME  
```
在前几行中，``是必须在新映像中创建的挂载点。