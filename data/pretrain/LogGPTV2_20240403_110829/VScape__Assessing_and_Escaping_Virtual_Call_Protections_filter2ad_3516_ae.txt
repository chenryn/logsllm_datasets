in the same way. So, we deduplicate the virtual call sites,
and count the number of unique virtual call sites (UVC) in
column 7.
Then, given a virtual call site, it expects a virtual function
declared in a base interface class, and any overridden virtual
function implemented in a derivation of the base class is al-
lowed. However, there are two special cases in which only
one virtual function exists: (1) the base interface class does
not have any derivations, and (2) all derivation classes do not
override the implementation in the base class. Therefore, we
remove UVCs that satisfy the ﬁrst condition and list the re-
mained count in column 8, and remove UVCs that satisfy
the second condition and list the remained count in column
9. These UVCs form the basis of COOPLUS.
For instance, in the application Chromium, there are over
61 thousands of UVCs, but 44% (=1-56%) of them have
only one compatible class (i.e., no derivations), another 44%
(=56%-12%) of them have multiple compatible classes but
none of them override the target virtual function expected
at the UVC, and only 12% of them actually have multiple
compatible functions. In other words, about 88% (=1-12%)
of these UVCs only have one candidate virtual function to
invoke in the whole application, and therefore could be op-
timized with the devirtualization technique [56]. It also im-
plies that, developers tend to use polymorphism, even if no
derivations are implemented in the current version of code.
5.2.2 COOPLUS Exploit Primitives
For a UVC, if it has multiple compatible functions, then it
is a candidate that COOPLUS could utilize to bypass the de-
ployed defense. Column 10-19 in Table 1 shows the detail
statistics of candidate exploit primitives in each application.
For UVCs with multiple compatible virtual functions, the
average number of compatible functions ranges from 2.6
(aGrum) to 59 (ImageMagick), as shown in the fourth col-
umn. Further, the maximum number of compatible virtual
functions ranges from 6 (aGrum) to 3323 (oce), as shown in
column 12. This number roughly implies the complexity of
the class inheritance hierarchy (CIH) tree of the application.
Further, since COOPLUS only works for virtual functions
that could cause out-of-bound (OOB) access on objects of
compatible classes, we also count the number of UVCs that
have at least one pair of compatible functions with OOB ac-
cess operations, and list the data in column 13. For these
ﬁltered UVCs, we also count their numbers of compatible
virtual functions in column 14, 15, 16, 17 and 18. From the
median and the standard deviation, we can see the number of
compatible virtual functions are not spread evenly. Mostly,
we can only ﬁnd a pair of them. But even so, we can ﬁnd
abundant virtual functions for some UVCs. Lastly, the num-
ber of candidate COOPLUS exploit primitives is listed in the
last column (i.e., column 19).
Further, VScape analyzes each primitive to understand
its capability. Details can be found in Appendix A.2. For
feature-rich applications, e.g., ﬁrefox and opencv, hundreds
of primitive gadgets are found. Especially, there are over
5,360 useful COOPLUS gadgets recognized in chromium
(shown as Table 4), implying a large attack surface is avail-
able for adversaries to bypass potential defenses. Therefore,
we can conclude that, COOPLUS exploit primitives are very
popular in C++ applications (answers to RQ1).
USENIX Association
30th USENIX Security Symposium    1727
Table 3: Effectiveness of CFI solutions against COOPLUS
Category
CFI Scheme
Granularity
Realization
Theoretical Basis
Effective against
COOP⋆
3
3
3
3
3
?
3
3
7
7
7
Effective against
COOPLUS
3
3
7
7
7
7
7
7
7
7
7
ABI incompatible
Validity check
(with runtime context)
Validity check
(with C++ semantics)
Generic CFI
CFIXX [24]
µCFI [8]
OS-CFI [2]
MCFI [60]
pCFI [61]
CFI-LB [62]
SafeDispatch(cid:3) [64]
LLVM-CFI [6]
CCFIR [4]
binCFI [3]
LockDown [65]
-
Unique
Fine
Fine
Fine
Fine
Fine
Fine
Coarse
Coarse
Coarse
Source code + MPX [57]
Source code + Intel PT [58]
Source code + MPX [57] + TSX [59]
Source code
Source code
Source code + Intel PIN [63]
Source code
Source code
Binary
Binary
Binary
Object integrity
Path-sensitive
Source-sensitive
Type-based
Context-sensitive
Call stack based
Type-based
Type-based
-
-
-
(Example targets in COOP)
?: CFI-LB has an implementation ﬂaw which makes it fail to defeat COOP. This ﬂaw has also been conﬁrmed by [32].
*: SafeDispatch is not open-source, we evaluate it based on a reproduction work [66].
⋆: Here, we refer COOP to the one claimed in the original paper [5], excluding the variant COOPLUS.
5.3 Test against CFI Solutions
To answer the question RQ2, we further evaluate the effec-
tiveness of 12 virtual call protections against COOPLUS.
5.3.1 Experiment Setup
We crafted a vulnerable benchmark [67], and hardened it
with 11 CFI defenses respectively, to evaluate their effective-
ness against COOPLUS. Note that, we did not choose large
applications like browsers as targets to evaluate, for the fol-
lowing reasons. First, few proposed CFI solutions can be
deployed to real world large applications without compati-
bility issues. For instance, the Clang-CFI [6] fails to com-
pile Firefox due to cross module support. Second, a crafted
benchmark is easy to exploit and to validate, since no heap
layout manipulation or other advanced exploit skills are re-
quired. Third, the evaluation result drew from the crafted
benchmark is the same as the result from real world applica-
tions, in terms of defenses’ effectiveness against COOPLUS.
5.3.2 Result Analysis
Table 3 shows the evaluation results of these defenses.
It
conﬁrmed that CFI approaches that do not consider C++ se-
mantics ( [4], [3], [65]) are all vulnerable to COOP [5] and
COOPLUS. The original paper [5] claimed COOP can be re-
liably prevented when precise C++ semantics are taken into
consideration. We believed this is not correct. As the results
showed, one variant of COOP, i.e., COOPLUS, successfully
bypasses all defenses except CFIXX [24] and µCFI [8] (an-
swers to RQ2).
The defense CFIXX places vptr in a separate integrity-
protected table, so that the adversary cannot overwrite it to
launch COOPLUS. But CFIXX breaks the C++ ABI and
may cause compatibility issues in some applications.
The CFI defense µCFI takes runtime data ﬂow informa-
tion into consideration, and could identify the unique target
for each indirect call (including virtual call) in most cases.
Essentially, it provides data integrity protection to vptr to
certain extents. Thus, it is able to defeat COOPLUS in most
cases. But it requires Intel PT and a separate process to mon-
itor data, making it hard to deploy in practice. Another CFI
solution OS-CFI also takes runtime context into considera-
tion, but could be bypassed by COOPLUS in some cases,
due to some trade-offs in its implementation [32].
For all other CFI solutions,
including C++ semantic
aware ones (e.g., MCFI [60]), they all can be bypassed by
COOPLUS, since they (1) keep the C++ ABI, (2) cannot pro-
tect the integrity of vptr, and (3) allow more than one targets
at virtual call sites.
Therefore, to fully mitigate COOPLUS, a solution which
protects the integrity of vptr with a low performance over-
head and good compatibility is demanded.
5.4 Exploit in Practice
To answer the question RQ3, we evaluated VScape on
Mozilla Firefox 50.1 (64-bit) and Python-3.6.7 with PyQt-
5.12 library in a Linux x64 operating system.
These two applications both have OOB vulnerabilities
[68, 69] and large numbers of primitives for the COOPLUS
attack. Two key factors affecting exploit success rates are (1)
whether these primitives are reachable (i.e., could be invoked
by users), and (2) how these primitives can help amplify the
vulnerability to acquire more powerful capabilities. VScape
will help with these analyses. Given an exploit template tak-
ing care of the rest AEG challenges, we ﬁnally synthesize
expressive exploits for the targets with VScape.
5.4.1 Attack Surface Analysis
We analyzed Firefox and PyQt with VScape, and demon-
strated the analysis results in Figure 7 and 8.
After recovering class inheritance hierarchy trees, we get
2,279 unique virtual call sites (UVC) that have multiple can-
didate virtual functions in Firefox (1,662 in PyQt). Then,
after performing primitive search, we can ﬁlter out UVCs
that do not have OOB virtual function pairs, and get 969 and
840 UVCs in Firefox and PyQt respectively. For each UVC,
there could be multiple virtual function pairs with OOB be-
haviors, and thus we could get multiple primitives. As shown
in Figure 7, there are 83,786 and 508,141 primitives respec-
tively.
Further, we perform the reachability testing, to get an in-
complete set of victim functions and their UVCs. Thus, we
get 180 and 220 reachable UVCs, together with 1665 and
2299 primitives respectively. Furthermore, we match these
primitives with given vulnerabilities (CVE-2018-5146 and
CVE-2014-1912), and get 12 and 16 qualiﬁed UVCs. Lastly,
1728    30th USENIX Security Symposium
USENIX Association
Figure 7: The number of candidates descends along various analyzing stages.
Figure 8: Time cost distribution of
each analysis phase. The inner ring is
for Firefox, the outer is for PyQt.
we assess the reachability of target OOB instructions, and
ﬁnd one (incomplete set) UVC in these two applications, to-
gether with 1 and 2 primitives respectively.
Figure 8 shows the time cost distribution of different anal-
ysis steps. For Firefox, UVC reachability testing took the
most time, which tested 43,463 test cases from the Firefox
project. But for PyQt, we only collected 330 test cases to
perform reachability testing. In contrast, VScape spent most
of the time in primitive search and capability analysis, which
are the main steps to locate the attack surfaces.
5.4.2 Case Study
Due to the page limit, we only present the case study for
Mozilla Firefox 50.1 (64 bit) here, and put the case study for
PyQt in Appendix A.1.
For Firefox, we used CVE-2018-5146 [69] to demonstrate
the attack. This vulnerability is an out-of-bound write with
controllable value, which occurs while processing Vorbis
audio data with Libvorbis. But the OOB write only af-
fects objects in jemalloc heap [70], separated from easily-
controllable JS Objects in Nursery or Tenured memory.
The complicated memory management
in Firefox in-
creases the difﬁculty of exploitation. Controllable JS ob-
jects in Firefox are managed by generational garbage collec-
tor (GGC) [71], while victim objects (C/C++ objects) quali-
ﬁed for COOPLUS are allocated on the jemalloc heap. Only
if the size of a JS object exceeds a certain limit, it will be
moved to the jemalloc heap. Moreover, the jemalloc allo-
cates objects in different runs with respect to their sizes. So
the constraints of object sizes should be considered.
Ampliﬁcation Strategy. The vulnerability CVE-2018-
5146 [69] exists in libvorbis is related to the procedure of
decoding ogg data to PCM data. A boundary check is missed
in a nested loop, leading to an out-of-bound increment mem-
ory in the native heap (jemalloc in this case). And the size of
the vulnerable object is adjustable. Since the key instruction
in PoC is a ﬂoating add, we need to know the original value
of vptr, then we can replace it with vptr of counterfeit class.
Among all types of gadgets, St-nonPtr is the most popular
(as shown in Table 4). In most cases, the counterfeit function
tries to write a boolean value into OOB area. For COOPLUS,
this helps attackers to write exception value, zero or one,
into relay objects.
If we can manipulate Hi address byte,
pointers are very possible to be corrupted and re-pointed to
addresses out of the memory segment. When the corrupted
pointer value locates in unmapping memory, we can take full
control over this range with elaborated heap spray.
In this way, we build a complete controllable faking object
in this area. If the faking object contains metadata underly-
ing memory read and write, it can also be used for AAR and
AAW in exploitation. Speciﬁcally, we counterfeit objects of
JSString, modify the data pointers and leak memory in arbi-
trary addresses. Then with sufﬁcient leaks, we can make it
easy to counterfeit complicated objects like ArrayBuﬀerOb-
ject and TypedArrayObject, and write arbitrary bytes into
target addresses. We ﬁnd some qualiﬁed objects which live
across heap managers - the data list for ArrayObject will be
moved to jemalloc from Nursery and Tenured when its size
grows larger than 128 bytes.
With the heap manager deployed in Firefox, we have to
search vulnerable objects, victim objects, and relay objects in
the same size range. We choose the relay object whose size