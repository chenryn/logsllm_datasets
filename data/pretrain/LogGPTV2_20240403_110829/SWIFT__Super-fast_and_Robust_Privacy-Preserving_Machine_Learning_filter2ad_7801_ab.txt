ing (jmp) that allows two servers to relay a common message
to the third server such that either the relay is successful or
an honest server is identiﬁed. jmp is extremely efﬁcient as for
a message of (cid:96) elements it only incurs the minimal commu-
nication cost of (cid:96) elements (in an amortized sense). Without
any extra cost, it allows us to replace several pivotal private
communications, that may lead to abort, either because the
malicious sender does not send anything or sends a wrong
message. All our primitives, either for a general 3PC or a
PPML task, achieve GOD relying on jmp.
Second, instead of using the multiplication of [9] (which
has the same overall communication cost as that of our on-
line phase), we build a new protocol. This is because the
former involves distributed zero-knowledge protocols. The
cost of this heavy machinery gets amortized only for large
circuits having millions of gates, which is very unlikely for
inference and moderately heavy training tasks in PPML. As
in BLAZE [48], we follow a similar structure for our multi-
plication protocol but differ considerably in techniques as our
goal is to obtain GOD. Our approach is to manipulate and
transform some of the protocol steps so that two other servers
can locally compute the information required by a server in a
round. However, this transformation is not straight forward
since BLAZE was constructed with a focus towards providing
only fairness (details appear in §3). The multiplication proto-
col forms a technical basis for our dot product protocol and
USENIX Association
30th USENIX Security Symposium    2653
Building
Blocks
Multiplication
Dot Product
Dot Product
with Truncation
Bit
Extraction
Bit to
Arithmetic
Bit
Injection
Ref.
[8]
[9]
BLAZE
SWIFT
BLAZE
SWIFT
BLAZE
SWIFT
BLAZE
SWIFT
BLAZE
SWIFT
BLAZE
SWIFT
Pre.
Comm. ((cid:96))
1
-
3
3
3n
3
3n + 2
15
1
1
1
1
9
9
9
9
12
12
1 + log (cid:96)
1 + log (cid:96)
1
1
2
2
3PC
Online
Rounds Comm. ((cid:96))
2
3
3
3
1
3
1
1
Security
Ref.
Pre.
Online
Comm. ((cid:96))
Rounds Comm. ((cid:96))
Security
4PC
Abort
GOD
Fair
GOD
Fair
GOD
Fair
GOD
Fair
GOD
Fair
GOD
Fair
GOD
Trident
FLASH
SWIFT
Trident
FLASH
SWIFT
Trident
FLASH
SWIFT
Trident
FLASH
SWIFT
Trident
FLASH
SWIFT
Trident
FLASH
SWIFT
3
6
3
3
6
3
6
8
4
≈ 8
14
≈ 7
≈ 3
6
≈ 3
≈ 6
8
≈ 6
1
1
1
1
1
1
1
1
1
log (cid:96) + 1
log (cid:96)
log (cid:96)
1
1
1
1
2
1
3
6
3
3
6
3
3
6
3
≈ 7
14
≈ 7
3
8
3
3
10
3
Fair
GOD
GOD
Fair
GOD
GOD
Fair
GOD
GOD
Fair
GOD
GOD
Fair
GOD
GOD
Fair
GOD
GOD
3
3
3
3
9
9
4
4
7
7
– Notations: (cid:96) - size of ring in bits, n - size of vectors for dot product.
Table 1: 3PC and 4PC: Comparison of SWIFT with its closest competitors in terms of Communication and Round Complexity
other PPML building blocks. We emphasise again that the
(amortized) cost of our dot product protocol is independent
of the vector size.
Third, extending to 4PC brings several performance im-
provements over 3PC. Most prominent of all is a conceptually
simple jmp instantiation, which forgoes the broadcast chan-
nel while retaining the same communication cost; and a dot
product with cost independent of vector size sans the 3PC
amortization technique.
Fourth, we provide robust protocols for input sharing and
output reconstruction phase in the SOC setting, wherein a
user shares its input with the servers, and the output is recon-
structed towards a user. The need for robustness and commu-
nication efﬁciency together makes these tasks slightly non-
trivial. As a highlight, we introduce a super-fast online phase
for reconstruction protocol, which gives 4× improvement in
terms of rounds (apart from improvement in communication)
compared to BLAZE. Although we aim for GOD, we ensure
that an end-user is never part of a broadcast which is relatively
expensive than atomic point-to-point communication.
Organisation of the paper. The rest of the paper is organized
as follows. §2 describes the system model, preliminaries and
notations used. §3 and §4 detail our constructs in the 3PC
and respectively 4PC setting. These are followed by the Ap-
plications and benchmarking are detailed in §5. Additional
preliminaries and ideal functionalities are elaborated in §A,
§B and §C. Further details on the cost analysis and security
are deferred to the full version of the paper [36].
2 Preliminaries
We consider a set of three servers P = {P0,P1,P2} that are
connected by pair-wise private and authentic channels in a
synchronous network, and a static, malicious adversary that
can corrupt at most one server. We use a broadcast channel
for 3PC alone, which is inevitable [18]. For ML training, sev-
eral data-owners who wish to jointly train a model, secret
share (using the sharing semantics that will appear later) their
data among the servers. For ML inference, a model-owner
and client secret share the model and the query, respectively,
among the servers. Once the inputs are available in the shared
format, the servers perform computations and obtain the out-
put in the shared form. In the case of training, the output
model is reconstructed towards the data-owners, whereas for
inference, the prediction result is reconstructed towards the
client. We assume that an arbitrary number of data-owners
may collude with a corrupt server for training, whereas for
the case of prediction, we assume that either the model-owner
or the client can collude with a corrupt server. We prove the
security of our protocols using a standard real-world / ideal-
world paradigm. We also explore the above model for the four
server setting with P = {P0,P1,P2,P3}. The aforementioned
setting has been explored extensively [11, 14, 15, 43, 45, 48].
Our constructions achieve the strongest security guarantee
of GOD. A protocol is said to be robust or achieve GOD if
all parties obtain the output of the protocol regardless of how
the adversary behaves. In our model, this translates to all the
data owners obtaining the trained model for the case of ML
training, while the client obtaining the query output for ML
inference. All our protocols are cast into: input-independent
preprocessing phase and input-dependent online phase.
For 3/4PC, the function to be computed is expressed as a
circuit ckt, whose topology is public, and is evaluated over
an arithmetic ring Z2(cid:96) or boolean ring Z21. For PPML, we
consider computation over the same algebraic structure. To
deal with ﬂoating-point values, we use Fixed-Point Arith-
metic (FPA) [11, 14, 15, 43, 45, 48] representation in which a
decimal value is represented as an (cid:96)-bit integer in signed 2’s
complement representation. The most signiﬁcant bit (MSB)
represents the sign bit, and x least signiﬁcant bits are reserved
2654    30th USENIX Security Symposium
USENIX Association