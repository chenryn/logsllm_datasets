title:On the relationship between strand spaces and multi-agent systems
author:Joseph Y. Halpern and
Riccardo Pucella
On the Relationship between Strand Spaces and
Multi-Agent Systems 
Joseph Y. Halpern
Department of Computer Science
Cornell University
Ithaca, NY 14853
Riccardo Pucella
Department of Computer Science
Cornell University
Ithaca, NY 14853
PI:EMAIL
PI:EMAIL
http://www.cs.cornell.edu/home/halpern
ABSTRACT
Strand spaces are a popular framework for the analysis of securi-
ty protocols. Strand spaces have some similarities to a formalism
used successfully to model protocols for distributed systems, name-
ly multi-agent systems. We explore the exact relationship between
these two frameworks here.
It turns out that a key difference is
the handling of agents, which are unspeciﬁed in strand spaces and
explicit in multi-agent systems. We provide a family of transla-
tions from strand spaces to multi-agent systems parameterized by
the choice of agents in the strand space. We also show that not
every multi-agent system of interest can be expressed as a strand
space. This reveals a lack of expressiveness in the strand-space
framework that can be characterized by our translation. To high-
light this lack of expressiveness, we show one simple way in which
strand spaces can be extended to model more systems.
1.
INTRODUCTION
Strand spaces [21] have recently emerged as a popular frame-
work for the analysis of security protocols. Roughly speaking, the
strand space corresponding to a protocol is the set of the traces of
the various interactions between the principals under consideration.
Using strand spaces, we can reason about the secrecy of the values
exchanged between principals and infer authentication properties.
One limitation of the strand-space approach is that it assumes that
essentially all the information available to a principal is contained
in messages received by that principal. However, there is other
important information that may also be available in a security set-
ting. For example, an adversary may have information about the
protocol(s) being used. Moreover, if the same agent is playing dif-
ferent roles, then it may be able to combine information it gathers
in its various roles. This information can be captured precisely us-
ing a formal model of knowledge. Indeed, the multi-agent systems
Supported in part by NSF under grant IRI-96-25901 and IIS-
0090145 and by ONR under grants N00014-00-1-03-41, N00014-
01-10-511, and N00014-01-1-0795.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
framework used to represent the knowledge and belief of agents
has been used quite successfully to reason about distributed proto-
cols (see [7] for intuition, details, and examples). This framework
is based on a notion of runs; a run is a complete description of what
happens over time in one possible execution of the system. Early
attempts at applying the multi-agent systems framework to reason-
ing about cryptography and security (cf. [8, 12]) suggest that these
notions of knowledge and belief can be an important component in
reasoning about security, the BAN logic being an example in that
particular direction [4]. Essentially, the idea is simply that informa-
tion can be derived in protocols not just through the messages being
exchanged, but through general properties of the system. Our cur-
rent project is to deﬁne a multi-agent systems framework suitable
for reasoning about security using notions such as knowledge and
belief. On the other hand, strand spaces have been used success-
fully to reason about security protocols. Since there are similarities
between the two approaches, it is worthwhile to see how much of
the strand-space approach can be carried over to multi-agent sys-
tems and vice versa. This forces us to investigate in detail the re-
lationship between the two approaches. That is the purpose of this
paper.
The key issue in relating the two frameworks is the handling of
agents. For our purposes, an agent is an entity (a principal, a pro-
cess, etc.) that can participate in interactions. Most importantly, an
agent has a state that is shared across all the interactions that the
agent performs. In multi-agent systems, there is a clear notion of
an agent participating in an interaction. In strand spaces, there is
not. Each protocol interaction (described by a strand) is viewed as
independent from all others. In fact, each strand can be viewed as
representing a different agent. This approach to modeling agents
is deliberate in the deﬁnition of strand spaces, and gives a theory
that yields general results. Strand spaces do treat agents, in a fash-
ion, by essentially assigning to every strand a name representing
the “agent” executing the strand; see, for instance, the description
of NSL spaces in [21] used to model the Needham-Shroeder-Lowe
protocol. However, it is still the case that strands corresponding to
the same “agent” can exchange values only through explicit com-
munication, i.e.
there is no shared state across the strands corre-
sponding to the same “agent” name. For all intents and purposes,
these strands may as well be assigned to different actual agents.
To highlight the role of agents, we provide a family of transla-
tions from strand spaces to strand systems, a subclass of multi-
agent systems that seem to capture the intuition underlying strand
spaces. The translations are parameterized by an assignment from
strands to agents. This assignment associates with a strand the
agent performing the protocol interaction described by the strand.
106Such an assignment captures the intuition that different strands can
potentially be executed by the same agent.
Why is the role of the agents so signiﬁcant? For the protocols
considered in [21], it is not. On the other hand, it is clear from
the work on BAN [4] and other logics (for instance, [17, 18]), as
well as the work on information ﬂow [13], that belief and knowl-
edge are useful concepts when reasoning about security protocols.
As we said earlier, there are a number of ways that an attacker can
gain knowledge in a system. Certainly when an attacker intercepts
a message, it learns the contents of the message. But it may learn
much more if it knows the protocol being run. In addition, different
principals representing the same attacker may be able to pool the
information they have acquired. In any case, as soon as one talks
about belief or knowledge, there must be agents in the picture to
which belief or knowledge is ascribed. One advantage of a multi-
agent system is that it explicitly identiﬁes agents and provides an
easy way to ascribe knowledge to agents (see [7]). In the context
of security, that means we are forced to reason about, for example,
which principals represent the same agent or which ones may rep-
resent the same agent. (See [9, 10] for logics that carry out such
reasoning explicitly and, in particular, distinguish between agents
and their names.)
Signiﬁcantly, our translations are not surjective. Some strand
systems are not the image of any strand space, regardless of the
assignment of agents to strands. This is not just an artifact of our
particular translation. Any translation from strand spaces to strand
systems that preserves the message history of the agents, in a pre-
cise sense, cannot be surjective.
Intuitively, this is because in a
strand space we cannot say “either this sequence of events happens
or that one does, but not both”. This indicates a fundamental lack
of expressiveness in the current formulation of strand spaces.
One way to characterize this lack of expressiveness is by show-
ing how strand spaces can be extended to be able to model arbitrary
strand systems. We demonstrate one way of doing this by introduc-
ing a notion of conﬂict, specifying when two strands cannot both
be part of the same run. We remark that the general properties of
strand spaces proved in [21], such as the bounds on the penetrator,
are still valid in these extended strand spaces.
The rest of this paper is structured as follows. In Section 2, we
In Section 3, we
review strand spaces and multi-agent systems.
In
present the translation from strand spaces to strand systems.
Section 4, we discuss the problem of translating a strand system
into a strand space, and show why in general we cannot perform
the translation faithfully. In Section 5, we describe an extension to
the strand space framework that is equivalent in expressive power
to strand systems. We interpret our results in Section 6.
2. THE FRAMEWORKS
In this section, we review the two frameworks we want to re-
late, the strand-space framework [21], and the multi-agent systems
framework [7].
2.1 Strand spaces
Let  be the set of possible messages that can be exchanged by
the principals in a protocol.1 A signed term is a pair h(cid:27); (cid:22)i with
(cid:27) 2 f;  g and (cid:22) 2 . A signed term h; (cid:22)i represents the
sending of message (cid:22) and is typically written (cid:22), and a signed
term h ; (cid:22)i represents the reception of message (cid:22) and is typically
written  (cid:22). We write   for the set of ﬁnite sequences of
signed terms. A strand space over  is a set  of strands and a
1The actual contents of the message and the structure of  are not
important for the purpose of this paper.
trace mapping tr :  !  , associating each strand in  with
a sequence of signed terms. We typically represent a strand space
by the underlying set , leaving the trace mapping implicit.
In a strand space , a node is a pair h; ii, with  2  and an
integer i with 1 (cid:20) i (cid:20) jj. The set of nodes of  is represented
by  . We say the node h; ii belongs to the strand , and some-
times abuse notation by writing h; ii 2 . Given a node  = h; ii,
where tr = h(cid:27)1; (cid:22)1i : : : h(cid:27)k; (cid:22)ki, deﬁne term = h(cid:27)i; (cid:22)ii. If
1 and 2 are nodes, we write 1 ! 2 if term1 = (cid:22) and
term2 =  (cid:22); we write 1  2 if both 1 and 2 occur on
the same strand  and 1 = h; ii and 2 = h; i  1i. Note that
the set  of nodes together with both sets of edges 1 ! 2 and
1  2 forms a directed graph  ; ! [ .
Strand spaces are aimed at reasoning about the security of sys-
tems in the presence of a hostile penetrator with various capabili-
ties. In order to model such a penetrator, a notion of an inﬁltrated
strand space is deﬁned in [21]; the inﬁltrated strand space contains
both regular strands and a set of so-called penetrator strands that
represent the actions available to a penetrator. For the purposes of
this paper, there is no need to distinguish penetrator strands from
regular strands, so we do not consider inﬁltrated strand spaces.
A bundle represents a snapshot of a possible protocol execution.
For a given strand space , let B = B; !B [ B be a
subgraph of  ; ! [ . The graph B is a bundle if
B1. B is ﬁnite,
B2. if 2 2 B and term2 is negative, then there is a unique
1 such that 1 !B 2,
B3. if 2 2 B and 1  2, then 1 B 2,
B4. B is acyclic.
In B2 and B3, because B is a graph, it follows that 1 2 B. We
say a node  is in the bundle B if it is in B.
It will be useful for us in this paper to allow inﬁnite bundles. An
inﬁnite bundle is just a subgraph of  ; ! [  that satisﬁes
B2–4 (that is, we no longer require the ﬁniteness condition B1).
The height of an inﬁnite bundle is the length of the longest ﬁnite
sequence of nodes 1; 2; 3; : : : ; k in B such that 1 ; 2 ;
: : : ; k, where ; is either ! or . (A bundle can have inﬁnite
height if there is no bound on the length of the longest sequence
of this type.) Of course, all ﬁnite bundles have ﬁnite height. It is
easy, however, to construct inﬁnite bundles of inﬁnite height (even
if all individual strands have length at most 2). For example, con-
sider the strand space  = fi : i 2 Zg, with a trace mapping
tri = h 	i; 	i1i. The strand space  itself in this case is an
inﬁnite bundle of inﬁnite height. All the arguments of [21] which
were applied to ﬁnite bundles go through without change for inﬁ-
nite bundles of ﬁnite height. (Indeed, they go through for inﬁnite
bundles that are well-founded, in the sense of having no inﬁnite “de-
scending” sequences of the form : : : ; 3 ; 2 ; 1, although
we end up using only bundles of ﬁnite height in our arguments.)
2.2 Multi-agent systems
In the multi-agent systems approach, every agent is assumed to
be in some local state at each point in time. Given a set A of agents,
we characterize a system over A at a given point in time in terms
of a global state; this is a sequence h(cid:27)a : a 2 Ai, where (cid:27)a is the
local state of agent a. The local states of an agent intuitively encode
all the information that the agent has available at a given point in
time.
In typical distributed systems applications, the local state
includes the values of variables and a history of messages received.
If we are modeling a group of agents playing a poker game, the
107local state may include the cards that the agent holds and the bets
that have been made thus far.
To capture changes to the system over time, we deﬁne a run of
the system to be a function from time to global states. Intuitively,
a run is a complete description of what happens over time in one
possible execution of the system. A point is a pair ;  consisting
of a run  and a time . The global state  describes the state
of the system at the point ; . Formally, we take a system to
consist of a set of runs.
Informally, the system includes all the
possible executions of the system, that is, all the different ways it
could evolve through time.
Due to the assumptions made by the strand-space approach, name-
ly that events in strands consist of sending and receiving messages,
we consider only systems where the local state of an agent is the
sequences of messages that the agent has sent and received. Thus,
we deliberately ignore internal actions (or, more accurately, treat
them as irrelevant).
We can formalize the above description as follows. Consider a
ﬁxed set  of messages. A history for agent a (over ) is a se-
quence of elements of the form send(cid:22) and recv(cid:22), where (cid:22) 2
. We think of send(cid:22) as representing the event “message (cid:22)
is sent” and recv(cid:22) as representing the event “message (cid:22) is re-
ceived.” Intuitively, a’s history at ;  consists of a’s initial s-
tate, which we take to be the empty sequence, followed by the
sequence describing a’s actions up to time . If a performs no
actions in round , then its history at ;  is the same as its his-
tory at ;    1. In such a message-passing system, we speak of
send(cid:22) and recv(cid:22) as events. For a 2 A, let a be agent
a’s history in ; . We say that an event e occurs in a’s history
in round   1 of run  if e is in (the sequence) a  1 but not