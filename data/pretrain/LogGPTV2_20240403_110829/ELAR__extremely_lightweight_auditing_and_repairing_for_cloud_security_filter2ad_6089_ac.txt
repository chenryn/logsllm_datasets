• POR.Encode(skC, F ) → (∀i ∈ [1, n], F ∗
Si = {(cij)}j∈[1,d],
TSi = {(tij)}j∈[1,d]): run by C. Input: client’s secret
key skC and an original ﬁle F . The algorithm ﬁrstly
outputs F ∗
Si = {(cij)}j∈[1,d] which is a set of d coded
blocks (encoded from F ) for each server Si (i ∈ [1, n]).
The algorithm then outputs TSi = {(tij)}j∈[1,d]) which
is a set of corresponding d MAC tags of the d coded
blocks (computed using skC) for each server Si (i ∈
[1, n]). (F ∗
Si , TSi ) are then stored in Si.
Pollution Attack.
A server (denoted by SA) may respond valid coded blocks
to pass the check phase, but then provide invalid coded
blocks in the repair phase. In particular, in the encode phase,
the client stores coded blocks (which are linear combina-
tions of all ﬁle blocks) across a set of n servers S1,··· ,Sn.
During the check phase, SA responds valid coded blocks
to pass the veriﬁcation. Suppose that a corrupted server
Sr ∈{S 1,··· ,Sn} \ SA is detected.
In the repair phase,
the client selects a set of h healthy servers {Si1 ,··· ,Sih}
(h < n) for repairing Sr. Unfortunately, the client unin-
tentionally selects SA ∈{S i1 ,··· ,Sih} because the client
thinks that SA is a healthy server (SA passed the check
phase). While the other servers Si (i ∈ [i1, ih], Si ̸= SA)
provide valid coded blocks, SA provides an invalid coded
block (denoted by X) such that it is not a linear combi-
nation of all ﬁle blocks. Then, the client uses all provided
coded blocks to generate new coded blocks for new server.
44
As a result, in the next time steps (next epochs), SA can
break all the linear independence of the system. Therefore,
the original ﬁle cannot be recovered any more. Formally, the
scheme is said to be secure from SA if the probability of SA
is negligible:
via two ways: (i) brute force search from its own key, (ii)
OthVecGen algorithm after collecting enough coded blocks
from the servers. Formally, the client’s secret key is said
to be secure from the T PA if the probability of T PA is
negligible:
Pr
)
(pollution
attack
SA
* tX ← HomMac.Tag(skSA
true ← POR.Check(skS′r ,S X,tX
, X, index(X))
)
A
+ <ϵ
Tag forgery.
During the repair phase, a new server is given keys in order
to: (1) check coded blocks provided from other servers before
using them to generate new coded blocks, and (2) compute
tags for the new coded blocks. These two behaviors are
allowed. However, the new server (denoted by SA) may also
use these given keys to perform a misbehavior that it, forging
a tag for a coded block of new ﬁle blocks (not current ﬁle
blocks). It is meaningless for the server to compute the tag
of a coded block of current ﬁle blocks because it is already
computed by the client. Formally, let v1,··· , vm denote the
current ﬁle blocks, and let vπ denote a new ﬁle block. The
scheme is said to be secure from SA if the probability of SA
is negligible:
Pr
( Tag
forgery)
SA
LinearlyCombine←
* cij
(v1,··· , vm, vπ)
tij ← HomMac(skSA
, cij, i||j)
true ← POR.Check(skT PA,S tij
A ) + <ϵ
Recovering the original ﬁle from coded blocks stored
in each server.
In our scheme, the original ﬁle F is ﬁrstly divided into
m ﬁle blocks, then these m ﬁle blocks are encoded (using
network coding) into n × d coded blocks where n denotes
the number of servers, d denotes the number of coded blocks
stored in a server (m can be viewed to be the perfect secrecy
condition such that no information about F is obtained from
at most m coded blocks). Each server may try to recover
F using its d coded blocks. This issue is related to con-
ﬁdentiality. As mentioned in Section 1, in this paper we
deal with availability and integrity; conﬁdentiality is out of
our scope. Therefore, we will not discuss this issue in our
security analysis in Section 5.
However, here we still give some countermeasures to ad-
dress this issue as follows. Firstly, we should choose pa-
rameter d such that d < m in order to avoid each server
recovering F . Secondly, we should assume that the num-
ber of colluding servers must be at most ⌊ m
d ⌋ −1 since the
number of coded blocks that all the colluding servers have is
(⌊ m
d ⌋ − 1) × d < m. Thus, the colluding servers also cannot
recover F .
3.2.2 Attack from T PA
Besides the servers, we also consider T PA as semi-trusted
(also known as honest-but-curious) adversary. That is, T PA
is assumed to faithfully perform periodic server checks, but
try to learn additional information. Concretely, the T PA
may perform the following misbehaviours:
PrT PA[skT PA ⇒ skC] <ϵ
Remark that the T PAtries to learn the client’s secret key in
order to forge MAC tags, not in order to recover the original
ﬁle. This is because the client uses his secret key to compute
the tags, not to encrypt or encode the ﬁle.
Recovering original ﬁle from servers’ responses.
Via the check phase, the T PA can collect the servers’
responses in order to recover the original ﬁle. This issue
is related to conﬁdentiality. Like Section 3.2.1 (Recovering
client’s original ﬁle from coded blocks stored in each server),
conﬁdentiality is out of our scope in this paper. We will not
discuss this issue in our security analysis in Section 5.
However, here we still give some countermeasures to ad-
dress this issue. The ﬁrst solution is to disable T PA set-
ting. This means that we do not use a T PA; instead, the
client will check the servers periodically. The client thus in-
curs some computation and communication costs for these
checks. Here, there is a trade-oﬀ between security of con-
ﬁdentiality and eﬃciency. The second solution is to use an
asymmetric key setting. This means that we will generate a
pair of secret key and public key. The client uses the secret
key to compute tags. The T PA uses the public key to check
the servers.
4. ELAR SCHEME
In this section, we describe our proposed scheme and its
correctness. The notations used in the scheme are given in
Table 2.
Table 2: Notation
Notation Description
C
n
Si
F
m
vk
wk
d
client
number of servers
i-th server (i ∈ [1, n])
original ﬁle
number of ﬁle blocks
k-th ﬁle block (k ∈ [1, m])
augmented block of vk
number of coded blocks stored in a server.
d should be chosen such that d < m
j-th coded block stored in Si (j ∈ [1, d])
tag of cij
Third Party Auditor
number of healthy servers used for data repair
corrupted server
new server used to replace Sr
number of spot-checks for a server in an epoch
cij
tij
T PA
h
Sr
S′r
s
Searching client’s secret key.
T PA is given a key by the client in order to check the
servers. T PA then tries to search the secret key of the client
4.1 Construction
POR.Keygen. C divides F into m ﬁle blocks F = v1||···||vm.
vk ∈ Fz
q where k ∈ [1, m]. C creates an augmented block wk
45
for each ﬁle block vk:
m
q
k
(7)
%
’
(%
wk = (vk,
0,··· , 0, 1
&’
, 0,··· , 0) ∈ Fz+m
&
(
C uses a Pseudo Random Function PRF: KF×[1, n]||[1, d] →
Fq. C randomly generates key k1 in Fz+m
, and key k2 in KF .
C computes kφ ← OthVecGen(w1,··· , wm). kφ ∈ Fz+m
and
kφwk = 0, ∀k ∈ [1, m]. C then computes k3 = k1 + kφ ∈
Fz+m
. C ﬁnally sends skT PA = {k2, k3} to T PA. C keeps
q
skC = {k1, k2} as his secret keys. Suppose that the keys are
transmitted via a secure channel.
q
q
POR.Encode. C computes nd coded blocks and nd corre-
sponding tags as follows.
For each i ∈ [1, n], j ∈ [1, d]:
• C randomly generates m coeﬃcients αijk in Fq for k =
[1, m].
• C computes coded block:
cij =
αijk · wk ∈ Fz+m
q
m)k=1
• C computes tag:
tij = k1 · cij + PRF(k2, i||j) ∈ Fq
C sends d pairs {cij, tij} to Si where j ∈ [1, d].
POR.Check. T PA checks each Si using spot checking.
For each i ∈ [1, n]:
1. C ﬁrstly generates kφr ← OthVecGen(w1,··· , wm). Note
that kφr ̸= kφ, kφr ∈ Fz+m
and kφr wk = 0,∀k =
[1, m]. C then computes k4 = k1 + kφr . C sends
skS′r = {k2, k4} to S′r.
q
2. S′r performs like the check phase using his keys skS′r =
{k2, k4} until S′r gets enough d valid aggregated coded
blocks (contained in the servers’ responses). Note that
during this step, Eq. 12 becomes:
ti
?= k4ci +
s)u=1
βu · PRF(k2, i||bu)
(13)
(not k3 as in Eq. 12). Let Rc = {ci1 ,··· , cid} denote
these d valid aggregated coded blocks.
3. S′r computes d coded blocks and d tags as follows:
• S′r assigns d valid aggregated coded blocks to the
new coded blocks of S′r itself: (cr1 ,··· , crd ) ←
(ci1 ,··· , cid ).
• S′r computes new tags: trj = crj·k4+PRF(k2, r||j)
where j ∈ [1, d].
S′r stores its own d coded blocks and d tags {crj, trj}
where j ∈ [1, d].
4.2 Correctness
(1) The correctness of Eq. 12 is proved as follows:
k3 · ci +
= (k1 + kφ) · ci +
= (k1 + kφ)
βu · PRF(k2, i||bu)
βu · PRF(k2, i||bu)
s!u=1
βu · PRF(k2, i||bu) //Eq. 10
βucibu +
= (k1 + kφ)
βuαibukwk +
βuPRF(k2, i||bu)
s!u=1
s!u=1
m!k=1
s!u=1
m!k=1
s!u=1
//Eq. 8 with j = bu
= k1
βuαibukwk +
//kφwk = 0,∀k ∈ [1, m]
= k1
βucibu +
s!u=1
s!u=1
=
=
βu(k1cibu + PRF(k2, i||bu))
βutibu //Eq. 9 with bu = j
= ti //Eq. 11
s!u=1
s!u=1
s!u=1
s!u=1
s!u=1
βuPRF(k2, i||bu)
βuPRF(k2, i||bu) //Eq. 8 with j = bu
(2) The correctness of Eq. 13 is proved in the same way as
the correctness of Eq. 12. This is because k4 = k1 + kφr
where kφr wk = 0,∀k = [1, m].
5. SECURITY ANALYSIS
Before describing our security analysis, we give the data
retrieval condition as follows.
Proposition 1. F can be retrieved if in any epoch, the
number of healthy servers must be at least ⌈m/d⌉.
Proof. Since F = v1||···||vm, a set of m ﬁle blocks
v1,··· , vm are viewed as m unknowns when F is retrieved.
According to Eq. 8, each coded block is a linear combina-
tion of v1,··· , vm. Thus, to solve v1,··· , vm, at least m
(8)
(9)
(10)
(11)
1. T PA chooses an integer s ∈ [1, d]. s can be diﬀerent
for each server and each check time. T PA generates a
challenge consisting of s pairs chall = {(b1,β 1),··· , (bs,β s)}
where bu is randomly chosen in [1, d] and βu is ran-