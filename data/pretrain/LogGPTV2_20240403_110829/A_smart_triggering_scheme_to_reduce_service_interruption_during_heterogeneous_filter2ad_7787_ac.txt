To  evaluate  the  accuracy  of  the  three  prediction 
methods,  we  apply  them  to  the  traces  in  Figure  8  and 
compare  the  prediction  errors  of  each  method.  The 
prediction error is the absolute difference between x[i] 
and x’[i]. Figure 5 presents some evaluation results. In 
this  figure,  the  cumulative  percentage  is  calculated 
based  on  the  prediction  errors  from  all  traces.  The 
closer  a  curve  is  to  the  top  line  (100%),  the  more 
accurate  the  prediction  is.  First  of  all,  Figure  5(a) 
shows  that  different  values  of  j  (the  prediction  step) 
result in different range of prediction errors. The larger 
the value of j, or the further we predict, the bigger the 
prediction  errors.  When  predicting  1  step  ahead  (j=1), 
only  5%  of  prediction  errors  are  bigger  than  1.  In 
comparison,  when  predicting  5  steps  ahead,  around 
20%  of  prediction  errors  are  bigger  than  1.  Results  in 
Figure 5 (a) are for the straight-line method, and we see 
similar  trend  for  the  other  two  methods.  Apparently, 
there  is  a  tradeoff  between  prediction  accuracy  and 
prediction  steps.  In  Section  4,  we  discuss  how  to 
choose  an  appropriate  value  for  the  prediction  step,  j, 
in  trigger  prediction.  Figure  5    (b)  shows  prediction 
errors  for  the  three  prediction  methods  over  all  RSSI 
traces.  Interestingly,  the  straight-line  and  step-by-step 
methods  (which  have  similar  performance)  perform 
better  than  LSE.  The  reason  could  be  that  integer 
values  are  used  to  represent  RSSI  values,  and  these 
RSSI  values  are  a  type  of  average  value  (exponential 
average) and are not totally independent of each other. 
Figure 5. Prediction errors 
Due  to  its  simplicity  and  higher  accuracy,  we 
decided to use the straight-line method for future RSSI 
value prediction. 
3.2  Trigger prediction 
For simplicity, when at  step  i,    it  is  predicted  that  a 
LGD trigger will happen in the near future, we say that 
a  PreTrigger  is  generated  at  step  i  (e.g.  sending  a 
PreTrigger  message  to  Connection  Manager).  In  what 
follows, we will use trigger prediction and PreTrigger 
generation interchangeably.  
Next,  we  discuss  how  to  predict  a  LGD  trigger  by 
predicting  future  RSSI.  A  basic  algorithm  could  be 
applying  the  trigger  generation  algorithm  to  predicted 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:48 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE434DSN 2008: Liu et al.RSSI  values.  For  instance,  at  step  i,  if  x’[i+j]  is  less 
than  LGD_TH,  then  we  could  predict  that  a  LGD 
trigger would be generated in the near future. However, 
since  prediction  has  errors  and  the  further  we  predict 
forward, the large the errors, this basic algorithm could 
result in many false alarms or missed predictions.  
To  improve  the  basic  algorithm,  we  have  a  few 
observations.  First,  the  algorithm  should  take  into 
account  both  the  long  term  trend  and  the  short  term 
changes,  so  as  to  respond  in  time  and  avoid  false 
alarms.  Second,  in  predicting  future  RSSI  values,  the 
size  of  history  window  (parameter  N)  plays  an 
important role as well. A large window is good to track 
the  long  term  trend  but  less  sensitive  to  recent  sharp 
increase/decrease  of  RSSI  values.  A  small  history 
window  would  react  faster  to  recent  trend  of  RSSI, 
however,  may  result  in  large  prediction  errors.  Hence, 
we propose to leverage two history window sizes in the 
prediction,  a  large  and  a  small  size.  To  react  fast  to 
recent sharp decrease of RSSI values, we predict future 
RSSI  values  by  applying  both  window  sizes,  one  at  a 
time,  then  get  two  predicted  values  and  take  the 
minimum one as the predicted RSSI. On the other hand, 
to  catch  the  long  term  trend  of  RSSI  to  avoid  false 
alarms, we apply a trend analysis algorithm to the RSSI 
values  in  the  long  history  window.  Only  when  the 
predicted  RSSI  is  below  LGD_TH,  and  the  long  term 
trend  of  RSSI  is  going  downward,  will  we  make  a 
prediction, or generate a PreTrigger.  
Algorithm 1 defines the trigger prediction algorithm, 
executed at each step  i  after a new RSSI measurement 
is  obtained.  Let  x’[i]N  denote  the  predicted  value  of 
exponential  average  RSSI  at  step  i,  by  using  history 
window  N  and  the  straight-line  prediction  method. 
Parameter j is adjustable and we discuss how to choose 
an appropriate value for j in Section 4. In what follows, 
we  set  N1  to  50  if  i≥50  and  N1  to  i+1  otherwise,  and 
N2=10. 
Algorithm 1: Trigger Prediction (PreTrigger) Algorithm 
1. Calculate  Pred_RSSI(i+j) 
for 
i≥N2-1,  where 
Pred_RSSI(i+j)=Min(x’[i+j]N1, x’[i+j]N2)..  
2. Apply the trend analysis algorithm (Algorithm 2) 
3. Apply  the  algorithm  in  Figure  6  and  generate 
PreTrigger upon entering PRE_TRIGGER state. 
In Figure 6, when the state transitions from IDLE to 
PRE_TRIGGER  state,  a  PreTrigger  is  generated. 
Going  from  PRE_TRIGGER  to  FINAL  indicates  that 
after  a  predication  is  made,  a  LGD  trigger  is  indeed 
generated,  hence  the  prediction  is  accurate.  The 
transition from PRE_TRIGGER to CANCEL indicates 
that some time after the predication is made,  based  on 
newly  collected 
is 
the  predication 
information, 
considered as a  false  alarm.  The  transition  from  IDLE 
directly  to  FINAL  indicates  that  a  LGD  trigger  is 
generated before a predication could be made, hence a 
prediction is missed. 
Pred_RSSI(i+j)
<LGD_TH 
<LGD_TH 
& recent trend of RSSI 
& recent trend of RSSI 
is downward
is downward
IDLE
IDLE
PRE_TRIGGER
PRE_TRIGGER
Recent RSSI trend 
Recent RSSI trend 
is upward
is upward
Accurate 
Accurate 
prediction
prediction
Link status 
Link status 
changes to LGD 
changes to LGD 
(RSSI<LGD_TH)
(RSSI<LGD_TH)
Link status 
Link status 
changes to LGD 
changes to LGD 
(RSSI<LGD_TH)
(RSSI<LGD_TH)
missmiss
CANCEL 
CANCEL 
False 
False 
alarmalarm
FINAL 
FINAL 
Figure 6. PreTrigger generation state machine 
Algorithm 2: Trend Analysis Algorithm 
Step 1: Apply the FFT method to get the trend of RSSI 
in  the  following  history  windows,  which  will  return  the 
trend  as  UP,  DOWN,  or  UNDEFINED  (note  that  we 
analyze  the  trend  of  exponential    average  of  RSSI,  not 
raw RSSI): 
Long term: the trend of [x(i-N1+1), x(i). 
Half long term: the trend of [x(i- N1/2), x(i). 
Short term: the trend of [x(i-N2+1), x(i)]. 
• 
• 
• 
Step  2:  Analyze  the  recent  trend  of  RSSI  based  on 
results  in  Step  1.  We  define  that  the  recent  trend  is 
downward if one of the following is true: 
Long term trend is DOWN_TREND; 
Long term trend is UNDEFINED and half long 
• 
• 
term trend is DOWN_TREND; 
• 
term trend is DOWN_TREND. 
Similarly, the recent trend of RSSI is upward if one of 
Long  term  trend  is  UNDEFINED  and  short 
the following is true: 
Long term trend is UP_TREND; 
Long term trend is UNDEFINED and half long 
• 
• 
term trend is UP_TREND; 
• 
term trend is UP_TREND. 
Otherwise, the trend is undefined. 
Long  term  trend  is  UNDEFINED  and  short 
Figure 7. Smart Triggering scheme. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:48 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE435DSN 2008: Liu et al.For  analysis  of  recent  trend  of  RSSI,  we  take  the 
same approach as in [2] and apply the FFT method, as 
specified  in  Algorithm  2.  (Details  of  the  FFT  method 
are  in  [2].)  Finally,  Figure  7  presents  the  overall 
procedure  of  the  smart  trigger  scheme.  It  is  executed 
each time a new RSSI measurement is obtained. 
4.  Evaluation 
4.1  Methodology  
To evaluate the smart trigger scheme, we apply it to 
traces of signal strength measurements and emulate the 
procedure in Figure 7. For each trace, at each step i, a 
measured RSSI value (or CINR for WiMax) is read in 
from  the  trace  and  the  algorithms  in  the  scheme  are 
applied.  As  stated  before,  the  objectives  for  trigger 
prediction  are  accuracy  and  early  enough  prediction. 
Hence, for all traces, we count the number of accurate 
predictions, missed  predications,  and  false  alarms.  We 
also  evaluate  the  length  of  proactive  window  of  each 
accurate prediction. 
4.2 Results from WiFi traces 
We  collected  eight  WiFi  traces  for  evaluation,  as 
shown  in  Figure  8.  These  traces  include  both  sharp 
decay  and  slow  degradation  of  signal  strength.  The 
three  traces  in  the  middle  were  collected  by  walking 
from  inside  of  an  office  building  to  the  outside  of  the 
building, and then away from the building. These three 
traces were collected to test the performance of trigger 
prediction  when  there  might  be  sharp  decay  of  signal 
strength  (when  the  device  moved  out  of  the  door).  
Again, the sharp increases in RSSI in these five traces 
were  due  to  transition  to  a  different  AP.  The  three 
traces  on  the  bottom  were  collected  by  moving  from 
inside  to  outside  of  a  house.  In  the  first  trace  of  these 
three,  we  walked  away  from  the  house  and  then  came 
back; in the second, we walked away and did not come 
back;  in  the  third,  we  moved  away  by  driving  a  car 
slowly to a nearby stop sign. 
Two  parameters  are  important  in  trigger  prediction: 
the size of history window and the prediction step. We 
have  discussed  history  window  sizes  in  Section3.2. 
Here  we  discuss  how  to  choose  an  appropriate  value 
for  the  prediction  step,  the  parameter  j.  Recall  that  j 
specifies  that  at  step  i,  the  future  RSSI  value  we  are 
predicting is the RSSI value that would be at step i+j. 
Total # of LGD triggers  
# of Pre-Triggers generated  
# of Accurate Pre-Triggers 
# of canceled Pre-Triggers 
# of missed Pre-Triggers 
Avg. length of proactive window 
j=5 
25 
24 
24 
0 
1 
1.1 
j=10 
25 
31 
21 
10 
4 
1.5 
(seconds) 
Table 3. Trigger prediction results, WiFi traces 
Altogether,  there  are  25  LGD  triggers  generated. 
Table  3  presents  results  for  the  accuracy  of  trigger 
prediction  and  length  of  proactive  windows,  for  j  =5 
and  j  =10.  As  shown  in  the  table,  with  j  =10,  for 
accurate predictions, our algorithm was able to predict 
1.5 seconds ahead of time on average (larger proactive 
window  than  j  =5).  On  the  other  hand,  the  further  we 
predict  into  the  future,  the  larger  the  prediction  errors 
and more missed prediction or false alarms. In Table 3, 
we  can  see  that  with  j  =10,  there  were  10  canceled 
triggers  (false  alarms)  and  4  missed  predictions,  both 
numbers are larger than those of j =5. Hence, we chose 
j =5 in our algorithm implementation. 
On  the  other  hand,  Table  3  demonstrates  that  with 
j=5,  our  algorithm  was  able  to  successfully  predict  24 
out  of  the  25  triggers  from  all  the  traces,  and  on 
average  predictions  were  made  1.1  seconds  ahead  of 
time. In other words, by applying our trigger prediction 
algorithm, an indication that link would be going down 
could  be  sent  out  1.1  seconds  ahead  of  time,  thus 
giving  Connection  Manager  plenty  of  time  to  monitor 
other  alternative  connections,  select  one  with  good 
quality,  and  initiate  handover.  For  reference,  Figure  9 
Figure 8. Raw RSSI traces for evaluation of trigger prediction 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:21:48 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE436DSN 2008: Liu et al.shows  the  length  of  proactive  windows  of  all  accurate 
PreTriggers.  
network, the less that  an  application  would  experience 
bad performance, hence the shorter service interruption 
and  better  service  quality.  Therefore,  our  scheme’s 
ability to predict and send an early warning at time T1 
will significantly reduce service disruption time during 
handovers. 
Figure  9.  Length  of  proactive  windows  of 
accurate predictions (j=5).  
In the design of the smart triggering scheme, in order 
to  detect  and  predict  signal  decaying  as  early  as 
possible,  we  first  choose  exponential  average  as  the 
smoothing method, then apply a prediction method. To 
our  knowledge,  current 
implementations  of  WiFi 
drivers  do  not  have  mechanisms  to  predict  link  layer 
triggers, and the average method is commonly used for 
smoothing out signal strength, which we refer to as the 
average-RSSI-method.  To  demonstrate  the  benefits  of 
our algorithms, we compared the times that predictions 
of LGD triggers were made (the time PreTriggers were 
generated)  by  our  algorithms  with  the  times  that  such 
triggers  would  be  generated  by  the  average-RSSI-
method. Figure 10 illustrates the time that a PreTrigger 
is generated (T1), the time that the corresponding Link-
Going-Down  trigger  is  generated  by  using  our  trigger 
generation method (T2), and the time such a  trigger  is 
generated  by  using  average-RSSI-method  (T3). 3  The 
gap  between  T2  and  T3  is  due  to  using  exponential 
average  instead  of  average,  and  the  gap  between  T1 
and  T2  is  due  to  applying  trigger  prediction.  Results 
from all traces are plotted in Figure 11. On average, the 
PreTriggers  were  generated  2.66  seconds  earlier  than 
the times the corresponding triggers were generated by 
the average-RSSI-method.  
To further illustrate why the smart triggering scheme 
would  enable  reduction  of  service  interruption  and 
increase of overall link quality, Figure 10 also shows a 
zoom-in  view  of  raw  RSSI  from  T1  to  T3.  It  is 
extracted from the last trace in Figure 8. Each point in 
the  figure  corresponds  to  one  RSSI  measurement. 
Recall  that  we  set  LGD_TH  to  -76.  In  this  example, 
from  T1  to  T3,  50%  of  the  measurements  are  below 
LGD_TH, with the average value being -76.2. In other 
words, the link quality during time [T1, T3] is already 
shaky  and  indicates  bad  application  performance.  The 
earlier  the  connection  is  switched  to  a  better  link  or 
3  In 
the  average-RSSI-method,  a 
is  generated  by 
comparing the average RSSI with thresholds (Table 1) and applying 
the link status update algorithm. 
trigger 
Figure  10.  Zoom-in  view  of  raw  RSSI  and 
triggering times, for the last trace in Figure 8. 
Figure 11. Benefits of PreTrigger vs. the average-
RSSI-method for trigger generation.  
4.3 Results from WiMax traces 
In this section, we report some preliminary results of 
applying our algorithms to WiMax traces. We obtained 
a  set  of  WiMax  traces  collected  in  field  trials  with 