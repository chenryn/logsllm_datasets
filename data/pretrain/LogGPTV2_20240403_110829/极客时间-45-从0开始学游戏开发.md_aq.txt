## 如何使用 Lua 以及 liblua.a 来进行与 C 语言的绑定操作？我们现在开始使用 Lua 以及 liblua.a 来进行与 C 语言的绑定操作。首先，我们需要包含之前我们所定义的 lua.hpp 头文件，随后我们开始在 main入口函数处，定义一些变量。    #include "lua.hpp"int main(int argc, char ** argv){      int r;      const char* err;      lua_State* ls;       ….}在这里，我们定义了三个变量，其中 r 是用来接收返回值的；err是一个常量字符串，用来接收错误字符串并打印出来；而 lua_State\* ls 就是Lua 虚拟机的指针了。我们再来看接下来的代码。    ls = luaL_newstate();luaL_openlibs(ls);   在这两行代码中，首先初始化一个虚拟机（在 Lua 5.1 中，使用的函数是lua_open 来新建虚拟机），并且将虚拟机地址赋值给 ls指针。随后，我们拿到这个指针之后，就在之后的代码中"打开"Lua所需要用到的各种库。我们用到luaL_openlibs。我现在只是给你示范，你可以一个一个库单独打开。我们新建了虚拟机，并且打开了 Lua 类库。我们继续看下面的代码。    r = luaL_loadfile(ls, argv[1]);if(r){err = lua_tostring(ls, -1);if(err)printf("err1: %s\n", err);return 1;}r = lua_pcall(ls, 0, 0, 0);if(r){err = lua_tostring(ls, -1);if(err)     printf("err2: %s\n", err);return 1;}lua_close(ls); 我来具体解释一下。这段代码中，argv\[1\的是命令行输入的第一个内容。比如我们的程序叫 lua_test，那么我们在Windows 命令行中，输入 lua_test a.lua，那么其中 a.lua 就是 argv\[1\这个内容。luaL_loadfile我们在前面介绍过，就是载入文件并不运行。当然在这个期间，它会检查基础的语法。如果你少一个括号或者多一个引号，就会在这个时候给你一个错误信息，这个错误信息就是利用r 这个变量判断的。如果 r 的返回值不等于 0的话，那就是出错了。出错的时候，Lua 会将出错信息压栈顶，而栈顶是从 -1开始表示，所以我们要取出栈顶的错误信息 lua_tostring(ls,-1);，并且将它赋值给 err，最后由 err 打印出来。认为没有错误之后，就是过了这一关。第二关我们需要使用 lua_pcall函数，来调用 Lua脚本文件，其中第一个参数是虚拟机指针，第二个参数是传递多少参数给Lua，第三个参数是这个脚本返回多少值，第四个是错误处理函数，可以是0，那就是无处理函数。pcall 的返回值也是一样，如果不是 0 的话，就说明出错了。和之前的luaL_loadfile不同，这时候一般是运行时错误，比如运行时类型错误等等。同样的，pcall也会把错误信息压到栈顶，我们直接去将栈顶的内容转成 string就可以打印出来了。最后，我们将 Lua 虚拟机通过 lua_close 关闭。按常理来说，我们现在可以来运行一下效果了，你可以先等等，我们先写一段错误的Lua 代码，来看看执行起来会发生什么情况。    print "test running")我们故意少写一个括号，然后将源代码命名为a.lua，我们来运行看看。会出现一个这样的错误信息：\![](Images/83ec755f7481dc9f1eaba18024e413ea.png){style="margin: 0 auto"savepage-src="https://static001.geekbang.org/resource/image/cf/2a/cfad6d423a3c95bacba12b5e8dc3782a.jpg"}在发现语法错误后，程序就会报错，另外，如果你输入了一个根本不存在的文件，比如我们这么运行，test_luaxxx.lua，也会在 loadfile 的时候出错。
## 小结我们今天的内容就到这里。下次我会进一步把 Lua的脚本嵌入的细节呈现在你面前。我们来总结一下今天的内容。1.  因为 Lua 脚本足够轻量级，几乎没有冗余的代码。Lua    虚拟机的执行效率几乎可以媲美 C/C++ 的执行效率。所以我们选择使用 Lua    脚本来嵌入 C/C++ 硬代码。2.  Lua 脚本在 C/C++ 语言里面嵌入，需要先声明一个虚拟机并且赋值给指针。3.  Lua 脚本需要先 loadfile 再 pcall 调用脚本文件，loadfile    会检查最基本的脚本文件内容，比如文件是否存在，比如脚本代码是否出错，而    pcall 会在运行时出错的时候将错误压至栈顶。4.  Lua 错误会将错误压制栈顶，我们要取出来，需要使用 -1    下标取出栈顶的内容，并转成 string 打印。给你留一个小问题吧。如果直接使用 luaL_dofile，相对于把 loadfile 和 pcall分开写，这样有什么优劣呢？欢迎留言说出你的看法。我在下一节的挑战中等你！![](Images/687aa95b3803eb0079b384dbad39d165.png){savepage-src="https://static001.geekbang.org/resource/image/1d/cf/1dddc22b262072c5c2e8b4937907f7cf.jpg"}
# 第26讲 \| 脚本语言在游戏开发中有哪些应用？上一次，我们谈到了如何在游戏中嵌入脚本语言，我们用的语言是 Lua。Lua语言具有轻量级、速度快的特点，而且 API的调用也非常方便和直观。现在，我们仍然拿 Lua脚本，试着把它应用在我们开发的游戏中。我们使用 C 语言来对 Lua脚本的绑定做一次深入的剖析，然后来看一下，在游戏开发中绑定了脚本语言后，脚本语言能做些什么事情。首先，我们要明白一点，事实上**任何模块都可以使用脚本语言编写**。当然在游戏开发的过程中，需要分工明确，如果不分工的话，效率可能会比较低。在需要某些效率要求非常高的情况下，一般是用 C、C++ 或 ASM语言，将底层模块搭建好，然后将一些逻辑部分分出来，给脚本语言处理。比如我们熟知的服务器端，可以使用C/C++ 来编写服务器端的 IOCP 或者 epoll处理；而接收、发送、逻辑处理等等，都可以使用绑定脚本的方式编写。我们在编写的过程中，需要对 C/C++的语言和代码有个了解，我们需要先考虑这个函数。    int test_func(lua_State *L)    {         return 0;    }这只是一个空的 C 函数，在这个函数里面，我们看到它的传入参数是lua_State，接受一个指针 L。随后，这个函数返回一个 0。lua_State 是 Lua 虚拟机的对象指针，也就是我们需要把前面 new出来的一个虚拟机传进去，才可以保证在这个函数里面，使用的是一致的虚拟机。``{=html}这个函数的作用是，**只要注册到了 Lua 虚拟机里面，它就是 lua的一个函数，其中在 lua 函数中，传入的参数由函数内部决定**。比如我可以这么写：    int test_func(lua_State *L)    {         const char *p1 = lua_tostring(L, 1);         const char *p2 = lua_tostring(L, 2);         // .... do something         lua_pushstring(L, "something");         return 1;    }这里面，lua_tosting就是这个函数的传入参数，传入的是一个字符串的参数；第二个参数也是字符串参数，其中lua_tosting 的第二个参数 1 或者 2，表明的是在 Lua虚拟机的堆栈中从栈底到栈顶开始计数，一般先压入的参数在第一个，后压入的在第二个，以此类推。返回1 的意思是，这个函数会返回一个参数，这个参数就是我们前面 lua_pushstring后压入的这个内容 something，这就是返回的参数。那么这个函数究竟怎么注册成为 Lua 函数呢？我们来看这段代码。    lua_register(L, "test", &test_func); lua_register 函数的功能是，注册 C 函数到 Lua 虚拟机。其中 L是虚拟机指针。这个在前面的代码都有说到，而第二个参数 test 就是注册在 Lua虚拟机中的函数名，所以这个函数名叫 test。第三个参数是函数指针，我们把test_func 这个函数传入到 lua_register 函数中。这样，一个函数就注册好了。那么，如果我们在游戏中有许多许多的函数需要注册到 Lua中，那么这种写法是不是太慢了，有没有一种快捷的写法来支持注册等操作呢？如果你没有 C/C++ 的语言基础，或者 C/C++语言基础比较薄弱，下面的内容可能需要花一点时间消化，我也会竭尽所能解释清楚代码的意思，但如果你已经是个C/C++ 程序员，那么下面的代码对你来说应该不会太难。我们需要使用lua_register，我们先看它里面有什么参数。第一个是**字符串**，也就是**char\*；**第二个是**函数指针**，也就是**int(*)(lua_State*)** 这种形式的。那么，我们需要定义一个 struct 结构，这个结构可以这么写：       #define _max 256        typedef struct _ph_func        {              char ph_name[_max];              int (*ph_p_func)(lua_State*);        } ph_func; 我们定义了一个 struct 结构，这个结构的名字叫\_ph_func，名字叫什么并没有关系，但是最开始有一个typedef，这说明在这个结构声明完后，接下来最后一行 ph_func就是替代最初定义的那个 \_ph_func 的名字，替代的结果是，**ph_func 等同于struct \_ph_func**，这在很多 C 语言的代码里面经常能见到。接下来，我们看到 char ph_name\[\_max\]。其中 \_max 的值为256。我相信你应该能理解这句话。第二个变量就是我们所看到的函数指针，其中ph_p\_func是函数指针，其中函数指针指向的内容目前暂时还没有确定，我们将在后续初始化这个结构变量的时候进行赋值。我们来仔细看一下这两段宏的内容。    #define func_reg(fname) #fname, &ph_##fname#define func_lua(fname) int ph_##fname(lua_State* L)其中 func_reg是在给前面那个结构体初始化赋值的时候使用的，因为我们知道，如果我们需要给这个结构体赋值，看起来的代码是这样：    ph_func pobj =  {"test", &test_func};那么由于我们有大量的函数需要注册，所以我们将之拆分为宏，其中 #fname的意思是，将 fname 变为字符串，而 ph\_##fname 的意思是使用 \##字符，将前后内容连接起来。通过这个宏，比如我们输入一个 a 赋值给 fname，那么 #fname 就变成字符串\"a\"，通过 ph\_##fname，结果就是 ph_a。接下来的代码，是方便在代码中编写一个一个 lua注册函数用的，所以很明显，和上述的宏一样，我们只需要输入a，那么这个函数就变成了 int ph_a(lua_State\* L)；定义好了这两个宏，我们怎么来应用呢？    func_lua(test_func);          ph_func p_funcs[] =    {          { func_reg(test_func) },    };    func_lua(test_func)    {         const char *p1 = lua_tostring(L, 1);         const char *p2 = lua_tostring(L, 2);         // .... do something         lua_pushstring(L, "something");         return 1;    }    void register_func(lua_State* L)    {          int i;          for(i=0; i`{=html}我们可以自己定义一系列的规则，然后通过顺利地运行 gcc、cl等命令来进行源代码编译。我们先定义一系列函数，来固定我们在 Lua 中所使用的函数。    int compiler(lua_State*);int linker(lua_State*);int target(lua_State*);int source_code(lua_State*);int source_object(lua_State*);int shell_command(lua_State*);int compile_param(lua_State*);int link_param(lua_State*);int make(lua_State*);   这些都是注册到 Lua 内部的 C/C++ 函数。我们现在要将这些函数封装给 Lua使用，但是在这之前，我们要将大部分的功能都在 C/C++ 里编写好。随后，我们来看一下，在 Lua 脚本里面，具体是怎么实现 Make 命令操作的。    target("test.exe");linker("c:\\develop\\dm\\bin\\dmc.exe");compiler("c:\\develop\\dm\\bin\\dmc.exe"); source_code("c.cpp", "fun.cpp", "x.cpp");source_object("c.obj", "fun.obj", "x.obj"); compile_param( "$SRC", "-c",                      "-Ic:/develop/dm/stlport/stlport",                    "c:/develop/dm/lib/stlp45dm_static.lib"); link_param("$TARGET", "$OBJ");make();shell_command("del *.obj");首先，第一行对应的就是目标文件 target 函数，后续的每一个 Lua函数都能在最初的函数定义里找到。在这个例子当中，我们使用的是 DigitalMars 的 C/C++ 编译器，执行文件叫dmc.exe。我们可以看到，在 linker 和 compiler 函数里都填写了dmc.exe，说明编译器和链接器都是 dmc.exe 文件。现在来看一下在 C/C++ 里面是如何定义这个类的。    struct my_make{      string target;      string compiler;      string linker;      vector source_code;      vector source_object;      vector c_param;      vector l_param;};为了便于理解，我将 C++ 类声明改成了struct，也就是把成员变量改为公有变量，你可以通过一个对象直接访问到。随后，我们来看一下如何将 target、compiler 和 linker 传入到 C 函数里面。    int compiler(lua_State* L){      string c = lua_tostring(L, 1);      get_my_make().compiler = c;      return 0;}int linker(lua_State* L){      string l = lua_tostring(L, 1);      get_my_make().linker = l;      return 0;       }int target(lua_State* L){      string t = lua_tostring(L, 1);      get_my_make().target = t;      return 0;} 在这三个函数里面，我们看到，get_my_make 函数就是返回一个 my_make类的对象。这个具体就不进行说明了，因为返回对象有多种方式，比如 new一个对象并且 return，或者直接返回一个静态对象。随后，我们直接使用了 Lua 函数 lua_tostring，来得到 Lua传入的参数，比如如果是 target的话，我们就会得到"test.exe"，并且将这个字符串传给 my_make 对象的 stringtarget 变量。后续的 compiler、linker 也是一样的道理。我们接着看下面两行。    source_code("c.cpp", "fun.cpp", "x.cpp");source_object("c.obj", "fun.obj", "x.obj");这两行填入了 cpp 源文件以及 obj中间文件，这些填入的参数并没有一个固定值，可能是 1 个，也可能是 100个，那在 C/C++ 和 Lua 的结合里面，我们应该怎么做呢？我们看到一个函数lua_gettop。这个函数是取得在当前函数中，虚拟机中堆栈的大小，所以返回的值，就是堆栈的大小值，比如我们传入3 个参数，那么返回的就是 3。接下来可以看到，使用 Lua 的计数方式，从 1开始计数，并且循环结束的条件是和堆栈大小一样大，然后就在循环内，将传入的参数字符串，压入到C++ 的 vector 中。随后的 source_object、compile_param 和 link_param都是相同的方法，将传入的参数压入到 vector 中。你可能要问了，我在 Lua 的代码中看到了 []{.MathJax_Previewstyle="color: inherit; display: none;"}[``{=html}[[T[]{style="display: inline-block; overflow: hidden; height: 1px; width: 0.144em;"}]{#22.html#MathJax-Span-3.mistyle="font-family: MathJax_Math-italic;"}[A]{#22.html#MathJax-Span-4.mistyle="font-family: MathJax_Math-italic;"}[R]{#22.html#MathJax-Span-5.mistyle="font-family: MathJax_Math-italic;"}[G]{#22.html#MathJax-Span-6.mistyle="font-family: MathJax_Math-italic;"}[E[]{style="display: inline-block; overflow: hidden; height: 1px; width: 0.049em;"}]{#22.html#MathJax-Span-7.mistyle="font-family: MathJax_Math-italic;"}[T[]{style="display: inline-block; overflow: hidden; height: 1px; width: 0.144em;"}]{#22.html#MathJax-Span-8.mistyle="font-family: MathJax_Math-italic;"}[、]{style="font-family: STIXGeneral, \"Arial Unicode MS\", serif; font-size: 80%; font-style: normal; font-weight: normal;"}]{#22.html#MathJax-Span-11.mo}]{#22.html#MathJax-Span-10 .mrow}]{#22.html#MathJax-Span-9.texatom}]{#22.html#MathJax-Span-2.mrow}[]{style="display: inline-block; width: 0px; height: 2.308em;"}]{style="position: absolute; clip: rect(1.367em, 1005.37em, 2.638em, -999.998em); top: -2.304em; left: 0em;"}]{style="display: inline-block; position: relative; width: 5.367em; height: 0px; font-size: 125%;"}[]{style="display: inline-block; overflow: hidden; vertical-align: -0.291em; border-left: 0px solid; width: 0px; height: 1.356em;"}]{#22.html#MathJax-Span-1.mathstyle="width: 6.732em; display: inline-block;"}``{=html}[$TARGET、$]{.MJX_Assistive_MathMLrole="presentation"}]{#22.html#MathJax-Element-1-Frame .MathJaxtabindex="0" style="position: relative;"mathml="TARGET、"role="presentation"}$$OBJ、\$SRC等字样的字符串，这些字符串的处理在哪里，这些字符串又是做什么的呢？这些字符串是替代符号，你可以理解为 C 语言中 printf函数的格式化符号，例如 "%d%s"等等，虽然在这里，这些符号都是自己定义的，但是我们仍然需要解析它们。其实解析的步骤并不难，我们只需要将 vector内的内容提取出来，对比是不是字符串 \$TARGET等，如果是的话，就被替代为前面我们在 target 函数或者 source_code函数中所定义的内容。我们拿 source_code 部分来举例，来看一下部分代码。    void run()      {               string command_line;               string src = "$SRC";               string tar = "$TARGET";               string obj = "$OBJ";        for(int i = 0; i  学习最新的资料。**Java**是公认的编写网络服务的第一大语言。在运行性能和开发效率上，有很好的折中效果。Java拥有众多的中间件和开发库，调试方便，一般的运维人员也有极为广泛可用的第三方维护工具可以使用。缺点是，Java的运行效率虽然有了质的飞跃，但因为中间隔了一层虚拟机，所以仍然比不上系统开发语言编写的软件。另外，Java的发布和部署需要众多的依赖包和库，软件体积庞大也是其重要弊病。``{=html}如果深入理解，**Python、Ruby**这两种语言的相似程度以及对系统的支持程度，可以用C 和 C++ 的相似程度来相比。你或许会很疑惑，毕竟 Python 和 Ruby的语法几乎不一样，Python 需要格式化源代码，而 Ruby 并不需要；Python更严谨，Ruby 更开放；Python 用户更多，Ruby 用户更少。不可否认的是，两种语言编写网络程序都非常方便，也非常高效。两种语言都可以在100行内编写出一个简单的、完全可以直接使用的网络服务器程序。但是这两种语言的弊病也很明显，那就是速度不够快。比之Java，或许运行效率更慢一点，但由于目前机器硬件水平的提升，软件效率不足的缺点一部分已经被硬件所弥补，但是仍然不能否认，Python、Ruby语言适合 IO 密集型开发，而不适合计算密集型的开发。Python 的书籍比 Ruby 多好几倍，然而你如果仔细去看的话就会发现，Ruby的书籍质量明显比 Python 高几个等级，所以如果要看好的脚本语言的书籍，Ruby相关的书籍是首选，我这里推荐一本[Programming inRuby](https://book.douban.com/subject/2032343/)，有兴趣的话可以找来看看。**Node.js**从前端语言变成后端语言，让编程界眼前为之一亮。随后的发展大家也有目共睹，Node.js由于使用 JavaScript语言语法，所以我们一般采用事件驱动的形式，以及非阻塞的模型来进行网络开发。因为这些特点，它非常适合做分布式的、数据密集型的工作。但是缺点也很明显，Node.js是单线程，无法很好地使用多核 CPU，这个问题在 Python、Ruby语言中也很明显。或许你没有听说过**Erlang**这种语言，这种语言最初是由爱立信开发的。它的初衷是让程序员应对大规模并发、分布式、软件实时并行系统进行编程。最早期的版本在80 年代就出现了，但是一直到 1998 年才开源。Erlang 也不是系统语言，它有自己的虚拟机和解释器。当然和 Java一样，Erlang 也支持将代码编译为 Native Code 来运行。Erlang的缺点就是类型问题，它并非强类型语言。由于是事件编程，所以导致会在运行时无法匹配类型而出错，不过这些问题可以使用规范的编程方法来规避。这么多种编程语言，整合起来看，大致可以把他们分为三类。**系统级编程语言**，诸如汇编、C、C++。这种编程语言执行效率快，并发量也比较高，作为编写网络服务的第一语言，一台服务器就能支撑许多人。缺点是开发效率不够高，需要几年以上经验的程序员才能搞定。**专门为网络服务器开发的语言**，诸如Go、Erlang。这种语言编写高并发和开发效率都不是问题，有很好的折中效果。缺点就是语言比较新，有许多的坑等着后来的程序员去填，而且语言、语法等系统机制要随着进一步的发展才能稳定下来。**解释型脚本语言**，诸如 Python、Ruby。这类语言的开发效率非常高效，在现在的服务器硬件上，也能支撑不少用户，但是唯一的缺点是，运行效率低下。虽然也有解决方案，但仍然不能对抗高性能的系统编程语言和专业网络开发的语言。
## 如何选择一种合适的语言来编写网络服务？
### Web 服务现在有一种流行的说法叫前后端分离。对于编写 C/S结构的程序员，听到这种说法应该会比较蒙，客户端和服务器端难道不是本来就分离的吗？很长的一段时间里，在 Web 的世界中，前后端都是混合在一起编写的，比如 PHP的方式，只有用到 Ajax交互的时候，才需要用到后端的代码。但是前后端一分离，后台就需要做更多的工作了，当然前端的工作也不会变少。编写 Web 服务，需要 HTTP 和 HTTPS 的服务体系，那么在这种情况下，使用nginx、Apache 作为静态页面路由，Java、Tomcat、Python、Ruby等脚本语言就有了用武之地。因为页面只需要使用 JSON 交互即可。所以，编写 Web 服务，我们可以选择Java、Python、Ruby。但是如果公司财力物力有限，再考虑到招人成本的问题，次选也可以是Java 语言，第一是写 Java 的人够多，第二是 Java成熟的类库够多，因此，一旦出问题，有解决经验的人也比较多。
### Socket 服务传统 TCP/IP 和 UDP 服务，或者最近的 WebSocket等，都需要快速响应和并发操作，在这种情况下，系统级编程语言和网络编程语言就可以派上用场了。如果公司的项目需要更快更高效，并且财力也允许，那么选择C、C++、Go、Erlang 等编程语言未尝不是一种选择。当然 Java也能很好地提供服务，但是从业务上来讲，既然选择了 Socket服务模式，那么就必然是对并发量有一定的要求，所以选择上述这些语言更合适。
### 混合模式这类业务，既有 HTTP/HTTPS 的服务，也有 Socket服务，那么如何平衡两者之间的语言成本？如何平衡程序员之间技术栈的问题呢？如果要做一款短期内必须上线的产品，我建议选择成熟的、有大量解决方案的，开发人员不短缺的语言，比如Java；或者能快速做出原型的语言，比如服务器专有语言Go。如果是长期发展的产品，并不那么着急成型，那么选择稳定成熟的，人员素质高的语言，比如Python、Java 等。至于平衡技术栈的问题，首先要选择网上有众多解决方案的语言，其次是找成熟的语言，比如Python、Java、Ruby。如果针对某种特殊的产品，比如并发要求特别高的，那么只有选择系统语言或者专门的语言，比如Go、C++ 等。看到这里，你是不是觉得 Java语言是一种万能药，或者是银弹？错了，这个世界上没有银弹。Java虽然有其独特的优势，但是其被人诟病的地方，也是有不少的。第一点莫过于速度。就算拥有 JIT 编译，总体速度仍然比不上C/C++，但是事实上这些因素综合考虑并不算特别大的弊病，因为硬件资源提升后，速度这些问题已经可以"得过且过"了。那么从语言本身来看，如果说 C/C++语言本身的弊病是因为系统平台导致的，那么 Java 语言的弊病就是因为继承自C++，却没有做更彻底的改革而导致的。我随便举一个例子，比如说 switch case 判断语句，硬生生地从 C/C++处直接继承了下来，因为 C/C++ 只允许使用 int、enum（其实是int）、char（提升为 int）作为判断类型，而 Java也是直接将这套规范继承了下来。再比如，在 Java 里面，异常检查也是一个痛苦的根源，程序员不得不写下无数try catch语句以使得将捕获的异常，转变为运行时的异常，然后再将之抛出去，这样一来，使用Java 编写的 API 将缺少灵活和扩展性。那如果选择了 Python 或者 Ruby等脚本语言进行开发，却需要大量高并发的操作该怎么办呢？我们可以选择多进程（不是多线程）编程的方式进行开发，代码尽量简洁、高效，一个进程兼顾一个任务，进程之间的通信方式要尽量高效、简洁，比如可以使用自定义的队列等方式。