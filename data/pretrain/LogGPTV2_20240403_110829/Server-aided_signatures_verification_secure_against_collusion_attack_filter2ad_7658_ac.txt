that the adversary does not know the input of the predicate.
Moreover, it has been suggested [11] that there exists a dele-
gation protocol that is secure if and only if A is private from
a simpli(cid:12)cation of an existing protocol [10]. Finally, the pro-
tocol for public points in [11] is more e(cid:14)cient than that its
counterpart in [4]. For these reasons, we choose to instan-
tiate S with the protocol PVPC (an acronym for \Public
Variable and Public Constant") [11] which we review below.
• Pre-computation. The client (cid:12)rst picks a genera-
tor Q ∈ G and a random exponent rQ ∈R Zp; then
computes ~Q = QrQ and ^e(A; ~Q) = ^e(A; Q)rQ .
n
i=1 Bbi
• Request. The client sends to the server ⟨A; B0 =
• Response. The server sends ⟨(cid:11)0; (cid:11)1; : : : ; (cid:11)n⟩, where
i ; B1; : : : ; Bn⟩, where bi ∈R Zp.
∏
n and ^e(A; ~Q)
{(cid:11)i}, ⊥ otherwise.
• Output. The client veri(cid:12)es if (cid:11)i ∈ GT for i = 0 to
i = (cid:11)0 all hold. If so, outputs
(cid:11)i = ^e(A; Bi).
n
i=1 (cid:11)bi
~Q ·∏
Limitations. A more (cid:13)exible type of pairing delegation pro-
tocol is PVPV (an acronym for \Public Variable and Public
404
Variable") which is not available to the best of our knowl-
edge. The other limitation is that the knowledge of the point
A is required in the above PVPC protocol. We remark that
there exists non-batch PVPC protocol which does not re-
quire the knowledge of the constant A in the precomputation
stage [4].
4.3 Our SAV Protocol for Short Signatures
Following our generic protocol, we de(cid:12)ne function FBLS
and predicate VBLS to build a SAV protocol for Boneh-Lynn-
Shacham signature [3], with the notation in Table 1.
• Function FBLS : (Param; pk; m; (cid:27)) 7→ (g; (cid:27); pk; H0(m)).
• Predicate VBLS : ^e(C1; C2) ?= ^e(C3; C4) with C1 = g,
C2 = (cid:27), C3 = pk, C4 = H0(m).
The veri(cid:12)er engages in the pairing delegation protocol S
with the server and obtains the two pairing values (cid:11)0 =
^e(g; (cid:27)) and (cid:11)1 = ^e(pk; H0(m)). Finally, the veri(cid:12)er checks if
the predicate is true, that is, whether (cid:11)0
?= (cid:11)1.
Since the pairing delegation protocol S we employ is ca-
pable of delegating pairing computations in batch, the veri-
(cid:12)er can o(cid:15)oad the veri(cid:12)cation of many signatures from the
same signer to further reduce the computation overhead.
Speci(cid:12)cally, the veri(cid:12)er can delegate the computation of
{(cid:11)0i = ^e(g; (cid:27)i)} and {(cid:11)1i = ^e(pk; H0(mi))} in batch.
Unfortunately, using a PVPC protocol instead of a PVPV
protocol, the pairing of ^e(C1; C2) and ^e(C3; C4) cannot be
batched since only C1 = g is a constant.
ZSS , V′
BB
for ZSS [14], and Boneh-Boyen [1] as below. Note that we
omit the exponent vi when it is equal to 1 for brevity.
We can de(cid:12)ne functions F′
BB and predicates V′
ZSS , F′
• Function F′
ZSS :
(Param; pk; m; (cid:27)) 7→ ((g; H1(m)); (cid:27); pk; (cid:27); g; g).
• Predicate V′
ZSS : ^e(C v1
1 ; C2)^e(C3; C4) ?= ^e(C5; C6) with
C1 = g, v1 = H1(m), C2 = (cid:27), C3 = pk, C4 = (cid:27),
C5 = g, C6 = g.
• Function F′
BB : (Param; (pkX ; pkY ); m; ((cid:27)1; (cid:27)2)) 7→
((g; H1(m)); (cid:27)1; pkX ; (cid:27)1; (pkY ; (cid:27)2); (cid:27)1; g; g).
• Predicate V′
BB :
1 ; C2)^e(C3; C4)^e(C v5
5 ; C6) ?= ^e(C7; C8) with C1 =
^e(C v1
g, v1 = H1(m), C2 = (cid:27)1, C3 = pkX , C4 = (cid:27)1, C5 =
pkY , v5 = (cid:27)2, C6 = (cid:27)1, C7 = g, C8 = g.
In both ZSS and BB, we have the evaluation of ^e(g; g)
which is a constant independent of the signer’s public key
or the signature. The client can simply store it without
re-computing it every time.
Comparison with Batch Signature Veri(cid:12)cation. The con-
cepts of using batch pairing delegation for verifying many
signatures and batch signature veri(cid:12)cation look almost the
same at the (cid:12)rst glance. However, there are subtle di(cid:11)er-
ences. While the computation of pairing are delegated in
batch, the pairing values are not aggregated together and the
client can get each of the individual pairing value. In other
words, the client is able to verify each of the signature by
simple equality checks (and possibly with exponentiations in
GT ). On the other hand, extra measures are usually needed
to identify the invalid signature(s) in batch veri(cid:12)cation.
With respect to concrete instantiations available today, for
the case of batching the signatures form di(cid:11)erent n signers,
(n+1) pairing computations are needed by the batch veri(cid:12)er
for BLS proposed in [8].
In our approach, these pairings
are delegated, and the client only requires to do O(n) of
exponentiations.
In the batch veri(cid:12)er approach [8], O(n)
of exponentiations only involve small exponents, which may
also be used in the batch pairing delegation protocol [11]
since secrecy of the points are not a concern here.2
Using the PVPC protocol [11] in verifying n signatures
from the same signer produced by ZSS or BB require 2 or
3 times of pairing computations (at the server side) respec-
tively than the normal approach. The cost can be justi(cid:12)ed
when the batch PVPC protocol is faster than n invocations
of the non-batch protocol by a factor of 3. Lastly, we remark
that we are not aware of any batch veri(cid:12)er for ZSS or BB.
Finally, we remark that these two approaches can be used
together, i.e., (cid:12)rst identify what are the required pairing
computations in a batch veri(cid:12)er, then these computations
can still be delegated by using a pairing delegation protocol.
4.4 Our Protocol for Aggregate Signatures
For an aggregated signature (cid:27), a list of messages {mi}n
and the public key list of the corresponding signers {pki
}n
i=1
i=1,
we de(cid:12)ne function Fagg and predicate V to build a SAV
protocol for Boneh et al.’s aggregate signature [2].
• Function Fagg : (Param; pk1; : : : ; pkn; m1; : : : ; mn; (cid:27))
7→ (g; (cid:27); pk1; H0(m1); : : : ; pkn; H0(mn)).
• Predicate Vagg: ^e(C1; C2) ?=
n
i=1 ^e(C2i+1; C2i+2) with
C1 = g, C2 = (cid:27), C2i+1 = pki, C2i+2 = H0(mi) for
i = 1 to n.
∏
∏
The veri(cid:12)er engages in the pairing delegation protocol S
with the server and obtains the pairing values (cid:11)0 = ^e(g; (cid:27))
and (cid:11)i = ^e(pki; H0(mi)) for i = 1 to n. Finally, the veri(cid:12)er
n
checks if the predicate is true, that is, whether (cid:11)0
i=1 (cid:11)i.
Again, we remark that we are not aware of any protocol of
type PVPV and hence the delegation of these pairing com-
putations cannot be batched together. On the other hand,
computation overhead can be reduced further by batch del-
egation of pairing values for the same signer.
4.5 Security Analysis
?=
Security Properties of Pairing Delegation. Two security re-
quirements of pairing delegation protocol include complete-
ness and correctness. Informally, completeness means that
the client can obtain the correct values after interacting with
an honest server; and correctness means that the client can
detect (with high probability) when the server is cheating,
which means the (cid:12)nal result consists of a wrong value. The
formal de(cid:12)nitions can be found in [11].
Security of Our Protocol. Existential unforgeability follows
from the completeness of S and the unforgeability of the
underlying signature scheme. If a forgery passes the veri(cid:12)-
cation algorithm of the underlying signature, i.e., it satis(cid:12)es
the predicate determined by the veri(cid:12)cation algorithm, by
2One can use small exponents {bi} in the PVPC protocol.
However, at least one of them should be chosen from a large
domain. Otherwise an adversary may guess the hidden ~Q
correctly and break the protocol.
405
the completeness of S, the delegated predicate will evaluate
to the same value, and hence the forgery will pass (an honest
execution of) AidedVerify.
Soundness also follows readily from the soundness of S. If
the delegated evaluation of the predicate mismatches with
a direct evaluation of the predicate, there must exist one
wrongly-computed pairing value that is undetected by the
client, which breaks the soundness of S. This can always be
identi(cid:12)ed by simply recomputing all the pairings involved
which can be done in a polynomial time.
5. REFERENCES
[1] Dan Boneh and Xavier Boyen. Short Signatures
Without Random Oracles and the SDH Assumption in
Bilinear Groups. J. Cryptology, 21(2):149{177, 2008.
[2] Dan Boneh, Craig Gentry, Ben Lynn, and Hovav
Shacham. Aggregate and Veri(cid:12)ably Encrypted
Signatures from Bilinear Maps. In EUROCRYPT,
pages 416{432, 2003.
[3] Dan Boneh, Ben Lynn, and Hovav Shacham. Short
Signatures from the Weil Pairing. J. Cryptology,
17(4):297{319, 2004.
[4] Benoit Chevallier-Mames, Jean-Sebastien Coron, Noel
McCullagh, David Naccache, and Michael Scott.
Secure Delegation of Elliptic-Curve Pairing.
Cryptology ePrint Archive, 2005/150, 2005.
[5] Sherman S. M. Chow, Joseph K. Liu, and Jianying
Zhou. Identity-based online/o(cid:15)ine key encapsulation
and encryption. In ASIACCS, 2011. To appear.
[6] Sherman S. M. Chow, Siu-Ming Yiu, and Lucas
Chi Kwong Hui. E(cid:14)cient Identity Based Ring
Signature. In ACNS, pages 499{512, 2005.
[7] Cheng-Kang Chu, Wen Tao Zhu, Sherman S. M.
Chow, Jianying Zhou, and Robert H. Deng. Secure
mobile subscription of sensor-encrypted data. In
ASIACCS, 2011. To appear.
[8] Anna Lisa Ferrara, Matthew Green, Susan
Hohenberger, and Michael (cid:31)stergaard Pedersen.
Practical Short Signature Batch Veri(cid:12)cation. In
CT-RSA, pages 309{324, 2009.
[9] Marc Girault and David Lefranc. Server-Aided
Veri(cid:12)cation: Theory and Practice. In ASIACRYPT,
pages 605{623, 2005.
[10] Bo Gyeong Kang, Moon Sung Lee, and Je Hong Park.
E(cid:14)cient Delegation of Pairing Computation.
Cryptology ePrint Archive, Report 2005/259, 2005.
[11] Patrick P. Tsang, Sherman S. M. Chow, and Sean W.
Smith. Batch Pairing Delegation. In IWSEC, pages
74{90, 2007.
[12] Zhiwei Wang, Licheng Wang, Yixian Yang, and
Zhengming Hu. Comment on Wu et al.’s Server-Aided
Veri(cid:12)cation Signature Schemes. Intl. J. of Network
Sec., 10(2):158{160, 2010.
[13] Wei Wu, Yi Mu, Willy Susilo, and Xinyi Huang.
Server-Aided Veri(cid:12)cation Signatures: De(cid:12)nitions and
New Constructions. In ProvSec, pages 141{155, 2008.
[14] Fangguo Zhang, Reihaneh Safavi-Naini, and Willy
Susilo. An E(cid:14)cient Signature Scheme from Bilinear
Pairings and Its Applications. In PKC, pages 277{290,
2004.