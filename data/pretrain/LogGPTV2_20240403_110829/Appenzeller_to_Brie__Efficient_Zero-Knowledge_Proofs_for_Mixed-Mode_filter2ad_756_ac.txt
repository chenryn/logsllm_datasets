( 𝑗)
𝑚−1), id( 𝑗)} 𝑗 ∈[𝑁 ]):
𝑖=0 2𝑖𝑐( 𝑗)
(1) If 𝑐( 𝑗) = 𝑚−1
Functionality FConv
FConv extends the existing functionality F 2,𝑀
ComZK
taining two commitment instances:
(1) [·]2 allows to commit to values from Z2; and
(2) [·]𝑀 allows to commit to values from Z𝑀,
plus the interface VerifyConv. It is assumed that the id’s
used for VerifyConv have been used with the respective
instance of Input prior to calling this method.
VerifyConv: Upon P andV inputting (VerifyConv, 𝑁 , 𝑚,
{(id
( 𝑗)
0 , . . . , id
(success) to V, otherwise output abort.
Figure 1: Functionality FConv checking edaBits
Functionality FDabit
This functionality extends F 2,𝑀
with the extra function
1,𝑗)} 𝑗 ∈[𝑁 ] and
VerifyDabit that takes a set of IDs {(id
= 𝑏id1,𝑗 where 𝑏id0,𝑗 ∈ Z2 an 𝑏id1,𝑗 ∈ Z𝑀
verifies that 𝑏id0,𝑗
for all 𝑗 ∈ [𝑁]. It is assumed that the id’s have been Input
prior to calling this method.
Verify: On input (VerifyDabit, 𝑁 , {(id
1,𝑗)} 𝑗 ∈[𝑁 ])
by P and V where (id
(1) If 𝑏id0,𝑗 = 𝑏id1,𝑗 for all 𝑗 ∈ [𝑁], then output (success)
0,𝑗 , 𝑏id0,𝑗), (id
to V, otherwise output abort.
Figure 2: Functionality FDabit checking daBits.
0,𝑗 , id
0,𝑗 , id
1,𝑗 , 𝑏id1,𝑗) ∈ st.
On a high level, ΠConv, in Figure 3, consists of three phases:
(1) Initially, P commits to auxiliary random edaBits, daBits and
multiplication triples necessary for the check. The daBits are
verified separately, and then V chooses a random permutation.
(2) After permuting the edaBits and multiplication triples, both
parties run an implicit cut-and-choose phase. Here, P opens 𝐶
of the edaBits and triples, which are checked by V.
(3) We place each conversion tuple into one of 𝑁 buckets, each of
which contains a conversion tuple ([𝑐0]2, . . . , [𝑐𝑚−1]2, [𝑐]𝑀),
and a set of 𝐵 edaBits {([𝑟0]2, . . . , [𝑟𝑚−1]2, [𝑟]𝑀)𝑖}𝐵−1
𝑖=0 . None
of these have been proven consistent, but 𝐶 edaBits coming
from the same pool have been opened in the previous step.
Now, over 𝐵 iterations the prover and verifier for each 𝑗 ∈
[𝐵] compute [𝑐 + 𝑟 𝑗]𝑀 = [𝑐]𝑀 + [𝑟 𝑗]𝑀 and use an addition
circuit to check that ([𝑒0]2, . . . , [𝑒𝑚]2) = ([𝑐0]2, . . . , [𝑐𝑚−1]2)+
([𝑟0]2, . . . , [𝑟𝑚−1]2). The addition circuit is evaluated using the
multiplication triples (which also may be inconsistent).
For the checks within each bucket, we use the two sub-protocols
convertBit2A (Figure 4) and bitADDcarry (Figure 5). The former
converts an authentication of a bit [𝑏]2 into an arithmetic au-
thentication [𝑏]𝑀 while the latter adds two authenticated values
([𝑥0]2, . . . , [𝑥𝑚−1]2) and ([𝑦0]2, . . . , [𝑦𝑚−1]2). This uses a ripple-
carry adder circuit, which satisfies the following weak tamper-
resilient property, as observed in [16].
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea196]2, . . . , [𝑟 ( 𝑗)
𝑚−1]2, [𝑟 ( 𝑗)]𝑀) 𝑗 ∈[𝑁 𝐵+𝐶].
and
V
send
0 ]2, . . . , [𝑐(𝑖)
(VerifyDabit, 𝑁 𝐵,
𝑚−1]2, [𝑐(𝑖)]𝑀}𝑖∈[𝑁 ].
([𝑥 ( 𝑗)]2, [𝑦( 𝑗)]2, [𝑧( 𝑗)]2) 𝑗 ∈[𝑁 𝐵𝑚+𝐶𝑚]
Protocol ΠConv
Assume that FDabit contains 𝑁 committed conversion tu-
ples {[𝑐(𝑖)
// P commits auxiliary values for conversion check.
daBits are then verified.
(1) P commits to the following values using FDabit:
(a) Random edaBits ([𝑟 ( 𝑗)
0
(b) Random daBits ([𝑏( 𝑗)]2, [𝑏( 𝑗)]𝑀) 𝑗 ∈[𝑁 𝐵].
(c) Random multiplication triples
(2) P
{([𝑏( 𝑗)]2, [𝑏( 𝑗)]𝑀)} 𝑗 ∈[𝑁 𝐵]) to FDabit.
// P and V shuffle the auxiliary values and a subset gets
opened and verified.
(3) V samples uniformly random permutations 𝜋1 ∈
𝑆𝑁 𝐵+𝐶, 𝜋2 ∈ 𝑆𝑁 𝐵, 𝜋3 ∈ 𝑆𝑁 𝐵𝑚+𝐶𝑚 and sends them to P.
(4) Both
parties
edaBits
[𝑟 ( 𝑗)
𝑚−1]2, [𝑟 ( 𝑗)]𝑀 locally according to 𝜋1.
0
They then shuffle [𝑏( 𝑗)
𝑀 ]𝑀 according to 𝜋2 and
2
[𝑥 ( 𝑗)]2, [𝑦( 𝑗)]2, [𝑧( 𝑗)]2 according to 𝜋3.
(5) Run a cut-and-choose procedure as follows:
(a) P opens {[𝑟 ( 𝑗)
0
𝑗=𝑁 𝐵+1 (the
last 𝐶 edaBits) towards V, who in turn checks that
𝑟 ( 𝑗) ?
(b) P opens the 𝑥, 𝑦 values for the last 𝐶𝑚 triples
{[𝑥 ( 𝑗)]2, [𝑦( 𝑗)]2}𝑁 𝐵𝑚+𝐶𝑚
𝑗=𝑁 𝐵𝑚+1 and proves to V that
CheckZero([𝑧( 𝑗)]2−𝑥 ( 𝑗) ·𝑦( 𝑗)) for all opened triples.
𝑚−1]2, [𝑟 ( 𝑗)]𝑀}𝑁 𝐵+𝐶
=𝑚−1
𝑖=0 2𝑖 · 𝑟 ( 𝑗)
]2, . . . , [𝑟 ( 𝑗)
]2, . . . , [𝑟 ( 𝑗)
]2, [𝑏( 𝑗)
shuffle
the
.
𝑖
edaBit and [𝑐 + 𝑟]𝑀 = [𝑐]𝑀 + [𝑟]𝑀.
bitADDcarry([𝑐0]2, . . . , [𝑐𝑚−1]2, [𝑟0]2, . . . , [𝑟𝑚−1]2).
using the (𝑖 − 1) · 𝐵 + 𝑗’th daBit ([𝑏]2, [𝑏]𝑀).
// P and V verify each conversion tuple in a bucket.
(6) For the 𝑖’th conversion tuple [𝑐0]2, . . . , [𝑐𝑚−1]2, [𝑐]𝑀,
do the following for 𝑗 ∈ [𝐵]:
(a) Let [𝑟0]2, . . . , [𝑟𝑚−1]2, [𝑟]𝑀 be the (𝑖 − 1) · 𝐵 + 𝑗’th
(b) Let ([𝑒0]2, . . . , [𝑒𝑚]2) ←
(c) Convert [𝑒𝑚]𝑀 ← convertBit2A([𝑒𝑚]2)
(d) Let [𝑒′]𝑀 ← [𝑐 + 𝑟]𝑀 − 2𝑚 · [𝑒𝑚]𝑀.
(e) Let 𝑒𝑖 ← Open([𝑒𝑖]2) for 𝑖 = 0, . . . , 𝑚 − 1. Then run
𝑖=0 2𝑖 · 𝑒𝑖).
(7) If any of the checks fail, V outputs abort. Otherwise it
outputs (success).
CheckZero([𝑒′]𝑀 −𝑚−1
Figure 3: Protocol ΠConv to verify Conversion Tuples
2 → Z𝑚+1
Definition 3.2. A binary circuit 𝐶 : Z2𝑚
is weakly
additively tamper resilient, if given any additively tampered circuit
𝐶∗, obtained by flipping the output of any fixed number of AND
gates in 𝐶, one of the following two properties hold:
(1) ∀(𝑥, 𝑦) ∈ Z2𝑚
2
(2) ∀(𝑥, 𝑦) ∈ Z2𝑚
2
: 𝐶(𝑥, 𝑦) = 𝐶∗(𝑥, 𝑦); or
: 𝐶(𝑥, 𝑦) ≠ 𝐶∗(𝑥, 𝑦)
2
Procedure convertBit2A
Input A daBit ([𝑟]2, [𝑟]𝑀) and a commitment [𝑥]2.
Protocol
(1) 𝑐 ← Open([𝑟]2 ⊕ [𝑥]2).
(2) Output [𝑥]𝑀 ← 𝑐 + [𝑟]𝑀 − 2 · 𝑐 · [𝑟]𝑀.
Figure 4: Procedure to convert bit from Z2 to Z𝑀.
Procedure bitADDcarry
Input Commitments [𝑥0]2, . . . , [𝑥𝑚−1]2, [𝑦0]2, . . . , [𝑦𝑚−1]2.
Protocol Let 𝑐0 = 0.
(1) Compute [𝑐𝑖+1]2 = [𝑐𝑖]2 ⊕ (([𝑥𝑖 ⊕ 𝑐𝑖]2) ∧ ([𝑦𝑖 ⊕
(2) Output [𝑧𝑖]2 = [𝑥𝑖 ⊕ 𝑦𝑖 ⊕ 𝑐𝑖]2,∀𝑖 ∈ {0, . . . , 𝑚 − 1} and
𝑐𝑖]2)),∀𝑖 ∈ {0, . . . , 𝑚 − 1}
[𝑐𝑚]2.
Figure 5: A ripple-carry adder
Note that the type of additive tampering in Definition 3.2 models
the errors induced by faulty multiplication triples, when used to
evaluated a circuit in ZK or MPC. Intuitively, the definition says that
the output of the tampered circuit is either incorrect on every pos-
sible input or equivalent to the original un-tampered circuit. This
gives us the property that an adversary cannot pass the verification
protocol using a tampered circuit with both a good conversion
tuple and a bad one. Thus, if any provided multiplication triples are
incorrect, then the check at those positions would only pass with
either a good or a bad conversion tuple (or edaBit), but not both.
While bitADDcarry will ensure that (assuming correct triples)
([𝑒0]2, . . . , [𝑒𝑚]2) are computed as required, care must be taken
regarding [𝑐 + 𝑟 𝑗]𝑀 as this may not be representable by 𝑚 bits any
longer (but rather 𝑚+1). To remedy this, we use a daBit to convert
[𝑒𝑚]2 into an arithmetic authentication [𝑒𝑚]𝑀 to remove the carry
from [𝑐 + 𝑟 𝑗]𝑀 by computing [𝑒′]𝑀 = [𝑐 + 𝑟 𝑗]𝑀 − 2𝑚 · [𝑒𝑚]𝑀. Now
all that remains is to open [𝑒′]𝑀 (which “hides” 𝑐 using 𝑟 𝑗) as well
as ([𝑒0]2, . . . , [𝑒𝑚−1]2) and check that 𝑒′ ?
=𝑚−1
mod 2𝑚. This can then be compared with𝑚−1
Remark 1. When 𝑀 = 2𝑘, we can optimize ΠConv by removing
the conversion step 6(d), which uses daBits. Instead, we simply ignore
the carry bit and set 𝑒𝑚 = 0, then in step (f), we can compute 𝑒′ by
first opening 2𝑘−𝑚(𝑐+𝑟), then divide this by 2𝑘−𝑚 to obtain 𝑒′ = 𝑐+𝑟
𝑖=0 2𝑖 · 𝑒𝑖.
𝑖=0 𝑒𝑖, as required.
Our implementation shows that our approach outperforms or
is competitive with all prior work. We discuss the implementation
and the concrete performance in Section 6.
3.3 Proof of security
Due to space constraints, the full proof of security can be found in
the full version [3]. We summarize the proof below.
In order to prove the security of ΠConv, we first observe that
instead of letting P choose multiplication triples, we might equiva-
lently model this by letting P specify circuits instead (that will be
evaluated instead of the Ripple Carry Adder). Then, we define an
Session 1C: Zero Knowledge I CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea197abstraction of the protocol as a balls-and-bins type game, similar
to [16], and analyze the success probability of an adversary in this
game.A winning in this abstraction rather than in the protocol
ΠConv. We make this abstraction, as a straightforward analysis of
the conversion protocol is rather complex. This is due to there being
multiple ways for A to pass the check with a bad conversion tuple.
The first is by corrupting 𝐾 conversion tuples, then corrupting 𝐾 · 𝐵
edaBits and hoping that these end up in the right buckets, cancel-
ing out the errors in the conversion tuples. The second approach
is to corrupt a set of edaBits and then guess the arrangement of
these, thus yielding how many circuits A would have to corrupt in
order to cancel out the errors of the conversion tuples. Furthermore,
conversion tuples (and edaBits) may be corrupted in several ways.
To avoid these issues, we describe an abstract security game which
only provides a better chance for the adversary to win than the
original protocol. In summary, we show the following:
Theorem 3.3. The probability of ΠConv not detecting at least
one incorrect conversion tuple is upper bounded by 2−𝑠 whenever
𝑁 ≥ 2𝑠/(𝐵−1) and 𝐶 = 𝐶′ = 𝐵 for bucket size 𝐵 ∈ {3, 4, 5}.
The proof can be found in the full version [3]. The approach is
similar to that of [16], however in our case since the conversion tu-
ples are now fixed to be one per bucket, we have not taken a random
permutation across all edaBits and conversion tuples. Therefore,
we need a different analysis to show that this restriction on the
permutation still suffices.
Using this, in the full version [3] we then prove security of ΠConv:
Theorem 3.4. Let 𝑁 ≥ 2𝑠/(𝐵−1), 𝐶 = 𝐶′ = 𝐶′′ = 𝐵 and 𝐵 ∈
{3, 4, 5} such that
𝑠
𝐵−1 > 𝐵, then protocol ΠConv (Figure 3) UC-
realises FConv (Figure 1) in the FDabit-hybrid model. Specifically, no
environment Z can distinguish the real-world execution from the
ideal-world execution except with probability at most 2−𝑠.
3.4 Faulty daBits
When working in Z𝑝 (i.e. 𝑀 = 𝑝), our previous protocol requires a
source of daBits, namely, committed tuples ([𝑏]2, [𝑏]𝑀), where 𝑏
is a random bit. Generating consisting daBits requires verifying
that [𝑏]𝑀 indeed contains a bit, which is done with a potentially
costly multiplication check by showing that 𝑏(1 − 𝑏) = 0. In this
section, we optimize the protocol for the Z𝑝 case by showing that
ΠConv remains secure even with potentially faulty daBits. More
concretely, convertBit2A (which is part of the verification protocol)
will use daBits which are only proven consistent modulo 2. This
is much cheaper to achieve and avoids to check that 𝑏′ is a bit.
Definition 3.5. A faulty daBit is a pair ([𝑏]2, [𝑏′]𝑀) such that
𝑏 ≡ 𝑏′ mod 2, but not necessarily 𝑏′ ∈ {0, 1}.
𝑚]𝑀 such that 𝑒𝑚 = 𝑒′
In Step 6 of ΠConv (Figure 3), daBits are used in convertBit2A
(Figure 4) to transform the final carry bit [𝑒𝑚]2 from bitADDcarry
(Figure 5) into [𝑒′
𝑚. We show that using a
faulty daBit cannot help the adversary in passing the check with
incorrect conversions. First, we observe that with a faulty daBit,
the output becomes 𝑒′
𝑚 = 𝑒𝑚 + (−1)𝑒𝑚 · 𝛿 where 𝛿 = (−1)𝑏 · (𝑏′−𝑏)
where (𝑏′ − 𝑏) > 1 represents the difference (or error) between 𝑏′
and 𝑏 for the used daBit ([𝑏]2, [𝑏′]𝑀). As a result, |𝑒′
𝑚| > 1 where
| · | denotes absolute value. This carry bit [𝑒′