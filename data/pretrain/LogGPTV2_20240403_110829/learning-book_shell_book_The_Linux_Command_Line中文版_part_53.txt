a′ is a visible character.
a′ is a hezadecinal digit.
添加的“：&”的语法允许case语句继续执行下一条测试，而不是简单地终止运行。
32.4总结
case命令是我们编程技巧口袋中的一个便捷工具·在下一章中我们将看到，对于处理某些类型
的问题来说，case命令是一个完美的工具。
32.5拓展阅读
·Bash参考手册的条件构造一节详尽的介绍了case命令：
http://tiswww.case.edu/php/chet/bash/bashref.html#SEC21
·高级Bash脚本指南提供了更深一层的case应用实例：
http://tldp.org/LDP/abs/html/testbranch.html
437
---
## Page 439
33
”位置参数
现在我们的程序还缺少一种本领，就是接收和处理命令行选项和参数的能力。在这一章中，我
们将探究一些能让程序访问命令行内容的shell性能。
33.1访问命令行
shell提供了一个称为位置参数的变量集合，这个集合包含了命令行中所有独立的单词。这些变
量按照从0到9给予命名。可以以这种方式讲明白：
#!/bin/bash
# posit-paran: script to viev command line parameters
echo *
\$0 = $0
\$1 = $1
\$2 = $2
\$3 = $3
\$4 = $4
\$5 = $5
\$6 = $6
\$7 = $7
\$8 = $8
\$9 = $9
一个非常简单的脚本，显示从$0到$9所有变量的值。当不带命令行参数执行该脚本时，
输出结果如下：
uered-4tsod s[- xoqxnustgou]
438
---
## Page 440
$0 = /hone/ne/bin/posit-paran
$1 =
$2 =
$3 =
$4 =
$5 =
$6 =
$7 =
$8 =
$9 =
即使不带命令行参数，位置参数$0总会包含命令行中出现的第一个单词，也就是已执行程
序的路径名。当带参数执行脚本时，我们看看输出结果：
p3qeuered4tsods[-xoqxnutgou]
$0 = /hone/ne/bin/posit-paran
$1=a
$2 = b
$3 = c
$4 = d
$5 =
$6 =
$7 =
$8 =
$9 =
注意：实际上通过参数展开方式你可以访问的参数个数多于9个。只要指定一个大于9的
33.1.1确定参数个数
另外shell还提供了一个名为S#，可以得到命令行参数个数的变量：
#!/bin/bash
# posit-paran: script to viev command line paraseters
echo *
439
---
## Page 441
Hunber of arguments: $#
\$0=$0
\$1 = $1
\$2 = $2
\$3 = $3
1$4=$4
\$5 = $5
\$6 = $6
\$7 = $7
\$8 = $8
\$9 =$9
结果是：
[nedlinuxbox -]$ posit-paran a b c d
Munber of argunents: 4
$0 = /hone/ne/bin/posit-paran
$1 =a
$2 = b
$3 = c
$4 = d
$5 =
$6 =
$7 =
$8 =
$9 =
33.1.2shift-访问多个参数的利器
[ne@linuxbox -]$ posit-paran *
Nunber of arguments: 82
$0 = /hone/ne/bin/posit-paran
$1 = addresses.1dif
440
---
## Page 442
$2 = bin
$3 = booimarks .htnl
$4 = debian-500-i386-netinst .is0
$5 = debian-500-i386-netinst jigdo
$6 = debian-500-i386-netinst .tenplate
$7 = debian-cd_info.tar.gz
$8 = Desktop
$9 = dirlist-bin.txt
在这个例子运行的环境下，通配符*展开成82个参数。我们如何处理那么多的参数？为此
shell提供了一种方法，尽管笨拙，但可以解决这个问题。执行一次shift命令，就会导致所有
的位置参数“向下移动一个位置”。事实上，用shift命令也可以处理只有一个参数的情况（除
了其值永远不会改变的变量$0)：
#!/bin/bash
# posit-paran2: script to display all argunents
coumt=1
vhile [[ $# -gt 0 ]]; do
T$ = qumoos quoumry., ooo
count=$((count + 1))
shift
done
每次shift命令执行的时候，变量$2的值会移动到变量$1中，变量$3的值会移动到变量
$2中.依次类推。变量S#的值也会相应的减1。
在该posit-param2程序中，我们编写了一个计算剩余参数数量，只要参数个数不为零就会
继续执行的while循环。我们显示当前的位置参数，每次循环选代变量count的值都会加1
用来计数处理的参数数量，最后，执行shift命令加载$1，其值为下一个位置参数的值。这里
是程序运行后的输出结果：
[neglinuxbox -]$ posit-paran2 a b c d
Argunent 1 = a
Argunent 2 = b
Argunent 3 = C
Argunent 4 = d
441
---
## Page 443
33.1.3简单应用
即使没有shift命令，也可以用位置参数编写一个有用的应用。举例说明，这里是一个简单的输
出文件信息的程序：
#!/bin/bash
# file_info: sinple file information progran
PROGNAME=$(basenane $0)
if [[ -e $1 ]]; then
echo -e *\nFile Type:*
file $1
echo -e *\nFile Status:"
stat $1
else
echo "$PROGNAME: usage: $PROGNAME file* >&2
exit 1
这个程序显示一个具体文件的文件类型（由file命令确定）和文件状态（来自stat命令）。
该程序一个有意思的特点是PROGNAME变量。它的值就是basename$0命令的执行结果。
这个basename命令清除一个路径名的开头部分，只留下一个文件的基本名称。在我们的程序
中，basename命令清除了包含在$0位置参数中的路径名的开头部分，$0中包含着我们示例程
序的完整路径名。当构建提示信息正如程序结尾的使用信息的时候，basenameS0的执行结果
就很有用处。按照这种方式编码，可以重命名该脚本，且程序信息会自动调整为包含相应的程
序名称。
33.1.4Shell函数中使用位置参数
正如位置参数被用来给shell脚本传递参数一样，它们也能够被用来给shell函数传递参数。为
了说明这一点，我们将把file_info脚本转变成一个shell函数：
file_info (){
# file_info: function to display file infornation
if [[ =e $1 ]]; then
echo -e "\nFile Type:"
file $1
442
---
## Page 444
echo -e "\nFile Status:*
stat $1
else
echo *$FUNCNAME: usage: $FUNCNAME file" >b2
return 1
f1
J
现在，如果一个包含shell函数file_info的脚本调用该函数，且带有一个文件名参数，那这
个参数会传递给file_info函数。
通过此功能，我们可以写出许多有用的shell函数，这些函数不仅能在脚本中使用，也可以
用在.bashrc 文件中。
FUNCNAME变量，以便跟踪当前执行的shell函数。注意位置参数$O总是包含命令行中第
一项的完整路径名（例如，该程序的名字），但不会包含这个我们可能期望的shell函数的名字。
33.2处理集体位置参数
有时候把所有的位置参数作为一个集体来管理是很有用的。例如，我们可能想为另一个程序编
写一个“包裹程序”。这意味着我们会创建一个脚本或shell函数，来简化另一个程序的执行。
包裹程序提供了一个神秘的命令行选项列表，然后把这个参数列表传递给下一级的程序。
为此shell提供了两种特殊的参数。他们二者都能扩展成完整的位置参数列表，但以相当微
妙的方式略有不同。它们是：
参数
描迹
$*
展开成一个从1开始的位置参数列表。当它被用双引号引
起来的时候，展开成一个由双引号引起来的字符申，包含了
所有的位置参数，每个位置参数由shell变量IFS的第一个
字符（默认为一个空格）分隔开。
$0
展开成一个从1开始的位置参数列表。当它被用双引号引
起来的时候，它把每一个位置参数展开成一个由双引号引起
来的分开的字符串。
表32-1:*和@特殊参数
443
---
## Page 445
下面这个脚本用程序中展示了这些特殊参数：
#!/bin/bash
# posit-parans3 : script to demonstrate $* and $鲁
print_parans () {
echo "\$1 = $1*
echo "\$2 = $2*
echo "\$3 = $3*
echo "\$4 = $4*
J
pass_params () {
1,：*$，u\.o-ouo
print_params
$*
echo -e "\n* **$** :';
print_params
*$*"
echo -e "\n* '$@ :′;
print_params
echo -e *\n **$0* :';
print_params
*$0”
J
,soseds q4ts spxon, pxon, sueredssed
在这个相当复杂的程序中，我们创建了两个参数：“word”和“wordswith spaces”，然后
把它们传递给pass_params函数。这个函数，依次，再把两个参数传递给print_params函数，
使用了特殊参数8*和S@提供的四种可用方法。脚本运行后，揭示了这两个特殊参数存在的
差异：
gue.redsrsods[-xoqxmuytuou]
$* :
$1 = vord
$2 = vords
$3 = vith
$4 = spaces
*$+*：
$1 = vord vords vith spaces
$2 =
$3 =
$4 =
$Q :
$1 = vord
$2 = vords
444
---
## Page 446
$3 = vith
$4 = spaces
*$*：
$1 = vord
$2 = vords vith spaces
$3 =
$4 =
通过我们的参数，8*和8@两个都产生了一个有四个词的结果：
vord vords vith spaces
"$*" produces a one vord result:
*vord vords with spaces"
"$@" produces a tuo vord result:
*vord" *vords vith spaces*
这个结果符合我们实际的期望。我们从中得到的教训是尽管shell提供了四种不同的得到位
置参数列表的方法，但到目前为止，“$@”在大多数情况下是最有用的方法，因为它保留了每一
个位置参数的完整性。
33.3一个更复杂的应用
经过长时间的间断，我们将恢复程序sys_info_page的工作。我们下一步要给程序添加如下几
个命令行选项：