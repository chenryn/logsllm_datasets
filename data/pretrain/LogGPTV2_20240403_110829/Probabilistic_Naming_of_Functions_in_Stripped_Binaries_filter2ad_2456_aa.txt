title:Probabilistic Naming of Functions in Stripped Binaries
author:James Patrick-Evans and
Lorenzo Cavallaro and
Johannes Kinder
Probabilistic Naming of Functions in Stripped Binaries
James Patrick-Evans
Johannes Kinder
Royal Holloway, University of London
Egham, United Kingdom
PI:EMAIL
Lorenzo Cavallaro
King’s College London
London, United Kingdom
PI:EMAIL
Bundeswehr University Munich
Munich, Germany
PI:EMAIL
ABSTRACT
Debugging symbols in binary executables carry the names of func-
tions and global variables. When present, they greatly simplify the
process of reverse engineering, but they are almost always removed
(stripped) for deployment. We present the design and implementa-
tion of punstrip, a tool which combines a probabilistic fingerprint
of binary code based on high-level features with a probabilistic
graphical model to learn the relationship between function names
and program structure. As there are many naming conventions and
developer styles, functions from different applications do not neces-
sarily have the exact same name, even if they implement the exact
same functionality. We therefore evaluate punstrip across three lev-
els of name matching: exact; an approach based on natural language
processing of name components; and using Symbol2Vec, a new em-
bedding of function names based on random walks of function call
graphs. We show that our approach is able to recognize functions
compiled across different compilers and optimization levels and
then demonstrate that punstrip can predict semantically similar
function names based on code structure. We evaluate our approach
over open source C binaries from the Debian Linux distribution
and compare against the state of the art.
CCS CONCEPTS
• Security and privacy→ Software reverse engineering; • Com-
puting methodologies → Machine learning.
KEYWORDS
binaries, function names, machine learning
ACM Reference Format:
James Patrick-Evans, Lorenzo Cavallaro, and Johannes Kinder. 2020. Proba-
bilistic Naming of Functions in Stripped Binaries. In Annual Computer Secu-
rity Applications Conference (ACSAC 2020), December 7–11, 2020, Austin, USA.
ACM, New York, NY, USA, 13 pages. https://doi.org/10.1145/3427228.3427265
1 INTRODUCTION
Reverse engineering is a crucial step in security audits of commer-
cial software, forensic analysis of malware, software debugging
and exploit development. A main task in reverse engineering is to
identify functional components in the software and discover the
meaning behind different portions of binary code. When faced with
a flat region of executable code, it is difficult and time consuming to
gain a high-level understanding of what it does. During debugging,
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Association for Computing Machinery.
This is the author’s version of the work. It is posted here for your personal use. Not
for redistribution. The definitive Version of Record was published in Annual Computer
Security Applications Conference (ACSAC 2020), December 7–11, 2020, Austin, USA,
https://doi.org/10.1145/3427228.3427265.
1
software developers can use symbols to relate binary code to source-
level information such as file names, data structures and names
of functions. When releasing software for distribution, however,
symbols are routinely stripped from the binaries; this decreases
the file size and impedes reverse engineering of proprietary code
(commercial or malicious).
State-of-the-art reverse engineering tools, such as the IDA Pro
disassembler, use databases of function signatures to reliably iden-
tify standard functions such as those included by a statically linked
C runtime. This works well for systems where libraries are stan-
dardized and rarely recompiled. IDA Pro for example, maintains a
directory of FLIRT signature files for the most common Windows
libraries replicated for the most common compilers and instruction
set architectures (ISAs). Reverse engineers also manually create
custom databases of such signatures, because they can immedi-
ately identify many functions which otherwise would have to be
rediscovered in new binaries through costly manual analysis. Such
signature-based mechanisms can allow for some variation in the
exact byte sequence matched, but they do not go further than rela-
tively simple wildcard mechanisms.
The problem of matching sequences of binary code while al-
lowing for variation presents itself in a number of domains. Code
clone detection [9, 18, 24, 27, 41], vulnerable code identification [11],
code searching [15], and software plagiarism detection [31] address
the problem of finding exact matches between software compo-
nents. They focus on finding a fixed set of previously seen functions
with the main contributions drawn from methods of identifying
semantically-equivalent code that have undergone various soft-
ware transformations; these transformations are typical of source
code compiled with different compilers or compilation optimiza-
tions. Techniques typically adopt static or dynamic approaches that
build features of a functions interpreted execution or rely on fixed
properties of compiler generated machine code. Patch code analy-
sis [24, 52] borrows the same techniques from the problem domain
for feature collection however it requires an existing executable
with prior information to perform analysis on differential updates.
Common to these domains and approaches is that they aim to
identify exact function matches in isolation in previously seen exe-
cutables. They do not provide a way to derive names for functions
that do not have an exact (semantic or syntactic) match in the
set of known binaries. In contrast, our goal is to learn a general
relationship between function names and their binary code.
We implement this approach with punstrip, our tool for revers-
ing the stripping process and inferring symbol names in stripped
binaries. Punstrip builds a probabilistic model that learns how devel-
opers use and name functions across a set of existing open source
projects; using this model, we infer meaningful symbol informa-
tion based on similarities in program structure and semantics in
previously unseen, stripped binaries. It is not necessary to discover
ACSAC 2020, December 7–11, 2020, Austin, USA
James Patrick-Evans, Lorenzo Cavallaro, and Johannes Kinder
Figure 1: A block diagram overview of the components in Punstrip.
exactly the same identifiers that the developers used in the original
program: for reverse engineering, we are interested in discovering
symbol names that are helpful to an analyst. With punstrip, reverse
engineers are able to pre-process an unknown binary to automati-
cally annotate it with symbol information, saving them time and
preventing mistakes in doing further manual analysis. We make
punstrip available as open source1.
We make the following contributions:
• We present a novel approach to function identification and
signature recognition for stripped binaries that uses features
in a higher-level intermediate representation. This approach
can scale to real world software and seeks to be agnostic to
both compiler architectures, binary formats, and optimiza-
tions.
• We introduce a probabilistic graphical model for inferring
function names in stripped binaries that compares the joint
probability of all unknown symbols simultaneously rather
than treating each function in isolation. The model builds on
our probabilistic fingerprint and analysis between symbols
in binaries.
• We describe Symbol2Vec, a new high dimensional vector
embedding for function symbols. We demonstrate that the
embedding is meaningful by creating a set of relationships
within the space of function names drawn from C bina-
ries distributed as part of Debian GNU/Linux. We use Sym-
bol2Vec as one metric in the evaluation of punstrip to capture
relations between function names that do not share any lex-
ical components. We release our vector embeddings2 to the
research community to provide a common method of eval-
uating semantically similar function names in compiled C
binaries.
We evaluate punstrip against the current state of the art in func-
tion name detection against all C binaries in Debian with 10-fold
cross validation. Furthermore, we evaluate our probabilistic finger-
print against leading tools using binaries with a large common code
base that were compiled in different environments.
In the remainder of this paper, we give an overview of punstrip’s
pipeline (§2), introduce our technical approach to the problem of
function fingerprinting (§3), and describe the abstract graphical
1https://github.com/punstrip/punstrip
2https://github.com/punstrip/Symbol2Vec
structure for learning (§4). We then present our method for relat-
ing function names, including Symbol2Vec (§5), before evaluating
punstrip against previous work (§6). Finally, we discuss limitations
of our approach (§7), contrast with related work (§8) and present
our conclusions (§9).
2 OVERVIEW
Figure 1 shows an architectural overview of the punstrip pipeline.
Punstrip takes as input a set of ELF binaries, which for training
should be unstripped. In the initial analysis stage, punstrip extracts
function symbols and their boundaries as defined in the symbol
table, disassembles them, and lifts the instructions to the VEX inter-
mediate representation. From this representation and interproce-
dural control flow information among functions, punstrip extracts
a set of features that are stored in a database. Those features are
used to build a per-function fingerprint, as well as a factor graph
representing the relationships between functions and feature values
for each executable. Our probabilistic fingerprint and factor graph
are used to construct a Conditional Random Field (CRF) that learns
how individual functions interact with other code and data.
After training a model on a large corpus of programs that include
symbol information, we are able to use the learned parameters
to infer the most likely function names in stripped binaries. The
inferred function symbol names can then be added to the stripped
binary and used for debugging and reverse engineering purposes. In
this paper, we focus exclusively on the problem of naming functions;
for detecting function boundaries in stripped binaries, we refer to
recent approaches from the literature [2, 3].
We evaluate the accuracy of labeling with three metrics: (1) exact
matches of function names, (2) normalized matches of function
names, and (3) Symbol2Vec, a function name embedding based on
random walks on callgraphs taken from a large dataset of binaries.
In the remainder of this section we detail the individual stages of
the pipeline referring to examples in Figure 2, in which we separate
known from unknown functions, that we aim to label.
2.1 Probabilistic Fingerprint
Figure 2a shows the disassembly of a function from a stripped
binary. Static analysis is able to detect that the unknown function
is called from the unnamed function at address 0x0162d and calls
the dynamically linked function errno_location (which gets the
2
ELF BinariesAnalysisFunction BoundariesDisassemblyVEX IRFeature ExtractionFeaturesProbabilistic FingerprintFactor GraphCRFEvaluationExactNLPSymbol2VecELF ExporterProbabilistic Naming of Functions in Stripped Binaries
ACSAC 2020, December 7–11, 2020, Austin, USA
( fcn )
0x01fb0
; CALL XREF from 0 x0000162d
0 x00001fb0
0 x00001fb4
0 x00001fb6
0 x00001fbb
test rdi , rdi
je 0 x2027
mov esi , 0 x2f
mov rbx , rdi
0x0162d
0 x00001fbe
0 x00001fc3
0 x00001fc6
0 x00001fc8
0 x00001fcc
0 x00001fcf
0 x00001fd2
0 x00001fd6
0 x00001fdf
0 x00001fe6
0 x00001fed
...
call imp.errno_location
test rax , rax
je 0 x2017
lea rdx , [ rax + 1]
mov rcx , rdx
sub rcx , rbx
cmp rcx , 6
jle 0 x2017
mov ecx , 7
jne 0 x2017
call
0x022b4
IRSB {
t1 : Ity_I64 t2 : Ity_I64 t3 : Ity_I64 t6 : Ity_I64
t7 : Ity_I1
00 | ------ IMark ( 0x1fb0 , 3, 0) ------
01 | t2 = GET : I64 ( rdi )
02 | PUT ( cc_op ) = 0 x0000000000000014
03 | PUT ( cc_dep1 ) = t2
04 | PUT ( cc_dep2 ) = 0 x0000000000000000
05 | PUT ( pc ) = 0 x0000000000001fb3
13 | ------ IMark (0 x1fb4 , 2, 0) ------
14 | t15 = CmpEQ64 (t2 ,0 x0000000000000000 )
15 | t14 = 1 Uto64 ( t15 )
16 | t12 = t14
17 | t16 = 64 to1 ( t12 )
18 | t7 = t16
19 | if ( t7 ) { PUT ( pc ) = 0 x2027 ; Ijk_Boring }
NEXT : PUT ( rip ) = 0 x0000000000001fb6 ; Ijk_Boring
}
...
(a) Disassembly of an unnamed function in a stripped dynami-
cally linked ELF executable.
(b) VEX Intermediate Representation (IR) of the unknown func-
tion’s first basic block.
( fcn )
set_program_name
; CALL XREF from 0 x0000162d
0 x00001fb0
0 x00001fb4
0 x00001fb6
0 x00001fbb
test rdi , rdi
je 0 x2027
mov esi , 0 x2f
mov rbx , rdi
main
0x01fb0
0x022b4
errno_location
0 x00001fbe
0 x00001fc3
0 x00001fc6
0 x00001fc8
0 x00001fcc
0 x00001fcf
0 x00001fd2
0 x00001fd6
0 x00001fdf
0 x00001fe6
0 x00001fed
...
call imp.errno_location
test rax , rax
je 0 x2017
lea rdx , [ rax + 1]
mov rcx , rdx
sub rcx , rbx
cmp rcx , 6
jle 0 x2017
mov ecx , 7
jne 0 x2017
call
strchr
(c) General graph based conditional random field based on rela-
tionships between features, knowns, and unknowns.
(d) Disassembly of the same function with inferred function
names added to the binary’s symbol table.
xstrtok
e
strsep
c
strchr
a
e strstr
(e) A projection of the most similar Symbol2Vec embeddings to strchr.
Figure 2: Stages in punstrip’s pipeline for learning and evaluating function name inference on stripped binaries.
3
ACSAC 2020, December 7–11, 2020, Austin, USA
James Patrick-Evans, Lorenzo Cavallaro, and Johannes Kinder
error identifier from the last executed system call) before calling
0x022b4 .
As the binary sequence of machine code can differ even for the
same source code depending on compilation settings, we opt for
using an intermediate representation that abstracts some imple-
mentation detail. We lift machine code to the VEX intermediate
representation, as shown in Figure 2b, which offers an appropriate
level of detail and abstraction for our analysis. From this represen-
tation, we extract a collection of features that help identify names
of functions designed to be agnostic to changes in compilers and
optimizations. While the binary code of a function may change due
to compiler differences, and hence values of our features, our intu-
ition is that even if a compiler modifies the order, number of, and
type of instructions, changes in feature values based on optimized
VEX IR will still be similar.
After extracting a set of features we first convert each feature into
a vectorized form and use it as an input to a multiclass classifier. The
output of multiclass classification gives a probability mass function
over the set of all unknown functions in our training data. Thus for
each function, we learn a probability distribution over all function
names given input features derived from VEX.
2.2 Probabilistic Structural Inference
After extracting high-level features and relationships between func-
tions, we build a probabilistic graphical model in the form of a Con-
ditional Random Field (CRF) [29, 49] as depicted in Figure 2c. The