func superPowl(a int,b []int) int { 
% k = ((((a^123456) % 1337)^10)% 1337 * (a^7 % 1337))% 1337;
//利用上面的性质，可以得到：a^1234567 % 1337=（a^1234560% 1337）＊（a^7 % 1337）
//解法二 暴力解法
func qpow(x,n int) int {
//快速幂计算 x^n 
func superPow(a int, b []int) int {
用性质 三
二
质
/
2281 % (895+21 = 029954221) = 2221 % 84995+221 //
--->利用性质 四 
//举个例子
98374等等
// 模运算性质五：ab % p=（(a % p）＊（b % p)）% p，其中 ab 是一个数字，如:2874,
//模运算性质四：
/
/
// 模运算性质-:(a + b） % p=（a % p + b % p） % p
/
// 解法—快速幂 res=res^10 ＊ qpow(a，b［i]）
//先计算个位的a^× 结果，对应上面例子中的（a^7%1337)%1337
if len(b) == 0 {
return res
for n>o{
x %= 1337
for i := O; i >= 1
= (x * x) % 1337
res = (res * x) % 1337
[ 利用性质 三
---〉乘方性
---
## Page 464
给定两个以升序排列的整形数组 nums1 和 nums2,以及一个整数k。
题目大意
Example 3:
Example 2: 
Example 1: 
Find the k pairs (u1,v1),(u2,v2) ..(uk,vk) with the smallest sums.
second array.
Define a pair (u,v) which consists of one element from the first array and one element from the 
 aui ue pue lao upuanse u! paos zswnu pue swnu see laaui ome uanie ane no
题目
373. Find K Pairs with Smallest Sums
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]
Output: [1,3],[2,3] 
Input: numsl = [1,2], nums2 = [3],k = 3 
Explanation: The first 2 pairs are returned from the sequence:
Output: [1,1],[1,1] 
Input: numsl = [1,1,2]， nums2 = [1,2,3]，k = 2 
Explanation: The first 3 pairs are returned from the sequence:
Output: [[1,2],[1,4],[1,6]] 
Input: numsl = [1,7,11], nums2 = [2,4,6],k = 3 
return f * 1 % 1337
for i := 1; i = k {
sort.slice(res, func(i, j int) bool {
for i := O; i= O && mid = k {
//如果 count 比k小，在大值的那一半继续二分搜索
mid := low + (high-low)>>1
} else if matrix[i][j]  p.data[b].(int)
 return p.len
len 
data []interface{}
return heap.Pop(pq).(int)
int 
 int） {
---
## Page 471
代码
解题思路
提示：你可以假定这些字符串都是格式良好的：
整数或整数嵌套列表
给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。列表中的每个元素只可能是
题目大意
Example 2: 
·将一个嵌套的数据结构中的数字转换成 Nestedlnteger 数据结构。
package leetcode
●字符串只包含数字0-9,［-,］
·字符串非空
2. A nested list containing two elements:
1. An integer containing value 123.
Return a NestedInteger object containing a nested list with 2 elements:
Given s = "[123,[456,[789]]]",
You should return a NestedInteger object which contains a single integer 324.
Given S = "324",
import （
  be  1 t      s
"strconv'
"fmt"
数据结构笔者实现了一遍，见代码。
这一题用栈一层一层的处理就行。有一些比较坑的特殊的边界数据见测试文件。这一题正确率比很
字符串不包含空格 
ii. A nested list with one element:
 An integer containing value 456.
a. An integer containing value 789.
---
## Page 472
// SetInteger define
func (n NestedInteger) GetInteger() int
// GetInteger define
func (n NestedInteger) IsInteger() bool 
// IsInteger define 
type NestedInteger struct {
// NestedInteger define
modify it 
* // You can access NestedInteger's List element directly if you want to
single integer
* func (n NestedInteger） GetList(） []*NestedInteger {}
nested list
0
nested list.
 return n.Num
if n.List == nil { 
return false
List []*NestedInteger
Num int
   1u a 1   5t  i  // 
 func （n NestedInteger） IsInteger(） bool {}
func (n *NestedInteger) SetInteger(value int) {}
// Return the single integer that this NestedInteger holds, if it holds a
// Return true if this NestedInteger holds a single integer, rather than a 
 type NestedInteger struct { 
// You should not implement it, or speculate about its implementation
 return true
// Return the nested list that this NestedInteger holds, if it holds a
func (n *NestedInteger) Add(elem NestedInteger) {}
it.
// set this NestedInteger to hold a nested list and adds a nested integer
// Set this NestedInteger to hold a single integer.
func (n NestedInteger) GetInteger() int {}
// So before calling this method, you should have a check
人
---
## Page 473
func deserialize(s string) *NestedInteger { 
func (n NestedInteger） Print(） {
// print define
// GetList define 
func (n *NestedInteger) Add(elem NestedInteger) {
// Add define
func (n *NestedInteger) SetInteger(value int) {
if len(n.List) != O {
 return n.List 
 n.List = append(n.List, &elem)
 n.Num = value 
for i := O; i 0 {
next.SetInteger(num) 
next := &NestedInteger{}
 cur = next
return 
v.Print()
,V := range n.List {
.:= strconv.Atoi(s[i:j])
---
## Page 474
解题思路
请尽可能的优化算法的时间复杂度和空间复杂度。输入的数据n小于等于5,000,000。
题目大意
5,000,000.
 Please optimize your algorithm to use less time and space. The input size may be as large as 