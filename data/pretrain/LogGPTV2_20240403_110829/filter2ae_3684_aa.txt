# 前言
本篇是Forensic，即取证类的题解。包括有一些常规的入门misc题目，比如流量分析，图片、文件隐写之类的。部分题目附件已打包。链接:
 提取码: 5a9u
（拖了半个月终于把这篇补完了，还好题目还开着，拖延症彻底没救了-0-……）
# Forensics Warmup 1
## Question
> Can you unzip this
> [file](https://2018shell2.picoctf.com/static/d6487f8e2cbbb28b5168b512f0ac0710/flag.zip)
> for me and retreive the flag?
### Hint
> Make sure to submit the flag as picoCTF{XXXXX}
## Solution
签到题，解压zip，得到`flag.jpg`
输入图上的字符就行了。
flag:`picoCTF{welcone_to_forensics}`
# Forensics Warmup 2
## Question
> Hmm for some reason I can't open this
> [PNG](https://2018shell2.picoctf.com/static/b96c236db4c32ed47e9958c7e461b3c4/flag.png)?
> Any ideas?
### Hint
> How do operating systems know what kind of file it is? (It's not just the
> ending!
>
> Make sure to submit the flag as picoCTF{XXXXX}
## Solution
使用`file`命令查看图片的文件格式。
    ❯ file flag.png
    flag.png: JPEG image data, JFIF standard 1.01, resolution (DPI), density 75x75, segment length 16, baseline, precision 8, 909x190, frames 3
本质是jpg文件，修改后缀为.jpg就可以打开了。（其实大多的图片浏览器都可以直接打开这种单纯修改一下后缀的图片）
flag:`picoCTF{extensions_are_a_lie}`
# Desrouleaux
## Question
> Our network administrator is having some trouble handling the tickets for
> all of of our incidents. Can you help him out by answering all the
> questions? Connect with `nc 2018shell1.picoctf.com 54782`.
> [incidents.json](https://2018shell2.picoctf.com/static/47cbb94e79b74a4b2f74cfb31c68230e/incidents.json)
### Hint
> If you need to code, python has some good libraries for it.
## Solution
文件里面是一段json数据。
    ...
    {
                "ticket_id": 0,
                "timestamp": "2015/05/09 22:28:20",
                "file_hash": "b807c12fc3e10ba3",
                "src_ip": "248.63.150.241",
                "dst_ip": "251.0.92.254"
            },
            {
                "ticket_id": 1,
                "timestamp": "2016/12/27 04:01:52",
                "file_hash": "1698b8b87f51ce8e",
                "src_ip": "248.63.150.241",
                "dst_ip": "116.196.246.151"
            },
    }
    ...
nc到问题服务器，一步步处理后发现有三个问题：
  1. What is the most common source IP address?
  2. How many unique destination IP addresses were targeted by the source IP address 236.232.221.165?
  3. What is the average number of unique destination IP addresses that were sent a file with the same hash? Your answer needs to be correct to 2 decimal places.
第三个有点拗口，大概意思就是要算出每个单独的文件发送到的ip地址个数的平均数是多少。使用python的list和dict对象可以很方便的处理这些数据。
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    import json
    import re
    from pwn import *
    with open('./incidents.json') as f:
        text = f.read()
    text = json.loads(text)
    r = remote('2018shell2.picoctf.com', 54782)
    src_ip_count = {}
    dst_ip_count = []
    unique_dst_ip = 0
    hash_dst_ip = {}
    r.recvuntil('common ones.')
    for i in text['tickets']:
        # Question 1
        if i['src_ip'] not in src_ip_count.keys():
            src_ip_count[i['src_ip']] = 1
        else:
            src_ip_count[i['src_ip']] += 1
    r.sendline(max(src_ip_count))
    content = r.recvuntil('?\n')
    content = re.findall(r'address \d{1,3}.\d{1,3}.\d{1,3}.\d{1,3} ?',content)
    content = ''.join(content).split(' ')[1]
    for i in text['tickets']:
        # Question 2
        if i['dst_ip'] not in dst_ip_count and i['src_ip'] == content:
            dst_ip_count.append(i['dst_ip'])
            unique_dst_ip += 1
        # Question 3
        if i['file_hash'] not in hash_dst_ip.keys() and i['file_hash'] != []:
            hash_dst_ip[i['file_hash']] = []
            hash_dst_ip[i['file_hash']].append(i['dst_ip'])
        elif i['file_hash'] in hash_dst_ip.keys() and i['file_hash'] != []:
            hash_dst_ip[i['file_hash']].append(i['dst_ip'])
    avg = 0
    for i in hash_dst_ip:
        avg += len(hash_dst_ip[i])
    avg = avg * 1.0 / len(hash_dst_ip)
    # print unique_dst_ip
    # print round(avg, 2)
    r.sendline(str(unique_dst_ip))
    r.sendline(str(round(avg, 2)))
    # r.interactive()
    print r.recvuntil('}\n')
    r.close()
运行脚本得到flag。
flag:`picoCTF{J4y_s0n_d3rUUUULo_c74e3495}`
# Reading Between the Eyes
## Question
> Stego-Saurus hid a message for you in this
> [image](https://2018shell2.picoctf.com/static/3e423171eed198e8425524a1b052869b/husky.png),
> can you retreive it?
### Hint
> Maybe you can find an online decoder?
## Solution
LSB隐写，使用`stegsolve`提取最低位。
勾选RGB信道的最低位`0`，顺序是LSB First，就可以看到flag。
flag:`picoCTF{r34d1ng_b37w33n_7h3_by73s}`
# Recovering From the Snap
## Question
> There used to be a bunch of
> [animals](https://2018shell2.picoctf.com/static/1603334c6d1519a49283974d0d480ffe/animals.dd)
> here, what did Dr. Xernon do to them?
### Hint
> Some files have been deleted from the disk image, but are they really gone?.
## Solution
使用`binwalk`查看文件，发现有很多隐写进去的jpg文件，用`foremost`提取出来。
    ❯ foremost animals.dd
    foremost: /usr/local/etc/foremost.conf: No such file or directory
    Processing: animals.dd
    |*|
提取完成查看图片，可以看到最后一张就是flag。
flag:`picoCTF{th3_5n4p_happ3n3d}`
# admin panel
## Question
> We captured some
> [traffic](https://2018shell2.picoctf.com/static/ee6ed2afe1da153ae06e61d5ee26d52d/data.pcap)
> logging into the admin panel, can you find the password?
### Hint
> Tools like wireshark are pretty good for analyzing pcap files.
## Solution
使用wireshrak打开pcap流量包，追踪tcp流，在第5个流可以看到flag。
当然这里我们知道flag的形式是`picoCTF{***}`，可以直接在分组字节流中搜索相关字符串，同样也可以找到flag。
flag:`picoCTF{n0ts3cur3_13597b43}`
# hex editor
## Question
> This
> [cat](https://2018shell2.picoctf.com/static/ccad03a151a0edac8bd01e665a595b7a/hex_editor.jpg)
> has a secret to teach you. You can also find the file in /problems/hex-> editor_2_c1a99aee8d919f6e42697662d798f0ff on the shell server.
### Hint
> What is a hex editor?
>
> Maybe google knows.
>
> [xxd](http://linuxcommand.org/man_pages/xxd1.html)
>
> [hexedit](http://linuxcommand.org/man_pages/hexedit1.html)