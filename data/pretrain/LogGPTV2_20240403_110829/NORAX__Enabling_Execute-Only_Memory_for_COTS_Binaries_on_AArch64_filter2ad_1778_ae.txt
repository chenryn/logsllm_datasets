• Check if the faulting process contains NORAX converted
module, this is indicated by a ﬂag set by NLoader when
loading a converted binary. This ﬂag will be propagated
when the process forks a new child, and properly removed
if the new child does an exec to run a new program.
• Check the exception syndrome register on exception level
one (ESR EL1 [24]) for two ﬁelds: (i) Exception class
and (ii) Data fault status code. This ensures the fault is
triggered by the user space program, and it faults on the
last level page table entry (we only enforce XOM at pte
entries) because of permission violation.
• Check the VMA permission ﬂags and only handle the
case of reading an execute-only page. All these restric-
312
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
tions together ensure that we do not mistake other page
fault events with ours.
To verify the integrity of a violation triggered by XOM,
we extend the task struct to maintain a list of access policies
(§ III-E), one for each module. We also instrument the set pte
function to ensure the permission of a page must follow the
R⊕ X policy. This way, we prevent the attacker from tricking
the OS to remap the execute-only memory through high-
level interfaces. The modiﬁed kernel subsystems also include
the ﬁle system (FS) and system calls where we instrument
the executable loader and implement the design of NLoader
plugins (§ III-D) respectively.
B. Bionic Linker Modiﬁcation
In a running program, all
the libraries needed by the
executable are loaded by the linker. In order to handle those
converted libraries and make the code regions of the whole
process execute-only, we directly modify the linker’s source
code to place hooks before the library loading and symbol
resolution routines as described in § III-D. One quirk of
the Bionic linker is that when loading libraries,
it places
those modules right next to each other, leaving no space in-
between. This causes problems from multiple perspectives.
Firstly, it lowers the entropy of the address space randomness
thus undermines the effectiveness of ASLR. Secondly, it also
“squeezes” out the space for NLoader to load the NORAX-
related metadata. To resolve this issue, NPatcher encodes the
size of the total metadata into the NORAX header when it
recomposes the binary, and we instrument the linker such that
when it is loading a library it will leave a gap with the size
of the sum of the encoded number (zero for the unconverted
binaries) and a randomly generated nuance.
C. System Optimization
NORAX is designed with optimizations inherited in the
system, such as updating all possible and updatable references
of the relocated executable data to avoid page faults. However,
given that our implementation is targeting the commercial
Android systems, more optimizations could be done by taking
advantages of several handy features on Android. For example,
we can avoid triggering any page faults by deliberately delay
enabling the execute-only conﬁguration during the loading of
a program until all the necessary modules are loaded and have
their symbols resolved. This is feasible because in Android,
for performance reasons, majority of the modules are compiled
with lazy binding disabled, that is to say, when loading such
module, the linker will promptly resolve all symbols it needs
to execute, instead of walking through the loaded modules
on a demanding basis during runtime to resolve symbols if
compiled otherwise.
Last but not
least, a more precise accessing policy for
embedded data is achievable using the commonly available
.eh frame section. This section is compiled into pretty much
all the binaries shipped to user phones based on our prelim-
inary survey on multiple user-build AArch64 based Android
phones from major OEMs like Samsung, LG, HTC etc. For
clarity, we will not expand too much on the technical detail
of the .eh frame section. Basically, we can take advantage of
the PC range ﬁeld for each Frame Description Entry (FDE) to
facilitate the analysis of NDisassembler.
V. EVALUATION AND ANALYSIS
In this section, we evaluate four aspects of NORAX: (i)
whether it breaks the functioning of patched binaries? (ii) how
accurate is its data analysis? (iii) how much overhead it incurs?
and (vi) how practical is it for wide adoption?
A. Functioning of Transformed Binaries
For this test, we selected 20 core system binaries to trans-
form, including both programs and libraries (Table IX). These
binaries provide support for basic functionalities of an Android
phone, such as making a phone call,
installing apps, and
playing videos. We obtain these binaries from a Nexus 5X
phone that runs Android OS v6.0.1 (Marshmallow). These
stock binaries are compiled with compiler optimization and
without debugging metadata.
We tested the functionality of the transformed binaries using
our own test cases as well as the Android Compatibility
Test Suite (CTS) [25]. We modiﬁed the system bootstrapping
scripts (∗.rc ﬁles), which direct Android to load the system
binaries patched by NORAX. Table VII shows the speciﬁc
tests we designed for each system executable and library. For
example, surf acef linger is the UI composer, which depends
on two libraries: libmedia.so and libstagef right.so. Zygote
(app process64) is the template process from which all app
processes are forked. It uses all of the patched binaries. While
running our functionality tests, we observed an attempt by the
linker to read the ELF header, which is located in the pages
marked executable-only. While this attempt was allowed and
facilitated by NMonitor, our system can be optimized to handle
this case during the patching stage instead.
We also ran the Android Compatibility Test Suite (CTS)
on a system where our transformed binaries are installed. The
suite contains around 127,000 test packages, and is mandatory
test performed by OEM vendors to assess the compatibility of
their modiﬁed Android systems. The test results are shown in
Table VIII. NORAX did not introduce any additional failure
than those generated by the vendor customization on the
testing devices. The results from both tests show that the
functioning of patched binaries is not interrupted or broken
by NORAX.
313
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
B. Correctness of Data Analysis
To thoroughly test the correctness of our embedded data
identiﬁcation algorithm described in § III-B, we ran the data
analysis module of NDisassembler against a large test set con-
sisting of all 313 Android system binaries, whose sizes span
from 5.6KB (libjnigraphics.so) to 16.5MB (liblog.so), totaling
102MB. For these binaries, we compare the data identiﬁed
by NDisassembler with the real embedded data. Our ground
truth is obtained by compiling debugging sections (.debug *)
[26] into the binaries. We use an automatic script to collect
bytes in ﬁle offsets that fall outside any function range and
compare them with the analysis results from NDisassembler.
For the bytes that are not used by any of the functions, we
found that some of them are NOP instructions used purely for
the padding purpose; whilst some are just “easter eggs”, for
instance, in the function gcm ghash v8 of libcrypto.so, the
developers left a string “GHASH for ARMv8, CRYPTOGAMS
by ”. These kinds of data were not
collected by NORAX. Since there are not references to them,
making them non-readable will not break any function.
For the tested binaries, NDisassembler correctly identiﬁed
all the embedded data. Only for 28 out of the 313 binaries did
NDisassembler reported false positives (i.e., code mistakenly
identiﬁed as embedded data), due to the over-approximate
approach we use (§ III-B). These rare false positive cases are
expected by our design and are handled by NMonitor during
runtime, as we discussed in § III-B. Table X shows a subset
of the results4.
TABLE VII: Rewritten program functionality tests.
(cid:5)(cid:17)(cid:11)(cid:22)(cid:14)(cid:12)(cid:1)
(cid:2)(cid:12)(cid:20)(cid:10)(cid:19)(cid:13)(cid:18)(cid:21)(cid:13)(cid:17)(cid:16)(cid:1)
(cid:3)(cid:23)(cid:18)(cid:12)(cid:19)(cid:13)(cid:15)(cid:12)(cid:16)(cid:21)(cid:1)
(cid:29)(cid:22)(cid:19)(cid:13)(cid:1)
(cid:27)(cid:22)(cid:31)(cid:11)(cid:22)(cid:30)(cid:1)(cid:1)
(cid:27)(cid:22)(cid:22)(cid:19)(cid:11)(cid:22)(cid:30)(cid:1)
(cid:13)(cid:17)(cid:12)(cid:23)(cid:12)(cid:13)(cid:1)
(cid:19)(cid:22)(cid:16)(cid:13)(cid:1)
(cid:14)(cid:29)(cid:26)(cid:34)(cid:27)(cid:20)(cid:1)(cid:19)(cid:16)(cid:20)(cid:27)(cid:29)(cid:28)(cid:1)
(cid:1)(cid:1)(cid:3)(cid:1)(cid:36)(cid:21)(cid:18)(cid:30)(cid:1)(cid:28)(cid:27)(cid:18)(cid:19)(cid:18)(cid:27)(cid:18)(cid:14)(cid:26)(cid:1)
(cid:2)(cid:2)(cid:1)(cid:1)(cid:12)(cid:22)(cid:25)(cid:14)(cid:1)(cid:36)(cid:21)(cid:18)(cid:30)(cid:1)(cid:28)(cid:27)(cid:18)(cid:19)(cid:18)(cid:27)(cid:18)(cid:14)(cid:26)(cid:1)
(cid:5)(cid:6)(cid:4)(cid:10)(cid:1)(cid:19)(cid:16)(cid:20)(cid:27)(cid:29)(cid:28)(cid:1)
(cid:9)(cid:29)(cid:22)(cid:22)(cid:24)(cid:28)(cid:22)(cid:1)(cid:19)(cid:16)(cid:20)(cid:27)(cid:29)(cid:28)(cid:1)
(cid:18)(cid:21)(cid:26)(cid:27)(cid:10)(cid:19)(cid:19)(cid:13)(cid:1)
(cid:10)(cid:23)(cid:23)(cid:33)(cid:23)(cid:25)(cid:22)(cid:12)(cid:14)(cid:26)(cid:26)(cid:38)(cid:37)(cid:1)
(cid:34)(cid:32)(cid:31)(cid:16)(cid:22)(cid:27)(cid:14)(cid:35)(cid:1)
(cid:24)(cid:26)(cid:14)(cid:14)(cid:12)(cid:22)(cid:20)(cid:13)(cid:1)
(cid:26)(cid:28)(cid:25)(cid:15)(cid:10)(cid:12)(cid:14)(cid:15)(cid:19)(cid:18)(cid:21)(cid:16)(cid:14)(cid:25)(cid:1)
(cid:25)(cid:18)(cid:19)(cid:13)(cid:1)
(cid:2)(cid:10)(cid:8)(cid:1)(cid:24)(cid:28)(cid:32)(cid:33)(cid:16)(cid:26)(cid:26)(cid:1)(cid:19)(cid:16)(cid:20)(cid:27)(cid:29)(cid:28)(cid:1)
(cid:10)(cid:16)(cid:31)(cid:20)(cid:28)(cid:33)(cid:1)(cid:30)(cid:31)(cid:29)(cid:18)(cid:20)(cid:32)(cid:32)(cid:1)(cid:21)(cid:29)(cid:31)(cid:1)(cid:16)(cid:26)(cid:26)(cid:1)
(cid:16)(cid:30)(cid:30)(cid:26)(cid:24)(cid:18)(cid:16)(cid:33)(cid:24)(cid:29)(cid:28)(cid:32)(cid:1)
(cid:11)(cid:34)(cid:16)(cid:26)(cid:18)(cid:29)(cid:27)(cid:27)(cid:38)(cid:32)(cid:1)(cid:30)(cid:31)(cid:29)(cid:30)(cid:31)(cid:24)(cid:20)(cid:33)(cid:16)(cid:31)(cid:36)(cid:1)
(cid:19)(cid:31)(cid:24)(cid:35)(cid:20)(cid:31)(cid:1)
(cid:4)(cid:29)(cid:27)(cid:30)(cid:29)(cid:32)(cid:24)(cid:33)(cid:24)(cid:28)(cid:22)(cid:1)(cid:21)(cid:31)(cid:16)(cid:27)(cid:20)(cid:1)
(cid:17)(cid:34)(cid:21)(cid:21)(cid:20)(cid:31)(cid:32)(cid:1)(cid:21)(cid:29)(cid:31)(cid:1)(cid:19)(cid:24)(cid:32)(cid:30)(cid:26)(cid:36)(cid:1)
(cid:3)(cid:16)(cid:32)(cid:20)(cid:17)(cid:16)(cid:28)(cid:19)(cid:1)(cid:32)(cid:20)(cid:31)(cid:35)(cid:24)(cid:18)(cid:20)(cid:1)
(cid:19)(cid:16)(cid:20)(cid:27)(cid:29)(cid:28)(cid:1)
(cid:27)(cid:29)(cid:34)(cid:28)(cid:33)(cid:1)(cid:12)(cid:5)(cid:4)(cid:16)(cid:31)(cid:19)(cid:37)(cid:1)
(cid:34)(cid:27)(cid:29)(cid:34)(cid:28)(cid:33)(cid:1)
(cid:33)(cid:31)(cid:36)(cid:1)(cid:16)(cid:26)(cid:26)(cid:1)(cid:18)(cid:29)(cid:27)(cid:27)(cid:16)(cid:28)(cid:19)(cid:32)(cid:1)
(cid:33)(cid:31)(cid:36)(cid:1)(cid:16)(cid:26)(cid:26)(cid:1)(cid:18)(cid:29)(cid:27)(cid:27)(cid:16)(cid:28)(cid:19)(cid:32)(cid:1)
(cid:29)(cid:17)(cid:33)(cid:16)(cid:24)(cid:28)(cid:1)(cid:19)(cid:36)(cid:28)(cid:16)(cid:27)(cid:24)(cid:18)(cid:1)(cid:7)(cid:10)(cid:1)
(cid:16)(cid:19)(cid:19)(cid:31)(cid:20)(cid:32)(cid:32)(cid:1)
(cid:18)(cid:29)(cid:26)(cid:26)(cid:20)(cid:18)(cid:33)(cid:1)(cid:32)(cid:36)(cid:32)(cid:33)(cid:20)(cid:27)(cid:1)(cid:26)(cid:29)(cid:22)(cid:1)(cid:21)(cid:29)(cid:31)(cid:1)
(cid:41)(cid:1)(cid:23)(cid:29)(cid:34)(cid:31)(cid:1)
(cid:24)(cid:28)(cid:32)(cid:33)(cid:16)(cid:26)(cid:26)(cid:1)(cid:41)(cid:40)(cid:1)(cid:2)(cid:10)(cid:8)(cid:32)(cid:1)
(cid:29)(cid:30)(cid:20)(cid:28)(cid:1)(cid:42)(cid:40)(cid:1)(cid:16)(cid:30)(cid:30)(cid:32)(cid:37)(cid:1)(cid:18)(cid:26)(cid:29)(cid:32)(cid:20)(cid:1)
(cid:17)(cid:29)(cid:29)(cid:33)(cid:1)(cid:34)(cid:30)(cid:1)(cid:33)(cid:23)(cid:20)(cid:1)(cid:30)(cid:23)(cid:29)(cid:28)(cid:20)(cid:1)
(cid:13)(cid:16)(cid:25)(cid:20)(cid:1)(cid:45)(cid:1)(cid:30)(cid:23)(cid:29)(cid:33)(cid:29)(cid:32)(cid:37)(cid:1)(cid:30)(cid:26)(cid:16)(cid:36)(cid:1)
(cid:43)(cid:40)(cid:1)(cid:27)(cid:24)(cid:28)(cid:1)(cid:27)(cid:29)(cid:35)(cid:24)(cid:20)(cid:1)
(cid:6)(cid:16)(cid:35)(cid:20)(cid:1)(cid:41)(cid:40)(cid:1)(cid:27)(cid:24)(cid:28)(cid:1)(cid:30)(cid:23)(cid:29)(cid:28)(cid:20)(cid:1)
(cid:18)(cid:16)(cid:26)(cid:26)(cid:1)
(cid:8)(cid:22)(cid:10)
(cid:10)(cid:12)(cid:20)(cid:20)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
(cid:15)(cid:20)(cid:32)(cid:1)
4This subset was chosen to be consistent with the binaries used in the other
tests in this section. The complete set of all 313 Android system binaries,
which can be easily obtained, are not shown here due to the space limit.
TABLE VIII: System compatibility evaluation, the converted
zygote, qseecomd, installd, rild, logd, surfaceﬂinger, libc++,
libstagefright are selected randomly to participate the test to
see whether they can run transparently with other unmodiﬁed
system components.
(cid:1)(cid:1)
(cid:3)(cid:8)(cid:7)(cid:1)
(cid:21)(cid:22)(cid:25)(cid:20)(cid:10)(cid:19)(cid:1)
(cid:3)(cid:8)(cid:7)(cid:1)
(cid:4)(cid:5)(cid:6)(cid:2)(cid:9)(cid:1)
(cid:7)(cid:9)(cid:20)(cid:20)(cid:1)
(cid:4)(cid:9)(cid:13)(cid:14)(cid:1) (cid:6)(cid:17)(cid:21)(cid:1)(cid:3)(cid:23)(cid:12)(cid:10)(cid:22)(cid:21)(cid:12)(cid:11)(cid:1) (cid:7)(cid:14)(cid:9)(cid:16)(cid:1)(cid:6)(cid:9)(cid:15)(cid:12)(cid:1)
(cid:42)(cid:43)(cid:47)(cid:37)(cid:45)(cid:46)(cid:48)(cid:1)
(cid:46)(cid:46)(cid:43)(cid:1)
(cid:42)(cid:43)(cid:47)(cid:37)(cid:45)(cid:46)(cid:48)(cid:1)
(cid:46)(cid:46)(cid:43)(cid:1)
(cid:41)(cid:1)
(cid:41)(cid:1)
(cid:4)(cid:13)(cid:12)(cid:1)
(cid:4)(cid:13)(cid:12)(cid:1)
TABLE IX: Binary transformation correctness test.
(cid:7)(cid:25)(cid:15)(cid:30)(cid:22)(cid:16)(cid:1)
(cid:11)(cid:20)(cid:35)(cid:16)(cid:1)
(cid:36)(cid:11)(cid:29)(cid:25)(cid:14)(cid:21)(cid:37)(cid:1)
(cid:11)(cid:20)(cid:35)(cid:16)(cid:1)
(cid:36)(cid:8)(cid:9)(cid:10)(cid:2)(cid:12)(cid:37)(cid:1)
(cid:5)(cid:20)(cid:22)(cid:16)(cid:1)(cid:11)(cid:20)(cid:35)(cid:16)(cid:1)
(cid:9)(cid:31)(cid:16)(cid:27)(cid:19)(cid:16)(cid:13)(cid:15)(cid:1)
(cid:28)(cid:21)(cid:18)(cid:11)(cid:1)
(cid:26)(cid:21)(cid:31)(cid:9)(cid:21)(cid:30)(cid:1)(cid:1)
(cid:26)(cid:21)(cid:21)(cid:18)(cid:9)(cid:21)(cid:30)(cid:1)
(cid:11)(cid:15)(cid:10)(cid:22)(cid:10)(cid:11)(cid:1)
(cid:18)(cid:21)(cid:14)(cid:11)(cid:1)
(cid:16)(cid:20)(cid:25)(cid:26)(cid:8)(cid:18)(cid:18)(cid:11)(cid:1)
(cid:8)(cid:22)(cid:22)(cid:34)(cid:22)(cid:24)(cid:21)(cid:10)(cid:12)(cid:25)(cid:25)(cid:39)(cid:38)(cid:1)
(cid:35)(cid:32)(cid:31)(cid:14)(cid:21)(cid:26)(cid:12)(cid:36)(cid:1)
(cid:23)(cid:25)(cid:12)(cid:12)(cid:10)(cid:21)(cid:19)(cid:11)(cid:1)
(cid:25)(cid:27)(cid:24)(cid:13)(cid:8)(cid:10)(cid:12)(cid:13)(cid:18)(cid:16)(cid:20)(cid:14)(cid:12)(cid:24)(cid:1)
(cid:24)(cid:16)(cid:18)(cid:11)(cid:1)
(cid:18)(cid:16)(cid:9)(cid:8)(cid:24)(cid:26)(cid:33)(cid:25)(cid:21)(cid:1)
(cid:18)(cid:16)(cid:9)(cid:25)(cid:26)(cid:8)(cid:14)(cid:12)(cid:13)(cid:24)(cid:16)(cid:14)(cid:15)(cid:26)(cid:33)(cid:25)(cid:21)(cid:1)
(cid:18)(cid:16)(cid:9)(cid:10)(cid:24)(cid:31)(cid:22)(cid:26)(cid:21)(cid:33)(cid:25)(cid:21)(cid:1)
(cid:18)(cid:16)(cid:9)(cid:19)(cid:12)(cid:11)(cid:16)(cid:8)(cid:33)(cid:25)(cid:21)(cid:1)
(cid:18)(cid:16)(cid:9)(cid:10)(cid:33)(cid:25)(cid:21)(cid:1)
(cid:18)(cid:16)(cid:9)(cid:10)(cid:40)(cid:40)(cid:33)(cid:25)(cid:21)(cid:1)
(cid:18)(cid:16)(cid:9)(cid:25)(cid:23)(cid:18)(cid:16)(cid:26)(cid:12)(cid:33)(cid:25)(cid:21)(cid:1)
(cid:18)(cid:16)(cid:9)(cid:9)(cid:16)(cid:20)(cid:11)(cid:12)(cid:24)(cid:33)(cid:25)(cid:21)(cid:1)
(cid:18)(cid:16)(cid:9)(cid:19)(cid:33)(cid:25)(cid:21)(cid:1)