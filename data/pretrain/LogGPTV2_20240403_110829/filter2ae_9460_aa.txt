## 0x01 前言
`printf`是TokyoWesterns CTF
2019一道格式化漏洞利用题，有意思的是，题目给的二进制程序自己实现了一个`printf`函数。一般，在调用完main函数以后，程序call
`__libc_start_main`，继续调用`exit`退出。若能够覆盖`exit`中的函数指针，便可在程序退出的时候劫持程序控制流。
## 0x02 加载libc
题目给了3个文件，除了常规的libc还额外给了一个ld.so，ld.so用于装载libc。这里需要用到[patchelf](https://github.com/NixOS/patchelf)这个工具，执行以下命令，将libc和ld.so指向题目所给的文件
    patchelf --set-interpreter /root/workspace/elf/ld-linux-x86-64-b6d3f5f70ba36f736a596a01829be4d619e373b4167b513d634c044ac7d74b94.so.2 printf
    patchelf --set-rpath /root/workspace/elf:/libc.so.6 printf
现在printf程序指向了题目所给libc和ld.so
    ~/workspace/elf # ldd printf
        linux-vdso.so.1 =>  (0x00007ffe09ac1000)
        libc.so.6 => /root/workspace/elf/libc.so.6 (0x00007fd7c5dd0000)
        /root/workspace/elf/ld-linux-x86-64-b6d3f5f70ba36f736a596a01829be4d619e373b4167b513d634c044ac7d74b94.so.2 => /lib64/ld-linux-x86-64.so.2 (0x00007fd7c5fbb000)
## 0x03 分析漏洞点
保护全开
    [*] '/root/workspace/elf/printf'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
        RUNPATH:  '/root/workspace/elf:/libc.so.6'
查看伪代码，`sub_136E`是程序自己实现的printf函数
    _int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      __int64 v3; // rdx
      __int64 v4; // rcx
      __int64 v5; // r8
      __int64 v6; // r9
      __int64 v7; // rdx
      __int64 v8; // rcx
      __int64 v9; // r8
      __int64 v10; // r9
      const unsigned __int16 **v11; // rax
      __int64 v12; // rdx
      __int64 v13; // rcx
      __int64 v14; // r8
      __int64 v15; // r9
      __int64 v16; // rdx
      __int64 v17; // rcx
      __int64 v18; // r8
      __int64 v19; // r9
      __int64 v20; // rdx
      __int64 v21; // rcx
      __int64 v22; // r8
      __int64 v23; // r9
      int i; // [rsp+8h] [rbp-118h]
      int v26; // [rsp+Ch] [rbp-114h]
      char buf[264]; // [rsp+10h] [rbp-110h]
      unsigned __int64 v28; // [rsp+118h] [rbp-8h]
      v28 = __readfsqword(0x28u);
      sub_130D();
      sub_136E((__int64)"What's your name?", (__int64)a2, v3, v4, v5, v6);
      v26 = read(0, buf, 0x100uLL);
      buf[v26 - 1] = 0;
      for ( i = 0; i .  */
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "exit.h"
    #include "set-hooks.h"
    DEFINE_HOOK (__libc_atexit, (void))
    /* Initialize the flag that indicates exit function processing
       is complete. See concurrency notes in stdlib/exit.h where
       __exit_funcs_lock is declared.  */
    bool __exit_funcs_done = false;
    /* Call all functions registered with `atexit' and `on_exit',
       in the reverse of the order in which they were registered
       perform stdio cleanup, and terminate program execution with STATUS.  */
    void
    attribute_hidden
    __run_exit_handlers (int status, struct exit_function_list **listp,
                         bool run_list_atexit, bool run_dtors)
    {
      /* First, call the TLS destructors.  */
    #ifndef SHARED
      if (&__call_tls_dtors != NULL)
    #endif
        if (run_dtors)
          __call_tls_dtors ();
      /* We do it this way to handle recursive calls to exit () made by
         the functions registered with `atexit' and `on_exit'. We call
         everyone on the list and use the status value in the last
         exit (). */
      while (true)
        {
          struct exit_function_list *cur;
          __libc_lock_lock (__exit_funcs_lock);
        restart:
          cur = *listp;
          if (cur == NULL)
            {
              /* Exit processing complete.  We will not allow any more
                 atexit/on_exit registrations.  */
              __exit_funcs_done = true;
              __libc_lock_unlock (__exit_funcs_lock);
              break;
            }
          while (cur->idx > 0)
            {
              struct exit_function *const f = &cur->fns[--cur->idx];
              const uint64_t new_exitfn_called = __new_exitfn_called;
              /* Unlock the list while we call a foreign function.  */
              __libc_lock_unlock (__exit_funcs_lock);
              switch (f->flavor)
                {
                  void (*atfct) (void);
                  void (*onfct) (int status, void *arg);
                  void (*cxafct) (void *arg, int status);
                case ef_free:
                case ef_us:
                  break;
                case ef_on:
                  onfct = f->func.on.fn;
    #ifdef PTR_DEMANGLE
                  PTR_DEMANGLE (onfct);
    #endif
                  onfct (status, f->func.on.arg);
                  break;
                case ef_at:
                  atfct = f->func.at;
    #ifdef PTR_DEMANGLE
                  PTR_DEMANGLE (atfct);
    #endif
                  atfct ();
                  break;
                case ef_cxa:
                  /* To avoid dlclose/exit race calling cxafct twice (BZ 22180),
                     we must mark this function as ef_free.  */
                  f->flavor = ef_free;
                  cxafct = f->func.cxa.fn;
    #ifdef PTR_DEMANGLE
                  PTR_DEMANGLE (cxafct);
    #endif
                  cxafct (f->func.cxa.arg, status);
                  break;
                }
              /* Re-lock again before looking at global state.  */
              __libc_lock_lock (__exit_funcs_lock);
              if (__glibc_unlikely (new_exitfn_called != __new_exitfn_called))
                /* The last exit function, or another thread, has registered
                   more exit functions.  Start the loop over.  */
                goto restart;
            }
          *listp = cur->next;
          if (*listp != NULL)
            /* Don't free the last element in the chain, this is the statically
               allocate element.  */
            free (cur);
          __libc_lock_unlock (__exit_funcs_lock);
        }
      if (run_list_atexit)
        RUN_HOOK (__libc_atexit, ());
      _exit (status);
    }
    void
    exit (int status)
    {
      __run_exit_handlers (status, &__exit_funcs, true, true);
    }
    libc_hidden_def (exit)
注意到`__libc_atexit`这个函数指针，当程序退出会调用exit函数，最终调用`__libc_atexit`所指向的地址
    # RUN_HOOK (__libc_atexit, ());
    ...
    # define DEFINE_HOOK_RUNNER(name, runner, proto, args) \
    DEFINE_HOOK (name, proto); \
    extern void runner proto; void runner proto { RUN_HOOK (name, args); }
    ...
## 0x04 Debug
现在问题就在于如何将`one_gadget`写入该地址。向buf随便输入一串字符（我这里输入`one_gadget`的值），在内存检索该值，一共找到两处：