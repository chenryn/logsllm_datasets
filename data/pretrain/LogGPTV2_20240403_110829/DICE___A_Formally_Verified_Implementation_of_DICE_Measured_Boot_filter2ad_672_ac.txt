we design a platform-agnostic interface (Section 4.1) against
which we implement the core DICE engine (Section 4.2).
While we provide a model F(cid:63) implementation of the interface,
the extracted DICE engine C code is linked with a native,
platform-speciﬁc implementation of it. This native implemen-
tation is part of our TCB.
1096    30th USENIX Security Symposium
USENIX Association
4.1 Platform-Agnostic Interface
Figure 3 shows the platform-agnostic interface used by the
DICE engine. The interface deﬁnes a state record type that
exports the CDI array (a secret bytes array of length 32) and
the L0 binary to the DICE engine. For driving the speciﬁca-
tions about disabling UDS and clearing the stack, the state
type also contains a pointer (i.e. an array of length 1) to an
erased t, where t is an abstract type in the interface; the erased
type constructor ensures that the type is safely erased during
extraction. The interface associates a preorder t_rel with the
ghost state pointer; F(cid:63)’s theory of monotonicity [12] enforces
that the contents of the pointer evolve as per t_rel. The reﬁne-
ment formula on the l0_binary ﬁeld captures the invariant that
all arrays in state are (a) pairwise disjoint, and (b) eternal, i.e.
they are allocated on the heap and are never freed. The get_st
API provides a way to get the state.
The interface exports the abstract uds_enabled and
stack_cleared predicates—as we will see later, the DICE en-
gine speciﬁcation includes both of these in its postcondition.
As we remarked earlier, the stack_cleared predicate is not con-
nected to the memory model. The interface provides three
main functions:
• read_uds provides access to the UDS; it copies the UDS
into the argument array out. Its precondition requires
the callers to prove that (i) access to UDS is enabled
and (ii) out is a stack-allocated array that is live in the
input memory. The postcondition of read_uds ensures
that (a) it does no heap allocations (the Stack effect),
(b) it only modiﬁes out, and (c) the contents of out in the
ﬁnal memory are same as the (ghost) UDS bytes.
• disable_uds disables access to the UDS. Its postcondition
ensures that it only modiﬁes the ghost state, preserving
contents of all other arrays.
• clear_stack clears the stack memory region in a platform-
speciﬁc way. Its precondition requires that the UDS
access is disabled. Its postcondition ensures that the
stack_cleared predicate holds, and all the heap arrays, ex-
cept the ghost state, are preserved in the ﬁnal memory.
Because ghost state is erased during extraction to C,
clear_stack preserves all heap arrays, such as CDI.
The predicate heap_arrays_except_ghost_state_are_preserved is
deﬁned as:
let heap_arrays_except_ghost_state_are_preserved (h0 h1:mem) =
let s = get_st () in
∀a len (b:array a len).
(heap_array b ∧ disjoint [b; s.ghost_state] ∧ live h0 b) =⇒
(as_seq h0 b == as_seq h1 b ∧ live h1 b)
Through abstraction, the interface enforces several prop-
erties in the DICE engine that uses it. First, access to UDS
cannot be enabled after it is disabled. Indeed, only when the
device reboots, will the access to UDS be enabled again. Sec-
ond, heap or stack arrays cannot be modiﬁed by the DICE
engine after clear_stack is called. stack_cleared is an abstract
predicate, and the clear_stack function provides it as a post-
condition on its output memory. The interface provides no
other functions or lemmas for stack_cleared. Thus, if the DICE
engine modiﬁes memory in any way after clear_stack is called,
it will not be able to prove stack_cleared in the ﬁnal mem-
ory before returning. Third, clear_stack enforces that access
to UDS must be disabled before its invocation. As a result,
the interface enforces the following coding discipline on the
DICE engine: it should read the UDS in a stack-allocated
buffer, compute CDI, disable access to UDS, clear the stack,
and return.
Model implementation of the interface. Figure 4 shows the
model implementation of the platform-agnostic interface in
F(cid:63). The implementation deﬁnes type t to be a pair of two
booleans, the ﬁrst indicates whether access to UDS is enabled,
and the second indicates whether the stack has been cleared.
The type t_rel enforces the aforementioned coding discipline:
if access to UDS is enabled, then it may be disabled (the
ﬁrst transition from (true, _) to (false, _)); if access to UDS is
disabled, then the stack may be cleared (the second transition),
and the ghost state remains unchanged for all other transitions.
The implementation deﬁnes a module-level variable of type
state that is returned by the get_st function.
4.2 DICE Engine Implementation
We prove the following top-level speciﬁcation for the DICE
engine in DICE(cid:63):
let cdi_spec (h:mem) =
let st = get_st () in
as_seq h st.cdi == (∗ Functional spec for the CDI contents ∗)
Spec.HMAC.hmac SHA2_256
(Spec.Hash.hash SHA2_256 uds_bytes)
(Spec.Hash.hash SHA2_256 (as_seq h st.l0_binary))
val dice_main () : Stack unit (requires λh →uds_enabled h)
(ensures λh0 () h1 →
cdi_spec h1 ∧ (¬ uds_is_enabled h1) ∧ stack_cleared h1 ∧
heap_arrays_except_cdi_and_ghost_state_are_preserved h0 h1)
The predicate cdi_spec speciﬁes that the contents of the
CDI buffer satisﬁes Eq. 1 using speciﬁcations about crypto-
graphic primitives from HACL(cid:63). The dice_main function is in
the Stack effect and requires that access to UDS is enabled
when it is called. Its postcondition ensures that in the ﬁnal
memory CDI satisﬁes cdi_spec, access to the UDS is disabled,
and stack_cleared is true. It also ensures that contents of all
other heap arrays, except ghost state, are preserved. (Note that
ghost state is erased at extraction). Thus, our DICE engine im-
plementation is functionally correct, and does not leak secrets
through memory or other interfaces such as network, disk,
USENIX Association
30th USENIX Security Symposium    1097
type t = bool & bool
let t_rel = λs1 s2 →length s1 == length s2 ∧ (length s1 > 0 =⇒
(let t1 = reveal (index s1 0) in
let t2 = reveal (index s2 0) in
match t1, t2 with
| (true, _), (false, _)
| (false, _), (false, true) →(cid:62)
| _ →t1 == t2
let state_var : state = ... (∗ allocate the arrays ∗)
let uds_enabled h = fst (get h state_var.ghost_state)
let stack_cleared h = snd (get h state_var.ghost_state)
...
let compute_cdi () =
push_frame (); (∗ Low(cid:63) construct for stack frame creation ∗)
let uds = alloca 0x00 uds_len in
read_uds uds;
let uds_hash = alloca 0x00 32ul in
let l0_hash = alloca 0x00 32ul in
Hacl.Hash.SHA2.hash_256 uds uds_len uds_hash;
Hacl.Hash.SHA2.hash_256 st.l0_binary st.l0_binary_size l0_hash;
Hacl.HMAC.compute_sha2_256 st.cdi uds_hash 32ul l0_hash 32ul;
pop_frame ()
let dice_main () = compute_cdi (); disable_uds (); clear_stack ()
Figure 4: F(cid:63) implementation of platform-agnostic interface
Figure 5: F(cid:63) implementation of DICE main function
etc. (because Stack effect does not permit any I/O). Figure 5
shows the implementation of dice_main.
5 DICE(cid:63) L0
This section presents the L0 implementation in DICE(cid:63).
Veriﬁed properties. Besides memory safety, we prove func-
tional correctness for the outputs (DeviceIDpub and its CSR,
AliasKey pair, and AliasKeypub certiﬁcate). Functional cor-
rectness ensures that the code does not inadvertently leak se-
crets (CDI or DeviceIDpriv) into these arrays. We also prove
that our implementation does not leak secrets through the
heap: it is memory safe, does not perform any heap alloca-
tions, and only modiﬁes the necessary output arrays (as per
their functional speciﬁcations). Secrets are modeled using
the (abstract) type sbyte (as described in Section 3.3), which
ensures that the code is side-channel resistant. Because our
serializers (Section 5.2) are written over public bytes, F(cid:63) type-
safety ensures that the L0 implementation does not serialize
any secrets.
X.509 certiﬁcates introduce a new attack surface in L0. For
instance, implementing the complex ASN.1 encoding format
used by X.509 directly in C leaves open the possibilities of
low-level exploitable memory errors. Furthermore, an inse-
cure X.509 serializer (as deﬁned in Section 5.1) could allow
an attacker to break measured boot. For example, if the X.509
implementation is not injective, then an attacker could down-
load a malicious L1 image on the device and exploit this
non-injectivity to generate a certiﬁcate with the FWID of a
valid L1 image.
General purpose X.509 libraries are large and complex, and
come without any formal guarantees of correctness and secu-
rity. Unsurprisingly, these are often the source of high-proﬁle
security vulnerabilities [1,4,5]. At the same time, L0 function-
ality requires only a subset of X.509 features (datatypes, exten-
sions and cryptographic identiﬁers). To avoid the complexity
of full X.509, the DICE speciﬁcation recommends using a
custom DICE-speciﬁc X.509 library (Section 7.3 in [58]).
Therefore, we have built a formally veriﬁed, secure X.509
certiﬁcate serialization library that contains all features neces-
sary for implementing L0. Extending this library to support
more datatypes and encodings is an interesting future work.
Our X.509 library is built using LowParse [49], a library
of parser combinators written in F(cid:63). Section 5.1 presents an
overview of LowParse, Section 5.2 describes our extension to
LowParse to support (a fragment of) X.509, and Section 5.3
presents a formally veriﬁed L0 implementation.
5.1 LowParse Overview
LowParse deﬁnes combinators for parsers and serializers cap-
turing their correctness and security properties in the types.
Given a set of valid messages V , the library deﬁnes a notion
of secure parsers as parsers that are complete, i.e. accepting
at least one binary representation of each message, and non-
malleable, i.e. accepting at most one binary representation of
each message. A secure serializer is the mathematical inverse
of a secure parser (considering the parser to be a function
from bytes to V ∪{⊥}, where ⊥ denotes the error value).
By building our X.509 library using LowParse, we formally
verify that our parsers and serializers are also secure. This
means, for example, that our X.509 serializations are injec-
tive and, hence, the kind of L1 image impersonation attacks
outlined above are not possible.
The LowParse architecture consists of a speciﬁcation layer,
where parser and serializer speciﬁcations are written in the
pure fragment of F(cid:63) (using functional sequences and mathe-
matical integers), and a low-level implementation layer writ-
ten in Low(cid:63). The security proofs are done on the speciﬁca-
tion layer, while the low-level implementations are proven
memory safe and functionally correct w.r.t. the speciﬁcations.
During extraction, the speciﬁcations and the proofs are erased,
and the low-level implementations are extracted to C.
The F(cid:63) type for parser speciﬁcation is:
type pbyte = pu8 (∗ the type of public bytes ∗)
type parser (t:Type) (k:meta) =
p:(input:seq pbyte →Ghost (option (t ∗ l:nat{l ≤ length input})))
{ parser_prop k p}
1098    30th USENIX Security Symposium
USENIX Association
The parser speciﬁcation parser t k is a ghost function that takes
as input a sequence of bytes, and either returns an error (the
value None), or a tuple with a value of type t and the number
of consumed bytes. The reﬁnement parser_prop k p ensures
that the parser speciﬁcation p satisﬁes properties speciﬁed by
the metadata k, such as the non-malleability property.
The F(cid:63) type for serializer speciﬁcation is:
type serializer #t #k (p:parser t k) =
s:(t →Ghost (seq pbyte)){∀ x. p (s x) == Some (x, length (s x))}
The serializer speciﬁcation serializer p, indexed by the cor-
responding parser speciﬁcation p, is a ghost function that
serializes a value x of type t into a sequence of bytes such
that parsing these bytes using p returns the same value v and
consumes all the bytes in the sequence.
The Low(cid:63) type of a low-level serializer implementation is:
type serializer32 #t #k (#p:parser t k) (s:serializer p) =
x:t →b:array pbyte →pos:u32 →Stack u32
(requires λh →
live h b ∧ v pos + Seq.length (serialize s x) ≤ length b)
(ensures λh0 len h1 →modiﬁes b h0 h1 ∧
as_seq h1 b ==
replace (as_seq h0 b) (v pos) (v (pos + len)) (serialize s x))
The low-level serializer implementation serializer32 s takes as
input a value x of type t, an array of bytes b, and a position
pos in b at which to serialize x, and returns the number of seri-
alized bytes. The precondition requires that the array b is live
and is large enough to store the serialization of x. Note that
the speciﬁcation function v is used to coerce a u32 to a mathe-
matical integer. The postcondition ensures that only the input
array b is modiﬁed, no heap allocations are performed (speci-
ﬁed via the Stack effect on the return type), and the len bytes
of b starting at pos equal the serialization of x as speciﬁed
by the serializer speciﬁcation s, which ensures the functional
correctness of the low-level serializer implementation.
Based on these types, LowParse deﬁnes combinators,
which are higher-order functions that compose basic parsers
and serializers into parsers and serializers for composite types.
For example, the serialize_nondep_then combinator takes as in-
put two serializer speciﬁcations s1 and s2 for types t1 and t2,
resp., and builds a serialize speciﬁcation for t1 ∗ t2 by invoking
s1 followed by s2.
Ramananandro et al. [49] also present the EverParse frame-
work that uses the LowParse combinators to auto-generate
parsers and serializers from message formats speciﬁed in
a domain-speciﬁc language. The paper also describes a
functional-implementation layer (in addition to the speciﬁca-
tion layer and the low-level layer discussed above). We do not
use these features, and refer the reader to [49] for more details.
Instead, we focus on parser and serializer speciﬁcations, and
low-level serializer implementation for X.509.
5.2 X.509 Serialization
The X.509 standard [24] describes the structure for public key
certiﬁcates. An X.509 certiﬁcate contains basic ﬁelds such as
a serial number, version, signature algorithm and value, and
public key info, as well as optional extensions. The certiﬁ-
cate structure is expressed in the Abstract Syntax Notation
One (ASN.1) language. ASN.1 deﬁnes datatypes, such as
integer, boolean, sequence, bitstring, octet string, and syntax
for describing message formats using their composition. It
also deﬁnes several binary encoding rules, such as Distin-
guished Encoding Rules (DER) [30], which is used by X.509
certiﬁcates.
DER encodes every message, including the basic types, in a
Tag-Length-Value (TLV) format. The value bytes encode the
message, which could be a primitive ASN.1 value or another
TLV triplet. The length bytes encode the length of the value
bytes, and tag is a one-byte value encoding the type. Both the
value and length DER encodings are variable length.
Extending LowParse with backward serializers. LowParse