# A New and Extended Fault Analysis on RSA

## Authors
Cai-Sen Chen  
Tao Wang  
Department of Computer Engineering, Mechanical Engineering College  
Shijiazhuang, China  
Email: [Your Email Here]  

## Abstract
Previous fault analysis on RSA Square-and-Multiply implementations, which relies on modifying the public modulus \( N \), is difficult to execute in practice. This paper proposes a new method for executing fault analysis by regulating the voltage supply of the system to inject transient faults into multiplication operations instead of modifying \( N \). To improve the feasibility of the attack, we suggest an extension of fault analysis that recovers the key segment by segment rather than bit by bit. The complexity of the algorithm is analyzed, and its expansibility and feasibility are demonstrated through theoretical and simulation experiments. The results show that the new fault analysis algorithm is more effective in practice.

## Categories and Subject Descriptors
E.3 [DATA ENCRYPTION]: Public key cryptosystems; K.6.5 [Security and Protection]: Physical security

## General Terms
Security, Algorithms, Experimentation

## Keywords
Side Channel Attack, Fault Analysis, Square-and-Multiply Algorithm, Fixed-Windows Exponentiation

## 1. Introduction
The side channel attack (SCA) was first proposed by Paul Kocher in 1996 [6]. SCA amplifies and evaluates leaked information using statistical methods, often proving more powerful than classical cryptanalysis. Fault analysis, one of the most potent SCA techniques, was first introduced by Boneh et al. [3], who successfully applied it to smart cards with RSA-CRT. Differential Fault Analysis (DFA) was later published by Biham and Shamir, targeting secret key cryptosystems [2]. Arjen Lenstra further improved this method, using only faulty signatures and plaintexts [7].

These attacks typically modify the behavior of an execution, but countermeasures have made them increasingly challenging over the past decade. The core of RSA is modular exponentiation, which can be implemented using various algorithms such as the Square-and-Multiply algorithm, Chinese Remainder Theorem (CRT), and Fixed-Windows Exponentiation (FWE). Most fault attacks on RSA focus on CRT implementations. However, the Square-and-Multiply algorithm, due to its simplicity, is widely used in hardware like smart cards, FPGAs, and microprocessors.

JP. Seifert's work on perturbing public elements [11] and E. Brier et al.'s extension to full recovery of the private exponent [4] highlighted the vulnerability of RSA. Jorn-Marc Schmidt et al. [10] and Alexandre Berzati [1] further explored fault analysis on Square-and-Multiply and Left-To-Right implementations. Andrea Pellegrini [9] showed that a single bit error in a multiplication result could fully compromise the key in RSA FWE implementations.

This paper focuses on fault analysis against the Square-and-Multiply algorithm, injecting random faults into multiplication operations during exponentiation instead of modifying \( N \). We propose a new fault analysis algorithm for RSA Left-to-Right implementation and extend it to the FWE implementation used in OpenSSL. Our approach recovers the key segment by segment, demonstrating the algorithm's expansibility and feasibility through theoretical and simulation experiments.

## 2. RSA and Fault Attack Model

### 2.1 RSA Algorithm
RSA remains the most widely used signature scheme, requiring a public key \((N, e)\) and a private key \((N, d)\). Encryption is performed using \( C = m^e \mod N \), and decryption using \( m = C^d \mod N \). The core computation is modular exponentiation, often implemented using the Square-and-Multiply algorithm, including "Left-to-Right" (LRE) and "Right-to-Left" (RLE) variants.

In LRE, if \( d_k = 1 \), an additional operation \( S = S \times m \mod N \) is performed, resulting in \( S = \left( \cdots \left( m^2 \times m^{d_{n-2}} \right)^2 \times m^{d_{n-3}} \right)^2 \cdots \times m^{d_0} \mod N \).

RSA-CRT has been shown to be vulnerable to fault analysis [12], leading to countermeasures in OpenSSL [8]. It verifies the correctness of the result using the public key, resorting to the LRE algorithm if a mismatch is detected. The FWE algorithm in OpenSSL (v 0.9.8i) ensures constant-time execution, precomputing and storing powers of \( m \) from \( 0 \) to \( 2^{\text{win size}} - 1 \).

### 2.2 Fault Attack Model
Fault attacks differ in location, timing, number of affected bits, and type (transient, permanent, or destructive). We construct a fault attack model for RSA Square-and-Multiply implementation, focusing on faults occurring in the multiplier during square or multiply operations.

## 3. Fault Analysis on RSA Based on Fault in Multiplier

### 3.1 Fault Injection
To inject faults, we exploit a circuit-level vulnerability common in microprocessor design: high-performance multipliers use short critical path delays. Environmental conditions, such as high temperatures or voltage manipulation, can slow down signal propagation, causing faulty outputs. We focus on single-bit flip faults, assuming a sequence of faults is injected by manipulating the supply voltage.

### 3.2 Key Analysis Algorithm
We analyze the situation where a fault occurs at the \( j \)-th step before the end of the exponentiation. From both correct and faulty signatures, we recover the value of \( d_j \) assuming the top \( n - j + 1 \) bits of \( d \) are known. By controlling the time, location, and length of the fault, we can recover \( d_j \) using exhaustive search. Subsequent secret key bits are found by repeating the attack, eventually recovering the entire key.

In the same way, we apply fault analysis to RSA FWE implementation with a similar analysis algorithm.

## 4. Experimental Results and Complexity Analysis
Our experimental results and complexity analysis demonstrate the effectiveness and feasibility of the new fault analysis algorithm. Theoretical and simulation experiments validate the expansibility and practicality of the approach.

## 5. Conclusion
This study presents a new and extended fault analysis on RSA, focusing on injecting transient faults into multiplication operations. The method recovers the key segment by segment, improving the feasibility and effectiveness of the attack. The results will also benefit the analysis of other public cryptography systems.

---

**Acknowledgments:**
This research was supported by the National Natural Science Foundation of China under Grant No. 60772082 and the Natural Science Foundation of Hebei Province under Grant No. 08M010.

**Copyright:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.
ASIACCS '11, March 22â€“24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.