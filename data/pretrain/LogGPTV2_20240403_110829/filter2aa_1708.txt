# Module 1: From High-Level Languages to Running Processes

## Overview
This module covers the journey from high-level programming languages through assembly to the running process. We will explore how an executable file (EXE) is transformed into a running process, and the various components and structures involved in this transformation.

**Reference:** [Malware Training Volume 1 by @hasherezade](https://github.com/hasherezade/malware_training_vol1)

## Running Executables: Process Basics

### What is a Process?
- When an EXE file is executed, the system creates a **process**.
- A process is a container for all the resources an application needs to run.
- The actual execution of code is performed by **threads** within the process.
- Each process has its own private address space, which is independent of other processes.
- Processes have their own access tokens, defining their security context.

### Types of Processes on Windows
- **System Process**
- **Subsystem Process**
- **Service**
- **User Processes** (e.g., applications)

### Process Identification
- A process is identified by its **PID (Process ID)**, which is unique throughout the system at the time of running.
- After a process terminates, its PID may be reused by a new process.
- Each process can have one or more threads, identified by **TID (Thread ID)**.
- TIDs, like PIDs, are unique throughout the system and may be reused after a thread terminates.

### Inter-Process Communication
- Processes can access each other via handles if their security contexts allow it.
- Example function: `HANDLE OpenProcess(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId);`

### Process Structure
- A process contains one or more threads that execute the code.
- Example:
  - **MyApp.exe**
  - **NTDLL.DLL**
  - **Kernel32.DLL**
  - **PID = 789**
  - **Threads:**
    - **TID = 4278**
    - **TID = 985**
    - **TID = 223** (Main thread, started at the Entry Point of the application)

### Process Initialization
- **What happens when a process is created?**
  - **CreateProcessA** function:
    ```c
    BOOL CreateProcessA(
        LPCSTR                lpApplicationName,
        LPSTR                 lpCommandLine,
        LPSECURITY_ATTRIBUTES lpProcessAttributes,
        LPSECURITY_ATTRIBUTES lpThreadAttributes,
        BOOL                  bInheritHandles,
        DWORD                 dwCreationFlags,
        LPVOID                lpEnvironment,
        LPCSTR                lpCurrentDirectory,
        LPSTARTUPINFOA        lpStartupInfo,
        LPPROCESS_INFORMATION lpProcessInformation
    );
    ```
  - **Steps in Process Initialization:**
    1. Create a new process object and allocate memory.
    2. Map `NTDLL.dll` and the initial EXE into memory (MEM_IMAGE).
    3. Create the first thread and allocate stack space.
    4. Resume the first thread, calling `NTDLL.LdrpInitialize`.
    5. `NTDLL.LdrpInitialize`:
      - Load all imported DLLs and call `DllMain` with `DLL_PROCESS_ATTACH`.
      - Call `Kernel32.BaseProcessStart`.
    6. `Kernel32.BaseProcessStart` calls the initial EXE's Entry Point.

### Windows Loader
- **CreateProcess:**
  - Creates a process and allocates virtual memory.
  - Loads the initial EXE and `NTDLL.DLL`.
  - Creates the first thread and its stack.
- **LdrpInitialize:**
  - Called when the first thread resumes.
  - Loads required DLLs and initializes them.
- **BaseProcessStart:**
  - Calls the Entry Point of the original application.

### Suspended Process Creation
- If a process is created in a suspended mode, only the main EXE and `NTDLL.DLL` are mapped before the first thread runs.
- This is important for techniques like **Process Hollowing**, which we will discuss later.

## Threads

### Thread Basics
- A **thread** is the entity responsible for executing the code.
- Example:
  - **MyApp.exe**
  - **Main thread (TID = 223)**
  - **Context (state of the processor)**
  - **Kernel Mode stack**
  - **User Mode stack**
  - **TLS (Thread Local Storage)**

### Thread Management
- Threads are executed by the processor and managed by the Operating System (kernel mode).
- **Scheduler**: Decides which thread gets to run and performs context switching.
- **User Mode Scheduling (UMS)**: An optimization in 64-bit Windows to make thread switching less resource-consuming. UMS threads can switch context between themselves in user mode.

### Thread Context
- **Context Switching:**
  - When the processor switches to another thread, the current thread's context is saved.
  - The context includes the state of the processor (registers).
  - Stack space is used to save the current state of the thread.
  - Example function: `BOOL GetThreadContext(HANDLE hThread, LPCONTEXT lpContext);`

### Structures for Process Management
- **EPROCESS**: Basic kernel-mode structure representing a process.
  - Contains a linked list of all threads.
  - Pointer to the **PEB (Process Environment Block)**, available from user mode.
- **ETHREAD**: Basic kernel-mode structure representing a thread.
  - Pointer to **KTHREAD**.
  - Links to the **TEB (Thread Environment Block)**, available from user mode.

### Obtaining PEB and TEB
- **PEB and TEB** are mapped inside the process space, usually towards the end of the addresses.
- **PEB**: Accessible via the `Peb` field in the `TEB`.
- **TEB**: Accessible via the `FS` (32-bit) or `GS` (64-bit) segment registers.

## Exercise
- Use WinDbg to walk through the **PEB** and **TEB** of a process.
- Familiarize yourself with the fields in these structures.

This module provides a comprehensive overview of the process and thread management in Windows, setting the foundation for understanding more advanced topics such as process hollowing and malware analysis.