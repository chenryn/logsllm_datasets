request technically doesn't contain the string `      system     ` . But
when the server processes the request, the parameter values will be
concatenated into a single string that forms our RCE payload:
`      "__import__('os').system('ls')"     ` .
参数将会在防火墙中通过，因为该请求在技术上不包含字符串
\"system\"。但是当服务器处理该请求时，参数值将被连接成一个单一的字符串，形成我们的
RCE 载荷: \"\_\_import\_\_(\'os\').system(\'ls\')\".
This is only a tiny subset of filter bypasses you can try; many more
exist. For example, you can hex-encode, URL-encode, double-URL-encode,
and vary the cases (uppercase or lowercase characters) of your payloads.
You can also try to insert special characters such as null bytes,
newline characters, escape characters `      (\)     ` , and other
special or non-ASCII characters into the payload. Then, observe which
payloads are blocked and which ones succeed, and craft exploits that
will bypass the filter to accomplish your desired results. If you're
interested in this topic, search online for *RCE filter bypass* or *WAF
bypass* to learn more. Additionally, the principles mentioned in this
section can be used to bypass input validation for other vulnerabilities
as well, such as SQL injection and XSS.
这仅仅是一小部分可以尝试的绕过过滤器的方法；还有很多其他的方法存在。例如，你可以进行十六进制编码、URL编码、双倍URL编码和变化大小写字符的有效载荷。你也可以尝试插入特殊字符，如空字节、换行符、转义字符(\\)和其他特殊或非ASCII字符到有效载荷中。然后观察哪些有效载荷被阻止了，哪些成功了，并设计绕过过滤器的漏洞利用程序来达到你想要的结果。如果你对这个主题感兴趣，请搜索RCE过滤器绕过或WAF绕过来了解更多。此外，本节提到的原则同样可以用于绕过输入验证的其他漏洞，如SQL注入和XSS。
这只是您可以尝试的绕过过滤器的微小子集；还有更多种方法。例如，您可以使用十六进制编码、URL编码、双倍URL编码，并更改有效载荷的大小写。您还可以尝试插入特殊字符，如空字节、换行符、转义字符（\\）和其他特殊或非ASCII字符到有效载荷中。然后观察哪些有效载荷被阻止，哪些成功，并设计绕过过滤器的漏洞利用程序来实现您想要的结果。如果您对此主题感兴趣，请在线搜索RCE过滤器绕过或WAF绕过以了解更多信息。此外，本节提到的原则也可用于绕过其他漏洞的输入验证，例如SQL注入和XSS。
## Finding Your First RCE! {#c18.xhtml#h1-501546c18-0006}
It's time to find your first RCE by using the tips and tricks you've
learned in this chapter.
是时候利用本章学习的技巧和诀窍找到你的第一个RCE了。
1.  Identify suspicious user-input locations. For code injections, take
    note of every user-input location, including URL parameters, HTTP
    headers, body parameters, and file uploads. To find potential file
    inclusion vulnerabilities, check for input locations being used to
    determine or construct filenames and for file-upload functions.
2.  Submit test payloads to the input locations in order to detect
    potential vulnerabilities.
3.  If your requests are blocked, try protection-bypass techniques and
    see if your payload succeeds.
4.  Finally, confirm the vulnerability by trying to execute harmless
    commands such as `       whoami      ` , `       ls      ` , and
    `       sleep 5      ` .
5.  Avoid reading sensitive system files or altering any files with the
    vulnerability you've found.
6.  Submit your first RCE report to the program!
:::
[]{#c19.xhtml}
::: section
# [ [ ]{#c19.xhtml#Page_295 .pagebreak title="295"} 19 ]{.ChapterNumber} [ Same-Origin Policy Vulnerabilities ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
[ Chapter 3 ]{.xref itemid="xref_target_Chapter 3"} introduced the
same-origin policy (SOP), one of the fundamental defenses deployed in
modern web applications. The SOP restricts how a script originating from
one site can interact with the resources of a different site, and it's
critical in preventing many common web vulnerabilities.
第三章介绍了同源策略（SOP），这是现代Web应用程序中部署的基本防御之一。
SOP限制来自一个站点的脚本如何与另一个站点的资源进行交互，这在防止许多常见的Web漏洞方面至关重要。
But websites often loosen the SOP in order to have more flexibility.
These controlled and intended SOP bypasses can have adverse effects, as
attackers can sometimes exploit misconfigurations in these techniques to
bypass the SOP. These exploits can cause private information leaks and
often lead to more vulnerabilities, such as authentication bypass,
account takeover, and large data breaches. In this chapter, we'll
discuss how applications relax or work around the SOP and how attackers
can exploit these features to endanger the application.
但网站经常会放宽 SOP 以获得更多的灵活性。这些受控制和有意的 SOP
绕过可能会产生负面影响，因为攻击者有时可以利用这些技术中的配置错误来绕过
SOP。这些漏洞可能会导致私人信息泄漏，通常会导致更多漏洞，例如身份验证绕过、账户接管和大规模数据泄露。在本章中，我们将讨论应用程序如何放宽或绕过
SOP，以及攻击者如何利用这些功能危害应用程序。
## [ ]{#c19.xhtml#Page_296 .pagebreak title="296"} Mechanisms {#c19.xhtml#h1-501546c19-0001}
Here's a quick review of how the SOP works. Because of the SOP, a script
from page A can access data from page B only if the pages are of the
same origin. Two URLs are said to have the *same origin* if they share
the same protocol, hostname, and port number. Modern web applications
often base their authentication on HTTP cookies, and servers take action
based on the cookies included automatically by the browser. This makes
the SOP especially important. When the SOP is implemented, malicious web
pages won't be able to take advantage of the cookies stored in your
browser to access your private information. You can read more about the
details of the SOP in [ Chapter 3 ]{.xref
itemid="xref_target_Chapter 3"} .
这里简要介绍SOP的工作原理。由于SOP的存在，仅当页面A和B属于相同的来源时，页面A的脚本才能访问页面B的数据。如果两个URL具有相同的协议，主机名和端口号，则它们被视为具有相同的来源。现代Web应用程序通常基于HTTP
Cookie进行身份验证，并且服务器根据浏览器自动包含的Cookie采取行动。这使得SOP尤为重要。当SOP实施时，恶意网页将无法利用存储在您的浏览器中的Cookie来访问您的私人信息。您可以在第3章中了解有关SOP的详细信息。
Practically, the SOP is often too restrictive for modern web
applications. For example, multiple subdomains or multiple domains of
the same organization wouldn't be able to share information if they
followed the policy. Since the SOP is inflexible, most websites find
ways to relax it. This is often where things go wrong.
实际上，同源策略对于现代网络应用程序来说经常过于严格。例如，如果按照该策略，同一组织的多个子域或多个域名将无法共享信息。由于同源策略不灵活，大多数网站都会找到放宽策略的方法，而这往往会导致问题。
For instance, imagine that you are an attacker trying to smuggle
information out of a banking site, *a.example.com* , and find a user's
account number. You know that a user's banking details are located at
*a.example.com/user_info* . Your victim is logged into the banking site
at *a.example.com* and is also visiting your site, *attacker.com* , in
the same browser.
例如，想象一下你是一个攻击者，试图从银行网站a.example.com走私信息，并找到一个用户的帐号。您知道用户的银行详细信息位于a.example.com/user_info。您的受害者已登录到a.example.com的银行网站，并在同一浏览器中访问您的网站attacker.com。
Your site issues a GET request to *a.example.com/user_info* to retrieve
the victim's personal information. Since your victim is logged into the
bank, their browser automatically includes their cookies in every
request it sends to *a.example.com* , even if the request is generated
by a script on your malicious site. Unfortunately, because of the SOP,
the victim's browser won't allow your site to read data returned from
*a.example.com* .
您的网站向a.example.com/user_info发送GET请求以检索受害者的个人信息。由于受害者已登录银行，他们的浏览器会自动将cookies包含在发送到a.example.com的每个请求中，即使请求是由您的恶意网站上的脚本生成的。不幸的是，由于SOP的原因，受害者的浏览器不允许您的网站读取从a.example.com返回的数据。
But now, say you realize that *a.example.com* passes information to
*b.example.com* via SOP bypass techniques. If you can find out the
technique used and exploit it, you might be able to steal the victim's
private information on the banking site.
但是现在，假设你意识到a.example.com通过SOP绕过技术向b.example.com传递信息。如果你能找出所使用的技术并利用它，你就有机会在银行网站上窃取受害者的私人信息。
The simplest way for websites to work around the SOP is to change the
origin of a page via JavaScript. Setting the origin of two pages to the
same domain using `      document.domain     ` in the pages' JavaScript
will enable the pages to share resources. For example, you can set the
domain of both *a.example.com* and *b.example.com* to *example.com* so
that they can interact:
网站绕过SOP的最简单方法是通过JavaScript更改页面的来源。在页面的JavaScript中使用document.domain将两个页面的来源设置为相同的域，将使页面共享资源。例如，您可以将a.example.com和b.example.com的域设置为example.com，以便它们可以交互。
    document.domain = "example.com"
However, this approach has its limitations. First, you can only set the
*document.domain* of a page to a superdomain; for example, you can set
the origin of *a.example.com* to *example.com* , but not to
*example2.com* . Therefore, this method will work only if you want to
share resources with superdomains or sibling subdomains.
然而，这种方法也有它的局限性。首先，你只能将页面的 document.domain
设为一个上级域名；例如，你可以将 a.example.com 的来源设为
example.com，但不能设为
example2.com。因此，这种方法只能在你想与上级域或同级子域名共享资源时才能使用。
### [ ]{#c19.xhtml#Page_297 .pagebreak title="297"} Exploiting Cross-Origin Resource Sharing {#c19.xhtml#h2-501546c19-0001}
Because of these limitations, most sites use Cross-Origin Resource
Sharing (CORS) to relax the SOP instead. CORS is a mechanism that
protects the data of the server. It allows servers to explicitly specify
a list of origins that are allowed to access its resources via the HTTP
response header `      Access-Control-Allow-Origin     ` .
由于这些限制，大多数网站使用跨域资源共享（CORS）来放宽SOP。CORS是一种保护服务器数据的机制。它允许服务器通过HTTP响应头Access-Control-Allow-Origin显式地指定一组允许访问其资源的原点列表。
For example, let's say we're trying to send the following JSON blob
located at *a.example.com/user_info* to *b.example.com* :
例如，假设我们正在尝试将位于a.example.com/user_info的以下JSON数据块发送到b.example.com：
    {"username": "vickieli", "account_number": "12345"}
Under the SOP, *b.example.com* won't be able to access the JSON file,
because *a.example.com* and *b.example.com* are of different origins.
But using CORS, the user's browser will send an `      Origin     `
header on behalf of *b.example.com* :
根据SOP，b.example.com将无法访问JSON文件，因为a.example.com和b.example.com属于不同的来源。但是使用CORS，用户的浏览器将代表b.example.com发送Origin标头：
    Origin: https://b.example.com
If *b.example.com* is part of an allowlist of URLs with permission to
access resources on *a.example.com* , *a.example.com* will send the
browser the requested resource along with an
`      Access-Control-Allow-Origin     ` header. This header will
indicate to the browser that a specific origin is allowed to access the
resource:
如果b.example.com是URL允许列表中的一部分，具有访问a.example.com资源的权限，a.example.com将向浏览器发送请求的资源以及Access-Control-Allow-Origin头。该头将指示浏览器允许特定来源访问资源。
    Access-Control-Allow-Origin: b.example.com
The application can also return the
`      Access-Control-Allow-Origin     ` header with a wildcard
character ( `      *     ` ) to indicate that the resource on that page
can be accessed by any domain:
该应用程序还可以返回Access-Control-Allow-Origin头带有通配符字符(\*)，以表示该页面上的资源可被任何域名访问。
    Access-Control-Allow-Origin: *
On the other hand, if the origin of the requesting page isn't allowed to
access the resource, the user's browser will block the requesting page
from reading the data.
另一方面，如果请求页面的来源未被允许访问该资源，用户的浏览器将阻止请求页面读取数据。
CORS is a great way to implement cross-origin communication. However,
CORS is safe only when the list of allowed origins is properly defined.
If CORS is misconfigured, attackers can exploit the misconfiguration and
access the protected resources.
CORS是一种很好的实现跨域通信的方式。然而，只有在正确定义允许访问的来源列表时，CORS才是安全的。如果CORS配置不正确，攻击者可以利用这种错误配置来访问被保护的资源。
The most basic misconfiguration of CORS involves allowing the
`      null     ` origin. If the server sets
`      Access-Control-Allow-Origin     ` to `      null     ` , the
browser will allow any site with a `      null     ` origin header to
access the resource. This isn't safe because any origin can create a
request with a `      null     ` origin. For instance, cross-site
requests generated from a document using the `      data:     ` URL
scheme will have a `      null     ` origin.
CORS的最基本的配置错误是允许null
origin。如果服务器将Access-Control-Allow-Origin设置为null，浏览器将允许任何带有null
origin头的站点访问资源。这不安全，因为任何来源都可以创建具有null
origin的请求。例如，使用data: URL方案创建的文档生成的跨站请求将具有null
origin。
Another misconfiguration is to set the
`      Access-Control-Allow-Origin     ` header to the origin of the
requesting page without validating the requestor's origin. If the server
doesn't validate the origin and returns an
`      Access-Control-Allow-Origin     ` for any origin, the header will
completely bypass the SOP, removing all limitations on cross-origin
communication.
另一个配置问题是在未验证请求者的来源情况下将Access-Control-Allow-Origin头设置为请求页面的来源。如果服务器不验证来源并为任何来源返回Access-Control-Allow-Origin，则此头将完全绕过SOP，在跨域通信方面删除所有限制。
[ ]{#c19.xhtml#Page_298 .pagebreak title="298"} In summary, if the
server sets the `      Access-Control-Allow-Origin     ` header to
`      null     ` or to arbitrary origins of the requesting page, it
allows attackers to smuggle information offsite:
总之，如果服务器将Access-Control-Allow-Origin头设置为null或请求页面的任意来源，它允许攻击者将信息从站点外走私。
    Access-Control-Allow-Origin: null
    Access-Control-Allow-Origin: https://attacker.com
Another exploitable misconfiguration occurs when a site uses weak
regexes to validate origins. For example, if the policy checks only if
an origin URL starts with *www.example.com* , the policy can be bypassed
using an origin like *www.example.com.attacker.com* .
另一个可利用的配置错误是当网站使用弱的正则表达式来验证来源时发生。例如，如果策略仅检查起始源URL是否以www.example.com开头，则可以使用类似www.example.com.attacker.com的来源绕过该策略。
    Access-Control-Allow-Origin: https://www.example.com.attacker.com
An interesting configuration that isn't exploitable is setting the
allowed origins to the wildcard ( `      *     ` ). This isn't
exploitable because CORS doesn't allow credentials, including cookies,
authentication headers, or client-side certificates, to be sent with
requests to these pages. Since credentials cannot be sent in requests to
these pages, no private information can be accessed: