4500(cid:13)
4000(cid:13)
3500(cid:13)
3000(cid:13)
2500(cid:13)
2000(cid:13)
1500(cid:13)
1000(cid:13)
500(cid:13)
0(cid:13)
1(cid:13)
2(cid:13)
3(cid:13)
4(cid:13)
5(cid:13)
i = Number of Matches found(cid:13)
Figure 13: Size of pruned sets for ACLs with (a)  500 rules (on the right). The x-axis shows the number of matches
completed during a multi-match classiﬁcation. The y-axis is the size of the largest pruned set after the i-th match has been found.
Metric
Multi-threading
support
Worst-case TCAM
entries for N rules
Update cost
Cycles for
k multi-matches
Extra bits
Overhead on
the packet
processor
Entry
Invalidation
Geometric
Intersection-based
Yes
O(NF)
O(NF)
1
0
None
No
N
O(N)
7k
0
Small state machine
logic; can be
implemented using a 
few hundred gates
or a few microcode
instructions
MUD
Yes
N
O(N)
1 + d + (d-1)(k-2)
with DIRPE: 1 + d(k-1)
r
without DIRPE: d
with DIRPE:
log2(d/r) + (d-r) + (2r-1)
Small state machine
logic; can be
implemented using a 
few hundred gates
or a few microcode
instructions
Table 9: Comparison of key metrics for multi-match schemes. k is the
number of matching rules to be found, N is the number of rules in the
database and F is the number of ﬁelds in a rule. d = log2(number of
unique discriminator values). r is the chunk width (cid:21) 2
dates per second can be easily achieved. In contrast, the geometric
intersection-based scheme can require several minutes of recompu-
tation each time a new rule is added.
MUD supports high density, fast updates and multi-threading at
the cost of extra searches through the TCAM. We now present a
simple worst-case analysis for the number of TCAM searches for
(cid:2)nding k matches. After the (cid:2)rst match i is found, the subsequent
searches correspond to the discriminator pre(cid:2)xes needed to repre-
sent > i, which is at most d pre(cid:2)xes. After the second match, note
that the worst-case number of pre(cid:2)xes is at most d (cid:0) 1. Hence,
for (cid:2)nding k matching rules, when d (cid:21) (k (cid:0) 1), the worst-case
number of total searches is 1 + d + (k (cid:0) 2)(d (cid:0) 1). When us-
ing DIRPE with d0 = 1 + (d=r)(k (cid:0) 1), the search throughput
is further increased. The cost of additional searches does not affect
the multi-match performance adversely: as shown in Table 8, MUD
can support multi-match classi(cid:2)cation at multi-gigabit link speeds.
4.4.1 Practical Considerations in Using MUD
Both DIRPE and MUD use extra unused bits from the TCAM ar-
ray. Hence, when DIRPE and MUD are used simultaneously (e.g.,
when multi-match is performed using a database containing range
rules), the available extra bits must be shared between the schemes
based on the desired performance and density. Recall that typical
TCAMs today have about 36 extra bits when used with IP ACLs.
If MUD uses 12 bits (the large real-life dataset we used required
11 bits for MUD), DIRPE would have 24 bits. A possible way of
splitting the bits is to assign 16 DIRPE bits to the (cid:2)rst range (cid:2)eld
and 8 bits to the second range (cid:2)eld; using such a split, we get an
expansion of 1:31(cid:151)which is comparable to the expansion obtained
when all the bits were used for DIRPE.
4.5 Future Directions
While the deterministic search throughput of TCAMs makes it
attractive compared to RAM, the cost factor makes it dif(cid:2)cult to
scale TCAMs to millions of rules. We plan to investigate how one
can use a combination of TCAM and RAM to scale both single
and multi-match classi(cid:2)cation to millions of rules with high search
performance in real-life databases. Here, we present the basic idea
we plan to pursue, and present preliminary results that show that
the idea holds promise.
Several schemes for single match classi(cid:2)cation that divide the
rules into buckets have been proposed [14, 21, 24]. If we partition
the rules into buckets of size T using one such scheme, then we can
store one TCAM entry corresponding to each bucket and store all
the rules of a single bucket in RAM. During a search, the TCAM
is (cid:2)rst searched and then the buckets corresponding to all matching
TCAM entries are searched. The number of rules that need to be ac-
cessed from RAM is then M (cid:2) T , where M is the multi-match de-
gree of the TCAM. Since we found that even large router databases
have small multi-match degree (see Figure 13), we expect this tech-
nique to work well in real databases. A similar observation on the
two pre(cid:2)x (cid:2)elds in the rules is made in [1] and a corresponding
extended grid-of-tries with path compression is described.
We implemented a simple variation of this heuristic in which
we recursively walk down the rule tree, splitting the rules based
on whether the bit in the rule is 0, 1, or x. Figure 14 shows the
variation of the number of TCAM entries and the number of RAM
entries that need to be accessed per classi(cid:2)cation, as a function of
the bucket size, T . The desired search rate dictates the number of
RAM accesses allowed per search. From the (cid:2)gure, we see that the
number of TCAM entries needed reduces as the number of RAM
accesses increases. Hence, depending on system requirements(cid:151)
available RAM bandwidth, desired search throughput and cost(cid:151)
we can choose the point in the tradeoff curve by using the appro-
priate value of the bucket size.
s
e
i
r
t
n
E
M
A
C
T
f
o
r
e
b
m
u
N
90000
80000
70000
60000
50000
40000
30000
20000
10000
0
Number of TCAM Entries vs T
Max. Number of RAM Entries accessed per multi-match vs T
300
250
200
150
100
50
0
s
e
i
r
t
n
E
M
A
R
f
o
r
e
b
m
u
N
m
u
m
x
a
M
i
n
o
i
t
a
c
i
f
i
s
s
a
l
c
h
c
t
a
m
-
i
t
l
u
m
r
e
p
d
e
s
s
e
c
c
a
1
2
8
4
16
Bucket size, T
32
64
Figure 14: Variation of number of TCAM entries to be stored and
maximum number of RAM entries to be accessed per classiﬁcation, as
a function of bucket size, T. The total number of RAM entries to be
stored is the total number of rules in the database (after converting
ranges to preﬁxes). A representative subset of the database was used.
5. CONCLUSIONS
Ternary CAMs have been widely used in the industry for packet
classi(cid:2)cation for databases with up to hundreds of thousands of
rules. In this paper, we presented algorithms that further the state-
of-the-art for solving two important problems that arise while using
TCAMs. Our (cid:2)rst algorithm, Database Independent Range PreEn-
coding (DIRPE), addresses the problem of ef(cid:2)cient representation
of range rules in TCAMs. DIRPE reduces the worst-case expansion
of range rules, scales to a large number of ranges, and has good in-
cremental update properties.
Our second algorithm, Multi-match Using Discriminators
(MUD), addresses the issue of (cid:2)nding multiple matches for a search
key. The key bene(cid:2)t of MUD is that it does not store per-search
state and hence is suited for multi-threaded environments. MUD
does not increase the number of TCAM entries and hence scales to
large databases. The bene(cid:2)ts of MUD are obtained at the expense
of additional searches; but we show that MUD can still support
multi-match classi(cid:2)cation at multi-gigabit link speeds.
Our schemes do not require any change to TCAMs. Both the al-
gorithms rely on extra bits in the TCAM entry; they can be used
in conjunction by using disjoint sets of extra bits in the TCAM en-
try. We evaluated the algorithms using a large real-life router ACL
database, using a randomly generated database, as well as using
worst-case analysis.
We believe that the following future directions are interesting.
The (cid:2)rst direction deals with (cid:2)nding the optimal encoding of ranges
when a certain number of ternary bits are available. The second di-
rection is to investigate how TCAMs and RAMs can be combined
to achieve deterministic search throughput at low costs while scal-
ing to real-life databases with millions of rules; the preliminary re-
sults based on the simple heuristic we considered are encouraging.
6. REFERENCES
[1] F. Baboescu, S. Singh, and G. Varghese. Packet
Classi(cid:2)cation for Core Routers: Is there an Alternative to
CAMs? In Proc. of IEEE INFOCOM, 2003.
[2] J. Beale. Snort 2.1 Intrusion Detection, Second Edn.
Syngress, 2004.
[3] J. Bolaria and L. Gwennap. A Guide to Search Engines and
Networking Memory. http://www.linleygroup.
com/Reports/memory_guide.html, April 2004.
[4] Computer Associates. eTrust Intrusion Detection System.
http://www3.ca.com.
[5] Cypress Semiconductor Corp. Content addressable memory.
http://www.cypress.com/.
[6] Dell’oro. Layer3 Switch Router Market. July 2004.
[7] W. Eatherton. Full Tree Bit Map: Hardware/Software IP
Lookup Algorithms with Incremental Updates. EE Masters
Thesis, Washington University, April 1999.
[8] P. Gupta and N. McKeown. Packet Classi(cid:2)cation on Multiple
Fields. In Proc. of ACM SIGCOMM, 1999.
[9] Integrated Device Technology, Inc. Content addressable
memory. http://www.idt.com/.
[10] Intel Corp. Intel IXP2800 Network Processor.
http://www.intel.com/design/network/
products/npfamily/ixp2800.htm.
[11] H. Liu. Ef(cid:2)cient Mapping of Range Classi(cid:2)er into
Ternary-CAM. In Proc. of Hot Interconnects, 2002.
[12] Netlogic Microsystems. Content addressable memory.
http://www.netlogicmicro.com/.
[13] S. Nilsson and G. Karlsson. Fast Address Look-Up for
Internet Routers. Proceedings of IEEE Broadband
Communications’98, Stuttgart, Germany, April 1998.
[14] L. Qiu, G. Varghese, and S. Suri. Fast Firewall
Implementations for Software and Hardware-based Routers.
In Proc. of ICNP, 2001.
[15] S. Singh, F. Baboescu, G. Varghese, and J. Wang. Packet
Classi(cid:2)cation using Multidimensional Cutting. In Proc. of
ACM SIGCOMM, 2003.
[16] E. Spitznagel, D. Taylor, and J. Turner. Packet Classi(cid:2)cation
Using Extended TCAMs. In Proc. of ICNP, 2003.
[17] V. Srinivasan and G. Varghese. Faster IP Lookups using
Controlled Pre(cid:2)x Expansion. ACM TOCS, February 1999.
[18] V. Srinivasan, G. Varghese, S. Suri, and M. Waldvogel. Fast
and Scalable Layer Four Switching. In Proc. of ACM
SIGCOMM, 1998.
[19] D. E. Taylor. Survey and Taxonomy of Packet Classi(cid:2)cation
Techniques. Technical Report WUCSE-2004-24,
Washington Univ., St. Louis, May 2004.
[20] D. E. Taylor and J. Turner. Scalable Packet Classi(cid:2)cation
using Distributed Crossproducting of Field Labels. Technical
Report WUCSE-2004-38, Washington Univ., St. Louis,
2004.
[21] P. Tsuchiya. A Search Algorithm for Table Entries with
Non-contiguous Wildcarding. Unpublished document, 1992.
[22] J. van Lunteren and T. Engbersen. Fast and Scalable Packet
Classi(cid:2)cation. IEEE JSAC, 21:560(cid:150)571, May 2003.
[23] G. Varghese. Network Algorithmics: An Interdisciplinary
Approach to Designing Fast Networked Devices. Morgan
Kaufmann Publishers, Inc., 2004.
[24] T. Y. C. Woo. A Modular Approach to Packet Classi(cid:2)cation:
Algorithms and Results. In Proc. of IEEE INFOCOM, 2000.
[25] F. Yu and R. H. Katz. Ef(cid:2)cient Multi-Match Packet
Classi(cid:2)cation with TCAM. In Proc. of HotI, 2004.