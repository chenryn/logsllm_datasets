    }
    function login($info){
        $iv = get_random_iv();
        $plain = serialize($info);
        $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);//$plain为要加密的明文，METHOD加密方法，SECRET_KEY是秘钥，OPENSSL_RAW_DATA为数据格式，$iv随机生成的初始化向量。
        setcookie("iv", base64_encode($iv));
        setcookie("cipher", base64_encode($cipher));
    }
    function show_homepage()
    {
        global $link;
        if(isset($_COOKIE['cipher']) && isset($_COOKIE['iv']))
        {
            $cipher = base64_decode($_COOKIE['cipher']);
            $iv = base64_decode($_COOKIE["iv"]);
            if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))
            {
                $info = unserialize($plain) or die("base64_decode('".base64_encode($plain)."') can't unserialize");
                $sql="select * from users limit ".$info['id'].",0";
                $result=mysqli_query($link,$sql);
                if(mysqli_num_rows($result)>0  or die(mysqli_error($link))){
                    $rows=mysqli_fetch_array($result);
                    echo 'Hello!'.$rows['username'].'';
                }
                else{
                    echo 'Hello!';
                }
            }
            else
            {
                die("ERROR!");
            }
        }
    }
    if(isset($_POST['id'])){
        $id = (string)$_POST['id'];
        if(sqliCheck($id))
            die("sql inject detected!");
        $info = array('id'=>$id);
        login($info);
        echo 'Hello!';
    }else{
        if(isset($_COOKIE["iv"])&&isset($_COOKIE['cipher'])){
            show_homepage();
        }else{
            echo '
                            Login Form
                            input id to login
                ';
        }
    }
    ?>
前提：这一关不是单纯注入饶过的，肯定要利用cbc字节反转攻击。
1.首先直接看在哪里可以得到flag，没传入ID参数的时候，如果cookie建立了iv 和
cipher参数，那么就可以调用show_homepage，执行sql查询，flag在数据库里查询。
2.但是肯定要传参id，先生成iv 和
cipher，将id=X该数组进行序列化之后，以序列化结果和一个bs64编码随机数iv进行cbc加密生成密文cipher,加密算法为aes-128-cbc，此时就要考虑cbc字节反转了，128位，按十六字节分组。生成iv和cipher之后url编码返回请求头，生成细节参考自定义login函数。
3.sql查询语句拼接了一个0，所以我们只要注释掉0便可进行我们的查询。所以可以利用cbc字节翻转攻击更改密文，更改解密后的id，从而绕过进行sqlwaf，cookie传入参数
cipher和iv,base64解码然后aes解密，php反序列化，如果不能反序列化，则输出base64编码，否则就sql语句拼接查询。如果有结果回显，否则输出hello。
综上，只要我们能够CBC进行字节反转就可以执行sql查询，就可以进行查询flag。
接下来第一步首先要cbc字节反转，修改密文中的id。不妨先测试下位数，如果传入id=12（因为我们要修改为1#），则序列化后内容为
    a:1:{s:2:"id";s:2:"12";}
由于我们需要分组，aes-128-cbc，128位16字节分组
    第一组： a:1:{s:2:"id";s:
    第二组： 2:"12";}
10中的0是第二组的第五个字符，所以需要更改第5个字符，右偏移四个字符，第一组也要向右偏移四个字符。接下来就是cbc字节反转脚本。
    # -*- coding:utf8 -*-    from base64 import *
    import urllib
    cipher='fn060OBP%2FyLIGYrD9bi%2FlWWAS9RIWvEtALaV26kuB%2F8%3D'#加密后的密文
    cipher_raw=b64decode(urllib.unquote(cipher))#首先urldecode解码，然后base64解码
    cipher_raw_list=list(cipher_raw)#将解码的密文分组
    py=4#偏移量为4
    A=cipher_raw_list[py]#要异或第二组密文的位置
    C='2'#第二组被替换的明文
    X='#'#将第二组替换掉的明文
    cipher_raw_list[py]=chr(ord(A)^ord(C)^ord(X))#将偏移量为4的替换。
    cipher_new=''.join(cipher_raw_list)#使用''将每一个字符连接起来，
    cipher_new=urllib.quote(b64encode(cipher_new))#将替换完的密文base64编码，urlencode编码。
    print cipher_new#打印出最终密文
其中特意将ACX等变量对应上文所讲的参数。可参考上面cbc字节反转配合图来理解。然后生成反转后的密文：
    fn060PFP/yLIGYrD9bi/lWWAS9RIWvEtALaV26kuB/8%3D
此时提交密文发送服务器会返回base64编码字符串无法反序列化。
原因为下面这句。
接下来我们需要修改IV，原理很简单，我们分为两组来进行加解密，第一组密文只参与第二组的异或，第一组修改完成后，第二组的解密是完全没有问题的，但是第一组被我们修改了一个字符，但是异或的IV还是原来的IV，必须要修改IV才能使第一组正常异或，得到结果。还是上述原理，三次异或，控制想要的结果。
这里在看图，
A：这里特别要说明注意，A是我们第一次字节反转之后的明文（序列化状态）  
B：原来的IV  
C：字节反转后解密后的第一组（未被异或）  
D: 正常的序列化字符串 ‘a:1:{s:2:”id”;s:’  
E：新的IV
A=B^C,因为我们A是字节反转这里我们可以看到，IV是原来的IV，但是A和C都是字节反转后的，所以A必然是个无法反序列化的明文，我们修改B也就是IV，使得异或得到正常的序列化字符串。
B=A^C,我们需要得到的结果是D=E^C，而C=B^A，所以D=E^B^A,那么E=B^A^D。 //建议初学者自己多分析下逻辑，多写写，干想很头疼。
接下来是IV修改的脚本。
    # -*- coding:utf8 -*-    __author__='PI:EMAIL'
    from base64 import *
    import urllib
    iv='erUDGVSvM4Kab3ztg8vT8Q%3D%3D'
    B=b64decode(urllib.unquote(iv))
    D='a:1:{s:2:"id";s:'
    A=b64decode('eFoXA0j/x2Em/bhfgeLzXjI6IjEjIjt9')
    iv_new=''
    for i in range(16):
        iv_new+=chr(ord(A[i])^ord(D[i])^ord(B[i]))
    iv_new=urllib.quote(b64encode(iv_new))
    print iv_new
替换掉原来的IV，即可正常sql查询。
至此，此题的cbc反转我们已经完成了，剩下的注入原理一样，注入不是本题的目的，也就不再发剩下的脚本了。CBC还是要自己写一下用图理解一下。
其余加密问题，后续我会补充到本文。
参考：  
参考：实验吧pcat师傅的writeup