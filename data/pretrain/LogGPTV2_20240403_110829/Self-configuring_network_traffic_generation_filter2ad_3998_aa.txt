title:Self-configuring network traffic generation
author:Joel Sommers and
Paul Barford
Self-Conﬁguring Network Trafﬁc Generation
Joel Sommers
University of Wisconsin–Madison
PI:EMAIL
Paul Barford
University of Wisconsin–Madison
PI:EMAIL
ABSTRACT
The ability to generate repeatable, realistic network traﬃc is
critical in both simulation and testbed environments. Traf-
ﬁc generation capabilities to date have been limited to either
simple sequenced packet streams typically aimed at through-
put testing, or to application-speciﬁc tools focused on, for
example, recreating representative HTTP requests. In this
paper we describe Harpoon, a new application-independent
tool for generating representative packet traﬃc at the IP
ﬂow level. Harpoon generates TCP and UDP packet ﬂows
that have the same byte, packet, temporal and spatial char-
acteristics as measured at routers in live environments. Har-
poon is distinguished from other tools that generate statis-
tically representative traﬃc in that it can self-conﬁgure by
automatically extracting parameters from standard Netﬂow
logs or packet traces. We provide details on Harpoon’s ar-
chitecture and implementation, and validate its capabilities
in controlled laboratory experiments using conﬁgurations
derived from ﬂow and packet traces gathered in live envi-
ronments. We then demonstrate Harpoon’s capabilities in
a router benchmarking experiment that compares Harpoon
with commonly used throughput test methods. Our results
show that the router subsystem load generated by Harpoon
is signiﬁcantly diﬀerent, suggesting that this kind of test can
provide important insights into how routers might behave
under actual operating conditions.
Categories and Subject Descriptors: C.2.6 [Computer-
Communication Networks]: Internetworking—Routers; C.4
[Performance of Systems]: Measurement techniques, Model-
ing techniques, Performance attributes
General Terms: Measurement, Performance
Keywords: Traﬃc Generation, Network Flows
1.
INTRODUCTION
The network research community has a persistent need to
evaluate new algorithms, systems and protocols using tools
that (1) create a range of test conditions similar to those
experienced in live deployment and (2) ensure reproducible
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’04, October 25–27, 2004, Taormina, Sicily, Italy.
Copyright 2004 ACM 1-58113-821-0/04/0010 ...$5.00.
results [14, 30]. Having appropriate tools for generating scal-
able, tunable and representative network traﬃc is therefore
of fundamental importance. Such tools are critical in labo-
ratory test environments (such as [10, 11]) where they can
be used to evaluate behavior and performance of new sys-
tems and real networking hardware. They are also critical
in emulation environments (such as [48, 49]) and simulation
environments (such as [9, 12]) where representative back-
ground traﬃc is needed. Without the capability to consis-
tently create realistic network test conditions, new systems
run the risk of unpredictable behavior and unacceptable per-
formance when deployed in live environments.
Current best practices for traﬃc generation have focused
on either simple packet streams or recreation of a single
application-speciﬁc behavior. Packet streaming methods such
as those used in tools like iperf [6] consist of sequences of
packets separated by a constant interval. These methods
form the basis for standard router performance tests such as
those recommended in RFC 2544 [21] and RFC 2889 [40].
Another example is an inﬁnite FTP source which is com-
monly used for traﬃc generation in simulations. While these
approaches provide some insight into network system capa-
bilities, they lack nearly all of the richness and diversity of
packet streams observed in the live Internet [32, 34, 44].
A number of successful application-speciﬁc workload gen-
erators have been developed including [13, 18, 37]. These
tools typically focus on generating application-level request
sequences that result in network traﬃc that has the same
statistical properties as live traﬃc from the modeled applica-
tion. While they are useful for evaluating the behavior and
performance of host systems (such as servers and caches),
these tools can be cumbersome for use in router or switch
tests and obviously only recreate one kind of application
traﬃc, not the diversity of traﬃc observed in the Internet.
These observations motivate the need for a tool capable of
generating a range of network traﬃc such as might be ob-
served either at the edges or core of the Internet.
The contribution of this paper is the description and eval-
uation of a new network traﬃc generator capable of recre-
ating IP traﬃc ﬂows (where ﬂow is deﬁned as a series of
packets between a given IP/port pair using a speciﬁc trans-
port protocol - see Section 3 for more detail) representative
of those observed at routers in the Internet. We are aware of
no other tools that target representative traﬃc generation
at the IP ﬂow level. Our approach is to abstract ﬂow-level
traﬃc generation into a series of application-independent
ﬁle transfers that use either TCP or UDP for transport.
Our model also includes both temporal (diurnal eﬀects as-
sociated with traﬃc volume) and spatial (vis-`a-vis IP ad-
dress space coverage) components. The resulting construc-
tive model can be manually parameterized or can be self-
parameterized using Netﬂow [2] or packet trace data and
components of the traﬃc generation tool itself. The self-
parameterizing capability simpliﬁes use and further distin-
guishes our system from other tools that attempt to generate
statistically representative traﬃc.
We realized this model in a tool we call Harpoon that
can be used in a router testbed environment or emulation
testbed environment to generate scalable, representative net-
work traﬃc. Harpoon has two components: client threads
that make ﬁle transfer requests and server threads that trans-
fer the requested ﬁles using either TCP or UDP. The result
is byte/packet/ﬂow traﬃc at the ﬁrst hop router (from the
perspective of the server) that is qualitatively the same as
the traﬃc used to produce input parameters.
We evaluated Harpoon’s capabilities in two ways. First,
we conducted experiments in a controlled laboratory en-
vironment using two diﬀerent data sets to show that we
can qualitatively recreate the same traﬃc using Harpoon.
We used a one week data set of Netﬂow records collected
at a border router of the University of Wisconsin-Madison
and a series of packet traces (from which we constructed
ﬂow records using a standard tool) collected at the border
of the University of Auckland. These experiments demon-
strate Harpoon’s capability to generate representative ﬂow
level traﬃc. Next, we used the same laboratory environ-
ment to conduct a throughput evaluation of a Cisco 6509
switch/router following the testing protocol described in RFC
2889. We show that while throughputs achieved using stan-
dard packet streaming methods compared with Harpoon are
similar, the loads placed on router subsystems are substan-
tially diﬀerent. The implication of this result is that a tool
like Harpoon can augment standard test suites to give both
router designers and network operators insight into system
behavior under actual operating conditions.
This paper is organized as follows. After discussing re-
lated work in §2, we describe the design requirements and
architecture of our ﬂow-level workload model in §3. We
present the details of Harpoon’s implementation in §4 and
the results of the validation tests in §5. The results from
our throughput evaluation with Harpoon are given in §6.
We conclude and outline future work in §7.
2. RELATED WORK
There is a large literature on the general topics of In-
ternet traﬃc characterization and modeling. Some of the
most successful models of traﬃc focus on the correlation
structure (self-similarity) that appears over large time scales
in both local area [38] and wide area traﬃc [44]. Crov-
ella and Bestavros extend this work by showing evidence
that self-similarity in Web traﬃc arises from multiplexing
ON/OFF sources (as proposed in [50]) with heavy-tailed
ﬁle sizes transferred [26]. This observation forms the basis
of our constructive model for generation of IP ﬂows.
Several ﬂow-level network traﬃc models have been pro-
posed including [17, 22, 35]. These models have been used
to study fairness, response times, queue lengths and loss
probabilities under diﬀerent assumptions and using a vari-
ety of mathematical techniques. Our work diﬀers from these
in that we focus on building a ﬂow-level model based on com-
bining empirical distributions of characteristics that can be
measured at a router in a live network. Our model can be
realized in a tool for generating representative packet traﬃc
in a live (or emulated) network environment or for creating
traﬃc in a simulation environment.
An approach similar to ours has been used in a number
of application-speciﬁc workload generators. In [18], the au-
thors describe the SURGE Web workload generator which
was built by combining distributional properties of Web
use. A similar approach was used in developing Web Poly-
graph [13] and GISMO [37] which are used to generate scal-
able, representative Web cache and streaming workloads re-
spectively. Harpoon diﬀers from these tools in that it is
application independent, uses empirical distributions, gen-
erates both UDP and TCP traﬃc and includes both spatial
and temporal characteristics. It should also be noted that
there are several commercial products that target application-
speciﬁc workload generation including [8].
A model closely related to ours was introduced by Feld-
mann et al.
in [28]. That model generalizes the SURGE
model for Web traﬃc for the purpose of general background
traﬃc generation in the ns-2 simulator. A similar model
based on connection-rate superposition was developed by
Cleveland et al. in [25]. Our model is more general in that
it has no Web-speciﬁc parameters, includes the capability to
transfer ﬁles via UDP and incorporates temporal and spa-
tial request characteristics. Uhlig presents a ﬂow level traﬃc
model in [47] that is also similar to ours. That model, how-
ever, uses three parameters (compared with the eight that
we use) and does not rely on an underlying transport proto-
col to transfer individual ﬁles. Our work is also distinct from
each of these models in that we create and evaluate a tool
(Harpoon) that can be used for traﬃc generation on real
systems and that can be automatically parameterized from
ﬂow records, thus requiring no additional modeling steps.
In contrast to workload generators based on models de-
signed to synthesize distributional characteristics are tools
that replay traﬃc based on raw packet traces. tcpreplay
and flowreplay [46], for example, take a very low-level ap-
proach by attempting to generate packets (while option-
ally rewriting IP addresses) that mirror the speciﬁc timings
recorded in a packet trace. Monkey-See Monkey-Do [23]
takes a slightly higher-level approach by extracting certain
features, such as estimated bottleneck bandwidth, delayed
ACK behavior, and receiver window from raw packet traces
in order to replay HTTP transactions in a test environment
while emulating original client protocol and network condi-
tions. The approach taken in Harpoon diﬀers signiﬁcantly
from these traﬃc generators. First, Harpoon is designed to
generate representative background traﬃc with scalability
and ﬂexibility as fundamental objectives. It is unlikely that
tools mimicking network behavior at such a low level can
scale to high-speed links. Second, Harpoon uses source-level
traﬃc descriptions that do not make assumptions about the
transport layer, rather than packet-level descriptions based
on prior network state embedded in low-level timings [31].
Generating packet traﬃc based on network-induced timings
is problematic, especially with closed-loop protocols such
as TCP, where transient, context-dependent network condi-
tions can substantially alter individual packet timings.
3. ARCHITECTURE
The design objectives of Harpoon are (1) to scalably gen-
erate application-independent network traﬃc at the IP ﬂow
level, and (2) to be easily parameterized to create traﬃc
that is statistically identical to traﬃc measured at a given
vantage point in the Internet. Figure 1 depicts a high-level
process ﬂow of these objectives. We start with the basic
deﬁnition of an IP ﬂow to create a constructive model for
network traﬃc generation which we describe below.
a wider variety of application level traﬃc (including voice,
SQL worms, etc.) whose behavior is not captured in our
three source types. Development of a model with a more
diverse set of UDP traﬃc sources is left for future work.
Figure 1: Flow records are collected at a given van-
tage point in an operational network using standard
software like flow-tools. Key aspects of the live
ﬂows are extracted during a self-conﬁguration step.
These parameters are used to generate traﬃc in a
testbed that statistically matches the temporal (di-
urnal) volume characteristics as well as the spatial
(source and destination IP address frequency) char-
acteristics of the live ﬂows.
An IP ﬂow as deﬁned in [24] is a unidirectional series of IP
packets of a given protocol traveling between a source and
a destination IP/port pair within a certain period of time.
The ﬁnal condition of this statement is ambiguous, so we
tie our deﬁnition to the tools we use to gather and analyze
network ﬂow data: flow-tools [36] and FlowScan [45]. Net-