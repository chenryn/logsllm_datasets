new techniques SDKs and apps use to obfuscate and encrypt
network transmissions. While we acknowledge their effort
to protect users’ data, the same techniques could be used to
hide deceptive practices. In such cases, we use a combination
of reverse engineering and static analysis to understand the
precise technique. We frequently found a further use of AES
encryption applied to the payload before sending it over the
network, often with hard-coded AES keys.
A few libraries followed best practices by generating ran-
dom AES session keys to encrypt the data and then encrypt
the session key with a hard-coded RSA public key, sending
both the encrypted data and encrypted session key together.
To de-cipher their network transmissions, we instrumented
the relevant Java libraries. We found two examples of third-
party SDKs “encrypting” their data by XOR-ing a keyword
over the data in a Viginère-style cipher. In one case, this was
in addition to both using standard encryption for the data and
using TLS in transmission. Other interesting approaches in-
cluded reversing the string after encoding it in base64 (which
we refer to as “46esab”), using base64 multiple times (base-
base6464), and using a permuted-alphabet version of base64
(sa4b6e). Each new discovery is added to our suite of decod-
ings and our entire dataset is then re-analyzed.
3.4 Finding Side and Covert Channels
Once we have examples of transmissions that suggest the
permission system was violated (i.e., data transmitted by an
app that had not been granted the requisite permissions to
do so), we then reverse engineer the app to determine how it
circumvented the permissions system. Finally, we use static
analysis to measure how prevalent this practice is among the
rest of our corpus.
Reverse Engineering After ﬁnding a set of apps exhibit-
ing behaviour consistent with the existence of side and covert
channels, we manually reverse engineered them. While the
reverse engineering process is time consuming and not easily
automated, it is necessary to determine how the app actually
obtained information outside of the permission system. Be-
cause many of the transmissions are caused by the same SDK
code, we only needed to reverse engineer each unique cir-
cumvention technique: not every app, but instead for a much
smaller number of unique SDKs. The destination endpoint for
the network trafﬁc typically identiﬁes the SDK responsible.
During the reverse engineering process, our ﬁrst step was
to use apktool [7] to decompile and extract the smali bytecode
for each suspicious app. This allowed us to analyse and iden-
tify where any strings containing PII were created and from
USENIX Association
28th USENIX Security Symposium    609
Table 1: The types of personal information that we search for, the permissions protecting access to them, and the purpose for
which they are generally collected. We also report the subsection in this paper where we report side and covert channels for
accessing each type of data, if found, and the number of apps exploiting each. The dynamic column depicts the number of apps
that we directly observed inappropriately accessing personal information, whereas the static column depicts the number of apps
containing code that exploits the vulnerability (though we did not observe being executed during test runs).
Data Type
Permission
Purpose/Use
Subsection
IMEI
Device MAC
Email
Phone Number
SIM ID
Router MAC
Router SSID
GPS
READ_PHONE_STATE
ACCESS_NETWORK_STATE
GET_ACCOUNTS
READ_PHONE_STATE
READ_PHONE_STATE
ACCESS_WIFI_STATE
ACCESS_WIFI_STATE
ACCESS_FINE_LOCATION
4.1
4.2
Not Found
Not Found
Not Found
4.3
Persistent ID
Persistent ID
Persistent ID
Persistent ID
Persistent ID
Location Data
Location Data Not Found
Location Data
4.4
No of Apps
No of SDKs
Dynamic
13
42
Static
159
12,408
Dynamic
2
1
Static Covert
2
1
Channel Type
Side
0
1
2
0
5
1
355
1
2
0
10
0
0
0
2
1
which data sources. For some particular apps and libraries,
our work also necessitated reverse engineering C++ code; we
used IdaPro [1] for that purpose.
The typical process was to search the code for strings cor-
responding to destinations for the network transmissions and
other aspects of the packets. This revealed where the data was
already in memory, and then static analysis of the code re-
vealed where that value ﬁrst gets populated. As intentionally-
obfuscated code is more complicated to reverse engineer, we
also added logging statements for data and stack traces as new
bytecode throughout the decompiled app, recompiled it, and
ran it dynamically to get a sense of how it worked.
Measuring Prevalence The ﬁnal step of our process was
to determine the prevalence of the particular side or covert
channel in practice. We used our reverse engineering analysis
to craft a unique ﬁngerprint that identiﬁes the presence of an
exploit in an embedded SDK, which is also robust against
false positives. For example, a ﬁngerprint is a string constant
corresponding to a ﬁxed encryption key used by one SDK, or
the speciﬁc error message produced by another SDK if the
operation fails.
We then decompiled all of the apps in our corpus and
searched for the string in the resulting ﬁles. Within smali
bytecode, we searched for the string in its entirety as a
const-string instruction. For shared objects libraries like
Unity, we use the strings command to output its printable
strings. We include the path and name of the ﬁle as matching
criteria to protect against false positives. The result is a set
of all apps that may also exploit the side or covert channel
in practice but for which our instrumentation did not ﬂag for
manual investigation, e.g., because the app had been granted
the required permission, the Monkey did not explore that par-
ticular code branch, etc.
4 Results
In this section, we present our results grouped by the type of
permission that should be held to access the data; ﬁrst we dis-
cuss covert and side channels enabling the access to persistent
user or device IDs (particularly the IMEI and the device MAC
address) and we conclude with channels used for accessing
users’ geolocation (e.g., through network infrastructure or
metadata present in multimedia content).
Our testing environment allowed us to identify ﬁve different
types of side and covert channels in use among the 88,113
different Android apps in our dataset. Table 1 summarizes our
ﬁndings and reports the number of apps and third-party SDKs
that we ﬁnd exploiting these vulnerabilities in our dynamic
analysis and those in which our static analysis reveals code
that can exploit these channels. Note that this latter category—
those that can exploit these channels—were not seen as doing
so by our instrumentation; this may be due to the Automator
Monkey not triggering the code to exploit it or because the app
had the required permission and therefore the transmission
was not deemed suspicious.
IMEI
4.1
The International Mobile Equipment Identity (IMEI) is a nu-
merical value that identiﬁes mobile phones uniquely. The
IMEI has many valid and legitimate operational uses to iden-
tify devices in a 3GPP network, including the detection and
blockage of stolen phones.
The IMEI is also useful to online services as a persistent
device identiﬁer for tracking individual phones. The IMEI is a
powerful identiﬁer as it takes extraordinary efforts to change
its value or even spoof it. In some jurisdictions, it is illegal
to change the IMEI [56]. Collection of the IMEI by third
parties facilitates tracking in cases where the owner tries to
protect their privacy by resetting other identiﬁers, such as the
advertising ID.
610    28th USENIX Security Symposium
USENIX Association
Android protects access to the phone’s IMEI with the
READ_PHONE_STATE permission. We identiﬁed two third-
party online services that use different covert channels to ac-
cess the IMEI when the app does not have the permission
required to access the IMEI.
Salmonads and External Storage Salmonads is a “third
party developers’ assistant platform in Greater China” that
offers analytics and monetization services to app develop-
ers [67]. We identiﬁed network ﬂows to salmonads.com com-
ing from ﬁve mobile apps that contained the device’s IMEI,
despite the fact that the apps did not have permission to ac-
cess it.
We studied one of these apps and conﬁrmed that
it contained the Salmonads SDK, and then studied the
workings of the SDK closer. Our analysis revealed that
the SDK exploits covert channels to read this informa-
tion from the following hidden ﬁle on the SD card:
/sdcard/.googlex9/.xamdecoq0962. If not present, this
ﬁle is created by the Salmonads SDK. Then, whenever the
user installs another app with the Salmonads SDK embedded
and with legitimate access to the IMEI, the SDK—through
the host app—reads and stores the IMEI in this ﬁle.
The covert channel is the apps’ shared access to the SD
card. Once the ﬁle is written, all other apps with the same
SDK can simply read the ﬁle instead of obtaining access
through the Android API, which is regulated by the permis-
sion system. Beyond the IMEI, Salmonads also stores the
advertising ID—a resettable ID for advertising and analytics
purposes that allows opting out of interest-based advertising
and personalization—and the phone’s MAC address, which
is protected with the ACCESS_NETWORK_STATE permission.
We modiﬁed the ﬁle to store new random values and observed
that the SDK faithfully sent them onwards to Salmonads’ do-
mains. The collection of the advertising ID alongside other
non-resettable persistent identiﬁers and data, such as the IMEI,
undermines the privacy-preserving feature of the advertising
ID, which is that it can be reset. It also may be a violation of
Google’s Terms of Service [36],
Our instrumentation allowed us to observe ﬁve different
apps sending the IMEI without permission to Salmonads
using this technique. Static analysis of our entire app corpus
revealed that six apps contained the .xamdecoq0962 ﬁlename
hardcoded in the SDK as a string. The sixth app had been
granted the required permission to access the IMEI, which
is why we did not initially identify it, and so it may be the
app responsible for having initially written the IMEI to the
ﬁle. Three of the apps were developed by the same company,
according to Google Play metadata, while one of them has
since been removed from Google Play. The lower bound on
the number of times these apps were installed is 17.6 million,
according to Google Play metadata.
Baidu and External Storage Baidu is a large Chinese cor-
poration whose services include, among many others, an on-
line search engine, advertising, mapping services [14], and
geocoding APIs [13]. We observed network ﬂows contain-
ing the device IMEI from Disney’s Hong Kong Disneyland
park app (com.disney.hongkongdisneyland_goo) to Baidu do-
mains. This app helps tourists to navigate through the Disney-
themed park, and the app makes use of Baidu’s Maps SDK.
While Baidu Maps initially only offered maps of mainland
China, Hong Kong, Macau and Taiwan, as of 2019, it now
provides global services.
Baidu’s SDK uses the same technique as Salmonads to
circumvent Android’s permission system and access the
IMEI without permission. That is, it uses a shared ﬁle
on the SD card so one Baidu-containing app with the
right permission can store it for other Baidu-containing
apps that do not have that permission. Speciﬁcally, Baidu
uses the following ﬁle to store and share this data:
/sdcard/backups/.SystemConfig/.cuid2. The ﬁle is a
base64-encoded string that, when decoded, is an AES-
encrypted JSON object that contains the IMEI as well as
the MD5 hash of the concatenation of “com.baidu” and the
phone’s Android ID.
same
for
the
static value
Baidu uses AES in CBC mode with a
static
initializa-
key and the
tion vector (IV). These values are, in hexadecimal,
33303231323130326469637564696162. The reason why
this value is not superﬁcially representative of a ran-
dom hexadecimal string is because Baidu’s key is com-
puted from the binary representation of the ASCII string
30212102dicudiab—observe that when reversed, it reads
as baidu cid 2012 12 03. As with Salmonads, we con-
ﬁrmed that we can change the (encrypted) contents of this
ﬁle and the resulting identiﬁers were faithfully sent onwards
to Baidu’s servers.
We observed eight apps sending the IMEI of the device to
Baidu without holding the requisite permissions, but found
153 different apps in our repository that have hardcoded the
constant string corresponding to the encryption key. This in-
cludes two from Disney: one app each for their Hong Kong
and Shanghai (com.disney.shanghaidisneyland_goo) theme
parks. Out of that 153, the two most popular apps were
Samsung’s Health (com.sec.android.app.shealth) and Sam-
sung’s Browser (com.sec.android.app.sbrowser) apps, both
with more than 500 million installations. There is a lower
bound of 2.6 billion installations for the apps identiﬁed as
containing Baidu’s SDK. Of these 153 apps, all but 20 have
the READ_PHONE_STATE permission. This means that they
have legitimate access to the IMEI and can be the apps that
actually create the ﬁle that stores this data. The 20 that do
not have the permission can only get the IMEI through this
covert channel. These 20 apps have a total lower bound of
700 million installations.
USENIX Association
28th USENIX Security Symposium    611
4.2 Network MAC Addresses
The Media Access Control Address (MAC address) is a 6-byte
identiﬁer that is uniquely assigned to the Network Interface
Controller (NIC) for establishing link-layer communications.
However, the MAC address is also useful to advertisers and
analytics companies as a hardware-based persistent identiﬁer,
similar to the IMEI.
Android protects access to the device’s MAC address with
the ACCESS_NETWORK_STATE permission. Despite this, we
observed apps transmitting the device’s MAC address without
having permission to access it. The apps and SDKs gain
access to this information using C++ native code to invoke a
number of unguarded UNIX system calls.
Unity and IOCTLs Unity is a cross-platform game engine
developed by Unity Technologies and heavily used by An-
droid mobile games [77]. Our trafﬁc analysis identiﬁed sev-
eral Unity-based games sending the MD5 hash of the MAC