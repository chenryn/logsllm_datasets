lic side effects. This in particular means that the function is not
allowed to modify global or shared public variables or public argu-
ments passed by reference. This can be generalized to any instruc-
tions or computation with observable action, e.g., jump statements,
which may leak information about the private condition.
Limitations and future work. Our current implementation does
not provide support for pointers in user programs besides the use
of arrays (note that the size of allocated memory for an array can
1. We support parallel execution of loop iterations, which gen-
eralizes Sharemind’s and SEPIA’s batch processing of iden-
tical operations. Because many programs require sequen-
tial execution of loop iterations, we leave it to the program-
mer to decide whether parallel or sequential execution should
take place. The distinction is made using different syntax in
the code. The conventional syntax, e.g., for (statement;
condition; statement) {statement; ...} is used for
sequential execution, and modiﬁed syntax, e.g., for (statement;
condition; statement) [statement; ...] is used to
execute all iterations of the loop in parallel.
2. For the programs in which execution of different code in par-
allel is possible and desirable (and parallel execution cannot
be speciﬁed using a loop construct), we will offer a mecha-
nism to specify the code that should be executed in parallel.
We will use similar syntax with code enclosed in [] brackets
for these purposes. For example, construction [statement1;]
[statement2;] indicates that the two statements can be ex-
ecuted concurrently.
The use of loops with concurrent execution of loop iterations dic-
tates the rule that the conditions affecting the number of loop iter-
ations (i.e., the loop terminating conditions) are not allowed to be
modiﬁed within the loop iterations. This is due to the obvious fact
that the loop iterations must be scheduled without executing their
817depend on prior computation). This limitation is also present in
all other tools and compilers including ANSI C-based [29]. As
our goal is to build as a general-purpose tool as possible, adding
support for pointers is our most immediate goal for future work.
Another future work direction consists of adding resilience to
malicious behavior. A number of existing techniques can be di-
rectly applied to our framework, e.g., asynchronous implementa-
tion in [19]. As part of future work we plan to evaluate performance
of compiled programs in malicious security model.
4.3 Processing of user programs
When our compiler receives a user-speciﬁed program, it parses
it and builds an abstract syntax tree (AST), which is consequently
used to produce a modiﬁed program that implements secure dis-
tributed computation. To create a grammar for our extension of
C, we build on existing source-to-source translators that parse C
code. In particular, we build on an open-source OpenMP compiler
OMPi [23]. We use ﬂex [3] and bison [1] for deﬁning tokens, spec-
ifying the context-free grammar, and building the AST.
Besides the AST, during parsing the compiler also builds and
maintains a symbol table of deﬁned variables and functions to-
gether with their types. Once the input program is parsed, the com-
piler performs transformations on the AST if necessary and outputs
a modiﬁed program. All computation on public values is left un-
changed, while all operations that use private values will be trans-
formed into secure computation using GMP library [5] for large-
precision arithmetic.1
Program transformations. The ﬁrst transformation that the com-
piler performs on the input program is that of locating the main
function within the user’s code and renaming it into function called
old_main. The main function of the transformed program con-
tains necessary declarations for secure distributed computation and
consequently calls the user’s original main old_main.
Each private variable in the original user’s program is transformed
into one or more GMP large-precision variables of type mpz_t for
storing its share, and all operations on private variables are rewrit-
ten to execute on GMP variables using the corresponding SMC al-
gorithms. For example, declaration of a private integer variable x
will result in declaring x of type mpz_t and initializing it using
a call to mpz_init(). A private ﬂoating point variable is trans-
formed into a structure that contains four variables of type mpz_t.
Now, because each operation on private variables needs to be
modiﬁed to reﬂect operating on secret shares and call the corre-
sponding secure distributed operations, evaluation of expressions
on private variables introduces temporary variables in the modiﬁed
program. For example, expression x+y*z on private integer x, y,
and z will be transformed into statements mpz_mul(tmp,y,z);
mpz_add(tmp,x,tmp); based on the precedence order of opera-
tors in the grammar. Our compiler is optimized to use the minimal
number of temporary variables that ensure correct execution of the
original program.
Another transformation that we perform is changing arguments
of functions with private return values. Due to the implementation
speciﬁcs of the mpz_t data type, functions cannot return variables
of type mpz_t. For that reason, we change the arguments of all
user-declared functions with private return values to include an ex-
tra argument passed by the reference which corresponds to the re-
turn value of the function and the return type is set to void. This
does not restrict the way functions can be speciﬁed by the program-
mer and is transparent to the users.
1We note that the choice of a large number arithmetic library is not
detrimental to the operation of the compiler.
Variable initialization. If a private variable is initialized to a con-
stant (e.g., as in int a=5), the implementation needs to convert
the constant to its shares. To achieve this, we create instructions for
the computational parties in the transformed program to generate
random shares of 0 (using a pseudo-random sharing of zero PRZS
from [18]) and add the constant to each share. This will result in
properly distributed shares of the constant, but it means that the
value of the constant will be known to the computational parties.
We choose to treat these private initialization constants as public
because it complies with the intuition that the program’s source
code should not be treated as private. Furthermore, in many cir-
cumstances the constants to which private variables are initialized
are indeed public, which simpliﬁes their processing. For example,
if a private variable is used in a computation of summation of pri-
vate values, the fact that it is initialized to 0 does not need to be
protected. In the event that a private variable needs to be initialized
to a private constant, it should be input using a call to smcinput.
Handling of program input and output. Recall that input and
output parties are not active participants in the computation. Thus,
when a variable is speciﬁed to be read from the input using the
smcinput function, its value will come from one of the input par-
ties prior to the computation. Similarly, the content of every vari-
able used in a call to smcoutput is stored by the computational
parties until the end of the computation. At that point all values
recorded for output party i will be transmitted to that party by all
computational nodes. Because smcinput and smcoutput func-
tions are the only available mechanism for I/O operations, we use
the same interface for both public and private variables.
When a call to smcinput or smcoutput with arguments var
and i is observed in the user program, the compiler looks up the
type of variable var in the symbol table that stores all declared
variables. The compiler than replaces a call to smcinput in the
transformed program with instructions for reading data of the ap-
propriate type from the input of party i and placing it in variable
var. Similarly, a call to smcoutput is replaced with instructions
for writing the content of var according to its type to the output
destined to output party i. The type of variable var determines
how many ﬁelds are used to represent the variable and their lengths.
For example, a private ﬂoating point variable is represented by four
random ﬁeld F elements (secret shares), while a public integer is
represented by a single value of its declared size.
Because a user program might be processed using multi-threaded
implementation, the compiler instructs the transformed program to
read the input of all parties into a data structure (that also maintains
variable names) before the computation starts. The data structure
allows each thread to access the variables it reads or writes from
the memory without having to implement I/O synchronization.
Implementation of numeric operations. Numeric operations on
private values constitute a signiﬁcant portion of our implementa-
tion of secure distributed computation, and we brieﬂy describe how
these operations are implemented.
Integer addition, subtraction,
and multiplication are basic building blocks for computation on se-
cret shares. Integer division is implemented according to [7], right
shift « x is implemented as multiplication by 2x, and left shift is
implemented using truncation as in [16]. Integer bitwise operations
are implemented using bit decomposition according to [17] fol-
lowed by the corresponding bitwise computation using arithmetic
operations. That is, for each bit i of operands a = a1. . .a(cid:96) and
b = b1. . .b(cid:96), XOR is implemented as ai ⊕ bi = ai + bi − 2aibi,
AND is implemented as ai ∧ bi = aibi, and OR is implemented
as ai ∨ bi = ai + bi − aibi. Comparisons and equality tests
are implemented according to [16]. All operations can be used
on both signed and unsigned integers. The complexities of divi-
818sion, bit decomposition, comparisons, and equality tests are linear
in the bitlength of the operands, and the complexity of truncation
is linear in the number of bits being truncated. All ﬂoating point
operations (addition, subtractions, multiplication, and division) are
implemented according to [7].
Implementation of array variables. To be able to support direct
operations on arrays of private data types using the traditional syn-
tax (e.g., inﬁx notation for binary operators), the compiler must
know the size of the arrays. While the size of an array generally
cannot be determined in C due to the use of pointers, in our C ex-
tension arrays of private elements are created through a controlled
interface. This allows us to internally represent private arrays af-
ter program parsing as a structure consisting of a ﬁeld that stores
the size of the array and a ﬁeld with the array elements themselves.
The size is then used to rewrite operations on private arrays into
secure distributed computation, where all elements of the array are
processed together. For example, multiplying two private arrays of
size n will lead to executing n element-wise multiplications in one
round of computation. This means that all operations are processed
using the round complexity of only one operation, but in some cases
even greater computational savings are possible. For example, in-
ner product computation can be realized using only a single inter-
active operation regardless of the size of the arrays. Recall that
our setting allows us to evaluate any multivariate polynomial of de-
gree 2 using a single interaction between the computational parties
which results in a particularly efﬁcient inner product protocol.
Note that, while our current implementation does not support
pointers besides arrays, using a structure to represent a private array
can be made compatible with implementations with full support for
pointers. In particular, we can make a pointer to a private array to
point to the second ﬁeld of the structure that stores array elements
to achieve data compatibility.
Memory access at private locations. When the user-speciﬁed
code contains access to an element of an array at a private loca-
tion, we protect the location information by touching all elements
of the array.2 Private indexing is implemented as a multiplexer,
where we ﬁrst privately bit-decompose the index and then evaluate
the multiplexer according to its Boolean formula. AND gates (mul-
tiplications) are computed for each element of the array in parallel,
after which the result is locally added together by each computa-
tional node. NOT operation of bit b is implemented as 1 − b. The
result of this operation is always private regardless of the type of
the data stored in the array.
Handling of private data types in assignments. To ensure that in-
formation about private values is not accidentally leaked, the com-
piler checks all assignment statements and produces a terminal er-
ror if a private expression is being assigned to a public variable.
This is enforced using the AST, in which each node is marked as
public or private and private status propagates from a child to its
parent. Then a node that corresponds to assignment is not permit-
ted to be composed of a public variable and private expression.
This check covers the cases when the expression contains func-
tion calls and the return type of at least one function used in the
expression is known to be private. If, however, a function call is
used, but its return type is not known (i.e., function declaration
cannot be found), the compiler displays a warning of a potential
violation of secure data ﬂow (i.e., unknown data type and a poten-
tial information leakage). The goal of these checks is to help the
2For large-sized arrays or databases, alternative techniques such as
oblivious RAM [27] or the approach from [33] are likely to result
in faster performance and their use will be investigated as part of
this project.
programmer avoid unintentional information leakage without re-
stricting the functionality. Public variables can be assigned values
based on private data through smcopen calls.
If, on the other hand, a private variable is assigned a public ex-
pression, the compiler rewrites the code to convert the result of the
expression evaluation to secret shares and then assign the resulting
private value to the variable.
Handling of conditional statements. As mentioned earlier, if-
statements with private conditions are not allowed to contain ob-
servable public actions in their body to prevent information leakage
about private conditions. To enforce this constraint, the compiler
analyzes all statements in the body of the conditional statement (re-
cursively parsing all constructions) to detect violations and produce
a terminal error is a violation is found. Similarly, the compiler ex-
tracts the list of functions called from the body of a conditional
statement with a private condition. For each such function, if its
content is known, the compiler analyzes its body for public side ef-
fects (such as changes to public global or shared variables) and pro-
duces a terminal error if such side effects are present. If, however,
the content of the function is not known, the compiler produces a
warning indicating a possible information leakage. Note that pri-
vate side effects in functions called from the body of an if-statement
with a private condition are permitted.
If no terminal errors have been found, the compiler proceeds
with transforming the if-statements with private conditions. As
the ﬁrst step, the compiler determines all variables, the values of
which are modiﬁed within the body of the if-statement (by search-
ing through the list of statements for assignment operations), and
their values are preserved in temporary variables. Next, the body
is evaluated as if the condition was true and the condition of the
if-statement is also privately evaluated. Now all variables affected
by the instructions in the body of the if-statement are updated as if
the condition holds and we need to roll back to their original val-
ues if the condition does not hold. To accomplish this, we update
each affected variable v by setting its value to c · v + (1 − c)vorig,
where c is a private bit corresponding to the result of evaluating the
condition and vorig is the original value of v prior to executing the
body of the if-statement.
If the if-statement contains the else clause, we repeat the process
for all variables modiﬁed within the body of the else clause with
two important differences: the private condition no longer needs to
be evaluated, and each variable v affected by the body of the else
clause is updated to (1 − c)v + c · vorig after executing all instruc-
tions in the else clause. This approach allows us to support arbitrary
constructions while using the minimal amount of resources.
The above approach allows us to evaluate private conditional
statements that modify ordinary variables efﬁciently, but can lead
to suboptimal memory use when the variables are arrays. In partic-
ular, if the body of an if-statement modiﬁes a single element of the
array (or a small number of them), storing the original content of
the entire array may result in substantial amount of extra memory.
For example, in constructions of the type
for (i=0; i<n; i++)
if (a[i]<0) a[i]=-a[i];
with private array a, there is no need to make a copy of the en-
tire array a for each conditional statement. Similarly, if a function
receives an index into a global array as its parameter and condi-
tionally modiﬁed the element at that index, storing a copy of the
array is wasteful. To mitigate the problem, we make special pro-
visions for array handling. In particular, if an element of an array
is modiﬁed within the body of a conditional statement with private
condition and that assignment is not surrounded by a loop, the ele-
ment of the array is treated as an ordinary variable, i.e., only a copy
819of the element is made, not a copy of the array. If, on the other
hand, the assignment is within the scope of a loop that affects the
element’s index within the array, that assignment will correspond
to modiﬁcations to a number of array elements. In that case, we
create a single temporary variable and in each loop iteration store
the current value of the array element to be modiﬁed prior to exe-
cuting the assignment operation. This will ensure that the optimal
amount of memory is used by the program. For example, if the