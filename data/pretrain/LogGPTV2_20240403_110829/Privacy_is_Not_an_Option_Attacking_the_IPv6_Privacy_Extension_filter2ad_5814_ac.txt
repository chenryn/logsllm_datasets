458
J. Ullrich and E. Weippl
of the victim’s history value and its MAC address is able to calculate the next
temporary interface identiﬁer according to the following recipe:
1. Infer the interface identiﬁer in modiﬁed EUI-64 format from the victim’s MAC
address. This requires the insertion of a ﬁxed pattern of two byte, and setting
bit 6 as described in Sect. 2.
2. Concatenate the victim’s current history value with the interface identiﬁer in
modiﬁed EUI-64 format generated in step 1.
3. Calculate the MD5 digest of the concatenation of step 2.
4. Extract the ﬁrst 64 bits from the calculated digest and unset bit 6 to form
the next temporary interface identiﬁer.
5. Extract the remaining 64 bits from the digest and form the next history value.
This way an adversary is not only able to compute the next interface identi-
ﬁer, but all future identiﬁers by repeating the described steps. As a consequence,
it seems worth developing methods to gain the algorithm’s internal state.
Synchronization to the Current State: The internal state could be leaked,
e.g., by means of malware, but this approach would imply an active adversary
that does not simply eavesdrop. In the following paragraphs, we show that eaves-
dropping over a number of consecutive days is suﬃcient to gain the internal state:
As described in Sect. 5, a temporary interface identiﬁer that is included into an
IPv6 address inherently discloses 63 bit of an iteration’s MD5 digest. While the
disclosed part is not the internal state, it is nevertheless related to the latter as
both are clips of the same MD5 digest. The disclosed interface identiﬁer can be
considered a side channel of the internal state.
Fig. 5. Synchronization to current state
Figure 5 depicts a situation like our attack scenario from Sect. 4. The victim’s
very ﬁrst history value is randomly initialized at day 0 and determines the history
value and the temporary interface identiﬁer of day 1; the history value of day
1 in turn determines history value and temporary interface identiﬁer of day 2
Privacy is Not an Option: Attacking the IPv6 Privacy Extension
459
and so on. The randomly assigned history value at day 0 determines one of 264
deterministic sequences that the victim’s interface identiﬁers follow.
An adversary might probe all possible values for this history value at day 0,
and compare the ﬁrst half of the MD5 digest with the interface identiﬁer of day
1. If they are equal this value might represent an appropriate candidate. As it
is only possible to compare 63 bit of the MD5 digest, it is likely that numerous
candidates remain. The adversary thus extracts the second half of the digest
as a candidate for the history value at day 1, includes it in another iteration
containing an MD5 calculation, compares the result with the interface identiﬁer
at day 2 and further shrinks the candidate set until a single candidate remains.
Then, the adversary has identiﬁed the internal state.
It is, however, unlikely that an adversary observes the very ﬁrst tempo-
rary addresses that a victim generates after its installation; an adversary rather
observes an arbitrary sequence of T successive addresses starting at day t0 +1 as
indicated in Fig. 5. Due to the algorithm’s structure, the adversary then assumes
the history value at day t0 to be randomly initialized without loss of generality.
The adversary does not have to know the number of temporary addresses that
the victim has generated before being recorded. For this reason, we added an
relative time line for the attack in the ﬁgure for readability.
Composite Attack: Based on the attack scenario of Sect. 4, the gained insights
of the previous paragraphs and Fig. 5, we summarize Eve’s steps towards pre-
dicting Alice’s future identiﬁers.
On Alice’s ﬁrst visit at Eve’s coﬀee shop on day 1, Eve has to perform the
following steps:
– Data Extraction from Traﬃc Records: Eve records the local traﬃc in her coﬀee
shop, and is thus able to read Alice’s MAC address from Ethernet headers as
well as her temporary IPv6 address. From this temporary IPv6 address, Alice
extracts the last 64 bits that are the interface identiﬁer for the ﬁrst day IID1.
– Generation of Modiﬁed EUI-64 Interface Identiﬁer: Eve infers Alice’s inter-
face identiﬁer in modiﬁed EUI-64 Format from the MAC address by inserting
a ﬁxed pattern of two bytes and setting bit 6 as described in Sect. 2. Alterna-
tively, she might read the identiﬁer in modiﬁed EUI-64 format directly from
Alice’s stable IPv6 address.
– Reduction of Candidate Set: Eve probes all possible values for the assumed
initial history value at day 0, concatenates the value with the stable identiﬁer
in modiﬁed EUI-64 format, and calculates the MD5 digest. If the ﬁrst part
of the MD5 digest equals Alice’s current temporary address3, the remainder
of the digest forms a candidate for the next iteration’s history value and is
added to the candidate set of the ﬁrst day C1. In this step, Eve reduces the
initial candidate set C0 of 264 alternative sequences to a smaller set C1 that
is stored for the next day.
3 The comparison is done on 63 diﬀerent bits (0–5 and 7–63); bit 6 is always set to
zero in temporary addresses, see Sect. 2.
460
J. Ullrich and E. Weippl
On every further visit of Alice at Eve’s on subsequent days t with 1  T , Eve is able to anticipate Alice’s temporary
interface identiﬁer for this day:
– Anticipation of Current Temporary Address: Eve concatenates the history
value of day T with the stable identiﬁer in modiﬁed EUI-64 format and cal-
culates the MD5 digest. She extracts the history value, and repeats the cal-
culation with the new history value. In total, (t − T ) MD5 digest calculation
are performed.
– Assemblage of the Interface Identiﬁer: Eve forms Alice’s interface identiﬁer
IIDt from the ﬁrst part of the last MD5 digest by setting bit 6 to zero.
With this knowledge, Eve is able to search her web server’s logs for the
calculated temporary identiﬁer and attributes certain visits to Alice. At the
same time, the preﬁx that the temporary identiﬁer is concatenated with to form
an IPv6 address provides information on the sub-network that Alice resided at
the time of the page visit. If this is equivalent to Bob’s assigned preﬁx, Eve is
able to infer that Alice drank coﬀee at Bob’s coﬀee shop.
7 Feasibility
In the previous sections, we identiﬁed weaknesses of the IPv6 privacy extension
and developed an attack exploiting these characteristics. The question on the
attack’s practicability with respect to today’s technology remains, and is dis-
cussed in this section. Three aspects have to be considered: (1) the minimum
number of observed interface identiﬁers, i.e., the number of days that Alice has to
visit Eve’s coﬀee shop, (2) the expenditure of time for brute-forcing, and (3) the
storage capacity to save the candidate set for the next day. Finally, a modiﬁed
version of our attack for limited storage capabilities is presented.
Privacy is Not an Option: Attacking the IPv6 Privacy Extension
461
Number of Address Observations: Alice has to visit Eve’s coﬀee shop so often
that Eve gains enough temporary identiﬁers for synchronization to the internal
state. We assume that Alice generates one temporary address per day as recom-
mended by the RFC [7], and an iteration of the attack corresponds to a day.
On the ﬁrst day, Eve probes 264 potential values for the history value and
compares their MD5 digest to the observed interface identiﬁer of Alice. The
unequal ones are excluded, and the appropriate ones form the candidate set C1
of potential values for the next day. The size of the candidate set is dependent
on the ratio of candidates that Eve is able to reject per day. With p being this
ratio, the size of the candidate set Ct for day t is calculated as follows
(1)
Eve has to repeat the explained step until a single candidate remains, i.e.,
|Ct| = 1, and the minimum number of days Tmin is calculated as follows
|Ct| = 264 · (1 − p)t
Tmin = ceil
log(264)
log(p − 1)
(2)
The more candidates can be excluded per iteration, the less successive inter-
face identiﬁers have to be known by Eve. If Eve is able to reduce the candidate
set by only 50 % every day, the minimum number of days is 64. A reduction by
99 %, 99.99 %, 99.9999 % shortens this to 10, 5, 4 days.
Time Expenditure for Brute-Forcing: Every iteration requires brute-forcing
the current candidate set Ct, and means an MD5 digest calculation for every
candidate. Assuming a hash rate r indicating the number of calculated hashes
per second, the total time TBrute for brute-forcing is calculated as follows
Tmin(cid:2)
1
r
|Ci| =
264
r
Tmin(cid:2)
i=0
(1 − p)i
TBrute =
(3)
Assuming 1 − p < 14, the equation is bounded as follows and allows an
i=0
estimation of the total time expenditure for MD5 brute-forcing
TBrute <
264
r
∞(cid:2)
i=0
(1 − p)i =
264
r
· 1
p
(4)
A hash rate of 180 G/s with MD5 is feasible [20]. The more candidates can
be excluded, the less time is required. If Eve is able to reduce the candidate set
on average by only 50 % every day, the time for brute-forcing remains 6.5 years,
a reduction by 99 % shortens this to 3.3 years. Time expenditure appears high
at the ﬁrst sight, but time plays for the adversary, and advances in technology
are likely to decrease this eﬀort. It is likely that faster hashing is already feasible
4 p is the portion of candidates that can be excluded per iteration.
462
J. Ullrich and E. Weippl
today as the given hash rate was measured at a cluster of 25 consumer GPUs back
in the year 2012 and GPUs have recently experienced extensive advancement.
Storage of Candidate Set: Appropriate candidates for the history value have
to be stored for the next iteration. The history value size is 8 byte, and the
storage demand St is dependent on the size of the candidate set.
St = |Ct| · 8 byte = 264 · (1 − p)t · 8 byte
(5)
The following calculation considers the ﬁrst iteration due to its worst case
character5: If Eve is able to reduce the candidate set on average by only 50 %
every day, the storage demand for the ﬁrst iteration is 74 Exabyte, a reduc-
tion of 99 %, 99.99 %, 99.9999 % reduces the storage demand to 1.5 Exabyte,
15 Petabyte, 148 Terabyte.
This storage demand, however, can be circumvented by a modiﬁcation of the
attack. In our initial design of Sect. 6, Eve synchronized to Alice’s state simulta-
neously to her coﬀee shop visits, but Eve might alternatively perform the attack
retroactively. Therefore, she stores Alice’s successive interface identiﬁers for Tmin
days before starting the attack. Instead of storing an appropriate candidate after
the ﬁrst iteration, she performs the second, third, etc. iteration with this candi-
date as long as it appears appropriate. Otherwise, it is rejected. This way the
storage demand is reduced to a few bytes for execution of the algorithm for
temporary interface identiﬁer generation.
8 Implementation in Operating Systems
In this section, we assess current operating systems that support the IPv6 pri-
vacy extension with respect to their individual vulnerability. We tested Mac OS
X Yosemite, Ubuntu 14.10 (Utopic Unicorn) and Windows 8.1 Enterprise as rep-
resentatives of the three major ecosystems on clients. In doing so, we faced the
challenge that we cannot access the respective sources of all operating systems,
and had to rely on the externally observable pattern of successively generated
interface identiﬁers. A machine running an operating systems that implemented
the privacy extension as described in the respective RFC has to generate the same
sequence of successive interface identiﬁers whenever originating from a deﬁned
initial state. The sequence appears unchanged when faced with some external
factors, while changing in dependence of other factors. The speciﬁc inﬂuencing
factors are discussed later in this section.
For checking the stated premise, we created a setup of two virtual machines
running in VMWare Workstation 11 and Fusion Pro 7. The machines were vir-
tually connected for networking. One ran the tested operating system; we refer
to this machine as the testee. To save time, we decreased the preferred lifetime
on all operating systems and forced the generation of a new temporary address
at an interval of twelve minutes. We ﬁnally created a snapshot of the testee that
5 The candidate set C0 does not have to be stored as it contains all 264 possible values.
Privacy is Not an Option: Attacking the IPv6 Privacy Extension
463
made it possible to return it to the initial state after every test. The testee gen-
erated temporary addresses after a router’s announcement of a network preﬁx.
The second virtual machine thus ran Ubuntu 14.10 simulating this router; to
send ICMPv6 Router Advertisements the tool fake router6 from the thc-ipv6
toolkit [21] was used. We recorded the temporary addresses of the testee by
means of local scripts.
Using the above premise, we tested the operating systems for ﬁve criteria.
First, repeating the test without any changes multiple times has to result in the