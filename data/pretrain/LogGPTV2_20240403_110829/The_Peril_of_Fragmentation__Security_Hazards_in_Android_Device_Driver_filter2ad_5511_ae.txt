### 优化后的文本

#### 概述
某些国家（如中国、巴西）的手机型号更容易受到安全威胁。这些国家的定制化安全性可能低于其他国家。

#### 表格 VIII. 识别出的 LCF 和已确认的漏洞
| LCF 类型 | 设备节点数量 (总数: 222) | 图像数量 (总数: 2423) | 型号数量 (总数: 288) | 运营商数量 (总数: 275) |
| --- | --- | --- | --- | --- |
| 输入 | 28 (12.61%) | 1290 (53.24%) | 90 (3.71%) | 238 (86.55%) |
| 视频 | 1 | 329 (13.58%) | 215 (75.65%) | 136 (49.45%) |
| 帧缓冲区 | 5 | 952 (39.23%) | 35 (12.15%) | 217 (78.91%) |
| 其他 | 1 | 72 (22.00%) | 14 (4.86%) | 47 (17.09%) |

#### 表格 IX. LCF 和已确认漏洞最多的前 10 个地区
| 排名 | 地区 | 含 LCF 的型号数量 | 含 3 个漏洞的型号数量 |
| --- | --- | --- | --- |
| 1 | 中国 | 80 | 28 |
| 2 | 巴西 | 65 | 27 |
| 3 | 法国 | 51 | 22 |
| 4 | 美国 | 46 | 12 |
| 5 | 印度 | 42 | 17 |
| 6 | 德国 | 41 | 20 |
| 7 | 台湾 | 40 | 17 |
| 8 | 西班牙 | 40 | 16 |
| 9 | 香港 | 38 | 14 |
| 10 | 澳大利亚 | 37 | 21 |

#### 表格 X. 不同操作系统版本中 LCF 的分布
| 操作系统版本 | 含 LCF 的手机型号数量 | 手机型号总数 | 占比 |
| --- | --- | --- | --- |
| 4.0.3 | 11 | 16 | 68.75% |
| 4.0.4 | 78 | 113 | 69.03% |
| 4.1.1 | 9 | 48 | 18.75% |
| 4.1.2 | 48 | 159 | 30.19% |
| 4.2.2 | 14 | 59 | 23.73% |
| 4.3 | 6 | 21 | 28.57% |

#### 定制化漏洞的演变
我们进一步选择了至少有 2 个不同 Android 版本图像的 103 个手机型号，研究了单个型号在不同版本中的 LCF 演变情况。其中，92 个手机型号在其至少一个图像中存在至少一个 LCF（包括 3 个已确认的漏洞）。我们检查了这些型号在升级后是否修复了其现有的 LCF。表 XI 显示了通过更新修复或引入新 LCF 的手机型号数量。只有 6 个型号完全解决了所有 LCF，而其他型号要么继续存在至少一个现有 LCF，要么甚至引入了新的 LCF。最有趣的案例是 GT-N7000 Galaxy Note：其相机漏洞（第 IV-B 节）在 4.0.3 和 4.0.4 中都存在；问题在 4.1.1 中消失但在 4.1.2 中再次出现。因此，我们不确定供应商是否发现了问题并有意解决它，但后来又出现了同样的问题。对于帧缓冲区漏洞，我们只有 4.1 和 4.2 版本的图像，因此不知道它们在最新版本中是否已经解决。

#### 表格 XI. 更新时修复或引入 LCF 的手机型号
| 修复情况 | 手机型号数量 |
| --- | --- |
| 升级时修复至少 1 个 LCF | 53 |
| 升级时修复所有 LCF | 6 |
| 升级后 LCF 再次出现 | 2 |
| 升级时引入新的 LCF | 36 |

#### 公共设备文件
最后，我们查看了 /dev 下的所有公共设备文件。表 XII 列出了根据各种定制手机中出现次数最多的设备文件。列表中只有第一个文件 /dev/kgsl-2d1 被报告为具有 LCF，这是一个 2D 图形加速卡的驱动程序。其公开可能导致未经授权的方访问手机屏幕上显示的信息，尽管这一漏洞是否可被利用仍需进一步调查。其他设备文件并未出现在参考文献中，因此我们没有任何迹象表明它们需要保护。为了找出这些文件是什么，我们手动分析了它们的源代码并在 Google 上搜索了相关信息。

#### 表格 XII. 最常见的公共可访问设备节点及其潜在影响
| 设备节点 | 功能及影响 |
| --- | --- |
| /dev/kgsl-2d1 | GPU 设备用于 2D 加速 |
| /dev/ump | 统一内存提供者，提供跨进程和硬件单元共享内存的方法 |
| /dev/fimg2d | 2D 图形驱动程序，提供图像变换功能 |
| /dev/hwmem | 分配连续内存缓冲区并处理分配缓冲区之间的共享 |
| /dev/s5p-mfc | 摄像头驱动程序，暴露此设备可能导致摄像头攻击 |
| /dev/exynos-mem | 用于图形和 SurfaceFlinger 的内存，暴露此设备可能导致篡改内核内存 |
| /dev/vc-lmk | 低内存终止设备，暴露此设备可能导致普通应用杀死任何进程 |
| /dev/felica | RFID 智能卡系统驱动程序 |

#### 更多攻击
我们进一步分析了表 XII 中的两个潜在漏洞，并开发了端到端的攻击方法。这证实了这些缺陷是真实的，且其利用可能会产生严重后果。具体来说，我们研究了 vc-lmk 设备，这是一个低内存终止驱动程序。Android 设计为在内存中容纳尽可能多的进程以快速响应用户请求。然而，当内存即将耗尽时，操作系统会根据 oom_adj 值选择终止一些进程。为此，Android 包含了这个进程终止设备，该设备绝不应公开。在我们的研究中，我们实现了一个无需权限的应用来利用此漏洞终止其他进程。由于暴露的驱动程序运行在内核空间，它可以停止任何进程，包括系统应用如 Phone、SurfaceFlinger 甚至 init 进程。为了控制驱动程序，应用通过 ioctl 调用 vc-lmk 并使用命令 VC_LMK_IOC_KILL_PID 和 pid 作为参数。执行该命令后，驱动程序向目标发送 SIGKILL 信号并要求其停止运行。请注意，在 ioctl 中没有任何访问控制保护措施可以防止我们的应用释放 vc-lmk。在实验中，我们成功地停止了几个系统进程。有趣的是，一旦 Phone 应用被终止，正在进行的通话将挂断；SurfaceFlinger 的终止会立即冻结手机的用户界面；当 init 进程停止时，整个手机将重启。

我们还对暴露的 UMP 设备进行了攻击，这是一个统一内存资源分配器。我们对其源代码的分析揭示了两个 IO 控制命令：UMP_IOC_ALLOCATE 用于分配内存并将用户数据复制到内核，UMP_IOC_MSYNC 用于缓存维护。我们的攻击利用第一个命令不断请求资源，直到耗尽手机的所有内存从而禁用手机。对于第二个命令，我们在随机内存位置运行它，导致手机立即重启。显然，该设备提供了关键的安全功能，因此不应向未经授权的应用开放。

#### 讨论
Android 的开放性带来了碎片化的生态系统，具有显著的安全影响。在我们的研究中，我们首次尝试理解这种环境下的安全挑战，特别是 Android Linux 设备定制过程中引入的安全关键缺陷。我们发现大量 Android 手机在多个操作系统版本、不同供应商、运营商和地区中存在设备相关文件的安全配置错误，导致关键系统资源和能力的完全暴露。另一方面，我们认为这只是设备定制中新安全挑战的冰山一角。迫切需要在以下几个方向上进行进一步的研究。

#### 相关工作
在本节中，我们将回顾相关的先前研究，并将其与我们的工作进行比较。
- **Android 应用分析**：Android 应用经常被用于统计恶意软件检测 [47] 和漏洞识别。例如，CHEX [38] 和 ComDroid [23] 使用这种方法来发现应用内的安全关键缺陷。Woodpecker [30] 扫描大量应用以查找其特权泄露弱点。与这些先前的方法不同，ADDICTED 是针对 Android 系统而不是单个应用设计的。鉴于 Android 系统的复杂性，我们需要更多技术手段来解决这些问题。

希望这些优化使文本更加清晰、连贯和专业。