(e.g., China, Brazil) host more vulnerable phone models. The
security quality of customizations there may be lower than that
in other countries.
418
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
TABLE VIII.
IDENTIFIED LCFS AND CONFIRMED VULNERABILITIES
LCFs
INPUT
VIDEO
FRAME BUFFER
# of distinct device nodes
(Total on references: 222)
28(12.61%)
1
5
1
# of distinct images (Total: 2423)
# of distinct models (Total: 288)
# of carriers (Total: 275)
1290(53.24%)
329(13.58%)
952(39.23%)
90(3.71%)
215(75.65%)
35(12.15%)
72(22.00%)
14(4.86%)
238(86.55%)
136(49.45%)
217(78.91%)
47(17.09%)
TABLE IX.
TOP 10 REGIONS WITH MOST LCFS AND CONFIRMED
VULNERABILITIES
RANK
Region
CHINA
BRAZIL
FRANCE
US
INDIA
GERMANY
TAIWAN
SPAIN
HONG KONG
AUSTRALIA
# of models
with LCFs
80
65
51
46
42
41
40
40
38
37
# of models with the
3 vulnerabilities
28
27
22
12
17
20
17
16
14
21
Model w/ LCFs Model w/ Comfirmed LCFs
1
2
3
4
5
6
7
8
9
10
16
14
12
10
8
6
4
2
0
s
F
C
L
/
w
s
l
e
d
o
m
e
n
o
h
p
f
o
#
TABLE X.
DISTRIBUTION OF LCFS OVER OS VERSIONS
OS Version
4.0.3
4.0.4
4.1.1
4.1.2
4.2.2
4.3
Phone Models with LCFs
11
78
9
48
14
6
Total Phone Models %
16
113
48
159
59
21
68.75%
69.03%
18.75%
30.19%
23.73%
28.57%
stop making much progress on suppressing such customization
ﬂaws.
We further selected all 103 phone models with at least 2
images (of course, with different Android versions) to study
the evolution of LCFs across different versions on individual
models. Out of them, 92 phone models have at least one of the
LCFs, including the 3 conﬁrmed vulnerabilities, on at least one
of their images. On these 92 models, we checked whether their
LCFs are removed after the phones are upgraded. Table XI
shows the number of phone models whose updates ﬁx their
existing LCFs or introduce new ones. As we can see here, only
on 6 phone models, the vendors have completely addressed all
their LCFs through updates, while the others either continue to
suffer from at least one of the existing LCFs, or even get new
ones. The most interesting case is GT-N7000 Galaxy Note: its
camera vulnerability (Section IV-B) is present on both 4.0.3
and 4.0.4; the problem disappears on 4.1.1 but shows up again
on the 4.1.2. Therefore, we are not sure whether the vendor has
discovered the problem, intentionally addressed it and made
the same lapse again later. Also for the frame buffer ﬂaw, we
only have images for the affected phones at 4.1 and 4.2 and
therefore do not know whether they have been addressed in
their most recent versions.
TABLE XI.
LCFS FIXED OR INTRODUCED BY UPDATES ON PHONE
MODELS
Fixed at least 1 LCF when upgrading
Fixed all LCFs on the phone when upgrading
Fixed LCF shows up again after upgrades
Introduce new LCFs when upgrading
# of Phone Models
53
6
2
36
Popular public device ﬁles. Finally, we took a look at all
public device ﬁles under /dev. Table XII lists top device
ﬁles based upon their individual number of occurrences across
various customized phones. On the list, only the ﬁrst one
/dev/kgsl-2d1 was reported to have an LCF, which is
a driver for a 2D graphic acceleration card. Its disclosure
to the public could allow an unauthorized party to access
the information about the images displayed on the phone’s
screen, though whether this exploit can work out needs a
further investigation. Other device ﬁles on the list do not
even show up on the references, so we did not have any
indications that they need to be protected. To ﬁnd out what
those ﬁles are, we manually analyzed their source code and
searched for their information on Google. It turns out that
Fig. 4. Top 10 Carriers that has most LCFs and Conﬁrmed Vulnerabilities.
We also analyzed the distributions of all LCFs discovered
through the comparison between factory images and refer-
ences. Table IX presents the top 10 countries in terms of the
number of phone models involving LCFs and the number of
the models with the 3 conﬁrmed vulnerabilities. As we can
see here, these two ranking lists are largely aligned.
Besides vendors, carriers may also customize phones to
add new features. Figure 4 shows the top 10 carriers with
the highest number of phone models affected by the LCFs
and conﬁrmed vulnerabilities. Among them, the SK Telecom
(Korea) and China Mobile have the largest number of vulner-
able phone models. T-Mobile and AT&T are also on the list.
Particularly, they have few popular models (Galaxy Note 2
and Galaxy Tab for T-Mobile, and Galaxy SII for AT&T) that
contain the conﬁrmed customization vulnerabilities described
in Section IV.
To ﬁnd out how the security quality of customizations
evolves across different Android versions, we inspected the
factory images across multiple Android versions for the pres-
ence of LCFs. Table X shows the number of LCF-affected
phone models on different versions. When those phones are
upgraded from 4.0.3 to 4.1,
the percentage of vulnerable
models drops from nearly 70% to 18%. However, it goes up to
round 30% for 4.1.2 and 4.3. This shows that vendors seem to
419
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
TABLE XII.
MOST POPULAR PUBLICLY ACCESSIBLE DEVICE NODES
AND THEIR POTENTIAL IMPACTS
Functionality and Impact
GPU device for 2D acceleration
Uniﬁed Memory Provider that provides a way
to share both existing and new memory areas
across processes and hardware units.
2D graphic driver that provides image trans-
formation for stretching, rotation and alpha
blending. Data will be delivered to frame-
buffer.
An interface to allocate contiguous memory
buffers for hardware and handle sharing of
allocated buffers between processes
Camera driver. Exposure of this device could
lead to camera attacks.
/dev/exynos-mem Memory used by graphics, surfaceﬂinger. Ex-
posure of this device could enable an app to
tamper kernel memory.
Low memory kill. Exposure of this device may
allow an ordinary app to kill any process.
Driver for RFID smart card system.
/dev/vc-lmk
Device Node
/dev/kgsl-2d1
/dev/ump
/dev/ﬁmg2d
/dev/hwmem
/dev/s5p-mfc
/dev/felica
all of them are indeed security-critical. For example,
the
ﬁle /dev/vc-lmk was found to be a “low-memory kill”
device, which terminates an app when the phone’s memory
is running low. With its complete exposure, any app, without
any permission, can invoke the device to stop another app.
Another example is /dev/hwmem, a memory device through
which one can touch physical memory. This device has been
made public on Galaxy S 3 Mini and other models. As a
result, an unprivileged app may be able to make ioctl calls
to this device to read or write part of the phone’s physical
memory. All such ﬁndings, again, show that what we detected
through ADDICTED are nothing more than a tip of the iceberg.
The security problems in Android device customizations are
so serious that immediate efforts need to be made to better
understand them and effectively address them.
More attacks. We further analyzed two potential vulnerabil-
ities in Table XII and developed end-to-end attacks on them.
This conﬁrmed that those ﬂaws are real and their exploits
can have serious consequences. Speciﬁcally, we studied the
vc-lmk device, which, as discussed before, is a low memory
kill driver. Android is designed to accommodate as many
processes as possible in the memory to help them promptly
respond to the user’s requests. However, when the memory
is about to run out, the OS picks up processes, based upon
their oom_adj values, to terminate. For this purpose, Android
includes this process-killing device, which should never be
made public. In our research, we implemented an app, without
any permission, to exploit this exposure to terminate other
processes. Since the exposed driver runs in the kernel land,
it can stop any processes, including system apps like Phone,
SurfaceFlinger and even the init process. To command
the driver, the app was built to make ioctl calls to vc-lmk
with the command VC_LMK_IOC_KILL_PID and pid as
the argument. Executing the command, the driver then sends
an SIGKILL to the target and asks it to stop running. Note
that there is no access-control protection whatsoever within
ioctl to prevent our app from unleashing vc-lmk. In our
experiment, we successfully stopped several system processes.
Interestingly, once the Phone app is terminated, ongoing
calls hang up; SurfaceFlinger’s termination immediately
freezes the phone’s user interface; When the init process is
stopped, the whole phone reboots.
420
We also came up with an attack on the exposed UMP
device, which is a uniﬁed memory resource allocator. Our
analysis of its source code reveals two IO control commands:
UMP_IOC_ALLOCATE for allocating memory and copying
user data to kernel, and UMP_IOC_MSYNC for cache main-
tenance. Our attack leveraged the ﬁrst command to contin-
uously require resources until disabling the phone by using
up all it memory. For the second command, we ran it to
access a random memory location, which caused the phone
to reboot immediately. Clearly, the device provides security-
critical capability and therefore should not be made available
to unauthorized apps.
VI. DISCUSSION
The openness of Android has brought in a fragmented
ecosystem with signiﬁcant security implications. In our re-
search, we made the ﬁrst step toward understanding the se-
curity challenges there, particularly the security-critical ﬂaws
introduced during customization of Android Linux devices. We
found the presence of customization errors in the security con-
ﬁgurations of device-related ﬁles on a large number of Android
phones, across multiple OS versions, different vendors, carriers
and regions, leading to complete exposure of critical system
resources and capabilities. On the other hand, we believe that
what we found just scratches the surface of the new security
challenges in device customizations. Further research effort is
urgently needed on the following directions.
Other devices. Our techniques cannot connect most device-
related ﬁles to their Linux devices. Under /dev, still dozens
of ﬁles are there which we cannot interpret, though some of
them may not be sensitive. To increase the coverage, more
test cases need to be added to ADDICTED’s test suite. More
challenging here is identiﬁcation of the drivers for the devices
not supported by the ofﬁcial Android OSes. A comparison with
the reference in this case will not help detect the security-
critical ﬂaws in their device ﬁles. New techniques therefore
need to be developed to address this problem.
Flaw detection. The design of ADDICTED is to detect LCFs
by looking at the way device ﬁles are protected on the refer-
ence. For those with downgraded protection levels, all we can
say here is that they might cause some security concerns. Con-
ﬁrmation of security ﬂaws still need a manual analysis. New
techniques for automating this process are deﬁnitely valuable.
Also, ADDICTED is not designed to identify the device ﬁle
conﬁguration problems on the ofﬁcial Android OSes. Further
research on this direction could leverage observed relations
between Android permission levels and their corresponding
devices’ Linux-level protection settings to build a model for
detecting security conﬁguration ﬂaws on AOSP versions.
VII. RELATED WORK
In this section, we review related prior studies and compare
them with our work.
Android app analysis. Android apps have often been analyzed
statistically for malware detection [47] and vulnerability iden-
tiﬁcation. Examples include CHEX [38] and ComDroid [23]
that utilize this technique to ﬁnd out security-critical ﬂaws
within apps. Also, Woodpecker [30] scans a large number of
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:07 UTC from IEEE Xplore.  Restrictions apply. 
apps for their privilege-leak weaknesses. Different from those
prior approach, ADDICTED is meant to work on the Android
system, instead of individual apps. Given the complexity of