U-TAUT
(actswith m) ∈ σ
σ ‘u m
U-LIFT
σ ‘d m
σ ‘u m
B-TAUT
(believes m) ∈ σ
σ ‘b m
B-SIGN-VERIFY
σ ‘d sign(K−, m)
σ ‘b m
σ ‘b K +
Figure 7. Cryptographic Deduction System
cies list to to a list of seals.
3.3 Cryptographic Analysis
L[[(π1 . . . πn)]]R1,W 1,...Rn,W n
= [P[[π1]]R1,W 1 . . . P[[πn]]Rn,W n]
Once ‘ is translated to an envelope, we can proceed with
translating hvi‘. First we recursively translate v to obtain
V[[v]]. Next we write into the envelope by encrypting V[[v]]
with each seal’s K−
W key. The result is
paired with the list of seals. Formally, the value translation
is given by
R and signing with K−
V[[i]]κ = "i"
V[[inl v]]κ = ("inl", V[[v]]κ)
V[[inr v]]κ = ("inr", V[[v]]κ)
V[[hvi‘]]κ1,κ2 = (doPack κ2 V[[v]]κ1, L[[‘]]κ2)
where
doPack (R1, W1, . . . , Rn, Wn) m
= es(Rn, Wn, . . . es(R1, W1, m) . . .)
es(R, W, m) = sign(K−
W , enc(K +
R , m)).
Entire memories are translated to cryptographic states
by packing each location’s contents:
M[[·]]Θ
M[[M[x 7→ v]]]Θ
κ = ∅
κ,κ0 = M[[M]]Θ
κ , knows V[[hvi‘]]κ0
(where Θ(x) = τ{‘})
To correctly thread κ though the above calculation, we as-
sume that locations in a program are translated in a ﬁxed
order. Picking an order is easy, as memories are ﬁnite and
the choice of order is arbitrary.
We model the execution of a SImp program by an evolv-
ing cryptographic state that reﬂects the program’s dynamic
memory contents. To do this we will deﬁne equivalence
relations on messages and cryptographic states, then show
that the translation functions from Section 3.2 preserve
equivalences. Lastly, we introduce state transition rules
for cryptographic states and argue that command evaluation
corresponds to state evolution.
First we connect the cryptographic system and our DLM.
The predicate σ (cid:31) p holds when ∀p ∈ p.σ ‘u K−
p . The
relation σ ‘ m ∼= m0 means that in state σ messages m and
m0 are indistinguishable.
It is inductively deﬁned by the
rules in Figure 8. Rule ME-ID states that identical terms are
indistinguishable. Rule ME-ENC-SECRET assumes perfect
cryptographic operations. In particular, ME-ENC-SECRET
states that if two messages cannot be decrypted, they are
equivalent—you cannot provide evidence that they do not
encrypt equivalent values. The rule ME-PAIR says that in-
formation from the left sides of pairs is considered when
checking the right sides, and vice versa. This is necessary
to avoid erroneously deriving that (K , enc(K , "a")) ∼=‘
(K , enc(K 0, "b")).
Rule ME-SIGN-SUSPECT requires explanation. It states
that two messages are equivalent when they are signed by
untrusted keys. From the perspective of an honest user,
this makes perfect sense. Honest players will ignore signed
messages that they do not trust. It also makes sense from
the perspective of the attacker. A Dolev-Yao attacker only
desires to construct (or deconstruct) messages he should not
be allowed to do. This aspect of signatures is handled by D-
SIGN and D-SIGN-ID. While an attacker might swap two
10
σ ‘ m1
∼= m2
‘ σ → σ0
σ ‘ m ∼= m
σ, knows m2, knows m0
σ, knows m1, knows m0
σ ‘ (m1, m2) ∼= (m0
σ ‘ m1
∼= m2
∼= m0
2 ‘ m1
∼= m0
1 ‘ m2
1, m0
2)
1
2
σ ‘ enc(K , m1) ∼= enc(K , m2)
σ ‘ enc(K +
σ 6‘u K−
2
1
σ 6‘u K−
1 , m1) ∼= enc(K +
σ ‘ m1
∼= m2
2 , m2)
ME-ID
‘ σ → σ, knows (K +
κ , K−
κ ) CS-FRESH
κ fresh
ME-PAIR
σ ‘d m
CS-DERIVE
‘ σ → σ, knows m
CS-FORGET
σ0 ⊆ σ
‘ σ → σ0
ME-ENC-STRUCT
CS-COMPUTE
σ ‘d "i1"
σ ‘d "i2"
‘ σ → σ, "i3"
where i3 = i1 + i2
ME-ENC-SECRET
Figure 9. Cryptographic State Transitions
σ ‘ sign(K , m1) ∼= sign(K , m2)
ME-SIGN-STRUCT
σ 6‘b K +
σ 6‘b K +
1 , m1) ∼= sign(K−
2
1
σ ‘ sign(K−
2 , m2)
ME-SIGN-SUSPECT
Figure 8. Contextual Message Equivalence
equivalent messages, he will only be able to fool an honest
participant who does not believe the keys used to sign the
messages; this is harmless.
The next
four deﬁnitions extend the notion of ‘-
p ) then σ reads ‘.
equivalence to messages.
Deﬁnition 3 (σ reads ‘).
If ∃p.(p reads ‘ ∧ ∀p ∈ p.σ ‘u K−
Deﬁnition 4 (σ distrusts ‘).
If ∃p.(p writes ‘ ∧ ∀p ∈ p.σ 6‘b K−
Deﬁnition 5 (σ ≤ ‘).
If ¬σ reads ‘ and σ distrusts ‘ then σ ≤ ‘.
Deﬁnition 6 (Message ‘-equivalence: m ∼=‘ m0).
We write m ∼=‘ m0 if and only if
p ) then σ distrusts ‘.
∀σ. σ ≤ ‘ =⇒ σ, knows m, knows m0 ‘ m ∼= m0
For example, assume K−
R is fresh, then consider the mes-
sages
m = (enc(K +
m0 = (enc(K +
p , K−
p , K−
R ), enc(K +
R ), enc(K +
R , "3"))
R , "4"))
and the label ‘ = {o : pq !P}. Is it true that m ∼=‘ m0? To
ﬁnd out, we take arbitrary σ where σ ≤ ‘. Unfolding Deﬁ-
nition 5 shows ¬(σ reads ‘). Therefore, because p reads ‘,
we conclude σ 6‘u K−
p . Now let
p , K−
σ0 = σ, knows (enc(K +
R ))
σ00 = σ0, knows m, knows m0.
11
6‘d K−
From σ 6‘u K−
p and the freshness of K−
R ,
it is clear
6‘d K−
R . Therefore σ00 ‘
that σ0
R and that σ00
R , "3") ∼= enc(K +
enc(K +
R , "4") by ME-ENC-SECRET.
Applying ME-PAIR yields σ0 ‘ m ∼= m0. Finally gener-
alizing over σ and applying Deﬁnition 6 gives m ∼=‘ m0.
The messages m and m0 contain the key components
of V[[h3i{o:p ! }]] and V[[h4i{o:p ! }]]. Demonstrating their ‘-
equivalence here is intended to be suggestive, and this rela-
tion will be made precise by Lemma 3. First, however, we
must lift ‘-equivalence to cryptographic states.
Deﬁnition 7 (σ ∼=‘ σ0). If knows m ∈ σ implies that there
exists m0 where knows m0 ∈ σ0 and m ∼=‘ m0, then σ0 (cid:15)‘
σ. If σ0 (cid:15)‘ σ and σ (cid:15)‘ σ0, then σ ∼=‘ σ0.
Thus far we have deﬁned two sorts of equivalence rela-
tions: those at the SImp level and those at the cryptographic
level. However, it is not yet clear what, if any, formal re-
lation exists between, say, value and message equivalences.
For our cryptographic semantics to provide a safe interpre-
tation of of SImp, equivalent values (memories) must trans-
late to equivalent messages (states). Otherwise, an attacker
could illegally gain information by observing the crypto-
graphic states corresponding to the beginning and end of a
well-typed program’s execution. The following lemma and
corollary state that this cannot occur.
Lemma 3 (Adequacy of Value Translation). If v1
and κ is fresh then V[[v1]]κ
Corollary 1 (Adequacy of Memory Translation). If Θ ‘
M1
∼=‘ V[[v2]]κ.
∼=‘ M2 and κ is fresh then M[[M1]]Θ
Coupled with Theorem 2, these demonstrate that our
cryptographic system reﬂects language level noninterfer-
ence. Thus Lemma 3 and its corollary are the statements
that our cryptographic system is safe.
∼=‘ M[[M2]]Θ
κ .
∼=‘ v2
κ
Above, we showed that SImp and its cryptographic in-
terpretation are safe. However, safety and implementabil-
ity are orthogonal issues. For example, the translation that
maps all values to the empty string is safe, but could not
be the basis for practical system. We argue that our crypto-
graphic model is a reasonable foundation for SImp in two
steps. First, we deﬁne a nondeterministic transition relation
on cryptographic states in which only cryptographically re-
alizable transitions may occur. Second, we claim that it sim-
ulates SImp evaluation.
Intuitively, the relation ‘ σ1 →∗ σ2 holds when a cryp-
tographic state σ1 can, using basic cryptographic opera-
tions, transition to state σ2. This is the reﬂexive transitive
closure of the rules given in Figure 9. We are most inter-
ested in states corresponding to memories (i.e. heaps), and
those corresponding to expressions currently executing (i.e.
stacks). State state(κ, p, c) represents the dynamic infor-
mation associated with command c and principals p. It is
deﬁned by
σ0 = {knows "inl", knows "inr", . . .}
∪ {knows K +
p | p ∈ P}
∪ {V[[‘i]]κi
| . . . vi . . . = values(c)}
| . . . ‘i . . . = labels(c)}
p | p ∈ p}
κ ∪ {actswith K−
κ = {V[[vi]]κi
σc
state(κ, p, c) = σ0 ∪ σc
where values(c) is the list of values occurring in command
c and labels(c) is the list of labels occurring in c. Note
that because σc
κ contains translations of labels occurring in
source program c, all owners’ keys are needed at compile
time (but, of course, not later). Such a requirement is also
intuitively necessary; after all c must be treated as very high
integrity data.
Theorem 3 (Feasibility). If Θ ‘ M OK , pc; Θ; Γ ‘
c, p reads pc, p writes pc, and p ‘ hM, ci →
hM0, c0i then ∃κ3, κ4. ‘ M[[M]]Θ
κ1 ∪ state(κ2, p, c) →∗
M[[M0]]Θ
κ3 ∪ state(κ4, p, c).
The cryptographic semantics’s non-determinism allows
us to investigate feasibility without picking a particular im-
plementation strategy and providing a fully-abstract sim-
ulation of SImp programs. Thus Theorem 3, demonstrates
that there is some cryptographic realization of memory tran-
sitions described by the program. However, it does not need
to reﬂect all the computational detail of the program’s op-
eration (e.g. maintenance of the run-time stack) into the
cryptographic transition system.
The commutation diagram below summarizes our main
results. For convenience, we write p; c; κ ‘ σ →∗ σ0
for ‘ state(κ, p, c) ∪ σ →∗ σ0. The diagram’s inner and
outer loops each illustrate Theorem 3. The preservation of
‘-equivalence by the top and side arrows demonstrates The-
orem 2 and Corollary 1.
∼=‘ M2
M1
p ‘h ,ci→∗h ,skipi
p ‘h ,ci→∗h ,skipi
M0
2
∼=‘ M0
1
M[[·]]Θ
κ
M[[·]]Θ
κ
M[[·]]Θ
κ
M[[·]]Θ
κ
σ1 ∼=‘ σ2
/___________
∼=‘ σ0
S U W X Z \ ] _ a b d f g i k
p;c;κ‘ →∗
σ0
2
1
p;c;κ‘ →∗
1
∼=‘ M0
We assume all memories and commands are appropri-
ately typed with location context Θ, the empty value con-
text, and a pc such that p reads pc and p writes pc. To
interpret the diagram, begin with ‘-equivalent memories,
M1 and M2. The arcs across the top correspond to ter-
minating evaluations of command c. Theorem 2 shows
Θ ‘ M0
2. The arrows going down are memory
∼=‘ σ0
2;
translations. Corollary 1 shows σ1
this reﬂects safety. Lastly, the arcs across the bottom il-
lustrate that by, Theorem 3, the system transformations of
the program are feasible. The right hand side arrows point
down because that is sufﬁcient to demonstrate feasibility.
Reversing these arrows up would require a fully-abstract
translation of SImp to the cryptographic semantics—an in-
teresting problem outside the scope of this paper.
∼=‘ σ2 and σ0
1
4 Related Work
Askarov, Hedin, and Sabelfeld [4] recently investigated
a type system for programs with encryption and with the
property that all well typed programs are non-interfering.
Their work differs from ours in several ways. They treat en-
cryption, decryption, and key generation as language prim-
itives. In contrast, we use cryptography implicitly to im-
plement high-level language features. Askarov’s language
appears superior for modeling cryptographic protocols, and
ours provides a cleaner and simpler interface for applica-
tions programming. The central technical difference is that
Askarov and colleagues ensure noninterference completely
by way of static checks; our noninterference result stems
from the harmonious interplay of static and dynamic check-
ing. Further comparison of the approaches is warranted.
Chothia, Duggan, and Vitek [12] examine a combina-
tion of DLM-style policies and cryptography, called the
Key-Based DLM (KDLM). Their system, like Askarov’s,
provides an extensive set of language level cryptographic