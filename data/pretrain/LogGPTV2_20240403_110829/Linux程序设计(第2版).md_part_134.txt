结束计时，因面使机器没有足够的时间来完成任何有意义的工作。Linux定义了许多与用户个人
权限有关的设置项目，最适合本例的是CAP_SYS_ADMIN。各种CAP_类定义都可以在
linux/capability.h文件里查到，里面还有对各种允许执行的操作的解释。请看下面这个函数定义：
int capable (int cap)
capable的作用是检查用户的权限，如果用户拥有与参数cap对应的能力，它将返回“1"，否
则返回“0”这个用法并不仅仅局限于ioctl，它们在内核里使用的相当频繁。
21.3.13文件操作poll：设备对进程的调度
文件操作poll指的是设备对应用程序进程的调度功能，它提供了一种让应用程序进程休眠在
设备上等待特定事件发生的机制。请不要把它与对设备状态的反复检查混为一谈，这两者完全
是两回事。使用poll系统调用是避免繁忙循环却又能够等待事件发生的有效手段。Schar设备在
-定程度上实现了进程调度功能、正好适用于我们的示例。poll功能的实现是很简单的。因为对
Schar设备的写操作总是成功的，所以我们只需要检查读操作时的情况。这里引人了一个
schar_poll_read等待队列。如果我们的数据池是空的，读数据进程就将休眠直到有足够的数据可
供读取为止。
static unsigned int schar_polltstruct file *file,
poll_table *wait)
t
unsigned int mask = 0;
poll_wait(file. &schar_poll_read. wait) :
/* if the pool contains data, a read wil1 succed */
if (schar_pool >0)
加入jaVa编程群：524621833
---
## Page 724
第21章设备驱动程序
nask |POLLOUT| POLLWRNORM;
/* & write always succeeds */
return mask:
这就是Schar设备里进程调度的全部工作！如果Schar设备的数据池长度还有一个上限，也很
容易再给它加上一个schar_poll_write等待队列-—只要对POLLOUT做类似的检查就可以做到。
头文件asm/poll.h里包含着各种可能的poll掩码，我们把其中一些标准的掩码列在表21-7里
表21-7
POLLIN
设备可以非限离地向后续的读操作提供数据
POLLRDNORM
POLLOUT
设备可以作阻塞地从后续的写操作接受数据
POLLWRNORN
POLLERR
出现一个错误
如果读者曾经在用户空间应用程序里使用过poll功能，就会比较熟悉这些掩码的功用，因为
从内核看去它们是很相似的。
动手试试：对Schar设备进行读写
好了，Schar设备的基本组成都介绍完了—我们马上要开始对定时器和内存方面的问题进
行议论了。但在继续学习之前，我们最好先动手试试，看它在使用中有什么样的表现。大家可
以从Wrox出版社的Web站点www.wrox.com下载到Schar设备驱动程序的源代码。你可以在自己
系统里的任何位置释放下载到的档案文件，Schar文件将释放到它的下级子目录modules/schar里。
1）我们首先要为Schar设备正确创建一个特殊文件。我们在开始时介绍的mknod命令就是干
这个用的。我们需要创建一个字符特殊文件，它的设备主编号是42，辅编号是0。
mknod/dev/achar c 420
2）进入保存着Schar模块源代码的子目录，输人执行make命令。编译结束时应该没有错误或
警告。结果模块也在同一个子目录里，名字是schar.o。用下面的命令把模块插入到内核：
#insnod schar.o
设备现在已经注册到内核，可以提供服务了。查看/proc/devices文件证实--下，这个方法我
们前面解释过。或者输入dmesg命令，看看Schar是怎样欢迎我们的。
dg|tai1-n1
schar: module loaded
3）现在向Schar设备拷贝一个文件，看看会出现什么情况。你可以任意选择拷贝文件，但如
果方便的话，最好先用一个小文本文件试试，要不就为此专门创建一个好了。最好另外打开一
个终端窗口，在里面重复执行dmesg命令查看Schar的输出。我们将把dmesg命令的输出列在每一
个命令的下面。
加入jaVa编程群：524621833
---
## Page 725
708
Linux程序设计
如果cp命令询问是否覆盖/dev/schar文件、直接回答yes。
Scp small_tile/dev/schar
schar: trying to write 4096 bytes.
schar: trying to write 3241 bytes. 11433 bytes in queue now
.8192 bytes in gueue now
schar: release
我们先进入的是schar_open，头两行信息就是它输出的。接下来进人schar_write。我们以每
次拷贝4096个字节的方式拷贝了总共11433个字节。写操作结束后，进人schar_release，文件的
写操作就全部完成了。
4）现在Schar设备里已经有数据可读了，我们再把它拷贝出来。
$cp/dev/nchax out_fi1e
schar: want to read 4096 bytes, 7337 bytes in queue
schar:want to read 4096 bytes,3241 bytes in queue
这一次的人口点还是schar_open，但接下来进人的将是schar_read。数据以4096个字节为单
位又被读了出来-在数据池中的数据少于cp命令所请求的之前已经成功地执行了两次每次4KB
字节的读操作。然后，我们让读数据进程（即cp命令）进人休眠状态，直到有更多数据可读为
止。我们后来失去了耐心，用“Ctrl-C”结束了读进程。“Ctrl-C”向进程发送了一个信号，结果
是产生了最后一行输出。
我们在上面例子里提供数据时每次是4KB字节，但要注意这并不是Schar设备规定，面是cp
命令的设计安排。我们完全能够以每次1字节或16KB字节的方式提供数据。
现在，我们既可以向Schar写人数据，又可以把数据读回来了。下面可以开始研究这个设备
驱动程序里的其他函数了。
动手试试：ioctl
1）确定Schar模块已经建立并加载。我们来在保存着Schar源代码的子目录里创建一个名为
schar_ioctl.c的文件。
include 
#include 
include 
#include *schar.h*
int main(int argc. char *argv[])
int fd= open(*/dev/schar*, O_RDwR);
/conpiainIf the open feiled */
if (fd==-1)（
perror(*open′):
return 1;
加入jaVa编程群：524621833
---
## Page 726
第21章设备驱动程序
709
if（ioct1(fd,SCHAR_TOGGLE_DE8UG)s-1)(
conplain if the ioctl call failed*/
perror(*ioctl*}:
return 2:
printf (*Schar debug toggledin*);
return 0;
2）用下面两个命令分别编译和执行这个程序：
S cc-o schar_ioctl schar_loctl.c
Schar debug toggled
./schar_ioct1
3）如果在加载Schar时激活了调试功能（这是它的缺省设置），它现在会停止输出打开、读
数据等操作时的通知性信息了。用刚才的cp命令再试试，然后检查dmisg命令输出。你将看到调
试信息将不再输出到内核缓冲区里去了。
21.3.14模块的参数
Linux提供了一个简单的办法使我们能够给模块添加上一些参数，这些参数可以在模块被
modprobe或insmod命令加载的时候给出来。Schar的大多数用户定义选项是用下面的办法安排设
置的：
MODULE_PARM(variable, type)
variable是准备设置的变量参数，而type是由一个长度值和该变量的类型组成的字符串。它
们可以放在模块里各函数以外的任何地方，但通常都会被放在文件开始全局变量的定义和声明
部分的后面。我们来看一个Schar模块里的例子：
HODULs_PARM(schar_debug, *1b*)
寸。比如说，“5-10b”表示这是-个字节尺寸的数组，它最少有5个元素，最多有10个元素。如
果没有给出长度数字，就认为其长度是1。在字节尺寸之外还定义了四种其他的类型，如表21-8
所示：
表21-8
h
short，短整数
1
int，整数
1
long，长整数
suring，字答串
还可以再给模块的各种参数加上一些描述性的文字。这个信息可以被modinfo命令提取出来，
让用户不需要研究模块的源代码就能够有机会了解模块都支持了哪些参数。
MODULE_PARM_DESC (schar_debug. *Enable debugging measages*) ;
加入jaVa编程群：524621833
---
## Page 727
710Linux程序设计
上面这一行描述了schar_debug变量的含义，这个描述会跟在MODULE_PARM声明内容的后
面显示给用户。最后，填写一一些整体性的介绍文字和程序作者，如下所示：
MODUIF_DESCRIPTION(*Sample character driver*):
MODULE_AUTHOR ("Jens AxbOe*) :
modinfo命令有几个命令行选项，你可以利用它们提取出自已需要的信息来。需要提大家
的是modutils-2.1.121里有一个缺陷，它会使信息一打印起来就循坏个没完没了。所以我们建议
大家弄个新一点的版本来。
动手试试：modinfo命令
我们来动手试试，把保存在Schar编译结果模块里的模块参数信息列出来。切换到保存着
Schar模块的子目录，然后输人如下所示的命令：
modinfo -p char.o
schar_nane string. description *Nane of device*
schar_debug byte. description *Enable debugging mensages*
schar_pool_min long. description *rizer fill pool minimum in bytes*
schar_timer_delay long. description *T:sex
ticks between timer fire
"p”选项的作用是让modinfo把可以在模块加载时传递给它的参数的资料打印出来一这包
括它的名字、类型以及各个选项的描述文字等。
21.3.15proc文件系统接口
proc文件系统工作起来和一个真正的文件系统非常相似，它也需要挂装，也要用标准的文件
操作命令来读写。从proc文件系统的某个文件里读出来的数据是由模块或内核即时生成的，我们
可以通过它们了解到系统运行时的统计资料和其他有关信息；而可写数据项可以用来改变驱动
程序的配置或行为。因此，为Schar设备在proc文件系统里添加一个条目将使我们能够直接从运
行着的模块那里检索信息，不再需要编写程序来发出ioct命令。
1.sysctl系统调用
注册一个条目的最佳地点是/proc/sys子目录下。这样该条目就可以用cat等文件类命令或者
sysctl系统调用来检索了。设备需要把自已注册到/dev子目录里去，我们的Schar就是这样做的
一它创建了一个名为“Schar”的下级子目录，在这个子日录里又创建了一个名字是“0”的条
目。注册条目是在一个由许多ctl_table结构组成的数组里定义的，这些结构依次叠加，直到整条
注册链结束为止。这个注册链从根开始（即/proc/sys/dev），依次是下级子目录注册条目
/proc/sys/dev/schar和最终的注册项/proc/sys/dev/schar/0。下面是Schar.c文件里与此有关的一段
代码：
/*aysetl entries */
static char schar_proc_string[SCHAR_MAX_SYSCTL];
static nt schar_read_procictl_table *ctl, int write,struct file *file,
static struct ctl_table_header
*schar_root_header = NULL;
void *buffer,size_t *lenp);
static cti_table schar_sysctl_table() = (
加入iaVa编程群：524621833
---
## Page 728
第21章设备驱动程序
711
{DEV_SCHAR_ENTRY,
/* binary id */
&schar_proc_string,
0
/* dara */
name
SCHAR_NAX_SYSCTL,
/*mcde*
max size of output */
0644,
sschar_read_proc ),
0,
/child-none/
(0}
/* ser up text */
static ct1_table schar_dir[] = (
{ DEV_SCKAR,
'schar",
NULL.
/* name */
0555.
( 01
schar_sysct1_table 1,
/* the child */
static etl_table schar_root_dir[]÷{
{CTL_DEV,
'dev",
/* nanc *
/proc/dev */
NULL,
0555.
0.
10 }
schar_dir ),
/* the child */
:
DEV_SCHAR_ENTRY是发出sysctI系统调用时使用的二进制ID编号，它必须是这个设备所
独有的。schar_proc_string是返回给读这个注册项的进程的数据，它的字节长度不能大于定义常
数SCHAR_MAX_SYSCTL的取值。具体实现过程是很简单的，把即时生成的统计信息拷贝到一
个专用的缓冲区（即schar_proc_string字符串）就完事了，这个用做缓冲区的字符韦是由
schar_read_proc在这次读注册项操作发生时生成的。
把这些表都设置好以后，这个条目就可以注册到proc文件系统上去了。注册操作将返回一个
ctl_table_header结构：如果内存不够，它会返回“o”--但这种情况极其少见。
schar_root_header = register_sysctl_table(schar_root_dir.0);
schar_root_dir->child->de->fill_inode t wschar_fill_inode:
最后一行设置了fill_inode。在进入和离开/proc/sys/dev/schar子目录的时候，赋值语句右边
的函数schar_fil_inode将对模块的使用计数做相应的增减。一个fill参数会传递到这个函数指明
与这个子目录关联着的inode结点是否正有人使用。增加使用计数的目的是使模块在这个子目录
被访问期间不会被移出内核，要不然就会制造出一个内核错误（也叫做“Oops"，我们将在调试
部分讨论这些间题）。
proc_dostring为我们完成其余的工作，把数据拷贝到用户空间并对文件的位置做相应的修改。
它不会对参数本身做什么修改，只是简单地把它们传递过去而已。
return proc_dostring (ctl,write, file,buffer,lenp) ;
从对内核中的proc和sysctl的支持方面看，Schar并不是很细心。如果这是一个成品模块，就
必须给这段代码实现加上一些必要的定义检查以确保安全。也就是说，我们需要用下面这个框
架把有关代码括起来：