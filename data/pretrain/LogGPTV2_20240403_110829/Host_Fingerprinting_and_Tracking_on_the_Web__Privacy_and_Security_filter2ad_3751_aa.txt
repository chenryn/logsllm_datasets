title:Host Fingerprinting and Tracking on the Web: Privacy and Security
Implications
author:Ting-Fang Yen and
Yinglian Xie and
Fang Yu and
Roger Peng Yu and
Mart&apos;ın Abadi
Host Fingerprinting and Tracking on the Web:
Privacy and Security Implications
Ting-Fang Yen1∗, Yinglian Xie2, Fang Yu2, Roger Peng Yu3, Mart´ın Abadi2†
1RSA Laboratories
2Microsoft Research Silicon Valley
3Microsoft Corporation
PI:EMAIL, {yxie, fangyu, rogeryu, PI:EMAIL}
Abstract
1 Introduction
Many web services aim to track clients as a basis
for analyzing their behavior and providing personalized
services. Despite much debate regarding the collection
of client information, there have been few quantitative
studies that analyze the effectiveness of host-tracking
and the associated privacy risks.
In this paper, we perform a large-scale study to quan-
tify the amount of information revealed by common host
identiﬁers. We analyze month-long anonymized datasets
collected by the Hotmail web-mail service and the Bing
search engine, which include millions of hosts across the
global IP address space. In this setting, we compare the
use of multiple identiﬁers, including browser informa-
tion, IP addresses, cookies, and user login IDs.
We further demonstrate the privacy and security im-
plications of host-tracking in two contexts. In the ﬁrst,
we study the causes of cookie churn in web services, and
show that many returning users can still be tracked even
if they clear cookies or utilize private browsing. In the
second, we show that host-tracking can be leveraged to
improve security. Speciﬁcally, by aggregating informa-
tion across hosts, we uncover a stealthy malicious attack
associated with over 75,000 bot accounts that forward
cookies to distributed locations.
∗This work was done while Ting-Fang was an intern at Microsoft
Research.
†Mart´ın Abadi is also afﬁliated with the University of California,
Santa Cruz.
It is in the interest of web services and ISPs to track
the mobility and usage patterns of client hosts. This
tracking allows them to understand user behavior for
supporting applications such as product suggestions, tar-
geted advertising, and online fraud detection. How-
ever, clients may not wish that their activities be tracked,
and can intentionally remove stored browser cookies or
choose not to perform user logins. The growing aware-
ness of privacy concerns is exempliﬁed by the recent
“do-not-track” initiative from the Federal Trade Com-
mission [15], which outlines guidelines to which service
providers must adhere in the collection and distribution
of client information.
Several works aim to improve the accuracy of host-
tracking by collecting detailed host information, such
as installed browser plug-ins and system fonts [20, 31]
or packet-level information that reveals subtle hardware
differences [28]. By comparison, few studies exist
on the effectiveness and privacy implications of host-
tracking. Previous work tends to be qualitative in na-
ture [29, 30] or limited to a single identiﬁer [20].
In this paper, we attempt to facilitate the debate re-
garding host-tracking by performing a large-scale study
to quantify the amount of identifying information re-
vealed by common identiﬁers. Such analysis is criti-
cal to both service providers and end users. For ex-
ample, service providers can determine where existing
identiﬁers are insufﬁcient and more sophisticated meth-
ods may be preferred. Users who do not wish to be
tracked can learn the circumstances in which they can
be identiﬁed accurately, so that they can take effective
measures to protect privacy. Our analysis is based on
month-long anonymized datasets from the Hotmail web-
mail service and the Bing search engine, including hun-
dreds of millions of users across the global Internet IP
address space. By characterizing hosts’ activities across
time using “binding windows”, we show that common
identiﬁers allow us to track hosts with high accuracy.
We further consider cases where users take initiatives
to preserve privacy, e.g., by clearing cookies or switch-
ing to private browsing mode. Speciﬁcally, we analyze
“one-time” cookies that do not return again in subse-
quent web requests, a phenomenon known as cookie
churn. These cookies appear to be anonymous. How-
ever, by applying our host-tracking results, we show that
a surprisingly large fraction can be recognized as be-
longing to returning users.
In addition to its privacy implications, we demon-
strate that host-tracking can also be applied to improve
security. We examine the mobility patterns of hosts trav-
eling across multiple IP ranges, and establish normal
user mobility proﬁles from aggregate host activities. In
doing so, we are able to analyze unusual activities, e.g.,
the use of anonymous routing networks, and develop
methods to detect attacks. In particular, our study uncov-
ers previously unknown suspicious cookie-forwarding
activities, which may have been adopted by attackers to
evade spamming detection.
The key ﬁndings of this paper include:
• We show that 60%-70% of HTTP user-agent
strings can accurately identify hosts in our datasets.
When augmented with coarse-grained IP preﬁx in-
formation, the accuracy can be improved to 80%,
similar to that obtained with cookies. User-agent
strings combined with IP addresses have an entropy
of 20.29 bits—higher than that of browser plug-ins,
screen resolution, timezone, and system fonts com-
bined [20].
• Applying our results to study cookie churn, we ﬁnd
that a service provider can recognize and track 88%
of the “one-time” cookies as corresponding to users
who later returned to the service. Among these
users, 33% made an effort to preserve their privacy,
either by clearing cookies through browser options
or utilizing private browsing mode.
• Employing general mobility patterns derived by
tracking hosts across network domains, we uncover
malicious behaviors where cookies are forwarded
from one IP address to distributed locations. In to-
tal, we identify over 75,000 bot Hotmail accounts
in this relatively stealthy attack that has not been
detected before.
Although our research relies on anonymized datasets
from Hotmail and Bing, the analyses that we describe
are a research effort only. Our goal is not to identify
or study speciﬁc individual activities, but rather to un-
derstand the patterns of the aggregated activities and to
explore their implications.
In the following, we ﬁrst describe the identiﬁers that
we study and our host-tracking methodology in Sec-
tion 2, and present the evaluation of those identiﬁers in
Section 3. We investigate the privacy and security impli-
cations of host-tracking in the context of cookie churn in
Section 4 and of host mobility in Section 5. Finally, we
describe related work in Section 6 and conclude in Sec-
tion 7.
2 Exploring Common Identiﬁers
Given a log of application-level events collected over
time, such as requests directed to a web server or user
logins to a service, our goal is to quantify the amount
of host-identifying information that is captured in iden-
tiﬁers within the log. Speciﬁcally, for an identiﬁer I,
which may take on a ﬁnite set FI = {f1, f2, . . . , fn} of
possible values (called ﬁngerprints), we are interested in
whether a ﬁngerprint fi uniquely corresponds to a single
host, among all hosts involved in the log. As we consider
only client hosts in our scenario, we use clients or hosts
interchangeably throughout the paper.
We assume the perspective of a passive observer of
identiﬁers within application-level events. The common
identiﬁers explored in this work include 1) user-agent
string (UA), 2) IP address, 3) browser cookie, and 4)
user login ID. We choose these identiﬁers because they
are not particular to our datasets, and are available in a
wide variety of service logs.
2.1 Host(cid:173)tracking Graph
Our host-tracking approach attempts to infer the pres-
ence of a host at an IP address during a certain time in-
terval. Upon observing a ﬁngerprint f (and only f ) that
appears at an IP address A over a time interval ∆t, we
can infer a “binding window” for f . Events occurring
within ∆t at A can then be attributed to the host corre-
sponding to f . (Hosts behind NATs/proxies can compli-
cate matters; we quantify the occurrence of such hosts
in our data in Section 3.3.)
Figure 1 illustrates how we infer the binding win-
dows. In this example, user-agent strings (UA) are the
identiﬁers, and the events are queries to a web search
engine. A ﬁngerprint UA1 appears in two consecutive
Figure 1. Binding windows identiﬁed on one
IP.
Figure 2. Example of a host(cid:173)tracking graph.
Bars with different patterns denote binding
windows corresponding to different ﬁnger(cid:173)
prints.
search queries at time t1 and t2, followed by queries at
time t3, t4, and t5 with a different ﬁngerprint UA2. Thus
we can identify binding windows corresponding to two
different “hosts” on this IP: one spanning the time range
[t1, t2], and another spanning [t3, t5]. Having exam-
ined all search query events, we can construct a host-
tracking graph as in Figure 2. Note that a ﬁngerprint
may be associated with multiple binding windows (since
the host may not be up all the time) and across different
IP addresses (e.g., because of DHCP). We refer to the
host-tracking graph that represents hosts by identiﬁer I
as GI .
A similar concept of host-tracking graph was also
used by HostTracker [38] to support Internet account-
ability. HostTracker groups together user login IDs that
are likely to be associated with the same host, e.g., fam-
ily members that share a computer at home. It also ﬁlters
events related to bots and large proxies. In contrast to
this previous work, we make a broader use of the host-
tracking graph (with a variety of common identiﬁers),
and we apply host-tracking to the cookie-churn study (in
Section 4) and the host-mobility analysis (in Section 5).
2.2 Datasets
The data for our study includes a month-long user lo-
gin trace collected by the Hotmail web-mail service in
August 2010. The trace contains coarse-grained infor-
mation about the OS and browser type (e.g., Windows,
Mozilla), the IP address from which the login was made,
the time of the login event, and the anonymized user ID.
In the following, we refer to this as the Webmail dataset.
We also obtained a month-long dataset consisting of
search query events directed to the Bing search engine
in August 2010. This data includes the ﬁne-grained
user-agent string from the HTTP header (anonymized
via hashing), the IP address from which the query was
issued, the time of the query, the anonymized cookie
ID assigned by the search engine, and the date that the
cookie ID was created. Speciﬁcally, the anonymized
cookie ID is a persistent identiﬁer that does not change
over time, if users do not clear cookies or use private
browsing. We refer to this as the Search dataset. As part
of the processing performed by the Bing search engine,
events generated by known bots are ﬁltered in advance.
To validate our client-tracking approach, we lever-
aged a month-long sampled log of Windows Update
events, also from August 2010. This data contains the
time at which the update was performed, the IP address,
and the anonymized hardware ID that is unique to the
host. This is the Validation dataset.
Table 1 shows the ﬁelds and the total number of
unique IPs observed in each dataset. All three datasets
include tens to hundreds of millions of IP addresses,
spanning a large IP address space.
The published privacy policies for Hotmail, Bing,
and Windows Update address the storage, use, sharing,
and retention of data collected in the course of the oper-
ation of these services. In particular, they indicate that
Microsoft may employ this data for analyzing trends and
for operating and improving its products and services,
as we aim to do with this work. Since the datasets are
sensitive, they are not publically available for further re-
search.
2.3 Validation and Metrics
Without ground truth for the host-IP mappings, we
evaluate a host-tracking graph GI by overlapping it with
the Validation dataset. If a ﬁngerprint is able to correctly
Dataset
Webmail
Search
Validation
User-agent information
IP address
Timestamp
ID
Unique IP addresses
OS and browser type
User-agent string (UA)
N/A
Yes
Yes
Yes
Yes
Yes
Yes
User ID
Cookie ID
Hardware ID
308 million
131 million
74 million
Table 1. Fields in each dataset.
track a host, its bindings should overlap only with Win-
dows Update events associated with a single hardware
ID. Conversely, a hardware ID is also expected to over-
lap with bindings associated with only one ﬁngerprint.
We quantify the accuracy of an identiﬁer using pre-
cision and recall. Let hidcount(f ) denote the number
of hardware IDs to which a ﬁngerprint f corresponds,
and fpcount(m) the number of ﬁngerprints to which a
hardware ID m corresponds. Precision is deﬁned as the
percentage of ﬁngerprints that correspond to one host
(i.e., one hardware ID), while recall is the percentage of
hosts that correspond to one ﬁngerprint.
PrecisionI =
RecallI =
| {f : hidcount(f ) = 1, f ∈ FI } |
| FI |
| {m : fpcount(m) = 1, m ∈ MI} |
| MI |
FI is the ﬁnite set of values that identiﬁer I takes in
our dataset, i.e., the ﬁngerprints (after some initial ﬁlter-
ing, as described below). MI is the set of hardware IDs
that overlap with the host-tracking graph GI . Roughly
speaking, precision quantiﬁes how accurate an identiﬁer
is at representing a host. Recall quantiﬁes how well an
identiﬁer is able to track the events associated with the
corresponding host in a log.
We also measure the entropy of an identiﬁer, HI ,
which is the amount of information identiﬁer I contains
that can distinguish hosts. The entropy is deﬁned as
HI = − X
Pr(f ) log2(Pr(f ))
f ∈FI
where Pr(f ) is the probability of observing ﬁngerprint
f in the application log. A higher entropy indicates a
smaller probability that any two clients are associated
with the same ﬁngerprint.
In our validation, we consider only those ﬁngerprints
that overlap with more than one Windows Update event,
and only those hardware IDs that overlap with more than
one application-level event pertaining to our identiﬁers.
These restrictions allow us to focus on the portion of
data that we can validate, though they can be biased to
those clients that access the services consistently (i.e.,
multiple times and with the same identiﬁers). Similarly,
because of the datasets available to us, our study is based
on clients of Microsoft services. We acknowledge that
any dataset will be incomplete and possibly biased.
3 Client-Tracking Results
In this section, we construct host-tracking graphs us-
ing the common identiﬁers user-agent string (UA), IP
address, cookie ID, and user login ID, and evaluate
their precision and recall. In particular, we explore the
distinguishing power of UA by examining the browser
anonymity sets. We also measure the impact of prox-
ies and NATs in our study in Section 3.3, and describe
the increased accuracy and conﬁdence of tracking stable
hosts in Appendix A.
Our analysis focuses on host-tracking within each
network domain, derived using the BGP preﬁx entries
obtained from RouteViews [9]. We investigate the oc-
currences of identiﬁers at multiple network locations in
Section 5, in which we also study the security implica-
tions of host-tracking.
3.1 Precision and Recall
Table 2 presents our results on host-tracking. Af-
ter overlapping the Validation dataset with the host-
tracking graphs, the number of unique ﬁngerprints and
hardware IDs included in our evaluation is still large—
on the order of millions.
Several observations are evident from Table 2. First,
browser information (UA) alone can identify hosts quite
well. Its 62.01% precision is perhaps surprising, as UA
strings are commonly regarded as providing insufﬁcient
information to reveal host identities. Second, a com-
bination of UA with the IP address (i.e., ﬁngerprinting
hosts by distinct (UA, IP) pairs) can boost the precision
up to 80.62%. In fact, combining UA with only the IP
preﬁx is sufﬁcient to achieve approximately the same re-
sult as with UA+IP. This suggests that anonymization
techniques that store the IP preﬁx may still retain dis-
tinguishing information. Third, cookie IDs offer only
slightly better precision and recall than UA+IP. The
inaccuracies of cookie IDs can be partly attributed to
cookie churn, a phenomenon we study in more detail
in Section 4.
Identiﬁer I
UA
UA, IP address
UA, /24 IP preﬁx
Cookie ID
Cookie ID (with HostTracker)
User ID (with HostTracker)
Precision (%)
62.01%
80.62%
79.33%
82.35%
79.74%
92.82%
Recall (%)
72.11%
68.84%
69.43%
68.64%
99.13%
93.51%
Fingerprint count Hardware ID count
3,073,690
1,771,907
1,772,104
1,375,074
1,001,450
4,820,116
254,762
1,685,416
1,652,546
1,340,635
713,110
4,608,980
Table 2. Common identiﬁers in host(cid:173)tracking, evaluated using the Validation dataset.
As another method to make use of the identiﬁers,
we also apply HostTracker [38] to the cookie IDs and
user IDs from our Search and Webmail datasets, respec-
tively. In the former case, the clients are now tracked
by a group of correlated cookies, e.g., those belonging
to two browsers running on a machine in parallel.
In
the latter case, user login IDs that frequently appear to-
gether, e.g., family members that share a computer at
home, are used to track clients. We ﬁnd user IDs achiev-
ing high precision and recall (over 92%), demonstrating
that they are strongly tied to individual hosts.
Since HostTracker yields relatively high precision
and recall with user IDs, we have also evaluated the
other identiﬁers against user IDs (instead of hardware
IDs). Even though hardware IDs and user IDs overlap
with different portions of the datasets, we obtain results
consistent with those of Table 2.
To summarize, we show that common identiﬁers can
track hosts reasonably well, particularly when they are
used in combination.