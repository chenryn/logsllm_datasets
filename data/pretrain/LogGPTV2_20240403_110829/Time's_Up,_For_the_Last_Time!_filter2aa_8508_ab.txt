    int i;
    for (i = 0; i pid = child_pid;
        p->stdin  = child_in[PIPE_WRITE];  // Parent wants to write to subprocess child_in
        p->stdout = child_out[PIPE_READ];  // Parent wants to read from subprocess child_out
        p->stderr = child_err[PIPE_READ];  // Parent wants to read from subprocess child_err
    }
}
// ----------------------------------------------------------------------------------------------------------
#define BUFFER_LENGTH 512
int main(int argc, char* argv[])
{
    struct subprocess   proc;
    ssize_t             nbytes;
    char*               newline_location = NULL;
    size_t              write_len;
    int                 status;
    int64_t             result;
    int                 total_bytes_read = 0;
    sigset_t            intmask;
    // We have three different buffers, allowing us to print the full details at the end
    char                expr_buffer[BUFFER_LENGTH]  = {0};
    char                res_buffer[BUFFER_LENGTH]   = {0};
    char                buffer[BUFFER_LENGTH]       = {0};
    size_t              skip_len = sizeof("Challenge: ") - 1;
    char*               child_argv[] = {"./times-up-one-last-time", NULL};
    // Block alarm signal
    if (sigemptyset(&intmask) == -1)
    {
        perror("Failed to initialize signal set");
        exit(EXIT_FAILURE);
    }
    if (sigaddset(&intmask, SIGALRM) == -1)
    {
        perror("Failed to add signal to set");
        exit(EXIT_FAILURE);
    }
    if (sigprocmask(SIG_BLOCK, &intmask, NULL) == -1)
    {
        perror("Failed to block signal set");
        exit(EXIT_FAILURE);
    }
    printf("Alarm blocked!\n");
    // Fork child process
    call(child_argv, &proc);
    // Read expression from child STDOUT
    nbytes = read(proc.stdout, expr_buffer, sizeof(expr_buffer) - 1);
    if (nbytes = sizeof(res_buffer)) )
    {
        perror("Could not sprintf result"); 
        exit(EXIT_FAILURE);
    }
    // Write answer back to the child processes' STDIN
    nbytes = write(proc.stdin, res_buffer, write_len);
    if (nbytes != write_len)
    {
        perror("Could not write to stdin"); 
        exit(EXIT_FAILURE);
    }
    // Read all output from child process STDOUT
    while ((nbytes = read(proc.stdout, buffer + total_bytes_read, sizeof(buffer) - total_bytes_read - 1)) > 0)
    {
        total_bytes_read += nbytes;
    }
    buffer[total_bytes_read] = '\0';
    // Print details
    printf("Expression: %s\n", &expr_buffer[skip_len]);
    printf("Result: %s\n", res_buffer);
    printf("%s", buffer);
    // Cleanup and wait for child to exit
    close_fd(proc.stdin); 
    close_fd(proc.stdout); 
    close_fd(proc.stderr); 
    waitpid(proc.pid, &status, 0);
    return EXIT_SUCCESS;
}
```
Ouput:
```console
root@kali:/media/sf_CTFs/pico/Times_Up_For_the_Last_Time# gcc main.c -o tuftlt
root@kali:/media/sf_CTFs/pico/Times_Up_For_the_Last_Time# scp tuftlt PI:EMAIL:/home/dvdalt
tuftlt                                                                                100%   17KB   5.8KB/s   00:03
root@kali:/media/sf_CTFs/pico/Times_Up_For_the_Last_Time# ssh PI:EMAIL
dvdalt@pico-2019-shell1:~$ cd /problems/time-s-up--for-the-last-time-_1_a7830af9d51a361ee5d3b9eece69c22f
dvdalt@pico-2019-shell1:/problems/time-s-up--for-the-last-time-_1_a7830af9d51a361ee5d3b9eece69c22f$ ~/tuftlt
Alarm blocked!
Expression: (((((1278126002) f (1043275798)) x ((-464689218) - (322949368))) - (((1447574425) & (-1224253887)) x ((-1216973929) o (116652416)))) % ((((1762630346) % (1604569453)) * ((-592128242) f (778774872))) r (((783785328) & (1511276257)) ^ ((-2081807565) - (-502728913)))))
Result: -904291002
picoCTF{And now you can hack time! #2e0a37d1}
Solution? Congrats! Here is the flag!
```