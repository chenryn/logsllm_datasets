图片，该搜索关键词通过一个简单HTTP请求发送到Bing和Flickr服务。
用户界面的设计来自Visual Studio设计器，如图15-1所示。在屏幕上方是一个文本输
入框，紧接着是几个开始搜索按钮或清除结果列表的按钮。左下方的控制区是一个
ListBox控件，用于显示所有找到的图片。右侧是一个Image控件，用更高的分辨率显示
ListBox控件中被选择的图片。
图15-1
为了能够理解示例应用程序，先从包含几个辅助类的类库AsyncLib开始。这些类用于
该WPF应用程序。
SearchItemResult类表示结果集合中的一项，用于显示图片、标题和图片来源。该类
仅定义了简单属性：Title、Url、ThumbnailUrl和Source。ThumbnailIUrl属性用于引用缩略
图片，Url属性包含到更大尺寸图片的链接。Title属性包含描述图片的文本。BindableBase
是SearchItemResult的基类。该基类通过实现INotifyPropertyChanged接口实现通知机制，
WPF用其通过数据绑定进行更新（代码文件AsyncLib/SearchItemResult.cs）：
    namespace Wrox.ProCSharp.Async
    {
      public class SearchItemResult : BindableBase
      {
        private string _title;
        public string Title
        {
        get { return _title; }
        set { SetProperty(ref _title, value); }
        }
        private string _url;
        public string Url
        {
        get { return _url; }
        set { SetProperty(ref _url, value); }
        }
        private string _thumbnailUrl;
        public string ThumbnailUrl
        {
        get { return _thumbnailUrl; }
        set { SetProperty(ref _thumbnailUrl, value); }
        }
        private string _source;
        public string Source
        {
        get { return _source; }
        set { SetProperty(ref _source, value); }
        }
      }
    }
SearchInfo类是另外一个用于数据绑定的类。SearchTerm属性包含用于搜索该类型图
片的用户输入。List属性返回所有找到的图片列表，其类型为SearchItemResult（代码文件
AsyncLib/SearchInfo.cs）：
    using System.Collections.ObjectModel;
    namespace Wrox.ProCSharp.Async
    {
      public class SearchInfo : BindableBase
      {
        public SearchInfo()
        {
        _list = new ObservableCollection();
        _list.CollectionChanged += delegate { OnPropertyChanged("List"); };
        }
        private string _searchTerm;
        public string SearchTerm
        {
        get { return _searchTerm; }
        set { SetProperty(ref _searchTerm, value); }
        }
        private ObservableCollection _list;
        public ObservableCollection List => _list;
      }
    }
在XAML代码中，TextBox控件用于输入搜索关键词。该控件绑定到SearchInfo类型的
SearchTerm属性。几个按钮控件用于激活事件处理程序。例如，Sync按钮调用
OnSearchSync方法（代码文件AsyncPatternsWPF/MainWindow.xaml）：
      Clear
      Sync
      Async
      Async Event
      Task Based Async
在XAML代码的第二部分包含一个ListBox控件。为了在ListBox控件中进行特殊显
示，使用了ItemTemplate。每个ItemTemplate包含两个TextBlock控件和一个Image控件。该
ListBox控件绑定到SearchInfo类的List属性，ItemTemplate中控件的属性绑定到
SearchItemResult类型的属性：
现在来看看BingRequest类。该类包含如何向Bing服务发出请求的一些信息。该类的
Url属性返回一个用于请求图片的URL字符串。请求字符串由搜索关键词、请求图片的数
量（Count）和跳过图片的数量（Offset）构成。Bing是需要身份认证的。用户ID用AppId
来定义，并使用返回Network-Credential对象的Credentials属性。要运行应用程序，需要使
用Windows Azure Marketplace注册，并申请一个Bing Search API。编写本书时，Bing提供
的免费事务每月多达5000次，这足够运行示例应用程序。每次搜索是一个事务。注册Bing
Search API的链接为https://datamarket.azure.com/dataset/bing/search。注册获取AppID后，需
要复制AppID，将其添加到BingRequest类中。
用创建的URL将请求发送到Bing之后，Bing会返回一个XML字符串。BingRequest类
的Parse方法会解析该XML字符串，并返回SearchItemResult对象的集合（代码文件
AsyncLib/BingRequest.cs）：
  注意： BingRequest类和FlickrRequest类的Parse方法利用了LINQ to XML。第
27章将讨论如何使用LINQ to XML。
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Xml.Linq;
    namespace Wrox.ProCSharp.Async
    {
  public class BingRequest : IImageRequest
  {
    private const string AppId = "enter your Bing AppId here";
    public BingRequest()
    {
    Count = 50;
    Offset = 0;
    }
    private string _searchTerm;
    public string SearchTerm
    {
    get { return _searchTerm; }
    set { _searchTerm = value; }
    }
    public ICredentials Credentials => new NetworkCredentials(AppId, AppId);
    public string Url =>
    $"https://api.datamarket.azure.com/" +
        "Data.ashx/Bing/Search/v1/Image? Query=%27{SearchTerm}%27&" +
        "$top={Count}&$skip={Offset}&$format=Atom";
    public int Count { get; set; }
    public int Offset { get; set; }
    public IEnumerable Parse(string xml)
    {
    XElement respXml = XElement.Parse(xml);
    XNamespace d = XNamespace.Get(
      "http://schemas.microsoft.com/ado/2007/08/dataservices");
    XNamespace m = XNamespace.Get(
      "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata");
    return (from item in respXml.Descendants(m + "properties")
            select new SearchItemResult
            {
              Title = new string(item.Element(d + "Title").
                Value.Take(50).ToArray()),
              Url = item.Element(d + "MediaUrl").Value,
              ThumbnailUrl = item.Element(d + "Thumbnail").
                Element(d + "MediaUrl").Value,
              Source = "Bing"
            }).ToList();
    }
   }
    }
BingRequest类和FlickrRequest类都实现了IImageRequest接口。该接口定义了
SearchTerm属性、Url属性和Parse方法，Parse方法很容易迭代两个图片服务提供商返回的
结果（代码文件AsyncLib/IImageRequest.cs）：
    using System;
    using System.Collections.Generic;
    using System.Net;
    namespace Wrox.ProCSharp.Async
    {
      public interface IImageRequest
      {
        string SearchTerm { get; set; }
        string Url { get; }
        IEnumerable Parse(string xml);
        ICredentials Credentials { get; }
      }
    }
FlickrRequest和BingRequest类非常相似。它仅是用搜索关键词创建了不同的URL来请
求图片，Parse方法的实现也不同，因为从Flickr返回的XML与从Bing返回的XML不同。和
Bing一样，也需要为Flickr注册一个AppId，注册链接为
http://www.flickr.com/services/apps/create/ apply/。
    using System.Collections.Generic;
    using System.Linq;
    using System.Xml.Linq;
    namespace Wrox.ProCSharp.Async
    {
      public class FlickrRequest : IImageRequest
      {
        private const string AppId = "Enter your Flickr AppId here";
        public FlickrRequest()
        {
        Count = 30;
        Page = 1;
        }
        private string _searchTerm;
        public string SearchTerm
        {
        get { return _searchTerm; }
        set { _searchTerm = value; }
        }
        public string Url =>
          $"http://api.flickr.com/services/rest? " +
              "api_key={AppId}&method=flickr.photos.search&content_type=1&" +
              "text={SearchTerm}&per_page={Count}&page={Page}";
        public ICredentials Credentials => null;
        public int Count { get; set; }
        public int Page { get; set; }
        public IEnumerable Parse(string xml)
        {
        XElement respXml = XElement.Parse(xml);
        return (from item in respXml.Descendants("photo")
              select new SearchItemResult
              {
                Title = new string(item.Attribute("title").Value.
                    Take(50).ToArray()),
                Url = string.Format("http://farm{0}.staticflickr.com/" +
                    "{1}/{2}_{3}_z.jpg",
                  item.Attribute("farm").Value, item.Attribute("server").Value,
                  item.Attribute("id").Value, item.Attribute("secret").Value),
                ThumbnailUrl = string.Format("http://farm{0}." +
                    "staticflickr.com/{1}/{2}_{3}_t.jpg",
                    item.Attribute("farm").Value,
                    item.Attribute("server").Value,
                    item.Attribute("id").Value,
                    item.Attribute("secret").Value),
                Source = "Flickr"
              }).ToList();
        }
      }
    }
现在，只需要连接到WPF应用程序和类库中的类型。在MainWindow类的构造函数
中，创建了SearchInfo实例，并将窗口的DataContext属性设置为这个实例。现在，可以用
之前的XAML代码进行数据绑定，如下所示（代码文件
AsyncPatternsWPF/MainWindow.xaml.cs）：
    public partial class MainWindow : Window
    {
      private SearchInfo _searchInfo = new SearchInfo();
      public MainWindow()
      {
        InitializeComponent();
        this.DataContext = _searchInfo;
      }
      //. . .
MainWindow类也包含一个辅助方法GetSearchRequests，它返回一个由BingRequest类
型和FlickrRequest类型构成的IImageRequest对象集合。如果仅注册一个服务，则可以修改
代码，仅返回注册的那个服务。当然，也可以创建IImageRequest类型的其他服务，例
如，使用Google或Yahoo。然后，把这些请求类型添加到返回的集合中：
    private IEnumerable GetSearchRequests()
    {
      return new List
      {
      new BingRequest { SearchTerm = _searchInfo.SearchTerm },
      new FlickrRequest { SearchTerm = _searchInfo.SearchTerm}
      };
    }
15.2.1 同步调用
现在，一切准备就绪，开始同步调用这些服务。Sync按钮的单击处理程序
OnSearchSync，遍历GetSearchRequests方法返回的所有搜索请求，并且用Url属性发出
WebClient类的HTTP请求。DownloadString方法会阻塞，直到接收到结果。得到的XML赋
给resp变量。通过Parse方法分析XML内容，返回一个SearchItemResult对象的集合。然
后，集合的每一项添加到_searchInfo中包含的列表（代码文件
AsyncPatternsWPF/MainWindow.xaml.cs）：
    private void OnSearchSync(object sender, RoutedEventArgs e)
    {
      foreach (var req in GetSearchRequests())
      {
        var client = new WebClient();
        client.Credentials = req.Credentials;
        string resp = client.DownloadString(req.Url);
        IEnumerable images = req.Parse(resp);
        foreach (var image in images)