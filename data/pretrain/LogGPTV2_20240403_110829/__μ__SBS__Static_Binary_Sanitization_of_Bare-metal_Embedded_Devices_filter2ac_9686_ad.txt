### Branch Instruction Overhead and Performance Evaluation

In the mapping table, branch instructions can introduce runtime overhead. This section evaluates the execution overhead of rewritten binaries without sanitization. Additionally, we measure the execution overhead introduced by our sanitization procedure and the processing time of µSBS itself.

Each firmware in our benchmark was instrumented and executed twenty times. For instance, we executed the original and instrumented LCD_Display firmware for displaying five images, repeating this process twenty times. The results are presented in Figure 4.

The average slowdown for our benchmark without sanitization is 8.5%. The second bar in Figure 4 shows the execution overhead of instrumented firmware with the µSBS sanitizer. This increases the execution overhead to an average of 32.5% compared to rewritten firmware without sanitization. Memory-intensive firmwares such as Audio-Playback, mbed-TLS, and ST-PLC exhibit higher overheads due to the large number of memory accesses that become more expensive after instrumentation and checking.

While these overheads are significant, they are reasonable because they are only incurred during security testing and not on deployed devices.

### Processing Time of µSBS

Figure 5 illustrates the time taken by µSBS to rewrite and sanitize firmware binaries. As expected, larger binaries require more processing time. On average, µSBS spends 5.72 seconds on the binaries in our benchmark. This is a promising result compared to state-of-the-art fault observation methods [42]. The efficiency of µSBS makes it a practical tool for large-scale sanitization of firmware binaries.

### Related Work

This section provides an overview of the state-of-the-art in fault observation and binary rewriting.

#### Fault Observation

Muench et al. [42] proposed a method for fault observation in embedded systems using six heuristics, such as heap object tracking. They implemented these heuristics on top of the Avatar [61], PANDA [29], and Boofuzz [2] frameworks. However, these heuristics rely on various types of information, including memory accesses, memory mappings, executed instructions, register states, and allocation and deallocation functions. This information must be extracted from the target binary's Hardware Abstraction Layer (HAL), and the method is only applicable when the HAL is available to the analyst. Consequently, HALucinator [26] is not mature enough for large-scale stripped firmware instrumentation.

BinRec [17] is a dynamic binary rewriter that uses multiple dynamic analysis techniques to lift binaries into LLVM IR. Built on S2E [25] and QEMU virtual machine [21], BinRec does not support bare-metal firmware.

Several static binary rewriting approaches transform binaries before execution. These methods differ in how they modify binaries while preserving functionality and semantics. Solutions like Bistro [27] and STIR [56] redirect control flow to trampoline code containing new instructions. Trampoline-based rewriters maintain application semantics but at the cost of performance and memory penalties.

Uroboros [55] uses heuristics to recognize references among integer values and convert them into assembler labels to generate relocatable assembly code. Ramblr [54], built on angr [49, 50], improves Uroboros with static analyses and heuristics. However, heuristic-based approaches suffer from false positives and negatives, leading to broken reassembled binaries. RetroWrite [28] and Egalito [59] use relocation information, which is only available in position-independent codes, making them impractical for statically linked firmware. Multiverse [20] disassembles at each offset to produce a superset of instructions, but this approach has substantial code size overhead (763% on SPECint 2006 benchmarks) and does not support statically linked binaries.

All the above static approaches are designed for x86 architecture. RevARM [36] is the only static binary rewriter for ARM-based mobile applications. It lifts binary code to a higher-level intermediate representation (IR) and performs instrumentation at that level. However, lifting a binary to IR often misses application semantics and actual control flows. RevARM also uses the Uroboros technique, which is impractical for non-trivial applications. Table 4 provides a subjective comparison of state-of-the-art binary rewriting approaches and µSBS.

#### Binary Rewriting

Binary rewriting involves modifying one binary into another, optionally inserting new instructions to provide new features or behaviors. Methods can be categorized into dynamic and static approaches. Dynamic methods [22, 40, 43] transform stripped binaries loaded into memory during execution. However, they are impractical for fault observation on bare-metal devices due to high performance overhead and special software/hardware requirements.

HALucinator [26] is the state-of-the-art approach for dynamic binary instrumentation of bare-metal devices. Despite its significant performance penalty, HALucinator supports only a few microcontrollers and emulates firmware using a Hardware Abstraction Layer (HAL).

### Discussion

#### Limitations and Future Work

**Supported Microcontrollers:** This paper focuses on a specific subclass of embedded microcontrollers running single, statically linked firmware—bare-metal firmware. We do not handle dynamically loaded code, which requires dynamic instrumentation.

**Supported CPU Architectures:** The current implementation of µSBS supports ARMv7-M architecture, the most widely used core for embedded systems [35]. Our platform-independent approach can support other architectures like x86 with minor engineering efforts.

**Fuzzing:** Although the current µSBS implementation focuses on observing faulty states due to memory corruptions, it can be extended and integrated with fuzzing methods to uncover new bugs in bare-metal firmware. Specifically, µSBS sanitizer can improve the bug-finding ability of fuzzers [47, 63] by guiding the input generation process towards triggering sanitizer checks. Improvements in IoT fuzzing [31, 32, 62] are orthogonal to this work and will be addressed in future research.

**Sanitization:** µSBS can observe a wide array of memory corruptions by applying memory safety policies. The current implementation is inspired by AddressSanitizer and Valgrind’s Memcheck policies. Other sanitization techniques can be developed on top of µSBS for observing faulty states caused by different types of memory corruption vulnerabilities.

### Conclusion

Memory corruption vulnerabilities are common in IoT firmware and can cause significant damage to bare-metal embedded devices. In this paper, we investigate hardware security features (MMU, MPU, and DEP) in a representative selection of IoT SoC families. Our analysis shows that IoT fuzzing lags behind general-purpose fuzzing. We have developed and demonstrated µSBS, the first fully automatic approach for observing faulty states in bare-metal firmware. µSBS combines static binary instrumentation and sanitization to validate memory accesses, improving fault observation. We evaluated µSBS using a fault observation benchmark and 11 real firmware binaries. Our approach correctly sanitized all firmware binaries with reasonable runtime overhead and size expansion, discovering the same set of vulnerabilities as the state-of-the-art. To encourage further research and reproducibility, we open-source µSBS at https://github.com/pwnforce/uSBS.

### Acknowledgments

This research is supported by the research fund of KU Leuven and imec, a research institute founded by the Flemish government. The work of the third author is partially supported by the EU H2020-SU-ICT-03-2018 Project No. 830929 CyberSec4Europe. We thank anonymous reviewers for their helpful comments and criticisms.