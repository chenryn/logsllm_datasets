# Function Hooking for macOS and Linux

## Introduction
- **Speaker:** Joe Damato
- **Contact:** @joedamato
- **Website:** timetobleed.com
- **Slides:** Available at timetobleed.com (free jmpesp)
- **Disclaimer:** I am not a security researcher. You can call me a script kiddie: @joedamato, laughinglarry.com, slayerinc.com, dbgrady.files.wordpress.com

## Assembly Syntax
- The assembly code in this presentation is in AT&T syntax.

## What is an ABI?
- **ABI (Application Binary Interface):** A set of conventions that govern how functions are called, how data is stored, and how the stack is managed.
- **Resources:**
  - thomasgroup.com
  - arianlim.wordpress.com
  - tandemfs.org
  - topatoco.com

## System V ABI
- **System V ABI (271 pages)**
- **Supplements:**
  - **AMD64 Architecture Processor Supplement (128 pages)**
  - **Intel386 Architecture Processor Supplement (377 pages)**
  - **MIPS, ARM, PPC, and IA-64 Supplements**

### macOS x86-64 Calling Convention
- Based on the **System V AMD64 Architecture Processor Supplement**
- **Alignment:**
  - The end of the argument area must be aligned on a 16-byte boundary.
  - Example: `and $0xfffffffffffffff0, %rsp`
- **Function Arguments:**
  - Integer class items: `%rdi, %rsi, %rdx, %rcx, %r8, %r9`
  - Other types are passed on the stack (like on i386).
- **Register Usage:**
  - Registers are either caller or callee saved.

## Object File and Library Formats
- **ELF Objects:**
  - **Headers:**
    - ELF header (describes the ELF object)
    - Program headers (describes segments)
    - Section headers (describes sections)
  - **Libraries:**
    - libelf (useful for extracting information from ELF objects)
  - **Sections:**
    - `.text` - Code
    - `.plt` - Stub code for resolving absolute function addresses
    - `.got.plt` - Absolute function addresses used by `.plt` entries
    - `.debug_info` - Debugging information
    - `.gnu_debuglink` - Checksum and filename for debug info
    - `.dynsym` - Maps exported symbol names to offsets
    - `.dynstr` - Stores exported symbol name strings
    - `.symtab` - Maps symbol names to offsets
    - `.strtab` - Symbol name strings
  - **Resources:**
    - tandemfs.org
    - steverubel.typepad.com
    - en.wikipedia.org

- **Mach-O Objects:**
  - **Load Commands:**
    - Header (describes the Mach-O object)
    - Load commands (describe layout and linkage info)
    - Segment commands (describe sections)
  - **APIs:**
    - dyld(3) (describes APIs for touching Mach-O objects)
  - **Sections:**
    - `__text` - Code
    - `__symbol_stub1` - List of `jmpq` instructions for runtime dynamic linking
    - `__stub_helper` - Stub code for resolving absolute function addresses
    - `__la_symbol_ptr` - Absolute function addresses used by symbol stubs
  - **Symbol Tables:**
    - `LC_SYMTAB` - Holds offsets for symbol table and string table
    - `LC_DYSYMTAB` - List of 32-bit offsets into `LC_SYMTAB` for dynamic symbols
  - **Resources:**
    - developer.apple.com
    - vanachteren.net

## Tools for Analyzing Binaries
- **nm:**
  - Lists symbols and their values.
  - Example: `nm /usr/bin/ruby`
- **objdump:**
  - Dumps object file information.
  - Example: `objdump -D /usr/bin/ruby`
- **readelf:**
  - Displays information about ELF files.
  - Example: `readelf -a /usr/bin/ruby`
- **otool:**
  - Displays information about Mach-O files.
  - Example: `otool -l /usr/bin/ruby`
- **strip:**
  - Removes sections from binaries.
  - Be cautious: Stripping essential sections can break the binary.

## Calling Functions
- **Example:**
  - `callq *%rbx`
  - `callq 0xdeadbeef`
- **Anatomy of a Call:**
  - Instruction address
  - Call opcode
  - 32-bit displacement to the target function from the next instruction
  - Example: `e8 c1 36 02 00 callq 4363dc`

## Hooking Functions
- **Overwriting Displacement:**
  - Overwrite the displacement so that calls to `a_function` actually call a different function.
  - Example:
    ```c
    int other_function() {
        /* do something good/bad */
        return a_function();
    }
    ```
- **Pseudo Code:**
  ```c
  while (are_moar_bytes()) {
      curr_ins = next_ins;
      next_ins = get_next_ins();
      if (curr_ins->type == INSN_CALL) {
          if ((hook_me - next_ins) == curr_ins->displacement) {
              rewrite(curr_ins->displacement, (replacement_fn - next_ins));
              return 0;
          }
      }
  }
  ```

## Dynamic Linking
- **GOT (Global Offset Table):**
  - Initially, the `.got.plt` entry contains the address of the instruction after the `jmp`.
  - An ID is stored, and the runtime linker (rtld) is invoked.
  - rtld writes the address of the function to the `.got.plt` entry.
  - Calls to the PLT entry jump directly to the function once the `.got.plt` is filled in.

## Hooking the GOT
- **Redirect Execution:**
  - Overwrite the `.got.plt` entries for `rb_newobj` with a handler function.
  - Example:
    ```c
    VALUE other_function() {
        new_obj = rb_newobj();
        /* do something with new_obj */
        return new_obj;
    }
    ```
- **Avoiding Infinite Loops:**
  - Ensure `other_function()` lives in its own DSO (Dynamic Shared Object) to avoid infinite loops.

## Inlining
- **Inline Functions:**
  - Cannot hook because the compiler may inline the function.
  - Example:
    ```c
    static inline void add_freelist(RVALUE *p) {
        p->as.free.flags = 0;
        p->as.free.next = freelist;
        freelist = p;
    }
    ```
- **Crazy Idea:**
  - Search the binary for `mov` instructions that update `freelist`.
  - Overwrite the `mov` instruction with a call to your code.
  - **Problem:** The system may not be ready for a call instruction due to alignment issues.

## Conclusion
- **Further Reading:**
  - tlaneve.files.wordpress.com
  - elf
  - mach-o
  - me

This document provides a comprehensive overview of function hooking for macOS and Linux, covering ABIs, calling conventions, binary formats, and tools for analyzing and modifying binaries.