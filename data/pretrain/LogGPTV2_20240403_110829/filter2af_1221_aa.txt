_修订记录_
编号 | 日期 | 修订内容  
---|---|---  
1 | 2018.5.18 | 初稿  
A2 | B2 | C2  
A3 | B3 | C3  
# 1\. 内网安全检查/渗透介绍
## 1.1 攻击思路
有2种思路：
  1. 攻击外网服务器，获取外网服务器的权限，接着利用入侵成功的外网服务器作为跳板，攻击内网其他服务器，最后获得敏感数据，并将数据传递到攻击者，看情况安装长期后门，实现长期控制和获得敏感数据的方式；
  2. 攻击办公网的系统、办公网电脑、办公网无线等方式，一般是采用社工，实现控制办公电脑，再用获得的办公网数据，可能是内网的各种登录账号和密码，再获取办公网或者生产网的有用数据。
一般内网安全检查使用第一种思路，实际的攻击2种思路结合实现。
## 1.2 敏感资料/数据/信息
  * 高管/系统管理员/财务/人事/业务人员的个人电脑
  * 文件服务器/共享服务器
  * 邮件服务器
  * OA服务器
  * 数据库服务器
## 1.3 攻击过程
按照第一种思路，个人认为可以分为4个阶段：
  1. 信息收集
  2. 漏洞验证/漏洞攻击
  3. 后渗透
  4. 日志清理
第二种思路，社工的比重更大一些，本篇不多做介绍。
# 2 信息收集
该阶段识别内网存活的主机 IP， 运行端口扫描和漏洞扫描获取可以利用的漏洞
## 2.1 主机发现
使用端口扫描工具可以实现主机发现的功能，但也有些动作小的主机发现工具（Kali），可以有效的发现存活主机。自己写个 ping 的循环脚本也可以。
不受限的测试直接端口扫描了。
## 2.2 端口扫描
有授权的情况下直接使用 nmap 、masscan 等端口扫描工具直接获取开放的端口信息。  
作为跳板机可以使用 Metasploit 做端口扫描，也可以在跳板主机上上传端口扫描工具，使用工具扫描。
入侵到服务器上也可以根据服务器的环境使用自定义的端口扫描脚本扫描端口。
python 3 的端口扫描脚本
    # This script runs on Python 3
    import socket, threading
    def TCP_connect(ip, port_number, delay, output):
        TCPsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        TCPsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        TCPsock.settimeout(delay)
        try:
            TCPsock.connect((ip, port_number))
            output[port_number] = 'Listening'
        except:
            output[port_number] = ''
    def scan_ports(host_ip, delay):
        threads = []        # To run TCP_connect concurrently
        output = {}         # For printing purposes
        # Spawning threads to scan ports
        for i in range(10000):
            t = threading.Thread(target=TCP_connect, args=(host_ip, i, delay, output))
            threads.append(t)
        # Starting threads
        for i in range(10000):
            threads[i].start()
        # Locking the script until all threads complete
        for i in range(10000):
            threads[i].join()
        # Printing listening ports from small to large
        for i in range(10000):
            if output[i] == 'Listening':
                print(str(i) + ': ' + output[i])
    def main():
        host_ip = input("Enter host IP: ")
        delay = int(input("How many seconds the socket is going to wait until timeout: "))   
        scan_ports(host_ip, delay)
    if __name__ == "__main__":
        main()
有个使用 Python 端口扫描的介绍  
[https://thief.one/2018/05/17/1/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io](https://thief.one/2018/05/17/1/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)
Windows 下基于 Powershell 的端口扫描脚本。  
发现端口后使用客户端连接工具或者 nc 连接，获取服务端的 banner 信息。
## 2.3 漏洞扫描
有授权的情况下，使用绿盟极光、Nessus、Nexpose 等漏扫工具直接扫描目标，可以直接看到存活主机和主机的漏洞情况。
## 2.4 识别内网环境
获取目标的主机存活信息和端口开放信息后，就可以尝试分析目标的网络结构，安全防御策略。按照办公网和生产网分别说一下：
### 2.4.1 办公网
按照系统区分：
  * OA系统
  * 邮件系统
  * 财务系统
  * 文件共享系统
  * 域控
  * 企业版杀毒系统
  * 上网行为管理系统
  * 内部应用监控系统
按照网络区分：
  * 管理网段
  * 内部系统网段
  * 按照部门区分的网段
按照设备区分：
  * 个人电脑
  * 内网服务器
  * 网络设备
  * 安全设备
办公网的安全防护水平一般较差（相对），能绕过杀毒软件基本上就畅通无阻了，利用信任关系容易扩大攻击面，获取数据也比生产网简单。
### 2.4.2 生产网
按照系统区分：
  * 业务系统
  * 运维监控系统
  * 安全系统
按照网络区分：
  * 各不同的业务网段
  * 运维监控网段
  * 安全管理网段
根据目标开展的不同业务，对应的服务器可能存在不同的网段上，分析服务器上运行的服务和进程可以推断目标使用的运维监控管理系统和安全防护系统，可以大概推断出入侵目标的
IT 运维水平和安全防护水平，在接下来的入侵考虑采用什么样的方法。
# 2 漏洞验证/漏洞攻击
使用端口扫描、漏洞扫描验证扫描目标开放的端口，在对应端口上开放的服务，运行该服务的软件和版本号。  
如果只是使用端口扫描，只是发现开放的端口，接着使用 nc 可以获取端口上服务的 banner 信息，获取 banner 信息后需要在漏洞库上查找对应
CVE，后面就是验证漏洞是否存在。如果是使用漏洞扫描工具可以直接获取对应端口上的漏洞，后面也是验证漏洞。  
安全检查一般是尽可能的发现所有漏洞，对漏洞的风险进行评估和修复。入侵的话只关注高危远程代码执行和敏感信息泄露漏洞等可以直接利用的漏洞。
漏洞验证可以找对应的 CVE 编号的 POC、EXP，利用代码在 ExploitDB 、seebug上查看或者在 github
上搜索是否有相关的漏洞验证或利用的工具。
## 2.1 Web
### 2.1.1 自定义 Web 应用
从公网直接攻击目标对外的 Web
应用，或者在授权的情况下在内网进行渗透测试，如果是入侵目的可以直接寻找注入、上传、代码执行、文件包含等高危漏洞，尝试获取系统权限，或者直接能拿到敏感数据。  
允许扫描的话一般使用 WVS 直接扫描，也可以使用专门扫描特定漏洞的扫描工具如 sqlmap、XSStrike
等工具扫描特定类型的漏洞。不允许直接扫描，使用 Burp 手工慢慢找了。
### 2.1.2 Web 中间件
#### 1\. Tomcat
Tomcat是Apache Jakarta软件组织的一个子项目，Tomcat是一个JSP/Servlet容器，它是在SUN公司的JSWDK（Java
Server Web Development
Kit）基础上发展起来的一个JSP和Servlet规范的标准实现，使用Tomcat可以体验JSP和Servlet的最新规范。
  * 端口号：8080
  * 攻击方法：
    * 默认口令、弱口令，爆破，tomcat5 默认有两个角色：tomcat和role1。其中账号both、tomcat、role1的默认密码都是tomcat。弱口令一般存在5以下的版本中。
    * 在管理后台部署 war 后门文件
    * 远程代码执行漏洞
  * 参考：
    * 
    * 
    * 
    * 
#### 2\. Jboss
是一个运行EJB的J2EE应用服务器。它是开放源代码的项目，遵循最新的J2EE规范。从JBoss项目开始至今，它已经从一个EJB容器发展成为一个基于的
J2EE 的一个Web 操作系统（operating system for web），它体现了 J2EE 规范中最新的技术。
  * 端口：8080
  * 攻击方法：
    * 弱口令，爆破
    * 管理后台部署 war 后门
    * 反序列化
    * 远程代码执行
  * 参考：
    * 
    * 
    * 
    * 
#### 3\. WebLogic
WebLogic是美国Oracle公司出品的一个Application
Server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java
Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。
  * 端口：7001，7002
  * 攻击方法：
    * 弱口令、爆破，弱密码一般为weblogic/Oracle@123 or weblogic
    * 管理后台部署 war 后门
    * SSRF
    * 反序列化漏洞
    * weblogic_uac
  * 参考：
    * 
    * 
    * 
    * 
#### 4\. WebSphere
IBM公司一套典型的电子商务应用开发工具及运行环境。
  * 端口：默认端口：908*；第一个应用就是9080，第二个就是9081；控制台9090
  * 攻击方法：
    * 控制台登录爆破
    * 很多内网 websphere 的控制台存在弱口令 / 默认口令，可以使用 admin/admin 以及 webshpere/webshpere 这种口令登录。 通过该口令登录控制台后，可以部署 war 包，从而获取到 WEBSHELL 。
    * 反序列化
    * 任意文件泄露
  * 参考：
    * [https://loudong.sjtu.edu.cn/?keyword=WebSphere&serverity=%E9%AB%98%E5%8D%B1](https://loudong.sjtu.edu.cn/?keyword=WebSphere&serverity=%E9%AB%98%E5%8D%B1)
    * 