### Evaluation and Performance Analysis

The prototype placed a considerable computational load on the PCs. As a result, while the computation results were already acceptable, they are expected to improve further with embedded implementations.

#### Modem and Handshake Evaluation

We evaluated the modem and handshake using software audio channels configured with one of three audio codecs: G.711 (µ-law), Adaptive MultiRate Narrow Band (AMR-NB), and Speex. These codecs are commonly used for landline audio compression, cellular audio, and VoIP audio, respectively. We utilized the sox[10] implementations for G.711 and AMR-NB, and the ffmpeg[8] implementation for Speex. Software audio channels were chosen to provide a common baseline for comparison, as no single VoIP client or cellular device supports all these codecs.

Since link layer performance depends solely on the bit error characteristics of the modem, we used a software loopback with tunable loss characteristics instead of a voice channel for evaluation. This approach allowed us to fully and reproducibly test and evaluate the link layer.

### 6.2 Modem Evaluation

The most critical characteristic of the modem is its resistance to bit errors. To measure this, we transmitted 100 frames, each containing 2000 random bits, and measured the bit error after reception.

Table 3 shows the average and standard deviation of the bit error for various codecs. The G.711 channel exhibited no bit errors, which is consistent with its high-quality, minimal processing, and compression. Both AMR-NB and Speex also showed minimal bit errors, though Speex had a higher variance in errors. This variance was due to one frame being truncated, leading to a higher average error despite the other 99 frames being received without error.

### 6.3 Link Layer Evaluation

The most important characteristic of the link layer is its ability to optimize goodput, defined as the actual amount of application data transmitted per unit time, excluding overhead.

Table 4 illustrates the transmission time and goodput of the protocol as a function of bit error rate, compared to the theoretical optimal values. The optimal numbers were computed based on an optimal bit time (500 bits per second) plus 40ms of header and footer. The experimental values are the average of 50 message transmissions, each containing 2000 bits. Despite high bit error rates (up to 2%), the link layer successfully completed message transmission. However, the impact on goodput is substantial at higher error rates. For example, at a 0.1% bit error rate, the goodput penalty is only 5bps lower than the optimal rate. At 1% and 2% loss, the goodput is 65.8% and 34.7% of the optimal rate, respectively. Given our observations of bit error rates below 0.5% for all codecs, these results indicate that our link layer retransmission parameters are set within an acceptable range.

### 6.4 Handshake Evaluation

To evaluate the complete handshake, we measured the total time from the start to the completion of the handshake from the verifier's perspective. We tested both variants of the handshake: with and without the prover sending a certificate. Handshakes requiring a certificate exchange take longer due to the additional data sent.

Table 5 shows the total handshake times for calls over each of the three codecs, averaged over 10 calls each. These times are corrected to remove instrumentation delays and artificial delays caused by inter-process communication (IPC) among different components of our prototype, which would be removed or consolidated in deployment.

From the verifier's perspective, cached-certificate exchanges are quite fast, averaging 4.844 seconds across all codecs. When certificates are not cached, the overall average time is 8.977 seconds. Differences in handshake times for different codecs are due to their underlying bit error rates. G.711 and Speex have lower error rates than AMR-NB, resulting in shorter overall handshake times. In fact, since these codecs saw no errors during the tests, their execution times were virtually identical.

Most of the handshake time is spent transmitting messages over the voice channel, accounting for 99% of the total time. Computation and miscellaneous overhead average less than 50 milliseconds for all messages. This indicates that AuthLoop is computationally minimal and can be implemented on a variety of platforms.

### 7. Discussion

This section discusses client authentication, public key infrastructure, and deployment considerations for AuthLoop.

#### 7.1 Client Credentials

Until now, our discussion has focused on the strong authentication of one party in a phone call (the Prover). However, clients often engage in weaker "application-layer" authentication when interacting with call centers, such as entering account numbers, PINs, and social security numbers. Without an additional step, our threat model allows an adversary to steal these credentials by initiating a 3-way call to both the victim client and the targeted institution. After observing the successful handshake, the adversary could capture the client's credentials (e.g., DTMF tone inputs) and hang up both ends of the call. The adversary could then call the targeted institution, spoofing the victim's Caller ID, and present the correct credentials.

One advantage of TLS is its ability to generate multiple session keys for continued authentication and data confidentiality and integrity. AuthLoop is similar in this regard. While the data throughput of our modem is low, it is sufficient to carry encrypted copies of client credentials. Therefore, an adversary attempting the above attack would be unable to succeed because the sensitive information would be passed through AuthLoop and rendered useless in a second session. Additionally, users are already accustomed to entering such information, so the user experience would remain unchanged.

#### 7.2 Telephony PKI

One of the most significant problems with SSL/TLS is its trust model. X.509 certificates are issued by numerous Certificate Authorities (CAs), whose root certificates are used to verify the authenticity of presented certificates. The unregulated nature of who can issue certificates and act as a CA has been a known weakness since the inception of the current Public Key Infrastructure [37]. This has led to a wide range of attacks and confusion about which root-signed certificates can be trusted. Traditional certificates also present a challenge in this environment, as the long verification chains in a bitrate-limited audio channel make the blind adoption of the Internet's traditional PKI model impractical for telephony systems. As shown in Table 1, transmitting long certificate chains would significantly degrade AuthLoop's performance.

Telephony networks naturally lend themselves to a single-rooted PKI system. Competitive Local Exchange Carriers (CLECs) are assigned blocks of phone numbers by the North American Numbering Plan Association (NANPA), and ownership of these blocks is easily confirmed through publicly available resources like NPA/NXX databases. A similar observation has been made in the secure Internet routing community, leading to the proposal of the Resource Public Key Infrastructure (RPKI) [45]. The advantage of this approach is that all valid signatures on phone numbers must ultimately be rooted in a NANPA certificate. This Telephony Public Key Infrastructure (TPKI) reduces the length of certificate chains and allows easy storage of the root and all CLEC certificates in the US and associated territories (approximately 700 [46]) in just over 100 KiB of storage (1600 bits per certificate × 700). Alternatively, if certificates are only needed for toll-free numbers, a single certificate for the company administering these numbers (e.g., Somos, Inc.) would suffice.

Figure 6 illustrates the advantages of our approach. Communicating with a specific server (xyz.bankofamerica.com) may require the transmission of three or more certificates before identity can be verified. Our proposed TPKI relies on a single NANPA root and the relatively small number of CLECs, requiring only a single certificate for the calling number to be transmitted during the handshake. Further details of the proposed TPKI, such as revocation, will be discussed in future work.

#### 7.3 Deployment Considerations

Our experiments show that AuthLoop is bandwidth-bound rather than processor-bound, indicating that these techniques can be deployed successfully across a wide range of systems. For instance, AuthLoop can be embedded directly into new handset hardware or used immediately with legacy equipment through external adapters (e.g., Raspberry Pi). Alternatively, it can be loaded onto mobile devices via a software update to the dialer, enabling large numbers of devices to benefit immediately.

Full deployments have the opportunity to make AuthLoop's audio signaling almost invisible to the user. If AuthLoop is in-line with the call audio, the system can remove AuthLoop transmissions from the audio sent to the user, ensuring that users never hear the handshakes or keep-alive messages. While our current strategy minimizes the volume of signaling to avoid interrupting conversations, the in-line approach will ultimately provide the greatest stability and least intrusive user experience.

Finally, given the diverse range of telephony platforms, a variety of security indicators will be necessary to communicate authenticated identity to the user. However, due to the limitations of space and the breadth of devices and interfaces, this exploration is left for future work.

### 8. Conclusions

Phone systems serve as the trusted carriers of some of our most sensitive communications. Despite this trust, end-to-end authentication between two endpoints across this heterogeneous landscape was previously not possible. In this paper, we present AuthLoop to address this challenge. We designed a modem and supporting link layer protocol for reliable data delivery over a voice channel. With the limitations of this channel understood, we presented a security model and protocol to provide explicit authentication of Caller ID assertions and discussed ways to protect client credentials. Finally, we demonstrated that AuthLoop reduced execution time by over an order of magnitude on average compared to the direct application of TLS 1.2. In doing so, we have shown that end-to-end authentication is indeed possible across modern telephony networks.

### Acknowledgment

The authors would like to thank our anonymous reviewers for their helpful comments and colleagues at the Florida Institute for Cybersecurity Research for their assistance in preparing this manuscript. This work was supported in part by the US National Science Foundation under grant numbers CNS-1617474, CNS-1526718, and CNS-1464088. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References

[1] RedPhone. https://play.google.com/store/apps/details?id=org.thoughtcrime.redphone.
[2] Directory of Unknown Callers. http://www.800notes.com/, 2015.
[3] GSMK CryptoPhone. http://www.cryptophone.de/en/, 2015.
[4] Nomorobo. https://www.nomorobo.com/, 2015.