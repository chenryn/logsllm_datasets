PK, a message M and an access structure A. It outputs
a ciphertext C.
Decrypt(PK, SKS , C) takes as input the public parameters
PK, a secret key SKS and a ciphertext C. It outputs
a message M .
Let (PK, MSK) ← Setup(1λ, U ), SKS ← KeyGen(PK, MSK,S),
C ← Encrypt(PK, M, A). For correctness, we require the fol-
lowing to hold:
1. If the set S of attributes satisﬁes the access structure
A, then M ← Decrypt(PK, SKS , C);
2. Otherwise, with overwhelming probability, Decrypt(PK,
SKS , C) outputs a random message.
2.4 Composite Order Bilinear Groups
We will construct our scheme in composite order bilinear
groups whose order is the product of four distinct primes.
Composite order bilinear groups were ﬁrst introduced in [4].
Let G be an algorithm that takes as input a security
parameter 1λ and outputs a tuple (p1, p2, p3, p4, G, GT , e),
where p1, p2, p3, p4 are distinct primes, G and GT are cyclic
groups of order N = p1p2p3p4, and e : G×G → GT is a map
such that
1. (Bilinear) ∀g, h ∈ G, a, b ∈ ZN , e(ga, hb) = e(g, h)ab;
2. (Non-degenerate) ∃g ∈ G such that e(g, g) has order
N in GT .
We further require that multiplication in G and GT , as
well as the bilinear map e, are computable in time poly-
nomial in λ. We use Gp1 , Gp2 , Gp3 , Gp4 to denote the sub-
groups of G having order p1, p2, p3, p4, respectively. Observe
× Gp4 . Note also that if g1 ∈ Gp1
that G = Gp1
and g2 ∈ Gp2 then e(g1, g2) = 1. A similar rule holds when-
× Gp2
× Gp3
ever e is applied to elements in distinct subgroups.
We now state the complexity assumptions we use. As-
sumptions 1, 2 and 3 are the same assumptions used in [14],
and we use it in the group whose order is a product of four
primes. Assumption 4 was used in [6].
Assumption 1. Let G be as above. We deﬁne the follow-
ing distribution:
(p1, p2, p3, p4, G, GT , e) ← G(1λ), N = p1p2p3p4,
g $← Gp1 , X3
$← Gp3 , X4
$← Gp4 ,
D = (G, GT , N, e, g, X3, X4),
$← Gp1
× Gp2 , T2
$← Gp1 .
T1
The advantage of an algorithm A in breaking Assumption 1
is deﬁned as
Adv1A = |Pr[A(D, T1) = 1] − Pr[A(D, T2) = 1]|.
Definition 3. we say G satisﬁes Assumption 1 if for any
polynomial time algorithm A, Adv1A is negligible.
Assumption 2. Let G be as above. We deﬁne the follow-
ing distribution:
g, X1
(p1, p2, p3, p4, G, GT , e) ← G(1λ), N = p1p2p3p4,
$← Gp3 , X4
$← Gp1 , X2, Y2
D = (G, GT , N, e, g, X1X2, Y2Y3, X3, X4),
× Gp3 .
$← Gp2 , X3, Y3
× Gp3 , T2
$← Gp1
$← Gp1
× Gp2
T1
$← Gp4 ,
The advantage of an algorithm A in breaking Assumption 2
is deﬁned as
Adv2A = |Pr[A(D, T1) = 1] − Pr[A(D, T2) = 1]|.
Definition 4. we say G satisﬁes Assumption 2 if for any
polynomial time algorithm A, Adv2A is negligible.
Assumption 3. Let G be as above. We deﬁne the follow-
ing distribution:
(p1, p2, p3, p4, G, GT , e) ← G(1λ), N = p1p2p3p4,
α, s ∈ ZN , g $← Gp1 ,
$← Gp2 , X3
$← Gp4 ,
g2, X2, Y2
D = (G, GT , N, e, g, g2, gαX2, gsY2, X3, X4),
$← Gp3 , X4
T1 = e(g, g)αs, T2
$← GT .
The advantage of an algorithm A in breaking Assumption 3
is deﬁned as
Adv3A = |Pr[A(D, T1) = 1] − Pr[A(D, T2) = 1]|.
Definition 5. we say G satisﬁes Assumption 3 if for any
polynomial time algorithm A, Adv3A is negligible.
Assumption 4. Let G be as above. We deﬁne the follow-
ing distribution:
(p1, p2, p3, p4, G, GT , e) ← G(1λ), N = p1p2p3p4,
$← Gp2 ,
′
′ ∈ ZN , g, h $← Gp1 , g2, X2, A2, B2, D2
$← Gp4 ,
$← Gp3 , X4, Z, A4, D4
X3
, r
t
′
D = (G, GT , N, e, g, g2, gt
′
T = hr
A2A4, T2
′
B2, ht
$← Gp1
Y2, X3, X4, hZ, gr
× Gp4 .
× Gp2
′
D2D4),
The advantage of an algorithm A in breaking Assumption 4
is deﬁned as
Adv4A = |Pr[A(D, T1) = 1] − Pr[A(D, T2) = 1]|.
Definition 6. we say G satisﬁes Assumption 4 if for any
polynomial time algorithm A, Adv4A is negligible.
3. CP-ABE WITH PARTIALLY HIDDEN AC-
CESS STRUCTURES
In this section, we ﬁrst describe the security model for CP-
ABE with partially hidden access structures. Then, based
on the CP-ABE scheme proposed by Lewko et al.
[14], we
propose a new CP-ABE scheme, which satisﬁes the security
deﬁnition of partially hidden access structures.
Similar to the scheme in [14], our proposed CP-ABE scheme
has the restriction that each attribute name can only be used
once in an access formula, which is called one-use CP-ABE.
We can obtain a secure CP-ABE scheme with partially hid-
den access structures where attribute names are used mul-
tiple times (up to a constant number of uses ﬁxed at setup)
from a one-use scheme by applying the generic transforma-
tion given in Lewko et al.
[14]. While the transformation
does incur some cost in key size, it does not increase the size
of the ciphertext.
Our construction supports arbitrary monotone access for-
mulas. As in [14], we express access formulas by an LSSS
matrix A over the attributes in the system, but with a signif-
icant diﬀerence. In our construction, each attribute includes
two parts: attribute name and its value. Without loss of gen-
erality, we assume that there are n categories of attributes
and every user has n attributes with each attribute belong-
ing to a diﬀerent category. For notational purposes, let i
denote the attribute name of the ith category attribute. A
user’s attribute set S is parsed as (s1, . . . , sn), where si ∈ ZN
is the value of attribute i. We express an access formula by
(A, ρ,T ), where A is ℓ × n share-generating matrix, ρ is a
map from each row of A to an attribute name (i.e., ρ is a
function from {1, . . . , ℓ} to {1, . . . , n}), T can be parsed as
(tρ(1), . . . , tρ(ℓ)) and tρ(i) is the value of attribute ρ(i) speci-
ﬁed by the access formula.
Using our notations, a user’s attribute set S = (s1, . . . , sn)
satisﬁes an access formula (A, ρ,T ) if and only if there exist
∑
I ⊆ {1, . . . , ℓ} and constants {ωi}i∈I such that
ωiAi = (1, 0, . . . , 0) and sρ(i) = tρ(i) for ∀i ∈ I,
∑
where Ai denotes the ith row of A. We also say that I ⊆
{1, . . . , ℓ} satisﬁes (A, ρ) if there exist constants {ωi}i∈I
i∈I ωiAi = (1, 0, . . . , 0). We deﬁne IA,ρ as the
such that
set of minimum subsets of {1, . . . , ℓ} that satisﬁes (A, ρ).
By “minimum”, we mean the subset cannot become smaller
while still satisfying (A, ρ).
in our construction to be presented below,
the speciﬁc attribute values (i.e., T ) of an access formula
(A, ρ,T ) is hidden, while other information about the ac-
cess formula (i.e., (A, ρ) is sent along with the ciphertext
explicitly.
3.1 Security Model for CP-ABE with Partially
Note that,
i∈I
Hidden Access Structures
We now give the security model for CP-ABE with par-
tially hidden access structures, described as a security game
between a challenger and an adversary A. The game pro-
ceeds as follows:
Setup The challenger runs Setup(1λ, U ) to obtain the pub-
lic parameters PK and a master secret key MSK. It
gives the public parameters PK to the adversary A
and keeps MSK to itself.
Query phase 1 The adversary A adaptively queries the
challenger for secret keys corresponding to sets of at-
tributes S1, . . . , Sq.
In response, the challenger runs
← KeyGen(PK, MSK,Si) and gives the secret key
SKSi
SKSi to A, for 1 ≤ i ≤ q.
Challenge The adversary A submits two (equal length)
messages M0, M1 and two access structures (A, ρ,T0),
(A, ρ,T1), subject to the restriction that, (A, ρ,T0)
and (A, ρ,T1) cannot be satisﬁed by any of the queried
attribute sets. The challenger selects a random bit
β ∈ {0, 1}, sets C = Encrypt(PK, Mβ, (A, ρ,Tβ)) and
sends C to the adversary as its challenge ciphertext.
Note that, the LSSS matrix A and ρ are the same in
the two access structures provided by the adversary. In
a CP-ABE scheme with partially hidden access struc-
tures, one can distinguish the ciphertexts if the as-
sociated access structures have diﬀerent (A, ρ), since
(A, ρ) is sent along with the ciphertext explicitly.
Query phase 2 The adversary continues to adaptively query
the challenger for secret keys corresponding to sets of
attributes with the added restriction that none of these
satisﬁes (A, ρ,T0) and (A, ρ,T1).
Guess The adversary A outputs its guess β
′ ∈ {0, 1} for β
and wins the game if β = β
.
′
The advantage of the adversary in this game is deﬁned as
|Pr[β = β
| where the probability is taken over the
random bits used by the challenger and the adversary.
] − 1
′
2
Definition 7. The access structures of a ciphertext-policy
attribute-based encryption scheme is partially hidden if all
polynomial time adversaries have at most a negligible ad-
vantage in this security game.
3.2 Our Construction
The proposed CP-ABE scheme consists of the following
algorithms:
Setup(1λ, U ) The setup algorithm ﬁrst runs G(1λ) to ob-
×
tain (p1, p2, p3, p4, G, GT , e) with G = Gp1
× Gp4 , where G and GT are cyclic groups of or-
Gp3
der N = p1p2p3p4. The attribute universe descrip-
tion U = ZN . Next it chooses g, h, u1, . . . , un ∈ Gp1 ,
X3 ∈ Gp3 ,X4, Z ∈ Gp4 and α, a ∈ ZN uniformly at
random. The public parameters are published as
PK = (N, g, ga, e(g, g)α, u1, . . . , un, H = h · Z, X4).
The master secret key is MSK = (h, X3, α).
× Gp2
KeyGen(PK, MSK,S = (s1, . . . , sn)) The key generation al-
gorithm chooses t ∈ ZN and R, R
, R1, . . . , Rn ∈ Gp3
uniformly at random. The secret key SKS = (S, K, K
′
{Ki}1≤i≤n) is computed as
′
,
K = gαgatR, K
= gtR
, Ki = (usi
i h)tRi.
′
′
Encrypt(PK, M ∈ GT , (A, ρ,T )) A is an ℓ× n matrix, ρ is a
map from each row Ax of A to an attribute name and
T = (tρ(1), . . . , tρ(ℓ)) ∈ Zℓ
N . The encryption algorithm
′ ∈ Zn
chooses two random vectors v, v
N , denoted v =
′
′
′
(s, v2, . . . , vn) and v
n). It also chooses
2, . . . , v
2,x ∈ Gp4 uniformly
′
rx, r
at random, for 1 ≤ x ≤ ℓ. The ciphertext is C =
x ∈ ZN and Z1,x, Z
′
= (s
′
1,x, Z2,x, Z
, v
′
((A, ρ), ˜C1, C
D2,x}1≤x≤ℓ), where
1,{C1,x, D1,x}1≤x≤ℓ, ˜C2, C
′
2,{C2,x,
′
C1,x = gaAx·v(u
t(cid:26)(x)
ρ(x) H)
C2,x = gaAx·v
′
(u
t(cid:26)(x)
ρ(x) H)
′
1 = gs,
˜C1 = M · e(g, g)αs, C
−rx · Z1,x, D1,x = grx · Z
′
1,x,
′
′
′
˜C2 = e(g, g)αs
2 = gs
, C
x · Z
x · Z2,x, D2,x = gr
′
′
′
2,x.
1, {C1,x,
′
2,{C2,x, D2,x}1≤x≤ℓ), SKS = (S,
′
−r
,
Decrypt(PK, SKS , C) Let C = ((A, ρ), ˜C1, C
′
D1,x}1≤x≤ℓ, ˜C2, C
,{Ki}1≤i≤n) and S = (s1, . . . , sn). The decryp-
K, K
tion algorithm ﬁrst calculates IA,ρ from (A, ρ), where
IA,ρ denotes the set of minimum subsets of {1, . . . , ℓ}
)
that satisﬁes (A, ρ). It then checks if there exists an
I ∈ IA,ρ that satisﬁes
˜C2 = e(C
′
2, K)/
′
(e(C2,i, K
) · e(D2,i, Kρ(i)))ωi
,
∑
(∏
i∈I
(∏
i∈I
i∈I ωiAi = (1, 0, . . . , 0). If no element in IA,ρ
where
satisﬁes the above equation, it outputs ⊥. Otherwise,
)
it computes
′
1, K)/
e(C
(e(C1,i, K
)
) · e(D1,i, Kρ(i)))ωi
e(g, g)atAi·v·ωi
′
(∏
i∈I
= e(g, g)αse(g, g)ats/
= e(g, g)αs.
Then M can be recovered as ˜C1/e(g, g)αs.
′
In our construction, a ciphertext includes two parts: ( ˜C1, C
1,
{C1,x, D1,x}1≤x≤ℓ) and ( ˜C2, C
2, {C2,x, D2,x}1≤x≤ℓ). The
′
ﬁrst part is an encryption of the message M . The second
part is redundant, and can be viewed as an encryption of
1. If the private key attributes of a user satisfy the access
structure associated with the ciphertext, the redundant sec-
ond part will help the user decide which attribute set satisﬁes
the access structure; and then the user is able to use the in-
formation and his private key to decrypt the ﬁrst part of the
ciphertext and recover the plaintext M . The CP-ABE con-
struction in [14] uses composite order bilinear groups whose
order is the product of three distinct primes, while our con-
struction uses groups whose order is the product of four dis-
tinct primes. Note that in our construction, component H of
the public parameters and components C1,x, D1,x, C2,x, D2,x
of the ciphertext all have an element from Gp4 as a factor.
This formation of H, C1,x, D1,x, C2,x, D2,x allows us to prove
that the access structures of our CP-ABE scheme is partially
hidden. We now state the security theorem of our CP-ABE
scheme.
Theorem 1. If Assumptions 1, 2, 3, and 4 hold, then
the access structures of the proposed CP-ABE is partially
hidden.
Proof. Following the approach by Lewko and Waters
[16], we deﬁne two additional structures: semi-functional ci-
phertexts and semi-functional keys. These will not be used
in the real system, but will be used in our proof.
′
1,x, D
Semi-functional Ciphertext Let g2 denote a generator
of the subgroup Gp2 . A semi-functional ciphertext is
created as follows. We ﬁrst use the encryption algo-
′′
′
= ((A, ρ), ˜C
1, C
rithm to form a normal ciphertext C
1 ,
2,x}1≤x≤ℓ). Then,
{C
′
′
2,x, D
′ ∈ ZN and two ran-
we choose random exponents c, c
N . We also choose random val-
dom vectors w, w
ues zi ∈ ZN associated to attributes, and random val-
x ∈ ZN associated to row x of the ℓ× n matrix
′
(
ues γx, γ
A. The semi-functional ciphertext C is set to be
1,x}1≤x≤ℓ, ˜C