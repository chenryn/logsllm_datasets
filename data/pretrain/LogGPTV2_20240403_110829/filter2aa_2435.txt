API-Induced SSRF
How Apple Pay Scattered 
Vulnerabilities Across the Web
About me
● Math degree
● Web developer, ~5 years
● Bounties
● At PKC ~1 year, web dev and code 
audits for clients - pkc.io
Intro
Overview
● Deﬁnitions
● Demo some mistakes
○ Apple Pay
○ Twilio
○ Others
● How not to be like Apple
Intro
Diagram of 
Inductive 
Weaknesses
Weak Code
(e.g. Heartbleed)
Vulnerable 
Deployment
Vulnerable 
Deployment
...
Typical Class Breaks
See Schneier’s blog post
Diagram of 
Inductive 
Weaknesses
???
Weak Code
Weak Code
Vulnerable 
Deployment
Vulnerable 
Deployment
...
...
Diagram of 
Inductive 
Weaknesses
Inductive Weakness
Weak Code
Weak Code
Vulnerable 
Deployment
Vulnerable 
Deployment
...
...
Inductive weakness: 
A design ﬂaw that encourages 
multiple parties to write 
vulnerable code with a similar 
exploit pattern across differing 
software stacks.
Deﬁnitions
Image
SSRF Refresher
Deﬁnitions: SSRF
169.254.169.254
Payload with 
http://169.254.169.254/foo
Deﬁnitions: SSRF
GET /foo
169.254.169.254
Payload with 
http://169.254.169.254/foo
Deﬁnitions: SSRF
GET /foo
sensitive data
sensitive data
169.254.169.254
Payload with 
http://169.254.169.254/foo
Deﬁnitions: SSRF
If you can relay requests through a GCP or 
AWS box...
Easy things to do with SSRF
● AWS, GCP have a gooey center
○ People have already criticized 
AWS/GCP for this
● file:/// urls
● Reﬂected XSS
○ Technically not SSRF
Deﬁnitions: SSRF
SSRF: Hard mode
● Cross-protocol stuff
○ SMTP through gopher:// URLs
○ HTTP->memcached->RCE
■ See A New Era of SSRF
○ ???
Deﬁnitions: SSRF
Apple Pay Web
Inductive SSRF
Apple Pay: 3 forms
Apple Pay
In-store
In-app
Web
these are unaffected
Apple Pay
In-store
In-app
Web
criticising this
The intended ﬂow
● Safari generates a validationURL 
(https://apple-pay-gateway-*.apple.com)
Apple Pay
The intended ﬂow
● Safari generates a validationURL 
(https://apple-pay-gateway-*.apple.com)
● Your JS sends validationURL to your 
backend
Apple Pay
The intended ﬂow
● Safari generates a validationURL 
(https://apple-pay-gateway-*.apple.com)
● Your JS sends validationURL to your 
backend
● Your backend grabs a session from 
validationURL and forwards it to the 
client
Apple Pay
Apple Pay
session
session
apple-pay-gateway.apple.com
validationURL
https://apple-pay-gateway.apple.com
/paymentservices/paymentSession
merchant
Apple Pay
GET /foo
sensitive data
sensitive data
169.254.169.254
validationURL
https://169.254.169.254/foo
Demos
appr-wrapper
● Under GoogleChromeLabs on github
● Written, deployed by an @google.com 
account
● A sort of polyﬁll between Apple Pay and 
the PaymentRequest API
● A test deployment, so low severity target
Apple Pay
webkit.org
● Maintained by Apple
● Another demo, but on a 
higher-severity target
Apple Pay
Apple Pay
Diagram of Apple Pay, like the 
SSRF one
Apple’s response
Just 
added
this
Disclosure timeline
● Feb 11, Initial email to Apple
● March 26, Apple updated docs
● May 14, Apple concluded investigation.  I 
replied with follow-up questions.
● … Then Apple ghosted for 2 months :(
Apple Pay
Apple Pay
Diagram of Apple Pay, like the 
SSRF one
One mitigation...
Apple Pay
Diagram of Apple Pay, like the 
SSRF one
General mitigations
Apple Pay
● Check validationURL against Apple’s list
● Stripe and Braintree handle this ﬂow, so 
you’re safe if you use them
Apple Pay
Diagram of Apple Pay, like the 
SSRF one
General mitigations
SSRF in general
● Whitelist egress trafﬁc
● Protect your metadata like Netﬂix: 
Detecting Credential Compromise in AWS
● Be mindful of local, unauthenticated stuff 
on servers
Apple Pay
Diagram of Apple Pay, like the 
SSRF one
Ineffective mitigations
Do not:
● Use a regex to validate the domain
○ Sometimes people try a regex like 
https?://.*.apple.com/.*
○ But that matches: 
http://localhost/?.apple.com/...
● Rely on HTTPS to prevent cross-protocol 
attacks
○ See slide 16 of A New Era of SSRF
Webhooks
Previous webhook exploits
Webhooks
Payload would go here
● http://169.254.169.254
● gopher://localhost:11211/...
Diagram of 
Inductive 
Weaknesses
Webhook sender
Listener
Listener
...
Most attack this
I’m after these
How Twilio Authenticates Webhooks
Webhooks
● HMAC and hope the listener checks it
● Lots of webhooks do this, Twilio’s not 
unique
The problem
Webhooks
● Who failed to check the HMAC?
○ 23 out of 31 open-source projects
The problem
Webhooks
● Who failed to check the HMAC?
○ 23 out of 31 open-source projects
○ Most of Twilio’s example code
The problem
Webhooks
● Who failed to check the HMAC?
○ 23 out of 31 open-source projects
○ Most of Twilio’s example code
● Contributing factors
○ Bad documentation
○ The easiest receiver implementation is a 
vulnerability
Demo: Webhooks
Twilio Example Code
● Examples themselves not 
deployed publicly
● But, did ﬁnd vulns where it 
was copied/pasted 
Apple Pay
Disclosure timeline
● Feb 17, Initial email to Twilio
● March 6, Twilio updated some of the docs
● Rejected all architectural changes due 
to “unforeseen issues”
Webhooks
Webhooks
What about nexmo?
Source
Webhooks
What about nexmo?
Source
Webhooks
{
  "object_kind": "push",
  "commits": [{
    "message": "Initial commit of foo project",
    "url": "https://...",
     ...
  }],
  "repository": {
    "url": "PI:EMAIL/something.git", ...
  }, ...
}
Gitlab webhooks: the happy path
Webhooks
What did I do?
● Found a server that was receiving gitlab 
webhooks
○ On the open internet
○ Was the trigger of build pipelines for multiple 
tenants...
Webhooks
{
  "object_kind": "push",
  "commits": [{
    "message": "Initial commit of foo project",
    "url": "https://...",
     ...
  }],
  "repository": {
    "url": "PI:EMAIL/something.git", ...
  }, ...
}
Gitlab webhooks: what I did
Put the tenant’s gitlab url here
Webhooks
{
  "object_kind": "push",
  "commits": [{
    "message": "Click here to do something! :D",
    "url": "javascript:alert('XSS on: ' + window.origin);",
     ...
  }],
  "repository": {
    "url": "PI:EMAIL/something.git", ...
  }, ...
}
Gitlab webhooks: what I did
Webhooks
What are some better ways to send webhooks?
● For crypto nerds: authenticated cipher
○ E.g. AES-GCM
○ Still symmetrical like an HMAC
○ Forces webhook consumers to decrypt, so 
they’ll accidentally verify the GCM tag you 
send them
Webhooks
What are some better ways to send webhooks?
● More practical: only send high-entropy, 
cryptographically random event IDs
○ Webhook consumer has to fetch 
/items/?id= with their API token
○ Plaid does roughly this
Webhooks
What are some better ways to send webhooks?
● For existing webhooks: test & warn
○ During registration, do 2 test requests:
■ 1 valid MAC
■ 1 invalid MAC
○ Warn if they get the same response code
What else?
Salesforce Objects vs Dynamodb
Both:
● NoSQL-like object storage
● REST APIs with custom SQL-like 
queries
/?q=SELECT+id+from+Foo+WHERE+name+LIKE+'...'
Salesforce SOQL
Inject here
Salesforce SOQL
Source
POST / HTTP/1.1
{
    "TableName": "ProductCatalog",
    "KeyConditionExpression": "Price <= :p",
    "ExpressionAttributeValues": {
        ":p": {"N": "500"},
    },
}
Dynamodb: Better
Enforced Parametrization
Closing Thoughts
From Apple after two months of silence
“Developers are responsible for implementing 
whatever security and networking best 
practices make the most sense for their 
environment.”
Apple Pay
“If you’ve built a chaos 
factory, you can’t dodge 
responsibility for the 
chaos.”
Tim Cook, Apple CEO
Closing Thoughts
Source
Financial
● Low-hanging bounty fruit
● Embarrassment
● High-interest tech debt
Closing Thoughts
Designing defensive APIs
● Audit your example code
● Be careful about passing around URLs
● If “Do this or you’re vulnerable!” is in your 
documentation, try to make the warning 
unnecessary
Closing Thoughts
Acknowledgments
● Jonathan Ming at PKC - asked the initial 
questions about Apple Pay
● Arte Ebrahimi at PKC - pointed me to the Nexmo 
stuff
● Ken Kantzer at PKC - helped with the 
presentation
● Andrew Crocker at EFF - legal assistance
Closing Thoughts
Thank you!
www.pkc.io