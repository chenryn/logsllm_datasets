title:Understanding and Modeling On-Die Error Correction in Modern DRAM:
An Experimental Study Using Real Devices
author:Minesh Patel and
Jeremie S. Kim and
Hasan Hassan and
Onur Mutlu
2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
Understanding and Modeling On-Die Error Correction
in Modern DRAM: An Experimental Study Using Real Devices
†
Minesh Patel
†
Jeremie S. Kim
‡
‡†
Hasan Hassan
†
†‡
Onur Mutlu
ETH Z¨urich
Carnegie Mellon University
Experimental characterization of DRAM errors is a powerful
technique for understanding DRAM behavior and provides valu-
able insights for improving overall system performance, energy
efficiency, and reliability. Unfortunately, recent DRAM technol-
ogy scaling issues are forcing manufacturers to adopt on-die
error-correction codes (ECC), which pose a significant challenge
for DRAM error characterization studies by obfuscating raw error
distributions using undocumented, proprietary, and opaque error-
correction hardware. As we show in this work, errors observed in
devices with on-die ECC no longer follow expected, well-studied
distributions (e.g., lognormal retention times) but rather depend
on the particular ECC scheme used.
In this work, we develop Error-correction INference (EIN), a new
statistical inference methodology that overcomes the inability to
understand the error characteristics of DRAM devices with on-
die ECC. EIN uses maximum a posteriori (MAP) estimation over
statistical models that we develop to represent ECC operation to:
i) reverse-engineer the ECC scheme and ii) infer the pre-correction
error rates given only the post-correction errors. We design and
publicly release EINSim, a flexible open-source simulator that
can apply EIN to a wide variety of DRAM devices and standards.
We evaluate EIN through the first experimental error-
characterization study of DRAM devices with on-die ECC in
open literature. Using the data-retention error rates of 232 (82)
LPDDR4 devices with (without) on-die ECC across a wide range
of temperatures, refresh rates, and test patterns, we show that EIN
enables: i) reverse-engineering the on-die ECC scheme, which we
find to be a single-error correction Hamming code with (n = 136,
k = 128, d = 3), ii) inferring pre-correction error rates given only
post-correction errors, and iii) recovering the well-studied pre-
correction error distributions that on-die ECC obfuscates.
1. Introduction
DRAM has long since been a crucial component in computing
systems primarily due to its low cost-per-bit relative to alterna-
tive memory technologies [73, 88, 91, 92]. However, while sub-
sequent technology generations have substantially increased
overall DRAM capacity, they have not achieved comparable
improvements in performance, energy efficiency, and reliabil-
ity [12, 32, 73, 91]. This has made DRAM a significant perfor-
mance and energy bottleneck in modern systems [88, 91].
To address this challenge, researchers propose a wide variety
of solutions based on insights and understanding about DRAM
behavior gleaned from system-level DRAM error characteriza-
tion studies [5, 10, 12, 15, 24, 27, 33, 34, 40, 45–47, 50–53, 56–59, 61,
70, 72, 79–81, 85, 95–99, 101, 105, 106, 114–121, 124, 125, 129, 134].
These studies deliberately induce errors in a DRAM device by
experimentally testing the device at conditions that exacerbate
physical DRAM error mechanisms (e.g., charge leakage, circuit
interference). The resulting errors directly reflect the effects
of the error mechanisms, providing researchers with insight
into the physical properties that underlie DRAM operation
(e.g., data-retention, circuit timings, data-pattern sensitivity).
Researchers can then exploit these insights to develop new
mechanisms that improve DRAM and overall system efficiency.
Unfortunately, continued DRAM technology scaling her-
alds grave reliability concerns going forward primarily due
to increasing single-bit error rates that reduce manufacturing
yield [28,37,49,73,82,85,86,92,93,106,114,115]. While manufac-
turers traditionally use redundant circuit elements (e.g., rows,
columns) to repair manufacturing faults [28, 38, 49, 84, 92, 113],
mitigating growing single-cell error rates is no longer tractable
using circuit-level redundancy alone [86].
To maintain desired yield targets, DRAM manufacturers
have recently supplemented circuit-level redundancy with on-
die error correction codes (on-die ECC)1 [49, 86, 92–94]. On-die
ECC is completely invisible to the system [49, 93]: its imple-
mentation, encoding/decoding algorithms, and metadata are
all fully contained within the DRAM device and provide no
feedback about error detection and/or correction to the rest
of the system. On-die ECC is independent of any particular
DRAM standard, and JEDEC specifications do not constrain
how the on-die ECC mechanism may be designed [44]. Since
DRAM manufacturers primarily employ on-die ECC to trans-
parently improve yield, they do not publicly release the ECC
implementation details. Therefore, on-die ECC is typically not
described in DRAM device datasheets, and neither publica-
tions [17, 48, 49, 67, 68, 94] nor whitepapers [41, 86] provide
details of the ECC mechanism for a given product.
Unfortunately, on-die ECC has dire implications for DRAM
error characterization studies since it censors the true errors
that result from physical error mechanisms inherent to DRAM
technology. For a device with on-die ECC, we observe only
post-correction errors, which do not manifest until pre-correction
error rates exceed the ECC’s correction capability. However,
the way in which the ECC mechanism transforms a specific
uncorrectable error pattern is implementation-defined based on
the mechanism’s design, which is undocumented, proprietary,
opaque, and possibly unique per product. Thus, on-die ECC
effectively obfuscates the pre-correction errors such that they
cannot be measured simply by studying post-correction errors
without knowing the ECC scheme.
Figure 1 demonstrates the differences in the observed data-
retention bit error rate (BER) (y-axis) for different on-die ECC
schemes (explained in Section 3.3) given the same pre-correction
1Also known as in-DRAM ECC and integrated ECC.
978-1-7281-0057-9/19/$31.00 ©2019 IEEE
DOI 10.1109/DSN.2019.00017
13
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:59 UTC from IEEE Xplore.  Restrictions apply. 
BER (x-axis). We generate this data in simulation using EINSim,
which is described in detail in Section 5. We see that the ob-
served error rates are dependent on the particular ECC scheme
used, and without knowledge of which ECC scheme is used in
a given device, there is no easy way to tie the observed error
rates to the pre-correction error rates.
Figure 1: Observed vs. pre-correction data-retention bit error
rate (BER) for various ECC schemes (color) and no ECC (black)
assuming 256 data bits written with RANDOM data (simulated).
This means that post-correction errors may not follow ex-
pected, well-studied distributions based on physical error mech-
anisms (e.g., exponential temperature dependence of charge
leakage rates [4, 30, 79], lognormal retention-time distribu-
tions [30, 76, 80, 98]) but rather device-architecture-specific
shapes that cannot be reliably compared with those from a
device with a different ECC scheme. We discuss and experi-
mentally demonstrate the implications of this observation in
Sections 2 and 8, respectively.
Thus, on-die ECC effectively precludes studying DRAM error
mechanisms, motivating the need for a DRAM error charac-
terization methodology that isolates the effects of intrinsic
DRAM behavior from those of the ECC mechanism used in
a particular device. To this end, our goal in this work is to
overcome the barrier that on-die ECC presents against under-
standing DRAM behavior in modern devices with on-die ECC.
To achieve this goal, we develop Error-correction INference
(EIN), a statistical inference methodology that uses maximum
a posteriori (MAP) estimation to 1) reverse-engineer the ECC
scheme and 2) infer the pre-correction error rates from only
the observed post-correction errors. We follow a methodical
four-step process:
First, we tackle the unique reverse-engineering problem
of determining the on-die ECC scheme without any visibility
into the error-correction algorithm, the redundant data, or
the locations of pre-correction errors. Our approach is based
on the key idea that even though ECC obfuscates the exact
locations of the pre-correction errors, we can leverage known
statistical properties of pre-correction error distributions (e.g.,
uniform-randomness [5, 57, 98, 112]) in order to disambiguate
the effects of different ECC schemes (Section 4).
We develop statistical models to represent how a given pre-
correction error distribution will be transformed by an arbi-
trary ECC scheme (Section 4.1). Our models are parameterized
by i) the desired ECC scheme and ii) statistical properties of
the pre-correction error distribution. We then formulate the
reverse-engineering problem as a maximum a posteriori (MAP)
estimation of the most likely model given experimental data
from real devices (Section 4.4).
Second, in order to compute several expressions in our
statistical models that are difficult to evaluate analytically,
we develop EINSim [1], a flexible open-source simulator that
numerically estimates the error-detection, -correction, and
-miscorrection effects of arbitrary ECC schemes for different
pre-correction error distributions (Section 5). EINSim models
the lifetime of a given ECC dataword through the encoding,
error injection, and decoding processes faithful to how these
steps would occur in a real device (Section 5.1). To ensure
that EINSim is applicable to a wide range of DRAM devices
and standards, we design EINSim to be modular and easily
extensible to additional error mechanisms and distributions.
Third, we perform the first experimental study of DRAM
devices with on-die ECC in open literature and demonstrate
how EIN infers both: i) the on-die ECC scheme and ii) the
pre-correction error rates. We study the data-retention char-
acteristics of 232 (82) state-of-the-art LPDDR4 DRAM devices
with (without) on-die ECC from one (three) major DRAM man-
ufacturers across a wide variety of temperatures, refresh rates,
and test patterns. To accurately model pre-correction errors in
EINSim, we first reverse-engineer:
◦ The layout and dimensions of internal DRAM cell arrays.
◦ The locations and frequency distribution of redundant
DRAM rows used for post-manufacturing repair.
Applying EIN to data from devices with on-die ECC, we:
◦ Find that the on-die ECC scheme is a single-error correction
◦ Show that EIN can infer pre-correction error rates given only
Hamming code [31] with (n = 136, k = 128, d = 3).
post-correction errors.
Fourth, we demonstrate EIN’s usefulness by providing a
proof-of-concept experimental characterization study of the
data-retention error rates for the DRAM devices with on-die
ECC. We test across different refresh intervals and tempera-
tures to show that EIN effectively enables inferring the pre-
correction error rates, which, unlike the ECC-obfuscated post-
correction error rates, follow known shapes that result from
well-studied device-independent error mechanisms.
2. Motivation
EIN allows researchers to more holistically study the relia-
bility characteristics of DRAM devices with on-die ECC by
exposing the pre-correction error rates beneath the observed
post-correction errors. This enables researchers to propose new
ideas based on a more general understanding of DRAM devices.
To demonstrate how EIN may be useful, we provide: 1) several
examples of studies and mechanisms that EIN enables and 2)
a discussion about the implications of continued technology
scaling for future error characterization studies.
2.1. Example Applications
We provide several examples of potential studies and mecha-
nisms that are enabled by knowing pre-correction error rates,
which on-die ECC masks and EIN reveals:
◦ Runtime Error Rate Optimization: A mechanism that in-
telligently adjusts operating timings/voltage/frequency to
14
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:57:59 UTC from IEEE Xplore.  Restrictions apply. 
meet dynamically changing system performance/energy/re-
liability targets (e.g., Voltron [15], AL-DRAM [70], AVA-
DRAM [71], DIVA-DRAM [72]) typically needs to profile the
error characteristics of a device for runtime decision-making.
If the particular ECC scheme is known (e.g., using EIN), such
a mechanism can leverage device-independent DRAM er-
ror models for decision-making and quickly interpolating
or extrapolating “safe” operating points rather than having
to: (1) use complex, likely non-parametric, device-specific
models for each supported ECC scheme or (2) characterize
each device across its entire region of operation.
◦ Device Comparison Studies: EIN enables fair comparisons of
DRAM error characteristics between devices with different
(and without) on-die ECC mechanisms. This is useful for
studying the evolution of error characteristics over time,
which provides insight into the state of the industry and fu-
ture technology trends. With DRAM error rates continuing
to worsen (discussed in Section 2.2), such studies can help
predict how much worse future devices may be and how
well current/future error-mitigation mechanisms will cope.
◦ Reverse-Engineering Other ECCs: As we discuss in Section 5.6,
EIN is applicable to other systems (e.g., rank-level ECC,
Flash memory) whose ECC schemes are typically also pro-
prietary. Reverse-engineering their ECC schemes can be
useful for various reasons [7, 19, 21, 26, 131], including fail-
ure analysis, security evaluation, forensic analysis, patent
infringement, and competitive analysis. For these systems,
EIN may provide a way to reverse-engineer the ECC scheme
without requiring hardware intrusion or internal access to
the ECC mechanism as typically required by previous ap-
proaches [19, 122, 123, 131] (discussed in Section 9).
We hope that future work will use EIN well beyond these use
cases and will develop new characterization-driven understand-
ing of devices with on-die ECC.
2.2. Applicability to Future Devices
Despite its energy and reliability benefits, on-die ECC does not
fundamentally prevent error rates from increasing. Therefore,
future DRAM devices may require stronger error-mitigation
solutions, further obfuscating pre-correction error rates and
making error characterization studies even more difficult.
Similarly, other memory technologies (e.g., Flash [7, 8], STT-
MRAM [42, 66, 138], PCM [69, 100, 107, 133], Racetrack [135],
RRAM [132]) suffer from ongoing reliability concerns, and char-
acterizing their error mechanisms requires surmounting any
error-mitigation techniques they use. EIN takes a first step to-
wards enabling a holistic understanding of devices whose error
characteristics are not directly visible, and we hope that future
work leverages this opportunity to develop new mechanisms
to tackle the reliability challenges that lie ahead.
3. Background
We provide the necessary background on DRAM operation and
error-correction codes (ECC) for understanding our motivation,
experimentation, and analysis. For further detail, we refer the
reader to prior works on DRAM optimization [11–14, 32, 33, 52,
57, 61–63, 70–74, 108–110, 136] and coding theory [9, 20, 31, 39,
49, 82, 83, 93, 102, 103, 130].
3.1. DRAM Organization
DRAM is organized in a hierarchy of two-dimensional arrays
as shown in Figure 2. Figure 2a illustrates a single DRAM cell
and its associated peripheral circuitry. Each cell encodes one
bit of data using the charge level in its capacitor. A true-cell
encodes data ‘1’ as fully charged (i.e., VDD) and data ‘0’ as fully
discharged (i.e., VSS), whereas an anti-cell uses the opposite
encoding. The cell is accessed by driving the wordline, which
enables the access transistor and connects the bitline to the cell.
wordline
access 
transistor
storage
capacitor
e
n
i
l
t
i
b
.
.
.
.
.
.
.
.
.
r
e
d
o
c
e
d
w
o
r
.
.
.
...
...
...
...
...
...
sense amplifiers
(a) DRAM cell
(b) DRAM subarray
k
n
a
b
k
n
a
b
k
n
a
b
.
.
.
I/O logic
k
n
a
b
k