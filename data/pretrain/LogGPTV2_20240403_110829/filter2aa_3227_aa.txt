Samsung
Pay:
Tokenized
Numbers,
Flaws and Issues 
Salvador Mendoza 
July 7, 2016 
Introduction 
Samsung Pay is a new method to make purchases over the latest line of Samsung
smartphones devices. The goal is to implement mst technology mainly in every purchase.
However, Samsung Pay could use nfc technology as well. Samsung implements a “new”
sophisticated alphanumeric algorithm called tokenization. Partner with card providers like Visa,
Mastercard and others, Samsung embraced the VTS framework(Visa Token Service) to push its
ambitious project. If you are a Samsung Pay user, you do not even think about the new markets
goals that this company is planning. Such as online purchases or customizable memberships.
Samsung made a step forward in the electronic market. As result, its purchase process is very
interesting. So every time when people add a card at their Samsung Pay, the system generates
a new “virtual random” CC implementing the framework which assigns a token to each card.
This process is based in another package: Spayfw. That token is saved in a Token Vault
somewhere relating the original PAN information. So in each transaction instead of using the
original CC’s data, the system sends a tokenized number: a new card number with some
“parameters” in the tracks. The main idea behind this is that if someone is able to get a token,
he/she will not be able to reuse or extract the original CC’s information. 
Analyzing Spay 
Before I started digging into the apk, I needed to take a look at the Spay’s databases to have a
better understanding of its complexity. I started playing with the terminal and ‘adb’ command,
first I backed up the data of Samsung Pay: 
adb backup com.samsung.android.spay ­f sbackup.ab ↵ 
Decompress it using openssl with zlib support or dd with python. 
dd if=sbackup.ab bs=24 skip=1 | openssl zlib ­d > sbackup.tar ↵ 
[Or Python with zlib support.] 
dd if=sbackup.ab bs=1 skip=24 | python ­c "import 
zlib,sys;sys.stdout.write(zlib.decompress(sys.stdin.read()))" | tar ­xvf ­ ↵ 
If we open the database with Sqlitebrowser program, we can see how Samsung Pay database
is designed. The data is “encrypted” using a private function implementing substitution. Some of
the fields are CC, last four digits of the token, zip code, card name, token id and many more.  
However this is not the only database/data that Samsung Pay implements. Do you remember
that I mentioned the Spayfw package? Well, Spayfw is basically the Visa Token Service
framework with a combination of all rules, commands and connection protocols to make
possible the tokenization process. Some of its databases and info are very restricted and
essential in each transaction. Some of its requested data is stored even in the ‘efs’ folder which
is not easily accessible. Those databases save logs, transaction, memberships and many other
things: 
PlccCardData_enc.db, spayfw.db, spayfw_enc.db, collector.db, collector_enc.db, mc_enc.db... 
Tokenization theory 
According to Samsung’s explanation, there is no way to anyone could guess any token because
the system makes them “randomly.” But how random has to be a number to be completely
random? Also, they mention that they reduced dramatically the security issues with this
technology. However, I found something interesting about its tokenized numbers. Implementing
a usb card reader, I started collecting tracks to find patterns or a way for a possible attack. This
is a complete string transmitted with MST with Samsung Pay app(I changed the original CC
number in the tracks). 
%​4012300001234567^21041010647020079616?​;​4012300001234567^2104101064702007961
6?​~​4012300001234567^21041010647020079616? 
% = Start sentinel for first track 
; = Start sentinel for second track 
~ = Start sentinel for third track 
^ = Separator 
? = End sentinel 
If you notice, even when those are three tracks, the tokenized number is the same one in all of
them. This is logic right? Each purchase goes with an id, so id = token. Even if the card reader
does not detect any data initially, the app has a button to resend the same token again for a
second chance to be detected. Samsung Pay sends the tokens based in a special configuration
to transmit in different baud rate implementing a xml file for this configuration: 
Meaning of each term in the file: 
t2 = track2 
t1 = track1 
TZ = Trailing zeros 
LZ = Leading zeros 
r = Baud rate 
D = Delay rate 
File:  
(t2, r200, LZ30, TZ15, D0); 
(t2, r200, LZ15, TZ30, R, D950); 
(t2, r200, LZ30, TZ15, D0); 
(t2, r200, LZ15, TZ30, R, D950); 
(t2, r800, LZ30, TZ30, D950); 
(t1, r300, LZ30, TZ4, D0); 
(t2, r300, LZ6, TZ30, R, D950); 
(t2, r800, LZ30, TZ30, D950); 
(t1, r300, LZ30, TZ4, D0); 
(t2, r300, LZ6, TZ30, R, D950); 
(t2, r200, LZ30, TZ15, D0); 
(t2, r200, LZ15, TZ30, R, D950);
(t1, r300, LZ30, TZ4, D0); 
(t2, r300, LZ6, TZ30, R, D950); 
(t2, r800, LZ30, TZ30, D950); 
(t1, r300, LZ30, TZ4, D0); 
(t2, r300, LZ6, TZ30, R, D950); 
(t2, r200, LZ30, TZ15, D0); 
(t2, r200, LZ15, TZ30, R, D0); 
[...] 
Analyzing a token  
Why the second track is very important for Samsung Pay? Why the second one and no the first
one or third? Well a normal card reader terminal detects the second track as authorization track
which has all the data to complete a purchase. 
Let’s take a look at that token(It does not matter if it is the first or second track, because it is the
same token after all). 
Splitting the token up: 
­
The first 16 digits are the new assigned CC number: 4012300001234567 
4012300001234567 
401230 
000 
01234567 
New CC number 
Private BIN # 
Never change, from 
original CC 
Still 
researching 
­
The last 20 digits are the token’s heart: 21041010647020079616 
2104​­​101​­​0647020079616 
21/04 
101 
064702­​0079​­​616 
Token 
New 
expiratio
n date. 
Service code:  
1​: Available for international 
interchange. 
0​: Transactions are 
authorized following the 
normal rules. 
1​: No restrictions. 
64702​: It handles 
transaction’s 
range/CVV role. 
0079​: Transaction’s 
id, increase +1 in 
each transaction. 
616​: Random 
numbers, to fill 
IATA/ABA format, 
generated from a 
cryptogram/array 