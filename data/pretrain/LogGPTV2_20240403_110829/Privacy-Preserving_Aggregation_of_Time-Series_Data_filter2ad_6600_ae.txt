challenger returns αi to the adversary when asked.
Challenge. The adversary speﬁcies an uncompromised
set U ⊆ {0, . . . , n}. The challenger ﬂips a random
coin b. If b = 0, the challenger returns to the adver-
sary {hαi|i ∈ U}. If b = 1, the challenger picks
|U| random elements h(cid:48)
|U| from the group
1, . . . , h(cid:48)
G, such that (cid:89)
(3)
h(cid:48)
i =
i∈U
(cid:89)
hαi
i∈U
1, . . . , h(cid:48)
The challenger returns h(cid:48)
sary.
|U| to the adver-
More Queries. The adversary can make more “com-
promise” queries, as in the previous query stage.
Guess. The adversary guesses either b = 0 or b = 1.
The adversary wins the game if she has not asked for
any αi for i ∈ U, and if she successfully guesses b. We
also require that |U| ≥ 2, since otherwise, the distribu-
tions of the outputs of the challenger when b = 0 and
b = 1 are trivially indistinguishable.
Lemma 2. The above game is difﬁcult for computation-
ally bounded adversaries assuming Decisional Difﬁe-
Hellman is hard for group G.
Proof. By the hybrid argument. Deﬁne the follow-
ing sequence of hybrid games. Assume that the set
U speciﬁed by the adversary in the challenge stage
is U = {i1, i2, . . . , im}. For simplicity, we write
(β1, . . . , βm) := (αi1 , . . . , αim). In Gamed, the chal-
lenger reveals the following to the adversary:
R1, R2, . . . , Rd, hβd+1, . . . , hβm
Here, each Ri(i ∈ [d]) means an independent fresh ran-
dom number, and the following condition holds:
(cid:89)
(cid:89)
Ri =
hβi
1≤i≤d
1≤i≤d
It is not hard to see that Game1 is equivalent to the
case when b = 0. Moreover, Gamem−1 is equivalent to
the case when b = 1.
Due to the hybrid argument, it sufﬁces to show that
adjacent games Gamed−1 and Gamed are computation-
ally indistinguishable. To demonstrate this, we show
that if, for some d, there exists a polynomial-time ad-
versary A who can distinguish between Gamed−1 and
Gamed, we can then construct an algorithm B which can
solve the DDH problem.
Suppose B obtains a DDH tuple (g, gx, gy, T ). B’s
task is to decide whether T = gxy or whether T is a
random element from G. Now B randomly guesses two
indices j and k to be the dth and the (d + 1)th values
of the set U speciﬁed by the adversary in the challenge
n2 , and in
phase. The guess is correct with probability 1
case the guess turns out to be wrong later, the algorithm
(cid:80)
B simply aborts.
Now B picks random exponents {αi}i(cid:54)=j,i(cid:54)=k. B im-
plicitly sets αk = x and αj = −
i(cid:54)=j αi. Notice that
(cid:81)
B does not know the values of αj and αk, however,
it knows or can compute the values of gαk = gx and
i(cid:54)=j,i(cid:54)=k gαi. B gives
gαj = (
A the tuple (g, h = gy, gα1 , . . . , gαn).
When A asks for any exponent except αj and αk, B
simply returns the corresponding αi value to A. If A
asks for αj or αk, the algorithm B aborts.
In the challenge phase, A submits a set U =
{i1, i2, . . . im}. If j and k are not the dth and the (d+1)th
(cid:81)
i(cid:54)=j gαi)−1 = (gx)−1 ·
values of the set U, i.e., if id (cid:54)= j or id+1 (cid:54)= k, the algo-
rithm B aborts.
If id = j and id+1 = k, the algorithm B returns the
following tuple to A.
(cid:81)
R1, R2, . . . , Rd−1,
i /∈{i1,...,id+1}(gy)αi ·
(
(gy)αid+2 , . . . , (gy)αim
(cid:81)
d−1
i=1 Ri · T )−1, T,
It is not hard to see that if T = gxy, then the above game
is equivalent to Gamed−1. Otherwise, if T ∈R G, then
the above game is equivalent to Gamed. Therefore, if the
adversary A has a non-negligible advantage in guessing
whether it is playing game Gamed−1 or Gamed with B,
then the algorithm B would be able to solve the DDH
problem with non-negligible advantage as well.
Proof of Theorem 1: First, we will make a small
modiﬁcation to the aggregator oblivious security game.
In the Encrypt queries, if the adversary submits a re-
quest for some tuple (i, x, t∗) where t∗ is the time step
speciﬁed in the Challenge phase, the challenger treats
this as a Compromise query, and simply returns the ski
to the adversary. Given ski, the adversary can compute
the requested ciphertext herself. Therefore, this modiﬁ-
cation actually gives more power to the adversary. From
now on, we will assume that the adversary does not
make any Encrypt queries for the time t∗.
We divide our security game into two cases. Let
K ⊆ [n] denote the set of compromised participants (not
including the aggregator). Let K := [n]\K denote the
set of uncompromised participants.
• Case 1. U (cid:54)= K or the aggregator capability has
not been compromised. In other words, either there
exists an uncompromised participant or the aggre-
gator capability has not beem compromised.
In
this case, it sufﬁces to show that the adversary can-
not distinguish between “real” or “random”, that is,
whether the challenger returns a faithful encryption
of the plaintext submitted in the challenge stage, or
a random tuple picked from the appropriate group.
• Case 2. U = K and the aggregator capability
has been compromised. In this case, we show that
the adversary cannot distinguish whether the chal-
lenger returns a faithful encryption of the plaintext
submitted in the challenge stage, or a random tuple
with the same product.
Given an adversary A who can break the PSA game
with non-negligible probability, we construct an algo-
rithm B who can solve the above intermediate problem
with non-negligible probability.
Setup. B obtains from its challenger C the fol-
lowing tuple g, h, gα0, gα1 , . . . , gαn. B implicitly
sets α0 to be the data aggregator’s capability, and
α1, . . . , αn to be the secret keys of participants 1
through n respectively. The public params is g.
The algorithm B makes a random guess as to
whether Case 1 or Case 2 will happen, and if the
guess turns out to be wrong, the simulator sim-
ply aborts. Moreover, if B guesses Case 1, then
B will randomly guess a participant (or aggregator)
j∗ ∈ (K\U) ∪ {0} that remains uncompromised
at the end of the game. If the guess turns out to be
wrong later, B aborts.
Let qH denote the total number of oracle queries
made by the adversary A and by the algorithm B
itself. B guesses at random an index k ∈ [qH].
Suppose the input to the kth random oracle query
is t∗. The algorithm B assumes that t∗ will be the
challenge time step.
If the guess turns out to be
wrong later, B simply aborts.
Hash Function Simulation. The adversary submits a
hash query for the integer t. B ﬁrst checks the list
L to see if t has appeared in any entry (t, z). If so,
B returns gz to the adversary. Otherwise, if this is
not the kth query, B picks a random exponent z and
returns gz to the adversary, and saves (t, z) to a list
L. For the kth query, B returns h.
Queries.
• Encrypt. The adversary A submits an En-
crypt query for the tuple (i, x, t). As men-
tioned above, in the modiﬁed version of the
game, we ensure that t (cid:54)= t∗, since otherwise,
we simply treat it as a Compromise query.
B checks if a hash query has been made on
t. If not, B makes a hash oracle query on t.
As a result, B knows the discrete log of H(t).
Let H(t) = gz, then B knows z. Since B
also knows gαi, B can compute the ciphertext
gx · (gz)αi as gx · (gαi)z.
• Compromise. B forwards A’s query to its
own challenger C, and forwards the answer
αi to A.
Challenge. The adversary A submits a set U and a
time t∗, as well as plaintexts {xi|i ∈ U}.
(We
consider the real-or-random version of the security
game.) If t∗ does not agree with the value submit-
ted in the kth hash query, then B aborts.
If B has guessed Case 1 at the beginning of the
game, then it submits the set U ∪ {j∗} in a Chal-
lenge query to its own challenger C. As a result, it
obtains a tuple {Ti}i∈U , Tj∗.
If B has guessed Case 2, then it simply submits the
set U in a Challenge query to its own challenger.
As a result, it obtains a tuple {Ti}i∈U .
In both cases, the challenger returns the following
ciphertexts to the adversary:
∀i ∈ U : gxi · Ti
More queries. Same as the Query stage.
Guess. If the adversary A guesses that B has returned
a random tuple then B guesses b(cid:48) = 1. Otherwise,
B guesses that b(cid:48) = 0.
• Case 1.
If the challenger C returns to B a faith-
ful Difﬁe-Hellman tuple ∀i ∈ U : Ti = hαi, and
Tj∗ = hαj∗ , then the ciphertext returned to the ad-
versary A is a faithful encryption of the plaintext
submitted by the adversary. Otherwise, if the chal-
lenger returns to B a random tuple under the prod-
uct constraint, then the ciphertext returned to A is
a random tuple.
• Case 2. If the challenger C returns gives B a faith-
ful Difﬁe-Hellman tuple ∀i ∈ U : Ti = hαi, then
the ciphertext returned to the adversary A is a faith-
ful encryption of the plaintext submitted by the ad-
versary. Otherwise, if the challenger returns to B a
random tuple under the product constraint, then the
ciphertext returned to A is a random tuple under the
product constraint.
B Proof of Utility
Lemma 3 (Moment Generating Function). Suppose 1  1. Let G be a random variable having
distribution Geom(α) and W be a random variable hav-
ing distribution Geom+(α). It follows that ri and G can
be sampled in the following way.
ri :=
0
G
(cid:26)
 0
with probability 1 − β
with probability β
with probability α−1
α+1
with probability 1
α+1
with probability 1
α+1
G :=
W
−W
By standard computation,
E[exp(hW )] = (α−1)eh
α−eh .
for h  1,
√
α−1 ≤ 1
α
ln α = ∆
 .