### Module Path and Typing Assumptions

Given a module path \( p \) where:
\[ \Gamma \vdash p : \text{sig } S1; \text{module } x : M; \_ \text{ restr } \_ \text{ end} \]

We assume that some form of subject reduction property holds for \( p \). Specifically, we assume:
\[ f\text{-res}_\Gamma(p) = (\text{struct st1; module } x = m; \_ \text{ end}) \]

### Memory Restriction Operations and Type Erasure Functions

#### Memory Restriction Union (⊔)
\[ (+\text{all mem}\{v_1, \ldots, v_n\}) \sqcup (+\text{all mem}\{v'_1, \ldots, v'_m\}) = +\text{all mem}(\{v_1, \ldots, v_n\} \cap \{v'_1, \ldots, v'_m\}) \]
\[ (+\text{all mem}\{v_1, \ldots, v_n\}) \sqcup \{v'_1, \ldots, v'_m\} = \{v_1, \ldots, v_n\} \cup \{v'_1, \ldots, v'_m\} \]
\[ (+\text{all mem}\{v_1, \ldots, v_n\}) \sqcup \{v'_1, \ldots, v'_m\} = +\text{all mem}(\{v_1, \ldots, v_n\} \setminus \{v'_1, \ldots, v'_m\}) \]

#### Memory Restriction Intersection (⊓)
\[ (+\text{all mem}\{v_1, \ldots, v_n\}) \sqcap (+\text{all mem}\{v'_1, \ldots, v'_m\}) = +\text{all mem}(\{v_1, \ldots, v_n\} \cup \{v'_1, \ldots, v'_m\}) \]
\[ (+\text{all mem}\{v_1, \ldots, v_n\}) \sqcap \{v'_1, \ldots, v'_m\} = \{v_1, \ldots, v_n\} \cap \{v'_1, \ldots, v'_m\} \]
\[ (+\text{all mem}\{v_1, \ldots, v_n\}) \sqcap \{v'_1, \ldots, v'_m\} = \{v'_1, \ldots, v'_m\} \setminus \{v_1, \ldots, v_n\} \]

#### Memory Restriction Subset (⊑)
\[ (+\text{all mem}\{v_1, \ldots, v_n\}) \sqsubseteq (+\text{all mem}\{v'_1, \ldots, v'_m\}) \]
\[ \{v_1, \ldots, v_n\} \sqsubseteq \{v'_1, \ldots, v'_m\} \]
\[ (+\text{all mem}\{v_1, \ldots, v_n\}) \sqsubseteq \{v'_1, \ldots, v'_m\} \]
\[ \{v_1, \ldots, v_n\} \sqsubseteq (+\text{all mem}\{v'_1, \ldots, v'_m\}) \subseteq \{v_1, \ldots, v_n\} \]
\[ \{v_1, \ldots, v_n\} \cap \{v'_1, \ldots, v'_m\} = \emptyset \]

### Subject Reduction Property

Assume the following derivation:
\[ \Gamma \vdash p: \text{struct st1; module } x = m; \_ \text{ end} : \text{sig } S1; \text{module } x : M; \_ \text{ restr } \_ \text{ end} \]

Then, \( p.x \) resolves to \( m \), i.e., \( f\text{-res}_\Gamma(p) = m \). However, we do not have:
\[ \Gamma \vdash p.x \, m : M \]

The issue is that the sub-module \( m \) may use sub-modules declared in \( \text{st1} \). Therefore, it is not well-typed in \( \Gamma \), but in an extended typing environment where the sub-module declarations in \( \text{st1} \) (which have types \( S1 \)) have been added to \( \Gamma \).

For example:
\[ \text{st1} = (\text{module z = m0}) \]
\[ m = z \]

Thus, we cannot state a subject reduction property for the module resolution function with respect to the typing judgment \( \Gamma \vdash p \, m : M \). Instead, we introduce another typing judgment \( \Gamma \Vdash m : M \), which is similar to \( \Gamma \vdash p \, m : M \) but is used to type a module expression in an already typed environment. The definition is postponed to the long version [5].

Using this alternative typing judgment, we can state the desired subject reduction property (the proof is also in [5]).

**Lemma C.1 (Subject Reduction):** If \( \Gamma \Vdash E \) and \( \Gamma \Vdash m : M \), then \( \Gamma \Vdash \text{res}_E(m) : M \) whenever \( \text{res}_E(m) \) is well-defined.

### Instrumented Semantics

#### Program Semantics
The semantics \(\llbracket s \rrbracket_{E, \rho}^\nu\) depends on the initial memory \(\nu\), the environment \(E\), and the interpretation \(\rho\) of \(E\)'s abstract modules. Essentially, \(\llbracket s \rrbracket_{E, \rho}^\nu\) is a discrete distribution over \(M \times \mathbb{N}\), where the integer component is the cost of evaluating \(s\) in \((E, \rho)\), starting from the memory \(\nu\). The \(E\)-cost of an instruction \(s\) under memory \(\nu\) and interpretation \(\rho\), denoted by \(\text{cost}_{E, \rho}^\nu(s) \in \mathbb{N} \cup \{+\infty\}\), is the maximum execution cost in any final memory, defined as:
\[ \text{cost}_{E, \rho}^\nu(s) = \inf \{ c' \mid \Pr((_, c) \leftarrow \llbracket s \rrbracket_{E, \rho}^\nu; c \leq c') = 1 \} \]

#### Judgments Semantics
The judgment \(E \vdash \{\phi\} s \{\psi \mid t\}\) states that:
1. The memory \(\nu\) obtained after executing \(s\) in an initial memory \(\nu \in \phi\) must satisfy \(\psi\).
2. The complexity of the instruction \(s\) is upper-bounded by the complexity of the concrete code in \(s\), plus the sum over all abstract oracles \(A.f\) of the number of calls to \(A.f\) times the intrinsic complexity of \(A.f\). Formally:
\[ \text{cost}_{E, \rho}^\nu(s) \leq t[\text{conc}] + \sum_{A \in \text{abs}(E)} \sum_{f \in \text{procs}(E(A))} t[A.f] \cdot \text{compl}_{E, \rho}^{A.f} \]
where \(\text{compl}_{E, \rho}^{A.f}\) is the intrinsic complexity of the procedure \(A.f\), excluding calls to \(A\)'s functor parameters.

#### Outline of This Section
- **Appendix D.1:** Semantics of our programs.
- **Appendix D.2:** Additional complexity measures: the number of calls a program execution makes to some abstract procedure and the intrinsic cost of a program execution.
- **Appendix D.3:** Semantics of our cost judgments.

### Module Signature and Structure Sub-typing

#### SubSig
\[ \frac{\vdash S1 <: S2 \quad \vdash \theta1 <: \theta2}{\vdash \text{sig } S1 \text{ restr } \theta1 \text{ end} <: \text{sig } S2 \text{ restr } \theta2 \text{ end}} \]

#### SubFunc
\[ \frac{\vdash M' <: M \quad \vdash \text{func}(x : M0) M <: \text{func}(x : M'_0) M'}{M'_0 <: M0} \]

#### SubModDecl
\[ \frac{\vdash M1 <: M2}{\vdash \text{module } x : M1 <: \text{module } x : M2} \]

### Statements and Function Paths Typing

#### T-Abort
\[ \Gamma \vdash \text{abort} \]

#### T-Skip
\[ \Gamma \vdash \text{skip} \]

#### T-Seq
\[ \frac{\Gamma \vdash s1 \quad \Gamma \vdash s2}{\Gamma \vdash s1; s2} \]

#### T-Assign
\[ \frac{\Gamma \vdash x : \tau \quad \Gamma \vdash e : \tau}{\Gamma \vdash x \leftarrow e} \]

#### SubStruct
\[ \frac{\forall i \in \{1, \ldots, n\}, \vdash Di <: D'_i}{\vdash D1; \ldots; Dn <: D'_1; \ldots; D'_n} \]

#### T-Rand
\[ \frac{\Gamma \vdash x : \tau \quad \Gamma \vdash d : \tau}{\Gamma \vdash x \leftarrow d} \]

#### T-Call
\[ \frac{\Gamma \vdash F : \text{proc } f((\vec{v} : \vec{\tau}) \to \tau_r) \quad \Gamma \vdash x : \tau_r \quad \Gamma \vdash \vec{e} : \vec{\tau}}{\Gamma \vdash x \leftarrow \text{call } F(\vec{e})} \]

#### T-Proc1
\[ \frac{\Gamma \vdash p : \text{sig } (S1; \text{proc } f((\vec{v} : \vec{\tau}) \to \tau_r); S2) \text{ restr } \theta \text{ end}}{\Gamma \vdash p.f : \text{proc } f((\vec{v} : \vec{\tau}) \to \tau_r)} \]

#### T-Proc2
\[ \frac{\Gamma(p.f) = \text{proc } f((\vec{v} : \vec{\tau}) \to \tau_r = \_)}{\Gamma \vdash p.f : \text{proc } f((\vec{v} : \vec{\tau}) \to \tau_r)} \]

#### T-If
\[ \frac{\Gamma \vdash e : \text{bool} \quad \Gamma \vdash s1 \quad \Gamma \vdash s2}{\Gamma \vdash \text{if } e \text{ then } s1 \text{ else } s2} \]

### Expressions Typing

#### ExprApp
\[ \frac{\forall i \in \{1, \ldots, n\}, \Gamma \vdash e_i : \tau_i \quad \text{type}(f) = \tau_1 \times \cdots \times \tau_n \to \tau}{\Gamma \vdash f(e_1, \ldots, e_n) : \tau} \]

### Restriction Entailment

#### ⊑-Proc
\[ \frac{\forall f \in \text{dom}(\theta, \theta'), \vdash \theta[f] <: \theta'[f]}{\vdash \theta <: \theta'} \]

#### ⊑-Split
\[ \frac{\vdash \lambda_c <: \lambda_c' \quad \vdash \lambda_m <: \lambda_m'}{\vdash \lambda_m \land \lambda_c <: \lambda_m' \land \lambda_c'} \]

#### ⊑-Top
\[ \vdash \lambda <: \top \]

#### T-While
\[ \frac{\Gamma \vdash e : \text{bool} \quad \Gamma \vdash s}{\Gamma \vdash \text{while } e \text{ do } s} \]

#### ExprVar
\[ \frac{\Gamma(v) = \tau}{\Gamma \vdash v : \tau} \]

#### ⊑-Mem
\[ \frac{\lambda_m \sqsubseteq \lambda_m'}{\vdash \lambda_m <: \lambda_m'} \]

#### ⊑-MemTop
\[ \vdash \lambda_c <: \top \]

#### ⊑-Compl
\[ \frac{\forall i, k_i \leq k_i' \quad k \leq k'}{\vdash \text{compl}[intr : k, x_1.f_1 : k_1, \ldots, x_n.f_n : k_n] <: \text{compl}[intr : k', x_1.f_1 : k_1', \ldots, x_n.f_n : k_n']} \]

### Memory Restriction

\[ (+\text{all mem}\{v_1, \ldots, v_n\}) \sqsubseteq (+\text{all mem}\{v'_1, \ldots, v'_m\}) \]