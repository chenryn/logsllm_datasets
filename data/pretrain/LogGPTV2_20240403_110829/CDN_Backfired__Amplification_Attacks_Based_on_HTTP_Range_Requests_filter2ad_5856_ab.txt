We test 13 popular CDNs around the world,
including
Akamai, Alibaba Cloud, Azure, CDN77, CDNsun, Cloudﬂare,
CloudFront, Fastly, G-Core Labs, Huawei Cloud, KeyCDN,
StackPath, and Tencent Cloud. These CDNs are often studied
in previous related works [3], [9], [10], and most of them rank
high in the market share [11]. Moreover, most of these CDNs
provide free or free-trial accounts, which indicates little cost
to launch an attack.
Akamai only provides services for enterprise customers, but
we manage to conﬁgure an Akamai service on the Microsoft
Azure platform and have a free trial for one month. We
check all ingress and egress IPs in corresponding Akamai
experiments and conﬁrmed that these IPs indeed belong to
Akamai. Tencent Cloud only provides paid services, but it
16
gives away 50GB of free trafﬁc every month within half a
year. Neither Huawei Cloud nor Alibaba Cloud provides free
services, and we have spent less than $10 in our experiments.
In all subsequent experiments, we deploy our origin server
individually behind these CDNs and apply their default con-
ﬁguration.
B. Differences in CDNs Handling Range Requests
According to HTTP speciﬁcations [2], [7], [8], HTTP imple-
mentations ought to support range requests when possible. To
ﬁnd out which CDNs support range requests, we invalidate
it on our origin server and send a valid range request to
each CDN. The result is that our origin server always returns
a 200 response with no Accept-Range header, but all
CDNs return a 206 response with an Accept-Range header
whose ﬁeld value is “bytes”. Therefore, we conclude that these
13 CDNs all support range requests, indeed following the
suggestion of the speciﬁcations.
However, it is not clearly deﬁned in the speciﬁcations how
CDNs should forward a range request. We ﬁnd that CDNs
have different policies to handle the Range header before
forwarding a valid range request, including:
• Laziness – Forward the Range header without change.
• Deletion – Remove the Range header directly.
• Expansion – Extend it to a larger scale of byte range.
When receiving a range request, most CDNs prefer to
adopt the Deletion policy or the Expansion policy (see
Section V-A) because they believe that the client may continue
requesting other byte ranges of the same resource. In this
case, the CDN removes the Range header or extends it to
a larger byte range when forwarding a range request, and then
caches the responses for subsequent range requests. This does
optimize caching, reduce access latency, and prevent excessive
back-to-origin requests.
The range request mechanism also allows the client
to
request multiple sub-ranges of the target resource, as de-
scribed in Section II-B. However, RFC2616 [7] places no
restrictions on such multi-range requests. The “Apache Killer”
[12], known as CVE-2011-3192 [13], can exhaust memory on
the Apache server by creating a number of threads that use
a Range header with multiple ranges. Therefore, RFC7233
[2] adds some security considerations to multi-range requests,
suggesting that an HTTP server ought to ignore, coalesce,
or reject range requests with more than two overlapping
ranges or many small ranges in the Range header. We ﬁnd
that most CDNs indeed adopt the suggestion of RFC7233 but
unfortunately, some CDNs ignore it (see Section V-A).
IV. RANGE-BASED HTTP AMPLIFICATION ATTACKS
The Deletion and Expansion policy are beneﬁcial for CDNs
to improve service performance. But we notice that these
policies will require CDNs to retrieve many more bytes from
the origin server than the ones requested by the client. Also, if
a CDN returns a multi-part response to a multi-range request
without checking if ranges overlap, the response sent by the
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:57 UTC from IEEE Xplore.  Restrictions apply. 
CDN can be thousands of times larger than the one from the
origin server. These cases will cause serious trafﬁc differences
between different connections in the network path from the
client to the origin server.
A. Threat Model
The signiﬁcant trafﬁc differences caused by range-speciﬁc
policies will bring a novel class of trafﬁc ampliﬁcation attacks,
denoted “Range-based Ampliﬁcation (RangeAmp) Attacks”.
We identiﬁed two scenarios of the RangeAmp attacks and
respectively present them in Section IV-B and Section IV-C.
little traffic
large traffic
little traffic
FCDN
BCDN
Origin
Sending range requests
little traffic
large traffic
(b)
(a)
Attacker
Att k
CDN
Origin
Fig. 3. General construction of the RangeAmp Attacks
In a RangeAmp attack, the attacker is able to craft malicious
but legal range requests to the CDN, as shown in Fig 3. One
of the victims is the origin server in Fig 3a, which is being
normally hosted on the CDN by the owner, or maliciously
deployed on the CDN by the attacker [14]. The other victims
are the FCDN and the BCDN in Fig 3b, which is maliciously
cascaded together by the attacker.
Through an empirical study, we show that
the attacker
can perform a trafﬁc ampliﬁcation attack with little cost and
exhaust the bandwidth of its victims.
B. Small Byte Range(SBR) Attack
If a CDN adopts the Deletion or Expansion policy to
handle range requests, an attacker can craft a Range header
with a small byte range to launch a RangeAmp attack. We
call it “Small Byte Range(SBR) Attack”. In an SBR attack,
the cdn-origin connection will transport a much larger trafﬁc
than the client-cdn connection, which makes the attacker able
to attack against the origin server hosted on the CDN.
GET /test.jpg HTTP/1.1
Range: bytes=
(cid:18990)
GET /test.jpg HTTP/1.1
Range: bytes=
(cid:18991)
Att k
Attacker
(cid:18993)
206 response
small traffic
CDN
(cid:18992)
206/200 response
large traffic
Origin
Fig. 4. Flow and example construction of the SBR Attack
As shown in Fig 4, the attacker crafts a range request with
a small byte range like “Range: bytes=0-0”, and sends it to a
vulnerable CDN. As described at the end of Section II-A, an
attacker can easily make a cache miss. Therefore, the CDN
will remove the Range header or extend it to a larger byte
range, and then forward the request to the origin server. This
results in that the origin server returns an entire copy or a large
range of the target resource, but the CDN returns a partial
content with only the speciﬁed range, which can even be a
single byte.
In an SBR attack, response trafﬁc in the client-cdn connec-
tion is just hundreds of bytes (little). If the CDN adopts the
Deletion policy, response trafﬁc in the cdn-origin connection
is equivalent
to the entire target resource (much greater).
Therefore, the bigger the target resource, the larger the
ampliﬁcation factor. But if the CDN adopts the Expansion
policy, the ampliﬁcation factor will only be a fraction of the
one in the previous case.
C. Overlapping Byte Ranges(OBR) Attack
If the FCDN adopts the Laziness policy and the BCDN
returns a multi-part response without checking whether
ranges overlap, an attacker can craft a Range header with
multiple overlapping byte ranges to launch another RangeAmp
attack. We call it “Overlapping Byte Ranges(OBR) Attack”. In
an OBR attack, the fcdn-bcdn connection will transport a much
larger trafﬁc than the bcdn-origin connection, which makes
the attacker able to greatly consume the bandwidth available
between the FCDN and the BCDN. The attacker can send all
multi-range requests to the same ingress node of the FCDN,
and set the FCDN’s origin server to be a speciﬁc ingress node
of the BCDN, to perform the OBR attack against these speciﬁc
nodes.
e s
g
n
FCDN
e st 
g  r a
u
q
e r e
g
n
p i n
p
e rla
(cid:18990)
r a
v
n   o
n o
ran
verlap
ge req
pin
uest 
(cid:18991)
g ran
ges
(cid:18995)
n s e
6  r e s p
littl e tr a ffi c
o
0
2
Attacker
Att k
2
0
la
r
g
(cid:18994)
p
6 res
e tr
affic
o
n
se
g
n
(r a
st
e
u
q
e ) r e
(cid:18992)
(cid:18993)
n s e
0  r e s p
littl e tr a ffi c
2
0
o
Origin
BCDN
Fig. 5. Flow and example construction of the OBR Attack
As shown in Fig 5, the attacker crafts a multi-range request
with n overlapping byte ranges like “Range: bytes=0-,0-,...,0-
” (the number of “0-” is n), and sends it to the FCDN. The
FCDN directly forwards it to the BCDN. After handling the
Range header, the BCDN forwards the request to the origin
server where range requests are disabled by the attacker. The
origin server will return a 200 response with the entire copy
of the target resource, but the BCDN will return a n-part
response, which can be up to n times the size of the entire
target resource.
The OBR attacker can set a small TCP Receive Window to
make himself only receive little data [15], [16]. Besides, some
CDNs will maintain the connection between itself and the
upstream server when the client-cdn connection is abnormally
aborted [5], such as CDNsun and CDN77. Thus, the attacker is
able to consume much smaller resources by actively aborting
the client-cdn connection.
In an OBR attack, when the target resource is ﬁxed, re-
sponse trafﬁc in the bcdn-origin connection is always roughly
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:57 UTC from IEEE Xplore.  Restrictions apply. 
17
the same. But response trafﬁc in the fcdn-bcdn connection
is nearly proportional to the number of overlapping ranges.
Apparently, the greater the number of overlapping ranges,
the larger the ampliﬁcation factor. But
the number of
overlapping ranges is limited by the maximum length of the
Range header which is generally restricted by the request
header size limit of particular CDN. Therefore, the maximum
length of the Range header ﬁnally determines the upper-
bound of the ampliﬁcation factor.
V. REAL-WORLD EVALUATION
To explore the feasibility and severity of RangeAmp vulner-
abilities in the wild, we conduct a series of experiments. We
examine which CDNs are vulnerable to the RangeAmp attacks,
calculate the actual ampliﬁcation factors, and analyze the
practical impacts. In all experiments, our origin server is the
same Linux server with 2.4GHz of CPU, 16G of memory and
1000Mbps of bandwidth. And our origin website is powered
by Apache/2.4.18 with the default conﬁguration applied.
A. Feasibility of the RangeAmp Attacks
To analyze whether RangeAmp vulnerabilities exist in prac-
tical environments, we test the actual range-speciﬁc policies
of each CDN to ﬁgure out which CDNs are vulnerable to the
SBR and/or OBR attack.
In our ﬁrst experiment, the data-set is a large number of
valid range requests automatically generated based on the
ABNF rules described in the RFCs [2], [7], [8]. We send
these range requests to each CDN and ensure that they will be
forwarded to our origin server. At the same time, we collect
all requests and responses on the client and the origin server.
We compare the request sent by the client with the cor-
responding one received by the origin server to analyze the
range forwarding behaviors of each CDN, and the vulnerable
results of small byte range(s) and multiple overlapping ranges
are summarized respectively in Table I and Table II. We also
compare the payload size of the response sent by the server
and the corresponding one received by the client to discover
the vulnerable replying behaviors of multi-range requests, as
shown in Table III.
Table I shows that a total of 13 CDNs are vulnerable
to the SBR attack. The second column lists the vulnerable
range formats, and the third column presents the CDNs’ actual
policies of handling the corresponding Range headers. The
details are shown below:
1) Akamai, Alibaba Cloud, CDN77, CDNsun, Cloud-
ﬂare, Fastly, G-Core Labs, Huawei Cloud, and Tencent
Cloud adopt the Deletion policy for some formats of the
Range header. Among them, the entries with (*) are con-
ditional. Alibaba Cloud and Tencent Cloud both provide a
Range option to conﬁgure whether the back-to-origin request
contains a Range header, and only when this option is set
to disable, the vulnerable range forwarding behaviors shown
in Table I occurs. Huawei Cloud also provides such a Range
option, but it is vulnerable only when this option is set to
enable. Cloudﬂare allows its users to customize caching rules,
if
and it is vulnerable only when the target path is conﬁgured to
be cacheable.
2) Azure ﬁrst adopts the Deletion policy to handle a
Range header