title:Noise*: A Library of Verified High-Performance Secure Channel Protocol
Implementations
author:Son Ho and
Jonathan Protzenko and
Abhishek Bichhawat and
Karthikeyan Bhargavan
1
2
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Noise*: A Library of Veriﬁed High-Performance
Secure Channel Protocol Implementations
Son Ho
Inria Paris
Jonathan Protzenko
Microsoft Research
Abhishek Bichhawat
IIT Gandhinagar
Karthikeyan Bhargavan
Inria Paris
Abstract—The Noise protocol framework deﬁnes a succinct
notation and execution framework for a large class of 59+
secure channel protocols, some of which are used in popular
applications such as WhatsApp and WireGuard. We present a
veriﬁed implementation of a Noise protocol compiler that takes
any Noise protocol, and produces an optimized C implementation
with extensive correctness and security guarantees. To this end,
we formalize the complete Noise stack in F*, from the low-level
cryptographic library to a high-level API. We write our compiler
also in F*, prove that it meets our formal speciﬁcation once and
for all, and then specialize it on-demand for any given Noise
protocol, relying on a novel technique called hybrid embedding.
We thus establish functional correctness, memory safety and a
form of side-channel resistance for the generated C code for
each Noise protocol. We propagate these guarantees to the high-
level API, using defensive dynamic checks to prevent incorrect
uses of the protocol. Finally, we formally state and prove the
security of our Noise code, by building on a symbolic model of
cryptography in F*, and formally link high-level API security
goals stated in terms of security levels to low-level cryptographic
guarantees. Ours are the ﬁrst comprehensive veriﬁcation results
for a protocol compiler that
targets C code and the ﬁrst
veriﬁed implementations of any Noise protocol. We evaluate
our framework by generating implementations for all 59 Noise
protocols and by comparing the size, performance, and security
of our veriﬁed code against other (unveriﬁed) implementations
and prior security analyses of Noise.
I. INTRODUCTION
Modern distributed applications rely on a variety of secure
channel protocols, including TLS, QUIC, Signal, IPsec, SSH,
WireGuard, OpenVPN, and EDHOC. Despite the similarity
in their high-level goals, each of these protocols makes
signiﬁcantly different design choices based on the target
network architecture, authentication infrastructure, and desired
security goals. For example, the Transport Layer Security
(TLS) protocol is used to secure live TCP connections between
clients and servers using the X.509 public key infrastructure. In
contrast, the Signal messaging protocol aims to provide strong
conﬁdentiality guarantees like post-compromise security [1] for
long-running asynchronous messaging conversations between
smartphones. All these protocols form a cornerstone of Internet
security, so the correctness and security of their varied designs
and diverse implementations is a tangible concern.
Security Analyses of Secure Channels. Several prior works
establish security theorems for well-known secure channel
protocols. However, as protocols get more complex, building
and checking pen-and-paper proofs for complete protocols
becomes infeasible. To address this, formal veriﬁcation tools
are now routinely applied to obtain mechanized security proofs
for cryptographic protocols. For example, tools like ProVerif [2]
and Tamarin [3] have been used to automatically analyze
protocols like TLS and Signal [4], [5], [6], by relying on
abstract symbolic assumptions on the underlying cryptography.
Computational provers like CryptoVerif [7] and Computational
RCF [8] have also been used to verify some of these protocols,
providing more precise security guarantees than symbolic tools,
but requiring more human intervention [9], [10], [5], [6].
We refer the reader to [11] for a full survey of computer-
aided cryptographic proofs. On the whole, veriﬁcation tools
have now reached a level of maturity such that they can analyze
the high-level design of most modern cryptographic protocols.
Veriﬁed Protocol Implementations. Even if the design of a
protocol has been veriﬁed, writing a secure implementation
remains a challenge. Protocol implementations have to account
for many details that are left out of high-level security proofs,
such as the crypto library, message formats, state machines, key
storage and management, multiple concurrent sessions, and a
high-level user-facing API that is easy for non-cryptographers to
use. Each of these components has been subject to notable bugs
resulting in embarrassing vulnerabilities like HeartBleed [12]
and SMACK-TLS [13]. Many of these ﬂaws were not found
even through extensive testing.
In response, several works have sought
to build high-
assurance protocol implementations using formal veriﬁcation
tools. The most notable of these is miTLS [10], a veriﬁed
reference implementation of the TLS 1.2 protocol in F#,
built hand-in-hand with modular proofs of computational
security at the code-level. Follow-up works verify efﬁcient C
implementations of various components of TLS 1.3, including
the TLS packet formats [14], the cryptographic library [15], and
the record layer [16]. Other works have built high-assurance
protocol implementations in OCaml [17], JavaScript [5], [6],
WebAssembly [18], and Java [19].
Despite these advances, verifying a full cryptographic
protocol implementation written in a performance-oriented
language like C is highly resource-intensive and can take years
of work. Consequently such projects have only been attempted
for important protocols like TLS. In this paper, we tackle the
problem of generalizing and scaling up the security analysis
of protocol implementations in a way that they can be applied
to entire families of cryptographic protocols. Hence, we lower
© 2022, Son Ho. Under license to IEEE.
DOI 10.1109/SP46214.2022.00038
107
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
unspeciﬁed in the Noise document. Hence, we obtain a full
speciﬁcation for the Noise protocol stack, starting from the
crypto layer to the user-facing API (see Section II).
Next, we write a low-level implementation of Noise (left
column) using Low* [25], a subset of F*, and prove that it
matches the formal speciﬁcation. We use the HACL* veriﬁed
cryptographic library to instantiate the cryptographic layer [26].
We develop a protocol compiler using a novel technique called
hybrid embedding that allows us to write and verify generic
code for all Noise patterns, prove them correct against the
interpreter spec once and for all, and then specialize and
compile the veriﬁed code into standalone C implementations
for each Noise protocol (See Section III).
On top of our protocol compiler, we design and build a
session management layer that handles multiple sessions in
parallel and handles error conditions. We write a veriﬁed key
storage module that securely stores long-term keys both in-
memory and on-disk. Finally, we build a veriﬁed high-level
user-facing API that provides a simple, secure, misuse-resistant
interface for applications (See Section IV).
Our Low* code is veriﬁed with respect to our formal
speciﬁcation of Noise, but this does not mean that it is secure.
For example, our protocol API may accidentally expose long-
term keys to the adversary, or it may allow data from two
sessions to be mixed up, which may not violate the Noise
spec but would result in serious security vulnerabilities. To
ﬁll this gap, we extend our veriﬁcation with a symbolic
security analysis of the full protocol speciﬁcation using a recent
framework called DY* [27]. We set and prove security goals
for each layer in our implementation (right column), linking
a symbolic model of cryptography all the way to veriﬁed
high-level API security goals. Notably, our analysis is generic
and veriﬁes all Noise protocols in a single proof, unlike prior
work which needed to run veriﬁcation tools on each individual
protocol. (See Section V).
Finally, we demonstrate our framework by compiling veriﬁed
implementations for all 59 Noise patterns and compare the
results with prior work (See Section VI).
Summary of Contributions. We present the ﬁrst veriﬁed
implementations for Noise and the ﬁrst veriﬁed protocol
compiler that generates C code. Our compiler proof relies
on a novel technique, called hybrid embedding, which is of
independent interest. We also provide veriﬁed implementations
of key storage and a high-level protocol API, both of which are
novel and reusable in other developments. Finally, we provide
the ﬁrst modular mechanized symbolic security proofs of Noise
at the level of a detailed executable protocol speciﬁcation.
II. A FORMAL FUNCTIONAL SPECIFICATION OF NOISE
The Noise Protocol Speciﬁcation [20] deﬁnes a succinct
notation and precise execution rules for a family of secure
channel protocols that primarily use Difﬁe-Hellman and pre-
shared keys for conﬁdentiality and authentication, yielding a
total of 59 protocols with varying authentication and secrecy
properties. We begin by an informal overview of the syntax
Fig. 1. Noise* Architecture. Left: Noise protocol stack implemented in
Low*; Middle: generic formal speciﬁcation of Noise in F*; Right: security
speciﬁcations for each layer using the DY* framework. After veriﬁcation, the
Low* code is specialized and compiled to obtain C code for each protocol.
the human effort involved to build veriﬁed protocol libraries.
The Noise Protocol Framework. We target veriﬁed imple-
mentations of the Noise Protocol framework, which provides
a general notation and execution rules for a large class of
secure channel protocols. The Noise speciﬁcation [20] cur-
rently describes 59 protocols, speciﬁes message-level security
properties for each of these protocols, and precisely deﬁnes all
the cryptographic steps needed to send and receive protocol
messages. Although these 59 protocols are centered around
Difﬁe-Hellman and pre-shared keys, the speciﬁcation language
is itself extensible and can easily handle protocols with
signatures and key encapsulation mechanisms in the future.
Noise is an ideal target for formal veriﬁcation in that it
covers a large class of similar protocols. For the same reason,
it is a challenging target, since we would like to develop
generic proofs that apply to all 59 Noise protocols and their
implementations, rather than verify each protocol individually.
Several prior works present formal analyses for various
Noise protocols [21], [22], [23], [9] and multiple open source
libraries implement various subsets of Noise. However, until
this work, there has been no veriﬁed implementation of Noise.
Consequently, many security-critical protocol elements, includ-
ing key management and state machines remain unstudied.
Our goal is to develop a library of veriﬁed high-performance
implementations of Noise protocols in C, with formal proofs of
correctness and security that cover all these low-level details.
Our Approach. We build a veriﬁed implementation of Noise,
following the methodology depicted in Figure 1. All our code is
written and veriﬁed using the F* programming language [24].
We ﬁrst write a formal speciﬁcation of Noise in F* (middle
column) by carefully encoding the message-level functions
described in the Noise speciﬁcation document [20] and linking
them to F* speciﬁcations of crypto algorithms. Our speciﬁcation
can be read as an interpreter for the Noise protocol notation,
and we can use it to execute any Noise protocol. We extend
this interpreter with F* speciﬁcations of key validation and
management and a high-level session API, both which are left
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:00 UTC from IEEE Xplore.  Restrictions apply. 
108
Protocol Message Sequence
Name
X
NX
IKpsk2
← s
. . .→ e, es, s, ss [d0]
→ [d1, d2, . . .]
→ e
← e, ee, s, es [d0]
↔ [d1, d2, . . .]
← s
. . .→ e, es, s, ss [d0]
← e, ee, se, psk [d1]
→ [d2]
↔ [d3, d4, . . .]
Payload Security Properties
←
→
Auth
-
-
A0
A2
A2
A0
A2
A2
A2
Conf
Auth
-
-
C0
C1
C1
C0
C4
C4
C5
A1
A1
A0
A0
A0
A1
A1
A2
A2
Conf
C2
C2
C0
C0
C5
C2
C2
C5
C5
Example Noise Protocols and Security Guarantees. X: a one-
Fig. 2.
way authenticated encryption protocol; NX: an interactive Diffe-Hellman key
exchange with an unauthenticated initiator; IKpsk2: an interactive mutually-
authenticated key exchange using Difﬁe-Hellman and a pre-shared key; At
each stage of a protocol, we note the expected authentication level (A0-A2)
and conﬁdentiality level (C0-C5) for messages in each direction (← / →).
and semantics of Noise protocols, before describing our formal
speciﬁcation of Noise in the F* programming language [24].
A. Noise Protocol Notation
Three example Noise protocols are shown in Figure 2. The
message sequence for each protocol is divided into three phases.
The ﬁrst phase (before the dotted line) consists of pre-messages
exchanged by the two parties out-of-band before the protocol
begins. The second phase is the main handshake where the
two parties exchange fresh key material to establish a series
of payload encryption keys with gradually stronger security
guarantees. Once the handshake is complete, the protocol enters
the third transport phase where both parties can freely exchange
encrypted application messages in both directions.
The handshake is described as a sequence of messages
between an initiator (I) and a responder (R), where each
message is as a sequence of tokens. Each participant maintains
a chaining key ki that it uses to derive the payload encryption
key at each step; both of which are initially set to public
constants derived from the protocol name. The chaining key
evolves as each handshake token is processed.
Consider a handshake between I and R, where I has a static
Difﬁe-Hellman key-pair (i, gi) and generates an ephemeral
key-pair (x, gx); R has a static key-pair (r, gr) and ephemeral
key-pair (y, gy); and the two may share a pre-shared key psk.
Then the semantics of each token sent from I to R is as follows
(tokens in the reverse direction are handled similarly):
• e: means that I includes gx in the message;
• s: I includes its static public key (gi) in the message,
encrypted under the current payload encryption key;
• es: I computes the ephemeral-static Difﬁe-Hellman shared
secret gxr and mixes it into the chaining key ci, obtaining
a new chaining key ci+1 and payload encryption key ki+1;
• se: I mixes the static-ephemeral shared secret giy into ci;
• ee: I mixes the ephemeral-ephemeral secret gxy into ci;
• ss: I mixes the static-static shared secret gir into ci;
• psk: I mixes the pre-shared key psk into ci.
After processing each sequence of tokens according to the
above rules, at the end of each message, the sender (I) also
includes a (possibly empty) payload encrypted under the current
payload encryption key. These payloads are implicit in Noise
notation, but we note them explicitly (d0, d1, . . .) in Figure 2.
On receiving a message constructed using the above rules,
the responder R performs the dual operations to parse the
remote ephemeral key (e), decrypt the remote static key (s),