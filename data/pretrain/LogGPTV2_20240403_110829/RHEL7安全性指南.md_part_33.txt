:::
## [⁠]{#chap-system_auditing.html#bh-defining_file_rules_with_auditctl}定义文件系统规则
::: para
定义文件系统规则，使用以下语法：
:::
``` screen
auditctl -w path_to_file -p permissions -k key_name
```
::: para
其中：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *path_to_file* 是审核过的文件或者目录：
    :::
-   ::: para
    *permissions* 是被记录的权限：
    :::
    ::: itemizedlist
    -   ::: para
        `r`{.option} --- 读取文件或者目录。
        :::
    -   ::: para
        `w`{.option} --- 写入文件或者目录。
        :::
    -   ::: para
        `x`{.option} --- 运行文件或者目录。
        :::
    -   ::: para
        `a`{.option} --- 改变在文件或者目录中的属性。
        :::
    :::
-   ::: para
    *key_name*
    是可选字符串，可帮助您判定哪个规则或者哪组规则生成特定的日志项。
    :::
:::
::: example
[⁠]{#chap-system_auditing.html#ex-file_watch_rules}
**例 5.1. 文件系统规则**
::: example-contents
::: para
为了定义所有的输写访问权限以及在 `/etc/passwd`{.filename}
文件中每个属性更改的规则，执行以下命令：
:::
``` screen
~]# auditctl -w /etc/passwd -p wa -k passwd_changes
```
::: para
请注意以下字符串 `-k`{.option} 选项是任意的。
:::
::: para
为了定义记录所有输写访问权限，以及在 `/etc/selinux/`{.filename}
目录中所有文件属性更改的规则，执行以下命令：
:::
``` screen
~]# auditctl -w /etc/selinux/ -p wa -k selinux_changes
```
::: para
为了定义可以记录执行 `/sbin/insmod`{.command} 命令的规则，在 Linux
Kernel 中插入模块，执行以下命令：
:::
``` screen
~]# auditctl -w /sbin/insmod -p x -k module_insertion
```
:::
:::
## [⁠]{#chap-system_auditing.html#bh-defining_syscall_rules_with_auditctl}定义系统调用规则
::: para
为了定义系统调用规则，使用以下语法：
:::
``` screen
auditctl -a action,filter -S system_call -F 输入栏=value -k key_name
```
::: para
其中：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    *action* 以及 *filter* 详细说明某个事件何时被记录。 *action* 可能是
    `always`{.literal}（经常是）或者`never`{.literal}（从不是）其中之一。
    *filter* 详细说明哪个 Kernel
    规则匹配过滤器应用在事件中。以下是其中之一的与规则匹配的过滤器：
    `task`{.literal}、`exit`{.literal}、`user`{.literal} 以及
    `exclude`{.literal}。如果想要更多有关这些过滤器的信息，请参考〈[第 5.1 节
    "审核系统架构"](#chap-system_auditing.html#sec-audit_system_architecture){.xref}〉的开始部分。
    :::
-   ::: para
    *system_call*
    通过它的名字详细说明系统调用。所有的系统调用都可以在`/usr/include/asm/unistd_64.h`{.filename}
    文件中找到。许多系统调用都能形成一个规则，每个都在 `-S`{.option}
    选项之后详细说明。
    :::
-   ::: para
    *field*=*value* 详细说明其他选项，进一步修改规则来与以特定架构、组
    ID、进程
    ID和其他内容为基础的事件相匹配。为了列出完整可用的输入栏类型和它们的数值，请参考
    [[auditctl]{.refentrytitle}(8)]{.citerefentry} 手册页。
    :::
-   ::: para
    *key_name*
    是可选字符串，可帮助您判定哪个规则或者哪组规则生成特定的日志项。
    :::
:::
::: example
[⁠]{#chap-system_auditing.html#ex-system_call_rules}
**例 5.2. 系统调用规则**
::: example-contents
::: para
为了定义创造日志项 的规则，每次通过程序使用系统调用 `adjtimex`{.literal}
或者 `settimeofday`{.literal}。当系统使用 64 位架构，请执行以下命令：
:::
``` screen
~]# auditctl -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time_change
```
::: para
为了定义创造日志项的规则，每次由 ID 是 500
或更大的系统用户删除或者重命名文件时，使用（`-F auid!=4294967295`{.option}
选项排除没有设定登录 UID的用户），执行以下命令：
:::
``` screen
~]# auditctl -a always,exit -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete
```
::: para
使用系统调用语法来定义文件系统也是有可能的。对于
`-w /etc/shadow -p wa`{.literal}
文件系统规则来说，以下命令为模拟的系统调用创造了规则：
:::
``` screen
~]# auditctl -a always,exit -F path=/etc/shadow -F perm=wa
```
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-system_auditing.html#sec-Defining_Audit_Rules_and_Controls_in_the_audit.rules_file}5.5.2. 在 `/etc/audit/audit.rules`{.filename} 文件中定义持久的审核规则和控制 {.title}
:::
::: para
为了定义在重新启动时可以一直有效的审核规则，您必须把它们包含在
`/etc/audit/audit.rules`{.filename} 文件中。这个文件使用相同的
`auditctl`{.command} 命令行语法来详细说明规则。任何在 \#
之后的空行或者文本（`#`{.literal}）可以忽略。
:::
::: para
`auditctl`{.command} 指令可以被用来读取来自指定文件的规则，使用
`-R`{.option} 选项，例如：
:::
``` screen
~]# auditctl -R /usr/share/doc/audit-version/stig.rules
```
## [⁠]{#chap-system_auditing.html#bh-defining_control_rules}定义控制规则
::: para
文件可以只包括以下的控制规则，修改审核系统的行为：
`-b`{.option}、`-D`{.option}、`-e`{.option}、`-f`{.option}、或者
`-r`{.option}。如果想获取更多信息，请参考
["定义控制规则"一节](#chap-system_auditing.html#bh-defining_controls_with_auditctl){.xref}。
:::
::: example
[⁠]{#chap-system_auditing.html#ex-control_rules_file}
**例 5.3. 在 `audit.rules`{.filename}中控制规则。**
::: example-contents
``` screen
# Delete all previous rules
-D
# Set buffer size
-b 8192
# Make the configuration immutable -- reboot is required to change audit rules
-e 2
# Panic when a failure occurs
-f 2
# Generate at most 100 audit messages per second
-r 100
```
:::
:::
## [⁠]{#chap-system_auditing.html#bh-defining_file_system_rules}定义文件系统和系统调用规则
::: para
使用 `auditctl`{.command}
语法定义文件系统和系统调用原则。在〈[第 5.5.1 节 "使用
[**auditctl**]{.application}
实用程序来定义审核规则"](#chap-system_auditing.html#sec-Defining_Audit_Rules_with_the_auditctl_utility){.xref}〉中的例子可以用以下规则文件来表示：
:::
::: example
[⁠]{#chap-system_auditing.html#ex-file_system_and_syscall_rules_file}
**例 5.4. 在 `audit.rules`{.filename} 中的文件系统和系统调用规则**
::: example-contents
``` screen
-w /etc/passwd -p wa -k passwd_changes
-w /etc/selinux/ -p wa -k selinux_changes
-w /sbin/insmod -p x -k module_insertion
-a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time_change
-a always,exit -S unlink -S unlinkat -S rename -S renameat -F auid>=500 -F auid!=4294967295 -k delete
```
:::
:::
## [⁠]{#chap-system_auditing.html#bh-preconfigured_rules_files}预配置规则文件
::: para
在 `/usr/share/doc/audit-version/`{.filename} 目录中, 根据不同的认证标准
[audit]{.package} 软件包提供一组预配置规则文件：
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `nispom.rules`{.filename} ---
    审核规则配置符合《国家行业安全程序操作运行指南》的第八章中详细说明的要求。
    :::
-   ::: para
    `capp.rules`{.filename} --- 审核规则配置满足由
    [CAPP](http://www.niap-ccevs.org/pp/pp_os_ca_v1.d.pdf)
    设定的要求，是公共标准认定的一部分。
    :::
-   ::: para
    `lspp.rules`{.filename} ---审核规则配置满足由
    [LSPP](http://www.commoncriteriaportal.org/files/ppfiles/lspp.pdf)
    设定的要求是公共标准认定的一部分。
    :::
-   ::: para
    `stig.rules`{.filename} --- 审核规则配置满足由 STIG 所设定的要求。
    :::
:::
::: para
为了使用这些配置文件，需要创造您原始文件的备份
`/etc/audit/audit.rules`{.filename} 并且复制您所选择的有关
`/etc/audit/audit.rules`{.filename} 文件的配置文件:
:::
``` screen
~]# cp /etc/audit/audit.rules /etc/audit/audit.rules_backup
~]# cp /usr/share/doc/audit-version/stig.rules /etc/audit/audit.rules
```
:::
:::
::: section
::: titlepage
# [⁠]{#chap-system_auditing.html#sec-Understanding_Audit_Log_Files}5.6. 理解审核日志文件 {.title}
:::
::: para
默认情况下，在 `/var/log/audit/audit.log`{.filename}
文件中的审核系统储存日志项；如果启用日志旋转，就可以旋转储存在同一目录中的
`audit.log`{.filename} 文件。
:::
::: para
以下的审核规则记录了每次读取或者修改 `/etc/ssh/sshd_config`{.filename}
文件的尝试：
:::
``` screen
-w /etc/ssh/sshd_config -p warx -k sshd_config
```
::: para
如果 `auditd`{.systemitem}
守护程序在运行，就需在审核日志文件中运行以下命令创造新事件：
:::
``` screen
~]# cat /etc/ssh/sshd_config
```
::: para
在 `audit.log`{.filename} 文件中的事件如下所示：
:::
``` screen
type=SYSCALL msg=audit(1364481363.243:24287): arch=c000003e syscall=2 success=no exit=-13 a0=7fffd19c5592 a1=0 a2=7fffd19c4b50 a3=a items=1 ppid=2686 pid=3538 auid=500 uid=500 gid=500 euid=500 suid=500 fsuid=500 egid=500 sgid=500 fsgid=500 tty=pts0 ses=1 comm="cat" exe="/bin/cat" subj=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 key="sshd_config"
type=CWD msg=audit(1364481363.243:24287):  cwd="/home/shadowman"
type=PATH msg=audit(1364481363.243:24287): item=0 name="/etc/ssh/sshd_config" inode=409248 dev=fd:00 mode=0100600 ouid=0 ogid=0 rdev=00:00 obj=system_u:object_r:etc_t:s0
```
::: para
以上事件由三个记录组成（每个以 `type=`{.literal}
密码作为开始），共享相同的时间戳和编号。每个记录包含好几对
`name=value`{.literal}
，由空格或者逗号分开。以下是关于以上事件的详细分析：
:::
### [⁠]{#chap-system_auditing.html#bh-first_record}第一个记录
::: variablelist
[`type=SYSCALL`{.literal}]{.term}
:   ::: para
    `type`{.literal} 输入栏包含这类记录。在这个例子中，
    `SYSCALL`{.literal} 数值详细说明连接到 Kernel
    的系统调用触发了这个记录。
    :::
    ::: para
    为了列出所有可能的类型值和它们的解释，请参考〈[第 B.2 节
    "审核记录类型"](#app-Audit_Reference.html#sec-Audit_Record_Types){.xref}〉。
    :::
[`msg=audit(1364481363.243:24287):`{.literal}]{.term}