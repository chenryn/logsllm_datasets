![Plotly plot of British election data](/data/attachment/album/202006/18/001409t1f5ld315p98r1x1.gif "Plotly plot of British election data")
### Bokeh
[Bokeh](https://docs.bokeh.org/en/latest/index.html)（发音为 “BOE-kay”）擅长构建交互式绘图，所以这个标准的例子并没有将其展现其最好的一面。和 Plotly 一样，Bokeh 的绘图也是为了嵌入到 Web 应用中，它以 HTML 文件的形式输出绘图。
下面是使用 Bokeh 的代码（你可以在[这里](https://anvil.works/blog/plotting-in-bokeh)运行）：
```
    from bokeh.io import show, output_file
    from bokeh.models import ColumnDataSource, FactorRange, HoverTool
    from bokeh.plotting import figure
    from bokeh.transform import factor_cmap
    from votes import long as df
    # Specify a file to write the plot to
    output_file("elections.html")
    # Tuples of groups (year, party)
    x = [(str(r[1]['year']), r[1]['party']) for r in df.iterrows()]
    y = df['seats']
    # Bokeh wraps your data in its own objects to support interactivity
    source = ColumnDataSource(data=dict(x=x, y=y))
    # Create a colourmap
    cmap = {
        'Conservative': '#0343df',
        'Labour': '#e50000',
        'Liberal': '#ffff14',
        'Others': '#929591',
    }
    fill_color = factor_cmap('x', palette=list(cmap.values()), factors=list(cmap.keys()), start=1, end=2)
    # Make the plot
    p = figure(x_range=FactorRange(*x), width=1200, title="Election results")
    p.vbar(x='x', top='y', width=0.9, source=source, fill_color=fill_color, line_color=fill_color)
    # Customise some display properties
    p.y_range.start = 0
    p.x_range.range_padding = 0.1
    p.yaxis.axis_label = 'Seats'
    p.xaxis.major_label_orientation = 1
    p.xgrid.grid_line_color = None
```
图表如下：
![Bokeh plot of British election data](/data/attachment/album/202006/18/001417wgh442d4ox7ef3z5.png "Bokeh plot of British election data")
### Altair
[Altair](https://altair-viz.github.io/) 是基于一种名为 [Vega](https://vega.github.io/vega/) 的声明式绘图语言（或“可视化语法”）。这意味着它具有经过深思熟虑的 API，可以很好地扩展复杂的绘图，使你不至于在嵌套循环的地狱中迷失方向。
与 Bokeh 一样，Altair 将其图形输出为 HTML 文件。这是代码（你可以在[这里](https://anvil.works/blog/plotting-in-altair)运行）：
```
    import altair as alt
    from votes import long as df
    # Set up the colourmap
    cmap = {
        'Conservative': '#0343df',
        'Labour': '#e50000',
        'Liberal': '#ffff14',
        'Others': '#929591',
    }
    # Cast years to strings
    df['year'] = df['year'].astype(str)
    # Here's where we make the plot
    chart = alt.Chart(df).mark_bar().encode(
        x=alt.X('party', title=None),
        y='seats',
        column=alt.Column('year', sort=list(df['year']), title=None),
        color=alt.Color('party', scale=alt.Scale(domain=list(cmap.keys()), range=list(cmap.values())))
    )
    # Save it as an HTML file.
    chart.save('altair-elections.html')
```
结果图表：
![Altair plot of British election data](/data/attachment/album/202006/18/001421cdtudgog0450gjd8.png "Altair plot of British election data")
### Pygal
[Pygal](http://www.pygal.org/en/stable/) 专注于视觉外观。它默认生成 SVG 图，所以你可以无限放大它们或打印出来，而不会被像素化。Pygal 绘图还内置了一些很好的交互性功能，如果你想在 Web 应用中嵌入绘图，Pygal 是另一个被低估了的候选者。
代码是这样的（你可以在[这里](https://anvil.works/blog/plotting-in-pygal)运行它）：
```
    import pygal
    from pygal.style import Style
    from votes import wide as df
    # Define the style
    custom_style = Style(
        colors=('#0343df', '#e50000', '#ffff14', '#929591')
        font_family='Roboto,Helvetica,Arial,sans-serif',
        background='transparent',
        label_font_size=14,
    )
    # Set up the bar plot, ready for data
    c = pygal.Bar(
        title="UK Election Results",
        style=custom_style,
        y_title='Seats',
        width=1200,
        x_label_rotation=270,
    )
    # Add four data sets to the bar plot
    c.add('Conservative', df['conservative'])
    c.add('Labour', df['labour'])
    c.add('Liberal', df['liberal'])
    c.add('Others', df['others'])
    # Define the X-labels
    c.x_labels = df['year']
    # Write this to an SVG file
    c.render_to_file('pygal.svg')
```
绘制结果：
![Pygal plot of British election data](/data/attachment/album/202006/18/001431skaluz4embb4ozlf.png "Pygal plot of British election data")
### Pandas
[Pandas](https://pandas.pydata.org/) 是 Python 的一个极其流行的数据科学库。它允许你做各种可扩展的数据处理，但它也有一个方便的绘图 API。因为它直接在数据帧上操作，所以 Pandas 的例子是本文中最简洁的代码片段，甚至比 Seaborn 的代码还要短！
Pandas API 是 Matplotlib 的一个封装器，所以你也可以使用底层的 Matplotlib API 来对你的绘图进行精细的控制。
这是 Pandas 中的选举结果图表。代码精美简洁！
```
    from matplotlib.colors import ListedColormap
    from votes import wide as df
    cmap = ListedColormap(['#0343df', '#e50000', '#ffff14', '#929591'])
    ax = df.plot.bar(x='year', colormap=cmap)
    ax.set_xlabel(None)
    ax.set_ylabel('Seats')
    ax.set_title('UK election results')
    plt.show()
```
绘图结果：
![Pandas plot of British election data](/data/attachment/album/202006/18/001434w92kbi5jp9x797z5.png "Pandas plot of British election data")
要运行这个例子，请看[这里](https://anvil.works/blog/plotting-in-pandas)。
### 以你的方式绘制
Python 提供了许多绘制数据的方法，无需太多的代码。虽然你可以通过这些方法快速开始创建你的绘图，但它们确实需要一些本地配置。如果需要，[Anvil](https://anvil.works/) 为 Python 开发提供了精美的 Web 体验。祝你绘制愉快！
---
via: 
作者：[Shaun Taylor-Morgan](https://opensource.com/users/shaun-taylor-morgan "View user profile.") 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](/article-12324-1.html) 荣誉推出