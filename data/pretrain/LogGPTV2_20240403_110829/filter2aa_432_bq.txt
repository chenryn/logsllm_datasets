{
case ‘I’ :
/* 初始化 */
initw () ;
printf ( “Dictionary initalized to empty. \n” ) ;
break ;
case ‘i’ :
/* 插入操作 */
insertw ( word ) ;
第十二章  远程过程调用
- 259 -
printf ( “%s inserted. \n”, word ) ;
break ;
case ‘d’ :
/* 删除操作 */
if ( deletew(word) )
{
printf ( “%s deleted. \n”, word ) ;
}else
{
printf ( “%s not found. \n”, word ) ;
}
break ;
case ‘l’ :
/* 查找 */
if ( lookupw(word) )
{
printf ( “%s was found. \n”, word ) ;
}else
{
printf ( “%s was not found. \n”, word ) ;
}
break ;
case ‘q’ :
/* 退出 */
printf ( “program quits \n” ) ;
exit ( 0 ) ;
default :
/* 无法识别的命令 */
printf ( “command %c invalid. \n”, cmd ) ;
break ;
} /* switch 结束 */
}
}
/*****************************************************************
nextin 函数: 读取输入的命令和命令后面跟的单词参数     *
 ******************************************************************/
int nextin ( char* cmd, char* word )
{
int
i, ch ;
ch = getc ( stdin ) ;
while ( isspace(ch) )
{
- 260 -
Linux网络编程
ch = getc ( stdin ) ;
}
if ( ch == EOF )
{
return -1 ;
}
*cmd = (char) ch ;
ch = getc ( stdin ) ;
while ( isspace(ch) )
{
ch = getc ( stdin ) ;
}
if ( EOF == ch )
{
return -1 ;
}
if ( ‘\n’ == ch )
{
return 0 ;
}
i = 0 ;
while ( !isspace(ch) )
{
if ( MAXWORD  I ;I++ )
{
if ( 0 == strcmp(word, dict[I]) )
{
return 1 ;
}
}
return 0 ;
- 262 -
Linux网络编程
}
为了使应用程序简单并且便于理解，文件 dict.c 中的这个常规程序使用了二维数组来
存储单词。一个全局变量 nwords 记录了任何时候字典中的单词数量。著称许包含一个循环，
在每次循环中读取并处理输入文件总的一行。它调用过程 nextin 从下一输入行中读取一个
命令（可能还包含一个单词），接着使用一个 C 语言的 switch 语句在六种可能的情况中选
择其一。这些情况对应与五个有效命令再加上一个处理非法输入的默认情况。
主程序对每中情况都调用一个过程来处理细节。例如，对应于一个插入命令 I，它调
用过程 insertw。过程 insertw 在数组的末尾插入一个新的单词，并将 nwords 加 1。
其他过程也按照我们所期望的那样进行操作。过程 deletew 寻找所要删除的单词，如
果找到了这个单词，便用字典中的最后一个单词取代它，然后将 nwords 减 1。而 lookupw
循序查找数组，以便确定字典中是否有该指定的单词。若有则返回 1，否则返回 0。
为产生应用程序的二进制文件，我们可以调用 C 编译器。在 Linux 中可以这样：
gcc –o dict dict.c
从文件 dict.c 中的源程序产生一个命为 dict 的可执行文件。＇
2．将程序划分成两部分
图 12-6  dict 应用过程的组织情况
常规程序一旦构建完成并经过测试，就可以将它划分成本地构建和远程构建了。在我
们开始划分程序之前，我们必须有一个程序过程调用的概念模型。图 12-6 展示了我们的 dict
应用过程的组织情况。
在考虑哪个过程可以转移到远程机器上时，程序员必须考虑每个过程所需要的设施。
例如：过程 nextin 在每次调用的时候要从标准输入读取下一行的命令，并对它进行分析。
因为它需要访问标准输入的文件描述符，所以 nextin 必须被放在主程序中。
注意：执行 I /O 或者访问文件描述符的过程不能轻易的转移到远程机器中。
我们还必须考虑每个过程所要访问的数据所处的位置。例如，过程 lookupw 需要访问
全部单词数据库。如果执行 lookupw 的机器不同于字典所处的机器，对 lookupw 的 RPC 调
用就必须将整个字典作为参数来传递。
这种将巨大的数据结构作为参数传递的远程过程调用的效率是非常低下的，因为 RPC
必须为每个远程过程调用对整个数据结构进行读取和编码。一般来说，执行过程的机器应
当与放置过程所要访问数据的机器是同一个。将巨大的数据结构传递给远程过程的效率是
非常低的。
我们在考虑了最初的字典应用程序以及每个过程所访问的数据之后，很明显应当把过
程 insertw，deletew，initw，lookupw 和字典本身放到同一台机器中。
假设我们决定将字典的存储以及相关的过程转移到一台远程机器中。为理解这么做的
后果，我们要在穿件一个分布式程序和数据结构的形象，图 12-7 说明了数据及对它的访问
第十二章  远程过程调用
- 263 -
过程转移到一台远程机器后，这个字典应用程序的新结构：
图 12-7  dict 远程程序的结构
图 12-7 可以帮助我们思考对程序的划分（划分为本地构建和远程构建）。我们必须要
考虑每个过程是否要访问数据以及它所需要的服务，还必须考虑每个远程过程所要求的参
数以及在网上传送这些信息所带来的开销。最后，该图还能帮助我们了解网络延时将如何
旖旎感想程序的性能。
下面我们将源程序划分为两个构件。我们需要明确的划分出每个构件所使用的常量和
数据结构，将每个构建放置到一个单独的文件当中。在本字典的例子中，划分是简洁明了
的，因为最初的源文件可以在过程 nextin 和 initw 之间进行划分。文件 dict1.c 含有主程序
和过程 nextin：
/* dict1.c  包含 main 和 nextin 过程 */
#include 
#include 
#include 
#include 
/* 每一个输入的命令的最大长度 */
#define MAXWORD 50
int nextin ( char* cmd, char* word) ;
int initw() ;
int insertw ( const char* word ) ;
int deletew ( const char* word ) ;
int lookupw ( const char* word ) ;
/* 主函数,进行各种操作 */
int main ( int argc, char* argv[] )
{
/* 从命令行取得命令的变量 */
char word [ MAXWORD + 1 ] ;
char cmd ;
/* 输入单词的长度 */
- 264 -
Linux网络编程
int
wrdlen ;
while ( 1 )
{
wrdlen = nextin ( &cmd, word ) ;
if ( wrdlen < 0 )
{
exit ( 0 ) ;
}
switch ( cmd )
{
case ‘I’ :
/* 初始化 */
initw () ;
printf ( “Dictionary initalized to empty. \n” ) ;
break ;
case ‘i’ :
/* 插入操作 */
insertw ( word ) ;
printf ( “%s inserted. \n”, word ) ;
break ;
case ‘d’ :
/* 删除操作 */
if ( deletew(word) )
{
printf ( “%s deleted. \n”, word ) ;
}else
{
printf ( “%s not found. \n”, word ) ;
}
break ;
case ‘l’ :
/* 查找 */
if ( lookupw(word) )
{
printf ( “%s was found. \n”, word ) ;