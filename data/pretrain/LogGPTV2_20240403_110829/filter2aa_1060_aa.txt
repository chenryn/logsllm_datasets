Tor: The Second-Generation Onion Router
Roger Dingledine
The Free Haven Project
PI:EMAIL
Nick Mathewson
The Free Haven Project
PI:EMAIL
Paul Syverson
Naval Research Lab
PI:EMAIL
Abstract
We present Tor, a circuit-based low-latency anonymous com-
munication service. This second-generation Onion Routing
system addresses limitations in the original design by adding
perfect forward secrecy, congestion control, directory servers,
integrity checking, conﬁgurable exit policies, and a practi-
cal design for location-hidden services via rendezvous points.
Tor works on the real-world Internet, requires no special priv-
ileges or kernel modiﬁcations, requires little synchronization
or coordination between nodes, and provides a reasonable
tradeoff between anonymity, usability, and efﬁciency.
We
brieﬂy describe our experiences with an international network
of more than 30 nodes. We close with a list of open problems
in anonymous communication.
1
Overview
Onion Routing is a distributed overlay network designed to
anonymize TCP-based applications like web browsing, se-
cure shell, and instant messaging.
Clients choose a path
through the network and build a circuit, in which each node
(or “onion router” or “OR”) in the path knows its predecessor
and successor, but no other nodes in the circuit. Trafﬁc ﬂows
down the circuit in ﬁxed-size cells, which are unwrapped by a
symmetric key at each node (like the layers of an onion) and
relayed downstream. The Onion Routing project published
several design and analysis papers [27, 41, 48, 49]. While a
wide area Onion Routing network was deployed brieﬂy, the
only long-running public implementation was a fragile proof-
of-concept that ran on a single machine. Even this simple
deployment processed connections from over sixty thousand
distinct IP addresses from all over the world at a rate of about
ﬁfty thousand per day. But many critical design and deploy-
ment issues were never resolved, and the design has not been
updated in years. Here we describe Tor, a protocol for asyn-
chronous, loosely federated onion routers that provides the
following improvements over the old Onion Routing design:
Perfect forward secrecy: In the original Onion Routing
design, a single hostile node could record trafﬁc and later
compromise successive nodes in the circuit and force them
to decrypt it. Rather than using a single multiply encrypted
data structure (an onion) to lay each circuit, Tor now uses an
incremental or telescoping path-building design, where the
initiator negotiates session keys with each successive hop in
the circuit. Once these keys are deleted, subsequently com-
promised nodes cannot decrypt old trafﬁc. As a side beneﬁt,
onion replay detection is no longer necessary, and the process
of building circuits is more reliable, since the initiator knows
when a hop fails and can then try extending to a new node.
Separation of “protocol cleaning” from anonymity:
Onion Routing originally required a separate “application
proxy” for each supported application protocol—most of
which were never written, so many applications were never
supported.
Tor uses the standard and near-ubiquitous
SOCKS [32] proxy interface, allowing us to support most
TCP-based programs without modiﬁcation. Tor now relies on
the ﬁltering features of privacy-enhancing application-level
proxies such as Privoxy [39], without trying to duplicate those
features itself.
No mixing, padding, or trafﬁc shaping (yet): Onion
Routing originally called for batching and reordering cells
as they arrived, assumed padding between ORs, and in later
designs added padding between onion proxies (users) and
ORs [27, 41].
Tradeoffs between padding protection and
cost were discussed, and trafﬁc shaping algorithms were
theorized [49] to provide good security without expensive
padding, but no concrete padding scheme was suggested. Re-
cent research [1] and deployment experience [4] suggest that
this level of resource use is not practical or economical; and
even full link padding is still vulnerable [33]. Thus, until we
have a proven and convenient design for trafﬁc shaping or
low-latency mixing that improves anonymity against a realis-
tic adversary, we leave these strategies out.
Many TCP streams can share one circuit: Onion Rout-
ing originally built a separate circuit for each application-
level request, but this required multiple public key operations
for every request, and also presented a threat to anonymity
from building so many circuits; see Section 9. Tor multi-
plexes multiple TCP streams along each circuit to improve
efﬁciency and anonymity.
Leaky-pipe circuit topology: Through in-band signaling
within the circuit, Tor initiators can direct trafﬁc to nodes
partway down the circuit. This novel approach allows traf-
ﬁc to exit the circuit from the middle—possibly frustrating
trafﬁc shape and volume attacks based on observing the end
of the circuit. (It also allows for long-range padding if future
research shows this to be worthwhile.)
Congestion control: Earlier anonymity designs do not ad-
dress trafﬁc bottlenecks. Unfortunately, typical approaches to
load balancing and ﬂow control in overlay networks involve
inter-node control communication and global views of trafﬁc.
Tor’s decentralized congestion control uses end-to-end acks
to maintain anonymity while allowing nodes at the edges of
the network to detect congestion or ﬂooding and send less
data until the congestion subsides.
Directory servers:
The earlier Onion Routing design
planned to ﬂood state information through the network—an
approach that can be unreliable and complex. Tor takes a
simpliﬁed view toward distributing this information.
Cer-
tain more trusted nodes act as directory servers: they provide
signed directories describing known routers and their current
state. Users periodically download them via HTTP.
Variable exit policies: Tor provides a consistent mecha-
nism for each node to advertise a policy describing the hosts
and ports to which it will connect. These exit policies are crit-
ical in a volunteer-based distributed infrastructure, because
each operator is comfortable with allowing different types of
trafﬁc to exit from his node.
End-to-end integrity checking: The original Onion Rout-
ing design did no integrity checking on data. Any node on the
circuit could change the contents of data cells as they passed
by—for example, to alter a connection request so it would
connect to a different webserver, or to ‘tag’ encrypted trafﬁc
and look for corresponding corrupted trafﬁc at the network
edges [15]. Tor hampers these attacks by verifying data in-
tegrity before it leaves the network.
Rendezvous points and hidden services: Tor provides an
integrated mechanism for responder anonymity via location-
protected servers. Previous Onion Routing designs included
long-lived “reply onions” that could be used to build circuits
to a hidden server, but these reply onions did not provide for-
ward security, and became useless if any node in the path
went down or rotated its keys. In Tor, clients negotiate ren-
dezvous points to connect with hidden servers; reply onions
are no longer required.
Unlike Freedom [8], Tor does not require OS kernel
patches or network stack support.
This prevents us from
anonymizing non-TCP protocols, but has greatly helped our
portability and deployability.
We have implemented all of the above features, including
rendezvous points. Our source code is available under a free
license, and Tor is not covered by the patent that affected dis-
tribution and use of earlier versions of Onion Routing. We
have deployed a wide-area alpha network to test the design, to
get more experience with usability and users, and to provide
a research platform for experimentation. As of this writing,
the network stands at 32 nodes spread over two continents.
We review previous work in Section 2, describe our goals
and assumptions in Section 3, and then address the above list
of improvements in Sections 4, 5, and 6. We summarize in
Section 7 how our design stands up to known attacks, and
talk about our early deployment experiences in Section 8. We
conclude with a list of open problems in Section 9 and future
work for the Onion Routing project in Section 10.
2
Related work
Modern anonymity systems date to Chaum’s Mix-Net de-
sign [10]. Chaum proposed hiding the correspondence be-
tween sender and recipient by wrapping messages in layers
of public-key cryptography, and relaying them through a path
composed of “mixes.” Each mix in turn decrypts, delays, and
re-orders messages before relaying them onward.
Subsequent relay-based anonymity designs have diverged
in two main directions.
Systems like Babel [28], Mix-
master [36], and Mixminion [15] have tried to maximize
anonymity at the cost of introducing comparatively large
and variable latencies. Because of this decision, these high-
latency networks resist strong global adversaries, but intro-
duce too much lag for interactive tasks like web browsing,
Internet chat, or SSH connections.
Tor belongs to the second category: low-latency designs
that try to anonymize interactive network trafﬁc. These sys-
tems handle a variety of bidirectional protocols. They also
provide more convenient mail delivery than the high-latency
anonymous email networks, because the remote mail server
provides explicit and timely delivery conﬁrmation. But be-
cause these designs typically involve many packets that must
be delivered quickly, it is difﬁcult for them to prevent an at-
tacker who can eavesdrop both ends of the communication
from correlating the timing and volume of trafﬁc entering the
anonymity network with trafﬁc leaving it [45]. These proto-
cols are similarly vulnerable to an active adversary who in-
troduces timing patterns into trafﬁc entering the network and
looks for correlated patterns among exiting trafﬁc. Although
some work has been done to frustrate these attacks, most de-
signs protect primarily against trafﬁc analysis rather than traf-
ﬁc conﬁrmation (see Section 3.1).
The simplest low-latency designs are single-hop proxies
such as the Anonymizer [3]: a single trusted server strips
the data’s origin before relaying it. These designs are easy to
analyze, but users must trust the anonymizing proxy. Concen-
trating the trafﬁc to this single point increases the anonymity
set (the people a given user is hiding among), but it is vul-
nerable if the adversary can observe all trafﬁc entering and
leaving the proxy.
More
complex
are
distributed-trust,
circuit-based
anonymizing systems.
In these designs, a user estab-
lishes one or more medium-term bidirectional end-to-end
circuits, and tunnels data in ﬁxed-size cells.
Establishing
circuits is computationally expensive and typically requires
public-key cryptography, whereas relaying cells is compar-
atively inexpensive and typically requires only symmetric
encryption.
Because a circuit crosses several servers, and
each server only knows the adjacent servers in the circuit, no
single server can link a user to her communication partners.
The Java Anon Proxy (also known as JAP or Web MIXes)
uses ﬁxed shared routes known as cascades.
As with a
single-hop proxy, this approach aggregates users into larger
anonymity sets, but again an attacker only needs to observe
both ends of the cascade to bridge all the system’s trafﬁc. The
Java Anon Proxy’s design calls for padding between end users
and the head of the cascade [7]. However, it is not demon-
strated whether the current implementation’s padding policy
improves anonymity.
PipeNet [5, 12], another low-latency design proposed
around the same time as Onion Routing, gave stronger
anonymity but allowed a single user to shut down the net-
work by not sending. Systems like ISDN mixes [38] were
designed for other environments with different assumptions.
In P2P designs like Tarzan [24] and MorphMix [43], all
participants both generate trafﬁc and relay trafﬁc for others.
These systems aim to conceal whether a given peer originated
a request or just relayed it from another peer. While Tarzan
and MorphMix use layered encryption as above, Crowds [42]
simply assumes an adversary who cannot observe the initia-
tor: it uses no public-key encryption, so any node on a circuit
can read users’ trafﬁc.
Hordes [34] is based on Crowds but also uses multicast
responses to hide the initiator. Herbivore [25] and P5 [46]
go even further, requiring broadcast. These systems are de-
signed primarily for communication among peers, although
Herbivore users can make external connections by requesting
a peer to serve as a proxy.
Systems like Freedom and the original Onion Routing
build circuits all at once, using a layered “onion” of public-
key encrypted messages, each layer of which provides ses-
sion keys and the address of the next server in the circuit.
Tor as described herein, Tarzan, MorphMix, Cebolla [9],
and Rennhard’s Anonymity Network [44] build circuits in
stages, extending them one hop at a time. Section 4.2 de-
scribes how this approach enables perfect forward secrecy.
Circuit-based designs must choose which protocol layer to
anonymize. They may intercept IP packets directly, and re-
lay them whole (stripping the source address) along the cir-
cuit [8, 24]. Like Tor, they may accept TCP streams and
relay the data in those streams, ignoring the breakdown of
that data into TCP segments [43, 44]. Finally, like Crowds,
they may accept application-level protocols such as HTTP
and relay the application requests themselves. Making this
protocol-layer decision requires a compromise between ﬂexi-
bility and anonymity. For example, a system that understands
HTTP can strip identifying information from requests, can
take advantage of caching to limit the number of requests that
leave the network, and can batch or encode requests to min-
imize the number of connections. On the other hand, an IP-
level anonymizer can handle nearly any protocol, even ones
unforeseen by its designers (though these systems require
kernel-level modiﬁcations to some operating systems, and so
are more complex and less portable). TCP-level anonymity
networks like Tor present a middle approach: they are ap-
plication neutral (so long as the application supports, or can
be tunneled across, TCP), but by treating application connec-
tions as data streams rather than raw TCP packets, they avoid
the inefﬁciencies of tunneling TCP over TCP.
Distributed-trust anonymizing systems need to prevent at-
tackers from adding too many servers and thus compromising
user paths. Tor relies on a small set of well-known directory
servers, run by independent parties, to decide which nodes
can join. Tarzan and MorphMix allow unknown users to run
servers, and use a limited resource (like IP addresses) to pre-
vent an attacker from controlling too much of the network.
Crowds suggests requiring written, notarized requests from
potential crowd members.
Anonymous communication is essential for censorship-
resistant systems like Eternity [2], Free Haven [19], Pub-
lius [53], and Tangler [52]. Tor’s rendezvous points enable
connections between mutually anonymous entities; they are a
building block for location-hidden servers, which are needed
by Eternity and Free Haven.
3
Design goals and assumptions
Goals
Like other low-latency anonymity designs, Tor seeks to frus-
trate attackers from linking communication partners, or from
linking multiple communications to or from a single user.
Within this main goal, however, several considerations have
directed Tor’s evolution.