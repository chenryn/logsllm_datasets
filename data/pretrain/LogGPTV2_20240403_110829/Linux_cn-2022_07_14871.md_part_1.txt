---
author: Sk
category: 容器与云
comments_data:
- date: '2022-09-20 11:00:48'
  message: 太牛逼了真谢谢你
  postip: 58.216.213.55
  username: 来自江苏常州的 Chrome 105.0|Windows 10 用户
- date: '2022-10-12 16:15:55'
  message: 按照博主的步骤，学下来，安装成功。感谢！
  postip: 124.78.47.56
  username: 来自上海的 Chrome 106.0|Windows 10 用户
- date: '2023-04-14 12:14:34'
  message: 高质量教程，一句废话都没有，赞！
  postip: 111.163.91.143
  username: 来自天津的 Chrome 112.0|Windows 10 用户
- date: '2023-06-02 17:54:06'
  message: nb
  postip: 113.119.109.44
  username: 来自广东广州的 Chrome 113.0|Windows 10 用户
- date: '2023-06-05 11:25:08'
  message: 很细，实用
  postip: 49.77.34.23
  username: 来自江苏南京的 Chrome 113.0|Mac 10.15 用户
- date: '2023-06-13 14:48:25'
  message: 牛皮plus
  postip: 113.116.227.129
  username: 来自广东深圳的 Chrome 114.0|Windows 10 用户
- date: '2023-07-11 22:57:49'
  message: 感谢，安装非常顺利！
  postip: 123.171.11.123
  username: 来自山东聊城的 Chrome 115.0|Windows 10 用户
- date: '2023-07-14 15:37:57'
  message: 牛逼！！！
  postip: 182.145.189.161
  username: 来自四川的 Chrome 114.0|Windows 10 用户
- date: '2023-10-02 10:03:32'
  message: 点赞点赞
  postip: 223.106.126.92
  username: 来自223.106.126.92的 Chrome 117.0|Windows 10 用户
- date: '2023-10-29 14:19:13'
  message: 博主太厉害了
  postip: 183.6.9.74
  username: 来自广东广州的 Chrome 118.0|Windows 10 用户
- date: '2023-10-29 14:19:15'
  message: 博主太厉害了
  postip: 183.6.9.74
  username: 来自广东广州的 Chrome 118.0|Windows 10 用户
- date: '2023-11-30 09:56:05'
  message: 简介明了，完美！！tql
  postip: 58.198.180.139
  username: 来自上海华东师范大学的 Chrome 119.0|Windows 10 用户
- date: '2023-12-08 19:27:46'
  message: 非常棒的教程
  postip: 202.121.179.230
  username: 来自上海上海交通大学农业与生物学院的 Chrome 119.0|GNU/Linux 用户
count:
  commentnum: 13
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 46464
date: '2022-07-28 14:26:17'
editorchoice: false
excerpt: 在 Ubuntu 中使用 Docker Compose 安装 Docker 引擎的分步指导。
fromurl: https://ostechnix.com/install-docker-ubuntu/
id: 14871
islctt: true
largepic: /data/attachment/album/202207/28/142549iwrj25mw9turhc9o.jpg
permalink: /article-14871-1.html
pic: /data/attachment/album/202207/28/142549iwrj25mw9turhc9o.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 在 Ubuntu 中使用 Docker Compose 安装 Docker 引擎的分步指导。
tags:
- Docker
thumb: false
title: 如何在 Ubuntu 22.04 LTS 中安装 Docker 和 Docker Compose
titlepic: true
translator: Donkey-Hao
updated: '2022-07-28 14:26:17'
---
![](/data/attachment/album/202207/28/142549iwrj25mw9turhc9o.jpg)
> 
> 在 Ubuntu 中使用 Docker Compose 安装 Docker 引擎的分步指导。
> 
> 
> 
在这篇文章中，我们将会明白 Docker 是什么，如何 **在 Ubuntu 中安装 Docker 引擎** 。此外，我们也将会明白如何 **安装 Docker Compose** ，它是一个定义并运行多容器的 Docker 应用。
我们已经在 Ubuntu 22.04 LTS 中正式的测试了这份指南。然而，它也应该对旧版本如 20.04 LTS 和 18.04 LTS 有效。为了更好的安全性和稳定性，我推荐你使用最新的版本 —— Ubuntu 22.04 LTS 。
### 什么是 Docker ？
**Docker** 是一个快捷、轻便的系统级虚拟化技术，开发者和系统管理员可以使用它构建具备所有必要依赖项的应用程序，并将其作为一个包发布。
Docker 与其他如 VMWare 、Xen 、以及 VirtualBox 等工具的虚拟化方式不同，每个虚拟机不需要单独的客户操作系统。
所有的 Docker 容器有效地共享同一个主机系统内核。每个容器都在同一个操作系统中的隔离用户空间中运行。
Docker 容器可以在任何 Linux 版本上运行。比如说你使用 Fedora ，我用 Ubuntu 。我们能相互开发、共享并分发 Docker 镜像。
你无需担心操作系统、软件以及自定义设置，任何事都不用担心。只要我们的主机安装了 Docker ，就能持续开发。简言之，Docker 能够在任何地方运行！
前文中你读到了两个词：**Docker 镜像** 和 **Docker 容器** ，或许你在想它们的区别。
通俗地说，Docker 镜像是一个描述容器应该如何表现的文件，而 Docker 容器是 Docker 镜像的运行（或停止）状态。
希望你能够理解 Docker 的基础概念。更多细节，你可以参考文章末尾的 Docker 官方指导手册。
### Docker 依赖项
为了安装并配置 Docker ，你的系统必须满足下列最低要求：
1. 64 位 Linux 或 Windows 系统
2. 如果使用 Linux ，内核版本必须不低于 3.10
3. 能够使用 `sudo` 权限的用户
4. 在你系统 BIOS 上启用了 VT（虚拟化技术）支持 on your system BIOS（参考: [如何查看 CPU 支持 虚拟化技术（VT）](https://ostechnix.com/how-to-find-if-a-cpu-supports-virtualization-technology-vt/)）
5. 你的系统应该联网
在 Linux ，在终端上运行以下命令验证内核以及架构详细信息：
```
$ uname -a
```
输出样例：
```
Linux Ubuntu22CT 5.15.35-3-pve #1 SMP PVE 5.15.35-6 (Fri, 17 Jun 2022 13:42:35 +0200) x86_64 x86_64 x86_64 GNU/Linux
```
正如上面你看到的那样，我的 Ubuntu 系统内核版本是 **5.15.35-3-pve** 并且系统架构是 **64 位**（**x86\_64 x86\_64 x86\_64 GNU/Linux**）。
> 
> **注意：** 这里，我在 [Proxmox](https://ostechnix.com/install-proxmox-ve/) 中使用 Ubuntu 22.04 容器。这是你看到上方内核版本中有 “pve” 字符的原因。如果你正在使用 Ubuntu 实体（或者虚拟）机，你将看到系统版本为 **5.15.35-3-generic** 。
> 
> 
> 
内核版本需要不低于最低要求的版本，并且是 64 位机器。这样不会有任何问题，我们能顺利安装并使用 Docker 。
请注意你使用哪一个 Ubuntu 系统不重要。并且你使用 Ubuntu 桌面或服务器版本，亦或者其他 Ubuntu 变种如 Lubuntu 、Kubuntu 、Xubuntu ，都不重要。
只要你的系统内核版本不低于 3.10 ，并且是 64 位系统，Docker 都会正常运行。
### 在 Ubuntu 22.04 LTS 中安装 Docker
首先，更新你的 Ubuntu 系统。
#### 1、更新 Ubuntu
打开终端，依次运行下列命令：
```
$ sudo apt update
$ sudo apt upgrade
$ sudo apt full-upgrade
```
#### 2、添加 Docker 库
首先，安装必要的证书并允许 apt 包管理器使用以下命令通过 HTTPS 使用存储库：
```
$ sudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg lsb-release
```
然后，运行下列命令添加 Docker 的官方 GPG 密钥：
```
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
```
添加 Docker 官方库：
```
$ echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
```
使用命令更新 Ubuntu 源列表：
```
$ sudo apt update
```
#### 3、安装 Docker
最后，运行下列命令在 Ubuntu 22.04 LTS 服务器中安装最新 Docker CE：
```
$ sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin
```
![Install Docker In Ubuntu](/data/attachment/album/202207/28/142618qannlvznwnvwuzai.png)
当然你也可以安装其他版本 Docker 。运行下列命令检查可以安装的 Docker 版本：
```
$ apt-cache madison docker-ce
```
输出样例：
```
docker-ce | 5:20.10.17~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
docker-ce | 5:20.10.16~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
docker-ce | 5:20.10.15~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
docker-ce | 5:20.10.14~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
docker-ce | 5:20.10.13~3-0~ubuntu-jammy | https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages
```
你可以挑选上面列表中的任何版本进行安装。例如，安装 **5:20.10.16~ 3-0 ~ubuntu-jammy** 这个版本，运行：
```
$ sudo apt install docker-ce=5:20.10.16~3-0~ubuntu-jammy docker-ce-cli=5:20.10.16~3-0~ubuntu-jammy containerd.io
```
安装完成后，运行如下命令验证 Docker 服务是否在运行：
```
$ systemctl status docker
```
你会看到类似下面的输出：