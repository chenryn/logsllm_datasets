indicates the certificate can be used to sign another certificate and thus act as a CA. If a
certificate’s CA flag is set to false (or if the basic constraints parameter is missing), the
verification of the chain should fail if that certificate is ever used to sign another certificate.
Figure 7-18 shows this basic constraint parameter in a real certificate that says this
certificate should be valid to act as a certificate authority.
But what if a certificate issued for verifying a web server is used instead to sign
application code? In this situation, the X.509 certificate can specify a key usage parameter,
which indicates what uses the certificate was generated for. If the certificate is ever used for
something it was not designed to certify, the verification chain should fail.
Finally, what happens if the private key associated with a given certificate is stolen or a
CA accidentally issues a fraudulent certificate (as has happened a few times)? Even though
each certificate has an expiration date, this date might be many years in the future.
Therefore, if a certificate needs to be revoked, the CA can publish a certificate revocation list
(CRL). If any certificate in the chain is on the revocation list, the verification process
should fail.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 7-18: X.509 certificate basic constraints
As you can see, the certificate chain verification could potentially fail in a number of
places.
Case Study: Transport Layer Security
Let’s apply some of the theory behind protocol security and cryptography to a real-world
protocol. Transport Layer Security (TLS), formerly called Secure Sockets Layer (SSL), is the
most common security protocol in use on the internet. TLS was originally developed as
SSL by Netscape in the mid-1990s for securing HTTP connections. The protocol has
gone through multiple revisions: SSL versions 1.0 through 3.0 and TLS versions 1.0
through 1.2. Although it was originally designed for HTTP, you can use TLS for any
TCP protocol. There’s even a variant, the Datagram Transport Layer Security (DTLS)
protocol, to use with unreliable protocols, such as UDP.
||||||||||||||||||||
||||||||||||||||||||
TLS uses many of the constructs described in this chapter, including symmetric and
asymmetric encryption, MACs, secure key exchange, and PKI. I’ll discuss the role each of
these cryptographic tools plays in the security of a TLS connection and touch on some
attacks against the protocol. (I’ll only discuss TLS version 1.0, because it’s the most
commonly supported version, but be aware that versions 1.1 and 1.2 are slowly becoming
more common due to a number of security issues with version 1.0.)
The TLS Handshake
The most important part of establishing a new TLS connection is the handshake, where the
client and server negotiate the type of encryption they’ll use, exchange a unique key for the
connection, and verify each other’s identity. All communication uses a TLS Record protocol
—a predefined tag-length-value structure that allows the protocol parser to extract
individual records from the stream of bytes. All handshake packets are assigned a tag value
of 22 to distinguish them from other packets. Figure 7-19 shows the flow of these
handshake packets in a simplified form. (Some packets are optional, as indicated in the
figure.)
As you can see from all the data being sent back and forth, the handshake process can
be time-intensive: sometimes it can be truncated or bypassed entirely by caching a
previously negotiated session key or by the client’s asking the server to resume a previous
session by providing a unique session identifier. This isn’t a security issue because,
although a malicious client could request the resumption of a session, the client still won’t
know the private negotiated session key.
Technet24
||||||||||||||||||||
||||||||||||||||||||
Figure 7-19: The TLS handshake process
Initial Negotiation
As the first step in the handshake, the client and server negotiate the security parameters
they want to use for the TLS connection using a HELLO message. One of the pieces of
information in a HELLO message is the client random, a random value that ensures the
connection process cannot be easily replayed. The HELLO message also indicates what
types of ciphers the client supports. Although TLS is designed to be flexible with regard to
what encryption algorithms it uses, it only supports symmetric ciphers, such as RC4 or
AES, because using public key encryption would be too expensive from a computational
perspective.
The server responds with its own HELLO message that indicates what cipher it has
chosen from the available list provided by the client. (The connection ends if the pair
cannot negotiate a common cipher.) The server HELLO message also contains the server
random, another random value that adds additional replay protection to the connection.
Next, the server sends its X.509 certificate, as well as any necessary intermediate CA
certificates, so the client can make an informed decision about the identity of the server.
Then the server sends a HELLO Done packet to inform the client it can proceed to
authenticate the connection.
||||||||||||||||||||
||||||||||||||||||||
Endpoint Authentication
The client must verify that the server certificates are legitimate and that they meet the
client’s own security requirements. First, the client must verify the identity in the
certificate by matching the certificate’s Subject field to the server’s domain name. For
example, Figure 7-20 shows a certificate for the domain www.domain.com. The Subject
contains a Common Name (CN) ➊ field that matches this domain.
Figure 7-20: The Certificate Subject for www.domain.com
A certificate’s Subject and Issuer fields are not simple strings but X.500 names, which
contain other fields, such as the Organization (typically the name of the company that owns
the certificate) and Email (an arbitrary email address). However, only the CN is ever
checked during the handshake to verify an identity, so don’t be confused by the extra data.
It’s also possible to have wildcards in the CN field, which is useful for sharing certificates
with multiple servers running on a subdomain name. For example, a CN set to
Technet24
||||||||||||||||||||
||||||||||||||||||||
*.domain.com would match both www.domain.com and blog.domain.com.
After the client has checked the identity of the endpoint (that is, the server at the other
end of the connection), it must ensure that the certificate is trusted. It does so by building
the chain of trust for the certificate and any intermediate CA certificates, checking to make
sure none of the certificates appear on any certificate revocation lists. If the root of the
chain is not trusted by the client, it can assume the certificate is suspect and drop the
connection to the server. Figure 7-21 shows a simple chain with an intermediate CA for
www.domain.com.
Figure 7-21: The chain of trust for www.domain.com
TLS also supports an optional client certificate that allows the server to authenticate the
client. If the server requests a client certificate, it sends a list of acceptable root certificates
to the client during its HELLO phase. The client can then search its available certificates
and choose the most appropriate one to send back to the server. It sends the certificate—
along with a verification message containing a hash of all the handshake messages sent and
||||||||||||||||||||
||||||||||||||||||||
received up to this point—signed with the certificate’s private key. The server can verify
that the signature matches the key in the certificate and grant the client access; however, if
the match fails, the server can close the connection. The signature proves to the server that
the client possesses the private key associated with the certificate.
Establishing Encryption
When the endpoint has been authenticated, the client and server can finally establish an
encrypted connection. To do so, the client sends a randomly generated pre-master secret to
the server encrypted with the server’s certificate public key. Next, both client and server
combine the pre-master secret with the client and server randoms, and they use this
combined value to seed a random number generator that generates a 48-byte master secret,
which will be the session key for the encrypted connection. (The fact that both the server
and the client generate the master key provides replay protection for the connection,
because if either endpoint sends a different random during negotiation, the endpoints will
generate different master secrets.)
When both endpoints have the master secret, or session key, an encrypted connection is
possible. The client issues a change cipher spec packet to tell the server it will only send
encrypted messages from here on. However, the client needs to send one final message to
the server before normal traffic can be transmitted: the finished packet. This packet is
encrypted with the session key and contains a hash of all the handshake messages sent and
received during the handshake process. This is a crucial step in protecting against a
downgrade attack, in which an attacker modifies the handshake process to try to reduce the
security of the connection by selecting weak encryption algorithms. Once the server
receives the finished message, it can validate that the negotiated session key is correct
(otherwise, the packet wouldn’t decrypt) and check that the hash is correct. If not, it can
close the connection. But if all is correct, the server will send its own change cipher spec
message to the client, and encrypted communications can begin.
Each encrypted packet is also verified using an HMAC, which provides data
authentication and ensures data integrity. This verification is particularly important if a
stream cipher, such as RC4, has been negotiated; otherwise, the encrypted blocks could be
trivially modified.
Meeting Security Requirements
The TLS protocol successfully meets the four security requirements listed at the
beginning of this chapter and summarized in Table 7-4.
Table 7-4: How TLS Meets Security Requirements
Security
requirement
How it’s met
Technet24
||||||||||||||||||||
||||||||||||||||||||
Data
confidentiality
Selectable strong cipher suites
Secure key exchange
Data integrity
Encrypted data is protected by an HMAC
Handshake packets are verified by final hash verification
Server
authentication
The client can choose to verify the server endpoint using the PKI and
the issued certificate
Client
authentication
Optional certificate-based client authentication
But there are problems with TLS. The most significant one, which as of this writing
has not been corrected in the latest versions of the protocol, is its reliance on certificate-
based PKI. The protocol depends entirely on trust that certificates are issued to the correct
people and organizations. If the certificate for a network connection indicates the
application is communicating to a Google server, you assume that only Google would be
able to purchase the required certificate. Unfortunately, this isn’t always the case.
Situations in which corporations and governments have subverted the CA process to
generate certificates have been documented. In addition, mistakes have been made when
CAs didn’t perform their due diligence and issued bad certificates, such as the Google
certificate shown in Figure 7-22 that eventually had to be revoked.
||||||||||||||||||||
||||||||||||||||||||
Figure 7-22: A certificate for Google “wrongly” issued by CA TÜRKTRUST
One partial fix to the certificate model is a process called certificate pinning. Pinning
means that an application restricts acceptable certificates and CA issuers for certain
domains. As a result, if someone manages to fraudulently obtain a valid certificate for
www.google.com, the application will notice that the certificate doesn’t meet the CA
restrictions and will fail the connection.
Of course, certificate pinning has its downsides and so is not applicable to every
scenario. The most prevalent issue is the management of the pinning list; specifically,
building an initial list might not be too challenging a task, but updating the list adds
additional burdens. Another issue is that a developer cannot easily migrate the certificates
to another CA or easily change certificates without also having to issue updates to all
clients.
Another problem with TLS, at least when it comes to network surveillance, is that a
TLS connection can be captured from the network and stored by an attacker until it’s
Technet24
||||||||||||||||||||
||||||||||||||||||||
needed. If that attacker ever obtains the server’s private key, all historical traffic could be
decrypted. For this reason, a number of network applications are moving toward
exchanging keys using the DH algorithm in addition to using certificates for identity
verification. This allows for perfect forward secrecy—even if the private key is compromised,
it shouldn’t be easy to also calculate the DH-generated key.
Final Words
This chapter focused on the basics of protocol security. Protocol security has many aspects
and is a very complex topic. Therefore, it’s important to understand what could go wrong
and identify the problem during any protocol analysis.
Encryption and signatures make it difficult for an attacker to capture sensitive
information being transmitted over a network. The process of encryption converts
plaintext (the data you want to hide) into cipher text (the encrypted data). Signatures are
used to verify that the data being transmitted across a network hasn’t been compromised.
An appropriate signature can also be used to verify the identity of the sender. The ability
to verify the sender is very useful for authenticating users and computers over an untrusted
network.
Also described in this chapter are some possible attacks against cryptography as used in
protocol security, including the well-known padding oracle attack, which could allow an
attack to decrypt traffic being sent to and from a server. In later chapters, I’ll explain in
more detail how to analyze a protocol for its security configuration, including the
encryption algorithms used to protect sensitive data.
||||||||||||||||||||
||||||||||||||||||||
8
IMPLEMENTING THE NETWORK PROTOCOL
Analyzing a network protocol can be an end in itself; however, most likely you’ll want to
implement the protocol so you can actually test it for security vulnerabilities. In this
chapter, you’ll learn ways to implement a protocol for testing purposes. I’ll cover
techniques to repurpose as much existing code as possible to reduce the amount of
development effort you’ll need to do.
This chapter uses my SuperFunkyChat application, which provides testing data and
clients and servers to test against. Of course, you can use any protocol you like: the
fundamentals should be the same.
Replaying Existing Captured Network Traffic
Ideally, we want to do only the minimum necessary to implement a client or server for
security testing. One way to reduce the amount of effort required is to capture example
network protocol traffic and replay it to real clients or servers. We’ll look at three ways to
achieve this goal: using Netcat to send raw binary data, using Python to send UDP
packets, and repurposing our analysis code in Chapter 5 to implement a client and a server.
Capturing Traffic with Netcat
Netcat is the simplest way to implement a network client or server. The basic Netcat tool
is available on most platforms, although there are multiple versions with different
command line options. (Netcat is sometimes called nc or netcat.) We’ll use the BSD version
of Netcat, which is used on macOS and is the default on most Linux systems. You might
need to adapt commands if you’re on a different operating system.
The first step when using Netcat is to capture some traffic you want to replay. We’ll
use the Tshark command line version of Wireshark to capture traffic generated by
SuperFunkyChat. (You may need to install Tshark on your platform.)
To limit our capture to packets sent to and received by our ChatServer running on
TCP port 12345, we’ll use a Berkeley Packet Filter (BPF) expression to restrict the capture
to a very specific set of packets. BPF expressions limit the packets captured, whereas
Wireshark’s display filter limits only the display of a much larger set of capture packets.
Run the following command at the console to begin capturing port 12345 traffic and
writing the output to the file capture.pcap. Replace INTNAME with the name of the interface
you’re capturing from, such as eth0.
Technet24
||||||||||||||||||||
||||||||||||||||||||
$ tshark -i INTNAME -w capture.pcap tcp port 12345
Make a client connection to the server to start the packet capture and then stop the
capture by pressing CTRL+C in the console running Tshark. Make sure you’ve captured the
correct traffic into the output file by running Tshark with the -r parameter and specifying
the capture.pcap file. Listing 8-1 shows example output from Tshark with the addition of
the parameters -z conv,tcp to print the list of capture conversations.
$ tshark -r capture.pcap -z conv,tcp
 ➊ 1 0 192.168.56.1 → 192.168.56.100 TCP 66 26082 → 12345 [SYN]
    2 0.000037695 192.168.56.100 → 192.168.56.1 TCP 66 12345 → 26082 [SYN, ACK]
    3 0.000239814 192.168.56.1 → 192.168.56.100 TCP 60 26082 → 12345 [ACK]
    4 0.007160883 192.168.56.1 → 192.168.56.100 TCP 60 26082 → 12345 [PSH, ACK]
    5 0.007225155 192.168.56.100 → 192.168.56.1 TCP 54 12345 → 26082 [ACK]
--snip--
================================================================================
TCP Conversations
Filter:
                                              |             |
                                              | Frames  Bytes | | Frames  Bytes |
192.168.56.1:26082  192.168.56.100:12345➋   17      1020➌     28      1733➍
================================================================================
Listing 8-1: Verifying the capture of the chat protocol traffic
As you can see in Listing 8-1, Tshark prints the list of raw packets at ➊ and then
displays the conversation summary ➋, which shows that we have a connection going from
192.168.56.1 port 26082 to 192.168.56.100 port 12345. The client on 192.168.56.1 has
received 17 frames or 1020 bytes of data ➌, and the server received 28 frames or 1733
bytes of data ➍.
Now we use Tshark to export just the raw bytes for one direction of the conversation:
$ tshark -r capture.pcap -T fields -e data 'tcp.srcport==26082' > outbound.txt
This command reads the packet capture and outputs the data from each packet; it
doesn’t filter out items like duplicate or out-of-order packets. There are a couple of details
to note about this command. First, you should use this command only on captures
produced on a reliable network, such as via localhost or a local network connection, or you
might see erroneous packets in the output. Second, the data field is only available if the
protocol isn’t decoded by a dissector. This is not an issue with the TCP capture, but when
we move to UDP, we’ll need to disable dissectors for this command to work correctly.
Recall that at ➋ in Listing 8-1, the client session was using port 26082. The display
filter tcp.srcport==26082 removes all traffic from the output that doesn’t have a TCP source
port of 26082. This limits the output to traffic from the client to the server. The result is
the data in hex format, similar to Listing 8-2.
$ cat outbound.txt
42494e58
0000000d
||||||||||||||||||||
||||||||||||||||||||
00000347
00
057573657231044f4e595800
--snip--
Listing 8-2: Example output from dumping raw traffic
Next, we convert this hex output to raw binary. The simplest way to do so is with the
xxd tool, which is installed by default on most Unix-like systems. Run the xxd command, as
shown in Listing 8-3, to convert the hex dump to a binary file. (The -p parameter converts
raw hex dumps rather than the default xxd format of a numbered hex dump.)
$ xxd -p -r outbound.txt > outbound.bin
$ xxd outbound.bin
00000000: 4249 4e58 0000 000d 0000 0347 0005 7573  BINX.......G..us
00000010: 6572 3104 4f4e 5958 0000 0000 1c00 0009  er1.ONYX........
00000020: 7b03 0575 7365 7231 1462 6164 6765 7220  {..user1.badger
--snip--
Listing 8-3: Converting the hex dump to binary data
Finally, we can use Netcat with the binary data file. Run the following netcat command
to send the client traffic in outbound.bin to a server at HOSTNAME port 12345. Any traffic sent
from the server back to the client will be captured in inbound.bin.
$ netcat HOSTNAME 12345  inbound.bin
You can edit outbound.bin with a hex editor to change the session data you’re replaying.
You can also use the inbound.bin file (or extract it from a PCAP) to send traffic back to a
client by pretending to be the server using the following command:
$ netcat -l 12345  new_outbound.bin
Using Python to Resend Captured UDP Traffic
One limitation of using Netcat is that although it’s easy to replay a streaming protocol
such as TCP, it’s not as easy to replay UDP traffic. The reason is that UDP traffic needs
to maintain packet boundaries, as you saw when we tried to analyze the Chat Application
protocol in Chapter 5. However, Netcat will just try to send as much data as it can when
sending data from a file or a shell pipeline.
Instead, we’ll write a very simple Python script that will replay the UDP packets to the
server and capture any results. First, we need to capture some UDP example chat protocol
traffic using the ChatClient’s --udp command line parameter. Then we’ll use Tshark to save
the packets to the file udp_capture.pcap, as shown here: