最通用的定义一个类的方法有通过构造函数、通过对象字面量和通过含有@constructs方法的对象字面量。
29.6.1 通过构造函数定义类
要通过构造函数来定义一个类，你必须将构造函数标记出来。否则它不会被作为一个类来进行记录。单纯采用大写的函数名不能标记是构造函数。
29.6.2 通过对象字面量定义类
通过对象字面量的方式定义一个类，你需要做两个标记。首先，需要告诉JSDoc存在给定的变量来定义类。其次，需要将对象字面量标记为是在定义一个类，它可以通过@lends标签完成：
29.6.3 通过带有@constructs方法的对象字面量定义类
如果一个对象字面量有@constructs方法，JSDoc可以定位到该方法，并找到实例属性的文档内容。关于类的文档转移到@constructs方法中。
如果不用@lends标签，每个方法必须注明它是从属于哪个类的。
29.6.4 子类
JavaScript本身不支持子类。当你在代码中定义一个子类（通过类库或者自己写代码实现），使用JSDoc时，需要说明。
@extends namePath：指明当前的类是另一个类的子类，例如：
29.7 其他有用的标签
所有的标签在JSDoc网站上都有描述（http://usejsdoc.org/）。
模块相关的：@module, @exports , @namespace
自定义类型（用于一些虚拟实体，比如回调方法，它们的签名可以自定义）：@typedef, @callback
法律事项：@copyright, @license
多样化的对象：@mixin , @enum
[1] JSDoc的官网是本章内容的主要来源，一些案例是从上面摘取的。
第30章 类库
这一章介绍的是JavaScript库。首先解释了什么是shim和polyfill，它们是两种特殊类型的库。然后列出了一些核心库。最后给出的是额外的库相关资源。
30.1 shim和polyfill
shim和polyfill是在旧的JavaScript引擎上改造新的功能。
shim是一个库，它在旧的环境中引入新的API，单纯使用了旧环境下的方法。
polyfill是一个浏览器API 的shim。它通常先检查浏览器是否支持对应的API。如果不支持，polyfill会添加该API的实现。这样可以让你在任何情况下都能使用该API。术语polyfill来自一个家装改进产品，源自Remy Sharp（http://bit.ly/MmZZmZ）。
Polyfilla是英国的产品，在美国被称为Spackling Paste。考虑到这一点，想象浏览器为一道墙，而墙上有一道裂缝，polyfill帮助修理裂缝。最终呈现给我们的是一堵光滑的浏览器墙，供我们使用。
相关的例子如下。
“HTML5跨浏览器Polyfills”（http://bit.ly/1oOGuTE）：由Paul Irish编写。
ES5-shim（http://bit.ly/1oOGxi4）是一个（非polyfill）shim。它为ECMA Script 3引擎添加了ECMAScript 5的特性。它是纯粹语言相关的，在浏览器、Node.js中都可以起作用。
30.2 四个语言类库
下列语言类库都比较知名和被认可，了解它们很有用处。
ECMAScript的国际化API有助于与国际化有关的任务：校勘（排序和搜索字符串），设置数字格式、日期和时间格式。下一节将介绍这个API的更多细节。
JavaScript标准库功能不是很强大，Underscore.js（http://underscore.js.org）为其补充了工具方法的数组、对象、函数等。因为Underscore比ECMAScript5出来的早，所以与标准库存在一些重叠。也就是说，一个功能：在旧的浏览器中，你得到的功能通常是ECMAScript-5，而在ECMAScript 5中，相关功能只是期待的标准库。
Lo-Dash（http://lodash.com）是另一种可替代Underscore.js API的类库，它还有一些额外的功能。你可以尝试一下并确认它是否比Underscore.js更合适你的网站。
XRegExp（http://xregexp.com）是一个常见的表达类库，它有几个先进的功能，如正则表达式库命名捕获和自由间距（它允许你摊开正则表达式跨多行，且对每行进行记录）。使用XRegExp可以将增强后的正则表达式转换为正常的正则表达式，这意味着你不付出性能上的损失。
30.3 ECMAScript的国际化API
ECMAScript的国际化API是一个标准的JavaScript API以助于一些规范的国际化：整理（排序和搜索字符串），设置数字格式、日期和时间格式。本节只对此做简要介绍，并提供一些额外的阅读材料。
30.3.1 ECMAScript的国际化API，第1版
该API的第1版提供以下服务。
整理支持两种情况：为一组字符串做排序和在一组字符串中进行搜索。排序规则是以区域设置和Unicode作为参数。
数字格式化。参数包括如下。
格式化方式：小数，货币（适用那一种，以及如何适用由其他参数确定），百分比。
本地化（直接指定或最佳匹配结果，通过匹配对象搜索）。
编号系统（西方数字、阿拉伯数字、泰国数字等）。
精度：整数位、小数位数、显著位数。
打开或关闭分组分隔符。
日期和时间格式。参数包括。
格式化什么样的信息和格式化方式（短、长、数字等）。
语言环境。
时区。
大部分功能是通过一个全局对象Intl来访问，但该API还增强了以下方法。
String.prototype.localeCompare
Number.prototype.toLocaleString
Date.prototype.toLocaleString
Date.prototype.toLocaleDateString
Date.prototype.toLocaleTimeString
30.3.2 它是怎么样的标准呢
标准的“ECMAScript的国际化的API”（EIA）的代号是ECMA-402。它是由Ecma International规定的，该协会也规定了EMCA-262、ECMAScript语言规范。这两个标准都由TC39维护。因此，EIA是最接近ECMA-262的语言。该API被设计成同时兼容ECMAScript 5和ECMAScript 6。一系列兼容性的测试使得这个标准得到了补充并有大量的实践确保了这个标准具有良好的兼容性（ECMA-262也有类似的测试套件）。
30.3.3 我们可以用它做什么
大多数现代浏览器已经支持它，或者是即将支持它。David Storey创造了一个详细的兼容性表（http://bit.ly/1oOGIdo）（指出哪些浏览器支持它的语言环境和其他）。
30.3.4 延伸阅读
ECMAScript的国际化API的规范（http://bit.ly/1oOGQth）由Norbert Lindenberg编辑。它提供了PDF，HTML，EPUB等格式的文件。此外，还有一些综合性的介绍性文章。
“The ECMAScript Internationalization API”（http:/bit.ly/1oOGT8C），Norbert Lindenberg著
“ECMAScript Internationalization API”（http://bit.ly/1oOGYcc），David Storey著
“Using the JavaScript Internationalization API”（http://bit.ly/1oOH2sz），Marcos Caceres著
30.4 JavaScript资源目录
本节列出了收集了JavaScript资源的网站，可以进行分类。
以下是一般目录。
“JavaScriptOO: Every JavaScript project you should be looking into”（http://www. javascriptoo.com/）
JSDB（http://www.jsdb.io/）: A collection of the best JavaScript libraries
Jster（http://jster.net/）: A catalog of JavaScript libraries and tools for development
“Master List of HTML5, JavaScript, and CSS Resources”（http://bit.ly/1oOH7MW）
专业目录包括：
“Microjs: Fantastic Micro-Frameworks and Micro-libraries for Fun and Profit” （http://microjs.com/）
“Unheap: A tidy repository of jQuery plugins”（http://www.unheap.com/）
当然，也可以直接查看包管理器的注册库列表：
npm（https/npmjs.org/）(Node Packaged Modules)
Bower（http://bower.io/）
CDN（内容分发网络）资源如下。
jsDelivr（http://www.jsdelivr.com/）：为JavaScript库、jQuery插件、CSS框架、字体等提供免费的CDN服务。
“cdnis：存储JavaScript和CSS的CDN（http://cdnjs.com/），但它逐渐被人们遗忘了。”（好在它托管了一些偏门的类库）
注解：
 致谢
以下各位为本部分内容做出了贡献，他们是：Kyle Simpson (@getify)、Gildas Lormeau (@check_ca)、Fredrik Sogaard(@fredrik_sogaard)、Gene Loparco(@gloparco)、Manuel Strehl(@m_strehl)和Elijah Manor(@elijahmanor)。
第31章 模块系统和包管理器
JavaScript原生是不支持模块的，但开发者社区创造了一些比较好的实现方法。模块管理可以通过包管理器实现，包括模块搜索、使用、依赖管理等。
31.1 模块系统
最重要的两个JavaScript的模块标准（不幸的是这两个标准是不兼容的）如下。
（1）CommonJS模块（CommonJS Module，CJS）
CJS的主要化身就是Node.js模块（http://nodejs.org/api/modules.html）（Node.js模块有几个优于CJS的特点）。它的特点包括：
紧凑的语法；
同步加载的设计；
主要用于服务端。
（2）异步模块定义（Asynchronous Module Definition，AMD）
AMD最典型的实现就是Requirejs（http://requirejs.org/）。它的特点包括：
AMD语法稍微复杂些，但不通过eval()或者静态编译步骤就可以工作；
异步加载的设计；
主要用于浏览器。
31.2 包管理器
npm（Node Packaged Module，http://npmjs.org）是Node.js官方选择的包管理器。对于浏览器Web端，有两个比较流行的包管理器（当然，还有更多）：
Bower（http://bower.io）是一个用于Web端的，支持AMD和CJS的包管理器。
Browserify（http://browserify.org）是一个基于npm的工具。npm包通过Browserify编译后，可以在浏览器中使用。
31.3 简单粗暴的模块实现
通常Web开发应该使用一个模块系统，比如RequireJS或Browserify。然而，有时会想采用一种快速的hack方式去进行模块管理。那么，可以使用以下简单的模块模式：
上面的代码实现了一个存储在全局变量moduleName的模块。它做了以下操作：
隐式地引进了一个模块依赖（即模块otherModule）；
存在一个私有函数privateFunction；
暴露一个公共方法publicFunction。
在网页上使用这个模块，通过标签简单地载入该文件以及它所依赖的文件：
如果当一个模块在加载完成时，不需要去访问其他模块（就像上面例子中的moduleName），那么模块加载的顺序也就无关紧要。
这里给出我的评论和意见。
当我使用了这个模块模式一段时间后，我才发现不是我发明了它，而且它还有一个正式的名字。是Christian Heilmann推广了它，并为它取名叫揭示模块模式（revealing module pattern）（http://bit.ly/1c1InUg）。
如果你希望使用这个模式，请保留它简单的特性。当你起模块名的时候不必因为污染了全局作用域而感到压力山大，你只需要找到尽量独特的名称就够了，所以没有其他折腾的必要（嵌套的命名空间，模块拆分为多个文件等）。
第32章 其他工具
模块系统和包管理器在第31章已经讲过了，但还存在其他重要工具。
（1）代码检测
代码检测工具能够分析源代码，并且可以对潜在的问题以及违反样式风格的问题做出报告。现有三种最为流行的版本：
JSLint（http://www.jslint.com），作者是 Douglas Crockford；
JSHint（http://www.jshint.com），作者是 Anton Kovalyov；
ESLint（https://github.com/nzakas/eslint），作者是 Nicholas Zakas。
（2）单元测试
一个理想的单元测试的框架要在两大JavaScript平台上都能够运行：浏览器和Node.js。这里有两个重要的框架：
Jasmine（http://pivotal.github.io/jasmine/）；
mocha（http://visionmedia.github.io/mocha/）。
（3）压缩
JavaScript源码通常非常浪费空间——变量的名称没有必要那么长，还有注释、没有用的空白等。压缩工具能够把这些都干掉，使代码变得更小。有些压缩处理相对复杂些（如简化变量名称）。以下是三个比较流行的压缩工具：
UglifyJS（https://github.com/mishoo/UglifyJs2/）；
YUI Compressor（https://github.com/yui/yuicompressor）；
Closure Compiler（https://developers.google.com/closure/compiler/）。
（4）部署
对于大多数项目，需要对写好的代码进行其他操作，包括检测（lint）、编译（编译甚至发生在Web项目中，比如将LESS或者SASS编译成普通CSS）、压缩代码等等。部署工具能够帮我们做好这些。两个经典的部署工具例子是Unix的make和Java的Ant。两个有名的JavaScript部署工具是Grunt（http://gruntjs.com）和Gulp（http://gulpjs.com/）。它们其中一个比较吸引人的特性是，都是通过JavaScript开发的，都是基于Node.js的。
（5）脚手架
脚手架工具可以建立一个空的项目，预配置部署文件等。Yo（https://github.com/yeoman/yo）就是这样的一个工具。它是Yeoman（http://yeoman.io）的一部分，Yeoman集成了Yo、Bower和Grunt。
第33章 接下来该做什么
既然你已经了解JavaScript了，那如何继续深入呢？了解整个生态系统的最好方法又是什么？这里给出几点建议：
Frontend Rescue（http://uptodate.frontendrescue.org）网站针对浏览器开发入门给出了一些建议。
Jsbooks（http://jsbooks.revolunet.com）有各种免费JavaScript以及相关技术的书籍。
Twitter是一个非常优秀的紧跟Web开发技术前沿的平台。先关注一些你认识的比较知名的JavaScript开发者（例如，你所使用的框架的作者），从那开始，然后慢慢地你会知道接下来需要关注哪些人。
JSMentors（https://groups.google.com/forum/#!forum/jsmentors）是一个致力于“在专业并且轻松的环境下帮助开发者成为更好的JavaScript编程者”的论坛。
除了Twitter，还有许多其他有用的新闻来源。以下是几个例子：
Echo JS（http://www.echojs.com）是一个专注于JavaScript和HTML5的开发社区网站。
Cooper Press（https://cooperpress.com）通过邮件发布一些与Web开发相关的时事新闻。（声明：我是“JavaScript Weekly”时事新闻的编辑）
Open Web Platform Daily Digest（http://webplatformdaily.org/）每日提供有价值的链接清单。
Best of JavaScript, HTML & CSS（http://flippinawesome.org/category/ news/best-of/）每周提供链接清单。
JavaScript user groups（http://communityjs.org）是一个有趣的并且有教育意义的志趣相投的组织。大多数人定期聚集并谈论技术。
JavaScript大会（http://lanyrd.com/topics/javascript/）是另外一个好的信息来源。大部分都会在网上发布相关的视频，而且是免费访问的。
最后，你也可以看看本书的网站，SpeakingJS.com（http://speakingjs.com/），我偶尔会在这里发表一些与本书相关的资料。
看完了
如果您对本书内容有疑问，可发邮件至PI:EMAIL，会有编辑或作译者协助答疑。也可访问异步社区，参与本书讨论。
如果是有关电子书的建议或问题，请联系专用客服邮箱：PI:EMAIL。
在这里可以找到我们：
微博：@人邮异步社区
QQ群：368449889