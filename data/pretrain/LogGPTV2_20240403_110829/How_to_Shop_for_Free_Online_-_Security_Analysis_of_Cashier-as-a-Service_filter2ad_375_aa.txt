title:How to Shop for Free Online - Security Analysis of Cashier-as-a-Service
Based Web Stores
author:Rui Wang and
Shuo Chen and
XiaoFeng Wang and
Shaz Qadeer
2011 IEEE Symposium on Security and Privacy
How to Shop for Free Online  
Security Analysis of Cashier-as-a-Service Based Web Stores 
Rui Wang1, Shuo Chen2, XiaoFeng Wang1, Shaz Qadeer2 
1 Indiana University Bloomington 
Bloomington, IN, USA  
[wang63, xw7]@indiana.edu 
2 Microsoft Research 
Redmond, WA, USA 
[shuochen, qadeer]@microsoft.com 
Abstract— Web applications increasingly integrate third-party 
services.  The  integration  introduces  new  security  challenges 
due  to  the  complexity  for  an  application  to  coordinate  its 
internal  states  with  those  of  the  component  services  and  the 
web  client  across  the  Internet.  In  this  paper,  we  study  the 
security implications of this problem to merchant websites that 
accept  payments  through  third-party  cashiers  (e.g.,  PayPal, 
Amazon Payments and Google Checkout), which we refer to as 
Cashier-as-a-Service or CaaS. We found that leading merchant 
applications  (e.g.,  NopCommerce  and  Interspire),  popular 
online  stores  (e.g.,  Buy.com  and  JR.com)  and  a  prestigious 
CaaS  provider  (Amazon  Payments)  all  contain  serious  logic 
flaws that can be exploited to cause inconsistencies between the 
states of the CaaS and the  merchant. As a result, a  malicious 
shopper can purchase an item at an arbitrarily low price, shop 
for free after paying for one item, or even avoid payment. We 
reported  our  findings  to  the  affected  parties.  They  either 
updated their vulnerable software or continued to work on the 
fixes with high priorities. We further studied the complexity in 
finding this type of logic flaws in typical CaaS-based checkout 
systems, and gained a preliminary understanding of the effort 
that  needs  to  be  made  to  improve  the  security  assurance  of 
such systems during their development and testing processes. 
Keywords-  e-Commerce  security;  web  API;  Cashier-as-a-
Service; logic bug; program verification 
I. 
INTRODUCTION 
Progress in web technologies has led to rapid growth of 
hybrid  web  applications  that  combine  the  Application 
Programming  Interfaces  (APIs)  of  multiple  web  services 
(e.g.,  search  APIs,  map  APIs,  payment  APIs,  etc.)  into 
integrated services like personal financial data aggregations 
and  online  shopping  websites.  The  pervasiveness  of  these 
applications, however, brings in new security concerns. The 
web  programming  paradigm  is  already  under  threat  from 
malicious  web  clients  that  exploit  logic  flaws  caused  by 
improper  distribution  of 
the  application  functionality 
between  the  client  and  the  server  (e.g.,  relying  on  client 
logic  to  validate  user  privileges).  The  program  logic  of  a 
hybrid web application is further complicated by the need to 
securely coordinate different web services that it integrates: 
failing to do so leaves the door  wide open for attackers to 
violate  security  invariants  by  inducing  inconsistencies 
among these services. 
As an example, consider an online merchant integrated 
with the Amazon Payments service. The shopper’s browser 
communicates  with  the  merchant  server  to  place  an  order, 
and  with  an  Amazon  server  to  make  a  payment.  If  the 
interactions  between  the  two  servers  are  not  well  thought 
out, the shopper may be able to shop for free.  For instance, 
we discovered a real flaw where the merchant is convinced 
that  the  order  has  been  paid  for  in  full  through  Amazon 
while the payment has actually been made to the shopper’s 
own Amazon seller account.  
Intuitively, logic bugs related to multiple web services 
can be much more difficult to avoid than those in traditional 
single-service web applications – it is analogous to real-life 
experiences that when multiple parties discuss a subject by 
making  individual  one-on-one  phone  calls,  it  is  generally 
difficult for each party to comprehend the whole picture. An 
honest  party  may  say  something  out  of  context,  or  fail  to 
understand  another  honest  party’s  assumptions  and 
reasoning,  so  a  cheater  is  more  likely  to  succeed  in  this 
situation  than  in  a  two-party  conversation  between  the 
cheater  and  the  only  honest  party.  We  will  show  many 
concrete findings to support this intuition. 
Cashier-as-a-Service  based  checkout.  As  a  first  step 
towards  understanding  the  security  implications  of  multi-
party  web  applications,  we  studied  a  category  of  online 
merchant applications that adopt third-party cashier services 
such  as  PayPal,  Amazon  Payments  and  Google  Checkout. 
These cashier services, which we call Cashier-as-a-Service 
or simply CaaS, play a crucial role in today’s e-commerce, 
since they act as a trusted third party that enables mutually 
distrustful  parties  to  do  business  with  each  other.  A  CaaS 
can collect the payment of a purchase from the shopper and 
inform  the  merchant  of  the  completion  of  the  payment 
without  revealing  the  shopper’s  sensitive  data  like  a  credit 
card  number.  A  study  showed  that  59%  of  U.S.  online 
shoppers  would  be  more  likely  to  buy  in  web  stores  that 
accept CaaS payment methods [8]. 
During  a  checkout  process,  communications  happen 
between  the  CaaS  and  the  merchant,  as  well  as  between 
these  two  services  and  the  web  client  controlled  by  the 
shopper. This trilateral interaction is meant to coordinate the 
internal  states  of  the  merchant  and  the  CaaS,  since  either 
party  has  only  a  partial  view  of  the  entire  transaction. 
Unfortunately, the trilateral interaction can be significantly 
more complicated than typical bilateral interactions between 
a  browser  and  a  server,  as  in  traditional  web  applications, 
which  have  already  been  found  to  be  fraught  with  subtle 
logic bugs [9][12][16][36]. Therefore, we believe that in the 
presence  of  a  malicious  shopper  who  intends  to  exploit 
knowledge  gaps  between  the  merchant  and  the  CaaS,  it  is 
difficult to ensure security of a CaaS-based checkout system.   
Our work. The aforementioned concern turns out to be well-
grounded  in  the  real  world.  We  conducted  a  systematic 
study of representative merchant software/websites that use 
the  cashier  services  of  PayPal,  Amazon  Payments  and 
1081-6011/11 $26.00 © 2011 IEEE
DOI 10.1109/SP.2011.26
465
Google  Checkout.  Our  study  revealed  numerous  security-
related logic flaws in a variety of merchant systems, ranging 
from  a  high-quality  open  source  software  (NopCommerce 
[29]), to a leading commodity application (Interspire [20]), 
to high-profile merchant websites powered by closed-source 
proprietary  software  such  as  Buy.com  and  JR.com.  Our 
attacker model is fairly simple – the attacker is a malicious 
shopper  whose  only  capability  is  to  call  the  web  APIs 
exposed  by  the  merchant  and  the  CaaS  websites  in  an 
arbitrary  order  with  arbitrary  argument  values.  We  will 
show that everyone who has a computer and a small amount 
of cash (e.g., $25) is a qualified attacker. By exploiting the 
logic  flaws,  a  malicious  shopper  is  able  to  purchase  at  an 
arbitrarily-set price, shop for free after paying for one item, 
or even avoid payment.  
To  examine  whether 
logic  flaws  pose  an 
imminent threat to e-commerce, we performed a responsibly 
designed  exploit  analysis  on  real  web  stores,  including 
leading  e-commerce  websites  such  as  Buy.com,  and 
successfully  checked  out  various  items  through  exploiting 
these  flaws. Figure  1  shows  some  of  the  items  that  were 
delivered 
included  both  physical  and 
digital/downloadable  commodities.  This  study  was  closely 
advised  by  a  lawyer  of  our  institution  and  conducted  in  a 
responsible manner, as elaborated in Section IV. 
to  us,  which 
these 
       (A) DVD                 (B) agility cream         (C) digital journals 
   (D) alcohol tester            (E) charger                      (F) DVD 
Figure 1: some received items and their shipping packages 
While  most of the logic flaws are due to lapses in the 
merchant  software,  we  were  surprised  to  find  that  well-
known CaaS providers also need to shoulder responsibility: 
in particular, a serious error that  we discovered in a set of 
Amazon  Payments’  SDKs  has  caused  Amazon 
to 
significantly  alter  the  way  for  verifying  its  payment 
notifications.  We  have  reported  our  findings  to  all  the 
affected parties, who acknowledged the significance of the 
findings and expressed gratitude for our help. We post part 
of our communications with them in [37]. 
To  understand  how  complicated  it  is  to  ensure  the 
absence  of  logic  flaws  in  real-world  CaaS-based  checkout 
processes,  we  performed  a  formal  verification  study  on  a 
subset of Interspire’s source code. We checked an invariant 
that is a conjunction of a series of bindings between order 
466
information and payment information. The outcomes turned 
out  to  be  mixed:  on  one  hand,  formal  methods  did 
demonstrate  their  potential  to  address  such  a  threat  –  they 
not only revealed all the flaws that we manually identified 
from the source code, but also new attacks that we did not 
expect.  On  the  other  hand,  the  complexity  in  the  current 
checkout  logic  made  even  the  state-of-the-art  verifier  hard 
to rule out the existence of potential logic flaws that can be 
exploited  by  more  complicated  attacks  (with  API-call 
sequences  longer  than  what  the  current  tool  can  explore).  
This suggests that little “margin of safety” can be offered by 
existing techniques for the exploits we discovered. 
We  view  this  work  as  a  preliminary  study  that  only 
touched relatively simple trilateral interactions, while other 
real-world  applications  may  involve  more  parties  (e.g.,  in 
marketplace  and  auction  scenarios),  and  therefore  can  be 
more  error-prone.  This  calls  for  further  security  studies 
about such complicated multi-party web applications.  
Contributions. Our contributions are summarized as follows: 
•  In-depth  security  analysis  of  real-world  CaaS-based 
checkout  systems.  We  performed 
the  first  systematic 
analysis  of  the  security-related  logic  flaws  in  hybrid  web 
applications.  Our  work discovers numerous security flaws 
in  many representative checkout systems and demonstrates 
practical attacks that can happen to them. This suggests that 
there is inherent complexity in securely integrating multiple 
web services in a web application.  
•   A  preliminary  analysis  of  the  complexity  of  finding 
logic flaws in these systems. We extracted the logic model 
from  Interspire  and  analyzed  it  with  a  state-of-the-art 
verification-condition checker. From the study, we gained a 
preliminary  but  quantitative  understanding  of  the  inherent 
logic complexity of CaaS-based checkout systems. 
II.  BACKGROUND  
A.  Introduction to checkout workflows 
Figure  2  shows  some  typical  steps  in  a  CaaS-based 
checkout.  It  starts  when  the  button  on  page  A  of  the 
merchant  website  (e.g.,  Buy.com)  is  clicked.  In  the  figure, 
the button is “Check out with PayPal”, so the click directs 
the shopper’s browser to page B on PayPal (i.e., the CaaS), 
where he can click the “Pay Now” button to pay. Then, the 
shopper’s  browser  is  redirected  back  to  the  merchant’s 
website to finish the order, which  usually does not require 
the  shopper’s  actions.  Finally, 
the 
confirmation  page  C.  The  checkout  process  is  arranged  in 
this  way  to  ensure  that  all  three  parties  –  the  shopper,  the 
CaaS,  and  the  merchant,  stay  consistent  despite  their 
different locations across the Internet.   
the  shopper  gets 
   Items    Qty    Total
   $89.95
Remove
Description    Amount 
 xxxxxxxxx     $89.95 
  Pay Now 
Thanks for your order!
View  your order 
(A) click to place an order (B) click  to pay in the CaaS   (C) confirmation 
Figure 2: some steps in a checkout workflow 
What  happens  behind  the  scene  here  are  HTTP 
interactions between the three parties, who communicate by 
calling  web  APIs  exposed  by  the  merchant  and  the  CaaS. 
Such  APIs are essentially dynamic  web pages (denoted by 
diamond-shaped  symbols  in  Figure  3),  and  are  invoked 
through  HTTP  requests:  the  client  sends  an  HTTP  request 
through  a  URL  with  a  list  of  arguments  and  receives  an 
HTTP response (often a web page) dynamically constructed 
by  the  server  as  the  outcome  of  the  call.  Throughout  this 
paper, we refer to such a request/response pair as an HTTP 
round-trip or RT. In Figure 3,  an  RT is illustrated as a U-
shaped curve, with its request arm labeled by the suffix “.a” 
and  its  response  by  “.b”.  The  order  in  which  different 
requests/responses happen is specified by both the numeric 
order  of  their  corresponding  RT  labels  and  the  dictionary 
order  of  their  suffixes:  for  example,  RT1.b  comes  before 
RT2.a  but  after  RT1.a.a  and  RT1.a.b,  and  these  last  two 
messages are preceded by RT1.a, i.e., RT1.a → RT1.a.a → 
RT1.a.b→ RT1.b. Note that RT1.a.a is sent by the merchant 
during  the  handling  of  RT1.a,  so  RT1.a.a  is  not  just 
chronologically  after  RT1.a,  but  causally  depends  on  it. 
There is similar causality between RT2.a.a and RT2.a. 
Shopper/ 
Attacker
RT1.a 
RT1.b 
RT4.a 
RT4.b 
RT3.a 
RT3.b 
RT2.a 
RT2.b 
RT5.a 
Target store (merchant)
RT1.a.a
RT2.a.a  RT2.a.b 
RT1.a.b
RT5.b 
CaaS
Figure 3: Web APIs and HTTP round-trips (RTs) 
In  the  figure,  RT1  and  RT3  enable  the  shopper  to 
invoke the APIs on the merchant and receive the responses. 
For example, RT1.a can be set off by a button click on page 
A  in  Figure  2,  and  RT3.b  can  carry  the  confirmation 
response  (page  C).  RT2.a  can  be  an  API  call  to  make  a 
payment on the CaaS. It is sent when the “Pay Now” button 
on  page  B  of  Figure  2  is  clicked.  Moreover,  RT1.a.a  and 
RT2.a.a are sent by the merchant and the CaaS respectively 
to coordinate the state of the transaction with the other party. 
RT4  and  RT5  will  be  explained  later.  These  RTs  serve  as 
the  building  blocks  for  the  workflows  of  various  checkout 
solutions  offered  by  different  CaaS  service  providers 
(Amazon, PayPal, and Google). Some of the solutions, such 
as  PayPal  Standard  and  Amazon  Simple  Pay,  are  entirely 
based  upon  HTML,  while  the  others,  like  PayPal  Express 
and Checkout By Amazon, implement SOAP and NVP APIs.   
We  are  not  concerned  with  a  network  man-in-the-
middle  adversary  intercepting  RTs,  because  the  checkout 
modules of all  merchants and CaaS  websites communicate 
exclusively over HTTPS to guarantee end-to-end security. 