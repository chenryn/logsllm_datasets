# PostgreSQL 递归查询

## 目标
- 了解递归查询的语法
- 学习如何创建测试数据
- 掌握层级查询的方法
- 学会使用最短路径查询

## 递归查询语法
在PostgreSQL中，递归查询主要通过WITH RECURSIVE语句实现。这种查询方式非常适合处理具有层次结构的数据。

### 示例
```sql
WITH RECURSIVE tree AS (
    -- 非递归部分
    SELECT id, parent_id, name
    FROM categories
    WHERE parent_id IS NULL

    UNION ALL

    -- 递归部分
    SELECT c.id, c.parent_id, c.name
    FROM categories c
    JOIN tree t ON c.parent_id = t.id
)
SELECT * FROM tree;
```

## 创建测试数据
参考链接: [造数示例](https://github.com/digoal/blog/blob/master/201801/20180102_04.md)

### 创建表
```sql
CREATE TABLE a (
    c1 INT,          -- 节点1
    c2 INT,          -- 节点2
    prop JSONB,      -- 节点1和节点2之间边的属性（例如权重、关系等），用JSON存储
    PRIMARY KEY (c1, c2)  -- 主键
);

-- 为表a创建索引
CREATE INDEX idx_a_2 ON a(c1, COALESCE(((prop ->> 'weight'::text))::FLOAT8, 0));
```

### 插入数据
```sql
\set id random(1,10000000)
INSERT INTO a 
SELECT :id, ((width_bucket(:id,1,10000000,2000)-1)*50000 + (random()*50000)::int) 
FROM generate_series(1,1000) 
ON CONFLICT (c1, c2) DO NOTHING;

-- 使用pgbench生成更多数据
pgbench -M prepared -n -r -P 5 -f ./test.sql -c 50 -j 50 -t 100000
```

## N度搜索与最短路径查询
- **N度搜索**：可以通过递归查询来查找从某个节点出发，经过指定次数的关系到达的所有节点。
- **最短路径查询**：可以使用递归查询结合权重信息找到两点之间的最短路径。

## 总结
- 本节介绍了递归查询的基本概念及其在PostgreSQL中的实现方法。
- 通过实际例子展示了如何创建适合进行递归查询的数据集。
- 讨论了如何利用递归查询完成复杂的层级查询任务。
- 最后还提到了如何寻找图结构中的最短路径。

## 练习
1. 设计一张用于存储传感器上报日志数据的表格，包含字段：`sensor_id`（传感器ID）、`reported_time`（上报时间）以及`data`（上报数据，以JSON格式存储）。
2. 向该表中插入1000个不同传感器各1440条记录，总计144万条数据。
3. 使用普通SQL查询获取每个传感器最近的一条记录。
4. 利用递归查询技术重复步骤3的操作。
5. 比较两种方法执行效率上的差异，并分析其背后的原因。