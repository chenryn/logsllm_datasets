(d) OR
(e) AND
(f) VOT(k)
(g) PAND (h) POR
(i) SPARE
(j) SEQ (k) FDEP
(l) PDEP
Fig. 2. Element types in Static ((a)-(f)) and Dynamic Fault Trees (all)
SF
SF
T
SF
D
BI
C
D
D1
BI1
D2
BI2
V
PA
PB
A
B
L1
P1
L2
P2
(a) PAND example
(b) Model CONST(⊥)
(c) POR example
Fig. 3. Priority-gate examples
b) The priority-OR gate (POR) is considered in tempo-
ral fault trees2 by Walker et al. [21], [20], [22]. A POR fails
if the ﬁrst child fails before any other child does. The binary
POR is dual to the binary PAND, as a POR with children A
and B fails iff a PAND with children B and A is infallible.
Example 2: Consider two devices connected via a data
link. The system is operational as long as one device is
operational and no device blocks the data link, e.g. by turning
into a ”babbling idiot”3. A processor failure causes a device
failure. A data link failure turns a device with an operational
processor into a babbling idiot. A babbling idiot leads to a
system failure. The DFT is given in Fig. 3c. The TLE fails if
either both devices (D) fail or a babbling idiot (BI) occurs. D
if either (D1) or (D2) fails. Device i fails if either a processor
(Pi) or the data link (Li) fails. It starts babbling (BIi) if (Li)
fails and (Pi) has not occurred before.
c) Spare gates (SPARE) manage model usage of—
potentially shared—spare components. Children of the SPARE
gate represent modules; which model groups of redundant
parts. The ﬁrst child of the SPARE gate is the primary; the
other inputs are spares. Initially, the spare uses the primary.
Whenever the currently used child fails,
the SPARE gate
attempts to switch to the next (left to right) available spare
module, i.e. a child which has not yet failed and is not used
by another SPARE. If no such child exists, the SPARE fails.
Thus, modules can be in active (i.e., in use) or dormant mode;
BEs in dormant mode fail with the passive failure rate. It is the
responsibility of the SPARE module to switch modules from
dormant to active, i.e. all BEs in the spare module change their
failure rates from the passive to the active failure rate.
Example 3: Consider a motor bike (or car) with a spare
wheel. Each wheel either breaks due to a broken rim or due to
a ﬂat tire. The car fails if one of its wheels fail and cannot be
replaced, see Fig. 4a. As soon as the ﬁrst tire or rim fails, the
corresponding wheel Wi (1 ≤ i ≤ 2) fails. The SPARE with
primary Wi then claims the spare wheel Ws, thereby activating
2Temporal fault trees ≈ static fault trees with priority gates.
3Babbling idiots are devices that constantly send messages over a data link,
blocking communication of other devices.
W1
W2
Ws
T1
R1
T2
R2
Ts
Rs
(a) Motor bike with a spare wheel
(b) Order-enforcing
Fig. 4. SPARE gate examples
SF →
SF
→
⊥
A
B
A
B
A
B
(a) Order-enforcing
(b) Order-dependence
(c) Modelling Mutex
Fig. 5. Sequence enforcers
Ws—and thus its tire and its rim. For a subsequent failure of
any other wheel Wj, j (cid:6)= i, its corresponding SPARE cannot
claim the spare wheel Ws anymore. Thus, the SPARE (and
the system) fail. Note that assuming a passive standby for Ws
adds a—less likely—scenario where Ws fails before any of the
primary wheels. In that case, nothing happens after the failure
of Ws, but any failure on the primary wheels immediately
causes the system to fail.
Originally, spare modules were limited to BEs, but these
restrictions have been relaxed in e.g. [11]. In the example
above, everything connected to a child of a SPARE is part
of the spare module. In Fig. 4b, we depict the DFT, with four
spare modules, which we indicate by the dotted boxes. Indeed,
a child of a SPARE represents a spare module. Children of a
gate v are in the same spare module as v, unless v is a SPARE.
We discuss the extent of spare modules in Sect. III-E.
d) Sequence enforcers (SEQ) guarantee that their chil-
dren only fail from left to right. In [15], the SEQ is presented
as an alternative to the PAND, which might be misleading.
Whereas the PAND is a special AND-gate which only fails
if the order-restriction is met, the SEQ prevents certain orders
from occurring. Unlike common gates, SEQs do not propagate
failures, therefore SEQs have no parents.
Example 4: Consider a water pump which fails if a leakage
(A) occurs and the motor has a short circuit (B), see Fig. 5a.
This short circuit can only occur after the leakage. Fig. 5b
shows a DFT that fails after the BEs have failed in the order
A B. Contrary to the DFT in Fig. 5a, the possibility that B
fails before A does is not excluded, however, the DFT does
not fail if ﬁrst B and then A occurs.
SEQs are powerful elements and can be used to express e.g.
mutual exclusion, as shown for events A and B in Fig. 5c.
301
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply. 
SF
0.2
PSU
TU
PSU
TU
S
MA
MB
(a) Feedback loops
(b) Shorthand
(c) PDEP example
Fig. 6. FDEP examples
Here, the left child never fails, thus AND(A, B) may not fail.
e) A functional dependency (FDEP) is an element type
which forces other elements to fail. As SEQs, FDEPs have
no parents. The ﬁrst child of an FDEP is called trigger, all
other children are dependent events. If the trigger fails, then
its dependent events also fail. FDEPs are helpful to model
common cause failures and feedback loops. We consider the
example given in [2], where a failing thermal unit (TU) causes
the power supply unit (PSU) to overheat, and a failure of
the PSU causes a failing TU. We give the corresponding
DFT in Fig. 6a. Besides offering a convenient modelling
principle, FDEPs are often used in combination with SPAREs
to work around the limitations for (indirect) children of a
SPARE, cf. Sect. III. To simplify the depicted DFTs, we use
a double dotted arrow to denote FDEPs. The origin of the
arrow corresponds to the trigger, while the target corresponds
to the dependent event. We depict the identical DFT with the
alternative notation in Fig. 6b.
f) The probabilistic dependency (PDEP) of Montani et
al. [6], [7], [23] extends an FDEP with a probability p. When
the trigger of the PDEP fails, the dependent events fail with
probability p. Thus, a PDEP with p=1 is equivalent to an
FDEP. If p=0, the dependent events are almost surely not
triggered and the PDEP is superﬂuous.
Example 5: Consider the pumps from Ex. 1. Besides the
failure rate, we assume that as soon as the valve is actually
opened, it fails with a given (discrete) probability. We have
modelled this by the DFT in Fig. 6c.
C. Mechanisms in DFTs
Before describing potential pitfalls in the usage and inter-
pretations of DFTs, we review the different mechanisms which
are exhibited by DFT elements.
Failure propagation. Failure propagation in DFTs is similar
as in SFTs. However, DFTs exhibit two types of failure propa-
gation: the usual upwards propagation (hereafter: failure com-
bination), and the propagation via FDEPs (hereafter: failure
forwarding). While failure combination is never cyclic, failure
forwarding may (indirectly) cause the failure to propagate to
the original element. These two mechanisms result in two
different reasons why an element can fail.
Claiming. SPAREs require exclusive use of spare modules.
Recall the car with the spare wheel from Ex. 3, where the
spare wheel can only be used once. This requires a mechanism
to ensure that a spare module is not replacing any other failed
modules. We call this mechanism claiming. As soon as a spare
module fails, the SPARE which claimed the module claims
another module (represented by the child of the SPARE) which
is not yet claimed. This newly claimed module communicates
to its parents that it is no longer available to other SPAREs.
Activation propagation. To realise the support of reduced
failure rates in case a component is in standby, DFTs introduce
an activation mechanism. Spare modules are initially consid-
ered inactive, and thus all their elements are called inactive.
The other elements are active. Active SPAREs propagate the
activation signal to their used spare module. Inactive SPAREs
do not emit any activation signal to any of the spare modules.
Thus, as soon as an already active SPARE starts a child, all
BEs in the spare module are activated. Active BEs fail with
failure It is important to notice that FDEPs do not propagate
the activation signal.
Event prevention. With SEQs, certain failure combinations
can be explicitly excluded from the analysis. This is not limited
to ruling out speciﬁc orders of BEs, but can be generalised to
restrict certain claiming resolutions, although, in many cases,
it requires ingenious fault trees.
III. DFTS: THE FLAVOURS
After having discussed the basic ingredients of DFTs, we
are now in a position to discuss the various semantic issues
raised in the introduction: lifting of cut sets to DFTs, the
expressive power of including several fates, ordering in failure
propagation, spare races, and activation versus claiming. This
section will treat each of these matters in more detail.
A. Lifting minimal cut sets
Many analysis techniques for SFTs are based on minimal
cut sets (MCSs) [3]. A cut set is a set of BEs causing the TLE
to fail. A cut set is minimal if no true subset is a cut set. An
SFT fails if one of its MCSs does so. This is rooted in AND
gates to distribute over ORs. Since the order of failures matter
in DFTs, (minimal) cut sets are extended to ordered tuples
of BEs, called (minimal) cut sequences [24], [25]. There are
however several caveats.
Minimality. First, one may think that a DFT fails whenever
one of its MCSs does so. This is not true, because failure of
the TLE may require BEs outside the cut sequence not to fail.
Indeed, inserting extra failing BEs in a cut sequence may not
yield a cut sequence. This is shown in Fig. 7(a), where AB
and AC are MCSs, but BAC is not a cut sequence.
Cut sequences require the non-failure
of BEs outside the cut sequence.
Characterisation. Whereas MCSs completely characterise the
failure behaviour of the SFT, they do not do so for DFTs. We
illustrate the issue in Fig. 7. Note that the right DFT is obtained
from the left one by distributing the PAND over the OR. The
MCSs for both DFTs in Fig. 7 are AB and AC. However,
BAC is a cut sequence of 7(b) but not of 7(a).
Minimal cut sequences are insufﬁcient to
characterise the failure behaviour of a DFT.
302
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:41:23 UTC from IEEE Xplore.  Restrictions apply. 
SF
SF
T
T
A
B
C
A
B
C
(a)
(b)
Fig. 7.
Invalid distribution of ORs over PANDs.
D
B
C
A
P
X
Y
Z
S
Fig. 8. Part of a DFT to justify the need for causality.
B. Temporal and causal order
A temporal order indicates which events happen before,
after, or at the same time as another event. A causal order
indicates for simultaneous events which events caused the
failure of an event.
The need for simultaneity. The most common interpretation
of DTFs assumes that both failure combination and forwarding
is instantaneous. That is, as soon as a BE fails, all ancestors
whose fail condition is fulﬁlled fail simultaneously. In particu-
lar, all dependent events that are triggered fail simultaneously,
possibly giving rise to further simultaneous failures. Since the
behaviour of the priority gates crucially depends on the fact
whether or not their inputs fail simultaneously, it is important
to cover this semantically. In particular, simultaneity should be
included in cut sequences.
Simultaneity is needed to understand
the behaviour of a DFT.
The need for a causal order. Multiple SPAREs can fail at
once due to instantaneous failure propagation (cf. Fig. 14a).
The claiming of spare modules is then ill-deﬁned, as an
ordering is required for claiming. This situation is called a
spare race. Spare races can be resolved in numerous ways (as
discussed later), however, it is important to respect causality.
Example 6: Consider the DFT in Fig. 8 containing three
SPAREs (A, B, C) sharing a spare module S. The failure of
P causes a spare race between A and B as they both want to
claim S. Assume that A wins the race and claims S. SPARE B
fails as it has no available children left. By failure combination,
D fails too. The failure of D triggers the failure of Z, yielding
C joining the spare race. Assuming that claiming and failure
propagation are instantaneous, this means that C is racing with
A and B so as to claim S. C however cannot win the race, as
A claimed S in the argument before. C can thus not claim S
once P fails.
In addition to temporality, causality is needed
to understand DFT behaviour.
A
B
A
B
C
(a)
(b)
Fig. 9. Causal order and temporal ordering combined.
Embedding causal order in a temporal order. DFTs exhibit
a notion of ordering as priority gates fail depending on the
ordering of their children’ failures. Usually, this is interpreted
as a temporal order, which leads to two different notions of
ordering in DFTs. To circumvent this, a possible realisation
of causal order is by assuming (inﬁnitesimal) time steps
for applying cause-effect relations. Thereby, only one order
relation (temporal) is present in the DFT. In many situations,
assuming inﬁnitesimal time steps in failure forwarding seems
adequate, while for failure combination it often is not:
• In Fig. 6a+b, the failure PSU triggers TU to fail. One can
interpret this as PSU causing the failure of TU. This is
failure forwarding.
• In Ex. 3, the replacement of the spare wheel can be