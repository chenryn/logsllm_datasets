命令行参数
向shell脚本传递数据的最基本方法是使用命令行参数。命令行参数允许在运行脚本时向命令
行添加数据。
S . /addem 10 30
本例向脚本addem传递了两个命令行参数（10和30）。脚本会通过特殊的变量来处理命令行
参数。后面几节将会介绍如何在bash shell脚本中使用命令行参数。
14.1.1读取参数
bash shell会将一些称为位置参数（positional parameter）的特殊变量分配给输人到命令行中的
所有参数。这也包括shell所执行的脚本名称。位置参数变量是标准的数字：$0是程序名，S1是第
一个参数，$2是第二个参数，依次类推，直到第九个参数$9。
---
## Page 303
288
第14章处理用户输入
下面是在shell脚本中使用单个命令行参数的简单例子。
1/bin/bssh
 using one command line parameter
factorial=1
for I( nunber = 1I munber  teat6.gh
S./addem 2 5
The calculated value 1α 7
S./multem 2 5
The calculated value is 10
个通过链接（参见第3章）创建（multem）。在两种情况下都会先获得脚本的基本名称，然后根
据该值执行相应的功能。
14.1.3测试参数
在shell胸本中使用命令行参数时要小心些。如果胸本不加参数运行，可能会出问题。
S./addem 2
/aSden: 1ine 8: 2 + : ayntax error: operand expected (error
The calculated value ig
token la * *)
当脚本认为参数变量中会有数据而实际上并没有时，脚本很有可能会产生错误消息。这种写
脚本的方法并不可取。在使用参数前一定要检查其中是否存在数据。
S cat test7.sh
#testing parameters before use
#1/bin/ba.sh
if [ -n *si* ]
then
echo Hello $1, glad to neet you.
else
echo *Sorry。 you did not ldentify yourself.*
fL
S ./test7,sh Rich
S
Hello Rich, glad to meet you.
S./test7.sh
Sorzy,。you áld not identify yourself.
a
---
## Page 307
292
第14章处理用户输入
在本例中，使用了-n测试来检查命令行参数s1中是否有数据。在下一节中，你会看到还有
另一种检查命令行参数的方法。
14.2特殊参数变量
在bashshel中有些特殊变量，它们会记录命令行参数。本节将会介绍这些变量及其用法。
14.2.1参数统计
如在上一节中看到的，在脚本中使用命令行参数之前应该检查一下命令行参数。对于使用多
个命令行参数的脚本来说，这有点麻烦。
你可以统计一下命令行中输人了多少个参数，无需测试每个参数。bash shell为此提供了一个
特殊变量。
特殊变量$+含有脚本运行时携带的命令行参数的个数。可以在脚本中任何地方使用这个特殊
变量，就跟普通变量一样。
 getting the number of parameters
1/bin/bash
echo There vere $f parameters supplied.
./teste.sh
There vere 0 parameters supplied.
$./test8.sh 1 2 3 4 5
There vere 5 parameters supplied.
There vere 10 parameters suppliedl
§./test8.sh 1 2 3 4 5 6 7 8 9 10
$./test8.sh "Rich Blum"
There vere 1 parameters supplied.
现在你就能在使用参数前测试参数的总数了。
1/bin/bash
 Testing paraneters
if [ $-ne 2 ]
then
echo
echo Usage1 test9.sh a b
echo
else
total=$[ $1 + $2 ]
echo
---
## Page 308
14.2特殊参数变量
293
echo The total ia Stotal
echo
fL
S bash test9.sh
Usage: teat9.ah a b
S bash test9.sh 10
Usage: test9.ah a b
S bash test9.ah 10 15
The total is 25
if-then语句用-ne测试命令行参数数量。如果参数数量不对，会显示一条错误消息告知脚
本的正确用法。
这个变量还提供了一个简便方法来获取命令行中最后一个参数，完全不需要知道实际上到底
用了多少个参数。不过要实现这一点，得稍微多花点工夫。
如果你仔细考虑过，可能会觉得既然S+变量含有参数的总数，那么变量${$+}就代表了最后
一个命令行参数变量。试试看会发生什么。
S cat badtestl.sh
#teating grabbing last paraneter
#1/bin/bash
echo The last parameter was $($#)
S ./badtest1.sh 10
The last paraneter was 15354
怎么了？显然，出了点问题。它表明你不能在花括号内使用美元符。必须将美元符换成感叹
号。很奇怪，但的确管用。
S cat test10.sh
 Grabbing the last parameter
#1/bin/ba.sh
params=$ #
echo
echo The last parameter ia $[!#)
echo
The last parameter ia Sparans
echo
S bash test10.sh 1 2 3 4 5
4
---
## Page 309
第14章处理用户输入
The last parameter iα 5
The last parameter iα 5
$ bash test10,ab
The last parametex iα test10,ah
The last parameter is 0
$
太好了。这个测试将s#变量的值赋给了变量params，然后也按特殊命令行参数变量的格式
使用了该变量。两种方法都没问题。重要的是要注意，当命令行上没有任何参数时，S#的值为0，
params变量的值也一样，但s{!#)变量会返回命令行用到的脚本名。
14.2.2抓取所有的数据
有时候需要抓取命令行上提供的所有参数。这时候不需要先用s#变量来判断命令行上有多少
参数，然后再进行通历，你可以使用一组其他的特殊变量来解决这个问题。
$*和sa变量可以用来轻松访问所有的参数。这两个变量都能够在单个变量中存储所有的命
令行参数。
$*变量会将命令行上提供的所有参数当作一个单词保存。这个单词包含了命令行中出现的每
一个参数值。基本上$*变量会将这些参数视为一个整体，而不是多个个体。
另一方面，So变量会将命令行上提供的所有参数当作同一字符甲中的多个独立的单词。这样
你就能够遍历所有的参数值，得到每个参数。这通常通过for命令完成。
这两个变量的工作方式不太容易理解。看个例子，你就能理解二者之间的区别了。
Scat test11.sh
 teating S* and $9
ech0
echo
./test11.sh rich barbara katie jessica
Using the $* method: rich barbara katie Jeasica
Using the S8 method: rich barbara katie Jessica
注意，从表面上看，两个变量产生的是同样的输出，都显示出了所有命令行参数。
下面的例子给出了二者的差异。
 cat test12.sh
# 1 /bin/bash
---
## Page 310
14.3移动变量