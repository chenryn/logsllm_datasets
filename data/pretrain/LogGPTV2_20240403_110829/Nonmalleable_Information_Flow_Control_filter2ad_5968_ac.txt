FLAC, a label is protected by a type only if it flows to the outermost
says principal. In FLAC and DCC, the types ℓ′ says ℓ says τ
and ℓ says ℓ′ says τ protect the same set of principals; in other
words, says is commutative. By distinguishing between these types,
NMIFC does not provide the same commutativity.
The commutativity of says is a design decision, offering a more
permissive programming model at the cost of less precise tracking
of dependencies. NMIFC takes advantage of this extra precision
in the UnitM typing rule so the label on every η term protects
the information it contains, even if nested within other η terms.
Γ; pc ⊢ e : τ
[Var]
Γ, x :τ , Γ
′; pc ⊢ x : τ
[Unit]
[Lam]
[UnitM]
Γ, x :τ1; pc′ ⊢ e : τ2
Γ; pc ⊢ λ(x :τ1)[pc′]. e : τ1
pc ⊑ ℓ
Γ; pc ⊢ e : τ
Γ; pc ⊢ (ηℓ e ) : ℓ says τ
pc′−−→ τ2
[App]
[VUnitM]
Γ; pc ⊢ () : unit
Γ; pc ⊢ e1 : τ ′ pc′−−→ τ
Γ; pc ⊢ e2 : τ ′
Γ; pc ⊢ e1 e2 : τ
Γ; pc ⊢ v : τ
pc ⊑ pc′
Γ; pc ⊢ (η ℓ v ) : ℓ says τ
⊢ ℓ ⊑ τ
[BindM]
[Decl]
[Endorse]
Γ; pc ⊢ e : ℓ says τ ′
Γ, x :τ ′; pc ⊔ ℓ ⊢ e′ : τ
Γ; pc ⊢ bind x = e in e′ : τ
′ says τ
′→ ⊑ ℓ
←
′← = ℓ
Γ; pc ⊢ e : ℓ
←
′ ⊔ pc)
)
ℓ
Γ; pc ⊢ decl e to ℓ : ℓ says τ
→
′→ = ℓ
′ ⊔ pc)
→
Γ; pc ⊢ e : ℓ
ℓ
′ says τ
′← ⊑ ℓ
ℓ
← ⊔ ∇((ℓ
ℓ
→ ⊔ ∆((ℓ
)
Γ; pc ⊢ endorse e to ℓ : ℓ says τ
pc ⊑ ℓ
pc ⊑ ℓ
Figure 8: Typing rules for core NMIFC.
Abadi [2] similarly modifies DCC’s protection relation to distin-
guish the protection level of terms with nested says types.
The core type system presented in Figure 8 enforces nonmal-
leable information flow for NMIFC programs. Most of the typing
rules are standard, and differ only superficially from DCC and FLAC.
Like in FLAC, NMIFC typing judgments include a program counter
label, pc, that represents an upper bound on the confidentiality and
integrity of bound information that any computation may depend
upon. For instance, rule BindM requires the type of the body of a
bind term to protect the unlabeled information of type τ ′ with at
least ℓ, and to type-check under a raised program counter label pc⊔ℓ.
Rule Lam ensures that function bodies type-check with respect to
the function’s pc annotation, and rule App ensures functions are
only applied in contexts that flow to these annotations.
The NMIFC rule for UnitM differs from FLAC and DCC in re-
quiring the premise pc ⊑ ℓ for well-typed η terms. This premise
ensures a more precise relationship between the pc and η terms.
Intuitively this restriction makes sense. The pc is a bound on all un-
labeled information in the context. Since an expression e protected
with (ηℓ e) may depend on any of this information, it makes sense
to require that pc flow to ℓ.2
By itself, this restrictive premise would prevent public data from
flowing through secret contexts and trusted data from flowing
through untrusted contexts. To allow such flows, we distinguish
source-level (ηℓ e) terms from run-time values (ηℓ v), which have
been fully evaluated. These terms are only created by the opera-
tional semantics during evaluation and no longer depend on the
context in which they appear; they are closed terms. Thus it is
appropriate to omit the new premise in VUnitM. This approach
allows us to require more precise flow tracking for the explicit
dependencies of protected expressions without restricting where
these values flow once they are fully evaluated.
2The premise is not required in FLAC because protection is commutative. For example,
in a FLAC term such as bind x = v in (ηℓ′ (ηℓ x )), x may be protected by ℓ or ℓ′.
checkpwd = λ(д :U ← says String, p :T says String)[T ←].
bind guess = (endorse д to T ←
decl (bind pwd = p in (ηT pwd == guess)) to T ←
Figure 9: A secure version of a password checker.
) in
Rule Decl ensures a declassification from label ℓ′ to ℓ is robust.
We first require ℓ′← = ℓ← to ensure that this does not perform en-
dorsement. A more permissive premise ℓ′← ⊑ ℓ← is admissible, but
requiring equality simplifies our proofs and does not reduce expres-
siveness since the declassification can be followed by a subsequent
relabeling. The premise pc ⊑ ℓ requires that declassifications occur
in high-integrity contexts, and prevents declassification events from
creating implicit flows. The premise ℓ′→ ⊑ ℓ→ ⊔ ∆((ℓ′ ⊔ pc)←) en-
sures that the confidentiality of the information declassified does
not exceed the view of the integrity of the principals that may
have influenced it. These influences can be either explicit (ℓ′←) or
implicit (pc←), so we compare against the join of the two.3 This
last premise effectively combines the two conditions identified by
Chong and Myers [11] for enforcing robust declassification in an
imperative while-language.
Rule Endorse enforces transparent endorsement. All but the
last premise are straightforward: the expression does not declas-
sify and pc ⊑ ℓ requires a high-integrity context to endorse and
prevents implicit flows. Interestingly, the last premise is dual to
that in Decl. An endorsement cannot raise integrity above the
voice of the confidentiality of the data being endorsed (ℓ′→) or the
context performing the endorsement (pc→). For the same reasons
as in Decl, we compare against their join.
5.3 Examples revisited
We now reexamine the examples presented in Section 2 to see that
the NMIFC type system prevents the vulnerabilities seen above.
5.3.1 Password checker. We saw above that when the pass-
word checker labels guess at T→, well-typed code can improp-
erly set guess to the actual password. We noted that the endorse-
ment enabled an insecure flow of information. Looking at En-
dorse in NMIFC, we can attempt to type the equivalent expression:
endorse guess to T . However, if guess has type T→ says bool, the
endorse does not type-check; it fails to satisfy the final premise of
Endorse:
⊥← = (T
→
← ̸⊑ T
← ⊔ ∇(T
)
→
←
.
) = T
If we instead give guess the label U ←, the endorsement type-
checks, assuming a sufficiently trusted pc.
This is as it should be. With the label U ←, the guesser must be
able to read their own guess, guaranteeing that they cannot guess
the correct password unless they in fact know the correct password.
Figure 9 shows this secure version of the password checker.
5.3.2
Sealed-bid auction. In the insecure auction described in
Section 2.2, we argued that an insecure flow was created when T
endorsed b_bid from B← ∧ (A ∧ B)→ to A ∧ B. This endorsement
3 The first two premises—ℓ′← = ℓ← and pc ⊑ ℓ—make this join redundant. It would,
however, be necessary if we replaced the equality premise with the more permissive
ℓ′← ⊑ ℓ← version, so we include it for clarity.
requires a term of the form endorse v to A ∧ B where v types
to B← ∧ (A ∧ B)→ says int. Despite the trusted context, the last
premise of Endorse again fails:
← ̸⊑ (A ∧ B)
← ⊔ ∇((A ∧ B)
→
) = (A ∧ B)
←
.
B
If we instead label a_bid : A says int and b_bid : B says int,
then the corresponding endorse statements type-check, assuming
that T is trusted: T ⊑ (A ∧ B)←.
5.3.3 Laundering secrets. For the secret-laundering example in
Section 2.3, we assume that neither H nor L is trusted, but the
output from the program is. This forces an implicit endorsement of
y, the input received from H. But the condition needed to endorse
from H→ ∧ ⊥← to H→ ∧ ⊤← is false:
→
→
⊥← ⊑ ⊤← ⊔ ∇(H
) = ∇(H
)
We have ∇(L→) ̸⊑ ∇(H→) and all integrity flows to ⊥←, so by
transitivity the above condition cannot hold.
6 SECURITY CONDITIONS
The NMIFC typing rules enforce several strong security conditions:
multiple forms of conditional noninterference, robust declassifi-
cation, and our new transparent endorsement and nonmalleable
information flow conditions. We define these conditions formally
but relegate proof details to the technical report [10].
6.1 Attackers
Noninterference is frequently stated with respect to a specific but
arbitrary label. Anything below that label in the lattice is “low”
(public or trusted) and everything else is “high”. We broaden this
definition slightly and designate high information using a set of
labels H that is upward closed. That is, if ℓ ∈ H and ℓ ⊑ ℓ′, then
ℓ′ ∈ H . We refer to such upward closed sets as high sets.
We say that a type τ is a high type, written “⊢ τ prot H ”, if all
of the information in a value of type τ is above some label in the
high set H . The following rule defines high types:
[P-Set]
H ∈ H
⊢ H ⊑ τ
⊢ τ prot H
H is upward closed
This formulation of adversarial power is adequate to express
noninterference, in which confidentiality and integrity do not inter-
act. However, our more complex conditions relate confidentiality to
integrity and therefore require a way to relate the attacker’s power
in the two domains.
Intuitively, an attacker is an arbitrary set of colluding atomic prin-
cipals. Specifically, if n1, . . . , nk ∈ N are those atomic principals,
then the set A = {ℓ ∈ L | n1 ∧ · · · ∧ nk ≽ ℓ} represents this at-
tacker’s power. These principals may include principals mentioned
in the program, and there may be delegations between attacker
principals and program principals. While this definition of an at-
tacker is intuitive, the results in this paper actually hold for a more
general notion of attacker defined in Appendix B.
Attackers correspond to two high sets: an untrusted high set
U = {ℓ ∈ L | ℓ← ∈ A} and a secret high set S = {ℓ ∈ L | ℓ→ (cid:60)
A}. We say that A induces U and S.
c ≈W c′ v ≈W v′
These equivalence relations are the smallest congruences over c and over v
extended with •, containing the equivalences defined by these rules:
[Eq-UnitM]
t ≈⋆W t′
The equivalence relation t ≈⋆W t′ is the smallest congruence over t
containing the equivalences defined by these rules:
(↓π
ℓ′, η ℓ v ) ≈W •
(η ℓ v ) ≈W •
[Eq-Down]
ℓ (cid:60) W
ℓ (cid:60) W
c ≈W c′
c ≈⋆W c′
Figure 10: Low equivalence and low trace equivalence.
[T-BulletR] t;• ≈⋆W t
[T-BulletL] •; t ≈⋆W t
[T-Lift]
6.2 Equivalences
All of our security conditions involve relations on traces. As is typ-
ically the case for information-flow security conditions, we define
a notion of “low equivalence” on traces, which ignores effects with
high labels. We proceed by defining low-equivalent expressions
and then extending low-equivalence to traces.
For expression equivalence, we examine precisely the values
which are visible to a low observer defined by a set of labels W:
ℓ′, ηℓ v) where ℓ ∈ W. We formalize this idea in
(ηℓ v) and (↓π
Figure 10, using • to represent values that are not visible. Beyond
ignoring values unable to affect the output, we use a standard
structural congruence (i.e., syntactic equivalence). This strict notion
of equivalence is not entirely necessary; observational equivalence
or any refinement thereof would be sufficient if augmented with
the •-equivalences in Figure 10.
Figure 10 also extends the equivalence on emitted values to
equivalence on entire traces of emitted values. Essentially, two
traces are equivalent if there is a way to match up equivalent events
in each trace, while ignoring high events equivalent to •.
6.3 Noninterference and downgrading
An immediate consideration when formalizing information flow is
how to express interactions between an adversary and the system.
One possibility is to limit interaction to inputs and outputs of the
program. This is a common approach for functional languages. We
take a stronger approach in which security is expressed in terms of
execution traces. Note that traces contain all information necessary
to ensure the security of input and output values.
We begin with a statement of noninterference in the presence of
downgrading. Theorem 6.1 states that, given two high inputs, a well-
typed program produces two traces that are either low-equivalent
or contain a downgrade event that distinguishes them. This implies
that differences in traces distinguishable by an attacker are all
attributable to downgrades of information derived from the high
inputs. Furthermore, any program that performs no downgrades on
secret or untrusted values (i.e., contain no decl or endorse terms
on H data) must be noninterfering.
Theorem 6.1 (Noninterference modulo downgrading). Let
H be a high set and let W = L \ H . Given an expression e such
that Γ, x :τ1; pc ⊢ e : τ2 where ⊢ τ1 prot H , for all v1, v2 with Γ; pc ⊢
vi : τ1, if
⟨e[x (cid:55)→ vi], vi⟩ −→→ ∗(cid:68)
i , ti(cid:69)
v
′
then either there is some event (↓π
ℓ (cid:60) H , or t1 ≈⋆W t2.
ℓ′, ηℓ w ) ∈ ti where ℓ′ ∈ H and
The restrictions placed on downgrading operations mean that we
can characterize the conditions under which no downgrading can
occur. We add two further noninterference theorems that restrict
downgrading in different ways. Theorem 6.2 states that if a program
types without a public–trusted pc it must be noninterfering (with
respect to that definition of “public–trusted”).
Theorem 6.2 (Noninterference of high-pc programs). Let
A be an attacker inducing high sets U and S. Let H be one of those
high sets and W = L \ H . Given some e such that Γ, x :τ1; pc ⊢
e : τ2 where ⊢ τ1 prot H , for all v1, v2 with Γ; pc ⊢ vi
: τ1, if
⟨e[x (cid:55)→ vi], vi⟩ −→→ ∗ ⟨v′
i , ti⟩ and pc ∈ U ∪ S, then t1 ≈⋆W t2.
Rather than restrict the pc, Theorem 6.3 states that secret–untrusted
information is always noninterfering. Previous work (e.g., [6, 27])
does not restrict endorsement of confidential information, allow-
ing any label to be downgraded to public–trusted (given a public–
trusted pc). In NMIFC, however, secret–untrusted data must remain
secret and untrusted.
Theorem 6.3 (Noninterference of secret–untrusted data).
Let A be an attacker inducing high sets U and S. Let H = U ∩ S
and W = L \H . Given some e such that Γ, x :τ1; pc ⊢ e : τ2 where ⊢
τ1 prot H , for all v1, v2 with Γ; pc ⊢ vi : τ1, if ⟨e[x (cid:55)→ vi], vi⟩ −→→ ∗
⟨v′