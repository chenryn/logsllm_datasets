Selecting 1f3213a063299199 (unknown sdk 4.4.2)
.. ..:.
..o.. .r..
..a.. . ....... . ..nd
ro..idsnemesisand..pr
.otectorandroidsneme.
.,sisandprotectorandroids+.
..nemesisandprotectorandroidsn:.
.emesisandprotectorandroidsnemes..
..isandp,..,rotectorandro,..,idsnem.
.isisandp..rotectorandroid..snemisis.
,andprotectorandroidsnemisisandprotec.
.torandroidsnemesisandprotectorandroid.
.snemisisandprotectorandroidsnemesisan:
.dprotectorandroidsnemesisandprotector.
drozer Console (v2.3.4)
dz>
Using the drozer Console
The drozer console is essentially a command-line interface that allows you to run modules currently installed in
the framework. To find the available modules, use the list command. Running this command without any
arguments will give a list of all available modules, and providing it with an argument filters the module list by
that keyword. The following shows an example:
dz> list package
app.package.attacksurface Get attack surface of package
app.package.backup Lists packages that use backup API (returns
true on FLAG_ALLOW_BACKUP)
app.package.debuggable Find debuggable packages
app.package.info Get information about installed packages
app.package.launchintent Get launch intent of package
app.package.list List Packages
app.package.manifest Get AndroidManifest.xml of package
...
TIP
The list command inside drozer can be shortened to ls. This can save you time if you are using drozer
often.
Some modules do not come as part of the standard drozer installation. This is because they are seen as
additional modules that may not be used regularly or are specialized for a certain task such as installing an
additional tool or a root exploit for a certain device. You search for modules from the online central module
repository using the module search command. Here -d is used to show module descriptions:
dz> module search -d
...
metall0id.root.cmdclient
Exploit the setuid-root binary at /system/bin/cmdclient on certain
devices to gain a root shell. Command injection vulnerabilities exist
in the parsing mechanisms of the various input arguments.
This exploit has been reported to work on the Acer Iconia, Motorola
XYBoard and Motorola Xoom FE.
...
metall0id.tools.setup.nmap
Installs Nmap on the Agent.
Nmap ("Network Mapper") is a free and open source (license) utility
for network discovery and security auditing.
mwrlabs.develop
Start a Python shell, in the context of a drozer module.
You can also search available modules for specific keywords contained within their descriptions or names by
providing a keyword to module search. This functionality can also be invoked from outside of a drozer console
by using the drozer module command from your terminal. The searched module repository is at
https://github.com/mwrlabs/drozer-modules/.
Modules are organized into namespaces that group specific functions. Table 6.1 details the default namespaces;
however, drozer module developers may choose to create additional namespaces.
Table 6.1 A List of drozer Namespaces and the Purpose of the Modules in Each
NAMESPACE DESCRIPTION
app.activity Find and interact with activities exported by applications.
app.broadcast Find and interact with broadcast receivers exported by applications.
app.package Find packages installed on a device, and display information about them.
app.provider Find and interact with content providers exported by applications.
app.service Find and interact with services exported by applications.
auxiliary Useful tools that have been ported to drozer.
exploit.pilfer Public exploits that extract sensitive information from vulnerable applications through various
means.
exploit.root Publicly available root exploits for Android devices.
information Extract additional information about a device and its configuration.
scanner Find common vulnerabilities in applications or devices with automatic scanners.
shell Interact with the underlying Linux OS through a shell.
tools.file Perform operations on files; e.g., copy files to and from the device.
tools.setup Upload additional utilities on the device for use inside drozer; e.g., busybox.
A good way to understand what an unprivileged application has access to on a device is by using the drozer shell.
Launch it and issue an id command as shown here:
dz> shell
u0_a59@android:/data/data/com.mwr.dz $ id
uid=10059(u0_a59) gid=10059(u0_a59) groups=3003(inet),50059(all_a59)
context=u:r:untrusted_app:s0
u0_a59@android:/data/data/com.mwr.dz $
Remember that UIDs are assigned sequentially from 10000 upwards, and more about how the groups are
assigned to an application is explained later in this section in “Inspecting the Android Permission Model”.
You can find more information about what a module does and its command-line parameters by using the help
command within the console. Alternatively, use -h inline when executing a command as shown here:
dz> run app.package.info -a com.mwr.dz -h
Another useful feature of the console is the ability to redirect any output from a module to a file. You can do this
in the same manner as you do it on the terminal using the > character like so:
dz> run app.package.info -a com.mwr.dz > /path/to/output.txt
For other useful semantics and shortcuts, refer to the drozer user guide on the project’s download page.
Writing Your Own Basic Modules
For you to get used to drozer’s complex way of executing Java from Python and help with module development
in general, installing the following module is crucial:
dz> module install mwrlabs.develop
Processing mwrlabs.develop... Done.
Successfully installed 1 modules, 0 already installed.
This module provides an interactive shell to test the instantiation of objects, retrieval of constant values, and
execution of methods. For example, suppose you want to create a module that returns the package’s name when
provided with an application’s UID. You could test it first using the auxiliary.develop .interactive module
that was installed previously.
dz> run auxiliary.develop.interactive
Entering an interactive Python shell. Type 'c' to end.
> /home/tyrone/dz-repo/mwrlabs/develop.py(24)execute()
-> self.pop_completer()
(Pdb) context = self.getContext()
(Pdb) pm = context.getPackageManager()
(Pdb) name = pm.getNameForUid(10059)
(Pdb) print name
com.mwr.dz
drozer provides some “common library” commands to help alleviate reimplementation of common tasks. You
can find them defined in the /src/drozer/modules/common/ folder of the drozer console source code. The
self.getContext() function used previously is a helper function that provides a handle on Android Context,
which can be elusive at times. An equivalent Java implementation of the preceding code could be the following:
Context context = getApplicationContext();
PackageManager pm = context.getPackageManager();
String name = pm.getNameForUid(10059);
Turning this simple concept into a fully functioning drozer module may look as follows:
from drozer.modules import Module
class GetPackageFromUID(Module):
name = "Get a package's name from the given UID"
description = "Get a package's name from the given UID"
examples = """
dz> run app.package.getpackagefromuid 10059
UID 10059 is com.mwr.dz
"""
author = "Tyrone"
date = "2014-05-30"
license = "BSD (3 clause)"
path = ["app", "package"]
permissions = ["com.mwr.dz.permissions.GET_CONTEXT"]
def add_arguments(self, parser):
parser.add_argument("uid", help="uid of package")
def execute(self, arguments):
context = self.getContext()
pm = context.getPackageManager()
name = pm.getNameForUid(int(arguments.uid))
self.stdout.write("UID %s is %s\n\n" % (arguments.uid, name))
Saving the newly created module in a file with extension .py in a local repository allows access to it from drozer.
Creating a local repository can be done using the following command from the console (or similarly using the
drozer command from the terminal).
dz> module repository create /path/to/repository
Running your newly created module produces the following output:
dz> run app.package.getpackagefromuid 10059
UID 10059 is com.mwr.dz
During development of a module, turning on debugging mode on the console by invoking it with --debug may be
useful. This command prints any errors produced by the loading or running of the module to the screen. For
more advanced examples of developing modules, refer to the drozer documentation or read the source code of
other similar modules for a deeper insight.
Introduction to Application Components
Android applications and their underlying frameworks were designed in a way that keeps them modular and
able to communicate with each other. The communication between applications is performed in a well-defined
manner that is strictly facilitated by a kernel module named binder, which is an Inter-Process Communication
(IPC) system that started as the OpenBinder project and was completely rewritten in 2008 for use on Android. It
is implemented as a character device located at /dev/binder, which applications interact with through multiple
layers of abstraction.
Android applications can make use of four standard components that can be invoked via calls to binder.
Activities—Activities represent visual screens of an application with which users interact. For example,
when you launch an application, you see its main activity. Figure 6.4 shows the main activity of the clock
application.
Services—Services are components that do not provide a graphical interface. They provide the facility to
perform tasks that are long running in the background and continue to work even when the user has opened
another application or has closed all activities of the application that contains the service. To view running
services on your device go to the Running tab in the Application Manager, as shown in Figure 6.5.
Two different modes of operation exist for services. They can be started or bound to. A service that is started
is typically one that does not require the ability to communicate back to the application that started it. A
bound service provides an interface to communicate back results to the calling application. A started service
continues to function even if the calling application has been terminated. A bound service only stays alive for
the time that an application is bound to it.
Broadcast receivers—Broadcast receivers are non-graphical components that allow an application to
register for certain system or application events. For instance, an application that requires a notification
when receiving an SMS would register for this event using a broadcast receiver. This allows a piece of code
from an application to be executed only when a certain event takes place. This avoids a situation where any
polling needs to take place and provides a powerful event-driven model for applications. In contrast to other
application components, a broadcast receiver can be created at runtime.
Content providers—These are the data storehouses of an application that provide a standard way to
retrieve, modify, and delete data. The terminology used to define and interact with a content provider is
similar to SQL: query, insert, update, and delete. This component is responsible for delivering an
application’s data to another in a structured and secure manner. The developer defines the back-end
database that supports a content provider, but a common choice is SQLite (see http://www.sqlite.org/),
because Android makes the implementation of SQLite so easy due to their similar structures. Defining a
content provider that can retrieve files and serve them is also possible. This may provide a preferable
approach for applications that implement access control on the retrieval of their files from other
applications.
Figure 6.4 The main activity of the clock application
Figure 6.5 A list of running services on a device and the applications they belong to
Defining Components
Each Android package contains a file named AndroidManifest.xml in the root of the archive. This file defines the
package configuration, application components, and security attributes. Figure 6.6 shows an example manifest.
Figure 6.6 A simple manifest file showing the general structure
Only components that are defined in the manifest file are usable inside the application, with the exception of
broadcast receivers. One of the most important aspects of securing defined components in the manifest is using
strongly configured permissions, which is explored in detail later in this chapter in “Understanding
Permissions”.
Interacting with Components
An intent is a defined object used for messaging that is created and communicated to an intended application
component. This communication is done through calls to binder. It includes all relevant information passed
from the calling application to the desired application component and contains an action and data that is
relevant to the request being made. A simple example of an application sending a request to open a particular
URL in a browser would look as follows in code:
Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setData(Uri.parse("http://www.google.com"));
startActivity(intent);
The preceding code creates a simple implicit intent to view a URL, and the startActivity() function is called
with the intent as a parameter. Any application’s activity that is able to respond to a VIEW action on data that is
formatted like a URL will be eligible to receive this intent. If only a single application can handle this intent, the
intent is routed to that application by default. Otherwise, an application picker is shown. An application defines
“intent filters” in its manifest, which catches the intents that are appropriate for its components. For example, if
an activity in your application can handle HTTP links to websites, then an appropriate intent filter looks as
follows:
This snippet states that the activity named MyBrowserActivity in this application can handle any intent with an
action of android.intent.action.VIEW and has the data scheme of http://.
If you want to make sure that an intent that you send always reaches an application you intend and would not
like the system to decide, then you can make use of explicit intents. Explicit intents specify the application and
component that the intent should be delivered to. For example, if an application you created needs to explicitly
open a URL in the Android browser application, you use the following code:
Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setData(Uri.parse("http://www.google.com"));
String pack = "com.android.browser";
ComponentName comp = new ComponentName(pack, pack + ".BrowserActivity");
intent.setComponent(comp);
startActivity(intent);
You can try this from drozer without having to create a test application as follows:
dz> run app.activity.start --action android.intent.action.VIEW --data-uri
http://www.google.com --component com.android.browser
com.android.browser.BrowserActivity
drozer can be used to interact with all application components in the same easy manner. The following is an
example of querying the system settings content provider from drozer that can be queried from any application:
dz> run app.provider.query content://settings/system
| _id | name | value |
| 1 | volume_music | 11 |
| 2 | volume_ring | 5 |
| 3 | volume_system | 7 |
| 4 | volume_voice | 4 |
| 5 | volume_alarm | 6 |
| 6 | volume_notification | 5 |
| 7 | volume_bluetooth_sco | 7 |
| 9 | mute_streams_affected | 46 |
| 10 | vibrate_when_ringing | 0 |
| 11 | dim_screen | 1 |
| 12 | screen_off_timeout | 60000 |
| 13 | dtmf_tone_type | 0 |
| 14 | hearing_aid | 0 |
| 15 | tty_mode | 0 |
| 16 | screen_brightness | 102 |
| 17 | screen_brightness_mode | 0 |
| 18 | window_animation_scale | 1.0 |
| 19 | transition_animation_scale | 1.0 |
| 20 | accelerometer_rotation | 1 |
| 21 | haptic_feedback_enabled | 1 |
| 22 | notification_light_pulse | 1 |
| 23 | dtmf_tone | 1 |
| 24 | sound_effects_enabled | 1 |
| 26 | lockscreen_sounds_enabled | 1 |
| 27 | pointer_speed | 0 |
| 28 | mode_ringer_streams_affected | 422 |
| 29 | media_button_receiver |
com.android.music/com.android.music.MediaButtonIntentReceiver |
| 30 | next_alarm_formatted | |
Chapter 7 shows many more examples of interacting with components using drozer. The ability to find
vulnerabilities in application components requires a thorough understanding of their features and how they can
be invoked.