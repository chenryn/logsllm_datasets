non-zero, and not subnormal), or 0 otherwise.
decDoubleIsPositive(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is greater than zero and not a NaN, or 0
otherwise.
decDoubleIsSignaling(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is a signaling NaN, or 0 otherwise.
decDoubleIsSignalling(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is a signaling NaN, or 0 otherwise. (This
is an alternative spelling of decDoubleIsSignaling.)
decDoubleIsSigned(x)
Returns an unsigned integer (uint32_t) which will be 1 if x has sign=1, or 0 otherwise. Note that
zeros and NaNs may have sign=1.
decDoubleIsSubnormal(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is subnormal (that is, finite, non-zero,
and with magnitude less than 10emin), or 0 otherwise.
decDoubleIsZero(x)
Returns an unsigned integer (uint32_t) which will be 1 if x is a zero, or 0 otherwise.
Version 3.68 Module descriptions 59
decDoubleLogB(r, x, set)
Returns the adjusted exponent of x, according to IEEE 754 rules. That is, the exponent returned is
calculated as if the decimal point followed the first significant digit (so, for example, if x were 123
then the result would be 2).
If x is infinite, the result is +Infinity. If x is a zero, the result is -Infinity, and the
DEC_Division_by_zero flag is set. If x is less than zero, the absolute value of x is used. If x=1, the
result is 0. NaNs are handled (propagated) as for arithmetic operations.
decDoubleMax(r, x, y, set)
If both arguments are numeric (not NaNs) this returns the larger of x and y (compared using
decDoubleCompareTotal, to give a well-defined result).
If either (but not both of) x or y is a quiet NaN then the other argument is the result; otherwise NaNs
are handled as for arithmetic operations.
decDoubleMaxMag(r, x, y, set)
The same as decDoubleMax except that the absolute values of the two arguments are used (as though
modified by decDoubleCopyAbs).
decDoubleMin(r, x, y, set)
If both arguments are numeric (not NaNs) this returns the smaller of x and y (compared using
decDoubleCompareTotal, to give a well-defined result).
If either (but not both of) x or y is a quiet NaN then the other argument is the result; otherwise NaNs
are handled as for arithmetic operations.
decDoubleMinMag(r, x, y, set)
The same as decDoubleMin except that the absolute values of the two arguments are used (as though
modified by decDoubleCopyAbs).
decDoubleMinus(r, x, set)
This has the same effect as 0-x where the exponent of the zero is the same as that of x (if x is finite).
The effect is also the same as decFloatCopyNegate except that NaNs are handled as for arithmetic
operations (the sign of a NaN is not affected, and an sNaN will signal), the result is canonical, and a
zero result has sign=0.
decDoubleMultiply(r, x, y, set)
Multiplies x by y and places the result in r.
decDoubleNextMinus(r, x, set)
Returns the “next” decDouble to x in the direction of -Infinity according to IEEE 754 rules for
nextDown. The only status possible is DEC_Invalid_operation (from an sNaN).
60 Module descriptions Version 3.68
decDoubleNextPlus(r, x, set)
Returns the “next” decDouble to x in the direction of +Infinity according to IEEE 754 rules for nextUp.
The only status possible is DEC_Invalid_operation (from an sNaN).
decDoubleNextToward(r, x, y, set)
Returns the “next” decDouble to x in the direction of y according to proposed IEEE 754 rules for
nextAfter.21
If x=y the result is decDoubleCopySign(r, x, y). If either operand is a NaN the result is as for
arithmetic operations. Otherwise (the operands are numeric and different) the result of adding (or
subtracting) an infinitesimal positive amount to x and rounding towards +Infinity (or -Infinity) is
returned, depending on whether y is larger (or smaller) than x. The addition will set flags, except that if
the result is normal (finite, non-zero, and not subnormal) no flags are set.
decDoubleOr(r, x, y, set)
Carries out the digit-wise logical inclusive Or of x and y and places the result in r.
The operands must be zero or positive (sign=0), an integer (finite with exponent=0) and comprise only
zeros and/or ones; if not, DEC_Invalid_operation is set.
decDoublePlus(r, x, set)
This has the same effect as 0+x where the exponent of the zero is the same as that of x (if x is finite).
The effect is also the same as decFloatCopy except that NaNs are handled as for arithmetic operations
(the sign of a NaN is not affected, and an sNaN will signal), the result is canonical, and a zero result
has sign=0.
decDoubleQuantize(r, x, y, set)
Returns x set to have the same quantum as y, if possible (that is, numerically the same value but
rounded or padded if necessary to have the same exponent as y, for example to round a monetary
quantity to cents). More details and an example are given with the decNumberQuantize function (see
page 38).
decDoubleRadix(x)
Returns an unsigned integer (uint32_t) set to the base used for arithmetic in this module (always
ten).
(This function is also available in the decSingle module.)
decDoubleReduce(r, x, set)
Returns a copy of x with its coefficient reduced to its shortest possible form without changing the
value of the result. This removes all possible trailing zeros from the coefficient (some may remain
when the number is very close to the most positive or most negative number). Infinities and NaNs are
unchanged and no status is set unless x is an sNaN. If x is a zero the result exponent is 0.
21 The nextAfter operation was dropped from the proposed standard during the ballot process.
Version 3.68 Module descriptions 61
decDoubleRemainder(r, x, y, set)
Integer-divides x by y and places the remainder from the division in r. That is, if the same x and y were
given to the decDoubleDivideInteger and decDoubleRemainder functions, resulting in int and rem
respectively, then the identity x = (int × y) + rem holds.
Note that, as for decDoubleDivideInteger, it must be possible to express the intermediate result (int) as
an integer. That is, it must have no more than DECDOUBLE_Pmax digits. If it has too many then
DEC_Division_impossible is raised.
decDoubleRemainderNear(r, x, y, set)
This is the same as decDoubleRemainder except that the nearest integer (or the nearest even integer if
the remainder is equidistant from two) is used for int instead of the result from
decDoubleDivideInteger. Again, that integer must fit.
decDoubleRotate(r, x, y, set)
The result is a copy of x with the digits of the coefficient rotated to the left (if y is positive) or to the
right (if y is negative) without adjusting the exponent or the sign of x.
y is the count of positions to rotate and must be a finite integer (with exponent=0) in the range
-DECDOUBLE_Pmax through +DECDOUBLE_Pmax. NaNs are propagated as usual. If x is infinite the
result is Infinity of the same sign. No status is set unless y is invalid or an operand is an sNaN.
decDoubleSameQuantum(x, y)
Returns an unsigned integer (uint32_t) which will be 1 if the operands have the same exponent or
are both NaNs (quiet or signaling) or both infinite. In all other cases, 0 is returned. No error or status
is possible.
decDoubleScaleB(r, x, y, set)
This calculates x × 10y and places the result in r. y must be an integer (finite with exponent=0) in the
range ±2 × (DECDOUBLE_Pmax + DECDOUBLE_Emax), typically resulting from decDoubleLogB.
Underflow and overflow might occur. NaNs propagate as usual.
decDoubleSetCoefficient(r, bcd, sign)
Sets the coefficient of r from a BCD integer in the array bcd (uint8_t *) and the signed 32-bit
integer (int32_t) sign. bcd must have DECDOUBLE_Pmax elements in the range 0–9, and sign must
be DECFLOAT_Sign to set the sign bit of r to 1, or 0 to set it to 0.
If r is a NaN the first byte of bcd will be ignored (the remainder will be the payload), and if it is
infinite then all of bcd will be ignored (the coefficient will become zero).
For speed, the arguments are not checked; no status is set by this function. The result is undefined if
the arguments are invalid or out of range (that is, could not have been produced by
decDoubleGetCoefficient).
(This function is also available in the decSingle module.)
62 Module descriptions Version 3.68
decDoubleSetExponent(r, set, exp)
Sets the exponent of r from the signed 32-bit integer (int32_t) exp. exp is either an in-range
exponent or a special code as returned by decDoubleGetExponent. If r becomes infinite then its
coefficient is set to zero, if it becomes NaN then the first digit of the coefficient is lost,22 otherwise the
coefficient is unchanged.
For speed, exp is not checked; however, underflow or overflow can result. The result is undefined if
exp is not a value that could have been produced by decDoubleGetExponent.
(This function is also available in the decSingle module.)
decDoubleShift(r, x, y, set)
The result is a copy of x with the digits of the coefficient shifted to the left (if y is positive) or to the
right (if y is negative) without adjusting the exponent or the sign of x. Any digits “shifted in” from the
left or from the right will be 0.
y is the count of positions to shift and must be a finite integer (with exponent=0) in the range
-DECDOUBLE_Pmax through +DECDOUBLE_Pmax. NaNs are propagated as usual. If x is infinite the
result is Infinity of the same sign. No status is set unless y is invalid or an operand is an sNaN.
decDoubleShow(x, tag)
This function uses printf to display a readable rendering of x, showing both the encoding (in
hexadecimal) and the value, and returns nothing (void). The string tag (const char *) is included
in the display and may be used as an identifier for the displayed data.
This function is intended as a debug aid. It is not a programming interface – the format of the
displayed data may change from release to release.
(This function is also available in the decSingle module.)
decDoubleSubtract(r, x, y, set)
Subtracts y from x and places the result in r.
decDoubleToBCD(x, exp, bcd)
Converts x into an exponent exp (int32_t *) and a BCD array bcd (uint8_t *). exp is set to the
value that would be returned by decDoubleGetExponent(x), and bcd and the returned integer
(int32_t) are as from decDoubleGetCoefficient(x, bcd).
(This function is also available in the decSingle module.)
decDoubleToEngString(x, string)
The same as decDoubleToString(x, string) except that if exponential notation is used the exponent will
be a multiple of 3 (“engineering notation”).
(This function is also available in the decSingle module.)
22 A NaN payload has one fewer digit than the coefficient of a finite number.
Version 3.68 Module descriptions 63
decDoubleToInt32(x, set, round)
Returns a signed 32-bit integer (int32_t) which is the value of x, rounded to an integer if necessary
using the explicit rounding mode round (enum rounding) instead of the rounding mode in set.
If x is infinite, is a NaN, or after rounding is outside the range of the result, then
DEC_Invalid_operation is set. The DEC_Inexact flag is not set by this function, even if
rounding ocurred.
decDoubleToInt32Exact(x, set, round)
The same as decDoubleToInt32 except that if rounding removes non-zero digits then the
DEC_Inexact flag is set.
decDoubleToIntegralExact(r, x, set)
Returns the value of x, rounded to an integral value using the rounding mode in set.
If x is infinite, Infinity of the same sign is returned. If x is a NaN, the result is as for other arithmetic
operations. If rounding removes non-zero digits then the DEC_Inexact flag is set.
decDoubleToIntegralValue(r, x, set, round)
Returns the value of x, rounded to an integral value using the explicit rounding mode round (enum
rounding) instead of the rounding mode in set.
If x is infinite, Infinity of the same sign is returned. If x is a NaN, the result is as for other arithmetic
operations. The DEC_Inexact flag is not set by this function, even if rounding ocurred.
decDoubleToNumber(x, dn)
This function is implemented as a macro and sets a decNumber, dn, from x using a decimal64 as a
proxy as illustrated in Example 8 in the User’s Guide (see page 20). The decNumber must have
sufficient space for the digits in x.
To use this macro, the decimal64.h header file must be included (see the text following the example
for more details). A pointer to dn is returned (decNumber *).
(This function is also available in the decSingle module.)
decDoubleToPacked(x, exp, pack)
Converts x into an exponent exp (int32_t *) and a Packed BCD array pack (uint8_t *). exp is set
to the value that would be returned by decDoubleGetExponent(x).
pack receives DECDOUBLE_Pmax packed decimal digits (one digit per four-bit nibble) followed by a
sign nibble and prefixed (for decDouble and decQuad only) with an extra pad nibble (which is 0). The
sign nibble will be DECPMINUS if x has sign=1 or DECPPLUS otherwise. The digit nibbles will be in
the range 0–9.
A signed 32-bit integer (int32_t) is returned; it will be DECFLOAT_Sign if x has sign=1 or otherwise
will be 0.
(This function is also available in the decSingle module.)
64 Module descriptions Version 3.68
decDoubleToString(x, string)
Converts x to a zero-terminated string in the character array string (char *) and returns string. string
must have at least DECDOUBLE_String elements (this count includes the terminator character).
Finite numbers will be converted to a string with exponential notation if the exponent is positive or if
the magnitude of x is less than 1 and would require more than five zeros between the decimal point
and the first significant digit.
Note that strings which are not simply numbers (one of Infinity, -Infinity, NaN, or sNaN) are
possible. A NaN string may have a leading - sign and/or following payload digits. No digits follow
the NaN string if the payload is 0.
(This function is also available in the decSingle module.)
decDoubleToUInt32(x, set, round)
Returns an unsigned 32-bit integer (uint32_t) which is the value of x, rounded to an integer if
necessary using the explicit rounding mode round (enum rounding) instead of the rounding mode in
set.
If x is infinite, is a NaN, or after rounding is outside the range of the result, then
DEC_Invalid_operation is set. The DEC_Inexact flag is not set by this function, even if
rounding ocurred.
Note that -0 converts to 0 and is valid, but all negative numbers are not valid.
decDoubleToUInt32Exact(x, set, round)
The same as decDoubleToUInt32 except that if rounding removes non-zero digits then the
DEC_Inexact flag is set.
decDoubleToWider(x, dq)
Converts x into a structure, dq, of the next-wider format (decQuad *) and returns dq. Widening is
always exact; no status is set (sNaNs are copied and do not signal). The result will be canonical if x is
canonical, but otherwise might not be.
(This function is also available in the decSingle module, but is not available in the decQuad module.)
decDoubleVersion(void)
Returns a pointer to a character string (const char *) which includes the name and the version of
the decNumber package.
(This function is also available in the decSingle module.)
decDoubleXor(r, x, y, set)
Carries out the digit-wise logical exclusive Or of x and y and places the result in r.
The operands must be zero or positive (sign=0), an integer (finite with exponent=0) and comprise only
zeros and/or ones; if not, DEC_Invalid_operation is set.
Version 3.68 Module descriptions 65
decDoubleZero(r)
Sets r to the unsigned integer zero (that is, with the coefficient, the exponent, and the sign all set to 0).
(This function is also available in the decSingle module.)
66 Module descriptions Version 3.68
decPacked module
The decPacked module provides conversions to and from Packed Decimal numbers. Unlike the other
modules, no specific decPacked data structure is defined because packed decimal numbers are usually
held as simple byte arrays, with a scale either being held separately or implied.
Packed Decimal numbers are held as a sequence of Binary Coded Decimal digits, most significant first
(at the lowest offset into the byte array) and one per 4 bits (that is, each digit taking a value of 0–9, and
two digits per byte), with optional leading zero digits. The final sequence of 4 bits (called a “nibble”)
will have a value greater than nine which is used to represent the sign of the number. The sign nibble
may be any of the six possible values:
1010 (0x0a) plus
1011 (0x0b) minus
1100 (0x0c) plus (preferred)
1101 (0x0d) minus (preferred)
1110 (0x0e) plus
1111 (0x0f) plus23
Packed Decimal numbers therefore represent decimal integers. They often have associated with them
a second integer, called a scale. The scale of a number is the number of digits that follow the decimal
point, and hence, for example, if a Packed Decimal number has the value -123456 with a scale of 2,
then the value of the combination is -1234.56.
Definitions
The decPacked.h header file does not define a specific data structure for Packed Decimal numbers.
It includes the decNumber.h header file, to simplify use, and (if not already defined) it sets the
DECNUMDIGITS constant to 32, to allow for most common uses of Packed Decimal numbers. If you
wish to work with higher (or lower) precisions, define DECNUMDIGITS to be the desired precision
before including the decPacked.h header file.
The decPacked.h header file also contains:
• Constants describing the six possible values of sign nibble, as described above.
• Definitions of the public functions in the decPacked module.
Functions
The decPacked.c source file contains the public functions defined in the header file. These provide
conversions to and from decNumber form.
decPackedFromNumber(bytes, length, scale, number)
This function is used to convert a decNumber to Packed Decimal format.
23 Conventionally, this sign code can also be used to indicate that a number was originally unsigned.
Version 3.68 Module descriptions 67
The arguments are:
bytes (uint8_t *) Pointer to an array of unsigned bytes which will receive the number.
length (int32_t) Contains the length of the byte array, in bytes.
scale (int32_t *) Pointer to an int32_t which will receive the scale of the number.
number (decNumber *) Pointer to the input structure. The decNumber structure will not be
altered.