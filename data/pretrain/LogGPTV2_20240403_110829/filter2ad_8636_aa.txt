**作者：Lucifaer  
原文链接：**
### 0x01 漏洞概述
Weblogic官方在10月补丁中修复了`CVE-2020-14882`及`CVE-2020-14883`两个漏洞，这两个漏洞都位于`Weblogic
Console`及控制台组件中，两个漏洞组合利用允许远程攻击者通过`http`进行网络请求，从而攻击Weblogic服务器，最终远程攻击者可以利用该漏洞在未授权的情况下完全接管Weblogic服务器。
在经过diff后，可以定位到漏洞触发点：
CVE-2020-14883:`com.bea.console.handles.HandleFactory`
CVE-2020-14882:`com.bea.console.utils.MBeanUtilsInitSingleFileServlet`
这里先把结论放出来：
  * CVE-2020-14882：这个漏洞起到的作用可以简单理解为目录穿越使`Netuix`渲染后台页面
  * CVE-2020-14883：为登录后的一处代码执行点
### 0x02 漏洞分析
该漏洞分为三部分：
  * 路由鉴权
  * Netuix框架完成执行流转换
  * HandleFactory完成代码执行
前两部分为`CVE-2020-14882`，后面一部分为`CVE-2020-14883`。本文将从上而下将三部分进行串流分析，主要采用动态跟踪。
#### 2.1 路由鉴权
在具体分析路由鉴权前，需要先要寻找一下处理路由的servlet是哪个。
##### 2.1.1 寻找处理路由的servlet
Weblogic`console`组件对应着Weblogic
Server启动后的管理平台（即`/console`路由所对应的组件），其对应着一个`webapp`，所以想要理清路由所对应的`servlet`映射关系，就需要去看一下相关的配置文件。配置文件为`wlserver/server/lib/consoleapp/webapp/WEB-INF/web.xml`。
正常登录后的路由情况为：
会访问一个`console.portal`文件，对应在`web.xml`中看一下相关的路由处理情况：
可以看到对应的`servlet`为`AppManagerServlet`：
所以先在`AppManagerServlet`下断调试一下路径鉴权或者说是权限鉴定的流程。
跟进一下初始化流程：
    weblogic.servlet.AsyncInitServlet#init ->
    weblogic.servlet.AsyncInitServlet#initDelegate ->
    weblogic.servlet.AsyncInitServlet#createDelegate
这里的`this.SERVLET_CLASS_NAME`也就是xml中的：
所以初始化过程实际上是实例化了`com.bea.console.utils.MBeanUtilsInitSingleFileServlet`，并调用其`init()`方法，跟进看一下其所对应的处理方法：
注意红框所标识的内容，oracle针对`CVE-2020-14882`的修补也是在这里针对`url`加了一个黑名单，并过了一遍黑名单：
继续跟进父类`SingleFileServlet`的`server`中：
在完成`AppContext`初始化后，即进入真的处理请求的`UIServlet`：
在此处完成后续的请求处理。
##### 2.1.2 路由映射及路由权限校验
在这里我们先不向后跟进，在此处下个断点向上跟踪一下，看一下Weblogic路由映射及路由鉴权在哪里触发。调用栈如下：
可以看到在`weblogic.servlet.internal.WebAppServletContext`中完成的权限校验。跟进具体看一下：
在`weblogic.servlet.internal.WebAppServletContext#doSecuredExecute`方法的流程中会调用`checkAccess`方法来进行权限校验，跟进看一下：
当首次请求进入后`checkAllResources`变量为`false`，所以跟进`getConstraint`方法：
这里的`constraintsMap`中保存着一份路由表：
这份路由表对应的是`web.xml`中的`security-constraint`：
注意在针对`/`的路由处理是限定了需要经过认证的，而针对：
  * `/images/*`
  * `/common/*`
  * `/css/*`
路径的访问是没有认证约束的。对应到代码中，就是说当访问的路由符合该路由映射表中的情况时，将根据配置设置`rcForAllMethods`变量，也就是最终返回的`resourceConstraint`:
这里的`unrestricted`变量代表该路由是否为非受限路由，在后续鉴权时该变量会起关键性作用。当请求的路由是路由表中的路由时，该变量都为`true`。当完成`resourceConstraint`设置后，就会进入`isAuthorized`方法进行权限鉴定：
这里将执行流转换到`CertSecurityModule#checkUserPerm`方法中：
首先会根据`session`来确定是否需要重新登录，之后会判断是否为指定路由，如果是未指定的路由，则保护资源，由于我们这里访问的路由为`/css`，在指定的路由表中，所以这里是`false`。重点看`hasPermission`方法，这里会用到`resourceConstraint`中的`unrestricted`：
这里首先会判断当前的账户是否为Admin账户，当前应用是否为内部引用等，若都不满足，则会判断是否设置了`完整安全路由`选项，这里是`false`。接下来会判断该路由是否为非受限的路由，如果是，则返回true。由于我们根据路由表返回设置的`unrestricted`变量为`true`，即为非受限的路由，所以这样就通过了路由鉴权，导致了未授权访问相关资源。
##### 2.1.3 请求分派
当完成了路由鉴权后，会根据`web.xml`中的设置，将访问的路由映射到相应的servlet进行请求处理：
因为我们后续的流程在`UIServlet`中进行，所以可以用于绕过路由鉴权的路由即为：
  * `/css/*`
  * `/images/*`
当`checkAccess`方法返回为`true`后，会根据配置返回对应的servlet并调用`service`方法。
首先会初始化`ServletInvocationAction`对象：
从`subject.run(action)`一路向下跟，在`weblogic.security.acl.internal.AuthenticatedSubject#doAs`中调用`action`的`run`方法，即跟进`ServletInvocationAction#run`：
在调用`execute`方法前，会首先判断是否存在拦截器及请求监听器，若存在则执行对应的拦截器执行链，否则执行`stub.execute()`方法。跟进`stub.execute()`方法，即`weblogic.servlet.internal.ServletStubImpl#execute`：
这里会调用`getServlet()`方法返回对应的`servlet`：
##### 2.1.3 总结
从上面的分析可知，想要访问非受限的资源，就需要构造符合路由表中的路由。从此我们也可以看出这里并非一个权限绕过操作，而是一个正常的访问非受限资源（如css文件这类资源）的操作，想要搞清楚为什么能因此而触发一个登陆后代码执行操作，就需要跟进`UIServlet`的具体处理流程中。
#### 2.2 Netuix框架完成执行流转换
`weblogic.servlet.AsyncInitServlet`为处理`Netuix`相关请求的`servlet`，根据2.1.1中的分析，我们可以知道其真实的处理逻辑是在`com.bea.netuix.servlets.manager.UIServlet`中完成的：
对于`UIServlet`来说，处理GET请求的逻辑最终也会在`doPost`方法中。上图红框中所标明的两处即为`UIServlet`的核心功能：
  * 建立`UIContext`，或者说是通过解析`.portal`文件建立渲染模板的上下文
  * 完成模板渲染的生命周期
接下来也会以这两点为核心具体叙述Netuix框架是如何完成执行流的转换的。
##### 2.2.1 建立UIContext
建立`UIContext`的主要流程在`createUIContext`方法中：
红框所标注的两行为关键流程。首先跟进`UIContextFactory.createUIContext`，这里主要完成了`UIContext`的初始化：
在执行`setServletRequest`方法时，会根据请求的参数对`postback`成员变量进行设置：
可以看到：
  * 请求类型为POST请求，会将`postback`设置为`true`
  * 存在`_nfpb`参数的GET请求，会根据参数的值设置`postback`的值
**`postback`变量在后续执行`UIContext`生命周期时会对流程产生影响**。这里先记一下。
完成`UIContext`的初始化过程后，接下来就是解析`.portal`文件，将解析结果填充到`UIContext`中。这一部分的流程在`getTree()`方法中：
这里有一个需要注意的点，这里会对请求的路径进行二次URLDecode，这也就是为什么构造的poc是需要二次URL编码的原因。
跟进`processStream()`方法，具体的解析逻辑就在这里：
可以看到经过二次URLDecode后的请求路径在此造成了 **目录穿越** 的效果。
`com.bea.netuix.servlets.manager.SingleFileProcessor#getMergedControlFromFile`中首先会初始化SAX解析器，然后根据传入的文件路径获取到对应的`.portal`文件，并利用SAX解析器解析该`.portal`文件：
`getMergedControlFromFile()`方法最终会调用`getSourceFromDisk()`方法根据传入的路径获取`consoleapp/webapp`目录下相应的文件即：
  * console.portal
  * consolejndi.portal
在利用SAX解析器解析完该`portal`文件后，生成语法树，也就是`getTree()`返回的`ControlTreeRoot`对象，并将语法树置入`UIContext`中。
至此就完成了`UIContext`的初始化流程。
##### 2.2.2 完成模板渲染的生命周期
在完成了`UIContext`初始化流程之后，便会调用`runLifecycle()`方法运行生命周期，开始根据请求参数完成模板渲染。
跟进`runLifecycle()`：
在`com.bea.netuix.nf.Lifecycle#run`中，需要注意这个条件判断，这里会影响到后面的流程调用。
根据2.2.1中的分析我们知道当GET请求存在`_nfpb`参数时，会根据参数的值设置`postback`的值，`outbound`值默认为`false`。
而`postback`值只会影响是否会执行`runInbound()`流程。在具体跟踪了`runInbound()`流程后，可以发现其处理逻辑是相同的：
而关键点就在其`VisitorType`是不同的，这会在`processLifecycles()`流程中影响具体的节点遍历顺序：
在`com.bea.netuix.nf.Lifecycle`中，我们可以看到`inbound`与`outbound`的区别：
各`VisitorType`具体配置为：
所以由`postback`会衍生出两种不同的执行流。
##### 2.2.3 Netuix生命周期及控件间的关系
在具体跟进两种执行流前，首先介绍一下`Netuix`的解析流程，在其[官方介绍页面](https://docs.oracle.com/cd/E13218_01/wlp/docs81/whitepapers/netix/body.html)上有对生命周期方法执行顺序及netuix控件解析流程的详细描述，这里将其内容简要总结一下。
`Netuix`控件树的生命周期其实就是按顺序所执行的一组方法，这组方法的执行顺序如下：
    init()
    loadState()
    handlePostbackData()