# Pitou的虚拟DGA算法分析（二）
|
##### 译文声明
本文是翻译文章，文章原作者 johannesbader，文章来源：johannesbader.ch
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## DGA算法
本节使用之前分析中的输出对DGA进行逆向，具体可以参照Pitou的虚拟DGA算法分析（一）。完成逆向后，利用Python对DGA进行重新实现。该脚本可以针对任何给定日期生成对应的DGA域名。
###  DGA调用器
要理解DGA，必须首先查看调用VM的本地代码：
在上图的顶部，可以看到虚拟DGA的调用和在调用过程中传递的五个参数：
  * r8d：当前天(day)，如2代表本月的第二天；
  * edx：当前月份（month），如三月为3；
  * ecx：当前年份（year），如2019；
  * rsi：域名编号，从0开始；
  * r9：保存生成域名的内存地址。
在截图的第一行中，域名数量rsi设置为r12d，而r12d为0。直到rsi达到20，该循环恰好生成20个域名。
###  IDA Pro图形化
方法2中的动态二进制转换生成的汇编程序行数比虚拟指令数少80%。然而，DGA仍然很长，如下面的两张图片所示。它们显示了DGA，以及其调用的一个函数，该函数得到基于日期的种子。
###  DGA主方法
DGA算法：
###  DGA种子
基于日期的种子：
通过IDA的反汇编图可以很容易地分析该DGA，因为它展示了函数的结构和控制流程。然而，这种情况下，IDA在的真正优势是Hex
Rays反编译器。像前面讲到的，DGA使用了许多优化的整数除法，即所谓的不变整数除法。这些计算在反汇编中是很麻烦的，但是利用Hex
Ray的反编译插件可以很好的处理。
###  IDA Pro Hex Rays
本次DGA的逆向是完全基于Hex Ray反编译器的。
首先分析DGA调用的日期种子函数。它接收到参数的基于下面的设定：
  * r8d：从1开始，所以每月的第一天为1；
  * edx：从0开始，所以一月为0，十二月为11；
  * ecx：四位数的年份。
月份从0开始的设定是错误的。真实的月份应该是从1开始的，所以一月应该为1。本节的第一部分在参数正确的设定上分析这个函数。而第二部分探究月份中不正确的值对本方法的影响。
首先看一下Hex Rays完整输出，其中隐藏了转换和声明：
    signed __int64 __usercall days_since_epoch@(int month@, int year@, int day@)
    {
      // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-"+" TO EXPAND]
      retaddr = v4;
      month_o = month;
      extra_years = month / 12;
      year_f = extra_years + year;
      month_fixed = (-12 * extra_years + month_o);
      if ( month_fixed > 32;
      days_in_months = 0LL;
      days_beg_year_with_rule_div400 = c2 + (c3 >> 31) + (c3 >> 7) + days_beg_year_rule_div100;
      for ( i = 0LL; i (int month@, int year@, int day@)
    {
      year_f = year;
      day_0_based = (day - 1);
      month_f = month;
      year_f_plus_1900 = year_f + 1900;
      years_since_epoch = year_f - 1970;
      day_1_based = day_0_based + 1;
      year_mod4 = year_f % 4;
      year_mod4_is_1 = year_mod4 && year_mod4 > 32;
      days_in_months = 0LL;
      days_beg_year_with_rule_div400 = c2 + (c3 >> 31) + (c3 >> 7) + days_beg_year_rule_div100;
      for ( i = 0LL; i > 32;
    days_in_months = 0LL;
    days_beg_year_with_rule_div400 = c2 + (c3 >> 31) + (c3 >> 7) + days_beg_year_rule_div100;
现在代码正确地确定了给定日期到年初的天数。最后，它使用一个循环来累计每个月过去的天数：
      for ( i = 0LL; i < month_f; days_in_months = (month_lengths_common_year[i_] + days_in_months) )
      {
        is_leap_year_1 = !year_mod4 && (year_mod100 || !year_mod400);
        i_ = i++ + 12 * is_leap_year_1;
      }
month_length_common_year列出了平年中的每月天数，紧接其后的是闰年中的每月的天数。如果需要，术语12 *
is_leap_year_1将切换到闰年的月份数组。
最后，代码将纪元到年初的天数、今年过去月份的天数（本年的第几个月）和当前的天数（本月的第几天）相加，减去1得到纪元以来的天数：
      return days_in_months + days_beg_year_with_rule_div400 + day_1_based - 1;
###  实际参数的影响
当月份是从零开始时，上面的代码可以顺利的执行。然而，在获取日期时是通过函数RtlTimeToTimeFields，详情见DGA调用器。该函数返回从1到12的月份。在这些日期中执行计算天数的函数会发生什么呢？
情形1：既不是十二月，也不是月底。不是12月也不是28号后的日期会将实际日期变成下个月对应的日期。如：
实际日期 | 更改为 | 结果  
---|---|---  
28.3.2019 | 28.4.2019 | 0x465E  
1.9.2017 | 1.10.2017 | 0x4420  
1.1.2014 | 1.2.2014 | 0x30A1  
30.11.2019 | 30.12.2019 | 0x4754  
情形2：在月底但不是十二月。如果下个月的对应日期不存在，那么将日期移到下个月将会导致问题。例如，3月31日将会转移到4月31日，这是不存在的。在这种情况下，我们之前跳过的while(1)循环将会生效：
    while ( 1 )
      {
        year_div4_ = year_f_plus_1900 % 4;
        leap_year = year_div4_
                 || year_f_plus_1900 == 100 * (year_f_plus_1900 / 100) && year_f_plus_1900 != 400 * (year_f_plus_1900 / 400) ? 0LL : 1LL;
        if ( day_0_based < month_lengths_common_year[month_f + 12 * leap_year] )
          break;
        leap_year_ = !year_div4_
                  && (year_f_plus_1900 != 100 * (year_f_plus_1900 / 100)