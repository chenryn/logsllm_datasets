# 16 \| 技术人如何建立个人影响力?程序员虽然经常和管理层或其他部门协作，但更多的时候，还是和技术人员内部的分工协作。虽然好的领导者会让每个人的职责范围尽量清晰，但时不时也会有下面这样的事情发生。程序员小罗为项目做了很多调研工作，也有一些很好的想法。同事小唐和小罗一起合作，也互相讨论问题。几次讨论过后，小唐就写了个设计文档，署了自己的名字，并发送给大家审核。小罗一看，发现很多内容都是自己之前和小唐讨论时说的，心里就觉得很不舒服。小王和小李，一个在公司时间久一点，属于老员工，另一个级别稍微高一点，但是加入公司时间不久，属于资深的新人。在一些项目的问题上，两人各执己见，只要有不同意见，就很难说服对方。老员工小王觉得："你根本不了解我们的系统。"资深新人小李觉得："这是编程中的重要思想，怎么你就不明白呢？"这些其实都和个人的影响力有关。第一个例子，我们会觉得别人抢了自己的功劳，自己的成绩被忽略了，失去了该有的存在感。第二个例子是因为我们工作中和别人协作的难易程度，与我们在别人眼中的可信赖度息息相关，包括我们如何用自己的观点去影响和说服别人。**我个人理解的影响力，应该包括以下几个方面。**``{=html}1.  存在感：你的意见别人会认真听。2.  说服力：当别人和你意见不同的时候，能有效地让对方真的明白你的出发点，虽然不一定百分之百地采纳，但会认可你的观点。3.  谈判力：双方共同完成一个项目，让职责划分尽可能公平，对双方都有利。4.  协调力：多方合作的时候，你能起到桥梁的作用，促进多方更好地沟通。5.  鼓舞力：也就是我们平时说的灌鸡汤、打鸡血的能力。**那么作为技术人，怎样在这些方面提升自己的能力，从而建立个人影响力呢？**我先说存在感。如何让别人能够认真听取你的意见呢？换位思考一下，如果别人发现，每次你给出的意见都会让事情变得顺利，或者避开了一些可能会栽进去的坑，那他一定会变得更尊重你的看法。我的建议是：不要在一些可有可无的事情上纠缠，非让别人尊重你的意见。对一件事情不确定的话，要说清楚哪些是自己有把握的，哪些只是自己的推测。如果一个观点来自别人，点明这是谁说的，一是对别人的尊重，二是对方如果需要跟进了解，那么，他知道该去找谁。总而言之，有三分话就不要说五分话，有七分话就不要说十分话。再说一下说服力。说服别人之前，要尽可能保证自己观点清晰，条理清楚。最重要的是，你需要站在对方的立场去了解，为什么他会不认同你的观点。很多时候，我们只是没有完全理解对方的想法，结果造成了无谓的争论；所以，增加说服力的重点是，找到对方不认可的那些地方，反复讨论，达成一致，而不是去争执自己正确的观点有多么"正确"。谈判力取决于你的知识、智慧、经验和直觉。要对某一件事具备精确的判断力，你必须去搞清楚事情的来龙去脉，也就是事件的经过和背景。除此之外，你还需要知道，哪些是自己的底线，哪些是对方的利益，通过最大化双方共同利益建立合作，并尽可能最小化双方冲突的地方。在谈判的过程中，你可以让步，但是要让对方明白，这是自己的一个让步，希望对方理解，并在一些自己无法让步的方面提供支持。当然，谈判力是一种不能速成的软技能，但是作为技术人，保持你的逻辑清晰，懂得适度取舍，就是一个好的起点。我们再来说说协调力。培养多方协调的能力，需要从平时做起。工作中你需要和经常一起合作的人保持良好关系和顺畅沟通，学会成为团队里"让事情发生的人"，搞清楚各组人员之间的相关性，项目进度之间的依赖性等。对于资源的变更保持敏感度，面对项目计划的变更、人员和岗位的调整，要能适时合理地传达，确保合作计划尽可能地随之变化，各方面都有相应的协同。不要在任何一方还没有了解变化的情况下做出决定，如果必须做决定，也要使用对方能够接受的方式提前沟通。最后说说鼓舞人的能力。如果你是一个技术领导者，就应该培养自己"振臂一呼，应者云集"的能力，这是技术领导力的体现之一。那么，如何去鼓舞人呢？当众演说能力当然很重要，不过我在这里要强调的是对个人的鼓舞。比如，你可以去了解对方担心的地方，并适时加以帮助。预先获知对方的长处，在他取得阶段性胜利的时候，或通过自己的努力克服困难的时候，找机会明确地对他的长处给予肯定，并对他的付出表示感谢、认可或者赞赏。如果有意见，多提建设性的意见，让对方在相对愉快的心境下做出改变。最后，我来做个小结。建立个人的影响力并不是为了凸显你自己有多重要，或者让别人更加认可你，而是通过影响力把事情做成。在一个技术团队里，影响力很多时候与你的贡献紧密相关。如果你的存在能够让别人的工作更好地推进，让别人更容易取得成就，久而久之，伙伴们就会很自然地认可你，信服你，有问题的时候，也会想到要咨询你的意见。帮助别人成功，帮助别人成就梦想，你就会具备积极正向的影响力。你对技术人如何建立个人影响力有哪些好的意见或者建议，欢迎留言，我们共同成长。\![](Images/9646a8154f57432904b0215eacaebe87.png){savepage-src="https://static001.geekbang.org/resource/image/7f/01/7f0faa67e327efd58c80c7411a54b201.jpg"}戳此获取你的专属海报](https://time.geekbang.org/activity/sale-poster?utm_source=app&utm_medium=zhuyun-article&utm_campaign=zhuyun-saleposter&utm_content=zhuyun0416)
# 17 \| 管理者不用亲力亲为：关键是什么？大部分被提拔成技术领导的工程师都拥有一定的领导力，最重要的是，他们都具备出色的业务能力；而这些技术能力强悍的工程师刚刚走上管理岗位时，最爱做的事情就是亲力亲为，看谁干活都不放心，恨不得自己把所有的事情都做了。对此，我深有体会，因为我是一个典型的由技术骨干提拔上来的管理者。成为技术管理者之前，我在组里是研发组长（ Tech Lead）的角色。我不仅参与所有的设计和讨论，甚至很多的核心代码都是自己写；组里其他人的代码，我也会亲自过目。无论多忙，我都会参与所有的代码评审，尽力做到对每一个改动都心中有数。随着业务规模的扩大，我带的项目组人数越来越多，事事亲为也变得越来越吃力。晚上和周末的时间差不多全部用来加班了，超长的工作时间变成常态。即使这样，我也总有忙不完的事。好友池建强老师常常说，你得学着带人和授权，把事情分出轻重缓急，把有些事分出去让别人做。可那个时候的我，总觉得每件事情都很关键，什么都不愿放手，甚至我老板也常常说我，应该学会把任务授权给给别人。我在这方面做得一直不好。一方面，我确实没有掌握到分配任务的技巧，好几次任务分出去都出了小问题，最终还要自己介入；另一方面，我那个时候的状态也不对，整个人陷到所有的细节中无法自拔，没办法做到退一步海阔天空，只能紧紧盯住眼前的事，无法看得更高更远，甚至常常在度假的时候也要处理工作上的事情。对个人而言，我自己忙得疲惫不堪，对团队而言，一旦我这里停下来，就成了所有人的瓶颈。这个问题在我转成管理者之后不久，变得更加突出。一方面，我多了很多管理相关的工作，这些任务会占用我很多的时间；另一方面，团队迅速成长，项目和人都变得更多了，想要事事亲力亲为再也不可能了。终于有一天，事情突破了临界点，也就是说，无论我怎么忙，都没办法延续之前的管理方式了。当一个人熟悉的"老系统"彻底坍塌的时候，人们才会改变，去尝试构建一套新系统；但是，新系统从来不是一蹴而就的，我花费了好大的力气才从"亲力亲为"转变为授权和任务分配模式。为什么这么困难呢？原因很多，我觉得最重要的一点可能和工程师的工作习惯有关系：一个技术方案如果自己不参与，就会担心事情不能做好。这里面其实有两个误区：``{=html}1.  事情能不能做好和完全按照你自己的方式做好，是两码事，别人有别人的工作方式，也能把事情做好。2.  介入和不介入并不是非黑即白，用什么方式介入，在哪些地方介入，才是关键。既然出发点是把事情做好，那如果我们把任务分配出去，别人也一样能把事情做好，如果这样去思考，是不是就更容易放手了呢。这样的话，我们就会把关注点放在如何帮助别人把事情做好上面。比如，接受任务的人需要哪些支持和帮助才能很好的完成任务呢，我们应该在什么样的时间点去提供这样的帮助。**作为一个管理者，我们在授权和分配任务的时候应该注意这些方面。**第一，让对方明确目标，知道最终想要达到的结果是什么，对这个任务完成的期望值是怎样的。比如，在什么时间内完成什么样的任务，你对这个任务成功的定义是什么样，如果有取舍，哪些是重要的，哪些是次要的，哪些是可以妥协的。如果这些标准没有说清楚，很可能会出现认知偏差，比如对方觉得做得很好，但是你认为有些很重要的东西并没有被照顾到。当然，这里面一个重要的前提是：对方同意并承诺完成这个目标。第二，制定一个计划，并保持跟进。跟进不是指导，不是让你去频繁介入别人的任务，告诉对方下面你该干什么了；而是需要你在对方对某个环节有疑问的时候，能够随时提供帮助。这种帮助可能是解决方案，也可能是技术方向。当对方对下一步该怎么做没有头绪的时候，你可以与其探讨，给出建议或者线索，确保没有大的障碍阻止他取得关键性进展。第三，给出反馈，尤其是正面的反馈。当对方做得很好的时侯，你需要及时地给予肯定。对方处于平台期没有突破的时候，只要他还在努力，就应该给予适当的鼓励。反馈要尽可能的客观，不要在小细节上有太多意见。如果在方向或者优先级等问题上偏离了你的预期，要及时交流和纠正，了解对方的想法，找到问题的原因，让项目走上正轨。那么，我们回到今天的主题：管理者不用亲力亲为，关键是什么？我认为，关键就在于学会授权和任务分配。这个过程需要注意两个重点：第一，我们要有效地把任务分配出去，第二，我们要保证分配出去的任务能够被圆满地完成。任务无论是自己做还是交给别人做，让事情更快更好地完成永远是第一位的。很多优秀的工程师最初都是独行侠，他们单枪匹马完成了很多丰功伟绩，也更习惯自己独立工作，但一旦他们发现团队协作可以做出更大的成就时，就会从亲力亲为转变为授权模式，帮助别人成功，团队才会获得更大的成功。回顾一下，今天，我和你讨论了为什么工程师出身的技术领导更容易亲力亲为，如何从亲力亲为模式转变为授权和分配任务模式，以及我们在进行任务分配的时候，应该注意哪些方面。最后给你留一个思考题。如果你在分配任务的过程中，对方不认可你设定的目标，或者不同意你对项目成功的定义，你该怎么做呢？可以在留言中告诉我，我们一起讨论。\![](Images/9646a8154f57432904b0215eacaebe87.png){savepage-src="https://static001.geekbang.org/resource/image/7f/01/7f0faa67e327efd58c80c7411a54b201.jpg"}戳此获取你的专属海报](https://time.geekbang.org/activity/sale-poster?utm_source=app&utm_medium=zhuyun-article&utm_campaign=zhuyun-saleposter&utm_content=zhuyun0416)
# 18 \| 每个工程师都应该了解的：API 的设计和实现在一个初创公司成长的过程中，作为工程师的你也许常常会遇到下面这样的情况。有一天，你看到一个段代码或一个算法，觉得这些代码不大经得起推敲；于是你用git blame 命令去寻找代码的主人；结果发现，原来作者是如今早就不写代码的CTO 或 VP。之后，在一个偶然的机会里，你和他讲起这件事，他会自豪地告诉你："哦，那时候我们必须在一天之内做出这个产品特性。当时也就我一个程序员吧，一天的时间，这是当时能做出最好的方案了。"说完，他便陷入了对美好时光的怀念里。你也可能听说过这样的故事。有一天你的 CTO突发奇想，行云流水地提交了一段代码；大家一看很激动啊，很多人跑去观摩大神的代码，结果觉得问题多多，于是在PR（ Pull Request ）上提了一堆评论。CTO一看有点傻眼了："几十条评论......现在代码要这么写啊，好麻烦。"于是他就和一位工程师说："你把评论里的问题解决下，合并（Merge）到主分支吧"，然后就开开心心地该干嘛干嘛去了。这两个小故事是想说明一个道理：一个公司早期的代码会因为各种历史原因不是那么完美，但是，在特定的时间点，这就是当时最优的方案。随着公司的发展，成品功能不断叠加，代码架构不断优化，系统会经历一些从简到繁，然后再由繁到简的迭代过程，代码的改动也会相当巨大，也许有一天，你会几乎不认识自己当初的作品了。API 的设计和实现更是如此。在我们的工作中，很少能见到 API的设计和实现从最开始就完美无瑕疵。一套成熟的API，很多时候都是需要通过不断演化迭代出来的。今天我就和你聊聊 API的设计和实现。首先第一点，我们先从 API 的签名（Signature）说起。