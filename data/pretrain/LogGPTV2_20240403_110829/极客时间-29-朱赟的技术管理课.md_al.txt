### 技术人如何建立个人影响力？

程序员虽然经常需要与管理层或其他部门协作，但更多时候是与内部的技术团队合作。尽管优秀的领导者会尽量明确每个人的职责范围，但在实际工作中仍可能出现一些问题。

例如，程序员小罗为项目进行了大量调研，并提出了一些很好的想法。同事小唐与小罗合作并共同讨论问题。几次讨论后，小唐撰写了一份设计文档，署上自己的名字并发送给大家审核。小罗发现文档中许多内容都是之前与小唐讨论时自己提出的，心里感到非常不舒服。

另一个例子是老员工小王和资深新人小李之间的冲突。小王在公司工作时间较长，而小李虽然加入时间不长但级别较高。两人在某些项目问题上各执己见，难以说服对方。小王认为：“你根本不了解我们的系统。”而小李则认为：“这是编程中的重要思想，你怎么就不明白呢？”

这些问题实际上都与个人影响力有关。第一个例子中，小罗觉得自己的贡献被忽视，失去了应有的存在感。第二个例子中，双方的合作难易程度与其在对方眼中的可信度密切相关，包括如何有效地影响和说服他人。

**个人理解的影响力应包括以下几个方面：**

1. **存在感**：你的意见会被认真听取。
2. **说服力**：当别人与你意见不同时，能够有效地让对方理解你的观点，即使不一定完全采纳，也会认可你的看法。
3. **谈判力**：在共同完成一个项目时，能够公平地划分职责，对双方都有利。
4. **协调力**：在多方合作时，能够起到桥梁的作用，促进更好的沟通。
5. **鼓舞力**：能够激励团队成员，提升士气。

**那么作为技术人，如何在这些方面提升自己的能力，从而建立个人影响力呢？**

首先，**存在感**。如何让别人认真听取你的意见？如果你的意见总是能让事情顺利进行或避免潜在的问题，别人自然会更加尊重你的看法。建议如下：
- 不要在无关紧要的事情上纠缠，确保你的意见有实质性的价值。
- 对不确定的事情要明确指出哪些是你有把握的部分，哪些只是推测。
- 如果某个观点来自他人，要明确指出来源，既是对别人的尊重，也便于后续跟进。

其次，**说服力**。在说服别人之前，确保你的观点清晰、条理分明。更重要的是，站在对方的角度去理解为什么他们会不认同你的观点。找到分歧点，反复讨论，达成一致，而不是一味强调自己观点的“正确性”。

再者，**谈判力**。这取决于你的知识、智慧、经验和直觉。你需要清楚事情的来龙去脉，了解自己的底线和对方的利益，通过最大化共同利益来建立合作，并尽可能减少冲突。在谈判过程中，你可以适当让步，但要让对方明白这是你的让步，希望得到对方的理解和支持。

接下来，**协调力**。培养多方协调的能力需要从日常做起。保持与合作伙伴的良好关系和顺畅沟通，成为团队中“推动事情发生的人”。了解各组人员之间的相关性和项目进度的依赖性，对资源变更保持敏感，适时传达信息，确保合作计划的调整得到各方支持。

最后，**鼓舞力**。如果你是技术领导者，应该具备激励他人的能力。可以通过了解对方的担忧并提供帮助，在他们取得阶段性胜利或克服困难时给予肯定和感谢。提供建设性的意见，让对方在愉快的心境下做出改变。

总结来说，建立个人影响力是为了更好地推进工作，而不是为了凸显自己的重要性。在一个技术团队中，影响力往往与你的贡献紧密相关。如果你的存在能够让别人的工作更顺利，久而久之，伙伴们就会自然地认可你，信服你，并在遇到问题时寻求你的意见。帮助别人成功，实现他们的梦想，你就能具备积极正向的影响力。

欢迎留言分享你对技术人如何建立个人影响力的看法和建议，让我们共同成长。

---

### 管理者不用亲力亲为：关键是什么？

大多数被提拔为技术领导的工程师都具备出色的业务能力和一定的领导力。然而，这些技术能力强悍的工程师刚走上管理岗位时，常常喜欢事事亲力亲为，看谁干活都不放心，恨不得自己把所有的事情都做了。我对此深有体会，因为我就是一个由技术骨干提拔上来的管理者。

在我成为技术管理者之前，我在组里担任研发组长（Tech Lead）的角色。不仅参与所有的设计和讨论，还亲自编写很多核心代码，甚至审查其他人的代码。无论多忙，我都尽力参与所有的代码评审，确保对每一个改动都心中有数。随着业务规模的扩大，我带的项目组人数越来越多，事事亲为变得越来越吃力。晚上和周末的时间几乎全部用来加班，超长的工作时间变成常态。即使这样，我也总有忙不完的事。

好友池建强老师常劝我学会带人和授权，把任务分出轻重缓急，将一些任务分出去让别人做。但我总觉得每件事都很关键，不愿放手。我的老板也常常提醒我，要学会把任务授权给其他人。在这方面，我一直做得不好。一方面，我没有掌握分配任务的技巧，几次任务分出去都出了小问题，最终还是需要自己介入；另一方面，我那时的状态也不对，整个人陷在细节中无法自拔，无法退一步海阔天空，只能紧紧盯住眼前的事，无法看得更高更远，甚至度假时也要处理工作上的事情。

对我个人而言，我忙得疲惫不堪；对团队而言，一旦我停下来，就成了所有人的瓶颈。这个问题在我转成管理者之后不久变得更加突出。一方面，我多了很多管理相关的工作，占用了很多时间；另一方面，团队迅速成长，项目和人都变多了，想要事事亲力亲为再也不可能了。终于有一天，事情突破了临界点，无论我怎么忙，都无法延续之前的管理方式。

当一个人熟悉的“老系统”彻底坍塌时，人们才会改变，尝试构建一套新系统。但是，新系统的建立不是一蹴而就的，我花费了很大的力气才从“亲力亲为”转变为授权和任务分配模式。为什么会这么困难呢？我认为最重要的原因可能与工程师的工作习惯有关：一个技术方案如果自己不参与，就会担心事情不能做好。

这里有两个误区：
1. 事情能不能做好和完全按照你自己的方式做好，是两码事。别人有自己的工作方式，也能把事情做好。
2. 介入和不介入并不是非黑即白的，关键在于用什么方式介入，在哪些地方介入。

既然出发点是把事情做好，如果我们把任务分配出去，别人也一样能把事情做好，这样思考是不是就更容易放手了呢？我们应该把关注点放在如何帮助别人把事情做好上。比如，接受任务的人需要哪些支持和帮助才能很好地完成任务，我们又应该在什么时间点提供这样的帮助。

**作为一个管理者，在授权和分配任务时应注意以下几点：**

1. **明确目标**：让对方知道最终想要达到的结果是什么，对这个任务的期望值是怎样的。比如，在什么时间内完成什么样的任务，你对成功的定义是什么，如果有取舍，哪些是重要的，哪些是次要的，哪些是可以妥协的。如果没有说清楚，很可能会出现认知偏差。当然，前提是对方同意并承诺完成这个目标。

2. **制定计划并保持跟进**：跟进不是指导，而是需要你在对方对某个环节有疑问时，能够随时提供帮助。这种帮助可能是解决方案，也可能是技术方向。当对方对下一步该怎么做没有头绪时，你可以与其探讨，给出建议或线索，确保没有大的障碍阻止他取得关键性进展。

3. **给出反馈**：特别是正面的反馈。当对方做得很好时，要及时给予肯定。当对方处于平台期没有突破时，只要他还在努力，就应该给予适当的鼓励。反馈要尽可能客观，不要在小细节上有太多意见。如果在方向或优先级等问题上偏离了你的预期，要及时交流和纠正，了解对方的想法，找到问题的原因，让项目走上正轨。

回到今天的主题：管理者不用亲力亲为，关键是什么？我认为，关键在于学会授权和任务分配。这个过程需要注意两个重点：第一，我们要有效地把任务分配出去；第二，我们要保证分配出去的任务能够被圆满地完成。无论是自己做还是交给别人做，让事情更快更好地完成永远是第一位的。

很多优秀的工程师最初都是独行侠，单枪匹马完成了很多丰功伟绩，也更习惯独立工作。但一旦他们发现团队协作可以做出更大的成就时，就会从亲力亲为转变为授权模式，帮助别人成功，团队才会获得更大的成功。

今天，我和你讨论了为什么工程师出身的技术领导更容易亲力亲为，如何从亲力亲为模式转变为授权和分配任务模式，以及我们在进行任务分配时应注意哪些方面。最后给你留一个思考题：如果你在分配任务的过程中，对方不认可你设定的目标，或者不同意你对项目成功的定义，你该怎么办？可以在留言中告诉我，我们一起讨论。

---

### 每个工程师都应该了解的：API 的设计和实现

在一个初创公司的成长过程中，作为工程师的你可能会遇到以下情况。有一天，你看到一段代码或一个算法，觉得这些代码不大经得起推敲；于是你使用 `git blame` 命令去寻找代码的主人，结果发现作者是如今已不再写代码的 CTO 或 VP。之后，在一个偶然的机会里，你和他讲起这件事，他会自豪地告诉你：“哦，那时候我们必须在一天之内做出这个产品特性。当时也就我一个程序员吧，一天的时间，这是当时能做出最好的方案了。”说完，他便陷入了对美好时光的怀念。

你也可能听说过这样的故事：有一天你的 CTO 突发奇想，提交了一段代码；大家一看很激动，很多人跑去观摩大神的代码，结果发现问题多多，于是在 PR（Pull Request）上提了一堆评论。CTO 一看有点傻眼了：“几十条评论……现在代码要这么写啊，好麻烦。”于是他就和一位工程师说：“你把评论里的问题解决下，合并到主分支吧”，然后就开开心心地该干嘛干嘛去了。

这两个小故事说明了一个道理：一个公司早期的代码会因为各种历史原因不够完美，但在特定的时间点，这就是当时最优的方案。随着公司的发展，功能不断叠加，代码架构不断优化，系统会经历从简到繁，再由繁到简的迭代过程，代码的改动也会相当巨大，也许有一天你会几乎不认识自己当初的作品了。

API 的设计和实现更是如此。在我们的工作中，很少能见到 API 的设计和实现从最开始就完美无瑕。一套成熟的 API 往往需要通过不断的演化和迭代才能形成。今天我们就聊聊 API 的设计和实现。

**首先，从 API 的签名（Signature）说起。**