---
author: Gabriel Cánepa
category: 技术
comments_data:
- date: '2017-09-24 00:32:54'
  message: 非常不错
  postip: 183.193.119.96
  username: 来自上海的 Firefox 55.0|Windows 10 用户
count:
  commentnum: 1
  favtimes: 14
  likes: 0
  sharetimes: 0
  viewnum: 12664
date: '2015-09-29 10:11:00'
editorchoice: false
excerpt: '简单来说，防火墙就是一个基于一系列预先定义的规则（例如流量包的目的地或来源，流量的类型等）的安全系统，它控制着一个网络中的流入和流出流量。  RHCSA:
  使用 FirewallD 和 Iptables 来控制网络流量  Part 11 在本文中，我们将回顾 firewalld 和 iptables 的基础知识。前者是
  RHEL 7 中的默认动态防火墙守护进程，而后者则是针对 Linux 的传统的防火墙服务，大多数的系统和网络管理员都非常熟悉它，并且在 RHEL 7 中也可以用。
  FirewallD 和 Iptables 的一个比较 在后台， firewalld 和 iptables 服务都通过相同的接口来与内核中的 ne'
fromurl: http://www.tecmint.com/firewalld-vs-iptables-and-control-network-traffic-in-firewall/
id: 6315
islctt: true
largepic: /data/attachment/album/201509/28/231337pjlq2ooljzjlmske.png
permalink: /article-6315-1.html
pic: /data/attachment/album/201509/28/231337pjlq2ooljzjlmske.png.thumb.jpg
related:
- displayorder: 0
  raid: 6300
- displayorder: 0
  raid: 6335
reviewer: ''
selector: ''
summary: '简单来说，防火墙就是一个基于一系列预先定义的规则（例如流量包的目的地或来源，流量的类型等）的安全系统，它控制着一个网络中的流入和流出流量。  RHCSA:
  使用 FirewallD 和 Iptables 来控制网络流量  Part 11 在本文中，我们将回顾 firewalld 和 iptables 的基础知识。前者是
  RHEL 7 中的默认动态防火墙守护进程，而后者则是针对 Linux 的传统的防火墙服务，大多数的系统和网络管理员都非常熟悉它，并且在 RHEL 7 中也可以用。
  FirewallD 和 Iptables 的一个比较 在后台， firewalld 和 iptables 服务都通过相同的接口来与内核中的 ne'
tags:
- RHCSA
thumb: false
title: 'RHCSA 系列（十一）: 使用 firewalld 和 iptables 来控制网络流量'
titlepic: false
translator: FSSlc
updated: '2015-09-29 10:11:00'
---
简单来说，防火墙就是一个基于一系列预先定义的规则（例如流量包的目的地或来源，流量的类型等）的安全系统，它控制着一个网络中的流入和流出流量。
![使用 FirewallD 和 Iptables 来控制网络流量](/data/attachment/album/201509/28/231337pjlq2ooljzjlmske.png)
*RHCSA: 使用 FirewallD 和 Iptables 来控制网络流量 – Part 11*
在本文中，我们将回顾 firewalld 和 iptables 的基础知识。前者是 RHEL 7 中的默认动态防火墙守护进程，而后者则是针对 Linux 的传统的防火墙服务，大多数的系统和网络管理员都非常熟悉它，并且在 RHEL 7 中也可以用。
### FirewallD 和 Iptables 的一个比较
在后台， firewalld 和 iptables 服务都通过相同的接口来与内核中的 netfilter 框架相交流，这不足为奇，即它们都通过 iptables 命令来与 netfilter 交互。然而，与 iptables 服务相反， firewalld 可以在不丢失现有连接的情况下，在正常的系统操作期间更改设定。
在默认情况下， firewalld 应该已经安装在你的 RHEL 系统中了，尽管它可能没有在运行。你可以使用下面的命令来确认（firewall-config 是用户界面配置工具）：
```
# yum info firewalld firewall-config
```
![检查 FirewallD 的信息](/data/attachment/album/201509/28/231340e4z5twia75zobjn5.png)
*检查 FirewallD 的信息*
以及，
```
# systemctl status -l firewalld.service
```
![检查 FirewallD 的状态](/data/attachment/album/201509/28/231341swhg89l96vza9zhv.png)
*检查 FirewallD 的状态*
另一方面， iptables 服务在默认情况下没有被包含在 RHEL 系统中，但可以被安装上。
```
# yum update && yum install iptables-services
```
这两个守护进程都可以使用常规的 systemd 命令来在开机时被启动和开启：
```
# systemctl start firewalld.service | iptables-service.service
# systemctl enable firewalld.service | iptables-service.service
```
另外，请阅读：[管理 Systemd 服务的实用命令](/article-5926-1.html)
至于配置文件， iptables 服务使用 `/etc/sysconfig/iptables` 文件（假如这个软件包在你的系统中没有被安装，则这个文件将不存在）。在一个被用作集群节点的 RHEL 7 机子上，这个文件看起来是这样：
![Iptables 防火墙配置文件](/data/attachment/album/201509/28/231345ef0rqr12bbof1bqz.png)
*Iptables 防火墙配置文件*
而 firewalld 则在两个目录中存储它的配置文件，即 `/usr/lib/firewalld` 和 `/etc/firewalld`：
```
# ls /usr/lib/firewalld /etc/firewalld
```
![FirewallD 的配置文件](/data/attachment/album/201509/28/231348qdam2da000202iwi.png)
*FirewallD 的配置文件*
在这篇文章中后面，我们将进一步查看这些配置文件，在那之后，我们将在这两个地方添加一些规则。现在，是时候提醒你了，你总可以使用下面的命令来找到更多有关这两个工具的信息。
```
# man firewalld.conf
# man firewall-cmd
# man iptables
```
除了这些，记得查看一下当前系列的第一篇 [RHCSA 系列（一）: 回顾基础命令及系统文档](/article-6133-1.html)，在其中我描述了几种渠道来得到安装在你的 RHEL 7 系统上的软件包的信息。
### 使用 Iptables 来控制网络流量
在进一步深入之前，或许你需要参考 Linux 基金会认证工程师（Linux Foundation Certified Engineer,LFCE） 系列中的 [配置 Iptables 防火墙 – Part 8](http://www.tecmint.com/configure-iptables-firewall/) 来复习你脑中有关 iptables 的知识。
#### **例 1：同时允许流入和流出的网络流量**
TCP 端口 80 和 443 是 Apache web 服务器使用的用来处理常规（HTTP）和安全（HTTPS）网络流量的默认端口。你可以像下面这样在 enp0s3 接口上允许流入和流出网络流量通过这两个端口：
```
# iptables -A INPUT -i enp0s3 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
# iptables -A OUTPUT -o enp0s3 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT
# iptables -A INPUT -i enp0s3 -p tcp --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT
# iptables -A OUTPUT -o enp0s3 -p tcp --sport 443 -m state --state ESTABLISHED -j ACCEPT
```
#### **例 2：从某个特定网络中阻挡所有（或某些）流入连接**
或许有时你需要阻挡来自于某个特定网络的所有（或某些）类型的来源流量，比方说 192.168.1.0/24：
```
# iptables -I INPUT -s 192.168.1.0/24 -j DROP