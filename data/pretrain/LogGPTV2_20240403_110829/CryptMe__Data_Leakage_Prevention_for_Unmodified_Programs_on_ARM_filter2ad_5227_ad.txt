23.60
247.95
72.26
574.04
571.32
AES Benchmark. We implemented an AES benchmark based on mbed TLS [2]
library. It computes AES-128 for 500,000 times using diﬀerent numbers of
threads. As AES is a computation-intensive program with small memory foot-
print, Table 2 clearly shows that CryptMe incurs negligible overhead. Both
CryptMe and native Linux complete around 63,000 AES block calculations
per second regardless of the number of computing threads.
Nginx Web Server. We also measured the overhead of CryptMe when serv-
ing large complex programs. Many IoT devices provide their users with a web
interface, through which the users are able to access the service or conﬁgure the
device.
Table 4. Raw HTTP performance measurements (requests per second).
1 KB
2 KB
4 KB
8 KB
16 KB 32 KB 64 KB 128 KB 256 KB 512 KB 1024 KB
Native
655.70 625.64 633.62 604.30 513.94 434.26 310.75 208.74 124.36 71.14
39.20
Encryption 601.97 560.68 580.87 554.98 474.72 403.92 292.52 195.08 121.51 70.18
39.05
Overhead
1.09x
1.12x
1.09x
1.09x
1.08x
1.08x
1.06x
1.07x
1.02x 1.01x
1.00x
Nginx [31] is an open-source high-performance HTTP server and reverse
proxy, as well as an IMAP/POP3 proxy server. We used Nginx version 1.10.1
to run a HTTP web server, and used Apache benchmark [1] to measure the
performance of the systems. The HTML ﬁle is the default 151 bytes welcome
page, and the base line measured with native Linux system is 647.10 requests
396
C. Cao et al.
per second. In Table 3, we present the throughput of CryptMe under diﬀerent
sliding window sizes. In Table 4, we compare the HTTP throughput of CryptMe
under 48-page sliding window size with native Linux system for diﬀerent raw ﬁle
sizes. When the sliding window is 48 pages, comparable performance is observed.
Therefore, we would like to conclude that the overhead introduced by CryptMe
is very acceptable, because of the redundant computing power in such systems.
However, as the sliding window decreases, the overhead becomes non-negligible.
It is clear that frequent page swapping causes the noticeable overhead. In the
following, we present a break-down measurement of additional time consumed
in world switching and page swapping.
Table 5. Break-down measurement of time consumed in each period.
Operation
Context switch
Time (µs)
2.27
Encryption/decryption & copy 326.32
PTE setup
7.01
Break-down Measurement. Based on the above experiment results, CryptMe
is friendly to computation-intensive programs while exhibits ineligible overhead
to memory-intensive programs. For memory-intensive programs, frequent page
swapping is the key factor that inﬂuences the performance. In Table 5, we show
a break-down measurement of the time spent on handling a page fault due
to page swapping. Context switch is the time when completing a getpid()
system call, which is drawn from Fig. 4. Note that this represents the minimum
time for a world switch. Encryption/decryption & copy is the time spent on a
encrypting/decrypting a page and copying it to normal/secure world. Note that
a page swap invokes this operation twice; one for encrypting an old page into
DRAM, and the other for decrypting a cipher-text page into iRAM. Finally, PTE
setup measures the time for installing a page table entry in the secure world.
It can be observed that cryptographic operation remains the dominating factor,
which is the necessary price for the additional protection in memory encryption
in general. However, many IoT devices are designed to be single purpose devices
with limited functionality, therefore often do not require large working sets.
This ﬁxed cost for data encryption can be further reduced with more eﬃcient
hardware implementation of the cryptographic primitive.
7 Related Work
7.1 Memory Encryption
Many solutions on system memory encryption is motivated by the need to pro-
tect sensitive information stored in the memory [30]. With the rapid increase
CryptMe: Data Leakage Prevention on ARM Devices
397
in speed and more sophisticated hardware-supported cryptographic function in
modern processors, there has been recent eﬀorts to realize practical software-
based memory encryption on COTS hardware [8,13,14,18,29]. In particular,
Cryptkeeper [29] and RamCrypt [13] implement ME on x86 platforms on a per-
page basis with conﬁgurable security. Their implementation keeps a small set
of decrypted working pages called sliding window. CryptMe also adopts the
sliding window concept, but the decrypted working set is stored in the on-chip
memory, which is protected from memory attacks [16]. In [14], hypervisor is
used to encrypt kernel and user space code in guest operating systems, and the
decrypted working set is conﬁgured to ﬁt the cache. Bear [18] is a comprehen-
sive ME solution that hides working set in the on-chip memory. However, this
work focuses on a “from scratch” microkernel that does not ﬁt commodity OS.
Sentry encrypts sensitive Android application when the device is locked, and
employs on-chip caches to support background applications [8]. This solution is
not practical for applications at normal state because substantial performance
slowdown is observed. All the aforementioned approach towards full system mem-
ory encryption takes a probabilistic approach that reduces the risk of having
sensitive content stored in the memory. This however leaves a door for the afore-
mentioned software attacks that allow kernel to read the entire address space
of application. Because memory coherence is maintained automatically by the
processor, OS kernel could directly read out the private data in the working set,
regardless they reside in DRAM, on-chip memory or caches. With CryptMe,
this decrypted working set is protected within the processor boundary in the
iRAM against the cold boot attack. The iRAM is further protected by the Trust-
Zone memory separation against memory disclosure attacks due to misused OS
functions.
7.2 TrustZone-Based Solutions
TrustZone is a system wide security extension on ARM processors. Due to its
unique ability to provide isolated execution environment even when the soft-
ware of the system is compromised, TrustZone has been widely adopted in both
academia research project and commercial project [4,15,20,23,32,36]. CaSE [36]
is a system closely related to CryptMe. In CaSE, sensitive workloads are
encrypted and only decrypted during execution completely within the processor
cache in ARM system to address the threat from physical memory disclosure.
However, CaSE has limitation on the size of application binary. CryptMe uti-
lizes the iRAM for storing sensitive data and extends its capacity by employing
a sliding-window algorithm. Therefore, it can support unmodiﬁed binaries of
arbitrary size. TrustShadow [15] resembles our work in that we both oﬄoad the
execution of trusted applications to the secure world. However, TrustShadow
focuses on defeating malicious OSes, while CryptMe focuses on defeating mem-
ory disclosure attacks.
398
C. Cao et al.
8 Limitations and Future Work
Our design is not a full memory encryption solution which encrypts the whole
address space of a process. Encrypted code is a compelling form of protection to
thwart reverse-engineering of proprietary software. Although the current version
of CryptMe does not protect the conﬁdentiality of program code, it is possi-
ble to extend it to encrypt code segment as well. However, we anticipate that
new issues will arises. For example, how to handle shared libraries with non-
SenProcesses is challenging. Moreover, it will inevitably introduce overhead
due to increased working set.
We observed noticeable overhead for micro-benchmarks such as the memory
latency test shown in Fig. 5. The overhead in the CryptMe mainly originates
from page swapping as is shown in Table 5. In the future, we plan to improve
CryptMe through the following two aspects. First, we will seek a better way to
adjust the size of sliding window for individual SenProcesses. The provided
customization allows for personalized conﬁguration to maximum the usage of
the valuable iRAM resource. Second, within a given sliding window, we plan to
ﬁnd a smarter page replacement algorithm to minimize the occurrence of page
swapping.
9 Conclusions
In this paper, we present CryptMe, a practical ME solution for the ARM-based
IoT devices. CryptMe supports unmodiﬁed program working on encrypted
memory, mitigating the threats caused by memory leakages. Sensitive data is
only decrypted in the iRAM of the SoC to protect against physical memory disclo-
sure attacks. The trusted process is oﬄoaded into an isolated execution domain
with TrustZone. Therefore, our solution can also defeat software memory dis-
closure attacks from other processes or even the OS. We have implemented a
CryptMe prototype on a real ARM SoC board. Experiment results show that
CryptMe eﬀectively defeats a wide range of memory disclosure attacks. Fur-
thermore, CryptMe introduces moderate overhead for computation intensive
programs, and negligible overhead for programs with small memory footprints.
CryptMe enables ME for unmodiﬁed programs on the widely deployed ARM
platforms. With small trade-oﬀ on the performance, CryptMe provides its users
with unprecedented protection for private user data.
Acknowledgement. We thank the anonymous reviewers for their valuable comments.
This work was supported by NSF CNS-1422594, NSF CNS-1505664, NSF SBE-1422215,
and ARO W911NF-13-1-0421 (MURI). Neng Gao and Ji Xiang were partially sup-
ported by NSFC (No. U163620068). Jingqiang Lin was partially supported by NSFC
(No. 61772518).
CryptMe: Data Leakage Prevention on ARM Devices
399
References
1. Apache Software Foundation: Apache HTTP server benchmarking tool (2017).
http://httpd.apache.org/docs/2.4/programs/ab.html
2. ARM Holdings: mbed TLS (2017). https://tls.mbed.org/
3. ARM Ltd.: Arm cortex-a57 mpcore processor technical reference manual (2013)
4. Azab, A.M., et al.: Hypervision across worlds: real-time kernel protection from the
arm trustzone secure world. In: ACM CCS (2014)
5. Becher, M., Dornseif, M., Klein, C.: Firewire: all your memory are belong to us.
In: 6th Annual CanSecWest Conference (2005)
6. Chan, E.M., Carlyle, J.C., David, F.M., Farivar, R., Campbell, R.H.: Bootjacker:
compromising computers using forced restarts. In: 15th ACM CCS. ACM (2008)
7. Chow, J., et al.: Understanding data lifetime via whole system simulation. In:
USENIX SEC (2004)
8. Colp, P., et al.: Protecting data on smartphones and tablets from memory attacks.
In: ASPLOS 2015. ACM (2015)
9. CVE Details: The Ultimate Security Vulnerability Datasource (2018). https://
www.cvedetails.com/vendor/33/Linux.html. Accessed 29 Mar 2018
10. FuturePlus System: DDR2 800 bus analysis probe (2006). http://www.futureplus.
com/download/datasheet/fs2334 ds.pdf
11. Garcia-Morchon, O., Kumar, S., Struik, R., Keoh, S., Hummen, R.: Security con-
siderations in the IP-based internet of things (2013)
12. Garﬁnkel, T., Pfaﬀ, B., Chow, J., Rosenblum, M.: Data lifetime is a systems prob-
lem. In: 11th ACM SIGOPS European Workshop (2004)
13. G¨otzfried, J., M¨uller, T., Drescher, G., N¨urnberger, S., Backes, M.: RamCrypt:
kernel-based address space encryption for user-mode processes. In: 11th ACM Asia
CCS. ACM (2016)
14. G¨otzfried, J., et al.: Hypercrypt: hypervisor-based encryption of kernel and user
space. In: ARES 2016 (2016)
15. Guan, L., et al.: Trustshadow: secure execution of unmodiﬁed applications with
arm trustzone. In: ACM MobiSys (2017)
16. Halderman, J.A., et al.: Lest we remember: cold boot attacks on encryption keys.
In: USENIX SEC (2008)
17. Harrison, K., Xu, S.: Protecting cryptographic keys from memory disclosure
attacks. In: IEEE/IFIP DSN (2007)
18. Henson, M., Taylor, S.: Beyond full disk encryption: protection on security-
enhanced commodity processors. In: Jacobson, M., Locasto, M., Mohassel, P.,
Safavi-Naini, R. (eds.) ACNS 2013. LNCS, vol. 7954, pp. 307–321. Springer, Hei-
delberg (2013). https://doi.org/10.1007/978-3-642-38980-1 19
19. Henson, M., Taylor, S.: Memory encryption: a survey of existing techniques. ACM
CSUR (2014)
20. Jang, J., Kong, S., Kim, M., Kim, D., Kang, B.B.: Secret: secure channel between
rich execution environment and trusted execution environment. In: NDSS 2015
(2015)
21. Kleissner, P.: Hibernation ﬁle attack (2010)
22. Kolontsov, V.: Solaris (and others) ftpd core dump bug (1996). http://insecure.
org/sploits/ftpd.pasv.html
23. Li, W., Li, H., Chen, H., Xia, Y.: Adattester: secure online mobile advertisement
attestation using trustzone. In: ACM MobiSys (2015)
400
C. Cao et al.
24. Lie, D.: Architectural support for copy and tamper resistant software. ACM SIG-
PLAN Not. 35, 168–177 (2000)
25. McVoy, L., Staelin, C.: Lmbench: portable tools for performance analysis. In:
USENIX ATC (1996)
26. M¨uller, T., Spreitzenbarth, M., Freiling, F.: FROST: forensic recovery of scrambled
telephones. In: 11th ACNS (2013)
27. National Vulnerability Database: CVE-2011-2707 (2011). http://www.cve.mitre.
org/cgi-bin/cvename.cgi?name=2011-2707
28. National Vulnerability Database: CVE-2005-1264 (2015). https://cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2005-1264
29. Peterson, P.A.: Cryptkeeper: improving security with encrypted RAM. In: IEEE
HST (2010)
30. Provos, N.: Encrypting virtual memory. In: USENIX SEC (2000)
31. Reese, W.: Nginx: the high-performance web server and reverse proxy (2008).
https://nginx.org/
32. Santos, N., Raj, H., Saroiu, S., Wolman, A.: Using ARM trustzone to build a
trusted language runtime for mobile applications. In: ASPLOS 2014. ACM (2014)
33. Stewin, P., Bystrov, I.: Understanding DMA malware. In: Flegel, U., Markatos,
E., Robertson, W. (eds.) DIMVA 2012. LNCS, vol. 7591, pp. 21–41. Springer,
Heidelberg (2013). https://doi.org/10.1007/978-3-642-37300-8 2
34. Suiche, M.: Windows hibernation ﬁle for fun ‘n’ proﬁt. Black-Hat (2008)
35. Wilson, P., et al.: Implementing embedded security on dual-virtual-CPU systems.
IEEE Des. Test Comput. (2007)
36. Zhang, N., Sun, K., Lou, W., Hou, Y.T.: Case: cache-assisted secure execution on
arm processors. In: IEEE S&P (2016)