may be impaired by routing on the Internet. In addition, such an approach
requires a prior learning phase, e.g., through passive TCP handshake analysis,
to facilitate detection of spooﬁng. In the following, we investigate how far the
methodology from Cheng et al. can be extended to ﬁlter out spoofed traﬃc used
in DRDoS attacks. In contrast to the original HCF, this process cannot rely solely
on TCP handshakes from previous connections by the client, as protocols used
in DRDoS attacks, such as NTP or DNS, are connection-less. Simply dropping
all packets from any host without a previous TCP connection would render any
benign use of UDP-based services moot. Therefore, we investigate with what
margin of error TTLs for an alleged sender can be learned by the server to
evaluate the eﬃcacy of TTL-based ﬁltering on the Internet.
3.1 Protocol-Based Probing
The most intuitive way for a server to ascertain a TTL value of a client is to
receive an unspoofed packet from that host. This can be done after a success-
ful TCP handshake, as an established connection can only occur if the alleged
sender actually initiated the connection. Due to its connection-less nature, we
cannot rely on such a process for UDP. Instead, we need to prompt the alleged
sender for an unspoofed packet. To achieve this, we can rely on ICMP, TCP,
or UDP requests to the system in question. The ports we used in our work for
308
M. Backes et al.
TCP and UDP are derived from the most scanned port discussed by Durumeric
et al. [8]. We realize that it might not be feasible to send a plethora of probes
to an end host whenever a packet to a UDP-based service is received, as this
itself would be an ampliﬁcation attack. Regardless, we want to investigate how
diﬀerent protocols and techniques might be leveraged to learn the TTL.
One way of compelling the probed system to send a packet is to use ICMP.
ICMP echo can be used to measure the round trip time of a packet to a given
host. The TTL of the probe target can be extracted from the IP header of an
echo reply. In addition to the echo command, several operating systems also
implement the non-mandated timestamp command. This can be used in the
same fashion to induce a response from the probed system.
Additionally, the probing server can itself try to establish a TCP connection
to the alleged sender. The methodology is independent of the actual application
used underneath, since the TCP handshake is conducted by the operating system
before handing the socket to the underlying application.
In contrast to TCP, where no application data needs to be sent to the probed
host, most UDP-based services require protocol-speciﬁc data to be submitted.
As an example, DNS and NTP servers only react to datagrams which are con-
formant to the respective protocol. On the other hand, the UDP-based chargen
service “simply sends data without regard to the input” [20]. Therefore, we
send protocol-conformant packets to DNS and NTP ports, and random data to
chargen.
3.2
Interpreting Responses
In any of the cases described above, we may receive a positive or negative
response. In the following, we discuss these types of responses and indicate how
they can be used to extract the TTL from probed systems.
Positive Responses. When using ICMP, an echo or timestamp reply suﬃces to
extract the TTL value from the encapsulating IP packet. For TCP, if a service
listens on the probed port, the operating system will follow the three-way hand-
shake process and respond with a SYN/ACK packet. In the case of UDP, the
process diﬀers slightly: when a service is listening on the probed port and the
incoming packet adheres to the speciﬁcation of that service, it sends a response
back to the requesting system. Analogously to ICMP, the TTL value can be
extracted from TCP and UDP responses by simply examining the IP header.
Negative Responses. In addition to responses which indicate that the host is
up or a service is listening on the probed port, we can also leverage negative
responses or error messages to learn the TTL. For example, in cases where a
TCP port is not open, the host system may respond with a packet which has
the RST ﬂag set. Assuming that the packet is usually generated by the probed
system (we discuss exceptions to this rule in Sect. 3.4), we can extract the TTL
value in the same fashion used for positive responses. For UDP, we leverage
ICMP Port Unreachable replies.
On the Feasibility of TTL-Based Filtering for DRDoS Mitigation
309
Next to these protocol-speciﬁc errors, we may also receive a message indicat-
ing that the host is not reachable. For example, the last router on the path can
issue an ICMP Host Unreachable message. In this case, given the assumption
that only the last router will send such a message, we can use the TTL from the
incoming packet and decrease it by one (since the original sender would have had
one more hop). ICMP also features a more generic Destination Unreachable mes-
sage; this, however, can be sent by any router on the path and therefore cannot
be used to conclusively calculate the TTL value. Next to these, we may receive
ICMP Communication Administratively Prohibited messages. Such a message
can either be sent by a router or the system itself when a packet is rejected by
the ﬁrewall.
3.3 Horizontal Probing
A probed host may not answer, e.g., because it is ﬁrewalled and drops any
incoming packets. In these cases, we may still gather valuable information on
the path to the host by probing neighboring hosts. A neighbor in this case is a
host which is located within the same subnet as the target. Although assuming
that each subnet consists of exactly 256 IPs is not correct, this measure can
still provide partial insight into the route and give a close estimate of the actual
TTL value. Therefore, we probe neighbors by changing the last octet of the IP
address ±1, and use previous knowledge from hosts within the same /24 subnet,
as this is the smallest network section generally advertised and accepted via
BGP [18].
3.4 Caveats of Active Probing
There are several scenarios which can induce errors in probes. Typically, pri-
vate customers receive a router for their dial-up account, which uses Network
Address Translation (NAT ) to allow multiple LAN clients access to a single
Internet connection. Unless these routers are conﬁgured to forward packets to a
machine behind the NAT, any response to the previously mentioned probes will
be generated by the router. As the router adds an additional hop (and hence
decreases the TTL by one) on the way from the NAT client to the server, the
TTL values will mismatch in such a case.
For negative responses, additional artefacts may skew the results. Speciﬁcally,
TCP resets or ICMP error packets may be generated by a ﬁrewall located before
the intended probe target. In such a case, the ﬁrewall itself must spoof the probed
IP to send these packets to ensure that the packet is attributed correctly on the
system which initiated the connection. Hence, we may assume that negative
responses are indeed generated by the probed system. Since we cannot learn the
number of hops between the ﬁrewall and probed system, using negative responses
can yield false results. We discuss the number of false results in Sect. 4.
As outlined before, the initial TTL value depends on the operating system of
the sending host. Considering an example in which a Windows client is located
behind a NAT router, which is running a Linux system with an initial TTL value
310
M. Backes et al.
of 255. Even though a packet originating from the Windows machine will only
have one additional hop on its way to the probing server, the TTL value received
by the probing system will greatly diﬀer depending on whether the Windows or
Linux host responded to the probing request. To accommodate for this and for
horizontal probing, we normalize all TTL values to values between 0 and 63, i.e.,
T T L = T T L%64. As the maximum TTL of 255 is not divisible by 64, we ﬁrst
increment TTL values above 128 by one to correct this discrepancy.
4 Probing Analysis
To evaluate how well active probing could be used in the wild to enable the
use of HCF, we set up two systems. First, we used a regular NTP server not
susceptible to DRDoS to attract benign clients. Second, we set up a honeypot
system running a vulnerable version of NTP to attract spooﬁng attackers. In the
following, we describe both data sets, discussing for what fraction of hosts we
could learn any TTL value, and comparing this to the TTL values of incoming
packets. Although we are using NTP servers for our evaluation, it is out of
convenience of getting both spoofed and non-spoofed clients for comparison.
In contrast, for protocols like chargen, getting benign traﬃc would have been
signiﬁcantly harder. We end this section with a discussion on the implications
of the results of our analysis.
4.1 Benign Traﬃc
To capture benign traﬃc, we set up an NTP server that does not implement
monlist feature at all, and is therefore not susceptible to ampliﬁcation vectors.
To attract NTP clients, we joined the NTP pool project. Note that the term
client refers to its role in NTP, i.e., such a host could either be an end user’s
computer or a server synchronizing its clock with us. Within hours, the server was
added to the public pool and started to receive NTP requests. We analyzed the
incoming traﬃc for patterns of suspicious behavior (especially dreaded monlist
requests). Our analysis showed that such requests were only issued in small
numbers by scanners (e.g., operated by research groups). As we did not respond
to such ampliﬁcation requests and did not notice any suspicious activity, it is
highly unlikely that an attacker would choose our server for his ampliﬁcation
attack. Hence, we deem this data set to consist exclusively of unspoofed traﬃc.
In total, we gathered data for 48 h, in which we received packets from 543,514
distinct IP addresses. In a ﬁrst step, we probed each of these hosts immediately
after their ﬁrst contact using the diﬀerent types of probes outlined in Sect. 3.1.
In doing so, we could extract TTL values for 316,012 (58.1 %) for probed sys-
tems. The most successful type of probe was ICMP echo, which yielded a result
for 257,694 or 47.4 % of the hosts. In comparison, the most successful TCP-
based, positive response were SYN/ACKs from TCP port 443 (HTTPS), which
accounted for a mere 31,966 (5.9 %) of the hosts. For any UDP-based probes,
we only received negligible amounts of positive responses. Among the negative
On the Feasibility of TTL-Based Filtering for DRDoS Mitigation
311
Fig. 1. Deviation diﬀerences for selected probe types
responses, ICMP Communication Prohibited for TCP port 4899 (Radmin) was
the most frequent message (113,058 or 20,8 %).
To ﬁnd out how accurate these results actually are, we compared the nor-
malized TTL values to the ones from the incoming traﬃc. As stated before,
we assume that the traﬃc directed to the NTP server is indeed generated by
the alleged senders, i.e., the ground truth value for each sending host can be
extracted from these incoming packets. Initially, we consider all probes to a spe-
ciﬁc host for our analysis. In cases where the measured TTL values diﬀer between
the probe types, we select the minimum value of any test. The intuition of this
is straightforward: whenever a ﬁrewall or router answers instead of the probed
system, the number of hops between them and our probing server is smaller.
Hence, by choosing the minimum TTL value, we ensure that we measure the
longest path between us and the host responding to the probe. Therefore, if the
probed system answers to one probe whereas all others are responded to by the
ﬁrewall, we still measure the accurate value for the system in question.
The results of applying this methodology on the data set are shown in Table 1.
We observe that, with respect to the total number of responding systems, 26.1 %
of the measured TTLs match the ground truth. Moreover, 92.2 % of the values
are within a threshold of ±1, and almost 97 % within ±2. In the following, we
analyze the results for speciﬁc tests in more detail, and discuss potential reasons
for the observed deviations.
Table 1. Accuracy of measured TTLs (direct probes only)
82,629 26.1 % 26.1 %
Deviation Amount Fraction Cumulated fraction
±0
±1
±2
±3
More
208,891 66.1 % 92.2 %
4.6 % 96.9 %
1.5 % 98.4 %
14,623
4,684
5,185
1.6 % 100 %
312
M. Backes et al.
The deviation between the measured and actual values is shown in Fig. 1 for
ICMP echo, Communication Prohibited to TCP port 4899, and SYN/ACK for
TCP port 443. We can observe that for ICMP echo, 12.8 % of measured TTLs
were correct, whereas an additional 78.8 % were oﬀ-by-one, i.e., 91.6 % of the
measured TTLs were within a threshold of ±1. For Communication Prohibited
on port 4899, we observe that 96.8 % of the values are within ±1, whereas 91 %
are oﬀ-by-one. This appears natural to the scenarios we discussed: ICMP echo
requests will often be answered by routers and ﬁrewalls due to network address
translation. Although SYN on TCP port 443 was only responsive on 5.9 % of the
hosts, the results are quite interesting. We observe that for 42.2 % of the hosts
which responded to such a probe, the TTL value could be correctly measured.
In addition, another 45.9 % were oﬀ-by-one, resulting in 88 % of the values being
within a threshold of ±1. We argue that this is caused by nature of TCP, i.e., we
only receive a SYN/ACK in case a service is listening on the probed system. This
can either occur if the connection directly reached the probed system, i.e., it is