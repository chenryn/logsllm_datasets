title:SSQoE: Measuring Video QoE from the Server-Side at a Global Multi-tenant
CDN
author:Anant Shah and
Juan Bran and
Kyriakos Zarifis and
Harkeerat Bedi
SSQoE: Measuring Video QoE
from the Server-Side at a Global
Multi-tenant CDN
Anant Shah(B), Juan Bran, Kyriakos Zariﬁs, and Harkeerat Bedi
CDN Engineering, Edgecast, 13031 W Jeﬀerson Blvd., Los Angeles, CA 90094, USA
{anant.shah,juan.bran,kyriakos.zarifis,harkeerat.bedi}@edgecast.com
Abstract. Over the past decade, video streaming on the Internet has
become the primary source of our media consumption. Billions of users
stream online video on multiple devices with an increasing expectation
that video will be delivered at high quality without any rebuﬀering or
other events that aﬀect their Quality of Experience (QoE). Video stream-
ing platforms leverage Content Delivery Networks (CDNs) to achieve this
at scale. However, there is a gap in how the quality of video streams is
monitored. Current solutions rely on client-side beacons that are issued
actively by video players. While such approaches may be feasible for
streaming platforms that deploy their own CDN, they are less applicable
for third-party CDNs with multiple tenants and diverse video players.
In this paper, we present a characterization of video workload from a
global multi-tenant CDN and develop SSQoE: a methodology deployed
on the server side which estimates rebuﬀering experienced by video
clients using passive measurements. Using this approach, we calculate a
QoE score which represents the health of a video stream across multiple
consumers. We present our ﬁndings using this QoE score for various sce-
narios and compare it to traditional server and network monitoring met-
rics. We also demonstrate the QoE score’s eﬃcacy during large streaming
events such as the 2020 Superbowl LIV. We show that this server-side
QoE estimation methodology is able to track video performance at an AS
or user agent level and can easily pinpoint regional issues at the CDN,
making it an attractive solution to be explored by researchers and other
CDNs.
1 Introduction
Streaming video constitutes a large portion of traﬃc on the Internet. Content
Delivery Networks (CDNs) deliver tens of Terabits per second of video for large
video streaming platforms that users rely on for news, entertainment, and com-
munication. Live streaming services have further gained popularity with the rise
of over-the-top (OTT) services.
The increasing volume of video traﬃc and the user expectations for high
quality necessitate visibility into client-perceived performance of video stream-
ing. A key performance metric for video Quality of Experience (QoE) is the
c(cid:2) The Author(s), under exclusive license to Springer Nature Switzerland AG 2022
O. Hohlfeld et al. (Eds.): PAM 2022, LNCS 13210, pp. 600–625, 2022.
https://doi.org/10.1007/978-3-030-98785-5_27
SSQoE: Measuring Video QoE from the Server-Side
601
rebuﬀering experienced by video players. Rebuﬀering can be caused by a variety
of reasons including problems at the client, at the ISP, or at the CDN layer. Con-
tent providers that employ their own video players usually extend the players
to generate reports about performance metrics directly from the client. Alter-
natively, third-party services can be utilized to report such data from a set of
clients. However, in many cases where commercial third-party CDNs are used
for video delivery, the CDN operators may not have visibility into such client
reports. Therefore, CDN operators typically use more indirect server and net-
work performance metrics to identify performance degradation of video streams
that they deliver. Such metrics may not provide a clear picture of client-perceived
performance, and make it harder to evaluate if a problem is impacting clients
enough to warrant traﬃc engineering actions like choosing alternative peering
links or sending a client request to a diﬀerent location.
To address the gap in visibility and the challenges of client-side beacon based
monitoring, we characterize the video workload at a multi-tenant CDN that
spans over 160 Points of Presence (PoPs) distributed globally, making it one of
the largest egress networks in the world [10], and we design and deploy a server-
side QoE monitoring tool called SSQoE on the CDN in order to estimate client
video QoE based on server logs. In particular, our work makes the following
contributions:
– We identify and characterize QoE metrics that can be tracked using only
server-side logs and analyze their implications on video performance. These
include the timestamp when a video request is received at the CDN, gaps in
requests, changes in bitrate, and time taken to serve a request.
– We propose a simple, scalable, and intuitive methodology called SSQoE,
which uses these metrics that are available from CDN access logs to esti-
mate rebuﬀering on the client side. We use other relevant QoE indicators to
calculate a QoE score that can be used to track video performance agnostic
to the type of video player, device, and type of video traﬃc.
– We show the value of our methodology by comparing it with commonly used
client beacon based reporting. We demonstrate use cases from our deploy-
ment, like tracking regional per-PoP anomalies from the 2020 Superbowl event
where the CDN served the live video stream to millions of clients.
– We demonstrate the shortcomings of the server and network based monitoring
metrics by comparing their eﬃciency in representing client-perceived perfor-
mance to our methodology during incidents like transit provider connectivity
failures or cache ﬁll errors.
This paper is structured as follows. We describe the current video distribution
pipelines commonly used by video providers and motivate our work by elaborat-
ing on the challenges faced by multi-tenant CDNs to monitor video performance
in Sect. 2. In Sect. 3, we present insights on the video workload delivered by the
CDN, and we describe relevant performance indicators. In Sect. 4 we present
our QoE score calculation methodology. We validate our methodology using a
testbed and production traﬃc in Sect. 5 and show its value using several examples
in Sect. 6. We discuss the limitations, related work, and conclude in Sects. 7, 8, 9
respectively.
602
A. Shah et al.
Fig. 1. Live video streaming pipeline. Each step can be a cause of increased latency.
Client player reports performance metrics back to content provider or a 3rd party
beaconing service using their SDKs. These reports are analyzed to evaluate CDN per-
formance from client’s perspective.
2 Background
Video streaming workﬂows are complex, especially while delivering a live stream.
As with any complex system, each involved component can fail and lead to
degradation in end-to-end performance. In the case of video streaming, such
degradations translate to reduced QoE for the video consumer. In this section,
we describe various pieces of a video pipeline starting from data capture to
distribution, point out gaps in visibility, and motivate the need for server-side
video monitoring.
To deliver scale and achieve robustness, many video streaming providers use
multiple CDNs to deliver content to the clients. Third-party beaconing plat-
forms [2] have become a popular mechanism by which content providers monitor
CDN performance to get insights on client experience and use beacon data to
steer traﬃc across multiple CDNs.
Components in Video Streaming
Figure 1 illustrates the components of a live video streaming pipeline. An on-
premise camera captures the video and the raw feed is sent to the video encoder.
Video encoders can be on-premise installations or cloud based services. The
video encoder gathers a suﬃcient video chunk (usually less than 2 to 5 s) before
it can generate an encoded video segment that will be distributed. Next, the
system generates a manifest ﬁle, which describes the set of segments that a
video player will need to request for the given video stream. The video encoder
encodes the segments into multiple bitrates denoting diﬀerent quality levels.
Each unique time range of video may exist as multiple segments in diﬀerent
bitrates. The video encoder then pushes the segments to a CDN origin server or
the CDN can pull them periodically. The client starts the video streaming on
their device and requests the video asset. Each client is identiﬁed as a unique
session. First, the manifest is delivered to the client. Based on current network
conditions, the player chooses an appropriate bitrate from the manifest and
SSQoE: Measuring Video QoE from the Server-Side
603
requests the corresponding video segment. These segments, which are available
from the CDN origin server, are cached at the CDN edge when a client requests
them. The client request traverses through the client ISP link to its backbone
and then to the CDN peering point where it ﬁnally gets served by the CDN.
Each component in the pipeline adds to the latency and is a potential source
of video performance degradation. It is possible that the video ingest at the
video encoder is delayed. In such cases most clients will start lagging in their
live stream. Next, there can be delay when ingesting the video segments from
the encoder to the origin server or at the CDN cache due to degradation in
backbone or transit provider connectivity. Delays can also occur at the CDN
PoP due to overloaded servers or congestion at the peering link. Congestion
is also common at the client ISP, in the middle or the last mile. Finally, the
load on the client device, e.g. available RAM, CPU, can also play a role in
how the video player performs. Given all these potential sources of delay and
performance degradation, the process of pinpointing an exact the root cause for
QoE impairments becomes challenging.
QoE Metrics in the Wild
Existing video performance monitoring techniques have been focused on analyz-
ing client-side metrics. The video player instruments a beacon that periodically
reports how the player is performing. Those beacons are collected and analyzed
to extract QoE insights. Some video providers own the application or video player
and therefore can implement their own data collection strategy, which the CDN
may not have the visibility into. There are also third-party vendors such as [2]
that are commonly used for such beaconing. Key metrics that are monitored by
the video providers are:
Startup-delays: This measures delays experienced when starting a stream.
Rebuﬀering ratio: This is the most commonly monitored metric [2,7,18,21].
It represents the ratio of the amount of time a video player was stalled waiting
for new segments to be downloaded over the total video duration. For example,
if a client played a 60-second video but in the middle of the playback it ran
out of buﬀered segments and it had to wait for 2 s before resuming, then the
rebuﬀering ratio is 2/60 ˜= 3.3%.
Bitrate: This denotes the number of bits used to encode a given segment of
video. Higher bitrate represents better video quality. Video providers who use
the CDN service to distribute the content expect the bitrate to be high.
Video playback failure: This represents cases where video player had trouble
playing the content it received. This can be a result of expired token, digital rights
management (DRM) issues, etc. which are used to secure the video segment so
that only approved clients, such as paying subscribers, can view the content.
Motivation for Server-side Video QoE Monitoring
Commercial CDNs deliver a mixed workload of video traﬃc for many live
streams. Each video provider (CDN customer) can have a completely diﬀer-
ent set of conﬁgurations for encoding and caching the video segments. Their
performance goals could also be diﬀerent, e.g. some might value lower latency
604
A. Shah et al.
over higher bitrate/quality. Furthermore, popular live streams can have millions
of concurrent users requesting the same video asset from the CDN.
Client-side metrics captured via beacons provide a clear view per-session of
how the client experiences the video. However, these methods rely on some con-
trol over the client. They are by design made for the video provider to consume
and not for the CDN provider. Content providers that use their own CDN and
video client player (i.e. both ends of the connection) can easily implement this
beaconing and use it for CDN performance monitoring. In contrast, commercial
CDN operators face the challenge of analyzing the performance of video streams
without complete visibility. The root cause of a performance issue can very well
be outside of the CDN stack, such as at the encoder or at the client ISP. This
large disparity in type of workloads for diﬀerent CDN customers and type of con-
tent, dependency on video player metrics, and lack of complete visibility makes
the previously studied client-side approaches less viable for a commercial CDN.
3 Characterizing the CDN Video Workload
In this section we analyze a large CDN video workload and extract insights that
serve as guiding principles for designing a server-side QoE monitoring strategy.
For this analysis, we use 24 hours (one weekday) of CDN access logs for a large
live video streaming provider that powers multiple live sports, news, and enter-
tainment services. The dataset spans more than 10 million HTTP requests.
Unique Session Tracking
In order to extract aggregate performance information for a stream that is deliv-
ered through the CDN, we ﬁrst need to understand performance of each session
separately. For that purpose, there needs to be a unique identiﬁer that char-
acterizes a particular client stream. Some video streaming providers maintain
a unique session ID per client session, which can make session tracking easier.
However, SSQoE does not rely on such a session ID. In particular, we notice
that in the majority of cases a unique client ID can be inferred by using the
client IP and the device User Agent. In our dataset, 99% of the session IDs
map to a unique {client ip, user agent} tuple. In the reverse direction, the same
{client ip, user agent} tuple maps to the same session ID for about 80% of the
cases. This may be due to the presence of large carrier-grade NATs [24] which
can lead to aggregation of multiple clients into one session. However, based on
our analysis of the CDN access logs, this noise is minimal and it is still possible
to infer per-session characteristics using the hash of client IP and User Agent
tuple.
Takeaway: A session or client ID is important for measuring per-session QoE
from the server side. In the absence of such an identiﬁer in the CDN logs, a hash
of the client IP and User Agent is an adequate alternative.
Total Duration of Video Sessions
Video streams delivered by multi CDNs can vary signiﬁcantly in terms of dura-
tion. Additionally, the complexity of user viewing patterns is high, especially for
SSQoE: Measuring Video QoE from the Server-Side
605
Fig. 2. Session durations. Most sessions are short lived.
live streams where clients can join or leave a stream at anytime. This can add
noise when trying to measuring the QoE at scale for millions of users. In Fig. 2
we show the number of sessions ordered by playback duration over the course
of one day. As shown in the ﬁgure, most sessions are short-lived (note the log
scale on the Y-axis). This highlights the variety and scale of our dataset, but
also reveals a key observation that needs to be taken into consideration while
designing server-side QoE measurements: QoE decisions need to be made near-
real time over a short time duration, because most sessions are short lived (in
the order of minutes).
Takeaway: Due to the short playback duration and high churn of clients in live
streams, tracking the performance of a few sessions over a long period of time
will provide little value; instead, tracking a large number of session over a shorter
time window is more feasible.
Time Taken to Serve a Request
Next we try to understand which metrics can provide insights on the performance
of a session. A metric that impacts video delivery is the amount of time it takes
the server to deliver a response. For a given video stream, the time it takes to
deliver the same video segment remains fairly constant, and ﬂuctuations in the
ﬂow completion time are a good indicator of performance change.
Tracking the time taken to serve a request when grouping the streams by
diﬀerent dimensions or characteristics also reveals insights about misbehaving
sections of the traﬃc. For example, in Fig. 3 we show the distribution of time
taken to serve a request grouped by top User Agents of a video provider. For this
distribution we look at requests for video segments betweeen 8-10MB to keep the
comparison fair across all requests and user agents. The User Agent names are
anonymized. Here, we observed the CDN taking several seconds longer to serve
the request to one particular User Agent (UA-1). This User Agent belonged to
the application of the video provider on an older generation of a large Smart TV
606
A. Shah et al.
Fig. 3. CDF of time taken to serve
a request. User Agents show diﬀer-
ent performance proﬁles for requests of
similar-sized video segments.
Fig. 4. KDE interarrival times for ses-
sions. During normal operation, the
inter-arrival time between requests is
short.
manufacturer. When we compared the performance of this User Agent in the
client-side QoE monitoring systems, it also accounted for top rebuﬀerring events
for that provider on the CDN.
The time taken to download a video segment is not only a function of client
player behavior but also of server performance (high CPU utilization times can
lead to higher response time), network congestion, and size of the video segment.