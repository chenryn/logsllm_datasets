title:CACTI: Captcha Avoidance via Client-side TEE Integration
author:Yoshimichi Nakatsuka and
Ercan Ozturk and
Andrew Paverd and
Gene Tsudik
CACTI: Captcha Avoidance via Client-side 
TEE Integration
Yoshimichi Nakatsuka and Ercan Ozturk, University of California, Irvine; 
Andrew Paverd, Microsoft Research; Gene Tsudik, University of California, Irvine
https://www.usenix.org/conference/usenixsecurity21/presentation/nakatsuka
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.CACTI: Captcha Avoidance via Client-side TEE Integration
Yoshimichi Nakatsuka∗
UC Irvine
PI:EMAIL
Ercan Ozturk∗
UC Irvine
Andrew Paverd†
Microsoft Research
Gene Tsudik
UC Irvine
PI:EMAIL
PI:EMAIL
PI:EMAIL
Abstract
Preventing abuse of web services by bots is an increasingly
important problem, as abusive activities grow in both vol-
ume and variety. CAPTCHAs are the most common way for
thwarting bot activities. However, they are often ineffective
against bots and frustrating for humans. In addition, some
recent CAPTCHA techniques diminish user privacy. Mean-
while, client-side Trusted Execution Environments (TEEs) are
becoming increasingly widespread (notably, ARM TrustZone
and Intel SGX), allowing establishment of trust in a small part
(trust anchor or TCB) of client-side hardware. This prompts
the question: can a TEE help reduce (or remove entirely) user
burden of solving CAPTCHAs?
In this paper, we design CACTI: CAPTCHA Avoidance via
Client-side TEE Integration. Using client-side TEEs, CACTI
allows legitimate clients to generate unforgeable rate-proofs
demonstrating how frequently they have performed speciﬁc
actions. These rate-proofs can be sent to web servers in lieu
of solving CAPTCHAs. CACTI provides strong client pri-
vacy guarantees, since the information is only sent to the
visited website and authenticated using a group signature
scheme. Our evaluations show that overall latency of gener-
ating and verifying a CACTI rate-proof is less than 0.25 sec,
while CACTI’s bandwidth overhead is over 98% lower than
that of current CAPTCHA systems.
1 Introduction
In the past two decades, as Web use became almost universal
and abuse of Web services grew dramatically, there has been
an increasing trend (and real need) to use security tools that
help prevent abuse by automated means, i.e., so-called bots.
The most popular mechanism is CAPTCHAs: Completely
Automated Public Turing test to tell Computers and Humans
Apart [58]. A CAPTCHA is essentially a puzzle, such as an
∗The ﬁrst and second authors contributed equally to this work.
†Work partially done while visiting the University of California, Irvine,
as a US-UK Fulbright Cyber Security Scholar.
object classiﬁcation task (Figure 1a) or distorted text recogni-
tion (see Figure 1b), that aims to confound (or at least slow
down) a bot, while being easily1 solvable by a human user.
CAPTCHAs are often used to protect sensitive actions, such
as creating a new account or submitting a web form.
Although primarily intended to distinguish humans from
bots, it has been shown that CAPTCHAs are not very effec-
tive at this task [50]. Many CAPTCHAs can be solved by
algorithms (e.g., image recognition software) or outsourced
to human-driven CAPTCHA-farms2 to be solved on behalf
of bots. Nevertheless, CAPTCHAs are still widely used to
increase the adversary’s costs (in terms of time and/or money)
and reduce the rate at which bots can perform sensitive ac-
tions. For example, computer vision algorithms are compu-
tationally expensive, and outsourcing to CAPTCHA-farms
costs money and takes time.
From the users’ perspective, CAPTCHAs are generally
unloved (if not outright hated), since they represent a barrier
and an annoyance (a.k.a. Denial-of-Service) for legitimate
users. Another major issue is that most CAPTCHAs are vi-
sual in nature, requiring sufﬁcient ambient light and screen
resolution, as well as good eyesight. Much less popular audio
CAPTCHAs are notoriously poor, and require a quiet setting,
decent-quality audio output facilities, as well as good hearing.
More recently, the reCAPTCHA approach has become pop-
ular. It aims to reduce user burden by having users click a
checkbox (Figure 1c), while performing behavioral analysis
of the user’s browser interactions. Acknowledging that even
this creates friction for users, the latest version (“invisible re-
CAPTCHA”) does not require any user interaction. However,
the reCAPTCHA approach is potentially detrimental to user
privacy because it requires maintaining long-term state, e.g.,
in the form of Google-owned cookies. Cloudﬂare recently
decided to move away from reCAPTCHA due to privacy
concerns and changes in Google’s business model [14].
Notably, all current CAPTCHA-like techniques are server-
1Exactly what it means to be “easily” solvable is subject to some debate.
2A CAPTCHA farm is usually sweatshop-like operation, where employ-
ees solve CAPTCHAs for a living.
USENIX Association
30th USENIX Security Symposium    2561
side, i.e., they do not rely on any security features of, or make
any trust assumptions about, the client platform. The purely
server-side nature of CAPTCHAs was reasonable when client-
side hardware security features were not widely available.
However, this is rapidly changing with the increasing popu-
larity of Trusted Execution Environments (TEEs) on a variety
of computing platforms, e.g., TPM and Intel SGX for desk-
tops/laptops and ARM TrustZone for smartphones and even
smaller devices. Thus, it is now realistic to consider abuse
prevention methods that include client-side components. For
example, if a TEE has a trusted path to some form of user inter-
face, such as a mouse, keyboard, or touchscreen, this trusted
User Interface (UI) could securely conﬁrm user presence. Al-
though this feature is still unavailable on most platforms, it
is emerging through features like Android’s Protected Conﬁr-
mation [33]. This approach’s main advantages are minimized
user burden (e.g., just a mouse click) and increased security,
since it would be impossible for software to forge this action.
Admittedly however, this approach can be defeated by ad-
versarial hardware e.g., a programmable USB peripheral that
pretends to be a mouse or keyboard.
However, since the majority of consumer devices do not cur-
rently have a trusted UI, it would be highly desirable to reduce
the need for CAPTCHAs using only existing TEE functional-
ity. As discussed above, the main goal of modern CAPTCHAs
is to increase adversarial costs and reduce the rate at which
they can perform sensitive actions. Therefore, if legitimate
users had a way to prove that their rate of performing sensitive
actions is below some threshold, a website could decide to
allow these users to proceed without solving a CAPTCHA. If
a user can not provide such a proof, the website could simply
fall back to using CAPTCHAs. Though this would not fully
prevent bots, it would not give them any advantage compared
to the current arrangement of using CAPTCHAs.
Motivated by the above discussion, this paper presents
CACTI, a ﬂexible mechanism for allowing legitimate users to
prove to websites that they are not acting in an abusive manner.
By leveraging widespread and increasing availability of client-
side TEEs, CACTI allows users to produce rate-proofs, which
can be presented to websites in lieu of solving CAPTCHAs.
A rate-proof is a simple assertion that:
1. The rate at which a user has performed some action is
below a certain threshold, and
2. The user’s time-based counter for this action has been
incremented.
When serving a webpage, the server selects a threshold value
and sends it to the client. If the client can produce a rate-proof
for the given threshold, the server allows the action to proceed
without showing a CAPTCHA. Otherwise, the server presents
a CAPTCHA, as before. In essence, CACTI can be seen as a
type of “express checkout” for legitimate users.
One of the guiding principles and goals of CACTI is user
privacy – it reveals only the minimum amount of information
and sends this directly to the visited website. Another prin-
ciple is that the mechanism should not mandate any speciﬁc
security policy for websites. Websites can deﬁne their own
security policies e.g., by specifying thresholds for rate-proofs.
Finally, CACTI should be conﬁgurable to operate without any
user interaction, in order to make it accessible to all users,
including those with sight or hearing disabilities.
Although chieﬂy motivated by the shortcomings of
CAPTCHAs, we believe that the general approach of client-
side (TEE-based) rate-proofs, can also be used in other com-
mon web scenarios. For example, news websites could allow
users to read a limited number of articles for free per month,
without relying on client side cookies (which can be cleared)
or forcing users to log-in (which is detrimental to privacy). On-
line petition websites could check that users have not signed
multiple times, without requiring users to provide their email
addresses, which is once again, detrimental to privacy. We
therefore believe that our TEE-based rate-proof concept is a
versatile and useful web security primitive.
Anticipated contributions of this work are:
1. We introduce the concept of a rate-proof, a versatile web
security primitive that allows legitimate users to securely
prove that their rate of performing sensitive actions falls
below a server-deﬁned threshold.
2. We use the rate-proof as the basis for a concrete client-
server protocol that allows legitimate users to present
rate-proofs in lieu of solving CAPTCHAs.
3. We provide a proof-of-concept implementation of
CACTI, over Intel SGX, realized as a Google Chrome
browser extension.
4. We present a comprehensive evaluation of security, la-
tency, and deployability of CACTI.
Organization: Section 2 provides background information,
and Section 3 deﬁnes our threat model and security require-
ments. Next, Section 4 presents our overall design and high-
lights the main challenges in realizing this. Then, Section 5
explains our proof of concept implementation and discusses
how CACTI overcomes the design challenges, followed by
Section 6 which presents our evaluation of the security, per-
formance, and deployability of CACTI. Section 7 discusses
further optimizations and deployment considerations, and Sec-
tion 8 summarizes related work.
2 Background
2.1 Trusted Execution Environments
A Trusted Execution Environment (TEE) is a primitive that
protects conﬁdentiality and integrity of security-sensitive code
and data from untrusted code. A typical TEE provides the
following features:
Isolated execution. The principal function of a TEE is to
provide an execution environment that is isolated from all
other software on the platform, including privileged system
software, such as the OS, hypervisor, or BIOS. Speciﬁcally,
2562    30th USENIX Security Symposium
USENIX Association
the sealed data with an older version.Mitigating this requires
at least some amount of rollback-protected storage, typically
realized as a hardware monotonic counter. When sealing,
the counter can be incremented and the latest value is in-
cluded in the sealed data. When unsealing, the TEE checks
that the included value matches the current hardware counter
value. Since hardware counters themselves require rollback-
protected storage, TEEs typically only have a small number
of counters.
One prominent TEE example is Intel Software Guard Ex-
tensions (SGX) [24,43,48]. SGX is a hardware-enforced TEE
available on Intel CPUs from the Skylake microarchitecture
onwards. SGX allows applications to create isolated environ-
ments, called enclaves, running in the application’s virtual ad-
dress space. A special region in physical memory is reserved
for enclaves, called the Enclave Page Cache (EPC). The EPC
can hold up to 128MB of code and data, shared between all
running enclaves. When enclave data leaves the CPU bound-
ary, it is transparently encrypted and integrity-protected by
CPU’s Memory Encryption Engine (MEE) to defend against
physical bus snooping/tampering attacks. Since enclaves run
in the application’s virtual address space, enclave code can
access all the memory of its host application, even that outside
the enclave. Enclave code can only be called via predeﬁned
function calls, called ECALLs.
Every enclave has an enclave identity (MRENCLAVE), which
is a cryptographic hash of the code that has been loaded into
the enclave during initialization, and various other conﬁgu-
ration details. Each enclave binary must be signed by the
developer, and the hash of the developer’s public key is stored
as the enclave’s signer identity (MRSIGNER).
SGX provides two types of attestation: local and remote.
Local attestation allows two enclaves running on the same
platform to conﬁrm each other’s identity and communicate se-
curely, even though this communication goes via the untrusted
OS. SGX uses local attestation to build remote attestation.
Speciﬁcally, an application enclave performs local attestation
with an Intel-provided quoting enclave, which holds a group
private key provisioned by Intel. The quoting enclave veri-
ﬁes the local attestation and creates a signed quote, which
includes the application enclave’s and signer’s identities, as
well as user-deﬁned data provided by the application enclave.
This quote is sent to the remote veriﬁer, which, in turn, uses
the Intel Attestation Service (IAS) to verify it. Since the at-
testation uses a group signature scheme, the veriﬁer cannot
determine whether two quotes were generated by the same
platform.
In SGX, data can be sealed in one of two modes, based
on: (1) the enclave’s identity, such that only the same type of
enclave can unseal it, or (2) the signer identity, such that any
enclave signed by the same developer (running on the same
platform) can unseal it. SGX provides hardware monotonic
counters and allows each enclave to use up to 256 counters at
a time.
(a) Image-based object recognition reCAPTCHA [18]
(b) Image-based text recognition reCAPTCHA [18]
(c) Behavior-based reCAPTCHA [18]
Figure 1: Examples of CAPTCHAs
data inside the TEE can only be accessed by the code run-
ning inside the TEE. The code inside the TEE provides well-
deﬁned entry points (e.g., call gates), which are enforced by
the TEE.
Remote attestation. Remote attestation provides a remote
party with strong assurances about the TEE and the code run-
ning therein. Speciﬁcally, the TEE (i.e., the prover) creates a
cryptographic assertion that: (1) demonstrates that it is a gen-
uine TEE, and (2) unambiguously describes the code running
in the TEE. The remote party (i.e., the veriﬁer) can use this
to decide whether to trust the TEE, and then to bootstrap a
secure communication channel with the TEE.
Data sealing. Data sealing allows the code running inside
the TEE to encrypt data such that it can be securely stored
outside the TEE. This is typically implemented by providing
the TEE with a symmetric sealing key, which can be used to
encrypt/decrypt the data. In current TEEs, sealing keys are
platform-speciﬁc, meaning that data can only be unsealed on
the same platform on which it was sealed.
Hardware monotonic counters. A well known attack
against sealed data is rollback, where the attacker replaces
USENIX Association
30th USENIX Security Symposium    2563