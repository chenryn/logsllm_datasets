title:The Nepenthes Platform: An Efficient Approach to Collect Malware
author:Paul Baecher and
Markus Koetter and
Thorsten Holz and
Maximillian Dornseif and
Felix C. Freiling
The Nepenthes Platform: An Eﬃcient Approach
to Collect Malware
Paul Baecher1, Markus Koetter1, Thorsten Holz2, Maximillian Dornseif2,
and Felix Freiling2
1 Nepenthes Development Team
PI:EMAIL
2 University of Mannheim
Laboratory for Dependable Distributed Systems
{holz, dornseif, freiling}@informatik.uni-mannheim.de
Abstract. Up to now, there is little empirically backed quantitative and
qualitative knowledge about self-replicating malware publicly available.
This hampers research in these topics because many counter-strategies
against malware, e.g., network- and host-based intrusion detection sys-
tems, need hard empirical data to take full eﬀect.
We present the nepenthes platform, a framework for large-scale col-
lection of information on self-replicating malware in the wild. The basic
principle of nepenthes is to emulate only the vulnerable parts of a ser-
vice. This leads to an eﬃcient and eﬀective solution that oﬀers many
advantages compared to other honeypot-based solutions. Furthermore,
nepenthes oﬀers a ﬂexible deployment solution, leading to even better
scalability. Using the nepenthes platform we and several other organiza-
tions were able to greatly broaden the empirical basis of data available
about self-replicating malware and provide thousands of samples of pre-
viously unknown malware to vendors of host-based IDS/anti-virus sys-
tems. This greatly improves the detection rate of this kind of threat.
Keywords: Honeypots, Intrusion Detection Systems, Malware.
1 Introduction
Automated Malware Collection. Software artifacts that serve malicious purposes
are usually termed as malware. Particularly menacing is malware that spreads
automatically over the network from machine to machine by exploiting known
or unknown vulnerabilities. Such malware is not only a constant threat to the
integrity of individual computers on the Internet. In the form of botnets for
example that can bring down almost any server through distributed denial of
service, the combined power of many compromised machines is a constant danger
even to uninfected sites.
We describe here an approach to collect malware. Why should this be done?
There are two main reasons, both following the motto “know your enemy”:
First of all, investigating individual pieces of malware allows better defences
against these and similar artifacts. For example, intrusion detection and anti-
virus systems can reﬁne their list of signatures against which ﬁles and network
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 165–184, 2006.
c(cid:2) Springer-Verlag Berlin Heidelberg 2006
166
P. Baecher et al.
traﬃc are matched. In general, the better and more we know about what malware
is currently spreading in the wild, the better can our defenses be. The second
reason why we should collect malware is that, if we do it in a large scale, we
can generate statistics to learn more about attack patterns, attack trends, and
attack rates of malicious network traﬃc today, based on live and authentic data.
Collecting malware in the wild and analyzing it is not an easy task. In prac-
tice, much malware is collected and analyzed by detailed forensic examinations
of infected machines. The actual malware needs to be dissected from the compro-
mised machine by hand. With the increasing birth rate of new malware this can
only be done for a small proportion of system compromises. Also, sophisticated
worms and viruses spread so fast today that hand-controlled human intervention
is almost always too late. In both cases we need a very high degree of automation
to handle these issues.
Honeypot technology. The main tool to collect malware in an automated fashion
today are so-called honeypots. A honeypot is an information system resource
whose value lies in unauthorized or illicit use of that resource. The idea behind
this methodology is to lure in attackers such as automated malware and then
study them in detail. Honeypots have proven to be a very eﬀective tool in learning
more about Internet crime like credit card fraud [10] or botnets [6]. The literature
distinguishes two general types of honeypots:
– Low-interaction honeypots oﬀer limited services to the attacker. They em-
ulate services or operating systems and the level of interaction varies with
the implementation. The risk tends to be very low. In addition, deploying
and maintaining these honeypots tends to be easy. A popular example of this
kind of honeypots is honeyd [14]. With the help of low-interaction honeypots,
it is possible to learn more about attack patterns and attacker behavior.
– High-interaction honeypots oﬀer the attacker a real system to interact with.
More risk is involved when deploying a high-interaction honeypot, e.g., spe-
cial provisions are done to prevent attacks against system that are not in-
volved in the setup. They are normally more complex to setup and maintain.
The most common setup for this kind of honeypots is a GenIII honeynet [3].
Low-interaction honeypots entail less risks than high-interaction ones. In ad-
dition, deploying and maintaining low-interaction honeypots tends to be easy,
at least much easier than running high-interaction honeypots, since less special
provisions have to be done to prevent attacks against the system that runs the
honeypot software. However, high-interaction honeypots still allow us to study
attackers in more detail and learn more about the actual proceeding of attack-
ers than low-interaction honeypots. The diﬀerences between low-interaction and
high-interaction honeypots manifest a tradeoﬀ: high-interaction honeypots are
expressive, i.e., they oﬀer full system functionality which is in general not sup-
ported by low-interaction honeypots. However, low-interaction honeypots are
much more scalable, i.e., it is much easier and less resource-intensive to deploy
them in a large-scale.
The Nepenthes Platform: An Eﬃcient Approach to Collect Malware
167
Contribution. In this paper we introduce nepenthes, a new type of honeypot that
inherits the scalability of low-interaction honeypots but at the same time oﬀers
a high degree of expressiveness. Nepenthes is not a honeypot per se but rather
a platform to deploy honeypot modules (called vulnerability modules). This is
the key to increased expressiveness: Vulnerability modules oﬀer a highly ﬂexible
way to conﬁgure nepenthes into a honeypot for many diﬀerent types of vulner-
abilities. In classical terms, nepenthes still realizes a low-interaction honeypot
since it emulates the vulnerable services. However, as we argue in this paper,
emulation and the knowledge about the expected attacker behavior is the key
to automation. Furthermore, the ﬂexibility of nepenthes allows to deploy unique
features not available in high-interaction honeypots. For example, it is possible
to emulate the vulnerabilities of diﬀerent operating systems and computer archi-
tectures on a single machine and during a single attack (i.e., an emulation can
mimic the generic parts of a network conversation and depending on the network
traﬃc decide whether it wants to be a Linux or a Win32 machine for example).
This improves the scalability. We report on experiments showing that nepenthes
is also scalable by emulating more than 16.000 diﬀerent IP addresses on a sin-
gle physical machine. Furthermore, through its ﬂexible reporting mechanisms,
nepenthes can be deployed in a hierarchical manner increasing scalability even
further. Automation is further supported through the modularity of nepenthes,
which oﬀers the possibility to add specialized analysis and reporting modules.
With the help of the nepenthes platform, we are able to collect malware that
is currently spreading in the wild on a large-scale. Since we focus on malware
that is currently spreading, we can carry out a vulnerability assessment based on
live data. Furthermore, the collected malware samples enable us to examine the
eﬀectiveness of current anti-virus engines. Furthermore, since we collect malware
on a large-scale, we can also detect new trends or attack patterns. We will present
more results in Section 3.
In summary, nepenthes is a unique novel combination of expressiveness, scal-
ability and ﬂexibility in honeypot-based research.
Related work. Large-scale measurements of malicious network traﬃc have been
the focus of previous research. With the help of approaches like the network
telescope [11] or darknets [4] it is possible to observe large parts of the Internet
and monitor malicious activities. In contrast to nepenthes, these approaches
passively collect information about the network status and can infere further
information from it, e.g., inferring the amount of Distributed Denial-of-Service
attacks [12]. By not responding to the packets, it is not possible to learn more
about full attacks. Slightly more expressive approaches like the Internet Motion
Sensor [2] diﬀerentiate services by replying to a TCP SYN paket with TCP
SYN-ACK pakets. However, their expressiveness is also limited and only with
further extensions it is possible to also learn more about spreading malware.
honeyd [14] is a prominent example of a low-interaction honeypot. This dae-
mon creates virtual hosts on a network. It simulates the TCP/IP stack of arbi-
trary operating systems and can be conﬁgured to run arbitrary services. These
services are generally small scripts that emulate real services, and oﬀer only
168
P. Baecher et al.
a limited expressiveness. Honeyd can simulate arbitrary network topologies in-
cluding dedicated routes and routers, and can be conﬁgured to feign latency
and packet loss. In summary, this tool can emulate complex networks by simu-
lating diﬀerent hosts with any kind of services and help to learn about attacks
from a high-level point of view. In contrast to nepenthes, honeyd does not oﬀer
as much expressiveness since the reply capabilities of honeyd are limited from
a network point of view. Nepenthes can be used as a subsystem for honeyd,
however. This extends honeyd and enables a way to combine both approaches:
nepenthes acts then as a component of honeyd and is capable of dealing with
automated downloading of malware.
The Collapsar platform [9] is a virtual-machine-based architecture for network
attack detention. It allows to host and manage several high-interaction virtual
honeypots in a local dedicated network. Malicious traﬃc is redirected from other
networks (decentralized honeypot presence) to this central network which hosts
all honeypots (centralized honeypot management). This enables a way to build
a honeyfarm. Note that the idea of a honeyfarm is not tied to the notion of a
high-interaction honeypot: It is also possible to deploy nepenthes as a honey-
farm system by redirecting traﬃc from remote locations to a central nepenthes
server.
Internet Sink (iSink) [23] is a system that passively monitors network traf-
ﬁc and is also able to actively respond to incoming connection requests. The
design is stateless and therefore the expressiveness of the responses is limited.
Similarly, HoneyTank [19] is a system that implements stateless responders to
network probes. This allows to collect information about malicious activties to
a limited amount. Statelessness implies that the expressiveness is limited. In
contrast to these systems, nepenthes implements a ﬁnite state machine to em-
ulate vulnerabilities. This allows us to collect more detailed information about
an attack.
Closest to our work is the Potemkin virtual honeyfarm by Vrable et al. [20].
Potemkin exploits virtual machines, aggressive memory sharing, and late bind-
ing of resources to emulate more than 64,000 high-interaction honeypots using
ten physical servers. This approach is promising, but has currently several draw-
backs compared to nepenthes: Firstly, each honeypot within Potemkin has to
be a ﬁxed system in a ﬁxed conﬁguration. In contrast to this, the vulnerability
modules of nepenthes allow greater ﬂexibility. As mentioned above, nepenthes
can react for example on exploitation attempts against Windows 2000 and Win-
dows XP, even regardless of service pack. It would even be possible to emulate
on a single nepenthes honeypot vulnerabilities for diﬀerent operating systems
and even diﬀerent processor architectures. Secondly, the scalability of nepenthes
is at least as good as the scalability of Potemkin. Thirdly, there are currently
only preliminary results for the scalability of Potemkin. In [20], the authors give
only results for a representative 10 minutes period. Since the implementation of
Potemkin is not publicly available, we can not verify these results. In contrast
to this, nepenthes runs stable for weeks and the source code is available under
the GNU General Public License.
The Nepenthes Platform: An Eﬃcient Approach to Collect Malware
169
Roadmap. This paper is outlined as follows: Section 2 presents the nepenthes
platform in detail and in Section 3 we show the results of our work, especially
focusing on the eﬀectiveness of this approach. We give an overview of future
work in Section 4 and conclude the paper in Section 5.
2 The Nepenthes Platform
In this section we introduce the nepenthes platform in detail. We show how the
concept of low-interaction honeypots can be extended to eﬀectively develop a
method to collect malware. In addition, this platform can be used to learn more
about attack patterns. Moreover, we present a technique to use this platform in
a distributed way, similar to the concepts introduced by Collapsar [9].
The main idea behind nepenthes is emulation of vulnerable services. Cur-
rently, there are two main concepts in this area: honeyd scripts simply emulate
the necessary parts of a service to fool automated tools or very low-skilled at-
tackers. This allows a large-scale deployment with thousands of low-interaction
honeypots in parallel. But this approach has some limits: with honeyd it is not
possible to emulate more complex protocols, e.g., a full emulation of FTP data
channels is not possible. In contrast to this, high-interaction GenIII honeypots
use a real system and thus do not have to emulate a service. The drawback of this
approach is the poor scalability. Deploying several thousand of these honeypots
is not possible due to limitations in maintenance and hardware requirements.
Virtual approaches like Potemkin [20] are in an early stage of development and
it is currently not clear how they will perform in real-world scenarios, although
preliminary results look very promising.
The gap between these two approaches can be ﬁlled with the help of the
nepenthes platform. It allows to deploy several thousands of honeypots in parallel