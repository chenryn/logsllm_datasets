3.2 Location for Distributed Monitors
Ingress scan monitors on a local network may need to be
put on several routers instead of only on the border router
— the border router may not know the usage of all IP ad-
dresses of this local network. In addition, since worms might
choose diﬀerent destination addresses by using diﬀerent pref-
erences, e.g., non-uniform scanning, we need to use multiple
address blocks with diﬀerent sizes and characteristics to en-
sure proper coverage.
For egress scan monitors, worms on diﬀerent infected com-
puters will exhibit diﬀerent behaviors. For example, the
Slammer’s scan rate is constrained by an infected computer’s
bandwidth [19]. Therefore, we need to set up multiple egress
ﬁlters to record the scan behaviors of many infected hosts
at diﬀerent locations and in diﬀerent network environments.
In this way, the monitoring system could obtain a compre-
hensive view of the behaviors of a worm.
4. DATA COLLECTION AND BIAS
CORRECTION
After setting up the monitoring system, we need to deter-
mine what kind of data should be collected. The main task
for an egress scan monitor is to determine the behaviors of
a worm, such as the worm’s average scan rate and scan dis-
tribution. Denote η as the average worm scan rate, which
is the average number of scans sent out by an infected host
per monitoring interval ∆.
The ingress scan monitors record two types of data: the
number of scans they receive during the t-th monitoring in-
terval, t = 1, 2,··· and the IP addresses of infected hosts
that have sent scans to the monitors by the time t∆.
If all monitors send observation data to the MWC every
monitoring interval, the MWC can obtain the following ob-
servation data at each discrete time epoch t, t = 1, 2,··· :
(1). The worm’s scan distribution, e.g., uniform scan or
scan with address preference,
(2). The worm’s average scan rate η,
(3). The total number of scans monitored in a monitoring
interval from time (t − 1)∆ to t∆, denoted by Zt,
(4). The number of infected hosts observed by time t∆,
denoted by Ct.
In this paper, we primarily focus on worms that uniformly
scan the Internet. Let p denote the probability that a worm
scan is monitored by the monitoring system. If the ingress
scan monitors cover m IP addresses, then a worm scan has
the probability p = m/232 to hit the monitors. We assume
that in the discrete-time model all changes happen right
before the discrete time epoch t, then we have
E[Zt] = ηpIt−1
(3)
4.1 Correction of Biased Observation Ct
Each worm scan has a small probability p of being ob-
served by the monitoring system, thus an infected host will
send out many scans before one of them is observed by the
ingress scan monitors (like a Bernoulli trial with a small suc-
cess probability). Therefore, the number of infected hosts
monitored by time t∆, Ct, is not proportional to It. This
bias has been mentioned in [5] and [20], but never been
corrected. In the following, we present an eﬀective way to
obtain an accurate estimate for the number of infected hosts
It based on Ct and η.
In the real world, diﬀerent infected hosts of a worm have
diﬀerent scan rates. To derive the bias correction formula,
let us ﬁrst assume that all infected hosts have the same scan
rate η (we will show the eﬀect of removing this assumption
in the following simulation).
In a monitoring interval ∆,
a worm sends out η scans on average, thus the monitoring
system has the probability 1− (1− p)η to detect at least one
scan from an infected host in a monitoring interval.
At the time (t− 1)∆, the monitoring system has observed
Ct−1 infected hosts among the overall infected ones It−1.
During the next monitoring interval from (t − 1)∆ to t∆,
every host of those not yet observed ones, It−1 − Ct−1, has
the probability 1 − (1 − p)η to be observed. Suppose in
the discrete-time model, all changes happen right before the
discrete time epoch t, then the average number of infected
hosts monitored by time t∆ conditioned on Ct−1 is
E[Ct|Ct−1] = Ct−1 + (It−1 − Ct−1)[1 − (1 − p)
η
].
(4)
Removing the conditioning on Ct−1 yields
E[Ct] = E[Ct−1] + (It−1 − E[Ct−1])[1 − (1 − p)
η
].
(5)
Then we can derive the formula for It as:
It =
E[Ct+1] − (1 − p)ηE[Ct]
1 − (1 − p)η
.
(6)
Since E[Ct] is unknown in one incident of a worm’s prop-
agation, we replace E[Ct] by Ct and derive the estimate as
ˆIt =
Ct+1 − (1 − p)ηCt
1 − (1 − p)η
.
(7)
Now we analyze how the statistical observation error of
Ct aﬀects the estimated value of It. Without considering
non-worm noise, suppose the observation data Ct is
Ct = E[Ct] + wt
(8)
where the statistical observation error wt is a white noise
with variance R. Substituting (8) into (7) yields
ˆIt = It + µt,
where the error µt is
µt =
wt+1 − (1 − p)ηwt
1 − (1 − p)η
.
(9)
(10)
Since E[µt] = 0, the estimated value ˆIt is unbiased (under
the assumption that all infected hosts have the same scan
rate η). The variance of the error of ˆIt is
V ar[µt] = E[µ2
t ] =
1 + (1 − p)2η
[1 − (1 − p)η]2
R
(11)
The equation above shows that V ar[µt] is always larger
than R, which means the statistical error of observation Ct
is ampliﬁed by the bias correction formula. In addition, if
the ingress scan monitors cover smaller size of IP space, p
would decrease, then (11) shows that the estimate ˆIt would
be noisier. For this reason, if we want to get an accurate
estimate ˆIt through bias correction, the monitoring system
must cover enough IP space.
We simulate Code Red propagation to check the validity
of the bias correction formula (7). In the simulation, N =
360, 000. The monitoring system covers 217 IP addresses
(equal to two Class B networks). The monitoring interval
∆ is set to be one minute; the average worm scan rate is
η = 358 per minute. Because diﬀerent infected hosts have
diﬀerent scan rates, we assume each host has a scan rate x
that is predetermined by the normal distribution N (η, σ2)
where σ = 100 in the simulation (x is bounded by x ≥ 1.
We will explain how we choose these parameters in Section
6). The simulation result is shown in Fig. 3.
Fig. 3 shows that the observed number of infected hosts,
Ct, deviates substantially from the real value It. After the
bias correction by using (7), the estimated ˆIt matches It well
in the simulation before the worm enters slow ﬁnish phase (
ˆIt deviates a little from It in the slow ﬁnish phase). Equa-
tion (10) shows that the estimated value should be unbiased
because in deriving the bias correction formula we have as-
sumed that all hosts have the same scan rate η, which is not
the case in this simulation. In our simulation, some hosts
have very small scan rate; these hosts will take much longer
time to hit the monitors than other hosts. Thus in the slow
ﬁnish phase, many unobserved infected hosts are hosts with
very low scan rate. Therefore, the bias correction formula
has some error due to the decreasing of the average scan rate
for those unobserved infected hosts. In fact, we run another
x 105
3.5
3
2.5
s
t
s
o
h
Infected hosts I
t
Observed infected C
t
Estimated I
 after 
t
bias correction     
2
d
e
t
c
e
n
f
1.5
i
f
o
#
1
0.5
0
100
200
300
400
Time t (minute)
500
600
700
Figure 3: Estimate It based on the biased observa-
tion data Ct (Monitoring 217 IP space)
s
t
s
o
h
d
e
t
c
e
n
f
i
f
o
#
x 105
4
3.5
3
2.5
2
1.5
1
0.5
0
Infected hosts I
t
Observed infected C
t
Estimated I
 after 
t
bias correction     
100
200
300
400
Time t (minute)
500
600
700
Figure 4: Estimate It based on the biased observa-
tion data Ct (Monitoring 214 IP space)
simulation by letting all hosts having the same scan rate η
(i.e., let σ = 0); then the ˆIt after bias correction matches
well with It for the whole period of a worm’s propagation.
Fig. 4 shows the simulation results if the monitors only
cover 214 IP addresses. The estimate ˆIt after the bias cor-
rection is very noisy because of the error ampliﬁcation eﬀect
described by (11).
5. EARLY WARNING AND ESTIMATION
OF WORM VIRULENCE
In this section, we propose estimation methods based on
recursive ﬁltering algorithms (e.g., Kalman ﬁlters [1],) for
stochastic dynamic systems.
At the MWC, we recursively estimate the parameters β,
N , and α based on observation data at each monitoring
interval (these three parameters have the relationship α =
βN ). In the following, we will ﬁrst provide a Kalman ﬁlter
type algorithm to estimate parameters α and β.
Let y1, y2,··· , yt, be measurement data used by the Kalman
ﬁlter algorithm. Suppose the observations have one moni-
toring interval delay:
yt = δIt−1 + wt
(12)
where wt is the observation error. δ is a constant ratio: if
we use Zt as yt, then δ = ηp as shown in (3); if we use ˆIt−1
derived from Ct by the bias correction (7), then δ = 1.
5.1 Estimation Based on Kalman Filter
From (12), we have
It−1 = yt/δ − wt/δ.
(13)
Substituting (13) into the worm model (2) yields an equa-
tion describing the relationship between yt and the worm’s
parameters:
yt = (1 + α)yt−1 − β
δ
y2
t−1 + νt,
(14)
where the noise νt is
t−1 − 2yt−1wt−1)/δ.
νt = wt − (1 + α)wt−1 − β(w2
A recursive least square algorithm for α and β can be
cast into a standard Kalman ﬁlter format [1]. Let ˆαt and ˆβt
denote the estimated value of α and β at time t∆, respec-
tively. Deﬁne the system state vector as Xt =
(15)
1 + α−β/δ
. If
(cid:1)
(cid:2)
we denote Ht = [ yt−1
(cid:3)
by
y2
t−1 ], then the system is described
Xt = Xt−1
yt = HtXt + νt
(16)
(17)
The Kalman ﬁlter to estimate the system state Xt is
y2
Ht = [ yt−1
t−1 ]
Kt = Pt−1H τ
t + Rν )
Pt = (I − KtHt)Pt−1
ˆXt = ˆXt−1 + Kt(yt − Ht ˆXt−1)
t /(HtPt−1H τ
where Rν is the variance of noise νt and can be set to 1.
From the experiments, we ﬁnd that the value of Rν is not
important.
νt in (15) is a correlated noise. The Kalman ﬁlter (17) can
be extended to consider such correlated noise to derive unbi-
ased estimates of α and β in theory. However, if we use the
unbiased ﬁlter, we will have more parameters to estimate,
then the new ﬁlter will converge slower than the proposed
ﬁlter (17). Our experiments also conﬁrm this conjecture. In
this paper the primary objective is to derive the rough esti-
mate of α as quickly as possible. Therefore, it is better to
use the simple Kalman ﬁlter (17) for worm early detection.
If we use Zt as the measurement yt in the Kalman ﬁlter
but do not know δ (e.g., if we do not have data from egress
scan monitors), we still can estimate the infection rate α by
letting δ = 1. The Kalman ﬁlter (17) does not depend on
δ in estimating α; the value of δ only aﬀects the estimated
value of β.
5.2 Estimation of the Vulnerable Population
The parameter β in model (2) is on the order of 1/N . Thus
in the Kalman ﬁlter above, the two elements in the state Xt
diﬀer in the order of N . For this reason, the Kalman ﬁlter
performs poorly in estimating the small value β. Conse-
quently, the estimation of N by using ˆN = ˆα/ ˆβ is not good.
We present an eﬀective way to estimate the population
N based on η and the estimate α from the Kalman ﬁlter
above. A uniformly scanning worm sends out on average η
scans per monitoring interval; each scan has the probability
N/232 to hit a host in the population under consideration.
Hence, at the beginning when most hosts in the population
are vulnerable, a worm can infect, on average, ηN/232 hosts
per monitoring interval (the probability of two scans sent
out by a single infected host hitting the same target is neg-
ligible). From the deﬁnition of infection rate α, we have
α = ηN/232. Therefore, the population N is
N =
232α
η
(18)
where the average worm scan rate η can be obtained directly
from egress scan monitors in the monitoring system. We can
use this equation to estimate N along with the Kalman ﬁlter
in estimating α. In this way, the estimation of N can have
similar convergence properties to that of the estimation of
α from the Kalman ﬁlter.
5.3 Overview of the Steps to Detect a Worm
The MWC collects and aggregates reports of worm scans
from all distributed monitors in real-time. For each TCP or
UDP port, the MWC has an alarm threshold for monitored
illegitimated scan traﬃc Zt. The observed number of scans
Zt, which contains non-worm noises, is below this threshold
at most time when there is no global spreading worm.
If
the scan traﬃc is over the alarm threshold for several con-
secutive monitoring intervals, e.g., Zt is over the threshold
for three consecutive times, the Kalman ﬁlter will be acti-
vated. Then the MWC will begin to record Ct and calculate
the average worm scan rate η from the reports of egress
scan monitors. Because Ct is a cumulative observation data
that could cumulate all non-worm noise, the MWC begins
to record data Ct only after the Kalman ﬁlter is activated.
The Kalman ﬁlter can either use Ct or Zt to estimate all the
parameters of the worm at the time t∆ (t = 1, 2, 3,··· ). For
accuracy, the MWC can also use two ﬁlters based on Ct and
Zt respectively in order to cross check to verify the results.
The recursive estimation will continue until the estimated
value of α shows a trend:
if the estimate ˆα stabilizes and
oscillates slightly around a positive constant value, we have
detected the presence of a worm; if the estimate ˆα does not
stabilize in a long time, or it stabilizes and oscillates around
zero, we believe the surge of illegitimated traﬃc is caused
by non-worm noise.
6. SIMULATION EXPERIMENTS
6.1 Simulation Settings
We simulate both Code Red on July 19th, 2001 [7] and the
SQL Slammer on January 25th, 2003 [19]. First, we explain
how we choose the simulation parameters.
In the case of
Code Red, more than 359, 000 Code Red infected hosts were
observed on July 19th, 2001 by CAIDA [17]. Thus in our
simulation we set the Code Red vulnerable population N =
360, 000. Staniford et al.
[24] used a diﬀerent format but
the same epidemic model as (1) to model Code Red, where
their model’s parameter K has K = βN = α [27]. They
determined that K = 1.8 for the time scale of one hour.