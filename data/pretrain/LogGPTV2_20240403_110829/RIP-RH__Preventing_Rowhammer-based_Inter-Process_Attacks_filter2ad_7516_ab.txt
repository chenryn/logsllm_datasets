isolation policy, and the forking behavior of such processes, which
the owner of the process can choose prior to launching a critical
process.
The second component II represents the run-time for critical
processes. It handles the meta-data and book-keeping, e.g., for
running processes, physical page ownership, and memory zones
on the system. It further delegates all allocation requests to the
physical page allocator of the OS.
The main component is our DRAM-aware physical page allocator
III , which integrates with the buddy allocator of Linux. It enhances
its operation by embedding the physical-to-DRAM mapping and
dynamically translating the location of memory in physical address
space to physical locations in DRAM.
Lastly, RIP-RH comes with a set of pre-defined default isolation
policies IV that mitigate rowhammer-based inter-process attacks
through co-located and adjacent memory pages. This also ensures
that any two critical processes cannot interfere with each other. We
discuss shared memory handling in Section 8.2.
4.2 Physically Isolating Processes
In principle, isolation between two physical pages in DRAM is
ensured if one of the following conditions is met: the two pages
reside in different modules, ranks, or banks. If two pages belong
to the same bank, they can influence each other if their physical
proximity allows for electromagnetic coupling effects between the
charges of their memory cells. As Kim et al. observed in their
original study [14], this affects consecutive rows, i.e., rows that
are placed directly next to each other within a bank. However,
because of the physical-to-DRAM mapping the distance between
pages in neighboring rows within one bank can be very high in
the physical address space, as pages are distributed across different
banks.
For this reason, our isolation of dynamic memory must translate
physical addresses of pages into the corresponding rank, bank, and
row number, and perform neighborhood checks with respect to
the underlying DRAM structures. To this end, RIP-RH incorporates
(parts of) this mapping to make the physical page allocator aware
of the DRAM-structure. While the physical-to-DRAM mapping is
publicly documented for some architectures, this is not always the
case. Yet, for the most prominent architectures (x86 and ARM), the
mapping function has been reverse engineered previously by the
related work [22, 35].4
4.3 Challenges
Realizing physical isolation for user-space processes comes with
a number of difficult challenges, such as (1) supporting a poten-
tially large number of processes, (2) mapping process memory and
allocation requests to physical pages, (3) a strategy for avoiding
fragmentation and over-allocation, while (4) minimizing run-time
overhead and latency. In the following we briefly explain each of
these challenges and how RIP-RH tackles them on a high level. We
provide a detailed explanation of our prototype in the next section.
4.3.1 Large Number of Processes. While in theory there can be
any number of processes per system, this number is limited in
practice. For instance, on Linux the default maximum number of
processes is 32767 [13]. Further, if the running processes consume
more memory than available the system will start swapping out
memory pages to disk. If disk space runs low, the kernel has no
choice but to start killing processes. Since not all running processes
might be security sensitive, or require the physical DRAM isolation,
RIP-RH enforces its isolation upon request. This means that the
owner of the process must notify the OS that the process should
3For sake of simplicity we assume the OS to be the most privileged software component
in the system. However, in virtualized system the Domain Manager needs to be
replicated in the Hypervisor.
4For special use cases, e.g., embedded programming, physical-to-DRAM-aware mem-
ory allocation might give additional performance, which could be an incentive for
manufacturers to provide this information to the public.
DRAM Bank #0001RIP-RHDomain ManagerUser A: normalstart criticalUser B: criticalisolation policyinheritance...IIIIIICoreMMUUser AUser BCoreUser BUser A0100RIP-RHDRAM-Aware Page Allocator012Physical-to-DRAMMapping0100ChannelRankBankIVSession 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand564be isolated. Our domain manager provides several interfaces for
creating and managing such critical processes.
4.3.2 Attributing and Mapping Allocation Requests. To isolate criti-
cal processes, RIP-RH has to track allocation requests in the physical
page allocator. The usual workflow for such allocations is as fol-
lows: a process creates a virtual memory mapping and subsequently
accesses the mapping. This results in a page fault, that is handled by
the OS, which delegates the page fault to the physical page alloca-
tor. We modify the OS to pass the process identifier along with the
allocation request and also store it in the meta data of the allocated
physical page. This enables the allocator to perform domain checks
for each individual allocation request dynamically.
Fragmentation and Over-allocation. Any memory partition-
4.3.3
ing scheme that aims to support an isolation in physical DRAM
will inevitably cause some memory overhead, as the isolation re-
quires buffer rows above and below the allocated memory. A typical
size of a row, e.g., in DDR3 memory, is 8K, and hence, a row in a
bank contains two physical memory pages. Hence, the buffer space
consists of two pages on the boundary of a memory domain. To
further minimize the memory overhead and avoid fragmentation,
RIP-RH dynamically checks for pages that are physically adjacent to
memory of non-critical processes and prevents allocation to those
regions.5
4.3.4 Minimizing Run-Time Overhead. To minimize the overhead
RIP-RH leverages the design of the physical page allocator, which
is optimized for performance. Our additional security checks are
integrated into the existing architecture of the allocation algorithm,
which maintains separate freelists for different allocation sizes
(called order). If an allocation for a particular order cannot be ful-
filled the algorithm skips to the next higher order and splits the
block of pages into smaller chunks, which are then assigned to the
requesting process.
5 IMPLEMENTATION
In this section we describe our prototype implementation of RIP-
RH, which is a patch to the Linux kernel version 4.10, in detail.
The patch consists of 586 lines of code with changes in 13 files. We
compile and install our custom kernel on top of an Ubuntu 16.10
installation, using a standard configuration. We further developed
a custom system call wrapper to automatically launch new isolated
processes in user space.
5.1 RIP-RH Domain Manager
The first component of our implementation is the domain manager,
which allows a user to launch critical processes. For this, we ex-
tended the kernel interface by adding a new system call definition.
Our new system call will invoke the __do_fork_critical
function, which starts a new critical process in the kernel. We fur-
ther added several flags to the process descriptor in Linux (called
task struct), which our system call sets accordingly to mask
a process as critical. The system call function then sets up the nec-
essary parameters and delegates the rest of the process creation to
the do_fork function in the kernel. One important property of
5As a possible optimization RIP-RH can be extended to reuse guard pages for non-
critical or integrity protected data, similar to ZebRAM [15].
critical processes is the inheritance policy of the isolation: to guar-
antee that a forked critical process does not create uncritical child
processes we also modified the original fork function to checks the
parent process descriptor for its isolation policy and critical flag.
If these are present, a fork call from such a process will automati-
cally pass these settings on to the child process. It is noteworthy
to mention that isolating the kernel should be possible in a similar
manner, by assigning it a process descriptor with id 0 (the first pro-
cess, init, always has the id 1). However, we did not implement
this for our prototype. We note, that our process-isolation defense
against rowhammer attacks is orthogonal to defenses that operate
in the virtual memory domain, and hence, supports a multitude of
real-world system configurations (e.g., such as large page tables).
5.2 Buddy allocator modifications
The second component of the implementation modifies the stan-
dard physical page allocator of the Linux kernel to make it aware of
the underlying DRAM structure and isolate privately mapped pages
of processes that are configured accordingly with a domain isola-
tion policy. To implement this, page allocations must be tracked
according to the requesting process, which our prototype achieves
by setting the identifier of the current process upon receiving a
paging fault, and passing it to the page allocator. Generally, there
are two types of private memory mappings, which can cause page
faults: anonymous and file-backed mappings. The difference be-
tween the two is that anonymous mappings are satisfied by the
buddy allocator directly, whereas file-backed mappings are nor-
mally satisfied from a block device (e.g., a hard disk or flash drive)
and added to the kernel’s page cache. If the allocation originates
from a file-backed mapping, the respective do_file_read im-
plementation will allocate a free page from the buddy allocator and
initiate the disk IO before placing the page in the page cache. In
both cases, the modified buddy allocator performs a series of checks
based on the current configuration of the requesting process and
allocates physical pages accordingly.
In addition to that, every physical page in the kernel is tracked
through an individual page descriptor object (called page struct),
that stores meta data about the page.
We supplement the page struct definition by adding the corre-
sponding process id, as this information is required by the page
allocator to determine if a particular page belongs to a critical pro-
cess. We note that meta-data tagging is required since we need to
perform checks for pages that do not belong to the current process,
we cannot simply infer ownership from the currently active map-
ping (CR3 control register), but have to tag physical pages in their
metadata page struct objects. We bootstrap and reset this in-
formation in __init_single_page, which initializes all page
descriptors during boot and upon freeing of pages during run time.
We further modify the allocator’s main entry point, __alloc_-
pages_nodemask, which first determines the memory zone for
the allocation (usually normal zone for user-space allocations), and
then calls a number of helper functions. Internally, the page alloca-
tor separates the allocation by kind and size. The number of pages
to be allocated is expressed as a power of two, the exponent of
which is called the order of the allocation. The allocator maintains
separate freelists per order for every memory zone.
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand5655.3 Spatial Isolation through guard pages
To ensure the spatial physical isolation between allocations for
different processes we reserve guard pages in the upper and lower
rows of an allocated page. In case this is not possible, the buddy
allocator continues with the next page in the freelist. If the page
fulfills the criteria it is returned to the process. If the current freelist
contains no pages that fulfill the criteria the allocation algorithm
switches to the next higher order and iterates over the correspond-
ing freelist. While this may result in a slight over-allocation the
allocator splits the chunk of pages in two halves (i.e., buddies), re-
turning one buddy to the process and appending the remaining
buddy to the freelist. Upon freeing, the allocator checks if the pages
can be merged with existing buddies, and if so, creates a larger block
that is inserted into the higher order freelist again. This also ensures
that the amount of over-allocation is minimized and fragmentation
is kept to a minimum.
It is noteworthy to mention that the guard pages are not actually
allocated, but kept as part of the free memory page pool instead.
This means that guard pages for a page frame could themselves
be allocated as physical memory by other processes. However,
upon checking of the upper and lower rows, this allocation will be
prevented, as the guard pages are tagged with the guarded process
identity (i.e., the PID). For subsequent allocations of the guarded
process, these pages remain allocatable. This means that when two
allocated DRAM regions are growing close they can be merged
into one guarded region (if they belong to the same process) by
allocating the guard pages in between the regions and only keeping
the pages on top and below the upper-most and lowest DRAM
row. We verified that RIP-RH can handle also potentially large
number of processes and provide a detailed evaluation of this case
in Section. The calculation of the rank, bank, and row indexes
was implemented in the form of C macros, which will be inlined
to reduce the performance impact of those checks. For this, we
leverage the physical-to-DRAM mapping, which has been reverse
engineered by the related work. While this information depends on
the architecture and type of RAM (DDR3 or DDR4), we configure
this information during kernel compilation. This also enables us
to translate the corresponding page struct object for a specific
physical address to its specific physical location on the DRAM
module. However, it is also noteworthy that the row index by itself
can actually be calculated without requiring micro-architecture
specific mappings, as the number of physical pages per row is
determined by the DRAM standard. This means that the row index
for a physical page can be calculated from its physical address given
the number of pages per row just from the DRAM module type.
6 SECURITY ANALYSIS
To exploit rowhammer, an adversary needs to achieve two condi-
tions: (1) the system must be susceptible to bit flips, i.e., if the DRAM
module is not vulnerable to the rowhammer hardware bug it cannot
be exploited; and (2) the attacker must force physical co-location to
victim memory. For our work we assume the first condition to be
naturally fulfilled, as many DRAM modules are vulnerable to bit
flips in practice (cf., section 3).
To test this, we re-implemented the physical co-location strategy
for an attacker program A and a simple test program V. The attack-
ing program tries to force physical co-location in a loop (for both
anonymous and file-backed mappings, i.e., A can ultimately exhaust
the rest of the available physical memory on the system (depending
on the co-location strategy). As the system becomes unresponsive
if all physical memory is allocated by a process, we reserve 2% of
the system’s memory pages and A will not allocate those pages in
any case. We then let our test program V allocate 1000 individual
memory pages (i.e., 1000 separate allocations of order 0). For every
page we logged the allocated address and determined its physical
address through the /proc/self/pagemap interface. We then
executed the two programs in two different configurations.
6.1 Non-critical vs. Critical
In our first test series we setup two processes, a critical process
(V) and a non-critical process (A). We then iterate through all suc-
cessfully allocated pages to scan for co-location with one of the
pages owned by V. We further added several debugging output
statements to the page allocator, which was then written to the ker-
nel log. Via this log we confirmed that allocation requests included
the physical address of a reserved page, and that those pages were
blocked correctly by RIP-RH upon allocation request from V. We let
the experiment run for more than 48 hours and also repeated each
test after rebooting the system between trials, however, process A
never obtained any page that was co-located to a page belonging
to V.
6.2 Critical vs. Critical
To further ensure that RIP-RH correctly isolates critical processes
physically we subsequently started two critical processes C-A and
C-V. However, in this scenario the attacker is assumed to have
control over one of the critical processes C-A. We now perform
the same test as before, only that the attacking process should
now be isolated as well. To this end we again logged and verified
the addresses of allocated pages in the kernel log for C-V. Again,
we let the experiment run for more than 48 hours and restarting
the test several times while rebooting the machine in between the
experiments.
We were able to confirm that also in this scenario the attacker
is actively blocked from allocating any pages that are co-located
to C-V, by cross-checking the physical addresses of the allocated
benign pages with the denied allocation requests in the kernel logs.
7 PERFORMANCE EVALUATION
We thoroughly evaluated RIP-RH against several popular bench-
marking suites and also on real-world applications such as Firefox.
Since RIP-RH isolates processes upon request, we wrote a small
wrapper script that invokes any command line program by calling
the fork_critical system call, which will setup the isolation
and mark the started process as critical.
These standard benchmarks are designed to explicitly stress the
system, e.g., by creating memory pressure situations and evaluate
system behavior in a number of different memory allocation sit-
uations. Additionally, we conducted micro-benchmarks to assess
potential initialization and memory overhead.
Session 7: Hardware and SystemsAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand566Figure 4: SPEC2006 results for RIP-RH with no tests marked as critical and all tests running as critical processes respectively.
The machine used for our tests was equipped with an Intel i3
quad-core processor clocked at 2.93GHz and 2 DRAM modules with
a capacity of 2GB each. We first describe and explain the results
for Spec, then Phoronix and LMBench, and finally our real-world
experiments.
7.1 SPEC CPU2006 Benchmarks
The Spec CPU2006 benchmarking suite contains two sets of tests,
all of which mainly perform CPU-bound computation. The first
range of tests work with floating point numbers, the second focuses
on integer computation. Spec performs three runs and then selects
one of those as a representative. We ran Spec on three different
kernels: first, a plain Linux 4.10, second, with RIP-RH but none of
the tests marked as critical processes, and third, with RIP-RH and
all tests marked as critical. The results of those runs are plotted in
Figure 4. Overall we can see that the average performance overhead
induced by RIP-RH is less than 4% (3.17%), demonstrating that a
page-based physical isolation of dynamic process memory in DRAM
from software is practical. In particular, there is barely any effect
visible through the OS-level changes in RIP-RH for non-isolated
processes. For isolated processes, there are two notable tests, gcc
and mcf. We analyzed the behavior of those tests and found that for
gcc the reason is that the test compiles several input files. For every
compilation unit, the compiler is restarted as a process, meaning
that the load-time overhead of setting up the isolation is repeated
for every compilation. Since the actual run-time of the test is rather
short, but the time it takes to initiate an isolated process is fixed,
this means that the relative overhead is higher compared to all
other tests.
7.2 Phoronix Test Suite
The Phoronix Test Suite contains a series of different benchmarks,
such as filesystem access, network performance, computation, mem-
ory benchmarks, and also a couple of real-world applications such as
Apache, OpenSSL, and 7-zip. In summary, the performance impact
of RIP-RH on the filesystem and network benchmarks is negligible.6
This makes sense, since most of the memory is handled by drivers
in the OS, which does not affect user memory directly. Similarly,
the cachebench and computation-heavy application benchmarks
like PHPBench, PyBench, and OpenSSL are practically unaffected
by RIP-RH’s process isolation as well. One exception to this is 7-zip,
which was unexpected since compression processes are usually
CPU-bound as well. However, during our investigation we found
that 7-zip uses separate forks instead of separate threads for parallel
processing, and hence, the nominal overhead for the isolation setup
is higher (similar to the gcc test in Spec).