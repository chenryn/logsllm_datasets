### 优化后的文本

#### 定义和声明
我们定义以下概率：
\[
\Pr[\Pi, A, Q_{\text{Dec}}, \text{PW}(1^\lambda, 1^m, 1^t) = 1] - \Pr[\Pi, A, Q_{\text{Dec}}, \text{PW}(1^\lambda, 1^m, 1^t) = 1 \mid Q_{\text{Dec}} \leq |PW| + \text{negl}(\lambda)].
\]
我们将通过典型的混合论证来证明上述陈述。为此，我们定义以下混合实验：

1. **Hyb_𝑏,0**：与Hid_𝑏完全相同。
2. **Hyb_𝑏,1**：与Hyb_𝑏,0几乎相同，只是所有零知识证明都是通过NIZKPoK方案的模拟器生成的。利用NIZKPoK方案的零知识属性，可以直观地证明：
   \[
   \left| \Pr[\text{Hyb}_𝑏,0 = 1] - \Pr[\text{Hyb}_𝑏,1 = 1] \right| \leq \text{negl}(\lambda).
   \]
3. **Hyb_𝑏,2**：与Hyb_𝑏,1几乎相同，但在诚实密钥旋转被触发时（即对手查询RotateO Oracle并设置HonestRot = 1），秘密密钥组件（\(k_i, K_0, \{\bar{K}_j\}_{j=0}^{t-1}\)）是新生成的。对于所有 \(b \in \{0, 1\}\)，Hyb_𝑏,1 和 Hyb_𝑏,2 在功能上等价，因此：
   \[
   \Pr[\text{Hyb}_𝑏,1 = 1] = \Pr[\text{Hyb}_𝑏,2 = 1].
   \]
4. **Hyb_𝑏,3,0**：与Hyb_𝑏,2完全相同。
5. **Hyb_𝑏,3,𝑞**，其中 \(q \in [Q_{\text{Dec}}]\)，与Hyb_𝑏,𝑞−1几乎相同，但当回答对手的第𝑞次查询到DecO Oracle并触发计数器DecCount增加时（称为关键查询），诚实方发送的群元素被替换为均匀随机生成的元素。具体来说，对于某些由服务器采样的随机数 \(\bar{\beta}_0, \ldots, \bar{\beta}_{t-1}, \gamma, \bar{\delta}_0, \ldots, \bar{\delta}_{t-1}\)：
   \[
   \forall j \in [0, t-1], \quad \forall i \in [m],
   \]
   \[
   K'_0 = G^{k'_0} = K_0^\gamma, \quad \bar{S}'_j = \bar{S}_j G^{\bar{\delta}_j}, \quad \bar{K}'_j = \bar{K}_j^\gamma G^{\bar{\beta}_j},
   \]
   \[
   S' = \prod_{j=0}^{t-1} \bar{S}'_{i,j}, \quad K' = \prod_{j=0}^{t-1} \bar{K}'_{i,j}.
   \]

#### 更新令牌
给定更新令牌 \((s_0, s'_0)\) 和一个nonce \(n\)，服务器可以将每个 \(C \in \text{SKE.Enc}(s_0, (C_0, C_1))\) 更新为 \(C' \leftarrow \text{SKE.Enc}(s'_0, (C'_0, C'_1))\)，其中：
\[
C'_0 := C_0 \cdot H_0(n)^{\bar{\beta}_0}, \quad C'_1 := C_1 \cdot H_1(n)^{\bar{\beta}_0}.
\]

#### 正确性和安全性
我们的构造的正确性基于SKE的正确性和附录A.2中描述的NIZKPoK方案的完整性。下面，我们陈述我们的构造的安全性，并提供一个证明草图。

**定理 3.1（隐藏性）**：如果决策性Diffie-Hellman (DDH) 假设对GGen成立，并且SKE是CCA安全的，那么上述构造的 \((t, m)\)-PHE 方案在随机预言模型中是半适应隐藏的。

**证明**：首先，广为人知的广义Schnorr协议[17]（见图7）是在随机预言模型中对于关系 \(R_{\text{GDL}}\) 的完美零知识NIZKPoK。因此，我们不需要对NIZKPoK进行额外假设。

我们需要证明该构造在半适应腐败下是隐藏的。即，对于任何多项式时间算法对手 \(A\) 和任何整数 \(Q_{\text{Dec}} \geq 0\)，有：
\[
\left| \Pr[\Pi, A, Q_{\text{Dec}}, \text{PW}(1^\lambda, 1^m, 1^t) = 1] - \Pr[\Pi, A, Q_{\text{Dec}}, \text{PW}(1^\lambda, 1^m, 1^t) = 1 \mid Q_{\text{Dec}} \leq |PW| + \text{negl}(\lambda)] \right| \leq \text{negl}(\lambda).
\]

#### 详细步骤
1. **服务器解密**：
   \[
   \text{Server S("dec", sk0, pw, } n, C)
   \]
   确保 \(\text{KVf}(0, \text{sk0})\) 成立。
   \[
   (C_0, C_1) \leftarrow \text{SKE.Dec}(s_0, C)
   \]
   确保 \((C_0, C_1) \neq \bot\)。
   \[
   X_0 := H_0(n), \quad X_1 := H_1(n)
   \]
   \[
   Y^{-1}_{0,0} := C_0^{-1}
   \]
   计算 \(Z := Y^{-1}_{0,0} \cdot H_0(\text{pw}, n)\) 的加密。
   \[
   K := K_0 \cdot \bar{K}_0
   \]
   \[
   r_0 \leftarrow \mathbb{Z}_p, \quad (U_0, V_0) := (G^{r_0}, K^{r_0} \cdot Y^{-1}_{0,0})
   \]

2. **速率限制器**：
   \[
   \text{Rate-limiter R}_i("dec", \text{sk}_i), \quad \forall i \in [m]
   \]
   确保 \(\text{KVf}(i, \text{sk}_i)\) 成立。
   \[
   n
   \]
   \[
   X_0 := H_0(n), \quad X_1 := H_1(n)
   \]
   \[
   Y_{i,0} := X_0^{s_i}
   \]
   对于某个 \(t\)-子集 \(P \subseteq [m]\)，计算 \((Z^{\tilde{r}}, Z^{\tilde{r}'} \cdot H_1(\text{pw}, n) \cdot H_1(n)^{\sum_{i \in P} \lambda_{P,i} s_i})\) 的加密，其中 \(\tilde{r}\) 和 \(\tilde{r}'\) 是随机数。

3. **验证**：
   \[
   \pi_{1,0} \leftarrow \text{Prove}(crs, (G, U_0), r_0)
   \]
   \[
   \forall j \in [m]: \text{Vf}(crs, (G, U_j), \pi_{1,j}) = 1
   \]
   \[
   P := \text{Subset}_t(P)
   \]
   \[
   \pi_{2,0} \leftarrow \text{Prove}(crs, (U, \tilde{U}_0), \tilde{r}_0)
   \]
   \[
   \pi'_{2,0} \leftarrow \text{Prove}(crs, (U, \tilde{U}'_0), \tilde{r}'_0)
   \]
   \[
   \forall j \in P: \text{Vf}(crs, (\tilde{U}_j, \tilde{V}_j), \pi_{2,j}) = 1
   \]
   \[
   \forall j \in P: \text{Vf}(crs, (\tilde{U}'_j, \tilde{V}'_j), \pi'_{2,j}) = 1
   \]

4. **进一步验证**：
   \[
   \text{确保 } \forall j \in P \setminus \{i\}: \text{Vf}(crs, (U_j, V_j), \pi_{1,j}) = 1
   \]
   \[
   \tilde{r}_i, \tilde{r}'_i \leftarrow \mathbb{Z}_p
   \]
   \[
   (\tilde{U}_i, \tilde{V}_i) := (G^{\tilde{r}_i}, K^{\tilde{r}_i} \cdot Y_{i,0})
   \]
   \[
   \pi_{2,i} \leftarrow \text{Prove}(crs, (U, \tilde{U}_i), \tilde{r}_i)
   \]
   \[
   \pi'_{2,i} \leftarrow \text{Prove}(crs, (U, \tilde{U}'_i), \tilde{r}'_i)
   \]

通过这些步骤，我们可以确保整个系统的正确性和安全性。