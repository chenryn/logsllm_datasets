以下是优化后的代码，使其更加清晰、连贯和专业：

```java
public Point getPoint(JGeometry geom, boolean setSrsName) {
    if (geom == null || geom.getType() != JGeometry.GTYPE_POINT) {
        return null;
    }

    int dimensions = geom.getDimensions();
    Point point = new PointImpl();
    List<Double> value = new ArrayList<>();

    if (dimensions == 2) {
        value.add(geom.getPoint(0).getX());
        value.add(geom.getPoint(0).getY());
    } else if (dimensions == 3) {
        value.add(geom.getPoint(0).getX());
        value.add(geom.getPoint(0).getY());
        value.add(geom.getPoint(0).getZ());
    }

    DirectPosition pos = new DirectPositionImpl();
    pos.setValue(value);
    pos.setSrsDimension(dimensions);

    if (setSrsName) {
        pos.setSrsName(gmlSrsName);
    }

    point.setPos(pos);
    return point;
}

public MultiPoint getMultiPoint(JGeometry geom, boolean setSrsName) {
    if (geom == null || geom.getType() != JGeometry.GTYPE_MULTIPOINT) {
        return null;
    }

    MultiPoint multiPoint = new MultiPointImpl();
    int dimensions = geom.getDimensions();
    double[] ordinates = geom.getOrdinatesArray();

    for (int i = 0; i < ordinates.length / dimensions; i++) {
        List<Double> value = new ArrayList<>();
        for (int j = 0; j < dimensions; j++) {
            value.add(ordinates[i * dimensions + j]);
        }

        DirectPosition pos = new DirectPositionImpl();
        pos.setValue(value);
        pos.setSrsDimension(dimensions);

        if (setSrsName) {
            pos.setSrsName(gmlSrsName);
        }

        Point point = new PointImpl();
        point.setPos(pos);
        multiPoint.add(point);
    }

    return multiPoint;
}

public Polygon getPolygon(JGeometry geom, boolean setSrsName) {
    if (geom == null || geom.getType() != JGeometry.GTYPE_POLYGON) {
        return null;
    }

    Polygon polygon = new PolygonImpl();
    int dimensions = geom.getDimensions();
    double[] ordinatesArray = geom.getOrdinatesArray();
    List<Integer> ringLimits = new ArrayList<>();
    int curveElem = 0;

    while (curveElem < ordinatesArray.length) {
        List<Double> values = new ArrayList<>();
        int ringLimit = curveElem + dimensions * (ringLimits.size() + 1);

        for (; curveElem < ringLimit; curveElem += dimensions) {
            for (int j = 0; j < dimensions; j++) {
                values.add(ordinatesArray[curveElem + j]);
            }
        }

        LinearRing linearRing = new LinearRingImpl();
        DirectPositionList directPositionList = new DirectPositionListImpl();
        directPositionList.setValue(values);
        directPositionList.setSrsDimension(dimensions);

        if (setSrsName) {
            directPositionList.setSrsName(gmlSrsName);
        }

        linearRing.setPosList(directPositionList);

        if (ringLimits.isEmpty()) {
            Exterior exterior = new ExteriorImpl();
            exterior.setRing(linearRing);
            polygon.setExterior(exterior);
        } else {
            Interior interior = new InteriorImpl();
            interior.setRing(linearRing);
            polygon.addInterior(interior);
        }

        ringLimits.add(ringLimit);
    }

    return polygon;
}
```

### 主要改进点：
1. **结构清晰**：将每个方法的逻辑分开，确保每个方法只处理一种几何类型。
2. **变量命名**：使用更具描述性的变量名，提高代码可读性。
3. **注释**：移除不必要的注释，保持代码整洁。
4. **条件判断**：在方法开始时检查输入是否有效，避免后续操作中的空指针异常。
5. **循环优化**：简化了多维数组的遍历，使代码更简洁。

希望这些改进能够帮助你更好地理解和维护代码。