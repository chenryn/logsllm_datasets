bytea_ops oid_ops tsquery_ops
char_ops oidvector_ops tsvector_ops
datetime_ops pg_lsn_ops uuid_ops
enum_ops range_ops varbit_ops
float_ops record_image_ops
integer_ops record_ops
interval_ops reltime_ops
Thesedatatypesaremostlysingle-valueandeasilyordered. B-treesupportfor
multi-valuedtypesliketsvectorisonlyforcomplete-fieldequalitycomparisons.
26/52
Finding Supported Data Types - BRIN
SELECT opfname FROM pg_opfamily, pg_am
WHERE opfmethod = pg_am.oid AND amname = ’brin’
ORDER BY 1;
abstime_minmax_ops interval_minmax_ops reltime_minmax_ops
bit_minmax_ops macaddr_minmax_ops text_minmax_ops
box_inclusion_ops name_minmax_ops tid_minmax_ops
bpchar_minmax_ops network_inclusion_ops time_minmax_ops
bytea_minmax_ops network_minmax_ops timetz_minmax_ops
char_minmax_ops numeric_minmax_ops uuid_minmax_ops
datetime_minmax_ops oid_minmax_ops varbit_minmax_ops
float_minmax_ops pg_lsn_minmax_ops
integer_minmax_ops range_inclusion_ops
27/52
Finding Supported Data Types - GIN
SELECT opfname FROM pg_opfamily, pg_am
WHERE opfmethod = pg_am.oid AND amname = ’gin’
ORDER BY 1;
opfname
----------------
array_ops
jsonb_ops
jsonb_path_ops
tsvector_ops
Thesedatetypes aremulti-value,whereeachvalueisindependent.
28/52
Finding Supported Data Types - GIST
SELECT opfname FROM pg_opfamily, pg_am
WHERE opfmethod = pg_am.oid AND amname = ’gist’
ORDER BY 1;
opfname
--------------
box_ops
circle_ops
jsonb_ops
network_ops
point_ops
poly_ops
range_ops
tsquery_ops
tsvector_ops
Thesedatetypes aremulti-value—some haveindependentvalues
(JSON,tsvector),others havedependentvalues(point,box).
29/52
Finding Supported Data Types - SP-GIST
SELECT opfname FROM pg_opfamily, pg_am
WHERE opfmethod = pg_am.oid AND amname = ’spgist’
ORDER BY 1;
opfname
----------------
kd_point_ops
quad_point_ops
range_ops
text_ops
Fortext,thisisusefulwhenthekeys arelong.
30/52
Index Type Examples
https://www.flickr.com/photos/samcatchesides/
31/52
B-Tree
Page Header Item Item Item
Internal
>= N
= 2
40/52
Multi-Dimensional
y
−5 5
x
41/52
Linear Methods Are Inefficient
y
x
−5 5
x >= 2
x
42/52
R-Tree Indexes Bounding Boxes
y
x
−5 5
x
Level 1
Level 2
Level 3
Geographic objects (lines, polygons) also can appear in r-tree
indexes. based on their own bounding boxes.
43/52
GIST Two-Dimensional Ops
box_ops
circle_ops
point_ops
poly_ops
PostGIS also uses this indexing method.
44/52
Range Indexing With GIST
GIST range type indexing uses large ranges at the top level of the
index, with ranges decreasing in size at lower levels, just like how
r-tree bounding boxes are indexed.
45/52
SP-GIST TEXT_OPS Example (Suffix Tree)
http:// ftp://
google.com/ yahoo.com/ google.com/public/ berkeley.edu/
index.html index.html README bin.tar.gz
maps.html flickr.html cgi.html doc.pdf
Internally split by character. B-trees use range partitioning, e.g.
A-C, rather than common prefix partitioning, so a btree key must
store the full key value.
46/52
Other SP-GIST Index Examples
◮ quad_point_opsusesfour cornerpoints insquarepartitionsof
decreasingsize
◮ kd_point_opssplitson onlyonedimension
47/52
Extension Index Support
◮ btree_gin (GIN)
◮ btree_gist (GIST)
◮ cube (GIST)
◮ hstore (GIST, GIN)
◮ intarray (GIST, GIN)
◮ ltree (GIST)
◮ pg_trgm (GIST, GIN)
◮ PostGIS
◮ seg
48/52
Index Usage Summary
https://www.flickr.com/photos/jubilo/
49/52
When To Create Indexes
◮ pg_stat_user_tables.seq_scan is high
◮ Check frequently-executed queries with EXPLAIN (find via
pg_stat_statements or pgbadger)
◮ Squential scans are not always bad
◮ If pg_stat_user_indexes.idx_scan is low,the index might be
unnecessary
◮ Unnecessary indexes use storage space and slow down
INSERTs and some UPDATEs
50/52
Evaluating Index Types
◮ Index build time
◮ Index storage size
◮ INSERT/UPDATE overhead
◮ Access speed
◮ Operator lookup flexibility
51/52
Conclusion
http://momjian.us/presentations https://www.flickr.com/photos/philipp_zurmoehle/
52/52