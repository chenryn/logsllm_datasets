:::
注意，这里把它放在了/data目录下，然后是./android_server命令，这里提示了IDA
Android
32-bit，所以后面在打开IDA的时候一定要是32位的IDA，不是64位的。IDA在安装之后都是有两个可执行的程序，一个是32位，一个是64位的，如果没打开正确会报这样的错误，如图22-14所示。
::: bodypic-c
![](OEBPS/Images/22a14-i.jpg){.calibre804}
:::
图22-14 报错信息\
还有一类问题：error：only position independent executables（PIE）are
supported这主要是Android
5.0以上的编译选项默认开启了pie，在5.0以下编译的原生应用不能运行，有两种解决办法，一种是用Android
5.0以下的手机进行操作，还有一种就是用IDA6.6+版本即可。
然后开始监听了设备的23946端口，如果想让IDA和这个android_server进行通信，必须让PC端的IDA也连上这个端口，这时候就需要借助于adb的一个命令了：
::: bodypic-c
![](OEBPS/Images/337-2-i.jpg){.calibre805}
:::
这里就可以把android_server端口转发出去：
::: bodypic-c
![](OEBPS/Images/337-3-i.jpg){.calibre806}
:::
这时候，只要在PC端使用IDA连接上23946这个端口就可以了。到这里会有人好奇，为什么远程端的端口号也是23946呢？因为后面在使用IDA进行连接的时候，发现IDA把这个端口设置死了，就是23946，可使用如下命令修改：android-server-p1234。
可以使用netstat命令查看端口23946的使用情况，看到是ida在使用这个端口
::: bodypic-c
![](OEBPS/Images/337-4-i.jpg){.calibre807}
:::
###### 2.IDA获取进程信息 {.section-subtitle}
上面准备好了android_server，运行成功，下面就用IDA进行尝试连接，获取信息，进行进程附加注入。这时候需要再打开一个IDA，之前打开一个IDA是用来分析so文件的，一般用于静态分析，要调试so的话，需要再打开一个IDA。这里一般都是需要打开两个IDA，也叫作双开IDA操作，采用动静结合策略，如图22-15所示。
::: bodypic-c
![](OEBPS/Images/22a15-i.jpg){.calibre808}
:::
图22-15 双开IDA\
这里记得选择Go这个选项，就是不需要打开so文件了，进入一个空白页，如图22-16所示。
在Debugger选项卡中选择Attach，看到有很多debugger，可见IDA工具真的很强大，做到很多debugger的兼容，可以调试很多平台下的程序。这里选择Android
debugger，出现页面如图22-17所示。
::: bodypic-c
![](OEBPS/Images/22a16-i.jpg){.calibre809}
:::
图22-16 选择Debugger选项
::: bodypic-c
![](OEBPS/Images/22a17-i.jpg){.calibre810}
:::
图22-17 设置端口
这里可看到端口是23946，所以上面用adb
forward进行端口转发的时候是23946。这里PC本地机就是调试端，所以host就是本机的ip地址：127.0.0.1，点击OK，出现界面如图22-18所示。
::: bodypic-c
![](OEBPS/Images/22a18-i.jpg){.calibre811}
:::
图22-18 进程信息列表
可以看到列出了设备中所有的进程信息，其实都是android_server干的事，获取设备进程信息传递给IDA进行展示。
注意，如果当初没有用root身份去运行android_server：
::: bodypic-c
![](OEBPS/Images/338-3-i.jpg){.calibre812}
:::
::: bodypic-c
![](OEBPS/Images/339-i.jpg){.calibre813}
:::
IDA就不会列举出设备的进程信息，如图22-19所示。
::: bodypic-c
![](OEBPS/Images/22a19-i.jpg){.calibre814}
:::
图22-19 无进程列表信息
还有一个注意的地方，就是IDA和android_server版本一定要保持一致。
可以用Ctrl+F快捷键搜索需要调试的进程，这里必须运行要调试的进程，不然也是找不到这个进程的，如图22-20所示。
::: bodypic-c
![](OEBPS/Images/22a20-i.jpg){.calibre815}
:::
图22-20 搜索进程
双击进程，即可进入调试页面，如图22-21所示。
::: bodypic-c
![](OEBPS/Images/22a21-i.jpg){.calibre816}
:::
图22-21 进入调试页面
为什么会断在libc.so中呢？Android系统中libc是c层中最基本的函数库，libc中封装了io、文件、socket等基本系统调用。所有上层的调用都需要经过libc封装层。所以libc.so是最基本的，所以会断在这里。而且一些常用的系统so，比如linker，如图22-22所示。
::: bodypic-c
![](OEBPS/Images/22a22-i.jpg){.calibre817}
:::
图22-22 linker文件
这个linker是用于加载so文件的模块，所以后面再分析如何在.init_array处下断点，还有一个就是libdvm.so文件，它包含了dvm中所有的底层加载dex的一些方法，如图22-23所示。
::: bodypic-c
![](OEBPS/Images/22a23-i.jpg){.calibre818}
:::
图22-23 libdvm.so文件
在后面动态调试需要dump出加密之后的dex文件，就需要调试这个so文件了。
###### 3.找到函数地址下断点 {.section-subtitle}
使用Ctrl+S快捷键找到需要调试so的基地址：74FE4000，如图22-24所示。
::: bodypic-c
![](OEBPS/Images/22a24-i.jpg){.calibre819}
:::
图22-24 查找基地址
然后通过另外一个IDA打开so文件，查看函数的相对地址：E9C，如下所示：
::: bodypic-c
![](OEBPS/Images/341-i.jpg){.calibre820}
:::
那么得到了函数的绝对地址就是：74FE4E9C，使用G键快速跳转到这个绝对地址，如图22-25所示。
::: bodypic-c
![](OEBPS/Images/22a25-i.jpg){.calibre821}
:::
图22-25 跳转到绝对地址
跳转这个地址之后，开始下断点，点击最左边的绿色圆点即可下断点，如下所示：
::: bodypic-c
![](OEBPS/Images/341-2-i.jpg){.calibre822}
:::
然后点击左上角的绿色三角按钮运行，也可以使用F9键运行程序。
点击程序中的按钮，如图22-26所示。
::: bodypic-c
![](OEBPS/Images/22a26-i.jpg){.calibre823}
:::
图22-26 点击程序中的按钮
触发native函数的运行，如下所示：
::: bodypic-c
![](OEBPS/Images/342-i.jpg){.calibre824}
:::
进入调试阶段了，这时候可以使用F8快捷键进行单步调试，用F7进行单步调试，如下所示：
::: bodypic-c
![](OEBPS/Images/342-2-i.jpg){.calibre252}
:::
点击F8进行单步调试，到达is_number函数调用处，看到R0是出入的参数值，可以查看R0寄存器的内容，然后看到是123456，这个就是Java层传入的密码字符串。接着往下走，如下所示：
::: bodypic-c
![](OEBPS/Images/342-3-i.jpg){.calibre825}
:::
这里把is_number函数返回值保存到R0寄存中，然后调用CBZ指令，判断是否为0，如果为0就跳转到locret_74FE4EEC处，查看R0寄存器的值不是0，继续往下走，如图22-27所示。
::: bodypic-c
![](OEBPS/Images/22a27-i.jpg){.calibre826}
:::
图22-27 查看寄存器值
看到了get_encrypt_str函数的调用，函数的返回值保存在R1寄存器中，查看内容为：zytyrTRA\*B，那么看到，上层传递的：123456→zytyrTRA\*B，前面静态分析了get_encrypt_str函数的逻辑，继续往下看，如下所示：
::: bodypic-c
![](OEBPS/Images/342-5-i.jpg){.calibre827}
:::
这里把上面得到的字符串和ssBCqpBssP作比较，那么ssBCqpBssP就是正确的加密密码了。那么现在的资源是：正确的加密密码为ssBCqpBssP，加密密钥库为zytyrTRA\*BniqCPpVs，加密逻辑为get_encrypt_str。
可以写一个逆向的加密方法，去解析正确的加密密码得到值即可。为了给大家一个破解的机会，这里就不公布正确答案了。
[加密apk下载地址：]{.yanse}
http://download.csdn.net/detail/jiangwei0910410003/9531638\
##### 22.3.3 IDA调试的流程总结 {.bodycontent-title3}
到这里，就分析了如何破解apk的流程，下面来总结一下：
1）通过解压apk文件得到对应的so文件，然后使用IDA工具打开so文件，找到指定的native层函数。
2）通过IDA中的一些快捷键：F5、Ctrl+S、Y等，静态分析函数的ARM指令，大致了解函数的执行流程。
3）再次打开一个IDA来进行调试so文件。
4）将IDA目录中的android_server拷贝到设备的指定目录下，修改android_server的运行权限，用root身份运行android_server。
5）使用adb forward进行端口转发，让远程调试端IDA可以连接到被调试端。
6）使用IDA连接上转发的端口，查看设备的所有进程，找到需要调试的进程。
7）通过打开so文件，找到需要调试函数的相对地址，然后在调试页面使用Ctrl+S找到so文件的基地址，相加之后得到绝对地址，使用G键，跳转到函数的地址处，下好断点。点击运行或者点击F9键。
8）触发native层的函数，使用F8和F7快捷键进行单步调试，查看关键的寄存器中的值，比如函数的参数、函数的返回值等信息。
总结：在调试so文件的时候，需要双开IDA，采用动静结合的方式进行分析。
[]{#135.xhtml}
#### 22.4 用IDA解决反调试问题 {.bodycontent-title2}
到这里就结束了本章的破解旅程了？答案是否定的，因为上面的例子其实是自己构建的，先写了一个apk，目的就是为了给大家演示。如何使用IDA来进行动态调试so文件，下面用一个操作动手的案例来讲解，这个案例解决了反调试问题。这是2014年阿里安全挑战赛的第二题：AliCrackme_2。
如图22-28所示，下面来看看破解流程。首先使用aapt命令查看其AndroidManifest.xml文件，得到入口的Activity类，如下所示：
::: bodypic-c
![](OEBPS/Images/344-i.jpg){.calibre781}
:::
::: bodypic-c
![](OEBPS/Images/22a28-i.jpg){.calibre828}
:::
图22-28 破解程序\
然后使用dex2jar和jd-gui查看它的源码类com.yaotong.crackme.MainActivity，如下所示：
::: bodypic-c
![](OEBPS/Images/344-2-i.jpg){.calibre829}
:::
::: bodypic-c
![](OEBPS/Images/344-3-i.jpg){.calibre830}
:::
看到它的判断，securityCheck方法是native层的，所以这时候去解压apk文件，获取它的so文件，使用IDA打开查看native函数的相对地址11A8，如图22-29所示。
::: bodypic-c
![](OEBPS/Images/22a29-i.jpg){.calibre831}
:::
图22-29 查看函数的相对地址
这里的ARM指令代码不分析了，大家自行查看即可，直接进入调试即可，再打开一个IDA进行关联调试，如图22-30所示。
::: bodypic-c
![](OEBPS/Images/22a30-i.jpg){.calibre832}
:::
图22-30 附加进程
选择对应的调试进程，然后点击OK，如图22-31所示。
::: bodypic-c
![](OEBPS/Images/22a31-i.jpg){.calibre833}
:::
图22-31 查找需要调试的so文件
使用Ctrl+S键找到对应so文件的基地址74EA9000，和上面得到的相对地址相加得到绝对地址74EA9000+11A8=74EAA1A8。使用G键直接跳到这个地址，如下所示：
::: bodypic-c
![](OEBPS/Images/346-i.jpg){.calibre834}
:::
下个断点，然后点击F9运行程序，如图22-32所示。
::: bodypic-c
![](OEBPS/Images/22a32-i.jpg){.calibre835}
:::