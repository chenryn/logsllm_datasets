      command: >
        chmod -R g-w /home/user
      tags:
        - skip_ansible_lint
      sudo: yes
    ```
* New: [Start and enable a systemd service.](ansible_snippets.md#start-and-enable-a-systemd-service)
    ```yaml
    - name: Start the service
      become: true
      systemd:
        name: zfs_exporter
        enabled: true
        daemon_reload: true
        state: started
    ```
* New: [Download an decompress a tar.gz.](ansible_snippets.md#download-an-decompress-a-tar.gz)
    ```yaml
    - name: Unarchive a file that needs to be downloaded (added in 2.0)
      ansible.builtin.unarchive:
        src: https://example.com/example.zip
        dest: /usr/local/bin
        remote_src: yes
    ```
    If you want to only extract a file you can use the `includes` arg
    ```yaml
    - name: Download the zfs exporter
      become: true
      ansible.builtin.unarchive:
        src: https://github.com/pdf/zfs_exporter/releases/download/v{{ zfs_exporter_version }}/zfs_exporter-{{ zfs_exporter_version }}.linux-amd64.tar.gz
        dest: /usr/local/bin
        include: zfs_exporter
        remote_src: yes
        mode: 0755
    ```
    But that snippet sometimes fail, you can alternatively download it locally and `copy` it:
    ```yaml
    - name: Test if zfs_exporter binary exists
      stat:
        path: /usr/local/bin/zfs_exporter
      register: zfs_exporter_binary
    - name: Install the zfs exporter
      block:
        - name: Download the zfs exporter
          delegate_to: localhost
          ansible.builtin.unarchive:
            src: https://github.com/pdf/zfs_exporter/releases/download/v{{ zfs_exporter_version }}/zfs_exporter-{{ zfs_exporter_version }}.linux-amd64.tar.gz
            dest: /tmp/
            remote_src: yes
        - name: Upload the zfs exporter to the server
          become: true
          copy:
            src: /tmp/zfs_exporter-{{ zfs_exporter_version }}.linux-amd64/zfs_exporter
            dest: /usr/local/bin
            mode: 0755
      when: not zfs_exporter_binary.stat.exists
    ```
* New: [Run command on a working directory.](ansible_snippets.md#run-command-on-a-working-directory)
    ```yaml
    - name: Change the working directory to somedir/ and run the command as db_owner
      ansible.builtin.command: /usr/bin/make_database.sh db_user db_name
      become: yes
      become_user: db_owner
      args:
        chdir: somedir/
        creates: /path/to/database
    ```
* New: [Run handlers in the middle of the tasks file.](ansible_snippets.md#run-handlers-in-the-middle-of-the-tasks-file)
    If you need handlers to run before the end of the play, add a task to flush them using the [meta module](https://docs.ansible.com/ansible/latest/collections/ansible/builtin/meta_module.html#meta-module), which executes Ansible actions:
    ```yaml
    tasks:
      - name: Some tasks go here
        ansible.builtin.shell: ...
      - name: Flush handlers
        meta: flush_handlers
      - name: Some other tasks
        ansible.builtin.shell: ...
    ```
    The `meta: flush_handlers` task triggers any handlers that have been notified at that point in the play.
    Once handlers are executed, either automatically after each mentioned section or manually by the `flush_handlers meta` task, they can be notified and run again in later sections of the play.
* New: [Run command idempotently.](ansible_snippets.md#run-command-idempotently)
    ```yaml
    - name: Register the runner in gitea
      become: true
      command: act_runner register --config config.yaml --no-interactive --instance {{ gitea_url }} --token {{ gitea_docker_runner_token }}
      args:
        creates: /var/lib/gitea_docker_runner/.runner
    ```
* New: [Get the correct architecture string.](ansible_snippets.md#get-the-correct-architecture-string)
    If you have an `amd64` host you'll get `x86_64`, but sometimes you need the `amd64` string. On those cases you can use the next snippet:
    ```yaml
    ---
    deb_architecture:
      aarch64: arm64
      x86_64: amd64
    ---
    - name: Download the act runner binary
      become: True
      ansible.builtin.get_url:
        url: https://dl.gitea.com/act_runner/act_runner-linux-{{ deb_architecture[ansible_architecture] }}
        dest: /usr/bin/act_runner
        mode: '0755'
    ```
* New: [Check the instances that are going to be affected by playbook run.](ansible_snippets.md#check-the-instances-that-are-going-to-be-affected-by-playbook-run)
    Useful to list the instances of a dynamic inventory
    ```bash
    ansible-inventory -i aws_ec2.yaml --list
    ```
* New: [Check if variable is defined or empty.](ansible_snippets.md#check-if-variable-is-defined-or-empty)
    In Ansible playbooks, it is often a good practice to test if a variable exists and what is its value.
    Particularity this helps to avoid different “VARIABLE IS NOT DEFINED” errors in Ansible playbooks.
    In this context there are several useful tests that you can apply using [Jinja2 filters](https://docs.ansible.com/ansible/latest/user_guide/playbooks_filters.html) in Ansible.
* New: Check if Ansible variable is defined (exists).
    ```yaml
    tasks:
    - shell: echo "The variable 'foo' is defined: '{{ foo }}'"
      when: foo is defined
    - fail: msg="The variable 'bar' is not defined"
      when: bar is undefined
    ```
* New: [Check if Ansible variable is empty.](ansible_snippets.md#check-if-ansible-variable-is-empty)
    ```yaml
    tasks:
    - fail: msg="The variable 'bar' is empty"
      when: bar|length == 0
    - shell: echo "The variable 'foo' is not empty: '{{ foo }}'"
      when: foo|length > 0
    ```
* New: [Check if Ansible variable is defined and not empty.](ansible_snippets.md#check-if-ansible-variable-is-defined-and-not-empty)
    ```yaml
    tasks:
    - shell: echo "The variable 'foo' is defined and not empty"
      when: (foo is defined) and (foo|length > 0)
    - fail: msg="The variable 'bar' is not defined or empty"
      when: (bar is not defined) or (bar|length == 0)
    ```
* New: [Download a file.](ansible_snippets.md#download-a-file)
    ```yaml
    - name: Download foo.conf
      ansible.builtin.get_url:
        url: http://example.com/path/file.conf
        dest: /etc/foo.conf
        mode: '0440'
    ```
* New: [Ansible condition that uses a regexp.](ansible_snippets.md#ansible-condition-that-uses-a-regexp)
    ```yaml
    - name: Check if an instance name or hostname matches a regex pattern
      when: inventory_hostname is not match('molecule-.*')
      fail:
        msg: "not a molecule instance"
    ```
* New: [Ansible-lint doesn't find requirements.](ansible_snippets.md#ansible-lint-doesn't-find-requirements)
    It may be because you're using `requirements.yaml` instead of `requirements.yml`. Create a temporal link from one file to the other, run the command and then remove the link.
    It will work from then on even if you remove the link. `¯\(°_o)/¯`
* New: [Run task only once.](ansible_snippets.md#run-task-only-once)
    Add `run_once: true` on the task definition:
    ```yaml
    - name: Do a thing on the first host in a group.
      debug:
        msg: "Yay only prints once"
      run_once: true
    ```
* New: [Ansible add a sleep.](ansible_snippets.md#ansible-add-a-sleep)
    ```yaml
    - name: Pause for 5 minutes to build app cache
      ansible.builtin.pause:
        minutes: 5
    ```
* New: [Ansible lint skip some rules.](ansible_snippets.md#ansible-lint-skip-some-rules)
    Add a `.ansible-lint-ignore` file with a line per rule to ignore with the syntax `path/to/file rule_to_ignore`.
### [Gitea](gitea.md)
* New: Introduce chezmoi.
    [Chezmoi](https://www.chezmoi.io/) stores the desired state of your dotfiles in
    the directory `~/.local/share/chezmoi`. When you run `chezmoi apply`, `chezmoi`
    calculates the desired contents for each of your dotfiles and then makes the
    minimum changes required to make your dotfiles match your desired state.
    What I like:
    - Supports `pass` to retrieve credentials.
    - Popular
    - Can remove directories on `apply`
    - It has a `diff`
    - [It can include dotfiles from an URL](https://www.chezmoi.io/user-guide/include-files-from-elsewhere/)
    - [Encrypt files with gpg](https://www.chezmoi.io/user-guide/encryption/gpg/)
    - [There's a vim plugin](https://github.com/alker0/chezmoi.vim)
    - Actively maintained
    - Good documentation
    What I don't like:
    - Go templates, although
      [it supports autotemplating](https://www.chezmoi.io/user-guide/templating/#creating-a-template-file)
      and it's
      [well explained](https://www.chezmoi.io/user-guide/templating/#template-variables)
    - Written in Go
    In the article you can also find:
    * [How to install it](chezmoi.md#installation)
    * [How to use it](chezmoi.md#basic-usage)
    * [How to install a binary from an external url](chezmoi.md#install-a-binary-from-an-external-url)
* Correction: Update the project url of helm-secrets.
    From https://github.com/futuresimple/helm-secrets to https://github.com/jkroepke/helm-secrets
* New: [Disable the regular login, use only Oauth.](gitea.md#disable-the-regular-login-use-only-oauth)
    You need to add a file inside your [`custom` directory](https://docs.gitea.io/en-us/customizing-gitea/). The file is too big to add in this digest, please access the article to get it.
* New: [Configure it with terraform.](gitea.md#configure-it-with-terraform)
    Gitea can be configured through terraform too. There is an [official provider](https://gitea.com/gitea/terraform-provider-gitea/src/branch/main) that doesn't work, there's a [fork that does though](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs). Sadly it doesn't yet support configuring Oauth Authentication sources. Be careful [`gitea_oauth2_app`](https://registry.terraform.io/providers/Lerentis/gitea/latest/docs/resources/oauth2_app) looks to be the right resource to do that, but instead it configures Gitea to be the Oauth provider, not a consumer.
    In the article you can find how to configure and use it to:
    * [Create an organization](gitea.md#create-an-organization)
* New: [Create an admin user through the command line.](gitea.md#create-an-admin-user-through-the-command-line)
    ```bash
    gitea --config /etc/gitea/app.ini admin user create --admin --username user_name --password password --email email
    ```
    Or you can change [the admin's password](https://discourse.gitea.io/t/how-to-change-gitea-admin-password-from-the-command-terminal-line/1930):
    ```bash
    gitea --config /etc/gitea/app.ini admin user change-password -u username -p password
    ```
    feat(gtd): Introduce Getting things done
    First summary of David Allen's book Getting things done. It includes:
    * [Theory principles](gtd.md#theory-principles)
      * [Managing commitments](gtd.md#managing-commitments)
      * [Managing stuff](gtd.md#managing-stuff)
      * [Managing actions](gtd.md#managing-actions)
      * [Workflow steps](gtd.md#workflow-steps)
        * [Capture what has our attention.](gtd.md#capture)
        * [Clarify what each item means and what to do about it.](gtd.md#clarify-and-organize)
        * [Organize the results.](gtd.md#clarify-and-organize)
        * [Reflect on the options.](gtd.md#reflect)
        * [Engage the chosen options.](gtd.md#engage)
    * [Setting up the system](gtd.md#setting-up-the-system)
      * [Setting up the space](gtd.md#setting-up-the-space)
      * [Setting up your filing system](gtd.md#setting-up-your-filing-system)
* New: [Gitea actions overview.](gitea.md#configure-gitea-actions)
    We've been using [Drone](drone.md) as CI runner for some years now as Gitea didn't have their native runner. On [Mar 20, 2023](https://blog.gitea.io/2023/03/gitea-1.19.0-is-released/) however Gitea released the version 1.19.0 which promoted to stable the Gitea Actions which is a built-in CI system like GitHub Actions. With Gitea Actions, you can reuse your familiar workflows and Github Actions in your self-hosted Gitea instance. While it is not currently fully compatible with GitHub Actions, they intend to become as compatible as possible in future versions. The typical procedure is as follows:
    * Register a runner (at the moment, act runners are the only option). This can be done on the following scopes:
      * site-wide (by site admins)
      * organization-wide (by organization owners)
      * repository-wide (by repository owners)
    * Create workflow files under `.gitea/workflows/.yaml` or `.github/workflows/.yaml`. The syntax is the same as [the GitHub workflow syntax](https://docs.github.com/en/actions) where supported.
    Gitea Actions advantages are:
    * Uses the same pipeline syntax as Github Actions, so it's easier to use for new developers
    * You can reuse existent Github actions.
    * Migration from Github repositories to Gitea is easier.
    * You see the results of the workflows in the same gitea webpage, which is much cleaner than needing to go to drone
    * Define the secrets in the repository configuration.
    Drone advantages are:
    * They have the promote event. Not critical as we can use other git events such as creating a tag.
    * They can be run as a service by default. The gitea runners will need some work to run on instance restart.
    * Has support for [running kubernetes pipelines](https://docs.drone.io/quickstart/kubernetes/). Gitea actions doesn't yet support this
* New: [Setup Gitea actions.](gitea.md#setup-gitea-actions)
    You need a Gitea instance with a version of 1.19.0 or higher. Actions are disabled by default (as they are still an feature-in-progress), so you need to add the following to the configuration file to enable it:
    ```ini
    [actions]
    ENABLED=true
    ```
    Even if you enable at configuration level you need to manually enable the actions on each repository [until this issue is solved](https://github.com/go-gitea/gitea/issues/23724).
    So far there is [only one possible runner](https://gitea.com/gitea/act_runner) which is based on docker and [`act`](https://github.com/nektos/act). Currently, the only way to install act runner is by compiling it yourself, or by using one of the [pre-built binaries](http://dl.gitea.com/act_runner). There is no Docker image or other type of package management yet. At the moment, act runner should be run from the command line. Of course, you can also wrap this binary in something like a system service, supervisord, or Docker container.
    Before running a runner, you should first register it to your Gitea instance using the following command:
    ```bash
    ./act_runner register --no-interactive --instance  --token 