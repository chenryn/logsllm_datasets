of the package names → web domain names mapping. For each
of them, we describe how such implementation is vulnerable, to
which attacks, and how practical it is with respect to the ques-
tions discussed above. The insights presented in this section are
systematized in Table 1.
Secure mapping. The safest way to implement a mapping consists
in securely verifying whether the developers of the current app
have authority over a given domain name: if that is the case, then
it is safe to auto-suggest the credentials of such domain name to
the current app. One known solution to achieve this mapping is
called Digital Asset Links [19] (DAL from now on). From a concep-
tual point of view, DAL allows for the definition of authentication
domain equivalence classes, and it makes it possible to associate
an app with a website and vice versa, via verifiable statements.
This mechanism works by asking websites owners to publish on
their website an “assets” file that contains a list of apps that can be
legitimately associated with it. In this case, each app is identified by
its package name and by the hash of its legitimate signing key. A
third-party can then verify that an app is indeed legitimately linked
to a website by checking whether the “assets” include a matching
package name and the hash of the signing key.
Static one-to-one mapping. Consider a PM with a static one-
to-one mapping, which maps one package name to exactly one
domain name, and vice versa. As an example, consider the legitimate
Facebook app, whose package name is com.facebook.katana, which
is usually mapped to the facebook.com domain name. This simple
mapping technique is vulnerable: in fact, Facebook credentials are
suggested to any app whose package name is com.facebook.katana,
even if the app is not the legitimate one. It would be possible to
prevent this vulnerability by checking the certificate that signed
the target app, and make sure it is one of the known, trusted one.
Unfortunately, maintaining such list of known trusted certificates
is a very challenging task. We consider this a vulnerability, but
the attack is not very practical: in fact, the malicious app cannot
co-exist with the legitimate one.
Static many-to-one mapping. Consider a PM with a mapping
that maps n different package names p1, p2, . . . , pn to the same
domain name D. This can happen for different apps belonging to
the same companies: while they are all different apps (and thus they
have different package names), they are all associated with the same
domain name. This typology of mapping is problematic because it
is frequent that the user would install only one (or a subset) of these
apps. Thus, a malicious app with one of the remaining package
names is able to steal the credentials. This attacker is more practical
than the previous one because it does not require the attacker to
lure the user to uninstall the legitimate app. However, the package
names specified in the mapping likely refer to real legitimate apps
on the Play Store. This means that the attacker cannot upload her
malicious app on the Play Store (because package names need to
be unique across the store), and the app needs to be side-loaded.
Crowdsourced mapping. Given the scale of the problem—millions
of apps and website to map one with each other—one possibility
to create a comprehensive mapping is by means of crowdsourcing.
Thus, one approach is the following: consider a user who inserts
credentials for a domain D to an app with package name P, and
assume that the given PM did not know about this mapping: in such
case, a popup can ask the user whether she allows such association
to be shared with other users, so that everybody can benefit. If the
user allows for it, this new association is sent to the backend, which,
depending on the specific implementation, could immediately make
this mapping available to all its users, or wait until a number of
users higher than a threshold report the exact same association.
If an attacker is able to “inject” a new association, then she can
mount an attack that is more practical than the two alternatives
above. In fact, she could inject a new mapping pattacker → D
(where pattacker is an arbitrary attacker-chosen package name):
in this way, the PM would suggest credentials related to D to the
malicious app with pattacker as package name. Since the package
name is attacker-chosen, the attacker can choose a package name
that does not yet exist, and she can upload the malicious app to the
Play Store. Of course, this malicious app can also co-exist with the
legitimate one, given the different package name.
Heuristic-based mapping. One last way to implement mapping
is through heuristics. For example, one way is to infer which is
the appropriate domain name by implementing heuristics on the
package name of the app. One other strategy is to rely on some
other metadata to take such decisions. From a security perspective,
this is the most dangerous scenario. In fact, if such heuristics are
implemented in a way that an attacker can game them, the attacker
could create a malicious app that “maps” to an arbitrary attacker-
chosen target. Also, in this case the attacker may be able to avoid
constraints related to the package name of the malicious app, thus
avoiding practicality issues.
No mapping. Another alternative for PMs is to not implement
any mapping. In this case, the PM would always suggest all stored
credentials associated with all websites. This option is simpler than
all other alternatives, but it is not secure, especially when compared
to what current web-based PMs do. As an example, consider the
LastPass browser extension: in the current version, the extension
does not allow a user to insert her Facebook credentials on a website
that does not share the facebook.com domain name. This is done as
a security protection against phishing: even if the domain name
graphically looks like facebook.com (by, for example, using Unicode
character, as it would be the case in advanced phishing attacks), the
password will prevent the user to fall for this phishing attack: mobile
PMs that do not implement mappings cannot protect from this
threat. However, if no mapping is implemented and all credentials
are suggested, such protection is not available.
5 CASE STUDIES
We performed the security assessment of the top four third-party
leading PM apps (i.e., Keeper, Dashlane, LastPass, and 1Password),
each of which has millions of users around the world. We have also
considered the Google Smart Lock, a service integrated with Google
Play Services, which currently implements, among many other
features, a password manager. In particular, we wanted to study
how these PMs address the challenges described in the previous
sections, and we were interested in answering questions such as:
how does the suggestion system work? How do these apps map
apps and package names to their associated websites? Is it possible
for a malicious app to trick PMs to provide credentials for arbitrary
websites? How difficult is for an attacker to mount such attacks?
Moreover, as three out of four PMs include the OpenYOLO library,
we assessed the reliability of its implementation.
This section describes the methodology we adopted and the
details for each of the PM we have analyzed. Our findings, sum-
marized in Table 2, are worrisome: three of the third-party PMs
implement a mapping based on various heuristics that an attacker
can easily game. In other words, an attacker can create an app so
that the target PM auto-suggests credentials associated with an
arbitrary attacker-chosen domain name. Note that, in such cases,
an attacker can leak credentials even from websites that do not
have an associated mobile app—as long as the attacker can game
the auto-suggestion system, the attacker wins.
Last, it is worth noticing that all third-party PMs support both
a11y and Autofill Framework (for Android 8+); more precisely, we
note that each PMs keep asking for the a11y permission even on
Android 8.0 for backward compatibility reasons, as many apps have
not modified their layouts yet to include Autofill XML attributes.
We have also noticed that from the perspective of a user who sees an
app being auto-filled, sometimes the steps to get the credential are
slightly different, or there are some graphical differences, between
PM relying on a11y or the Autofill Framework. We will discuss
them case-by-case; however, we underline that all attacks that we
discuss here works independently from the supporting technique.
5.1 Methodology
We developed a three-step methodology to investigate the security
of each password manager. These analysis steps are performed
using reverse engineering assisted by simple static analysis (e.g.,
bytecode decompilation) and dynamic analysis (e.g., bytecode in-
strumentation, network analysis, etc.).
Step 1: Package name as app identifier. The first step is to de-
termine whether a given PM uses the package name of the target
app as the only information to auto-suggest credentials for a given
website. This step is done in the following way: (1) Install the legiti-
mate Facebook app and add the credentials to the PM; (2) Uninstall
the Facebook app; (3) Install a malicious app that has the same
package name as the Facebook app and contains a login form. This
Table 2: Summary of findings for Keeper (K), Dashlane (D),
LastPass (LP), 1Password (1P), and Google Smart Lock (GSL).
✓
Secure mapping
One-to-one mapping
Many-to-one mapping
Crowdsourced mapping
Heuristic-based mapping
No mapping
Q1) Vulnerable?
✓ ✓ ✓
Q2) Can co-exist on device?
✓ ✓ ✓
Q3) Can co-exist on Play Store? ✓ ✓ ✓
Q4) Targeted suggestion?
✓ ✓ ✓
✓
✓ ✓ ✓
K D LP 1P GSL
✓
✓
✓ ✓ ✓
✓
✓
✓
✓
app is written so that the only aspect in common with the legiti-
mate app is the package name, while everything else is intentionally
changed; (4) Check whether the PM auto-suggests the real Facebook
credentials.
Although this step is straightforward from the conceptual and
technical standpoints, it is enough to reveal key information: since
in our test we change all the aspects except the package name, if the
PM provides the correct credentials, it means that the package name
is the only information used by the PM to identify the requesting
app.
Step 2: Mapping extraction. If the first step reveals that the pack-
age name is the only aspect that matters, we then proceed to our
second step: we aim at determining which specific technique the
PM uses to map package names to domain names. This step is per-
formed by a number of black-box tests and by then supporting the
findings via manual reverse engineering of the PM.
Step 3: Exploitation. The last step consists in developing tech-
niques to game the system and exploit the peculiarities of a given
mapping implementation, if vulnerable. In this scenario, a proof-
of-vulnerability consists in an app written so that the PM under
analysis is tricked to provide the credentials of an arbitrary attacker-
chosen website. In the general case, this app will need to have a
carefully crafted package name and, at the very least, a login form.
In other cases, it may be required to tweak other additional meta-
data.
5.2 Keeper
The Keeper app is the most downloaded PM with more than ten
million users on Play Store. Keeper supports both a11y and Autofill
Framework (on Android 8+), but it does not support OpenYOLO
yet. When the user selects a form, it shows an icon with a yellow
lock close to the form. When the user clicks on this icon, if the app
is recognized, the related credentials are suggested (see Figure 1b).
Otherwise, it asks to create a new entry.
Keeper also downloads from its backend a configuration file with
a list of known websites (and their names). This file, interestingly,
does not contain any reference to known package names. In fact,
this list is only used to auto-suggest website names when the user
manually inserts a new set of credentials.
Mapping implementation. When the user opens an app that can
be auto-filled, Keeper obtains its package name, through a11y or
Autofill Framework. Keeper then needs to determine which website
is associated with the current package name. To this aim, Keeper
builds a heuristic-based mapping as follows: it uses the app package
name to infer the URL of the app webpage on the Play Store (e.g.,
when the user opens the Facebook app, whose package name is com.
facebook.katana, Keeper tries to access the webpage at https://play.
google.com/store/apps/details?gl=us&id=com.facebook.katana). Then,
if the webpage exists, Keeper parses out the domain name of the
URL specified in the “app developer website field.” This is the do-
main name that Keeper considers as the rightful owner, and it then
stores the package name → domain name association in its internal
mapping database. Finally, Keeper auto-suggests the credentials
associated with this just-retrieved domain name.
Exploitation. Unfortunately, this mechanism is trivial to exploit
for an attacker. In fact, the app developer URL is not validated by
the Play Store and it thus cannot be trusted. We were able to create
an app (with an arbitrary package name) and to publish it on the
Play Store specifying facebook.com as the developer’s website. In
this way, when a user opens our app, the Facebook credentials (and
only these credentials) are suggested.
5.3 Dashlane
Dashlane has been installed by more than one million users, and it
supports a11y, Autofill Framework, and OpenYOLO. When Dash-
lane uses a11y, it shows its icon close to the form to fill; when the
user clicks on it, the app is recognized and Dashlane suggests the
related credentials (see Figure 1a); otherwise it asks to create a new
entry. Instead, with the Autofill Framework, it directly shows a
window with the suggested credentials or the launcher for creating
a new entry, saving one interaction with the user.
Mapping implementation. Dashlane implements the mapping
by means of two layers. The first one is a hardcoded mapping pack-
age → domain names containing 81 entries. The second layer is a
heuristic-based mapping that attempts to infer which domain name
should be associated to a given package name (this layer is used
only if the package name is not contained in the static mapping).
Our analysis revealed that such heuristic works in this way: Dash-
lane first splits the package name in components separated by the
dots (e.g., the aaa.bbb.ccc is split in the three components aaa, bbb,
and ccc). Then, for each component, it checks whether at least three
of its characters are contained in the “website” field of one (or more)
of Dashlane entries. For example, the package name xxx.face.yyy
triggers an auto-suggestion for facebook.com credentials (as well as
anything associated with facts.com, for example).
Exploitation. The static mapping is rather small and many entries
are tied to well-known apps and websites. However, we noticed
that such mapping is many-to-one. Therefore, there are multiple
package names pointing to the same domain name. For example,
we found that both com.etrade.mobilepro.activity and com.etrade.
tabletapp point to www.etrade.com, the official website of the Etrade
online banking platform: the two apps appear to be the smartphone
and tablet versions of the same product, respectively.
Consider a user who has installed the smartphone version of
the app. An attacker could then exploit the many-to-one mapping
by luring the victim to install a malicious app having the package
name of the tablet version (that the user did not already install): in
this case, the attacker does not need to lure the victim to uninstall
the first app (as it would be the case without the many-to-one
mapping). We reported this attack for the sake of completeness, but
we acknowledge it is affected by practicality issues.
However, the second layer of the mapping is severely vulnerable.
In fact, it is sufficient to upload to the Play Store a malicious app
whose package name contains three (or more) letters that overlap
with the domain name the attacker wants to target; in this case, the
malicious app will be auto-filled with the credentials of the victim
domain. Furthermore, it is worth noticing that the malicious app
can obtain credentials from multiple domains. For instance, we sub-
mitted to the Play Store an app with package name com.lin.uber.face:
when opening this app, Dashlane promptly suggests Linkedin, Uber,
and Facebook credentials.
Regarding OpenYOLO, Dashlane is exploitable exactly as a11y/
Autofill Framework, since the selection of credentials relies on the
package name, which is parsed as previously described. Therefore,
we wrote another malicious app embedding the OpenYOLO client
library and we were able to obtain the credentials.
Interestingly, we have noticed that when Dashlane uses Autofill
Framework instead of a11y, it performs some additional checks and
it is able to determine that our simple proof-of-concept attempting
to impersonate Facebook cannot be verified. In this case, a warning
is shown to the user. To the best of our understanding, Dashlane
employs a hardcoded list of well-known package name and signa-
ture pairs, and it checks our app against it. This is a promising step
forward in the right direction. However, we found that these checks
are easily bypassable. In fact, it is sufficient for a malicious app to
not be compatible with the Autofill framework (this can be done
by not using the new autofill-related XML attributes), and this will
be enough to force Dashlane to rely on a11y and the vulnerable