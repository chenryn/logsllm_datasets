**非模拟预处理则是通过数据库服务器来进行预处理动作，主要分为两步：**
第一步是prepare阶段，发送SQL语句模板到数据库服务器；
第二步通过execute()函数发送占位符参数给数据库服务器执行。
**PDO产生安全问题的主要设置如下：**
> ? PDO::ATTR_EMULATE_PREPARES //模拟预处理(默认开启)
>
> ? PDO::ATTR_ERRMODE //报错
>
> ? PDO::MYSQL_ATTR_MULTI_STATEMENTS //允许多句执行(默认开启)
PDO默认是允许多句执行和模拟预编译的，在用户输入参数可控的情况下，会导致堆叠注入。
#### 2.1 没有过滤的堆叠注入情况
    ";
        $row=$pdo->query($sql);
        foreach ($row as $key => $value) {
            print_r($value);
        }
    }catch(POOException $e){
        echo $e->getMessage();
    }
因为在sql进行非法操作，那PDO相当于没用
如果想禁止多语句执行，可在创建PDO实例时将PDO::MYSQL_ATTR_MULTI_STATEMENTS设置为false
    new PDO($dsn, $user, $pass, array(PDO::MYSQL_ATTR_MULTI_STATEMENTS => false))
但是哪怕禁止了多语句执行，也只是防范了堆叠注入而已，直接union即可
#### 2.2 模拟预处理的情况
    setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
        $username = $_GET['username'];
        $sql = "select id,".$_GET['role']." from user where username = ?";
        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(1,$username);
        $stmt->execute();
        while($row=$stmt->fetch(PDO::FETCH_ASSOC))
        {
            var_dump($row);
            echo "";
        }
    } catch (PDOException $e) {
        echo $e;
    }
$role是可控的，导致可实现堆叠注入和in line query
#### 2.3当设置PDO::ATTR_ERRMODE和PDO::ERRMODE_EXCEPTION开启报错时
设置方法
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
无论是否开启PDO::ATTR_EMULATE_PREPARES-模拟预处理
此时SQL语句如果产生报错，PDO则会将报错抛出
除设置错误码之外，PDO 还将抛出一个 PDOException 异常类并设置它的属性来反射错误码和错误信息。
此设置在调试期间也非常有用，因为它会有效地放大脚本中产生错误的点，从而可以非常快速地指出代码中有问题的潜在区域
在这种情况下可以实现error-based SQL Injection
使用GTID_SUBSET函数进行报错注入
    http://192.168.1.3/pdo.php?role=id OR GTID_SUBSET(CONCAT((MID((IFNULL(CAST(CURRENT_USER() AS NCHAR),0x20)),1,190))),6700)&username=admin&username=admin
#### 2.4 非模拟预处理的情况
    setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
        $username = $_GET['username'];
        $sql = "select id,".$_GET['role']." from user where username = ?";
        $stmt = $pdo->prepare($sql);
        $stmt->bindParam(1,$username);
        $stmt->execute();
        while($row=$stmt->fetch(PDO::FETCH_ASSOC))
        {
            var_dump($row);
            echo "";
        }
    } catch (PDOException $e) {
        echo $e;
    }
此时堆叠注入已经歇逼
但inline query，报错注入依然坚挺可用
### ③一个安全的case
只要语句内存在有用户非纯字符可控部分，便不够安全；那我们就用非模拟预处理sql写法
    $dbh->setAttribute(PDO::ATTR_EMULATE_PREPARES, false); 
它会告诉 PDO 禁用模拟预处理语句，并使用 real parepared statements 。
这可以确保SQL语句和相应的值在传递到mysql服务器之前是不会被PHP解析的（禁止了所有可能的恶意SQL注入攻击）。
如下为一个安全使用PDO的case
    $pdo = new PDO('mysql:dbname=testdatabase;host=localhost;charset=utf8', 'root', 'root');
    $pdo->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);
    $stmt = $pdo->prepare('SELECT * FROM wz_admin WHERE id = :id');
    $stmt->execute(array('id' => $id));
    print_r($stmt -> fetchAll ());
    exit();
> 当调用 prepare() 时，查询语句已经发送给了数据库服务器，此时只有占位符
>
> 发送过去，没有用户提交的数据；当调用到
> execute()时，用户提交过来的值才会传送给数据库，它们是分开传送的，两者独立的，SQL注入攻击者没有一点机会
## 0x04 案例剖析-ThinkPHP5中PDO导致的一个鸡肋注入(来自Phithon师傅)
我们来看Phithon师傅几年前博客发的一个case
https://www.leavesongs.com/PENETRATION/thinkphp5-in-sqlinjection.html
    where('id', 'in', $ids)->select();
        }
    }
如上述代码，如果我们控制了in语句的值位置，即可通过传入一个数组，来造成SQL注入漏洞。
文中已有分析，我就不多说了，但说一下为什么这是一个SQL注入漏洞。IN操作代码如下：
    parseClosure($value);
        } else {
            $value = is_array($value) ? $value : explode(',', $value);
            if (array_key_exists($field, $binds)) {
                $bind  = [];
                $array = [];
                foreach ($value as $k => $v) {
                    if ($this->query->isBind($bindName . '_in_' . $k)) {
                        $bindKey = $bindName . '_in_' . uniqid() . '_' . $k;
                    } else {
                        $bindKey = $bindName . '_in_' . $k;
                    }
                    $bind[$bindKey] = [$v, $bindType];
                    $array[]        = ':' . $bindKey;
                }
                $this->query->bind($bind);
                $zone = implode(',', $array);
            } else {
                $zone = implode(',', $this->parseValue($value, $field));
            }
            $whereStr .= $key . ' ' . $exp . ' (' . (empty($zone) ? "''" : $zone) . ')';
        }
可见，`$bindName`在前边进行了一次检测，正常来说是不会出现漏洞的。但如果`$value`是一个数组的情况下，这里会遍历`$value`，并将`$k`拼接进`$bindName`。
也就是说，我们控制了预编译SQL语句中的键名，也就说我们控制了预编译的SQL语句，这理论上是一个SQL注入漏洞。那么，为什么原文中说测试SQL注入失败呢？
这就是涉及到预编译的执行过程了。通常，PDO预编译执行过程分三步：
  1. `prepare($SQL)` 编译SQL语句
  2. `bindValue($param, $value)` 将value绑定到param的位置上
  3. `execute()` 执行
这个漏洞实际上就是控制了第二步的`$param`变量，这个变量如果是一个SQL语句的话，那么在第二步的时候是会抛出错误的：
[
所以，这个错误“似乎”导致整个过程执行不到第三步，也就没法进行注入了。
但实际上，在预编译的时候，也就是第一步即可利用。我们可以做有一个实验。编写如下代码：
    <?php
    $params = [