case).
At the end of the period, all mintettes send txset to the
central bank, along with additional information in order to
achieve integrity, which we discuss in the next section.
a) Security: In our ﬁrst threat model, where all transac-
tions are processed by a set of mintettes with honest majority,
it is clear that (1) no double-spending transactions will be
accepted into txset by honest mintettes, and (2) the conﬁrmation
given to a user in Line 17 of Algorithm V.3 can be wielded
by the user as evidence that the mintette promised to seal
the transaction. Thus, in our ﬁrst threat model — in which
all
transactions are processed by a set of mintettes with
honest majority — the ﬁrst and second integrity properties
in Section V-A are already satisﬁed by our basic consensus
protocol.
b) Communication overhead: Importantly, all commu-
nication between the mintettes is done indirectly via the
user (using the bundles of evidence), and there is no di-
rect communication between them. This allows for a low
communication overhead for the mintettes, especially with
Brieﬂy, in Algorithm V.2 the mintette ﬁrst checks if the
current transaction is valid and if the address is within its remit,
and returns ⊥ otherwise. It then proceeds if the address identiﬁer
either has not been spent before (and thus is in utxo), or if it has
already been associated with the given transaction (and thus the
pair is in pset). In those cases, it removes the address identiﬁer
from utxo and associates it with the transaction in pset; these
actions are idempotent and can be safely performed more than
once. The mintette then returns a signed acknowledgment to the
user. If instead another transaction appears in pset associated
with the address identiﬁer, then the address is acting as an input
in two different transactions — i.e., it is double-spending — and
the mintette returns ⊥. It may also store the two transactions
to provide evidence of double spending.
At the end of the ﬁrst phase, an honest user will have
received some signatures (representing ‘yes’ votes) from the
owners of the input addresses of the new transaction. Users
should check the signatures returned by these mintettes and
immediately return a failure if any is invalid. Once the user
has received signatures from at least a majority of owners for
each input, she can now send the transaction, coupled with a
“bundle of evidence” (consisting of the signatures of the input
mintettes) to represent its validity, to the owners of the output
addresses (who, recall, are the same for all output addresses).
6
respect to existing systems such as Bitcoin and Ripple/Stellar
(in which the respective miners and servers must be in
constant communication), which facilitates — as we will see in
Section V-D2 — the scalability and overall performance beneﬁts
of RSCoin.
C. Achieving auditability
While our basic consensus mechanism already achieves
some of our desired integrity properties (at least in our weaker
threat model), it is still not clear that it provides any stronger
notions of integrity, or that it provides any integrity in a more
hostile environment. To address this limitation, we present
in this section a way to augment both the lower-level blocks
discussed in Section VI-A and the basic consensus mechanism.
At a high level, a mintette now maintains a high-integrity log
that highlights both its own key actions, as well as the actions
of those mintettes with whom it has indirectly interacted (i.e.,
from whom it has received signatures, ferried through the user,
in the process of committing a transaction).
In more detail, each mintette maintains a log of absolutely
ordered actions along with their notional sequence number.
Actions may have one of three types: Query, Commit and
CloseEpoch. The Query action signals an update to pset as a
result of an input address being assigned to a new transaction
(Line 6 of Algorithm V.2), so for this action the log includes
the new transaction. The Commit action signals an update to
utxo and txset as a result of receiving a new valid transaction
(lines 15 and 16 of Algorithm V.3, respectively), so for this
action the log includes the transaction and its corresponding
bundle of evidence.
To facilitate the CloseEpoch action, each mintette stores
not only the log itself but also a rolling hash chain; i.e., a
head that acts as a witness to the current state of the log, so
hseq = H(aseq(cid:107)hseq−1), where aseq is the log entry of the
action and hseq−1 is the previous head of the chain.
To share this witness, mintettes include a signed head in
every message they emit; i.e., in line 7 of Algorithm V.2
and line 17 of Algorithm V.3,
the mintette m computes
σ $←− Sig.Sign(skm, (txc, addrid, h, seq) (where h is the head
of its chain) rather than σ $←− Sig.Sign(skm, (txc, addrid)), and
outputs (pkm, σ, h, seq). Now that mintettes are potentially
aware of each others’ logs, the CloseEpoch action — which,
appropriately, marks the end of an epoch — includes in the log
the heads of the other chains of which the mintette is aware,
along with their sequence number. This results in the head of
each mintette’s chain depending on the latest known head of
both its own and other chains; we refer to this phenomenon
as cross-hashing (which, in effect, implements a cryptographic
variant of vector clocks [30]).
We can now argue that these augmented lower-level blocks
provide sufﬁcient insight into the actions of the mintettes that
stronger notions of integrity can be achieved. In particular, we
have the following lemma:
Lemma V.1. In both of our threat models, the augmented
consensus protocol outlined above provides timed personal
audits, universal audits, and exposed inactivity (as deﬁned in
Section V-A).
7
Proof: (Informal.) To prove that our protocol provides
timed personal audits, observe that if the log reported by any
mintette (or equivalently its hash at any log position) forks at
any point from the record of a user or other mintette, then the
signed head of the hash chain serves as evidence that the log
is different. To remain undetected, the mintette must therefore
provide users with the signed head of a hash chain that is a
preﬁx of the actual hash chain it will report. Both the Query
and Commit messages leading to a signed hash, however,
modify the action log. Providing an outdated hash thus would
not contain the latest action, so again there is evidence that
such an action should have been recorded (in the form of the
signed response to the message that should prompt the action),
which also incriminates the mintette. Thus a mintette that does
not wish to be detected and incriminated may only refrain from
responding to requests requiring actions that would change its
log.
To prove that our protocol provides universal audits and
exposed inactivity, we ﬁrst note that, despite the lack of
synchronization between mintettes within periods, we can detect
when an action is committed to a mintette log a ‘signiﬁcant
time’ after another action. This is due to the fact that the second
message of the 2PC protocol that users send to mintettes carries
the hash heads from all input mintettes involved. This forms
a low-degree random graph with good expansion properties,
and we expect that in a short amount of time mintettes will
have hash chains dependent on the hash chains of all other
mintettes. Thus, if two actions are separated by a sufﬁciently
long period of time, it is extremely likely that a head dependent
on the ﬁrst action has propagated to a super-majority of other
mintettes. Checking this property allows us to detect which
came ﬁrst with very high probability. Using this observation,
everyone may audit claims that a mintette contributed to an
action (e.g., processing the ﬁrst query of the 2PC protocol for
a valid transaction) in a timely fashion, by using the process
above to detect whether the claimed action from the mintette
is or is not very likely to have come after the same action was
committed by all other mintettes concerned.
Finally, RSCoin makes the key security assumption that all
shards are composed of an honest majority of mintettes. This is
not quite the same as assuming an overall honest majority
of mintettes, but it can be related to the more traditional
assumption that each mintette behaves honest with some
probability, as we demonstrate in the following lemma:
Lemma V.2. Given a fraction of α corrupt mintettes, the
probability that y shards, composed each of Q mintettes, all
have an honest majority is
(cid:18) Q − 1
2
(cid:19)y
Pr[secure] = F
; Q; α
,
where F (k; N ; p) is the cumulative distribution function of
a binomial distribution over a population of size N with a
probability of success p.
Proof: The probability that a single shard composed from
random mintettes has an honest majority is directly the cumu-
lative distribution ρ = F
. Since security requires
an honest majority across all shards we get Pr[secure] = ρy.
2 ; Q; α
(cid:16) Q−1
(cid:17)
This lemma demonstrates that the higher the number of
shards, the lower the probability that all of them will be secure
(i.e., covered by an honest majority of mintettes). Thus, we
recommend ﬁxing the number of shards, on the basis of load
balancing requirements, to the smallest practical number. A
mapping can then be deﬁned between the address space and
the shards by simply partitioning equally the space of address
identiﬁers amongst them. For a given total number of mintettes
M, the minimal number of shards of size Q that should be
used is (cid:98)M/Q(cid:99).
D. Performance
1) Theoretical analysis: Looking back at the algorithms in
Section V-B, we can get at least a theoretical estimate of the
communication and computational complexity of the system.
Denote by T the set of transactions that are generated per
second; by Q the number of mintettes that own each address;
and by M the number of total mintettes.
For a transaction with m inputs and n outputs, a user sends
and receives at most mQ messages in the ﬁrst phase of the
2PC protocol (line 5 of Algorithm V.1) and sends and receives
at most Q messages in the second phase (line 12). For the user,
each transaction thus requires at most 2(m + 1)Q messages.
In terms of the communication complexity per mintette,
we assume that each mintette receives a proportional share
of the total transactions, which is ensured as the volume of
transactions grow, by the bank allocating shards of equal sizes
to all mintettes. Then the work per mintette is
P
tx∈T 2(mtx + 1)Q
.
M
In particular, this scales inﬁnitely: as more mintettes are added
to the system, the work per mintette decreases (in a linear
fashion) and eventually goes to zero.
2) Experimental analysis: To verify these performance
estimates and to measure the latency a typical user would
experience to conﬁrm a transaction, we implemented the basic
consensus mechanism presented in Section V-B and measured
its performance on a modest cluster hosted on Amazon’s
Elastic Compute (EC2) infrastructure. Our implementation7
consists of 2458 lines of Python code: 1109 lines deﬁne the
core transaction structure, cryptographic processing, and 2PC
protocols as a Twisted service and client; 780 lines are devoted
to unit and timing tests; and 569 lines use the Fabric framework
to do conﬁguration, deployment management (DevOps), live
testing, and visualizations. Both the clients and the mintettes
are implemented as single-threaded services following a reactor
pattern. All cryptographic operations use the OpenSSL wrapper
library petlib, and we instantiate the hash function and
digital signature using SHA-256 and ECDSA (over the NIST-
P224 curve, as optimized by K¨asper [16]) respectively. The
implementation and all conﬁguration and orchestration ﬁles
necessary for replicating our results are available under a BSD
license.
Our experimental setup consisted of 30 mintettes, each
running on an Amazon EC2 t2.micro instance in the EU
(Ireland) data center (for reference, each cost $0.014 per hour
7Available at https://github.com/gdanezis/rscoin
8
Benchmark
Hash
Sign
Verify
Check tx
Query msg
Commit msg
µ (s−1)
σ
1,017,384.86 41,054.93
2316.40
89.84
17,043.63
4651.20
3585.02
1358.31
1006.49
95.17
120.20
31.66
TABLE II: Micro-benchmarks at the mintettes
as of August 2015). We assigned three mintettes to each shard
of the transaction space, so a quorum of at least two was
required for the 2PC. A different set of 25 servers on the same
data center was used for stress testing and estimating the peak
throughput in terms of transactions per second. Each of those
test machines issued 1000 transactions consisting of two inputs
and two outputs. For wide area networking latency experiments
we used a residential broadband cable service and an Ubuntu
14.02.2 LTS Linux VM running on a 64-bit Windows 7 laptop
with a 2.4 GHz i7-4700MQ processor and 16GB RAM.
Table II reports the mean rate and the standard deviation of
key operations we rely on for RSCoin.8 Hash, Sign and Verify
benchmark the number of basic cryptographic operations each
mintette can perform per second (including the overhead of
our library and Python runtime).
For the other benchmarks, we consider a single transaction
with one input and two outputs (we observe that as of September
2014, 53% of Bitcoin transactions had this structure, so this is a
reasonable proxy for real usage). The check tx benchmark then
measures the rate at which a mintette can parse and perform
the cryptographic checks associated with this transaction. This
involves a single signature check, and thus its difference
from the Sign benchmark largely represents the overhead
of parsing and of binary conversion in Python. Guided by
this benchmark, we chose to represent ECDSA public keys
using uncompressed coordinates due to orders-of-magnitude
slowdowns when parsing keys in compressed form.
The query msg and commit msg benchmarks measure the
rate at which each mintette can process the ﬁrst and second
message of the 2PC respectively for this transaction. These
include full de-serialization, checks from persistent storage of
the utxo, cryptographic checks, updates to the utxo, signing,
and serialization of responses. These benchmarks guided our
design towards not synchronizing to persistent storage the utxo
before each response, and relying instead on the quorum of
mintettes to ensure correctness (a design philosophy similar to
RAMCloud [29]). Persisting to storage before responding to
each request slowed these rates by orders of magnitude.
Figure 3 illustrates the latency a client would experience
when interacting with the mintettes. Figure 3a illustrates the
experiments with client machines within the data center, and
point to an intrinsic delay due to networking overheads and
cryptographic checks of less than 0.5 seconds. This includes
both phases of the 2PC.
8All measurements were performed on a single thread on a single core,
using a reactor pattern where networking was necessary.
(a) Local area network (EC2)
Fig. 4: Throughput (90th percentile and standard error), in
transactions per second, as a function of the number of mintettes,
for transactions with two freshly issued coins as inputs (run
1) and transactions with two arbitrary previous transactions as
inputs (run 2).
The gap between the micro-benchmarks relating to the
message processing for the two phases (1358.31 s−1 and
1006.49 s−1 respectively) and the rate of transactions observed
under end-to-end conditions (approximately 400 s−1) indicates
that at this point bandwidth, networking, or the interconnection
with the process are scaling bottlenecks for single mintettes.
In particular no pipelining was implemented as part of the
client (although the mintettes support it) and thus every request
initiates a fresh TCP connection, with the slowdowns and
resource consumption on the hosts that this entails.
VI. THE RSCOIN SYSTEM
With our consensus protocol in place, we now describe the
structure of RSCoin, focusing on the interaction between the
mintettes and the central bank, and on the overall parameters
and properties of the system. We ﬁrst describe the structure and
usage of RSCoin (Sections VI-A and VI-B) and then address
considerations that arise in how to allocate fees to mintettes
(Section VI-B1); overlay RSCoin on top of an existing cryp-
tocurrency like Bitcoin (Section VI-B2); incentivize mintettes
to follow the consensus protocol and present a collectively
consistent ledger to the central bank (Section VI-C); and set
concrete choices for various system parameters (Section VI-D).
A. Lower-level blocks
A lower-level block produced by a mintette m within periodi
looks like b = (h, txset, σ, mset), where h is a hash, txset is
a collection of transactions, and σ is a signature from the
mintette that produced this block. The fourth component mset
speciﬁes the cross-chain property of lower-level blocks (recall
from Section V-C that mintettes may reference each others’
blocks) by identifying the hashes of the other previous blocks
that are being referenced.
Denote by pkbank the bank’s public key and by DPKi
the set of mintettes authorized by the bank in the previous
(b) Wide area network (Broadband)