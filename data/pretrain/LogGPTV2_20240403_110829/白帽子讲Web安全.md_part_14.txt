Escape character is ‘^]’.
TRACE / HTTP/1.1
Host: foo.bar
X-Header: test
HTTP/1.1 200 OK
Date: Mon, 02 Dec 2002 19:24:51 GMT
Server: Apache/2.0.40 (Unix)
Content-Type: message/http
TRACE / HTTP/1.1
Host: foo.bar
X-Header: test
利用这个特性，可以把HttpOnly Cookie读出来。
结果如下：
JavaScript读取到cookie
目前各厂商都已经修补了这些漏洞，但是未来也许还会有新的漏洞出现。现在业界
给关键业务添加HttpOnly Cookie已经成为一种“标准”的做法。
但是，HttpOnly不是万能的，添加了HttpOnly不等于解决了XSS问题。
XSS攻击带来的不光是Cookie劫持问题，还有窃取用户信息、模拟用户身份执行操
作等诸多严重的后果。如前文所述，攻击者利用AJAX构造HTTP请求，以用户身份完成
的操作，就是在不知道用户Cookie的情况下进行的。
使用HttpOnly有助于缓解XSS攻击，但仍然需要其他能够解决XSS漏洞的方案。
3.3.2 输入检查
常见的Web漏洞如XSS、SQL Injection等，都要求攻击者构造一些特殊字符，这些
特殊字符可能是正常用户不会用到的，所以输入检查就有存在的必要了。
输入检查，在很多时候也被用于格式检查。例如，用户在网站注册时填写的用户
名，会被要求只能为字母、数字的组合。比如“hello1234”是一个合法的用户名，
而“hello#$^”就是一个非法的用户名。
又如注册时填写的电话、邮件、生日等信息，都有一定的格式规范。比如手机号
码，应该是不长于16位的数字，且中国大陆地区的手机号码可能是13x、15x开头的，
否则即为非法。
这些格式检查，有点像一种“白名单”，也可以让一些基于特殊字符的攻击失效。
输入检查的逻辑，必须放在服务器端代码中实现。如果只是在客户端使用
JavaScript进行输入检查，是很容易被攻击者绕过的。目前Web开发的普遍做法，是同
时在客户端JavaScript中和服务器端代码中实现相同的输入检查。客户端JavaScript的
输入检查，可以阻挡大部分误操作的正常用户，从而节约服务器资源。
在XSS的防御上，输入检查一般是检查用户输入的数据中是否包含一些特殊字符，
如、’、”等。如果发现存在特殊字符，则将这些字符过滤或者编码。
比较智能的“输入检查”，可能还会匹配XSS的特征。比如查找用户数据中是否包含
了“”、“javascript”等敏感字符。
这种输入检查的方式，可以称为“XSS Filter”。互联网上有很多开源的“XSS
Filter”的实现。
XSS Filter在用户提交数据时获取变量，并进行XSS检查；但此时用户数据并没有
结合渲染页面的HTML代码，因此XSS Filter对语境的理解并不完整。
比如下面这个XSS漏洞：
其中“$var”是用户可以控制的变量。用户只需要提交一个恶意脚本所在的URL地
址，即可实施XSS攻击。
如果是一个全局性的XSS Filter，则无法看到用户数据的输出语境，而只能看到用
户提交了一个URL，就很可能会漏报。因为在大多数情况下，URL是一种合法的用户数
据。
XSS Filter还有一个问题——其对“”等字符的处理，可能会改变用户数据的语
义。
比如，用户输入：
1+1我是\"天才\"
在JavaScript代码中展示时：
这两段代码，分别得到如下结果：
第一个结果显然不是用户想看到的。
3.3.3 输出检查
既然“输入检查”存在这么多问题，那么“输出检查”又如何呢？
一般来说，除了富文本的输出外，在变量输出到HTML页面时，可以使用编码或转
义的方式来防御XSS攻击。
3.3.3.1 安全的编码函数
编码分为很多种，针对HTML代码的编码方式是HtmlEncode。
HtmlEncode并非专用名词，它只是一种函数实现。它的作用是将字符转换成
HTMLEntities，对应的标准是ISO-8859-1。
为了对抗XSS，在HtmlEncode中要求至少转换以下字符：
& --> &amp;
 &lt;
> --> &gt;
" --> &quot;
' --> &#x27; &apos; 不推荐
/ --> &#x2F; 包含反斜线是因为它可能会闭合一些HTML entity
在PHP中，有htmlentities()和htmlspe-cialchars()两个函数可以满足安全要求。
相应地，JavaScript的编码方式可以使用JavascriptEncode。
JavascriptEncode与HtmlEncode的编码方法不同，它需要使用“\”对特殊字符进行转
义。在对抗XSS时，还要求输出的变量必须在引号内部，以避免造成安全问题。比较下
面两种写法：
var x = escapeJavascript($evil);
var y = '"'+escapeJavascript($evil)+'"';
如果escapeJavascript()函数只转义了几个危险字符，比如‘、”、、\、&、#
等，那么上面的两行代码输出后可能会变成：
var x = 1;alert(2);
var y = "1;alert(2)";
第一行执行额外的代码了；第二行则是安全的。对于后者，攻击者即使想要逃逸出
引号的范围，也会遇到困难：
var y = "\";alert(1);\/\/";
所以要求使用JavascriptEncode的变量输出一定要在引号内。
可是很多开发者没有这个习惯怎么办？这就只能使用一个更加严格的
JavascriptEncode函数来保证安全——除了数字、字母外的所有字符，都使用十六进
制“\xHH”的方式进行编码。在本例中：
var x = 1;alert(2);
变成了：
var x = 1\x3balert\x282\x29;
如此代码可以保证是安全的。
在OWASP ESAPI中有一个安全的JavascriptEncode的实现，非常严格。
/**
* {@inheritDoc}
*
* Returns backslash encoded numeric
format. Does not use backslash character
escapes
* such as, \" or \' as these may
cause parsing problems. For example, if a javascript
* attribute, such as onmouseover,
contains a \" that will close the entire
attribute and
* allow an attacker to inject
another script attribute.
*
* @param immune
*/
public String
encodeCharacter( char[] immune, Character
c ) {
// check for immune
characters
if ( containsCharacter(c,
immune ) ) {
return ""+c;
}
// check for alphanumeric
characters
String hex =
Codec.getHexForNonAlphanumeric(c);
if ( hex == null ) {
return ""+c;
}
// Do not use these
shortcuts as they can be used to break out
of a context
// if ( ch == 0x00 ) return
"\\0";
// if ( ch == 0x08 ) return
"\\b";
// if ( ch == 0x09 ) return
"\\t";
// if ( ch == 0x0a ) return
"\\n";
// if ( ch == 0x0b ) return
"\\v";
// if ( ch == 0x0c ) return
"\\f";
// if ( ch == 0x0d ) return
"\\r";
// if ( ch == 0x22 ) return
"\\\"";
// if ( ch == 0x27 ) return
"\\'";
// if ( ch == 0x5c ) return
"\\\\";
// encode up to 256 with \
\xHH
String temp = Integer.toHexString(c);
if ( c ";
System.err.println(StringEscapeUtils.escapeHt
ml(unescapedHTML));
}
}
可以在适当的情况下选用适当的函数。需要注意的是，编码后的数据长度可能会发
生改变，从而影响某些功能。在写代码时需要注意这个细节，以免产生不必要的bug。
3.3.3.2 只需一种编码吗
XSS攻击主要发生在MVC架构中的View层。大部分的XSS漏洞可以在模板系统中
解决。
在Python的开发框架Django自带的模板系统“Django Templates”中，可以使用
escape进行HtmlEncode。比如：
{{ var|escape }}
这样写的变量，会被HtmlEncode编码。
这一特性在Django 1.0中得到了加强——默认所有的变量都会被escape。这个做法
是值得称道的，它符合“Secure By Default”原则。
在Python的另一个框架web2py中，也默认escape了所有的变量。在web2py的安全
文档中，有这样一句话：
web2py, by default, escapes all variables ren-dered in the view, thus preventing
XSS.
Django和web2py都选择在View层默认HtmlEncode所有变量以对抗XSS，出发点很
好。但是，像web2py这样认为这就解决了XSS问题，是错误的观点。
前文提到，XSS是很复杂的问题，需要“在正确的地方使用正确的编码方式”。看看
下面这个例子：
test
开发者希望看到的效果是，用户点击链接后，弹出变量“$var”的内容。可是用户如
果输入：
$var = htmlencode("');alert('2");
对变量“$var”进行HtmlEncode后，渲染的结果是：