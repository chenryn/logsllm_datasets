::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817188514320}C.4.6. 在 `/etc/crypttab`{.filename} 中添加映射信息 {.title}
:::
::: para
要让系统为该设备设置一个映射，必须在 `/etc/crypttab`{.filename}
文件中有一个条目。如果该文件不存在，创建该文件并将拥有者和组群改为
root（`root:root`{.command}），同时将模式改为
`0744`{.command}。在该文件中使用以下格式添加一行：
:::
``` programlisting
    none
```
::: para
\ 字段应该是 \"UUID=\\"，其中 \ 是
`cryptsetup luksUUID `{.command} 命令给出的 LUKS
uuid。这样可保证在设备节点改变时（例如：`/dev/sda5`{.filename}）仍可识别正确的设备。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
有关 `/etc/crypttab`{.filename} 文件格式详情请阅读
`crypttab(5)`{.command} man page。
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817211018752}C.4.7. 在 `/etc/fstab`{.filename} 中添加条目 {.title}
:::
::: para
在 /etc/fstab
中添加条目。只在需要在设备和挂载点之间建立永久关联时需要。在
`/etc/fstab`{.filename} 文件中使用解密设备
`/dev/mapper/`{.filename}。
:::
::: para
在很多情况下需要在 `/etc/fstab`{.filename} 文件中根据 UUID
或者文件系统标签列出设备。主要目的是在改变设备名称的事件（例如：`/dev/sda4`{.filename}）中提供恒定识别器。以
`/dev/mapper/luks-`{.filename} 格式命名的LUKS
设备名称只是基于设备的 LUKS UUID，因此可保证是恒定的。这可使其适用于
`/etc/fstab`{.filename}
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
`/etc/fstab`{.filename} 格式详情请阅读 `fstab(5)`{.command} man page。
:::
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#Disk_Encryption_Guide.html#idm139817123311408}C.5. 常用后安装任务 {.title}
:::
::: para
下面这部分是关于常用后安装任务的论述
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#new_key}C.5.1. 设定随机生成的密钥作为访问加密块设备的附加方法 {.title}
:::
::: para
以下部分论述的是如何生成密钥和添加密钥。
:::
::: section
::: titlepage
### [⁠]{#Disk_Encryption_Guide.html#idm139817126206960}C.5.1.1. 生成密钥 {.title}
:::
::: para
这将在文件 `$HOME/keyfile`{.filename} 中生成 256 位密钥。
:::
``` programlisting
dd if=/dev/urandom of=$HOME/keyfile bs=32 count=1
chmod 600 $HOME/keyfile
```
:::
::: section
::: titlepage
### [⁠]{#Disk_Encryption_Guide.html#idm139817188555664}C.5.1.2. 在加密设备中将该密钥添加到可用密钥插槽中 {.title}
:::
``` programlisting
cryptsetup luksAddKey  ~/keyfile
```
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817188910144}C.5.2. 为现有设备添加新密码短语 {.title}
:::
``` programlisting
cryptsetup luksAddKey 
```
::: para
提示输入现有密码短语进行验证后，将提示输入新密码短语。
:::
:::
::: section
::: titlepage
## [⁠]{#Disk_Encryption_Guide.html#idm139817119459616}C.5.3. 在设备中删除密码短语或者密钥 {.title}
:::
``` programlisting
cryptsetup luksRemoveKey 
```
::: para
将提示要删除的密码短语，然后是剩下的用来验证的任意密码短语。
:::
:::
:::
:::
[]{#sn-partitioning-lvm.html}
::: appendix
::: titlepage
# [⁠]{#sn-partitioning-lvm.html#sn-partitioning-lvm}附录 D. 了解 LVM {.title}
:::
[]{#sn-partitioning-lvm.html#idm139817206432384 .indexterm}
::: para
LVM（逻辑卷管理）分区提供很多优于标准分区的地方。LVM 分区格式化为
[]{#sn-partitioning-lvm.html#idm139817127290912 .indexterm}
*物理卷*。一个或者多个物理卷合并组成
[]{#sn-partitioning-lvm.html#idm139817118087760 .indexterm}
*卷组*。每个卷组的总存储量可被分为一个或者多个
[]{#sn-partitioning-lvm.html#idm139817199257104 .indexterm}
*逻辑卷*。逻辑卷的功能与标准分区相似。它们有文件系统类型，比如
`ext4`{.systemitem} 和挂载点。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
在大多数构架中引导装载程序无法读取 LVM 卷。必须为 `/boot`{.filename}
分区创建一个标准的非 LVM 磁盘分区。
:::
::: para
但是在 System z 中，[**zipl**]{.application}
引导装载程序使用线性映射支持 LVM 逻辑卷中的 `/boot`{.filename}。
:::
:::
:::
::: para
要更好了解
LVM，可将物理卷想象为一堆*块*。每一个块就是一个用来保存数据的存储单位。几堆块可合并为一个更大的堆，就像物理卷合并为一个卷组。得到的堆可重新分成几个任意大小的小堆，就像将卷组分成几个逻辑卷。
:::
::: para
管理员可以在不损坏数据的情况下增大或者缩小逻辑卷，这与标准磁盘分区不同。如果卷组中的物理卷位于不同的驱动器或者
RAID 阵列，那么管理员还可以跨存储设备分配逻辑卷。
:::
::: para
如果将逻辑卷缩小到比卷中数据所需容量小的容量，就可能会丢失数据。要确保最大灵活性，请将逻辑卷创建为达到目前需要，并保留有未分配的额外存储容量。可以按要求使用未分配空间安全增长逻辑卷容量。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
默认情况下安装程序在 LVM 卷中创建 `/`{.filename}，并使用独立
`/boot`{.filename} 分区。
:::
:::
:::
:::
[]{#ch-grub.html}
::: appendix
::: titlepage
# [⁠]{#ch-grub.html#ch-grub}附录 E. GRUB 引导装载程序 {.title}
:::
[]{#ch-grub.html#idm139817113723584 .indexterm}
::: para
当打开运行 Linux
的计算机时，操作系统会由一个名为*引导装载程序*的特殊程序载入内存。引导装载程序通常位于系统的主硬盘（或者其他介质设备）中，其唯一职责是将
Linux 内核及其所需文件或者（在有些情况下）其他操作系统载入内存。
:::
::: section
::: titlepage
# [⁠]{#ch-grub.html#s1-grub-arch}E.1. 引导装载程序和系统架构 {.title}
:::
[]{#ch-grub.html#idm139817192604736
.indexterm}[]{#ch-grub.html#idm139817204988944
.indexterm}[]{#ch-grub.html#idm139817199001856
.indexterm}[]{#ch-grub.html#idm139817201269808
.indexterm}[]{#ch-grub.html#idm139817209610896
.indexterm}[]{#ch-grub.html#idm139817124045376
.indexterm}[]{#ch-grub.html#idm139817196409904 .indexterm}
::: para
每个可运行 Red Hat Enterprise Linux
的构架使用的是不同的引导装载程序。下面的表格列车了每个构架可使用的引导装载程序：
:::
::: table
[⁠]{#ch-grub.html#tb-grub-arch-loaders}
**表 E.1. 不同构架所使用的引导装载程序**
::: table-contents
  -----------------------------------------------------------------------
  体系结构                                        引导装载程序
  ----------------------------------------------- -----------------------
  AMD AMD64                                       GRUB
  IBM Power Systems                               yaboot
  IBM System z                                    z/IPL
  x86                                             GRUB
  -----------------------------------------------------------------------
:::
:::
::: para
这个附录讨论的是在 Red Hat Enterprise Linux 中用于 x86 构架的 GRUB
引导装载程序命令和配置选项。
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
Red Hat Enterprise Linux 6 中的 `/boot`{.filename} 和
`/`{.filename}（root）分区只能使用 ext2、ext3 和
ext4（推荐）文件系统。这个分区不能使用其他任何系统，比如 Btrfs、XFS 或
VFAT。其他分区，比如 `/home`{.filename} 可以使用任意支持的文件系统，包括
Btrfs 和 XFS（如可用）。详情请查看 Red Hat
客户门户网站文章：。
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-grub.html#s1-grub-whatis}E.2. GRUB {.title}
:::
[]{#ch-grub.html#idm139817187159872
.indexterm}[]{#ch-grub.html#idm139817121407152 .indexterm}
::: para
*GNU GRand Unified Boot
loader*（GRUB）是启用在系统引导时选择要载入的安装的操作系统或者内核的程序。它还允许用户向内核传递参数。
:::
::: section
::: titlepage
## [⁠]{#ch-grub.html#s2-grub-whatis-booting-bios}E.2.1. 基于 BIOS 的 x86 系统中的 GRUB 和引导过程 {.title}
:::
[]{#ch-grub.html#idm139817173512000
.indexterm}[]{#ch-grub.html#idm139817137192720
.indexterm}[]{#ch-grub.html#idm139817208136080 .indexterm}
::: para
这部分内容讨论了在引导基于 BIOS 的 x86 系统时 GRUB
扮演的特殊角色。要了解引导过程的全貌，请参考 [第 F.2 节
"引导过程的详细介绍"](#ch-boot-init-shutdown.html#s1-boot-init-shutdown-process){.xref}。
:::
::: para
GRUB 在下列阶段将自己载入内存：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    [*使用 BIOS 将阶段 1 或者主引导装载程序从 MBR
    [⁠]{#ch-grub.html#idm139817111121376}[^\[16\]^](#ch-grub.html#ftn.idm139817111121376){.footnote}读入内存*]{.emphasis}主引导装载程序只在
    MBR 中占用小于 512 字节磁盘空间，并可将阶段 1.5 或者阶段 2
    载入引导装载程序。
    :::
    ::: para
    BIOS 无法读取分区表或文件系统。它初始化硬件、读取
    MBR、然后完全依赖于第一阶段的引导装载程序来继续引导过程。
    :::
2.  ::: para