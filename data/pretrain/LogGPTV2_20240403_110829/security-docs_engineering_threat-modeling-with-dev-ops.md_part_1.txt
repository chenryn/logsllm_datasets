---
layout: Conceptual
title: Integrating threat modeling with DevOps
description: Reflections on how it is possible to adopt threat modeling more effectively and efficiently, integrating it with modern DevOps methodologies and tools, and focusing on the value provided to all the various actors involved with the Software Development Lifecycle.
ms.date: 11/07/2022
ms.service: security
ms.author: simonec
author: simonec73
ms.topic: conceptual
---
# Integrating threat modeling with DevOps   
This post is authored by Simone Curzi, Anthony Nevico, Jonathan Davis, Rafael Pazos Rodriguez, and Ben Hanson
## Introduction
Threat modeling is an important security method that helps identifying and prioritizing the most important risk mitigations for an application or system. This paper contains some reflections on how it is possible to adopt threat modeling more effectively and efficiently, integrating it with modern DevOps methodologies and tools, and focusing on the value provided to all the various actors involved with the Software Development Lifecycle.
## Is this paper for you?
This paper is the result of the work of a small team of Security and threat modeling experts from Microsoft and incorporates inputs and ideas of some of the most prominent experts from outside Microsoft. It tries to address a simple but urgent question: what should we do to ensure that the threat modeling process we use is updated to the modern requirements imposed by Agile methodologies and DevOps, so that we provide the required value at the lowest cost?
If you are a Product Owner, the member of a Security team, or simply a developer who are considering to adopt threat modeling as a part of your development lifecycle, this paper is for you.
Analogously, if you already have adopted threat modeling, you may still find practical ideas to improve your process.
Nevertheless, the paper is designed to introduce ideas to improve current processes or to successfully adopt threat modeling as a part of your DevOps process. It does not introduce specific tools or products, even if it is our hope to see those ideas implemented by some tools or products in the future. Therefore, you will not find announcements of new tools or previews of upcoming features, here.
## Why threat modeling is important?
Threat Modeling is one of the primary approaches to designing software solutions securely. Through threat Modeling, you analyze a system identify attack vectors, and develop actions for mitigating risks brought by those attacks. Appropriately done, threat modeling is an excellent component of any Risk Management process. It can also help reduce costs by identifying and fixing design issues early. An old study from NIST estimated the cost of fixing a design issue in production code to be around 40 times higher than repairing it during the design phase. It also saves from incurring costs due to security incidents for the eventual design issues. Consider that the [2022 Cost of Data Breach Report](https://www.ibm.com/account/reg/us-en/signup?formid=urx-51643) from IBM Security and the Ponemon Institute estimates the average cost of a data breach to be \$ 4.35M. For the so-called Mega Breaches, involving the compromise of over 50 million records, the average cost reaches \$ 387M!
Threat modeling is the first activity you can do to secure your solution because it operates on the solution design. This characteristic makes it the most effective security practice you can apply to your SDLC.
Microsoft has a long history with threat modeling. In 1999, two (then) Microsoft employees, Loren Kohnfelder and Praerit Garg, wrote a document, [The threats to our products](https://www.microsoft.com/security/blog/2009/08/27/the-threats-to-our-products/). This paper introduced the STRIDE approach, a synonym for the Microsoft threat modeling process.
## Threat modeling is an evolutionary process
Threat modeling is not a static process; it evolves as needs and technologies change.
- Supply Chain attacks like the recent one targeting [SolarWinds](https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/) demonstrate the need to cover with Threat Modeling more scenarios than the solution itself, including development and deployment.
- [Open Source vulnerabilities](https://www.microsoft.com/security/blog/2020/07/20/open-source-security-managing-risk-software-composition-analysis/) like the recent one for [Log4j](https://www.cisa.gov/uscert/apache-log4j-vulnerability-guidance) have demonstrated the need to supplement the current approach based on the adoption of Software Composition Analysis tools to scan for vulnerable components by designing the solution defensively to limit its exposure.
- The application of new technologies like [Machine Learning](/security/engineering/threat-modeling-aiml) introduces new attack vectors which must be understood and controlled. Consider, for example, the possibility of playing maliciously crafted sounds inaudible by human ears to cause the execution of commands by AI services, as discussed in .
At Microsoft, different product groups practice different variants of threat modeling based on their specific security requirements. Each variant aims to guarantee an adequate level of security assurance to the scenarios it is applied to, but what "adequate" means changes depending on the specific context.
For example, securing Windows is different from securing Azure Cognitive Services because those systems have very different sizes and characteristics. A key aspect of threat modeling is balancing its cost against the risk tolerance for an application. While this may lead to the decision to avoid threat modeling altogether for some scenarios, it is so effective when properly done that we can only recommend adopting it for any IT initiative, including software development and infrastructure deployment projects.
## The importance of focusing on the ROI
The last couple of years has seen a steady increase in interest in threat modeling as a key software development process. This interest is due to the exponential increase of attacks on infrastructures and solutions. Initiatives like the [NIST Recommended Minimum Standard for Vendor or Developer Verification of Code](https://www.darkreading.com/threat-intelligence/nist-brings-threat-modeling-into-the-spotlight) and the [Threat Modeling Manifesto](https://www.threatmodelingmanifesto.org/) have further increased the demand to the point that the current approaches have shown some limits. For example, the outcomes of threat modeling are highly dependent on the adopted process and on who performs the threat model. Thus, there is a concern about getting consistently higher quality out of the experience.
But, what does quality mean for threat modeling? To us, a Quality threat model must have the following characteristics:
- It must identify actionable mitigations, activities that you can do to reduce the potential losses resulting from attacks. Actionable means that those mitigations must be well defined, which means that you get enough information to implement them and then test the implementation. This also means that they must be provided to allow easy consumption from the Development team. With DevOps and Agile, this means that there is an easy path to import the mitigations into the Backlog.
- For each Mitigation, it must identify its status. Some mitigations are new, while others are already existing. The threat model must recognize what is already there and focus on the current risk to identify how to improve the situation.
- It must identify clearly why each Mitigation is required by linking it to the respective threats.
- Moreover, mitigations have a relative strength for each threat. For example, TLS encryption may be a strong mitigation to the risk of having data in transit disclosed, and at the same time, it may be an almost complete mitigation to the risk of having the server spoofed.
- The threats must be credible, well defined, and specific to the solution.
- The threats must have an associated Severity, which should consider both their probability and the impact. The Severity must be reasonable and ideally unbiased.
- It should be possible to get a comprehensive view of the risks and how they can be addressed. This view would be instrumental in driving meaningful conversation with the Security team and with Business Decision Makers, and it would allow us to hide the unnecessary complexities.
This list already shows an important concept: threat modeling can provide value to many roles involved during the software lifecycle, but each role has different needs and requirements. For example, developers need to receive clear information about what they need to implement, and on how to verify that what they implemented behaves as expected. On the other hand, the Security team is typically concerned with the overall security of the ecosystem of infrastructure and applications owned by the organization; therefore, they need to receive information allowing to decide if the system in scope is secure enough and satisfies its compliance requirements. Finally, Product Owners and Business decision makers need to understand what is necessary to make the risk acceptable for the organization.
Such different needs require to provide different views on the threat model, each one of them focused on a specific usage scenario.
A typical problem with threat modeling is that the more it is successful, the more it is difficult for the few available experts to cover the demand while still providing the high quality expected from this experience. As a result, in some cases, quality may be affected negatively. All is good until threat modeling stops providing a significant value compared to the investment. More than a few organizations are impacted by this problem. There have already been a couple of reports of Business Decision Makers starting to question threat modeling because it would fail to deliver significant value for the cost.
With value, we refer to the Business value, which is the ability to provide the information needed to understand the risks represented by the system in scope and drive a meaningful decision process for selecting the proper mitigations to be implemented. Moreover, value is also related to providing the correct information to the Developers and the Testers. Finally, value is related to communicating the residual risk with all the involved parties. We may, for example, measure the value by measuring the impact of the threat modeling process. Suppose we measure the overall risk for the solution by assigning a number to the Severity identified to each threat. In that case, we expect the overall risk to decrease over time per effect of the threat model. If the overall risk remains constant or increases, we may have a problem. The steeper the decrease, the higher the impact of the threat model. Of course, the threat model would not control the implemented mitigations. It is the responsibility of the Product Owner to decide what must be implemented. But the advantage of linking the effectiveness of the threat model with the actual implementation of the mitigations is that it increases the impact on the actual security of the solution, reducing the risk that the threat model remains a theoretical exercise.
Instead, the cost is related to the activities necessary to perform the threat model itself, which is the time required by all the involved parties to produce the threat model and discuss it.
This begs the question: can we define a threat modeling process focused on maximizing the Business value and minimizing the cost?
## The importance of DevOps
We have already highlighted how important it is to ensure that threat modeling is a valuable practice integrated with the DevOps process. This means that the process must be available to all the team members, typically by simplifying and automating it. Most importantly, focusing on threat modeling for DevOps means that we need to ensure that the experience is deeply integrated with the existing DevOps processes.
**Threat modeling should not become yet another burden, but instead** **it should be an asset to facilitate the security requirements elicitation and collection, the design of secure solutions, the inclusion of activities in the Task & Bug Tracking tool of choice, and the evaluation of the residual risk given the current and future state of the solution.**
## Alignment with the DevOps
We can employ various techniques to align threat modeling with the current DevOps practice.
### Threats and mitigations
First, we must focus the threat modeling process on what needs to be done. Threats, which are the attack patterns and how they may happen, are necessary to explain why the team needs to implement a security control. They are also a factor in determining when mitigations should be implemented. Still, the real goal is to determine what needs to be done: the mitigations. Therefore, the approach must lead to the rapid identification of required mitigations and must inform the decision process so that it is easier to determine what to do and when. The main deliverable of this decision process is to have the selected mitigations in the Backlog to make them a part of the standard process. Ideally, the threat modeling tool and the task & bug tracking tool should be synchronized to reflect the updates to the mitigation status in the threat model. This would allow revision of the residual risk dynamically and automatically, which is vital to support informed decisions as part of the usual choreographies of the adopted Agile methodology, like the Sprint Planning meeting.
> **What can you do today?**
>
> As a threat modeling expert, you should ensure to implement a threat modeling process that is able to clearly identify actions and include them into your Task & Bug Tracking of choice. One way may be to adopt one of the many threat modeling tool able to automate this process.
>
> As a Developer, you should focus on the security controls that are identified as necessary. The process should be designed to provide them to you in the same way you expect to receive any other activity.
### Features, user stories, and tasks
We have already stated that the mitigations represent the most important artifact produced by the threat model concerning DevOps integration. Therefore, it is important to clearly define the type of objects created out of those mitigations on the Task & Bug Tracking tool of choice. Some mitigations may last more than a Sprint. Therefore, it may be best to create them as Features. But many are easier and could be implemented in a single Sprint; thus, it would be possible to represent them as user stories or tasks. While generating different work item types may be possible, this may result in a complicated process that may lead to mistakes and confusion. For this reason, it seems more practical to stick with a single work item type. Given that mitigations may be considered children of user stories, you may consider representing them as Tasks, which implies relaxing the requirement of having the said work item type executed in a single Sprint.
> **What can you do today?**
>
> Ensure that mitigations identified by the threat model are represented in the backlog. Identify a way to clearly represent them.
### User stories
The mitigations are not the only artifacts part of a threat model, which could and should be aligned with what you have in your Task & Bug Tracking tool. For example, you may want to represent threats as well. This goal could be achieved by extending the user stories through the addition of a WITHOUT clause to the usual "As a \[who am I\] I want to \[what I want\] so that I can \[do something\]." For example: "As a user, I want to pay with my credit card so that I can buy some goods, WITHOUT having my credit card stolen data stolen". The WITHOUT clause can be mapped to one or more threats and sometimes allowed to express Security Requirements. By ensuring that this alignment between threats and WITHOUT clauses is made explicit within the threat model, we can ensure that possible risks are reflected and taken care of by the team because they are included as part of the user stories. You can also use this relationship to map every Security Requirement identified as part of the user stories to at least a threat.
> **Nice to know**
>
> The WITHOUT clause is not an original idea by the team who has produced this page. We are not sure about who first introduced it, but we are grateful to whoever came with this idea.  
![A diagram mapping threats with user stories and WITHOUT clauses.](media\aligningrequirements.png)    
_Figure 1: Aligning requirements_  
For example, the previous picture shows the following situations:
- Threat A is linked to User Story 1 via clause WITHOUT 1.
- Threat B is linked to User Story 2 via clause WITHOUT 2.
- Threat B is also linked to User Story 3. But User Story 3 is not assigned to any WITHOUT clause. Why? It represents a potential anomaly that you should investigate.
- Threat B is also linked to User Story 1. It's not yet clear if we should allow having user stories linked to more than one threat.
- Threat C is linked to User Story 4, which is associated with WITHOUT 3 and 4. It is not yet clear if we should allow having more than one WITHOUT clause.
- Threat D is not linked to any user story. Are we missing a user story or a WITHOUT clause?
- User Story 5 is linked to a WITHOUT clause, but it has no associated threat. Are we missing a threat or simply a link between a user story and a threat?
We rarely identify Security Requirements as part of the threat model. Therefore, the WITHOUT clause introduces the opportunity to further integrate the experience by extending the threat models with Security Requirements and linking them with the related user stories. This approach would play a significant role in evolving the threat modeling experience from being an assessment repeated over time to become the security design tool for DevOps.
> **What can you do today?**