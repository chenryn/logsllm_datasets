rity. We ﬁrst deﬁne the forward-secure aggregate unforge-
ability of a F ssAggm signature scheme as follows.
Deﬁnition 2. A F ssAggm signature scheme is forward-
secure aggregate unforgeable against adaptive chosen mes-
sage attack if no PPT adversary A can win the following
game with non-negligible probability:
1. Setup. The FssAgg forger A is given P K and T .
2. Queries. The initial interval is i = 1. Proceeding adap-
tively, at interval i, A gets access to a signing oracle
Oi under the current secret key SKi. For each query,
it also supplies a valid FssAgg signature σ1,i−1 on mes-
sages m1,··· , mi−1 signed with secret keys SK1,··· ,
SKi−1 respectively, and an additional message mi to
be signed by the oracle under key SKi. A queries this
as often as it wants until it indicates it is done for the
current interval. Then A moves into the next interval
i + 1 and it is provided with a signing oracle Oi+1 un-
der the secret key SKi+1. The query process repeats
until A chooses to break in.
3. Break-in. At interval b, A chooses to break in and
is given the break-in privilege, the secret key SKb for
interval b.
4. Response. Finally, A outputs a FssAgg signature σ1,t
on messages m1,··· , mt under keys SK1,··· , SKt.
The forger wins if (1) the FssAgg signature σ1,t is a
valid FssAgg signature on messages m1,··· , mt un-
der keys SK1,··· , SKt, and (2) σ1,t is nontrivial, i.e.,
there exist at least one interval k ∈ [1, t] s. t. k ≤ b
during which A did not ask Ok for a signature query
on message mk in the Query phase. The probability
is over the coin tosses of the key-generation algorithm
and of A.
The security of a F ssAgg1 scheme can be deﬁned the
same way as that of a F ssAggm scheme, except that A
is restricted to submitting only one signature query on a
message of its choice for each interval in the Query phase.
343
Deﬁnition 3. A F ssAgg1 scheme is forward-secure aggre-
gate unforgeable against adaptive chosen message attack if
no PPT adversary A can win the following game with non-
negligible probability.
1. Setup. The same as in Deﬁnition 2.
2. Queries. The initial interval is i = 1. Proceeding adap-
tively, at interval i, A gets access to a signing oracle
Oi under the current secret key SKi. For each query,
it also supplies a valid FssAgg signature σ1,i−1 on mes-
sages m1,··· , mi−1 signed with secret keys SK1,··· ,
SKi−1 respectively, and an additional message mi of
its choice to be signed by the oracle under key SKi. A
queries this once and then moves into the next interval
i + 1 and it is provided with a signing oracle Oi+1 un-
der the secret key SKi+1. The query process repeats
until A chooses to break in.
3. Break-in. Same as in Deﬁnition 2.
4. Response. Same as in Deﬁnition 2.
The forger wins if (1) the FssAgg signature σ1,t is a
valid FssAgg signature on messages m1,··· , mt un-
der keys SK1,··· , SKt, and (2) σ1,t is nontrivial, i.e.,
there exist at least one interval k ∈ [1, t] s. t. k  ts
b, a message-level scheme provides better
forward security than an interval-level scheme.
344
Apparently, ordinary (non-aggregate) forward secure au-
thentication schemes provide interval-level forward security.
That is, once the secret key of interval b is exposed, signa-
tures generated in previous intervals are still trustworthy,
while the signatures generated during and after b are no
longer to be trusted.
The BLS-F ssAgg scheme [21] provides interval-level for-
ward security. It uses modular multiplication as the public
aggregation function. As a consequence, it is hard to re-
move a component signature from the aggregate when the
component signature is not known while it is easy to re-
move a component signature from the aggregate when the
component signature is known. Once the attacker breaks in
and obtains the current signing key, it can add new tags to
the aggregate.
It can also remove existing tags (from the
break-in interval) from the aggregate: it simply re-generates
those tags with the current key and removes them through
modular division. Therefore, once the key is compromised,
messages generated in the break-in interval (and future in-
tervals) can not be trusted. Thus, F ssAgg schemes with
reversible aggregate functions provide interval-level forward
security.
In contrast, the FssAgg MAC scheme [21] provides messa-
ge-level forward security. It uses a one-way hash function as
its public aggregation function. Suppose at time ts
b + ∆
(0 < ∆ < 1) of interval b, an attacker breaks in. All mes-
sages generated before time ts
b + ∆ are secure. Even is the
adversary knows the current secret key, it can not change
any part of the message body as doing so requires revers-
ing the aggregation process. Therefore, it can not modify
or delete any message for which the authentication tag has
been already factored into the aggregate. F ssAgg schemes
with irreversible aggregate functions provide message-level
forward security. A F ssAgg1 scheme can be viewed as a spe-
cial F ssAgg scheme which provides message-level forward
security.
4.2
F ssAggm vs. F ssAgg1
When working with a FssAgg authentication scheme with
message level forward security, a signer should sign and ag-
gregate a message as soon as the message is generated to
achieve the message level forward security.
When working with a F ssAggm authentication scheme
with interval level forward security, a signer has two strate-
gies to deal with messages generated in the same interval.
The ﬁrst strategy is that the signer signs a message as soon
as the message is generated. The second strategy is that the
signer waits until it is time to move into next interval and
signs all messages generated during the current interval as a
whole, e.g, using the F ssAggm scheme in a F ssAgg1 way.
These two strategies have diﬀerent security implications
under two diﬀerent system models. In the ﬁrst system model
the “break-in” of a system equals to the “obtaining” of sys-
tem information including the system’s secret signing key.
Most applications of F ssAgg authentication schemes use
this model. For example, in the unattended sensor scenario,
there is no way for a sensor to store its secret key separately
from its data in a hope to make it harder for an attacker
to access its key. An attacker who captures the sensor has
control over both its data and its secret signing key. Even
for a more powerful logging server, since its keys must be ac-
tively used for automatic data generation, it is hard to pre-
vent attackers from gaining access to its keys [14]. Within
this system model, there is no diﬀerence between the use
of these two strategies in term of security guarantee. How-
ever in term of performance, the second strategy is better
than the ﬁrst strategy since it involves less computation: the
signer only signs ONE big message in each interval. There-
fore in this model we can choose to use a F ssAgg1 scheme
or use an F ssAggm scheme in the F ssAgg1 way to achieve
better performance. In other words, we indeed require only
F ssAgg1 signature scheme under this system model.
In the second system model, the “breaking-in” of the sys-
tem does not mean the “obtaining” of the system’s secret
signing key. For example, the secret signing key might be
encrypted under a second factor such as a human pass-
word [10, 18]. The secret key can be updated in the en-
crypted form without the presence of the human password.
The human password is only required to sign a message.
Without knowing the human password, the “breaking-in”
attacker who obtains the secret signing key (in encrypted
form) is not able to generate any authentication tag under
this key. Therefore, it is not able to modify, delete existing
data entries as well as insert new data entries. Within this
system model, if the second strategy is used, a “breaking-in
” attacker is able to modify messages whose authentication
tags have not been folded into the aggregate. So only the
ﬁrst strategy should be used. In this case, we can choose
to use a F ssAggm signature scheme instead of a F ssAgg1
signature scheme because the former supports more mes-
sages if they are initiated with the same maximum number
of intervals T .
The encrypted key update mechanism in [10, 18] is useful.
However because of its requirement of human intervention, it
cannot be used with unattended sensors deployed in remote
places. It also cannot be used in data intensive applications,
such as secure logging systems, where automatic (non-user
intervention) data generation is required. In this paper, we
focus on constructing F ssAgg1 schemes to be used in the
ﬁrst system model which requires only F ssAgg1 schemes. In
this model, we can treat multiple message entries generated
in the same interval as one BIG message and then let the
signer sign only on this BIG message.
QFS shows that any general scenario using a F ssAggm
scheme can equivalently use an F ssAgg1 scheme. It implies
a F ssAgg1 is applicable in broad range of applications de-
spite its restriction on the number of messages to be signed
per interval.
5. BM-F SSAGG1 SIGNATURE SCHEME
In this section, we give the construction of a F ssAgg1
signature scheme extended from the BM forward secure sig-
nature scheme [5]. We begin with the general idea behind
this construction.
5.1 General Idea
The BM forward secure signature (F SS) scheme [5] is
based on modifying the Fiat-Shamir ordinary signature sche-
me [11] and on the fact that squaring in QRn is a one-way
permutation. Speciﬁcally, the public key contains l values
v1,··· , vl ∈ QRn. The secret key for interval j contains
the root si,j ∈ QRn of vi of degree 2T−j+1 for i = 1,··· , l.
Hence, Key Update is just squaring: si,j+1 ← s2
i,j. A signa-
ture in the j-th interval is a non-interactive proof of knowl-
edge of 2T−j+1-th root in composite order group. An inter-
protocol which
active zero-knowledge proof scheme is a
(cid:80)
has the following three-round communication structure:
1. Prover → Veriﬁer: commitment y;
2. Prover ← Veriﬁer: challenge c;
3. Prover → Veriﬁer: response z.
prover. The prover calculates a response z ← r ·(cid:81)l
In the corresponding proof system of the BM F SS scheme,
at time j, the prover ﬁrst selects a random number r, com-
putes the commitment y as y ← r2T +j−1
and sends y to
the veriﬁer. After receiving the commitment, the veriﬁer
picks a random l-bits challenge c1 ··· cl and sends it to the
i=1 sci
under the challenge c1 ··· cl using the secret knowledge si,j
it has. The random r is used to blind the response. The
randomized response z is sent to the veriﬁer. Finally the
veriﬁer veriﬁes whether the response is a valid answer under
its challenge. The above protocol can be turned into a sig-
nature scheme using the Fiat-Shamir transform where the
random challenge c picked by the veriﬁer is replaced as the
hash output over the commitment y and the to-be-signed
message m, e.g. c1 ··· cl ← H(j, y, m).
i,j
A signature from the BM F SS scheme has a format of
(z, c). Our goal is to ﬁnd a way to aggregate these forward
secure signatures (z1, c1),··· , (zt, ct), one from each inter-
val. At the same time, we want to make sure that aggrega-
tion should not violate the forward security of the BM F SS
scheme. Working on this signature format, the ﬁrst chal-
lenge is how to aggregate the c parts in these signatures.
It seems it is simply impossible to aggregate them. Firstly,
all the c parts in signatures (z1, c1),··· , (zt, ct) have to be
presented individually to allow re-computation of the com-
mitments in the veriﬁcation process. Also we have no way to
evolve these c values because they appear mutually random
- they are values from hash outputs. Therefore we do not
know how to aggregate signatures in this form. Instead, we
write a signature in the form of (z, y). These two signature
forms are equivalent as proofs of knowledge. The diﬀerence
is that the former has better bandwidth than the latter as c
is a hash output with practical length of 160 bits while y is
usually an element of Z∗
n with |n| = 1024.
In the BM F SS scheme, the blind factor r should be
picked randomly so that the corresponding commitment y
appears randomly. However we cannot aggregate random y
values too. Therefore we want to ﬁnd a way to evolve the
blind factors in a way such that their corresponding commit-
ments are related and can be computed from one another.
Recall that the random value rj in interval j is the 2T +j−1-
th root of the commitment yj and the fact that squaring is
a one-way permutation in QRn. We can select r0 randomly
and set a common commitment y as y ← r2T +1
. Then we
can evolve rs through squaring: rj+1 ← r2
j . Our intuition
of security here is that as long as r0 is selected randomly,
without knowing r0 and any other intermediate values, rj
appears random too. That is, an adversary should not be
able to distinguish between a response blinded with rj and
a response blinded with a random value r. Now y is ﬁxed
and not a secret. We can move it as part of the public key.
In fact, the way to set up r0, y and to evolve rj is exactly
the same way which the BM F ss scheme uses to set up the
public/secret keys and evolve the secret key.
0
Now we only need to consider how to aggregate zs. As
rj and si,j are all squares now, zj is a square in QRn too.
345
QRn is a multiplicative group. Therefore we are able to use
multiplication, the group operation over QRn, to aggregate
zjs. The fact that multiplication is a group operation over
QRn is very important for uniqueness of signatures.
5.2 The Scheme
After explaining the idea on how we aggregate forward
secure BM signatures, we are ready to present our BM-
F ssAgg1 signature scheme in Table 2.
The correctness of the BM-F ssAgg1 signature scheme is