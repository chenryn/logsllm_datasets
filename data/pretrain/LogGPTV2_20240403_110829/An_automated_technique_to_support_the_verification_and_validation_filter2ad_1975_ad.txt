### Optimized Text

#### Conducting Experiments with Daikon and Traviando for Runtime Verification

We extended the capabilities of our runtime verifier by implementing a transformer that translates trace data from Mobius simulations into the expected input format for Daikon. Daikon, an industrial-strength invariant detector, starts with a very large set of candidate formulas, which are then reduced while scanning through the traces. We generate these formulas from a set of simulation runs.

The generated formulas, which include both automatically derived and manually specified LTL (Linear Temporal Logic) properties, are focused on functional aspects of the models as discussed in Section 3. These formulas can be evaluated at runtime to monitor the system's behavior.

**Figure 1: Architecture for Distributed Simulation and Runtime Verification**

In our experiments, we used a distributed setup where each host runs a Traviando client that communicates with a central Traviando instance via sockets. The clients send trace data to the central instance, which evaluates the traces against a set of monitors. If a monitor verdict is triggered, a short witness trace of the last k events (k = 150) is sent to the central instance for further inspection and visualization.

#### Botnet Model Evaluation

We extended the peer-to-peer botnet model developed by Van Ruitenbeek and Sanders [20] to study the impact of different defense mechanisms on botnet growth. The original model examines how varying infection and disinfection rates affect the botnet's propagation. In our extension, we introduced two key modifications:

1. **Tagged Customer Concept**: We added a submodel to track the lifespan of a single tagged bot, allowing us to measure its behavior in the system.
2. **Upper Bound on Bots**: We enforced an upper bound on the maximum number of bots to avoid overflow issues, using a limit of \(2^{31} - 1\).

**Figure 2: Extended P2P Botnet Model**

The model includes three atomic submodels:
- **Botnet**: Captures the dynamics of successful bot infections.
- **TaggedBot**: Tracks the behavior of a single tagged bot.
- **AttackArrivals**: Models the arrival process of new bots.

We reorganized the model to include global boolean variables and state variables to control the enabling and disabling of submodels. This allows us to generate sample traces and test configurations more effectively.

#### Sample Trace Generation and LTL Formula Testing

To ensure that our sample traces are representative, we generated traces of varying lengths (1640 ≤ n ≤ 376878) and tested them with different configurations. We used Traviando to check that all activities and state variables cover the desired ranges of values. This approach helps us to validate the model's functionality and ensure that the timing and behavior of the system are accurately reflected.

By combining the use of Daikon and Traviando, we can effectively monitor and verify the behavior of complex systems, such as the peer-to-peer botnet, and provide valuable insights for designing future anti-malware strategies.

---

This optimized text provides a clearer, more coherent, and professional presentation of the original content. It organizes the information logically and ensures that the technical details are presented in a structured and understandable manner.