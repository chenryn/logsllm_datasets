for conducting 
We extended 
via sockets. 
trace data with our runtime verifier 
the Mobius sim­
helpful 
an industrial-strength 
candidate 
formulas 
Daikon starts 
that is reduced while scanning 
with a very large set of 
through 
but only occasionally 
and in  an insuffi­
of Formulas. We generate 
formulas 
from a 
Generation 
set of simulation 
runs. We implemented 
file into the expected 
traces obtained 
from Mobius simulation 
a transformer 
that translates 
a trace 
input format for Daikon. Daikon gen-
978-1-4244-7501-8/10/$26.00 
©201O IEEE 
600 
DSN 2010: Klock & Kemper 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:17 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
that are then reformatted 
to work with Tra­
to Daikon, we extended 
that we use for runtime 
Traviando 
to derive SE­
monitoring. 
stream of attacks 
a network. 
that go through 
dif­
A single successful 
a network node either into a propagation 
generation 
Traviando 
supports 
mode. The model also includes 
a trace analyzer 
erates formulas 
viando, 
In addition 
LTL formulas 
generated 
simulation 
the automated 
manual specification 
more specific 
model. All these formulas 
of types 1-7 on its own. The types of formulas 
properties 
that way are focused on functional 
models as discussed 
3. In addition 
of 
to 
in Section 
of formulas, 
of formulas, 
which we use to obtain 
and more complicated 
formulas 
can then be evaluated 
for a given 
at runtime. 
Figure 1 illustrates 
experiments 
conducted 
and a distributed 
how a dis­
by Mobius 
set of Tra­
by 
that digest trace data generated 
with a module 
Traviando 
into LTL3 formulas 
and 
On each host 
the monitors. 
experiment, 
that communicates 
we launch a Tra­
via sock­
set of simulation 
by Traviando 
evaluators 
Runtime Monitoring. 
tributed 
is monitored 
viando client 
We extended 
Mobius simulators. 
SE-LTL formulas 
that transforms 
corresponding 
finite automata, 
that runs a Mobius simulation 
viando runtime verifier 
ets with Mobius and evaluates 
on-the-fly 
tral Traviando 
is -.1, a short witness 
sent to the central 
figured when clients 
short witness 
inspection 
traces available 
by a human analyst. 
and with respect 
Traviando 
instance 
client 
has sent to it. If a monitor verdict 
trace of the last k   150 events is 
instance 
are launched). 
(the value of k is con­
Traviando 
makes these 
a Mobius simulation 
trace 
to a set of monitors 
that the cen­
for further 
visualization 
and 
Hot 1 
Hot2 
Hotn 
Trace 
. .. : 
:'--------'" 
I 
Figure 1. Architecture 
tion of Distributed Simulation 
for Runtime Verifica­
Runs 
or into a working bot 
botnet. 
Propagation 
further 
attacks 
system with an arrival 
ferent stages when attacking 
attack transforms 
bot that will initiate 
that will perform work for the overall 
bots and working bots alternate 
inactive 
fense mechanisms: 
may be unsuccessful 
which means it is destroyed 
propagation 
removed. 
varying 
probabilities 
rates. They show how prevention 
tection 
botnet growth. 
and disinfection 
Van Ruitenbeek 
infection 
between an active and an 
the effects of de­
phase, an attack 
to move from one stage to the next, 
during the infection 
and working bots, they can be identified 
Similar 
and removed. 
for the 
and 
and Sanders study the effect of 
and of varying 
bot removal 
as well as de­
methods can effectively 
measures 
fight back 
events for an unsuccessful 
When running the corresponding 
Mobius model, we 
of a bot. Since the 
we need to extend the model. Our exten­
we discuss 
two model 
with a tagged customer, 
i.e., 
tagged bot. We also 
expen­
were computationally 
a web report for a sample sim­
in [14] and recognized 
that the 
state, 
such that we 
lifespan 
successful 
in the average 
model accounts 
a) an extension 
of a particular 
trace as described 
So in what follows, 
is mostly simulating 
that the simulations 
that models the behavior 
for the number of bots being in a 
were interested 
original 
particular 
sion uses the concept of a tagged customer, 
can measure the lifespan 
realized 
sive to run. So we generated 
ulation 
simulator 
initial 
infection. 
modifications: 
a distinct 
submodel 
after an initially 
of the arrival 
of successful 
are unsuccessful 
fection. 
In addition 
reorganize 
submodels 
bot. Figure 2 
We also add a state variable 
that en­
forces an upper bound on the maximum number ofbots. We 
use a bound of 231 - 1 to avoid the otherwise 
flow of integer 
global boolean variables, 
one to the enabling 
can disable 
model such that we generate 
bot infections 
condition 
submodel 
one for each submodel, 
even the first stage of a bot in­
to these conceptual 
to the botnet submodel 
state variables. 
shows the overall 
of each activity 
infection, 
in reaching 
a complete 
for test runs. 
changes, 
composed 
Finally, 
such that we 
the model into a composed model with separate 
for the arrival 
process, 
the botnet and the tagged 
model in Mobius. 
the same stream 
but omit all those infections 
that 
over­
possible 
we introduce 
three 
of a single bot 
we also 
and add 
and b) a modification 
5. Evaluation 
of Peer-to-Peer 
Botnet Model 
In this section, 
we discuss 
an extension 
of a peer-to-peer 
botnet model [20]. Van Ruitenbeek 
a stochastic 
model to examine how different 
the growth of a botnet which in turn provides 
defense tactics 
systems. 
The model itself 
can be understood 
factors 
impact 
guidance 
for 
and for the design of future anti-malware 
and Sanders developed 
as an open 
stream. In [20], initial 
bot in­
distributed 
arrival 
rate 
of the number of active propa­
occur with an exponentially 
the arrival 
Remodeling 
fections 
whose value is a function 
gation bots. An initial 
fixed probability 
probability 
fect. So, whenever 
is set to a particular 
bot infection 
p to successfully 
1 - p, it is unsuccessful 
enter the system. With 
and has no further 
bots 
ef­
the number of active propagation 
value, we will see a sequence 
of expo-
when it occurs has a 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
601 
DSN 2010: Klock & Kemper 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:04:17 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems 
& Networks 
(DSN) 
.1!I'ill'
? 'i""i.m. 
Botnet  TaggedBot AttackArrivals 
Figure 2. Extended P2P Botnet Model 
see [8]. In our case, we are mainly interesting 
the existing 
bot­
that enters the system 
the state of 
For a recent 
and Sanders into a composed 
of three atomic models as in 
approach. 
to an initial 
of a customer. 
We reorganize 
distribution 
representing 
(the tagged customer) 
the dynamics 
bot infections 
single customer 
according 
the system just after the arrival 
publication, 
in the modeling 
net model of Van Ruitenbeek 
Mobius model that consists 
Fig. 2: one that captures 
of successful 
that describes 
upper bound to the number of bots, and finally a copy of the 
botnet SAN for the tagged bot, where the number of bots is 
set to be at most one. The arrival 
a new bot 
either to submodel Botnet or TaggedBot 
for the latter. 
by measuring 
how often a new tagged bot is created. 
six ways to remove an existing 
for Botnet). 
We measure the lifespan 
bot 
the time the tagged bot SAN is not idle and 
initial 
above, one 
the botnet SAN model as in [20] but with an 
bot in TaggedBot 
stream delivers 
as described 
of the arrival 
(and same 
of an individual 
stream 
The model contains 
with a preference 
interarrival 
times till 
the first success­
if the number of active 
starts 
A new sequence 
distributed 
nentially 
ful infection. 
propagation 
So the number of attempts 
fection 
is a geometric 
bots is changed or an initial 
for a successful 
infection 
initial 
bot in­
succeeds. 
K with parameter 
p and P{K =  n} =  (1 - p)n-1p is its distribution. 
random variable 
The 
of the time from a restart 
with a newly assigned 
ini­
is the same as the distribution 
bots to a first successful 
of the time 
distribution 
number of active propagation 
tial bot infection 
between two successful 
lang distribution 
of active propagation 
initial 
bot infections, 
with rate A (which  depends 
namely an Er­
on the number 
bots) and K as the number of stages. 
Modeling this in Mobius is possible. 
that corresponds 
the activity 
defined as an Erlang distribution 
ofM as return (K->Mark ()) ; 
and Beta as return (K->Mark () /RateOfAttack* 
to the initial 
The delay of 
is 
with parameters 
bot infection 
settings 
(ActivePropagationBot->Count->Mark()); 
This activity 
has an input gate with predicate 
ActivePropagationBot->Count->Mark() 
==  ErlangMemory->Count->Mark() 
and input function 
K->Mark() =  TheDistribution->Geometric 
(ProbInstallInitialInfection)+l ; 
If those two differ, 
updates 
the Erlang arrival 
the EriangMemory 
activity. 
checks if the number of active prop­
in use 
value currently 
another 
The input predicate 
agation bots equals a memorized 
for the Erlang distribution. 
activity 
is 
restarts 
evaluated 
which we use to 
update K, the number of stages used when sampling 
from 
delay. We 
an Erlang distribution 
checked the consistency 
stream and 
our new version 
model and measured 
configurations. 
variable, 
The input function 
the overall 
arrival 
copies of both in a separate 
test 
before the activity 
of the original 
the generated 
to determine 
rates for various 
performs, 
which in turn 
by running 
arrival 
of an individual 
characteristics 
model only considers 
Adding a Tagged Bot. When one wants to measure per­
while the 
formance 
overall 
the 
The approach 
itself 
tagged customer 
is a 
in particular 
classic 
for an er­
godic queueing  system 
a 
applies. 
modeling, 
that can be analyzed 
in performance 
totals of those objects, 
object, 
pattern 
by studying 
of Sample Traces. Sample traces should 
behavior. 
So they should 
and the range of values 
for the functional 
of all activities 
Since timing is not reflected 
by our 
we can adjust rates to reduce the effect of 
in the model. In order 
two particular 
model 
only the arrival 
and tagged bot 
only the arrival 
and botnet 
which in combi­
model. In order to 
set of 
an additional 
are enabled, 
but 
one configuration 
has a 
we consider 
ranges of values, 
time scales that are present 
all activities, 
one exercises 
the other exercises 
We obtain two sample traces, 
Generation 
be representative 
cover the behavior 
for all state variables. 
LTL formulas, 
different 
to observe 
configurations, 
submodel, 
submodel. 
nation cover all activities 
exercise 
six configurations 
the initial 
minimal initial 
to start with, one has a medium initial 
bots and the remaining 
mum initial 
specific 
the general 
test a finite range of values. 
traces of length 1640 :::; n :::; 376878. 
reporting 
and that ranges of values are sufficiently 
recommendations 
In total, 
of the overall 
we consider 
number of bots differs: 
functionality 
in which all submodels 
initial 
number of a single active propagation 
bot 
total number of 500 
have a maxi­
only in the 
three configurations 
number of 231 - 1 bots and differ 
state of those bots. This set up is inspired 
in software testing 
by 
on how to 
we obtain eight sample 
We use Traviando's 
[14] to check that all activities 