RETURNTRUE
ELSERETURNFALSE
PickSplit(P,level) Partitionthelinesegmentsaccordingtotheir
intersectionswithquadrants
RETURNFALSE
AnotherquadtreevariantisthePMRquadtree(NelsonandSamet,1986)thatisusedto
store polygonal maps. The key is of type line segment in the PMR quadtree, where line
segmentsserveasthebuildingblocktoconstructpolygons.
ThePMRquadtreeisanedge-baseddatastructure. AlinesegmentisstoredinaPMR
quadtreebyinsertingthelinesegmentintothenodescorrespondingtoalltheblocksthatit
intersects. Ifthebucketcapacityisexceeded,thenode’sblockissplitonce,andonlyonce,
intofourequalquadrants. Thus,bucketcapacityisreallyasplittingthreshold. ThePMR
quadtreecanberealizedusingSP-GiST,asgiveninTable5.
TheTrie: Atrie(delaBriandais,1959;Fredkin,1960)isatreeinwhichthebranchingat
anylevelisdeterminedbyonlyaportionofthekeyasinfigure4(a). Thetriecontainstwo
typesofnodes;indexanddatanodes. Inthetrieoffigure4(a),eachindexnodecontains27
linkfields. Inthefigure,indexnodesarerepresentedbyrectangles,whiledatanodesare
representedbyovals.
Allcharactersinthekeyvaluesareassumedtobeoneofthe26lettersofthealphabet.
A blank is used to terminate a key value. At level 1, all key values are partitioned into
27disjointclassesdependingontheirfirstcharacter. Thus,LINK(T,i)pointstoasubtrie
containing all key values beginning with the ith character (T is the root of the trie). On
the jth level the branching is determined by the jth character. When a subtrie contains
only one key value, it is replaced by a node of type data. This node contains the key
value,togetherwithotherrelevantinformationsuchastheaddressoftherecordwiththis
key value, etc. The trie can be realized using SP-GiST, as given in Table 6. Notice that
PathShrinkissetto“LeafShrink”(refertoSection3.1). NodeShrinkissettofalseinthis
realizationofthetrie. AnotheroptionistosettheNodeShrinktotruetorealizetheforest
trie(Knuth,1973),asdiscussedinSection3.1.
SP-GiST 229
Table6. RealizationoftheTrieusingSP-GiST.
Parameters PathShrink=LeafShrink
NodeShrink=False
BucketSize=B
NumberOfSpacePartitions=26
NodePredicate=letterorBlank
KeyType=String
Consistent(E,q,level) IF(q[level]==E.letter)OR
(E.letter==BLANKANDlevel>length(q))
RETURNTRUE
ELSERETURNFALSE
PickSplit(P,level) PartitionthedatastringsinPaccordingto
thecharactervaluesatposition“level”
IFanydatastringhaslengthlength(q))
RETURNTRUE
ELSERETURNFALSE
PickSplit(P,level) FindaCommonprefixamongwordsinP
Updatelevel=level+lengthofthecommonprefix
LetPpredicate=thecommonprefix
PartitionthedatastringsinPaccordingto
thecharactervaluesatposition“level”
IFanydatastringhaslength<level,insertdatastring
inPartition“blank”
IFanyofthepartitionsisstilloverfull
RETURNTRUE
ELSERETURNFALSE
The insert algorithm, given in Table 8, depends on the following interface parameters
andexternalmethods:
1. ParameterPathShrinkspecifieshowdeepweshouldproceedwiththespacedecompo-
sition.
2. MethodConsistentspecifieswhichbranchtofollow.
3. MethodPickSplittosplitover-fullnodes. ThereturnvalueofPickSplittellsuswhenwe
shouldstopthesplittingprocess.
MethodInsertbeginsbycheckingParameterPathShrink. IfPathShrinkissetto“Never
Shrink”,methodInsertperformsasuccessivecreationofindexnodestothemaximumspace
resolution. Iftheparameterissetto“LeafShrink”or“TreeShrink”,theinsertionalgorithm
searchesforthefirstleafnodewithapredicatethatisConsistentwiththekeytobeinserted.
Inthecaseof“TreeShrink”,someeliminatedindexnodesmaybeneededwhilelocatingthe
leaf. Hence,aninternalsplitisperformedto“expand”theeliminatedindexnodes. Iftheleaf
nodeisover-full,thenmethodPickSplitwillbeinvokedcontinuouslytodistributetheentries
amongnonover-fullchildrenoruntilitreachesthemaximumresolutionoftheunderlying
space.NoticethatmethodInsertinvokesmethodclustertodynamicallyre-clusterthenodes
properlyafterinsertion. NodeclusteringisfurtherexplainedinSection6.
232 AREFANDILYAS
Table8. SP-GiSTinsertionalgorithm.
1. INSERT(TreeNoderoot,Key,level)
2. CurrentNode =root/*Initiallyrootisnull*/
3. IFPathShrinkis“NeverShrink”THEN
4. LOOPWHILElevel<SpaceResolutionANDlevel<Keylength
5. IFnodeisNULLTHENE = CreateanewnodeoftypeINDEX
6. FOReachslotiintheindexnodeLOOP
7. IF(Consistent(E[i],key,level))THENindex=i
8. IFNoneisconsistent/*duetoNodeShrink*/
9. THENCreatethemissingindexslotw.r.tlevel
10. index = thepositionofthenewslot
11. CurrentNode = E[index].ptr/*thechildpointedbyentryE[index]*/
12. level = level+1
13. IFCurrentNodeisINDEXnode/*pickachildtogo*/
14. ComparethekeywiththeCurrentNodepredicate
15. IFnomatchANDPathShrinkis“TreeShrink”
16. THENgetthecommonprefixbetweenthetwo
17. ChangeCurrentNodepredicatetothecommonprefix
18. CreateanewINDEXnodewiththerestoftheoldnodepredicate
19. LetCurrentNodebethenewindexnode
20. FOReachslotiintheindexnodeLOOP
21. IF(Consistent(E[i],key,level))THENindex=i
22. IFNoneisconsistent/*duetoNodeShrink*/
23. THENCreatethemissingindexslotw.r.tlevel
24. index = thepositionofthenewslot
25. CurrentNode=CurrentNode[index].ptr
26. INSERT(CurrentNode,key,level+1)/*recursive*/
27. IFCurrentNodeisfullTHEN/*DATAnodeandmayneedtobesplit*/
28. LOOPWHILEPickSplit(node,level)
29. n=CreatenewnodeoftypeINDEX
30. CreateChildrenforthesplitentries
31. Parent(n) = Parent(CurrentNode)
32. Adjustbranchesof‘n’topointtothenewchildren
33. level = level +1
34. ELSEinsertthekeyinCurrentNode/*notafullnode*/
35. Cluster()/*toreclusterthetreenodesinpages*/
SP-GiST 233
Table9. SP-GiSTsearchalgorithm.
1. SEARCH(TreeNoderoot,Key,level)
2. Found = false
3. CurrentNode =root/*Initiallyrootisnull*/
4. LOOPWHILElevel<SpaceResolutionANDCurrentNodeisanindexnode
5. ComparethekeywiththeCurrentNodepredicate
6. IFnomatchANDPathShrinkis“TreeShrink”
7. THENFound = FALSE
8. break
9. FOReachslotiintheindexnodeLOOP
10. IF(Consistent(E[i],key,level))THENindex = i
11. IFNoneisconsistent/*duetoNodeShrink*/
12. THENFound = FALSE
13. break
14. CurrentNode = E[index].ptr/*thechildpointedbyentryE[index]*/
15. level = level+1
16. IFCurrentNodeisNOTNULL/*leafnode*/
17. Searchforthekeyamongleafnodeentries
18. IFKeyisintheleafnodeTHENFound = TRUE
19. RETURNFound
MethodSearchinSP-GiSTisexactlysimilartothatoftheGiSTscheme(seeHellerstein
et al., 1995), and is given in Table 9 for completeness. Method Search uses method
Consistentasthemainnavigationguide. Startingfromtheroot,thealgorithmwillcheck
the search item against all branches using the method Consistent till reaching leaf nodes
(datanodesinSP-GiST).
The algorithm for method Delete in SP-GiST uses logical deletion. Deleted items are
markeddeletedandarenotphysicallyremovedfromthetree. Thiswillsavetheeffortof
reorganizingthetreeaftereachdeletion,speciallyfordata-drivenspace-partitioningtrees.
Arebuildisusedfromtimetotimeasacleanprocedure.
5. ConcurrencyandrecoveryinSP-GiST
Concurrency and recovery in GiST have been addressed in Chakrabarti and Mehrotra
(1999a) and Kornacker et al. (1998). In Kornacker et al. (1998), the authors provide
generalalgorithmsforconcurrencycontrolintree-basedaccessmethodsaswellasarecov-
ery protocol and a mechanism for ensuring repeatable read isolation (Gray, 1978). They
suggesttheuseofNodeSequenceNumber(NSN)forconcurrencycontrol,firstintroduced
inKornackerandBanks(1995).
ForSP-GiST,asplit(onlyattheleaflevel)transformsadatanodeintoanindexnode.
Dataisthendistributedamongnewleafnodesrootedatthatsplitnode. Thisfactsimplifies
theconcurrencycontrolmechanismsignificantly. Forexample,considerthecasewhena
234 AREFANDILYAS
searchforakeyisinterleavedwithaninsertionthatcausesthesplittingofthetargetnode.
Bythetimethesearchreachesthetargetnode,itcannotfalselyconcludethenon-existence
ofthesearchedkey,e.g.,incontrasttoaB-Treescenario,becausethenewnodeisanindex
node. Inthatcase,norightlinksneedtobemaintainedbetweenleavesasthesearchwill
need to continue deeper in the tree not on the siblings level. Thus, no special sequence
numberisneededfortheconcurrentoperationtoknowthatthenodeinquestionhasbeen
split. Theoperationwilldirectlycontinueworkingwiththechildnodes.
PhantomprotectioninGiSThasalsobeenaddressedintwodifferenttechniques. Pred-
icate locking (Eswaran et al., 1976) is used in Kornacker et al. (1998) while the au-
thorsinChakrabartiandMehrotra(1999a),proposeadynamicgranularlockingapproach
(GL/GiST) to phantom protection. We adopt the granular locking technique since it is
morepreferableandlessexpensivethanpredicatelocking. Thefactthata“Containment
Hierarchy”existsinspace-partitioningtrees,representedbySP-GiST,makesthealgorithm
introducedinChakrabartiandMehrotra(1998,1999a)highlyapplicableandmuchsimpler.
Hence,inSP-GiST,becausethenodepredicatesformacontainmenthierarchy,wesimply
usethenodepredicatesforgranularlocks.
The main difference in SP-GiST is that a page may contain multiple SP-GiST nodes.