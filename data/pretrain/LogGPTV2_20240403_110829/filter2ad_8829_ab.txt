#### Free
首先看 free 函数。
    void
    free (void *mem)
    {
      free_to_heap (mem, &__malloc_heap, &__malloc_heap_lock);
    }
直接调用了 `free_to_heap` 函数。
    static void
    __free_to_heap (void *mem, struct heap_free_area **heap)
    {
      size_t size;
      struct heap_free_area *fa;
       /* 检查 mem 是否合法 */
      if (unlikely (! mem))
        return;
    /* 获取 mem 指向的 malloc 块的的实际大小和起始地址 */
      size = MALLOC_SIZE (mem); //获取块的真实大小
      mem = MALLOC_BASE (mem); //获取块的基地址
      __heap_lock (heap_lock); //加锁
      /* 把 mem 指向的空间放到 heap 中  */
      fa = __heap_free (heap, mem, size);
     //如果FA中的空闲区超过  MALLOC_UNMAP_THRESHOLD。就要进行内存回收了,涉及 brk, 看不懂，就不说了，感觉和利用也没啥关系。
首先获得了 内存块的起始地址和大小，然后调用 `__heap_free` 把要 `free` 的内存放到 `heap` 中。
    /*
    语义上的理解是释放掉从mem开始的size大小的内存。换句话说，就是把从从mem开始的，size大小的内存段，映射回heap。
    */
    struct heap_free_area *
    __heap_free (struct heap_free_area **heap, void *mem, size_t size)
    {
      struct heap_free_area *fa, *prev_fa;
      //拿到 mem的 结束地址
      void *end = (char *)mem + size;
      /* 空闲区域链表是按照地址从小到大排列的，这个循环是为了找到 mem 应该插入的位置 */
      for (prev_fa = 0, fa = *heap; fa; prev_fa = fa, fa = fa->next)
        if (unlikely (HEAP_FREE_AREA_END (fa) >= mem))
          break;
      if (fa && HEAP_FREE_AREA_START (fa) size + size;
          if (HEAP_FREE_AREA_START (fa) == end)
        {
          if (prev_fa && mem == HEAP_FREE_AREA_END (prev_fa))
            {
             /* 如果 fa 前一个节点和 mem 是连续的，那么将 fa 前一个节点的空间
                     也并入 fa 节点管理
                   +---------------+---------------+--------------+---------------+
                   |       |pre2_fa|       |prev_fa|      mem     |       |   fa  |
                   +---------------+---------------+--------------+---------------+
                                   ^______________________________________________^
                    将 prev_fa 从链表中移出，同时修改 fa 中的 size
              */
              fa_size += prev_fa->size;
              __heap_link_free_area_after (heap, fa, prev_fa->prev);
            }
        }
          else
        {
          struct heap_free_area *next_fa = fa->next;
           /* 如果 mem 与 next_fa 是连续的，将 mem 并入 next_fa 节点管理
           +---------------+--------------+--------------+---------------+
           |       |prev_fa|      |   fa  |      mem     |       |next_fa|
           +---------------+--------------+--------------+---------------+
                           ^_____________________________________________^ 
           将 fa 从链表中移出，同时修改 next_fa 中的 size
          */
          if (next_fa && end == HEAP_FREE_AREA_START (next_fa))
            {
              fa_size += next_fa->size;
              __heap_link_free_area_after (heap, next_fa, prev_fa);
              fa = next_fa;
            }
          else
            /* FA can't be merged; move the descriptor for it to the tail-end
               of the memory block.  */
              /* 如果 mem 与 next_fa 不连续，将 fa 结点移到 mem 尾部
           +---------------+--------------+--------------+---------------+
           |       |prev_fa|      |   fa  | mem | unused |       |next_fa|
           +---------------+--------------+--------------+---------------+
                              ^___________________^^________________________^
               需要重新链接 fa 与 prev_fa 和 next_fa 的关系
                */
            {
              /* The new descriptor is at the end of the extended block,
             SIZE bytes later than the old descriptor.  */
              fa = (struct heap_free_area *)((char *)fa + size);
              /* Update links with the neighbors in the list.  */
              __heap_link_free_area (heap, fa, prev_fa, next_fa);
            }
        }
          fa->size = fa_size;
        }
      else
         /* 如果fa和 mem之间有空隙或者 mem> HEAP_FREE_AREA_END (fa)，那么可以简单地
           把 mem 插入 prev_fa 和 fa之间 */
        fa = __heap_add_free_area (heap, mem, size, prev_fa, fa);
      return fa;
    }
`__heap_link_free_area` 就是简单的链表操作。没有什么用。
    static __inline__ void
    __heap_link_free_area (struct heap_free_area **heap, struct heap_free_area *fa,
                   struct heap_free_area *prev,
                   struct heap_free_area *next)
    {
      fa->next = next;
      fa->prev = prev;
      if (prev)
        prev->next = fa;
      else
        *heap = fa;
      if (next)
        next->prev = fa;
    }
感觉唯一可能的利用点在于,前后相邻的情况，需要先把 `prev_fa` 拆链表，我们如果可以伪造
`prev_fa->prev`，就可以得到一次内存写的机会，不过也只能写入 `fa` 的值
    fa_size += prev_fa->size;
    __heap_link_free_area_after (heap, fa, prev_fa->prev);
    static __inline__ void
    __heap_link_free_area_after (struct heap_free_area **heap,
                     struct heap_free_area *fa,
                     struct heap_free_area *prev)
    {
      if (prev)
        prev->next = fa;
      else
        *heap = fa;
      fa->prev = prev;
    }
### 总结
怎么感觉没有可利用的点，还是太菜了。以后如果遇到实例一定要补充进来。
tips:
  * 分析库源码时看不太懂可以先编译出来，然后配合这 `ida` 看，所以要编译成 `x86` 或者 `arm` 方便 `f5` 对照看。比如这次，我把 `uClibc` 编译成 `arm` 版后，使用 `ida` 一看，发现 `uClibc` 怎么使用的是 `glibc` 的那一套，一看源码目录发现，原来它已经切换到 `glibc` 这了。
  * 忽然想起来交叉编译环境感觉可以用 docker 部署，网上一搜发现一大把，瞬间爆炸。
参考链接：