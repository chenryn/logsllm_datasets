imum number of processes that can crash (1 ≤ f  t0 : pk /∈ uncertainj(t1).
• (pk ∈ livei(t0)) ∧ (pk ∈ uncertaini(t0 + 1))
⇒ (∀t1 > t0 : pk /∈ downj(t1)).
R5 Conditional crash detection.
If a process pj crashes
and does not appear in the uncertaini set of any other
process pi for an indeﬁnitely long period of time, it
eventually appears in the downi set of each pi. More
precisely:
∀pi, if pj crashes at time t0, and there is a time t1 ≥ t0
such that ∀t2 ≥ t1 we have pj /∈ uncertaini(t2), then
there is a time t3 ≥ t2 such that ∀t4 ≥ t3 we have
pj ∈ downi(t4).
As we can see from this speciﬁcation, at any time t and
for any pair of processes pi and pj, it is possible to have
livei(t) (cid:10)= livej(t) (and similarly for the other sets). Oper-
ationally, this means that distinct processes can have differ-
ent views of the current state of each other process. Let us
also observe that downi is the only safe information on the
current state of the other processes that a process pi has. An
example, involving 9 processes, namely Π = {p1, . . . , p9},
is described in Table 1. The columns (resp., rows) de-
scribe pi’s (resp., pj’s) view of the three sets at some
time ti (resp., tj), e.g., downi(ti) = {p1, p2, p5}, while
livej(tj) = {p5, p6}.
downj (tj)
livej (tj)
uncertainj(tj )
downi(ti)
{p1, p2}
{p5}
∅
livei(ti)
{p3, p4}
{p6}
{p7, p8}
uncertaini(ti)
∅
∅
{p9}
Table 1. Example of sets
The rules [R0-R5] deﬁne a distributed computing model
that interestingly satisﬁes the following strong consistency
property. That property provides the processes with a mutu-
ally consistent view on the possibility to detect the crash of
a given process. More speciﬁcally, if the crash of a process
pk is never known by pi (because pk continuously belongs
to uncertaini), then no process pj will detect the crash of
pk (by having pk ∈ downj). Conversely, if the crash of pi
is known by pj, the other processes will also know it. More
formally, we have (due to space limitation, the proof of this
property is omitted. See [8]):
Property 1 Mutual consistency:
∀i, j : ∀t1, t2 : downi(t1) ∩ uncertainj(t2) = ∅.
2.3 An Upgrading Rule
Let us consider two consecutive instances (runs) of an
upper layer protocol (e.g., the consensus protocol described
in Section 3) built on top of the model deﬁned by the rules
R0-R5. Moreover, let t1 be the time at which the ﬁrst in-
stance terminates and t2 the time at which the second in-
stance starts (t1 < t2). During any instance of the proto-
col the set livei of a process can only downgrade (as no
process can go from downi or uncertaini to livei). But it
is important to notice that nothing prevents to upgrade the
model between consecutive instances, by moving a process
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:06 UTC from IEEE Xplore.  Restrictions apply. 
px ∈ uncertaini(t1) into livei(t2) or downi(t2). Such
an upgrade of a livei or downi sets between two runs of
an upper layer protocol do correspond to “synchronization”
points during which the processes are allowed to renegotiate
the quality of service of their channels (see Section 4).
R6 Upgrade. If no upper layer protocol is running during
a time interval [t1, t2], it is possible that, ∀i, processes
be moved from uncertaini to livei or downi during
that interval.
2.4 On the wait Statement and Examples
it is important to observe that, in order not to be blocked by
a crashed process, a process pi can only issue “anonymous”
wait statements such that
wait until (msgs have been rec. from (n − f) proc.).
In such a wait statement, pi relies only on the fact that at
most f processes can crash.
It does not wait for a mes-
sage from a particular process (as in Proposition 1). This is
an “anonymous” wait in the sense that the identities of the
processes from which messages are received are not spec-
iﬁed in the wait statement; these identities can be known
only when the wait terminates.
Interestingly, the following proposition on the condi-
tional termination of a wait statement can easily be derived
from the previous computation model speciﬁcation.
3 Using the Model
Proposition 1 Let us consider the following statement is-
sued by a process pi at some time t0:
wait until
(cid:1)
(cid:2)
(a msg is rec. from pj) ∨ (pj ∈ downi)
and let us assume that either the corresponding message
has been sent by pj or pj has crashed1.
The model guarantees that this wait statement always
terminates if there is a time t1 (t1 ≥ t0) such that ∀t2 ≥ t1
we have pj ∈ downi(t2) ∪ livei(t2).
This proposition is very important from a practical point
of view. Said in another way, it states that if, from some
time, pj never belongs to uncertaini, the wait statement
always terminates. This is equivalent to say that when,
after some time, pj remains always in uncertaini or
alternatively belongs to livei and uncertaini, there is no
guarantee on the termination of the wait statement (it can
then terminate or never terminate).
To illustrate the model, let us consider here two particu-
lar “extreme” cases. The ﬁrst is is the case of synchronous
distributed systems. As indicated in the Introduction, due to
the upper bounds on processing times and message transfer
delays, these systems correspond to the model where ∀i, ∀t,
we have uncertaini(t) = ∅. It is important to notice that
systems with less synchrony than synchronous systems can
also be such that ∀i, ∀t, we have uncertaini(t) = ∅.
The second example is the case of fully asynchronous
distributed systems where there is no time bound. In that
case, given a process pj, a process pi can never know if pj
has crashed or is only slow, or if its communication chan-
nels are very slow. This type of system does correspond to
the model where we have ∀i, ∀t: uncertaini(t) = Π (or
equivalently, downi(t) = livei(t) = ∅). In these systems
(as it appears in many asynchronous distributed algorithms)
1This means that we consider that the upper layer distributed programs
are well-formed in the sense that they are deadlock-free.
As a relevant example of the way the previous model can
beneﬁt to middleware designers, this section presents a con-
sensus protocol built on top of this model. This problem has
been chosen to illustrate the way to use the model because
of its generality, both practical and theoretical.
3.1 Enriching the Model to Solve Consensus
The consensus problem In the Consensus problem,
every correct process pi proposes a value vi and all correct
processes have to decide on the same value v, that has to be
one of the proposed values. More precisely, the Consensus
problem is deﬁned by two safety properties (Validity and
Uniform Agreement) and a Termination Property [5, 7]:
• Validity: If a process decides v, then v was proposed by
some process.
• Uniform Agr.: No two processes decide differently.
• Termination: Every correct process eventually decides on
some value.
The class 3S of failure detectors
It is well-known that
the consensus problem cannot be solved in pure time-free
asynchronous distributed systems [7]. So, these systems
have to be equipped with additional power (as far as the de-
tection of process crashes is concerned) in order consensus
can be solved. Here we consider that the system is aug-
mented with a failure detector of the class denoted 3S [5]
(which has been shown to be the weakest class of failure
detectors able to solve consensus despite asynchrony [4]).
A failure detector of the 3S class is deﬁned as follows
[5]. Each process pi is provided with a set suspectedi
that contains processes suspected to have crashed. If pj ∈
suspectedi, we say “pi suspects pj”. A failure detector pro-
viding such sets belongs to the class 3S if it satisﬁes the
following properties:
• Strong Completeness: Eventually, every process that
crashes is permanently suspected by every correct process.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:54:06 UTC from IEEE Xplore.  Restrictions apply. 
• Eventual Weak Accuracy: There is a time after which
some correct process is never suspected by the correct
processes. (As we can see, a failure detector of the class
3S can make an inﬁnite number of mistakes, e.g., by erro-
neously suspecting a correct process, in a repeated way.)
3.2 A Consensus Protocol
The consensus protocol described in Figure 1 adapts the
3S-based protocol introduced in [10] to the computation
model deﬁned in Section 2. Its main difference lies in the
waiting condition used at line 8. Moreover, while the al-
gorithmic structure of the proposed protocol is close to the
structure described in [10], due to the very different model
it assumes, its proof (mainly in Lemma 1) is totally different
from the one used in [10].
A process pi starts a consensus execution by invoking
Consensus(vi) where vi is the value it proposes. This
function is made up of two tasks, T 1 (the main task) and
T 2. The processes proceed by consecutive asynchronous
rounds. Each process pi manages two local variables whose
scope is the whole execution, namely, ri (current round
number) and esti (current estimate of the decision value),
and two local variables whose scope is the current round,
namely, auxi and reci. ⊥ denotes a default value which
cannot be proposed by processes.
A round is made up of two phases (communication
steps), and the ﬁrst phase of each round r is managed by
a coordinator pc (where c = (r mod n) + 1).
• First phase (lines 4-6). In this phase, the current round
coordinator pc broadcasts its current estimate esti. A
process pi that receives it, keeps it in auxi; otherwise,