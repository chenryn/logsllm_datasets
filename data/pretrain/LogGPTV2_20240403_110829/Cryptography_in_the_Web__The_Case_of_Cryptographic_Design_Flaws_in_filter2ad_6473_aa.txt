title:Cryptography in the Web: The Case of Cryptographic Design Flaws in
ASP.NET
author:Thai Duong and
Juliano Rizzo
2011 IEEE Symposium on Security and Privacy
2011 IEEE Symposium on Security and Privacy
Cryptography in the Web: The Case of Cryptographic Design Flaws in ASP.NET
Thai Duong
Vnsecurity/HVAOnline
Ho Chi Minh City, Vietnam
PI:EMAIL
Juliano Rizzo
Netifera
Buenos Aires, Argentina
PI:EMAIL
Abstract—This paper discusses how cryptography is misused
in the security design of a large part of the Web. Our focus
is on ASP.NET, the web application framework developed
by Microsoft that powers 25% of all Internet web sites. We
show that attackers can abuse multiple cryptographic design
ﬂaws to compromise ASP.NET web applications. We describe
practical and highly efﬁcient attacks that allow attackers to
steal cryptographic secret keys and forge authentication tokens
to access sensitive information. The attacks combine decryption
oracles, unauthenticated encryptions, and the reuse of keys for
different encryption purposes. Finally, we give some reasons
why cryptography is often misused in web technologies, and
recommend steps to avoid these mistakes.
Keywords-Cryptography, Application Security, Web security,
Decryption oracle attack, Unauthenticated encryption.
I. INTRODUCTION
At EuroCrypt 2004 Nguyen asked, “How can one know if
what is implemented [in software] is good cryptography?”
[1]. This is an important question because history has shown
that cryptography is often used incorrectly in both open
source and proprietary software (see [1]–[7]). Nevertheless,
despite the important role of the WWW, there is limited
research available from both the cryptographic and web
security communities to answer Nguyen’s question for the
case of cryptographic implementations in web technologies.
This paper shows that badly implemented cryptography is
not limited to traditional software, but is highly pervasive in
web applications as well. Since HTTP is a stateless protocol,
web developers must either manage the user session state
data on the server or push it to the client. For performance
and scalability reasons, web developers tend to go with
the latter method. They want to keep session information
secret, so they correctly turn to cryptography. However,
implementing crypto is error-prone. We observe that unau-
thenticated encryption is often used to encrypt session state
data such as HTTP cookies and view states. Unauthenticated
encryption is dangerous [7]–[11], particularly when used in
an authentication system. The ability to forge a ciphertext
that decrypts to a desired plaintext allows the attacker to
impersonate other users easily [7]. Web developers also tend
to use the same keys for different encryption purposes. These
cryptographic errors together make the Web become a gold
mine for chosen-ciphertext attacks.
In this paper, we illustrate this point by examining the case
of cryptographic implementations in web applications based
on ASP.NET [12]. The framework was ﬁrst released in
January 2002 with version 1.0 of the .NET Framework. As
of September 2010, it is believed that 25% of all the Internet
web sites are developed using ASP.NET.1Here we review
ASP.NET v4.0, which was the current stable version at the
time of submission. Our comments also apply to several
previous versions of ASP.NET.
We observe several cryptographic ﬂaws in ASP.NET v4.0.
The most serious ﬂaw (which turns out to have been present
in ASP.NET for almost three years) is a consequence of
unauthenticated encryption. We present two practical and
highly efﬁcient attacks that allow attackers to steal crypto-
graphic secret keys, forge authentication tokens and destroy
the security model of every ASP.NET v4.0 application.
Both are chosen-ciphertext attacks that combine decryption
oracles similar to the padding oracle introduced by Vaudenay
at EuroCrypt ’02 [13] and the CBC-R technique that Rizzo
and Duong demonstrated at USENIX WOOT ’10 [14]. The
novelty of these attacks is that not only can the attacker
decrypt secret data in ASP.NET, but he also can create
ciphertexts that after being decrypted and processed by
ASP.NET, allow him to retrieve sensitive information.
The rest of the paper is organized as follows. In Section II,
we give an overview of ASP.NET v4.0 and the cryptographic
vulnerabilities in the framework. In Section III, we provide
sufﬁcient background on decryption oracle attacks and the
CBC-R technique to make the paper self-contained. In
Section IV, we describe our ﬁrst attack exploiting padding
oracles in the framework. In Section V, we describe our
second attack, which is faster than the ﬁrst attack and does
not require a padding oracle. In Section VI, we consider the
practical impact of our attacks as well as countermeasures
that prevent them. Our reﬂections on why cryptography is
often misused in web technologies and our recommendations
can be found in Section VII.
1See http://trends.builtwith.com/framework.
Unrecognized Copyright Information
1081-6011/11 $26.00 © 2011 IEEE
DOI 10.1109/SP.2011.42
DOI 10.1109/SP.2011.42
481
481
II. AN OVERVIEW OF ASP.NET
In this section, we review some key concepts and termi-
nology for ASP.NET. We then describe how the framework
misuses cryptography when attempting to tamper-proof and
encrypt sensitive information.
A. Key Concepts and Terminology
Machine Key: The machine key is a pair of global se-
cret keys set in the web application conﬁguration to be
used for encryption and authentication. A key named
validationKey is used to generate hashed message
authentication codes (HMAC) to protect the integrity of
authentication tickets and view states. A second key named
decryptionKey is used to encrypt and decrypt authenti-
cation tickets and view states.
View State: An ASP.NET application is a collection of .NET
pages, known ofﬁcially as “web forms”. ASP.NET applica-
tions are hosted by a web server and are accessed using
the stateless HTTP protocol. As such, if an application uses
stateful interaction, it has to implement state management
on its own. ASP.NET provides various functions for state
management, and view state is one of them.
View state refers to the page-level state management mech-
anism utilized by the HTML pages emitted by ASP.NET
applications to maintain the state of the web form controls
and widgets. The state of the controls is sent to the server
at every form submission in a hidden ﬁeld known as
__VIEWSTATE. The main use for this is to preserve form
information when the page is reloaded. The hidden ﬁeld is
updated by the server and is never modiﬁed by the client.
By default, the validationKey is used to generate an
HMAC from the view state content. This HMAC is stored
as a hidden ﬁeld in ASP.NET forms, and is veriﬁed on
every request. If ASP.NET receives a request with an invalid
HMAC,
is dropped. Because the view state
can contain sensitive data, ASP.NET allows developers to
enable view state encryption on a server-wide or per-page
basis. Microsoft’s documentation on view state encryption
is unclear as to whether the view state is still authenticated
if encryption is enabled.2 Based on our testing, we see that
ASP.NET v4.0 either authenticates or encrypts view states,
but it does not apply both operations at the same time.
Forms Authentication Tickets: Since ASP.NET aims to be-
come a rapid web development framework, it provides built-
in solutions for many common problems in web devel-
opment. One of them is user account support. Providing
user account support for any site involves the same set
of steps: creating a datastore, a login page and a register
page; deﬁning authentication and authorization mechanisms;
the request
2See http://msdn.microsoft.com/en-us/library/ff649308.aspx.
482482
created when a user
logs on to a
is then used to track the user
creating a page for the site’s administrators to manage the
user accounts; and so forth. Prior to ASP.NET, developers
had to decide how to implement all of these features on
their own. To ease this burden, ASP.NET introduced the
concept of forms-based authentication. This feature provides
a FormsAuthentication class that handles signing in
and out of a site, as well as a protected authentication ticket
to remember users’ login states across page requests.
that
Forms authentication uses an authentication ticket
this
is
site;
the
ticket
throughout
site. The forms authentication ticket
is created by the
FormsAuthentication class as follows. Once the user
is validated, the FormsAuthentication class internally creates
a FormsAuthenticationTicket object by specifying
his username; the version of the ticket; the directory path;
the issue date of the ticket; the expiration date of the ticket;
whether the ticket should be persisted; and, optionally, user-
deﬁned data. Next the FormsAuthenticationTicket
object is serialized, then an HMAC is generated from the
serialized data using the validationKey. This HMAC
is appended to the end of the serialized data,
then the
whole content is encrypted using AES or DES with the
decryptionKey. The resulting string is called the form
authentication ticket, and it
is usually contained inside
an HTTP cookie. However, ASP.NET supports cookie-less
forms authentication; in this case the ticket is passed in a
query string.
Each time a subsequent request is received after authentica-
tion, the FormsAuthenticationModule class retrieves
the authentication ticket from the authentication cookie or
the query string, decrypts it, computes the hash value, and
veriﬁes the HMAC value to ensure that the ticket has not
been tampered with. Finally, the expiration time contained
inside of the forms authentication ticket is veriﬁed. If all
checks pass, ASP.NET will authenticate the request, and
the user is authenticated as the username contained in the
authentication ticket. Consequently,
the ability to create
valid authentication tickets is sufﬁcient for an attacker to
impersonate any user account in ASP.NET applications.
Web Resources and Script Resources: In the .NET frame-
work, an assembly is a compiled code library used for
deployment, versioning and security. An assembly consists
of one ore more ﬁles. These ﬁles can be code modules,
web resources (e.g., HTML, CSS, or images), or script
resources (e.g., Javascript). Web developers reference these
static resources through a standard API.
Web and script resources rely on special handlers named
WebResource.axd and ScriptResource.axd, re-
spectively, to serve resources to the web browser. When a
request comes in from the client for WebResource.axd,
the handler looks for the web resource identiﬁer in the
QueryString method of the Request object. Based on
the value of the web resource identiﬁer, the handler then
tries to load the assembly that contains this resource. If this
operation is successful, the handler will then look for the
assembly attribute and load the resource stream from the
assembly. Finally, the handler will obtain the data from the
resource stream and send it to the client together with the
content type speciﬁed in the assembly attribute.
The request format for both WebResource.axd and
ScriptResource.axd is as follows:
WebResource.axd?d=encrypted_id&t=timestamp
We observe two interesting things about the d parameter:
1) ASP.NET encrypts this parameter, but does not au-
thenticate the ciphertext.
2) Due to a feature in ScriptResource.axd, an
attacker can download arbitrary ﬁles inside the doc-
ument root of ASP.NET applications given a valid
encrypted d parameter.
B. Cryptographic Design Flaws in ASP.NET
We observe two sets of cryptographic ﬂaws in ASP.NET:
improper use of cryptographic primitives, and insecure key
management.
Insecure Key Management: There are three issues in how
ASP.NET manages cryptographic keys.
The ﬁrst issue is the reuse of keys for different purposes.
In the last section, we showed that the framework uses
cryptography to authenticate and encrypt view states, forms
authentication tickets, web resources and script resources.
These are pieces of information with different levels of
importance. Forms authentication tickets and view states
are critical to the security of ASP.NET, but web resources
and script resources identiﬁers do not include very sensitive
information. ASP.NET, however, encrypts all of them with
the same cryptographic keys.
The second issue is insecure key storage. By default,
plaintext cryptographic keys are stored in a ﬁle named
web.config in the document root of ASP.NET applica-
tions. In other words, all it takes to steal these keys in any
ASP.NET application is one ﬁle disclosure.
The last issue is that key management is left to developers
and users. Since ASP.NET provides no easy way to generate
or revoke keys, users tend not to change keys during the
lifetime of an application. Furthermore,
is sometimes
impossible to change keys because they are used to encrypt
important information that is needed by the applications to
operate properly. Users also typically don’t change default
keys in applications downloaded from the Internet or in-
stalled by a third party. When forced to generate keys, it
it
483483
is not uncommon to see users generating their keys using
online tools. Websites to generate cryptographic keys are
popular amongst ASP.NET developers and users.3
Improper Use of Cryptographic Primitives: There are two
issues in the way ASP.NET uses cryptography.
First,
the cryptographic API in ASP.NET does not use
authenticated encryption by default. In Section II-A, we
showed that web resources and script resources identiﬁers
are encrypted without authentication.
Secondly, the framework uses the MAC-then-Encrypt mode
for authenticated encryption. As previous work has demon-
strated, this mode is vulnerable to chosen-ciphertext attacks
[9], [15], [16].
III. DECRYPTION ORACLE ATTACKS
In this section, we discuss decryption oracle attacks and the
CBC-R technique. In this and subsequent sections, we follow
the notation described in Section 4 of [17]. It is important to
stress that the padding oracle is just one kind of decryption
oracle, and we have found decryption oracles that are easier
and faster to exploit in ASP.NET. We illustrate this point in
Section V.
A. The Padding Oracle Attack
The padding oracle attack was ﬁrst introduced by Vaudenay
at EuroCrypt ’02 [13]. As explained in Paterson and Yau’s
summary [18], the padding oracle attack requires an oracle
that, on receipt of a ciphertext, decrypts it and replies to
the sender whether the padding is valid or invalid. The
attack works under the assumption that the attackers can
intercept padded messages encrypted in CBC mode and have
access to the aforementioned padding oracle. The result is
that attackers can recover the plaintext corresponding to any
block of ciphertext using an average of 128  b oracle calls,
where b is the number of bytes in a block.
1) Padding Oracles In ASP.NET: There are several padding
oracles in default components of the framework. They are all
application independent, (i.e. they exist in every ASP.NET
application). We divide them into two different sets:
1) Authenticated encryption padding oracles: as dis-
cussed in Section II, ASP.NET uses the MAC-then-
Encrypt mode to protect form authentication tickets.
Since this mode is vulnerable to chosen-ciphertext
attacks, we have a padding oracle here. Beside forms
authentication tickets, ASP.NET also uses MAC-then-
Encrypt for role cookies and anonymous identiﬁcation
that can also be used as padding oracles.4
3See http://aspnetresources.com/tools/machineKey
4See http://msdn.microsoft.com/en-us/library/ff649308.aspx.
2) Unauthenticated encryption padding oracles: as noted
in Section II, ASP.NET encrypts the references to
script and web resources, but
it does not protect
the produced ciphertext with an authentication code.
This introduces additional padding oracles into the
framework. We will use them in our attacks described
in Section IV and Section V.
Although we are going to describe more powerful attacks
in this paper, attackers can use these padding oracles to
decrypt and obtain secrets from view states, form authenti-
cation tickets, and other encrypted information in ASP.NET
applications.
B. Turning Decryption Oracles into Encryption Oracles
Figure 1. CBC-R.
In this section, we review CBC-R, a technique to turn a
decryption oracle into an encryption oracle. First introduced
by Rizzo and Duong [14],