AS
SELECT *
FROM Product 既没有聚合又没有结合的SELECT语句
WHERE product_type = '办公用品';
表示下一行接续本行，只是由于版面所限而换行。
对于上述只包含办公用品类商品的视图ProductJim来说，就可以
执行类似代码清单5-6这样的INSERT语句。
代码清单5-6 向视图中添加数据行
INSERT INTO ProductJim VALUES ('0009', '印章', '办公用品', 95, 10, 
'2009-11-30');
向视图中添加一行
表示下一行接续本行，只是由于版面所限而换行。
注意事项
由于PostgreSQL中的视图会被初始设定为只读，所以执行代码清单5-6中的
INSERT语句时，会发生下面这样的错误。
执行结果（使用PostgreSQL）
ERROR: 不能向视图中插入数据
HINT: 需要一个无条件的ON INSERT DO INSTEAD规则
这种情况下，在INSERT语句执行之前，需要使用代码清单5-A中的指令来允许
更新操作。在DB2和MySQL等其他DBMS中，并不需要执行这样的指令。
代码清单5-A 允许PostgreSQL对视图进行更新
PostgreSQL
CREATE OR REPLACE RULE insert_rule
AS ON INSERT
TO ProductJim DO INSTEAD
INSERT INTO Product VALUES (
new.product_id,
● 158 第5章 复杂查询
new.product_name,
new.product_type,
new.sale_price,
new.purchase_price,
new.regist_date);
下面让我们使用SELECT语句来确认数据行是否添加成功吧。
●视图
-- 确认数据是否已经添加到视图中
SELECT * FROM ProductJim;
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
-----------+--------------+--------------+-----------+---------------+-----------
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-09-11
0008 | 圆珠笔 | 办公用品 | 100 | | 2009-11-11
0009 | 印章 | 办公用品 | 95 | 10 | 2009-11-30
数据已经被添加进来了
●原表
-- 确认数据是否已经添加到原表中
SELECT * FROM Product;
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
-----------+--------------+--------------+-----------+---------------+-----------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-09-20
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-09-11
0003 | 运动T恤 | 衣服 | 4000 | 2800 |
0004 | 菜刀 | 厨房用具 | 3000 | 2800 | 2009-09-20
0005 | 高压锅 | 厨房用具 | 6800 | 5000 | 2009-01-15
0006 | 叉子 | 厨房用具 | 500 | | 2009-09-20
0007 | 擦菜板 | 厨房用具 | 880 | 790 | 2008-04-28
0008 | 圆珠笔 | 办公用品 | 100 | | 2009-11-11
0009 | 印章 | 办公用品 | 95 | 10 | 2008-11-30
数据已经被添加进来了
UPDATE语句和DELETE语句当然也可以像操作表时那样正常执行，
但是对于原表来说却需要设置各种各样的约束（主键和NOT NULL等），
需要特别注意。
5-1 视图 159 ●
删除视图
KEYWORD 删除视图需要使用DROP VIEW语句，其语法如下所示。
●DROP VIEW语句
语法5-2 删除视图的DROP VIEW语句
DROP VIEW 视图名称(, , ……)
例如，想要删除视图ProductSum时，就可以使用代码清单5-7中
的SQL语句。
代码清单5-7 删除视图
DROP VIEW ProductSum;
特定的SQL
在PostgreSQL中，如果删除以视图为基础创建出来的多重视图，由于存在关联的
视图，因此会发生如下错误。
执行结果（使用PostgreSQL）
ERROR: 由于存在关联视图，因此无法删除视图productsum
DETAIL: 视图productsumjim与视图productsum相关联
HmINTe:m o删除关联对象请使用DROP …CASCADE
这时可以像下面这样，使用CASCADE选项来删除关联视图。
PostgreSQL
DROP VIEW ProductSum CASCADE;
备 忘
下面我们再次将Product表恢复到初始状态（8行）。请执行如下
DELETE语句，删除之前添加的1行数据。
代码清单5-B
-- 删除商品编号为0009（印章）的数据
DELETE FROM Product WHERE product_id = '0009';
● 160 第5章 复杂查询
第5章 复杂查询
5-2
子查询
● 一言以蔽之，子查询就是一次性视图（SELECT语句）。与视图不同，子查
学习重点
询在SELECT语句执行完毕之后就会消失。
● 由于子查询需要命名，因此需要根据处理内容来指定恰当的名称。
● 标量子查询就是只能返回一行一列的子查询。
子查询和视图
前一节我们学习了视图这个非常方便的工具，本节将学习以视图为基
KEYWORD 础的子查询。子查询的特点概括起来就是一张一次性视图。
●子查询
我们先来复习一下视图的概念，视图并不是用来保存数据的，而是通
过保存读取数据的SELECT语句的方法来为用户提供便利。反之，子查
询就是将用来定义视图的SELECT语句直接用于FROM子句当中。接下来，
就让我们拿前一节使用的视图ProductSum（商品合计）来与子查询进
行一番比较吧。
首先，我们再来看一下视图ProductSum的定义和视图所对应的
SELECT语句（代码清单5-8）。
代码清单5-8 视图ProductSum和确认用的SELECT语句
-- 根据商品种类统计商品数量的视图
CREATE VIEW ProductSum (product_type, cnt_product)
AS
SELECT product_type, COUNT(*)
FROM Product
GROUP BY product_type;
-- 确认创建好的视图
SELECT product_type, cnt_product
FROM ProductSum;
能够实现同样功能的子查询如代码清单5-9所示。
5-2 子查询 161 ●
代码清单5-9 子查询
SQL Server DB2 PostgreSQL MySQL
-- 在FROM子句中直接书写定义视图的SELECT语句 直接书写定义视图的
SELECT product_type, cnt_product SELECT语句
FROM ( SELECT product_type, COUNT(*) AS cnt_product
FROM Product
GROUP BY product_type ) AS ProductSum;--------①
特定的SQL
在Oracle的FROM子句中，不能使用AS（会发生错误），因此，在Oracle中执行代
码清单5-9时，需要将①中的“) AS ProductSum;”变为“) ProductSum;”。
两种方法得到的结果完全相同。
执行结果
product_type | cnt_product
--------------+------------
衣服 | 2
办公用品 | 2
厨房用具 | 4
如上所示，子查询就是将用来定义视图的SELECT语句直接用于
FROM子句当中。虽然“AS ProductSum”就是子查询的名称，但由
于该名称是一次性的，因此不会像视图那样保存在存储介质（硬盘）之中，
而是在SELECT语句执行之后就消失了。
实际上，该SELECT语句包含嵌套的结构，首先会执行FROM子句
中的SELECT语句，然后才会执行外层的SELECT语句（图5-4）。
图5-4 SELECT语句的执行顺序
② 外层的查询（SELECT子句）
SELECT product_type, cnt_product
FROM (
SELECT Product_type, COUNT(*) AS cnt_product
FROM Product
GROUP BY product_type
) AS ProductSum;
① 内层的查询（FROM子句中的SELECT子句）
● 162 第5章 复杂查询
① 首先执行FROM子句中的SELECT语句（子查询）
SELECT product_type, COUNT(*) AS cnt_product
FROM Product
GROUP BY product_type;
② 根据①的结果执行外层的SELECT语句
SELECT product_type, cnt_product
FROM ProductSum;
法则5-6
子查询作为内层查询会首先执行。
■增加子查询的层数
由于子查询的层数原则上没有限制，因此可以像“子查询的FROM子
句中还可以继续使用子查询，该子查询的FROM子句中还可以再使用子查
询……”这样无限嵌套下去（代码清单5-10）。
代码清单5-10 尝试增加子查询的嵌套层数
SQL Server DB2 PostgreSQL MySQL
SELECT product_type, cnt_product
FROM (SELECT *
FROM (SELECT product_type, COUNT(*) AS cnt_product
FROM Product
GROUP BY product_type) AS ProductSum ①
WHERE cnt_product = 4) AS ProductSum2; ②
特定的SQL
在Oracle的FROM子句中不能使用AS（会发生错误），因此，在Oracle中执行代码
清单5-10时，需要将①中的“) AS ProductSum”变为“ProductSum”，将②中的“)
AS ProductSum2;”变为“) ProductSum2;”。
执行结果
product_type | cnt_product
--------------+------------
厨房用具 | 4
最内层的子查询（ProductSum）与之前一样，根据商品种类
（product_type）对数据进行汇总，其外层的子查询将商品数量（cnt_
product）限定为4，结果就得到了1行厨房用具的数据。
5-2 子查询 163 ●
但是，随着子查询嵌套层数的增加，SQL语句会变得越来越难读懂，
性能也会越来越差。因此，请大家尽量避免使用多层嵌套的子查询。
子查询的名称
之前的例子中我们给子查询设定了ProductSum等名称。原则上
子查询必须设定名称，因此请大家尽量从处理内容的角度出发为子查询设
定恰当的名称。在上述例子中，子查询用来对Product表的数据进行汇
总，因此我们使用了后缀Sum作为其名称。
注A 为子查询设定名称时需要使用AS关键字，该关键字有时也可以
其中也有像Oracle这样，在名称 省略A。
之前使用AS关键字就会发生错
误的数据库，大家可以将其视为
例外的情况。
标量子查询
KEYWORD 接下来我们学习子查询中的标量子查询（scalar subquery）。
●标量子查询
●标量
■什么是标量
标量就是单一的意思，在数据库之外的领域也经常使用。
上一节我们学习的子查询基本上都会返回多行结果（虽然偶尔也会只
返回1行数据）。由于结构和表相同，因此也会有查询不到结果的情况。
而标量子查询则有一个特殊的限制，那就是必须而且只能返回1行1
列的结果，也就是返回表中某一行的某一列的值，例如“10”或者“东京都”
KEYWORD 这样的值。
●返回值
返回值就是函数或者SQL语句 法则5-7
等处理执行之后作为结果返回
的值。
标量子查询就是返回单一值的子查询。
细心的读者可能会发现，由于返回的是单一的值，因此标量子查询的
返回值可以用在=或者<>这样需要单一值的比较运算符之中。这也正是
标量子查询的优势所在。下面就让我们赶快来试试看吧。
● 164 第5章 复杂查询
■在 子句中使用标量子查询
WHERE
在4-2节中，我们练习了通过各种各样的条件从Product（商品）
表中读取数据。大家有没有想过通过下面这样的条件查询数据呢？
“查询出销售单价高于平均销售单价的商品。”
或者说想知道价格处于上游的商品时，也可以通过上述条件进行查询。
然而这并不是用普通方法就能解决的。如果我们像下面这样使用
AVG函数的话，就会发生错误。
-- 在WHERE子句中不能使用聚合函数
SELECT product_id, product＿name, sale_price
FROM Product
大于销售平均单价”
WHERE sale_price > AVG(sale_price);
这样的条件
虽然这样的SELECT语句看上去能够满足我们的要求，但是由于在
WHERE子句中不能使用聚合函数，因此这样的SELECT语句是错误的。
那么究竟什么样的SELECT语句才能满足上述条件呢？
这时标量子查询就可以发挥它的功效了。首先，如果想要求出
Product表中商品的平均销售单价（sale_price），可以使用代码清
单5-11中的SELECT语句。
代码清单5-11 计算平均销售单价的标量子查询
SELECT AVG(sale_price)
FROM Product;
执行结果
avg
----------------------
2 097.5000000000000000
AVG函数的使用方法和COUNT函数相同，其计算式如下所示。
(1000＋500＋4000＋3000＋6800＋500＋880＋100) / 8＝2097.5
这样计算出的平均单价大约就是2100日元。不难发现，代码清单5-11
中的SELECT语句的查询结果是单一的值（2097.5）。因此，我们可以直
接将这个结果用到之前失败的查询之中。正确的SQL如代码清单5-12所示。
5-2 子查询 165 ●
代码清单5-12 选取出销售单价（ ）高于全部商品的平均单价的商品
sale_price
SELECT product_id, product_name, sale_price
FROM Product
WHERE sale_price > (SELECT AVG(sale_price) 计算平均销售单
FROM Product); 价的标量子查询