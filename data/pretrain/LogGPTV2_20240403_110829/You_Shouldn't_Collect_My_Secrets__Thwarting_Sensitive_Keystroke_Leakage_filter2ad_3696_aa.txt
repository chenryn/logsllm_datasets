title:You Shouldn't Collect My Secrets: Thwarting Sensitive Keystroke Leakage
in Mobile IME Apps
author:Jin Chen and
Haibo Chen and
Erick Bauman and
Zhiqiang Lin and
Binyu Zang and
Haibing Guan
You Shouldn’t Collect My Secrets:  
Thwarting Sensitive Keystroke Leakage 
in Mobile IME Apps
Jin Chen and Haibo Chen, Shanghai Jiao Tong University; Erick Bauman  
and Zhiqiang Lin, The University of Texas at Dallas; Binyu Zang and Haibing Guan,  
Shanghai Jiao Tong University
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/chen-jin
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXYou Shouldn’t Collect My Secrets:
Thwarting Sensitive Keystroke Leakage in Mobile IME Apps
Jin Chen†, Haibo Chen†, Erick Bauman⋆, Zhiqiang Lin⋆, Binyu Zang†, Haibing Guan†
†Shanghai Key Kaboratory of Scalable Computing and Systems, Shanghai Jiao Tong University
⋆Department of Computer Science, The University of Texas at Dallas
ABSTRACT
IME (input method editor) apps are the primary means
of interaction on mobile touch screen devices and thus
are usually granted with access to a wealth of private
user input.
In order to understand the (in)security of
mobile IME apps, this paper ﬁrst performs a systematic
study and uncovers that many IME apps may (intention-
ally or unintentionally) leak users’ sensitive data to the
outside world (mainly due to the incentives of improv-
ing the user’s experience). To thwart the threat of sen-
sitive information leakage while retaining the beneﬁts of
an improved user experience, this paper then proposes
I-BOX, an app-transparent oblivious sandbox that mini-
mizes sensitive input leakage by conﬁning untrusted IME
apps to predeﬁned security policies. Several key chal-
lenges have to be addressed due to the proprietary and
closed-source nature of most IME apps and the fact that
an IME app can arbitrarily store and transform user input
before sending it out. By designing system-level transac-
tional execution, I-BOX works seamlessly and transpar-
ently with IME apps. Speciﬁcally, I-BOX ﬁrst check-
points an IME app’s state before the ﬁrst keystroke of an
input, monitors and analyzes the user’s input, and rolls
back the state to the checkpoint if it detects the poten-
tial danger that sensitive input may be leaked. A proof
of concept I-BOX prototype has been built for Android
and tested with a set of popular IME apps. Experimental
results show that I-BOX is able to thwart the leakage of
sensitive input for untrusted IME apps, while incurring
very small runtime overhead and little impact on user ex-
perience.
1
INTRODUCTION
The Problem. With large touch screens, modern mo-
bile devices typically feature software keyboards to al-
low users to enter text input. This is different compared
to traditional desktops where we use the hardware key-
boards. These soft keyboards are known as Input Method
Editor (IME) apps, and they convert users’ touch events
to text. Since IME apps process almost all of a user’s in-
put in mobile devices, it is critical to ensure that they are
not keyloggers and they do not leak any sensitive input
to the outside world.
)
0
0
0
,
0
1
s
t
i
n
u
(
d
a
o
l
n
w
o
d
f
o
r
e
b
m
u
n
e
h
T
  160,000
  140,000
  120,000
  100,000
  80,000
  60,000
  40,000
  20,000
  0
u
o
g
u
o
S
k
e
t
y
l
F
i
n
i
y
n
i
P
e
l
g
o
o
G
Q
Q
l
a
P
h
c
u
o
T
u
d
i
a
B
u
o
h
s
n
i
J
i
b
o
u
G
s
u
p
o
t
c
O
e
e
V
t
i
e
d
i
l
S
The IME Apps
Figure 1: Download statistics of IME apps in our study.
While all mobile devices have a default IME app in-
stalled, users often demand third-party IME apps with
expanded feature sets in order to gain a better user ex-
perience. This is especially common for non-Latin lan-
guages. In order to accommodate this need, mobile oper-
ating systems such as Android and iOS provide an exten-
sible framework allowing alternate input methods. Due
to the ease of making third-party IME apps and high de-
mand for customization, there are currently thousands of
IME apps in major App market like Google Play and Ap-
ple’s App Store. Many of which have gained hundreds of
millions downloads, as shown in Fig. 1. For instance, the
Sogou IME apps has in total 1.6 billion downloads in
Google Play and several third party app vendors such as
360, and Baidu. Meanwhile, a recent survey [13] found
that 68.3% of smartphones in China are using third-party
IME apps. This survey did not include statistics from
Japan or Korea, where such apps are also very popular.
Unfortunately, despite these advantages, using a third-
party IME app also brings security and privacy concerns
(assume the default IME app does not have these prob-
lems). First, IME app developers have incentives to log
and collect user input in order to improve the user’s ex-
perience with their products, and user input is as valuable
as email content, from which they can learn user’s needs
and push customized advertising or other business activ-
ities. Although an IME app may state a policy of not
collecting certain input from a user, the policies imple-
USENIX Association  
24th USENIX Security Symposium  675
mented in the app may unintentionally send sensitive in-
put outside the phone. In §2.3 we show that such a threat
is real by observing the output of a popular IME app that
periodically sends out user input to a remote server. In
addition, we collected the network activities of a set of
IME apps during a user input study and showed that they
also likely send out private data. In light of this informa-
tion leakage threat, the Japanese government’s National
Information Security Center has warned its central gov-
ernment ministries, agencies, research institutions and
public universities to stop using IME apps offered by the
search engine provider Baidu [1].
Even if a user trusts benign IME apps to properly se-
cure private data, there is still a risk from repackaging
attacks targeting benign apps.
In fact, prior study has
shown that around 86% of Android malware samples are
repackaged from legitimate apps [49]. It is also surpris-
ingly simple to repackage an IME app with a malicious
payload, as we demonstrate in §2. Essentially, a repack-
aged malicious IME app is essentially a keylogger, which
has been one of the most dangerous security threats for
years [39]. Also, evidence has shown that IME apps are
popular for attackers to inject malicious code [29].
Challenges. While it may seem trivial to detect these
repackaged malicious IME apps by comparing a hash of
the code with the corresponding vendor in the ofﬁcial
market, the widespread existence of third-party markets
makes such checks more difﬁcult. It is also easy for at-
tackers to plant repackaged malware into these markets,
as is shown by the fact that a considerable amount of
repackaged malware has been found in them [48].
Of further concern is the fact that it is very challenging
to analyze whether even “benign” IME apps will leak any
sensitive data or not. There are several reasons why de-
tecting privacy leaks in IME apps is challenging. First,
many commercial IME apps use excessive amounts of
native code, which makes it very difﬁcult to understand
how they log and process user input. Second, many of
the IME apps use unknown, proprietary protocols, which
makes it especially hard to analyze how they collect and
transform user input. Third, many of them utilize encryp-
tion, and their algorithms are also unknown. Therefore,
we eventually must treat the IME apps as black boxes
for current privacy-preserving techniques on mobile de-
vices, and users must either trust them completely (and
risk leaking their private data) or switch to the default
IME app (and lose the improved user experience).
At a high level, it would seem that existing techniques
such as taint tracking would be viable approaches to pre-
cisely tracking and containing sensitive input. For ex-
ample, TaintDroid [16, 17] and its follow-up work have
been shown to very effective to track sensitive input and
detect when it is leaked. There will still be the follow-
ing additional challenges to be overcome. First, current
IME apps tend to use excessive native code in their core
logic, and TaintDroid currently does not track tainted
data in native code. Second, it is a well-known problem
that data-ﬂow based tracking for taint-tracking systems
to capture control-based propagation. In fact, many of
the keystrokes are generated through lookup tables, as
reported in Panorama [46]. Third, sensitive information
is often composed of a sequence of keystrokes, making it
challenging to have a well-deﬁned policy to differentiate
between sensitive and non-sensitive keystrokes in Taint-
Droid. Therefore, we must look for new techniques.
Our approach.
In this paper, we present I-BOX, an
app-oblivious IME sandbox that prevents IME apps from
leaking sensitive user input. In light of the opaque na-
ture of third-party IME apps, the key idea of I-BOX is
to make an IME app oblivious to sensitive input by run-
ning IME apps transactionally; I-BOX eliminates sensi-
tive data from untrusted IME apps when there is sensi-
tive input during this process. Speciﬁcally, I-BOX check-
points the states of an IME app before an input transac-
tion. It then analyzes the user’s input data using a pol-
icy engine to detect whether sensitive input is ﬂowing
into an IME app. If so, I-BOX rolls back the IME app’s
states to the saved checkpoint, which essentially makes
an IME app oblivious to what a user has entered. Other-
wise, I-BOX commits the input transaction by discarding
the checkpoint, which enables the IME app to leverage
users’ input to improve the user experience.
One key challenge faced when building I-BOX is
how to make the checkpointing process efﬁcient and
consistent, which is unfortunately complicated by An-
droid’s design, especially its hybrid execution (of Java
and C), multi-threading, and complex IPC mechanism
(e.g., Binder). Fortunately, I-BOX addresses this chal-
lenge by leveraging the event-driven nature of an IME
app. More speciﬁcally, we present a novel approach by
creating the checkpoint at a quiescent point, in which its
execution states are inactive. Such a design signiﬁcantly
simpliﬁes many issues such as handling residual states in
the local stack of native code, the Dalvik VM and IPCs.
We have implemented I-BOX based on Android 4.2.2
running on a Samsung Galaxy Nexus smartphone. Per-
formance evaluations show that I-BOX can checkpoint
and restore a set of third-party popular IME apps within a
very tiny amount of time, and thus cause little impact on
user experience. A security evaluation using a set of pop-
ular IME apps shows that I-BOX mitigates the leakage of
sensitive input. Case studies using a popular “benign”
IME app and a repackaged IME app conﬁrm that I-BOX
accurately conforms to the predeﬁned security policies to
prevent sending of sensitive input data.
676  24th USENIX Security Symposium 
USENIX Association
InputMethod
ManagerService
Plain Text
InputConnection
Awaken 
InputMethod
Service
IME App
Invoke IME
EditText
Client Apps
Show 
Text
Start 