title:Partitioning Oracle Attacks
author:Julia Len and
Paul Grubbs and
Thomas Ristenpart
Partitioning Oracle Attacks
Julia Len, Paul Grubbs, and Thomas Ristenpart, Cornell Tech
https://www.usenix.org/conference/usenixsecurity21/presentation/len
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Partitioning Oracle Attacks
Julia Len
Paul Grubbs
Thomas Ristenpart
Cornell Tech
Abstract
In this paper we introduce partitioning oracles, a new class
of decryption error oracles which, conceptually, take a cipher-
text as input and output whether the decryption key belongs
to some known subset of keys. Partitioning oracles can arise
when encryption schemes are not committing with respect to
their keys. We detail adaptive chosen ciphertext attacks that
exploit partitioning oracles to efﬁciently recover passwords
and de-anonymize anonymous communications. The attacks
utilize efﬁcient key multi-collision algorithms — a cryptana-
lytic goal that we deﬁne — against widely used authenticated
encryption with associated data (AEAD) schemes, including
AES-GCM, XSalsa20/Poly1305, and ChaCha20/Poly1305.
We build a practical partitioning oracle attack that quickly
recovers passwords from Shadowsocks proxy servers. We
also survey early implementations of the OPAQUE protocol
for password-based key exchange, and show how many could
be vulnerable to partitioning oracle attacks due to incorrectly
using non-committing AEAD. Our results suggest that the
community should standardize and make widely available
key-committing AEAD to avoid such vulnerabilities.
1 Introduction
The design of encryption historically separated the goals
of conﬁdentiality and authenticity, which led to widespread
deployment of encryption schemes vulnerable to chosen-
ciphertext attacks (CCAs) [17, 81]. Subsequently, researchers
showed how to exploit CCAs to recover plaintext data, most
notably via padding [6, 7, 17, 81] and format [12, 26] ora-
cle attacks. As a result, cryptographers now advocate the
use of authenticated encryption with associated data (AEAD)
schemes and CCA-secure public key encryption. There has
since been a shift to adopt fast CCA-secure schemes, notably
AES-GCM [58], XSalsa20/Poly1305 [13, 15], and (in the
public key setting) hybrid encryption that make use of the
aforementioned AEAD schemes.
Such schemes do not target being robust [5, 23], also
called committing [29]. While exact formal notions vary, ro-
bust/committing schemes ensure that attackers cannot con-
struct a ciphertext that decrypts without error under more
than one key. Thus far robustness has not been considered an
essential security goal for most cryptographic applications,
perhaps because attacks exploiting lack of robustness have
only arisen in relatively niche applications like auction proto-
cols [22], or more recently as an integrity issue in moderation
for encrypted messaging [21, 29].
We introduce partitioning oracle attacks, a new type of
CCA. Brieﬂy, a partitioning oracle arises when an adversary
can: (1) efﬁciently craft ciphertexts that successfully decrypt
under a large number of potential keys, and (2) can submit
such ciphertexts to a system that reveals whether decryption
under a target secret key succeeds. This enables an attacker
to learn information about the secret key. The main cryptan-
alytic step for our attacks is constructing (what we call) key
multi-collisions, in which a single AEAD ciphertext can be
built such that decryption succeeds under some number k of
keys. We formalize this cryptanalytic goal and give an algo-
rithm for computing key multi-collisions for AES-GCM. It
builds key multi-collision ciphertexts of length O(k) in O(k2)
time, making them reasonably scalable even to large k. We
give more limited attacks against XSalsa20/Poly1305 (and
ChaCha20/Poly1305) and AES-GCM-SIV.
Given access to an oracle that reveals whether decryption
succeeds, our key multi-collisions for AES-GCM enable a par-
titioning oracle attack that recovers the secret key in roughly
m + logk queries in situations where possible keys fall in a
set of size d = m· k. This will not work to recover much in-
formation about, e.g., random 128-bit keys where d = 2128,
but we show that it sufﬁces to be damaging in settings where
keys are derived from user-selected passwords or where key
anonymity is important.
We explore partitioning oracles via two case studies. First
we show how to build a practical partitioning oracle attack
against Shadowsocks proxy servers [73]. Shadowsocks was
ﬁrst built to help evade censorship in China, and it underlies
other tools such as Jigsaw’s Outline VPN [62]. In Shadow-
socks, the connections are secured via password-based AEAD
with a user-chosen password shared between a client and the
proxy server. We show how an attacker can turn the proxy
server into a partitioning oracle, despite it being designed to
silently drop incorrect ciphertexts.
Simulations using password breach data show that 20% of
the time the attacker recovers the user’s password by sending
124 ciphertexts to the server — several orders of magnitude
fewer than the ∼60,000 required by a standard remote guess-
ing attack. The latter requires less overall bandwidth because
our attack ciphertexts are large. However, to succeed 70% of
the time, our attack requires fewer queries and less overall
bandwidth than the remote guessing attack. We have respon-
sibly disclosed our attacks to the Shadowsocks community,
and worked with them to help mitigate the vulnerability.
We then turn to password-authenticated key exchange
USENIX Association
30th USENIX Security Symposium    195
(PAKE). Here we focus on incorrect implementations of the
OPAQUE [38] protocol, which was recently chosen by the
IETF’s Crypto Forum Research Group (CFRG) as a candi-
date for standardization. OPAQUE makes use of an AEAD
scheme in its protocol and both the original paper and the
(rapidly evolving) standard [46, 47] mandate that the AEAD
used be committing. We consider what happens when im-
plementations deviate from the standard by using a non-
committing AEAD scheme. Indeed, early implementations
(some of which predate the standardization effort) use AES-
GCM, XSalsa20/Poly1305, or AES-GCM-SIV. As we dis-
cuss, these implementations would be hard to use without
giving rise to partitioning oracles. Our simulations show that
a partitioning oracle here would enable successful password
recovery 20% of the time using just 18 man-in-the-middle im-
personations against a vulnerable client implementation. Our
results therefore reinforce the importance of using committing
AEAD by quantifying the danger of failing to do so.
In addition to these in-depth case studies, we discuss
other potentially vulnerable cryptographic tools and proto-
cols. Some of these, such as the ﬁle encryption tool called
age [79] and the internet-draft of the Hybrid Public Key En-
cryption scheme [10], have already made updates to mitigate
our attacks.
Our ﬁndings join prior ones [21, 29] in a growing body
of evidence that using non-committing AEAD as a default
choice can lead to subtle vulnerabilities. We suggest consider-
ing a shift towards key-committing AEAD being the default
for general use, and using non-committing AEAD only for
applications shown to not require robustness. This will re-
quire some work, however, as existing committing AEAD
scheme designs [21,29] are slower than non-committing ones
and not yet supported by standards. We believe future work
should target fast, committing AEAD schemes suitable for
standardization and widespread deployment.
2 Partitioning Oracle Attacks
Here we provide an overview of the abstract partitioning
oracle attack setting and example attack scenarios.
Attack abstraction. We consider settings in which an at-
tacker seeks to recover a secret pw ∈ D from some set of
possible values D. The attacker has access to an interface that
takes as input a a bit string V , and uses it plus pw to output
the result of some boolean function fpw : {0,1}∗ → {0,1}.
Here fpw is an abstraction of some cryptographic operations
that may succeed or fail depending on pw and V . We use
fpw(V ) = 1 for success and fpw(V ) = 0 for failure. We give
examples of fpw below; in this work fpw usually indicates suc-
cess or failure of decrypting a ciphertext using password pw.
Given oracle access to adaptively query fpw on chosen
values, the question is: Can an attacker efﬁciently recover pw?
This of course will depend on f . We refer to f as a partitioning
oracle if it is computationally tractable for an adversary, given
any set S ⊆ D, to compute a value ˆV that partitions S into two
sets S∗ and S \S∗, with |S∗|≤|S \S∗|, such that f (pw, ˆV ) = 1
for all pw ∈ S and f (pw, ˆV ) = 0 for all pw ∈ S \ S∗. We call
such a ˆV a splitting value and refer to k = |S∗| as the degree
of a splitting value ˆV . We say that a splitting value is targeted
if the adversary can select the secrets in S∗, in contrast to
untargeted attacks that, e.g., compute a splitting value that
results in a random partition of S.
For most fpw of practical interest it will be trivial to com-
pute splitting values with degree k = 1. In this case, a parti-
tioning oracle attack coincides with a traditional online brute-
force guessing strategy for recovering pw. The adversary has
nothing other than black-box oracle access to fpw and knowl-
edge of an ordering pw1, pw2, . . . of D according to decreas-
ing likelihood. First compute a splitting value ˆV1 that parti-
1 ={pw1} and the rest of S. Query fpw( ˆV1).
tions S = D into S∗
1 = {pw1} = {pw}. As-
The resulting bit indicates whether S∗
suming not, compute a splitting value ˆV2 that partitions D \S∗
2 = {pw2} and the remainder, query fpw( ˆV2), and so
into S∗
on. The attacker will learn pw in worst case d = |D| oracle
queries. Notice that in this case the best possible attack is
non-adaptive, meaning the attacker can pre-compute all of its
splitting values before it begins.
1
Partitioning oracles become more interesting when we can
efﬁciently build splitting values of degree k > 1. In the limit,
we can perform a simple adaptive binary search for pw if we
can compute splitting values of degree up to k = (cid:100)d/2(cid:101). Ini-
tially set S = D and compute a value ˆV1 that splits S into two
halves of (essentially) the same size. Query fpw( ˆV1) to learn
which half of D the value pw lies within. Recurse on that half.
Like all binary searches, this provides an exponential speed-
up over the brute-force strategy because we can recover pw
in (cid:100)logd(cid:101) queries. We provide more details about this attack,
in particular taking into account non-uniform distributions of
the secret pw, in Sections 4 and 5.
Example: Password-based AEAD. Consider a server that
accepts messages encrypted using a password pw. To
send an encrypted message m, a client derives a key K ←
PBKDF(sa, pw) using a uniformly random per-message
salt sa. It then uses K to encrypt m according to an au-
thenticated encryption with associated data (AEAD) scheme,
resulting in a ciphertext C. Here PBKDF is a password-
based key derivation function (e.g., one of those speci-
ﬁed in PKCS#5 [42]). The client sends V = (sa,C) to
the server, which re-derives K and decrypts the ciphertext.
This represents a standardized and widely used way to per-
form password-based AEAD, and it is standard practice
now to use fast AEAD schemes such as Galois Counter
Mode (GCM) [58] or XSalsa20/Poly1305 [13, 15].
Nevertheless, if the server reveals just whether or not de-
cryption succeeds (e.g., due to an error message), we can
construct a partitioning oracle with fpw(sa,C) = 1 if and
196    30th USENIX Security Symposium
USENIX Association
only if decryption of (sa,C) succeeds. A priori, ciphertext un-
forgeability would seem to necessarily rule out computational
tractability of splitting ciphertexts for degree k > 1, but it does
not. In fact a simple extension of prior work already gives an
attack: Dodis et al. [21] showed how, for any two keys, one
can build an AES-GCM ciphertext such that decryption suc-
ceeds under both keys. This is possible because AES-GCM
is not committing (also called robust [23]). With this, our
1 = {pw(cid:48), pw(cid:48)(cid:48)} of
adversary can check membership in a set S∗
two passwords by sending a splitting value ˆV1 to the server,
as follows. First, it computes keys K ← PBKDF(sa, pw(cid:48)) and
K(cid:48) ← PBKDF(sa, pw(cid:48)(cid:48)) for some arbitrary sa. Then, it uses
Dodis et al. to construct a ciphertext ˆC1 that successfully de-
crypts under both K and K(cid:48). Finally, it sends splitting value
ˆV1 = (sa, ˆC1) to the server. If the server’s response indicates
decryption succeeded, fpw(sa, ˆC1) = 1 and pw ∈ S∗
1 . Else,
fpw(sa, ˆC1) = 0 and pw (cid:54)∈ S∗
1 . Iterating this allows ﬁnding pw
in at most |D|/2 + 1 queries, beating brute-force by almost a
factor of two.
We will achieve more signiﬁcant speed-ups in recover-
ing pw by showing how to build splitting ciphertexts ˆC with
degree k proportional to | ˆC|.
Example: password-authenticated key exchange. A clas-
sical attack against an early version of the Secure Re-
mote Password (SRP) password-authenticated key exchange
(PAKE) protocol [84, 85] can be viewed as a partitioning ora-
cle attack. This attack gives an adversary who engages in the
SRP protocol without knowledge of the victim’s password the
ability to check two password guesses in one run of the proto-
col. In the parlance of partitioning oracles, the attack turns an
SRP client into a partitioning oracle with degree k = 2.
We will show in later sections a “k-for-one” (for k (cid:29) 2)
partitioning oracle attack against incorrect implementations
of the OPAQUE PAKE protocol. OPAQUE mandates use of
committing AEAD, and the designers clearly speciﬁed that
using non-committing AEAD leads to vulnerabilities [38].
Nevertheless we found prototype implementations that use
AES-GCM and other non-committing AEAD schemes. Our
results demonstrate how damaging exploits can be should
implementers not abide by the protocol speciﬁcation.
Example: hybrid encryption. Partitioning oracles can also
arise in hybrid encryption. For example, some KEM-DEM
constructions, like the HPKE scheme [10] currently being
standardized, support authenticating senders based on a pre-
shared key (PSK) from a dictionary D by mixing the PSK
into DEM key derivation and using AEAD as the DEM.
If the sender can learn whether the receiver successfully
decrypted a ciphertext, a trivial brute-force attack can recover
the PSK with enough queries. However, if the DEM is a non-
committing AEAD, a malicious sender can gain an exponen-
tial speedup by crafting splitting DEM ciphertexts similarly to
the password-based AEAD example above. See Appendix A
for an example of this attack for HPKE.
Example: anonymity systems. Partitioning oracles against
hybrid encryption can also arise in anonymity systems. Prior
work showed a link between robustness and anonymous en-
cryption [5,22,60]; our partitioning oracle attacks can exploit
lack of robustness to perform deanonymization.
As an example scenario consider anonymous end-to-end en-
crypted messaging, in which a recipient has a key pair (pk, sk)
for receiving encrypted messages that are delivered via anony-
mous channel. A modern choice for encryption would be
the crypto_box KEM-DEM scheme in the widely-used lib-
sodium [16, 52] library. An adversary wants to determine
if the recipient is using one of many possible public keys
{pk1, . . . , pkd} (possibly gleaned from the web or a public-
key directory). The adversary has some way of inferring when
an encrypted message is successfully received (e.g., due to a
reply message or lack thereof). As above, a brute-force attack
over public keys can ﬁnd the right one in d messages; this
may be prohibitive if d is large.
Instead, one can build a partitioning oracle attack against
crypto_box in this setting requiring only logd messages.
Here D = {1, . . . ,d}, that is, the partitioning oracle’s secret
is which of the keys is used. While we do not know of any
deployed system that is vulnerable to this attack scenario, it
is possible this vulnerability will arise with growing adoption
of non-committing AEAD for E2E encryption.
Discussion. Our results assume that attackers have good
estimates of password distributions. Prior work [63] shows
that attackers do have good estimates and our experiments
follow their simulation methodology. If an attacker wishes to
compromise the password of a particular user whose password
has never been breached, our attack would fail. However,
our simulations show that even with an incomplete password
dataset that results in a 20% success rate, hundreds of millions
of passwords would be vulnerable.
An interesting aspect of our attack settings is that the at-