implemented on a computer.
–
A straight forward translation of a financial system
into a computer program.
•
Technical Board of Appeal:
–
the contribution approach confused the examination for
patentable subject matter with that of inventive step.
•
It should be possible to determine whether claimed subject matter
does or does not have technical character without reference to the
prior art or the contribution it makes. Technical character is an
inherent absolute property of a claimed invention.
–
Board of Appeal decision: The claims lacked
technical inventive step.
55
Hitachi/Auction Method T258/03 [2004]
•
Any hardware approach
–
An invention will not fall within any of the
excluded categories, which are set out in Article
52(2), if it embodies or is implemented by some
technical means (such as a computer).
–
Anything carried out by a programmed computer
forms an invention, whether claimed as a concrete
entity or as an activity
–
When an invention covers both technical and non-
technical elements it should not be rejected under
Art. 52 EPC.
56
Further Technical Effect - IBM T1173/97
•
A method or program requires a further technical
effect in order not to be considered a "computer
program as such“
–
whenever you run a program on a computer, you
have a technical effect (e.g. electrical currents).
–
According to T 1173/97 this is not sufficient to avoid
the exclusion from patentability.
–
However, if a computer program is capable of bringing
about, when running on a computer, a further
technical effect going beyond these normal physical
effects, it is not excluded from patentability.
57
Further Technical Effect - IBM T1173/97
•
A software invention has a further technical
effect if:
–
it acts on physical data, e.g., processing control
values of an industrial process (money, business
data and text are not physical data); or
–
affects the way a computer operates: saving
memory (e.g. file compression), increasing speed,
improving the security of a process, improving the
rate of data transfer, etc.
–
its structure involves technical considerations
(implementation details).
58
The Problem Solution Approach
•
Three stages (EPO guidelines)
1. Determine the closest prior art
•
Item of prior art disclosing technical effects most
similar to the invention (often has greatest number
of common features with the invention).
2. Establish the objective technical problem
•
How to modify or adapt the closest prior art to
achieve the specific technical effects of the invention
that are not in the closest prior art.
3. Check obviousness
•
Would a skilled person in the art starting from the
closest prior art knowing the objective technical
problem arrive at the claimed solution in an obvious
way.
59
Talk Outline
•
Protecting Intellectual Property
•
Introduction to Patents
•
Patentability (in the U.S.)
•
Patentability of Software
•
Patenting Business Methods
•
Software Patents in Europe
•
Pros and Cons of Software Patents
–
The Controversy Regarding Software Patents
•
Problems and Possible Directions
•
Summary
60
Why Software Should be Patentable?
•
To encourage innovation and develop the economy
–
Innovators are highly responsive to monetary incentives
–
patents are the most effective incentives.
•
Why shouldn’t software inventors be rewarded like
others?
•
To overcome the free-rider problem
•
Patents are important when
–
R&D Costs are high
–
Competitors can easily perform “reverse engineering”
–
Technological advances can be mimicked by
competitors rapidly and inexpensively
61
Arguments Against Software Patents
•
Monopolies distort competition & Increase
prices
•
No evidence of increase in innovation
–
Many great software inventions without
patents
–
Open Source software demonstrates that
patents are not necessary
–
Some argued that patenting software
reduces the overall level of innovation.
62
Views
•
“Innovation in software
business has flourished
without patents, and there is
no obvious reason to
implement a new exclusive
right in a market that seems to
have been enormously
innovative without it”
•
Before 1981: GUI, linked lists,
search algorithms, databases,
word processing,
spreadsheets, programming
.
languages
63
Arguments Against Software Patents
•
20-year term is too long for a fast moving
industry
•
Difficult to evaluate Novelty or
Nonobviousness of software inventions
•
Prior art may be hard to find in software
–
Algorithms may be buried in program code
•
Prevents research
–
Research is cumulative; Need multiple licensing
agreements
64
Arguments Against Software Patents
•
Patents inhibit software development
–
Constant searching for infringement
•
Software does not fit into the patent system.
•
Patent litigation destroys small companies
65
Views
•
Former Federal Circuit Judge Paul Michel
–
“… How much [patents] retard [software] I'm not
so sure. I hear a lot of anecdotes, a lot of scare
stories. I'm a facts and figures guy. I'm not for
anecdotes and assumptions.“
–
fixing the patent system would require "a lot of
very careful hard work from the lowest examiner
to the top of the Supreme Court and all of the rest
of them.“
http://arstechnica.com/tech-policy/2012/05/top-judge-ditching-software-patents-a-bad-solution/
66
67
Views
• The core problem with software patents is that this
...
key principle has been tossed aside. Everyone in the
software field has seen a parade of patents which do
nothing but try to claim rights on techniques that
have already been in use for years, let alone
developments that while new, are still obvious to
those of us with ordinary skills in programming.
– http://martinfowler.com/bliki/SoftwarePatent.html
•
Let’s Limit the Effect of Software Patents, Since We
Can’t Eliminate Them
–
http://www.wired.com/opinion/2012/11/richard-stallman-software-patents/
68
Talk Outline
•
Protecting Intellectual Property
•
Introduction to Patents
•
Patentability (in the U.S.)
•
Patentability of Software
•
Patenting Business Methods
•
Software Patents in Europe
•
Pros and Cons of Software Patents
–
The Controversy Regarding Software Patents
•
Problems and Possible Directions
•
Summary
69
Debates about software patents
•
Proposal for a directive of the European Parliament and
of the Council on the patentability of computer
implemented inventions (initiated 2002)
–
Heated debates
•
between various groups of software developers and
companies,
•
between governments of countries with different interests,
•
between pro-IP and anti-IP groups.
•
Drastic amendments by the European Parliament,
revision by the Council, second reading and
rejection by the Parliament (in July 2005).
70
http://www.nosoftwarepatents.com/m/m/dangers/index.html
http://www.gnu.org/philosophy/danger-of-software-patents.html
71
Talk Outline
•
Protecting Intellectual Property
•
Introduction to Patents
•
Patentability (in the U.S.)
•
Patentability of Software
•
Patenting Business Methods
•
Software Patents in Europe
•
Pros and Cons of Software Patents
–
The Controversy Regarding Software Patents
•
Problems and Possible directions
•
Summary
72
Patent Reform
Patent law is crucial to
encourage technological
innovation. But as the
patent system currently
stands, diverse industries
from pharmaceuticals to
software to
semiconductors are all
governed by the same
rules even though they
innovate very differently.
THE PATENT CRISIS AND HOW THE COURTS CAN SOLVE IT, Dan L. Burk & Mark A.
Lemley, Chicago, Ill., University of Chicago Press, 2009.
73
Patent Reform Issues
•
Need better and cheaper ways than litigation
to challenge a weak patent.
•
Need a better review process that may reject
bad applications, and may deter threats of
litigation by holders of weak patents.
74
Should software be patentable?
•
Maybe that’s the wrong question to ask.
•
The question to ask is how to improve the
system so that no patent protection will be
granted to broad, vague or unoriginal ideas.
•
Need methodologies, principles and rules that
will best suit software patent.
75
Views (Paul Graham)
Are Software Patents Evil?, March 2006,
http://www.paulgraham.com/softwarepatents.html
•
… if you're against software patents, you're against
patents in general. Gradually our machines consist
more and more of software. Things that used to be
done with levers and cams and gears are now done
with loops and trees and closures. There's nothing
special about physical embodiments of control systems
that should make them patentable, and the software
equivalent not.
•
Since software patents are no different from hardware
patents, people who say "software patents are evil" are
saying simply "patents are evil." So why do so many
people complain about software patents specifically? I
think the problem is more with the patent office than
the concept of software patents.
76
Possible Directions
•
Law adaptation to new technologies
–
By legislation or by proper interpretation by courts
•
Better principles, rules and procedures to increase patent
quality, increase certainty and reduce litigation.
•
Possible different patent terms to different inventions
–
20-year term is too long for software patents
•
Focus on better ways to determine nonobviousness.
–
Prevents patents on minor modifications
•
A threshold test (e.g., U.S.C. §101 ) should be minimal.
77
Possible Directions
•
Prevent too Broad Claims
–
Diehr’s process was tied to a specific practical
application of a (known) formula that did not
prevent future innovation relying on that formula.
–
Need better rules regarding the Doctrine of
Equivalence.
–
Balancing: proper balance between the gains of
society and gains of an inventor.
•
Market power of certain patents (e.g., interfaces) may
be out of proportion to the intrinsic value of the
innovation.
78
Need for Advanced Patent Search Tools
•
“Why do firms in some industries ignore patents
when developing new products? This paper posits a
simple but novel answer to this long-puzzling
question: firms ignore patents because they are
unable to discover the patents their activities might
infringe. The costs of finding relevant patents, which
we call discovery costs, are prohibitively high”.
–
Mulligan, Christina and Lee, Timothy B., Scaling the Patent System
(March 6, 2012). NYU Annual Survey of American Law, Forthcoming.
Available at SSRN: http://ssrn.com/abstract=2016968
79
Advanced Search Tools
•
Asher Wilk,
Advanced Semantic Search: The Patent World as an Example
Info 2012: The 27th Annual Conference and Exhibition, May 2012
http://blog.tau.ac.il/libraries/wp-content/uploads/2012/05/Info2012_160512_presentation.pdf
•
Ariel Frank,
Advanced Semantic Search: The Medical World as an Example
Info 2012: The 27th Annual Conference and Exhibition, May 2012
http://blog.tau.ac.il/libraries/wp-content/uploads/2012/05/info2012-sem.pdf
80
Talk Outline
•
Protecting Intellectual Property
•
Introduction to Patents
•
Patentability (in the U.S.)
•
Patentability of Software
•
Patenting Business Methods
•
Software Patents in Europe
•
Pros and Cons of Software Patents
–
The Controversy Regarding Software Patents
•
Problems and Possible Directions
•
Summary
81
Summary
•
It is important for computer professionals to
gain knowledge in the patents domain
•
Presently patent law contains several
methodologies, many rules, there are
differences among countries, and there have
been claims for inconsistency.
•
Therefore, there is a need for significant
improvements, and for researching which
methodologies, principles and rules will best
suit software patents, to achieve desired goals.
82
Thank You