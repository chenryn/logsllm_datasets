# Implementation on a Computer

- A straightforward translation of a financial system into a computer program.

## Technical Board of Appeal
- The contribution approach often confuses the examination for patentable subject matter with that of inventive step.
- It should be possible to determine whether claimed subject matter has technical character without reference to prior art or the specific contribution it makes. Technical character is an inherent, absolute property of a claimed invention.
- **Board of Appeal Decision:** The claims lacked a technical inventive step.

## Hitachi/Auction Method T258/03 [2004]
- **Hardware Approach:**
  - An invention will not fall within any of the excluded categories (as set out in Article 52(2)) if it embodies or is implemented by some technical means, such as a computer.
  - Anything carried out by a programmed computer forms an invention, whether claimed as a concrete entity or as an activity.
  - When an invention covers both technical and non-technical elements, it should not be rejected under Art. 52 EPC.

## Further Technical Effect - IBM T1173/97
- A method or program requires a further technical effect to avoid being considered a "computer program as such."
  - Running a program on a computer inherently produces a technical effect (e.g., electrical currents).
  - However, this is not sufficient to avoid exclusion from patentability.
  - If a computer program can bring about a further technical effect beyond these normal physical effects, it is not excluded from patentability.

### Examples of Further Technical Effects
- Acting on physical data, e.g., processing control values in an industrial process (money, business data, and text are not considered physical data).
- Affecting the way a computer operates, such as saving memory (e.g., file compression), increasing speed, improving security, or enhancing data transfer rates.
- Involving technical considerations in its structure (implementation details).

## The Problem-Solution Approach (EPO Guidelines)
1. **Determine the closest prior art:**
   - Identify the item of prior art that discloses technical effects most similar to the invention (often the one with the greatest number of common features).
2. **Establish the objective technical problem:**
   - Define how to modify or adapt the closest prior art to achieve the specific technical effects of the invention that are not present in the closest prior art.
3. **Check obviousness:**
   - Determine whether a skilled person in the art, starting from the closest prior art and knowing the objective technical problem, would arrive at the claimed solution in an obvious way.

# Talk Outline
- Protecting Intellectual Property
- Introduction to Patents
- Patentability (in the U.S.)
- Patentability of Software
- Patenting Business Methods
- Software Patents in Europe
- Pros and Cons of Software Patents
  - The Controversy Regarding Software Patents
- Problems and Possible Directions
- Summary

## Why Software Should Be Patentable?
- To encourage innovation and economic development:
  - Innovators are highly responsive to monetary incentives.
  - Patents are the most effective incentives.
  - Software inventors should be rewarded like other inventors.
- To overcome the free-rider problem.
- Patents are particularly important when:
  - R&D costs are high.
  - Competitors can easily perform reverse engineering.
  - Technological advances can be quickly and inexpensively mimicked by competitors.

## Arguments Against Software Patents
- Monopolies distort competition and increase prices.
- No evidence of increased innovation:
  - Many significant software inventions have been developed without patents.
  - Open-source software demonstrates that patents are not necessary.
  - Some argue that patenting software reduces overall innovation.

### Views
- "Innovation in the software business has flourished without patents, and there is no obvious reason to implement a new exclusive right in a market that seems to have been enormously innovative without it."
- Before 1981, many innovations were made without patents, including GUIs, linked lists, search algorithms, databases, word processing, spreadsheets, and programming languages.

## Additional Arguments Against Software Patents
- A 20-year term is too long for a fast-moving industry.
- Evaluating the novelty or non-obviousness of software inventions is difficult.
- Prior art may be hard to find in software, as algorithms can be buried in program code.
- Patents can inhibit research, requiring multiple licensing agreements.
- Constant searching for infringement.
- Software does not fit well into the patent system.
- Patent litigation can destroy small companies.

### Views
- **Former Federal Circuit Judge Paul Michel:**
  - "How much [patents] retard [software] I'm not so sure. I hear a lot of anecdotes, a lot of scare stories. I'm a facts and figures guy. I'm not for anecdotes and assumptions."
  - Fixing the patent system would require "a lot of very careful hard work from the lowest examiner to the top of the Supreme Court and all of the rest of them."

### Core Problem with Software Patents
- Key principles have been ignored, leading to patents on techniques that have been in use for years or are obvious to those with ordinary programming skills.
- We need to limit the effect of software patents, as eliminating them entirely is not feasible.

## Debates About Software Patents
- **Proposal for a Directive of the European Parliament and of the Council on the Patentability of Computer-Implemented Inventions (Initiated 2002):**
  - Heated debates between various groups of software developers and companies, governments of countries with different interests, and pro-IP and anti-IP groups.
  - Drastic amendments by the European Parliament, revision by the Council, second reading, and rejection by the Parliament (in July 2005).

## Patent Reform
- Patent law is crucial for encouraging technological innovation.
- Diverse industries, such as pharmaceuticals, software, and semiconductors, are governed by the same rules despite their different innovation processes.

### Issues in Patent Reform
- Need better and cheaper ways than litigation to challenge weak patents.
- Need a better review process to reject bad applications and deter threats of litigation by holders of weak patents.

### Should Software Be Patentable?
- Perhaps the question should be how to improve the system to prevent broad, vague, or unoriginal ideas from receiving patent protection.
- There is a need for methodologies, principles, and rules that best suit software patents.

### Views (Paul Graham)
- If you are against software patents, you are against patents in general. As machines increasingly rely on software, there is no special reason why physical embodiments of control systems should be patentable while their software equivalents are not.
- The issue lies more with the patent office than with the concept of software patents.

## Possible Directions
- Adaptation of law to new technologies through legislation or proper interpretation by courts.
- Better principles, rules, and procedures to increase patent quality, certainty, and reduce litigation.
- Different patent terms for different inventions (e.g., a 20-year term is too long for software patents).
- Focus on better ways to determine non-obviousness to prevent patents on minor modifications.
- Prevent overly broad claims.
- Balance the gains of society with the gains of the inventor.
- Address the disproportionate market power of certain patents (e.g., interfaces) relative to the intrinsic value of the innovation.

## Need for Advanced Patent Search Tools
- Firms in some industries ignore patents because they cannot discover the relevant patents their activities might infringe.
- Advanced semantic search tools can help address this issue.

### Advanced Search Tools
- **Asher Wilk:**
  - "Advanced Semantic Search: The Patent World as an Example"
  - Info 2012: The 27th Annual Conference and Exhibition, May 2012
- **Ariel Frank:**
  - "Advanced Semantic Search: The Medical World as an Example"
  - Info 2012: The 27th Annual Conference and Exhibition, May 2012

## Summary
- It is important for computer professionals to gain knowledge in the patents domain.
- Presently, patent law contains several methodologies and rules, with differences among countries and claims of inconsistency.
- Significant improvements are needed, and research is required to determine which methodologies, principles, and rules will best suit software patents to achieve desired goals.

Thank you.