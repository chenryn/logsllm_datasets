# 零、前言
Docker 是一个开源的、基于容器的平台，任何人都可以在任何地方一致地开发和部署稳定的应用。Docker 在为超现代应用创建可扩展和可移植的环境时提供了速度、简单性和安全性。随着 Docker 在现代微服务和 N 层应用容器化中的出现和流行，有效地对生产级部署的自动化工作流进行故障排除既谨慎又势在必行。
# 这本书涵盖了什么
[第 1 章](01.html "Chapter 1. Understanding Container Scenarios and an Overview of Docker")、*了解容器场景和 Docker* 概述，是关于借助应用和基于操作系统的容器的基本容器化概念。我们将对 Docker 技术、它的优势以及 Docker 容器的生命周期进行一些介绍。
[第 2 章](02.html "Chapter 2. Docker Installation")、 *Docker 安装*将会讲述在各种 Linux 发行版上安装 Docker 的步骤——Ubuntu、CoreOS、CentOS、红帽 Linux、Fedora 和 SUSE Linux。
[第 3 章](03.html "Chapter 3. Building Base and Layered Images")、*构建基础和分层映像*，教导了生产就绪型应用容器化中的一项关键任务是映像构建。我们还将讨论从头开始手动构建映像。接下来，我们将探索用 Dockerfile 构建分层映像，并详细列出 Dockerfile 命令。
[第 4 章](04.html "Chapter 4. Devising Microservices and N-Tier Applications")、*设计微服务和 N 层应用*，将探索从开发到测试无缝设计的示例环境，消除手动和易出错的资源调配和配置需求。在此过程中，我们将简要介绍如何测试、自动化、部署和管理微服务应用。
[第 5 章](05.html "Chapter 5. Moving Around Containerized Applications")、*围绕容器化应用*展开，我们来看看 Docker 注册表。我们将从使用 Docker Hub 的 Docker 公共存储库的基本概念和与更多受众共享容器的用例开始。Docker 还提供了部署私有 Docker 注册表的选项，我们将研究这个注册表，它可以用来在组织内部推送、拉取和共享 Docker 容器。
[第 6 章](06.html "Chapter 6. Making Containers Work")、*让容器工作*将教你特权容器和超特权容器，特权容器可以访问所有主机设备，超特权容器显示容器可以运行后台服务，后台服务可以用来运行 Docker 容器中的服务来管理底层主机。
[第 7 章](07.html "Chapter 7. Managing the Networking Stack of a Docker Container")、*管理 Docker 容器的网络栈*，将解释 Docker 网络如何通过 Docker0 桥供电，以及其故障排除问题和配置。我们还将查看 Docker 网络和外部网络之间通信问题的故障排除。我们使用不同的网络选项来研究跨多个主机的容器通信，例如 Weave、OVS、法兰绒和 Docker 最新的覆盖网络。我们将对它们进行比较，并查看其配置中涉及的故障排除问题。
[第 8 章](08.html "Chapter 8. Managing Docker Containers with Kubernetes")*用 Kubernetes* 管理 Docker 容器，说明如何在 Kubernetes 的帮助下管理 Docker 容器。在裸机、AWS、vSphere 或使用 minikube 上部署 Kubernetes 时，我们将介绍许多部署场景和故障排除问题。我们还将研究如何有效地部署 Kubernetes 吊舱和调试 Kubernetes 问题。
[第 9 章](09.html "Chapter 9. Hooking Volume Baggage")、*挂载卷*，将深入探讨与 Docker 相关的数据卷和存储驱动概念。我们将讨论在这四种方法的帮助下对数据量进行故障排除，并看看它们的优缺点。在 Docker 容器中存储数据的第一种情况是最基本的情况，但是它没有提供在生产环境中管理和处理数据的灵活性。第二种和第三种情况是使用纯数据容器或直接在主机上存储数据。第四种情况是使用第三方卷插件 Flocker 或 curvest，它将数据存储在单独的块中，甚至提供数据的可靠性，即使容器从一个主机转移到另一个主机或容器死亡。
[第 10 章](10.html "Chapter 10. Docker Deployment in a Public Cloud - AWS and Azure")*公共云中的 Docker 部署- AWS 和 Azure* ，概述了微软 Azure 和 AWS 公共云上的 Docker 部署。
# 这本书你需要什么
您将需要在 Windows、Mac OS 或 Linux 机器上安装 Docker 1.12+。可能需要 AWS、Azure 和 GCE 的公共云帐户，这将在相关章节中提及。
# 这本书是给谁的
这本书旨在帮助经验丰富的解决方案架构师、开发人员、程序员、系统工程师和管理员解决 Docker 容器化的常见问题。如果您希望为自动化部署构建生产就绪的 Docker 容器，您将能够掌握 Docker 的基本功能和高级功能并进行故障排除。对 Linux 命令行语法、单元测试、Docker 注册表、GitHub 以及领先的容器托管平台和云服务提供商(CSP)的高度熟悉是先决条件。在本书中，您还将学习避免首先进行故障排除的方法和手段。
# 惯例
在这本书里，你会发现许多区分不同种类信息的文本样式。以下是这些风格的一些例子和对它们的意义的解释。
文本中的码字、数据库表名、文件夹名、文件名、文件扩展名、路径名、伪 URL、用户输入和 Twitter 句柄如下所示:“使用`start_k8s.sh` shell 脚本重新启动集群。”
代码块设置如下:
```
ENTRYPOINT /usr/sbin/sshd -D 
VOLUME ["/home"] 
EXPOSE 22 
EXPOSE 8080
```
任何命令行输入或输出都编写如下:
```
Docker build -t username/my-imagename -f /path/Dockerfile
```
**新名词**和**重要词语**以粗体显示。您在屏幕上看到的单词，例如菜单或对话框中的单词，出现在如下文本中:“指定**栈名称**、**关键帧**和集群 3。”
### 注
警告或重要提示会出现在这样的框中。
### 类型
提示和技巧是这样出现的。
# 读者反馈
我们随时欢迎读者的反馈。让我们知道你对这本书的看法——你喜欢或不喜欢什么。读者反馈对我们来说很重要，因为它有助于我们开发出你真正能从中获益的标题。要向我们发送一般反馈，只需给 PI:EMAIL 发电子邮件，并在邮件主题中提及书名。如果你对某个主题有专业知识，并且对写作或投稿感兴趣，请参见我们位于[www.packtpub.com/authors](http://www.packtpub.com/authors)的作者指南。
# 客户支持
现在，您已经自豪地拥有了一本书，我们有许多东西可以帮助您从购买中获得最大收益。
## 下载示例代码
你可以从你在[http://www.packtpub.com](http://www.packtpub.com)的账户下载这本书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
您可以按照以下步骤下载代码文件:
1.  使用您的电子邮件地址和密码登录或注册我们的网站。
2.  将鼠标指针悬停在顶部的 **SUPPORT** 选项卡上。
3.  点击**代码下载&勘误表**。
4.  在**搜索**框中输入图书名称。
5.  选择要下载代码文件的书籍。
6.  从您购买这本书的下拉菜单中选择。
7.  点击**代码下载**。
下载文件后，请确保使用最新版本的解压缩文件夹:
*   视窗系统的 WinRAR / 7-Zip
*   zipeg/izp/un ARX for MAC
*   适用于 Linux 的 7-Zip / PeaZip
这本书的代码包也托管在 https://github.com/PacktPublishing/Troubleshooting-Docker 的 GitHub 上。我们还有来自丰富的图书和视频目录的其他代码包，可在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)获得。看看他们！
## 勘误表
尽管我们尽了最大努力来确保我们内容的准确性，但错误还是会发生。如果你在我们的某本书里发现一个错误，也许是文本或代码中的错误，如果你能向我们报告，我们将不胜感激。通过这样做，你可以让其他读者免受挫折，并帮助我们改进这本书的后续版本。如果您发现任何勘误表，请访问[http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择您的书籍，点击**勘误表提交表**链接，并输入您的勘误表的详细信息。一旦您的勘误表得到验证，您的提交将被接受，勘误表将上传到我们的网站或添加到该标题勘误表部分下的任何现有勘误表列表中。
要查看之前提交的勘误表，请前往[https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)并在搜索栏中输入图书名称。所需信息将出现在**勘误表**部分。
## 盗版
互联网上版权材料的盗版是所有媒体的一个持续问题。在 Packt，我们非常重视版权和许可证的保护。如果您在互联网上遇到任何形式的我们作品的非法拷贝，请立即向我们提供位置地址或网站名称，以便我们寻求补救。
请联系我们在 PI:EMAIL 的链接到可疑的盗版材料。
我们感谢您在保护我们的作者方面的帮助，以及我们为您带来有价值内容的能力。
## 问题
如果你对这本书的任何方面有问题，你可以联系我们在 PI:EMAIL，我们将尽最大努力解决这个问题。