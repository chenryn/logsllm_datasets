to
Πjoin
They then send
sponse, where S(cid:48), S(cid:48)(cid:48) and P (cid:48) are appropriately updated version of S, P .
(cid:74)X(cid:75), J,(cid:74)Y(cid:75), K, S(cid:48), P )
sending
and receiving
Full: all parties
(Join, Left,
in response.
Figure 6: Join protocols Πmap and Πjoin.
18
[Join] Upon receiving command (Join, type,(cid:74)X(cid:75), J,(cid:74)Y(cid:75), K, S, P ) from all par-
Output the table(cid:74)Z(cid:75) deﬁned by the case type:
ties. J, K index the join columns of X, Y respectively. Let nX and nY denote
the number of rows in X, Y respectively. Deﬁne Keys(X, J, i) = (Xj[i])j∈J .
Inner: Let the rows of Z be {S(X[i], Y [j]) | ∃i, j s.t. ¬XNULL[i] ∧ ¬YNULL[j] ∧
Keys(X, J, i)=Keys(Y, K, j)∧ P (X[i], Y [i])} along with zero or more
NULL rows s.t. Z has nX rows.
Left: Let the rows of Z be {S(X[i], Y [j]) | ∃i, j s.t. ¬XNULL[i] ∧ ¬YNULL[j] ∧
Keys(X, J, i)=Keys(Y, K, j) ∧ P (X[i], Y [i])} ∪ {S(X[i], NULL)
|
∃i,∀j s.t. ¬XNULL[i] ∧ Keys(X, J, i) (cid:54)= Keys(Y, K, j) ∧ P (X[i], NULL)}
along with zero or more NULL rows s.t. Z has nX rows.
Union: Let
the
rows of Z be {S(X[i], NULL)
∃i s.t. ¬XNULL[i] ∧
P (X[i], NULL)}∪{S(NULL, Y [i]) | ∃i,∀j s.t. ¬YNULL[i]∧Keys(X, J, j) (cid:54)=
Keys(Y, K, i) ∧ P (NULL, Y [i])} along with zero or more NULL rows s.t.
Z has nX + nY rows.
|
Full: Let the rows of Z be {S(X[i], Y [j]) | ∃i, j s.t. ¬XNULL[i] ∧ ¬YNULL[j] ∧
Keys(X, J, i)=Keys(Y, K, j) ∧ P (X[i], Y [i])} ∪ {S(NULL, Y [i])
|
∃i,∀j s.t. ¬YNULL[i]∧Keys(X, J, j) (cid:54)= Keys(Y, K, i)∧P (NULL, Y [i])}∪
{S(X[i], NULL) | ∃i,∀j s.t. ¬XNULL[i]∧Keys(X, J, i) (cid:54)= Keys(Y, K, j)∧
P (X[i], NULL)}
Figure 7: Join functionality Fjoin.
19
to P0 learning the duplicate distribution. This is achieved by requiring the left table
X contain the duplicates rows. After learning the randomized encodings for this
table P0 can program the switching networks appropriately to query the duplicate
locations in the cuckoo hash table.
When both tables contain duplicates we fall back to a less secure protocol archi-
tecture. This is required due to the cuckoo table not supporting duplicates. First,
P1 samples two random permutations π0, π1 and computes X(cid:48) = π1(X), Y (cid:48) = π2(Y )
using the oblivious permutation protocol. P0 then learns all of the randomized en-
codings for the permuted tables X(cid:48) and Y (cid:48). Given this, P0 can compute the size
of the output table and inform the other two parties of it. Alternatively, an upper
bound on the output table size can be communicated. Let n(cid:48) denote this value. P0
can then construct two switching networks which map the rows of X(cid:48) and Y (cid:48) to the
appropriate rows of the output table. The main disadvantage of this approach is
that P0 learns the size of the output, the distribution of duplicate rows and how
these duplicate rows are multiplied together. However, unlike [LTW13] which takes
a conceptually similar approach, our protocol does not leak any information to P1
and P2, besides the value n(cid:48).
3.6 Revealing Results
Revealing a secret shared table(cid:74)X(cid:75) requires two operations. First observe that the
data in the NULL rows is not cleared out by the join protocols. This is done as an
optimization. As such naively reconstructing these rows would lead to signiﬁcant
leakage. Instead X[i] is updated as X[i] = (¬XNULL[i]) · X[i]. The second operation
is to perform an oblivious shuﬄe of the rows. This operation randomly reorders all
the rows without revealing the ordering to any of the parties. In general this step
is necessary since the original ordering of the result table is input-dependent. For
example, say X is a list of patents info, Y is patent billing status, and Z is a list
of patent diseases. Say we reveal select X.name, Y.balance from X, Y on X.id
= Y.id and select X.gender, Z.desease from X, Z on X.id = Z.id. Without re-
ordering you could connect X.name, X.gender, Y.balance and Z.desease by the row
index and infer secret information. However, by randomly shuﬄing this connection
is destroyed and the reveal can be simulated.
4 Computing a Function of a Table
In addition to join queries, our framework can perform computation on a single
secret shared table. For example, selecting X1 + X2 where X3 > 42. For each row
i we generate the corresponding output row Z[i] by computing the new NULL-bit as
ZNULL[i] := XNULL[i]∨P (X[i]) where P (·) is the where predicate. The new column(s),
e.g. Z1 = X1 + X2, can then be constructed in a straightforward MPC protocol, e.g.
[MR18, AFL+16]. The key property is that all of the operations are with respect to
20
a single row of X, allowing them to be evaluated in parallel.
Our framework also considers a second class of functions on a table that allow
computation between rows. For example, computing the sum of a column. We refer
to this broad class of operations as an aggregation function. Depending on the exact
computation, various levels of eﬃciencies can be achieved. Our primary approach
is to employ the ABY3 framework [MR18] to express the desired computation in an
eﬃcient way and then to evaluate the resulting circuit. Next we highlight a sampling
of some important aggregation operations:
 Sum: For a column(cid:74)Xj(cid:75), compute(cid:74)s(cid:75) =(cid:80)
dexes only non-NULL rows. The parties compute(cid:74)s(cid:75)A :=(cid:80)
i∈[n] B2A((¬(cid:74)XNULL(cid:75)[i])·
(cid:74)Xj(cid:75)[i]) where B2A is the boolean to arithmetic share conversion of [MR18].
can then convert(cid:74)s(cid:75)A back to(cid:74)s(cid:75) if desired.
by computing(cid:74)s(cid:75)A :=(cid:80)
i∈[n] B2A(¬(cid:74)XNULL(cid:75)[i])
 Count/Cardinality: Here, we consider two cases. 1) In the general case there is
an arbitrary table over which the count is being computed. This is performed
i(cid:74)Xj(cid:75)[i] where Xj[i] ∈ Z
2(cid:96) and i in-
In total this requires 2n(cid:96) binary gates and (cid:96) + 1 rounds[MR18]. The parties
2) Consider case where some of the parties should learn the cardinality of a
join without a where clause. First, w.l.o.g. let us assume that P2 should learn
the cardinality. The randomized encodings Ex, Ey are respectively revealed P0
and P1 as done in the standard join protocol. These encodings are then sent
to P2 in a random order. P2 outputs |Ex ∩ Ey| as the count/cardinality. In
the event that P0 or P1 should also learn the cardinality, P2 sends |Ex ∩ Ey|
to them.
 Min/Max: We propose a recursive algorithm where the min/max of the ﬁrst
and second half of the rows is recursively computed. The ﬁnal result is then
the min/max of these two values. Concerning NULL rows, the corresponding
value can be initialized to a maximum or minimum sentential value which
guarantee that the other value will be propagated. The overall complexity of
this approach is O(n(cid:96)) binary gates and O((cid:96)logn) rounds when using a basic
comparison circuit[MR18].
More generally, any polynomial time function can generically be expressed using
the ABY3 framework[MR18]. However, the resulting eﬃciency may not be adequate
for practical deployment.
5 Applications
5.1 Voter Registration
Improving the privacy and integrity of the United States voter registration system
was a primary motivation of the developed protocols. In the United States Electoral
21
College, each state has the responsibility of maintaining their own list of registered
citizens. A shortcoming of this distributed process is that without coordination
between states it is possible for a voter to register in more than one state. If this
person then went on to cast more than one vote the integrity of the system would
be compromised. In the case of double registering, it is often a result of a person
moving to a new state and failing to unregister from the old state. Alternatively,
when a voter moves to a new state it may take them some time to register in the
new state, and as such their vote may go uncast. The Pew Charitable Trust[Smi14]
reported 1 in 8 voter registration records in the United States contains a serious
error while 1 in 4 eligible citizens remain unregistered. The goal in this application
of our framework is to improve the accuracy of the voting registration data and help
register eligible voters.
A naive solution to this problem is to construct a centralized database of all
the registered voters and citizen records. It is then a relatively straightforward pro-
cess to identify persons with inaccurate records, attempt to double register or are
simply not register at all. However, the construction of such a centralized repos-
itory of information has long had strong opposition in the United States due to
concerns of data privacy and excessive government overreach. As a compromise
many states have volunteered to join the Electronic Registration Information Cen-
ter (ERIC)[eri18] which is a non-proﬁt organization with the mission of assisting
states to improve the accuracy of America’s voter rolls and increase access to voter
registration for all eligible citizens. This organization acts as a semi-trusted third
party which maintains a centralized database containing hashes of the relevant in-
formation, e.g. names, addresses, drivers license number and social security number.
We propose adding another layer of security with the deployment of our secure
database join framework. Within a single state, diﬀerent agencies will ﬁrst secret
share their data to construct a join table containing the registration status of ev-
eryone within that state. This joined table can then be joined with the respective
table from all of the other stated. In total, there would be 50 intra-state joins and
then 50 × 49 inter-state joins.
We envision that the intra-state join will be perform with ERIC and the state
agencies as the participating parties. The inter-state joins can then be performed by
ERIC and one of the agencies from each state. This ensures that the data remains
secret shared at all times. The data that each state requires can then be revealed
at the end of the computation. For more details see Appendix A.
The average US state has an approximate population of 5 million with about
4 million of that being of voting age. For this set size, our protocol is capable of
performing the speciﬁed query in 30 seconds and 6GB of total communication. If
we consider running the same query where one of the states is California with a
voting population of 30 million, our protocol can identify the relevant records in ﬁve
minutes. For a more details see Section 6.
22
5.2 Threat Log Comparison
Another motivating application is referred to as threat log comparison where multi-
ple organizations share data about current attacks on their computer networks. The
goal of sharing this data is to allow the participating parties to identify and stop
threats in a more timely manner. Facebook has a service called ThreatExchange[thr18]
which provides this functionality. One drawback of the Facebook approach is that
all of the data is collected on their servers and is often viewable by the other par-
ticipants. This architecture inherently relies on trusting Facebook with this data.
We propose using our distributed protocol to provide a similar functionality
while reducing the amount of trust in any single party, e.g. Facebook.
In this
setting we consider a moderate number of parties each holding a dataset containing
the suspicious events on their network along with possible meta data on that event,
e.g. how many times that event occurred. All of the parties input these sets into our
join framework where the occurrences of each event type are counted. An example
of such an event is the IP address that makes a suspicious request.
There are at least two ways to securely compute the occurrences of these events.
One method is to perform a full join of all the events where the counts are added
together during each join. The resulting table would contain all of the events and
the number of times that each event occurred. The drawback of this approach is
that each full joins require performing a left join followed by a union, twice the
overhead compared to other join operations.
Now consider a diﬀerent strategy for this problem. First, the parties can compute
and reveal the union of the events. Given this information the parties can locally
compute the number of times this event occurred on their network and secret share
this information between the parties. The parties then add together this vector of
secret shared counts and reveal it.
One shortcoming of this approach is no ability to limit which events are revealed.
For example, it can be desirable to only reveal an event if it happens on k out of
the n networks. This can be achieved by having the parties compute and reveal
the randomized encodings for all of the items in the union, instead of the items
themselves. Under the same encoding key, each party holding a set employs the
three server parties to compute the randomized encodings for the items in their set.
These encodings are revealed to the party holding the set. For each encoding in
the union, the parties use the MPC protocol to compute the number of occurrences
that event had and conditionally reveal the value. For example, if at least k of
the networks observed the event. Other computation on meta data can also be
performed as this stage.
23
6 Experiments
We implemented our full set of protocols and applications along with a performance
evaluation of them here. They will be open source. We considered set intersec-
tion (without associated values), our various join and union operations, intersection
cardinality, and intersection sum of key-value pairs along with the two application
described in Section 5. We also compare to protocols that oﬀer a similar function-
[KKRT16, PSWW18, BA12, CGT12, IKN+17]. Our implementation is
ality, i.e.
written in c++ and building on primitives provided by [Rin]. Crucial to the per-
formance of implementation is the widespread use of SIMD instructions that allow
processing 128 binary gates with a throughput of one cycle.
Experimental Setup. We performed all of our experiments on a single server acquired
in 2015 which is equipped with two 18 core CPUs at 2.7 GHz and 256 GB of RAM.
Despite having many cores, our implementation restricts each party to a single
thread. We note this is a limitation of development time/resources and not of the
protocols themselves. The parties communicate over a loopback device on the local
area network which allows to shape the traﬃc ﬂow to emulate a LAN and WAN
setting. Speciﬁcally, the LAN setting allows 10 Gbps throughput with a latency of
a quarter millisecond while the WAN setting allows an average 100 Mbps and 40
millisecond latency. Despite having such a fast LAN bandwidth, our protocol only
utilizes a peak bandwidth of 1Gbps.
All cryptographic operations are performed with computational security pa-
rameter κ = 128 and statistical security λ = 40. We consider set/table sizes of
n ∈ {28, 212, 216, 220, 224} and n = 226 in some cases. Times are reported as the
average of several trials.
Set Intersection. We ﬁrst consider set intersection. In this case the two tables of
our protocol consist of a single column which is used as the join-key. We compare
our protocol to [KKRT16] which is a two party set intersection protocol where the
input sets each are known in the clear to one of the parties and one party learns
the intersection exactly. This is contrasted by our three party protocol where the
input and output sets are secret shared between the parties. That is, our protocol
is composable & supports outsourced MPC while [KKRT16] does not and can not
be trivially modiﬁed to do so without a large overhead. Both our protocol and
[KKRT16] were benchmarked on the same hardware. We also compare to the three
party protocol of [BA12] which is composable and was not benchmarked on the same
hardware. Due to the code of the [BA12] protocol not being publicly available, we
cite their benchmarks which were performed on three AMD Opteron computers at
2.6GHz connected on a 1Gbps LAN network. Given the relative performance of
our machines, we believe this to yield a fair comparison. This protocol ﬁrst sorts
the two input sets/tables which in practice requires O(n log2 n) overhead[BA12]. In
contrast, our protocol and [KKRT16] has O(n) overhead and O(1) rounds.
This asymptotic diﬀerence also translates to a large diﬀerence in the concrete
24
Operation
Intersection
Cardinality
Joins/Union
Protocol,
# Parties
,3
This
,2
[KKRT16]
[BA12]∗
,3
,3
This
[LTW13]∗
,3
This
,3
[PSWW18]a ,2
[PSWW18]b ,2
,2