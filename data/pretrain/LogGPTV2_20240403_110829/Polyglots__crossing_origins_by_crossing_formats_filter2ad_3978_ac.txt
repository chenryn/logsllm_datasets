we will focus on the string, dictionary, name and stream
objects.
String objects.
There are two types of strings; literal and hexadecimal.
Literal strings are enclosed by the ”(” and ”)” characters.
Any character can occur in a literal string, even parentheses
if they are balanced, e.g. a matching closing parenthesis
for every opened parenthesis. In hexadecimal strings each
character is represented by its corresponding hexadecimal
value, enclosed by the ”” characters.
Dictionary objects.
Dictionary objects are a name-value map delimited by the
”>” tokens. The names are name objects and
the values are objects of any type. Name objects begin with
the ”/” character, followed by a string of non-whitespace
characters. Each dictionary has a type, either speciﬁed by
the ”/Type” name or inferred from the context in which it
occurs. The type declares which kind of element the dictio-
nary is describing, e.g. a page or an annotation. Dictionaries
form the structure of the document by connecting objects
through references, e.g. relating a page to its contents. A
special type of dictionary describes actions. Actions are trig-
gered when a certain event occur, such as a ﬁle is opened or
a page is displayed, and the action dictionary specify how
it is handled. Actions can be used to, among other things,
go to a speciﬁc page, play a sound, execute JavaScript or
launch a command.
Stream objects.
A stream is an unlimited sequence of bytes. A stream
object is indirect and consists of a dictionary, describing the
stream, and the associated stream delimited by the ”stream”
and ”endstream” keywords. According to the speciﬁcation,
the stream dictionary shall contain a Length name to specify
the length of the stream. In practice this can be omitted as
long as the delimiting keywords are in place. PDF supports
encoding of streams, in which case the dictionary describe
which ﬁlters are required to decode the stream.
3.1.3 Cross-reference
The cross-reference section is a record of the location of
indirect objects within a ﬁle. The location is speciﬁed as
the byte oﬀset from the beginning of the ﬁle. The cross-
reference section is opened with the ”xref” keyword, followed
by one record for each indirect object. The cross-reference
section will be reconstructed if missing and can therefore be
omitted.
3.1.4 Trailer
The trailer is composed of a trailer dictionary, a pointer
to the cross-reference section and an end-of-ﬁle marker. The
trailer dictionary is introduced by the ”trailer” keyword.
Root is in practice the only mandatory name in the trailer
dictionary, referencing the root of the document structure.
The ”startxref” keyword is followed by the number of bytes
from the beginning of the ﬁle to the ﬁrst cross-reference sec-
tion. As with the cross-reference section, it can be omitted.
The string ”%%EOF” marks the end-of-ﬁle, but can be omit-
ted.
3.2 PDF-based polyglots
Several design choices in the PDF speciﬁcation make the
format particularly suitable for making polyglots. One such
design choice is the error tolerant parser. This is in part
motivated by another design choice namely PDF being a
container format. This implies that a PDF ﬁle can, by de-
sign, contain foreign syntax that could interfere with the
syntax of the ﬁle. Another motivation is that PDF ﬁles
are designed to be both forward- and backward-compatible.
Readers implementing an older version of the speciﬁcation
do not recognize new features and behave as if they were
not present in the ﬁle. The implementation notes of the
speciﬁcation describes some exceptions to the requirements
of the speciﬁcation, such as the header can occur anywhere
within the ﬁrst 1024 bytes of the ﬁle. This ﬂexibility gives
plenty of room for combining with syntax of another format.
The speciﬁcation declares many components to be required
in a PDF ﬁle, but as can be seen in Section 3.1, in practice
several components can be omitted [15]. The code in List-
ing 2 shows the minimal syntax required for a malformed,
but valid PDF ﬁle.
Listing 2: Minimal PDF ﬁle
%PDF−
t r a i l e r >>>>>
Furthermore the PDF format is of particular interest to us
because of its many capabilities. Some examples include ex-
ecuting JavaScript, launching commands, and issuing HTTP
requests. The HTTP requests are restricted to the origin of
the PDF ﬁle, and will include any cookies associated with
that origin. Adobe Reader also includes a Flash runtime to
play embedded Flash ﬁles on systems that do not have the
Flash runtime installed.
When a PDF document is embedded in a web page, the
corresponding plug-in is executed to render the content. Re-
call from Section 2.1 that the plug-in is selected based on
the MIME-type, either supplied by the server or in the type
attribute with preference for the later. Also recall that the
browser rely on the plug-in to handle the situation when the
MIME-type supplied by the server is inconsistent with the
MIME-type of the plug-in. In the case of the Adobe Reader
plug-in, it disregards the MIME-type supplied by the server
and will attempt to interpret any content as PDF. Listing 3
shows how arbitrary content can be rendered as PDF for-
mat.
758Listing 3: HTML for embedding PDF content
In recent versions of Adobe Reader certain measures have
been taken to prevent creating PDF-based polyglots.
In
accordance with our recommendations, Adobe Reader has
made the parsing more strict by attempting to match the
ﬁrst bytes of the ﬁle against a set of known signatures. If
a match is found, the parser will abort loading of the doc-
ument. However, this does not fully defend against PDF-
based polyglot attacks. The problem of this approach is
that there are a number of ﬁle formats that lack a reliable
signature, e.g., HTML. Also, for this approach to be reli-
able, the signature must match the signature enforced by
other interpreters of the format. A notable counterexample
is the signature used for the JPG format. While the signa-
ture is correct according to the speciﬁcation of the format,
several JPG interpreters will allow slightly malformed sig-
natures. Such a malformed signature will bypass the check
in Adobe Reader and still be rendered correctly in a viewer.
This opens up for PDF-based polyglot attacks.
3.3 PDF attacks
As explained in Section 2.3 there are two vectors for poly-
glot attacks; syntax injection and content smuggling. PDF
is a suitable format for both vectors as it is both a text based
format with error tolerant parsing, and has widespread ac-
ceptance as a document format, often preferred over other
document formats.
3.3.1 Syntax injection
As the scenario details in Section 2.3.1, the attacker in
a syntax injection attack manipulates a vulnerable service
to include PDF syntax in existing content, e.g. HTML-
documents. The PDF syntax is typically injected through
user input used by the vulnerable service in the composition
of documents. An example of a suitable fragment to inject
is shown in Listing 4. The resulting content is subsequently
embedded in the attackers page as PDF, as exempliﬁed in
Listing 3. As mentioned in Section 3.2, the embedded PDF
can issue requests to the origin it came from, carrying the
cookies associated with that origin. These requests allow for
the extraction of sensitive user data that can either be com-
municated back to the attacker, or be leveraged in further
attacks.
Thus far, exploitation of vulnerable services have been
discussed, excluding the speciﬁc conditions under which a
service is vulnerable. In order to exploit the vulnerability,
the injected syntax must pass through any existing ﬁlters
unchanged or at least with its semantics preserved. If user
input in an HTML-document is not sanitized, any syntax
would be unchanged and the service is vulnerable to less so-
phisticated attacks, e.g. cross-site scripting, therefore san-
itized user input is of greater concern. Based on the PDF
samples in Listings 2 and 4, we can derive the set of to-
kens required to build a PDF. Assuming that alpha-numeric
characters pass through a sanitization ﬁlter unmodiﬁed, the
set of tokens is {%, >, /}. As can be noted, there is
a small but signiﬁcant overlap with the tokens of HTML,
which implies that many web sites protected against cross-
site scripting attacks are also protected against PDF-based
polyglot attacks. One of the problems of ﬁltering input for
inclusion in a web page are the many contexts in which the
input can be included. A problem made even more complex
by the diversity of languages the page contains. Language
incompatibilities force context dependent ﬁltering, where
the same input is treated diﬀerently based on the context
in which it is included. In certain contexts angle brackets
are often left untouched by ﬁlters.
HTML comments.
No HTML enclosed in comments, ””, will be
rendered, and therefore ﬁlters consider this context safe. To
prevent input from escaping the comment by injecting an
end comment token, certain ﬁlters remove any occurrences
of ”–>”, but leave the rest of the input untouched. HTML
comments are meaningless to PDF, and the result is a valid
HTML/PDF polyglot.
JavaScript strings.
In an in-line JavaScript context, user input is often in-
cluded in the shape of a JavaScript string, delimited by sin-
gle or double quotes. In this context only a few characters
require encoding, as they can break the string context. Nat-
urally, any single or double quotes need escaping, as well as
any carriage return or line feed characters. In the spirit of
making minimal changes to the input, certain web sites only
escape these characters. This is suﬃcient to prevent cross-
site scripting attacks, but fail to protect against PDF-based
polyglot attacks.
Note that not only in-line JavaScript falls short in this re-
gard. JavaScript object notation (JSON) is used in modern
web sites as a data transport. This is particularly common
in web sites that provide an API to interact with the of-
fered services. JSON encoded information suﬀer the same
problem as in-line JavaScript, thereby extending the attack
surface further.
3.3.2 Content smuggling
Due to the nature of the PDF, it can without much eﬀort
be combined with just about any other format. This pro-
vides ample opportunity to create malicious polyglots where
PDF is either the benign or the malicious format. Conse-
quently, this signiﬁcantly expands the attack surface, mak-
ing it important to take measures to protect against these
attacks.
PDF as the benign format.
Services like job brokers commonly let the user upload a
CV in the form of a PDF-ﬁle. Before such PDF-ﬁles are
published to recruiters, they are veriﬁed to not contain any
malicious payload. Such a veriﬁcation only extends to the
PDF format itself. An attacker can produce a PDF that
is valid and benign, but also a polyglot hiding another ma-
licious format, such as Flash. As described in the content
smuggling scenario in Section 2.3.2, the uploaded PDF ﬁle
is then embedded on the attacker’s web site, but now as the
malicious format. Using social engineering, the attacker can
persuade the victim to visit the web site.
Creating a PDF/Flash polyglot is no major challenge. A
proof-of-concept can easily be created by storing the PDF
source code as a static string variable in the malicious Flash
source code. When compiling Flash, the output is com-
pressed by default to save space, thereby obfuscating the
PDF source code. However, tools exist that decompress the
Flash ﬁles, which restores the plain PDF code.
759PDF as the malicious format.
In the content smuggling scenario in Section 2.3.2, the
attacker uploads the PDF polyglot to a vulnerable content
hosting service. A server-side veriﬁcation process will base
its veriﬁcation on the benign formats it expects to receive.
The polyglot is designed to verify correctly as the benign for-
mat, and the veriﬁcation is likely to miss the malicious PDF
components, as it is unaware of the alternate interpretation
of the content.
Given the extensive capabilities of the PDF format, ex-
ploiting a content smuggling vulnerability with a PDF-based
polyglot attack, can be done without much eﬀort. To pre-
vent the attack, the veriﬁcation process have to actively
search for and remove PDF speciﬁc syntax. The impact
of exploitation depends on the payload used in the attack.
3.4 PDF payloads
As discussed in Section 2.4, there are two approaches to
exploiting these vulnerabilities; cross-site request forgery,
and cross-origin information leakage. Both of these require
extracting information from the vulnerable service, which is
something that can be achieved using the capabilities of the
PDF format.
In order to extract information and leak across origins,
a communication channel is established. PDF documents
provide multiple ways of generating HTTP requests; many
of which allow cross-origin communication, but are, out of
security concerns, only one-way in the sense that the PDF
document will never see the result. Therefore, the focus is
directed towards two methods that allow bidirectional com-
munication; XML external entities, and embedded Flash.
Since the document will retain the origin from which it was
served, all requests issued from the document will include
any cookies associated with the target origin.
XML External Entities.
The PDF JavaScript API includes a method to parse XML
documents, called XMLData.parse. The XML document be-
ing processed may in turn rely on external entities, required
for the parsing of the document, which the XML parser will
request. The request is bound to the origin of the docu-
ment, and the response is included in the XML document.
The source code of the XML document reﬂects this response
and can be retrieved at a later point, resulting in a bidirec-
tional communication channel. As the response is included
in the XML, the result has to be well-formed XML. This
puts a restriction on the content that can be requested us-
ing this method. Considering that HTML pages are rarely
well-formed this method may be too restricted in practice.
Listing 4 contains an example PDF document that uses
XML external entities. The one-way method getURL is used
to communicate the information back to the attacker. Given
the compact size of the example, it is useful for the syntax
injection scenario in Section 2.3.1, which require injection of
small syntax fragments.
As of version 10.1.5, in accordance with our recommen-
dations, XML external entities has been removed. Thereby
the risks of leakage of sensitive information is signiﬁcantly
reduced.
Embedded Flash.
By embedding a Flash ﬁle in the PDF document the ca-