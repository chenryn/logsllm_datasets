Programming errors belong to the most common causes for
vulnerabilities with code execution capability for devices with
local, remote or internet access [59]. A recent example of a
critical real-world vulnerability is referred to as Ripple20 [60].
Ripple20 is a series of vulnerabilities discovered in a small
TCP/IP stack affecting a wide range of embedded devices.
The series include multiple vulnerabilities that are caused by
improper input or parameter validation. Ripple20 proves that
out-of-bound write and read vulnerabilities are a recent and
major threat to embedded landscape.
Using our out-of-bounds write vulnerabilities (improper
validation), we developed return-oriented programming (ROP)
attacks against each application. Thereafter, we developed
patches for both applications, of which each inserts a bounds-
checking preventing the out-of-bounds write rendering the
ROP-attack useless. Furthermore, we also performed a mea-
surement study on these example applications, quantifying the
overhead induced by hotpatching. These measurements clearly
demonstrate that HERA is highly efﬁcient inducing negligible
overhead.
A. Case Study: Medical Devices
Next, we describe our two safety-critical medical devices,
namely the syringe pump and the heartbeat sensor. Both
devices build upon the popular Arduino platform. They are
a good target for our evaluation as they both need to strictly
meet hard deadlines to guarantee the patient’s health.
Syringe Pump. A syringe pump is a medical device used by
an external monitoring or sensor system to inject intravenous
10
Power supplyStepper motorfor syringeHeart rate sensorLCDNUCLEO-F446RE development boardDriver forstepper motormedication to a patient in regular time intervals. It is critical
to inject the correct amount, with the correct injection rate
at precisely deﬁned points in time. While commercial syringe
pumps are typically expensive, there has been interest in de-
veloping syringe pumps as open source, allowing to reproduce
such medical devices [61]. This enables manufacturing of such
critical, but possibly life-saving medical devices, even though
industrial-produced syringe pumps are not available, e.g., due
to cost reasons or sudden incidents like catastrophes.
For the evaluation of HERA, we used an open-source
implementation of a syringe pump [61]. This project was for
example also previously used by Abera, Asokan, Davi, et al.
to show feasibility of an implementation for remote attestation
of embedded devices [62].
Heartbeat Sensor. The second example is a heartbeat sen-
sor [63], which is a timing-critical sensing device. Accurate
measurements depend on the real-time sampling rate of the
sensor. If the timing varies,
this massively inﬂuences the
quality of the measurements. Measurements can easily become
unreliable due to noise, peaks, or a variable signal,
thus
continuous sampling is required. Security is as important as
high availability. An incorrect injected amount of medication
or a false heart-rate caused by malicious manipulation can
have lethal consequences for patients, who rely on the correct
function of those devices.
In order to use our framework, we had to port both appli-
cations from the Arduino to the ARM Cortex-M4 platform
and enable it
to run on the FreeRTOS operating system.
The Arduino platform is a popular platform for open-source
projects as well as affordable medical system due low-cost
and extensive software support [64]. Recall that the Cortex-
M4 is a processor that readily features a FPB unit. For the
implementation, as well as further measurements, we used the
setup shown in Figure 5 and described in Section VI.
Exploitation Steps and Requirements. To create a proof-
of-concept (POC), we implanted the following security vul-
nerability into both applications: a missing bounds check in
the command receive function which allows an attacker to
perform a buffer overwrite. Note that Cortex-M4 processors
feature a Harvard bus architecture for simultaneous data and
instruction fetches, but have a uniﬁed memory space. This
means that program code, data, and peripherals share the same
memory space [24, Section 3.1.1]. A Harvard architecture
usually prevents direct code insertion [65], but since it is
only applied at the micro-architecture level the shared memory
space still allows for traditional code injection [66] as well
as return-oriented programming (ROP) [67]. As mentioned
in Section IV, we assume a remote attacker with no direct
physical access, yet able to communicate with the device
through one of its external interfaces. In this particular sce-
nario, the attacker has the capability to use the serial interface
of both applications hosting the command interface. In normal
operations, the device can be controlled via the serial interface.
In our scenario, allows this interface an attacker to exploit a
buffer-overwrite/read error. We developed two exploits, one for
each device. With these exploits, a ROP-attack is launched,
manipulating the program execution in a way so that
the
syringe pump delivers a large amount of ﬂuid independent of
its conﬁguration. The ROP-attack on the heartbeat sensor stops
the continuous heartbeat measurement, altering the received
sensor signal to a falsiﬁed value.
Patching the Vulnerabilities. We developed patches for both
applications to add the missing bounds checks: if a message is
too large for the buffer, it is dropped, as the applications both
have ﬁxed-size commands. Patch development has been carried
out according to the description in Section VI. We created a
hotﬁx for the application, developed in the C programming
language. Afterwards, we created a binary diff between the
compiled unpatched and patched version at assembly level.
Then, we added minor modiﬁcations to reconstruct the stack
frame pointer and adjusted the jump instructions. In our proof
of concept, we use a pre-conﬁgured preemptable RTOS task
to directly load the patch into RAM. The transfer to RAM and
patch activation are triggered through a button press.
Patch Task. The implementation of the case study is based on
an interruptible patch task originating from a preconﬁgured
patch. In a real-world scenario the patch would be received
through a secure update mechanism from an external interface
(see Section II).
The patch task transfers the patch to a dedicated patch
region located in RAM. The use of RAM for patch storage is
often required since embedded devices provide only block-
writable memory and Flash (ROM) modiﬁcation is either
difﬁcult or not possible. Furthermore, the hotpatch is intended
as a temporary solution to protect the device until the next, but
likely distant, full ﬁrmware update opportunity. After copying
the patch to the correct patch region, the patching task conducts
all required preparations of the patch. Finally, using the FPB
unit, the patch is activated via an atomic switch. This procedure
is a single instruction on processor layer thereby it ensures
minimal overhead and prevents the patching process from
being interrupted.
FPB Atomic Switch. The FPB unit, which is the core of
the HERA framework, can create a true atomic switch to the
patched software version without the need to use a locking
software pattern like critical code sections. As explained in
Section V, a trampoline can be inserted on-the-ﬂy by the FPB
hardware. The trigger to activate this insertion mechanism is
a single register write [23], which can be achieved in a single
store assembly instruction. A disassembly of the case study
binaries conﬁrms that the register is accessed only once with a
store instruction. The CPU executes a single instruction either
fully or not at all. Thus, the FPB patch activation through
a register is truly atomic. The execution of an instruction
cannot be interrupted halfway to cause an inconsistent state.
Therefore, the RTOS can operate without special consideration
of the patch activation process.
The case study showed, that the unpatched device was
vulnerable to the developed ROP-attack. Without the patch,
it was possible to trigger both devices to malfunction. After
the patch activation, which inserted the missing bounds checks,
the exploit did not work anymore. During the patch activation
process, both devices continued to work normally. In what
follows, we measure the exact overhead and quantify the
interruptions to argue practical applicability of our approach.
11
B. Measuring the Overhead
As the insertion of the trampoline is performed on-the-ﬂy
based completely on hardware, the overhead caused by the
addition of further code is minimal. As the patching method
is based on a small block of assembly instructions, there is no
impact due to used compilers or intermediate software layers.
The trampoline to the dispatcher code is required as the jump
target cannot be addressed directly within a jump instruction.
The inserted patch itself is handled the same way as any
other code fragment. That is, it is likewise interruptible by
the scheduling from the running RTOS system. The RTOS
can interrupt the execution of the patch at any time, if this is
required to meet real-time deadlines. The added overhead from
the FPB unit is deterministic because it is only the instruction
fetch or literal load for the replaced instruction [23]. This
makes it possible to also patch real-time critical code sections.
As the replaced instruction is well-known, the developer can
exactly calculate the required time for a instruction fetch with
knowledge of the microarchitecture and CPU frequency. In the
following, we will further elaborate on the time required for
the FPB unit to switch.
To quantify the overhead we measured the exact switching
time using an oscilloscope5 and the processors’ clock as
reference. We inserted triggers for external pins to determine
which instruction is currently executed. The GPIO bus of
the connected pins is directly connected to the CPU [52].
Furthermore, we conﬁgured the bus frequency driving the
external pins to be the same as the CPU clock [52]. Hence, the
pin trigger causes no additional delay other then the necessary
instructions to drive the pins state. For the overhead mea-
surements, we accept the additional delay caused by driving
the pins states. However, we will eliminate this delay by a
reference measurement, i.e., the times necessary for the pins
to switch, see Figure 7. We repeated all measurements for
ﬁve times. We did not measure any deviation. This comes as
no surprise since our patch strategy completely controls the
execution and builds upon hardware features that are executed
atomically. Hence, we avoid giving any variance numbers in
the following. Real-time hotpatching needs predictability and
requires minimal overhead to meet the deadlines in place. With
the help of an oscilloscope we examine two characteristics
of the hotpatching system: (1) Atomic Switch Time: The time
required to activate a single patch, that must pass through the
execution cycle uninterrupted. (2) Control Flow Redirection:
The time required to abort the execution of a single instruction
and insert as well as execute the trampoline.
As we already discussed in theory, the Atomic Switch Time
is the execution time of a single assembly instruction. The
Control Flow Redirection just adds the cost of the transaction
abort, i.e., a single instruction fetch, see Section V-A. By
means of physical measurements, we check that the theoretical
assumptions hold in practice. With the examination of variance
of both characteristics, we can check for predictability, i.e.,
constant time overhead. Since the measurement itself adds
overhead (e.g., pin overhead) and thus measuring a single
assembly execution is not feasible, we focus on the properties.
Even with the overhead in place, the measurements should
have the expected properties, i.e., no variance. The overhead
5Siglent SDS1104X-E
Table I: Duration of the transaction abort for different ex-
amples. This represents the time needed to abort current
instruction and switch to the jump_section.
Case
While-Loop
Syringe pump
Heartbeat
Duration
1.624 µs
1.456 µs
1.476 µs
Pin Overhead Difference
1.384 µs
1.26 µs
1.288 µs
240 ns
196 ns
188 ns
added through the pins is eliminated through a reference mea-
surement. Thus, the actual overhead created by our hotpatching
method can be estimated precisely.
Atomic Switch Time. We measure the time to perform the
atomic switch to enable the patch using the implemented
use cases, see Section VII-A. In both cases we measure a
switch time of 1.524 µs, including a pin overhead of 1.288 µs.
By calculating the difference between total
time and the
pin overhead, we obtain the overhead time induced by the
hotpatching, in this case 236 ns. Since the CPU was clocked
at 42 MHz, we can calculate a total of 236 ns · 42 MHz ≈ 10
clock cycles for the 5 switch instructions, whereby only one
needs to be atomic. Thus, the atomic switch is performed in
signiﬁcantly less than 10 clock cycles. As mentioned before,
these measurements were repeated ﬁve times, but no deviation
was measured. The time required to enable the patch is small
and constant, independent of the actual patch.
Control Flow Redirection. The second experiment evaluates
the time to perform a trampoline insertion, i.e., the on-the-
ﬂy instruction exchange and trampoline jump. The results are
presented in Table I. The expected overhead according to the
data sheet is a single instruction abort [23]. As measurements
on sub-instruction level are not feasible, we included the time
to jump to the trampolines’ target address into the measure-
ment. We inserted a function called jump_section that serves
as the target of the trampoline. In case of our example codes,
the syringe pump and the heartbeat sensor, the measurement
starts before the replaced instruction and terminates within the
jump_section. The ﬁrst table entry ‘While-Loop’ represents
the time required to branch into the jump_section and directly
return. Thus, the measurement is stopped a couple instructions
later, after the trampoline was executed successfully. In case of
the medical devices, only around eight CPU cycles are required
to exchange instructions and branch into the jump_section: As
the CPU clock is 42 MHz, the number of cycles that is required
for the control ﬂow redirection can be calculated. The syringe
pump takes 196 ns·42 MHz ≈ 8.2 cycles, the heartbeat sensor
takes 188 ns·42 MHz ≈ 7.9 cycles. The While-Loop example,
which continuously performs jumps to and returns from the
jump_section, takes 240 ns·42 MHz ≈ 10 CPU cycles. Because
this case includes the return back to the trampoline insertion
point, this is to be expected as additional instructions are
executed. The minimal number of cycles to execute a single
instruction is one cycle [23]. Thus, a difference of only two
cycles is very small. The overall evaluation of the measured
times to abort the transaction indicates that the overhead for
the Control Flow Redirection is negligible.