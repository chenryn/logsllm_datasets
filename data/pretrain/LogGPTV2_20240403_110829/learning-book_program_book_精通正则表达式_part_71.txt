几乎任何字符：点号（根据模式的不同，有各种含义）
120 (u)
Unicode混合序列：\x
120 (c)
字符组缩略表示法：\w\d\B\W\D\S（只针对8位字符）
121 (c) (u)
Unicode属性和区块：\p（Prop）\P（Prop}
120
单个字节（可能有危险）：\C
锚点及其他零长度断言
129
行/字符串起始位置：\A
129
行/字符串结束位置：$\z\z
130
当前匹配的起始位置：\G
133
单词分界符：\b\B（只针对8位字符）
133
环视结构：（？=….）（？！….）（？….）（?P=name）
137
仅分组的括号：（？：）
139
固化分组：（？>….）
139
多选结构：1
475
递归：（?R）（?num）（?P>name）
140
条件判断：（?ifthenlelse）—“if”部分可以是环视，（num）或（name）
141
匹配优先量词：*+？（n）（n，）（x，y）
141
忽略优先量词：*？+？?？（n）？（n，）？（x,y}？
142
占有优先量词：*+++？+（n）+（n，）+（x，y）+
136 (c)
文字（非元字符）范围：\Q\B
(c)
可用于字符组内部
①见说明
(u)
只能与模式修饰符u连用
（本表同样适用于PHPpreg函数所使用的正则表达式库PCRE）
---
## Page 468
442
第10章：PHP
前页的表10-1简要介绍了preg引擎的正则流派。下面是补充说明：
①只有在字符组内部，\b才表示退格符。在其他场合，\b匹配单词分界符（133)。
十进制转义只能使用两到三位八位数值。特殊的位数\0序列匹配空字节（NUL
byte)。
xhexi容许出现一到两位十六进制数字，而x（hex)容许任意多个数字。请注意，大
于\x（FF）的数值只能与模式修饰符u连用（447)。如果没有模式修饰符u，大于\x（FF）
的值会导致正则表达式非法。
②即使是在UTF-8模式下（通过模式修饰符u)，单词分界符和字符组简记法，例如w
也只对ASCII字符起作用。如果需要处理所有的Unicode字符，请使用pL（121）
代替w，用pN代替d，用pZi代替s
③Unicode支持针对UnicodeVersion4.1.0。
Unicode字母表（122)的支持不需要任何'Is’或者‘In'前缀，例如'\p(Cyrillic）。
PHP同时支持单字母或双字母Unicode属性，例如'\p（Lu)、\p（L)，其中\pL作为
单字母属性名（121)。而不支持p(Letter）之类的长名称。
PHP也支持特殊的\p（L&）：（121），以及p（Any）：（表示任意字符）。
①在默认情况下，preg套件的正则表达式是以字节为单位的，所以'\Ci默认就等价于
(?s：.），由修饰的点号。不过，如果使用了修饰符u，则preg套件就会以UTF-8
字母为单位，也就是说，一个字符可能由6个字节组成。即使这样，C仍然匹配单个
字节。请参考第120页的注意事项。
③z和Z都能够匹配字符串的末尾，而2同样能够匹配最后的换行符。
S的意义取决于模式修饰符m和D（446）：如果没有设定任何修饰符，S等价于Z
（在字符串结尾的换行符，或者是字符审结尾）：如果使用了m，则它能够匹配内嵌的
换行符，如果使用了模式修饰符D，它能够匹配z)（只有在字符串的结尾）。如果同
时设置了m和D，则忽略D。
---
## Page 469
Preg函数接口
443
逆序环视中使用的子表达式只能匹配固定长度的文本，除非顶层多选分支容许不同的
固定长度（133）。
①模式修饰符x（自由格式和注释）只能识别ASCII的空白字符，不能识别Unicode中的
空白字符。
Preg 函数接口
The Preg Function Interface
PHP正则引I擎的处理方式完全是程序式的（95），包括表10-2顶端的6个函数，表格还列
举了4个有用的函数，将在本章后面提到。
表10-2：PHPPreg函数概览
函数
用途
r449 preg_match
测试正则表达式能否在字符串中找到匹配，并提取数据
453 preg_match_a11
从宇符串中提取数据
458 preg_rep1ace
在字符串的副本中替换匹配的文本
463 preg_replace_callback
对字符串中的每处匹配文本调用处理函数
465 preg_split
将字符串切分为子串数组
469 preg_grep
选出数组中能/不能由表达式匹配的元素
470 preg_quote
转义字符串中的正则表达式元字符
下面四个函数在本章中开发完成：列在此处方便查询
454 reg_match
类似preg_match，但能识别出为参与匹配的括号
472 preg_regex_to_pattern
根据正则表达式字符串生成pregpattermn宇符串
474 preg_pattern_error
检查pregpattern字符串的语法错误
475 preg_regex_error
检查正则表达式字符串的语法错误
每个函数的具体功能都取决于参数的个数、标志位（flag），以及正则表达式所使用的模式
修饰符。在深入细节之前我们先通过几个例子来看看PHP中的正则表达式的例子和处理方
式。
/*测试HTMLtag是否tag*/
if（preg_match(/^(.*?))si'，$html，$matches）)
print "page title: $matches[1]\n*;
/*将宇符事中的数值作为华氏温度、将其替换为摄氏温度*/
Smetric=preg_replace('/(-?\d+(?:\.\d+)?)/e',/*pattern */
f1oor（（$1-32）*5/9+0.5），/*替换代码*/
$string);
/*从运号分割值数据创建字持串数组*/
Svalues_array = preg_aplit(*!\s*,\s*,!',$comma_separated_values);
最后的程序，如果输入‘Larry，·Curly，·Moe'，返回三个元素的数组：‘Larry’，‘Curly
和‘Moe'。
"pattern”参数
"Pattern"Arguments
所有preg函数的第一个参数都是patterm，正则表达式包含在一对分隔符之内，可能还跟有
模式修饰符。在上面的第一个例子中，pattem参数是‘/））
对应的“闭”分隔符就是：
））>1
字符串。其中，外面的括号是模式字符串分隔符，内部的括号属于分隔符之内的正则表达
式。为了清晰起见，我会避免这种情况，使用简单易懂的‘/（\d+）/”。
---
## Page 472
446
第10章：PHP
pattern字符串内部可以出现转义的分隔符，所以“/（.*?)/i’并没有错，不过换
一组分隔符可能看得更清楚，例如！（.*？）！i”使用！！作为分隔符，而
{（.*？）}i’使用{·}。
模式修饰符
在结束分隔符之后可以跟随多种模式修饰符（用PHP的术语来说，叫做patternmodijier)，
在某些情况下，修饰符也可以出现在正则表达式内部，修饰模式的某些性质。我们已经在
一些例子中看到过表示不区分大小写的模式修饰符1。下面简要介绍模式修饰符：
修饰符表达式中的写法说明
i
(?i))
110忽略大小写
m
(?m))
112增强的行锚点模式
T111点号通配模式
X
(x）
111宽松排列和注释模式
447以UTF-8读取正则表达式和目标字符串
X
447启用PCRE“额外功能（extrastuff）”
e
459将replacement作为PHP代码（只用于preg_replace）
S
478启用PCRE的“study”优化尝试
下面三个很少用到
U
[(n）
447交换*和*？的匹配优先含义
A
447将整个匹配尝试锚定在起始位置（译注1）
447$i只能匹配EOS，而不是EOS之前的换行符
D
（如果使用了模式修饰符m则不会这样）
表达式内部的模式修饰符在正则表达式内部，模式修饰符可以单独出现，来启用或停用某
些特性（例如用（?i）来启用不区分大小写的匹配，用（？-i）来停用135）。此时，它们
的作用范围持续到对应的结束括号，如果不存在，就持续到正则表达式的末尾。
他们也可以用作模式修饰范围（135），例如（？i：）表示对此括号内的内容进行不区分
大小写的匹配，（?-sm：）表示在此范围内停用s和m模式。
正则表达式之外，结束分隔符之后的模式修饰符可以以任何顺序组织，下例中的“si”表
示同时启用不区分大小写和点号通配模式：
if(preg_match(*{(.*?)}si',Shtml，$captures))
译注1：不启动驱动过程。