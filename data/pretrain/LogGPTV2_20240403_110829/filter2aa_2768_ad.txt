Magnus Bråding
Version: 0.7
2008-08-04
19(68)
6.5.  The Network Database
In order for a group of individual and completely autonomous network nodes to be able to
accomplish anything useful together, or even to just be able to contact each other in the first
place, some kind of common data store or communication channel would seem to be required.
The problem with our restriction dictating a completely decentralized solution, however, is of
course that it disallows central points of any kind in the network, e.g. a central directory server.
This has been solved by using a distributed and decentralized database, of the DHT (Distributed
Hash Table) type. This way, the collected set of all nodes in the anonymous network actually are
the database. Several successful large scale implementations of this kind of database already
exist today, among which the Kademlia based Kad network database (of eMule fame) is one of
the largest. Not only do most DHT database designs solve the basic problem of an efficiently
distributed database in a good way, they also have built in resilience to the circumstance of
constantly disappearing and newly joining nodes, and in some cases even resilience to malicious
nodes attempting to inject corrupt data into the database.
All that is needed from a node in order to connect to, and become part of, the distributed
database, and thus the anonymous network, is to get hold of any single node that is already
connected. Without a central point, this might, at first glance, appear to be a big problem,
especially for first-time users of such a network. It really isn’t though. For any user that has
already been connected to the network, even once, thousands upon thousands of node
addresses can be cached until the next time the node wants to connect. At that point, significant
numbers of these will most likely still be available, and, as already mentioned, contact with just
one single connected node is all that is needed to become a fully qualified part of the database
and network, thus again getting access to large volumes of node IP addresses to use as entry
points for subsequent connections. Also, to create easily accessible entry points for never-before
connected nodes, any node that has been connected to the network just once can easily publish
and share its list of valid node IP addresses to the world in any number of ways, from their
website, from their blog, in forums, blog comments, news group postings, or even by email. This
guarantees that, as long as there are any remaining members in the anonymous network, an
entry point is only a few mouse clicks or a URL away. Also, the DHT based database will be
designed in such a way that separate, isolated segments, or “islands” of it should never be able
to occur, or at least not exist for any longer periods of time.
This global network database will primarily contain two things:
• 
A table containing the IP addresses/ports of all currently connected nodes in the
anonymous network (remember, it is not a secret that you are connected to the
anonymous network, only who you are communicating with on this network, and what
you are communicating!), and a set of accompanying properties for each such address.
• 
A table containing the AP addresses of all currently connected and/or registered nodes in
the network, and a set of accompanying properties for each such address. It is very
important to note that this table is completely decoupled from the table of IP addresses,
which would of course otherwise completely defeat the purpose of the anonymization
protocol to begin with. This table will among other things be used by network nodes to be
able to find the entry nodes to be used when contacting other AP addresses.
The real security and stability of the protocol is of course intricately connected to the exact details
of what data this database contains and how the database works and is implemented. This will be
discussed in more detail in the following chapter, about low-level design.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
20(68)
7.  Low-Level Design
Armed with the knowledge gained from the previous chapters, we now plunge yet another level
deeper into the details of the protocol, taking a look at some of the very nitty-gritty details that
make it tick.
7.1.  Routing Paths
As mentioned above, the routing path is one of the key elements providing the anonymity in the
protocol. As can be suspected, the exact procedure for setting up such routing paths in a secure
way is of utmost importance to keeping the system theoretically secure. In this section, the path
setup procedure will be described in more detail. We will begin with a shorter step-by-step
description, and will then move on to describing and explaining each of the steps, and their
underlying purposes and reasons, more thoroughly.
7.1.1.   
Secure Establishment of Routing Paths – Low-Level Overview
Without further ado, here follows the procedure for securely setting up a routing path:
1.  The anonymized node (to be) selects a random set (with some exceptions to be discussed
later) of x nodes from the IP address/port table of the network database, and fetches all their
stored info, like e.g. their path building certificate (containing the public part of an
asymmetrical encryption key-pair) and their communication certificate (containing a valid
SSL certificate). These selected nodes will be called X-nodes from this point on, and are the
ones that will constitute the final routing path.
Figure 6. Routing path creation, step 1
2.  The anonymized node selects a similarly random set of y nodes from the IP address/port
table of the network database, and fetches all their stored info, like e.g. their path building
certificate, containing the public part of an asymmetrical encryption key-pair and their
communication certificate (containing a valid SSL certificate). These selected nodes will be
called Y-nodes from this point on.
Figure 7. Routing path creation, step 2
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
21(68)
3.  The anonymized node chooses, arbitrarily, an ordered sequence made up of all the X-nodes
and Y-nodes, being constructed in a way that:
• 
No two X-nodes are adjacent to each other.
• 
A Y-node is located in one end of the sequence.
• 
A number of Y-nodes equal to the total number of X-nodes minus one (although always
at least one), are located adjacent to each other in the other end of the sequence.
• 
One end of the sequence is chosen at random to be the beginning of the sequence.
Figure 8. Routing path creation, step 3
4.  The anonymized node generates a temporary asymmetrical cryptographic key-pair, to be
used only during the setup procedure of this specific routing path. The private key of this
key-pair will be called the routing path construction key, and the public key of this key-pair
will be called the routing path construction certificate, from now on.
5.  The anonymized node prepares a special unique “setup package” for each individual X-node
and Y-node, being asymmetrically encrypted with the public key of the individual recipient,
symmetrically encrypted with the 128-bit ID of its incoming connection, and signed with the
routing path construction key from the previous step. The package contains the following
(just as with all other steps, this will be explained in more detail in the next section):
5.1.  
IP address of the expected previous node in the sequence.
5.2.  
IP address and port number of the next node in the sequence.
5.3.  
The routing path construction certificate, generated by the anonymized node in the
previous step.
5.4.  
A random 128-bit ID, associated with the connection from the previous node.
5.5.  
A random 128-bit ID, associated with the connection to the next node.
5.6.  
The communication certificate of the next and previous node.
5.7.  
A constant number of tuples containing a 128-bit seed, a size, an index and flags for
creation of dummy setup packages (more info about this in the details later).
5.8.  
A constant number of 128-bit seeds for stream encryption key generation + the
number of keys to be generated.
5.9.  
A collection of flags, telling if the node is an intermediate X-node, a terminating X-
node or a Y-node, among other things.
5.10.  A secure cryptographic hash of the entire (encrypted) setup package array (see the
next step), in the expected state upon reception from the previous node.
5.11.  A secure cryptographic hash of the (decrypted) contents of the current setup
package.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
22(68)
6.  The anonymized node arranges all the encrypted setup packages from the previous step in
an array, in a completely randomized order, and sends off the array to the node at the
beginning of the sequence, along with the pre-generated ID for this connection (see the
contents of the setup package above).
7.  The following sub-procedure is then performed by the receiving Y-node, and will also be
repeated by each and every node in the ordered sequence, until the array again reaches the
anonymized node:
7.1.  
The node iterates through each encrypted package in the array, attempting to first
symmetrically decrypt it using the connection ID stated by the previous node for the
incoming connection, and then asymmetrically decrypt it with its own private key. It
will be able to know when it has found the right one by getting a correct hash (item
5.11 in the setup package specification above).
7.2.  
The node stores the contents of its own successfully decrypted package locally.
7.3.  
The node authenticates the previous node (i.e. the one it received the package array
from), by matching both the expected IP address (item 5.1 in the setup package
specification above) against its actual IP address, and the expected ID for the
incoming connection (item 5.4 in the setup package specification above) against the
ID that was actually stated by the previous node along with the setup package array.
Both things should always match under normal circumstances (possible exception
conditions will be discussed later).
7.4.  
The node matches the hash of the entire setup package array (item 5.10 in the setup
package specification above) against a locally calculated hash of the array, and they
should always be equal under normal circumstances (possible exception conditions
will be discussed later).
7.5.  
The node interprets the flags (item 5.9 in the setup package specification above),
thus seeing which role in the path building process it has been allotted.
7.6.  
The node makes a decision whether it is possible for it to take part in the path
building process (under normal circumstances the answer should be yes, which will
be assumed in this process summary, possible exception conditions will be
discussed later).
7.7.  
The node removes its own setup package from the array.
7.8.  
The node generates faked setup packages and inserts them into the array, according
to given instructions (item 5.7 in the setup package specification above).
7.9.  
The node connects to the given next node, first of all validating its identity by
matching its expected communication certificate (item 5.6 in the setup package
specification above) against the SSL certificate used by the responding node,
immediately terminating the connection if the two don’t match. They should always
be equal under normal circumstances (possible exception conditions will be
discussed later).
7.10.  The array, in its new state, is forwarded to the next node in the sequence (item 5.2 in
the setup package specification above), along with the given ID for this connection
(item 5.5 in the setup package specification above).
7.11.  The next node that receives the array will repeat this procedure itself, and so on, until
the array has reached the last (Y-)node in the sequence, which will have its next
node set to be the original anonymized node (without for that matter knowing
anything about this special circumstance itself), thus closing the circle.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
23(68)
Figure 9. Routing path creation, step 7
8.  If all goes well, the setup package array will traverse the entire sequence of nodes, and
reach the anonymized node with a connection from the Y-node at the opposite end of the
sequence, i.e. the end of the sequence that the setup package array was not sent into to
begin with. Provided that the incoming data passes all authenticity controls (which will be
discussed in more detail later), this completes the first round of the routing path setup
procedure, and the anonymized node now knows that all the selected nodes accepted the
routing path participation request and are standing by for the second round of the procedure,
which begins with the next step.
Figure 10. Routing path creation, first round completed
9.  The anonymized node creates a new array of setup packages, quite similar to the first one,
but with the following additions (in addition to a new random array order):
9.1.  
A first round success flag is now included in the package.
9.2.  
An updated set of seeds and instructions for manipulating the package array before
forwarding it (equivalent to item 5.7 in the setup package specification above).
•
For (all) X-nodes only:
9.3.  
An updated IP address of the expected new previous node in the sequence
(equivalent to item 5.1 in the setup package specification above).
9.4.  
An updated IP address/port for the next node in the sequence (equivalent to item 5.2
in the setup package specification above).
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
24(68)
9.5.  
A random 128-bit ID, associated with the connection from the new previous node
(equivalent to item 5.4 in the setup package specification above).
9.6.  
A random 128-bit ID, associated with the connection to the new next node
(equivalent to item 5.5 in the setup package specification above).
•
For the terminating X-node only, if the path is an entry path:
9.7.  
The AP address that the entry path belongs to.
9.8.  
A ready-made routing table entry, signed with the private key belonging to the routing
certificate of the AP address owner (more info about this in the details later).
10.  The anonymized node sends away the new array of setup packages in the same manner as
the first one (and in the same direction too).
11.  The following sub-procedure is then performed by each and every node in the ordered
sequence, until the array again reaches the anonymized node:
11.1.  The node locates, decrypts and verifies its own package in the received array, and
checks the integrity of the entire array, using the same methods as in the first round.
11.2.  The node now also validates the signature of the package, using the routing path
construction certificate received in the package from the first round (item 5.3 in the
setup package specification above).
11.3.  The node confirms that the success flag is set in the package (item 9.1 in the setup
package specification above).
11.4.  The node modifies the package array in the same way it did in step 7.7 + 7.8 above,
only now using the updated seeds and instructions (item 9.2 in the setup package
specification above).
•
For Y-nodes only:
11.5.  The Y-node forwards the array, in its new state, to the next node in the sequence.
11.6.  The Y-node disconnects its forward connection, and has thus fully completed its
participation in the routing path building operation, and discards all information
related to it, forgets all about it, and is back in the exact state it was before it was
contacted to participate in the routing path building operation to begin with.
•
For (all) X-nodes only:
11.7.  The X-node checks to see if the updated expected IP address of the previous node
(item 9.3 in the setup package specification above) is the same as the IP address of
the existing previous node. Under normal circumstances it should never be the same,
and in this case the X-node will halt and wait for an incoming connection from the
expected IP address (item 9.3 in the setup package specification above) also having
the right ID (item 9.5 in the setup package specification above).
11.8.  When a matching incoming connection is established to the X-node (i.e. from the X-