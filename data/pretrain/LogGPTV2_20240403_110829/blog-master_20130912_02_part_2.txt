probe sendrecv { ... }  
/* Use the alias with an additional suffix: */  
probe sendrecv.return { ... }  
Here, the second use of the probe alias is equivalent to writing probe tcp.sendmsg.return, tcp.recvmsg.return.  
As another example, the probe points tcp.sendmsg.return and tcp.recvmsg.return are actually defined as aliases in the tapset tcp.stp. They expand to a probe point of the form kernel.function("...").return, so they can also be suffixed:  
probe tcp.sendmsg.return.maxactive(10) {  
    printf("returning from sending %d bytes\n", size)  
}  
Here, the probe point expands to kernel.function("tcp_sendmsg").return.maxactive(10).  
```  
下面是suffix的通配符介绍 :   
When expanding wildcards, SystemTap generally avoids considering alias suffixes in the expansion. The exception is when a wildcard element is encountered that does not have any ordinary expansions. Consider the following example:  
```  
probe some_unrelated_probe = ... { ... }  
probe myprobe = syscall.read { ... }  
probe myprobe.test = some_unrelated_probe { ... }  
probe myprobe.* { ... }  
probe myprobe.ret* { ... }  
Here, return would be a valid suffix for myprobe. The wildcard myprobe.* matches the ordinary alias myprobe.test, and hence the suffix expansion myprobe.return is not included. Conversely, myprobe.ret* does not match any ordinary aliases, so the suffix myprobe.return is included as an expansion.  
```  
这里要说一下, 当仅仅使用*时, 如果alias没有定义suffix, 会报错.  
只有当用到了前缀+*时, 并且alias中没有匹配的suffix, 才会去上一级probe point中匹配对应的suffix.  
例如 :   
```  
[root@db-172-16-3-39 ~]# stap -l 'syscall.read.**'  
syscall.read.return  
```  
当alias没有定义suffix, 即使上一级的probe point有return这个suffix, 使用*通配符会报错. 如下 :   
```  
[root@db-172-16-3-39 ~]# cat test.stp  
probe myprobe = syscall.read {   
  var = "myprobe"  
}  
probe myprobe.* {  
  printf("%s\n", var)  
  exit()  
}  
[root@db-172-16-3-39 ~]# stap test.stp   
semantic error: while resolving probe point: identifier 'myprobe' at test.stp:5:7  
        source: probe myprobe.* {  
                      ^  
semantic error: probe point mismatch at position 1  didn't find any wildcard matches: identifier '*' at :5:15  
        source: probe myprobe.* {  
                              ^  
Pass 2: analysis failed.  Try again with another '--vp 01' option.  
```  
只有定义了alias的suffix, 直接使用*通配符才不会报错.  
```  
[root@db-172-16-3-39 ~]# cat test.stp  
probe myprobe.test = syscall.read {   
  var = "myprobe"  
}  
probe myprobe.* {  
  printf("%s\n", var)  
  exit()  
}  
[root@db-172-16-3-39 ~]# stap test.stp   
myprobe  
```  
最后手册中提到的probe myprobe.ret*在我环境中未测试成功, 可能和systemtap版本有关系.  
```  
[root@db-172-16-3-39 ~]# cat test.stp  
probe myprobe = syscall.read {   
  var = "myprobe"  
}  
probe myprobe.test = syscall.read.return {   
  var = "myprobe"  
}  
probe myprobe.* {  
  printf("%s\n", var)  
  exit()  
}  
[root@db-172-16-3-39 ~]# stap test.stp   
myprobe  
```  
失败 :   
```  
[root@db-172-16-3-39 ~]# cat test.stp  
probe myprobe = syscall.read {   
  var = "myprobe"  
}  
probe myprobe.test = syscall.read.return {   
  var = "myprobe"  
}  
probe myprobe.ret* {  
  printf("%s\n", var)  
  exit()  
}  
[root@db-172-16-3-39 ~]# stap test.stp   
semantic error: while resolving probe point: identifier 'myprobe' at test.stp:9:7  
        source: probe myprobe.ret* {  
                      ^  
semantic error: probe point mismatch at position 1  (alternatives:  test) didn't find any wildcard matches: identifier 'ret*' at :9:15  
        source: probe myprobe.ret* {  
                              ^  
Pass 2: analysis failed.  Try again with another '--vp 01' option.  
```  
stap版本  
```  
[root@db-172-16-3-39 ~]# stap -V  
Systemtap translator/driver (version 1.8/0.152 non-git sources)  
Copyright (C) 2005-2012 Red Hat, Inc. and others  
This is free software; see the source for copying conditions.  
enabled features: AVAHI LIBRPM LIBSQLITE3 NSS BOOST_SHARED_PTR TR1_UNORDERED_MAP NLS  
```  
## 参考  
1\. https://sourceware.org/systemtap/langref/Components_SystemTap_script.html  
2\. /usr/share/systemtap/tapset/syscalls2.stp  
```  
# read _______________________________________________________  
# ssize_t sys_read(unsigned int fd, char __user * buf, size_t count)  
probe syscall.read = kernel.function("sys_read").call  
{  
        name = "read"  
        fd = $fd  
        buf_uaddr = $buf  
        count = $count  
        argstr = sprintf("%d, %p, %d", $fd, $buf, $count)  
}  
probe syscall.read.return = kernel.function("sys_read").return  
{  
        name = "read"  
        retstr = return_str(1, $return)  
}  
```  
3\. https://sourceware.org/systemtap/man/function::exit.3stap.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")