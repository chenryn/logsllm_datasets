Time: 2.265 ms    
```    
拆表后的性能测试 :     
1\. INSERT    
```    
digoal=> insert into v_t select generate_series(1,10000),repeat(md5(clock_timestamp()::text), 10), repeat(md5(clock_timestamp()::text), 10), repeat(md5(clock_timestamp()::text), 3000), clock_timestamp();    
INSERT 0 10000    
Time: 95542.662 ms    
```    
2\. UPDATE    
```    
digoal=> update v_t set col1=repeat(md5(clock_timestamp()::text), 10);    
UPDATE 10000    
Time: 6956.229 ms    
```    
3\. SELECT    
```    
digoal=> select count(*) from v_t;    
 count     
-------    
 10000    
(1 row)    
Time: 30.902 ms    
```    
4\. DELETE    
```    
digoal=> delete from v_t;    
DELETE 10000    
Time: 1250.829 ms    
```    
#### pgbench测试    
10W测试数据, 如下 :     
```    
digoal=> insert into test select generate_series(1,100000),repeat(md5(clock_timestamp()::text), 10), repeat(md5(clock_timestamp()::text), 10), repeat(md5(clock_timestamp()::text), 3000), clock_timestamp();    
digoal=> insert into v_t select generate_series(1,100000),repeat(md5(clock_timestamp()::text), 10), repeat(md5(clock_timestamp()::text), 10), repeat(md5(clock_timestamp()::text), 3000), clock_timestamp();    
```    
##### 场景1    
2个非大字段更新    
拆表前测试    
```    
ocz@db-172-16-3-150-> vi t.sql    
\setrandom id 1 100000    
update test set col1=repeat(md5(clock_timestamp()::text), 10), col2=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
```    
测试结果 :     
```    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 45262    
tps = 754.215032 (including connections establishing)    
tps = 754.324088 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.003502        \setrandom id 1 100000    
        10.598039       update test set col1=repeat(md5(clock_timestamp()::text), 10), col2=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
```    
拆表后视图更新测试    
```    
ocz@db-172-16-3-150-> vi t.sql    
\setrandom id 1 100000    
update v_t set col1=repeat(md5(clock_timestamp()::text), 10), col2=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
```    
测试结果 :     
```    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 394536    
tps = 6575.466080 (including connections establishing)    
tps = 6576.538308 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.003344        \setrandom id 1 100000    
        1.209849        update v_t set col1=repeat(md5(clock_timestamp()::text), 10), col2=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
```    
拆表后事务中单表更新测试    
```    
ocz@db-172-16-3-150-> vi t.sql    
\setrandom id 1 100000    
begin    
update t1 set col1=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
update t2 set col2=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
end;    
```    
测试结果 :     
```    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 734025    
tps = 12227.678754 (including connections establishing)    
tps = 12229.395011 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.002815        \setrandom id 1 100000    
        0.071055        begin    
        0.229502        update t1 set col1=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
        0.242445        update t2 set col2=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
        0.101776        end;    
```    
从场景1测试来看拆分后通过视图更新减少列col3和col4的更新, 给性能带来了极大的提升.    
##### 场景2    
1个大字段,1个小字段综合更新    
拆表前测试    
```    
ocz@db-172-16-3-150-> vi t.sql    
\setrandom id 1 100000    
update test set col1=repeat(md5(clock_timestamp()::text), 10), col3=repeat(md5(clock_timestamp()::text), 3000) where id=:id;    
```    
测试结果 :     
```    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 35627    
tps = 593.663136 (including connections establishing)    
tps = 593.742321 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.003783        \setrandom id 1 100000    
        13.465606       update test set col1=repeat(md5(clock_timestamp()::text), 10), col3=repeat(md5(clock_timestamp()::text), 3000) where id=:id;    
```    
拆表后视图更新测试    
```    
ocz@db-172-16-3-150-> vi t.sql    
\setrandom id 1 100000    
update v_t set col1=repeat(md5(clock_timestamp()::text), 10), col3=repeat(md5(clock_timestamp()::text), 3000) where id=:id;    
```    
测试结果 :     
```    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 34437    
tps = 573.834822 (including connections establishing)    
tps = 573.932045 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.004346        \setrandom id 1 100000    
        13.929713       update v_t set col1=repeat(md5(clock_timestamp()::text), 10), col3=repeat(md5(clock_timestamp()::text), 3000) where id=:id;    
```    
注意大列字段的更新性能没有得到提升. 但是由于大列更新不频繁, 所以总体来说是可以接受的.    
拆表后事务中单表更新测试    
```    
ocz@db-172-16-3-150-> vi t.sql    
\setrandom id 1 100000    
begin    
update t1 set col1=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
update t3 set col3=repeat(md5(clock_timestamp()::text), 3000) where id=:id;    
end;    
```    
测试结果 :     
```    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 35155    
tps = 585.795505 (including connections establishing)    
tps = 585.875121 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.003436        \setrandom id 1 100000    
        0.089372        begin    
        0.253391        update t1 set col1=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
        13.160805       update t3 set col3=repeat(md5(clock_timestamp()::text), 3000) where id=:id;    
        0.139259        end;    
```    
场景2测试中发现, 视图中虽然缺少了col1和col2的更新, 但是性能却和拆表前差不多, 比较差.     
因此大字段的更新才是性能瓶颈的关键.     
##### 场景3    
将大列col3上的索引删除后, 测试结果如下 :     
```    
ocz@db-172-16-3-150-> psql     
postgres=# \c digoal digoal    
digoal=> drop index idx_col3;    
DROP INDEX    
digoal=> drop index idx_test_col3;    
DROP INDEX    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 269946    
tps = 4498.935114 (including connections establishing)    
tps = 4499.613875 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.003341        \setrandom id 1 100000    
        1.771405        update test set col1=repeat(md5(clock_timestamp()::text), 10), col3=repeat(md5(clock_timestamp()::text), 3000) where id=:id;    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 196676    
tps = 3277.755460 (including connections establishing)    
tps = 3278.233032 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.003820        \setrandom id 1 100000    
        2.432612        update v_t set col1=repeat(md5(clock_timestamp()::text), 10), col3=repeat(md5(clock_timestamp()::text), 3000) where id=:id;    
ocz@db-172-16-3-150-> pgbench -M prepared -f ./t.sql -n -r -c 8 -j 4 -T 60 -h 127.0.0.1 -U digoal digoal    
transaction type: Custom query    
scaling factor: 1    
query mode: prepared    
number of clients: 8    
number of threads: 4    
duration: 60 s    
number of transactions actually processed: 237624    
tps = 3959.030176 (including connections establishing)    
tps = 3959.582280 (excluding connections establishing)    
statement latencies in milliseconds:    
        0.003228        \setrandom id 1 100000    
        0.058514        begin    
        0.205088        update t1 set col1=repeat(md5(clock_timestamp()::text), 10) where id=:id;    
        1.660293        update t3 set col3=repeat(md5(clock_timestamp()::text), 3000) where id=:id;    
        0.086006        end;    
```    
场景3和场景2的测试结果进行对比后可以看出大字段上的索引带来了极大的性能损耗.    