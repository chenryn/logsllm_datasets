previously, VBA can be programmed to call any file as an executable.  If you called the file 
"Sideload.txt" you could still run it from VBA.  The next step has to be monitoring or control of 
the printing and scanning resources.  If the data or system you are trying to protect is of high-
enough value, then every print job and every scan job should be examined by a reviewer.  This 
will obviously be manpower intensive, as well as something that slows business productivity, so 
it probably isn't a reasonable control for most circumstances.  Lastly, somehow preventing VBA 
from being turned on in Excel would stop this vector completely.  I have not spent any time 
figuring out how to do this, but it may be possible. 
Areas for Improvement 
Improve Big Bar Code decoding: Though I was seeing less than 1% of error in my bit reads 
during decoding, the pattern of those errors requires me to use quite a bit of space for R-S FEC 
parity bytes to ensure the message goes through.  In my POC about 35% of each Big Bar Code 
was dedicated to parity meaning I only got about 55 kB of actual data per page (out of a 
possible 85 kB).  R-S works in 255-byte chunks and I have to provide enough parity to handle 
the likely worst case error rate per chunk.  If I can drop the number of bit errors per chunk down, 
I can dedicate more space to data per bar code.  I already did some work in this direction by 
adding additional timing lines but I ended up with extra errors I didn't expect.  I'm sure, with 
more experimentation, I could improve the results. 
Use 2^16 R-S FEC: I already mentioned that I had problems finding a working C++ R-S FEC 
library.  Part of that was because I was being picky.  I really wanted a library that worked at the 
2^16 level whereas those I did find only worked at 2^8.  As I stated above, R-S FEC works in 
255 byte chunks, unless you use an underlying field math capable of 2^16.  Then you will be 
able to work in chunks of 65535 words of 2 bytes each, for a total of 131 kB-sized chunks.  This 
would be ideal for my application.  Currently I'm running at ~35% parity bytes because I have to 
handle the worst possible error rate in a 255-byte chunk but I've already stated I can decode a 
bar code with < 1% bit error across the whole page.  Since the page only holds 85 kB of data, I 
would only need 2-3% parity if I was working in 2^16 correction space.  This would be a 
tremendous improvement.   
There's a catch of course.  I actually built a 2^16 R-S FEC algorithm and discovered two 
problems.  First, it is very slow.  R-S FEC complexity grows quickly with the size of the code 
word, so the increase in code word size slowed my tests down tremendously, especially when I 
started using kilobytes of parity.  That wouldn't be a huge problem, except for the fact that the 
2^16 algorithm simply wasn't working.  It would happily error correct in certain locations and not 
in others.  To help debug this problem I needed to run tests.  Every test was taking far too long 
to run.  In the interests of getting a working POC running, I went back to 2^8.  I think I can solve 
this problem eventually and greatly improve the data per page ratio. 
Use colored pixels: The Big Bar Code only uses 2 colors, so each bit needs its own pixel.  If I 
used 4 colors I could show 2 bits per pixel and double the data per page ratio.  If I could use 16 
and get 4 bits per pixel, I could manage ~340 kB of data per page.  My experiments in this 
direction showed that it might be possible, but it also introduces further decoding errors in to the 
process.  Printers, even high-quality office laser printers, simply don't cleanly print and clearly 
scan a stream of essentially random colors at the pixel level.  My 4-color attempt did show some 
promise, but the 16-color trial looked fairly hopeless.  I also stopped pursuing this path in the 
interest of completing a successful POC.    
Conclusion 
Users that can write code on their machines represent a possible threat to security, it is as 
simple as that.  What isn't so simple is that every user with access to a standard desktop 
productivity suite can write code.  A security architect needs to examine the system they are 
trying to secure by taking a step away from firewalls and cable separation and fully explore all of 
the resources available to an insider. 
The Hex Magic, R-S FEC library, and Sideload DLL code will be available on github at: 
github.com/richmr 
Attachments: 
1: Hex encoded file example 
2: Full page Big Bar Code example 
Attachment 1: File.zip 
9##1,504#0304140000000800?67342483463#?3EEA0C0000?41F000009000000526F61726#2E747874A5594#AE?C36169?07C81E#880CA5#4026 
8#?3,8?#411201E243?31?0E8214#6249F4934885A4AAACECA23?79?#E?73EE2555AA#2F3696462#F92F8#99F73CFF?E8C318?76C439F4?#C98C? 
5093,?9948?1?E2C994?1998#4F#998?906?3F#?CC5A#4#AE3763#C9912F1F45516#817F39333379#C?92E2?99EA7C?9C?714#0?016392417AEC4 
E29C,1FA3E?4?#1E#301633FA6CCE29E235AEC36193C7?317F3CF55#624672FC52533##209#780#57#?3A#7F0F?8CE#?27CE2A32EC6573EF2C95C 
C68A,62EC4FF#61F56167AF2E8#843C687297A207583378F?7#933721169C153AE7AF943CF44?E009C#F0A4#7E935#84C235?442#18AA8C2FE69? 
F7E1,0#654??E65335988FC6C361FAE5880F?7C7C1#9?9##E#456892998186449#2??E#9F98EA#CFAA97F314F#63A89#1#A#84E?898A0F464160# 
C4#E,216C807E31F9?F62F83#56888#0#558#14A?6245548A09C27CF#C?873145481#5526?3E?561109C?8?FF50C0?#18A1035CA626CAC52??9F4 
##15,F1164C70#77A345C8#A#6E#E8C9467F46180CEC?9F5C7AF5?9539?0FF2648876C219FE72213A4F6?E?66EC34A91?69414FE3CC730C?FE3F7 
A4AC,0E4CC089AE10614E##7694457FE94?660?E79852#CF1781A4516#A#CC4909??E959C?AEC0?67430A91C?0CF00?ECC97F63CA6F?C45755EE1 
594?,483?1E10F2#9?41F#9F3#0?AF?#742871#332C066F4C3160C#607?C82A3F0?AA7E80198A9F??1E40E??55?F0A6CA0?671A3#3AA#326E881A 
9CF#,A2ECA46AE455A??8#4?C0022?FEFC76EF07780#77F894?A#86E47921C8CF30#AE95?AEE19A5?#A#A07FC9E705?7A4474721F5??72244?088 
?9C1,FFE3831830A2#CC0C925C5A?AEC?134E#8AC135C#6161F?C??1493?798C73525A?801185E4A53120?CE658F05E5F134?#244F?3A?64740F5 
A8F2,2#15#0??E81?54F085F8?9?F?AE?C5FC60F2362F630C1##69A3320C?238C0#0344E1A365F453CC71193779617?5A264#2913?7338601EC37 
C8C7,51AE894724EF72807720E42F91868F?949E4C06?091084E9F12F42328172887837514CFC75991045#8C187?19E7?#3AAC6508?64715C43A8 
0E14,FC002C4E12F9#E64#3C269F96#2F79?0192470E1AAEA##?E25218A0#0080??8F?#20#1EF4633808#E8F599061?9#4#948#?C?4?F1F197#46 
#F7C,8291A81581#398A2E19?8F016A808F7E53309F64333001A#?385FC05064C76801476762A57735#5E7CA28C?F7EF36F061714F0AA15E0?#AF 
C602,5??9390?F616E2C54F?153EE354F9#2A97E3A9E4418#0#533300FE82A940372E8#E#?712E778F693?3F7F7?F0FA#2A4034?8?40AC2A94?C6 
2878,8E?9E72678718?6F54C3EA8?0670AE77305??5E#4011241F5856C598E395#0806#3AC7#?65F71?CF#5??3A95A?FA90099C0#7C?E0F056467 
E18F,263C6FA713419319247418720?4200AFF4C4E03E29C?F352FAE7F986CE06C2E#CCE0#F92#5?24EA62793474#1AC0#3C6632FE63?17830#07 
?035,C986193A4C08381F7A7FF5F?6A1526#88C8612E97?E560979#9A5002C183C#A#C72#99#?989F21C084200#?5#024?C20E6#?##45?E?3720F 
5?57,F6FE?48?360C4242C?2E8C5E2902A0A228?7CE?23#E?623#5F98FE?5312FE63FAE28?#E?EF78C59A2A6F391#04A3794?577FC5F924628?6? 
0EC?,928758AFE88?88#E5A9FFC889A6??#09203887043#5A2?241AF469?51F24?7334#633#7CE39492CE36F#0E6A43A3207EF#?E88ECA14AC1A0 
E479,50F16265E05#2441E6#7#31A067E71A81?7AA61?A155AC6911397#C10##104#E#409771500431309377341?EE3F0484#?875079A3E?F0F50 
6163,A83CA?5695#07C4?4E53E9?3AE87052?F4A48283EE2848#C4?9#143AF#999F#3?64A404#0#9F187E5?91A428#29EF478C91FEF507A3#0A2? 
??1?,896C4F99349FF0A67A31C4233?F?24#1E96748A979841#3C1?8F#?7376?3E5495F3?3#838042FF1?#0?#1F8E6EE6FE97128##29419E#15AE 
4080,A550155621C28?4FE164A4EC6AEEEFAA2?F02E47891F717F0?7F81C68A75492A56C917380?F72EE#A4?5?EF#72E08A6E4?672108?#257FF1 
80??,9?92445EE1F#5E40?14#FEC651?02FF#9EA95273922?3922592639#077#3743E25169AEC202C717?594327##C86#F8??2A870F917CAF4A9E 
2795,8413929#E47C#5#9545F20AE6A??3#70#E34?5C1FE4E0C266553470C4A626409#?1FC9504#5CA7C17#71EA33A40?42F72E8394#3F2AA77?? 
A#41,0441#2?20A43?#7?6285F970949669C?E73C10AA7523?3?284CCECF35CC5E77E9621#6148782AF366E9A?E0F498825600?7939CE3F84F76E 
79?0,47#1EA2C99A5#?AC2998E58E?8265?5#70EFCA8?7E69AC951F?A83792?24FF0EC1#F2EA52186109C9798#33F4F4E9#003877A9993A381A07 
#453,#4#EE048C#44176#A?070#4C2060A9?99#?A1A314F067#A#819C274#68#C#FA0F0?#E06588228F9290787202E32#1215##E779C55?734CEE 
E893,FEE24008944F781E?7784A#183452A987FA082F9591AE32#0#0892#E368A7#5F33A2FFA55A579FCA2A274#01#7?7#3#5478A923334E?90#? 
#??9,6#7449A62AF7F4C96CA151C706#3558FEF5A95A705CC?95?A84E0F70258F?3F1E62?4AA263F7E71122006C73176E?E17E27E11E0E624629A 
0A25,2A90#59FA58?F82248E80A6C07C25875#031C85A?#AA982?A5?572F2E8C0?9F6FA403735584815#724E##393424C4#26E473187#9397794C 
6#48,E#C071C6F?7535E54C90FF913F7C51FC575F5031#4854E83#AC55CE#?A0EC479941#?ACAA6AC05CA5F#?28?FFCACF7C8?96#4A12917F72?9 
2?40,1019F8872E73?FF87F??5?A4758#832#7#F1F40797CAF25CF372C?8163F4??0E5E26#0EF76#227?7F77126?1#741C061F?038?73E55306EA 
1C24,62EF9E5355AC45?9E1?503EA6AF55AC5561EF739AF4E58862482?669A9439C43#9C4C3?8C9A91C9615?9EF89C06A0#6?6169A3A09A8A75?1 
9A57,53?6?4C844E6419?2346A4C9#520F#F2822F72CC?7AF#17A#40FAC3EC996C752?3FC200?C94E0A?28F70A3?4C990E0F3?1EEC5#8214A511A 
0477,63FF97F61E3C26669474978?0301020FEF8364592??#1F72411#30094CCC012017267F#29A960152EF11C07#A15EA42592#A03?5E605E175 
73F4,#AE710504#1016AA4F6C7F#5A1#0AF44?F17EA5EC8029F48??007F0#0434#6F7E1C91901#ECF43C67#9720794256F451E05??7F836872115 
17??,F2#9346752CA003C93063373#3A93?C90719?A38F78A5A25#547779C4A61#E67#F56543?E4?2#32#3786#3F#157A66F601#55#7053AEA9## 
29#6,A?174030A769979165EA08E05E3?AA2469EF??27942E5C0A411E2A?937#8?63#195A401CFE41E37131FF769F9629725AF126?32936F6684E 
8#F7,395788E966938E81?055274F5AE7546F056A9818491803914CA51?AE1?36C5FF23E6F177C?36F?3109?144A?#1866#9876F9080503CA7?32 
332A,7#E#21#09?F99429A6#570C1CEEE7#5?7EEF3C1F68334E93E#0E75F27F75FE2831F15903EE#EE6C?72F42#8323546C39F30F9062716F1C0E 
3#44,C97993859169898F6#2E44F9EE14276546?91212F826#F0CC4450CF#3C#2?4#C#626419A41#8EE233#0A7649A9#66370?1266328CAE80#E? 
73#5,E42#3?708E22?1?4AAC102EA?#2#61727884C63?67521CC6C1C89?148232F22?E?3??A74#43?AE22#60?AC?A2500C30576303976?E154E53 
2468,597F3288EE139001A4354519F4#5112CEA5C7A3203#A3?9#E?73EC3723E?1421?8?7304?#E5614F32A15AF88A261A66369795C47214F7A2E 
25C7,6#225E85E4691E?#1125AE0E2549#C339CC1?AE6?088EC?5#01AF??#6F?E79?671#FA9#FFC3E82005764?6930AF15?79181#5??6?5760?CA 
8F94,F60AE2F9CC?94F9C9C16F0?AA1A08459E1E4EE64?23A??##E6C9?E726##3097#88FF3#1274FA4103?1528AE416F6FE64306566A7#3?E?#49 
1000,?A8515C61980?01?#4680CEACC7C9?7E27?9?053F549#A7F1E#14146??4046501261609?537CE5F425C6AC1E66?9#C06C9791605F3A#38A1 
A1?9,AE94?263?679873593E3E70E08402216E1?6?AC?7530?48614272141866338EC#3917A5E431#5C80#25?34A9C141#EE5278?851329E?67EA 
#728,9E25FA2C18?3?863E6?C?FE59#2466#C14E8E3#81F5766AE?690#830AC?3857A?1A65?5C414EEC10657#5F9###2C7377FA5F3E#188#381?2 
?9A8,2C?C25EEE198077CA7FE3#54471CF0E130082F?15FA2?1EE9?58177F?8C?ECA?022?36A4?A63?89A8CF7199?64472F10916F192C1F?04?25 
0#24,546#12420C16#6?8522A4#C?C0246EAF51F2101?899?5#5C#58A?554274?7E2?0F8950?#6842#F0E7?6617A1737E61E9660051096E8843F0 
8365,#F39197E00FA43E?786#10C?9AE0A57F0AA4E7289F69482?CA0504771F9546990038#AC5510#27#6C0#8A?F9A?86A274FAF3?65C74326A?4 
474?,?639897008C5FA?1548#9#F7?AE?#03?117AF#683?A078391C?35A70?CC#EC259388E3A6C20F73EC92??4C56AE#38781038C#2F6?A6CC#18 
F055,F870A4848573?AF3#6760#EF6##332C50?A406056672E#65C?088F?6##C75A04791?8EE870?0321439E897?9021#9CE7#324??0#F6F72F41 
#?34,A33E91633567?F644A?C6#47209F961A47E9?4#97E436#?589#C7907784??85C60957E43FAF1FA#5A25?87A#3858E367E835A94001E984?F 
6A31,664F86650607?297045A4EF5E#853?AF3A50781087#67E6#381859?397323969256F?2537C45#F5CF32160F#1AE22?#4F?5F1A62AAF36#64 
C?66,926198AA393480F1630?3#92F#?63A4#C9C0AF#7#5#3FC#A04A2C3F?3#189C26498FE?C3F10#C7FF00504#01021400140000000800?67342 
2F8A,483463#?3EEA0C0000?41F0000090000000000000001002000000000000000526F61726#2E747874504#0506000000000100010037000000 
110?,110?00000000 
#C73, 
Attachment 2: image.jpg 
Md5: 86e96ddc7c9d2c7ee468b1b4db8b234c 
Encoded file length: 72384; n = 255, k = 140