title:Worm Origin Identification Using Random Moonwalks
author:Yinglian Xie and
Vyas Sekar and
David A. Maltz and
Michael K. Reiter and
Hui Zhang
Worm Origin Identiﬁcation Using Random Moonwalks
Yinglian Xie
Vyas Sekar
David A. Maltz
Michael K. Reiter
Hui Zhang
Carnegie Mellon University
Abstract
We propose a novel technique that can determine both
the host responsible for originating a propagating worm
attack and the set of attack ﬂows that make up the ini-
tial stages of the attack tree via which the worm infected
successive generations of victims. We argue that knowl-
edge of both is important for combating worms: knowl-
edge of the origin supports law enforcement, and knowledge
of the causal ﬂows that advance the attack supports diag-
nosis of how network defenses were breached. Our tech-
nique exploits the “wide tree” shape of a worm propagation
emanating from the source by performing random “moon-
walks” backward in time along paths of ﬂows. Correlating
the repeated walks reveals the initial causal ﬂows, thereby
aiding in identifying the source. Using analysis, simula-
tion, and experiments with real world traces, we show how
the technique works against both today’s fast propagating
worms and stealthy worms that attempt to hide their attack
ﬂows among background trafﬁc.
1 Introduction
In all propagating worms, epidemic spreading attacks, and
other types of attacks that utilize compromised computers to
launch attack trafﬁc, the overwhelming majority of the at-
tack trafﬁc originates from victims of the attack, as opposed
to the true source of the attack. This affords the attacker
a great degree of anonymity, and to date there is little au-
tomated support for identifying the location (computer or
network) from which such an attack is launched. Similarly,
when an intranet succumbs to such an attack, there is little
automated help to determine the internal computer that was
compromised ﬁrst.
In [21], we have argued that it is important for the net-
work to support automatic forensic analysis abilities after
This research was supported in part by National Science Foundation
grant number CNS-0433540 and ANI-0331653 and U.S. Army Research
Ofﬁce contract number DAAD19-02-1-0389. The views and conclusions
contained here are those of the authors and should not be interpreted as nec-
essarily representing the ofﬁcial policies or endorsements, either express or
implied, of NSF, ARO, Carnegie Mellon University, or the U.S. Govern-
ment or any of its agencies.
an attack has happened. We have proposed a general Drag-
net [8] framework to support network auditing and forensic
capabilities. In this paper, we investigate the speciﬁc prob-
lem of crafting an algorithm that determines the origin of
epidemic spreading attacks such as Internet worms. Our
goal is not only to identify the “patient zero” of the epi-
demic, but also to reconstruct the sequence of events during
the initial spread of the attack and identify which communi-
cations were the causal ﬂows by which one host infected the
next. Identifying the causal infection ﬂows allows investi-
gators to study how the attack managed to bypass security
barriers intended to stop attacks, such as ﬁrewalls between
departments in an enterprise’s intranet.
Prior research on worm attacks has largely focused on
the detailed study of speciﬁc attacks seen in the wild, e.g.,
analyzing their scanning strategies and the vulnerabilities
they exploit in order to develop better signatures for ﬂows
that are likely to be worm infection attempts. In contrast,
our research takes the extreme opposite approach. We ask
a deliberately broad question: is it possible to identify the
worm origin without any a priori knowledge about the at-
tack?
Our algorithm for detecting worm attack origin is based
on the one invariant across all epidemic-style attacks
(present and future): for the attack to progress there must
be communication among attacker and the associated set
of compromised hosts, and the communication ﬂows that
cause new hosts to become infected form a causal tree,
rooted at the source of the attack. While these ﬂows may
be subtle or invisible when observed individually from any
single host, the tree structure will potentially stand out when
viewed collectively. By creating algorithms that work by
identifying the overall structure of an attack’s propagation,
our approach can be agnostic to attack signatures or scan-
ning rates and potentially be applicable to all worm attacks.
The algorithmic challenge is daunting even if, as as-
sumed in this paper, the complete graph of host commu-
nication is available. Our goal is an algorithm that can ﬁnd
large tree-structured subgraphs, and thus the root of such
trees, of the host contact graph deﬁned in Section 3, where
the edges are all the ﬂows that happened in the network.
We know of no tractable algorithm for ﬁnding such sub-
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
graphs in very large graphs. We are drawn to a formulation
based on ﬁnding tree structures as, in addition to ﬁnding
fast-spreading worms, we also want to ﬁnd slow-spreading
worms, where each infected host makes infection attempts
at a rate signiﬁcantly below the rate of normal trafﬁc. Given
its exponential growth pattern, a slow worm merely requires
a few extra generations to achieve the same spread as a fast
worm, while being signiﬁcantly harder to catch as it blends
in with normal trafﬁc.
This paper presents the random moonwalk algorithm that
can ﬁnd the origin and the initial propagation paths of a
worm attack, either within an intranet or on the Internet as
a whole, by performing post-mortem analysis on the traf-
ﬁc records logged by the networks. The algorithm works
by repeatedly sampling paths on the host communication
graph with random walks. Each walk randomly traverses
the edges of the graph backwards in time, and hence the
name random moonwalk.
The algorithm depends only on the assumption that
worm propagation occurs in a tree-like structure from its
origin, where an infection ﬂow from one computer (the
“parent”) to its victim (the “child”) forms a directed “edge”
in this tree. We show that in the presence of a large-tree
structured subgraph, these walks tend to be directed towards
the root of the tree so that correlating many walks reveals
the structure of the initial levels of the tree. We demon-
strate through analysis, simulation, and experiments on real
world traces that this approach can be highly effective in lo-
cating the origin of an attack, without the use of attack sig-
natures for detection. We evaluate the algorithm against a
variety of background trafﬁc patterns and worm spreading-
rates, showing its effectiveness even against slow-spreading
worms.
The primary contribution of this paper is an algorithmic
solution to identify the epidemic attack source and the ini-
tial causal ﬂows. By exploiting attack invariants such as the
globally visible attack structure, our algorithm is agnostic
to attack signatures, port numbers used, or speciﬁc software
vulnerabilities exploited. Thus it has the potential to be ro-
bust to future stealthy attacks that have not been seen in
networks today.
2 Related Work
To our knowledge, we are not aware of any previous work
that can automatically pinpoint the origin of an epidemic
attack or the initial causal infection events.
Our algorithm assumes that attack ﬂows do not use
spoofed source IP addresses, since in the types of attacks
we consider here, attack packets are rarely, if ever, spoofed.
The overwhelming majority of attack trafﬁc involved in the
propagation is initiated by victims instead of the original
attacker, so using spoofed addresses would only decrease
the number of successful attacks1 without providing extra
anonymity to the attacker.
If attackers do begin to use spoofed addresses, then trace-
back techniques [2, 6, 15, 19, 23] could be used to deter-
mine the true source of each ﬂow sampled by our algorithm.
Traceback alone, however, is not sufﬁcient to track worms
to their origin, as traceback determines only the true source
of the packets received by a destination.
In an epidemic
attack, the source of these packets is almost never the ori-
gin of the attack, but just one of the many infected victims.
Some method is still needed to ﬁnd the hosts higher up in
the causal tree.
Other work on trafﬁc causality analysis has mostly fo-
cused on detecting stepping stones, which is suggested [22]
as a potential solution for worm origin identiﬁcation to-
gether with IP traceback. Just as we discussed that IP trace-
back cannot be used to trace the origin of epidemic attacks,
stepping stone techniques are not suitable for our objectives
either.
There have been in general
two categories of ap-
proaches for detecting stepping stones. Content-based
techniques [24] require expensive packet payload analy-
sis, but cannot track down ﬂows from polymorphic worms
or worms that encrypt payloads. The other class of ap-
proaches [7, 29] focus on correlating packet-level character-
istics (e.g., inter-packet timings) to detect if multiple inter-
active connections are part of a single attack session. How-
ever, using ﬁne-grained packet timing characteristics for es-
tablishing causality does not work for worm attacks which
typically do not use interactive sessions. Even in the context
of detecting causality of interactive ﬂows, such techniques
still remain an active area of research especially with re-
spect to the robustness of such timing correlations [4, 26].
In contrast, our work ignores packet-level characteristics
and attack signatures, but instead focuses on establishing
causal relationships between ﬂows by exploiting the glob-
ally visible structure of attacks. Thus our algorithm can
potentially be agnostic to speciﬁc attack contents, attack
packet sizes, or port numbers used.
While our work does not depend on the generation of
worm signatures, our approach is complementary to these
efforts [12, 13] as well as other efforts in detecting the ex-
istence of attacks [10, 11, 16, 28] and trafﬁc anomalies [1].
Finally, our method for correlating random walks is inspired
by link analysis [14], where the authors infer correlations
among social network entities from their activity patterns.
1For example, spoofed packets are useless for propagating an infection
over TCP-based communications, since the TCP handshake cannot com-
plete, and spooﬁng addresses for UDP-based attacks in the presence of
egress ﬁlters [9] results in the attack ﬂows being discarded.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
s
t
s
o
H
t1
t2
t4
t5
t3
Time
t6
t7
t8
I
H
G
F
E
D
C
B
A
Causal edge
Non−causal
attack edge
Normal edge
Node in infected state
Node before infection
t1
t2
t4
A
B
E
F
t3
t5
t7
C
D
H
t6
t8
G
I
Figure 1: Example of host contact graph showing the communication
between hosts. Attack edges are shown as arrows in black (both solid
and dashed). Filled nodes correspond to hosts in an infected state.
Figure 2: Example showing the causal tree, which
contain causal edges with timestamps from the
host contact graph.
3 Problem Formulation
We model the network communication between end-hosts
using a directed host contact graph (cid:0) (cid:0) (cid:0)(cid:1)(cid:2) (cid:3)(cid:1). The nodes
of the graph (cid:1) (cid:0)    (cid:5) , where   is the set of all hosts in
the network and (cid:5) is time. Each directed edge represents
a network ﬂow between two end hosts at a certain time,
where the ﬂow has a ﬁnite duration, and involves transfer
of one or more packets. We represent each edge by a tu-
ple (cid:6) (cid:0) (cid:0)	(cid:2) (cid:8)(cid:2) (cid:2) (cid:1)(cid:1) where 	 (cid:3)   is the host that initiates
the communication (the source of the ﬂow), (cid:8) (cid:3)   is the
host that receives the communication (the destination of the
ﬂow), and , (cid:1) (cid:3) (cid:5) are the start and end times of the ﬂow.
Edge (cid:6) is thus from node 	(cid:2)  (cid:3) (cid:1) to node (cid:8)(cid:2) (cid:1) (cid:3) (cid:1) .
We have found that including time in the model is impor-
tant, as a single host (cid:10) (cid:3)   that becomes infected during
an attack behaves differently before the time it is infected
than it does afterwards.
Figure 1 shows the host contact graph of a hypothetical
network undergoing an attack. Time advances left to right.
Each node (marked as a circle) in the graph corresponds to
the state of a host at a certain time. The nodes on the same
horizontal line show how the state of one host changes over
time, and the nodes on the same vertical line represent the
states of different hosts at the same time.
Each directed edge in Figure 1 represents a network ﬂow.
If a ﬂow does not carry an infectious payload, we call that
edge a normal edge. We deﬁne an edge as an attack edge
(highlighted in the ﬁgure as either dashed or solid arrows) if
it corresponds to a ﬂow that carries attack trafﬁc, whether or
not the ﬂow is successful in infecting the destination host.
While a worm attack may induce a large number of attack
ﬂows in the network, only a few ﬂows actually advance the
attack by successfully infecting a new host. We deﬁne an
edge as a causal edge (highlighted as a solid arrow) if it
corresponds to a ﬂow that actually infects its destination.
For example, at time (cid:0), host D has attack edges to both
hosts G and B. However, only the edge from D to G is a
causal edge because G is infected by this contact, whereas
B was infected earlier before time (cid:1).
The causal tree formalizes the concept of epidemic at-
tack spread. The causal tree is formed by extracting the
causal edges from the host contact graph and projecting the
edges along the time axis. To be consistent with the notion
of time in the host contact graph, we consider causal edges
occurring earlier in time as edges in the higher levels of the
causal tree. Figure 2 shows the causal tree for the attack in
Figure 1, with each edge annotated with a timestamp. The
edge with timestamp (cid:2) from the worm origin A is thus at
the highest level of the tree.
Given a host contact graph, the goal of our algorithm is to
identify a set of edges that, with high probability, are edges
from the top level(s) (i.e., initial in time) of the causal tree.
Among the hosts listed as the sources of these edges will be
the origin of the attack (or the host at which the attack ﬁrst
entered the intranet). It is critical that the technique have a
reasonably low false-negative rate, so that the returned set
contains at least one top level causal edge that identiﬁes the
attack origin. It is desirable that the technique have a low
false-positive rate, so that the returned set does not include
many normal edges, attack edges that do not infect the des-
tination, or even causal edges that occur lower in the causal
tree, since the sources of these edges are less likely to be the
true origin of the attack.
4 The Random Moonwalk Algorithm
Our algorithm consists of repeatedly sampling paths from
the host contact graph and then correlating these samples.
The edges that occur most frequently among the samples
are selected as the edges most likely to be causal edges from
levels higher up in the causal tree. The ﬁrst key to the tech-
nique is that we do not sample individual edges — rather,
each sample is a contiguous path of edges in the graph. The
second key is that we create the path by starting at a ran-
domly chosen edge, and then walking backwards in time
along the graph, randomly choosing among potential pre-
decessor edges at each step in the moonwalk.
The sampling process is controlled by three parame-
ters: (cid:11) - the number of walks (i.e., samples) performed,
(cid:12) - the maximum length of the path traversed by a sin-
gle walk, and  - the sampling window size deﬁned as
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
the maximum time allowed between two consecutive edges
in a walk. Each walk starts at an arbitrarily chosen edge