User: According to the following API documents, develop a web application for data query and display. The API documentation is as follows:\n\nGET /api/users\nQuery all user information\n\nGET /api/users/:id\nQuery user information according to id\n\nPOST /api/users\nCreate a new user \n\nPUT /api/users/:id\nModify user information according to id\n\nDELETE /api/users/:id\nDelete user information according to id\n\nGET /api/orders\nQuery all order information \n\nGET /api/orders/:id\nQuery order information according to id\n\nPOST /api/orders\nCreate a new order\n\nPUT /api/orders/:id\nModify order information according to id \n\nDELETE /api/orders/:id\nDelete order information according to id\nAssistant: According to the API documentation, we can develop a web application for user and order management system. First, we need to set up a server. We can use Node.js and Express to build the server. We also need to use a database to store user and order information, we can use MongoDB. Below is a simple server code. ```javascript const express = require('express'); const mongoose = require('mongoose'); const app = express(); // connect to MongoDB database mongoose.connect('mongodb://localhost/myapp', { useNewUrlParser: true, useUnifiedTopology: true }); // Define user and order models const User = mongoose.model('User', { name: String, email: String }); const Order = mongoose.model('Order' , { item: String, amount: Number }); // Query all user information app.get('/api/users', async (req, res) => { const users = await User.find(); res. send(users); }); // Query user information based on id app.get('/api/users/:id', async (req, res) => { const user = await User.findById(req.params. id); res.send(user); }); // create a new user app.post('/api/users', async (req, res) => { const { name, email } = req.body; const user = new User({ name, email }); await user.save(); res.send(user); }); // Modify user information according to id app.put('/api/users/:id' , async (req, res) => { const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true }); res.send(user); }); // delete by id User information app.delete('/api/users/:id', async (req, res) => { const user = await User.findByIdAndDelete(req.params.id); res.send(user); }); // Query all order information app.get('/api/orders', async (req, res) => { const orders = await Order.find(); res.send(orders); }); // According to id Query order information app.get('/api/orders/:id', async (req, res) => { const order = await Order.findById(req.params.id); res.send(order); }) ; // create a new order app.post('/api/orders', async (req, res) => { const { item, amount } = req.body; const order = new Order({ item, amount }) ; await order.save(); res.send(order); }); // Modify order information according to id app.put('/api/orders/:id', async (req, res) => { const order = await Order.findByIdAndUpdate(req.params.id, req.body, { new: true }); res.send(order); }); // Delete order information according to id app.delete('/api/orders/ :id', async (req, res) => { const order = await Order.findByIdAndDelete(req.params.id); res.send(order); }); app.listen(3000, () => console. log('Server listening on port 3000')); ``` In the code above, we defined the user and order models, and implemented all API routes. Among them, the GET request uses async/await syntax to wait for the database operation to complete before returning the result, the POST and PUT requests use req.body to obtain the data in the request body, and the DELETE request uses req.params to obtain the routing parameters id value. Next, we need to build a front-end page to display the data. This can be achieved using Vue.js. Below is a simple HTML page. ```html <!DOCTYPE html> <html> <head> <meta charset="utf-8"> <title>User and Order Management System</title> <script src="https://cdn.jsdelivr. net/npm/vue/dist/vue.js"></script> </head> <body> <div id="app"> <h1>user</h1> <ul> <li v-for=" user in users" :key="user._id"> {{ user.name }} - {{ user.email }} <button @click="deleteUser(user)">Delete</button> </li> < /ul> <form @submit.prevent="addUser"> <label> Name: <input v-model="name" required> </label> <label> Email: <input type="email" v-model= "email" required> </label> <button type="submit">Add</button> </form> <hr> <h1>Order</h1> <ul> <li v-for="order in orders " :key="order._id"> {{ order.item }} - {{ order.amount }} <button @click="deleteOrder(order)">Delete</button> </li> </ul> <form @submit.prevent="addOrder"> <label> Item: <input v-model="item" required> </label> <label> Quantity: <input type="number" v-model="amount" required> </label> <button type="submit">Add</button> </form> </div> <script> const app = new Vue({ el: '#app', data: { users: [ ], orders: [], name: '', email: '', item: '', amount: 0 }, methods: { async getUsers() { const res = await fetch('/api/users'); this .users = await res.json(); }, async addUser() { const res = await fetch('/api/users', { method: 'POST', headers: { 'Content-Type': 'application/json ' }, body: JSON.stringify({ name: this.name, email: this.email }) }); const user = await res.json(); this.users.push(user); this.name = ' '; this.email = ''; }, async deleteUser(user) { const res = await fetch(`/api/users/${user._id}`, { method: 'DELETE' }); const deletedUser = await res.json(); this.users = this.users.filter(u => u._id !== deletedUser._id); }, async getOrders() { const res = await fetch('/api/orders') ; this.orders = await res.json(); }, async addOrder() { const res = await fetch('/api/orders', { method: 'POST', headers: { 'Content-Type': 'application /json' }, body: JSON.stringify({ item: this.item, amount: this.amount }) }); const order = await res.json(); this.orders.push(order); this.item = ''; this.amount = 0; }, async deleteOrder(order) { const res = await fetch(`/api/orders/${order._id}`, { method: 'DELETE' }); const deletedOrder = await res.json(); this.orders = this.orders.filter(o => o._id !== deletedOrder._id); } }, async mounted() { await this.getUsers(); await this.getOrders (); } }); </script> </body> </html> ``` In the above code, we use the template syntax of Vue.js to render the list of users and orders, and realize the addition and deletion Function. In methods, we use the fetch API to send requests to the server, and use the async/await syntax to wait for the result. Vue.js will automatically update data and templates, realizing the synchronization of front-end and back-end data. Finally, we can use the command line to start the server, and then access the front-end page in the browser to use the web application we developed. ```bash node server.js ``` It should be noted that if the dependency package is not installed, you can use the following command to install it. ```bash npm install express mongoose ```