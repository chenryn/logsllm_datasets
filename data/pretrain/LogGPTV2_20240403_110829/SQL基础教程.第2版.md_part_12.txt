COUNT函数的结果根据参数的不同而不同。COUNT(*)会得到包含NULL的数据
行数，而COUNT()会得到NULL之外的数据行数。
计算合计值
接下来我们学习其他4个聚合函数的使用方法。这些函数的语法基本
上与COUNT函数相同，但就像我们此前所说的那样，在这些函数中不能
使用星号作为参数。
KEYWORD 首先，我们使用计算合计值的SUM函数，求出销售单价的合计值（代
●SUM函数
码清单3-4）。
代码清单3-4 计算销售单价的合计值
SELECT SUM(sale_price)
FROM Product;
3-1 对表进行聚合查询 85 ●
执行结果
sum
------
16780
得到的结果16780日元，是所有销售单价（sale_price列）的
合计，与下述计算式的结果相同。
1000
500
4000
3000
6800
500
880
+ 100
16780
接下来，我们将销售单价和进货单价（purchase_price列）的
合计值一起计算出来（代码清单3-5）。
代码清单3-5 计算销售单价和进货单价的合计值
SELECT SUM(sale_price), SUM(purchase_price)
FROM Product;
执行结果
sum | sum
-------+------- SUM (purchase_price) 的结果
16780 | 12210
SUM (sale_price) 的结果
这次我们通过SUM (purchase_price)将进货单价的合计值也
一起计算出来了，但有一点需要大家注意。具体的计算过程如下所示。
500
320
2800
2800
5000
790
NULL
+ NULL
12210
● 86 第3章 聚合与排序
大家都已经注意到了吧，与销售单价不同，进货单价中有两条不明数
据NULL。对于SUM函数来说，即使包含NULL，也可以计算出合计值。
还记得前一章内容的读者可能会产生如下疑问。
“四则运算中如果存在NULL，结果一定是NULL，那此时进货单价
的合计值会不会也是NULL呢？”
有这样疑问的读者思维很敏锐，但实际上这两者并不矛盾。从结果上
说，所有的聚合函数，如果以列名为参数，那么在计算之前就已经把
NULL排除在外了。因此，无论有多少个NULL都会被无视。这与“等
注A 价为0”并不相同A。
虽然使用SUM函数时，“将
因此，上述进货单价的计算表达式，实际上应该如下所示。
NULL除外”和“等同于0”的结
果相同，但使用AVG函数时，这
两种情况的结果就完全不同了。
500
接下来我们会详细介绍在AVG函
320
数中使用包含NULL的列作为参数
的例子。 2800
2800
5000
+ 790
NULL并不在计算式之中
12210
法则3-2
聚合函数会将NULL排除在外。但COUNT(*)例外，并不会排除NULL。
计算平均值
接下来，我们练习一下计算多行数据的平均值。为此，我们需要使用
KEYWORD AVG函数，其语法和SUM函数完全相同（代码清单3-6）。
●AVG函数
代码清单3-6 计算销售单价的平均值
SELECT AVG(sale_price)
FROM Product;
执行结果
avg
----------------------
2097.5000000000000000
3-1 对表进行聚合查询 87 ●
平均值的计算式如下所示。
1000＋500＋4000＋3000＋6800＋500＋880＋100
8
(值的合计)/(值的个数)就是平均值的计算公式了。下面我们也
像使用SUM函数那样，计算一下包含NULL的进货单价的平均值（代码
清单3-7）。
代码清单3-7 计算销售单价和进货单价的平均值
SELECT AVG(sale_price), AVG(purchase_price)
FROM Product;
执行结果
avg | avg
----------------------+---------------------
2097.5000000000000000 | 2035.0000000000000000
AVG (sale_price) 的结果 AVG (purchase_price) 的结果
计算进货单价平均值的情况与SUM函数相同，会事先删除NULL
再进行计算，因此计算式如下所示。
500＋320＋2800＋2800＋5000＋790
＝2035
6
需要注意的是分母是6而不是8，减少的两个也就是那两条NULL的
数据。
但是有时也想将NULL作为0进行计算，具体的实现方式请参考第6章。
将NULL改变为0
500＋320＋2800＋2800＋5000＋790＋0＋0
＝1526.25
8
计算最大值和最小值
KEYWORD 想要计算出多条记录中的最大值或最小值，可以分别使用MAX和MIN
●MAX函数
函数，它们是英语maximam（最大值）和minimum（最小值）的缩写，
●MIN函数
很容易记住。
● 88 第3章 聚合与排序
这两个函数的语法与SUM的语法相同，使用时需要将列作为参数（代
码清单3-8）。
代码清单3-8 计算销售单价的最大值和进货单价的最小值
SELECT MAX(sale_price), MIN(purchase_price)
FROM Product;
执行结果
max | min
------+---- MIN (purchase_price) 的结果
6800 | 320
MAX (sale_price) 的结果
如图3-1所示，我们取得了相应的最大值和最小值。
但是，MAX/MIN函数和SUM/AVG函数有一点不同，那就是SUM/
AVG函数只能对数值类型的列使用，而MAX/MIN函数原则上可以适用
于任何数据类型的列。例如，对图3-1中日期类型的列regist_date
使用MAX/MIN函数进行计算的结果如下所示（代码清单3-9）。
代码清单3-9 计算登记日期的最大值和最小值
SELECT MAX(regist_date), MIN(regist_date)
FROM Product;
执行结果
maxx | minn
-----------+-----------
2009-11-11 | 2008-04-28
MAX (regist_date) 的结果 MIN (regist_date) 的结果
刚刚我们说过MAX/MIN函数适用于任何数据类型的列，也就是说，
只要是能够排序的数据，就肯定有最大值和最小值，也就能够使用这两个
函数。对日期来说，平均值和合计值并没有什么实际意义，因此不能使用
SUM/AVG函数。这点对于字符串类型的数据也适用，字符串类型的数据
能够使用MAX/MIN函数，但不能使用SUM/AVG函数。
法则3-3
MAX/MIN函数几乎适用于所有数据类型的列。SUM/AVG函数只适用于数值类型的列。
3-1 对表进行聚合查询 89 ●
使用聚合函数删除重复值（关键字 ）
DISTINCT
接下来我们考虑一下下面这种情况。
在图3-1中我们可以看到，商品种类（product_type列）和销售
单价（sale_price列）的数据中，存在多行数据相同的情况。
例如，拿商品种类来说，表中总共有3种商品共8行数据，其中衣服
2行，办公用品2行，厨房用具4行。如果想要计算出商品种类的个数，
怎么做比较好呢？删除重复数据然后再计算数据行数似乎是个不错的办
KEYWORD 法。实际上，在使用COUNT函数时，将2-1节中介绍过的DISTINCT
●DISTINCT关键字
关键字作为参数，就能得到我们想要的结果了（代码清单3-10）。
代码清单3-10 计算去除重复数据后的数据行数
SELECT COUNT(DISTINCT product_type)
FROM Product;
执行结果
count
-------
3
请注意，这时DISTINCT必须写在括号中。这是因为必须要在计算
行数之前删除product_type列中的重复数据。如果像代码清单3-11
那样写在括号外的话，就会先计算出数据行数，然后再删除重复数据，结
果就得到了product_type列的所有行数（也就是8）。
代码清单3-11 先计算数据行数再删除重复数据的结果
SELECT DISTINCT COUNT(product_type)
FROM Product;
执行结果
count
-------
8
法则3-4
想要计算值的种类时，可以在COUNT函数的参数中使用DISTINCT。
● 90 第3章 聚合与排序
不仅限于COUNT函数，所有的聚合函数都可以使用DISTINCT。
下面我们来看一下使用DISTINCT和不使用DISTINCT时SUM函数的
执行结果（代码清单3-12）。
代码清单3-12 使不使用DISTINCT时的动作差异（SUM函数）
SELECT SUM(sale_price), SUM(DISTINCT sale_price)
FROM Product;
执行结果
sum | sum
-------+------- SUM (DISTINCT sale_price) 的结果
16780 | 16280
SUM (sale_price) 的结果
左侧是未使用DISTINCT时的合计值，和我们之前计算的结果相同，
都是16780日元。右侧是使用DISTINCT后的合计值，比之前的结果
少了500日元。这是因为表中销售单价为500日元的商品有两种——“打
孔器”和“叉子”，在删除重复数据之后，计算对象就只剩下一条记录了。
法则3-5
在聚合函数的参数中使用DISTINCT，可以删除重复数据。
3-2 对表进行分组 91 ●
第3章 聚合与排序
3-2
对表进行分组
● 使用GROUP BY子句可以像切蛋糕那样将表分割。通过使用聚合函数和
学习重点
GROUP BY子句，可以根据“商品种类”或者“登记日期”等将表分割后再
进行汇总。
● 聚合键中包含NULL时，在结果中会以“不确定”行（空行）的形式表现出来。
● 使用聚合函数和GROUP BY子句时需要注意以下4点。
① 只能写在SELECT子句之中
② GROUP BY子句中不能使用SELECT子句中列的别名
③ GROUP BY子句的聚合结果是无序的
④ WHERE子句中不能使用聚合函数
子句
GROUP BY
目前为止，我们看到的聚合函数的使用方法，无论是否包含NULL，
无论是否删除重复数据，都是针对表中的所有数据进行的汇总处理。下面，
我们先把表分成几组，然后再进行汇总处理。也就是按照“商品种类”“登
记日期”等进行汇总。
KEYWORD 这里我们将要第一次接触到GROUP BY子句，其语法结构如下所示。
●GROUP BY子句
语法3-1 使用GROUP BY子句进行汇总
SELECT , , , ……
FROM 
GROUP BY , , , ……;
下面我们就按照商品种类来统计一下数据行数（=商品数量）（代码
清单3-13）。
● 92 第3章 聚合与排序
代码清单3-13 按照商品种类统计数据行数
SELECT product_type, COUNT(*)
FROM Product
GROUP BY product_type;
执行结果
product_type | count
--------------+------
衣服 | 2
办公用品 | 2
厨房用具 | 4
如上所示，未使用GROUP BY子句时，结果只有1行，而这次的结
果却是多行。这是因为不使用GROUP BY子句时，是将表中的所有数据
作为一组来对待的。而使用GROUP BY子句时，会将表中的数据分为多
个组进行处理。如图3-4所示，GROUP BY子句对表进行了切分。
图3-4 按照商品种类对表进行切分
衣服(2条)
厨房用具(4条)
T恤衫
菜刀
运动T恤
高压锅
叉子
擦菜板 办公用品(2条)
打孔器
圆珠笔
这样，GROUP BY子句就像切蛋糕那样将表进行了分组。在GROUP
KEYWORD BY子句中指定的列称为聚合键或者分组列。由于能够决定表的切分方式，
●聚合键