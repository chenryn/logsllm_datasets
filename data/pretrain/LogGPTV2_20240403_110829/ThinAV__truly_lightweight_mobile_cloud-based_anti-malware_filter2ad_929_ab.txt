### 文本优化

**扫描服务的局限性**
这些扫描服务基于专有的反恶意软件引擎，因此，支撑这些服务的具体引擎细节被视为高度保密的商业机密。因此，这些服务在威胁检测方面的具体能力和限制并不为公众所知。

**当前实现的模块及其描述**
- **Kaspersky**：提供免费服务，使用专有反恶意软件引擎扫描大小不超过1MB的文件。
- **VirusChief**：多引擎反恶意软件扫描服务，支持最大10MB的文件。
- **VirusTotal**：支持上传最大20MB的文件，并使用42种不同的扫描引擎进行扫描。VirusTotal还提供了公共API以与其服务进行交互。
- **ComDroid**：虽然不是反恶意软件引擎，但ComDroid可以通过静态代码分析识别Android应用程序中的潜在漏洞。ComDroid模块将被扫描的应用程序标记为“存在风险”而非“感染”。

**ThinAV服务器配置**
目前，ThinAV服务器根据每个模块平均扫描文件所需的时间来选择扫描服务。我们发现最快的扫描服务是Kaspersky，其次是VirusChief、ComDroid和VirusTotal。如果任一扫描模块在尝试在线扫描时返回错误，则会选择下一个优先级的模块。如果所有四个扫描模块均失败，则会向发起请求的设备返回一个通用错误代码。

**性能评估**
本文将讨论各扫描模块的性能测量结果。

### ThinAV 评估

**概述**
本节展示了对ThinAV的评估结果。所有开发和测试工作均在Android SDK提供的模拟器上完成。该模拟器允许我们在不同版本的Android操作系统上快速开发，并能够修改Android源代码。

**网络性能问题**
由于ThinAV严重依赖网络，链路速度直接影响其性能。在手机等移动设备上，蜂窝连接的速度可能会因用户位置、无线电干扰、蜂窝网络负载等因素而变化。鉴于蜂窝网络测量的挑战，我们参考了Gass等人[10]的研究结果。

#### 4.1 数据集
评估过程使用了一组从Google Play商店（数据收集时称为Android Market）下载的应用程序。我们于2012年1月3日下载了每个应用类别中排名前50的免费应用（按用户评分）。大多数包下载成功，但有28次下载反复失败。最终，我们获得了分布在21个应用类别中的1,022个应用，每个类别包含46到50个包。表1总结了数据集中关键的文件大小统计信息。

| 指标 | 数值 |
| --- | --- |
| 应用数量 | 1022 |
| 平均应用大小 | 2.65 MB |
| 中位数应用大小 | 1.78 MB |
| 最小应用大小 | 0.02 MB |
| 最大应用大小 | 37.06 MB |
| 小于1MB的应用比例 | 34.64% |
| 小于10MB的应用比例 | 97.16% |
| 小于20MB的应用比例 | 99.51% |

#### 4.2 恶意软件检测
首先，我们将整个数据集上传到VirusTotal扫描服务，以确认VirusTotal及其他扫描服务能够正确接收并扫描Android应用程序。此次初步扫描还为我们提供了检测基线，即查看初始数据集中有多少应用包含恶意软件。

VirusTotal标记了数据集中几个可能的恶意软件实例。在上传的1,022个应用中，有1,019个被扫描（三个应用因大小限制被跳过），其中27个被至少一个扫描引擎标记为恶意软件。其中一个包被四个不同的引擎标记为恶意软件，九个包被两个引擎标记，其余十七个包被单个引擎标记为恶意软件。表2提供了部分常见标记样本的详细信息。

| 样本名称 | 类型 | 数量 | 检测引擎 |
| --- | --- | --- | --- |
| Adware.Airpush(2, 3) | 广告软件 | 15 | DrWeb, Kaspersky |
| Plankton (A, D, G) | 恶意软件 | 6 | Kaspersky, Comodo, NOD32, Trend Micro |
| SmsSend (151, 261) | 短信发送木马 | 2 | DrWeb |
| Rootcager | Rootkit | 2 | Symantec |

尽管测试数据集仅表明VirusTotal使用的6个AV引擎能够检测Android恶意软件，但我们后来确认多达26个（超过一半的VirusTotal扫描引擎）能够检测某种形式的Android特定恶意软件。

#### 4.3 扫描模块性能
我们开发了一个测试程序，以特定时间间隔将不同大小的文件上传到各个扫描服务。该程序旨在测量每个服务的响应时间。程序提交了12个文件（大小分别为0 KB, 1 KB, 2 KB, 4 KB, 8 KB, 16 KB, 32 KB, 64 KB, 128 KB, 256 KB, 512 KB 和 1023 KB），并在8天窗口内随机顺序上传。文件由脚本生成，填充伪随机位，期望这些文件不会被扫描服务标记为恶意软件或存在于服务缓存中。每次运行测试程序时，测试文件都以伪随机顺序上传，以克服由于DNS查找可能对第一个上传文件造成的惩罚。

**结果**
对于每个扫描服务，记录了数百个响应时间测量值。初步审查数据显示，每个服务都有少数极端异常值。任何超出均值两倍标准差的测量值都被分类为异常值。这一阈值的选择是因为它消除了最极端的结果，同时保留了绝大多数数据。

比较三个服务的测量结果，可以明显看出VirusTotal与其他两个扫描服务之间的性能差异接近一个数量级。Kaspersky和VirusChief的平均响应时间分别为1.54至14.49秒和6.82至28.70秒，而VirusTotal的响应时间为1.21至229.28秒（当仅考虑非零文件大小时，范围变为148.92至229.28秒）。VirusTotal的上传部分响应时间与Kaspersky类似，范围为1.94至11.74秒。

去除异常值后，响应时间数据被绘制成图（见图2、图3和图4），试图确定文件大小与服务响应时间之间的相关性。每张图显示了上传文件大小与三个扫描服务响应时间的关系，图5则绘制了VirusTotal的上传和响应速度。Kaspersky和VirusChief都显示出文件大小与响应时间之间的正相关关系，VirusChief的数据在y轴上正移约15秒（因此更慢）。相比之下，VirusTotal的响应时间与文件大小之间几乎没有关系。VirusTotal响应时间数据的趋势略微为负，并且y截距远大于其他两个扫描服务。相反，VirusTotal的上传部分趋势与Kaspersky非常相似。利用这些数据，我们生成了一组线性方程，以近似表示扫描服务的性能作为文件字节数的函数（见表3）。

**讨论**
不出所料，只使用单一反病毒引擎的Kaspersky返回了最快的结果，而使用六个反病毒引擎的VirusChief在扫描类似大小文件时比Kaspersky慢约15秒。我们认为VirusTotal性能不稳定的原因在于该公司对扫描请求的优先级划分。VirusTotal将通过正式API发送的请求赋予最低优先级，响应时间似乎不依赖于上传文件的大小，而是取决于VirusTotal扫描服务在任何给定时刻的繁忙程度。这种区别在上传文件而不轮询扫描结果时更为明显（见图5）。

希望这些改进能使文本更加清晰、连贯和专业。