We have a requirement to destroy Angular2 Application when user is navigated
to other page (Note: It is an application where we are using angular2 for one
page only). So when the user navigates away from this page (using normal
anchor), we have to unload/destroy the ng2 app.
we are taking applicationRef as follows:
    platformBrowserDynamic([
        {provide: 'ConfigService', useValue: {} }
    ]).bootstrapModule(AppModule).then((appModule:NgModuleRef)=>{
        const appRef = appModule.injector.get(ApplicationRef);
        if(!!callback)
            callback(appRef);
    });
we have a hook when user going out from this page, we are calling  
`_ref.components[0].hostView.destroy(); `  
where _ref is the application reference passed in the callback above.
This entire flow calls the ngOnDestroy of each component inside the
application however, when we navigate to non angular page, we can see that the
components are still there in the memory and causing performance issue when I
open the same page again.  
https://ibb.co/nsjekk  
You can see from the screenshot that the component are still present and
consuming memory, even if we have destroyed the app as mentioned above.
What is the issue here. Is destroying application not enough to clear the
memory? Or we are doing something wrong?  
we are using Angular 2.1.2.