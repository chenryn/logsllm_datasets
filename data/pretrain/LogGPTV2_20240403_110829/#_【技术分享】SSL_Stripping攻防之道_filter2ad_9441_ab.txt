Marlinspike展示了一种称为SSLStrip的工具。该工具能够拦截HTTP流量，并且每当发现用户被重定向到站点或使用HTTPS连接到站点时，它能够透明地将其剥离。
这种情况下，受害者并没有直接连接到网站；相反，受害者将被连接到攻击者那里，然后，攻击者会与该网站建立连接。这种攻击手法就是所谓的中间人攻击。
SSLStrip的神奇之处在于，只要在未加密的HTTP连接上发现一个HTTPS网页的链接，它就会使用HTTP替代HTTPS，并坐在中间拦截连接。拦截器会通过HTTPS与Web服务器建立加密连接，并将流量以未加密的形式传输给站点访问者（在此过程中，它会记录所有感兴趣的密码或信用卡信息）。
为了应对这种攻击，人们在2012年创建了一个称为HTTP Strict Transport Security（HSTS）的协议，并在RFC
6797中对该协议做了详细的规定。该协议的工作原理是，让服务器使用一个名为Strict-Transport-Security的特殊头部进行应答，其中包含一个响应消息，告诉客户每当重新连接站点时，必须使用HTTPS。该响应中包含一个“max-age”字段，存放的是一个以秒为单位的数值，它代表着HSTS Header的过期时间。
虽然这样做有助于防止拦截攻击，但并不完美，还是存在一些缺点。
**  
**
**HSTS Preloading**
HSTS的一个缺点是，它需要通过先前的连接才能知道可以安全地连接到特定的站点。当访问者初次连接到网站时，他们不会收到要求始终使用HTTPS的HSTS规则。只有在后续的连接中，访问者的浏览器才会收到要求他们通过HTTPS进行连接的HSTS规则。
除此之外，HSTS还面临着其他类型的攻击，例如通过劫持用于同步计算机时间的协议，可以将计算机的日期和时间设置为将来的时间。当HSTS规则已过期后，可以将日期和时间设置为任意值，从而绕过HSTS。
HSTS Preload
Lists是一种解决这些问题的潜在方案，其工作原理是把只能使用HTTPS连接的网站硬编码到一个列表中。启用HSTS的网站可以提交到hstspreload.org的Chrome
HSTS Preload Lists中；它可以作为其他浏览器中采用的预加载列表的基础。
在Google
Chrome的源代码中，有一个文件中保存了相关的硬编码文件，其中列出了“预加载列表”中所有域的HSTS属性。每个条目都使用JSON进行了格式化，例如：
即使采用了预载技术，事情还不完美。假设有人正在阅读介绍各种图书的博客，那么在该博客上通常会有一个可以从在线零售商那里购买图书的链接。尽管在线零售商通过HSTS强制使用HTTPS，但是仍可能遭受中间人攻击，致使该博客实际上并没有通过HTTPS与在线零售商建立连接。
**  
**
**故事还在继续**
后来，Leonardo
Nve又开发了一款名为SSLStrip+的软件，它实际上是SSLStrip更新版，SSLStrip+具有绕过HSTS的能力。当站点通过未加密的HTTP进行连接时，SSLStrip+就会查找相关的HTTPS连接。当发现网站的HTTPS连接时，会将其重写为HTTP，并将该域重写为HSTS
Preload列表之外的、与原来比较相似的域。
例如，假设一个网站包含一个指向https://example.com/的链接，HSTS可以通过将URL重写为http://example.org/来完成加密的剥离；攻击者位于两者中间，从http://example.org/接收流量，并将其代理到https://example.com/。
这种攻击也可以针对重定向：假设http://example.net/通过HTTP进行加载，然后重定向到通过HTTPS加载的https://example.com/。通过重定向，可以将受HSTS保护的合法站点重定向到一个手机域，供攻击者通过它以HTTP提供流量，然后加以拦截。
随着越来越多的互联网开始启用HTTPS，这种攻击的用武之地将会越来越小，因为可拦截的未加密HTTP数据流量也越来越少了。
在最新发布的Google Chrome版本（version
62）中，利用不安全连接提供输入表单（如信用卡表单和密码字段）的网站会向用户显示未“不安全”的站点。在隐身模式（隐身浏览）模式下，Chrome会将所有未使用HTTPS得网站都显示为不安全的站点。
这种警告能够帮助用户弄清楚登录时HTTPS是否已从网页上剥离。此外，这样做的另一个目的，是希望更多的网站能够采用HTTPS，从而提高整个互联网的安全性。
**  
**
**小结**
在这篇文章中，我们讨论了从网站上剥离HTTPS的相关机制，特别是HSTS在这方面的影响。值得注意的是，对于各种HTTPS规范和某些加密算法来说，还存在其他潜在的攻击向量，但是本文没有对其进行介绍。
尽管HTTPS提供了一种加密网络流量的机制，但为了确保该机制的实施，需要落实诸如HTTP Strict Transport
Security等技术，这是非常重要的，同时，最好将您的站点提交到HSTS预加载列表中。随着越来越多的网站实现了上面的这些措施，互联网整体的安全性也将得到更大的提高。
要想深入理解现实中HTTPS和HSTS的实现方式，我强烈推荐阅读Troy Hunt的文章：The 6-Step "Happy Path" to
HTTPS。他在该文章中介绍了如何在实践中启用强大的HTTPS，另外还介绍了一种本文没提及的、称为CSP（内容安全策略）的技术。
CSP允许人们通过HTTPS加载页面时进行自动升级或阻止HTTP请求，因为这会引发另一个攻击向量。