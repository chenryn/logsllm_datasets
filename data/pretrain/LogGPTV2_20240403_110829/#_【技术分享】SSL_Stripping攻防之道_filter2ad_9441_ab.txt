### Marlinspike的SSLStrip工具

Marlinspike展示了一种名为SSLStrip的工具，该工具能够拦截HTTP流量，并在用户被重定向到HTTPS站点时透明地将其剥离。在这种情况下，受害者实际上并没有直接连接到目标网站，而是被重定向到了攻击者的服务器。随后，攻击者会与目标网站建立加密连接，同时将未加密的数据传输给受害者。这种攻击手法被称为中间人攻击。

### SSLStrip的工作原理

SSLStrip通过监听未加密的HTTP连接来发现指向HTTPS页面的链接，并将其替换为HTTP链接。这样一来，攻击者就可以截获并记录所有敏感信息（如密码和信用卡数据），而受害者则浑然不觉。

### HTTP Strict Transport Security (HSTS)

为了应对这类攻击，2012年引入了HTTP Strict Transport Security (HSTS) 协议，具体规定见RFC 6797。该协议要求服务器返回一个特殊的响应头——`Strict-Transport-Security`，指示客户端在未来一段时间内始终使用HTTPS连接到特定站点。此响应包含一个`max-age`字段，用于指定HSTS策略的有效期。

尽管HSTS有助于防止中间人攻击，但其并非完美无缺。例如，初次访问某个启用HSTS的网站时，浏览器不会收到任何强制使用HTTPS的安全指令；只有在后续请求中才会应用HSTS规则。此外，如果攻击者能够篡改客户端的时间设置，使之超出`max-age`期限，则可以绕过HSTS保护机制。

### HSTS Preloading

为解决上述问题，开发人员提出了HSTS预加载列表的概念。这是一种将只能通过HTTPS访问的域名硬编码进浏览器的方法。启用HSTS的网站可以申请加入由hstspreload.org维护的Chrome HSTS预加载列表，其他浏览器也会参考这一列表。

然而，即使采用了预载技术，仍存在一些潜在风险。比如，若某博客文章中包含指向在线书店的超链接，尽管该商店强制使用HTTPS，但如果博客本身未加密，则依然可能遭受中间人攻击。

### SSLStrip+：更进一步的威胁

Leonardo Nve后来推出了升级版的SSLStrip+，它不仅具备原始版本的所有功能，还能够规避HSTS防护。当检测到通过HTTP发起的连接时，SSLStrip+会查找相关HTTPS链接并将其转换为HTTP形式，同时替换为与原域名相似但不在预加载列表中的新地址。这样做的结果是，原本应该安全的通信现在变得极易受到窃听。

### 浏览器层面的安全改进

随着越来越多网站采用HTTPS，此类攻击的机会逐渐减少。Google Chrome v62开始对通过非安全连接提交表单信息的网页显示警告标志，并且在隐身模式下将所有非HTTPS站点标记为“不安全”。这些措施旨在提醒用户注意潜在的安全隐患，并鼓励更多网站转向全站加密。

### 结论

本文探讨了如何利用SSLStrip等工具从网站上剥离HTTPS以及HSTS对此类行为的影响。虽然HTTPS提供了一种有效的数据加密手段，但在实际部署过程中还需配合诸如HSTS预加载等额外措施才能达到最佳效果。随着全球范围内HTTPS普及率不断提高，整个互联网环境也将变得更加安全可靠。对于希望深入了解HTTPS和HSTS实现细节的读者，建议阅读Troy Hunt撰写的《The 6-Step "Happy Path" to HTTPS》一文，其中不仅详细介绍了如何配置强大的HTTPS支持，还提到了另一种重要的安全特性——内容安全策略(CSP)，它可以自动升级或阻止来自不安全源的请求。