t
o
T
 140000
 120000
 100000
 80000
 60000
 40000
 20000
 0
s
t
o
b
f
o
)
y
a
d
r
e
b
m
u
n
e
n
o
r
e
t
f
l
a
a
(
t
o
T
 0
 1000  2000  3000  4000  5000
 120000
 100000
 80000
 60000
 40000
 20000
 0
 0
 1000  2000  3000  4000  5000
10-19
20-29
30-39
40-49
50-59
60-69
Number of appearances
Number of obscure bots
(1) Eventual results
Number of obscure bots
(2) One-day results
Fig. 5. Frequency histogram of
the number of appearances in
ﬁve runs
Fig. 6. Total number of bots observed by the monitors, includ-
ing explicit, obscure, and spooﬁng bots
148
G. Yan, S. Chen, and S. Eidenbenz
tends to be close to the minimum due to the fact that the Pareto distribution is
skewed towards its cutoﬀ parameter at its lower end.
7.2 Immersive RatBot
We now evaluate how immersive RatBot aﬀects the accuracy of botnet size esti-
mation. We simulate a P2P network with 7,000 normal peers and 3,000 bots. The
botmaster uses ﬁve bots to publish commands with 32 keys periodically every
half hour. Each bot uses these 32 keys to search for the current command every
half hour until it obtains the command successfully. Here, we let bots perform
publish and search operations less frequently than those in exclusive RatBot
because normal P2P peers may treat these bots performing frequent operations
as abnormal and thus limit interations with them. Among 7,000 normal peers,
990 of them always stay online as servers. We assume the adversary deploys 10
monitors in the network and they appear as servers always online. Each monitor
is also a captured bot and can be used to reveal the 32 keys used by the bots to
search the current command. The monitor identiﬁes a peer as a bot if it observes
that the peer uses any of these keys to search or publish a data item in the P2P
network. We vary the number of obscure bots among 0, 1000, 2000, and 3000.
For each scenario, we simulate it for four days, the ﬁrst of which is used as a
ramp-up phase for each obscure bot to obtain some empirical distributions and
the remaining days are used for testing. We simulate each scenario 20 times.
Fig. 7. Number of bots observed by
monitors under diﬀerent numbers of
obscure bots (0, 1000, 2000, 3000)
According to the results, we make the fol-
lowing observations. First, the existence of
obscure bots produces estimated botnet sizes
with high variation. For instance, after three days, if there are no obscure bots,
the ratio of the maximum and the minimum of observed bots is 1.016; when we
introduce 1000, 2000, and 3000 obscure bots, the ratio becomes 3.405, 2.637, and
2.006, respectively. Such high variation renders it diﬃcult for the adversary to
infer the true size of the botnet. Second, it is obvious that increasing the num-
ber of obscure bots helps inﬂate the number of observed bots by the adversary.
When there are 1000 obscure bots, the ratio of the median number of observed
bots after three days to the true size of the botnet is only 4.5, but when there
are 3000 obscure bots, this number becomes 12.8. Hence, the botmater can use
the fraction of obscure bots to control the error in the adversary’s estimation.
Figure 7 depicts the number of bots ob-
served by the adversary under diﬀerent num-
bers of obscure bots. For visual clarity, we
shift the points horizontally slightly to pre-
vent overlapping. For each scenario, we show
the median, minimum, and maximum among
the 20 sample runs. The results correspond-
ing to “Eventually” show the sum of both the
number of authentic bots (including obscure
bots) and the total number of spooﬁng IP
addresses generated by all obscure bots.
s
t
o
b
d
e
v
r
e
s
b
o
f
o
r
e
b
m
u
N
 70000
 60000
 50000
 40000
 30000
 20000
 10000
 0
After one day
After two days
After three days
Eventually
 0
 500  1000  1500  2000  2500  3000
Number of obscure bots
RatBot: Anti-enumeration Peer-to-Peer Botnets
149
8 Countermeasures
Given the disruptive nature of RatBot, it is important for us to understand
its weakness and potential methods to mitigate it. In this section, we present
a few countermeasures that can defeat the obfuscation techniques deployed by
RatBot. First, RatBot requires each bot to contact a central server initially to
decide whether it should work as an obscure bot. The server can easily become
a single point of failure. If the adversary manages to monitor traﬃc from and/or
to this server, the identities of true bots can be revealed. With regard to this, it
is noted that each bot only needs to contact this server during the bootstrapping
phase. As there is little communication for this purpose, it is a diﬃcult task to
monitor such traﬃc. Moreover, existing botnets commonly apply distributed
server farms and fast-ﬂux techniques to improve resilience of their services.
These techniques can also be applied here to prevent the single failure of the
server.
In order for RatBot to operate, the search operation must be spoofable. Hence,
if a P2P network deploys anti-spooﬁng techniques, RatBot cannot survive in
it. For example, the P2P network can simply use TCP for all signaling and
data transfers. Even if UDP is used for signaling, the P2P network can add
a level of anti-spooﬁng mechanism in a query: when Peer A receives a query
from Peer B, it sends back a conﬁrmation request to Peer B and only an-
swers Peer B’s query after receiving a reply from Peer B on its request. It is
noted that this countermeasure works only against immersive RatBot because
the botnet has to be blended into an existing P2P network. Albeit eﬀective in
defeating the anti-enumeration scheme by RatBot, fully deploying anti-spooﬁng
techniques in all enterprise networks and ISPs still has a long way to go [5]. For
instance, the recent analysis of 5,000 DDoS attacks suggests that a signiﬁcant
fraction of them still used spooﬁng techniques to generate large volumes of attack
traﬃc [3].
If the RatBot needs TCP data transfer to fetch the command, the adversary
can deploy monitors in the P2P network and place those command data on
them. By monitoring which machines fetch the command data, the adversary
can obtain a list of authentic bots as the three-way handshaking mechanism in
TCP cannot be spoofed with spurious IP addresses.
Another eﬀective approach to defeat RatBot is deploying anti-spooﬁng tech-
niques in the whole Internet. The degree to which the RatBot can obfuscate its
size depends on how many obscure bots it has to perform spooﬁng operations. If
the majority of Internet addresses cannot be spoofed, we can still obtain a good
estimate on the size of RatBot by simply ignoring those obscure bots.
RatBot’s relying on spooﬁng packets for obfuscation introduces another weak-
ness: enterprise networks and ISPs can detect the existence of bots in their
networks by looking for hosts that send out spoofed packets. RatBot prevents
enumeration by the adversary at the global level at the price of increased vul-
nerability to detection at the local level due to its use of spooﬁng packets.
150
G. Yan, S. Chen, and S. Eidenbenz
9 Conclusions
In recent years, botnets, which emerge as a major cyber threat, have been widely
used to send spamming emails and launch DDoS attacks. In a botnet war, a bot-
net owner may want to bluﬀ his botnet size in order to intimidate the adversary,
gain media attention, or win a contract. In this work, we explore the tactics
that a botnet may use to achieve this goal. We present the design of a type
of P2P botnets called RatBot, which applies obfuscation techniques to defeat
standard enumeration techniques, and use large-scale high-ﬁdelity simulation to
evaluate its performance. We hope our work will raise the awareness of white-hat
cyber-security practitioners on the challenges of estimating the sizes of botnets
accurately and adopt eﬀective countermeasures in practice.
References
1. http://www.ip2location.com/
2. http://www.amule.org
3. http://asert.arbornetworks.com/2010/12/the-internet-goes-to-war/
4. Barford, P., Yegneswaran, V.: An Inside Look at Botnets. In: Malware Detection.
Advances in Information Security, vol. 27. Springer, US (2007)
5. Beverly, R., Berger, A., Hyun, Y., Claﬀy, K.: Understanding the eﬃcacy of deployed
Internet source address validation ﬁltering. In: Proceedings of ACM IMC 2009
(2009)
6. http://isisblogs.poly.edu/2008/05/19/storm-worm-ip-list-and-country-
distribution-statistics
7. http://www.net-security.org/secworld.php?id=8858
8. Dagon, D., Zou, C.C., Lee, W.: Modeling botnet propagation using time zones. In:
Proceedings of NDSS 2006 (2006)
9. Goebel, J., Holz, T.: Rishi: identify bot contaminated hosts by IRC nickname
evaluation. In: Proceedings of HotBots 2007 (2007)
10. Gu, G., Perdisci, R., Zhang, J., Lee, W.: BotMiner: Clustering analysis of network
traﬃc for protocol- and structure-independent botnet detection. In: Proceedings
of USENIX Security 2008 (2008)
11. Gu, G., Porras, P., Yegneswaran, V., Fong, M., Lee, W.: BotHunter: Detecting
malware infection through ids-driven dialog correlation. In: USENIX Security 2007
(2007)
12. Holz, T., Steiner, M., Dahl, F., Biersack, E., Freiling, F.: Measurements and miti-
gation of peer-to-peer-based botnets: a case study on storm worm. In: LEET 2008
(2008)
13. Kang, B.B., Chan-Tin, E., Lee, C.P., Tyra, J., Kang, H.J., Nunnery, C., Wadler, Z.,
Sinclair, G., Hopper, N., Dagon, D., Kim, Y.: Towards complete node enumeration
in a peer-to-peer botnet. In: Proceedings of ACM ASIACCS 2009 (2009)
14. Karasaridis, A., Rexroad, B., Hoeﬂin, D.: Wide-scale botnet detection and charac-
terization. In: Proceedings of HotBots 2007 (2007)
15. Maymounkov, P., Mazi`eres, D.: Kademlia: A peer-to-peer information system based
on the XOR metric. In: Proceedings of IPTPS 2001 (2001)
16. Pietrzyk, M., Urvoy-Keller, G., Costeux, J.-L.: Digging into kad users’ shared fold-
ers. In: Posters of ACM SIGCOMM 2008 (2008)
RatBot: Anti-enumeration Peer-to-Peer Botnets
151
17. Porras, P., Saidi, H., Yegneswaran, V.: Conﬁcker C P2P protocol and implemen-
tation (September 2009), http://mtc.sri.com/Conficker/P2P/
18. Rajab, M.A., Zarfoss, J., Monrose, F., Terzis, A.: My botnet is bigger than yours
(maybe, better than yours): why size estimates remain challenging. In: HotBots
2007 (2007)
19. Ramachandran, A., Feamster, N., Dagon, D.: Revealing botnet membership using
dnsbl counter-intelligence. In: Proceedings of SRUTI 2006 (2006)
20. Starnberger, G., Kruegel, C., Kirda, E.: Overbot: a botnet protocol based on
kademlia. In: Proceedings of SecureComm 2008 (2008)
21. Steiner, M., En-Najjary, T., Biersack, E.W.: A global view of kad. In: IMC 2007
(2007)
22. Steiner, M., En-Najjary, T., Biersack, E.W.: Analyzing peer behavior in kad. Tech-
nical Report EURECOM+2358, Institut Eurecom, France (October 2007)
23. Stock, B., Gobel, J., Engelberth, M., Freiling, F.C., Holz, T.: Walowdac - analysis
of a peer-to-peer botnet. In: Proceedings of the 2009 European Conference on
Computer Network Defense (2009)
24. Stone-Gross, B., Cova, M., Cavallaro, L., Gilbert, B., Szydlowski, M., Kemmerer,
R., Kruegel, C., Vigna, G.: Your botnet is my botnet: Analysis of a botnet takeover.
In: Proceedings of the ACM CCS 2009 (2009)
25. http://www.neoseeker.com/news/7103-worm-storm-gathers-strength/
26. Stover, S., Dittrich, D., Hernandez, J., Dietrich, S.: Analysis of the storm and
nugache trojans: P2p is here. Login 32(6) (December 2007)
27. Vogt, R., Aycock, J., Jacobson, M.J.: Army of botnets. In: NDSS 2007 (2007)
28. Wang, P., Sparks, S., Zou, C.C.: An advanced hybrid peer-to-peer botnet. In:
Proceedings of HotBots 2007 (2007)
29. Xie, Y., Yu, F., Achan, K., Gillum, E., Goldszmidt, M., Wobber, T.: How dynamic
are ip addresses? In: Proceedings of ACM SIGCOMM 2007 (2007)
30. Yan, G., Ha, D.T., Eidenbenz, S.: AntBot: Anti-pollution peer-to-peer botnets.
Computer Networks 55(8) (June 2011)
31. Yen, T.-F., Reiter, M.K.: Traﬃc aggregation for malware detection. In: Zamboni,
D. (ed.) DIMVA 2008. LNCS, vol. 5137, pp. 207–227. Springer, Heidelberg (2008)