# 从RealWorldCTF Quals 2019 - accessible学习V8对property access的优化
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00前言
从一题学习v8引擎对property access的相关JIT优化
## 0x01 前置知识
###  简介
在js中，字典类型的键称为属性(property)，如下，dict是一个对象，其中a是它的一个属性
    var dict = {a:"haivk",b:"hai"};
当你要访问a时，首先是从这个对象里面查找键的内容a，找到后从中取出其对应的值。
###  优化
####  空间优化
假如有多个具有相同键的对象，其排列顺序也一样，那么可以不必为每一个对象都存储这些键的值，单独存储一份键的模板，我们称之为`Shape`，比如上述的dict其键模板为
    a
    b
然后每个对象只需要保存一份键模板的指针即可，这样就节省了大量的空间。  
运行如下的代码，并打印JIT代码
    var obj = {a:"haivk",b:"hai"};
    function  opt(o){
        o.b = 1.1;
        o.a = 2.2;
        return o.b;
    }
    for(var i = 0; i 
    0x38af000851ac    cc  48bf158c1408af380000 REX.W movq rdi,0x38af08148c15    ;; object: 0x38af08148c15 
    0x38af000851b6    d6  89470f         movl [rdi+0xf],rax
    0x38af000851b9    d9  49c7c00000fcff REX.W movq r8,0xfffc0000
    0x38af000851c0    e0  4c23c7         REX.W andq r8,rdi
    0x38af000851c3    e3  41f6400804     testb [r8+0x8],0x4
    0x38af000851c8    e8  0f8533020000   jnz 0x38af00085401  
    0x38af000851ce    ee  49b87d2c2d08af380000 REX.W movq r8,0x38af082d2c7d    ;; object: 0x38af082d2c7d 
    0x38af000851d8    f8  4489470b       movl [rdi+0xb],r8
    0x38af000851dc    fc  49c7c10000fcff REX.W movq r9,0xfffc0000
    0x38af000851e3   103  4c23cf         REX.W andq r9,rdi
    0x38af000851e6   106  41f6410804     testb [r9+0x8],0x4
    0x38af000851eb   10b  0f85cc010000   jnz 0x38af000853bd  
    0x38af000851f1   111  4c8bc9         REX.W movq r9,rcx
可以发现，这里直接用数组下标寻址的方式进行了属性的赋值和访问
     movl [rdi+0xf],rax
     movl [rdi+0xb],r8
####  Inline Caches (ICs)
如果要多次访问字典类型的数据，那么查找键的时间耗费是比较大的，因此v8引擎使用了一种叫`Inline Caches
(ICs)`的机制来缓解这种查找的时间耗费。假如有如下函数
    function (obj) {
        return obj.a;
    }
如果要调用该函数对同一个对象进行多次访问，那么可以将该函数里的访问过程进行优化，即不必再从查找键开始，将该键对应的数据缓存下来，这样下次访问时先校验，然后直接从缓存中加载。如下，我们对同一个对象进行了多次访问
    var obj = {a:"haivk",b:"hai"};
    function  opt(o){
        return o.b;
    }
    for(var i = 0; i 
    0x12f100084fe6   126  49ba00b91ce0007f0000 REX.W movq r10,0x7f00e01cb900  (LoadGlobalICTrampoline)    ;; off heap target
    0x12f100084ff0   130  41ffd2         call r10
    0x12f100084ff3   133  49c7c503000000 REX.W movq r13,0x3
    0x12f100084ffa   13a  e841f00b00     call 0x12f100144040     ;; deopt-soft deoptimization bailout
可以看到最后一个print调用时，直接使用`LoadGlobalICTrampoline`函数从缓存中加载了数据，而不必再从对象中查找。  
与`LoadGlobalICTrampoline`对应函数是`StoreGlobalICTrampoline`，可以将数据保存到缓存中。
## 0x02 漏洞分析
###  patch点分析
patch文件如下
    diff --git a/src/compiler/access-info.cc b/src/compiler/access-info.cc
    index 0744138..1df06df 100644
    --- a/src/compiler/access-info.cc
    +++ b/src/compiler/access-info.cc
    @@ -370,9 +370,11 @@ PropertyAccessInfo AccessInfoFactory::ComputeDataFieldAccessInfo(
           // The field type was cleared by the GC, so we don't know anything
           // about the contents now.
         }
    +#if 0
         unrecorded_dependencies.push_back(
             dependencies()->FieldRepresentationDependencyOffTheRecord(map_ref,
                                                                       descriptor));
    +#endif
         if (descriptors_field_type->IsClass()) {
           // Remember the field map, and try to infer a useful type.
           Handle map(descriptors_field_type->AsClass(), isolate());
    @@ -384,15 +386,17 @@ PropertyAccessInfo AccessInfoFactory::ComputeDataFieldAccessInfo(
       }
       // TODO(turbofan): We may want to do this only depending on the use
       // of the access info.
    +#if 0
       unrecorded_dependencies.push_back(
           dependencies()->FieldTypeDependencyOffTheRecord(map_ref, descriptor));
    +#endif
       PropertyConstness constness;
       if (details.IsReadOnly() && !details.IsConfigurable()) {
         constness = PropertyConstness::kConst;
       } else {
         map_ref.SerializeOwnDescriptor(descriptor);
    -    constness = dependencies()->DependOnFieldConstness(map_ref, descriptor);
    +    constness = PropertyConstness::kConst;
       }
       Handle field_owner_map(map->FindFieldOwner(isolate(), descriptor),
                                   isolate());
可以看到，patch文件通过`#if`和`#endif`将两处`unrecorded_dependencies.push_back(dependencies()->FieldTypeDependencyOffTheRecord(map_ref,
descriptor));`给注释掉了，并且`constness =
PropertyConstness::kConst;`将`constness`设为了`PropertyConstness::kConst`  
从源码中的注释
> // Store is not safe if the field type was cleared.
我们可以知道，字典对象的`property`的类型是很重要的，并且在程序中会被保存到`unrecorded_dependencies`容器里，而patch正是patch掉了这个操作，除了`Double`和`SMI`类型的对象，其他的对象的类型都不会被push到`unrecorded_dependencies`，`unrecorded_dependencies`最终包装给一个对象，然后返回
          return PropertyAccessInfo::DataConstant(
              zone(), receiver_map, std::move(unrecorded_dependencies), field_index,
              details_representation, field_type, field_owner_map, field_map,
              holder);
为了方便追踪，我们用gdb动态调试，设置断点，然后运行文章开始的示例脚本
    b AccessInfoFactory::ComputeDataFieldAccessInfo
此时，`unrecorded_dependencies`是空的
然后return到`js-heap-broker.cc`里的`GetPropertyAccessInfo`函数里
接着继续最终,来到`js-native-context-specialization.cc`里的`FilterMapsAndGetPropertyAccessInfos`函数
然后来到`js-native-context-specialization.cc`里的`ReduceNamedAccess`，发现这里有引用到`dependencies()`，打印其值，是一个容器，内容为空
到这里，发现使用`access_info.receiver_maps`来`BuildCheckMaps`
跟进`BuildCheckMaps`函数，来到`property-access-builder.cc`里
    void PropertyAccessBuilder::BuildCheckMaps(
        Node* receiver, Node** effect, Node* control,
        ZoneVector> const& receiver_maps) {
      HeapObjectMatcher m(receiver);
      if (m.HasValue()) {
        MapRef receiver_map = m.Ref(broker()).map();
        if (receiver_map.is_stable()) {
          for (Handle map : receiver_maps) {
            if (MapRef(broker(), map).equals(receiver_map)) {
              dependencies()->DependOnStableMap(receiver_map);
              return;
            }
          }
        }
      }
    .........................................................
跟进`DependOnStableMap(receiver_map);`函数
       387 void CompilationDependencies::DependOnStableMap(const MapRef& map) {
       388   if (map.CanTransition()) {
     ► 389     RecordDependency(new (zone_) StableMapDependency(map));
       390   } else {
       391     DCHECK(map.is_stable());
       392   }
       393 }
如果`map.CanTransition()`成立，就会修改`property`的类型  
继续跟踪，来到`graph-reducer.cc`里的`GraphReducer::Reduce`函数
       85   auto skip = reducers_.end();
       86   for (auto i = reducers_.begin(); i != reducers_.end();) {
       87     if (i != skip) {
       88       tick_counter_->DoTick();
       89       Reduction reduction = (*i)->Reduce(node);
     ► 90       if (!reduction.Changed()) {
       91         // No change from this reducer.
       92       } else if (reduction.replacement() == node) {
       93         // {replacement} == {node} represents an in-place reduction. Rerun
       94         // all the other reducers for this node, as now there may be more
       95         // opportunities for reduction.
###  poc构造
从上述的分析可知，如果`DependOnStableMap(receiver_map);`里的`map.CanTransition()`不成立，那么`property`的类型就不会被改变，由于`const
MapRef&
map`参数来自`access_info.receiver_maps()`，而`access_info`里的部分数据来自`unrecorded_dependencies`，而由于patch的原因，某些类型不会加入到`unrecorded_dependencies`了，那么意味着一些原本该进行类型转换的操作将不会进行。  
首先构造
    var obj = {a:"haivk",b:"hai"};
    function  opt(o){
        return o.a;
    }
    for(var i = 0; i 
    0x23565c142c42   122  4151           push r9
    0x23565c142c44   124  49b931024ab11e080000 REX.W movq r9,0x81eb14a0231    ;; object: 0x081eb14a0231 
    0x23565c142c4e   12e  4151           push r9
    0x23565c142c50   130  48bbb00d6ce27c7f0000 REX.W movq rbx,0x7f7ce26c0db0    ;; external reference (Runtime::SetNamedProperty)
    0x23565c142c5a   13a  b803000000     movl rax,0x3
    0x23565c142c5f   13f  488b75a8       REX.W movq rsi,[rbp-0x58]
    0x23565c142c63   143  49bac0a02fe37c7f0000 REX.W movq r10,0x7f7ce32fa0c0  (CEntry_Return1_DontSaveFPRegs_ArgvOnStack_NoBuiltinExit)    ;; off heap target
    0x23565c142c6d   14d  41ffd2         call r10
主要是在执行`obj.a =
1.1;`的时候没有使用优化的方法，而是使用`SetNamedProperty`的普通js方法来进行赋值，那么就不会触发到漏洞点。那么，我们在`{}`里再包含一个`{}`试试
    var obj = {a:{b:"haivk"}};