placement text as the second parameter. The returm value is a new string with the
replacements applied If no regex matchescan be found, thengsub() retumsthe original
string.
gsub() does not modify the string on which you callthe method. If you want the original
string to be modified, call gsub! () instead. If no regex matches can be found, gsub!()
returms nil. Otherwise, it returms the string you called it on, with the replacements
applied.
See Also
"Search and Replace with Regular Expressions" in Chapter 1 describes the various
replacement text flavors.
Recipe 3.15 shows code to make a search-and-replace reinsert parts of the text matched
by the regular expression.
3.14 Replace AllMatches | 191
---
## Page 208
Recipe 3.16 shows code to search and replace with replacements generated in code for
each regex match instead of using a fixed replacement text for all matches.
3.15ReplaceMatchesReusingPartsoftheMatch
Problem
You want to run a search-and-replace that reinserts parts of the regex march back into
the replacement. The parts you want to reinsert have been isolated in your regular
expression using capturing groups, as described in Recipe 2.9.
For example, you want to match pairs of words delimited by an equals sign, and swap
those words in the replacement.
Solution
C#
You can use the static call when you process only a small umber of strings with the
same regular expression:
string resultString = Regex.Replace (subjectString, @*(\w+)=(\w+)°,
"$2=$1°);
Construct a Regex object if you want to use the same regular expression with a large
number of strings:
Regex regexObj = new Regex(@*(\w+)=(\+)°);
(,=s.xsns)aedsaxx = ssx x
VB.NET
You can use the static call when you process only a small number of strings with the
same regular expression:
Dim ResultString = Regex.Replace(SubjectString, "(\w+)=(\s+)°, "$2=$1*)
| e qa uossaudxo nau sues aq ssn  uem no  3oqo xaa e 1nsuo
number of strings:
Dim RegexObj As New Regex("(\w+)=(\w+))
Dim ResultString = Regex0bj.Replace(SubjectString, “$2=$1*)
Java
You can call String,replaceA11() when you process only one string with the same
regular expression:
($=s。 (+\\)=(+\))vaedaxuxs>aqns = Suxsnsax Sux
192 | Chapter3: Programming with RegularExpressions
---
## Page 209
Construct a Matcher object if you want to use the same regular expression with a large
number of strings:
Pattern regex = Pattern.compile(“(\\w+)=(\\w+)");
(=aedaxxauexalax = rssx xs
JavaScript
result = subject,replace(/(\a+)=( matches the pair of words and captures each word
into its own capruring group. The word before the equals sign is captured by the first
group, and the word after the sign by the second group.
For the replacement, you need to specify that you want to use the text matched by the
second capturing group, followed by an equals sign, followed by the text matched by
the first capturing group. You can do this with special placeholders in the replacement
text. The replacement text syntax varies widely berween different programming lan-
guages. “Search and Replace with Regular Expressions" in Chapter 1 describes the
replacement text flavors, and Recipe 2.21 explains how to reference capturing groups
in the replacement text.
3.15 Replace Matches Reusing Parts of the Match I193
---
## Page 210
.NET
In .NET, you can use the same Regex.Replace() method described in the previous
recipe, using a string as the replacement. The syntax for ading backreferences to the
replacement text follows the .NET replacement text flavor Recipe 2.21.
Java
In Java, you can use the same replaceFirst() and replaceA11() methods described in
the previous recipe. The syntax for adding backreferences to the replacement text fol-
lows the Java replacement text flavor described in this book.
JavaScript
In JavaScript, you can use the same string.replace() method described in the previous
recipe. The syntax for adding backreferences to the replacement text follows the
JavaScript replacement text flavor described in this book.
PHP
In PHP, you can use the same preg_replace() function described in the previous recipe.
The syntax for adding backreferences to the replacement text follows the PHP replace-
ment text flavor described in this book.
Perl
In Perl, the replace part in s/regex/replace/ is simply interpreted as a double-quoted
string. You can use the special variables $8, $1, $2, etc., explained in Recipe 3.7 and
Recipe 3.9 in the replacement string. The variables are set right after the regex match
is found, before it is replaced. You can also use these variables in all other Perl code.
Their values persist until you tell Perl to find another regex match.
All the other programming languages in this book provide a function call that takes the
replacement text as a string. The function call parses the string to process
backreferences such as $1 or 1. But outside the replacement text string, $1 has no
meaning with these languages.
Python
In Python, you can use the same sub() function described in the previous recipe. The
syntax for adding backreferences to the replacement text follows the Python replace-
ment text flavor described in this book.
Ruby
In Ruby, you can use the same String-gsub() method described in the previous recipe.
The syntax for ading backreferences to the replacement text follows the Ruby re-
placement text flavor described in this book.
194 | Chapter 3: Programming with RegularExpressons
---
## Page 211
You cannot interpolate variables such as $1 in the replacement text. That’s because
Ruby does variable interpolation before the gsub() call is executed. Before the call,
gsub)=(+\<>）
al e uia uoissaudxa 1eqnau aues au asn on suem no. j! iafqo xaag t ionsuo
number of strings:
Regex regex0bj = new Regex(@*(?\w+)=(?\w+)°);
({a]={ux}s uxsas)aedagoxaax = uxsnsx ux5
VB.NET
You can use the static call when you process only a small number of strings with the
same regular expression:
Dim ResultString = Regex.Replace(SubjectString,
({}={x}。（+\）=(+\<>）
s8e e u uossaudxa reqnau aues 3u asn o1 suem no. g! axafqo xaag e 1onsuo
number of strings:
Dim Regex0bj As New Regex("(?\w+)=(?\a+)")
Java 7
Java 7 adds support for named caprure to the regular expression syntax and for named
backreferences to the replacement text syntax.
3.15 Replace Matches Reusing Parts ofthe Match I 195
---
## Page 212
ses a um Sus ao Auo ssaod no uqm (taoedaasuas Io tes no
regular expression:
"(?\{a+)=(?\\w+)",*${right}=${left}");
aue e uim uoissaudxa 1eqnsaa atues ati asn on suem nof j! ioa(qo 1aupen e ionusuo
number of strings:
Pattern regex = Pattern,compile(“(?\\w+)=(?\\w+)");
()=x),xxxx =sx x
XRegExp
The XRegExp.replace() method extends JavaScript’s replacement text syntax with
named backreferences.
var re = XRegExp(°(?\\{a+)=(?\\w+)", “g");
var result = XRegExp.replace(subject, re, *${right}=${1eft}°);
PHP
$result = preg_replace(′/(?p\n+)=(?P\a+)/′,
$2=$1',$subject);
PHP's preg functions use the PCRE library, which supports named capture. The
preg_match() and preg_natch_al1() functions ad named capruring groups to the array
with match results.Unfortunately, preg_replace() does notprovidea way touse named
backreferences in the replacement text. If your regex has named capruring groups,
count both the named and numbered capturing groups from left to right to determine
the backreference number of each group. Use those numbers in the replacement text.
Perl
$subject =~ s/(?\w+)=(?\w+)/s+{right)=s+{1eft)/g;
Perl supports named capturing groups starting with version 5.10. The %+ hash stores
the text matched by all named capturing groups in the regular expression last used.
You can use this hash in the replacement text string, as well as anywhere else.
Python
If you have only a few strings to process, you can use the global function:
\=\x (+\d)=(+\)x)qnsx =nsax
subject)
To use the same regex repeatedly, use a compiled object:
reobj = re.compile(r*(?P\w+)=(?P\w+)")
result = reobj.sub(r*\g=\g*, subject)
196 | Chapter3: Programming with RegularExpressions
---
## Page 213
Ruby
result = subject-gsub(/(?\w+)=(?\w+)/, *\k=\k′)
See Also
"Search and Replace with Regular Expressions" in Chapter 1 describes the replacement
text flavors.
Recipe 2.21 explains how to reference capruring groups in the replacement text.
3.16ReplaceMatcheswithReplacementsGeneratedinCode
Problem
You want to replace all matches of a regular expression with a new string that you build
up in procedural code. You want to be able to replace each match with a different string,
based on the text that was actually matched.
For example, suppose you want to replace all numbers in a string with the number
multiplied by rwo.
Solution
C#
You can use the static call when you process only a small number of strings with the
same regular expression:
string resultString = Regex,Replace(subjectString, @*\d+”,
new MatchEvaluator(ComputeReplacenent));
al e uia uoissaudxa 1eqnau aues au asn oi suem no. j! 1oafqo xaag t ionsuo
number of strings:
Regex regex0bj = new Regex(@*\d+");
new MatchEvaluator(ComputeReplacenent));
Both code snippets call the function ComputeReplacement. You should add this method
to the class in which you're implementing this solution:
public String ConputeReplacenent(Match matchResult) {
int twiceasmuch = int.Parse(matchResult.Value) * 2;
return twiceasnuch,ToString();
3.16 Replace Matches with Replacements Generated in Code | 197
---
## Page 214
VB.NET
You can use the static call when you process only a small number of strings with the
same regular expression:
Dim MyMatchEvaluator As New MatchEvaluator(AddressOf ConputeReplacenent)
(xosenengupen ,+p *usnaqns)aoetdag*xalag = usttnsag wo
al e uia uoissaudxa 1eqnau aues au asn oi suem no. j! 1oafqo xaag t ionsuo
number of strings:
Dim RegexObj As New Regex("\d+°)
Dim MyMatchEvaluator As New MatchEvaluator(AddressOf ConputeReplacenent)
Dim ResultString = RegexObj Replace (SubjectString, MyMatchEvaluator)
Both code snippets call the function ComputeReplacement. You should add this method
to the class in which you’re implementing this solution:
Public Function ComputeReplacesent(ByVal MatchResult As Match) As String
Din TwiceAsMuch = Int,Parse(MatchResult.Value) * 2;
Return TwiceAsMuch,ToString();
End Function
Java
StringBuffer resultString = ne StringBuffer();
Pattern regex = Pattern.compile("\\d+*);
Matcher regexMatcher = regex,matcher(subjectString);
while (regexMatcher.find()){
regexMatcher appendTail(resultString);
JavaScript
var result = subject.replace(/\d+/g, function(match) {
return match * 2;
});
PHP
Using a declared callback function:
$result = preg_replace_callback(′/\d+/′, ‘compute_replacement′, $subject);
function conpute_replacement($groups)(
return $groups[0] * 2;
Using an anonymous callback function:
198 | Chapter 3: Programming with RegularExpressions
---
## Page 215
$result = preg_replace_callback(
'/\d+/',
create_function(
‘$groups′,
return $groups[o] * 2;'
），
$subject
);
Perl
$subject =~ s/√d+/s& * 2/eg;
Python
If you have only a few strings to process, you can use the global function:
result = re.sub(x"\d+", computereplacenent, subject)
To use the same regex repeatedly, use a compiled object:
reobj = re.compile(r*\d+")
result = reobj.sub(conputereplacenent, subject)
declared before you can pass it to sub().
Both code snippets call the function computereplacement. This function needs to be
def conputereplacenent(matchobj) :
return str(int(matchobj ·group() * 2)
Ruby
result = subject-gsub(/\d+/) <|match|
Integer(match) * 2
Discussion
When using a string as the replacement text, you can do only basic text substitution.
To replace each match with something totally different that varies along with the match
being replaced, you need to create the replacement text in your own code.
C#
Recipe 3.14 discusses the various ways in which you can call the Regex,Replace()
method, passing a string as the replacement text. When using a static call, the replace-
ment is the third parameter, after the subject and the regular expression. If you passed
the regular expression to the Regex() constructor, you can call Replace() on that object
with the replacement as the second parameter.
3.16 Replace Matches with Replacements Generated in Code | 199
---
## Page 216
Instead of passing a string as the second or third parameter, you can pass a
MatchEvaluator delegate. This delegate is a reference to a member function that you
add to the class where you're doing the search-and-replace. To create the delegate, use
the new keyword to call the MatchEvaluator() constructor. Pass your member function
as the only parameter to MatchEvaluator().
The function you want to use for the delegate should return a string and take one
parameter of class Systen, Text RegularExpressions.Match. This is the same Match class
returmed by the Regex.Match() member used in nearly all the previous recipes in this