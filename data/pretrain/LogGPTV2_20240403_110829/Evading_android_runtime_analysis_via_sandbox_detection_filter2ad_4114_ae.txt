# 优化后的文本

## 表7：不同Android沙箱系统中传感器数量的评估

与表5相比，这些沙箱系统中的传感器数量非常少。

### 5.3 硬件和软件组件评估

所测试的沙箱系统均未尝试模拟硬件传感器。如表7所示，只有CopperDroid处理了加速度计事件，而其他沙箱系统则未处理任何类型的传感器。同样，这些沙箱报告的电池电量（0）和标度（100）值与模拟器中使用的值完全相同且不变。

### 5.4 系统设计评估

我们仅对潜在敏感项（如通讯录联系人和通话记录）进行了粗略的数据测量。由于我们的测试应用程序广泛分布于公共沙箱和Google Play商店中，我们希望降低意外接收到任何私人信息的风险。因此，我们只收集了联系人、通话记录和已安装应用程序的总数。即便如此，这些总数足以判断设备是否实际在使用中，因为沙箱报告的数值非常低。随着时间的推移，可以开发出更好的启发式方法。Andrubis报告了63个已安装的应用程序，Foresafe报告了46个应用，但这两个沙箱都没有安装诸如Google Talk、YouTube或Google Service Framework等Google服务应用。Andrubis显示有5个联系人和3条通话记录，这表明Andrubis在设计时考虑到了使其看起来像是一个正在使用的设备。标准模拟器没有联系人和通话记录，这也是Foresafe所显示的情况。

除了沙箱报告中显示的持续时间外，我们还试图测量执行时间。通过创建一个将系统时间戳（`System.currentTimeMillis()`）嵌入到从沙箱发送的重复UDP数据包中的应用程序，我们可以通过比较接收的最大和最小值来近似计算执行时间。例如，Foresafe可能报告“处理时间”为106秒，但我们观察到的时间戳值表明执行时间为68秒。类似地，当Andrubis报告分析时间为306秒时，我们观察到的时间是248秒；当CopperDroid报告731秒时，我们观察到的时间是399秒。每个沙箱报告的额外时间可能包括除执行应用程序之外的其他操作。

## 6. 讨论

本文提出的一些仿真检测方法相对容易缓解。例如，可以为表1中列出的许多API方法返回意外值。一些安全工具，如DroidBox[4]，已经开始采取这种措施。然而，DroidBox并未显著提高难度，因为新值被设置为已知常量。例如，TelephonyManager设备标识符始终为357242043237517，订阅者标识符始终为310005123456789[5]。当其他安全工具使用DroidBox等软件包时，它们会因DroidBox的检测而面临规避风险。这种情况适用于Andrubis。沙箱系统的设计者必须仔细考虑如何缓解这些检测。如第4节所示，反射和运行时执行可用于以不同方式观察许多系统值，良好的缓解措施应处理所有这些情况。

也许最容易应对的是依赖设备高级状态的那些检测，例如联系人数量和通话记录。通过在沙箱中填充大量的通讯录，可以使攻击者更难进行此类检测。然而，我们提出的其他检测机制要难得多。基于检测虚拟化本身的技术，如通过时间测量的方法，对于移动沙箱系统设计者来说是一个难以克服的障碍，因为它们本质上要求重新设计模拟器以获得与实际硬件相似的时间测量结果。虽然有可能减少我们通过测量观察到的巨大差异，但可以想象下一步将是构建基于各种基准测试（CPU、图形等）的硬件配置文件，而不是我们所依赖的简单Pi计算。我们推测，利用这种方法可能会精确定位所使用的硬件，并当然可以检测到任何虚拟化。

## 7. 结论

与许多恶意软件相关技术一样，动态分析系统的检测是一场军备竞赛的一部分。模拟器检测在这里比在PC上更具适用性的主要原因在于，通用计算机的虚拟化实用案例已经发展起来，而移动设备的虚拟化尚未实现。虚拟化在消费者移动平台上并不广泛可用。因此，我们认为面向移动设备的检测技术将比PC上的相应技术具有更长的使用寿命。

我们提出了多种针对Android设备的模拟器和动态分析检测方法。这些检测基于观察到的硬件、软件和设备使用方面的差异。从实现角度来看，这些检测技术几乎不需要超出典型应用程序通常授予的权限。这些检测可以显著提高动态分析系统设计者的门槛，因为他们必须普遍缓解所有检测。其中，硬件差异似乎是最难以解决的问题：一个简单的帧率评估立即使我们识别出恶意软件沙箱，而无需高级权限。同样，加速度计值也会提供明确的线索，表明恶意软件正在沙箱环境中运行。是否可以在实践中隐藏这些硬件属性仍然是一个开放问题，我们希望通过本文推动相关研究，以防止恶意软件沙箱被轻易检测和规避。

## 致谢

本研究部分由国家科学基金会ITR奖CCF-0424422（TRUST）资助。

## 参考文献

[1] AMAT: Android Malware Analysis Toolkit. http://sourceforge.net/projects/amatlinux/.
[2] Andrubis. http://anubis.iseclab.org/.
[3] CopperDroid. http://copperdroid.isg.rhul.ac.uk/copperdroid/.
[4] DroidBox. https://code.google.com/p/droidbox/.
[5] Droidbox device identifier patch. https://code.google.com/p/droidbox/source/browse/trunk/droidbox23/framework_base.patch?r=82.
[6] Foresafe. http://www.foresafe.com/scan.
[7] mobile-sandbox. http://mobilesandbox.org/.
[8] Monitoring the Battery Level and Charging State | Android Developers. http://developer.android.com/training/monitoring-device-state/battery-monitoring.html.
[9] North American Numbering Plan Administration search. www.nanpa.com/enas/area_code_query.do.
[10] SandDroid. http://sanddroid.xjtu.edu.cn/.
[11] Using the Android Emulator | Android Developers. http://developer.android.com/tools/devices/emulator.html.
[12] U. Bayer, P. Comparetti, C. Hlauschek, C. Kruegel, and E. Kirda. Scalable, behavior-based malware clustering. In NDSS, 2009.
[13] T. Blasing, L. Batyuk, A. Schmidt, S. Camtepe, and S. Albayrak. An android application sandbox system for suspicious software detection. In MALWARE’10, 2010.
[14] D. J. Chaboya, R. A. Raines, R. O. Baldwin, and B. E. Mullins. Network intrusion detection: automated and manual methods prone to attack and evasion. Security & Privacy, IEEE, 4(6):36–43, 2006.
[15] X. Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario. Towards an understanding of anti-virtualization and anti-debugging behavior in modern malware. In Dependable Systems and Networks With FTCS and DCC, 2008. IEEE International Conference on, pages 177–186, 2008.
[16] H. Dreger, A. Feldmann, V. Paxson, and R. Sommer. Operational experiences with high-volume network intrusion detection. In Proc. CCS, pages 2–11. ACM, 2004.
[17] M. F. and P. Schulz. Detecting android sandboxes, Aug 2012. https://www.dexlabs.org/blog/btdetect.
[18] A. Felt, M. Finifter, E. Chin, S. Hanna, and D. Wagner. A survey of mobile malware in the wild. In Proc. SPSM, pages 3–14. ACM, 2011.
[19] P. Ferrie. Attacks on more virtual machine emulators. Symantec Technology Exchange, 2007.
[20] P. Fogla and W. Lee. Evading network anomaly detection systems: formal reasoning and practical techniques. In Proc. CCS, pages 59–68. ACM, 2006.
[21] M. Handley, V. Paxson, and C. Kreibich. Network intrusion detection: Evasion, traffic normalization, and end-to-end protocol semantics. In Proc. USENIX Security, 2001.
[22] T. Holz and F. Raynal. Detecting honeypots and other suspicious environments. In Information Assurance Workshop, 2005. IAW’05. Proceedings from the Sixth Annual IEEE SMC, pages 29–36. IEEE, 2005.
[23] P. G. Kelley, S. Consolvo, L. F. Cranor, J. Jung, N. Sadeh, and D. Wetherall. A conundrum of permissions: Installing applications on an android smartphone. In USEC’12, pages 68–79. Springer, 2012.
[24] B. Lau and V. Svajcer. Measuring virtual machine detection in malware using dsd tracer. Journal in Computer Virology, 6(3):181–195, 2010.
[25] H. Lockheimer. Android and Security, Feb 2012. http://googlemobile.blogspot.com/2012/02/android-and-security.html.
[26] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In Security and Privacy, 2007. SP’07. IEEE Symposium on, 2007.
[27] D. Mutz, G. Vigna, and R. Kemmerer. An experience developing an ids stimulator for the black-box testing of network intrusion detection systems. In Computer Security Applications Conference, 2003. Proceedings. 19th Annual, pages 374–383. IEEE, 2003.
[28] J. Oberheide and C. Miller. Dissecting the android bouncer. SummerCon2012, New York, 2012.
[29] T. Ooura. Improvement of the pi calculation algorithm and implementation of fast multiple precision computation. Transactions-Japan Society for Industrial and Applied Mathematics, 9(4):165–172, 1999.
[30] R. Paleari, L. Martignoni, G. F. Roglia, and D. Bruschi. A fistful of red-pills: How to automatically generate procedures to detect CPU emulators. In Proc. WOOT, volume 41, page 86. USENIX, 2009.
[31] N. J. Percoco and S. Schulte. Adventures in bouncerland. Black Hat USA, 2012.
[32] T. H. Ptacek and T. N. Newsham. Insertion, evasion, and denial of service: Eluding network intrusion detection. Technical report, DTIC Document, 1998.
[33] T. Raffetseder, C. Krügel, and E. Kirda. Detecting system emulators. In Information Security. Springer, 2007.
[34] J. Rutkowska. Red pill... or how to detect VMM using (almost) one CPU instruction. Invisible Things, 2004.
[35] T. Strazzere. Dex education 201 anti-emulation, Sept 2013. http://hitcon.org/2013/download/Tim%20Strazzere\%20-\%20DexEducation.pdf.
[36] T. Vidas and N. Christin. Sweetening android lemon markets: measuring and combating malware in application marketplaces. In Proc. 3rd CODASPY, pages 197–208. ACM, 2013.
[37] T. Vidas, D. Votipka, and N. Christin. All your droid are belong to us: A survey of current android attacks. In Proc. WOOT. USENIX, 2011.
[38] T. Vidas, C. Zhang, and N. Christin. Toward a general collection methodology for android devices. DFRWS’11, 2011.
[39] C. Willems, T. Holz, and F. Freiling. Toward automated dynamic malware analysis using cwsandbox. Security & Privacy, IEEE, 5(2):32–39, 2007.
[40] Y. Zhou and X. Jiang. Dissecting android malware: Characterization and evolution. In Proc. IEEE Symp. on Security and Privacy, 2012.
[41] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, you, get off of my market: Detecting malicious apps in official and alternative android markets. In Proc. NDSS, 2012.

## 附录

图11：此代码清单使用反射（顶部）和运行时执行（底部）来获取运行时SystemProperties信息。在这两种情况下，信息都会记录到系统日志中。出于检测目的，这些值将根据前面章节中介绍的检测技术进行评估。此代码清单以完全不同于前文所述的方法获取信息，而不使用官方API，也不需要额外的权限。该代码获取电池电量、构建配置、网络IP设置以及蜂窝提供商MCC和MNC的值。

```java
private void logRuntimeSystemPropsReflect() {
    try {
        ClassLoader cl = theActivity.getBaseContext().getClassLoader();
        @SuppressWarnings("rawtypes")
        Class[] paramTypes = {String.class};
        Method get = SystemProperties.getMethod("get", paramTypes);
        Object[] params = {s};
        ret = (String) get.invoke(SystemProperties, params);
        Log.e("reflect." + s, getPropViaReflect(s));
        logAprop("ro.secure");
        logAprop("ro.product.name");
        logAprop("ro.debuggable");
        logAprop("status.battery.level_raw");
        logAprop("ro.build.host");
        logAprop("ro.build.tags");
        logAprop("net.gprs.local-ip");
        logAprop("net.eth0.gw");
        logAprop("net.dns1");
        logAprop("gsm.operator.numeric");
        logAprop("ro.kernel.qemu");
        logAprop("ro.kernel.qemu.gles");
        logAprop("ro.kernel.android.qemud");
    } catch (Exception err) {
        err.printStackTrace();
    }
}

private String getPropViaReflect(String s) {
    try {
        ClassLoader cl = theActivity.getBaseContext().getClassLoader();
        Class<?> SystemProperties = cl.loadClass("android.os.SystemProperties");
        @SuppressWarnings("rawtypes")
        Class[] paramTypes = {String.class};
        Method get = SystemProperties.getMethod("get", paramTypes);
        Object[] params = {s};
        return (String) get.invoke(SystemProperties, params);
    } catch (Exception e) {
        e.printStackTrace();
        return "";
    }
}

private void logRuntimeSystemPropsExec() {
    try {
        Process p = Runtime.getRuntime().exec("getprop");
        BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
        String line;
        while ((line = input.readLine()) != null) {
            int split = line.indexOf("[");
            String k = line.substring(1, split);
            String v = line.substring(split + 4, line.length() - 1);
            Log.e("runprop." + k, v);
        }
        input.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
}
```

此代码示例展示了如何通过反射和运行时执行来获取系统属性信息，并将其记录到系统日志中。这些信息用于检测目的，并根据前面章节中介绍的检测技术进行评估。