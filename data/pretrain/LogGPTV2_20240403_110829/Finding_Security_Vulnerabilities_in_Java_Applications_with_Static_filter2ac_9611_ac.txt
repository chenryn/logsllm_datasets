propagation queries from PQL into Datalog is straight-
forward. PQL is a general query language capable of ex-
pressing a variety of questions about program execution.
However, we only use a limited form of PQL queries to
formulate tainted object propagation problems.
Due to space limitations, we summarize only the most
important features of PQL here; interested readers are re-
ferred to [35] for a detailed description. A PQL query is
a pattern describing a sequence of dynamic events that
involves variables referring to dynamic object instances.
The uses clause declares all object variables the query
refers to. The matches clause speciﬁes the sequence of
events on object variables that must occur for a match.
Finally, the return clause speciﬁes the objects returned
by the query whenever a set of object instances partici-
pating in the events in the matches clause is found.
Source-sink object pairs corresponding to static se-
curity violations for a given tainted object propagation
problem are computed by query main in Figure 3. This
query uses auxiliary queries source and sink used to
deﬁne source and sink objects as well as query derived∗
shown in Figure 4 that captures a transitive derivation re-
lation. Object sourceObj in main is returned by sub-
query derived*(object Object x)
returns
object Object y;
uses
matches {
object Object temp;
:= x |
y
temp := derived(x); y := derived*(temp);
}
Figure 4: Transitive derived relation derived?.
278
14th USENIX Security Symposium
USENIX Association
query source()
returns
object Object
uses
sourceObj;
object String[]
object HttpServletRequest req;
sourceArray;
matches {
= req.getParameter(_)
= req.getHeader(_)
= req.getParameterValues(_);
= sourceArray[]
sinkObj;
stmt;
con;
sourceObj
| sourceObj
| sourceArray
sourceObj
| ...
}
query sink()
returns
object Object
uses
object java.sql.Statement
object java.sql.Connection
matches {
stmt.executeQuery(sinkObj)
| stmt.execute(sinkObj)
| con.prepareStatement(sinkObj)
| ...
}
query derived(object Object x)
returns
matches {
object Object y;
y.append(x)
| y = _.append(x)
| y = new String(x)
| y = new StringBuffer(x)
| y = x.toString()
| y = x.substring(_ ,_)
| y = x.toString(_)
| ...
}
Figure 5: PQL sub-queries for ﬁnding SQL injections.
query source. Object sinkObj is the result of sub-query
derived? with sourceObj used as a sub-query param-
eter and is also the result of sub-query sink. Therefore,
sinkObj returned by query main matches all tainted ob-
jects that are also sink objects.
Semicolons are used in PQL to indicate a sequence of
events that must occur in order. Sub-query derived∗ de-
ﬁnes a transitive derived relation: object y is transitively
derived from object x by applying sub-query derived
zero or more times. This query takes advantage of PQL’s
sub-query mechanism to deﬁne a transitive closure re-
cursively. Sub-queries source, sink, and derived are
speciﬁc to a particular tainted object propagation prob-
lem, as shown in the example below.
Example 6.
This example describes sub-queries
source, sink, and derived shown in Figure 5 that
can be used to match SQL injections, such as the one
described in Example 1. Usually these sub-queries are
structured as a series of alternatives separated by |. The
wildcard character _ is used instead of a variable name if
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
class Vector {
Object[] table = new Object[1024];
void add(Object value){
= ...;
int i
// optional resizing ...
table[i] = value;
}
Object getFirst(){
Object value = table[0];
return value;
}
}
String s1 = "...";
Vector v1 =
v1.add(s1);
Vector v2 =
new Vector();
String s2 = v2.getFirst();
new Vector();
Figure 6: Typical container deﬁnition and usage.
the identity of the object to be matched is irrelevant.
is
structured
as
an
Query
source
sourceObj can be returned from a call
alterna-
tion:
to
req.getParameter or req.getHeader for an object
req of type HttpServletRequest; sourceObj may
also be obtained by indexing into an array returned by
a call to req.getParameterValues, etc. Query sink
deﬁnes sink objects used as parameters of sink methods
such as java.sql.Connection.executeQuery, etc.
Query derived determines when data propagates from
object x to object y.
It consists of the ways in which
Java strings can be derived from one another, including
string concatenation, substring computation, etc. 2
As can be seen from this example, sub-queries
source, sink, and derived map to source, sink, and
derivation descriptors for the tainted object propagation
problem. However, instead of descriptor notation for
method parameters and return values, natural Java-like
method invocation syntax is used.
4 Precision Improvements
This section describes improvements we made to the
object-naming scheme used in the original points-to an-
alysis [55]. These improvements greatly increase the
precision of the points-to results and reduce the number
of false positives produced by our analysis.
4.1 Handling of Containers
Containers such as hash maps, vectors, lists, and oth-
ers are a common source of imprecision in the original
pointer analysis algorithm. The imprecision is due to the
fact that objects are often stored in a data structure al-
located inside the container class deﬁnition. As a result,
the analysis cannot statically distinguish between objects
stored in different containers.
Example 7. The abbreviated vector class in Figure 6
allocates an array called table on line 2 and vectors v1
and v2 share that array. As a result, the original analysis
USENIX Association
14th USENIX Security Symposium
279
Figure 7: Tracking a SQL injection vulnerability in the Eclipse GUI plugin. Objects involved in the vulnerability trace are shown at the bottom.
will conclude that the String object referred to by s2
retrieved from vector v2 may be the same as the String
object s1 deposited in vector v1. 2
To alleviate this problem and improve the precision of
the results, we create a new object name for the inter-
nally allocated data structure for every allocation site of
the external container. This new name is associated with
the allocation site of the underlying container object. As
a result, the type of imprecision described above is elim-
inated and objects deposited in a container can only be
retrieved from a container created at the same allocation
site.
In our implementation, we have applied this im-
proved object naming to standard Java container classes
including HashMap, HashTable, and LinkedList.
4.2 Handling of String Routines
Another set of methods that requires better object
naming is Java string manipulation routines. Methods
such as String.toLowerCase() allocate String ob-
jects that are subsequently returned. With the default
object-naming scheme, all the allocated strings are con-
sidered tainted if such a method is ever invoked on a
tainted string.
We alleviate this problem by giving unique names to
results returned by string manipulation routines at differ-
ent call sites. We currently apply this object naming im-
provement to Java standard libraries only. As explained
in Section 6.4, imprecise object naming was responsible
for all the 12 false positives produced by our analysis.
5 Auditing Environment
The static analysis described in the previous two sec-
tions forms the basis of our security-auditing tool for
Java applications. The tool allows a user to specify secu-
rity patterns to detect. User-provided speciﬁcations are
expressed as PQL queries, as described in Section 3.4.
These queries are automatically translated into Datalog
queries, which are subsequently resolved using bddbddb.
To help the user with the task of examining violation
reports, our provides an intuitive GUI interface. The in-
terface is built on top of Eclipse, a popular open-source
Java development environment. As a result, a Java pro-
grammer can assess the security of his application, of-
ten without leaving the development environment used
to create the application in the ﬁrst place.
A typical auditing session involves applying the anal-
ysis to the application and then exporting the results into
Eclipse for review. Our Eclipse plugin allows the user to
easily examine each vulnerability by navigating among
the objects involved in it. Clicking on each object allows
the user to navigate through the code displayed in the text
editor in the top portion of the screen.
Example 8. An example of using the Eclipse GUI
is shown in Figure 7.
The bottom portion of the
screen lists all potential security vulnerabilities re-
ported by our analysis. One of them, a SQL injec-
tion caused by non-Web input is expanded to show
all
The
source object on line 76 of JDBCDatabaseExport.java
is passed to derived objects using derivation methods
StringBuffer.append and StringBuffer.toString
the objects involved in the vulnerability.
280
14th USENIX Security Symposium
USENIX Association
until it reaches the sink object constructed and used on
line 170 of the same ﬁle. Line 170, which contains a
call to Connection.prepareStatement, is highlighted
in the Java text editor shown on top of the screen. 2
6 Experimental Results
In this section we summarize the experiments we per-
formed and described the security violations we found.
We start out by describing our benchmark applications
and experimental setup, describe some representative
vulnerabilities found by our analysis, and analyze the im-
pact of analysis features on precision.
6.1 Benchmark Applications
While there is a fair number of commercial and open-
source tools available for testing Web application secu-
rity, there are no established benchmarks for comparing
tools’ effectiveness. The task of ﬁnding suitable bench-
marks for our experiments was especially complicated
by the fact that most Web-based applications are propri-
etary software, whose vendors are understandably reluc-
tant to reveal their code, not to mention the vulnerabili-
ties found. At the same time, we did not want to focus on
artiﬁcial micro-benchmarks or student projects that lack
the complexities inherent in real applications. We fo-
cused on a set of large, representative open-source Web-
based J2EE applications, most of which are available on
SourceForge.
The benchmark applications are brieﬂy described be-
low. jboard, blueblog, blojsom, personalblog,
snipsnap, pebble, and roller are Web-based bulletin
board and blogging applications. webgoat is a J2EE ap-
plication designed by the Open Web Application Secu-
rity Project [40, 41] as a test case and a teaching tool for
Web application security. Finally, road2hibernate is a
test program developed for hibernate, a popular object
persistence library.
Applications were selected from among J2EE-based
open-source projects on SourceForge solely on the ba-
sis of their size and popularity. Other than webgoat,
which we knew had intentional security ﬂaws, we had
no prior knowledge as to whether the applications had
security vulnerabilities. Most of our benchmark appli-
cations are used widely: roller is used on dozens of
sites including prominent ones such as blogs.sun.com.
snipsnap has more than 50,000 downloads according
to its authors. road2hibernate is a wrapper around
hibernate, a highly popular object persistence library
that is used by multiple large projects, including a news
aggregator and a portal. personalblog has more than
3,000 downloads according to SourceForge statistics. Fi-
nally, blojsom was adopted as a blogging solution for
the Apple Tiger Weblog Server.
Figure 8 summarizes information about our bench-
Benchmark
jboard
blueblog
webgoat
blojsom
personalblog
snipsnap
road2hibernate
pebble
roller
Total
Version
number
0.30
1.0
0.9
1.9.6
1.2.6
1.0-BETA-1
2.1.4
1.6-beta1
0.9.9
File
count
90
32
77
61
39
445
2
333
276
1,355
Line
count
17,542
4,191
19,440
14,448
5,591
36,745
140
36,544
52,089
186,730
Analyzed
classes
264
306
349
428
611
653
867
889
989
5,356
Figure 8: Summary of information about the benchmarks. Applica-
tions are sorted by the total number of analyzed classes.
mark applications. Notice that the traditional lines-of-
code metric is somewhat misleading in the case of ap-
plications that use large libraries. Many of these bench-
marks depend on massive libraries, so, while the appli-
cation code may be small, the full size of the application
executed at runtime is quite large. An extreme case is
road2hibernate, which is a small 140-line stub pro-
gram designed to exercise the hibernate object per-
sistence library; however, the total number of analyzed
classes for road2hibernate exceeded 800. A better
measure is given in the last column of Figure 8, which
shows the total number of classes in each application’s
call graph.
6.2 Experimental Setup
The implementation of our system is based on the
joeq Java compiler and analysis framework. In our sys-
tem we use a translator from PQL to Datalog [35] and the
bddbddb program analysis tool [55] to ﬁnd security vio-
lations. We applied static analysis to look for all tainted
object propagation problems described in this paper, and
we used a total of 28 source, 18 sink, and 29 derivation
descriptors in our experiments. The derivation descrip-
tors correspond to methods in classes such as String,
StringBuffer, StringTokenizer, etc. Source and
sink descriptors correspond to methods declared in 19
different J2EE classes, as is further described in [34].
We used four different variations of our static analysis,
obtained by either enabling or disabling context sensitiv-
ity and improved object naming. Analysis times for the
variations are listed in Figure 9. Running times shown in
the table are obtained on an Opteron 150 machine with
4 GB of memory running Linux. The ﬁrst section of
Pre-
X
7
8
Context sensitivity proces-
Improved naming
sing
Taint analysis
Points-to analysis
X X
X
10
8
12
37
10
13
15
39