Table5:Differenttypesofanalysistechniques,theirdefinitions,andexamples.
Analysistechniques Definition Repositoryexample
Classicmachine Classicmachinelearningtechniquessuchas
learning LogisticRegressionandDecisionTree.
Supervised-learning Aleaningtechniquethatuses Repository(165321356)usesvarious
labeleddatasets. classicsupervisedapproachessuchas
RandomForestandDecisionTreeto
detectanomaliesinKPIdata.
Unsupervised-learning Anapproachthatsystemlearns Repository(58811148)implements
withoutusinglabeleddatasets. multipleunsupervisedapproaches
suchasIsolationForestandInvariant
Minertodetectanomalies.
Deeplearning Asubfieldofmachinelearningthat
usesartificialneuralnetworkswithmultiple
layers(i.e.,deepneuralnetworks).
Supervised-learning Aleaningtechniquethatuses Repository(187774599)usesArtificial
labeleddatasets. NeuralNetworktofindanomalous
behavioronIoTsensordata.
Unsupervised-learning Atechniquethatlearns Repository(246569386)usesLong
patternsfromunlabelleddata. Short-TermMemorytodetect
anomaliesfromlogdata.
Timeseriesmodel Techniquesthataimtomodeltime Repository(302842095)appliesdifferent
seriesdata,mainlyusedforfinding timeseriesmodelssuchasAuto
trendsandforecasting. RegressionandHolt-winterstodetect
anomaliesandanalyzerootcauses.
Statisticalanalysis Analyticaltechniquesto
understand,analyzeandinterpret
theinputdata.
Descriptiveanalysis Describingthefeaturesofdataand Repository(114942949)usesdescriptive
summarizedatainaquantitatively analysissuchasmeasuringminimumand
manner. maximumvaluesandplottingscatter
figurestointerprettheirIoTsensordata.
Statisticaloutlier Applyingstatisticaltestssuchas Repository(156308650)usesz-score
detection z-scoretoidentifyoutliervalues. testtodetectanomaliesonCPUusage
data.
Exploratoryanalysis Exploringdatatoidentifynew Repository(123162193)usesexploratory
connections,inspectmissingdata, analysissuchasplottinganddescribing
orcheckhypotheses. theirlogdatatoinspectandunderstand
theirinputdata.
Associaterulemining Findingfrequentlyoccurring Repository(160285839)usesApriori
patternsandassociationsbetween algorithmtoperformassociatemining
variables. intheirinputalarms.
Naturallanguage Techniquesthataimtoanalyze Repository(316407231)leverages
processing andmodeltextdata. BidirectionalEncoderRepresentations
fromTransformers(BERT),apre-trained
languagemodelasoneoftheirtechniques
toperformanomalyprediction.
Others Othertechniquesthatcouldnotbe Repository(146802240)usesfuzzy
categorizedinpreviouscategories. matchingtoclassifywebqueries.
Unknown Projectsforwhichwecouldnotfind
anyspecifictechniques.
N/A Projectsthatonlyprovide Repository(238914477)isadatasetof
datasetsordonotuseany KPIdataanddoesnotuseany
analysistechniques. analysistechniques.
To find a GitHub repository with its ID, one can either click the hyperlink or use the link
https://api.github.com/repositories/{ID}where{ID}isreplacedbyaspecificrepositoryID.
machine learning models are practical. In our set of projects, there is no sub-
stantial difference between supervised and unsupervised approaches.
The following two common techniques are time series models and statis-
tical analysis. As most of the input data is time series (e.g., logs, network
traffic data, performance metrics), it is not surprising that some projects use
18 RoozbehAghilietal.
Table 6: Different types of goals, their definitions, and examples.
Goal Definition Repositoryexample
Anomalydetection Identifyinganomaliesthatdeviate Repository(134266587)useslogdata
fromthenormalbehavior. andanalyzethemtofindanomalous
behavior.Itthendisplayanomalies
usingdynamicgraphics.
Monitoring Collectingandobservingthe Repository(221989665)providesdata
real-timestreamofdatato monitoringandalerting.
understandsystemruntimestatus.
Anomalyprediction Analyzinghistoricaldatato Repository(169132015)usesmetric
forecastfutureanomalies. dataofharddrivestopredictthe
failuresinthenearfuture.
Rootcauseanalysis Identifyingtherootcausesof Repository(238914477)analyzesthe
faultsorproblems. logsofKubernetescontainerstofind
therootcausesofissues.
Dataset Providingdatasetstobeused Repository(60705895)collectsvarious
inotherprojects. systemlogdatasetsthatcanbeused
forloganalysis.
AIOpsinfrastructure Providinginfrastructuresupport Repository(244678163)provides
orutilityfunctionssuchaslog automatedparsingofrawlogs.
parsing.
Classification Classifyingdifferentinputdata Repository(238914477)classifiesweb
instancebasedontheirsimilarities. queriestofindsimilarimportant
informationandtrends.
Knowledgeextraction Extractingandsummarizing Repository(345320486)extracts
knowledgefromdatasets informationfromStackOverflowto
orwebsites. findfastsolutionsforfaultsintheir
platform.
Selfhealing Conductinghealthchecksand Repository(238914477)aimstoprovide
automaticallyfixingtheissues. softwaresystemswithmonitoringand
self-healing.
To find a GitHub repository with its ID, one can either click the hyperlink or use the link
https://api.github.com/repositories/{ID}where{ID}isreplacedbyaspecificrepositoryID.
time series techniques to model their data. Autoregressive Integrated Moving
Average (ARIMA) is the most common time-series technique.
We also find three major statistical analysis techniques: descriptive anal-
ysis, outlier detection, and exploratory analysis. We categorize the technique
of a project as descriptive analysis if it analyzes the data numerically, and we
groupitasexploratoryifitusesvisualizationtoanalyzethedata.Usually,the
exploratory analysis will be done after performing the descriptive analysis.
Finally, we can count Natural Language Processing (NLP) as one of the
lowest-used techniques in the AIOps projects (2%). However, with the recent
developments in the NLP field, for example generating language models such
as BERT (Devlin et al., 2018) and CodeBERT (Feng et al., 2020), we believe
AIOps solutions can also benefit more from NLP techniques. We discuss this
point in more detail in Section 4.
Goals: Anomaly detection is the most popular goal of the studied
AIOps projects, followed by monitoring, anomaly prediction, and
root cause analysis.Wefind9categoriesforthegoalsoftheAIOpsprojects
which are shown in Figure 6 and are described in Table 6. Anomaly detection
(58%) and monitoring (15%) are the most common reasons for using AIOps
StudyingtheCharacteristicsofAIOpsProjectsonGitHub 19
Monitoring: Log
Monitoring:
Network traffic data
Monitoring:
Performance metric
Monitoring: KPI
Monitoring:
IoT sensor data
Monitoring: Trace
Multi-media
Source code
Technical Q/A data
Alarm
Fig. 7: The relation between the input data and goals of the AIOps projects.
The sizes of the circles are proportional to the number of projects that use a
certain input for a certain goal.
solutions. Anomaly prediction, root cause analysis, and dataset are the next
main goals of our set of projects. We categorize the projects as dataset if they
mainly provide public AIOps data that can be used by other practitioners or
researchers.
AsshowninFigure6,only1%ofprojectsdoself-healingastheirfinalgoal.
It means, in the other projects, after achieving the final goal, for example,
anomaly detection, an agent (e.g., developer) should decide what to do with
the founded anomalies. This not completely automated procedure will lead to
a loss of time and resources. We discuss this point in more detail in Section 4.
TherelationbetweentheinputdataandthegoalsoftheAIOpsprojectsis
shown in Figure 7. As shown in this figure, log data and network traffic data
arethemostuseddatatypesforachievingthegoalofanomalydetection,while
performance metric data is the most used data type for anomaly prediction.
Logdataandperformancemetricdataarealsothemostcommondatasources
for the goal of root cause analysis.
Summary of RQ2
Logs are the most commonly used input data in the studied AIOps
projects, followed by network-traffic data and performance metrics.
Classical machine learning techniques are the most used analysis tech-
niques,followed(farbehind)bydeeplearning,timeseries,andstatisti-
calanalysis.ThemostpopulargoalsoftheAIOpsprojectsareanomaly
detection, followed by monitoring, anomaly prediction, and root cause
analysis.
20 RoozbehAghilietal.
3.3 RQ3. What is the code quality of AIOps projects?
3.3.1 Motivation
EnsuringthequalityofAIOpsprojectsisvitalforthesoftwareoperationtasks
theyaredesignedfor.Otherwise,theinsightsderivedfromtheiranalysiswould
notbereliable.Thus,inthisRQ,weaimtounderstandthecodequalityofthe
AIOps projects. We analyze different metrics in order to come to a compre-
hensive conclusion. We also compare the code quality of AIOps projects with
our baselines to find similar patterns or differences. Our results can provide
insights for future work to improve the quality of AIOps projects.
Table 7: The code quality metrics and their definitions.
Metric Definition
Size Themetricsthatrepresentsthesizeofaproject.
LinesofCode(LOC) Numberoflinesthatcontainatleastonecharacterwhichisnotawhitespace,
atabulation,orpartofacomment.
Commentlines Numberoflinescontainingcomments.Non-significantcomments(emptycomment
lines,commentlinesonlyhavingspecialcharacters,etc.)arenotconsidered.
Densityofcomments Theamountoflinesofcommentscomparedtolinesofcode.Itiscalculated
basedonthefollowingformula.
Densityofcomments=Commentlines/(Linesofcode+Commentlines)*100
Reliability Theissuesthatmakethecodebehavedifferentlyasthedeveloperwas
intended.
Numberofbugs Totalnumberofbugsinaproject.Abugisdefinedasanissuethatrepresents
somethingwronginthecode.
Maintainability Theissuesthatmakethecodemoredifficulttoupdatethanitshould.
Numberofcodesmells Totalnumberofcodesmellsinaproject.Acodesmellisaviolationofdesign
patternsthatmaynegativelyimpactsoftwarequality.(RasoolandArshad,2015)
Technicaldebttime Theestimatedtimerequiredtofixallthecodesmells.Ifthevaluesarewritten
indays,an8-hourdayisassumed.
Security Theissuesthatmakepotentialweaknessesintermsofsecurity.These
issuesmightbebenefitedbyhackers.
Numberofvulnerabilities Totalnumberofvulnerabilitiesinaproject.Avulnebarityisapieceofcodethat
couldbeexploitbyahacker.
Numberofsecurityhotspots Totalnumberofsecurityhotspotsinaproject.Asecurityhotspotisthepiecesof
codethataresecurity-sensitive.
3.3.2 Approach
WeuseSonarQube5,astaticcodeanalysistoolthatsupportsalargenumberof
programming languages, including Python, Java, JavaScript, and Go, to stat-
ically measure the quality of the AIOps projects and the baselines, as AIOps
projectsaredevelopedbydifferentlanguages(RQ1).Manyrecentstudieshave
utilizedorevaluatedSonarQubeforcodequalitymeasurement(Busingeetal.,
2019; Lomio et al., 2021; Saarimaki et al., 2019).
5https://www.sonarqube.org/
StudyingtheCharacteristicsofAIOpsProjectsonGitHub 21
Codequalitymetrics.TounderstandthecodequalityofAIOpsprojects,we
measure the metrics of each studied project along four dimensions: size, relia-
bility, maintainability, and security. The detailed list of the measured metrics
include: Lines of Code (LOC), comment lines, density of comments, number
of bugs, number of code smells, number of vulnerabilities, number of security
hotspots, and technical debt time. We define these metrics in Table 7.
SonarQube also assigns a severity level to each of the issues. It categorizes
the severities into four groups; Minor, Major, Critical, and Blocker, from the
lowest to the highest severity6.
Findingthemostviolatedrulesandrulecategories.Toprovideinsights
into the primary code quality issues among the AIOps projects, we count
each issue’s assigned rules and rule categories (i.e., tags) and report the most
repeated ones. SonarQube evaluates the source code against its set of rules
to detect specific issues. Also, rule categories are a way to categorize trivial
rules into higher-level concepts. SonarQube rules include code smells, bugs,
vulnerabilities,andsecurityhotspots.Eachruleisrelatedtoaspecificdefined
issue, and different rules can be part of one rule category.
Tofindthemost violatedissues(i.e.,rules andrulecategories),it isessen-
tialtoconsidertwoaspects:theoccurrenceofanissueineachprojectandthe
percentage of projects that have that issue. Hence, we calculate the weight of
violatedissues(“W” inTables9and10)tofindthemostviolatedissues.Each
projectcanhavemultipleviolatedissues.Wecalculatetheweightofissuei in
project j using the following formula,
n
w = ij
ij n
pj
wheren isthefrequencyofissuei inprojectj andn isthetotalnumberof
ij pj
issues in project j. Then, to calculate the weight of issue i in all the projects,
we calculate its average in all the projects.
(cid:80)n
w
w = j=1 ij