k = 6
(a)
Reduction Rate
Filter
size m k = 4 k = 6 k = 8
80K
3.375 4.359 5.155
160K 3.751 4.964 6.348
320K 4.224 6.074 11.083
(b)
rates
7. The
false positive
Table
in
Experiment 5 for the intuitive extension is
the same as in Experiment 4. (a) shows im-
proved result in the reﬁned extension, and
(b) shows reduction rate achieved by the re-
ﬁned extension.
sion is much slower than in the intuitive extension for each
conﬁguration in each experiment4. For example, no cells in
the reﬁned extension reach the count limit 63 after all the in-
sertions are done, whereas there are many in the intuitive ex-
tension. The number of cells with a count larger than 20 in
the intuitive extension can be more than 200 times that in the
reﬁned one. This implies that false positives in a DCC im-
plementation enhanced by the reﬁned extension can be both
4 Due to the space limit, tables showing the differences are omitted here.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006k = 4
Filter
size m Mean
Std. dev.
80K
2.394E-2 1.643E-3 2.155E-2 1.563E-3 2.546E-2 1.635E-3
160K 2.374E-3 5.269E-4 9.459E-4 3.145E-4 5.655E-4 2.521E-4
320K 1.862E-4 1.452E-4 2.608E-5 5.405E-5 4.178E-6 2.013E-5
Std. dev. Mean
Std. dev. Mean
k = 6
k = 8
(a)
k = 4
Filter
size m Mean
Std. dev.
80K
1.086E-2 1.036E-3 7.966E-3 8.512E-4 8.282E-3 8.500E-4
160K 9.937E-4 3.134E-4 2.917E-4 1.565E-4 1.536E-4 1.151E-4
320K 7.208E-5 8.158E-5 7.613E-6 2.494E-5 9.843E-7 8.584E-6
Std. dev. Mean
Std. dev. Mean
k = 6
k = 8
(b)
Reduction Rate
Filter
size m k = 4 k = 6 k = 8
80K
2.203 2.706 3.075
160K 2.389 3.242 3.681
320K 2.583 3.426 4.245
(c)
8. The
false positive
in
Table
Experiment 6:
the intuitive exten-
sion; (b) for the reﬁned extension; (c) re-
duction rate achieved by the reﬁned exten-
sion.
rates
for
(a)
k = 4
Filter
size m Mean
Std. dev.
80K
2.392E-2 1.576E-3 2.155E-2 1.524E-3 2.549E-2 1.590E-3
160K 2.373E-3 5.169E-4 9.452E-4 3.002E-4 5.683E-4 2.418E-4
320K 1.866E-4 1.405E-4
4.735E-6 2.216E-5
2.555E-5 5.170E-5
Std. dev. Mean
Std. dev. Mean
k = 6
k = 8
(a)
k = 4
Filter
size m Mean
Std. dev.
80K
1.365E-2 1.174E-3 1.038E-2 1.007E-3 1.109E-2 1.045E-3
160K 1.254E-3 3.553E-4 4.058E-4 1.913E-4 2.067E-4 1.361E-4
320K 9.578E-5 9.939E-5 1.007E-5 3.038E-5 1.720E-6 1.285E-5
Std. dev. Mean
Std. dev. Mean
k = 6
k = 8
(b)
Reduction Rate
Filter
size m k = 4 k = 6 k = 8
80K
1.752 2.076 2.298
160K 1.892 2.329 2.749
320K 1.949 2.538 2.725
(c)
9. The
false positive
in
Table
the intuitive exten-
Experiment 7:
sion; (b) for the reﬁned extension; (c) re-
duction rate achieved by the reﬁned exten-
sion.
rates
for
(a)
smaller and less likely to occur at the same time than in a
similar system enhanced by the intuitive extension.
It is intriguing that the reﬁned extension has performed
so differently in Experiments 1-3: it has the best perfor-
mance in Experiment 2 but the worst in Experiment 3. Al-
though the results appear to be counter-intuitive, they are
k = 6
k = 4
Std. dev. Mean
Filter
size m Mean
Std. dev.
80K
2.205E-2 1.740E-3 1.946E-2 1.621E-3 2.261E-2 1.741E-3
160K 2.155E-3 5.596E-4 8.327E-4 3.309E-4 4.810E-4 2.587E-4
240K 4.903E-4 2.565E-4 1.057E-4 1.217E-4 3.133E-5 6.818E-5
320K 1.704E-4 1.580E-4 2.136E-5 5.376E-5 3.146E-6 2.048E-5
640K 1.104E-5 4.113E-5 5.302E-7 8.760E-6 0.000E+0 0.000E+0
Std. dev. Mean
k = 8
(a)
k = 6
k = 4
Std. dev. Mean
Filter
size m Mean
Std. dev.
80K
5.866E-3 8.001E-4 3.586E-3 5.756E-4 3.353E-3 5.255E-4
160K 5.153E-4 2.283E-4 1.207E-4 1.050E-4 5.434E-5 6.651E-5
240k
1.094E-4 1.038E-4 1.439E-5 3.496E-5 2.302E-6 1.283E-5
320K 3.975E-5 6.504E-5 3.332E-6 1.639E-5 3.635E-7 4.467E-6
640K 2.585E-6 1.483E-5 6.564E-8 1.305E-6 0.000E+0 0.000E+0
Std. dev. Mean
k = 8
(b)
Reduction Rate
Filter
size m k = 4 k = 6 k = 8
80K
3.759 5.425 6.744
160K 4.183 6.898 8.851
240K 4.481 7.342 13.610
320K 4.286 6.409 8.653
640K 4.270 8.077
-
(c)
Table 10. The false positive rates in
Experiment 8:
the intuitive exten-
sion; (b) for the reﬁned extension; (c) re-
duction rate achieved by the reﬁned exten-
sion.
for
(a)
in fact reasonable as a careful study reveals in the follow-
ing.
Experiment 2 is effectively equivalent
to Round1
in Experiment 1 – the elements are inserted sequen-
tially, and each inserted once. Some coincidental hits
do not cause false positives in Round1 but
they do
in Experi-
so in subsequent Round2, . . . , Round20
ment 1. Interesting enough, a few more false positives
turn up in Round2, but no more in any other subse-
quent Round3, . . . , Round20. This is why the reﬁned ex-
tension has performed slightly better in Experiment 2 than
in Experiment 1.
We have also examined the growth of false positives
in Experiment 3 by dividing the randomized insertion se-
quence (200,000 insertions) evenly into 20 chunks. False
positives were noted once each chunk has been inserted.
Since elements in each chunk are inserted into the ﬁlter
different number of times, new false positives have been
observed for each chunk. This echoes an observation dis-
cussed earlier: the frequency that each element is inserted
matters. All this explains why the reﬁned extension has per-
formed worse in Experiment 3 than in Experiment 1.
Finally, it is worthwhile to note that in some simulations,
the standard deviation of the false positive rate is large com-
pared to its mean. Examples include all conﬁgurations with
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006References
[1] B Bloom. Space/time trade-offs in hash coding with allow-
able errors. Commun. ACM, 13(7):422-426, 1970.
[2] T Cormen et al. “Introduction to Algorithms (2nd ed.)”. The
MIT Press, 2002.
[3] Distributed Checksum Clearinghouse, available at http:
//www.rhyolite.com/anti-spam/dcc/.
[4] Li Fan et al, “Summary cache: a scalable wide-area web
cache sharing protocol”, IEEE/ACM Transactions on Net-
working, Volume 8, Issue 3, June 2000. pp 281 - 293
[5] Donald E. Knuth. “The Art of Computer Programming”,
third Edition, Reading, Massachusetts: Addison-
Vol.2,
Wesley, 1997.
[6] I. Mitrani, Simulation Techniques for Discrete Event Sys-
tems, Cambridge University Press, 1982 (Reprinted, 1986).
[7] Vipul Prakash, Razor, available at http://razor.
sourceforge.net/.
[8] Vipul Prakash, Personal Communication, 13 September
2005.
[9] M. V. Ramakrishna, “Practical performance of Bloom ﬁlters
and parallel free-text searching”, Commun. of ACM, vol. 32,
no. 10, pp. 1237 – 1239, Oct. 1989.
[10] K Shanmugasundaram et al. “Payload attribution via hierar-
chical bloom ﬁlters”, Proceedings of the 11th ACM confer-
ence on Computer and Communications Security (CCS’04),
October 2004.
[11] Vernon Schryver, Personal Communication, September 2005
[12] E Spafford, “OPUS: Preventing Weak Password Choices”,
Computers and Security 11(3), pp. 273-278, 1992
[13] J Yan and P L Cho, “Enhancing Signature-based Collabora-
tive Spam Detection with Bloom Filters”, Technical Report
CS-TR-973, School of Computing Science, Newcastle Uni-
versity, UK. June 2006.
m = 320K in Experiment 1. We have examined all these
cases, and found that this is really due to the fact that a ma-
jority of the 1,000 round simulations produced no false pos-
itives while a minority did. (Histograms showing this fact
are omitted here, due to the space limit.) Therefore, such
an occurrence of large standard deviations is in fact a fea-
ture, not a bug!
6. Conclusion and future work
The main contributions of this paper are as follows. First,
we have shown that Bloom ﬁlters and their variants can
signiﬁcantly enhance two collaborative spam detection sys-
tems. Bloom ﬁlters have not hitherto been used for purposes
such as we have proposed.
Second, we have identiﬁed some new Bloom ﬁlter tricks,
including 1) a novel notion of “utilisable size” of the Bloom
ﬁlters, and of “global coincidental hits” and “local coinci-
dental hits” in the ﬁlters, and 2) a new Bloom ﬁlter variant,
which supports counting, heuristics that reduce counting er-
rors by addressing both global and local coincidental hits,
and an innovation that reduces its storage cost.
Third, we have performed a simulation study to show
that our new variant can effectively reduce counting errors
occurred in an intuitive variant of the Bloom ﬁlter, unless
both are degenerated into an ordinary hash table. This sim-
ulation study also has furthered our understanding of these
two variants. For example, the frequency with which each
element is inserted matters for the rate of error reduction
achieved by our new variant. The order in which a sequence
of elements is inserted can have a signiﬁcant impact on the
error rates in our variant, but it has no such effect at all in
the intuitive variant.
Our ongoing and future work include 1) to estimate, with
empirical data, fdcc in a DCC implementation enhanced by
our new Bloom ﬁlter variant, and 2) to empirically eval-
uate other performance changes that this variant introduces
to the DCC system, e.g. average speed for signature queries.
Since such a Bloom ﬁlter variant can be applied to applica-
tions where it is relevant to support fast membership test-
ing and distributed counting with controllable inaccuracy,
we are also interested in identifying its other novel applica-
tions in computer security.
Acknowledgement
We thank Isi Mitrani for helping with our probabilistic
analysis and simulation design, and thank Ross Anderson,
Zoe Andrews, Feng Hao, Brian Randell, Robert Stroud and
anonymous reviewers for valuable comments. Will Ng of
the Chinese University of Hong Kong pointed our attention
to collaborative spam detection schemes.
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006