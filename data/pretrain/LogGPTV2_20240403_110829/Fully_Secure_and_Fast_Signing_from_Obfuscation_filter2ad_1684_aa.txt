# Fully Secure and Fast Signing from Obfuscation

## Authors
- Kim Ramchen
- Brent Waters
- University of Texas at Austin
- Email: [PI:EMAIL]
- Email: [PI:EMAIL]

## Abstract
In this work, we explore new techniques for constructing short signatures from obfuscation. Our objectives are twofold. First, we aim to achieve short signatures with adaptive security proofs. Second, we seek to develop signatures with fast signing, ideally significantly faster than comparable non-obfuscation-based signatures. The goal is to create an "imbalanced" scheme where signing is fast, even if verification is slower.

We introduce novel methods to achieve short and fully secure signatures derived from obfuscation. Our base signature scheme is built using punctured programming and leverages the "prefix technique" to guess a signature. We find that our initial scheme has slower performance compared to algorithms like EC-DSA. The underlying reason is that the pseudorandom generator (PRG) is called approximately \(\ell^2\) times for a security parameter \(\ell\).

To address this, we construct a more efficient scheme by adapting the Goldreich-Goldwasser-Micali (GGM) construction to form a new puncturable pseudorandom function (PRF). This PRF accepts variable-length inputs and allows efficient pipelining of evaluations on all prefixes of a message. This reduces the number of calls to the underlying PRG, thereby decreasing signing costs.

We evaluate our puncturable PRF-based signature schemes using various cryptographic candidates for the underlying PRG. Our results show that the performance of message signing is competitive with widely deployed signature schemes.

## 1. Introduction
Obfuscation addresses the problem of protecting a program from reverse engineering while preserving its functionality. Constructing secure obfuscation in a mathematically sound manner has been challenging. While many ad hoc approaches have been proposed, they have often been broken, highlighting the need for a cryptographically grounded solution. This changed with the introduction of candidate indistinguishability obfuscation by Garg, Gentry, Halevi, Raykova, Sahai, and Waters [GGH+13a].

Recent research, starting with [SW14], has explored what can be built from indistinguishability obfuscation, leading to polynomial-time obfuscation of unrestricted program classes. This work can be divided into two categories: discovering new applications and re-exploring existing cryptographic primitives through the lens of obfuscation.

Re-exploring existing primitives is important for several reasons. It leads to qualitatively different approaches to cryptographic problems. For example, the Sahai-Waters [SW14] public key scheme was obtained by applying obfuscation to symmetric key encryption, matching Diffie and Hellman's vision of public key encryption. Additionally, techniques used to build cryptographic primitives have led to new and unexpected results, such as the first construction of deniable encryption. These schemes also have unique properties; for instance, decryption in the SW public key cryptosystem involves only symmetric key operations, making it very fast. Similarly, their signing algorithm is fast due to the use of symmetric key primitives.

### Goals of This Work
In this paper, we explore building new signature systems from obfuscation. Our goals are:
1. To achieve short signatures with adaptive security proofs (matching the GMR definition [GMR88]).
2. To build signatures with fast signing, ideally significantly faster than comparable non-obfuscation-based signatures. The goal is to create an "imbalanced" scheme where signing is fast, even if verification is slower. Such imbalance is useful in applications where signing must be done by low-power devices, such as sensors, while verification can be performed by well-equipped machines.

Although current obfuscation candidates result in prohibitively slow verification, the field is still in its early stages, and it is plausible that systems with reasonable performance will be realized in the future. This seems even more possible if obfuscation candidates are designed and optimized for specific functionalities.

### Overview of Techniques
We begin by overviewing the techniques of the SW signature system [SW14], which builds signatures from puncturable PRFs. A puncturable PRF is a type of constrained PRF where a key \(K_{x^*}\) can be given out that allows evaluation of the function \(F_K(·)\) at all inputs \(x\) except when \(x = x^*\). In this scheme, the Setup algorithm chooses a puncturable PRF key at random. A message is signed by evaluating the puncturable PRF on it. The verification key is an indistinguishability obfuscation that verifies the signature is the correct output of the PRF on the message. A significant limitation of this scheme is that it only satisfies unforgetfulness against a selective attacker.

We aim to design signature systems that accommodate stronger attacks, particularly the standard notion of security where the attacker can adaptively choose the message to forge. To achieve this, we employ the prefix-guessing technique of Hohenberger-Waters [HW09]. The signature scheme challenger uses the list of pre-committed message queries to guess the shortest differing prefix between these messages and the forgery. This prefix is used to embed a challenge in the verification key, which a successful forger must answer with noticeable probability. This technique has been successfully employed in other contexts [CHKP10, BSW11, FS12, MP12, CK12, BHJ+14, Seo14].

The Hohenberger-Waters technique provides a method to build a scheme against an attacker that adaptively chooses the forged message but where the signature queries must be declared before seeing the verification key. In [HW09], they transform this notion into a fully adaptive secure scheme by using a chameleon hash. However, we avoid this transformation to meet the goal of constructing fully secure signatures using purely obfuscation-based techniques and to keep signing costs low compared to deployed signature schemes like EC-DSA.

### Achieving Adaptive Security
To achieve adaptive security from the prefix-embedded scheme, we publish a signature tag \(t\) and build a one-time signature using the tag \(t\) as the verification key for the message. This part of the signature is secure provided that no tag \(t\) is ever reused. We then sign the tag with the prefix-guessing scheme, generating a second signature part. The structure of our signature scheme allows us to XOR these parts together, with a suitable modification to the verification circuit.

### Construction in a Nutshell
Our construction consists of two main pieces:

1. **One-Time Like Signature Scheme:**
   - We generate a tag \(t\) of \(\lambda\) bits.
   - The first "signature piece" is \(s_1 = \oplus_{i=1}^{l} F_1(K_1, t \parallel i \parallel M(i))\), where \(F_1(K_1,·)\) is a puncturable PRF with appropriate input length.
   - The verification key is an obfuscated circuit that checks \(s_1\) is of the above form.
   - The security property is that an adversary, upon seeing a signature for a message \(M\) using tag \(t\), cannot construct a signature on \(M^* \neq M\) using the same tag \(t\).
   - We use a Lamport-like proof to argue security. If \(M^* \neq M\), there exists some index \(\hat{i}\) where \(M^*(\hat{i}) \neq M(\hat{i})\). The reduction algorithm can guess \(\hat{i}\) and bit \(\hat{b} = M^*(\hat{i})\) with noticeable probability. The reduction punctures \(K_1\) on \(\tau = t \parallel \hat{i} \parallel \hat{b}\) and evaluates an injective one-way function on the punctured value \(F_1(K_1, \tau)\), yielding an image \(z\). This image is embedded inside the verification key, VK, and is used to test the validity of message \(M^*\), while the punctured key can still verify other messages. If an adversary produces a valid forgery \((t, s_1^*)\), the reduction extracts the punctured value as \(s_1^* \oplus \oplus_{i \neq \hat{i}} F_1(K_1\{\tau\}, t \parallel i \parallel M^*(i))\), breaking the one-way function.

2. **Signing the Tag Using Prefix-Guessing:**
   - To sign a tag \(t\), a puncturable PRF \(F_{2,i}(K_{2,i},·)\) is evaluated on every prefix. Here \(F_{2,i}\) for \(i = 1, \ldots, \ell\) takes inputs of \(i\) bits.
   - The signature piece is \(s_2 = \oplus_{i=1}^{\lambda} F_{2,i}(K_{2,i}, t(i))\), where the length-\(i\) prefix of \(t\) is denoted \(t(i)\).
   - The verification key is an obfuscated circuit that checks \(s_2\) is of the above form.
   - The security property is that the attacker commits to a list of tags \((t_j)_{j=1}^q\). The challenger sends verification key VK and signatures \((\sigma_j)_{j=1}^q\) corresponding to the tags. The attacker should not be able to construct a signature on a tag \(t^*\) not in the queried list.
   - We argue security as follows: Since \(t^*\) is distinct from all queried tags, there exists some tag \(t_{j'}\) and index \(i'\) such that \(t^*\) and \(t_{j'}\) agree on the first \(i' - 1\) bits, differing at the \(i'\)-th bit. The reduction algorithm guesses \(t_{j'}\) and \(i'\). The reduction punctures \(K_{2,i'}\) on the differing prefix \(p\) and generates an equivalent verification circuit, using an injective one-way function to hide the punctured value \(F_{2,i'}(K_{2,i'}, p)\). This image is embedded inside the verification key, VK, which is sent to the adversary. If the adversary submits a valid forgery \(s_2^*\), the reduction extracts the punctured value as \(s_2^* \oplus \oplus_{i \neq i'} F_{2,i}(K_{2,i}, t(i))\), breaking the one-way function.

### Complete Scheme
Our complete scheme merges these two ideas to generate concise signatures. The signatures \(s_1\) and \(s_2\) are XORed together, yielding a single signature \(s\). The complete signature is \((t, s)\). The verification circuit on input \((M, (t, s))\) computes \(s_1 = \oplus_{i=1}^{l} F_1(K_1, t \parallel i \parallel M(i))\) and \(s_2 = \oplus_{i=1}^{\lambda} F_{2,i}(K_{2,i}, t(i))\), and checks that \(s = s_1 \oplus s_2\). In the security proof, the reduction deals with the case where a forgery tag \(t\) is repeated or not separately.

### Fast Signing
While the scheme achieves short and fully secure signatures, it does not meet our goal of fast signing. The primary issue is that in the generation of the second signature piece, \(\ell\) different punctured PRF systems must be evaluated, leading to \(O(\ell^2)\) calls to the underlying pseudorandom generator when using current constructions based on GGM trees.

We address this by giving a slightly modified second construction. Instead of using \(\ell\) different punctured PRF systems, each with a different domain size, we use one punctured PRF with a variable-length domain \(\{0, 1\}^{1 \leq i \leq \ell}\). This means the input to the function can be a string of any length up to \(\ell\). We can then plug this into our main construction.

At first glance, this modification might seem ineffective since the construction still needs to XOR \(\ell\) different PRF values. However, we show that it is possible to create a variable-length punctured PRF where the cost of evaluating the PRF on all prefixes of an \(\ell\)-bit message \(M\) is the same as computing the GGM tree once on \(M\). The main modification is that, following Goldreich [Gol06], we now need a length-tripling PRG \(G : \{0, 1\}^\lambda \rightarrow \{0, 1\}^{3 \cdot \lambda}\) that goes from \(\lambda\) bits to \(3 \cdot \lambda\) bits. In practice, this will likely consume more computation per pseudorandom generator invocation than using a length-doubling one, but in total, it should result in significantly faster signatures than the prior approach.

### Evaluation
We evaluate the cost of the selectively secure Sahai-Waters scheme and our adaptively secure scheme in terms of the cost of the underlying PRGs used by the puncturable PRFs. We compute concrete signing costs at the 128-bit security level using several cryptographic hash functions and ciphers to instantiate the PRGs. These costs are compared to the RSA and EC-DSA signature schemes at the same security level.

For appropriate choices of the underlying PRG, our adaptively secure construction is significantly faster than EC-DSA. For example, at the 128-bit level, the EC-DSA algorithm takes 348 microseconds. When the ChaCha stream cipher is used to instantiate the PRGs, the selectively secure Sahai-Waters scheme takes 25 microseconds, and the adaptively secure scheme takes 81 microseconds. Timings were performed on a quad-core Intel Xeon E3-1270 v2 workstation with 16GB RAM, clocked at 3.50GHz.

## 2. Signature Scheme Preliminaries
A signature scheme is a tuple of probabilistic polynomial-time (PPT) algorithms:

- **Setup(1\(^{\lambda}\))**: The setup algorithm outputs a pair \((VK, SK)\) where \(VK\) is the verification key and \(SK\) is the secret key.
- **Sign(SK, M)**: The signing algorithm takes in the secret key \(SK\) and message \(M \in M\) and outputs a signature \(\sigma\).
- **Verify(VK, M, \(\sigma\))**: The verification algorithm takes in a verification key \(VK\), a message \(M\), and a claimed signature \(\sigma\). The algorithm returns 1 if the signature is valid and \(\bot\) otherwise.

**Correctness**: 
\[
\forall M \in M \quad \Pr[\text{Verify}(VK, M, \text{Sign}(SK, M)) = 1 : (VK, SK) \leftarrow \text{Setup}(1^{\lambda})] = 1 - \text{negl}(\lambda)
\]

In what follows, we assume \(M\) is an \(\ell\)-bit message space.

### 2.1 Unforgeability Against Adaptive Attacks
We extend the notion of a secure signature scheme to accommodate adaptive attacks, according to the formalization by Goldwasser, Micali, and Rivest [GMR88]. An attacker may adaptively make an arbitrary (polynomial) number of signature queries on messages, even after receiving the verification key. The attacker must then output a message on which it did not receive a signature and a valid signature for that message.