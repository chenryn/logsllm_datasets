null) to some process. This third action is 
to (a) the automaton Ai, (b) the 
An algorithm using a failure 
A of n deterministic  automata 
Pi). Computation 
proceeds in steps of the algorithm. 
In each step of an algorithm A, a process Pi atomically 
performs the following 
message from some process Pj, or a "null" message 
Aj (2) Pi queries and receives 
a value d from its fail­
ure detector module Vi (d E Rv is said to be seen 
by Pi)j  (3) Pi 
changes its state and sends a message 
(possibly 
performed according 
state of Pi at the beginning 
in action 1, and (d) the value d seen by 
sage received 
Pi in action 2. The message received by a·process is 
chosen non-deterministically 
among the messages in 
the message buffer destined to Pi, and the null mes­
sage A. A configumtion 
is a pair (I, M) where I is 
a function 
and M is a set of messages currently 
buffer. A configuration 
tion if M =  0 (no message is initially 
in this case, the states to which I maps the processes 
states. A step of an algorithm A is 
are called initial 
a tuple e  = (Pi, m, d, A), uniquely defined by the al­
of the process Pi that takes 
gorithm A, the identity 
the step, the message m received by Pi, and the fail­
ure detector value d seen by Pi during the step. A 
step e  = (Pi, m, d, A) is applicable 
(I, M) ifand only if m  EMu fA}. The unique config­
uration that results from applying e to configuration 
C =  (I, M) is noted e(C). 
mapping each process Pi to its local state, 
in the message 
configura­
in the buffer): 
to a configumtion 
(I, M) is an initial 
3When the context 
is clear we omit the subscript. 
2.2 Failure detectors 
Roughly speaking, 
oracle which gives hints about failure patterns. Each 
process Pi has a local  failure 
detector module of V, 
a failure detector 
V is a distributed 
347 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:30 UTC from IEEE Xplore.  Restrictions apply. 
(the configuration  obtained 
2.4 Schedules  and 
runs 
infinite) 
to a configuration 
or (2) S[lJ is applicable 
A schedule of an algorithm A is a (possibly 
sequence S =  S[IJ; S[2J; ... S[kJ; ... of steps of A. A 
C if (1) Sis 
schedule S is applicable 
to C, 5[2] 
the empty schedule, 
5[I](C) 
is  applicable  to 
from applying 5[11 to C), etc. 
Let A be any algorithm and V any failure detec­
tor. A partial run of A using V is a tuple R  = where H is a failure detector history 
such that H E V(F), C is an initial 
of 
configuration 
A, T is a finite sequence of increasing time values, and 
5 is a finite schedule of A such that, (1) lSI = ITI, 
(2) 8 is applicable 
to C, and (3) for all k 5: lSI 
where SJkJ =  (Pi, 
m, d, A), we have Pi ¢ F(T[k]) 
d = H(p;, T[kJ). 
A run of of A using V is a tuple R = 
detector history and H E V(F), C 
where H is a failure 
of A, 5 is an infinite sched­
is an initial 
ule of A, T  is an infinite sequence of increasing time 
values, and in addition to the conditions 
above of a 
(2) and (3», the two following 
partial run {(I), 
condi­
tions are satisfied: (4) every correct process takes an 
infinite number of steps, and (5) every message sent 
to a correct process Pi is eventually 
configuration 
received by Pj' 
and 
2.5 Solvability 
An algorithm A solves a problem B using a failure 
detector V if every run of A using V satisfies 
the spec­
ification of B. We say that V solves B if there is 
an algorithm that solves B using V. We say that 
a failure detector VI is stronger than a failure de­
tector V2 (V2 :j VI) if there is an algorithm that 
transforms VI into V2, Le., that can emulate V2 with 
VI [lJ. The algorithm does not need to emulate all 
of 1)2. It is required however that for every 
histories 
run R = where H E  VI(F), the out­
with R  is a history of V2 (F). We 
put of the algorithm 
say that VI is strictly stronger than V2 ('02 -< VI) if 
V2 :j VI and VI  V2. Finally, 
detector V is the weakest to solve a problem B if (a) 
V solves B and (b) any failure detector that solves B 
is stronger than V. 
we say that a failure 
3 Realistic failure  detectors 
Stating that failure detector class V is the weakest to 
solve a problem X hides an implicit 
assumption: the 
among which V is the weak­
set of failure detectors 
est. W ithout precisely 
defining that set, the state­
ment is simply meaningless. 
In [2], OS is shown to 
a 
a failure detector is precisely 
be the weakest class for consensus (with a majority of 
correct processes) among 
failure detectors 
all possible 
that comply with the original definition of a failure 
detector in [IJ. According to that definition (recalled 
in Section 2.2), 
defined 
as  a function of the failure pattern. Any function of 
including 
the failure pattern is a failure detector, 
about future fail­
function that provides information 
ures. Such a failure detector does not really factor 
out synchrony assumptions of the system: it cannot 
be implemented 
tem -remember that the motivation 
failure detectors 
assumptions 
In this paper, we restrict 
tors as functions 
following, 
detectors 
include among others, Eventually 
failure defectors. In other words, class 'R intersects 
with both classes S and O'P. We then illustrate 
this 
notion through two simple examples. 
we first define the class 'R of realistic 
(those that cannot guess the future), which 
Perfect and Strong 
our space to failure detec­
In the 
of the "past" failure pattern. 
failure 
was basically to factor out synchrony 
within an abstract formalism. 
even in a perfectly 
of introducing 
synchronous 
sys­
3.1 Definition 
Roughly speaking, we say that a failure detector is 
realistic if it cannot guess the future. In other words, 
there is no time t and no failure 
failure detector can provide exact information 
crashes that will hold after t in F. More precisely, 
we define the class of realistic 
the set of failure detectors V that satisfy the following 
property: 
pattern F at which the 
about 
failure detector 'R, as 
• V(F, F') E E 
Vt E <P s.t. Vt.  S t, F(tt) =  F'(td, 
we have: 
-VH E V(F),3H' 
E VCF') s.t.: Vtl S 
t, VPi En: H(Pi, td == H'(p" tI). 
if for any pair 
a failure detector V is realistic 
Basically, 
of failure patterns F and F' that are similar up to a 
given time t, whenever V outputs some information 
at a time t - k in F, V could output the very same 
information 
failure 
according 
Note that if a failure detector V is realistic, 
F, the output of V at time t is a 
any failure  pattern 
function 
of F up to time t. 
at t  kin F'. In other words, a realistic 
to what will happen in the future. 
detector cannot distinguish 
two failure patterns 
then, for 
3.2 Examples 
We illustrate 
tector examples: a realistic 
below our notiop through two failure de­
and a non-realistic 
one. 
348 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:30 UTC from IEEE Xplore.  Restrictions apply. 
3.2.1 The Scribe 
4  The weakest failure detector for 
consensus 
In short, 
in any failure pattern F, failure detector C 
We describe here the Scribe failure detector C. This 
failure detector outputs a list of processes. 
failure detector C sees what happens at aU processes 
at real time and takes notes of what it sees. More 
precisely, 
outputs, at any time t, the list of values of F up to 
time t: we denote this list by F[t]. (Remember that 
a failure  pattern 
ery positive 
processes 
failure pattern F, C(F) is the singleton 
the failure detector history H such that: 
representing  time, 
in the system il). More precisely, 
for  each 
that contains 
is a function that associates to ev­
a subset of the 
integer, 
• 'r/t E  !Il, 'rIPi E  fl, H(pi, t) =  Fit]. 
It is obvious to see that failure detector C is realistic: 
it actually 
belongs to P. 
3.2.2 The Marabout 
defined in [9]. 
detector M  (Marobout), 
Consider failure 
This failure detector outputs a list of processes. For 
any failure pattern F and at any process Pi, the output 
of the failure detector .M is constant: it is the list 
of faulty processes 
processes 
that have crashed or will crash in F. Failure 
detector M belongs both to class OP and S of 11]. 
Clearly, 
patterns F and F' such that: 
in F, Le., M outputs the list of 
M is not realistic. 
To see why, consider failure 
an 
3. va­
properties 
no two processes 
must be satisfied: 
value and must agree on one of these values. 
1. termi­
every correct process eventually decides; 2. 
decide differently; 
the value decided must have been proposed by 
In the consensus problem, the processes  propose 
initial 
The following 
nation. 
agreement. 
lidity. 
some process. 
We show here that if we do not restrict 
of faulty  processes, 
(among realistic 
any failure detector of class P solves consen­
viously, 
sus no matter how many processes 
may faiL In other 
words, we show here that if we do not restrict 
the 
failure detec­
number of faulty processes, 
tor that solves consensus can be transformed 
into  a 
failure detector of class P. We first give an intuition 
of this lower bound proof and then we give the proof 
itself. 
the number 
the weakest failure detector class 
ones) to solve consensus is P. Ob­
any realistic 
4.1 Intuitions 
We prove our lower bound result in two steps: we 
show that (a) any consensus algorithm is total: 
the 
causal chain of any decision event contains a message 
from every process that has not crashed at the time 
and then (b) if a failure detector V 
of the decision; 
implements a total consensus algorithm, 
then V can 
be transformed 
failure detector. 
into a Perfect 
1. In F1, all processes are correct, 
except PI which 
crashes at time 10. 
2. In F2, all processes are correct. 
Consider Hz. any history in M(F2). By the defini­
tion of M, the output at any process and any time of 
H2 is 0. Consider time T =  9. Up to this  time, 
Fl 
and F2 are the same. If M was realistic, 
M would 
have had a failure detector history HI in M(FI) such 
that H2 and HI are the same (at any process) up to 
time 9. This is clearly impossible 
since for any history 
HI E M(Fd, for any process Pi, and any time t  E  !Il, 
HI (Pi , t) =  {pt}. 
the class P are incomparable. 
about the future whereas P is accurate about the past. 
As observed in 19], the class M and 
In short, M is accurate 
• (a) The first part of the proof (Le., in the first 
Intuitively, 
lemma below) uses the fact that we do not re­
strict the number of faulty processes. 
we show here that no process can reach a con­
sensus decision without having "consulted" 
ev­
ery correct process. This is to prevent the case 
crash ex­
where, after the decision, 
cept the process that was not "consulted" 
and 
this process decides later differently. If all pro­
cesses that have not crashed are consulted 
every decision, 
tal. (Our notion of total is a generalisation 
the notion of total 
failure-free 
we say that the algorithm is to­
of 
defined in [15) for the 
all processes 
initially 
case.)4 
before 
In the following, 
using realistic 
to this in Section 6. 
we restrict 
ourselves 
failure detectors. 
We shall come back 
to 'algorithms 
• (b) In the second part of the proof (i.e., in the 
second 
lemma below), 
we use the fact that  V 
4TypicaIly, algorithms like the consensus algorithm of [1J 
bssed on OS is not total because only a majority needs to be 
consulted, even if all processes are correct. On  the contrary, 
the S-based  consensus  algorithm  of 
realistic 
[1J would be total with a 
failure detector. 
349 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:21:30 UTC from IEEE Xplore.  Restrictions apply. 
failure 
Roughly speaking, 
We show that if a realistic 
is realistic. 
detector D implements a total consensus algo­
into a Per­
rithm, then V can be transformed 
fect failure detector. 
we use 
the fact that the algorithm is total, and hence 
no decision is taken without "consulting" 
every 
correct process, to accurately 
track process fail­
ures. We run a sequence of consensus instances 
and we suspect a process to have crashed if and 
only if a decision is reached and the process  was 
not consulted in the decision. 
• R3: the failure pattern of R3 is exactly the same 
as in R2, but, until time t, all processes are 
scheduled exactly as in RI and all messages be­
tween are sent and received as in RI. Moreover, 
Pj is scheduled as in R2 and all messages from 
and to Pi are delayed after time t2. 
As the failure detector is realistic, 
it can behave in 
R3 as in RI until time t. In this way, Pi behaves in 
R3 as in RI and decides O. But, Pj behaves in R3 as 
in R2 and Pj decides 1: contradicting 
property of consensus. 
the agreement 
0 
4.2 Total consensus 
events 
in A, the events by which processes 
Let A be any algorithm that solves consensus. 
decision 
decide a consensus value. We say that A  is total if 
any decision 
chain [U], a message sent by  every process that has 
not crashed by time t. 
event in A at time t contains, 
in its causal 
We call 
Lemma 4.1 Consider 
not bound the number of processes 
ery consensus 
tor in this environment 
is total. 
the environment 
where we do 
that can crash. Ev­
algorithm  using 
a realistic 
failure 
detec­
PROOF (SKETCH): Assume by contradiction 
that 
there is a consensus algorithm A that is not total. 
This means that there is a  run Ro  of A such that, 
in Ro, some process Pi has a decision 
event e executed 
at some time t (e is the event by which Pi decides some 
value v), and a process Pj that has not crashed by t, 
such that no message from Pi is in the causal chain of 
e. Assume  without 
that the decision 
v is O. As there is no message from Pj in the causal 
past of e, we can assume that the value proposed by 
Pj is 1. Now consider the following 
loss of generality 
runs: 
4.3 Reduction 
algorithm T'Dp, that  emu­
failure  detector 
within 
Let A be any total consensus algorithm using V. We 
build a transformation 
lates the behaviour of a Perfect 
a variable denoted by output(1'). 
This variable is dis­
tributed &.\ld every process Pi has a copy of this vari­
able denoted byoutput(1'k 
in an infinite sequence of executions 
quence of total consensus 
instances) 
additions: 