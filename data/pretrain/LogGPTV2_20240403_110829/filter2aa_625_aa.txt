Out-of-Band File Transfer on Closed Systems 
An Insider’s Options 
Michael Rich 
@miketofet 
PI:EMAIL 
Abstract 
I present a method of transferring arbitrary binary files to and from an ostensibly closed system 
using standard office software and readily available office tools while avoiding the use of 
Internet access or magnetic media.  These methods are available to any determined 
insider.  Though the methods are not perfect, I used the techniques presented here in a 
successful proof-of-concept to deliver a selection of PowerSploit tools to an otherwise clean 
machine. 
The Challenge 
One day I was examining an internal information portal at work and discovered that the system 
was using client-side data validation to prevent XSS attacks.  This sort of security method is 
very easy to circumvent by using standard penetration testing tools such as TamperData or 
Burp Suite.  I really wanted to see what would happen if I could get the XSS test through to the 
server.  But, I was on a closed system and not at liberty to install software even if I could 
download those tools. 
At first I tried to find a way to forge the POST call on my work machine.  This machine was your 
basic Windows box with a desktop full of standard office suites.  I identified a couple of 
candidate options but I was soon distracted by the more generic question: “How can I install 
those tools that I want to use without alerting anyone?” 
By “alerting anyone” I mean avoiding those methods that have been specifically secured and 
monitored on a high-value, closed network.  Without going into detail, this generally precludes 
the use of any magnetic media or connecting to unapproved web or Internet resources.  I 
consider any path that delivers arbitrary data without triggering an alert on established 
monitoring systems to be considered “out-of-band”. 
Disclaimer 
Lest my network admins at work have a heart attack and revoke my access, let me be clear: I 
conceived of the idea at work but did all my development and testing on my home machine.  I 
remain a loyal and faithful adherent to my user agreements. 
Resources 
Almost all general-purpose office networks, if they are to be of use to an organization, have to 
have a large variety of standard office software installed.  They also are typically connected to a 
multi-function office machine of some kind.  Folks simply have to have these tools available if 
they want to create, collaborate, publish, and share anything of value. 
On my test machine I limited myself to access to a standard Microsoft Office suite, Adobe 
Acrobat, and a high quality multi-function office device. 
Overall Goal and Method   
The file transfer method I ended up pursuing was using the printer and scanner connected to 
my network.  In any functioning office, it is perfectly normal for folks to print and scan, 
sometimes in mass quantities.  Print jobs and scanned documents flowing to and from a 
networked printer are not likely to raise any curious security eyebrows. 
I came up with a series of stages to leverage the printer and scanner as my vector for importing 
and exporting arbitrary binary data from a system. Each stage consists of printing data to a 
page from a source system, scanning this page on a scanner attached to closed network, and 
interpreting the scan on the target system to transfer the arbitrary binary code to the system. 
This process can also be reversed to remove arbitrary data from the target system as well. 
For my proof-of-concept I started by printing and scanning raw text-based code snippets, moved 
on to interpreting a page of hex-encoded data, and finished by generating and using a page-
sized bar code. Each stage increased the amount of data that could be packed onto single page 
of paper until I got to the point where I could use the method to deliver a set of PowerSploit  
tools to a closed workstation with only three printed and scanned pages 
Stage 0: Get Microsoft Excel into attack mode 
“Attack mode” in Microsoft Excel means enabling the Visual Basic for Applications (VBA) 
development environment.  This is built into Excel, but typically not enabled by default.  It is 
trivial to turn it on though. A user simply clicks on "Options" under the "File" Menu, selects 
"Customize Ribbon", checks the box next to "Developer", and clicks "Ok". This enables a 
"Developer" tab on the ribbon bar with a "Visual Basic" icon on the far left. Clicking that button 
opens the VBA development environment. 
Why is this attack mode?  For three main reasons: VBA can create and run arbitrary code, VBA 
can modify arbitrary files at the byte level, and VBA can execute arbitrary functions in arbitrary 
DLL files with inputs of the attacker’s choosing.  First, with access to VBA an attacker can now 
run arbitrary code.  VBA is a fully fledged, if somewhat annoying, programming language.  While 
doing this research I reinforced a possible law of security engineering: if a user can code, the 
system isn’t secure.  It’s always been known that specialized users, such as programmers with 
access to code compilers, are a threat to a system’s security.  So, we watch them a little more 
carefully.  But every user of a general-purpose office environment has access to a full Integrated 
Development Environment at all times.  Odds are the organization lacks the manpower to watch 
every user to the same level of fidelity they lavish upon their specialized users.  This can create 
a security seam a malicious insider can exploit. 
The second reason this puts Excel into attack mode is that VBA allows byte by byte binary 
reading and writing of arbitrary files.  If the user has access to read a file they can basically do 
anything they want to it at that point.  Of course even a minimally secured machine shouldn’t 
allow the users to modify an important system file, but they can always copy it and modify their 
copy.  This sort of functionality can be leveraged to circumvent security in ways that are only 
limited by the attacker’s imagination and capability. 
The third reason is VBA’s ability to make direct calls to arbitrary functions in arbitrary DLLs with 
arbitrary inputs.  VBA can also call an executable file with any arbitrary file name; the file does 
not have to end with a ".exe" or ".dll" extension. That’s a whole lot of arbitrary to take advantage 
of. I use it here to eventually run my custom DLL but the bottom line is VBA exposes a lot of 
attack surface to take advantage of and that's why I call entering Developer mode "putting Excel 
into attack mode". 
Stage 1: VBA script import 
Now that VBA is active, we need it to run code we have carefully written and tested in our 
lab.  This is actually quite straightforward.  We simply print the script file in the lab, scan it on the 
target network, use Adobe Acrobat Optical Character Recognition to turn that scan back in to 
code, and cut and paste the code back into VBA. 
This won't be perfect, of course.  In the OCR process, Adobe will frequently drop the comment 
delimiter, making for bad lines of code.  It also likes to drop the "=" sign, turning assignment 
operations into a statement that VBA may interpret as a kind of function call.  Luckily for us, 
VBA is quite likely to highlight any egregious syntax errors in red as shown below: 
Figure 1: VBA syntax errors 
Also, once you fix the obvious errors and try to run it for the first time VBA will highlight any run 
time errors: 
Figure 2: VBA run time errors 
It is very possible the code won't work, even though it compiles and runs.  In that case the 
attacker will need to examine what they've got and compare it to their original print out.  One 
consistent mistake I saw was the movement of statements based upon an OCR 
misinterpretation of indentations or wrap-around lines.  For example, consider the word "Value" 
below: 
Figure 3: "Value" original location 
After OCR Adobe moves its location to before all of the comment lines: 
Figure 4: "Value" final location 
This same error will be present in any indented code block.  The trailing delimiter for that code 
block will typically get moved to just after the opening delimiter.  For example, with a 
FOR...NEXT statement, Adobe will move the NEXT statement to just under the FOR statement, 
effectively skipping the entire code block. 
Luckily VBA doesn't require indentation for its code blocks, they are text-delimited.  This means 
you can remove all of the idents from the code and print and scan it that way.  This makes for 
harder-to-read code but it will maintain the overall code structure. 
Some amount of editing will almost certainly be needed to make the code work but overall it is 
quite straightforward to load a script of arbitrary complexity into VBA in this manner.  If that 
script was compact enough the attacker could just type it in, of course. 
Stage 2: Hex Magic 
I wrote a VBA script that will take an arbitrary file and generate a printable hex encoded text file 
out of it.  It can also reverse the process to turn hex code back in to the original file.  That is a 
rather straightforward process.  The magic comes in by making this hex code printable, 
scannable, and easily interpreted by the OCR algorithm to recreate the original file with as few 
errors as possible. 
I did a lot of tests to figure out how much data I could pack on to a single page of hex code.  By 