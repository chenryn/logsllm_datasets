lems handling longer plaintexts. These are
either in the form of eﬃciency problems
(with very large moduli) or with keeping
plaintexts parts together after passing them
through a mix network in a “chopped-up”
manner (this,
in turn, may result in lower
eﬃciency.) Therefore, hybrid mixes have to
be employed for longer plaintexts (note that
these should all be of the same size after
having been padded). As mentioned above,
one approach, used by Abe [18], is to repli-
cate servers. Another technique, introduced
by Jakobsson and Juels [14],
involves use
of cryptographically-based error detection to
identify cheating. This approach has the ad-
vantage of permitting symmetric and asym-
metric encryption to be interleaved, leading
to eﬃcient processing of long input items.
The underlying trust assumption is that a
majority of servers is honest. This mix net
is quite fast for a small number of inputs,
although in this case is not quite as fast as
[12, 15] if the inputs are short. Additionally,
it only works as a decryption mix net, not a
re-encryption mix net.
3 Notation
We now provide notation describing the op-
eration of a simple mix net without robust-
ness against server faults.
A voting scheme can employ either of two
basic ﬂavors of mix net.
The ﬁrst of these is known as a re-
encryption mix net.
In this type of mix
net, both inputs and outputs are cipher-
texts under the public key of some (seman-
tically secure) cryptosystem that admits for
re-encryption without knowledge of the corre-
sponding private key; El Gamal is a common
choice. The action of each server in the net is
to re-encrypt inputs and then permute them.
People providing inputs typically do not need
to know the number of servers/layers of the
mix network.
The second type of mix net is known as
a decryption mix net. This is the basic mix
scheme formulated by Chaum. Inputs to the
mix net are ciphertexts constructed through
successive encryption under the public keys
of individual servers. To process inputs, each
server decrypts the layer corresponding to its
own public key in each ciphertext and then
permutes the resulting items.
Our RPC scheme is applicable to either
type of mix net. We now introduce general
notation that is applicable to either kind of
mix net.
We assume that there is a sequence of n
ciphertexts corresponding to input messages
M1, M2, . . . , Mn to the mix net, each such
ciphertext submitted by a distinct party Vi.
In the application to electronic voting, Mi is
the ballot of voter Vi. These inputs are secret;
input Mi is known only to party Vi.
The output of the mix net is a sequence
Z1, Z2, . . . , Zn. When the mix net operates
correctly, this sequence is a permutation of
the input sequence.
We assume that there are one or more pub-
lic parameters (e.g., public keys) of the mix
net, denoted collectively as PK, known to all
voters. There are also one or more secret pa-
rameters (e.g., secret keys), denoted collec-
tively as SK, which may be shared among the
servers, or alternatively by some other set of
authorities.
M1
M2
M3
M4
M5
M6
M7
M8
E
E
E
E
E
E
E
E
D
Z1
Z2
Z3
Z4
Z5
Z6
Z7
Z8
S 1
S 2
S 3
S 4
Figure 2: Generalized mix net, shown for
n=8, t=4. The n inputs M1, M2,. . . , Mn are
ﬁrst privately encrypted by their providers
using encryption function E. The t mix
servers S1, S2, . . . , St then each privately
transform and permute their inputs, and pro-
vide the result to the next server. The ﬁ-
nal decryption operation D yields a permuted
version Z1,Z2, . . . , Zn of the original input se-
quence. This ﬁnal stage may be integrated in
the previous transforms.
The general operation of a mix net is de-
picted in Figure 2. There is an initial encryp-
tion of each input message by its provider.
The resulting sequence of ciphertexts is then
provided to the ﬁrst mix server S1 of a se-
quence of t mix servers S1, S2, . . . , St. Each
mix server cryptographically transforms each
input, permutes the results, and provides the
result as input to the next server. A ﬁnal
decryption operation produces the sequence
Z1, Z2, . . . , Zn which is a permutation of the
original input sequence of messages.
We assume the existence of a public bul-
letin board where messages (digitally signed
by their poster) can be posted by anyone,
and read by anyone. This board is written in
append-only mode; nothing can be deleted or
modiﬁed once posted. The original encrypted
input sequence to the ﬁrst mix server, the
output sequence of each mix server, and the
ﬁnal decrypted message sequence will all be
posted on the bulletin board.
This decryption operation will be null in the
case of a decryption mix net, since the Xj
transforms performed all necessary decryp-
tions. In the case of a re-encryption mix net,
one or more decryption authorities knowing
SK perform this ﬁnal decryption.
We denote the initial encrypted version of
message Mi as Ci,0. That is,
Ci,0 = EPK(Mi) .
The sequence C1,0, C2,0, . . . , Cn,0 is input to
the ﬁrst server.
The postings must be non-malleable or
plaintext aware [9, 4, 6]. Thus, it may con-
sist of a ciphertext in an underlying cryp-
tosystem such as El Gamal, coupled with
a proof of knowledge of the corresponding
plaintext [20, 11, 19], or, given the multiple
layers of encryption, a proof of knowledge of
an (and any) inner layer. The reason for this
is to prevent attacks in which one (potentially
corrupt) voter posts a re-encryption of the
ballot of some other voter. (For example, sup-
pose that a corrupt voter suspects another,
target voter of having submitted an unusual
write-in vote like “Julius Caesar”. The cor-
rupt voter could re-encrypt and re-post the
vote of the target voter. If “Julius Caesar”
appears twice in the ﬁnally tally, then the
suspicions of the corrupt voter would be con-
ﬁrmed. Similar attacks can also, as is well
known, be employed for vote buying or coer-
cion.)
Server Sj, for 1 ≤ j ≤ t, cryptographically
transforms each input Ci,j−1 using a crypto-
graphic transformation function Xj. Here Xj
may depend on secret key information SK j
known only to server Sj, as well as on the
public parameters PK. The transformation
Xj may also be randomized. Each server Sj
also permutes its inputs based on a secret per-
mutation πj of {1, 2, . . . , n}, so that
Ci,j = Xj(Cπj (i),j−1) .
(1)
In the case of a re-encryption mix, a ﬁnal
decryption operation D may be applied to the
output of the ﬁnal mix server:
Zi = DSK(Ci,t) .
For a Chaumian mix net (i.e. a decryption
mix net), the public keying material PK in-
cludes an individual public key P Kj for each
in the underlying cryptosystem,
server Sj
e.g., RSA. Server Sj then holds one of the
corresponding private keys, SK j. Thus, the
encryption scheme E in this case involves suc-
cessive (random-padded) encryption of the
message Mi under P Kt, P Kt−1, . . . , P K1 re-
spectively. To satisfy the need for plaintext
awareness in E, we might employ an encryp-
tion scheme like OAEP-based RSA [5]. In a
decryption mix net, we naturally replace Xj
with a decryption function: each server Sj de-
crypts a ciphertext Cπj (i),j−1 using its private
key SKj, thereby stripping away a ciphertext
layer. As the output of server St is thus a set
of plaintexts, there is no need in a Chaumian
mix net for a further decryption operation D.
For a re-encryption mix net, the initial en-
cryption function may be a suitable plaintext-
aware version of El Gamal, as noted above.
(Note that the corresponding proofs of knowl-
edge do not have to be passed through the
mix network, but stripped oﬀ after hav-
ing been checked initially.) Each crypto-
graphic transform Xj will be a randomized
re-encryption. The ﬁnal decryption operator
D will be El Gamal decryption.
3.1 Committing to private permu-
tations
To assist in veriﬁcation of correct behav-
ior as explored in the next section, each
server Sj supplements its list of output val-
ues with a commitment to its private permu-
tation πj. So as to enable partial revelation
of πj, servers in fact commit to individual in-
put/output mappings, as we now describe.
To provide rough notation,
let ζw[i] de-
note a commitment to integer i under wit-
ness w. There are two equivalent ways for a
server Sj to commit to its private permuta-
tion πj. The ﬁrst is to express πj in terms
of mappings of input elements to output ele-
ments, i.e., as a list of commitments to the
sequence {πj(1), πj(2), . . . , πj(n)}. We de-
note a commitment of this form by Γ(In)
=
{ζwji[πj(i)]}n
i=1. A second way to specify
the private permutation πj in terms of the
mappings of output elements to input el-
i.e., as a commitment to the se-
ements,
j (n)}. We de-
quence {π−1
j (1), π−1
note the commitment to this list by Γ(Out)
=
{ζwji[π−1
(i)]}n
i=1. For either of the two forms
of commitment, we let γi,j denote the ith
commitment of server Sj.
j (2), . . . , π−1
j
j
j
In our constructions described in the next
section, a server Sj will provide with its out-
put a commitment to πj. The server will em-
ploy the form Γ(In)
depending on
j
its role in the mix network.
or Γ(Out)
j
In practice,
in the interest of speed, we
might instantiate the commitment scheme ζ
by means of a hash function h such as SHA-
1. To commit to an integer i, the committer
selects a random bitstring w, and computes
ζw[i] = h(w (cid:4) i), where (cid:4) denotes bitstring
(To ensure input of a 512-
concatenation.
bits block for the compression function in the
case where h is chosen to be, e.g., SHA-1,
it is convenient to express the integer i as a
string of (cid:5)log2 n(cid:6) bits, and w as a bitstring of
length 512 − (cid:5)log2 n(cid:6).)
It may be observed
that this form of commitment is computa-
tionally binding, with security dependent on
the collision-freeness of h. Provided that w
is long enough, the commitment is uncondi-
tionally hiding with high probability over the
choice of witness. This is because for a given
image h(w (cid:4) i) there are likely to exist many
values of w(cid:2) and i such that w(cid:2) (cid:4) i(cid:2) consti-
tutes a valid preimage.
4 Randomized Partial Checking
of a Mix Net
deleted a proper output, and replaced it by a
copy of another one, or by an output that it
generated itself. In this latter case, it would
be an appropriately encrypted output.
In our proposal, each server will – during
the checking phase – reveal a fraction p > 0 of
its input/output correspondences. The sub-
set to be revealed is selected by the other
servers, or by using a random oracle. Thus,
only some messages will have their origins
hidden by the ﬁrst mix server. But as the
messages progress through the net, eventu-
ally every message will have its origin hidden.
For an electronic election, voter privacy then
emerges as a global property of the mix net,
not a local property of each mix server.
In our formulation of the problem, the
penalty for misbehavior by a server will be
very large. We thus presume that the threat
of detection of misbehavior by a server will
be enough to ensure that the server will be-
have properly. We do not worry about the
possibility that some server will try to block
an election by, say, refusing to carry out its
duties. (Threshold mix nets are designed to
counter this threat; another approach would
be to require that each server escrow shares
of its secret key with the other servers before
voting begins.)
Similarly, the chance that a server who at-
tempts to substitute ballots will be caught
will go up exponentially fast with the num-
ber of ballots he attempts to replace. Thus,
a server could not reasonably expect to get
away with changing more than a single ballot,
or possibly two. But even when tampering
with a single ballot, his chance of discovery
is more than one-half, for reasonable settings
of the system parameters, and so we presume
that he will be deterred from even attempting
to cheat.
4.1 Revealing
a particular
in-
put/output correspondence
Of course, anyone may check that each
server has produced the same number of out-
puts as it has inputs. But a server might have
In the veriﬁcation stages of our protocol, a
server is asked to reveal a collection of in-
put/output correspondences.
If the server
has committed to input mappings, these cor-
respondences are speciﬁed in terms of the or-
dering of inputs to the server. Otherwise,
they are speciﬁed in terms of outputs to the
server.
Suppose that server Sj wishes to reveal in-
formation allowing anyone to verify a particu-
lar input/output correspondence. Let us sup-
pose that input Ck,j−1 maps to Ci,j. That is,
the secret permutation πj known only to Sj
maps i to k (see equation (1)).
The server reveals the triple
(k, i, Rjki),
is the information necessary to
where Rjki
validate equation (1). For a decryption mix
net, this information Rjki make take the
form of random padding created by the initial
provider and used when encrypting Ci,j to ob-
tain Ck,j−1. For a re-encryption mix net, this
information Rjki takes the form of random
parameters used to control the re-encryption,