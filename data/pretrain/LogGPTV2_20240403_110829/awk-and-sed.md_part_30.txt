作为系统变量的数组
指
定的脚本。在这种情况下，
Westerns
$ awk -f argv.awk 1234 "John Wayne" Westerns n=44 -
9
BEGIN ↑ for (x = O; x2
for (x = 1; x< ARGC; ++x)
，当然可以将它赋给一个变量。例如，
50192241
 print ARGV[x]
if（ARGV[x]!~/~[0-9]+$/）
# loop until we get a name
delete ARGV[1]
name =
）{
ARGV[1]
-210-
用正则表达式来测试命令行参数。在下面
exit 1 
 print ARGV[x],
命令行的参数将传递给 ShelI而不
第八章
"is not an integer."
我们可以编写一个
条件、循环和数组
---
## Page 211
继续处理下一个元素。
在特殊的情况下，
最后一个元素。
有
开。同样地，
可以把文件名放置在数组的末尾，这样就可以像在命令行中指定的一样被打
因为可以再ARGV数组中添加和删除，因此有许多潜在的有趣的处理。例如，
件名。当然，你可以设计一个测试以允许这个语法）。
参数且将第二个作为文件名（这个脚本不允许在没有给出人名的情况下提供文
第一个例子在命令行上提供了名字，
下面是这个脚本的几个运行的示例：
从标准输入中读入下一行。
么我们将提示输入名字，getline 函数将在第十章讨论；使用这个语法，可以
数，则将会被解释为可选的电话号书库的文件名。如果参数的个数小于2，那
“var=value”形式；否则，它将在随后被解释为文件名。如果提供了另外的参
从数组中删除。这是非常重要的，
二个参数ARGV[1]使我们所需要的，那么将它赋给变量 name。然后将这个参数
Shell命令行的所有参数传递给awk 的命令行。如果提供了参数，我们假设第
我们通过测试变量ARGC来看参数个数是否大于2，通过指定“$*”可以讲
如
多少元素可以处理。因此，简单地递增 ARGC 将使 awk 不能检测到 ARGV 中的
果向 ARGV中添加元素，也必须递增 ARGC；awk 使用 ARGC 的值来得到ARGV 中
Alice Gold (707) 724-0000
Alice Watson (617) 555-0000
$ phone Alice /usr/central/phonebase
Alice Gold (707) 724-0000
Enter a name? Alice
$ phone 
John Robinson 696-0987
$ phone John
！’
$1~
$* phones. data
name {
你也可以从数组中删除文件名，那么它将永远无法打开。注意
 print $1, $NF
QQ群：
如果ARGV 的元素的值是一个空串（“”），awk 将跳过它并
50192241
printf("Enter a name? ")
如果命令行上提供的这个参数不是
211
第二个提示用户，
第八章
第三个给出两个命令行
条件、循环和数组
你
---
## Page 212
样，你将会觉得这些结构简单易学。
些完善，
构的应用。如果你对变成还不熟悉，
这一章包含了许多重要的程序结构。你在以后章节的例子中将会看到对这些结
也可以修改数组ENVIRON 中的任意元素：
值没有变化），
但是这个修改并不改变用户的真实环境（例如，
可以使用变量名作为数组的下标访问任意元素：
是printenv）。
数组的下标是变量的名字。该脚本产生与 env 命令相同的输出（在一些系统中
量。下面的程序循环访问了数组 ENVIRON 的所有元素并进行打印。
数组 ENVIRON 被分别添加到 gawk 和 MKS awk 中。
环境变量数组
 ENVIRON["LOGNAME"] = "Tom"
 ENVIRON["LOGNAME"]
EDITOR=/usr/bin/vi
SHELL=/bin/csh 
PATH=: /bin:/usr/bin: /usr/ucb: /work/bin: /mac/bin:.
MAIL=/usr/mai l/dale
DISPLAY=scr ibe: 0. 0 
$ awk -f environ.awk
TERM=mac2cs
FRAME=Shell 3 
BEGIN{
HOME=/work/dale
LOGNAME=dale
# environ.awk - print environment variable
TZ=PST8PDT
而且应该自己编写一些小程序。这是最基本的，就像如何使用动词一
QQ群：
for (env in ENVIRON)
 同样也没有改变程序的环境，这些程序是 awk 使用 getline 
，现在被包含在 POSIX标准的 awk 中。它允许你访问环境变
50192241
print env "=" ENVIRON[env]
-212-
则应该花一些时间来运行本章的示例并做
当执行完 awk 时，LOGNAME 的
第八章
然后被添加到 System V
条件、循环和数组
---
## Page 213
函数atan2（）有两个参数并返回这两个参数上的反正切，表达式：
三角函数sin（）和cos（）的运行方式相同，将用弧度表示的角度作为参数并
三角函数
srand (x)
atan2 (y, x)
sqr t(x)
sin(x)
exp(x)
cos (x)
awk 函数
表9-1：
值型值。表 9-1概括了这些算术函数。
有9个内置函数可以被归类为算术函数，它们大多数接受数值型参数并返回数
算术函数
函数，允许你编写自己的函数来扩展内置函数。
许多内置函数，可分为两组：算术函数和字符串函数。Awk也支持用户自定义
rand()
log (x)
int (x)
函数是一个独立的计算过程，
本章内容：
自定义函数
字符串函数
算术函数
awk 的内置算术函数
QQ群：
天的时间。返回旧的种子值。
建立rand（）的新的种子数。如果没有指定种子数，就用当
返回为随机数r，其中 0<=r<1
返回y/x的反正切，其值在-π 到π 之间
返回×的平方根
返回×的正弦(x为弧度)
返回×的自然对数（以e为底)
返回×的整数部分的值
返回e的x次幂
返回×的余弦 (x为弧度)
描述
50192241
它接受一些参数作为输入并返回一些值，awk 有
-213 -
，用这个数乘以π/180）。三角
第九章 函数
第九章
函数
---
## Page 214
则不合适。参见下面的程序：
于重复测试相同的操作，
用 srand（）
如果没有调用 srand（）
将用当时的时间来生成一个种子数。若有参数x，srand（）使用×作为种子
随机数发生器设置一个种子数或起点数。如果调用 srand（）时没有参数，
函数rand（）生成一个在0和1之间的浮点型的伪随机数。函数 srand（）
随机数的生成
int（）函数是简单的舍位，
这两个语句的输出结果显示在下面：
整数函数
返回数据2.71828，
函数exp（）是自然指数，
函
只
结果是π。
“%.0f”实现舍入）
数int（）
有一个并返回这个数（正数）的平方根。
数log（）是函数exp（）的反函数，即×的自然数，函数sqrt（）的参数
BEGIN {
# rand.awk－测试随机数的生成
33.3333
print int (100/3)
8
print 100/3
exp(1)
atan2(0, -1)
srand()
）将数值型数据小数点右边的数字移去得到它的舍位。参见下面的
使得你的程序在每次运行时都从同一个种子数开始。这可以用
QQ群：
，即自然对数的底e。因此 exp（x）是e的×次幂。
但是如果希望程序在不同的时间运行具有不同的操作
、awk 在开始执行程序之前默认为以某个常量为参数调
50192241
，它是以é为底的指数。表达式：
没有使用四舍五入法则（使用printf格式
214
第九章函数
为
---
## Page 215
脚本之前，我们先运行该脚本。
到30之间的6个随机数。这些数据按从小到大排序并输出，以便阅读。在阅读
6）和数据系列中的最大值（默认为30）。使用×和y的默认值将缠成位于1
列数据中挑选×个数。
为了说明如何使用rand（）
Pick’ em 
列，如果需要可以反复使用这一序列执行程序。
的。后面两个数不同是因为我们为rand（）提供了新的种子数。
注1：
产生了4个随即数据。现在我们来看再次运行程序将发生什么：
打印两次rand（）函数的结果。我们来看程序的运行：
这里首先打印了两次rand（）函数的结果，
函
数srand（）的返回值是它所使用的种子数。这可被用来跟踪随机数的序
16916202227
Pick 7 of 35
$ lotto 7 35
913 25 28 29
Pick 6 of 30
$ lotto
0.305033
0.787988
0.175726
0.513871
$ awk -f rand. awk
0.263863
0.760277
0.175726
0.513871
6 awk -f rand.awk
S
print rand ()
print rand ()
printf 进行舍入的方式在附录二“awk 的快速参考”中讨论。
QQ群：
30
。这个脚本被命名为lotto，
50192241
我们将参见一个脚本，该脚本用来实现一个抽彩
215
然后调用 srand（）函数，接着再
他/她从1 到y之间的一系
第九章 函数
---
## Page 216
可以用这个程序打印热河一个数，例如在1到100之间的一个数。
print 1 + int (r * TOPNUM)
TOPNUM之间的一个数。然后将这个数的小数部分去掉并加1，最后一步操作是
因为rand（）函数返回的值在0和1之间，用TOPNUM来乘以它得到0 到
print int (r * TOPNUM)
print r * TOPNUM
print r = rand()
语句
将这个表达式分成几部分来看有助于了解该表达式。
主例程首先调用 srand（）函数产生随机数发生器的种子数，然后调用rand
序中没有其他的语句，因此在完成 BEGIN过程后退出 awk。
shelI脚本需要从命令行中得到一个参数，
必要的，
列数据中生成一个随机数的一小部分程序：
完整的lotto 脚本是很复杂的，
个数据中打印出了7个随机数。
第一个例子使用默认值打印了从1到30之间的6个随机数，第二个例子从35
（）函数生成一个随机数。
“TOPNUM=$1”的形式传递给程序，
8
#打印挑选的结果
#取得一个随机数
#用当前的时间作种子数生成随机数
BEGIN {
#主例程
awk -v TOPNUM=$1 ′
$ pick1 100
select = 1 + int(rand() * TOPNUM)
 print select
 select = 1 +
srand()
，因为rand（）函数可能返回0.在这个例子中，生成的随机数是15.你
QQ群：
从y个数据中挑选一个随机数
int (rand() * TOPNUM)
50192241
因此在阅读整个脚本之前，我们先来看在一系
，所有的操作都在 BEGIN过程中完成。因为程
216-
15
14.0195
0.467315
结果
 并且这个参数通过使用-V 选项按 
第九章函数
---
## Page 217