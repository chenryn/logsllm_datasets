# 零、前言
这本书的目的是为您提供关于 Docker 如何实现容器网络的深入知识。无论你是每天使用 Docker 还是刚入门，这本书都会向你介绍 Docker 是如何使用 Linux 网络原语来构建网络容器的。通过大量的例子，我们将涵盖从 Linux 网络基础到最新 Docker 网络驱动程序的所有内容。在此过程中，我们还将考虑将现有的网络结构和第三方插件集成到 Docker 中。最终目标是让您对 Docker 用来为容器提供网络功能的过程感到满意。
像许多开源项目一样，Docker 是一个快速移动的软件。在出版时，Docker 的最新版本是 1.12。我已经尽了最大努力来确保这本书的内容反映了基于这个版本的最新功能和配置。无论版本如何，从 Docker 的早期版本开始，这些特性中的许多都以这样或那样的形式存在。因此，尽管在过去几年中 Docker 网络发生了重大变化，但许多网络功能仍然以相同的方式实现。正是因为这个原因，我相信这本书的大部分内容将在未来很长一段时间内保持相关性。
# **这本书涵盖了什么**
[第一章](01.html "Chapter 1. Linux Networking Constructs")、 *Linux 网络构造*，将重点向大家介绍 Linux 网络原语。将详细讨论接口创建、寻址和一般连接等主题。还将向您介绍与 Linux 主机网络配置相关的常见 Linux 命令行语法和工具。理解这些基本结构将大大提高您理解 Docker 如何处理容器网络的能力。
[第 2 章](02.html "Chapter 2. Configuring and Monitoring Docker Networks")、*配置和监控 Docker 网络*，解释 Docker 处理容器网络的默认方式。这些包括 Docker 网络操作的桥、主机和映射容器模式。我们还将开始探索 Docker 如何处理基于容器的服务到外部或外部网络的映射。还将讨论 Linux 主机对 Docker 网络的要求，以及可以修改的一些可能的 Docker 服务级别参数。
[第 3 章](03.html "Chapter 3. User-Defined Networks")、*用户定义网络*，开始我们对 Docker 用户定义网络的讨论。用户定义网络的出现极大地增加了 Docker 网络的灵活性，为终端用户提供了更多关于容器连接的可能性。我们将讨论创建用户定义的网络所需的语法，并展示如何创建用户定义的网桥和基于覆盖的网络的示例。最后，我们将介绍一些在 Docker 中隔离网段的选项。
[第 4 章](04.html "Chapter 4. Building Docker Networks")*构建 Docker 网络*，从深入探讨 Docker 如何提供容器连接开始。从一个没有网络接口的容器开始，我们将介绍让容器在网络上通信所需的所有步骤。然后，我们将继续讨论与 Docker 一起使用定制桥的其他选项，并涵盖与在 Docker 中使用 OVS 相关的多个用例。
[第 5 章](05.html "Chapter 5. Container Linking and Docker DNS")、*容器链接和 Docker DNS* 讨论了容器名称解析的可用选项。这包括默认的名称解析行为以及用户定义的网络中存在的新的嵌入式 DNS 服务器功能。在每种情况下，您都会对用于确定名称服务器分配的过程感到满意。
[第 6 章](06.html "Chapter 6. Securing Container Networks")*保护容器网络*，展示了与容器安全相关的各种特性和策略。您将看到几个选项来限制容器暴露和连接的范围。我们还将讨论实现基于容器的负载平衡器的选项，该负载平衡器利用用户定义的覆盖网络。
[第 7 章](07.html "Chapter 7. Working with Weave Net")、*与织网*合作，将是我们第一次看到与 Docker 集成的第三方网络解决方案。Weave 提供了多种与 Docker 集成的方法，包括它自己的 CLI 工具以及成熟的 Docker 驱动程序。还将演示一个使用 Weave 提供网络隔离的示例。
[第八章](08.html "Chapter 8. Working with Flannel")、*与 Flannel*合作，考察了 CoreOS 团队搭建的第三方网络插件。Flannel 是一个有趣的例子，说明了如何通过更改 Docker 服务级别参数将网络插件集成到 Docker 中。除了提供覆盖型网络，Flannel 还提供了主机网关后端，允许主机直接相互路由，只要它们满足某些要求。
[第 9 章](09.html "Chapter 9. Exploring Network Features")、*探索网络功能*，重点介绍如何将更新的网络功能集成到 Docker 中。我们将研究如何通过评估不同版本的 Docker 引擎来访问和测试这些新特性。在本章的课程中，我们还将检查现在集成的 MacVLAN 网络驱动程序以及仍在测试中的 IPVLAN 网络驱动程序。
[第 10 章](10.html "Chapter 10. Leveraging IPv6")、*利用 IPv6* ，涵盖 IPv6 和 Docker 对其的支持。考虑到 IPv4 的现状，IPv6 是一个大话题，也是一个值得高度关注的话题。在本章中，我们将回顾在 Linux 系统上使用 IPv6 的一些基础知识。然后，我们将花一些时间回顾 Docker 如何支持 IPv6，并讨论您在部署方面的一些选择。
[第 11 章](11.html "Chapter 11. Troubleshooting Docker Networks")*对 Docker 网络进行故障排除*，介绍了在对 Docker 网络进行故障排除时，您可能会采取的一些常见步骤。重点将放在验证配置上，但您也将了解到一些可以采取的步骤，以证明配置按预期工作。
# 这本书你需要什么
本书中显示的所有实验都是在运行版本 16.04 和 Docker 引擎版本 1.12 的 Ubuntu Linux 主机上执行的。
### 注
您会注意到，本书中主机上使用的网络接口名称使用熟悉的 eth (eth0、eth1 等)命名约定。虽然这仍然是许多 Linux 版本的标准，但运行 systemd 的较新版本(如 Ubuntu 16.04)现在使用了一种称为可预测网络接口名称(PNIN)的东西。使用 PNIN，网络接口根据接口本身的信息使用更可预测的名称。在这些情况下，接口名称将使用不同的名称显示，例如 ens1 或 ens32。为了使本书的内容更容易理解，我选择在所有主机上禁用 PNIN。如果你有兴趣做同样的说明，可以在网上搜索“Ubuntu 禁用可预测的接口名称”。如果您选择不这样做，只需知道您的接口名称会以不同于示例中我的接口名称的方式显示。
本书所示的实验室要求包含在每个配方的开头。后来的配方可能建立在早期配方中显示的配置上。
# 这本书是给谁的
这本书是为那些有兴趣了解更多关于 Docker 如何实现容器网络的人准备的。虽然菜谱涵盖了让您启动和运行所需的许多基础知识，但假设您对 Linux 和 Docker 有一定的工作知识。还假设您对网络有基本的了解。
# 惯例
在这本书里，你会发现许多区分不同种类信息的文本样式。以下是这些风格的一些例子和对它们的意义的解释。
文本、文件路径和可执行文件中的码字如下所示:
“使用`ip link show`命令可以看到主机上的接口”。
任何命令行输入或输出都编写如下:
```
user@net1:~$ sudo ifdown eth1 && sudo ifup eth1
```
在可能的情况下，任何多行命令行输入都将使用 Linux 行延续方法编写，在要延续的行的末尾包含一个尾随的`\`:
```
user@net1:~$ sudo ip netns exec ns_1 ip link set \
dev edge_veth1 master edge_bridge1
```
在某些情况下，命令行输出也将是多行的。在这些情况下，格式化是为了使输出易于阅读。
当我们希望将您的注意力吸引到命令行输出的特定部分时，相关的行或项目以粗体显示:
```
user@net2:~$ ip addr show eth0
2: eth0:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:0c:29:59:ca:ca brd ff:ff:ff:ff:ff:ff
    inet 172.16.10.2/26 brd 172.16.10.63 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::20c:29ff:fe59:caca/64 scope link
       valid_lft forever preferred_lft forever
user@net2:~$
```
### 注
警告或重要提示会出现在这样的框中。
# 读者反馈
我们随时欢迎读者的反馈。让我们知道你对这本书的看法——你喜欢或不喜欢什么。读者反馈对我们来说很重要，因为它有助于我们开发出你真正能从中获益的标题。
要给我们发送一般反馈，只需发送电子邮件``，并在您的邮件主题中提及书名。
如果你对某个主题有专业知识，并且对写作或投稿感兴趣，请参见我们位于[www.packtpub.com/authors](http://www.packtpub.com/authors)的作者指南。
# 客户支持
现在，您已经自豪地拥有了一本书，我们有许多东西可以帮助您从购买中获得最大收益。
## 勘误表
尽管我们尽了最大努力来确保我们内容的准确性，但错误还是会发生。如果你在我们的某本书里发现了错误——可能是文本或代码中的错误——如果你能向我们报告，我们将不胜感激。通过这样做，你可以让其他读者免受挫折，并帮助我们改进这本书的后续版本。如果您发现任何勘误表，请访问[http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择您的书籍，点击**勘误表提交表**链接，并输入您的勘误表的详细信息。一旦您的勘误表得到验证，您的提交将被接受，勘误表将上传到我们的网站或添加到该标题勘误表部分下的任何现有勘误表列表中。
要查看之前提交的勘误表，请前往[https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)并在搜索栏中输入图书名称。所需信息将出现在**勘误表**部分。
## 盗版
互联网上版权材料的盗版是所有媒体的一个持续问题。在 Packt，我们非常重视版权和许可证的保护。如果您在互联网上遇到任何形式的我们作品的非法拷贝，请立即向我们提供位置地址或网站名称，以便我们寻求补救。
请通过``联系我们，获取疑似盗版资料的链接。
我们感谢您在保护我们的作者方面的帮助，以及我们为您带来有价值内容的能力。
## 问题
如果您对本书的任何方面有问题，可以在``联系我们，我们将尽最大努力解决问题。