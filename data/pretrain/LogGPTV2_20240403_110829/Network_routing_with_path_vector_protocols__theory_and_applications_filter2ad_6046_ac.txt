conventional shortest paths. The second, to widest paths. A
widest path is a path of maximum width, where the width of
a path is its capacity, which equals the capacity of its bottle-
neck link. The third row corresponds to most-reliable paths.
The reliability of a path is the product of the non-failure
probabilities of its constituent links. The fourth row corre-
sponds to widest-shortest paths. A widest-shortest path is a
widest path among the set of shortest paths from one node
to another.
In the shortest path problem, a free network is a net-
work in which every cycle has at least one link with length
greater than zero. We can, for instance, conclude that if
every link in a network has length greater than zero, then a
path vector protocol always converges to shortest paths or
to widest-shortest paths no matter the relative preferences
given to paths with the same length or the same combina-
tion of length and width. In the widest path problem, every
cycle makes a network non-free. In order for a path vector
protocol to converge to widest paths, each node should pre-
fer paths with the minimum number of links, among paths
of the same width.
7.3 Non-isotonic algebra
IGRP [2] is a distance vector protocol and not a path vec-
tor protocol. We use its composite metric as an example of
an algebra that is monotone but not isotone, against what
one would expect to ﬁnd in a performance-oriented environ-
ment. The conclusion that this composite metric does not
make packets travel over optimal paths holds for both path
vector and distance vector protocols.
In its most basic form, the composite metric of IGRP
can be described by an algebra with L = R+ × R+, Σ =
0 ∪ {+∞}. The ﬁrst component of a
L ∪ {, φ}, W = R+
label represents length, and the second represents capacity.
Accordingly, (d1, b1) ⊕ (d2, b2) = (d1 + d2, min(b1, b2)). The
order (cid:5) is ≤, and the function f is given by
f ((d, b)) = d +
k
b
,
where k is a positive constant.
It is easy to verify that
the algebra is monotone. The failure of isotonicity can
be exempliﬁed with the inequalities f ((2, k)) = 3  6 =
f ((2, k/4)) = f ((1, k/4) ⊕ (1, k/4)).
7.4 Customer-provider and peer-peer relation-
ships
We now turn to policy-based routing and BGP. In policy-
based routing, the main goal is to make the path vector
protocol converge. If and when it does converge, it converges
to local-optimal paths, which may or may not be optimal
paths.
The system in this section is taken from Guideline A in [4],
and rests on the customer-provider and peer-peer relation-
ships established between Internet domains [10]. We have
L = {c, r, p}, Σ = L ∪ {, φ}, and W = {0, 1, 2, +∞}. The
linear order (cid:5) is ≤. Links joining providers to customers
are called customer links, and have label c;
links joining
customers to providers are called provider links, and have
label p; and links joining peers to other peers are called peer
links, and have label r. We will call primary paths to the
usable paths obtained with the guidelines of this section.
Primary paths are subdivided by their signatures into four
classes: trivial paths, comprised of a single node, have sig-
nature ; customer paths, whose ﬁrst link is a customer link,
have signature c; peer paths, whose ﬁrst link is a peer link,
have signature r; and provider paths, whose ﬁrst link is a
provider link, have signature p. The ⊕ operation is given
in the next chart, where the ﬁrst operand, a label, appears
in the ﬁrst column and the second operand, a signature,
appears in the ﬁrst row.
⊕ 
c
c
r
r
p
p
label
signature
c
c
r
p
r
p
φ φ
φ φ
p
p
For example, c ⊕ r = φ means that a peer path cannot be
In other words, a
extended to become a customer path.
node does not export to a provider a path that it learned
from a peer.
From the deﬁnition of operation ⊕, we deduce that any
primary path is of the form P ◦ R ◦ C, where path P con-
tains only provider links, path R is either a trivial path or
a path formed by a single peer link, and path C contains
only customer links. Any of the paths P , R, and C can be
a trivial path. Figure 4 depicts a network where links have
2
c
c
p
5
r
r
p
c
0
r
r
c
3
p
r
r
p
c
4
p
p
6
r
r
1
c
Figure 4: Network with customer-provider and
peer-peer relationships. Labels are taken from the
set {c, r, p}, where c, r, and p, identify customer, peer,
and provider links, respectively. Peer links are rep-
resented with dashed lines as a visualization aid.
labels taken from set L. Node 5 is a provider of node 2, and
consequently, node 2 is a customer of node 5. Nodes 2 and
3 are peers. Link (5, 2) is a customer link; link (2, 5) is a
provider link; and links (2, 3) and (3, 2) are peer links. Path
5 2 0 is a customer path; path 3 6 5 2 0 is a provider path;
and path 3 2 0 is a peer path. Paths 5 2 3 0 and 2 0 3, for
example, are not primary paths.
The function f is given by
f () = 0
f (c) = 1
f (r) = f (p) = 2
f (φ) = +∞.
The inequality f (c) = 1 < 2 = f (r) = f (p) means that a
node always prefers a customer path to either a peer path
or a provider path. It turns out that this algebra is both
monotone and isotone, so that the path vector protocol can
always be made to converge, and when it does, it converges
to optimal paths, although that was not a requirement in
the ﬁrst place.
We use the procedure of Section 6.3 to identify the free
networks associated with this algebra. Scanning the pairs
label-signature, we obtain: L0 is the empty set, since 0 =
f () ≺ f (l ⊕ ) for every l ∈ L; L1 = {c}, since 1 = f (c) =
f (c ⊕ c); and L2 = {p}, since 2 = f (r) = f (p ⊕ r) = f (p) =
f (p ⊕ p). In conclusion, a free network is a network without
cycles where all links have label c or all links have label p.
In terms of the relationships established between Internet
domains, a free Internet is a network where no domain is a
provider of one of its direct or indirect providers. If we want
to guarantee convergence of the path vector protocol with-
out restricting the relationships between domains, it suﬃces
to have each domain break ties within paths of same class,
customer, provider, or peer, with the number of links in the
path.
7.5 Backup paths
The system is taken from [3], and is an upgrowth of the
system of the previous section that contemplates backup re-
lationships between Internet domains. Backup relationships
expand the set of usable paths to reach any particular desti-
We have L = R+×{c, r}∪{p}, Σ = R+
nation, thus conferring robustness to the system in the pres-
ence of link failures. For example, if links (6, 5) and (3, 0)
are down in the network of Figure 4, then the parsimonious
relationships of the previous section would isolate node 6
from node 0. With the backup relationships of this section,
node 6 could still reach node 0 over paths 6 3 2 0 and 6 4 1 0
for instance. We will call backup paths to the usable paths
that are not primary paths. Every backup path contains at
least one step as subpath. A step is a three-node path such
that: the ﬁrst link is a customer link and the second link
is a peer link; both the ﬁrst and the second links are peer
links; or the ﬁrst link is a peer link and the second link is a
provider link.
0 ×{c, r, p}∪{, φ},
0 ×{1, 2}∪{0, +∞}. The set W is lexicograph-
and W = R+
ically ordered based on the order ≤. Trivial paths have
signature . The signatures of non-trivial paths have two
components. The ﬁrst is called avoidance level and is such
that the lower its value the most preferred the path. The
second component is the class of the path, deﬁned as in
the previous section as a function of its ﬁrst link: customer
paths are marked with letter c; peer paths are marked with
letter r; and provider paths are marked with letter p. As for
labels, the letters c, r, and p identify customer, peer, and
provider links, respectively. In a label of the form (y, c) or
(y, r), the value y is positive and corresponds to the amount
that the avoidance level of a path must increase when a step
is found. The ⊕ operation is given in the next chart.
⊕
(y, c)
(y, r)
p

(0, c)
(0, r)
(0, p)
(x, c)
(x, c)
(x, r)
(x, p)
(x, r)
(x + y, c)
(x + y, r)
(x, p)
(x, p)
φ
(x + y, r)
(x, p)
For example, (y, c) ⊕ (x, p) = φ means that a node does
not export a path learned from one provider to a diﬀerent
provider. In this system, this is the only restriction in ex-
porting paths. As another example, (y, c)⊕(x, r) = (x+y, c)
means that a customer can export a peer path to one of its
providers, thus creating a step, but the avoidance level of
the extended path must increase. In Figure 4, path 5 2 3 0
is a customer path containing step 5 2 3; path 0 3 2 5 is
a provider path containing step 3 2 5; and path 4 3 2 0
is a peer path containing step 4 3 2. All these paths are
backup paths. Path 2 0 3, for example, is neither primary
nor backup, that is, it is not usable.
The function f is given next.
f () = 0
f ((x, c)) = (x, 1)
f ((x, r)) = f ((x, p)) = (x, 2)
f (φ) = +∞
Note that the function f together with the order relation
(cid:5) gives predominance to the avoidance level of a path over
its class, and that primary paths have an avoidance level of
0, meaning that they are always preferred to backup paths.
The algebra is monotone but not isotone. The freeness con-
dition is equivalent to the statement that there is no cycle
where all links have labels taken from R+ × {c}, or all links
have label p.
The system in [3] is more general than presented here in
that the avoidance level of a path may also increase when
there is no step, and the increase in avoidance level may
depend on properties of the path, other than its class.
It
is possible to account for the more general system with an
expanded algebra.
7.6 Non-monotonic algebra
As an example of an algebra that is not monotone consider
the algebra of the previous section but with the ordering
of the set W being inverse-lexicographic, instead of lexico-
graphic. That is, (x1, n1) (cid:5) (x2, n2) if and only if n1 < n2,
or n1 = n2 and x1 ≤ x2. In this algebra, the class of the path
has predominance over its avoidance level: a node always
prefers customer paths to peer or provider paths; among
customer paths, or among peer and provider paths, it pref-
eres those with the smallest avoidance level. However, this
algebra is not monotone, for f ((3, r)) = (3, 2) (cid:12) (4, 1) =
f ((3 + 1, c)) = f ((1, c) ⊕ (3, r)). With this algebra there are
networks in which a path vector may never converge.
7.7 Performance extensions
(cid:5), φ(cid:5),⊕(cid:5), f(cid:5)
), with W (cid:5)(cid:5)
There has been some interest in extending BGP to ac-
commodate performance-aware parameters on top of policy
guidelines [17]. Here, we take the simple case where the
performance of a path is gauged only by its width to illus-
trate the general principle that compounding a monotonic
algebra with another yields a monotonic algebra, but that
compounding a isotonic algebra with another may not yield
an isotonic algebra.
Let (W (cid:5),(cid:5)(cid:5), L(cid:5), Σ
) be the algebra that describes
the policy guidelines of Section 7.4, and let (W (cid:5)(cid:5),≥, W (cid:5)(cid:5), W (cid:5)(cid:5)
0 ∪ {+∞} and f(cid:5)(cid:5)
, 0, min, f(cid:5)(cid:5)
the identity
mapping, be the algebra of widest paths (see Section 7.2).
Both these algebras are isotonic. The compounded alge-
bra that gives predominance to policy-based routing is the
algebra with W = W (cid:5) × W (cid:5)(cid:5)
, and Σ =
(cid:5) × Σ
. The ⊕ operation is given by (α1, b1) ⊕ (α2, b2) =
(cid:5)(cid:5)
Σ
(α1 ⊕(cid:5) α2, min(b1, b2)), the function f is given by f ((α, b)) =
(α), b), and the order (cid:5) is such that (n1, b1) (cid:5) (n2, b2) if
(f(cid:5)
n1 < n2 or n1 = n2 and b1 ≥ b2. This algebra is monotone
but not isotone. For example, f ((c, 5)) = (1, 5) ≺ (2, 10) =
f ((p, 10)) whereas f ((p, 10) ⊕ (c, 5)) = (2, 5) (cid:12) (2, 10) =
f ((p, 10) ⊕ (p, 10)).
, L = L(cid:5) × L(cid:5)(cid:5)
= R+
The practical conclusion to be taken from this discussion
is that the performance-aware paths chosen by the nodes
lack global signiﬁcance in general: they are local-optimal
paths, not optimal-paths. For instance, the provider path
chosen by a node upon convergence of the protocol is not