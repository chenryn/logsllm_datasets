*/5****/usr/bin/python/data/detector/runmonitor.py>/dev/null2>&1
最后，配置系统crontab，5分钟作一次数据采集，内容如下：
Self.STARTTRANSFER_TIME=Decimal(str(round(Curlobj.getinfo(Curlobj.
TIME）,2））)
self.PRETRANSFER_TIME=Decimal(str(round(Curlobj.getinfo(Curlobj.PRETRANSFER
TIME)，2)）)
self.NAMELOOKUP_TIME=Decimal(str(round(Curlobj.getinfo(Curlobj.NAMELOoKUP
Curlobj.perform()
Curlobj.setopt(Curlobj.WRITEDATA,bodyfile)
Curlobj.setopt(Curlobj.NOPROGRESS,1)
Curlobj.setopt(Curlobj.OPT_FILETIME,1)
Curlobj.setopt(Curlobj.MAXREDIRS,5)
Curlobj.setopt(Curlobj.FOLLOWLOCATION,1)
Curlobj.setopt(Curlobj.NOPROGRESS,O)
Curlobj.setopt(Curlobj.TIMEOUT,TIMEoUT)
Curlobj.Setopt(Curlobj.CONNECTTIMEOUT,CONNECTTIMEOUT)
#定义setopt请求器常量，各参数详细说明见2.4节
另一个为提供业务服务质量采集功能的runmonitor.py，采用了pycurl模块实现，通过定
self.HTTP_CODE=
self.TOTAL_TIME = Decimal(str(round(Curlobj.getinfo(Curlobj.TOTAL_TIME),2)))
bodyfile.close()
bodyfile
Curlobj.setopt(Curlobj.URL,
Curlobj =pycurl.Curl()
MOBILETO="136****3463"
#告警手机号
MAILTo="PI:EMAIL,PI:EMAIL"
#告警邮件地址
Linux公社www.linuxidc.com
Curlobj.getinfo(Curlobj.HTTP_CoDE)
各参数详细说明见2.4节
url)
#创建Curl对象
#定义请求的URL
第15章构建分布式质量监控平台261
---
## Page 290
Server部署在同一台主机上。部分关键源码如下：
rrdtool作业部署在任一台安装rrdtool模块的主机上即可，本示例的rrdtool作业与Web
录，再将数据通过rrdtool.updatevO方法做rrdtool更新，最后更新数据库标志MARK为"1。
能提供数据支持。
262第三部分案例篇
TIME,PRETRANSFER_TIME,STARTTRANSFER_TIME,TOTAL_TIME,HTTP_CODE,SPEED
【/data/www/Servermonitor/webmonitor/updaterrd.py】
Str(rowobjI"NAMELOOKUP_
def
def
def updateRRD(self,rowobj):
try:
getNewdata(self):
except Exception,e:
try:
setMARK(self,_id):
except Exception,e:
try:
str(self.rrdfiletype[2])+'.rrd'
unavailable_rrdpath=RRDPATH+'/'+str(self.getURL(FID))+'/'+str(FID)+'_'+\
str(self.rrdfiletype[0])+'.rrd'
time_rrdpath=RRDPATH+'/'+str(self.getURL(FID))+'/+str(FID)+'_'+\
FID=rowobj["FID"]
else:
if str(rowobj["HTTP_CODE"])=="200":
str(self.rrdfiletype[1])+'.rrd"
logging.error('SetMark datebase error:'+str(e))
logging.error('Update rrd error:'+str(e))
rrdtool.updatev(download_rrdpath,'%s:%s′(str(rowobj["DATETIME"]),\
rrdtool.updatev(time_rrdpath,%s:%s:%s:%s:%s:%s′%(str(rowobj["DATETIME"])\
unavailablevalue=1
self.cursor.execute("select ID,FID,NAMELOOKUP_TIME,CONNECT
MARK='1' where ID==%s+"%(_id))
unavailablevalue=0
Linux公社 www.linuxidc.com
self.conn.commit（)
self.cursor.execute("update webmonitor_monitordata set
self.setMARK(rowobj["ID"])
,str(unavailablevalue)))
["DATETIME"])\
rrdtool.updatev(unavailable_rrdpath,'%s:%s′%(str(rowobj
str(rowobj["SPEED_DOWNLOAD"])))
具体方法是通过查询webmonitor_monitordata表字段MARK为"0的记
#将查询的MySQL记录更新到rrd文件
#更新已标志记录方法
#获取未标志的新记录方法
#更新rrd文件方法
#更新数据库标志
#指定三个特性数据rrdtoo1文件位置
#非HTTP200状态标志“1”
---
## Page 291
15.5.1
配置及功能实现方法。
SQL方式来代替Django的ORM，为熟悉SQL的人员提供另一种选择。下面详细介绍项目
15.5
钟，内容如下：
作为一个新Django 项目，第一步需要创建一个项目，操作如下：
服务器端以 Web的形式作为服务平台，以Django作为开发框架，结合rrdtool模块实
SYSTEM_NAME="分布式质量监控平台V1.0”
BASE_DIR = os.path.dirname (os.path,abspath(_file_))
修改项目 setings.py，关键配置项如下：
在创建的omaudit 目录中修改 urls.py，添加App的URL映射规则，内容如下：
# django-admin.py startproject Servermonitor
*/5 ****/usr/bin/python /data/www/Servermonitor/webmonitor/updaterrd.py>/
可根据实际情况相应修改，最后配置系统crontab，建议与采集同一执行频率，如每5分
import os
urlpatterns=patterns('webmonitor.views'
from django.conf.urls.defaults import*
#cd/data/www
dev/nul12>&1
同目录下的config.py为rrdtool作业配置文件，定义了数据库连接信息及项目路径等信
服务器端功能设计
（r'^s',*index'）,
Django配置
（r'monitorlist/','monitorlist'),
(r'add/,add'),
(r'add_do/','adddo'),
except Exception,e:
Linux公社
logging.error('Get new database
for row in self.cursor.fetchall():
self.updateRRD(row)
#映射到add方法，实现新增业务页面渲染
www.linuxidc.com
#映射到adddo方法，实现新增业务提交服务器端处理
#映射到monitorlist 方法，实现前端扫描记录列表展示
#定义系统名称
：实现前端首页渲染
第15章
error:'+str(e))
构建分布式质量监控平台
263
---
## Page 292
能截图如图15-4所示。
的rrdtool文件，图表包括业务请求响应时间统计、业务下载速度、业务可用性统计。前端功
名称、监控URL、告警通知方式、探测点及规则等；二为创建所选择的探测点三个图表对应
15.5.2
以下结合具体功能对两个 App进行介绍。
264第三部分案例篇
业务增加模块后台实现了两个功能点：一为将业务信息写人MySQL数据库，包括业务
start参数值
创建rrd文件功能利用了rrdtool模块的createO方法实现，
项目包括两个App，其中，webmonitor 为功能应用，publicclass 用于提供公共方法调用。
def create_rrd(url):
-create_rrd(url)
=创建rrd
DOWN_APEED_YMAX=8388608
TIME_YMAX=1
TIME ALARM=1
MAINAPPPATH=BASEDIR+"/webmonitor"
#定义webmonitor app 路径，调用graphrrd.sh用rrd绘图相关参数
PNGPATH=BASE_DIR+"/site_media/rrdtool"
RRDPATH=BASE_DIR+"/rrd"
，=
11 1
111
写业务信息
选择探测点：
业务名称：
cur_time=str(int(time.time()))
domain=GetURLdomain (url)
URL=url
探测规则：
监控URL：
HID=[]
业务增加功能
Linux公社
200状态码自定义返回串：
移动联通电信
短信邮件MSN/Yahoo
#定义“业务请求响应时间统计”
#定义“业务下载速度统计”
#rrdtool rrd文件存储路径
图15-4前端功能截图
 www.linuxidc.com
增加
#调用GetURLdomain（）方法获取URL域名部分
#获取当前Linux时间戳，作为rrdool.create方法的
图表Y轴最大值，单位为秒
返回
#rrdtool 生成 png 存储路径
图表Y轴最大值，单位为字节
#定义采集IDC
，实现源码如下：
---
## Page 293
信、联通两个运营商探测点，对该业务做数据采集时，将产生两份数据。
一个运营商被视为一个独立业务，产生的数据也是独立的。比如，在增加业务时选择了电
的rrd文件清单，见图15-5。前缀“17_、18_”
针对“www.baidu.com”
for id inHID:
HID=getID(URL)
except Exception,e:
try:
Linux公社
logging.error('create rrd error!'+str(e))
if rrd_time:
#参数指定rrd文件路径，如“项目根目录/rrd/www.baidu.com/17_time.rrd"；
（其他两张图表rrdtool.create方法类似，此处省略）
#
step指定步长，设置为300秒，
#
始时间，
logging.error(rrdtool.error())
图15-5生成不同运营商的rrd数据文件
RRA:MIN:0.5:444:797')
'RRA:MIN:0.5:24:775
RRA:MIN:0.5:6:700
RRA:MIN:0.5:1:600
'RRA:MAX:0.5:444:797.
RRA:MAX:0.5:24:775
RRA:MAX:0.5:6:700
RRA:MAX:0.5:1:600',
RRA:AVERAGE:0.5:288:797',
'RRA:AVERAGE:0.5:24:775
RRA:AVERAGE:0.5:6:700
RRA:AVERAGE:0.5:1:600,
DS:TOTAL TIME:GAUGE:600:0:U',
'DS:STARTTRANSFER_TIME:GAUGE:600:0:U',
”业务增加成功后，执行“#llrrd/www.baidu.com”，输出已生成
'DS:PRETRANSFER_TIME:GAUGE:600:0:U',
#调用getID（）方法获取URL对应的所有采集点ID
#遍历采集点ID
00
 www.linuxidc.com
00
8
352280
-step'
代表不同运营商探测点ID。对采集端而言，
即每隔5分钟收到一个值；start指定第一条记录的起
5
第15章构建分布式质量监控平台265
30
30
300
81
#最大、最小合并数据
#定义数据存放格式（RRA），分别为平均
供
-start',cur_time
输
码说明
其他参数说明可参考3.2节案例
#直接存入RRD;
#GAUGE计量类型，收到数据
#定义数据5个数据源（DS）
#输入数据的界限
,009,
为心跳值，即
润
可
---
## Page 294
时间为空则为常规报表，最新3小时报表具体见图15-6。
前月、当前年；自定义报表根据选择的时间范围定制。在页面中提交前保持起始时间与结束
15.5.3
266第三部分案例篇
速度(秒)
泉东首页—苗测钢图法（白定义】
速度(秒)
自定义报表根据选择的时间范围进行rrdtool查询，结果如图15-7所示。
分布式质量监控平台提供了非常丰富的报表功能，
京东首页图[日】
选择业务：京东首页（电信）
8
选择业务：京东首页（电信）
业务报表功能
Linux公社 www.linuxidc.com
业务请求响应时间统计-京东首页
业务请求响应时间统计-京东首页
图15-6输出业务“当前（最新3小时》”报表
起舶时间：2014-06-2812:22:00结束时间：201406-2818:2216
起始时间：
图15-7输出自定义时间报表
更新
:2014-06
结束时间：
2818:22
18:20
次数（X）
速度（字节/秒）
次数（次）
下教速度平均8s1kbyte最大975ktyte展小158kbyte
速度（字节/秒）
，常规报表包括最近3小时、当天、当
自服务不可用平均：0.03最大：0.99最小0.00
下载速康平均：802kbyte最大1021ktyte融小5kbye
回服务不可用平均：0.00最大0.00最小：0.00
00
提交添加应用
16:00
提交添加应用
业务可用性统计-京东首页
业务下载速度统计-京东首页
业务可用性统计-京东首页
业务下载速度统计-京东首页
14:00
17:00
16:00
18:00
18:00
---
## Page 295
调用，实现关键代码如下：
解决此问题，最终采用原生 rrdtool命令行方案，在Django 中视图中通过os.systemO方法来
graph生成图表时要求有中文支持，但Python的rrdtool模块没有封装“--font”参数，为了
、月、年图表对应分别为“-3h、-1day、-1month、-lyear”，参数“--end”为当前时间
DEF:TOTAL_TIME=S{rrdfile}:TOTAL_TIME:AVERAGE\
DEF:STARTTRANSFER_TIME=S{rrdfile):STARTTRANSFER_TIME:AVERAGE
DEF:PRETRANSFER_TIME=S(rrdfile}:PRETRANSFER_TIME:AVERAGE\
DEF:CONNECT_TIME=S(rrdfile):CONNECT_TIME:AVERAGE\
DEF:NAMELOOKUP_TIME=${rrdfile}:NAMELOOKUP_TIME:AVERAGE
--title
Alarm=$8
ymax=$7
GraphEnd=$6
GraphStart=$5
u${ymax}-r
--base=1024\
--start
/usr/local/rrdtool/bin/rrdtool graph$(pngfile)
#
appname=$4
rrdtype=$3
pngfile=$2
rrdfile=$1
#!/bin/sh
两种报表实现原理是通过定制 graph方法的“--start”参数来实现，如常规报表中当前、
-lower-limit=0
-end$(GraphEnd}\
BACK#ffffff
定义两种字体
CANVAS#eeffff
FONT#OO0O00
AXIS#000000
ARROW#FFO000
FRAME#006600
SHADEB#808080
SHADEA#808080
AXIS:8:$(rrdtool_font_msyh)
UNIT:8:${rrdtool_font_msyh)\
TITLE:9:S(rrdtool_font_msyhbd}
Linux公社
#接收Y轴最大值
#接收告警红线值
#接收rrdtool结束时间
#
#接收rrd类别，区分定义的三种图表
接收rrdtool文件路径
接收业务名称
#修改1k对应的刻度，默认为1000
==
#接收rrdtool起始时间
："time"];then
#定义Y轴最大值
#图形背景（不含数据区域）
#
#X、Y轴线颜色
#限制Y轴的下限
#图形数
#X、Y轴箭头颜色
数据标记说明边框颜色
#右上边框颜色
#左上边框颜
#图表结束时间