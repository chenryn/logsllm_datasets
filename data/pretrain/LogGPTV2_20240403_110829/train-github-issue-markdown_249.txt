    trait Bar { fn dummy(&self); }
    trait Car { fn dummy(&self); }
    trait Foo {
        type A;
        type B: Bar;
        type C: Car;
        fn get_b(&self) -> &Self::B;
    }
    fn test_bar>(_: &B) {}
    fn test>(f: &F) {
        test_bar(f.get_b());
    }
Gives me:
    :15:16: 15:23 error: the trait `Bar` is not implemented for the type `::B` [E0277]
    :15     test_bar(f.get_b());
                             ^~~~~~~
    :15:16: 15:23 error: the trait `Car` is not implemented for the type `::C` [E0277]
    :15     test_bar(f.get_b());
                             ^~~~~~~
    error: aborting due to 2 previous errors
    playpen: application terminated with error code 101
There is a workaround:
    fn test, C: Car, F: Foo>(f: &F) {
        test_bar(f.get_b());
    }
But it's ugly and should not be necessary.
We hit this problem a lot with gfx::Device, and I'd like to see cleaner use of
it without explicit `CommandBuffer` bounds that we use as a workaround.