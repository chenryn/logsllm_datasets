# Windows内存破坏漏洞的现代探索，Part I：堆栈溢出（四）
|
##### 译文声明
本文是翻译文章，文章原作者 forrest-orr，文章来源：forrest-orr.net
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
在上一篇文章中，我们为读者解释了ROP链的创建过程，以及执行任意代码的实现过程，在本文中，我们继续为读者介绍针对SEH劫持技术的一种强大的防御机制，即SEHOP。
## SEHOP
实际上，在Windows中还有一种更为强大的SEH劫持缓解机制，称为SEH覆写保护（SEH Overwrite
Protection，SEHOP），它可以抗衡这里描述的方法。引入SEHOP的目的，是为了既可以检测EXCEPTION_REGISTRATION_RECORD损坏，又无需重新编译应用程序或依靠每个模块的漏洞利用缓解方案，如SafeSEH。为此，SEHOP将在SEH链的底部引入一个额外的链接，并在异常发生时通过检查是否可以通过遍历SEH链而到达该链接，来实现SEH劫持的防御机制。由于EXCEPTION_REGISTRATION_RECORD的NSEH字段存储在handler字段之前，因此，在通过堆栈溢出破坏现有的SEH
handler时，必然会破坏NSEH，以及破坏整个链（原理上类似于堆栈金丝雀（stack
canary），其中金丝雀就是NSEH字段本身）。SEHOP是在Windows Vista SP1（在默认情况下禁用）和Windows Server
2008（在默认情况下启用）中引入的，在过去的十年中，SEHOP一直处于这种半启用状态（在工作站上禁用，在服务器上启用）。值得注意的是，最近随着Windows
10 v1709的发布，这种情况已经发生了变化：SEHOP已经成为默认启用的漏洞缓解功能了。
图27 来自WIndows 10上的Windows安全中心的SEHOP设置
这似乎与上一节在Windows
10虚拟机上探讨的SEH劫持溢出情况相矛盾。为什么SEHOP没有能够在exploit的初始阶段阻止EIP重定向到堆栈pivot？虽然我们还不是十分清楚，然而这似乎是微软方面配置错误的问题。当我对之前探索溢出所用EXE程序单独进行设置，并手动点选“Override
system
settings”框后，SEHOP机制就开始发挥威力：堆栈pivot将无法执行。令人费解的是，在默认情况下，系统已经在该进程上启用了SEHOP机制。
图28 在用于演示堆栈溢出漏洞的EXE程序上设置SEHOP
这有可能是微软方面有意的配置，只是在上面的截图中被曲解了。由于SEHOP与第三方应用程序（如Skype和Cygwin）不兼容，因此，SEHOP在历史上一直被广泛禁用（微软在这里讨论了这个问题）。当SEHOP与本文中讨论的其他漏洞缓解措施一起正确启用时，在没有链式内存泄漏（任意读取）或任意写入原语的情况下，SEH劫持将无法用于利用堆栈溢出漏洞。任意读取原语可以允许NSEH字段在溢出前被泄漏，这样就可以制作溢出数据，以便在EIP劫持期间不破坏SEH链。通过任意写入原语（在下一节讨论），攻击者可以覆盖存储在栈上的返回地址或SEH
handler，而不会破坏NSEH或堆栈金丝雀的值，从而绕过SEHOP和堆栈Cookie缓解措施。
## 任意写入&局部变量破坏
在某些情况下，攻击者根本就不需要溢出函数堆栈帧的末尾来触发EIP重定向。如果他们可以在不需要覆盖堆栈Cookie的情况下成功地获得代码执行权限，那么堆栈Cookie验证检查就可以轻松绕过。为此，有一种方法是使用堆栈溢出来破坏函数中的局部变量，以便让应用程序将我们选择的值写入我们选择的地址。下面的示例函数包含可以用这种方式利用的逻辑。
    uint32_t gdwGlobalVar = 0;
    void Overflow(uint8_t* pInputBuf, uint32_t dwInputBufSize) {
    char Buf[16];
    uint32_t dwVar1 = 1;
    uint32_t* pdwVar2 = &gdwGlobalVar;
    memcpy(Buf, pInputBuf, dwInputBufSize);
    *pdwVar2 = dwVar1;
    }
图29假设存在任意写栈溢出漏洞的函数
从根本上讲，我们要利用的是一个非常简单的代码模式：
  1. 函数必须包含一个容易发生堆栈溢出的数组或结构。
  2. 该函数必须包含至少两个局部变量：一个解引用的指针和一个用于写入该指针的值。
  3. 函数必须使用局部变量写入解引用的指针，并在堆栈溢出发生后执行这个操作。
  4. 函数必须以这样的方式进行编译：即溢出的数组在堆栈上存储的位置比局部变量低。
最后一点是一个值得进一步研究的问题。我们希望MSVC（Visual Studio
2019使用的编译器）以这样的方式编译图29中的代码：Buf的16个字节被放在分配给栈帧内存的最低区域（当包含堆栈Cookie时，应该是总共28个字节），然后是最高区域的dwVar1和pdwVar2。这个顺序与源代码中声明这些变量的顺序是一致的；这允许Buf向前溢出到更高的内存中，并用我们选择的值覆盖dwVar1和pdwVar2的值，从而使我们用于覆盖dwVar1的值被放在我们选择的内存地址上。然而在现实中，情况并非如此，编译器给出的汇编代码如下所示：
    push ebp
    mov ebp,esp
    sub esp,1C
    mov eax,dword ptr ds:[]
    xor eax,ebp
    mov dword ptr ss:[ebp-4],eax
    mov dword ptr ss:[ebp-1C],1
    mov dword ptr ss:[ebp-18],
    mov ecx,dword ptr ss:[ebp+C]
    push ecx
    mov edx,dword ptr ss:[ebp+8]
    push edx
    lea eax,dword ptr ss:[ebp-14]
    push eax
    call
    add esp,C
    mov ecx,dword ptr ss:[ebp-18]
    mov edx,dword ptr ss:[ebp-1C]
    mov dword ptr ds:[ecx],edx
    mov ecx,dword ptr ss:[ebp-4]
    xor ecx,ebp
    call 
    mov esp,ebp
    pop ebp
    ret
图30 图29中假设含有漏洞的函数的编译结果
从上面的反汇编代码中我们可以看到，编译器已经在EBP-0x4和EBP-0x14之间的最高内存部分中选择了一个对应于Buf的区域，并且已经在EBP-0x1C和EBP-0x18的最低内存部分中分别为dwVar1和pdwVar2选择了一个区域。这种排序使易受攻击的函数免受局部变量通过堆栈溢出而损坏的影响。也许最有趣的是，dwVar1和pdwVar2的排序与它们在源代码中相对于Buf的声明顺序相矛盾。这最初让我觉得很不解，因为我认为MSVC会根据变量的声明顺序来排序，但进一步的测试证明事实并非如此。实际上，进一步的测试证明，MSVC并不是根据变量的声明、类型或名称的顺序来排序，而是根据它们在源代码中被引用（使用）次数来排序：引用次数多的变量将优先于那些引用次数少的变量。
    void Test() {
    uint32_t A;
    uint32_t B;
    uint32_t C;
    uint32_t D;
    B = 2;
    A = 1;
    D = 4;
    C = 3;
    C++;
    }
图31 用于演示反直觉变量排序的C语言代码
因此，我们可以预期这个函数的编译会按以下方式排列变量：C、B、A、D。这符合变量引用(使用)次数的顺序，而不是它们被声明的顺序。其中，C将被放在第一位(内存中最高地址处，距离EBP的偏移量最小)，因为它被引用了两次，而其他变量都只被引用了一次。
    push ebp
    mov ebp,esp
    sub esp,10
    mov dword ptr ss:[ebp-8],2
    mov dword ptr ss:[ebp-C],1
    mov dword ptr ss:[ebp-10],4
    mov dword ptr ss:[ebp-4],3
    mov eax,dword ptr ss:[ebp-4]
    add eax,1
    mov dword ptr ss:[ebp-4],eax
    mov esp,ebp
    pop ebp
    ret
图32 图31的C代码对应的汇编代码
果然，我们可以看到，变量都已经按照我们预测的顺序排列，其中，C位于EBP –
4处，也就是排在第一位。尽管如此，MSVC使用的排序逻辑与我们在图30中看到的情况相矛盾。毕竟，dwVar1和pdwVar2的引用次数（各两次）都比Buf高（在memcpy中只有一次），而且都是在Buf之前引用的。那么这是怎么回事呢？GS包含了一个额外的安全缓解功能，它试图安全地对局部变量进行排序，以防止由于堆栈溢出而导致可利用的局部变量破坏。
图33 在GS机制下生成的具有安全变量顺序堆栈布局
绕过在项目设置中禁用GS，会产生以下代码：
    push ebp
    mov ebp,esp
    sub esp,18
    mov dword ptr ss:[ebp-8],1
    mov dword ptr ss:[ebp-4],
    mov eax,dword ptr ss:[ebp+C]
    push eax
    mov ecx,dword ptr ss:[ebp+8]
    push ecx
    lea edx,dword ptr ss:[ebp-18]
    push edx
    call
    add esp,C
    mov eax,dword ptr ss:[ebp-4]
    mov ecx,dword ptr ss:[ebp-8]
    mov dword ptr ds:[eax],ecx
    mov esp,ebp
    pop ebp
    ret
图34图29中的源代码在没有使用/GS标志的情况下的编译结果
仔细对比上图34中的汇编代码和图30中的原始（安全）汇编代码，大家就会发现，从这个函数中删除的可不仅仅是堆栈Cookie检查。事实上，MSVC已经完全重新排列了堆栈上的变量，使其与正常规则一致，因此将Buf数组放在了内存的最低区域（EBP
– 0x18）。因此，这个函数现在很容易通过堆栈溢出导致局部变量损坏。
在用多种不同的变量类型（包括其他数组类型）测试了同样的逻辑后，我得出如下结论：MSVC对数组和结构体（GS缓冲区）有一个特殊的规则，即总是将它们放在内存的最高区域，以防止编译后的函数的局部变量因堆栈溢出而遭到破坏。了解到这些信息后，我开始尝试评估这个安全机制的复杂程度，并设法通过边缘案例（edge
cases）来绕过它。我发现了多个，下面是我认为最显著的例子。
首先，让我们来看看如果图29中的memcpy被移除会发生什么情况。
    void Overflow() {
    uint8_t Buf[16] = { 0 };