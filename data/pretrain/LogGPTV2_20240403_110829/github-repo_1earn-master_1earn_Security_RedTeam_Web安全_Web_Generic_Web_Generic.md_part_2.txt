访问 http://10.10.10.131:8080/1.php%0A ,成功解析
---
### 其他
在 windows 环境下,`xx.jpg[空格]` 或 `xx.jpg.` 这两类文件都是不允许存在的,若这样命名,windows 会默认除去空格或点,黑客可以通过抓包,在文件名后加一个空格或者点绕过黑名单.若上传成功,空格和点都会被 windows 自动消除,这样也可以 getshell.
**CGI 解析漏洞**
`/.php`
---
## 文件上传
- [Upload](./Upload.md)
---
## 信息泄露
**相关文章**
- [谈谈源码泄露](https://blog.csdn.net/GitChat/article/details/79014538)
- [敏感文件泄露](https://www.xazlsec.com/index.php/archives/62/)
**相关工具**
- [lijiejie/BBScan](https://github.com/lijiejie/BBScan) - 用于渗透测试前期，快速地对大量目标进行扫描，发现信息泄露等常见漏洞，找到可能的突破入口。
- [jerrychan807/WSPIH](https://github.com/jerrychan807/WSPIH) - 网站个人敏感信息文件扫描器
- [ring04h/weakfilescan](https://github.com/ring04h/weakfilescan) - 动态多线程敏感信息泄露检测工具
- [0xHJK/dumpall](https://github.com/0xHJK/dumpall) - 一款信息泄漏利用工具，适用于 .git/.svn 源代码泄漏和 .DS_Store 泄漏
    ```bash
    # pip安装
    pip install dumpall
    # 查看版本
    dumpall --version
    # 示例
    dumpall -u http://example.com/.git/
    dumpall -u http://example.com/.svn/
    dumpall -u http://example.com/.DS_Store
    dumpall -u http://example.com/
    ```
- [donot-wong/sensinfor](https://github.com/donot-wong/sensinfor) - 一个自动扫描敏感文件的chrome扩展.
---
### 目录浏览
**Tips**
使用 wget 遍历下载所有文件
```
wget -r --no-pare target.com/dir
```
### Fileread
- [Fileread](./Fileread.md)
---
### 源码泄露
#### GIT
**简介**
当在一个空目录执行 git init 时,Git 会创建一个 `.git` 目录. 这个目录包含所有的 Git 存储和操作的对象. 如果想备份或复制一个版本库,只需把这个目录拷贝至另一处就可以了.
- `/.git/config`
**相关案例**
- [大众点评某站点 git 泄漏源代码](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0117332)
**相关工具**
- [lijiejie/GitHack](https://github.com/lijiejie/GitHack) - 一个 `.git` 泄露利用脚本，通过泄露的.git文件夹下的文件，重建还原工程源代码。
    ```bash
    python2 GitHack.py http://www.openssl.org/.git/
    ```
- [gakki429/Git_Extract](https://github.com/gakki429/Git_Extract) - 提取远程 git 泄露或本地 git 的工具
    ```bash
    python2 git_extract.py http://example.com/.git/  # 一个存在 .git 泄露的网站
    python2 git_extract.py example/.git/             # 一个本地的 .git 路径
    ```
---
#### SVN
- `/.svn/entries`
**相关案例**
- [我爱我家某处源码泄露](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0149331)
**相关工具**
- [kost/dvcs-ripper](https://github.com/kost/dvcs-ripper) - SVN/GIT/HG 等版本控制系统的扫描工具
- [admintony/svnExploit](https://github.com/admintony/svnExploit) - 一款 SVN 源代码利用工具，其完美支持 SVN1.7 版本的 SVN 源代码泄露
---
#### bzr
**相关工具**
- [kost/dvcs-ripper](https://github.com/kost/dvcs-ripper) - SVN/GIT/HG 等版本控制系统的扫描工具
    ```
    rip-bzr.pl -v -u http://www.example.com/.bzr/
    ```
---
### DS_Store文件泄漏
**简介**
`.DS_Store` 文件 MAC 系统是用来存储这个文件夹的显示属性的:比如文件图标的摆放位置.如果用户删除以后的副作用就是这些信息的失去.
这些文件本来是给 Finder 使用的,但它们被设想作为一种更通用的有关显示设置的元数据存储,诸如图标位置和视图设置. 当你需要把代码上传的时候,安全正确的操作应该把 `.DS_Store` 文件删除才正确.
因为里面包含了一些目录信息,如果没有删除,攻击者通过 `.DS_Store` 可以知道这个目录里面所有文件名称,从而让攻击者掌握了更多的信息. 
**相关案例**
- [TCL 某网站 DS_Store 文件泄露敏感信息](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-091869)
**相关工具**
- [lijiejie/ds_store_exp](https://github.com/lijiejie/ds_store_exp) - 一个 `.DS_Store` 文件泄漏利用脚本，它解析 `.DS_Store` 文件并递归地下载文件到本地。
- [anantshri/DS_Store_crawler_parser](https://github.com/anantshri/DS_Store_crawler_parser) - `.DS_Store` 文件解析脚本,递归地获取文件夹内的 `.ds_Store`
- [gehaxelt/Python-dsstore](https://github.com/gehaxelt/Python-dsstore)
---
### SWP文件泄露
**简介**
swp 即 swap 文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为 .filename.swp。
直接访问 .swp 文件，下载回来后删掉末尾的 .swp，获得源码文件
---
### gedit备份文件
**简介**
linux 下，gedit 保存后当前目录会生成后缀为 “~” 的文件，然后通过浏览器访问这个文件就能得到原始文件的内容。
---
### 网站备份压缩文件
**简介**
该漏洞的成因主要有是管理员将备份文件放在到 web 服务器可以访问的目录下.
该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载,利用源代码中所包含的各类敏感信息,如服务器数据库连接信息,服务器配置信息等会因此而泄露,造成巨大的损失.
**相关案例**
- [百度某分站备份文件泄露](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2014-050622)
- [乐友商城 24GB 代码与数据库敏感文件泄露](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2015-0124051)
**相关工具**
- [bufsnake/blueming](https://github.com/bufsnake/blueming) - 备份文件扫描，并自动进行下载
- [oscommonjs/scan-backup-langzi-](https://github.com/oscommonjs/scan-backup-langzi-) - 扫描备份文件和敏感信息泄漏的扫描器
- [VMsec/ihoneyBakFileScan_Modify](https://github.com/VMsec/ihoneyBakFileScan_Modify) - 批量网站备份文件扫描器，增加文件规则，优化内存占用
**Tips**
- 有时候文件太大,想先确认一下文件结构和部分内容,这时可以使用 remotezip,直接列出远程 zip 文件的内容，而无需完全下载,甚至可以远程解压,仅下载部分内容
    ```BASH
    pip3 install remotezip
    remotezip -l "http://site/bigfile.zip"          # 列出远程zip文件的内容
    remotezip "http://site/bigfile.zip" "file.txt"  # 从远程zip⽂件解压出file.txt
    ```
---
### WEB-INF/web.xml信息泄露
**简介**
WEB-INF 是 Java 的 WEB 应用的安全目录.该目录原则上来说是客户端无法访问,只有服务端才可以可以访问.如果想在页面中直接访问其中的文件,必须通过 `web.xml` 文件对要访问的文件进行相应映射才能访问.
WEB-INF 主要包含一下文件或目录:
```
/WEB-INF/web.xml:Web 应用程序配置文件,描述了 servlet 和其他的应用组件配置及命名规则;
/WEB-INF/classes/:含了站点所有用的 class 文件,包括 servlet class 和非 servlet class,他们不能包含在 .jar 文件中;
/WEB-INF/lib/:存放 web 应用需要的各种 JAR 文件,放置仅在这个应用中要求使用的 jar 文件 , 如数据库驱动 jar 文件;
/WEB-INF/src/:源码目录,按照包名结构放置各个 java 文件;
/WEB-INF/database.properties:数据库配置文件.
```
不过在一些特定的场合却会让攻击者能读取到其中的内容,从而造成源码泄露.
**相关案例**
- [华为官网 WEB-INF 目录配置文件导致信息泄露](http://wy.zone.ci/bug_detail.php?wybug_id=wooyun-2013-022906)
---
### idea文件夹泄露
**相关工具**
- [lijiejie/idea_exploit](https://github.com/lijiejie/idea_exploit) - 一个 `.idea` 文件泄漏利用脚本
---
### JS敏感信息泄露
**相关文章**
- [JS 敏感信息泄露:不容忽视的 WEB 漏洞](https://www.secpulse.com/archives/35877.html)
- [Making use of Javascript (.JS) files](https://www.bugbountyhunter.com/guides/?type=javascript_files)
**相关案例**
- [从JS信息泄露到Webshell](http://r3start.net/index.php/2019/07/15/546)
- [一次有意思的js未授权访问](https://mp.weixin.qq.com/s/E9PqzhNHYOC8pRJ7FQonfg)
- [JS 接口导致信息泄露](https://mp.weixin.qq.com/s/_dqdpBqEXELQNE2kqUq6xQ)
**相关工具**
- [m4ll0k/SecretFinder](https://github.com/m4ll0k/SecretFinder) - 通过正则在 JS 中发现敏感数据，如 apikeys、accesstoken、authorizations、jwt，..等等
    ```bash
    python3 SecretFinder.py -i https://example.com/ -e
    ```
    建议自行添加如下规则
    ```re
    'access_key': r'[Aa](ccess|CCESS)_?[Kk](ey|EY)|[Aa](ccess|CCESS)_?[sS](ecret|ECRET)|[Aa](ccess|CCESS)_?(id|ID|Id)',
    'secret_key': r'[Ss](ecret|ECRET)_?[Kk](ey|EY)',
    'JWT': r'[= ]ey[A-Za-z0-9_-]*\.[A-Za-z0-9._-]*',
    'ALL_JWT': r'[= ]ey[A-Za-z0-9_\/+-]*\.[A-Za-z0-9._\/+-]*',
    ```
- [Threezh1/JSFinder](https://github.com/Threezh1/JSFinder) - 通过在 js 文件中提取 URL,子域名
    ```bash
    python JSFinder.py -u http://www.xxx.com -d -ou url.txt -os subdomain.txt
    python JSFinder.py -u http://www.xxx.com -d -c "session=xxx"    # -c 指定cookie来爬取页面
    python JSFinder.py -f text.txt -j   # 批量指定URL/指定JS
    ```