(ee341-2144-55ba...)
Provider name
(Microsoft Base Cryptographic Provider 1.0)
EFS certificate hash
(cb3e4e...)
Encrypted FEK
(03fe4f3c...)
FIGURE 11-70 Format of EFS information and key entries.
EFS stores information about recovery key entries in a file’s data recovery field (DRF). The format of 
DRF entries is identical to the format of DDF entries. The DRF’s purpose is to let designated accounts, or 
recovery agents, decrypt a user’s file when administrative authority must have access to the user’s data. 
For example, suppose a company employee forgot his or her logon password. An administrator can 
reset the user’s password, but without recovery agents, no one can recover the user’s encrypted data.
714
CHAPTER 11
Caching and file systems
Recovery agents are defined with the Encrypted Data Recovery Agents security policy of the local 
computer or domain. This policy is available from the Local Security Policy MMC snap-in, as shown in 
Figure 11-71. When you use the Add Recovery Agent Wizard (by right-clicking Encrypting File System 
and then clicking Add Data Recovery Agent), you can add recovery agents and specify which private/
public key pairs (designated by their certificates) the recovery agents use for EFS recovery. Lsasrv (Local 
Security Authority service, which is covered in Chapter 7 of Part 1) interprets the recovery policy when it 
initializes and when it receives notification that the recovery policy has changed. EFS creates a DRF key 
entry for each recovery agent by using the cryptographic provider registered for EFS recovery.
FIGURE 11-71 Encrypted Data Recovery Agents group policy.
A user can create their own Data Recovery Agent (DRA) certificate by using the cipher /r com-
mand. The generated private certificate file can be imported by the Recovery Agent Wizard and by the 
Certificates snap-in of the domain controller or the machine on which the administrator should be able 
to decrypt encrypted files.
As the final step in creating EFS information for a file, Lsasrv calculates a checksum for the DDF and 
DRF by using the MD5 hash facility of Base Cryptographic Provider 1.0. Lsasrv stores the checksum’s 
result in the EFS information header. EFS references this checksum during decryption to ensure that the 
contents of a file’s EFS information haven’t become corrupted or been tampered with.
Encrypting file data
When a user encrypts an existing file, the following process occurs:
1.
The EFS service opens the file for exclusive access.
2.
All data streams in the file are copied to a plaintext temporary file in the system’s
temporary directory.
3.
A FEK is randomly generated and used to encrypt the file by using AES-256.
CHAPTER 11
Caching and file systems
715
4.
A DDF is created to contain the FEK encrypted by using the user’s public key. EFS automatically
obtains the user’s public key from the user’s X.509 version 3 file encryption certificate.
5.
If a recovery agent has been designated through Group Policy, a DRF is created to contain the
FEK encrypted by using RSA and the recovery agent’s public key.
6.
EFS automatically obtains the recovery agent’s public key for file recovery from the recov-
ery agent’s X.509 version 3 certificate, which is stored in the EFS recovery policy. If there are
multiple recovery agents, a copy of the FEK is encrypted by using each agent’s public key, and a
DRF is created to store each encrypted FEK.
Note The file recovery property in the certificate is an example of an enhanced 
key usage (EKU) field. An EKU extension and extended property specify and limit 
the valid uses of a certificate. File Recovery is one of the EKU fields defined by 
Microsoft as part of the Microsoft public key infrastructure (PKI).
7.
EFS writes the encrypted data, along with the DDF and the DRF, back to the file. Because sym-
metric encryption does not add additional data, file size increase is minimal after encryption.
The metadata, consisting primarily of encrypted FEKs, is usually less than 1 KB. File size in bytes
before and after encryption is normally reported to be the same.
8.
The plaintext temporary file is deleted.
When a user saves a file to a folder that has been configured for encryption, the process is similar 
except that no temporary file is created.
The decryption process
When an application accesses an encrypted file, decryption proceeds as follows:
1.
NTFS recognizes that the file is encrypted and sends a request to the EFS driver.
2.
The EFS driver retrieves the DDF and passes it to the EFS service.
3.
The EFS service retrieves the user’s private key from the user’s profile and uses it to decrypt the
DDF and obtain the FEK.
4.
The EFS service passes the FEK back to the EFS driver.
5.
The EFS driver uses the FEK to decrypt sections of the file as needed for the application.
Note When an application opens a file, only those sections of the file that the ap-
plication is using are decrypted because EFS uses cipher block chaining. The be-
havior is different if the user removes the encryption attribute from the file. In this 
case, the entire file is decrypted and rewritten as plaintext.
716
CHAPTER 11
Caching and file systems
6.
The EFS driver returns the decrypted data to NTFS, which then sends the data to the requesting
application.
Backing up encrypted files
An important aspect of any file encryption facility’s design is that file data is never available in un-
encrypted form except to applications that access the file via the encryption facility. This restriction 
particularly affects backup utilities, in which archival media store files. EFS addresses this problem by 
providing a facility for backup utilities so that the utilities can back up and restore files in their encrypt-
ed states. Thus, backup utilities don’t have to be able to decrypt file data, nor do they need to encrypt 
file data in their backup procedures.
Backup utilities use the EFS API functions OpenEncryptedFileRaw, ReadEncryptedFileRaw, WriteEncrypted 
FileRaw, and CloseEncryptedFileRaw in Windows to access a file’s encrypted contents. After a backup 
utility opens a file for raw access during a backup operation, the utility calls ReadEncryptedFileRaw to 
obtain the file data. All the EFS backup utilities APIs work by issuing FSCTL to the NTFS file system. For 
example, the ReadEncryptedFileRaw API first reads the EFS stream by issuing a FSCTL_ENCRYPTION 
_FSCTL_IO control code to the NTFS driver and then reads all of the files streams (including the DATA 
stream and optional alternate data streams); in case the stream is encrypted, the ReadEncryptedFileRaw
API uses the FSCTL_READ_RAW_ENCRYPTED control code to request the encrypted stream data to the 
file system driver.
EXPERIMENT: Viewing EFS information
EFS has a handful of other API functions that applications can use to manipulate encrypted files. 
For example, applications use the AddUsersToEncryptedFile API function to give additional users 
access to an encrypted file and RemoveUsersFromEncryptedFile to revoke users’ access to an 
encrypted file. Applications use the QueryUsersOnEncryptedFile function to obtain information 
about a file’s associated DDF and DRF key fields. QueryUsersOnEncryptedFile returns the SID, 
certificate hash value, and display information that each DDF and DRF key field contains. The fol-
lowing output is from the EFSDump utility, from Sysinternals, when an encrypted file is specified 
as a command-line argument:
C:\Andrea>efsdump Test.txt 
EFS Information Dumper v1.02 
Copyright (C) 1999 Mark Russinovich 
Systems Internals - http://www.sysinternals.com 
C:\Andrea\Test.txt:
DDF Entries: 
    WIN-46E4EFTBP6Q\Andrea: 
Andrea(Andrea@WIN-46E4EFTBP6Q) 
    Unknown user: 
Tony(Tony@WIN-46E4EFTBP6Q) 
DRF Entry:
    Unknown user: 
EFS Data Recovery 
EXPERIMENT: Viewing EFS information
EFS has a handful of other API functions that applications can use to manipulate encrypted files. 
For example, applications use the AddUsersToEncryptedFile API function to give additional users 
access to an encrypted file and RemoveUsersFromEncryptedFile to revoke users’ access to an 
encrypted file. Applications use the QueryUsersOnEncryptedFile function to obtain information 
about a file’s associated DDF and DRF key fields. QueryUsersOnEncryptedFile returns the SID, 
certificate hash value, and display information that each DDF and DRF key field contains. The fol-
lowing output is from the EFSDump utility, from Sysinternals, when an encrypted file is specified 
as a command-line argument:
C:\Andrea>efsdump Test.txt
EFS Information Dumper v1.02
Copyright (C) 1999 Mark Russinovich
Systems Internals - http://www.sysinternals.com
C:\Andrea\Test.txt:
DDF Entries:
    WIN-46E4EFTBP6Q\Andrea:
Andrea(Andrea@WIN-46E4EFTBP6Q)
    Unknown user:
Tony(Tony@WIN-46E4EFTBP6Q)
DRF Entry: 
    Unknown user:
EFS Data Recovery 
CHAPTER 11
Caching and file systems
717
You can see that the file Test.txt has two DDF entries for the users Andrea and Tony and one 
DRF entry for the EFS Data Recovery agent, which is the only recovery agent currently registered 
on the system. You can use the cipher tool to add or remove users in the DDF entries of a file. For 
example, the command
cipher /adduser /user:Tony Test.txt
enables the user Tony to access the encrypted file Test.txt (adding an entry in the DDF of the file).
Copying encrypted files
When an encrypted file is copied, the system doesn’t decrypt the file and re-encrypt it at its destina-
tion; it just copies the encrypted data and the EFS alternate data stream to the specified destination. 
However, if the destination does not support alternate data streams—if it is not an NTFS volume (such 
as a FAT volume) or is a network share (even if the network share is an NTFS volume)—the copy cannot 
proceed normally because the alternate data streams would be lost. If the copy is done with Explorer, a 
dialog box informs the user that the destination volume does not support encryption and asks the user 
whether the file should be copied to the destination unencrypted. If the user agrees, the file will be de-
crypted and copied to the specified destination. If the copy is done from a command prompt, the copy 
command will fail and return the error message “The specified file could not be encrypted.”
BitLocker encryption offload
The NTFS file system driver uses services provided by the Encrypting File System (EFS) to perform 
file encryption and decryption. These kernel-mode services, which communicate with the user-mode 
encrypting file service (Efssvc.dll), are provided to NTFS through callbacks. When a user or application 
encrypts a file for the first time, the EFS service sends a FSCTL_SET_ENCRYPTION control code to the 
NTFS driver. The NTFS file system driver uses the “write” EFS callback to perform in-memory encryp-
tion of the data located in the original file. The actual encryption process is performed by splitting the 
file content, which is usually processed in 2-MB blocks, in small 512-byte chunks. The EFS library uses 
the BCryptEncrypt API to actually encrypt the chunk. As previously mentioned, the encryption engine 
is provided by the Kernel CNG driver (Cng.sys), which supports the AES or 3DES algorithms used by 
EFS (along with many more). As EFS encrypts each 512-byte chunk (which is the smallest physical size 
of standard hard disk sectors), at every round it updates the IV (initialization vector, also known as salt 
value, which is a 128-bit number used to provide randomization to the encryption scheme), using the 
byte offset of the current block. 
In Windows 10, encryption performance has increased thanks to BitLocker encryption ofoad. When 
BitLocker is enabled, the storage stack already includes a device created by the Full Volume Encryption 
Driver (Fvevol.sys), which, if the volume is encrypted, performs real-time encryption/decryption on 
physical disk sectors; otherwise, it simply passes through the I/O requests.
You can see that the file Test.txt has two DDF entries for the users Andrea and Tony and one 
DRF entry for the EFS Data Recovery agent, which is the only recovery agent currently registered 
on the system. You can use the cipher tool to add or remove users in the DDF entries of a file. For 
example, the command
cipher /adduser /user:Tony Test.txt
enables the user Tony to access the encrypted file Test.txt (adding an entry in the DDF of the file).
718
CHAPTER 11
Caching and file systems
The NTFS driver can defer the encryption of a file by using IRP Extensions. IRP Extensions are pro-
vided by the I/O manager (more details about the I/O manager are available in Chapter 6 of Part 1) and 
are a way to store different types of additional information in an IRP. At file creation time, the EFS driver 
probes the device stack to check whether the BitLocker control device object (CDO) is present (by us-
ing the IOCTL_FVE_GET_CDOPATH control code), and, if so, it sets a flag in the SCB, indicating that the 
stream can support encryption offload.
Every time an encrypted file is read or written, or when a file is encrypted for the first time, the NTFS 
driver, based on the previously set flag, determines whether it needs to encrypt/decrypt each file block. 
In case encryption offload is enabled, NTFS skips the call to EFS; instead, it adds an IRP extension to the 
IRP that will be sent to the related volume device for performing the physical I/O. In the IRP extension, 
the NTFS file system driver stores the starting virtual byte offset of the block of the file that the stor-
age driver is going to read or write, its size, and some flags. The NTFS driver finally emits the I/O to the 
related volume device by using the IoCallDriver API.
The volume manager will parse the IRP and send it to the correct storage driver. The BitLocker driver 
recognizes the IRP extension and encrypts the data that NTFS has sent down to the device stack, using 
its own routines, which operate on physical sectors. (Bitlocker, as a volume filter driver, doesn’t imple-
ment the concept of files and directories.) Some storage drivers, such as the Logical Disk Manager 
driver (VolmgrX.sys, which provides dynamic disk support) are filter drivers that attach to the volume 
device objects. These drivers reside below the volume manager but above the BitLocker driver, and 
they can provide data redundancy, striping, or storage virtualization, characteristics which are usually 
implemented by splitting the original IRP into multiple secondary IRPs that will be emitted to differ-
ent physical disk devices. In this case, the secondary I/Os, when intercepted by the BitLocker driver, will 
result in data encrypted by using a different salt value that would corrupt the file data. 
IRP extensions support the concept of IRP propagation, which automatically modifies the file virtual 
byte offset stored in the IRP extension every time the original IRP is split. Normally, the EFS driver encrypts 
file blocks on 512-byte boundaries, and the IRP can’t be split on an alignment less than a sector size. As a 
result, BitLocker can correctly encrypt and decrypt the data, ensuring that no corruption will happen.
Many of BitLocker driver’s routines can’t tolerate memory failures. However, since IRP extension is 
dynamically allocated from the nonpaged pool when the IRP is split, the allocation can fail. The I/O 
manager resolves this problem with the IoAllocateIrpEx routine. This routine can be used by kernel 
drivers for allocating IRPs (like the legacy IoAllocateIrp). But the new routine allocates an extra stack 
location and stores any IRP extensions in it. Drivers that request an IRP extension on IRPs allocated by 
the new API no longer need to allocate new memory from the nonpaged pool.
Note A storage driver can decide to split an IRP for different reasons—whether or not it 
needs to send multiple I/Os to multiple physical devices. The Volume Shadow Copy Driver 
(Volsnap.sys), for example, splits the I/O while it needs to read a file from a copy-on-
write volume shadow copy, if the file resides in different sections: on the live volume and 
on the Shadow Copy’s differential file (which resides in the System Volume Information 
hidden directory).
CHAPTER 11
Caching and file systems
719
Online encryption support
When a file stream is encrypted or decrypted, it is exclusively locked by the NTFS file system driver. This 
means that no applications can access the file during the entire encryption or decryption process. For 
large files, this limitation can break the file’s availability for many seconds—or even minutes. Clearly 
this is not acceptable for large file-server environments.
To resolve this, recent versions of Windows 10 introduced online encryption support. Through the 
right synchronization, the NTFS driver is able to perform file encryption and decryption without retaining 
exclusive file access. EFS enables online encryption only if the target encryption stream is a data stream 
(named or unnamed) and is nonresident. (Otherwise, a standard encryption process starts.) If both condi-
tions are satisfied, the EFS service sends a FSCTL_SET_ENCRYPTION control code to the NTFS driver to set 
a flag that enables online encryption.
Online encryption is possible thanks to the EfsBackup attribute (of type LOGGED_UTILITY_STREAM)
and to the introduction of range locks, a new feature that allows the file system driver to lock (in an 
exclusive or shared mode) only only a portion of a file. When online encryption is enabled, the 
NtfsEncryptDecryptOnline internal function starts the encryption and decryption process by creating 
the EfsBackup attribute (and its SCB) and by acquiring a shared lock on the first 2-MB range of the file. 
A shared lock means that multiple readers can still read from the file range, but other writers need to 
wait until the end of the encryption or decryption operation before they can write new data.
The NTFS driver allocates a 2-MB buffer from the nonpaged pool and reserves some clusters from 
the volume, which are needed to represent 2 MB of free space. (The total number of clusters depends 
on the volume cluster’s size.) The online encryption function reads the original data from the physical 
disk and stores it in the allocated buffer. If BitLocker encryption offload is not enabled (described in the 
previous section), the buffer is encrypted using EFS services; otherwise, the BitLocker driver encrypts 
the data when the buffer is written to the previously reserved clusters.
At this stage, NTFS locks the entire file for a brief amount of time: only the time needed to remove 
the clusters containing the unencrypted data from the original stream’s extent table, assign them to 
the EfsBackup non-resident attribute, and replace the removed range of the original stream’s extent 
table with the new clusters that contain the newly encrypted data. Before releasing the exclusive lock, 
the NTFS driver calculates a new high watermark value and stores it both in the original file in-memory 
SCB and in the EFS payload of the EFS alternate data stream. NTFS then releases the exclusive lock. The 
clusters that contain the original data are first zeroed out; then, if there are no more blocks to process, 
they are eventually freed. Otherwise, the online encryption cycle restarts with the next 2-MB chunk.
The high watermark value stores the file offset that represents the boundary between encrypted 
and nonencrypted data. Any concurrent write beyond the watermark can occur in its original form; 
other concurrent writes before the watermark need to be encrypted before they can succeed. Writes to 
the current locked range are not allowed. Figure 11-72 shows an example of an ongoing online encryp-
tion for a 16-MB file. The first two blocks (2 MB in size) already have been encrypted; the high water-
mark value is set to 4 MB, dividing the file between its encrypted and non-encrypted data. A range lock 
is set on the 2-MB block that follows the high watermark. Applications can still read from that block, 
but they can’t write any new data (in the latter case, they need to wait). The block’s data is encrypted 
720
CHAPTER 11
Caching and file systems
and stored in reserved clusters. When exclusive file ownership is taken, the original block’s clusters are 
remapped to the EfsBackup stream (by removing or splitting their entry in the original file’s extent 
table and inserting a new entry in the EfsBackup attribute), and the new clusters are inserted in place 
of the previous ones. The high watermark value is increased, the file lock is released, and the online 
encryption process proceeds to the next stage starting at the 6-MB offset; the previous clusters located 
in the EfsBackup stream are concurrently zeroed-out and can be reused for new stages.
Already Encrypted Data
Non-encrypted locked data
$DATA stream
Before the
Encryption Cycle
$DATA stream
After the
Encryption Cycle