                    case '7':
                        putChar('\7');
                        break;
                    case 'b': // 8
                        putChar('\b');
                        break;
                    case 't': // 9
                        putChar('\t');
                        break;
                    case 'n': // 10
                        putChar('\n');
                        break;
                    case 'v': // 11
                        putChar('\u000B');
                        break;
                    case 'f': // 12
                    case 'F':
                        putChar('\f');
                        break;
                    case 'r': // 13
                        putChar('\r');
                        break;
                    case '"': // 34
                        putChar('"');
                        break;
                    case '\'': // 39
                        putChar('\'');
                        break;
                    case '/': // 47
                        putChar('/');
                        break;
                    case '\\': // 92
                        putChar('\\');
                        break;
                    case 'x':
                        char x1 = next();
                        char x2 = next();
                        boolean hex1 = (x1 >= '0' && x1 = 'a' && x1 = 'A' && x1 = '0' && x2 = 'a' && x2 = 'A' && x2      @type
    @\x74ype       ->     @type
接着就是执行DefaultJSONParser.parse()，根据上一步中token的识别，进行解析处理
    public Object parse(Object fieldName) {
        final JSONLexer lexer = this.lexer;
        switch (lexer.token()) {
            case SET:
                ...HashSet集合的处理
            case TREE_SET:
                ...TreeSet集合的处理
            case LBRACKET:
                ...读取到"["，数组的处理
            case LBRACE:
                ...读取到"{"，对象解析的处理
            case LITERAL_INT:
                ...
            case LITERAL_FLOAT:
                ...
        }
    }
对象解析，反序列化的利用流程，基本都是走到LBRACE或LBRACKET中，进入对象的解析，而对象解析中，基本都会利用到符号表进行数据的提取：
    public final Object parseObject(final Map object, Object fieldName) {
        final JSONLexer lexer = this.lexer;
        if (lexer.token() == JSONToken.NULL) {
            lexer.nextToken();
            return null;
        }
        if (lexer.token() == JSONToken.RBRACE) {
            lexer.nextToken();
            return object;
        }
        if (lexer.token() == JSONToken.LITERAL_STRING && lexer.stringVal().length() == 0) {
            lexer.nextToken();
            return object;
        }
        if (lexer.token() != JSONToken.LBRACE && lexer.token() != JSONToken.COMMA) {
            throw new JSONException("syntax error, expect {, actual " + lexer.tokenName() + ", " + lexer.info());
        }
       ParseContext context = this.context;
        try {
            boolean isJsonObjectMap = object instanceof JSONObject;
            Map map = isJsonObjectMap ? ((JSONObject) object).getInnerMap() : object;
            boolean setContextFlag = false;
            for (;;) {
                lexer.skipWhitespace();
                char ch = lexer.getCurrent();
                if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {
                    while (ch == ',') {
                        lexer.next();
                        lexer.skipWhitespace();
                        ch = lexer.getCurrent();
                    }
                }
                boolean isObjectKey = false;
                Object key;
                //判断到双引号开端的，利用符号表读取双引号闭合之间字符串，从而提取出key
                if (ch == '"') {
                    key = lexer.scanSymbol(symbolTable, '"');
                    lexer.skipWhitespace();
                    ch = lexer.getCurrent();
                    if (ch != ':') {
                        throw new JSONException("expect ':' at " + lexer.pos() + ", name " + key);
                    }
                } else if (ch == '}') {
                    ...
                }
                ...
                //判断到key为@type，则进行checkAutoType，然后反序列化成Java Object
                if (key == JSON.DEFAULT_TYPE_KEY
                        && !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) {
                    ...
                    clazz = config.checkAutoType(typeName, null, lexer.getFeatures());
                    ...
                    ObjectDeserializer deserializer = config.getDeserializer(clazz);
                    Class deserClass = deserializer.getClass();
                    if (JavaBeanDeserializer.class.isAssignableFrom(deserClass)
                            && deserClass != JavaBeanDeserializer.class
                            && deserClass != ThrowableDeserializer.class) {
                        this.setResolveStatus(NONE);
                    } else if (deserializer instanceof MapDeserializer) {
                        this.setResolveStatus(NONE);
                    }
                    Object obj = deserializer.deserialze(this, clazz, fieldName);
                    return obj;
                }
            }
        } finally {
            this.setContext(context);
        }
    }
最后，总结一下：在反序列化RCE中，我们可以利用词法解析中\x\u的十六进制或者Unicode的处理，进行绕过一些检查机制。
#### 2、构造方法选择
构造方法的选择，我这一小节中，主要想讲解的是，在Fastjson反序列化中，针对每个class的特点，到底Fastjson会选择class的哪个构造方法进行反射实例化，到底是否可以不存在无参构造方法。
在上一节：
    clazz = config.checkAutoType(typeName, null, lexer.getFeatures());
    ...
    ObjectDeserializer deserializer = config.getDeserializer(clazz);
    Class deserClass = deserializer.getClass();
    if (JavaBeanDeserializer.class.isAssignableFrom(deserClass)
            && deserClass != JavaBeanDeserializer.class
            && deserClass != ThrowableDeserializer.class) {
        this.setResolveStatus(NONE);
    } else if (deserializer instanceof MapDeserializer) {
        this.setResolveStatus(NONE);
    }
    Object obj = deserializer.deserialze(this, clazz, fieldName);
    return obj;
在通过config.checkAutoType后会返回一个class，接着会根据class选择一个ObjectDeserializer，做Java
Object的反序列化
而对于ObjectDeserializer的选择，很多class返回的都是一些没有利用价值的ObjectDeserializer：
    deserializer
    ├─ASMDeserializerFactory.java
    ├─AbstractDateDeserializer.java
    ├─ArrayListTypeFieldDeserializer.java
    ├─AutowiredObjectDeserializer.java
    ├─ContextObjectDeserializer.java
    ├─DefaultFieldDeserializer.java
    ├─EnumDeserializer.java
    ├─ExtraProcessable.java
    ├─ExtraProcessor.java
    ├─ExtraTypeProvider.java
    ├─FieldDeserializer.java
    ├─FieldTypeResolver.java
    ├─JSONPDeserializer.java
    ├─JavaBeanDeserializer.java
    ├─JavaObjectDeserializer.java
    ├─Jdk8DateCodec.java
    ├─MapDeserializer.java
    ├─NumberDeserializer.java
    ├─ObjectDeserializer.java
    ├─OptionalCodec.java
    ├─ParseProcess.java
    ├─PropertyProcessable.java
    ├─PropertyProcessableDeserializer.java
    ├─ResolveFieldDeserializer.java
    ├─SqlDateDeserializer.java
    ├─StackTraceElementDeserializer.java
    ├─ThrowableDeserializer.java
    └TimeDeserializer.java
以及一些根据JSONType注解等不太会存在安全漏洞的条件处理，而对于大部分可利用gadget chains的处理，最终都会走到
    com.alibaba.fastjson.parser.ParserConfig#getDeserializer(java.lang.reflect.Type)
    ->
    com.alibaba.fastjson.parser.ParserConfig#getDeserializer(java.lang.Class, java.lang.reflect.Type)
    ->
    com.alibaba.fastjson.parser.ParserConfig#createJavaBeanDeserializer
接着在其中，构建了JavaBeanInfo，在build方法中，会构建一个JavaBeanInfo对象，其中存储了选择哪个构造方法、字段信息、反射调用哪个方法等等，用于在最后的反射实例化时，做相应的处理
    JavaBeanInfo beanInfo = JavaBeanInfo.build(clazz
            , type
            , propertyNamingStrategy
            ,false
            , TypeUtils.compatibleWithJavaBean
            , jacksonCompatible
    );
跟进JavaBeanInfo.build
    JSONType jsonType = TypeUtils.getAnnotation(clazz,JSONType.class);
    if (jsonType != null) {
        PropertyNamingStrategy jsonTypeNaming = jsonType.naming();
        if (jsonTypeNaming != null && jsonTypeNaming != PropertyNamingStrategy.CamelCase) {
            propertyNamingStrategy = jsonTypeNaming;
        }
    }
可以看到，一开始就会从class中取JSONType注解，根据注解配置去选择参数命名方式，默认是驼峰式
接着会取出class的字段、方法、构造方法等数据，并且判断出class非kotlin实现时，如果构造方法只有一个，则调用getDefaultConstructor获取默认的构造方法
    Class builderClass = getBuilderClass(clazz, jsonType);
    Field[] declaredFields = clazz.getDeclaredFields();
    Method[] methods = clazz.getMethods();
    Map genericInfo = buildGenericInfo(clazz);
    boolean kotlin = TypeUtils.isKotlin(clazz);
    Constructor[] constructors = clazz.getDeclaredConstructors();
    Constructor defaultConstructor = null;
    if ((!kotlin) || constructors.length == 1) {
        if (builderClass == null) {
            defaultConstructor = getDefaultConstructor(clazz, constructors);
        } else {
            defaultConstructor = getDefaultConstructor(builderClass, builderClass.getDeclaredConstructors());
        }
    }
从getDefaultConstructor的实现中可以清楚的看到，对于这个构造方法，如果它是无参构造方法或一参（自身类型）构造方法，则就会作为默认构造方法（反序列化对Java
Object实例化时反射调用的构造方法），即defaultConstructor
    static Constructor getDefaultConstructor(Class clazz, final Constructor[] constructors) {
        if (Modifier.isAbstract(clazz.getModifiers())) {
            return null;
        }
        Constructor defaultConstructor = null;
        for (Constructor constructor : constructors) {
            if (constructor.getParameterTypes().length == 0) {
                defaultConstructor = constructor;
                break;
            }
        }
        if (defaultConstructor == null) {
            if (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers())) {
                Class[] types;