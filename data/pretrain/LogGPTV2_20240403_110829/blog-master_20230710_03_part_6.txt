以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 配置和安装步骤

#### 1. 设置 pgAdmin4
```bash
/usr/pgadmin4/bin/setup-web.sh --yes
```

#### 2. 检查 Docker 中的端口映射
```bash
docker inspect pg
```

#### 3. 在主机上的 Chrome 浏览器中打开 pgAdmin
- 打开浏览器并访问 `http://127.0.0.1:port/pgadmin`，其中 `port` 是 Docker 映射的端口号。
- 注意：pgAdmin 运行在 Docker 容器中，连接容器中的 PostgreSQL 数据库时，使用地址 `127.0.0.1:1921`。

#### 4. 示例练习：泰森多边形
- 参考文档：[https://github.com/digoal/blog/blob/master/201904/20190421_01.md](https://github.com/digoal/blog/blob/master/201904/20190421_01.md)

#### 5. 安装扩展
```bash
cd $TEMP_DIR

# 安装 pguint
git clone --depth 1 https://github.com/petere/pguint
cd $TEMP_DIR/pguint
USE_PGXS=1 make install

# 安装 paradedb
git clone --depth 1 -b v0.5.3 https://github.com/paradedb/paradedb
cd $TEMP_DIR/paradedb/pg_sparse
USE_PGXS=1 make install
chmod 644 ./sql/svector--0.5.3.sql
cp ./sql/svector--0.5.3.sql /usr/share/postgresql/14/extension/

# 安装 pg_subtrans_infos
git clone --depth 1 https://github.com/bdrouvot/pg_subtrans_infos
cd $TEMP_DIR/pg_subtrans_infos
USE_PGXS=1 make install

# 安装 pg_subxact_counters
git clone --depth 1 https://github.com/bdrouvot/pg_subxact_counters
cd $TEMP_DIR/pg_subxact_counters/c
USE_PGXS=1 make install

# 安装 pg_idkit
cp pg_idkit--0.2.1.sql /usr/share/postgresql/14/extension/
cp pg_idkit.control /usr/share/postgresql/14/extension/
cp pg_idkit.so /usr/lib/postgresql/14/lib/

# 安装 MobilityDB
apt-get install -y build-essential libproj-dev libjson-c-dev libgsl-dev libgeos-dev
git clone --depth 1 https://github.com/MobilityDB/MobilityDB
cd $TEMP_DIR/MobilityDB
mkdir build
cd $TEMP_DIR/MobilityDB/build
cmake ..
make -j 4
make install

# 安装其他扩展
cp pgdd--0.5.2.sql /usr/share/postgresql/14/extension/
cp pgdd.control /usr/share/postgresql/14/extension/
cp pgdd.so /usr/lib/postgresql/14/lib/

# 安装 pipelinedb_pg14
git clone --depth 1 https://github.com/PGer/pipelinedb_pg14.git
cd $TEMP_DIR/pipelinedb_pg14
apt-get install -y libczmq4 libczmq-dev
USE_PGXS=1 make install

# 安装 pg_nanoid
git clone --depth 1 https://github.com/jaiminpan/pg_nanoid.git
cd $TEMP_DIR/pg_nanoid
USE_PGXS=1 make install

# 安装 pg_ulid
git clone --depth 1 https://github.com/andrielfn/pg-ulid.git
cd $TEMP_DIR/pg-ulid
USE_PGXS=1 make install

# 安装 pg_migrate
git clone --depth 1 https://github.com/phillbaker/pg_migrate.git
cd $TEMP_DIR/pg_migrate
USE_PGXS=1 make install

# 安装 pg_filedump
git clone --depth 1 https://github.com/df7cb/pg_filedump.git
cd $TEMP_DIR/pg_filedump
USE_PGXS=1 make install

# 安装 pgpcre
git clone --depth 1 https://github.com/petere/pgpcre
cd $TEMP_DIR/pgpcre
USE_PGXS=1 make install

# 安装 pg_jobmon
git clone --depth 1 https://github.com/omniti-labs/pg_jobmon
cd $TEMP_DIR/pg_jobmon
USE_PGXS=1 make install

# 安装 plrust
su - postgres -c "export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static ; export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup ; curl --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --profile minimal --default-toolchain 1.72.0 --no-modify-path -y ; source /var/lib/postgresql/.cargo/env ; rustup component add rustc-dev"
echo "source /var/lib/postgresql/.cargo/env" >> /var/lib/postgresql/.bash_profile
dpkg -i /tmp/plrust-trusted-1.2.7_1.72.0-debian-pg14-amd64.deb

# 安装 plpgsql_pg4ml
git clone --depth 1 https://gitee.com/seanguo_007/plpgsql_pg4ml.git
cd $TEMP_DIR/plpgsql_pg4ml
USE_PGXS=1 make install

# 安装其他扩展
cp pgmq--1.1.1.sql /usr/share/postgresql/14/extension/
cp pgmq.control /usr/share/postgresql/14/extension/
cp pgmq.so /usr/lib/postgresql/14/lib/

cp pg_later--0.0.14.sql /usr/share/postgresql/14/extension/
cp pg_later.control /usr/share/postgresql/14/extension/
cp pg_later.so /usr/lib/postgresql/14/lib/

cp vectorize--0.9.0.sql /usr/share/postgresql/14/extension/
cp vectorize.control /usr/share/postgresql/14/extension/
cp vectorize.so /usr/lib/postgresql/14/lib/

# 安装 snowflake
git clone --depth 1 https://github.com/pgEdge/snowflake
cd $TEMP_DIR/snowflake
USE_PGXS=1 make install

# 安装 XLogMiner
git clone --depth 1 -b walminer_3.0_stable https://gitee.com/movead/XLogMiner
cd $TEMP_DIR/XLogMiner/walminer/
USE_PGXS=1 MAJORVERSION=14 make install

# 安装 influxdb_fdw
cd /tmp
git clone --depth 1 https://github.com/pgspider/influxdb_fdw
cd /tmp/influxdb_fdw
go get github.com/influxdata/influxdb1-client/v2
git clone --depth 1 https://github.com/pgspider/influxdb-cxx
cd /tmp/influxdb_fdw/influxdb-cxx
cmake . -DINFLUXCXX_WITH_BOOST=OFF -DINFLUXCXX_TESTING=OFF
make install
cd /tmp/influxdb_fdw
make CC=gcc CXX=g++ USE_PGXS=1 with_llvm=no GO_CLIENT=1 CXX_CLIENT=1
make install CC=gcc CXX=g++ USE_PGXS=1 with_llvm=no GO_CLIENT=1 CXX_CLIENT=1

# 安装 pg_dbms_metadata
cd /tmp
git clone --depth 1 https://github.com/HexaCluster/pg_dbms_metadata
cd /tmp/pg_dbms_metadata
make install USE_PGXS=1

# 安装 pg_savior
cd /tmp
git clone --depth 1 https://github.com/viggy28/pg_savior
cd /tmp/pg_savior
make install USE_PGXS=1

# 安装 pgcopydb
apt-get install -y libgc-dev
cd /tmp
git clone --depth 1 https://github.com/dimitri/pgcopydb
cd /tmp/pgcopydb
make -s clean
make -s -j4 install

# 安装 supa_audit
cd /tmp
git clone --depth 1 https://github.com/supabase/supa_audit
cd /tmp/supa_audit
USE_PGXS=1 make install

# 安装 plv8
# cd /tmp
# apt-get install -y libtinfo5 build-essential pkg-config
# git clone --depth 1 -b v3.2.2 https://github.com/plv8/plv8
# cd /tmp/plv8
# export SHLIB_LINK = " -lrt -std=c++17 "
# EXECUTION_TIMEOUT=1 USE_ICU=1 USE_PGXS=1 PG_CONFIG=$(which pg_config) make
# EXECUTION_TIMEOUT=1 USE_ICU=1 USE_PGXS=1 PG_CONFIG=$(which pg_config) make install

#### 6. 安装 HaloDB
```bash
groupadd -g 3000 halo
useradd -u 3000 -g halo -m -d /home/halo -s /bin/bash halo
cd /tmp
tar -zxvf halo_14.debian11.x86_64.tar.gz -C /home/halo/

echo "#  add by digoal" >> /home/halo/.bashrc
echo "alias rm='rm -i'" >> /home/halo/.bashrc
echo "alias cp='cp -i'" >> /home/halo/.bashrc
echo "alias ll='ls -larth'" >> /home/halo/.bashrc
echo "alias mv='mv -i'" >> /home/halo/.bashrc
echo "export HALO_HOME=/home/halo/product/dbms/14" >> /home/halo/.bashrc
echo "export LD_LIBRARY_PATH=\$HALO_HOME/lib" >> /home/halo/.bashrc
echo "export PGDATA=/home/halo/halodata" >> /home/halo/.bashrc
echo "export PGHOST=\$PGDATA" >> /home/halo/.bashrc
echo "export PGUSER=postgres" >> /home/halo/.bashrc
echo "export PATH=\$HALO_HOME/bin:\$PATH" >> /home/halo/.bashrc
echo "export PGPORT=1521" >> /home/halo/.bashrc

# 初始化 halodata
su - halo -c "mkdir /home/halo/halodata"
su - halo -c "chmod 700 /home/halo/halodata"
su - halo -c "/home/halo/product/dbms/14/bin/initdb -D /home/halo/halodata -E UTF8 --lc-collate=C --lc-ctype=en_US.utf-8 -U postgres"

cd /home/halo/halodata
echo "host all all 0.0.0.0/0 scram-sha-256" >> ./pg_hba.conf
echo "standard_parserengine_auxiliary = on" >> ./postgresql.auto.conf
echo "database_compat_mode = 'oracle'" >> ./postgresql.auto.conf
echo "oracle.use_datetime_as_date = true" >> ./postgresql.auto.conf
echo "transform_null_equals = off" >> ./postgresql.auto.conf
echo "listen_addresses = '0.0.0.0'" >> ./postgresql.auto.conf
echo "port = 1521" >> ./postgresql.auto.conf
echo "max_connections = 2000" >> ./postgresql.auto.conf
echo "unix_socket_directories = '.'" >> ./postgresql.auto.conf
echo "shared_buffers = 128MB" >> ./postgresql.auto.conf
echo "dynamic_shared_memory_type = posix" >> ./postgresql.auto.conf
echo "vacuum_cost_delay = 0" >> ./postgresql.auto.conf
echo "bgwriter_delay = 20ms" >> ./postgresql.auto.conf
echo "bgwriter_lru_maxpages = 500" >> ./postgresql.auto.conf
echo "bgwriter_lru_multiplier = 5.0" >> ./postgresql.auto.conf
echo "max_parallel_workers_per_gather = 0" >> ./postgresql.auto.conf
echo "synchronous_commit = off" >> ./postgresql.auto.conf
echo "wal_compression = on" >> ./postgresql.auto.conf
echo "wal_writer_delay = 10ms" >> ./postgresql.auto.conf
echo "max_wal_size = 1GB" >> ./postgresql.auto.conf
echo "min_wal_size = 80MB" >> ./postgresql.auto.conf
echo "random_page_cost = 1.1" >> ./postgresql.auto.conf
echo "log_destination = 'csvlog'" >> ./postgresql.auto.conf
echo "logging_collector = on" >> ./postgresql.auto.conf
echo "log_truncate_on_rotation = on" >> ./postgresql.auto.conf
echo "log_timezone = 'Etc/UTC'" >> ./postgresql.auto.conf
echo "autovacuum = on" >> ./postgresql.auto.conf
echo "autovacuum_vacuum_cost_delay = 0ms" >> ./postgresql.auto.conf
echo "vacuum_freeze_table_age = 750000000" >> ./postgresql.auto.conf
echo "vacuum_multixact_freeze_table_age = 750000000" >> ./postgresql.auto.conf
echo "datestyle = 'iso, mdy'" >> ./postgresql.auto.conf
echo "timezone = 'Etc/UTC'" >> ./postgresql.auto.conf
echo "lc_messages = 'en_US.UTF-8'" >> ./postgresql.auto.conf
echo "lc_monetary = 'en_US.UTF-8'" >> ./postgresql.auto.conf
echo "lc_numeric = 'en_US.UTF-8'" >> ./postgresql.auto.conf
echo "lc_time = 'en_US.UTF-8'" >> ./postgresql.auto.conf
echo "default_text_search_config = 'pg_catalog.english'" >> ./postgresql.auto.conf

# 启动 HaloDB 并创建 Oracle 兼容性
# su - halo
# pg_ctl start
# psql -c "create extension aux_oracle cascade;"
```

#### 7. 安装 Databend
```bash
groupadd -g 3001 databend
useradd -u 3001 -g databend -m -d /home/databend -s /bin/bash databend
mkdir -p /var/log/databend
mkdir -p /var/lib/databend/raft
chown -R databend:databend /var/log/databend
chown -R databend:databend /var/lib/databend

# 安装 Rust
# su - databend -c "curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 --proto '=https' --tlsv1.2 -sSf -L https://sh.rustup.rs | sh -s -- -y"
# su - databend -c "source /home/databend/.cargo/env"
# echo "[source.crates-io]" >> /home/databend/.cargo/config
# echo "replace-with = 'ustc'" >> /home/databend/.cargo/config
# echo "    " >> /home/databend/.cargo/config
# echo "[source.ustc]" >> /home/databend/.cargo/config
# echo "registry = \"sparse+https://mirrors.ustc.edu.cn/crates.io-index/\"" >> /home/databend/.cargo/config

echo "#  add by digoal" >> /home/databend/.bashrc
echo "alias rm='rm -i'" >> /home/databend/.bashrc
echo "alias cp='cp -i'" >> /home/databend/.bashrc
echo "alias ll='ls -larth'" >> /home/databend/.bashrc
echo "alias mv='mv -i'" >> /home/databend/.bashrc
# echo ". /home/databend/.cargo/env" >> /home/databend/.bashrc

cd /tmp
# tar -zxvf databend-v1.2.307-x86_64-unknown-linux-gnu.tar.gz -C /home/databend/
mkdir -p /home/databend/databend_software
```

---

通过这种方式，文本被分成了多个部分，并且每个部分都有明确的标题和说明，使得整个过程更加清晰和易于理解。