III. PERISCOPE DESIGN
We designed PERISCOPE as a dynamic analysis framework
that can be used to examine bi-directional communication
between devices and their drivers over MMIO and DMA.
Contrary to earlier work on analyzing device-driver commu-
nication on the device side, we analyze this communication
on the driver side, by intercepting the driver’s accesses to
communication channels. PERISCOPE does this by hooking
into the kernel’s page fault handling mechanism. This design
choice makes our framework driver-agnostic; PERISCOPE can
analyze drivers with relative ease, regardless of whether the
underlying device is virtual or real, and regardless of the type
of the peripheral device.
At a high level, PERISCOPE works as follows. First,
PERISCOPE automatically detects when the target device driver
creates a MMIO or DMA memory mapping, and registers it.
Then, the analyst selects the registered mappings that he/she
wishes to monitor. PERISCOPE marks the pages backing these
monitored mappings as not present in the kernel page tables.
Any CPU access to those marked pages therefore triggers a
page fault, even though the data on these pages is present in
physical memory.
When a kernel page fault occurs, PERISCOPE ﬁrst marks
the faulting page as present in the page table ( 1 in Figure 2).
Then,
it determines if the faulting address is part of any
of the monitored regions ( 2 ). If it is not, PERISCOPE re-
executes the faulting instruction ( 5 ), which will now execute
without problems. Afterwards, PERISCOPE marks the page as
not present again ( 7 ), and resumes the normal execution of
the faulting code.
If the faulting address does belong to a monitored region,
PERISCOPE invokes a pre-instruction hook function registered
by the user of the framework, passing information about
the faulting instruction ( 4 ). Then, PERISCOPE re-executes
the faulting instruction ( 5 ). Finally, PERISCOPE invokes the
post-instruction hook registered by the driver ( 6 ), marks the
faulting page as not present again ( 7 ), and resumes the
execution of the faulting code.
A. Memory Access Monitoring
Tracking Allocations: PERISCOPE hooks the kernel
APIs used to allocate and deallocate DMA and MMIO
regions2. We use these hooks to maintain a list of all
2Establishing DMA and MMIO mappings is a highly platform-dependent
process, so device drivers are obliged to use the ofﬁcial kernel APIs to do so.
Fig. 2. PERISCOPE fault handling
DMA/MMIO allocation contexts and their active mappings.
PERISCOPE assigns an identiﬁer to every context in which a
mapping is allocated, and presents the list of all allocation
contexts as well as their active mappings to privileged user-
space programs through the debugfs ﬁle system.
Enabling Monitoring: PERISCOPE exposes a privi-
leged user-space API that enables monitoring of DMA/MMIO
regions on a per-allocation-context basis. Once monitoring
is enabled for a speciﬁc allocation context, PERISCOPE will
ensure that accesses to all current and future regions allocated
in that context trigger page faults.
Clearing Page Presence: PERISCOPE marks all pages
containing monitored regions as not present in the kernel’s
page tables to force accesses to such pages to trigger page
faults. One complication that can arise here is that modern
architectures,
including x86-64 and AArch64, can support
multiple page sizes within the same page table. On AArch64
platforms, a single page table entry can serve physical memory
regions of 4KB, 16KB, or 64KB, for example. If a single
(large) page table entry serves both a monitored and a non-
monitored region, then we split that entry prior to marking the
region as not present. We do this to avoid unnecessary page
faults for non-monitored regions. Note that, even after split-
ting page table entries, PERISCOPE cannot rule out spurious
page faults completely, as some devices support DMA/MMIO
regions that are smaller than the smallest page size supported
by the CPU.
Trapping Page Faults: PERISCOPE hooks the kernel’s
default kernel page fault handler to monitor page faults.
Inside the hook function, we ﬁrst check if the fault originated
from a page that contains one of the monitored regions. If
the fault originated from some other page, we immediately
return from the hook function with an error code and defer
the fault handling to the default page fault handler. If the
fault did originate from a page containing a registered buffer,
PERISCOPE marks that page as present ( 1 ), and then checks
4
PC: LDR/STRPC+4: ......#PFMark PagePresentSingle-stepMark PageNot PresentDecodeInstructionFilteringIrrelevant FaultsDevice Driver123Pre-instructionHookPost-instructionHook4765if the faulting address falls within a monitored region ( 2 ). If
the faulting address is outside a monitored region, we simply
single-step the faulting instruction ( 5 ), mark the faulting page
as not present again ( 7 ), and resume normal execution of
the faulting code. If the faulting address does fall within
a monitored region, however, we proceed to the instruction
decoding step ( 3 ).
Instruction Decoding: In order to accurately monitor
and (potentially) manipulate the communication between the
hardware/ﬁrmware and the device driver, we need to extract
the source register, the destination register and the access width
of the faulting instruction ( 3 in Figure 2). We implemented
a simple AArch64 instruction decoder, which provides this
information for all load and store instructions. PERISCOPE
carries this information along the rest of its fault handling
pipeline.
Pre-instruction Hook: After decoding the instruction,
PERISCOPE calls the pre-instruction hook that the user of
our framework can register ( 4 ). We pass the address of the
faulting instruction, the memory region type (MMIO or DMA
coherent/streaming), the instruction type (load or store), the
destination/source register, and the access register width to this
hook function. The pre-instruction hook function can return
two values: a default value and a skip-single-step value. If the
function returns the latter, PERISCOPE proceeds immediately
to step 6 . Otherwise, PERISCOPE proceeds to step 5 .
PERISCOPE provides a default pre-instruction hook which
logs all memory stores before the value in the source register
is stored to memory. We maintain this log in a kernel-space
circular buffer that can later be read from the ﬁle system using
tracefs.
Single-stepping: When execution returns from the pre-
instruction hook, and the hook function did not return the
skip-single-step value, we re-execute the faulting instruction,
which can now access the page without faulting. We use the
processor’s single-stepping support to ensure that only the
faulting instruction executes, but none of its successors do ( 5 ).
Post-instruction Hook: When PERISCOPE regains con-
trol after single-stepping, it ﬁrst clears the page present ﬂag
for the faulting page again so that future accesses to the
faulting page once again trigger a page fault. Then, it calls the
post-instruction handler, which, similarly to the pre-instruction
handler, has a default implementation that can be overridden
through our API ( 6 ). The default handler logs all memory
loads by examining and logging the value that is now stored
in the destination register.
IV. PERIFUZZ DESIGN
We built PERIFUZZ as a client module for PERISCOPE.
PERIFUZZ can generate and provide inputs for device drivers.
The goal of our fuzzer is to uncover vulnerabilities that could
potentially be exploited by a compromised peripheral device.
A. Threat Model
Peripheral Compromise: We assume that the attacker
can compromise a peripheral, which, in turn, can send arbitrary
data to its device driver. Compromising a peripheral device is
Fig. 3. PERIFUZZ overview
feasible because such devices rarely deploy hardware protec-
tion mechanisms or software mitigations. As a result, silent
memory corruptions occur frequently [56], which signiﬁcantly
lowers the bar to mount an attack. That peripherals can turn
malicious after being attacked was demonstrated by successful
remote compromises of several network devices such as eth-
ernet adapters [36], GSM baseband processors [28], [77], and
Wi-Fi processors [16], [21], [23].
IOMMU/SMMU Protection: For many years, a strict
hardware-OS security boundary existed in theory, but it was
not enforced in practice. Most device drivers trusted that the
peripheral was benign, and gave the device access to the
entire physical memory (provided that the device was DMA-
capable), thus opening the door to DMA-based attacks and
rootkits [17], [69]. This situation has changed for the better
with the now widespread deployment of IOMMU units (or
SMMU for AArch64). IOMMUs can prevent the device from
accessing physical memory regions that were not explicitly
mapped by the MMU, and they prevent peripherals from
accessing streaming DMA buffers while these are mapped
for CPU access. The latter restriction can be imposed by
invalidating IOMMU mappings, or by copying the contents
of a streaming DMA buffer to a temporary buffer (which the
peripheral cannot access) before the CPU uses them [52], [53].
We assume that such an IOMMU is in place, and that is being
used correctly.
Summary:
In our model, the attacker can (i) com-
promise a peripheral such as a Wi-Fi chipset over the air
by abusing an existing bug in the peripheral’s ﬁrmware, (ii)
exercise control over the compromised peripheral
to send
arbitrary data to the device driver, and, (iii) not access the
main physical memory, except for memory regions used for
communicating with the device driver.
B. Design Overview
PERIFUZZ is composed of a number of components, as
illustrated in Figure 3. Our design is fully modular, so each
5
PC: LDRPC+4: ......PeriScope FrameworkPre-instructionHookInjectorDevice Driver#PFSkip single-stepFuzzerExecutorUser spaceKernel spaceregs[dest]=0xDEAD0xDEADPC+=4Post-instructionHookcomponent can be swapped out for an alternative implemen-
tation that exposes the same interface.
Fuzzer: We use a fuzzer that runs in user space.
This component is responsible for generating inputs for the
device driver and processing execution feedback. Our modular
design allows us to use any fuzzer capable of fuzzing user-
space programs. We currently use AFL as our fuzzer, as was
done in several previous works that focus on fuzzing kernel
subsystems [42], [57], [65].
Executor: The executor is a user-space-resident bridge
between the fuzzer (or any input provider) and the injector.
The executor takes an input ﬁle as an argument, and sends
the ﬁle content to the injector via a shared memory region
mapped into both the executor’s and the injector’s address
spaces. The executor then notiﬁes the injector that the input
is ready for injection, and periodically checks if the provided
input has been consumed. PERIFUZZ launches an instance of
the executor for every input the fuzzer generates. The executor
is also used to reproduce a crash by providing the last input
observed before the crash.
Injector: The injector is a kernel-space module that
interfaces with our PERISCOPE framework. The injector reg-
isters a pre-instruction hook with PERISCOPE, which allows
the injector to monitor and manipulate all data the device driver
receives from the device. At every page fault, the injector
ﬁrst checks if fuzzing is currently enabled, and if there is
a fuzzer/executor-provided input that has not been consumed
yet. If both conditions are met, the injector overwrites the
destination register with the input generated by the fuzzer.
Note that PERIFUZZ manipulates only the values device
drivers read from MMIO and DMA mappings, but not the
values they write. PERIFUZZ, in other words, models compro-
mised devices, but not compromised drivers.
C. Fuzzer Input Consumption
We treat each fuzzer-generated input as a serialized se-
quence of memory accesses. In other words, our injector
always consumes and injects the ﬁrst non-consumed inputs
found in the input buffer shared between the executor and
injector. This fuzzer input consumption model allows for
overlapping fetch fuzzing as it automatically provides different
values for multiple accesses to the same offsets within a target
mapping (i.e., overlapping fetches [79]). Providing different
values for overlapping fetches enables us to ﬁnd double-
fetch bugs, if triggering such bugs leads to visible side-effects
such as a driver crash. Our fuzzer also keeps track of the
values returned for overlapping fetches, and can output this
information when a driver crashes,
thereby helping us to
narrow down the cause of the crash. In fact, the double-fetch
bugs we identiﬁed using PERIFUZZ would not have been found
without this information (see Section VI).
Since we assume that the attacker cannot access streaming
DMA buffers while they are mapped for CPU access (see
Section IV-A), we take extra care not to enable overlapping
fetch fuzzing for streaming DMA buffers. To this end, we
maintain a history of read accesses, and consult this history to
determine if a new access overlaps with any previous access.
If they overlap, we return the same values returned for the
Algorithm 1 Fuzzer Input Consumption at Each Driver Read
1: global variables
(cid:46) Initialized when switching fuzzer input
Input ← [...]
2:
InputOf f set ← 0
3:
P revReads ← {}
4:
OverlappingF etches ← {}
5:
6: end global variables
7: function FUZZDRIVERREAD(Address, W idth, T ype)
V alue ← Input[range(InputOf f set, W idth)]
8:
for all P rev in P revReads do
9:
10:
11:
12:
13:
14:
15:
Overlap ← P rev.range ∩ range(Address, W idth)
if Overlap is not empty then
V alue[Overlap] ← P rev.value(Overlap)
if T ype is DMA Streaming then
OverlappingF etches ∪ {(Overlap, V alue)}
OverlappingF etches
←
else
end if
end if
16:
17:
18:
19:
20:
21:
22: end function
end for
InputOf f set ← InputOf f set + W idth
P revReads ← P revReads∪{(Address, W idth, V alue)}
return V alue
previous access, and do not consume any bytes from the fuzzer
input. Algorithm 1 shows how we pick values to inject for each
driver read from an MMIO or DMA mapping.
An additional beneﬁt of our fuzzer input consumption
model is that it helps to keep the input size small, because
we only have to generate fuzzer input bytes for read accesses
that actually happen and not for the entire fuzzed buffer, which
may contain bytes that are never read.
D. Register Value Injection
PERISCOPE provides the destination register and the access
width when it calls into PERIFUZZ’s pre-instruction hook
handler. The fuzzer input is consumed for that exact access
width, and then injected into the destination register. Our pre-
instruction hook function returns the skip-single-step value
to PERISCOPE (see Section III-A), as we have emulated the
faulting load instruction by writing a fuzzed value into its desti-
nation register. Our post-instruction hook function increments
the program counter, so the execution of the driver resumes
from the instruction that follows the fuzzed instruction.
E. Fuzzing Loop
Each iteration of the fuzzing loop consumes a single fuzzer-
generated input. We align each iteration of the fuzzing loop to
the software interrupt handler, i.e., do_softirq. We do not
insert hooks into the hardware interrupt handler, since work is
barely done in the hardware interrupt context. The two hooks
inserted before and after the software interrupt handler demar-
cate a single iteration of the fuzzing loop, in which PERIFUZZ
consecutively consumes bytes in a single fuzzer input. This
design decision allows us to remain device-agnostic, but device
driver developers could provide an alternative device-speciﬁc
deﬁnition of an iteration by inserting those two hooks in their
drivers. Several low priority tasks are often deferred to the
device driver’s own kernel threads, and the fuzzing loop can
be aligned to the task processing loop inside those threads.
6
TABLE I.
LOC MODIFIED IN THE LINUX KERNEL CODE AND THE
PERISCOPE FRAMEWORK ITSELF
Description
Linux DMA and MMIO allocation/deallocation APIs
Linux kernel page fault and debug exception handlers
PERISCOPE framework
LoC
92
46
3843
TABLE II.
PERIFUZZ IMPLEMENTATION LOC
Component
Injector
KCOV (modiﬁcation)
Executor
Python manager and utility scripts
Kernel-space
Kernel-space
User-space
Host
LoC
441