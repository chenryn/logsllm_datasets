            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
运行一下：
我们从`0x8048699`指向的地址开始，该地址指向`MOV DWORD [EBP - 0xC],
0x0`调用之后的指令`scanf()`。我们基本上会跳过所有`malloc()`，因为我们稍后将在脚本中处理它们
    path_to_binary = "./06_angr_symbolic_dynamic_memory" 
    project = angr.Project(path_to_binary, auto_load_libs=False)
    start_address = 0x8048699
    initial_state = project.factory.blank_state(addr=start_address)
然后因为缓冲区的大小是8字节，故换算成比特即为64比特的大小，最后我们初始化两个大小为64位的符号位向量
    passwd_size_in_bits = 64
    passwd0 = claripy.BVS('passwd0', passwd_size_in_bits)
    passwd1 = claripy.BVS('passwd1', passwd_size_in_bits)
我们注意到这次scanf函数的输入使用的是两个存储区
我们可以看到`malloc()`分配了两个缓冲区，因为`maclloc()`函数只有一个参数，通过`push
9`不难推测出两个缓冲区大小为9字节（IDA也能直接看到的说），并返回缓冲区地址到EAX寄存器中
实际上，可以看到在两次调用之后，根据`mov ds:buffer0, eax`和`mov ds:buffer1,
eax`得知开辟后的缓冲区被复制到标识为`buffer0`和`buffer1`的两个存储区中
且根据IDA可以得知`buffer0`的地址为 **0xABCC8A4** ，`buffer1`的地址为 **0xABCC8AC**
回到我们最开始认识angr的时候，我们知道angr并没有真正“运行”二进制文件（至少到目前为止），它只是在模拟运行状态，因此它实际上不需要将内存分配到堆中，实际上可以伪造任何地址。我们所做的是我们在堆栈选择两个地址存放我们的缓冲区地址。之后我们告诉angr，将两个fake
address分别保存到 `buffer0`,`buffer1` ，因为程序实际执行的时候就会把 **malloc**
返回的地址保存到这里。最后我们把符号位向量保存到 伪造的地址里。
这里我们选择 **0xffffc93c** 和 **0xffffc94c** 即可，然后将我们分别的缓冲区地址放入这两个地址中，参数 `endness`
用于设置端序，angr默认为大端序，总共可选的值如下：
    LE – 小端序(little endian, least significant byte is stored at lowest address)
    BE – 大端序(big endian, most significant byte is stored at lowest address)
    ME – 中间序(Middle-endian. Yep.)
这里我们直接设置为与项目的程序相同即可
    fake_heap_address0 = 0xffffc93c
    pointer_to_malloc_memory_address0 = 0xabcc8a4
    fake_heap_address1 = 0xffffc94c
    pointer_to_malloc_memory_address1 = 0xabcc8ac
    initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness)
    initial_state.memory.store(pointer_to_malloc_memory_address1, fake_heap_address1, endness=project.arch.memory_endness)
这里总的逻辑是这样的，之前是buffer指向的是malloc分配好的内存地址，string存在这里。现在是buffer指向的是我们伪造的地址，符号位向量存在这里
    BEFORE:
    buffer0 -> malloc()ed address 0 -> string 0
    buffer1 -> malloc()ed address 1 -> string 1
    AFTER:
    buffer0 -> fake address 0 -> symbolic bitvector 0
    buffer1 -> fake address 1 -> symbolic bitvector 1
其余的部分和之前的情况差不多，不再赘述
## 07_angr_symbolic_file
这题主要学习如何符号化一个文件里面的内容
先检查一下文件：
    syc@ubuntu:~/Desktop/TEMP$ checksec 07_angr_symbolic_file 
    [*] '/home/syc/Desktop/TEMP/07_angr_symbolic_file'
        Arch:     i386-32-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x8048000)
然后拖进IDA查看一下程序
    int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      int i; // [esp+Ch] [ebp-Ch]
      memset(buffer, 0, 0x40u);
      printf("Enter the password: ");
      __isoc99_scanf("%64s", buffer);
      ignore_me((int)buffer, 0x40u);
      memset(buffer, 0, 0x40u);
      fp = fopen("OJKSQYDP.txt", "rb");
      fread(buffer, 1u, 0x40u, fp);
      fclose(fp);
      unlink("OJKSQYDP.txt");
      for ( i = 0; i  90 )
      {
        puts("Try again.");
        exit(1);
      }
      return (17 * a2 + a1 - 65) % 26 + 65;
    }
我们可以得知程序使用fread函数从文件中加载密码，如果密码正确，则会打印“ Good
Job”。`ignore_me`主要是把第一个读取的内容存入`OJKSQYDP.txt`， 不用我们自己创建文件
,然后从文件`OJKSQYDP.txt`读取数据存入buff
老样子先上EXP在逐一分析：
    import angr
    import sys
    import claripy
    def Go():
        path_to_binary = "./07_angr_symbolic_file" 
        project = angr.Project(path_to_binary, auto_load_libs=False)
        start_address =  0x80488EA
        initial_state = project.factory.blank_state(addr=start_address)
        filename = 'OJKSQYDP.txt'
        symbolic_file_size_bytes = 64
        passwd0 = claripy.BVS('password', symbolic_file_size_bytes * 8)
        passwd_file = angr.storage.SimFile(filename, content=passwd0, size=symbolic_file_size_bytes)
        initial_state.fs.insert(filename, passwd_file)
        simulation = project.factory.simgr(initial_state)
        def is_successful(state):
            stdout_output = state.posix.dumps(1)
            if b'Good Job.\n' in stdout_output:
                return True
            else: 
                return False
        def should_abort(state):
            stdout_output = state.posix.dumps(1)
            if b'Try again.\n' in  stdout_output:
                return True
            else: 
                return False
        simulation.explore(find=is_successful, avoid=should_abort)
        if simulation.found:
            for i in simulation.found:
                solution_state = i
                solution0 = solution_state.solver.eval(passwd0, cast_to=bytes)
                print("[+] Success! Solution is: {0}".format(solution0.decode('utf-8')))
                #print(solution0)
        else:
            raise Exception('Could not find the solution')
    if __name__ == "__main__":
        Go()
运行一下查看结果：
我们可以知道这个程序：
  * 读取一个名叫’OJKSQYDP.txt’的文件作为密码
  * 我们需要使用Angr模拟一个文件系统，其中该文件被我们自己的模拟文件所替代
  * 然后将该文件进行符号化处理
####  状态插件（state plugin)
除了刚刚讨论过的选项集，所有存储在SimState中的东西实际上都存储在附加在state上的“插件”中。到目前为止我们讨论的几乎所有state的属性都是一个插件——`memory`、`registers`、`mem`、`regs`、`solver`等等。这种设计带来了代码的模块化和能够便捷地为模拟状态的其他方面实现新的数据存储，或者提供插件的替代实现能力。
比如说，通常`memory`插件模拟一个平坦地址空间，但是在分析中可以选择开启“抽象内存”插件来支持`state.memory`，“抽象内存”使用新的数据类型表示地址，以模拟浮动的独立内存空间映射。反过来，插件可以减少代码的复杂性：`state.memory`和`state.registers`实际上是同一个插件的不同实例，因为寄存器也是用一块地址空间模拟的。
能够控制仿真程序所看到的环境，包括如何从环境中引入符号数据，这一点非常重要！angr具有一系列可靠的抽象概念，可帮助您设置所需的环境。
###  仿真文件系统-The Emulated Filesystem
这题的关键是利用了angr强大的仿真文件系统。在angr中与文件系统，套接字，管道或终端的任何交互的根源都是SimFile对象。SimFile是一种存储抽象，它定义符号或其他形式的字节序列。您可以从某个位置读取文件，可以在某个位置写入文件，可以询问文件中当前存储了多少字节，还可以具体化文件，并为其生成测试用例。
简单来说利用`SimFile`形成符号化的文件的格式：
    simgr_file = angr.storage.SimFile(filename, content=xxxxxx, size=file_size)
然后需要传给state的初始化过程来影响对文件系统的使用。我们可以利用`fs`选项以文件名的字典来预配置SimFile对象，也可以`fs.insert`是将文件插入到文件系统中，需要文件名与符号化的文件
    initial_state.fs.insert(filename, simgr_file)
我们从IDA可以知道输入的是格式化字符串`%64s`也就是64个字符，一个字符是8比特，故最后是512比特
最后的得到这一部分代码：
    filename = 'OJKSQYDP.txt'
    symbolic_file_size_bytes = 64
    passwd0 = claripy.BVS('password', symbolic_file_size_bytes * 8)
    passwd_file = angr.storage.SimFile(filename, content=passwd0, size=symbolic_file_size_bytes)
    initial_state.fs.insert(filename, passwd_file)
    simulation = project.factory.simgr(initial_state)
其它的与之前的题目一致，不再赘述
## 参考文献
【1】angr官方文档—— 
【2】angr 系列教程(一）核心概念及模块解读—— 
【3】Introduction to angr Part 2 —— 
【4】Introduction to angr Part 3 —— 
【4】angr文档翻译 —— 