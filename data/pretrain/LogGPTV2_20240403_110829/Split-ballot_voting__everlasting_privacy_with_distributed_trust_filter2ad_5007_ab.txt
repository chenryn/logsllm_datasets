Vote A,H  or B,G  or C,F or D,E
Vote A,H  or B,G  or C,F or D,E
Vote A,F or B,E or C,H  or D,G
Vote A,G  or B,F or C,E or D,H
Vote A,G  or B,F or C,E or D,H
Vote A,E or B,F
Yes
Yes
Vote A,E or B,F
F
Vote A,F or B,E
E
No
Vote A,F or B,E
A
C
D
B
A
B
George Washington
George Washington
Vote A,E or B,H  or C,G  or D,F
Vote A,E or B,H  or C,G  or D,F
John Adams
John Adams
Vote A,F or B,E or C,H  or D,G
Vote A,F or B,E or C,H  or D,G
Thomas Jefferson
Thomas Jefferson
Vote A,G  or B,F or C,E or D,H
Vote A,G  or B,F or C,E or D,H
Verification Code:
Verification Code:
GmJYsZDhSfEILpCjAkvd+v2Ghv0
8PbGfIKjknp7IX5i6y5ar/NqtF4t
James Madison
James Madison
Proposition 123
Proposition 123
Vote A,H  or B,G  or C,F or D,E
Vote A,H  or B,G  or C,F or D,E
Yes
Yes
No
No
Vote A,E or B,F
Vote A,E or B,F
Vote A,F or B,E
Vote A,F or B,E
E
F
H
G
F
E
Select and open a left and a right ballot
Stack both ballots
Mark choices on ballot
Scan and keep this page
Verification Code:
GmJYsZDhSfEILpCjAkvd+v2Ghv0
Scan and keep this page
Verification Code:
8PbGfIKjknp7IX5i6y5ar/NqtF4t
Scanner
A
C
D
B
A
B
Candidate for President
Candidate for President
George Washington
Vote A,E or B,H  or C,G  or D,F
George Washington
John Adams
Vote A,E or B,H  or C,G  or D,F
Vote A,F or B,E or C,H  or D,G
John Adams
Thomas Jefferson
Vote A,F or B,E or C,H  or D,G
Vote A,G  or B,F or C,E or D,H
Thomas Jefferson
James Madison
Vote A,G  or B,F or C,E or D,H
Vote A,H  or B,G  or C,F or D,E
James Madison
Proposition 123
Vote A,H  or B,G  or C,F or D,E
Proposition 123
Yes
No
Vote A,E or B,F
Yes
Vote A,F or B,E
No
Vote A,E or B,F
Vote A,F or B,E
E
F
H
G
F
E
Candidate for President
Scan and keep this page
Candidate for President
Scan and keep this page
F
G
H
E
George Washington
Vote A,E or B,H  or C,G  or D,F
John Adams
Vote A,F or B,E or C,H  or D,G
Thomas Jefferson
Left
Vote A,G  or B,F or C,E or D,H
James Madison
Vote A,H  or B,G  or C,F or D,E
Proposition 123
Ballot 2
Verification Code:
8PbGfIKjknp7IX5i6y5ar/NqtF4t
Vote A,F or B,E
Vote A,E or B,F
Yes
No
F
E
A
D
B
C
A
B
George Washington
Vote A,E or B,H  or C,G  or D,F
John Adams
Vote A,F or B,E or C,H  or D,G
Thomas Jefferson
Right
Vote A,G  or B,F or C,E or D,H
James Madison
Vote A,H  or B,G  or C,F or D,E
Proposition 123
Ballot 2
Verification Code:
GmJYsZDhSfEILpCjAkvd+v2Ghv0
Vote A,F or B,E
Vote A,E or B,F
Yes
No
Remove and scan bottom pages
Publicly destroy top (red) pages and open sealed ballots
Figure 2.1: Illustrated Sample Vote
though computers may be used to improve the user
experience.
A vote consists of four ballots, two from each vot-
ing authority. The voter selects one ballot from each
authority for veriﬁcation (they will not be used for
voting). The remaining two ballots are used to vote.
The voter’s choices on both ballots, taken together,
uniquely deﬁne the vote. A partial copy of each ballot
is retained by the voter as a receipt (a more detailed
description appears in Section 2.2).
3. Tally: The two authorities publish all of the ballots.
Voters may verify that their receipts appear correctly
in the published tally. The two authorities then co-
operate to tally the votes. The ﬁnal result is a public
proof that the tally is correct.
4. Universal Veriﬁcation:
In this phase any interested
party can download the contents of the public bulletin
board and verify that the authorities correctly tallied
the votes.
2.1 Shufﬂing Commitments
One of the main contributions of this paper is achiev-
ing “everlasting privacy” with more than one voting au-
thority. At ﬁrst glance, this seems paradoxical: if a voting
authority publishes any information at all about the votes
(even encrypted), the scheme can no longer be information-
theoretically private. On the other hand, without publishing
information about the votes, how can two voting authorities
combine their information?
We overcome this apparent contradiction by introducing
the “oblivious commitment shuﬄe”: a way for indepen-
dent authorities to veriﬁably shuﬄe perfectly-hiding com-
mitments (which will give us information-theoretic privacy).
The problem of veriﬁably shuﬄing a vector of encrypted
values has been well studied. The most commonly used
scheme involves multiple authorities who successively shuﬄe
the encrypted vector using a secret permutation, and then
prove that the resulting vector of encrypted values is valid.
Finally, the authorities cooperate to decrypt the ultimate
output of the chain. If even one of the authorities is honest
(and keeps its permutation secret), the remaining authorities
gain no information beyond the ﬁnal tally.
This type of scheme breaks down when we try to apply
it to perfectly-hiding commitments rather than encryptions.
The problem is that in a perfectly-hiding commitment, the
committed value cannot be determined from the commit-
ment itself. Thus, the standard method of opening the com-
mitments after shuﬄing cannot be used.
The way we bypass the problem is to allow the authorities
to communicate privately using a homomorphic encryption
scheme. This private communication is not perfectly hid-
ing (in fact, the encryptions are perfectly binding commit-
ments), but the voting scheme itself can remain information-
theoretically private because the encryptions are never pub-
lished. The trick is to encrypt separately both the message
and the randomness used in the commitments. We use a
homomorphic encryption scheme over the same group as
the corresponding commitment. When the ﬁrst authority
shuﬄes the commitments, it simultaneously shuﬄes the en-
cryptions (which were generated by the other authority). By
opening the shuﬄed encryptions, the second authority learns
the contents and randomness of the shuﬄed commitments
(without learning anything about their original order). The
second authority can now perform a traditional commitment
shuﬄe.
2.2 Human Capability
The most questionable assumption we make with this pro-
tocol concerns human capability. It is essential to our pro-
tocol that the voter can do two things: randomly select a
value from a set of values, and perform modular addition.
248The ﬁrst is a fairly standard assumption. The second seems
highly suspect.
We propose an interface that borrows heavily from Punch-
scan’s in order to make the voting task more intuitive. The
basic idea is to form the ballot from two stacked papers. The
top paper contains explanations, as well as a random per-
mutation of letters. It also contains holes through which the
bottom paper can be seen. Next to each letter on the top
page, the bottom paper contains a scannable bubble that
can be marked with a pencil or pen; when the two papers
are stacked the bubbles are visible through holes in the top
paper.
The voter selects a letter by marking the corresponding
bubble. Each candidate on the ballot can be chosen by some
combinations of two letters. We construct the ballots in such
a way that when two ballots are stacked, one from each au-
thority, the letters and bubbles from both ballots are visible.
The voter then chooses one of the letter combinations for her
desired candidate, and marks the bubbles.
2.3 Vote Casting Example
To help clarify the voting process, we give a concrete ex-
ample, describing a typical voter’s view of an election (this
view is illustrated in Figure 2.1). The election is for the oﬃce
of president, and also includes a poll on “Proposition 123”.
The presidential candidates are George, John, Thomas and
James.
Sarah, the voter, enters the polling place and receives
four ballots in sealed envelopes: two “Left” ballots and two
“Right” ballots (we can think of the two voting authorities as
the “Left” authority and the “Right” authority). She takes
the ballots and enters the polling booth. She then randomly
chooses one of the Left ballots and one of the Right ballots
and opens their envelopes. She removes the ballots, each
of which consists of a red (top) and green (bottom) page.
She stacks all four pages together (the order doesn’t mat-
ter). Sarah wants to vote for Thomas and to vote Yes on
Proposition 123. She ﬁnds her candidate’s name on the top
paper, and sees that he is represented by the pairs (A,G),
(B,F), (C,E), and (D,H). She randomly picks (B,F) and
marks her ballot.1 She sees that to vote Yes on Proposition
123 she can choose either (A,E) or (B,F). She randomly
chooses (A,E) and ﬁlls the appropriate bubbles.
Sarah then separates the papers. She scans both bot-
tom pages. The scanner can give immediate output so she
can verify that she ﬁlled the bubbles correctly, and that the
scanner correctly identiﬁed her marks.2 At home Sarah will
make sure that the veriﬁcation code printed on the pages,
together with the positions of the marked bubbles, are pub-
lished on the bulletin board by the voting authorities. Al-
ternatively, she can hand the receipts over to a helper orga-
nization that will perform the veriﬁcation on her behalf.
The top pages she destroys, then demonstrates she has
done so to an election oﬃcial (the oﬃcial will not be allowed
to see the text on those pages, of course). Finally, the elec-
tion oﬃcial veriﬁes that the two unvoted ballot envelopes are
1One possible way to make sure the choice is truly random
would be to use a physical aid, such as a spinner, coins or
dice
2Note that Sarah doesn’t have to trust the scanner (or its
software) in any way: These pages will be kept by Sarah as
receipts which she can use to prove that her vote was not
correctly tabulated (if this does occur).
still sealed, then allows Sarah to open them. The complete
(unvoted) ballots will also be kept for veriﬁcation, or given
to a helper organization. At home, Sarah will make sure the
complete ballots are published on the bulletin board.
2.4 The Importance of Rigorous Proofs of
Security for Voting Protocols
To demonstrate why formal proofs of security are impor-
tant, we describe a vote-buying attack against a previous
version of the Punchscan voting protocol. The purpose of
this section is not to disparage Punchscan; on the contrary,
we use Punchscan as an example because it is one of the sim-
plest protocols to understand and has been used in practice.
A closer look at other voting protocols may reveal similar
problems. Our aim is to encourage the use of formal security
analysis to detect (and prevent) such vulnerabilities.
We very brieﬂy describe the voter’s view of the Punchscan
protocol, using as an example an election race between Alice
and Bob. The ballot consists of two pages, one on top of the
other. The top page contains the candidates’ names, and
assigns each a random letter (either A or B). There are two
holes in the top page through which the bottom page can be
seen. On the bottom page, the letters A and B appear in a
random order (so that one letter can be seen through each
hole in the top page). Thus, the voter is presented with one
of the four possible ballot conﬁgurations (shown in Figure
2.2).
#25
#25
#25