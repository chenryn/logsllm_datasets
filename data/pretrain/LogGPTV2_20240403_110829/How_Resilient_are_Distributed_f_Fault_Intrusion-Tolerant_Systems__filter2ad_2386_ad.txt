### System Behavior and Adversary Attacks

The system's performance can be significantly impacted by certain attacks, which slow down specific nodes and delay message delivery between different parts of the system, or temporarily partition the network. It is important to note that after such an attack, the system's behavior may resemble that of a fault-free asynchronous system. This means that the attack forces the system to behave in a manner convenient for the adversary (ADV2), rather than waiting for the system to naturally exhibit such behavior.

#### Attack by Adversary ADV1

ADV1 initiates a mobile virus attack on \( f + 1 \) servers. Instead of attempting to retrieve the CODEX private key share from each node, ADV1 adjusts the local clock rate of each compromised node. The adjustment increases the drift rate, making the clock slower than real time. Specifically, 1 system second becomes \( \lambda \) real-time seconds, where \( \lambda > 1 \).

APSS (Asynchronous Proactive Secret Sharing) execution is triggered either by a local timer at each node or by a notification received from another node. The mobile virus attack delays the APSS execution on up to \( f + 1 \) nodes but does not prevent the reception of notifications from the remaining \( n - (f + 1) \) nodes. Therefore, various APSS instances will still run during the attack.

After slowing down the clocks of \( f + 1 \) nodes, ADV1 attacks the links between these nodes and the rest of the system. This can involve temporarily cutting off the links or removing messages that could initiate APSS. The links are restored once ADV2 obtains the CODEX private key, ensuring that the fair links assumption is never violated.

It is worth noting that the interruption of communications is not strictly necessary for the effectiveness of the ADV2 attack. Alternatively, the mobile attack could be extended to all \( n \) nodes, delaying APSS execution across the entire system.

#### Attack by Adversary ADV2

ADV2 launches another mobile virus attack on the same \( f + 1 \) nodes compromised by ADV1. Unlike the previous attack, this one has a time constraint: the APSS execution interval. For \( f + 1 \) shares to be useful, they must be retrieved within the interval between two successive APSS executions. However, with the clocks slowed down by ADV1, the actual APSS interval is much larger than expected, effectively removing the time constraint.

Without the time constraint, ADV2 can implement the mobile virus attack suggested in the CODEX paper, learning \( f + 1 \) CODEX private key shares one by one. Using these shares, ADV2 can disclose the CODEX private key, decrypt secrets stored in the compromised nodes, and access new secrets submitted by clients through write operations.

### Flaw in CODEX Assumptions

This attack exploits a flaw in the assumptions made by CODEX. While it embraces the asynchronous model, it implicitly assumes access to a clock with a bounded drift rate. In an asynchronous system, such bounds do not exist. Typically, a computer clock has a bounded drift rate guaranteed by its manufacturer, but this is only useful in environments with accidental failures. If an adversary gains access to the clock, they can arbitrarily change its progress relative to real time.

More generally, proactive recovery has compatibility issues with the asynchronous model. The definition of the window of vulnerability in terms of events rather than the passage of time can potentially give attackers leverage. Asynchronous systems evolve at an arbitrary pace, while proactive recovery has natural timeliness requirements. Despite these problems, APSS (Asynchronous Proactive Secret Sharing) can defend against some attacks that compromise synchronous protocols, such as those invalidating timing assumptions. However, APSS is still vulnerable to time-based attacks like the one described above. Therefore, asynchronous systems enhanced with proactive recovery subsystems show promise but require careful design.

### Combining Proactive Recovery and Wormholes

To address the problem of ensuring exhaustion-safe operation of proactive recovery systems, we propose using wormholes: subsystems capable of providing a small set of services with good properties otherwise unavailable in the rest of the system. For example, an asynchronous system can be augmented with a synchronous wormhole that offers timely operations. Wormholes must be kept small and simple to ensure their trustworthiness and must have access to all required resources when needed.

We could use the TTCB (Timely Computing Base) Timely Execution Service to execute proactive recovery protocols. The feasibility of building such a service is confirmed by the available implementation of the TTCB for the RTAI operating system.

Future work includes the conception of a wormhole specifically tailored for proactive recovery, which will likely be simpler and require weaker environmental assumptions than the TTCB. A representation of a system using a wormhole to execute proactive recovery procedures is depicted in Figure 5.

### Conclusions and Future Work

This paper discusses the resilience of synchronous and asynchronous systems, proposing a system model that considers environmental resources and their evolution over time. We introduced the predicate "exhaustion-safe," meaning freedom from exhaustion-failures. Based on this model, we showed that it is possible to have exhaustion-safe fault/intrusion-tolerant synchronous systems with a bounded lifetime, provided timing assumptions are not violated. Conversely, it is impossible to have exhaustion-safe fault/intrusion-tolerant asynchronous systems. Even proactive recovery in asynchronous systems, though a significant advancement, has limitations that were previously unidentified. We demonstrated these limitations through an attack on the CODEX system that does not violate any of its operational assumptions. Finally, we proposed combining proactive recovery and wormholes as a potential solution to these limitations.

Future work will focus on studying the combination of proactive recovery and wormholes in more detail, aiming to define a hybrid wormhole-enhanced architecture that guarantees the safety of the asynchronous (or synchronous) payload part, despite any number of arbitrary faults, through the timely execution of proactive recovery protocols.

### Acknowledgments

We would like to thank Ant√≥nia Lopes and the anonymous referees for their valuable comments on improving this paper.

### References

[References are listed as in the original text.]

---

This optimized version aims to enhance clarity, coherence, and professionalism, making the content more accessible and easier to understand.