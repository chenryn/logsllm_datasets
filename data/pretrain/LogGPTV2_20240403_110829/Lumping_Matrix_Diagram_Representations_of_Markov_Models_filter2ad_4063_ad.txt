which is computed in ADDPAIR, gives the subclasses into
(cid:13)
which each class C ∈ P should be partitioned. Formally,
D is a set of pairs such that
(cid:3) = C,
1.
2. ∀ (sum1, C
1 ∩ C
(cid:3)
C
3. ∀ (sum, C
sum is of data type T , and sum[i] = sum.
(sum,C(cid:1))∈D C
1) (cid:5)= (sum2, C
(cid:3)
2 = ∅, and
(cid:3)
(cid:3)) ∈ D, i ∈ C
(cid:3) : C
2) ∈ D : sum1 (cid:5)= sum2 ⇒
(cid:3)
(cid:3) (cid:5)= ∅,
2We do not formally introduce data types here because we do not be-
lieve it would improve the readability of the paper. A concept of data types
similar to that in the C language sufﬁces for our discussion.
6
LUMP(R,S,P ini)
1 P := COMPLUMPING(R,S,P ini)
2 for each ˜i, ˜j ∈ {1, . . . ,|P|},˜i (cid:2)= ˜j
s := arbitrary element of C˜i ∈ P
3
(cid:0)R(˜i, ˜j) = K(R, s, C˜j )
4
s := arbitrary element of C˜j ∈ P
(cid:2)
3
(cid:2)
(cid:0)R(˜i, ˜j) = K(R, s, C˜i)
4
5 return
(cid:0)R
(a) Main procedure
COMPLUMPING(R,S,P ini)
1 P := P ini ; L := P ini
2 while L (cid:2)= ∅
3
4
5
6
7 return P
C := POP(L)
for each s ∈ S
SPLIT(P, L)
sum(s) := K(R, s, C)
(b) Computes coarsest lumpable partition us-
ing function K
SPLIT(P, L)
1 D := ∅
2 for each C ∈ P
for each s ∈ C
3
4
P := P − C
5
for each pair (sum, C(cid:2)) ∈ D
6
; L := L ∪ C(cid:2)
7
ADDPAIR(D, s)
P := P ∪ C(cid:2)
(c) SPLIT procedure
Figure 1. Algorithm for computing ordinarily and exactly lumpable partitions for a single matrix R
The deﬁnition of D requires equality to be well-deﬁned on
data type T , as we mentioned above. D is built in lines 3-4
of SPLIT. In lines 5-7, each class C ∈ P is replaced with
subclasses taken from the second components of elements
of D. Those subclasses are also added to the set of potential
splitters L so that COMPLUMPING will work correctly. P ini
is computed with respect to ordinary or exact lumpability.
For ordinary lumpability, two states i and j are in the same
equivalence class of P ini iff r(i) = r(j) (Theorem 1(a)).
For exact lumpability, two states i and j are in the same
equivalence class of P ini iff πini(i) = πini(j) and R(i,S) =
R(j,S) (Theorem 1(b)).
ADDPAIR(D, s)
(cid:3)) ∈ D
1 for each pair (sum, C
if sum = sum(s) then C
2
3 D := D ∪ {(sum(s),{s})}
(cid:3) := C
(cid:3) ∪ {s} ; return
Figure 2. AddPair procedure
Extension to ≈lo and ≈le. Computation of ≈lo and ≈le
equivalence relations using the COMPLUMPING procedure
requires the choice of an appropriate K function that takes
Deﬁnition 3 into consideration. The ﬁrst obvious way to
make K(Rn2, s2, C2) satisfy Eqs. (2) and (5) is to set
K(Rn2, s2, C2) to Rn2(s2, C2) for ordinary lumpability
and to Rn2(C2, s2) for exact lumpability, when we apply
COMPLUMPING to Rn2.
Therefore, data type T is the set of matrices of size at
most |S3| × |S3|. Considering the fact that level 3 of the
MD is built through merging of at most L − 1 levels of
the original MD, the computation of function K and equal-
ity testing for T are prohibitively time-consuming for levels
i < L. Therefore, we do not follow that approach.
The other choice is to have K compute a formal sum
represented as a set of (coefﬁcient, node index) pairs. Note
that for any node Rn2,
Rn2(s2, C2) =
rn2,n3(s2, s
2) · Rn3 =
(cid:3)
(cid:6)
(cid:6)
 (cid:6)
(cid:6)
(cid:7)
2∈C2
(cid:1)
s
2∈C2
(cid:1)
s
n3∈N3
n3∈N3
(cid:10)
(cid:3)
2)
rn2,n3(s2, s
(cid:8)(cid:9)
·Rn3,
(12)
=rn2,n3 (s2,C2)
which implies Rn2(s2, C2) = Rn2(ˆs2, C2) if ∀ n3 ∈ N3 :
rn2,n3(s2, C2) = rn2,n3(ˆs2, C2). A similar formulation
holds for Rn2(C2, s2). The condition is only sufﬁcient
since (1) a weighted sum of matrices may be equal even if
⇔ ni = n
(cid:3)
the individual terms differ, and (2) Rni = Rn
(cid:1)
i
i
does not necessarily hold for an arbitrary MD. Canonical
MDs [15] are a particular subclass of MDs in which the
expression is true; Rni is uniquely represented by ni. Nev-
ertheless, efﬁciency of MDs is based on sharing of equal
nodes, so one can expect that having two nodes Rni and
i that represent the same matrix Rni = Rn
(cid:1)
(cid:1)
i is uncom-
Rn
mon in MDs.
comparison at level 2 and set K(Rn2, s2, C2)
=
(cid:4) {(rn2,n3(s2, C2), n3)| n3 ∈ N3}
(cid:2)
(cid:2)
{(rn2,n3(C2, s2), n3)| n3 ∈ N3}
which is a set
representation of
sum
n3∈N3 rn2,n3(C2, s2) ·
n3∈N3 rn2,n3(s2, C2) · Rn3 or
Rn3 with references to nodes Rn3, and not to matrices
Rn3. Two formal sums are equal if their corresponding sets
are equal. That means that the algorithm is applied locally
only at nodes in N2 of size |S2| × |S2| and not at matrices
of size at most |S3| × |S3|.
Based on the above observation, we can localize the
ordinary lumping
exact lumping
the formal
Using local lumpability conditions for a level that are
only sufﬁcient (instead of both sufﬁcient and necessary)
leads to an improved time complexity for the algorithm,
but also prevents the algorithm from generating the coarsest
possible lumpable partition for that level. That means there
is a trade-off between time complexity and coarseness of
the computed partition when the algorithm is used on an L-
level MD. We have so far shown how to compute a partition
7
that satisﬁes Eqs. (1) and (4) of Deﬁnition 3 for one node
of the matrix. The last step in computing Plo and Ple is to
ﬁnd a partition that satisﬁes those equations for all nodes
of level 2. COMPLUMPINGLEVEL in Figure 3(a) computes
such a partition by ﬁxed-point iteration. More speciﬁcally,
it applies the COMPLUMPING algorithm repeatedly to all
nodes in level i until they are all lumpable with respect to
the computed partition P.
COMPLUMPINGLEVEL(Pini, i)
1 P := P ini
2 repeat
P(cid:2) := P
3
for each ni ∈ Ni
4
5
6 until P = P(cid:2)
7 return P
P(cid:2) := COMPLUMPING(Rni,Si,P(cid:2))
(a) Computes lumpable partition for level i
COMPOSITIONALLUMP
1 for i := 1 to L
Compute P ini
2
Pi = COMPLUMPINGLEVEL(P ini
i
3
for each ni ∈ Ni
4
5
6
7
(cid:0)Rni := LUMP(Rni ,Si, Pi)
Replace Rni with
(cid:0)Rni in MD
Compute lumped version of rewards
and initial probabilities at level i
i , i)
(b) Main algorithm
Figure 3. Compositional lumping algorithm
for an MD
has a number of servers, an input pool of jobs that are wait-
ing to be serviced, and an output pool of jobs that have al-
ready been serviced by a server in the subsystem. Each sub-
system takes jobs from its input pool, processes them using
its servers and passes them to its output pool. Each of the
two subsystems interacts with the other by sharing its out-
put pool with the input pool of the other. In other words,
jobs in one subsystem enter the input pool of the other upon
completion of service. The system is closed in the sense
that there is always a constant number J of jobs in it.
The ﬁrst subsystem is an MSMQ (Multi-Server Multi-
Queue) polling-based queuing system with 3 identical
servers and 4 identical queues, as described in [14]. Fig. 4
shows a high-level view of the cyclic arrangement of the
queues and also shows how each of the 3 servers moves
from one queue to the next after a waiting time that is an
exponentially distributed random variable with a constant
rate. Upon entering a queue, a server polls the queue. If
there is no job waiting for service, it goes to the next queue
after some waiting time. Otherwise, it gives service to one
job in the queue and waits to be transferred to the next one.
The MSMQ subsystem distributes the jobs from its input
pool to each of the 4 queues with equal probability. After
being served, each job is transferred to the hypercube sub-
system’s input pool. More details on the MSMQ subsystem
can be found in [14].
input pool
queue1
queue2
queue3
queue4
Overall Algorithm. The ﬁnal step of our algorithm for
lumping an MD is to use COMPLUMPINGLEVEL to com-
pute lumpable partitions for each level starting from an ini-
tial partition (lines 2-3 of Figure3(b)), lump every node with
respect to the partition corresponding to its level (line 5), re-
place each node with its lumped version (line 6), and ﬁnally,
compute(cid:1)πini and(cid:1)r (line 7).
  

  

  

  
  


 
  


  

 

 
  


 

 
  


three
servers
server
wait
server
wait
server
wait
server
wait
Line 2 computes the initial partition for level i based
on whether we are computing ordinary lumping or exact
is the coarsest partition on Si
lumping.
∈ C, ni ∈ Ni, ni+1 ∈ Ni+1:
such that ∀ C ∈ P ini
(cid:3)
i
i
ordinary lumping:
exact lumping:
In fact, P ini
i
, si, s
fi(si) = fi(s
)
fπ,i(si) = fπ,i(s
rni,ni+1(si,Si) = rni,ni+1(s
i,Si)