### 第27章 几个脚本例子

#### 27.1 备份脚本 `backup_gen`

`backup_gen` 是一个用于系统备份的脚本。它从默认配置文件 `backup.defaults` 中读取设置，并根据这些参数执行备份操作。用户可以根据需要修改这些默认设置。此脚本展示了如何在多个脚本之间共享设置，或仅在运行时修改特定设置。

**脚本流程：**
- 检查配置文件 `backup.defaults` 是否存在。如果不存在，则退出。
- 显示标题和默认设置，并询问用户是否要更改任何默认值。
- 如果用户选择“是”，则要求输入一个代码（有三次机会）。如果输入正确，用户可以修改以下设置：
  - 磁带设备 [rmt0] (可选 rmt1 和 rmt3)
  - 备份完成后是否向系统管理员发送邮件 [是] (可选 否)
  - 备份类型 [全备份] (可选 普通备份 或 Sybase 备份)

**不可更改的设置：**
- 备份日志文件名
- 用户代码

**备份过程：**
- 使用 `find` 和 `cpio` 命令进行备份，这些命令从配置文件中读取默认值或使用用户指定的值。
- 在备份开始前，会测试磁带设备。

**示例脚本：**
```bash
#!/bin/bash

# 检查配置文件是否存在
if [ ! -f backup.defaults ]; then
    echo "备份配置文件不存在，退出！"
    exit 1
fi

# 显示标题和默认设置
echo "欢迎使用备份脚本"
. ./backup.defaults
echo "当前设置如下："
echo "磁带设备: $TAPE_DEVICE"
echo "发送邮件: $SEND_EMAIL"
echo "备份类型: $BACKUP_TYPE"

# 询问用户是否更改设置
read -p "是否需要更改以上设置？(y/n): " change_settings
if [ "$change_settings" == "y" ] || [ "$change_settings" == "Y" ]; then
    # 输入密码验证
    for i in {1..3}; do
        read -p "请输入密码: " password
        if [ "$password" == "your_password" ]; then
            break
        else
            echo "密码错误，请重试！"
        fi
    done

    if [ "$password" != "your_password" ]; then
        echo "密码错误次数过多，使用默认设置进行备份。"
    else
        # 更改设置
        read -p "磁带设备 (rmt0, rmt1, rmt3): " TAPE_DEVICE
        read -p "备份完成后发送邮件 (y/n): " SEND_EMAIL
        read -p "备份类型 (全备份, 普通备份, Sybase 备份): " BACKUP_TYPE
    fi
fi

# 测试磁带设备
if ! test_tape_device; then
    echo "磁带设备测试失败，退出！"
    exit 1
fi

# 执行备份
backup_system
```

#### 27.2 删除空行脚本 `del.lines`

`del.lines` 脚本用于删除文件中的空行。该脚本包装了 `sed` 命令，使用户更方便地使用。

**脚本功能：**
- 处理一个或多个文件。
- 在使用 `sed` 删除空行之前，检查每个文件是否存在。
- 将 `sed` 的输出导入临时文件，然后将临时文件移回原文件。

**示例脚本：**
```bash
#!/bin/bash

# 检查参数
if [ $# -eq 0 ]; then
    echo "用法: del.lines [file...]"
    exit 1
fi

# 处理每个文件
while [ $# -gt 0 ]; do
    file=$1
    shift

    # 检查文件是否存在
    if [ ! -f "$file" ]; then
        echo "文件 $file 不存在，跳过。"
        continue
    fi

    # 创建临时文件
    temp_file=$(mktemp)

    # 删除空行
    sed '/^$/d' "$file" > "$temp_file"

    # 移动临时文件到原文件
    mv "$temp_file" "$file"
done
```

#### 27.3 禁止登录脚本 `access.deny`

`access.deny` 脚本用于禁止某些用户登录系统。可以通过创建 `/etc/nologin` 文件来实现这一功能。

**脚本功能：**
- 在 `/etc/profile` 文件中添加代码，以便在登录时检查 `/etc/nologin` 文件。
- 如果 `/etc/nologin` 存在且包含 `all` 关键字，则禁止除 root 以外的所有用户登录。
- 可以通过删除 `/etc/nologin` 文件恢复用户登录。

**示例脚本：**
```bash
#!/bin/bash

# 检查 /etc/nologin 文件是否存在
if [ -f /etc/nologin ]; then
    # 读取 /etc/nologin 文件内容
    content=$(cat /etc/nologin)

    # 检查是否包含 all 关键字
    if [[ "$content" == *"all"* ]]; then
        echo "系统维护中，禁止登录。"
        exit 1
    fi
fi

# 允许登录
echo "欢迎登录！"
```

#### 27.4 日志轮转脚本 `logroll`

`logroll` 脚本用于自动管理日志文件的大小。当某个日志文件超过指定大小时，将其内容转移到带有时间戳的新文件中，并清空原文件。

**脚本功能：**
- 设置日志文件的最大块数。
- 检查每个日志文件的大小。
- 如果文件大小超过限制，则将其内容复制到新文件，并清空原文件。

**示例脚本：**
```bash
#!/bin/bash

# 设置日志文件的最大块数
BLOCK_LIMIT=8
LOGS="/var/log/*.log"

# 检查每个日志文件
for log in $LOGS; do
    # 获取文件大小
    size=$(du -k "$log" | cut -f1)

    # 检查文件大小是否超过限制
    if [ $size -gt $((BLOCK_LIMIT * 4096)) ]; then
        # 创建新文件名
        new_log="${log}.$(date +%Y%m%d%H%M%S)"

        # 复制文件并清空原文件
        cp "$log" "$new_log"
        > "$log"

        echo "日志文件 $log 已轮转为 $new_log。"
    fi
done
```

#### 27.5 卸载 NFS 文件系统脚本 `nfsdown`

`nfsdown` 脚本用于快速卸载所有挂载的 NFS 文件系统，以便更快地重启系统。

**脚本功能：**
- 列出提供 NFS 目录的主机名。
- 使用 `for` 循环逐一卸载这些目录。
- 使用 `grep` 命令查找 NFS 文件系统。

**示例脚本：**
```bash
#!/bin/bash

# 定义提供 NFS 目录的主机名
LIST="host1 host2 host3"

# 卸载每个 NFS 文件系统
for host in $LIST; do
    # 查找挂载点
    mounts=$(df -h | grep "/$host")

    # 卸载每个挂载点
    for mount in $mounts; do
        umount "$mount"
        echo "已卸载 $mount。"
    done
done
```

### 27.6 小结

本章介绍了一些常用的脚本示例，包括备份、删除空行、禁止登录、日志轮转和卸载 NFS 文件系统。这些脚本不仅展示了 shell 编程的基本技巧，还提供了实际应用中的解决方案。希望这些示例能帮助你更好地理解和使用 shell 脚本。