它按一定的原则把处理机分配给进程使用。进程 1 是初始化进程，它是程序/sbin/init 的执
行。进程 1 是 UNIX 系统那其它进程的祖先，并且是进程结构的最终控制者。
利用系统调用 getpid 可以得到程序本身的进程标识符，其用法如下：
pid=getpid();
利用系统调用 getppid 可以得到调用进程的父进程的标识符，其用法如下：
ppid=getppid();
下面给出一个例子，其中的例行程序 gentemp 使用 getpid 产生一个唯一的临时文件名，
该文件名的形式为：
/tmp/tmp.
每对 getemp()调用一次，文件名的后缀 no 就增 1，文件名中的 pid 为用 getpid 取到的
进程标识符。该例行程序还调用 access 来检查该文件是否已经存在，更增加了可靠性。
例行程序 gentemp 的代码如下所示：
#include 
#include 
static int num=0;
static char namebuf[20];
static char prefix[]="/tmp/tmp";
char* gentemp()
{
int length,pid;
/* 获得进程标识符 */
第三章 进程控制
- 39 -
pid=getpid();
strcpy(namebuf,prefix);
length=strlen(namebuf);
/* 在文件名中增加 pid 部分 */
itoa(pid,&namebuf[length]);
strcat(namebuf,".");
length=strlen(namebuf);
do{
/* 增加后缀 number */
itoa(num++,&namebuf[length]);
} while (access(namebuf,0)!=-1);
return namebuf;
}
在 gentemp 中调用了例行程序 itoa()，这个例行程序把一个整数转换成其对应的 ASCII
字符串。下面给出 itoa()的程序清单。请注意其中的第二个 for 循环体内的第一个语句，它
实现把一个数转换成其对应的 ASCII 字符。
/* itoa 把整型转换成字符串 */
itoa(int i,char* string)
{
int power, j;
j=i;
for (power=1;j>=10;j/=10)
power*=10;
for (;power>0;power/=10) {
*string++=’0’+i/power;
i%=power;
}
*string=’\0’;
}
3.3.2  进程的组标识符
Linux 把进程分属一些组，用进程的组标识符来知识进程所属组。进程最初是通过 fork()
和 exec 调用来继承其进程组标识符。但是，进程可以使用系统调用 setpgrp()，自己形成一
个新的组。setpgrp()在 Linux 系统函数库 unistd.h 中的函数声明如下：
       int setpgrp(void);
setpgrp()的返回值 newpg 是新的进程组标识符，它就是调用进程的进程标识符。这时，
调用进程就成为这个新组的进程组首（process group leader）。它所建立的所有进程，将继
承 newpg 中的进程组标识符。
一个进程可以用系统调用 getpgrp()来获得其当前的进程组标识符，getpgrp()在 Linux
系统函数库 unistd.h 中的函数声明如下：
       int setpgrp(void);
- 40 -
Linux网络编程
函数的返回值就是进程组的标识符。
进程组对于进程间的通信机构——信号来说，是非常有用的。我们将在下一章内讨论
它。现在，我们讨论进程组的另一个应用。当某个用户退出系统时，则相应的 shell 进程所
启动的全部进程都要被强行终止。系统是根据进程的组标识符来选定应该终止的进程的。
如果一个进程具有跟其祖先 shell 进程相同的组标识符，那末它的生命期将可超出用户的注
册期。这对于需要长时间运行的后台任务是十分有用的。
下面给出一个改变进程的组标识符的例子，它的效果相当于使用“ 不中止” 程序 nohup
的效果。
main()
{
int newpgid;
/* 改变进程组 */
newpgid=setpgrp();
/* 程序体 */
⋯ ⋯
⋯ ⋯
}
3.3.3  进程环境
进程的环境是一个以 NULL 字符结尾的字符串之集合。在程序中可以用一个以 NULL
结尾的字符型指针数组来表示它。系统规定，环境中每个字符串形式如下：
name=something
Linux 系统提供了 environ 指针，通过它我们可以在程序中访问其环境内容。
在使用 environ 指针前，应该首先声明它：
      extern char **environ;
下面的这段代码（showenv.c）演示了如何通过 environ 指针访问环境变量：
extern char** environ;
main()
{
char** env=environ;
while (*env) {
printf(%s\n”,*env++);
}
return;
}
下面是这个程序运行后的结果：
HOME=/home/roy
USER=roy
LOGNAME=roy
PATH=/usr/bin:/bin:/usr/local/bin:/usr/X11R6/bin
第三章 进程控制
- 41 -
MAIL=/var/spool/mail/roy
SHELL=/bin/tcsh
SSH_CLIENT=192.168.35.72 1145 22
SSH_TTY=/dev/pts/0
TERM=ansi
HOSTTYPE=i486-linux
VENDOR=intel
OSTYPE=linux
MACHTYPE=i486
SHLVL=1
PWD=/home/roy/test
GROUP=roy
HOST=bbs
HOSTNAME=bbs
以上的结果是运行该程序的 shell 进程环境，其中包括了像 HOME 和 PATH这些被 shell
使用的重要变量。
从这个例子中可以看到，一个进程的初始环境与用 fork()或 exec 建立它的父进程之环
境相同。由于环境可以通过 fork()或者 exec 被传送，所以其信息被半永久性的保存。对于
新建立的进程来说，可以重新指定新的环境。
如果要为进程指定新的环境，则需要使用 exec 系列中的两种系统调用：execle()和
execve()。它们在 Linux 系统函数库 unistd.h 中的函数声明如下：
int execle( const char *path, const char *arg , ..., char * const envp[]);
int  execve  (const  char  *filename,  char  *const argv [], char*
const envp[]);
它们的调用方法分别类似于 execl()和 execv()，所不同的是它们增加了一个参数 envp，
这是一个以 NULL指针结束的字符数组，它指出了新进程的环境。下面的程序演示了execve()
的用法，它用 execve()把新的环境传送给上面的程序程序 showenv：
#include 
main()
{
char *argv[]={"showenv", NULL},
     *envp[]={"foo=bar", "bar=foo", NULL};
execve("./showenv",argv,envp);
perror("exeve failed.");
return;
}
程序执行结果如下：
foo=bar
bar=foo
最后我们利用 environ 指针构造一个函数 findenv()，其程序如下：
extern char** environ;
- 42 -
Linux网络编程
char* findenv(char* name)
{
int len;
char **p;
for(p=environ;*p;p++)
{
if((len=pcmp(name,*p))>=0 &&
*(*(p+1))=='=")
return *(p+l+1);
}
return NULL;
}
int pcmp(char* s1, char* s2)
{
int i=0;
while(*s1) {
i++;
if (*s1++!=*s2++)
return -1;
}
return i;
}
findenv()根据参数给出的字符串 name，扫描环境内容，找出“ name=string”这种形式
的字符串。如果成功，findenv()就返回一个指向这个字符串中”string”部分的指针。如果不
成功，就返回一个 NULL 指针。
在 Linux 的系统函数库 stdlib.h 中提供了一个系统调用 getenv()，它完成与 findenv()同
样的工作。另外还有一个与 getenv()相配对的系统调用 putenv()，它用于改变和扩充环境，
其使用方法为：
putenv(“newvariable=value”);
如果调用成功，其就返回零。需要注意的是，它只能改变调用进程的环境，而父进程
的环境并不随之改变。
3.3.4  进程的当前目录
每个进程都有一个当前目录。一个进程的当前目录最初为其父进程的当前目录，可见
当前目录的初始值是通过 fork()和 exec 传送下去的。我们必须认识到，当前目录是进程的
一个属性。如果子进程通过 chdir()改变了它的当前目录，那么其父进程的当前目录并没有
因此而改变。鉴于此原因，系统的 cd 命令（改变当前目录命令）实际上是一个 shell 自身
的内部命令，其代码在 shell 内部，而没有单独的程序文件。只有这样，才能改变相应 shell
进程的当前目录。否则的话，只能改变 cd 程序所运行进程自己的当前目录。当初刚把多任
务处理加入 UNIX 时，cd 命令是作为一个普通程序来实现的，没有考虑到上述情况，因而
引起了一些混乱。
第三章 进程控制
- 43 -
类似的，每个进程还有一个根目录，它与绝对路径名的检索起点有关。与当前目录一
样，进程的根目录的初始值为其父进程的根目录。可以用系统调用 chroot()来改变进程的根
目录，但是这不会改变其父进程的根目录。
3.3.5  进程的有效标识符
每个进程都有一个实际用户标识符和一个实际组标识符，它们永远是启动该进程之用
户的用户标识符和组标识符。
进程的有效用户标识符和有效组标识符也许更重要些，它们被用来确定一个用户能否
访问某个确定的文件。在通常情况下，它们与实际用户标识符和实际组标识符是一致的。
但是，一个进程或其祖先进程可以设置程序文件的置用户标识符权限或置组标识符权限。
这样，当通过 exec 调用执行该程序时，其进程的有效用户标识符就取自该文件的文件主的
有效用户标识符，而不是启动该进程的用户的有效用户标识符。
有几个系统调用可以用来得到进程的用户标识符和组标识符，详见下列程序：
#include 
#include 
uid_t uid,euid;
gid_t gid,egid;
….
….
/* 取进程的实际用户标识符 */
uid=getuid();
/* 取进程的有效用户标识符 */
euid=geteuid();
/* 取进程的实际组标识符 */
gid=getgid();
/* 取进程的有效组标识符 */
egid=getegid();
另外，还有两个系统调用可以用来设置进程的有效用户标识符和有效组标识符，它们
的使用格式如下：
#include 
#include 
uid newuid;
pid newgid;
int status;
/* 设定进程的有效用户标识符 */
status=setuid(newuid);
/* 设定进程的有效组标识符 */
- 44 -
Linux网络编程
status=getgid(newgid);
不是超级用户所引用的进程，只能把它的有效用户表示符和有效组标识符重新设置成
其实际用户标识符和实际组标识符。超级用户所引用的进程就可以自由进行其有效用户标
识符和有效组标识符的设置。这两个调用的返回值为零，表示调用成功完成；返回值为-1，
则表示调用失败。
通过这两个系统调用，进程可以改变自己的标识符，进而改变自己的权限（因为 Linux
中权限是通过标识符来判断的）。比如一个 root 建立的进程可以用这种方法放弃一部分的
root 权限而只保留工作所需的权限。这样可以提高系统的安全性。但是需要注意的是，一
旦 root 进程通过这种方式放弃了 root 特权，将无法再通过 setuid()调用的方式重新获得 root
权，因为一个非 root 标识符的进程是无法设定 root 标识符的。这时可以使用 Linux 的另外
两个系统调用 seteuid()和 setegid()。其调用方式和前两个完全相同。但是它们是根据进程程
序文件的标识符来判断设定的。因此，一个 root 的程序文件在任何时候都可以将自己重新
seteuid()为 root。
3.3.6  进程的资源
Linux 提供了几个系统调用来限制一个进程对资源的使用。它们是 getrlimit()，setrlimit()
和 getrusage()。它们的的函数声明如下：
       #include 
       #include 