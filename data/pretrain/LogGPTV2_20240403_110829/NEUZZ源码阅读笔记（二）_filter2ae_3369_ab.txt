        if (cpu_core_count > 1) {
          if (cur_runnable > cpu_core_count * 1.5) {
            printf("System under apparent load, performance may be spotty.\n");
          }
        }
      } else {
        cpu_core_count = 0;
        printf("Unable to figure out the number of CPU cores.\n");
      }
    }
####  1.2.4 bind_to_free_cpu
这一段就是照抄AFL源码的，构建绑定到特定核心的进程列表。如果什么也找不到，返回-1。假设一个4k cpu的上限
    /* Build a list of processes bound to specific cores. Returns -1 if nothing
       can be found. Assumes an upper bound of 4k CPUs. */
    static void bind_to_free_cpu(void) {
      DIR* d;
      struct dirent* de;
      cpu_set_t c;
      u8 cpu_used[4096] = { 0 };
      u32 i;
      if (cpu_core_count /status entries, checking for Cpus_allowed_list.
         Flag all processes bound to a specific CPU using cpu_used[]. This will
         fail for some exotic binding setups, but is likely good enough in almost
         all real-world use cases. */
      while ((de = readdir(d))) {
        u8* fn;
        FILE* f;
        u8 tmp[MAX_LINE];
        u8 has_vmsize = 0;
        if (!isdigit(de->d_name[0])) continue;
        fn = alloc_printf("/proc/%s/status", de->d_name);
        if (!(f = fopen(fn, "r"))) {
          free(fn);
          continue;
        }
        while (fgets(tmp, MAX_LINE, f)) {
          u32 hval;
          /* Processes without VmSize are probably kernel tasks. */
          if (!strncmp(tmp, "VmSize:\t", 8)) has_vmsize = 1;
          if (!strncmp(tmp, "Cpus_allowed_list:\t", 19) &&
              !strchr(tmp, '-') && !strchr(tmp, ',') &&
              sscanf(tmp + 19, "%u", &hval) == 1 && hval d_name) == 0 || strcmp("..",de->d_name) == 0)
                continue;
            sprintf(src, "%s/%s", in_dir, de->d_name);
            sprintf(dst, "%s/%s", out_dir, de->d_name);
            copy_file(src, dst);
        }
        closedir(dp);
        return ;
    }
####  1.2.12 init_forkserver
编译target完成后，就可以通过`afl-fuzz`开始fuzzing了。其大致思路是，对输入的seed文件不断地变化，并将这些mutated
input喂给target执行，检查是否会造成崩溃。因此，fuzzing涉及到大量的fork和执行target的过程
为了更高效地进行上述过程，AFL实现了一套fork server机制。其基本思路是：启动target进程后，target会运行一个fork
server；fuzzer并不负责fork子进程，而是与这个fork server通信，并由fork
server来完成fork及继续执行目标的操作。这样设计的最大好处，就是不需要调用`execve()`，从而节省了载入目标文件和库、解析符号地址等重复性工作
fuzzer执行`fork()`得到父进程和子进程，这里的父进程仍然为fuzzer，子进程则为target进程，即将来的fork server
    forksrv_pid = fork();
而父子进程之间，是通过管道进行通信。具体使用了2个管道，一个用于传递状态，另一个用于传递命令：
    int st_pipe[2], ctl_pipe[2];
对于子进程（fork server），会进行一系列设置，其中包括将上述两个管道分配到预先指定的fd，并最终执行target：
      if (!forksrv_pid) {
    ...
        if (dup2(ctl_pipe[0], FORKSRV_FD) < 0) PFATAL("dup2() failed");
        if (dup2(st_pipe[1], FORKSRV_FD + 1) < 0) PFATAL("dup2() failed");
    ...
        execv(target_path, argv);
对于父进程（fuzzer），则会读取状态管道的信息，如果一切正常，则说明fork server创建完成。
    fsrv_st_fd  = st_pipe[0];
    ...
    rlen = read(fsrv_st_fd, &status, 4);
    ...
    /* If we have a four-byte "hello" message from the server, we're all set.
    Otherwise, try to figure out what went wrong. */
    if (rlen == 4) {
        OKF("All right - fork server is up.");
        return;
    }
###  1.3 开始Fuzz
这里从`start_fuzz`函数看起
####  1.3.1 start_fuzz
这个主要是利用`nn.py`训练得到的模型提取出梯度指导信息从而指导fuzz
首先就是建立Socket通信
    struct sockaddr_in address;
    int sock = 0;
    struct sockaddr_in serv_addr;
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0){
        perror("Socket creation error");
        exit(0);
    }
    memset(&serv_addr, '0', sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);
    if(inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)<=0){
        perror("Invalid address/ Address not supported");