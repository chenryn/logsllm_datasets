-- apply E-linear function to constant term c0
c0’ = evalLin f’q c0
-- apply E-linear function to c1 via key-switching
c1s = coeffsPow c1 :: [Cyc t e’ zq’]
c1s’ = zipWith switch hints (embed  c1s)
c1’ = sum c1s’
return CT MSD 0 s $ P.const c0’ + c1’)
Here, tunnelHint is a function that outputs the hints 𝐻𝑗 with respect to the powerful basis
as deﬁned in subsection 4.2.3. The rest of the algorithm matches exactly with the steps
114
outlined in that section: we ﬁrst lift and extend the linear function, compute 𝐿′(𝑐0), and
apply key switching with the appropriate hint to the powerful basis coefﬁcients of 𝑐1. Finally,
we sum the results and produce the output ciphertext over 𝑆𝑞.
4.4 Evaluation
Recall that Λ∘𝜆 primarily aims to be a general, modular, and safe framework for lattice
cryptography, while also achieving acceptable performance. Λ∘𝜆 has proven to be extremely
ﬂexible and has been used (at least) for the following purposes:
• implementing advanced features of somewhat-homomorphic encryption (section 4.3);
• and creating a homomorphic compiler for homomorphic encryption (chapter 5);
• implementing the pseudorandom functions of [BPR12; BP14]; (chapter 6);
• generating RLWE/RLWR cryptanalytic challenges (chapter 7);
• exploring opportunities for parallelism of lattice cryptography using vector (SIMD)
instruction sets (the C++ tensor backend), multi-core CPUs (the Repa tensor backend),
and GPUs (currently in progress);
• master’s thesis on FHE [Muk16];
• and implementing identity-based encryption [Ret17].
While Λ∘ 𝜆’s modularity and static safety properties are demonstrated elsewhere in the
paper, here we evaluate two of its lower-level characteristics: code quality and runtime
performance.
For comparison, we also give a similar analysis for HElib [HS], which is Λ∘𝜆’s closest
analogue in terms of scope and features. (Recall that HElib is a leading implementation
of homomorphic encryption.) We emphasize two main caveats regarding such a compar-
ison: ﬁrst, while Λ∘ 𝜆 and HElib support many common operations and features, they
115
are not functionally equivalent—e.g., Λ∘𝜆 supports ring-switching, error sampling, and
certain gadget operations that HElib lacks, while HElib supports ring automorphisms and
sophisticated plaintext “shufﬂing” operations that Λ∘𝜆 lacks. Second, Λ∘𝜆’s host language
(Haskell) is somewhat higher-level than HElib’s (C++), so any comparisons of code quality
or performance will necessarily be “apples to oranges.” Nevertheless, we believe that such a
comparison is still meaningful and informative, as it quantiﬁes the relative trade-offs of the
two approaches in terms of software engineering values like simplicity, maintainability, and
performance.
Summary. Our analysis shows that Λ∘𝜆 offers high code quality, with respect to both the
size and complexity. In particular, Λ∘𝜆’s code base is about 7–8 times smaller than HElib’s.
Also, Λ∘ 𝜆 currently offers good performance, always within an order of magnitude of
HElib’s, and we expect that it can substantially improve with focused optimization. Notably,
Λ∘ 𝜆’s C++ backend is already faster than HElib in Chinese Remainder Transforms for
non-power-of-two cyclotomic indices with small prime divisors, due to the use of better
algorithms associated with the “tensored” representations. For example, a CRT for index
𝑚 = 2633 (of dimension 𝑛 = 576) takes about 99 𝜇s in Λ∘𝜆, and 153 𝜇s in HElib on our
benchmark machine (and the performance gap grows when more primes are included).
4.4.1 Source Code Analysis
We analyzed the source code of all “core” functions from Λ∘𝜆 and HElib, and calculated
a few metrics that are indicative of code quality and complexity: actual lines of code,
number of functions, and cyclotomatic complexity [McC76]. “Core” functions are any
that are called (directly or indirectly) by the libraries’ intended public interfaces. These
include, e.g., algebraic, number-theoretic, and cryptographic operations, but not unit tests,
benchmarks, etc. Note that HElib relies on NTL [Sho06] for the bulk of its algebraic
operations (e.g., cyclotomic and ﬁnite-ﬁeld arithmetic), so to give a fair comparison we
116
include only the relevant portions of NTL with HElib, referring to their combination as
HElib+NTL. Similarly, Λ∘𝜆 includes a Tensor backend written in C++ (along with a pure
Haskell one), which we identify separately in our analysis.
Source Lines of Code
A very basic metric of code complexity is program size as measured by source lines of code
(SLOC). We measured SLOC for Λ∘𝜆 and HElib+NTL using Ohcount [Bla14] for Haskell
code and metriculator [KW11] for C/C++ code. Metriculator measures logical source lines
of code, which approximates the number of “executable statements.” By contrast, Ohcount
counts physical lines of code. Both metrics exclude comments and empty lines, so they do
not penalize for documentation or extra whitespace. While the two metrics are not identical,
they provide a rough comparison between Haskell and C/C++ code.
Table 4.1 shows the SLOC counts for Λ∘𝜆 and HElib+NTL. Overall, Λ∘𝜆 consists of
only about 5,000 lines of code, or 4,200 if we omit the C++ portion (whose functionality is
redundant with the Haskell code). By contrast, HElib+NTL consists of about 7–8 times as
much code.
Table 4.1: Source lines of code for Λ∘𝜆 and HElib+NTL.
Codebase
SLOC
Total
Λ∘𝜆
HElib+NTL
Haskell
C++
4,257
HElib
734
NTL
4,991
14,709
20,073
34,782
Cyclomatic Complexity and Function Count
McCabe’s cyclomatic complexity (CC) [McC76] counts the number of “linearly independent”
execution paths through a piece of code (usually, a single function), using the control-
ﬂow graph. The theory behind this metric is that smaller cyclomatic complexity typically
117
corresponds to simpler code that is easier to understand and test thoroughly. McCabe
suggests limiting the CC of functions to ten or less.
Results. Table 4.2 gives a summary of cyclomatic complexities in Λ∘𝜆 and HElib+NTL.
A more detailed breakdown is provided in Figure 4.3. In both codebases, more than 80 % of
the functions have a cyclomatic complexity of 1, corresponding to straight-line code having
no control-ﬂow statements; these are omitted from Figure 4.3.
Table 4.2: Number of functions per argon grade: cyclomatic complexities of 1–5 earn an
‘A,’ 6–10 a ‘B,’ and 11 or more a ‘C.’
Codebase
A
B
C Total
Λ∘𝜆
1,234
14
5
1,253
HElib+NTL 6,850
159
69
7,078
Only three Haskell functions and two C++ functions in Λ∘𝜆 received a grade of ‘C.’ The
Haskell functions are: adding Cyc elements (CC=23); multiplying Cyc elements (CC=14);
and comparing binary representations of positive integers, for promotion to the type level
(CC=13). In each of these, the complexity is simply due to the many combinations of cases
for the representations of the inputs (see subsection 3.5.2). The two C++ functions are the
inner loops of the CRT and DFT transforms, with CC 16 and 18, respectively. This is due
to a case statement that chooses the appropriate unrolled code for a particular dimension,
which we do for performance reasons.
For comparison, HElib+NTL has many more functions than Λ∘𝜆 (see Table 4.2), and
those functions tend to be more complex, with 68 functions earning a grade of ‘C’ (i.e., CC
more than 10).
118
385
400
350
s
n
o
i
t
c
n
u
f
f
o
r
e
b
m
u
N
300
s
n
o
i
t
c
n
u
f
250
200
f
o
r
e
b
150
m
u
N
100
50
0
Λ∘𝜆: Haskell
Λ∘𝜆: C++
HElib
NTL
137
147
100
32
28
19
65
58
42
41
5
3
4
22
22
2
0
15
9
8
1
0
0
10
5
2
3
4
5
7
6
10
Cyclomatic Complexity
Cyclomatic Complexity
8
9
11
12
13 14+
Figure 4.3: Cyclomatic complexity (CC) of functions in Λ∘𝜆 and HElib+NTL. The case
CC=1 accounts for more than 80% of the functions in each codebase, and is suppressed.
4.4.2 Performance
Here we report on the runtime performance of Λ∘𝜆. As a general-purpose library, we do not
expect it to be competitive with highly optimized (but inﬂexible) C implementations like
SWIFFT [Lyu+08] and BLISS [Duc+13], but we aim for performance in the same league as
higher-level libraries like HElib.
Here we give microbenchmark data for various common operations and parameter
sets, to show that performance is reasonable and to establish a baseline for future work.
All benchmarks were run by the standard Haskell benchmarking tool criterion [OSu14]
on a mid-2012 model Asus N56V laptop with 2.3GHz Core i7-3610QM CPU and 6 GB
1600MHz DDR3 RAM, using GHC 8.0.1. All moduli in our benchmarks are smaller than 32
bits, so that all mod-𝑞 arithmetic can be performed naïvely in 64-bit registers.
We benchmarked the two Tensor backends currently included in Λ∘𝜆: the “CT” backend
is sequential and written in relatively unoptimized C++. The “RT” backend uses the Repa
119
array library [Kel+10; Lip+12]. For operations that Λ∘𝜆 and HElib have in common, we
also include HElib benchmarks.
Most of our optimization efforts have been devoted to the CT backend, which partially
explains the poor performance of the Repa backend; we believe that similarly tuning RT
could speed up benchmarks considerably. However, RT performance is currently limited
by the architecture of our tensor DSL, which is blocking many compiler optimizations.
Speciﬁcally, the higher-rank types that make the DSL work for arbitrary cyclotomic indices
also make specialization, inlining, and fusion opportunities much more difﬁcult for the
compiler to discover. Addressing this issue to obtain a fast and general pure-Haskell
implementation is an important problem for future work.
Cyclotomic Ring Operations