8-way
16-way
11-way
Set
64
64
1024
2048
TABLE XI: Cache conﬁguration for Skylake-SP, Cascade
Lake-SP and Cooper Lake-SP CPU families [62]. L1-I and
L1-D are for instruction and data separately.
advantage of the overlapping bits between cache set index
and page index (for virtual-to-physical address translation).
Pages can be assigned with different “colours” (i.e.,
the
overlapping bits), and the colour decides which cache sets
they are mapped to. Therefore, cache accesses are isolated
along with memory access. Initially being used to improve
system performance [84], [85], [86], page colouring has been
re-purposed to build defenses, by isolating the cache that the
untrusted code has direct access [55], [56].
Hardware Defenses. To provide better cache QoS, Intel has
implemented a technique named Cache Allocation Technology
(CAT) [6]. It allocates different cache ways to different COS
(class of service). Each core is also associated with one or
more COS. A core can access a cache way only when they
share at least one common COS. Still, directly enforcing cache
isolation with CAT is not straightforward, as the provided COS
is limited to 4 or 16. CATalyst [7] adjusted CAT to protect LLC
by separating it into a secure and a non-secure partition and
forcing the secure partition to be loaded with cache-pinned
secure pages. Comparing to CAT, Dynamically Allocated
Way Guard (DAWG) provides a more principled isolation
mechanism with modiﬁcation to the existing hardware [75].
On ARM, hardware mechanisms like Cache Lockdown can
enable similar protection by pinning whole sets of the L1-I
and L1-D caches [87].
Hardware-based cache isolation and its extension are sup-
posed to mitigate the attacks that bypass the software defenses.
For example, by partitioning the page table and TLB with
CATalyst, XLATE [3] and TLBLEED [34] can be mitigated. To
defend against directory-based attack [22], Yan et al. proposed
SecDir to partition and isolate directories [53].
In addition to CAT, Intel TSX has been used for de-
fense [88]. Intel TSX introduces hardware transactions, in
which case transactions would abort if they are interfered. By
putting sensitive data and code in a transaction and pinning
it to a cache set, cache eviction triggered by adversaries will
lead to abort.
Temporal Isolation. Both hardware and software defenses
aim at isolating resources spatially, which could not cover all
resources. For example, small cache like L1 [3] cannot be
isolated due to insufﬁcient page coloring granularity. Ge et al.
proposed to enforce temporal isolation with OS abstraction [5],
so the existing cache side-channels [22], [2] can be mitigated
when combining with spatial isolation techniques (hardware
and software). However, the defense is only applicable to the
seL4 microkernel.
C. check_conflict and find_ev
According to [4], [22], The check_conflict function
checks if an address x conﬂicts with a set of addresses U, by
checking if x is evicted when traversing x followed by U. If
x is evicted by U, it indicates U conﬂicts with x, otherwise,
it does not. [22] adapted this function to CPUs with non-
inclusive LLC, by pushing all lines in an L2 set to LLC before
measuring accessing time of x, which reduces false positives
and negatives.
According to [22], the find_ev function tries to ﬁnd a
minimal EV within a given set of addresses CS. It starts by
randomly picking out an address x from CS and assigning the
rest addresses in CS(cid:48). It then repeatedly deletes addresses from
CS(cid:48) except those addresses making CS(cid:48) no longer conﬂict
with x. Those addresses should be in the EV . EV could be
extended by picking out those addresses in CS but conﬂict
with EV .
D. Layout of Xeon Scalable 8175
Table XII and XIII show the reverse-engineered layout of
Xeon Scalable 8175.
UPI
0
IMC0
1
2
3
PCIE
4
5
6
7
8
PCIE
9
10
11
12
13
RLINK
14
15
16
17
18
UPI2
19
20
21
22
23
PCIE
24
IMC1
25
26
27
TABLE XII: The disabled tiles of Xeon Scalable 8175 CPU.
Gray cell indicates the tile is disabled, including its core, CHA,
SF and LLC. The number in each cell is the ID of tile.
UPI
0, 0
IMC0
1, 12
2, 6
PCIE
3, 18
4, 1
5, 13
6, 7
PCIE
7, 19
8, 2
9, 14
10, 8
11, 20
RLINK
12, 3
13, 15
14, 9
15, 21
16, 4
UPI2
17, 16
18, 10
19, 22
20, 5
21, 17
PCIE
IMC1
22, 11
23, 23
TABLE XIII: Layout of Xeon Scalable 8175 CPU. Gray cell
indicates the tile is disabled. The two numbers in each cell
indicates the ID of CHA and core respectively.
E. Sequences of different SNR
Figure 10 shows the delay sequences of different SNR.
F. Phoronix Test Suite
We use 40 apps in the test suite of [70] for app ﬁnger-
printing. The 40 apps are selected across many categories,
like image processing, AI, scientiﬁc computing, database, etc..
The 40 apps are: Tesseract OCR, Bork, Stockﬁsh, Ebizzy,
Sunﬂow, Mafft, Octave-benchmark, Compress-7zip, Parboil,
Npb, Hmmer, Ttsiod-renderer, Postmark, Gimp, Git, Vpxenc,
Hpcc, Inﬂuxdb, Tinymembench, Stress-ng, Numpy, Tensor-
ﬂow, Mbw, Ramspeed, Cloverleaf, Askap, Mocassion, Oidn,
Mlpack, Cassandra, Av1, Clomp, Arrayﬁre, Build2, Intel-mlc,
Hpl, Lzbench, Osbench, Cloudsuite-ma, Memtier-benchmark.
18
Fig. 10: Delay sequences of different SNR values.
G. Attacking Fast Modular Exponentiation
We evaluate MESHUP with the Fast Modular Exponen-
tiation algorithm implemented in Java following the code
found in [89]. This implementation has a timing side-channel.
Speciﬁcally, different key bit leads to different memory ac-
cess patterns and different calculation duration. MESHUP is
expected to probe the timing difference key bits and recover
the entire key sequence.
We assume the victim program runs in a core randomly
assigned by the OS. The attacker can then select a core among
the rest to construct key paths, according to the characteriza-
tion in Section IV. We do not randomize the attacker’s core
for a fair comparison with LoR [8], which ﬁxes the core for
attacker. We tested 100 different keys with this RSA program
as the victim, and for each key, we let the program run 20
times. Hence, there are in total 2,000 traces collected by the
MESHUP probe.
Analyzing the Interval Sequence. Figure 11a shows the
interval sequence mapped to the ﬁrst 8 bits of a d, which
is 01001010. As we can see,
the start of each key bit
calculation comes with a sharp rise in the collected interval
sequence, mainly because of cache misses. Besides, bit 1 takes
longer so the interval to the next rise is larger than that of bit
0.
To automatically recognize all the rises and then recover
key bits, we use a threshold (2900, 4200) to keep rises ﬁrst.
Figure 11b shows the data points after ﬁltering. Then, the data
points are smoothed, i.e., taking the average of the points in a
window, as shown in Figure 11c. With the smoothed sequence,
the attacker starts to ﬁnd the peaks over 600 cycles, which
are expected to be rises. Then, he/she examines the interval
between peaks to infer which key bit each rises corresponds
to.
SNR=82.3 k3.2 kSNR=102.3 k3.2 kInterval (Cycles)00.33 ms0.65 msSNR=122.5 k3.5 ktruth, and the row “Corrected” of Table XIV shows the result.
This time, 47 inferred keys have an edit distance less than
10, and we further compute the average edit distance, LCSStr,
and LCSSeq for them. It turns out the average LCSStr can
be as high as 2040, meaning that only 8 bits are incorrectly
predicted.
H. Website Fingerprinting
Since rendering different websites introduces different pat-
terns of network I/Os like webﬁle downloading [91], which
can travel across the UPI (e.g., I/O trafﬁc to NIC), sensitive
information about the victim could be leaked. We evaluate
such information leakage under MESHUP. In particular, we
ﬁx Chrome on the CPU that does not connect to the PCH, and
invoke Chrome in headless mode to visit websites without ren-
dering their pages. We select the Alexa top 100 websites [92]
as the candidate set. Each website was visited 100 times,
during which a pair of coherence-based probes collects the
delay traces. For each website, 80 traces are used for training
and the rest 20 are for testing.
Like application ﬁngerprinting (Section VII-C), we ﬁrst
remove the abnormal samples and locate the starting point
of website rendering (all the parameters like normal range
and window size are the same). Since the rendering duration
of websites can be different, we pad or clip the traces to
20,000 samples. After that, we also employ AttBLSTM [74]
to classify the traces. Table XV shows the hyper-parameters
of the model we used.
batch size
64
hidden layer size
256
drop out
0.3
attention layer size
256
TABLE XV: Hyper-parameters of the AttBLSTM model used
to website ﬁngerprinting.
Results. The attacker has 82.25% chances to correctly predict
which website a delay trace corresponds to. Besides, the top-3
accuracy can be raised to 92.61%. Regarding the errors, we
believe they are mainly caused by UPI trafﬁc rather than the
T6 produced by Chrome (T6 should be the main UPI trafﬁc,
as described in Section IV-B), which interferes with the data
collected by the probes. In addition, the network connection of
our server is not always stable, which varies the downloading
duration of web ﬁles and introduces noises.
Fig. 11: (a) The raw interval sequence collected by attacker’s
probe. (b) The sequence after ﬁltering. (c) The sequence after
smoothing, with circles and stars representing the starting time
of bit 0 and 1. The key stream is 01001010.
Avg. LCS
Seq
Avg.
15.4
7.8
Str
760.6
2040.0
Edit Distance
≤10 ≤50 ≤100 >100
14
17
47
25
67
9
2039.5
2040.4
Recovered
Corrected
2
2
the RSA key recovery experi-
TABLE XIV: Results of
ment (Fast Modular Exponentiation). “Str” means the longest
common sub-string. “Seq” means the longest common sub-
sequence. Average metrics for the recovered cases are com-
puted on the inferred keys whose edit distances are less than
50. For the error-corrected case, we choose 10.
Results. For each key used by the victim program, we compute
the edit distances between all the inferred keys with the ground
truth, and take the smallest value. Table XIV row “Recovered”
shows the distribution of the edit distances. Out of the 100
keys, 17 keys have edit distances less than 10, and 84 (17+67)
have at most 50. We look into the 84 keys, and compute
the average edit distance and two other metrics: the longest
common sub-string (LCSStr) and the longest common sub-
sequence (LCSSeq). The result suggests a large portion of the
key has been inferred. For instance, the average LCSStr is
760.6, meaning that a chunk of 760 consecutive bits can be
precisely recovered.
Moreover, we found the inference accuracy can be en-
hanced with error-correction techniques. We chose De Bruijn
graph [90], a technique widely used to correct gene sequence
errors, for this task. In essence, for a group of long sequences,
it breaks each one into sub-sequences and drops the less fre-
quent ones. Then it concatenates the remaining sub-sequences
back to a complete sequence. With the De Bruijn graph, for
a group of 20 inferred keys, we can correct the errors and
generate 1 key. We compare each generated key to the ground
19
03.6ms(a) Raw2.4k3k3.6kInterval (Cycles)03.6ms(b) Filtered3k3.4kInterval (Cycles)03.6ms(c) Smoothed1.5kInterval (Cycles)