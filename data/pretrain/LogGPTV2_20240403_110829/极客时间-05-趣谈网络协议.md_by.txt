### 留言问题1.TIME_WAIT 状态太多是怎么回事儿？]{.orange}![](Images/06f20f938263263929c82c62e1ccaa45.png){savepage-src="https://static001.geekbang.org/resource/image/85/b8/8535df3de9f426b44def750330dcf2b8.png"}![](Images/1bb1eada795e3aed57e62f8ad3c6e6dc.png){savepage-src="https://static001.geekbang.org/resource/image/1f/11/1f6a5e17b34f00d28722428b7b8ccb11.jpg"}如果处于 TIMEWAIT 状态，说明双方建立成功过连接，而且已经发送了最后的 ACK之后，才会处于这个状态，而且是主动发起关闭的一方处于这个状态。如果存在大量的TIMEWAIT，往往是因为短连接太多，不断的创建连接，然后释放连接，从而导致很多连接在这个状态，可能会导致无法发起新的连接。解决的方式往往是：-   打开 tcp_tw_recycle 和 tcp_timestamps 选项；-   打开 tcp_tw_reuse 和 tcp_timestamps 选项；-   程序中使用 SO_LINGER，应用强制使用 rst 关闭。当客户端收到 Connection Reset，往往是收到了 TCP 的 RST 消息，RST消息一般在下面的情况下发送：-   试图连接一个未被监听的服务端；-   对方处于 TIMEWAIT 状态，或者连接已经关闭处于 CLOSED    状态，或者重新监听 seq num 不匹配；-   发起连接时超时，重传超时，keepalive 超时；-   在程序中使用 SO_LINGER，关闭连接时，放弃缓存中的数据，给对方发送    RST。2. 起始序列号是怎么计算的，会冲突吗？]{.orange}有同学在留言中问了几个问题。Ender0224 的回答非常不错。![](Images/58c24c53d37ed45685c882578e689adb.png){savepage-src="https://static001.geekbang.org/resource/image/af/47/afed5f0593647c0b64971c2fef7e4247.png"}![](Images/2bbeeb67adc249775a95d15f22177b8b.png){savepage-src="https://static001.geekbang.org/resource/image/c3/e1/c39c723c9389c4414401366a32b69fe1.jpg"}起始 ISN 是基于时钟的，每 4 毫秒加一，转一圈要 4.55 个小时。TCP初始化序列号不能设置为一个固定值，因为这样容易被攻击者猜出后续序列号，从而遭到攻击。RFC1948 中提出了一个较好的初始化序列号 ISN 随机生成算法。ISN = M + F (localhost, localport, remotehost, remoteport)M 是一个计时器，这个计时器每隔 4 毫秒加 1。F 是一个 Hash 算法，根据源IP、目的 IP、源端口、目的端口生成一个随机数值。要保证 Hash算法不能被外部轻易推算得出，用 MD5 算法是一个比较好的选择。《第 12 讲 \| TCP 协议（下）：西行必定多妖孽，恒心智慧消磨难》](https://time.geekbang.org/column/article/9141)
### 课后思考题TCP 的 BBR 听起来很牛，你知道它是如何达到这个最优点的嘛？]{.orange}![](Images/5b8720a885d8629b04cac2677ae11996.png){savepage-src="https://static001.geekbang.org/resource/image/33/03/33b035bd326e9c1f811d667104a54003.png"}《第 13 讲 \| 套接字 Socket：Talk is cheap, show me the code》](https://time.geekbang.org/column/article/9293)
### 课后思考题epoll 是 Linux 上的函数，那你知道 Windows上对应的机制是什么吗？如果想实现一个跨平台的程序，你知道应该怎么办吗？]{.orange}![](Images/dacd86f34860349d061f62c9196ea3ae.png){savepage-src="https://static001.geekbang.org/resource/image/74/e9/74d6535a22f5dc8ab2f782b4484ca7e9.png"}epoll 是异步通知，当事件发生的时候，通知应用去调用 IO 函数获取数据。IOCP异步传输，当事件发生时，IOCP机制会将数据直接拷贝到缓冲区里，应用可以直接使用。如果跨平台，推荐使用 libevent 库，它是一个事件通知库，适用于Windows、Linux、BSD 等多种平台，内部使用 select、epoll、kqueue、IOCP等系统调用管理事件机制。------------------------------------------------------------------------感谢第 7 讲至第 13讲中对内容有深度思考和提出问题的同学。我会为你们送上奖励礼券和知识图谱。（稍后运营同学会发送短信通知。）欢迎你继续提问！![](Images/e4ce73e815e920e1b4c4d2a3f504750c.png){savepage-src="https://static001.geekbang.org/resource/image/ed/57/edc42141381c0458ab65f70628e88557.jpg"}![](Images/55417b60e9c8040807daf07e6bd9cb4b.png){savepage-src="https://static001.geekbang.org/resource/image/b5/fb/b5bc14cb81d3630919fee94a512cc3fb.jpg"}
# 协议专栏特别福利 \| 答疑解惑第二期你好，我是刘超。第二期答疑涵盖第 3 讲至第 6讲的内容。我依旧对课后思考题和留言中比较有代表性的问题作出回答。你可以点击文章名，回到对应的章节复习，也可以继续在留言区写下你的疑问，我会持续不断地解答。希望对你有帮助。《第 3 讲 \| ifconfig：最熟悉又陌生的命令行》](https://time.geekbang.org/column/article/7772)
### 课后思考题你知道 net-tools 和 iproute2 的"历史"故事吗？]{.orange}![](Images/a507301b0d0edab0ed6c3f3757ebf061.png){savepage-src="https://static001.geekbang.org/resource/image/02/ba/02ae5ca5ab1c87bf5fea29196725c0ba.png"}这个问题的答案，盖同学已经写的比较全面了。具体的对比，我这里推荐一篇文章，感兴趣的话可以看看。
### 留言问题1.A、B、C 类地址的有效地址范围是多少？]{.orange}![](Images/df6d90c7981453ca3c841cfbaf61492a.png){savepage-src="https://static001.geekbang.org/resource/image/eb/c5/ebf13d11cb0bc03d520c6cc4796ee8c5.png"}我在写的时候，没有考虑这么严谨，平时使用地址的时候，也是看个大概的范围。所以这里再回答一下。A 类 IP 的地址第一个字段范围是 0～127，但是由于全 0 和全 1的地址用作特殊用途，实际可指派的范围是1～126。所以我仔细查了一下，如果较真的话，你在答考试题的时候可以说，A类地址范围和 A 类有效地址范围。2. 网络号、IP 地址、子网掩码和广播地址的先后关系是什么？]{.orange}![](Images/355e561490a9d4b43b5193ab8b56156c.png){savepage-src="https://static001.geekbang.org/resource/image/25/56/254f28a3623ca8b4ee368ac02f0cf656.png"}当在一个数据中心或者一个办公室规划一个网络的时候，首先是网络管理员规划网段，一般是根据将来要容纳的机器数量来规划，一旦定了，以后就不好变了。``{=html}假如你在一个小公司里，总共就没几台机器，对于私有地址，一般选择192.168.0.0/24 就可以了。这个时候先有的是网络号。192.168.0就是网络号。有了网络号，子网掩码同时也就有了，就是前面都是网络号的是1，其他的是 0，广播地址也有了，除了网络号之外都是 1。当规划完网络的时候，一般这个网络里面的第一个、第二个地址被默认网关 DHCP服务器占用，你自己创建的机器，只要和其他的不冲突就可以了，当然你也可以让DHCP 服务自动配置。规划网络原来都是网络管理员的事情。有了公有云之后，一般有个概念虚拟网络（VPC），鼠标一点就能创建一个网络，网络完全软件化了，任何人都可以做网络规划。3. 组播和广播的意义和原理是什么？]{.orange}![](Images/b8d9a9b361259afb112a0021fa78a5f4.png){savepage-src="https://static001.geekbang.org/resource/image/92/f1/92654ed9549bba6c4e609e256ba083f1.png"}C 类地址的主机号 8 位，去掉 0 和 255，就只有 254 个了。在《TCP/IP 详解》这本书里面，有两章讲了广播、多播以及IGMP。广播和组播分为两个层面，其中 MAC 层有广播和组播对应的地址，IP层也有自己的广播地址和组播地址。广播相对比较简单，MAC 层的广播为 ff:ff:ff:ff:ff:ff，IP层指向子网的广播地址为主机号为全 1 且有特定子网号的地址。组播复杂一些，MAC 层中，当地址中最高字节的最低位设置为 1时，表示该地址是一个组播地址，用十六进制可表示为 01:00:00:00:00:00。IP层中，组播地址为 D 类 IP 地址，当 IP地址为组播地址的时候，有一个算法可以计算出对应的 MAC 层地址。多播进程将目的 IP地址指明为多播地址，设备驱动程序将它转换为相应的以太网地址，然后把数据发送出去。这些接收进程必须通知它们的IP层，它们想接收的发给定多播地址的数据报，并且设备驱动程序必须能够接收这些多播帧。这个过程就是"加入一个多播组"。当多播跨越路由器的时候，需要通过 IGMP协议告诉多播路由器，多播数据包应该如何转发。4.MTU 1500 的具体含义是什么？]{.orange}![](Images/c4dd0bdaec3b77228c0a7cc318fd90bb.png){savepage-src="https://static001.geekbang.org/resource/image/0b/3d/0b43a6d8c1b77daef705e6b08f40a43d.png"}MTU（Maximum TransmissionUnit，最大传输单元）是二层的一个定义。以以太网为例，MTU 为 1500 个Byte，前面有 6 个 Byte 的目标 MAC 地址，6 个 Byte 的源 MAC 地址，2 个Byte 的类型，后面有 4 个 Byte 的 CRC 校验，共 1518 个 Byte。在 IP 层，一个 IP 数据报在以太网中传输，如果它的长度大于该 MTU值，就要进行分片传输。如果不允许分片 DF，就会发送 ICMP包，这个在[ICMP](https://time.geekbang.org/column/article/8445)那一节讲过。在 TCP 层有个 MSS（Maximum Segment Size，最大分段大小），它等于 MTU 减去IP 头，再减去 TCP 头。即在不分片的情况下，TCP 里面放的最大内容。在 HTTP 层看来，它的 body 没有限制，而且在应用层看来，下层的 TCP是一个流，可以一直发送，但其实是会被分成一个个段的。《第 4 讲 \| DHCP 与 PXE：IP 是怎么来的，又是怎么没的》](https://time.geekbang.org/column/article/8015)