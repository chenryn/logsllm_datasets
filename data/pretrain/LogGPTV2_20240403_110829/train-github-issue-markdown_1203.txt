Hi, It looks like the way that `csr_matrix` objects are created by
`FeatureHasher` can result in outputs that explicitly represent a lot of 0s.
`FeatureHasher` uses the tuple-based initialization for `csr_matrix`, which
will just take 0s and store them rather than trying to filter them out for
efficient storage.
I think the simplest way to address this is to call `eliminate_zeros()` on the
matrix before returning it. However, I'm not sure this would be efficient
enough for very large datasets. It might be better to construct one row at a
time, call `eliminate_zeros()`, and then stack them or something like that.
    m = sp.csr_matrix(([0,1,0,0],[0,1,0,1],[0,2,4]), dtype=int)
    print m.nnz
    m.eliminate_zeros()
    print m.nnz