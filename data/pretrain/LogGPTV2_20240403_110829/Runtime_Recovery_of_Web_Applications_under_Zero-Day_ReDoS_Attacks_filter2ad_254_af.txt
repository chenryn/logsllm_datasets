### Load Balancing and State Management
The current load balancer may distribute requests from the same session to different server instances. Cross-request states, such as authentication credentials and a shopping cart on an e-commerce website, are maintained using client-side cookies and server-side databases, which are shared across different server instances.

### Continuous Adaptive Attacks
Adaptive attacks, as illustrated in §VI-A and Fig. 8, take a relatively long time even under ideal, whitebox conditions compared to the fast recovery supported by REGEXNET. If an adversary continuously launches an adaptive attack, REGEXNET can still quickly recover the web service and maintain it at the target throughput (i.e., >90%) most of the time. As prior adversarial training work has shown, more adversarial examples make attacks harder, requiring more time and increasing the likelihood of failure. As demonstrated in §VI-A, the adversary fails to generate malicious requests in 40% of cases during a continuous attack. In summary, we believe that REGEXNET is resilient to continuous adaptive attacks.

### Related Work

#### Regular Expressions
Regular expressions, a popular search pattern, are widely used in various scenarios, including data manipulation and validation [1], [2], [32] and text processing [33], [34]. Some prior works have focused on accelerating regular expression matching algorithms. For example, Thompson et al. [16] proposed a new regular expression search algorithm for better performance, while Sidhu and Prasanna [35] leveraged hardware, specifically FPGAs, to speed up regular expression matching. In contrast, REGEXNET aims to recover an affected website after an attack rather than finding and fixing vulnerabilities beforehand. This task is crucial for bringing an affected website back online, and none of the prior works on accelerating regular expressions address this.

#### DDoS Attacks
Distributed Denial-of-Service (DDoS) attacks disrupt the normal operation of a target by overwhelming it with network traffic from multiple sources. Extensive efforts have been made to detect and defend against DDoS attacks [36], [37], [38], [39]. Several algorithms have been proposed for detection, such as Barford et al.'s [36] signal analysis-based method and Moore et al.'s [38] backscatter analysis. Jin et al. [40] suggested hop-count filtering for efficient DDoS detection, and Lakhina et al. [41] used traffic feature distributions to identify anomalies. Additionally, SDN/NFV-based methods, orthogonal to algorithmic approaches, have been developed. For instance, FRESCO [42] provides modular composable security services in Software-Defined Networks (SDN), and AvantGuard [43] enhances SDN security services with connection migration and actuating triggers. Bohatei [44] introduces tag-based forwarding rules for greater flexibility and elasticity. Unlike these, REGEXNET focuses on protecting web services against low-bandwidth ReDoS attacks, a capability not covered by the aforementioned works.

#### ReDoS Attack and Defense
ReDoS is a new class of low-bandwidth DoS attacks that exploit algorithmic deficiencies [6]. It is also a common type of attack from a software engineering perspective. Lauinger et al. [45] showed that client-side JavaScript libraries can introduce vulnerabilities to ReDoS attacks, and Davis et al. [4] explored super-linear regular expression engines that enable ReDoS attacks in Python and JavaScript.

Defending against ReDoS attacks is a significant problem in both academia and industry. Substack's safe-regex [7] detects ReDoS attacks by limiting the star height to 1. Rathnayake et al.'s rxxr2 [8] uses static analysis to reduce the ReDoS problem to reachability. Weideman et al. [46] applied results from non-deterministic finite automata ambiguity to determine the worst-case matching time. Wüstholtz et al. [3] developed Rexploiter, which identifies vulnerable regular expressions and determines if a malicious input can be matched. Merwe et al. [47] investigated techniques to transform vulnerable regular expressions into harmless ones. Tools like Slowfuzz [9] and Singularity [10] automate the detection of algorithmic complexity vulnerabilities, and Node.cure [17] modifies the Node.js framework to enforce timeouts and defend against ReDoS attacks.

Compared to existing work, REGEXNET is the first application-agnostic ReDoS recovery system that uses a Deep Neural Network (DNN) model to classify normal and malicious requests for web services. While prior works focus on preventing ReDoS attacks, zero-day attacks can still penetrate and affect vulnerable web services. REGEXNET can recover these web services under attack.

#### Attacks Against Learning-Based Systems
It is well-known in adversarial machine learning [48], [49] that existing learning-based systems can be evaded [50], [51], [52], [53], [19]. REGEXNET is no exception; however, its online feedback loop corrects mistakes, such as evasive samples, limiting the impact of adaptive attacks to that of a zero-day ReDoS attack. Our evaluation shows that REGEXNET can recover affected web services from adaptive attacks within one minute.

### Conclusion
In conclusion, we present REGEXNET, a payload-based recovery system designed to restore web services from zero-day ReDoS attacks. REGEXNET leverages the observation that requests triggering the super-linear running time of a vulnerable regular expression often contain specific string patterns, which can be learned using a DNN model. An online feedback loop continuously trains and updates the DNN model based on runtime data collected from web servers. We have implemented a prototype of REGEXNET, integrated it with HAProxy and Node.js, and demonstrated its effectiveness, responsiveness, and resilience through experiments on a testbed with real-world ReDoS attacks.

### Acknowledgments
We thank our shepherd Giancarlo Pellegrino and the anonymous reviewers for their valuable feedback. Xin Jin (PI:EMAIL) is the corresponding author. This work is supported in part by NSF grants 1813487, 1854000, 1854001, and 1918757.

### References
[References listed here]

---

This version of the text is more structured, clear, and professional. It ensures that each section is coherent and logically flows into the next, making it easier to read and understand.