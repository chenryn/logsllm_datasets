the current load balancer may distribute requests of the same
session to different server instances. Cross-request states,
e.g., authentication credentials and a shopping cart of an e-
commerce website, are maintained via client-side cookies and
server-side databases, which are both shared across different
server instances.
Continuous adaptive attack. Adaptive attacks, as shown in
§VI-A and Fig. 8, take a relatively long time even under an
ideal, whitebox setting as compared to fast recovery supported
by REGEXNET. That is, if an adversary continuously launches
an adaptive attack, REGEXNET can still quickly recover the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1586
0246810Iterations0%20%40%60%80%100%Accuracy (%)18321280246810Iterations0%20%40%60%80%100%Accuracy (%)18321280246810Iterations0%20%40%60%80%100%Accuracy (%)No Pollution1K5K10K20Kweb service and make it at the target throughput most (i.e.,
>90%) of the time. More importantly, as prior adversarial
training work shows, more adversarial examples will just make
attacks harder, i.e., the longer time and with a higher chance
of failure. As we have shown in §VI-A, the adversary fails
to generate malicious requests for 40% of the cases during a
continuous attack. To summarize, we believe that REGEXNET
is resilient to continuous adaptive attacks.
VIII. RELATED WORK
Regular expression. Regular expression, a popular search pat-
tern, is widely used in many scenarios, such as data manipula-
tion and validation [1], [2], [32] and processing texts [33], [34].
There are some prior works that try to accelerate the matching
algorithms of regular expressions. For example, Thompson et
al. [16] propose a new regular expression search algorithm for
better performance. Sidhu and Prasanna [35] rely on hardware,
i.e., FPGAs, to accelerate regular expression matching. As
a comparison, the purpose of REGEXNET is different, i.e.,
recovering an affected website after being attacked instead of
ﬁnding and ﬁxing the vulnerability beforehand. Such a task
is important to bring an affected website back online in an
incident while none of the prior works accelerating regular
expression can.
DDoS attacks. Distributed denial-of-service (DDoS) attacks
disrupt the normal operation of a target, e.g., with a ﬂood of
network trafﬁc from many different sources. There have been
extensive efforts contributed to DDoS attack detection and
defense [36], [37], [38], [39]. First, several algorithms have
been proposed to detect DDoS attacks. For example, Barford
et al. [36] present an algorithm based on signal analysis. Moore
et al. [38] use backscatter analysis to quantitively understand
the nature of DDoS attacks. Jin et al. [40] propose to deploy
hop-count ﬁltering to detect DDoS attacks efﬁciently. Lakhina
et al. [41] use trafﬁc feature distributions to mine network
anomalies. Second, researchers have proposed SDN/NFV-
based methods, being orthogonal to algorithm-based methods,
for defense. For example, FRESCO [42] provides modular
composable security services in Software-Deﬁned Networks
(SDN). AvantGuard [43] can be used for developing more
scalable and resilient SDN security services by introducing
two data plane extensions, which are connection migration
and actuating triggers. Lastly, Bohatei [44] introduces more
ﬂexibility and elasticity by setting up tag-based forwarding
rules proactively. In contrast, REGEXNET focuses on protect-
ing web services against low-bandwidth ReDoS attacks—none
of the aforementioned works is able to do so.
ReDoS attack and defense. ReDoS is proposed as a new
class of low-bandwidth DoS attacks that exploit algorithmic
deﬁciencies [6]. ReDoS is also a common type of attack from
a software engineering perspective. Lauinger et al. [45] show
that the use of client-side JavaScript libraries may induce
vulnerabilities to ReDoS attacks. Davis et al. [4] also explore
super-linear regular expression engines that make ReDoS
attacks possible in Python core besides JavaScript.
ReDoS defense is an important problem in academia and in-
dustry. Substack develops safe-regex [7], which detects ReDoS
attacks by limiting the star height to 1. rxxr2 [8], developed by
Rathnayake et al., presents a static analysis that forms powers
and products of transition relations, and thereby reduces the
ReDoS problem to reachability. Weideman et al. [46] apply
results from ambiguity of non-deterministic ﬁnite automata to
the problem of determining the asymptotic worst-case match-
ing time. W¨ustholz et al. [3] present Rexploiter that is able
to automatically identify vulnerable regular expressions and
determines whether a malicious input string can be matched
against a vulnerable regular expression. Besides ReDoS attack
detection, Merwe et al. [47] investigate techniques which can
be used to transform vulnerable regular expressions into harm-
less equivalent expressions. Slowfuzz [9] and Singularity [10]
proposed automated tools to explore algorithmic complexity
vulnerability in a blackbox. Node.cure [17] modiﬁes Node.js
framework to enforce timeouts on different API usages and
defend against ReDoS attacks.
As a comparison with existing work, REGEXNET is the ﬁrst
application-agnostic ReDoS recovery system by leveraging a
DNN model to classify normal and malicious requests for
web services. Prior works focus on defending against ReDoS
attacks beforehand, but zero-day attacks may still penetrate
and affect a vulnerable web service—REGEXNET can recover
these web services that are under attack.
Attacks against learning-based systems. It is well known in
adversarial machine learning [48], [49] that existing learning-
based systems can be evaded [50], [51], [52], [53], [19].
REGEXNET is the same; however, the online feedback loop
introduced in REGEXNET can correct these mistakes, e.g.,
evasive samples, so that the inﬂuence of such adaptive attacks
introduced by evasive inputs will be limited to the same
as a zero-day ReDoS attack—as shown in our evaluation,
REGEXNET can also recover the affected web services from
adaptive attacks under one minute.
IX. CONCLUSION
In conclusion, we present REGEXNET, a payload-based,
recovery system to recover web services from zero-day ReDoS
attacks. REGEXNET leverages the observation that requests
triggering the super-linear running time of a vulnerable regular
expression usually contain a particular string pattern, which
can be learned using a DNN model. We design an online
feedback loop for REGEXNET so that the DNN model is
continuously trained and updated online based on data col-
lected from web servers at runtime. We have implemented
a prototype of REGEXNET, integrated it with HAProxy and
Node.js, and demonstrated its effectiveness, responsiveness
and resiliency with experiments on a testbed with real-world
ReDoS attacks.
Acknowledgments. We thank our shepherd Giancarlo Pelle-
grino and the anonymous reviewers for their valuable feed-
back. Xin Jin (PI:EMAIL) is the corresponding
author. This work is supported in part by NSF grants 1813487,
1854000, 1854001 and 1918757.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1587
REFERENCES
https://en.wikipedia.org/w/index.php?title=
[1] “Regular Expression.”
Regular expression.
[2] H. Hosoya, J. Vouillon, and B. C. Pierce, “Regular expression types for
XML,” in ACM SIGPLAN Notices, 2000.
[3] V. W¨ustholz, O. Olivo, M. J. Heule, and I. Dillig, “Static detection
of DoS vulnerabilities in programs that use regular expressions,” in
International Conference on Tools and Algorithms for the Construction
and Analysis of Systems, 2017.
[4] J. C. Davis, C. A. Coghlan, F. Servant, and D. Lee, “The impact of
regular expression denial of service (ReDoS) in practice: an empirical
study at the ecosystem scale,” in Proceedings of the 2018 26th ACM
Joint Meeting on European Software Engineering Conference and Sym-
posium on the Foundations of Software Engineering, 2018.
[5] C.-A. Staicu and M. Pradel, “Freezing the web: A study of ReDoS
vulnerabilities in JavaScript-based web servers,” in USENIX Security
Symposium, 2018.
[6] S. A. Crosby and D. S. Wallach, “Denial of service via algorithmic
complexity attacks,” in USENIX Security Symposium, 2003.
[7] “safe-regex.” https://github.com/substack/safe-regex.
[8] A. Rathnayake and H. Thielecke, “Static analysis for regular expression
exponential runtime via substructural logics (extended),” arXiv preprint
arXiv:1405.7058, 2014.
[9] T. Petsios, J. Zhao, A. D. Keromytis, and S. Jana, “SlowFuzz: Automated
domain-independent detection of algorithmic complexity vulnerabili-
ties,” in ACM Conference on Computer and Communications Security,
2017.
[10] J. Wei, J. Chen, Y. Feng, K. Ferles, and I. Dillig, “Singularity: Pattern
fuzzing for worst case complexity,” in Proceedings of the 2018 26th
ACM Joint Meeting on European Software Engineering Conference and
Symposium on the Foundations of Software Engineering, 2018.
[11] W. Meng, C. Qian, S. Hao, K. Borgolte, G. Vigna, C. Kruegel, and
W. Lee, “Rampart: Protecting web applications from CPU-exhaustion
denial-of-service attacks,” in USENIX Security Symposium, 2018.
[12] J. C. Davis, F. Servant, and D. Lee, “Using selective memoization
to defeat regular expression denial of service (ReDoS),” in IEEE
Symposium on Security and Privacy, 2021.
[13] Y. Shen, Y. Jiang, C. Xu, P. Yu, X. Ma, and J. Lu, “ReScue: crafting
regular expression DoS attacks,” in Proceedings of the 33rd ACM/IEEE
International Conference on Automated Software Engineering, 2018.
[14] C. Cˆampeanu, K. Salomaa, and S. Yu, “A formal study of practical
regular expressions,” International Journal of Foundations of Computer
Science, 2003.
[15] N. Chomsky, “Three models for the description of language,” IRE
Transactions on information theory, 1956.
[16] K. Thompson, “Programming techniques: Regular expression search
algorithm,” Communications of the ACM, 1968.
[17] J. C. Davis, E. R. Williamson, and D. Lee, “A sense of time for
JavaScript and Node.js: ﬁrst-class timeouts as a cure for event handler
poisoning,” in USENIX Security Symposium, 2018.
[18] “Outage postmortem - July 20, 2016.”
https://stackstatus.net/post/
147710624694/outage-postmortem-july-20-2016.
[19] N. Carlini and D. Wagner, “Towards evaluating the robustness of neural
networks,” in IEEE Symposium on Security and Privacy, 2017.
[20] I. J. Goodfellow, J. Shlens, and C. Szegedy, “Explaining and harnessing
adversarial examples,” in ICLR, 2015.
[21] A. Madry, A. Makelov, L. Schmidt, D. Tsipras, and A. Vladu, “Towards
deep learning models resistant to adversarial attacks,” in International
Conference on Learning Representations, 2018.
[22] “HAproxy.” http://www.haproxy.org/.
[23] “Node.js.” https://nodejs.org/en/.
[24] U. Naseer, L. Niccolini, U. Pant, A. Frindell, R. Dasineni, and T. A.
Benson, “Zero downtime release: Disruption-free load balancing of a
multi-billion user website,” in ACM SIGCOMM, 2020.
[25] “Apache Hadoop Distributed File System (HDFS).”
http://hadoop.
apache.org/.
[26] “PyTorch.” https://pytorch.org/.
[27] “A fully functioning Node.js shopping cart with Stripe, PayPal and
Authorize.net payments..” https://github.com/mrvautin/expressCart.
[28] “Redis data structure store.” https://redis.io/.
[29] “Common Vulnerabilities and Exposures.” https://cve.mitre.org/.
[30] “Apache HTTP server benchmarking tool.”
https://httpd.apache.org/
docs/2.4/programs/ab.html.
[31] N. Papernot, P. McDaniel, A. Swami, and R. Harang, “Crafting ad-
versarial input sequences for recurrent neural networks,” in MILCOM,
2016.
[32] F. Yu, Z. Chen, Y. Diao, T. Lakshman, and R. H. Katz, “Fast and
memory-efﬁcient regular expression matching for deep packet inspec-
tion,” in ACM/IEEE Symposium on Architectures for Networking and
Communications Systems, 2006.
[33] M. Firtman, Programming the Mobile Web: Reaching Users on iPhone,
Android, BlackBerry, Windows Phone, and more. O’Reilly Media, Inc.,
2013.
[34] R. J. Ray and P. Kulchenko, Programming Web Services with Perl.
[35] R. Sidhu and V. K. Prasanna, “Fast regular expression matching using
O’Reilly Media, Inc., 2002.
FPGAs,” in FCCM, 2001.
[36] P. Barford, J. Kline, D. Plonka, and A. Ron, “A signal analysis of
network trafﬁc anomalies,” in Proceedings of the 2nd ACM SIGCOMM
Workshop on Internet measurment, 2002.
[37] J. Mirkovic and P. Reiher, “A taxonomy of DDoS attack and DDoS
defense mechanisms,” ACM SIGCOMM Computer Communication Re-
view, 2004.
[38] D. Moore, C. Shannon, D. J. Brown, G. M. Voelker, and S. Savage,
“Inferring internet denial-of-service activity,” ACM Transactions on
Computer Systems, 2006.
[39] J. Czyz, M. Kallitsis, M. Gharaibeh, C. Papadopoulos, M. Bailey,
and M. Karir, “Taming the 800 pound gorilla: The rise and decline
of NTP DDoS attacks,” in ACM SIGCOMM Conference on Internet
Measurement Conference, 2014.
[40] C. Jin, H. Wang, and K. G. Shin, “Hop-count ﬁltering: an effective
defense against spoofed DDoS trafﬁc,” in ACM Conference on Computer
and Communications Security, 2003.
[41] A. Lakhina, M. Crovella, and C. Diot, “Mining anomalies using trafﬁc
feature distributions,” in SIGCOMM CCR, 2005.
[42] S. W. Shin, P. Porras, V. Yegneswara, M. Fong, G. Gu, and M. Tyson,
“FRESCO: Modular composable security services for software-deﬁned
networks,” in NDSS, 2013.
[43] S. Shin, V. Yegneswaran, P. Porras, and G. Gu, “AVANT-GUARD:
Scalable and vigilant switch ﬂow management in software-deﬁned net-
works,” in ACM Conference on Computer and Communications Security,
2013.
[44] S. K. Fayaz, Y. Tobioka, V. Sekar, and M. Bailey, “Bohatei: Flexible
and elastic DDoS defense,” in USENIX Security Symposium, 2015.
[45] T. Lauinger, A. Chaabane, S. Arshad, W. Robertson, C. Wilson, and
E. Kirda, “Thou shalt not depend on me: Analysing the use of outdated
JavaScript libraries on the web,” arXiv preprint arXiv:1811.00918, 2018.
[46] N. Weideman, B. van der Merwe, M. Berglund, and B. Watson,
“Analyzing matching time behavior of backtracking regular expression
matchers by using ambiguity of NFA,” in International Conference on
Implementation and Application of Automata, 2016.
[47] B. Van Der Merwe, N. Weideman, and M. Berglund, “Turning evil
regexes harmless,” in Proceedings of the South African Institute of
Computer Scientists and Information Technologists, 2017.
[48] L. Huang, A. D. Joseph, B. Nelson, B. I. Rubinstein, and J. D.
Tygar, “Adversarial machine learning,” in Proceedings of the 4th ACM
Workshop on Security and Artiﬁcial Intelligence, 2011.
[49] M. Barreno, B. Nelson, A. D. Joseph, and J. D. Tygar, “The security of
machine learning,” Machine Learning, 2010.
[50] N. ˇSrndic and P. Laskov, “Practical evasion of a learning-based classiﬁer:
A case study,” in IEEE Symposium on Security and Privacy, 2014.
[51] Y. Cao, X. Pan, Y. Chen, and J. Zhuge, “JShield: Towards real-time and
vulnerability-based detection of polluted drive-by download attacks,”
in Proceedings of
the 30th Annual Computer Security Applications
Conference, 2014.
[52] M. Kearns and M. Li, “Learning in the presence of malicious errors,”
in Proceedings of the Twentieth Annual ACM Symposium on Theory of
Computing, 1988.
[53] G. Wang, T. Wang, H. Zheng, and B. Y. Zhao, “Man vs. machine:
Practical adversarial detection of malicious crowdsourcing workers,” in
USENIX Security Symposium, 2014.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:14 UTC from IEEE Xplore.  Restrictions apply. 
1588