在 Windows 上可安装 Puppet 2.6 以上版本。Puppet 3.0 对 Windows 的支持更为友好，增
host
 exec
 service
 package
fle
 Puppet inspect 检查相关报告。
 Puppet resource 资源操作，配置操作系统相关。
（1）Puppet 在Windows 上可安装的版本
如何升级
2.7版本以上。
Puppet在 Windows 下的功能
华章图书
HZBOOKS
第2章Puppet 安装与配置·35
---
## Page 47
36·第一部分准备篇
建相关的实例带领读者逐步学习如何构建Puppet 的配置。
建简单的File 资源学习了 Puppet 基本使用方法，详细讲解了签名验证。下一章我们将通过创
2.9
即可。
升级 Master，让原有 Agent 运行一段时间，在确保没有问题后，直接采用 Yum 升级 Puppet
本章详细介绍了 Puppet 在各种操作系统上的安装和配置方法，使读者加深对 Puppet 的
其实升级非常简单，通常不会发生太大的问题。如果觉得以上步骤过于繁琐，可以直接
6）对 Master 进行系统升级。取消之前的测试进程。
5）反复确认是否有故障、查看日志等，看是否按预期完成。
本章小结
华章图书
HZBOOKS
---
## Page 48
File 资源的目的是在 /tmp 目录中创建一个以 Agent 主机名命名的 txt 文件，其内容为“ Hello
采用如下目录结构配置。
World!”。执行命令如下：
3.1
定 Yum 源安装、Httpd 模块的配置等。
关系，记下来，下一部分我们将继续学习。
在客户端检测运行、确认运行结果。在配置过程中可能会有迷惑或暂时不理解的概念，没有
基本的用法。主要操作步骤为：创建一个测试节点、创建测试httpd 模板、创建测试模块、
本章我们将学习创建一个测试实例的方法进而使读者加深对 Puppet 的理解，掌握 Puppet 最
本章的知识点为：节点创建、类的创建、模块的创建、Ruby模板的配置方法、如何指
口节点信息：/etc/puppet/manifests/nodes
一个节点的目录结构可以任意定义，只要在 site.pp 配置文件中 import 即可。笔者建议
通过上一章，我们已经搭建好了Puppet 环境，并且学会了如何配置简单的File 资源。
class test 
$ sudo vim /etc/puppet/modules/test/manifests/init.pp 
#创建必要的目录。Manifests 存放着模块的主配置文件 init.pp
1）创建 test 模块。模块目录为 test，class 类名也必须是 test。test类里有一个File 资源，
要按照以上目录结构进行配置，我们需要先创建一个模块信息。
口模块信息：/etc/puppet/modules
配置一个测试节点
file{
"/tmp/$hostname.txt": content => "Hello World!"; }
创建你的第一个 Puppet 配置
HZBOOKS
会读取 templates 目录下面的 ERB 模块文件
第3章
---
## Page 49
38第一部分准备篇
无语法错误。有关语法规则及常见语法错误的处理我们将在第5章中详细讲解。
令检查配置语法，第二步是在 Puppet Agent 客户端采用--noop 参数检测语法及代码。
3.2检测你的配置文件
设置 import，代码如下：
我们讲到了 Puppet 会首先读取 site.pp。因此，在创建客户端节点时需要在 site.pp 配置文件中
进行检查，以避免在客户端运行时因遇到报错而重复修改。
agent.domain.com，配置代码如下：
法如下：
值通过 facter 命令获取，以变量“Shostname”的形式传递给 agent.domain.com.pp。配置方
件。此文件存放在 test 类目录下的 templates 目录中，文件名与类名保持一致。主机名变量
检测语法也分两步进行：第一步是在 Puppet Master 服务端采用 puppet parser validate 命
在 Puppet Master 服务端执行 puppet parser validate init.pp，如果看到 Finished 表示成功,
（1）Puppet Master 服务端检查
在完成所有节点的配置后，笔者不建议直接运行这些配置。我们需要对配置文件的语法
 到此一个测试节点就配置完毕了，接下来我们需要检查配置文件的语法。
import 指令告诉 Puppet 载人 nodes 目录中所有以 pp 结尾的文件。当 Puppet 启动时就会
$ puppet parser validate /etc/puppet/modules/test/manifests/init.pp
 4）最后我们需要将测试节点载入到 Puppet，也就是修改 site.pp 配置文件。在第1章中
 $ sudo vim /etc/puppet/manifests/nodes/agent.domain.com.pp
3）通过以上两步我们创建了测试节点所需要的模块信息。现在我们来创建测试节点
Finished catalog run in 0.03 seconds 
$ sudo vim /etc/puppet/modules/test/templates/test.erb
2）在模块配置文件中定义了一个变量“Shostname”，需要将该变量传给ERB 模块文
Info: Creating state file /var/lib/puppet/state/state.yaml
Info: Applying configuration version '1351521612'
#追加如下一行
 sudo vim /etc/puppet/manifests/site.pp 
include test
#加载test类
---
## Page 50
过程所消耗的时间。同样在 Master 日志也可以看到运行过程被记录下来。
资源被应用了，/tmp/agent.txt 文件被创建，并根据文件内容计算出 MD5 值。最后告知整个
的时间是0.04秒。
532e86365e841e92bfc50d8c'
户端运行了。取消 noop 参数，执行结果如下：
3.3
中 server 参数所指定的 Master。
注意
file
但并不实际生效。执行命令及结果如下：
让我们来看看运行过程中都发生了什么。首先 Agent 缓存了主机信息，接下来可以看到
通过以上代码我们可以看到 Puppet 的配置运行成功，并且提示完成 Catalog 的运行花费
通过3.2节的检测我们看到语法与代码检测都没有问题。现在准备好了一切，可以在客
Finished catalog run in 0.04 seconds
 客户端的检查主要是通过增加 --noop 参数来实现的，其目的只是验证配置、模拟执行,
L879Lopa(spu). se zuazuos pauep :axnsua/[axz'auabe/dus/]atte/asat/[utew]abeas/
Info: Retrieving plugin 
ls: cannot access /tmp/agent.txt: No such file or directory
#--noop 的意思是验证配置，但并不执行
Class[Test]: Would have triggered 'refresh' from l events
#如上可以看出要创建agent.txt 文件，由于采用的是 noop 模式，代码没有被执行
Info: Retrieving plugin 
$ puppet agent --test --server puppet.domain.com --noop
（2）Puppet Agent 客户端检查
（noop）
Info: Caching catalog for agent.domain.com 
如以上代码所示，配置文件无任何语法错误，可以进行下一步操作。
ls/tmp/agent.txt
使用1s查看文件并没有被创建
客户端运行配置
 --test --server puppet.domain.com
华音图书
HZBOOKS
'1351522305'
第3章创建你的第一个Puppet配置·39
---
## Page 51
40第一部分准备篇
体代码如下：
提示
提示
httpd.
自定义 Yum 源的方式安装httpd 软件。这里我们需要创建相应的模块与类，命名都可以是
3.5
和我们在 Puppet Master 服务端所定义的一样，显示的内容如下：
3.4
 2）编辑httpd 模块文件，指定源配置相关信息。这里我们将采用163 的源进行安装，具
本例并没有使用 templates 函数与 files，实际上，为了保证目录的一致性这些都需要创建。
在配置前读者可以自己先创建一次，看是否与笔者创建的类似。
通过上面的配置实践，
 在3.3节的配置执行成功后，我们可以在客户端验证运行结果。客户端运行的结果将会
package
class httpd{
$ sudo vim /etc/puppet/modules/httpd/manifests/init.pp
$ sudo mkdir -p /etc/puppet/modules/httpd/{manifests,templates,files}
1）创建httpd模块相应的目录，命令如下：
Hello World!
$ more /tmp/agent.txt
增加 httpd 模块
enabled 
gpgcheck 
baseurl
descr
查看运行结果
require => Yumrepo["repol63"];
ensure => installed,
"httpd":
=> "1";
=> "http://mirrors.163.com/centos/6/os/x86_64/",
=> "163 repo",
，我们掌握了 Puppet 基本的配置方法。现在我们加强难度，采用
---
## Page 52
会在第6章中详细讲解。
因此 Yumrepo[“repol63”]资源肯定首先被执行。资源之间的关系是Puppet 的重要部分，我们
参数。元参数是属于 Puppet 框架一部分的资源属性，并不属于某一个特定的资源类型。
ensure=>installed 确保 httpd 包的安装，并指定了一个新的属性 require。require 属性是一个元
资源：yumrepo 和 package。
可以说元参数指定了资源之间的依赖关系。Package["htpd"]依赖于 Yumrepo[“repo163"]资源
第一个资源 yumrepo指定了 yumrepo 的配置文件信息。第二个资源 package使用
6）检查 httpd是否已经成功安装，命令如下:
5）在客户端运行配置，命令如下：
$ puppet parser validate /etc/puppet/modules/httpd/manifests/init.pp
at /etc/puppet/modules/httpd/manifests/init.pp:2 on node puppet.domain.com
$ puppet parser validate /etc/puppet/modules/httpd/manifests/init.pp 
4）检查配置文件语法的正确性，命令如下:
 在上述代码中，httpd 模块的 init.pp 文件包含了一个单独的类 httpd。该类中包含了两个
$ rpm -q httpd 
Finished catalog run in 8.40 seconds
Finished catalog run in 0.03 seconds
#修改过后再次运行
#中的！：！不符合语法规则，这是半角输入的问题，切换至英文状态将其修改
node 'agent.domain.com' {
$ sudo vim /etc/puppet/manifests/nodes/agent.domain.com.pp 
3）修改 agent.domain.pp，增加 httpd 模块，命令如下：
httpd-2.2.15-15.el6.centos.1.x86_64
/Stage[main] /Httpd/Package[httpd] /ensure: created
Info: Applying configuration version '13515242681
Info: Caching catalog for agent.domain.com
Info: Retrieving plugin 
include httpd
include test
第3章创建你的第一个Puppet 配置·41
---
## Page 53
42第一部分准备篇
配置还应该考虑环境的因素。因此我们将在下一章学习 Puppet 多种环境的部署。结合 Git 版
就可以了。随着配置越来越复杂，应该考虑将它们放到版本控制当中，针对不同系统环境的
指定安装源。其实 Puppet 配置就这么简单，掌握基础的配置方法，将要实现什么告诉 Puppet
3.6本章小结
更，这将是非常有用的。
本控制跟踪变更，当需要时可以回滚到之前的状态，或者在不影响正常运行的情况下做出变
通过本章的学习，读者应该已经学会如何创建一个模块和类、如何安装软件，以及如何
华章图书
HZBOOKS
---
## Page 54
86第二部分基础篇
代码如下：
注意
类 user:virtual 中。在需要实例的时候采用 realize 函数应用。下面介绍配置方法。
其中 seven 属于 dba。Jeck 属于 sysadmin。lucy 既属于 dba 又属于 sysadmin。如果直接配置
6.2.2
3）创建用户组类 user:dba 的配置文件 dba.pp，使用 realize 实例化用户 seven 和 lucy,
用户组必须是已经存在的 gid。
假设有三个用户：seven、jeck、lucy。为了简化管理，定义两个用户组：dba、sysadmin。
$ vim
上面的代码创建了3个虚拟用户及每个用户对应的属性值。
$ vim /etc/puppet/modules/user/manifests/virtual.pp
2）创建 user:virtual类的 virtual.pp 文件，代码如下:
$ mkdir -p /etc/puppet/modules/user/manifests
1）创建用户模块目录，代码如下：
虚拟资源常用于用户的管理。下面将通过实例讲解如何运用虚拟资源来管理用户。
class user::virtual
@user {'lucy':
@user {'jeck':
@user {'seven':
ensure => present,
ensure
虚拟资源的用法
shell
home
gid
shell
gid
uid
shell
nome
gid
uid
 /etc/puppet/modules/user/manifests/dba.pp
=> 542，
=>
=> present,
=>
V
=>
=>
'/bin/bash',
'sysadmin',
541,
'/bin/bash',
'/home/seven',
540，
540，
'/home/lucy',
'/bin/bash',
 /home/jeck'
---
## Page 55
用户及组管理→安装应用软件→修改应用软件配置文件→启用应用服务，等等；根据服务器
资源？
6.3
了两步，就像类一样，定义一次，多次声明，只存在一个实例。
比事务，
能消耗。而只有在对虚拟资源进行实例化时 Puppet 才会进行编译。defined type 是 class 的类
Puppet 会编译所有 define 的定义，默认执行所有 define 定义的资源，这样会带来不必要的性
和 lucy，代码如下：
我们先来看一下运维工程师拿到已经安装好操作系统的服务器时，都需要做什么：新建
个模块内有多个相同的定义，则 define 是不二选择。但是在主机没有进行 define 引用时,
性能不同
比较虚拟资源与 define 二者可以归纳为如下两点：
在讲解虚拟资源时需要对 define 进行说明，define 也可以实现虚拟资源的需求。如果在
6）在测试节点 agent.domain.com 中运行如下命令:
#如果只想应用 dba 组，取消 include user::sysadmin
5）在测试节点 agent.domain.com的配置文件中添加如下代码：
4）创建用户组类user:sysadmin 的配置文件 sysadmin.pp，使用 realize 实例化用户 jeck
口功能类似
#执行后会实例化相关的虚拟资源
$puppetagent
include user::dba 
include user::virtual
$ vim /etc/puppet/manifests/nodes/agent.domain.com.pp
class user::sysadmin 
$ vim
class user::dba
常用资源的用法
，它实际上就是可以多实例化的类。而虚拟资源实际上就是把资源定义的过程拆分成
realize( User['jeck'],
realize( User['seven']
 /etc/puppet/modules/user/manifests/sysadmin.pp
 user::sysadmin
User['lucy'])
User['lucy'］)
-server puppet.domain.com
第6章Puppet资源详解·87
---
## Page 56
11.2.1日常变更分析