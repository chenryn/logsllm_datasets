their status
Listing 2: A coarse-grained communication protocol (Protocol 2)
nop instructions allowing the CB to reﬁll. The nop instruc-
tions serve the purpose of busy wait. Since no other pro-
cesses are using the RNG hardware at this point, the buﬀer
is guaranteed to be full by the end of this step. Following
that, we executed the sequence of N rdseed instructions
and checked for their status.
If one of these instructions
failed, we recorded a failure. If no failures were observed,
we recorded a successful sequence.
We collected 1 million measurements for each sequence
size and calculated average values. The results are pre-
sented in Figure 4. As seen from the ﬁgure, a process can
always successfully execute a sequence of 5 rdseed instruc-
tions without any failures (failure rate 0%). Since each in-
struction fetches 64 bits, the practical capacity of the CB
is 320 bits, which is 64 bits more than CB’s physical size.
A sequence of 6 rdseed instructions also has a low failure
rate of 1.23%. As the number of instructions in the sequence
continues to increase, the probability of success drops fur-
ther since it is less likely for the RNG to reﬁll the CB by
the time the request arrives. The failure rates of sequences
of size 7 and 8 are 2.86% and 15.98% respectively. Starting
from sequence size of 9, the failure rate approaches 100%,
with only a small number of successful sequences out of one
million attempts.
The results of the above experiment can be used to detect
the appropriate values for NP rime and NP robe. Selecting the
value of NP rime greater or equal to 5 ensures that the CB
is exhausted during the prime stage. The value of NP robe
needs to be selected to allow the detection of missing CB en-
tries with high probability, but with minimal false-positives.
Choosing the value of NP robe equal to 5 provides the maxi-
mum sequence with zero failure rate.
To select the optimal value of TRef ill, we performed an-
Figure 4: Failure rate of rdseed instruction groups executed
on core 0
other experiment. First, we primed the CB with a large
number of requests for seed values, thus draining all ran-
dom bits from it. Second, we allowed the RNG module
to stay idle by executing a parameterizable number of nop
instructions. Third, we repeatedly executed ﬁve rdseed in-
structions and checked the failure status of this sequence.
For each value of the waiting period, we repeated the ex-
periment one million times and calculated the average fail-
ure rate. The results are presented in Figure 5. As seen
from the ﬁgure, any waiting period shorter than 3 000 cycles
does not allow the CB enough time to be fully reﬁlled to
service ﬁve successive rdseed instructions. As the waiting
time grows, the failure rate decreases. When the number
123456789101112131415Number of RDSEED instructions in sequence0.0%20.0%40.0%60.0%80.0%100.0%Percent of sequences encountered a failof cycles spent in waiting stage approaches 7 000, the fail-
ure rate becomes very low. Since the probabilistic nature of
CB reﬁll frequency makes it impossible to precisely compute
the perfect value of TRef ill, one can experimentally select a
value that results in a low waiting period and a low failure
rate. We conservatively chose the waiting period value of
7 800 cycles for subsequent channel capacity estimation as it
demonstrates a very low error rate.
the GPU activity has a notable eﬀect on the time needed by
the CPU to service an rdseed instruction. When the GPU
is performing active animation, the rdseed instructions are
signiﬁcantly slowed down, thus interfering with the data en-
coding mechanism described in Protocol 2.
In particular,
slowed down delivery of seed requests allows the RNG mod-
ule to have more time to re-generate random bits and reﬁll
the CB. This distorts the correct channel functionality dur-
ing the transmission of ”1”, because the correctness hinges
on the predictable exhaustion of the CB. Based on our ob-
servations, the GPU activity can result in situations when
even a CB that was fully exhausted during the priming stage
will successfully provide ﬁve random seeds without a single
failure. In such a case, the spy will incorrectly decode a ”0”.
Erroneous switching from ”0” to ”1” is also possible. Such
errors happen when the CB is not given a suﬃcient amount
of time to re-generate the random bits, which results in a
failure. It appears that the number of such errors does not
depend on external interference from the GPU and has a
probabilistic nature. Therefore, a longer wait time (TRef ill)
results in less errors of this type, but the channel bit rate is
reduced.
Figure 5: Percentage of failed 5-long rdseed instruction se-
quences after the CB is allowed to rest for a given number
of cycles
Equipped with these parameters, we can now estimate the
RNG channel bit rate under this setting. The bit rate can
be calculated as 1/(cid:0)M ax(TP rime, TRef ill) + TP robe
(cid:1). In the
Prime stage (stage 1), the trojan either executes ﬁve rd-
seed instructions (to transfer ”1”) or busy-waits (to transfer
”0”) for the length of TRef ill. Since each rdseed instruction
takes about 400 cycles, the total time to execute ﬁve such
instructions is 2 000 cycles. Therefore, the duration of the
prime stage is determined by the larger value of busy-wait
time and is 7 800 cycles. Note that when the trojan commu-
nicates a ”1”, it can ﬁrst busy-wait for 5 800 cycles and then
perform ﬁve rdseed instructions to match the time required
to transmit a ”0”. Alternatively, the trojan can execute rd-
seed instruction for the whole duration of the 7 800 cycles
prime period. The duration of the probe stage (stage 2) is
2,000 cycles, because only ﬁve rdseed instructions need to
be executed by the spy. Therefore, 9 800 cycles are required
to transmit a single bit of information (2 000 + 7 800). Since
our experimental processor is clocked at 4GHz, this trans-
lates into the bit rate of 408 kbit/s. Note that the chan-
nel bit rate is mostly dictated by the characteristics of the
RNG module itself and is almost independent of the CPU
speed. For example, in processors with lower frequency, the
latency of rdseed instructions and the number of CPU cy-
cles required to reﬁll the CB will also decrease. Therefore,
the channel bit rate is likely to stay at a similar level.
4.2.1 Channel Capacity Estimation in Noisy Envi-
ronments
The RNG covert channel that we described above features
high bit rate with a low error rate. However, several sources
of interference exist that can increase the channel’s error
rate. An abstract scheme showing the channel operation un-
der noise is shown in Figure 6. As we described previously,
Using the parameters selected earlier, we constructed a
benchmark to evaluate the error rate of the channel and cal-
culate its capacity. We assume that our channel is mem-
oryless, i.e.
the output probability only depends on the
current input, and not on previous channel states. To cor-
rectly compute the error rate under this assumption, we base
our computations on transmitting random bits through the
channel. Speciﬁcally, we generated 100 million random bits,
transferred them through the RNG channel, and computed
the error rate separately for transmitting zeroes and ones.
We observed that the error rate was diﬀerent when sending
ones and when sending zeroes. Therefore, the channel can
be characterized as a binary asymmetric channel with noise.
The capacity of such channel can be calculated using the
equation below [41].
Hb(0)
(cid:19)
Hb (0 )−Hb (1 )
1−0−1
(1)
C =
0
1 − 0 − 1
Hb(1) − 1 − 1
1 − 0 − 1
(cid:18)
+ log2
1 + 2
where 0 is the probability of the trojan sending ”0” and
spy receiving ”1” and 1 is the probability of a bit ﬂip when
the trojan sends ”1”. Such transitions are demonstrated in
Figure 6. Hb(p) is the binary entropy function of probability
p which is deﬁned as:
Hb(p) = −p log2 p − (1 − p) log2(1 − p)
(2)
Figure 6: Binary asymmetric channel with noise between the
trojan and the spy. Values 0 and 1 represent probabilities
of errors when the trojan sends ”0” and ”1” respectively.
20003000400050006000700080009000 10000Number of cycles spent in the waiting stage0%20%40%60%80%100%Average failure rateTrojanSpy01011−ϵ01−ϵ1ϵ0ϵ1We evaluated the RNG channel based on Protocol 2 under
the following settings.
• No GUI: System’s GUI was disabled.
• Static GUI: The GUI was enabled, but no active an-
imation was performed.
• 2D: The GUI was enabled and a window was moved
on the desktop while performing the benchmark.
• 3D: A 3D benchmark was executed during the covert
channel operation, creating a high GPU load.
The results of these experiments are presented in Table 1.
As seen from the results, the GPU activity, even 3D anima-
tion, impacts the channel capacity only slightly, still allowing
the attackers to maintain the bit rate of about 390 kbit/s.
No GUI Static GUI
0.00066
2.982e-05 0.00029
0.19719%
2D
3D
0.20122% 0.19959%
0.60933% 0.84875%
0.99579
0.98782
0.96276
0.95437
406 443
403 198
392 965
389 540
0
1
Bits per
Channel Use
Channel
Capacity
(bit/s)
Table 1: Channel Characteristics Under Noisy Conditions
4.3 Detecting the Trojan and the Spy
Up until now we described the RNG channel in the frame-
work of one process. The focus of previous discussions was
on the hardware vulnerability itself and the quantiﬁcation of
a possible threat. If we now consider covert communication
through the RNG module by two diﬀerent processes, then a
problem that is common to all covert channels arises: how
to synchronize the trojan and the spy. To properly synchro-
nize the transmission, both the trojan and the spy have to
be made aware of the other’s presence, so that the trans-
mission and reception only occur when the two processes
are running simultaneously. In addition, a mechanism for
acknowledging the reception of data has to be incorporated.
In this section, we design the synchronized communication
protocol that utilizes the RNG hardware for sending both
data and acknowledgments.
In realistic system operation, a process context switch (or
a VM switch in virtualized systems) is the most signiﬁcant
obstacle to synchronized data transmission. For example,
when the trojan process is scheduled by the OS, it has no in-
formation on whether the spy process is running on another
core or not. The temporal inactivity of the spy process leads
to the loss of large amount of bits — this is known as burst
erasure [34].
In a similar spirit, it is diﬃcult for the spy
to distinguish the absence of the signal (when the trojan is
switched out) from a sequence of zeroes sent by the trojan.
While it is possible to adopt error correcting codes [30] that
can correct burst erasures [34], this signiﬁcantly complicates
the design and lowers the channel capacity. In any case, the
ability to detect the presence of the other party needs to be
added to both the trojan and the spy. We now demonstrate
how this can be accomplished using the same RNG hardware
module that is used as the communication medium.
4.3.1 Detecting the Spy
As shown in the code of Protocol 2, the spy process mea-
sures the CB contention by executing ﬁve rdseed instruc-
tions at the probing stage of each communication cycle.
Note that this activity by itself creates contention for the
CB. Even if the CB was full prior to the probing stage, the
ﬁve rdseed instructions executed by the spy will empty the
CB. The next communication cycle begins right after the
probing stage of the spy completes, with the trojan either
waiting or priming the CB with new rdssed instructions. If
the bit to be communicated by the trojan is ”1”, the trojan
has the ability to not only execute the ﬁve priming instruc-
tions, but also check for their status. If the instruction se-
quence fails, the trojan can detect the presence of the spy
since the CB was accessed right before the trojan began
the priming stage. Such capability of the trojan to perform
the CB priming and probing at the same time enables the
detection of the spy’s presence without incurring the loss
of channel capacity. Therefore, the trojan can check for the
spy’s presence every time it primes the CB. When the trojan
cannot detect the spy, it can temporary interrupt the trans-
mission and continue probing the CB until the spy process
is switched back in.
4.3.2 Detecting the Trojan
Detecting the trojan process is more tricky. The Na¨ıve im-
plementation of communication protocol relies on the Non-
Return-to-Zero (NRZ) line code.
In this code, ”one” (the
presence of contention) is encoded by a high voltage level,
and ”zero” (the absence of contention) is encoded by a low
voltage level. The problem is that it is impossible for the spy
to distinguish the absence of the trojan process from the tro-
jan that sends a sequence of zeroes. We address this problem
by adopting the Manchester coding. In Manchester coding,
ones and zeroes are encoded as state transitions, rather than
the states themselves. Therefore, during each communica-
tion cycle, even when the trojan sends ”0”, there will be the
high and the low contention levels. This allows the spy to
detect the absence of the trojan when it does not see high
contention levels. While this approach lowers the bit rate of
the channel, it allows for a clear and easy way for the spy
to detect the absence of the trojan. Similar mechanism was
used in [55] to synchronize their covert channel.
Combining the techniques for detecting the presence of
spy and trojan processes, the RNG channel becomes self-
synchronized. Occasional communication errors can be de-
tected and corrected with proper error correcting codes.
4.4 Supporting Error Correction in Multi-
Process Setting
In previous subsections, we estimated the capacity of the
RNG covert channel in several diﬀerent ways by modeling
the behavior of the spy and the trojan in a single process
scenario. This estimation quantiﬁes the potential threat of
exploiting the RNG hardware as a covert channel. In this
section, we demonstrate the implementation of the RNG
channel under realistic multi-process scenario where the spy
and the trojan are two diﬀerent processes running on the
same machine. The implementation is based on the trans-
mission principles described in the earlier sections, and we
also take into account errors that can inevitably occur dur-
ing the transmission.
As we described earlier, whether the rdseed instruction
succeeds or fails is a probabilistic function even in cases when