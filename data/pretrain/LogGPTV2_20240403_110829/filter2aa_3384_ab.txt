                    XMLDecoder.this.handler.parse(XMLDecoder.this.input);
                    return null;
这里有一个新的知识点-- AccessController.doPrivileged --获取特权，用于绕过权限检查。参
考文章：关于AccessController.doPrivileged。在获取特权之后，进入到
XMLDecoder.this.handler.parse(XMLDecoder.this.input) 去解析。
XMLDecoder.this.handler.parse(XMLDecoder.this.input) ，进入
DocumnetHandler.parse() 进行解析。
                }
            }, this.acc);
            this.array = this.handler.getObjects();
        }
        return true;
    }
通过这个 SAXParseFactory 工厂类去创建一个 SAX 解析器。再进入解析器进行解析。解析的方法
应该是 JAXP ，
SAXParserimpl#parse() -> SAXParserImpl$JAXPSAXParser.parse(is)
    public void parse(InputSource is, DefaultHandler dh)
        throws SAXException, IOException {
        if (is == null) {
            throw new IllegalArgumentException();
        }
        if (dh != null) {
            xmlReader.setContentHandler(dh);
            xmlReader.setEntityResolver(dh);
            xmlReader.setErrorHandler(dh);
            xmlReader.setDTDHandler(dh);
            xmlReader.setDocumentHandler(null);
        }
        xmlReader.parse(is);
    }
中间经过一系列的操作，最后的解析是交给 XML11Configuration.parse() 方法来进行解析。
fVersionDetector.startDocumentParsing((XMLEntityHandler) fCurrentScanner, 
version)
前期还有对xml版本，DTD配置进行解析的过程，先忽略，之后就是对实体内容进行解析了。
fCurrentScanner.scanDocument(complete)->******* ，仔细跟踪XML的解析过程，中间的解
析过程看的不是特别清楚，不过还是可以捕捉到解析出类对象的地方。
此处根据事件来解析，重要的是 next() 方法。在 next() 方法中会处理当前的事件，并且取出事
件的一些属性（好像是根据<>来区分的。），根据属性去创建对象之类的。
创建类对象首先是查看是否是基础对象 bool 这种，不是的话就通过 Class.forName() 去加载。
来一张图看看他是怎么具体进行解析的。获取对象 java.lang.String[] ，长度为3.
Expression 底层的调用
反序列化过程中第一次调用，创建 ProcessBuilder 对象。
全局第二次调用，执行 start 方法。
//整体的调用思路
此处通过 XMLDecoder 实现一个内存马，然后想到了冰蝎执行任意代码的原理，利用
defindClass 加载字节码达到任意代码执行。但是这个 defineCLass 需要是一个 public 方法，
之后在大佬的思路里看到了这个类 org.mozilla.javascript.DefiningClassLoader ，这个类
中定义了一个 defineClass 方法，可以实现任意代码执行。
package com.example;
import java.beans.Expression;
public class Express {
    public static void main(String[] args) throws Exception {
        Expression expression = new 
Expression(Class.forName("java.lang.ProcessBuilder"),"new",new Object[]{new 
String[]{"cmd.exe","/c","calc.exe"}});
        try {
            Object value = expression.getValue();
            Expression start = new Expression(value, "start", new Object[]{});
            Object value1 = start.getValue();
            ClassLoader contextClassLoader = 
Thread.currentThread().getContextClassLoader();
        } catch (Exception e) {
            e.printStackTrace();
        }
        Expression aNew = new Expression(Class.forName("com.example.Person"), 
"new", new Object[]{});
        Object value = aNew.getValue();
        Expression toStrings = new Expression(value, "toStrings", new Object[]
{});
        Object value1 = toStrings.getValue();
    }
}
//此处有一点，只能调用public方法。当调用其他类型的方法会显示方法不存在。
get 和 set 方法的调用
package com.example;
public class Person {
    public String name;
    protected int age;
    private boolean sex;
    public Person() {
        System.out.println("无参构造被调用");
    }
    public Person(String name, int age, boolean sex) {
        System.out.println("构造方法调用");
        this.name = name;
        this.age = age;
        this.sex = sex;
    }
    public String getName() {
        System.out.println("Name get");
        return name;
    }
    public void setName(String name) {
        System.out.println("name set");
        this.name = name;
    }
    public int getAge() {
        System.out.println("age get");
        return age;
    }
    public void setAge(int age) {
        System.out.println("age set");
        this.age = age;
    }
    public boolean getSex() {
        System.out.println("sex get");
        return sex;
    }
    public void setSex(boolean sex) {
        System.out.println("sex set");
        this.sex = sex;
    }
}
Person zhangsan = new Person("zhangsan", 20, true);
        java.beans.XMLEncoder xmlEncoder = new 
java.beans.XMLEncoder(System.out);
        xmlEncoder.writeObject(zhangsan);
        xmlEncoder.close();
/*
构造方法调用
无参构造被调用
age get
age get
age get
age set
Name get
Name get
sex get
sex get
sex get
sex set
   name
    zhangsan
   20
   true
*/
String encode2="\n" +
                "\n" 
+
                " \n" +
参考文章
Java XMLDecoder反序列化分析  原理分析。
WebLogic-XMLDecoder反序列化漏洞分析    有介绍关于 XMLDecoder 的一些规则。然后还介绍了
weblogic 的漏洞。
浅谈Weblogic反序列化——XMLDecoder的绕过史
关于  标签的绕过，可以使用 void 绕过，因为 void 标签解析器继承自 object 。其中还
提到一个二次反序列化的绕过方式。
 XMLDecoder反序列化漏洞底层扩展与WebShell   关于 XMLDecoder 底层的 Express 类的一
些东西，然后还介绍了其他集中表达式执行实现 webshell
Weblogic xmldecoder反序列化中的命令回显与内存马总结   有介绍如何利用 XMLDecoder
实现 weblogic 内存马。利用 URLClassLoader 类区加载本地的 jar 包，实现内存马。
                "  \n" +
                "   name\n" +
                "   \n" +
                "    \n" +
                "    zhangsan\n" +
                "   \n" +
                "  \n" +
                "  \n" +
                "   20\n" +
                "  \n" +
                "  \n" +
                "   true\n" +
                "  \n" +
                " \n" +
                "";
        java.beans.XMLDecoder xmlDecoder = new java.beans.XMLDecoder(new 
StringBufferInputStream(encode2));
        Object o = xmlDecoder.readObject();
        Person o1 = (Person) o;
        System.out.println(o1.getName());
/*
无参构造被调用
age set
sex set
Name get
zhangsan
Process finished with exit code 0
*/