# 小结正如我在之前的分布式系统的本质文章里所说到的，分布式的服务的调度需要一个分布式的存储系统来支持服务的数据调度。而我们可以看到，各大公司都在分布式的数据库上做各种各样的创新，他们都在使用底层的分布式文件系统来做存储引擎，把存储和计算分离开来，然后使用分布式一致性的数据同步协议的算法来在上层提供高可用、高扩展的支持。从这点来看，可以预见到，过去的分库分表并通过一个数据访问的代理服务的玩法，应该在不久就会过时就会成为历史。真正的现代化的分布式数据存储就是Aurora 和 Spanner 这样的方式。通过上面的这些论文和相关的工程实践以及开源项目，相信可以让你在细节方面对分布式中最难的一块------数据调度方面有更多的认识。(**这篇文章中提到了大量的英文文章和论文，担心读者听音频时很难理解和对应，所以没有录制音频，敬望谅解。**)《分布式系统架构的本质》系列文章的目录如下，方便你查找自己关注的内容。-   [分布式系统架构的冰与火](https://time.geekbang.org/column/article/1411)-   [从亚马逊的实践，谈分布式系统的难点](https://time.geekbang.org/column/article/1505)-   [分布式系统的技术栈](https://time.geekbang.org/column/article/1512)-   [分布式系统关键技术：全栈监控](https://time.geekbang.org/column/article/1513)-   [分布式系统关键技术：服务调度](https://time.geekbang.org/column/article/1604)-   [分布式系统关键技术：流量与数据调度](https://time.geekbang.org/column/article/1609)-   [洞悉 PaaS    平台的本质](https://time.geekbang.org/column/article/1610)-   [推荐阅读：分布式系统架构经典资料](https://time.geekbang.org/column/article/2080)-   [推荐阅读：分布式数据调度相关论文](https://time.geekbang.org/column/article/2421)![](Images/1c1e992cf41f5294df097aabed82f9e4.png){savepage-src="https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg"}
# 30 \| 编程范式游记（1）- 起源
# 序现在很多的文章和演讲都在谈架构，很少有人再会谈及编程范式。然而，这些基础性和本质性的话题，却是非常非常重要的。一方面，我发现在一些语言争论上，有很多人对编程语言的认识其实并不深；另一方面，通过编程语言的范式，我们不但可以知道整个编程语言的发展史，而且还能提高自己的编程技能写出更好的代码。**我希望通过一系列的文章带大家漫游一下各式各样的编程范式。**（这一系列文章中代码量很大，很难用音频体现出来，所以没有录制音频，还望谅解。）-   [编程范式游记（1）-    起源](https://time.geekbang.org/column/article/301)-   [编程范式游记（2）-    泛型编程](https://time.geekbang.org/column/article/303)-   [编程范式游记（3）-    类型系统和泛型的本质](https://time.geekbang.org/column/article/2017)-   [编程范式游记（4）-    函数式编程](https://time.geekbang.org/column/article/2711)-   [编程范式游记（5）-    修饰器模式](https://time.geekbang.org/column/article/2723)-   [编程范式游记（6）-    面向对象编程](https://time.geekbang.org/column/article/2729)-   [编程范式游记（7）-    基于原型的编程范式](https://time.geekbang.org/column/article/2741)-   [编程范式游记（8）- Go    语言的委托模式](https://time.geekbang.org/column/article/2748)-   [编程范式游记（9）-    编程的本质](https://time.geekbang.org/column/article/2751)-   [编程范式游记（10）-    逻辑编程范式](https://time.geekbang.org/column/article/2752)-   [编程范式游记（11）-    程序世界里的编程范式](https://time.geekbang.org/column/article/2754)这一经历可能有些漫长，途中也会有各式各样的各种语言的代码。但是我保证这一历程对于一个程序员来说是非常有价值的，因为你不但可以对主流编程语言的一些特性有所了解，而且当我们到达终点的时候，你还能了解到编程的本质是什么。这一系列文章中有各种语言的代码，其中有C、C++、Python、Java、Scheme、Go、JavaScript、Prolog等。所以，如果要能跟上本文的前因后果，你要对这几门比较主流的语言多少有些了解。而且，你需要在一线编写一段时间（大概 5年以上吧）的代码，可能才能体会到这一系列文章的内涵。我根据每篇文章中所讲述的内容，将这一系列文章分为四个部分。-   **第一部分：泛型编程**，第 1\~3 章，讨论了从 C 到 C++    的泛型编程方法，并系统地总结了编程语言中的类型系统和泛型编程的本质。-   **第二部分：函数式编程**，第 4 章和第 5    章，讲述了函数式编程用到的技术，及其思维方式，并通过 Python 和 Go    修饰器的例子，展示了函数式编程下的代码扩展能力，以及函数的相互和随意拼装带来的好处。-   **第三部分：面向对象编程**，第 6\~8    章，讲述与传统的编程思想相反，面向对象设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，列举了面向对象编程的优缺点，基于原型的编程范式，以及    Go 语言的委托模式。-   **第四部分：编程本质和逻辑编程**，第 9\~11    章，先探讨了编程的本质：逻辑部分才是真正有意义的，控制部分只能影响逻辑部分的效率，然后结合    Prolog    语言介绍了逻辑编程范式，最后对程序世界里的编程范式进行了总结，对比了它们之间的不同。我会以每部分为一个发布单元，将这些文章陆续发表在专栏中。如果在编程范式方面，你有其他感兴趣的主题，欢迎留言给我。下面我们来说说什么是编程范式。编程范式的英语是 programmingparadigm，范即模范之意，范式即模式、方法，是一类典型的编程风格，是指从事软件工程的一类典型的风格（可以对照"方法学"一词）。编程语言发展到今天，出现了好多不同的代码编写方式，但不同的方式解决的都是同一个问题，那就是如何写出更为通用、更具可重用性的代码或模块。如果你准备好了，就和我一起来吧。
# 先从 C 语言开始为了讲清楚这个问题，我需要从 C 语言开始讲起。因为 C语言历史悠久，而几乎现在看到的所有编程语言都是以 C语言为基础来拓展的，不管是C++、Java、C#、Go、Python、PHP、Perl、JavaScript、Lua，还是 Shell。``{=html}自 C 语言问世 40多年以来，其影响了太多太多的编程语言，到现在还一直被广泛使用，不得不佩服它的生命力。但是，我们也要清楚地知道，大多数C Like 编程语言其实都是在改善 C 语言带来的问题。那 C 语言有哪些特性呢？我简单来总结下：1.  C    语言是一个静态弱类型语言，在使用变量时需要声明变量类型，但是类型间可以有隐式转换；2.  不同的变量类型可以用结构体（struct）组合在一起，以此来声明新的数据类型；3.  C 语言可以用 `typedef`    关键字来定义类型的别名，以此来达到变量类型的抽象；4.  C    语言是一个有结构化程序设计、具有变量作用域以及递归功能的过程式语言；5.  C 语言传递参数一般是以值传递，也可以传递指针；6.  通过指针，C    语言可以容易地对内存进行低级控制，然而这引入了非常大的编程复杂度；7.  编译预处理让 C 语言的编译更具有弹性，比如跨平台。C语言的这些特性，可以让程序员在微观层面写出非常精细和精确的编程操作，让程序员可以在底层和系统细节上非常自由、灵活和精准地控制代码。然而，在代码组织和功能编程上，C 语言的上述特性，却不那么美妙了。
## 从 C 语言的一个简单例子说起我们从 C 语言最简单的交换两个变量的 swap 函数说起，参看下面的代码。    void swap(int* x, int* y){int temp = *x;*x = *y;*y = tmp;}你可以想一想，这里为什么要传指针？这里是 C语言指针，因为如果你不用指针的话，那么参数变成传值，即函数的形参是调用实参的一个拷贝，函数里面对形参的修改无法影响实参的结果。为了要达到调用完函数后，实参内容的交换，必须要把实参的地址传递进来，也就是传指针。这样在函数里面做交换，实际变量的值也被交换了。然而，这个函数最大的问题就是它只能给 int值用，这个世界上还有很多类型包括double、float，这就是静态语言最糟糕的一个问题。