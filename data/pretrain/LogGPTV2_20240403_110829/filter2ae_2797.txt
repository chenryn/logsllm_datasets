# OpenRASP XSS算法的几种绕过方法

## 译文声明
本文为翻译文章，译文仅供参考，具体内容和含义以原文为准。

OpenRASP 默认只能检测反射型 XSS，存储型 XSS 仅在 IAST 商业版中支持。对于反射型 XSS，OpenRASP 也只能检测到可控输出点在 HTML 标签外的情况。如果可控输出点在 HTML 标签内（如 `<script>` 或 `<style>` 内部），OpenRASP 几乎无法检测到。本文的绕过方法主要针对这种情况。

## 测试环境
- 操作系统：Windows
- 应用服务器：Tomcat
- JDK 版本：1.8
- OpenRASP 版本：1.3.7-beta

测试环境部署请参考官方文档。在 `official.js` 文件中，`xss_userinput` 算法默认配置为 `ignore`，修改为 `block` 以开启拦截。此时点击官方测试用例中的链接即可触发 OpenRASP 拦截。

## OpenRASP XSS算法
OpenRASP 的 XSS 算法有两种：
1. 针对 PHP 环境的算法（此处不讨论）。
2. 用户输入匹配算法。根据注释说明，该算法的工作原理是“当用户输入长度超过 15 个字符，且匹配标签正则表达式，并出现在响应中时，直接拦截”。

标签正则表达式的解析如下（使用 regexper 网站进行解析）：
- 整体上，标签正则表达式匹配两种情况：一是请求参数值中有子字符串以 `<` 或 `0x00 - 0x20` 字符开头的字符串。
- 因此，以下常见的 XSS 测试 payload 会被拦截：
  - `"<script>alert(1)</script>"` // 匹配标签正则
  - `"alert(1)"` // 匹配标签正则
  - `"<img src=x onerror=alert(1)>"` // 匹配标签正则

## 标签正则绕过
整理了一些网上的 XSS 绕过 payload，发现以下这些可以顺利绕过标签正则：
- `javascript:alert(1)`
- `onclick="alert(1)" z`
- `[confirm`alert(1)`]"z`
- `"/ondblclick=`alert(1)`"z`

直接在浏览器中输入这些 payload 会报 400 响应错误。需要对 payload 进行 URL 编码后，在 Burp Suite Repeater 中右键 "Copy URL"，复制 URL 到浏览器中访问，点击即可触发弹框。

### 标签后接单双引号
还发现以下两种 XSS payload 可以绕过：
- `onclick='alert(1)'`
- `onclick="alert(1)"`

简单测试了其他标签后接单引号或双引号进行绕过，发现很多都可以成功：
- `123<svg onload=alert(1)>` // 拦截
- `123<svg onload='alert(1)'>` // 点击弹框
- `123<svg onload="alert(1)">` // 点击弹框
- `123<script>alert(1)</script>` // 拦截
- `123<script>alert('1')</script>` // 点击弹框
- `123<script>alert("1")</script>` // 点击弹框

例如，使用 `123<svg onload=alert(1)>`，URL 编码后，点击也能弹框。

### 构造无效标签
构造无效标签也可以用于绕过 OpenRASP。只需构造如下 payload 即可：
- `onclick="alert(1)"` // 标签名包含字母和数字
- `onclick="alert(1)"` // 标签名称长度大于 12

验证如下：
- `onclick="alert(1)"` // 标签名包含字母和数字
- `onclick="alert(1)"` // 标签名称长度大于 12

## 程序逻辑绕过
另一种绕过方法是从程序检测逻辑上进行绕过。OpenRASP 具体的检测代码实现在文件 `agent/java/engine/src/main/java/com/baidu/openrasp/plugin/checker/local/XssChecker.java` 中。代码实现逻辑为“当用户输入长度超过 15 个字符，匹配标签正则，并出现在响应中时，直接拦截”。

但代码中多了一处逻辑：如果请求传递多个参数，某个参数值长度大于 15 个字符且匹配之前的标签正则，但对应参数值没有在响应中出现时，变量 `count` 值会加 1。当 `count` 值大于 10 时，OpenRASP 会直接放行。

### 绕过演示
为了方便查看 payload 内容，这里使用 POST 请求。如果转换成 GET 请求并对参数值进行 URL 编码，效果相同。

原始请求会触发拦截：
- 绕过 payload：在 `input` 参数前面添加多个 `input[n]` 参数，且参数值为其他 XSS payload。
- 转换成 GET 请求并对 payload 进行编码。

### 绕过 payload 分析
构造的绕过 payload 有几点要求：
1. 虚构的请求参数理论上至少要有 11 个，如 `input0` 到 `input11` 请求参数。如果未成功，最好再增加几个请求参数。
2. 虚构的请求参数名取值有些要求。
3. 虚构的请求参数值不能与真实请求参数值相同。

这样，`input0` 到 `input11` 这些请求参数会在 `parameterMap` 中排在 `input` 参数前面，从而优先被 OpenRASP 检测逻辑处理，从而满足 `count > exceedLengthCount` 的条件进行绕过。

## 参考资料
- [AwesomeXSS](https://github.com/s0md3v/AwesomeXSS#awesome-tags—event-handlers)