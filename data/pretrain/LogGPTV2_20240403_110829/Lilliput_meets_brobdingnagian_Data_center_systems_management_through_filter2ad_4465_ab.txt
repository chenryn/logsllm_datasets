with the territory is a loose level of synchronization rather
than something on the lines of commit protocols. We
would argue that current practice is even looser levels
of synchronization. Second, we believe lessons from role-
based access control (RBAC) can be adapted to handle the
security implications. Fine-grained roles can be assigned,
say for experts in different
layers of the stack, and
thanks to signiﬁcant progress in RBAC, these roles can
be handled in a sophisticated manner allowing hierarchies,
overlaps, and transient existence.
With respect to the second aspect of this thrust, we
believe there will be commonalities of interests among
multiple mobile devices. Some of these commonalities
will be driven by proximal geographic location, such
3
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:09 UTC from IEEE Xplore.  Restrictions apply. 
as, two administrators in the lab, based on an initial
problem alert, may drill down requiring further data
near concurrently in time. Considering that direct data
connection between the mobile client and the managed
server is likely to be expensive (consumes more energy,
cellular data connection has contention, etc.), there is
scope for a middle tier that provides aggregation services
and feeds multiple mobile clients. There is some prior
work with this model [13], [14]. The unsolved challenges
in this are how timely can the updates be, what are the
security implications since different persons have different
access privileges to different pieces of information.
IV. Case Study
IBM Mobile Systems Remote (short IBM Remote) is an
iPhone and Android application developed by IBM Re-
search for managing IBM server systems, with a software
architecture that enables it to be generalized to other
server platforms. It has a View-Cache-Engine (VCE)
Architecture [15] in which the mobile application fetches
certain data items of interest to system management from
the servers, such as temperature of the chassis and speeds
of the different fans. Views express interest in certain data
items to a Cache, which in turn is updated asynchronously
by a communication Engine whenever it receives an
update. The cache in turn updates the views that have
subscribed to the new piece of data. How often a data
item gets updated is determined by the Freshness of the
data item, which is an intuitive way for the administrator
to specify how timely does a data item have to be. We
ﬁnd that the freshness criterion varies from the relatively
static data items, such as the machine hostname and MAC
address, to slowly-varying dynamic information, such as
up/down status, to fairly dynamic information, such as
fan speed.
In Figure 1 we show two screenshots of IBM Remote.
The left image shows the main view of the application
where each cell is a different management endpoint. In
this case they are IBM BladeCenters managed by an
Advanced Management Module (AMM) — an AMM is
a hot-swap BladeCenter module that is used to conﬁgure
and manage all installed BladeCenter components [16].
The application talks a proprietary TCP-based protocol
to get data from the AMM. Each cell contains prioritized
information to give a high level overview of the machine,
such as name, label, and machine type, and its health
status — a cross indicates a critical error, an exclamation
mark some non-critical problem, and a check that every-
thing is ﬁne with the machine. A timestamp for each data
item update is kept in the cache and the time of the last
update is displayed next to the connectivity symbol to
give the user an idea of the freshness of the data.
If a user clicks on an individual machine cell on
the main page they are taken to the front view of said
BladeCenter as shown in the right image. We see each of
the fourteen individual blades in the chassis and can click
on any one to get further information. Below each blade
is a power button which shows the current powered state
and which the user can click to power each blade on or
off, an example of the control part of system management.
Fig. 1. The main view on the left and front view of a
BladeCenter chassis on the right
Fig. 2. The health view on the left and event log on the
right for a BladeCenter chassis
Figure 2 shows the health view and the event log view.
The health view is broken down into critical, non-critical,
and system level health messages giving a comprehensive
look into the system. Due to the verbosity of event logs,
the right image is ﬁltered only to show warnings and
errors. This is an example of the necessary level of
ﬁltering before visualizing on a mobile device so that a
system administrator can take timely action.
Empirically, we ﬁnd that our concept of Freshness
improved battery performance [15], since certain data
items now did not have to be refreshed as often, which
reduced communication, the greatest component of the
4
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:09 UTC from IEEE Xplore.  Restrictions apply. 
energy consumption. There was a 17% relative energy
saving compared to the case where no freshness criterion
is speciﬁed and the mobile device updates all data items
every 30 seconds. Notably, the freshness optimization
does not affect the time to detect a relevant event by
the administrator. We chose a publish-subscribe based
model, with the data cache being the publisher and the
view being the subscriber. This reduces network trafﬁc
because several views have interest in overlapping sets of
data items.
A class of bugs that highlights the challenges of sys-
tems management in virtualized environments is conﬁg-
uration bugs. Consider that for a production data center
running KVM virtual machines we run an application — a
Web 2.0 benchmarl called Olio [17] and two interfering
workloads on two separate VMs. Olio is a benchmark
mimicking a social network application and has been
used widely for evaluating PHP web-based applications
and even made a part of other benchmark suites. Olio
runs on the Apache HTTP server (version 2.4, in multi-
threaded i.e., worker mode) and uses a PHP accelerator
for dynamic content called PHP Fastcgi Process Manager.
In Figure 3, we show the impact of three conﬁguration
parameters on the application throughput, the ﬁrst two
being Apache conﬁguration parameters and the third a
PHP accelerator parameter. We ﬁnd that the choice of best
conﬁguration parameter for Apache not only depends on
workload intensity, but also on the amount of interference
arising from co-located VMs (the DCopy size quanti-
ﬁes interference). Further, the conﬁguration parameters
have non-linear dependencies among themselves and this
dependency also changes with interference (not shown
here). This result tells us that there will arise the need
for systems management
tuning these
parameters) due to unpredictable events—consider for
example, the complex relationships between performance
and interference. Also, proper mitigation action will re-
quire the administrators to ingest fairly complex data,
necessitating effective applications on mobile devices.
Design challenges and how we solved them. We faced
several design challenges in building IBM Remote and the
conﬁguration engine and we list the three most important
ones. First,
the real estate on smart phones is really
precious and therefore we found, through extensive trial
with system administrators, that it was best to provide
a summarized view of the health of a machine high-
lighting error conditions and the ability to drill down,
as desired by the admin, to investigate the cause of the
problem. Second, we found that the conﬁguration param-
eters have dependencies, even non-linear dependencies,
among them. Therefore, we solved this partially through
having a table lookup of sets of parameter values for
different operational regions, such as, high number of
users and high amount of database load, high number of
users and lots of short requests. This can be improved
tasks (such as,
(a) Throughput vs. MaxClients
(b) Throughput vs. KeepAliveTimeout
(c) Throughput vs. PhpMaxChildren
Fig. 3.
Choice of optimal parameter values with varying Dcopy
intensity. For all experiments, workload size is 2,000, chosen de-
fault values are MaxClients=2,000, KeepAliveTimeout=10, and
PHPMaxChildren=2,000. In each experiment, one of the parameters
is varied while others are kept constant at their default values.
through solving it in a rigorous optimization manner.
Third, for the mobile client, we needed it to work with
a variety of communication mechanisms available on
different platforms, such as, pull-based or push-based (the
latter is not efﬁciently supported in some platforms). Our
compromise is to provide a push-based interface through
Views and pull-based through the Cache.
V. Related Work
Prior work on system management in the mobile context
has focused on managing mobile devices, which is the op-
posite direction to the control ﬂow that we are proposing
here. The limited amount of work in our direction has
focused on mobile agents for monitoring servers [18],
[19]. The sophistication in this work lies in having a
dynamic set of agents whose monitoring policies can be
changed ﬂexibly and remotely. Some work has focused
on adapting the agent-based monitoring to the security
policies of enterprises [20]. UCSand [21] is the ﬁrst
Android app with a GUI for the Cisco Uniﬁed Computing
5
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:09 UTC from IEEE Xplore.  Restrictions apply. 
2002503003500100020003000PhpMaxChildrenOps/secDcopy0MB1525.88MB4577.64MB7629.39MBThroughput vs PhpMaxChildrenSystems (USCs) monitoring and control. The app utilizes
the XML-API of the UCS-Manager but does not update
periodically like IBMRemote, the user must close the
app and open it again to refresh. PCMonitor [22] is a
commercial product designed by MMSOFT Design Ltd.
for the purpose of monitoring PCs running Windows and
major Linux distribution from a mobile device, including
the iPhone, Android, and Windows 7 mobile phones.
PCMonitor relies on middleware that monitors on behalf
of the mobile device, while IBMRemote does the actual
communication. VMWare vCenter Mobile Access [23]
(VCMA) is a fully conﬁgured and ready to run virtual
appliance that is required on the server side to manage
a datacenter from mobile devices. Administrators can
perform various activities in their VMware environments
using a mobile browser or the iPad application. The
application lacks a native application, unlike IBMRemote,
which causes it to not have as ﬂuid of a user experience.
Hewlett-Packard recently announced a mobile application
for conﬁguration, monitoring, and management for their
new HP Proliant-8 family of systems [24]. This announce-
ment shows that some vendors are already working to
address the points we have raised in this paper.
VI. Conclusion
In this paper, we have laid out a vision that we believe is
close at hand — mobile clients, such as smart phones,
being used to manage large masses of physical and
virtual servers. This turns some long-held practices and
principles of systems manegement on their head. We iden-
tify two fundamental ones. The ﬁrst is that management
will now be done through multiple resource-constrained
mobile devices, which have a different dependability
characteristic than the managed devices. The second is
that systems management will take on a ﬂavor of crowd-
sourcing, albeit one where “crowd” is narrowly deﬁned
to be experts in one (or more) domains of the managed
systems and the management function is still
loosely
controlled. For these two fundamental changes to be
beneﬁcial rather than deleterious to the vision, we outline
solution directions and lay out a concrete case of a mobile
application for systems management called IBM Remote,
developed at IBM Research and being used in limited
engagements. We highlight some of the requirements
for systems management through mobile devices while
troubleshooting conﬁguration-related bugs.
References
[1] Splunk
Inc.,
“Splunk
for
Application Management,”
http://www.splunk.com/web assets/pdfs/secure/Splunk for
Application Management.pdf.
[2] V. Varadarajan, T. Kooburat, B. Farley, T. Ristenpart, and M. M.
Swift, “Resource-freeing attacks: improve your cloud performance
(at your neighbor’s expense),” in Proceedings of the 2012 ACM
conference on Computer and communications security. ACM,
2012, pp. 281–292.
[3] D. Williams and B. Newton, “Dell-BMC Industry Insights: Data
Center Automation Your Path to the Cloud,” http://www.bmc.
com/products/documents/54/69/215469/215469.pdf, 2011.
[4] A. Kumar Maji, K. Hao, S. Sultana, and S. Bagchi, “Characterizing
failures in mobile OSes: A case study with Android and Symbian,”
in IEEE 21st International Symposium on Software Reliability
Engineering (ISSRE), 2010, pp. 249–258.
[5] A. Carroll and G. Heiser, “An analysis of power consumption in
a smartphone,” in USENIX ATC, 2010.
[6] V. Shnayder, M. Hempstead, B.-r. Chen, G. W. Allen, and
M. Welsh, “Simulating the power consumption of large-scale
sensor network applications,” in SenSys, 2004.
[7] IBM, “Advanced Management Module,” http://publib.boulder.ibm.
com/infocenter/bladectr/documentation/index.jsp?topic=/com.ibm.
bladecenter.8886.doc/dw1fs c advanced management module.
html.
[8] Dell Inc., “Remote Management with the Baseboard Management
Controller in Eighth-Generation Dell PowerEdge Servers,” www.
dell.com/downloads/global/power/ps4q04-20040110-Zhuo.pdf.
[9] P. Dutta, M. Grimmer, A. Arora, S. Bibyk, and D. Culler, “Design
of a wireless sensor network platform for detecting rare, random,
and ephemeral events,” in At the 4th International Symposium on
Information Processing in Sensor Networks (IPSN), 2005.
[10] Q. Cao, T. Abdelzaher, T. He, and J. Stankovic, “Towards optimal
sleep scheduling in sensor networks for rare-event detection,” in
Proceedings of the 4th international symposium on Information
processing in sensor networks, 2005.
[11] M. Hoque, M. Siekkinen, and J. Nurminen, “On the energy
efﬁciency of proxy-based trafﬁc shaping for mobile audio stream-
ing,” in Consumer Communications and Networking Conference
(CCNC), 2011.
[12] A. K. Maji, F. A. Arshad, S. Bagchi, and J. S. Rellermeyer, “An
empirical study of the robustness of inter-component communica-
tion in android,” in DSN, 2012.
[13] M. Pitkanen, T. Karkkainen, and J. Ott, “Opportunistic Web
Access via WLAN Hotspots,” in IEEE International Conference
on Pervasive Computing and Communications (PerCom).
IEEE,
2010, pp. 20–30.
[14] B. Han, P. Hui, V. Kumar, M. Marathe, J. Shao, and A. Srinivasan,
“Mobile Data Ofﬂoading through Opportunistic Communications
and Social Participation,” IEEE Transactions on Mobile Comput-
ing, vol. 11, no. 5, pp. 821 –834, may 2012.
[15] J. S. Rellermeyer, T. H. Osiecki, E. A. Holloway, P. J. Bohrer, and
M. Kistler, “System management with ibm mobile systems remote
- a question of power and scale,” in 13th International Conference
on Mobile Data Management (MDM), 2012, pp. 1–6.
[16] IBM, “IBM BladeCenter blade server,” http://www.ibm.com/
systems/bladecenter/index.html.
[17] Olio, “Olio: Web 2.0 application,” http://incubator.apache.org/olio,
2013.
[18] A. Tripathi, T. Ahmed, S. Pathak, M. Carney, and P. Dokas,
“Paradigms for mobile agent based active monitoring of network
systems,” in Network Operations and Management Symposium,
2002. NOMS 2002. 2002 IEEE/IFIP, 2002, pp. 65 – 78.
[19] A. R. Tripathi, D. Kulkarni, H. Talkad, M. Koka, S. Karanth,
T. Ahmed, and I. Osipkov, “Autonomic conﬁguration and recovery
in a mobile agent-based distributed event monitoring system,”
Software: Practice and Experience, vol. 37, no. 5, pp. 493–522,
2007. [Online]. Available: http://dx.doi.org/10.1002/spe.777
[20] A. Koliousis and J. Sventek, “A trustworthy mobile agent infras-
tructure for network management,” in Integrated Network Man-
agement, 2007. IM ’07. 10th IFIP/IEEE International Symposium
on, 2007, pp. 383 –390.
[21] W. V. Schaik, “UCSand,” https://market.android.com/details?id=
net.ecliptic.ucsand, Aug 27, 2011.
[22] MMSOFT Design Ltd., “PCMonitor,” http://mobilepcmonitor.
[23] V. Labs, “VMWare vCenter Mobile Access,” http://labs.vmware.
[24] A. Shah, “HP to Release Server Management Apps for iOS,
com/, 2011.
com/ﬂings/vcma, 2011.
Android,” February 2012.
6
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:40:09 UTC from IEEE Xplore.  Restrictions apply.