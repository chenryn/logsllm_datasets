./pread   
called pread( 3, c, 10). returned that 2 bytes were read.   
Those bytes are as follows: x   
```   
Turn tracing off:   
```   
echo 0 > tracing_on   
```   
And look in the trace:   
```   
 1)  -40173   |               |  ksys_pread64() {   
 1)  -40173   |               |    __fdget() {   
 1)  -40173   |   0.076 us    |      __fget_light();   
 1)  -40173   |   0.768 us    |    } /* __fdget */   
 1)  -40173   |               |    vfs_read() {   
 1)  -40173   |               |      rw_verify_area() {   
 1)  -40173   |               |        security_file_permission() {   
 1)  -40173   |               |          selinux_file_permission() {   
 1)  -40173   |               |            __inode_security_revalidate() {   
 1)  -40173   |               |              _cond_resched() {   
 1)  -40173   |   0.041 us    |                rcu_all_qs();   
 1)  -40173   |   0.362 us    |              } /* _cond_resched */   
 1)  -40173   |   0.696 us    |            } /* __inode_security_revalidate */   
 1)  -40173   |   0.042 us    |            avc_policy_seqno();   
 1)  -40173   |   1.390 us    |          } /* selinux_file_permission */   
 1)  -40173   |   0.042 us    |          bpf_lsm_file_permission();   
 1)  -40173   |   0.043 us    |          __fsnotify_parent();   
 1)  -40173   |   0.053 us    |          fsnotify();   
 1)  -40173   |   2.785 us    |        } /* security_file_permission */   
 1)  -40173   |   3.122 us    |      } /* rw_verify_area */   
 1)  -40173   |               |      __vfs_read() {   
 1)  -40173   |               |        new_sync_read() {   
 1)  -40173   |               |          xfs_file_read_iter [xfs]() {   
 1)  -40173   |               |            xfs_file_buffered_aio_read [xfs]() {   
 1)  -40173   |               |              xfs_ilock [xfs]() {   
 1)  -40173   |               |                down_read() {   
 1)  -40173   |               |                  _cond_resched() {   
 1)  -40173   |   0.040 us    |                    rcu_all_qs();   
 1)  -40173   |   0.362 us    |                  } /* _cond_resched */   
 1)  -40173   |   0.686 us    |                } /* down_read */   
 1)  -40173   |   1.042 us    |              } /* xfs_ilock [xfs] */   
 1)  -40173   |               |              generic_file_read_iter() {   
 1)  -40173   |               |                generic_file_buffered_read() {   
 1)  -40173   |               |                  _cond_resched() {   
 1)  -40173   |   0.041 us    |                    rcu_all_qs();   
 1)  -40173   |   0.383 us    |                  } /* _cond_resched */   
 1)  -40173   |               |                  pagecache_get_page() {   
 1)  -40173   |               |                    find_get_entry() {   
 1)  -40173   |   0.041 us    |                      PageHuge();   
 1)  -40173   |   1.151 us    |                    } /* find_get_entry */   
 1)  -40173   |   1.487 us    |                  } /* pagecache_get_page */   
 1)  -40173   |   0.042 us    |                  mark_page_accessed();   
 1)  -40173   |               |                  _cond_resched() {   
 1)  -40173   |   0.042 us    |                    rcu_all_qs();   
 1)  -40173   |   0.364 us    |                  } /* _cond_resched */   
 1)  -40173   |               |                  _cond_resched() {   
 1)  -40173   |   0.042 us    |                    rcu_all_qs();   
 1)  -40173   |   0.359 us    |                  } /* _cond_resched */   
 1)  -40173   |               |                  pagecache_get_page() {   
 1)  -40173   |               |                    find_get_entry() {   
 1)  -40173   |   0.041 us    |                      PageHuge();   
 1)  -40173   |   0.382 us    |                    } /* find_get_entry */   
 1)  -40173   |   0.708 us    |                  } /* pagecache_get_page */   
 1)  -40173   |               |                  touch_atime() {   
 1)  -40173   |               |                    atime_needs_update() {   
 1)  -40173   |               |                      current_time() {   
 1)  -40173   |   0.051 us    |                        ktime_get_coarse_real_ts64();   
 1)  -40173   |   0.044 us    |                        timestamp_truncate();   
 1)  -40173   |   0.707 us    |                      } /* current_time */   
 1)  -40173   |   1.076 us    |                    } /* atime_needs_update */   
 1)  -40173   |   1.399 us    |                  } /* touch_atime */   
 1)  -40173   |   7.264 us    |                } /* generic_file_buffered_read */   
 1)  -40173   |   7.627 us    |              } /* generic_file_read_iter */   
 1)  -40173   |               |              xfs_iunlock [xfs]() {   
 1)  -40173   |   0.041 us    |                up_read();   
 1)  -40173   |   0.389 us    |              } /* xfs_iunlock [xfs] */   
 1)  -40173   | + 10.019 us   |            } /* xfs_file_buffered_aio_read [xfs] */   
 1)  -40173   | + 10.454 us   |          } /* xfs_file_read_iter [xfs] */   
 1)  -40173   | + 10.863 us   |        } /* new_sync_read */   
 1)  -40173   | + 11.227 us   |      } /* __vfs_read */   
 1)  -40173   |   0.045 us    |      __fsnotify_parent();   
 1)  -40173   |   0.048 us    |      fsnotify();   
 1)  -40173   | + 15.714 us   |    } /* vfs_read */   
 1)  -40173   | + 17.359 us   |  } /* ksys_pread64 */   
```   
Depending on the amount of concurrency, you might need to find the correct pread64 call.   
What do we see? At the bottom of the trace we see this pread64 that the this call took 17 microseconds. That is very fast. How can this be so fast?   
There already is much going on however, these are some important functions:   
- security_file_permission: security related functions, normally no latency issues.   
- xfs_ilock: the inode is locked.   
- pagecache_get_page: lookup the page in the page cache.   
- xfs_iulock: the inode is unlocked.   
That's right, there was no physical IO in this case! That also explains the low latency! Obviously, for this to happen the requested pages must be in the cache already, if they are not in the cache, they must be read from disk.   
Join me for the next post about the anatomy of a read call that includes a physical read.   
## 二、内核态调测工具：ftrace(一)-初识   
https://zhuanlan.zhihu.com/p/267925553   
Ftrace是直接内置在内核的跟踪程序。   
Ftrace给Linux提供可以查看追踪内核内部事情的能力，可以更好地查找问题区域并跟踪错误。Ftrace可以跟踪内核崩溃的events，这样可以准确的找到导致内核崩溃的原因，并有助于开发人员正确地解决这个问题。   
如果你看过之前文章：，那么可以理解成ftrace是内核态的strace，用于追踪内核态的调用记录，但是功能比strace强大的多的多。   
### Ftrace使能   
ftrace的API接口位于内核Debugfs文件系统中，挂载在/sys/kernel/debug。当ftrace使能后，会在debugfs中创建tracing目录:   
```   
[~]# cd /sys/kernel/debug/tracing   
[tracing]#   
```   
Ftrace依赖内核开关使能：   
- CONFIG_FUNCTION_TRACER   
- CONFIG_FUNCTION_GRAPH_TRACER   
- CONFIG_STACK_TRACER   
- CONFIG_DYNAMIC_FTRACE   
### Function tracing   
Function tracer是ftrace中比较主要的一个tracer。它主要是gcc编译加入-pg参数后，每个函数调用会调用"mcount()"。   
在使能CONFIG_DYNAMIC_FTRACE后，系统启动后trace_call会转化成NOP以保证100%的性能效率。在编译时候mcount()会被记录，在启动后转换成NOP。NOP对跟踪是无用的，在打开function(或functiongraph) tracer时才会被转化成跟踪调用函数。建议使能CONFIG_DYNAMIC_FTRACE，以增强性能。   
另外需要注意的是，即使转换成NOP不影响性能，但是编译使能-pg参数还是会带来轻微的性能开销。   
1）想要知道哪些tracer是可用的，可以cat available_tracers   
```   
[tracing]# cat available_tracers    
function_graph function sched_switch nop   
```   
2）使能function tracer，只要echo "function"到current_tracer   
```   
[tracing]# echo function > current_tracer   
[tracing]# cat current_tracer   
function   
[tracing]# cat trace | head -10   
    # tracer: function   
    #   
    #           TASK-PID    CPU#    TIMESTAMP  FUNCTION   
    #              | |       |          |         |   
                bash-16939 [000]  6075.461561: mutex_unlock -0     [001]  6075.461561: _spin_unlock_irqrestore -0     [001]  6075.461562: rcu_needs_cpu -0     [001]  6075.461563: mwait_idle  current_tracer    
    [tracing]# cat trace | head -20   
    # tracer: function_graph   
    #   
    # CPU  DURATION                  FUNCTION CALLS   
    # |     |   |                     |   |   |   |   
     1)   1.015 us    |        _spin_lock_irqsave();   
     1)   0.476 us    |        internal_add_timer();   
     1)   0.423 us    |        wake_up_idle_cpu();   
     1)   0.461 us    |        _spin_unlock_irqrestore();   
     1)   4.770 us    |      }   
     1)   5.725 us    |    }   
     1)   0.450 us    |    mutex_unlock();   
     1) + 24.243 us   |  }   
     1)   0.483 us    |  _spin_lock_irq();   
     1)   0.517 us    |  _spin_unlock_irq();   
     1)               |  prepare_to_wait() {   
     1)   0.468 us    |    _spin_lock_irqsave();   
     1)   0.502 us    |    _spin_unlock_irqrestore();   
     1)   2.411 us    |  }   
     1)   0.449 us    |  kthread_should_stop();   
     1)               |  schedule() {   
```   
在DURATION中新增的标记“+”表示调用时间超过10microseconds。如果超过100microseconds，那么就是“!”。   
### Using trace_printk()   
Printk()是调试利器，但是存在一个问题。如果在调用非常频繁的区域使用，比如timer中断处理函数、调度或者网络中，printk()可能导致系统崩溃或创建live lock。有时候也会发现添加printk()后bug不再复现。这些都是printk()引入的一些问题。   
Ftrace引入了新的print形式叫做trace_printk()，他可以像printk()一样调用，也可以运行在任何上下文中（比如中断代码、NMI代码）。Trace_printk()的优点是不会输出到控制台，而是写入到trace buffer中，通过trace文件查看。   