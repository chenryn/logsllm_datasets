which happen only when the core switches back to the normal
world, cannot prevent this attack.
To prevent cross-core cache attacks against ARM TrustZone, we
design a locking mechanism to lock the OCM pages of enclaves
in the cache: when an enclave is invoked, SecTEE preloads its
pages into the cache when they are loaded from DRAM to OCM
and then uses the ARM cache locking mechanism [120] to lock
the corresponding cache lines. Since the caches of the enclave
are locked, manipulating the memory in the normal world cannot
probe or manipulate the cache lines of the enclave. The details of
the locking mechanism are as follows.
(1) When SecTEE assigns a free page set for some enclave, it cleans
and invalidates the page-sized cache set of the page set.
(2) When a page is loaded from DRAM to OCM, SecTEE chooses a
free page-sized cache block from the cache set that corresponds
to the OCM page, uses the preload operation to load the OCM
page into the page-sized cache block, and then locks the cache
block.
(3) When an OCM page is swapped out to DRAM, SecTEE unlocks,
cleans, and invalidates the corresponding page-sized cache
block. However, as ARM only provides a coarse-grained cache
locking mechanism that only locks certain cache ways, SecTEE
needs to re-lock the way which the cache block belongs to if
the cache way still contains any preloaded OCM page.
Take the NXP i.MX6Q platform as an example, we split its L2
cache into 16 page sets, so each page set contains 256KB/4KB/16 =
4 pages. Since the L2 cache has 16 cache ways, each page set can
be preloaded into the cache entirely.
5.2.3 Analysis of Different Timing Caused by Cache Maintenance.
Cache maintenance exhibits different timing: attackers can distin-
guish whether SecTEE cleans the cache of an enclave by probing the
memory locations sharing the same caches with the enclave (see the
probing timing on OP-TEE and SecTEE in Section 6.5.2). However,
cache operations of SecTEE clean all the caches of an enclave (the
target of cache attackers), so attackers do not know which memory
address is accessed by the enclave. Our experimental results of
probing operations on SecTEE (Section 6.5.2) show that attackers
cannot distinguish whether a memory location is accessed by the
enclave. Similar results are presented by our cache attacks on AES
(Section 6.5.3): attackers cannot distinguish which T-table entry is
accessed.
Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom17305.3 Key Hierarchy
be performed by these enclaves, such as importing an attestation
key. PubMRK can be used to verify whether a software component
is approved by the manufacturer, and SecTEE uses PubMRK to
identify privileged enclaves.
5.4 Enclave Identification and Measurement
Before running an enclave, SecTEE needs to recognize the identity
of the enclave and make sure that the enclave is intact and
exactly the one published by the author, so a scheme for enclave
identification and integrity measurement is needed.
SecTEE requires that each enclave author should have a signing
key. After the author has built the software image of the enclave,
he first measures the software image and generates the standard
integrity value of the image. Then he assigns a software ID to the
enclave, and generates a certificate for the standard integrity value
and software ID by signing them with his signing key. Finally, the
author appends his public key and the certificate to the end of the
software image and publishes the enclave.
During runtime, SecTEE maintains an information table storing
critical information of the enclaves running on it. The table stores
the enclave ID, integrity, and a bool flag indicating whether the
enclave is privileged. The enclave ID is composed of the public part
of the author’s signing key and the software ID assigned by the
author, and the bool flag is set by comparing the public part of the
author’s signing key with the MPK in the SoC. SecTEE takes the
following steps to load an enclave. First, it uses the public key of
the author to verify the certificate of the enclave, and only when
the verification succeeds, it decodes the certificate and extracts
the software image, software ID, and standard integrity value of
the enclave. Second, it measures the software image and verifies
the measurement result using the standard integrity. Third, if the
integrity verification passes, SecTEE loads the software image into
the enclave address space. Finally, SecTEE allocates and fills an
entry of the information table for the enclave.
5.5 Remote Attestation
Intel SGX implements the remote attestation mechanism as a
privileged Quoting Enclave. As it is impossible for enclaves to
share sensitive pages in SGX, a prover enclave is unable to
communicate with the Quoting Enclave. SGX solves this problem
with a local attestation mechanism, which is implemented as
an enclave instruction EREPORT. The EREPORT generates an
attestation report which can be transferred to the Quoting Enclave
via the host application, and the Quoting Enclave leverages the
report to generate the real remote attestation report. In SecTEE,
as each enclave can perform remote attestation by invoking the
corresponding system call, the local attestation mechanism is
unnecessary.
SecTEE implements the remote attestation mechanism in kernel,
and system calls which can be used to request and import attestation
keys and perform remote attestation are exposed to enclaves
(the syscall_request_AK, syscall_seal_AK, syscall_import_-
AK, and syscall_remote_attestation system calls listed in Table
1). Attestation keys are critical for secure enclave architectures
because they are used to attest the trustworthiness of the platform
and all enclaves. So it is reasonable to perform the operations of
Figure 6: Key Hierarchy of SecTEE
The key hierarchy of SecTEE (Figure 6) is based on three
hardware keys: device root key (DRK), device sealing key (DSK),
and the public key of the manufacturer (PubMRK). All the three
keys are generated during manufacture time. DRK and DSK should
be stored in the secure hardware of the device, such as Battery-
backed RAM (BBRAM) or eFuses. PubMRK is required to be tamper-
resistant only, so it can be hard-coded into the ROM.
DRK is an asymmetric key (PubDRK, PrivDRK) and unique to
devices. During the manufacturing process in the factory, the device
generates DRK and applies for a certificate from the manufacturer;
after receiving the request, the manufacturer signs the public part of
DRK (PubDRK) with its signing key PrivMRK, produces a certificate
CERT DRK, and stores CERT DRK in the non-volatile memory of the
device, such as flash. CERT DRK and DRK will be used to prove to
remote parties that the device is a genuine trusted device. DRK is
only accessible by specially privileged software within the secure
world, i.e., the TEE OS.
DSK is a device-unique symmetric key used to protect device-
related sensitive data, such as attestation keys. As the key is
device-unique, data encrypted by it is bound to the device and
not accessible to other devices.
We refer to the enclaves provided by the manufacturer as
privileged enclaves, and there are some operations that only can
PubMRKPrivMRKManufacturer Root Key (MRK)PubDRKPrivDRKSignCertificateVerifierTamper-Resistance HardwareDRKDSKPubMRKROMAttestation KeyProof of DRK OwnershipSignCertificateEncryptedAttestation Key Attestation Key CertificateRootCertificateAK ServiceManu Root CertificateTrustMeasurementAttestation DataAttestation SignatureSign EncryptDRK CertificateDeviceNon-volatile MemoryPrivilegedEnclavesVerifyTrustSession 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1731The kernel receives report_data that the invoking enclave wants
to attest, and signs report_data together with Measurement (the in-
tegrity value of the invoking enclave stored in kernel), with the attes-
tation key AK: attest_sig = Sign(PrivAK, report_data||Measurement).
After receiving attest_sig from the kernel, the invoking enclave
sends attest_sig, PubAK and AK’s certificate CertAK to the verifier.
The verifier first validates the attestation key using CertAK, and
then verifies the attest_sig using PubAK. After the verification,
the verifier ensures that the integrity value of the enclave that
communicates with him is Measurement.
5.6 Data Sealing/Unsealing
Each enclave can use the sealing/unsealing system calls to bind
sensitive data to it and ensure that only enclaves with the same in-
tegrity state can use the data. When an enclave, denoted by ˆA, wants
to seal a piece of data data, it invokes the system call syscall_seal.
The kernel first derives a sealing key from the DSK and the
= HKDF(DSK, Measurement ˆA, klen), where
integrity value of ˆA: K ˆA
HKDF is an HMAC-based key derivation function whose output
length is klen, and Measurement ˆA is the measurement result of
ˆA stored in the kernel; then the kernel encrypts data using K ˆA:
ciphertext = Enc(K ˆA, data), and returns ciphertext to ˆA. When the
kernel receives the system call syscall_unseal, it first derives the
= HKDF(DSK, Measurement ˆA, klen), then uses K ˆA
sealing key K ˆA
to unseal ciphertext: data = Dec(K ˆA, ciphertext), and finally returns
data to ˆA.
The key used for sealing and unsealing operations is derived from
the device-unique key DSK and the measurement of the enclave,
so other devices and enclaves with different integrity values are
unable to derive the sealing key, and thus they are unable to obtain
the sealed data.
5.7 Secrets Provisioning
A remote data owner, denoted by ˆD, can leverage the secrets
provisioning mechanism to provision sensitive data to an enclave
(denoted by ˆE) whose integrity state he can validate. The secrets
provisioning mechanism can be seen as a combination of the SIGMA
authenticated key exchange protocol [57] and the remote attestation
mechanism. 1○ the data owner ˆD generates a DH key A = ga and
sends the public key A to the enclave ˆE; 2○ the enclave invokes the
system call syscall_provision which transfers A to the kernel;
3○ the kernel generates a DH key B = gb, performs remote attes-
tation on A, B, and the measurement of the enclave Measurement:
SigAK = Sign(PrivAK, A||B||Measurement), computes a shared se-
cret sk = gab, and returns B, SigAK, and sk to the enclave; 4○ the en-
clave derives a session key ks = HKDF(sk, “session key”, klen) and a
MAC key km = HKDF(sk, “mac key”, klen), computes MACkm(ˆE),
and sends B, ˆE, SigAK, MACkm(ˆE), PubAK, and CertAK to the
data owner; 5○ the data owner validates the attestation signature
SigAK, and after the validation, he computes a shared secret
sk = gab, derives a session key ks = HKDF(sk, “session key”, klen)
and a MAC key km = HKDF(sk, “mac key”, klen), and uses km to
verify MACkm(ˆE); 6○ the data owner signs A and B with its signature
key PrivDO: SigDO = Sign(PrivDO, A||B), and sends ˆD, SigDO, its
certificate CertDO, and MACkm( ˆD) to the enclave; 7○ the enclave
Figure 7: The Workflow of Quoting Enclave
requesting and importing an attestation key by trusted software,
such as software components approved by the manufacturer. To
this purpose, we implement a privileged Quoting Enclave to request
and import attestation keys, and other enclaves are forbidden to
perform these operations.
Quoting Enclave. The Quoting Enclave is a privileged enclave
published by the manufacturer. It is responsible for applying for
certificates for SecTEE’s attestation keys. The workflow of the
Quoting Enclave is as follows (Figure 7).
(1) If the device has no attestation keys, the Quoting Enclave
invokes syscall_request_AK to request the kernel to generate
an attestation key AK = (PubAK, PrivAK). After generating
AK, the kernel signs PubAK with DRK, and returns the
signature SigDRK and PubAK to the Quoting Enclave. SigDRK
is used to prove AK is generated in a trusted device.
(2) The Quoting Enclave sends the PubAK, SigDRK, and the cer-
tificate of DRK (CertDRK) to the AK service, which verifies
SigDRK. If the verification succeeds, the AK service issues a
certificate CertAK for AK and sends CertAK to the Quoting
Enclave.
(3) The Quoting Enclave invokes syscall_seal_AK, which sends
a bool value flag indicating whether the AK service issues a
certificate for AK. If flag = true, the kernel sets AK as its
attestation key, seals AK using DSK, and returns the sealed
attestation key SealedAK to the Quoting Enclave. The Quoting
Enclave saves SealedAK in the non-volatile memory.
(4) When the device is rebooted, the Quoting Enclave can import
AK to the kernel by invoking syscall_import_AK. The kernel
verifies the SigDRK and unseals the SealedAK with DSK to
obtain AK.
One step is not described in the above workflow: when the
kernel is invoked by syscall_request_AK, syscall_seal_AK, or
syscall_import_AK, it verifies whether the public key of the
invoking enclave is MRK, and only after the verification succeeds,
the kernel runs corresponding services. This verification is used to
ensure that only privileged enclaves can manage attestation keys.
Remote Attestation. Each enclave can perform remote attes-
tation by invoking the system call syscall_remote_attestation.
SecTEE Kernelsyscall_request_AK()Quoting EnclaveAK Service(PubAK, SigDRK,CertDRK)(PubAK, SigDRK)syscall_seal_AK(flag)SealedAKCertAKsyscall_import_AK(SealedAK, SigDRK)AK = (PubAK, PrivAK);SigDRK =  Sign(PrivDRK, PubAK)Check flag ?= true;SealedAK = Enc(DSK, AK)Verify(PrivDRK, SigDRK);AK = Dec(DSK,SealedAK)Store  SealedAK for later usageVerify SigDRK;Issue a Cert CertAK for AKDevice RebootSession 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1732verifies SigDO and MACkm( ˆD), and then the data owner and enclave
can transfer sensitive data to each other in the secure channel
established by ks.
5.8 Enclave Management
Figure 8 illustrates the life cycle of an enclave and the enclave
management functions that trigger transitions of the enclave states.
Only three of the enclave management functions — functions used
to open, invoke, and close enclaves — expose their interfaces to the
normal world. To keep compliant with GP TEE Client API specifica-
tion [29], the three interfaces are wrapped as TEEC_OpenSession,
TEEC_InvokeCommand, and TEEC_CloseSession (interfaces in the
rectangles of Figure 8). All the other management functions do not
expose interfaces to the normal world.
Figure 8: The Life Cycle of an Encalve
Unlike Intel SGX, which exposes all enclave management
instructions to host software, SecTEE only exposes three basic
management interfaces to host software, and most events that
trigger enclave management functions are captured and addressed
by the TEE OS directly. This kind of design helps SecTEE to resist
memory access based side-channel attacks because it eliminates
the abilities to manage enclaves’ memory and schedule enclaves
from host software, which are two critical ways for malicious hosts
to launch software side-channel attacks against enclaves.
5.9 Other Security Considerations
Denial-of-Service attacks. SecTEE designs a preemptive alloca-
tion scheme (Section 5.2.1) for page sets. So even if a malicious
host application occupies all page sets by loading multiple enclaves,
when a legal application tries to load its enclave, SecTEE will free
the least recently used page set and designate it to the enclave.
Interrupt based high-resolution channels. Like most TEE
systems, SecTEE designates IRQ interrupts to the normal world
and FIQ interrupts to the secure world. To prevent attackers
from leveraging IRQ interrupts to implement high-resolution
channels, such as attacks against SGX [73, 108], SecTEE disables
IRQ interrupts when running in the secure world by masking them.
An attack enclave may implement high-resolution channels based
on the FIQ interrupts, but since all enclaves do not share caches, it
can obtain nothing about cache usage of other enclaves.
6 IMPLEMENTATION AND EVALUATION
We implement a prototype based on OP-TEE v2.4.0 and leverage
the OP-TEE Pager system to provide an SoC-bound execution
environment for enclaves. All the trusted computing features, i.e.,
enclave identification, remote attestation, data sealing/unsealing,