### Table V: Details of Driver Initialization Process

The table below outlines the driver initialization process, including communication with the hardware. It also provides an example of how our framework was used to demonstrate that CVE-2014-9783 is, in fact, a false positive and cannot be triggered, even on a device.

#### CVE-2014-9786
**Description:**
This vulnerability affects the camera actuator sensor driver in Google Nexus 5 and 7 devices. The vulnerability occurs in an IOCTL used to configure the sensor, and it can be triggered by issuing two consecutive IOCTLs. The first IOCTL allocates an array of a user-defined size, and the second parses this array in a loop whose upper bound can be controlled by the attacker. This is a challenging stress test for our system because reaching the vulnerable code requires the driver to maintain a consistent state between the two IOCTLs.

#### CVE-2014-9785
**Description:**
This vulnerability is found in the `qseecom.ko` driver, which enables communication between the Linux kernel and Qualcommâ€™s TrustZone implementation (QSEE), present in many Android devices. The driver issues a Secure Monitor Call to request services inside QSEE, and its functionality depends on TrustZone returning specific values. Dependencies on specific functionality that cannot be evaded without detailed hardware information prevent three other `qseecom.ko` CVEs from being triggered. For the driver to reach vulnerable code, QSEE must return a correct version number. However, even though execution in this driver typically depends on the hardware, this particular vulnerability could be executed and reached in our evasion kernel. The vulnerability arises from the use of the `__copy_from_user()` function, which does not verify the pointer provided by the userspace.

#### CVE-2014-9783
**Description:**
This CVE describes a bug in the camera control interface driver, `msm_cci.ko`. We were unable to cause a crash in our evasion kernel and initially attributed this to our framework. However, after further manual analysis, we determined that the bug cannot be triggered on a real device either. According to the CVE, the bug is due to an unchecked "size" field, which theoretically should cause an out-of-bound memory access. However, `msm_cci.ko` gets the user-provided data from the v4l2 subsystem, which only passes the number of bytes as encoded by the first, `cmd`, argument. We found another bug in the definition of the `cmd` argument, resulting in only 4 bytes (a 32-bit pointer) being copied from the userspace to the kernel space by the v4l2 subsystem. This prevents the malicious payload ("size" field) from ever reaching the IOCTL code.

### Five Known but Unreported Bugs in the MSM Kernel

In our experiments, we identified five bugs that were fixed in the MSM kernel but not reported as CVEs. These bugs are described in more detail below.

#### actuator-crash-1
**Description:**
This bug affects the camera actuator sensor driver, `msm_acutuator.ko`, and is caused by an attacker-controlled upper bound of a loop. The vulnerable code pertains to the MSM kernel commit 212da48 and the `VIDIOC_MSM_ACTUATOR_CFG` ioctl. Specifically, the structure `a_ctrl->region_params` is copied from userspace, and the `step_bound` field of this structure is used as a loop upper bound, leading to a potential crash.

#### actuator-crash-2
**Description:**
This bug also affects the camera actuator driver, `msm_acutuator.ko`, and is caused by an uninitialized function pointer. The vulnerable code pertains to the MSM kernel commit e6edf78 and the `VIDIOC_MSM_ACTUATOR_CFG` ioctl. By fuzzing this driver, we found that the kernel crashes when `a_ctrl->func_tbl` is not initialized before issuing the `CFG_SET_ACTUATOR_INFO` subcommand.

#### diag-crash-1
**Description:**
This bug pertains to `diagchar.ko` and commit 1414d4a. The bug requires issuing two sequential ioctl system calls (`DIAG_IOCTL_SWITCH_LOGGING` and `DIAG_IOCTL_COMMAND_REG`) to switch the driver state, followed by a write system call to trigger a crash. The reason for the crash is a missing check for the length field.

#### diag-crash-2
**Description:**
This bug also pertains to `diagchar.ko` and commit 1414d4a. The bug is caused by directly copying a user pointer instead of using the `copy_from_user` function in the `DIAG_IOCTL_COMMAND_REG` ioctl.

#### isp-crash-1
**Description:**
This bug occurs in the `msm_isp.ko` driver, specifically in commit 83789a7935f9. The `VIDIOC_MSM_VFE_REG_CFG` ioctl is used to write data to the peripheral using `writeb_relaxed`, where the attacker controls both the data written and the offset from the start of the control register. The driver does not check this offset, leading to an arbitrary memory write primitive.

### List of Defconfigs for Automatic Recovery

In this appendix, we list the eight default configurations used to test our structure layout recovery component:

- `msm7627a_defconfig`
- `8226_defconfig, 8610_defconfig, 8960_defconfig`
- `8660_defconfig`
- `8974_defconfig`
- `9615_defconfig, 9625_defconfig`
- All struct device options enabled
- All struct device options disabled
- PM_RUNTIME disabled but DEBUG_SPINLOCK enabled

This structured and detailed presentation should make the information clearer and more professional.