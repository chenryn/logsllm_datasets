token∗ 6=⊥, the user deletes his old token token and replaces it with the new token token∗ (the dsid
does not change between token and token∗). If the old token token had the value v, then the new
token has value v + k.
After earning enough points, the user may want to spend some of them in exchange for some
reward (e.g., spend 100 points to obtain a frying pan). For this, user and the store terminal agree
on a number k ≤ v of points to spend. Then the user reveals his dsid to the store terminal. The
terminal keeps a local database DBlocal of dsid it has already seen (more details later). If dsid is
present in DBlocal (meaning the user is trying to spend a token that has already been spent before),
the terminal rejects the transaction. Otherwise, the store terminal runs Deduct(ispp, pk, k, dsid, sk)
interacting with the user running Spend(ispp, pk, k, dsid, usk, token).
Spend outputs a new token token∗ and a new dsid∗ for the new token (since the old dsid has been
revealed, token∗ needs a new one). The new token holds the remainder amount v − k of points left
after the spend operation. The user updates its current token, dsid, and v with the new values (and
deletes the old values).
Deduct outputs a bit b to the terminal and, if b = 1, a double-spend tag dstag. If b = 0, the
transaction has failed (e.g., the user does not have enough points). In that case, the store terminal
does nothing. If b = 1, the transaction is considered successful and the reward is given to the user.
The terminal stores the transaction data together with dsid and dstag in its local database DBlocal.
This data will be used to handle oﬄine double-spending.
Handling oﬄine double-spending Because the local databases DBlocal of each store are not
necessarily in sync (stores are not required to be always online), users can (potentially) spend the
same token in two oﬄine stores. This is because if the ﬁrst store is oﬄine, it cannot (in time)
communicate to the second store that the token’s dsid has already been spent. This way, the user
may receive rewards for which he does not have suﬃcient points.
To deal with this, an incentive system oﬀers the following mechanism: assume there was a spend
transaction t in which a user spends his token. Associated with t are the token’s id dsid and a tag
dstag (as described above). If there is another spend transactions t× that is associated with the
same dsid and some tag dstag×, then double spending occurred. t× should be considered invalid
and the provider should try to undo all consequences of t×. To undo rewards gained fraudulently
by the user as the result of t×, the provider would ﬁrst run the algorithm Link(ispp, dstag, dstag×),
which outputs (1) the double-spending user’s public key upk, and (2) linking information dslink.
With upk, the provider can identify the user, while dslink serves as publicly veriﬁable proof that the
user has indeed double-spent. This can be veriﬁed by anyone using VrfyDs(ispp, dslink, upk), which
outputs a bit indicating whether or not dslink is a valid proof of double-spending for user upk. With
14
Figure 2: Example DB. Double-struck spend operations are invalid. All dashed lines are added when
t2 is synchronized into DB. The user has double-spent dsid1 (and t0
1 is marked invalid
because of this). When t2 is synchronized into DB, it is immediately marked invalid, dsid3
is revealed to be its successor and as a consequence, t3 is marked invalid and its successor
dsid4 is computed.
this mechanism, the provider can recoup any losses (e.g., through a legal process).
The second consequence of transaction t× is that the user gained a remainder token from it,
which also never should have happened. dslink as computed above can also be used to deal with
this: the incentive system provides the method Trace(ispp, dslink, dstag×) which outputs the dsid
of the remainder token that resulted from t×. This can be iterated: if Trace(ispp, dslink, dstag×)
uncovers dsid0 and dsid0 has also been already spent in transaction t0 with tag dstag0, then
Trace(ispp, dslink, dstag0) will uncover some dsid1, etc.
To be more concrete, we imagine the provider sets up a central database DB. The database is a
directed bipartite graph, which contains (1) one token node dsid for each dsid the provider received,
and (2) one transaction node ti for each spend transaction. Edges establish known consume/produce
relations for transactions: every transaction ti eﬀectively consumes exactly one dsid (which the user
reveals), inducing an edge dsid → ti. If double-spending occurs, Trace may uncover the remainder
token’s dsid∗ produced by ti, in which case the graph would contain an edge ti → dsid∗. Figure 2
depicts an example database DB.
Stores periodically send their observed transactions ti (together with their k, dsid, and dstag)
to the central database. If dsid is not yet in the database, the database simply adds dsid → ti to
the graph. If dsid was already in the database, then it has already been spent in a transaction tj.
ti is marked invalid and Link, Trace are used to ﬁnd ti’s successor dsid∗. If dsid∗ is already in the
database, any transaction descendants of dsid∗ are marked invalid and the process repeats. The
exact algorithm DBsync(k, dsid, dstag,DB) to add a transaction ti to the graph is given in Figure 3.
If desired, the provider can periodically send all or some spent dsids known in DB to the store
terminals so that they can immediately reject future double-spending transactions. This is especially
useful for dsid∗s that were revealed through Trace and have not been spent yet (but we already know
that they will ultimately be revealed as double-spending after the next database synchronization).
6.2 Formal deﬁnition
We now formally deﬁne incentive systems. For this, we deﬁne a set of oracles with shared state that
formally represent the behavior of honest parties in the processes explained above. These oracles
will allow us to the correctness and security deﬁnitions (we will allow an adversary A to query a
selection of these oracles in subsequent security games). For these deﬁnitions, we assume that ispp
has been generated honestly.
15
dsid0t0dsid1t01dsid2t02dsid5t1t2dsid3t3t3dsid4DBsync(k, dsid, dstag,DB):
• Add new spend operation node ti to DB, associate it with k, dstag.
• If dsid is not in DB, add the node dsid and an edge from dsid to ti.
• Otherwise, add the edge from dsid to ti, and:
– If dsid has no (upk, dslink) associated with it, then there exist two outgoing edges from dsid to
j) using the two tags
transactions ti, tj. In this case, compute (upk, dslink) = Link(ispp, dstag0
dstag0
i, dstag0
i, dstag0
j associated with ti and tj, respectively. Associate (upk, dslink) with dsid.
– Mark ti invalid (this triggers the steps below).
• Whenever some node ti with incoming edge from some dsid is marked invalid
– Use (upk, dslink) associated with dsid and dstag associated to ti
to compute dsid∗ =
Trace(ispp, dslink, dstag). Add dsid∗ to the graph (if it does not already exist), associate (upk, dslink)
with dsid∗, and add an edge from ti to dsid∗. If there is an edge from dsid∗ to some tj, mark tj
invalid (if it was not already marked). This triggers this routine again.
Figure 3: DBsync algorithm
Honest users To model honest users, we deﬁne the following oracles:
• Keygen() chooses a new user handle u, generates key pair (upk, usk) ← KeyGen(ispp), and
It outputs
stores for reference (upku, usku, vu, pku, tokenu, dsid u) ← (upk, usk, 0,⊥,⊥,⊥).
u, upk.
• Join(u, pk) given handle u runs (token, dsid) ← Join(ispp, pk, upku, usku). If token =⊥, the
oracle outputs ⊥. Otherwise, it stores pku ← pk, tokenu ← token, and dsid u ← dsid. This
oracle can only be called once for each u. It must be called before any calls to Earn(u,·) and
Spend(u,·).
• Earn(u, k) given handle u and k ∈ N with vu + k ≤ vmax, the oracle runs token∗ ←
Earn(ispp, pku, k, usku, tokenu). If token∗ =⊥, the oracle outputs ⊥. Otherwise, it updates
tokenu ← token∗ and vu ← vu + k.
• Spend(u, k) given handle u and k ∈ N with vu ≥ k, the oracle ﬁrst sends dsid u to its
communication partner and then runs (token∗, dsid∗) ← Spend(ispp, pku, k, dsid u, usku, tokenu).
It updates tokenu ← token∗, dsid u ← dsid∗ and vu ← vu − k. If token∗ =⊥, the oracle outputs
⊥ and all further calls to any oracles concerning u are ignored.1
Honest Provider To model an honest provider, we deﬁne the following oracles:
• IssuerKeyGen() generates (pk, sk) ← IssuerKeyGen(ispp). It stores pk and sk for further use.
It initially sets the set of users U ← ∅ and sets the double-spend database DB to the empty
graph. Furthermore, initially vearned, vspent ← 0. Further calls to this oracle are ignored. This
oracle must be called before any of the other provider-related oracles. The oracle outputs pk.
• Issue(upk) if upk ∈ U, the request is ignored. Otherwise, the oracle runs Issue(ispp, pk, upk, sk)
and adds upk to U.
• Credit(k) for k ∈ N, runs Credit(ispp, pk, k, sk) and sets value vearned ← vearned + k.
1Spending the same token twice would be considered double-spending, even if one of the Spend operations fails. Hence
after a failed Spend operation, the user must not attempt to use her old token.
16
• Deduct(k) for k ∈ N, waits to receive dsid. It then runs algorithm Deduct(ispp, pk, k, dsid,
sk) → (b, dstag). If b = 0, it outputs ⊥. Otherwise, it chooses a fresh spend handle s and stores
(dsid s, dstags, ks) ← (dsid, dstag, k). Then it outputs s and increments vspent ← vspent + k.
• DBsync(s) runs DB0 ← DBsync((dsid s, dstags, ks),DB). Then, it updates DB ← DB0 and
recomputes vinvalid as the sum of values k associated with invalid transactions within DB0.
Syntax and correctness We are now prepared to deﬁne incentive systems and their correctness.
For this, consider an experiment Expcorrect(Πinsy,A, λ), where A is an algorithm. The experiment
ﬁrst runs IssuerKeyGen to receive pk. The adversary A is then given pk and access to the
following oracles (see Section 2 for oracle notation): Keygen(), u 7→ Issue(upku) ↔ Join(u, pk),
(u, k) 7→ Earn(u, k) ↔ Credit(k), (u, k) 7→ Spend(u, k) ↔ Deduct(k), and s 7→ DBsync(s). The
if one of the oracles outputs ⊥ or if DB
experiment outputs fail if something goes wrong, i.e.
contains a transaction marked as invalid. Note that in this experiment, all protocols are followed
honestly and A eﬀectively just chooses a polynomial-length sequence of actions that users or the
provider take.
Deﬁnition 10 (Incentive System). An incentive system Πinsy consists of ppt algorithms Setup,
KeyGen, IssuerKeyGen, Issue, Join, Credit, Earn, Spend, Deduct, Link, VrfyDs, Trace, where Link, VrfyDs,
and Trace are deterministic. It is correct if for all ppt A, there exists a negligible function negl such
that
(cid:5)
Pr[Expcorrect(Πinsy,A, λ) = fail] ≤ negl(λ).
6.3 Security Deﬁnitions of Incentive Systems
With regards to security, an incentive system should protect honest users’ privacy. The provider
wants to be sure that users cannot spend more points than the provider issued. If they do (e.g.,
in oﬄine stores), the provider needs to be able to uncover all illegal transactions and prove the
double-spending user’s guilt. We will now deﬁne these properties formally.
6.3.1 Anonymity
For anonymity, we want that a malicious provider is unable to learn which user belongs to which
earn/spend transaction. In reality, this protects users, for example, from having their shopping
history linked to their identity. Users are not anonymous when registering for the incentive system
(Join) because the provider needs to learn their real identity to identify double-spending users.
However, if users are honest and do not double-spend, the provider should not be able to link a
user’s registration to any other action they do.
More formally, a malicious provider should not be able to distinguish two users running the Earn
or the Spend protocol. We deﬁne this with a game-based approach: we deﬁne two experiments,
Expano-Earn and Expano-Spend, which treat anonymity for the Earn and Spend operation, respectively
(cf. Figure 4). In the ﬁrst phase of the experiments, the adversary A plays the role of a malicious
provider: A publishes some public key pk and interacts with honest users. Note that by design of
the honest user oracles, honest users never double-spend. A then chooses two users u0, u1. The
experiment makes one of the users run Earn (or Spend) with A. A should not be able to distinguish
u0 running Earn (or Spend) from u1 running the protocol.
There are two exceptions to this: First, if u0 has a valid token tokenu0 6=⊥, while u1 does not (e.g.,
because the provider sabotaged an earlier spend operation), then certainly u0 can be distinguished
from u1. Second, if u0 or u1 do not have suﬃciently many points to spend k, or, analogously, if u0
or u1 has too many points to receive k additional points without hitting the vmax limit. Since it is
functionally desired to be able to distinguish users in these cases, the experiment accounts for this.
17
Expano-X
b
(Πinsy,A, λ):
ispp ← Setup(G(1λ))
(pk, st) ← A(ispp)
(u0, u1, k, st) ← AKeygen(),Join(·,pk),Earn(·,·),Spend(·,·)(st)
If ⊥∈ {tokenu0 , tokenu1}, output 0
If X = Earn and vu0 , vu1 ≤ vmax − k
output ˆb ← AEarn(ub,k)(st), where A may only query once
Else if X = Spend and vu0 , vu1 ≥ k
output ˆb ← ASpend(ub,k)(st), where A may only query once
Else
output 0
Figure 4: Anonymity experiments
Expfram-res(Πinsy,A, λ):
ispp ← Setup(G(1λ))
(pk, st) ← A(ispp)
(u, dslink) ← AKeygen(),Join(·,pk),Earn(·,·),Spend(·,·)(st)
If VrfyDs(ispp, dslink, upk u) = 1
output 1
Else output 0
Figure 5: Framing resistance experiment
Deﬁnition 11 (Anonymity). The experiment Expano-X is presented in Fig. 4 and deﬁned for
X ∈ {Earn, Spend}. We say that an incentive system Πinsy is anonymous if for both X ∈ {Earn, Spend}
and for all ppt A it holds that
| Pr[Expano-X
(Π,A, λ) = 1] − Pr[Expano-X
(Π,A, λ) = 1]| ≤ negl(λ)
0
1
for all λ.
(cid:5)