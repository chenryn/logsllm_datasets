$ # Verify that our Docker Engine doesn't have either our new image
$ # nor ubuntu:latest
$ docker images
REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE
$ # Pull the image from our registry container to verify that our registry works
$ docker pull localhost:5000/local-ubuntu-image
Using default tag: latest
latest: Pulling from local-ubuntu-image
Digest: sha256:4b56d10000d71c595e1d4230317b0a18b3c0443b54ac65b9dcd3cac9104dfad2
Status: Downloaded newer image for localhost:5000/local-ubuntu-image:latest
$ # Great! Verify that we have the image.
$ docker images
REPOSITORY                          TAG                 IMAGE ID            CREATED             SIZE
localhost:5000/local-ubuntu-image   latest              8b72bba4485f        23 hours ago        120MB
```
如您所见，使用本地注册表实际上似乎非常容易！这里引入的唯一可能需要一点注册表之外的覆盖的新东西是`--restart=always`，它确保容器在意外退出时自动重启。标记需要将映像与注册表相关联，因此通过执行`docker tag [/] [/]`，我们可以有效地将新标签分配给现有的映像标签，或者我们可以创建新标签。如这个小代码片段所示，如果没有指定，源和目标都可以用默认为`docker.io` (Docker Hub)的可选存储库位置作为前缀。
可悲的是，从个人经验来看，尽管这个例子让事情看起来非常简单，但是注册表的真正部署绝对不容易，因为外观可能具有欺骗性，在使用它时，您需要记住一些事情:
*   如果您使用不安全的注册表，要从不同的机器访问它，您必须将`"insecure-registries" : [":"]`添加到`/etc/docker/daemon.json`到将使用该注册表映像的每个 Docker 引擎。
    *   注意:出于大量安全原因，不建议使用此配置。
*   如果您使用无效的 HTTPS 证书，您还必须在所有客户端上将它标记为不安全的注册表。
    *   也不建议使用这种配置，因为由于可能的传输降级**中间人(MITM)** 攻击，它只比不安全的注册表略好一点
关于注册表，我最后要给你的建议是，根据我的经验，注册表的云提供商后端文档是出了名的持久(我敢说是故意的吗？)不正确。如果注册表拒绝您的设置，我强烈建议您仔细检查源代码，因为设置正确的变量非常不直观。您也可以使用装载的文件来配置注册表，但是如果您不想在集群刚刚启动时构建新的映像，环境变量是一个不错的选择。环境变量是带有“`_`”分段连接名称的全大写名称，并与可用选项的层次结构相匹配:
```
parent
└─ child_option
 └─ some_setting
```
注册表的这个字段将被设置为`-e PARENT_CHILD_OPTION_SOME_SETTING=`。
For a complete list of the available registry options, you can visit [https://github.com/docker/docker-registry/blob/master/config/config_sample.yml](https://github.com/docker/docker-registry/blob/master/config/config_sample.yml) and see which ones you would need to run your registry. As mentioned earlier, I have found the main documentation on [docs.docker.com](https://docs.docker.com/) and a large percentage of documentation on the code repository itself extremely unreliable for configurations, so don't be afraid to read the source code in order to find out what the registry is actually expecting.
为了帮助那些最有可能在`filesystem`之外，也就是`s3`部署带有后备存储的注册表的人，我会给你们留下一个有效的(在撰写本文时)配置:
```
$ docker run -d \
 -p 5000:5000 \
 -v $(pwd)/registry_storage:/var/lib/registry \
             -e REGISTRY_STORAGE=s3 \
             -e REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR=inmemory \
 -e REGISTRY_STORAGE_S3_ACCESSKEY= \
 -e REGISTRY_STORAGE_S3_BUCKET= \
 -e REGISTRY_STORAGE_S3_REGION= \
 -e REGISTRY_STORAGE_S3_SECRETKEY= \
 --restart=always \
 --name registry \
 registry:2
```
```
 --name registry
```
# 底层存储驱动程序
This section may be a bit too advanced for some readers and does not strictly require reading, but in the interest of fully understanding how Docker handles images and what issues you might encounter on large-scale deployments, I would encourage everyone to at least skim through it as the identification of backing-storage driver issues may be of use. Also, be aware that issues mentioned here may not age gracefully as the Docker code base evolves, so check out their website for up-to-date information.
与您对 Docker 守护程序的预期不同，对本地映像层的处理实际上是以非常模块化的方式完成的，因此几乎任何分层文件系统驱动程序都可以插入守护程序。存储驱动程序控制映像在 docker 主机上的存储和检索方式，虽然从客户端的角度来看可能没有任何区别，但每个驱动程序在许多方面都是独特的。
首先，我们将提到的所有可用存储驱动程序都是由 Docker 使用的底层容器化技术提供的，称为`containerd`。尽管对于大多数 Docker 用法来说，知道最后一句话以外的任何东西通常都是多余的，但可以说，这只是 Docker 用作映像处理 API 的底层模块之一。`containerd`为存储和检索映像及其指定的层提供了一个稳定的 API，这样任何构建在其上的软件(如 Docker 和 Kubernetes)都可以不用担心只是将它们捆绑在一起。
You may see references in code and/or documentation about things called graphdrivers, which is pedantically the high-level API that interacts with storage drivers, but in most cases, when it is written, it is used to describe a storage driver that implements the graphdriver API; for example, when a new type of storage driver is talked about, you will often see it referred to as a new graphdriver.
要查看您使用的是哪个支持文件系统，您可以键入`docker info`并查找`Storage Driver`部分:
```
$ docker info
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
```
Warning! Changing the storage driver will, in most cases, remove access to any and all images and layers from your machine that were stored by the old driver, so proceed with care! Also, I believe that by changing the storage driver without manually cleaning images and containers either through CLI and/or by deleting things from `/var/lib/docker/` will leave those images and containers dangling, so make sure to clean things up if you consider these changes.
如果您想将您的存储驱动程序更改为我们将在此讨论的任何选项，您可以编辑(或在缺少时创建)`/etc/docker/daemon.json`并向其中添加以下内容，之后您应该重新启动 docker 服务:
```
{
  "storage-driver": "driver_name"
}
```
如果`daemon.json`不起作用，也可以尝试通过在`DOCKER_OPTS`上增加一个`-s`标志，重新启动服务，来改变`/etc/default/docker`:
```
DOCKER_OPTS="-s driver_name"
```
In general, Docker is transitioning from `/etc/default/docker` (the path dependent on distribution) to `/etc/docker/daemon.json` as its configuration file, so if you see somewhere on the Internet or other documentation that the former file is referenced, see whether you can find the equivalent configuration for `daemon.json` as I believe that it will fully replace the other one at some point in the future (as with all books, probably under a week after this book gets released).
既然我们知道了什么是存储驱动程序以及如何更改它们，那么我们在这里可以使用哪些选项呢？
# 上啊
`aufs`(也称为`unionfs`)是 Docker 最古老但可能也是最成熟、最稳定的分层文件系统。该存储驱动程序通常启动速度快，并且在存储和内存开销方面效率高。如果你的内核支持这个驱动程序，Docker 将默认支持它，但是一般来说，在 Ubuntu 之外，只有安装了`linux-image-extra-$(uname -r)`包，大多数发行版不会将这个驱动程序添加到他们的内核中，也没有这个驱动程序，所以很可能你的机器无法运行它。您可以下载内核源代码，并在`aufs`支持下重新编译，但一般来说，这是一个维护的噩梦，如果不容易获得，您还不如选择不同的存储驱动程序。您可以使用`grep aufs /proc/filesystems`检查您的机器是否启用了`aufs`内核模块。
注意`aufs`驱动程序只能在`ext4`和`xfs`文件系统上使用。
# btrfs
从概念上来说，这些驱动程序比你在`/var/lib/docker`下挂载的实际文件系统要少，而且每一个都有自己的优缺点。一般来说，与其他一些选项相比，它们都有性能影响，并且内存开销较高，但可能会为您提供更简单的管理工具和/或更高密度的存储。由于这些驱动程序目前得到的支持微乎其微，而且我听说过许多仍然影响它们的关键 bug，所以我不建议在生产中使用它们，除非您有非常好的理由这样做。如果系统在`/var/lib/docker`安装了合适的驱动器，并且相关的内核模块可用，Docker 将在`aufs`之后选择这些模块。
请注意，这里的优先顺序并不意味着这两个存储驱动程序比本节中提到的其他驱动程序更理想，而只是说，如果安装了适当(且不常见)文件系统的驱动程序位于预期的 Docker 位置，Docker 将假设这是用户想要的配置。
# 叠加和叠加 2
这些特定的存储驱动程序正慢慢成为 Docker 安装的最爱。它们与`aufs`非常相似，但实现起来更快、更简单。与`aufs`一样，`overlay`和`overlay2`都需要包含并加载内核覆盖模块，一般来说，内核 3.18 及更高版本应该会提供该模块。此外，两者都只能在`ext4`或`xfs`文件系统上运行。`overlay`和`overlay2`的区别在于，新版本有一些改进，这些改进是在内核 4.0 中添加的，以减少`inode`的使用，但旧版本在该领域的记录更长。如果你有任何疑问，`overlay2`几乎在任何情况下都是坚如磐石的选择。
If you have not worked with inodes before, note that they contain the metadata about each individual file on the filesystem and the maximum count allowed is in most cases hardcoded when the filesystem is created. While this hardcoded maximum is fine for most general usages, there are edge cases where you may run out of them, in which case the filesystem will give you errors on any new file creation even though you will have available space to store the file. If you want to learn more about these structures, you can visit [http://www.linfo.org/inode.html](http://www.linfo.org/inode.html) for more information. Both `overlay` and `overlay2` backing storage driver have been known to cause heavy inode usage due to how they handle file copies internally. While `overlay2` is advertised not to have these issues, I have personally run into inode problems numerous times, with large Docker volumes built with default inode maximums. If you ever use these drivers and notice that the disk is full with messages but you still have space on the device, check your inodes for exhaustion with `df -i` to ensure it is not the docker storage that is causing issues.
# 设备映射器
该驱动程序不在文件级设备上工作，而是直接在 Docker 实例所在的块设备上运行。虽然默认设置通常会设置一个环回设备，并且对于本地测试来说基本上没问题，但是这种特定的设置非常不适合生产系统，因为它会在环回设备中创建稀疏文件。对于生产系统，我们鼓励您将其与`direct-lvm`结合使用，但是这种复杂的设置需要一种比`overlay`存储驱动程序特别棘手和慢的配置，所以我通常不会推荐使用它，除非您无法使用`aufs`或`overlay` / `overlay2`。
# 清理 Docker 存储
如果您使用 Docker 映像和容器，您会注意到，一般来说，Docker 会相对快速地消化您给它的任何存储，因此建议不时进行适当的维护，以确保您不会在主机上出现无用的垃圾或耗尽某些存储驱动程序的信息节点。
# 手动清理
首先是使用`docker rm`清理所有已经运行但忘记使用`--rm`的容器:
```
$ docker rm $(docker ps -aq)
86604ed7bb17
7f7178567aba
```
该命令有效地查找所有容器(`docker ps`)，甚至是您停止的容器(`-a`标志)，并且只返回它们的标识(`-q`标志)。这然后被传递给`docker rm`，它将试图一个一个地移除它们。如果有任何容器仍在运行，它会给你一个警告并跳过它们。一般来说，如果您的容器是无状态的或者有一个存储在容器本身之外的状态，这是一件很好的事情。
接下来的事情，虽然可能更具破坏性和更节省空间，是删除你积累的 Docker 映像。如果你的空间问题频繁，手动移除会非常有效。一个很好的经验法则是，任何以``为标签的映像(也称为悬空)通常可以使用`docker rmi`移除，因为在大多数情况下，它们表明该映像被更新版本的`Dockerfile`所取代:
```
$ docker images --filter "dangling=true"
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
                            873473f192c8        7 days ago          129MB
registry                          751f286bc25e        7 weeks ago         33.2MB
$ # Use those image IDs and delete them
$ docker rmi $(docker images -q --filter "dangling=true")
 Deleted: sha256:873473f192c8977716fcf658c1fe0df0429d4faf9c833b7c24ef269cacd140ff
Deleted: sha256:2aee30e0a82b1a6b6b36b93800633da378832d623e215be8b4140e8705c4101f
```
# 自动清理
我们刚刚做的所有事情看起来都很痛苦，很难记住，所以 Docker 最近增加了`docker image prune`来帮助这方面的工作。通过使用`docker image prune`，所有悬空映像将通过一个命令被移除:
```
$ docker image prune 
WARNING! This will remove all dangling images.