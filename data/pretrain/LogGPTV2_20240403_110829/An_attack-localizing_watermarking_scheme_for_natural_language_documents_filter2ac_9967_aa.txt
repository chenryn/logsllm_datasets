title:An attack-localizing watermarking scheme for natural language documents
author:Gaurav Gupta and
Josef Pieprzyk and
Huaxiong Wang
An Attack-localizing Watermarking Scheme for Natural
 Language Documents
Gaurav Gupta
Josef Pieprzyk
Hua Xiong Wang
Centre for Advanced Computing - Algorithms and Cryptography
Department of Computing
Macquarie University
Sydney, NSW 2109, Australia
{ggupta,josef,hwang}@ics.mq.edu.au
ABSTRACT
We present a text watermarking scheme that embeds a bit-
stream watermark Wi in a text document P preserving the
meaning, context, and ﬂow of the document. The docu-
ment is viewed as a set of paragraphs, each paragraph being
a set of sentences. The sequence of paragraphs and sen-
tences used to embed watermark bits is permuted using a
secret key. Then, English language sentence transforma-
tions are used to modify sentence lengths, thus embedding
watermarking bits in the Least Signiﬁcant Bits (LSB) of the
sentences’ cardinalities. The embedding and extracting al-
gorithms are public, while the secrecy and security of the
watermark depends on a secret key K. The probability of
False Positives is extremely small, hence avoiding inciden-
tal occurrences of our watermark in random text documents.
Majority voting provides security against text addition, dele-
tion, and swapping attacks, further reducing the probability
of False Positives. The scheme is secure against the gen-
eral attacks on text watermarks such as reproduction (pho-
tocopying, FAX), reformatting, synonym substitution, text
addition, text deletion, text swapping, paragraph shuﬄing
and collusion attacks.
Keywords
watermarking, permutation, copyright
1.
INTRODUCTION
With the emergence of Internet and electronic communi-
cation, illegal distribution of media has become a cause of
concern for the publishers and legitimate owners. To dis-
suade people from getting involved in such activities, or-
ganizations insert copyright marks in media that they sell.
These marks establish the company’s ownership over the
media in events of disputes. Identiﬁcation of the person in-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’06, March 21-24, 2006, Taipei, Taiwan.
Copyright 2006 ACM 1-59593-272-0/06/0003 ...$5.00.
volved in illegal distribution of copyrighted material is called
ﬁngerprinting. Digital watermarking techniques are used to
accomplish both Copyright Protection and Fingerprinting.
Text documents [1, 6, 5, 7, 8, 11, 12, 13, 14, 18], images [9],
audio [2, 4] and video [10, 16] ﬁles are common media objects
that are watermarked. Schemes have also been proposed to
watermark media like music sheets [15] and numeric sets
[17]. The information that companies want to copyright is
mostly in the form of text documents. Text documents are,
however, the most diﬃcult to watermark because text ma-
nipulations are guided by strict rules in terms of grammar,
syntax, semantics, context-based selection of a word from
a set of synonymous words, etc; while in the case of other
media, there is large amount of redundant information to
manipulate. For example, human visionary system cannot
distinguish between an original image and a watermarked
image with the last few LSBs in certain pixels ﬂipped. Sim-
ilar is the case with audio and video ﬁles. But in text doc-
uments, grammatical rules need to be preserved while mak-
ing any changes. There has been signiﬁcant work done in
format-based text watermarking using inter-word and inter-
space spacing, justiﬁcation, alignment, character height and
width, etc [6, 5, 7, 8, 11, 14, 18]. The common problem
these techniques have is that watermark cannot survive re-
formatting and reproduction attack as they introduce loss
of formatting information in the document. Alternatively,
the attacker can simply re-type the entire document which
would be watermark-free.
Synonym substitution watermarking schemes [12] are re-
silient to the above mentioned trivial attacks but not to
random synonym substitutions made by the attacker. Even
more importantly, words can not always be replaced by their
exact synonyms. Hence, the quality of the documents is de-
preciated by synonym substitution.
1.1 Current scenario
The current focus in text watermarking is on syntactic
watermarking [1, 19] where language syntax structures are
modiﬁed to embed watermarks. Notable progress has been
made in [1], where watermark bits are embedded in sen-
tences using the following transformations -
1. Adjunct movement: Inserting an adjunct (example,
“Usually”, “Generally”, etc) at many of the possible

positions in a sentence.
2. Clefting: Explicit emphasis on the mandatory sub-
ject in the sentence. (example, “We are concerned
with ” to “it is  we are
concerned with”)
3. Passivization: Changing of voice from active to pas-
sive and vice versa. (example “He led me” to “I was
led by him”)
4. Combination of the above.
This scheme has certain drawbacks such as 1) overhead
introduced because of parsing each sentence, numbering the
nodes and creating a hash for each node. 2) requirement of
marker sentences reduces the capacity. 3) not resilient to
multiple sentence transformation attacks.
Table 1 summarizes the central ideas of the current wa-
termarking schemes.
1.2 Outline of the proposed scheme
In the proposed watermarking scheme, the sequence of the
paragraphs and sentences used to embed the watermark is
permuted. This results in eﬀect of attacks getting localized
to a small region and not getting spread across the docu-
ment. Watermark bits are physically embedded by mod-
ifying the sentences’ word counts. Error-correcting codes
and majority voting are used to embed watermark bits at
multiple locations providing increased security against at-
tacks. The watermark contents are signed using private
key of user and publisher which prevents the publisher from
framing an innocent user. The watermark bitstream con-
tains a collusion-secure code (described in detail later) to
identify colluding users.
1.3 Type of adversary
The attacker is assumed to have the capabilities to -
1. Add and/or delete sentences from the document.
2. Swap sentences within the same or between diﬀerent
paragraphs.
3. Make natural language transformations on sentences.
4. Shuﬄe paragraphs in the document.
5. Collude with other users to compare and modify the
document.
1.4 Organization of paper
In Section 2, we discuss the general mathematical model of
the scheme and deﬁnitions used for rest of the paper. In Sec-
tion 3, we propose our scheme, the sequence-permutation,
watermark composition, watermark embedding, extracting
and veriﬁcation step. In Section 4, we discuss these attacks
in greater detail, the probability of False Positives and ca-
pacity analysis. Experimental results are given in Section 5.
Conclusion and future work follow in Section 6.
2. MATHEMATICAL MODEL AND DEFI-
NITIONS
2.1 Mathematical Model
We represent the watermarking scheme as W S, where
W S =
(1)
P =y-paragraph text {p1, p2, . . . , py}
pi=ith paragraph with xi-sentences {si1, si2, . . . , sixi}
sij=jth sentence in ith paragraph
dij number of tokens/words in sij
Wi = {w1, w2, . . . , wn} is the watermark to be inserted
where ∀i, wi ∈ {0, 1}
K = k-bit secret key
Watermark insertion ξ : Wi × P × K → P (w), where P (w)
is watermarked text
Watermark extraction ζ : P (w) × K → We (extracted wa-
termark)
Watermark veriﬁcation ψ : We × Wi → {true/f alse}
2.2 Deﬁnitions
di = |si| gives the number of words in sentence si
di = {bi,1, bi,2, . . . , bi,ki} where bi,j ∈ {0, 1}, ki = log2 di is
the binary representation of di with bi1 as the LSB and so on.
Watermark W = {w1, w2, . . . , wm} where wi is the ith bit
of the watermark.
Lexicographically sorted permutations for a set of n ele-
i gives the ith permutation of
ments are ρn
n elements. n
i,j gives the value of the jth element in ρn
i .
2 , . . . , ρn
n!. ρn
1 , ρn
Majority Voting - ∀i, ai ∈ {0, 1}.
majority(a1, a2, . . . , an) = 1 if |ai = 1| > n
0 otherwise
2
Text document P = {p1, p2, . . . , py} =
{sα1+1, . . . , sα1+x1}, . . . ,{sαy +1, . . . , sαy +xy}
where pi is the ith text paragraph and si is the ith text sen-
tence.
pi = {sαi+1, sαi+2, . . . , sαi+xi}
αi = 0
j=1 xj
if i = 1
if 2 ≤ i ≤ y
|pi| deﬁnes number of sentences it contains.
τ = number of paragraphs in which each watermark bit is
embedded.
i−1
3. PROPOSED SCHEME
In order to limit distortions caused by modiﬁcations made
by the attacker, we permute the sequence of sentences and

Table 1: General ideas of current watermarking schemes
Modiﬁcations made based on watermark bit
Interword spacing
(example - 10-pixels if bit=0; 11-pixels otherwise)
Interline spacing
(example - 10-pixels if bit=0; 11-pixels otherwise)
Abbreviation and Synonym substitution x
(example - “must” if bit=0; “should” otherwise)
(example - “a.m.” if bit=0; “A.M.” otherwise)
Sentence structures
(example - “He led me” if bit=0; “I was led by him” otherwise)
Scheme
[6, 7, 14, 18]
[6, 14, 18]
[12]
[1]
paragraphs used to embed the watermark. It needs to be em-
phasized that sentences/ paragraphs are not physically per-
muted but only the sequence in which they will be “picked”
to embed the watermark is permuted. Embedding each wa-
termark bit in multiple paragraphs (say µ) results in any
µ
2 + 1 unmodiﬁed bits leading to successful recovery of the
watermark.
3.1 Sequence permutation
In the current implementation, we use AES outputs to
generate permutations that results in higher cryptographic
security and more importantly introduces an “uncertainty
eﬀect” that is described in Section 4. With AES, the key
size k ∈ {128, 192, 256}. However, one can use any other
method to generate permutations.
1. The set of paragraph indices {1, 2, . . . , y} is sorted in
ascending order of the number of sentences they con-
tain to G = {g1, g2, . . . , gy} such that |pgi| ≤ |pgj|, i  0 then
i (mod(x!));
j
(x−1)!;
s = 
j = j%(x − 1)!;
newindex[q] = oldindex[s];
for l = s; l ≤ x − 1; l = l + 1 do
oldindex[l] = oldindex[l + 1];
end
q = q + 1;
x = x − 1;
end
Algorithm 1: Sentence sequence generation: Generating
th permutation from a lexicographically sorted set of per-
xi
mutation
As an illustration, let a document contain 5 paragraphs
{a, b, c, d, e} with 7, 8, 5, 3, and 6 sentences respectively.
Let the new paragraph sequence be {4, 1, 2, 5, 3} and the
new sentence sequence be {2, 1, 3} for paragraph d (which
is now in ﬁrst position), {5, 3, 7, 2, 4, 1, 6} for paragraph a,
{8, 1, 4, 2, 3, 7, 5, 6} for paragraph b, {3, 4, 6, 2, 5, 1} for
paragraph e, and {1, 4, 3, 2, 5} for paragraph c. This means
that the sequence of paragraphs used to embed watermark
will be paragraph d, then paragraph a, b, e and ﬁnally c.
While using d (which contains 3 sentences) the sequence of
sentences used for watermark embedding will be sentence 2,
sentence 1 and ﬁnally sentence 3; and so on for sentences in
other paragraphs.
For generating a permutation of a set containing y ele-
ments, the ﬁrst element can be chosen in y ways, the second
in (y − 1) ways and so on, and the total combinations (with
repetitions) are yy, hence, the probability of getting a per-
mutation when choosing elements with repetitions is given
be the following equation:
P (θi = θj ,∀i,∀j, i = j) = (
y!
yy )
(2)
Results of the experiments conducted to generate permu-
tations using AES-128 conﬁrm the results. Table 3 provides
the comparison of empirical results with theoretical values.