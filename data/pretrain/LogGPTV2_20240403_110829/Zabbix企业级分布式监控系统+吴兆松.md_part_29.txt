### 优化后的文本

#### 图9-47
**项目**
- `web_site_code_status:web.site.codeon {=SITESelectSelect prototype`

**功能**
- 最近的（最新的）T值不是N
- 最后一个T值：200
- 时间间隔：120秒

#### 图9-48
**名称**
- `web.site.code{=SITENAME} is not 200`

**表达式**
- 添加
- 多个问题事件生成

**描述**
- URL
- 严重性：未分类
- 平均高 [启用]

#### 图9-49
- 233
- ---
- ## 第250页
- Zabbix企业级分布式监控系统
- 设置多梯度告警检测，如图9-50和图9-51所示。

**名称**
- `web.site.code{#SITENAME} is not 200`
- 添加
- `web_site_code_status:web.site.code[{=SITENAME}].last(0) != 200`
- 表达式构造器
- 多个问题事件生成
- 描述
- URL
- 严重性：未分类/信息
- 启用
- 保存/取消

#### 图9-50
- 严重性名称

#### 图9-51
- 设置不同周期的告警：3分钟、10分钟、15分钟三种不同故障级别的告警，如图9-52所示。

**严重性**
- 表达式
- 警告
  - `{web site code status:web.site.code[{=SITENAME}].last(=3,600)} != 200 & web.site.code{=SITENAME} in 10 minute is not 200`
- 平均
  - `{web site code status:web.site.code[{=SITENAME}].last(=3,900)} != 200 & web.site.code{=SITENAME} in 15 minute is not 200`
- 信息
  - `web.site.code{=SITENAME} is not 200`

#### 图9-52
- 添加图形，如图9-53所示。
- **图形原型 (0)**
- 严重性名称
- 表达式
  - `(web site code status:web.site.code.last(=3,600)) != 200`
  - 警告
    - `{web site code status:web.site.code[{=SITENAME}].last(=3,900)} != 200 & web.site.code{=SITENAME} in 15 minute is not 200`
  - 信息
    - `web.site.code{=SITENAME} is not 200`

#### 图9-53
- 234
- ---
- ## 第251页
- 第9章
- Zabbix与自动化运维
- 单击图9-53中的“Graph prototypes”，出现如图9-54所示的界面。

**图形预览**
- 名称：`web.site.code on{=SITENAME}`
- 宽度：200
- 高度：200
- 图形类型：正常
- 显示图例
- 工作时间
- 显示触发器
- 百分位线（左侧）
- 百分位线（右侧）
- 计算
- Y轴最大值：计算
- 项目
- 名称
- 绘制样式
- 添加
- 添加原型
- 保存

#### 图9-54
- 继续添加配置图形，如图9-55和图9-56所示。

**键**
- 名称：`web.site.code on{=SITENAME}`
- 宽度：900
- 高度：200
- 图形类型：正常
- 显示图例
- 显示工作时间
- 显示触发器
- 百分位线（左侧）
- 百分位线（右侧）
- 计算
- Y轴最大值：计算
- 项目
- 保存

#### 图9-55
- 名称：`web site code on{=SITENAME}`
- 宽度：900
- 高度：200
- 显示图例
- 百分位线（左侧）
- 百分位线（右侧）
- 计算
- Y轴最大值：计算
- 项目
- 名称
- 函数
- 绘制样式
- 虚线
- 颜色：CB0000
- 添加
- 添加原型

#### 图9-56
- 235
- ---
- ## 第252页
- Zabbix企业级分布式监控系统
- 模板创建成功，如图9-57所示。

**web site code status**
- 应用程序 (1)
- 项目 (0)
- 触发器 (0)
- 图形 (0)
- 屏幕 (0)
- 发现 (1)

#### 图9-57
- 单击图9-57中的“Discover (1)”，出现如图9-58的界面。
- 添加模板到主机，本例选择的主机是Zabbix-Server，如图9-59、图9-60所示。

**发现规则**
- 显示1至1条记录
- 名称
- 项目
- 触发器
- 图形
- 键
  - `web.site.discovery`
  - 项目原型 (1)
  - 触发器原型 (3)
  - 图形原型 (1)
- 启用选定项
- 执行

#### 图9-58
- Zabbix
- 触发器原型
- 图形配置
- 主机
- 显示1至1条记录
- 名称
- 应用程序
- 项目
- 触发器
- 图形
- 发现
- 接口
  - `Zabbix server`
  - 应用程序 (11)
  - 项目 (70)
  - 触发器 (43)
  - 图形 (11)
  - 发现 (2)
  - IP地址：127.0.0.1:10050

#### 图9-59
- 组：`web_site`
- 选择

#### 图9-60
- 查看模板，如图9-61所示，已经成功添加了该模板。
- 主机列表
- 主机：`Zabbix server`
- 监控
- 应用程序 (11)
- 项目 (70)
- 触发器 (43)
- 图形 (11)
- 发现 (2)
- 主机模板
- 宏
- 主机清单
- 模板应用
  - `Zabbix Server`：解除链接/清除
  - `OS Linux`：解除链接/清除
- 添加
- 保存
- 克隆
- 完全克隆
- 删除
- 取消

#### 图9-61
- 236
- ---
- ## 第253页
- 第9章
- Zabbix与自动化运维
- 大约等30秒后，就可以看到刚才添加的三个站点监控，如图9-62和图9-63所示。

**图形**
- 显示1至14条记录
- 主机
- `Zabbix server`
- 应用程序 (12)
- 项目 (52)
- 图形 (14)
- 发现 (3)
- 名称
  - `template OS Linux: CPU load`
  - `template OS Linux: CPU utilization`
  - `mounted file systems: Disk space usage`
  - `monitored system history: Swap usage`
  - `web.site`
  - `web.site.discovery: web.site.code on www.weibo.com`
  - `template App Zabbix Server: Zabbix data gathering process, busy%`
  - `template App Zabbix Server: Zabbix internal process, busy%`

#### 图9-62
- 图形：`web.site.code on www.itnihao.com`
- 未选择
- 2013年1月50AM
- 磁盘空间使用量
- 网络流量
- 交换使用量
- `web.site.code on www.b`

#### 图9-63
- 查看图形数据，如图9-64所示。
- 图表仪表板
- 未选择
- 2013年1月50AM
- 2013年2月50AM
- 200 200 200 200

#### 图9-64
- 237
- ---
- ## 第254页
- Zabbix企业级分布式监控系统
- 至此，前面的任务已经完成。如果我们对`web.txt`文件增加URL，新的URL会自动添加到监控。举一反三，同样可以把URL存储到CMDB中，通过网络路径获取需要监控的URL，只需对脚本进行简单修改即可。
- 关于低级别发现（Low-level discovery）的更多信息，请读者参考以下网址中的内容：
  - `https://www.zabbix.com/documentation/2.2/manual/discovery/low_level_discovery`

#### 9.5 Zabbix与自动化配置管理工具SaltStack
- 在实际的生产环境中，会对Zabbix进行大规模的部署、运维和管理。此时，一套集中的配置管理工具是必需的。自动化部署软件包、管理配置文件等开源工具有Chef、Puppet、SaltStack等。本节只介绍SaltStack的安装和配置，其他工具与其类似。

**1. 用SaltStack配置管理Zabbix**
- SaltStack是一个管理配置工具，其作用是为系统管理人员提供标准化的配置管理和命令执行。架构为C/S（Master/Slave，服务器/客户端）或C/P/S（Master/Proxy/Slave，服务器/代理/客户端）。通信采用证书认证方式，开发语言为Python，提供API，二次开发较容易，可以运行在多种平台上。其官方网址为`http://www.saltstack.com`。中国SaltStack用户组由@绿小小肥建立，网址为`http://www.saltstack.cn`。绿肥是SaltStack在中国地区的布道者，对推进SaltStack在中国地区的发展和在企业中的自动化运维有极大的促进作用。
- 注意，一般采用自动化运维工具进行的配置管理，其软件安装都应该采用标准化安装，如RPM包安装，需要有软件仓库。因此，前提是将Zabbix放于指定的软件仓库中，定制RPM包，相关内容可参考第15章。

**2. 安装salt-master**
```bash
shell# yum install epel-release-6-8.noarch.rpm
shell# yum install salt-master
```
- 安装所需的依赖包如图9-65所示。
- 正在调用：
  - `2014.1.0-1.el6`
- 需要依赖：
  - `PyYAML.x86_64`
  - `zeromq.x86_64`

#### 图9-65
- 238
- ---
- ## 第255页
- 第9章
- Zabbix与自动化运维
- 启动服务
```bash
shell# service salt-master start
shell# chkconfig salt-master on
```

**3. 安装salt-minion**
```bash
shell# yum install salt-minion
```
- 配置salt-minion
```bash
shell# vim /etc/salt/minion
master: salt-master.itnihao.com
# master的IP或域名
id: zabbix-agent.itnihao.com
# minion的标识
```
- 启动服务
```bash
shell# service salt-minion start
shell# chkconfig salt-minion on
```

**4. 接收客户端密钥申请**
- 在master中配置：查看客户端申请的Key请求，命令为`salt-key -L`，如图9-66所示。
- 接受客户端的Key请求，如图9-67所示。
```bash
[root@zabbix-master zabbix]# salt-key -a zabbix-agent.itnihao.com
The following keys are going to be accepted:
Unaccepted Keys:
zabbix-agent.itnihao.com
Proceed? [n/Y] y
Key for minion zabbix-agent.itnihao.com accepted.
```
- 输入命令`salt-key -a zabbix-agent.itnihao.com`后按y键（如果是批量接受所有Key的请求，可以用命令`salt-key -A`）。

**5. 状态同步文件**
- 状态同步是指将定义好的配置信息同步到客户端主机中，使客户端的资源状态达到目标状态。
- 在salt-master中的配置语句如下：
```bash
shell# mkdir /srv/salt/ # 因salt安装好后无/srv/salt目录，所以建立此文件夹
shell# vim /srv/salt/top.sls
base:
'*':
- zabbix

shell# mkdir /srv/salt/zabbix
shell# vim /srv/salt/zabbix/init.sls
zabbix-agent:
service:
- running
watch:
- file: zabbix_agentd.conf
- file: zabbix_agentd.conf.d
pkg:
- installed
require:
- pkg: zabbix-agent
zabbix-agentd:
pkg.installed:
- name: zabbix-agent
- version: '2.2.2-0.el6.zbx'
- skip_verify: True
- skip_suggestions: True
- fromrepo: zabbix
- refresh: True

zabbix_agentd.conf:
file.managed:
- name: /etc/zabbix/zabbix_agentd.conf
- source: salt://zabbix/conf/zabbix_agentd.conf
- mode: 644
- user: zabbix
- group: zabbix
- template: jinja

zabbix_agentd.conf.d:
file.recurse:
- name: /etc/zabbix/zabbix_agentd.conf.d
- source: salt://zabbix/conf/zabbix_agentd.conf.d
- include_empty: True
- user: zabbix
- group: zabbix
- dir_mode: 755
- file_mode: 644

scripts:
file.recurse:
- name: /etc/zabbix/scripts
- source: salt://zabbix/scripts
- include_empty: True
- user: zabbix
- group: zabbix
- dir_mode: 755
- file_mode: 700
```
- 整个代码的结构目录如下：
  - `/srv/salt/`
    - `top.sls`
    - `zabbix/`
      - `conf/`
        - `zabbix_agentd.conf` # zabbix-agent的配置文件
        - `zabbix_agentd.conf.d` # 子配置文件
          - `haproxy_host_status.conf`
          - `haproxy_main_status.conf`
          - `haproxy_status_discovery.conf`
      - `init.sls` # salt的状态配置文件
      - `scripts/`
        - `haproxy_host_status`
        - `haproxy_main_status`
        - `haproxy_status_discovery`

**6. 执行状态同步**
```bash
shell# salt '*' state.highstate
```
- 执行结果如图9-68所示。
- `[root@zabbix-master zabbix]# salt '*' state.highstate`
- `ID: zabbix_agentd.conf`
- `Function: file.managed`
- `Name: /etc/zabbix/zabbix_agentd.conf`
- `Result: True`
- `Comment: File /etc/zabbix/zabbix_agentd.conf is in the correct state`
- `ID: zabbix_agentd.conf.d`
- `Function: file.recurse`
- `Name: /etc/zabbix/zabbix_agentd.conf.d`
- `Result: True`
- `Comment: The directory /etc/zabbix/zabbix_agentd.conf.d is in the correct state`

#### 图9-68
- 239
- ---
- ## 第256页
- Zabbix企业级分布式监控系统