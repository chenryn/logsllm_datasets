and aliasing in C.
If the size of the buffer can be calculated, the function
call is renamed with the new size parameter. Other additional
steps may need to be taken for some function replacements,
e.g., fgets, the replacement option for gets, requires a FILE *
parameter (see Section III-B2 and Table I).
4) Example: Consider
the following example, which
demonstrates a buffer overﬂow from the use of strcpy:
1 char buf[10];
2 char src[100];
3 memset(src,‘c’, 50);
4 src[50] = ‘\0’;
5 char *dst = buf;
6 strcpy(dst, src);
In the code, a one hundred byte buffer (src) and a ten byte
buffer (buf) are instantiated. src is initialized to a ﬁfty byte C
126126126
string (line 3-4). A pointer (dst) is then set to the ﬁrst byte of
buf (line 5). The strcpy function is then called to copy the C
string in src to the buffer pointed by dst (line 6). Fifty bytes
will be written from where dst starts, which will overﬂow buf.
SLR ﬁrst calculates the type of dst, which is a pointer.
It will then ﬁnd the most recent deﬁnition of dst, which is an
assignment to buf (line 5). It will then recursively determine the
size of buf, which results in array type (described in detail in
Algorithm 1, Section III-B). The transformation then changes
the name of the function call to g_strlcpy in Linux systems (or
strlcpy in Mac systems), and adds the sizeof keyword on buf
as the new parameter, as shown below.
...
6 g_strlcpy(dst, src, sizeof(buf));
The sizeof keyword on buf will return 10, which causes
g_strlcpy to only write ten bytes starting from dst. The buffer
overﬂow is removed.
B. Safe Type Replacement (STR)
You have a program in which character pointers are used; the
pointers may be used in an unsafe manner, speciﬁcally in an
arithmetic expression, which could overﬂow a buffer.
Change character pointers to a new data type which
contains the length and the allocated size of the string it
represents. Add explicit checks for buffer bounds before any
buffer operation.
1) Motivation: The lack of bounds checking for char point-
ers in C may lead to overﬂows when they are used in certain
expressions. Pointer arithmetic can be particularly dangerous,
especially with the prevalence of logical ﬂaws such as off-
by-one errors. Standard C compilers cannot detect unsafe or
incorrect usages of character pointers to prevent this error.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:43 UTC from IEEE Xplore.  Restrictions apply. 
2) Precondition: A developer selects a char pointer or array
and invokes the SAFE TYPE REPLACEMENT transformation.
The following preconditions are checked:
• The variable is a char pointer or an array.
• The variable is locally declared. STR cannot be applied
on a global variable, a function parameter, or a member
of a user deﬁned struct. We chose not to apply the trans-
formation on these types of expressions to avoid making
changes in external ﬁles.
• The variable is not used in an unsupported C library
function (most common string functions in C library are
supported).
3) Mechanism: Replace char pointer with a new data struc-
ture. For our implementation, all of the character pointers that
are identiﬁed by the STR are changed to a new data structure
called stralloc, which is deﬁned as follows:
typedef struct stralloc {
char* s;
char* f;
unsigned int len;
unsigned int a;
}
Our implementation of stralloc is a modiﬁed version of
the stralloc data structure from qmail [52]. The data structure
stores a character pointer s, which is equivalent to the char
pointer it replaces; the data structure stores additional infor-
mation about the string represented by the char pointer. f is
always set to point to the base of the original s; so it can
be used for bounds checking even after s has changed. The
variable len represents the length of the string, and a represents
the number of bytes currently used. Upon initialization, the
stralloc library appropriately allocates enough memory for the
string being stored. The stralloc library also contains a number
of functions designed to replace common C library functions.
STR replaces all expressions that use the target pointers
and replaces the use instances following speciﬁc patterns.
Table II gives some examples of some of the most common
replacement patterns STR.
4) Example: Consider this program from SAMATE refer-
ence dataset [48] having buffer over-read problem (CWE-126).
1 char* data;
2 char dest[100];
3 memset(dest, ’C’, 100);
4 data[100] = dest[100];
Since data is not explicitly allocated, the program may
access memory locations to which it should not have access,
potentially causing buffer overﬂow. STR ﬁxes this by trans-
forming char * to a safe data structure.
1 stralloc *data, *dest;
2 stralloc ssss_data={0,0,0}, sss_dest = {0,0,0};
3 data = &ssss_data;
4 dest = &ssss_dest;
5 stralloc_memset(dest,’c’,100);
6 stralloc_dereference_replace_by(data,
stralloc_get_derefenced_char_at(dest,100),100,0);
Lines 1-4 show the declaration of the stralloc variables. Line
5 shows the initialization process. Finally,
the assignment
expression in Line 4 of the original program is replaced by
TABLE II.
TRANSFORMING COMMON EXPRESSIONS


+!&:+:-%)(:( 4!"!+!(!
 !(-%4!+!1*+!,,%)(
+&
+!&:+:-%)(,-:-!'!(-
.7(#+&
&&):-%)()".""!+
+&(!.
)$:(#!(!!,,:+2
+&
7-+:&&) !&:+:-%)(,-:-!'!(-
$%#(!.+&
$%#(!.$$$$+&*+
+&$$$$+&
,,%#(:&&):-!'!'!+/:+%:&!,
+&$(!.
+&(
,,%#('!(-.1*+!,,%)(
,,%#('!(--)(.&&)+/)% 
+& &
,,%#('!(--))-$!+.""!+
+&+&
,,%#('!(--),-+%(#&%-!+:&
+&,%'%-
,,%#('!(--):,-!1*+!,,%)(
+&.7(#'"
)$:(#!(!!,,:+2
+& &
)$:(#!(!!,,:+2
+&+&
7-+:&&)&%+:+2".(-%)(
$%#(!..!"(+&+&-%'%-
$%# ,%'%-
(:&23!+$,+!*&:!0%-$&%+:+2".(-%)(
$%#(!..!"(+&+&.7(#
'"$:)!.7(#'"
+%-$'!-%:( %(:+2.1*+!,,%)(,
(+!'!(-!1*+!,,%)(
+&
+!+!'!(-!1*+!,,%)(
+&
%(:+2!1*+!,,%)(
$:)!+&
7-+:&&)&%+:+2".(-%)(
$%#(!.: .# %+(+&
7-+:&&)&%+:+2".(-%)(
$%#(!.1.# %+(+&
4!*&:!,.!1*+!,,%)(,
+&(
++:2!,,:( +!+!"!+!(!.1*+!,,%)(,
++:2:!,,!1*+!,,%)(
+&
,,%#('!(--):(:++:2!&!'!(-
+&.+/
,,%#(%(#)(!:++:2!&!'!(--)
:()-$!+
+&+&
+!+!"!+!(!:,,%#('!(-,-:-!'!(-
+&.(/
+!+!"!+!(! :,,%#('!(--)%(:+2
!1*+!,,%)(
+&.(/.+/
7-+:&&)&%+:+2".(-%)(
$%#(!.4%1## .1
.7(#(%+&
7-+:&&)&%+:+2".(-%)(
$%#(!.1## .#"(.
+(+&/+/
7-+:&&)&%+:+2".(-%)(
$%#(!.1## .#"(.
+(+&$%#(!.4%
1## .1.7(#(%+&
7-+:&&)&%+:+2".(-%)(
$%#(!.1## .#"(.
+(+&/(/
7-+:&&)&%+:+2".(-%)(
$%#(!.1## .#"(.
+(+&/(//+/
+#.'!(-%(1.(-%)((:&&.1*+!,,%)(
+#.'!(-%((&%+:+2".(-%)(
$%# +&
+#.'!(-%(.,!+ !4(! ".(-%)(
!!+&
1.(-%)( !*!( !(-
+& 
.1:'%(!".(-%)(+!*&:!%",:"!
!!+&$
()( %-%)(:&)+-!+:-%)(7-:-!'!(-
()( %-%)(:&-!+:-%)(,-:-!'!(-
:+&.(/
.1:'%(!:( +!*&:!!1*+!,,%)(
:$%#(!.4%1## .1
.7(#(%+&.(/
another stralloc library function. The ﬁrst argument speciﬁes
the stralloc pointer on the left hand side of the original
expression. The second argument calls another stralloc library
function to get the character represented by the right hand side
of the assignment. The third argument speciﬁes the index of
the character to replace, and the last speciﬁes that the size
of the data pointer should not be changed. STR follows the
replacement patterns (Table II) to automatically make changes.
III. MECHANISM OF THE TRANSFORMATIONS
A. Program Analyses to Support the Transformations
We implemented the program transformations on Open-
Refactory/C [27], a framework for building transformations for
C programs. OpenRefactory/C supports name binding analysis,
127127127
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:01:43 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. Components for Performing Pointer and Alias Analysis
type analysis, control ﬂow analysis, and static call graph
analysis of C programs. We extended OpenRefactory/C to add
reaching deﬁnition analysis, points-to analysis, control and
data dependence analysis, and alias analysis to support the
program transformations. Here we describe the mechanism of
points-to and alias analysis.
Figure 1 shows the main components of points-to analysis.
Our analysis is based on the C++ pointer analysis algorithm
by Hardekopf [28] but is performed at source code level. It is
an intra-procedural, ﬂow-insensitive, inclusion-based analysis.
Our constraint generator component
traverses the abstract
syntax tree of a program and produces a graph that contains
the variables in a C program as nodes; the edges between
nodes indicate that one variable points to another variable.
It does not perform shape analysis on arrays and structures;
it describes them as aggregate nodes. Hardekopf’s algorithm
optimally rewrites the graph based on a few constraints. The
graph rewriting is done using the parallel graph rewriting
engine Galois [51] following Mendez-Lojo’s [42] approach.
Finally, the alias generator component topologically sorts the
points-to graphs and calculates the alias sets. It is possible for
an aggregate node in a points-to graph (e.g., a structure) to
point to itself. These recursive cycles are irrelevant to aliases,
so they are ignored. There should not be any other cycles in
the points-to graph after the graph rewriting. The alias sets are
stored in a hash map in memory for efﬁcient access.
The alias set is used for the reaching deﬁnition analysis.
Reaching deﬁnition and control and data dependence analysis
algorithms follow traditional worklist based algorithms.
B. Mechanism of Safe Library Replacement Transformation
The common ﬁrst step for SLR is to statically determine
the size of the buffer written to. The size of a statically
allocated buffer can be determined by the sizeof function.
On the other hand, the size of a dynamically allocated buffer
can be determined by the malloc_usable_size function. However,
arbitrarily using a function is not allowed, e.g., applying the
malloc_usable_size on a statically allocated buffer will result in
a segmentation fault.
The static analysis to determine the size of the buffer has
to analyze different C expressions that can represent a buffer
(e.g., the destination buffer parameter in strcpy). Algorithm 1
describes the mechanism. If the destination parameter contains
an assignment expression, the size of the right hand side of
the assignment expression is recursively calculated (Lines 2-
4). If the parameter is an array access expression, the size
of the array identiﬁer is calculated using the sizeof function
(Lines 5-7). If the parameter is a binary expression, it will
have either addition or subtraction operation on a buffer with
if B is assignment expression then
else if B is array access expression then
else if B is pointer arithmetic binary expression then
return
else if B is preﬁx expression then
else if B is cast expression then
return GETBUFFERLENGTH(GETEXPRESSION(B))
else if B is identiﬁer expression then
if TYPE(B) is ArrayType then
if GETPREFIXOPERATOR(B) is ++ then
return GETBUFFERLENGTH(B) - 1
else if GETPREFIXOPERATOR(B) is −− then
return GETBUFFERLENGTH(B) + 1
newop ← + for -, or - for +
numPart ← GETNUMERICPART(B)
B ← GETBUFFERPART(B)
return GETBUFFERLENGTH(B) newOp numPart
B ← RHS(B)
return GETBUFFERLENGTH(B)
B ← GETARRAYIDENTIFIER(B)
return SIZEOF(B)
op ← GETOPERATOR(B)
if op is + or - then
Algorithm 1 Calculate length of a buffer expression
1: function GETBUFFERLENGTH(B: expression for destination buffer)
2:
3: