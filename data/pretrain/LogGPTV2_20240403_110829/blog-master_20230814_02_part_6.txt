echo "unix_socket_directories = '., /var/run/postgresql'" >> ./postgresql.auto.conf	  
echo "shared_buffers = 128MB" >> ./postgresql.auto.conf			  
echo "dynamic_shared_memory_type = posix" >> ./postgresql.auto.conf	  
echo "vacuum_cost_delay = 0" >> ./postgresql.auto.conf			  
echo "bgwriter_delay = 20ms" >> ./postgresql.auto.conf			  
echo "bgwriter_lru_maxpages = 500" >> ./postgresql.auto.conf		  
echo "bgwriter_lru_multiplier = 5.0" >> ./postgresql.auto.conf		  
echo "max_parallel_workers_per_gather = 0" >> ./postgresql.auto.conf	  
echo "synchronous_commit = off" >> ./postgresql.auto.conf		  
echo "wal_compression = on" >> ./postgresql.auto.conf		  
echo "wal_writer_delay = 10ms" >> ./postgresql.auto.conf		  
echo "max_wal_size = 1GB " >> ./postgresql.auto.conf  
echo "min_wal_size = 80MB " >> ./postgresql.auto.conf  
echo "random_page_cost = 1.1" >> ./postgresql.auto.conf			  
echo "log_destination = 'csvlog'" >> ./postgresql.auto.conf		  
echo "logging_collector = on" >> ./postgresql.auto.conf		  
echo "log_truncate_on_rotation = on" >> ./postgresql.auto.conf		  
echo "log_timezone = 'Etc/UTC' " >> ./postgresql.auto.conf  
echo "autovacuum = on" >> ./postgresql.auto.conf			  
echo "autovacuum_vacuum_cost_delay = 0ms" >> ./postgresql.auto.conf	  
echo "vacuum_freeze_table_age = 750000000 " >> ./postgresql.auto.conf  
echo "vacuum_multixact_freeze_table_age = 750000000 " >> ./postgresql.auto.conf  
echo "datestyle = 'iso, mdy' " >> ./postgresql.auto.conf  
echo "timezone = 'Etc/UTC' " >> ./postgresql.auto.conf  
echo "lc_messages = 'en_US.UTF-8'" >> ./postgresql.auto.conf			  
echo "lc_monetary = 'en_US.UTF-8'" >> ./postgresql.auto.conf			  
echo "lc_numeric = 'en_US.UTF-8'" >> ./postgresql.auto.conf			  
echo "lc_time = 'en_US.UTF-8'" >> ./postgresql.auto.conf				  
echo "default_text_search_config = 'pg_catalog.english'" >> ./postgresql.auto.conf  
```  
4、准备Dockerfile  
```  
cd ~/pg14  
vi Dockerfile  
```  
```  
FROM --platform=$TARGETPLATFORM debian:11.8  
MAINTAINER digoal zhou "PI:EMAIL"  
ARG TARGETPLATFORM  
ARG BUILDPLATFORM  
RUN echo "I am running on $BUILDPLATFORM, building for $TARGETPLATFORM"  
ENV DEBIAN_FRONTEND=noninteractive TEMP_DIR=/tmp ROOT_HOME=/root PG_HOME=/var/lib/postgresql PG_DATA=/var/lib/postgresql/14/pgdata PGHOME=/usr/lib/postgresql/14  
STOPSIGNAL SIGINT  
COPY --chmod=555 1.sh 2.sh 3.sh 4.sh 5.sh $TEMP_DIR/  
COPY GraphBLAS-3.1.1.tar.gz libduckdb-linux-aarch64.zip duckdb_cli-linux-aarch64.zip cmake-3.27.4.tar.gz mongo-c-driver-1.17.3.tar.gz json-c-0.15-20200726.tar.gz pg_tiktoken--0.0.1.sql pg_tiktoken.control pg_tiktoken.so lantern_extras--0.0.3.sql lantern_extras.control lantern_extras.so lantern-cli onnxruntime-linux-aarch64-1.15.1.tgz node-v14.21.3.tar.gz pg_bm25.control pg_bm25.so pg_bm25--0.5.3.sql pg_search.control pg_search.so pg_search--0.0.0.sql pg_sparse.so pg_sparse.control pg_sparse--0.0.0.sql  pg_task.so pg_task.index.bc pg_task.control pg_task--1.0.sql pg_idkit--0.2.1.sql pg_idkit.control pg_idkit.so pgdd--0.5.2.sql pgdd.control pgdd.so pgroll pgmq.control pgmq--1.1.1.sql pgmq.so pg_later.control pg_later.so pg_later--0.0.14.sql vectorize.control vectorize.so vectorize--0.9.0.sql cmake-3.27.9-linux-aarch64.tar.gz libduckdb-src.zip datasketches-1.7.0.zip halo_14.debian11.aarch64.tar.gz proxysql_2.5.5-debian11_arm64.deb pg_analytics.so pg_analytics.control pg_analytics--0.5.3.sql databend-aarch64.tar.gz plrust--1.1.sql plrust.control plrust.so bendsql-aarch64-unknown-linux-gnu.tar.gz $TEMP_DIR/
RUN mkdir /tmp/pg_task
COPY pg_task /tmp/pg_task
RUN $TEMP_DIR/1.sh  
RUN $TEMP_DIR/2.sh  
RUN $TEMP_DIR/3.sh  
# WORKDIR $TEMP_DIR  
# RUN apt-get install -y libtinfo5 build-essential ninja-build python3  
# RUN git clone --depth 1 -b v3.1.7 https://github.com/plv8/plv8  
# WORKDIR $TEMP_DIR/plv8  
# RUN USE_ICU=1 USE_PGXS=1 make  
# RUN USE_ICU=1 USE_PGXS=1 make install  
#  
# WORKDIR $TEMP_DIR  
# RUN git clone --depth 1 -b apache-arrow-12.0.1 https://github.com/apache/arrow.git  
# WORKDIR $TEMP_DIR/arrow/cpp  
# RUN mkdir build-release  
# WORKDIR $TEMP_DIR/arrow/cpp/build-release  
# RUN cmake -DARROW_DEPENDENCY_SOURCE=BUNDLED ..  
# RUN make -j4  
# RUN make install  
#  
# WORKDIR $TEMP_DIR  
# RUN apt-get install -y libcurl4-openssl-dev uuid-dev libpulse-dev  
# RUN git clone --depth 1 -b 1.9.263 https://github.com/aws/aws-sdk-cpp  
# WORKDIR $TEMP_DIR/aws-sdk-cpp  
# RUN git submodule update --init --recursive --depth 1  
# RUN mkdir build  
# WORKDIR $TEMP_DIR/aws-sdk-cpp/build  
# RUN cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3;core"  
# RUN make -j4  
# RUN make install  
#  
# WORKDIR $TEMP_DIR  
# RUN git clone --depth 1 -b v1.0.0 https://github.com/pgspider/parquet_s3_fdw  
# WORKDIR $TEMP_DIR/parquet_s3_fdw  
# RUN PG_CPPFLAGS="-Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make  
# RUN PG_CPPFLAGS="-std=c++17 -Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make  
# RUN PG_CPPFLAGS="-std=c++17 -Wno-register -D_GLIBCXX_USE_CXX11_ABI=0" USE_PGXS=1 make install  
# RUN echo "/usr/local/lib" >>/etc/ld.so.conf  
# RUN ldconfig  
ENV ORACLE_BASE /usr/lib/postgresql/14/lib  
WORKDIR $ORACLE_BASE  
COPY instantclient_19_19/libclntsh.so.19.1 .  
RUN ln -s libclntsh.so.19.1 libclntsh.so  
RUN mkdir -p oracle/network/admin  
COPY instantclient_19_19 ./oracle  
RUN echo "export LD_LIBRARY_PATH=\$PGHOME/lib/oracle:\$LD_LIBRARY_PATH" >>$PG_HOME/.bash_profile  
RUN echo "export ORACLE_HOME=\$PGHOME/lib/oracle" >>$PG_HOME/.bash_profile  
RUN echo "export TNS_ADMIN=\$ORACLE_HOME/network/admin/" >>$PG_HOME/.bash_profile  
RUN echo "export LD_LIBRARY_PATH=\$PGHOME/lib/oracle:\$LD_LIBRARY_PATH" >>$ROOT_HOME/.bashrc  
RUN echo "export ORACLE_HOME=\$PGHOME/lib/oracle" >>$ROOT_HOME/.bashrc  
RUN echo "export TNS_ADMIN=\$ORACLE_HOME/network/admin/" >>$ROOT_HOME/.bashrc  
RUN . $ROOT_HOME/.bashrc  
RUN echo "/usr/lib/postgresql/14/lib/oracle" >> /etc/ld.so.conf  
RUN echo "/usr/local/lib" >> /etc/ld.so.conf  
RUN echo "/usr/lib/postgresql/14/lib" >> /etc/ld.so.conf  
RUN ldconfig  
WORKDIR $TEMP_DIR  
# RUN apt-get install -y libsqlite3-dev  
RUN git clone --depth 1 https://github.com/ossc-db/dblink_plus  
WORKDIR $TEMP_DIR/dblink_plus  
RUN cp -r /usr/lib/postgresql/14/lib/oracle/sdk/include/* ./  
RUN PG_CFLAGS=-I/usr/lib/postgresql/14/lib/oracle/sdk/include PG_LDFLAGS=-L/usr/lib/postgresql/14/lib/oracle USE_PGXS=1 make  
RUN PG_CFLAGS=-I/usr/lib/postgresql/14/lib/oracle/sdk/include PG_LDFLAGS=-L/usr/lib/postgresql/14/lib/oracle USE_PGXS=1 make install  
# RUN rm -rf $TEMP_DIR/*  
RUN $TEMP_DIR/4.sh  
USER postgres  
RUN $TEMP_DIR/5.sh  
WORKDIR $PG_HOME  
# RUN wget -T 36000 -t 0 --waitretry=5 https://github.com/duckdb/duckdb/releases/download/v0.9.2/duckdb_cli-linux-aarch64.zip  
# RUN curl -Z --connect-timeout 120 -m 36000 --retry 12000 --retry-delay 5 --retry-max-time 1200 -L https://github.com/duckdb/duckdb/releases/download/v0.9.2/duckdb_cli-linux-aarch64.zip -o duckdb_cli-linux-aarch64.zip  
RUN cp $TEMP_DIR/duckdb_cli-linux-aarch64.zip $PG_HOME/  
RUN unzip -d . duckdb_cli-linux-aarch64.zip
RUN cp $TEMP_DIR/pgroll $PG_HOME/ 
USER root  
WORKDIR $ROOT_HOME  
EXPOSE 1921  
EXPOSE 3000 
EXPOSE 8080 
EXPOSE 80
EXPOSE 3306
ENTRYPOINT ["su", "-", "postgres", "-c", "/usr/lib/postgresql/14/bin/postgres -D \"/var/lib/postgresql/14/pgdata\""]  
```  
5、配置ignore文件  
```  
cd ~/pg14  
mkdir logs  
vi .dockerignore  
logs/  
```  
6、制作镜像  
6\.1、确认已开启docker 实验属性: `"experimental": true` .  在docker desktop setting: docker engine中配置.  例如:  
```  
{  
  "builder": {  
    "gc": {  
      "defaultKeepStorage": "20GB",  
      "enabled": true  
    }  
  },  
  "dns": [  
    "8.8.8.8"  
  ],  
  "experimental": true,  
  "registry-mirrors": [  
    "https://xxxxxx.mirror.aliyuncs.com"  
  ]  
}  
```  
下载debian arm64架构基础镜像  
```  
docker pull --platform=linux/arm64 debian:11.8  
```  
确认下载的debian 基础镜像 架构符合预期: arm64  
```  
当前打包镜像的是macbook m2芯片机器:  
  U-4G77XXWF-1921:pg14 digoal$ arch  
  arm64  
下载的debian 基础镜像 架构符合预期: arm64 , 因为我们目标是打包 arm64 的镜像  
  U-4G77XXWF-1921:pg14 digoal$ docker image inspect debian:11.8|grep Archi  
          "Architecture": "arm64",  
```  
6\.2、制作postgresql 14镜像:  
```  
cd ~/pg14  
docker build --platform=linux/arm64 -t="digoal/pg14:with_exts" . 2>&1 | tee ./logs/build.log  
# docker build --platform=linux/arm64 -t="digoal/pg14:with_exts" --no-cache . 2>&1 | tee ./logs/build.log  
```  
仔细检查是否有错误并解决, 例如:  
```  
grep Error ./logs/build.log  
grep -i fail ./logs/build.log  
grep -i fatal ./logs/build.log  
grep ERROR ./logs/build.log
grep "ERR\!" ./logs/build.log
grep "E: " logs/build.log  
grep error ./logs/build.log | grep -v "\-Werror"  
```  
修复问题后, 可以使用build好的镜像启动容器测试.  
```  
docker run -d -it -P --cap-add=SYS_PTRACE --cap-add SYS_ADMIN --privileged=true --name pg --shm-size=1g digoal/pg14:with_exts  
docker exec -ti pg bash  
psql  
```  
7、推送镜像到阿里云个人镜像服务  
参考:  
- [《制作PolarDB | PostgreSQL 开源docker镜像, 集成大量插件方便学习, 并推送到阿里云镜像服务》](../202307/20230710_02.md)  
7\.1、 将镜像推送到Registry  
```  
docker login --username=dig***@126.com registry.cn-hangzhou.aliyuncs.com  
docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:[镜像版本号]  
docker push registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:[镜像版本号]  
```  
根据实际镜像信息替换示例中的`[ImageId]`和`[镜像版本号]`参数, 例如:  
```  
docker tag d9ed34ee3c95 registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts_arm64  
docker push registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts_arm64  
```  
7\.2、 从阿里云Docker public Registry拉取image不需要login.  
```  
docker pull registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts_arm64  
```  
## 集成了哪些插件?  
和这里一样:  
amd64芯片参考:  
- [《AMD64 , 使用Dockerfile+docker build制作PolarDB | PostgreSQL 开源docker镜像, 集成大量插件方便学习, 并推送到阿里云镜像服务》](../202307/20230710_03.md)   
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")  
#### [PolarDB 云原生分布式开源数据库](https://github.com/ApsaraDB "57258f76c37864c6e6d23383d05714ea")  
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、内核开发公开课、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")  
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")  
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")  
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")  
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")