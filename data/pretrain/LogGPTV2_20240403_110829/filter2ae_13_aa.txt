作者：Ricter Z  
作者博客：
#### 0x00 前言
前几天我分析了 Drupal 8.5.0 的 PoC 构造方法，但是 Drupal 7 还是仍未构造出 PoC。今天看到了
[Drupalgeddon2](https://github.com/dreadlocked/Drupalgeddon2/blob/master/drupalgeddon2.rb
"Drupalgeddon2") 支持了 Drupal 7 的 Exploit，稍微分析了下，发现 PoC 构建的十分精妙，用到了诸多 Drupal
本身特性，我构造不出果然还是太菜。
首先，Drupal 7 和 Drupal 8 这两个 PoC 本质上是同一原因触发的，我说的同一个原因并不是像是 `#pre_render` 的
callback 这样，而是都是由于 `form_parent` 导致 Drupal 遍历到用户控制的 `#value`，接着进行 render 的时候导致
RCE。Drupal 8 中的 `element_parents` 十分明显，且从 `$_GET` 中直接获取，所以很容易的能分析出来，而 Drupal 7
中的 `form_parent` 就藏得比较隐晦了。
那么，这个 PoC 用到了 Drupal 中的哪些特性呢？
  * Drupal 的 router 传参
  * Drupal 的 form cache
那么，先从 router 讲起。
#### 0x01 Router
当访问 `file/ajax/name/#default_value/form-xxxx` 的时候，在 `menu.inc` 中，Drupal
是这样处理的：
    function menu_get_item($path = NULL, $router_item = NULL) {
      $router_items = &drupal_static(__FUNCTION__);
      if (!isset($path)) {
        $path = $_GET['q'];
      }
        var_dump($router_items);
      if (isset($router_item)) {
        $router_items[$path] = $router_item;
      }
      if (!isset($router_items[$path])) {
        // Rebuild if we know it's needed, or if the menu masks are missing which
        // occurs rarely, likely due to a race condition of multiple rebuilds.
        if (variable_get('menu_rebuild_needed', FALSE) || !variable_get('menu_masks', array())) {
          if (_menu_check_rebuild()) {
            menu_rebuild();
          }
        }
        $original_map = arg(NULL, $path);
        $parts = array_slice($original_map, 0, MENU_MAX_PARTS);
        $ancestors = menu_get_ancestors($parts);
        $router_item = db_query_range('SELECT * FROM {menu_router} WHERE path IN (:ancestors) ORDER BY fit DESC', 0, 1, array(':ancestors' => $ancestors))->fetchAssoc();
        if ($router_item) {
          // Allow modules to alter the router item before it is translated and
          // checked for access.
          drupal_alter('menu_get_item', $router_item, $path, $original_map);
          $map = _menu_translate($router_item, $original_map);
          $router_item['original_map'] = $original_map;
          if ($map === FALSE) {
            $router_items[$path] = FALSE;
            return FALSE;
          }
看不动？没关系，我来解释下：
  * 从 `$_GET["q"]` 取出 path；
  * 将 path 分割后进行组合，得到一个数组；
  * 数组进入数据库查询；
组合的结果大概是这样：
    0 = file/ajax/name/#default_value/form-xxxx
    1 = file/ajax/name/#default_value/%
    2 = file/ajax/name/%/form-xxxxx
    3 = file/ajax/name/%/%
    4 = file/ajax/%/%/%
    5 = file/%/name/%/form-xxxxx
    ....
    12 = file/%/name
    13 = file/ajax
    14 = file/%
    15 = file
这些是什么呢？实际上这些是 Drupal 的 router，在数据库的 menu_router 表里。这么一串 array 最终和数据库中的
`file/ajax` 相匹配。Drupal 会根据数据库中的 `page_callback` 进行回调，也就是回调到 `file_ajax_upload`
函数。回调的现场：
可以注意到回调的参数为我们 `$_GET["q"]` 剩下的 `name/#default_value/form-xxxx`。
#### 0x02 file_ajax_upload
`file_ajax_upload` 即漏洞触发点了，直接分析代码就好。
    function file_ajax_upload() {
      $form_parents = func_get_args();
      $form_build_id = (string) array_pop($form_parents);
      if (empty($_POST['form_build_id']) || $form_build_id != $_POST['form_build_id']) {
          ...
      }
      list($form, $form_state, $form_id, $form_build_id, $commands) = ajax_get_form();
      if (!$form) {
          ...
      }
      // Get the current element and count the number of files.
      $current_element = $form;
      foreach ($form_parents as $parent) {
        $current_element = $current_element[$parent];
      }
      $current_file_count = isset($current_element['#file_upload_delta']) ? $current_element['#file_upload_delta'] : 0;
      // Process user input. $form and $form_state are modified in the process.
      drupal_process_form($form['#form_id'], $form, $form_state);
      // Retrieve the element to be rendered.
      foreach ($form_parents as $parent) {
        $form = $form[$parent];
      }
      // Add the special Ajax class if a new file was added.
      if (isset($form['#file_upload_delta']) && $current_file_count ';
      }
      $form['#prefix'] .= theme('status_messages');
      $output = drupal_render($form);
这段代码的作用为：
  1. 获取参数的最后一个值作为 `$form_build_id`，验证这个值和 `$_POST["form_build_id"]` 是否相等；
  2. 通过 `$form_build_id` 从`ajax_get_form`获取被缓存的 `$form`；
  3. `foreach ($form_parents as $parent)` 这个循环即和 Drupal 8 中的 `NestedArray::getValue` 异曲同工，将 `$form` 中的值按照 `name/#default_value` 的路径取出；
  4. 最后，`drupal_render($form);` 进行渲染，这是漏洞的最终触发点，不做详细分析。
这是一个获取到最终 $form 的现场：
#### 0x03 Form Cache
现在的问题是怎么得到一个被缓存的 `$form`。首先我们 POST 一个找回密码的请求包，内容如下：
通过分析代码，可以得知，若想 `$form` 被 cache，需要满足以下几个条件：
        if (($form_state['rebuild'] || !$form_state['executed']) && !form_get_errors()) {
          // Form building functions (e.g., _form_builder_handle_input_element())
          // may use $form_state['rebuild'] to determine if they are running in the
          // context of a rebuild, so ensure it is set.
          $form_state['rebuild'] = TRUE;
          $form = drupal_rebuild_form($form_id, $form_state, $form);
        }
`drupal_rebuild_form` 中：
    function drupal_rebuild_form($form_id, &$form_state, $old_form = NULL) {
      $form = drupal_retrieve_form($form_id, $form_state);
      ....
      if (empty($form_state['no_cache'])) {
        form_set_cache($form['#build_id'], $form, $form_state);
      }
在诸多条件中，`($form_state['rebuild'] || !$form_state['executed'])` 是默认就被满足的，唯一的问题是
`form_get_errors()` 会出现问题。由于我们 POST 的 name 需要注入 payload，那么必然会验证失败。
如上图所示，`form_get_errors`返回了一个错误信息。我们跟进`form_set_errors` 看一看，这个函数名字像是设置错误信息的函数。
    function form_set_error($name = NULL, $message = '', $limit_validation_errors = NULL) {
      $form = &drupal_static(__FUNCTION__, array());
      $sections = &drupal_static(__FUNCTION__ . ':limit_validation_errors');
      if (isset($limit_validation_errors)) {
        $sections = $limit_validation_errors;
      }
      if (isset($name) && !isset($form[$name])) {
        $record = TRUE;
        if (isset($sections)) {
          // #limit_validation_errors is an array of "sections" within which user
          // input must be valid. If the element is within one of these sections,
          // the error must be recorded. Otherwise, it can be suppressed.
          // #limit_validation_errors can be an empty array, in which case all
          // errors are suppressed. For example, a "Previous" button might want its
          // submit action to be triggered even if none of the submitted values are
          // valid.
          $record = FALSE;
          foreach ($sections as $section) {
            // Exploding by '][' reconstructs the element's #parents. If the
            // reconstructed #parents begin with the same keys as the specified
            // section, then the element's values are within the part of
            // $form_state['values'] that the clicked button requires to be valid,
            // so errors for this element must be recorded. As the exploded array
            // will all be strings, we need to cast every value of the section
            // array to string.
            if (array_slice(explode('][', $name), 0, count($section)) === array_map('strval', $section)) {
              $record = TRUE;
              break;
            }