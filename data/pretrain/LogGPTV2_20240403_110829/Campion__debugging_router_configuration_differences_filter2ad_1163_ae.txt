detected, the proposed replacement would have caused a severe
outage.
Further, network ùê¥‚Äôs operators also tested Campion on a syn-
thetic case based on a static route replacement which resulted in a
significant outage one year ago. The tags of two static routes were
configured differently due to a misunderstanding of the semantics
of the two vendors. Campion accurately pointed out the difference
between the static routes. In other words, a significant outage could
have been avoided if Campion had been used a year ago.
Scenario 3: Access control in gateway routers. Campion success-
fully detected three ACL differences between gateway routers from
Cisco and Juniper. Table 7 shows Campion‚Äôs output for one of
these differences.2 Campion‚Äôs text localization identified the exact
line in the Cisco ACL where traffic was rejected. The Juniper ACL
equivalent is divided into terms, and Campion‚Äôs text localization
was able to locate which term accepted the traffic. Further, Cam-
pion‚Äôs header localization also identified header information like
the relevant source IP prefix.
Running Time. For each of the above three scenarios, although
the configuration files of each device in network ùê¥ contains thou-
sands of lines, Campion finished its localization task within five
seconds for each pair of routers.
Comparing Campion with an existing tool. While provider
ùê¥ has its own home-grown verification system that has been used
2The IP addresses and ACL name in this figure have been anonymized for confiden-
tiality reasons.
SIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
Tang et al.
Router Pair Route Map Outputted
Differences
Differences
Reported
Confirmed
Pending
Core
Routers
Border
Routers
Export 1
Export 2
Export 3
Export 4
Export 5
Import
4
1
1
1
1
-
(a) SemanticDiff results on route maps
5
1
1
1
2
0
5
1
1
1
1
-
1
0
0
0
0
-
Router Pair
Component
Classes of Errors Differences
Reported
Confirmed
Pending
Core
Routers
Included
Packets
Excluded
Packets
ACL Name
Action
Static Routes
BGP Properties
2
1
(b) StructuralDiff results
1
1
0
0
0
0
Table 8: University Network Results
Router 1 (current)
Router 2 (reference)
srcIP: 9.140.0.3/32
dstIP: 0.0.0.0/0
srcIP: 9.140.0.3/32
dstIP: 0.0.0.0/0
protocol: ICMP
+28 more
VM_FILTER_1
REJECT
VM_FILTER_1
ACCEPT
Text
2299 deny ipv4 9.140.0.0
0.0.1.255 any
set firewall family inet
filter VM_FILTER
term permit_whitelist
Table 7: An example for ACL rules debugging. Router 1 and
Router 2 are Cisco and Juniper routers, respectively.
for 1.5 years, this system can only tell whether the network con-
figuration meets operator intent, but does not provide any error
localization capability. Thus, network ùê¥‚Äôs operators spend consid-
erable time localizing bugs even when the existing tool identifies
bugs in the network. Campion therefore provides a new capabil-
ity that can potentially reduce debugging time considerably for
network ùê¥‚Äôs operators.
Localization efficiency. For the configurations checked, all
localization results were less than five lines of configuration code.
The configuration files tested vary in size from 300 lines to more
than 1000 lines. Of these, the number of lines that are part of an
ACL or route map definition is typically more than 100. Campion
thus drastically reduces the amount of configuration that operators
must search through to debug a difference.
5.2 Differencing in a University Network
The university network consists of approximately 1400 devices,
including border routers that connect to external ISPs, backbone
core routers and building routers.
We ran Campion to compare the policies for a pair of core routers
and a pair of border routers. In each pair, one used Cisco configu-
ration format and the other used Juniper format. We chose these
two pairs because they are the only Cisco-Juniper backup pairs
757
with routing policy. The Cisco configurations and the Juniper core
router configuration contain about 1800 lines of text. The Juniper
border router configuration contains about 3500 lines of text. The
results are shown in Table 8.
We match route maps that are applied to the same BGP neighbor.
In total, there were five pairs of operator-defined export route maps,
and one pair of operator-defined import route maps. The differences
that Campion found are summarized in Table 8(a).
The prefix ranges, communities, and text lines produced by Cam-
pion made it straightforward to identify these discrepancies. The
list of issues that we sent to the operators does not exactly corre-
spond to the raw output of our tool. For example, since Campion
divides sets of advertisements based on which lines process them, it
is possible that a single underlying difference in the configuration
results in multiple lines of outputted differences. In Table 8(a), the
Outputted Difference column reports the number of raw outputs
produced by Campion, whereas the Differences Reported column
reports how many distinct issues we reported to the operators. We
categorize a reported difference as Confirmed if the operator indi-
cated that the identified difference was both an actual difference and
unintentional. The last column indicates the number of reported
differences whose status is unknown at this time.
As shown in the table, the operators confirmed that most of the
differences Campion identified were in fact errors. Based on earlier
snapshots, the differences have been present since at least July 2017.
The route maps shown earlier in Figure 1 illustrate two issues
from a pair of core-router route maps (labeled Export 1 in Table 8(a)).
These were differences in the definitions of a prefix list and a com-
munity set and were confirmed as unintentional discrepancies. For
the difference in the prefix lists, the operator agreed it was a mis-
configuration, but was not sure whether the Cisco or Juniper router
was correct. For the community difference, the operator wrote:
‚ÄúThe community group is an obvious mistake on our part. The Ju-
niper config is wrong. We followed the wrong Juniper doc when
configuring the community group.‚Äù
In addition to the differences shown in Figure 1, the actual route
maps contained different definitions for their third clause, with the
Juniper router performing a match on communities that was not
done in the Cisco router. They also have different redistribution be-
havior for certain addresses. Further, the two routers have different
fall-through behaviors (accept vs. deny) when handling advertise-
ments that fail to match any clause, which causes two additional
behavioral differences. Operators confirmed all but the last of these
issues, which is still pending. When asked about the difference
between the third clauses of each route map, the operator replied:
‚ÄúThe Juniper config is correct and the intent is obvious because of
the English-language syntax. The Cisco config we‚Äôre not sure what
change should be made, if any.‚Äù This demonstrates the challenge for
operators when dealing with multi-vendor backups, and the need
for a tool like Campion to ensure consistency and localize errors.
Export 2, the other core router policy, also had the difference in
prefix lists mentioned previously for Export 1 but did not have any
other issues. The differences in the border router policies similarly
affected the matched prefixes and communities but were of a differ-
ent nature: there were differences in two regular expressions used
to match communities for Export 3 and Export 4. Campion reported
that advertisements with a certain community were accepted in
Campion: Debugging Router Configuration Differences
SIGCOMM ‚Äô21, August 23‚Äì27, 2021, Virtual Event, USA
the Cisco router but not the Juniper router. For Export 5, there was
one prefix that was absent in a prefix list in the Juniper router but
present in the Cisco router list. These were also confirmed as errors
by the operators.
When comparing other properties of the core routers using Cam-
pion‚Äôs StructuralDiff, we found differences in the static route
configuration and the BGP configuration. In the static routes we
found two classes of differences. The first included many static
routes that applied to the same prefix but had different next hops
and different administrative distances. We deemed these as inten-
tional differences, since the next hops had similar addresses, sug-
gesting that their next hop routers were of the same role, and
the administrative distances did not affect the relative priority of
routes. The second class of static route differences included two
static routes that were present in one router but not the other, as
demonstrated in ¬ß 2. These were reported to the operators, and
they said that these were intentionally added as a workaround for
a specific BGP routing issue. The BGP configuration difference was
that certain iBGP neighbors of the Cisco router were missing a
neighbor send-community command to propagates communities,
while Juniper routers send communities by default. The operators
indicated that this configuration difference does not cause a behav-
ioral difference because the core routers do not set communities on
routes.
5.3 False Positives
We distinguish between two types of false positives that Campion
may produce, both of which were exhibited in the results for the
university network. First, there can be intentional differences be-
tween routers. This was the situation for the static routes that were
added in one configuration as a workaround for a specific BGP
routing issue, as well as for the static routes that had differing next
hops. Second, there can be spurious differences due to Campion‚Äôs
modular approach. Specifically, any potential behavioral difference
between corresponding components is reported by Campion, but
these differences may not cause an actual behavioral difference
in the current network, for example because the differences are
shadowed or accounted for by other parts of the configuration. This
was the situation for the iBGP neighbors of one router which were
not configured to send communities.
However, we argue that it is still worthwhile to report both
kinds of false positives. Reporting intentional differences allows
the operator to ensure that all and only expected differences exist
between the two routers. In the case of static routes added as a
workaround, the operator commented, "I just need to find another
way to resolve this," indicating that this difference is intentional but
still not optimal. Reporting spurious differences is valuable because
they represent latent errors that can potentially be "activated" by a
change elsewhere in the network configuration. In the case of the
spurious difference for sending communities, if the core routers
later start to set communities on routes then this difference will
cause an important behavioral difference. Indeed, the operator com-
mented that these kinds of spurious differences would likely be
examined and addressed when the routers are next replaced.
5.4 Scalability
For each of the data center scenarios, Campion finished its local-
ization task within five seconds for each pair of routers. For the
university core and border pairs, the total runtime to compare the
core and border pairs was 3 seconds. When combined with the
parsing of the configurations, the total time was under 10 seconds,
with configuration parsing taking a majority of the time. We addi-
tionally tested the scalability of SemanticDiff for ACLs. We used
Capirca3 to randomly generate nearly equivalent ACLs for Cisco
and Juniper configurations. We introduced 10 differences between
the two ACLs and compared them. When the ACLs were generated
with 1000 rules, SemanticDiff took less than a second. When the
ACLs were generated with 10,000 rules, SemanticDiff took 15
seconds. These tests were done with a 2.2 GHz CPU. Moreover,
Batfish‚Äôs parsing time for the 10,000 case is 13 seconds, which is
comparable to the runtime of SemanticDiff.
6 Related Work
At a high level our work differs from prior work in network verifica-
tion in two ways. First, we target verifying behavioral equivalence
of two router configurations, while prior work typically targets
network-wide reachability properties. Second, we localize identi-
fied errors to both relevant headers and configuration lines; most
prior work simply provides individual concrete counterexamples.
Data Plane Verification Tools: Many tools verify reachabil-
ity properties of a network‚Äôs data plane, including its ACLs and
forwarding tables [2, 15, 17, 18, 20, 21, 32]. Several tools focus
on ACLs [22, 29] and localize errors to ACL lines [14, 15, 17, 29].
Closest to our work, netdiff [9] is a tool for checking data plane
equivalence in networks using a similar symbolic execution ap-
proach, but it focuses on the data plane. Campion extends these
capabilities to perform configuration localization for the control
plane. HeaderLocalize and StructuralDiff have no analogue
in netdiff.