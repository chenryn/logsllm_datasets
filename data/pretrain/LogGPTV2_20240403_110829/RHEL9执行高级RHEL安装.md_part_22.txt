    URL 的 X.509
    证书进行加密。每个加密卷的密钥都作为单独的文件保存。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
[`--luks-version=LUKS_VERSION`{.literal}]{.term}
:   指定应用来加密文件系统的 LUKS 格式版本。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
[`--backuppassphrase`{.literal}]{.term}
:   为每个加密卷添加随机生成的密码短语。将这些密码短语存储在
    `/root`{.literal} 中的单独文件中，使用通过 `--escrowcert`{.literal}
    指定的 X.509 证书进行加密。只有在指定了 `--escrowcert`{.literal}
    时这个选项才有意义。
[`--pbkdf=PBKDF`{.literal}]{.term}
:   为 LUKS keylot 设置基于密码的身份验证(PBKDF)算法。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis}。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
[`--pbkdf-memory=PBKDF_MEMORY`{.literal}]{.term}
:   为 PBKDF 设置内存成本。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis}。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
[`--pbkdf-time=PBKDF_TIME`{.literal}]{.term}
:   设置 PBKDF 密码处理所消耗的毫秒数。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的
    `--iter-time`{.literal}。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义，并且与 `--pbkdf-iterations`{.literal} 相互排斥。
[`--pbkdf-iterations=PBKDF_ITERATIONS`{.literal}]{.term}
:   设定直接迭代的次数，并避免 PBKDF 基准出现。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的
    `--pbkdf-force-iterations`{.literal}。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义，并且与
    `--pbkdf-time`{.literal} 相互排斥。
[`--thinpool`{.literal}]{.term}
:   创建精简池逻辑卷。（使用 `none`{.literal} 挂载点）
[`--metadatasize=size`{.literal}]{.term}
:   指定新精简池设备的元数据大小（单位 MiB）。
[`--chunksize=size`{.literal}]{.term}
:   为新的精简池设备指定块大小（单位 KiB）。
[`--thin`{.literal}]{.term}
:   创建精简逻辑卷。（需要使用 `--poolname`{.literal}）
[`--poolname=name`{.literal}]{.term}
:   指定要在其中创建精简逻辑卷的精简池名称。需要 `--thin`{.literal}
    选项。
[`--profile=name`{.literal}]{.term}
:   指定与精简逻辑卷搭配使用的配置配置集的名称。如果使用，该名称也会包含在给定逻辑卷的元数据中。默认情况下，可用的配置集为
    `default`{.literal} 和 `thin-performance`{.literal}，在
    `/etc/lvm/profile/`{.literal} 目录中定义。有关其他信息，请参见
    `lvm(8)`{.literal} 手册页。
[`--cachepvs=`{.literal}]{.term}
:   用逗号分开的物理卷列表，它应用作这个卷的缓存。
[`--cachemode=`{.literal}]{.term}
:   指定应该使用哪种模式缓存这个逻辑卷 - `writeback`{.literal} 或
    `writethrough`{.literal}。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    有关缓存的逻辑卷及其模式的详情，请参考 `lvmcache(7)`{.literal}
    手册页。
    :::
[`--cachesize=`{.literal}]{.term}
:   附加到逻辑卷的缓存大小，以 MiB 为单位。此选项需要
    `--cachepvs=`{.literal} 选项。
:::
::: itemizedlist
**备注**
-   使用 Kickstart 安装 Red Hat Enterprise Linux
    时，请勿在逻辑卷和卷组名称中使用短划线 (`-`{.literal})
    字符。如果使用这个字符，安装会完成，但 `/dev/mapper/`{.literal}
    目录会列出这些卷和卷组的每个横线都会加倍。例如，名为
    `volgrp-01`{.literal} 的卷组包含一个逻辑卷
    `logvol-01`{.literal}，它将被列为
    `/dev/mapper/volgrp-​01-logvol—​01`{.literal}.
    这个限制只适用于新创建的逻辑卷和卷组名称。如果您使用
    `--noformat`{.literal}
    选项重复使用现有的名称，则不会更改它们的名称。
-   如果您丢失了 LUKS
    密码短语，那么就完全无法访问所有加密的分区及其数据。丢失的密码短语是无法找回的。但是，您可以使用
    `--escrowcert`{.literal} 保存加密密码短语，并使用
    `--backuppassphrase`{.literal} 选项创建加密密码短语备份。
:::
::: itemizedlist
**示例**
-   首先创建分区，然后创建逻辑卷组，然后创建逻辑卷：
    ``` screen
    part pv.01 --size 3000
    volgroup myvg pv.01
    logvol / --vgname=myvg --size=2000 --name=rootvol
    ```
-   首先创建分区，然后创建逻辑卷组，再创建逻辑卷以占据卷组中剩余的 90%
    空间：
    ``` screen
    part pv.01 --size 1 --grow
    volgroup myvg pv.01
    logvol / --vgname=myvg --name=rootvol --percent=90
    ```
:::
::: itemizedlist
**其他资源**
-   [配置和管理逻辑卷](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_and_managing_logical_volumes/index){.link}
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#mount_kickstart-commands-for-handling-storage}mount {.title}
:::
`mount`{.literal} Kickstart
命令是可选的。它为现有块设备分配挂载点，并选择性地将其重新格式化为给定格式。
::: title
**语法**
:::
``` screen
mount [OPTIONS] device mountpoint
```
::: itemizedlist
**必须的选项**
-   `device`{.literal} - 要挂载的块设备。
-   `mountpoint`{.literal} - 挂载 `device`{.literal}
    的位置。它必须是有效的挂载点，如 `/`{.literal} 或
    `/usr`{.literal}，如果设备不可卸载，则为 `none`{.literal} （如
    `swap`{.literal}）。
:::
::: itemizedlist
**可选选项：**
-   `--reformat=`{.literal} - 指定应重新格式化该设备的新格式（如
    `ext4`{.literal}）。
-   `--mkfsoptions=`{.literal} - 指定要传递给
    命令的附加选项，该命令将创建 `--reformat=`{.literal}
    中指定的新文件系统。这里提供的选项列表没有被处理，因此必须使用可直接传递给
    `mkfs`{.literal}
    程序的格式指定。根据具体文件系统，选项列表应该用逗号分开，或使用双引号分开。有关具体详情，请参阅
    `mkfs`{.literal} man page（例如 `mkfs.ext4(8)`{.literal} 或
    `mkfs.xfs(8)`{.literal}）。
-   `--mountoptions=`{.literal} -
    指定自由格式字符串，其中包含挂载文件系统时要使用的选项。字符串将复制到安装的系统上的
    `/etc/fstab`{.literal}
    文件，并使用双引号括起来。有关挂载选项的完整列表，请参见
    `mount(8)`{.literal} 手册页，有关基础知识，请参见
    `fstab(5)`{.literal}。
:::
::: itemizedlist
**备注**
-   与 Kickstart 中的大多数其他存储配置命令不同，`mount`{.literal}
    不需要您在 Kickstart
    文件中描述整个存储配置。您只需要确定系统中存在描述的块设备。但是，如果要使用挂载的所有设备[*创建*]{.emphasis}存储堆栈，则必须使用其他命令，比如
    `part`{.literal} 要这样做。
-   在同一个 Kickstart 文件中，您不能将 `mount`{.literal}
    与其他存储相关的命令，如 `part`{.literal}、`logvol`{.literal} 或
    `autopart`{.literal} 一起使用。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#nvdimm_kickstart-commands-for-handling-storage}nvdimm {.title}
:::
`nvdimm`{.literal} Kickstart
命令是可选的。它对非线性内存模块(NVDIMM)设备执行操作。
::: title
**Syntax**
:::
``` screen
nvdimm action [OPTIONS]
```
::: itemizedlist
**Actions**
-   `reconfigure`{.literal} - 将特定 NVDIMM
    设备重新配置为给定模式。另外，指定的设备被隐式标记为要使用的，因此后续的同一设备
    `nvdimm use`{.literal} 命令就冗余了。这个操作使用以下格式：
    ``` screen
    nvdimm reconfigure [--namespace=NAMESPACE] [--mode=MODE] [--sectorsize=SECTORSIZE]
    ```
    ::: informalexample
    ::: itemizedlist
    -   `--namespace=`{.literal} - 按命名空间的设备规格。例如：
        ``` screen
        nvdimm reconfigure --namespace=namespace0.0 --mode=sector --sectorsize=512
        ```
    -   `--mode=`{.literal} - 模式规格。目前，只有值 `sector`{.literal}
        可用。
    -   `--sectorsize=`{.literal} - 扇区模式的扇区大小。例如：
        ``` screen
        nvdimm reconfigure --namespace=namespace0.0 --mode=sector --sectorsize=512
        ```
        支持的扇区大小为 512 和 4096 字节。
    :::
    :::
-   `use`{.literal} - 将 NVDIMM 设备指定为安装目标。该设备必须已通过
    `nvdimm reconfigure`{.literal}
    命令配置为扇区模式。这个操作使用以下格式：
    ``` screen
    nvdimm use [--namespace=NAMESPACE|--blockdevs=DEVICES]
    ```
    ::: informalexample
    ::: itemizedlist
    -   `--namespace=`{.literal} - 按命名空间指定设备。例如：
        ``` screen
        nvdimm use --namespace=namespace0.0
        ```
    -   `--blockdevs=`{.literal} - 指定与要使用的 NVDIMM
        设备对应的块设备列表。支持星号 `*`{.literal} 通配符。例如：
        ``` screen
        nvdimm use --blockdevs=pmem0s,pmem1s
        nvdimm use --blockdevs=pmem*
        ```
    :::
    :::
:::
::: itemizedlist
**备注**
-   默认情况下，安装程序忽略所有 NVDIMM 设备。您必须使用
    `nvdimm`{.literal} 命令在这些设备中启用安装。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#part-or-partition_kickstart-commands-for-handling-storage}part 或 partition {.title}
:::
需要 `part`{.literal} 或 `partition`{.literal} Kickstart
命令。它在系统上创建一个分区。
::: title
**Syntax**
:::
``` screen
part|partition mntpoint --name=name --device=device --rule=rule [OPTIONS]
```
::: itemizedlist
**选项**
-   [*mntpoint*]{.emphasis} - 挂载分区的位置。该值必须是以下格式之一：
    ::: informalexample
    ::: itemizedlist
    -   `/path`{.literal}
        例如： `/`{.literal}、`/usr`{.literal}、`/home`{.literal}
    -   `swap`{.literal}
        该分区被用作交换空间。
        要自动决定 swap 分区的大小，请使用 `--recommended`{.literal}
        选项：
        ``` screen
        swap --recommended
        ```
        分配的大小将生效，但不会根据您的系统进行精确校准。
        要自动确定 swap
        分区的大小，同时允许系统的额外空间可以休眠，请使用
        `--hibernation`{.literal} 选项：
        ``` screen
        swap --hibernation
        ```
        分配的大小将相当于由 `--recommended`{.literal}
        分配的交换空间加上您系统上的 RAM 量。
    -   `raid.id`{.literal}
        该分区用于软件 RAID（请参阅 `raid`{.literal}）。
    -   `pv.id`{.literal}
        该分区用于 LVM（请参阅 `logvol`{.literal}）。
    -   `biosboot`{.literal}
        该分区将用在 BIOS 引导分区中。在使用 BIOS 的 AMD64 和 Intel 64
        系统中使用 GUID 分区表(GPT)中需要 1 MiB BIOS 引导分区 ;
        引导装载程序将被安装到其中。UEFI 系统中不需要此功能。另请参阅
        `bootloader`{.literal} 命令。
    -   `/boot/efi`{.literal}
        一个 EFI 系统分区。基于 UEFI 的 AMD64、Intel 64 和 64 位 ARM
        上需要 50 MiB EFI 分区。推荐的大小为 200 MiB。它在 BIOS
        系统上并不需要。另请参阅 `bootloader`{.literal} 命令。
    :::
    :::
-   `--size=`{.literal} - 最小分区大小，以 MiB
    为单位。在这里指定一个整数值，如 `500`{.literal} （不要包含单位）。