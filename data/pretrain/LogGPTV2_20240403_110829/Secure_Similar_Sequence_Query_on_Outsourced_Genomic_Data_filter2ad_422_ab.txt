and (cid:4)f (cid:5)α = (cid:4)y(cid:5)α − (cid:4)b(cid:5)α
) and f =Rec((cid:4)f (cid:5) A
,(cid:4)f (cid:5) B
abbreviated as secret sharing or sharing for brevity.
2.2.2 Yao’s Garbled Circuits. Yao’s garbled circuits allow two
parties holding inputs x and y, respectively, to evaluate an arbitrary
function f (x, y) without leaking any information about their inputs
beyond what is implied by the function output [25]. Three simple
circuits will be used in this paper to construct secure protocols. An
ADD circuit takes two integers x and y as inputs and outputs an
integer z, such that z = x + y. A CMP circuit takes x and y as input,
and outputs 1 if x > y and 0 otherwise. An EQ circuit takes x and
y as input, and outputs 1 if x == y and 0 otherwise.
2.2.3 Paillier Cryptosystem with Distributed Decryption. Paillier
cryptosystem was first proposed by [31], which is an additive ho-
momorphic encryption scheme. Hazay et al. adapted the Paillier
cryptosystem to separate private key sk into two shares sk (1), sk (2)
to support distributed decryption [17]. Let Epk (·) and Dsk (·) be the
encryption and decryption function, where public key pk is given
∗
by (N , д) and N is a product of two large primes and д is in Z
N 2 .
Also, let PDecsk (1) (·), PDecsk (2) (·) be the partial decryption function
with partial private key sk (1), sk (2)
. Given a, b ∈ ZN , the Paillier
cryptosystem with distributed decryption exhibits the following
properties:
Distributed Decryption2: a(cid:9) ← PDecsk (1) (Epk (a)) and a ←
PDecsk (2) (a(cid:9)).
Homomorphic Addition: Dsk (Epk (a)·Epk (b) mod N 2) = (a+
b) mod N , Dsk (Epk (a)b
mod N 2) = a · b mod N .
3 PROBLEM OVERVIEW
In this section, we formalize the system model, outline the prob-
lem statement, and describe the security model. For references, a
summary of notations is given in Table 1.
3.1 System Model
As shown in Figure 1, our system model involves two non-colluding
servers, multiple data owners and a set of query users.
(1) Two-Servers: We consider the existence of two non-colluding
cloud servers, denoted by Server A and Server B. Both
servers have the ability to maintain a database contributed by
2The original work presents this process in a different and general form.
Table 1: The Summary of Notations
Notations
(cid:4)x(cid:5)
(cid:4)x(cid:5) A /(cid:4)x(cid:5) B
pk
sk (1)/sk (2)
[x]pk
PDecsk (i ) (·)
Definitions
a pair of secret shares of the value x
i.e., ((cid:4)x(cid:5) A , (cid:4)x(cid:5) B )
the share of x stored in A or B
public key in Paillier
partial private keys in Paillier
Encrypted data x under pk
Partial decryption with sk (i ), i = 1/2
(cid:39)(cid:50)(cid:20)
(cid:39)(cid:50)(cid:21)
(cid:39)(cid:50)(cid:90)
(cid:266)
(cid:48)(cid:88)(cid:79)(cid:87)(cid:76)(cid:83)(cid:79)(cid:72)(cid:3)(cid:39)(cid:68)(cid:87)(cid:68)(cid:3)
(cid:50)(cid:90)(cid:81)(cid:72)(cid:85)(cid:86)
(cid:266)
(cid:54)(cid:72)(cid:70)(cid:88)(cid:85)(cid:72)(cid:3)
(cid:51)(cid:85)(cid:82)(cid:87)(cid:82)(cid:70)(cid:82)(cid:79)(cid:86)
(cid:55)(cid:90)(cid:82) (cid:38)(cid:79)(cid:82)(cid:88)(cid:71)(cid:3)(cid:54)(cid:72)(cid:85)(cid:89)(cid:72)(cid:85)(cid:86)
Figure 1: System Model.
(cid:48)(cid:88)(cid:79)(cid:87)(cid:76)(cid:83)(cid:79)(cid:72)(cid:3)(cid:52)(cid:88)(cid:72)(cid:85)(cid:92)(cid:3)
(cid:56)(cid:86)(cid:72)(cid:85)(cid:86)
multiple data owners. The two servers cooperate to answer
queries from multiple query users in a privacy-preserving
manner.
(2) Data owners: Data are generated or collected by multiple
data owners, they would upload the secret sharing data to
Server A and Server B.
(3) Query users: The goal of query users is to request the two-
servers to perform some queries over the secret sharing
data. After the queries has been performed, the result can
be obtained by the requesting users.
Note that we use the two-server architecture which has been widely
used in recent works [11, 13, 26, 28]. We don’t use the single-server
model due to its difficulty in fulfilling various computation opera-
tions in our system while achieving good efficiency and security
performances simultaneously.
3.2 Problem Statement
In this part, we first describe how to encode the genomic sequence
in our system and then present the problem statement.
Since genomic sequences are represented by the four letter al-
phabet of nucleotides {A, C, G, T}, each letter can be represented
as an integer and each genomic sequence can be represented as
an integer vector. For instance, we can use the integers 0,1,2,3 to
represent A,C,G,T, then the sequence "ATCGC" can be expressed
as [0,3,1,2,1]. Actually, in our scheme, any arbitrary integer works
without influencing the correctness of the result, but thereafter we
will use the above encoding scheme for uniformity and the genomic
sequences in the remainder of this paper refer to encoded genomic
sequences.
We consider w data owners DO1, · · · , DOw (e.g. hospitals, re-
search institutions) who agree to construct a joint genomic database
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
and (cid:4)Si (cid:5) B
D based on the sequences they possess. For reasons of privacy, each
sequence Si is divided into two shares (cid:4)Si (cid:5) A
locally
using additive secret sharing, and then each data owner sends the
two shares to server A and server B, respectively. Consider a query
user (e.g. physician) who wants to query the top-k similar genomic
sequences corresponding to query Q. Refer to [3, 36], we use edit
distance as the metric to measure the similarity between different
genomic sequences. In order to preserve the query privacy, the user
uses additive secret sharing to partition the query Q into two shares
(cid:4)Q(cid:5) A
, then send them to two servers. After receiving
the query request, the two servers run a series of secure protocols
to compute the edit distances and return the indices of top-k results
(i.e., the indices of k-nearest sequences) I = {Ij : 1 ≤ j ≤ k } to the
user without revealing any private information about the genomic
database D and the query Q.
and (cid:4)Q(cid:5) B
3.3 Security Model
Adversary Model. We consider the problem of secure similar
sequence query under the semi-honest adversary model. That is, we
assume that parties are semi-honest (also referred to as honest-but-
curious) ones who correctly follow the protocol specification, yet
attempt to learn additional information by analyzing the transcript
of messages received during the execution. In addition, our work
also assumes that the two servers do not collude.
Desired Privacy Properties. Recall that our protocols aim to
securely compute edit distance and return the indices of k nearest
neighbors to query users. Our protocols should be secure under the
semi-honest adversaries model. Our query schemes should protect
data privacy, query privacy, and data access patterns. Specially, A
and B should know nothing about the exact data of D except the
database size and sequence length. In addition, A and B should
know nothing about the query Q except the sequence length. Access
patterns to the data, such as the indices of the top-k query results,
should not be revealed to A and B to prevent any inference attacks.
4 BUILDING BLOCKS
In this section, we present a set of generic sub-protocols that will
be used in constructing our proposed protocols in Section 5. Specif-
ically, we realize the following five functions on secret sharing data:
1) secure shuffling; 2) secure branching; 3) secure minimum com-
puting; 4) secure exact edit distance computing; 5) secure sequence
comparing. These sub-protocols could also be used in other types
of secure computing protocols, e.g., secure k-NN query [13] and
trajectory similarity computing [26]. Recall that we assume the
existence of two semi-honest servers A and B such that the Pail-
lier’s partial private key (introduced in Section 2.2.3) sk (1)
is known
only to server A and sk (2)
only to server B whereas pk = (N , д)
is treated as public. In the following protocols, unless explicitly
stated, we assume all operations to be performed are on the ring
2(cid:2) . In the following, we first detail the secure shuffling protocol,
Z
then realize other functions one-by-one.
4.1 Secure Shuffling (SSF) Protocol
Consider an original sequence x=[x1, . . . , xn ] is additively secret-
shared into two shares (cid:4)x(cid:5) A = [(cid:4)x1(cid:5) A , . . . , (cid:4)xn (cid:5) A ] and (cid:4)x(cid:5) B =
[(cid:4)x1(cid:5) B , . . . , (cid:4)xn (cid:5) B ]. Secure Shuffling (SSF) protocol is to realize
(cid:9)(cid:5) B
(cid:9)(cid:5) A
(cid:4) A
and (cid:4)x
(cid:4) B , . . . ,
(cid:3)
xπ (π (cid:9)(n))
and (cid:4)x(cid:5) B
the function that permutes the original sequences (cid:4)x(cid:5) A
into the new sequences (cid:4)x
. During this protocol, no
information regarding x is revealed to A and B. Inspired by the
previous work [26], we permute the original sequences (cid:4)x(cid:5) A =
(cid:4) A , . . . ,
(cid:3)
[(cid:4)x1(cid:5) A , . . . , (cid:4)xn (cid:5) A ] and (cid:4)x(cid:5) B = [(cid:4)x1(cid:5) B , . . . , (cid:4)xn (cid:5) B ] into the new
(cid:3)
(cid:4) B
(cid:3)
(cid:9)(cid:5) A = [
(cid:9)(cid:5) B =
xπ (π (cid:9)(1))
sequences (cid:4)x
xπ (π (cid:9)(1))
xπ (π (cid:9)(n))
[
] by two random permutation func-
tions π (only hold by A) and π (cid:9)
(only hold by B). As long as A
and B do not know each other’s permutation function, neither of
them could recover the original indices of (cid:4)x(cid:5). In consideration of
performance, SSF protocol is divided into two phases: offline and
online. The offline phase generates some common assistant values
which are independent of the input of protocol, while online phase
can achieve the shuffle in a single interaction between A and B
with the help of the assistant values.
] and (cid:4)x
(cid:2)
(cid:6)
(cid:5)
N /2
(cid:2) }(K =
(cid:2), · · · , (K − 2) · 2
Algorithm 1 shows the main steps in the offline phase. Note
that in this phase, the operations are performed on the group ZN .
At the beginning of this protocol, Server A chooses n random
2(cid:2) to form a vector u and chooses n random
integers u1, . . . , un ∈ Z
integers r1, . . . , rn ∈ {0 · 2
) to form
a vector r. In this step, we make a conversion from message space of
additive secret sharing to that of Paillier encryption by introducing a
group of random values of ri . Then, A constructs a sequence L0 ←
[Epk (u1 +r1), . . . , Epk (un +rn )] where ui +ri is encrypted under the
public key pk, and send it to B. Thanks to the property of distributed
decryption in the improved Paillier cryptosystem [17], B is unable
to decrypt L0 without the help of A. Upon receiving L0, B generates
a random vector v= [v1, . . . , vn ](vi ∈ Z
2(cid:2) ) and randomizes L0 by
v for obtaining L1 ← [Epk (u1 + v1 + r1), . . . , Epk (un + vn + rn )].
After that, B permutes L1 using a random permutation function
π (cid:9)
and send it to A. Similarly, a random permutation function
π is selected by A to permute L1. Then, A uses partial private
key sk (1)
to partially decrypt L1 and sends the partial ciphertext
L2 to B. Finally, B decrypts L2 by sk (2)
to get L3 = [uπ (π (cid:9)(1)) +
vπ (π (cid:9)(1)) + rπ (π (cid:9)(1)), . . . , uπ (π (cid:9)(n)) + vπ (π (cid:9)(n)) + rπ (π (cid:9)(n))], and then
(cid:9)(cid:5) B = −(L3
eliminates rπ (π (cid:9)(i )) by modulus operations for getting (cid:4)x
mod 2
(cid:2)) = [−uπ (π (cid:9)(1)) − vπ (π (cid:9)(1)), . . . , −uπ (π (cid:9)(n)) − vπ (π (cid:9)(n))].
Next, we describe how to implement the online phase of SSF
protocol in the Algorithm 2. The input in this phase is a secret
sharing sequence (cid:4)x(cid:5) i.e., A inputs (cid:4)x(cid:5) A = [(cid:4)x1(cid:5) A , · · · , (cid:4)xn (cid:5) A ]
and B inputs (cid:4)x(cid:5) B = [(cid:4)x1(cid:5) B , · · · , (cid:4)xn (cid:5) B ]. Note that at this point,
A holds π , u and B holds π (cid:9), v, where u, v are the assistant val-
ues. To start with, A additively masks each (cid:4)xi (cid:5) A
with ui and
assembles them in the sequence L4, such that L4 ← [(cid:4)x1(cid:5) A +
u1, . . . , (cid:4)xn (cid:5) A + un ]. This prevents B from learning (cid:4)xi (cid:5) A
. Af-
ter receiving L4, B accumulates L4, (cid:4)x(cid:5) B , v in an element-wise
manner to get L5 = [x1 + u1 + v1, . . . , xn + un + vn ]. Then, L5 is
permuted by π (cid:9)
and sent back to A. Finally, A uses π to permutate
(cid:9)(cid:5) A = [xπ (π (cid:9)(1)) +
L5 again. So the protocol ends with A holding (cid:4)x
uπ (π (cid:9)(1))+vπ (π (cid:9)(1)), . . . , xπ (π (cid:9)(n))+uπ (π (cid:9)(n))+vπ (π (cid:9)(n))] and B hold-
(cid:9)(cid:5) B = [−uπ (π (cid:9)(1)) −vπ (π (cid:9)(1)), . . . , −uπ (π (cid:9)(n)) −vπ (π (cid:9)(n))], i.e.,
ing (cid:4)x
the permuted sequence (cid:4)x
(cid:9)(cid:5).
We should note that the performance of our protocol in the offline
phase can be improved by a universal data packing technology, we
refer the reader to [6] for details. As for the online part, our protocol
This  is  an  author-produced,  peer-reviewed  version  of  this  article.  The  final,  definitive  version  of  this  document  can  be  found  online  at  ASIACCS  '18:
Proceedings of the 2018 on Asia Conference on Computer and Communications Security, published by Association for Computing Machinery. Copyright
restrictions may apply. doi: 10.1145/3196494.3196535
Algorithm 1 The Offline Phase of Secure Shuffling Protocol
(cid:4) B
(cid:3)
; B holds pk, sk (2)
Input: None (A holds pk, sk (1)
)
(cid:9)(cid:5) B = [
x (cid:9)
Output: B outputs (cid:4)x
]
1
1: A:
2:
(cid:4) B , · · · ,
(cid:3)
x (cid:9)
n
2(cid:2) , u =[u1, . . . , un ]
(cid:5)
Pick n random integers u1, . . . , un ∈ Z
Pick n random integers r1, . . . , rn ∈ {0 · 2
), r =[r1, . . . , rn ]
(K − 2) · 2