canneal
dedup
streamcluster
average
168,896
2,375
5,768
244,669
58,868
273,684
84,288
22
6,558
69
39,032
64
57
22
156,943
2,161
41,347
54,561
3,166
26,174
6,452
139
25
10
160
39
60
20
11
56
46
253
146
94
85
23
115
162
24
715
23
3,607
5,085
2,392
196,549
14
201,599
1,891
17
5,808
222,531
663,843
48,558
2,500
778,780
125,588
114,375
10,426
22,813
62,870
2,386
22,859
5,127
the adoption of OCFI and SS, but not SafeHidden.
For SPEC benchmarks, we can see that the geometric
mean performance overhead incurred by SafeHidden when
protecting OCFI and SS is 2.75% and 2.76%, respectively.
For Parsec benchmarks, the geometric mean performance
overhead incurred by SafeHidden is 5.78% and 6.44%, re-
spectively. It shows that SafeHidden is very efﬁcient in pro-
tecting safe areas. Based on the experimental results, we
can also see that SafeHidden is more efﬁcient in protect-
ing single-threaded applications. This is due to two rea-
sons: (1) All threads need to be blocked when randomizing
the thread-shared safe areas or the thread-local safe areas
(when not triggered by a TLB miss); (2) When protecting the
thread-local safe areas, SafeHidden needs to synchronize the
thread-private EPTs with the guest page table, which could
introduce VM-Exit events.
Table 3 details some statistical data of SafeHidden when
applied to the OCFI and SS defenses to protect SPEC and
Parsec benchmarks. The column “#randomization” shows
the number of re-randomization to safe areas. On SPEC and
Parsec benchmarks, there are three operations that can trig-
ger a re-randomization: (1) Using brk() to move the top of
the heap; (2) Using mmap() to allocate a memory chunk; (3)
TLB misses occurred in safe areas. Because OCFI and SS
did not introduce extra invocation of system calls, the num-
bers of brk() and mmap() are the same. Combined with Fig-
ure 7, we can see that for most of SPEC benchmarks (except
mcf, soplex, GemsFDTD and omnetpp), the performance
overhead is related to the total number of re-randomization.
The reason why those four benchmarks had different per-
formance overhead is the virtualization overhead incurred
by the hypervisor. For example, the hypervisor introduced
7.18% performance overhead for GemsFDTD. Except x264
using SS, canneal and streamcluster, the overhead of most
Parsec benchmarks is also related to the total number of re-
randomization. For canneal and streamcluster, most of per-
formance overhead is introduced by the virtualization. For
x264, it spawns child threads more frequently than other
benchmarks, which causes SafeHidden to frequently create
and initialize thread-private EPTs.
6.2.2 Network I/O Performance Evaluation
Figure 8 shows the performance degradation of Apache and
Nginx servers under the protection of SS and OCFI with and
without SafeHidden. We use ApacheBench (ab) to simulate
100 concurrent clients constantly sending 10,000 requests,
each request asks the server to transfer a ﬁle. We also var-
ied the size of the requested ﬁle, i.e., {1K, 5K, 20K, 100K,
200K, 500K}, to represent different conﬁgurations. From
the ﬁgure, we can see that SS only incurs 1.60% and 1.98%
overhead on average when protecting Apache and Nginx.
OCFI only incurs 1.45% and 2.13% overhead on average
when protecting Apache and Nginx. We can also see that
SafeHidden incurs 12.18% and 12.07% on average when ap-
plied to SS and OCFI to protect Apache. But SafeHidden
incurs only 5.51% and 5.35% on average when applied to SS
and OCFI to protect Nginx. So SafeHidden is more efﬁcient
in protecting Nginx than Apache. This is due to two reasons:
(1) For each request to Nginx, Nginx will invoke several I/O
system calls, such as recvfrom(), write(), writev(),
etc., which only access the allocated memory space in the
USENIX Association
28th USENIX Security Symposium    1251
Figure 8: Network I/O Performance overhead brought by SafeHidden (short for SH) when applied to the SS and OCFI defenses.
Nginx process. The system calls in Nginx will not trig-
ger randomization of the safe area. But for each request to
Apache, Apache will invoke the mmap() system call to map
the requested ﬁle into the virtual memory space which could
trigger the extra randomization of all safe areas compared
with Nginx; (2) Apache is a multi-threaded program. Safe-
Hidden needs to block all threads when performing random-
ization of safe areas triggered by the mmap() system call.
6.2.3 Disk I/O Performance Evaluation
Figure 9: Disk I/O Performance overhead brought by SafeHidden
when applied to the SS and OCFI defenses.
The Bonnie++ sequentially reads/writes data from/to a
particular ﬁle in different ways. The read/write granularity
varies from a character to a block (i.e., 8192 Bytes). Fur-
thermore, we also test the time cost of the random seeking.
Figure 9 shows the disk I/O measurement results: SS and
OCFI defenses incur low performance overhead, i.e., 2.18%
overhead on average for SS and 1.76% overhead on average
for OCFI. SafeHidden brings only 1.58% overhead on aver-
age for SS and 3.08% overhead on average for OCFI. Com-
pared with SPEC and Parsec benchmarks, this tool invokes
the write() and read() system calls to write and read a very
large ﬁle frequently. But these system calls only access the
allocated memory space that does not trigger randomization
of safe areas.
7 Discussion
TLBleed attack. TLBleed [21] exploits the shared TLBs
between the hyper-threads on the same core to infer vic-
tim programs’ memory access patterns. Potentially, it could
be used to reduce the entropy of ASLR by triggering TLB
misses and observing into which TLB set the target object
is mapped. When TLBleed is used against SafeHidden, by
triggering only L1 DTLB misses without L2 TLB misses,
TLBleed may reduce the entropy of the safe area location
by 4 bits (in the case of a 16-set L1 DTLB), which leads
to roughly 20 bits entropy remaining for 8 MB safe area.
However, attempts to further reduce the entropy will trigger
re-randomization of safe areas with high probability. So, TL-
Bleed is not able to defeat SafeHidden.
Spectre attack. The Spectre attack [28] leverages specula-
tive execution and side-channels to read the restricted virtual
memory space. As the memory protection related exceptions
are suppressed in the speculatively executed code, SafeHid-
den could not detect Spectre attacks.
Resilience to attacks. SafeHidden is resilient to all known
attacks against safe areas. Variants of existing attacks would
also be prevented: (1) The attacker may try to ﬁll up the
address space quickly by using the persistent allocation or-
acle [43] to avoid SafeHidden from creating too many trap
areas. But as SafeHidden sets an upper limit for the total
mapped memory regions, such attacks are prevented; (2) The
attacker could exploit the paging-structure caches to conduct
the side-channel analysis. However such attacks will also
trigger TLB misses, which will be detected by SafeHidden.
Although it is difﬁcult to prove SafeHidden has eliminated
all potential threats, we believe it has considerably raised the
cost of attacks in this arms race.
The impact of NMI on the solution of integrating KPTI.
During the execution of the assembly code in listing 1, the
interrupts are disabled to avoid unintended context switches.
But the non-maskable interrupt (NMI) could break this pro-
tection. If a NMI occurs when the code is running, the NMI
handler will run on the kernel-mode page table with the uP-
CID. So the memory pages accessed in the NMI handler
could be leaked via the Meltdown attack. To avoid this, the
entry of the NMI handler could be instrumented (by rewrit-
ing the NMI entry in IDT) to switch back to the kPCID.
1252    28th USENIX Security Symposium
USENIX Association
0%5%10%15%20%25%30%0510152025File SizeOverhead (%)Latency (ms/req)baseline latencySS latencySS+SH latencySS overheadSH overhead0%5%10%15%20%25%30%0510152025File SizeOverhead (%)Latency (ms/req)baseline latencyOCFI latencyOCFI+SH latencyOCFI overheadSH overhead0%5%10%15%20%25%30%02468101214File SizeOverhead (%)Latency (ms/req)baseline latencySS latencySS+SH latencySS overheadSH overhead0%5%10%15%20%25%30%02468101214File SizeOverhead (%)Latency (ms/req)baseline latencyOCFI latencyOCFI+SH latencyOCFI overheadSH overhead(a)Apache + SS + SafeHidden(b)Apache + OCFI + SafeHidden(c) Nginx + SS + SafeHidden(d)Nginx + OCFI + SafeHidden-2%0%2%4%6%8%10%Overhead (%)SafeHidden when applied to OCFIOCFISafeHidden when applied to SSSSPer CharBlockRewritePer CharBlockSequential OutputSequential InputRandom Seeks8 Related Work
Protecting safe areas. MemSentry [29], IMIX [16], Mi-
croStache [39], and ERIM [52] are the closest to our work.
MemSentry adopts a software-fault isolation (SFI) approach
to protecting frequently accessed safe areas by leveraging In-
tel’s memory protection extensions (MPX) technology.
It
restricts the addresses of all memory accesses that can not
access the safe area. But it is still not practical because it
signiﬁcantly increases the performance overhead [16]. The
main disadvantage of MemSentry is the SFI approach is not
safe, i.e., un-instrumented instructions can still access the
safe region [16]. By modifying the Intel’s simulation, IMIX
extends the x86 ISA with a new memory-access permission
to mark safe areas as security sensitive and allows accesses
to safe areas only using a newly introduced instruction. Sim-
ilarly, MicroStache achieves it by modifying the Gem5 simu-
lator. However, IMIX and MicroStache are not yet supported
by commodity hardware. ERIM protects safe areas by turn-
ing on access permission only when accesses are requested.
To quickly switch the access permission on and off, it adopts
the newly released Intel hardware feature memory protection
keys (MPK) [2]. But it is still not suitable to protect the fre-
quently accessed safe areas. For example, it incurs >1X per-
formance overhead when protecting the shadow stack [29].
Different from SafeHidden, all these methods require modi-
ﬁcation of the source code of both the defense and the pro-
tected applications. Please note that most defenses listed in
Table 1 (except two) work on COTS binaries.
In particu-
lar, Shufﬂer [59] mentioned that defeats probing attacks by
moving the location of its code pointer table (i.e., the safe
area) continuously. But this method only blocks attacks from
Vector-1. For example, using Vector-2, persistent attacks
could always succeed. Different from Shufﬂer, SafeHidden
blocks all existing attack vectors against IH.
Protecting CFI metadata.
CFI is an important defense
against code reuse attacks [3]. A CFI mechanism stores
control-ﬂow restrictions in its metadata. Like other types
of safe areas, the metadata of CFI mechanisms needs to be
protected. However, many CFI metadata only needs write
protection without concerning about its secrecy. Therefore,
these CFI mechanisms do not need IH. In contrast, some
CFI metadata is writable, as it needs to be dynamically up-
dated [8, 41, 42, 37], and others need to be kept as se-
crets [40, 61, 53, 60]. These CFI mechanisms must protect
their metadata either by memory isolation [8, 53, 42, 41, 37]
or IH [40, 60, 61]. SafeHidden can be applied to improve the
security of IH for these CFI mechanisms.
Intra-process isolation.
SFI is commonly used to re-
strict intra-process memory accesses [55]. However, both
software-only and hardware-assisted SFIs incur high perfor-
mance overhead [20, 43]. SeCage uses double-EPT to pro-
tect sensitive data, e.g., the session key and the private key
[34]. Shreds [11] utilizes the domain-based isolation sup-
port provided by the ARM platform to protect the thread-
sensitive data. Intel software guard extension (SGX) [2] pro-
tects the sensitive data using a secure enclave inside the ap-
plication which cannot be accessed by any code outside the
enclave. However, none of the approaches mentioned above
can be used to protect frequently accessed safe areas because
of their high switching overhead.
Tracking TLB misses. Intel performance monitoring units
(PMU) [2] can be used to proﬁle the TLB miss, but it is not
precise enough. In contrast, setting reserved bits in PTE can
help to track the TLB miss precisely. Some works had used
this feature for performance optimization [17, 6, 5]. Safe-
Hidden extends this method to detect side-channel attacks
against the safe areas, which is the ﬁrst time to our best
knowledge such a feature is used in security.
Trap areas as security defenses. Booby-traps [12] ﬁrst pro-
poses to defeat code reuse attacks by inserting the trap gad-
gets in applications. CodeArmor [10] inserts the trap gad-
gets into the virtual (original loaded) code space. To protect
the secret table’s content against probing attacks, Readac-
tor++ [14] inserts trap entries into the PLT and vtable, and
Shufﬂer [59] inserts the trap entries into its code pointer ta-
ble. To defeat the JIT-ROP [49] attacks, Heisenbyte [51] and
NEAR [58] propose to trap the code after being read. Dif-
ferent from these works, SafeHidden uses the trap to capture
the probing attacks against IH.
TSX for Security. The TSX is proposed to improve the per-
formance of multi-threaded programs, but many studies have
utilized TSX to improve system security. For example, Mi-
mosa [23] uses TSX to protect private keys from memory
disclosure attacks. TxIntro leverages the strong atomicity to
ensure consistent and concurrent virtual machine introspec-
tion (VMI) [33]. In addition, TSX has been used to perform
or detect the side-channel attacks against the Kernel ASLR
[27] or the enclave in SGX [48, 9]. Different from these
works, SafeHidden uses the TSX to identify TLB entries.
EPT for Security. The EPT has been used to isolate
VMs [26], to protect processes from the malicious OS and/or
other processes [18, 50, 24], and to protect sensitive code/-
data within a process [34]. The EPT also supports more re-
strict memory permission check (i.e., the execute-only per-
mission), which has been used to prevent the JIT-ROP [49]
attacks [51, 13, 58]. Different from prior works, SafeHidden
uses the EPT to achieve the thread-private memory.
9 Conclusion
This paper presented a new IH technique, called SafeHidden,
which is transparent to existing defenses. It re-randomizes
the locations of safe areas at runtime to prevent attackers
from persistently probing and inferring the memory layout to