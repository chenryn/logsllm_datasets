### E. Android Security

Android employs two key security mechanisms that distinguish it from traditional Unix systems: application sandboxing and permissions.

**Application Sandboxing:** Each Android application (`.apk` file) is assigned a unique User ID (UID) upon installation, which remains constant throughout its lifecycle. This contrasts with conventional desktop systems, where a single user ID is often shared among different processes. In Android, because each application runs under a distinct UID, their code cannot execute in the same process, necessitating Inter-Process Communication (IPC). Additionally, applications are provided with separate directories for storing persistent data, and they can specify in `AndroidManifest.xml` whether to share this data with other applications.

**Application Permissions:** This is a Mandatory Access Control (MAC) mechanism designed to protect application components and data. Applications request permissions via the `uses-permission` tag in `AndroidManifest.xml` during installation. For example, an application that needs to monitor incoming SMS messages would specify the `android.permission.RECEIVE_SMS` permission. To control access to or sharing of its own components, an application can define and enforce specific permissions. This system provides fine-grained control over device features but sets these permissions at installation time rather than dynamically.

### III. Experimental Setup

In our robustness study, we focus on Intents, one of the two primary Inter-Component Communication (ICC) primitives in Android, due to their flexibility. Intents are used for various purposes, such as starting activities, sending and receiving broadcast messages, and managing services. Their flexible structure, however, introduces potential vulnerabilities. Chin et al. [13] noted that Intents can be easily spoofed, snooped, and targeted unless protected by explicit permissions, which is rare. Our experimental results support this analysis and reveal that the attack surface can extend to the framework layer or lower [14]. Thus, we chose Intents as the primary focus of our study, addressing the following questions:

(A) How well do Android components handle semi-valid or random Intents?
(B) How robust are Androidâ€™s ICC primitives? Can the Android runtime contain exceptions within an application?
(C) How can we improve the implementation of Intents to enhance input validation?

To evaluate (A), we sent explicit Intents to each registered Activity, Service, and Broadcast Receiver. We assessed (B) by sending a set of implicit Intents and addressed (C) with a qualitative assessment in Section V.

#### A. Testing Tool

We developed JarJarBinks, our robustness testing tool, based on Intent Fuzzer [15]. The initial codebase supported basic functions like displaying registered components and sending blank Intents to Broadcast Receivers and Services. However, it lacked support for testing Activities. We added this feature to JarJarBinks along with an Intent generation module (Section III-B). Figure 2 illustrates how JarJarBinks interacts with the Android architecture [14]. It queries the `PackageManager` to list registered components (Activities, Services, and Broadcast Receivers) and uses `ActivityManager` to send Intents. We use the following Android API methods to send Intents: `startActivityForResult` for Activities, `startService` for Services, and `sendBroadcast` for Broadcast Receivers.

One major challenge in automated testing of Android Activities is closing a callee Activity after it is displayed. We resolved this using `startActivityForResult` and `finishActivity` APIs, which allow us to force-finish a child activity. Another issue is avoiding resource exhaustion; we mitigated this by introducing a 100ms pause between sending successive Intents. Although we did not explicitly test Content Providers, some fault injection campaigns triggered parsing of semi-valid content URIs and corresponding permission checks.

Our goal was to keep JarJarBinks simple and non-intrusive to avoid introducing new bugs. Despite its simplicity, the tool generated a significant volume and severity of failures. One limitation is its semi-manual approach, particularly in handling system alerts and tasks started as new activities, which required manual intervention. These issues will be addressed in future work.

#### B. Generating Intents

An Intent message is a data container with optional fields: {Action, Data, Type, Package, Component, Flags, Categories, and Extras}. Action (e.g., view or edit a contact) and Data (e.g., URI for a contact record) are most frequently specified. Component specifies the target, Flags control handling, Category provides additional action information, and Extras include name-value pairs for more inputs. Type is usually derived from Data, and Package from Component if specified.

In JarJarBinks, we modify Action, Data, Component, and Extras in a structured manner, keeping other fields blank. Action is selected from a set of Android-defined strings [16]. Data URI generation is complex due to multiple schemes. We support the following URI schemes: "content://", "file://", "folder://", "directory://", "geo:", "google.streetview:", "http://", "https://", "mailto:", "ssh:", "tel:", and "voicemail:". For "content://" URIs, we query the `PackageManager` for registered Content Providers and build a URI. Our Intent generation is classified into two types:

1. **Implicit Intents:** Components advertise their ability to handle Intents via Intent-filters in their manifest. Implicit Intents do not specify a target but are delivered to the best-matching component. Intent-filters can restrict Action, Category, or Data. Our test set includes any Intent matching at least one Intent-filter. We generate:
   - **Valid Intent, unrestricted fields null:** An Intent matching all restricted attributes.
   - **Semi-valid Intent:** Intents with at least one degree of freedom, fuzzing fields individually valid for some components but not in combination.

2. **Explicit Intents:** We test how well receivers handle unexpected data. Our fuzz campaign targets Activities, Services, and Broadcast Receivers. For each component type, JarJarBinks queries the `PackageManager` for a list of components and runs four fuzz injection campaigns (FICs):
   - **FIC A: Semi-valid Action and Data:** Generates semi-valid Action and Data, combining them to create new Intents.
   - **FIC B: Blank Action or Data:** Specifies either Action or Data, leaving the other field blank.
   - **FIC C: Random Action or Data:** Specifies either Action or Data, setting the other to random bytes.
   - **FIC D: Random Extras:** Adds 1-5 random Extra fields to valid {Action, Data} pairs.

These experiments simulate both benign and adversarial scenarios, verifying robustness against null objects, incompatible actions, and potential attacks.

#### C. Machines and Firmware

We conducted tests on three Android versions across three phones and three computers:
- Two Motorola Droid phones with Android 2.2 (Froyo, June 2010).
- One HTC Evo 3D with Android 2.3.4 (Gingerbread, April 2011).
- Three emulators running Android 4.0 (Ice Cream Sandwich, October 2011).

The HTC Evo was used for implicit Intent experiments, while explicit Intent experiments, involving 9,000 Intents per component, were run in parallel on the two Droid phones. Emulators tested Android 4.0, which has been praised for significant improvements. Initially, each Android version had approximately 800 components (Activities, Services, and Broadcast Receivers combined).

This setup allowed us to comprehensively evaluate the robustness of Android's ICC mechanisms across different versions and devices.