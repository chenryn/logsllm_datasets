sending
E. Android Security
Android provides two important security mechanisms that
are different from traditional Unix systems, i.e., application
sandboxing and permissions. Sandboxing means each An-
droid application (*.apk) is given its own unique UID at
install time that remains ﬁxed throughout its lifetime. This
is different from traditional desktop systems where a single
user ID is shared among different processes. In Android,
since two applications run as two different users, their code
may not be run in the same process, thus requiring the need
of IPC. Moreover, applications are also assigned separate
directories where they can save persistent data. Applications
can specify explicitly whether it will share its data with other
applications in AndroidManifest.xml.
Application permissions is a Mandatory Access Con-
trol (MAC) mechanism for protecting application com-
ponents and data. To use resources, an application re-
quests permissions through AndroidManifest.xml ﬁle us-
ing the uses-permission tag at installation time. For ex-
ample an application that needs to monitor
incoming
SMS messages would explicitly specify permission of
“android.permission.RECEIVE_SMS”. To protect
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:27 UTC from IEEE Xplore.  Restrictions apply. 
or share an application’s own components, an application
can deﬁne and specify a certain permission for a caller. This
mechanism gives ﬁne-grained control of different protected
features of the device but ﬁxes these permissions to install
time as opposed to runtime.
III. EXPERIMENTAL SETUP
Of the two Inter Component Communication (ICC) prim-
itives in Android—Intent and Binder—we use Intent as the
subject of our robustness study due to its ﬂexibility. Intents
are used for a variety of purposes in Android applications
which include but are not limited to—starting a new activity,
sending and receiving broadcast messages, receiving results
from another activity, starting and stopping a service etc.
To support these operations across a myriad applications
from multiple vendors over many versions, Intent messages
have a ﬂexible structure and therein lies the potential for
vulnerability. In a vulnerability analysis of Android IPC,
Chin et al. [13] argued that it is easy to spoof, snoop,
and target Intents to speciﬁc application components unless
these are protected by explicit permissions, which is a
rare occurrence. Our experimental results concur with this
analysis and show that the attack surface can go even deeper
(i.e. up to the framework layer or lower as shown in [14]).
Due to these reasons we chose Intents as the primary focus
of our study. In essence, we try to answer the following
questions:
(A) How well does an Android component behave in the
presence of a semi-valid or random Intent?
(B) How robust are Android’s ICC primitives? Can the
Android runtime contain exceptions within an application?
(C) How can we reﬁne the implementation of Intents so that
input validation can be improved?
To evaluate (A), we sent explicit Intents to each Activity,
Service, and Broadcast Receiver registered in the system.
We evaluate (B) by sending a set of implicit Intents and
answer (C) by presenting a qualitative assessment in Section
V.
A. Testing Tool
We built our robustness testing tool, JarJarBinks, from
Intent Fuzzer at [15]. The initial codebase contained basic
functions like displaying set of components registered in the
system, and sending blank Intent messages to Broadcast Re-
ceivers, and Services. However, it did not support testing Ac-
tivities. We added this key feature in JarJarBinks along with
an Intent generation module described in Section III-B. Fig.
2 shows the location and operation of JarJarBinks (JJB) with
reference to Android architecture [14]. It queries Android
PackageManager to get a list of components (Activities,
Services, and Broadcast Receivers) registered in the system
and then uses ActivityManager to send Intents to these com-
ponents. We use the following methods from Android API to
send Intents: startActivityForResult for Activities,
Figure 2.
JarJarBinks: Interaction with Android Layers
startService for Services, and sendBroadcast for
Broadcast Receivers.
it
expects
some
the
and
by
pauses
using
caller Activity. We
One of the major challenges in automated testing of
Android Activities is to close a callee Activity after
a new Activity
sending an Intent. Typically, once
is displayed,
interaction from the
user
resolved
this
startActivityForResult()
and finishActivity() APIs
in Android. Unlike
startActivity(), startActivityForResult()
can force-ﬁnish a child activity by using its requestCode
as a handle. This way we could avoid manual intervention
in most cases. Another design issue with automated testing
of ICC in Android is to avoid resource exhaustion in the
system (e.g., sending a continuous stream of Intents very
fast would create a large number of Activities (windows)
causing WindowManager to run out of resources). For this
purpose, we used a pause of 100ms between sending of each
successive Intent. This was sufﬁcient to launch and ﬁnish
a new Activity (or Service) in our testing environment.
Though we did not explicitly test Content Providers in
JarJarBinks, semi-valid content URIs were speciﬁed in
some of our fault injection campaigns triggering parsing of
these content URIs and corresponding permission checks.
It may be highlighted that one of our goals was to
keep the implementation of JJB simple and less intrusive,
thereby, not introducing new bugs in the ﬁrmware. We,
instead, focus on a rigorous analysis of the results obtained
from our experiments. Despite its simplicity, the volume
and severity of failures generated through JJB is truly
astonishing. One shortcoming of JJB is its semi-manual
approach—our strategy of killing a child Activity (by calling
finishActivity) did not work well in two situations:
ﬁrst, when a system alert was generated due to applica-
tion crash, this could not be closed programmatically (we
consider this as a good security design; JJB being a user-
level application cannot hide system alerts), second, when an
activity was started as a new task the caller could not close
it by calling finishActivity() (this mostly happened
while launching login screens of applications like Skype,
Facebook, Settings etc.). Both these cases required manual
intervention and will be addressed in our future work. In
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:27 UTC from IEEE Xplore.  Restrictions apply. 
the following section, we present an overview of our Intent
generation module.
B. Generating Intents
An Intent message is essentially a data container having
set of optional ﬁelds—{Action, Data, Type,
a
Package, Component, Flags, Categories,
and Extras}—which can be speciﬁed by a caller. Of
these, Action (an action to perform, e.g. to view or edit
a contact) and Data (a URI for a data item, e.g. URI for
a contact record on phone) are most frequently speciﬁed
by a caller. Component speciﬁes the target component,
Flags control how an Intent
is handled, Category
speciﬁes additional information about the action to execute,
and Extras include a collection of name-value pairs to
deliver more inputs to the target component. Type (content
mime-type) is usually determined from Data (when it
is speciﬁed), while, Package can be determined from
Component if one is speciﬁed.
In JarJarBinks, we modify the ﬁelds Action, Data,
Component, and Extras in a structured manner as
part of a fault
injection campaign and keep the other
ﬁelds blank (we select Extras since this can potentially
include random or malicious data from users). For most
experiments Action is selected from a set of Android-
deﬁned action strings found at [16]. Generation of data
URIs is a non-trivial operation due to the presence of
a multitude of URI schemes. A URI consists of three
parts URI := scheme/path?query, where scheme
denotes URI type, path gives the location to the data,
and query is an optional query string. At present we
support
the following URI schemes—"content://",
"file://", "folder://", "directory://",
"geo:", "google.streetview:", "http://",
"https://", "mailto:", "ssh:", "tel:",
and "voicemail:" in JarJarBinks. For each of these
except "content://", we created a predeﬁned set of
semi-valid URIs. For "content://" URIs, JarJarBinks
ﬁrst queried the PackageManager to get a list of registered
Content Providers in the system and then randomly selected
one of them to build a content://provider URI. Our
Intent generation can be broadly classiﬁed into two types.
1) Implicit Intents: Components in the system can ad-
vertise their ability to handle Intents by specifying Intent-
ﬁlters in their manifest ﬁle. Implicit Intents do not specify
a target, but are delivered to the best matching component
in the system. The matching between sender and receiver
is the responsibility of the Intent delivery mechanism of the
platform. Intent-ﬁlters can restrict the Action of the Intent,
the Category, or the Data (through both the URI and the
data type ﬁelds) or any combination of the three. The test
set for implicit Intents is therefore any Intent that matches
at least one Intent-ﬁlter in the system. In order to generate
Intents, we collect all Intent-ﬁlters of all applications and
all restrictions of either the Action or the Category. On
our target platform, we could not ﬁnd components using the
Data in Intent-ﬁlters. For each application and each of its
Intent-ﬁlter, the following experiments were performed:
that matches exactly all
(A) Valid Intent, unrestricted ﬁelds null: We gener-
the restricted at-
ate an Intent
tributes of
leave all other ﬁelds
blank. For example, if the Intent-ﬁlter speciﬁes , only this infor-
mation is used to populate the Intent ﬁelds.
the Intent-ﬁlter but
(B) Semi-valid Intent: We pick all Intent-ﬁlters that have
at least one degree of freedom and set these ﬁelds sequen-
tially to each of the valid literals we discovered in any other
Intent-ﬁlter. For the above example, the Category ﬁeld
would be subject to fuzzing since only Action is restricted
through the ﬁlter. Thus, the fuzzed ﬁelds are individually
valid for some component
their
combination. Since each individual ﬁeld in the generated
Intent is valid, there is still a high chance that it is routed
to a component.
in the system, but not
2) Explicit Intents: Our goal here is to ﬁnd how well
the receiver of an Intent behaves after getting unexpected
data. At a high level, our fuzz campaign on explicit In-
tents is distributed over three component types—Activities,
Services, and Broadcast Receivers. For each component
type, JarJarBinks ﬁrst queries PackageManager to retrieve
a list of components of that type in the system (e.g. all
the Services, or Activities). After this, for each selected
component (e.g. Calender Activity) JarJarBinks runs a set
of four fuzz injection campaigns (FIC).
(refer Section III-B). However,
FIC A: Semi-valid Action and Data: Here a semi-valid
Action string, and Data URI are generated as described
earlier
the combination
of the two may be invalid. For example, an Intent of
this category may be Intent {act=ACTION_EDIT
data=http://www.google.com cmp=com.
android.someComponent}. During
the
Action and Data sets are combined to generate all known
{Action, Data} pairs each generating a new Intent.
Total number of Intents generated are |Action| × |Data|
for each component. Fields other than Action and Data
are kept blank.
this FI,
FIC B: Blank Action or Data:
In this experiment,
we speciﬁed either Action OR Data in an Intent
but not both together. Other ﬁelds
left blank.
Intent {data=http://www.google.com
cmp=com.android.someComponent} is an example
of this FI. This campaign generates |Action| + |Data|
Intents for each component.
are
FIC C: Random Action or Data: Here either Action
OR Data is speciﬁed as described earlier, and the other is
set to random bytes. An example of this type of Intent may
Intent {act=ACTION_EDIT data=a1b2c3d4
be
cmp=com.android.someComponent}.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:17:27 UTC from IEEE Xplore.  Restrictions apply. 
FIC D: Random Extras: For this FI, we ﬁrst created a set
of 100 valid {Action, Data} pairs following Android
documentation. For each of these pairs, 1-5 Extra ﬁelds
were added randomly. The name of an Extra was
selected from the set of Android deﬁned Extra strings,
while its value was set
to random bytes. An example
Intent can be shown as, Intent {act=ACTION_DIAL
Data=tel:123-456-7890 cmp=com.andro-
id.someComponent has Extras}.
Our choice of experiments is justiﬁed by the fact that an
application component may get a malformed Intent either
due to error propagation from other applications or from an
active adversary. While FICs A and B verify the robustness
of a callee component against null objects and incompatible
actions, FICs C and D emulate the behavior of a potential
adversary.
C. Machines and Firmware
We conducted our robustness test on three versions of
Android, distributed on three phones and three computers—
two of the phones (Motorola Droid) had Android 2.2 as its
ﬁrmware (release date: June 2010 and nicknamed “Froyo”),
while one (HTC Evo 3D) had Android 2.3.4 (release date:
April 2011 and nicknamed “Gingerbread”); the computers
all ran Emulators loaded with Android 4.0 in Linux envi-
ronments (release date: October 2011 and nicknamed “Ice
Cream Sandwich”, the image of which was useful during
long late night experiments with it). The HTC Evo was used
for running experiments on implicit Intents. Experiments
on explicit Intents, where we sent a large number (9000)
of Intents to each Android component, being more time
consuming, was run in parallel on two Droid phones (having
identical hardware and ﬁrmware). The emulators were used
for testing Android 4.0, the latest version of Android, for
which a physical device has been available only in late
November 2011, clearly not enough time for us to carry
out experiments. Android 4.0 is a promising target of the
study since it has been widely hailed as “the biggest Android
update in ages” (PC Magazine) and is touted to bring real
improvements to the Android platform. Initially, it was noted
that the devices as well as the emulator had nearly 800
components (Activities, Services, and Broadcast Receivers
combined) per version of Android which include a large