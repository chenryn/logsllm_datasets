pable of analyzing the whole program [77, 82, 41, 81, 38].
CacheD [77] performs symbolic execution towards a single
trace to detect side channels. In contrast, abstract interpreta-
tion framework approximates the program collecting seman-
tics, which formalizes program abstract semantics at arbi-
trary program points regarding any path and any input. This
is fundamentally different and much more comprehensive
comparing to a path-based tool, like CacheD. Wichelmann et
al. [82] log execution traces and perform differential analy-
sis of various granularities to detect side channels. Weiser et
al. [81] detect address-based side-channels by executing test
programs under input variants and further compare traces to
detect leakages.
Countermeasure. Existing countermeasures against cache
side-channel attacks can be categorized into hardware-based
and software-based approaches. Hardware-based solutions
focus on randomizing the cache accesses with new cache
design [79, 80, 45, 78, 51, 50], or enforcing ﬁne-grained
isolation with respect to cache usage [70, 42]. Wang et al.
propose locking the cache lines and hiding cache access pat-
terns [79], which further obfuscates cache accesses by di-
versifying the cache mappings [80]. Tiwari et al. [73] de-
vise a novel micro architecture for information-ﬂow tracking
by design, where noninterference is deployed as the base-
line conﬁdentiality property. Another direction at the hard-
ware level is based on contracts between software and hard-
ware [91, 47, 88], where contracts are enforced by formal
methods (e.g., type systems) on the hardware side. Further-
more, some advanced hardware extensions, like hardware
transactional memory, have also been leveraged to prevent
side channels even inside Intel SGX [35].
Analyses are also conducted on the software level to miti-
gate side channel attacks [27, 12, 63, 67, 68]. Program trans-
formation techniques are leveraged to remove control-ﬂow
timing leaks by equalizing branches of conditionals with se-
cret guards [8], together with a binary static checker [58],
and its practicality is evaluated [27]. Constant time code de-
feats timing attacks by ensuring the control ﬂow, memory
accesses, and execution time of individual instruction is se-
cret independent [10, 40, 61, 14, 9, 46].
11 Conclusion
In this paper, we have presented CacheS for cache-based tim-
ing channel detection. Based on a novel abstract domain
SAS, CacheS does ﬁne-grained tracking of sensitive infor-
mation and its dependencies, while performing scalable anal-
ysis with over-approximated public information. We evalu-
ated CacheS on multiple real-world cryptosystems. CacheS
conﬁrmed over 154 information leaks reported by previous
research and pinpointed 54 leaks not known previously.
12 Acknowledgments
We thank the Usenix Security anonymous reviewers and
Gary T. Leavens for their valuable feedback. The work was
supported in part by the National Science Foundation (NSF)
under grant CNS-1652790, and the Ofﬁce of Naval Research
(ONR) under grants N00014-16-12912, N00014-16-1-2265,
and N00014-17-1-2894.
References
[1] IDAPro. https://goo.gl/snmrk3.
[2] Intel R(cid:13) 64 and IA-32 architectures optimization refer-
[3] Intel R(cid:13) 64 and IA-32 architectures software developers
ence manual.
manual.
[4] Patched OpenSSL vulnerabilities. https://git.io/
fj0iz, 2018.
[5] ACIICMEZ, O., AND KOC, C. K. Trace-driven cache
attacks on AES. In ICICS (2006).
[6] ACIICMEZ, O., SCHINDLER, W., AND KOC, C. K.
Cache based remote timing attack on the AES. In CT-
RSA (2006).
[7] ACIICMEZ, O., AND SEIFERT, J. Cheap hardware par-
allelism implies cheap security. In FDTC (2007).
[8] AGAT, J. Transforming out timing leaks.
(2000).
In POPL
670    28th USENIX Security Symposium
USENIX Association
[9] ALMEIDA, J. B., BARBOSA, M., BARTHE, G., DU-
PRESSOIR, F., AND EMMI, M. Verifying constant-time
implementations. In USENIX Sec. (2016).
[10] ALMEIDA, J. B., BARBOSA, M., PINTO, J. S., AND
VIEIRA, B. Formal veriﬁcation of side-channel coun-
termeasures using self-composition. Science of Com-
puter Programming (2013).
[11] APPEL, A. W. Modern Compiler Implementation in
ML. Cambridge University Press, 2004.
[12] AVIRAM, A., HU, S., FORD, B., AND GUMMADI, R.
Determinating timing channels in compute clouds. In
CCSW (2010).
[13] BALAKRISHNAN, G., AND REPS, T. Analyzing mem-
ory accesses in x86 executables. In CC (2004).
[14] BARTHE, G., REZK, T., AND WARNIER, M. Pre-
venting timing leaks through transactional branching
instructions. Electronic Notes in Theoretical Computer
Science (2006).
[15] BENGER, N., VAN DE POL, J., SMART, N. P., AND
YAROM, Y. “Ooh aah... just a little bit” : A small
amount of side channel can go a long way. In CHES
(2014).
[16] BERNSTEIN, D. J. Cache-timing attacks on AES,
2005.
[17] BERNSTEIN, D. J., BREITNER, J., GENKIN, D.,
BRUINDERINK, L. G., HENINGER, N., LANGE, T.,
VAN VREDENDAAL, C., AND YAROM, Y. Sliding
right into disaster: Left-to-right sliding windows leak.
In CHES (2017).
[18] BINKERT, N., BECKMANN, B., BLACK, G., REIN-
HARDT, S. K., SAIDI, A., BASU, A., HESTNESS, J.,
HOWER, D. R., KRISHNA, T., SARDASHTI, S., SEN,
R., SEWELL, K., SHOAIB, M., VAISH, N., HILL,
M. D., AND WOOD, D. A. The Gem5 simulator. ACM
SIGARCH Computer Architecture News (2011).
[19] BONEH, D., DURFEE, G., AND FRANKEL, Y. An
attack on RSA given a small fraction of the private key
bits. In ASIACRYPT (1998).
[20] BONNEAU, J., AND MIRONOV, I. Cache-collision tim-
ing attacks against AES. In CHES (2006).
[21] BRADLEY, A. R., MANNA, Z., AND SIPMA, H. B.
What’s decidable about arrays? In VMCAI (2006).
[22] BROTZMAN, R., LIU, S., ZHANG, D., TAN, G., AND
KANDEMIR, M. CaSym: Cache aware symbolic ex-
ecution for side channel detection and mitigation.
In
IEEE SP (2018).
[23] BRUMLEY, D., AND BONEH, D. Remote timing at-
tacks are practical. Computer Networks (2005).
[24] BULCK, V., MINKIN, M., WEISSE, O., GENKIN,
D., KASIKCI, B., PIESSENS, F., SILBERSTEIN, M.,
WENISCH, T. F., YAROM, Y., AND STRACKX, R.
Foreshadow: Extracting the keys to the Intel SGX king-
dom with transient out-of-order execution. In USENIX
Sec. (2018).
[25] C, A., GIRI, R. P., AND MENEZES, B. Highly ef-
ﬁcient algorithms for aes key retrieval in cache access
attacks. In EuroSP (2016).
[26] CALVET, J., FERNANDEZ, J. M., AND MARION, J.-
Y. Aligot: Cryptographic function identiﬁcation in ob-
fuscated binary programs. In CCS (2012).
[27] COPPENS, B., VERBAUWHEDE,
I., BOSSCHERE,
K. D., AND SUTTER, B. D. Practical mitigations for
timing-based side-channel attacks on modern x86 pro-
cessors. In IEEE SP (2009).
[28] COUSOT, P., AND COUSOT, R. Abstract interpretation:
a uniﬁed lattice model for static analysis of programs
by construction or approximation of ﬁxpoints. In POPL
(1977).
[29] DANIAL, A. CLOC. https://goo.gl/3KFACB.
[30] DE MOURA, L., AND BJØRNER, N. Z3: An efﬁcient
SMT solver. In TACAS (2008).
[31] DISSELKOEN, C., KOHLBRENNER, D., PORTER, L.,
AND TULLSEN, D. Prime+Abort: A timer-free high-
precision L3 cache attack using Intel TSX. In USENIX
Sec. (2017).
[32] DOYCHEV, G., FELD, D., KOPF, B., MAUBORGNE,
L., AND REINEKE, J. CacheAudit: A tool for the
static analysis of cache side channels. In USENIX Sec.
(2013).
[33] DOYCHEV, G., AND K ¨OPF, B. Rigorous analysis of
In
software countermeasures against cache attacks.
PLDI (2017).
[34] GOOGLE. BinNavi. https://github.com/google/
binnavi, 2017.
[35] GRUSS, D., LETTNER, J., SCHUSTER, F., OHRI-
MENKO, O., HALLER, I., AND COSTA, M. Strong and
efﬁcient cache side-channel protection using hardware
transactional memory. In USENIX Sec. (2017).
[36] GRUSS, D., MAURICE, C., FOGH, A., LIPP, M., AND
MANGARD, S. Prefetch side-channel attacks: Bypass-
ing smap and kernel aslr. In CCS (2016).
[37] GULLASCH, D., BANGERTER, E., AND KRENN, S.
Cache games—bringing access-based cache attacks on
AES to practice. In IEEE SP (2011).
[38] GUO, S., WU, M., AND WANG, C. Adversarial sym-
bolic execution for detecting concurrency-related cache
timing leaks. In FSE (2018).
[39] HE, Z., AND LEE, R. B. How secure is your cache
against side-channel attacks? In MICRO (2017).
[40] HEDIN, D., AND SANDS, D. Timing aware informa-
tion ﬂow security for a JavaCard-like bytecode. Elec-
tronic Notes in Theoretical Computer Science (2005).
[41] IRAZOQUI, G., CONG, K., GUO, X., KHATTRI, H.,
KANUPARTHI, A. K., EISENBARTH, T., AND SUNAR,
B. Did we learn from LLC side channel attacks? A
cache leakage detection tool for crypto libraries. CoRR
(2017).
[42] KIM, T., PEINADO, M., AND MAINAR-RUIZ, G.
Stealthmem: System-level protection against cache-
USENIX Association
28th USENIX Security Symposium    671
based side channel attacks in the cloud.
Sec. (2012).
In USENIX
[43] KOCHER, P. C. Timing attacks on implementations
of Difﬁe–Hellman, RSA, DSS, and other systems. In
CRYPTO (1996).
[44] KOCHER, P. C. Timing Attacks on Implementations of
Difﬁe-Hellman, RSA, DSS, and Other Systems. 1996.
[45] KONG, J., ACIICMEZ, O., SEIFERT, J. P., AND
ZHOU, H. Hardware-software integrated approaches
to defend against software cache-based side channel at-
tacks. In HPCA (2009).
[46] K ¨OPF, B., AND RYBALCHENKO, A. Approxima-
tion and randomization for quantitative information-
ﬂow analysis. In CSF (2010).
[47] LI, X., KASHYAP, V., OBERG, J. K., TIWARI, M.,
RAJARATHINAM, V. R., KASTNER, R., SHERWOOD,
T., HARDEKOPF, B., AND CHONG, F. T. Sapper:
A language for hardware-level security policy enforce-
ment. In ASPLOS (2014).
[48] Libgcrypt.
libgcrypt/.
https://www.gnu.org/software/
[49] LIPP, M., GRUSS, D., SPREITZER, R., MAURICE, C.,
AND MANGARD, S. Armageddon: Cache attacks on
mobile devices. In USENIX Sec. (2016).
[50] LIU, F., GE, Q., YAROM, Y., MCKEEN, F., ROZAS,
C., HEISER, G., AND LEE, R. B. Catalyst: Defeating
last-level cache side channel attacks in cloud comput-
ing. In HPCA (2016).
[51] LIU, F., AND LEE, R. B. Random ﬁll cache architec-
ture. In MICRO (2014).
[52] LIU, F., YAROM, Y., GE, Q., HEISER, G., AND LEE,
R. Last-level cache side-channel attacks are practical.
In IEEE S&P (2015).
[53] LIVSHITS, B., SRIDHARAN, M., SMARAGDAKIS, Y.,
LHOT ´AK, O., AMARAL, J. N., CHANG, B.-Y. E.,
GUYER, S. Z., KHEDKER, U. P., MØLLER, A., AND
VARDOULAKIS, D. In defense of soundiness: A man-
ifesto. Commun. ACM (2015).
[54] LIVSHITS, V. B., AND LAM, M. S. Tracking pointers
with path and context sensitivity for bug detection in c
programs. SIGSOFT Softw. Eng. Notes (2003).
[55] MACHIRY, A.,
SPENSKY, C., CORINA,
J.,
STEPHENS, N., KRUEGEL, C., AND VIGNA, G.
DR. CHECKER: A soundy analysis for linux kernel
drivers. In USENIX (2017).
[56] MAURICE, C., WEBER, M., SCHWARZ, M., GINER,
L., GRUSS, D., BOANO, C. A., MANGARD, S., AND
R ¨OMER, K. Hello from the other side: SSH over robust
cache covert channels in the cloud. In NDSS (2017).
[57] mbedtls. https://tls.mbed.org/.
[58] MOLNAR, D., PIOTROWSKI, M., SCHULTZ, D., AND
WAGNER, D. The program counter security model:
Automatic detection and removal of control-ﬂow side
channel attacks. In ICISC (2005).
[59] Openssl. https://www.openssl.org/.
[60] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache
attacks and countermeasures: the case of AES. CT-RSA
(2006).
[61] PASAREANU, C., PHAN, Q.-S., AND MALACARIA,
P. Multi-run side-channel analysis using symbolic ex-
ecution and Max-SMT. In CSF (2016).
[62] PERCIVAL, C. Cache missing for fun and proﬁt.
BSDCan (2005).
In
[63] RAJ, H., NATHUJI, R., SINGH, A., AND ENGLAND,
P. Resource management for isolation enhanced cloud
services. In CCSW (2009).
[64] REPS, T., AND BALAKRISHNAN, G.
memory-access analysis for x86 executables.
(2008).
Improved
In CC
[65] REYNOLDS, J. C. Reasoning about arrays. Commun.
ACM (1979).
[66] RISTENPART, T., TROMER, E., SHACHAM, H., AND
SAVAGE, S. Hey, you, get off of my cloud: Exploring
information leakage in third-party compute clouds. In
CCS (2009), ACM.
[67] SCHWARZ, M., LIPP, M., AND GRUSS, D. Javascript
zero: Real javascript and zero side-channel attacks. In
NDSS (2018).
[68] SCHWARZ, M., LIPP, M., GRUSS, D., WEISER, S.,
MAURICE, C., SPREITZER, R., AND MANGARD, S.
Keydrown: Eliminating software-based keystroke tim-
ing side-channel attacks. In NDSS (2018).
[69] SCHWARZ, M., WEISER, S., GRUSS, D., MAURICE,
C., AND MANGARD, S. Malware guard extension: Us-
ing SGX to conceal cache attacks. In DIMVA (2017).
[70] SHI, J., SONG, X., CHEN, H., AND ZANG, B. Limit-
ing cache-based side-channel in multi-tenant cloud us-
ing dynamic page coloring. In DSNW (2011).
[71] THAKUR, A. V., ELDER, M., AND REPS, T. W. Bi-
In SAS
lateral algorithms for symbolic abstraction.
(2012).
[72] THOMAS, D., AND PORST, S. REIL: A platform-
independent intermediate representation of disassem-
In CanSecWest
bled code for static code analysis.
(2009).
[73] TIWARI, M., OBERG, J. K., LI, X., VALAMEHR, J.,
LEVIN, T., HARDEKOPF, B., KASTNER, R., CHONG,
F. T., AND SHERWOOD, T. Crafting a usable microker-
nel, processor, and I/O system with strict and provable
In ACM SIGARCH Com-
information ﬂow security.
puter Architecture News (2011), ACM.
[74] TROMER, E., OSVIK, D., AND SHAMIR, A. Efﬁcient
cache attacks on AES, and countermeasures. Journal
of Cryptology 23, 1 (2010), 37–71.
[75] TSUNOO, Y., SAITO, T., SUZAKI, T., SHIGERI, M.,
AND MIYAUCHI, H. Cryptanalysis of DES imple-
mented on computers with cache. In CHES (2003).
[76] WANG, S., BAO, Y., LIU, X., WANG, P., ZHANG,
D., AND WU, D. Identifying cache-based side chan-
672    28th USENIX Security Symposium
USENIX Association
nels through secret-agumented abstract interpretation.
In Arxiv (2019).
[77] WANG, S., WANG, P., LIU, X., ZHANG, D., AND
WU, D. CacheD: Identifying cache-based timing chan-
nels in production software. In USENIX Sec. (2017).
[78] WANG, Z., AND LEE, R. B. Covert and side channels
due to processor architecture. In ACSAC (2006).
[79] WANG, Z., AND LEE, R. B. New cache designs for
thwarting software cache-based side channel attacks. In
ISCA (2007).
[80] WANG, Z., AND LEE, R. B. A novel cache architec-
ture with enhanced performance and security. In MI-
CRO (2008).
[81] WEISER, S., ZANKL, A., SPREITZER, R., MILLER,
K., MANGARD, S., AND SIGL, G. DATA – differen-
tial address trace analysis: Finding address-based side-
channels in binaries. In USENIX Sec. (2018).
[82] WICHELMANN, J., MOGHIMI, A., EISENBARTH, T.,
AND SUNAR, B. MicroWalk: A framework for ﬁnding