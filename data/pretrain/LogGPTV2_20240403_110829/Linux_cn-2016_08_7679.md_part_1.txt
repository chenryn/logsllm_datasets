---
author: Jeff Triplett
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 4
  likes: 0
  sharetimes: 1
  viewnum: 13393
date: '2016-08-13 20:35:00'
editorchoice: false
excerpt: Django 具有一个丰富多样的、由可供你使用的可重用应用组建起来的生态系统——PyPI 列出了超过 8000个 Django 应用——可你该如何知道哪些是最好的呢？
fromurl: https://opensource.com/business/15/12/5-favorite-open-source-django-packages
id: 7679
islctt: true
largepic: /data/attachment/album/201608/13/203554du5dylvu5gqdiedb.jpg
permalink: /article-7679-1.html
pic: /data/attachment/album/201608/13/203554du5dylvu5gqdiedb.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: Django 具有一个丰富多样的、由可供你使用的可重用应用组建起来的生态系统——PyPI 列出了超过 8000个 Django 应用——可你该如何知道哪些是最好的呢？
tags:
- Python
- Django
thumb: false
title: 5 个最受人喜爱的开源 Django 包
titlepic: true
translator: StdioA
updated: '2016-08-13 20:35:00'
---
![](/data/attachment/album/201608/13/203554du5dylvu5gqdiedb.jpg)
Django 围绕“[可重用应用](https://docs.djangoproject.com/en/1.8/intro/reusable-apps/)”的思想建立：自包含的包提供了可重复使用的特性。你可以将这些可重用应用组装起来，在加上适用于你的网站的特定代码，来搭建你自己的网站。Django 具有一个丰富多样的、由可供你使用的可重用应用组建起来的生态系统——PyPI 列出了[超过 8000个 Django 应用](https://pypi.python.org/pypi?:action=browse&c=523)——可你该如何知道哪些是最好的呢？
为了节省你的时间，我们总结了五个最受喜爱的 Django 应用。它们是：
* [Cookiecutter](https://github.com/audreyr/cookiecutter): 建立 Django 网站的最佳方式。
* [Whitenoise](http://whitenoise.evans.io/en/latest/base.html): 最棒的静态资源服务器。
* [Django Rest Framework](http://www.django-rest-framework.org/): 使用 Django 开发 REST API 的最佳方式。
* [Wagtail](https://wagtail.io/): 基于 Django 的最佳内容管理系统（CMS）。
* [django-allauth](http://www.intenct.nl/projects/django-allauth/): 提供社交账户登录的最佳应用（如 Twitter, Facebook, GitHub 等）。
我们同样推荐你看看 [Django Packages](https://www.djangopackages.com/)，这是一个可重用 Django 应用的目录。Django Packages 将 Django 应用组织成“表格”，你可以在功能相似的不同应用之间进行比较并做出选择。你可以查看每个包中提供的特性和使用统计情况。（比如：这是 [REST 工具的表格](https://www.djangopackages.com/grids/g/rest/)，也许可以帮助你理解我们为何推荐 Django REST Framework。
### 为什么你应该相信我们？
我们使用 Django 的时间几乎比任何人都长。在 Django 发布之前，我们当中的两个人（Frank 和 Jacob）就在 [Lawrence Journal-World](http://www2.ljworld.com/news/2015/jul/09/happy-birthday-django/) （Django 的发源地）工作（事实上，是他们两人推动了 Django 开源发布的进程）。我们在过去的八年当中运行着一个咨询公司，来建议公司怎样最好地应用 Django。
所以，我们见证了 Django 项目和社群的完整历史，我们见证了那些流行的软件包的兴起和没落。在我们三个之中，我们个人可能试用了 8000 个应用中至少一半以上，或者我们知道谁试用过这些。我们对如何使应用变得坚实可靠有着深刻的理解，并且我们对给予这些应用持久力量的来源也有着深入的了解。
### 建立 Django 网站的最佳方式：[Cookiecutter](https://github.com/audreyr/cookiecutter)
建立一个新项目或应用总是有些痛苦。你可以用 Django 内建的 `startproject`。不过，如果你像我们一样，对如何做事比较挑剔。Cookiecutter 为你提供了一个快捷简单的方式来构建项目或易于重用的应用模板，从而解决了这个问题。一个简单的例子：键入 `pip install cookiecutter`，然后在命令行中运行以下命令：
```
$ cookiecutter https://github.com/marcofucci/cookiecutter-simple-django
```
接下来你需要回答几个简单的问题，比如你的项目名称、 目录   （    repo    ） 、作者名字、E-Mail 和其他几个关于配置的小问题。这些能够帮你补充项目相关的细节。我们使用最最原始的 “*foo*” 作为我们的目录名称。所以 cokkiecutter 在子目录 “*foo*” 下建立了一个简单的 Django 项目。
如果你在 “*foo*” 项目中闲逛，你会看见你刚刚选择的其它设置已通过模板，连同所需的子目录一同嵌入到文件当中。这个“模板”在我们刚刚在执行 `cookiecutter` 命令时输入的唯一一个参数 Github 仓库 URL 中定义。这个样例工程使用了一个 Github 远程仓库作为模板；不过你也可以使用本地的模板，这在建立非重用项目时非常有用。
我们认为 cookiecutter 是一个极棒的 Django 包，但是，事实上其实它在面对纯 Python 甚至非 Python 相关需求时也极为有用。你能够将所有文件以一种可重复的方式精确地摆放在任何位置上，使得 cookiecutter 成为了一个简化（DRY）工作流程的极佳工具。
### 最棒的静态资源服务器：[Whitenoise](http://whitenoise.evans.io/en/latest/base.html)
多年来，托管网站的静态资源——图片、Javascript、CSS——都是一件很痛苦的事情。Django 内建的 [django.views.static.serve](https://docs.djangoproject.com/en/1.8/ref/views/#django.views.static.serve) 视图，就像 Django 文章所述的那样，“在生产环境中不可靠，所以只应为开发环境的提供辅助功能。”但使用一个“真正的” Web 服务器，如 NGINX 或者借助 CDN 来托管媒体资源，配置起来会比较困难。
Whitenoice 很简洁地解决了这个问题。它可以像在开发环境那样轻易地在生产环境中设置静态服务器，并且针对生产环境进行了加固和优化。它的设置方法极为简单：
1. 确保你在使用 Django 的 [contrib.staticfiles](https://docs.djangoproject.com/en/1.8/ref/contrib/staticfiles/) 应用，并确认你在配置文件中正确设置了 `STATIC_ROOT` 变量。
2. 在 `wsgi.py` 文件中启用 Whitenoise:
```
from django.core.wsgi import get_wsgi_application
from whitenoise.django import DjangoWhiteNoise
application = get_wsgi_application()
application = DjangoWhiteNoise(application)
```
配置它真的就这么简单！对于大型应用，你可能想要使用一个专用的媒体服务器和/或一个 CDN，但对于大多数小型或中型 Django 网站，Whitenoise 已经足够强大。