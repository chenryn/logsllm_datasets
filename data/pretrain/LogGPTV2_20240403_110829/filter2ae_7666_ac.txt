图4-14 djb2算法代码截图
由此我们可以看到，恶意代码在函数的获取方面是利用LoadLibrary和GetProcAddress这两个函数进行动态的获取。具体如图4-15所示。
![
](https://images.seebug.org/content/images/2020/07/de15eeeb-353d-4524-9ce8-e0d8288b304a.png-w331s)
图4-15 动态获取API函数
  * 沙箱检测
恶意代码枚举窗口数量，如果值小于12则退出进程，以此来检测自身是否运行在沙箱环境中。
![
](https://images.seebug.org/content/images/2020/07/6e0eb44c-9073-42f1-96ef-76ebb57b032e.png-w331s)
图4-16 沙箱检测代码
  * 反调试技术
方法1： 调用ZwProtectVirtualMemory函数修改ntdll.dll的“.text”节属性为可读可写可执行。
![
](https://images.seebug.org/content/images/2020/07/5a8e9061-67ce-4793-9450-4c05e87b25a6.png-w331s)
图4-17 修改ntdll.dll节属性
恶意代码通过修改DbgBreakPoint和
DbgUiRemoteBreakin函数代码，让调试器无法附加调试程序（如图4-18和图4-19）。给call调用后面指定一个未知地址，以此引发调试器崩溃退出。
![
](https://images.seebug.org/content/images/2020/07/ae9201ab-d558-4c46-9e06-931afa031775.png-w331s)
图4-18 DbgBreakPoint函数代码修改前后对比
![
](https://images.seebug.org/content/images/2020/07/9b8158fe-1c3f-40db-998c-7cd1be8b9d8a.png-w331s)
图4-19 DbgUiRemoteBreakin函数代码修改前后对比
方法2：
将ZwSetInformationThread函数的第二个参数设置为ThreadHideFromDebugger
（值为17），作用是在调试工具中隐藏线程。如果恶意软件处于被调试状态，那么该函数就会使当前线程（一般是主线程）脱离调试器，使调试器无法继续接收该线程的调试事件。效果就像是调试器崩溃了一样。
![
](https://images.seebug.org/content/images/2020/07/091d64a5-b545-462f-b5bd-6c6c7c2579de.png-w331s)
图4-20 隐藏线程达到反调试目的
方法3：
在使用ZwAllocateVirtualMemory函数申请内存空间时，为防止分析人员在调试时对关键函数下断点，恶意代码会提前将该函数的功能实现代码复制到本进程空闲空间中，使得后续在使用此函数时直接跳转到自身代码中执行。
![
](https://images.seebug.org/content/images/2020/07/58afdee8-870f-4cb9-a20d-410771189ad9.png-w331s)
图4-21 复制函数功能实现代码
方法4：
在调用部分敏感API函数时，会先调用自定义的检查函数做判断，以减少被安全产品检测的几率。
![
](https://images.seebug.org/content/images/2020/07/76344367-b5f2-4714-a5d7-cea5dbdbd6a5.png-w331s)
图4-22 检查函数是否被下断点或挂钩
该自定义的检查函数的主要功能：
① 将调用该函数前的shellcode代码（正序）按字节与0x4字节的返回地址做异或运算 进行加密处理；
② 调用ZwGetContectThread函数，通过检查_CONTEX结构中的Dr寄存器来判断是否 在调试环境中；
③ 判断此次要检查的关键API函数是否被下断点或挂钩。如果结果为否，则调用该API函数，否则程序直接崩溃退出；
④ 同“方法①”对shellcode代码（倒序）进行解密并跳转到返回地址处执行后续流程。
![
](https://images.seebug.org/content/images/2020/07/68143c27-3778-47f2-ac33-fd563c3ed4be.png-w331s)
图4-23 自定义检查函数代码
（2）恶意行为执行功能
如果以上一系列的沙箱以及反调试检测都通过，恶意代码则开始执行以下流程：
① 动态获取图4-24中的API函数，并将函数调用地址保存在堆栈中。
![
](https://images.seebug.org/content/images/2020/07/ba15e7c0-9ee8-4c56-a5e3-c2bba784d6fe.png-w331s)
图4-24 动态获取的API函数名称
② 根据指定地址处保存的数据内容特征（如果恶意代码未执行过创建子进程流程，那 么该地址处原数据为无效内容；否则，此处保存的是当前进程的全路径。）来判定是
否需要创建子进程。
![
](https://images.seebug.org/content/images/2020/07/7fd5f5ac-d5c0-46ca-8df1-0fc759c923cf.png-w331s)
图4-25 判断是否需要创建子进程
![
](https://images.seebug.org/content/images/2020/07/e481a500-666c-43ee-84ba-76820c4e89f9.png-w331s)
图4-26 对指定地址处保存的数据内容做判断
③ 调用CreateProcessInternal函数以挂起模式创建RegAsm.exe进程。
![
](https://images.seebug.org/content/images/2020/07/e9bbc607-ee01-4850-9313-d3ba290fbfde.png-w331s)
图4-27 创建系统子进程
④ 调用ZwOpenFile函数，获得映射文件mstsc.exe的句柄。
![
](https://images.seebug.org/content/images/2020/07/db778e3b-5f57-4467-a532-74f546c28bc0.png-w331s)
图4-28 获取mstsc.exe的句柄
⑤
使用ZwCreateSection和NtMapViewOfSection函数将“mstsc.exe”文件映射到RegAsm.exe内存中的0x00400000位置上。
![
](https://images.seebug.org/content/images/2020/07/698826e9-1723-4968-a9d1-3ba843e496fc.png-w331s)
图4-29 映射文件
⑥ 在傀儡进程中申请内存空间，并将我们正在调试的整个shellcode写入到目标内存中。
![
](https://images.seebug.org/content/images/2020/07/a0a2310e-c2a3-4caa-8348-6553937c3cf4.png-w331s)
图4-30 写入shellcode到系统子进程中
⑦ 使用ZwGetContextThread和ZwSetContextThread函数，获取和修改挂起的子
线程上下文中寄存器值，以实现重定向到shellcode入口处执行的目的。
![
](https://images.seebug.org/content/images/2020/07/0c7880d8-1441-441a-b823-b5471b005052.png-w331s)
图4-31 修改系统子进程的执行入口点
⑧ 若“步骤⑤”操作成功，则恢复执行子进程；否则结束当前程序。
![
](https://images.seebug.org/content/images/2020/07/50429c90-8d94-4550-aa3c-c2bb52f983bb.png-w331s)
图4-32 判断步骤⑤是否操作成功
（3）成功注入后恶意行为功能
我们在恶意代码调用NtResumeThread函数前，附加RegAsm.exe进程并在注入的shellcode执行处设置断点（如图4-33），然后再继续执行该函数来恢复线程运行。该shellcode前部分与之前的操作流程相同，将前文描述的各种检测重新执行一遍，直到在“判断是否创建子进程”处跳转到另外的分支流程。下面我们继续对后续功能进行详细地分析。
![
](https://images.seebug.org/content/images/2020/07/8d4adb27-6220-4069-84b2-318f297c4133.png-w331s)
图4-33 Shellcode执行处代码
判断开启RegAsm.exe程序的父进程是否为“C:\Users***\directory\filename.exe”。
如果不是，则将当前父进程文件复制到该目录中，将其命名为filename.exe并重新执行；
如果是，则在注册表HLM\Software\Microsoft\Windows\CurrentVersion\RunOnce目录里将该路径添加在“Startup
key”中，以实现长期驻留的目的。
![
](https://images.seebug.org/content/images/2020/07/5ab75fad-461f-4b3d-bf4a-cbd518e8e391.png-w331s)
图4-34 添加注册表信息代码
![
](https://images.seebug.org/content/images/2020/07/4747b7df-42a5-4a2c-a8de-43685a1329e6.png-w331s)
图4-35 添加注册表开机启动项