1
i r i
i xi
λα ∧ λβ .
1 and r1
α won’t leak any information on x1

i(ai ⊕ bi) = 0 which is equivalent to
Note that the secure alignment becomes a multi-party operation
over two secret bits a, b, each of which is divided into n shares,
e.g. ai(1 ≤ i ≤ n) and bi(1 ≤ i ≤ n). The alignment is done by
letting Pi broadcast [ai ⊕ bi]i. This allows them to check whether
equality doesn’t hold, then P1 flips a1 while every Pi(2 ≤ i ≤ n)
setting K1[a1] (cid:66) K1[a1]⊕∆i. Since x1
α are uniform, revealing
1 ⊕ r1
x1
1 or r1
α .
(s, p)
6.2 Efficiently Scalable ΠScalable,n
abit is built from the two-party Fabit. So we can scale
WRK [45]’s F n
abit protocol by instantiating every call to Fabit in their
up their Πn
Πn
abit using our ΠScalable
abit
(s, ℓ) in Figure 10 guarantees that each Pi uses
Note that ΠScalable
consistent choice bits across corresponding instances Fabit. Fabit
guarantee that a consistent ∆ is used between different executions.
abit
abit
.
aAND
(s, p)
6.3 Efficiently Scalable ΠScalable,n
The efficient scalability of our multi-party ΠScalable,n
protocol is de-
rived from the same idea of employing pool-based cut-and-choose.
The multi-party ΠScalable,n
is the same as the two-party ΠScalable
aAND ,
except that it uses the multi-party version of the procedures to
generate leaky-aANDs, produce random cut-and-choose choices,
and combine several leaky-aANDs into a full-secure aAND, which
were detailed in [45]. The security analysis of the pool-based cut-
and-choose remain identical to that for the two-party setting.
aAND
aAND
7 EVALUATION
Experimental Setup. Unless specified otherwise, we used Amazon
EC2 compute-optimized instances c5.large to run most of our
experiments. The c5.large virtual machines are equipped with 2
vCPU and 4 GB memory, running Ubuntu 18.04 and costing only
¢8.5/hour. We measured the LAN setting to be roughly 2 Gbps with
0.2 ms latency; and the WAN setting roughly 200 Mbps with 40ms
round-trip latency.
All experiments were configured to achieve 128-bit computa-
tional security and 40-bit statistical security. When no specific
Protocol ΠScalable,n
abit
(s, ℓ)
Public parameters: Security parameter s, batch size ℓ.
Input: Pi(1 ≤ i ≤ n) has ⊥.
(1) Set ℓ′ (cid:66) ℓ + s. Pi uniformly picks x ∈ {0, 1}ℓ′
and a random seed
(2) Each Pi runs an instance of Fabit with every Pk where k (cid:44)
i using batch size ℓ′. As a result, Pi as the OT receiver gets
and every Pk as an OT sender
k∈[n],k(cid:44)i
Si .
(cid:110)(cid:8)xk,ι, Mk[xk,ι](cid:9)
gets(cid:8)Kk[xk,ι](cid:9)
ι∈[ℓ′]
ι∈[ℓ′].
(cid:111)
(3) For every ι ∈ [ℓ′], Pi picks a uniform xι and aligns all the values of
xk,ι with xι. The alignment is done by first revealing whether xk,ι =
xι to every Pk , then leaving xk,ι unchanged if the equality holds;
while flipping xk,ι (with Pk refreshing Kk[xk,ι] (cid:66) Kk[xk,ι] ⊕ ∆k )
otherwise.
(4) (Consistency Checks) For j ∈ [s], run the following steps:
(cid:110)
(a) All the parties collaborate to toss a random ℓ′-bit string r.
(b) For every distinct i, k ∈ [n], Pi and Pk perform:
(i) Pi computes and broadcasts Xj =ℓ′
ι=1 rι Mk[xι](cid:111)
ι=1 rι Kk[xι](cid:111)
Kk[Xj] (cid:66)ℓ′
Mk[Xj] =ℓ′
.
(ii) Pk computes
k(cid:44)i
(iii) Pi sends Mk[Xj] to Pk who verifies its validity.
ι=1 rι xι, then com-
.
putes
(cid:110)
k(cid:44)i
(5) All parties return the first ℓ objects.
Figure 10: The protocol ΠScalable,n
abit
realizing F n
abit
application is mentioned, experiments are run over a random cir-
cuit of 25% ANDs and 75% XORs, with speeds measured over a
period of at least 10 minutes. Experimental comparisons with re-
lated work were made by running reference implementations in
the same hardware and network environment.
7.1 Scalability
nanoPI can efficiently run circuits at unprecedented scales. Table 5
shows several benchmark computations we tested, none of which
were ever possible to run using prior techniques. Most notably, we
have tested nanoPI on building a multi-party actively-secure logis-
tical regression and run it over realistic datasets like MNIST [24].
Followed the observation of SecureML [30], we chose statistical
gradient descend (SGD) approach of training, used RELU to ap-
proximate the logistic function, and handled decimal arithmetics
using 24-bit fixed-point number system. Still, the resulting circuit
is gigantic, consisting of 4.7 billion ANDs and 8.9 billion XORs,
assuming a two-pass scan of a 1K records dataset is involved in
SGD training.
We have also tested nanoPI on running long-term actively-
secure multi-party computation services, executing a random cir-
cuit. The experiments were run on n1-standard-1 machines pro-
vided by Google Compute Engine connected with LAN, executing
40.8 billions ANDs in 16 days in the four-party setting.
7.2 Performance
As is evidenced from the benchmark applications (Table 5), our
two-party protocols executed at fairly consistent speeds: roughly
abit
46K AND/s on LAN and 15.8K AND/s on WAN. In four-party sce-
narios, the speeds reduce to roughly 31.6K AND/s and 10K AND/s,
respectively. The bandwidth overhead is about 759 bytes per AND
gate varying a little over different applications. Also note that the
aAND combined is about 5 times
bandwidth cost of ΠScalable
that of authenticated circuit garbling, which matches well with our
theoretical analysis.
and ΠScalable
Figure 11 shows how increasing memory helps speedup our
protocol. In the LAN setting, we observe a seemingly linear correla-
tion between memory budget and protocol execution speed when
memory budget is less than 50MB. Once over 200MB memory is
available, the speed stays roughly the same, mainly because when
the batch size is large enough, time spend on computation will
dominate other factors including round-trip latency. For the WAN
setting, the linear correlation continues until ∼500MB memory is
available, since now the latencies are close to two orders of mag-
nitude larger than LAN. Our approach scales with the number of
parties much like WRK (see Figure 12).
7.3 Comparison with Related Work
Table 6 shows how the performance of this work compares with two
closest pieces of work, WRK and Pool-JIMU, in the two-party setting.
We considered three kinds of memory budgets in combination with
three types of network environments.
Compared with Pool-JIMU, our protocol and WRK will outper-
form Pool-JIMU’s speed by 1.4–3.5x in low bandwidth network.
This is mainly because Pool-JIMU is 6–8x more costly in bandwidth.
But if the network bandwidth is high Pool-JIMU can be 50–130%
faster than both our work and WRK due to its more efficient lo-
cal computation. However, Pool-JIMU doesn’t work in the general
MPC setting (Figure 13).
Compared with WRK, performance of our protocols is only
slightly cutback if memory budget is 200MB or greater. When mem-
ory budget is low, although our approach runs slower than WRK,
ours can still run arbitrarily large circuits whereas WRK can only
run small circuits that fits in the available memory. Interestingly, in
the setup with 200MB memory and a (200Mbps, 40ms) WAN, WRK
runs 86% faster than ours while either reducing or boosting the
network performance allows our approach to catch up with WRK.
This is because switching from (200Mbps, 40ms) to (20Mbps, 40ms)
network, the speed bottleneck of WRK and our protocol will shift
from roundtrip latency to network transmission; while switching
from (200Mbps, 40ms) to (2Gbps, <1ms) network, the bottleneck
will shift from roundtrip latency to computation. This shows that
the drawback of our approach is only evident in limited scenarios
when latency cost dominates both computation and transmission.
8 CONCLUSION
Round and space complexity are two conflicting but equally im-
portant goals in designing actively-secure MPC protocols. We gave
an effective programming technique to scale WRK protocols up
to arbitrary-size circuits. The programmatic and cryptographic
transformations discussed in this paper is integrated into nanoPI,
a toolchain opensourced on github to semi-automate the devel-
opment and deployment of extreme-scale actively-secure MPC
applications.
ACKNOWLEDGMENTS
We thank Xiao Wang and Weixi Ma for helpful comments and
discussions. We thank Rob Henderson for pointers on obtaining
and managing a cluster of experiment machines. We appreciate
the generous free credits from Google for using the Google Cloud
Platform. This work is supported by NSF award #1464113 and NIH
1U01EB023685-01.
REFERENCES
[1] Arash Afshar, Payman Mohassel, Benny Pinkas, and Ben Riva. 2014. Non-
interactive secure computation based on cut-and-choose. In EUROCRYPT.
[2] Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman. 2006. Compil-
ers: Principles, Techniques, and Tools (2Nd Edition). Addison-Wesley Longman
Publishing Co., Inc., Boston, MA, USA.
[3] Donald Beaver, Silvio Micali, and Phillip Rogaway. 1990. The round complexity
of secure protocols. In STOC.
[4] Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. 1988. Completeness
theorems for non-cryptographic fault-tolerant distributed computation. In STOC.
[5] Henry Carter, Charles Lever, and Patrick Traynor. 2014. Whitewash: Outsourcing
garbled circuit generation for mobile devices. In ACSAC.
[6] Henry Carter, Benjamin Mood, Patrick Traynor, and Kevin Butler. 2016. Secure
outsourced garbled circuit evaluation for mobile devices. Journal of Computer
Security 24, 2 (2016), 137–180.
[7] David Chaum, Claude Crépeau, and Ivan Damgard. 1988. Multiparty uncondi-
tionally secure protocols. In STOC.
[8] Ivan Damgård, Marcel Keller, Enrique Larraia, Valerio Pastro, Peter Scholl, and
Nigel Smart. 2013. Practical covertly secure MPC for dishonest majority–or:
breaking the SPDZ limits. In ESORICS.
[9] Jack Doerner, David Evans, and Abhi Shelat. 2016. Secure Stable Matching at
Scale. In ACM CCS.
[10] Tore Frederiksen, Thomas Jakobsen, Jesper Nielsen, Peter Nordholt, and Claudio
Orlandi. 2013. Minilego: Efficient secure two-party computation from general
assumptions. In EUROCRYPT.
[11] Carmit Hazay, Yuval Ishai, and Muthuramakrishnan Venkitasubramaniam. 2017.
Actively Secure Garbled Circuits with Constant Communication Overhead in
the Plain Model. In TCC.
[12] Carmit Hazay, Peter Scholl, and Eduardo Soria-Vazquez. 2017. Low cost constant
round MPC combining BMR and oblivious transfer. In ASIACRYPT.
[13] Yan Huang, Peter Chapman, and David Evans. 2011. Privacy-Preserving Applica-
tions on Smartphones.. In HotSec.
[14] Yan Huang, David Evans, Jonathan Katz, and Lior Malka. 2011. Faster Secure
Two-Party Computation Using Garbled Circuits. In USENIX Security Symposium.
[15] Yan Huang, Jonathan Katz, Vladimir Kolesnikov, Ranjit Kumaresan, and Alex
Malozemoff. 2014. Amortizing garbled circuits. In CRYPTO.
[16] Peter Z Ingerman. 1961. A way of compiling procedure statements with some
comments on procedure declarations. Commun. ACM 4, 1 (1961), 55–58.
[17] Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank. 2003. Extending oblivious
transfers efficiently. In CRYPTO.
[18] Marcel Keller, Emmanuela Orsini, and Peter Scholl. 2015. Actively secure OT
extension with optimal overhead. In CRYPTO.
[19] Marcel Keller, Emmanuela Orsini, and Peter Scholl. 2016. MASCOT: faster mali-
cious arithmetic secure computation with oblivious transfer. In CCS.
[20] Vladimir Kolesnikov, Jesper Nielsen, Mike Rosulek, Ni Trieu, and Roberto Trifiletti.
2017. DUPLO: Unifying Cut-and-Choose for Garbled Circuits. In ACM CCS.
[21] Vladimir Kolesnikov and Thomas Schneider. 2008. Improved garbled circuit: Free
XOR gates and applications. In ICALP.
[22] Benjamin Kreuter, Abhi Shelat, and Chih-Hao Shen. 2012. Billion-Gate Secure
Computation with Malicious Adversaries. In USENIX Security Symposium.
[23] Peter J Landin. 1964. The mechanical evaluation of expressions. Comput. J. 6, 4
(1964), 308–320.
[24] Yann LeCun, Corinna Cortes, and CJ Burges. 2010. MNIST handwritten digit
database. AT&T Labs. Available: http://yann.lecun.com/exdb/mnist (2010).
[25] Yehuda Lindell. 2016. Fast cut-and-choose-based protocols for malicious and
covert adversaries. Journal of Cryptology 29, 2 (2016), 456–490.
[26] Yehuda Lindell and Benny Pinkas. 2002. Privacy preserving data mining. Journal
of Cryptology 15, 3 (2002).
[27] Yehuda Lindell, Benny Pinkas, Nigel P Smart, and Avishay Yanai. 2015. Efficient
constant round multi-party computation combining BMR and SPDZ. In CRYPTO.
[28] Yehuda Lindell and Ben Riva. 2015. Blazing fast 2pc in the offline/online setting
with security for malicious adversaries. In ACM CCS.
[29] Chang Liu, Xiao Wang, Kartik Nayak, Yan Huang, and Elaine Shi. 2015. Oblivm: A
programming framework for secure computation. In IEEE Symposium on Security
and Privacy.
Table 5: Experiments on selected applications
AES
Sorting
(1024 cipher blocks)
(6.9M, 25.9M)
4
2
3.83
2.57
11.83
7.62
4.44
26.66
(5K 32-bit integers)
(11.4M, 39.6M)
4
2
6.07
4.17
18.85
12.03
7.19
43.15
DNA Edit-distance
(2000-nucleotides seq.)
(340M, 880M)
2
4
179
123
359
559
214.69
1288.14
Logistic Regression
(1K-row, 784-column MNIST dataset)
(4.7B, 8.9B)
2
1676
82 hours
2969.32
4
2218
129 hours
17815.94
Gate Count (#AND, #XOR)
Number of Parties
e LAN (minutes)
m
WAN (minutes)
T
, ΠScalable
ΠScalable
i
†
abit
aAND (GB)
h
t
d
i
w
d
n
a
B
ΠScalable
mpc
(GB)
0.89
5.35
1.46
8.73
43.53
261.16
602.00
3611.99
† Bandwidth numbers are the sum of the outgoing traffic of all parties during a specific application.
)
s
/
D
N
A
(
d
e
e
p
S
40K
30K
20K
10K
0
10