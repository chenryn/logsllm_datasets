for this parameter.
2. It also integrates a path pruning process that directs symbolic execution to
only considers program paths connecting the program entry point to the
overﬂow points and then to the corresponding sinks (see Sect. 4.2). In the
above example, all branches that do not lead to 0x5d180c82 and then to
0x5d180c8a are eliminated from symbolic execution after path pruning.
With the assistance of these two heuristics, the symbolic execution engine
in VIOSE validates if the sinks for each candidate vulnerability are reachable
from the entry point of the binary. If so, the engine deems the vulnerability as
252
Y. Zhang et al.
genuine and output example inputs to the binary that trigger the vulnerabil-
ity. For example, for the above example vulnerability, [hdsa + 8]=0x01000000,
[hdsa + 0ch]=0x01005451, [hdsa + 10h]=0x00000010 are generated for the
three parameters of DSA InsertItem, in order to exploit the vulnerability at
0x5d180c8a.
The integration of StaticTaint and VIOSE enables them to compensate the
limitations of each other, so as to achieve a balance between the accuracy and eﬃ-
ciency of vulnerability detection. On one hand, StaticTaint incorporates capabili-
ties to ﬁlter out a signiﬁcant portion of false positives, so that the time-consuming
symbolic execution in VIOSE is applied to validate much fewer vulnerabilities.
On the other hand, VIOSE validates and rules out false positives passing through
StaticTaint with more rigorous analysis.
3 StaticTaint: Identify Vulnerabilities with Pattern
Match
As illustrated in Fig. 1, StaticTaint is consisted of three modules: the Code
Leverage module ﬁrst translates the binary under analysis into an IR; the Vul-
nerability Identiﬁcation module then traverses the IR to identify all potential
integer overﬂow vulnerabilities based on pre-deﬁned vulnerability patterns; the
Vulnerability Filter lastly examines the identiﬁed vulnerabilities and elim-
inates false positives. Vulnerabilities passing the Vulnerability Filter are then
forwarded to VIOSE for further validation.
3.1 Code Leverage
StaticTaint ﬁrst reverse-engineers an input binary into an equivalent assembly
program using IDA Pro2, and then eliminates the side-eﬀect of the assembly
program by transforming it into an IR using the Code Leverage module.
The IR language used in StaticTaint is derived from that proposed in Vine
[22], with augmented support for type information and SSA representation. It
includes the following ﬁve types of grammatical terms:
– assignment Assign(var, exp), assigning the value of exp to variable var;
– jump statement Jmp(label), which shifts the program’s execution to the
statement labeled as label;
– conditional jump Cjmp(exp, label1, label2), which directs the program’s
execution to the statement labeled as label1 if exp is evaluated as true, or
to statement labeled as label2 otherwise;
– labeled statement (label, st), where st is any SSA statement and label is
– function invocation statement Call(exp) that invokes the function whose
a string label assigned to st; and
initial address is the value of exp.
2 Hex-Rays Inc., https://www.hex-rays.com/products/ida/index.shtml (May 2015).
Improving Accuracy of Static Integer Overﬂow Detection in Binary
253
Variables in our IR are divided into memory and register variables, where
memory (heap or stack) variables are deﬁned as a combination of functions
associated with these variables and their oﬀsets to the bottom of the stack/heap.
Each variable in our IR has ﬁelds to record its storage size and sign. This is in
contrast to Vine, which only records the storage size of variables. The extra
sign ﬁeld enables to collect and calculate the sign information of variables more
accurately, which is important to the calculation of correct overﬂow conditions
(see Sect. 3.3) and to the accuracy of subsequent vulnerability validation.
We integrate both control- and data-ﬂow analyses to reconstruct the sign
information from binary code. This starts with collecting useful information
from the reverse-engineered assembly code to initialize the sign of variables. For
example, variables used as array index, memory size and unsigned jumps (such
as JA* and JB*) are unsigned, while those used in conditional jump instructions
(i.e. JG* and JL*) are signed.
3.2 Vulnerability Identiﬁcation
StaticTaint considers an arithmetic instruction as a (potential) overﬂow point,
if it involves integer variables and matches with one or several patterns in the
Vulnerability Pattern Library (VPL). A pattern in the VPL deﬁnes a dangerous
way of using a possibly overﬂowed integer that creates security vulnerabilities.
Currently, the VPL used by StaticTaint includes the following patterns:
– Integer usage in security-sensitive operations. Integer overﬂows become
vulnerabilities only when they are used in security-sensitive operations,
including:
• Memory allocation. If an overﬂowed integer is used as the size parameter
of memory allocation functions (e.g. malloc series), the actual size of the
memory allocated can be smaller than intended. This may lead to buﬀer
overﬂow vulnerabilities.
• Memory Indexing. If an overﬂowed integer is used as the index of an
array, a pointer or a structure, one can gain access to unintended memory
area, leading to information leakage or memory manipulation.
• Conditional judgment. If an overﬂowed integer is used in the conditions
of conditional jump statements, the program control ﬂow can be manip-
ulated to circumvent necessary checks, e.g. permission checks and data
integrity checks.
– Lack of overﬂow checking. Any integer arithmetic operation may cause
integer overﬂow vulnerabilities if it is not followed by overﬂow checks.
– Incomplete or wrong input checks. If the the size and signedness of an
integer variable are not properly checked before being used in integer opera-
tions (e.g. addition and multiplication), an overﬂow may occur.
The above patterns are derived from our studies on publicly announced inte-
ger overﬂow vulnerabilities (e.g. those in the CVE database) and from the acad-
emic literature (e.g., [10,25]). Of course, the VPL can be continuously updated
to capture our evolving understanding of integer overﬂow vulnerabilities.
254
Y. Zhang et al.
Technically, the process of identifying all potential overﬂow points in a binary
based on pattern matching is implemented as an inter-procedural data ﬂow
analysis, which proceeds as follows:
1. Traverse the program for vulnerability identiﬁcation. For every integer arith-
metic instruction without a subsequent check on its result, the address of this
instruction and the variable storing its result are logged as a possible over-
ﬂow point in the overﬂow point list. For example, if the instruction Assign(c,
Add(a, b)) at address 0x401000 commits a potential overﬂow, an entry (c,
0x401000, 0) is added to the list of overﬂow points, in which “0” indicates
that this instruction is where the integer overﬂow originates.
2. Broadcast the identiﬁcation results across the entire program to collect vari-
ables whose values are aﬀected by the potentially overﬂowed integer val-
ues. Assuming an instruction Assign(d, Div(c, 2)) with address 0x401001
immediately following the overﬂow point, then an entry (d, 0x401001, 1)
is created and added to the list of overﬂow points, where “1” indicates one
propagation step away from the overﬂow point.
3. A second round of traversing is performed on the program to collect the
information of how potentially overﬂowed integer variables are used. If the
use of such a variable matches with one or more patterns in the VPL, it
is deemed as a potential vulnerability, and an entry (overﬂow point, usage
information) is added to the overﬂow point list. Consider the above exam-
ple again. Suppose variable c is used in two places: a conditional jump
instruction Cjmp(c, label1, label2) with address 0x4001005 and a mem-
ory allocation instruction with address 0x401008. Then an entry (0x401000,
(0x401005, BranchCond), (0x401008, MemAlloc)) is added to the over-
ﬂow point list, where BranchCond represents the use of c in a conditional
jump and MemAlloc indicates its use in memory allocation.
3.3 Vulnerability Priority Ranking
The vulnerability priority ranking algorithm in the Vulnerability Filter module
decides which vulnerabilities warrant further analysis, based on the observation
that unintentional overﬂows are more likely to be exploited than intentional ones.
When overﬂowed integer values are used in diﬀerent types of sinks, diﬀerent
levels of risk might present to the system security. For example, it has been
reported that more than a half of integer overﬂow vulnerabilities are caused
because memory allocation operations use overﬂowed integer values to decide
the size of memory to be allocated [31], while vulnerabilities due to overﬂowed
values being used as the index to dereference memory structures are rare. Thus,
memory allocation operations are more critical to system security than sinks like
memory dereference operations.
We assign diﬀerent weights to diﬀerent types of sinks, according the following
rules, to capture their impact to security:
– A high weight is assigned to memory allocation operations.
– A medium weight is assigned to conditional statements.
Improving Accuracy of Static Integer Overﬂow Detection in Binary
255
– A low weight is assigned to memory dereference operations.
– For an arithmetic operation that potentially causes integer overﬂow, if the
program has a check over its result immediately after the operation, then a
negative weight is assigned to the check. This is consistent with the experience
that the threat of integer overﬂow can be reduced if appropriate checks are
instrumented in the program.
It should be noted that, if further knowledge of integer overﬂow vulnerabil-
ities and their causes becomes available, the weights assigned to diﬀerent types
of sinks could and should be adjusted accordingly.
Having weights representing diﬀerent security risks assigned, the Vulnera-
bility Filter is able to calculate the priorities of candidate integer overﬂow vul-
nerabilities. Formally, suppose a program has n types of sinks, and an integer
overﬂow vulnerability has its overﬂowed integer value used in ni sinks of type i,
where i = 1, 2, .., n. its priority, p, is calculated following Eq. 1, where:
1. ωi is the weight assigned to sinks of type i.
2. pcij is the number of propagation steps from the arithmetic operation that
introduces the overﬂowed integer value (also known as source) to the jth use
of this value in type i sinks. A propagation step is a transformation over the
potentially overﬂowed integer value, such as applying an Add or Sub operation
to the value. Moreover, pcip ≤ pciq for any 0 ≤ p ≤ q ≤ ni.
3. qi is a constant weakening factor that the analyst assigns to type i sinks. This
factor speciﬁes how the threat of using an overﬂowed integer in a type i sink
decreases as the distance (i.e., the number of propagation steps) between this
sink and source increases.
p =
n(cid:2)
nj−1(cid:2)
i=1
j=0
((ωi − pcij × qi)/2j)
(1)
Intuitively speaking, Eq. 1 formalizes two rules of evaluating potential integer
overﬂow vulnerabilities: (1) the deeper a potentially overﬂowed value is propa-
gated into the program, the less likely its use in sinks commits real vulnerabilities;
and (2) it is more risky to use a potentially overﬂowed integer value in multiple
types of sinks than to use it in multiple sinks of the same type. Hence, if more
than one type i sinks use the potentially overﬂowed integer, these extra sinks
only contribute partially to the likelihood of the vulnerability being real (see the
2j divisor in Eq. 1).
Once the priorities of all identiﬁed vulnerabilities are calculated, one can
specify a threshold, so that only vulnerabilities with priorities higher than the
threshold are passed to VIOSE for further validation. This feature is particu-
larly useful when the time and resource available for vulnerability validation is
limited. The selection of such a threshold is based on the user’s analysis needs: a
higher threshold helps on to spend most resources on validating the most likely
vulnerabilities, while a lower threshold helps to gain a better false negative rate.
We have applied the vulnerability priority raking algorithm to a number of
Windows binaries, and investigated how the selection of the priority threshold
256
Y. Zhang et al.
Table 1. Overﬂow condition for arithmetic operations
Overﬂow point Sign of a and b Overﬂow condition
Add(a,b)
Mul (a,b)
Sub (a,b)
Unsigned
Signed
Unsigned
Signed
Unsigned
Signed
a + b  0&b > 0&a+b  a)
a! = 0&(a ∗ b)/a! = b
a! = 0&(a ∗ b)/a! = b
a  0&b > 0&a < a− b)|(a < 0&b < 0&a− b < a)
impact the false negatives that INIDO ﬁnally reported. Experimental results
conﬁrmed that with a simple “training” process (see Sect. 5.1) for the threshold
selection, the algorithm eliminated 78 % false positives generated by pattern
matching without omitting any known vulnerability (see Sect. 5.4).
We acknowledge that Eq. 1 is formalized based on our investigation of known
integer overﬂow vulnerabilities. Even though our experiments demonstrate its
eﬀectiveness in distinguishing genuine vulnerabilities from false positives, there
is still possibility that it does not accurately capture how integer overﬂow leads
to security vulnerabilities in realistic binaries. Large-scale studies on realistic
binaries can certainly help us conﬁrm the rules underlying Eq. 1 and optimize
the conﬁguration of its parameters. For example, studies on realistic binaries can
improve our understanding on how the distance from overﬂow points to sinks
aﬀects the likelihood of an integer overﬂow leading to a vulnerability. We leave
this to future study.
3.4 Vulnerable Path Calculation
To eliminate the false positives reported by the priority ranking algorithm, we
examines whether the WPs associated with the paths from the program’s entry
point to overﬂow points are satisﬁable. Given an identiﬁed vulnerability (i.e.,
an overﬂow point and the sink(s) using the overﬂowed integer value), the tactic
validates if it is genuine as follows:
1. The overﬂow condition c is calculated for the overﬂow point according to Table 1.
This condition, if satisﬁed, ensures that an overﬂowed value be assigned to the
corresponding variable;
2. All possible paths connecting the program entry point to the overﬂow point
are translated into a Guarded Command Language format (denoted as G);
3. The WP s = wp(G, c) is calculated by following the algorithm in [11] for