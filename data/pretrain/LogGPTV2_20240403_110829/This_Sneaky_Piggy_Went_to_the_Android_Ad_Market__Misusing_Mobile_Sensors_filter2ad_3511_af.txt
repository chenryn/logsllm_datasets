prove UI element coverage when automatically exercising Android
apps, and publicly released a tool that outperforms Android’s Mon-
key. Their tool, Reaper, performs a breadth first traversal for identi-
fying an app’s visual and “interactable” elements. However, there
are cases that exercising tools can not cover (e.g., playing a complex
game). Another potential obstacle relates to apps that require the
user to login prior to interacting with the app. While one could
leverage Single Sign-On support , we opted against that as it might
potentially influence the in-app ads delivered to our device.
Advertisement coverage and bias. Due to the inherently com-
plex and dynamic nature of the ad ecosystem, coupled with the
prevalence of personalized and micro-targeted advertisements, it is
likely that our experiments reveal only a limited snapshot of the
ad campaigns (mis)using motion sensors in the wild, and as such
should be considered a lower bound. While providing a compre-
hensive measurement of the use of sensor data from in-app ads,
we leverage a VPN service to diversify our device’s geolocation
and reduce the potential bias in our ad collection process. Nonethe-
less, we note that prior work has demonstrated how to detect that
users are behind a VPN, which could allow ad libraries to infer our
device’s true location [73]. Additionally, persistent and hardware
identifiers can be used to track users even when using a VPN. While
we empirically found that using a VPN is sufficient for obtaining
foreign ads, it is possible that certain apps or ads modified their
behavior based on the use of VPN; in our analysis ads fetched over
VPN sessions were less likely to collect sensor data. Overall, due
to the ramifications of our attacks, and reports on the increase of
sensor-based ads [74], we argue that there is dire need for stricter
access control policies for mobile sensor data.
Network flows and JavaScript. Our study involves the analy-
sis of network traffic and JavaScript code for potentially suspicious
behavior and data leakage. In most cases, the network flows and
JavaScript code were encrypted and obfuscated respectively, while
dynamic code loading for fetching additional libraries further com-
plicated the process. While we also manually examined these cases,
it is possible that we missed additional cases of suspicious behavior.
As such our findings should be considered a lower bound of the
privacy risks posed by in-app ads that access motion sensors.
Interstitial ad libraries. Interstitial ads are very popular and
many third-party libraries provide such functionality. In our study
we focused on Google’s library due to its popularity, and our analy-
sis resulted in the identification of flaws that magnify the impact
of our attacks. In practice, other third-party ad libs that offer inter-
stitials may suffer from similar (or additional flaws).
Ad ecosystem practices. Based on our findings we believe that
it is possible for anyone to abuse the mobile ad ecosystem for
exfiltrating data by delivering an ad that captures the rich infor-
mation provided by sensors. However, we note that different ad
networks and DSPs may have different policies and constraints for
the JavaScript code permitted in ads. Additionally, ad networks and
DSPs may dynamically analyze submitted ads in a sandboxed envi-
ronment before publishing them, to eliminate cases of malvertising.
Given that the ability for ads to access sensor data is an emerging
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1076trend for increasing user engagement [74] it seems unlikely that
this will be prevented by many ad networks or DSPs.
Malvertising. Our study identifies an emerging threat that orig-
inates from popular apps downloaded from the official Google
Play Store and advertisements fetched from major and legitimate
services, as these affect even the most cautious users. We did not an-
alyze malware or suspicious apps from third-party markets, and as
such do not explore if ads fetched from less reputable or malicious
ad networks are misusing sensor data.
10 RELATED WORK
To the best of our knowledge, this paper presents the first explo-
ration of how the ad ecosystem can be misused for stealthy sensor-
based attacks. Here, we briefly discuss pertinent prior work on
in-app ads, the HTML5 WebAPI, and the risks posed by WebView.
In-app advertising. In-app ads are an essential part of the mo-
bile ecosystem and the defacto source of revenue for app developers.
This relationship introduces several privacy issues, as PII are ac-
cessed and leaked by embedded ad libraries [22, 35, 72, 84, 85].
Meng et al. [60] collected more than 200K real user profiles and
found that mobile ads are personalized based on both users’ de-
mographic and interest profiles. They conclude that in-app ads
can possibly leak sensitive information and ad networks’ current
protection mechanisms are insufficient. Reardon et al. [81] found
that third-party SDKs and ad companies also use covert and side
channels in order to obtain and leak permission protected data
from apps that do not hold the appropriate permissions. Reyes et
al. [87] performed an analysis of COPPA compliance and found
that the majority of the apps and the embedded third-party SDKs
contain potential COPPA violations. Nguyen et al. [67] performed
a large scale study to understand the current state of the violation
of GDPR’s explicit consent and found that 34.3% of the apps sent
personal data to advertisement providers without the user’s explicit
prior consent. Contrary to the popular belief that ad networks are
responsible for user privacy, a recent study found that the privacy
information presented from ad networks to developers complies
with legal regulations and app developers are the responsible en-
tity [102]. Another issue with in-app advertising is the potential
for ad fraud from the apps or embedded advertising libraries. Inter-
estingly, a recent study revealed that most ad fraud activities (e.g.,
triggering URL requests without user interaction) originate from ad
libraries, with two libs also committing ad fraud by displaying ads
in invisible WebViews that do not appear on the screen [54]. Several
studies have also proposed solutions for preventing privacy leak-
age. Adsplit [94] allows the ad library to run in a separate process
with different permissions, AdDroid [76] separates the privileged
advertising functionality, and CompARTist [49] enforces privilege
separation using compiler-based instrumentation. More restrictive
solutions [4, 5, 72, 85, 95] have also been introduced that completely
block advertising using network filtering or by employing VPNs.
HTML5 WebAPI. The standardized features of the WebAPI al-
low developers to create interactive elements and greatly improve
the web experience, leading to higher user engagement [80]. How-
ever, these rich features can also be misused by privacy-invasive
or malicious entities, such as web tracking and fingerprinting; the
research community has extensively studied and presented such
techniques [3, 37, 38, 68, 90]. For example, Eckersley et al. [37] ex-
plored browser fingerprinting in depth and introduced the Panop-
ticlick project for identifying common fingerprinting features in
web browsers. While traditional fingerprinting techniques [104]
are used heavily to track desktop users, smartphone devices offer
additional features for this purpose. Das et al. [25] presented a
study on web scripts accessing mobile sensors in 100K websites.
Apart from privacy-invasive tracking techniques, the rich features
of mobile devices can also be used for augmenting security. Alaca et
al. [9] explored device fingerprinting for enhancing web authentica-
tion, while Goethem et al. [105] proposed an accelerometer-based
mechanism for multi-factor mobile authentication.
WebView. Numerous studies have showed that misconfigured
hybrid apps pose a significant risk to users’ privacy, and Luo et
al. [56] identified several attacks against WebViews. The most noto-
rious example is the @JavascriptInterface that allows JavaScript
code to access Java methods. Rizzo et al. [89] evaluated the impact
of such possible code injection attacks using static information flow
analysis, while BridgeScope [112] assesses JavaScript interfaces
based on a custom flow analysis. Additionally, Mutchler et al. [64]
performed a large-scale analysis of more than a million mobile apps
and identified that 28% contains at least one WebView vulnerability.
11 CONCLUSION
The unique hardware capabilities (i.e., sensors) of modern smart-
phones enable a series of features that allow for increased inter-
action with users, which can significantly improve their overall
experience. Unfortunately, novel features also introduce new oppor-
tunities for misuse. In this paper we demonstrated a novel attack
vector that misused the ad ecosystem for delivering sensor-based
attacks. The key differentiating factor of our attack vector is that it
magnifies the impact and scale of sensor-based attacks by allowing
attackers to stealthily reach millions of devices without the need for
a malicious app to be downloaded or users to be tricked into visiting
a malicious page. To make matters worse, we have uncovered a
series of flaws in Android’s app isolation, life cycle management,
and access control mechanisms that enhance our attacks’ coverage,
persistence and stealthiness. Subsequently, we created a realistic
dynamic analysis framework consisting of actual smartphone de-
vices for providing an in-depth view of mobile-sensor access, which
allowed us to analyze a large number of popular apps and ads over
a period of several months. Our findings reveal an emerging threat,
as we were able to identify in-app advertisements accessing and
leaking motion sensor values. Accordingly we propose a set of
guidelines that should be adopted and standardized to better pro-
tect users. We hope that our study will contribute to the ongoing
body of research pushing for better permission and access control
management in Android by highlighting a previously-unexplored
attack vector.
ACKNOWLEDGMENTS
This project has received funding from Horizon 2020 under grant
agreements No 777855, 830927, 833683, and the National Science
Foundation under contract CNS-1934597. This paper reflects only
the views of the authors and the funding bodies are not responsible
for any use that may be made of the information it contains.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea10772021-02-25.
[5] AdGuard. 2021. Surf the Web Ad-Free and Safely. Shield up! https://adguard.
com/en/welcome.html. Accessed: 2021-02-25.
[6] AdMob. 2021.
How much revenue can you earn from AdMob.
https://admob.google.com/home/resources/how-much-revenue-can-you-
earn-from-admob/. Accessed: 2021-02-25.
[7] AdSense. 2021. Ad implementation policies - Ad placement policies. https:
//support.google.com/adsense/answer/1346295. Accessed: 2021-02-23.
[8] Pieter Agten, Wouter Joosen, Frank Piessens, and Nick Nikiforakis. 2015. Seven
months’ worth of mistakes: A longitudinal study of typosquatting abuse. In
Proceedings of the 22nd Network and Distributed System Security Symposium
(NDSS 2015). Internet Society.
[9] Furkan Alaca and Paul C van Oorschot. 2016. Device fingerprinting for augment-
ing web authentication: classification and analysis of methods. In Proceedings of
the 32nd Annual Conference on Computer Security Applications. ACM, 289–301.
[10] David M Allen. 1971. Mean square error of prediction as a criterion for selecting
variables. Technometrics 13, 3 (1971), 469–475.
[11] Irene Amerini, Rudy Becarelli, Roberto Caldelli, Alessio Melani, and Moreno
Niccolai. 2017. Smartphone fingerprinting combining features of on-board
sensors. IEEE Transactions on Information Forensics and Security 12, 10 (2017),
2457–2466.
[12] Irene Amerini, Paolo Bestagini, Luca Bondi, Roberto Caldelli, Matteo Casini,
and Stefano Tubaro. 2016. Robust smartphone fingerprint by mixing device
sensors features for mobile strong authentication. Electronic Imaging 2016, 8
(2016), 1–8.
[13] S Abhishek Anand and Nitesh Saxena. 2018. Speechless: Analyzing the Threat
to Speech Privacy from Smartphone Motion Sensors. In 2018 IEEE Symposium
on Security and Privacy (SP). Vol. 00. 116–133.
[14] Anssi Kostiainen, Alexander Shalamov. 2018. Accelerometer. https://www.w3.
org/TR/accelerometer/. Accessed: 2018-07-13.
[15] Adam J Aviv, Benjamin Sapp, Matt Blaze, and Jonathan M Smith. 2012. Practi-
cality of accelerometer side channels on smartphones. In Proceedings of the 28th
Annual Computer Security Applications Conference.
[16] Ben Alman. 2018. Monkey-patch (hook) functions for debugging and stuff.
https://github.com/cowboy/javascript-hooker. Accessed: 2018-04-23.
[17] Hristo Bojinov, Yan Michalevsky, Gabi Nakibly, and Dan Boneh. 2014. Mobile
device identification via sensor fingerprinting. arXiv preprint arXiv:1408.1416
(2014).
[18] Liang Cai and Hao Chen. 2011. TouchLogger: Inferring Keystrokes on Touch
Screen from Smartphone Motion. HotSec 11 (2011), 9–9.
[19] Liang Cai and Hao Chen. 2012. On the practicality of motion based keystroke
inference attack. In International Conference on Trust and Trustworthy Computing.
Springer, 273–290.
[20] Gong Chen, Wei Meng, and John Copeland. 2019. Revisiting mobile advertising
threats with MAdLife. In The World Wide Web Conference. 207–217.
[21] Junyoung Chung, Caglar Gulcehre, KyungHyun Cho, and Yoshua Bengio. 2014.
Empirical evaluation of gated recurrent neural networks on sequence modeling.
arXiv preprint arXiv:1412.3555 (2014).
[22] Andrea Continella, Yanick Fratantonio, Martina Lindorfer, Alessandro Puccetti,
Ali Zand, Christopher Kruegel, and Giovanni Vigna. 2017. Obfuscation-Resilient
Privacy Leak Detection for Mobile Apps Through Differential Analysis.. In
NDSS.
[23] Cortesi, Aldo and Hils, Mayimilian and Kriechbaumer, Thomas. [n. d.]. mitm-
REFERENCES
[1] 2018. Raccoon - APK downloader. https://bit.ly/1yIT4bR.
[2] 2020. JMango - Mobile Apps vs. Mobile Websites: User Preferences. https://
jmango360.com/wiki-pages-trends/mobile-app-vs-mobile-website-statistics/.
[3] Gunes Acar, Marc Juarez, Nick Nikiforakis, Claudia Diaz, Seda Gürses, Frank
Piessens, and Bart Preneel. 2013. FPDetective: dusting the web for fingerprinters.
In Proceedings of the 2013 ACM SIGSAC conference on Computer & communica-
tions security. 1129–1140.
[4] AdAway. 2021. Ad-blocking for your Android. https://adaway.org/. Accessed:
proxy. https://mitmproxy.org. v. 3.0.3.
[24] Jonathan Crussell, Ryan Stevens, and Hao Chen. 2014. Madfraud: Investigating
ad fraud in android applications. In Proceedings of the 12th annual international
conference on Mobile systems, applications, and services. 123–134.
[25] Anupam Das, Gunes Acar, Nikita Borisov, and Amogh Pradeep. 2018. The Web’s
Sixth Sense: A Study of Scripts Accessing Smartphone Sensors. In Proceedings
of ACM CCS, October 2018.
[26] Anupam Das, Nikita Borisov, and Matthew Caesar. 2014. Do you hear what i
hear?: Fingerprinting smart devices through embedded acoustic components.
In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communi-
cations Security. ACM, 441–452.
[27] Anupam Das, Nikita Borisov, and Matthew Caesar. 2016. Tracking Mobile Web
Users Through Motion Sensors: Attacks and Defenses.. In NDSS.
[28] Anupam Das, Nikita Borisov, and Edward Chou. 2018. Every Move You Make:
Exploring Practical Issues in Smartphone Motion Sensor Fingerprinting and
Countermeasures. Proceedings on Privacy Enhancing Technologies (2018).
[29] Erhan Davarci, Betul Soysal, Imran Erguler, Sabri Orhun Aydin, Onur Dincer,
and Emin Anarim. 2017. Age group detection using smartphone motion sensors.
In Signal Processing Conference (EUSIPCO), 2017 25th European. IEEE, 2201–2205.
[30] Android Developers. 2021. Interstitial (legacy API). https://developers.google.
com/admob/android/interstitial. Accessed: 2021-02-25.
[31] Android Developers. 2021. Multi-Window Support. https://developer.android.
com/guide/topics/ui/multi-window. Accessed: 2021-04-26.
[32] Android Developers. 2021. Permissions updates in Android 11. https://developer.
android.com/about/versions/11/privacy/permissions. Accessed: 2021-04-26.
[33] Sanorita Dey, Nirupam Roy, Wenyuan Xu, Romit Roy Choudhury, and Srihari
Nelakuditi. 2014. AccelPrint: Imperfections of Accelerometers Make Smart-
phones Trackable.. In NDSS’14.
[34] Michalis Diamantaris, Francesco Marcantoni, Sotiris Ioannidis, and Jason Polakis.
2020. The Seven Deadly Sins of the HTML5 WebAPI: A Large-Scale Study on
the Risks of Mobile Sensor-Based Attacks. ACM Trans. Priv. Secur. 23, 4, Article
19 (July 2020), 31 pages. https://doi.org/10.1145/3403947
[35] Michalis Diamantaris, Elias P. Papadopoulos, Evangelos P. Markatos, Sotiris
Ioannidis, and Jason Polakis. 2019. REAPER: Real-time App Analysis for Aug-
menting the Android Permission System. In 9th ACM Conference on Data and
Application Security and Privacy, CODASPY ’19. ACM.
[36] DoubleVerify. 2021. DOUBLEVERIFY PRIVACY NOTICES - SOLUTIONS PRI-
VACY NOTICE. https://doubleverify.com/privacy-notice/.
[37] Peter Eckersley. 2010. How unique is your web browser?. In International
Symposium on Privacy Enhancing Technologies Symposium. Springer, 1–18.
[38] Steven Englehardt and Arvind Narayanan. 2016. Online tracking: A 1-million-
site measurement and analysis. In Proceedings of the 2016 ACM SIGSAC Confer-
ence on Computer and Communications Security. ACM, 1388–1401.
[39] Tobias Fiebig, Jan Krissler, and Ronny Hänsch. 2014. Security Impact of High
Resolution Smartphone Cameras.. In WOOT.
[40] Maximiliano Firtman. 2018. Mobile HTML5 Compatibility on Mobile Devices.
http://mobilehtml5.org/. Accessed: 2018-04-22.
[41] Y. Fratantonio, C. Qian, S. P. Chung, and W. Lee. 2017. Cloak and Dagger: From
Two Permissions to Complete Control of the UI Feedback Loop. In 2017 IEEE
Symposium on Security and Privacy (SP). 1041–1057.
[42] Daniel Genkin, Mihir Pattani, Roei Schuster, and Eran Tromer. 2019. Synesthesia:
Detecting Screen Content via Remote Acoustic Side Channels. In 2019 IEEE
Symposium on Security and Privacy (SP).
[43] Google. 2020. WebView - A View that displays web pages. https://developer.
android.com/reference/android/webkit/WebView. Accessed: 2020-10-28.
[44] Google. 2021. Provide advance notice to the Google Play App Review team. https:
//support.google.com/googleplay/android-developer/contact/adv_note. Ac-
cessed: 2021-04-26.
[45] Jun Han, Emmanuel Owusu, Le T Nguyen, Adrian Perrig, and Joy Zhang. 2012.
Accomplice: Location inference using accelerometers on smartphones. In Com-
munication Systems and Networks (COMSNETS), 2012 Fourth International Con-
ference on. IEEE.
[46] Sepp Hochreiter and Jürgen Schmidhuber. 1997. Long short-term memory.
Neural computation 9, 8 (1997), 1735–1780.
[47] Duncan Hodges and Oliver Buckley. 2018. Reconstructing what you said: Text
Inference using Smartphone Motion. IEEE Transactions on Mobile Computing
(2018).
[48] Jingyu Hua, Zhenyu Shen, and Sheng Zhong. 2017. We can track you if you
take the metro: Tracking metro riders using accelerometers on smartphones.
IEEE Transactions on Information Forensics and Security 12, 2 (2017), 286–297.
[49] Jie Huang, Oliver Schranz, Sven Bugiel, and Michael Backes. 2017. The art of
app compartmentalization: Compiler-based library privilege separation on stock
android. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security. 1037–1049.
[50] Thomas Hupperich, Davide Maiorca, Marc Kührer, Thorsten Holz, and Giorgio
Giacinto. 2015. On the robustness of mobile device fingerprinting: Can mobile
users escape modern web-tracking mechanisms?. In Proceedings of the 31st
Annual Computer Security Applications Conference. ACM, 191–200.
[51] Hayden James. 2020. Smartphone Market Share. https://www.idc.com/promo/
smartphone-market-share/os. Accessed: 2020-10-11.
[52] Felix Juefei-Xu, Chandrasekhar Bhagavatula, Aaron Jaech, Unni Prasad, and
Marios Savvides. 2012. Gait-id on the move: Pace independent human identifica-
tion using cell phone accelerometer dynamics. In Biometrics: Theory, Applications
and Systems (BTAS), 2012 IEEE Fifth International Conference on. IEEE, 8–15.
[53] Matthew Kaplan. 2021.
52 In-App Advertising Statistics You Should
https://www.inmobi.com/blog/2019/05/21/52-in-app-advertising-
Know.
statistics-you-should-know. Accessed: 2021-02-25.
[54] Joongyum Kim, Jung-hwan Park, and Sooel Son. 2011. The Abuser Inside Apps:
Finding the Culprit Committing Mobile Ad Fraud. In NDSS.
[55] Joongyum Kim, Jung-hwan Park, and Sooel Son. 2020. The Abuser Inside Apps:
Finding the Culprit Committing Mobile Ad Fraud. In 28th Network & Distributed
System Security Symposium (NDSS’21). 1–16.
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1078[56] Tongbo Luo, Hao Hao, Wenliang Du, Yifei Wang, and Heng Yin. 2011. Attacks
on WebView in the Android system. In Proceedings of the 27th Annual Computer
Security Applications Conference. 343–352.
[57] Francesco Marcantoni, Michalis Diamantaris, Sotiris Ioannidis, and Jason Polakis.
2019. A Large-scale Study on the Risks of the HTML5 WebAPI for Mobile Sensor-
based Attacks. In 30th International World Wide Web Conference, WWW ’19.
[58] Philip Marquardt, Arunabh Verma, Henry Carter, and Patrick Traynor. 2011.
(sp) iPhone: decoding vibrations from nearby keyboards using mobile phone
accelerometers. In Proceedings of the 18th ACM conference on Computer and
communications security.
[59] Maryam Mehrnezhad, Ehsan Toreini, Siamak F Shahandashti, and Feng Hao.
2018. Stealing PINs via mobile sensors: actual risk versus user perception.
International Journal of Information Security 17, 3 (2018), 291–313.
[60] Wei Meng, Ren Ding, Simon P Chung, Steven Han, and Wenke Lee. 2016. The
Price of Free: Privacy Leakage in Personalized Mobile In-Apps Ads.. In NDSS.
[61] Yan Michalevsky, Dan Boneh, and Gabi Nakibly. 2014. Gyrophone: Recognizing