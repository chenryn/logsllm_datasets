进行逆向工程，这是一个极好的例子来说明在什么时候执行内存数据模糊测试是具有实际价值
的（毕竞这是一个构想的例子）。我们将通过当所传输的数据被反模期化之后在fuzz_server.exe
中植人钩子的方法，来避免对模糊例程进行解析。
我们需要在fuzz_server.exe中查明两个位置以完成我们的任务：第一个位置是快照点。我
们想要在哪一个执行点来保存目标进程的状态呢？第二个位置是恢复点。我们想要在哪一个执
行点来恢复目标进程的状态，变异我们的输入并且继续我们的instrumentation执行循环呢？对
这两个问题的回答都需要使用一个调试器来对输入进行一些跟踪。我们将使用一个免费可用的、
功能强大的Windows用户模式的调试器OllyDbg°，关于OllyDbg的用法和功能，已经有许多专
门书籍进行了描述，因此我们假定你已经熟悉了这些内容，我们所需要做的第一件事就是确定
http://www.ethereal.com/Ethereal:A Network Protocol Analyzer
htp://www.ollydbg.de
---
## Page 250
第20章内存数据的模糊测试：自动化
235
fuzz_server.exe在哪里接收数据。我们通过TCP来实现这一点，因此我们将fuzz_server.exe加载
进OllyDbg，并且在WS2_32.dllrecv（）API中设置一个断点。我们是通过下述操作来实现这一
点的，即提出模块列表，选择WS_32.dll，并且按
下Ctrl+N键来显示出在该模块内部的名字的列表，
如图20-8所示。然后我们拖动滑块到recv（），并
且按下F2键来使该断点可用。
在设置了断点之后，我们按下F9键来继续执
行，然后就像以前所做的那样运行我们的
fuzz_client。一旦数据被发送，由于遇到了我们所
设定的断点，因此OllyDbg就暂停fuzz_server，于
图20-8OllyDbg在WS_32.recvO的断点
是我们就按下Alt+F9键来“执行直到用户代码为
止”。这时，从fuzz_server对wS2_32的调用就是可见的了。我们按下几次F8键井且略过对
printf（）的调用，该函数显示了服务器消息以说明有多少字节被接收。接下来，如图20-9所示，
我们看到在fuzz_server内部地址为0x0040100F的地方有一个对未命名子例程的调用。在
OllyDbg的输出窗口中观察该函数的第一个参数，我们就会发现它是一个指向我们在Ethereal中
所看到的数据的模糊形式的指针。处于地址0x0040100F的例程能够将包数据反模糊化吗？
raratr"
图20-9在反模糊化之前的OllyDbg
有一个简单的方法可以得到该问题的答案：让fuzz_server继续执行并观察所发生的情况。
我们再次按下F8键以略过对printf（）的调用.我们可以立刻看到如图20-10所示，在OllyDbg输
出窗口中的模糊化数据已经被转换了。
这很好。我们由此就知道了快照点必须要放在该例程之后的某个点。再接着往下看，我们
在地址0x00401005处发现了一个对未命名例程的调用，然后是一个对pr1ntf（）的调用。我们可
fuzz_server的行为，我们就知道它很快将要退出。处于地址0x00401005的例程必定是我们的解
---
## Page 251
236
第二部分目标和自动化
析例程。使用F7键来单步执行它，就会发现一个转向地址0x00401450的无条件跳转，图20-11
显示了我们所猜测的解析例程的起始点。
ccpu-mh.mo
r.on
图20-10在反模糊化之后的OllyDbg
图20-11OllyDbg中解析例程的起始点
注意我们的反模糊化字符串“sendingsomedata”是作为在ESP+4地址处的解析例程的第
一个参数。这对于我们的快照钩子来说，似乎是一个很好的植入点。我们可以将进程的整个状
态保存到解析例程的起始点，然后在解析例程执行完之后的某个点再将进程的状态进行恢复。
一且我们恢复了该进程，我们就可以修改将要被解析的数据的内容，然后继续执行，并且不确
定地重复该过程，但是首先我们需要定位恢复点。按下Ctrl+F9键来“执行直到返回为止”，然
后按下F7或者F8键以到达我们的返回地址，如图20-12所示。在该地址处我们再次看到了使用
字符串“exitinglel]”对printf（）的调用。让我们在位于地址0x004012b7处的对printf（）的调
用之后选择一个恢复点，这样我们就可以看到在恢复点之前fuzz_server输出了“exitinglel]”。
我们之所以这样做，是因为它能够让我们更好地理解fuzz_scrver想要退出，但是我们不让它退
---
## Page 252
第20章内存数据的模糊测试：自动化
237
出这样一个思想。
CiCFU.
图20-12OllyDbg中的恢复点
我们知道处于地址0x0040100F处的例程是负责解码的。而位于地址0x00401450处的例程是
负责解析被解码的数据的。我们已经选择了解析器的起始点作为快照和变异点。我们略微随意
地选择地址0x004012b7作为对printf（“exiting[e1]"）的调用之后的恢复点。我们已经掌握了
所有必需的内容，现在可以开始具体编码了。图20-13展示了我们将要进行的工作的一个概念
视图。
recv(）
0X0040100F（
00401450()
printt（*exiting...)
饮复
图20-13概念视图
使用PyDbg来实现内存数据模糊器所需要进行的工作，并不比我们已经讨论的这些工作要
多。我们从所需要的输人开始做起，通过定义全局变量来存储一些信息，比如我们所选择的快
照点和恢复点。然后我们将进入标准的PyDbg的框架代码，初始化一个PyDbg对象，保存回调
函数（我们稍后将定义两个回调函数，它们之间类似于肉和马铃薯的关系），定位我们的目标
进程，然后关联到目标进程，在快照点和恢复点设置断点，并且最后进入调试事件循环：
---
## Page 253
238
第二部分目标和自动化
from pydbg inport ·
from pydbg.defines inport *
import time
inport randon
snapshot_hook = 0x00401450
restore_hook
=0x00401287
snapshot_taken - False
hit_count
0
address
-0
6qpAd-6qp
dbg.set_ca11back(EXCEPTION_BREAKPOINT,hand1e_bp)
dbg -set_ca11back (EXCEPTION_ACCESS_VIOLATION, handTe_av)
found_target - Fa1se
for (pid, proc_name) in dbg.enumerate_processes:
if proc_name.1ower(）
"fuzz_server.exe":
 - a6ueapuno,
break
的
if found_target:
3
dbg.attach(pid)
dbg.bp_set（snapshot_hook)
dbg.bp_set（restore_hook)
中，客内的
doo, suasa fnnan fuijaaua. lutud
dbg.debug_event_1oop()
else:
print “target not found."
在所定义的两个回调函数中，访问违规处理函数相对比较容易理解，因此我们首先将对它
进行讨论。我们首先来记录该回调函数，以检测一个潜在的可利用条件何时发生。这是一个相
当简单的易于理解的代码块，井且很容易在其他PyDbg应用中被重新设计以用做其他目的。在
例程的起始处，是从异常记录中获取的一些有用信息，例如触发异常的指令的地址，表明了访
问违规是否是由于一个读或写操作而引起的这样一个标志，以及导致异常的内存地址。试图进
行一个操作以重新得到违规指令的反汇编，并且输出一条消息告知你该异常的类别。最后，在
终止被调试进程之前，试图来进行一个操作以输出在发生异常时候的目标应用的当前执行上下
文信息。该执行上下文信息包括不同的寄存器值，它们所指向的数据的内容（如果它是一个指
针的话），以及栈解除引I用的一个可变数量（在这个例子中，我们指定为5）。关于PyDbgAPI的
特定方面的更加详细的内容，可以参阅位于http://pedram.redhive.com/PaiMei/docs/PyDbg处的
一些进行深人分析的文档。
def handle_av（pydbg.dbg.context):
exception_record-dbg.u.Exception.ExceptionRecord
exception_address-exception_record.ExceptionAddress
write_violation-exception_record.ExceptionInformatfon[o]
violation_address -exception_record.ExceptionInformation[1]
---
## Page 254
第20章内存数据的模糊测试：自动化
239
:A
disasm - pydbg.disasm(exception_address)
except:
pass
print***ACCESSVIOLATIONSO8x %s ***%\
(exception_address, disasn)
if write_violation:
print “write violatfon on”.
else:
print “read violatfon on”,
print “%08x” % violation_address
try:
print pydbg.dump_context(context，5,False)
except:
pass
print “terminating debuggee”
个
pydbg.terminate_process()
另外，我们可以使用其他的调试器如OllyDbg来捕获访问违规。为此，你所选择的调试器
必须要被操作系统所配置，以作为运行时编译执行（JIT）的调试器，于是，访问违规处理函
数的主体部分可以用如下代码来替换：
def handle_av (pydbg，dbg.context):
return DBG_CONTINUE
pydbg.detach()
当发生一个访问违规时，将显示一个我们所熟悉的对话框，如图20-14所示。
er
13
yo
Fors
eot-do
图20-14fuzz_server关闭
如果选择该对话框中的Debug按钮，那么将会弹出你已注册的JIT调试器，以便于更详细地
查看在目标应用中究竞是什么出现了错误。在我们的内存数据模糊器中，所要介绍的最后一个
组件是该工具的核心，即断点处理器。只要fuzz_server的执行到达了快照点和恢复点，那么断
http:/msdn.microsoft.com/library/default.asp?url=/library/en
/debugging_terminology.asp
---
## Page 255
240第二部分目标和自动化
点处理器就将在我们以前设置断点的位置被调用。这是我们所看到的最复杂的PyDbg代码块，
因此让我们逐步来解析该代码。在该函数的开头我们定义了一些将要访问的全局变量，井且将
获取的断点发生的地址作为exception_address。
def handle_bp (pydbg, dbg, context):
g1oba1 snapshot_hook, restore_hook