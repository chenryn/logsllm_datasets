You should implement rate-limiting as early as possible, ideally at a load
balancer or reverse proxy before requests even reach your API servers. Rate-
limiting configuration varies from product to product. See https://medium
.com/faun/understanding-rate-limiting-on-haproxy-b0cf500310b1 for an exam-
ple of configuring rate-limiting for the open source HAProxy load balancer.
3.2.1
Rate-limiting with Guava
Often rate-limiting is applied at a reverse proxy, API gateway, or load balancer before
the request reaches the API, so that it can be applied to all requests arriving at a clus-
ter of servers. By handling this at a proxy server, you also avoid excess load being gen-
erated on your application servers. In this example you’ll apply simple rate-limiting in
the API server itself using Google’s Guava library. Even if you enforce rate-limiting at a
proxy server, it is good security practice to also enforce rate limits in each server so
that if the proxy server misbehaves or is misconfigured, it is still difficult to bring down
the individual servers. This is an instance of the general security principle known as
defense in depth, which aims to ensure that no failure of a single mechanism is enough
to compromise your API.
DEFINITION
The principle of defense in depth states that multiple layers of secu-
rity defenses should be used so that a failure in any one layer is not enough to
breach the security of the whole system.
As you’ll now discover, there are libraries available to make basic rate-limiting very easy
to add to your API, while more complex requirements can be met with off-the-shelf
Web
Natter API
Audit log
Authentication
Application
logic
Access control
Rate-limiting
Mobile
When the rate limit is
exceeded, requests are
immediately rejected with
a 429 Too Many Requests
HTTP status code.
Request
Response
When the rate limit is
not exceeded, requests
proceed as normal.
Figure 3.3
Rate-limiting rejects requests when your API is under too much load. By rejecting 
requests early before they have consumed too many resources, we can ensure that the 
requests we do process have enough resources to complete without errors. Rate-limiting 
should be the very first decision applied to incoming requests.
67
Rate-limiting for availability
proxy/gateway products. Open the pom.xml file in your editor and add the following
dependency to the dependencies section:
            com.google.guava
            guava
            29.0-jre
Guava makes it very simple to implement rate-limiting using the RateLimiter class
that allows us to define the rate of requests per second you want to allow.1 You can
then either block and wait until the rate reduces, or you can simply reject the request
as we do in the next listing. The standard HTTP 429 Too Many Requests status code2
can be used to indicate that rate-limiting has been applied and that the client should
try the request again later. You can also send a Retry-After header to indicate how
many seconds the client should wait before trying again. Set a low limit of 2 requests
per second to make it easy to see it in action. The rate limiter should be the very first
filter defined in your main method, because even authentication and audit logging
may consume resources.
TIP
The rate limit for individual servers should be a fraction of the overall
rate limit you want your service to handle. If your service needs to handle a
thousand requests per second, and you have 10 servers, then the per-server
rate limit should be around 100 request per second. You should verify that
each server is able to handle this maximum rate.
Open the Main.java file in your editor and add an import for Guava to the top of
the file:
import com.google.common.util.concurrent.*;
Then, in the main method, after initializing the database and constructing the control-
ler objects, add the code in the listing 3.1 to create the RateLimiter object and add a
filter to reject any requests once the rate limit has been exceeded. We use the non-
blocking tryAcquire() method that returns false if the request should be rejected.
  var rateLimiter = RateLimiter.create(2.0d);     
  before((request, response) -> {
    if (!rateLimiter.tryAcquire()) {           
1 The RateLimiter class is marked as unstable in Guava, so it may change in future versions.
2 Some services return a 503 Service Unavailable status instead. Either is acceptable, but 429 is more accurate,
especially if you perform per-client rate-limiting.
Listing 3.1
Applying rate-limiting with Guava
Create the shared rate 
limiter object and allow just 
2 API requests per second.
Check if the rate has 
been exceeded.
68
CHAPTER 3
Securing the Natter API
      response.header("Retry-After", "2");    
      halt(429);     
    }
  });
Guava’s rate limiter is quite basic, defining only a simple requests per second rate. It
has additional features, such as being able to consume more permits for more expen-
sive API operations. It lacks more advanced features, such as being able to cope with
occasional bursts of activity, but it’s perfectly fine as a basic defensive measure that can
be incorporated into an API in a few lines of code. You can try it out on the command
line to see it in action:
$ for i in {1..5}
> do
>   curl -i -d "{\"owner\":\"test\",\"name\":\"space$i\"}" 
➥ -H ‘Content-Type: application/json’ 
➥ http://localhost:4567/spaces;
> done
HTTP/1.1 201 Created      
Date: Wed, 06 Feb 2019 21:07:21 GMT
Location: /spaces/1
Content-Type: application/json;charset=utf-8
X-Content-Type-Options: nosniff
X-Frame-Options: DENY
X-XSS-Protection: 0
Cache-Control: no-store
Content-Security-Policy: default-src ‘none’; frame-ancestors ‘none’; sandbox
Server: 
Transfer-Encoding: chunked
HTTP/1.1 201 Created      
Date: Wed, 06 Feb 2019 21:07:21 GMT
Location: /spaces/2
Content-Type: application/json;charset=utf-8
X-Content-Type-Options: nosniff
X-Frame-Options: DENY
X-XSS-Protection: 0
Cache-Control: no-store
Content-Security-Policy: default-src ‘none’; frame-ancestors ‘none’; sandbox
Server: 
Transfer-Encoding: chunked
HTTP/1.1 201 Created      
Date: Wed, 06 Feb 2019 21:07:22 GMT
Location: /spaces/3
Content-Type: application/json;charset=utf-8
X-Content-Type-Options: nosniff
X-Frame-Options: DENY
X-XSS-Protection: 0
Cache-Control: no-store
Content-Security-Policy: default-src ‘none’; frame-ancestors ‘none’; sandbox
Server: 
Transfer-Encoding: chunked
If so, add a Retry-After 
header indicating when 
the client should retry.
Return a 429 Too 
Many Requests 
status.
The first
requests
succeed
while the
rate limit
is not
exceeded.
69
Rate-limiting for availability
HTTP/1.1 429 Too Many Requests     
Date: Wed, 06 Feb 2019 21:07:22 GMT
Content-Type: application/json;charset=utf-8
X-Content-Type-Options: nosniff
X-Frame-Options: DENY
X-XSS-Protection: 0
Cache-Control: no-store
Content-Security-Policy: default-src ‘none’; frame-ancestors ‘none’; sandbox
Server: 
Transfer-Encoding: chunked
HTTP/1.1 429 Too Many Requests     
Date: Wed, 06 Feb 2019 21:07:22 GMT
Content-Type: application/json;charset=utf-8
X-Content-Type-Options: nosniff
X-Frame-Options: DENY
X-XSS-Protection: 0
Cache-Control: no-store
Content-Security-Policy: default-src ‘none’; frame-ancestors ‘none’; sandbox
Server: 
Transfer-Encoding: chunked
By returning a 429 response immediately, you can limit the amount of work that your
API is performing to the bare minimum, allowing it to use those resources for serving
the requests that it can handle. The rate limit should always be set below what you
think your servers can handle, to give some wiggle room.
Pop quiz
1
Which one of the following statements is true about rate-limiting?
a
Rate-limiting should occur after access control.
b
Rate-limiting stops all denial of service attacks.
c
Rate-limiting should be enforced as early as possible.
d
Rate-limiting is only needed for APIs that have a lot of clients.
2
Which HTTP response header can be used to indicate how long a client should
wait before sending any more requests?
a
Expires
b
Retry-After
c
Last-Modified
d
Content-Security-Policy
e
Access-Control-Max-Age
The answers are at the end of the chapter.
Once the rate limit is exceeded, requests 
are rejected with a 429 status code.
70
CHAPTER 3
Securing the Natter API
3.3
Authentication to prevent spoofing
Almost all operations in our API need to know who is performing them. When you talk
to a friend in real life, you recognize them based on their appearance and physical fea-
tures. In the online world, such instant identification is not usually possible. Instead, we
rely on people to tell us who they are. But what if they are not honest? For a social app,
users may be able to impersonate each other to spread rumors and cause friends to fall
out. For a banking API, it would be catastrophic if users can easily pretend to be some-
body else and spend their money. Almost all security starts with authentication, which is
the process of verifying that a user is who they say they are.
 Figure 3.4 shows how authentication fits within the security controls that you’ll add
to the API in this chapter. Apart from rate-limiting (which is applied to all requests
regardless of who they come from), authentication is the first process we perform.
Downstream security controls, such as audit logging and access control, will almost
always need to know who the user is. It is important to realize that the authentication
phase itself shouldn’t reject a request even if authentication fails. Deciding whether
any particular request requires the user to be authenticated is the job of access control
(covered later in this chapter), and your API may allow some requests to be carried
out anonymously. Instead, the authentication process will populate the request with
attributes indicating whether the user was correctly authenticated that can be used by
these downstream processes.
Web browser
Natter API
Audit log
Authentication
Application
logic
All requests proceed,
even if authentication
was not successful,
to ensure they are logged.
Response
Access control
User
DB
Rate-limiting
Mobile app
Requests will be rejected
later during access control
if authentication is required.
Request
Figure 3.4
Authentication occurs after rate-limiting but before audit logging or access 
control. All requests proceed, even if authentication fails, to ensure that they are always 
logged. Unauthenticated requests will be rejected during access control, which occurs after 
audit logging.
71
Authentication to prevent spoofing
In the Natter API, a user makes a claim of identity in two places:
1
In the Create Space operation, the request includes an “owner” field that iden-
tifies the user creating the space.
2
In the Post Message operation, the user identifies themselves in the “author”
field.
The operations to read messages currently don’t identify who is asking for those mes-
sages at all, meaning that we can’t tell if they should have access. You’ll correct both
problems by introducing authentication.
3.3.1
HTTP Basic authentication
There are many ways of authenticating a user, but one of the most widespread is sim-
ple username and password authentication. In a web application with a user interface,
we might implement this by presenting the user with a form to enter their username
and password. An API is not responsible for rendering a UI, so you can instead use the
standard HTTP Basic authentication mechanism to prompt for a password in a way
that doesn’t depend on any UI. This is a simple standard scheme, specified in RFC
7617 (https://tools.ietf.org/html/rfc7617), in which the username and password are
encoded (using Base64 encoding; https://en.wikipedia.org/wiki/Base64) and sent in
a header. An example of a Basic authentication header for the username demo and
password changeit is as follows:
Authorization: Basic ZGVtbzpjaGFuZ2VpdA==
The Authorization header is a standard HTTP header for sending credentials to the
server. It’s extensible, allowing different authentication schemes,3 but in this case
you’re using the Basic scheme. The credentials follow the authentication scheme
identifier. For Basic authentication, these consist of a string of the username followed
by a colon4 and then the password. The string is then converted into bytes (usually in
UTF-8, but the standard does not specify) and Base64-encoded, which you can see if
you decode it in jshell:
jshell> new String(
java.util.Base64.getDecoder().decode("ZGVtbzpjaGFuZ2VpdA=="), "UTF-8")
$3 ==> "demo:changeit"
WARNING
HTTP Basic credentials are easy to decode for anybody able to
read network messages between the client and the server. You should only
ever send passwords over an encrypted connection. You’ll add encryption to
the API communications in section 3.4.
3 The HTTP specifications unfortunately confuse the terms authentication and authorization. As you’ll see in
chapter 9, there are authorization schemes that do not involve authentication.
4 The username is not allowed to contain a colon.
72
CHAPTER 3
Securing the Natter API
3.3.2
Secure password storage with Scrypt
Web browsers have built-in support for HTTP Basic authentication (albeit with some
quirks that you’ll see later), as does curl and many other command-line tools. This
allows us to easily send a username and password to the API, but you need to securely
store and validate that password. A password hashing algorithm converts each password
into a fixed-length random-looking string. When the user tries to login, the password
they present is hashed using the same algorithm and compared to the hash stored in
the database. This allows the password to be checked without storing it directly. Mod-
ern password hashing algorithms, such as Argon2, Scrypt, Bcrypt, or PBKDF2, are
designed to resist a variety of attacks in case the hashed passwords are ever stolen. In
particular, they are designed to take a lot of time or memory to process to prevent
brute-force attacks to recover the passwords. You’ll use Scrypt in this chapter as it is
secure and widely implemented.
DEFINITION
A password hashing algorithm converts passwords into random-
looking fixed-size values known as a hash. A secure password hash uses a lot of
time and memory to slow down brute-force attacks such as dictionary attacks,
in which an attacker tries a list of common passwords to see if any match
the hash.
Locate the pom.xml file in the project and open it with your favorite editor. Add the
following Scrypt dependency to the dependencies section and then save the file:
            com.lambdaworks
            scrypt
            1.4.0
TIP
You may be able to avoid implementing password storage yourself by
using an LDAP (Lightweight Directory Access Protocol) directory. LDAP serv-
ers often implement a range of secure password storage options. You can also
outsource authentication to another organization using a federation protocol
like SAML or OpenID Connect. OpenID Connect is discussed in chapter 7.
3.3.3
Creating the password database
Before you can authenticate any users, you need some way to register them. For now,
you’ll just allow any user to register by making a POST request to the /users end-
point, specifying their username and chosen password. You’ll add this endpoint in sec-
tion 3.3.4, but first let’s see how to store user passwords securely in the database.
TIP
In a real project, you could confirm the user’s identity during registra-
tion (by sending them an email or validating their credit card, for exam-
ple), or you might use an existing user repository and not allow users to
self-register. 
73
Authentication to prevent spoofing
You’ll store users in a new dedicated database table, which you need to add to the
database schema. Open the schema.sql file under src/main/resources in your text
editor, and add the following table definition at the top of the file and save it:
CREATE TABLE users(
    user_id VARCHAR(30) PRIMARY KEY,
    pw_hash VARCHAR(255) NOT NULL
);
You also need to grant the natter_api_user permissions to read and insert into this
table, so add the following line to the end of the schema.sql file and save it again:
GRANT SELECT, INSERT ON users TO natter_api_user;
The table just contains the user id and their password hash. To store a new user, you
calculate the hash of their password and store that in the pw_hash column. In this
example, you’ll use the Scrypt library to hash the password and then use Dalesbred to
insert the hashed value into the database.
 Scrypt takes several parameters to tune the amount of time and memory that it
will use. You do not need to understand these numbers, just know that larger num-
bers will use more CPU time and memory. You can use the recommended parame-
ters as of 2019 (see https://blog.filippo.io/the-scrypt-parameters/ for a discussion of
Scrypt parameters), which should take around 100ms on a single CPU and 32MiB
of memory:
    String hash = SCryptUtil.scrypt(password, 32768, 8, 1);
This may seem an excessive amount of time and memory, but these parameters have
been carefully chosen based on the speed at which attackers can guess passwords.
Dedicated password cracking machines, which can be built for relatively modest
amounts of money, can try many millions or even billions of passwords per second.
The expensive time and memory requirements of secure password hashing algorithms
such as Scrypt reduce this to a few thousand passwords per second, hugely increasing
the cost for the attacker and giving users valuable time to change their passwords after
a breach is discovered. The latest NIST guidance on secure password storage (“memo-
rized secret verifiers” in the tortured language of NIST) recommends using strong
memory-hard hash functions such as Scrypt (https://pages.nist.gov/800-63-3/sp800-
63b.html#memsecret). 
 If you have particularly strict requirements on the performance of authentica-
tion to your system, then you can adjust the Scrypt parameters to reduce the time
and memory requirements to fit your needs. But you should aim to use the recom-
mended secure defaults until you know that they are causing an adverse impact on
performance. You should consider using other authentication methods if secure
password processing is too expensive for your application. Although there are pro-