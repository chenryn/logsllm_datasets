LinkedList是一个双向链表，其元素指向它前面和后面的元素，如图11-3所示。这
样一来，通过移动到下一个元素可以正向遍历整个链表，通过移动到前一个元素可以反向
遍历整个链表。
图11-3
链表的优点是，如果将元素插入列表的中间位置，使用链表就会非常快。在插入一个
元素时，只需要修改上一个元素的Next引用和下一个元素的Previous引用，使它们引用所
插入的元素。在List类中，插入一个元素时，需要移动该元素后面的所有元素。
当然，链表也有缺点。链表的元素只能一个接一个地访问，这需要较长的时间来查找
位于链表中间或尾部的元素。
链表不能在列表中仅存储元素。存储元素时，链表还必须存储每个元素的下一个元素
和上一个元素的信息。这就是LinkedList包含LinkedListNode类型的元素的原因。
使用LinkedListNode类，可以获得列表中的下一个元素和上一个元素。
LinkedListNode定义了属性List、Next、Previous和Value。List属性返回与节点相关的
LinkedList对象，Next和Previous属性用于遍历链表，访问当前节点之后和之前的节
点。Value返回与节点相关的元素，其类型是T。
LinkedList类定义的成员可以访问链表中的第一个和最后一个元素（First和
Last）、在指定位置插入元素（AddAfter（）、AddBefore（）、AddFirst（）和
AddLast（）方法），删除指定位置的元素（Remove（）、RemoveFirst（）和
RemoveLast（）方法）、从链表的开头（Find（）方法）或结尾（FindLast（）方法）开
始搜索元素。
示例应用程序使用了一个链表和一个列表。链表包含文档，这与上一个队列例子相
同，但文档有一个额外的优先级。在链表中，文档按照优先级来排序。如果多个文档的优
先级相同，这些元素就按照文档的插入时间来排序。
图11-4描述了示例应用程序中的集合。LinkedList是一个包含所有
Document对象的链表，该图显示了文档的标题和优先级。标题指出了文档添加到链表中
的时间。第一个添加的文档的标题是“One”。第二个添加的文档的标题是“Two”，依此类
推。可以看出，文档One和Four有相同的优先级8，因为One在Four之前添加，所以One放
在链表的前面。
图11-4
在链表中添加新文档时，它们应放在优先级相同的最后一个文档后面。集合
LinkedList 
包含LinkedListNode类型的元素。LinkedListNode
类添加Next和Previous属性，使搜索过程能从一个节点移动到下一个节点上。要引用这类
元素，应把List定义为List>。为了快速访问每个优先级的
最后一个文档，集合List应最多包含10个元素，每个元素分别引用每个
优先级的最后一个文档。在后面的讨论中，对每个优先级的最后一个文档的引用称为优先
级节点。
在上面的例子中，Document类扩展为包含优先级。优先级用类的构造函数设置（代
码文件LinkedListSample/Document.cs）：
    public class Document
    {
      public string Title { get; private set; }
      public string Content { get; private set; }
      public byte Priority { get; private set; }
      public Document(string title, string content, byte priority)
      {
        Title = title;
        Content = content;
        Priority = priority;
      }
    }
解决方案的核心是PriorityDocumentManager类。这个类很容易使用。在这个类的公共
接口中，可以把新的Document元素添加到链表中，可以检索第一个文档，为了便于测
试，它还提供了一个方法，在元素链接到链表中时，该方法可以显示集合中的所有元素。
PriorityDocumentManager类包含两个集合。LinkedList类型的集合包含所
有的文档。List>类型的集合包含最多10个元素的引用，它们
是添加指定优先级的新文档的入口点。这两个集合变量都用PriorityDocumentManager类的
构造函数来初始化。列表集合也用null初始化（代码文件
LinkedListSample/PriorityDocumentManager.cs）：
    public class PriorityDocumentManager
    {
      private readonly LinkedList _documentList;
      // priorities 0.9
      private readonly List> _priorityNodes;
      public PriorityDocumentManager()
      {
        _documentList = new LinkedList();
        _priorityNodes = new List>(10);
        for (int i = 0; i (null));
        }
      }
在类的公共接口中，有一个AddDocument（）方法。AddDocument（）方法只调用私
有方法AddDocumentToPriorityNode（）。把实现代码放在另一个方法中的原因是，
AddDocumentToPriorityNode（）方法可以递归调用，如后面所示。
    public void AddDocument(Document d)
    {
      if (d == null) throw new ArgumentNullException("d");
      AddDocumentToPriorityNode(d, d.Priority);
    }
在AddDocumentToPriorityNode（）方法的实现代码中，第一个操作是检查优先级是
否在允许的优先级范围内。这里允许的范围是0～9。如果传送了错误的值，就会抛出一个
ArgumentException类型的异常。
接着检查是否已经有一个优先级节点与所传送的优先级相同。如果在列表集合中没有
这样的优先级节点，就递归调用AddDocumentToPriorityNode（）方法，递减优先级值，
检查是否有低一级的优先级节点。
如果优先级节点的优先级值与所传送的优先级值不同，也没有比该优先级值更低的优
先级节点，就可以调用AddLast（）方法，将文档安全地添加到链表的末尾。另外，链表
节点由负责指定文档优先级的优先级节点引用。
如果存在这样的优先级节点，就可以在链表中找到插入文档的位置。这里必须区分是
存在指定优先级值的优先级节点，还是存在以较低的优先级值引用文档的优先级节点。对
于第一种情况，可以把新文档插入由优先级节点引用的位置后面。因为优先级节点总是引
用指定优先级值的最后一个文档，所以必须设置优先级节点的引用。如果引用文档的优先
级节点有较低的优先级值，情况就会比较复杂。这里新文档必须插入优先级值与优先级节
点相同的所有文档的前面。为了找到优先级值相同的第一个文档，要通过一个while循
环，使用Previous属性遍历所有的链表节点，直到找到一个优先级值不同的链表节点为
止。这样，就找到了必须插入文档的位置，并可以设置优先级节点。
    private void AddDocumentToPriorityNode(Document doc, int priority)
    {
      if (priority > 9 || priority  prioNode = _priorityNodes[priority];
        if (priority == doc.Priority)
            // priority node with the same priority exists
        {
          _documentList.AddAfter(prioNode, doc);
          // set the priority node to the last document with the same priority
          _priorityNodes[doc.Priority] = prioNode.Next;
        }
        else // only priority node with a lower priority exists
        {
          // get the first node of the lower priority
          LinkedListNode firstPrioNode = prioNode;
          while (firstPrioNode.Previous ! = null &&
          firstPrioNode.Previous.Value.Priority == prioNode.Value.Priority)
          {
            firstPrioNode = prioNode.Previous;
            prioNode = firstPrioNode;
          }
          _documentList.AddBefore(firstPrioNode, doc);
          // set the priority node to the new value
          _priorityNodes[doc.Priority] = firstPrioNode.Previous;
        }
      }
    }
现在还剩下几个简单的方法没有讨论。DisplayAllNodes（）方法只是在一个foreach循
环中，把每个文档的优先级和标题显示在控制台上。
GetDocument（）方法从链表中返回第一个文档（优先级最高的文档），并从链表中
删除它：
    public void DisplayAllNodes()
    {
      foreach (Document doc in documentList)
      {
        WriteLine($"priority: {doc.Priority}, title {doc.Title}");
      }
    }
    // returns the document with the highest priority
    // (that's first in the linked list)
    public Document GetDocument()
    {
      Document doc = _documentList.First.Value;
      _documentList.RemoveFirst();
      return doc;
    }
在Main（）方法中，PriorityDocumentManager类用于说明其功能。在链表中添加8个
优先级不同的新文档，再显示整个链表（代码文件LinkedListSample/Program.cs）：
    public static void Main()
    {
      var pdm = new PriorityDocumentManager();
      pdm.AddDocument(new Document("one", "Sample", 8));
      pdm.AddDocument(new Document("two", "Sample", 3));
      pdm.AddDocument(new Document("three", "Sample", 4));
      pdm.AddDocument(new Document("four", "Sample", 8));
      pdm.AddDocument(new Document("five", "Sample", 1));
      pdm.AddDocument(new Document("six", "Sample", 9));
      pdm.AddDocument(new Document("seven", "Sample", 1));
      pdm.AddDocument(new Document("eight", "Sample", 1));
      pdm.DisplayAllNodes();
    }
在处理好的结果中，文档先按优先级排序，再按添加文档的时间排序：
    priority: 9, title six
    priority: 8, title one
    priority: 8, title four
    priority: 4, title three
    priority: 3, title two
    priority: 1, title five
    priority: 1, title seven
    priority: 1, title eight
11.7 有序列表
如果需要基于键对所需集合排序，就可以使用SortedList类。这个类
按照键给元素排序。这个集合中的值和键都可以使用任意类型。
下面的例子创建了一个有序列表，其中键和值都是string类型。默认的构造函数创建
了一个空列表，再用Add（）方法添加两本书。使用重载的构造函数，可以定义列表的容
量，传递实现了IComparer接口的对象，该接口用于给列表中的元素排序。
Add（）方法的第一个参数是键（书名），第二个参数是值（ISBN号）。除了使用
Add（）方法之外，还可以使用索引器将元素添加到列表中。索引器需要把键作为索引参
数。如果键已存在，Add（）方法就抛出一个ArgumentException类型的异常。如果索引器
使用相同的键，就用新值替代旧值（代码文件SortedListSample/Program.cs）。
    var books = new SortedList();
    books.Add("Professional WPF Programming", "978-0-470-04180-2");
    books.Add("Professional ASP.NET MVC 5", "978-1-118-79475-3");
    books["Beginning Visual C# 2012"] = "978-1-118-31441-8";
    books["Professional C# 5 and .NET 4.5.1"] = "978-1-118-83303-2";
  注意： SortedList类只允许每个键有一个对应的值，如果需要
每个键对应多个值，就可以使用Lookup类。
可以使用foreach语句遍历该列表。枚举器返回的元素是KeyValuePair
类型，其中包含了键和值。键可以用Key属性访问，值可以用Value属性访问。
    foreach (KeyValuePair book in books)
    {
      WriteLine($"{book.Key}, {book.Value}");
    }
迭代语句会按键的顺序显示书名和ISBN号：
    Beginning Visual C# 2012, 978-1-118-31441-8
    Professional ASP.NET MVC 5, 978-1-118-79475-3
    Professional C# 5 and .NET 4.5.1, 978-1-118-83303-2
    Professional WPF Programming, 978-0-470-04180-2
也可以使用Values和Keys属性访问值和键。因为Values属性返回IList, Keys
属性返回IList，所以可以通过foreach语句使用这些属性：
    foreach (string isbn in books.Values)
    {
      WriteLine(isbn);
    }
    foreach (string title in books.Keys)
    {
      WriteLine(title);
    }
第一个循环显示值，第二个循环显示键：
    978-1-118-31441-8
    978-1-118-79475-3
    978-1-118-83303-2
    978-0-470-04180-2
    Beginning Visual C# 2012
    Professional ASP.NET MVC 5
    Professional C# 5 and .NET 4.5.1
    Professional WPF Programming
如果尝试使用索引器访问一个元素，但所传递的键不存在，就会抛出一个
KeyNotFoundException类型的异常。为了避免这个异常，可以使用ContainsKey（）方法，
如果所传递的键存在于集合中，这个方法就返回true，也可以调用TryGetValue（）方法，
该方法尝试获得指定键的值。如果指定键对应的值不存在，该方法就不会抛出异常。
    string isbn;
    string title = "Professional C# 7.0";
    if (! books.TryGetValue(title
 , out isbn)
 )
    {
      WriteLine($"{title} not found");
    }
11.8 字典
字典表示一种非常复杂的数据结构，这种数据结构允许按照某个键来访问元素。字典
也称为映射或散列表。字典的主要特性是能根据键快速查找值。也可以自由添加和删除元
素，这有点像List类，但没有在内存中移动后续元素的性能开销。
图11-5是字典的一个简化表示。其中employee-id（如B4711）是添加到字典中的键。
键会转换为一个散列。利用散列创建一个数字，它将索引和值关联起来。然后索引包含一
个到值的链接。该图做了简化处理，因为一个索引项可以关联多个值，索引可以存储为一
个树型结构。
图11-5
.NET 
Framework提供了几个字典类。可以使用的最主要的类是Dictionary。
11.8.1 字典初始化器
C# 6定义了一个新的语法，在声明时初始化字典。带有int键和string值的字典可以初
始化如下：
    var dict = new Dictionary()
    {
      [3] = "three",
      [7] = "seven"
    };
这里把两个元素添加到字典中。第一个元素的键是3，字符串值是three；第二个元素
的键是7，字符串值是seven。这个初始化语法易于阅读，使用的语法与访问字典中的元素
相同。
11.8.2 键的类型
用作字典中键的类型必须重写Object类的GetHashCode（）方法。只要字典类需要确
定元素的位置，它就要调用GetHashCode（）方法。GetHashCode（）方法返回的int由字
典用于计算在对应位置放置元素的索引。这里不介绍这个算法。我们只需要知道，它涉及
素数，所以字典的容量是一个素数。
GetHashCode（）方法的实现代码必须满足如下要求：
● 相同的对象应总是返回相同的值。
● 不同的对象可以返回相同的值。
● 它不能抛出异常。
● 它应至少使用一个实例字段。
● 散列代码最好在对象的生存期中不发生变化。
除了GetHashCode（）方法的实现代码必须满足的要求之外，最好还满足如下要求：
● 它应执行得比较快，计算的开销不大。
● 散列代码值应平均分布在int可以存储的整个数字范围上。
  注意： 字典的性能取决于GetHashCode（）方法的实现代码。
为什么要使散列代码值平均分布在整数的取值范围内？如果两个键返回的散列代码值
会得到相同的索引，字典类就必须寻找最近的可用空闲位置来存储第二个数据项，这需要