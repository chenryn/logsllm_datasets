state at any given point in time such as the list of running processes, open ﬁles,
kernel modules etc. Program execution and interaction with the operating system
result in several changes to the contents of the main memory. In our case, we use
the intuition that by monitoring these changes, we can reconstruct the sequence
of actions that caused them. To extract execution features from the main mem-
ory, BotWatcher uses Volatility [8]. Volatility is a mature framework that sup-
ports investigating memory images of operating systems and helps to bridge the
semantic gap encountered in a raw memory dump. BotWatcher creates mem-
ory dumps of the virtual analysis environment periodically. We conducted sev-
eral experiments and found that a period Td of three minutes is suﬃcient for our
purpose.
Note that we do not take traditional VM snapshots to extract the system
state. This would stall the VM for several seconds, making BotWatcher easy
to detect. Alternatively, we leverage the hypervisor features to eﬃciently create
memory dumps. In our implementation, we use the command line tool VBox-
Manage debugvm dumpvmcore in order to dump the memory of a VM. This
ﬁrst copies the VM’s memory into another memory location and then writes
the copied data to hard disk. To ensure a consistent and atomic read of the
VM’s memory, the VM is only paused during the ﬁrst step. The amount of time
depends on the memory throughput of the hypervisor. Current memory modules
have a very high throughput of more than 10 GB [16]. The copying of memory
leads to a short time frame in which the VM is unresponsive. Since many normal
operations cause a similar eﬀect, e.g., waiting for an interrupt of some hardware
device, this should be hard to detect by malware. Though, we plan to evaluate
this in the future (see Sect. 7).
Network traﬃc is the second source of information that we use to gain insights
into the role a bot plays in the botnet infrastructure. Bots use the network
to communicate with their C&C server or other peers as well as to perform
malicious actions such as sending spam or participating in DDoS attacks. Bot-
Watcher captures network traﬃc that passes by the virtual network interface
of the analysis environment and extracts features like IP addresses, transport
protocols, port numbers. We use the network security monitor Bro [6] for ana-
lyzing the network traﬃc. Network-related features collected in the time interval
[tk, tk + Td], where tk is time of the last period, are attributed to the point in
time tk + Td.
2.4 Phase II: Execution Events Extraction
After having extracted the system state S (tk) of the analysis machine, we iden-
tify the state transition relative to the previous state S (tk−1). More speciﬁcally,
BotWatcher: Transparent and Generic Botnet Tracking
571
we identify the set of newly created execution features since that last snapshot
F + = S (tk) \ S (tk−1). Similarly, we identify the set of terminated execution
features since the last snapshot F − = S (tk−1) \ S (tk). The fact that a feature
is created or terminated at a given point in time is denoted as execution event.
Each execution event is assigned a timestamp and characteristic meta data to
fully describe it. For example, for process creation events, we record the cor-
responding process identiﬁer. Table 1 shows the execution events extracted by
BotWatcher. In the following, we discuss the extracted events in detail and
explain our motivation behind tracking them.
Table 1. Execution events
Event
P [pid, τ, ts]
Description
Process event of type τ ∈ {τcreate, τterminate} that represents the
creation or termination of a process with identiﬁer pid at time
ts
T [tid, pid, τ, ts] Thread event of type τ ∈ {τcreate, τterminate} that represents the
creation or termination of a thread with identiﬁer tid from
process pid at time ts
M [as, ae, pid, ts] Memory event represents the allocation of a memory block with
a start address as and an end address ae in the address space
of process pid at time ts
F [f, ts]
C [k, v, ts]
K [τ, ts]
N [s, pid, τ, ts]
information k with value v at time ts
File event that represents opening and closing a ﬁle f at time ts
Conﬁguration event that represents storing a conﬁguration
Kernel event of type τ ∈ {τmodule, τtimer, τcallback} at time ts
Network event of type τ ∈ {τTCP, τUDP} that corresponds to
that represents starting a new kernel module m
the socket s owned by process pid at time ts
Processes. Malware often installs new modules on the infected system. This
can be a new version of the malware sent by its C&C server or a new malware
to install [15]. BotWatcher extracts a list of running processes from every
memory dump to keep track of active programs. In order to remain stealthy,
rootkits often manipulate OS-internal data structures to hide processes. For
example, Windows maintains a double-linked list of EPROCESS structures. A
rootkit can hide a speciﬁc process by unlinking the corresponding entry in this
list. For this reason, BotWatcher uses several sources of information in order
to detect all running processes including the hidden ones.
Threads. Modern malware often employs code injections, a technique to execute
code in the context of a remote process without having to create a new process.
This helps malware to operate covertly and gain higher privileges [13]. A common
way to achieve that is to copy code into the address space of a benign process
572
T. Barabosch et al.
space and then start a new thread to execute its malicious code in the context
of the benign process. For this reason, BotWatcher monitors all threads on
the analysis system.
Memory. Malware needs to have its code in main memory in order to be exe-
cuted. We assume that this code resides in its own memory region (leaving
methods like return oriented programming aside). The allocation of new mem-
ory blocks is therefore a valuable source of information. For example, it is usually
the ﬁrst step of a code injection. For this reason, BotWatcher keeps track of
allocated memory blocks and their assigned access rights for each process.
Files. Malware interacts with ﬁles on a system for several purposes, e.g., infor-
mation stealing, installing new modules, ransomware. BotWatcher monitors
ﬁle handles and detects that ﬁles are opened or closed.
Conﬁgurations. Malware alters system conﬁgurations for several reasons such
as achieving persistence to survive system reboots, disabling ﬁrewalls and other
security tools, and manipulating network routes. In order to capture interest-
ing modiﬁcations of system conﬁgurations, BotWatcher keeps track of those
conﬁgurations as a set of key and value pairs.
Kernel events. Today’s malware uses rootkit components in order to operate
stealthy in the infected system. For example, these components can hide malware
modules that operate in user space. Malware typically registers its rootkit com-
ponent as a new kernel module that can modify sensitive kernel data structures
such as the system call table. For this reason, BotWatcher observes kernel
modules and kernel data structure modiﬁcations.
Network traﬃc. Bots use the network to communicate with their botmaster
and participate in malicious activities such as sending spam and taking part
in DDoS attacks. Network communication provides valuable information about
the bot’s behavior and the role it plays in the botnet. BotWatcher monitors
network traﬃc of both stateful (TCP) and stateless (UDP) transport protocols.
Also, meta information from application-level protocols such as HTTP, FTP,
and DNS is extracted.
An important aspect is to be able to distinguish between the source of activi-
ties observed in the analysis environment. This is particularly important to avoid
mixing behaviors in case malware starts to download/drop other malware. For
this reason, we extract the process and thread identiﬁers for several execution
events, which enables us to attribute observed activities to the corresponding
process and thread. However, for some events, Volatility does not extract the
process/thread identiﬁers. In these cases, we cannot attribute this event to a
speciﬁc malicious process.
2.5 Phase III: Events Correlation
The ﬁnal phase of BotWatcher monitors the evolution of execution events over
time and infers the corresponding high-level complex malware-related actions.
BotWatcher: Transparent and Generic Botnet Tracking
573
For example, the sequence of starting a network connection, downloading a ﬁle,
and starting a new process is inferred as a malware download event. Those high-
level events represent characteristic stages of the botnet life-cycle.
Inference rules. At the core of BotWatcher’s correlation logic are inference
rules represented by the form:
P1 P2 . . . Pn
C
The top of the inference rule bar contains the premises P1, P2, . . . , Pn. If all
premises are satisﬁed, then we can conclude the statement below the bar C.
Inference rules provide a formal and compact notation for single step inference
and implicitly specify an inference algorithm by recursively applying rules on
premises until a ﬁxed point is reached. BotWatcher uses an extensible set
of rules that cover a wide spectrum of malware-related actions. A subset of the
inference rules is shown in Fig. 2. Due to space constraints, we cannot present the
complete set of our inference rules. For this reason, we provide a supplemental
document on our website [12]. In the following, we explain some of the high-level
behaviors that can be inferred by BotWatcher.
Fig. 2. Exemplary inference rules. Premises are execution events and as conclusion
malicious behavior is inferred.
CodeInjection. We infer code injection attacks when the allocation of a mem-
ory page in a running process is followed by starting a thread whose starting
address is located inside this page (rule (1) in Fig. 2).
MalwareDownload. We use three rules to infer MalwareDownload events.
First, a binary is downloaded and later executed resulting in creating a new
process (rule (3) in Fig. 2). The second rule detects hot patches, i.e., dynamically
updating a program at runtime without the need for restart. To this end, the
rule checks for a download of a binary, followed by the manipulation of a memory
page that hosts malicious code. The third rule detects the execution of a binary
574
T. Barabosch et al.
within another process space. This is inferred when a binary is downloaded and
then a code injection event is detected.
Spamming. Botnets often send spam emails to distribute new malware and
infect new systems. BotWatcher detects sending spam when an outgoing net-
work connection to a mail server is established (rule (4) in Fig. 2). An example
is establishing a connection to port 25 (SMTP). This allows to extract spam
templates from the network traﬃc.
Persistence. Once malware gains access to a system, often its goal it to operate
there for a long time. This behavior is known as persistence and enables the
malware to survive reboots of the infected machine. We detect two persistence
mechanisms; ﬁrst copying a ﬁle to a system folder, and second modifying the
system conﬁgurations to ensure automatic start of the malware at system start
(rule (5) in Fig. 2).
CCInfrastructure. Any network activity that cannot be classiﬁed otherwise is
inferred as communication between the bot and the botnet infrastructure. Bot-
Watcher follows the same intuition of the honeypot paradigm. This means that
it assumes that any observable behavior is caused by a malicious process and
tries to attribute them to malware actions. Although our experiments showed
satisfactory results, it is conceivable that the C&C inference rule is overly sim-
pliﬁed.
Rootkit. The installation of rootkit components is detected by one of the fol-
lowing two methods. First, the appearance of a new module in the list of loaded
kernel modules is inferred as rootkit event. The second method is through ker-
nel callbacks. Certain kernel callbacks are associated with kernel rootkits and
include notiﬁcations about the creation of new threads and processes or the
loading of new user-mode modules. For example, ZeroAccess registers a driver-
supplied callback that is subsequently notiﬁed whenever an image is loaded for
execution.
MassiveFileAccess. This event is inferred when a large amount of ﬁles is
opened by the malware (n > 1000). The intuition behind detecting this type of
events is that it characteristic for several malicious activities; ﬁrst, ransomware
may encrypt certain types of ﬁles using public-key cryptography, with the pri-
vate key stored only on the malware’s control servers. The malware then oﬀers
to decrypt the data if a payment is made by a stated deadline, and threatens to
delete the private key if the deadline passes. A second scenario is when malware
tries to replicate itself by infecting other executable ﬁles in the system. These
activities share the property that a large amount of ﬁles is opened, which is
detected by BotWatcher.
Finding the optimal value of such thresholds is quite diﬃcult: a too high
value results in several events being missed. On the other hand, a too low value
results in benign ﬁle activities being mistakenly marked as malicious. The values
presented in this paper were suﬃcient for our experiments. However, these values
are not hard coded and the inference rules are conﬁgurable. This is done to
avoid making it easy to evade detection of events whose inference rules rely on
BotWatcher: Transparent and Generic Botnet Tracking
575
such thresholds. Moreover, we store the extracted execution events so that the
inference analysis can be repeated oﬄine if one decided to insert new rules or
modify existing ones.
DGA. Modern botnets employ domain generation algorithms (DGA) to peri-
odically generate domain names that can be used as rendezvous points with
their C&C servers. This helps the botnet to achieve resilience against takedown
attempts and evasion against protection systems that rely upon blacklists. When
using a DGA, the bot often generates a large number of domain names and
attempts to randomly contact one from the generated domains until it succeeds.
BotWatcher detects the use of DGAs by leveraging the fact that using DGAs
often results in a high failure rate of DNS responses [14].
2.6 Containment
We run each new executable under containment using netﬁlter/iptables [7]. We
conﬁne each piece of malware in its execution by a custom, manually created
containment policy that allows us to decide per-ﬂow whether to allow traﬃc to
interact with the outside, drop it, rewrite it, or reroute it. In our scenario, the
malware family and behavior is completely unknown when we run a sample.
Thus, we create a containment policy that allows us to run our samples safely,
and to extract relevant features from their network traﬃc.