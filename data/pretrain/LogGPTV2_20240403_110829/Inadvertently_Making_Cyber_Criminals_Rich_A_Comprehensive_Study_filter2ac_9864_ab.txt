government [3], CBS Showtime [26] and many others.
Third-party software (B) Gaining unsolicited access to
large number of domains is a time-consuming operation. As
a consequence, attackers have tried different tactics to infect
multiple websites at once by infecting third-party software.
In the last year, we have seen attacks in which cryptojacking
code is injected into popular third-party software, such as
JQuery or Google Tag Manager [5]. Drupal, a widely used
open-source CMS, was the victim of a large attack involving
more than 100,000 websites [32] and WordPress, a similar
CMS, suffered from a weather plugin [53] secretly injecting
a cryptojacking script into the website it was installed on.
Malicious advertisements (C) Advertisement-supported
websites let their advertisements be sold by advertisement
networks, such as Google. The downside of this system is that
attackers can attach cryptomining scripts to advertisements
and distribute them through an advertisement network over
a large number of websites. In January 2018, Youtube was a
victim of this kind of attack, in which cryptomining scripts
were injected in the ads shown on the website [30].
Man in the middle (D) The most effective method of gain-
ing large groups of miners for an attacker is by being the man-
in-the-middle. In August 2018, 200,000 MikroTik routers
were infected by malware, which inserted a Coinhive script
into every website the user visits [35]. The bug was patched
within a day, but many MikroTik routers are not, leaving them
still vulnerable. In our research, we are not able to detect these
attacks, since they are not originating from a website.
4 Related Work
Academic research on browser-based cryptomining has only
started in 2017 and is, due to the recent developments of
the used web standards, very topically. The ﬁrst explorations
into this research ﬁeld have been performed by Eskandari et
al. [13]. In their analysis, the authors queried two large source
code datasets for strings known to be part of cryptomining
scripts (such as coinhive.min.js or load.jsecoin.com)
and found a large number of domains. This method is only
able to detect known mining applications, not the obfuscated
or new ones. While calculating the proﬁtability, the authors
stumbled upon a Coinhive campaign which ran a miner on
over 11,000 parked websites. This study kicked-off a num-
ber of subsequent investigations, which were all aimed at de-
tecting browser-based cryptomining. Rauchberger et al. [39]
created their MiningHunter, a crawler able to detect mining
scripts even when their malicious activities are obfuscated.
The detection method relied on analyzing executed JavaScript
code and WebSocket trafﬁc frames. After a successful crawl
of the Alexa Top 1M in the beginning of December 2017,
they were able to detect 3,178 websites running a cryptominer.
1,210 unique keys were retrieved and one large campaign in-
volving 1,116 websites infected by a malicious advertisement
network was identiﬁed. At the same time Parra Rodriguez et
al. [40] worked on RAPID, a resource and API-based detec-
tion method, which is able to detect browser-based crypto-
mining and is resistant to JavaScript obfuscation. Their classi-
ﬁcation was able to classify mining samples with a precision
of 96%. Eventually 656 actively mining websites were found
in the Alexa Top 330,550. A similar classiﬁcation study was
performed by Carlin et al. [2], in which they demonstrated
that dynamic opcode tracing is extremely effective at detect-
ing cryptomining behavior. Liu et al. [24] proposed a novel
approach for detecting browser-based mining applications by
1630    28th USENIX Security Symposium
USENIX Association
creating BMDetector, a detection system based on a modi-
ﬁed Chrome kernel. Using this modiﬁed kernel, the authors
were able to perform JavaScript code block analysis on the
compiled JavaScript code, which allowed them to detect heav-
ily obfuscated miner applications as well. Hong et al. [19]
built CMTracker, a behavior-based detector with two runtime
proﬁlers for tracking browser-based cryptomining. The ﬁrst
proﬁler monitors incoming JavaScript ﬁles for known ﬁnger-
prints, the second proﬁler observes the call stack and searches
for periodic executions. Their approach was able to detect 868
actively mining websites among the Alexa Top 100K in April
2018. More than half of the found keys were used only once
and they noticed that domains hosting mining scripts were mi-
grating faster than the mining pool domains. The authors also
mentioned evasion techniques, such as code obfuscation and
payload hiding inside third-party libraries. Periodic execution
in mining scripts was also noticed by Wang et al. [49], who
created SEISMIC, a monitoring service to interrupt browser-
based mining scripts based on this ﬁnding.
A different view on the subject was given by Papadopoulos
et al. [36], who tried to answer the question whether browser-
based cryptomining could be a suitable alternative to adver-
tisements. After crawling a dataset of 200K websites running
advertisements or cryptominers, they concluded that adver-
tisements are still more than 5 times more proﬁtable than
cryptominers. This will only change once a visitor stays on
the same website for more than 5.3 minutes or when Monero
becomes more valuable [36]. A broader view of the browser-
based cryptomining ecosystem is given by Saad et al. [42],
who researched both cryptomining code and user impact. Be-
sides various JavaScript static code analysis clustering meth-
ods and battery drainage studies when cryptomining, they
did not perform any crawling of the web. This is in great
contrast to the work of Rüth et al. [41], who digged deep
into browser-based cryptomining by conducting two large
web crawls. A ﬁrst crawl using zgrab, which downloaded the
ﬁrst 256 kB of 137M .com, .net, and .org domains, as well as
from the Alexa Top 1M websites. Consequently, the resulting
HTML ﬁle was checked against the NoCoin [14] block list.
A second crawl was performed on a subset of 10M websites,
with a customized Chrome browser, instructed to dump Web-
Assembly modules for further inspection. They conclude their
work by stating that 0.08% of the probed websites is actively
mining [41].
Another large web crawl study is conducted by Konoth et
al. [22] as a study for the creation of MineSweeper. Again,
the Alexa Top 1M (including three internal pages) was
crawled, with a crawler extracting information from all loaded
JavaScript and HTML ﬁles, WebSocket trafﬁc, and requests
made while visiting the website. A total of 1,735 websites was
found to be actively mining, the majority of them using Coin-
hive. 20 mining campaigns were discovered in their analysis,
of which the largest involved 139 websites. Based on these
ﬁndings, a novel detection technique was developed, which
focused on the aspects all mining scripts have in common:
high CPU cache usage and WebAssembly. They developed
MineSweeper, able to successfully identify mining scripts
based on the CPU’s L1 and L3 cache usage and cryptomin-
ing characteristics in WebAssembly, thus hardening it against
miner obfuscation.
As shown by this summary of related work, most atten-
tion of academic investigation has been on detecting these
browser-based cryptominers. Multiple studies have shown to
be able to detect them with high precision [19, 22, 24, 39–41].
Academic research is less focused on ﬁnding campaigns of
cryptomining websites, while the online research commu-
nity (such as Badpackets [31] or Krebs on Security [23]) is
particularly interested in ﬁnding those relations. The ﬁrst ex-
plorations into this area have been taken by [22], [13] and [39],
but campaigns have not been systematically explored in their
research. This paper aims to resolve this gap, by focusing
on identifying campaigns, methods used in these campaigns
and their evolution. We are also interested in the spread of
cryptojacking on the Web, but as previous work is mostly
crawling (subsets of) the Alexa Top 1M, we will analyze a
broader set of websites online. In this paper we will not try to
create a new detection method, but we build upon the work
of [22] to perform our crawls.
5 Methodology
In a measurement study like this, suitable datasets and meth-
ods are essential for conducting proper research. In this sec-
tion we ﬁrst discuss the datasets used or created, followed by
a summary of our crawler implementation.
5.1 Dataset creation
In our ﬁrst crawl, we focus on ﬁnding campaigns of crypto-
jacking websites. Previous work of [19, 22, 39, 41] mainly
investigated the popular parts of the Internet by crawling the
Alexa Top 1M, or subsets of it. But, as pointed out by Scheitle
et al., the Alexa Top 1M is not the only list measuring the
popular Internet and the method Alexa uses to create this list
raises questions whether it is the most reliable list to use for
research on cryptojacking [44]. To overcome this issue, we
have decided to use the union of three top lists on the Internet;
the Alexa Top 1M [1], the Cisco Umbrella 1M [4] and the
Majestic 1M [25], all using different measurement strategies,
to include the popular part of the Internet in our dataset. These
last two also include subdomains and domains not serving
a web page. Therefore, we have only added the domains to
the list of URLs to be crawled and omitted the subdomains
from the latter two. Since we are interested in ﬁnding as many
cryptojacking domains as possible for our campaign analysis,
we have decided to extend our list even further with a list
of websites gathered from querying PublicWWW – a source
code search engine – with the keywords listed in Appendix A.
USENIX Association
28th USENIX Security Symposium    1631
Table 2: Dataset creation for the campaign focused crawl
Date (2018)
List
No. of websites
Dec 24
Alexa Top 1M
1,000,000
Cisco Umbrella 1M
Dec 24
233,145
897,767
Majestic 1M
Dec 24
Custom PublicWWW set
87,051 Nov 23 – Dec 24
Total
1,896,503
The union of these sets formed the dataset to be crawled and
consisted out of 1,896,503 websites (unique effective TLDs +
1), as listed in Table 2. To estimate the prevalence of crypto-
jacking on the Internet in general, we will not use a top list
as the Alexa Top 1M, because it is not a random sample of
the Internet. We therefor also download a random sample of
~20% of the websites in 1,136 TLDs. We discuss this crawl
in more detail in Section 7.
Operator NetFlows While the aforementioned datasets
provide insights into the landscape of cryptomining installa-
tions at a given moment, these data sources do not reveal much
about the actual usage of such services. In order to bridge this
gap, we analyzed NetFlow traces from the network of a Tier
1 operator from September 2017 until December 2018, which
were collected at a 1:8192 sampling ratio. For our analysis,
we obtained NetFlow records for all trafﬁc from and to the
various WebSocket proxy servers belonging the mining ser-
vices. Although NetFlows do not reveal the actual contents
of a connection, the used ports and packet sizes can indicate
connection types. The identity of the source connecting to the
WebSocket proxy is however irrelevant, and was anonymized
to a pseudo-random value by the operator using the CryptoPan
algorithm [54].
5.2 Crawler implementation
As mentioned in Section 4, this research builds upon the
work of Konoth et al. [22]. Therefore, we have used their
crawler implementation as a starting point for our crawler.
The following paragraphs will highlight the major changes
and additions made to their work for our research.
Active mining detection We have instructed the crawler
to never explicitly consent to any mining operation. There-
fore, we deﬁne that website to be actively mining without
consent when: a mining code signature is found, together
with a siteKey, more than two WebWorkers and a WebSocket
connection, or, when the Stratum protocol communication or
login credentials for a mining pool are found in WebSocket
trafﬁc. If one of these conditions holds, we mark the domain
as actively cryptojacking.
WebSocket stack trace The miner application communi-
cates with the mining pool using WebSocket connections.
WebSocket trafﬁc was already logged in the crawler, but the
initiator of the WebSocket connection was not. By inspecting
the stack trace of the WebSocket initiation, we can determine
which script was responsible for opening the WebSocket con-
nection and therefore the mining initiator. Using this method,
we can easily distinguish between miners started from the
main HTML page or the ones hidden inside other resources.
Moreover, similar stack traces are a powerful indicator for
campaign analysis, since it shows what component started the
mining application. We have used this method successfully in
our campaign analysis to identify attack vectors. Miners hid-
den inside third-party software such as WordPress are easily
noticed in the stack trace, as we will show in Section 6.1.
Changed logic and exhaustive key ﬁnding Our crawler
visits every website twice. First, by using a custom Chrome
build, with the -dump-wasm-module ﬂag enabled to dump
any WebAssembly on the page. If present, these Wasm mod-
ules are analyzed for cryptojacking code by the MineSweeper
application. Second, by using another Chrome build, which
visits the website and saves every ﬁle it encounters. Instead of
visiting 3 internal pages (as Konoth et al. did), we instructed
the crawler to visit just one internal page. Besides that, we
have implemented a more exhaustive siteKey search. The
crawler ﬁrst searches for ﬁngerprints of known miner appli-
cations and afterwards for the siteKey in the following order:
WebSocket trafﬁc, the HTML page and ﬁnally in all other
HTML and JavaScript resources. A minor addition has been
made to automatically decode a base64 encoded siteKey of the
Mineralt miner [27]. This addition allowed us to retrieve more
siteKeys, which improves the campaign analysis afterwards.
Addition of new miner applications The publicly avail-
able Minesweeper crawler supports 22 different mining appli-
cations. Based on previous work and online research, we have
added another 9 miner applications to the crawler, in order to
also identify the newest miner applications. The added appli-
cations and their keywords are listed in Appendix B. For some
of the already supported miner applications we have extended
the ﬁngerprints and improved the regular expressions to ﬁnd
siteKeys.
Infrastructure
5.3
We deployed the crawler in Docker containers on 60 servers
within the university network, each running 8 Docker in-
stances in parallel. The crawl started on the December 24,
2018 and completed on January 9, 2019. In total, 1,769,183
websites have been successfully visited in this initial crawl.
Afterwards, we have performed a second crawl using the same
infrastructure, which we discuss in Section 7.
1632    28th USENIX Security Symposium
USENIX Association
Table 3: Summary of the results of the ﬁrst crawl
Crawling period
# websites crawled
# potential cryptojacking websites
# active cryptojacking websites
# active miner applications
# websites with unknown miners
# cryptojacking campaigns identiﬁed
# websites in largest campaign
# websites in Alexa Top 1M
# websites in Cisco Umbrella 1M
# websites in Majestic 1M
24/12/2018 – 9/1/2019
1,769,183 (93%)
21,022
10,100
22
323
204
987
648 (0.065%)
109 (0.047%)
506 (0.056%)
6 Current state of cryptojacking campaigns
We have identiﬁed 21,022 websites with traces of cryptomin-
ing activities of which 10,100 websites are actively mining
without the visitor’s explicit consent. Only 648 of these web-
sites are listed in the Alexa Top 1M. 22 different miner ap-
plications have been identiﬁed among the crawled websites,
most of them running at least the Coinhive miner application
(71%). Also, 509 websites are deploying multiple miners. For
323 websites, the used miner application could not be de-
tected, which indicates heavily obfuscated or unknown miner
applications. The results are summarized in Table 3.
Among the identiﬁed websites, 204 campaigns have been
detected, of which the largest one covers 987 websites. This
number of campaigns is a magnitude larger compared to pre-
vious work [22, 39]. We have identiﬁed the use of third-party
software, such as Drupal and WordPress, to be the driving
factor behind the largest cryptojacking campaigns.