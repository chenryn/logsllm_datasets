### Government and Other Entities
Government [3], CBS Showtime [26], and many other entities have been affected by cryptojacking.

### Third-Party Software (B)
Gaining unauthorized access to a large number of domains is a time-consuming operation. Consequently, attackers have employed various tactics to infect multiple websites simultaneously by compromising third-party software. In recent years, we have observed attacks where cryptojacking code is injected into popular third-party software, such as jQuery or Google Tag Manager [5]. For example, Drupal, a widely used open-source CMS, was the target of a major attack that affected over 100,000 websites [32]. Similarly, WordPress, another popular CMS, suffered from a malicious weather plugin [53] that secretly injected a cryptojacking script into the websites it was installed on.

### Malicious Advertisements (C)
Advertisement-supported websites often rely on ad networks, such as Google, to sell their ad space. However, this system has a downside: attackers can attach cryptomining scripts to advertisements and distribute them through these networks across a large number of websites. In January 2018, YouTube was a victim of such an attack, where cryptomining scripts were injected into the ads displayed on the platform [30].

### Man in the Middle (D)
One of the most effective methods for an attacker to gain control over a large group of miners is through a man-in-the-middle (MitM) attack. In August 2018, 200,000 MikroTik routers were infected with malware that inserted a Coinhive script into every website visited by the user [35]. Although the bug was patched within a day, many MikroTik routers remain unpatched and vulnerable. Our research cannot detect these types of attacks because they do not originate from a website.

## Related Work
Academic research on browser-based cryptomining began in 2017 and has gained significant attention due to the recent developments in web standards. The first explorations in this field were conducted by Eskandari et al. [13], who queried two large source code datasets for strings known to be part of cryptomining scripts (e.g., `coinhive.min.js` or `load.jsecoin.com`). They found a large number of domains, but their method could only detect known mining applications, not obfuscated or new ones. During their analysis, they discovered a Coinhive campaign running a miner on over 11,000 parked websites. This study sparked several subsequent investigations aimed at detecting browser-based cryptomining.

Rauchberger et al. [39] developed MiningHunter, a crawler capable of detecting mining scripts even when their malicious activities are obfuscated. Their detection method involved analyzing executed JavaScript code and WebSocket traffic frames. After crawling the Alexa Top 1M in early December 2017, they detected 3,178 websites running a cryptominer, identified 1,210 unique keys, and uncovered one large campaign involving 1,116 websites infected by a malicious advertisement network.

Parra Rodriguez et al. [40] created RAPID, a resource and API-based detection method resistant to JavaScript obfuscation. Their classification achieved a precision of 96% and identified 656 actively mining websites in the Alexa Top 330,550. Carlin et al. [2] demonstrated that dynamic opcode tracing is highly effective at detecting cryptomining behavior. Liu et al. [24] proposed BMDetector, a detection system based on a modified Chrome kernel, which allowed them to perform JavaScript code block analysis on compiled JavaScript code, enabling the detection of heavily obfuscated miner applications.

Hong et al. [19] built CMTracker, a behavior-based detector with two runtime profilers. The first profiler monitors incoming JavaScript files for known fingerprints, while the second profiler observes the call stack and searches for periodic executions. Their approach detected 868 actively mining websites among the Alexa Top 100K in April 2018. They also noted evasion techniques, such as code obfuscation and payload hiding inside third-party libraries. Wang et al. [49] created SEISMIC, a monitoring service to interrupt browser-based mining scripts based on periodic execution patterns.

Papadopoulos et al. [36] explored whether browser-based cryptomining could be a viable alternative to advertisements. After crawling a dataset of 200K websites, they concluded that advertisements are more than five times more profitable than cryptominers, unless a visitor stays on the same website for more than 5.3 minutes or if Monero becomes more valuable. Saad et al. [42] provided a broader view of the browser-based cryptomining ecosystem, including both cryptomining code and user impact, but did not perform any web crawls.

Rüth et al. [41] conducted two large web crawls. The first crawl used zgrab to download the first 256 kB of 137M .com, .net, and .org domains, as well as from the Alexa Top 1M websites, and checked the resulting HTML files against the NoCoin [14] block list. The second crawl, performed on a subset of 10M websites, used a customized Chrome browser to dump WebAssembly modules for further inspection. They found that 0.08% of the probed websites were actively mining.

Konoth et al. [22] conducted another large web crawl study for the creation of MineSweeper. They crawled the Alexa Top 1M, including three internal pages, and extracted information from all loaded JavaScript and HTML files, WebSocket traffic, and requests made while visiting the website. They identified 1,735 actively mining websites, with the majority using Coinhive. Based on their findings, they developed a novel detection technique focused on high CPU cache usage and WebAssembly, creating MineSweeper, which successfully identifies mining scripts based on CPU L1 and L3 cache usage and cryptomining characteristics in WebAssembly.

Most academic research has focused on detecting browser-based cryptominers, with multiple studies achieving high precision [19, 22, 24, 39–41]. However, less attention has been given to finding campaigns of cryptomining websites, an area of particular interest to the online research community (e.g., Badpackets [31] or Krebs on Security [23]). This paper aims to address this gap by focusing on identifying campaigns, the methods used, and their evolution. We will analyze a broader set of websites online, rather than just the Alexa Top 1M, and build upon the work of Konoth et al. [22] for our crawls.

## Methodology

### Dataset Creation
In our first crawl, we focus on finding campaigns of cryptojacking websites. Previous studies [19, 22, 39, 41] primarily investigated the popular parts of the Internet by crawling the Alexa Top 1M or subsets of it. However, as pointed out by Scheitle et al. [44], the Alexa Top 1M may not be the most reliable list for researching cryptojacking. To address this, we use the union of three top lists: the Alexa Top 1M [1], the Cisco Umbrella 1M [4], and the Majestic 1M [25], each using different measurement strategies. These lists include subdomains and domains that do not serve a web page, so we only added the domains to our list of URLs to be crawled. To find as many cryptojacking domains as possible, we extended our list with a set of websites gathered from querying PublicWWW with the keywords listed in Appendix A.

| Date (2018) | List | No. of Websites |
|-------------|------|-----------------|
| Dec 24      | Alexa Top 1M | 1,000,000 |
| Dec 24      | Cisco Umbrella 1M | 233,145 |
| Dec 24      | Majestic 1M | 897,767 |
| Nov 23 – Dec 24 | Custom PublicWWW set | 87,051 |
| **Total**   | **1,896,503** | |

The union of these sets formed our dataset, consisting of 1,896,503 websites (unique effective TLDs + 1). To estimate the prevalence of cryptojacking on the Internet, we also downloaded a random sample of ~20% of the websites in 1,136 TLDs, which we discuss in Section 7.

**Operator NetFlows:** While the aforementioned datasets provide insights into the landscape of cryptomining installations at a given moment, they do not reveal much about the actual usage of such services. To bridge this gap, we analyzed NetFlow traces from the network of a Tier 1 operator from September 2017 to December 2018, collected at a 1:8192 sampling ratio. We obtained NetFlow records for all traffic from and to the various WebSocket proxy servers belonging to the mining services. Although NetFlows do not reveal the actual contents of a connection, the used ports and packet sizes can indicate connection types. The identity of the source connecting to the WebSocket proxy was anonymized using the CryptoPan algorithm [54].

### Crawler Implementation
Our research builds upon the work of Konoth et al. [22], and we used their crawler implementation as a starting point. The following paragraphs highlight the major changes and additions made to their work for our research.

**Active Mining Detection:** We instructed the crawler to never explicitly consent to any mining operation. A website is considered to be actively mining without consent if a mining code signature is found, along with a siteKey, more than two WebWorkers, and a WebSocket connection, or if Stratum protocol communication or login credentials for a mining pool are found in WebSocket traffic. If any of these conditions hold, we mark the domain as actively cryptojacking.

**WebSocket Stack Trace:** The miner application communicates with the mining pool using WebSocket connections. We enhanced the crawler to log the stack trace of the WebSocket initiation, allowing us to determine which script opened the WebSocket connection and thus identify the mining initiator. This method helps distinguish between miners started from the main HTML page and those hidden inside other resources. Similar stack traces are powerful indicators for campaign analysis, as they show what component started the mining application. This method was successfully used in our campaign analysis to identify attack vectors, such as miners hidden inside third-party software like WordPress.

**Changed Logic and Exhaustive Key Finding:** Our crawler visits each website twice. First, it uses a custom Chrome build with the `-dump-wasm-module` flag enabled to dump any WebAssembly on the page, which is then analyzed by the MineSweeper application. Second, it uses another Chrome build to visit the website and save every file it encounters. Instead of visiting three internal pages (as Konoth et al. did), we instructed the crawler to visit just one internal page. Additionally, we implemented a more exhaustive siteKey search, searching for fingerprints of known miner applications and then for the siteKey in the following order: WebSocket traffic, the HTML page, and finally in all other HTML and JavaScript resources. We also added the ability to automatically decode a base64-encoded siteKey for the Mineralt miner [27], which allowed us to retrieve more siteKeys and improve the campaign analysis.

**Addition of New Miner Applications:** The publicly available Minesweeper crawler supports 22 different mining applications. Based on previous work and online research, we added another 9 miner applications to the crawler to identify the newest miner applications. The added applications and their keywords are listed in Appendix B. For some of the already supported miner applications, we extended the fingerprints and improved the regular expressions to find siteKeys.

### Infrastructure
We deployed the crawler in Docker containers on 60 servers within the university network, each running 8 Docker instances in parallel. The initial crawl started on December 24, 2018, and completed on January 9, 2019. In total, 1,769,183 websites were successfully visited. We then performed a second crawl using the same infrastructure, which we discuss in Section 7.

| Crawling Period | # Websites Crawled | # Potential Cryptojacking Websites | # Active Cryptojacking Websites | # Active Miner Applications | # Websites with Unknown Miners | # Cryptojacking Campaigns Identified | # Websites in Largest Campaign | # Websites in Alexa Top 1M | # Websites in Cisco Umbrella 1M | # Websites in Majestic 1M |
|-----------------|--------------------|-----------------------------------|---------------------------------|------------------------------|---------------------------------|-------------------------------------|--------------------------------|------------------------------|---------------------------------|------------------------------|
| 24/12/2018 – 9/1/2019 | 1,769,183 (93%) | 21,022 | 10,100 | 22 | 323 | 204 | 987 | 648 (0.065%) | 109 (0.047%) | 506 (0.056%) |

## Current State of Cryptojacking Campaigns
We identified 21,022 websites with traces of cryptomining activities, of which 10,100 websites are actively mining without the visitor’s explicit consent. Only 648 of these websites are listed in the Alexa Top 1M. Among the crawled websites, 22 different miner applications were identified, with the majority running the Coinhive miner application (71%). Additionally, 509 websites are deploying multiple miners. For 323 websites, the used miner application could not be detected, indicating heavily obfuscated or unknown miner applications.

Among the identified websites, 204 campaigns were detected, with the largest one covering 987 websites. This number of campaigns is significantly larger compared to previous work [22, 39]. We found that the use of third-party software, such as Drupal and WordPress, is the driving factor behind the largest cryptojacking campaigns.