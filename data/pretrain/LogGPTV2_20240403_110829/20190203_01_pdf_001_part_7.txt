component diagrams. The logical components are shaded in yellow to aid in identifying
them in the diagrams.
2.3.3.1 Oracle to PostgreSQL or Advanced Server Replication
The following is an illustration of a basic Oracle to PostgreSQL or Advanced Server
single-master replication system. A single publication in Oracle contains tables from two
schemas that are replicated to a database residing in either PostgreSQL or Advanced
Server.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 60
EDB Postgres Replication Server User’s Guide
Figure 2-11 - Oracle to PostgreSQL or Advanced Server replication
The following describes the logical components in the preceding diagram:
 The publication server to be used is identified by registering its network location,
user name, and password.
 A publication database definition is created subordinate to the SMR type node
under the publication server. The Oracle database user name pubuser is
specified in the definition along with the database network location and database
identifier. When you create a user named pubuser in Oracle, a schema named
pubuser is automatically created by Oracle at the same time. The publication
server creates the control schema objects in the pubuser control schema for the
replication system’s metadata when you create the publication database definition.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 61
EDB Postgres Replication Server User’s Guide
 A publication named pub is created subordinate to the publication database
definition. The publication consists of table A in schema S1 and tables B and C in
schema S2.
 The subscription server to be used is identified by registering its network location,
user name, and password.
 A subscription database definition is created subordinate to the subscription
server. The Postgres database user name subuser is specified in the definition
along with the database network location and database identifier.
 A subscription named sub is created subordinate to the subscription database
definition. When the subscription is created, the subscription server creates
schemas named S1 and S2 in the subscription database. The table definitions for
tables A, B, and C are also created at this time. When replication occurs, the
publication server populates these tables with rows from the publication.
The following screen capture shows how the logical components of this replication
system appear in the xDB Replication Console replication tree.
Figure 2-12 - Oracle to Postgres replication tree
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 62
EDB Postgres Replication Server User’s Guide
See Chapter 4 for an introduction to the xDB Replication Console.
2.3.3.2 SQL Server to PostgreSQL or Advanced Server Replication
The following is an illustration of a basic SQL Server to PostgreSQL or Advanced Server
single-master replication system. A single publication in SQL Server contains tables from
two schemas that are replicated to a database residing in either PostgreSQL or Advanced
Server.
Figure 2-13 - SQL Server to PostgreSQL or Advanced Server replication
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 63
EDB Postgres Replication Server User’s Guide
The following describes the logical components in the preceding diagram:
 The publication server to be used is identified by registering its network location,
user name, and password.
 A publication database definition is created subordinate to the SMR type node
under the publication server. The SQL Server login pubuser is specified in the
definition along with the database network location and database identifier. The
schema pubuser was created during the publication database preparation step as
described in Section 5.1.4.2. The pubuser schema along with the control schema
consisting of three physical schemas _edb_replicator_pub,
_edb_replicator_sub, and _edb_scheduler are populated with the control
schema objects for the replication system’s metadata when you create the
publication database definition.
 A publication named pub is created subordinate to the publication database
definition. The publication consists of table A in schema S1 and tables B and C in
schema S2.
 The subscription server to be used is identified by registering its network location,
user name, and password.
 A subscription database definition is created subordinate to the subscription
server. The Postgres database user name subuser is specified in the definition
along with the database network location and database identifier.
 A subscription named sub is created subordinate to the subscription database
definition. When the subscription is created, the subscription server creates
schemas named S1 and S2 in the subscription database. The table definitions for
tables A, B, and C are also created at this time. When replication occurs, the
publication server populates these tables with rows from the publication.
The following screen capture shows how the logical components of this replication
system appear in the xDB Replication Console replication tree.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 64
EDB Postgres Replication Server User’s Guide
Figure 2-14 - SQL Server to Postgres replication tree
See Chapter 4 for an introduction to the xDB Replication Console.
2.3.3.3 Advanced Server to Oracle Replication
The following is an illustration of a basic Advanced Server to Oracle single-master
replication system. A single publication in an Advanced Server database contains tables
from two schemas that are replicated to an Oracle database.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 65
EDB Postgres Replication Server User’s Guide
Figure 2-15 - Advanced Server to Oracle replication
The following describes the logical components in the preceding diagram:
 The publication server to be used is identified by registering its network location,
user name, and password.
 A publication database definition is created subordinate to the SMR type node
under the publication server. The Postgres database user name pubuser is
specified in the definition along with the database network location and database
identifier. The publication server creates the control schema consisting of three
physical schemas _edb_replicator_pub, _edb_replicator_sub, and
_edb_scheduler and populates them with the control schema objects for the
replication system’s metadata when you create the publication database definition.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 66
EDB Postgres Replication Server User’s Guide
 A publication named pub is created subordinate to the publication database
definition. The publication consists of table A in schema S1 and tables B and C in
schema S2.
 The subscription server to be used is identified by registering its network location,
user name, and password.
 A subscription database definition is created subordinate to the subscription
server. The Oracle database user name subuser is specified in the definition
along with the database network location and database identifier.
 A subscription named sub is created subordinate to the subscription database
definition. When you create a user named subuser in Oracle, a schema named
subuser is automatically created by Oracle at the same time. The table
definitions for tables A, B, and C are created in schema subuser when you create
subscription sub. When replication occurs, the publication server populates these
tables with rows from the publication.
The following screen capture shows how the logical components of this replication
system appear in the xDB Replication Console replication tree.
Figure 2-16 - Advanced Server to Oracle replication tree
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 67
EDB Postgres Replication Server User’s Guide
See Chapter 4 for an introduction to the xDB Replication Console.
2.3.3.4 PostgreSQL or Advanced Server to SQL Server Replication
The following is an illustration of a basic PostgreSQL or Advanced Server to SQL Server
single-master replication system. A single publication in a PostgreSQL or Advanced
Server database contains tables from two schemas that are replicated to a SQL Server
database.
Figure 2-17 - PostgreSQL or Advanced Server to SQL Server replication
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 68
EDB Postgres Replication Server User’s Guide
The following describes the logical components in the preceding diagram:
 The publication server to be used is identified by registering its network location,
user name, and password.
 A publication database definition is created subordinate to the SMR type node
under the publication server. The Postgres database user name pubuser is
specified in the definition along with the database network location and database
identifier. The publication server creates the control schema consisting of three
physical schemas _edb_replicator_pub, _edb_replicator_sub, and
_edb_scheduler and populates them with the control schema objects for the
replication system’s metadata when you create the publication database definition.
 A publication named pub is created subordinate to the publication database
definition. The publication consists of table A in schema S1 and tables B and C in
schema S2.
 The subscription server to be used is identified by registering its network location,
user name, and password.
 A subscription database definition is created subordinate to the subscription
server. The SQL Server login subuser is specified in the definition along with
the database network location and database identifier.
 A subscription named sub is created subordinate to the subscription database
definition. When the subscription is created, the subscription server creates
schemas named S1 and S2 in the subscription database. The table definitions for
tables A, B, and C are also created at this time. When replication occurs, the
publication server populates these tables with rows from the publication.
The following screen capture shows how the logical components of this replication
system appear in the xDB Replication Console replication tree.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 69
EDB Postgres Replication Server User’s Guide
Figure 2-18 - Postgres to SQL Server replication tree
See Chapter 4 for an introduction to the xDB Replication Console.
2.3.3.5 Postgres Multi-Master Replication
The following is an illustration of a basic Postgres multi-master replication system. A
publication in a Postgres master definition node contains tables from two schemas that
are initially replicated to two other Postgres master nodes. The tables in all three master
nodes can then be updated and synchronized with each other.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 70
EDB Postgres Replication Server User’s Guide
Figure 2-19 - Postgres multi-master replication system
The following describes the logical components in the preceding diagram:
 The publication server to be used is identified by registering its network location,
user name, and password.
 A publication database definition is created subordinate to the MMR type node
under the publication server. This first publication database definition identifies
the master definition node. The Postgres database user name mmruser_a is
specified in the definition along with the database network location and database
identifier. The publication server creates the control schema consisting of three
physical schemas _edb_replicator_pub, _edb_replicator_sub, and
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 71
EDB Postgres Replication Server User’s Guide
_edb_scheduler and populates them with the control schema objects for the
replication system’s metadata when you create the publication database definition.
 A publication named pub is created subordinate to the publication database
definition. The publication consists of table A in schema S1 and tables B and C in
schema S2.
 A second master node is added by creating another publication database definition
subordinate to the MMR type node of the publication server under which the
master definition node resides. The Postgres database user name mmruser_b is
specified in the definition along with the database network location and database
identifier to create the second master node.
 When you add the second master node, you can choose to have the publication
server create schemas S1 and S2 and the table definitions for A, B, and C for you,
or you could have manually created the schemas and table definitions beforehand.
The publication server creates the control schema consisting of three physical
schemas _edb_replicator_pub, _edb_replicator_sub, and
_edb_scheduler under which it creates the control schema objects to store the
master node’s metadata. When defining the master node, you can choose to have
the publication server populate these tables with rows from the publication at this
time, or you can defer table loading to a later point in time.
 A third master node is added in a similar manner using the Postgres database user
name mmruser_c.
The following screen capture shows how the logical components of this replication
system appear in the xDB Replication Console replication tree.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 72
EDB Postgres Replication Server User’s Guide
Figure 2-20 - Postgres multi-master replication tree
See Chapter 4 for an introduction to the xDB Replication Console.
2.4 Designing a Replication System
This section presents the general steps, design considerations, and best practices for
designing a replication system before you begin the actual implementation.
2.4.1 General Steps
The following steps provide a general guideline for implementing a replication system.
Step 1: Determine if xDB Replication Server is the right solution for your requirements
and you have chosen the best solution for your particular needs. xDB Replication Server
can be used to implement single-master or multi-master replication systems. For single-
master replication systems, the distinguishing characteristic of xDB Replication Server is
its ability to replicate from an Oracle database to a PostgreSQL or Advanced Server
database, from a SQL Server database to a PostgreSQL or Advanced Server database,
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 73
EDB Postgres Replication Server User’s Guide
from an Advanced Server database to an Oracle database, or from a PostgreSQL or
Advanced Server database to a SQL Server database.
Step 2: Plan the general strategy of how you will use xDB Replication Server. Will the
single-master or multi-master model best suit your needs? (See Section 2.1 for use case
examples of single-master and multi-master replication systems.) Will you be replicating
from Oracle to Postgres, from SQL Server to Postgres, from Advanced Server to Oracle,
or from Postgres to SQL Server? Will you be replicating between PostgreSQL and/or
Advanced Server databases? How often will you need to replicate the data? Will
replication be done on an ad hoc basis or does it need to occur regularly according to a
schedule?
Step 3: Plan the logistics of your replication system. How many tables do you expect to
replicate and what are their sizes in total number of bytes and number of rows? What
percentage of rows do you expect to have been changed on each table between each
replication? Are your database servers required to run on dedicated machines?
Step 4: Design your replication system. Determine whether your replication system will
be distributed or will run on a single host. Determine the publications and subscriptions
you will need and their tables and views. Make sure your publication tables meet the
requirements for an xDB Replication Server publication. See sections 2.4.2 and 2.4.3 for
details.
Step 5: Implement and test your replication system in a test environment. Try out your
replication system on a subset of your publication data to ensure the replication process
works as expected. Make sure the resulting replicated tables can be used as expected in
your application. Establish preliminary metrics on how long the replication process will
be expected to take in your full production environment.
Step 6: Implement and test your replication system in your production environment.
2.4.2 Design Considerations
Keep the following points in mind when designing a replication system:
 Multi-master replication is supported only on Postgres databases. In addition,
Advanced Server databases must be running in the same compatibility mode –
either all Oracle or all PostgreSQL.
 An Oracle table can be a member of at most one publication if all publications are
subordinate to one publication database definition. However, an Oracle table can
be a member of multiple publications if each publication is subordinate to a
different publication database definition.
 A Postgres table can be a member of at most one publication.
 Each table used in a publication must have a primary key with the exception of
tables in snapshot-only publications, which do not require a primary key.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 74
EDB Postgres Replication Server User’s Guide
 Make sure table definitions are well established before creating publications.
Unless the DDL change replication feature is used as described in Section 7.8, if a
table definition is changed, any publication containing the table along with its
associated subscription must be deleted and recreated, otherwise replication may
fail. The same applies for the table definitions in a master definition node and its
associated master nodes. Replication failures can be seen in the replication
history.
 Views can be members of snapshot-only publications. In the subscription
database, a view is replicated as a table.
 A publication may have multiple subscriptions.
 A subscription can be associated with at most one publication.
 A database can contain both publications and subscriptions.
 A given publication server can support only one multi-master replication system.
All master nodes created subordinate to a given publication server are assumed to
be part of the same multi-master replication system.
 A table that is created as a result of a subscription can be used in another
publication. Thus, a publication can replicate data to a subscription which in turn,
can be used in a publication to replicate to another subscription, thus creating a
cascaded replication architecture.
 There are restrictions on the combinations and configurations of database servers
that can be used for a publication and its subscription. See Section 10.1.3 for
details on these restrictions.
 All replication system components must be running in order for replication to
occur, or before performing any configuration, operation, or modification in the
replication system. (The xDB Replication Console is used for the configuration
and modification of a replication system. The xDB Replication Console does not
need to be running in order for replication to occur.)
 In general, the order of creation of a replication system is as follows: 1) Create the
required physical databases, database user names, tables, and views to be used in
the replication system. 2) Define the replication system logical components using
the xDB Replication Console or xDB Replication Server CLI. 3) Perform
replication.
 In general, the order of removal of a single-master replication system is as
follows: 1) Remove the replication system logical components using the xDB
Replication Console or xDB Replication Server CLI starting with the
subscriptions (Subscription nodes) and then their parent components
(Subscription Database nodes). 2) Unregister the subscription server if you no
longer have any need for it. 3) Repeat the same process for the publications. 4)
After all replication system logical components have been removed (except for
possibly the publication server and subscription server) you can drop any of the
physical database objects in Oracle, SQL Server, or Postgres. Do not drop the
control schema objects manually, for example by using an SQL command
line utility. Doing so may cause the xDB Replication Console and xDB
Replication Server CLI to become inoperable. (See Section 10.3.4.3 if this
problem occurs.) Deleting the replication system logical components using the
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 75
EDB Postgres Replication Server User’s Guide
xDB Replication Console or xDB Replication Server CLI automatically drops the
control schema objects from the physical database.
 The order of removal of a multi-master replication system is as follows: 1)
Remove the replication system logical components using the xDB Replication
Console or xDB Replication Server CLI starting with the publication database
definitions of the non-MDN nodes. 2) Remove the publication from under the
master definition node. 3) Remove the publication database definition of the
master definition node. 4) After all replication system logical components have
been removed (except for possibly the publication server) you can drop any of the
physical database objects in Postgres. Do not drop the control schema objects