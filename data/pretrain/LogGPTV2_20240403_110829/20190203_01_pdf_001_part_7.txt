### 2.3.3.1 Oracle to PostgreSQL or Advanced Server Replication

The following diagram illustrates a basic Oracle to PostgreSQL or Advanced Server single-master replication system. In this setup, a single publication in Oracle contains tables from two schemas that are replicated to a database residing in either PostgreSQL or Advanced Server.

**Figure 2-11 - Oracle to PostgreSQL or Advanced Server Replication**

Logical components in the diagram are shaded in yellow for easy identification.

#### Logical Components:

1. **Publication Server:**
   - The publication server is identified by registering its network location, username, and password.
   
2. **Publication Database Definition:**
   - A publication database definition is created under the SMR type node of the publication server. This definition includes the Oracle database username `pubuser`, the database network location, and the database identifier.
   - When you create a user named `pubuser` in Oracle, a schema with the same name is automatically created. The publication server creates control schema objects in the `pubuser` control schema for the replication system's metadata.

3. **Publication:**
   - A publication named `pub` is created under the publication database definition. This publication includes table `A` in schema `S1` and tables `B` and `C` in schema `S2`.

4. **Subscription Server:**
   - The subscription server is identified by registering its network location, username, and password.

5. **Subscription Database Definition:**
   - A subscription database definition is created under the subscription server. This definition includes the PostgreSQL database username `subuser`, the database network location, and the database identifier.

6. **Subscription:**
   - A subscription named `sub` is created under the subscription database definition. When the subscription is created, the subscription server creates schemas `S1` and `S2` in the subscription database. Table definitions for tables `A`, `B`, and `C` are also created at this time. During replication, the publication server populates these tables with rows from the publication.

**Figure 2-12 - Oracle to Postgres Replication Tree**

For an introduction to the xDB Replication Console, see Chapter 4.

### 2.3.3.2 SQL Server to PostgreSQL or Advanced Server Replication

The following diagram illustrates a basic SQL Server to PostgreSQL or Advanced Server single-master replication system. In this setup, a single publication in SQL Server contains tables from two schemas that are replicated to a database residing in either PostgreSQL or Advanced Server.

**Figure 2-13 - SQL Server to PostgreSQL or Advanced Server Replication**

#### Logical Components:

1. **Publication Server:**
   - The publication server is identified by registering its network location, username, and password.
   
2. **Publication Database Definition:**
   - A publication database definition is created under the SMR type node of the publication server. This definition includes the SQL Server login `pubuser`, the database network location, and the database identifier.
   - The `pubuser` schema is created during the publication database preparation step. The `pubuser` schema, along with the control schema consisting of `_edb_replicator_pub`, `_edb_replicator_sub`, and `_edb_scheduler`, are populated with the control schema objects for the replication system's metadata.

3. **Publication:**
   - A publication named `pub` is created under the publication database definition. This publication includes table `A` in schema `S1` and tables `B` and `C` in schema `S2`.

4. **Subscription Server:**
   - The subscription server is identified by registering its network location, username, and password.

5. **Subscription Database Definition:**
   - A subscription database definition is created under the subscription server. This definition includes the PostgreSQL database username `subuser`, the database network location, and the database identifier.

6. **Subscription:**
   - A subscription named `sub` is created under the subscription database definition. When the subscription is created, the subscription server creates schemas `S1` and `S2` in the subscription database. Table definitions for tables `A`, `B`, and `C` are also created at this time. During replication, the publication server populates these tables with rows from the publication.

**Figure 2-14 - SQL Server to Postgres Replication Tree**

For an introduction to the xDB Replication Console, see Chapter 4.

### 2.3.3.3 Advanced Server to Oracle Replication

The following diagram illustrates a basic Advanced Server to Oracle single-master replication system. In this setup, a single publication in an Advanced Server database contains tables from two schemas that are replicated to an Oracle database.

**Figure 2-15 - Advanced Server to Oracle Replication**

#### Logical Components:

1. **Publication Server:**
   - The publication server is identified by registering its network location, username, and password.
   
2. **Publication Database Definition:**
   - A publication database definition is created under the SMR type node of the publication server. This definition includes the PostgreSQL database username `pubuser`, the database network location, and the database identifier.
   - The publication server creates the control schema consisting of `_edb_replicator_pub`, `_edb_replicator_sub`, and `_edb_scheduler` and populates them with the control schema objects for the replication system's metadata.

3. **Publication:**
   - A publication named `pub` is created under the publication database definition. This publication includes table `A` in schema `S1` and tables `B` and `C` in schema `S2`.

4. **Subscription Server:**
   - The subscription server is identified by registering its network location, username, and password.

5. **Subscription Database Definition:**
   - A subscription database definition is created under the subscription server. This definition includes the Oracle database username `subuser`, the database network location, and the database identifier.

6. **Subscription:**
   - A subscription named `sub` is created under the subscription database definition. When you create a user named `subuser` in Oracle, a schema with the same name is automatically created. Table definitions for tables `A`, `B`, and `C` are created in the `subuser` schema when the subscription is created. During replication, the publication server populates these tables with rows from the publication.

**Figure 2-16 - Advanced Server to Oracle Replication Tree**

For an introduction to the xDB Replication Console, see Chapter 4.

### 2.3.3.4 PostgreSQL or Advanced Server to SQL Server Replication

The following diagram illustrates a basic PostgreSQL or Advanced Server to SQL Server single-master replication system. In this setup, a single publication in a PostgreSQL or Advanced Server database contains tables from two schemas that are replicated to a SQL Server database.

**Figure 2-17 - PostgreSQL or Advanced Server to SQL Server Replication**

#### Logical Components:

1. **Publication Server:**
   - The publication server is identified by registering its network location, username, and password.
   
2. **Publication Database Definition:**
   - A publication database definition is created under the SMR type node of the publication server. This definition includes the PostgreSQL database username `pubuser`, the database network location, and the database identifier.
   - The publication server creates the control schema consisting of `_edb_replicator_pub`, `_edb_replicator_sub`, and `_edb_scheduler` and populates them with the control schema objects for the replication system's metadata.

3. **Publication:**
   - A publication named `pub` is created under the publication database definition. This publication includes table `A` in schema `S1` and tables `B` and `C` in schema `S2`.

4. **Subscription Server:**
   - The subscription server is identified by registering its network location, username, and password.

5. **Subscription Database Definition:**
   - A subscription database definition is created under the subscription server. This definition includes the SQL Server login `subuser`, the database network location, and the database identifier.

6. **Subscription:**
   - A subscription named `sub` is created under the subscription database definition. When the subscription is created, the subscription server creates schemas `S1` and `S2` in the subscription database. Table definitions for tables `A`, `B`, and `C` are also created at this time. During replication, the publication server populates these tables with rows from the publication.

**Figure 2-18 - Postgres to SQL Server Replication Tree**

For an introduction to the xDB Replication Console, see Chapter 4.

### 2.3.3.5 Postgres Multi-Master Replication

The following diagram illustrates a basic Postgres multi-master replication system. In this setup, a publication in a Postgres master definition node contains tables from two schemas that are initially replicated to two other Postgres master nodes. The tables in all three master nodes can then be updated and synchronized with each other.

**Figure 2-19 - Postgres Multi-Master Replication System**

#### Logical Components:

1. **Publication Server:**
   - The publication server is identified by registering its network location, username, and password.
   
2. **Publication Database Definition:**
   - A publication database definition is created under the MMR type node of the publication server. This first publication database definition identifies the master definition node. The PostgreSQL database username `mmruser_a` is specified in the definition, along with the database network location and database identifier.
   - The publication server creates the control schema consisting of `_edb_replicator_pub`, `_edb_replicator_sub`, and `_edb_scheduler` and populates them with the control schema objects for the replication system's metadata.

3. **Publication:**
   - A publication named `pub` is created under the publication database definition. This publication includes table `A` in schema `S1` and tables `B` and `C` in schema `S2`.

4. **Second Master Node:**
   - A second master node is added by creating another publication database definition under the MMR type node of the publication server. The PostgreSQL database username `mmruser_b` is specified in the definition, along with the database network location and database identifier.
   - You can choose to have the publication server create schemas `S1` and `S2` and the table definitions for `A`, `B`, and `C` for you, or you can manually create the schemas and table definitions beforehand. The publication server creates the control schema consisting of `_edb_replicator_pub`, `_edb_replicator_sub`, and `_edb_scheduler` and populates them with the control schema objects to store the master node’s metadata. You can choose to have the publication server populate these tables with rows from the publication at this time, or defer table loading to a later point in time.

5. **Third Master Node:**
   - A third master node is added in a similar manner using the PostgreSQL database username `mmruser_c`.

**Figure 2-20 - Postgres Multi-Master Replication Tree**

For an introduction to the xDB Replication Console, see Chapter 4.

### 2.4 Designing a Replication System

This section outlines the general steps, design considerations, and best practices for designing a replication system before implementation.

#### 2.4.1 General Steps

1. **Determine if xDB Replication Server is the right solution:**
   - Evaluate whether xDB Replication Server meets your requirements and is the best solution for your needs. xDB Replication Server supports single-master and multi-master replication systems, including Oracle to PostgreSQL/Advanced Server, SQL Server to PostgreSQL/Advanced Server, Advanced Server to Oracle, and PostgreSQL/Advanced Server to SQL Server.

2. **Plan the general strategy:**
   - Decide on the single-master or multi-master model based on your use case (see Section 2.1 for examples). Determine the source and target databases, the frequency of replication, and whether it will be ad hoc or scheduled.

3. **Plan the logistics:**
   - Estimate the number of tables to be replicated, their sizes, and the percentage of rows expected to change between replications. Consider whether dedicated machines are required for the database servers.

4. **Design the replication system:**
   - Determine if the system will be distributed or run on a single host. Define the publications and subscriptions, including their tables and views. Ensure that publication tables meet the requirements for xDB Replication Server (see Sections 2.4.2 and 2.4.3).

5. **Implement and test in a test environment:**
   - Test the replication system on a subset of your publication data to ensure it works as expected. Verify that the replicated tables can be used in your application and establish preliminary metrics for the replication process.

6. **Implement and test in the production environment:**
   - After successful testing, implement the replication system in the production environment and conduct further testing.

#### 2.4.2 Design Considerations

- **Multi-master replication:**
  - Supported only on Postgres databases. Advanced Server databases must be running in the same compatibility mode (either all Oracle or all PostgreSQL).
  
- **Oracle table membership:**
  - An Oracle table can be a member of at most one publication if all publications are subordinate to one publication database definition. However, an Oracle table can be a member of multiple publications if each publication is subordinate to a different publication database definition.
  
- **Postgres table membership:**
  - A Postgres table can be a member of at most one publication.
  
- **Primary key requirement:**
  - Each table used in a publication must have a primary key, except for tables in snapshot-only publications, which do not require a primary key.
  
- **Table definitions:**
  - Ensure table definitions are well established before creating publications. If a table definition is changed, any publication containing the table and its associated subscription must be deleted and recreated, unless the DDL change replication feature is used (see Section 7.8).
  
- **Views:**
  - Views can be members of snapshot-only publications. In the subscription database, a view is replicated as a table.
  
- **Publication and subscription relationships:**
  - A publication may have multiple subscriptions, but a subscription can be associated with at most one publication. A database can contain both publications and subscriptions.
  
- **Multi-master replication system:**
  - A given publication server can support only one multi-master replication system. All master nodes created subordinate to a given publication server are part of the same multi-master replication system.
  
- **Cascaded replication:**
  - A table created as a result of a subscription can be used in another publication, allowing for cascaded replication.
  
- **Database server restrictions:**
  - There are restrictions on the combinations and configurations of database servers that can be used for a publication and its subscription (see Section 10.1.3).
  
- **Replication system components:**
  - All replication system components must be running for replication to occur or for configuration, operation, or modification in the replication system. The xDB Replication Console is used for configuration and modification and does not need to be running for replication to occur.
  
- **Order of creation:**
  - 1) Create the required physical databases, database usernames, tables, and views. 2) Define the replication system logical components using the xDB Replication Console or xDB Replication Server CLI. 3) Perform replication.
  
- **Order of removal (single-master):**
  - 1) Remove the replication system logical components starting with the subscriptions and then their parent components. 2) Unregister the subscription server if no longer needed. 3) Repeat for publications. 4) Drop any physical database objects after all logical components have been removed, except for the publication and subscription servers. Do not drop control schema objects manually.
  
- **Order of removal (multi-master):**
  - 1) Remove the replication system logical components starting with the publication database definitions of the non-MDN nodes. 2) Remove the publication from under the master definition node. 3) Remove the publication database definition of the master definition node. 4) Drop any physical database objects after all logical components have been removed, except for the publication server. Do not drop control schema objects manually.

For more details on the xDB Replication Console, see Chapter 4.