# 实体之间的关系
![](media/image1.png){width="5.764583333333333in"
height="1.5020833333333334in"}
# 什么是外键？
-   **主键Primary
    Key**：是唯一标识一条记录，不能有重复的，**不允许为空**，用来保证数据完整性
-   **外键**： 是另一表的主键, 外键可以有**重复**的,
    可以是空，用来和其他表建立联系用的。所以说，如果谈到了外键，一定是至少涉及到两张表。
> **外键的作用：建立表之间的关系，保证数据库的完整性**
>
> ![](media/image2.png){width="5.7652777777777775in"
> height="1.2729166666666667in"}
例如下面这两张表：
![](media/image3.png){width="5.768055555555556in"
height="2.0131583552055994in"}
上面有两张表：部门表（dept）、员工表(emp)。Id=Dept_id，而Dept_id就是员工表中的外键：因为员工表中的员工需要知道自己属于哪个部门，就可以通过外键Dept_id找到对应的部门，然后才能找到部门表里的各种字段信息，从而让二者相关联。所以说，外键一定是在从表中创建，从而找到与主表之间的联系；从表负责维护二者之间的关系。
![](media/image4.png){width="3.670413385826772in"
height="3.2116119860017496in"}
+-----------------------------------------------------------------------+
| create table department(                                              |
|                                                                       |
| id int primary key,                                                   |
|                                                                       |
| name varchar(**20**) not null,                                        |
|                                                                       |
| description varchar(**100**)                                          |
|                                                                       |
| );                                                                    |
|                                                                       |
| create table employee(                                                |
|                                                                       |
| id int primary key,                                                   |
|                                                                       |
| name varchar(**10**) not null,                                        |
|                                                                       |
| gender varchar(**2**) not null,                                       |
|                                                                       |
| salary float(**10**,**2**),                                           |
|                                                                       |
| age int(**2**),                                                       |
|                                                                       |
| dept_id int                                                           |
|                                                                       |
| );                                                                    |
+-----------------------------------------------------------------------+
-   部门表插入数据
![](media/image5.png){width="5.670138888888889in"
height="1.9243055555555555in"}
INSERT INTO \`department\` VALUES (\'1\', \'Java开发部\',
\'Java软件开发\');
INSERT INTO \`department\` VALUES (\'2\', \'C#开发部\', \'C#软件开发\');
INSERT INTO \`department\` VALUES (\'3\', \'PHP开发部\',
\'PHP软件开发\');
INSERT INTO \`department\` VALUES (\'4\', \'Android开发部\',
\'安卓手机软件开发\');
-   部门表插入数据
![](media/image6.png){width="5.768055555555556in"
height="2.155738188976378in"}
INSERT INTO \`employee\` VALUES (\'1\', \'张飞\', \'男\', \'3000\',
\'45\', \'1\');
INSERT INTO \`employee\` VALUES (\'2\', \'赵云\', \'男\', \'2500\',
\'23\', \'2\');
INSERT INTO \`employee\` VALUES (\'3\', \'刘备\', \'男\', \'5000\',
\'35\', \'3\');
INSERT INTO \`employee\` VALUES (\'4\', \'诸葛亮\', \'男\', \'3500\',
\'45\', \'4\');
INSERT INTO \`employee\` VALUES (\'5\', \'貂蝉\', \'女\', \'4000\',
\'28\', \'1\');
INSERT INTO \`employee\` VALUES (\'6\', \'曹操\', \'男\', \'3000\',
\'56\', \'1\');
![](media/image7.png){width="5.763194444444444in"
height="2.4868055555555557in"}
# 添加外键的方式
我们在第一段中内容中已经将表建好了，数据也填充完了，现在来给从表（员工表）添加外键，让它与主表（部门表）相关联。代码举例如下：
ALTER TABLE employee ADD **FOREIGN KEY**(dept_id) REFERENCES
department(id); 
代码解释：
ALTER TABLE employee：在从表employee中进行操作；
ADD FOREIGN KEY(dept_id)：将从表的字段dept_id添加为外键；
REFERENCES department(id)：映射到主表department当中为id的字段。
![](media/image8.png){width="5.768055555555556in"
height="2.1958333333333333in"}
![](media/image9.png){width="5.763888888888889in"
height="1.7243055555555555in"}
![](media/image10.png){width="5.760416666666667in"
height="2.9256944444444444in"}
# 检测外键是否添加成功
![](media/image11.png){width="2.9270833333333335in"
height="3.8958333333333335in"}
![](media/image12.png){width="5.768055555555556in"
height="2.3715277777777777in"}
-   运行上方代码后，我们通过navicat来看一下外键有没有添加成功
-   上图中，选中表employee，单击红框部分的"设计表"按钮，界面如下：
RESTRICT(限制)：如果你想删除的那个主表，它的下面有对应从表的记录，此主表将无法删除。
CASCADE（级联）：如果主表的记录删掉，则从表中相关联的记录都将被删掉。
![](media/image13.png){width="5.768055555555556in"
height="3.1537565616797902in"}
-   然后我们回到主表（部门表），此时如果想删除id为1的宣传部，会弹出如下提示：（因为外键的默认规则为RESTRICT）
![](media/image14.png){width="4.744825021872266in"
height="3.3923786089238845in"}
# 删除外键
我们在navicat中可以通过图形界面的方式删除外键，也可以通过sql语句来删除。
(1)获取外键名：
![](media/image15.png){width="2.43953302712161in"
height="4.587655293088364in"}
![http://images.cnitblog.com/blog/641601/201410/220957384653246.png](media/image16.png){width="5.768055555555556in"
height="2.0429429133858266in"}
2.  删除外键：
    ![](media/image17.png){width="5.761111111111111in"
    height="1.9493055555555556in"}
    **外键名系统生成的！！**
alter table employee drop foreign key 外键名;
![](media/image18.png){width="5.761805555555555in" height="0.68125in"}
如果外键在使用中，那么外键对应表数据是不能删除的。
有个部门
下面有员工。那么这个部门就不能删除。如果这个部门没有员工，这个部门可以删除！！！
# 表连接（join）
![](media/image19.png){width="5.761111111111111in"
height="2.029861111111111in"}
外键作用只是保证数据完整性的! 没有外键连接查询！！！！
![](media/image20.png){width="5.760416666666667in"
height="2.6770833333333335in"}
## 5.1内连接（重点）
查询的数据不在一个表中，就会用到连接查询！
**1、内连接：只列出匹配的记录**
语法：
SELECT ... FROM join_table1
> **INNER JOIN** join_table2
>
> \[ON join_condition\]
WHERE where_definition
解释：只列出这些连接表中与连接条件相匹配的数据行。INNER可以不写，则默认为内连接。\[ON
join_condition\]里面写的是连接的条件。
1.  查询所有员工姓名、性别、薪资、部门名 。
    ![](media/image21.png){width="5.761805555555555in"
    height="3.0229166666666667in"}
    如果有冲突的字段，建议给表取别名进行区分！
    ![](media/image22.png){width="5.764583333333333in"
    height="1.323611111111111in"}
    ![](media/image23.png){width="5.75625in"
    height="0.9777777777777777in"}
2.  查询所有薪资高于5000的员工的姓名，薪资、部门编号，部门名，并薪资降序。
    ![](media/image24.png){width="3.879861111111111in"
    height="2.2472222222222222in"}
    外键约束：只是保证数据在增 删
    改的时候数据的完整性，没有外键约束，连接查询是可以的！！！
举例：
select e.name,d.name from employee e inner join department d on
e.dept_id=d.id; 
![](media/image25.png){width="5.768055555555556in"
height="1.1229166666666666in"}
等价于（了解）：
![](media/image26.png){width="5.760416666666667in"
height="2.9569444444444444in"}
select e.name,d.name from employee e,department d where e.dept_id=d.id; 
运行效果：
![](media/image27.png){width="5.982143482064742in"
height="3.1855675853018375in"}
![](media/image28.png){width="5.76875in" height="2.73125in"}
备注：在写多表查询的时候，尽量的为每张表取别名，避免字段冲突，使用别名可以区别不同表中的字段
![](media/image29.png){width="5.768055555555556in"
height="0.8826388888888889in"}
![](media/image30.png){width="5.760416666666667in"
height="0.7361111111111112in"}
## 外连接（面试题）
外连接分类：
-   左外连接(LEFT JOIN) \-- LEFT JOIN
-   右外连接(RIGHT JOIN) \-- RIGHT LOIN
-   全外连接(FULL JOIN) 注：MySQL5.1的版本暂不支持
> 语法：
+-----------------------------------------------------------------------+
| SELECT ... FROM join_table1                                           |
|                                                                       |
| (LEFT \| RIGHT ) JOIN join_table2                                     |
|                                                                       |
| ON join_condition                                                     |
|                                                                       |
| WHERE where_definition                                                |
+-----------------------------------------------------------------------+
**解释**：
不仅列出与连接条件（on）相匹配的行，还列出左表table1(左外连接)、或右表table2(右外连接)、或两个表(全外连接)中所有符合WHERE过滤条件的数据行。一般都是用左连接或者外连接。
### 左外连接
> **左外连接：左表列出全部，右表只列出匹配的记录**
![](media/image31.png){width="5.768055555555556in"
height="2.549284776902887in"}
### 右外连接
**右外连接：右表列出全部，左表只列出匹配的记录**
![](media/image32.png){width="5.768055555555556in"
height="2.690424321959755in"}
## 交叉连接(笛卡尔积) 了解
语法：
SELECT ... FROM join_table1 **CROSS JOIN** join_table2; 
没有ON子句和WHERE子句，它返回的是连接表中所有数据行的**笛卡尔积**。
笛卡尔积举例：
假设集合A={a,b}，集合B={0,1,2}，
则两个集合的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1), (b,2)}
其结果集合中的数据行数等于第一个表中符合查询条件的数据行数乘以第二个表中符合查询条件的数据行数。
![](media/image33.png){width="5.763888888888889in"
height="6.124305555555556in"}
# 多表连接
![](media/image34.png){width="5.768055555555556in"
height="1.3736111111111111in"}
![](media/image35.png){width="5.763194444444444in"
height="3.004861111111111in"}
查询语句：
-   查询id\>3 的学生姓名，邮箱,所属年级名，和所在的学校名
![](media/image36.png){width="3.4416513560804898in"
height="1.328028215223097in"}
![](media/image37.png){width="3.8854166666666665in"
height="0.7083333333333334in"}
![](media/image38.png){width="4.770138888888889in"
height="3.464583333333333in"}