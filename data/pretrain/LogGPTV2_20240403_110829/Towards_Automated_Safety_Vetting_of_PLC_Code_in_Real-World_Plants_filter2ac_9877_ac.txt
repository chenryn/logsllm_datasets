focus on such a case to explain our approach. However, as
we show in the evaluation, our system can be applied to other
classes of coordinating systems as well.
Challenge for Detecting the Problem. Static analyses may
cause signiÔ¨Åcant false positives due to the lack of runtime
constraints and thus cannot easily address this problem. For
instance, a potential error state detected by static analysis may
only be triggered when the speed of robot is greater than
10m/sec, which however can never be reached in practice.
In contrast, dynamic analysis and symbolic execution do
not cause false positives. To use them on event-driven pro-
grams, prior work [27], [46], [51], [55], [66], [67] gener-
ated event sequences of different orders to exercise code
and explore paths. In our case, one can create an event
sequence following the order of 1:Pallet Sensor (cid:2) 2:¬¨
Part Sensor (cid:2) 3:CNC Part Ready (cid:2) 4:Robot Ready
(cid:2) 5:¬¨ Part AtConveyor (cid:2) 6:Update Complete (cid:2)
7:Part AtConveyor, as illustrated in Figure 3a. Note that
eventually Part AtConveyor terminates due to the robot
logic. Exercising PLC code using such this sequence does
not lead to any error. One can then permute the events by
switching 6:Update Complete and 7:Part AtConveyor
(Figure 3b). Then, the safety problem will occur at runtime.
However, just rearranging the event order may not solve
the path discovery problem in time-constrained controller
programs. For instance, the event sequence in Figure 3c shares
the same ordering as the one in Figure 3b, yet it cannot cause

#
! ! "




 	

	
Fig. 4: Overview of VETPLC System
the error. When the time difference between events 7 and 6
changes, the consequence may also vary.
To address this problem, we expect to automatically produce
effective, error-triggering event sequences (such as Figure 3b)
by considering both ordering and timing of events. Notice
that an alternative approach is to model internal timeouts as
external events and then perform event permutation without
considering timing. For example, the termination of event
Part AtConveyor can then become another independent
event, and the permutation thus is conducted over 8 events.
However, we would argue that this solution has two major
shortcomings: 1) it may drastically increase the event space;
and 2) the generated sequences can cause false alarms because
they may still violate critical time and physical constraints and
thus are actually invalid. Its fundamental limitation lies in the
fact it assumes the complete independence of individual events
and does not quantitatively consider their temporal contexts.
B. Threat Model
impact
We consider that adversaries can trigger vulnerabilities in
benign (but faulty) PLC code via manipulation of conÔ¨Åguration
options that
important physical properties such as
machine speeds. In addition, we also consider that insiders can
compromise PLC source code to intentionally inject (stealthy)
safety violations (e.g., PLC logic bombs [41]). Note that
insider attacks are top security challenges [40], [64] for air-
gapped ICS and have been identiÔ¨Åed in major ICS incidents in-
cluding Stuxnet and the Maroochy Water Services Attack [23].
As a result, PLC source code and conÔ¨Ågurations may not be
trustworthy. Note though, we assume that the rest of the ICS
environment, including hardware and operating systems, as
well as our data collection mechanisms are trusted.
It is worth mentioning that, at this point, our work is mainly
focusing on the detection of safety violations. However, some
of the techniques we developed can also be useful to address
security challenges in the ICS context.
C. System Overview
To achieve our goal, we have developed VETPLC, that
consists of 3 major steps. Figure 4 illustrates its architecture.
We hope to deploy VETPLC as a vetting tool to examine any
PLC code before it is released for a production system.
(1) Generating Event Causality Graph. Given the PLC
and robot code, we Ô¨Årst perform static program analyses
to extract the event causality graphs for interconnected
devices. We further leverage speciÔ¨Åed I/O mapping to
handle cross-device communication.
(2) Mining Temporal Invariants. Next, to understand those
quantitative temporal relations that cannot be revealed by
(cid:22)(cid:19)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
program code, we collect runtime data traces of PLC
variables from physical ICS testbeds. We then examine
the traces to infer the occurrences of particular events and
conduct data mining to discover temporal event invariants.
(3) Automated Safety Vetting with Timed Event Se-
quences. Constrained by the generated timed event causal-
ity graphs, we perform event permutations to automati-
cally create timed event sequences. Then, we apply the
generated sequences to exercise PLC code for dynamic
analysis. To automatically identify safety problems, we
formalize and craft safety speciÔ¨Åcations according to ex-
pert knowledge so as to perform runtime veriÔ¨Åcation.
IV. TIMED EVENT CAUSALITY GRAPH
A. Key Factors
A na¬®ƒ±ve approach to deriving event sequences is to consider
every combination of events. For instance, prior work has
presented a baseline approach, ALLSEQS [27], that exhaus-
tively permutes all UI events to create triggering sequences
for testing Android apps. However, due to the massive pos-
sible permutations, such a solution can be prohibitively time
consuming. In fact, not all permutations are valid sequences
because the causal dependencies of PLC events are inherently
constrained by controller code. To reduce the search space, we
can extract such dependencies from program logics in the Ô¨Årst
place. Particularly, we are interested in three causal factors.
‚Ä¢ Control-Flow. We take into account
intra-procedural,
inter-procedural and cross-device control Ô¨Çow dependen-
cies: 1) within a function, event variables evaluated in an
IF-Condition have direct causal impact on those deÔ¨Åned
in its IF-Clause; 2) for function calls, we consider that
the callsite in the caller causes all the logic in the callee;
3) cross-device event exchanges via mapped I/O indicate
the causal relations between code on multiple controllers.
‚Ä¢ Constants. The constant value of an event-related vari-
able in an IF-Condition can partially determine if the
IF-Clause becomes effective. Thus, the dataÔ¨Çow from
the constant assignment to the condition check of this
variable indicates that the former causes the latter.
‚Ä¢ Event Duration. The causal effect of events may last
for a certain amount of time when subsequent states are
maintained. Machines with local memory can produce
events with permanent states. The PLC can also help pre-
serve the states of transient signals (i.e., sensor readings)
or its internal events. In the meantime, event senders can
also proactively terminate signals based upon timing.
In addition to these internal factors, the occurrences of
events are also affected by external timing constraints caused
by physical actions, such as robot motion and external I/O
operations. We will discuss this in Section V.
B. Formal DeÔ¨Ånition
To interpret
the internal constraints on event ordering,
we extract the causal and temporal relations among events
from PLC and robot code to generate dependency graphs. In
particular, we describe the cross-device event dependencies






	

	

	
 	


	








 	



	
	


 %%(&!









	
 "!

 #'$"!
 $!
	
Fig. 5: The TECG of the Motivating Example
using Timed Event Causality Graphs (TECGs). At a high
level, a TECG is based upon the And-Or Graph [53] that can
illustrate the causalities among events and express their and/or
relationships. A formal deÔ¨Ånition is presented as follows.
DeÔ¨Ånition 1. A Timed Event Causality Graph is a directed
graph G = (V, E, Œ±, Œ≤) over a set of events Œ£ and a set of
time durations T, where:
‚Ä¢ The set of vertices V corresponds to the events in Œ£;
‚Ä¢ The set of edges E ‚äÜ V √ó V corresponds to the causal
dependencies between events, where the combination of all
immediate predecessors of a vertex can always cause this
successor event
if some of these
predecessor vertices form a conjunction, their outgoing edges
become compounded using an ‚Äúarch‚Äù; if they form a disjunc-
tion, the corresponding edges are separated.
‚Ä¢ The labeling function Œ± : V ‚Üí Œ£ associates nodes
with the labels of corresponding events, where each label is
comprised of 3 elements: event name, class and duration.
to happen. SpeciÔ¨Åcally,
An event is named after the atomic proposition it affects.
For instance, if an event causes a==15 to be true, we name it
as ‚Äúa==15‚Äù; if it causes Boolean c to be false, we refer to it as
‚Äú¬¨c‚Äù. We consider 6 classes of events, including input (P IN),
output (P OUT), local (P Local) events of PLC and those
of a remote device (R IN, R OUT, R Local). The event
duration is either Permanent (P), meaning it is always enabled
until turned off by PLC logic, or a Ô¨Ånite amount of time.
‚Ä¢ The labeling function Œ≤ : E ‚Üí T associates edges with
the labels of time intervals. These labels are concrete numbers
if we can retrieve the corresponding time intervals from ICS
testbeds; otherwise, they are ‚ÄúIndeterminate‚Äù.
C. TECG of Motivating Example
Figure 5 depicts the TECG of the motivating example. At
Ô¨Årst, this automation system expects to receive events from
two sensors. The conjunction of a positive event, Pallet -
Sensor, and a negative one, ¬¨ Part Sensor, triggers the
PLC local event Pallet Arrival. Then,
the
4 events, Pallet Arrival, CNC Part Ready, Robot -
Ready and ¬¨ Part AtConveyor are received, the PLC will
signal the robot via an output event Deliver Part.
if all of
Hence, the conjunction of these four events leads to the
generation of Deliver Part, and such a causal dependency
is represented by the compounded edges from the former to the
latter. Further, Deliver Part is mapped to the robot event
(cid:22)(cid:19)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:08 UTC from IEEE Xplore.  Restrictions apply. 
DI[0], which causes the robot arm to function. Once its oper-
ation is completed, the robot turns on the output DO[2] and in
effect sends the event Part AtConveyor back to the PLC.
Thus, these events are connected due to cross-device control
dependencies. Since DO[2] (Part AtConveyor) terminates
in 0.5 seconds according to the robot code, its duration is
‚Äú0.5s‚Äù instead of ‚ÄúPermanent‚Äù.
In the meantime, when the conjunction of aforementioned 4
events is satisÔ¨Åed, another PLC local event Update Part -
Process will occur. This event causes a subroutine call, in
which PLC starts to update the process number encoded in the
RFID on the part. Once the update is done, the RFID replies
to the PLC with RFID IO Complete, which in turn triggers
Update Complete that the main routine expects.
By default, the time intervals of all edges are ‚ÄúIndeter-
minate‚Äù, and thus are not shown on this graph. We later
perform data mining on traces collected from ICS testbeds to
extract temporal invariants associated with certain edges, such
‚àí‚àí‚àí‚àí‚àí‚àí‚Üí RFID IO Complete.
as Update Part Process
[3s,39.4s]
D. Graph Construction
To generate TECGs, we perform static analyses that are
tailored for the unique programming paradigms of PLC code.
a) Special Consideration for PLC Scan Cycles: Prior
work has paid special attentions to PLC‚Äôs dedicated data types,
such as Timers and Counters [54], and its preemptive thread
scheduling model [43]. In addition, we believe that it is also
crucial to take into account PLC‚Äôs scan cycles that cause
implicit, yet signiÔ¨Åcant impact, to entry points and dataÔ¨Çow
of PLC code. Nevertheless, to the best of our knowledge, this
has never been seriously explored in prior work.
Entry Point Discovery. PLC code is event-driven and thus
all its event handlers are program entry points. In contrast to
typical event-driven programs that use dedicated constructs to
explicitly implement event handling mechanisms, event han-
dlers in PLC code are implicitly deÔ¨Åned using IF-Conditions.
Because internal value changes in one scan cycle do not
become effective until the next one begins, the IF-Conditions
in PLC code can only be affected by external inputs received at
the beginning of a cycle. Therefore, in effect, they act as event
handlers to capture either new sensor readings or updates from
last cycle. Hence, an IF-Condition becomes the entry point of
its IF-Clause code as well as the subroutines called by the IF-
Clause. For IF-Clause code wrapped by nested IF-Conditions,
we consider the inner-most one to be its entry point.
DataÔ¨Çow Analysis. The fact that variables are of Ô¨Åxed
value in every cycle also causes the dataÔ¨Çow to change. As
explained in Section II, the process of dataÔ¨Çow analysis for
PLC code is mainly to track data dependencies between scan
cycles. Further, due to the existence of asynchronous event
handlers, the analysis should compute data reachability from
any ‚ÄúdeÔ¨Åne‚Äù in one cycle to any ‚Äúuse‚Äù in the next.
b) Graph Construction Algorithm: Our algorithm for
generating timed event causality graphs is illustrated in Algo-
rithm 1. This algorithm expects to receive three inputs, PLC,
REMOTE and IOMapping. They represent PLC code, a set of
remote controller code (e.g., robot code) and the I/O mappings
between PLC and remote devices, respectively. Its output is
a timed event causality graph, TECG, which is comprised of a
set of edges. The I/O mappings are automatically established
when remote devices are added to the PLC and thus can be
retrieved from PLC conÔ¨Ågurations.
During initialization, we set TECG to be an empty set.
Next, we transform all predicates in the IF-Conditions of
PLC code into disjunctive normal form (DNF) in order to
illustrate them using an And-Or graph. Thus, an original
predicate becomes a set of sub-predicates connected via ‚ÄúOR‚Äù
logic, while each sub-predicate is a conjunction of events