在
户
序
---
## Page 255
读取权限的人，都可以轻而易举获得这个密码。
有人运行 strings 工具来查看这个二进制文件，密码就会显露出来。此外，所有对此文件拥有
编译成二进制可执行文件之后，这些密码就会隐藏起来，但实际上根本就不是这么回事，只要
的程序，会很不方便。这种做法也不够安全，因为它会暴露你的密码。你可能会认为，在程户
的好处是，至少你可以建立连接。但是，这个程序仍然含有硬编码值，如果有其他人要使用你
些参数变量的初始值，并把它们更改为可以访问服务器的值之后，重编译这个程序。这种做法
默认的连接参数（主机名、用户名等）不正确。如果真是如此，则一种解决办法是：在编辑这
能是这样的：
里的“”
用“/”。如果当前目录包含在搜索路径里，或者使用的是Windows系统，那么可以省略命令名
和链接它，然后运行它。在Unix系统里，可以使用下面的命令来运行程序：
于后续的服务器通信。
mysql_close（）会自动把这个处理器释放掉。在调用 mysql_close()之后，该处理器不能再用
连接处理器是采用向mysql_init（）传递 NULL的方式自动分配的，那么当连接终止时，
来指定其他与连接相关的选项。
附录还对mysql_options（）函数进行了介绍。在调用mysql_real_connect（)之前，可以用它
和套接字文件名参数的影响”进行了详细的描述，并且列出了标志参数里指定的各种选项。该
这种输出表明连接没有建立上，但并没有告诉你具体原因。导致连接失败的最常见原因是，
如果connect1 没有产生任何输出，则表明连接成功。如果有信息输出，那么你看到的可
如果要终止连接，可以调用 mysql_close（），并把指向连接处理器的指针传递给它。如果
口对于用户来讲，没有通过指定连接参数来灵活运行程序的方式。这些参数都硬编码在源
口出错信息没多大用，不能让人了解导致问题的具体原因。
上面这段揭示了connect1程序的两个明显不足之处。
mysql_real_connect() failed
8./connect1
8connect1
在Unix系统里，
%./connect1
如果想要试试connect1，可以按照本章前面介绍过的用于建立客户端程序的步骤，先编译
下一节就来解决这些问题。
除包含用于建立连接的代码以外，
更多关于mysql_real_connect（）的信息请参考附录G。其中，对“主机名参数对端口号
9
口1
口标志值。程序connect1传递的值为0，因为它没有用到任何特殊的连接选项。
代码里。如果能让用户通过命令行或者选项文件来改写这些参数，会更好。
用完客户端开发库之后，需要调用它。
mysql_library_end（）会终止使用客户端开发库，并执行一些必要的清理工作。当使
前，调用它。
mysql_library_init（)会初始化客户端开发库。请在调用其他 mysql_xxx（）函数之
以方便 MySQL 库在出错消息里使用。它还将调用my_init（)来完成某些设置操作。
接字（或管道）名。
：
如果你的 shell程序不会搜索当前目录（""），那么就必须在命令的开头使
，connect1.c还用到了其他3个调用。
7.2连接服务器
235
序
---
## Page 256
另外，也可以像下面这样写，效果也是一样的，而且写起来更简单些：
那个返回值（明显）不为零。因此，正确的测试代码可以这样写：
这个测试不一定有效。MySQL的API并没有说返回的非零错误值一定是某个特定值，它只是说
些特定的非零值，如-1，不进行测试也会造成严重影响。客户端开发库里的函数在调用失败时
行成功，则都会返回一个指向连接处理器的指针；若执行失败，则都会返回NULL。
明执行是否成功。
表现产生疑惑；或者两种情况兼有。
那么结果可能是：你最终还是要设法找出程序里出现的问题；或者程序的用户会对程序的异常
结果，甚至导致整个程序崩溃。
的代码，需要一个指向某种有效数据结构的指针时，如果实际使用的是NULL，则会导致奇怪的
数，之所以那么做，是有道理的，忽略它们会很危险。例如，有一个函数在发生错误时，会
户端程序测试出错条件，并做出适当的处理很有必要。那些返回各种状态值的客户端开发库函
个人认为他们之所以这么做，是因为出错检查——真的一
7.3.1出错检查
（这里的NULL 指的是“C语言里的NULL 指针”，而非“MySQL的NULL列值”。）
务器、断开连接和退出。但是，connect2 有两项重要的改进。
否
执
设
关
回
败
7.3
236
语言的API 函数mysql_xXx（)所返回的值进行正确的测试：
是否会返回某个特定值，是没有保证的。有时，你可能会看到下面这样的代码，它根本不能对
对于返回整数值的函数，通常是用返回0来表示成功，用返回非零值来表示失败。对于某
以我们使用过的客户端开发库例程 mysql_init（)和 mysql_real_connect（)为例，若执
已成功执行语句。
行语句前，忘了检查连接是否已成功建立；二是，在检索查询结果前，忘记了检查服务器是
返回任何内容？”
。典型的问题是，
1一个指向某个数据结构或者NULL的指针，那么你最好能检查一下这个返回值。当程序后面
文，对它进行错误检查就是重要的。许多编程书中常这样讲：“出错检查留给读者作为练习。”
对于返回指针值的函数，若返回非 NULL 指针，则表示成功；若返回NULL，
MySQL客户端开发库里那些带有返回值的例程，通常会根据返回值是指针还是整数，来表
千万不要想当然地认为，客户端开发库里的函数调用每次都会成功。如果不检查返回值，
不对返回值进行检查，往往会增加编程难度。MySQL邮件列表上有很多求助帖子都与此有
我们的下一个客户端程序为 connect2，它在表面上与 connect1很相似：它也可以连接服
if (mysql_xxx（）)
if（mysql_xxx（）!=0)
我们先来看看与出错处理有关的论题。首先要强调一点：
口它提供了默认连接参数，但可以让用户通过命令行或选项文件来改写它们。
口它可以提供更好的出错报告。它使用MySQL客户端开发库函数，返回了更为具体的关
fprintf (stderr,“something bad happened\n");
fprintf (stderr, "something bad happened\n");
fprintf (stderr,"something bad happened\n");
于出错原因的信息。
出错处理和命令选项处理
第7章用C语言编写MySQL程序
在许多时候，程序之所以会出现这样的问题，可能有两种原因：一是，
“为什么我的程序会在执行这条语句时崩溃？”
/*此测试正确*/
/*此测试正确*/
/*此测试不正确*/
—很乏味。不管怎样，让MySQL客
：只要你调用的MySQL函数会失
”或者“为什么我的查询命
，则表示失败
在
今
且
---
## Page 257
贴即可。”这种说法的确有一定的道理，但我对此的答复如下。
你也用不着每次都去键入出错信息输出语句，你可以只编写一次，然后在需要它时使用复制粘
故意夸大了出错报告操作的繁琐，其目的只不过是想让你的辅助函数显得更有价值。再说了，
print_error()。
我们就不会再像以前那样，把出错报告调用混杂在一起：有的使用fprintf（），有的使)
实际意义的事情，那么我们便可以把它用在像mysql_init（）调用失败这样的场合里。然后，
读。此外，如果能把 print_error（)编写得更细致一点，即使当 conn 为 NULL 时也能做些不
print_error（）调用比fprintf（）调用简单，编写也更容易，并且还可以让程序代码更易于阅
通过辅助函数可以更容易地报告错误，调用如下：
mysql_errno()、mysql_error()和 mysql_sqlstate()了:
客户端开发库的例程所提供的出错值。换句话说，在每次测试错误时，不用再像下面这样调用
以编写一个名为 print_error（）的辅助函数，用于输出：我们所提供的出错消息，以及MySQL
的三个值。不过，在每个可能发生错误的地方都写出三个函数调用会很繁琐。实际上，我们可
某个值来报告错误，
mysql_sqlstate()获取的出错信息将对应于后面那个 API调用。
执行了另一个会返回状态信息的 API 调用，那么从 mysql_error（）、mysql_errno（）或
管它了。）
回值。（如果它失败该怎么办呢？如果它真失败了，那又会怎样？你已不再需要这个连接，就别
有人可能会对此提出质疑：“其实，并不是每次报告时都必须调用所有的出错报告函数。你
口如果你想要修改出错消息的格式，那么只修改一个地方，肯定比修改整个程序更省
print_error（）函数会输出出错消息，并调用MySQL的那几个出错报告函数。
if（...某个MySQL函数调用失败...）
一般情况下，程序的用户都认为，出错消息比出错代码更易于理解，因此，如果你只返
口即使使用复制粘贴，也只是对较短的代码比较方便而已。
if（...某个MySQL函数调用失败...）
这几个函数的参数都是指向连接处理器的指针。在错误发生后，应立即调用它们。如果你
口 mysql_error()会返回一个包含出错消息的字符串。
如果客户端开发库的函数调用真的失败了，那么可以用API里的3个函数来查明原因。
并非所有API调用都有返回值。前面使用过的客户端开发库例程mysql_close（）就没有返
口
口
如果你浏览过MySQL本身的源代码，你会发现其中普遍使用的是第二种测试形式。
print_error （conn,"...some error message...");
里，能防微杜渐，提高代码的一致性。
码都写出来的方式，
在每次报告错误时，
如果报告错误很容易，那么在可能的情况下，你更应该坚持检查它们。
无关，因为它依据的是ANSISQL和ODBC标准。
 mysql_sqlstate()会返回一个 SQLSTATE 代码。
mysql_errno （conn),mysql_sqlstate （conn),mysql_error（conn));
，那么个人建议你换成返回出错消息。为完整起见，本章的示例将报告所有
，不管你是否喜欢调用所有的出错报告函数，把所有的出错报告代
迟早会让你禁不住想要采取某些偷懒的做法，进而导致你在报告
，SQLSTATE值与数据库软件的提供商
7.3出错处理和命令选项处理
237
用
有
回
---
## Page 258
事的做法，因为你不必花费大量的时间去跟踪那些细小的问题。
效的前提下才能正常工作，否则你的程序可能会崩溃！）·
记，千万不要把这个处理器传递给任何其他客户端例程！因为它们中的大部分都只有在连接有
败，那么我们一定会把连接处理器传递给print_error（）函数。虽然这个处理器并没有包含
给那些函数的连接处理器还包含着有意义的信息。相比之下，如果 mysql_real_connect(）失
个参数。这将导致 print_error（）不会再去调用 MySQL的出错报告函数，因为无法确保传递
NULL。请注意，如果 mysql_init（）失败，那么我们将把 NULL 传递给 print_error（)的第-
并且我们可以像下面这样使用print_error（）：
错误。
238
本章的其他示例程序都会进行出错检查，而你的程序也应如此。从长远来看，这是一种省
在 connect2.c程序里，用于出错检查的部分与connect1.c程序里相对应的代码很相似，
print_error (MYsQL *conn,char *message)
下面是 print_error（)的定义，它具备了刚才所讨论的那几个优点：
基于这些原因，本章后面的程序示例都将使用 print_error（）来报告与 MySQL 有关的
*连接服务器*/
/*初始化连接处理器*/
static void
口如果在测试程序时使用了调试器，那么你可以很方便地在出错报告函数里设置一个断
print_error（conn,"mysql_real_connect() failed");
exit(1);
print_error (NULL,“mysql_init() failed (probably out of memory)");
uu
if （conn != NULL)
点，让程序在每次检测到有错误发生时都能及时地切换到调试器。
（conn ==NULL)
fprintf(stderr,
且保持前后一致。
那么事情便会容易很多。这种方法能减少犯错，让你的出错报告工作不会半途而废，
fprintf (stderr,
想要同时写到这两个地方），这时如果能只需修改print_error（）函数即可达到目的，
事。或者，你决定把出错消息写到某个日志文件里，不想再将它们写到 stderr（或者
第7章用C语言编写MySQL程序
mysql_init （NULL）;
mysql_errno (conn),mysql_sqlstate (conn), mysql_error (conn));
"%s\n"，message);
"Error%u（%s）:%s\n",
对
回
---
## Page 259
何修改参数向量。
load_defaults（）添加的任何选项。
在末尾）。这样，命令行指定的任何连接参数都将出现后面部分，从而可以改写通过
连接参数。这些选项会被添加到 argv[里，并且正好处于命令名的后面，其他参数的前面（不
在命令行指定的一样。当你解析这些命令行选项时，你便会在普通的选项处理代码里看到那些
把选项组里的信息以命令行选项的形式放在argv［的开头。如此一来，这些选项看起来就像是
解析其内容，从而找出你所感兴趣的选项组，并改写程序的参数向量（即 argv［数组)。它会
7.3.2.1访问选项文件的内容
服务器连接和语句处理的复杂性。
涉及的一般性原理。从这些程序可以看到，选项处理工作其实相当简单，并且不会增加MySQL
谓的重复劳动。（更多与选项文件语法有关的信息请参考F.2.2节。）
容易。只需在程序里增加几行代码，便可以让它支持选项文件，无须自己动手编写代码，做无
些选项。客户端开发库已让“对MySQL选项文件进行检查和从中提取相关值的操作”变得很
件）中，或者放到某个全局选项文件里。然后，你便不用在每次启动程序时在命令行上设定那
里提取信息的能力。这让我们可以把连接参数放到~/.my.cnf文件（即主目录里的.my.cnf文
这事做起来并不难，因为客户端开发库已支持选项处理。此外，connect2还将具备从选项文件
很多MySQL发行版里的程序都能接受两种形式的参数，如下表所示。
使用者，那么事情将变得更麻烦。实时设定连接参数的一个常用方法是使用命令行选项。例如，
们当中的哪一个，你都必须编辑源文件，并重新编译它。这很不方便，如果你的程序还有其他
默认参数。程序connect1 有一个显著的缺陷，即连接参数被直接写在源代码里。不管改变它
7.3.2
注意
下面是一个小程序 show_argv，它演示了如何使用load_defaults（），并且举例说明了如
如果要从选项文件读取连接参数值，可以调用load_defaults（）。此函数会查找选项文件，
在展示connect2里的选项处理是如何工作的之前，我们会先开发两个程序，用于演示所
现在我们来完成这样一个任务：让用户在运行时可以指定连接参数，而不是使用硬编码的
*
为了与标准的MySQL客户端程序保持一致，客户端程序connect2将采用与之相同的格式。
show_argv.c－演示load_defaults（）对参数向量的影响
序展示了如何使用这些选项，有兴趣的读者请自行参阅。
没有对这两个选项进行介绍，但是sampdb 发行版里有protocol程序的源代码，该程
共享内存连接建立所需要的共享内存名字的选项--shared-memory-base-name。本章
TCP/IP、Unix套接字文件等）的选项--protocol，以及在Windows系统上，用于指定
套接字名