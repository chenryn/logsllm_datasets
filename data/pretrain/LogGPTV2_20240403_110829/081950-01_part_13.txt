logger.warn('warn message')
logger.error('error message')
logger.critical('critical message')
【示例2-24】将日志信息显示在终端的同时也在文件中记录（lx_log2.py）。
1 # -*- coding: utf-8 -*-
2
3 import logging
4
5 # 创建logger,其名称为simple_example，名称为任意，也可为空
6 logger = logging.getLogger("simple_example")
7 # 打印logger的名称
8 print(logger.name)
9 # 设置logger的日志级别
10 logger.setLevel(logging.INFO)
11
12 # 创建两个handler，一个负责将日志输出到终端，一个负责输出到文件，并分别设置它们的日志级
别
13 ch = logging.StreamHandler()
14 ch.setLevel(logging.DEBUG)
15 fh = logging.FileHandler(filename="simple.log", mode="a", encoding="utf-8")
16 fh.setLevel(logging.WARNING)
17 # 创建一个格式化器，可以创建不同的格式化器用于不同的handler，这里我们使用一个
18 formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s -
%(message)s")
19
20 # 设置两个handler的格式化器
21 ch.setFormatter(formatter)
22 fh.setFormatter(formatter)
23 # 为logger添加两个handler
24 logger.addHandler(ch)
25 logger.addHandler(fh)
26
27 # 在程序中记录日志
28 logger.debug("debug message")
29 logger.info("info message")
30 logger.warn("warn message")
31 logger.error("error message")
92
第2章 基础运维
32 logger.critical("critical message")
在以上程序中我们设置了logger的日志级别为INFO，handler ch的日志级别为DEBUG，
handler fh的日志级别为WARNING，这样做是为了解释它们之前的优先级。
handler的日志级别以logger的日志级为基础，logger的日志级别为INFO，低于INFO级
别的（如 DEBUG）均不会在 handler 中出现。handler 中的日志级别如果高于 logger，则只显
示更高级别的日志信息，如fh应该只显示WARNING及以上的日志信息；handler中的日志级
别如果低于或等于logger的日志级别，则显示logger的日志级别及以上信息，如ch应该显示
INFO及以上的日志信息。
下面运行程序进行验证：执行python lx_log2.py得到如下结果。
lx_log2
2018-06-12 22:18:10,378 - lx_log2 - INFO - info message
2018-06-12 22:18:10,379 - lx_log2 - WARNING - warn message
2018-06-12 22:18:10,379 - lx_log2 - ERROR - error message
2018-06-12 22:18:10,380 - lx_log2 - CRITICAL - critical message
查看lx_log2.log文件，内容如下：
2018-06-12 22:18:10,379 - lx_log2 - WARNING - warn message
2018-06-12 22:18:10,379 - lx_log2 - ERROR - error message
2018-06-12 22:18:10,380 - lx_log2 - CRITICAL - critical message
从运行结果来看，符合我们的预期。除了StreamHandler 和FileHandler 外，logging模块
还提供了其他更为实用的Handler子类，它们都继承在Handler基类，如下所示。
 BaseRotatingHandler：是循环日志处理器的基类，不能直接被实例化，可使用
RotatingFileHandler和TimedRotatingFileHandler。
 RotatingFileHandler：将日志文件记录至磁盘文件，可以设置每个日志文件的最大占
用空间。
 TimedRotatingFileHandler ：将日志文件记录至磁盘文件，按固定的时间间隔来循环
记录日志 。
 SocketHandler：可以将日志信息发送到TCP/IP套接字。
 DatagramHandler：可以将日志信息发送到UDP套接字。
 SMTPHandler：可以将日志文件发送至邮箱。
 SysLogHandler：系统日志处理器，可以将日志文件发送至 UNIX 系统日志，也可以
是一个远程机器。
 NTEventLogHandler：Windows系统事件日志处理器，可以将日志文件发送到Windows
系统事件日志。
 MemoryHandler：MemoryHandler实例向内存中的缓冲区发送消息，只要满足特定的
条件，缓冲区就会被刷新。
 HTTPHandler：使用GET或POST方法向HTTP服务器发送消息。
 WatchedFileHandler：WatchedFileHandler实例监视它们登录到的文件。如果文件发生
93
Python自动化运维快速入门
更改，则使用文件名关闭并重新打开。这个处理器只适用于类 unix 系统，Windows
不支持使用的底层机制。
 QueueHandler：QueueHandler实例向队列发送消息，比如在队列或多处理模块中实现
的消息。
 NullHandler：NullHandler 实例不使用错误消息。库开发人员使用日志记录，但希望
避免在库用户未配置日志记录时显示“日志记录器XXX无法找到任何处理程序”消
息。
【示例2-25】日志的配置信息也可以来源于配置文件（lx_log3.py）。代码如下：
1 import logging
2 import logging.config
3
4 logging.config.fileConfig('logging.conf')
5
6 # 创建一个logger
7 logger = logging.getLogger('simpleExample')
8
9 # 日志记录
10 logger.debug('debug message')
11 logger.info('info message')
12 logger.warn('warn message')
13 logger.error('error message')
14 logger.critical('critical message')
下面是配置文件的信息logging.conf。
1 [loggers]
2 keys=root,simpleExample
3
4 [handlers]
5 keys=consoleHandler
6
7 [formatters]
8 keys=simpleFormatter
9
10 [logger_root]
11 level=DEBUG
12 handlers=consoleHandler
13
14 [logger_simpleExample]
15 level=DEBUG
16 handlers=consoleHandler
17 qualname=simpleExample
18 propagate=0
19
20 [handler_consoleHandler]
21 class=StreamHandler
22 level=DEBUG
94
第2章 基础运维
23 formatter=simpleFormatter
24 args=(sys.stdout,)
25
26 [formatter_simpleFormatter]
27 format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
28 datefmt=%Y-%m-%d %H:%M:%S
上面几种常用的方法已经基本满足我们的需求，如需要更为细致的了解，可参考 logging
模块的官方文档。
2.6
搭建 FTP 服务器与客户端
熟悉 FTP 的读者可能会觉得这个太简单了，直接在网上下载软件安装运行就可以了，客
户端和服务器都有，但是只能满足一些简单的工作需求。如果我们通过写Python代码搭建FTP
服务器和客户端，就能实现一些更为精细化的控制，如精细的访问权限配置、详细的日志记录
等，根据工作经验，Python 搭建 FTP 服务器也非常简单，而且更为稳定，下面就让我们一起
来学习吧。
2.6.1 搭建 FTP 服务器
FTP（File Transfer Protocol，文件传输协议）运行在TCP协议上，使用两个端口，即数据
端口和命令端口，也称控制端口。默认情况下，20是数据端口，21是命令端口。
FTP有两种传输模式：主动模式和被动模式。
（1）主动模式： 客户端首先从任意的非特殊端口 n（大于 1023 的端口，也是客户端的
命令端口）连接 FTP 服务器的命令端口（默认是 21），向服务发出命令 PORT n+1，告诉服
务器自己使用n+1端口作为数据端口进行数据传输，然后在n+1端口监听。服务器收到PORT
n+1 后向客户端返回一个’ACK’, 然后服务器从它自己的数据端口（20）到客户端先前指定的
数据端口 (n+1 端口) 的连接，最后客户端向服务器返回一个'ACK'，过程结束，如图2.17所
示。
1.客户端发送PORT 1026
命令 命令
端口 端口
21 2.服务器返回ACK 1025
服务器 客户端
3.建立连接，数据传输
数据 数据
端口 端口
20 4.返回ACK 1026
图2.17 ftp的主动模式
95
Python自动化运维快速入门
（2）被动模式：为了解决服务器发起到客户的连接问题，人们开发了被动FTP，或者叫
作 PASV，当客户端通知服务器处于被动模式时才启用。在被动方式 FTP 中，命令连接和数
据连接都由客户端发起。当开启一个FTP连接时，客户端打开两个任意的非特权本地端口（大
于 1023）。第一个端口连接服务器的 21 端口，但与主动方式的 FTP 不同，客户端不会提交
PORT命令并允许服务器来回连接数据端口，而是提交PASV命令。这样做的结果是服务器会
开启一个任意的非特权端口，并发送PORT P命令给客户端，然后客户端发起从本地端口N+1
到服务器的端口P的连接用来传送数据，如图2.18所示。
1.客户端发送PSAV
命令 命令
端口 端口
21 2.服务器返回随机端口2024 1025
服务器 客户端
3.建立连接，数据传输
数据 数据
端口 端口
2024 4.返回ACK 1026
图2.18 ftp的被动模式
简单总结：主动方式对FTP服务器的管理有利，但对客户端的管理不利。因为FTP服务
器企图与客户端的高位随机端口建立连接，而这个端口很有可能被客户端的防火墙阻塞掉。被
动方式对 FTP 客户端的管理有利，但对服务器端的管理不利。因为客户端要与服务器端建立
两个连接，其中一个连到一个高位随机端口，而这个端口很有可能被服务器端的防火墙阻塞掉。
使用Python搭建一个FTP服务器需要pyftpdlib模块，安装非常简单。执行以下命令进行
安装：
pip install pyftpdlib
（1）快速搭建一个简单的FTP服务器。执行：
python -m pyftpdlib -p 21
即可在执行命令所在的目录下建立一个端口为21的供下载文件的FTP服务器，注意Linux
系统需要 root 用户才能使用默认端口 21，windows 系统中目录文件名可能是乱码，原因是
pyftpdlib内部使用utf8，而windows使用gbk，参照下面的步骤可解决windows系统的乱码问
题。
首先，找到pyftpdlib源文件所在的目录。
>>> import pyftpdlib
>>> pyftpdlib.__path__
['C:\\Users\\xx\\projectA_env\\lib\\site-packages\\pyftpdlib']
其次，在目录pyftpdlib源文件所在的目录找到文件filesystems.py和handlers.py，先备份。
再次，打开filesystems.py ，找到
96
第2章 基础运维
yield line.encode('utf8', self.cmd_channel.unicode_errors)
共有两处，修改'utf8'为'gbk'，保存并退出。
打开handlers.py，找到
return bytes.decode('utf8', self.unicode_errors)
修改utf8为gbk，保存并退出。
最后，验证乱码已解决。
（2）搭建一个具有访问权限，可配置相关信息的FTP服务器（ftpserver.py）。
1 from pyftpdlib.authorizers import DummyAuthorizer
2 from pyftpdlib.handlers import FTPHandler,ThrottledDTPHandler
3 from pyftpdlib.servers import FTPServer
4 from pyftpdlib.log import LogFormatter
5 import logging
6
7
8 #记录日志，默认情况下日志仅输出到屏幕（终端），这里既输出到屏幕又输出到文件，方便日志查看
9 logger = logging.getLogger()
10 logger.setLevel(logging.INFO)
11 ch = logging.StreamHandler()
12 fh = logging.FileHandler(filename='myftpserver.log',encoding='utf-8') #默认
的方式是追加到文件
13 ch.setFormatter(LogFormatter())
14 fh.setFormatter(LogFormatter())
15 logger.addHandler(ch) #将日志输出至屏幕
16 logger.addHandler(fh) #将日志输出至文件
17
18
19 # 实例化虚拟用户，这是FTP验证首要条件
20 authorizer = DummyAuthorizer()
21 # 添加用户权限和路径，括号内的参数是(用户名、 密码、 用户目录、 权限),可以为不同的用户添加
不同的目录和权限
22 authorizer.add_user("user", "12345", "d:/", perm="elradfmw")
23 # 添加匿名用户，只需要路径
24 authorizer.add_anonymous("d:/")
25
26 # 初始化ftp句柄
27 handler = FTPHandler
28 handler.authorizer = authorizer
29
30 #添加被动端口范围
31 handler.passive_ports = range(2000, 2333)
32
33 # 下载上传速度设置
34 dtp_handler = ThrottledDTPHandler
35 dtp_handler.read_limit = 300 * 1024 #300kb/s
36 dtp_handler.write_limit = 300 * 1024 #300kb/s
37 handler.dtp_handler = dtp_handler
97
Python自动化运维快速入门
38
39 # 监听ip 和 端口,linux里需要root用户才能使用21端口
40 server = FTPServer(("0.0.0.0", 21), handler)
41
42 # 最大连接数
43 server.max_cons = 150
44 server.max_cons_per_ip = 15
45
46 # 开始服务，自带日志打印信息
47 server.serve_forever()
执行python ftpserver.py得到如图2.19所示的结果。
图2.19 运行结果
同时该目录下也会生成一个myftpserver.log文件，文件内容与屏幕上的信息一致。
下面我们登录该FTP并列出目录进行测试，如图2.20所示。
图2.20 客户端运行结果