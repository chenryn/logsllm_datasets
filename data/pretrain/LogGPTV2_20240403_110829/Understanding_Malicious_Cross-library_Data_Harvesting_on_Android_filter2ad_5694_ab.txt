“personal information” (e.g., name, email address, mailing ad-
dress), as guided by laws (e.g., GDPR, CalOPPA [48]). The
latter also prevents the abuse of security-critical data (e.g.,
password and token) and SDK-speciﬁc data (e.g., API keys,
access credentials). Table 1 shows the data items protected by
the ToS of Twitter, Facebook and Google. We can see that 21
data items in the ToSes are SDK-speciﬁc and not mentioned
by the privacy policies.
In our research, we found that the state-of-the-art privacy
policy analyzer (e.g., Polisis [57]) cannot effectively analyze
ToS to recover the content about sensitive data sharing policy
(see Section 3.2), possibly due to the different grammatical
structures of ToS (for addressing to different audience and
describing different data items and rules) than those appearing
in common privacy policy corpora.
Natural language processing. In our research, we leverage
Natural language process (NLP) to automatically extract third-
party sharing policies for sensitive data from SDK ToS. Below
we brieﬂy introduce the NLP techniques used in our research.
(cid:15) Named entity recognition. Named entity recognition (NER)
is a technique that locates named entities mentioned in un-
structured text and classiﬁes them into pre-deﬁned categories
such as person names, organizations, locations. The state-of-
the-art NER tools such as Stanford NER and Spacy NER can
achieve a 95% accuracy on open-domain corpora to recog-
nize person names, organizations, locations. However, NER
systems are known to be brittle, highly domain-speciﬁc —
those designed for one domain hardly work well on the other
domain [61]. A direct use of the state-of-the-art tools like
Stanford NER [66] does not work, because the common pre-
deﬁned categories (names, organizations, locations) are not
suitable for our task. In our study, we tailor named entity
recognition techniques to identify sensitive data, which is
protected by third-party sharing policies.
USENIX Association
30th USENIX Security Symposium    4135
You maynotassociatethe advertising IDwithany device identifier  user consent.nsubjauxnegdobjpreppobjwithoutpreppobjOTHEROTHEROTHERACTIONDATAOTHERDATAOTHERCONDITIONYou maynotassociatethe advertising IDwithany device identifier  user consent   .withoutOTHEROTHEROTHERACTIONDATAOTHERDATAOTHERCONDITIONDTNNPNNPVBRBMDPRPINDTNNNNINNNNNNPNPNPPPTable 1: Examples of data items protected by the ToS of Facebook, Twitter, and Pinterest
SDK
Facebook
Twitter
Pinterest
access token, access credentials, Friend data, Facebook user IDs, trademarks, PSIDs(Page-scoped user IDs), Marketplace Lead Data
API keys, access credentials, Twitter Content, Twitter passwords, Tweet IDs, Direct Message IDs, user IDs, Periscope Broadcasts
Wordmark, image, Ad Data, user ID and campaign reporting, secret boards
Term of Service
(cid:15) Constituency parsing and dependency parsing. Con-
stituency parsing and dependency parsing are NLP techniques
to analyze a sentence’s syntactic structure. Constituency pars-
ing breaks a sentence into sub-phrases and displays its syn-
tactic structure using context-free grammar, while depen-
dency parsing analyzes the grammatical relations between
words such as subject-verb (SBV), verb-object (VOB), at-
tribute (ATT), adverbial (ADV), coordinate (COO) and oth-
ers [11]. Figure 2 illustrates the constituency parsing tree and
dependency parsing tree of a sentence. In the constituency
parsing tree, non-terminals are types of phrases and the ter-
minals are the words in the sentence. For instance, as shown
in the ﬁgure 2b , NP is a non-terminal node that represents
a noun phrase and connects three child nodes (the (DT), ad-
vertising (NNP), ID (NNP)). Here, DT means determiner and
NNP means a noun in a singular phrase [30]. By comparison,
the dependency parsing tree is represented as a rooted parsing
tree (see Figure 2a). At the center of the tree is the verb of
a clause structure, which is linked, directly or indirectly, by
other linguistic units. This unit can either be a single word
or a noun phase that merged by the parser’s built-in phase
merge API phrase.merge [28]. The state-of-the-art depen-
dency and constituency parser (e.g., Stanford parser [49], Al-
lenNLP [56]) can achieve over 90% accuracy in syntactic
structure discovery from a sentence. In our study, we leverage
both dependency and constituency parsing trees generated
from sentences in ToS to recover the semantics of third-party
sharing policies in SDK ToS.
(cid:15) word2vec. Word2vec [67] is a word embedding technique
that maps text (words or phrases) to numerical vectors. Such a
mapping can be done in different ways, e.g., using the contin-
ual bag-of-words model [8] or the skip-gram technique [35]
to analyze the context in which the words show up. Such a
vector representation ensures that synonyms are given similar
vectors and antonyms are mapped to different vectors. In our
study, we build a customized word embedding model for data
sharing policies to measure the similarity of words in this
domain, as elaborated in Section 3.4.
Threat model. We consider an adversary who spreads mali-
cious libraries that harvests private user data from third-party
SDKs hosted by the same mobile apps. For this purpose, the
adversary often offers appealing functionalities or monetary
incentives to app developers for integrating a malicious li-
brary into their apps. In our study, victim SDKs in an app are
those neither owned by the app vendor, nor provided by AOSP
(Android Open Source Project) [42] – the ofﬁcial Android
Figure 3: Overview of XFinder
version not customized by original equipment manufacturers
(OEMs). In this regard and for the best understanding of the
threats, libraries developed by Google but not on AOSP are
also studied in our research.
3 Methodology
In this section, we elaborate on the design and implementation
of XFinder, a methodology for discovering XLDH from real-
world Android apps.
3.1 Overview
Architecture. As mentioned earlier, our approach relies on
the extraction of data sharing policies from ToS and analy-
sis of policy compliance during a library’s interactions with
other SDKs within the same app. In particular, the design
of XFinder includes three major components, Data Policy
Analyzer (DPA), Meta-DB Constructor, and Cross-library
Analyzer (XLA), as outlined in Figure 3.
DPA takes as its input a set of SDK ToSes associated with
popular SDKs, which are widely deployed in Android apps.
These ToSes are processed by DPA to output the SDKs’ data
sharing policies (Section 3.2). The restricted data items gov-
erned by those data sharing policies, along with the corre-
sponding SDK APIs that return those data items, are recorded
in a Meta-DB (Section 3.4). To identify the leaks of those
restricted data due to XLDH activities, XLA inspects the de-
4136    30th USENIX Security Symposium
USENIX Association
data sharing policiesreturn value of sensitive APIs locate all cross-lib callsData flow trackingrecognize restricted data SDK API specifications Android appsXLHDCompliance checkMeta-DB Constructor   Cross-Library AnalyzerData Policy Analyzerrestricted data itemsidentify sensitive callslocate/taint return valueMeta-DB constructionsensitive APIsToS123identify policy statementextract policy compiled code of an app to ﬁnd all cross-library invocations
on the sensitive SDK APIs (those that return the restricted
data, as recorded in the Meta-DB); XLA then tracks down
the data ﬂow of their return value to identify an exﬁltration
(Section 3.3). The cross-library interactions discovered in this
way are then checked against the data sharing policies that
DPA extracted, for ﬁnding policy violations.
Example. Here we use a real example to explain how XFinder
works. Speciﬁcally, XFinder inspected the app "Columns
Gembira" (com.frzgame.columns), which includes both an
XLDH library Mobiburn and the Facebook SDK. In ana-
lyzing the app, XLA ﬁrst scans all function calls to ﬁnd
out cross-library API calls, those with caller classes and
callee classes in different libraries. For example, the class
com.mobiburn.e.h in Mobiburn library is found to invoke
function com.facebook.AccessToken.getToken() in the
Facebook SDK, as shown in Figure 4a. Then XLA looks
up the meta-DB to determine the return value of the func-
tion, which is the user’s Facebook session token, and further
tracks down the data ﬂow using taint tracking. In the end, we
found that the token is used to fetch a user’s Facebook proﬁle
data (ID, name, gender, email, locale, link, etc.) in function
com.mobiburn.e.h.getFbProfile(), and all the data in-
cluding the token are sent out to the server of Mobiburn. (see
Figure 4b)
XFinder then checks whether such a data practice violates
the data sharing policies speciﬁed in Facebook ToS. More
speciﬁcally, given the statement of “keep private your secret
key and access tokens" in Facebook’s ToS, DPA automati-
cally extracted the data sharing policy (access token, condi-
tion:null), which indicates that access token is the restricted
data item and it cannot be shared with and transferred to a
third-party under any conditions (i.e., condition:null). Hence,
the XLDH of the Mobiburn library violates the data sharing
policy of Facebook SDK, and thus, XFinder ﬂags Mobiburn
as an XLDH library.
Dataset summary. We summarize the dataset produced and
consumed by each stage of our pipeline as below. Table 2
shows the datasets used in our study.
In total, we collected 1.3M Android apps (Dg) from Google
Play for XLDH library detection. More speciﬁcally, the
dataset was collected based on a publicly-available app
list (AndroZoo [43]), using an open-source Google Play
crawler [23], which has been widely used in previous research
such as [87]. We used the default settings of the crawler to
download the apps from Google Play from Oct. 03 to Oct. 15,
2019. In total, we successfully collected 93.12% of the apps
on the list (1,341,148/1,440,160) from Google Play. Among
them, we identiﬁed top 200 SDKs widely integrated into real-
world apps (Section 3.4). After removing utility SDKs which
are not associated with sensitive data, we further gathered
ToSes for the remaining 40 SDKs from their vendor websites
(Ctos).
public class h {
public static String getAccessToken () {
Class [] param = new Class [0];
Class clz = Class . forName (
"com.facebook.AccessToken");
Method meth1 = clz . getDeclaredMethod (
" getCurrentAccessToken ", param )
Object curToken = meth1 . invoke (clz , null );
Method meth2 = clz .
getDeclaredMethod (" getToken ", param )
return meth2 . invoke ( curToken , null );}
public JSONObject getFbProfile ( String token ){
String uri = Uri . parse (
" https :// graph . facebook . com / v2 .10/ me ").
appendParam (" accesstoken ", token ).
appendParam (" fields ","id,first_name,gender,
last_name,link,locale,name,timezone,
updated_time,verified,email");
HttpsURLConnection httpsURLConnection =
new URL ( uri ). openConnection ();
return new JSONObject ( httpsURLConnection .
getInputStream (). readLine ());}
}
(a) Reading app users’ Facebook access token and proﬁle
public class f{
public void a (){
JSONObject userData = new JSONObject ();
userData . put (" accessToken ", getAccessToken());
userData . put (" accountJson ", getFbProfile());
...
HttpsURLConnection httpsURLConnection =
new URL ( this . serverUri ). openConnection ();
DataOutputStream dataOutputStream =
httpsURLConnection . getOutputStream ();
dataOutputStream . write ( userData );
}
}
(b) Sending the Facebook token and proﬁle to mobiburn server
Figure 4: Code of XLDH library com:mobiburn
After that, we bootstrapped our study by using DPA to auto-
matically extract 1,056 data sharing policies, associated with
1,215 restricted data objects from the 40 SDK ToSes (Sec-
tion 3.2). We constructed the Meta-DB (Section 3.4) which
recorded all 936 sensitive APIs of the SDKs that return re-
stricted data. Then, in XLA, we statically analyzed 1.3M An-
droid apps (Dg) to extract cross-library API calls (Section 3.3).
After ﬁltering by Meta-DB, 1,934,874 of them are regarded
as sensitive. Given those sensitive API calls, we tracked their
data ﬂows to check whether such ﬂows are in compliance with
the SDK’s data sharing policies. In particular, for restricted
data not allowing access by a third-party or any party, we
consider the exﬁltration of the data a violation of the ToS
and identify 15 XLDH libraries; For restricted data access re-
quiring user consent or complying with regulations, we check
whether such behavior was disclosed in the caller library’s
privacy policy (Cp), which revealed 27 XLDH libraries. In
total, our study reported 42 distinct XLDH libraries (4 manu-
ally found and 38 automatically detected) integrated in more
than 19K apps and targeting at 16 victim SDKs.
USENIX Association
30th USENIX Security Symposium    4137
Table 2: Summary of datasets and corpora
Source
Size
Timestamp (yyyyMM)
Usage
Documentations of 27K APIs
1.3M apps
8622 sentences
10K sentences
300K apps
201910
201910
201910
202006
2014-2019
2011-2019
Detection
Detection
Detection
Detection
Measurement
Measurement
Name
Dg
Ctos
Capi
Cp
Dha
Dhl
Google Play
40 victim SDK ToSes
40 victim SDK API speciﬁcations
73 XLDH library privacy policies
Historical Google Play apps
Historical XLDH library versions
42 XLDH libraries of 495 versions
Table 3: The verbs related to data sharing policy
connect, associate, post, combine, lease, disclose, offer,
distribute, afford, share, send, deliver, disseminate, transport,
protect against, keep, proxy, request, track, aggregate, provide,
give, transfer, cache, transmit, get, seek, possess, accumulate,
convert, collect, use, store, gather, obtain, receive, access, save
3.2 Data Policy Analyzer
The goal of Data Policy Analyzer (DPA) is to extract third-
party data sharing policies from an SDK ToS, which describe
how restricted data items can be shared with or collected by
other libraries. Here we describe a data sharing policy as a
pair (ob ject;condition), where ob ject is the restricted data
item of the SDK, such as utdid, password, and condition is the