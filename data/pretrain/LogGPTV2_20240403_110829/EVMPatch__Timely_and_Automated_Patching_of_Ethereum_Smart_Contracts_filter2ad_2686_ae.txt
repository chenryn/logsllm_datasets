### Introduction
We assume no prior knowledge of patching smart contracts. Table 5 details how developers rated their prior experience with smart contracts. The third task, which involves extending EVMPATCH, requires a deeper understanding of bug classes and the ability to perform root cause analysis to effectively patch vulnerabilities. This task is more challenging compared to the first two. Since the third task covers a different bug class, we believe there is no significant bias in the data due to developers completing the other tasks first.

### Methodology
For all tasks, we measured the time required by the developer to complete the task (excluding the time needed to read the task description). We asked the developers to rate their familiarity with relevant technologies, their confidence levels in their patches, and the difficulty of performing the tasks on a 7-point Likert scale. The full questionnaire and the developers' responses are shown in Table 5, and the recorded time measurements are shown in Table 4. Supporting files are available in a GitHub repository [1].

### Task Analysis
#### Manual Code Review and Cross-Check
We conducted both a manual code review and a cross-check with EVMPATCH to analyze the mistakes made by the developers. Our study shows that significant effort is required to manually patch smart contracts correctly, whereas EVMPATCH provides a simple, user-friendly, and efficient solution. Time measurements indicate that developers with no prior experience with EVMPATCH were able to complete complex tasks within minutes.

#### Patching Integer Overflow Bugs
Developers were asked to fix all integer overflow vulnerabilities in three contracts:
1. BEC [2] (CVE-2018-10299, 299 lines of code)
2. HXG [3] (CVE-2018-11239, 102 lines of code)
3. SCA [4] (CVE-2018-10706, 404 lines of code)

To provide a representative set of contracts, we chose three ERC-20 contracts with varying complexity (in terms of lines of code) and where static analysis includes missed bugs and false alarms. We ran OSIRIS on all three contracts and provided the developers with the analysis output and a copy of the SafeMath Solidity library. This setup accurately reflects a real-world scenario where a blockchain developer needs to quickly patch a smart contract based on recent state-of-the-art vulnerability analysis tools and online tutorials. All developers manually and correctly patched the source code of all three contracts, demonstrating their expertise in blockchain development. However, it took them an average of 51.8 minutes (σ = 16.6 minutes) to create patched versions for the three contracts. In contrast, EVMPATCH fully automates the patching process and can generate patches for the three contracts within a maximum of 10 seconds.

#### Converting to an Upgradable Contract
Developers had to convert a given smart contract into an upgradable smart contract. We provided a short description of the delegatecall-proxy pattern and asked them to convert the contract into two: a proxy contract and a logic contract based on the original contract. We did not provide further information on handling the storage-layout problem and explicitly allowed the use of online resources. On average, developers required 66.3 minutes (σ = 31.3 minutes, fastest 33 minutes, slowest 110 minutes) to convert a contract into an upgradable contract. None of the developers performed a correct conversion, as reflected in a median confidence of 2.5 in the correctness reported by the developers. Two major mistakes were observed:
1. The proxy contract would only support a fixed set of functions, i.e., it would not support adding new functions.
2. Only one out of six developers correctly handled storage collisions in the proxy and logic contract, meaning five of the six converted contracts were inherently flawed.

Next, we asked the developers to use EVMPATCH to create and deploy an upgradable contract. As EVMPATCH does not require prior knowledge about upgradable contracts, the developers were able to deploy a correct upgradable contract within at most 3 minutes. Additionally, patching with EVMPATCH inspired high confidence—a median of 7, the best rating on our scale—in the correctness of the patch. This strongly confirms that deployment of a proxy with EVMPATCH is superior to manual patching and upgrading.

#### Extending EVMPATCH
Developers had to write a custom patch template for EVMPATCH. We instructed them on using EVMPATCH and how to write patch templates with its patch template language (see Figure 4 for an example). We also presented an extended bug report showing how an access control bug can be exploited. Developers leveraged the full EVMPATCH system, which applies the patch and validates it using the patch tester component. This component replays past transactions from the blockchain and notifies the developer if:
1. The patch prevents a known attack.
2. The patch breaks functionality in other prior legitimate transactions.

EVMPATCH allowed the developers to create a fully functional and securely patched upgradable contract within a few minutes. On average, developers needed 5.5 minutes, with a maximum of 15 minutes, to create a custom patch template. As expected, all developers correctly patched the given contract using EVMPATCH, as a faulty patch would have been reported by the patch tester. The integrated patch tester gave developers high confidence in their patches, with an average confidence level of 6.6 (σ = 0.4), where 7 is the most confident. None of the developers found writing such a custom patch template particularly difficult.

### Summary
Our study confirms that EVMPATCH offers a high degree of automation, efficiency, and usability, freeing developers from manual and error-prone tasks. None of the six developers were able to produce a correct upgradable contract, mainly due to the difficulty of preserving the storage layout. Our study also confirms that extending EVMPATCH with custom patch templates is a feasible task, even for developers unfamiliar with its inner workings.

### Related Work
The infamous "TheDAO" contract attack [5] received considerable attention. Since then, many additional exploits and defenses, focusing on discovering bugs before deployment, have been revealed. Luu et al. introduced Oyente, a symbolic executor that explores contract code for possible vulnerabilities [6]. Other symbolic execution tools with better precision and performance have been proposed [7-10]. Static analyzers for both Solidity and EVM bytecode have also been developed [11, 12]. Information flow analysis and data sanitization in a multi-transaction setting have been analyzed by Ethainter [13]. Formal verification and model checking methods have been applied to smart contracts [14, 15], and the semantics of the EVM and Solidity language have been formalized [16, 17]. However, only a small body of work has researched dynamic analysis and runtime protections. Tools like Sereum [18] or ECFChecker [19] can detect live reentrancy attacks on vulnerable contracts. Recent work has explored modular dynamic analysis frameworks for protecting smart contracts [20, 21]. Solutions requiring modifications to the smart contract execution environment are unlikely to be integrated into production blockchain systems.

Integer overflows have been widely studied in Ethereum smart contracts. Osiris [22] is an extension of Oyente [6] to accurately detect integer bugs. It infers the integer type from specific instructions generated by Solidity compilers and checks for potential integer bugs. We leverage Osiris's detection capabilities because it pinpoints the exact location of integer overflow bugs. Other tools like TeEther [23] and MAIAN [24] implicitly find integer bugs but do not report the exact location. ZEUS [25] uses abstract interpretation and symbolic model checking to verify safety properties of smart contracts, but it detects potential integer overflow vulnerabilities at the LLVM intermediate level and cannot determine the exact location in the corresponding EVM bytecode.

Recently, SMARTSHIELD [26] has explored bytecode rewriting for patching smart contracts. SMARTSHIELD requires a complete control-flow graph (CFG) to update jump targets and data references, which is challenging due to the EVM's bytecode format. Such a bytecode rewriting strategy may not scale to larger and more complicated contracts. In contrast, EVMPATCH's trampoline-based rewriting strategy does not require an accurate CFG and is more resilient when rewriting complex contracts. SMARTSHIELD implements custom bytecode analysis, which may not be as accurate as specialized analyses. For example, SMARTSHIELD's analysis does not infer whether an integer type is signed, which is important for accurate integer overflow detection [22]. EVMPATCH is a flexible framework that can integrate many static analysis tools for detecting vulnerabilities and can leverage tool improvements with minimal effort. Most importantly, EVMPATCH automates the entire lifecycle of deploying and managing an upgradable contract, while SMARTSHIELD is designed to harden a contract pre-deployment. With EVMPATCH, a smart contract developer can patch vulnerabilities discovered after deployment.

The Ethereum community has explored several design patterns for upgradable smart contracts [27-30], with the proxy pattern being the most popular. The ZeppelinOS [30] framework supports upgradable contracts by implementing the delegatecall-proxy pattern. However, developers must manually ensure compatibility of the legacy and patched contract at the Solidity level. This can be achieved using static analysis tools that perform "upgradeability" checks (e.g., Slither [31] checks for a compatible storage layout), which rely on accurate knowledge of compiler behavior regarding storage allocations. EVMPATCH combines existing analysis tools and provides an automatic method to patch detected vulnerabilities while maintaining a consistent storage layout by design.

### Conclusion
Updating erroneous smart contracts is a major challenge in blockchain technology. Attackers can quickly exploit smart contract errors due to the always-online nature and the common, simple computing engine. While many proposals have introduced frameworks to help developers find bugs, it remains unclear how developers and the community can quickly and automatically react to vulnerabilities in already deployed contracts. In this work, we developed a framework that supports automated and instant patching of smart contract errors based on bytecode rewriting. Our evaluation demonstrates that real-world vulnerable contracts can be successfully patched without violating functional correctness. Our developer study shows that an automated patching approach significantly reduces the time required for patching smart contracts, and our implementation, EVMPATCH, can be practically integrated into a smart contract developer's workflow. We believe that automated patching will increase the trustworthiness and acceptance of smart contracts by allowing developers to quickly respond to reported vulnerabilities.

### Acknowledgments
The authors would like to thank the reviewers, especially our shepherd Yinzhi Cao, for their valuable feedback, and the developers for participating in our study. This work was partially funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany’s Excellence Strategy - EXC 2092 CASA - 390781972 and the DFG as part of project S2 within the CRC 1119 CROSSING. This work has also been partially supported by the EU H2020-SU-ICT-03-2018 CyberSec4Europe project, funded by the European Commission under grant agreement no. 830929.

### References
[1] GitHub Repository: https://github.com/uni-due-syssec/evmpatch-developer-study
[2] BEC Token: https://blog.peckshield.com/2018/04/22/batchOverflow/
[3] HXG Token: https://etherscan.io/address/0xB5335e24d0aB29C190AB8C2B459238Da1153cEBA
[4] SCA Token: https://etherscan.io/address/0xc5d105e63711398af9bbff092d4b6769c82f793d
[5] Phil Daian. Analysis of the DAO exploit. 2016. URL: http://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/
[6] Luu et al. Oyente: A Symbolic Execution Tool for Analyzing Smart Contracts. 2016. DOI: 10.1145/2976749.2978336
[7] Krupp and Rossow. teEther: Gnawing at Ethereum to Automatically Exploit Smart Contracts. 2018. DOI: 10.14722/usenixsecurity18.23082
[8] Grishchenko, Maffei, and Schneidewind. Foundations and Tools for the Static Analysis of Ethereum Smart Contracts. 2018. DOI: 10.1007/978-3-319-96145-3_4
[9] Ferreira-Torres, Schütte, and State. Osiris: Hunting for Integer Bugs in Ethereum Smart Contracts. 2018. DOI: 10.1145/3274694.3274737
[10] Frank, Aschermann, and Holz. ETHBMC: A Bounded Model Checker for Smart Contracts. 2020. DOI: 10.1145/3319535.3363227
[11] Solidity Documentation. Layout of State Variables in Storage. URL: https://solidity.readthedocs.io/en/v0.5.10/miscellaneous.html
[12] Ethereum EIPs. ERC930 - Eternal Storage Standard. URL: https://github.com/ethereum/EIPs/issues/930
[13] Brent, Grech, Lagouvardos, Scholz, and Smaragdakis. Ethainter: A Smart Contract Security Analyzer for Composite Vulnerabilities. 2020. DOI: 10.1145/3385412.3385990
[14] Grossman, Abraham, Golan-Gueta, Michalevsky, Rinetzky, Sagiv, and Zohar. Online Detection of Effectively Callback Free Objects with Applications to Smart Contracts. 2018. DOI: 10.1145/3158136
[15] Jiao, Kan, Lin, Sanan, Liu, and Sun. Semantic Understanding of Smart Contracts: Executable Operational Semantics of Solidity. 2020. DOI: 10.1109/SP40000.2020.00066
[16] Kalra, Goel, Dhawan, and Sharma. ZEUS: Analyzing Safety of Smart Contracts. 2018. DOI: 10.14722/ndss.2018.23082
[17] Feist, Grieco, and Groce. Slither: A Static Analysis Framework for Smart Contracts. 2019. DOI: 10.1109/WETSEB.2019.00008
[18] Chen et al. SODA: A Generic Online Detection Framework for Smart Contracts. 2020. DOI: 10.14722/ndss.2020.24449
[19] Davi, Dmitrienko, Egele, Fischer, Holz, Hund, Nürnberger, and Sadeghi. MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones. 2012. DOI: 10.14722/ndss.2012.23082
[20] Ethereum Smart Contract Best Practices: Upgrading Broken Contracts. URL: https://consensys.github.io/smart-contract-best-practices/software_engineering/#upgrading-broken-contracts
[21] SMARTSHIELD: https://github.com/smartshield/smartshield
[22] Ferreira-Torres, Schütte, and State. Osiris: Hunting for Integer Bugs in Ethereum Smart Contracts. 2018. DOI: 10.1145/3274694.3274737
[23] Krupp and Rossow. teEther: Gnawing at Ethereum to Automatically Exploit Smart Contracts. 2018. DOI: 10.14722/usenixsecurity18.23082
[24] Tsankov, Drachsler, and Vechev. Securify: Practical Security Analysis of Smart Contracts. 2018. DOI: 10.14722/ndss.2018.23082
[25] Kalra, Goel, Dhawan, and Sharma. ZEUS: Analyzing Safety of Smart Contracts. 2018. DOI: 10.14722/ndss.2018.23082
[26] SMARTSHIELD: https://github.com/smartshield/smartshield
[27] ZeppelinOS: https://zeppelinos.org/
[28] Ethereum Smart Contract Best Practices: Upgrading Broken Contracts. URL: https://consensys.github.io/smart-contract-best-practices/software_engineering/#upgrading-broken-contracts
[29] EIP-1967: Standard Proxy Storage Slots. URL: https://eips.ethereum.org/EIPS/eip-1967
[30] ZeppelinOS: https://zeppelinos.org/
[31] Feist, Grieco, and Groce. Slither: A Static Analysis Framework for Smart Contracts. 2019. DOI: 10.1109/WETSEB.2019.00008