conﬂict({(cid:6)1 : p1p2(cid:7),(cid:6)2 : p2(cid:7),(cid:6)2 : p1p2(cid:7)}) = {p1p2}.
Preﬁxes and inference.
I will deﬁne an operator
infer(S, M), which takes a state S and a set of malicious
processes M. It outputs the set of events whose occurrence
can be inferred from S. The basic idea is that if an hon-
est process claims that event e has occurred, then it has in-
deed occurred. For example, if qi /∈ M, then (cid:6)x : q1 . . . qi(cid:7)
implies (cid:6)x : q1 . . . qi−1(cid:7).
If in addition qi−1 /∈ M, then
(cid:6)x : q1 . . . qi−2(cid:7), and so on. In general, for a singleton state
S = {(cid:6)x : q1 . . . qi(cid:7)}:
infer(S, M) = (cid:6)x : prefs(q1 . . . qi, M)(cid:7).
Here, the operator prefs(q1 . . . qi, M) produces a set of se-
quences that can be obtained by removing a sequence of
honest processes from the end of q1 . . . qi:
prefs(q1 . . . qi, M) def= { q1 . . . qj | qj+1, . . . , qi /∈ M }.
The deﬁnition of prefs can be extended to sets of se-
quences A in the obvious way:
(cid:6)
α∈A
prefs(A, M) def=
prefs(α, M).
Since α ∈ prefs(α, M), we have A ⊆ prefs(A, M).
We can deﬁne infer(S, M) = ˆS, where (2)
for any x (cid:9)= ⊥.
ˆS(x) = prefs(S(x), M)
(5)
The case x = ⊥ requires a special treatment. The
state-propagation algorithm in Figure 6 shows that the event
(cid:6)⊥ : q1 . . . qi(cid:7) can occur for two reasons: either because of
process qi claiming that the event (cid:6)⊥ : q1 . . . qi−1(cid:7) occurred
at qi or because of the stop action. Since the latter reason is
always a possibility, the occurrence of (cid:6)⊥ : q1 . . . qi(cid:7) does
not imply the occurrence of (cid:6)⊥ : q1 . . . qi−1(cid:7) anywhere in
the system, even if qi is honest. Nothing can be inferred
here, so ˆS(⊥) = S(⊥), which completes (5).
Special sets. For any set Q of processes, deﬁne
αQ = { q1 . . . qi | qi ∈ Q} ∪ {ε},
αQ = { q1 . . . qi | qi /∈ Q}.
Set αQ contains all process sequences ending with an pro-
cess in Q, set αQ contains all others.
Consistency. A state is consistent only if all conﬂicting
inferred events come from malicious processes:
conﬂict(infer(S, M)) ⊆ αM.
(6)
Since (cid:6)x : ε(cid:7) ≡ propose(x), the reason for ε ∈ αM is that
different processes can propose different values.
3.5. Verifying Permanent Agreement
Permanent Agreement requires that, for any complete
state, predicate possible(z) holds for at most one z. This
section presents an algorithm that checks whether a given
OTC algorithm violates this property.
It searches for a
complete state in which possible(z) holds for two different
z ∈ {x, y}. More precisely, we are looking for sets F ∈ F
and M ∈ M, with M ⊆ F , and a state S such that
A1: State S can occur, that is, conﬂicting events come
only from malicious processes (6):
conﬂict(infer(S, M)) ⊆ αM.
A2: State S is complete, that is, the process received all
the events produced by all correct processes ( /∈ F )
in lines 10–12 and before:
αF ⊆
S(x).
(cid:6)
all x
including ⊥
In practice, I only consider sequences q1 . . . qi no
longer than the highest k in any required OT condi-
tion (X, C, k).
A3: Predicate possible(z) holds for two different z ∈
{x, y}. In other words, for each z ∈ {x, y}, decision
events (cid:6)z : Dz(cid:7) (3) are all consistent with state S.
Formally, there is Dz ∈ D (4) and a set of malicious
processes Mz ∈ M such that the combined state
S ∪ (cid:6)z : Dz(cid:7) is still consistent (6):
conﬂict(infer(S ∪ (cid:6)z : Dz(cid:7), Mz)) ⊆ αMz
Note that sets Mz (Mx and My) are only possible
sets of malicious processes, and can differ from the
real M, which is unknown to the processes.
Without loss of generality, assume that the state S con-
sists only of events of the form (cid:6)x : α(cid:7), (cid:6)y : α(cid:7), and (cid:6)⊥ : α(cid:7).
This is because all events (cid:6)u : α(cid:7) ∈ S with u /∈ {x, y,⊥}
can be replaced by (cid:6)⊥ : α(cid:7) without invalidating any of
A123 (replacing u with ⊥ means we can infer less (5)). For
this reason, I assume S = (cid:6)x : Sx(cid:7) ∪ (cid:6)y : Sy(cid:7) ∪ (cid:6)⊥ : S⊥(cid:7),
for some pairwise disjoint sets of sequences Sx, Sy, S⊥ (1).
Given this assumption, Properties A can be rewritten as
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007A1: State S is consistent:
prefs(Sx, M) ∩ prefs(Sy, M) ⊆ αM (a)
prefs(Sx, M) ∩ S⊥ ⊆ αM
prefs(Sy, M) ∩ S⊥ ⊆ αM
A ⊆ prefs(A, M) for all sets of sequences A, so the
ﬁrst inequality implies prefs(Sx, M) ∩ Sy ⊆ αM
and prefs(Sy, M) ∩ Sx ⊆ αM. Therefore, we can
rewrite the last two inequalities as:
prefs(Sx, M) ∩ (Sy ∪ S⊥) ⊆ αM,
prefs(Sy, M) ∩ (Sx ∪ S⊥) ⊆ αM.
This transformation is needed for (7) below.
A2: State S is complete: αF ⊆ Sx ∪ Sy ∪ S⊥.
A3: Predicate possible(z) holds for z ∈ {x, y}. Deﬁn-
ing ¯x def= y and ¯y def= x, and using the same transfor-
mations as in Property A1, we get:
(b)
(c)
prefs(Sx, Mz) ∩ prefs(Sy, Mz) ⊆ αMz
prefs(Sx, Mz) ∩ (Sy ∪ S⊥) ⊆ αMz
prefs(Sy, Mz) ∩ (Sx ∪ S⊥) ⊆ αMz
prefs(Dz, Mz) ∩ prefs(S¯z, Mz) ⊆ αMz
prefs(Dz, Mz) ∩ (S¯z ∪ S⊥) ⊆ αMz.
(a)
(b)
(c)
(d)
(e)
Property A2 is increasing with respect to Sx, Sy, S⊥; all
the other properties are decreasing. For this reason, we can
assume that αF = Sx∪ Sy ∪ S⊥, which makes Property A2
automatically satisﬁed. Then, for any set A:
A ∩ (S¯z ∪ S⊥) ⊆ αM ⇔
A ∩ αF ∩ Sz ∩ αM = ∅ ⇔
A ∩ αF ∩ αM ⊆ Sz.
Thus, Properties A1(bc) and A3(bce) can be rewritten as
prefs(Sz, M) ∩ αF ∩ αM ⊆ Sz,
prefs(Sz, Mx) ∩ αF ∩ αMx ⊆ Sz,
prefs(Sz, My) ∩ αF ∩ αMy ⊆ Sz,
prefs(Dz, Mz) ∩ αF ∩ αMz ⊆ Sz.
The left-hand side of each of these inequalities is an in-
creasing function of Sz. As a result, we can compute the
smallest set Sz that satisﬁes these inequalities using Tarski’s
least ﬁxed point algorithm (see below). Then, it is sufﬁcient
to check Properties A1(a) and A3(ad) for the computed Sz
(Sx and Sy), that is, whether
prefs(Sx, M) ∩ prefs(Sy, M) ⊆ αM,
prefs(Sx, Mx) ∩ prefs(Sy, Mx) ⊆ αMx,
prefs(Sx, My) ∩ prefs(Sy, My) ⊆ αMy,
prefs(Dz, Mz) ∩ prefs(S¯z, Mz) ⊆ αMz.
1
2
3
4
5
6
7
8
function PermanentAgreement(OTs) is
for all Dx, Dy corresponding to OTs (3) do
for all F ∈ F and M, Mx, My ∈ M do
if M ⊆ F then
compute the least ﬁxpoints Sx and Sy of (7)
if computed Sx and Sy satisfy (8) then
return FALSE
return TRUE
Figure 7. Testing Permanent Agreement
If this is the case, then we have found a state S for
which Permanent Agreement does not hold.
If not, then
the above statement will be false for all supersets of Sx and
Sy because function prefs is increasing. Testing all pos-
sible (Dx, Dy, F, M, Mx, My) can ensure that Permanent
Agreement is never violated (Figure 7).
Computing Sz as as the least ﬁxpoint.
can be rewritten as φ(Sz) ⊆ Sz, where
Inequalities (7)
φ(Sz) = prefs(Dx, Mx) ∩ αF ∩ αMx
prefs(Sz, M) ∩ αF ∩ αM
prefs(Sz, Mx) ∩ αF ∩ αMx
prefs(Sz, My) ∩ αF ∩ αMy.
∪
∪
∪
z
= φ(Si
z ⊆ S1
Function φ is increasing, which allows us to use Tarski’s
method [25] to ﬁnd the smallest Sz such that φ(Sz) ⊆ Sz.
z ⊆
This method constructs an increasing sequence S0
z = ∅ and Si+1
··· deﬁned as S0
z). The ﬁrst
Si
z = Si+1
z = φ(Si
z) encountered is the least ﬁxpoint of φ.
z ⊂ ··· ⊂ Si
In the sequence S0
z, each set has at least one ele-
ment more than its predecessor, so the number i of iterations
does not exceed the maximum size of Sz, that is the num-
ber of possible sequences q1 . . . qi with i ≤ k. This num-
ber, 1 + ··· + nk, is much smaller than the number of all
states S = (cid:6)x : Sx(cid:7)∪(cid:6)y : Sy(cid:7)∪(cid:6)⊥ : S⊥(cid:7), which is in the or-
der of 31+···+nk
. Therefore, exploiting monotonicity results
in an exponential speed-up of the search process.
4. Discovering new protocols
Section 3 showed how we can construct an OTC algo-
rithm satisfying given OT conditions, and test its correct-
ness. This section goes a step further and attempts to dis-
cover new algorithms by generating possible sets T of OT
conditions and testing whether they can be satisﬁed. The
search starts with the empty T and recursively adds new
OT conditions, while testing for correctness. Note that once
we reach an incorrect T , we can safely backtrack because
(7)
(8)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:25 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007function OTCSearch(T ) is
if PermValidity(T ) and PermAgreement(T ) then
output T
for all possible OT conditions T = (X, C, k) do
if T is greater (“>OT”) than all elements of T and
T does not dominate any element of T and
T is not dominated by any element of T then
OTCSearch(T ∪ {T})
1
2
3
4
5
6
7
8
Figure 8. Discovering new OTC protocols
adding new OT conditions to an incorrect OTC algorithm T
cannot produce a correct one. The details are shown in Fig-
ure 8. Lines 5–7 implement two optimization techniques
described below: a linear order and a domination relation.
OT order. The order of the OT conditions in T does not
matter. Therefore, adding OTs to T in a speciﬁc order will
result in the same set of conditions being analyzed several
times; an n-element set can be obtained in n! different or-
ders, slowing the algorithm down exponentially.
To ensure that each set T is analyzed only once, Line 5
guarantees that elements are added to T in some arbitrary
but ﬁxed total order “<OT” on OT conditions.
OT domination. OT condition T1 = (X1, C1, k1) domi-
nates T2 = (X2, C2, k2) if it provides a stronger guarantee
with weaker requirements, that is, if
X1 ⊆ X2 ∧ C1 ⊆ C2 ∧ k1 ≤ k2.
If this is the case, then the OTC algorithms correspond-
ing to the sets T1 = {T1} and T12 = {T1, T2} are the same.
Lines 6–7 prevent us from analyzing sets T that contain a
pair of conditions such that one dominates the other.
5. Results
I have implemented the algorithms from Figures 7 and 8
in C, and then veriﬁed the computed OTC algorithms using
an independent Python implementation of the algorithm in
Figure 7. This section presents computed algorithms for
several choices of P , F, and M. While the veriﬁcation is
instantaneous, the search for new algorithms takes time:
OTC
propose(x)
OTC
decide(x)
p1
p2
p3
p4
OTC
Figure 9. Direct ﬁrst-round OTC