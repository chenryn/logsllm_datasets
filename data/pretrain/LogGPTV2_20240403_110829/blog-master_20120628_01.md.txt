## PostgreSQL plpgsql_check_function 插件 - plpgsql函数体内容CHECK, 依赖关系, plpgsql profiler  
### 作者                              
digoal                              
### 日期                              
2012-06-28                         
### 标签                              
PostgreSQL , plpgsql , 函数体内容检查 , 依赖对象 , 函数内性能 , plpgsql profiler   
----                              
## 背景   
PostgreSQL的plpgsql存储过程语言是解释性语言，支持语法型的CHECK但是无法发现一些运行时才可能触发的报错，比如表不存在等报错。当然这种报错实际上也不应该PLPGSQL来做，不过我们现在有plpgsql check extension来帮助发现这些问题了。  
又比如我们需要检查PLPGSQL函数依赖哪些对象（表、视图、其他函数等）。分析函数内部的调用性能profiler等。   
```  
postgres=# create or replace function f(int) returns void as $$  
declare  
begin  
  if $1 =1 then
    perform 1 from t12333333;  
  else
    perform 1 from test;
  end if;
end;  
$$ language plpgsql strict;  
CREATE FUNCTION  
postgres=# \d t12333333  
Did not find any relation named "t12333333".  
```  
例如以上函数，t12333333表实际上是不存在的，但是创建plpgsql时可以通过。而且在某些查询下也不会报错，只有输入某些条件时才会报错。     
通过plpgsql_check可以发现类似的问题。   
```
postgres=# create extension plpgsql_check;
CREATE EXTENSION
postgres=# select * from plpgsql_check_function_tb('f(int)');
 functionid | lineno | statement | sqlstate |               message               | detail | hint | level | position |          query          | context 
------------+--------+-----------+----------+-------------------------------------+--------+------+-------+----------+-------------------------+---------
 public.f   |      5 | PERFORM   | 42P01    | relation "t12333333" does not exist |        |      | error |       15 | SELECT 1 from t12333333 | 
(1 row)
```
plpgsql_check插件还有更多的功能，主动检查、被动检查等等，具体请参考plpgsql_check的手册。   
https://pgxn.org/dist/plpgsql_check/  
https://github.com/okbob/plpgsql_check  
## old content
早上看到一篇关于PostgreSQL plpgsql函数检查的文章, 说的是PostgreSQL函数关于变量这块, 在创建时不会检查变量的模糊定义, 如表中和函数中定义了同名的变量, 在定义函数时不会报错, 但是在使用中如果出现模糊概念了, 将或报错.  
PostgreSQL 9.3 将会引入一个plpgsql_check_function函数, 用来检测诸如此类的错误.  
实际上还没有引入到主分支，但是这个插件可以在PGXN或GITHUB下载。  
https://pgxn.org/dist/plpgsql_check/  
https://github.com/okbob/plpgsql_check  
请以安装插件的形式安装，下面的例子是未合并的PATCH，不要使用，可以参考用法和效果。  
## 例子  
下面来以9.2的源码为例子, 打上这个补丁  
1\. 首先下载PostgreSQL 9.2的源码, 以及补丁  
```  
wget http://ftp.postgresql.org/pub/source/v9.2.0beta2/postgresql-9.2beta2.tar.bz2  
wget http://archives.postgresql.org/pgsql-hackers/2012-06/binooyMWTCfxi.bin  
```  
2\. 打上补丁  
```  
# tar -jxvf postgresql-9.2beta2.tar.bz2  
# cd postgresql-9.2beta2  
# patch -p1  10 then
4           raise notice 'ahoj';
5           return -1;
6         else
7           raise notice 'nazdar';
8           return 1;
9         end if;
10      end;
11      $function$
postgres=# select stmtid, parent_stmtid, parent_note, lineno, exec_stmts, stmtname
             from plpgsql_profiler_function_statements_tb('fx1');
┌────────┬───────────────┬─────────────┬────────┬────────────┬─────────────────┐
│ stmtid │ parent_stmtid │ parent_note │ lineno │ exec_stmts │    stmtname     │
╞════════╪═══════════════╪═════════════╪════════╪════════════╪═════════════════╡
│      0 │             ∅ │ ∅           │      2 │          0 │ statement block │
│      1 │             0 │ body        │      3 │          0 │ IF              │
│      2 │             1 │ then body   │      4 │          0 │ RAISE           │
│      3 │             1 │ then body   │      5 │          0 │ RETURN          │
│      4 │             1 │ else body   │      7 │          0 │ RAISE           │
│      5 │             1 │ else body   │      8 │          0 │ RETURN          │
└────────┴───────────────┴─────────────┴────────┴────────────┴─────────────────┘
(6 rows)
There are two functions for cleaning stored profiles: plpgsql_profiler_reset_all() and plpgsql_profiler_reset(regprocedure).
```
## 参考  
https://pgxn.org/dist/plpgsql_check/  
https://github.com/okbob/plpgsql_check  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")