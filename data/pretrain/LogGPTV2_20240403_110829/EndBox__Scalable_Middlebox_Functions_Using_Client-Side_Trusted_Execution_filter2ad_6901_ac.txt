handling private matters using company networks either way.
In the ISP scenario, we assume customers opt-in for trafﬁc
analysis by the ISP to improve security, i.e. they are aware of
it and consent.
E. Conﬁguration updates
To improve manageability (R4), ENDBOX supports updates of
Click conﬁguration ﬁles at runtime. Network administrators
can deﬁne the importance of updates by specifying a grace
period of n ≥ 0 seconds. During the grace period, the ENDBOX
server allows both old and new conﬁgurations to be active.
After its expiry, the server blocks trafﬁc from clients that are
not applying the new conﬁguration.
We use in-band ping messages from OpenVPN to notify
ENDBOX clients about conﬁguration updates and to enforce
them. These ping messages are sent periodically by both the
VPN client and the server to keep the connection alive. We
extend the message format with two extra ﬁelds: the version
number of the latest conﬁguration ﬁle and its grace period. To
prevent malicious clients from sending crafted ping messages,
the authenticity of all packets is validated inside the enclave.
The CA’s public key and the pre-shared key (see §III-C) are
used to sign and optionally encrypt conﬁguration ﬁles to, for
example, hide IDPS rules from employees in the enterprise
scenario. In the ISP scenario, the conﬁguration ﬁles are not
encrypted to allow customers to inspect rules. The ﬁles are
stored on a trusted server located in the managed network that
is publicly accessible to ensure that clients can always obtain
up-to-date conﬁgurations before connecting. When network
administrators create an updated conﬁguration ﬁle, they sign
and optionally encrypt it, upload it to the conﬁguration server,
and instruct the VPN server to send out a ping message with
the new version number. When the ENDBOX client notices that
a new conﬁguration ﬁle is available, it fetches the conﬁguration
ﬁle, decrypts it inside the enclave and applies it. To prevent
clients from replaying old conﬁguration ﬁles, the version
number of the update is incorporated inside the update itself.
Version numbers increase monotonically with each update.
EndBox 
Client
Enclave
8
5
Client 
Machine
7
4
9
6
EndBox
Server
3
Conﬁg 
File 
Server
2
1
Admin
Fig. 5: Updating conﬁguration ﬁles within ENDBOX
conﬁguration server 1(cid:2) and triggers a conﬁguration update at
the ENDBOX VPN server 2(cid:2). The VPN server starts a timer
that, when expired, blocks clients with old conﬁgurations 3(cid:2).
With the next periodic ping message, the VPN server sends the
new version number to all clients 4(cid:2). When a client receives
a ping message, it checks whether an update is necessary 5(cid:2).
If this is the case, it fetches the new conﬁguration from the
conﬁguration server 6(cid:2)- 7(cid:2), decrypts it, and replaces its current
conﬁguration 8(cid:2). Finally, the client sends a ping message with
the new version number to prove its successful update 9(cid:2).
IV. IMPLEMENTATION
The implementation of ENDBOX is based on Open-
VPN v2.4.0 [8], the Intel SGX SDK v1.9 [36], the TaLoS library
for terminating TLS connections inside SGX enclaves [37],
and the latest version of the Click software router [9]. We
use OpenVPN as the basis for the ENDBOX client because it
(i) is open-source; (ii) has relatively few dependencies; (iii) is
implemented in user-space; and (iv) is widely used. This allows
us to port parts of its implementation to an SGX enclave,
especially given that OpenVPN is entirely executed in user-
space. TaLoS is based on LibreSSL and acts as a drop-in
replacement running in SGX enclaves for existing applications.
ENDBOX uses the Intel SGX SDK to deﬁne ecalls and ocalls
as well as to handle the life cycle of the enclave. In addition,
it uses the SDK’s trusted (but functionally limited) C library
implementation and extends it with further functions used
by OpenVPN and Click. The ENDBOX implementation also
utilises the SDK support for trusted time in order to implement
trafﬁc shaping (see §V-B). Additionally, the SDK offers a
simulation mode that allows the execution of SGX applications
on unsupported hardware without security guarantees but
similar runtime behaviour.
ENDBOX relies on Click to implement middlebox functions.
To conﬁgure Click, so-called elements are interconnected. An
element can fetch packets from or forward packets to other
elements, and process packets. We choose Click because it
(i) is widely used; (ii) has many existing elements to realise
various middlebox functions; (iii) provides a conﬁguration hot-
swapping mechanism; and (iv) is easily extensible. ENDBOX
uses Click’s conﬁguration hot-swapping mechanism to efﬁ-
ciently update the middlebox conﬁguration. It uses elements
shipped with Click to implement middlebox functions and
extends Click by adding custom elements for an IDPS function,
to decrypt application-level trafﬁc, and to perform trafﬁc
shaping using a trusted time source provided by SGX.
Changes to Click and OpenVPN. ENDBOX requires minor
changes to Click: (i) the ToDevice element is modiﬁed to signal
OpenVPN when a packet was accepted or rejected. There are
The whole update process is shown in Fig. 5. To start it,
the network administrator uploads the conﬁguration ﬁle to the
391
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:18 UTC from IEEE Xplore.  Restrictions apply. 
also changes to Click core: (ii) we disable signal handling
for state clean-up and control sockets for communication with
speciﬁc elements, as signals are not supported inside enclaves;
and (iii) we adapt the hot-swapping mechanism to work with
conﬁguration ﬁles stored in memory. OpenVPN is linked
against the TaLoS library, which results in all cryptographic
operations being executed inside the enclave. Additionally, we
compile Click as a library and link it against the enclave code
to allow fast interaction.
TCB size. The total number of lines of code (LOC) within the
enclave is an important factor for the TCB size. The trusted
part of ENDBOX comprises 320 kLOC: 219 kLOC for TaLoS,
80 kLOC for Click, 20 kLOC for the SGX SDK, and 1 kLOC
for the sensitive parts of OpenVPN. The number of lines of
code for TaLoS should be regarded as an upper bound: while
TaLoS provides the same API and functionalities as LibreSSL,
ENDBOX only uses a small subset.
A. Optimisations
ENDBOX implements several optimisations to improve its
performance and security: (i) reduce the number of enclave
transitions; (ii) enable use case speciﬁc trafﬁc protection; and
(iii) optimise client-to-client communication. These optimisa-
tions are detailed in the following and evaluated in §V-G.
Enclave transitions. The performance of SGX enclaves is neg-
atively impacted by transitions between trusted and untrusted
code. Previous work [23], [26] has shown that an enclave
transition is more costly than a system call. To reduce this cost,
ENDBOX shifts parts of the OpenVPN encryption logic into
the enclave to reduce the number of enclave transitions per
processed packet: ENDBOX performs only one ecall per sent
or received packet. As described in §V-G, this optimisation
drastically improves the overall throughput of ENDBOX.
Scenario-speciﬁc trafﬁc protection. Depending on the sce-
nario in which ENDBOX is used, weaker trafﬁc protection can
be applied. In the ISP scenario, AES-128-CBC packet encryption
is optional, because the trust relationship is different from the
enterprise use case: users decided to let the ISP apply ENDBOX,
therefore the fact that trafﬁc is routed through Click does not
have to be enforced by encrypting it. However, the fact that
egress trafﬁc is analysed by Click needs to be ensured by the
ISP by applying integrity protection. This optimisation only
targets the ISP scenario and improves the overall throughput
of ENDBOX, as described in §V-G.
Client-to-client communication. In the case of client-to-
client connections, our approach would lead to packets being
processed multiple times, once on every client. This is not
reasonable for most use cases, for example IDPSs. Therefore,
ENDBOX clients ﬂag outgoing packets after they have been
processed by Click, enabling other ENDBOX clients to bypass
Click. We implemented the ﬂagging mechanism by setting the
Quality of Service (QoS) byte in the IP header to 0xeb. In order
to prevent external attackers from sending IP packets containing
this byte, the ENDBOX server removes the QoS byte if it is
set to 0xeb. Finally, as all packets are integrity-protected by
OpenVPN, ﬂagged packets cannot be forged. This optimisation
rather targets the enterprise scenario, but can also be applied to
the ISP network and improves the latency between ENDBOX
clients, as described in §V-G.
B. Secure Enclave Interface
The enclave interface of ENDBOX consists of 90 calls: 70
ecalls and 20 ocalls. Most of the ecalls are called only during
initialisation of OpenVPN and Click. ENDBOX deﬁnes only
4 ecalls that are executed during normal operation: (i) packet
en- and decryption; and (ii) message authentication code
(MAC) generation and veriﬁcation. While (i) are triggered
by normal trafﬁc, (ii) are used for integrity protection of the
OpenVPN control channel. With the exception of the ENDBOX-
speciﬁc en- and decryption and Click initialisation ecalls, all
ecalls match the TaLos/LibreSSL library calls, which perform
security checks. The ocalls perform different tasks, among
them managing untrusted memory and accessing (encrypted)
conﬁguration ﬁles. Note that they could be omitted by using
in-enclave conﬁguration ﬁles and exitless enclave services [38].
To ensure a secure interface, we closely examined all ecalls
and ocalls and augmented them with sanity checks on input
(resp. return) values of ecalls (resp. ocalls), and bound checking
of pointers either passed to ecalls or returned from ocalls to
guarantee that they point to enclave memory.
V. EVALUATION
We evaluate the security and performance of ENDBOX by
discussing different attacks on ENDBOX and performing
different measurements. Our results show that: (i) ENDBOX
is secure against a wide range of attacks (§V-A); (ii) it only
affects network latency in a minimal way (§V-C); (iii) it induces
an acceptable best-case performance overhead of 16% (§V-D);
(iv) it scales linearly with the number of clients; (v) clients
can achieve a 2.6×–3.8× higher throughput than a traditional
centralised middlebox (§V-E); (vi) our runtime reconﬁguration
mechanism has a 30% lower latency than the original Click
implementation (§V-F); and lastly, (vii) our optimisations
described in §IV-A actually improve ENDBOX’s impact on
latency or throughput (§V-G).
A. Security evaluation
Following an exhaustive evaluation of our threat model, we
discuss typical attacks against ENDBOX and state how it can
defend against these or why they are not applicable.
Bypassing middlebox functions. A malicious client may try
to access the network without using ENDBOX. We assume
that the network is guarded by a static ﬁrewall limiting trafﬁc
to VPN usage: without a properly conﬁgured ENDBOX client
establishing a valid VPN connection, it is not possible for an
attacker to send valid trafﬁc that would bypass the middlebox
functions in ENDBOX. Instead, the trafﬁc will be dropped by
the ﬁrewall. For incoming trafﬁc, clients are indirectly forced
to route their trafﬁc through the ENDBOX client if they want to
access the encrypted payload. ENDBOX ensures the authenticity
of connections using remote attestation (§III-C).
Using old or invalid middlebox conﬁgurations. An attacker
may rollback conﬁguration updates, or use unauthorised
conﬁgurations. Once an adjustable grace period for an update
392
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:18 UTC from IEEE Xplore.  Restrictions apply. 
has passed, the server only accepts ENDBOX clients that use
the currently valid conﬁguration, as described in §III-E. The
ENDBOX client and server periodically exchange ping messages
containing conﬁguration information to prevent clients from
using stale conﬁgurations.
Replaying trafﬁc. If a malicious client replays trafﬁc, e.g. in
order to establish a connection without a genuine enclave, the
ENDBOX server detects this, due to OpenVPN’s implementa-
tion of packet replay protection.
Denial-of-service attacks. Malicious clients can prevent en-
claves from starting or being entered, as the enclave life
cycle is managed by untrusted code. However, this would
result in the inability of the client to communicate with the
network. In contrast, a denial-of-service attack on the ENDBOX
server would have the same effect as a traditional centralised
middlebox deployment, thus, the attack can be mitigated using
classical techniques [32].
Downgrade attacks. Attackers could try to force the usage
of a weaker TLS version or cipher. However, OpenVPN
implements server-side checks that ensure the minimal TLS
version to be used. On the client-side, the corresponding check
happens within the enclave during connection establishment
and therefore cannot be circumvented.
Interface attacks. A client may try to break into the enclave
by manipulating the parameters at the enclave interface similar
to Iago attacks [39]. To mitigate such attacks, every ecall and
ocall has been augmented with checks on input parameters
and return values (see §IV-B). In addition, ENDBOX exposes
a limited interface with a restricted attack surface.
Failure of a middlebox. If a middlebox fails, only the client
running this middlebox is impacted; other clients and the
managed network remain unaffected. This differs from the
behaviour of traditional centralised middlebox set-ups in which
a failure would affect many clients or even whole networks. In
contrast, the failure of the ENDBOX server managing all VPN
connections is equivalent to a failure of traditional centralised
middleboxes, resulting in network outages.
B. Experimental set-up and use cases
We evaluate the performance of ENDBOX on a cluster of
seven machines of two classes. Class A(cid:2) consists of ﬁve
machines, equipped with SGX-capable 4-core Xeon v5 CPUs
with 32 GB of memory, while class B(cid:2) are two machines
with non-SGX 4-core Xeon v2 CPUs and 16 GB of memory.
All machines are conﬁgured with hyper-threading and are
connected to a 10 Gbps switch via two 10 Gbps network
interfaces per machine. The maximum transmission unit (MTU)
of the network links is conﬁgured to 9000 bytes. We conduct
the throughput measurements using iperf, while for latency
measurements we rely on ICMP pings. Throughout this section,
we evaluate multiple set-ups,
including these reoccurring
ones: (i) vanilla OpenVPN, an unmodiﬁed OpenVPN v2.4.0;
(ii) OpenVPN+Click, the same OpenVPN version, but trafﬁc
is processed by server-side Click instances; (iii) ENDBOX
in simulation mode to show the overhead of partitioning the
VPN client; and (iv) ENDBOX in hardware mode to show the
overhead of using SGX instructions. Throughout this section,
we report average values of 10 consecutive runs; the variance
of results is omitted if the reported error is negligible.
In the following, we describe ﬁve middlebox functions we
implemented for the evaluation. They are either based on
standard or custom Click elements.
Forwarding (NOP). The ﬁrst middlebox function we consider
provides a baseline for our measurements. It forwards packets
without accessing or modifying any headers or payloads.
Load balancing (LB). The RoundRobinSwitch Click element
allows us to balance IP packets or TCP ﬂows across several
machines, thus balancing load.
IP ﬁrewall (FW). A ﬁrewall accesses packet headers and con-
trols trafﬁc based on a set of rules. We use the IPFilter Click
element without any code modiﬁcations. For our evaluation
we use a set of 16 rules that do not match any packet.
Intrusion detection and prevention system (IDPS). An IDPS
monitors network trafﬁc for unauthorised accesses and policy
violations. We support Snort [40] rule sets and execute its string
matching algorithm [41] using a library from [42]. The IDPS
is implemented as a custom Click element called IDSMatcher.
For the evaluation, we use a subset of 377 rules of the Snort
community rule set. Again, the rules do not match packets
generated for our evaluation.
DDoS prevention (DDoS). Distributed denial-of-service attacks
can generally be mitigated by throttling or dropping packets that
occur repeatedly or if source address spooﬁng is detected. We
implement this middlebox function by rate limiting identical
packets using our custom Click elements IDSMatcher and
TrustedSplitter. The latter allows the shaping of trafﬁc to a
given bandwidth in a trusted way: to reduce expensive calls to
obtain trusted time, the TrustedSplitter samples timestamps
by issuing calls after a certain conﬁgurable number of packets
has been processed. This number is set to 500,000 for our
measurements. For OpenVPN+Click, we use a similar Click
element called UntrustedSplitter which obtains timestamps
using system calls. This use case is well-suited for the ISP
scenario, as it enables the provider to detect malware or bot
nets directly on client-side.
C. Latency
In the following, we evaluate the latency impact of ENDBOX,
as this has a notable inﬂuence on user experience. We
use the forwarding middlebox function (NOP) and perform
local experiments using class A(cid:2) machines. For cloud-based
measurements, we rely on Amazon Web Services (AWS)
Elastic Compute Cloud (EC2) and use m3.medium instances
with 1 virtual CPU and 3.75 GB RAM in different regions.
HTTP request handling. ENDBOX’s impact on latency can
be observed in Fig. 6, which plots the cumulative distribution
function (CDF) for HTTP page load times of 1,000 popular
websites provided by Alexa [43]. Results show that the time
needed to load these websites is very similar when using
393
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:31:18 UTC from IEEE Xplore.  Restrictions apply. 
n
o
i
t
c
a
r
F
1
0.8
0.6
0.4
0.2
0
Through EndBox
Direct connection
0
5
10
15
20
Page load time [s]
Fig. 6: CDF of HTTP page load times for Alexa top 1,000
sites with and without ENDBOX