### Handling Private Matters Using Company Networks

Handling private matters using company networks is generally discouraged. In the context of an Internet Service Provider (ISP) scenario, we assume that customers have opted-in for traffic analysis by the ISP to enhance security. This means they are fully aware and have consented to this practice.

### Configuration Updates

To improve manageability (Requirement R4), ENDBOX supports real-time updates of Click configuration files. Network administrators can define the importance of updates by specifying a grace period of \( n \geq 0 \) seconds. During this grace period, both the old and new configurations can be active. After the grace period expires, the ENDBOX server will block traffic from clients that have not applied the new configuration.

We use in-band ping messages from OpenVPN to notify ENDBOX clients about configuration updates and enforce them. These ping messages are periodically sent by both the VPN client and the server to maintain the connection. We extend the message format with two additional fields: the version number of the latest configuration file and its grace period. To prevent malicious clients from sending crafted ping messages, the authenticity of all packets is validated inside the enclave using the CA’s public key and the pre-shared key (see §III-C).

Configuration files can be signed and optionally encrypted. In the enterprise scenario, encryption is used to hide IDPS rules from employees. In the ISP scenario, the configuration files are not encrypted, allowing customers to inspect the rules. The files are stored on a trusted server within the managed network, which is publicly accessible to ensure clients can always obtain the most up-to-date configurations before connecting.

When network administrators create an updated configuration file, they sign and optionally encrypt it, upload it to the configuration server, and instruct the VPN server to send out a ping message with the new version number. When the ENDBOX client detects a new configuration file, it fetches the file, decrypts it inside the enclave, and applies it. To prevent clients from replaying old configuration files, the version number of the update is incorporated into the update itself. Version numbers increase monotonically with each update.

### Update Process

The entire update process is illustrated in Figure 5. The administrator uploads the configuration file to the configuration server (Step 1) and triggers a configuration update at the ENDBOX VPN server (Step 2). The VPN server starts a timer that, when expired, blocks clients with old configurations (Step 3). With the next periodic ping message, the VPN server sends the new version number to all clients (Step 4). When a client receives a ping message, it checks whether an update is necessary (Step 5). If an update is needed, the client fetches the new configuration from the configuration server (Steps 6-7), decrypts it, and replaces its current configuration (Step 8). Finally, the client sends a ping message with the new version number to confirm the successful update (Step 9).

### Implementation

ENDBOX is implemented based on OpenVPN v2.4.0 [8], the Intel SGX SDK v1.9 [36], the TaLoS library for terminating TLS connections inside SGX enclaves [37], and the latest version of the Click software router [9]. OpenVPN is chosen as the basis for the ENDBOX client because it is open-source, has relatively few dependencies, is implemented in user-space, and is widely used. This allows us to port parts of its implementation to an SGX enclave, especially since OpenVPN is entirely executed in user-space.

TaLoS, based on LibreSSL, acts as a drop-in replacement running in SGX enclaves for existing applications. ENDBOX uses the Intel SGX SDK to define ecalls and ocalls and to handle the lifecycle of the enclave. It also uses the SDK’s trusted (but functionally limited) C library implementation and extends it with further functions used by OpenVPN and Click. The ENDBOX implementation utilizes the SDK support for trusted time to implement traffic shaping (see §V-B). Additionally, the SDK offers a simulation mode that allows the execution of SGX applications on unsupported hardware without security guarantees but with similar runtime behavior.

ENDBOX relies on Click to implement middlebox functions. To configure Click, so-called elements are interconnected. An element can fetch packets from or forward packets to other elements and process packets. We choose Click because it is widely used, has many existing elements to realize various middlebox functions, provides a configuration hot-swapping mechanism, and is easily extensible. ENDBOX uses Click’s configuration hot-swapping mechanism to efficiently update the middlebox configuration. It uses elements shipped with Click to implement middlebox functions and extends Click by adding custom elements for an IDPS function, to decrypt application-level traffic, and to perform traffic shaping using a trusted time source provided by SGX.

### Changes to Click and OpenVPN

ENDBOX requires minor changes to Click:
1. The ToDevice element is modified to signal OpenVPN when a packet was accepted or rejected.
2. Signal handling for state cleanup and control sockets for communication with specific elements is disabled, as signals are not supported inside enclaves.
3. The hot-swapping mechanism is adapted to work with configuration files stored in memory.

OpenVPN is linked against the TaLoS library, resulting in all cryptographic operations being executed inside the enclave. Additionally, Click is compiled as a library and linked against the enclave code to allow fast interaction.

### Trusted Computing Base (TCB) Size

The total number of lines of code (LOC) within the enclave is an important factor for the TCB size. The trusted part of ENDBOX comprises 320 kLOC: 219 kLOC for TaLoS, 80 kLOC for Click, 20 kLOC for the SGX SDK, and 1 kLOC for the sensitive parts of OpenVPN. The number of lines of code for TaLoS should be regarded as an upper bound, as ENDBOX only uses a small subset of its functionalities.

### Optimizations

ENDBOX implements several optimizations to improve performance and security:
1. **Reduce Enclave Transitions**: The performance of SGX enclaves is negatively impacted by transitions between trusted and untrusted code. ENDBOX shifts parts of the OpenVPN encryption logic into the enclave to reduce the number of enclave transitions per processed packet, performing only one ecall per sent or received packet.
2. **Scenario-Specific Traffic Protection**: Depending on the scenario, weaker traffic protection can be applied. In the ISP scenario, AES-128-CBC packet encryption is optional because the trust relationship is different from the enterprise use case. However, integrity protection is still applied to ensure egress traffic is analyzed by Click.
3. **Client-to-Client Communication**: For client-to-client connections, ENDBOX clients flag outgoing packets after they have been processed by Click, enabling other ENDBOX clients to bypass Click. This optimization targets the enterprise scenario but can also be applied to the ISP network and improves the latency between ENDBOX clients.

### Secure Enclave Interface

The enclave interface of ENDBOX consists of 90 calls: 70 ecalls and 20 ocalls. Most of the ecalls are called only during initialization of OpenVPN and Click. ENDBOX defines only 4 ecalls that are executed during normal operation: packet en- and decryption, and message authentication code (MAC) generation and verification. All ecalls match the TaLoS/LibreSSL library calls, which perform security checks. The ocalls perform tasks such as managing untrusted memory and accessing (encrypted) configuration files. To ensure a secure interface, all ecalls and ocalls are augmented with sanity checks on input (resp. return) values and pointer bounds checking.

### Evaluation

We evaluate the security and performance of ENDBOX by discussing different attacks and performing various measurements. Our results show that:
1. ENDBOX is secure against a wide range of attacks (§V-A).
2. It only affects network latency minimally (§V-C).
3. It induces an acceptable best-case performance overhead of 16% (§V-D).
4. It scales linearly with the number of clients.
5. Clients can achieve a 2.6×–3.8× higher throughput than a traditional centralized middlebox (§V-E).
6. Our runtime reconfiguration mechanism has a 30% lower latency than the original Click implementation (§V-F).
7. Our optimizations described in §IV-A actually improve ENDBOX’s impact on latency or throughput (§V-G).

### Security Evaluation

Following an exhaustive evaluation of our threat model, we discuss typical attacks against ENDBOX and state how it can defend against these or why they are not applicable:
1. **Bypassing Middlebox Functions**: A malicious client may try to access the network without using ENDBOX. We assume the network is guarded by a static firewall limiting traffic to VPN usage. Without a properly configured ENDBOX client, valid traffic cannot bypass the middlebox functions.
2. **Using Old or Invalid Middlebox Configurations**: An attacker may roll back configuration updates or use unauthorized configurations. Once the grace period for an update has passed, the server only accepts ENDBOX clients that use the currently valid configuration.
3. **Replaying Traffic**: If a malicious client replays traffic, the ENDBOX server detects this due to OpenVPN’s implementation of packet replay protection.
4. **Denial-of-Service Attacks**: Malicious clients can prevent enclaves from starting or being entered, but this would result in the inability of the client to communicate with the network. Denial-of-service attacks on the ENDBOX server can be mitigated using classical techniques.
5. **Downgrade Attacks**: Attackers could try to force the usage of a weaker TLS version or cipher. However, OpenVPN implements server-side checks that ensure the minimal TLS version is used.
6. **Interface Attacks**: A client may try to break into the enclave by manipulating the parameters at the enclave interface. To mitigate such attacks, every ecall and ocall is augmented with checks on input parameters and return values.
7. **Failure of a Middlebox**: If a middlebox fails, only the client running this middlebox is impacted; other clients and the managed network remain unaffected. In contrast, the failure of the ENDBOX server managing all VPN connections is equivalent to a failure of traditional centralized middleboxes, resulting in network outages.

### Experimental Setup and Use Cases

We evaluate the performance of ENDBOX on a cluster of seven machines of two classes. Class A consists of five machines equipped with SGX-capable 4-core Xeon v5 CPUs with 32 GB of memory, while class B consists of two machines with non-SGX 4-core Xeon v2 CPUs and 16 GB of memory. All machines are configured with hyper-threading and are connected to a 10 Gbps switch via two 10 Gbps network interfaces per machine. The maximum transmission unit (MTU) of the network links is configured to 9000 bytes. We conduct throughput measurements using iperf and latency measurements using ICMP pings. Throughout this section, we evaluate multiple setups, including:
1. **Vanilla OpenVPN**: An unmodified OpenVPN v2.4.0.
2. **OpenVPN+Click**: The same OpenVPN version, but traffic is processed by server-side Click instances.
3. **ENDBOX in Simulation Mode**: To show the overhead of partitioning the VPN client.
4. **ENDBOX in Hardware Mode**: To show the overhead of using SGX instructions.

We report average values of 10 consecutive runs, omitting the variance if the reported error is negligible.

### Middlebox Functions

We describe five middlebox functions implemented for the evaluation:
1. **Forwarding (NOP)**: Forwards packets without accessing or modifying any headers or payloads.
2. **Load Balancing (LB)**: Uses the RoundRobinSwitch Click element to balance IP packets or TCP flows across several machines.
3. **IP Firewall (FW)**: Uses the IPFilter Click element to control traffic based on a set of rules.
4. **Intrusion Detection and Prevention System (IDPS)**: Monitors network traffic for unauthorized accesses and policy violations using Snort rule sets and a custom Click element called IDSMatcher.
5. **DDoS Prevention (DDoS)**: Mitigates distributed denial-of-service attacks by rate limiting identical packets using custom Click elements IDSMatcher and TrustedSplitter.

### Latency

We evaluate the latency impact of ENDBOX, as it significantly influences user experience. We use the forwarding middlebox function (NOP) and perform local experiments using class A machines. For cloud-based measurements, we rely on Amazon Web Services (AWS) Elastic Compute Cloud (EC2) and use m3.medium instances with 1 virtual CPU and 3.75 GB RAM in different regions.

**HTTP Request Handling**: The impact of ENDBOX on latency is shown in Figure 6, which plots the cumulative distribution function (CDF) for HTTP page load times of 1,000 popular websites provided by Alexa [43]. Results show that the time needed to load these websites is very similar when using ENDBOX compared to a direct connection.

![CDF of HTTP Page Load Times](path_to_image)

This figure demonstrates that ENDBOX does not significantly affect the loading times of web pages, ensuring a seamless user experience.