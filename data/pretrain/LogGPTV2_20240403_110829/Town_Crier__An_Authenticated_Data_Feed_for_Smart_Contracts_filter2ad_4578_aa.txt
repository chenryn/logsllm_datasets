title:Town Crier: An Authenticated Data Feed for Smart Contracts
author:Fan Zhang and
Ethan Cecchetti and
Kyle Croman and
Ari Juels and
Elaine Shi
An Authenticated Data Feed for Smart Contracts
Town Crier:
Fan Zhang
Cornell University
IC3†
Ethan Cecchetti
Cornell University
IC3†
Kyle Croman
Cornell University
IC3†
PI:EMAIL
PI:EMAIL
PI:EMAIL
Ari Juels
IC3†
Cornell Tech, Jacobs Institute
PI:EMAIL
Elaine Shi
Cornell University
IC3†
PI:EMAIL
†Initiative for CryptoCurrencies and Contracts
ABSTRACT
Smart contracts are programs that execute autonomously
on blockchains. Their key envisioned uses (e.g. ﬁnancial
instruments) require them to consume data from outside the
blockchain (e.g. stock quotes). Trustworthy data feeds that
support a broad range of data requests will thus be critical
to smart contract ecosystems.
We present an authenticated data feed system called Town
Crier (TC). TC acts as a bridge between smart contracts and
existing web sites, which are already commonly trusted for
non-blockchain applications. It combines a blockchain front
end with a trusted hardware back end to scrape HTTPS-
enabled websites and serve source-authenticated data to re-
lying smart contracts.
TC also supports conﬁdentiality. It enables private data
requests with encrypted parameters. Additionally, in a gen-
eralization that executes smart-contract logic within TC,
the system permits secure use of user credentials to scrape
access-controlled online data sources.
We describe TC’s design principles and architecture and
report on an implementation that uses Intel’s recently in-
troduced Software Guard Extensions (SGX) to furnish data
to the Ethereum smart contract system. We formally model
TC and deﬁne and prove its basic security properties in the
Universal Composibility (UC) framework. Our results in-
clude deﬁnitions and techniques of general interest relating
to resource consumption (Ethereum’s “gas” fee system) and
TCB minimization. We also report on experiments with
three example applications.
We plan to launch TC soon as an online public service.
Keywords: Authenticated Data Feeds; Smart Contracts;
Trusted Hardware; Intel SGX; Ethereum; Bitcoin
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24-28, 2016, Vienna, Austria
© 2016 ACM. ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978326
1.
INTRODUCTION
Smart contracts are computer programs that autonomously
execute the terms of a contract. For decades they have been
envisioned as a way to render legal agreements more precise,
pervasive, and eﬃciently executable. Szabo, who popular-
ized the term “smart contact” in a seminal 1994 essay [35],
gave as an example a smart contract that enforces car loan
payments.
If the owner of the car fails to make a timely
payment, a smart contract could programmatically revoke
physical access and return control of the car to the bank.
Cryptocurrencies such as Bitcoin [29] provide key tech-
nical underpinnings for smart contracts: direct control of
money by programs and fair, automated code execution
through the decentralized consensus mechanisms underlying
blockchains. The recently launched Ethereum [14, 37] sup-
ports Turing-complete code and thus fully expressive self-
enforcing decentralized smart contracts—a big step toward
the vision of researchers and proponents. As Szabo’s ex-
ample shows, however, the most compelling applications of
smart contracts—such as ﬁnancial instruments—additionally
require access to data about real-world state and events.
Data feeds (also known as “oracles”) aim to meet this need.
Very simply, data feeds are contracts on the blockchain that
serve data requests by other contracts [14, 37]. A few data
feeds exist for Ethereum today that source data from trust-
worthy websites, but provide no assurance of correctly re-
laying such data beyond the reputation of their operators
(typically individuals or small entities). HTTPS connection
to a trustworthy website would seem to oﬀer a solution, but
smart contracts lack network access, and HTTPS does not
digitally sign data for out-of-band veriﬁcation. The lack of a
substantive ecosystem of trustworthy data feeds is frequently
cited as critical obstacle to the evolution of Ethereum and
decentralized smart contracts in general [20].
Town Crier. We introduce a system called Town Crier
(TC) that addresses this challenge by providing an authen-
ticated data feed (ADF) for smart contracts. TC acts as
a high-trust bridge between existing HTTPS-enabled data
websites and the Ethereum blockchain. It retrieves website
data and serves it to relying contracts on the blockchain as
concise pieces of data (e.g. stock quotes) called datagrams.
TC uses a novel combination of Software Guard Extensions
270(SGX), Intel’s recently released trusted hardware capabil-
ity, and a smart-contract front end.
It executes its core
functionality as a trusted piece of code in an SGX enclave,
which protects against malicious processes and the OS and
can attest (prove) to a remote client that the client is in-
teracting with a legitimate, SGX-backed instance of the TC
code.
The smart-contract front end of Town Crier responds to
requests by contracts on the blockchain with attestations of
the following form:
“Datagram X speciﬁed by parameters params is served
by an HTTPS-enabled website Y during a speciﬁed time
frame T .”
A relying contract can verify the correctness of X in such a
datagram assuming trust only in the security of SGX, the
(published) TC code, and the validity of source data in the
speciﬁed interval of time.
Another critical barrier to smart contract adoption is the
lack of conﬁdentiality in today’s ecosystems; all blockchain
state is publicly visible, and existing data feeds publicly ex-
pose requests. TC provides conﬁdentiality by supporting
private datagram requests, in which the parameters are en-
crypted under a TC public key for ingestion in TC’s SGX
enclave and are therefore concealed on the blockchain. TC
also supports custom datagram requests, which securely ac-
cess the online resources of requesters (e.g. online accounts)
by ingesting encrypted user credentials, permitting TC to
securely retrieve access-controlled data.
We designed and implemented TC as a complete, highly
scalable, end-to-end system that oﬀers formal security guar-
antees at the cryptographic protocol level. TC runs on
real, SGX-enabled host, as opposed to an emulator (e.g. [10,
32]). We plan to launch a version of TC as an open-source,
production service atop Ethereum, pending the near-future
availability of the Intel Attestation Service (IAS), which is
needed to verify SGX attestations.
Technical challenges. Smart contracts execute in an ad-
versarial environment where parties can reap ﬁnancial gains
by subverting the contracts or services on which they rely.
Formal security is thus vitally important. We adopt a rig-
orous approach to the design of Town Crier by modeling
it in the Universal Composibility (UC) framework, build-
ing on [27, 34] to achieve an interesting formal model that
spans a blockchain and trusted hardware. We formally de-
ﬁne and prove that TC achieves the basic property of data-
gram authenticity—informally that TC faithfully relays cur-
rent data from a target website. We additionally prove fair
expenditure for an honest requester, informally that the fee
paid by a user contract calling TC is at most a small amount
to cover the operating costs of the TC service, even if the
TC host is malicious.
Another contribution of our work is introducing and show-
ing how to achieve two key security properties: gas sustain-
ability and trusted computing base (TCB) code minimization
within a new TCB model created by TC’s combination of a
blockchain with SGX.
Because of the high resource costs of decentralized code
execution and risk of application-layer denial-of-service (DoS)
attacks, Ethereum includes an accounting resource called
gas to pay for execution costs. Informally, gas sustainabil-
ity means that an Ethereum service never runs out of gas,
a general and fundamental availability property. We give
a formal deﬁnition of gas sustainability applicable to any
Ethereum service, and prove that TC satisﬁes it.
We believe that the combination of blockchains with SGX
introduced in our work will prove to be a powerful and gen-
eral way to achieve conﬁdentiality in smart contract sys-
tems and network them with oﬀ-chain systems. This new
security paradigm, however, introduces a hybridized TCB
that spans components with diﬀerent trust models. We
introduce techniques for using such a hybridized TCB se-
curely while minimizing the TCB code size. In TC, we show
how to avoid constructing an authenticated channel from
the blockchain to the enclave—bloating the enclave with an
Ethereum client—by instead authenticating enclave outputs
on the blockchain. We also show how to minimize on-chain
signature-veriﬁcation code. These techniques are general;
they apply to any use of a similar hybridized TCB.
Other interesting smaller challenges arise in the design of
TC. One is deployment of TLS in an enclave. Enclaves lack
networking capabilities, so TLS code must be carefully parti-
tioned between the enclave and untrusted host environment.
Another is hedging in TC against the risk of compromise of
a website or single SGX instance, which we accomplish with
various modes of majority voting: among multiple websites
oﬀering the same piece of data (e.g. stock price) or among
multiple SGX platforms.
Applications and performance. We believe that TC can
spur deployment of a rich spectrum of smart contracts that
are hard to realize in the existing Ethereum ecosystem. We
explore three examples that demonstrate TC’s capabilities:
(1) A ﬁnancial derivative (cash-settled put option) that con-
sumes stock ticker data; (2) A ﬂight insurance contract that
relies on private data requests about ﬂight cancellations; and
(3) A contract for sale of virtual goods and online games (via
Steam Marketplace) for Ether, the Ethereum currency, us-
ing custom data requests to access user accounts.
Our experiments with these three applications show that
TC is highly scalable. Running on just a single SGX host,
TC achieves throughputs of 15-65 tx/sec. TC is easily paral-
lelized across many hosts, as separate TC hosts can serve re-
quests with no interdependency. (For comparison, Ethereum
handles less than 1 tx/sec today and recent work [19] sug-
gests that Bitcoin can scale safely to no more 26 tx/sec
with reparametrization.) For these same applications, ex-
perimental response times for datagram requests range from
192-1309 ms—much less than an Ethereum block interval
(12 seconds on average). These results suggest that a few
SGX-enabled hosts can support TC data feed rates well be-
yond the global transaction rate of a modern decentralized
blockchain.
Contributions. We oﬀer the following contributions:
• We introduce and report on an end-to-end implementa-
tion of Town Crier, an authenticated data feed system
that addresses critical barriers to the adoption of decen-
tralized smart contracts. TC combines a smart-contract
front end in Ethereum and an SGX-based trusted hard-
ware back end to: (1) Serve authenticated data to smart
contracts without a trusted service operator and (2) Sup-
port private and custom data requests, enabling encrypted
requests and secure use of access-controlled, oﬀ-chain
data sources. We plan to launch a version of TC soon as
an open-source service.
• We formally analyze the security of TC within the Uni-
271versal Composibility (UC) framework, deﬁning function-
alities to represent both on-chain and oﬀ-chain compo-
nents. We formally deﬁne and prove the basic properties
of datagram authenticity and fair expenditure as well as
gas sustainability, a fundamental availability property for
any Ethereum service.
• We introduce a hybridized TCB spanning the blockchain
and an SGX enclave, a powerful new paradigm of trust-
worthy system composition. We present generic tech-
niques that help shrink the TCB code size within this
model as well as techniques to hedge against individual
SGX platform compromises.
• We explore three TC applications that show TC’s abil-
ity to support a rich range of services well beyond those
in Ethereum today. Experiments with these applica-
tions also show that TC can easily meet the latency
and throughput requirements of modern decentralized
blockchains.
Due to space constraints, a number of details on formal-
ism, proofs, implementation, and applications are relegated
to the paper appendices with pointers in the paper body.
Appendices may be found in the supplementary materials.
2. BACKGROUND
In this section, we provide basic background on the main
technologies TC incorporates, namely SGX, TLS / HTTPS,
and smart contracts.
SGX. Intel’s Software Guard Extensions (SGX) [8, 21, 28,
30] is a set of new instructions that confer hardware protec-
tions on user-level code. SGX enables process execution in
a protected address space known as an enclave. The enclave
protects the conﬁdentiality and integrity of the process from
certain forms of hardware attack and other software on the
same host, including the operating system.
An enclave process cannot make system calls, but can read
and write memory outside the enclave region. Thus isolated
execution in SGX may be viewed in terms of an ideal model
in which a process is guaranteed to execute correctly and
with perfect conﬁdentiality, but relies on a (potentially mali-
cious) operating system for network and ﬁle-system access.1
SGX allows a remote system to verify the software in an
enclave and communicate securely with it. When an enclave
is created, the CPU produces a hash of its initial state known
as a measurement. The software in the enclave may, at a
later time, request a report which includes a measurement
and supplementary data provided by the process, such as a
public key. The report is digitally signed using a hardware-
protected key to produce a proof that the measured software
is running in an SGX-protected enclave. This proof, known
as a quote, can be veriﬁed by a remote system, while the
process-provided public key can be used by the remote sys-
tem to establish a secure channel with the enclave or verify
signed data it emits. We use the generic term attestation to
refer to a quote, and denote it by att. We assume that a
trustworthy measurement of the code for the enclave com-
ponent of TC is available to any client that wishes to verify
1This model is a simpliﬁcation: SGX is known to expose
some internal enclave state to the OS [18]. Our basic security
model for TC assumes ideal isolated execution, but again,
TC can also be distributed across multiple SGX instances
as a hedge against compromise.
an attestation. SGX signs quotes using a group signature
scheme called EPID [12]. This choice of primitive is signiﬁ-
cant in our design of Town Crier, as EPID is a proprietary
signature scheme not supported natively in Ethereum. SGX
additionally provides a trusted time source via the function
sgx_get_trusted_time. On invoking this function, an en-
clave obtains a measure of time relative to a reference point
indexed by a nonce. A reference point remains stable, but
SGX does not provide a source of absolute or wall-clock time,
another limitation we must work around in TC.
TLS / HTTPS. We assume basic familiarity by readers
with TLS and HTTPS (HTTP over TLS). As we explain
later, TC exploits an important feature of HTTPS, namely
that it can be partitioned into interoperable layers: an HTTP
layer interacting with web servers, a TLS layer handling
handshakes and secure communication, and a TCP layer
providing reliable data stream.
Smart contracts. While TC can in principle support any
smart-contract system, we focus in this paper on its use in
Ethereum, whose model we now explain. For further details,
see [14, 37].
A smart contract in Ethereum is represented as what is
called a contract account, endowed with code, a currency
balance, and persistent memory in the form of a key/value
store. A contract accepts messages as inputs to any of a