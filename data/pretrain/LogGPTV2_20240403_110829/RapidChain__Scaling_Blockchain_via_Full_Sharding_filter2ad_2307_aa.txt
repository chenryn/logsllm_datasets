title:RapidChain: Scaling Blockchain via Full Sharding
author:Mahdi Zamani and
Mahnush Movahedi and
Mariana Raykova
RapidChain: Scaling Blockchain via Full Sharding
Mahdi Zamani
Visa Research
Palo Alto, CA
Mahnush Movahedi†
Mariana Raykova
Dﬁnity
Palo Alto, CA
Yale University
New Haven, CT
Abstract
A major approach to overcoming the performance and scalability limitations of current blockchain
protocols is to use sharding which is to split the overheads of processing transactions among multiple,
smaller groups of nodes. These groups work in parallel to maximize performance while requiring signiﬁ-
cantly smaller communication, computation, and storage per node, allowing the system to scale to large
networks. However, existing sharding-based blockchain protocols still require a linear amount of commu-
nication (in the number of participants) per transaction, and hence, attain only partially the potential
beneﬁts of sharding. We show that this introduces a major bottleneck to the throughput and latency of
these protocols. Aside from the limited scalability, these protocols achieve weak security guarantees due
to either a small fault resiliency (e.g., 1/8 and 1/4) or high failure probability, or they rely on strong
assumptions (e.g., trusted setup) that limit their applicability to mainstream payment systems.
We propose RapidChain, the ﬁrst sharding-based public blockchain protocol that is resilient to Byzan-
tine faults from up to a 1/3 fraction of its participants, and achieves complete sharding of the commu-
nication, computation, and storage overhead of processing transactions without assuming any trusted
setup. RapidChain employs an optimal intra-committee consensus algorithm that can achieve very high
throughputs via block pipelining, a novel gossiping protocol for large blocks, and a provably-secure re-
conﬁguration mechanism to ensure robustness. Using an eﬃcient cross-shard transaction veriﬁcation
technique, our protocol avoids gossiping transactions to the entire network. Our empirical evaluations
suggest that RapidChain can process (and conﬁrm) more than 7,300 tx/sec with an expected conﬁrma-
tion latency of roughly 8.7 seconds in a network of 4,000 nodes with an overwhelming time-to-failure of
more than 4,500 years.
Introduction
1
Our global ﬁnancial system is highly centralized making it resistant to change, vulnerable to failures
and attacks, and inaccessible to billions of people in need of basic ﬁnancial tools [63, 28]. On the other
hand, decentralization poses new challenges of ensuring a consistent view among a group of mutually-
distrusting participants. The permissionless mode of operation, which allows open membership
and entails constant churn (i.e., join/leave) of the participants of the decentralized system, further
complicates this task. Furthermore, any agile ﬁnancial system, including a decentralized one, should
be able to adequately serve realistic market loads. This implies that it should scale easily to a large
number of participants, and it should handle a high throughput of transactions with relatively low
delays in making their outputs available. Achieving these properties together should also not require
signiﬁcant resources from each of the participants since otherwise, it runs contrary to the idea of
constructing a tool easily accessible to anyone.
Limitations of Traditional Approaches. Existing solutions currently either fail to solve the above
challenges or make security/performance trade-oﬀs that, unfortunately, make them no longer truly-
decentralized solutions. In particular, traditional Byzantine consensus mechanisms such as [44, 20,
∗Email: PI:EMAIL | mahenush@dﬁnity.org | PI:EMAIL
†This work was done in part while this author was aﬃliated with Yale University.
1
17] can only work in a closed-membership setting, where the set of participants is ﬁxed, and their
identities are known to everyone via a trusted third party. If used in an open setting, these protocols
can be easily compromised using Sybil attacks [25], where the adversary repeatedly rejoins malicious
parties with fresh identities to gain signiﬁcant inﬂuence on the protocol outcome. Moreover, most
traditional schemes assume a static adversary who can select the set of corrupt parties only at
the start of the protocol. Existing protocols that are secure against an adaptive adversary such
as [12, 18, 38] either scale poorly with the number of participants or are ineﬃcient.
Bitcoin and Its Limitations. Most cryptocurrencies such as Bitcoin [54] and Ethereum [16] main-
tain a distributed transaction ledger called the blockchain over a large peer-to-peer (P2P) network,
where every node maintains an updated, full copy of the entire ledger via a Byzantine consensus pro-
tocol, dubbed as the Nakamoto consensus. Unlike traditional consensus mechanisms, the Nakamoto
consensus allows new participants to join the protocol using a proof-of-work (PoW) process [27],
where a node demonstrates that it has done a certain amount of work by presenting a solution to
a computational puzzle. The use of PoW not only allows the consensus protocol to impede Sybil
attacks by limiting the rate of malicious participants joining the system, but also provides a lot-
tery mechanism through which a random leader is elected in every round to initiate the consensus
process.
Unfortunately, it is now well known that Bitcoin’s PoW-based consensus comes with serious draw-
backs such as low transaction throughput, high latency, poor energy eﬃciency [46], and mining-pool
centralization [34, 1]. Moreover, the protocol cannot scale out its transaction processing capacity
with the number of participants joining the protocol [47, 42]. Another major scalability issue of
Bitcoin is that every party needs to initially download the entire blockchain from the network to
independently verify all transactions. The size of the blockchain is currently about 150 GB and has
nearly doubled in the past year [2]. One can expect a larger growth in the size of blockchains that
are updated via higher-throughput consensus protocols than that of Bitcoin.
Bitcoin Scalability Improvements. Recently, several protocols have been proposed to mitigate
the performance and scalability issues of Bitcoin’s blockchain [23, 29, 41, 52, 56, 47, 32, 4, 42] using
hybrid architectures that combine the open-membership nature of Bitcoin with traditional Byzantine
fault tolerance [57, 19]. While most of these protocols can reportedly improve the throughput and
latency of Bitcoin, all of them still require the often-overlooked assumption of a trusted setup to
generate an unpredictable initial common randomness in the form of a common genesis block to
bootstrap the blockchain. Similar to Bitcoin, these protocols essentially describe how one can ensure
agreement on new blocks given an initial agreement on some genesis block. Such an assumption
plays a crucial role in achieving consistency among nodes in these protocols, and if compromised,
can easily aﬀect the security of the entire consensus protocol, casting a major contradiction to the
decentralized nature of cryptocurrencies.
In addition to being partially decentralized, most of these solutions have either large per-node
storage requirements [23, 29, 41, 52, 56, 47, 4], low fault resiliency [47, 42], incomplete speciﬁca-
tions [23, 41], or other security issues [41, 47, 42] (see Section 2.2 for more details). Furthermore,
all previous protocols require every participant in the consensus protocol to broadcast a message to
the entire network to either submit their consensus votes [29, 52], verify transactions [41, 47, 42],
and/or update every node’s local blockchain replica [47, 56, 32, 4].
While the large overhead of such a broadcast for every participant is usually reduced from a linear
number of messages (with respect to the number of participants) to nearly a constant using a peer-to-
peer gossiping protocol [36], the relatively high latency of such a “gossip-to-all” invocation (e.g., 12.6
seconds per block on average [24]) increases the overall latency of the consensus protocol signiﬁcantly
(e.g., the gossip-to-all latency roughly quadruples the consensus time in [42]). Moreover, due to
2
the very high transaction throughput of most scalable blockchain protocols (e.g., about 3,500 tx/sec
in [42]), the bandwidth usage of each node becomes very large (e.g., at least 45 Mbps in [42] – see
Section 5 for more details), if all transactions are gossiped to the entire network.
1.1 Our Contributions
We propose RapidChain, a Byzantine-resilient public blockchain protocol that improves upon the
scalability and security limitations of previous work in several ways. At a high level, RapidChain
partitions the set of nodes into multiple smaller groups of nodes called committees that operate
in parallel on disjoint blocks of transactions and maintain disjoint ledgers. Such a partitioning of
operations and/or data among multiple groups of nodes is often referred to as sharding [21] and has
been recently studied in the context of blockchain protocols [47, 42]. By enabling parallelization of
the consensus work and storage, sharding-based consensus can scale the throughput of the system
proportional to the number of committees, unlike the basic Nakamoto consensus.
Let n denote the number of participants in the protocol at any given time, and m (cid:28) n denote
the size of each committee. RapidChain creates k = n/m committees each of size m = c log n nodes,
where c is a constant depending only on the security parameter (in practice, c is roughly 20). In
summary, RapidChain provides the following novelties:
• Sublinear Communication. RapidChain is the ﬁrst sharding-based blockchain protocol that
requires only a sublinear (i.e., o(n)) number of bits exchanged in the network per transaction. In
contrast, all previous work incur an Ω(n) communication overhead per transaction (see Table 1).
• Higher Resiliency. RapidChain is the ﬁrst sharding-based blockchain protocol that can tol-
erate corruptions from less than a 1/3 fraction of its nodes (rather than 1/4) while exceeding
the throughput and latency of previous work (e.f., [47, 42]).
• Rapid Committee Consensus. Building on [5, 60], we reduce the communication overhead
and latency of P2P consensus on large blocks gossiped in each committee by roughly 3-10 times
compared to previous solutions [47, 32, 4, 42].
• Secure Reconﬁguration. RapidChain builds on the Cuckoo rule [8, 62] to provably protect
against a slowly-adaptive Byzantine adversary. This is an important property missing in pre-
vious sharding-based protocols [47, 42]. RapidChain also allows new nodes to join the protocol
in a seamless way without any interruptions or delays in the protocol execution.
• Fast Cross-Shard Veriﬁcation. We introduce a novel technique for partitioning the
blockchain such that each node is required to store only a 1/k fraction of the entire blockchain.
To verify cross-shard transactions, RapidChain’s committees discover each other via an eﬃcient
routing mechanism inspired by Kademlia [48] that incurs only a logarithmic (in number of com-
mittees) latency and storage. In contrast, the committee discovery in existing solutions [47, 42]
requires several “gossip-to-all” invocations.
• Decentralized Bootstrapping. RapidChain operates in the permissionless setting that allows
open membership, but unlike most previous work [29, 41, 56, 47, 42, 4], does not assume the ex-
istence of an initial common randomness, usually in the form of a common genesis block. While
common solutions for generating such a block require exchanging Ω(n2) messages, RapidChain
can bootstrap itself with only O(n
We also implement a prototype of RapidChain to evaluate its performance and compare it with
the state-of-the-art sharding-based protocols. Table 1 shows a high-level comparison between the
√
n) messages without assuming any initial randomness.
3
Protocol
#
Nodes
Elastico [47]
n = 1,600
OmniLedger [42] n = 1,800
OmniLedger [42] n = 1,800
RapidChain
n = 1,800
RapidChain
n = 4,000
Resiliency Complexity1
Throughput
Latency Storage2 Shard
t < n/4
t < n/4
t < n/4
t < n/3
t < n/3
Ω(m2/b+n)
Ω(m2/b+n)
Ω(m2/b+n)
O(m2/b+m log n)
O(m2/b+m log n)
40 tx/sec
500 tx/sec
3,500 tx/sec
4,220 tx/sec
7,380 tx/sec
800 sec
14 sec
63 sec
8.5 sec
8.7 sec
1x
1/3x
1/3x
1/9x
1/16x
Size
m = 100
m = 600
m = 600
m = 200
m = 250
to
Time
Fail
1 hour
230 years
230 years
1,950 years
4,580 years
Table 1: Comparison of RapidChain with state-of-the-art sharding blockchain protocols (b is the block size)
results.
In this table, we assume 512 B/tx, one-day long epochs, 100 ms network latency for all
links, and 20 Mbps bandwidth for all nodes in all three protocols. The choices of 1,600 and 1,800
nodes for [47] and [42] respectively is based on the maximum network sizes reported in these work.
Unfortunately, the time-to-failure of the protocol of [47] decreases rapidly for larger network sizes.
For [42], we expect larger network sizes will, at best, only slightly increase the throughput due to
the large committee sizes (i.e., m) required.
The latency numbers reported in Table 1 refer to block (or transaction) conﬁrmation times which
is the delay from the time that a node proposes a block to the network until it can be conﬁrmed by
all honest nodes as a valid transaction. We refer the reader to Section 2.2 and Section 5 for details
of our evaluation and comparison with previous work.
1.2 Overview of RapidChain
RapidChain proceeds in ﬁxed time periods called epochs. In the ﬁrst epoch, a one-time bootstrapping
protocol (described in Section 4.2) is executed that allows the participants to agree on a committee
of m = O(log n) nodes in a constant number of rounds. Assuming t < n/3 nodes are controlled by
a slowly-adaptive Byzantine adversary, the committee-election protocol samples a committee from
the set of all nodes in a way that the fraction of corrupt nodes in the sampled set is bounded by 1/2
with high probability. This committee, which we refer to as the reference committee and denote it
by CR, is responsible for driving periodic reconﬁguration events between epochs. In the following,
we describe an overview of the RapidChain protocol in more details.
Epoch Randomness. At the end of every epoch i, CR generates a fresh randomness, ri +1, referred
to as the epoch randomness for epoch i + 1. This randomness is used by the protocol to (1) sample a
set of 1/2-resilient committees, referred to as the sharding committees, at the end of the ﬁrst epoch,
(2) allow every participating node to obtain a fresh identity in every epoch, and (3) reconﬁgure the
existing committees to prevent adversarial takeover after nodes join and leave the system at the
beginning of every epoch or node corruptions happening at the end of every epoch.