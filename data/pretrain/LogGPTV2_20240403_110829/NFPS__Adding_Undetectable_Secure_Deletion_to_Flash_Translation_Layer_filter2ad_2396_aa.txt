title:NFPS: Adding Undetectable Secure Deletion to Flash Translation Layer
author:Shijie Jia and
Luning Xia and
Bo Chen and
Peng Liu
7
Flash Translation Layer
This chapter provides an overview of the achieved state of the art of FTLs
(or Flash Translation Layer). As a reminder, an FTL is a hardware/software
layer located in the controller of the storage device that makes use of ﬂash
memory such as SSDs, USB keys or SD cards. After a short introduction, we
will address the following points:
1) Basic mapping schemes from which the totality of FTLs are built.
2) More complex state-of-the-art mapping schemes making it possible to
address important concepts related to the performance of these systems.
3) Wear-leveling mechanisms that allow balancing the wear out on ﬂash
memory blocks.
4) Garbage collection mechanisms providing a means for recycling invalid
space;
5) Cache systems speciﬁc to ﬂash memory designed to maximize the
lifetime as well as the performance of ﬂash devices.
7.1. Introduction
As we have described in Chapter 2, integrating ﬂash memory in a computer
system involves the management of a number of constraints: erase-before-
write, the difference in granularity between reads/writes and erase operations
as well as the limited number of write/erase cycles that a given memory cell can
sustain. These constraints require the implementation of speciﬁc management
mechanisms. These can be implemented either entirely in software on the host
130
Flash Memory Integration
system via dedicated ﬁle systems such as those mentioned in Chapter 3 or in
the hardware, that is to say integrated into the controller of the ﬂash memory
on the device being considered. In the latter case, this is referred to as an FTL
(for Flash Translation Layer).
The main features of FTLs that will be described in this chapter are the
following:
– Physical to logical mapping: due to the erase-before-write constraint,
the modiﬁcation of data implies that the latter be rewritten into another page.
Therefore, it becomes necessary to keep track of the location of the data. This
is achieved through mapping schemes;
– Garbage collection: updating the data involves mainly two operations: (1)
copying the data into another page and (2) the invalidation of the initial copy
of the data. Over time, invalid pages tend to accumulate due to the numerous
modiﬁcations that may occur. In order to recover the free space for future
writes, a garbage collector scans the ﬂash memory and recycles entire blocks;
– Wear-leveling algorithms: as indicated in Chapter 2, a ﬂash memory cell
can undergo a limited number of erase/write cycles due to temporal and spatial
localities observed in several I/O application workloads, it is necessary to make
available a mechanism that provides a means to level the wear out in a uniform
manner in all the blocks of the ﬂash memory in order to maintain the function
of the whole ﬂash space for as long as possible.
7.2. Basic mapping schemes
The process of mapping consists of the translation of the address
originating from the host (the application or more accurately the device driver
at the system level), which is called a logical address, into a physical address.
This translation involves a mapping table that is managed by the FTL layer.
Basic mapping schemes are related to the granularity with which the mapping
is performed. These schemes can be classiﬁed into three large families:
page-level mapping, block-level mapping and ﬁnally a family of hybrid
mapping schemes (page and block-level).
Flash Translation Layer
131
7.2.1. Page-level mapping scheme
In the page-based mapping scheme [BAN 95], each logical page address is
mapped to a physical page address, and this is regardless of the other pages
of the same block. This mapping scheme is very ﬂexible and results in very
good performance. The major constraint of this type of scheme is the size of
the mapping table, which depends on the number of pages of the ﬂash memory
and can be very signiﬁcant. As a result, such a mapping table can hardly be
maintained in the RAM memory of the FTL (SSD controller). For example,
if there are a number of blocks equal to B and each block is composed of P
pages, the total number of entries in the mapping table is equal to P ∗ B. We
consider a numerical example to establish the orders of magnitude; if a ﬂash
memory of 32 GB is made available, with 2 KB per page, and if each entry in
the page mapping table is 8 bytes, this table will have a total size of 128 MB,
which is too large to be stored on on-board RAM.
Figure 7.1 shows an example of this type of mapping scheme.
7.2.2. Block-level mapping scheme
The main idea upon which block-based mapping relies [SHI 99] is to
consider the block granularity rather than that of a page. Therefore,
the
logical address of a page consists of a block number and of an offset within
this block. The offset
is not altered by the process of mapping (see
Figure 7.1). If considering the same example as that of page-level mapping,
the number of entries will be equal to the number of blocks, which is B and
therefore, instead of 128 MB, the table will have a maximum size of 2 MB. In
addition, we need less space per entry because block numbers can be encoded
by making use of fewer bits.
Even if block-based mapping is more realistic, when considering the size of
the mapping table, it has nevertheless a real downside. In fact, when a page has
to be updated, the write must be carried out within the same offset in the block,
as a consequence, the whole block containing the page must be copied into a
new free block. This amounts to copying the set of all valid pages in addition
to the newly modiﬁed page, and ﬁnally to invalidate the block previously used.
This operation is extremely costly and thus unrealistic.
132
Flash Memory Integration
(cid:20)(cid:13)
(cid:2)(cid:4)(cid:3)
(cid:4)(cid:4)(cid:3)
(cid:10)
(cid:12)
(cid:14)
(cid:15)
(cid:11)
(cid:13)
(cid:16)
(cid:17)
(cid:18)
(cid:19)
(cid:12)(cid:10)
(cid:12)(cid:12)
(cid:11)
(cid:13)
(cid:14)
(cid:15)
(cid:12)(cid:10)
(cid:10)
(cid:12)(cid:12)
(cid:12)
(cid:16)
(cid:17)
(cid:18)
(cid:19)
(cid:5)(cid:7)(cid:12)(cid:11)(cid:1)(cid:16)(cid:7)(cid:19)(cid:19)(cid:13)(cid:17)(cid:12)(cid:1)(cid:21)(cid:7)(cid:8)(cid:15)(cid:11)(cid:5)
(cid:7)(cid:6)(cid:8)(cid:9)(cid:14) (cid:1)(cid:2)(cid:3)(cid:4)
(cid:7)(cid:6)(cid:8)(cid:9)(cid:14) (cid:1)(cid:2)(cid:3)(cid:4)
(cid:20)(cid:13)
(cid:13)(cid:21)(cid:11)(cid:22)(cid:12)
(cid:2)(cid:1)(cid:3)
(cid:4)(cid:1)(cid:3)
(cid:10)
(cid:12)
(cid:14)
(cid:12)
(cid:14)
(cid:10)
(cid:2)(cid:15)(cid:18)(cid:9)(cid:14)(cid:1)
(cid:16)(cid:7)(cid:19)(cid:19)(cid:13)(cid:17)(cid:12)(cid:1)
(cid:21)(cid:7)(cid:8)(cid:15)(cid:11)
(cid:13)(cid:23)(cid:24)(cid:11)(cid:22)(cid:12)
(cid:3)(cid:20)(cid:11)(cid:11)(cid:1)(cid:19)(cid:7)(cid:12)(cid:11)
(cid:4)(cid:17)(cid:22)(cid:7)(cid:15)(cid:13)(cid:10)(cid:1)(cid:19)(cid:7)(cid:12)(cid:11)
(cid:6)(cid:7)(cid:15)(cid:13)(cid:10)(cid:1)(cid:19)(cid:7)(cid:12)(cid:11)
Figure 7.1. Page-level and block-level mapping schemes. The ﬁgure on the left shows
an example of a page mapping scheme when accessing page number 5. The ﬁgure
on the right shows an example of a page-based mapping scheme when accessing the
same page number. In this case, two operations are performed: an integer division
operation allowing the block number to be obtained and a modulo operation to get the
page number in the block. LPN represents the logical page number, PPN, the physical
page number, LBN, the logical block number and PBN, the physical block number. For
a color version of this ﬁgure, see www.iste.co.uk/boukhobza/ﬂash.zip
7.2.3. Hybrid mapping scheme
Several state-of-the-art hybrid mapping schemes have been proposed in
order to address the problems of the two previous schemes, namely the size of
the mapping table and data update operation cost. These hybrid schemes
make use of both types of mapping previously introduced. A large number
utilize a global block-based mapping and maintain a page mapping table for a
subset of pages for which block mapping would be expensive. As a result, the
block-based mapping table and the page-based mapping table which have a
small size are kept in RAM. An example of this type of mapping is shown in
Figure 7.2.
Flash Translation Layer
133
(cid:2)(cid:11)(cid:14)(cid:6)(cid:10)(cid:1)(cid:1)(cid:3)(cid:4)(cid:8)(cid:7)
(cid:2)(cid:1)(cid:3)
(cid:4)(cid:1)(cid:3)
(cid:1)
(cid:3)
(cid:2)
(cid:3)
(cid:2)
(cid:1)
(cid:2)(cid:11)(cid:14)(cid:6)(cid:10)(cid:1)
(cid:12)(cid:4)(cid:15)(cid:15)(cid:9)(cid:13)(cid:8)(cid:1)
(cid:16)(cid:4)(cid:5)(cid:11)(cid:7)
(cid:5)(cid:6)
(cid:6)(cid:7)(cid:8)(cid:9)(cid:3)
(cid:6)(cid:10)(cid:8)(cid:9)(cid:3)
(cid:2)(cid:4)(cid:3)
(cid:4)(cid:4)(cid:3)
(cid:1)
(cid:3)
(cid:2)
(cid:4)
(cid:2)
(cid:4)
(cid:3)
(cid:1)
Figure 7.2. Hybrid mapping scheme in which the main mapping table is
a block-wise table. In addition, for some blocks (for example here LBN 1
/ PBN 2), a page-based table mapping is used. For a color version of
this ﬁgure, see www.iste.co.uk/boukhobza/ﬂash.zip
7.3. Complex mapping schemes
As introduced in previous sections, a good mapping scheme should have a
small memory footprint while maintaining good writing performance.
There are three main types of schemes which are derived from the basic
schemes and are capable of addressing the problems of the size of mapping
tables and of the performance of writes:
1) If we reconsider the page-level mapping scheme, which shows good
performance with writes because there is no need to copy other pages of a
block during an update, the problem of the size of the mapping table can now
be solved by simply keeping part of the latter in RAM. The rest of the table will
be stored in ﬂash memory and loaded into RAM when needed. Several FTLs
are based on this principle including DFTL [GUP 09] and SFTL [JIA 11];
2) If we consider the block-level mapping scheme, in order to minimize the
cost of data updates, a possible solution is to allocate pages or an additional
block to a given data block. These additional pages or these blocks are called
log pages or log blocks. These log pages and blocks are employed to absorb
134
Flash Memory Integration
the updates of pages without having to update the entire block (we will give
more details about this scheme further in the text). The data in log pages or log
blocks are merged with data from data blocks later in a single pass, which
prevents additional copies. Some examples of this type of scheme will be
provided later. As an example, FAST [LEE 07], BAST [KIM 02] and LAST
[LEE 08] are FTLs that fall into this category;
3) Another way of proceeding consists of partitioning the ﬂash memory
in two asymmetrical areas, a small area managed in page-wise fashion and a
more signiﬁcant area block-wise. This type of mapping scheme aims to write
the pages very often modiﬁed in the section in which the mapping is performed
page-wise, while data that do not change very much are stored in the block-
wise mapping section. Two examples of such schemes are: WAFTL [WEI 11]
and MaCACH [BOU 15].
7.3.1. Log block FTL
In this section, we will describe FTLs representative of state-of-the-art.
7.3.1.1. Mitsubishi
Mitsubishi’s FTL is a block-based mapping FTL [SHI 99]. This is one of
the ﬁrst to use the concept of log space in order to absorb page updates. Indeed,
in this FTL, each data block contains a few additional pages employed as log
space. These are pages not visible to the application space and are used as soon
as a data update is performed in one of the pages of the block. It is only once
all of the log pages are written that the following update operation generates a
copy operation to a new free block (see Figure 7.3). This FTL makes it possible
to reduce block copies at the cost of additional ﬂash storage inserted in each
block. As an example, if 8 log pages are added to each block containing 64
data pages, the addition in terms of space represents 12.5%.
7.3.1.2. M-Systems
In the M-Systems FTL [BAN 99] rather than having a few log pages inside
each block, the idea is to have entire log blocks. This means that for a logical
block of data, there are two physical blocks, a data block and a log block that
will absorb the updates. Two different schemes are possible for this FTL:
ANAND and FMAX. In the ﬁrst, ANAND, simpler in its implementation,
when an update occurs with a page of the data block, the latter is achieved in
Flash Translation Layer
135
the page with the same offset in the log block. It simply means that when it is
desirable to modify the same page twice, the system is forced to perform a
merge operation. This operation consists of merging valid data from the data
block with those of the log block into the same free block (see Figure 7.3,
example 2).
(cid:6)
(cid:1)
(cid:2)
(cid:3)
(cid:4)
(cid:6)
(cid:1)
(cid:2)
(cid:3)
(cid:4)
(cid:7)
(cid:8)
(cid:1)(cid:5)
(cid:2)(cid:5)
(cid:3)(cid:5)
(cid:4)
(cid:1)