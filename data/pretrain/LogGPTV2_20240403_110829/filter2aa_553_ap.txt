circumference = 3.14159 * diameter;
这里，常量3.14159代表著名的常量pi（π）。在该例中，输入实际值便
可使用这个常量。然而，这种情况使用符号常量（symbolic 
constant）会更
好。也就是说，使用下面的语句，计算机稍后会用实际值完成替换：
circumference = pi * diameter;
为什么使用符号常量更好？首先，常量名比数字表达的信息更多。请比
较以下两条语句：
owed = 0.015 * housevalue;
owed = taxrate * housevalue;
如果阅读一个很长的程序，第2条语句所表达的含义更清楚。
另外，假设程序中的多处使用一个常量，有时需要改变它的值。毕竟，
税率通常是浮动的。如果程序使用符号常量，则只需更改符号常量的定义，
不用在程序中查找使用常量的地方，然后逐一修改。
那么，如何创建符号常量？方法之一是声明一个变量，然后将该变量设
置为所需的常量。可以这样写：
float taxrate;
taxrate = 0.015;
这样做提供了一个符号名，但是taxrate是一个变量，程序可能会无意间
改变它的值。C语言还提供了一个更好的方案——C预处理器。第2 
章中介
绍了预处理器如何使用#include包含其他文件的信息。预处理器也可用来定
185
义常量。只需在程序顶部添加下面一行：
#define TAXRATE 0.015
编译程序时，程序中所有的TAXRATE都会被替换成0.015。这一过程被
称为编译时替换（compile-time substitution）。在运行程序时，程序中所有的
替换均已完成（见图 
4.5）。通常，这样定义的常量也称为明示常量
（manifest constant）[1]。
请注意格式，首先是#define，接着是符号常量名（TAXRATE），然后
是符号常量的值（0.015）（注意，其中并没有=符号）。所以，其通用格式
如下：
#define NAME value
实际应用时，用选定的符号常量名和合适的值来替换NAME和value。注
意，末尾不用加分号，因为这是一种由预处理器处理的替换机制。为什么
TAXRATE 要用大写？用大写表示符号常量是 C 语言一贯的传统。这样，在
程序中看到全大写的名称就立刻明白这是一个符号常量，而非变量。大写常
量只是为了提高程序的可读性，即使全用小写来表示符号常量，程序也能照
常运行。尽管如此，初学者还是应该养成大写常量的好习惯。
另外，还有一个不常用的命名约定，即在名称前带c_或k_前缀来表示常
量（如，c_level或k_line）。
符号常量的命名规则与变量相同。可以使用大小写字母、数字和下划线
字符，首字符不能为数字。程序清单4.4演示了一个简单的示例。
186
187
图4.5 输入的内容和编译后的内容
程序清单4.4 pizza.c程序
/* pizza.c -- 在比萨饼程序中使用已定义的常量 */
#include 
#define PI 3.14159
int main(void)
{
float area, circum, radius;
printf("What is the radius of your pizza?\n");
scanf("%f", &radius);
area = PI * radius * radius;
circum = 2.0 * PI *radius;
printf("Your basic pizza parameters are as follows:\n");
printf("circumference = %1.2f, area = %1.2f\n", circum,area);
return 0;
}
printf()语句中的%1.2f表明，结果被四舍五入为两位小数输出。下面是
一个输出示例：
What is the radius of your pizza?
188
6.0
Your basic pizza parameters are as follows:
circumference = 37.70, area = 113.10
#define指令还可定义字符和字符串常量。前者使用单引号，后者使用双
引号。如下所示：
#define BEEP '\a'
#define TEE 'T'
#define ESC '\033'
#define OOPS "Now you have done it!"
记住，符号常量名后面的内容被用来替换符号常量。不要犯这样的常见
错误：
/* 错误的格式 */
#define TOES = 20
如果这样做，替换TOES的是= 20，而不是20。这种情况下，下面的语
句：
digits = fingers + TOES;
将被转换成错误的语句：
digits = fingers + = 20;
4.3.1 const限定符
C90标准新增了const关键字，用于限定一个变量为只读 
[2]。其声明如
189
下：
const int MONTHS = 12; // MONTHS在程序中不可更改，值为12
这使得MONTHS成为一个只读值。也就是说，可以在计算中使用
MONTHS，可以打印MONTHS，但是不能更改MONTHS的值。const用起来
比#define更灵活，第12章将讨论与const相关的内容。
4.3.2 明示常量
C头文件limits.h和float.h分别提供了与整数类型和浮点类型大小限制相
关的详细信息。每个头文件都定义了一系列供实现使用的明示常量 [3]。例
如，limits.h头文件包含以下类似的代码：
#define INT_MAX +32767
#define INT_MIN -32768
这些明示常量代表int类型可表示的最大值和最小值。如果系统使用32
位的int，该头文件会为这些明示常量提供不同的值。如果在程序中包含
limits.h头文件，就可编写下面的代码：
printf("Maximum int value on this system = %d\n", INT_MAX);
如果系统使用4字节的int，limits.h头文件会提供符合4字节int的
INT_MAX和INT_MIN。表4.1列出了limits.h中能找到的一些明示常量。
表4.1 limits.h中的一些明示常量
190
类似地，float.h头文件中也定义一些明示常量，如FLT_DIG和
DBL_DIG，分别表示float类型和double类型的有效数字位数。表4.2列出了
float.h中的一些明示常量（可以使用文本编辑器打开并查看系统使用的float.h
头文件）。表中所列都与float类型相关。把明示常量名中的FLT分别替换成
DBL和LDBL，即可分别表示double和long double类型对应的明示常量（表中
假设系统使用2的幂来表示浮点数）。
表4.2 float.h中的一些明示常量
191
程序清单4.5演示了如何使用float.h和limits.h中的数据（注意，编译器要
完全支持C99标准才能识别LLONG_MIN标识符）。
程序清单4.5 defines.c程序
// defines.c -- 使用limit.h和float头文件中定义的明示常量
#include 
#include   // 整型限制
#include   // 浮点型限制
int main(void)
{
printf("Some number limits for this system:\n");
printf("Biggest int: %d\n", INT_MAX);
printf("Smallest long long: %lld\n", LLONG_MIN);
printf("One byte = %d bits on this system.\n", CHAR_BIT);
printf("Largest double: %e\n", DBL_MAX);
printf("Smallest normal float: %e\n", FLT_MIN);
printf("float precision = %d digits\n", FLT_DIG);
printf("float epsilon = %e\n", FLT_EPSILON);
return 0;
}
192
该程序的输出示例如下：
Some number limits for this system:
Biggest int: 2147483647
Smallest long long: -9223372036854775808
One byte = 8 bits on this system.
Largest double: 1.797693e+308
Smallest normal float: 1.175494e-38
float precision = 6 digits
float epsilon = 1.192093e-07
C预处理器是非常有用的工具，要好好利用它。本书的后面章节中会介
绍更多相关应用。
193
4.4 printf()和scanf()
printf()函数和scanf()函数能让用户可以与程序交流，它们是输入/输出函
数，或简称为I/O函数。它们不仅是C语言中的I/O函数，而且是最多才多艺
的函数。过去，这些函数和C库的一些其他函数一样，并不是C语言定义的
一部分。最初，C把输入/输出的实现留给了编译器的作者，这样可以针对特
殊的机器更好地匹配输入/输出。后来，考虑到兼容性的问题，各编译器都
提供不同版本的printf()和scanf()。尽管如此，各版本之间偶尔有一些差异。
C90 和C99 标准规定了这些函数的标准版本，本书亦遵循这一标准。
虽然printf()是输出函数，scanf()是输入函数，但是它们的工作原理几乎
相同。两个函数都使用格式字符串和参数列表。我们先介绍printf()，再介绍
scanf()。
4.4.1 printf()函数
请求printf()函数打印数据的指令要与待打印数据的类型相匹配。例如，
打印整数时使用%d，打印字符时使用%c。这些符号被称为转换说明
（conversion specification），它们指定了如何把数据转换成可显示的形式。
我们先列出ANSI C标准为printf()提供的转换说明，然后再示范如何使用一些
较常见的转换说明。表4.3列出了一些转换说明和各自对应的输出类型。
表4.3 转换说明及其打印的输出结果
194
4.4.2 使用printf()
程序清单4.6的程序中使用了一些转换说明。
程序清单4.6 printout.c程序
/* printout.c -- 使用转换说明 */
#include 
#define PI 3.141593
int main(void)
{
int number = 7;
float pies = 12.75;
195
int cost = 7800;
printf("The %d contestants ate %f berry pies.\n", number,
pies);
printf("The value of pi is %f.\n", PI);
printf("Farewell! thou art too dear for my possessing,\n");
printf("%c%d\n", '$', 2 * cost);
return 0;
}
该程序的输出如下：
The 7 contestants ate 12.750000 berry pies.
The value of pi is 3.141593.
Farewell! thou art too dear for my possessing,
$15600
这是printf()函数的格式：
printf( 格式字符串, 待打印项1, 待打印项2,...);
待打印项1、待打印项2等都是要打印的项。它们可以是变量、常量，甚
至是在打印之前先要计算的表达式。第3章提到过，格式字符串应包含每个
待打印项对应的转换说明。例如，考虑下面的语句：
printf("The %d contestants ate %f berry pies.\n", number,pies);
格式字符串是双引号括起来的内容。上面语句的格式字符串包含了两个
196
待打印项number和poes对应的两个转换说明。图4.6演示了printf()语句的另一
个例子。
下面是程序清单4.6中的另一行：
printf("The value of pi is %f.\n", PI);
该语句中，待打印项列表只有一个项——符号常量PI。
如图4.7所示，格式字符串包含两种形式不同的信息：
实际要打印的字符；
转换说明。
图4.6 printf()的参数
图4.7 剖析格式字符串
警告
格式字符串中的转换说明一定要与后面的每个项相匹配，若忘记这个基
本要求会导致严重的后果。千万别写成下面这样：
197
printf("The score was Squids %d, Slugs %d.\n", score1);
这里，第2个%d没有对应任何项。系统不同，导致的结果也不同。不
过，出现这种问题最好的状况是得到无意义的值。
如果只打印短语或句子，就不需要使用任何转换说明。如果只打印数
据，也不用加入说明文字。程序清单4.6中的最后两个printf()语句都没问
题：
printf("Farewell! thou art too dear for my possessing,\n");
printf("%c%d\n", '$', 2 * cost);
注意第2条语句，待打印列表的第1个项是一个字符常量，不是变量；第
2个项是一个乘法表达式。这说明printf()使用的是值，无论是变量、常量还
是表达式的值。
由于 printf()函数使用%符号来标识转换说明，因此打印%符号就成了个
问题。如果单独使用一个%符号，编译器会认为漏掉了一个转换字符。解决
方法很简单，使用两个%符号就行了：
pc = 2*6;
printf("Only %d%% of Sally's gribbles were edible.\n", pc);
下面是输出结果：
Only 12% of Sally's gribbles were edible.
4.4.3 printf()的转换说明修饰符
在%和转换字符之间插入修饰符可修饰基本的转换说明。表4.4和表4.5
列出可作为修饰符的合法字符。如果要插入多个字符，其书写顺序应该与表
4.4中列出的顺序相同。不是所有的组合都可行。表中有些字符是C99新增
的，如果编译器不支持C99，则可能不支持表中的所有项。
198
表4.4 printf()的修饰符
199
注意 类型可移植性
sizeof 运算符以字节为单位返回类型或值的大小。这应该是某种形式的
整数，但是标准只规定了该值是无符号整数。在不同的实现中，它可以是
unsigned int、unsigned long甚至是unsigned long long。因此，如果要用printf()
函数显示sizeof表达式，根据不同系统，可能使用%u、%lu或%llu。这意味
着要查找你当前系统的用法，如果把程序移植到不同的系统还要进行修改。
鉴于此， 
C提供了可移植性更好的类型。首先，stddef.h头文件（在包含
200
stdio.h头文件时已包含其中）把size_t定义成系统使用sizeof返回的类型，这
被称为底层类型（underlying type）。其次，printf()使用z修饰符表示打印相
应的类型。同样，C还定义了ptrdiff_t类型和t修饰符来表示系统使用的两个
地址差值的底层有符号整数类型。
注意 float参数的转换
对于浮点类型，有用于double和long 
double类型的转换说明，却没有
float类型的。这是因为在K&R C中，表达式或参数中的float类型值会被自动