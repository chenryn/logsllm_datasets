### Permission Management and Custom Permissions in Android

#### A. Permission Assignment and Revocation

Permissions can be assigned to any permission group, regardless of the protection level [15]. Internally, for an app, the processes of granting and revoking a permission involve changing the `mGranted` parameter, a boolean variable maintained by `PermissionController` (for runtime permissions) and `PermissionManagerService` (for install-time permissions). Setting `mGranted` to `True` grants the permission, while setting it to `False` revokes it. Additionally, the granting status of permissions is recorded in `runtime-permissions.xml` (for runtime permissions) and `packages.xml` (for install-time permissions) for persistent storage.

- **Location of `runtime-permissions.xml`:** `/data/system/users/0/runtime-permissions.xml`
- **Location of `packages.xml`:** `/data/system/packages.xml`

#### B. Custom Permissions

System permissions, also known as platform permissions, are defined by system apps located in system folders (e.g., `/system/`, such as `framework-res.apk` with the package name `android`). These permissions protect specific system resources. For example, an app must have the `CALL_PHONE` permission to make a phone call. Third-party apps can also define their own permissions, called custom permissions, to share their resources and capabilities with other apps.

##### 1. Defining and Requesting Custom Permissions

As shown in Listing 1, a custom permission `com.test.cp` is defined in an app’s manifest file using the `<permission>` element. The app must specify the permission name and protection level (defaulting to `normal` if not specified). If the name matches a system permission or an existing custom permission, the custom permission definition will be ignored by the system. App developers can optionally assign a permission group to the custom permission, which can be a custom group defined by third-party apps or a system group (e.g., the `PHONE` group). To use the custom permission, the app needs to request it through the `<uses-permission>` element in its manifest file [7].

```xml
<permission
    android:name="com.test.cp"
    android:protectionLevel="normal" />
<uses-permission android:name="com.test.cp" />
```

##### 2. Design Philosophy

Android generally does not distinguish between system and custom permissions in most usage scenarios. The same general permission management policies apply to both types, including protection levels, runtime permission control, and group management. This design unifies and simplifies the control of permissions.

The fundamental difference is that system permissions are defined by the system (system apps), while custom permissions are defined by third-party apps. System apps are pre-installed and cannot be modified or removed by users, making their defined permissions stable. In contrast, third-party apps can be installed, uninstalled, and updated, making the usage of custom permissions more flexible. This flexibility allows for adding, removing, and updating permission definitions, although these operations are not exclusive to custom permissions.

To ensure that custom permissions do not affect the scope of system permissions, Android enforces several conditions:
1. An app cannot define a permission with the same name as an existing permission.
2. The permission owner is recorded as the app that first defines the permission.
3. System apps are installed before any third-party apps and define a set of permissions to protect specific platform resources.

#### C. Usage Status of Custom Permissions

To understand the current usage of custom permissions, we conducted a large-scale measurement based on 208,987 APK files from third-party app markets and the AndroZoo dataset [22], primarily ranging from 2017-2019. We focused on two research questions:

1. **How many apps use custom permissions?**
2. **What are the purposes of using custom permissions?**

We developed a script to scan the manifest files of apps and parse custom permission-related attributes to obtain the necessary statistics.

- **Question 1:** Our results show that 52,601 apps (approximately 25.2%) declare a total of 82,052 custom permissions. Over 65% of these permissions are `signature`-level, likely because apps developed by the same company (signed by the same certificate) need to share resources among themselves. Normal permissions account for 32.09%, and dangerous permissions account for only 2.42%.

- **Question 2:** We analyzed custom permission names and descriptions, combined with manual case studies, to summarize the purposes of using custom permissions:
  - **Using services provided by third-parties:** For example, 16,259 apps in our dataset declare the `JPUSH_MESSAGE` permission to use the message push service offered by the JPush platform [10].
  - **Restricting access to shared data:** For example, `com.qidian.QDReaderMM` defines the `READ_DB4` permission to control access to its e-book database.
  - **Controlling communication between apps:** For example, only apps with the `BROADCAST_RECEIVER` permission can send broadcasts to the broadcast receiver of `com.tencent.portfolio`.

### III. Motivation and Threat Model

#### A. Motivation Case

Previous research has not thoroughly studied the security of Android custom permissions, possibly due to the limited perceived threats to sensitive system resources and user data. Tuncay et al. [41] found that custom permissions were insufficiently isolated and lacked enforced naming conventions. They presented two privilege escalation attacks to access unauthorized resources.

One attack involved an adversary creating an app (`app-test`) that defines and requests a normal custom permission `cp`. After the user installs the app, the definition of `cp` is changed to `dangerous`, and the user installs the updated app. This results in `app-test` obtaining a dangerous `cp` without user consent, leading to privilege escalation. This attack can be extended to obtain dangerous system permissions.

**Our Findings:** According to the Android Security Bulletins and source code change logs [5], this attack has been fixed in Android 10 by preventing the change of permission protection levels from `normal` or `signature` to `dangerous`.

However, we discovered an alternative attack flow that bypasses this fix. As illustrated in Figure 1, the adversary creates two apps, `app-d` and `app-r`. `app-d` defines a normal custom permission `cp`, and `app-r` requests `cp`. Two updated versions of `app-d` are created: `app-d-1` removes the definition of `cp`, and `app-d-2` redefines `cp` with a `dangerous` protection level. The user executes the sequence: install `app-d`, install `app-r`, install `app-d-1`, and install `app-d-2`. This results in `app-r` obtaining `cp` and achieving privilege escalation.

This newly discovered attack stems from a design shortcoming in the Android permission framework, specifically DS#1 – dangling custom permission (see Section VI-A).

**Insight:** This exploration motivates the need for an effective method to check the security of the complex custom permission mechanism. An automatic analysis tool is required to identify design shortcomings, not just successful attack cases.

#### B. Automatic Analysis

There are two main approaches to automatically analyze custom permissions: static analysis (analyzing the source code of Android OS to find design flaws) and dynamic analysis (executing numerous test cases to trigger unexpected behaviors). We chose dynamic analysis for the following reasons:
1. The internal implementation of the permission mechanism is complex.
2. Static analysis typically requires prior knowledge to construct targeted models.

Inspired by the motivation case, the analysis process can be abstracted as finding specific app execution sequences that trigger privilege escalation issues. We designed an automatic fuzzing tool – CUPERFUZZER – to achieve this.

#### C. Threat Model

In our study, we consider a general local exploit scenario where an adversary distributes malicious apps to app markets. Users may download and install these malicious apps on their Android phones. These users are cautious about granting permissions but may still fall victim to malicious apps that exploit flaws in custom permissions to access unauthorized platform resources, such as obtaining dangerous system permissions without user consent.

### IV. Design of CUPERFUZZER

CUPERFUZZER is an automatic analysis tool that treats the internal operations of the Android permission framework as a black-box and triggers privilege escalation issues by executing numerous test cases. Each test case is an execution sequence composed of various test apps and permission-related operations. We also consider how to check the execution results and identify critical paths to efficiently locate the causes.

#### A. Seed Generation

CUPERFUZZER generates a test app as the seed to activate the subsequent fuzzing process. The seed app defines and requests a custom permission and all dangerous and signature system permissions. The custom permission definition includes:
- **Permission name:** Based on a pre-defined list but not the same as a system permission.
- **Protection level:** `normal`, `dangerous`, or `signature`.
- **Group:** A certain system group or not set.

We use a pre-defined permission name list to avoid triggering unexpected behaviors with unusual names. The number of seed apps is usually small, not enough for randomness.

**Seed Generation Modes:**
- **Single-app mode:** One app defines and requests the custom permission.
- **Dual-app mode:** One app defines the custom permission, and another app requests it, signed by different certificates.

When generating a new seed, CUPERFUZZER determines the seed generation mode and custom permission definition. To avoid real-time app construction, CUPERFUZZER can pre-construct and store test apps in a dataset. During testing, CUPERFUZZER randomly selects an app from the prepared dataset as the seed.

#### B. Test Case Construction

CUPERFUZZER constructs a complete test case, which is an execution sequence consisting of multiple test apps and operations that may affect the granting of requested permissions.

**Operation Selection:**
After reviewing Android technical documents and source code [12], we confirmed four operations that can be included in the test cases. These operations are designed to simulate various scenarios and interactions between apps and the permission system.

By systematically constructing and executing these test cases, CUPERFUZZER aims to identify and analyze potential privilege escalation issues in the Android permission framework.