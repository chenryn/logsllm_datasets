relevant to ERIM’s use of MPK. libmpk could be combined
with ERIM in applications that require more than 16 compo-
nents, but the integration remains as future work.
In recent work, Burow et al. [11] survey implementation
techniques for shadow stacks. In particular, they examine the
use of MPK for protecting the integrity of shadow stacks.
Burow et al.’s measurements of MPK overheads (Fig. 10
in [11]) are consistent with ours. Their use of MPK could
be a speciﬁc use-case for ERIM, which is a more general
framework for memory isolation.
USENIX Association
28th USENIX Security Symposium    1223
3 Design
Goals ERIM enables efﬁcient data isolation within a user-
space process. Like prior work, it enables a (trusted) appli-
cation component to isolate its sensitive data from untrusted
components. Unlike prior work, ERIM supports such iso-
lation with low overhead even at high switching rates be-
tween components without requiring control-ﬂow integrity.
In the following, we focus on the case of two components
that are isolated from each other within a single-threaded
process. Later, we describe generalizations to multi-threaded
processes, more than two components per process, and read-
only sharing among components.
We use the letter T to denote a trusted component and U
to denote the remaining, untrusted application component.
ERIM’s key primitive is memory isolation: it reserves a re-
gion of the address space and makes it accessible exclusively
from the trusted component T. This reserved region is de-
noted MT and can be used by T to store sensitive data. The
rest of the address space, denoted MU, holds the applica-
tion’s regular heap and stack and is accessible from both U
and T. ERIM enforces the following invariants:
(1) While control is in U, access to MT remains disabled.
(2) Access to MT is enabled atomically with a control trans-
fer to a designated entry point in T and disabled when T
transfers control back to U.
The ﬁrst invariant provides isolation of MT from U, while the
second invariant prevents U from confusing T into accessing
MT improperly by jumping into the middle of MT’s code.
Background: Intel MPK To realize its goals, ERIM uses
the recent MPK extension to the x86 ISA [28]. With MPK,
each virtual page of a process can be associated with one of
16 protection keys, thus partitioning the address space into
up to 16 domains. A new register, PKRU, that is local to
each logical core, determines the current access permissions
(read, write, neither or both) on each domain for the code
running on that core. Access checks against the PKRU are
implemented in hardware and impose no overhead on pro-
gram execution.
Changing access privileges requires writing new permis-
sions to the PKRU register with a user-mode instruction,
WRPKRU. This instruction is relatively fast (11–260 cycles
on current Intel CPUs), does not require a syscall, changes
to page tables, a TLB ﬂush, or inter-core synchronization.
The PKRU register can also be modiﬁed by the XRSTOR
instruction by setting a speciﬁc bit in the eax register prior
to the instruction (XRSTOR is used to restore the CPU’s
previously-saved extended state during a context switch).
For strong security, ERIM must ensure that untrusted code
cannot exploit WRPKRU or XRSTOR instructions in exe-
cutable pages to elevate privileges. To this end, ERIM com-
bines MPK with binary inspection to ensure that all exe-
cutable occurrences of WRPKRU or XRSTOR are safe, i.e.,
they cannot be exploited to improperly elevate privilege.
Background: Linux support for MPK As of version 4.6,
the mainstream Linux kernel supports MPK. Page-table en-
tries are tagged with MPK domains, there are additional
syscall options to associate pages with speciﬁc domains,
and the PKRU register is saved and restored during context
switches. Since hardware PKRU checks are disabled in ker-
nel mode, the kernel checks PKRU permissions explicitly
before dereferencing any userspace pointer. To avoid execut-
ing a signal handler with inappropriate privileges, the kernel
updates the PKRU register to its initial set of privileges (ac-
cess only to domain 0) before delivering a signal to a process.
3.1 High-level design overview
ERIM can be conﬁgured to provide either complete isola-
tion of MT from U (conﬁdentiality and integrity), or only
write protection (only integrity). We describe the design for
complete isolation ﬁrst. Section 3.7 explains a slight design
re-conﬁguration that provides only write protection.
ERIM’s isolation mechanism is conceptually simple: It
maps T’s reserved memory, MT, and the application’s gen-
eral memory, MU, to two different MPK domains. It man-
ages MPK permissions (the PKRU registers) to ensure that
MU is always accessible, while only MU is accessible when
control is in U. It allows U to securely transfer control to T
and back via call gates. A call gate enables access to MT us-
ing the WRPKRU instruction and immediately transfers con-
trol to a speciﬁed entry point of T, which may be an explicit
or inlined function. When T is done executing, the call gate
disables access to MT and returns control to U. This enforces
ERIM’s two invariants (1) and (2) from Section 3. Call gates
operate entirely in user-mode (they don’t use syscalls) and
are described in Section 3.3.
Preventing exploitation A key difﬁculty in ERIM’s de-
sign is preventing the untrusted U from exploiting occur-
rences of the WRPKRU or XRSTOR instruction sequence
on executable pages to elevate its privileges. For instance,
if the sequence appeared at any byte address on an exe-
cutable page, it could be exploited using control-ﬂow hijack
attacks. To prevent such exploits, ERIM relies on binary
inspection to enforce the invariant that only safe WRPKRU
and XRSTOR occurrences appear on executable pages.
A WRPKRU occurrence is safe if it is immediately fol-
lowed by one of the following: (A) a pre-designated entry
point of T, or (B) a speciﬁc sequence of instructions that
checks that the permissions set by WRPKRU do not include
access to MT and terminates the program otherwise. A safe
WRPKRU occurrence cannot be exploited to access MT in-
appropriately. If the occurrence satisﬁes (A), then it does not
give control to U at all; instead, it enters T at a designated
entry point. If the occurrence satisﬁes (B), then it would ter-
minate the program immediately when exploited to enable
access to MT.
A XRSTOR is safe if it is immediately followed by a spe-
ciﬁc sequence of instructions to check that the eax bit that
1224    28th USENIX Security Symposium
USENIX Association
causes XRSTOR to load the PKRU register is not set. Such
a XRSTOR cannot be used to change privilege and continue
execution.1
ERIM’s call gates use only safe WRPKRU occurrences
(and do not use XRSTOR at all). So, they pass the binary
inspection. Section 3.4 describes ERIM’s binary inspection.
Creating safe binaries An important question is how to
construct binaries that do not have unsafe WRPKRUs and
XRSTORs. On x86, these instructions may arise inadver-
tently spanning the bytes of adjacent instructions or as a sub-
sequence in a longer instruction. To eliminate such inad-
vertent occurrences, we describe a binary rewriting mecha-
nism that rewrites any sequence of instructions containing
a WRPKRU or XRSTOR to a functionally equivalent se-
quence without any WRPKRUs and XRSTORs. The mech-
anism can be deployed as a compiler pass or integrated with
our binary inspection, as explained in Section 4.
3.2 Threat model
ERIM makes no assumptions about the untrusted component
(U) of an application. U may behave arbitrarily and may
contain memory corruption and control-ﬂow hijack vulnera-
bilities that may be exploited during its execution.
However, ERIM assumes that the trusted component T’s
binary does not have such vulnerabilities and does not com-
promise sensitive data through explicit information leaks, by
calling back into U while access to MT is enabled, or by map-
ping executable pages with unsafe/exploitable occurrences
of the WRPKRU or XRSTOR instruction.
The hardware, the OS kernel, and a small library added
by ERIM to each process that uses ERIM are trusted to
be secure. We also assume that the kernel enforces stan-
dard DEP—an executable page must not be simultaneously
mapped with write permissions. ERIM relies on a list of le-
gitimate entry points into T provided either by the program-
mer or the compiler, and this list is assumed to be correct
(see Section 3.4). The OS’s dynamic program loader/linker
is trusted to invoke ERIM’s initialization function before any
other code in a new process.
Side-channel and rowhammer attacks, and microachitec-
tural leaks, although important, are beyond the scope of this
work. However, ERIM is compatible with existing defenses.
Our current prototype of ERIM is incompatible with appli-
cations that simultaneously use MPK for other purposes, but
this is not fundamental to ERIM’s design. Such incompat-
ibilities can be resolved as long as the application does not
re-use the MPK domain that ERIM reserves for T.
3.3 Call gates
A call gate transfers control from U to T by enabling access
to MT and executing from a designated entry point of T, and
xor ecx, ecx
xor edx, edx
mov PKRU_ALLOW_TRUSTED, eax
WRPKRU // copies eax to PKRU
// Execute trusted component’s code
xor ecx, ecx
xor edx, edx
mov PKRU_DISALLOW_TRUSTED, eax
WRPKRU // copies eax to PKRU
cmp PKRU_DISALLOW_TRUSTED, eax
je continue
syscall exit // terminate program
continue:
// control returns to the untrusted
application here
1
2
3
4
6
8
9
10
11
12
13
14
15
16
Listing 1: Call gate in assembly. The code of the trusted
component’s entry point may be inlined by the compiler on
line 6, or there may be an explicit direct call to it.
later returns control to U after disabling access to MT. This
requires two WRPKRUs. The primary challenge in design-
ing the call gate is ensuring that both these WRPKRUs are
safe in the sense explained in Section 3.1.
Listing 1 shows the assembly code of a call gate. WRP-
KRU expects the new PKRU value in the eax register and
requires ecx and edx to be 0. The call gate works as follows.
First, it sets PKRU to enable access to MT (lines 1–4). The
macro PKRU_ALLOW_TRUSTED is a constant that allows
access to MT and MU.2 Next, the call gate transfers control
to the designated entry point of T (line 6). T’s code may be
invoked either by a direct call, or it may be inlined.
After T has ﬁnished,
to MU but not MT.
the call gate sets PKRU
to disable access to MT (lines 8–11).
The macro
PKRU_DISALLOW_TRUSTED is a constant
that al-
lows access
Next,
the call
gate checks that
the PKRU was actually loaded with
PKRU_DISALLOW_TRUSTED (line 12). If this is not the
case, it terminates the program (line 14), else it returns con-
trol to U (lines 15–16). The check on line 12 may seem re-
dundant since eax is set to PKRU_DISALLOW_TRUSTED
on line 10. However, the check prevents exploitation of the
WRPKRU on line 11 by a control-ﬂow hijack attack (ex-
plained next).
Safety Both occurrences of WRPKRU in the call gate are
safe. Neither can be exploited by a control ﬂow hijack to get
unauthorized access to MT. The ﬁrst occurrence of WRP-
KRU (line 4) is immediately followed by (a direct control
transfer to) a designated entry point of T. This instance can-
1We know of only one user-mode Linux application – the dynamic
linker, ld, that legitimately uses XRSTOR. However, ld categorically does
not restore PKRU through XRSTOR, so this safe check can be added to it.
2To grant read (resp. write) access to domain i, bit 2i (resp. 2i + 1) must
be set in the PKRU. PKRU_ALLOW_TRUSTED sets the 4 least signiﬁcant
bits to grant read and write access to domains 0 (MU) and 1 (MT).
USENIX Association
28th USENIX Security Symposium    1225
not be exploited to transfer control to anywhere else. The
second occurrence of WRPKRU (line 11) is followed by a
check that terminates the program if the new permissions
include access to MT.
If, as part of an attack, the execu-
tion jumped directly to line 11 with any value other than
PKRU_DISALLOW_TRUSTED in eax, the program would
be terminated on line 14.
Efﬁciency A call gate’s overhead on a roundtrip from U to
T is two WRPKRUs, a few very fast, standard register oper-
ations and one conditional branch instruction. This overhead
is very low compared to other hardware isolation techniques
that rely on pages tables and syscalls or hypervisor trampo-
lines to change privileges (see also Section 6.5).
Use considerations ERIM’s call gate omits features that
readers may expect. These features have been omitted to
avoid having to pay their overhead when they are not needed.
First, the call gate does not include support to pass parame-
ters from U to T or to pass a result from T to U. These
can be passed via a designated shared buffer in MU (both U
and T have access to MU). Second, the call gate does not
scrub registers when switching from T to U. So, if T uses
conﬁdential data, it should scrub any secrets from registers
before returning to U. Further, because T and U share the
call stack, T must also scrub secrets from the stack prior to
returning. Alternatively, T can allocate a private stack for
itself in MT, and T’s entry point can switch to that stack im-
mediately upon entry. This prevents T’s secrets from being
written to U’s stack in the ﬁrst place. (A private stack is also
necessary for multi-threaded applications; see Section 3.7).
3.4 Binary inspection
Next, we describe ERIM’s binary inspection. The inspection
prevents U from mapping any executable pages with unsafe
WRPKRU and XRSTOR occurrences and consists of two
parts: (i) an inspection function that veriﬁes that a sequence
of pages does not contain unsafe occurrences; and, (ii) an
interception mechanism that prevents U from mapping exe-
cutable pages without inspection.
Inspection function The inspection function scans a se-
quence of pages for instances of WRPKRU and XRSTOR.
It also inspects any adjacent executable pages in the address
space for instances that cross a page boundary.
For every WRPKRU, it checks that the WRPKRU is safe,
i.e., either condition (A) or (B) from Section 3.1 holds. To
check for condition (A), ERIM needs a list of designated en-
try points of T. The source of this list depends on the nature
of T and is trusted. If T consists of library functions, then
the programmer marks these functions, e.g., by including a
unique character sequence in their names. If the functions
are not inlined by the compiler, their names will appear in
the symbol table. If T’s functions are subject to inlining or
if they are generated by a compiler pass, then the compiler
must be directed to add their entry locations to the symbol
table with the unique character sequence. In all cases, ERIM
can identify designated entry points by looking at the symbol
table and make them available to the inspection function.
Condition (B) is checked easily by verifying that the
WRPKRU is immediately followed by exactly the instruc-
tions on lines 12–15 of Listing 1. These instructions ensure
that the WRPKRU cannot be used to enable access to MT
and continue execution.
For every XRSTOR, the inspection function checks that
the XRSTOR is followed immediately by the following in-
structions, which check that the eax bit that causes XRSTOR
to load PKRU (bit 9) is not set: bt eax, 0x9; jnc
.safe; EXIT; .safe:.... Here, EXIT is a macro
that exits the program. Trivially, such a XRSTOR cannot
be used to enable access to MT and continue execution.
Interception On recent (≥ 4.6) versions of Linux, inter-
ception can be implemented without kernel changes. We in-
stall a seccomp-bpf ﬁlter [29] that catches mmap, mprotect,
and pkey_mprotect syscalls which attempt to map a region
of memory as executable (mode argument PROT_EXEC).
Since the bpf ﬁltering language currently has no provisions
for reading the PKRU register, we rely on seccomp-bpf’s
SECCOMP_RET_TRACE option to notify a ptrace()-based
tracer process. The tracer inspects the tracee and allows the
syscall if it was invoked from T and denies it otherwise. The
tracer process is conﬁgured so that it traces any child of the
tracee process as well. While ptrace() interception is expen-