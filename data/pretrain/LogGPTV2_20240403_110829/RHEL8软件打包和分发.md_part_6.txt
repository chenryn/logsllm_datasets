Requires:       bash
BuildArch:      noarch
%description
The long-tail description for our Hello World Example implemented in
bash script.
%prep
%setup -q
%build
%install
mkdir -p %{buildroot}/%{_bindir}
install -m 0755 %{name} %{buildroot}/%{_bindir}/%{name}
%files
%license LICENSE
%{_bindir}/%{name}
%changelog
* Tue May 31 2016 Adam Miller  - 0.1-1
- First bello package
- Example second item in the changelog for version-release 0.1-1
```
`BuildRequires`{.literal} 指令（指定软件包的 build-time
依赖项）被删除，因为没有 `bello`{.literal} 的构建步骤。Bash
是一种原始解释的编程语言，文件刚安装到其在系统上的位置。
`Requires`{.literal} 指令指定软件包的运行时依赖项，只包括
`bash`{.literal}，因为 `bello`{.literal} 脚本仅需要 `bash`{.literal}
shell 环境才能执行。
`%build`{.literal} 部分指定如何构建软件，这是空白的，因为不需要构建
`bash`{.literal}。
要安装 `bello`{.literal}，您只需要创建目标目录并在其中安装可执行的
`bash`{.literal} 脚本文件。因此，您可以使用 `%install`{.literal}
部分中的 `install`{.literal} 命令。RPM
宏允许在不使用硬编码路径的情况下执行此操作。
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-pello_working-with-spec-files}使用 Python 编写的程序的 SPEC 文件示例 {.title}
:::
本节显示了使用 Python 编程语言编写的 [**pello**]{.strong} 程序的示例
SPEC 文件。有关 [**pello**]{.strong} [的更多信息，请参阅第 2.1
节，\"What
源代码是\"。](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "源代码是什么"){.link}
::: title
**使用 Python 编写的 [**pello**]{.strong} 程序的 SPEC 文件示例**
:::
``` literallayout
Name:           pello
Version:        0.1.1
Release:        1%{?dist}
Summary:        Hello World example implemented in Python
License:        GPLv3+
URL:            https://www.example.com/%{name}
Source0:        https://www.example.com/%{name}/releases/%{name}-%{version}.tar.gz
BuildRequires:  python
Requires:       python
Requires:       bash
BuildArch:      noarch
%description
The long-tail description for our Hello World Example implemented in Python.
%prep
%setup -q
%build
python -m compileall %{name}.py
%install
mkdir -p %{buildroot}/%{_bindir}
mkdir -p %{buildroot}/usr/lib/%{name}
cat > %{buildroot}/%{_bindir}/%{name}  - 0.1.1-1
  - First pello package
```
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
[**pello**]{.strong}
程序采用字节编译语言编写。因此，由于生成的文件不包含该条目，因此 shebang
不适用。
由于 shebang 不适用，您可能需要应用以下方法之一：
::: itemizedlist
-   创建一个将调用可执行文件的非字节编译 shell 脚本。
-   提供一小段 Python 代码，这些代码未被编译为程序执行的入口点。
:::
这些方法对于具有数千行代码的大型软件项目特别有用，其中的字节预编译代码的性能会提高。
:::
`BuildRequires`{.literal} 指令指定软件包的 build-time
依赖项，它包含两个软件包：
::: itemizedlist
-   执行字节compile 构建过程需要 `python`{.literal} 软件包
-   需要 `bash`{.literal} 软件包来执行小入口点脚本
:::
`Requires`{.literal} 指令指定软件包的运行时依赖项，它只包含
`python`{.literal} 软件包。`pello`{.literal} 程序需要 `python`{.literal}
软件包在运行时执行字节编译的代码。
`%build`{.literal} 部分指定如何构建软件，它与软件被字节编译的事实对应。
要安装 `pello`{.literal}，您需要创建一个 wrapper 脚本，因为 shebang
不适用于字节编译的语言。要实现这一目的有多种选项，例如：
::: itemizedlist
-   创建一个单独的脚本，并将该脚本作为单独的 `SourceX`{.literal}
    指令使用。
-   在 SPEC 文件中在线创建文件.
:::
此示例演示了在 SPEC 文件中创建打包程序脚本，以演示 SPEC
文件本身可脚本化。此打包程序脚本将使用 `here`{.literal} 文档执行 Python
字节编译的代码。
本例中的 `%install`{.literal}
部分还对应于您需要将字节编译的文件安装到系统中的库目录中的事实，以便可以访问该文件。
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#an-example-spec-file-for-cello_working-with-spec-files}使用 C 编写的程序的 SPEC 文件示例 {.title}
:::
本节演示了使用 C [**编程语言编写的单元程序的一个**]{.strong} SPEC
文件示例。[**有关单元的更多信息，请参阅
[???](#preparing-software-for-rpm-packaging_packaging-and-distributing-software.html#what-is-source-code_preparing-software-for-rpm-packaging "源代码是什么"){.link}
第 2.1 节，\"What 源代码为\"。**]{.strong}
::: title
**使用 C 编写的 cello [**程序的**]{.strong} SPEC 文件示例**
:::
``` literallayout
Name:           cello
Version:        1.0
Release:        1%{?dist}
Summary:        Hello World example implemented in C
License:        GPLv3+
URL:            https://www.example.com/%{name}
Source0:        https://www.example.com/%{name}/releases/%{name}-%{version}.tar.gz
Patch0:         cello-output-first-patch.patch
BuildRequires:  gcc
BuildRequires:  make
%description
The long-tail description for our Hello World Example implemented in
C.
%prep
%setup -q
%patch0
%build
make %{?_smp_mflags}
%install
%make_install
%files
%license LICENSE
%{_bindir}/%{name}
%changelog
* Tue May 31 2016 Adam Miller  - 1.0-1
- First cello package
```
`BuildRequires`{.literal} 指令指定软件包的 build-time
依赖项，包括执行编译构建过程所需的两个软件包：
::: itemizedlist
-   `gcc`{.literal} 软件包
-   `make`{.literal} 软件包
:::
本例中省略了 `Requires`{.literal}
指令，它指定软件包的运行时依赖项。所有运行时要求都由
`rpmbuild`{.literal} 处理，`cello`{.literal} 程序不需要核心 C
标准库以外的任何内容。
`%build`{.literal} 部分反映了以下事实：在本例中为 cello
[**程序编写了一个**]{.strong} `Makefile`{.literal}，因此可以使用
`rpmdev-newspec`{.literal} 实用程序提供的 [GNU
make](http://www.gnu.org/software/make/){.link} 命令。但是，您需要删除对
`%configure`{.literal} 的调用，因为您没有提供配置脚本。
您可以使用 `rpmdev-newspec`{.literal} 命令提供的
`%make_install`{.literal}
[**宏完成单元程序的安装**]{.strong}。这是因为单元程序的 [
**`Makefile`{.literal}** ]{.strong} 可用。
:::
:::
::: section
::: titlepage
# []{#packaging-software_packaging-and-distributing-software.html#building-rpms_packaging-software}构建 RPM {.title}
:::
这部分论述了如何在为程序创建 SPEC 文件后构建 RPM。
RPM 使用 `rpmbuild`{.literal}
命令构建。这个命令需要一个特定的目录和文件结构，它与
`rpmdev-setuptree`{.literal} 工具设置的结构相同。
不同的用例和所需的结果需要 `rpmbuild`{.literal}
命令的不同参数组合。本节描述了两个主要用例：
::: itemizedlist
-   构建源 RPM
-   构建二进制 RPM
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#building-source-rpms_building-rpms}构建源 RPM {.title}
:::
这一段是过程模块简介：对流程的简短描述。
::: title
**先决条件**
:::
要打包的程序的 SPEC 文件必须已经存在。有关创建 SPEC
[文件的更多信息，请参阅使用 SPEC
文件](#packaging-software_packaging-and-distributing-software.html#working-with-spec-files "使用 SPEC 文件"){.link}。
::: title
**流程**
:::
以下流程描述了如何构建源 RPM。
::: itemizedlist
-   使用指定的 SPEC 文件运行 `rpmbuild`{.literal} 命令：
    ``` literallayout
    $ rpmbuild -bs SPECFILE
    ```
    将 [*SPECFILE*]{.emphasis} 替换为 SPEC 文件.`-bs`{.literal}
    选项代表构建源。
:::
以下示例演示了为 `bello`{.literal}、`pello`{.literal} 和
`cello`{.literal} 项目构建源 RPM。
::: title
**为 Bloo、pello 和单元构建源 RPM.**
:::
``` literallayout
$ cd ~/rpmbuild/SPECS/
8$ rpmbuild -bs bello.spec
Wrote: /home/admiller/rpmbuild/SRPMS/bello-0.1-1.el8.src.rpm
$ rpmbuild -bs pello.spec
Wrote: /home/admiller/rpmbuild/SRPMS/pello-0.1.2-1.el8.src.rpm
$ rpmbuild -bs cello.spec
Wrote: /home/admiller/rpmbuild/SRPMS/cello-1.0-1.el8.src.rpm
```
::: itemizedlist
**验证步骤**
-   确保 `rpmbuild/SRPMS`{.literal} 目录包含生成的源 RPM。目录是
    `rpmbuild`{.literal} 预期的结构的一部分。
:::
:::
::: section
::: titlepage
## []{#packaging-software_packaging-and-distributing-software.html#building-binary-rpms_building-rpms}构建二进制 RPM {.title}
:::
对于构建二进制 RPM，可以使用以下方法：
::: itemizedlist
-   从源 RPM 重建二进制 RPM
-   从 SPEC 文件构建二进制 RPM
-   从源 RPM 构建二进制 RPM
:::
::: section
::: titlepage
### []{#packaging-software_packaging-and-distributing-software.html#rebuilding-a-binary-from-a-source-rpm_building-binary-rpms}从源 RPM 重建二进制 RPM {.title}
:::
以下步骤演示了如何从源 RPM(SRPM)重建二进制 RPM。
::: itemizedlist
**流程**
-   要从其 SRPM 重建 `bello`{.literal}、`pello`{.literal} 和
    `cello`{.literal}，请运行：
    ``` literallayout
    $ rpmbuild --rebuild ~/rpmbuild/SRPMS/bello-0.1-1.el8.src.rpm
    [output truncated]
    $ rpmbuild --rebuild ~/rpmbuild/SRPMS/pello-0.1.2-1.el8.src.rpm
    [output truncated]
    $ rpmbuild --rebuild ~/rpmbuild/SRPMS/cello-1.0-1.el8.src.rpm
    [output truncated]
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
调用 `rpmbuild --rebuild`{.literal} 涉及：
::: itemizedlist
-   将 SRPM 的内容（SPEC 文件和源代码）安装到 `~/rpmbuild/`{.literal}
    目录中。
-   使用安装的内容进行构建.
-   删除 SPEC 文件和源代码.
:::
要在构建后保留 SPEC 文件和源代码，您可以：