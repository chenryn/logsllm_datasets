### Coherence Times and Channel Conditions

The coherence times range from 10 ms to 100 µs, capturing a variety of channel conditions. These include movement at walking speed in indoor environments (approximately 30 ms) and movement at train speeds (approximately 100 µs). Table 4 provides detailed information on the various experiments.

### 5.2 SoftPHY Reliably Predicts BER

#### BER Prediction in Static Channels

We first analyze data from the static experiment described in Table 4. For each frame in the trace, we compute the probability of error \( p_k \) for each bit \( k \) using Equation 3. We then average \( p_k \) over the frame to compute the per-frame average BER. Separately, we determine the frame's ground truth BER by comparing the received bits against the known payload. The results are aggregated across different transmit powers, sender-receiver pairs, and bit rates. The BER estimate data is binned in fixed-sized bins of 0.1 units in the SoftPHY metric (which roughly corresponds to logarithmically-sized bins of the estimated BER).

Figure 7(a) plots the true BER of the frame against the BER estimated from SoftPHY hints. Error bars in this and subsequent figures indicate one standard deviation about the mean. The figure shows that the SoftPHY-based BER is an excellent predictor of the true BER. Additionally, the error variance of the SoftPHY BER estimate (across different bit rates) remains below one-tenth of an order of magnitude, indicating that it is a reliable estimator of the true BER.

In the preceding experiment, BER prediction is tested frame by frame. However, it is difficult to reliably observe BERs below \( 10^{-3} \) in a single 960-byte frame. Therefore, we aggregate all the frames associated with a SoftPHY-based BER prediction bin and compute the average BER over the aggregated bits (Figure 7(b)). The results show that SoftPHY hints accurately predict the ground truth BER down to \( 10^{-7} \); the aggregate bits in the graph bins were insufficient to measure lower BERs.

In contrast, SNR-based BER prediction results in a much less reliable estimate. We separate the trace data by bit rate to analyze SNR-based BER predictions because the SNR-BER relationship changes for different modulation and coding schemes (unlike the SoftPHY-BER relationship). Figure 7(c) shows the ground truth BER plotted against the SNR estimate of the frame.

**Note:** If the Doppler spread in frequency due to mobility is \( f \), the coherence time of the channel is approximately \( \frac{0.4}{f} \) [23].

### Evaluation Testbed

Figure 6 illustrates the evaluation testbed, where lightly shaded (red) nodes are senders and black nodes are receivers. The thick dashed line indicates the approximate path of the sender in mobility experiments. Background 2.4 GHz traffic provides co-channel interference.

### Modes of Operation

Table 3 summarizes the modes of operation of our OFDM prototype, including the RF bandwidth sampled, the number of OFDM subcarriers, and the OFDM symbol time \( T \) in each mode. The cyclic prefix length is one-fourth the OFDM subcarrier length.

We run our software radio experiments in two modes:

1. **Long Range Mode**: In this mode, the USRP samples a smaller RF bandwidth in the 2.4 GHz band, resulting in typical frame durations of tens of milliseconds. This mode is suitable for static topologies with little variation at that timescale.
2. **Short Range Mode**: This mode results in frames lasting less than a millisecond, making it suitable for mobility experiments in fading channels that change on shorter timescales. Experiments using our fading channel simulator (instead of the real RF channel) were not limited by the RF front-end and were run over the normal 20 MHz band with 802.11-like frame durations.

### 5.3 Interference Detection Accuracy

#### False Positives

To measure the false positive rate (i.e., the rate at which the fading effects of the wireless channel are falsely identified as collisions), we collect static and walking traces from Table 4 in a quiet frequency band without any other 802.11a/g transmissions. Our collision detection algorithm identified less than 1% of the lost frames as collisions.

#### Interference Detection Accuracy

We use the traces from the static interference experiment described in Table 4 to measure the accuracy of our interference detection algorithm. The sender-receiver link in the trace delivered 100% of its frames correctly in the absence of interference. In the presence of interference, one of three things can happen to a frame:

1. The frame can be silently lost if the interferer transmits before the sender, either because the receiver locks onto the interferer’s frame or because the sender’s preamble is corrupted by the interferer’s signal.
2. The frame can be received but with errors.
3. The frame can be correctly received.

For frames received with bit errors, we run our interference detection algorithm on the SoftPHY hint traces to see what fraction of these losses our algorithm identifies as collisions. We slice the interference detection accuracy results by the different transmit power levels of the interferer and the transmit bit rate of the sender. Figures 10 and 11 show the fraction of frames that fall into each of the cases described above versus the relative interferer strength (in dB) and the sender’s bit rate, respectively. Our algorithm can always identify more than 80% of frames received in error as collisions.

### 6. Evaluation of SoftRate

#### Method

**Trace-Driven Simulation:**

To conduct realistic simulations, we evaluate SoftRate using traces from software radio experiments described in Table 4. For each wireless link being simulated, we seed the simulator with a set of traces, one per bit rate, that completely specify the channel characteristics of the link (e.g., whether a frame sent is correctly received, and what its SNR and SoftPHY hints would be) for each point in time during the simulation. When the PHY in the simulator receives a frame at a certain bit rate, the fate of the frame is decided by looking up the appropriate trace. The bit rate adaptation protocol at the MAC layer receives and reacts to the feedback from the PHY (frame reception events, SNR estimates, or SoftPHY hints) and sets a suitable bit rate for the next frame. We make no assumptions about the symmetry of links and use different traces for each of the two unidirectional links between every sender and receiver.

While collecting traces for simulations, we ensure that the channel conditions are consistent across the various bit rates at any point in time. For traces collected using the channel simulator, we simulate the same fading process across experiments at different bit rates. We run live experiments in the short range mode with small frames sent at each of the bit rates in a round-robin manner, running through all the bit rates once in under 5 milliseconds. We find that the BER across the various bit rates is monotonic in 96% of such 5 ms cycles, indicating that the channel is fairly invariant across all the bit rates in a 5 ms snapshot.

All traces are collected with one sender transmitting at a time. In simulations with more than one sender, these traces collected in isolation accurately model frame receptions when there are no concurrent transmissions. In case more than two senders transmit simultaneously (e.g., experiments in interference-dominated channels in §6.4), we assume both colliding frames are lost.

**Simulation Topology:**

The topology used in our simulations is shown in Figure 12. \( N \) clients connect to an access point (AP) that supports the 802.11a/g bit rates from 6 Mbps to 36 Mbps. The AP is connected to a LAN gateway node by a point-to-point link of bandwidth 50 Mbps and one-way delay of 10 ms. In each experiment, \( N \) TCP flows are set up to transfer 1400 byte data frames in either direction between the 802.11 clients and the corresponding wired LAN nodes. Each node’s MAC queue length slightly exceeds the bandwidth-delay product of the bottleneck wireless link.

**Algorithms Evaluated:**

We compare the performance of SoftRate against the following rate adaptation algorithms:

1. **Two SNR-based protocols:**
   - A protocol that uses SNR feedback sent via the link-layer ACK to pick the transmit bit rate, similar to RBAR but without the RTS/CTS overhead.
   - A protocol that uses the average SNR over multiple frames, similar to CHARM. The SNR-BER relationships for both protocols are computed from the traces used for evaluation.

2. **Two frame-level schemes:**
   - RRAA
   - SampleRate. The various parameters in these protocols are set as described in the corresponding references, except for the interval over which transmission time averages are computed in SampleRate, for which a value of one second gave better performance than the ten-second value suggested in [4].

3. **An “omniscient” algorithm:**
   - An algorithm that always picks the highest rate guaranteed to succeed, which a simulator with a priori knowledge of channel characteristics computes from the traces.