herence times2 between 10 ms and 100 µs, and captures a variety
of channel conditions ranging from movement at walking speed in
indoor environments (close to 30 ms) to movement at train speeds
(close to 100 µs). Table 4 elaborates on the various experiments.
5.2 SoftPHY Reliably Predicts BER
BER prediction in static channels. We ﬁrst analyze data from
the static experiment described in Table 4. For each frame in the
trace, we compute the probability of error pk for each bit k us-
ing Equation 3. Then we average pk over the frame to compute
a per-frame average BER. Separately, we determine the frame’s
ground truth BER by checking the received bits against the known
payload. We aggregate the results across different transmit pow-
ers, sender-receiver pairs, and bit rates. We bin the BER estimate
data in ﬁxed-sized bins of 0.1 units in the SoftPHY metric (roughly
logarithmically-sized bins of the estimated BER). Figure 7(a) plots
the true BER of the frame against the BER estimated from Soft-
PHY hints; error bars in this and subsequent ﬁgures indicate one
standard deviation about the mean. We see from the ﬁgure that the
SoftPHY-based BER is an excellent predictor of true BER. We also
see that the error variance of the SoftPHY BER estimate (across
different bit rates) stays below one-tenth of one order of magni-
tude, implying that it is also a reliable estimator of the true BER.
The preceding experiment tests BER prediction frame by frame.
But it is hard to reliably observe BERs below 10−3 in one 960-
byte frame. We therefore aggregate all the frames associated with
a SoftPHY-based BER prediction bin in the above experiment, and
compute the average BER over the aggregated bits (Figure 7(b)).
We see that SoftPHY hints accurately predict ground truth BER all
the way down to 10−7; the aggregate bits in the graph bins were
not sufﬁcient to measure lower BERs.
In contrast, SNR-based BER prediction results in a much less
reliable estimate. We separate the trace data by bit rate to analyze
SNR-based BER predictions, because the SNR-BER relationship
changes for different modulation and coding schemes (unlike in
the case of the SoftPHY-BER relationship). Figure 7(c) shows the
ground truth BER plotted against the SNR estimate of the frame
2If the Doppler spread in frequency due to mobility is f, then the
coherence time of the channel is roughly 0.4
f [23].
Figure 6: Evaluation testbed:
light (red) shaded nodes are
senders; black nodes are receivers. The thick dashed line shows
the approximate path of the sender in mobility experiments.
Background 2.4 GHz trafﬁc provides co-channel interference.
Mode
Long range
Short range
Simulation
Bandwidth Tones
1024
500 KHz
512
4 MHz
20 MHz
128
T
2.6 ms
160 µs
8 µs
Table 3: Modes of operation of our OFDM prototype. Also
shown are the RF bandwidth sampled, number of OFDM sub-
carriers, and OFDM symbol time T in each mode. The cyclic
preﬁx length is one-fourth the OFDM subcarrier length.
We run our software radio experiments in two modes.
In the
long range mode, the USRP samples a smaller RF bandwidth in
the 2.4 GHz band than in the short range mode. Because of sam-
pling error, the latter results in signals of lower ﬁdelity from the
USRP, resulting in it being unusable over a few links in our testbed.
However, a smaller RF bandwidth in the long range mode also
leads to typical frame durations of tens of milliseconds. As a re-
sult, only experiments in static topologies that see little variation
at that timescale were run in the long range mode. In contrast, the
short range mode results in frames that last less than a millisecond,
making it suitable to run mobility experiments in fading channels
that change on shorter timescales. Experiments using our fading
channel simulator (instead of the real RF channel) were not limited
by the RF front-end; such experiments were run over the normal
20 MHz band with 802.11-like frame durations. We summarize
these modes of operation in Table 3. Note that all the modes use
more subcarriers than used in commodity 802.11 cards today (i.e.,
0515 feet109(a) Per-frame average BER predicted
by SoftPHY hints
(b) Aggregated average BER pre-
dicted by SoftPHY hints.
(c) Per-frame average BER predicted
by SNR.
Figure 7: SoftPHY-based and SNR-based BER estimation in a static wireless channel.
Figure 8: SoftPHY-based BER estimation in a mobile channel.
Figure 9: SNR-based BER estimation in a mobile channel.
for two bit rates, with the data binned as described earlier. We
observe that a given SNR measurement corresponds to a very wide
range of estimated BERs (the estimate has a mean error variance
of 2.8 × 10−3 for QPSK 3/4 rate and 1.7 × 10−3 for QAM16 1/2
rate), illustrating that SNR is an unreliable predictor of BER.
BER prediction in mobile channels. We now show that Soft-
PHY hints reliably estimate BER even in mobile fading channels
with widely varying channel coherence times. This section uses
data from the walking and simulation traces of Table 4. For each
dataset, we bin the data by SoftPHY-estimated BER, and compute
the mean ground truth BER in each bin. Figure 8 shows the results,
with the two curves corresponding to simulation traces at walk-
ing (Doppler spread 40 Hz) and vehicular speeds (Doppler spread
400 Hz), and the points in the ﬁgure corresponding to experimental
data from the walking traces. Figure 9 shows the corresponding
SNR-BER curves at the QAM16 1/2 rate.
From the ﬁgures, we see that the SoftPHY-based BER estimate
is not sensitive to mobility speed while the SNR-BER curves are.
The fact that the SNR-BER relationship changes with channel co-
herence time is well-known [19] and has also been observed ex-
perimentally by Camp and Knightly [5]. This happens because the
SNR measured using the preamble does not capture the variation
of SNR that happens over the body of the frame in fading chan-
nels, which in turn depends on the coherence time of the channel.
On the other hand, SoftPHY hints reﬂect the increasing number
of deep fades in the body of the frame as channel coherence time
decreases, and therefore estimate BER across all wireless propaga-
tion environments accurately. Because the SNR-BER relationship
changes with channel coherence time, SNR-based protocols must
be carefully retrained for every operating environment; we show
later (§6.3) that these protocols pick inaccurate bit rates and suffer
a performance penalty if not retrained. In contrast, SoftRate can be
used in any wireless propagation environment without retraining.
5.3 Interference Detection Accuracy
We now evaluate our implementation of our SoftPHY-based in-
terference detection algorithm (as described in §3.2 and §4).
False positives. To measure the false positive rate (i.e., the rate
at which the fading effects of the wireless channel are falsely identi-
ﬁed as collisions), we collect the static and walking traces from Ta-
ble 4 in a quiet frequency band without any other 802.11a/g trans-
missions. Out of the resulting frames lost, our collision detection
algorithm identiﬁed less than 1% of them as collisions.
Interference detection accuracy. We use the traces from the
static interference experiment described in Table 4 to measure the
accuracy of our interference detection algorithm.
The sender-receiver link in the trace delivered 100% of its frames
correctly in the absence of interference. In the presence of interfer-
ence, one of three things can happen to a frame. First, the frame
can be silently lost if the interferer transmits before the sender, ei-
10-310-210-110010-310-210-1100Ground truth BERBER estimate from SoftPHY hints10-710-610-510-410-310-210-110010-710-610-510-410-310-210-1100Ground truth BERBER estimate from SoftPHY hints10-310-210-1100 0 2 4 6 8 10 12 14 16Ground truth BERSNR (dB)QPSK 3/4QAM16 1/210-210-110010-210-1100Ground truth BERBER estimate from SoftPHY hintsSim, WalkingSim, VehicularExpt, Walking10-210-1100 0 2 4 6 8 10 12 14 16Ground truth BERSNR (dB)Sim, WalkingSim, VehicularExpt, Walking10Figure 10: Interference detection accuracy as a function of
varying interferer power.
Figure 11: Interference detection accuracy as a function of
transmit bit rate.
ther because the receiver has locked on to the interferer’s frame, or
because the sender’s preamble is corrupted by the interferer’s sig-
nal. Second, the frame can be received, but with errors. Finally, the
frame can be correctly received. In the case of frames received with
bit errors, we run our interference detection algorithm on the Soft-
PHY hint traces of the frame to see what fraction of these losses
our algorithm identiﬁes as collisions.3
We slice the interference detection accuracy results by the dif-
ferent transmit power levels of the interferer and the transmit bit
rate of the sender. Figure 10 shows the fraction of frames that fall
into each of the cases described above versus the relative interferer
strength (in dB). Also shown on the graph is the interference detec-
tion accuracy of our algorithm, which is computed as the fraction
of frames received with bit errors (i.e., the frames corresponding to
“collision” and “noise” in the ﬁgure) that our algorithm correctly
identiﬁes as collisions. Figure 11 shows the same data, but bro-
ken down by the sender’s bit rate. We ﬁnd that our algorithm can
always identify more than 80% of frames received in error as col-
lisions. Because the colliding packets are of the same size in this
3 We omit here results for QAM16 3/4 rate, because our current
implementation of that bit rate is untuned.
Figure 12: Topology used for the ns-3 evaluation of SoftRate.
experiment, we will be able to detect most of the silent losses as
collisions as well by adding postambles.
6. EVALUATION OF SOFTRATE
In this section, we evaluate SoftRate using trace-driven simula-
tions on ns-3, as described in §4. We quantify the performance
gains for end-to-end TCP transfers when running SoftRate at the
link layer in the following wireless environments: (1) Slow fad-
ing mobile channels, (2) Simulated fast fading channels, and (3)
Interference-dominated channels.
We use TCP throughput as the metric to evaluate SoftRate against
other rate adaptation protocols because applications like TCP and
VOIP are more sensitive to losses, and therefore require respon-
sive and accurate rate adaptation protocols to function well. While
previous work mostly uses UDP throughput as a measure of per-
formance, we believe that gains obtained on UDP transfers without
congestion control are hard to realize in most practical applications.
6.1 Method
Trace-driven simulation. To conduct realistic simulations, we
evaluate SoftRate using traces from software radio experiments de-
scribed in Table 4. For each wireless link being simulated, we seed
the simulator with a set of traces, one per bit rate, that completely
specify the channel characteristics of the link (like, whether a frame
sent is correctly received, and what its SNR and SoftPHY hints
would be) for each point in time during the simulation. When the
PHY in the simulator receives a frame at a certain bit rate, the fate
of the frame is decided by looking up the appropriate trace. The bit
rate adaptation protocol at the MAC layer receives and reacts to the
feedback from the PHY (frame reception events, SNR estimates,
or SoftPHY hints, as the case may be) and sets a suitable bit rate
for the next frame. We make no assumptions on the symmetry of
links, and use different traces for each of the two uni-directional
links between every sender and receiver.
While collecting traces to be used in simulations, we ensure that
the channel conditions are consistent across the various bit rates at
any point of time. For traces collected using the channel simulator,
we simulate the same fading process across experiments at different
bit rates. We run live experiments in the short range mode with
small frames sent at each of the bit rates in a round robin manner,
running through all the bit rates once in under 5 milliseconds. We
ﬁnd that the BER across the various bit rates is monotonic in 96%
of such 5 ms cycles, indicating that the channel is indeed fairly
invariant across all the bit rates in a 5 ms snapshot.
All traces are collected with one sender transmitting at a time.
In simulations with more than one sender, these traces collected
in isolation accurately model frame receptions when there are no
concurrent transmissions. In case more than two senders transmit
simultaneously (e.g., experiments in interference-dominated chan-
nels in §6.4), we assume both colliding frames are lost.
 0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.60-2-4-8-15Fraction of FramesRelative Interferer Power (dB)CorrectCollisionNoiseSilent LossAccuracy 0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6QAM16 1/2QPSK 3/4QPSK 1/2BPSK 3/4BPSK 1/2Fraction of FramesBit rateCorrectCollisionNoiseSilent LossAccuracy............AP802.11 clientsData transferPoint−pointLinkWired LAN11Figure 13: Aggregate TCP throughput (slow-fading mobility).
Figure 14: Rate selection accuracy with one TCP ﬂow in a mo-
bile slow fading channel.
Simulation topology. The topology used in our simulations is
shown in Figure 12. N clients connect to an access point (AP) that
supports the 802.11a/g bit rates from 6 Mbps to 36 Mbps. The AP is
connected to a LAN gateway node by a point-to-point link of band-
width 50 Mbps and one-way delay of 10 ms. In each experiment,
N TCP ﬂows are set up to transfer 1400 byte data frames in either
direction between the 802.11 clients and the corresponding wired
LAN nodes. Each node’s MAC queue length slightly exceeds the
bandwidth-delay product of the bottleneck wireless link.
Algorithms evaluated. We compare the performance of Soft-
Rate against the following rate adaptation algorithms.
1. Two SNR-based protocols: (i) a protocol that uses SNR feed-
back sent via the link-layer ACK to pick the transmit bit rate,
much like RBAR but without the RTS/CTS overhead, and (ii) a
protocol that uses the average SNR over multiple frames, much
like CHARM4. The SNR-BER relationships for both protocols
are computed from the traces used for evaluation.
2. Two frame-level schemes: (i) RRAA, and (ii) SampleRate. The
various parameters in these protocols are set as described in the
corresponding references, except for the interval over which
transmission time averages are computed in SampleRate, for
which a value of one second gave a better performance than the
ten second value suggested in [4].
3. An “omniscient” algorithm that always picks the highest rate
guaranteed to succeed, which a simulator with a priori knowl-
edge of channel characteristics computes from the traces.