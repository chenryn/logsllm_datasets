**作者： 天宸@蚂蚁安全实验室  
原文链接：**
区块链安全是区块链的命门。如果没有安全的1，后面跟再多0都没有意义。蚂蚁安全实验室全新推出“区块链安全专栏”，持续更新有关智能合约安全分析、链平台、密码学等最新技术思考和实践。
作为智能合约安全系列文章的首篇，本文将围绕合约运行平台的运行机制展开分享。欢迎持续关注！
**专家点评**
西安电子科技大学区块链应用与测评中心副主任卫佳在阅读了本文后表示，文章从“智能合约”概念的起源轻松过渡到区块链语境，用简洁的语言描述了区块链视角下智能合约的关键特性：运行环境可信、规则公开透明。全文脉络清晰可见，对智能合约的早期雏形把握准确，以不长的篇幅全面介绍了智能合约演进的路线、具体的开发方法和其后可能的发展方向。既能为初学者提供便捷高效的入门参考，又能为合格开发者提供知识回顾和建立完整视野的机会。
## **01** **引 言**
智能合约是 1996 年由Nick Szabo
尼克萨博提出的理念。当时，他对智能合约定义是：智能合约是一组以数字形式指定的承诺，包括各方在其中履行这些承诺的协议。（A smart contract is
a set of promises, specified in digital form, including protocols within which
the parties perform on these promises.）。
由于缺少可信的执行环境，智能合约并没有被应用到实际产业中，自比特币诞生后，人们认识到比特币的底层技术区块链能为智能合约提供不可篡改的存储和确定性的运行机制，智能合约有了可落地的基础。以太坊首先看到了区块链和智能合约的契合，发布了白皮书《以太坊：下一代智能合约和去中心化应用平台》。借着以太坊的发展，智能合约的概念得以普及。
在加密货币领域，币安将智能合约定义为在区块链上运行的应用或程序。通常情况下，它们为一组具有特定规则的数字化协议，且该协议能够被强制执行。这些规则由计算机源代码预先定义，所有网络节点会复制和执行这些计算机源码。区块链可以看作智能合约的执行平台，在不同的平台上，智能合约的执行方式不同。
## **02** **智 能 合 约 平 台**
智能合约的执行要依托于区块链平台。目前主流的区块链平台有：以比特币为代表的区块链 1.0，以以太坊为代表的区块链 2.0，以 EOS 为代表的区块链
3.0，以及众多的联盟链平台。智能合约在每一种平台上都有不同的演进。
以比特币和其他加密货币为代表的区块链技术被称为区块链
1.0，它具有去中心化，防篡改，匿名和可审计性的典型特征。但是，由于比特币脚本语言的局限性，无法使用复杂的逻辑编写合约（比特币脚本语言只有256条指令，其中15条当前被禁用，75条被保留）。由于功能有限，比特币只能被视为智能合约的原型。
以太坊等新兴的区块链平台包含在区块链上运行用户定义程序的想法，从而借助图灵完备的编程语言创建了富有表现力的定制智能合约。以太坊智能合约的代码以基于堆栈的字节码语言编写，并在以太坊虚拟机（EVM）中执行。几种高级语言（例如Solidity
和 Vyper）可用于编写以太坊智能合约。然后可以将这些语言的代码编译为 EVM 字节码以运行。以太坊目前是开发智能合约最流行的平台，因此被称为区块链
2.0。
尽管以太坊创造性引入智能合约概念，极大的简化了区块链应用的开发，但以太坊平台依然有一个很大的限制，就是交易确认时间长及交易吞吐量比较小，从而严重影响了以太坊进行商业应用。EOS
项目的目标是建立可以承载商业级智能合约与应用的区块链基础设施，成为区块链世界的 “底层操作系统”。也被称为区块链 3.0。
在区块链的世界观里，一直有公有链和联盟链的分别。以上 3 种平台都是公有链，公有链的传播范围最广，也最为人们熟知。但是，由于性能及商业机密等问题，B2B
的业务很难迁移到公有链上，相较之下，联盟链是最为合适的选择。目前已有多种联盟链平台，例如，由 IBM 带头发起的 Hyperledger
Fabric，由摩根大通开发的企业级区块链平台 Quorum，由金链盟维护的 FISCO BCOS，以及由蚂蚁自研的 Mychain。
## _2.1_ 比特币中的智能合约
比特币是第一代区块链技术，在比特币平台尚没有引入图灵完备的智能合约机制，但是其有一套比特币的脚本(Script)。比特币脚本是有智能合约表达能力的，可以把比特币的脚本理解成是一种智能合约。
### **2.1.1 比特币脚本系统简介**
比特币交易脚本系统，也称为脚本，是一种基于逆波兰表示法的基于堆栈的执行语言。脚本是一种功能简单的编程语言，被设计成在有限的硬件上执行。
在比特币脚本语言中，包含了许多的特性，但都特定设定了一种重要的方式--除了条件流程控制之外，没有循环或复杂的流程控制功能。施加的这些限制确保该语言不被用于创造无限循环或其它类型的逻辑炸弹，这样的炸弹可以植入在一笔交易中，通过引起拒绝服务的方式攻击比特币网络。
### **2.1.2 脚本构建**
比特币的交易验证引擎依赖于两类脚本来验证比特币交易：一个锁定脚本 locking script 和一个解锁脚本 unlocking script。
锁定脚本是一个放置在一个输出值上的花费条件，它明确了今后花费这笔输出的条件。由于锁定脚本往往含有一个公钥或者比特币地址（即公钥的哈希），它也曾被称作
scriptPubKey。
解锁脚本是一个“解决”或满足锁定脚本设置的花费条件的脚本，它将允许输出被消费。解锁脚本是每一笔比特币交易输入的一部分。通常情况下，解锁脚本含有一个用户的私钥签发的数字签名，因此它曾被称作
ScriptSig。但是并非所有的解锁脚本都会包含签名。
转账给公钥的哈希 P2PKH 是最常见的比特币交易类型。以 P2PKH 为例，来看如何使用解锁脚本和锁定脚本。
图片来自《精通比特币2》6.4 小节
### **2.1.3 脚本执行**
把解锁脚本和锁定脚本拼接到一起，解锁脚本在前，锁定脚本在后。脚本语言通过从左至右地处理每一个项目的方式来执行脚本。
数字（常数）被推送至堆栈，操作符向堆栈推送或移除一个或者多个参数，对它们进行处理。执行过程如下。
图片来自《精通比特币2》6.4 小节
我们稍微做一些解释 。带'<>' 表示值，值要入栈，不带尖括号的表示操作符，操作符操作栈顶数据，不入栈。
那么上图的执行就是：
1.sig入栈
2.PubK入栈
3.DUP 是操作符，表示把栈顶值复制一份，此时栈里有 2 个 PubK。
图片来自《精通比特币2》6.4 小节
有了前面的基础，接下来的执行就比较显而易见了。如果执行成功，栈顶最后会显示 TRUE。
## 2.2 以太坊上的智能合约
以太坊作为第二代区块链技术的代表，提供了图灵完备的智能合约运行平台。智能合约运行在以太坊虚拟机(Ethereum Virtual Machine EVM)
上。 以太坊上有多种智能合约开发语言如 Solidity，Vyper，本文主要关注 Solidity。
以太坊上运行智能合约要遵循以下步骤：首先开发人员编写 Solidity 合约；然后使用客户端工具编译成 EVM
字节码，并部署到以太坊上；后续可以通过发送交易来触发智能合约执行，真正的执行由 EVM 负责。
### **2.2.1 开发 Solidity 合约**
Solidity 是一门面向合约的、为实现智能合约而创建的高级编程语言。这门语言受到了 C++，Python 和 Javascript
语言的影响，设计的目的是能在以太坊虚拟机（EVM）上运行。
Solidity 是静态类型语言，支持继承、库和复杂的用户定义类型等特性。更多的关于使用 Solidity 语言开发智能合约的介绍请参考Solidity
语言开发文档。
一个简单的智能合约示例如下：
    pragma solidity >=0.5.0  100);
          int y = -3 >> 1;
          // y == -2 (correct)
          do {
             x += 1;
             if (x > 10) continue;
             // 'Continue' jumps to the condition below.
          } while (x < 11);
          // Call returns (bool, bytes).
          // Data location must be specified.
          (bool success, bytes memory data) = address(other).call("f");
          if (!success)
             revert();
          return data;
       }
    }
此代码来自 Solidity 官网案例
目前 solidity 语言已经从 0.1.x 更新到 0.8.x，有了很多安全性的提升。此合约是 0.5.x 版本的合约，可以看到 0.5.x
相较于之前的版本对合约的语法做了很多的限制，如数据存储的位置必须要显示的指定，否则就会导致编译错误。这一限制很好的防御了“影子变量漏洞”（见下一篇文章），提高了合约的安全性。关于版本的更多的改进，可参阅Solidity
官方网站 的 ADDITIONAL MATERIAL 部分。
### **2.2.2 编译和部署合约**
部署一个新的智能合约或者说 DApp
其实总共只需要两个步骤，首先要将已经编写好的合约代码编译成字节代码，然后将字节码和构造参数打包成交易发送到网络中，等待当前交易被矿工打包进区块链。
图片来源 Draveness 博客
编译 Solidity 代码需要 solidity 编译器参与工作，编译器的使用也非常简单，我们可以直接使用如下的命令将合约编译成二进制：
    solc --bin contract.sol
除了官方提供的命令行工具，也可以选择其他的客户端工具，如 Remix，IntelliJ IDEA plugin 等。如果使用 Remix
工具，那么开发，编译，部署合约都可以轻松完成。
点击图中的 compile 可以编译合约
点击图中的 deploy 可以部署合约
客户端工具让编译和部署合约变的更加简单。更多客户端选择可以参照安装 Solidity 编译器。
客户端工具隐藏了合约部署交易的细节。具体的，一个合约部署交易包涵以下部分：
    {
        "jsonrpc": "2.0",
        "id": 1,
        "result": {
            "blockHash": "0xfb508342b89066fe2efa45d7dbb9a3ae241486eee66103c03049e2228a159ee8",
            "blockNumber": "0x208c0a",
            "from": "0xe118559d65f87aaa8caa4383b112ff679a21223a",
            "gas": "0x2935a",
            "gasPrice": "0x9502f9000",
            "hash": "0xe74c796a041bad60469f2ee023c87e087847a6603b27972839d0c0de2e852315",
            "input": "0x6080604052348015600f57600080fd5b50603580601d6000396000f3006080604052600080fd00a165627a7a72305820d9b24bc33db482b29de2352889cc2dfeb66029c28b0daf251aad5a5c4788774a0029",
            "nonce": "0x2",
            "to": null,
            "transactionIndex": "0x5",
            "value": "0x0",
            "v": "0x2c",
            "r": "0xa5516d78a7d486d111f818b6b16eef19989ccf46f44981ed119f12d5578022db",
            "s": "0x7125e271468e256c1577b1d7a40d26e2841ff6f0ebcc4da073610ab8d76c19d5"
        }
    }
在这个用于创建合约的特殊交易中，我们可以看到目标地址 to 的值为空，input 的值就是合约的二进制代码。这笔交易被打包写入区块链之后，我们就能在
Etherscan 上根据交易的 hash 看到这笔交易成功的创建了一个合约。
在以太坊上部署合约的过程其实与交易发送的过程基本相似，唯一的区别就是用于创建合约的交易目前地址为空，并且 data
字段中的内容就是合约的二进制代码，也就是合约的部署由两部分组成：编译合约和发送消息。
### **2.2.3 EVM 虚拟机执行合约**
以太坊虚拟机 EVM 提供了 Solidity 智能合约的运行环境。它不仅是沙盒封装的，而且是完全隔离的，也就是说在 EVM
中运行代码是无法访问网络、文件系统和其他进程的。甚至智能合约之间的访问也是受限的。
EVM
虚拟机一种基于栈的虚拟机。在基于栈的虚拟机中，有个重要的概念：操作数栈，数据存取为后进先出。所有的操作都是直接与操作数栈直接交互，例如：取数据、存数据、执行操作等。这样有一个好处：可以无视具体的物理机器架构，特别是寄存器，但是缺点也很明显，速度慢，无论什么操作都需要经过操作数栈。