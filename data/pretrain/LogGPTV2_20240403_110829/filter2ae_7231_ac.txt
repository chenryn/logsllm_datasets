    };
    TypeImpl *type_register_static(const TypeInfo *info)
    {
        return type_register(info);
    }
    TypeImpl *type_register(const TypeInfo *info)
    {
        assert(info->parent);
        return type_register_internal(info);
    }
    static TypeImpl *type_register_internal(const TypeInfo *info)
    {
        TypeImpl *ti;
        ti = type_new(info);
        type_table_add(ti);
        return ti;
    }
当所有qemu总线、设备等的`type_register_static`执行完成后，即它们的`TypeImpl`实例创建成功后，qemu就会在`type_initialize`函数中去实例化其对应的`ObjectClasses`。
每个`type`都有一个相应的`ObjectClass`所对应，其中ObjectClass是所有类的基类
    struct ObjectClass
    {
        /**/
        Type type;  
        GSList *interfaces;
        const char *object_cast_cache[OBJECT_CLASS_CAST_CACHE];
        const char *class_cast_cache[OBJECT_CLASS_CAST_CACHE];
        ObjectUnparent *unparent;
        GHashTable *properties;
    };
用户可以定义自己的类，继承相应类即可：
    /* include/qom/object.h */
    typedef struct TypeImpl *Type;
    typedef struct ObjectClass ObjectClass;
    struct ObjectClass
    {
            /**/
            Type type;       /* points to the current Type's instance */
            ...
    /* include/hw/qdev-core.h */
    typedef struct DeviceClass {
            /**/
            ObjectClass parent_class;
            /**/
            ...
    /* include/hw/pci/pci.h */
    typedef struct PCIDeviceClass {
            DeviceClass parent_class;
            ...
可以看到类的定义中父类都在第一个字段，使得可以父类与子类直接实现转换。一个类初始化时会先初始化它的父类，父类初始化完成后，会将相应的字段拷贝至子类同时将子类其余字段赋值为0，再进一步赋值。同时也会继承父类相应的虚函数指针，当所有的父类都初始化结束后，`TypeInfo::class_init`就会调用以实现虚函数的初始化，如下例的`pci_testdev_class_init`所示：
    static void pci_testdev_class_init(ObjectClass *klass, void *data)
    {
            DeviceClass *dc = DEVICE_CLASS(klass);
            PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);
            k->init = pci_testdev_init;
            k->exit = pci_testdev_uninit;
            ...
            dc->desc = "PCI Test Device";
            ...
    }
最后一个是`Object`对象：
    struct Object
    {
        /**/
        ObjectClass *class;
        ObjectFree *free;
        GHashTable *properties;
        uint32_t ref;
        Object *parent;
    };
`Object`对象为何物？`Type`以及`ObjectClass`只是一个类型，而不是具体的设备。`TypeInfo`结构体中有两个函数指针：`instance_init`以及`class_init`。`class_init`是负责初始化`ObjectClass`结构体的，`instance_init`则是负责初始化具体`Object`结构体的。
    the Object constructor and destructor functions (registered by the respective Objectclass constructors) will now only get called if the corresponding PCI device's -device option was specified on the QEMU command line (unless, probably, it is a default PCI device for the machine). 
    Object类的构造函数与析构函数（在Objectclass构造函数中注册的）只有在命令中-device指定加载该设备后才会调用（或者它是该系统的默认加载PCI设备）。
`Object`示例如下所示：
    /* include/qom/object.h */
    typedef struct Object Object;
    struct Object
    {
            /**/
            ObjectClass *class; /* points to the Type's ObjectClass instance */
            ...
    /* include/qemu/typedefs.h */
    typedef struct DeviceState DeviceState;
    typedef struct PCIDevice PCIDevice;
    /* include/hw/qdev-core.h */
    struct DeviceState {
            /**/
            Object parent_obj;
            /**/
            ...
    /* include/hw/pci/pci.h */
    struct PCIDevice {
            DeviceState qdev;
            ...
    struct YourDeviceState{
            PCIDevice pdev;
            ...
（QOM will use instace_size as the size to allocate a Device Object, and then
it invokes the instance_init ）
QOM会为设备Object分配`instace_size`大小的空间，然后调用`instance_init`函数（在Objectclass的class_init函数中定义）：
    static int pci_testdev_init(PCIDevice *pci_dev)
    {
            PCITestDevState *d = PCI_TEST_DEV(pci_dev);
            ...
最后便是PCI的内存空间了，qemu使用`MemoryRegion`来表示内存空间，在`include/exec/memory.h`中定义。使用`MemoryRegionOps`结构体来对内存的操作进行表示，如`PMIO`或`MMIO`。对每个`PMIO`或`MMIO`操作都需要相应的`MemoryRegionOps`结构体，该结构体包含相应的`read/write`回调函数。
    static const MemoryRegionOps pci_testdev_mmio_ops = {
            .read = pci_testdev_read,
            .write = pci_testdev_mmio_write,
            .endianness = DEVICE_LITTLE_ENDIAN,
            .impl = {
                    .min_access_size = 1,
                    .max_access_size = 1,
            },
    };
    static const MemoryRegionOps pci_testdev_pio_ops = {
            .read = pci_testdev_read,
            .write = pci_testdev_pio_write,
            .endianness = DEVICE_LITTLE_ENDIAN,
            .impl = {
                    .min_access_size = 1,
                    .max_access_size = 1,
            },
    };
首先使用`memory_region_init_io`函数初始化内存空间（`MemoryRegion`结构体），记录空间大小，注册相应的读写函数等；然后调用`pci_register_bar`来注册BAR等信息。需要指出的是无论是MMIO还是PMIO，其所对应的空间需要显示的指出（即静态声明或者是动态分配），因为`memory_region_init_io`只是记录空间大小而并不分配。
    /* hw/misc/pci-testdev.c */
    #define IOTEST_IOSIZE 128
    #define IOTEST_MEMSIZE 2048
    typedef struct PCITestDevState {
            /**/
            PCIDevice parent_obj;
            /**/
            MemoryRegion mmio;
            MemoryRegion portio;
            IOTest *tests;
            int current;
    } PCITestDevState;
    static int pci_testdev_init(PCIDevice *pci_dev)
    {
            PCITestDevState *d = PCI_TEST_DEV(pci_dev);
            ...
            memory_region_init_io(&d->mmio, OBJECT(d), &pci_testdev_mmio_ops, d,
                                                        "pci-testdev-mmio", IOTEST_MEMSIZE * 2); 
            memory_region_init_io(&d->portio, OBJECT(d), &pci_testdev_pio_ops, d,
                                                        "pci-testdev-portio", IOTEST_IOSIZE * 2); 
            pci_register_bar(pci_dev, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &d->mmio);
            pci_register_bar(pci_dev, 1, PCI_BASE_ADDRESS_SPACE_IO, &d->portio);
到此基本结束了，最后可以去看[strng](https://github.com/rcvalle/blizzardctf2017/blob/master/strng.c)的实现去看一个设备具体是怎么实现的，它的相应的数据结构是怎么写的。
## 小结
介绍了qemu虚拟机的内存结构以及它的地址转化；以及pci设备的配置空间，比较重要的是BAR信息还有PMIO以及MMIO；最后是QOM模型，如何通过QOM对象来实现一个PCI设备，实现其相应的PMIO以及MMIO等。
相关文件以及脚本的[链接](https://github.com/ray-cp/vm-escape/tree/master/qemu-escape/qemu-basic-knowledge)
## 参考链接
  1. [QEMU Internals: Big picture overview](http://blog.vmsplice.net/2011/03/qemu-internals-big-picture-overview.html)
  2. [VM escape-QEMU Case Study](http://www.phrack.org/papers/vm-escape-qemu-case-study.html)
  3. [内存映射IO (MMIO) 简介](https://zhuanlan.zhihu.com/p/37715216)
  4. [浅谈内存映射I/O(MMIO)与端口映射I/O(PMIO)的区别](https://www.cnblogs.com/idorax/p/7691334.html)
  5. [PCI设备的地址空间](https://www.cnblogs.com/zszmhd/archive/2012/05/08/2490105.html)
  6. [[PCI 设备详解一](https://www.cnblogs.com/ck1020/p/5942703.html)]
  7. [Essential QEMU PCI API](http://web.archive.org/web/20151116022950/http://nairobi-embedded.org/001_qemu_pci_device_essentials.html)
  8. [Writing a PCI Device Driver, A Tutorial with a QEMU Virtual Device](http://web.archive.org/web/20151115031755/http://nairobi-embedded.org:80/linux_pci_device_driver.html)
  9. [QEMU中的对象模型——QOM（介绍篇）](https://blog.csdn.net/u011364612/article/details/53485856)
  10. [How QEMU Emulates Devices](https://www.w0lfzhang.com/2018/11/02/How-QEMU-Emulates-Devices/)
  11. [Blizzard CTF 2017: Sombra True Random Number Generator (STRNG)](https://github.com/rcvalle/blizzardctf2017/blob/master/strng.c)