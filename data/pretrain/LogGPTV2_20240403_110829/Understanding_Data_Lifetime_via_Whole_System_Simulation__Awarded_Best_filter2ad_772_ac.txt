chine. This task is performed by the analysis framework.
The analysis framework provides us with three major
capabilities. First, it answers the question of which data
is tainted by giving the ﬁle name and line number where
a tainted variable is deﬁned. Second, it provides a list
of locations and times identifying the code (by ﬁle name
and line number) which caused a taint to propagate. By
browsing through this list the causal chain of operations
that resulted in taint propagation can be unraveled. This
can be walked through in a text editor in a fashion sim-
ilar to a list of compiler errors. Finally, it provides the
ability to inspect any program that was running in the
guest at any point in time in the simulation using gdb.
This allows us to answer any questions about tainting
that we may not have been able to glean by reading the
source code.
Traveling In Time The ﬁrst capability our analysis
framework integrates is the ability to scroll back and
forth to any time in the programs execution history. This
allows the causal relationship between different tainted
memory regions to be established, i.e. it allows us to
watch taints propagate from one region of memory to the
next. This capability is critical as the sources of taints
become untainted over time, preventing one from under-
standing what path data has taken through the system
simply by looking at a single point.
We have currently implemented this capability
through a tool called replay which can generate a
complete and accurate image of a simulated machine at
any instruction boundary. It does this by starting from
a snapshot and replaying the memory log. It also out-
puts the physical addresses of all tainted memory bytes
and provides the values of EBP and ESP, exactly, and
EIP, as of the last logged operation. EBP and ESP make
backtraces possible and EIP is identiﬁes the line of code
that caused tainting (e.g. copied tainted data). replay
is a useful primitive, but it still presents us with only raw
machine state. To determine what program or what part
of the kernel owns tainted data or what code caused it to
be tainted we rely on another tool called x-taints.
Identifying Data A second capability of the analysis
framework is matching raw taint data with source-level
entities in user code, currently implemented through a
tool called x-taints, our primary tool for interpret-
ing tainting information. It combines information from
a variety of sources to produce a ﬁle name and line num-
ber where a tainted variable was deﬁned.
x-taints identiﬁes static kernel data by referring
to System.map, a ﬁle produced during kernel compi-
lation that lists each kernel symbol and its address. Mi-
crosoft distributes similar symbol sets for Windows, and
we are working towards integrating their use into our
analysis tools as well.
x-taints identiﬁes kernel heap allocated data us-
ing a patch we created for Linux guests that appends
source ﬁle and line number information to each re-
gion allocated by the kernel dynamic memory alloca-
tor kmalloc(). To implement this we added extra
bytes to the end of every allocated region to store this
data. When run against a patched kernel, this allows
x-taints to display such information in its analysis
reports.
x-taints identiﬁes data in user space in several
steps. First, x-taints generates a table that maps
physical addresses to virtual addresses for each process.
We do this using a custom extension to Mission Criti-
cal’s crash, software for creating and analyzing Linux
kernel crash dumps. This table allows us to identify the
process or processes that own the tainted data. Once
x-taints establishes which process owns the data it
is interested in, x-taints turns to a second custom
crash extension to obtain more information. This ex-
tension extracts a core ﬁle for the process from the phys-
ical memory image on disk. x-taints applies gdb
to the program’s binary and the core ﬁle and obtains the
name of the tainted variable.
For analysis of user-level programs to be effective,
the user must have previously copied the program’s bi-
nary, with debugging symbols, out of the simulated ma-
chine into a location known to x-taints. For best
results the simulated machine’s libraries and their de-
bugging symbols should also be available.
Studying Code Propagating Taints The ﬁnal capa-
bility that the analysis framework provides is the ability
to identify which code propagated taints, e.g. if a call to
memcpy copies tainted data, then its caller, along with
a full backtrace, can be identiﬁed by their source ﬁle
names and line numbers.
x-taints discovers this by replaying a memory log
and tracking, for every byte of physical memory, the PID
of the program that last modiﬁed it, the virtual address of
the instruction that last modiﬁed it (EIP), and the instruc-
tion count at which it was modiﬁed.2 Using this data,
x-taints consults either System.map or a gener-
ated core ﬁle and reports the function, source ﬁle, and
line number of the tainting code.
x-taints can also bring up gdb to allow investiga-
tion of the state of any program in the simulation at any
instruction boundary. Most of the debugger’s features
can be used, including full backtraces, inspecting local
and global variables, and so on. If the process was run-
ning at the time of the core dump, then register variables
in the top stack frame will be inaccurate because only
EBP and ESP are recorded in the log ﬁle. For processes
that are not running, the entire register set is accurately
extracted from where it is saved in the kernel stack.
4 Exploring Data Lifetime with Taint-
Bochs
Our objective in developing TaintBochs was to pro-
vide a platform to explore the data lifetime problem in
depth in real systems. With our experimental platform
2An earlier version recorded the physical address corresponding to
EIP, instead of PID plus virtual address. This unnecessarily compli-
cated identifying the process responsible when a shared library func-
tion (e.g. memmove) tainted memory.
in place, our next task was to examine the scope of the
data lifetime in common applications.
In applying TaintBochs we concerned ourselves with
in memory.
three primary issues:
• Scope. Where was sensitive data was being copied to
• Duration. How long did that data persist?
• Implications. Beyond the mere presence of problems,
we wanted to discover how easy they would be to
solve, and what the implications were for implement-
ing systems to minimize data lifetime.
There is no simple answer to any of these questions in
the systems we analyzed. Data was propagated all over
the software stack, potential lifetimes varied widely, and
while a wide range of data lifetime problems could be
solved with small changes to program structure, there
was no single silver bullet. The one constant that did
hold was that careful handling of sensitive data was al-
most universally absent.
We performed three experiments in total, all of them
examining the handling of password data in a different
contexts. Our ﬁrst experiment examined Mozilla [27],
a popular open source web browser. Our second ex-
periment tests Apache [1], by some reports the most
popular server in the world, running a simple CGI ap-
plication written in Perl. We believe these ﬁrst two
experiments are of particular interest as these plat-
forms process millions of sensitive transactions on a
daily basis. Finally, our third experiment examines
GNU Emacs [26], the well-known text-editor-turned-
operating-system, used by many as their primary means
of interaction with UNIX systems.
In section 4.1 we describe the design of each of our
experiments and report where in the software stack we
found tainted data.
In section 4.2 we analyze our re-
sults in more detail, explaining the lifetime implications
of each location where sensitive data resided (e.g. I/O
buffers, string buffers). In section 4.3 we report the re-
sults of experiments in modifying the software we pre-
viously examined to reduce data lifetime.
4.1 Experimental Results
4.1.1 Mozilla
In our ﬁrst experiment we tracked a user-input password
in Mozilla during the login phase of the Yahoo Mail
website.
Mozilla was a particularly interesting subject not only
because of its real world impact, but also because its
size. Mozilla is a massive application (∼3.7 million
lines of code) written by many different people, it also
has a huge number of dependencies on other compo-
nents (e.g. GUI toolkits).
Given its complexity, Mozilla provided an excellent
test of TaintBoch’s ability to make a large application
comprehensible. TaintBochs passed with ﬂying colors.
One of us was able to analyze Mozilla in roughly a day.
We consider this quite acceptable given the size of the
data set being analyzed, and that none of us had prior
familiarity with its code base.
For our experiment, we began by a booting a Linux3
guest inside TaintBochs. We then logged in as an unpriv-
ileged user, and started X with the twm window man-
ager. Inside X, we started Mozilla and brought up the
webpage mail.yahoo.com, where we entered a user
name and password in the login form. Before entering
the password, we turned on TaintBoch’s keyboard taint-
ing, and afterward we turned it back off. We then closed
Mozilla, logged out, and closed TaintBochs.
When we analyzed the tainted regions after Mozilla
was closed, we found that many parts of the system fail
to respect the lifetime sensitivity of the password data
they handle. The tainted regions included the following:
• Kernel random number generator. The Linux ker-
nel has a subsystem that generates cryptographically
secure random numbers, by gathering and mixing en-
tropy from a number of sources, including the key-
board. It stores keyboard input temporarily in a cir-
cular queue for later batch processing. It also uses
a global variable last scancode to keep track of
the previous key press; the keyboard driver also has a
similar variable prev scancode.
• XFree86 event queue. The X server stores user-input
events, including keystrokes, in a circular queue for
later dispatch to X clients.
• Kernel socket buffers.
In our experiment, X relays
keystrokes to Mozilla and its other clients over Unix
domain sockets using the writev system call. Each
call causes the kernel to allocate a sk buff socket
structure to hold the data.
• Mozilla strings. Mozilla, written in C++, uses a num-
ber of related string classes to process user data. It
makes no attempt to curb the lifetime of sensitive
data.
• Kernel tty buffers. When the user types keyboard
characters, they go into a struct tty struct
“ﬂip buffer” directly from interrupt context. (A ﬂip
buffer is divided into halves, one used only for read-
ing and the other used only for writing. When data
that has been written must be read, the halves are
“ﬂipped” around.) The key codes are then copied into
a tty, which X reads.
3We conducted our experiment on a Gentoo [10] Linux guest with
a 2.4.23 kernel. The guest used XFree86 v4.3.0r3 and Mozilla v1.5-r1.
4.1.2 Apache and Perl
In our second experiment, we ran Apache inside Taint-
Bochs, setting it up to grant access to a CGI script writ-
ten in Perl. We tracked the lifetime of a password en-
tered via a simple form and passed to a trivial CGI script.
Our CGI script initialized Perl’s CGI module and out-
put a form with ﬁelds for user name, password, and a
submit button that posted to the same form. Perl’s CGI
module automatically parses the ﬁeld data passed to it
by the browser, but the script ignores it. This CGI script
represents the minimum amount of tainting produced by
Perl’s CGI module as any CGI script that read and used
the password would almost certainly create extra copies
of it.
In this experiment, the web client, running outside
TaintBochs, connected to the Apache server running in-
side. TaintBochs examined each Ethernet frame as it en-
tered the guest, and tainted any instance of a hard-coded
password found in the frame. This technique would not
have found the password had it been encoded, split be-
tween frames, or encrypted, but it sufﬁced for our simple
experiment.
packet
buffers.
In
the Linux kernel
Using Apache version 1.3.29 and Perl version 5.8.2,
we tracked the following sequence of taints as we sub-
mitted the login form and discovered that the taints listed
below persist after the request was fully handled by
Apache and the CGI program:
• Kernel
function
reads the
ne block input,
Ethernet frame from the virtual NE2000 network
device into a buffer dynamically allocated with
kmalloc. The frame is attached to an sk buff
structure used for network packets. As we found
with Unix domain sockets in the Mozilla experiment,
the kernel does not zero these bytes when they are
freed, and it is difﬁcult to predict how soon they will
be reused.
• Apache input buffers. When Apache reads the HTTP
request in the ap bread function, the kernel copies
it from its packet buffer into a buffer dynamically
allocated by Apache. The data is then copied to
a stack variable by the CGI module in function
cgi handler. Because it is on the stack, the latter
buffer is reused for each CGI request made to a given
Apache process, so it is likely to be erased quickly
except on very low-volume web servers.
• Apache output buffer. Apache copies the request to a
dynamically allocated output buffer before sending it
to the CGI child process.
• Kernel pipe buffer. Apache ﬂushes its output buffer
to the Perl CGI subprocess through a pipe, so tainted
data is copied into a kernel pipe buffer.
• Perl ﬁle input buffer. Perl reads from the pipe into a
dynamically allocated ﬁle buffer, 4 kB in size. The
buffer is associated with the ﬁle handle and will not
be erased as long as the ﬁle is open and no additional
I/O is done. Because Apache typically sends much
less than 4 kB of data through the pipe, the read buffer
persists at least as long as the CGI process.
• Perl string buffers. Perl copies data from the input
buffer into a Perl string, also dynamically allocated.
Furthermore, in the process of parsing, the tainted
bytes are copied into a second Perl string.
All of these buffers contain the full password in cleart-
ext.
4.1.3 Emacs
In our third experiment we tracked the lifetime of a pass-
word entered into su by way of Emacs’s shell mode.
At its core GNU Emacs is a text editor. Because it
is built on top of a specialized Lisp interpreter, modern
versions can do much more than edit text. Indeed, many
users prefer to do most of their work within Emacs.
Many of the functions Emacs performs may in-
volved handling sensitive data, for example, activities
that might prompt for passwords include interacting with
shells, browsing web pages, reading and sending email
and newsgroup articles, editing remote ﬁles via ssh,
and assorted cryptographic functionality.
We chose Emacs’ “shell mode” for our ﬁrst inves-
tigation.
In shell mode, an Emacs buffer becomes an
interface to a Unix shell, such as bash, running as an
Emacs subprocess. Emacs displays shell output in the
buffer and passes user input in the buffer to the shell.
Emacs does not implement most terminal commands in
the shell buffer, including commands for disabling lo-
cal echo, so passwords typed in response to prompts by
ssh, su, etc. would normally echo. As a workaround,
shell mode includes a specialized facility that recognizes
password prompts and reads them without echo in a sep-
arate “minibuffer.” We decided to investigate how thor-
oughly Emacs cleared these passwords from its memory
after passing them to the subprocess.
To start the experiment, we booted a guest running
the Debian GNU/Linux “unstable” distribution, logged
in as an unprivileged user, and started Emacs. Within
Emacs, we started shell mode and entered the su com-
mand at the shell prompt.4 Using the TaintBochs inter-
face, we enabled tainting of keyboard input, typed the
root password, and then disabled keyboard input taint-
ing. Finally, we closed the shell sessions, exited Emacs,
logged off, and shut down TaintBochs.
Using the generated memory and taint logs, we ran
a taint analysis at a point soon after the su subshell’s
4Given the superuser’s password, su opens a subshell with supe-
ruser privileges.
prompt had appeared in the Emacs buffer. The results
identiﬁed several tainted regions in Emacs and the ker-
nel:
• Kernel random number generator and keyboard data.
See the Mozilla experiment (section 4.1.1) for more
information.
• Global variable kbd buffer. All Emacs input
passes through this buffer, arranged as a circular
queue. Each buffer element is only erased after ap-