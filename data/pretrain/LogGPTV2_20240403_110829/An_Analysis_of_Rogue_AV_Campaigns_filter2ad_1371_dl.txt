clients to download their software, we have counted the number of IPs that had
performed, on the same day, a scan followed by a download. We have also counted
those that did not perform a download after a scan. Doing so, we observed 25,447
successful and 306,248 unsuccessful scans, leading to the estimation of a 7.7%
conversion rate from scan to download.
Similarly, our access data indicates a 1.36% conversion rate from scan to pay-
ment. Given an average price for rogue AV software of between $30 and $50, our
analysis indicates that these 6 servers (which may be controlled by the same en-
tity, or 6 distinct entities) may generate a gross income of between $111,000 and
$186,000 in a period of 44 days. However, this is a best-case scenario; it is likely
that at least some of the accesses to the payment URL represented failed or non-
existent payments (recall that we do not have access to the actual server response).
If we use a more conservative conversion rate between web server access and ac-
tual purchase of 0.26%, estimated by others in the context of email spam [13], the
gross income for rogue AV site operators in the same period would range between
$21,000 and $35,000. The total operational costs for these rogue AV sites would
consist of the cost of hosted web servers and the cost of registering the 193 DNS
domains. An informal survey of the providers hosting rogue AV sites indicates that
the average monthly cost of a hosted web server is $50. Similarly, the annual do-
main registration costs vary between $3 and $10. Thus, the costs to the rogue AV
operators would range between $1,179 and $2,530 (potentially under $400, if we
pro-rate the domain registration for a 44-day period).
While the above cost estimate does not take into consideration the additional
cost of advertising the maintained domains through diﬀerent techniques, the
costs are easily covered by the (unknown) income from other illicit activities that
piggy-back on the rogue AV distribution ﬂow (e.g., keystroke loggers installed
through drive-by downloads by the rogue AV servers).
460
M. Cova et al.
Ultimately, the easiness with which rogue AV campaigns manage to success-
fully lure users into purchasing their products generates a return on investment
that fully justiﬁes the deployment and the management of complex infrastruc-
tures such as those studied in this work.
6 Lessons Learned and Countermeasures
This work leverages the analysis of real data to study the general characteris-
tics and dynamics of a speciﬁc threat landscape, that of rogue security software.
We identify the speciﬁcities of such threat landscape and their foundations in a
particularly favorable market. Such knowledge has direct repercussions on nowa-
days security practices, and helps underlining weaknesses in currently employed
techniques as well as potentials for new research avenues.
Users. Despite of a minor number of cases in which rogue AV domains were ob-
served also in association to other type of threats such as drive-by downloads, the
main propagation vector for this type of threat is the psychological impact on the
user. The in-depth study of the reasons for the successfulness of the interaction be-
tween victims and rogue campaigns is out of the scope of this work, but our analysis
clearly shows that users have an important role in the successfulness of rogue AV
campaigns. As suggested in [10], the cost-beneﬁt tradeoﬀ associated to the oﬀering
of security services is often badly received by the users, that tend to reject the neces-
sity of performing monetary investments to be shielded from hypothetical security
threats. Rogue security software leverages this social reality to its own advantage.
Increasing user awareness on the cost implicitly associated to security may have
an impact on the relatively high conversion rates observed in this study, and may
impact the return on investment associated to rogue AV campaigns.
Blacklisting is strained. Our study revealed two characteristics of the infras-
tructure used to spread rogue AV that have important consequences on the
eﬀectiveness of countermeasures against this threat, and, speciﬁcally, of black-
listing, a technique commonly used to prevent end users from accessing malicious
resources.
As Figure 1 showed, the rogue AV infrastructure comprises both servers that
exclusively host a very large number of rogue AV sites and servers where rogue
AV sites coexist with legitimate ones. This situation is a worst case for black-
listing. In fact, IP-based blacklisting (where access to a speciﬁc web server IP is
blocked) is bound to generate many false positives, thus preventing users from
visiting benign sites that happen to be hosted on server IPs that also serve mali-
cious sites. In fact, a naive IP-based blacklisting approach, listing all the servers
we identiﬁed, would have incorrectly blocked access to 129,476 legitimate web
sites. Conversely, domain name-based blacklisting (where access to a speciﬁc do-
main is blocked) is undermined by the easiness with which malicious actors can
register large batches of domains. The registration of hundreds of automatically
generated domain names observed in the diﬀerent campaigns is likely to be an
active attempt to evade such lists. For example, 77 of the rogue-speciﬁc servers
An Analysis of Rogue AV Campaigns
461
that we tracked were associated with more than twenty diﬀerent domains, with
a maximum of 309 domains associated to a single server.
Taking-down rogue AV campaigns. What would be a good strategy then to ef-
fectively ﬁght rogue AV campaigns? Our analysis of the victim access dataset
hinted at one possible direction: taking down payment processing sites. In fact,
these appeared to be less in number than other rogue AV sites (recall that 7
payment sites supported almost 200 front-end “scanning” sites) and seemed to
change less frequently. Furthermore, by disrupting the sites generating revenue,
defenders are likely to signiﬁcantly aﬀect also other parts of the rogue AV oper-
ations (e.g., registering new sites and paying for hosting).
DNS-based threat detection. This study has highlighted once more the important
role of the DNS infrastructure in Internet threats. Rogue AV campaigns often
rely on misleading DNS names to lure victims into trusting their products (e.g.,
pcsecurity-2009.com). Also, we have seen how such campaigns often lead to the
automated deployment of large numbers of domains pointing to a few servers
and following well-deﬁned patterns in their naming schema. For all these reasons,
as already noted in [20] for other type of threats, DNS seems to be a promising
point of view for the detection of such anomalies.
7 Conclusion
We presented a longitudinal analysis on the infrastructure and the dynamics
associated with an increasingly popular threat, that of rogue security software.
The contributions of this paper are threefold. Firstly, we provide the ﬁrst
quantitative high-level analysis of the rogue AV threat landscape and the under-
pinning infrastructure. We detail the relationships between rogue AV domains
and the web servers hosting them, and we delve into their characteristics to ex-
tract high-level information on the structure of these threats. Secondly, we apply
a threat attribution methodology to 6,500 domains under observation and we
automatically extract information on large-scale campaigns likely to be associ-
ated to the operation of a single individual or group, likely through the help of
automated tools. Finally, we provide insights on the economy of the rogue AV
threat landscape by leveraging information on the interaction of victim clients
with several rogue AV servers over a period of 44 days. We show how the rogue
AV distributors are able to generate considerable revenues through their activi-
ties, which fully justiﬁes their investment in the deployment of the distribution
infrastructures.
While this paper targets speciﬁcally the rogue antivirus threat, we believe
that the methodologies and the lessons learnt from our work can be of value to
the study of other threats (e.g., phishing and other scams). More speciﬁcally,
we show how the combination of clustering and data aggregation methods can
be leveraged to proﬁle diﬀerent threat landscapes and, by comparison, oﬀer a
valuable tool to the study of threat economies.
462
M. Cova et al.
References
1. Microsoft Security Intelligence Report, volume 7. Technical report, Microsoft
(2009)
2. Beliakov, G., Pradera, A., Calvo, T.: Aggregation Functions: A Guide for Practi-
tioners. Springer, Berlin (2007)
3. Bellovin, S.: A Technique for Counting NATted Hosts. In: Proc. of the Internet
Measurement Conference (2002)
4. Correll, S.P., Corrons, L.: The business of rogueware. Technical Report, PandaLabs
(July 2009)
5. Dacier, M., Pham, V., Thonnard, O.: The WOMBAT Attack Attribution method:
some results. In: Prakash, A., Sen Gupta, I. (eds.) ICISS 2009. LNCS, vol. 5905,
pp. 19–37. Springer, Heidelberg (2009)
6. Daigle, L.: WHOIS protocol speciﬁcation. RFC 3912 (September 2004)
7. Fossi, M., Johnson, E., Turner, D., Mack, T., Blackbird, J., McKinney, D., Low,
M.K., Adams, T., Laucht, M.P., Gough, J.: Symantec Report on the Underground
Economy. Technical Report, Symantec (2008)
8. Fossi, M., Turner, D., Johnson, E., Mack, T., Adams, T., Blackbird, J., Low, M.K.,
McKinney, D., Dacier, M., Keromytis, A., Leita, C., Cova, M., Overton, J., Thon-
nard, O.: Symantec report on rogue security software. Whitepaper, Symantec (Oc-
tober 2009)
9. Franklin, J., Paxson, V., Perrig, A., Savage, S.: An Inquiry into the Nature and
Causes of the Wealth of Internet Miscreants. In: Proc. of the ACM Conference on
Computer and Communications Security (2007)
10. Herley, C.: So long, and no thanks for the externalities: the rational rejection of
security advice by users. In: Proc. of the 2009 New Security Paradigms Workshop
(NSPW), pp. 133–144. ACM, New York (2009)
11. Holz, T., Engelberth, M., Freiling, F.: Learning More about the Underground Econ-
omy: A Case-Study of Keyloggers and Dropzones. In: Backes, M., Ning, P. (eds.)
ESORICS 2009. LNCS, vol. 5789, pp. 1–18. Springer, Heidelberg (2009)
12. Holz, T., Steiner, M., Dahl, F., Biersack, E., Freiling, F.: Measurements and Miti-
gation of Peer-to-Peer-based Botnets: A Case Study on Storm Worm. In: Proc. of
the USENIX Workshop on Large-Scale Exploits and Emergent Threats (2008)
13. Kanich, C., Kreibich, C., Levchenko, K., Enright, B., Voelker, G., Paxson, V.,
Savage, S.: Spamalytics: An Empirical Analysis of Spam Marketing Conversion.
In: Proc. of the ACM Conference on Computer and Communications Security
(2008)
14. Krebs, B.: Massive Proﬁts Fueling Rogue Antivirus Market. In: Washington Post
(2009)
15. McGrath, K., Gupta, M.: Behind Phishing: An Examination of Phisher Modi
Operandi. In: Proc. of the USENIX Workshop on Large-Scale Exploits and Emer-
gent Threats (2008)
16. Moore, T., Clayton, R.: Examining the Impact of Website Take-down on Phishing.
In: Proc. of the APWG eCrime Researchers Summit (2007)
17. Moshchuk, A., Bragin, T., Gribble, S.D., Levy, H.M.: A Crawler-based Study of
Spyware on the Web. In: Network and Distributed System Security Symposium,
pp. 17–33 (2006)
18. O’Dea, H.: The Modern Rogue — Malware With a Face. In: Proc. of the Virus
Bulletin Conference (2009)
An Analysis of Rogue AV Campaigns
463
19. Provos, N., Mavrommatis, P., Rajab, M., Monrose, F.: All Your iFRAMEs Point
to Us. In: Proc. of the USENIX Security Symposium (2008)
20. Rajab, M., Zarfoss, J., Monrose, F., Terzis, A.: A Multifaceted Approach to Un-
derstanding the Botnet Phenomenon. In: Proc. of the Internet Measurement Con-
ference (2006)
21. Rajab, M.A., Ballard, L., Mavrommatis, P., Provos, N., Zhao, X.: The Nocebo
Eﬀect on the Web: An Analysis of Fake Anti-Virus Distribution. In: Proc. of the
USENIX Workshop on Large-Scale Exploits and Emergent Threats (2010)
22. Ramachandran, A., Feamster, N., Dagon, D.: Revealing Botnet Membership Using
DNSBL Counter-Intelligence. In: Proc. of the Workshop on Steps to Reducing
Unwanted Traﬃc on the Internet, SRUTI (2006)
23. Shepard, R.N.: Multidimensional scaling, tree ﬁtting, and clustering. Science 210,
390–398 (1980)
24. Stone-Gross, B., Cova, M., Cavallaro, L., Gilbert, B., Szydlowski, M., Kemmerer,
R., Kruegel, C., Vigna, G.: Your Botnet is My Botnet: Analysis of a Botnet
Takeover. In: Proc. of the ACM Conference on Computer and Communications
Security (2009)
25. Thonnard, O.: A multi-criteria clustering approach to support attack attribution
in cyberspace. PhD thesis, ´Ecole Doctorale d’Informatique, T´el´ecommunications
et ´Electronique de Paris (March 2010)
26. Thonnard, O., Mees, W., Dacier, M.: Addressing the attack attribution problem
using knowledge discovery and multi-criteria fuzzy decision-making. In: KDD 2009,
15th ACM SIGKDD Conference on Knowledge Discovery and Data Mining, Work-
shop on CyberSecurity and Intelligence Informatics, Paris, France, June 28-July 1
(December 2009)
27. Thonnard, O., Mees, W., Dacier, M.: Behavioral Analysis of Zombie Armies. In:
Czossek, C., Geers, K. (eds.) The Virtual Battleﬁeld: Perspectives on Cyber War-
fare. Cryptology and Information Security Series, vol. 3, pp. 191–210. IOS Press,
Amsterdam (2009)
28. Wang, Y.-M., Beck, D., Jiang, X., Roussev, R.: Automated Web Patrol with Strider
HoneyMonkeys. Technical Report MSR-TR-2005-72, Microsoft Research (2005)
29. Xie, Y., Yu, F., Achan, K., Gillum, E., Goldszmidt, M., Wobber, T.: How Dynamic
are IP Addresses? In: Proc. of the Conference of the ACM Special Interest Group
on Data Communication, SIGCOMM (2007)
30. Yager, R.: On ordered weighted averaging aggregation operators in multicriteria
decision-making. IEEE Trans. Syst. Man Cybern. 18(1), 183–190 (1988)
31. Zhuang, L., Dunagan, J., Simon, D., Wang, H., Osipkov, I., Hulten, G., Tygar,
J.: Characterizing Botnets from Email Spam Records. In: Proc. of the USENIX
Workshop on Large-Scale Exploits and Emergent Threats (2008)
Fast-Flux Bot Detection in Real Time
Ching-Hsiang Hsu1, Chun-Ying Huang2, and Kuan-Ta Chen1
1 Institute of Information Science, Academia Sinica
2 Department of Computer Science and Engineering,
National Taiwan Ocean University
Abstract. The fast-ﬂux service network architecture has been widely
adopted by bot herders to increase the productivity and extend the lifes-
pan of botnets’ domain names. A fast-ﬂux botnet is unique in that each
of its domain names is normally mapped to diﬀerent sets of IP addresses
over time and legitimate users’ requests are handled by machines other
than those contacted by users directly. Most existing methods for de-
tecting fast-ﬂux botnets rely on the former property. This approach is
eﬀective, but it requires a certain period of time, maybe a few days,
before a conclusion can be drawn.
In this paper, we propose a novel way to detect whether a web service
is hosted by a fast-ﬂux botnet in real time. The scheme is unique because
it relies on certain intrinsic and invariant characteristics of fast-ﬂux bot-
nets, namely, 1) the request delegation model, 2) bots are not dedicated
to malicious services, and 3) the hardware used by bots is normally infe-
rior to that of dedicated servers. Our empirical evaluation results show
that, using a passive measurement approach, the proposed scheme can
detect fast-ﬂux bots in a few seconds with more than 96% accuracy, while
the false positive/negative rates are both lower than 5%.
Keywords: Botnet, Request delegation, Document fetch delay, Process-
ing delay, Internet measurement, Supervised classiﬁcation.
1 Introduction
A botnet is a collection of compromised Internet hosts (a.k.a. bots), that have
been installed with remote control software developed by malicious users. Such
software usually starts automatically when a parasite host boots. As a result,
malicious users (a.k.a. bot herders), can coordinate large-scale Internet activities
by controlling the bots (the victims). Bot herders always attempt to compromise
as many hosts as possible. According to the report of the FBI’s “Operation Bot
Roast” project [7], more than one million victim IP addresses had been identiﬁed
on the Internet by the end of 2007, and the number continues to increase. Botnets
allow bot herders to engage in various malicious activities, such as launching
distributed denial of service (DDoS) attacks, sending spam mails [24], hosting
phishing sites [13], and making fraudulent clicks [5]. Statistics show that botnets
yield great economic beneﬁts for bot herders [16, 15]; for example, Gartner [8]
estimated that the economic loss caused by phishing attacks alone is as much as
US$3 billion per year.
S. Jha, R. Sommer, and C. Kreibich (Eds.): RAID 2010, LNCS 6307, pp. 464–483, 2010.
c(cid:2) Springer-Verlag Berlin Heidelberg 2010
Fast-Flux Bot Detection in Real Time
465
To help legitimate users avoid malicious services (mostly in the form of web-
sites) hosted on a bot, researchers and practitioners have investigated ways to
determine whether a host is part of a botnet [10, 11, 9, 20]. If a bot is detected,
the host owner can remove the remotely controlled software by using malicious
software removal tools, or the network ISP can disconnect the bot if the host
owner does not take appropriate action. Obviously, bot herders take counter-
measures to keep their botnets alive and productive. Particularly, the Fast-Flux
Service Network (FFSN) architecture has been used to increase the productivity
and extend the lifetime of domain names linked to the bots.
Usually, a bot herder applies for a domain name for each of his bots and dis-
tributes the domain names (normally in the form of URLs) via various channels,
such as spam mails or web blogs. However, if a machine is in down time, the
bot cannot be controlled and the URL will be temporarily unavailable. More-
over, control of the bot may be lost due to removal of the malicious software. In
this case, the bot herder will not gain any more beneﬁts from the domain name
unless it is re-mapped to another IP address (of another bot).
An FFSN-based botnet (called a fast-ﬂux botnet for short), solves the above-
mentioned problems because of two architectural innovations: 1) the mapping
between domain names and IP addresses, and 2) the way legitimate users’ re-
quests are processed.
– First, in a fast-ﬂux botnet, a domain name is mapped to a number of IP
addresses (possibly hundreds, or even thousands) rather than a single IP
address. As a result, if the mapping is handled properly, i.e., a domain name
is always resolved to a controllable and live bot, the productivity (in terms
of the access rate of malicious services) will be higher than that of a tradi-
tional botnet. In addition, if it is known that a bot has been detected, the
domain name’s link to the bot can be terminated immediately so that their
relationship cannot be discovered.
– Second, legitimate users’ requests are indirectly handled by other machines
called motherships, rather than the bots the users contact. In other words,
when a legitimate user accesses a service provided by a fast-ﬂux botnet via
a URL, the bot that the URL connects to and receives requests from does
not handle the requests itself. Instead, it serves as a proxy by delegating the
requests to a mothership, and then forwarding the mothership’s responses
to the user. By so doing, bot herders can update a malicious service (and
the content it oﬀers) anytime because they have more control over the moth-
ership and the number of mothership nodes is relatively small compared to
that of bots. In addition, since malicious services do not reside on bots, it
is easier for bot herders to reduce the footprint of the malicious software so
that it is less likely to be detected by anti-malware solutions.
To obscure the link between a domain name and the IP addresses of available
bots, fast-ﬂux botnets often employ a strategy that resolves a domain name
to diﬀerent sets of IP addresses over time. For example, we observed that the
malicious service f07b42b93.com, which hosts a phishing webpage that deceives
466
C.-H. Hsu, C.-Y. Huang, and K.-T. Chen
— Returned DNS records at time t —
;; ANSWER SECTION:
f07b42b93.com.
f07b42b93.com.
f07b42b93.com.
f07b42b93.com.
f07b42b93.com.
f07b42b93.com.
f07b42b93.com.
f07b42b93.com.
f07b42b93.com.
f07b42b93.com.
300
300
300
300
300
300
300
300
300
300
IN A
IN A
IN A
IN A
IN A
IN A
IN A
IN A
IN A
IN A
68.45.212.84
68.174.233.245
87.89.53.176
99.35.9.172
116.206.183.29
174.57.27.8
200.49.146.20
204.198.77.248
207.112.105.241