    rpmrelease = "RPM-RELEASE"
    summary = "RPM-SUMMARY"
    repo = "REPO-URL"
    ref = "GIT-REF"
    destination = "SERVICES"
    ```
    您可以使用条目将 git 存储库中的文件添加到创建的镜像。
    例如,要创建名为 `server-config-1.0-1.noarch.rpm`{.literal} 的 RPM
    软件包,请在您的蓝图中添加以下信息：
    使用要创建的 RPM 软件包的名称替换
    [*\_RPM-NAME*]{.emphasis}。这也是生成的 tar 归档中的前缀名称。
    使用 RPM 软件包的版本替换 [*RPM-VERSION*]{.emphasis}，如 \"1.0.0\"。
    使用 [*RPM 软件包发行版本的版本替换 RPM-RELEASE*]{.emphasis},如
    \"1\"。
    使用 [*RPM 软件包的概述字符串替换 RPM-*]{.emphasis} SUMMARY。
    使用 get repository 的 URL 替换
    [*REPO-URL*]{.emphasis}，以便从中克隆并创建存档。
    使用要签出的 git 引用替换 [*GIT-REF*]{.emphasis},例如
    `origin/branch-name`{.literal}、`git tag`{.literal} 或
    `git commit hash`{.literal}。
    在安装 RPM 软件包时，请使用安装 git 存储库目录的路径替换
    [*SERVICES*]{.emphasis}。
    因此,您提供的 git 存储库是克隆的,会签出指定的 git 引用,并创建一个
    RPM 软件包来将文件安装到目标路径,例如 `/opt/server/`{.literal}。RPM
    包括库详情和创建库的参考概述。RPM 软件包也包含在镜像构建元数据中。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    每次构建启动时,它会克隆存储库。如果您引用有大量历史记录的存储库,可能需要一段时间来克隆和使用大量磁盘空间。另外,克隆是临时的,在创建
    RPM 软件包后会被删除。
    :::
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#packages-installed-by-default_creating-system-images-with-composer-command-line-interface}安装的软件包 {.title}
:::
当您使用 Image Builder
创建系统镜像时,默认情况下,系统会安装一组基本软件包。软件包的基本列表是
`comps core`{.literal} 组的成员。默认情况下,Image Builder 使用
`core yum`{.literal} 组。
::: table
[]{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#idm140524567933968}
**表 3.1. 支持创建镜像类型的默认软件包**
::: table-contents
  镜像类型           默认软件包

  ami                checkpolicy, chrony, cloud-init, cloud-utils-growpart, \@Core, dhcp-client, gdisk, insights-client, kernel, langpacks-en, net-tools, NetworkManager, redhat-release, redhat-release-eula, rng-tools, rsync, selinux-policy-targeted, tar, Yum-utils
  OpenStack          \@Core, langpacks-en
  qcow2              \@core, chrony, dnf, kernel, yum, nfs-utils, dnf-utils, cloud-init, python3-jsonschema, qemu-guest-agent, cloud-utils-growpart, dracut-norescue, tar, tcpdump, rsync, dnf-plugin-spacewalk, rhn-client-tools, rhnlib, rhnsd, rhn-setup, NetworkManager, dhcp-client, cockpit-ws, cockpit-system, subscription-manager-cockpit, redhat-release, redhat-release-eula, rng-tools, insights-client
  rhel-edge-commit   glibc, glibc-minimal-langpack, nss-altfiles, kernel, dracut-config-generic, dracut-network, basesystem, bash, platform-python,shadow-utils, chrony, setup, shadow-utils, sudo, systemd, coreutils, util-linux, curl, vim-minimal, rpm, rpm-ostree, polkit, lvm2, cryptsetup, pinentry, e2fsprogs, dosfstools, keyutils, gnupg2, attr, xz, gzip, firewalld, iptables, NetworkManager, NetworkManager-wishutil, wpa_supplic, dns procps-ng, rootfiles, openssh-server, passwd, policycoreutils-python-utils, selinux-policy-targeted, selinux-policy-targeted, setools-console, less、tar、rsync、fwupd、bash-completion、tmux、ima-evm-utils, audit, rng-tools, podman, container-selinux, skope-curle2, cris
  tar                policycoreutils, selinux-policy-targeted
  vhd                \@Core, langpacks-en
  vmdk               \@core, chrony, firewalld, kernel, langpacks-en, open-vm-tools, selinux-policy-targeted
:::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
当您在蓝图中添加附加组件时,您必须确定您添加的组件中的软件包不会与其他软件包组件冲突,否则系统无法解决依赖项。因此，您无法创建自定义镜像。
:::
::: itemizedlist
**其它资源**
-   [镜像构建器描述](#composer-description_composing-a-customized-rhel-system-image.html#composer-output-formats_composer-description "镜像构建器输出格式"){.link}
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#services-enabled-by-default_creating-system-images-with-composer-command-line-interface}已启用的服务 {.title}
:::
当您配置自定义镜像时,启用的服务是您正在运行的 RHEL8
发行版本的默认服务,另外,还会为特定镜像类型启用的服务。`osbuild-composer`{.literal}
例如, `.ami`{.literal} 镜像类型启用服务
`sshd`{.literal}、`chronyd`{.literal} 和
`cloud-init`{.literal}，且在没有这些服务时，自定义镜像不会引导。
::: table
[]{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#idm140524607256464}
**表 3.2. 启用服务来支持镜像类型创建**
::: table-contents
  镜像类型           已启用的服务
  ------------------ ---------------------------------------------------------------------------------
  ami                没有默认服务
  OpenStack          sshd、cloud-init、cloud-init-local、cloud-config、cloud-final
  qcow2              没有默认服务
  rhel-edge-commit   没有默认服务
  tar                没有默认服务
  vhd                sshd, chronyd, waagent, cloud-init, cloud-init-local, cloud-config, cloud-final
  vmdk               sshd、chronyd、vmtoolsd
:::
:::
注：您可以自定义在系统引导过程中要启用的服务。但是,对于默认启用服务的镜像类型,自定义不会覆盖此功能。
::: itemizedlist
**其它资源**
-   [支持的镜像自定义](#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#image-customizations_creating-system-images-with-composer-command-line-interface "支持的镜像自定义"){.link}
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#disks-and-partitions-configuration_creating-system-images-with-composer-command-line-interface}使用镜像构建器进行磁盘和分区配置 {.title}
:::
镜像构建器不允许对磁盘进行分区。带有分区磁盘的输出类型将有一个分区，以及引导系统镜像所需的特定于平台的分区。例如：
`qcow2`{.literal}
镜像类型有一个根分区,可能是一个镜像引导所需的特定平台的引导分区（如
[**PReP**]{.strong} for [**PPC64**]{.strong} 系统）。
:::
:::
[]{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html}
::: chapter
::: titlepage
# []{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image}第 4 章 使用 Image Builder Web 控制台界面创建系统镜像 {.title}
:::
镜像构建器是创建自定义系统镜像的工具。要控制 Image Builder
并创建自定义系统镜像，您可以使用 Web 控制台界面。请注意,
[命令行界面](#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html "第 3 章 使用 Image Builder 命令行界面创建系统镜像"){.link}
目前为首选，因为它提供了更多的功能。
::: section
::: titlepage
# []{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html#accessing-composer-gui-in-the-rhel-8-web-console_creating-system-images-with-composer-web-console-interface}在 RHEL 8 web 控制台中访问镜像构建器 GUI {.title}
:::
RHEL 8 web 控制台的 [**cockpit-composer**]{.strong} 插件可让用户管理
Image Builder
蓝图,并使用图形界面组成镜像。请注意,控制镜像构建器的首选方法是使用命令行界面。
::: itemizedlist
**先决条件**
-   您必须有对该系统的根权限。
:::
::: orderedlist
**流程**
1.  在安装 Image Builder 的 web 浏览器中打开
    `https://localhost:9090/`{.literal}。
    有关如何远程访问镜像构建器的更多信息，请参阅[[*使用 RHEL 8 web
    控制台文档管理系统*]{.emphasis}](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/managing_systems_using_the_rhel_8_web_console){.link}。
2.  使用系统中有足够权限的用户帐户登录到 web 控制台。
3.  要显示 Image Builder 控制，请点击 `Image Builder`{.literal}
    图标，该图标位于窗口的上角。
    Image Builder 视图会打开，它会列出现有的蓝图。
:::
::: itemizedlist
**其它资源**
-   [使用 Image Builder
    命令行界面创建系统镜像](#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html "第 3 章 使用 Image Builder 命令行界面创建系统镜像"){.link}
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html#creating-a-composer-blueprint-in-the-web-console-interface_creating-system-images-with-composer-web-console-interface}在 web 控制台界面中创建 Image Builder 蓝图 {.title}
:::
要描述自定义系统镜像,首先创建一个蓝图。
::: itemizedlist
**先决条件**
-   在浏览器中打开了 RHEL 8 web 控制台的 Image Builder 界面。
:::
::: orderedlist
**流程**
1.  点击右上角的 [Create Blueprint]{.guibutton}。
    此时会出现一个蓝图名称和描述字段。
2.  填写蓝图名称及其描述，然后点击 [Create]{.guibutton}。
    屏幕更改为蓝图编辑模式。
3.  添加您要包含在系统镜像中的组件：
    ::: informalexample
    ::: orderedlist
    1.  在左侧，在 `Available Components`{.literal}
        字段中输入组件名称或者部分组件名称，然后按 [Enter]{.guibutton}
        键。
        搜索添加到文本条目字段的过滤器列表中,下面的组件列表将减少到与搜索匹配的组件列表。
        如果组件列表太长,请以相同的方式添加进一步的搜索术语。
    2.  组件列表会进行分页。要移动到其他结果页面,请使用组件列表之上的箭头和条目字段。
    3.  点击要用来显示其详情的组件名称。右窗格会填充组件的详情,如版本和依赖项。
    4.  选择在 `Component Options`{.literal} 框要使用的版本，使用
        `Version Release`{.literal} 下拉菜单。
    5.  点击左上角的 [Add]{.guibutton}。
    6.  如果您错误地添加了一个组件，点右窗格中条目右侧的
        [...]{.guibutton} 按钮删除它，并在菜单中选择
        `Remove`{.literal}。
    :::
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果您不想为一些组件选择一个版本,您可以点击组件列表右侧的
    [+]{.guibutton} 按钮来跳过组件详情屏幕和版本选择。
    :::
    :::
4.  要保存蓝图,请点击右上角的 [Commit]{.guibutton}。概述更改的对话框。点
    [Commit]{.guibutton}。
    右侧的一个小弹出会告诉您保存的进程,然后告知结果。
5.  要退出编辑屏幕,请点击左上角的 `Back to Blueprints`{.literal}。
    Image Builder 视图会打开，它会列出现有的蓝图。
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html#editing-a-composer-blueprint-in-the-web-console-interface_creating-system-images-with-composer-web-console-interface}在 web 控制台界面中编辑 Image Builder 蓝图 {.title}
:::
要更改自定义系统镜像的规格,请编辑对应的蓝图。
::: itemizedlist
**先决条件**
-   在浏览器中打开了 RHEL 8 web 控制台的 Image Builder 界面。
-   一个蓝图已存在。
:::
::: orderedlist
**流程**
1.  通过在左上角的搜索框中输入名称或部分来找到您要编辑的蓝图,然后按
    [Enter]{.guibutton} 键。
    搜索添加到文本条目字段的过滤器列表中,下面的蓝图列表与搜索匹配。
    如果蓝图列表太长,请以相同的方式添加进一步的搜索术语。
2.  在蓝图的右侧,按属于蓝图的 [Edit Blueprint]{.guibutton} 按钮。
    蓝图编辑屏幕会显示。
3.  点击右窗格条目右侧点击其条目右侧的 [⫶]{.guibutton}
    按钮来删除不需要的组件，并在菜单中选择 `Remove`{.literal}。
4.  更改现有组件的版本：
    ::: orderedlist
    1.  在 Blueprint Components 搜索字段中,在标题
        `Blueprint Components`{.literal}
        下输入组件名称或其中的一部分,然后按 [Enter]{.guibutton}。
        搜索添加到文本条目字段的过滤器列表中,下面的组件列表将减少到与搜索匹配的组件列表。
        如果组件列表太长,请以相同的方式添加进一步的搜索术语。
    2.  点击组件条目右侧的 [⫶]{.guibutton} 按钮，并在菜单中选择
        `View`{.literal}。
        在右窗格中打开组件详情屏幕。
    3.  在 `Version Release`{.literal}
        下拉菜单中选择所需版本,然后点击右上角 [的]{.guibutton} Apply
        Change。
        更改会被保存,右窗格返回列出蓝图组件。
    :::
5.  添加新组件：
    ::: orderedlist
    1.  在左侧,在 `Available Components`{.literal}
        标题下输入组件名称或其部分到字段中,然后按 [Enter]{.guibutton}
        键。
        搜索添加到文本条目字段的过滤器列表中,下面的组件列表将减少到与搜索匹配的组件列表。
        如果组件列表太长,请以相同的方式添加进一步的搜索术语。
    2.  组件列表会进行分页。要移动到其他结果页面,请使用组件列表之上的箭头和条目字段。
    3.  点击要用来显示其详情的组件名称。右窗格会填充组件的详情,如版本和依赖项。
    4.  选择您要在 `Component Options`{.literal} 框中使用的版本，使用
        `Version Release`{.literal} 下拉菜单。
    5.  点击右上角的 [Add]{.guibutton}。
    6.  如果您错误地添加了一个组件，点右窗格中条目右侧的 [⫶]{.guibutton}
        按钮删除它，并在菜单中选择 `Remove`{.literal}。
        ::: informalexample
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}