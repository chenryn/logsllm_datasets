# IronMask: Versatile Verification of Masking Security

## Authors
Sonia Belaïd, Darius Mercadier, Matthieu Rivain, and Abdul Rahman Taleb

### Abstract
This paper introduces IronMask, a new versatile verification tool for masking security. IronMask is the first tool to offer verification of standard simulation-based security notions in the probing model as well as recent composition and expandability notions in the random probing model. It supports any masking gadgets with linear randomness (e.g., addition, copy, and refresh gadgets) and quadratic gadgets (e.g., multiplication gadgets) that may include non-linear randomness (e.g., by refreshing their inputs), while providing complete verification results for both types of gadgets. We achieve this complete verifiability by introducing a new algebraic characterization for such quadratic gadgets and exhibiting a complete method to determine the sets of input shares necessary and sufficient to perform a perfect simulation of any set of probes. Various benchmarks show that IronMask is competitive with state-of-the-art verification tools in the probing model (maskVerif, scVerif, SILVER, matverif). IronMask is also several orders of magnitude faster than VRAPS—the only previous tool verifying random probing composability and expandability—and SILVER—the only previous tool providing complete verification for quadratic gadgets with non-linear randomness. Thanks to this completeness and increased performance, we obtain better bounds for the tolerated leakage probability of state-of-the-art random probing secure compilers.

### Index Terms
Side-channel security, masking, physical defaults, automatic verification, complete verification, composition, probing model, random probing model, IronMask

## I. Introduction
Side-channel attacks exploit the physical leakage of a device executing cryptographic implementations to extract manipulated secrets. These attacks can be carried out using inexpensive equipment and are generally capable of recovering keys within a limited time if no specific protections are in place.

Since the discovery of these attacks in the late 1990s, the community has investigated various approaches to counteract them. One of the most widely deployed methods is masking [21], [29]. The main idea of masking is to split sensitive information across multiple variables called shares. For t-th order Boolean masking, each sensitive value \( x \) is split into \( t+1 \) shares \( x_1, \ldots, x_{t+1} \). The first \( t \) shares \( x_1, \ldots, x_t \) are generated uniformly at random, and the last share \( x_{t+1} \) is computed as \( x_{t+1} \leftarrow x \oplus x_1 \oplus \cdots \oplus x_t \). This makes it exponentially difficult for an attacker to recover sensitive data, as they must collect and aggregate information from all shares, which come with noise.

While Boolean masking is straightforward for linear operations, it becomes more complex for non-linear computations, where shares must be interleaved. These operations require additional randomness to maintain the security order. To reason about the security of masked implementations, the leakage is formalized in leakage models. The most famous is the t-probing model, introduced by Ishai, Sahai, and Wagner in 2003 [31]. In this model, the leakage is modeled as the exact values of \( t \) intermediate variables chosen by the attacker. Variants of this model, such as the robust probing model [27], consider wider leakage to model physical effects like glitches. However, these models sometimes fail to closely reflect the reality of embedded devices, particularly in capturing horizontal attacks [9] that exploit repeated manipulation of variables.

Therefore, the community is focusing on more realistic leakage models, such as the random probing model [1], [25]. In this model, the leakage is assumed to gather the exact value carried by each wire of the circuit with probability \( p \). The security tightly reduces to the security in the noisy leakage model [34], [25], where each variable leaks a noisy function of its value. The random probing model can also capture glitches or other side effects.

In any model, the security of almost all masking approaches relies on the security of small gadgets (i.e., atomic masked operations) and their composition. For instance, in the probing model and its variants, the type system of Barthe et al. [6] allows the secure composition of small gadgets proven to be (strong) non-interferent. The t-non-interference is satisfied when any set of \( t \) intermediate variables can be perfectly simulated from \( t \) input shares, and t-strong non-interference adds a condition on the output observations. Both properties imply t-probing security. Similarly, in the random probing model, Ananth et al. [2] use an expansion strategy on top of secure multi-party computation protocols, while Belaïd et al. use an expansion strategy on top of random probing expandable gadgets [13], [16]. These works only require gadgets that are masked at small orders to build circuits achieving an arbitrary level of random probing security.

Even at reasonable orders, manual verification of security properties on small gadgets has been shown to be very error-prone [23]. Therefore, automatic tools are regularly built to apply formal verification. For example, two existing tools currently check random probing properties (VRAPS [13] and STRAPS [19]). However, neither provides completeness (i.e., they can falsely deem a set of leaking variables as insecure with respect to the secret). In terms of efficiency, VRAPS struggles to verify even small gadgets at reasonable orders, and STRAPS only manages to do so using verification rules from the underlying tool maskVerif [5], [6], [3], which only verifies probing security properties and is not complete. Other tools that achieve complete verification of some (probing-like) security properties include SILVER [32], which suffers from low performance, and matverif [18], which is restricted to specific gadgets only.

### Our Contributions
In this work, we introduce IronMask, a new automatic verification tool to check probing and random probing security properties using complete and efficient procedures. Our main contributions are:

- **Unified Characterization**: We formalize all probing and random probing properties from a single common building block, a function we call SIS. We show that all security properties can be verified using a unique instantiation of this function (Section II). SIS receives a set of probes on a gadget and performs operations on the algebraic expressions of the probes to determine the exact sets of input shares necessary and sufficient to perform a perfect simulation of these probes.
  
- **Extended Algebraic Characterization**: We extend the algebraic characterization of gadgets with linear randomness to more general gadgets with non-linear randomness, which perform quadratic operations on input shares mixed with randomness (Section III). Our extended characterization captures recent gadget designs [9], [16], achieving advanced security properties such as resistance to horizontal attacks or random probing security. From this characterization, we provide a complete verification method that applies to most (if not all) masking gadgets for standard operations (addition, multiplication, refreshing, etc.).

- **IronMask Tool**: We introduce IronMask, a new versatile verification tool for all probing and random probing-like properties in the state of the art (Section IV). IronMask supports the verification of traditional gadgets with linear randomness and newly formalized gadgets with non-linear randomness, along with a complete verification method for both types of gadgets based on our extended algebraic characterization. IronMask implements several optimizations to make the verification faster. We benchmark the performance of our new tool (Section V) and show that it is competitive with state-of-the-art verification tools in the probing model (maskVerif, scVerif, SILVER, matverif). IronMask is also several orders of magnitude faster than VRAPS and SILVER. Thanks to this completeness and increased performance, we obtain better bounds for the tolerated leakage probability of state-of-the-art random probing secure compilers. IronMask is open-source and publicly available at: [https://github.com/CryptoExperts/IronMask](https://github.com/CryptoExperts/IronMask)

## II. Characterization of Security Notions for Masking Gadgets

### A. Preliminaries
Throughout the paper, \( K \) denotes a finite field. For any \( n \in \mathbb{N} \), we denote \([n]\) the integer set \([n] = \{1, \ldots, n\}\). For any tuple \(\vec{x} = (x_1, \ldots, x_n) \in K^n\) and any set \( I \subseteq [n] \), we denote \(\vec{x}|I = (x_i)_{i \in I}\).

An arithmetic circuit over a field \( K \) is a labeled directed acyclic graph whose edges are wires and vertices are arithmetic gates processing operations over \( K \) (e.g., additions, multiplications, copies). A randomized arithmetic circuit is equipped with an additional random gate of fan-in 0, which outputs a fresh uniform random value of \( K \).

The n-linear decoding mapping, denoted \(\text{LinDec}\), refers to the function \(\text{LinDec} : K^n \to K\) defined as:
\[
\text{LinDec}(x_1, \ldots, x_n) \mapsto x_1 + \cdots + x_n,
\]
for every \( n \in \mathbb{N} \) and \((x_1, \ldots, x_n) \in K^n\). We further consider that, for every \( n, \ell \in \mathbb{N} \), on input \((\vec{x}_1, \ldots, \vec{x}_\ell) \in (K^n)^\ell\), the n-linear decoding mapping acts as:
\[
\text{LinDec}((\vec{x}_1, \ldots, \vec{x}_\ell)) \mapsto (\text{LinDec}(\vec{x}_1), \ldots, \text{LinDec}(\vec{x}_\ell)).
\]

For any \( x \in K \), an n-linear sharing of \( x \) is a vector \(\vec{x} \in K^n\) such that \(\text{LinDec}(\vec{x}) = x\). A random vector \(\vec{x}\) distributed over \( K^n \) is said to be a uniform sharing of \( x := \text{LinDec}(\vec{x}) \) if for any set \( I \subseteq [n] \) with \( |I| < n \), the random vector \(\vec{x}|I\) is uniformly distributed over \( K^{|I|} \).

In the following, we shall call an (n-share, \(\ell\)-to-m) gadget, denoted \( G \), for some function \( g : K^\ell \to K^m \), a randomized arithmetic circuit that maps an input \((\vec{x}_1, \ldots, \vec{x}_\ell) \in (K^n)^\ell\) to an output \((\vec{y}_1, \ldots, \vec{y}_m) \in (K^n)^m\).

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.