title:IronMask: Versatile Verification of Masking Security
author:Sonia Bela&quot;ıd and
Darius Mercadier and
Matthieu Rivain and
Abdul Rahman Taleb
0
0
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
IronMask: Versatile Veriﬁcation of Masking
Security
Sonia Bela¨ıd∗, Darius Mercadier∗, Matthieu Rivain∗ and Abdul Rahman Taleb∗†
Email: {sonia.belaid,darius.mercadier,matthieu.rivain,abdul.taleb}@cryptoexperts.com
CryptoExperts, France
∗
†
Sorbonne Universit´e, CNRS, LIP6, F-75005 Paris, France
Email: PI:EMAIL
Abstract—This paper introduces IronMask, a new versatile
IronMask is the ﬁrst
veriﬁcation tool for masking security.
to offer the veriﬁcation of standard simulation-based security
notions in the probing model as well as recent composition
and expandability notions in the random probing model. It
supports any masking gadgets with linear randomness (e.g.
addition, copy and refresh gadgets) as well as quadratic gad-
gets (e.g. multiplication gadgets) that might include non-linear
randomness (e.g. by refreshing their inputs), while providing
complete veriﬁcation results for both types of gadgets. We
achieve this complete veriﬁability by introducing a new algebraic
characterization for such quadratic gadgets and exhibiting a
complete method to determine the sets of input shares which are
necessary and sufﬁcient to perform a perfect simulation of any
set of probes. We report various benchmarks which show that
IronMask is competitive with state-of-the-art veriﬁcation tools
in the probing model (maskVerif, scVerif, SILVER, matverif).
IronMask is also several orders of magnitude faster than VRAPS
–the only previous tool verifying random probing composability
and expandability– as well as SILVER –the only previous tool
providing complete veriﬁcation for quadratic gadgets with non-
linear randomness. Thanks to this completeness and increased
performance, we obtain better bounds for the tolerated leakage
probability of state-of-the-art random probing secure compilers.
Index Terms—Side-channel security, masking, physical de-
faults, automatic veriﬁcation, complete veriﬁcation, composition,
probing model, random probing model, IronMask
I. INTRODUCTION
Side-channel attacks exploit the physical leakage of a de-
vice executing cryptographic implementations to extract the
manipulated secrets. They can be built from cheap equipment
and are generally able to recover the keys in a limited time in
the absence of speciﬁc protections.
Since the discovery of these attacks in the late nineties,
the community investigated several approaches to counteract
them. Among these approaches, masking [21], [29] is one of
the most deployed in practice. The main idea of masking is to
split the information between several variables called shares.
In a nutshell, for tth-order Boolean masking, each sensitive
value x is split into (t + 1) shares x1, . . . , xt+1. The ﬁrst t
shares x1, . . . , xt are generated uniformly at random and the
last one xt+1 is computed as xt+1 ← x ⊕ x1 ⊕ ··· ⊕ xt.
Doing so, the attacker must collect and then aggregate the
information from all the shares to recover sensitive data. This
becomes exponentially hard with the number of shares as each
observation comes with noise.
While Boolean masking can be easily implemented for
linear operations that are directly applied on each share sepa-
rately, it becomes much more complex for non-linear compu-
tations for which shares must be interleaved. These operations
require additional randomness to preserve the security order.
To properly reason on the security of these operations, and
more generally on the security of masked implementations, the
leakage is generally formalized in so-called leakage models.
The most famous one is probably the t-probing model, intro-
duced by Ishai, Sahai, and Wagner in 2003 [31]. In this model,
the leakage is modeled as the exact values of t intermediate
variables chosen by the attacker. Variants of this model include
the robust probing model [27] in hardware scenarios, which
considers wider leakage to model physical effects such as
glitches. Instead of t intermediate variables, the attacker gets
t sets of variables that belong to the same combinatorial
set. While probing-like models are very convenient to build
security proofs,
the
reality of embedded devices. For instance, they do not capture
horizontal attacks [9], which exploit in particular the repeated
manipulation of variables within an execution.
they sometimes fail
to closely reﬂect
Therefore, the community is starting to focus on more real-
istic leakage models, such as the random probing model [1],
[25]. The leakage is assumed to gather the exact value carried
out by each wire of the circuit with probability p. The security
tightly reduces to the security in the noisy leakage model [34],
[25] in which each variable leaks a noisy function of its value.
The random probing model can also be extended to capture
glitches or other side effects.
In any model, the security of almost all masking approaches
relies on the security of small gadgets (i.e., atomic masked
operations) and their composition. For instance, in the probing
model and its variants, the type-system of Barthe et al. [6]
makes it possible to securely compose small gadgets that are
proven to be (strong) non-interferent. The t-non-interference
is itself satisﬁed when any set of t intermediate variables can
be perfectly simulated from t input shares while the t-strong
non-interference adds a condition on the output observations.
Both properties imply t-probing security. Similarly, in the
random probing model, Ananth et al. [2] use an expansion
© 2022, Sonia Belaïd. Under license to IEEE.
DOI 10.1109/SP46214.2022.00086
142
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
strategy on top of secure multi-party computation protocols
while Bela¨ıd et al. use an expansion strategy on top of random
probing expandable gadgets [13], [16]. The latter works only
require gadgets that are masked at small orders to build circuits
achieving an arbitrary level of random probing security.
Even at reasonable orders, the manual veriﬁcation of se-
curity properties on small gadgets has been shown to be
very error-prone [23]. Therefore, automatic tools are regularly
built to apply a formal veriﬁcation. For instance, two existing
tools currently check random probing properties (namely,
VRAPS [13] and STRAPS [19]). However, none of these
two tools provide completeness (i.e., they can falsely deem a
set of leaking variables as insecure with respect to the secret).
In terms of efﬁciency, VRAPS makes it difﬁcult to verify
even small gadgets at reasonable orders and STRAPS only
manages to do it using veriﬁcation rules from the underlying
tool maskVerif [5], [6], [3] (which only veriﬁes probing
security properties), which by construction, are not complete.
tools which achieve complete veriﬁcation of
some (probing like) security properties, we count only
SILVER [32], which suffers from low performance, and
matverif [18], which is restricted to speciﬁc gadgets only.
for
As
Our contributions. In this work, we introduce IronMask, a
new automatic veriﬁcation tool to check probing and random
probing security properties using complete and efﬁcient
procedures. Our main contributions are the following:
• We formalize all of the probing and random probing
properties of the state of the art from a single common
building block, a function we call SIS, and show that all
of the security properties can be veriﬁed using a unique
instantiation of that function (Section II). In a nutshell,
SIS receives as input a set of probes on a gadget (and the
description of the corresponding gadget) and performs a
number of operations on the algebraic expressions of the
probes in order to determine the exact sets of input shares
which are necessary and sufﬁcient to perform a perfect
simulation of these probes. While SIS partially uses some
properties from the state of the art, it was not clearly
exhibited before, and the uniﬁcation of all the (random)
probing-like security notions with respect to this function
was not explicitly well-deﬁned.
• We extend the algebraic characterization introduced
in [11], [12] of gadgets with linear randomness (i.e. all
random values are additive on the wires of the gadget) to
more general gadgets with non-linear randomness which
perform quadratic operations on input shares mixed with
randomness (Section III). Our extended characterization
notably captures recent gadget designs [9], [16], achiev-
ing advanced security properties such as resistance to
horizontal attacks or random probing security. From
this characterization, we provide a complete veriﬁcation
method that applies to most (if not all) masking gadgets
for standard operations (addition, multiplication, refresh-
ing, etc.). In comparison, the only previously existing
complete veriﬁcation method for such general gadgets
would rely on exhausting the truth table of tuples of
intermediate variables with respect to the inputs and the
randomness, which is highly inefﬁcient.
• We introduce IronMask, a new versatile veriﬁcation tool
for all probing and random probing-like properties in
the state of the art (Section IV). IronMask supports the
veriﬁcation of traditional gadgets with linear randomness,
as well as newly formalized gadgets with non-linear
randomness along with a complete veriﬁcation method
for both types of gadgets based on our extended algebraic
characterization. IronMask implements several optimiza-
tions to make the veriﬁcation faster. We benchmark the
performance of our new tool (Section V) and show that
it is competitive with state-of-the-art veriﬁcation tools
in the probing model (maskVerif, scVerif, SILVER,
matverif). IronMask is also several orders of magnitude
faster than VRAPS,
the only previous tool verifying
random probing composability and expandability, and
SILVER, the only previous tool providing complete ver-
iﬁcation for gadgets with non-linear randomness. Iron-
Mask uses complete methods for the veriﬁcation, unlike
VRAPS and STRAPS which are the only veriﬁcation
tools in the random probing model. Thanks to this com-
pleteness and increased performance, we obtain better
bounds for the tolerated leakage probability1 of state-of-
the-art random probing secure compilers. IronMask is
open-source and publicly available at:
https://github.com/CryptoExperts/IronMask
II. CHARACTERIZATION OF SECURITY NOTIONS FOR
MASKING GADGETS
A. Preliminaries
Throughout the paper, K shall denote a ﬁnite ﬁeld. For any
n ∈ N, we shall denote [n] the integer set [n] = [1, n] ∩ Z.
For any tuple (cid:2)x = (x1, . . . , xn) ∈ K
n and any set I ⊆ [n], we
shall denote (cid:2)x|I = (xi)i∈I.
An arithmetic circuit over a ﬁeld K is a labeled directed
acyclic graph whose edges are wires and vertices are arith-
metic gates processing operations over K (e.g., additions,
multiplications, copies). A randomized arithmetic circuit is
equipped with an additional random gate of fan-in 0 which
outputs a fresh uniform random value of K.
In the following, the n-linear decoding mapping, denoted
(cid:2)
LinDec, refers to the function
n → K deﬁned as
n K
LinDec : (x1, . . . , xn) (cid:8)→ x1 + ··· + xn ,
for every n ∈ N and (x1, . . . , xn) ∈ K
n. We shall further
consider that, for every n, (cid:3) ∈ N, on input ((cid:2)x1, . . . , (cid:2)x(cid:2)) ∈
(K
n)(cid:2) the n-linear decoding mapping acts as
LinDec : ((cid:2)x1, . . . , (cid:2)x(cid:2)) (cid:8)→ (LinDec((cid:2)x1), . . . , LinDec((cid:2)x(cid:2))) .
1Increased performance yields a tighter approximation of the failure prob-
ability in the random probing model, while completeness allows to compute
more accurate and complete values for that probability. Both factors result
in a tighter, more accurate approximation of the failure probability, from
which tighter bounds on the tolerated leakage probability are derived. See
Section V-A for more details.
2
143
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
For any x ∈ K, an n-linear sharing of x is a vector (cid:2)x ∈ K
n
such that LinDec((cid:2)x) = x. A random vector (cid:2)x distributed over
n is said to be a uniform sharing of x := LinDec((cid:2)x) if
K
for any set I ⊆ [n] with |I| < n the random vector (cid:2)x|I is
uniformly distributed over K
|I|.
In the following, we shall call an (n-share, (cid:3)-to-m) gadget
m, a randomized
n)(cid:2) to
(cid:4)
denoted G for some function g : K
arithmetic circuit that maps an input ((cid:2)x1, . . . , (cid:2)x(cid:2)) ∈ (K