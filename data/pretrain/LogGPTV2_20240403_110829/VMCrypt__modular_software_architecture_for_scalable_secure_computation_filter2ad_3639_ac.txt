we faced the same problem. There, we have multiple copies
of a sub component for set membership, and all of them are
notiﬁed with the same set. The issue with our design is that
ports have no control over when they receive notiﬁcations.
Fourth version. The fourth version introduces pulling
and pushing ports. A component with a pulling port does
not need to be connected to another component in order
to receive its signals. Instead, it pulls them from a global
pulling-pushing table, called PTable.
The most important aspect of pulling ports is that they
can control when they want to be notiﬁed. For example, in
the scenario mentioned above with the MIN circuit (Figure 2
c), the BinaryMin circuits will not build when the carry bit
becomes available. Instead, they decide when to pull this
value from the table. Of course, pulling is useless without
pushing and therefore any output port can push a value into
the table. In the MIN circuit scenario, for example, the carry
bit will be initially pushed into the table, and components
will pull it from the table.
The table presents several design challenges. Consider, for
example, a component that has only pulling ports (we call it
a pulling component). According to the notiﬁcation princi-
ple, this component will never get notiﬁed and hence never
built. The question is therefore who will notify this com-
ponent and when. We decided that this will be speciﬁed
by the enclosing component. That is, a component speci-
ﬁes pulling ports, pulling sub components, and a counter.
The component increases its counter on each notiﬁcation. If
the counter equals to the in-degree of the component, then
all pulling ports and pulling sub-components are notiﬁed.
Thus, pulling can occur before, after, or while the compo-
nent is receiving notiﬁcations. There is another issue. Recall
that the role of the bus is to destruct a component once the
component ﬁred its last output. If some signals go to the
PTable instead, the bus would not know about them and
therefore never destruct the component. This problem has a
recursive nature because components are nested. We solved
this problem by allowing these pushing signals to continue
to notify buses. Components, however, can ignore them.
We did not conceive situations where a port pulls a value
that has not been pushed yet, but to allow this ﬂexibility the
table stores references to components making such requests
and notiﬁes them as soon as the value becomes available.
We decided that only components (but no other object) will
push values into the table. This preserves modularity be-
cause, by including pulling and pushing information in the
component, developers can freely exchange components.
To see how a PTable works in practice, consider the VM-
Crypt component for set intersection from Figure 4. Intu-
itively, this component pushes the set X = {x1, . . . , xm(cid:0)1}
of the server into the table, and then each yi from the client
set Y = {y1, . . . , yn} is tested for membership in X by
pulling X from the table. In detail, the component contains
two sub components of type UniSwitch. The ﬁrst UniSwitch
pushes X into the table using m copies of the identity map
(recall that only components can push. It turns out that Map
is ideal for this purpose). The second UniSwitch contains
n copies of a Switch for set membership. This Switch con-
tains three sub components. The ﬁrst is a map that pushes
yi into row m of the table. The second is a UniSwitch that
contains m copies of the equality component EQ (of type
Circuit). The j-th EQ circuit pulls to its leftmost ports the
value stored in the table at row m (initially y0) and to its
rightmost ports the value stored in the table at row j (which
is xj). That is, it checks whether yi and xj are equal. Thus,
the UniSwitch containing the EQ circuits outputs a sequence
of m bits that are all 0 if and only if yi /∈ X. Because this
output is fed into an OR component (of type Circuit), the
i-th Switch for set membership will output 1 if and only if
yi ∈ X.
How much memory did the PTable save? Suppose that we
compute set intersection on databases of size N = 1, 000, 000
and that for eﬃciency we hash set elements into 20 byte
strings (that is, arity = 160 bits). This requires N (N ∗
arity) + N ∗ arity wires. The minimum memory cost for a
wire is 8 bytes (a reference to the wire plus a reference in
the wire itself). Thus, we would need a fantastic amount of
320 terabytes RAM.
Let us examine what happens in memory when the set
intersection component computes. The component is ﬁrst
notiﬁed with the bits of x0 and therefore only the Map ex-
ists fully in memory. There is nothing inside the map, but
notice that now we also need to store information about
which ports are pushing. Since all ports are pushing, this
requires an array of size arity, which is the bit length of set
elements. Once the map ﬁres its last signal it is destruc-
ted by its bus and the UniSwitch in which this map resided
becomes empty again. This repeats until x0, . . . , xm(cid:0)1 are
pushed. Now the table contains the entire set X. This is
not a ﬂaw in VMCrypt; it is a consequence of the underlying
algorithm we are using for set intersection. Next, we notify
the component with the bits of y0. As before, this causes
the map to build and push y0 into the table. After the map
destructs, the UniSwitch containing the EQ circuit is built.
Next, the ﬁrst equality circuit builds, computes, destructs,
and the UniSwitch containing it becomes empty again. The
output of the EQ notiﬁes the OR component. Since the OR was
implemented as a circuit and circuits have a buﬀer, the out-
put of EQ is stored in this buﬀer and the OR is not built yet.
After the last EQ circuit produces its output, the UniSwitch
containing the EQ destructs and the buﬀer of the OR is full.
This causes the buﬀer to build the OR and ﬂush all the signals
into it. The OR computes, destructs, and sends its output to
its enclosing component, the Switch. Since the out-degree
of the Switch is also 1, it also destructs. Now we are at
the same state as in the beginning because all the compo-
nents inside the set intersection component are empty. This
entire process repeats with y1, . . . , yn(cid:0)1, and ﬁnally the set
intersection component destructs.
720OR
Map
Map
EQ
x0; : : : ; xm(cid:0)1
y0; : : : ; yn(cid:0)1
m
m-1
yi
xm(cid:0)1
0
x0
Figure 4: The set intersection component implemented in VMCrypt.
4. CREATING A NEW COMPONENT
This section describes how to create a VMCrypt com-
ponent. For lack of space, we only provide an overview.
See [20, 19] for details.
We start with an overview of the component hierarchy
(Figure 5). The root of this hierarchy is BaseComponent.
Objects of this class have an ID, which is a pair of integers
(depth,index). The only role of the ID is in validation.
Class Gate is extended by two classes: BinaryGate for binary
gates and UniGate for unary gates. All gates receive their
type (e.g., XOR, OR, NOT) during instantiation, and their
output wire (initially empty) is also created during instan-
tiation. The classes Map, UniSwitch, Switch and Circuit
are derived from Component. The main diﬀerence between
a Component and Gate is that the former has a Bus, which
also implies that it is built only when notiﬁed, whereas the
later has an output wire and is built when instantiated.
Components are created in VMCrypt by writing a new
Java class. Whether created from existing components or
from scratch, developing new components is 100% modular
- it requires no access to any source code. To create a new
component, we need to choose a sub class of Component to
extend, and the type of sub components. Notice that we
can also add new building blocks to VMCrypt by deriving
directly from Component, whereas in Fairplay the language
is ﬁnal and cannot be extended.
Class Map. A map is a component that maps an input
from one port to another. A map only needs to implement
abstract method map. For example, the identity map code
is as follows:
class IDMap extends Map {
IDMap(Bus bus, int inDegree) {
super(bus, inDegree);
}
int map(int port) {
return port;
}
public String name() {
return "IDMap";
}
}
The name method returns the name of the component
and is used only for testing purposes. The notify method,
which handles notiﬁcations from other components, is im-
plemented in class Map. Notice that components like Map are
not the only notiﬁable modules; a wire, a bus, and other
modules also have a notify method.
Like all sub classes of Component, the constructor of Map
passes three arguments to the constructor of Component: in-
Degree, outDegree and a bus. Those are data members of
Component.
In the case of Map, the value of inDegree is
passed both as inDegree and outDegree, which is why our
constructor for IDMap only takes inDegree as an argument.
Class Component. The most important data member
of Component is the bus. We illustrate the role of the bus
using the minimum component (Figure 3). The base layer
of this component is a Switch with two sub components: a
UniSwitch and an IDMap. Figure 6 shows this Switch with
its two subcomponents (the BinaryMIN inside the UniSwitch
are not shown). Each component has a Bus shown as a
grey rectangle. As we mentioned above, all sub classes of
Component must pass to the constructor of Component an
instance of class Bus. This instance stores a reference (called
out) to a notiﬁable object that will receive the output of the
component. In the case of the minimum circuit, for example,
we ﬁrst instantiate the layer above the base layer (call it L),
then we create a new bus that will point at it by writing Bus
bus = new Bus(L), and ﬁnally we invoke the constructor
of the Switch with bus as argument. This bus is shown in
Figure 6 at the top left corner of the Switch. In addition to
directing the output, the bus is responsible for destructing a
component once it has ﬁred its last signal. For this, the bus
maintains a counter. The only role of the outDegree variable
is to set this counter. Consider now the sub components of
the Switch. Their output is intended to L, yet their busses
point at the bus of the Switch. Why? because the bus of
the Switch must be able to count all the signals leaving the
component. If some signals are missing, then it will never
destruct the Switch.
Let us see how the bus works in practice. Suppose that
the ﬁrst signal the Switch from Figure 6 receives is on port
0. It will pass it to the UniSwitch, who will process it and
ﬁre a new signal on, say, port 0. If the outDegree of the
UniSwitch is, say, 8, then the counter in the bus of the
UniSwitch is now 8 − 1 = 7. Similarly, if the outDegree of
the Switch is, say, 16, then the bus of the Switch updates its
counter to 16 − 1 = 15. Of course, it also passes the signal
from the UniSwitch out (to the layer above), on the same
port it was received, which is 0. The type of bus that we
use in the UniSwitch would not work in the IDMap. To see
why, consider what happens when the Switch routes signals
to the IDMap. Suppose that the inDegree of the UniSwitch
is 16 and that the Switch receives a signal on port 16. Since
16 does not fall in the range 0 − 15, the Switch will pass
it to the IDMap on port 16 − 16 = 0. Since the map is the
identity function, the bus of the IDMap will pass this sig-
nal to the bus of the Switch on port 0, which will override
outputs of the UniSwitch. Thus, when we instantiate the
IDMap, we pass to it an OffsetBus, which oﬀsets the port.
721BaseComponent
Component
Gate
Map
UniSwitch
Switch
Circuit
UniGate
BinaryGate
Figure 5: Class hierarchy of components.
Switch
UniSwitch
Map
Figure 6: The role of the Bus.
In this scenario we want the output of the IDMap appearing
immediately to the right of the output of the UniSwitch,
and since the outDegree of the UniSwitch is 8, we instanti-
ate this bus by writing OffsetBus offsetBus = new Off-
setBus(bus, 8), where bus is the bus of the Switch. Any
output of the IDMap on port i will now be given to the bus
of the Switch on port 8 + i.
Unlilke outDegree and Bus, the role of inDegree depends
on the component and the sub component. In a Map, the in-
Degree and outDegree are always the same, but inDegree
is never used. Similarly, Switch and UniSwitch never use
their own inDegree. However, the Switch uses the inDegree
of its sub components for routing. This is why all classes
derived from BaseComponent have an inDegree() method.
The UniSwitch takes two parameters: inputTab and out-
putTab. When a signal is received on port i, it is given to
the sub component at index index = ⌊i/inputTab⌋. If this
sub component outputs a signal on port j, then the bus of
the UniSwitch will output it on port index∗outputTab+j.
Class Circuit is the only component that uses its inDegree:
when a circuit is built, it instantiates inDegree objects of
class Wire and stores them in an array of size inDegree.
Circuits. Class Circuit is the only component with in-
put wires. Like in a Switch, the sub components of Circuit
can be of any type derived from BaseComponent. To create
a circuit in VMCrypt, we need to implement two methods:
one that instantiates sub components and another that con-
nects them. As an example, we implement the bit multi-
plexer from Figure 2 a. The skeleton of our class is:
class BitMUX extends Circuit {
BitMUX(Bus bus) {
super(bus, 3,1);
}
public String name() {
return "BitMUX";
}
}
The numbers 3 and 1 are the inDegree and outDegree
of the component, respectively. Class Circuit has an array
called components. When a circuit receives its ﬁrst input,
its define_sub_components() method is called. In the case
of the BitMUX, for example, this method will initiate com-
ponents to be XOR and AND gates. Next, class Circuit will
initialize its inputWires array to size inDegree (which is 3
in our case), create empty wires, and invoke method con-
nect_wires() to connect wires to gates.
Once building blocks like BitMUX are built, higher level
circuits can be built more easily. For example, our MUX on