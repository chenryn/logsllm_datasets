### 一、前言
分析了如此多的合约与攻击案例后，我发现随机数是经常出现的一个话题。在CTF题目中经常能见到随机数的预测。
以太坊作为数字货币的初始平台之一，已经在市面上进行了极广的普及。对于以太坊来说，其经常应用在ERC20、轮盘、彩票、游戏等应用中，并利用Solidity完成对合约的编写。作为区块链的应用，以太坊同样是去中心化的、透明的。所以许多赌博游戏、随机数预测等相关应用需要精心设计，否则就会产生危害。
本文详细的将以太坊中的随机数安全问题进行归类，并通过样例对各个类别的安全问题进行演示操作，方便读者进行进一步的分析解读。
### 二、随机数问题归类
我们在这里将随机数分类为四个大的方向。
  * 随机数使用区块中的公共变量作为随机数种子
  * 随机数使用过去的区块的区块哈希
  * 随机数结合哈希与私人设置的值作为种子
  * 随机数结合区块链机制而导致的安全问题
我将在下文中对这四类问题进行分析总结，并对合约进行演示讲解。
### 三、基于区块变量的随机数安全问题
根据有漏洞的合约以及常见的CTF题目，我们总结了几种被用于生产随机数的区块变量，如下：
  * now 该变量为当前时间戳信息。
    contract test{
        event block(uint);
        function run() public{
            block(now);
        }
    }
  * block.coinbase 代表挖当前区块的矿工地址
  * block.difficulty 表示这个区块的挖矿难度
  * block.gaslimit 表示交易中所限制的最大的gas值
  * block.number表示当前区块的高度
  * block.timestamp表示当前区块何时被挖出来的
这些区块变量可以被矿工进行计算，所以我们不能轻易的使用这些变量作为生成随机数的种子。并且，这些变量可以通过区块得到，当攻击者得到这些公共信息后，可以肆无忌惮的进行计算以达到预测随机数的效果。
下面我们看此类型的几个样例：
首先为一个轮盘类型的应用代码。
    /**
     *Submitted for verification at Etherscan.io on 2016-06-28
    */
    contract Lottery {
        event GetBet(uint betAmount, uint blockNumber, bool won); 
        struct Bet {
            uint betAmount;
            uint blockNumber;
            bool won;
        }
        address private organizer;
        Bet[] private bets;
        // Create a new lottery with numOfBets supported bets.
        function Lottery() {
            organizer = msg.sender;
        }
        // Fallback function returns ether
        function() {
            throw;
        }
        // Make a bet
        function makeBet() {
            // Won if block number is even
            // (note: this is a terrible source of randomness, please don't use this with real money)
            bool won = (block.number % 2) == 0; 
            // Record the bet with an event
            bets.push(Bet(msg.value, block.number, won));
            // Payout if the user won, otherwise take their money
            if(won) { 
                if(!msg.sender.send(msg.value)) {
                    // Return ether to sender
                    throw;
                } 
            }
        }
        // Get all bets that have been made
        function getBets() {
            if(msg.sender != organizer) { throw; }
            for (uint i = 0; i < bets.length; i++) {
                GetBet(bets[i].betAmount, bets[i].blockNumber, bets[i].won);
            }
        }
        // Suicide :(
        function destroy() {
            if(msg.sender != organizer) { throw; }
            suicide(organizer);
        }
    }
该合约的关键点在`makeBet()`函数中。
    // Make a bet
        function makeBet() {
            // Won if block number is even
            // (note: this is a terrible source of randomness, please don't use this with real money)
            bool won = (block.number % 2) == 0; 
            // Record the bet with an event
            bets.push(Bet(msg.value, block.number, won));
            // Payout if the user won, otherwise take their money
            if(won) { 
                if(!msg.sender.send(msg.value)) {
                    // Return ether to sender
                    throw;
                } 
            }
        }
在该函数中，用户会在调用该函数的同时获得一个won的bool变量，该变量通过对2进行取余操作来获取是否为true或者false。当won为基数的时候，合约向参与者进行赚钱。
然而这里的`block.number`可以进行预测，我们可以写攻击合约，当`block.number`满足条件时调用函数，当不满足的时候放弃执行该函数，这样就可以做到百分百命中。
第二个例子与`block.timestamp`有关。
    /**
     *Submitted for verification at Etherscan.io on 2017-08-20
    */
    pragma solidity ^0.4.15;
    /// @title Ethereum Lottery Game.
    contract EtherLotto {
        // Amount of ether needed for participating in the lottery.
        uint constant TICKET_AMOUNT = 10;
        // Fixed amount fee for each lottery game.
        uint constant FEE_AMOUNT = 1;
        // Address where fee is sent.
        address public bank;
        // Public jackpot that each participant can win (minus fee).
        uint public pot;
        // Lottery constructor sets bank account from the smart-contract owner.
        function EtherLotto() {
            bank = msg.sender;
        }
        // Public function for playing lottery. Each time this function
        // is invoked, the sender has an oportunity for winning pot.
        function play() payable {
            // Participants must spend some fixed ether before playing lottery.
            assert(msg.value == TICKET_AMOUNT);
            // Increase pot for each participant.
            pot += msg.value;
            // Compute some *almost random* value for selecting winner from current transaction.
            var random = uint(sha3(block.timestamp)) % 2;
            // Distribution: 50% of participants will be winners.
            if (random == 0) {
                // Send fee to bank account.
                bank.transfer(FEE_AMOUNT);
                // Send jackpot to winner.
                msg.sender.transfer(pot - FEE_AMOUNT);
                // Restart jackpot.
                pot = 0;
            }
        }
    }
简单的分析一下该合约。
该合约同样为一种游戏合约，合约中设定了固定的转账金额——`TICKET_AMOUNT`。该合约需要满足参与者转账设定好的金额，并当msg.value满足条件后，触发参与合约，该合约设定了随机数`random`并且该随机数为`uint(sha3(block.timestamp))
% 2`。当该随机数的结果为0时获奖，获奖一方获得`pot - FEE_AMOUNT`的金额，而庄家收取一定手续费。
看似简单的赌博游戏其中蕴含着一些漏洞可以操纵。`block.timestamp`是可以进行预测的，而参与者可以通过预测该值而达到作恶的可能。
第三个合约例子为：
    /**
     *Submitted for verification at Etherscan.io on 2017-09-01
    */
    contract Ethraffle_v4b {
        struct Contestant {
            address addr;
            uint raffleId;
        }
        event RaffleResult(
            uint raffleId,
            uint winningNumber,
            address winningAddress,
            address seed1,
            address seed2,
            uint seed3,
            bytes32 randHash
        );
        event TicketPurchase(
            uint raffleId,
            address contestant,
            uint number
        );
        event TicketRefund(
            uint raffleId,
            address contestant,
            uint number
        );
        // Constants
        uint public constant prize = 2.5 ether;
        uint public constant fee = 0.03 ether;
        uint public constant totalTickets = 50;
        uint public constant pricePerTicket = (prize + fee) / totalTickets; // Make sure this divides evenly
        address feeAddress;
        // Other internal variables
        bool public paused = false;
        uint public raffleId = 1;
        uint public blockNumber = block.number;