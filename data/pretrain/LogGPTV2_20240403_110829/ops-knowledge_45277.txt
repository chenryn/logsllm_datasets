When you run a command using `os.system`, `subprocess.Popen`, or `subprocess.call`, the behavior of the Python script depends on the method and its parameters. Hereâ€™s a more detailed explanation:

- **`os.system(command)`**: This function will execute the command in a subshell and wait for the command to complete before continuing. The Python script will pause at the line where `os.system` is called until the command finishes.

- **`subprocess.Popen(args, shell=True)`**: This function allows you to start a process and continue executing the Python script. However, if you set `shell=True`, the command is executed through the shell, and the script will still block (wait) until the command completes. If you want non-blocking behavior, you should use `Popen` without `shell=True` and manage the process manually.

- **`subprocess.call(args, shell=True)`**: This function is similar to `os.system` in that it waits for the command to complete before proceeding. The Python script will pause at the line where `subprocess.call` is called until the command finishes.

In summary, all these methods, when used with `shell=True`, are blocking, meaning the Python script will wait at the line where the system call is made until the external command completes. If you need non-blocking behavior, consider using `subprocess.Popen` without `shell=True` and handle the process asynchronously.