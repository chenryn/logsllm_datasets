In AngularJS, the `ng-repeat` directive can be used to iterate over an object as a key-value map. For more details, you can refer to the official documentation: [AngularJS ngRepeat Directive](https://docs.angularjs.org/api/ng/directive/ngRepeat).

However, in Angular (version 2 and later), the `*ngFor` directive only supports iteration over arrays. You can find more information in the official documentation: [Angular NgFor Directive](https://angular.io/api/common/NgForOf).

This difference in functionality between `ng-repeat` and `*ngFor` can make migrating from AngularJS to Angular more challenging. Ideally, it would be beneficial if `*ngFor` could also support iteration over objects, similar to `ng-repeat`.

Here is a revised version of your text:

---

In AngularJS, the `ng-repeat` directive can iterate over an object as a key-value map. For more details, you can refer to the official documentation: [AngularJS ngRepeat Directive](https://docs.angularjs.org/api/ng/directive/ngRepeat).

```html
<div ng-repeat="(key, value) in myObject">
  {{ key }}: {{ value }}
</div>
```

In contrast, in Angular (version 2 and later), the `*ngFor` directive only supports iteration over arrays. You can find more information in the official documentation: [Angular NgFor Directive](https://angular.io/api/common/NgForOf).

```html
<div *ngFor="let item of myArray">
  {{ item }}
</div>
```

This discrepancy in functionality between `ng-repeat` and `*ngFor` can make the migration from AngularJS to Angular more challenging. It would be beneficial if `*ngFor` could also support iteration over objects, similar to `ng-repeat`, to ease the transition.

---