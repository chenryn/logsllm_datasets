title:Lift-and-Shift: Obtaining Simulation Extractable Subversion and Updatable
SNARKs Generically
author:Behzad Abdolmaleki and
Sebastian Ramacher and
Daniel Slamanig
Lift-and-Shift: Obtaining Simulation Extractable
Subversion and Updatable SNARKs Generically(cid:63)
Behzad Abdolmaleki1, Sebastian Ramacher2, and Daniel Slamanig2
1 University of Tartu, Estonia
PI:EMAIL
2 AIT Austrian Institute of Technology, Austria
{sebastian.ramacher, daniel.slamanig}@ait.ac.at
Abstract. Zero-knowledge proofs and in particular succinct non-inter-
active zero-knowledge proofs (so called zk-SNARKs) are getting increas-
ingly used in real-world applications, with cryptocurrencies being the
prime example. Simulation extractability (SE) is a strong security no-
tion for zk-SNARKs which informally ensures non-malleability of proofs.
The high importance of this property is acknowledged by leading com-
panies in this ﬁeld such as Zcash and underpinned by various attacks
against the malleability of cryptographic primitives in the past. Another
problematic issue for the practical use of zk-SNARKs is the requirement
of a fully trusted setup, as especially for large-scale decentralized applica-
tions ﬁnding a trusted party that runs the setup is practically impossible.
Quite recently, the study of approaches to relax or even remove the trust
in the setup procedure, and in particular subversion as well as updat-
able zk-SNARKs (with latter being the most promising approach), has
been initiated and received considerable attention since then. Unfortu-
nately, so far SE-SNARKs with the aforementioned properties are only
constructed in an ad-hoc manner and no generic techniques are available.
In this paper, we are interested in such generic techniques and there-
fore ﬁrstly revisit the only available lifting technique due to Kosba et
al. (called C∅C∅) to generically obtain SE-SNARKs. By exploring the
design space of many recently proposed SNARK- and STARK-friendly
symmetric-key primitives we thereby achieve signiﬁcant improvements in
the prover computation and proof size. Unfortunately, the C∅C∅ frame-
work as well as our improved version (called OC∅C∅) is not compatible
with updatable SNARKs. Consequently, we propose a novel generic lift-
ing transformation called Lamassu. It is built using diﬀerent underlying
ideas compared to C∅C∅ (and OC∅C∅). In contrast to C∅C∅ it only re-
quires key-homomorphic signatures (which allow to shift keys) covering
well studied schemes such as Schnorr or ECDSA. This makes Lamassu
highly interesting, as by using the novel concept of so called updatable
signatures, which we introduce in this paper, we can prove that Lama-
ssu preserves the subversion and in particular updatable properties of
the underlying zk-SNARK. This makes Lamassu the ﬁrst technique to
(cid:63) This is the full version of a paper which appears in 2020 ACM SIGSAC Conference on
Computer and Communications Security (CCS ’20), November 9–13, 2020, Virtual
Event, USA, ACM.
also generically obtain SE subversion and updatable SNARKs. As its
performance compares favorably to OC∅C∅, Lamassu is an attractive
alternative that in contrast to OC∅C∅ is only based on well established
cryptographic assumptions.
Keywords: Zero-knowledge; simulation extractability; SNARK; updat-
able SNARK; subversion SNARK
1
Introduction
Zero-knowledge (ZK) proofs were introduced by Goldwasser, Micali, and Rack-
oﬀ [GMR85] more than 3 decades ago. They represent a cryptographic proto-
col between two parties called the prover and the veriﬁer, with the goal that
the prover convinces the veriﬁer of the membership of a word x in any lan-
guage in NP without revealing any information about the witness w certifying
language membership of word x. Besides this zero-knowledge property, such a
system needs to provide soundness, i.e., it must be infeasible for the prover to
provide proofs for words outside of the language. While ZK proofs, in general,
may require many rounds of interaction, a variant highly relevant to practical
applications are non-interactive zero-knowledge (NIZK) proofs [BFM88]. They
require only a single round, i.e., the prover outputs a proof which can then
be veriﬁed by anybody. (NI)ZK plays a central role in the theory of cryptog-
raphy and meanwhile increasingly ﬁnds its way into practice.3,4,5 Important
applications are electronic voting [SK95, DGS03, Gro10b], anonymous creden-
tials [Cha86, CL01, CL03, CL04, BCC+09, CKL+16, FHS19], and group sig-
natures [Cv91, ACJT00, BBS04, DP06, BCC+16, DS18], including widely de-
ployed schemes such as direct anonymous attestation (DAA) [BCC04, CCD+17]
used in the Trusted Platform Module (TPM) or Intel’s Enhanced Privacy ID
(EPID) [BL09], as well as many other applications that require balancing privacy
and integrity (cf. [FPS+18]). They are also a core building block of veriﬁable com-
putation [GGP10, GGPR13, PHGR13, BCG+18] and in the increasingly popular
domain of privacy-respecting cryptocurrencies [BCG+14, CGL+17], smart con-
tracts [KMS+16] and self-sovereign identity systems [MGGM18]. Latter arguably
represent the most popular real-world applications of zero-knowledge nowadays,
where it sees deployments in systems such as Zcash, Ethereum, or sovrin.
A challenging issue, particularly important in the context of blockchains, is
that users need to download and verify the state of the chain. Thus, small proof
3 ZKProof (https://zkproof.org/) being the most notable industry and academic
initiative towards a common framework and standards in the ﬁeld of zero-knowledge
has been founded in 2018.
4 Zero-knowledge proofs are on the rise in Gartners’ Hype Cycle for Privacy 2019,
cf. https://www.gartner.com/en/documents/3947373/hype-cycle-for-privacy-
2019.
5 MIT technology review named zk-SNARKS as one of the “10 Breakthrough Technolo-
gies of 2018” cf. https://www.technologyreview.com/lists/technologies/2018/.
2
sizes and fast veriﬁcation are important criteria for the practical use of ZK proofs.
These desired features are provided by zero-knowledge Succinct Non-interactive
ARguments of Knowledge (zk-SNARKs)6, which are NIZK proofs in which
proofs as well as the computation of the veriﬁer are succinct and ideally represent
a small constant amount of space and computation respectively. Additionally,
they satisfy a stronger notion of soundness called knowledge soundness, which
guarantees that if an adversarial prover comes up with a proof that is accepted
by the veriﬁer, then there exists an eﬃcient extractor which given some secret in-
formation can extract the witness. A combined eﬀort of a large number of recent
research works [Gro10a, Lip12, GGPR13, PHGR13, Lip13, DFGK14, Gro16] (to
only mention a few) has made it possible to construct very eﬃcient zk-SNARKs
for both the Boolean and the Arithmetic Circuit-SAT and thus for NP. The
most eﬃcient known approach for constructing zk-SNARKs for the Arithmetic
Circuit-SAT is based on Quadratic Arithmetic Programs (QAPs) [GGPR13],
where the prover builds a set of polynomial equations that are then checked
by the veriﬁer by using a small number of pairings. The current interest in
zk-SNARKs is signiﬁcant and recently ﬁrst modular frameworks to eﬃciently
compose zk-SNARKs [CFQ19] and also ﬁrst important steps towards realiz-
ing zk-SNARKs from conjectured post-quantum secure assumptions have been
made [GMNO18, BBC+18]. We note that in this work we do not consider re-
cent NIZK proofs that allow larger proof sizes, e.g., logarithmic in the witness
size, such as Bulletproofs [BBB+18] or STARKs [BBHR19] but do not require a
trusted setup. The currently most eﬃcient zk-SNARK for Arithmetic Circuit-
SAT was proposed by Groth [Gro16], who proved it to be knowledge-sound in
the generic bilinear group model. In Groth’s zk-SNARK, a proof consists of only
3 bilinear group elements and the veriﬁer has to check a single pairing equation.
Strong security for zk-SNARKs. For practical applications of NIZKs even
stronger security notions than soundness and knowledge soundness, called sim-
ulation soundness (SS) and simulation knowledge soundness (or simply simu-
lation extractability or SE) [Sah99, Sah01]), are required. Informally, these no-
tions require soundness and knowledge soundness respectively to hold even if
an adversary is allowed to see an arbitrary number of simulated proofs (which
she can obtain adaptively on words of her choice). Firstly, these properties
are important if NIZKs are used within larger cryptographic protocols and
in particular if they are modeled and analyzed in the universal composabil-
ity (UC) framework [Can01], as frequently used in blockchain-related protocols
(e.g., [JKS16, CDD17, KKKZ19, FMMO19] to name a few). Secondly, NIZKs not
satisfying this strong security may face severe threats when used in applications.
Therefore, let us informally recall what this property does. It guarantees that
proofs are non-malleable in a way that one can neither obtain another valid proof
for the same word nor a new proof for a potentially related word from a given
proof. Now, let us assume the typical blockchain setting where proofs are incor-
6 We note that we might drop the zk and simply write SNARK occasionally, though
we are always talking about zk-SNARKs.
3
porated into the state of the blockchain via transactions (e.g., as in Zcash). This
means that anyone could take a proof π and obtain from it another new proof
π(cid:48) for the same word and could advertise it as its own proof (as π(cid:48) (cid:54)= π). This
is what is often called man-in-the-middle attacks in the context of NIZKs and
SNARKs (cf. [GM17]). Even worse, it might be possible to obtain from a proof
π another proof π(cid:48) for another word x(cid:48) (cid:54)= x (in the same language). For example,
if π proves that 100$ are transferred from A to B with transaction ID = id, π(cid:48)
might transfer 1000$ from A to B with new ID = id(cid:48), which can be a devastat-
ing attack in systems deployed in the real-world. In fact, malleability of ECDSA
signatures already enabled an attack on Bitcoin that is suspected to have caused
a loss of over $ 30 million.7 Therefore, to avoid such attacks in zk-SNARKs
based cryptocurrencies, non-malleability of the proofs is of utmost importance
and all these problems are mitigated by the use of simulation-extractable (SE)
zk-SNARKs.
Simulation soundness and simulation extractability can be added generically
to any NIZK. Compilers for the former are usually inspired by [Sah01, Gro06]
and basically use the idea of extending the language to an OR language where the
trapdoor for the OR part can be used to simulate proofs. Extractability can be
obtained by additionally encrypting the witness under a public key in the com-
mon reference string (CRS) and to additionally prove correct encryption [DP92].
The most prominent compiler that exactly follows the ideas outlined before is
the C∅C∅ framework [KZM+15] (e.g., used in [AB19, Bag19] and most promi-
nently in the celebrated Hawk paper [KMS+16]). In addition to generic com-
pilers, Groth and Maller in [GM17] initiated the study of ad-hoc constructions
of SE zk-SNARKs. This work continued in [BG18] by extending Groth’s zk-
SNARK [Gro16] in a non black-box way to obtain SE. There is also other recent
work in this direction proposing other ad-hoc zk-SNARKs with these properties
(cf. [Lip19]). Beyond the C∅C∅ framework, which, given the progress in the ﬁeld
of SNARKs (such as universal CRS) and SNARK-friendly primitives, is already
quite outdated, there is no work towards lifting zk-SNARKs to SE zk-SNARKs
generically.
Trust in CRS generation. Another important aspect for practical applica-
tions of zk-SNARKs is the question of the generation of the required common
reference string (CRS) [BFM88], a structured random string available to the
prover and the veriﬁer. While the CRS model is widely accepted, one has to be
very careful to ensure that the CRS has been created honestly, meaning that
no one knows the associated trapdoor which allows to break zero-knowledge or
soundness. In theory, it is simply assumed that some trusted party will perform
the CRS generation, but such a party is hard to ﬁnd in the real-world. After the
Snowden revelations, there has been a recent surge of interest in constructing
cryptographic primitives and protocols secure against active subversion and the
CRS generation is exactly one of those processes where subversion can happen.
7 https://www.coindesk.com/study-finds-mt-gox-lost-386-bitcoins-due-
transaction-malleability
4
In [BFS16], Bellare, Fuchsbauer, and Scafuro tackled this problem for NIZK
proofs by studying how much security one can still achieve when the CRS gen-
erator cannot be trusted. They proved several negative and positive results. In
particular, they showed that it is impossible to achieve subversion soundness
and (even non-subversion) zero knowledge simultaneously. However, subversion
zero-knowledge can be achieved. Later, this notion has also be considered for
SNARKs [ABLZ17, Fuc18, ALSZ20] and used within practical applications in
cryptocurrencies [CGGN17, Fuc19]. For deployed systems such as Zcash and
Ethereum, instead of building them on top of subversion-resistant zk-SNARKs,
they followed an alternative route to reduce the trust put in the CRS genera-
tion. For instance, the CRS for Pinocchio zk-SNARKs [PHGR13] was generated
in a large “ceremony” [BGG19] by applying a generic method implementing the
generation within a secure multi-party computation (MPC) protocol [BCG+15].
Coincidentally, they end up with a subversion-resistant zk-SNARK with a poly-
nomial error even in the case where all parties are corrupted, and subversion
soundness as long as at least one party is honest. While this is a signiﬁcant
achievement, MPC protocols for such tasks are complicated and expensive pro-
cedures in practice and require much eﬀort besides the technical realization.
Thus, more practical solutions are desirable.
Quite recently, to overcome this problem Groth et al. [GKM+18] proposed the
notion of a so-called updatable CRS, where everyone can update a CRS and there
is a way to check the correctness of an update. Here, zero-knowledge holds in the
face of a malicious CRS generator and the veriﬁer can trust the CRS (soundness
holds) as long as one operation, either the creation of the CRS or one update, has
been performed honestly. So the veriﬁer could perform this update operation on
its own and then send the CRS to the prover. This updatable setting thus seems
much more practical than using MPC protocols, it is more promising than the
subversion setting (as it overcomes the impossibility of subversion soundness),
and has increasingly found interest recently (cf. [MBKM19, GR19, CHM+20]).
1.1 Our Contributions
Below we summarize the contributions of our work.
Revisiting C∅C∅. We revisit the C∅C∅ lifting technique [KZM+15] to gener-
ically obtain SE-SNARKs from SNARKs, which is prominently used within
Hawk [KMS+16]. First, we discuss the concrete instantiation in [KZM+15] and
point to eﬃciency problems and problems regarding provable security of this in-
stantiation. Then, we extensively investigate alternative provably secure instan-
tiations of their techniques by exploring the design space of many recently pro-
posed SNARK- and STARK-friendly symmetric primitives including the most
recent proposals Poseidon [GKK+19] as well as Vision and Rescue [AABS+19].
As these primitives are, however, all very recent and their cryptanalysis either
still needs to start or has only recently started [ACG+19, LP19, Bon19, BBUV20,
BSGL20], conﬁdence in their proposed security is far from certain. Neverthe-
less, we provide concrete recommendations for the selection of primitives and
5
provide lower bounds for their eﬃciency based on the currently available pa-
rameters. Additionally, we also propose a more conservative instantiation based
on LowMC [ARS+15], which is the oldest of these proposals and has already
received independent cryptanalysis [DEM16, BDD+15, DLMW15, RST18]. In
comparison to the original C∅C∅ framework, with our revisited C∅C∅ framework
(dubbed OC∅C∅) we obtain an improvement by a factor 10.4x in the number of
rank-1 constraints with a conservative choice of symmetric primitives, whereas
the most aggressive choice yields an improvement by up to a factor 55.4x.
A new framework. As the symmetric primitives underlying the eﬃciency gain
of OC∅C∅ are very recent and the conﬁdence in them might not yet be strong
enough, we propose an alternative framework for lifting SNARKs to SE-SNARKs
that is based on completely diﬀerent cryptographic primitives. In particular, it
is based on the ideas of Derler and Slamanig [DS19] using the notion of key-
homomorphic signatures and thus only requires signature schemes. Our compiler,
which we dub Lamassu, allows instantiations based on well studied and widely
used signature schemes such as ECDSA or EC-Schnorr (or simply Schnorr for
short). Also for Lamassu we provide concrete choices for the primitives and an
extensive comparison with ad-hoc constructions. We show that Lamassu yields
eﬃcient instantiations that compared to OC∅C∅ only needs 200 rank-1 con-
straints more than the most aggressive choice using the most eﬃcient SNARK-
friendly primitive Poseidon in this setting. For all other choices of SNARK-
friendly symmetric-key primitives, Lamassu beats them in the number of con-
straints and outperforms OC∅C∅ by a factor of up to 4.2x. Considering that
Schnorr and ECDSA signatures are well established primitives, and that the
conﬁdence in their security is far bigger than all the recent SNARK/STARK-
friendly primitives, this additional conﬁdence comes at only a very small cost
and makes Lamassu an attractive alternative to (O)C∅C∅.
Subversion and updatable CRS. C∅C∅ as well as OC∅C∅ do not support lift-
ing of subversion or updatable CRS zk-SNARKs to SE subversion or updatable
SNARKs. While for the case of subversion zero-knowledge, Baghery in indepen-
dent work [Bag19] shows that using a part of the C∅C∅ framework (without the
encryption of the witness) it is possible to preserve the subversion zero-knowledge
property, the case of zk-SNARKS with updatable CRS is more problematic. In
particular, the C∅C∅ and OC∅C∅ frameworks cannot be easily made updatable
due to the missing algebraic structure in the used primitives, i.e., (hash) com-
mitments.8 Fortunately, Lamassu does not suﬀer from this problem and we
can show that when basing Lamassu on the notion of updatable signatures,
an extension of key-homomorphic signatures introduced in this paper, instead
of key-homomorphic signatures, we are able to prove that the property of up-
datability is preserved if the underlying zk-SNARK possesses this property, i.e.,
is updatable. Updatable signatures can be constructed from widely used signa-
8 Even using the C∅C∅ framework with commitments having enough algebraic struc-
ture, i.e., exponential ElGamal or Pedersen commitments, does not seem to yield
updatability. And even if it would work, it would be less eﬃcient than Lamassu.
6
tures such as Schnorr signatures when instantiated in bilinear groups. Moreover,
we also prove that Lamassu preserves subversion of the underlying SNARK.
Consequently, when starting from an subversion/updatable zk-SNARK, Lama-
ssu yields SE subversion/updatable SNARKs. This makes Lamassu the ﬁrst
framework that allows to generically lift updatable zk-SNARKs to SE updat-
able SNARKs, a notion for which we introduce a natural deﬁnition in this work,
using well established cryptographic primitives. Actually, it yields the ﬁrst known
SE updatable SNARK.
2 Preliminaries
Let PPT denote probabilistic polynomial-time. Let λ ∈ N be the security pa-
rameter. All adversaries will be stateful. By y ← A(x; ω) we denote the fact
that A, given an input x and random coins ω, outputs y. By x ←$D we denote
that x is sampled according to distribution D or uniformly randomly if D is a
set. Let RND(A) denote the random tape of A, and let ω ←$ RND(A) denote
the random choice of the random coins ω from RND(A). We denote by negl(λ)
an arbitrary negligible function. We write a ≈λ b if |a − b| ≤ negl(λ). A bilin-
ear group generator Pgen(1λ) returns BG = (p, G1, G2, GT , e), where G1, G2,
and GT are three cyclic groups of prime order p, and e : G1 × G2 → GT is a
non-degenerate eﬃciently computable bilinear map (pairing).
2.1 X-SNARK
In the following we provide a formal deﬁnition of SNARKs (cf. Appendix A.2
for the basic deﬁnition of NIZK proofs).
Deﬁnition 1 (SNARK). A non-interactive system Π is a succinct non-in-
teractive argument of knowledge (SNARK) for relation generator RGen if it is
complete and knowledge sound, and moreover succinct, meaning that for all λ, all
(R, auxR) ∈ image(RGen(1λ)), all crs ← KGen(R, auxR), all (x, w) ∈ R and all
proofs π ← P(R, auxR, crs, x, w) we have |π| = poly(λ) and V(R, auxR, crs, x, π)
runs in time polynomial in λ + |x|. Π is a zk-SNARK if it additionally satisﬁes
zero-knowledge and an SE (zk-)SNARK if instead of knowledge soundness it
provides strong simulation extractability.
We adopt the (SE) X-SNARK deﬁnitions from [ABLZ17, Fuc18, GKM+18]
where X ∈ {trusted, subverted, updatable}. In other words, besides considering
the standard setting with a trusted CRS generation, we also capture the sub-
version and updatable CRS setting. Trusted means generated by a trusted third
party, or even a more general MPC protocol, subverted means that the setup
generator gets the CRS from the adversary and uses it after checking that it
is well formed, and, updatable means that an adversary can adaptively gener-
ate sequences of CRSs and arbitrarily interleave its own malicious updates into
them. The only constraints on the ﬁnal CRS are that it is well formed and that
7
at least one honest participant has contributed to it by providing an update (or
the initial creation).
a trapdoor tc, and a proof ζ.9
A X-SNARK Π = (KGen, Ucrs, Vcrs, P, V) for RGen consists of the following
PPT algorithms (it contains Vcrs when X = subverted and contains Ucrs and
Vcrs when X = update):
KGencrs(R, auxR) : On input (R, auxR) ∈ image(RGen(1λ)), outputs CRS crs,
Ucrs(R, crs, ζ) : On input (R, crs, ζ) outputs (crsup, ζup) where crsup is the
updated CRS and ζup is a proof for the correctness of the updating procedure.
Vcrs(R, auxR, crs, ζ) : On input (R, auxR, crs, ζ), returns either 0 (the CRS is
P(R, auxR, crs, x, w) : On input (R, auxR, crs, x, w), where (x, w) ∈ R, output a
V(R, auxR, crs, x, π) : On input (R, auxR, crs, x, π), returns either 0 (reject) or
Sim(R, auxR, crs, tc, x) : On input (R, auxR, crs, tc, x), outputs a simulated
ill-formed) or 1 (the CRS is well-formed).
proof π.
1 (accept).
proof π.
We may omit 1λ, R and auxR as inputs in the following and assume that they
are implicitly available.
Deﬁnition 2. Let Π = (KGencrs, Ucrs, Vcrs, P, V) be a non-interactive argument
for the relation R. Then the argument Π is X-secure for X ∈ {trusted, subverted,
updatable}, if it satisﬁes the following properties:
X-Completeness. Π is complete for RGen, if for all λ, (x, w) ∈ R, and PPT
algorithms A,
(R, auxR) ← RGen(1λ), (crs, tc, ζ) ← A(R, auxR),
 = 1.
1 ← Vcrs(R, auxR, crs, ζ) :
V(R, auxR, crs, x, P(R, auxR, crs, x, w)) = 1
Pr
Where ζ is a proof for the correctness of the generation (or updating) of the
CRS. If X = trusted then A is KGencrs and ζ = ⊥ and A is adversary A
otherwise.
simulation extractable for RGen, if for every PPT A, there exists a PPT ex-
tractor ExtA,
X-Strong simulation extractability. For X ∈ {trusted, subverted}, Π is strong
Pr
(R, auxR) ← RGen(1λ),
(crs, tc, ζ) ← KGencrs(R, auxR), ωA ←$ RND(A),
(x, π) ← AO(·)(R, auxR, crs; ωA),
w ← ExtA(R, auxR, crs; ωA) :
(x, π) (cid:54)∈ Q ∧ (x, w) (cid:54)∈ R ∧
V(R, auxR, crs, x, π) = 1
 ≈λ 0.
9 If X = trusted, then ζ = ⊥ and we may omit it.
8
Here, O(x) returns π := Sim(R, auxR, crs, tc, x) and keeps track of all queries
and the result, (x, π), via Q. For X = updatable, Π is strong simulation ex-
tractable for RGen, if for every PPT A and any subverter Z, there exists a
PPT extractor ExtA,