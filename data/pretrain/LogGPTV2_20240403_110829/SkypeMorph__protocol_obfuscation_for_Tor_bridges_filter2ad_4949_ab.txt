for other services or protocols for which the censoring au-
thority is able to obtain the speciﬁcation. Examples include
protocols in the public domain, e.g., HTTP, and services
whose provider can be forced or willing to reveal their im-
plementation details.
However, we assume that the censoring authority is not
willing to block the Internet entirely, nor a large fraction
of the Internet traﬃc. The censoring authority is also un-
willing to completely block popular services, such as VoIP
protocols. Thus, the ﬁltering is based on a “black list” of
restricted domains and IP addresses, accompanied by a list
of behavioural heuristics that may suggest a user’s attempt
99to circumvent censorship; for example, a TCP SYN packet
following a UDP packet to the same host may indicate a
special type of proxy using port knocking [26]. Bissias et
al. showed how such heuristics can be employed to detect
certain traﬃc patterns in an encrypted channel [12].
The assumption that censorship is done based on “black
lists” is a realistic one since usually the cost of over-blocking
is not negligible. If the censor used a small “white list” of
allowed content and hosts, then every new website or host
on the Internet would need to sign up with the censor in
order to be accessible by nodes within its control. This is a
quite cumbersome task and seems unreasonable.
Also, we assume that encrypted communications, includ-
ing Skype calls, are not blocked unless the censor has evi-
dence that the user is trying to evade the censorship. Al-
though there have been instances where Skype or other VoIP
services were either banned or have gone inaccessible in some
countries [8], to the best of our knowledge these instances
are very rare and in most cases either the Skype website is
ﬁltered or users are threatened with legal actions [7]. For
instance, China has a diﬀerent approach toward Skype and
has partnered with it to be able to ﬁlter unwanted messages
through a modiﬁed version of Skype, called TOM-Skype3;
we strongly discourage SkypeMorph users from using this
version with our software for anonymity purposes, however.
Although some regimes may choose to block Skype, or more
subtly, bandwidth-limit Skype so heavily that Skype video
is unusable, but Skype audio persists, the diversity of meth-
ods of censoring Internet content suggests that our approach
will remain pertinent.
We further assume that the censor does not have access
to information about particular bridges, including their IP
addresses and Skype IDs; otherwise it can readily block the
bridge based on this information. (We will discuss in Section
8 how a bridge using SkypeMorph can easily change its IP
address if it is detected by the censor.) SkypeMorph users,
however, can obtain this information from out-of-band chan-
nels, including email, word-of-mouth, or social networking
websites. We also note that it is possible to have multiple
Skype calls use a single IP address but with diﬀerent ports,
to allow users behind NAT to make simultaneous calls using
a shared IP address.
In our model, we are trying to facilitate connections to
bridges outside the jurisdiction of the censor where it has
no control over the network nodes. However, the censor
can set up its own SkypeMorph bridges and distribute their
information.
In general, SkypeMorph aims to build a layer of protocol
obfuscation for Tor bridges,4 with the following goals:
• Hard to identify: SkypeMorph outputs encrypted
traﬃc that resembles Skype video calls. The details of
how we try to minimize the chances of being detected
by the censor are discussed in Section 4.
• Hard to block: Since the outputs of SkypeMorph
greatly resemble Skype video calls, in order to block
SkypeMorph, the censor would need to block Skype
calls altogether, which we assume it is unwilling to do.
3http://skype.tom.com
4Note that our technique can be applied to Tor’s public ORs,
but since blocking public ORs based on their IP address is
a trivial task, we choose to present it for bridges.
• Plausible deniability: The only way to prove that
a node is actually using SkypeMorph software is to
break into a user’s machine or to coerce him to divulge
his information. Otherwise, communicating through
SkypeMorph should look like a normal Skype video
chat.
Finally, we note that our work aims at defeating ﬁrewall
and DPI tools which look for Tor ﬂows. However, there are
other approaches for enumerating bridges that are outside
the scope of this paper. [17]
4. BACKGROUND
4.1 Skype
Skype [4] is a proprietary “voice over IP” (VoIP) service
that provides voice and video communications, ﬁle transfer,
and chat services. With millions of users and billions of min-
utes of voice and video conversations, Skype is undoubtedly
one of the most popular VoIP services available [3].
Protection mechanisms and code obfuscation techniques
used in the Skype software have made it diﬃcult to learn
about its internals, so there is no open-source variant of the
Skype application. However, there have been attempts to re-
verse engineer and analyze the application [10, 11]. The ﬁnd-
ings from these attempts and our own experiments, along-
side some insights from the Skype developers have estab-
lished the following facts:
• Skype encrypts messages using the AES cipher and
uses RSA-based certiﬁcates for authentication [2, 11].
Also our experiments showed that Skype utilizes some
form of message authentication and would not accept
altered messages. Thus an eavesdropper is neither able
to access the content of a packet nor can he alter them
in such a way that is not detectable. All that is possi-
ble to such an attacker is selective packet dropping or
denial of service.
• There are three types of nodes in the Skype network:
server nodes, which handle users’ authentication when
they sign in, normal nodes, which can be seen as peers
in the P2P network, and supernodes, which are those
peers with higher bandwidth; supernodes can facili-
tate indirect communication of peers behind ﬁrewalls
or NAT [11, 13, 41].
• Skype calls are operated in a peer-to-peer architecture
and users connect directly to each other during a call,
unless some of the participants cannot establish direct
connections. This is where supernodes come into the
picture to facilitate the call.
• In our experiments with Skype we noticed that when a
Skype call takes place there are some TCP connections
which are mainly used for signalling. These TCP con-
nections remained open even after the call is dropped.
The Skype client listens to a customizable UDP port
for incoming data, but when UDP communication is
not possible, it falls back to TCP [10, 11].
• Skype has a variety of voice and video codecs and se-
lects among them according to bandwidth, network
speed and several other factors [13, 14].
100The facts that Skype traﬃc is encrypted and very popular
makes it a good candidate for the underlying target traﬃc
for our purpose. We will explore this more in Section 5.
The choice of Skype video, as opposed to voice, calls as the
target protocol in SkypeMorph is motivated by the fact that
in voice calls, usually at any time only one party is speaking
and thus we would need to consider this “half-duplex” eﬀect
in our output stream. However, this is not the case in video
calls since both parties send almost the same amount of
data at any given time during a video conversation, making
the implementation of SkypeMorph easier, and not requiring
the client or bridge to withhold data until it is its turn to
“speak”.
4.1.1 Bandwidth Control
Network congestion control and bandwidth throttling is
a major concern in online applications. In order to be able
to accommodate for changes in the network status, a traﬃc
control mechanism is essential and Skype uses a congestion
detection mechanism to back oﬀ whenever it is no longer pos-
sible to communicate at the current rate. Skype voice calls
were shown to have a few number of possible bitrates [14],
however, as shown in Figure 2, Skype video calls seem to
enjoy much more ﬂexibility in terms of bandwidth usage.5
Figure 2a suggests that by limiting the available bandwidth,
Skype’s bandwidth usage drops signiﬁcantly at each step to
a level far below the available rate (this phenomena is more
noticeable in higher rates) and then it builds up again to
achieve the maximum rate possible. Also Skype is able to
detect whether it is possible to send at a higher rate, as
depicted in Figure 2b. Therefore, by a similar rate lim-
iting technique, SkypeMorph is able to transfer data at a
reasonable rate which at the same time complies with the
bandwidth speciﬁed by the bridge operator.
4.2 Naïve Trafﬁc Shaping
To achieve a similar statistical distribution of packet sizes
in the output of our system to that of target process, a
basic approach would be to simply draw samples from the
packet size distribution of the target process and send the
resulting size on the wire. Thus, if there is not enough data
available from Tor, we have to send packets without useful
information and this imposes some additional overhead on
the network. An alternate approach is to consider the in-
coming packet sizes from the source distribution, which is
how Traﬃc Morphing deals with the problem.
4.3 Trafﬁc Morphing
We brieﬂy mention how the original Traﬃc Morphing [47]
method works. Traﬃc Morphing attempts to counter an ad-
versary who is trying to distinguish traﬃc from the source
process from that of the target process through statistical
means. As previously discussed, the only statistical traces
that the attacker might be able to collect from encrypted
traﬃc are packet sizes and timing attributes. Traﬃc Mor-
phing aims at obfuscating the packet size distribution by
assuming that probability distributions of the source and
destination processes are available.
Assume that the probability distribution of the source
process is denoted by the vector X = [x1, . . . , xn]T , where
5The degree of ﬂexibility in bandwidth usage of Skype video
calls is due to availability of diﬀerent frame rates and video
codecs.
(a) Decreasing bandwidth available to Skype
(b) Increasing bandwidth available to Skype
Figure 2: Bandwidth usage by Skype under diﬀerent net-
work situations. Figure 2a shows the drops in the Skype
transfer rate while decreasing the network bandwidth and
Figure 2b shows the increase in the rate.
xi is the probability of the ith packet size. Similarly Y =
[y1, . . . , yn]T denotes the target process packet size distribu-
tion. Traﬃc Morphing ﬁnds matrix A for which we have
Y = AX such that the number of additional bytes needed
to be transmitted is minimal. Using this technique requires
some considerations, for example dealing with larger sample
spaces or overspeciﬁed constraints, which are discussed in
the original paper.
Even though the underlying premise of Traﬃc Morphing
is that if the source process generates a suﬃciently large
number of packets, the output of the morphing will converge
in distribution to that of the target, it only considers packet
sizes in the encrypted traﬃc. We extend this technique,
below, by introducing inter-packet timing to it as well.
4.4 Higher-Order Statistics
Although reproducing Skype packet size and inter-packet
delay distributions is a step towards defeating censoring ﬁre-
walls, DPI tools can take advantage of higher-order statistics
in our encrypted channel to distinguish it from a Skype video
call. We observed that there are second and third order
statistics in the Skype traces; see the extended version of this
paper [33] for more details. We ensure that SkypeMorph
respects those higher-order statistics in the packets and tim-
ings it outputs. An alternative for preserving all the char-
acteristics of the Skype video call is to use the output of the
audio and video encoder shipped with the Skype software
to generate the statistics. If a live video source is available,
05001000150020002500300035004000024681012141618x 104Time (Seconds)Bandwidth (Bytes/Second)  Bandwidth LimitSkype Bandwidth Usage05001000150020002500300035004000024681012141618x 104Time (Seconds)Bandwidth (Bytes/Second)  Bandwidth LimitSkype Bandwidth Usage101we can run the encoder on it while the Tor bridge connec-
tion is in progress, and use the resulting packet sizes and
inter-packet delays output by the encoder directly (replac-
ing the encrypted packet contents with our own encrypted
Tor data, of course). In this way, we can ensure that our
traﬃc accurately mimics that of a real Skype video call.
5. SKYPEMORPH ARCHITECTURE
Skype, like any other instant messaging or voice and video
calling/conferencing application, performs an authentication
step before it allows a user to join the network. A user needs
to sign up with the Skype website and obtain a username
and password for authentication. The user then inputs these
credentials to the Skype software to use them in the authen-
tication process. After the user authenticates himself to the
network, he is able to make calls or send messages. Due to
the proprietary nature of the Skype protocol, it is unclear
how the login process is initiated and proceeds. The same
is true for the call setup phase. To look like Skype as much
as possible, SkypeMorph uses the actual Skype application
to perform these actions.
In order to be able to use Skype network, we used Skype
APIs which enable programmers to log in to the Skype net-
work and have almost the same functionality as the Skype
application, including making voice and video calls and send-
ing ﬁles and text messages. Skype APIs come in two ﬂavours,
namely the SkypeKit [5] API that has a separate runtime
executable (which must be purchased from Skype) and can
operate as a command line application, and the Skype Pub-
lic API, which can speak to any running instance of the usual
Skype application through message passing systems such as
DBus. These APIs allow us to perform the login and call
initiation processes. The basic setup is discussed next and
details of our implementation will appear in Section 6.
5.1 Setup
• Step 1: The bridge, which we denote by S, selects a
UDP port number, PS and uses the Skype APIs to log
in to the Skype network, with a predeﬁned set of cre-
dentials.6 After successfully logging in to Skype, the
bridge will listen for incoming calls. The bridge makes
its Skype ID available to clients in much the same way
that bridges today make their IP addresses and port
numbers available — using Tor’s BridgeDB [6] service,
for example.
• Step 2: The client, denoted by C, picks a UDP port
number, PC and uses the same method to log in to the
Skype network, using its own credentials.
• Step 3: The client generates a public key P KC . After
that, it checks to see whether the bridge is online and
sends a Skype text message of the form P KC : IPC :
PC , to the bridge, where IPC is the IP address of the
client.
6Skype allows multiple logins, so it might seem reasonable
to share the same username and password for every bridge.
However, in that case all the messages sent to a certain
Skype ID will be received by all the bridges currently logged
in with that ID, which is an undesirable setting. We there-
fore require that every bridge has its own exclusive creden-
tials, which are made available to the SkypeMorph bridge
software on startup.
Figure 3: Overview of the SkypeMorph Architecture. The
histograms show the distribution of packet sizes in Tor (at
the bottom) and Skype video (at the top).
• Step 4: Upon receiving the message from the client,
the bridge generates a public key P KS and sends the
following text message P KS : IPS : PS back to the
client.
• Step 5: The bridge and client each compute a shared
secret using the public keys they obtained and the
client sends a hash of resulting key to the bridge.
• Step 6: The bridge then checks the received hash and
if it matches the hash of its own secret key, it sends a
message containing “OKAY”.
• Step 7: If step 6 is successful and the client receives
OKAY, it initiates a Skype video call to the bridge. Oth-
erwise, it falls back to step 3 after a timeout.
• Step 8: The client keeps ringing for some random
amount of time, then drops the call.
• Step 9: When the bridge notices the call is dropped
it listens for incoming SkypeMorph messages on port
PS. The bridge selects another UDP port for the Skype
runtime for it to listen for other incoming connections.
• Step 10: Afterwards, the client uses the shared key
and the UDP port obtained in previous steps to send
data.
Note that having the bridge switch to a diﬀerent UDP port
for the next client connection should not arouse suspicion
since, as discussed in Section 3, this is how normal Skype
calls to multiple users behind NAT would appear to the
censor.
5.2 Trafﬁc Shaping
Tor sends all of its traﬃc over TLS. We do not change this;
rather, we just treat the TLS data as opaque, and send the
TLS data over our own encrypted channel, masquerading it
as Skype video. This means that the data is encrypted by
Tor (multiple times), by TLS, and also by SkypeMorph.