2) are present in the messages
1, C(cid:48)
2,
2, PK u,
that the same ciphertexts ( ˜C(cid:48)
from the two servers. Verify that verPS 1 ((sid , qid(cid:48), C(cid:48)
1, ˜C(cid:48)
PK u, ˜C(cid:48)
2), τ(cid:48)
2), τ(cid:48)
˜C(cid:48)
1, ˜C(cid:48)
2).
1) and that verPS 2 ((sid , qid(cid:48), C(cid:48)
1, ˜C(cid:48)
1, C(cid:48)
(c) Compute and output key: Compute the two key shares K1 ←
2), reconstruct the key as
decSK u ( ˜C(cid:48)
K ← K1 · K2, and output (Rtr, sid , qid(cid:48), K , succ).
1) and K2 ← decSK u ( ˜C(cid:48)
4. CONCRETE INSTANTIATION
In this section we give constructions of the encryption schemes
and zero-knowledge protocols with which our 2PASS protocol can
be instantiated. They are secure under the decisional Difﬁe-Hell-
man (DDH) assumption; the proofs require the random-oracle mo-
del. For the signature scheme and the CCA2-secure encryption we
propose that the Schnorr [35, 33] and Cramer-Shoup [16] schemes
be used since the DDH assumption also sufﬁces for their security.
We also provide an efﬁciency analysis.
4.1 ElGamal Encryption
The ElGamal encryption scheme [18] assumes a generator g of
a group G = (cid:104)g(cid:105) of prime order q. The secret key x is chosen at
random from Zq. The public key is y = gx. To encrypt a message
m ∈ G, select a random r and compute c1 ← yrm and c2 ←
gr. Output as ciphertext is the tuple (c1, c2). To decrypt (c1, c2),
compute m ← c1/cx
2.
It is well known that the ElGamal encryption scheme is CPA
i.e., E = E1 × E2 is deﬁned as
secure and is homomorphic:
(e1, e2) = (e11, e12) × (e21, e22) := (e11e21, e12e22) and also
we deﬁne Ez = (e1, e2)z = (ez
4.2 Zero-Knowledge Proofs and Σ-Protocols
Using the ElGamal encryption scheme will allow us to instanti-
ate the proof protocols in our scheme by well known and efﬁcient
Σ-protocols for statements about discrete logarithms in the group
G. When referring to the proofs above, use the following nota-
tion [11, 8]. For instance, PK{(a, b, c) : y = gahb ∧ ˜y = gahc}
1, ez
2).
denotes a “zero-knowledge Proof of Knowledge of integers a, b, c
such that y = gahb and ˜y = gahcholds,” where y, g, h, and ˜y are
elements of G. The convention is that the letters in the parenthe-
sis (a, b, c) denote quantities of which knowledge is being proven,
while all other values are known to the veriﬁer.
Given a protocol in this notation, it is straightforward to derive an
actual protocol implementing the proof. Indeed, the computational
complexities of the proof protocol can be easily derived from this
notation: basically for each term y = gahb, the prover and the
veriﬁer have to perform an equivalent computation, and to transmit
one group element and one response value for each exponent. We
refer to, e.g., Camenisch, Kiayias, and Yung [8] for details on this.
The most efﬁcient way to make these protocol concurrent zero-
knowledge and simulation-sound is by the Fiat-Shamir transfor-
mation [19]. In this case, we will have to resort to the random-
oracle model [4] for the security proof. To make the resulting non-
interactive proofs simulation-sound, it sufﬁces to let the prover in-
clude context information as an argument to the random oracle in
the Fiat-Shamir transformation, such as the sid, the qid, the pro-
tocol step in which the statement is being proven, and a collision-
resistant hash of the communication transcript that the prover and
veriﬁer have engaged in so far, so that the proof is resistant to a
man-in-the-middle attack.
We note, however, that there are alternative methods one could
employ instead to make Σ-protocols non-interactive that do not rely
on the random oracle model (e.g., [31, 21, 9]). Unfortunately, these
methods come with some performance penalty. In our protocol that
would impact only the servers, not the user, so should still be very
acceptable in practice.
4.3 Concrete ZK Protocols in Our Scheme
As said in the description of our scheme, we assume that the
description of a group G of prime order q and a generator g chosen
through GGen(1k) is publicly available, together with a public key
PK of the cryptosystem (keyg, enc, dec). In the following we will
further assume that PK = (Y, g) is a public key of the ElGamal
encryption scheme.
Proof π1 in Step R2 of the Retrieve protocol. Suppose that, in Step
R2, S1 has generated (pk , sk ) as ((y = gx, g), x) ∈ ((G, G), Zq ).
Let E1 = (e11, e12) = (p1/p(cid:48)
1yr1 , gr1 ), C1 = (c11, c12) =
1 ) with r1, s1, s(cid:48)
(p1Y s1 , gs1 ), and C(cid:48)
11, c(cid:48)
12) = (p(cid:48)
elements of Zq be the encryptions computed in the setup and re-
trieve protocol. Then the proof π1 can be instantiated with the pro-
tocol speciﬁed as:
1 = (c(cid:48)
1 , gs(cid:48)
1Y s(cid:48)
1
PK{(s1, s
1, r1) : e12 = gr1 ∧ c12 = gs1 ∧ c
(cid:48)
12 = gs(cid:48)
1∧
(cid:48)
−s1} .
= yr1 Y s(cid:48)
1 Y
e11c(cid:48)
c11
11
This protocol requires both the prover and the veriﬁer to compute
four exponentiations in G (note that G can be an elliptic-curve
group).
Let us argue that the protocol indeed proves that E1 encrypts
the quotient of the messages encrypted in C1 and C(cid:48)
1. We know
that if the prover is successful, then there are values (s1, s(cid:48)
1, r1)
1, and e11c(cid:48)
such that e11 = gr1, c11 = gs1, c(cid:48)
=
yr1 Y s(cid:48)
1 Y −s1 hold (see e.g., [8]). As we are using the ElGamal
encryption scheme, the ciphertexts encrypted in E1, C1, and C(cid:48)
1
thus must be e11y−r1, c11Y −s1, and c(cid:48)
1, respectively. The
last term of the proof protocol e11c(cid:48)
1 Y −s1 can be re-
formed into e11y−r1 = (c11Y −s1 )/(c(cid:48)
1 ) which amounts to
the statement that we claimed.
11Y −s(cid:48)
= yr1 Y s(cid:48)
11Y −s(cid:48)
11 = gs(cid:48)
c11
c11
11
11
533Proof π2 in Step R3 of the Retrieve protocol. Let the encryptions
computed in the setup and retrieve protocol be E = (e1, e2) =
((e11yr2 p2/p(cid:48)
2)z, (e12gr2 )z), C2 = (c21, c22) = (p2Y s2 , gs2 ),
2 ∈ Zq.
and C(cid:48)
21, c(cid:48)
2 = (c(cid:48)
Then the proof π2 can be instantiated with the protocol speciﬁed
as:
PK{(s2, s
2 ) with z, r2, s2, s(cid:48)
22) = (p(cid:48)
2 , gs(cid:48)
2Y s(cid:48)
(cid:48)
2, r2, z, α, β, γ) : e2 = ez
22 = gs(cid:48)
(cid:48)
1 = cz
−β ∧ c
22g
−βY γ} .
12gα ∧ c22 = gs2 ∧
−γ ∧
2 ∧ 1 = c
e11c21
c(cid:48)
(cid:48)
22
)zyαY
zg
21
e1 = (
21
22
c(cid:48)
11(m/m(cid:48))zyα.
12gα = gr1z+α and e1 = ez
where by deﬁnition α = zr2 and by proof β = zs2 and γ = zs(cid:48)
2.
Let’s again show that this proof protocol is indeed a proof that E is
an encryption of a random power of the plaintext in E1 (let’s call it
˜m) times the quotient of the plaintexts in C(cid:48)
2 and C2 (let’s call them
m(cid:48) and m, respectively). Again, from the properties of the proof
protocol we know that there exist values s2, s(cid:48)
2, r2, z, α, β, γ so that
the terms in the protocol speciﬁcation hold. Now from c22 = gs2,
22 = gs(cid:48)
2 and 1 = c(cid:48)
zg−γ we can conclude that
22g−β c(cid:48)
1 = cz
β = zs2 and γ = zs(cid:48)
2 holds. Further, the ciphertexts encrypted
21Y −s(cid:48)
in C2, and C(cid:48)
2 thus must be m := c21Y −s2, and m(cid:48) := c(cid:48)
2,
)zyαY −βY γ we
respectively. From the proof term e1 = ( e11c21
can derive that e1 = ez
Also, let r1 be the value such that e12 := gr1 and let ˜m :=
e11y−r1. Thus, e2 = ez
11(m/m(cid:48))zyα
= ˜mzy−r1z(m/m(cid:48))zyα. We can write e1 = ( ˜mm/m(cid:48))zy−r1z+α
which means that E is indeed an encryption of ( ˜mm/m(cid:48))z as we
claimed.
Proof π3 in Step R4 of the Retrieve protocol. The proof π3 show-
ing that the encryption E = (e1, e2) decrypts to 1 (w.r.t. the pub-
lic/secret key pair (pk , sk ) = ((y = gx, g), x) that S1 has gener-
ated in Step R2 of the retrieve protocol) can be implemented with
the following protocol speciﬁcation: PK{(x) : y = gx ∧ e1 =
2} . It is not very hard to see that this protocol indeed shows that
ex
E encrypts to 1.
Proofs π4 and π5 in Steps R4 and R5. The proofs in these two
steps are essentially the same (just the indices are different), so we
describe only the ﬁrst one. Let the encryptions computed in the
setup and retrieve protocol be ˜C1 = (˜c11, ˜c12) = (K1Y ˜s1 , g ˜s1 ),
1 , g ˜s(cid:48)
and ˜C(cid:48)
1 ). Then the proof π4 can be
realized with the protocol speciﬁed as
12) = (K1Y ˜s(cid:48)
1 = (˜c(cid:48)
11, ˜c(cid:48)
12 = g ˜s(cid:48)
1) : ˜c12 = g ˜s1∧˜c
PK{(˜s1, ˜s
(cid:48)
(cid:48)
1∧ ˜c(cid:48)
11
˜c11
= Y ˜s(cid:48)
1 Y
−˜s1} .
It is not hard to see that this protocol indeed proves that the two
ciphertexts encrypt the same plaintext.
4.4 Efﬁciency Analysis
Let us count the number of exponentiations in the group G when
our protocol is instantiated as suggested above and using the Fiat-
Shamir transformation [19] to obtain simulation-sound non-interac-
tive proofs in the random-oracle model. The cost of operations
other than exponentiations is insigniﬁcant in comparison. The user
has to perform 18 exponentiations in the Setup protocol and 19 ex-
ponentiations in the Retrieve protocol. Each server has to do 10
exponentiations in the Setup protocol. In the Retrieve protocol, S1
and S2 need to do 26 and 30 exponentiations, respectively. (Note
that some of the exponentiations by the servers could be optimized
as they are part of multi-base exponentiations.) Finally we note that
an elliptic-curve group can be used for G and that our protocols do
not require secure channels and hence avoid the additional cost of
setting these up.
The communication costs are as follows: the user sends to each
server 16 group elements and receives 1 group element from each
in the Setup protocol. The user sends 11 group elements to and
receives 5 group elements from each server in the Retrieve proto-
col. The servers send to each other 1 group elements in the Setup
protocol and 6 (resp. 5) group elements, 6 (resp. 9) exponents, and
3 (resp. 2) hash values in the Retrieve protocol.
Therefore, our protocol is efﬁcient enough to be useful in prac-
tice.
5. SECURITY ANALYSIS
THEOREM 1. If the encryption scheme (keyg, enc, dec) is se-
mantically secure, the encryption scheme (keyg2, enc2, dec2) is
CCA2 secure, the signature scheme (keygsig, sig, ver) is existen-
tially unforgeable, and the associated proof system is a simulation-
sound concurrent zero-knowledge proof, then our protocols Setup
and Retrieve securely realize F2PASS in the FCA and FCRS -hybrid
model.
When instantiated with the ElGamal encryption scheme [18] for
(keyg, enc, dec), Cramer-Shoup encryption [16] for (keyg2, enc2,
dec2), Schnorr signatures [35, 33] for (keygsig, sig, ver), and the
Σ protocols of Section 4 [35, 8], by the UC composition theorem
and the security of the underlying building blocks we have the fol-
lowing corollary:
COROLLARY 1. Under the decisional Difﬁe-Hellman assump-
tion for the group associated with GGen, the Setup and Retrieve