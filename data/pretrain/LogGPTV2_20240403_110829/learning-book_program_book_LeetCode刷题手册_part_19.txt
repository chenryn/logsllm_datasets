判断一个9x9的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
1.数字1-9在每一行只能出现一次。
2.数字1-9在每一列只能出现一次。
3.数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。
解题思路
·给出一个数独的棋盘，要求判断这个棋盘当前是否满足数独的要求：即行列是否都只包含1-9，每
个九宫格里面是否也只包含1-9。
·注意这题和第37题是不同的，这一题是判断当前棋盘状态是否满足数独的要求，而第37题是要
求求解数独。本题中的棋盘有些是无解的，但是棋盘状态是满足题意的。
代码
package leetcode
import "strconv"
//解法一暴力遍历，时间复杂度0（nA3）
func isvalidSudoku(board [][]byte) bool{
//判断行row
for i := 0; i  9 11 index 9 11 index target{//这里可以剪枝优化
break
C = append(c, nums[i])
findcombinationSum（nums，target-nums[i]，i，c，res）//注意这里送代的时候
index依旧不变，因为一个元素可以取多次
C = c[:1en(c)-1]
1
40.CombinationSum
题目
Given a collection of candidate numbers ( candi dates ) and a target number ( target ), find all
unique combinations in candidates where the candidate numbers sums to target
Each number in candidates may only be used once in the combination.
Note:
●All numbers (including target ) will be positive integers.
● The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[1, 7] ,
[1, 2, 5],
[2, 6],
[1, 1, 6]
Example 2:
Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[1,2,2],
[5]
题目大意
---
## Page 130
给定一个数组candidates和一个目标数target，找出candidates中所有可以使数字和为target的组
合。
candidates中的每个数字在每个组合中只能使用一次。
解题思路
·题目要求出总和为sum的所有组合，组合需要去重。这一题是第39题的加强版，第39题中元素
可以重复利用（重复元素可无限次使用），这一题中元素只能有限次数的利用，因为存在重复元素，
并且每个元素只能用一次（重复元素只能使用有限次）
·这一题和第47题类似，只不过元素可以反复使用。
代码
package leetcode
import（
"sort"
func combinationSum2(candidates []int, target int) [][]int {
if len(candidates) == 0{
return [][]int{}
C,res = []int{}, [][]int{}
sort.Ints（candidates）//这里是去重的关键逻辑
findcombinationSum2(candidates, target,0，c,&res)
return res
func findcombinationSum2(nums []int, target, index int, c []int, res *[][]int)
if target == 0 {
b := make([]int,len(c))
copy(b, c)
*res = append(*res, b)
return
F
for i:=index; iindex&&nums[i]==nums[i-1]{//这里是去重的关键逻辑，本次不取重复数字，
下次循环可能会取重复数字
continue
if target >= nums[i]{
C = append(c, nums [1])
findcombinationSum2(nums, target-nums [i] , i+1, C, res)
C = c[: 1en(c)-1]
---
## Page 131
41.FirstMissingPositive
题目
aaul aagisod guissu isaliews au puy eue agaui paosun ue uaai
Example 1:
Input: [1,2,0]
output: 3
Example 2:
Input: [3 , 4, -1,1]
output: 2
Example 3:
Input: [7 ,8, 9 ,11, 12]
Output: 1
Note:
Your algorithm should run in O(n) time and uses constant extra space.
题目大意
找到缺失的第一个正整数。
解题思路
为了减少时间复杂度，可以把input数组都装到map中，然后i循环从1开始，依次比对map中是否
存在1，只要不存在1就立即返回结果，即所求。
代码
---
## Page 132
package leetcode
func firstMissingPositive(nums []int) int {
numMap := make(map[int]int, 1en(nums))
for _, V := range nums {
A =[Λ]dewunu
for index := 1; index < len(nums)+l; index++ {
if _，ok := numMap[index];!ok {
return index
return 1en(nums) + 1
42.TrappingRainWater
题目
Given n non-negative integers representing an elevation map where the width of each bar is 1,
compute how much water it is able to trap after raining.
The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of
rain water (blue section) are being trapped. Thanks Marcos for contributing this image!
Example:
Input: [0,1,0,2,1,0,1,3,2,1,2,1]
output: 6
题目大意
从×轴开始，给出一个数组，数组里面的数字代表从（0，0）点开始，宽度为1个单位，高度为数组元素
的值。如果下雨了，问这样一个容器能装多少单位的水？
解题思路
---
## Page 133
Area= left Max- Cunen+Height =3- =Z
right (Mot =f-
leftax=2
Riqhtlax=S
Area =
leftMax-CurrentHeig
=2-0=2
每个数组里面的元素值可以想象成一个左右都有壁的圆柱筒。例如上图中左边的第二个元素1，当前左
边最大的元素是2，所以2高度的水会装到1的上面（因为想象成了左右都有筒壁）。这道题的思路就是
左指针从0开始往右扫，右指针从最右边开始往左扫。额外还需要2个变量分别记住左边最大的高度和
右边最大高度。遍历扫数组元素的过程中，如果左指针的高度比右指针的高度小，就不断的移动左指
针，否则移动右指针。循环的终止条件就是左右指针碰上以后就结束。只要数组中元素的高度比保存的
局部最大高度小，就累加res的值，否则更新局部最大高度。最终解就是res的值。
代码
package leetcode