### 3.2 内核态逆向分析 `NtSetInformationThread()` 的内部动作

在本节中，我们将基于 Windows 10 16299 版本的 `ntoskrnl.exe` 文件，对 `NtSetInformationThread()` 函数进行详细的逆向分析。该函数的实现代码较长，超过一千行。我们将通过关键代码片段来逐步解析其内部机制。

#### 函数原型
```c
NTSTATUS NtSetInformationThread(
  IN HANDLE ThreadHandle,
  IN THREADINFOCLASS ThreadInformationClass,
  IN PVOID ThreadInformation,
  IN ULONG ThreadInformationLength
);
```

#### 关键代码分析
根据传入的 `ThreadInformationClass` 参数，函数会执行不同的逻辑分支。例如，当 `ThreadInformationClass` 为 `ThreadHideFromDebugger`（值为 0x11）时，代码会跳转到 `LABEL_5` 标签处执行。

##### 代码片段 1
```c
if (ThreadInformationLength != 0) {
    return STATUS_INVALID_PARAMETER; // 错误码 0xC0000004
}

// 根据句柄获取线程对象
NTSTATUS status = ObpReferenceObjectByHandleWithTag(ThreadHandle, ...);
if (!NT_SUCCESS(status)) {
    return status;
}

// 获取线程对象
PETHREAD Thread = (PETHREAD)ObpReferenceObjectByHandleWithTag(...);

// 设置 HideFromDebugger 位
InterlockedOr(&Thread->HideFromDebugger, 1);
```

##### 代码片段 2
```c
// 返回状态
return STATUS_SUCCESS;
```

### 3.3 操作系统在异常分发时如何利用此数据

为了了解操作系统如何使用 `HideFromDebugger` 位，我们可以通过在特定线程上设置内存访问断点并进行调试来观察。这里我们将重点分析 `DbgkForwardException()` 函数。

#### 辅助知识
在 x64 架构的内核中，`gs` 寄存器保存的是 `KPCR` 的基地址。`KPCR` 是每个 CPU 核心维护的数据结构，其中包含一些重要的字段：
- `CurrentThread`：指向当前 CPU 正在执行的线程对象。
- `NextThread`：指向下一次调度时需要调度的线程对象。
- `IdleThread`：当没有线程可调度时，可被调度的线程对象，通常用于清理内存等任务。

#### 代码片段 3
```asm
mov rax, gs:[188h]        ; 获取 CurrentThread
mov ecx, [rax + 6D0h]     ; 获取 HideFromDebugger 位
test cl, 4                ; 检查 HideFromDebugger 位是否置位
jnz short loc_14044BDE0   ; 如果置位，则跳转到 loc_14044BDE0
```

如果 `HideFromDebugger` 位被置位，异常分发函数 `DbgkForwardException()` 将不会将异常发送给调试器，从而实现线程调试逃逸。

### 4. 总结

本文详细介绍了如何通过编码实现线程调试逃逸，并深入分析了其实现的技术细节。特别讲解了为什么需要使用 `try-except` 结构来处理异常情况。通过逆向工程的方法，我们揭示了操作系统如何利用 `HideFromDebugger` 位来隐藏线程异常。此外，还拓展介绍了 `gs` 寄存器在 x64 架构下的内核使用方法，涉及到了 `KPCR` 和 `KPRCB` 等关键数据结构。至此，整个技术点已全部剖析完毕。