n
o
i
t
a
t
u
p
m
o
C
f
o
o
r
P
140
120
100
80
60
40
20
0
Single-gate
Multi-gate
Multi-gate with Split
0
100
200
Input Set Cardinality
i
)
c
e
s
(
e
m
T
n
o
i
t
a
c
i
f
i
r
e
V
0.3
0.25
0.2
0.15
0.1
0.05
0
0
Single-gate
Multi-gate
Multi-gate with Split
100
200
Input Set Cardinality
Figure 8: Summary of TRUESET performance under all circuits in linear scale.
Key Generation (sec)
Proof Computation (sec)
Veriﬁcation (sec)
Evaluation Key (MB)
Veriﬁcation Key (KB)
TRUESET MS Pinocchio
13.07
32.45
0.065
12.7
49.65
43.03
174.99
0.074
72.45
48.6
NTL-ZM
Pinocchio
47.39
137.79
0.066
72.45
48.6
Table 1: Comparison between TRUESET and Pinocchio on a
circuit that computes the cardinality and the sum of the output
set in the circuit in Figure 6, at input set cardinality of 64.
exhibited for the previous single-gate and multiple-gate
circuits. Overall, we found the split gate to be costlier
than set gates since the multiplication gates introduced
by the split gate increase proportionally with the number
of the set elements it can support, whereas set gates are
“oblivious” to the number of elements.
5.6 Discussion of Results
The evaluation of TRUESET for single-gate and multiple-
gate circuits showed huge improvement for both key gen-
eration and proof computation time over Pinocchio. For
example, for the single union case with 28-element input
sets, a speed-up of 150x was obtained for the prover’s
time, while providing more than 98% saving in the eval-
uation key size. For a multiple-gate circuit comprised
of seven set gates with eight input sets, each of 26 ele-
ments, a prover speed-up of more than 50x, and key size
reduction of 97% were obtained.
As can be qualitatively inferred by our plots, these
improvements in performance allow us to accommodate
problem instances that are several times larger than what
was considered achievable by previous works. TRUESET
achieves the performance behavior that Pinocchio exhibits
for sets of a few dozen elements, for sets that scale up
to approximately 8000 elements, handling circuits with
nearly 30x larger I/O size. Figure 8 summarizes the be-
havior of TRUESET for all circuits we experimented with,
illustrating its performance for the three stages in linear
scale. In all cases, the running time increases approxi-
mately linearly in the input size. The cost increases more
abruptly when a split gate is introduced due to the added
complexity discussed above. Improving the performance
of the split gate is one possible direction for future work.
Remarks. We discuss here a few points related to the
performance of our scheme.
Performance on Arithmetic Circuits. The presented eval-
uation covered the case of set circuits only, in which
our construction outperformed arithmetic circuits veriﬁed
using Pinocchio. Our construction can support typical
arithmetic circuits as well, by assuming that the maximum
polynomial degree on each wire is 0. In this case, our con-
struction will reduce to Pinocchio’s, however due to the
bivariate polynomial operations, there will be more over-
head in accommodating arithmetic circuits. For example,
for an arithmetic circuit handling the multiplication of
two 50x50 32-bit element matrices, the prover’s time with
TRUESET increased by 10% compared to Pinocchio.
Outsourced Sets. In the above, we assumed that the client
possesses the input sets. However, it is common practice
in cloud computing, to not only delegate computations
but storage as well. In this case, the client initially out-
sources the sets to the server and then proceeds to issue
set operation queries over them. This introduces the need
for an additional mechanism to ensure the authenticity of
the set elements used by the server. The full version of
our paper [20] describes a modiﬁed protocol that handles
this case using Merkle tree proofs.
Supporting multisets. Finally, it should be noted that
the comparisons with Pinocchio above assumed proper
sets only. In a setting that accommodates multiset op-
erations (i.e., sets that allow repetition in elements), we
expect TRUESET’s performance to be much better, as it
can naturally handle multiset cases without adding any
modiﬁcations. On the other hand, Pinocchio multiset
circuits are going to become more complex due to the
added complexity of taking repetitions into account. For
example, in intersection gates, it will not be enough to
only check that two element are equal, but it will also be
necessary to make sure that the matched element was not
encountered before, introducing additional overhead.
778  23rd USENIX Security Symposium 
USENIX Association
Acknowledgments
We would like to thank David Evans and the anonymous
reviewers for their invaluable comments and feedback.
References
[1] M. Backes, D. Fiore, and R. M. Reischuk. Veriﬁable
delegation of computation on outsourced data. In
CCS, pages 863–874, 2013.
[2] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer,
and M. Virza. SNARKs for C: Verifying program
executions succinctly and in zero knowledge. In
CRYPTO (2), pages 90–108, 2013.
[3] E. Ben-Sasson, A. Chiesa, E. Tromer and M. Virza.
Succinct Non-Interactive Zero Knowledge for a
von Neumann Architecture. Cryptology ePrint
Archive, Report 2013/879, 2013.
http://
eprint.iacr.org/.
[4] J.-L. Beuchat, J. E. Gonz´alez-D´ıaz, S. Mitsunari,
E. Okamoto, F. Rodr´ıguez-Henr´ıquez, and T. Teruya.
High-speed software implementation of the optimal
ate pairing over Barreto–Naehrig curves. In Pairing,
pages 21–39. Springer, 2010.
[5] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer.
From extractable collision resistance to succinct non-
interactive arguments of knowledge, and back again.
In ITCS, pages 326–349, 2012.
[6] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer.
Recursive composition and bootstrapping for
SNARKS and proof-carrying data. In STOC, pages
111–120, 2013.
[7] N. Bitansky, A. Chiesa, Y. Ishai, R. Ostrovsky, and
O. Paneth. Succinct non-interactive arguments via
linear interactive proofs. In TCC, pages 315–333,
2013.
[8] D. Boneh and X. Boyen. Short signatures without
random oracles and the SDH assumption in bilinear
groups. J. Cryptology, 21(2), pages 149–177, 2008.
[9] B. Braun, A. J. Feldman, Z. Ren, S. T. V. Setty, A. J.
Blumberg, and M. Walﬁsh. Verifying computations
with state. In SOSP, pages 341–357, 2013.
[10] R. Canetti, O. Paneth, D. Papadopoulos, and
N. Triandopoulos. Veriﬁable set operations over out-
sourced databases. In PKC, pages 113–130, 2014.
[11] K.-M. Chung, Y. T. Kalai, F.-H. Liu, and R. Raz.
Memory delegation. In CRYPTO, pages 151–168,
2011.
[12] K.-M. Chung, Y. T. Kalai, and S. P. Vadhan. Im-
proved delegation of computation using fully homo-
morphic encryption. In CRYPTO, pages 483–501,
2010.
[13] R. Gennaro, C. Gentry, and B. Parno. Non-
interactive veriﬁable computing: Outsourcing com-
putation to untrusted workers. In CRYPTO, pages
465–482, 2010.
[14] R. Gennaro, C. Gentry, B. Parno, and M. Raykova.
Quadratic span programs and succinct NIZKs with-
out PCPs. In EUROCRYPT, pages 626–645, 2013.
[15] T. Granlund and the GMP development team”.
GMP: The GNU Multiple Precision Arithmetic
Library, 2006. Available at http://gmplib.
org/.
[16] J. Groth. Short pairing-based non-interactive zero-
knowledge arguments. In ASIACRYPT, pages 321–
340, 2010.
[17] P. Jaccard. Etude comparative de la distribution
ﬂorale dans une portion des Alpes et du Jura. Impr.
Corbaz, 1901.
[18] L. Kissner and D. X. Song. Privacy-preserving set
operations. In CRYPTO, pages 241–257, 2005.
[19] D. E. Knuth. The art of computer programming.
Pearson Education, 2005.
[20] A. E. Kosba, D. Papadopoulos, C. Papamanthou,
M. F. Sayed, E. Shi, and N. Triandopoulos. TRUE-
SET: Nearly practical veriﬁable set computations.
Cryptology ePrint Archive, Report 2014/160, 2014.
http://eprint.iacr.org/2014/160.
[21] S. Micali. Computationally sound proofs. SIAM J.
Comput., 30(4):1253–1298, 2000.
[22] C. Papamanthou, R. Tamassia, and N. Triandopou-
los. Optimal veriﬁcation of operations on dynamic
sets. In CRYPTO, pages 91–110, 2011.
[23] B. Parno, J. Howell, C. Gentry, and M. Raykova.
Pinocchio: Nearly practical veriﬁable computation.
In IEEE Symposium on Security and Privacy, pages
238–252, 2013.
[24] B. Parno, M. Raykova, and V. Vaikuntanathan. How
to delegate and verify in public: Veriﬁable computa-
tion from attribute-based encryption. In TCC, pages
422–439, 2012.
[25] S. T. V. Setty, B. Braun, V. Vu, A. J. Blumberg,
B. Parno, and M. Walﬁsh. Resolving the conﬂict
between generality and plausibility in veriﬁed com-
putation. In EuroSys, pages 71–84, 2013.
USENIX Association  
23rd USENIX Security Symposium  779
[26] S. T. V. Setty, R. McPherson, A. J. Blumberg, and
M. Walﬁsh. Making argument systems for out-
sourced computation practical (sometimes).
In
NDSS, 2012.
[27] V. Shoup. NTL: Number theory library. Available
at http://www.shoup.net/ntl/.
[28] V. Shoup. A new polynomial factorization algo-
rithm and its implementation. Journal of Symbolic
Computation, 20(4), pages 363–397, 1995.
[29] V. Vu, S. T. V. Setty, A. J. Blumberg, and M. Wal-
ﬁsh. A hybrid architecture for interactive veriﬁable
computation. In IEEE Symposium on Security and
Privacy, pages 223–237, 2013.
6 Appendix
6.1 Computational Assumptions
Assumption 1 (q-PDH assumption [16]) The q-power
Difﬁe-Hellman (q-PDH) assumption holds for G if for
all PPT A the following probability is negligible in k:
(p, G, GT , e, g) ← G(1k); s ← Z∗p;
G ←(cid:28)g, gs, . . . , gsq
, . . . , gs2q(cid:27) ;
σ ← (p, G, GT , e, G);
y ← A(σ) : y = gsq+1
, gsq+2
Assumption 2 (q-PKE assumption [16]) The q-power
knowledge of exponent assumption holds for G if for all
PPT A there exists a non-uniform PPT extractor χA such
that the following probability is negligible in k:
(p, G, GT , e, g) ← G(1k);{α, s} ← Z∗p;
G ←(cid:23)g, gs, . . . , gsq
, gα, gαs, . . . , gαsq(cid:22) ;
σ ← (p, G, GT , e, G);
(c, ˆc; a0, a1, . . . , aq) ← (A||χA)(σ, z) :
ˆc = cα ∧ c (cid:24)= g(cid:31)q
i=0 aisi
for any auxiliary information z ∈ {0, 1}poly(k) that
is generated independently of α. Note that (y; z) ←
(A||χA)(x) signiﬁes that on input x, A outputs y, and
that χA, given the same input x and A’s random tape,
produces z.
Assumption 3 (q-SDH assumption [8]) The
q-strong
Difﬁe-Hellman (q-SDH) assumption holds for G if for all
PPT A the following probability is negligible in k:
(p, G, GT , e, g) ← G(1k);{s} ←Z ∗p;
σ ← (p, G, GT , e, G =(cid:23)g, gs, . . . , gsq(cid:22));
(y, c) ← A(σ) : y = e(g, g)
s+c .
1
Pr
 .
Pr
Pr
6.2 Succinct Non-Interactive Arguments of
Knowledge (SNARKs)
Deﬁnition 6 (SNARK) Algorithms
(KeyGen, Prove, Verify) give a succinct non-interactive
argument of knowledge (SNARK) for an NP language L
with corresponding NP relation RL if:
Completeness: For all x ∈ L with witness w ∈ RL(x),
the following probability is negligible in k:
(cid:19)
following probability is negligible in k:
Pr(cid:21)Verify(sk, x, π) = 0(cid:20)(cid:20)(cid:20)(cid:20)
(pk, sk) ← KeyGen(1k),
π ← Prove(pk, x, w)
Adaptive soundness: For any PPT algorithm A, the
Pr(cid:21) Verify(sk, x, π) = 1
(x, π) ← A(1k, pk)
Succinctness: The length of a proof is given by |π| =
∧ (x /∈ L)
(pk, sk) ← KeyGen(1k),
(cid:20)(cid:20)(cid:20)(cid:20)
poly(k)poly log(|x| + |w|).
Extractability: For any poly-size prover Prv, there ex-
ists an extractor Extract such that for any statement
x, auxiliary information µ, the following holds:
(cid:19)
Pr
Pr
Pr
(pk, sk) ← KeyGen(1k)
π ← Prv(pk, x, µ)
Verify(sk, x, π) = 1
∧
w ← Extract(pk, sk, x, π)
w /∈ RL(x)
= negl(k) .
Zero-knowledge: There exists a simulator Sim, such
that for any PPT adversary A, the following holds:
pk ← KeyGen(1k); (x, w) ← A(pk);
π ← Prove(pk, x, w) : (x, w) ∈ RL
and A(π) = 1
(cid:22)
(pk, state) ← Sim(1k); (x, w) ← A(pk);
π ← Sim(pk, x, state) : (x, w) ∈ RL
and A(π) = 1 .
We say that a SNARK is publicly veriﬁable if sk = pk.
In this case, proofs can be veriﬁed by anyone with pk.
Otherwise, we call it a secretly-veriﬁable SNARK, in
which case only the party with sk can verify.
.
,
780  23rd USENIX Security Symposium 
USENIX Association