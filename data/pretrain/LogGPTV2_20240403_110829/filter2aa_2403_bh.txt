                   or       $at, $zero ; branch delay slot, NOP 
这里序言介绍的两个指令分别是 LBU（Load Byte Unsigned）和 SB（Store Byte）。与 ARM 模式的程序
相似，所有的 MIPS 寄存器都是 32 位寄存器。在这两个平台上，我们无法像 x86 平台上那样直接对寄存器
的低位进行直接操作。因此在对单个字节进行操作时，我们还是得访问整个 32 位寄存器。LBU 指令加载
字节型数据并且会清除寄存器的其他位。另外由于有符号数据存在符号位的问题，所以在处理有符号数的
时候还要使用 LB（Load Byte）指令把单字节的有符号数据扩展为等值的 32 位数据、再存储在寄存器里。
SB 指令的作用是把寄存器里的低 8 位复制到内存里。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
164 
逆向工程权威指南（上册） 
14.2.4  矢量化技术 
25.1.2 节会详细介绍 GCC 的优化编译方式基于矢量化技术（Vectorization）的。 
14.3 总结 
当循环控制变量从 2 递增到 9 时，循环语句对应的汇编代码大体如下。 
指令清单 14.15  x86 
    mov [counter], 2 ; initialization 
    jmp check 
body: 
    ; loop body 
    ; do something here 
    ; use counter variable in local stack 
    add [counter], 1 ; increment 
check: 
    cmp [counter], 9 
    jle body 
如果没有开启编译器的优化编译功能，那么控制变量的递增操作可能对应着 3 条汇编指令。 
指令清单 14.16  x86 
    MOV [counter], 2 ; initialization 
    JMP check 
body: 
    ; loop body 
    ; do something here 
    ; use counter variable in local stack 
    MOV REG, [counter] ; increment 
    INC REG 
    MOV [counter], REG 
check: 
    CMP [counter], 9 
    JLE body 
当循环体较为短小时，编译器可能给循环控制变量分配专用的寄存器。 
指令清单 14.17  x86 
    MOV EBX, 2 ; initialization 
    JMP check 
body: 
    ; loop body 
    ; do something here 
    ; use counter in EBX, but do not modify it! 
    INC EBX ; increment 
check: 
    CMP EBX, 9 
    JLE body 
编译器还可能调换部分指令的顺序。 
指令清单 14.18  x86 
    MOV [counter], 2 ; initialization 
    JMP label_check 
label_increment: 
    ADD [counter], 1 ; increment 
label_check: 
    CMP [counter], 10 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 14 章  循    环 
165 
    JGE exit 
    ; loop body 
    ; do something here 
    ; use counter variable in local stack 
    JMP label_increment 
exit: 
通常情况下，程序应当首先判断循环条件是否满足，然后再执行循环体。但是在编译器确定第
一次迭代肯定会发生的情况下，它可能会调换循环体和判断语句的顺序。下面这个程序就是个典型
的例子。 
指令清单 14.19  x86 
    MOV REG, 2 ; initialization 
body: 
    ; loop body 
    ; do something here 
    ; use counter in REG, but do not modify it! 
    INC REG ; increment 
    CMP REG, 10 
    JL body 
编译器不会使用 LOOP 指令。由 LOOP 控制的循环控制语句比较少见。如果某段代码带有 LOOP 指令，
那么您应当认为这是手写出来的汇编程序。 
指令清单 14.20  x86 
    ; count from 10 to 1 
    MOV ECX, 10 
body: 
    ; loop body 
    ; do something here 
    ; use counter in ECX, but do not modify it! 
    LOOP body 
ARM 平台的 R4 寄存器专门用于存储循环控制变量。 
指令清单 14.21  ARM 
    MOV R4, 2 ; initialization 
    B check 
body: 
    ; loop body 
    ; do something here 
    ; use counter in R4, but do not modify it! 
    ADD R4,R4, #1 ; increment 
check: 
    CMP R4, #10 
    BLT body 
14.4 练习题 
14.4.1 题目 1 
为什么现在的编译器不再使用 LOOP 指令了？ 
14.4.2 题目 2 
使用您喜欢的操作系统和编译器编译 14.1.1 节的样本程序，然后修改这个可执行程序，使循环变量 i
可以从 6 递增到 20。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
166 
逆向工程权威指南（上册） 
14.4.3 题目 3 
请描述下述代码的功能。 
指令清单 14.22  由 MSVC 2010 （启用/Ox 选项）编译而得的代码 
$SG2795 DB  
'%d', 0aH, 00H 
_main   PROC 
         push   
esi 
         push    edi 
         mov     edi,  DWORD PTR __imp__printf 
         mov     esi, 100 
         npad    3; align next label 
$LL3@main: 
         push    esi 
         push    OFFSET $SG2795   ; '%d' 
         call    edi 
         dec     esi 
         add     esp,  8 
         test    esi,  esi 
         jg      SHORT $LL3@main 
         pop     edi 
         xor     eax, eax 
         pop     esi 
         ret0 
_main   ENDP 
指令清单 14.23  Non-optimizing Keil 6/2013 (ARM mode) 
main PROC 
         PUSH 
{r4,lr} 
         MOV  
r4,#0x64 
|L0.8| 
         MOV  
r1,r4 
         ADR  
r0,|L0.40| 
         BL  
__2printf 
         SUB  
r4,r4,#1 
         CMP  
r4,#0 
         MOVLE 
r0,#0 
         BGT  
|L0.8| 
         POP  
{r4,pc} 
         ENDP 
|L0.40| 
         DCB  
"%d\n",0 
指令清单 14.24  Non-optimizing Keil 6/2013 (Thumb mode) 
main PROC 
         PUSH 
{r4,lr} 
         MOVS 
r4,#0x64 
|L0.40| 
         MOVS 
r1,r4 
         ADR  
r0,|L0.24| 
         BL  
__2printf 
         SUBS 
r4,r4,#1 
         CMP  
r4,#0 
         BGT  
|L0.4| 
         MOVS 
r0,#0 
         POP  
{r4,pc} 
         ENDP 
         DCW  
0x0000 
|L0.24| 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 14 章  循    环 
167 
         DCB  
"%d\n",0 
指令清单 14.25  Optimizing GCC 4.9 (ARM64) 
main: 
         stp      x29, x30, [sp, -32]! 
         add      x29, sp, 0 
         stp      x19, x20, [sp,16] 
         adrp     x20, .LC0 
         mov      w19, 100 
         add      x20, x20, :lo12:.LC0 
.L2: 
         mov      w1, w19 
         mov      x0, x20 
         bl       printf 
         subs     w19, w19, #1 
         bne      .L2 
         ldp      x19, x20, [sp,16] 
         ldp      x29, x30, [sp], 32 
         ret 
.LC0: 
         .string  "%d\n"         
指令清单 14.26  Optimizing GCC 4.4.5 (MIPS) (IDA) 
main: 
var_18   
= -0x18 
var_C    
= -0xC 
var_8    
= -8 
var_4    
= -4 
lui   
$gp, (__gnu_local_gp >> 16) 
addiu    
$sp, -0x28 
la       
$gp, (__gnu_local_gp & 0xFFFF) 
sw       
$ra, 0x28+var_4($sp) 
sw       
$s1, 0x28+var_8($sp) 
sw       
$s0, 0x28+var_C($sp) 
sw       
$gp, 0x28+var_18($sp) 
la       
$s1, $LC0        # "%d\n" 
li       
$s0, 0x64  # 'd' 
loc_28:                                           # CODE XREF: main+40 
lw       
$t9, (printf & 0xFFFF)($gp) 
move     
$a1, $s0 
move     
$a0, $s1 
jalr     
$t9 
addiu    
$s0, -1 
lw       
$gp, 0x28+var_18($sp) 
bnez     
$s0, loc_28 
or       
$at, $zero 
lw       
$ra, 0x28+var_4($sp) 
lw       
$s1, 0x28+var_8($sp) 
lw       
$s0, 0x28+var_C($sp) 
jr       
$ra 
addiu    
$sp, 0x28 
$LC0:    
.ascii "%d\n"        # DATA XREF: main+1C 
14.4.4 题目 4 
请描述下述代码的功能。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
168 
逆向工程权威指南（上册） 
指令清单 14.27  Optimizing MSVC 2010 
$SG2795 DB  
'%d', 0aH, 00H 
_main   PROC 
          push  
esi 
          push      edi 
          mov       edi, DWORD PTR __imp_printf 
          mov       esi, 1 
          npad      3; align next label 
$LL3@main: 
          push     esi 
          push     OFFSET $SG2795  ; '%d' 
          call     edi 
          add      esi, 3 
          add      esp, 8 
          cmp      esi, 100 
          jl       SHORT $LL3@main 
          pop      edi 
          xor      eax, eax 
          pop      esi 
          ret      0 
_main   ENDP 
指令清单 14.28  Non-optimizing Keil 6/2013 (ARM mode) 
main  PROC 
           PUSH    {r4,lr} 
           MOV    r4,#1 
|L0.8| 
           MOV     r1,r4 
           ADR     r0,|L0.40| 
           BL      __2printf 
           ADD     r4,r4,#3 
           CMP     r4,#0x64 
           MOVGE   r0,#0 
           BLT     |L0.8| 
           POP  
{r4,pc} 
           ENDP 
|L0.40| 
           DCB      "%d\n",0 
指令清单 14.29  Non-optimizing Keil 6/2013 (Thumb mode) 
main  PROC 
           PUSH    {r4,lr} 