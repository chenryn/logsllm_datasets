transfer from a virtual address to API code as an API call.
On the other hand, strategies existing API de-obfuscations take to ﬁght
against API obfuscations are either to complement lacking or hidden DLL infor-
mation by ﬁnding the information from multiple data sources or to perform
deeper code analysis until they reach a certain point where DLL information is
found. In both cases, they rely on the meta-information of DLL, which is stored
in some of the data structures the OS manages. In other words, they expect
that the OS precisely manages loaded DLLs, keeps track of their loading and
unloading, and stores their meta-information in certain data structures.
3 Design
We propose a new API obfuscation technique with Stealth Loader, which is a
program loader that does not leave any traces of loaded DLLs in Windows-
managed data structures. In this section, we present an overview of Stealth
Loader and then introduce the design of it.
3.1 Overview
Figure 2 shows the components of Stealth Loader and how it works.
Stealth Loader is composed of exPEB, sLdrLoadDll, sLdrGetProcAddress,
and Bootstrap. exPEB is the data structure to manage the meta-information of
stealth-loaded DLLs. sLdrLoadDll and sLdrGetProcAddress are exported func-
tions and the main components of Stealth Loader. sLdrLoadDll is used for load-
ing a speciﬁed DLL in the way we explain in this Section, while sLdrGetPro-
cAddress is used for retrieving the address of an exported function or variable
from a speciﬁed stealth-loaded DLL. Bootstrap is a code snippet for resolving
Stealth Loader: Trace-Free Program Loading for API Obfuscation
223
Fig. 2. How Stealth Loader works and its components. (a) is the ﬁle layout of an
executable before Stealth Loader is embedded. (b) is the one after Stealth Loader is
embedded and the components of Stealth Loader are also described. (c) is the process
memory layout after Bootstrap has resolved the dependencies of an executable and
stealth-loaded DLLs.
the API dependencies of an executable and stealth-loaded DLLs by using the
two exported functions.
We ﬁrst embed Stealth Loader into an executable which we want to protect.
After an executable begins to run, Bootstrap code is executed. It identiﬁes nec-
essary DLLs for an executable and then loads them using sLdrLoadDll. At that
time, it does not rely on Windows-loaded DLLs2 to resolve the dependency of
stealth-loaded DLLs. After loading all necessary DLLs and resolving APIs, the
execution is transferred to the code of an executable from Bootstrap.
Our intention behind Stealth Loader is to attack API name resolution as
other API obfuscations do. We achieve this by hiding the existences of loaded
DLLs. This is the same intention as DLL unlinking, but our approach is more
robust against API de-obfuscations. We tackle this from two diﬀerent directions.
The ﬁrst is that we redesign the procedure of program loading to be trace-free.
The second is that we add two new features to a program loader; one is for
removing traces left on memory after completing DLL loading, and the other is
for removing characteristic behaviors of Stealth Loader itself.
3.2 Program Loader Redesign
We ﬁrst break the procedure of a program loader into three phases: code map-
ping, dependency resolution, and initialization & registration. Then, we observe
what traces may be left at each phase for loading a DLL. On the basis of obser-
vation, we redesign each phase. In addition, we consider that the side eﬀects
caused by the redesigns are reasonable as an execution environment.
2 DLLs loaded by Windows.
224
Y. Kawakoya et al.
Code Mapping
Observation. The purpose of this phase is to map a system DLL that resides on
disk into memory. Windows loader conducts this using a ﬁle-map function, such
as CreateFileMapping. The content of a mapped ﬁle is not loaded immediately. It
is loaded when it becomes necessary. This mechanism is called “on-demand page
loading.” Thanks to this, the OS is able to consume memory eﬃciently. That is, it
does not always need to keep all the contents of a ﬁle on memory. Instead, it needs
to manage the correspondence between memory areas allocated for a mapped
ﬁle and its ﬁle path on a disk. Windows manages this correspondence using the
VAD data structure. A member of VAD indicates the path for a mapped ﬁle
when the corresponding memory area is used for ﬁle mapping. This path of a
mapped ﬁle in VAD becomes a trace for analysis tools to detect the existence of
a loaded system DLL on memory. ldrmodules acquires the list of loaded DLLs
on memory by parsing VADs and extracting the ﬁle paths of mapped ﬁles.
Design. Instead of using ﬁle-map functions, we map a system DLL using ﬁle and
memory operational functions such as CreateFile, ReadFile, and VirtualAlloc to
avoid leaving path information in VAD. The area allocated by VirtualAlloc is
not ﬁle-mapped memory. Therefore, the VAD for the area does not indicate any
relationship to a ﬁle. The concrete ﬂow in this phase is as follows.
1. Open a DLL ﬁle with CreateFile and calculate the necessary size for locating
2. Allocate continuous virtual memory with VirtualAlloc for the DLL on the
it onto memory.
basis of size.
3. Read the content of an opened DLL ﬁle with ReadFile and store the headers
and each section of it to proper locations in the allocated memory.
Side Eﬀect. Avoiding ﬁle-map functions for locating a DLL on memory imposes on
us two side eﬀects. The ﬁrst is that we have to allocate a certain amount of memory
immediately for loading all sections of a DLL when we load the DLL. That means
that we cannot use on-demand page loading. The second is that we cannot share
a part of the code or data of a stealth-loaded DLL with other processes because
memory buﬀers allocated with VirtualAlloc are not shareable, while ones where
ﬁles are mapped are sharable. Regarding the ﬁrst, recent computers have enough
physical memory, so it would not be a big problem even if we could not consume
memory eﬃciently. With regard to the second, we did not ﬁnd any system DLL
using shared memory with other processes in our experiments. Because of these
reasons, we consider these eﬀects to not be that signiﬁcant.
Dependency Resolution
Observation. The purpose of this phase is to resolve the dependency of a loading
DLL. Most DLLs somehow depend on APIs exported from other DLLs. There-
fore, a program loader has to resolve the dependency of a loading DLL to make
Stealth Loader: Trace-Free Program Loading for API Obfuscation
225
Fig. 3. Example of resolving dependency by Stealth Loader. (a) is the layout before
Stealth Loader starts, (b) shows that the stealth-loaded advapi32.dll does not create
a dependency on the Windows-loaded ntdll.dll, and (c) shows that the stealth-loaded
advapi32.dll creates a dependency on the stealth-loaded ntdll.dll.
the DLL ready to be executed. When the Windows loader ﬁnds a dependency,
and if a dependent DLL is already loaded into memory, it is common to use
already loaded DLLs to resolve the dependency, as shown in Fig. 3-(b).
However, this dependency becomes a trace for analysis tools, i.e., behav-
ioral traces. For example, if a stealth-loaded advapi32.dll has a dependency on a
Windows-loaded ntdll.dll, the APIs of ntdll.dll indirectly called from advapi32.dll
are possibly monitored by analysis tools. In other words, we can hide a call of
RegCreateKeyExA, while we cannot hide one of NtCreateKey. Analysis tools
can get similar behavior information from NtCreateKey as that from RegCre-
ateKeyEx since RegCreateKeyEx internally calls NtCreateKey while passing
almost the same arguments.
Design. To avoid this, Stealth Loader loads dependent DLLs by itself to resolve
the dependency of a loading DLL. In the case of Fig. 3, it loads ntdll.dll by
itself to resolve the dependency of advapi32.dll. As a result, after advapi32.dll
has been loaded and its dependency has been resolved, the memory layout is
like that shown in Fig. 3-(c). On the basis of this layout, when an original code
calls RegCreateKeyExA, RegCreateKeyExA internally calls the NtCreateKey of
stealth-loaded ntdll.dll. Therefore, this call is invisible to analysis tools even if a
Windows-loaded kernel32.dll and ntdll.dll are monitored by them.
Side Eﬀect. The side eﬀect caused by this design is reduced memory space eﬃ-
ciency. That is, Stealth Loader consumes approximately twice as much memory
for DLLs as the Windows loader since it newly loads a dependent DLL even if
the DLL is already located on memory. We consider this side eﬀect to not be
that signiﬁcant because recent computers have enough memory as we previously
mentioned.
226
Y. Kawakoya et al.
Initialization and Registration
Observation. Windows loader initializes a loading DLL by executing the initialize
function exported from a DLL, such as DllMain. At the same time, it registers a
loaded DLL to PEB. In PEB, the meta-information of loaded DLLs is managed
by linked lists. Many analysis tools often check PEB to acquire a list of loaded
DLLs and their loaded memory addresses.
Design. Stealth Loader also initializes a loading DLL in the same way as Win-
dows loader does. However, it does not register the meta-information of loaded
DLL to PEB to avoid being detected by analysis tools through PEB.
Side Eﬀect. The side eﬀect of this design is that stealth-loaded DLLs cannot
receive events such as process-creation or process-termination. This is because
these events are delivered to DLLs listed in PEB. We consider this eﬀect to not
be very signiﬁcant because most system DLLs do not depend on these events at
all as far as we have investigated. Most of them are implemented to handle only
create-process and -thread events, which are executed mainly when the DLL is
ﬁrst loaded.
3.3 Stealthiness Enhancement
Apart from ﬁnding traces in Windows-managed data structures, there are other
ways to identify the existence of a loaded DLL. In this subsection, we present
the possibility of detecting loaded DLLs from characteristic strings in PE header
of a certain DLL or behaviors of Stealth Loader itself. Then, we introduce our
approaches to hiding the string patterns and behaviors.
PE Header Removal. Stealth Loader deletes some ﬁelds of the PE header on
memory after it has loaded a DLL and resolved its dependency. This is because
some of the ﬁelds may become a hint for analysis tools to inferring a DLL loaded
on memory. For example, GUID is possibly included in the debug section of the
PE header of a system DLL. Another example is that the tables of exported and
imported API names of a system DLL, which are pointed from the PE header,
also provide useful information for analysis tools. Like these examples, the PE
header contains a lot of information for identifying a DLL.
In Stealth Loader, we delete the debug section, import name table, and export
name table. Basically, the debug section is not used by the original code in a
process under normal behavior; it is only used for debugging purposes. The
import name table is necessary to resolve dependencies only when a DLL is
being loaded. After it is completed, this table is not referenced from the code
and data. Therefore, we can simply delete them after a DLL has been loaded.
Unlike the above two, we cannot simply delete the export name table since
it is accessed after a DLL has been loaded in order to retrieve the address of
an exported API of the loaded DLL at runtime. This is called “dynamic API
Stealth Loader: Trace-Free Program Loading for API Obfuscation
227
resolution”. Therefore, we prepared an interface, sLdrGetProcAddress, to resolve
APIs exported from stealth-loaded DLLs. Also, we prepared a data structure,
exPEB, in Stealth Loader to manage the exported API names and corresponding
addresses of each stealth-loaded DLL. Thanks to them, we can delete the export
name table as well without losing the dynamic API resolution capability of
Stealth Loader.
Reﬂective Loading. Reﬂective Loading is used for hiding the API calls invoked
from Stealth Loader itself. While the calls invoked from original code are suc-
cessfully hidden by Stealth Loader, API calls invoked from Stealth Loader are
still visible to analysis tools because Stealth Loader basically uses APIs exported
from Windows-loaded DLLs. These exposed API calls give a chance for analy-
sis tools to detect the existence of Stealth Loader because some of the behav-
iors of Stealth Loader are not often seen in normal programs. For example,
CreateFile(‘‘kernel32.dll’’) is very characteristic since programs normally
load a DLL with LoadLibrary(‘‘kernel32.dll’’) and do not open a Windows
system DLL as a ﬁle with CreateFile. The position of Stealth Loader may allow
analysis tools to perform a special analysis on Stealth Loader to extract loaded
DLLs information from it.
To avoid this, we use Reﬂective Loading. The core idea of Reﬂective Loading
is to copy all sections of an already loaded DLL to allocated buﬀers during the
code mapping phase instead of opening a ﬁle and reading data from it. This idea
is inspired by Reﬂective DLL injection, introduced in Fewer’s paper [4], as a way
of stealthily injecting a DLL into another process. We leveraged this to load a
DLL as a part of Stealth Loader without opening the ﬁle of each DLL.
If a target DLL is not loaded at that time, we use the APIs of the stealth-
loaded kernel32.dll to open a ﬁle, allocate memory, and conduct the other steps.
kernel32.dll and ntdll.dll are always loaded because these DLLs are loaded by
Windows as a part of process initialization. Thus, we can completely hide all
API calls invoked by Stealth Loader from analysis tools monitoring API calls.
4 Implementation
We implement Stealth Loader on Windows 7 Service Pack 1. In this section, we
explain dynamic API resolution of Stealth Loader and stealth-loadable APIs.
4.1 Dynamic API Resolution
Stealth Loader supports dynamic API resolution with sLdrLoadDll and sLdrGet-
ProcAddress. When Stealth Loader loads a DLL depending on the LdrLoadDll
or LdrGetProcedureAddress of ntdll.dll, e.g., kernel32.dll, it replaces the entries
of IAT to the two functions in the loading DLL with pointers to sLdrLoadDll or
sLdrGetProcAddress. Under this situation, when the original code attempts to
dynamically load a DLL, for example, using LoadLibrary, which internally calls
LdrLoadDll, the API call to LoadLibrary redirects to sLdrLoadDll and then
Stealth Loader loads a speciﬁed DLL.
228
Y. Kawakoya et al.
4.2 Stealth-Loadable APIs
In Stealth Loader, we support 12 DLLs: ntdll.dll, kernel32.dll, kernelbase.dll,
gdi32.dll, user32.dll, shell32.dll, shlwapi.dll, ws2 32.dll, wininet.dll, winsock.dll,
crypt32.dll, and msvcrt.dll. This means that we support in total 7,764 APIs
exported from these 12 DLLs. The number of unsupported APIs is 1,633. The
reasons we cannot support them are described in Appendix A. Since these rea-
sons are very detailed and speciﬁc to the Windows 7 environment, we put them
into this appendix. We can support more DLLs with no or at least little cost.
However, we consider the current number of supported APIs to be enough for
the purpose of this paper because we have already covered 99% (1018/1026) of
the APIs on which IDAScope, a popular static malware analysis tool [16], focuses
as important APIs. In addition, we also covered 75% (273/364) of the APIs on
which Cuckoo Sandbox, a popular sandbox whose target APIs are selected by
malware analysts [15], sets hooks for dynamic analysis. Regarding the remaining
25% of APIs, they separately reside in several DLLs in a small group.
5 Experiment
To show the feasibility of Stealth Loader, we conducted two types of experiments:
one for comparing its resistance capability against existing analysis tools to other
API obfuscations, and another for conﬁrming its eﬀectiveness with real malware.