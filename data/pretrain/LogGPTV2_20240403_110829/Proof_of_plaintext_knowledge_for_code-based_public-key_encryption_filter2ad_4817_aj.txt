We present the construction from [GHKW16], which was the ﬁrst CCA-secure public-key
encryption with a tight security reduction to DDH, without relying on the use of pairings. We
refer to Figure 1.1 for a comparison with related works.
In this overview, we will consider a weaker notion of
Overview of our construction.
security, namely tag-based KEM security against plaintext check attacks (PCA) [OP01]. In
the PCA security experiment, the adversary gets no decryption oracle (as with CCA security),
but a PCA oracle that takes as input a tag and a ciphertext/plaintext pair and checks whether
the ciphertext decrypts to the plaintext. Furthermore, we restrict the adversary to only query
the PCA oracle on tags diﬀerent from those used in the challenge ciphertexts. PCA security
is strictly weaker than the CCA security we actually strive for, but allows us to present our
solution in a clean and simple way. (We show how to obtain full CCA security separately.)
The starting point of our construction is the Cramer-Shoup KEM. The public key is given
. On input pk and a tag τ, the encryption
by pk := ([M], [M⊤k0], [M⊤k1]) for M ←R Z(k+1)×k
algorithm outputs the ciphertext/plaintext pair
q
([y], [z]) = ([Mr], [r⊤M⊤kτ ]),
(3.1)
where kτ = k0 + τ k1 and r ←R Zk
q . Decryption relies on the fact that y⊤kτ = r⊤M⊤kτ . The
KEM is PCA-secure under k-Lin, with a security loss that depends on the number of ciphertexts
Q (via a hybrid argument) but independent of the number of PCA queries [CS03, ABP15].
Following the “randomized Naor-Reingold” paradigm introduced by Chen and Wee on
tightly secure IBE [CW13], our starting point is (3.1), where we replace kτ = k0 + τ k1 with
kτ =
λXj=1
kj,τj
and pk := ([M], [M⊤kj,b]j=1,...,λ,b=0,1), where (τ1, . . . , τλ) denotes the binary representation of
the tag τ ∈ {0, 1}λ.
Following [CW13], we want to analyze this construction by a sequence of games in which we
ﬁrst replace [y] in the challenge ciphertexts by uniformly random group elements via random
self-reducibility of MDDH (k-Lin), and then incrementally replace kτ in both the challenge
ciphertexts and in the PCA oracle by kτ + M⊥RF(τ), where RF is a truly random function
and M⊥ is a random element from the kernel of M, i.e., M⊤M⊥ = 0. Concretely, in Game
i, we will replace kτ with kτ + M⊥RFi(τ) where RFi is a random function on {0, 1}i applied
to the i-bit preﬁx of τ. We proceed to outline the two main ideas needed to carry out this
transition. Looking ahead, note that once we reach Game λ, we would have replaced kτ with
47
48
Chapter 3. Tightly CCA-Secure Encryption without Pairings
kτ + M⊥RF(τ), upon which security follows from a straight-forward information-theoretic
argument (and the fact that ciphertexts and decryption queries carry pairwise diﬀerent τ).
First idea. First, we show how to transition from Game i to Game i+1, under the restriction
that the adversary is only allowed to query the encryption oracle on tags whose i + 1-st bit is
0; we show how to remove this unreasonable restriction later. Here, we rely on an information-
theoretic argument similar to that of Cramer and Shoup to increase the entropy from RFi to
RFi+1. This is in contrast to prior works which rely on a computational argument; note that
the latter requires encoding secret keys as group elements and thus a pairing to carry out
decryption.
More precisely, we pick a random function RF′
i on {0, 1}i, and implicitly deﬁne RFi+1 as
follows:
RFi+1(τ) =(RFi(τ)
RF′
i(τ)
if τi+1 = 0
if τi+1 = 1
Observe all of the challenge ciphertexts leak no information about RF′
i or ki+1,1 since they all
correspond to tags whose i + 1-st bit is 0. To handle a PCA query (τ, [y], [z]), we proceed via
a case analysis:
• if τi+1 = 0, then kτ + RFi+1(τ) = kτ + RFi(τ) and the PCA oracle returns the same value
in both Games i and i + 1.
• if τi+1 = 1 and y lies in the span of M, we have
y⊤M⊥ = 0 =⇒ y⊤(kτ + M⊥RFi(τ)) = y⊤(kτ + M⊥RFi+1(τ)),
and again the PCA oracle returns the same value in both Games i and i + 1.
• if τi+1 = 1 and y lies outside the span of M, then y⊤ki+1,1 is uniformly random given
M, M⊤ki+1,1. (Here, we crucially use that the adversary does not query encryptions with
τi+1 = 1, which ensures that the challenge ciphertexts do not leak additional information
about ki+1,1.) This means that y⊤kτ is uniformly random from the adversary’s view-
point, and therefore the PCA oracle will reject with high probability in both Games i
and i + 1. (At this point, we crucially rely on the fact that the PCA oracle only outputs
a single check bit and not all of kτ + RF(τ).)
Via a hybrid argument, we may deduce that the distinguishing advantage between Games i
and i + 1 is at most Q/q where Q is the number of PCA queries.
Second idea. Next, we remove the restriction on the encryption queries using an idea of
Hofheinz, Koch and Striecks [HKS15] for tightly-secure IBE in the multi-ciphertext setting,
and its instantiation in prime-order groups [GCD+16]. The idea is to create two “independent
copies” of (M⊥, RFi); we use one to handle encryption queries on tags whose i + 1-st bit is 0,
and the other to handle those whose i + 1-st bit is 1. We call these two copies (M∗
i ) and
(M∗
0, RF(0)
i ), where M⊤M∗
1, RF(1)
0 = M⊤M∗
1 = 0.
Concretely, we replace M ←R Z(k+1)×k
q
into the span
of the respective matrices M, M0, M1, and we will also decompose the span of M⊥ ∈ Z3k×2k
into that of M∗
i (τ). We
then reﬁne the prior transition from Games i to i + 1 as follows:
1. Similarly, we decompose M⊥RFi(τ) into M∗
with M ←R Z3k×k
. We decompose Z3k
q
i (τ) + M∗
0RF(0)
1RF(1)
0, M∗
q
q
• Game i.0 (= Game i): pick y ← Z3k
q
M∗
1RF(1)
i (τ);
for ciphertexts, and replace kτ with kτ +M∗
0RF(0)
i (τ)+
basis for Span(M⊥)
basis for Z3k
q
M
M∗
0
M0
M∗
1
M1
49
Figure 3.1: Solid lines mean orthogonal, that is: M⊤M∗
0 = M⊤
1M∗
0 = 0 = M⊤M∗
1 = M⊤
0M∗
1.
q with y ←R Span(M, Mτi+1);
• Game i.1: replace y ←R Z3k
• Game i.2: replace RF(0)
• Game i.3: replace RF(1)
• Game i.4 (= Game i + 1): replace y ←R Span(M, Mτi+1) with y ←R Z3k
q .
i (τ) with RF(0)
i (τ) with RF(1)
i+1(τ);
i+1(τ);
For the transition from Game i.0 to Game i.1, we rely on the fact that the uniform distributions
over Z3k
q and Span(M, Mτi+1) encoded in the group are computationally indistinguishable, even
given a random basis for Span(M⊥) (in the clear). This extends to the setting with multiple
samples, with a tight reduction to the Dk(p)-MDDH Assumption independent of the number
of samples.
For the transition from Game i.1 to i.2, we rely on an information-theoretic argument like
the one we just outlined, replacing Span(M) with Span(M, M1) and M⊥ with M∗
0 in the case
analysis. In particular, we will exploit the fact that if y lies outside Span(M, M1), then y⊤ki+1,1
is uniformly random even given M, Mki+1,1, M1, M1ki+1,1. The transition from Game i.2 to
i.3 is completely analogous.
From PCA to CCA. Using standard techniques from [CS03, KD04, Kil06, BCHK07,
AGK08], we could transform our basic tag-based PCA-secure scheme into a “full-ﬂedged”
CCA-secure encryption scheme by adding another hash proof system (or an authenticated
symmetric encryption scheme) and a one-time signature scheme. However, this would incur an
additional overhead of several group elements in the ciphertext. Instead, we show how to di-
rectly modify our tag-based PCA-secure scheme to obtain a more eﬃcient CCA-secure scheme
with the minimal additional overhead of a single symmetric-key authenticated encryption.
In particular, the overall ciphertext overhead in our tightly CCA-secure encryption scheme is
merely one group element more than that for the best known non-tight schemes [KD04, HK07].
To encrypt a message M in the CCA-secure encryption scheme, we will (i) pick a random
y as in the tag-based PCA scheme, (ii) derive a tag τ from y, (iii) encrypt M using a one-time
authenticated encryption under the KEM key [y⊤kτ ]. The naive approach is to derive the tag
τ by hashing [y] ∈ G3k, as in [KD04]. However, this creates a circularity in Game i.1 where the
distribution of [y] depends on the tag. Instead, we will derive the tag τ by hashing [y] ∈ Gk,
where y ∈ Zk
q . We then modify M0, M1 so that the top k
rows of both matrices are zero, which avoids the circularity issue. In the proof of security, we
will also rely on the fact that for any y0, y1 ∈ Z3k
q , if y0 = y1 and y0 ∈ Span(M), then either
y0 = y1 or y1 /∈ Span(M). This allows us to deduce that if the adversary queries the CCA
oracle on a ciphertext which shares the same tag as some challenge ciphertext, then the CCA
oracle will reject with overwhelming probability.
q are the top k entries of y ∈ Z3k
Alternative view-point. Our construction can also be viewed as applying the IBE-to-PKE
transform from [BCHK07] to the scheme from [HKS15], and then writing the exponents of the
secret keys in the clear, thereby avoiding the pairing. This means that we can no longer apply
a computational assumption and the randomized Naor-Reingold argument to the secret key
space. Indeed, we replace this with an information-theoretic Cramer-Shoup-like argument as
outlined above.
50
Chapter 3. Tightly CCA-Secure Encryption without Pairings
Prior approaches. Several approaches to construct tightly CCA-secure PKE schemes ex-
ist: ﬁrst, the schemes of [HJ12, ACD+12, ADK+13, LPJY14, LJYP14, LPJY15] construct
a tightly secure NIZK scheme from a tightly secure signature scheme, and then use the
tightly secure NIZK in a CCA-secure PKE scheme following the Naor-Yung double encryption
paradigm [NY90, DDN00]. Since these approaches build on the public veriﬁability of the used
NIZK scheme (in order to faithfully simulate a decryption oracle), their reliance on a pairing
seems inherent.
Next, the works of [CW13, BKP14, HKS15, AHY15b, GCD+16] used a (Naor-Reingold-
based) MAC instead of a signature scheme to design tightly secure IBE schemes. Those
IBE schemes can then be converted (using the BCHK transformation [BCHK07]) into tightly
CCA-secure PKE schemes. However, the derived PKE schemes still rely on pairings, since the
original IBE schemes do (and the BCHK does not remove the reliance on pairings).
In contrast, our approach directly fuses a Naor-Reingold-like randomization argument with
the encryption process. We are able to do so since we substitute a computational randomization
argument (as used in the latter line of works) with an information-theoretic one, as described
above. Hence, we can apply that argument to exponents rather than group elements. This
enables us to trade pairing operations for exponentiations in our scheme.
Road-map. The rest of this chapter is organized as follows. First, we present our key-
encapsulation mechanism (KEM) that is only PCA-secure when there is multiple challenge
ciphertext, with a tight security reduction from DDH. Its security proof already captures most
technical novelties. Then, we show how to upgrade this encryption scheme to obtain tightly,
CCA-secure encryption, using an additional layer of symmetric authenticated encryption, à la
[KD04, HK07].
Multi-ciphertext PCA-secure KEM
In this section we describe a tag-based Key Encapsulation Mechanism KEM that is IND-PCA-
secure (see Deﬁnition 6).
For simplicity, we use the matrix distribution U3k,k(p) in our scheme in Figure 3.2, and prove
it secure under the Uk(p)-MDDH assumption (⇔ U3k,k(p)-MDDH assumption, by Lemma 2).
However, using a matrix distribution D3k,k(p) with more compact representation yields a more
eﬃcient scheme, secure under the D3k,k(p)-MDDH assumption (see Remark 5).
Our construction
GenKEM(1λ):
G := (G, p, P ) ←R GGen(1λ); M ←R U3k,k(p)
k1,0, . . . , kλ,1 ←R Z3k
pk :=(cid:16)G, [M],(cid:0)[M⊤kj,β](cid:1)1≤j≤λ,0≤β≤1(cid:17)
p
sk := (kj,β)1≤j≤λ,0≤β≤1
Return (pk, sk)
EncKEM(pk, τ):
p; C := [r⊤M⊤]
r ←R Zk
kτ :=Pλ
j=1 kj,τj
K := [r⊤ · M⊤kτ ]
Return (C, K) ∈ G1×3k × G
DecKEM(pk, sk, τ, C):
kτ :=Pλ
Return K := C · kτ
j=1 kj,τj
Figure 3.2: KEM, an IND-PCA-secure KEM under the Uk(p)-MDDH assumption, with tag-
space T = {0, 1}λ. Here, GGen is a prime-order group generator (see Section 2.2.1).
3.1 Multi-ciphertext PCA-secure KEM
51
Remark 5: On the use of the Uk(p)-MDDH assumption
In our scheme, we use a matrix distribution U3k,k(p) for the matrix M, therefore prov-
ing security under the U3k,k(p)-MDDH assumption ⇔ Uk(p)-MDDH assumption (see
Lemma 3). This is for simplicity of the presentation. However, for eﬃciency, one may
want to use an assumption with a more compact representation, such as the CI 3k,k-MDDH
assumption [MRV16] with representation size 2k instead of 3k2 for U3k,k(p).
Perfect correctness.
all k ∈ Z3k
p :
Security proof
It follows readily from the fact that for all r ∈ Zk
p and C = r⊤M⊤, for
r⊤(M⊤k) = C · k.
Theorem 7: IND-PCA security
The tag-based Key Encapsulation Mechanism KEM deﬁned in Figure 3.2 is IND-PCA
secure if the Uk(p)-MDDH assumption holds in G. Namely, for any adversary A, there
exists an adversary B such that T(B) ≈ T(A) + (QDec + QEnc) · poly(λ) and
AdvIND-PCA
KEM,A (λ) ≤ (4λ + 1) · AdvUk(p)-mddh
G,B
(λ) + (QDec + QEnc) · 2−Ω(λ),
where QEnc, QDec are the number of times A queries EncO, DecO, respectively, and poly(λ)
is independent of T(A).
game
y uniform in:
k′
τ used by EncO and DecO
G0
G1
G2.i
Span(M)
Z3k
q
Z3k
q
G2.i.1
τi+1 = 0 : Span(M, M0)
kτ
kτ
kτ + M⊥RFi(τ|i)
kτ + M⊥RFi(τ|i)
τi+1 = 1 : Span(M, M1)
τi+1 = 0 : Span(M, M0)
τi+1 = 1 : Span(M, M1)
τi+1 = 0 : Span(M, M0)
τi+1 = 1 : Span(M, M1)
kτ + M∗
0RF(0)
i+1(τ|i+1) + M∗
1RF(1)
i