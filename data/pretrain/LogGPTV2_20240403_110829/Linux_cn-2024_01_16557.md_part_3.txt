理解了这些信息，我们就可以现在展示赛手的详细信息了。
尽管这个架构的追踪功能相对直观，但是组件间传递的消息复杂性不可忽视。幸运的是，Textual 提供了有效的调试工具帮助我们理解背后的工作原理。
### Textual 应用的问题排查
对于 Python 的 Textual 应用进行 [调试](https://github.com/josevnz/tutorials/blob/main/docs/PythonDebugger/README.md) 相较而言更具挑战性。这是因为其中有一些操作可能是异步的，而在解决组件问题时设置断点可能颇为复杂。
根据具体情况，你可以使用一些工具。但首先，确保你已经安装了 textual 的开发工具：
```
pip install textual-dev==1.3.0
```
#### 确保你能捕捉到正确的按键
不确定 Textual 应用是否能捕捉到你的按键操作？运行 keys 应用：
```
textual keys
```
这让你能够验证一下你的按键组合，并确认在 Textual 中产生了哪些事件。
#### 图片比千言万语更直观
如果说你在布局设计上遇到了问题，想向他人展示你当前的困境，Textual 为你的运行应用提供了截图功能：
```
textual run --screenshot 5 ./kodegeek_textualize/log_scroller.py
```
就像你所看到的，我是通过这种方式为这篇教程创建了插图。
#### 捕获事件并输出定制消息
在 Textual 中，每一个应用实例都有一个日志记录器，可以使用如下方式访问：
```
my_app = self.screen.app
my_app.log.info(f"Loaded provider: CustomCommand")
```
想要查看这些消息，首先需要开启一个控制台：
```
. ~/virtualenv/Textualize/bin/activate
textual console
```
然后在另一个终端运行你的应用程序：
```
. ~/virtualenv/Textualize/bin/activate
textual run --dev ./kodegeek_textualize/log_scroller.py
```
在运行控制台的终端中，你可以看到实时的事件和消息输出：
```
▌Textual Development Console v0.46.0
▌Run a Textual app with textual run --dev my_app.py to connect.
▌Press Ctrl+C to quit.
─────────────────────────────────────────────────────────────────────────────── Client '127.0.0.1' connected ────────────────────────────────────────────────────────────────────────────────
[20:29:43] SYSTEM                                                                                                                                                                 app.py:2188
Connected to devtools ( ws://127.0.0.1:8081 )
[20:29:43] SYSTEM                                                                                                                                                                 app.py:2192
---
[20:29:43] SYSTEM                                                                                                                                                                 app.py:2194
driver=
[20:29:43] SYSTEM                                                                                                                                                                 app.py:2195
loop=
[20:29:43] SYSTEM                                                                                                                                                                 app.py:2196
features=frozenset({'debug', 'devtools'})
[20:29:43] SYSTEM                                                                                                                                                                 app.py:2228
STARTED FileMonitor({PosixPath('/home/josevnz/TextualizeTutorial/docs/Textualize/kodegeek_textualize/os_app.tcss')})
[20:29:43] EVENT
```
此外，以开发者模式运行的另一大好处是，如果你更改了 CSS，应用会尝试重新渲染，而无需重启程序。
### 如何编写单元测试
为你全新开发的 Textual 应用编写 [单元测试](https://docs.python.org/3/library/unittest.html)，应该如何操作呢？
在 [官方文档](https://textual.textualize.io/guide/testing/) 展示了几种用于测试我们应用的方式。
我将采用 [unittest](https://docs.python.org/3/library/unittest.html) 进行测试。为了处理异步例程，我们会需要特别的类 `unittest.IsolatedAsyncioTestCase` ：
```
import unittest
from textual.widgets import Log, Button
from kodegeek_textualize.log_scroller import OsApp
class LogScrollerTestCase(unittest.IsolatedAsyncioTestCase):
    async def test_log_scroller(self):
        app = OsApp()
        self.assertIsNotNone(app)
        async with app.run_test() as pilot:
            # Execute the default commands
            await pilot.click(Button)
            await pilot.pause()
            event_log = app.screen.query(Log).first()  # We pushed the screen, query nodes from there
            self.assertTrue(event_log.lines)
            await pilot.click("#close")  # Close the new screen, pop the original one
            await pilot.press("q")  # Quit the app by pressing q
if __name__ == '__main__':
    unittest.main()
```
现在让我们详细看看 `test_log_scroller` 方法中的操作步骤：
1. 通过 `app.run_test()` 获取一个 `Pilot` 实例。然后点击主按钮，运行包含默认指令的查询，随后等待所有事件的处理。
2. 从我们新推送出的屏幕中获取 `Log`，确保我们已获得几行返回的内容，即它并非空的。
3. 关闭新屏幕并重新呈现旧屏幕。
4. 最后，按下 `q`，退出应用。
可以测试表格吗？
```
import unittest
from textual.widgets import DataTable, MarkdownViewer
from kodegeek_textualize.table_with_detail_screen import CompetitorsApp
class TableWithDetailTestCase(unittest.IsolatedAsyncioTestCase):
    async def test_app(self):
        app = CompetitorsApp()
        self.assertIsNotNone(app)
        async with app.run_test() as pilot:
            """
            Test the command palette
            """
            await pilot.press("ctrl+\\")
            for char in "manuela".split():
                await pilot.press(char)
            await pilot.press("enter")
            markdown_viewer = app.screen.query(MarkdownViewer).first()
            self.assertTrue(markdown_viewer.document)
            await pilot.click("#close")  # Close the new screen, pop the original one
            """
            Test the table
            """
            table = app.screen.query(DataTable).first()
            coordinate = table.cursor_coordinate
            self.assertTrue(table.is_valid_coordinate(coordinate))
            await pilot.press("enter")
            await pilot.pause()
            markdown_viewer = app.screen.query(MarkdownViewer).first()
            self.assertTrue(markdown_viewer)
            # Quit the app by pressing q
            await pilot.press("q")
if __name__ == '__main__':
    unittest.main()
```
如果你运行所有的测试，你将看到如下类似的输出：
```
(Textualize) [josevnz@dmaf5 Textualize]$ python -m unittest tests/*.py
..
----------------------------------------------------------------------
Ran 2 tests in 2.065s
OK
```
这是测试 TUI 的一个不错的方式，对吧？
### 打包 Textual 应用
打包 Textual 应用与打包常规 Python 应用并没有太大区别。你需要记住，需要包含那些控制应用外观的 CSS 文件：
```
. ~/virtualenv/Textualize/bin/activate
python -m build
pip install dist/KodegeekTextualize-*-py3-none-any.whl
```
这个教程的 [pyproject.toml](https://tutorials.kodegeek.com/Textualize/pyproject.toml) 文件是一个打包应用的良好起点，告诉你需要做什么。
```
[build-system]
requires = [
    "setuptools >= 67.8.0",
    "wheel>=0.42.0",
    "build>=1.0.3",
    "twine>=4.0.2",
    "textual-dev>=1.2.1"
]
build-backend = "setuptools.build_meta"
[project]
name = "KodegeekTextualize"
version = "0.0.3"
authors = [
    {name = "Jose Vicente Nunez", email = "PI:EMAIL"},
]
description = "Collection of scripts that show how to use several features of textualize"
readme = "README.md"
requires-python = ">=3.9"
keywords = ["running", "race"]
classifiers = [
    "Environment :: Console",
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Utilities"
]
dynamic = ["dependencies"]
[project.scripts]
log_scroller = "kodegeek_textualize.log_scroller:main"
table_detail = "kodegeek_textualize.table_with_detail_screen:main"
[tool.setuptools]
include-package-data = true
[tool.setuptools.packages.find]
where = ["."]
exclude = ["test*"]
[tool.setuptools.package-data]
kodegeek_textualize = ["*.txt", "*.tcss", "*.csv"]
img = ["*.svg"]
[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}
```
### 未来计划
这个简短的教程只覆盖了 Textual 的部分方面。还有很多需要探索和学习的内容：
* 强烈建议你查看 [官方教程](https://textual.textualize.io/tutorial/)。有大量的示例和指向参考 [API](https://textual.textualize.io/api/) 的链接。
* Textual 可以使用来自 [Rich](https://github.com/Textualize/rich) 项目的组件，这个项目是一切的起源。我认为其中一些甚至可能所有这些组件在某些时候都会合并到 Textual 中。Textual 框架对于使用高级 API 的复杂应用更能胜任，但 Rich 也有很多漂亮的功能。
* 创建你自己的组件！同样，在设计 TUI 时，[拿一张纸，画出你希望这些组件如何布局的](https://textual.textualize.io/how-to/design-a-layout/)，这会为你后期省去很多时间和麻烦。
* 调试 Python 应用可能会有点复杂。有时你可能需要 [混合使用不同的工具](https://github.com/josevnz/DebuggingApplications/blob/main/StracePythonWireshark/README.md) 来找出应用的问题所在。
* 异步 IO 是一个复杂的话题，你应该 [阅读开发者文档](https://docs.python.org/3/library/asyncio-dev.html) 来了解更多可能的选择。
* Textual 被其他项目所使用。其中一个非常易于使用的项目是 [Trogon](https://github.com/Textualize/trogon)。[它会让你的 CLI 可以自我发现](https://github.com/josevnz/CLIWithClickAndTrogon/blob/main/README.md)。
* [Textual-web](https://github.com/Textualize/textual-web) 是个很有前景的项目，能让你在浏览器上运行 Textual 应用。尽管它不如 Textual 成熟，但它的进化速度非常快。
* 最后，[查看这些外部项目](https://www.textualize.io/projects/)。在项目组合中有许多有用的开源应用。
*（题图：DA/f11b0eb0-8e16-4cbe-986a-0fe978f6732a）*
---
via: 
作者：[Jose Nunez](https://fedoramagazine.org/author/josevnz/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[ChatGPT](https://linux.cn/lctt/ChatGPT) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出