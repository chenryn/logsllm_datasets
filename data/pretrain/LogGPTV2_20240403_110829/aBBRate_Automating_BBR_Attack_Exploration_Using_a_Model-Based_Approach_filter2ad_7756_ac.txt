3.1
0.7
7.0
2
57.9
236.3
4.2
0.6
1.5
0.7
4
21.0
102.4
4.7
4.7
0.1
0.06
8
14.3
78.7
4.0
1.1
0.06
0.03
16
6.7
85.5
4.8
0.9
0.02
0.02
32
3.9
76.8
14.2
0.3
0.01
0.01
above method were most effective in each category.
For attack strategies causing faster send rates, the optimistic
acknowledgment attack appeared in 100% of the strategies.
For attack strategies causing slower send rates, executing the
delayed acknowledgment attack in ProbeBW appeared in 53%
of the strategies, while attacks causing RTOs and quickly ac-
knowledging data in exponential backoff appeared in 47% of
the strategies. As for the attack strategies causing a stalled con-
nection, attacks causing RTOs and preventing data from being
acknowledged in exponential backoff appeared in 89% of the
strategies. Finally, attacks that optimistically acknowledged
lost data appeared in 11% of the strategies (see Table 2).
We use time/sequence graphs (TSGs) in Figure 3 and 4 to
understand why these attacks affect BBR’s sending rate on a
per-ACK basis. In each TSG, the x-axis is time and the y-axis
is sent/acknowledged bytes from the BBR sender’s (victim’s)
point-of-view. We use TSGs to also understand how BBR
ﬂows targeted by these attacks compare to benign ﬂows (ﬂows
without attacks taking place) and how they affect background
ﬂows that share the network concurrently. Figure 5 shows the
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    231
01020304050Time (ms)0.0000.0250.0500.0750.1000.1250.1500.175Megabytes Victim TXVictim ACKs0200400600800100012001400Time (ms)0.00.51.01.52.02.53.0Megabytes Victim TXVictim ACKs02505007501000125015001750Time (ms)0.000.250.500.751.001.251.50Megabytes Victim TXVictim ACKsVictim ReTX02004006008001000Time (ms)0.00.51.01.52.0MegabytesVictim TXVictim ACKsVictim ReTX0100200300400Time (ms)0.00.10.20.30.40.5MegabytesVictim TXVictim ACKsVictim ReTX(a) Attack 1
(b) Attack 2
(c) Attack 3
(d) Attack 4
(e) Attack 5
Figure 4: To understand how the victim ﬂow for each attack compares to the background ﬂow, these time-sequence graphs illustrate each attack
is carried out during the entirety of a ﬂow (100 MB transfer). For testing, we limit ﬂows to 60 seconds. The orange and blue lines represent the
victim and background ﬂow’s cumulative data transfer over time (executed concurrently). The green line represents the benign ﬂow with no
attacks taking place (executed as a separate experiment). In attack 1, the background ﬂow in unable to obtain bandwidth until the victim ﬂow
completes. In attack 2, 3, 4 and 5, the background ﬂow obtains greater bandwidth due to the victim sending slower or stalling.
Table 4: The optimistic acknowledgment attack causes BBR to in-
crease its sending rate by 25% every 8 round-trips. In this example,
this attack effectively cuts the perceived RTT of 20 ms in half.
Time (ms) Mbit/sec
6.0
0
7.5
80
160
9.4
11.7
240
14.6
320
18.3
400
480
22.8
Time (ms) Mbit/sec
28.6
560
35.7
640
720
44.7
55.9
800
69.8
880
87.3
960
1040
109.1
bandwidth. The attacker records the highest observed data
sequence number sent by the sender and modiﬁes acknowledg-
ment numbers from the receiver such that they acknowledge
the highest sequence. If the modiﬁed acknowledgment would
send a duplicate acknowledgment, then it is dropped. This re-
sults in packet loss (indicated by duplicate acknowledgments)
to be hidden. An off-path attacker who is able to predict the
sender’s sequence number and the receiver’s acknowledgment
rate would be able to achieve the same impact on a victim
ﬂow by maliciously injecting acknowledgments such that they
acknowledge new data sent by the sender.
A faster sending rate (see Figure 3a) is a byproduct of how
BBR aggressively probes for additional bandwidth by sending
25% faster than BtlBw for 1/8 RTTs. This attack causes the
acknowledgment rate to reﬂect the increased sending rate.
Figure 5: Each CDF represents the distribution of the avg. sending
rate for each attack class executed 100 times. The victim BBR ﬂow
shares the network with an identical benign background CUBIC
ﬂow.
impact of executing each attack 100 times, using a CDF of
the average send rate for the victim ﬂow in each execution.
Note that most curves are nearly vertical, indicating that each
attack had a high probability of affecting the sending rate.
4.2 Discovered Attacks on BBR
Attack 1 – Optimistic Acknowledgments. A faster send-
ing rate is caused by optimistically acknowledging only new
data sequences sent by the sender, without sending dupli-
cates, effectively causing BBR to overestimate the bottleneck
232    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
0.010.101.0010.00100.001000.00Avg. Sending Rate (Mbps)0.00.10.20.30.40.50.60.70.80.91.0CDFNo AttackAttack 1Attack 2Attack 3Attack 4Attack 5lay arrive. Since the attacker stops sending data, this causes
the sender to experience another delay in acknowledgment
packets after one RTT. This creates a pattern where the sender
experiences delays in acknowledgments every RTT, meaning
regardless when delivery rate samples are taken, the plateaus
in acknowledgments cause the delivery rate samples to always
be less than the current BtlBw. This implies BBR will never
increase its sending rate because as older BtlBw estimates
expire after 10 RTTs, it is replaced with the decreased delivery
rate samples due to this attack.
Surprisingly, BBR’s probing phase does not mitigate the
effect this attack has on the sending rate. One would think
that when BBR probes for bandwidth, the delivery rate sam-
ples computed during probing would be large enough to sur-
pass the decreased delivery rate samples. This would be true,
however because BBR drains queues immediately following
probing, the delivery rate samples take during probing are
still less than the current BtlBw. If BBR sent at a steady pace
for at least 1 RTT in between probing and draining, then this
attack would not result in its sending rate to decay.
Figure 6 shows how this attack is less effective on con-
gestion control that uses AIMD such as TCP New Reno. Al-
though this attack is still effective on New Reno, its sending
rate maintains a constant decreased rate rather than decaying.
In essence, New Reno observes this attack as an increase in
RTT, resulting in slower growth and lower overall throughput,
while BBR’s estimation mechanisms are unable to cope with
such large RTT increases, resulting in incorrect estimates and
more serious and long lasting issues.
It should be noted that this attack does not require TCP
header information to be modiﬁed to be effective, as packets
are only delayed. This implies QUIC [25], Google’s experi-
mental transport layer protocol that uses encrypted headers,
using BBR can be targeted by this attack.
Attack 3 – Repeated RTO. A slower sending rate is
caused by an attacker who allows small amounts of data to
be sent in between repeated re-transmission timeouts. This
causes a slower sending rate because the sender does not send
any new data until the RTO expires, and this cycle repeats
throughout the duration of the transmission.
This attack begins by causing the sender to re-transmission
timeout, which is achieved by preventing new data from be-
ing acknowledged. There are four acknowledgment-based
manipulation actions that were found to cause this: dropping,
limiting, stretching and delaying acknowledgments. Drop-
ping acknowledgments simply consists of preventing ACKs
from being delivered to the sender. By limiting acknowledg-
ments, acknowledgment numbers are such that they equal
min(ack, limit). Stretching acknowledgments consists of
forwarding only every nth acknowledgment to the receiver.
Lastly, delaying acknowledgments (also used in attack 2) con-
sists of delaying acknowledgments from reaching the sender.
After the re-transmission timeout is achieved from one
of the above methods, the sender enters exponential backoff
Figure 6: To understand how delayed ACKs affect the sending rate
of BBR and New Reno, this ﬁgure illustrates several time-sequence
graphs, each with a distinct delay time. Each line represents the
cumulative amount of data sent during the connection. Due to differ-
ent underlying techniques, delayed acknowledgments cause BBR’s
sending rate to decay over time, where New Reno maintains a rate.
This is reﬂected in the delivery rate samples (see Algorithm
1) causing the estimated bottleneck bandwidth to increase by
25% as well. BBR maintains the increased sending rate for the
next 8 round-trips until it sends 25% faster again on the next
probing phase. Surprisingly, we discovered that this attack
alone does not cause the sending rate to increase. Even though
this attack caused the acknowledgment rate to increase (due to
a shortened ack_elapsed), delivery rate samples are capped
by the sending rate. It is not until BBR probes for bandwidth
when this attack becomes effective, meaning it is self-induced.
This attack also halves RTprop because data is acknowledged
sooner causing BBR to cycle through the 8 gain phases twice
as fast. In our testing environment, this attack caused BBR to
increase its sending rate from 6 Mbit/sec [11] to 800 Mbit/sec
in less than 2 seconds! Table 4 shows how BBR’s sending
rate exponentially grows in our testing environment.
Attack 2 – Delayed Acknowledgments. A slower send-
ing rate (see Figure 3b) is caused by delaying acknowledg-
ment packets from reaching the sender for a ﬁxed amount of
time, causing the bottleneck bandwidth to be underestimated.
Interestingly, this attack caused BBR’s sending rate to grow
inversely to the optimistic acknowledgments attack. Figure 6
n·ln(delay) ) = O( 1
shows how BBR’s sending rate grows in O(
n )
time (derivative of logdelay n). In general, longer delays (that
do not cause the re-transmission timer to expire) caused BBR
to decrease its sending rate quicker. The amount of data sent
over time is not to be confused with the rate of change of its
sending rate, hence the derivation.
1
This attack causes BBR’s sending rate to sequentially de-
crease over time because when this attack ﬁrst starts, the
sender experiences an initial delay in acknowledgments (equal
to the however long ACKs are delayed for) after which ac-
knowledgments arrive at their natural rate. This causes the
sender to stop sending new data until the ACKs after the de-
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    233
and the attacker optimistically acknowledges some data and
repeats the process. The purpose here is to quickly acknowl-
edge the lost segment in order to cause BBR enter Startup.
When BBR transitions into Startup, its network path model
(BtlBw and RTprop) is discarded, meaning the model must
be rediscovered after each RTO. This attack prevents BBR
from obtaining an opportunity to send data anywhere near the
optimal operating point, resulting in decreased throughput.
Instead, data is sent in bursts with lengthy idling in between.
Figure 3c illustrates these bursts and how the connection
idles until the timeout. At 0 ms, BBR is in Startup, and the
attacker begins to drop, limit, stretch or delay ACKs. As a
result, the sender stops sending data because in_flight has
reached cwnd. When the timeout occurs around 800 ms, the
attacker optimistically acknowledges the lost segment, caus-
ing Startup to be reentered, after which the attack repeats. In
Figure 4c, the victim ﬂow can be seen experiencing timeouts
throughout the entire ﬂow (indicated by the red x-markers),
allowing the background ﬂow to obtain more bandwidth.
Interestingly, the work in [29] reported a similar attack
resulted in a faster sending rate in several cases. They note
how the idle periods in between timeouts is outweighed by
repeatedly entering slow start (where cwnd doubles on each
ACK). This was not the case in our work, however, most likely
due to how we induce timeouts the very instant BBR enters
Startup, resulting in less time for the sending rate to double.
Attack 4 – RTO Stall. In this attack, a stalled connection
is caused by an attacker who causes BBR to enter exponential-
backoff, and prevents it from ever exiting. The attack begins
by causing the sender to timeout by dropping, limiting, stretch-
ing or delaying acknowledgments. After the timeout and when
exponential backoff is entered, the attacker prevents any new
data from being acknowledged, by limiting or dropping ac-
knowledgments. This causes BBR to permanently remain in
exponential backoff because the re-transmitted segment will
never be acknowledged. Additionally, no new data will ever
be sent because in_flight reached cwnd, effectively stalling
the connection. The lost segment will be re-transmitted 15
times (Linux default) with a doubled timeout time in between
each re-transmit. On the 16th re-transmission, the TCP con-
nection would be torn down by the sender (at least 15 minutes,
24 seconds from the ﬁrst re-transmission).
In Figure 3d, the connection stalls around 700 ms after
only sending about 2.5 MB. In Figure 4d, the background
ﬂow is able to obtain greater bandwidth made available by the
victim stalling. It is important to note that this attack is highly
ﬂexible as it can be applied at any time during a connection
and is not limited to a speciﬁc state or time.
Attack 5 – Sequence Number Desync. In this attack, a
stalled connection is caused by an attacker who optimistically
acknowledges lost data causing sequence numbers between
the sender and receiver to de-synchronize. This attack works
by acknowledging a lost segment (that was not actually de-
livered to the receiver). The primary reason why this attack
causes a stalled connection is because the sender is unable
to re-transmit the lost segment because it was removed from
the “re-transmission queue". The TCP write queue retains
segments until they have been acknowledged. As segments
are acknowledged, they are discarded from the queue in order
to free memory.
Next, the sender transmits the next data segments, which
will be delivered out-of-order from the receiver’s point of
view, meaning the receiver will respond by acknowledging
the highest correct data segment received so far. Since the
out-of-order segment the sender sends cannot be acknowl-
edged, it will keep being re-transmitted eventually causing
three duplicate acknowledgments to be sent by the receiver.
When this occurs, the sender will try to re-transmit the lost
segment but cannot because it has been removed from the
re-transmission queue.
In Figure 3e, the connection stalls because while the re-
ceiver sends duplicate acknowledgments (around the 0.2 MB
mark), the sender keeps re-transmitting the same segment
(around the 0.4 MB mark) due to RTOs. Since the receiver
cannot receive that segment because it is out-of-order, it can-
not acknowledge it, causing a stalled connection. In Figure 4e,
the background ﬂow can be seen slight increasing its send-
ing rate because when the victim’s connection stalled, more
bandwidth is made available, allowing the background ﬂow to
send faster. This attack was discovered in [29] for TCP New
Reno which also resulted in a stalled connection.
Although this attack is most effective from an on-path
attacker, this attack could be achieved by an off-path attacker
who successfully learns the victim ﬂow’s sequence number
state. If an off-path attacker successfully crafts and injects an
acknowledgment packet acknowledging a lost segment, then
a stalled connection would result.
Ineffective Attacks Against BBR
4.3