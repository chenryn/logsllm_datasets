# Automatic Hot Patch Generation for Android Kernels

## Authors
- Zhengzi Xu, Nanyang Technological University
- Yulong Zhang, Baidu X-Lab
- Longri Zheng, Baidu X-Lab
- Liangzhao Xia, Baidu X-Lab
- Chenfu Bao, Baidu X-Lab
- Zhi Wang, Florida State University
- Yang Liu, Nanyang Technological University

## Publication Information
- **Conference**: 29th USENIX Security Symposium
- **Date**: August 12â€“14, 2020
- **Proceedings**: [Link](https://www.usenix.org/conference/usenixsecurity20/presentation/xu)
- **ISBN**: 978-1-939133-17-5
- **Open Access Sponsor**: USENIX

## Abstract
The rapid growth of the Android ecosystem has led to fragmentation, with a wide range of (customized) versions of the Android OS in the market. This poses a severe security issue as it is very costly for Android vendors to fix vulnerabilities in their customized Android kernels in a timely manner. The recent development of hot patching techniques provides an ideal solution to this problem, as it can be applied to a wide range of Android kernels without interrupting their normal functionalities. However, current hot patches are written by human experts, which can be time-consuming and error-prone.

To address this, we first study the feasibility of automatic patch generation from 373 Android kernel CVEs ranging from 2012 to 2016. We then develop an automatic hot patch generation tool, named Vulmet, which produces semantic-preserving hot patches by learning from the official patches. The key idea of Vulmet is to use weakest precondition reasoning to transform the changes made by the official patches into hot patch constraints. Our experiments show that Vulmet can generate correct hot patches for 55 real-world Android kernel CVEs. These hot patches do not affect the robustness of the kernels and have low performance overhead.

## 1. Introduction
The Android platform has become the largest mobile platform in the modern mobile device industry. The rapid growth of the Android ecosystem has brought us thousands of new devices with various (customized) Android operating systems, making our lives more convenient. However, most of these devices do not receive timely updates. Table 1 shows the Android version distribution from 500 million devices as of October 2018. The table indicates that the recent release of Android Pie (9.0) in August 2018 reached only a few devices after two months. Additionally, the August 2018 monthly release of the Android Security Bulletin stopped carrying security patches for Android 6.x and below. As a result, based on the statistics in Table 1, 44.72% of Android devices will not receive any security patches unless vendors can upgrade the firmware themselves. Figure 1 provides a detailed analysis of the Android patch level for the same 500 million devices. Only 20% of the devices can catch up with the 3-month-old security patch updates; 60% can catch up with the 6-month-old security patch updates; and 20% have security updates more than a year old.

The low upgrade rate has resulted in legacy Android systems with unpatched vulnerabilities. However, Android vendors are not motivated to fix these vulnerabilities due to the high cost of applying changes to kernels, which requires a tedious testing process to ensure that the changes do not break existing functionalities. Therefore, legacy systems remain vulnerable for a long period, and attackers can easily leverage known vulnerabilities to launch attacks.

To address this threat, significant efforts have been made to patch old Android systems. Among the possible solutions, the hot patch technique provides a convenient way to fix vulnerabilities without interrupting the normal functionalities of the program. It greatly improves user experience by ensuring system security without rebooting the devices. Based on the hot patch idea, Chen et al. proposed an adaptive Android kernel live patching framework. The framework hooks the vulnerable function and applies a pre-constructed hot patch to it.

## 2. Contributions
This paper makes the following contributions:
1. We formally define the process of automatic hot patch generation via learning from the semantics of the official patches. We elicit three requirements and define its operational scope.
2. We conduct an empirical study by collecting, summarizing, and categorizing different real-world Android kernel vulnerability patches based on their behaviors, distilling four insights.
3. We propose an approach to automatically generate hot patches and implement a tool, named Vulmet, to simulate the hot patch generating process and test its performance using vulnerabilities in real-world legacy Android systems. Experiments show that the generated hot patches can fix vulnerabilities with low overheads.

## 3. Problem Definition and Requirements
### 3.1 Problem Definition
We define the automatic hot patch generation problem as follows: Given a vulnerable function \( F \) and its official patch \( P \) at location \( L \), we aim to find a suitable location \( L' \) within the binary form of \( F \) to insert an automatically generated hot patch \( P' \), which has the same semantics as \( P \).

### 3.2 Requirements
To ensure the practicality of the generated hot patches, we set the following requirements:
1. **Semantic Preservation**: The generated hot patch should preserve the semantics of the corresponding official patches, ensuring correctness.
2. **System Robustness**: The generated hot patch should not break the system, ensuring robustness.
3. **Low Overhead**: The generated hot patch should incur low overhead, ensuring efficiency.

### 3.3 Operational Scopes
To ensure the robustness of the patched program, we define three rules to limit the operations used in the hot patches:
1. **Placement Rule**: The patch can only be placed at the beginning or end of functions or at the beginning or end of function calls.
2. **Memory Access Rule**: The patch can read valid memory content but is prohibited from modifying the contents.
3. **Patch Size Rule**: The patch can only fix vulnerabilities with small changes and within one function.

### 3.4 Real-World Example
We provide a real-world example to demonstrate the concept of converting an official patch into a hot patch. Figure 3 shows the official source code patch for CVE-2015-8940 in the Android Qualcomm msm kernel 3.10. This patch fixes an integer overflow bug in the function `q6lsm_snd_model_buf_alloc` by adding a sanity check at lines 15 to 17.

To convert this into a hot patch, we follow the Placement Rule to hook the beginning of the function at line 1. We then need to find a semantically equivalent patch at this point. The official patch contains a sanity check for variables `len`, `SIZE_MAX`, `pad_zero`, and `cal_block->cal_data.size`. Not all of these variables' values are known at the beginning of the function. To build a semantically equivalent patch, we use variables whose values are known and apply weakest precondition reasoning to determine the relationships between the input parameters and the sanity check variables. Table 2 shows the relationships between the variables.

## 4. Conclusion
In this paper, we present Vulmet, an automatic hot patch generation tool for Android kernels. Our tool leverages weakest precondition reasoning to transform official patches into hot patches, ensuring semantic preservation, robustness, and low overhead. Experiments demonstrate that Vulmet can effectively generate hot patches for 55 real-world Android kernel CVEs, addressing the challenge of timely and efficient vulnerability patching in the fragmented Android ecosystem.