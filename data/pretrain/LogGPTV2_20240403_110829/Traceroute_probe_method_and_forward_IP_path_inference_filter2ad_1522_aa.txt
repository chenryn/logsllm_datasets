# Traceroute Probe Method and Forward IP Path Inference

**Authors:**
- Matthew J. Luckie, Department of Computer Science, University of Waikato, Hamilton, New Zealand
- Young Hyun, CAIDA, San Diego, La Jolla, CA
- Bradley Huffaker, CAIDA, San Diego, La Jolla, CA, University of California

## Abstract
Various traceroute probe methods have been developed, each designed to perform better in scenarios where others fail. This paper examines the impact of different probe methods on the inferred forward IP path by comparing paths inferred using UDP, ICMP, and TCP-based traceroute methods against (1) a list of routable IP addresses, (2) a list of known routers, and (3) a list of well-known websites. We further compare these methods using seven months of macroscopic Internet topology data collected by CAIDA’s Archipelago infrastructure.

Our findings indicate significant differences in the observed topology using different probe methods. Specifically, ICMP-based traceroute methods tend to reach more destinations and collect evidence of a greater number of AS links. UDP-based methods infer the greatest number of IP links, despite reaching the fewest destinations. We hypothesize that some per-flow load balancers implement different forwarding policies for TCP and UDP, and we conduct a specific experiment to confirm this hypothesis.

## Categories and Subject Descriptors
C.4 [Performance of Systems]: Measurement techniques

## General Terms
Measurement

## Keywords
Traceroute, Macroscopic Internet Topology Discovery

## 1. Introduction
Traceroute is one of the most widely used measurement tools, essential for diagnosing problems on Internet paths and crucial for researchers developing or validating models of Internet reachability, performance, structure, and growth. Van Jacobson first implemented traceroute in 1988, and since then, various developers have added optional extensions to support operational infrastructure management and troubleshooting needs. For example, NANOG traceroute has extensions for parallel probing, path MTU discovery, and capturing information about MPLS, AS paths, and TOS fields. Other probe methods, such as tcptraceroute and Paris traceroute, have been developed to extend the visibility and accuracy of gathered IP path data.

In this study, we compare six different probe methods in three scenarios: to a random list of routable IP addresses, to the top 500 websites as reported by Alexa, and to a list of routers that recently responded to our probes. The first scenario reveals differences in the effectiveness of various probe methods for large-scale Internet topology mapping. The second and third scenarios illustrate what an operator might encounter when using a specific probe method to debug a fault. We publicly release our dataset.

We further compare two of the methods by examining the macroscopic Internet topology data collected by CAIDA’s Archipelago infrastructure. This data complements the data collected for the comparison of six methods by providing a longer time period (7 months), a larger number of vantage points (21), and a larger number of destinations (every routed /24, or 7 million /24s).

### 1.1 Overview of Traceroute Probe Methods
Van Jacobson’s original traceroute tool sends UDP probes to high-numbered destination ports. It increments the destination port number with each probe so that it can match up responses to probes. Traceroute uses the reception of an ICMP port unreachable message to indicate that the destination has been reached and probing is complete. The use of high-numbered ports minimizes the chances of accidentally probing an open service on a machine, which would prevent an ICMP port unreachable message from signaling completion to traceroute. Three other causes for traceroute to terminate are: when an ICMP destination unreachable message is received in response to a probe; when a pre-specified number of hops are probed; or when the user cancels execution. This UDP-based method is the default used by LBL traceroute, found on most Unix systems including MacOS X, FreeBSD, and popular distributions of Linux. By default, this method starts with a destination port value offset from 32768 + 666 + 1 (33435) and increments the port value for each probe. A weakness of this method is that some firewalls block these probes from reaching their intended destination, reducing the utility of traceroute. However, some firewalls by default explicitly permit UDP probes in the order of 100 ports above 33435 to pass, allowing traceroute to continue through.

A second approach is to use ICMP echo request probes instead of UDP probes. Since ICMP does not have the concept of ports, matching probe responses to outgoing probes uses a unique ICMP id/sequence pair in each outgoing (and thus responding) probe. ICMP is the default probe method used by traceroute on Microsoft Windows and was also used by CAIDA’s skitter project. The ICMP method takes advantage of the ICMP protocol facility intended to support lightweight network management; processing an ICMP echo request is simpler than sending an ICMP destination unreachable message in response to UDP or other probes. The disadvantage of the ICMP-based method, like UDP probes to high-numbered ports, is that ICMP echo request probes are also likely to be blocked by firewalls.

A third approach is to use TCP SYN probes to a well-known port, such as the default port for a web server—port 80. First implemented in tcptraceroute, this method sends each probe with a unique IP-ID value to match responses with sent probes. The advantage of this approach is that TCP SYN probes to port 80 cannot easily be distinguished from normal connection requests to web servers and are less likely to be blocked by a firewall, thus revealing more of the forward IP path. However, some firewalls may be configured to block TCP packets that do not belong to an established TCP conversation.

Paris traceroute implements two additional variations of the ICMP and UDP probe methods, referred to as ICMP-Paris and UDP-Paris. Paris traceroute avoids measurement anomalies caused by load balancing routers by ensuring the first four bytes of the IP payload, often used by a load balancing device to select the next-hop, are the same for each probe in a single traceroute sequence. Convincing a load balancer that two packets should be sent along the same path reduces the likelihood of reporting false IP paths and encountering false loops.

For UDP probes to belong to the same flow and be treated as such by load balancers, the UDP source and destination ports must be identical. As this constraint prevents the use of the UDP destination port to match responses with sent probes, Paris traceroute manipulates the UDP payload so that the UDP checksum value can be used to perform this matching. Since some systems use the UDP checksum field for temporary storage when processing a UDP packet, and NAT boxes irreversibly change the checksum when rewriting packet headers anyway, Paris traceroute also uses the IP-ID field as a backup key in the matching process. For ICMP probes to belong to the same flow, the ICMP type, code, and checksum values must remain the same. The ICMP id and sequence fields continue to be used as the probe identifier, and the ICMP payload is constructed so the checksum is the same for each probe.

There are additional traceroute probe methods and techniques that we do not consider in this paper. For example, tcptraceroute can send various combinations of TCP flags in addition to the SYN case described. Paratrace uses an existing TCP session with a target to send TTL-limited retransmissions of data packets to the destination. As the retransmissions used for measurement cannot easily be distinguished from genuine TCP retransmissions, the tcptraceroute probes in paratrace are able to traverse firewall systems that would otherwise block these probes. This technique was first used for Internet topology discovery in Sidecar. Unfortunately, the requirement to have an existing TCP connection over which to execute the measurement renders this method difficult to apply to macroscopic Internet topology discovery.

### 1.2 Contributions of This Work
This paper compares the pictures of Internet topology that emerge by using different traceroute probe methods popular in the Internet research and operations communities. We corroborate the benefits of Paris traceroute reported in “Avoiding traceroute anomalies with Paris traceroute,” particularly the benefits of reducing the number of false loops inferred. We identify the probe methods most useful for inferring IP and AS links and introduce techniques for identifying spoofed traceroute responses and inference of firewall positioning.

The rest of this paper is organized as follows. Section 2 describes the specific traceroute probe methods evaluated, the evaluation metrics considered, the probing tool, and probing sites. Section 3 examines the agreement of the forward IP paths inferred per probe method, providing data on firewall placement in relation to the destinations probed and data on spoofed responses. Section 4 analyzes seven months of macroscopic Internet topology data collected by the Archipelago infrastructure. Finally, Section 5 discusses related work, and Section 6 concludes.

## 2. Methodology

### 2.1 Traceroute Probe Methods
The first five traceroute probe methods described in Section 1.1 are implemented in scamper, a parallelized Internet measurement utility similar to skitter, optimized for large-scale Internet topology discovery. Scamper aims to fill a specified packets-per-second rate and conducts measurements to multiple destinations in parallel as required. In this work, we infer the forward IP path by sending up to two probes per hop and halt probing a destination for any of four reasons: upon receiving a response with a probed destination address as the source of the reply unless that response is a time exceeded message; upon receiving an ICMP destination unreachable message; upon receiving a response with an address that appears earlier in the path unless the reply sequence indicates a case of zero-ttl forwarding; or after five unresponsive hops. When no matching response is received from five consecutive hops, we send up to two last-ditch probes with an IP-TTL value of 255, attempting to ascertain if anything further down the path might answer. Any response to these final two probes is stored as ancillary data, but no further probing of the path takes place, and the recorded reason for halting traceroute (five consecutive unresponsive hops) is not changed.

We experimented with a sixth probe method called UDP-Paris DNS, which sends 130-byte UDP packets from source port 53 and includes a well-formed DNS response payload. The motivation of UDP-Paris DNS is to extend the reach of traceroute past firewalls that might permit specific protocols inwards, such as DNS, while blocking others. The payload is derived from the response packet solicited by requesting an A record for localhost from a.root-servers.net. The first two bytes of the UDP payload, corresponding to the DNS ID field, change with each traceroute probe so that the UDP checksum can be manipulated to be the probe’s sequence number.

Table 1 summarizes our six traceroute probe methods. We randomly order the sequence of probe methods for each destination to avoid persistently biasing the results of any particular method. To avoid biasing the next-hop decision a load-balancing router might make when forwarding a set of our traceroute measurements to a single destination, we also randomize the ephemeral source port chosen for each UDP, UDP-Paris, and TCP traceroute to one of 16 values, and randomize the ICMP checksum chosen for each ICMP-Paris traceroute to one of 16 values. A fixed delay of five seconds is inserted between completing one traceroute method and starting the next. Finally, scamper is configured to probe at 100 packets per second.

| **Method** | **Specifcs** |
|------------|--------------|
| 1. UDP     | udp-dst-port 33435 + index, udp-src-port ephemeral |
| 2. UDP-Paris | udp-dst-port 33435, udp-src-port ephemeral, ip-id and udp-checksum as index |
| 3. UDP-Paris DNS | udp-dst-port 33435, udp-src-port 53, ip-id and udp-checksum as index, DNS payload |
| 4. ICMP    | icmp-sequence as index, icmp-checksum variable |
| 5. ICMP-Paris | icmp-sequence as index, icmp-checksum constant |
| 6. TCP port 80 | tcp-dst-port 80, tcp-src-port ephemeral, ip-id as index |

### 2.2 Traceroute Method Evaluation Metrics
This section describes four metrics we use to evaluate the effectiveness of the various probe methods.

#### 2.2.1 Destinations Reached
We consider a destination reached if:
- An ICMP port unreachable message is received in response to a UDP or TCP probe,
- A TCP packet is received from the destination in response to a TCP probe,
- An ICMP echo reply packet is received from the destination in response to an ICMP echo request packet, or
- An ICMP destination unreachable message is received with a source address matching the destination address probed.

Reaching a destination is a more efficient form of halting than timing out due to a lack of responses. Also, by reaching the destination, we can obtain the RTT and forward IP path length.

Note that some hosts will spoof the source address of an ICMP response, leading to an overestimation of the number of destinations reached. It is not possible to identify all instances of source address spoofing, though we can identify some behavior indicative of spoofing in our datasets, which we discuss in Section 3.

#### 2.2.2 Complete IP Paths
An IP path is complete if the destination is reached and there is a response from all intermediate hops; that is, there are no gaps in the path. Complete paths are desirable because they reduce uncertainties in topology analysis. Complete paths are also more time-efficient to infer than paths with unresponsive hops.

#### 2.2.3 Unique IP Links
This metric counts the unique IP links (i.e., pairs of adjacent IP hops) seen in traces. All other things being equal, the more IP links we have, the more accurately and comprehensively we can infer router-level connectivity and AS relationships. Thus, one indication of a method’s power is its ability to accurately infer IP links. In this work, however, we do not explicitly validate the inferred links but simply use the raw quantity of coverage as the measure of success.

We expect to see variation in each method’s ability to infer IP links. For example, some paths load balance UDP packets on a per-flow basis but not ICMP packets. Through the re-probing of common path segments between destinations, UDP and TCP probes may reveal alternative IP paths. Similarly, some methods will vary in their ability to infer IP hops where a firewall discards particular protocols and packet types.

The number of IP links and the number of complete IP paths are related metrics, but they address different concerns. Although a complete IP path is desirable, completeness is not a requirement for many analyses, and a traceroute method may produce a large number of IP links without necessarily producing a large number of complete paths because of the stricter conditions for complete paths.

#### 2.2.4 Unique AS Links
This metric counts the unique AS links inferred from measured IP paths. To derive AS links, we first convert the IP paths to AS paths by mapping IP addresses to ASes using a BGP table dump obtained from RouteViews. Although complete validation of AS link inferences requires communication with the owner of the ASes in question, a probing method is typically considered superior if it is able to infer more unique AS links consistent with publicly available BGP data.

### 2.3 Traceroute Vantage Points
Table 2 shows the eight hosts used as traceroute vantage points. The host names consist of a 3-letter airport code and a 2-letter country code. These hosts, located at geographically and topologically diverse points in the Internet, are part of CAIDA’s Archipelago (Ark) measurement infrastructure. One of Ark’s tasks is to conduct active probing for CAIDA’s macroscopic Internet topology mapping project.

| **Host** | **Location** |
|----------|--------------|
| cbg-uk   | University of Cambridge, Cambridge, England |
| nrt-jp   | Asia-Pacific Advanced Network (APAN), Tokyo, Japan |
| syd-au   | AARNet, Sydney, Australia |
| bcn-es   | Universitat Politècnica de Catalunya, Barcelona, Spain |
| hel-fi   | Helsinki University of Technology (TKK), Espoo, Finland |
| cjj-kr   | KREONet2, Daejeon, Korea |
| iad-us   | ARIN, Bethesda, Maryland |
| san-us   | CAIDA, San Diego, California |

### 2.4 Destination Address Lists
We review the three different destination address lists used in our probing experiments.

#### 2.4.1 Random Routable IP Address List
The first address list consists of 261,530 random IP addresses contained in advertised prefixes found in RouteViews BGP tables. The objective of using this list is to compare the utility of various traceroute probe methods to large-scale Internet topology mapping projects. Table 3 lists several well-known topology measurement projects and their methods.

| **Project** | **Method** |
|-------------|------------|
| CAIDA Ark/Scamper | ICMP-Paris, UDP |
| CAIDA Skitter | ICMP |
| DIMES | ICMP primary, UDP backup |
| iPlane | ICMP-Paris, UDP, ICMP |

---

This revised version maintains the original content while improving clarity, coherence, and professional presentation.