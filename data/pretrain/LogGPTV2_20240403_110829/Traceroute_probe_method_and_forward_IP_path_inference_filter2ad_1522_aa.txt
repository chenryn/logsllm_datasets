title:Traceroute probe method and forward IP path inference
author:Matthew J. Luckie and
Young Hyun and
Bradley Huffaker
Traceroute Probe Method and Forward IP Path Inference
Matthew Luckie
Department of
Computer Science
University of Waikato
Hamilton, New Zealand
PI:EMAIL
Young Hyun
CAIDA
at San Diego
La Jolla, CA
Bradley Huffaker
CAIDA
at San Diego
La Jolla, CA
University of California
University of California
PI:EMAIL
PI:EMAIL
ABSTRACT
Several traceroute probe methods exist, each designed to
perform better in a scenario where another fails. This paper
examines the eﬀects that the choice of probe method has on
the inferred forward IP path by comparing the paths inferred
with UDP, ICMP, and TCP-based traceroute methods to (1)
a list of routable IP addresses, (2) a list of known routers,
and (3) a list of well-known websites. We further compare
methods by examining seven months of macroscopic Internet
topology data collected by CAIDA’s Archipelago infrastruc-
ture.
We found signiﬁcant diﬀerences in the topology observed
using diﬀerent probe methods. In particular, we found that
ICMP-based traceroute methods tend to successfully reach
more destinations, as well as collect evidence of a greater
number of AS links. UDP-based methods infer the greatest
number of IP links, despite reaching the fewest destinations.
We hypothesise that some per-ﬂow load balancers implement
diﬀerent forwarding policies for TCP and UDP, and run a
speciﬁc experiment to conﬁrm this hypothesis.
Categories and Subject Descriptors
C.4 [Performance of Systems]: Measurement techniques
General Terms
Measurement
Keywords
Traceroute, Macroscopic Internet Topology Discovery
1.
INTRODUCTION
Traceroute is one of the most widely used measurement
tools, operationally useful for diagnosing problems on In-
ternet paths, and vital to researchers trying to develop or
validate models of Internet reachability, performance, struc-
ture, and growth. Van Jacobson [1] ﬁrst implemented trace-
route in 1988, but since then various developers have added
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’08, October 20–22, 2008, Vouliagmeni, Greece.
Copyright 2008 ACM 978-1-60558-334-1/08/10 ...$5.00.
optional extensions, typically in support of operational in-
frastructure management and troubleshooting needs. For
example, NANOG traceroute [2] has extensions that support
probing diﬀerent hops in parallel, path MTU discovery [3],
as well as the capture of information about MPLS, AS paths,
and TOS ﬁelds. Other probe methods have been developed
to extend the visibility and accuracy of gathered IP path
data: tcptraceroute [4] and paratrace [5] can provide visi-
bility beyond a ﬁrewall that blocks another probe method
from reaching a destination; Paris traceroute reduces the
likelihood of anomalies such as reporting false IP paths [6].
We compare six diﬀerent probe methods in three scenar-
ios: to a random list of routable IP addresses; to the top 500
websites as reported by Alexa [7]; and to a list of routers that
recently responded to one of our probes. The ﬁrst scenario
reveals diﬀerences in eﬀectiveness of various probe methods
for large-scale Internet topology mapping. The second and
third scenarios illustrate what an operator might encounter
when using a speciﬁc probe method to debug a fault. We
publicly release our dataset1.
We further compare two of the methods by examining the
macroscopic Internet topology data collected by CAIDA’s
Archipelago infrastructure. This data complements the data
collected for the comparison of six methods by providing a
comparison over a longer time period (7 months), a larger
number of vantage points (21), and a larger number of des-
tinations (every routed /24, or 7 million /24’s).
1.1 Overview of traceroute probe methods
Van Jacobson’s original traceroute tool [1] sends UDP
It increments
probes to high-numbered destination ports.
the destination port number with each probe so that it can
match up responses to probes. Traceroute uses the recep-
tion of an ICMP port unreachable message to indicate that
the destination has been reached and probing is complete.
The use of high-numbered ports minimises the chances of
accidentally probing an open service on a machine, which
would prevent an ICMP port unreachable message from sig-
nalling completion to traceroute. Three other causes for
traceroute to terminate are: when an ICMP destination un-
reachable message is received in response to a probe; when
a pre-speciﬁed number of hops are probed; or when the
user cancels execution. This probe method is the default
method used by LBL traceroute, derivatives of which are
found on most Unix systems including MacOS X, FreeBSD,
and popular distributions of Linux. By default, this UDP-
based method starts with a destination port value oﬀset from
1
http://imdc.datcat.org/publication/1-06NL-T
32768 + 666 + 1 (33435) and increments the port value for
each probe. A weakness of this probe method is that some
ﬁrewalls block these probes from reaching their intended des-
tination as a product of blocking unknown traﬃc by default,
reducing the utility of traceroute. However, some ﬁrewalls
by default explicitly permit UDP probes in the order of 100
ports above 33435 to pass, allowing traceroute to continue
through [8].
A second approach is to use ICMP echo request probes in
place of UDP probes. Since ICMP does not have the con-
cept of ports, matching probe responses to outgoing probes
uses a diﬀerent technique: a unique ICMP id/sequence pair
in each outgoing (and thus responding) probe.
ICMP is
the default probe method used by traceroute on Microsoft
Windows, and is also the method that was used by CAIDA’s
skitter project [9]. The ICMP method takes advantage of the
ICMP protocol facility intended to support lightweight net-
work management; processing an ICMP echo request is sim-
pler than sending an ICMP destination unreachable message
in response to UDP or other probes. The disadvantage of the
ICMP-based method – like UDP probes to high-numbered
ports – is that ICMP echo request probes are also thought
likely to be blocked by ﬁrewalls [10].
A third approach is to use TCP SYN probes to a well-
known port, such as the default port for a web server – port
80. First implemented in tcptraceroute [4], this method
sends each probe with a unique IP-ID value to match re-
sponses with sent probes. The advantage of this approach
is that TCP SYN probes to port 80 cannot easily be dis-
tinguished from normal connection requests to web servers,
and so are less likely to be blocked by a ﬁrewall, and thus
more likely to reveal more of the forward IP path. However,
some ﬁrewalls may be conﬁgured to block TCP packets that
do not belong to an established TCP conversation [5, 11].
Paris traceroute [6] implements two additional variations
of the ICMP and UDP probe methods, which we refer to as
ICMP-Paris and UDP-Paris. Paris traceroute avoids mea-
surement anomalies caused by load balancing routers by en-
suring the ﬁrst four bytes of the IP payload – which are
often used by a load balancing device to select the next-hop
– are the same for each probe in a single traceroute sequence.
Convincing a load balancer that two packets should be sent
along the same path reduces the likelihood of reporting false
IP paths and encountering false loops.
For UDP probes to belong to the same ﬂow, and be treated
as such by load balancers, the UDP source and destination
ports must be identical. As this constraint prevents the
use of the UDP destination port to match responses with
sent probes, Paris traceroute manipulates the UDP payload
so that the UDP checksum value can be used to perform
this matching. Since some systems use the UDP check-
sum ﬁeld for temporary storage when processing a UDP
packet [12], and NAT boxes irreversibly change the check-
sum when rewriting packet headers anyway, Paris traceroute
also uses the IP-ID ﬁeld as a backup key in the matching
process. For ICMP probes to belong to the same ﬂow, the
ICMP type, code, and checksum values must remain the
same. The ICMP id and sequence ﬁelds continue to be used
as the probe identiﬁer, and the ICMP payload is constructed
so the checksum is the same for each probe.
There are additional traceroute probe methods and tech-
niques that we do not consider in this paper. For exam-
ple, tcptraceroute can send various combinations of TCP
ﬂags in addition to the SYN case described. Paratrace [5]
uses an existing TCP session with a target to send TTL-
limited retransmissions of data packets to the destination.
As the retransmissions used for measurement cannot eas-
ily be distinguished from genuine TCP retransmissions, the
tcptraceroute probes in paratrace are able to traverse ﬁre-
wall systems that would otherwise block these probes. This
technique was ﬁrst used for Internet topology discovery in
Sidecar [11]. Unfortunately the requirement to have an ex-
isting TCP connection over which to execute the measure-
ment renders this method diﬃcult to apply to macroscopic
Internet topology discovery.
1.2 Contributions of this work
This paper compares the pictures of Internet topology
that emerge by using diﬀerent traceroute probe methods
popular in the Internet research and operations communi-
ties. In doing so, we corroborate the beneﬁts of Paris trace-
route reported in “Avoiding traceroute anomalies with Paris
traceroute” [6], particularly the beneﬁts of reducing the num-
ber of false loops inferred. We identify the probe methods
most useful for inferring IP and AS links, and introduce
techniques for identifying spoofed traceroute responses and
inference of ﬁrewall positioning.
The rest of this paper is organised as follows. Section 2 de-
scribes the speciﬁc traceroute probe methods evaluated, the
evaluation metrics considered, the probing tool, and probing
sites. Section 3 examines the agreement of the forward IP
paths inferred per probe method. In doing so, we provide
data on ﬁrewall placement in relation to the destinations
probed, as well as data on spoofed responses. Section 4 anal-
yses seven months of macroscopic Internet topology data col-
lected by the Archipelago infrastructure. Finally, Section 5
discusses related work, and Section 6 concludes.
2. METHODOLOGY
2.1 Traceroute probe methods
The ﬁrst ﬁve traceroute probe methods described in Sec-
tion 1.1 are implemented in scamper [13], a parallelised In-
ternet measurement utility similar to skitter [9] that is op-
timised for large-scale Internet topology discovery. Rather
than consider one traceroute task at a time, scamper aims
to ﬁll a speciﬁed packets-per-second rate and conducts mea-
surements to multiple destinations in parallel as required.
In this work, we infer the forward IP path by sending up to
two probes per hop and halt probing a destination for any
of four reasons: upon receiving a response with a probed
destination address as the source of the reply unless that re-
sponse is a time exceeded message; upon receiving an ICMP
destination unreachable message; upon receiving a response
with an address that appears earlier in the path unless the
reply sequence indicates a case of zero-ttl forwarding [6]; or
after ﬁve unresponsive hops. When no matching response is
received from ﬁve consecutive hops, we send up to two last-
ditch probes with an IP-TTL value of 255, attempting to
ascertain if anything further down the path might answer.
Any response to these ﬁnal two probes is stored as ancillary
data, but no further probing of the path takes place, and
the recorded reason for halting traceroute (ﬁve consecutive
unresponsive hops) is not changed.
We experimented with a sixth probe method we call UDP-
Paris DNS which sends 130-byte UDP packets from source
Method
Speciﬁcs
Table 1: Traceroute probe methods compared
1. UDP
2. UDP-Paris
3. UDP-Paris DNS
4.
ICMP
5.
ICMP-Paris
6. TCP port 80
udp-dst-port 33435 + index, udp-src-port ephemeral
udp-dst-port 33435, udp-src-port ephemeral, ip-id and udp-checksum as index
udp-dst-port 33435, udp-src-port 53, ip-id and udp-checksum as index, DNS payload
icmp-sequence as index, icmp-checksum variable
icmp-sequence as index, icmp-checksum constant
tcp-dst-port 80, tcp-src-port ephemeral, ip-id as index
port 53 and includes a well-formed DNS response payload.
The motivation of UDP-Paris DNS is to extend the reach of
traceroute past ﬁrewalls that might permit speciﬁc protocols
inwards, such as DNS, while blocking others. The payload
is derived from the response packet solicited by requesting
an A record for localhost from a.root-servers.net. The
ﬁrst two bytes of the UDP payload, corresponding to the
DNS ID ﬁeld [14], change with each traceroute probe so that
the UDP checksum can be manipulated to be the probe’s
sequence number.
Table 1 summarises our six traceroute probe methods. We
randomly order the sequence of probe methods for each des-
tination to avoid persistently biasing the results of any par-
ticular method. In order to avoid biasing the next-hop de-
cision a load-balancing router might make when forwarding
a set of our traceroute measurements to a single destina-
tion, we also randomise the ephemeral source port chosen
for each UDP, UDP-Paris, and TCP traceroute to one of 16
values, and randomise the ICMP checksum chosen for each
ICMP-Paris traceroute to one of 16 values. A ﬁxed delay of
ﬁve seconds is inserted between completing one traceroute
method and starting the next. Finally, scamper is conﬁgured
to probe at 100 packets per second.
2.2 Traceroute method evaluation metrics
This section describes four metrics we use to evaluate the
eﬀectiveness of the various probe methods.
2.2.1 Destinations reached
We consider a destination reached if:
(cid:129) an ICMP port unreachable message is received in re-
sponse to a UDP or TCP probe,
(cid:129) a TCP packet is received from the destination in re-
sponse to a TCP probe,
(cid:129) an ICMP echo reply packet is received from the des-
tination in response to an ICMP echo request packet,
or
(cid:129) an ICMP destination unreachable message is received
with a source address matching the destination address
probed.
Reaching a destination is a more eﬃcient form of halting
than timing out due to a lack of responses. Also, by reaching
the destination, we can obtain the RTT and forward IP path
length.
Note that some hosts will spoof the source address of an
ICMP response, leading to an overestimation of the number
of destinations reached.
It is not possible to identify all
instances of source address spooﬁng, though we can identify
some behaviour indicative of spooﬁng in our datasets, which
we discuss in Section 3.
2.2.2 Complete IP paths
An IP path is complete if the destination is reached and
there is a response from all intermediate hops; that is, there
are no gaps in the path. Complete paths are desirable be-
cause they reduce uncertainties in topology analysis. Com-
plete paths are also more time eﬃcient to infer than paths
with unresponsive hops.
2.2.3 Unique IP links
This metric counts the unique IP links (that is, pairs of
adjacent IP hops) seen in traces. All other things being
equal, the more IP links we have, the more accurately and
comprehensively we can infer router-level connectivity and
AS relationships. Thus one indication of a method’s power is
its ability to accurately infer IP links. In this work, however,
we do not explicitly validate the inferred links but simply use
the raw quantity of coverage as the measure of success.
We expect to see variation in each method’s ability to infer
IP links. For example, some paths load balance UDP pack-
ets on a per-ﬂow basis but not ICMP packets [15]. Through
the re-probing of common path segments between desti-
nations, UDP and TCP probes may reveal alternative IP
paths. Similarly, some methods will vary in their ability to
infer IP hops where a ﬁrewall discards particular protocols
and packet types.
The number of IP links and the number of complete IP
paths are related metrics, but they address diﬀerent con-
cerns. Although a complete IP path is desirable, complete-
ness is not a requirement for many analyses, and a traceroute
method may produce a large number of IP links without nec-
essarily producing a large number of complete paths because
of the stricter conditions for complete paths.
2.2.4 Unique AS links
This metric counts the unique AS links inferred from mea-
sured IP paths. To derive AS links, we ﬁrst convert the IP
paths to AS paths by mapping IP addresses to ASes using a
BGP table dump obtained from RouteViews [16]. Although
complete validation of AS link inferences requires commu-
nication with the owner of the ASes in question, a probing
method is typically considered superior if it is able to in-
fer more unique AS links consistent with publicly available
BGP data [17].
2.3 Traceroute vantage points
Table 2 shows the eight hosts used as traceroute vantage
points. The host names consist of a 3-letter airport code and
a 2-letter country code. These hosts, located at geographi-
cally and topologically diverse points in the Internet, are a
part of CAIDA’s Archipelago (Ark) measurement infrastruc-
ture [18]. One of Ark’s tasks is to conduct active probing for
CAIDA’s macroscopic Internet topology mapping project.
Table 2: Traceroute vantage points used. These
hosts are distributed across the globe; most are
hosted at educational institutions.
Host
Location
cbg-uk University of Cambridge
nrt-jp
Cambridge, England
Asia-Paciﬁc Advanced Network (APAN)
Tokyo, Japan
syd-au AARNet
Sydney, Australia
bcn-es Universitat Polit`ecnica de Catalunya
hel-ﬁ
cjj-kr
Barcelona, Spain
Helsinki University of Technology (TKK)
Espoo, Finland
KREONet2
Daejeon, Korea
iad-us ARIN
Bethesda, Maryland
san-us CAIDA
San Diego, California
Table 3: Traceroute methods used by various topol-
ogy mapping projects. Most use combinations of
ICMP and UDP methods. Ark used UDP prior to
Nov 2, 2007 before switching to ICMP-Paris. iPlane
uses ICMP-Paris from PlanetLab nodes. iPlane also
uses traceroute measurements obtained from public
traceroute servers which use undisclosed methods,
though most likely UDP or ICMP.
Project
Method
CAIDA Ark/Scamper
CAIDA Skitter
DIMES
iPlane
ICMP-Paris, UDP
ICMP
ICMP primary, UDP backup
ICMP-Paris, UDP, ICMP
2.4 Destination address lists
We review the three diﬀerent destination address lists used
in our probing experiments.
2.4.1 Random routable IP address list
The ﬁrst address list consists of 261,530 random IP ad-
dresses contained in advertised preﬁxes found in RouteViews
BGP tables [16]. The objective of using this list is to com-
pare the utility of various traceroute probe methods to large-
scale Internet topology mapping projects. Table 3 lists sev-
eral well-known topology measurement projects and their