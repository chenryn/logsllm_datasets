terialized view. A dynamic programming knapsack algo- view selection used actual query costs. The actual query
rithmcanthenbeusedtocalculatewhichmaterializedviews costswerecomputedbyfirstrunningthequerytwiceandig-
shouldbeaddedgiventhevaluescalculatedintheequation noringtheresultsandimmediatelyrunningthequerythree
aboveandtheweightdefinedtobetheamountofdiskspace moretimesandtakingtheaverageoftheselastthreerunsto
reservedforthematerializedviews. Notethatthisalgorithm be the cost. An overview of the results is shown in Table 1
canbeimprovedbyrecalculatingthecostreductionofeach The10%thresholdresultedinthegenerationofthreecan-
materialized view each time a materialized view is added didatematerializedviews. Ofthetwenty-twoqueriesinour
so as not to include cost benefits of materialized views that workload, eight queries could be written using at least one
willnotbeusedduetootherviewsgivinghighercostreduc- ofthethreegeneratedmaterializedviews. Fiveofthequery
tions(i.e. ifmaterializedviewAimprovesqueryq byxand rewritesloweredthecostofthequeryusingtwoofthethree
materialized view B improves query q by y and A is added generated candidate materialized views. Four of the five
by knapsack algorithm and x > y then do not include y in improved query rewrites were from one of the materialized
the benefit for B since it will not be used). However, when views while only one was from the other materialized view
the disk space allocated for the materialized view is very andresultedinthelowestcostimprovement(6%). Thetwo
large dynamic programming cannot be used. In this case, materialized views require 1.85 GB on disk.
aninitialsolutioncanbefoundusingagreedyalgorithmon The2%thresholdresultedinthegenerationofeightcan-
metric value of mv. First, select materialized views with didatematerializedviews. Ofthetwenty-twoqueriesinour
high values as disk space allows. After findingan initial so- workload, ten queries could be written using at least one
lution, the solution can be justed by randomly doing swaps of the eight generatedcandidatematerializedviews. Of the
to possibly get better knapsack results. Choose the result ten queries that were rewritten, eight of the queries had re-
with the highest value as defined above. duced costs by using a materialized view with performance
improvements ranging from 6% to 57%. Four of the eight
generatedmaterializedviewswereselectedandrequired2.7
6. EXPERIMENTS
GB on disk.
7. FUTUREWORK views, and select the best one. The experiments in TPC-H
OurgoalistobuildanopensourceprojectforPostgreSQL showthatonlyusingmaterializedviewscanstillimprovethe
tosupportautomaticphysicaldesignadvisor. Upuntilnow, performancesignificantly. TPC-Hhasmanyqueriesthatare
we have implemented several components such as a parser, multi-blockandcannotusethematerializedviewswell. But
a materialized view generator, SQL rewriting, and mate- in real world, single-block query is more common, and can
rialized view selection. These parts cooperate well under getmorebenefitsfrommaterializedviews. Insummary,this
PostgreSQL. The next step is to improve the performance open source project is really worth exploring. We first can
for each component. In materialized view generation, we breakthedominationofthesecommercialdatabasesinthis
need to follow the idea to generate all the available materi- topic;secondcanpushPostgreSQLtodevelopthematerial-
alized views, and then select the best materialized view for ized view feature; third can let researchers know that there
each query. After these, we can use a“merge”algorithm to are still many remaining problems in this topic. Accord-
improve the performance for the whole workload. Further- ing the future work description, we will continue to pursue
more,howtogeneratematerializedviewsthatareusefulfor our long-term goal of a complete automatic physical design
the whole workload is a really open problem. We can try advisor for PostgreSQL.
new algorithms. It is easy to plug in new algorithms in our For more information on this project including the test
design. database and the client code feel free the authors by the
Second, the PostgreSQL optimizer must be modified to emails listed on the first page.
support“What-If”mode. Itneedstochangethesourcefiles
ofPostgreSQL.FirstweshouldmodifyPostgreSQLtoallow 9. REFERENCES
user to create hypothetical indexes and materialized views.
For these hypothetical physical structure, PostgreSQL only [1] MaterializedViews.
http://wiki.postgresql.org/wiki/Materialized_Views.
keepsstatisticsinformation,butnophysicalstructures. The
[2] PostgreSQL9.2.4Documentation-UsingEXPLAIN.
commend should like
http://www.postgresql.org/docs/9.2/static/
using-explain.html.
CREATE INDEX A on Table WITH STATISTICS_ONLY;
[3] TPC-Hisanad-hoc,decisionsupportbenchmark.
CREATE MATERIALIZED VIEW B as Query
http://www.tpc.org/tpch/.
WITH STATISTICS_ONLY; [4] A.Aboulnaga,P.J.Haas,S.Lightstone,G.M.Lohman,
V.Markl,I.Popivanov,andV.Raman.Automated
ThisstepisjusttoremovesomethingfromCREATEsource statisticscollectionindb2udb.InVLDB,pages1146–1157,
code. The second step is to modify optimizer to use these 2004.
hypotheticalphysicalstructures. Itshouldallowusertode- [5] R.AgrawalandR.Srikant.Fastalgorithmsformining
fine the running mode, e.g., the hypothetical mode or the associationrulesinlargedatabases.InVLDB,pages
regular mode. Under hypothetical mode, all the datasets 487–499,1994.
[6] S.Agrawal,S.Chaudhuri,L.Koll´ar,A.P.Marathe,V.R.
and are fixed. PostgreSQL only accepts: (1) the CREATE
Narasayya,andM.Syamala.Databasetuningadvisorfor
and DELETE statements to create and delete hypothetical
microsoftsqlserver2005.InVLDB,pages1110–1121,2004.
physical structure; (2) the EXPLAIN query to get the esti-
[7] S.Agrawal,S.Chaudhuri,andV.R.Narasayya.
mated cost. The benefit of“What-if”mode is reducing the Automatedselectionofmaterializedviewsandindexesin
time to measure the importance of materialized views. We sqldatabases.InVLDB,pages496–505,2000.
donotneedtocreatetheactualphysicalstructure,butjust [8] S.Agrawal,E.Chu,andV.R.Narasayya.Automatic
statisticsinformationusedbyoptimizer. Thedifficultofthis physicaldesigntuning: workloadasasequence.In
SIGMOD Conference,pages683–694,2006.
point is that we need to be more familiar with PostgreSQL
[9] S.Agrawal,V.R.Narasayya,andB.Yang.Integrating
source code and modify carefully.
verticalandhorizontalpartitioningintoautomatedphysical
Third, it requires to implement the components to rec-
databasedesign.InSIGMOD Conference,pages359–370,
ommend indexes on both original tables and materialized 2004.
views. Allthepreviouspapersshowthatmaterializedviews [10] E.Baralis,S.Paraboschi,andE.Teniente.Materialized
with indexes can improve more performance. The three viewsselectioninamultidimensionaldatabase.InVLDB,
commercial databases all implement index advisors, we can pages156–165,1997.
implement a similar one under PostgreSQL. Indexes advi- [11] N.BrunoandS.Chaudhuri.Physicaldesignrefinement:
The”merge-reduce”approach.InEDBT,pages386–404,
sorunderPostgreSQLshouldbemucheasierthanmaterial-
2006.
izedviewsadvisorsincePostgreSQLsupportsindexfeature
[12] D.Chak.MaterializedViewsthatReallyWork.http:
pretty well. After create indexes, optimizer can automati-
//www.pgcon.org/2008/schedule/events/69.en.html,
cally choose the best index for each query. So it does not 2008.
requirequeryrewritingcomponentinadvisoratleast. After [13] M.B.ChaudhariandS.W.Dietrich.Metadataservicesfor
finish index advisor, we can joint enumeration of candidate distributedeventstreamprocessingagents.InSEDE,pages
indexes and materialized views. 307–312,2010.
[14] S.Chaudhuri,E.Christensen,G.Graefe,V.R.Narasayya,
andM.J.Zwilling.Self-tuningtechnologyinmicrosoftsql
8. CONCLUSION
server.IEEE Data Eng. Bull.,22(2):20–26,1999.
This open source project borrows some ideas from the [15] S.Chaudhuri,M.Datar,andV.R.Narasayya.Index
selectionfordatabases: Ahardnessstudyandaprincipled
three commercial databases: Microsoft Server, IBM DB2,
heuristicsolution.IEEE Trans. Knowl. Data Eng.,
and Oracle. We have implemented almost all the compo-
16(11):1313–1323,2004.
nentsexcept“What-If”mode. Ourcomponentsrunperfectly
[16] S.Chaudhuri,A.C.K¨onig,andV.R.Narasayya.Sqlcm: A
underPostgreSQL.Wecangeneratesomesimplecandidate continuousmonitoringframeworkforrelationaldatabase
materializedviews,rewritethequeriestoutilizematerialized engines.InICDE,pages473–484,2004.
[17] S.Chaudhuri,R.Krishnamurthy,S.Potamianos,and pages20–31,2002.
K.Shim.Optimizingquerieswithmaterializedviews.In [42] J.Zhou,P.-A.Larson,andH.G.Elmongui.Lazy
ICDE,pages190–200,1995. maintenanceofmaterializedviews.InVLDB,pages
[18] S.ChaudhuriandV.R.Narasayya.Anefficientcost-driven 231–242,2007.
indexselectiontoolformicrosoftsqlserver.InVLDB, [43] D.C.Zilio,J.Rao,S.Lightstone,G.M.Lohman,A.J.
pages146–155,1997. Storm,C.Garcia-Arellano,andS.Fadden.Db2design
[19] S.ChaudhuriandV.R.Narasayya.Autoadmin’what-if’ advisor: Integratedautomaticphysicaldatabasedesign.In
indexanalysisutility.InSIGMOD Conference,pages VLDB,pages1087–1097,2004.
367–378,1998. [44] D.C.Zilio,C.Zuzarte,S.Lightstone,W.Ma,G.M.
[20] S.ChaudhuriandV.R.Narasayya.Automatingstatistics Lohman,R.Cochrane,H.Pirahesh,L.S.Colby,J.Gryz,
managementforqueryoptimizers.IEEE Trans. Knowl. E.Alton,D.Liang,andG.Valentin.Recommending
Data Eng.,13(1):7–20,2001. materializedviewsandindexeswithibmdb2design
[21] S.ChaudhuriandV.R.Narasayya.Self-tuningdatabase advisor.InICAC,pages180–188,2004.
systems: Adecadeofprogress.InVLDB,pages3–14,2007.
[22] S.Chaudhuri,V.R.Narasayya,andR.Ramamurthy.
Estimatingprogressoflongrunningsqlqueries.In
SIGMOD Conference,pages803–814,2004.
[23] S.ChaudhuriandG.Weikum.Foundationsofautomated
databasetuning.InICDE,page104,2006.
[24] B.Dageville,D.Das,K.Dias,K.Yagoub,M.ZaA˜´rt,and
M.Ziauddin.Automaticsqltuninginoracle10g.InVLDB,
pages1098–1109,2004.
[25] B.DagevilleandM.Za¨ıt.Sqlmemorymanagementin
oracle9i.InVLDB,pages962–973,2002.
[26] A.El-Helw,I.F.Ilyas,W.Lau,V.Markl,andC.Zuzarte.
Collectingandmaintainingjust-in-timestatistics.InICDE,
pages516–525,2007.
[27] S.J.Finkelstein,M.Schkolnick,andP.Tiberio.Physical
databasedesignforrelationaldatabases.ACM Trans.
Database Syst.,13(1):91–128,1988.
[28] M.R.Frank,E.Omiecinski,andS.B.Navathe.Adaptive
andautomatedindexselectioninrdbms.InEDBT,pages
277–292,1992.
[29] J.Gardner.PostgreSQL/MaterializedViews.
http://tech.jonathangardner.net/wiki/PostgreSQL/
Materialized_Views.
[30] H.GuptaandI.S.Mumick.Selectionofviewsto
materializeunderamaintenancecostconstraint.InICDT,
pages453–470,1999.
[31] M.HammerandA.Chan.Indexselectioninaself-adaptive
databasemanagementsystem.InSIGMOD Conference,
pages1–8,1976.
[32] Y.KotidisandN.Roussopoulos.Dynamat: Adynamic
viewmanagementsystemfordatawarehouses.In
SIGMOD,pages371–382,1999.
[33] C.MishraandN.Koudas.Alightweightonlineframework
forqueryprogressindicators.InICDE,pages1292–1296,
2007.
[34] H.Mistry,P.Roy,S.Sudarshan,andK.Ramamritham.
Materializedviewselectionandmaintenanceusing
multi-queryoptimization.InSIGMOD,pages307–318,
2001.
[35] S.PapadomanolakisandA.Ailamaki.Autopart:
Automatingschemadesignforlargescientificdatabases
usingdatapartitioning.InSSDBM,pages383–392,2004.
[36] S.RozenandD.Shasha.Aframeworkforautomating
physicaldatabasedesign.InVLDB,pages401–411,1991.
[37] P.Scheuermann,W.-S.Li,andC.Clifton.Watchman: A
datawarehouseintelligentcache.InVLDB,pages51–62,
1996.
[38] M.Stonebraker.Thechoiceofpartialinversionsand
combinedindices.International Journal of Parallel
Programming,3(2):167–188,1974.
[39] D.TheodoratosandT.Sellis.Datawarehouse
configuration.InVLDB,pages126–135,1997.
[40] G.Valentin,M.Zuliani,D.C.Zilio,G.M.Lohman,and
A.Skelley.Db2advisor: Anoptimizersmartenoughto
recommenditsownindexes.InICDE,pages101–110,2000.
[41] G.Weikum,A.M¨onkeberg,C.Hasse,andP.Zabback.
Self-tuningdatabasetechnologyandinformationservices:
fromwishfulthinkingtoviableengineering.InVLDB,