# Kernel pwn CTF 入门 - 1

##### 译文声明
本文为翻译文章，仅供参考。具体内容和含义以原文为准。

## 一、简介
本文将介绍内核CTF（Capture The Flag）的基础知识，主要参考[CTF-Wiki](https://wiki.x10sec.org/pwn/linux/kernel-mode/environment/readme/)。

## 二、环境配置
### 1. 安装调试工具
为了更好地调试内核，推荐使用 `gef` 作为 GDB 插件。根据其他开发者反馈，`peda` 和 `pwndbg` 在内核调试中可能会遇到一些问题。

```bash
pip3 install capstone unicorn keystone-engine ropper
git clone https://github.com/hugsy/gef.git
echo "source $(pwd)/gef/gef.py" >> ~/.gdbinit
```

### 2. 下载并解压 Linux 内核
从清华大学镜像站下载 Linux 内核压缩包，并进行解压：

```bash
curl -O -L https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/linux-5.9.8.tar.xz
unxz linux-5.9.8.tar.xz
tar -xf linux-5.9.8.tar
```

### 3. 配置 Makefile
进入项目文件夹并配置 Makefile：

```bash
cd linux-5.9.8
make menuconfig
```

在 `menuconfig` 中勾选以下选项：
- `Kernel hacking -> Compile-time checks and compiler options -> Compile the kernel with debug info`
- `Kernel hacking -> Generic Kernel Debugging Instruments -> KGDB: kernel debugger`

保存配置后退出。

### 4. 编译内核
开始编译内核（默认 32 位）：

```bash
make -j 8 bzImage
```

**注意：**
- 不建议直接使用 `make -j 8`，因为它会编译很多不必要的组件。
- 如果遇到依赖项缺失的问题，请根据 `make` 的报错信息安装相应的依赖项。例如：

  ```bash
  sudo apt-get install libelf-dev
  ```

- 如果出现以下错误：

  ```bash
  make[1]: *** No rule to make target 'debian/certs/debian-uefi-certs.pem', needed by 'certs/x509_certificate_list'. Stop.
  ```

  解决方法是将 `.config` 文件中的 `CONFIG_SYSTEM_TRUSTED_KEYS` 置空，然后重新编译：

  ```bash
  CONFIG_SYSTEM_TRUSTED_KEYS=""
  ```

当看到以下信息时，表示编译完成：

```bash
Setup is 15420 bytes (padded to 15872 bytes).
System is 5520 kB
CRC 70701790
Kernel: arch/x86/boot/bzImage is ready  (#2)
```

### 5. 构建文件系统
在启动内核前，需要构建一个文件系统，否则内核会因为缺少文件系统而报错：

```bash
Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)
```

首先下载并解压 BusyBox 源代码：

```bash
wget https://busybox.net/downloads/busybox-1.34.1.tar.bz2
tar -jxf busybox-1.34.1.tar.bz2
```

然后配置并编译 BusyBox：

```bash
cd busybox-1.34.1
make menuconfig
make -j 8
```

在 `menuconfig` 中：
- 选择 `Settings -> Build static binary (no shared libs)` 以编译静态链接的文件（因为内核不提供 libc）。
- 可能需要安装 `glibc-static` 依赖项：

  ```bash
  # Red Hat/CentOS 系列
  sudo yum install glibc-static
  # Debian/Ubuntu 系列
  sudo apt-get install libc6-dev
  ```

编译完成后，执行 `make install` 命令，生成 `_install` 目录，该目录将成为我们的根文件系统（rootfs）。

在 `_install` 目录下创建必要的文件夹：

```bash
mkdir -p proc sys dev etc/init.d
```

编写 `init` 脚本：

```bash
#!/bin/sh
echo "INIT SCRIPT"
mkdir /tmp
mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev
mount -t debugfs none /sys/kernel/debug
mount -t tmpfs none /tmp
echo -e "Boot took $(cut -d' ' -f1 /proc/uptime) seconds"
setsid /bin/cttyhack setuidgid 1000 /bin/sh
```

设置 `init` 脚本的权限并将 rootfs 打包：

```bash
chmod +x ./init
find . | cpio -o --format=newc > ../../rootfs.img
```

### 6. 使用 QEMU 启动内核
以下是 CTF wiki 推荐的 QEMU 启动参数：

```bash
qemu-system-x86_64 \
    -m 64M \
    -nographic \
    -kernel ./arch/x86/boot/bzImage \
    -initrd  ./rootfs.img \
    -append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 nokaslr" \
    -smp cores=2,threads=1 \
    -cpu kvm64
```

简化后的启动参数如下：

```bash
qemu-system-x86_64 \
    -kernel ./arch/x86/boot/bzImage \
    -initrd ./rootfs.img \
    -append "nokaslr"
```

**说明：**
- `-kernel` 指定内核镜像文件路径。
- `-initrd` 设置内核启动的内存文件系统。
- `-append "nokaslr"` 关闭 Kernel ASLR 以便于调试内核。

**注意：** 千万不要将 `nokaslr` 错误地输入为 `nokalsr`。

启动成功后，可以使用内置的 shell 进行操作。

## 三、内核驱动的编写与调试

### 1. 构建过程
在 `linux-5.9.8` 项目包下新建一个文件夹 `mydrivers`，并在其中放入一个驱动代码 `ko_test.c`：

```c
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>

MODULE_LICENSE("Dual BSD/GPL");

static int ko_test_init(void) {
    printk("This is a test ko!\n");
    return 0;
}

static void ko_test_exit(void) {
    printk("Bye Bye~\n");
}

module_init(ko_test_init);
module_exit(ko_test_exit);
```

编写 `Makefile` 文件：

```makefile
obj-m += ko_test.o
KDIR := /usr/class/kernel_pwn/linux-5.9.8

all:
	$(MAKE) -C $(KDIR) M=$(PWD) modules

clean:
	rm -rf *.o *.ko *.mod.* *.symvers *.order
```

**注意事项：**
- `Makefile` 文件名中的首字母 `M` 必须大写。
- `obj-m` 要与驱动代码文件名对应。
- 如果 `make` 报错 `missing separator`，请确保 `Makefile` 中的命令前有制表符而不是空格。

最后使用 `make` 编译驱动，生成的文件包括 `ko_test.ko`。

### 2. 运行过程
将新编译出来的 `*.ko` 文件复制到 `busybox-1.34.1/_install` 目录下，并修改 `init` 脚本：

```bash
#!/bin/sh
echo "INIT SCRIPT"
mkdir /tmp
mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs none /dev
mount -t debugfs none /sys/kernel/debug
mount -t tmpfs none /tmp
insmod /ko_test.ko # 加载内核模块
echo -e "Boot took $(cut -d' ' -f1 /proc/uptime) seconds"
setsid /bin/cttyhack setuidgid 0 /bin/sh # 提权至 root
poweroff -f # 设置 shell 退出后关闭机器
```

重新打包 rootfs 并运行 QEMU，然后使用 `dmesg` 命令查看加载的内核模块。

如果希望 QEMU 在当前终端显示启动界面，可以在启动时添加以下参数：

```bash
-nographic
-append "console=ttyS0"
```

这样就可以在当前终端看到内核启动的输出了。