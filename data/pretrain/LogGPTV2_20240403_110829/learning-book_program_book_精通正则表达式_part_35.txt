### 分解URL的Perl代码
下面是一段用于分解URL的Perl代码：
```perl
if ($Surl =~ m{^http://([^/:]+)(?::(\d+))?(/.*)?$}i) {
    my $host = $1;
    my $port = defined($2) ? $2 : 80;  # 如果存在，就使用$2；否则默认为80
    my $path = defined($3) ? $3 : '/';  # 如果存在，就使用$3；否则默认为'/'
    print "Host: $host\n";
    print "Port: $port\n";
    print "Path: $path\n";
} else {
    print "Not an HTTP URL\n";
}
```

### 验证主机名
在上面的例子中，我们使用了`[^/:]+`来匹配主机名。然而，在第2章中（76页），我们使用的正则表达式更为复杂：`[-a-z]+(\.[-a-z]+)*\.(com|edu|info)`。那么，为什么会有这么大的差别呢？

#### 解释
- **简单匹配**：在上面的例子中，我们假设`http://`之后的部分就是主机名，因此使用`[^/:]+`来匹配是合理的。
- **复杂匹配**：而在第2章的例子中，我们需要从随机文本中提取主机名，因此正则表达式必须更加复杂以确保准确性。

### 主机名验证
我们可以用正则表达式来验证主机名。根据规定，主机名由点号分隔的部分组成，每个部分可以包括ASCII字符、数字和连字符，但不能以连字符开头或结尾。以下是一个不区分大小写的正则表达式，用于匹配语义正确的主机名：
```regex
(?i)
(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+
(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|coop|aero|[a-z]{2})
```
为了处理长度限制，每个部分不能超过63个字符，可以将`[-a-z0-9]*`改为`[-a-z0-9]{0,61}`。

### VB.NET中的链接检查程序
下面是一个VB.NET程序，用于列出HTML变量中的链接：
```vb
Imports System.Text.RegularExpressions

' 设置循环中将会遇到的正则表达式
Dim A_Regex As Regex = New Regex("<a\s+[^>]*href\s*=\s*([""'])(?<guts>.*?)\1", RegexOptions.IgnoreCase)

' 现在检查Html变量
Dim CheckA As Match = A_Regex.Match(Html)
While CheckA.Success
    ' 已匹配tag，现在检查URL
    Dim UrlCheck As Match = GutsRegex.Match(CheckA.Groups("guts").Value)
    If UrlCheck.Success Then
        ' 已经匹配完毕，得到URL/link
        Console.WriteLine("Url: " & UrlCheck.Groups("url").Value & " WITH LINK: " & CheckA.Groups("Link").Value)
    End If
    CheckA = CheckA.NextMatch
End While
```

### 在真实世界中提取URL
在Yahoo! Finance工作时，我曾写过一个处理财经新闻和数据的程序。由于接受的数据格式杂乱，从纯文本中识别主机名和URL比验证它们要困难得多。以下是从纯文本中提取几种类型URL（如mailto、http、https和ftp）的示例：

#### 正则表达式
```regex
\b
# 匹配开头部分（proto://hostname，或直接是hostname）
(ftp|http|https)://[-\w]+(\.\w[-\w]*)+
# 或者是用更准确的子表达式找到hostname
(?i:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+
# .com之类的后缀，要求小写
(?-i:com\b|edu\b|biz\b|gov\b|int|info\b|mil\b|net\b|org\b|[a-z]{2}\b)
# 可能出现端口号
(:\d+)?
# 剩下的部分可能出现，以/开头
(/.*?)
```

### 示例5-1：从财经新闻中提取URL
```regex
\b
# 匹配开头部分（proto://hostname，或直接是hostname）
(ftp|http|https)://[-\w]+(\.\w[-\w]*)+
# 或者是用更准确的子表达式找到hostname
(?i:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+
# .com之类的后缀，要求小写
(?-i:com\b|edu\b|biz\b|gov\b|int|info\b|mil\b|net\b|org\b|[a-z]{2}\b)
# 可能出现端口号
(:\d+)?
# 剩下的部分可能出现，以/开头
(/.*?)
```

### 扩展的例子
接下来的几个例子将讲解一些关于正则表达式的技巧，并详细讨论解决方案和错误思路。