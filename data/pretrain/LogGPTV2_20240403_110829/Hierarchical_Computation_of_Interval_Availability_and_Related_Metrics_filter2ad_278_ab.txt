### Introduction

Vectors are utilized to compute various metrics in system models. Specifically, the first reward vector is used to calculate performability and the mean rate to degraded states, while the second reward vector is employed to determine the annual service cost and the mean service call rate. The interval system availability and performability are derived from the expected accumulated rewards over the interval (0, T) using the first two reward vectors, respectively.

The interval system service cost, SSC(T), for (0, T) is calculated as follows:
\[
\text{SSC}(T) = \sum_{i=1}^{M} \text{AVF}_i(T) \times \text{SC}_i
\]
where:
- \(\text{AVF}_i(T)\) denotes the average annual visit frequency to state \(i\) during the interval (0, T),
- \(\text{SC}_i\) represents the third reward value for state \(i\),
- \(M\) is the total number of states in the model.
- \(\text{SC}_i\) can be an actual cost in dollar terms. If set to 1 for states where a service action is taken, the annual service cost is equivalent to the annual service call rate.

### Model with Deferred Repair, Cold Swap, and Non-Transparent Recovery

Figure 2 illustrates a model incorporating deferred repair, cold swap, and non-transparent recovery. When a CPU fails, the system automatically recovers by rebooting, during which the failed CPU is deconfigured, causing a short downtime. If a second CPU fails, a repair action is scheduled at an off-peak time, modeled by a waiting time (\(T_{\text{waiting}}\)).

- **States:**
  - \(O_k\), 1 Dead, and 2 Dead are working states, with the first reward value set to 1 for these states and 0 for others.
  - Initially, there are 10 CPUs, defining full performance as 10 (the second reward value).
  - In degraded states 1 Dead and 2 Dead, the performance numbers are 9 and 8, respectively.
  - The only service state is "Repair," with the third reward value set to 1.

### Model with Deferred Repair, Hot Swap, and Transparent Recovery

Figure 3 shows a model with deferred repair, hot swap, and transparent recovery. When a memory component (e.g., DRAM) fails, the system performs an online automatic recovery by replacing the faulty component with a hot spare and reconstructing data on the spare. A successful recovery does not incur downtime (transparent). If the recovery fails, modeled by \(P_{rf}\) (probability of recovery failure), a system reboot is required, causing a short downtime.

- **Hot Swap:**
  - The repair can be performed concurrently with system operation.
  - An imperfect repair, due to diagnostic problems or human error, causes a downtime (\(T_{\text{restore}}\)), modeled by \(P_{re}\) (probability of repair error).

- **States:**
  - \(O_k\), 1 Dead, 2 Dead, and Repair have no performance degradation (second reward value is 10) because the memory size remains unchanged.
  - There are two service states: "Repair" and "RepairError." One is a working state, and the other is a failure state.

### Integration of Metrics in the Parent System Model

For each submodel, interval metrics associated with the three reward vectors can be evaluated. Figure 4 depicts the System Model, which has three states: Ok (working state), CPU_Fail, and Mem_Fail (both failure states). The gray boxes represent interfaces to submodels where parameter bindings are defined.

- **Parameter Binding:**
  - The overall CPU failure rate (\(\lambda_{\text{cpu}}\)) and repair rate (\(\mu_{\text{cpu}}\)) are bound to the CPU Submodel outputs \(\Lambda_1\) and \(\mu_1\), respectively.
  - Similarly, \(\lambda_{\text{mem}}\) and \(\mu_{\text{mem}}\) are bound to the Memory Submodel outputs \(\Lambda_2\) and \(\mu_2\).

This approach, known as explicit parameter passing, is insufficient for hierarchical modeling when multiple reward vectors generate multiple metrics from the same model. To integrate performability measures from submodels with the parent model, we define performance loss as the maximum performance (largest third reward vector value) minus performability (expected performance evaluated from the model).

If all submodels are independent, the performance loss and service cost generated from the submodels are integratable at the parent model. In RAScad, the following formulas are used to calculate the interval system performance loss (SPL) and system service cost (SSC) for a parent model:

\[
\text{SPL}(T) = \text{SPL}_{\text{cur}}(T) + \sum_{i \in S} C_{2i} \times \text{SPL}_i(T)
\]

\[
\text{SSC}(T) = \text{SSC}_{\text{cur}}(T) + \sum_{i \in S} C_{3i} \times \text{SSC}_i(T)
\]

- \(\text{SPL}_{\text{cur}}(T)\) and \(\text{SSC}_{\text{cur}}(T)\) are the interval system performance loss and service cost evaluated from the current Markov diagram (Fig. 4).
- \(\text{SPL}_i(T)\) and \(\text{SSC}_i(T)\) are the interval system performance loss and service cost evaluated from submodel \(i\).
- \(S\) is the set of submodels of the current model.
- \(C_{2i}\) and \(C_{3i}\) are coefficients defined by the user, allowing contributions from multiple instances of a submodel.

If these coefficients are set to 0, the performance loss and service cost will not be integrated with the parent model. This method of passing parameters is called implicit parameter passing.

### Analysis of Results

We analyze the results generated from the model to demonstrate the necessity of interval availability evaluation and the advantages of hierarchical modeling. Figures 5 and 6 show the increment interval failure rate for the CPU and memory submodels, respectively, with an increment interval (\(\Delta T\)) of ¼ year or a quarter. The failure rate unit is FIT (failures in 10^9 hours).

- **Observations:**
  - The increment interval failure rate changes over time and does not reach the steady-state failure rate within 10 years.
  - This quantity is used as an input parameter to the parent model for constructing the System Model (Fig. 4).

Table 1 compares steady-state and interval availability metrics evaluated from the system level model, showing that steady-state results are higher than transient results for the first 5 years of life. Table 2 further illustrates the slow convergence from interval results to steady-state results, indicating the necessity of interval availability evaluation for models with deferred repair.

### Conclusions

This paper highlights the importance of interval availability metrics for systems incorporating deferred repair, as traditional steady-state availability metrics are no longer sufficient. We made two key contributions:

1. **Proposed and implemented a “divide and conquer” approach** to hierarchical interval availability metrics, allowing the passing of interval availability metrics and general time-dependent failure rates from submodels to the parent model.
2. **Identified methods for explicit and implicit passing of output quantities** from submodels to the parent model, enabling the generation of multiple interval metrics from the same model in one evaluation procedure.

These contributions are crucial for developing highly productive RAS modeling tools.

### Acknowledgments

The authors thank William Bryson and Robert Cypher for raising the issue of the validity of steady-state availability in evaluating RAS architectures and testing interval availability solution methods implemented in RAScad. Dazhi Wang is also acknowledged for implementing the example model discussed in this paper using the SHARPE textual language, which produces the same results as those generated by RAScad.

### References

[References listed as in the original text]

---

This optimized version aims to enhance clarity, coherence, and professionalism, making the content more accessible and understandable.