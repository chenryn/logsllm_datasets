City Forrest
Temporal-Entity
Time-Point{absolute_time}
Time Domain
{year, month, day}Date Time {hour, minute, second}
Event
Calendar-Date
{dayOftheWeek, monthOftheYear}
Scientific-Event{millisecond}
107
Ontologies-based approaches
Shared and non-shared ontologies
Ontologies-based approaches have been suggested
as a solution for information integration that
achieves interoperability*.
Two distinct approaches can be selected to achieve
semantic integration:
The use of shared ontologies
The use of non-shared ontologies
The general approach has been to map the local
terms onto a shared ontology.
*Kashyap and Sheth 1994; Uschold and Gruninger 1996 108
Ontologies-based approaches
Shared Ontologies
Autonomous systems are required to commit to a shared ontology,
and compromises are difficult to maintain when new concepts are
added*.
Even though a shared ontology ensures total integration, constructing
such an ontology is costly, if not impractical.
Data Exchange
Shared Ontologies
*Rodríguez and Egenhofer 2002 109
Ontologies-based approaches
Non-Shared Ontologies
Since the Web is a distributed infrastructure with autonomous
systems, it is not reasonable to expect that all the systems will commit
to shared ontologies.
Instead, autonomous systems will use non-shared ontologies.
This will require the integration and mapping of ontologies.
Data Exchange
Integration/Mapping
Local Ontologies
Local Ontologies
110
The Semantic Web
The Web is “machine-readable” but not “machine-
understandable”
“The Semantic Web is an extension of the current
web in which information is given well-defined
meaning, better enabling computers and people to
work in cooperation.”*
111
*Tim Berners-Lee, James Hendler and Ora Lassila, The Semantic Web, Scientific American, May 2001
The use of semantics
Benefits
Search engines can better “understand” the
contents of a particular page
More accurate searches
Additional information aids precision
Makes it possible to automate searches
because less manual “weeding” is needed to
process the search results
Facilitates the integration of several Web
services
112
Mapping Interfaces with
Ontological Concepts
Data Classes Ontologies
= Time -Ontology
Date {
City {...} byte day Temporal-Entity
XML Schema
byte month
Data type hierarchy
Duration {...} intyear }
Time Time
Time-Point {absolute_time}
Interval Domain
{year, month, day} Date Time {hour, minute, second}
Web Service
Calendar-Date Event
Interfaces
{dayOftheWeek, monthOftheYear}
Inputs Outputs Scientific-Event {millisecond}
Date
Name = Local ontology
Duration Coordinates {x, y}
Year
City
Area {name}
Get Conference City Forrest
Information
113
Building Ontologies
with Semantic Languages
The ontologies deployed must allow the precise description of
the data objects associated with Web services interfaces.
Some examples of indispensable features that
ontologies must supply include:
DAML+OIL Data types, cardinality constraints, …
RDFS Classes, inheritance, …
RDF Nodes, relations, …
114
Ontologies
Tools
Ontology editors
Protégé (Stanford)
OilEd (Manchester)
OntoEdit (Karlsruhe)
Ontology integration tools
Chimera (Stanford)
Reasoning Services
FaCT (used by OilEd)
SiLri (Karlsruhe)
115
RDF
Basic features
Provides basic ontological primitives
Resource Description Framework
An XML application
“Not just tags” – RDF makes use of a formal model
Basis for “The Semantic Web” (SW)
RDF provides a model for describing resources.
Resources have properties.
116
RDF
Data Model
RDF triples assert facts about resources
Directed labeled
graphs
Property
Resource Value
Model elements
Resource Statement
Property
Property
Resource Resource
Value
Statement
Statement
117
RDF
Data Model
The properties associated with resources are identified by property-
types, and property-types have corresponding values.
In RDF, values may be atomic in nature (text strings, numbers, etc.)
or other resources, which in turn may have their own properties.
Resource
Property
Property
Resource Value
Statement
118
RDF Model
An Example
DC:Title
“RDF – The Basics”
Document_1
DC:Creator
“PAauuthl Moril_le1r”
CARD:Affiliation
CARD:Email
CARD:Name
“UGE, Inc” “PI:EMAIL”
“John Miller”
119
RDF
An Example - Syntax
 RDF - The Basics 
John Miller
PI:EMAIL
UGE, Inc.
120
RDF Summary
RDF is a general-purpose framework
RDF provides structured, machine-
understandable metadata for the Web
RDF provides a model for describing resources.
Provides basic ontological primitives
Basis for “The Semantic Web” (SW)
121
RDF Schema (RDFS)
Extending the RDF
Classes
Inheritance between classes
Range
122
RDF Schema (RDFS)
Extending the RDF
Cardinality
No cardinality restrictions on properties
Basic Datatypes
Only includes ‘literals’ which is the set of all strings
Enumeration of property values
Not supported
123
DAML+OIL
Extending the RDFS
DAML+OIL is the result of the fusion of DAML
(DARPA Markup Language) developed in US and OIL
(Ontology Inference Layer) funded by EU.
DAML+OIL: a semantic markup language for Web
resources which builds on earlier W3C standards such
as RDF and RDF Schema, and extends these
languages with richer modelling primitives. See
http://www.w3.org/TR/daml+oil-walkthru/
http://www.w3.org/TR/daml+oil-reference
124
DAML+OIL
Extending the RDFS
Two kinds of properties are defined
Object Properties
Datatype Properties
…
125
XMLSchema Datatypes
Datatype hierarchy
126
DAML+OIL
Extending the RDFS
Cardinality (minCardinality, maxCardinality, cardinality)
127
DAML+OIL
Extending the RDFS
Basic Datatypes
Refer to the XMLSchema URI
Enumeration
128
Web Service
QoS Specification
The specification of Web services operational
metrics allows the analysis and computation
processes QoS.
Therefore, processes can be designed according to
QoS objectives and requirements.
This allows organizations to translate their
strategies into their processes more efficiently.
129
Operational Metrics
DAML-S does not supply a QoS model that allow the
automatic computation of Web processes
The operational metrics of tasks and Web services are
described using a QoS model.
We have developed a theoretical model for the automatic
computation of workflow QoS based on tasks QoS metrics*.
Based on our model, we have developed an ontology for the
specification of QoS metrics for tasks and Web services.
This information will allow for the discovery of Web services
based on operational metrics.
130
*Cardoso et al., 2002a, Cardoso et al., 2002b
Web Service Flow Language (WSFL)
WSFL is IBM’s XML language for describing Web Services
Composition
Can be extended WSFL to include QoS specification such as
time, cost and reliability
Constructs
 QoS specification
(time,cost,reliability)
Activity Elements
Message Elements
131
WSFL (contd.)
Service Provider Elements Web service information
Conditional Branching
Control Link Elements
Data Routing
Data Link Elements
132
Process Specification
BPEL4WS
Jorge Cardoso1, Christoph Bussler2, Amit Sheth1, 4, Dieter Fensel3
1LSDIS Lab, Computer Science, University of Georgia
2Oracle Corporation
3 Universität Innsbruck
4 Semagix, Inc
BPEL4WS
Introduction
BPEL4WS (Business Process Execution Language for Web
Services) is a process modeling language.
Developed by IBM, Microsoft, and BEA
Version 1.0, 31 July 2002
It represents the merging of XLANG (Microsoft) and
WSFL(IBM).
It is build on top of WSDL.
For descriptions of what services do and how they work,
BPEL4WS references port types contained in WSDL
documents.
134
BPEL4WS
Introduction
BPEL4WS was released along with two others
specs:
WS-Coordination and WS-Transaction*.
WS-Coordination describes how services can make
use of pre-defined coordination contexts to
subscribe to a particular role in a
collaborative activity.
WS-Transaction provides a framework for
incorporating transactional semantics into
coordinated activities.
135
*http://www-106.ibm.com/developerworks/webservices/library/ws-coor/,
http://www-106.ibm.com/developerworks/webservices/library/ws-transpec/
BPEL4WS
Introduction
BPEL4WS is a block-structured programming language, allowing
recursive blocks but restricting definitions and declarations to the top
level.
The language defines activities as the basic components of a
process definition.
Structured activities prescribe the order in which a collection of
activities take place.
Ordinary sequential control between activities is provided by
sequence, switch, and while.
Concurrency and synchronization between activities is provided
by flow.
Nondeterministic choice based on external events is provided by
pick.
136
BPEL4WS
Introduction
Process instance-relevant data (containers) can be referred to
in routing logic and expressions.
BPEL4WS defines a mechanism for catching and handling
faults similar to common programming languages, like Java.
One may also define a compensation handler to enable
compensatory activities in the event of actions that cannot be
explicitly undone.
BPEL4WS does not support nested process definition.
137
BPEL4WS
An Example
Let consider the following process.
138
[http://www-106.ibm.com/developerworks/webservices/library/ws-bpel/]
BPEL4WS
An Example – WSDL definitions
…
 Messages
The WSDL portType offered by
 the service to its customer
…
 Roles
…
139
BPEL4WS
An Example – The process
 This section defines the
 with the business process in the
…
course of processing the order.
 This section defines the data
…
containers used by the process,
providing their definitions in terms of
WSDL message types.
…
140
BPEL4WS
An Example – The process
…
…
141
BPEL4WS
An Example – The process
The flow construct provides concurrency and synchronization
Activities are executed sequentially
…
…