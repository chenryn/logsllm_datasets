5.2 DRM applications with Consumable Rights
Consumable access is becoming an important aspect in many
applications, especially in DRM. For example, in a pay-per-use ap-
plication, a user’s credit is reduced after an access to an object,
causing the user to lose the right on the object after a number of
accesses. For another example, if an object can only be accessed
by a ﬁxed number of subjects concurrently, a subject’s access may
revoke the access right of another subject. Most applications with
consumable rights can be modelled by UCON with the mutability
property [12, 11].
Consider a DRM application, where a user can order a music
CD, along with a license ﬁle which speciﬁes that the CD can only
be copied a ﬁxed number of times (say, 10). The license ﬁle can
be embedded with the CD or distributed separately, and must be
available and respected by the CD copying software or device. A
subject (user) has an attribute credit with a numerical value of the
user’s balance. Each object (CD) has an attribute copylicense to
specify how many copies that a subject can make with this object.
The policies are deﬁned as follows.
order(s, o):
(s.credit ≥ o.price) ∧ (o.owner = null)
→ permit(s, o, order)
updateAttribute : s.credit = s.credit − o.price
updateAttribute : o.owner = s
updateAttribute : o.copylicense = 10
allow copy(s, o):
(o.owner = s) ∧ (o.copylicense > 0)
→ permit(s, o, allowcopy)
updateAttribute : o.allowcopy = true
copy(o1, o2):
(o1.allowcopy = true) → permit(o1, o2, copy)
createObject o2
updateAttribute : o2.sn = o1.copylicense
updateAttribute :
o1.copylicense = o1.copylicense − 1
updateAttribute : o1.allowcopy = f alse
The ﬁrst policy speciﬁes that a user can order an object if not
ordered before (the value of attribute owner is null) and the user’s
credit is larger than the object’s price. As a result of the order,
the user’s credit is reduced, the object’s owner is updated to the
user’s ID, and the object’s copylicense is set to 10. The second
policy states that whenever the object’s copylicense is positive,
the owner of the object is allowed to make a copy of the object. In
the third policy, if an object is allowed to be copied, a new object
(CD) can be created, its sn (serial number) is set to be the original
object’s copylicense value, and the original object’s copylicense
is reduced by one. As the newly created object does not have any
license information, it cannot be copied.
In a system with a ﬁxed number of users and objects in the ini-
tial state, the value domain of owner is ﬁnite since no new users
can be created. The set of all possible values for credit of a sub-
ject is ﬁnite, since the value is set after pre-payment or registra-
tion. Note that the changes of the credit value because of admin-
istrative actions, e.g., credit card payment, are not captured in the
model. The value domains for copylicense and allowcopy are
obviously ﬁnite. Therefore, all the attribute value domains are ﬁ-
nite sets. Furthermore, there is only one creating policy, in which
both the child’s and the parent’s attributes are updated, and there
is no cycle with any create-parent attribute tuples since the value
of copylicense strictly decreases. According to Theorem 3, the
safety of this UCONA model is decidable.
6. RELATED WORK
Previous work in safety analysis has shown that, for some gen-
eral access control models such as the access matrix model formal-
ized by Harrison, Russo, and Ullman (HRU model) [5], safety is
an undecidable problem. That means, there is no algorithm to de-
termine, given a general access control matrix system, whether it
is possible to ﬁnd a combination of commands to produce a state
where a subject has a particular permission. HRU did provide
decidability results for special cases with either mono-operational
commands (only one primitive operation allowed in a command) or
mono-conditional (only one presence check in the condition part of
a command) monotonic (no “destroy subject” or “destroy object”
or “remove right” operations) commands. These restricted models
are very limited in expressive power. The take-grant model has a
linear time algorithm to check the safety property, but it also has
limited expressive power [2, 9].
Sandhu’s Schematic Protection Model (SPM) has sufﬁcient ex-
pressive power to simulate many protection models, while provides
efﬁcient safety analysis [13]. SPM introduces the notion of strong
security type for subjects and objects: each subject and object is as-
sociated with a security type when created, and this type does not
change after creation. Sandhu [14] introduces a typed access matrix
model (TAM) model which generalizes the HRU model by intro-
ducing strong-typed subjects and objects. The monotonic form of
TAM with acyclic scheme is decidable, and the decision procedure
is NP-hard. Extending TAM, Soshi [18] presents a dynamic-typed
access matrix model (DTAM), which allows the type of an object
to change dynamically within a ﬁxed domain. The decidable model
of DTAM allows non-monotonic operations.
Motwani et al. [10] present an accessibility decidable model in
a capability-based system, which is a generalized take-grant model
and a restricted form of HRU model. The approach to the safety
problem is based on its relationship to the membership problem in
languages generated by certain classes of string grammars. Jaeger
and Tidswell [6] provide a safety analysis approach which uses a
basic set of constraints on a system. More recently, Koch et al.
[7] report on results that use a graph transformation model to spec-
ify access control policies. The state is represented by a typed la-
belled graph and state transitions by graph transformations. Under
some restrictions on the form of the rules (e.g., rules that add or
delete elements), the model has a decidable accessibility problem,
and the rules can model restrictive forms of DAC and a simpliﬁed
decentralized RBAC. Very recently, Li and Tripunitara [8] use a
trust management approach to study the safety problem in RBAC
and derive the decidability of safety with a user-role administration
scheme (URA97). The ﬁrst safety decidable model obtained in this
paper has the capability to simulate an RBAC system with URA97.
7. CONCLUSION AND FUTURE WORK
In this paper we investigate the safety property of UCON. First
the safety problem in general UCONA models is shown to be un-
decidable by simulating a Turing machine. Then we prove that
a UCONA model with ﬁnite attribute domains and without cre-
ating policies is decidable. By relaxing the creation restriction,
we also prove that the safety problem is decidable for a UCONA
model with acyclic attribute creation graph and no cycles that in-
clude create-parent tuple in attribute update graph. The decidable
models are shown to be useful by simulating RBAC96 model with
URA97 scheme, and a DRM application with consumable rights.
These two results lay the groundwork for considerable future work
on these topics, and hold out the promise for discovery of practi-
cally useful and efﬁciently decidable cases of UCON.
In this paper we focus only on the safety analysis with pre-authorization
policies in UCON. For condition core models of UCON, as system
state changes caused by environmental information are not cap-
tured in UCON core models, safety is a function of the system
environment. For obligation core models, as speciﬁed in [19], an
obligation of an access is an action that can be related to the sub-
ject requesting the access, or to some other subjects and, therefore,
a usage policy may include more than two parameters. Analysis of
the safety problem with obligations is for future work.
8. REFERENCES
[1] D. E. Bell and L. J. Lapadula, Secure Computer Systems:
Mathematical Foundations and Model. Mitre Corp. Report
No.M74-244, Bedford, Mass., 1975.
[2] M. Bishop, Theft of Information in the Take-Grant
Protection Model, In Proc. of IEEE Computer Security
Foundation Workshop, 1988.
[3] D. E. Denning, A lattice model of secure information ﬂow,
Communications of the ACM, vol. 19, no. 5, 1976.
[4] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. Richard Kuhn and
R. Chandramouli, Proposed NIST Standard for Role-Based
Access Control, ACM Transactions on Information and
System Security, Volume 4, Number 3, August 2001.
[5] M. H. Harrison, W. L. Ruzzo, and J. D. Ullman, Protection in
Operating Systems, Communication of ACM, Vol 19, No. 8,
1976.
[6] T. Jaeger and J. E. Tidswell, Practical Safey in Flexible
Access Control Models, ACM Transactions on Information
and Systems Security, Vol. 4, No. 2, May 2001.
[7] M. Koch, L. V. Mancini, and F. Parisi-Presicce,Decidability
of Safety in Graph-Based Models for Access Control, In
Proc. of the 7th European Symposium on Research in
Computer Security, LNCS 2502, 2002.
[8] N. Li and M. V. Tripunitara. Security analysis in role-based
access control. In Proceedings of the Ninth ACM Symposium
on Access Control Models and Techniques, 2004.
[9] R. J. Lipton and L. Snyder, A Linear Time Algorithm for
Deciding Subject Security, Journal of ACM, 24(3), 1977.
[10] R. Motwani, R. Panigrahy, V. Saraswat, and S.
Venkatasubramanian, On the Decidability of Accessibility
Problem (Extended Abstract), In Proc. of the 32th Annual
ACM Symposium on Theory of Computing, 2000.
[11] J. Park and R. Sandhu, The UCONABC Usage Control
Model, ACM Transactions on Information and Systems
Security, Feb., 2004.
[12] J. Park, X. Zhang, and R. Sandhu, Attribute Mutability in
Usage Control, In Proc. of the Annual IFIP WG 11.3
Working Conference on Data and Applications Security,
2004.
[13] R. Sandhu, The Schematic Protection Model: Its Deﬁnition
and Analysis for Acyclic Attenuating Schemes, Journal of
ACM, 35(2), 1988.
[14] R. Sandhu, The Typed Access Matrix Model, In Proc. of the
IEEE Symposium on Research in Security and Privacy, 1992.
[15] R. Sandhu, E. Coyne, H. Feinstein, and C. Youman,
Role-Based Access Control Models, IEEE Computer,
Volume 29, Number 2, February 1996.
[16] R. Sandhu, V. Bhamidipati, and Q. Munawer, The ARBAC97
Model for Role-Based Administration of Roles, ACM
Transactions on Information and Systems Security, Volume
2, Number, February 1999.
[17] M. Sipser, Introduction to the Theory of Computation, PWS
Publishing 1997.
[18] M. Soshi, Safety Analysis of the Dynamic-Typed Access
Matrix Model, In Proc. of the 6th European Symposium on
Research in Computer Security, LNCS 1895, 2000.
[19] X. Zhang, J. Park, F. Parisi-Presicce, and R. Sandhu, A
Logical Speciﬁcation for Usage Control, In Proc. of the 9th
ACM Symposium on Access Control Models and
Technologies, 2004.
APPENDIX
The proof of Theorem 1:
We show that a general Turing machine with one-directional sin-
gle tape [17] can be simulated with a UCONA system, in which a
particular permission leakage corresponds to the accept state of the
Turing machine. A Turing machine M is a 7-tuple: {Q, Σ, Γ, δ, q0,
qaccept, qreject}, where:
• Q is a ﬁnite set of states,
• Σ is a ﬁnite set, the input alphabet not containing the special
blank symbol,
• Γ is a ﬁnite set, the tape alphabet, with blank ∈ Γ and Σ ⊆ Γ,
• δ : Q × Γ → Q × Γ × {L, R} is the transition function,
• q0, qaccept, qreject ∈ Q are the start state, accept state, and
reject state, respectively, where qaccept (cid:54)= qreject.
Initially, M is in the state q0. Each cell on the tape holds blank.
The movement of M is determined by δ: if δ(q, x) = (p, y, L),
M is in the state q with the tape head scanning a cell holding x,
the head writes y on this cell, moves one cell to the left on the tape,
and M enters the state p. If the head is at the left end, there is no
movement. Similarly for δ(q, x) = (p, y, R), but the head moves
one cell to the right.
We construct a UCONA system to simulate a Turing machine M
introduced above, where the set of objects in a state of the UCONA
system is used to simulate the cells in the tape of M. The UCONA
scheme is (AT T, R, P, C), where R = Q∪{movelef t, moveright,
create} and AT T = {state, cell, parent, end}. For an object,
the value of state is either null or the state of M if its head is po-
sitioned on this cell, the value of cell is the content in the cell that
the head is scanning, the parent attribute stores an object identity,
and end is a boolean value to show whether the head is on the right
most cell of the part of the tape used so far. The set of predicates P
and policies C are shown in the simulation process.
The initial state (O0, σ0) of the UCONA system includes a sin-
gle object o0 and its attribute assignments:
• o0.state = q0
• o0.cell = blank
• o0.parent = null
• o0.end = true
For the state transition δ(q, x) = (p, y, L), the following policy
is deﬁned to simulate it:
policy movelef t(o1, o2):
(o2.parent = o1)∧ (o2.state = q)∧ (o2.cell = x) →
permit(o1, o2, movelef t)
updateAttribute : o2.state = null;
updateAttribute : o2.cell = y;
updateAttribute : o1.state = p;
In this policy, the two objects are connected by the parent at-
tribute. When the Turing machine is in q0, since o0’s parent value
is null, the left movement cannot happen. In a state when the Tur-
ing machine’s state is q and the cell contains x, the left movement
is simulated with a policy with parameters o1 and o2, where o2’s
parent value is o1, and the policy updates their attributes to simu-
late the movement.
If the head is not scanning the right most cell, the state transition
δ(q, x) = (p, y, R) can be simulated with the policy moveright,
which is similar to the policy movelef t; otherwise it is simulated
with the policy create, in which a new object is created.
policy moveright(o1, o2):
(o1.end = f alse) ∧ (o2.parent = o1) ∧ (o1.state =
q) ∧ (o1.cell = x) → permit(o1, o2, moveright)
updateAttribute : o1.state = null;
updateAttribute : o1.cell = y;
updateAttribute : o2.state = p;
policy create(o1, o2):
(o1.end = true) ∧ (o1.state = q) ∧ (o1.cell = x) →
permit(o1, o2, create)
updateAttribute : o1.state = null;
updateAttribute : o1.cell = y;
updateAttribute : o1.end = f alse;
createSubject o2;
updateAttribute : o2.parent = o1;
updateAttribute : o2.state = p;
updateAttribute : o2.end = true;
updateAttribute : o2.cell = blank;
In a particular state of the UCONA system, only one of the three
rights (movelef t, moveright, and create) is authorized accord-
ing to one of the above policies, since the state attribute is non-
null only for one object. Each policy assigns a non-null value to
an object’s state, and sets another one to null. The attribute end
is true only for one object. Therefore, this UCONA system with
these policies can simulate the operations of M.
We need another policy to authorize a particular permission de-
pending on the state attribute of an object.
policy q(o1, o2):
(o1.state = qf ) → permit(o1, o2, qf )
For a Turing machine, it is undecidable to check if the state qf
can be reached from the initial state. Therefore, with the scheme of
UCONA, the granting of the permission qf of a subject to an object
is also undecidable. This completes our undecidability proof. 2