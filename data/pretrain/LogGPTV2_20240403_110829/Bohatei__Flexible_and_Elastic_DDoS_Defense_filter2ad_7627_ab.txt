ﬂexible and elastic DDoS defense mechanism via SD-
N/NFV. In the next section, we highlight the challenges
in realizing these beneﬁts.
3 System Overview
In this section, we envision the deployment model and
workﬂow of Bohatei, highlight the challenges in realiz-
ing our vision, and outline our key ideas to address these
challenges.
3.1 Problem scope
Deployment scenario: For concreteness, we focus on
an ISP-centric deployment model, where an ISP offers
DDoS-defense-as-a-service to its customers. Note that
several ISPs already have such commercial offerings
(e.g., [5]). We envision different monetization avenues.
For example, an ISP can offer a value-added security ser-
vice to its customers that can replace the customers’ in-
house DDoS defense hardware. Alternatively, the ISP
can allow its customers to use Bohatei as a cloudburst-
ing option when the attack exceeds the customers’ on-
USENIX Association  
24th USENIX Security Symposium  819
(cid:2)(cid:22)(cid:16)(cid:8)(cid:27)(cid:12)(cid:17)(cid:1)(cid:15)(cid:19)(cid:22)(cid:9)(cid:8)(cid:19)(cid:1)
(cid:6)(cid:3)(cid:5)(cid:1)(cid:10)(cid:22)(cid:21)(cid:27)(cid:25)(cid:22)(cid:19)(cid:19)(cid:12)(cid:25)(cid:1)
(cid:2)(cid:22)(cid:16)(cid:8)(cid:27)(cid:12)(cid:17)(cid:1)(cid:19)(cid:22)(cid:10)(cid:8)(cid:19)(cid:1)(cid:1)
(cid:6)(cid:3)(cid:5)(cid:1)(cid:10)(cid:22)(cid:21)(cid:27)(cid:25)(cid:22)(cid:19)(cid:19)(cid:12)(cid:25)(cid:1)
(cid:31)(cid:36)(cid:31)(cid:29)(cid:23)(cid:15)(cid:23)(cid:28)(cid:36)(cid:31)(cid:1)
(cid:32)(cid:30)(cid:13)(cid:20)(cid:15)(cid:1)
(cid:31)(cid:29)(cid:17)(cid:15)(cid:23)(cid:19)(cid:15)(cid:13)(cid:33)(cid:28)(cid:27)(cid:1)
(cid:11)(cid:32)(cid:30)(cid:13)(cid:32)(cid:17)(cid:21)(cid:37)(cid:1)(cid:1)
(cid:42)(cid:6)(cid:12)(cid:10)(cid:28)(cid:22)(cid:21)(cid:1)(cid:35)(cid:43)(cid:1)
(cid:8)(cid:30)(cid:15)(cid:22)(cid:17)(cid:31)(cid:32)(cid:30)(cid:13)(cid:33)(cid:28)(cid:27)(cid:1)
(cid:42)(cid:6)(cid:12)(cid:10)(cid:28)(cid:22)(cid:21)(cid:1)(cid:34)(cid:43)(cid:1)
(cid:12)(cid:26)(cid:28)(cid:20)(cid:8)(cid:28)(cid:22)(cid:21)(cid:1)(cid:22)(cid:13)(cid:1)(cid:31)(cid:22)(cid:19)(cid:30)(cid:20)(cid:12)(cid:1)
(cid:22)(cid:13)(cid:1)(cid:26)(cid:30)(cid:26)(cid:23)(cid:17)(cid:10)(cid:17)(cid:22)(cid:30)(cid:26)(cid:1)(cid:27)(cid:25)(cid:8)(cid:14)(cid:10)(cid:1)
(cid:22)(cid:13)(cid:1)(cid:12)(cid:8)(cid:10)(cid:16)(cid:1)(cid:8)(cid:29)(cid:8)(cid:10)(cid:18)(cid:1)(cid:27)(cid:32)(cid:23)(cid:12)(cid:1)
(cid:8)(cid:27)(cid:1)(cid:12)(cid:8)(cid:10)(cid:16)(cid:1)(cid:17)(cid:21)(cid:15)(cid:25)(cid:12)(cid:26)(cid:26)(cid:1)
(cid:24)(cid:30)(cid:8)(cid:21)(cid:28)(cid:27)(cid:32)(cid:1)(cid:8)(cid:21)(cid:11)(cid:1)
(cid:19)(cid:22)(cid:10)(cid:8)(cid:28)(cid:22)(cid:21)(cid:1)(cid:22)(cid:13)(cid:1)(cid:7)(cid:4)(cid:26)(cid:1)
(cid:10)(cid:17)(cid:31)(cid:28)(cid:36)(cid:30)(cid:15)(cid:17)(cid:1)(cid:26)(cid:13)(cid:27)(cid:13)(cid:21)(cid:17)(cid:30)(cid:1)
(cid:42)(cid:6)(cid:12)(cid:10)(cid:28)(cid:22)(cid:21)(cid:1)(cid:33)(cid:43)(cid:1)
(cid:6)(cid:5)(cid:2)(cid:4)(cid:3)(cid:1)
(cid:6)(cid:11)(cid:8)(cid:6)(cid:13)(cid:1)(cid:4)(cid:2)(cid:3)(cid:1)(cid:1)
(cid:6)(cid:17)(cid:21)(cid:16)(cid:20)(cid:1)(cid:17)(cid:9)(cid:1)(cid:19)(cid:18)(cid:6)(cid:1)
(cid:6)(cid:2)(cid:4)(cid:1)(cid:8)(cid:8)(cid:1)(cid:2)(cid:7)(cid:2)(cid:3)(cid:5)(cid:1)
(cid:14)(cid:17)(cid:10)(cid:1)
(cid:9)(cid:17)(cid:18)(cid:22)(cid:5)(cid:18)(cid:7)(cid:1)(cid:20)(cid:17)(cid:1)
(cid:6)(cid:21)(cid:19)(cid:20)(cid:17)(cid:15)(cid:8)(cid:18)(cid:1)
Figure 3: A sample defense against UDP ﬂood.
(cid:18)(cid:5)(cid:20)(cid:8)(cid:1)(cid:14)(cid:12)(cid:15)(cid:12)(cid:20)(cid:1)
nodes processing (e.g., “benign” or “attack” or “analyze
further”). Each logical node will be realized by one (or
more) virtual appliance(s) depending on the attack vol-
ume. Figure 3 shows an example strategy graph with 4
modules used for defending against a UDP ﬂood attack.
Here, the ﬁrst module tracks the number of UDP pack-
ets each source sends and performs a simple threshold-
based check to decide whether the source needs to be let
through or throttled.
Our goal here is not to develop new defense algorithms
but to develop the system orchestration capabilities to en-
able ﬂexible and elastic defense. As such, we assume the
DAGs have been provided by domain experts, DDoS de-
fense vendors, or by consulting best practices.
3.2 Bohatei workﬂow and challenges
The workﬂow of Bohatei has four steps (see Figure 2):
1. Attack detection: We assume the ISP uses some out-
of-band anomaly detection technique to ﬂag whether
a customer is under a DDoS attack [27]. The de-
sign of this detection algorithm is outside the scope
of this paper. The detection algorithm gives a coarse-
grained speciﬁcation of the suspicious trafﬁc, indi-
cating the customer under attack and some coarse
identiﬁcations of the type and sources of the attack;
e.g., “srcpreﬁx=*,dstpreﬁx=cust,type=SYN”.
2. Attack estimation: Once suspicious trafﬁc is de-
tected, the strategy module estimates the volume of
suspicious trafﬁc of each attack type arriving at each
ingress.
3. Resource management: The resource manager then
uses these estimates as well as the library of defenses
to determine the type, number, and the location of
defense VMs that need to be instantiated. The goal of
the resource manager is to efﬁciently assign available
network resources to the defense while minimizing
user-perceived latency and network congestion.
4. Network orchestration: Finally, the network orches-
tration module sets up the required network forward-
ing rules to steer suspicious trafﬁc to the defense
VMs as mandated by the resource manager.
Given this workﬂow, we highlight the three challenges
we need to address to realize our vision:
C1. Responsive resource management: We need an
efﬁcient way of assigning the ISP’s available compute
and network resources to DDoS defense. Speciﬁcally,
we need to decide how many VMs of each type to run
(cid:27)(cid:25)(cid:8)(cid:14)(cid:10)(cid:1)(cid:23)(cid:8)(cid:27)(cid:16)(cid:1)
(cid:26)(cid:12)(cid:27)(cid:1)(cid:30)(cid:23)(cid:1)
(cid:46)(cid:2)(cid:44)(cid:39)(cid:1)(cid:4)(cid:17)(cid:18)(cid:17)(cid:27)(cid:31)(cid:17)(cid:1)(cid:5)(cid:30)(cid:13)(cid:29)(cid:22)(cid:44)(cid:47)(cid:1)
(cid:46)(cid:2)(cid:27)(cid:39)(cid:1)(cid:4)(cid:17)(cid:18)(cid:17)(cid:27)(cid:31)(cid:17)(cid:1)(cid:5)(cid:30)(cid:13)(cid:29)(cid:22)(cid:27)(cid:47)(cid:1)
(cid:16)(cid:17)(cid:18)(cid:17)(cid:27)(cid:31)(cid:17)(cid:1)(cid:29)(cid:28)(cid:25)(cid:23)(cid:15)(cid:37)(cid:1)(cid:25)(cid:23)(cid:14)(cid:30)(cid:13)(cid:30)(cid:37)(cid:1)
(cid:41)(cid:1)
(cid:25)(cid:17)(cid:21)(cid:23)(cid:32)(cid:40)(cid:1)(cid:32)(cid:30)(cid:13)(cid:20)(cid:15)(cid:1)
(cid:15)(cid:36)(cid:31)(cid:32)(cid:28)(cid:26)(cid:17)(cid:30)(cid:1)
(cid:12)(cid:7)(cid:1)(cid:12)(cid:7)(cid:1)(cid:12)(cid:7)(cid:1)
(cid:4)(cid:3)(cid:45)(cid:1)
(cid:25)(cid:17)(cid:21)(cid:23)(cid:32)(cid:40)(cid:1)(cid:32)(cid:30)(cid:13)(cid:20)(cid:15)(cid:1)
(cid:30) (cid:13) (cid:20) (cid:15) (cid:1)
(cid:32)
(cid:13) (cid:35) (cid:13) (cid:15)
(cid:24) (cid:1)
(cid:12)(cid:7)(cid:1)(cid:12)(cid:7)(cid:1)(cid:12)(cid:7)(cid:1)
(cid:4)(cid:3)(cid:44)(cid:1)
Figure 2: Bohatei system overview and workﬂow.
(cid:6)(cid:11)(cid:9)
premise hardware. While we describe our work in an ISP
setting, our ideas are general and can be applied to other
deployment models; e.g., CDN-based DDoS defense or
deployments inside cloud providers [19].
In addition to traditional backbone routers and inter-
connecting links, we envision the ISP has deployed mul-
tiple datacenters as shown in Figure 2. Note that this
is not a new requirement; ISPs already have several in-
network datacenters and are planning additional rollouts
in the near future [15,23]. Each datacenter has commod-
ity hardware servers and can run standard virtualized net-
work functions [45].
Threat model: We focus on a general DDoS threat
against the victim, who is a customer of the ISP. The
adversary’s aim is to exhaust the network bandwidth of
the victim. The adversary can ﬂexibly choose from a set
of candidate attacks AttackSet = {Aa}a. As a concrete
starting point, we consider the following types of DDoS
attacks: TCP SYN ﬂood, UDP ﬂood, DNS ampliﬁcation,
and elephant ﬂow. We assume the adversary controls a
large number of bots, but the total budget in terms of the
maximum volume of attack trafﬁc it can launch at any
given time is ﬁxed. Given the budget, the adversary has
a complete control over the choice of (1) type and mix
of attacks from the AttackSet (e.g., 60% SYN and 40%
DNS) and (2) the set of ISP ingress locations at which
the attack trafﬁc enters the ISP. For instance, a simple ad-
versary may launch a single ﬁxed attack Aa arriving at a
single ingress, while an advanced adversary may choose
a mix of various attack types and multiple ingresses. For
clarity, we restrict our presentation to focus on a single
customer noting that it is straightforward to extend our
design to support multiple customers.
Defenses: We assume the ISP has a pre-deﬁned library
of defenses specifying a defense strategy for each attack
type. For each attack type Aa, the defense strategy is
speciﬁed as a directed acyclic graph DAGa representing a
typical multi-stage attack analysis and mitigation proce-
dure. Each node of the graph represents a logical module
and the edges are tagged with the result of the previous
820  24th USENIX Security Symposium 
USENIX Association
on each server of each datacenter location so that attack
trafﬁc is handled properly while minimizing the latency
experienced by legitimate trafﬁc. Doing so in a respon-
sive manner (e.g., within tens of seconds), however, is
challenging. Speciﬁcally, this entails solving a large NP-
hard optimization problem, which can take several hours
to solve even with state-of-the-art solvers.
C2. Scalable network orchestration: The canonical
view in SDN is to set up switch forwarding rules in a
per-ﬂow and reactive manner [40]. That is, every time
a switch receives a ﬂow for which it does not have a
forwarding entry, the switch queries the SDN controller
to get the forwarding rule. Unfortunately, this per-ﬂow
and reactive paradigm is fundamentally unsuitable for
DDoS defense. First, an adversary can easily saturate the
control plane bandwidth as well as the controller com-
pute resources [54]. Second, installing per-ﬂow rules on
the switches will quickly exhaust the limited rule space
(≈4K TCAM rules). Note that unlike trafﬁc engineering
applications of SDN [34], coarse-grained IP preﬁx-based
forwarding policies would not sufﬁce in the context of
DDoS defense, as we cannot predict the IP preﬁxes of
future attack trafﬁc.
C3. Dynamic adversaries: Consider a dynamic ad-
versary who can rapidly change the attack mix (i.e., at-
tack type, volume, and ingress point). This behavior can
make the ISP choose between two undesirable choices:
(1) wasting compute resources by overprovisioning for
attack scenarios that may not ever arrive, (2) not instan-
tiating the required defenses (to save resources), which
will let attack trafﬁc reach the customer.
3.3 High-level approach
Next we highlight our key ideas to address C1–C3:
• Hierarchical optimization decomposition (§4): To
address C1, we use a hierarchical decomposition of
the resource optimization problem into two stages.
First, the Bohatei global (i.e., ISP-wide) controller
uses coarse-grained information (e.g., total spare ca-
pacity of each datacenter) to determine how many
and what types of VMs to run in each datacen-
ter. Then, each local (i.e., per-datacenter) controller
uses more ﬁne-grained information (e.g., location of
available servers) to determine the speciﬁc server on
which each defense VM will run.
• Proactive tag-based forwarding (§5): To address
C2, we design a scalable orchestration mechanism
using two key ideas. First, switch forwarding rules
are based on per-VM tags rather than per-ﬂow to dra-
matically reduce the size of the forwarding tables.
Second, we proactively conﬁgure the switches to
eliminate frequent interactions between the switches
and the control plane [40].
(cid:2)(cid:28)(cid:1)
(cid:2)(cid:29)(cid:1)
(cid:5)(cid:28)(cid:1)
(cid:5)(cid:29)(cid:1)
(cid:28)(cid:1)
(cid:2)(cid:28)(cid:1)
(cid:27)(cid:23)(cid:29)(cid:1)
(cid:2)(cid:29)(cid:1)
(cid:27)(cid:23)(cid:34)(cid:1)
(cid:27)(cid:23)(cid:30)(cid:29)(cid:1)
(cid:5)(cid:28)(cid:1)
(cid:27)(cid:23)(cid:29)(cid:32)(cid:1)
(cid:27)(cid:23)(cid:31)(cid:34)(cid:1)
(cid:27)(cid:23)(cid:29)(cid:32)(cid:1)
(cid:27)(cid:23)(cid:33)(cid:31)(cid:1)
(cid:5)(cid:29)(cid:1)
(cid:6)(cid:20)(cid:18)(cid:7)(cid:20)(cid:10)(cid:11)(cid:21)(cid:1)(cid:1)
(cid:3)(cid:18)(cid:7)(cid:17)(cid:12)(cid:1)
(cid:2)(cid:15)(cid:15)(cid:16)(cid:20)(cid:7)(cid:20)(cid:10)(cid:9)(cid:1)
(cid:3)(cid:18)(cid:7)(cid:17)(cid:12)(cid:1)
(cid:2)(cid:28)(cid:22)(cid:28)(cid:1)
(cid:2)(cid:28)(cid:22)(cid:29)(cid:1)
(cid:23)(cid:23)(cid:23)(cid:1)
(cid:23)(cid:23)(cid:23)(cid:1)
(cid:2)(cid:29)(cid:22)(cid:28)(cid:1)
(cid:23)(cid:23)(cid:1)
(cid:2)(cid:29)(cid:22)(cid:29)(cid:1)
(cid:23)(cid:23)(cid:1)
(cid:5)(cid:28)(cid:22)(cid:28)(cid:1)
(cid:5)(cid:28)(cid:22)(cid:29)(cid:1)
(cid:23)(cid:23)(cid:23)(cid:1)
(cid:24)(cid:1)
(cid:23)(cid:23)(cid:23)(cid:1)
(cid:5)(cid:29)(cid:22)(cid:28)(cid:1)
(cid:4)(cid:12)(cid:21)(cid:19)(cid:13)(cid:8)(cid:7)(cid:14)(cid:1)(cid:1)
(cid:3)(cid:18)(cid:7)(cid:17)(cid:12)(cid:1)
(cid:5)(cid:29)(cid:22)(cid:29)(cid:1)
Figure 4: An illustration of strategy vs. annotated vs.
physical graphs. Given annotated graphs and suspi-
cious trafﬁc volumes, the resource manager computes
physical graphs.
• Online adaptation (§6): To handle a dynamic adver-
sary that changes the attack mix (C3), we design a de-
fense strategy adaptation approach inspired by clas-
sical online algorithms for regret minimization [36].
4 Resource Manager
The goal of the resource management module is to efﬁ-
ciently determine network and compute resources to ana-
lyze and take action on suspicious trafﬁc. The key here is
responsiveness—a slow algorithm enables adversaries to
nullify the defense by rapidly changing their attack char-
acteristics. In this section, we describe the optimization
problem that Bohatei needs to solve and then present a
scalable heuristic that achieves near optimal results.
4.1 Problem inputs
Before we describe the resource management problem,
we establish the main input parameters: the ISP’s com-
pute and network parameters and the defense processing
requirements of trafﬁc of different attack types. We con-
sider an ISP composed of a set of edge PoPs5 E = {Ee}e
and a set of datacenters D = {Dd}d.
ISP constraints: Each datacenter’s trafﬁc processing
capacity is determined by a pre-provisioned uplink ca-
pacity Clink
. The com-
pute capacity is speciﬁed in terms of the number of VM
slots, where each VM slot has a given capacity speciﬁca-
tion (e.g., instance sizes in EC2 [2]).
Processing requirements: As discussed earlier in §3.1,
different attacks require different strategy graphs. How-
ever, the notion of a strategy graph by itself will not suf-
and compute capacity Ccompute
d
d
5We use the terms “edge PoP” and “ingress” interchangeably.
USENIX Association  
24th USENIX Security Symposium  821
ﬁce for resource management, as it is does not specify
the trafﬁc volume that at each module should process.
.
a
a
The input to the resource manager is in form of an-
notated graphs as shown in Figure 4. An annotated
graph DAGannotated
is a strategy graph annotated with
edge weights, where each weight represents the fraction
of the total input trafﬁc to the graph that is expected to
traverse the corresponding edge. These weights are pre-
computed based on prior network monitoring data (e.g.,
using NetFlow) and from our adaptation module (§6).
Te,a denotes the volume of suspicious trafﬁc of type a
arriving at edge PoP e. For example, in Figure 4, weight
0.48 from node A2 to node R2 means 48% of the total in-