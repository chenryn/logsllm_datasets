title:DARE: A Framework for Dynamic Authentication of Remote Executions
author:Erdem Aktas and
Kanad Ghose
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
DARE: a Framework for Dynamic Authentication of Remote Executions 
Erdem Aktas, Kanad Ghose 
Department of Computer Science 
State University of New York, Binghamton, NY 13902 
{eaktas,ghose}@cs.binghamton.edu 
Abstract 
With the widespread use of the distributed systems 
comes the need to secure such systems against a wide 
variety  of  threats.    Recent  security  mechanisms  are 
grossly  inadequate  in  authenticating  the  program 
executions  at  the  clients  or  servers,  as  the  clients, 
servers and the executing programs themselves can be 
compromised  after  the  clients  and  servers  pass  the 
authentication  phase.    This  paper  presents  a  generic 
framework  for  authenticating  remote  executions  on a 
potentially  untrusted  remote  server  –  essentially 
validating that what is executed at the server on behalf 
of the client is actually the intended program.    Details 
of  a  prototype  Linux 
implementation  are  also 
described,  along  with  some  optimization  techniques 
for  reducing  the  run-time  overhead  of  the  proposed 
scheme.    The performance overhead of our technique 
varies  generally 
for  most 
benchmarks, as seen from the actual remote execution 
of SPEC benchmarks. 
from  7% 
to  24% 
Security, 
Signature-based 
Computer 
Keywords: 
Authentication, Trusted Computing. 
1.  Introduction 
As distributed systems become pervasive, security 
mechanisms  have  to  be  geared  up  to  meet  the 
increasing  threats  against  such  systems.    Existing 
security  mechanisms  for  distributed  systems  rely  on 
the authentication of the clients and servers and on the 
protection  of 
the  data  being  processed  or 
communicated  using  known  encryption  mechanisms 
on  secure  channels.    These  security  mechanisms  are 
grossly  inadequate  in  authenticating  the  program 
executions  at  the  clients  or  servers,  since  the  clients, 
servers and the executing programs themselves can be 
compromised  after  the  clients  and  servers  pass  the 
authentication  phase. 
that 
implement  a  dynamic  root  of  trust  based  on  support 
for  Trusted  Platform  Modules  (TPMs)  [Int  04,  TCG 
07, MPP+ 07] represent a good first step in validating 
  Existing 
techniques 
specifically 
remote  execution  on  a  potentially  untrusted  host.    A 
dynamic  root  of  trust  is  implemented  by  essentially 
validating the signature of an executable just prior to 
its  execution.    As  such,  these  mechanisms  do  not 
address the vulnerabilities possible at run time in large 
software  systems  that  often  call  dynamically  linked 
modules either locally or remotely, nor do they address 
the dynamic substitution of regions of the executables 
by  malicious  components  in  the  host  kernel.    Our 
research 
current 
limitations  of  mechanisms  that  implement  just  a 
dynamic  root  of  trust.    We  do  this  by  continuously 
validating  the  control  flow  signature  of  remotely 
executed  code  as  they  execute.    We  believe  that  our 
approach  will  be  extremely 
towards 
implementing  secure  distributed  systems  where  some 
parts of the system run on potentially untrusted hosts. 
remote 
execution are directed at detecting security breaches at 
a remote server that executes programs on behalf of a 
client.    Some examples of such approaches are: 
•  The binaries of the program executing remotely can 
Existing  mechanisms 
for  validating 
addresses 
relevant 
these 
be altered or corrupted in the remote host.     
•  The  process  running  on  behalf  of  the  server  or 
libraries used by it can be altered or corrupted at run 
time,  or  their  binaries  can  be  corrupted  before 
execution.     
•  The authentication process at the server, such as the 
ones  used  in  some  current  solutions  [Ka  07,  UCT 
04, HCF 04] may itself be compromised.     
Unfortunately,  all  of  the  existing  techniques  for 
authenticating  remote  execution  are  impractical,  or 
limited  in  the  protection  they  offer  and  may  have 
adverse performance implications, as we describe later 
in  Section  2.    The  technique  described  in  this  paper 
for  authenticating  remote  execution  addresses  these 
limitations of existing techniques.    Solutions based on 
the  validation  of  the  code  just  before  the  execution 
(static validation) are not sufficient as a compromised 
memory  management  or  file  system  module  can 
supply  the  original  code  to  the  verification  function 
while  executing  the  compromised  code.    The  static 
validation of executions is also limited in its inability 
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.49
DOI 10.1109/ACSAC.2008.49
453
453
to  address  compromises  made  by  code  injection  at 
run-time,  typical  of  some  viruses.    We  thus  have  an 
emerging  need  for  a  mechanism  that  validates  a 
process  at  run-time.    The  specific  problem  that  we 
address in this paper is the dynamic (that is, run-time) 
authentication  of  code  running  on  a  potentially 
untrusted  remote  server  at  a client’s  request.    Such  a 
scenario  is  typical  in  the  world  of  today’s  Internet, 
where applications are executed on servers to serve a 
request  from  a  client.    Existing  solutions  addressing 
this  or  similar  problems  assume  the  availability  of 
some 
the  potentially 
untrusted  server    [Ka  07,  AMD  05,  SPD  04,  Int  04, 
Int 07] and the most practical and acceptable solutions 
available  make  use  of  the  Trusted  Platform  Module 
(TPM) [Int 04, TCG 07].     
trustworthy  components  at 
We 
a 
present 
general 
to  run?" 
framework 
  Our  approach  relies  on 
for 
authenticating the executions of programs on a remote 
server  in  a  distributed  environment  –  essentially 
validating that what is executed at the server on behalf 
of  a  client  is  actually  the  intended  program.    The 
framework  for  building  such  systems  essentially 
provides  answer  to  the  question  "is  the  program 
running  on  the  remote  host  really  the  program  I 
wanted 
the 
continuous  validation  of  the  control  flow  signatures 
of the program executing at the server.    A verification 
node,  which  could  be  the  client  itself,  continuously 
validates the control flow signatures for the execution 
at  the  server  through  a  challenge-response  sequence.   
The verifier specifies randomly-chosen points (random 
"checkpoints")  within  the  control  flow  from  a  set  of 
checkpoints identified from an a-priori analysis of the 
executable.    The  verifier  challenges  the  server  to 
verify  a  control 
flow  signature  at  each  such 
checkpoint.    A random "session" key is also specified 
as part of the challenge and the server responds with a 
signature  for 
the  specified 
checkpoint,  combining  the  session  key  with  the 
signature.    The  use  of  the  verifier-specified  random 
session  key  for  generating  the  signature  at  the  server 
also ensures that the signatures are immune to replay 
attacks.    As  a  further  safeguard,  the  generation  of  a 
signature  can  randomly  overwrite  the  contents  of 
specific hardware-maintained instrumentation registers 
(that  are  commonly  found  in  desktop  and  server 
CPUs).    By  using  signatures  that  incorporate  the 
contents of such instrumentation registers, we alter the 
generated signature for the next checkpoint within the 
control  flow,  again  thwarting  replay  attacks.    Our 
approach is thus quite different from prior approaches 
to  control  flow  validation  that  require  source-code 
level  modifications  and  use  signature  validation  at 
predictable points within the control flow path. 
the  control  flow  at 
Our proposed framework called DARE (Dynamic 
454454
2.  Related Work 
of 
Remote 
Executions), 
Authentication 
has 
infrastructures 
to  support  a  variety  of  signature 
generation schemes as well as the associated functions 
that  are  required  as  part  of  the  signature  validation 
process.    The  current  Linux  prototype  of  DARE  on 
X86 and X86/64 based hosts incorporate a variety of 
optimizations  for  reducing  the  run  time  overhead  of 
DARE  authentication  mechanism.    The  performance 
overhead of DARE varies generally from 7% to 24% 
for most benchmarks, as seen from the actual remote 
execution  of  representative  SPEC  benchmarks.    The 
prototype  implementation  uses  the  addresses  and 
outcomes of the last four branch  instructions that are 
executed  (as  held  in  some  specific  instrumentation 
registers  called  Model  Specific  Registers,  MSRs), 
cache  miss  statistics (again, held in MSRs) and user-
level data constraints for the signatures. 
Implementing  a  software  solution  for  validating 
remote execution is an open area of research and only 
a few practical solutions have been proposed to date.   
Techniques  for  monitoring  system  call  sequences  for 
intrusion detection, such as [HFS 98], can be extended 
for  authenticating  remote  execution.    However,  these 
techniques  will  have  a  system-wide  performance 
overhead.    Also, an attacker who simulates the correct 
system call sequence using a maliciously injected code 
can  easily  mislead 
system  call  sequence 
monitoring mechanism. 
the 
Baldi et al introduced the TrustedFlow protocol as 
one  of  the  first  approaches  that  authenticate  the 
execution  of  code  on  a  remote  host  by  using 
idiosyncratic  signatures  (“tags”)  at  specific  points  in 
the control flow path [BOY 03a, BOY 03b].    The first 
problem  of  the  trusted  flow  protocol  is  in  its 
assumption that current software technology is enough 
to  obfuscate  the  functions  for  generating  signatures. 
This  assumption  is  questionable  and  in  any  case,  as 
has  been  said  earlier,  obfuscation  is  never  a  solution 
for  security. 
the 
TrustedFlow  approach  is  that  an  attacker  can  run  a 
malicious  program  and 
the  original  program 
simultaneously  and  still  redirect  the  correct  signature 
sequence from the original code,  while the  malicious 
code  does  something  else.    A  third  limitation  has  to 
do  with  the  tampering  of  the  code  of  the  target 
program,  without  impacting  any  of  the  code  for  the 
obfuscated  function  generator.    Detecting  such  a 
violation  also  requires  additional  trusted  support  on 
the remote host. 
  The  second  problem  with 
Kennell and Jamieson [KJ 03] has used the side-
effects  of  a  running  process,  such  as  the  number  of 
misses  and  hits  on  the  instruction  and  data  TLBs, 
instruction 
performance  counter  values  (executed 
count,  executed  branch  count,  etc.),  and  a  special 
random tag generator to generate unique signatures for 
a  remotely  executed  program.    It  is  unclear  how  the 
code for generating the signature is integrated with the 
executing  program  on  the  remote  system.    In  a 
subsequent paper [UCT 04], Shankar et al mention the 
weakness  of  the  Kennell  and  Jamieson’s  technique.   
Kennell  and  Jamieson’s  approach  relied  on  the  use 
simulators  or  emulators  for  gathering  the  correct 
checksum  values 
the  signature.   
Furthermore,  the  checkpoint  locations  are  possibly 
defined  statically,  so  an  attacker  can  determine  (by 
using 
the  correct 
signatures, thereby compromising the mechanism.     
simulators/emulators) 
that  serve  as 
similar 
in 
Xu  et  al  propose  a  technique  for  detecting 
anomalies 
the  execution  of  a  program  by 
monitoring control flow into statically identified basic 
blocks  of  the  binary  [XDC  04].    A  fundamental 
limitation of this technique has to do with the static, a 
priori marking of basic blocks,  making the technique 
prone  to  compromise.    The  technique  of  Xu  et  al 
monitors  the  system  call  sequence  by  altering  the 
kernel system call trapping mechanism.    This implies 
that any system call will trigger the anomaly detection 
mechanism  first,  resulting  in  serious  performance 
degradation  for  other  programs  that  are  not  being 
validated, including the OS itself. 
The  Trusted  Computing  Group  [TCG07]  has 
standardized the concept of a Trusted Platform Module 
(TPM), a hardware device for generating and storing a 
secure hash value.    The TPM can be incorporated into 
a computing platform and can serve as the basis for a 
root  of  trust  [Ka  07].    Many  modern  processors  or 
chipsets  incorporate  such  a  TPM  [AMD  05,  Int  04, 
MPPRS 07].    Seshadri et al [SLS+ 05] has developed 
a  remote  execution  authentication  mechanism,  called 
Pioneer,  based  on 
software 
implementation of a root of trust.    Pioneer is designed 
for  legacy  systems  that  lack  hardware  support  for 
attestation,  such  as  a  TPM.    Pioneer  relies  on  the 
knowledge  of  the  exact  machine  details  at  the 
executing  end  and  relies  on  timing  bounds  to  avoid 
any compromise on the hash  used to authenticate the 
boot code, which is the root of trust.     
the  use  of 
Monrose et al [MWR 99] rely on the execution of 
traces  at  a  verifier  for  participants  in  a  SPMD  style 
distributed  computation  to  verify  if  the  participants 
performed  their  computations  correctly.    The  traces 
are  derived  from 
the 
participants and the technique essentially compares the 
call stack information of remote participants with that 
at  the  verifier.    The  applicability  of  this  scheme  to  a 
general purpose distributed system is thus limited. 
the  call  stack  states  of 
a 
455455
3.  The DARE Framework 
DARE  is  a  generic  framework  for  validating  the 
execution of binaries, supplied by a client, on a remote 
server  (hereafter  called  the  Compute  Server,  CS).   
The  CS  is  a  potentially  untrusted  host.    We  now 
describe the features and facilities within DARE. 
3.1. 
Assumptions 
related 
the  untrusted  host. 
DARE’s goal is to validate the execution of code 
on  a  potentially  untrusted  server  even  though  part  or 
all of these servers, including the operating system on 
the  servers,  can  be  compromised.    Short  of  re-
executing the binaries on a trusted host and verifying 
the  results  (or  signatures)  against  those  from  the 
untrusted host, we cannot do anything to validate the 
execution  on 
  Validating 
executions on a host where all components are suspect 
is thus not practically viable.    Instead, we rely on the 
following trusted components within the CS: 
1. There  is  a  secure  storage  on  the  server  for  a  key 
supplied  by  the  client.  DARE  needs  to  keep  all 
sensitive  data  (i.e.    checkpoint  locations,  keys  for 
secure  channels,  and 
to 
checkpoints) encrypted on the CS.    The key (called 
the master key) for encrypting and decrypting such 
data  and  the  related  encryption  and  decryption 
functions,  in  turn,  have  to  be  themselves  kept 
secure. 
that  a  secure  storage 
mechanism  to  store  and  secure  the  master  key  is 
available.    Such  storage can  be implemented  using 
a  dynamic  root  of  trust  mechanism  built  on  TPM 
support, as described in [Int 07]. 
  We  assume 
information 
root  of 
2. At  least  two  new  system  calls  (described  later  in 
  This  can  again  be 
Section  3.3)  are  trusted. 
implemented  using  a  dynamic 
trust 
mechanism, as in [Int 07, SLQP 07] because the two 
new system calls in question are relatively short and 
authenticating them prior to their execution may still 
be  practically  viable.    This  assumption  does  not 
translate  to  a  strict  requirement,  but  is  more  of  a 
matter of convenience and performance, as the two 
system calls as well as the interrupt handler can be 
validated using the proposed svalidation mechanism 
or using a dynamic root of trust mechanism. 
3. Library functions on the server that are called by the 
program  being  validated  are  secure.    In  Section  5 
we show how the proposed solution can be extended 
to validate these library functions.   