title:Can Systems Explain Permissions Better? Understanding Users' Misperceptions
under Smartphone Runtime Permission Model
author:Bingyu Shen and
Lili Wei and
Chengcheng Xiang and
Yudong Wu and
Mingyao Shen and
Yuanyuan Zhou and
Xinxin Jin
Can Systems Explain Permissions Better? 
Understanding Users’ Misperceptions under 
Smartphone Runtime Permission Model
Bingyu Shen, University of California, San Diego; Lili Wei, The Hong Kong University 
of Science and Technology; Chengcheng Xiang, Yudong Wu, Mingyao Shen, and 
Yuanyuan Zhou, University of California, San Diego; Xinxin Jin, Whova, Inc.
https://www.usenix.org/conference/usenixsecurity21/presentation/shen-bingyu
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Can Systems Explain Permissions Better? Understanding Users’ Misperceptions
under Smartphone Runtime Permission Model
Bingyu Shen1, Lili Wei2, Chengcheng Xiang1, Yudong Wu1,
Mingyao Shen1, Yuanyuan Zhou1, and Xinxin Jin3
1University of California, San Diego 2The Hong Kong University of Science and Technology 3Whova, Inc.
Abstract
Current smartphone operating systems enable users to man-
age permissions according to their personal preferences with
a runtime permission model. Nonetheless, the systems pro-
vide very limited information when requesting permissions,
making it difﬁcult for users to understand permissions’ capa-
bilities and potentially induced risks.
In this paper, we ﬁrst investigated to what extent current
system-provided information can help users understand the
scope of permissions and their potential risks. We took a
mixed-methods approach by collecting real permission set-
tings from 4,636 Android users, an interview study of 20 par-
ticipants, and large-scale Internet surveys of 1559 users. Our
study identiﬁed several common misunderstandings on the
runtime permission model among users. We found that only
a very small percentage (6.1%) of users can infer the scope
of permission groups accurately from the system-provided
information. This indicates that the information provided by
current systems is far from sufﬁcient.
We thereby explored what extra information that systems
can provide to help users make more informed permission
decisions. By surveying users’ common concerns on apps’
permission requests, we identiﬁed ﬁve types of information
(i.e., decision factors) that are helpful for users’ decisions. We
further studied the impact and helpfulness of the factors to
users’ permission decisions with both positive and negative
messages. Our study shows that the background access factor
helps most while the grant rate helps the least. Based on
the ﬁndings, we provide suggestions for system designers to
enhance future systems with more permission information.
1 Introduction
Smartphones are pervasive today [23, 52]. The latest ver-
sions of the market-dominating smartphone operating sys-
tems, Android and iOS, both provide runtime permission
management to let users decide to allow or deny apps’ re-
quests to access private data, such as photos, contacts [16,19].
However, users can make wrong permission decisions un-
intentionally, which may cause severe privacy leaks in the
runtime permission model as shown in recent security in-
cidents [13, 17, 18, 20]. For example, in March 2018, it was
reported that Android app of Facebook collected and uploaded
users’ call history and SMS messages to their servers if users
grant the app permissions to read these data. Users were not
aware of this even though they granted the permissions them-
selves. Some of them surprisingly found it out after down-
loading and inspecting the data collected by Facebook [17].
Compared with the previous install-time model, the adop-
tion of the runtime permission model introduces three new
challenges for users to understand app permissions. First, the
runtime permission model provides a shorter and briefer de-
scription for permissions requests as shown in Figure 1. Users
can hardly understand what private data will be accessed from
the descriptions. Second, the runtime permission model al-
lows users to manage permissions in groups. Users need to
understand the details of private data granted in each group to
make informed decisions (c.f. §2.1). Third, the change from
install-time model to runtime model in Android raises new
security risks: old apps can bypass the runtime permission
mechanism and directly obtain all the requested permissions
after installation on Android 6-9.
Smartphone systems currently play a neutral and passive
role in helping users understand and manage the permissions:
they only provide brief descriptions about the permission
groups in permission request dialogs. These descriptions typ-
ically contain incomplete information. Figure 1 gives two
examples of permission request dialogs on Android 9.0 and
iOS 13 respectively. In Figure 1 (a), the dialog informs users
the permission will “allow Snapchat to make and manage
phone calls”. From this notice, ordinary users cannot know
that the app can also collect the phone’s unique ID (i.e., IMEI)
once the permission is granted. In Figure 1 (b), the dialog
informs users that the permission will “allow Twitter to access
location”. However, it does not tell whether the location infor-
mation will be uploaded to the server or how it will be used.
Such simple descriptions can mislead ordinary users. Our
study shows that only 6.1% of users can correctly understand
all the capabilities in the permission groups (cf. §5.1).
USENIX Association
30th USENIX Security Symposium    751
(a) Android
(b) iOS
Figure 1: Examples of permission request dialogs on Android
and iOS. In Figure 1(a), the dialog only shows that Snapchat re-
quests a permission to make and manage phone calls; however, it
does not inform users that it will also allow the app to access phone
status and ID (i.e. IMEI). In Figure 1(b), the usage descriptions
provided by the Twitter app only give obscure descriptions of how
location data are used. App developers may have incentives not
to honestly and comprehensively disclose their entire access and
usage of user data [50, 57]. From these brief descriptions, users
can hardly have a comprehensive understanding of the risks of
granting these permissions.
To better explain permissions, smartphone systems give
app developers the opportunity to provide explanations when
requesting permissions [16, 19]. However, previous stud-
ies [50,57] found that this has several problems. First, app de-
velopers may not provide correct explanations. Liu et al. [50]
found that a signiﬁcant proportion of runtime explanations
state that the app only requests basic permissions yet, in fact,
the app requests more permissions than the claimed ones.
Second, most developers tend to only describe the beneﬁts
to the users, but hide the details on what information will be
collected and how the information will be used [57]. This
implies that users can be misled if the system solely relies
on app developers to explain the permission requests. It is
necessary to have systems provide more accurate information
to help users understand and manage permissions.
Besides, it is also unclear whether systems have effectively
notiﬁed their users with the risks induced by permission model
changes. Android changed from the install-time permission
model to the runtime model in 2015. For compatibility, An-
droid 6.0 and later versions (referred as Android 6.0+) still
support apps using SDKs prior to 6.0 (referred as low-version
apps). Low-version apps can directly obtain all their requested
permissions after installation. Our study shows that 38.3%
of our 180 surveyed Android 6.0+ users mistakenly expect
low-version apps to request permission at runtime (cf. §4).
While many previous works focused on user comprehen-
sion of the install-time permission notices [37,39,43], it is still
unclear how well users can understand the permissions in the
runtime model. In this paper, we aim to identify the problems
in the runtime permission model and evaluate their impacts
on users by answering the following research questions:
RQ1. (Risks induced by permission model compatibility)
How commonly do users have low-version apps installed,
which may take advantage of permission model compatibility
to bypass runtime user consents?
RQ2. (Runtime permission comprehension and manage-
ment) Can the information provided by the system help or-
dinary users to precisely comprehend the permissions and
their capabilities? How often do users review their permission
settings after they granted them at apps’ runtime?
RQ3. (Extra information from the system) What extra in-
formation (if the system can provide) would impact users’
permission decisions?
To answer the research questions, we conducted three differ-
ent types of studies. We ﬁrst collected app permission settings
from 4,636 real mobile users to study the real-world adoption
of the runtime permission model. We then conducted both the
interview study (n=20) and two online surveys (n= 359 and
n=1200) to study users’ comprehension and experience with
permissions. We also identiﬁed factors that are of users’ con-
cern in making permission decisions in our interview study
and used online surveys to investigate their impact on users’
decisions.
Our study reveals three interesting ﬁndings: (1) Low-
version apps are still widely used three years after the run-
time permission model was introduced. Among the 4,636
studied Android users, 61.8% have at least one such app in-
stalled on their devices (§4); (2) Only 6.1% of survey re-
spondents can accurately infer the scope of all the permission
groups after they read permission explanations from the smart-
phone OSes (§5); (3) Messages capturing negative aspects
of the apps are more likely to impact users’ permission deci-
sions (§6).
This paper makes the following three major contributions:
• We study users’ understanding of the information provided
by smartphone systems for the runtime permission model.
We identify common misunderstandings raised by the per-
mission model change, the design of permission groups and
app-provided explanations.
• We identify ﬁve factors that users are concerned about in
making permission decisions and quantitatively compared
their impact on users’ permission decisions from both posi-
tive and negative perspectives.
• Based on our study ﬁndings, we provide recommendations
to the designers of smartphone OSes to address common
misunderstandings of the runtime permission model.
2 Background
2.1 Permissions & Permission Groups
Permissions are introduced to gain explicit consent from
smartphone users to access sensitive data or system resources.
Smartphone OSes organize permissions as permission groups
and let users decide whether to allow or deny each permis-
sion group [15]. For example, in Android, the READ_SMS and
RECEIVE_SMS permissions are included in the SMS group as a
whole. When either READ_SMS or RECEIVE_SMS is requested,
Android will ask users for SMS group with the same notice.
752    30th USENIX Security Symposium
USENIX Association
Users have two ways to manage permissions in the runtime
permission model. First, users can make permission decisions
in dialogs when they are using an app, as shown in Figure 1(a).
However, these system dialogs are not informative due to: 1)
they display the same message when any permission in a per-
mission group is requested (e.g. in Figure 1(a), the message
could be displayed when the app requests to access phone
ID or make phone calls); 2) they only give brief permission
explanations, which is not intuitively understandable (e.g. in
Figure 1(a), “make and manage phone calls” also includes
accessing phone status and ID). Second, users can grant or
revoke an app’s permissions in privacy settings afterwards.
However, the system settings provide neither detailed expla-
nations nor clear deﬁnitions of permission groups, as shown
in Figure 2. Users may need to guess the relevant resources
allowed by each permission group from the group name.
2.2 Permission Management
On Android. Since version 6.0 which was released in
2015, Android has changed its permission model from install-
time to runtime permission model for four years at the time
of study in 2019. In the install-time model, a list of requested
permissions and their descriptions are shown before the in-
stallation of an app, as shown in Figure 3. Users can either
(1) grant all the requested permissions to the app or (2) reject
and terminate the app installation. In the runtime permission
model, permission request dialogs are shown to requested
permissions when users start using the app, so that users can
make decisions at the granularity of the permission group.
Compatibility becomes a problem for phones which sup-
port runtime permission model. Android developers need to
set a target SDK version in the conﬁguration ﬁle to specify the
Android version that the developers have tested against. Apps
with a lower version of SDK cannot accommodate to runtime
permission model: all requested permissions are granted at
installation time even when running on newer versions of
Android. If users are unaware of this issue, they may expect
that all apps will request permissions at runtime and uninten-
tionally grant all permissions at install time.
On iOS. iOS has been using the runtime permission model
since iOS 6 in 2012 [12]. It has two key differences compared
to Android. First, iOS has a ﬁner-grained permission model
for some sensitive information. For example, iOS users can
independently manage permissions for speciﬁc categories of
personal data like step count or heart rate within the Health
permission group, as well as control read and write permission
for each category. We took the different permission groups
into account when we design the study for iOS and Android.
Another key difference is that iOS requires app developers
to specify a usage explanation for each of the requested sensi-
tive resources as shown in Figure 1(b), which is optional and
recommended on Android [16]. However, developers may
provide partial or misleading explanations that avoid users
denying their apps’ permission requests [50, 57].
3 Methodology
3.1 Permission System Evolution Study
To study potential issues of permission model change, we
designed and implemented an Android app to collect apps
installed on users’ phones and their permission settings from
real users. We then used the collected data to analyze the
evolution of apps’ target versions on the Android market
and users’ permission decisions for various apps. We did
not gather data from iOS due to: (1) iOS does not allow a
third-party app to get other apps’ permission granting status.
(2) Users are not able to install apps with the install-time
permission model since iOS 6 in 2012.
Compared to simply crawling apps and relevant data
from app markets, the real permission settings enable us to
know (1) users’ actual permission settings (allow or deny) for
the apps and (2) the impact of low target SDK version apps,
such as the percentage of users who have installed such apps.
Data Collection Methodology. We designed an Android
app, Permission Checker (PerChecker), to help users see the
list of detailed permissions of each app under permission
groups [9, 34]. The app was released on Google Play in June
2018 and has received over 10k downloads by June 2019.
For each user, we leveraged PerChecker to collect the list of
installed apps, as well as each app’s requested and granted
permissions. We also collected the IP and MAC address as the
unique ID for analytical purposes. No personal demographics
data was collected from PerChecker users. Our data collection
process was from June 2018 to September 2018. To boost the
initial installs, we used Google Ads in August 2018 with key-
words "permission" to get the ﬁrst 400 installs, then stopped
advertisements.
To keep the data collection process transparent to users,
we provided a clear summary of privacy policy [8] clarifying
what data will be collected and how the data will be used,
which will be shown on the app’s ﬁrst launch. Users can also
opt out of the data collection at any time. In total, we collected
4,636 permission settings from distinct Android users whose
phones support the runtime permission model. The dataset is
available at [7].
3.2
Interview Study
We conducted semi-structured interviews to study users’
comprehension of permission groups and related risks, as
well as factors that affect users’ permission decisions. The
participants must have smartphones of the runtime permission
model. The interview results are used to design surveys in
§3.3. Before the interview, we reﬁned the questions through a
pilot study with people from various knowledge backgrounds
and veriﬁed the questions’ intelligibility. The full interview
questions are available online [10].
Interview Design Methodology. Our semi-structured in-
terviews are guided with predeﬁned questions. We also en-
couraged the participants to talk about their understandings
USENIX Association
30th USENIX Security Symposium    753
of any related topics. Here are the main interview phases (for
full phases and questions, please refer to [10]).
(1) Permission group comprehension. We asked if they can
ﬁnd apps’ permission settings on a smartphone. If users failed
to ﬁnd the permission settings, we would help them ﬁnd the
settings. Then we presented the participants with a list of
permission groups in settings as shown in Figure 2 (We also
use the centralized settings display for iOS). Then we ran-
domly picked 4-5 permission groups and asked participants
to explain what resources each permission group controls. We
further asked how often the participants used the permission
settings and whether they would check them regularly.
(2) Permission model changes. (Android only) We showed
the participants the prompt when downloading the “Camera
FV-5 Lite” (an app with low target SDK version) with the
provided phone, and asked if the permissions will be granted
immediately after click “Accept” and whether there will be
permission dialogs after they start using the apps, and reasons.
(3) Permission rationale. (iOS only) We showed the screen-
shot of Camera permission request for “Prisma” (an app to
stylize photos, see Figure 7) on iPhone, and asked whether
the rationale in the dialog is from the systems or the app de-
velopers. We also asked for reasons and whether they ﬁnd this
message helpful.
(4) Concerns in granting permissions We asked if they
have met uncomfortable permission requests and also asked
for speciﬁc details such as the permission and app’s name. We
further asked why they found the permission requests uncom-
fortable or their concerns when they were making permission
decisions. Then we asked what factors they would consider
in making permission decisions and required them to provide
some examples to improve the reliability of results.
Recruitment. We spread the advertisement on the bulletin
board in public places like malls and parks. We advertised
our study as “Behavior observation with smartphones” study
without mentioning privacy or security to reduce the recruit-
ment bias for people who are in favor of privacy or security
questions. Before the interview process, we ﬁrst conﬁrmed
the participant is qualiﬁed for the interview: the participants
must own an iOS device or an Android device with version
6.0 or higher. 20 participants satisﬁed the interview require-
ments and fully completed the interview. The demographics
are reported in §3.4. Our interview was conducted in a cof-
fee shop (a casual environment) and was recorded for future
notes-taking. Each interview took 10–30 minutes (avg. 14.3
mins). Each participant was compensated with a $5 gift card.
Data Analysis Procedure. We gathered the text by tran-
scriptions, and then we performed an analysis on the data with
three steps. First, we read through the data and divided the
data into sections based on the interview questions. Second,
one researcher reviewed the text to obtain the initial code-
book from each of the sections. Different coding methods are
used for data from different interview phases. For the ﬁrst
three phases, deductive coding was used because the codes
are mostly expected. We added new codes if we found any
and reorganized the codebook as we code on. For the last
phase (i.e., concerns in granting permissions), inductive cod-
ing was used for the initial codes, which follows the coding
practices for exploratory data in social science studies [31].
The codebooks are gradually reﬁned through multiple read-
ings and interpretations. We identiﬁed ﬁve subthemes under
the decision factor theme based on the codes. Third, we have
two other researchers independently review the data to assess
the coding reliability. Two researchers met and discussed the
cases where their codes differed, and converged on all ﬁnal
codes. The coding reliability is measured with the Krippen-
dorff’s α statistic [42] and the result is shown in Table 10,
indicative of largely consistent coding. The codebook with de-
scription and examples are presented in Table 10 and Table 11.
3.3
Internet Survey
3.3.1 Survey Structure
We conducted two separate surveys to study users’ compre-