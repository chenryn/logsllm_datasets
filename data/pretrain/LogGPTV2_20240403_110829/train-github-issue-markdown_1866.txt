`#[derive(Default)]` fails on objects that contain a field of an associated
type, even if that field is Default.
For example (also https://gist.github.com/4c85bcab2cf9f8c56dc2):
    trait TR {
      type Assoc : Clone + Copy + Default;
    }
    #[derive(Clone, Copy, Default)]
    struct Foo {
      thing : T::Assoc,
    }
    impl  Foo {
        fn bar() {
            // This works
            let _ : T::Assoc = Default::default();
            // This does not.
            let _ : Foo = Default::default();
        }
    }
This fails with "error: the trait `core::default::Default` is not implemented
for the type `T` [E0277]". Except that we don't _want_ a default T, we want a
default Node.
Manually implementing Default works as a workaround:
    impl Default for Foo {
        fn default() -> Self { Foo { thing : Default::default() } }
    }
Happens in 1.3, beta, and nightly as of Sep. 20.