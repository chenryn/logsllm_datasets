[30] Sumit Gupta, Rajesh Gupta, Nikil Dutt, and Alex Nicolau.
SPARK: A Parallelizing Approach to the High-Level Synthesis
of Digital Circuits. Springer US, 2004.
[31] Wilko Henecka, Stefan K¬®ogl, Ahmad-Reza Sadeghi, Thomas
Schneider, and Immo Wehrenberg. TASTY: Tool for automating
secure two-party computations. In CCS, pages 451‚Äì462. ACM,
2010.
[32] Wilko Henecka and Thomas Schneider. Faster secure two-party
In ASIACCS, pages 437‚Äì446.
computation with less memory.
ACM, 2013.
[33] John L Hennessy and David A Patterson. Computer architecture:
a quantitative approach. Elsevier, 2012.
[34] Rolf Herken.
The universal Turing machine: a half-century
survey. Springer-Verlag New York, Inc., 1995.
[35] Yan Huang, Peter Chapman, and David Evans. Privacy-preserving
applications on smartphones. In USENIX HotSec. USENIX, 2011.
[36] Yan Huang, David Evans, Jonathan Katz, and Lior Malka. Faster
secure two-party computation using garbled circuits. In USENIX
Security, pages 539‚Äì554. USENIX, 2011.
[37] Nathaniel Husted, Steven Myers, Abhi Shelat, and Paul Grubbs.
GPU and CPU parallelization of honest-but-curious secure two-
party computation. In ACSAC, pages 169‚Äì178. ACM, 2013.
[38] Kimmo J¬®arvinen, Vladimir Kolesnikov, Ahmad-Reza Sadeghi,
and Thomas Schneider. Garbled circuits for leakage-resilience:
Hardware implementation and evaluation of one-time programs.
In CHES, pages 383‚Äì397. Springer, 2010.
[39] Somesh Jha, Louis Kruger, and Vitaly Shmatikov. Towards
practical privacy for genomic computation. In S&P, pages 216‚Äì
230. IEEE, 2008.
[40] Gerry Kane and Joe Heinrich. Mips risc architecture, volume 1.
Prentice Hall Englewood Cliffs, 1992.
[41] Jonathan Katz and Lior Malka. Constant-round private function
In ASIACRYPT, pages 556‚Äì
evaluation with linear complexity.
571. Springer, 2011.
[42] Vladimir Kolesnikov, Payman Mohassel, and Mike Rosulek.
FleXOR: Flexible garbling for XOR gates that beats free-XOR.
In CRYPTO, pages 440‚Äì457. Springer, 2014.
[43] Vladimir Kolesnikov, Ahmad-Reza Sadeghi, and Thomas Schnei-
der. Improved garbled circuit building blocks and applications to
auctions and computing minima. In CANS, pages 1‚Äì20. Springer,
2009.
[44] Vladimir Kolesnikov and Thomas Schneider. Improved garbled
circuit: Free XOR gates and applications. In ICALP, pages 486‚Äì
498. Springer, 2008.
[45] Vladimir Kolesnikov and Thomas Schneider. A practical univer-
sal circuit construction and secure evaluation of private functions.
In FC, pages 83‚Äì97. Springer, 2008.
[46] Benjamin Kreuter, Abhi Shelat, Benjamin Mood, and Kevin RB
Butler. PCF: A portable circuit format for scalable two-party se-
cure computation. In USENIX Security, pages 321‚Äì336. USENIX,
2013.
[47] Benjamin Kreuter, Abhi Shelat, and Chih-Hao Shen. Billion-
gate secure computation with malicious adversaries. In USENIX
Security, pages 285‚Äì300. USENIX, 2012.
[48] Yehuda Lindell and Benny Pinkas. An efÔ¨Åcient protocol for
secure two-party computation in the presence of malicious ad-
versaries. In EUROCRYPT. Springer, 2007.
[49] Yehuda Lindell and Benny Pinkas. A proof of Yao‚Äôs protocol
for secure two-party computation. Journal of Cryptology, pages
161‚Äì188, 2009.
[50] Yehuda Lindell and Benny Pinkas. Secure two-party computation
Journal of Cryptology,
via cut-and-choose oblivious transfer.
2012.
[51] Chang Liu, Yan Huang, Elaine Shi, Jonathan Katz, and Michael
Hicks. Automating efÔ¨Åcient RAM-model secure computation. In
S&P, pages 623‚Äì638. IEEE, 2014.
[52] Steve Lu and Rafail Ostrovsky. How to garble RAM programs.
In EUROCRYPT, pages 719‚Äì734. Springer, 2013.
[53] Lior Malka. Vmcrypt: modular software architecture for scalable
secure computation. In CCS, pages 715‚Äì724. ACM, 2011.
[54] Dahlia Malkhi, Noam Nisan, Benny Pinkas, and Yaron Sella.
Fairplay-secure two-party computation system. In USENIX Secu-
rity, pages 287‚Äì302. USENIX, 2004.
[55] Giovanni De Micheli.
Synthesis and Optimization of Digital
Circuits. McGraw-Hill Higher Education, 1994.
[56] Alan Mishchenko et al. ABC: A system for sequential synthe-
sis and veriÔ¨Åcation. http://www.eecs.berkeley.edu/‚àºalanmi/abc/,
2007.
[57] Payman Mohassel and Saeed Sadeghian. How to hide circuits in
MPC an efÔ¨Åcient framework for private function evaluation. In
EUROCRYPT, pages 557‚Äì574. Springer, 2013.
[58] Moni Naor, Benny Pinkas, and Reuben Sumner. Privacy pre-
serving auctions and mechanism design. In EC, pages 129‚Äì139.
ACM, 1999.
[59] PandA. A framework for hardware-software co-design of embed-
ded systems. http://panda.dei.polimi.it/.
[60] Benny Pinkas, Thomas Schneider, Nigel P Smart, and Stephen C
In ASI-
Williams. Secure two-party computation is practical.
ACRYPT, pages 250‚Äì267. Springer, 2009.
[61] Shi Pu and Jyh-Charn Liu. Computing privacy-preserving edit
distance and Smith-Waterman problems on the GPU architecture.
Cryptology ePrint Archive 2013/204, 2013.
[62] Michael O Rabin. How to exchange secrets with oblivious
transfer. Cryptology ePrint Archive 2005/187, 2005.
[63] Aseem Rastogi, Matthew A Hammer, and Michael Hicks. Wyste-
ria: A programming language for generic, mixed-mode multiparty
computations. In S&P, pages 655‚Äì670. IEEE, 2014.
427427
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:52 UTC from IEEE Xplore.  Restrictions apply. 
[64] Steve Rhoads. Plasma-most MIPS I (tm) opcodes: Overview.
Internet: http://opencores. org/project, plasma [May 2, 2012],
2006.
[65] Tomas Sander, Adam Young, and Moti Yung. Non-interactive
cryptocomputing for NC1. In FOCS, pages 554‚Äì566. IEEE, 1999.
[66] Ellen M. Sentovich, Kanwar J. Singh, Luciano Lavagno, Cho
Moon, Rajeev Murgai, Alexander Saldanha, Hamid Savoj, Paul R.
Stephan, Robert K. Brayton, and Alberto Sangiovanni-Vincentelli.
SIS: A system for sequential circuit synthesis. Technical report,
EECS, UC Berkeley, 1992.
[67] Alan M. Turing. On computable numbers, with an application to
the entscheidungsproblem. J. of Math, 1936.
[68] Leslie G Valiant. Universal circuits (preliminary report). In STOC,
pages 196‚Äì203. ACM, 1976.
[69] Clifford Wolf. Yosys open synthesis suite. http://www.clifford.
at/yosys/.
[70] Andrew C-C Yao. How to generate and exchange secrets.
In
FOCS, pages 162‚Äì167. IEEE, 1986.
[71] Samee Zahur and David Evans. Circuit structures for improving
efÔ¨Åciency of security and privacy tools. In S&P, pages 493‚Äì507.
IEEE, 2013.
[72] Samee Zahur, Mike Rosulek, and David Evans. Two halves make
a whole: Reducing data transfer in garbled circuits using half
gates. In Eurocrypt, 2015. To appear. Preliminary version: http:
//eprint.iacr.org/2014/756.
[73] Zhiru Zhang, Yiping Fan, Wei Jiang, Guoling Han, Changqi Yang,
and Jason Cong. AutoPilot: A platform-based ESL synthesis
system. In High-Level Synthesis, pages 99‚Äì112. Springer, 2008.
APPENDIX A
OPEN SOURCE LOGIC SYNTHESIS TOOLS
is transparent
TinyGarble offers a generic methodology for gener-
ating GC that
to the underlying logic
synthesis tool. To show this point, we demonstrate an
implementation of TinyGarble using the Yosys [69] and
ABC [56] logic synthesis tool chain for circuit genera-
tion. Both of these tools are open-source and available
online. We compare the performance of the commercial
HDL synthesis tool, i.e., Synopsys DC, with this open-
source synthesis tool chain. ABC is an academic package
developed at the University of California Berkeley. Yosys
is an HDL-based synthesis tool which calls ABC for its
technology mapping. The HDL inputs for describing both
sequential and combinational circuits are written in the
Verilog programming language.
We compare the performance of these open-source
tools to the commercially available Synopsys DC. The
results are presented in Table V. For comparison pur-
poses, we compute GTD and MFE using the netlists
generated by Synopsys DC as reference. For most of
the benchmarks GTDs are either very small or zero
which implies that the number of non-XOR gates in
circuits generated by Yosys and by Synopsys DC are
almost similar. In terms of memory footprint, different
tools perform better for different benchmark functions.
These results shows that TinyGarble is transparent to the
underlying logic synthesis tool as long as the tool is up
to date with respect to the known methods for logic
minimization and mapping. Since the logic synthesis
tools perform a series of optimizations, they may use
different (heuristic) algorithms for some of their internal
steps which could lead to slightly different results. A
user can choose between different synthesis tools based
on their performance and availability.
TABLE V: Comparison of circuit generation perfor-
mance between the commercial Synopsys DC and
Yosys+ABC open source logic synthesizer.
!(	'
(
)$)*#
+)




	







	

















































































































































,*
 !"
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
#$
%

&
'

&
'

&
'




428428
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:52 UTC from IEEE Xplore.  Restrictions apply.