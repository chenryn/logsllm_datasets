aggregate behavior of a vast number of users available to the current ad net-
works. Thus, relatively simple techniques can be leveraged towards identifying
the users interests and demographics. These techniques include monitoring the
user’s shopping activity, scraping the proﬁle information on social networking
sites, and observing what applications the user runs, what music the user listens
to, and what websites the user browses.
Another key requirement for a private-by-design system is an efﬁcient and
privacy-preserving ad distribution channel. In Privad, advertisers upload their
ads to the broker together with the targeting parameters and bid information.
The broker distributes submitted ads to a fraction of clients through the dealer
via a pub-sub mechanism. To receive ads, clients anonymously subscribe to a
broad interest category combined with a few broad non-sensitive demograph-
ics (gender, language, region). The broker then periodically transmits new ads
to relevant subscription groups. The dealer ensures anonymity of the message
exchanges between the clients and the broker, while encryption makes the mes-
sages opaque to the dealer, so that it does not learn their contents. If the client
detects multiple user interests, it issues a separate subscription for each inter-
est, and the broker is unable to link the separate subscriptions to the same user.
Note, however, that this distribution mechanism does not take into account the
full set of interests and demographics of the user. As a result, the set of ads
delivered to a client covers all demographics and ﬁne-grained interests within a
broad category. In other words, the client receives both ads that are and are not
targeted to the user and has to locally ﬁlter out non-matching ads.
51
Privad relies on ad auctions to determine both which ads are shown to the
user and in what order. As described in Chapter 3, in addition to bid informa-
tion, ranking is based on both user and global metrics. Among other factors,
user metrics incorporate how well the targeting information matches the user
proﬁle, and the levels of interest in similar ads in the past. Global metrics in-
clude advertiser’s historical click-through-rates, the quality of the landing page,
etc.
When an adbox is presented to the client, for instance on a webpage, the
client evaluates the stored ads, selecting those that best match the user proﬁle,
and inserts them into the adbox displayed to the user. A report of this view
(for each ad in the adbox) is anonymously transmitted to the broker via the
dealer. If the user clicks on the ad, a report of this click is likewise anonymously
transmitted to the broker. These reports supply critical information to the broker
required to bill advertisers and pay publishers. Additionally, the broker also
uses these reports to provide advertisers with feedback on the effectiveness of
their ad campaigns.
Privad recognizes the threat of click-fraud attacks that can be launched by
unscrupulous users or clients against publishers, advertisers, or brokers. This
threat is addressed in the system design, which requires that both the broker
and dealer are involved in detecting and mitigating click-fraud. The mitigation
strategy is for the dealer to identify fraudulent clients and suppress their re-
ports. Privad proposes two mechanisms for identifying attacking clients. First,
the dealer may ﬂag an attacking client directly when the client transmits too
many reports or subscription requests. Second, the broker can identify which
publishers or advertisers are under attack, and indicate to the dealer which re-
52
Figure 6.2: The client framework
ports or subscriptions relate to these publishers or advertisers. The dealer then
associates these reports with clients. Any clients associated with a threshold
number of reports are ﬂagged as fraudulent.
Client Framework
Messages between the client and the broker are encrypted to prevent the dealer
from observing their contents.
It is critical, however, that users, or privacy
advocates operating on behalf of users, are able to verify that the client can-
not undetectably leak private information in the encrypted messages. Towards
this end, the Privad client architecture allows for a thin trusted reference mon-
itor between the client and the network. (Figure 6.2). The reference monitor
framework provides users and privacy advocates with a hook to detect privacy
violations. The reference monitor validates message contents and performs en-
cryption operations, and ensures that the content of outgoing messages matches
expectations. This software can insure that Privad is operating according to de-
sign. This shifts trust from the Privad client to the simple, open source refer-
ence monitor, which is open to validation so its correctness can be veriﬁed, and
which, therefore, can be trusted by the user.
53
Response(cleartext)Untrusted BlackboxUser ProfileRelevant AdsReference MonitorRequest(cleartext)[Response](encrypted)[Request](encrypted)Client SandboxPrivad architecture allows for multiple competing brokers each with a client
on a given user’s computer. There could be either independent clients operating
in parallel, with each client fully implementing the Privad protocol, building its
own user proﬁle, and even communicating with their individual dealers. Al-
ternatively, clients could leverage a number of shared services implementing
common Privad functionality and even basic scraping modules. This shared
functionality, for instance, could be exposed by browser vendors in order to efﬁ-
ciently support multiple clients. Moreover, dealers could also be shared among
multiple brokers.
Ad Dissemination
The fundamental approach to preserving privacy in private-by-design systems
is based on prefetching more ads than will be displayed to a user. This must
be done in such a way that no entity in the system is able to discover which
ads are shipped to which clients. Undoubtedly, the simplest way to guaran-
tee full privacy is to ﬂood all ads to all clients (as this approach prevents the
broker from obtaining any new information about the clients). However, a mea-
surement study of Google search ads [34] revealed that there are too many ads
and too much ad churn for this approach to be practical. This study also found
that ad impressions are distributed according to the power law: a small frac-
tion of broadly targeted ads (ca. 10%) receive a large fraction of impressions
(ca. 80%). In practical terms, it means that only this small portion of all ads
should be delivered to all users (for instance using a P2P mechanism like BitTor-
rent). Cost effective dissemination of the remaining 90% of ads requires ﬁnding
a sweet spot between privacy and scalability. Towards this end, Privad employs
54
Figure 6.3: Message exchange for Pub-Sub ad dissemination. Ex(M) repre-
sents the encryption of message M under key x. B is the bro-
ker’s public. K is a per-subscription symmetric key generated
by the client.
a privacy-preserving publish-subscribe (Pub-Sub) mechanism between the bro-
ker and clients to disseminate ads.
The main idea behind Pub-Sub mechanism is to map all ads into generic
interest categories and to deﬁne subscription channels as an interest category
combined with broad demographics (such as geographic region, gender, and
language). This must be done in such a way that no sensitive information is
leaked in the subscriptions. In other words, channel deﬁnitions must be broad
enough to accommodate a large number of legitimate subscribers (to guarantee
k-anonymity), and yet keep overhead to a minimum to achieve an acceptable
scalability. The set of channels is assumed to be pre-deﬁned by the broker and
distributed to all clients in advance (i.e., by hosting a signed copy of the com-
plete set of channels at the dealer).
The Pub-Sub message exchange proceeds as shown in Figure 6.3. First, the
client generates a request to join a channel. The join request is encrypted with
the broker’s public key (B) and transmitted to the dealer. The request contains
the Pub-Sub channel id (Channel), and a per-subscription symmetric key K gen-
erated by the client. Key K is later used by the broker to encrypt the stream
of ads sent in response to the client. When the dealer receives a join request, it
generates a subscription ID (Sid). It also stores the mapping between Sid and
55
EB(K, Channel)EB(K, Channel), SidDealerBrokerClientEK(Ad), SidFigure 6.4: Message exchange for view/click reporting and click-fraud de-
fense. B is the public key of the broker. Aid identiﬁes the ad. Pid
identiﬁes publisher website or application where the ad was
shown. Rid uniquely identiﬁes the report at the dealer.
the client, and appends the Sid to the message forwarded to the broker. The
broker then tags all ads published on this subscription channel with Sid, which
the dealer uses to look up the intended recipient to forward the ads to.
Since clients generate unique (random) symmetric keys for each subscrip-
tion, the broker is unable to link multiple subscriptions to the same user and
therefore cannot reconstruct interest proﬁle of the user. Additionally, to pre-
vent the broker from correlating subscriptions based on their time of arrival, the
system adds some amount of jitter by requiring the clients to arbitrarily delay
subscription requests.
View/Click Reporting
In addition to ad delivery, Privad requires a second communication channel
between the client and the broker in order to report views and clicks as well
as other ad-initiated user actions (i.e., conversions). Reports communicate to
the broker the minimum information required for billing and accounting: the
type of event (view, click, etc.), the ad id (Aid) and publisher id (Pid). The
Aid uniquely identiﬁes the ad, and the Pid identiﬁes the advertising inventory
(e.g., a webpage, an application) where the ad was displayed. Similarly to the
56
DealerBrokerEB(type, Aid, Pid, ...)ClientEB(type, Aid, Pid, ...), RidRid(if click-fraud suspected)subscription request, the report is encrypted with the broker’s public key and
blindly relayed by the dealer (Figure 6.4). As mentioned before, the dealer also
can help mitigate click-fraud attacks. Towards this end, for every report the
dealer generates a unique id (Rid), records the mapping of Rid to the client and
forwards Rid to the broker along with the original message. As a result, fraudu-
lent reports can be traced back to the clients who generated such reports.
In certain cases, the client might have multiple reports to send at once (for
example, when multiple ads appear on the same webpage). To prevent the bro-
ker from correlating such reports, the client needs to stagger them by adding
random delays.
User Proﬁling
A user’s proﬁle consists of a collection of attributes that characterize the user.
As mentioned previously, the client software agent is tasked with compiling a
proﬁle by monitoring user activity. Privad relies on three basic approaches to
accommodate client-side proﬁling: crawling, scraping, and metadata [33].
Crawling: This approach requires the broker to ﬁrst crawl the web and pre-
classify webpages in a way similar to classiﬁcation performed by existing cloud-
based crawlers. The client then can retrieve the attributes associated with a vis-
ited webpage from the broker in a private manner. The attribute query protocol
is almost identical the pub-sub used for ad dissemination. The protocol follows
a simple request-response pattern: the request contains the website URL and
the response returns associated proﬁle attributes. The main advantage of this
approach is that it allows the broker to employ complex algorithms to assign
57
attributes to arbitrary content. On the ﬂip side, backend classiﬁcation clearly
will not work for webpages that require the user to log in as well as for ofﬂine
and desktop applications.
Scraping: There are a number of opportunities for the client software to
locally scrape proﬁle information from webpages and desktop applications.
These include websites (and applications) that contain structured information,
which can be mapped directly to user attributes. For example, user proﬁle can
be scraped from online social networks, purchase history from shopping, and
travel sites, etc. To facilitate client-side scraping, Privad envisions a modular
architecture with website- and application-speciﬁc plugins provided and regu-
larly updated by the broker. Since scraping works with websites that require
the user to log in, it can be used complementary to crawling. However, map-
ping unstructured content (e.g. blogs, search terms, text documents) to user
attributes on the client requires complex machine learning algorithms. Imple-
menting this functionality in the client alone is not feasible due to the practical
limits on the complexity of the client. Instead, a middle ground approach can
be taken to address this challenge. In this approach, some pre-processing can
be carried out at the client and then the output can be mapped to attributes at
the backend using the previously described privacy-preserving querying mech-
anism.
Metadata: Privad argues that the broker can create additional incentives for
website owners to provide the Privad client with proﬁle attributes in the web-
page metadata. Similarly, local applications can also communicate proﬁle at-
tributes directly to the client. As an incentive, the broker could offer a portion
of the ad revenue to the website or application providing proﬁle information.
58
This can be done by keeping track of sources of proﬁle attributes leading up to a
click and including these sources as a part of the anonymous click report. In ef-
fect, this may create a new ecosystem, where websites are rewarded for highly
targeted content leading to better proﬁling, fewer ads and ultimately a better
user experience.
Click-Fraud Defense
While neither Privad nor current ad networks have a silver bullet against click-
fraud, the private-by-design architecture makes click-fraud defense more chal-
lenging. This is the inevitable cost an ad network has to pay when it gives up di-
rect control over the client-side in order to achieve better privacy. Nonetheless,
Privad addresses this challenge by proposing a number of techniques to detect a
fraudulent client. These range from rate-limiting according to per-client thresh-
olds on the number of subscriptions, and view and clicks reports, keeping his-
torical statistics on per-advertiser and per-publisher performance and looking
for anomalies, building honeyfarms that attract and identify click-fraud mal-
ware, and dealers blocking compromised hosts that appear in various public
blacklists.
One novel technique ﬁrst proposed by Privad and later extended in [35] is
termed “bait ads”. Bait ads can be intuitively described as CAPTCHAs for ads
– they contain targeting parameters that are completely unrelated to the actual
content (ad body, graphics, ﬂash animation) displayed to the user. For example,
a bait ad may advertise a “dog collar” to “cat lovers”. Normally, such mis-
targeted ads should produce extremely low click-through rates. However, a bot
would trigger multiple baits, as it would be unable to distinguish them from
59
normal ads. As a result, an unusually high rate of clicks on bait ads would help
verify that an attack is underway and also help identify the fraudsters. Bait ads
and other click-fraud detection mechanisms complement each other: deployed
in parallel they will signiﬁcantly raise the bar for an attacker. A more detailed
discussion of click-fraud defense in Privad can be found in [32].
Once an ongoing click-fraud attack is detected, identifying and blocking
fraudulent clients is straightforward. To do so, the broker notiﬁes the dealer of
the Rid’s of reports suspected of being involved in click-fraud. The dealer traces
the Rid back to the client. If the dealer receives a threshold number of notiﬁca-
tions for a given client, it blocks subsequent reports from that client. Moreover,
the dealer itself can monitor clients to see if they have an unusually high volume
of views or clicks, and ﬂag them accordingly.
Reference Monitor
In order to allow for proprietary closed-source client agents, Privad provides a
sandboxed environment with a trusted reference monitor. The reference mon-
itor is the only communication gateway between the client and the server-side
components in the Privad architecture. In other words, only the reference mon-
itor is allowed to perform network I/O. It exposes a thin set of APIs to the sand-
boxed client, allowing it to generate symmetric subscription keys, encrypt and
decrypt messages, and communicate with an authorized dealer. This API set is
designed to be extremely small so that the correctness of the reference monitor
can be easily veriﬁed.
60
The reference monitor validates message contents to ensure that the client
adheres to the protocol speciﬁcations. It also ensures that no sensitive informa-
tion is leaked in the message content or through covert channels. For example,
by having the monitor generate keys and perform the encryption Privad re-
duces the possibility of the client passing information through random bits in
generated keys, or through the randomized padding in the encrypted message.
Additionally, the monitor is allowed to add random delays or jitter to further
reduce the possibility of exploiting timing as a covert channel. For this reason,
Privad is designed to be delay tolerant – all operations are asynchronous, and
no message requires an immediate response. Finally, the reference monitor pro-
vides a hook for auditing the client software.
6.2 PDDP Overview
Privad is carefully designed to provide only the minimum information needed
by the broker, advertisers, and publishers to run the ad business: requests for
ads and anonymous reports of clicks and views (i.e., which clicks and views
occurred on which ads at which publishers). This minimum information, how-
ever, is not sufﬁcient if the goal is to get deeper insight into user behavior and
system performance. For instance, key players may want to know more, in the
aggregate, about what activity leads the proﬁler to detect an interest in the ﬁrst
place. They may wish to know the level of interest, or correlations between in-
terests. They may wish to know whether certain publisher websites led to better
conversions, and so on. With centralized (non-private) tracking, this informa-
tion is all available locally, and can simply be mined. With Privad, this infor-
mation is all tucked away on user computers, which precludes broad statistical
61
Figure 6.5: Traditional deployment model for Differentially Private sys-
tems
analysis of user data. Moreover, once Privad is deployed, it would be virtually
impossible for the system designers themselves to debug the system without in-
fringing on user privacy. To address this issue, Privad needs to provide support
for privacy-preserving statistical queries over distributed user data.
One approach to supporting privacy-preserving statistical queries is to add
noise to the answers of queries, in such a way that the privacy of individual
users is protected. An instance of this approach popular in the research com-
munity is differential privacy (DP) [23, 24]. Speciﬁcally, DP adds noise to the
answers for queries to statistical databases so that the querying system cannot
infer the presence or absence of a single user or a set of users. DP provides a
provable foundation for measuring privacy loss regardless of what information
an adversary may possess.
The traditional deployment model for DP assumes a centralized database
(see Figure 6.5). The system operating the database is trusted with its content,
and is also trusted to add noise to the information released from the database.
The private-by-design advertising scenario is different in several respects. First,
there is no trusted centralized database; individual clients maintain their own
data. Second, the information is distributed among potentially millions of
62
DBTrusted ComponentAddNoiseTrueAnswerQueryNoisyAnswerclients. Therefore, the private-by-design advertising settings call for a practi-
cal mechanism that provides some form of distributed differential privacy.
As it turns out, the existence of the dealer in Privad, trusted not to collude
with other components of the system, can be leveraged to accommodate the
Practical Distributed Differential Privacy (PDDP) system [19]. Figure 6.6 shows
how PDDP can be deployed on top of the Privad dealer. Now, an analyst (e.g., a
broker, an advertiser), who wishes to make statistical queries over some number
of Privad clients, can formulate a query and transmit it to the dealer, which in
turn forwards it to the required number of clients.
Each query comes with a number of buckets that specify possible answer
ranges. A client locally executes the query, and for each bucket it produces a
binary value indicating whether the query result fell within the range of that
bucket. Then, the resulting bit vector is encrypted with the analyst’s public key
(using Goldwasser-Micali bit-cryptosystem [30]) and uploaded to the dealer.
Meanwhile, the dealer and clients, using the XOR homomorphic property of the
GM cryptosystem, collaboratively and blindly generate noisy answers that mimic
a number of additional client responses to produce the required amount of dif-
ferentially private noise. Finally, the dealer mixes received client answers with
noisy answers, and forwards everything together to the analyst, who then de-
crypts the received answers and computes the statistical result under the differ-
entially private guarantee.
A major issue with DP in practice is that systematically repeated queries can
be used to eliminate the noise and reveal the true answer. Traditional DP sys-