### 实验验证我们的方法是否有效

#### DecObfs vs 3x+1Obfs

我们使用Angr求解DecObfs示例，但Angr在2小时内未能返回结果。为了进一步评估DecObfs的性能，我们测量了其Fork新路径所需的时间，并将其与3x+1Obfs进行了比较。

**性能对比**

| 比较维度 | 数据范围 | DecObfs | 3x+1Obfs | 胜出者 |
| --- | --- | --- | --- | --- |
| 收敛迭代平均次数 | 1-10000000 | 24次 | 152次 | DecObfs |
| 迭代次数一致时的时间开销 | 执行100000000次 | 14秒 | 6秒 | 3x+1Obfs |
| 空间开销 | - | 300 BYTE | 76 BYTE | 3x+1Obfs |

**分析**

- **时间开销**：当迭代次数相同时，DecObfs的耗时是3x+1Obfs的2.4倍左右。然而，从统计的平均情况来看，DecObfs所需的迭代次数仅为24次，而3x+1Obfs为152次。因此，在一般情况下，DecObfs的时间开销可能比3x+1Obfs更少。
- **空间开销**：3x+1Obfs在空间开销方面优于DecObfs。

#### 去符号化 vs ForObfs

ForObfs仅在k = 2时开始产生作用（1/15，1小时超时）。由于ForObfs带来的时间开销会随输入变化而变化，我们讨论了平均情况，即两个for循环的循环次数都为128次。

**性能对比**

| 项目 | 执行次数 | 时间 |
| --- | --- | --- |
| 去符号化 | 100000000 | 2秒 |
| ForObfs | 100000000 | 35秒 |

**分析**

- **时间开销**：去符号化在时间开销上远优于ForObfs。尽管去符号化会引入一个包含256个元素的数组，但考虑到可执行文件区段中通常存在大量未使用的内存，我们认为严格讨论空间开销的意义不大。
- **应用**：去符号化的代码片段可以插入到代码的任何位置，并显著增加约束求解器的求解时间。我们通过实验验证了这一想法。

#### 单独使用去符号化

**实验结果**

| 不透明谓词 | 原程序Angr求解时间 | 去符号化后的求解时间 |
| --- | --- | --- |
| x * (x + 1) % 2 != 0 | 3小时（无结果返回） | 符号变量个数增加带来的时间增长是线性的，但如果各符号变量之间存在约束关系，则时间增长呈指数形式 |

### 解决方案-安全计算

#### Secure Multi-party Computation (多方安全计算)

在无可信第三方的情况下，通过多方共同参与，安全地完成某种协同计算。

**基于噪声的方法**

- 差分隐私：掩盖原始数据

**不基于噪声的方法**

- 密码学方式
  - 同态加密
  - 混淆电路

#### 混淆电路 (Garbled Circuit)

混淆电路将安全计算函数编译成布尔电路的形式，并加密打乱真值表，从而在实现电路正常输出的同时，不泄露参与计算双方的私有信息。

**姚氏百万富翁问题**

- Alice和Bob分别拥有资产X亿和Y亿。
- 通过一系列步骤（如选取公钥、使用大数n等），Alice和Bob可以在不直接透露自己财富的情况下，判断谁的资产更多。

**混淆电路基本协议**

1. Alice生成混淆电路。
2. Alice和Bob进行通信。
3. Bob计算生成的混淆电路。
4. 分享结果。

**同态加密 (Homomorphic encryption)**

同态加密允许在密文上进行运算，解密后的结果与明文上的运算结果相同。

**加法同态**

\[ \text{Dec}(X + Y) = \text{Dec}(X) + \text{Dec}(Y) \]

**乘法同态**

\[ \text{Dec}(X \cdot Y) = \text{Dec}(X) \cdot \text{Dec}(Y) \]

**应用**

- 可以在不公开Enc1和Enc2的解密方式的情况下，仅公开Dec3来实现对代码的加密。
- 整体流程包括对输入数据的加密、对函数的加密以及最终的解密。

### 未来展望

- 对同态算法进行改进。
- 结合电路，对运算进行提速及优化。

### 谢谢大家 & 问答环节

如果您对我们的研究感兴趣，欢迎添加我们的微信进一步交流！

**感谢以下老师的帮助**

- 徐辉 @ 复旦大学计算机学院
- 赵川 @ VXProtect研究团队

**联系方式**

- 昵称：在野武将
- ID：chengrui191954