method. 
Note that when you add a Credit Card with ​Chip­and­PIN protection​, Samsung Pay changes
the first service code from 2 to 1 to use it without ​Chip­and­PIN ​policies. So the user will be
able to make purchases avoiding the necessity to insert the card into the terminal every time. 
Token Generation 
Researching how the app generates tokens, I found that Samsung Pay implements a
cryptogram as base. It uses a combination of arrays and matrices in combination of a “random”
number to have a different ids in each token “without” pattern. The main alteration occurs in the
last [4­6] digits of the token and in the middle of it. In every transaction, Samsung Pay app
sends data to the server; first I thought to match, log or to validate future tokens, but I was
wrong. Initially, I assumed that Samsung Pay needs a constant internet connection to have a full
control of the tokens creation. But what happens when there is no Internet connection?  
When the device was in airplane mode, something interesting occurred. Samsung Pay was able
to make purchases in offline mode. In airplane mode, the numbers do not change in the middle
section. The app could implement both NFC or MST simultaneously to have a better and wider
support in the vendors’ terminals.  
I assumed before testing that Samsung Pay had no way to validate the new tokenized number
in offline mode. So, the app will have a partial token’s control, and I will be able to create my
own random numbers, but I was partially wrong. The tokens have to follow a special structure (a
specific random path) in the last 4 digits to be valuable. So are those digits truly random
numbers? How the transaction server knows which token is valid even when Spay is offline?
Keep these questions in mind. 
When the device connects to Internet, Spay increases its tokens +1 in the middle section to
make sure that the next tokenized number will be bigger than last one. This means that
Samsung Pay is able to make purchases in offline mode, so this counter could be a security
range. Some examples: 
Without internet; the nfc is active, does not change the middle counter 
%4012300001234567^21041010​82017(constant)​0​216​242?  
%4012300001234567^21041010​82017​0​217​826? 
%4012300001234567^21041010​82017​0​218​380? 
%4012300001234567^21041010​82017​0​219​899? 
%4012300001234567^21041010​82017​0​220​006? 
[…] 
With internet, the middle counter increases +1: 
%4012300001234567^21041010​82100​0​232​646? 
%4012300001234567^21041010​83100​0​233​969?  
%4012300001234567^21041010​83100​0​234​196? 
%4012300001234567^21041010​83101​0​235​585?​← +1 
Attacking Samsung Pay: Scenarios 
Scenario 1: 
The next step was trying to reuse tokenized numbers, guess them or take an approximation to
see how they work separately from Samsung’s technology. If you think about it, the tokens are
created implementing visa or mastercard framework at Spayfw package, so they should work
without issues in any device. The only thing to be aware is how to transmit the tracks properly.
Thanks to Samy Kamkar and his invention(​http://samy.pl/magspoof/​), I could implement
MagSpoof to use tokens from Samsung Pay easily. 
With Magspoof, I successfully made purchases with tokens obtained from Samsung Pay.
However, I could not reuse them. Every token that goes through, it is burned. So there is no way
to reuse it repeatedly. However an attacker could try to guess the last 3 digits of the next token.
Analyzing many entries, an attacker can narrow to a small range of possible for future tokens. 
%4059557240050212^22111014226000128069?~4059557240050212^22111014226000128069?//Monday, june 27 
%4059557240050212^22111014226000129860?~4059557240050212^22111014226000129860? 
%4059557240050212^22111014226000130648?~4059557240050212^22111014226000130648? 
%4059557240050212^22111014226000131953?~4059557240050212^22111014226000131953? 
%4059557240050212^22111014301000132466?~4059557240050212^22111014301000132466?//Tuesday junio 28 11:26am 
%4059557240050212^22111014301000133576?~4059557240050212&22111014301000133576? 
%4059557240050212^22111014301000134764?~4059557240050212^22111014301000134764? 
%4059557240050212^22111014301000135708?~4059557240050212^22111014301000135708? 
%4059557240050212^22111014315000136483?~4059557240050212^22111014315000136483?//Wed junio 29 9:23am 
%4059557240050212^22111014315000137459?~4059557240050212^22111014315000137459? 
%4059557240050212^22111014315000138345?~4059557240050212^22111014315000138345? 
%4059557240050212^22111014315000139093?~4059557240050212^22111014315000139093? 
%4059557240050212^22111014349000140436?~4059557240050212^22111014349000140436?//Friday july 1, 5:34pm 
%4059557240050212^22111014349000141752?~4059557240050212^22111014349000141752? 
%4059557240050212^22111014349000142461?~4059557240050212^22111014349000142461? 
%4059557240050212^22111014349000143073?~4059557240050212^22111014349000143073? 
%4059557240050212^22111014393000144157?~4059557240050212^22111014393000144157?//Sat july 2, 5:05pm 
%4059557240050212^22111014393000145812?~4059557240050212^22111014393000145812? 
%4059557240050212^22111014393000146740?~4059557240050212^22111014393000146740? 
%4059557240050212^22111014393000147260?~4059557240050212^22111014393000147260? 
%4059557240050212^22111014417000148809?~4059557240050212^22111014417000148809?//Sunday july 3 4:00:05 
%4059557240050212^22111014417000149485?~4059557240050212^22111014417000149485? 
%4059557240050212^22111014417000150578?~4059557240050212^22111014417000150578? 
%4059557240050212^22111014417000150578?~4059557240050212^22111014417000150578? 
%4059557240050212^22111014417000151300?~4059557240050212^22111014417000151300? 
%4059557240050212^22111014439000152433?~4059557240050212^22111014439000152433?//4:19 
%4059557240050212^22111014439000153159?~4059557240050212^22111014439000153159?//4:20 
%4059557240050212^22111014439000154227?~4059557240050212^22111014439000154227? 
%4059557240050212^22111014440000155547?~4059557240050212^22111014440000155547?//4:38 
%4059557240050212^22111014440000156001?~4059557240050212^22111014440000156001?//4:59 
%4059557240050212^22111014440000157597?~4059557240050212^22111014440000157597?//5:00 
%4059557240050212^22111014440010158248?~4059557240050212^22111014440010158248?//Monday july 4 4:04pm 
%4059557240050212^22111014440010159354?~4059557240050212^22111014440010159354? 
%4059557240050212^22111014440010160392?~4059557240050212^22111014440010160392? 
%4059557240050212^22111014440010161183?~4059557240050212^22111014440010161183? 
%4059557240050212^22111014440010162318?~4059557240050212^22111014440010162318? 
%4059557240050212^22111014464010168604?~4059557240050212^22111014464010168604?//Tuesday july 5 3:30pm 
%4059557240050212^22111014464010169807?~4059557240050212^22111014464010169807? 
%4059557240050212^22111014464010170821?~4059557240050212^22111014464010170821? 
%4059557240050212^22111014487000171851?~4059557240050212^22111014487000171851? 
%4059557240050212^22111014487000172235?~4059557240050212^22111014487000172235? 
%4059557240050212^22111014487000173882?~4059557240050212^22111014487000173882?/Wed July 6 10:51pm 
offline/mode 
%4059557240050212^22111014487000174133?~4059557240050212^22111014487000174133? 
%4059557240050212^22111014487000175454?~4059557240050212^22111014487000175454? 
%4059557240050212^22111014487000176404?~4059557240050212^22111014487000176404? 
%4059557240050212^22111014487000177103?~4059557240050212^22111014487000177103? 
If an attacker analyze the tokens very carefully, he/she could implement a guessing method, a
brute force attack or a tokens’ dictionary attack. 
Scenario 2: 
Another possible scenario could be If a Samsung customer tries to use Samsung Pay but
something happens in the middle of the transaction, and this does not go through, that token still
alive. Meaning that an attacker could jam the transaction process to make Samsung Pay failed
and force it to generate the next token. So the attacker will be able to use the previous
tokenized number to make a purchase without any restrictions. This attack technique is very
similar to Samy Kamkar methodology to attack the rolling code algorithm implementing the
RollJam tool. But in this particular case, unlike Samy’s attack, the malicious attacker will not
need to release the previous token because that token will be used to make the purchase. 
Preparing JamPay for Scenario 2 
Hardware: 
­ Raspberry zero captures tokens and send them by email. Also, it will provide the necessary
power for MagSpoof. 
­ MagSpoof will act as jammer to confuse the terminal.  
­ Battery pack 
­ Jump wires 
­ Coil 
­ Wifi usb dongle 
Part of the project, first prototype. MagSpoof is already 
integrated with Raspberry zero.  
Demo: https://www.youtube.com/watch?v=CujkEaemdyE 
Scenario 3: 
TokenGet is a tool specially designed for social engineering attack. It can captures and transmit 
the tokens by email, so an attacker could use MagSpoof to use them a make purchases.  
Demo: https://www.youtube.com/watch?v=QMR2JiH_ymU 
Hardware: 
­ Raspberry Zero 
­ Case 
­ Mini otg 2 usb adapter 
­ Credit card reader 
 ­ Usb wifi dongle 
Flaws and Issues in Samsung Pay 
In the application, some flaws are constant: the passwords to encode hashes, comments all
over the code, and even weak obfuscation. The credit card data in the database is “encrypted”,
but it will be eventually decrypted it with static passwords in the code.  
There are many questions that need a deep research like how magically the transaction server
can distinguish between faked and proper tokens. I assumed that the server has a reverse of
the tokens generator function to validate them.  
Solution 
Samsung Pay has to work harder in the token's expiration date, to suspend them as quickly as
possible after the app generates a new one, or the app may disposed the tokens which were not
implemented to make a purchase. 
Also Samsung Pay needs to avoid of using static passwords to “encrypt” its files and databases
with the same function because eventually someone would be able to reverse it and exploit
them. The databases are very sensitive. They contains delicate information to update token
 status, server connections instructions and validation certificates. 
Conclusion 
The usage of Samsung Pay is an actual risk for its users’ integrity in different security levels. By
providing the correct fixes and updates, Samsung Pay could become one of the most
sophisticated purchase app in the digital market.  
Samsung Pay is growing exponentially around the planet; adding services service in different
countries. As result, Samsung Pay needs to increase as soon as possible a better security
controls to avoid any possible attacks against its Samsung’ customers.