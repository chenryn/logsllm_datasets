较多。
例：当 RFID Reader 读到标签后，2 秒内没有再读到标签，则认为标签离开了通道
[sql] view plaincopy 
1.CREATE QUERY readoutofchannel2 
2.SELECT T1.id AS T1_id,T1.num AS T1_num,'outofchannel' AS type 
3.FROM T1:readerevent,T2:readerevent,T3:delay2sectimer 
4.PATTERN T1;!T2;T3 
5.WHERE T1.id=T3.id AND T2.id=T3.id AND T3._end_time_-T1._end_time_=20
00 
6.WITHIN 2000 
北京速德贝斯科技有限公司 WWW.SODBASE.COM北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
为了保证结果正确性，SODBASE CEP 引擎规定 WHERE 语句中 T2 不能与 T1 做
关联，要与 T3 关联，即不能有类似 T1.id=T2.id 的条件。
例：IT 系统运维监控中，“服务调用开始”触发一个事件，在“调用结束”触发一个事件，
如果超时(1000ms)的话，就输出超时事件
[sql]  
1.CREATE QUERY calltimeoutnotification 
2.SELECT '-1' AS responsetime, T1.callerid AS functionname,'true' AS t
imeout 
3.FROM T1:callstream,T2:callstream,T3:calltimeoutevent 
4.PATTERN T1;!T2;T34.PATTERN T1;!T2;T3 
5.WHERE T3._end_time_-T1._end_time_=1000 AND T2.callerid=T3.callerid A
ND T1.eventtype='start' 
6.WITHIN 1000 
1.4 或模式
Disjunction（A|B）:表示事件 A 发生或事件 B 发生或两者都发生。
例：变电站监测中，查询 220KV I 段 PT 电压或其它段电压>112 的事件
[sql] view plaincopy 
1.CREATE QUERY VD0000_1 
2.SELECT * 
3.FROM T1:VD0000_1.模拟电压,T2:VD0000_1.模拟电压
4.PATTERN T1|T2 
5.WHERE T1.lineid='220KV I 段 PT 电压' 
6.AND T2.voltagevalue>1126.AND T2.voltagevalue>112 
7.WITHIN 500 
1.5 克林包
Kleen Closure(A^+/A^num): A^+表示事件 A 发生 1 次或多次；A^num 中 num 为数
字，表示事件 A 发生 num 次。kleen closure 必须在两个基本事件之间使用。例如: 
A;B^+;C 表示 A 发生后，B 发生多次，然后 C 发生
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
还有一个 A^*,表示 A 发生 0 次或多次。但是 A 发生 0 次时取 A 的字段值是空值，
使用时要注意，测试保证能取到结果。否则请使用(A;C)|(A;B^+;C)来代替 A;B^*;C。
1.5.1 普通窗口查询
例：金融风控中，查询 1 小时内的交易大于 10000 且交易次数大于 2 笔的卡号[sql]  
1.CREATE QUERY pos 
2.SELECT T1.acctnum AS acctum,T1.value AS T1_value,tostring(T2.value) 
AS T2.value,T3.value AS T3_value 
3.FROM T1:pos,T2:pos,T3:pos 
4.PATTERN T1;T2^+;T3 
5.WHERE T1. acctnum =T2. acctnum 
6.AND T3. acctnum =T1. acctnum 
7.AND T1.value+T3.value+sum(T2.value)>10000 
8.WITHIN 3600000 
1.5.2 定时统计
例：查询股价的 10 秒钟 K 线数据
[sql] view plaincopy 
1.CREATE QUERY vwap11.CREATE QUERY vwap1 
2.SELECTmin(T2.price) AS LOW, max(T2.price) AS HIGH 
3.FROM T1:timer,T2:stock,T3:timer 
4.PATTERN T1;T2^+;T3 
5.WHERE T1._start_time_=T3._start_time_-10000 
6.WITHIN 10000 
average 是内置聚合函数，还有 sum、tostring、max、min、first、count、countdistinct、
tostringdistinct 等。timer 流是用定时触发输入适配器生成的，周期为 10000ms。相
当于每个 10 秒窗口被 T1 和 T3 这两个定时触发时间点给括起来了。
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程SODBASECEP 入门与进阶教程
例：整点开始统计 12:00:00~12:00:10,12:00:10~12:00:20 等每 10 秒的股票数据
很多情况下，我们还想将每个窗口的起始时间设为整点开始，按一定的滑动窗口统
计数据。
一种方法是用带起始时间的定时触发器，设置定时器开始时间，如 2014-01-01 12:00:00，周期(ms)为 10000。在 sodbase cep 2.0.20(sp1)之后版本中如果开始时
间在当前时间之前，会按照周期调整到当前时间之后的触发点。
另外，前例语句中 T1 和 T3 将 T2 括起来是开区间窗口，即 
T1._end_time_50.0)后，开启 10 秒窗口，统计 10 秒内股价超过阈值
的事件,这 10 秒内的超过阈值事件，就不再开启新的 10 秒窗口
[sql] view plaincopy 
1.CREATE QUERY delayoutput21.CREATE QUERY delayoutput2 
3.FROM T1:delayoutput.stock,T2:delayoutput.stock,T3:delayoutput2.inter
valtimer 
5.WHERE T1._start_time_=T3._start_time_-10000  AND T1.price>50 AND T2.
price>50 
6.WITHIN 10000 
7.BATCHMODE 
流 delayoutput2.intervaltimer 中 是 每个 股价数 据 延时 10s 生成 的 事件 ， 与 delayoutput.stock 中的事件一一对应形成 10 秒窗口，参见下文延时输出适配器
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程SODBASECEP 入门与进阶教程
BATCHMODE 关键词表示检测到结果后，滑动窗口的开始时间移到之前结果的结 束时间后。即下一个输出结果的 T1._start_time_>=前一个结果的 T3._end_time_。
类似的例子还有
例：电信设备监测中发现故障后，开启窗口记录设备详细信息。
例：车辆行驶记录发现异常后，开启窗口监测车辆数据做记录。
1.6 使用括号
可以使用括号构造更为复杂的模式，在实际应用中有时也会使用到。
例如：(T1;T2^2;T3)|(T4;T5) 
当然，为了使模型拓扑更清晰和单元测试更方便，建议是用级联方式（见级联输入
输出适配器）构建 CEP 模型，而不是写非常复杂的 PATTERN 表达式。上例中，可以用一个单元模型(T1;T2^2;T3)输出级联到流 stream1,另一个单元模型 T4;T5 输 出级联到 stream2。再用一个单元模型 T6|T7 FROM T6:stream1,T7:stream2 得到最终结果。
2.自定义函数和内置函数
2.1  自定义函数
在 EPL 的 SELECT 和 WHERE 语句中都可以方便地调用用户自己写的 Java 函数
例：IT 系统运维监控中，查询服务调用和子服务调用之间的时间差
[sql] view plaincopy 
1.CREATE QUERY calltime 
2.SELECT A.callerid,B.callerid,JAVA:com.example.CallAnalysis:minus(A.t
ime,B.time) AS timecost 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
	 SODBASECEP 入门与进阶教程 3.FROM A:callstream,B:callstream 
4.PATTERN A;B 
5.WHERE JAVA:com.example.CallAnalysis:parentOf(A.callerid,B.callerid)6.WITHIN 6000 
写 Java 函数时，参数需要是 String 类型，返回需要是 String,Double,Integer,Float。在最新的 SODBASE CEP 引擎中以 JAVA 开头调用对象方法，以 JAVASTATIC 开 头调用类静态方法。
例：IT 系统监控中，CPU 利用率超过 80%,报警一次。接下来的 2min 中，如果 CPU
利用率还超 80%，也不报警。
[sql]  
1.CREATE QUERY reduceAlarmNum 
2.SELECT 'CPU_HIGH' AS event.type, JAVA:package.class:setLastAlarmTime
('CPU_HIGH',event._start_time_) AS setalarmstate 
3.FROM event:cpuusagestream3.FROM event:cpuusagestream 
4.PATTERN event 
5.WHERE event.cpu_usage>0.8 AND event._start_time_-JAVA:package.class:
getLastAlarmTime('CPU_HIGH')>12000 
|  |  |  |  |  |
|---|---|---|---|---|
| 这 |里 |的 |JAVA:package.class:getLastAlarmTime('CPU_HIGH') |和 || JAVA:package.class:setLastAlarmTime('CPU_HIGH',event._start_time_) 是 自 定 义 Java 函数，作用是在全局变量或缓存、存储系统中记录上次同类报警的时间。 |JAVA:package.class:setLastAlarmTime('CPU_HIGH',event._start_time_) 是 自 定 义 Java 函数，作用是在全局变量或缓存、存储系统中记录上次同类报警的时间。 |JAVA:package.class:setLastAlarmTime('CPU_HIGH',event._start_time_) 是 自 定 义 Java 函数，作用是在全局变量或缓存、存储系统中记录上次同类报警的时间。 |JAVA:package.class:setLastAlarmTime('CPU_HIGH',event._start_time_) 是 自 定 义 Java 函数，作用是在全局变量或缓存、存储系统中记录上次同类报警的时间。 |JAVA:package.class:setLastAlarmTime('CPU_HIGH',event._start_time_) 是 自 定 义 Java 函数，作用是在全局变量或缓存、存储系统中记录上次同类报警的时间。 |2.2 内置函数
内置函数是为了方便使用，引擎自带一些内置函数，内置函数的字母均为小写。如
前文提到的克林包上的 average、sum、tostring、max、min、first、count、countdistinct、tostringdistinct 函数。新版本中还支持下面几个常用函数。
字符串连接函数：concat 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
布尔运算函数：and、or、xor 
为了避免函数嵌套的类型匹配不正确，建议尽量使用自定义函数。
3.常用输入输出适配器
要在实际项目中用好 EPL,知道常用的输入输出适配器是必不可少的，因为现实模型
往往不是一条 EPL 语句就可以建模的，而是多条 EPL 连起来，多种流、多种操作
连起来的。
3.1 声明输入（程序输入或级联输入）连起来的。
3.1 声明输入（程序输入或级联输入）
com.sodbase.inputadaptor.StubInputAdaptor 
参数 1：流名称
本身不产生数据，声明数据要从程序中输入或从其它 EPL 的输出级联输入。
3.2 定时、延时事件输出 
3.2.1 定时事件生成
com.sodbase.inputadaptor.timer.TimerInputAdaptor 参数 1：流名称
参数 2：开始时间，需要在当前时间后格式"yyyy-MM-dd HH:mm:ss" 参数 3：周期 
还有一个没有开始时间的定时事件
com.sodbase.inputadaptor.TimerInputAdaptor 
	北京速德贝斯科技有限公司 WWW.SODBASE.COM
 SODBASECEP 入门与进阶教程
参数 1：流名称
参数 2：周期
3.2.2 定时延时参数 1：流名称
参数 2：周期
3.2.2 定时延时
com.sodbase.outputadaptor.timer.FixedDelayTimerOutputAdaptor 
参数 1：延时事件生成的流名称
参数 2：延时时间
例：为 callstream 中的 eventtype ='start'的事件生成延时事件，形成新的流
calltimeoutevent
CREATE QUERY calltimeout 
SELECT 'timer' AS type,T1.time AS time,T1.callerid  AS callerid FROM T1:callstream 
PATTERN T1 
WHERE T1.eventtype ='start' 
WITHIN 0 
输出适配器配置
[html] view plaincopy 
1.1.
2.true
3.com.sodbase.outputadaptor.timer.Fixe 	dDelayTimerOutputAdaptor
4.calltimeoutevent 
5.1000 
6.false 
北京速德贝斯科技有限公司 WWW.SODBASE.COM
	 SODBASECEP 入门与进阶教程 7.calltimeout 
8.
9.
3.2.3 变量延时
com.sodbase.outputadaptor.timer.DelayTimerOutputAdaptor 
参数 1：延时事件生成的流名称
参数 2：确定延时时间的字段，即延时长短由事件中的字段值决定
在信息系统中做事件引擎可用于流程审批用户自定义超时跳转，在算法交易中可用
于定时交易或拆单策略