# Title: Native Client: A Sandbox for Portable, Untrusted x86 Native Code

## Authors:
- Bennet Yee
- David Sehr
- Gregory Dardyk
- J. Bradley Chen
- Robert Muth
- Tavis Ormandy
- Shiki Okasaka
- Neha Narula
- Nicholas Fullagar

## Conference:
2009 30th IEEE Symposium on Security and Privacy

## Abstract
This paper presents the design, implementation, and evaluation of Native Client, a sandbox for untrusted x86 native code. Native Client aims to provide browser-based applications with the computational performance of native applications while maintaining safety. It uses software fault isolation and a secure runtime to manage system interactions and side effects through controlled interfaces. Native Client supports operating system portability for binary code and includes performance-oriented features such as thread support, instruction set extensions (e.g., SSE), and the use of compiler intrinsics and hand-coded assembly. The open architecture encourages community review and third-party tool development.

## 1. Introduction
Modern web browsers offer a powerful platform that combines seamless access to Internet resources, high-productivity programming languages like JavaScript, and the rich Document Object Model (DOM) for graphics and user interaction. Despite these strengths, web applications are often limited by computational performance. Many complex computations, such as Newtonian physics simulations, computational fluid dynamics, and high-resolution scene rendering, are infeasible due to performance constraints. Additionally, the current environment does not easily support the integration of high-quality code written in languages other than JavaScript.

Web browsers provide extension mechanisms like ActiveX and NPAPI to run native code as part of web applications. However, these architectures allow plugins to bypass security mechanisms, leading to potential security risks. Manual trust establishment and installation of console applications have historically been inadequate, resulting in the execution of malicious native code and causing significant inconvenience and economic harm.

Native Client addresses these issues by separating the problem of safe native execution from the need to extend trust. It consists of a constrained execution environment to prevent unintended side effects and a runtime for hosting native code extensions, allowing safe side effects.

The main contributions of this work include:
- An infrastructure for OS and browser-portable sandboxed x86 binary modules.
- Support for advanced performance capabilities such as threads, SSE instructions, compiler intrinsics, and hand-coded assembly.
- An open system designed for easy retargeting of new compilers and languages.
- Refinements to CISC software fault isolation using x86 segments for improved simplicity and reduced overhead.

Overall, Native Client provides sandboxed execution of native code, ensuring portability across operating systems and delivering native code performance in the browser.

## 1.1. Threat Model
Native Client should handle untrusted modules from any website with comparable safety to accepted systems like JavaScript. When an untrusted module is presented, it may contain arbitrary code and data. The NaCl runtime must verify that the module conforms to validity rules; non-conforming modules are rejected.

Once a conforming NaCl module is accepted, the runtime must constrain its activity to prevent unintended side effects, such as unauthorized access to the native operating system's system call interface. The NaCl module can attempt various behaviors within the NaCl execution environment, including executing any reachable instruction block, exercising the NaCl application binary interface, and sending arbitrary data via intermodule communication. The module can also allocate memory, spawn threads, and attempt to exploit race conditions. We argue that our architecture and code validity rules effectively constrain NaCl modules within the sandbox.

## 2. System Architecture
A NaCl application comprises trusted and untrusted components. Figure 1 illustrates a hypothetical NaCl-based application for managing and sharing photos. The application has two components: a user interface implemented in JavaScript and running in the browser, and an image processing library (imglib.nexe) implemented as a NaCl module. Both components are portable across operating systems and browsers, with native code portability enabled by Native Client.

Before running the photo application, the user installs Native Client as a browser plugin. The NaCl browser plugin is OS and browser-specific and is trusted, having full access to the OS system call interface. When the user navigates to the photo application's website, the browser loads and executes the JavaScript components, which in turn invoke the NaCl browser plugin to load the image processing library into a NaCl container. The native code module is loaded silently, without requiring permission.

Each component runs in its own private address space. Inter-component communication is based on Native Client's reliable datagram service, the IMC (Inter-Module Communications). For communications between the browser and a NaCl module, Native Client provides two options: a Simple RPC facility (SRPC) and the Netscape Plugin Application Programming Interface (NPAPI), both implemented on top of the IMC. The IMC also provides shared memory segments and synchronization objects to reduce messaging overhead for high-volume or high-frequency communications.

The NaCl module has access to a "service runtime" interface, providing memory management, thread creation, and other system services. This interface is similar to the system call interface of a conventional operating system.

In this paper, "NaCl module" refers to untrusted native code. Applications can use multiple NaCl modules, and both trusted and untrusted components may use the IMC. For example, the photo application might optionally use a trusted NaCl service for local storage, as shown in Figure 2. The storage service must be installed as a native browser plugin and cannot be implemented as a NaCl module. If the storage service plugin is detected, the user interface establishes an IMC communication channel, enabling direct communication between the image library and the storage service.

Native Client is ideal for application components requiring pure computation but is not suitable for modules needing process creation, direct file system access, or unrestricted network access. Trusted facilities such as storage should be implemented outside of Native Client to ensure simplicity, robustness, and strict isolation.

## 2.1. The Inner Sandbox
Native Client is built around an x86-specific intra-process "inner sandbox." To provide defense in depth, we also developed an "outer sandbox" that mediates system calls at the process boundary. The outer sandbox is similar to prior structures like systrace and Janus and will not be discussed in detail here.

The inner sandbox uses static analysis to detect security defects in untrusted x86 code. Practices such as self-modifying code and overlapping instructions, which make analysis challenging, are disallowed through alignment and structural rules. These rules ensure that the native code module can be reliably disassembled, identifying all reachable instructions. The validator then ensures that the executable includes only a subset of legal instructions, disallowing unsafe machine instructions.

The inner sandbox further uses x86 segmented memory to constrain data and instruction memory references. Leveraging existing hardware for range checks simplifies runtime checks and reduces the performance impact of safety mechanisms.

This inner sandbox creates a security subdomain within a native operating system process, allowing a trusted service runtime subsystem to coexist with the untrusted application module. A secure trampoline/springboard mechanism enables safe transfer of control between trusted and untrusted code. The inner sandbox not only isolates the system from the native module but also helps isolate the native module from the operating system.

## 2.2. Runtime Facilities
The sandboxes prevent unwanted side effects, but some side effects are necessary for a native module to be useful. For interprocess communications, Native Client provides the "Inter-Module Communications" (IMC) service, which allows trusted and untrusted modules to send and receive datagrams consisting of untyped byte arrays and optional "NaCl Resource Descriptors" for sharing files, shared memory objects, and communication channels. The IMC is the basis for two higher-level abstractions: the Simple Remote Procedure Call (SRPC) facility and NPAPI.

The SRPC facility provides a convenient syntax for defining and using subroutines across NaCl module boundaries, including calls to NaCl code from JavaScript in the browser. NPAPI provides a familiar interface to interact with browser state, conforming to existing constraints for content safety. These mechanisms can be used for general interaction with conventional browser content, including content modifications, handling mouse and keyboard activity, and fetching additional site content.

The service runtime provides a set of system services commonly associated with an application programming environment. It includes `sysbrk()` and `mmap()` system calls for memory allocation, a subset of the POSIX threads interface for thread management, and the common POSIX file I/O interface for operations on communication channels and web-based read-only content. Network system calls are omitted to prevent unintended network access; NaCl modules can access the network via JavaScript, subject to the same constraints as other JavaScript access.

The NaCl development environment is largely based on Linux open-source systems and will be familiar to most Linux and Unix developers. Porting existing Linux libraries is generally straightforward, often requiring no source changes.

## 2.3. Attack Surface
We recognize the following system components as potential targets for attackers:
- Inner sandbox: binary validation
- Outer sandbox: OS system-call interception
- Service runtime binary module loader
- Service runtime trampoline interfaces
- IMC communications interface
- NPAPI interface

In addition to the inner and outer sandbox, the system design incorporates CPU and NaCl module blacklists.

## 3. Implementation Details
This section provides additional implementation details, organized around major system components.

## 4. Evaluation
This section evaluates the system using more realistic applications and application components.

## 5. Implications
This section discusses the implications of this work.

## 6. Related Work
This section discusses relevant prior and contemporary systems.

## 7. Conclusion
This section concludes the paper.