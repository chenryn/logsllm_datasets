performance worsens when the network size grows larger (1, 600
nodes, 4 blocks, 456 seconds). Since Bitcoin-NG is a variant of
Nakamoto consensus, nodes have to broadcast all blocks to the
whole network since they are needed for the consensus protocol
of the next epoch. Thus, increasing the block throughput entails a
longer overall latency, especially when the network grows. ELAS-
TICO, on the other hand, scales up the throughput as more nodes
join the network without expanding the system latency, as we estab-
lish in Section 5.2. ELASTICO does that by decoupling messages
needed for consensus from the ﬁnal data broadcast.
In terms of bandwidth consumption, the bandwidth used at each
node in Bitcoin-NG increases linearly with the throughput, e.g.,
2.04 and 4.05 MB per node when there are 1 and 2 data blocks
respectively. This is because Bitcoin-NG needs to broadcast all
blocks to the network for the next consensus step, thus more blocks,
more bandwidth used. On the other hand, in ELASTICO, only the
block headers are broadcast to the whole network since ELAS-
TICO decouples data broadcast from consensus metadata. There-
fore the bandwidth used at each node for the consensus step re-
mains roughly the same, regardless of the throughput, e.g., 4.93
and 5.01 MB when there are 4 and 8 blocks per epoch respectively.
Network constraint in PBFT. We next measure the scalability
of traditional byzantine consensus protocols. The selected candi-
date is PBFT [13] with our own implementation. Similar to the
experiments with Bitcoin-NG, we report the number of messages
exchanged per node, the bandwidth consumed at each node and the
latency to reach consensus for various network sizes. The results
of our experiments are in Figure 5 and Figure 6. Note that all com-
munications are done via a peer-to-peer network, with each node
connects to 4 other peers randomly.
We observe that the bandwidth cost and the total number of mes-
sages exchanged at each node increase linearly with the size of the
network. For example, a node sends/ receives 970 and 1, 930 mes-
sages when the network is of sizes 80 and 160 respectively. Simi-
larly, the latency grows quadratically as we introduce more nodes.
For instance, when network size increases from 40 to 80 nodes (2
times), the latency is 6 times longer (e.g., from 3 seconds to 18
seconds). This linear increase in cost and quadratic increase in la-
tency render PBFT inefﬁcient even if the network has only a few
hundreds nodes. In fact, our experiment when the network has 320
nodes did not terminate after running for 1 hour. We remark that
in our experiments, there is no faulty (malicious) nodes. Thus, the
cost will increase if we introduce faulty nodes in our experiments.
Figure 5: Cost per node in PBFT increases linearly with the size of
the network.
)
s
(
y
c
n
e
t
a
L
150
100
50
0
56
18
1 2
3
10 20
40
Network size (number of nodes)
100
80
165
160
Figure 6: Latency to reach consensus in PBFT with different network sizes
6. RELATED WORK
We compare our solution to existing solutions for blockchain
scalability in Table 2. The detailed discussions are below.
6.1 Centralized Sharding Protocols
ELASTICO is related to other sharding protocols in distributed
databases, e.g., Google’s Spanner [15], Scatter [16], RSCoin [39].
However, these sharding protocols consider a different model which
does not handle byzantine failures, make assumptions of PKI sys-
tems and a trusted infrastructure and access to external random
seed. For example, RSCoin only works for centralized cryptocur-
rencies where there is a central point of trust (central bank). Such
protocols are inapplicable to deploy in a byzantine environment like
blockchains. In fact, sharding is a well-recognized open problem
in byzantine environment [10].
In this work, we explain all the
challenges and propose the ﬁrst such sharding solution in the par-
tially synchronous setting. We have established that ELASTICO is
secure and cost-efﬁcient even with byzantine adversaries, allowing
the transaction throughput to scale up almost linearly with the net-
work computation capacity.
6.2 Blockchain Scalability Solutions
Building a scalable blockchain is an active problem in the Bit-
coin and cryptocurrency community. There have been several pro-
posals from both academia and industry.
The ﬁrst approach is to push more blocks to the blockchain, e.g.,
GHOST [40], Bitcoin-NG [9]. GHOST modiﬁes the rule to accept
the main valid blockchain to accept not only the earliest block at
each epoch, but also other blocks which are found later, e.g., “or-
0 500 1000 1500 2000 2500 4.50 4.60 4.70 4.80 4.90 5.00 5.10 5.20 5.30 10 20 40 80 100 160 No. of messages Bandwidth (MB) Network size (number of nodes) Data bandwidth Main messages's bandwidth No. of messages BFT
Tendermint [35]
IBM Blockchain [36]
Chain OS [19]
DigitalAsset [37]
Candidate
Decentralized Yes (cid:88)
Identity-less
Bandwidth
(per node)
Scalability
O(n2)
No
No
Nakamoto
Bitcoin [1]
Ethereum [38]
BitcoinNG [9]
IntelLedger [18]
Yes (cid:88)
Yes (cid:88)
Constant (cid:88)
No
Quorum-BFT Two-phase commit
ELASTICO
Ripple [22]
Stellar [21]
No
No
O(n)
No
Spanner [15]
RSCoin [39]
Databases
No
No
Constant (cid:88)
Yes (cid:88)
This work
Yes (cid:88)
Yes (cid:88)
Constant (cid:88)
Yes (cid:88)
Table 2: Comparison between ELASTICO and existing blockchain protocols in academia and industry. ELASTICO is the ﬁrst solution which can scale up the
throughput when the network size increases in a byzantine and decentralized environment.
phaned blocks". On the other hand, Bitcoin-NG allows each leader
in an epoch to propose more blocks to the network. Both GHOST
and Bitcoin-NG succeed at allowing block parallelism in the net-
work, but they do not localize the veriﬁcation of transactions as
in ELASTICO. Thus, more transactions in the network, more lo-
cal computation is required at each node and delay the consensus
process as pointed out in previous work [41].
A different approach for increasing Bitcoin’s transaction through-
put is to allow transactions to take place outside of the main Bitcoin
blockchain. Two prominent examples are lightning-network [42]
and Sidechains [43]. Lightning-network creates offchain micro-
payment channels between users. Thus users can send multiple and
instant transactions more efﬁciently, with only a few transactions
included in the blockchain. Sidechains takes a different approach
to allow users to move coins to different blockchain, thus allowing
Bitcoin transactions to happen elsewhere. It is widely understood
that Sidechains do not solve the scalability problem in Bitcoin [44].
Both the techniques, although improve the transaction throughput
signiﬁcantly, are applications running on top of Bitcoin thus still
rely on the scalability of the underlying protocol. It is worth not-
ing that applications enabled by Sidechains do not enjoy the same
security guarantee provided by Bitcoin, and micro-payment chan-
nels only work for a few applications. ELASTICO, however, allows
scaling up the underlying blockchain protocol without degrading
any security property.
Buterin et al. also address the scalability problem in blockchain
with sampling and challenging techniques [45]. Similar to ELAS-
TICO, the paper’s approach is to use sharding. However, the pro-
tocol “randomly" samples veriﬁers to verify others’ updates, and
allows users to challenge others’ veriﬁcation results if they ever
detect an invalid update. The solution relies on a random seed, for
which the paper does not provide any security analysis. Further, the
paper does not consider byzantine adversaries but rational ones in a
“cryptoeconomic" threat model, which is different from the threat
model that we consider in this paper.
Recent non-peer-reviewed proposals including Stellar [21], Rip-
ple [22], and Tendermint [35] claim to support high transaction
rate, but either have weaker threat models or are not as scalable
as ELASTICO. Speciﬁcally, Tendermint assumes all identities are
known before the protocol starts, thus is not applicable in decen-
tralized environments like cryptocurrencies. Besides, Tendermint
is essentially a variant of PBFT 4, which has its own scalability lim-
itation if the network size grows as we discussed in Section 2. Plus,
the network nodes in Ripple and Stellar are permissioned, hence it
faces no challenges of establishing identities. For instance, identi-
ties in Stellar need ﬁnancial agreements or reputations of others to
form their “slices" (or committees). In Elastico, these have to be
chosen randomly based on computational assumptions.
4http://tendermint.com/posts/tendermint-vs-pbft/
6.3 Prior Byzantine Consensus Protocols
There have been signiﬁcant efforts devoted to developing scal-
able communication-efﬁcient consensus protocols. The idea of di-
viding the users into committees (as we do in this paper) is preva-
lent in the existing literature; ﬁrst introduced by Bracha [46].
If the users are honest, but crash prone, there exists an optimal
algorithm with Θ(n) communication complexity based on the idea
of universe reduction, i.e., choosing a small committee to manage
the process [47].
If the users are malicious, it is much more difﬁcult to achieve
good communication complexity. For many years, the best known
protocols had exponential communication complexity [11, 12]. A
key improvement was made by Srikanth et al. [14], who developed
an efﬁcient algorithm with polynomial communication complexity.
While the preceding algorithms generally assumed a synchronous
network, there was also signiﬁcant work on consensus in asyn-
chronous and partially synchronous networks. In a seminal paper,
Castro et al. [13] implemented a replicated state machine based on
Byzantine agreement, often described as the ﬁrst practical BFT sys-
tem. It led to a ﬂoor of work on Byzantine agreement, with many
attempts to improve the efﬁciency and trade-off different aspects of
the performance (e.g., [48–51]).
Despite these signiﬁcant efforts, these protocols remained band-
width limited, typically requiring Θ(n2) messages (or more). Over
the last several years, there has been an exciting breakthrough [52–
55], reducing the communication complexity of agreement to O(n·
polylog(n)) for a system with n players. The basic idea is to ﬁrst
solve almost everywhere agreement, convincing most of the users
to agree on a single value. Then, a secondary almost-everywhere-
to-everywhere protocol is used to spread the information to the re-
maining laggards. To achieve almost everywhere agreement, they
assign the users to committees, and organize the committees into a
tree with a guarantee that almost all the committees have a majority
of honest users (using an adapted version of Feige’s leader election
algorithm [56]). A leader is elected at the root of the tree, and then
information is propagated down the tree to everyone. Later, to cope
with an adaptive adversary, secret sharing and additional informa-
tion hiding techniques are needed [57]. However, the protocols are
complex and practical implementations are yet to be demonstrated.
ELASTICO is not directly comparable to these newer communi-
cation efﬁcient protocols: ELASTICO is simpler and works in open
networks like cryptocurrencies where identities are unknown. Its
key advantage is in using computational power to tune the paral-
lelization of network, yet detaining security on bounded computa-
tional assumption.
ELASTICO is related to other protocols which use proof of work
for processors to establish their identities [58–61]. The main differ-
ence here is that ELASTICO is a sharding protocol, and establishing
identities is just the ﬁrst step of the 5 major steps in the protocol.
7. CONCLUSION
We present ELASTICO, the ﬁrst candidate for a secure shard-
ing protocol for permissionless blockchains. At its core, ELAS-
TICO scales up the agreement throughput near linearly with the
computational power of the network and tolerates byzantine adver-
saries which controls up to one-forth computation capacity, in the
partially synchronous network.
It offers promising scalability in
experiments and suggest strong usability in next-generation cryp-
tocurrencies.
8. ACKNOWLEDGMENT
We thank Dawn Song, Elaine Shi, Christian Cachin, Andrew
Miller, Jason Teutsch, Shweta Shinde, Shruti Tople, Alex Zikai
Wen, Hung Dang, Xiao Liu and Vincent Gramoli for useful dis-
cussions and feedback on the early version of the paper.
This research is supported by the National Research Foundation,
Prime Minister’s Ofﬁce, Singapore under its National Cybersecu-
rity R&D Program (Award No. NRF2014NCR-NCR001-21) and
administered by the National Cybersecurity R&D Directorate. All
opinions expressed in this work are solely those of the authors.
9. REFERENCES
[1] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash
system. bitcoin.org, 2009.
[2] Blockchain stats. Bitcoin statistics.
https://blockchain.info/stats, 2012.
[3] Bitcoin wiki. Scalability.
https://en.bitcoin.it/wiki/Scalability, 2015.
[4] Mastercard. Mastercard’s transaction per second.
http://newsroom.mastercard.com/2012/11/26/mastercard-
sees-black-friday-performance-up-26-percent/, 2016.
[5] Visa. Visa’s transactions per second. https://usa.visa.com/
content_library/modal/beneﬁts-accepting-visa.html, 2016.
[6] Jeff Garzik. Making decentralized economic policy. http://
gtf.org/garzik/bitcoin/BIP100-blocksizechangeproposal.pdf,
2015.
[7] Gavin Andresen. Bitcoin improvement proposal 101. https:
//github.com/bitcoin/bips/blob/master/bip-0101.mediawiki,
2015.
[8] Jeff Garzik. Bitcoin improvement proposal 102. https:
//github.com/bitcoin/bips/blob/master/bip-0102.mediawiki,
2015.
[9] Ittay Eyal, Adem Efe Gencer, Emin Gun Sirer, and Robbert
van Renesse. Bitcoin-ng: A scalable blockchain protocol.
http://arxiv.org/abs/1510.02037, 2015.
[10] Kyle Croman, Christian Decker, Ittay Eyal, Adem Efe
Gencer, Ari Juels, Ahmed Kosba, Andrew Miller, Prateek
Saxena, Elaine Shi, Emin Gun Sirer, Dawn Song, and Roger
Wattenhofer. On scaling decentralized blockchains (a
position paper). Workshop on Bitcoin and Blockchain
Research, 2016.
[11] M. Pease, R. Shostak, and L. Lamport. Reaching agreement
in the presence of faults. J. ACM, 27(2):228–234, April 1980.
[12] Leslie Lamport, Robert Shostak, and Marshall Pease. The
byzantine generals problem. ACM Trans. Program. Lang.
Syst., 4(3):382–401, July 1982.
[13] Miguel Castro and Barbara Liskov. Practical byzantine fault
tolerance. In Proceedings of the Third Symposium on
Operating Systems Design and Implementation, pages
173–186. USENIX Association, 1999.
[14] Sam Toueg, Kenneth J. Perry, and T. K. Srikanth. Fast
distributed agreement (preliminary version). In Proceedings
of the Fourth Annual ACM Symposium on Principles of
Distributed Computing, pages 87–101. ACM, 1985.