Lua
===
`Lua` 是一门扩展式程序设计语言，被设计成支持通用过程式编程，并有相关数据描述设施。 同时对面向对象编程、函数式编程和数据驱动式编程也提供了良好的支持。 它作为一个强大、轻量的嵌入式脚本语言，可供任何需要的程序使用。 `Lua` 由 clean C（标准 C 和 C++ 间共通的子集） 实现成一个库。
作为一门扩展式语言，`Lua` 没有 `main` 程序的概念： 它只能 嵌入 一个宿主程序中工作， 该宿主程序被称为 被嵌入程序 或者简称 宿主 。 宿主程序可以调用函数执行一小段 `Lua` 代码，可以读写 `Lua` 变量，可以注册 `C` 函数让 `Lua` 代码调用。 依靠 C 函数，`Lua` 可以共享相同的语法框架来定制编程语言，从而适用不同的领域。 `Lua` 的官方发布版包含一个叫做 lua 的宿主程序示例， 它是一个利用 `Lua` 库实现的完整独立的 `Lua` 解释器，可用于交互式应用或批处理。
`Lua` 是一个自由软件，其使用许可证决定了它的使用过程无需任何担保。 本手册所描述的实现可以在 `Lua` 的官方网站 [www.lua.org](www.lua.org) 找到。
与其它的许多参考手册一样，这份文档有些地方比较枯燥。 关于 `Lua` 背后的设计思想， 可以看看 `Lua` 网站上提供的技术论文。 至于用 `Lua` 编程的细节介绍， 请参阅 Roberto 的书，Programming in `Lua`。
[LuaRocks is the package manager for Lua modules.](https://luarocks.org/)  
[下面翻译来源于](http://cloudwu.github.io/lua53doc/manual.html#3.3.1)  
译者在翻译时，使用了一些尚未统一的中文术语译词，统一罗列如下：  
```
元表      metatable  
元方法    metamethod  
弱表      weak table  
协程      coroutine  
闭包      closure  
注册表    registry  
让出      yield  
表        table  
用户数据   userdata  
延续点     continuation  
宿主      host  
一等公民   first-class  
语法糖     syntactic sugar  
序列      sequence  
异构      heterogeneous  
终结器     finalizer  
暂时表     ephemeron table  
符记      token  
字面串     literal string  
代码块     chunk  
标签      label  
实例化     instantiated  
上值      upvalue  
```
- [简介](#简介)
- [基本概念](#基本概念)
  - [值与类型](#值与类型)
  - [环境与全局环境](#环境与全局环境)
  - [错误处理](#错误处理)
  - [元表及元方法](#元表及元方法)
  - [垃圾收集](#垃圾收集)
    - [垃圾收集元方法](#垃圾收集元方法)
    - [弱表](#弱表)
  - [协程](#协程)
- [语言定义](#语言定义)
  - [词法约定](#词法约定)
  - [变量](#变量)
  - [语句](#语句)
    - [语句块](#语句块)
    - [代码块](#代码块)
    - [赋值](#赋值)
    - [控制结构](#控制结构)
    - [For 语句](#for-语句)
    - [函数调用语句](#函数调用语句)
    - [局部声明](#局部声明)
  - [表达式](#表达式)
    - [数学运算操作符](#数学运算操作符)
    - [位操作符](#位操作符)
    - [强制转换](#强制转换)
    - [比较操作符](#比较操作符)
    - [逻辑操作符](#逻辑操作符)
    - [字符串连接](#字符串连接)
    - [取长度操作符](#取长度操作符)
    - [优先级](#优先级)
    - [表构建](#表构建)
    - [函数调用](#函数调用)
    - [函数定义](#函数定义)
  - [可见性规则](#可见性规则)
- [编程接口](#编程接口)
  - [栈](#栈)
  - [栈大小](#栈大小)
  - [有效索引与可接受索引](#有效索引与可接受索引)
  - [C 闭包](#c-闭包)
  - [注册表](#注册表)
  - [C 中的错误处理](#c-中的错误处理)
  - [C 中的让出处理](#c-中的让出处理)
  - [函数和类型](#函数和类型)
    - [lua_absindex](#lua_absindex)
    - [lua_Alloc](#lua_alloc)
    - [lua_arith](#lua_arith)
    - [lua_atpanic](#lua_atpanic)
    - [lua_call](#lua_call)
    - [lua_callk](#lua_callk)
    - [lua_CFunction](#lua_cfunction)
    - [lua_checkstack](#lua_checkstack)
    - [lua_close](#lua_close)
    - [lua_compare](#lua_compare)
    - [lua_concat](#lua_concat)
    - [lua_copy](#lua_copy)
    - [lua_createtable](#lua_createtable)
    - [lua_dump](#lua_dump)
    - [lua_error](#lua_error)
    - [lua_gc](#lua_gc)
    - [lua_getallocf](#lua_getallocf)
    - [lua_getfield](#lua_getfield)
    - [lua_getextraspace](#lua_getextraspace)
    - [lua_getglobal](#lua_getglobal)
    - [lua_geti](#lua_geti)
    - [lua_getmetatable](#lua_getmetatable)
    - [lua_gettable](#lua_gettable)
    - [lua_gettop](#lua_gettop)
    - [lua_getuservalue](#lua_getuservalue)
    - [lua_insert](#lua_insert)
    - [lua_Integer](#lua_integer)
    - [lua_isboolean](#lua_isboolean)
    - [lua_iscfunction](#lua_iscfunction)
    - [lua_isfunction](#lua_isfunction)
    - [lua_isinteger](#lua_isinteger)
    - [lua_islightuserdata](#lua_islightuserdata)
    - [lua_isnil](#lua_isnil)
    - [lua_isnone](#lua_isnone)
    - [lua_isnoneornil](#lua_isnoneornil)
    - [lua_isnumber](#lua_isnumber)
    - [lua_isstring](#lua_isstring)
    - [lua_istable](#lua_istable)
    - [lua_isthread](#lua_isthread)
    - [lua_isuserdata](#lua_isuserdata)
    - [lua_isyieldable](#lua_isyieldable)
    - [lua_KContext](#lua_kcontext)
    - [lua_KFunction](#lua_kfunction)
    - [lua_len](#lua_len)
    - [lua_load](#lua_load)
    - [lua_newstate](#lua_newstate)
    - [lua_newtable](#lua_newtable)
    - [lua_newthread](#lua_newthread)
    - [lua_newuserdata](#lua_newuserdata)
    - [lua_next](#lua_next)
    - [lua_Number](#lua_number)
    - [lua_numbertointeger](#lua_numbertointeger)
    - [lua_pcall](#lua_pcall)
    - [lua_pcallk](#lua_pcallk)
    - [lua_pop](#lua_pop)
    - [lua_pushboolean](#lua_pushboolean)
    - [lua_pushcclosure](#lua_pushcclosure)
    - [lua_pushcfunction](#lua_pushcfunction)
    - [lua_pushfstring](#lua_pushfstring)
    - [lua_pushglobaltable](#lua_pushglobaltable)
    - [lua_pushinteger](#lua_pushinteger)
    - [lua_pushlightuserdata](#lua_pushlightuserdata)
    - [lua_pushliteral](#lua_pushliteral)
    - [lua_pushlstring](#lua_pushlstring)
    - [lua_pushnil](#lua_pushnil)
    - [lua_pushnumber](#lua_pushnumber)
    - [lua_pushstring](#lua_pushstring)
    - [lua_pushthread](#lua_pushthread)
    - [lua_pushvalue](#lua_pushvalue)
    - [lua_pushvfstring](#lua_pushvfstring)
    - [lua_rawequal](#lua_rawequal)
    - [lua_rawget](#lua_rawget)
    - [lua_rawgeti](#lua_rawgeti)
    - [lua_rawgetp](#lua_rawgetp)
    - [lua_rawlen](#lua_rawlen)
    - [lua_rawset](#lua_rawset)
    - [lua_rawseti](#lua_rawseti)
    - [lua_rawsetp](#lua_rawsetp)
    - [lua_Reader](#lua_reader)
    - [lua_register](#lua_register)
    - [lua_replace](#lua_replace)
    - [lua_resume](#lua_resume)
    - [lua_rotate](#lua_rotate)
    - [lua_setallocf](#lua_setallocf)
    - [lua_setfield](#lua_setfield)
    - [lua_setglobal](#lua_setglobal)
    - [lua_seti](#lua_seti)
    - [lua_setmetatable](#lua_setmetatable)
    - [lua_settable](#lua_settable)
    - [lua_settop](#lua_settop)
    - [lua_setuservalue](#lua_setuservalue)
    - [lua_State](#lua_state)
    - [lua_status](#lua_status)
    - [lua_stringtonumber](#lua_stringtonumber)
    - [lua_toboolean](#lua_toboolean)
    - [lua_tocfunction](#lua_tocfunction)
    - [lua_tointeger](#lua_tointeger)
    - [lua_tointegerx](#lua_tointegerx)
    - [lua_tolstring](#lua_tolstring)
    - [lua_tonumber](#lua_tonumber)
    - [lua_tonumberx](#lua_tonumberx)
    - [lua_topointer](#lua_topointer)
    - [lua_tostring](#lua_tostring)
    - [lua_tothread](#lua_tothread)
    - [lua_touserdata](#lua_touserdata)
    - [lua_type](#lua_type)
    - [lua_typename](#lua_typename)
    - [lua_Unsigned](#lua_unsigned)
    - [lua_upvalueindex](#lua_upvalueindex)
    - [lua_version](#lua_version)
    - [lua_Writer](#lua_writer)
    - [lua_xmove](#lua_xmove)
    - [lua_yield](#lua_yield)
    - [lua_yieldk](#lua_yieldk)
  - [调试接口](#调试接口)
    - [lua_Debug](#lua_debug)
    - [lua_gethook](#lua_gethook)
    - [lua_gethookcount](#lua_gethookcount)
    - [lua_gethookmask](#lua_gethookmask)
    - [lua_getinfo](#lua_getinfo)
    - [lua_getlocal](#lua_getlocal)
    - [lua_getstack](#lua_getstack)
    - [lua_getupvalue](#lua_getupvalue)
    - [lua_Hook](#lua_hook)
    - [lua_sethook](#lua_sethook)
    - [lua_setlocal](#lua_setlocal)
    - [lua_setupvalue](#lua_setupvalue)
    - [lua_upvalueid](#lua_upvalueid)
    - [lua_upvaluejoin](#lua_upvaluejoin)
- [辅助库](#辅助库)
  - [函数和类型](#函数和类型-1)
    - [luaL_addchar](#lual_addchar)
    - [luaL_addlstring](#lual_addlstring)
    - [luaL_addsize](#lual_addsize)
    - [luaL_addstring](#lual_addstring)
    - [luaL_addvalue](#lual_addvalue)
    - [luaL_argcheck](#lual_argcheck)
    - [luaL_argerror](#lual_argerror)
    - [luaL_Buffer](#lual_buffer)
    - [luaL_buffinit](#lual_buffinit)
    - [luaL_buffinitsize](#lual_buffinitsize)
    - [luaL_callmeta](#lual_callmeta)
    - [luaL_checkany](#lual_checkany)