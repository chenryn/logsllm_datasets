title:Towards practical biometric key generation with randomized biometric
templates
author:Lucas Ballard and
Seny Kamara and
Fabian Monrose and
Michael K. Reiter
Towards Practical Biometric Key Generation
with Randomized Biometric Templates
∗
Lucas Ballard
Google, Inc.
PI:EMAIL
∗
Seny Kamara
Microsoft Research
PI:EMAIL
∗
Fabian Monrose
UNC Chapel Hill
PI:EMAIL
Michael K. Reiter
UNC Chapel Hill
PI:EMAIL
ABSTRACT
Although biometrics have garnered signiﬁcant interest as a source
of entropy for cryptographic key generation, recent studies indicate
that many biometric modalities may not actually offer enough un-
certainty for this purpose. In this paper, we exploit a novel source
of entropy that can be used with any biometric modality but that
has yet to be utilized for key generation, namely associating uncer-
tainty with the way in which the biometric input is measured. Our
construction poses only a modest requirement on a user: the abil-
ity to remember a low-entropy password. We identify the technical
challenges of this approach, and develop novel techniques to over-
come these difﬁculties. Our analysis of this approach indicates that
it may offer the potential to generate stronger keys: In our experi-
ments, 40% of the users are able to generate keys that are at least
230 times stronger than passwords alone.
Categories and Subject Descriptors
E.3 [Data Encryption]; H.1 [Models and Principles]: User/Machine
Systems
General Terms
Security, Design
Keywords
Biometrics, Cryptographic Keys
1.
INTRODUCTION
Humans are unable to generate and remember strong secrets, and
thus have difﬁculty managing cryptographic keys [1, 10]. To ad-
dress this problem, numerous proposals have been suggested to en-
able people to reliably generate high-entropy cryptographic keys
∗
Research conducted at Johns Hopkins University, Baltimore, MD.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
from their biometrics, or, measurements of their physiology or be-
havior. These Biometric Cryptographic Key Generators (BKGs)
are believed to be useful as they allow users to seamlessly recreate
strong keys. Unfortunately, despite interest in BKGs (e.g. [16, 15,
8, 7]), recent studies (e.g., [4, 19, 21, 3]) have shown that some bio-
metric modalities may be too weak to offer enough security for key
generation. To combat this problem, we explore new techniques of
extracting entropy from biometrics
In this paper we present a novel way to think about biometrics
and propose a new BKG that exploits a source of randomness that,
to our knowledge, has not been previously used to strengthen keys.
We suggest adding uncertainty to the way that a BKG measures the
biometric for each user. To reproduce the correct key, an adversary
must guess both the biometric input and the statistical features that
were used to measure the user. This approach both increases the
entropy of the keys and reduces the susceptibility of the BKG to
forgery. By carefully selecting strong features (i.e., those that are
easier for a speciﬁc user to replicate) we are able to reduce the error-
tolerance of each feature, and thus increase resistance to forgery.
To achieve our goals we propose Randomized Biometric Tem-
plates (RBTs), templates that can be used by legitimate users to
create keys, but are designed so that attackers cannot learn how to
measure biometric inputs. RBTs assign different features to differ-
ent users, and encode the features so that adversaries cannot deter-
mine which features were originally used to generate a key. The
utility of this approach is two-fold. First, it increases the work re-
quired to search for the correct key because an attacker must guess
both the set of features that were used, as well as the correct bio-
metric sample. Second, we are able to assign only strong features
to each user, so an attacker must provide a more precise guess of
the biometric input to correctly recreate the key.
In this paper we describe how to construct RBTs for any bio-
metric modality. We describe both the cryptographic construction
(Section 5) and the statistical process of selecting features (Sec-
tion 6). As we show, feature selection is non-trivial, but of the
utmost importance. We are able to craft algorithms that assign only
high-quality features to each user, but in a way that appears random
to an adversary. We provide arguments that RBTs are secure (Sec-
tion 7). Additionally, we empirically evaluate RBTs with recently-
proposed standards (Section 8). In particular, our empirical evalua-
tion focuses on an (arguably) weak biometric modality, and we are
able to show that for many users, our techniques are able to extract
more entropy than existing approaches. This provides evidence that
extracting entropy from the feature selection process can improve
the security afforded by BKGs.
2. RELATED WORK
Cryptographic keys can be derived from any number of biomet-
ric modalities. For instance, one can collect biometric readings of
an iris [11], ﬁngerprints [18, 20], or the geometry of a face. These
are examples of physiological biometrics as they measure concrete
aspects of a person’s biological traits. Behavioral biometrics, on
the other hand, measure how people perform actions. For exam-
ple, one could exploit properties of how a phrase is spoken [15] or
written [22], and even how people think. Behavioral biometrics are
attractive for key generation because while physiological biomet-
rics cannot change, behavioral biometrics change with the action
that is performed. This allows users to create different keys.
Monrose et al. proposed the ﬁrst practical system that uses be-
havioral (versus physiological) biometrics in key generation [16].
Their technique uses keystroke latencies to increase the entropy of
standard passwords. They show that their system yields keys that
are at least as strong as the password alone, and in some instances
their approach increases the workload of an attacker by a multi-
plicative factor of 215. The construction makes the important dis-
tinction of identifying which features, in this case, which keystroke
latencies, are useful (i.e., “distinguishing”) for a speciﬁc user, and
which are not. To do so, it sets a global threshold for each feature,
and extracts a bit for each user by assigning a 0 or 1 if her measure-
ments are consistently below or above that threshold. If the user
does not provide measurements that fall consistently on one side of
the threshold, then the system ignores that feature for that user.
RBTs are outwardly similar to the constructions of Monrose et
al., although they offer several advantages. First, although our ap-
proach also uses quantization for error correction, we partition the
range of each feature into more than two segments, and hence we
can achieve higher entropy rates and lower False Accept Rates.
Second, our notion of a “distinguishing” feature (i.e., the features
that we choose to assign to each user) is more ﬂexible. We assign
a feature to a user if she can reliably repeat that feature, even if the
mean value falls anywhere in the feature’s range. By contrast, the
construction of Monrose et al. ignores features that can be repeated
reliably, but whose mean falls directly on the global threshold. Fi-
nally, our approach is based on block ciphers and hash functions,
which are more computationally efﬁcient than the number theoretic
primitives that were used in that work.
There has also been work in “Fuzzy Cryptography.” The idea
of Fuzzy Cryptography was ﬁrst introduced by Juels and Watten-
berg [13], who describe a commitment scheme that supports noise-
tolerant decommitments. Further work included a Fuzzy Vault [12],
which was later classiﬁed as an instance of a Secure Sketch, which
can be used to build a Fuzzy Extractor [8, 6]. Fuzzy Extractors treat
biometrics as high-entropy, error-prone sources and apply error-
correction algorithms and randomness extractors to generate strings
that are close to random. As opposed to fuzzy extractors, which dis-
till the entropy of a biometric, our approach can be seen as distilling
the entropy of the biometric and the features used to measure it.
Recently we proposed techniques to evaluate BKGs. We ex-
amined the common practice of using weak forgeries to analyze
BKGs [4] and advocated using more realistic “trained” forgers to
provide a better estimate of security. We also explored “genera-
tive algorithms” as a way of using partial knowledge about a target
user’s biometric to create forgeries. Finally, we described a set
of necessary security requirements and proposed an algorithm that
probabilistically enumerates a key space to quickly ﬁnd a user’s
key [3]. In this work we adopt the same methodologies, and pro-
vide arguments that our construction meets the necessary security
requirements. We also empirically evaluate RBTs against trained
forgers, generative algorithms, and our search algorithm.
3. BIOMETRICS AND KEY GENERATION
To generate a key, a user’s biometric is measured as one or more
digital signals, which are processed by n statistical functions, or
features (φ1, . . . , φn). For a biometric to be useful for key genera-
tion, the signals, and consequently the output of the features, must
vary across the population. Additionally, the signals themselves
can often differ between measurements of the same user. This vari-
ation is due to the natural inconsistencies inherent to human phys-
iology or behavior. However, since cryptography requires keys to
be regenerated precisely, the biometrics must be error-corrected to
consistent values. Simple quantization has been shown to be useful
for voice and handwriting applications [16, 22, 7].
BKGs error-correct the output of features and create cryptographic
keys. This is typically accomplished with two algorithms: an en-
rollment algorithm and a key generation algorithm.
• Enroll(β1, . . . , β(cid:2), π): The enroll algorithm is a probabilistic
algorithm that accepts as input a number of biometric sam-
ples (β1, . . . , β(cid:2)), and potentially an extra source of random-
ness (π), and outputs a template (T ) and a cryptographic key
(K). In the event that β1, . . . , β(cid:2) do not meet some predeter-
mined criteria, the enroll algorithm might output the failure
symbol ⊥.
• KeyGen(β, π, T ): The key generation algorithm accepts as
input one biometric sample (β), potentially an extra source of
randomness (π), and a template (T ). The algorithm outputs
either a cryptographic key (K), or the failure symbol ⊥ if the
provided biometric sample cannot be used to create a key.
To see how a BKG might work in practice, consider an exam-
ple where a BKG-derived key is used for laptop ﬁle encryption.
Here, a user ﬁrst supplies a password π and number of biometric
samples to the BKG. The enrollment algorithm processes the sam-
ples to establish a “normal” proﬁle for the user, and then outputs
a template—which depends on both these samples and π—and a
cryptographic key. The laptop encrypts the ﬁle with the key and
stores the ciphertext, along with the template. Of course, π, the
key, and the enrollment samples are then purged from the system.
Later, when the user wishes to decrypt the ﬁle, she provides a pass-
word π(cid:2)
and a new biometric sample to the laptop, which provides
these and the stored template to the key generation algorithm. If
π(cid:2) = π and the new sample is similar to the ones provided during
enrollment, then the key output by the key generation algorithm
will be the same as the one used to encrypt the original ﬁle. The
new key can then be used to decrypt the ciphertext ﬁle.
3.1 Security Requirements
It should be apparent from this discussion that the security of this
approach relies on several assumptions. First of all, it is assumed
that the user’s biometric samples are not easily replicated by oth-
ers. That is, the biometric should be difﬁcult to forge, or otherwise
predict using auxiliary information. Auxiliary information is any
public information that is available to an attacker, such as other
users’ biometrics, templates, or keys.
If this is not the case, an
attacker can subvert the BKG by running KeyGen with the stored
template and replicated biometric input to extract the key. It is also
assumed that biometric template leaks no information about the key
or the biometric. Otherwise, the attacker could use the template to
help guess the key. Finally, it is assumed that the key has enough
entropy to resist brute force attacks.
For completeness, we reiterate our security requirements [3]:
• Biometric Uncertainty (REQ-BUN): The biometric samples
input to a BKG should be difﬁcult to predict. For human ad-
versaries, this amounts to showing that realistic attackers [4]
are not able to create forgeries, even when given auxiliary
information. For algorithmic adversaries, this amounts to
showing that the biometric has high entropy across the user
population [8, 9, 3]. Also, one must show that generative
algorithms cannot create accurate forgeries [4].
• Key Randomness (REQ-KR): Assuming REQ-BUN, the keys
output by a BKG appear random to any adversary who has
access to auxiliary information and the template used to de-
rive the key. For instance, one might require that the key be
computationally indistinguishable from random.
• Strong Biometric Privacy (REQ-SBP): Assuming biometric
uncertainty, an adversary learns no useful information about
a biometric given auxiliary information, the template used to
derive the key, and the key itself. For instance, no compu-
tationally bounded adversary should be able to compute any
function of the biometric.
In order to evaluate a practical BKG, one must show that each of
these properties holds. Part of the difﬁculty in evaluating the secu-
rity of a BKG, however, stems from the fact that both empirical and
cryptographic arguments are necessary to address these require-
ments. More precisely, showing REQ-BUN requires an empirical
argument using populations of users. On the other hand, showing
REQ-KR and REQ-SBP requires cryptographic arguments show-
ing that the template is secure provided that REQ-BUN holds. In
Section 7 we argue informally that RBTs achieve REQ-KR and
REQ-SBP.
In Section 8 we provide an empirical evaluation of
REQ-BUN for RBTs against each of the adversaries in [4] and [3].
4. OVERVIEW AND PRELIMINARIES
The most straightforward approach to designing RBTs would be
to take an arbitrary template, which describes the features for the
user in question, and encrypt it with a key known only to the user.
Obviously, this cannot work in our setting because if we had access
to a key that was strong enough for encryption then there would
be no need for the BKG in the ﬁrst place. Instead, we develop an
approach inspired by that of Lomas et al. in a different domain,
where no veriﬁable plaintexts are encrypted under the low-entropy
password [14]. Speciﬁcally, the decryption of the ciphertext using