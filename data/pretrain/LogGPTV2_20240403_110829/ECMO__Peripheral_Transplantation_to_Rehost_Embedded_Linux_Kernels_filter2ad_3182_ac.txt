Linux kernel binary, i.e., LKB. Note that, we first need to get the
source code of the functions, i.e., SC, inside the mainline Linux
kernel. The outputs of this algorithm are the addresses of ECMO
Pointers, i.e., FA (line 12).
First, we disassemble the decompressed Linux kernel, construct
the control flow graph (line 2) and generate function boundaries
(line 3). Then for the source code function of each ECMO Pointer
(line 4), we loop through the generated functions (line 5) and apply
different filtering strategies (line 6). If one filtering strategy can
identify one address as a candidate address of the ECMO Pointer
(line 7), this address will be appended to the candidate list (line 8).
Finally, we check the candidates of each ECMO Pointer (line 9). If
there is only one candidate (line 10), it means the address of this
ECMO Pointer is successfully identified in the kernel binary (line
11). Note that even if there is more than one candidate for each
ECMO Pointer, ECMO can automatically try all the candidates and
the one that can rehost the Linux kernel should be the right one.
We do not find such cases in our experiments.
Strategy-I: Lexical information The first strategy uses the lex-
ical information inside a function as its signature, e.g., a specific
Assembly: foo
foo_offset+0x0:       ldr r0, [pc, #248]       
Code: foo (args)
{
    . . .
foo_offset+0x100 :  foo_offset+0x200
    print_func (“This is specific string ");
foo_offset+0x200:   This is specific string 
    . . .
}
(a) Specific constant string: the constant string is referenced by a data pointer (i.e.,
foo_offset+0x200).
Assembly: foo
foo_offset+0x0:       ldr r0, [pc, #248] 
foo_offset+0x4:       mov r1, #386 
foo_offset+0x8:       bl warn_func
foo_offset+0x100:   0x00000200
File: /path/to/source.c
Code: foo (args)
{
    . . .
    WARN_ON (condition);  /*Line 386*/
foo_offset+0x200:   /path/to/source.c      
    . . .
}
(b) Warning information: line number (i.e., 386) is the operand of assembly code; file
name (i.e., /path/to/source.c) is a constant string.
Figure 8: Strategy-I: Lexical information
constant string and the warning information. If the function we
want to identify has such strings, we can then lookup the disassem-
bly code to find the functions that have data references to the same
string. The line number and file name in the warning information
can further help to locate the function.
Fig. 8(a) shows a pair of the disassembled code and the source
code in the mainline Linux kernel. In the source code, the function
foo contains a specific constant string “This is a specific string".
In the assembly code, the instruction at foo_offset+0x0 will load
the data pointers (i.e., foo_offset+0x100) using the LDR instruction.
The data pointer refers to another pointer (i.e., foo_offset+0x200),
which contains the same constant string. Based on this, we can
locate function foo in the disassembled kernel. Fig. 8(b) shows a
similar example with the warning information. The WARN_ON
will call function warn_func. The first parameter is the filename,
which is a specific constant string. The second parameter is the
line number of WARN_ON. Usually, the line number is hard coded
as an operand of instruction after compilation. Thus, functions
containing specific constant strings or warning information can be
easily identified.
Strategy-II: Function relationship The second strategy uses
the relationship between functions. That’s because functions that
do not contain specific strings cannot be identified by the strategy-I.
However, we can use the relationship between the functions we
want to identify and the ones that have been identified using the
previous strategy. For instance, if we have identified the function
(Identified_foo) and this function is only invoked by the function
Required_foo, then we can easily locate the Required_foo by find-
ing the caller of the Identified_foo function (Figure 9(a)). Similar
strategies can be applied to the callee and sibling relationship, as
shown in Figure 9(b) and Figure 9(c), respectively. Note that we do
not need to have a precise call graph, which is hard to generate due
to the indirect call and inline function. This is because strategy I
can identify several functions due to the many specific constant
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea739Assembly: Required_foo
foo_offset+0x0:       Assembly Code
. . .
foo_offset+0x100:   bl Identified_foo
Code: Required_foo(args)
{
    . . .
    Identified_foo();
    . . .
}
(a) Caller relationship: Required_foo is the caller of Identified_foo
Assembly: Identified_foo
foo_offset+0x0:       Assembly Code
. . .
foo_offset+0x100:   bl Required_foo
Code: Identified_foo(args)
{
    . . .
    Required_foo();
    . . .
}
(b) Callee relationship: Required_foo is the callee of Identified_foo
Assembly: foo
foo_offset+0x0:       Assembly Code
. . .
foo_offset+0x100:   bl Identified_foo
. . .
foo_offset+0x200:   bl Required_foo
Code: foo(args)
{
    . . .
    Identified_foo();
    . . .
    Required_foo();
    . . .
}
Assembly: foo
foo_offset+0x0:       Assembly Code
. . .
foo_offset+0x204:   orr r0,r0, #0x300      
. . .
foo_offset+0x240:   mvn r0,#0x15
foo_offset+0x244:   ldmfd sp,{pc}
Code: foo(args)
{
      Int a;
      a = a | 0x300;
      . . .
      return -22; 
}
(a) Logic operation: The constants (i.e., 0x300, -22) of logic operation or return value
in source code map to the operands in assembly code.
Assembly: foo
foo_offset+0x0:       mov r0, 0
. . .
foo_offset+0x18:     bl callee_foo_one
foo_offset+0x1c:     bl callee_foo_two
foo_offset+0x20:     cmp r0, 0
foo_offset+0x24:     beq foo_offset+0x50
foo_offset+0x28:     add r0,r0,1
foo_offset+0x2c:     ldm sp,{r0,pc}
foo_offset+0x50:     add r0,r0,2
foo_offset+0x54:     ldm sp,{r0,pc}
Code: foo(args)
{
      int a = 0;
      callee_foo_one(args);
      callee_foo_two(args);
      . . .
if (condition)
       {
           a = a+1;
       }
       else
       {
           a = a+2;
       }
}
(c) Sibling relationship: Required_foo and Identified_foo are both called by foo
Figure 9: Strategy-II: Function relationship
(b) Callee Number: The two callee functions (i.e., callee_foo_one, callee_foo_two)
map to the two bl instruction at offset foo_offset+0x18 and foo_offset+0x1c. Basic
Block Number: The three basic blocks in source code maps to three basic blocks in
assembly code.
strings in the Linux kernel. Only if one of the functions identified
by Strategy I (Identified_foo) has certain function relationships
with the target function (Required_foo), strategy II can work. We
do not encounter this issue in our experiments. With the help of
function relationship, we can identify the functions indirectly.
If one function has more
Strategy-III: : Function structure
than one caller, callee or sibling, it cannot be located solely us-
ing the function relationship. The third strategy takes the function
structure, including logic or arithmetic operations, return value, the
number of basic blocks, and the number of callee functions. Fig. 10(a)
shows the example that the function performs the logic operation on
some specific values (i.e., a = a|0x300) and return a specific value
(i.e., -22) , the compiler will generate the instructions that con-
tain the specific values (e.g., orr r0,r0, #0x300, mvn r0,#0x15).
Besides, the callee number and basic block number will also be
considered to filter out the candidate. Fig. 10(b) shows that function
foo has two callees (i.e., callee_foo_one and callee_foo_two), which
map to two instructions at foo_offset+0x18 and foo_offset+0x1c.
Basic block number works with the same rule.
Summary With the above three strategies, we can automatically
and successfully identify ECMO Pointers for all the Linux kernels
(815 ones in 20 kernel versions) used in the evaluation (Section 5.2).
4.3 Generate ECMO Drivers
The process to generate ECMO Drivers is similar with developing a
kernel module. However, we need to make the driver self-contained
as much as possible and invoke the APIs in the Linux kernel through
ECMO Backward Pointers. In particular, we compile the source code
into an object file (i.e., ECMO_Driver.o). To make this driver work,
we need to setup the base address and fix up the function calls to
ECMO Backward Pointers. Moreover, we need to ensure that this
Figure 10: Strategy-III: Function structure
1
2
3
0 x10000 : ldr r3 , [pc , #72]
0 x10004 : blx r3
0 x10050 : " Pointer value of called function "
Figure 11: ECMO Driver indirectly invokes functions in Linux
kernel. In offset 0x10000, the memory address pointed by
[pc, #72] is 0x10000 + 8 + 72 =0x10050. In this case, functions
with arbitrary address can be invoked.
driver does not occupy the physical memory region that the kernel
can perceive, which is achieved by allocating the opaque memory.
Fixup the driver Note that the compiled object file’s base ad-
dress is 0x0. Given a new load address at runtime, our system
calculates new values of the data pointers and function pointers
and automatically rewrites the corresponding values in the driver.
Furthermore, due to the limitation of the jump range for the
BL Label instruction, the driver may not be able to invoke the
functions (ECMO Backward Pointers) in the original Linux kernel
with direct calls, if the offset between them is far from the range
of the BL instruction. To make it work, we rewrite the direct calls
with indirect calls. For example, Fig. 11 shows a code snippet of
the assembly code. At the offset 0x10000, it loads the value stored
at the offset 0x10050 into the register R3, which is the jump target.
We can rewrite the value in the offset 0x10050 to invoke arbitrary
function (ECMO Backward Pointers) in the Linux kernel, without
being limited by the direct call.
Allocate the opaque memory The ECMO Driver is loaded into
the memory for execution. However, if we directly inject the driver
into the free physical memory pages, the pages could be allocated
Session 3B: Operating Systems CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea740ECMO
Driver
Linux 
Kernel
Check the 
Virtual 
Address
Opaque
Memory
Yes
No
Hijacked
Page 
Tables
Kernel
Page 
Tables
Physical
Address
Software
Page Table Walk Module in QEMU
Hardware
Figure 12: The overall design of opaque memory.
for other purposes. This is because the kernel does not explicitly
know the existence of the ECMO Driver and it is hard to change
the allocated physical memory pages due to the complex memory
management strategy of Linux kernel. In this case, the ECMO driver
may be overwritten and the functionality cannot be guaranteed.
Thus, we need to ensure that the driver should reside inside a
memory region that cannot be affected by the Linux kernel.
To solve this problem, we propose the concept of opaque memory,
a memory region that is not perceived by the Linux kernel but can
be used at runtime. We implement the opaque memory by hooking
the emulated MMU in QEMU. Fig. 12 shows how opaque memory
works. Specifically, the emulated MMU walks through the page table
to translate virtual addresses to physical addresses. ECMO changes
the MMU module in QEMU to check whether the virtual address
being translated is in the region of the opaque memory. If so, it will
walk through our hijacked page table for the opaque memory to get
the physical address. Otherwise, the original kernel page tables will
be used. We ensure that the virtual address in the opaque memory
always has a valid entry in the page table. By doing so, the ECMO
Driver can be loaded and executed in the opaque memory, without
affecting the memory view of the rehosted Linux kernel. By default,
we set the opaque memory starting from 0xd0008000 and the length
is 0x10000. Meanwhile, we check whether the address conflicts with
the one allocated by Linux kernel. If so, we will change the start
address.
4.4 Implementation Details
We implement ECMO based on LuaQEMU [11]. LuaQEMU is a dy-
namic analysis framework based on QEMU and it exposes several
QEMU-internal APIs to LuaJIT [10] core, which is injected into
QEMU. We port LuaQEMU based on old QEMU (version 2.9.50) to
support the QEMU in new version (4.0.0) and expose more desig-
nated APIs for initializing the peripheral models. With LuaQEMU,
we are able to hijack the execution process of rehosted Linux ker-
nel at runtime and manipulate the machine states, e.g., accessing
registers and memory regions, through Lua scripts, at specified
breakpoints. For example, we can specify a breakpoint at any par-
ticular address. Inside the breakpoint, we can execute our own Lua
script for different purposes. This eases the implementation of the
opaque memory, dumping the decompressed Linux kernel, and
installing the ECMO Pointers.
The module to identify ECMO Pointers (Section 4.2) is imple-
mented in Python. We utilize Capstone [3] to disassemble the de-
compressed Linux kernel. For the function identification, we re-
implement the algorithm described in Nucleus [23] and angr [1]
in Python. We further extract the required function information,
which is the function signature based on the generated functions
and their control flow graphs. Finally, we integrate all these code
with our strategies for identifying ECMO Pointers, which takes
2290 lines of Python code. All the above mentioned procedures
can be done automatically except that the ECMO Driver, which
consists of the drivers of transplanted peripherals. It is developed
using the C language manually, which takes less than 600 lines of
code, and cross-compiled by GCC. Note that it is a one-time effort
to develop the ECMO Driver (Section 6). One ECMO Driver can be
used by different Linux kernel versions if the related functions and
structures are not changed.
5 EVALUATION
In this section, we present the evaluation result of our system. Note
that, the main purpose of our work is to rehost Linux kernels in
QEMU so that we can build different dynamic analysis applications
and install drivers for more peripherals. In the following, we first
introduce the dataset of firmware images used in the evaluation
and then answer the following research questions.
• RQ1: Is ECMO able to identify ECMO Pointers?
• RQ2: Is ECMO able to rehost the Linux kernels of embedded
devices with different kernel versions and device models?
• RQ3: Are the rehosted Linux kernels stable and reliable?
• RQ4: Can ECMO support more peripherals and be used to de-
velop dynamic analysis applications?
5.1 Dataset
As our system targets embedded Linux kernels, we have collected
the firmware images from both third-party projects (i.e., Open-
WRT [13]) and device vendors (i.e., Netgear [12]). Our evaluation
targets Linux kernels in ARM devices, since they are the popular
CPU architectures in embedded devices [17]. However, the overall
methodology can also be applied to other architectures (e.g., MIPS).
During the experiment, we focuses on transplanting three early-
boot peripherals, i.e., interrupt controller (IC), timer, and UART,
which are required to boot a Linux kernel. Once the Linux kernel is
rehosted, we can install different peripheral drivers to support other
peripherals with kernel modules. Specifically, we use the PrimeCell
Vectored Interrupt Controller (PL190) [14] and ARM Dual-Timer
Module (SP804) [2]. We use the ns16550 UART device in our system.
In total, we evaluate 815 (720 in OpenWRT and 95 in Netgear)
firmware images that contain Linux kernels.
5.2 Identify ECMO Pointers (RQ1)