IN
US
RU
Mobile-specific
window - devicemotion
window - deviceorientation
window - orientationchange
screen - change
getBattery
4
0
3
0
1
2
1
1
0
0
XMLHttpRequest.send
getTimezoneOffset
toDataURL
getContext
WebGLRenderingContext
setItem
getItem
removeItem
key
createElement(canvas)
General
20
8
0
4
0
2
1
2
0
7
19
2
0
3
0
1
1
1
0
17
3
0
2
0
1
16
2
0
3
0
0
1
0
0
2
4
1
8
1
3
20
5
0
2
1
2
2
1
0
8
3
1
4
1
4
87
82
0
7
2
92
81
92
0
13
GR
11
1
29
1
10
1056
958
7
63
6
1,171
1,026
1,149
14
65
Figure 3: Number (top) and ratio (bottom) of apps with
Google’s interstitial ad placements, per ranking bin.
the official store. Overall, we downloaded 4,478 apps from Google
Play using the Raccoon [1] framework.
Analysis and location. Since we cannot have a-priori knowl-
edge about when a specific ad campaign that accesses motion sen-
sors will run, nor can we know which apps may be targeted by
such advertisements, we opt for using a large number of apps from
different categories, which we periodically re-examine over the
course of eight months (9/01/2020 - 4/30/2021). Furthermore, to
avoid biasing our study by constraining it to ads displayed in a
specific country, since policies and legislation may govern their be-
havior and differ across jurisdictions, our infrastructure leverages a
VPN service for simulating users browsing from different countries.
For our experiments using the VPN service, we selected a subset
of 200 apps and analyzed them in several countries. Even though
techniques exist for identifying whether an app is hiding behind
a VPN (e.g., GPS coordinates, nearby WIFI access points), we em-
pirically verified that this straightforward approach is effective for
obtaining foreign ads. Overall, we analyzed 4,478 apps in our main
experiment, and 200 apps for each VPN session in other countries.
As such, our analysis includes advertisements from USA, Russia,
India, the United Kingdom, Germany and Greece.
App installation and exercising. Our framework installs and
analyzes each application individually. At installation time we ap-
prove all permissions that the apps may request, including run-time
permissions, using the “adb install -g” option. Finally, using
the UIHarvester module [35], our framework interacts with each
application for five minutes using a breadth-first traversal strategy.
6.2 Intra-app Data Exfiltration
WebAPI Accesses. As can be seen in Table 2, in-app ads access a
plethora of HTML5 WebAPIs, both mobile-specific and not, across
all countries. We found several instances of in-app ads accessing mo-
tion sensors using the WebAPIs addEventListener(devicemotion)
and the addEventListener(deviceorientation), which return
continuous values from the Accelerometer and Gyroscope respec-
tively. We did not find any in-app advertisements accessing the
camera, the microphone or the GPS of the device, even though
many of the tested apps had these permissions in their Manifest file
and were, thus, allowed to use them at run-time. Regarding the GPS
sensor, in-app ads may use another non-intrusive way for roughly
estimating the device’s location, by utilizing the getTimezoneOff-
set function to infer the user’s timezone.
We also observe several ads using the navigator.getBattery
API, which provides information about the battery status and can be
used to effectively track users across the web [69]. Moreover, we ob-
serve that in-app ads access functions that are known to be used for
canvas fingerprinting, such as HTMLCanvasElement.toDataURL,
HTMLCanvasElement.getContext, createElement(canvas) and
WebGLRenderingContext. Finally, we find in-app ads reading, writ-
ing and deleting data from local storage using getItem, setItem
and removeItem respectively. Even though we did not further in-
vestigate whether in-app ads access local storage for malicious
activities, since it falls outside of the scope of this paper, we believe
that such functions should be restricted since local storage can be
used for re-identifying mobile devices [101].
Google’s Interstitial Ad Placements. Google’s library for in-
terstitial ad placements allows ads to capture sensor data not only
from the View displaying them but from others as well, thus in-
creasing the attack surface of the intra-app data exfiltration attack.
Our analysis shows that Google’s interstitial ad placements can be
found on average in 14.14% of the apps; Figure 3 shows the number
of apps that contain Google’s interstitial ad placements based on
their numbers of downloads. We observe that interstitial ad place-
ments are more prevalent across apps that have between 100K+
and 100M+ downloads. Apps with 5B+ downloads are rare and
most of them either do not contain ads (e.g., WhatsApp, Messen-
ger) or may use their own tools for interstitial ad placements (e.g.,
Facebook). We argue that Google’s interstitial ad library currently
presents a significant threat to users, as it allows ads to execute
their JavaScript before they are displayed on the screen, affecting
even apps that adhere to secure development practices and separate
sensitive functionality and Views from ad-related content.
 0 20 40 60 80 100 120 140 160 180Apps 0 20 40 60 80 10050K+100K+500K+1M+5M+10M+50M+100M+500M+1B+Apps (%)# of DownloadsSession 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1071Table 3: Top 10 most popular apps with the SYSTEM_ALERT_-
WINDOW permission. Additional app permissions (CAM, MIC
and GPS) allow in-app ads to silently capture photos, listen
to conversations and retrieve the device’s position even if
the app is in the background.
⇓ DLs
5B+
5B+
1B+
1B+
1B+
1B+
500M+
500M+
500M+
500M+
Package Name
com.google.android.music
com.facebook.katana
com.lenovo.anyshare.gps
com.twitter.android
com.facebook.lite
com.skype.raider
com.imo.android.imoim
jp.naver.line.android
com.viber.voip
com.mxtech.videoplayer.ad
CAM MIC GPS
✗
✓
✓
✓
✓
✓
✓
✓
✓
✓
✗
✓
✓
✓
✓
✓
✓
✓
✓
✓
✗
✓
✓
✓
✓
✓
✓
✓
✓
✗
6.3 Inter-app Data Exfiltration
SYSTEM_ALERT_WINDOW permission. Apps that request this dan-
gerous permission and are downloaded from Google Play may
automatically obtain the permission without any user interaction
or consent. This permission allows WebViews to be attached to
the WindowManager and execute code that can access sensors in
the background. To make matters worse, unaware users do not
know that such background activities remain alive even if they
perform a UI swipe to terminate the app. In our dataset 416 apps
hold this permission and 291 out of them are marked by Google
Play as “Contains Ads” (i.e., in-app ads). Table 3 shows the 10 most
popular apps that contain ads and hold this permission.
Apart from motion sensors that do not require a permission, for
each app we also include other dangerous permissions that provide
access to additional sensors (e.g., CAM, MIC and GPS) and can be
abused by in-app ads. We note that if one of these apps is installed
on the device and a WebView displaying ads is configured to run in
the background (due to intentional or accidental misconfiguration,
by the developer or an integrated third-party ad library), all of the
user’s apps are vulnerable to the touch input inference attack. Based
on our findings we argue that these apps should carefully review
the security implications of obtaining this dangerous permission
and whether it is really needed for their functionality; if it is indeed
necessary, apps should explicitly inform users and ask for consent.
Motion Sensor Leaks. During our experiments with in-app
advertisements, we found several cases where motion sensors were
accessed and the values were leaked to third-party domains. Table 4
presents these results with applications tested multiple times over
several months. Each app that we list may have displayed more
than one in-app ad that accessed motion sensors (e.g., Vodafone
ad) during a single execution. For each in-app ad that listens to
devicemotion and deviceorientation events, since these APIs
return continuous data, we also mark whether the corresponding
app is vulnerable to the intra or the inter-app data exfiltration at-
interstitial ad placements. If both are true they are marked with
tack. For the former, an app is marked with a ((cid:71)) if it displays ads
in sensitive Views (e.g., login), or with a ((cid:72)) if it uses Google’s
((cid:32)). In the inter-app data exfiltration attack, we mark all apps that
hold the SYSTEM_ALERT_WINDOW permission and give the ability
to in-app ads to run in the background, rendering any other app
running on the device vulnerable. In more detail, this is possible if
the WebView displaying the ad is attached to the WindowManager
using the WindowManager.addView() and provides the TYPE_AP-
PLICATION_OVERLAY/TYPE_PHONE layout parameter. Even though
we statically analyzed these apps for instances of ad-related Web-
Views being attached to the WindowManager we didn’t find any.
Nonetheless, it is well-known that mobile ad fraud is on a constant
rise (e.g., [20, 24, 55]) and since ad libraries are mostly responsible
for ad fraud activities [55], it would not be surprising if ad libraries
are found to abuse the SYSTEM_ALERT_WINDOW permission in the
future. Finally, for each entry we list the ad placement’s domain and
the last column denotes whether we could identify any motion data
leakage in the network traffic and the corresponding JavaScript.
We found that motion sensor values are leaked to DoubleVerify’s
domains. Interestingly, even though DoubleVerify’s policies state
that data is collected to help customers measure the performance of
the advertisement [36], they do not provide a detailed explanation
or analysis on sensor data collection. Furthermore, as the use of
motion sensors in advertisements is gaining traction, we believe
that more publishers will likely appear soon. For entries that are not
marked with sensor data leakage our system automatically iden-
tified that the advertisement accessed the motion sensors but we
were not able to identify such values in the network traffic. This is
due to the fact that most of the analyzed JavaScript code was heavily
obfuscated and performed some form of data transformation, and
also used additional libraries downloaded from the network. We
observe that in-app ads that access motion sensors are not limited
to a specific country since in all of our VPN sessions we identified
such cases. Moreover, in certain cases (e.g., com.genius.android) we
found that apps display in-app ads with access to motion sensors in-
dependently of the origin country. The actual content of the in-app
ads we analyzed varies and we found that the ads accessing sensors
included, among others, Vodafone products, Disney+ promotions
and online gambling services. We observe that in many cases, the
apps displaying ads with access to motion sensors are vulnerable
to at least one of our attack scenarios and, in certain cases, to both.
Browser Apps present an interesting category of apps that re-
quires a tailored approach to their analysis due to inherent charac-
teristics of their functionality, e.g., the ability for multi-tab browsing.
As such, it is important to better understand whether they enforce
some access control policy for in-app ads, which requires man-
ual analysis in a controlled and targeted experiment. In general,
our next experiment aims to identify whether in-app ads are al-
lowed to access motion sensors and if they are displayed (or execute
JavaScript) in webpages with sensitive content.
Out of the most popular browser apps that are marked by Google
Play as “Contain Ads”, we selected those that we found to display
in-app ads after ten minutes of manual interaction. Table 5 lists
the browser apps that we tested, their number of downloads, and
additional dangerous permissions for sensors that they hold. In
order to exclude website-ads from our analysis, for each browser
we visited a website with sensitive content that we know a priori
does not display advertisements (i.e., the Facebook login page) and