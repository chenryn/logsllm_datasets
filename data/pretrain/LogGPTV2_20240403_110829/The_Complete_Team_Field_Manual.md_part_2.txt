11. Select option 1 for single target or 2 for mass mailer
12. You will be prompted for subject and body
13. Select option 1 to use gmail and option 2 for open relay
14. Wait for user to click on attachment
1.2.1.3Remote Admin Tools (password required)
SSH
1.2.2 DETECTION
1.2.2.1Spear Phishing
Zeek is a great behavior analysis network tool, and with it you can create
custom scripts to look for phishing. There are some great examples on
https://github.com/dhoelzer/ShowMeThePackets/tree/master/Zeek
The following example script was written by dhoelzer and is available from
the github above.
1.2.2.2Logs
Targeted log collection allows for the best results in finding intrusions, this
means that you should build a list of adversary tactics, techniques and
procedures (TTPs) and collect the exact logs needed to alert against that TTP.
Below are popular logs that can be used to gain insight into an intrusion:
User Login/logout, connection information
Look through (SSH) service logs for errors
Look for bad login attempts from user
Search through security logs for potential problems
1.3 EXECUTION
The adversary is trying to run malicious code.
Execution consists of techniques that result in adversary- controlled code
running on a local or remote system. Techniques that run malicious code are
often paired with techniques from all other tactics to achieve broader goals,
like exploring a network or stealing data. For example, an adversary might
use a remote access tool to run a PowerShell script that does Remote System
Discovery.
1.3.1 ATTACK
1.3.1.1Bash
Bash scripts:
Bash via web:
curl
Wget
Source
Source Alias
1.3.2 DETECTION
1.3.2.1Bash History
1.3.2.2All Users Bash Commands
1.3.2.3Get all running processes
1.3.2.4Restrict User Bash
1.3.2.5Remove users .bashrc file
1.3.2.6 Give users restricted shell
1.4 PERSISTENCE
The adversary is trying to maintain their foothold.
Persistence consists of techniques that adversaries use to keep access to
systems across restarts, changed credentials, and other interruptions that
could cut off their access. Techniques used for persistence include any
access, action, or configuration changes that let them maintain their foothold
on systems, such as replacing or hijacking legitimate code or adding startup
code.
1.4.1 ATTACK
1.4.1.1.bashrc and .bash_profile
bashrc or .bash_profile can be used as a persistence mechanism that triggers
when a bash shell is opened by adding persistence code to the bash config
file.
Global .bashrc
Local .bashrc
.bash_profile
1.4.1.2Startup Scripts
Startup Service
1.4.1.3Scheduled Tasks (cron jobs)
The persistence technique of scheduled tasks allows attackers to setup a
command that will be executed at a scheduled date and time, this is an older
technique, but it is still used as it is an effective method of persistence.
1.4.1.4Create User
Regular User:
User with root userID and groupID:
1.4.1.5Set UID and GID
UID
GID
1.4.1.6Web Shell
Example web shell written by King Defacer
This is exploit from Security House - Shell Center - Edited By KingDefacer labs.
Turkish H4CK3RZ
 [Turkish Security Network] - Edited By KingDefacer
PHP 5.2.9 safe_mode & open_basedir bypass
More: Md5Cracking.Com Crew
';
$level=0;
if(!file_exists("file:"))
mkdir("file:");
chdir("file:");
$level++;
$hardstyle = explode("/", $file);
for($a=0;$a ';
if(FALSE==curl_exec($ch))
die('>Sorry... File '.htmlspecialchars($file).' doesnt exists or you dont have permissions.');
echo '  '; curl_close($ch);
?>
bypass shell:
1.4.2 DETECTION
1.4.2.1.bashrc and .bash_profile
add cron job to check every 30 min
1.4.2.2Scheduled Tasks (cron jobs)
Look at edit history to crontab
Edit cron.deny to only allow users that should have access
1.4.2.3Network Traffic
Inspect what services are communicating
Inspect Startup Scripts
1.4.2.4Web Shells
Commands run from web shells are spawned with the parent process as the
webserver, to locate the parent process of a command use the following
command
1.5 PRIVILEGE ESCALATION
The adversary is trying to gain higher-level permissions.
Privilege Escalation consists of techniques that adversaries use to gain
higher-level permissions on a system or network. Adversaries can often enter
and explore a network with unprivileged access but require elevated
permissions to follow through on their objectives. Common approaches are
to take advantage of system weaknesses, misconfigurations, and
vulnerabilities. Examples of elevated access include:
• SYSTEM/root level
• local administrator
• user account with admin-like access
• user accounts with access to specific system or perform specific
function
These techniques often overlap with Persistence techniques, as OS features
that let an adversary persist can execute in an elevated context.
1.5.1 ATTACK
First step is to get the kernel version, this can be done with “uname -a”, input
kernel version into title field on https://www.exploit-db.com/search output
kernel specific exploits to gain privilege escalation. Below Dirty Cow is an
example of a popular privilege escalation attack.
1.5.1.1Dirty Cow
If you have linux kernel <= 3.19.0-73.8, then you can use the dirty cow
exploit to escalate privileges (uname -a to get kernel version)
1.5.1.2Services with Root Priviliages
Find processes running with root privileges
1.5.1.3SUID and GUID
List all files with SUID bit set, this allows executables to run at higher
privilege levels, if any programs have the SUID bit set that allow you to
escape to the shell you can escalate privileges
Example: If VIM has SUID bit set, so when VIM is executed it would be run
as root, you could then execute !sh from VI and get a root shell
1.5.1.4Misconfigured Sudo
Get a list of binaries and commands that can be ran by the user with sudo
permissions, if the program can escape to shell you may be able to escalate
privileges. Example sudo VIM, escape to shell !sh and user now has a root
shell
1.5.1.5Sudo Caching
Sudo credentials can be cached for an unlimited amount of time
1.5.1.6Cron Jobs
Poorly configured cron jobs can allow for privilege escalation, you can use
this to search for cron jobs, find world writeable cron jobs and add code to
end of job
1.5.1.7Vulnerable Root Services
It is possible to use vulnerable services that are running as root to escalate
privileges, this is less risky than a kernel exploit as it would only likely crash
the service if it fails, and the service will likely restart.
1.5.1.8Process Injection via Shared Library
1.5.2 DETECTION
unix-privesc-check is a bash script that was written by pentestmonkey and
will automate checking common attack vectors in Linux for privilege
escalation vulnerabilities the raw script can be accessed on github here
https://raw.githubusercontent.com/pentestmonkey/unix-privesc-
check/1_x/unix-privesc-check
1.5.2.1SUID
List all files with SUID bit set, this allows executables to run at higher
privilege levels, it is possible that the executable could allow you to escalate
privileges
• Example if nmap has SUID bit set
{nmap-interactive}
{!sh}
Remove SUID bit
1.5.2.2Sudo Permissions
List all executables that user is able to run, if any are listed such as shells or
programing languages, those can be used to escalate privileges.
• Example if you can sudo python
{ sudo python -c ‘import pty;pty.spawn(“/bin/bash”);’ }
• Example if you can sudo find
{ sudo find /home -exec sh -i \; }
1.5.2.3Sudo Caching
Sudo credentials can be cached, allowing an attacker to take advantage of a
user that enters sudo command, ensure that sudo credentials are not cached
1.5.2.4Cron Jobs
Poorly configured cron jobs can allow for privilege escalation, you can use
this to search for cron jobs, find world writeable cron jobs make sure that the
permissions do not allow users to write to the code being executed
1.5.2.5Vulnerable Root Services
Ensure that no services are running with root permissions, if any services
such as Apache are running as root make sure to change them to their own
group and user
1.6 DEFENSE EVASION
The adversary is trying to avoid being detected.
Defense Evasion consists of techniques that adversaries use to avoid
detection throughout their compromise. Techniques used for defense
evasion include
uninstalling/disabling security software or
obfuscating/encrypting data and scripts. Adversaries also leverage and abuse
trusted processes to hide and masquerade their malware. Other tactics’
techniques are cross-listed here when those techniques include the added
benefit of subverting defenses.
1.6.1 ATTACK
1.6.1.1Bash History
Adversaries can abuse this by searching these files for cleartext passwords.
Additionally, adversaries can use a variety of methods to prevent their own
commands. The following commands can disable bash history or clear the
history
1.6.1.2File Deletion
Adversaries may remove malicious executable files over the course of an
intrusion to keep their footprint low or remove them at the end as part of the
post-intrusion cleanup process.
1.6.1.3Hidden Files
1.6.1.4Append Zip File to Image
Add file to image
Access hidden file
1.6.1.5Timestomp
Change atime ( access time )
Change mtime ( modified time )
Change ctime ( change time ) – Possible increased risk of detection
1.6.1.6Valid Accounts
Use credentials from a valid account to perform offensive actions
1.6.1.7Binary Padding
1.6.1.8Disable Firewall
Uncomplicated Firewall
firewalld service
iptables
1.6.1.9Disable Logging
Stop and disable rsyslog
Legacy Systems
Disable SElinux
1.6.1.10 Rootkit
Below is an example of a linux rootkit
Other rootkits that have usable functionality can be found here:
1.6.2 DETECTION
1.6.2.1Bash History
Change a user’s .bash_history so they cannot delete it, however they could
still change env variable to another location or spawn a shell with – noprofile,
but this would show in the bash history
1.6.2.2Detect rootkits
Option 1:
Option 2:
Option 3:
Option 4:
1.7 CREDENTIAL ACCESS
The adversary is trying to steal account names and passwords.
Credential Access consists of techniques for stealing credentials like account
names and passwords. Techniques used to get credentials include keylogging
or credential dumping. Using legitimate credentials can give adversaries
access to systems, make them harder to detect, and provide the opportunity to
create more accounts to help achieve their goals.
1.7.1 ATTACK
1.7.1.1Cleartext Passwords
Users will occasionally store cleartext passwords in files on their computers,
perform a basic search for these files. The following command will search
through files with .txt and .conf extensions for the text password and sends all
errors to null
1.7.1.2Bash History
Bash history from file
Bash history from memory
1.7.1.3 Credential Dump
credentials will be output to screen
• credentials will be output to screen
Shadow file
1.7.1.4Physical Access
The following steps vary with version of linux, some require you to replace
“quiet” with “init=/bin/bash” the below method works with ubuntu at the
time of writing this.
1.7.1.5Private Keys
Find SSH keys with default name
1.7.2 DETECTION
1.7.2.1Detect changes to shadow or passwd
The logging that comes with linux does basic auditing, but to have lower
level auditing we can use auditd, the following requires auditd if it is not
installed you can use your package manager ( sudo yum install auditd or sudo
apt install auditd )
1.7.2.2Mitigate bash history leak
If a user has entered a password where it can be seen in bash history, you can
remove the entry
1.7.2.3Detect Cleartext Passwords
It is good policy to detect the use of cleartext passwords, while it is not
possible to be sure the following command will look for the word password.
1.8 DISCOVERY
The adversary is trying to figure out your environment.
Discovery consists of techniques an adversary may use to gain knowledge
about the system and internal network. These techniques help adversaries
observe the environment and orient themselves before deciding how to act.
They also allow adversaries to explore what they can control and what’s
around their entry point in order to discover how it could benefit their current
objective. Native operating system tools are often used toward this post-
compromise information-gathering objective.
1.8.1 ATTACK
1.8.1.1Host Enumeration
Once you have gained access to a host machine it is necessary to investigate
your environment, the following information is standard information to
collect.
Automated enumeration script
https://highon.coffee/blog/linux-local-enumeration-script/
1.8.1.2Virtual Machine Detection
Linux:
Apple macOS:
1.8.1.3ARP
1.8.1.4Simple Ping Sweep
1.8.1.5Port Scanning
1.8.1.6NMAP
1.8.2 DETECTION
While possible to see these events on individual hosts, it is best to detect
some of these behaviors with a network-based intrusion detection system
combined with a SIEM to see all events across the network.
1.8.2.1Detect host enumeration
One possible method is to use .bash_history to look for commands that would
indicate adversaries trying to run discovery scripts. Many of the commands
could be ran by administrators, so part of the script is going to set a threshold
for how often the commands should appear in proximity to each other, as
well as a threshold of how many commands must be in a group.
1.8.2.2Detect scanning with python script
Download python script from:
http://code.activestate.com/recipes/576690-pyscanlogger-python-port- scan-
detector/download/1/
1.8.2.3Detect nmap with Snort
1.9 LATERAL MOVEMENT
The adversary is trying to move through your environment.
Lateral Movement consists of techniques that adversaries use to enter and
control remote systems on a network. Following through on their primary
objective often requires exploring the network to find their target and
subsequently gaining access to it. Reaching their objective often involves
pivoting through multiple systems and accounts to gain. Adversaries might
install their own remote access tools to accomplish Lateral Movement or use
legitimate credentials with native network and operating system tools, which
may be stealthier.
1.9.1 ATTACK
1.9.1.1SSH
Option 1: SSH Hijacking
Option 2: SSH Keys
Administrators will occasionally use keys to remotely administer devices,
these keys may not be protected, if you find a key and know a host that has
the key in authorized hosts file you can use it to move laterally.
1.9.1.2Public Services
Once inside a network there may be servers and services that are only visible
to the internal network, following the Discovery methods you may find an
exploitable service.
1.9.2 DETECTION
Detecting lateral movement from a single host can be very difficult, and the
best results will come from using a tool that shows network data and all the
hosts on the network, but there are techniques that can help you find lateral
movement form a single host.
1.9.2.1Show connected devices on local network
Unless you are connected to a local file share, host to host communication
should be fairly minimal, this can help you see if you are connected to
another host on your network
1.10COLLECTION
The adversary is trying to gather data of interest to their goal.
Collection consists of techniques adversaries may use to gather information
and the sources information is collected from that are relevant to following
through on the adversary's objectives. Frequently, the next goal after
collecting data is to steal (exfiltrate) the data. Common target sources include
various drive types, browsers, audio, video, and email. Common collection