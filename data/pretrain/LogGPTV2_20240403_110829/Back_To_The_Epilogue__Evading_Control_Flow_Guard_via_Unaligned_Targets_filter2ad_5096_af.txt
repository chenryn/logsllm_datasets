### Bypassing Integrity Checks and Enabling Exploitation

The identified vulnerability allows an attacker to redirect control flow to an arbitrary location, completely bypassing integrity checks. This enables the use of more traditional exploitation methods. 

### Feasibility and Impact Assessment

To evaluate the availability and impact of our gadgets, we conducted a comprehensive assessment of Windows 10 system libraries. We found numerous instances of these gadgets in various targets, including C/C++ runtime libraries, the JavaScript engine, a media codec, and Microsoft Office. Any application that loads a library containing these gadgets is vulnerable to this attack, known as BATE (Bypassing Arbitrary Target Execution). Our findings indicate that BATE poses a realistic threat on both 32-bit and 64-bit systems. We demonstrated this by successfully building a remote code execution exploit against the Microsoft Edge browser, a high-value target due to its potential for remote exploitation (e.g., through a compromised webpage).

### Mitigation Bypass and Countermeasures

BATE is classified as a "mitigation bypass" because it circumvents security mechanisms, specifically by exploiting a design tradeoff between security and memory efficiency. Implementing countermeasures is challenging, as modifying Control Flow Guard (CFG) to increase its precision is not straightforward. We proposed several possible mitigations to Microsoft, along with our responsible disclosure of BATE. In the short term, the most feasible countermeasure is to force alignment of unaligned targets. However, the cost and potential performance impact of this approach require further analysis, as padding could significantly increase memory usage and disrupt caching optimizations. Future work includes further analyzing Microsoft's CFG to identify other types of exploitable gadgets and hardening its design with secondary protection mechanisms to detect and prevent calls to unintended targets.

### Acknowledgments

Mauro Conti is supported by a Marie Curie Fellowship funded by the European Commission (agreement PCIG11-GA-2012-321980). This work is also partially supported by the EU TagItSmart! Project (agreement H2020-ICT30-2015-688061), the EU-India REACH Project (agreement ICI+/2014/342-896), the project CNR-MOST/Taiwan 2016-17 "Verifiable Data Structure Streaming," the grant n. 2017-166478 (3696) from Cisco University Research Program Fund and Silicon Valley Community Foundation, and the grant "Scalable IoT Management and Key Security Aspects in 5G Systems" from Intel.

### References

[1] Capstone. [Online]. Available: https://www.capstone-engine.org/
[2] CVE-2016-7200. [Online]. Available: https://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-7200
[3] CVE-2016-7201. [Online]. Available: https://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-7201
[4] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-flow integrity principles, implementations, and applications,” ACM TISSEC, 2009.
[5] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang, “Jump-oriented programming: A new class of code-reuse attack,” in ACM ASIACCS, 2011.
[6] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida, “Dedup est machina: Memory deduplication as an advanced exploitation vector,” in IEEE S&P, 2016.
[7] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brunthaler, and M. Payer, “Control-flow integrity: Precision, security, and performance,” ACM Computing Surveys (CSUR), 2017.
[8] A. Chatra, “Tagged float.” [Online]. Available: https://abchatra.github.io/TaggedFloat/
[9] Y. Chen, “The birth of a complete IE11 exploit under the new exploit mitigations,” in SyScan Singapore, 2015.
[10] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro, C. Liebchen, M. Qunaibit, and A.-R. Sadeghi, “Losing control: On the effectiveness of control-flow integrity under stack attacks,” in ACM CCS, 2015.
[11] D. Dai Zovi, “Practical return-oriented programming,” in SOURCE Boston, 2010.
[12] T. H. Dang, P. Maniatis, and D. Wagner, “The performance cost of shadow stacks and stack canaries,” in ACM ASIACCS, 2015.
[13] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection,” in USENIX Security 14, 2014.
[14] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard, H. Okhravi, and S. Sidiroglou-Douskos, “Control jujutsu: On the weaknesses of fine-grained control flow integrity,” in ACM CCS, 2015.
[15] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh, “Jump over ASLR: Attacking branch predictors to bypass ASLR,” in IEEE/ACM MICRO, 2016.
[16] F. Falcón, “Exploiting CVE-2015-0311, part II: Bypassing control flow guard on Windows 8.1 Update 3,” 2015. [Online]. Available: https://www.coresecurity.com/blog/exploiting-cve-2015-0311-part-ii-bypassing-control-flow-guard-on-windows-8-1-update-3
[17] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of control: Overcoming control-flow integrity,” in IEEE S&P, 2014.
[18] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida, “ASLR on the line: Practical cache attacks on the MMU,” in NDSS, 2017.
[19] Intel, “Control-flow enforcement technology preview.” [Online]. Available: https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf
[20] H. Li, “Control flow guard improvements in Windows 10 Anniversary Update,” 2016. [Online]. Available: https://blog.trendmicro.com/trendlabs-security-intelligence/control-flow-guard-improvements-windows-10-anniversary-update/
[21] K. Lu, M.-T. Walter, D. Pfaff, S. Nürnberger, W. Lee, and M. Backes, “Unleashing use-before-initialization vulnerabilities in the Linux kernel using targeted stack spraying,” in NDSS, 2017. [Online].
[22] Microsoft, “ChakraCore.” [Online]. Available: https://github.com/Microsoft/ChakraCore
[23] ——, “Control Flow Guard.” [Online]. Available: https://msdn.microsoft.com/en-us/library/windows/desktop/mt637065(v=vs.85).aspx
[24] ——, “Argument passing and naming conventions,” 2016. [Online]. Available: https://docs.microsoft.com/en-us/cpp/cpp/argument-passing-and-naming-conventions
[25] ——, “Overview of x64 calling conventions,” 2016. [Online]. Available: https://docs.microsoft.com/en-us/cpp/build/overview-of-x64-calling-conventions
[26] ——, “A detailed description of the Data Execution Prevention (DEP) feature in Windows XP Service Pack 2, Windows XP Tablet PC Edition 2005, and Windows Server 2003,” 2017. [Online]. Available: https://support.microsoft.com/en-us/help/875352/a-detailed-description-of-the-data-execution-prevention-dep-feature-in
[27] MJ0011, “Windows 10 control flow guard internals,” 2014. [Online]. Available: http://www.powerofcommunity.net/poc2014/mj0011.pdf
[28] B. Niu and G. Tan, “Monitor integrity protection with space efficiency and separate compilation,” in ACM CCS, 2013.
[29] PaX Team, “Address space layout randomization (ASLR),” 2003. [Online]. Available: http://pax.grsecurity.net/docs/aslr.txt
[30] G. Ramalingam, “The undecidability of aliasing,” ACM TOPLAS, vol. 16, no. 5, pp. 1467–1471, 1994.
[31] M. rix, “Smashing C++ vptrs,” Phrack Magazine, vol. 56, no. 8, 2000. [Online]. Available: http://phrack.org/issues/56/8.html#article
[32] M. Schenk, “Back to basics or bypassing Control Flow Guard with Structured Exception Handler.” [Online]. Available: https://improsec.com/blog//back-to-basics-or-bypassing-control-flow-guard-with-structured-exception-handler
[33] ——, “Bypassing Control Flow Guard in Windows 10.” [Online]. Available: https://improsec.com/blog//bypassing-control-flow-guard-in-windows-10
[34] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A. R. Sadeghi, and T. Holz, “Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications,” in IEEE S&P, 2015.
[35] F. J. Serna, “The info leak era on software exploitation,” in Black Hat USA, 2012.
[36] H. Shacham, “The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86),” in ACM CCS, 2007.
[37] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino, A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna, “SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis,” in IEEE S&P, 2016.
[38] A. Sintsov, “Jit-spray attacks & advanced shellcode,” in HITBSecConf Amsterdam, 2010.
[39] K. Sun, Y. Ou, Y. Zhao, X. Song, and X. Li, “Never let your guard down: Finding unguarded gates to bypass control flow guard with big data,” in Black Hat Asia, 2017.
[40] L. Szekeres, M. Payer, T. Wei, and D. Song, “Sok: Eternal war in memory,” in IEEE S&P, 2013.
[41] J. Tang, “Exploring control flow guard in Windows 10,” 2015. [Online]. Available: https://documents.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf
[42] Theori, “chakra.dll info leak + type confusion for RCE.” [Online]. Available: https://github.com/theori-io/chakra-2016-11
[43] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike, “Enforcing forward-edge control-flow integrity in GCC & LLVM,” in USENIX Security 14, 2014.
[44] D. Weston and M. Miller, “Microsoft’s strategy and technology improvements toward mitigating arbitrary native code execution,” in CanSecWest 2017.
[45] R. Wojtczuk, “An interesting detail about control flow guard,” 2015. [Online]. Available: https://blogs.bromium.com/an-interesting-detail-about-control-flow-guard/
[46] P. Yosifovich, A. Ionescu, and D. A. Solomon, Windows Internals, Part 1: System architecture, processes, threads, memory management, and more, 7th ed. Microsoft Press, 2017.
[47] Y. Yu, “Bypass DEP and CFG using JIT compiler in Chakra engine.” [Online]. Available: http://xlab.tencent.com/en/2015/12/09/bypass-dep-and-cfg-using-jit-compiler-in-chakra-engine/
[48] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song, “Vtint: Protecting virtual function tables’ integrity.” in NDSS, 2015.
[49] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou, “Practical control flow integrity and randomization for binary executables,” in IEEE S&P, 2013.
[50] Y. Zhang, “Bypass control flow guard comprehensively,” in Black Hat USA, 2015.

### Appendix A: S Gadgets

Table III provides detailed information about S gadgets found in system libraries. Gadgets within each library are visually separated by a “•”. Each gadget is described as a set of spills, separated by commas, in the form `reg@+off`, where `reg` is a CPU register and `off` is a stack offset within the RPA. When the tail jump is reached, the value `reg` had upon entry in the S gadget is at `rsp+off`. Chaining a `Poff Rr` gadget will hijack the instruction pointer to the entry value of `reg`.

#### Table III: Detail of S Gadgets Found in Windows 10 64-Bit System Libraries

| Library | Total S gadgets | S gadgets (deduplicated) | Detailed Information |
|---------|-----------------|--------------------------|----------------------|
| aadtb.dll | 3 | - | rcx@+8 • rcx@+8, r8@+24 • rcx@+8, rdx@+16 • rcx@+8, rdx@+16, r8@+24 |
| Chakra.dll | 52 | - | rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rbp@+16, rsi@+24, rdi@+32 • ... |
| Chakradiag.dll | 1 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| CoreUIComponents.dll | 1 | - | rcx@+8, rdx@+16 |
| d2d1.dll | 1 | - | rdx@+8 |
| d3d10warp.dll | 1 | - | rbx@+8 |
| D3DCompiler_47.dll | 64 | - | rcx@+8, r8@+24 • rcx@+8, rdx@+16 • rcx@+8, rdx@+16, r8@+24 |
| dbghelp.dll | 76 | - | rbx@+8, rbp@+16, rsi@+24, rdi@+32 • ... |
| edgehtml.dll | 76 | - | rcx@+8, rdx@+16, r8@+24 • rcx@+8, rdx@+16, r8@+24, r9@+32 |
| FlashUtil_ActiveX.dll | 2 | - | rcx@+8, xmm1@+16 • rcx@+8, r8@+24 • rcx@+8, rdx@+16 • ... |
| jscript9.dll | 34 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| jscript9diag.dll | 5 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| mrt_map.dll | 3 | - | rbx@+8, rsi@+16 |
| msvcp120_clr0400.dll | 217 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| msvcr120_clr0400.dll | 41 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| ortcengine.dll | 12 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| pdm.dll | 28 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| pidgenx.dll | 24 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| rgb9rast.dll | 2 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| rometadata.dll | 4 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| rtmcodecs.dll | 3 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| rtmmvrortc.dll | 12 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| rtmpal.dll | 2 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| rtmpltfm.dll | 83 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| sppc.dll | 129 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| sppcext.dll | 6 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| SystemSettings.Handlers.dll | 1 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| SystemSettingsThresholdAdminFlowUI.dll | 7 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| Windows.Media.Protection.PlayReady.dll | 12 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| Windows.UI.Input.Inking.Analysis.dll | 20 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |
| WsmSvc.dll | 58 | - | rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24 |

This table provides a comprehensive overview of the S gadgets found in various system libraries, highlighting their specific offsets and registers.