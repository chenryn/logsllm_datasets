to an arbitrary location, thus completely bypassing integrity
checks, and allows to launch more traditional exploitation
methods.
We assessed the availability of our gadgets to understand
the feasibility and impact of BATE: we ran a complete
assessment of Windows 10 system libraries, and found many
occurrences of our gadgets, even in appealing targets (such
as C/C++ runtime libraries, the JavaScript engine, a media
codec, and Microsoft Ofﬁce). Every application that loads
any library that contains our gadgets is exposed to BATE.
We therefore conclude that BATE is a realistic threat, both
on 32-bit and 64-bit systems. We demonstrated this by using
BATE to build a remote code execution exploit against the
Microsoft Edge browser, a high-value target (because it can
be exploited remotely, as the victim only needs to visit, for
example, a compromised webpage).
BATE is a so-called “mitigation bypass”, because it avoids
a security mechanism, in particular by leveraging a design
tradeoff between security and memory cost. Therefore,
countermeasures are not easy to implement: CFG can
hardly be modiﬁed to increase its precision. We proposed
some possible mitigations to Microsoft, together with our
responsible disclosure of BATE. We think the most feasible
countermeasure, in the short term, is to force alignment
of unaligned targets. However, cost of this approach is
unclear, and requires further analysis: padding could take
up a signiﬁcant amount of space, and break caching opti-
mizations. Other proposed future work is to further analyze
13
Microsoft’s CFG, to understand if there are other types of
exploitable gadgets next to unaligned targets, and to harden
its design by using secondary protection mechanisms that
could detect such unwanted valid targets, and enforce calls
only of intended targets.
ACKNOWLEDGMENT
Mauro Conti
is supported by a Marie Curie Fellowship funded
by the European Commission (agreement PCIG11-GA-2012-321980). This
work is also partially supported by the EU TagItSmart! Project (agree-
ment H2020-ICT30-2015-688061), the EU-India REACH Project (agreement
ICI+/2014/342-896), by the project CNR-MOST/Taiwan 2016-17 “Veriﬁable
Data Structure Streaming", the grant n. 2017-166478 (3696) from Cisco Uni-
versity Research Program Fund and Silicon Valley Community Foundation,
and by the grant "Scalable IoT Management and Key security aspects in
5G systems" from Intel.
REFERENCES
[1]
[2]
[3]
“Capstone.” [Online]. Available: https://www.capstone-engine.org/
“CVE-2016-7200.” [Online]. Available: https://www.cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2016-7200
“CVE-2016-7201.” [Online]. Available: https://www.cve.mitre.org/cgi-
bin/cvename.cgi?name=CVE-2016-7201
[4] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-ﬂow in-
tegrity principles, implementations, and applications,” ACM TISSEC,
2009.
[5] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang, “Jump-oriented
programming: A new class of code-reuse attack,” in ACM ASIACCS,
2011.
[6] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida, “Dedup est machina:
Memory deduplication as an advanced exploitation vector,” in IEEE
S&P, 2016.
[7] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brunthaler,
and M. Payer, “Control-ﬂow integrity: Precision, security, and perfor-
mance,” ACM Computing Surveys (CSUR), 2017.
[8] A. Chatra, “Tagged ﬂoat.” [Online]. Available: https://abchatra.github.
io/TaggedFloat/
[9] Y. Chen, “The birth of a complete IE11 exploit under the new exploit
mitigations,” in SyScan Singapore, 2015.
[10] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro,
C. Liebchen, M. Qunaibit, and A.-R. Sadeghi, “Losing control: On the
effectiveness of control-ﬂow integrity under stack attacks,” in ACM
CCS, 2015.
[11] D. Dai Zovi, “Practical return-oriented programming,” in SOURCE
Boston, 2010.
[12] T. H. Dang, P. Maniatis, and D. Wagner, “The performance cost of
shadow stacks and stack canaries,” in ACM ASIACCS, 2015.
[13] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching
the gadgets: On the ineffectiveness of coarse-grained control-ﬂow
integrity protection,” in USENIX Security 14, 2014.
I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard, H. Okhravi,
and S. Sidiroglou-Douskos, “Control jujutsu: On the weaknesses of
ﬁne-grained control ﬂow integrity,” in ACM CCS, 2015.
[14]
[15] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh, “Jump over
ASLR: Attacking branch predictors to bypass ASLR,” in IEEE/ACM
MICRO, 2016.
[16] F. Falcón, “Exploiting CVE-2015-0311, part II: Bypassing control
ﬂow guard on Windows 8.1 Update 3,” 2015.
[Online]. Avail-
able: https://www.coresecurity.com/blog/exploiting-cve-2015-0311-
part-ii-bypassing-control-ﬂow-guard-on-windows-8-1-update-3
[17] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of
control: Overcoming control-ﬂow integrity,” in IEEE S&P, 2014.
[19]
Intel, “Control-ﬂow enforcement
technology preview.” [Online].
Available: https://software.intel.com/sites/default/ﬁles/managed/4d/
2a/control-ﬂow-enforcement-technology-preview.pdf
Li,
ﬂow
guard
[20] H.
“Control
Anniversary
improvements
in Win-
10
Avail-
dows
able:
https://blog.trendmicro.com/trendlabs-security-intelligence/
control-ﬂow-guard-improvements-windows-10-anniversary-update/
[21] K. Lu, M.-T. Walter, D. Pfaff, S. Nürnberger, W. Lee, and M. Backes,
“Unleashing use-before-initialization vulnerabilities in the linux ker-
nel using targeted stack spraying,” in NDSS, 2017.
[Online].
Update,”
2016.
[22] Microsoft, “ChakraCore.” [Online]. Available: https://github.com/
Microsoft/ChakraCore
[23] ——,
“Control
Avail-
able: https://msdn.microsoft.com/en-us/library/windows/desktop/
mt637065(v=vs.85).aspx
[Online].
Guard.”
Flow
[24] ——,
“Argument passing
and naming
2016.
https://docs.microsoft.com/en-us/cpp/cpp/
conventions,”
[Online].
argument-passing-and-naming-conventions
Available:
[25] ——,
“Overview of x64 calling conventions,” 2016.
[Online].
Available: https://docs.microsoft.com/en-us/cpp/build/overview-of-
x64-calling-conventions
[26] ——, “A detailed description of
the Data Execution Prevention
(DEP) feature in Windows XP Service Pack 2, Windows XP Tablet
PC Edition 2005, and Windows Server 2003,” 2017. [Online]. Avail-
able: https://support.microsoft.com/en-us/help/875352/a-detailed-
description-of-the-data-execution-prevention-dep-feature-in
[27] MJ0011, “Windows 10 control ﬂow guard internals,” 2014. [Online].
Available: http://www.powerofcommunity.net/poc2014/mj0011.pdf
[28] B. Niu and G. Tan, “Monitor integrity protection with space efﬁciency
and separate compilation,” in ACM CCS, 2013.
[29] PaX Team, “Address space layout randomization (ASLR),” 2003.
[Online]. Available: http://pax.grsecurity.net/docs/aslr.txt
[30] G. Ramalingam, “The undecidability of aliasing,” ACM TOPLAS,
[31]
vol. 16, no. 5, pp. 1467–1471, 1994.
rix, “Smashing C++ vptrs,” Phrack Magazine, vol. 56, no. 8, 2000.
[Online]. Available: http://phrack.org/issues/56/8.html#article
[32] M.
“Back
Schenk,
bypassing
Control
Flow Guard with Structured Exception Handler.”
[Online].
Available: https://improsec.com/blog//back-to-basics-or-bypassing-
control-ﬂow-guard-with-structured-exception-handler
basics
or
to
[33] ——,
“Bypassing Control
10.”
[Online]. Available: https://improsec.com/blog//bypassing-control-
ﬂow-guard-in-windows-10
in Windows
Flow Guard
[34] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A. R. Sadeghi, and
T. Holz, “Counterfeit object-oriented programming: On the difﬁculty
of preventing code reuse attacks in C++ applications,” in IEEE S&P,
2015.
[35] F. J. Serna, “The info leak era on software exploitation,” in Black Hat
USA, 2012.
[36] H. Shacham, “The geometry of innocent ﬂesh on the bone: Return-
into-libc without function calls (on the x86),” in ACM CCS, 2007.
[37] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna,
“SoK: (State of) The Art of War: Offensive Techniques in Binary
Analysis,” in IEEE S&P, 2016.
[38] A. Sintsov, “Jit-spray attacks & advanced shellcode,” in HITBSecConf
Amsterdam, 2010.
[39] K. Sun, Y. Ou, Y. Zhao, X. Song, and X. Li, “Never let your guard
down: Finding unguarded gates to bypass control ﬂow guard with
big data,” in Black Hat Asia, 2017.
[40] L. Szekeres, M. Payer, T. Wei, and D. Song, “Sok: Eternal war in
[41]
memory,” in IEEE S&P, 2013.
J. Tang, “Exploring control ﬂow guard in Windows 10,” 2015. [Online].
Available: https://documents.trendmicro.com/assets/wp/exploring-
control-ﬂow-guard-in-windows10.pdf
[18] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida, “ASLR on
[42] Theori, “chakra.dll info leak + type confusion for RCE.” [Online].
the line: Practical cache attacks on the MMU,” in NDSS, 2017.
Available: https://github.com/theori-io/chakra-2016-11
14
[43] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson,
L. Lozano, and G. Pike, “Enforcing forward-edge control-ﬂow integrity
in GCC & LLVM,” in USENIX Security 14, 2014.
[44] D. Weston and M. Miller, “Microsoft’s strategy and technology im-
provements toward mitigating arbitrary native code execution,” in
CanSecWest 2017.
[45] R. Wojtczuk, “An interesting detail about control ﬂow guard,”
2015. [Online]. Available: https://blogs.bromium.com/an-interesting-
detail-about-control-ﬂow-guard/
[46] P. Yosifovich, A. Ionescu, and D. A. Solomon, Windows Internals, Part
1: System architecture, processes, threads, memory management, and
more, 7th ed. Microsoft Press, 2017.
[47] Y. Yu, “Bypass DEP and CFG using JIT compiler in Chakra engine.”
[Online]. Available: http://xlab.tencent.com/en/2015/12/09/bypass-
dep-and-cfg-using-jit-compiler-in-chakra-engine/
[48] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song, “Vtint:
Protecting virtual function tables’ integrity.” in NDSS, 2015.
[49] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou, “Practical control ﬂow integrity and random-
ization for binary executables,” in IEEE S&P, 2013.
[50] Y. Zhang, “Bypass control ﬂow guard comprehensively,” in Black Hat
USA, 2015.
APPENDIX A
S GADGETS
Table III shows detailed information about S gadgets in
system libraries. Gadgets of a library are visually separated
with a “•”. Each gadget is described as a set of spills,
separated by commas, in the form reg@+off, where reg
is a CPU register and off a stack offset within the RPA.
When the tail jump is reached, the value reg had upon
entry in the S gadget is at rsp+off. As such, chaining a
Poff Rr gadget will hijack the instruction pointer to the entry
value of reg.
TABLE III.
DETAIL OF S GADGETS FOUND IN WINDOWS 10 64-BIT SYSTEM LIBRARIES. GADGETS ARE SEPARATED BY “•”
Library
aadtb.dll
Chakra.dll
Chakradiag.dll
CoreUIComponents.dll
d2d1.dll
d3d10warp.dll
D3DCompiler_47.dll
dbghelp.dll
edgehtml.dll
FlashUtil_ActiveX.dll
jscript9.dll
jscript9diag.dll
mrt_map.dll
mshtml.dll
msvcp120_clr0400.dll
msvcr120_clr0400.dll
ortcengine.dll
pdm.dll
pidgenx.dll
rgb9rast.dll
rometadata.dll
rtmcodecs.dll
rtmmvrortc.dll
rtmpal.dll
rtmpltfm.dll
sppc.dll
sppcext.dll
SystemSettings.Handlers.dll
SystemSettingsThresholdAdminFlowUI.dll
Windows.Media.Protection.PlayReady.dll
Windows.UI.Input.Inking.Analysis.dll
WsmSvc.dll
Total S gadgets
S gadgets (deduplicated)
3
52
1
1
1
1
64
76
76
2
34
5
3
217
41
12
28
24
2
4
3
12
2
83
129
6
1
7
12
20
58
5
rcx@+8 • rcx@+8, r8@+24 • rcx@+8, rdx@+16 • rcx@+8, rdx@+16, r8@+24
rbx@+8
rcx@+8, rdx@+16
rdx@+8
rdx@+8
rbx@+8
rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rbp@+16, rsi@+24, rdi@+32 •
rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rbp@+16, rsi@+24, rdi@+32 •
rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24
rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24
rcx@+8 • rcx@+8, r8@+24 • rcx@+8, rdx@+16 • rcx@+8, rdx@+16, r8@+24
rcx@+8 • rcx@+8, rdx@+16 • rcx@+8, rdx@+16, r8@+24
rcx@+8, r8@+24 • rcx@+8, rdx@+16 • rcx@+8, rdx@+16, r8@+24
rbx@+8
rbx@+8, rbp@+16, rsi@+24, rdi@+32
rcx@+8, rdx@+16, r8@+24 • rcx@+8, rdx@+16, r8@+24, r9@+32
rcx@+8 • rcx@+8, xmm1@+16 • rcx@+8, r8@+24 • rcx@+8, rdx@+16 •
rbx@+8 • rbx@+8, rbp@+16, rsi@+24, rdi@+32 • rbx@+8, rsi@+16 •
rbx@+8, rsi@+16, rdi@+24
rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rbp@+16, rsi@+24, rdi@+32 •
rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rbp@+16, rsi@+24, rdi@+32 •
rbx@+8, rsi@+16
rbx@+8
rbx@+8, rsi@+16
rbx@+8 • rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24
rbx@+8, rbp@+16, rsi@+24
rbx@+8 • rbx@+8, rsi@+16
rbx@+8 • rbx@+8, rsi@+16
rbx@+8
rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rbp@+16, rsi@+24, rdi@+32 •
rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rbp@+16, rsi@+24, rdi@+32 •
rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24
rbx@+8, rsi@+16 • rbx@+8, rsi@+16, rdi@+24
rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rsi@+16
rbx@+8, rsi@+16
rbx@+8
rbx@+8 • rbx@+8, rbp@+16, rsi@+24, rdi@+32 • rbx@+8, rsi@+16
rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rsi@+16
rbx@+8 • rbx@+8, rbp@+16, rsi@+24 • rbx@+8, rsi@+16
r8@+24, r9@+32 • r9@+32
15