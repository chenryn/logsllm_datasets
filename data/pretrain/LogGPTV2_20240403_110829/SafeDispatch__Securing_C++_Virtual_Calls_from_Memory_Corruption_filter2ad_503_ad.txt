vtable t = *((vtable *)o);
if (t != t1 && t != t2 && t != t3)
vt_check(static typeof (o), t);
method m = t[vtable position(x)];
m(o, args);
void vt_check(type c, vtable t) {
if (!ValidVT[c].contains(t)) {
}
error("bogus vtable!");
}
Fig. 8. Alternate SAFEDISPATCH vtable Checking. The instrumentation
above illustrates an alternate vtable hijacking defense: checking the vtable
pointer itself before using it to look up a method implementation. Similar
to the approach shown in Figure 6, the SAFEDISPATCH instrumentation for
this alternate strategy inserts a check in the generated code at each method
call site, but in this case the check ensures that the calling object’s vtable
pointer agrees with the static C++ type system. The vt_check(c, t) function
(analogous to the check() function discussed earlier) consults the ValidVT
table (constructed from a modiﬁed CHA) to ensure that vtable t is a valid
vtable for objects of c’s static type. As in Figure 6, we partially inline this
check using proﬁling information to avoid the overhead of an extra function
call at most method invocations. Again, note that all expressions in italics
in the code above are evaluated at compile time as they require source-level
information available only to the compiler. This alternate defense has higher
overhead, but provides stronger data integrity guarantees in the face of multiple
inheritance.
advantage of proﬁling information as discussed in the previous
section.
C. Performance Implications
The vtable checking approach described above provides a
stronger security guarantee than the method checking approach
described in the previous section, as it also ensures the integrity
of this pointer offsets. Unfortunately, this stronger guar-
antee also incurs higher runtime overhead: since subclasses
frequently inherit method implementations from their parent
classes, at any virtual method call site, the number of valid
vtables is always greater than or equal to the number of valid
method implementations that can be invoked.
To better understand why this is the case, consider an
example in which a class A declares method foo, and suppose
there are many subclasses of A, none of which override foo.
Now for any method call x->foo() where the static type
of x is A, method checking just needs to compare against
A::foo, since it is the only valid implementation of foo.
On the other hand, vtable checking must compare against
each vtable of the many subclasses of A, since each subclass
has its own vtable. In practice, we’ve measured the difference
between the number of valid vtables and the number of valid
method implementations at a given call site to be roughly a
factor of two. We explore the performance implications of this
difference further in Section VI.
V. A HYBRID APPROACH FOR METHOD POINTERS
In previous sections we described two vtable hijacking de-
fenses, method checking and vtable checking, each presenting
8
public: virtual void foo(int) { ... }
class A {
};
class B: A {
};
void (A::*f)(int); // declare f as ptr to some method of A
f = &A::foo;
public: virtual void foo(int) { ... }
// f now points to the foo method
A* a = new A();
(a->*f)(5);
a = new B();
(a->*f)(5);
// method call via f ptr, invokes A::foo
// method call via f ptr, invokes B::foo
Fig. 9. Method Pointer Example. Because C++ method pointers are invoked
via dynamic dispatch, even though f is only assigned once, the ﬁrst call above
jumps to A::foo while the second jumps to B::foo.
different tradeoffs. To best choose between these tradeoffs, we
must consider additional subtleties arising from yet another
C++ feature: method pointers. Conceptually, C++ method
pointers are similar to traditional function pointers, except that
pointers to virtual methods are invoked by dynamic dispatch,
which means they could be exploited by vtable hijacking
attacks and thus SAFEDISPATCH must also protect virtual calls
through method pointers.
Figure 9 illustrates the behavior of C++ method pointers
with two simple classes, A and B, where A contains a single
method foo and B extends A and overrides foo. The method
pointer f is declared to point to a method of an object of
type A or one of A’s subclasses, and then f is assigned to
point to A::foo. Next an A object is allocated and A::foo
is called through the method pointer f. Afterward a B object
is allocated and the same method pointer, f, is used to call
one of the object’s methods. However, in this case, control
jumps to B::foo instead of A::foo since method pointers
are invoked by dynamic dispatch.
To implement method pointer semantics, C++ compilers
generate code which stores a vtable index in method pointers
instead of the concrete address of a method’s implementation.
For example, if foo is placed at index 0 in the vtables of A and
B, then the statement f = &A::foo will store the value 0 in
f. When a call is made through a method pointer, the method
pointer’s value is used to index into the calling object’s vtable
to retrieve the appropriate method implementation to invoke.
A. Revisiting Previous Approaches
We now evaluate our previous two approaches, method
checking and vtable checking, in the face of method pointers.
First, consider our vtable checking technique from Section IV.
Fortunately, vtable checking correctly handles method pointers
with only a slight modiﬁcation: since a method pointer is
simply a vtable index and vtable checking guarantees the
validity of vtables at runtime, SAFEDISPATCH simply checks
that vtable indices from method pointers are within the valid
range of methods for the given class, thus ensuring that method
implementations retrieved by indexing into valid vtables with
a method pointer will also be valid. While simple, this mod-
iﬁcation is essential for preventing hijacking attacks through
method pointers: if an attacker could arbitrarily set the method
9
index to be out of range for the given class’s vtable, they could
cause a virtual method pointer call to jump to malicious code.
Second, consider our method checking technique from
Section III. In particular, consider a call through a method
pointer of the form (x->*f)(...), where the class used in
the declaration of method pointer f is C. We must modify
our method checking approach so that for such calls,
the
instrumentation checks, at runtime, that the function pointer
extracted from the calling object’s vtable is one of the im-
plementations for any method of C or its subclasses. This
conservative approach can lead to a blow up in the number of
required checks for large class hierarchies with many methods,
like those found in modern web browsers. This effect is seen
in Section VI where we evaluate and further compare our
different defenses. Unfortunately, improving on this approach
would require a precise whole program dataﬂow analysis to
compute which method implementations a pointer may point
to. Despite decades of research, such analyses are very difﬁcult
to scale to the large, complex applications most frequently
targeted by vtable hijacking attacks.
B. Hybrid Approach
Comparing method checking and vtable checking in the
face of method pointers leads to a key observation: at
method pointer call sites, vtable checking typically requires
many fewer comparisons than method pointer checking, since
method pointer checking must compare against all method
implementations from several classes. This situation is exactly
the opposite from traditional method calls where vtable check-
ing always demands at least as many comparisons as method
checking, as discussed at the end of Section IV.
This observation suggests a hybrid approach: perform
vtable checking (enhanced with vtable index range checks)
at method pointer call sites and method checking at traditional
method call sites. We implemented this hybrid approach in
SAFEDISPATCH and found that it incurs less runtime overhead
than all other techniques, while providing the same strong
security guarantees against vtable hijacking. We further dis-
cuss the performance implications of our hybrid approach in
Section VI. At a member function call site, the numbers of
method/vtable checks are compared, and vtable checks are
used only when the number of the vtable checks is stricly
less than the number of the method checks.
VI. EVALUATION
In this section we evaluate SAFEDISPATCH along three
primary dimensions: (A) runtime and code size overhead, (B)
effort to develop our prototype, and (C) compatibility with
existing applications and programming practice.
A. SAFEDISPATCH Overhead
To evaluate the overhead of our SAFEDISPATCH defense,
we used our enhanced C++ compiler to build a vtable-safe
version of Google Chromium [20], a full-featured, open source
web browser which forms the core of the popular Google
Chrome browser [19]. Google Chromium is extremely large
and complex, far larger than any SPEC benchmark for exam-
ple. It contains millions of lines of production code, in di-
verse components (HTML renderer, JPEG decoder, Javascript
49.4
^
91.7
^
mchk              
mchk_inline_rand  
mchk_inline_prof  
vtchk             
vtchk_inline_rand 
vtchk_inline_prof 
hybrid            
%
d
a
e
h
r
e
v
O
e
m
i
t
n
u
R
h
c
t
a
p
s
D
e
f
a
S
i
0
4
0
3
0
2
0
1
0
octane
kraken
sunspider
balls
linelayout
html5
mean
Fig. 10. SAFEDISPATCH Overhead. We measured the overhead of SAFEDISPATCH on the Google Chromium browser over six demanding benchmarks: three
industry standard JavaScript performance suites (octane, kraken, and sunspider) and three HTML rendering performance tests (balls, linelayout, and html5). All
results are reported from the average of ﬁve runs, using percentage overhead compared to a baseline with no instrumentation. “mchk” is the unoptimized method
pointer checking from Section III, “vtchk” is the unoptimized vtable checking from Section IV. “inline rand” indicates that we inline all checks that our Class
Hierarchy Analysis tells us are needed for safety, but we inline them in a random order (i.e. no proﬁle information). “inline prof” indicates that we inline the
checks observed during proﬁling in order of how frequently they occur. “hybrid” is the hybrid approach from Section V, which does proﬁle-based inlining, but
also combines method pointer checking and vtable checking. Note that two bars did not ﬁt in the graph with the scale we chose for the y axis, namely “vtchk”
and “vtchk inline rand” for html5; we shortened those bars, and show their values right on top of the bars (rather than change the scale and make all the other
bars more difﬁcult to read).
JIT, IPC library, etc.) developed across multiple organizations
(Google and various open source groups). Chromium serves as
an ideal test case for SAFEDISPATCH: not only is it a complex,
high performance C++ application with millions of users, but
has also been targeted by several vtable hijacking attacks [12],
[9].
Benchmarks. We measured SAFEDISPATCH overhead on
Chromium over six demanding benchmarks: three industry-
standard JavaScript performance suites (octane [23], sun-
spider [24], and kraken [25]), and three HTML rendering
performance tests (balls, linelayout, and html5). The three
HTML rendering benchmarks are drawn from the WebKit
performance test suite [26],
the engine underlying several
major web browsers including Google Chrome, Apple Safari,
and Opera. We selected these benchmarks from the suite as
three of the most important for performance and rendering
correctness. We brieﬂy describe the benchmarks below:
octane, kraken, and sunspider are the JavaScript perfor-
mance benchmarking suites from the Google Chrome, Mozilla
Firefox, and Apple WebKit teams respectively. These bench-
marks strive to measure real-world workloads and exercise
the most
important browser functionality, while remaining
statistically sound and pushing for improvement on bleeding-
edge features. For octane we report the benchmark score where
higher is better and for kraken and sunspider we measure
running time in milliseconds where smaller is better.
balls creates thousands of small ball-shaped DOM ele-
ments, moves them around on the screen, measures how many
of them can be moved in a ﬁxed amount of time, and reports
frames per second as its output. We report frames per second
(fps); higher is better.
linelayout creates multiple DOM objects containing copi-
ous text. The renderer must draw many text lines, automatically
inserting line breaks and allocating DOM objects efﬁciently on
the screen, ensuring the renderer correctly handles the layout of
DOM elements on the screen. We report number of complete
runs in a ﬁxed period; higher is better.
html5 performs millions of DOM manipulations to test
numerous HTML5 features and is one of the most demand-
ing WebKit performance tests. Each complex rendering is
compared to an industry-standard reference rendering, thus
ensuring optimizations have not introduced incorrect behavior.
We report timing results in milliseconds; smaller is better.
Runtime Overhead. Figure 10 presents the runtime over-
head percentage of SAFEDISPATCH on benchmarks using a
number of different approaches and optimizations, whereas
Figure 11 presents the raw numbers, including memory over-
head. See the caption of Figure 10 for what each conﬁguration
of SAFEDISPATCH corresponds to (e.g., “mchk inline rand”).
All our results are the average of ﬁve runs on an otherwise
quiescent system running Ubuntu 12.04 on an Intel i7 Quad
Core machine with 8GB of RAM.
From Figure 10, we can see that in general, all the “mchk”
overheads are smaller than the “vtchk” overheads. This is
consistent with the fact that, as described in Section 8, the
number of valid vtables at a given method callsite is often
2x greater than the number of valid method implementations.
Figure 10 shows the effectiveness of partial inlining of checks
10
Instrumentation
none
mchk
mchk inline rand
mchk inline prof
vtchk
vtchk inline rand
vtchk inline prof
hybrid
octane
(score)
15353
14454
14897
15278
14101
14969
15228
15299
kraken
(ms)
1556
1643
1599
1570
1782
1725
1574
1570
sunspider