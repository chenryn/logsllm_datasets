### 优化后的文本

```cpp
catch(C e) 
{
    // 捕捉 C 类型的异常
    printf("Class C %d captured\n", e.no);
}

o.age = o0.age;  // 此语句前 EHRec 被设置为 2
}  // EHRec = 1

catch(...) 
{
    // 捕捉所有类型的异常
    printf("Async exception captured\n");
}  // EHRec = 0

return o.age;
```

```cpp
int main(int argc, char* argv[]) 
{
    printf("Exception Handling in C++ [%d]!\n", CppEH(argc - 1));
    return 0;
}
```

---

**调试版本的 `CppEH.EXE` 程序**

当带一个参数执行调试版本的 `CppEH.EXE` 程序时（例如 `argc = 2`），第 16 行的除法操作可以顺利进行，随后执行第 17 行的 `throw` 语句，抛出一个 C++ 类类型的异常。这个异常将被第一个 `catch` 块捕获。执行结果如下所示：

```plaintext
c:\dig\dbg\author\code\bin\Debug>cppeh 888
Object 1 is destroyed [100]  // 执行 Catch 块前栈展开时析构对象 o1
Class C 1 is captured  // 执行第 19～22 行的 catch 块
Object 1 is destroyed [100]  // Catch 块中的用户代码执行后析构对象 e
Object 1 is destroyed [100]  // 析构抛出的异常对象，参见第 24.9 节
Object 0 is destroyed [100]  // 对象 o0 被析构
Object -1 is destroyed [100]  // -1 号对象被析构
Exception Handling in C++ [100]!  // main 函数打印的消息
```

如果不带任何参数执行调试版本的 `CppEH.EXE`（即 `argc = 1`），第 16 行会导致一个除零异常。对于 C++ 程序来说，这是一个非语言级的异常，也称为异步异常或结构化异常。普通 `catch` 块只能匹配 C++ 异常，而第二个 `catch(...)` 块可能捕捉到这种异步异常。执行结果如下：

```plaintext
c:\dig\dbg\author\code\bin\Debug>cppeh
Object 0 is destroyed [0]  // 对象 o0 被析构
Async exception captured  // 执行第 25～28 行的 catch 块
Object -1 is destroyed [100]  // 对象 o-1 被析构
Exception Handling in C++ [100]!  // main 函数打印的消息
```

对于发布版本的 `CppEH.EXE`，带参数执行的结果与调试版本相同。如果不带参数执行，则会导致应用程序错误并启动 JIT 调试，这说明默认发布版本的 `CppEH.EXE` 的 `catch(...)` 块没有捕捉到除零异常。

**编译器选项**

VC 编译器有一个重要的 C++ 异常处理选项：`/EH{s|a}[c][-]`。其中：
- `s` 表示只捕捉同步异常且外部 C 函数会抛出异常。
- `a` 表示捕捉同步和异步异常。
- `c` 表示外部 C 函数不抛出异常。

发布版本的默认设置为 `EHsc`，即只捕捉非 C 函数的同步异常。如果在发布版本的项目属性中加入 `/EHa` 开关并重新编译，则 `catch(...)` 块也可以捕捉到除零异常。

**C++ 异常处理的编译**

C++ 标准定义了 C++ 异常处理的基本行为，但未规定编译器如何编译相关代码。不同编译器的实现机制可能有所不同。以下以 VC 编译器为例，展示 `CppEH` 函数的汇编代码。

```assembly
CppEH!CppEH:
00401000 55               push    ebp
00401001 8bec             mov     ebp, esp
00401003 6aff             push    0FFFFFFFFh
00401005 68d8784000      push    offset CppEH!CloseHandle+0x22 (004078d8)
0040100a 64a100000000    mov     eax, dword ptr fs:[00000000h]
00401010 50                push    eax
00401011 64892500000000  mov     dword ptr fs:[0], esp
00401018 83ec24           sub     esp, 24h
```

这段代码与使用 `__try{}__except()` 结构的情况类似，但有两点不同：
1. 在压入处理函数地址之前，压入的是 `EHRec` 变量的初始值 `-1`，而不是范围表指针。
2. 使用 C++ 异常处理的函数所注册的异常处理函数与使用 `__try{}__except()` 结构时的处理函数不同。

反汇编 `CppEH!CloseHandle+0x22` 地址可以看到，该函数只是一个过渡，它将某个地址赋给 `EAX` 寄存器后跳转到 `__CxxFrameHandler` 函数。

```assembly
CppEH!CloseHandle+0x22:
004078d8 b820864000      mov     eax, offset CppEH!_TI1H+0x10 (00408620)
004078dd e9a299ffff      jmp     CppEH!__CxxFrameHandler (00401284)
```

`CppEH` 入口是为了传递赋给 `EAX` 寄存器的地址值（00408620），该地址指向一个名为 `__cxx_function_descr` 的数据结构，称为 C++ 函数描述符。

```cpp
typedef struct __cxx_function_descr {
    UINT  magic;            // 结构签名，固定为 0x19930520
    UINT  unwind_count;     // unwind_table 数组所包含的元素个数
    unwind_info *unwind_table;  // 用于描述展开信息的展开表
    UINT  tryblock_count;   // tryblock 数组所包含的元素个数
    tryblock_info *tryblock;  // 用于描述 try{}catch 结构的 Try 块表
    UINT  unknown[3];       // 
} cxx_function_descr;
```

使用 `dd` 命令加上 `CppEH` 入口代码中的地址可以观察 `CppEH` 函数的描述结构。

```plaintext
0:000> dd 00408620
00408620  19930520 00000007 00408640 00000002
00408630  00408678 00000000 00000000 00000000
```

其中，`19930520` 是 `magic` 字段，`00000007` 代表 `00408640` 处有 7 个 `unwind_info` 结构，后面的 `2` 代表这个函数中共有两个 `Try` 块，它们的描述位于 `00408678`。

`unwind_info` 结构的定义如下：

```cpp
typedef struct __unwind_info {
    int    prev;            // 这个展开任务执行后要执行的下一个展开处理器的 EHRec
    void (*handler)();      // 执行这个展开任务的函数，即展开处理器（unwind handler）
} unwind_info;
```

对于 `CppEH` 函数，`unwind_count = 7`，`unwind_table` 数组的地址是 `00408640`。使用 `dd` 命令可以观察原始的数据。

```plaintext
0:000> dd 00408640 le
00408640  ffffffff 004078c0 00000000 00000000
00408650  00000001 004078c8 00000002 00000000
00408660  00000003 004078d0 00000002 00000000
00408670  00000000 00000000
```

其中第 2、4 列是 `prev` 字段，第 3、5 列是 `handler` 字段。可以看到某些 `handler` 字段为空，这是预留的，没有真正使用。非零的 `handler` 字段值代表栈展开时要调用的函数地址。对其其中的 `004078c0` 进行反汇编：

```assembly
0:000> u 004078c0  
004078c0 8d4de0          lea     ecx, [ebp-20h]     
004078c3 e91898ffff     jmp     CppEH!C::~C (004010e0)     
```

这段代码也是很短的一个转发性代码，共有两行汇编，第 1 行是将一个局部变量的地址赋给 `ECX` 寄存器，然后跳转到类 `C` 的析构函数中。对 `004078c8` 和 `004078d0` 进行反汇编，看到的结果非常类似，因此可以想象到这 3 个代码片段是与 `CppEH` 函数中的 3 个对象一一对应。

描述 `try{}catch` 布局的 `tryblock_info` 结构的定义如下：

```cpp
typedef struct __tryblock_info {
    int   start_level;          // 这个 Try 块起点的 EHRec 级别
    int   end_level;            // 这个 Try 块的终点的 EHRec 级别
    int   catch_level;          // Catch 块的初始 EHRec 级别
    int   catchblock_count;     // catchblock 数组的元素个数
    const catchblock_info *catchblock;  // 描述 Catch 块的数组
} tryblock_info;
```

在 `CppEH` 函数中有两个 `Try` 块，因此 `tryblock` 所指向的地址处有两个 `tryblock_info`。使用 `dd` 命令可以观察这两个结构。

```plaintext
0:000> dd 00408678 la
00408678  00000003 00000004 00000005 00000001
00408688  004086a0 00000001 00000005 00000006
00408698  00000001 004086b0
```

每个 `tryblock_info` 结构的长度是 20 个字节，即 5 个 DWORD 长。前 5 个描述的是内层的 `Try` 块（第 14～18 行，我们将其称为 `Try1`），后 5 个描述的是外层的 `Try` 块（第 11～24 行，即 `Try0`）。

为了支持对象展开，编译器在描述 C++ 异常结构时，使用一个名为 `EHRec` 的内部变量来标记不同的区域。编译器产生的代码是使用 `EBP-4` 来索引 `EHRec` 变量，因此观察汇编代码中对局部变量 `EBP-4` 的赋值指令就可以看到编译器是如何设置 `EHRec` 的。

`catchblock_count` 字段用来记录 `Try` 块所拥有的 `Catch` 块数量，`catchblock` 数组用来描述每个 `Catch` 块的信息，每个元素是一个 `catchblock_info` 结构。

```cpp
typedef struct __catchblock_info {
    // 定义内容
} catchblock_info;
```

---

通过以上优化，文本更加清晰、连贯和专业。希望这对你有所帮助！