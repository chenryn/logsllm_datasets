8536.345
(6.188)
Client Time
(milliseconds)
0.584
(0.508)
0.975
(0.442)
17.046
(0.826)
5.127
(0.375)
1150.872
(244.288)
1152.238
(242.014)
1157.732
(244.015)
1159.099
(241.534)
1151.529
(235.234)
1266.838
(258.101)
Server Time
(milliseconds)
0.494
(0.507)
0.745
(0.245)
11.823
(0.726)
2.807
(0.431)
1144.994
(251.304)
1150.310
(253.582)
1151.446
(246.534)
1156.482
(235.703)
1143.337
(238.465)
1265.332
(264.271)
RESOURCE REQUIREMENTS FOR VPN HANDSHAKE PROTOCOLS OVER
IPV6, NUMBERS IN PARENTHESES ARE STANDARD DEVIATION
TABLE IV
VPN Software
WireGuard
PQ-WireGuard
(this paper)
IPsec
(RSA-2048)
IPsec
(Curve25519)
OpenVPN
(RSA-2048)
OpenVPN
(NIST P-256)
OpenVPN-NL
(RSA-2048)
OpenVPN-NL
(NIST P-256)
PQ-OpenVPN
(Frodo-752 [73])
PQ-OpenVPN
(SIDHp503 )
Packet
Number
3
(0)
3
(0)
6
(0)
4
(0)
21.003
(0.055)
19.005
(0.007)
19.005
(0.072)
19.001
(0.003)
63.006
(0.078)
23.005
(0.072)
Trafﬁc
(bytes)
458
(0)
2654
(0)
4299
(0)
2281
(0)
7955.409
(7.319)
5788.610
(9.423)
6065.700
(9.665)
6061.138
(4.304)
35608.817
(10.324)
8996.684
(9.449)
Client Time
(milliseconds)
0.592
(0.399)
1.015
(0.618)
17.188
(0.712)
5.226
(0.575)
1148.733
(250.513)
1139.140
(247.659)
1162.649
(261.078)
1159.627
(252.989)
1160.922
(259.246)
1277.172
(251.461)
Server Time
(milliseconds)
0.480
(0.389)
0.786
(0.621)
11.912
(0.535)
2.822
(0.436)
1142.650
(243.184)
1133.944
(240.691)
1151.790
(246.363)
1153.949
(247.470)
1155.713
(245.614)
1269.074
(257.427)
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
We see that both WireGuard and PQ-WireGuard only
require 3 packets. We also see that in PQ-WireGuard, the total
time required for the handshake on the client side increases by
less than 70% compared to WireGuard, at least when it is run
over a high-speed network link as in our experiments. The time
required for server-side computations increases by just over
50% compared to WireGuard. The computational effort for
both WireGuard and PQ-WireGuard are dominated by public-
key cryptography; we would expect that future improvements
to the McEliece or Dagger software will bring PQ-WireGuard
even closer to the performance of WireGuard.
Just as the original WireGuard software, PQ-WireGuard
outperforms the main competitors IPsec and OpenVPN in
terms of handshake time, computation time on the server,
number of transmitted packets, and amount of transmitted data.
Speciﬁcally, the PQ-WireGuard handshake is about 5 times
faster than the handshake of IPsec and more than three orders
of magnitude faster than the handshake of OpenVPN, all while
offering full protection against future attackers equipped with
large quantum computers.
ACKNOWLEDGEMENTS
We would like to thank Benjamin Dowling and Kenneth G.
Paterson for helpful discussions and the LATEX sources of their
proof. We would also like to thank the anonymous reviewers
for valuable comments.
This work has been supported by the European Commission
through the ERC Starting Grant 805031 (EPOQUE), and by
the Dutch Ministry of Economic Affairs and Climate Policy
through the WBSO R&D tax credit.
REFERENCES
[1] J. Donenfeld, “WireGuard: Next Generation Kernel Network Tunnel,”
in 24th Annual Network and Distributed System Security Symposium.
Internet Society, 2017.
[2] T. Perrin, “Noise protocol framework,” https://noiseprotocol.org/noise.
pdf (accessed 2019-10-22).
[3] D. J. Bernstein, “Curve25519: new Difﬁe-Hellman speed records,” in
Public Key Cryptography – PKC 2006, ser. LNCS, vol. 3958. Springer,
2006, pp. 207–228.
[4] J.-P. Aumasson, S. Neves, Z. Wilcox-O’Hearn, and C. Winnerlein,
“BLAKE2: Simpler, smaller, fast as MD5,” in Applied Cryptography
and Network Security – ACNS 2013, ser. LNCS, vol. 7954. Springer,
2013, pp. 119–135.
[5] D. J. Bernstein, “The Poly1305-AES message-authentication code,” in
Springer, 2005, pp.
Fast Software Encryption, ser. LNCS, vol. 3557.
32–49.
[6] ——, “ChaCha, a variant of Salsa20,” in Workshop Record of SASC
2008: The State of the Art of Stream Ciphers, 2008, http://cr.yp.to/papers.
html#chacha.
[7] Y. Nir and A. Langley, “ChaCha20 and Poly1305 for IETF protocols,”
IETF RFC 8439, 2018.
[8] Jason Donenfeld and Kevin Milner, “Formal veriﬁcation of the Wire-
Guard protocol,” 2018, version June 7, 2018, https://www.wireguard.
com/papers/wireguard-formal-veriﬁcation.pdf.
[9] B. Dowling and K. G. Paterson, “A cryptographic analysis of the
WireGuard protocol,” in Applied Cryptography and Network Security.,
ser. LNCS, vol. 10892. Springer, 2018.
[10] “BoringTun,” https://github.com/cloudﬂare/boringtun.
[11] L. Torvalds, “Re: [GIT] Networking,” Posting to the Linux kernel mail-
ing list, 2018, http://lkml.iu.edu/hypermail/linux/kernel/1808.0/02472.
html.
[12] J. Appelbaum, C. Martindale, and P. Wu, “Tiny WireGuard tweak,” in
Progress in Cryptology – AFRICACRYPT 2019, ser. LNCS, vol. 11627.
Springer, 2019, pp. 3–20.
[13] W. Castryck, T. Lange, C. Martindale, L. Panny, and J. Renes, “CSIDH:
An efﬁcient post-quantum commutative group action,” in Advances in
Cryptology – ASIACRYPT 2018, ser. LNCS, vol. 11274. Springer, 2018,
pp. 395–427.
[14] X. Bonnetain and A. Schrottenloher, “Quantum security analysis of
CSIDH,” in Advances in Cryptology – EUROCRYPT 2020, ser. LNCS,
vol. 12106. Springer, 2020, pp. 493–522.
[15] D. J. Bernstein, T. Lange, C. Martindale, and L. Panny, “Quantum
circuits for the CSIDH: Optimizing quantum evaluation of isogenies,” in
Advances in Cryptology – EUROCRYPT 2019, ser. LNCS, vol. 11477.
Springer, 2019, pp. 409–441.
[16] C. Peikert, “He gives C-sieves on the CSIDH,” in Advances in Cryptol-
ogy – EUROCRYPT 2020, ser. LNCS, vol. 12106. Springer, 2020, pp.
463–492.
[17] D.
“Re:
J. Bernstein,
[pqc-forum] new quantum cryptanalysis
of CSIDH,” Posting to the NIST pqc-forum mailing list, 2019,
https://groups.google.com/a/list.nist.gov/forum/#!original/pqc-forum/
svm1kDy6c54/0gFOLitbAgAJ.
[18] A. Fujioka, K. Suzuki, K. Xagawa, and K. Yoneyama, “Strongly secure
authenticated key exchange from factoring, codes, and lattices,” in
Public-Key Cryptography – PKC 2012, ser. LNCS.
Springer, 2012,
pp. 467–484.
[19] A. Atlasis, “Attacking IPv6 implementation using fragmentation,”
Blackhat Europe, 2012, http://media.blackhat.com/bh-eu-12/Atlasis/
bh-eu-12-Atlasis-Attacking_IPv6-WP.pdf.
[20] S. Deering and R. Hinden, “Internet protocol, version 6 (IPv6) speciﬁ-
cation,” IETF RFC 8200, 2017.
[21] D. Jao, R. Azarderakhsh, M. Campagna, C. Costello, L. D. Feo, B. Hess,
A. Jalali, B. Koziel, B. LaMacchia, P. Longa, M. Naehrig, J. Renes,
V. Soukharev, D. Urbanik, and G. Pereira, “Supersingular isogeny key
encapsulation,” Round-2 submission to the NIST PQC project, 2019.
[22] D. J. Bernstein, T. Chou, T. Lange, I. von Maurich, R. Misoczki,
R. Niederhagen, E. Persichetti, C. Peters, P. Schwabe, N. Sendrier,
J. Szefer, and W. Wang, “Classic McEliece: conservative code-based
cryptography,” Round-2 submission to the NIST PQC project, 2019.
[23] J.-P. D’Anvers, A. Karmakar, S. S. Roy, and F. Vercauteren, “Saber:
Module-LWR based key exchange, CPA-secure encryption and CCA-
secure KEM,” in Progress in Cryptology – AFRICACRYPT 2018, ser.
LNCS, vol. 10831. Springer, 2018, pp. 282–305.
[24] ——, “SABER: Mod-LWR based KEM (round 2 submission),” Round-2
submission to the NIST PQC project, 2019.
[25] D. J. Bernstein, “Re: [pqc-forum] ROUND 2 OFFICIAL COMMENT:
NewHope,” Posting to the NIST pqc-forum mailing list, 2019,
https://groups.google.com/a/list.nist.gov/forum/#!original/pqc-forum/
u3FoYrN-7fk/3EZwDIvDBQAJ.
[26] ——,
“Re:
[pqc-forum] ROUND 2 OFFICIAL COMMENT:
NewHope,” Posting to the NIST pqc-forum mailing list, 2019,
https://groups.google.com/a/list.nist.gov/forum/#!original/pqc-forum/
u3FoYrN-7fk/MxBVn9M7CQAJ.
[27] E. Alkim, L. Ducas, T. Pöppelmann, and P. Schwabe, “NEWHOPE
without reconciliation,” Cryptology ePrint Archive, Report 2016/1157,
2016, https://eprint.iacr.org/2016/1157.
[28] T. Perrin, “KEM-based hybrid forward secrecy for Noise,” 2018,
https://github.com/noiseprotocol/noise_hfs_spec/blob/master/output/
noise_hfs.pdf.
[29] C. Boyd, Y. Cliff, J. G. Nieto, and K. G. Paterson, “Efﬁcient one-
round key exchange in the standard model,” in Information Security
and Privacy, ser. LNCS, vol. 5107. Springer, 2008, pp. 69–83.
[30] E. Fujisaki and T. Okamoto, “Secure integration of asymmetric and
symmetric encryption schemes,” in Advances in Cryptology - CRYPTO
’99, ser. LNCS, vol. 1666. Springer, 1999, pp. 537–554.
[31] K. Hövelmanns, E. Kiltz, S. Schäge, and D. Unruh, “Generic authenti-
cated key exchange in the quantum random oracle model,” Cryptology
ePrint Archive, Report 2018/928, 2018, https://eprint.iacr.org/2018/928.
[32] Understanding and C. A. via Double-key Key Encapsulation Mechanism,
“Haiyang xue and xianhui lu and bao li and bei liang and jingnan he,”
in Advances in Cryptology – ASIACRYPT 2018, ser. LNCS, vol. 11274.
Springer, 2018, pp. 158–189.