# 分析BSidesSF CTF 2020中Crypto方向题目
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在BSidesSF CTF 2020中有9道Crypto相关的题目，题目整体难度适中，在这里对这9道题目进行一下分析。
## chameleon
题目描述：  
Somebody encrypted our flag and lost the key! Can you decrypt it? We’ve
included the encryption utility, it should come in handy!  
Note: The file was encrypted in the past few months. We don’t have a more
specific date.
题目附件：  
[chameleon.exe](https://github.com/ichunqiu-resources/anquanke/blob/master/009/chameleon/chameleon.exe)  
[flag.png.enc](https://github.com/ichunqiu-resources/anquanke/blob/master/009/chameleon/flag.png.enc)
用IDA加载本题的exe程序，发现程序去除了符号表，在main函数的最后可以找到encrypt和decrypt函数，我们跟进encrypt函数看一下：
    void __usercall sub_401FC0(const CHAR *a1@)
    {
      void *v1; // eax
      BYTE *v2; // esi
      FILE *v3; // eax
      DWORD pdwDataLen; // [esp+4h] [ebp-2Ch]
      HCRYPTKEY phKey; // [esp+8h] [ebp-28h]
      HCRYPTPROV phProv; // [esp+Ch] [ebp-24h]
      BYTE pbData; // [esp+10h] [ebp-20h]
      char v8; // [esp+11h] [ebp-1Fh]
      __int16 v9; // [esp+12h] [ebp-1Eh]
      int v10; // [esp+14h] [ebp-1Ch]
      int v11; // [esp+18h] [ebp-18h]
      int v12; // [esp+1Ch] [ebp-14h]
      int v13; // [esp+20h] [ebp-10h]
      int v14; // [esp+24h] [ebp-Ch]
      int v15; // [esp+28h] [ebp-8h]
      v1 = (void *)sub_401EA0(&pdwDataLen);
      v2 = (BYTE *)realloc(v1, pdwDataLen + 16);
      if ( !CryptAcquireContextA(&phProv, 0, "Microsoft Enhanced Cryptographic Provider v1.0", 1u, 0xF0000000) )
        goto LABEL_9;
      sub_401A10((int)&v14);
      v9 = 0;
      pbData = 8;
      v11 = 8;
      v12 = v14;
      v13 = v15;
      v8 = 2;
      v10 = 26113;
      if ( !CryptImportKey(phProv, &pbData, 0x14u, 0, 1u, &phKey)
        || !CryptEncrypt(phKey, 0, 1, 0, v2, &pdwDataLen, pdwDataLen + 8) )
      {
    LABEL_9:
        v3 = _iob_func();
        fprintf(v3 + 2, "Encryption failedn");
        exit(1);
      }
      sub_401AA0((int)&v14);
      sub_401F50(a1, v2, pdwDataLen);
      free(v2);
    }
可以看到程序调用了CryptAcquireContextA、CryptImportKey、CryptEncrypt等API，查阅[API手册](https://docs.microsoft.com/en-us/windows/win32/seccrypto/example-c-program--importing-a-plaintext-key)可以看到这里程序使用DES-CBC进行加密，key来自sub_401A10函数，那么我们接下来跟进sub_401A10函数来看一下：
    char __usercall sub_401A10@(int a1@)
    {
      __time64_t v1; // rax
      signed int v2; // ecx
      unsigned int v3; // esi
      v1 = time64(0);
      v2 = 0;
      do
      {
        LODWORD(v1) = 29945647 * v1 - 1;
        dword_404380[v2++] = v1;
      }
      while ( v2 = 351 )
      {
        v1 = 175;
        v2 = (unsigned int *)&unk_404384;
        do
        {
          v3 = *v2;
          v4 = v1 + 1;
          *(v2 - 1) = ((*(v2 - 1) ^ (*v2 ^ *(v2 - 1)) & 0x7FFFF) >> 1) ^ dword_40437C[v4] ^ -((*((_BYTE *)v2 - 4) ^ (unsigned __int8)(*(_BYTE *)v2 ^ *((_BYTE *)v2 - 4))) & 1) & 0xE4BD75F5;
          if ( v4 >= 351 )
            v4 = 0;
          v5 = v2[1];
          v6 = ((v3 ^ (v3 ^ v2[1]) & 0x7FFFF) >> 1) ^ dword_404380[v4] ^ -(((unsigned __int8)v3 ^ (unsigned __int8)(v3 ^ *((_BYTE *)v2 + 4))) & 1) & 0xE4BD75F5;
          v7 = v4 + 1;
          *v2 = v6;
          if ( v7 >= 351 )
            v7 = 0;
          v8 = v2[2];
          v9 = ((v5 ^ (v5 ^ v2[2]) & 0x7FFFF) >> 1) ^ dword_404380[v7] ^ -(((unsigned __int8)v5 ^ (unsigned __int8)(v5 ^ *((_BYTE *)v2 + 8))) & 1) & 0xE4BD75F5;
          v10 = v7 + 1;
          v2[1] = v9;
          if ( v10 >= 351 )
            v10 = 0;
          v11 = v2[3];
          v12 = ((v8 ^ (v8 ^ v2[3]) & 0x7FFFF) >> 1) ^ dword_404380[v10] ^ -(((unsigned __int8)v8 ^ (unsigned __int8)(v8 ^ *((_BYTE *)v2 + 12))) & 1) & 0xE4BD75F5;
          v13 = v10 + 1;
          v2[2] = v12;
          if ( v13 >= 351 )
            v13 = 0;
          v14 = ((v11 ^ (v11 ^ v2[4]) & 0x7FFFF) >> 1) ^ dword_404380[v13] ^ -(((unsigned __int8)v11 ^ (unsigned __int8)(v11 ^ *((_BYTE *)v2 + 16))) & 1) & 0xE4BD75F5;
          v1 = v13 + 1;
          v2[3] = v14;
          if ( v1 >= 351 )
            v1 = 0;
          v2 += 5;
        }
        while ( (signed int)v2 > 1) ^ -(((unsigned __int8)dword_4048F8 ^ (unsigned __int8)(dword_4048F8 ^ LOBYTE(dword_404380[0]))) & 1) & 0xE4BD75F5;
        v0 = 0;
      }
      v15 = dword_404380[v0];
      dword_404018 = v0 + 1;
      v16 = ((((v15 >> 11) ^ v15) & 0xCABCA5) > 11) ^ v15;
      return (unsigned __int8)(v16 ^ ((((v16 & 0xFFFFFFAB) > 17));
    }
这里较多计算都涉及到了常数0xE4BD75F5，检索一下这个常数，可以找到[这段代码](http://www.ai.mit.edu/courses/6.836-s03/handouts/sierra/random.c)，可以看到程序这里是模拟了一个类似梅森旋转的伪随机数生成器，但是并不是MT19937，许多地方做了修改，比如循环次数不是624而是351，常数不是0x9908B0DF而是0xE4BD75F5，继续查找资料，在[这篇文章](https://hal.archives-ouvertes.fr/hal-02182827/document)中发现这里使用的是MT11213：
    "MT11213" with a period of 211213 − 1 that has w = 32, N = 351, m =
    175, c = 19, and a = 0xE4BD75F5 as recurrence parameters, and c1 =
    0x655E5280, c2 = 0xF F D58000, b1 = 11, b2 = 7, b3 = 15, and b4 = 17
    265 for tempering ones
    "MT19937", which has a period of 219937 − 1, has w = 32, N = 624,
    m = 397, c = 31, and a = 0x9908B0DF as recurrence parameters, and
    c1 = 0x9D2C5680, c2 = 0xEF C60000, b1 = 11, b2 = 7, b3 = 15, and
    b4 = 18] for Tempering ones.
既然如此，题目说文件是过去的几个月以来加密的，但是具体时间并不知道，比赛时间为23 Feb. 2020, 17:00
UTC，我们可以尝试在一个小范围内爆破这一日期，例如从2020-02-01 00:00:00起，至2020-02-23
00:00:00止，产生若干密钥依次来尝试解密，由于我们的原始文件为flag.png，根据PNG文件格式，解密成功的情况下其前8个字节应为x89x50x4ex47x0dx0ax1ax0a，我们可以以此来作为密钥是否正确的标志，随后使用该密钥进行解密即可，将上述推导过程写成代码形式如下：
    #include 
    #include 
    #define RAND_MASK 0x3FFFFFFF
    #define N 351
    #define M 175
    #define R 19
    #define TEMU 11
    #define TEMS 7
    #define TEMT 15
    #define TEML 17
    #define MATRIX_A 0xE4BD75F5
    #define TEMB         0x655E5280
    #define TEMC         0xFFD58000
    static unsigned int mt[N];
    static int mti=N;