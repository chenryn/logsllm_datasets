# FRIDA脚本系列（四）更新篇：几个主要机制的大更新
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
最近沉迷学习，无法自拔，还是有一些问题百思不得骑姐，把官网文档又翻了一遍，发现其实最近的几个主要版本，更新还是挺大的，遂花了点时间和功夫，消化吸收下，在这里跟大家分享。
## 进程创建机制大更新
###  存在的问题：无法为新进程准备参数和环境
当我们使用`Frida Python`的`binding`的时候，一般会这么写：
    pid = device.spawn(["/bin/cat", "/etc/passwd"])
或者在iOS平台上，会这样写：
    pid = device.spawn(["com.apple.mobilesafari"])
目前来看貌似用这个`API`只能这么写，这么写其实是存在很多问题的，比如说没有考虑完整参数列表的问题，或者说新进程的环境是继承自绑定的`host`机环境还是设备`client`环境？再比如想要实现定制功能，比如以关闭`ASLR`模式打开`safari`，这些都没有考虑进去。
###  **问题产生的原因(一)：当初源码中就没有实现**
我们先来看看这个`API`在`frida-core`里是如何实现的：
    namespace Frida {
        …
        public class Device : GLib.Object {
            …
            public async uint spawn (string path,
                string[] argv, string[] envp)
                throws Frida.Error;
            public uint spawn_sync (string path,
                string[] argv, string[] envp)
                throws Frida.Error;
        }
        …
    }
这段代码是用`vala`语言写的，`frida-core`都是用`vala`写的，`vala`看起来跟`C#`很像，并且最终会被编译成`C`代码。从代码可以看出，第一个方法——`spawan`是异步的，调用者调用一遍就可以去干其他事情了，不用等待调用完成，而第二个方法——`spawn_sync`则需要等到调用完全结束并返回。
这两个方法会被编译成如下的C代码：
    void frida_device_spawn (FridaDevice * self,
        const gchar * path,
        gchar ** argv, int argv_length,
        gchar ** envp, int envp_length,
        GAsyncReadyCallback callback, gpointer user_data);
    guint frida_device_spawn_finish (FridaDevice * self,
        GAsyncResult * result, GError ** error);
    guint frida_device_spawn_sync (FridaDevice * self,
        const gchar * path,
        gchar ** argv, int argv_length,
        gchar ** envp, int envp_length,
        GError ** error);
前两个函数组成了`spawn()`的过程，首先调用第一个获得一个回调，当获得回调之后就会调用第二个函数——`spawn_finish()`，将回调的返回值将会作为`GAsyncResult`的参数。最终的返回值就是`PID`，当然如果有`error`的话就会返回`error
no`。
第三个函数——`spawn_sync()`上面也解释了，是完全同步的，`Frida Python`用的其实就是这个。`Frida
nodejs`用的其实是前两个，因为`nodejs`里的绑定默认就是异步的。当然以后其实应该也考虑将`Frida
Python`的绑定迁移到异步的模式中来，利用`Python 3.5`版本引入的`async/await`机制。
回到上一小节那两个例子，可以发现其实调用的格式跟我们写的`API`并不完全一致，仔细看源码就会发现，像`envp`字符串列表并没有暴露给上层`API`，如果查看`Frida
Python`的绑定过程的话，就可以发现其实后来在绑定里是这样写的：
    envp = g_get_environ ();
    envp_length = g_strv_length (envp);
也就是说最终我们传递给`spawn()`函数的是调用者的`Python`环境，这明显是不对的，`host`的`Python`环境跟`client`的`Python`肯定是不一样的，比如像`client`是`iOS`或`Android`的情况。
当然我们在`frida-server`里做了设定，在`spawn()`安卓或者`iOS`的进程的时候，`envp`会被默认忽略掉，这或多或少减少了问题的产生。
### **问题产生的原因(二)：`spawn()`的历史遗留问题**
还有一个问题就是`spawn()`这个古老的`API`的定义——`string[] envp`，这个定义意味着不能为空（如果写成`string[]?
envp`的话其实就可以为空了），也就是说其实无法从根本上区别“用默认的环境配置”和“不使用任何环境配置”。
###  进程创建机制更新(一)：参数、目录、环境均可设置
既然决定要修这个`API`，那就干脆顺便把跟这个`API`相关的问题都来看下：
  * 如何给命令提供一些额外的环境参数
  * 设置工作目录
  * 自定义标准输入流
  * 传入平台特定的参数
修正完以上`bug`之后，最终代码会变成下面这样：
    namespace Frida {
        …
        public class Device : GLib.Object {
            …
            public async uint spawn (string program,
                Frida.SpawnOptions? options = null)
                throws Frida.Error;
            public uint spawn_sync (string program,
                Frida.SpawnOptions? options = null)
                throws Frida.Error;
        }
        …
        public class SpawnOptions : GLib.Object {
            public string[]? argv { get; set; }
            public string[]? envp { get; set; }
            public string[]? env { get; set; }
            public string? cwd { get; set; }
            public Frida.Stdio stdio { get; set; }
            public GLib.VariantDict aux { get; }
            public SpawnOptions ();
        }
        …
    }
最后，我们回到开头的那段示例代码，本来我们是这么写的：
    device.spawn(["com.apple.mobilesafari"])
现在得这样写了：
    device.spawn("com.apple.mobilesafari")
第一个参数是要被`spawn`的命令，后面可以加上`argv`的字符串列表，`argv`就会被用来设定参数的命令，比如：
    device.spawn("/bin/busybox", argv=["/bin/cat", "/etc/passwd"])
如果想要将默认环境替换成自己的设定的话：
    device.spawn("/bin/ls", envp={ "CLICOLOR": "1" })
只更改环境变量里的一个参数：
    device.spawn("/bin/ls", env={ "CLICOLOR": "1" })
更改命令的工作目录：
    device.spawn("/bin/ls", cwd="/etc")
重定向标准输入流：
    device.spawn("/bin/ls", stdio="pipe")
> `stdin`默认的输入是`inherit`，加上`stdio="pipe"`这个选项之后，就变成管道了。
### 进程创建机制更新(二)：利用`aux`机制实现平台特定功能
到这里我们几乎覆盖了`spawn()`的所有选项，还剩下最后一个选项——`aux`，该选项的本质是平台特定参数的一个字典。可以用`Python`绑定来设置这个参数，任何无法被前面参数捕获的键值对，都会直接放在命令行的最后面。
比如，打开`Safari`并且通知它去打开特定的`URL`：
    device.spawn("com.apple.mobilesafari", url="https://bbs.pediy.com")
再比如以关闭`ASLR`的模式执行一个命令：
    device.spawn("/bin/ls", aslr="disable")
再比如用特定的`Activity`来打开一个安卓的`App`：
    spawn("com.android.settings", activity=".SecuritySettings")
`aux`机制让命令行可以轻松定制，这可比为每个平台单独写代码方便多了。事实上，底层代码一行都没变 ^.<
最后来看下这个`API`修改完成之后的效果，逗号后面的第二个参数就是带属性的对象，后面无法被是别的参数则全部进`aux`字典。
    const pid = await device.spawn('/bin/sh', {
      argv: ['/bin/sh', '-c', 'ls /'],
      env: {
        'BADGER': 'badger-badger-badger',