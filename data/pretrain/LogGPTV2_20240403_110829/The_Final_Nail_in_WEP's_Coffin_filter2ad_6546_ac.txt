2718 2818 2845
Figure 5. Discovering a keystream by causing
the AP to relay broadcasts.
If 64 bytes of data were sent in 4-byte fragments, the AP
will relay a single 68 byte payload (4 bytes for the CRC32).
The attacker can now send 64 bytes in each of 16 fragments,
resulting in a 1028 byte relayed frame. Therefore, by send-
ing a total of 34 fragments, 1500 bytes of keystream are
recovered. Fragmentation therefore enables an attacker to
discover a 1500 byte keystream almost immediately, after
having eavesdropped a single data packet.
To recover other keystreams, the attacker can now send
1500 bytes (without needing fragmentation) and snoop the
relayed version from the AP, which will most likely use a
different IV. By sending ≈ 224 (16M) packets, a complete
IV dictionary may be built. In practice, stations initialize
their IV to zero and increment it by one for each packet
sent. Therefore, if stations remain on a network for a limited
amount of time, possessing a small number of keystreams
may enable decryption of their trafﬁc.
2.4.2. Discovering a Speciﬁc Keystream
When building the IV dictionary via broadcasts, a new
keystream is recovered each time (since the AP chooses its
next IV when relaying). At times, it is necessary to decrypt
a speciﬁc packet. Doing so requires knowledge of a partic-
ular keystream which may not yet have been recovered.
One decryption mechanism is Chop-Chop [22] which
discovers the keystream of a packet back to front. Our ap-
proach is similar but works front to back.3 We ﬁnd it more
useful, especially when seeking for data in the initial por-
tion of the payload.
The technique proceeds as follows. Suppose that an
encrypted payload which uses an unknown keystream has
been eavesdropped and needs to be decrypted. The initial
eight bytes of its keystream may be recovered, since their
plain-text is generally known (as previously described).
Therefore, a broadcast packet with eight bytes of payload
3We discovered this mechanism while implementing the fragmentation
attack. We later found out that it is very similar, if not the same, to the
attack described in [1].
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
01:00:5E:00:00:01
12345678 01
.
.
.
01:00:5E:00:00:FF
12345678 FF
}
01:00:5E:00:00:7F
{
Encrypted payload
80211666 97
AP relays valid
Correct guess:
next keystream byte.
Figure 6. Expanding a speciﬁc keystream in
a linear amount of time.
which uses that keystream may be sent. The AP will relay
it since the packet is valid. One can guess the next byte of
the keystream and send a longer broadcast packet by using
the extended keystream. If the guess is correct, the AP will
relay it. After at most 256 guesses, the AP will relay one
of them. Therefore, one can determine the next keystream
byte and proceed by recovering the byte following that. Af-
ter the whole keystream has been recovered, the plain-text
of the eavesdropped packet may be revealed with a XOR
operation between the cipher-text and the newly discovered
keystream.
Instead of using a timer to determine whether or not the
AP relayed the current guess, one can exploit the fact that
MAC addresses are in the clear in the 802.11 header. All
256 guesses for the next keystream byte may be sent “in
parallel” to 256 different multicast addresses. The AP will
relay only one and the attacker can read off the correct guess
from the multicast MAC address. Therefore, after sending
at most 256× 1488 = 380, 928 packets, an arbitrary packet
may be decrypted.
If the packet to decrypt is short, less
trafﬁc needs to be generated because less keystream needs
to be recovered. Also, if a timer implementation (or hybrid)
is used, half this number of packets will be required on av-
erage. This process is illustrated in Figure 6.
The main use we found for decrypting speciﬁc packets
is for determining a source IP address in the network. ARP
packets are a particularly good candidate. Their header is
shown in Figure 7. The type ﬁeld is either a request or reply.
If the packet is a broadcast, then the type is a request, else
it is a reply. The ﬁrst real unknown value is the source IP
0x00 0x01
0x08 0x00
{Net type
{MAC type
{
{
0x04
0x00 ??
0x06
{Type
MAC
len
Net
len
Figure 7. Format of the ARP header. This
header is followed by the source MAC and IP
addresses.
address, which follows the ARP header. Decrypting the ﬁrst
three bytes of the IP address will yield enough information
for obtaining a source IP address. Therefore, after sending
256×3
2 = 348 packets on average, the network address may
be obtained. In practice, heuristics for common IP address
ranges can further reduce this.
2.4.3. Summary of Keystream Attacks
Fragmentation buys us fast keystream recovery and real-
time Internet-based decryption. With fragmentation, a 1500
byte keystream may be recovered after sending 34 packets.
If fragmentation were disabled, the same length keystream
would be recovered after 256×1488
= 190, 464 packets on
average.
2
To decrypt by re-sending to the Internet, two packets
(new IP header & original payload fragments) must be sent
for each packet to be decrypted. To decrypt without Inter-
net access would require 256l
2 packets on average, where l is
the length of the packet. Thus, decrypting 1500 bytes would
require ≈ 190, 464 packets instead of two (in the case that
the AP is a router). Frequent re-keying might mitigate such
linear decryption attacks, but if fragmentation is used, real-
time decryption is possible. We present a summary of how
one might attack networks without Internet connectivity:
Requirements. Recover eight bytes of keystream. This
may be easily achieved, as discussed, by eavesdrop-
ping a data packet.
Expand Keystream. Send large broadcasts in multiple
smaller 802.11 fragments. Eavesdrop the relayed
broadcast from the AP and XOR the cipher-text with
the clear-text in order to recover a larger keystream.
Repeat the process until a 1500 byte keystream is re-
covered.
Build IV Dictionary. Transmit 1500 byte broadcasts. The
AP will most likely relay the data with a new IV. Re-
cover the keystream for that IV and continue this pro-
cess until all the keystreams have been recovered.
Decrypt. If a packet uses a known IV, lookup its keystream
in the dictionary and XOR it with the cipher-text. Oth-
erwise, XOR the ﬁrst eight bytes of that packet with the
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
known plain-text. Send 256 multicasts of nine bytes
each, using a different guess for the ninth keystream
byte. Use a different multicast address for each guess.
Read the correct guess from the relayed multicast
packet. Continue this process until the keystream for
the whole packet has been recovered. The clear-text is
obtained by a XOR with the keystream recovered.
2.5. IV Dictionary and Weak IV Attacks
The simplest way to enable receipt of arbitrary data
is to build a dictionary of IVs and their corresponding
keystreams by causing packets with known clear-text to be
forwarded by the AP or by other wireless stations. The
weak IV attack can also be performed on the gathered data
to try and recover the key. In fact, recovering the key this
way will usually take much less time than building a com-
plete dictionary, but a small IV dictionary may still be ef-
fective if there are multiple stations on the wireless network
using IVs from the same part of the IV space. Fragmenta-
tion is of no special assistance in performing either attack,
other than quickly providing a means for sending arbitrary
data.
The weak IV attack may only be performed after a large
number (≈500,000–3,000,000) of data packets have been
eavesdropped. A widespread optimization to the weak IV
attack is replaying data in the hope of generating more traf-
ﬁc. We found that the ability to send arbitrary data can
help achieve better results. The standard replay attack has
two main problems. First, not all packets are “replayable”;
many will not generate a response. Second, transmitting
and receiving with the same wireless card is not always re-
liable, hence these attack implementations normally advise
using two cards: one for replaying and the other for eaves-
dropping.
Being able to inject arbitrary data provides better ways
for generating trafﬁc in the network. A simple example is
generating a broadcast ICMP echo request. If the LAN has
many hosts, it is likely that our single request generates mul-
tiple replies.
If the network has Internet connectivity, an attacker
might cause a remote controlled Internet host to ﬂood the
wireless network with UDP packets. This way, the attacker
only needs to passively receive trafﬁc on the wireless net-
work, and can perform the attack with a single card. The
only requirement is that the attacker needs to send an ARP
and UDP packet once in a while to keep the router’s ARP
cache updated and to keep open ﬁrewall holes or the NAT (if
applicable). The fragmentation attack provides the means to
quickly bootstrap such a ﬂood.
Another advantage is that the Internet host can ﬂood us-
ing very small packets. The weak IV attack only uses the
ﬁrst few (1–3) bytes of payload. Sending a high volume
of small packets thus speeds up the data collection process.
Without ﬂooding, it could take weeks before enough data is
gathered—real wireless networks are often rather quiet. By
doing a simple replay attack, it is possible to recover a key
within hours. With our more elaborate ﬂooding techniques,
the attack may be further accelerated signiﬁcantly.
If ﬂooding from the Internet is used to build an IV dictio-
nary, care must be taken with the Time To Live (TTL) ﬁeld
in the incoming packets. Attackers do not normally care too
much about correctly decrypting the TTL value (and the IP
checksum which depends on it) unless they wish to send
packets with these IVs. However, should they care about
this for some reason, they could use the keystream expan-
sion technique for decrypting the TTL. Since the TTL value
for a given route is normally constant (varies upon routing
changes) an attacker needs to decrypt its value only once.
Decrypting the TTL byte will require the transmission of
≈ 128 packets. By knowing the TTL, the attacker may cal-
culate IP checksums and correctly recover the keystreams of
future ﬂooded packets. If the attacker is concerned about the
TTL changing, he may verify it by periodically sending one
packet—a broadcast using a recently discovered keystream.
If the AP relays it, then the TTL did not change.
2.6. Summary of all Attacks
The attacks presented so far allow transmission and de-
cryption of data on a WEP network.
In all cases, after
eavesdropping a single data frame, fragmentation enables
immediate arbitrary data transmission. Furthermore, if the
network has Internet connectivity, thanks to fragmentation
it is possible to decrypt trafﬁc in real-time. This was not
possible with past attacks.
Decryption of frames, without the aid of fragmentation
or an Internet host, may be achieved in linear time (∝ packet
length). Each decrypted byte requires 128 packets to be
sent on average. Putting all these techniques together, an
attacker could attack a network in the following manner:
1. Eavesdrop a data packet.
2. Recover eight bytes of keystream by performing a
XOR operation with the known plain-text. The IP or
ARP variant of the known plain-text may be chosen
based on the length of the eavesdropped packet. At this
point, transmission of arbitrary data (up to 64 bytes) is
possible via 802.11 fragmentation. IP fragmentation
may be used for sending larger IP packets.
3. Recover 1500 bytes of keystream by sending large
broadcasts in smaller fragments (requires the transmis-
sion of 34 packets). At this point, transmission of ar-
bitrary data (of any length) is possible even without
802.11 fragmentation.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
4. If an external communications channel is available, try
to obtain the network’s IP preﬁx and the router’s MAC
address directly. Attempt to re-send an eavesdropped
data packet to a controlled Internet host by using frag-
mentation, a random source IP address, and assuming
the AP is the router. The AP will decrypt the packet
which is then received by the remote host, and returned
to the attacker.
5. Otherwise, obtain the network’s IP preﬁx by decrypt-
ing the IP address in a packet by using the linear
keystream expansion technique. It requires the trans-
mission of ≈ 384 packets if an ARP packet has been
eavesdropped.
It is now possible to communicate with hosts on the
LAN.
6. Obtain the router’s MAC address. This is only neces-
sary if communication with the Internet is required:
routers.
• Try using the AP’s MAC address. Many APs are
• Try the most popular MAC address seen.
• Send an ARP request for the IP address ending
in “.1” (use heuristics). Intercept the ARP reply
(if any) and read the MAC address off the 802.11
header (in clear-text).
• Send a DHCP request and decrypt the response
(if any) by using the linear keystream expansion
technique.
It is now possible to communicate with the Internet.
7. Decrypt “interesting” data.
• If Internet connectivity has been established, re-
send data to the Internet buddy. Data packets may
now be decrypted in real-time, with an overhead
of sending two packets: an 802.11 fragment con-
taining an IP header followed by another frag-
ment with the original encrypted payload.
• If the Internet
is unavailable, use the linear
keystream expansion technique. For each byte to
decrypt, the overhead is sending 128 packets on
average.
8. Generate trafﬁc in the network. For example, instruct
the Internet buddy to ﬂood the wireless network or
send broadcast ICMPs.
• Build an IV dictionary.
• Perform the weak IV attack.
Data which uses an IV present in the dictionary may
be decrypted without additional overhead. The weak
IV attack will eventually reveal the WEP key.
3. Implementation
3.2. Atheros-based cards
Like all other WEP attacks, this particular one seems
great in theory. However, we were keen to see if it worked
in practice. The main hurdle was to determine whether the
hardware available on the market would allow the sending
of raw 802.11 frames. It is well known that many wireless
cards support the commonly called “monitor mode” which
allows the driver to read all raw 802.11 frames. It is less
obvious how to inject data.
3.1. Prism2-based cards
The ﬁrst attempt was made using Intersil Prism2
cards [20]. These have a mode for creating an AP in
software. The kernel is responsible for sending manage-
ment frames and encapsulating data frames—exactly what
is needed for this attack. The airjack [25] driver for
Linux uses this mode to allow a user to inject raw 802.11
frames and receive trafﬁc concurrently. Unfortunately, after
experimentation, it became clear that the Prism2 ﬁrmware
changes some ﬁelds in the 802.11 header before transmis-
sion, including the sequence and fragment number.
There is, however, a work-around for this problem, men-
tioned brieﬂy by Bellardo et al. [4]. Prism2 cards have an
auxiliary (AUX) debug port which provides raw access to
the card’s memory. The basic idea is to queue the packet
in the normal way for transmission and locate its header via
the AUX port. Just after instructing the card to transmit, one
can busy wait reading a header byte (such as the duration)
through the AUX port until it is modiﬁed. At that point, the
ﬁrmware has done its processing and is about to send the
packet off to the radio. Just before it is able to transmit the
packet physically, the modiﬁed packet header bytes can be
re-written via the AUX port. This is a race condition which
is virtually always won in practice.