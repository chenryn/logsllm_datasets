### Improved Text

#### User Authentication and Attack Scenario

The user initiates the login process by selecting HIdP (Step 1 in Figure 3). At this point, an attacker intercepts the request intended for the Relying Party (RP) and modifies the content of the request, replacing HIdP with AIdP. The RP's response, which contains a redirect to AIdP, is then intercepted and modified by the attacker to redirect the user to HIdP. The attacker also replaces the OAuth client ID of the RP at AIdP with the client ID of the RP at HIdP (which is public information).

From this point on, we assume that, in accordance with OAuth security recommendations, the communication between the user’s browser, HIdP, and the RP is encrypted using HTTPS. This encryption prevents the attacker from inspecting or altering the communication. The user then authenticates with HIdP and is redirected back to the RP (Step 8). Due to the modifications made by the attacker in Step 2, the RP believes that the nonce code in the redirect was issued by AIdP rather than HIdP. Consequently, the RP attempts to redeem this nonce for an access token at AIdP (Step 10), rather than HIdP, thereby leaking the code to the attacker.

#### Breaking Authorization

If HIdP has not issued an OAuth client secret to the RP during registration, the attacker can now redeem the code for an access token at HIdP (Steps 11 and 12). This access token allows the attacker to access the user's protected resources at HIdP, thus breaking the authorization property (see Section 5.2). It is important to note that the attacker might even provide false information about the user or her protected resources to the RP by issuing a self-created access token, which the RP would then use to access such information.

#### Breaking Authentication

To break the authentication property (see Section 5.2) and impersonate the honest user, the attacker, after obtaining the code in Step 10, initiates a new login process using his own browser. He selects HIdP as the Identity Provider (IdP) for this login process and receives a redirect to HIdP, which he ignores. This redirect contains a cookie for a new login session and a fresh state parameter. The attacker then sends the code to the RP, imitating a real login using the cookie and fresh state value from the previous response. The RP retrieves an access token at HIdP using the code and uses this access token to fetch the user's ID. Convinced that the attacker owns the honest user's account, the RP issues a session cookie for this account to the attacker. As a result, the attacker is logged in at the RP under the honest user's ID (note that the attacker does not learn an access token in this case).

#### Variant: Web Attacker

There is also a variant of the IdP mix-up attack that requires only a web attacker (who does not intercept and manipulate network messages). In this variant, the user intends to log in with AIdP but is redirected by AIdP to log in at HIdP, a fact that a vigilant user might detect.

In detail, the first four steps in Figure 3 are replaced by the following: 
1. The user starts a new OAuth flow with the RP using AIdP.
2. The user is redirected by the RP to AIdP's authorization endpoint.
3. Instead of prompting the user for her password, AIdP redirects the user to HIdP's authorization endpoint.
4. The attacker uses the state value received from the browser plus the client ID of the RP at HIdP.

From here on, the attack proceeds exactly as in Step 5 in Figure 3.

#### Related Attacks

An attack in the same class, known as cross social-network request forgery, was outlined by Bansal, Bhargavan, Delignat-Lavaud, and Maffeis in [6]. This attack applies to RPs with naïve user intention tracking (rather than explicit user intention tracking assumed in our IdP mix-up attack) in combination with IdPs, such as Facebook, that only loosely check the redirect URI. Our IdP mix-up attack works even if an IdP strictly checks redirect URIs. While the attack in [6] is described in the context of specific social network implementations, our findings show that this class of attacks is not merely an implementation error but a more general problem in the OAuth standard. This was confirmed by the IETF OAuth Working Group, who are in the process of amending the OAuth standard according to our fixes (see Section 3.6).

Another attack with a similar outcome, called the Malicious Endpoints Attack, leveraging the OpenID Connect Discovery mechanism and therefore limited to OpenID Connect, was described in [27]. This attack assumes a CSRF vulnerability on the RP's side.

#### Fix: Reliable Information in Redirects

A fundamental problem in the authorization code and implicit modes of the OAuth standard is the lack of reliable information in the redirect in Steps 6 and 7 in Figure 1 (even if HTTPS is used). The RP does not receive information about where the redirect was initiated (when explicit user intention tracking is used) or receives information that can easily be spoofed (when naïve user intention tracking is used with IdPs such as Facebook). Therefore, the RP cannot verify whether the information in the redirect comes from the IdP indicated in Step 1.

Our fix is to include the identity of the IdP in the redirect URI in a form that cannot be influenced by the attacker, e.g., using a new URI parameter. Each IdP should add such a parameter to the redirect URI. The RP can then check that the parameter contains the identity of the IdP it expects to receive the response from. This fix can be used with either naïve or explicit user intention tracking, but to mitigate the naïve RP session integrity attack, we advise using explicit user intention tracking only (see below).

We show in Section 5 that this fix is sufficient to mitigate the IdP mix-up attack (as well as the attacks pointed out in [6, 27]).

#### State Leak Attack

Using the state leak attack, an attacker can force a browser to log in under the attacker’s name at an RP or force an RP to use a resource of the attacker instead of a resource of the user. This attack breaks the session integrity property (see Section 5.2) and enables what is often called session swapping or login CSRF [7].

**Attack:**
After the user authenticates with the IdP in the authorization code mode, the user is redirected to the RP (Step 7 in Figure 1). This request contains state and code as parameters. The response to this request (Step 14) can be a page containing a link to the attacker’s website or some resource located at the attacker’s website. When the user clicks the link or the resource is loaded, the user’s browser sends a request to the attacker. This request contains a Referer header with the full URI of the page the user was redirected to, which includes state and code.

Since the state value is supposed to protect the browser’s session against CSRF attacks, the attacker can now use the leaked state value to perform a CSRF attack against the victim. For example, the attacker can redirect the victim’s browser to the RP’s redirection endpoint (again) and overwrite the previously performed authorization. The user will then be logged in as the attacker.

Given the history of OAuth, leaks of sensitive data through the Referer header are not surprising. For example, the fact that the authorization code can leak through the Referer header was described as an attack (in a similar setting) in [21]. Since the authorization code is single-use only [20], it might already be redeemed by the time it is received by the attacker. However, state is not limited to single use, making this attack easier to exploit in practice. Stealing the state value through the Referer header to break session integrity has not been reported as an attack before, as confirmed by the IETF OAuth Working Group.

**State Leak at IdPs:**
A variant of this attack exists if the login page at an IdP contains links to external resources. If the user visits this page to authenticate at the IdP and the browser follows links to external resources, the state is transferred in the Referer header. This variant is applicable to the authorization code mode and the implicit mode.

**Fix:**
We suggest limiting state to a single use and using recently introduced referrer policies [13] to avoid leakage of the state (or code) to the attacker. Using referrer policies, a web server can instruct a web browser to (partially or completely) suppress the Referer header when the browser follows links in or loads resources for some web page. The Referer header can be blocked entirely, or it can, for example, be stripped down to the origin of the URI of the web page. Referrer policies are supported by all modern browsers. Our OAuth model includes this fix (such that only the origin is permitted in the Referer header for links on web pages of RPs/IdPs) and our security proof shows its effectiveness (see Section 5). This fix also protects the authorization code from leaking as in the attack described in [21].

#### Naïve RP Session Integrity Attack

This attack again breaks the session integrity property for RPs, assuming an RP that uses naïve user intention tracking. (Note that we may still assume that the OAuth state parameter is used, i.e., the RP is not necessarily stateless.)

**Attack:**
First, an attacker starts a session with HIdP (an honest IdP) to obtain an authorization code or access token for his own account. Next, when a user wants to log in at some RP using AIdP (an IdP controlled by the attacker), AIdP redirects the user back to the redirection URI of HIdP at the RP. AIdP attaches to this redirection URI the state issued by the RP and the code or token obtained from HIdP. Since the RP performs naïve user intention tracking only, the RP believes that the user logged in at HIdP. Hence, the user is logged in at the RP using the attacker’s identity at HIdP, or the RP accesses the attacker’s resources at HIdP, believing that these resources are owned by the user.

**Fix:**
The fix against the IdP mix-up attack (described above) does not work in this case because the RP does not track where the user wanted to log in and must rely on parameters in the redirection URI, which the attacker can easily spoof. Instead, we propose always using explicit user intention tracking.

#### Implications for OpenID Connect

OpenID Connect [31] is a standard for authentication built on top of the OAuth protocol. Among others, OpenID Connect is used by PayPal, Google, and Microsoft. All four attacks can be applied to OpenID Connect as well. We outline OpenID Connect and how the attacks apply to this protocol. A detailed description can be found in [17].

**OpenID Connect:**
OpenID Connect extends OAuth in several ways, e.g., by adding additional security measures. OpenID Connect defines an authorization code mode, an implicit mode, and a hybrid mode. The former two are based on the corresponding OAuth modes, and the latter is a combination of the two modes.

- **Redirect, State Leak, and Naïve RP Session Integrity Attacks:** All three attacks apply to OpenID Connect in exactly the same way as described above. The vulnerable steps are identical.
- **IdP Mix-Up Attack:** In OpenID Connect, the mix-up attack applies to the authorization code mode and the hybrid mode. In the authorization code mode, the attack is very similar to the one on the OAuth authorization code mode. In the hybrid mode, the attack is more complicated as additional security measures have to be circumvented by the attacker. Specifically, it must be ensured that the RP does not detect that the issuer of the id token, a signed cryptographic document used in OpenID Connect, is not the honest IdP. Interestingly, in the hybrid mode, depending on an implementation detail of the RP, either authorization or authentication is broken (or both if no client secret is used).

#### Verification and Disclosure

We verified the IdP mix-up and 307 redirect attacks on the Apache web server module mod_auth_openidc, an implementation of an OpenID Connect (and therefore also OAuth) RP. We also verified the IdP mix-up attack on the Python implementation pyoidc. We verified the state leak attack on the current version of the Facebook PHP SDK and the naïve RP session integrity attack on nytimes.com. We reported all attacks to the OAuth and OpenID Connect working groups, who confirmed the attacks. The OAuth working group invited us to present our findings to them and prepared a draft for an RFC that mitigates the IdP mix-up attack (using the fix described in Section 3.2) [22]. Fixes regarding the other attacks are currently under discussion. We also notified nytimes.com, Facebook, and the developers of mod_auth_openidc and pyoidc.

#### FKS Model

Our formal security analysis of OAuth is based on a slightly extended version (see Section 5.1) of the FKS model, a general Dolev-Yao (DY) style web model proposed by Fett et al. in [14, 16]. This model is designed independently of a specific web application and closely mimics published (de-facto) standards and specifications for the web, such as the HTTP/1.1 and HTML5 standards and associated (proposed) standards. The FKS model defines a general communication model and, based on it, web systems consisting of web browsers, DNS servers, and web servers as well as web and network attackers. Here, we briefly recall the FKS model (see [14, 16] for a full description, comparison with other models, and a discussion of its limitations); see also [17].

**Communication Model:**
The main entities in the model are (atomic) processes, which are used to model browsers, servers, and attackers. Each process listens to one or more (IP) addresses. Processes communicate via events, which consist of a message as well as a receiver and a sender address. In every step of a run, one event is chosen non-deterministically from a "pool" of waiting events and is delivered to one of the processes that listens to the event’s receiver address. The process can then handle the event and output new events, which are added to the pool of events, and so on.

As usual in DY models (see, e.g., [1]), messages are expressed as formal terms over a signature Σ. The signature contains constants (for (IP) addresses, strings, nonces) as well as sequence, projection, and function symbols (e.g., for encryption/decryption and signatures). For example, in the web model, an HTTP request is represented as a term r containing a nonce, an HTTP method, a domain name, a path, URI parameters, headers, and a message body.

For example, a request for the URI `http://example.com/s?p=1` is represented as:
\[ r := \langle \text{HTTPReq}, n_1, \text{GET}, \text{example.com}, /s, \langle \langle p, 1 \rangle \rangle, \langle \rangle, \langle \rangle \rangle \]
where the body and the headers are empty. An HTTPS request for r is of the form:
\[ \text{enca}(\langle r, k' \rangle, \text{pub}(k_{\text{example.com}})) \]
where \( k' \) is a fresh symmetric key (a nonce) generated by the sender of the request (typically a browser); the responder is supposed to use this key to encrypt the response.

The equational theory associated with Σ is defined as usual in DY models. The theory induces a congruence relation ≡ on terms, capturing the meaning of the function symbols in Σ. For instance, the equation in the equational theory which captures asymmetric decryption is:
\[ \text{deca}(\text{enca}(x, \text{pub}(y)), y) = x \]
With this, we have that, for example:
\[ \text{deca}(\text{enca}(\langle r, k' \rangle, \text{pub}(k_{\text{example.com}})), k_{\text{example.com}}) \equiv \langle r, k' \rangle \]
i.e., these two terms are equivalent w.r.t. the equational theory.

A (DY) process consists of a set of addresses the process listens to, a set of states (terms), an initial state, and a relation that takes an event and a state and produces a new state and a set of events.

A script models JavaScript running in a browser. Scripts are defined similarly to DY processes. When triggered by a browser, a script is provided with state information. The script then outputs a term representing a new internal state and a command to be interpreted by the browser (see also the specification of browsers below). Similarly to an attacker process, the so-called attacker script may output everything that is derivable from the input.

A system is a set of processes. A configuration of this system consists of the states of all processes in the system, the pool of waiting events, and a sequence of unused nonces. Systems induce runs, i.e., sequences of configurations, where each configuration is obtained by delivering one of the waiting events of the preceding configuration to a process, which then performs a computation step.

A web system formalizes the web infrastructure and web applications. It contains a system consisting of honest and attacker processes. Honest processes can be web browsers, web servers, or DNS servers. Attackers can be either web attackers (who can listen to and send messages from their own addresses only) or network attackers (who may listen to and spoof all addresses and therefore are the most powerful attackers). A web system further contains a set of scripts (comprising honest scripts and the attacker script).

In our analysis of OAuth, we consider either one network attacker or a set of web attackers (see Section 5). In our OAuth model, we need to specify only the behavior of servers and scripts. These are not defined by the FKS model since they depend on the specific application.