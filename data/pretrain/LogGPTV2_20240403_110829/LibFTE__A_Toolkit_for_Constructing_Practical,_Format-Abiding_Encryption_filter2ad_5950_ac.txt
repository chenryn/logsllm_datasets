⌧ precedes ⌧0 according to this order. The ordering
on transitions induces a lexicographical ordering ’≺’ on
paths (which are sequences of transitions). Formally, if
⇡1 = ⌧1⇡1
⇡1 ≺ ⇡2 () ⌧1 l ⌧2 _⌧1 = ⌧2 ^ ⇡1
Let rank(⇡) be the number of accepting paths ⇡0 ≺ ⇡
that precede ⇡ in the lexicographical order on paths. It
follows that, rank(✏) = 0 (the rank of the empty string
is 0), and for any ⇡ = ⌧ ⇡1 2 AccM(q), we have:
rank(⇡) = rank(⇡1) + X(q,c0,q0)l⌧
T (q0, n − 1)
Note that the sum is over transitions ⌧0 = (q, c0, q0) 2 δ
that precede ⌧ in transition order, ⌧0 l ⌧. In words, we
are summing over all outgoing edges from q that lead
to paths that are lexicographically smaller than the paths
that follow the transition ⌧. Unrolling the recursion gives
us an iterative procedure for ranking accepting paths of
length n that can be efﬁciently implemented via dynamic
programming.
(2)
To conclude, the relaxed ranking for a string w ac-
cepted by an NFA is Rank(w) = rank(map(w)), and the
reverse is Unrank(r) = unmap(unrank(r)).
4.2 Large Integer DFA/NFA Optimization
We present a simple but effective optimization that
speeds up both NFA and DFA-based ranking. In prac-
tice, ranking efﬁciency depends on how fast we evaluate
the sum in equation (2), and this depends on the precise
deﬁnition of the transition order. We deﬁne this order so
that we can replace multiple large-integer additions with
a single multiplication. Our experiments conﬁrmed that
this replacement indeed resulted in faster code.
Observe that equations (1) and (2) used for path rank-
ing depend only on transition (edge) order and structure
of the automaton. This observation is valid for both NFA
and DFA. Previous, traditional, DFA ranking is given by
these equations and standard lexicographical ordering,
using character order: (q, c0, q0) l (q, c00, q00) () (c0  imax then Ret ?
i   i + 1
ci   ET
K (ci−1)
v   s2n(r, ci)
Until v 2 Img(X)[ Img(Y )
If v 2 Img(Y ) then
Ret UnrankY (v)
Ret ?
K (C) :
DecT
p0   n2s(r, RankY (C))
i   0
Do
i   i + 1
pi   DT
K (pi−1)
u   s2n(r, pi)
Until u 2 Img(X)
Ret UnrankX (u)
K (M ) :
EncT
a   RankX (M )
M0   n2s(t − ⌧, a)
i   0
Do
if i > imax then Ret ?
i   i + 1
K (M0)
C0  $ E T
b   s2n(t, C0)
Until b 2 Img(Y )
Ret UnrankY (b)
K (C) :
DecT
b   RankY (C)
C0   n2s(t, b)
If C0 = ? Ret ?
M0  $ DT
K (C0)
If M0 = ? Ret ?
a   s2n(t − ⌧, M0)
Ret UnrankX (a)
Figure 4: Left: Cycle-walking deterministic FTE. n2s(r, a) returns the string representing number a in radix r, and
s2n(r, b) returns the number whose radix r representation is b. The parameter imax determines the maximum number
of iterations. Right: Rejection-sampling randomized FTE.
Now, ﬁx integers
If RankX and
ate sets I(X) for X and I(Y ) for Y .
RankY are the corresponding relaxed-ranking functions,
let Img(X) be the image of X under RankX, and like-
wise Img(Y ) be the image of Y under RankY . Deﬁne
(Recall that if we
NX = |I(X)| and NY = |I(Y )|.
are using NFA-based ranking over either X or Y , these
values can be signiﬁcantly larger than |X| or |Y |.) We
assume that both NX , NY are ﬁnite.
Say one has a tweakable cipher3 E that natively
supports strings over a variety of radices, e.g. FFX.
(At a minimum, there are many constructions of se-
cure tweakable ciphers that support radix 2, e.g. [9,
14, 15].)
r ≥ 2 and t ≥
dmax{logr(NX ), logr(NY )}e, so that a string of t sym-
bols from {0, 1, . . . , r − 1} sufﬁces to represent the
relaxed-rankings of X and Y . Then if E can encipher
the set of strings {0, 1, . . . , r − 1}t, we can encrypt a
plaintext M 2 X as shown on the left side of Figure 4.
Cycle walking. A well-known fact about permutations
is that they can be decomposed into a collection of dis-
joint cycles: starting from any element a in the domain of
the permutation ⇡, repeated application of ⇡ will result in
a sequence of distinct values that eventually ends with a.
Black and Rogaway [8] were the ﬁrst to exploit this fact
to build ciphers with non-standard domains, and we use
it, too. For any ﬁxed K and T , the mapping induced by
K is a permutation. Thus, inside the Do-loop, the dis-
ET
K(c0)), and
tinct strings c0, c1   ET
so on form a sequence that eventually must return to c0.
Intuitively, if we want a ciphertext that belongs to a par-
ticular subset S ✓ {0, 1, . . . , r − 1}t, we can walk the
cycle until we hit a string ci 2 S.
There are, however, two important details to consider.
The ﬁrst is that encryption is not guaranteed to hit any
K(c0), c2   ET
K(ET
ciﬁc failure criteria, which will become clear when we
describe our schemes. We write EncT,P
K (M ) for FTE
encryption of message M, under key K, using associ-
ated data T and parameters P . To ease the burden of
notation (slightly), we typically do not explicitly list the
parameters as inputs. The encryption algorithm may be
randomized, meaning that fresh randomness is used for
each encryption.
The FTE decryption algorithm Dec takes as input
(FP ,FC), K, a ciphertext C, and the associated data T
(if any), and returns a plaintext M or ?. The decryption
algorithm is always deterministic.
Unlike conventional encryption schemes, we do not
demand that EncT,P
K (M ) always yield a valid ciphertext,
or always yield ?, when T, P and K are ﬁxed. Instead,
we allow encryption to “fail”, with some small probabil-
ity, to produce a ciphertext for a any given plaintext in
its domain. Doing so will permit us to give simple and
natural FTE schemes that would be ruled out otherwise.
In general, the formats can change during the lifetime
of the key, even on a per-plaintext basis.
(Of course,
changes must be synchronized between parties.) When
we talk about an FTE scheme being over some given
formats, or their languages, we implicitly have in mind
some notion of a format-session, during which the for-
mats do not change.
5.1 Cycle-walking (deterministic) FTE
To build deterministic FTE schemes we take inspira-
tion from BRRS rank-encrypt-unrank. However, accom-
modating format transformations and, especially, NFA-
based language representations introduces new chal-
lenges.
To begin, let X = L(FP ) and Y = L(FC). As-
sume that we perform relaxed ranking using the two-
stage framework in Section 4.1.1, with the intermedi-
3If the FTE scheme does not need to support associated data, then
the underlying cipher need not be tweakable, and references to T in the
pseudocode can be dropped.
8
884  23rd USENIX Security Symposium 
USENIX Association
string ci 2 S. For example, if the subset is small, or the
cycle is very short. So encryption must be equipped with
test that tells it when this has happened, and ? should
be returned. The second is that there must be a test that
uniquely identiﬁes the starting string c0. This is because
decryption should work by waking the cycle in reverse.
Absent a test that uniquely identiﬁes c0, it may not be
clear when the reverse cycle-walk should stop.
Our implementation deals with both of these issues.
In particular, c0 is the t-symbol string that results from
relaxed-ranking our FTE plaintext input M. By deﬁni-
tion, c0 is a string that, when viewed as a radix-r integer,
is in Img(X). We desire to ﬁnd a ci that, when viewed
as an integer, is in Img(Y ), since this is the set of in-
tegers that yield ciphertexts in Y that will be properly
decrypted. Intuitively, the walk should halt on the ﬁrst i
for which this is true. But then, if any of c1, . . . , ci−1
represent integers that are in Img(X), proper decryption
is not possible (because we do not know how many steps
to go from ci back to c0). Thus our cycle-walking en-
cryption checks, at each step, to see if the current walk
should be terminated because decryption will not be pos-
sible, or because we have found a ci that will yield a
ciphertext Y that will decrypt properly. We also allow
cycle-walking FTE to take a maximum-number-of-steps
parameter imax, and encryption fails if that number of
steps is exceeded.
Efﬁciency.
The standard security assumption for a
tweakable cipher is that, for any secret key K, and any
K is indis-
associated data T , the mapping induced by ET
tinguishable from that of a random permutation. Mod-
K as such, the expected number of steps be-
eling ET
fore the cycle-walk terminates is at most rt/|Img(X) [
Img(Y )| (a conservative bound) and never more than
imax. Assuming the walk terminates before imax steps,
then the probability that the encryption succeeds is ps =
|Img(Y )|/|Img(X) [ Img(Y )|. Since relaxed ranking
is injective, |Img(X)| = |X| and |Img(Y )| = |Y |, so
ps ≥ 1/(1 + |X|/|Y |). Thus we expect that ps is quite
close to 1 if |Y |  |X|.
Each step of the cycle-walk requires checking v 2
Img(X) [ Img(Y ), which can be done by checking v 2
Img(X) ﬁrst (signaling termination of the walk), and
then v 2 Img(Y ) (signaling successful termination). A
straightforward way to implement the last is to test if v =
RankY (UnrankY (v)) or, using our two-stage viewpoint
on relaxed ranking, map(Unrank(v)) = unrankI(v),
which may be faster. Checking v 2 Img(X) can be done
likewise.
Recall that the NFA representation of a regex, un-
like a DFA representation, may have many accepting
paths for a given string in its language. This can lead
to NX  |X| = Img(X) or NY  |Y | = Img(Y ),
hence, potentially, rt  |Img(X) [ Img(Y )|. When
this happens, the resulting in cycle-walking scheme may
be prohibitively inefﬁcient in some applications.
Simpliﬁcations. We note that the cycle-walking tech-
nique is used in [5], as well, but they restrict to the much
simpler case that X = Y . More generally when we
know that Img(X) ✓ Img(Y ), we can simplify our
construction. One may still need to cycle-walk in this
case if rt > |Y |. For example, say one desires to use
r = 2 (binary strings) but the larger of |X|,|Y | is not
a power of two. But when Img(X) ✓ Img(Y ) we
know that, if the encryption cycle-walk terminates be-
fore imax steps, then it always ﬁnds a point in Img(Y ),
i.e. ps = 1. Also, the expected number of steps is at most
rt/|Img(Y )| = rt/|Y |, again modeling ET
K as a random
permutation. Finally, we note that the walk termination
test can be simpliﬁed to v 2 Img(Y ), and encryption can
thereafter immediately return UnrankY (v).
Security. We mentioned, above, that the standard secu-
rity assumption for a tweakable cipher is that, when the
key K is secret, every associated data string T results in
K(·) being indistinguishable from a random permuta-
ET
tion. Under this assumption, it is not hard to see that the
cycle-walking construction outputs (essentially) random
elements of the set Y = L(Fc), when it does not output
K(ci−1) in the cycle-walk is a ran-
?. Intuitively, each ET
dom string (subject to permutivity), so the corresponding
number v represented by the string is random, too. Thus,
if v 2 Img(Y ), it is a random element of this set, result-
ing in a random element of Y being chosen when v is
unranked.
In the full version we formally deﬁne a security no-
tion for deterministic FTE schemes, and give a theorem
stating the security of our construction relative to this se-
curity notion.
5.2 Rejection-Sampling (randomized) FTE
We now turn our attention to building randomized FTE
schemes. Let ⇧ = (K,E,D) be a conventional, ran-
domized, authenticated-encryption scheme with support
for associated data (AEAD). We assume that this scheme
has a ﬁxed ciphertext stretch ⌧; this is typical of in-use
AEAD schemes. To build a randomized FTE scheme us-
ing a generalized ranking scheme, we use a rejection-
sampling approach. Let t be the least integer such that
both of the following are true: (1) |I(X)|  2t−⌧ , and
(2) |I(Y )|  2t. Then to encrypt M 2 X, or de-
crypt C 2 Y , under key K and associated data T , we
do as shown on the right side of Figure 4.
A standard security assumption for AEAD schemes is
that its ciphertexts are indistinguishable from strings (of
the same length) that are uniformly random. Under this
assumption, treating each C0 as a random t-bit string, the
USENIX Association  
23rd USENIX Security Symposium  885
9
Sub-Component
Regular Expression Parser
DFA Minimizer
NFA/DFA Ranking
FFX
FPE/FTE
Conﬁguration Assistant
Written in...
C/C++/Flex/Bison
C/C++
C/C++
C++