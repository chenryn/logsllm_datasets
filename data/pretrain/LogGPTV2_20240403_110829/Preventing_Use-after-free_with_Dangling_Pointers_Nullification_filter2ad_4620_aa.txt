title:Preventing Use-after-free with Dangling Pointers Nullification
author:Byoungyoung Lee and
Chengyu Song and
Yeongjin Jang and
Tielei Wang and
Taesoo Kim and
Long Lu and
Wenke Lee
Preventing Use-after-free with
Dangling Pointers Nullification
Byoungyoung Lee† Chengyu Song† Yeongjin Jang† Tielei Wang†
Taesoo Kim† Long Lu∗ Wenke Lee†
†{blee, csong84, yeongjin.jang, tielei,
taesoo}@gatech.edu, PI:EMAIL
School of Computer Science,
Georgia Institute of Technology
Abstract—Many system components and network applications
are written in languages that are prone to memory corruption
vulnerabilities. There have been countless cases where simple
mistakes by developers resulted in memory corruption vulnera-
bilities and consequently security exploits. While there have been
tremendous research efforts to mitigate these vulnerabilities, use-
after-free still remains one of the most critical and popular attack
vectors because existing proposals have not adequately addressed
the challenging program analysis and runtime performance
issues.
In this paper we present DANGNULL, a system that detects
temporal memory safety violations—in particular, use-after-free
and double-free—during runtime. DANGNULL relies on the key
observation that the root cause of these violations is that pointers
are not nullified after the target object is freed. Based on this
observation, DANGNULL automatically traces the object’s rela-
tionships via pointers and automatically nullifies all pointers when
the target object is freed. DANGNULL offers several benefits. First,
DANGNULL addresses the root cause of temporal memory safety
violations. It does not rely on the side effects of violations, which
can vary and may be masked by attacks. Thus, DANGNULL is ef-
fective against even the most sophisticated exploitation techniques.
Second, DANGNULL checks object relationship information using
runtime object range analysis on pointers, and thus is able to
keep track of pointer semantics more robustly even in complex
and large scale software. Lastly, DANGNULL does not require
numerous explicit sanity checks on memory accesses because
it can detect a violation with implicit exception handling, and
thus its detection capabilities only incur moderate performance
overhead.
I.
INTRODUCTION
Many system components and network applications are
written in the unsafe C/C++ languages that are prone to
memory corruption vulnerabilities. To address this problem, a
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the first page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the first-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23238
∗PI:EMAIL
Department of Computer Science,
Stony Brook University
Severity Use-after-free
Critical
High
Medium
Low
Total
13
582
80
5
680
Heap
Stack
overflow overflow
0
107
98
3
208
0
12
5
0
17
Others
0
11
12
1
24
Table I: The number of security vulnerabilities in the
Chromium browser for two years (2011–2013), classified by
types of vulnerabilities and their severity.
large number of techniques have been developed to improve
memory safety and prevent memory corruption bugs from being
exploited [2, 4, 12, 19, 30–33, 38, 48]. However, the problem of
detecting and preventing use-after-free bugs remains unsolved.
Among the CVE identifiers of the Chromium browser that we
collected from Oct. 2011 to Oct. 2013 in Table I, use-after-
free vulnerabilities are not only 40x/3x more than stack and
heap overflows in quantity, but also have more severe security
impacts than traditional vulnerabilities: 88% of use-after-free
bugs are rated critical or high in severity, while only 51%
of heap overflows are considered as high severity. Not only
are there many use-after-free vulnerabilities, they have also
become a significant attack vector. In Pwn2Own 2014 [21], an
annual contest among hackers and security research groups,
the VUPEN team was awarded with the largest cash amount,
$100,000, for a single use-after-free exploit that affects all
major WebKit-based browsers.
Compared with many other vulnerability types, including
stack buffer overflows or heap buffer overflows, use-after-free is
generally known as one of the most difficult vulnerability type
to identify using static analysis. In modern C/C++ applications
(especially under object-oriented or event-driven designs), the
resource free (i.e., memory deallocation) and use (i.e., memory
dereference) are well separated and heavily complicated.
Statically identifying use-after-free vulnerabilities under this
difficult conditions involves solving challenging static analysis
problems (e.g., inter-procedural and point-to analysis while also
considering multi-threading effects), and is therefore feasible
only for small size programs [13, 34].
Category
Use-after-free detectors
Protection
Technique
DANGNULL
CETS [30]
Undangle [6]
Xu et al. [48]
Memory error detectors AddressSanitizer [38]
Memcheck [32]
Purify [19]
CCFIR [50]
bin-CFI [51]
SafeDispatch [22]
Control Flow Integrity
Safe memory allocators Cling [2]
DieHarder [33]
Explicit Liveness
Checks
Support
False positive Bypassable
Rates
Bypassing Exploit Technique
No
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
No
No
Yes
No
No
No
No
No
No
No
No
No
No
No
Low
High
Low
Low
Low
High
High
Low
Low
Low
Low
Low
No
No
No
No
Yes
No
No
Yes
Yes
Yes
Yes
Yes
N/A
N/A
N/A
N/A
Heap manipulation
N/A
N/A
Abusing coarse grained CFI
or
corrupting non-function pointers
Heap manipulation
Heap manipulation
Table II: Comparing the proposed system DANGNULL with other protection techniques detecting use-after-free. The
Explicit checks column represents whether the technique explicitly instruments checks to detect use-after-free except via pointer
propagation. The Liveness support column represents whether the technique may continuously run an instrumented application as
if use-after-free vulnerabilities are patched. The False positive rates column represents whether the technique would generate
the high/low number of false alarms on benign inputs, and high false positive rates imply that it would be difficult to be deployed
for large scale software. The Bypassable column shows whether the protection technique can be bypassable with the following
column’s exploitation technique. Overall, while all other protection techniques show either high false positive rates or being
bypassable, DANGNULL achieves both low false positive rates and being non-bypassable against sophisticated exploitation
techniques. §VII describes more details on each protection technique.
Most research efforts to detect use-after-free vulnerabilities
are relying on either additional runtime checks or dynamic
analysis (listed in Table II). For instance, use-after-free detectors
including [30, 48] have been proposed to address dangling
pointer issues. By maintaining metadata for each pointer and
tracking precise pointer semantics (i.e., which pointer points
to which memory region), these tools can identify dangling
pointers or prevent memory accesses through dangling pointers.
However, precisely tracking runtime semantics on a per-pointer
bases is non-trivial as there would be a huge number of pointers
and their metadata in runtime, which may result in high false
positive rates (i.e., identifying benign program behavior as
use-after-free) or significant performance degradation. Such
shortcomings would limit the potential for these techniques to
be deployed for large scale software.
Memory error detectors [19, 32, 38] are also able to
capture use-after-free bugs during the software testing phase.
By maintaining the allocated/freed status of memory, these
tools can prevent accesses to freed memory. However, these
tools are not suitable for detecting real-world exploits against
use-after-free vulnerabilities if attackers can partially control the
heap memory allocation process, especially for web browsers.
For example, by using Heap Spraying [10, 36] or Heap
Fengshui [39] like techniques, attackers can force the target
program to reuse certain freed memory.
In addition, Control Flow Integrity (CFI) tools can be used
to prevent use-after-free vulnerabilities from being exploited
to hijack the control-flow because the majority of vulnerability
exploitations hijack the control flow to execute malicious code
with Return-Oriented Programming (ROP) [35]. However, due
to the inherent limitations of these tools, most of them only
enforce coarse-grained CFI, which leaves some control-flows
exploitable [7, 11, 15, 16]. Moreover, since control-flow hijacks
are not the only method to compromise a program, it is still
possible to bypass these techniques even if they can enforce
perfect CFI, e.g., via non-control data attacks [8, 27].
Overall, all of the previous protection techniques show
either high false positive rates or are bypassable using certain
exploitation techniques. In other words, there is currently no
use-after-free mitigation solution that works well for large scale
software and can also stop all known forms of use-after-free
exploitation techniques.
In this paper, we present DANGNULL, a system that
prevents temporal memory safety violations (i.e., use-after-
free and double-free) at runtime. As suggested by many secure
programming books [37], a pointer should be set to NULL after
the target object is freed. Motivated by the fact that dangling
pointers obviously violate this rule, DANGNULL automatically
traces the object relationships and nullifies their pointers when
the object they pointed to is freed. In particular, rather than rely-
ing on a heavy dynamic taint analysis, DANGNULL incorporates
a runtime object range analysis on pointers to efficiently keep
track of both pointer semantics and object relationships. Based
on the collected object relationship information, DANGNULL
nullifies dangling pointers when the target memory is freed.
After this nullification, any temporal memory safety violation
(i.e., dereferencing the dangling pointers) turns into a null-
dereference that can be safely contained.
This unique design choice of DANGNULL offers several
benefits. First, since nullification immediately eliminates any
possible negative security impacts at the moment dangling
pointers are created, DANGNULL does not rely on the side
effects from use-after-free or double-free, and thus cannot
be bypassed by sophisticated exploit techniques. Second, a
runtime object range analysis on pointers allows DANGNULL
to efficiently keep track of pointer semantics. Instead of tracing
complicated full pointer semantics, DANGNULL only tracks
2
# All store instructions are
# in the LLVM IR form of ’lhs := rhs’.
for storeInstr in function.allStoreInstructions:
# Only insterested in a pointer on the heap.
if mustStackVar(lhs):
if not isPointerType(rhs):
lhs = storeInstr.lhs
rhs = storeInstr.rhs
1 for function in Program:
2
3
4
5
6
7
8
9
10
11
12
13
14
15
continue
continue
new = createCallInstr(trace, lhs, rhs)
storeInstr.appendInstr(new)
Algorithm 1: The algorithm for static instrumentation. For
every store instruction where the destination may stay on the
heap, DANGNULL inserts trace() to keep track of the relation
between the pointer and the object it points to.
On every memory allocation, DANGNULL initializes a
shadow object for the target object being created. Upon freeing
an object, DANGNULL retrieves all pointers that point to this
object (from shadowObjTree) and nullifies those pointers, to
prevent potential use-after-free or double-free.
Later in this section, we describe each component of
DANGNULL (the static instrumentation and the runtime library),
and explain how we maintain shadowObjTree with a concrete
running example (Example 1).
B. Static Instrumentation
The static instrumentation of DANGNULL is done at the
LLVM IR [24] level and is designed to achieve one primary
goal: to monitor pointer assignments to maintain the point-to
relations. To balance security, performance, and engineering
efforts, only appropriate pointers are instrumented. More
specifically, DANGNULL only tracks pointers located on the
heap (e.g., doc→child in Example 1) but not on the stack
(e.g., doc in Example 1). From our preliminary experiment on
the Chromium browser, we found that stack-located pointers
are unlikely to be exploitable, even though are many dangling
pointers. This is because stack-located pointers tend to have
a very short lifetime since the scope of stack variables are
bounded by the scope of a function and accesses to those
variables are limited in the programming language. Heap-
located pointers generally have much a longer lifetime (i.e.,
the number of instructions between free and use is larger). In
other words, unsafe dangling pointers located in the heap offer
better controls between the free and dereference operations,
and are thus are more likely to be exploited (§II). Therefore, to
reduce performance overhead and keep our engineering efforts
effective and moderate, we focus on heap-located pointers. Note
that the nullification idea of DANGNULL has no dependencies
on the pointer locations, and is generally applicable to both
heap- and stack-located pointers.
The algorithm for the static instrumentation is described
in Algorithm 1. At lines 1-4, all store instructions 1 in each
function are iterated. With the pointer information obtained at
lines 5-6, DANGNULL first opts out if lhs is a stack variable,
using a intra-procedure backward data-flow analysis (line 9-
10). Specifically, given a lhs variable, we leveraged a def-use
1In the LLVM IR, store instructions are always in the form of lhs := rhs.
5
chain provided by LLVM to see if this variable is allocated
on the stack via the allocation statement. Since this analysis is
conservative, it is possible that DANGNULL still instruments
some pointer assignments in the stack. However, as DANGNULL
does not instrument allocations and deallocations of stack
variables, such assignments will be ignored by the runtime
library. Next, DANGNULL performs a simple type signature
check to see if rhs is not of a pointer type (line 11-12) 2. With
these two opt-out checks, DANGNULL ignores all uninteresting
cases as the current version of DANGNULL only targets the
heap located pointers. Because the location of a heap pointer
cannot always be statically known due to pointer aliasing issues,
store instructions are conservatively instrumented unless it is
soundly determined to be a stack-located pointer. Any possible
over-instrumentation due to this conservative choice will be
handled using the runtime object range analysis, which we will
describe in the next subsection (§III-C).
Once all these sanity checks are passed, a trace() function
call is inserted after the store instruction. For example, to in-
strument doc->child = body in Example 1, DANGNULL inserts
trace(&doc->child, body) after its assignment instruction. In
this way, the DANGNULL’s runtime library can later correctly
trace the pointer references originating from doc->child.
Note that DANGNULL relies on the type signature of
C/C++. Coercing type signatures in the code might cause some
false negatives, meaning that DANGNULL can miss some
propagation of pointers at runtime. In particular, if developers
convert types of pointer objects (by casting) into a value of non-
pointer types, then DANGNULL will not be able to trace the
pointer propagation via that value. Moreover, if some libraries
are not built using DANGNULL (e.g., proprietary libraries),
DANGNULL would still be able to run them together, but the
protection domain will be limited only to the instrumented
code or modules.
C. Runtime Library
The runtime library of DANGNULL maintains all the object
relationship information with an efficient variant of a red-
black tree, called shadowObjTree. Object layout information (i.e.,
address ranges of an object) is populated by interposing all
memory allocation and deallocation functions (e.g., malloc
and free, new and delete, etc). Object relationships (i.e., an
object refers to another object) are captured with the help of
trace() added during the static instrumentation. Based on the
collected object relationship information, the runtime library
automatically nullifies all dangling pointers when the target
memory is freed.
In this subsection, we first describe shadowObjTree, a data
structure designed for maintaining the complex object re-
lationships (§III-C1). We then further describe how these
data structures are populated and how dangling pointers are
immediately nullified during runtime (§III-C2).
1) Shadow Object Tree: DANGNULL records and maintains
the relationships between objects3 in shadowObjTree. It has a
hierarchical structure because the object relationship itself
2In the LLVM IR, the type of lhs of a store instruction is always the pointer
of the rhs’s type.
3Since DANGNULL only tracks pointers stored on heap,
the point-to
relationship effectively becomes a relationship between heap objects.
and div as an out-bound sub-tree.
2) Runtime Operations and Nullification: Upon running
the instrumented binary, the runtime library of DANGNULL
interposes all memory allocations and deallocations, and
redirects their invocations to allocObj() and freeObj(). In addi-
tion, trace() instructions were inserted at pointer propagation
instructions from the static instrumentation. As a running
example, Example 2 illustrates how DANGNULL interposes and
instruments the example code in Example 1 where + marked
lines show the interposed or instrumented code.
The algorithm for the runtime library, which populates
shadowObjTree, is described in Algorithm 2. Upon the memory
allocation invocation, allocObj() first invokes corresponding
real allocation functions (line 2). With the base pointer address
from the real allocation, a shadow object is created and inserted
to shadowObjTree as a node (lines 3-4). When trace() is invoked,
the object relationship is added to the shadow objects. It first
fetches two shadow objects representing lhs and rhs pointers,
respectively (line 9-10). Next, with the concrete runtime values
on pointers, DANGNULL uses the object range analysis to
check whether lhs and rhs truly point to live heap objects (line
13). It is worth noting that this object range analysis not only
helps DANGNULL avoid tracing any incorrect or unnecessary
pointer semantics that are not related to dangling pointer issues,