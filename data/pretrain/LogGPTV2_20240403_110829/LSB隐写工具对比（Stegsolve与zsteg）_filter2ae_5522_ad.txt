通过代码可以知道，在扫描一个字节的时候，zsteg是固定的从高位扫描至低位的
     def bit_indexes bits
       if (1..8).include?(bits)
         # number of bits
         # 1 => [0]
         # ...
         # 8 => [7,6,5,4,3,2,1,0]
         bits.times.to_a.reverse
       else
         # mask
         mask = bits & 0xff
         r = []
         8.times do |i|
           r  [@image](https://github.com/image "@image").scanlines[0].size * [@image](https://github.com/image "@image").height,
             :count => ([@limit](https://github.com/limit "@limit")*8.0/bidxs.size).ceil
           )
         end
         data = ''.force_encoding('binary')
         a = [0]*params[:shift].to_i        # prepend :shift zero bits
         byte_iterator(params) do |x,y|
           sl = [@image](https://github.com/image "@image").scanlines[y]
           value = sl.decoded_bytes.getbyte(x)
           bidxs.each do |bidx|
             a = 8
             byte = 0
             if params[:bit_order] == :msb
               8.times{ |i| byte |= (a.shift= [@limit](https://github.com/limit "@limit")
               print "[limit #[@limit](https://github.com/limit "@limit")]".gray if [@verbose](https://github.com/verbose "@verbose") > 1
               break
             end
           end
         end
         if params[:strip_tail_zeroes] != false && data[-1,1] == "x00"
           oldsz = data.size
           data.sub!(/x00+Z/,'')
           print "[zerotail #{oldsz-data.size}]".gray if [@verbose](https://github.com/verbose "@verbose") > 1
         end
         data
       end
       # 'xy': b=0,y=0; b=1,y=0; b=2,y=0; ...
       # 'yx': b=0,y=0; b=0,y=1; b=0,y=2; ...
       # ...
       # 'xY': b=0,  y=MAX; b=1,    y=MAX; b=2,    y=MAX; ...
       # 'XY': b=MAX,y=MAX; b=MAX-1,y=MAX; b=MAX-2,y=MAX; ...
       def byte_iterator params
         type = params[:order]
         if type.nil? || type == 'auto'
           type = [@image](https://github.com/image "@image").format == :bmp ? 'bY' : 'by'
         end
         raise "invalid iterator type #{type}" unless type =~ /A(by|yb)Z/i
         sl0 = [@image](https://github.com/image "@image").scanlines.first
         # XXX don't try to run it on interlaced PNGs!
         x0,x1,xstep =
           if type.index('b')
             [0, sl0.decoded_bytes.size-1, 1]
           else
             [sl0.decoded_bytes.size-1, 0, -1]
           end
         y0,y1,ystep =
           if type.index('y')
             [0, [@image](https://github.com/image "@image").height-1, 1]
           else
             [[@image](https://github.com/image "@image").height-1, 0, -1]
           end
         # cannot join these lines from ByteExtractor and ColorExtractor into
         # one method for performance reason:
         #   it will require additional yield() for EACH BYTE iterated
         if type[0,1].downcase == 'b'
           # ROW iterator
           if params[:prime]
             idx = 0
             y0.step(y1,ystep){ |y| x0.step(x1,xstep){ |x|
               yield(x,y) if [@primes](https://github.com/primes "@primes").include?(idx)
               idx += 1
             }}
           else
             y0.step(y1,ystep){ |y| x0.step(x1,xstep){ |x| yield(x,y) }}
           end
         else
           # COLUMN iterator
           if params[:prime]
             idx = 0
             x0.step(x1,xstep){ |x| y0.step(y1,ystep){ |y|
               yield(x,y) if [@primes](https://github.com/primes "@primes").include?(idx)
               idx += 1
             }}
           else
             x0.step(x1,xstep){ |x| y0.step(y1,ystep){ |y| yield(x,y) }}
           end
         end
       end
     end
    end
    end
###  color_extractor
/lib/zsteg/extractor/color_extractor.rb data列表是用于存储字节数据，a是用于存储bit数据。
通过`coord_iterator`方法遍历每个字节，会根据order参数是否有小写x，决定x方向的正序还是倒序，是否有小写y决定y方向的正序还是倒序。
根据x,y的值读取到对应字节，然后根据`bit_indexes`获取的ch_masks（注定只能高位至低位）去读取对应Bit值，只是还要根据channel的值，如果是单个字符，表示读取的bit数是通过-b设置的，因此传入`params[:bits]`，否则就是2个字符，读取第2个字符表示读取的bit数。
当a.size为8时，就会组成一个字节，根据`bit_order`的值决定a中的8bit数据是大端还是小端 msb是小端，lsb是大端。
    module ZSteg
      class Extractor
        # ColorExtractor extracts bits from each pixel's color
        module ColorExtractor
          def color_extract params = {}
            channels = Array(params[:channels])
            #pixel_align = params[:pixel_align]
            ch_masks = []
            case channels.first.size
            when 1
              # ['r', 'g', 'b']
              channels.each{ |c| ch_masks  t.split('')))
              end
              raise "invalid channels: #{channels.inspect}"
            end
            # total number of bits = sum of all channels bits
            nbits = ch_masks.map{ |x| x[1].size }.inject(&:+)
            if params[:prime]
              pregenerate_primes(
                :max   => @image.width * @image.height,
                :count => (@limit*8.0/nbits/channels.size).ceil
              )
            end
            data = ''.force_encoding('binary')
            a = [0]*params[:shift].to_i        # prepend :shift zero bits
            catch :limit do
              coord_iterator(params) do |x,y|
                color = @image[x,y]
                ch_masks.each do |c,bidxs|
                  value = color.send(c)
                  bidxs.each do |bidx|
                    a = 8
                  byte = 0
                  #puts a.join
                  if params[:bit_order] == :msb
                    8.times{ |i| byte |= (a.shift= @limit
                    print "[limit #@limit]".gray if @verbose > 1
                    throw :limit
                  end
                  #a.clear if pixel_align
                end
              end
            end
            if params[:strip_tail_zeroes] != false && data[-1,1] == "x00"
              oldsz = data.size
              data.sub!(/x00+Z/,'')
              print "[zerotail #{oldsz-data.size}]".gray if @verbose > 1
            end
            data
          end
          # 'xy': x=0,y=0; x=1,y=0; x=2,y=0; ...
          # 'yx': x=0,y=0; x=0,y=1; x=0,y=2; ...
          # ...
          # 'xY': x=0,  y=MAX; x=1,    y=MAX; x=2,    y=MAX; ...
          # 'XY': x=MAX,y=MAX; x=MAX-1,y=MAX; x=MAX-2,y=MAX; ...
          def coord_iterator params
            type = params[:order]
            if type.nil? || type == 'auto'
              type = @image.format == :bmp ? 'xY' : 'xy'
            end
            raise "invalid iterator type #{type}" unless type =~ /A(xy|yx)Z/i
            x0,x1,xstep =
              if type.index('x')
                [0, @image.width-1, 1]
              else
                [@image.width-1, 0, -1]
              end
            y0,y1,ystep =
              if type.index('y')
                [0, @image.height-1, 1]
              else
                [@image.height-1, 0, -1]
              end
            # cannot join these lines from ByteExtractor and ColorExtractor into
            # one method for performance reason:
            #   it will require additional yield() for EACH BYTE iterated
            if type[0,1].downcase == 'x'
              # ROW iterator
              if params[:prime]
                idx = 0
                y0.step(y1,ystep){ |y| x0.step(x1,xstep){ |x|
                  yield(x,y) if @primes.include?(idx)
                  idx += 1
                }}
              else
                y0.step(y1,ystep){ |y| x0.step(x1,xstep){ |x| yield(x,y) }}
              end
            else
              # COLUMN iterator
              if params[:prime]
                idx = 0
                x0.step(x1,xstep){ |x| y0.step(y1,ystep){ |y|
                  yield(x,y) if @primes.include?(idx)
                  idx += 1
                }}
              else
                x0.step(x1,xstep){ |x| y0.step(y1,ystep){ |y| yield(x,y) }}
              end
            end
          end
        end
      end
    end
## 结果
起因里的zsteg的参数现在都解释过了，而用stegsolve没有看到flag是因为8bit数据是按照大端模式组成的字节，而flag是需要以小端模式组成，所以当我选择stegsolve来做题时，注定是拿不到flag了，都是时辰的错。
然后bY其实和xY的结果是一样的，只是要确定通道的排列方式，bmp按顺序存的通道顺序是bgr。
    root@LAPTOP-GE0FGULA:/mnt/d# zsteg -c bgr -o xY --msb -b1 瞅啥.bmp
    [?] 2 bytes of extra data after image end (IEND), offset = 0x269b0e
    b1,bgr,msb,xY       .. text: "qwxf{you_say_chick_beautiful?}"
再来看下stegsolve，首先知道-o是Y，因此图片需要倒一下，所以手动修改bmp的高度为原值的负值，图片就倒过来了。
选中的序列和flag的值，生成二进制序列对比一下，应是每8个bit都是倒序的。
    #encoding:utf-8
    from binascii import b2a_hex,a2b_hex
    flag = "qwxf{you_say_chick_beautiful?}"
    stegsolve = "8eee1e66de9ef6aeface869efac61696c6d6fa46a686ae2e9666ae36fcbe"
    flag = bin(int(b2a_hex(flag),16))[2:]
    stegsolve = bin(int(stegsolve,16))[2:]
    def show(a,b):
        if len(a) % 2 != 0:
            a = '0'+a
        if len(b) % 2 != 0:
            b = '0'+b
        for i in xrange(0,len(a),8):
            print a[i:i+8]+"  "+b[i:i+8]
    show(flag,stegsolve)
自己看下结果吧。