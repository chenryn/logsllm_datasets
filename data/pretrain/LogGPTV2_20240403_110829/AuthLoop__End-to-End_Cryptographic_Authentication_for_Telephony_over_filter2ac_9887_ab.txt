The AuthLoop modem has three goals:
1. Support highest bitrate possible
2. At the lowest error rate possible
3. In the presence of deforming codecs
We are not the ﬁrst to address transmission of data
over lossy compressed voice channels. Most prior ef-
forts [70, 51, 42] have focused on transmission over
a single codec, though one project, Hermes [33] was
designed to support multiple cellular codecs. Unfor-
tunately,
that project only dealt with the modulation
scheme, and did not address system-level issues like re-
ceiver synchronization. Furthermore, the published code
did not have a complete demodulator, and our own im-
plementation failed to replicate their results. Thus, we
took Hermes as a starting point to produce our modem.
Most modems are designed around the concept of
modulating one or more parameters — amplitude, fre-
quency, and/or phase — of one or more sine waves. Our
modem modulates a single sine wave using one of three
discrete frequencies (i.e.
it is a frequency shift key, or
FSK, modem). The selection of these frequencies is a
key design consideration, and our design was affected by
three design criteria.
First, our modem is designed for phone systems, so
our choice of frequencies are limited to the 300–3400Hz
966  25th USENIX Security Symposium 
USENIX Association
4
Header
17 data bits
Footer
Figure 3: This 74ms modem transmission of a single frame demonstrates how data is modulated and wrapped in
headers and footers for synchronization.
range because most landline and cellular phones are lim-
ited to those frequencies. Second, because we cannot
accurately recover phase information for demodulation,
our demodulation must be decoherent; the consequence
is that our chosen frequencies must be separated by at
least the symbol transmission rate [64]. Third, each fre-
quency must be an integer multiple of the symbol fre-
quency. This ensures that each symbol completes a full
cycle, and it also ensures that each cycle begins and ends
on a symbol boundary. This produces a continuous phase
modulation, and it is critical because some voice codecs
will produce artifacts or aliased frequencies in the pres-
ence of phase discontinuities. These constraints led to
the selection of a 3-FSK system transmitting symbols at
1000 Hz using frequencies 1000, 2000, and 3000 Hz.
Unfortunately, 3-FSK will still fail to perform in many
compressed channels simply because those channels
distort frequencies, especially frequencies that change
rapidly. To mitigate issues with FSK, we use a differen-
tial modulation: bits are encoded not as individual sym-
bols, but by the relative difference between two consec-
utive symbols. For example, a “1” is represented by an
increase in two consecutive frequencies, while a “0” is
represented by a frequency decrease. Because we only
have 3 frequencies available, we have to limit the num-
ber of possible consecutive increases or decreases to 2.
Manchester encoding, where each bit is expanded into
two “half-bits” (e.g. a “1” is represented by “10”, and
“0” represented by “01”) limits the consecutive increases
or decreases within the limit.
While these details cover the transmission of data,
there are a few practical concerns that must be dealt with.
Many audio codecs truncate the ﬁrst few milliseconds of
audio. In speech this is unnoticeable, and simpliﬁes the
encoding. However, if the truncated audio carries data,
several bits will be lost every transmission. This effect
is compounded if voice activity detection (VAD) is used
(as is typical in VoIP and cellular networks). VAD distin-
guishes between audio and silence, and when no audio is
recorded in a call VAD indicates that no data should be
sent, saving bandwidth. However, VAD adds an addi-
tional delay before voice is transmitted again.
To deal with early voice clipping by codecs and VAD,
we add a 20 ms header and footer at the end of each
packet. This header is a 500 Hz sine wave; this frequency
is orthogonal to the other 3 transmission frequencies, and
is half the symbol rate, meaning it can be used to syn-
chronize the receiver before data arrives. A full modem
transmission containing 17 bits of random data can be
seen in Figure 3.
To demodulate data, we must ﬁrst detect that data is
being transmitted. We distinguish silence and a trans-
mission by computing the energy of the incoming signal
using a short sliding window (i.e, the short-time energy).
Then we locate the header and footer of a message to
locate the beginning and end of a data transmission. Fi-
nally, we compute the average instantaneous frequency
for each half-bit and compute differences between each
bit. An increase in frequency indicates 1, a decrease in-
dicates 0.
3.3 Link Layer
Despite a carefully designed modem, reception errors
will still occur. These are artifacts created by line noise,
the channel codec, or an underlying channel loss (e.g., a
lost IP packet). To address these issues, we developed
a link layer to ensure reliable transmission of handshake
messages. This link layer manages error detection, error
correction, frame acknowledgment, retransmission, and
reassembly of fragmented messages.
Because error rates can sometimes be as high as sev-
eral percent, a robust retransmission scheme is needed.
However, because our available modem data rate is so
low, overhead must be kept to a minimum. This rules out
most standard transmission schemes that rely on explicit
sequence numbers. Instead, our data link layer chunks
transmitted frames into small individual blocks that may
be checked and retransmitted if lost. We are unaware of
other link layers that use this approach. The remainder
of this subsection motivates and describes this scheme.
USENIX Association  
25th USENIX Security Symposium  967
5
STANDARD 
SEND 
FRAME
AWAIT 
ACK
NACKs>0
SEND 
REPEAT 
FRAMES 
NACKs==0
Timeout /
Error
SEND 
ERROR 
MESSAGE
NACKs==0
SEND ACK
IDLE
(START)
RECEIVE 
OTHER 
FRAME
SEND 
ERROR 
FRAME
RECEIVE 
ERROR 
FRAME
ANY 
STATE
AWAIT 
REPEAT 
BLOCKS 
Timeout
SEND 
ERROR 
FRAME
RECEIVE 
STANDARD 
FRAME
NACKs >0
Receive 
Repeat 
Blocks
Figure 4: Link Layer State Machine
3.4 Framing and error detection
Most link layers are designed to transmit large (up to
12,144 bits for Ethernet) frames, and these channels ei-
ther use large (e.g., 32-bit) CRCs2 for error detection to
retransmit the entire frame, or use expensive but neces-
sary error correcting schemes in lossy media like radio.
Error correcting codes recover damaged data by trans-
mitting highly redundant data, often inﬂating the data
transmitted by 100% or more. The alternative, sending
large frames with a single CRC, was unlikely to succeed.
To see why, note that:
(1)
P(CorrectCRC) = (1− P(biterror))CRClength
For a 3% bit error rate, the probability of just the CRC
being undamaged is less than 38% — meaning two thirds
of packets will be dropped for having a bad CRC inde-
pendent of other errors. Even at lower loss rates, retrans-
mitting whole frames for a single error would cause a
massive overhead.
Instead, we divide each frame into 32-bit “blocks”.
Each block carries 29 bits of data and a 3-bit CRC. This
allows short sections of data to be checked for errors in-
dividually and retransmitted, which is closer to optimal
transmission. Block and CRC selection was not arbitrary,
but rather the result of careful modeling and analysis. In
particular, we aimed to ﬁnd an optimal tradeoff between
overhead (i.e., CRC length) and error detection.
Intu-
itively, longer CRCs provide better error detection and
reduce the probability of an undetected error. More for-
mally, a CRC of length l can guarantee detection of up to
2A Cyclic Redundancy Check (CRC) is a common checksum that
is formed by representing the data as a polynomial and computing the
remainder of polynomial division. The polynomial divisor is a design
parameter that must be chosen carefully.
6
HD bit errors3 in a B-length block of data, and can detect
more than HD errors probabilistically [43].
The tradeoff is maximizing the block size and mini-
mizing the CRC length while minimizing the probability
of a loss in the frame or the probability of an undetected
error, represented by the following equations:
Pr(lost f rame) =1 − Pr(success f ul f rame)
i(cid:30)pi(1− p)B−i
Pr(cid:31)undetected
= 1− (1− p)B
i=0(cid:31)B
∑
error (cid:30) = 1−
HD
(2)
(3)
(4)
where p represents the probability of a single bit er-
ror. The probability of undetected error is derived from
the cumulative binomial distribution. Using these equa-
tions and the common bit error rate of 0.3% (measured in
Section 6), we selected 32-bit blocks with a 3-bit CRC.
We chose the optimal 3-bit CRC polynomial according to
Koopman and Chakravarty [43]. These parameters give a
likelihood of undetected error of roughly 0.013% , which
will rarely affect a regular user. Even a call center user
would see a protocol failure due to bit error once every
two weeks, assuming 100 calls per day.
3.5 Acknowledgment and Retransmission
Error detection is only the ﬁrst step of the error recovery
process, which is reﬂected as a state machine in Figure 4.
When a message frame is received, the receiver com-
putes which blocks have an error and sends an acknowl-
edgment frame (“ACK”) to the transmitter. The ACK
frame contains a single bit for each block transmitted to
indicate if the block was received successfully or not.
3The Hamming distance of the transmitted and received data
968  25th USENIX Security Symposium 
USENIX Association
Blocks that were negatively acknowledged are retrans-
mitted; the retransmission will also be acknowledged by
the receiver. This process will continue until all original
blocks are received successfully.
By using a single bit of acknowledgment for each
block we save the overhead of using sequence num-
bers. However, even a single bit error in an ACK will
completely desynchronize the reassembly of correctly re-
ceived data. Having meta-ACK and ACK retransmission
frames would be unwieldy and inelegant.
Instead, we
transmit redundant ACK data as a form of error correc-
tion; we send ACK data 3 times in a single frame and
take the majority of any bits that conﬂict. The likelihood
of a damaged ACK is then:
instead of
Block Count× 3× Pr(biterr)2
1− (1− Pr(biterr))Block Count
(5)
(6)
Note that there are effectively distinct types of frames
– original data, ACK data, retransmission data, and er-
ror frames. We use a four-bit header to distinguish these
frames;
like ACK data, we send three copies of the
header to ensure accurate recovery. We will explore more
robust error correcting codes in future work.
3.6 Na¨ıve TLS over Voice Channels
With a modem and link layer design established, we can
now examine how a standard authentication scheme —
TLS 1.2 — would fare over a voice channel.
Table 1 shows the amount of data in the TLS hand-
shakes of four popular Internet services: Facebook,
Google, Bank of America, and Yahoo. These handshakes
require from 41,000 to almost 58,000 bits to transmit,
and this excludes application data and overhead from
the TCP/IP and link layers. At 500 bits per second (the
nominal speed of our modem), these transfers would re-
quire 83–116 seconds as a lower bound. From a usabil-
ity standpoint, standard TLS handshakes are simply not
practical for voice channels. Accordingly, a more efﬁ-
cient authentication protocol is necessary.
4 Security Model
Having demonstrated that data communication is pos-
sible but extremely limited via voice channels, we now
turn our attention to deﬁning a security model. The com-
bination of our modem and this model can then be used
to carefully design the AuthLoop protocol.
The goal of AuthLoop is to mitigate the most com-
mon enabler of phone fraud: claiming a false identity
via Caller ID spooﬁng. This attack generally takes the
Table 1: TLS Handshake Sizes
Site Name
Total Bits
Facebook
Google
Bank of America
Yahoo
Average
41 544
42 856
53 144
57 920
48 688
Transmission
Time (seconds
at 500bps)
83.088
85.712
106.288
115.840
97.732
form of the adversary calling the victim user and extract-
ing sensitive information via social engineering. The
attack could also be conducted by sending the victim a
malicious phone number to call (e.g., via a spam text or
email). An adversary may also attempt to perform a man
in the middle attack, calling both the victim user and a le-
gitimate institution and then hanging up the call on either
when they wish to impersonate that participant. Finally,
an adversary may attempt to perform a call forwarding
attack, ensuring that correctly dialed numbers are redi-
rected (undetected to the caller) to a malicious endpoint.
We base our design on the following assumptions. An
adversary is able to originate phone calls from any tele-
phony device (i.e., cellular, PSTN, or VoIP) and spoof
their Caller ID information to mimic any phone number
of their choosing. Targeted devices will either display
this spoofed number or, if they contain a directory (e.g.,
contact database on a mobile phone), a name associated
or registered with that number (e.g., “Bank of America”).
The adversary can play arbitrary sounds over the audio