100 ×
100 ×
100 ✓
100 ✓
100 ×
100 ×
×
42
100 ✓
100 ×
Cross
Small
Small
Adjacent
Adjacent
Adjacent
Reclaim
Reclaim
CheckOnFree
Uninitialized
SizeCheck
Spray
ArcHeap
SlimGuard ffmalloc hardened_malloc
P
D
D
P
100 ✓ 100 ×
100 ✓ 100 ✓
100 ✓ 100 ✓
100 ×
100 ✓
100 ✓
100 ✓ 100 ×
100 ✓
100 ✓
100 ×
P
100 ×
×
40
100 ×
52
×
P
D
100 ✓
100 ×
100 ✓
100 ✓
×
61
scudo
P
D
100 ×
100 ×
100 ✓
P
D
100 ✓ 44
100 ×
isoalloc mimalloc
P
D
100 ✓ 100 ×
×
100 ✓
×
54
×
100 ✓ 73
100 ✓ 100 ×
100 ✓
100 ×
×
98
100 ✓
100 ×
P: The maximum probability (%), D: A mark that will be set if every test case is deterministic
Table 5: Summary of HardsHeap’s security evaluation for one baseline allocator (ptmalloc2) and 10 secure allocators using multiple modules.
1 const bool BypassQuarantine =
2
!Size || (Size > QuarantineChunksUpToSize);
(a) A condition for quarantine in scudo.
1 p0 = malloc(0);
2 free(p0);
3 p1 = malloc(16);
(b) Reclamation for a small object
1 p0 = malloc(0x1000);
2 free(p0);
3 p1 = malloc(0x1000);
(c) Reclamation for a large object
Figure 4: Two ways to reliably reclaim objects (p0 → p1) in scudo.
They satisfy each condition to bypass quarantine in Figure 4a, re-
spectively.
discovered this issue if it uses a configuration to specify larger ob-
ject sizes (> 512 KB). Thanks to HardsHeap’s random exploration,
HardsHeap can automatically discovered this issue by allocating
an extremely large object without using any specific configurations.
Second, we also confirmed that three allocators (MarkUs, ffmalloc,
and isoalloc) have no random allocation support, which allows us
adjacent chunks, as shown in Table 1.
Reclaim. Because a random reuse mechanism is strongly related
to random allocations, most underlying reasons are equal to those
in adjacent chunks — failures in large allocations. However, we
also found several interesting results regarding reclamation in se-
cure allocators. First, HardsHeap successfully identified boundary
conditions to enable reliable reclamation in scudo. In particular, it
discovered two types of test cases that could reliably reclaim objects
by satisfying the conditions in Figure 4a; Figure 4b allocates a zero
size to satisfy the first condition (!Size), and Figure 4c exploits
the second condition where QuarantineChunksUpToSize is 2048 as
default (Size > QuarantineChunksUpToSize). It is worth noting that
this issue was fixed in the standalone scudo, but not in the non-
standalone scudo that we tested. Second, unlike its security feature
for defending against use-after-free vulnerabilities, MarkUs allows
unsafe reclamation with dangling pointers. We further describe
this in §9.3.
CheckOnFree. We also found that eight allocators failed to prop-
erly support the check-on-free (i.e., canary) mechanism for var-
ious reasons. First, five allocators (DieHarder, Guarder, SlimGuard,
hardened_allocator, and mimalloc) do not check the canary for
a large object. Second, isoalloc’s case is special. Even though it
claims that it supports canary in its documentation, its canary is dif-
ferent from others; it randomly places the canary between chunks,
causing it to fail to detect several corrupted chunks in free. This
implies that we require an automatic analysis like HardsHeap by
showing the insufficiency of the checklist-based, manual analy-
sis for security properties similar to Table 1. Finally, ffmalloc and
MarkUs are only designed to defend against use-after-free vulnera-
bilities; they have no support this mechanism for overflow.
Uninitialized. HardsHeap found three interesting cases in the
Uninitialized module. First, SlimGuard leaves its heap pointer to
construct a linked list in a deallocated object. This behavior can
be abused in exploitation by leaking a heap pointer to break ASLR.
Second, mimalloc leaves its metadata for large objects. We have
reported this issue to developers; however, they conclude that it
has no security implication because the metadata become obso-
lete in deallocating large objects. We further discuss this in §10.3.
Third, HardsHeap claims isoalloc’s security violation for the
Uninitialized module; however, it turns out to be a false positive.
To prevent attacks, isoalloc fills an object with a magic byte (0xde)
when the object becomes deallocated. Unfortunately, HardsHeap
has no assumption about the shape of metadata for implementation-
agnostic testing. Thus, it incorrectly considers this magic byte as
metadata leakage.
SizeCheck. These findings are related to integer overflow bugs in
allocators. We further discuss this issue in §9.1.
Spray. HardsHeap also found that three allocators — FreeGuard,
ffmalloc, and mimalloc— suffer from heap spraying. Through post-
analysis, we figured out that this occurs due to the blind use of
MAP_NORESERVE in mmap for allocating a large object. In particular,
it causes Linux to use memory overcommit; it allows to map an
extremely large size of memory (> TB), resulting in a recurrent ad-
dress among multiple executions. This issue becomes more serious
in mimalloc due to its low entropy for an initial memory address.
As a result, we could discover a deterministic case for mimalloc. We
further discuss this in §9.4.
ArcHeap. HardsHeap also discovered three security violations in
the ArcHeap module. In particular, we found that SlimGuard fails to
check invalid free properly due to its implementation bug. Moreover,
HardsHeap found that both mimalloc and DieHarder are vulnera-
ble to double free, resulting in overlapping chunks. DieHarder’s
bug is equivalent to the ArcHeap’s finding [49]; This is related to
DieHarder’s non-protection of large objects. mimalloc’s violation is
also similar to the old ArcHeap’s finding; however, we found that
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea387mimalloc has introduced a stochastic defense to mitigate this. This
defense successfully stops a 100% reliable attack; however, it still
allows overlapping chunks in a high probability (∼ 50%). Thanks to
our sampling-based testing, HardsHeap successfully discovered
this issue unlike ArcHeap, which only works in a non-random envi-
ronment.
Total
3,343
Failures
(Generation)
Failures
(Reproduction)
Success
684
34
2,625 (78.5%)
Table 6: The reproducilbity of HardsHeap. We could reproduce
78.5% of test cases found by HardsHeap thanks to HardsHeap’s
straightforward analysis.
8.2 Statistical Significance Delta Debugging
To demonstrate the effectiveness of our delta debugging, we applied
three types of delta debugging techniques — classical, greedy, and
SSDD— to reduce test cases in §8.1. We exclude test cases that are
always reproducible in our evaluation because all of the techniques
switch to using the classical method for optimization, as explained
in §5.4.
Figure 5 shows the results of our test case reduction using the
above techniques. This shows that SSDD successfully reduces test
cases by 37.2% on average, helping further root cause analyses.
Moreover, SSDD outperforms other methods, and it it further re-
duces test cases without losing reproducibility. In particular, SSDD
can produce smaller test cases than the greedy method. According
to our evaluation, the SSDD’s reduced test cases are 13.8% smaller
than those from the greedy method on average (see Figure 5 (a)).
The classical method can reduce test cases further; however, it
significantly reduces reproduction probabilities due to its careless
analysis of stochastic findings. As a result, the classical method
results in 48.7% lower reproducibility compared to SSDD, whereas
SSDD’s probabilities are similar to the original ones (see Figure 5
(b)).
It is worth noting that the greedy method sometimes produces
smaller cases than SSDD (e.g., see SL AD in Figure 5). At first glance,
these results appear to be unusual because SSDD’s approach is
more aggressive than the greedy approach. Essentially, the greedy
method’s condition for reduction is sufficient to satisfy the SSDD’s.
However, this is still explainable because of the nature of stochas-
ticity. In particular, it is possible that a single action can satisfy the
greedy method’s stronger condition for the reduction but not the
SSDD’s weaker condition because both methods rely on distinct
sampling results. Moreover, HardsHeap sometimes fails to reduce
test cases from Guarder and FreeGuard properly. This is because
these allocators pre-allocate huge memory for their dynamic mem-
ory management (e.g., 64 TB in FreeGuard), resulting in system-level
instability.
8.3 Reproducibility
The HardsHeap’s findings are highly reproducible thanks to
its straightforward analysis. To measure the reproducibility of
HardsHeap, we created and ran PoCs, which are obtained from
§8.1. Note that HardsHeap’s PoC is equipped with assertions to
ensure security violations. For example, the Adjacent module as-
serts that two chunks are adjacent using their pointers and sizes, as
shown in Figure 3. Similarly, the SizeCheck module checks whether
the actual size of a chunk is smaller than the request size (see Fig-
ure 6). Only exception is the Spray module; its PoC has no proper
assertions because the current prototype of HardsHeap lacks a
global analysis in building a PoC program; this analysis is required
for the Spray module to identify the recurrent address. Therefore,
we manually verified PoC programs for the Spray module whether
they are reproducible.
As shown in Table 6, HardsHeap successfully generated 2,659
PoCs among 3,343 cases, and we successfully reproduced 2,625
test cases among them, which accounted for 78.5% of the total test
cases. Most of the failures in generating PoCs come from incom-
plete PoC code because HardsHeap could be terminated due to
system failures in allocators (e.g., memory exhaustion). Moreover,
PoCs fail to be reproduced because 1) HardsHeap’s memory lay-
out could be different from a standalone PoC program because
of its data structure, and 2) PoC could terminate early due to our
assert to check security violations; however, in the analysis phase,
HardsHeap can further explore for finding next security viola-
tions. Note that HardsHeap successfully discovered other variants
that are successfully reproducible for finding security violations of
secure allocators. We also believe that HardsHeap’s reproducibil-
ity is fairly high (78.5%), which is sufficient for evaluating secure
allocators.
9 CASE STUDY
Although many test cases from HardsHeap are caused by intended
trade-offs between security and performance, HardsHeap also
found several implementation bugs, which show unexpected be-
haviors in secure allocators, as shown in Table 7. In the following,
we describe each implementation bug in detail.
9.1 Integer Overflows in Multiple Allocators
HardsHeap found an integer overflow in memory allocation in
several allocators. It is quite straightforward to trigger integer over-
flows in allocators (e.g., malloc(-8)). However its impact is huge;
this bug can render a safe code under an ordinary allocator vul-
nerable. Let us assume that we have a program that reads a size,
allocates a heap object with the size, and reads data up to the size.
Although the program is correctly implemented, an attacker can
trigger a heap overflow by giving an extremely large size (e.g., -8) to
cause internal overflow of the allocator. Then, the allocator returns
an object whose actual size is much less than the requested one due
to its integer overflow, resulting in a heap overflow.
9.2 Predictable Seeds in FreeGuard and Guarder
While analyzing strange cases from the Adjacent module in
FreeGuard and Guarder, we discovered their critical randomness
issue. In particular, FreeGuard and its successor Guarder rely
on predictable seeds in their pseudo-random generator (i.e.,
srand(time(NULL))). They use this random generator in multiple
places for their secure behaviors, such as allocations and guard
Session 2A: Fuzzing and Bug Finding CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea388AD: Adjacent, ADC: Adjacent (Cross), ADS: Adjacent (Small), AR: ArcHeap,
CH: CheckOnFree, UN: Uninitialized, RE: Reclaim, RES: Reclaim (Small), SI: SizeCheck SP: Spray
Figure 5: Test case reduction ratio and probability difference ratio in different delta debugging techniques. SSDD outperforms the greedy
method by significantly reducing test cases. Moreover, SSDD can preserve probabilities of original test cases unlike the classical method.
Allocator Module
Description
Status
Guarder
FreeGuard
Adjacent
Insufficient randomness due to predictable seeds
MarkUs
Reclaim
mimalloc
Spray
Unsafe reclamation in mmapped memory
Unsafe reclamation due to failed allocation
Heap spray is possible due to memory overcommit
Guarder
FreeGuard
isoalloc
ffmalloc
SizeCheck
Integer overflow in memory allocation
R
R
P
P
P
A
A
P
P
R
SlimGuard
ArcHeap
Insufficient check for invalid free
R: Reported, A: Acknowledged, P: Patched
Table 7: Implementation bugs in secure allocators that are discovered by HardsHeap.
void* p0 = malloc(-1);
assert(malloc_usable_size(p0) < -1);
1 int main() {
2
3
4 }
Figure 6: PoC code that triggers an integer flow in ffmalloc found by
the SizeCheck module.
page placement, thereby making them predictable. We could dis-
cover this problem thanks to HardsHeap’s sampling-based testing;
HardsHeap reported that a certain test case from these allocators
can always be reproducible in a specific time window. After inves-
tigating its root cause, we concluded that it occurs because of this
weak random seed based on the current timestamp. We reported
this issue to the developer and await their response.
9.3 Unsafe reclamation in MarkUs
HardsHeap also found unsafe reclamation in MarkUs; it is a secure
allocator that is specially designed for preventing use-after-free
(UAF). MarkUs prevents UAF attacks by forbidding the reallocation
of an object with its dangling pointer. Unlike its theoretical guaran-
tee, HardsHeap found that MarkUs still allows reclaiming memory
for a dangling pointer. In particular, HardsHeap found two cases
for unsafe reclamation in MarkUs. The first bug was caused by the
simple error of omitting the mapped memory in their analysis;
however, the second bug is more interesting. Figure 7 shows the
simplified PoC code for the second MarkUs bug. This PoC first trig-