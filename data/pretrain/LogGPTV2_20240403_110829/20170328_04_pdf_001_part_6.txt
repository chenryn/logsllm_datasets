### 7.2.18 SQL Routines for MultiLineString

#### 7.2.18.1 Supported Routines
The SQL/MM routines supported by `GeomCollection` shall be supported for geometries of type `MultiLineString`.

#### 7.2.18.2 Declarations from SQL/MM (Informative)
```sql
CREATE TYPE ST_MultiLineString
UNDER ST_MultiCurve
INSTANTIABLE
NOT FINAL
OVERRIDING METHOD ST_Geometries()
RETURNS ST_LineString ARRAY[ST_MaxGeometryArrayElements],
OVERRIDING METHOD ST_Geometries(ageometryarray ST_Geometry ARRAY[ST_MaxGeometryArrayElements])
RETURNS ST_MultiLineString;
```

### 7.2.19 SQL Routines for MultiSurface

#### 7.2.19.1 Supported Routines
The SQL/MM routines `ST_Centroid`, `ST_PointOnSurface`, and `ST_Area` as well as the routines supported by `GeomCollection` shall be supported for geometries of type `MultiSurface`.

#### 7.2.19.2 Declarations from SQL/MM (Informative)
```sql
CREATE TYPE ST_MultiSurface
UNDER ST_GeomCollection
INSTANTIABLE
NOT FINAL
METHOD ST_Centroid()
RETURNS ST_Point
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,
METHOD ST_PointOnSurface()
RETURNS ST_Point
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,
METHOD ST_Area()
RETURNS DOUBLE PRECISION
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,
METHOD ST_Area(aunit CHARACTER VARYING(ST_MaxUnitNameLength))
RETURNS DOUBLE PRECISION
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,
OVERRIDING METHOD ST_Geometries()
RETURNS ST_Surface ARRAY[ST_MaxGeometryArrayElements],
OVERRIDING METHOD ST_Geometries(ageometryarray ST_Geometry ARRAY[ST_MaxGeometryArrayElements])
RETURNS ST_MultiSurface;
```

### 7.2.20 SQL Routines for Text

The `Annotation_Text`, `Annotation_Text_Element`, and `Annotation_Text_Element_Array` provide text functionality as SQL objects.

#### 7.2.20.1 Type Definitions
```sql
CREATE TYPE ANNOTATION_TEXT AS
{
    PrivateEnvelope AS GEOMETRY,
    PrivateElement_Array AS ANNOTATION_TEXT_ELEMENT_ARRAY
};

CONSTRUCTOR METHOD ANNOTATION_TEXT(anArray ANNOTATION_TEXT_ELEMENT_ARRAY)
RETURNS ANNOTATION_TEXT
SELF AS RESULT
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD CONCAT(b ANNOTATION_TEXT)
RETURNS ANNOTATION_TEXT
SELF AS RESULT
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD ENVELOPE()
RETURNS GEOMETRY
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD ELEMENT_ARRAY()
RETURNS ANNOTATION_TEXT_ELEMENT_ARRAY
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT;

CREATE TYPE ANNOTATION_TEXT_ELEMENT_ARRAY AS
VARING ARRAY (MaxArraySize) OF ANNOTATION_TEXT_ELEMENT;

METHOD ElementN(aposition INTEGER)
RETURNS ANNOTATION_TEXT_ELEMENT
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD ElementN(element ANNOTATION_TEXT_ELEMENT, aposition INTEGER)
RETURNS ANNOTATION_TEXT_ELEMENT_ARRAY
SELF AS RESULT
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT;

CREATE TYPE ANNOTATION_TEXT_ELEMENT AS
(
    privateValue AS CHARACTER VARYING (MaxArraySize),
    privateLocation AS GEOMETRY,
    privateLeaderLine AS GEOMETRY,
    privateTextAttributes AS CHARACTER VARYING (MaxArraySize)
);

CONSTRUCTOR METHOD AnnotationTextElement
(value CHARACTER VARYING (MaxArraySize),
 location GEOMETRY,
 leaderLine GEOMETRY,
 textAttributes CHARACTER VARYING (MaxArraySize))
RETURNS ANNOTATION_TEXT_ELEMENT
SELF AS RESULT
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD Value()
RETURNS CHARACTER VARYING (MaxArraySize)
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD Value(value CHARACTER VARYING (MaxArraySize))
RETURNS ANNOTATION_TEXT_ELEMENT
SELF AS RESULT
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD TextAttributes()
RETURNS CHARACTER VARYING (MaxArraySize)
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD TextAttributes(attributes CHARACTER VARYING (MaxArraySize))
RETURNS ANNOTATION_TEXT_ELEMENT
SELF AS RESULT
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD Location()
RETURNS GEOMETRY
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD Location(location GEOMETRY)
RETURNS ANNOTATION_TEXT_ELEMENT
SELF AS RESULT
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD LeaderLine()
RETURNS GEOMETRY
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT,

METHOD LeaderLine(leaderLine GEOMETRY)
RETURNS ANNOTATION_TEXT_ELEMENT
SELF AS RESULT
LANGUAGE SQL
DETERMINISTIC
CONTAINS SQL
RETURNS NULL ON NULL INPUT;
```

### Annex A: Abstract Test Suite (Normative)

#### A.1 Purpose of this Annex
This annex outlines the requirements for a comprehensive test suite for each class of compliance for this standard. Each conformance clause defined in Section A.2 will address testing methods for a coherent set of requirements from the normative clauses in this standard or other standards. Each compliance level or class, defined in Section A.4 below, will address a specified set of conformance clauses.

Some of the conformance clauses are "parameterized" in the sense that they specify the use of "appropriate" tests from another clause. This is done to keep the number of clauses to a minimum while allowing for a finer degree of separation between conformance classes. Each time a parameterized conformance clause is used in defining a conformance class, its parameters must be specified.

#### A.2 Conformance Tests

##### A.2.1 Feature Tables
**Test Purpose:** To test the capability to create, access, query, and modify feature tables (Section 7.1.4 or 7.2.3) and using the appropriate geometric types, as defined in the associated geometry conformance clause.

**Test Method:**
- Reading a feature schema from a set of SQL statements.
- Loading feature and geometry tables from a set of text load files containing SQL statements, or files of similar content as defined for the SQL version being used.
- Making attribute and spatial queries against the table so loaded above.
- Getting an acceptable answer as tested by an export of the query results defined above.

###### A.2.1.1 Features Using Geometry in Predefined Types
Use the feature implementation defined in 7.1.4.

###### A.2.1.2 Features Using Binary or SQL Geometry Types
Use the feature implementation defined in 7.2.3.

##### A.2.2 Geometry Tables or Types

###### A.2.2.1 Normalized Geometry Schema
**Test Purpose:** To test the capability to create, access, query, and modify feature spatial attributes using the appropriate geometric implementation as described in Clauses 6.1.5.1 (Normalized geometry schema), 7.1.5.2 (Geometry stored using SQL numeric types with metadata as in 7.1.5, Geometry columns information).

**Test Method:**
- Incorporating the appropriate geometric types in the feature table test of A.2.1.

###### A.2.2.2 Binary Geometry
**Test Purpose:** To test the capability to create, access, query, and modify feature spatial attributes using the appropriate geometric types, Section 6.1.5.2 (Binary geometry schema), 7.1.5.3 (Geometry stored using SQL binary types with metadata as in 7.1.3, Geometry columns information).

**Test Method:**
- Incorporating the appropriate geometric types in the feature table test of A.2.1.

###### A.2.2.3 SQL/MM Geometry Schema
**Test Purpose:** To test the capability to create, access, query, and modify feature spatial attributes using the appropriate geometric types, Section 6.1.5.3 (SQL/MM geometry schema), 7.2 Components â€” SQL with Geometry Types implementation of feature tables, with metadata as in 7.1.3, Geometry columns information.

**Test Method:**
- Incorporating the appropriate geometric types in the feature table test of A.2.1.

##### A.2.3 Spatial Reference Systems

###### A.2.3.1 2D Spatial Reference Systems
**Test Purpose:** To test the capability of creating and using 2D coordinate systems, coordinates in X and Y.

**Test Method:**
- Defining a 2D coordinate system compatible with a test feature and geometry test as defined in A.2.1 and A.2.1.1, for geometries compatible with a 2D coordinate system.
- Executing the test as defined, and obtaining appropriate query results.

###### A.2.3.2 3D Spatial Reference Systems
**Test Purpose:** To test the capability of creating and using 3D coordinate systems, coordinates in X, Y, and Z. This includes the capability to create both 2D and 3D coordinate systems and to use them to describe geometry values.

**Test Method:**
- All tests in A.2.3.1.
- Defining a 3D coordinate system compatible with a test feature and geometry test as defined in A.2.1 and A.2.1.1, for geometries compatible with a 3D coordinate system.
- Executing the test as defined, and obtaining appropriate query results.

**Note:** Spatial reference systems must still be defined on a column basis, and a feature table shall not mix geometry values from different spatial reference systems within a single attribute column.

###### A.2.3.3 Measured Spatial Reference Systems
**Test Purpose:** To test the capability of creating and using measured coordinate systems, coordinates having an M. This includes the ability to create geometry values both with and without measured coordinates.

**Test Method:**
- Defining a measured coordinate system compatible with a test feature and geometry test as defined in A.2.1 and A.2.1.1, for geometries compatible with a measured coordinate system.
- Executing the test as defined, and obtaining appropriate query results.

**Note:** Spatial reference systems must still be defined on a column basis, and a feature table shall not mix geometry values from different spatial reference systems within a single attribute column.

##### A.2.4 Geometric Format Supported
**Test Purpose:** To test the capability of creating and using geometric values in a particular representation format from one of the following clauses.

###### A.2.4.1 Geometry Stored Using SQL Numeric Types
Perform the test using Section 7.1.5.2 (Geometry stored using SQL numeric types).

###### A.2.4.2 Geometry Stored Using SQL Binary Types
Perform the test using Section 7.1.5.3 (Geometry stored using SQL binary types).

###### A.2.4.3 SQL Geometry Types
Perform the test using Section 7.2.2 (SQL Geometry Types).

##### A.2.5 Geometric Categories Supported
**Test Purpose:** To test the capability of creating and using geometric types as defined in the subclauses below.

**Test Method:**
- Perform a test from Conformance Clause A.2 using appropriate geometry types.
- Creating and using geometry types including those defined in this section according to the types defined in the appropriate section as listed below.

###### A.2.5.1 Basic Geometric Categories Supported
Perform the test with types in Part 1, Section 6.1.3 through 6.1.15, except 6.1.12.

###### A.2.5.2 TINs and Basic Geometric Categories Supported
Perform the test with types in the basic test and with the addition of TINs for 6.1.12.

###### A.2.5.3 Full Geometric Categories Supported
Perform the test with types in Part 1, Section 6.1.3 through 6.1.15.

##### A.2.6 Text
**Test Purpose:** To test the capability of creating and using annotations of the appropriate types from one of the following clauses.

- Section 6.2.9 (using predefined types â€“ a table implementation)
- Section 7.2.20 (using SQL UDT types)

**Note:** No binary implementation of annotations has been specified.

###### A.2.6.1 Text Using Predefined Types Supported
Perform the test with annotation text as defined in Section 6.2.9 (using predefined types â€“ a table implementation).

###### A.2.6.2 Text Using SQL UDT Types Supported
Perform the test with annotation text as defined in Section 7.2.20 (using SQL UDT types).

### A.3 Composite Conformance Clauses

### A.4 Conformance Classes

#### A.4.1 Types of Conformance Classes
All conformant applications (SQL data servers) must support features (one of the tests in A.2.1), but may support the other aspects of this standard dependent on a set of five choices. Conformance class choices are based on the following parameters:

- **Format of Geometry Supported:**
  - gT (table using predefined types) (not valid with M, 3D, or Text S)) A.2.4.1 and A.2.1.1
  - gB (binary type) (tests A.2.4.2 and A.2.1.2)
  - gS (SQL type) (tests A.2.4.3 and A.2.1.2)

- **Types of Geometry Supported:**
  - b - Basic (no polyhedral surfaces) A.2.5.1
  - t - Basic plus TINS (must be 3D) A.2.5.2
  - f - Full (must be 3D) A.2.5.3

- **Dimension of Coordinate Systems Supported:**
  - 2D (two-dimensional) A.2.3.1
  - 3D (three-dimensional) includes 2D (test A.2.3.2) (only valid with geometry choices gB or gS)

- **Measured or Unmeasured Coordinate System:**
  - M (measured) (only valid with geometry B or S) (test A.2.3.3)
  - N (not measured) (no additional test)

- **Types of Annotation Text Supported:**
  - tT - table using predefined types) (test A.2.6.1) (valid only with geometry gB) (no additional test)
  - tS - SQL type (only valid with geometry gS) (test A.2.6.2)
  - tN - no text support (no additional tests), included for compatibility with SFA v1.1 (earlier) versions

This means that a conformance class may be defined by a string of 5 characters from the list above, subject to the restrictions listed.

**Example:**
- The maximum compliance level for SQL types is (gS, f, 3D, M, tS).
- The minimal compliance level for v1.1, table geometry is (gT, b, 2D, N, tN).

**Table A.1 - Equivalences Between V1.1 and V1.2 Compliance Classes**

| V1.1 Conformance Class | Equivalent V1.2 Conformance Class |
|------------------------|-----------------------------------|
| Normalized geometry schema | (gT, b, 2D, N, tN) |
| Binary geometry schema | (gB, b, 2D, N, tN) |

---

**Copyright Â© 2007 Open Geospatial Consortium, Inc. All Rights Reserved. OGC 06-104r4**