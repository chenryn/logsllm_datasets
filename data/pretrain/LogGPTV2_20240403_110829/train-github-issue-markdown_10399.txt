see https://groups.google.com/forum/?fromgroups=#!topic/neo4j/CjKNqI5WGhE for
context.
I constantly encounter a strange problem when running a relatively simple
query on Linux based machines while on Windows 7 I have no problems at all
(both from neo4j-shell and from Python using py2neo).
I have a database with 7762 nodes and 20730 relationships. I have an index on
node property 'venueID'. There are 817 nodes with node property 'venueID:2826'
and 1233 nodes wirh 'venueID:2611' (for all the other values of this node
property there are few nodes). I created the database using py2neo both on
Windows and Linux.
If I run the following query
    START a=node:my_nodes('venueID:2611'), b=node:my_nodes('venueID:2826')
    MATCH a-->b
    RETURN count(a)
  * on Windows 7 with Java version 1.7.0_09 using neo4j versions 1.8, 1.9.M01, 1.7.2 I get an answer within 15000ms;
  * on Debian-based server (Linux 2.6.32-5-amd64) with Java version 1.6.0-18 using stable neo4j version 1.8 as well as 1.9-SNAPSHOT and 1.9.M02 I constantly get an error
"ServerError: Error occurred in server thread; nested exception is:  
org.neo4j.helpers.ThisShouldNotHappenError: Developer: Andres claims that:
Unexpected traversal state encountered"  
In the console log when using 1.9-SNAPSHOT I see the following message  
11:18:32.807 [535102763@qtp-423265228-2] ERROR org.mortbay.log -
/db/data/cypher  
org.neo4j.helpers.ThisShouldNotHappenError: Developer: Andres claims that:
Unexpected traversal state encountered  
at
org.neo4j.cypher.internal.pipes.matching.BidirectionalTraversalMatcher$StepCollisionDetector.includePath(Bidirect$  
at
org.neo4j.kernel.StandardBranchCollisionDetector.evaluate(StandardBranchCollisionDetector.java:74)
~[neo4j-kernel$  
at
org.neo4j.kernel.StandardBranchCollisionDetector.evaluate(StandardBranchCollisionDetector.java:37)
~[neo4j-kernel$  
at
org.neo4j.kernel.impl.traversal.BidirectionalTraverserIterator.fetchNextOrNull(BidirectionalTraverserIterator.jav$  
at
org.neo4j.kernel.impl.traversal.BidirectionalTraverserIterator.fetchNextOrNull(BidirectionalTraverserIterator.jav$  
at
org.neo4j.helpers.collection.PrefetchingIterator.hasNext(PrefetchingIterator.java:55)
~[neo4j-kernel-1.9-SNAPSHOT$  
at
scala.collection.JavaConversions$JIteratorWrapper.hasNext(JavaConversions.scala:574)
~[scala-library-2.9.1-1.jar:$  
at scala.collection.Iterator$$anon$21.hasNext(Iterator.scala:371) ~[scala-
library-2.9.1-1.jar:na]  
at scala.collection.Iterator$$anon$21.hasNext(Iterator.scala:371) ~[scala-
library-2.9.1-1.jar:na]  
at scala.collection.Iterator$class.foreach(Iterator.scala:660) ~[scala-
library-2.9.1-1.jar:na]  
at scala.collection.Iterator$$anon$21.foreach(Iterator.scala:368) ~[scala-
library-2.9.1-1.jar:na]  
at
org.neo4j.cypher.internal.pipes.EagerAggregationPipe.createResults(EagerAggregationPipe.scala:76)
~[neo4j-cypher-$  
at
org.neo4j.cypher.internal.pipes.ColumnFilterPipe.createResults(ColumnFilterPipe.scala:37)
~[neo4j-cypher-1.9-SNAP$  
at
org.neo4j.cypher.internal.executionplan.ExecutionPlanImpl$$anonfun$6.apply(ExecutionPlanImpl.scala:127)
~[neo4j-c$  
at
org.neo4j.cypher.internal.executionplan.ExecutionPlanImpl$$anonfun$6.apply(ExecutionPlanImpl.scala:125)
~[neo4j-c$  
at
org.neo4j.cypher.internal.executionplan.ExecutionPlanImpl.execute(ExecutionPlanImpl.scala:33)
~[neo4j-cypher-1.9-$  
at org.neo4j.cypher.ExecutionEngine.execute(ExecutionEngine.scala:59)
~[neo4j-cypher-1.9-SNAPSHOT.jar:1.9-SNAPSHOT]  
at org.neo4j.cypher.ExecutionEngine.execute(ExecutionEngine.scala:63)
~[neo4j-cypher-1.9-SNAPSHOT.jar:1.9-SNAPSHOT]  
at
org.neo4j.cypher.javacompat.ExecutionEngine.execute(ExecutionEngine.java:79)
~[neo4j-cypher-1.9-SNAPSHOT.jar:1.9-
When I change the node properties for which I query to the ones which do not
exist in the database, the query executes with no problem.
  * I tried it out also on virtual Linux Mint installed inside my Windows 7, but I get the same error as on the server.
Could anyone provide a hint what might be wrong?