printf("x is zero.\n");
printf("x is negative.\n");
 printf("x is positive.\n");
7.0
D:
else 
D;
else
printf("x is negative.\n");
3
3
printf("x is zero.\n");
.0;
 也就是按第二种方式理解。如果你写成上面第一种缩进的格式就
在编译器看起来都是一样的。
 那么编译器到底
3
因此
该
很
---
## Page 74
2、写一个函数，参数是整型变量x，功能是打印x的个位和十位。
1. if语句
1、写两个表达式，
习题请点评
了第4节“浮点数"你就知道为什么浮点型不能做精确比较了。
不同平台的浮点数实现有很多不同之处,
上一页
，分别取整型变量x的个位和十位。
，你再把i改成其它值试试，
全国嵌入式人才培训基地
在我的平台上运行这段程序结果为unequal，
起始页
上一级
即使在你的
3.布尔代数
下一页
---
## Page 75
整个表达式的值才为1,
对于a〈b＆& b〈c这个控制表达式，要求"a〈b的值非0"和"b〈c的值非0"这两个条件同时成立 
成两个&号（Ampersand）
我们也可以用逻辑与（Logical AND）运算符表示这两个条件同时成立。逻辑与运算符在C语言中写
以这样：
3.布尔代数 请点评
NOT）运算符，写成一个!号（Exclamation Mark），
假。C语言还提供了逻辑或（Logical OR）运算符，
以1表示真以0表示假（类型是int）
这种表称为真值表（Truth Table）
的结果才为真，有一个条件为假，则逻辑与运算的结果为假，如下表所示：
在第1节“if语句"讲过，a 0)
else
高于,
(x>0αα×<>=3)
if (x>l &αy!=1）{
else
else {
去掉这个多余条件后仍然打印rest OK!，如果本来应该打印rest failed!，去掉这个
if 
printf("Test failed!\n");
printf("Test OK!\n");
printf(
printf("Test OK!\n");
printf("Test failed!\n");
printf(
...
（Z>
3
&&y>=3)
&& y>=3)
("Test OK!\n");
3
OK!\n"）;
-.............
全国嵌入式人才培训基地
1
起始页
上一级
这里应该怎么填?
，某种情况下如果本来应该打
4. switch语句
下一页
8
---
## Page 79
例如以下程序根据传入的参数1~7分别打印Monday~Sunday:
default :
case 常量表达式：语句列表
case 常量表达式：
switch (控制表达式){
switch语句可以产生具有多个分支的控制流程。它的格式是:
4.switch语句请点评
上一页
例 4.1. switch语句
语句列表
语句列表
全国嵌入式人才培训基地
第4章分支语句
4.switch语句
---
## Page 80
必须的。使用switch语句要注意几点：
式不等于任何一个常量表达式,
作用是跳出整个switch语句块。
如果传入的参数是2，
3.
2
1．case后面跟表达式的必须是常量表达式，这个值和全局变量的初始值一样必须在编译时计算
要加上break语句，但有时会故意不加break来利用这个特性，例如：
进入case后如果没有遇到break语句就会一直往下执行，
也会被执行到,
常量表达式。
第 2 节“iflelse语句"讲过浮点型不适合做精确比较，所以C语言规定case后面跟的必须是整型
出来。
int main(void)
void print_day(int day)
#include 
case2:
return 0;
print_day(2);
default:
case 7:
case6:
case5:
case4:
case3:
case1:
switch (day){
例4.2.缺break的switch语句
prinf("llegl day number!\n"); 
printf("Sunday\n");
break;
break;
break;
printf("Saturday(n");
break;
printf("Fridayin");
break;
printf("Wednesdayin");
break;
，则从case 2分支开始执行，先是打印相应的信息，
_则从default分支开始执行，通常把default分支写在最后，但不是
。C语言规定各case分支的常量表达式必须互不相同，
后面其它case或default分支的语句
 然后遇到break语句，
 如果控制表达
8
它日
---
## Page 81
3.布尔代数
化，使它比等价的if/else语句所生成的指令效率更高。
但是一方面用switch语句会使代码更清晰，
switch语句不是必不可缺的，
一页
int main(void)
void print _day(int day)
#include 
return 0;
print_day(2);
default:
case
case
case
case 1:
switch (day) {
ase
break;
 printf("llegal day number!\n"); 
break;
printf("Weekend\n");
printf("Weekdayin");
67
reak;-
显然可以用一组if 
全国嵌入式人才培训基地
另一方面，
起始页
一级
有时候编译器会对switch语句进行整体优
 else if 
else if ... else 
第5章深入理解函数
8
---
## Page 82
3.递归
2.增量式开发
目录
第 5 章 深入理解函数 请点评
4. switch语句
1.return语句
上一页
全国嵌入式人才培训基地
第5章深入理解函数
全国嵌入式人才培训基地
部分I.C语言入门
起始页
上一级
1. return语句
下一页
---
## Page 83
起任何作用。我们可以这样调用这个函数：
改成一个返回布尔值的函数：
为了打印两个字符串就完了，
在第2节“iflelse语句"中我们定义了一个检查奇偶性的函数，如果是奇数就打印xis odd.,
比较，所以写成0.0。
行并返回。
到调用者,
这个函数首先检查参数x是否大于0，
回：
返回值的函数中也可以使用return语句，例如当检查到一个错误时提前结束当前函数的执行并返
之前我们一直在main函数中使用return语句，
1.return语句 请点评
上一页
} else {
int is_even(int x)
void print_logarithm(double x)
#include 
注意，
只有当x大于0时才能求对数，
/* do some other thing */
else
if (x % 2 == 0)
!((x)6ot ‘"J% ST x Jo 60T au.)uTId
if (x <= 0.0))
 do'something */ 
 事实上这个函数并不十分好用，
return 0;
return 1;
，而是为了根据奇偶性的不同分别执行不同的后续动作。我们可以把它
 如果x不大于0就打印错误提示，
第5章深入理解函数
全国嵌入式人才培训基地
在打印了对数结果之后到达函数体的末尾，
1. return语句 
，表达式外面套括号表示改变运算符优先级，在这里不
，现在是时候全面深入地学习一下了。在有返回值的函
 然后提前结束函数的执行返回
自然地结束执
如果是
下一
8
贝
---
## Page 84
有可能的情况分析得不够全面将导致漏掉一些代码路径，例如：
得不正确，也就是逻辑错误，
如果程序在任何情况下都不会去执行它，
每一行代码都是想让程序在某种情况下去执行的，
最
误的不在少数），
件下都执行不到，
在写带有return语句的函数时要小心检查所有的代码路径（Code Path）。有些代码路径在任何条
变量x马上就要被释放了。
在第3节“形参和实参"中讲过，
数的返回值不是左值，或者说函数调用表达式不能做左值，因此下面的赋值语句是非法的：
出，局部变量释放,
计算表达式!(x2)的值，
当ir语句对函数的返回值做判断时，
用return后面的表达式来初始化。例如上面的函数调用相当于这样的过程：
函数的返回值应该这样理解：函数返回一个值相当于定义一个和返回值类型相同的临时变量并
。2这个表达式本来就有0值或非0值，直接把这个值当作布尔值返回就可以了：
有is或if等表示判断的词，这类函数也叫做谓词（Predicate）
返回布尔值的函数是一类非常有用的函数，
值也是按值传递的
后一行printf永远都没机会被执行到，
void foo(int x, int y)
is_even(20)
int is_even(int x)
 else {
printf("x has a different sign from y.\n");
} else if 
，这称为Dead Code，例如把&&和l运算符记混了（据我了解初学者犯这个低级错
′/* do some other thing */
return !(x % 2);
写出如下代码：
，if语句对这个临时变量的值做判断。注意，
..........