Greetings and congrats again for this amazingly well documented library, I'm
happy Twitter made me discover this !
So I decided to dive a little bit into it, and I was in particular interested
in the Starlette DatabaseMiddleware.
I then cloned the related test in Starlette and reworked it using FastAPI
here:
https://github.com/euri10/fastapi/blob/dbmiddleware/tests/test_dbmiddleware.py
so in this test we got:
  * one starlette instance of Starlette `starlette=Starlette()` that makes the very same tests as in the test_database mentionned aboveand
  * one fastapi instance of FastAPI `fastapi=FastAPI()`, whose routes have been adapted by me to take the new "framework" into account (mainly switching to app.get and app.post instead of app.route, making use of pydantic models etc,....)
Each instance is tested separately in a class, namely class
TestStarletteStyle(): and class TestFastAPIStyle():
Obviously TestStarletteStyle passes like in the original file.  
Interestingly if you change `starlette=Starlette()` to `starlette=FastAPI()`
TestStarletteStyle passes also, which makes sense since if I got it correctly
a `fastapi.post` is the same as a `fastapi.route, methods=["POST"]`
However `TestFastAPIStyle` fails at various points, all tests fails but not
all asserts:
  * fails here as while the previous RuntimeError has been raised, the entry has been put in the database, while in the TestStarletteStyle the RuntimeError prevented this, is seems related to the rollback_on_shutdown=True that would not have been taken into account if i understand correctly, but take this with caution I'm brand new to your code and starlette's one.
  * fails here too, and looking at what we got in db (5 entries instead of 2 in the test) it seems also related to a rollback not made.
  * finally fails here too, and we got 6 entries in db instead of 1 tested, same intuition.
So there's seem to be something incorrect with the rollback setting, happy to
dig further but you surely have ideas, if making a PR with my failing branch
is ok let me know