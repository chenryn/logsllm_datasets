(bcontinue,s,Z) ←
AdjustSize(bsuccess,n,s,Z);
return S
4 Prototype Implementation
We now describe our prototype implementation, which
we call Delphinium. We designed Delphinium as an
extensible toolkit that can be used by practitioners to
evaluate and exploit real format oracles.
4.1 Architecture Overview
Figure 3 illustrates the architecture of Delphinium. The
software comprises several components:
Attack orchestrator. This central component is respon-
USENIX Association
29th USENIX Security Symposium    1829
and to navigate limitations of existing SAT/SMT solvers.
Test Harness. For our experiments in §5 we developed
a test harness to implement the Ciphertext Malleator and
Target Interface shim. This test harness implements the
code for mauling and decrypting M∗ locally using a given
malleation string S.
Selecting SAT and SMT solvers. In the course of this
work we evaluated several SMT and SAT solvers opti-
mized for different settings. Seeking the best of a few
worlds, we use Z3 for formula manipulation and Crypto-
MiniSAT as a solving backend, bridged by CNF formula
representations. Refer to the full version of this paper [15]
for discussion and challenges of the solvers we evaluated.
Low-density parity constraints. Our implementation
of model counting requires our tool to incorporate 2t s-
bit distinct parity functions into each solver query. Each
parity constraint comprises an average of n
2 exclusive-
ORs (where n is the maximum length of M∗), resulting in
a complexity increase of tens to hundreds of gates in our
SAT queries. To address this, we adopted an approach
used by several previous model counting works [32, 77]:
using low-density parity functions. Each such function
of these samples k random bits of the input string, with k
centered around log2(n). As a further optimization, we
periodically evaluate the current constraint formula Gi to
determine if any bit of the plaintext has been ﬁxed. We
omit ﬁxed bits from the input to the parity functions, and
reduce both n and k accordingly.
Implementing AdjustSize. Because SAT/SMT queries
are computationally expensive, we evaluate a few strate-
gies for implementing AdjustSize which minimize time
spent solving. We omit discussion of these strategies for
brevity; refer to the full version of this paper [15].
Describing malleation. To avoid making users re-
implement basic functionality, Delphinium provides
built-in support for several malleation functions. These
include simple stream ciphers, stream ciphers that sup-
port truncation (from either the left or the right side),
and CBC mode encryption. The design of these mal-
leation functions required substantial extensions to the
Delphinium framework.
4.2.1
Implementing Malleation Functions
for
Support
truncation
Truncation.
requires
Delphinium to support plaintexts of variable length.
This functionality is not natively provided by the bitvec-
tor interfaces used in most solvers. We therefore modify
the solver values to encode message length in addition to
Figure 3: Architecture of Delphinium.
sible for executing the core algorithms of the attack, keep-
ing state, and initiating queries to both the decryption
oracle and SMT/SAT solver. It takes the target ciphertext
C∗ and a description of the functions F and Maulplain as
well as the attack parameters t,δ as input, and outputs
the recovered plaintext.
SMT/SAT solver. Our implementation supports multi-
ple SMT solver frameworks (STP [1] and Z3 [49]) via a
custom compatibility layer that we developed for our tool.
To improve performance, the orchestrator may launch
multiple parallel instances of this solver.
In addition to these core components, the system in-
corporates two user-supplied modules, which can be cus-
tomized for a speciﬁc target:
Ciphertext malleator. This module provides a work-
ing implementation of the malleation function MaulΠ
ciph.
We realize this module as a Python program, but it can
be implemented as any executable compatible with the
expected interface.8
Target interface (shim). This module is responsible for
formatting and transmitting decryption queries to the tar-
get system. It is designed as a user-supplied module in
recognition of the fact that this portion will need to be
customized for speciﬁc target systems and communica-
tion channels.
As part of our prototype implementation, we provide
working examples for each of these modules, as well as
a test harness to evaluate attacks locally.
Implementation Details
4.2
Realizing our algorithms in a practical tool required us
to solve a number of challenging engineering problems
8The interface requires input of a ciphertext and a malleation string,
with output the mauled ciphertext.
1830    29th USENIX Security Symposium
USENIX Association
SMT/SAT solverAttack OrchestratorTarget interface(shim)Target systemCiphertextmalleatororaclequeriesresponsesAttack toolingtarget ciphertext,functions,paramsplaintextCompatibility layercontent. This necessitates changes to the interface for
F. We accomplish this by treating the ﬁrst log2(n) bits
of each bitvector as a length ﬁeld specifying how long
the message is and by having every implementation of F
decode this value prior to evaluating the plaintext. To
properly capture truncation off either end of a message,
the malleation bitvector is extended by 2˙log2(n) so the
lowest order log2(n) bits of the malleation bitvector
specify how many bits should be truncated off the low
order bits of the plaintext and the next log2(n) bits
specify what should be truncated from high order bits
of the message. For ease of implementation, in some
schemes the n bits following the truncation describe
the length ﬁeld of the plaintext. This allows for easily
expressing the exclusive-OR portion of our malleation
without bit-shifting and allows encoding extension.
Some schemes, such as stream ciphers, only enable
truncation off one side of the message, and so in this
case we add a constraint to the formula which disallows
truncation off the low order bits of a message. This is
because trunction off the high order bits would imply
a misalignment of the ciphertext with the keystream,
causing decryption to produce effectively randomized
plaintext.
Truncation for Block Cipher Modes. In block cipher
modes such as CTR, CFB, and OFB, an attacker also
has the ability to increment the nonce and truncate off
blocks of ciphertext.9 To capture this capability, in the
malleation function we additionally constrain the mal-
leation string to express truncation off the high order bits
of a message (earlier blocks of ciphertext), provided the
number of bits being truncated is a multiple of the block
size.
CBC Mode. In contrast with stream ciphers, Maul
ΠCBC
is not equal to Maul
plain is sig-
niﬁcantly more complex. In CBC mode, decryption of
a ciphertext block Ci is deﬁned as Pi = Deck(Ci)⊕Ci−1
where Ci−1 denotes the previous ciphertext block. Since
the block Ci is given directly to a block cipher, any imple-
mentation must account for the the fact that modiﬁcation
of the block Ci creates an unpredictable effect on the
output Pi, effectively randomizing it via the block cipher.
For a solver to reason over such an effect on the plain-
text output, we would need to include constraint clauses
corresponding to encryption and decryption, i.e. boolean
operations implementing symmetric schemes like AES.
To avoid this signiﬁcant overhead, we instead modify
ΠCBC
plain to output two abstract bitvec-
the interface of Maul
and moreover Maul
ΠCBC
ciph
ΠCBC
plain
9This is not necessarily possible when dealing with other stream
ciphers, due to the keystream being misaligned with the ciphertext.
tors (M, Mask). Mask represents a mask string: any bit
j where Mask[ j] = 1 is viewed as a wildcard in the mes-
sage vector M. When Mask[ j] = 0, the value of the out-
put message is equal to M[ j] at that position, and when
Mask[i] = 1 the value at position M[ j] must be viewed
as unconstrained. This requires that we modify F to take
(M, Mask) as input. The modiﬁed F is able to produce a
third value in addition to true and false. This new output
value indicates that the format check cannot assign a def-
inite true/false value on this input, due to the uncertainty
created by the unconstrained bits.10 Realizing this for-
mulation requires only minor implementation changes to
our core algorithms.
Exclusive-OR and Truncation for CBC. With CBC
mode decryption, manipulating a preceding ciphertext
block Ci−1 produces a predictable exclusive-OR in the
plaintext block Pi. A message that has been encrypted
with a block cipher can also be truncated, provided that
truncation is done in multiples of the block size. There-
fore, we deﬁne malleability for CBC to capture (1) block-
wise truncation (from either the left or right side of the
ciphertext) and (2) exclusive-OR, where exclusive-OR at
index i in one block produces the corresponding bit-ﬂip
at index i in the next block of decrypted ciphertext.
Supporting Extension. For encryption schemes that al-
low truncation off the beginning of a message, an attacker
may also be able to ﬁll in the truncated portion with ar-
bitrary ciphertext, even if this ciphertext may decrypt
to plaintext unknown to them. If the corresponding por-
tion of the plaintext is not examined by the format check
function, the attacker can derive information from such
queries (if the portion is checked, the attacker can only
learn the result of the check over random bits by nature of
ciphers). Thus, we create an additional initial constraint
for this special case, which allows extension to the ci-
phertext, limited to where the corresponding plaintext is
not examined by the format function.
4.3 Software
Our prototype implementation of Delphinium comprises
roughly 4.2 kLOC of Python. This includes the attack
orchestrator, example format check implementations, the
test harness, and our generic solver Python API which
allows for modular swapping of backing SMT solvers,
with implementations for Z3 and STP provided. In pur-
suing this prototype, we submitted various patches to the
10In practice, we implement the output of F as a bitvector of length
2, and modify our algorithms to use 00 and 01 in place of 0 and 1,
respectively.
USENIX Association
29th USENIX Security Symposium    1831
underlying theory solvers that have since been included
in the upstream software projects.
4.4 Extensions
In general, arbitrary functions on ﬁxed-size values can be
converted into boolean circuits which SMT solvers can
reason over. Existing work in MPC develops compilers
from DSLs or a subset of C to boolean circuits which
could be used to input arbitrary check format functions
easily [34, 53]. Experimenting with these, we ﬁnd that
the circuit representations are very large and thus have
high runtime overhead when used as constraints. It is
possible that circuit synthesis algorithms designed to
decrease circuit size (used for applications such as FPGA
synthesis) or other logic optimizers could reduce circuit
complexity, but we leave exploring this to future work.
We additionally provide a translation tool from the out-
put format of CMBC-GC [34] to Python (entirely com-
prised of circuit operations) to enable use of the Python
front-end to Delphinium.
5 Experiments
5.1 Experimental Setup
To evaluate the performance of Delphinium, we tested
our implementation on several multi-core servers using
the most up-to-date builds of Z3 (4.8.4) and CryptoMin-
iSAT (5.6.8). The bulk of our testing was conducted using
Amazon EC2, using compute-optimized c5d.18xlarge
instances with 72 virtual cores and 144GB of RAM.11
Several additional tests were run a 72-core Intel Xeon E5
CPU with 500GB of memory running on Ubuntu 16.04,
and a 96-core Intel Xeon E7 CPU with 1TB of memory
running Ubuntu 18.04. We refer to these machines as
AWS, E5 and E7 in the sections below.
Data collection. For each experimental run, we collected
statistics including the total number of decryption oracle
queries performed; the wall-clock time required to con-
struct each query; the number of plaintext bits recovered
following each query; and the value of s used to con-
struct a given malleation string. We also recorded each
malleation string S produced by our attack, which allows
us to “replay” any transcript after the fact. The total num-
ber of queries required to complete an attack provides
the clearest signal of attack progress, and we use that
as the primary metric for evaluation. However, in some
11We also mounted 900GB of ephemeral EC2 storage to each in-
stance as a temporary ﬁlesystem to save CNF ﬁles during operation.
cases we evaluate partial attacks using the ApproxMC ap-
proximate model counting tool [65]. This tool provides
us with an estimate for the total number of remaining
candidates for M∗ at every phase of a given attack, and
thus allows evaluation of partial attack transcripts.
Selecting attack parameters. The adjustable parame-
ters in FastSample include t, the number of counting
trials, δ, which determines the fraction of trials that must
succeed, and the length of the parity constraints used to
sample. We ran a number of experiments to determine op-
timal values for these parameters across the format func-
tions PKCS7 and a bitwise format function deﬁned in
§5.2. Empirically, δ = 0.5, 2 (cid:54) t (cid:54) 5, and parity functions
of logarthmic length are suitable for our purposes. Ex-
periments varying t and comparing parity hash function
lengths can be found in the full version of this paper [15].
These tests were performed on AWS.
5.2 Experiments with Stream Ciphers
Because the malleation function for stream ciphers is
relatively simple (consisting simply of bitwise exclusive-
OR), we initiated our experiments with these ciphers.
Bytewise Encryption Padding. The PKCS #7 encryp-
tion standard (RFC 2315) [44] deﬁnes a padding scheme
for use with block cipher modes of operation. This