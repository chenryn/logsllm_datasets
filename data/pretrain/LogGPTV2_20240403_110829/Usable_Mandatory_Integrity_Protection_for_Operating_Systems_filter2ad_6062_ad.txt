### Experimental Setup and Attacks

In our experiments, we utilize the NetCat tool to provide an interactive root shell for the attacker. We execute NetCat in "listen" mode on the test machine with root privileges. When the attacker connects to the listening port, NetCat spawns a shell process that takes input from the attacker and directs output back to them. From this root shell, we perform three types of attacks and compare the outcomes with and without our protection system enabled.

#### 1. Installing a Rootkit
Rootkits can operate at two different levels:
- **User-mode rootkits** manipulate user-level operating system elements by altering existing binary executables or libraries.
- **Kernel-mode rootkits** manipulate the kernel of the operating system by loading a malicious kernel module or modifying the running kernel's memory image in the file system (e.g., /dev/kmem).

To determine if the system has been compromised after installing a rootkit, we use two methods:
1. **Functional Testing**: Attempt to use the rootkit and verify its successful installation.
2. **Hash Comparison**: Calculate hash values for all files (content, permissions, and last modified time) in the local file system before and after installing the rootkit. This is done by rebooting the machine with an external operating system (e.g., from a CD) and mounting the local file system to ensure the integrity of the running kernel and the programs used for the calculation.

We tested two well-known rootkits:

- **Adore-ng**: A kernel-mode rootkit for Linux Kernel 2.2/2.4/2.6. It provides features such as local root access, file hiding, process hiding, socket hiding, and syslog filtering. Adore-ng can also replace an existing kernel module during boot to activate itself. Without our protection system, we successfully installed and activated Adore-ng. With the protection system enabled, attempts to load the kernel module and replace existing modules were denied with an "Operation not permitted" error. The system remained clean, as confirmed by the hash comparison.

- **Linux Rootkit Family (LRK)**: A user-mode rootkit that replaces existing system programs and introduces new ones to build a backdoor, hide the attacker, and provide other attacking tools. Without protection, we successfully installed a trojaned SSH daemon. With protection, the installation failed, and the system remained clean.

#### 2. Stealing the Shadow File
Without our protection system, we could steal the `/etc/shadow` file by sending it as an email attachment using the command `mutt -a /etc/shadow PI:EMAIL < /dev/null`. With the protection system enabled, the request to read the shadow file was denied, resulting in an error: `/etc/shadow: unable to attach file`.

#### 3. Altering User’s Web Page Files
Another common attack is to alter web files after gaining access to a web server. In our experiment, we placed the user’s web files in a subdirectory of the user’s home directory (`/home/Alice/www/`). This directory and all files within it were set to be non-writable by the world. With the protection system enabled, we could not modify any files in the `/home/Alice/www/` directory, nor create new files there. Our module effectively prevented low-integrity processes from changing protected files.

### Performance Evaluation

We conducted benchmarking tests to measure the performance overhead introduced by our protection system. We used the Lmbench 3 and Unixbench 4.1 benchmark suites to evaluate the impact on various process, file, and socket low-level operations.

The test environment consisted of a PC configured with RedHat Linux Fedora Core 5, running on an Intel Pentium M processor at 1400Hz, with a 120 GB hard drive and 1GB of memory. Each test was performed with two kernel configurations:
- **Base Kernel Configuration**: An unmodified Linux 2.6.11 kernel.
- **Enforcing Configuration**: A Linux 2.6.11 kernel with our protection system loaded as a kernel module.

The test results, shown in Figures 4 and 5, indicate that the performance overhead is generally small (≤ 5%). Our module's performance is significantly better than that of SELinux, as reported in [14].

### Related Work

In Section 3.7, we compared UMIP with Biba [4] and LOMAC [10]. Another well-known integrity model is the Clark-Wilson model [7], which divides data items into constrained data items (CDIs) and unconstrained data items (UDIs). CDIs have high integrity and can only be changed by certified transformation procedures (TPs). The Clark-Wilson model requires that each TP lists the CDIs it is certified to access. PACL [23] also uses access control lists to limit program access to certain files.

While these approaches are useful, they often rely on static policies based on user IDs and running programs, without considering the history of actions. UMIP maintains dynamic integrity levels for subjects and objects, making it fundamentally different from previous work. Our goal is to preserve system integrity when software running on the system is buggy and there are network-based attackers. Other related systems include SELinux [16], systrace [17], LIDS [13], securelevel [11], and AppArmor [8, 1]. These systems, while flexible and powerful, require extensive expertise to configure and focus more on mechanisms rather than providing a policy-driven approach.

### Benchmark Results

**Unixbench 4.1 Measurements:**
| Benchmark          | Base    | Enforcing Overhead (%) | SELinux (%) |
|--------------------|---------|------------------------|-------------|
| Dhrystone          | 335.8   | 334.2                  | 0.5         | 5           |
| Double-Precision   | 211.9   | 211.6                  | 0.1         | 5           |
| Execl Throughput   | 616.6   | 608.3                  | 1           | 10          |
| File Copy 1K       | 474.0   | 454.2                  | 4           | 2           |
| File Copy 256B     | 364.0   | 344.1                  | 5           | 16          |
| File Copy 4K       | 507.5   | 490.4                  | 3           | 2           |
| Pipe Throughput    | 272.6   | 269.6                  | 1           | 4           |
| Process Creation   | 816.9   | 801.2                  | 2           | -           |
| Shell Scripts      | 648.3   | 631.2                  | 0.7         | -           |
| System Call        | 217.9   | 217.4                  | 0.2         | -           |
| Overall            | 446.6   | 435.0                  | 3           | -           |

**Microbenchmark Tests:**
| Microbenchmark                | Base    | Enforcing Overhead (%) | SELinux (%) |
|-------------------------------|---------|------------------------|-------------|
| syscall                        | 335.8   | 334.2                  | 0.5         | 5           |
| read                          | 211.9   | 211.6                  | 0.1         | 5           |
| write                         | 616.6   | 608.3                  | 1           | 10          |
| stat                          | 474.0   | 454.2                  | 4           | 2           |
| fstat                         | 364.0   | 344.1                  | 5           | 16          |
| open/close                    | 507.5   | 490.4                  | 3           | 2           |
| select on 500 fd’s            | 272.6   | 269.6                  | 1           | 4           |
| select on 500 tcp fd’s        | 816.9   | 801.2                  | 2           | -           |
| signal handler installation    | 648.3   | 631.2                  | 0.7         | -           |
| signal handler overhead        | 217.9   | 217.4                  | 0.2         | -           |
| protection fault               | 446.6   | 435.0                  | 3           | -           |
| pipe latency                   | -       | -                      | -           | -           |
| pipe bandwidth                 | -       | -                      | -           | -           |
| AF UNIX sock stream latency    | -       | -                      | -           | -           |
| AF UNIX sock stream bandwidth  | -       | -                      | -           | -           |
| fork+exit                     | -       | -                      | -           | -           |
| fork+execve                   | -       | -                      | -           | -           |
| for+/bin/sh-c                 | -       | -                      | -           | -           |

This optimized text provides a clearer, more structured, and professional presentation of the experimental setup, attacks, performance evaluation, and related work.