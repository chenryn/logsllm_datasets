围绕这些角色的期望的讨论揭示了这样一个事实，即许多 SWE
对这些运维团队的同事并不同情。对于许多软件工程师，运维有点像黑盒子，我们需要改变这种看法。嵌入式模型有助于确保
SWE 了解大规模运维服务需要什么，稍后，随着我们接受共享的轮值，我们将为
SWE 留出一些职能以获得更多同情。但是，我们并不总是具备影响 SWE
团队以更改体系结构以更加稳定的可信度。部分问题在于，SWE、SRO 和 AppOps
在构建分布式系统时，不会有算法、并发性、可扩展性和效率方面的共同语言。SRO
和 AppOps
中有几个工程师具备这些知识，但很明显，我们需要额外的人员，他们更像软件工程师，也了解运维，从而帮助实现这一过渡。作为第一步，我们积极招募和聘用了几位在运维和基础设施方面具有丰富经验的技术领导者，优先录用那些除了技术敏锐性外，还表现出强烈文化契合力的候选人。这些新员工除了了解底层系统和构建分布式服务外，还需要算法和实用的编码技能。我们也渴望支持性沟通和影响技巧。我们成功地找到了这种类型的工程师，并将它们添加到
SRO 和 AppOps 中。
改变对 SRO 和 AppOps 的期望，这个尝试非常有挑战性。在 SRE 和 AppOps
建立时一直在 Facebook 的工程师希望这些团队只*为*SWE
团队执行消防和运营工作。在会议中，在讨论中断期间问题的补救和稳定性所有权时听到的一个典型评论是："嗯，这就是
AppOps 的工作。作为一个 SWE，我不应该做这些事。"尽管有些 SWE
团队具有强烈的稳定归属文化，并确实负责故障修复或致力于解决运维问题，但许多人没有这样做。我们需要改变对运营团队工作的期望，我们需要
SWE 掌握其稳定性和在生产中的运维问题。
除了网络基础知识、系统内部和大规模系统设计之外，我们改变招聘实践，将更多精力放在软件工程技能上是不够的。为了强调这个新的期望，我们需要重新命名。于是我们决定从"AppOps"这一称呼中拿掉"Ops"一词，并最终把他们培养成为生产工程。
从名称中删除"Ops"有两个主要结果：
-   它向公司其他成员传达，我们是一个工程团队，构建软件来解决运营问题，而不仅仅是传统的系统运维人员。
-   它有助于颠覆 SWE 只能由其他操作团队维护其服务的概念。
在拥有稳定性和业务问题方面，我们仍有一个主要障碍需要克服。随着更多 SWE
和现在生产工程师致力于扩展服务，SRO
在服务故障期间继续成担任运维支持，并全天候响应警报。SRO
开始构建一个自动化框架， 我们命名为 FBAR【**F**ace**B**ook **A**uto
**R**emediation】解决了在生产中运行服务时的主要难点之一：移除发生故障的服务器并用健康的替换它们。SRO
继续增长，而该系统成熟时，未来将这一运维任务移交给由 PE 和 SWE
编写的自动化工具。
经过几年的 PE 团队建设，也雇佣了更多
SRO，我们的基础架构复杂性增长得如此之大，以至于我们的集中式 SRO
团队不再容易理解每个服务是如何工作的。他们响应故障的速度开始迟缓，甚至
SRO
开始担心他们可能不是解决老问题，而是可能导致新问题。我们意识到我们需要解散
SRO 团队，并将完整的 24x7 的运维所有权 交给 PE 和 SWE 团队。SRO
在接下来的 18 个月中与 PE 和 SE 一起编写在 FBAR
上运行的代码，以处理许多需要 SRO 响应的服务器问题。当我们的 PE 与 SWE
配对成功时，他们可以共同担当相关系统的轮值责任。当 SWE 不能与 PE
合作时，他们就独立负责相关系统的轮值。在这 18 个月结束时，集中的 SRO
团队被解散，其成员转移到 PE 团队。从 SRE 和 AppOps
到彻底的生产工程师模式 的过渡大约用了四年时间。 
**大卫：**让我们来谈谈结构。某些 SRE 模型有这样一种概念，即软件团队在
SWE 完成一定量的工作后才开始获得 SRE。SRE
来自不完全独立的组，不属于产品组或服务组，他们属于独立的组织。 你如何看待围绕生产工程师的组织？生产工程师与更大的组织有何关系？
**佩德罗：**我们的模型借鉴了一些公司的独立组织结构以及某些 SRE
和运营团队的嵌入性质，他们向产品组或业务单位报告。我们有一个*集中的汇报*结构和*分散的座位*结构。
运维的功能需要确保它在所有工程职能中平稳运行。有时，这可能受到向最高层高管（例如，首席执行官）报告的人员的相互竞争的优先事项的阻碍。在许多公司中，最高级别的运营主管（运维主管）通常希望向
CEO
报告，我相信这会导致的问题比解决的更多。我认为运维主管应该向最资深的软件工程主管（工程主管）报告。这实际上使运维主管成为其他软件工程组的对等方，而不是工程主管的对等方。这也使得工程主管负责运维的成功。从绩效评估的角度来说，如果运维团队不成功，则工程主管不会成功。在我看来，这解决了"开发与运维"的很多对立面，因为
Ops 现在是 Dev 的一部分。
 我认识到，有很多大公司已经分散了他们的运维团队，转而各自向其业务单位的负责人汇报。我确信在某些情况下，这行得通，但很难使工作好。我中看到的更多情况是，业务单位的负责人迫使运维团队做出承诺，而在需要处理分歧时，问题的上报路径非常模糊。
因此，为了防止这些不稳定因素，我们保留了集中报告结构，原因如下：
灵活性
:   我们的生产工程师可以处理硬件设计、UI、后端软件以及两者之间的一切。例如，一个生产工程团队设计并构建了用于无线移动电话测试的
    Farady
    网架。我们开发了一个带有移动设备的专用机架，工程师可以在各种类型的移动硬件上运行他们的软件，并进行设备测试。集中式报告结构使我们能够灵活地设定自己的目标，并决定我们"应该做什么"的工作，而不是被特定业务单位领导告知需要完成哪些工作。从事
    PE 工作的人员编制与更广泛的工程人员编制分开管理，因此 PE
    领导层可以确保这项工作不会（由可能有着不同看法的业务主管）重新指定优先级。
动机
:   PE
    经理能够根据他们试图解决的问题来激励其团队完成工作，而不是专注于发布产品或服务。评估生产工程师有一个定性和定量方面，而激励生产工程中个人的某些因素不一定是激励软件工程师的因素。PE
    管理团队能够指导人们面对不断变动的环境，让有运维意识的人真正擅长于在需要时解决问题，并在需要关注软件工程问题时解决它们。
    我发现，有些人像我一样，会跑向一个问题，而不是离开。我很确定我选择不走纯软件路线的原因之一是我喜欢环境的变动。我发现，即使喜欢
    PE
    型工作的人可能会抱怨环境的切换，但他们实际上喜欢它。还有推动他们的还有一些自豪感，就是当他们最终发现在系统中的一个小细节，能够疏通问题，恢复服务，允许每个人恢复平静，并回到工作。我一直发现，雇佣和管理
    PE
    的最佳方式是找出什么让他们对这类工作感到兴奋，并雇佣能够理解其个性的这一方面的经理。过去执行相同（或类似）角色通常会增加这些管理者成功激励他们的可能性。相反，我发现，许多真正只想思考算法和编写纯软件的管理者面临着如何管理和激励
    PE 的挑战。
具有轻微紧张感的共同责任
:   我们聘请外部软件工程师，这些工程师可能来自传统的开发到 QA
    到运营模型，并且认为操作应该执行软件工程师不想做的事情。独立的组织结构为生产工程领导团队在操作稳定性和功能之间创建缓冲。SWE
    和 PE
    团队需要联合起来，构建稳定、可靠、安全、高效且功能丰富的服务。如果软件工程经理和生产工程经理有分歧，我们需要确保他们共同努力解决问题。软件工程经理不能对
    PE 团队说："你应该为我完成所有运维工作。"生产工程经理也不能对 SWE