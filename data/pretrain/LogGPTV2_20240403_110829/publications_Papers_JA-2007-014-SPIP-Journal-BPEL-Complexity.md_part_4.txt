replace the flow element with a switch element with two outgoing transitions, where
each outgoing transition has a flow element with 2 outgoing transitions. The control-
flow complexity would drop from 24 (i.e., 4!) to 4 (i.e., 2*2!). Of course making this
reengineering undertaking would depend on the business process under analysis.
6 Related work
While a significant amount of research on the complexity of software programs has
been done in the area of software engineering, the work found in the literature on
complexity analysis for Web processes and workflows is almost inexistent. Research
in software engineering has produced various measurements for software. Among
others are lines-of-code (Park 1992), Halstead’s measure (Halstead 1977), McCabe’s
measure (McCabe 1977), the COCOMO model (Boehm 1981) and the Function-Point
method (Garmus and Herron 2000). There is a vast literature on software metrics
which represents the result of the measurement of the development, operation and
maintenance of software in order to supply meaningful and timely management infor-
mation. Zuse (Zuse 1997) has found hundreds of different software metrics proposed
and described for software measurement.
The most important research on complexity analysis for Web processes and work-
flows can be found in (Reijers and Vanderfeesten 2004; Cardoso 2005; Cardoso 2005;
Cardoso 2005; Cardoso 2005). In (Cardoso 2005; Cardoso 2005; Cardoso 2005; Car-
doso 2005), a control-flow metric is presented to analyze the complexity of tri-logic
workflows (Cardoso and Cravo 2006). The metric is based on the idea of counting the
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
number of new states generated from the introduction of control-flow patterns, such as
XOR-splits, OR-Splits, and AND-splits in a process. In (Cardoso 2005) the impor-
tance of analyzing the complexity of processes that model team works, communication
and collaboration to accomplish significant work and projects is studied. Workflow
management systems are a specific type of systems that can be used to capture col-
laboration and group works processes and thus supports the creation of teamwork and
enable collaboration. In some cases, collaboration and group work processes can be-
come highly complex. Therefore, complexity analysis is important. In (Cardoso 2005)
a study is made to evaluate the control-flow complexity measure in terms of proper-
ties. Weyuker’s properties must be satisfied by any complexity measure to qualify as a
good and comprehensive one. In (Cardoso 2005) it is argued that a control-flow met-
ric alone cannot capture the full complexity of a process. Therefore, an important
metric that should also be investigated is the data-flow complexity. This contribution
raises a set of questions concerning the development of a data-flow complexity metric
for Web processes and proposes solutions to some of the challenges. In (Reijers and
Vanderfeesten 2004), Reijers and Vanderfeesten propose a cohesion and coupling
metric developed to analyze workflows. While their work does not take the viewpoint
of complexity analysis, it can be easily reformulated to make cohesion and coupling a
specific complexity perspective.
7 Future work
In order to empirically validate the complexity metrics that we have described, ex-
periment need to be carried out. An empirical study is an experiment that compares
what we believe to what we observe. Such an experiment will play a fundamental role
in our work. Zelkowitz and Wallace (1998) stress the importance of using experimen-
tal models for validating metrics. The authors suggest experimentation as a crucial
part of the evaluation of new metrics. Validation models mainly deal with data collec-
tion, experimentation, and data analysis. The information gathered from observation is
analyzed and the results are used in determining the validity of a new metric. In our
case, an experiment needs to involve several roles, such as business process managers,
business analysts, and process implementers. The data collected from the empirical
experiment can then be statistically analyzed to determine the existence, or not, of a
correlation between the complexity metrics we propose and the ratings of our subjects.
Another important issue that needs to be investigated and answered is what are both
the meaning of a given complexity metric (for example, what is the significance of the
control-flow complexity of 16) and the precise number to use as a complexity limit in
a process development. This answer will be given from empirical results only when
organizations have successfully implemented complexity limits as part of their process
development projects. For example, when using McCabe complexity metrics (McCabe
1976), the original limit of 10 indicates a simple program, without much risk, a com-
plexity metric between 11 and 20 designates a more complex program with moderate
risk, a metric between 21 and 50 denote a complex program with high risk. Finally, a
complexity metric greater than 50 denotes an untestable program with a very high risk.
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
We expect that limits for control-flow complexity will be obtained and set in the same
way, using empirical and practical results from research and from real world imple-
mentation.
In order to follow a bottom-up approach to develop a generic metric for process
modeling languages, it is necessary to analyze the CFC complexity of additional lan-
guages. Only once a reasonable set of business process languages have been analyzed
it is then possible to devise general/generic metrics that can be suitably applied to the
business process languages analyzed. The most well-known languages that still need
to be studied include WSFL (Leymann 2001), BPML (BPML 2004), YAWL (Aalst
and Hofstede 2003), and BPMN (BPMN 2005).
8 Conclusions
The complexity of BPEL processes is intuitively connected to effects such as flexibil-
ity, understandability, usability, testability, reliability, and maintainability. Therefore,
it is important to develop measures to analyze the complexity of processes so that they
can be reengineered to reduce their complexity. Since flexibility is the ease with which
a process can be modified for use in applications or environments other than those for
which it was specifically designed, processes with a low complexity tend to be more
flexible.
Our work presents an approach to carrying out BPEL process complexity analysis
using measurement strategies. We have discussed the issues related to the develop-
ment of a control-flow complexity metric. The metrics introduced are worth exploring
further, since Web processes and Web services are becoming a reality in e-commerce
and e-business activities.
In this paper we propose a control-flow complexity metric to be used during the de-
sign of processes. This metric is a design-time measurement. They can be used to
evaluate the difficulty of producing a BPEL process design before implementation.
When control-flow complexity analysis becomes part of the process development
cycle, it has a considerable influence on the design phase of development, leading to
further optimized processes. Complexity analysis can also be used in deciding whether
to maintain or redesign a process. As known from software engineering, it is a fact that
it is cost-effective to fix a defect earlier in the design lifecycle than later. To enable
this, we have introduced the first steps to carrying out process complexity analysis.
References
Aalst, W. M. P. v. d. (1998). "The Application of Petri Nets to Workflow Manage-
ment." The Journal of Circuits, Systems and Computers 8(1): 21-66.
Aalst, W. M. P. v. d., A. P. Barros, et al. (2000). Advanced Workflow Patterns. Sev-
enth IFCIS International Conference on Cooperative Information Systems.
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
Aalst, W. M. P. v. d. and A. H. M. t. Hofstede (2003). YAWL: Yet Another Work-
flow Language (Revised Version). Brisbane, Queensland University of
Technology2003.
Aalst, W. M. P. v. d., A. H. M. t. Hofstede, et al. (2003). "Workflow Patterns." Dis-
tributed and Parallel Databases 14(3): 5-51.
Anyanwu, K., A. Sheth, et al. (2003). "Healthcare Enterprise Process Development
and Integration." Journal of Research and Practice in Information Technol-
ogy, Special Issue in Health Knowledge Management 35(2): 83-98.
Boehm, B. (1981). Software Engineering Economics, Prentice Hall.
BPML (2004). Business Process Modeling Language. 2004.
BPMN (2005). Business Process Modeling Notation - http://www.bpmn.org/.
CAPA (1997). Course Approval Process Automation (CAPA). Athens, GA., LSDIS
Lab, Department of Computer Science, University of Georgia.
Cardoso, J. (2005). About the Complexity of Teamwork and Collaboration Processes.
IEEE International Symposium on Applications and the Internet (SAINT
2005), Workshop - Teamware: supporting scalable virtual teams in multi-
organizational settings, Trento, Italy, IEEE Computer Society.
Cardoso, J. (2005). About the Data-Flow Complexity of Web Processes. 6th Interna-
tional Workshop on Business Process Modeling, Development, and Support:
Business Processes and Support Systems: Design for Flexibility, Porto, Por-
tugal.
Cardoso, J. (2005). Control-flow Complexity Measurement of Processes and Weyu-
ker's Properties. 6th International Conference on Enformatika, 26-28, Octo-
ber 2005, Budapest, Hungary, International Academy of Sciences.
Cardoso, J. (2005). Evaluating Workflows and Web Process Complexity. Workflow
Handbook 2005. L. Fischer. Lighthouse Point, FL, USA, Future Strategies
Inc.: 284-290.
Cardoso, J. (2005). Evaluating Workflows and Web Process Complexity. Workflow
Handbook 2005. L. Fischer. Lighthouse Point, FL, USA, Future Strategies
Inc.: 284.
Cardoso, J. and C. Cravo (2006). Verifying the logical termination of workflows (ac-
cepted for publication). 5th Annual Hawaii International Conference on Sta-
tistics, Mathematics and Related Fields, Honolulu, Hawaii, USA.
Cardoso, J., J. Miller, et al. (2004). "Modeling Quality of Service for workflows and
web service processes." Web Semantics: Science, Services and Agents on the
World Wide Web Journal 1(3): 281-308.
Cardoso, J. and A. P. Sheth (2005). Introduction to Semantic Web Services and Web
Process Composition. Semantic Web Process: powering next generation of
processes with Semantics and Web services. J. Cardoso and A. P. Sheth.
Heidelberg, Germany, Springer-Verlag. 3387: 1-13.
Chinnici, R., M. Gudgin, et al. (2003). Web Services Description Language (WSDL)
Version 1.2, W3C Working Draft 24, http://www.w3.org/TR/2003/WD-
wsdl12-20030124/.
Christensen, E., F. Curbera, et al. (2001). W3C Web Services Description Language
(WSDL), http://www.w3.org/TR/wsdl.
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
Curbera, F., W. Nagy, et al. (2001). Web Services: Why and How. Workshop on
Object-Oriented Web Services - OOPSLA 2001, Tampa, Florida, USA.
Curtis, B. (1979). In search of software complexity. Workshop on Qualitative Soft-
ware Models for Reliability, Complexity and Cost, IEEE Computer Society
Press.
Du, W., J. Davis, et al. (1999). Enterprise workflow resource management. Interna-
tional Workshop on Research Issues in Data Engineering, Sydney, Australia.
Ferrara, L., F. Hayden, et al., Eds. (2003). The Networked Supply Chain: Applying
Breakthrough BPM Technology to Meet Relentless Customer Demands, J.
Ross Publishing.
Garmus, D. and D. Herron (2000). Function Point Analysis: Measurement Practices
for Successful Software Projects, Addison Wesley.
Halstead, M. H. (1977). Elements of Software Science, Operating, and Programming
Systems Series. New York, NY, Elsevier.
IEEE (1992). IEEE 610, Standard Glossary of Software Engineering Terminology.
New York, Institute of Electrical and Electronic Engineers.
Jones, T. C. (1986). Programming Productivity. New York, McGraw-Hill.
Lanning, D. L. and T. M. Khoshgoftaar (1994). "Modeling the Relationship Between
Source Code Complexity and Maintenance Difficulty." Computer 27(9): 35-
41.
Leymann, F. (2001). Web Services Flow Language (WSFL 1.0), IBM Corporation.
Li, L. and A. Offutt (1996). Algorithmic analysis of the impact of changes to object-
oriented software. Int'l Conf. Software Maintenance-ICSM (1996), Los
Alamitos, USA, IEEE Computer Society Press.
McCabe, T. (1976). "A Complexity Measure." IEEE Transactions of Software Engi-
neering SE-2(4): 308-320.
McCabe, T. J. (1977). "A Complexity Measure." Transactions on Software Engineer-
ing 13(10): 308-320.
McCabe, T. J. and C. W. Butler (1989). Design Complexity Measurement and Test-
ing. Communications of the ACM. 32: 1415-1425.
McCabe, T. J. and A. H. Watson (1994). "Software Complexity." Crosstalk, Journal
of Defense Software Engineering 7(12): 5-9.
METEOR (2006). METEOR (Managing End-To-End OpeRations) Project Home
Page, LSDIS Lab.
Park, R. E. (1992). Software size measurement: A framework for counting source
statements. Pittsburgh, PA, Software Engineering Institute, Carnegie Mellon
University.
Reijers, H. A. and I. T. P. Vanderfeesten (2004). Cohesion and Coupling Metrics for
Workflow Process Design. BPM 2004 (LNCS 3080). J. Desel, B. Pernici and
M. Weske. Berlin, Heidelberg, Springer-Verlag. LNCS 3080: 290-305.
Russell, N., W. M. P. v. d. Aalst, et al. (2005). Workflow Resource Patterns: Identifi-
cation, Representation and Tool Support. 17th International Conference on
Advanced Information Systems Engineering (CAiSE 2005), Porto, Portugal,
Springer 2005.
Accepted for Publication, Software Process: Improvement and Practice Journal,
Copyright © 2006 John Wiley & Sons, Ltd.
Russell, N., A. H. M. t. Hofstede, et al. (2005). Workflow Data Patterns: Identifica-
tion, Representation and Tool Support. 24th International Conference on
Conceptual Modeling, Klagenfurt, Austria, Springer.
Sheth, A. P., W. v. d. Aalst, et al. (1999). "Processes Driving the Networked Econ-
omy." IEEE Concurrency 7(3): 18-31.
Thatte, S. (2001). XLANG: Web Services for Business Process Design, Microsoft,
Inc.
WS-BEPL (2005). Business Process Execution Language for Web Services,
http://www-128.ibm.com/developerworks/library/specification/ws-bpel/.
XMLSchema (2005). XML Schema, http://www.w3.org/XML/Schema.
Zelkowitz, M. V. and D. R. Wallace (1998). "Experimental Models for Validating
Technology." IEEE Computer 31(5): 23-31.
zur Mühlen, M. (1999). Resource Modeling in Workflow Applications. Workflow
Management Conference, Muenster, Germany.
Zuse, H. (1997). A Framework of Software Measurement. Berlin, Walter de Gruyter
Inc.