# The Startup Problem in Fault-Tolerant Time-Triggered Communication

## Authors
- Wilfried Steiner, Real-Time Systems Group, Vienna University of Technology, Austria
- Hermann Kopetz, Real-Time Systems Group, Vienna University of Technology, Austria

## Abstract
Fault-tolerant time-triggered communication relies on the synchronization of local clocks. The startup problem involves achieving a sufficient degree of synchronization after system power-on. The complexity of this problem depends on the system assumptions, which in this paper are derived from collaborations with the automotive and aeronautic industries. We present a general startup strategy for safety-critical systems, providing an abstract solution to the startup problem. From this abstract view, we derive and analyze a new startup algorithm used in a TTP/C research derivative protocol (LTTP). Additionally, we analyze the FlexRay startup algorithm and discuss its behavior in the presence of simple failures. The analyses were conducted using exhaustive fault simulation with the SAL model checker. Our results show that LTTP can tolerate the arbitrary failure of one node, whereas the FlexRay startup is vulnerable to certain failure modes.

## 1. Introduction
A fault-tolerant system often requires a distributed solution where critical tasks are replicated across multiple nodes to ensure system resilience even if parts of the system fail. A major challenge in such systems is the communication of information between nodes. Shared communication media, such as bus or star topologies, offer an attractive solution by reducing physical connections. However, shared resources introduce mutual exclusion problems, necessitating dedicated communication protocols to guarantee each node's specified bandwidth.

Time-Division Multiple Access (TDMA) protocols, like FlexRay and TTP/C, specify the access pattern of nodes to the shared medium offline, offering low transmission latency and jitter. To establish synchronization, TDMA protocols must solve the startup problem.

Previous work by Claesson et al. [3] and LÃ¶nne [12, 13] has explored strategies and algorithms for the startup problem. These approaches are based on unique message lengths, full-duplex communication links, and unique timeouts. Despite these efforts, none of the existing solutions fully tolerate the arbitrary failure of one node. In our further research [19], we introduced a guardian concept to enhance fault tolerance. This led to three design choices:
- The guardian executes a "semantic filter" to transform semantically faulty messages into syntactically faulty ones.
- Centralized guardians use unidirectional direct connections to receive messages from other channels.
- At least one non-faulty guardian must be powered on before any non-faulty node starts transmitting.

This paper presents a general startup strategy that makes these design choices optional by moving fault-tolerance functionality from the guardian instances to the startup algorithm. We begin by discussing our system assumptions in Section 2, followed by formulating the startup problem in Section 3. Section 4 introduces the general startup strategy, and Section 5 analyzes two specific startup algorithms: a new LTTP startup algorithm and the FlexRay startup algorithm. The paper concludes in Section 6.

## 2. System Model

### 2.1 Physical Structure
The system consists of nodes and replicated channels, implemented as half-duplex connections in bus or star topologies. Guardians, either local at nodes or central at hubs, prevent faulty nodes from accessing the medium. This paper does not cover the construction of guardian instances; a general study of central guardians is available in [14, Chapter 5].

### 2.2 Fault Hypothesis
Each node and each communication channel (with its guardian) forms a fault-containment region (FCR). A node can fail arbitrarily, while a channel/guardian can delay, accelerate, or selectively relay messages. The system must tolerate the permanent loss of any one FCR, adhering to a "single-failure hypothesis." Byzantine failures are considered as SOS failures, and central guardians are equipped with mechanisms to detect and handle such failures.

### 2.3 Minimum Configuration
To ensure correct clock synchronization, a minimum configuration of four nodes and two channels is required. This is necessary to tolerate one arbitrary faulty component and one faulty channel.

### 2.4 Timing Assumptions
We assume bounded propagation delay, bounded clock drift, and bounded processing time for correct nodes and channels. The power-on time for correct nodes/channels is bounded but unknown, making it challenging to distinguish between a crashed and a late component.

### 2.5 Synchronous Operation and Steady State
During synchronous operation, nodes follow a time-triggered communication strategy, dividing time into slots and rounds. Steady state is achieved when the system can tolerate the failure of a component according to the fault hypothesis without needing to re-execute the startup process.

## 3. Problem Specification
A startup algorithm must ensure timely and safe startup:
- **Timely Startup:** Establishes synchronous communication within a known upper bound of time once a minimum configuration is powered on.
- **Safe Startup:** Ensures all correct nodes are synchronized when the startup algorithm terminates, preventing the formation of multiple cliques.

## 4. General Startup Strategy
The general startup strategy, depicted in Figure 1, consists of three phases: integration, coldstart, and sync. After power-on, a node enters the integration phase, where each slot in the communication schedule is assigned to a sending node, and each message carries specific information.

![General Startup Strategy](Figure_1.png)

**Figure 1. General startup strategy**

---

This revised version of the text aims to improve clarity, coherence, and professionalism.