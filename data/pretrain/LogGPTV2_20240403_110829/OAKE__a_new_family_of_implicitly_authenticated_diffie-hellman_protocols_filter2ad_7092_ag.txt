K ^B, and are independent in the random oracle model. For (s,r)OAKE with mutual authentication, ˆB
sends an additional value tB = M ACKm(1) in the second-round, and ˆA sends tA = M ACKm(0) in an
additional third-round. For one-round OAKE with mutual authentication, the player ˆA can additionally
send tA = M ACKm(0) in the ﬁrst-round, and the player ˆB responds back M ACKm(1) in the subsequent
round. In practice, the message authentication code MAC can be instantiated with HMAC [6].
E More Discussions on the Speciﬁcation of (s,r)OAKE
Subgroup test vs. ephemeral DH-exponent leakage. We note that the damage caused by ignoring
the subgroup test of peer’s DH-component (but still with the supergroup G
membership check) can
be much relieved (and even waived), if the ephemeral private values generated within the protocol run
are well-protected. For example, even if an adversary learns some partial information about db + ey by
issuing a small subgroup attack against the honest ˆB (by setting X to be in a small subgroup), it still
cannot derive the value b without compromising the ephemeral value y. Also note that the adversary
actually cannot derive the full value of db + ey by small subgroup attacks, as the DH-exponent y
is independent at random in each session.
In this case, we suggest that embedded subgroup test is
suﬃcient. For presentation simplicity and unity, throughout this paper, it is assumed that t = N
q for
implementations with embedded subgroup test, and t = 1 with explicit subgroup test.
′
Ephemeral private values exposable to adversary. The ephemeral values exposable to adver-
sary, generated by the honest ˆB (resp., ˆA) during the protocol run, are speciﬁed to be: (y; Y ) (resp.,
(x; X)) if ˆB (resp., ˆA) does not pre-compute Abf +cy (resp., Baf +dx), where f = 0 for (s)OAKE and
f = 1 for rOAKE. But, for (s,r)OAKE with oﬄine pre-computation of Af b+cy and Bf a+dx, the values al-
lowed to be exposed are diﬀerent between (s)OAKE and rOAKE. For (s)OAKE, all the values (y; Y; Acy)
(resp., (x; X; Bdx)) can be exposed. But, for rOAKE, the pre-computed value Ab+cy or Ba+dx is not
allowed to be exposed for provable security in the CK-framework. More detailed clariﬁcations are re-
ferred to Appendix G.1.2. Other ephemeral private values, other than (y; Y; Af b+cy) and (x; X; Bf a+dx),
are erased promptly after use. We remark all ephemeral private values, except for the session-key in
case the session is successfully ﬁnished, generated by an honest party within the protocol run are erased
after the session is completed (whether ﬁnished or aborted). For expired sessions, the session-keys are
also erased.
F More Discussions on the Security of (s,r)OAKE vs. HMQV
Assuming all the DH-components generated by all uncorrupted players are not exposed to the at-
tacker prior to the sessions involving them (e.g., all honest players only generate fresh ephemeral DH-
components on the ﬂy, i.e., without pre-computation, in each session), and assuming all the ephemeral
DH-exponents generated during session runs are unexposed to the attacker, the SK-security of HMQV
21
can be based on the CDH assumption, while we do not know how to prove this property with (s,r)OAKE.
This is the only advantage of HMQV over (s,r)OAKE that we can see.
However, as already stressed in [42], security against exposed DH-exponents is deemed to be the
main and prime concern for any robust DHKE, and security against exposed oﬄine pre-computed values
(particularly, the DH-components) is important to both lower-power devices and to high volume servers
[42]. The reason is, as pointed out in [42], many applications in practice will boost protocol performance
by pre-computing and storing values for later use in the protocol. In this case, however, these stored
values are more vulnerable to leakage, particularly when DHKE is deployed in hostile environments
plagued with spyware or virus and in view of that the oﬄine pre-computed DH-components are much
less protected in practice as they are actually public values to be exchanged in plain.
Also, for DHKE protocols running concurrently in settings like the Internet, we suggest it is unrea-
sonable or unrealistic to assume non-precomputation and non-exposure of the public DH-components
for all uncorrupted parties in the system. Note that, whenever there is an uncorrupted player whose
DH-component is exposed prior to the session in which the DH-component is to be used (the attacker
can just set this session as the test-session), the security of HMQV relies on both the GDH assumption
and the KEA assumption in most cases as clariﬁed in Appendix G.
For the above reasons, we suggest that the security advantage of HMQV over (s,r)OAKE in this spe-
cial case is insigniﬁcant in reality. Note that, even in this special case, (s,r)OAKE enjoys other security
advantages: (1) More robust embedded subgroup test supported by oﬄine pre-computability of Af b+cy
and Bf a+dx. (2) Resistance to more powerful secrecy exposure of the additional pre-computed private
values Acy and Bdx for OAKE and sOAKE; (3) Stronger resistance against collision attacks on the un-
derlying hash function h. Further note that, in the case of pre-computed and exposed DH-components,
(s)OAKE is based upon weaker assumptions (i.e., only the GDH assumption) than (H)MQV (that is
based on both the GDH assumption and the KEA assumption) for the most often case of ˆA ̸= ˆB, and
rOAKE totally gets rid of the non-standard KEA assumption.
G Security Analysis of (s,r)OAKE in the CK-Framework
One of main conceptual contributions of the analysis of HMQV in the CK-framework [42] is to cast the
design of HMQV in terms of Hashed Dual challenge-Response (HDR) signatures and Hashed Challenge-
Response (HCR) signatures, which are in turn based on Dual Challenge-Response (DCR) signatures and
eXponential Challenge-Response (XCR) signatures and can be traced back to Schnorr’s identiﬁcation
scheme [61]. We show that (s,r)OAKE all can be casted in terms of HDR signatures. Moreover, the
HDR signatures implied by the (s,r)OAKE protocols, referred to as OAKE-HDR and sOAKE-HDR,
are both online eﬃcient and strongly secure. This provides extra security strength of the underlying
building tools, say SSJOPK and sSSJPOK, used in (s,r)OAKE.
G.1 Casting (s,r)OAKE in Terms of Online Eﬃcient and Strongly Secure HDR
Signatures
Informally speaking, a HDR signature scheme is an interactive signature scheme between two parties in
the public-key model. The two parties generate the same signature, which is actually a hashed value of
the DH-secret shared between the two parties, with the dual roles of signer and challenger: each party
generates the signature with private values of its static secret-key and the secret DH-exponent with
respect to its peer’s DH-component and public-key as the challenges. With a HDR signature, we are
only interested to ensure veriﬁability of the signature by the two intended parties, and thus we make
no assumptions or requirements regarding the transferability or veriﬁability of the signature by a third
party. Roughly speaking, a HDR signature scheme is secure if the signature cannot be generated by
any other parties other than the two intended (honest) parties.
Deﬁnition G.1 ((s,r)OAKE-HDR signature schemes) Let ˆA, ˆB be two parties with public-keys
A = ga, B = gb, respectively. Let m ^A, m ^B be two messages. The (s,r)OAKE-HDR signatures of ˆB on
22
messages (m ^A; m ^B; ˆA; A; ˆB; B; X; Y ), where X = gx, Y = gy are chosen by ˆA, ˆB respectively as the
random challenge and response, x; y ← Z
∗
q , m ^A (resp., m ^B) includes arbitrary (maybe empty) messages
sent to ˆA (resp., ˆB) from ˆB (resp., ˆA), are deﬁned as a vector of values (the signatures of ˆA are deﬁned
straightforwardly): { ˆA; A; m ^A; m ^B; X; Y; HSIGOAKE
(m ^A; m ^B; X; Y ) = HK(Abf +ycX bd+ye)}, where
^A; ^B
OAKE-HDR. f = 0, c = h(m ^A; ˆA; A; Y ), d = h(m ^B; ˆB; B; X) and e = h(X; Y ).
sOAKE-HDR. f = 0, c = d = 1 and e = h(m ^A; m ^B; ˆA; A; ˆB; B; X; Y ).
rOAKE-HDR. f = 1, c = h(m ^A; ˆA; A; Y ), d = h(m ^B; ˆB; B; X) and e = h(X; Y ).
Note that the online eﬃciency of (s,r)OAKE-HDR can be only one exponentiation for each player.
In comparison, each player of HMQV-HDR performs about 1.3 online exponentiations. For presentation
simplicity, in the above HDR signature description we assume the CA in the underlying PKI will check
the membership G \ 1G of registered public-keys, and each player checks the membership G \ 1G of its
peer’s DH-component.
(s,r)OAKE in a nutshell. Actually, the above (s,r)OAKE-HDR can be viewed as a general
structure of the (s,r)OAKE protocols. Speciﬁcally, (s,r)OAKE are instantiated with (s,r)OAKE-HDR
respectively, with the special m ^A and m ^B set to be the empty string. In general, m ^A (resp., m ^B) can
include some values sent to ˆA (resp., ˆB) from ˆB (resp., ˆA), which does not aﬀect the pre-computability
of (s,r)OAKE. In particular, in practice m ^A (resp., m ^B) can include a random nonce generated and sent
by ˆB (resp., ˆA).
In the following, we show the security of (s)OAKE-HDR (resp., rOAKE-HDR), with oﬀ-line pre-
computed DH-exponents, DH-components, and the values Ayc or Bxd (resp., only oﬀ-line pre-computed
DH-exponents, DH-components) that may be potentially exposed to the forger even prior to the session
involving these pre-computed values, on which the security of OAKE and sOAKE in the CK-framework
will be based. In particular, we show that our OAKE-HDR and sOAKE-HDR satisfy a stronger security
deﬁnition (than the deﬁnition given in [42]). As the analysis of (s)OAKE-HDR and rOAKE-HDR
assumes diﬀerent secrecy exposure, we prove the security of them separately.
G.1.1 Analysis of (s)OAKE-HDR
Deﬁnition G.2 (Strong security of HDR signatures (with oﬀ-line pre-computation)) We say
a HDR signature scheme (of ˆB) is strongly secure, if no polynomial-time machine F can win the game
in Figure 2 with non-negligible probability with respect to any uncorrupted party ˆA of public-key A = ga
such that the secret-key a was not chosen by the attacker F.
On the strong security of HDR. The strong security of our deﬁnition for (s)OAKE-HDR lies in
that:
• We assume (y; Y; Acy) are oﬀ-line pre-computed, and the forger can get them prior to the session
run involving them.
This particularly renders stronger capability to the attacker to perform colliding (birthday) attacks
against the hash function h (that is of length |q|=2 for HMQV). To deal with this subtlety, the
actual HMQV implementation needs some changes in practice (to be clariﬁed later).
• In the forging game deﬁned in Figure 2, the successful forgery requires that the whole vector
( ˆA; A; m1; m0; X0; Y0) did not appear in any of the responses of ˆB to F’s queries. The deﬁnition
for the security of HMQV-HCR in [42] only requires that the pair (Y0; m0) did not appear in
responses from the signer. As we shall see below, the HMQV-HDR scheme may not be strongly
secure in general.
OAKE-HDR vs. HMQV-HDR. In [42], the HMQV-HDR (of ˆB) is deﬁned to be {X; Y;
(m ^A; m ^B; X; Y ) = HK((XAd)y+be)}, where d = h(m ^A; X), e = h(m ^B; Y ). For building
DSIGHM QV
^A; ^B
23
1. Forger F is given values B, X0, where B; X0 ∈R G.
2. F is given access to a signing oracle ˆB (of public-key B = gb and secret-key b).
3. Each signature query from F to ˆB consists of the following interactions:
(b) ˆB generates y ∈R Z
(a) F presents ˆB with messages ( ˆZ; Z; m ^Z; m ^B). Here, ˆZ can be any (even corrupted) party
chosen by F, and Z = gz ∈ G \ 1G is the public-key of ˆZ. Note that F may not necessarily
know the corresponding secret-key z of ˆZ.
∗
q and Y = gy, and computes Z cy, where c = h(m ^Z; ˆZ; Z; Y ) for
OAKE-HDR or c = 1 for sOAKE-HDR. Then, ˆB responds with (y; Y = gy; Z cy) to
F (which captures the powerful exposure capability to the forger ), and stores the vector
( ˆZ; Z; m ^Z; m ^B; y; Y; Z cy) as an “incomplete session”. Here, (y; Y; Z cy) can be oﬄine pre-
computed by ˆB, and leaked to F prior to the session involving (y; Y; Z cy).
(c) F presents ˆB with ( ˆZ; Z; m ^Z; m ^B; Y ), and a challenge X.
(d) ˆB checks that X ∈ G \ 1G (if not,
it aborts) and that ( ˆZ; Z; m ^Z; m ^B; Y ) is in one
ˆB then computes r = HK(Z cyX db+ey),
of its incomplete sessions (if not, it ignores).
where d = h(m ^B; ˆB; B; X) and e = h(X; Y ) for OAKE-HDR (resp., d = 1 and e =
(m ^Z; m ^B; ˆZ; Z; ˆB; B; X; Y ) for sOAKE-HDR). ˆB responds ( ˆZ; Z; m ^Z; m ^B; X; Y; r) to F, and
marks the vector ( ˆZ; Z; m ^Z; m ^B; y; Y; Z cy) as a “complete session”, and stores with it the
signature values ( ˆZ; Z; m ^Z; m ^B; X; y; Y; r).
4. F is allowed a polynomial number of adaptive queries to ˆB in arbitrarily interleaved order.
5. F halts with output “fail” or with a guess in the form of a tuple ( ˆA; A; m1; m0; X0; Y0; r0). F’s
a
is
valid HDR-signature
guess is called a successful forgery if the following two conditions hold:
(a) ( ˆA; A; m1; m0; X0; Y0; r0)
the messages
(m1; m0; ˆA; A; ˆB; B; X0; Y0), where ˆA is an uncorrupted player of public-key A = ga,
m1 corresponds to m ^A (that is an arbitrary message sent by the adversary F impersonating
the signer ˆB to the honest player ˆA), and m0 corresponds to m ^B (that is chosen by the
honest player ˆA). Note that the value X0 is the one received by F as input.
( ˆA; A; m1; m0; X0; Y0) did not appear in any one of the responses of ˆB to F’s queries.
(b)
We say F wins the game, if it outputs a successful forgery (w.r.t. any uncorrupted player ˆA).
ˆB on
of
Figure 2: Forgery game for (strongly secure) (s)OAKE-HDR signatures (with oﬄine pre-computation)
HMQV with HMQV-HDR, m ^B (resp., m ^A) is set to be its peer’s identity ˆA (resp., ˆB). The underlying
HMQV-XCR-signature is deﬁned to be X y+be, where e = h(m ^B; Y ). The following are some brief
comparisons between OAKE-HDR and HMQV-HDR:
• One notable advantageous feature of (s,r)OAKE-HDR vs. HMQV-HDR is the online eﬃciency.
Speciﬁcally, the online eﬃciency of (s,r)OAKE-HDR, for each player, can be only one exponenti-
ation. In comparison, each player of HMQV-HDR performs about 1.3 online exponentiations.
• As we shall see, (s)OAKE-HDR is strongly secure in accordance with Deﬁnition G.2. We note that
the HMQV-XCR underlying HMQV-HDR is not strongly secure. For example, to forge a HMQV-
XCR signature (X; Y; (cid:27) = X b+ey) on message m, where e = h(m; Y ), the forger can ﬁrst query
′ 1
the signer with (m; X
2 )
as the XCR signature on m. Note that the triple (X; Y; (cid:27)) did not appear in any one of the
responses from the HMQV-XCR signer ˆB. We note that one way to remedy this vulnerability of
HMQV-XCR is to commit X also to e by deﬁning e = h(m; X; Y ).
′b+ey), and then outputs (X; Y; (cid:27) = (cid:27)
= X 2), gets back (X
; Y; (cid:27)
= X
′
′
′
• The security of (s)OAKE-HDR against uncorrupted players other than the signer itself, with
oﬄine pre-computed (y; Y; Acy) that can be exposable to the adversary even prior to the session
involving (y; Y; Acy), is based on merely the GDH assumption. The security of HMQV-HDR in
this case is based on both the GDH assumption and the non-standard KEA assumption [19], even
if the pre-computed DH-exponent y is not exposable and only the pre-computed DH-component
Y is exposable. Furthermore, as suggested in [42], for robust security of HMQV-HDR with pre-
computed DH-components when the number of messages in the system is large, HMQV-HDR
needs to make the following modiﬁcations : (1) Increase the output length, i.e., l, of the hash
24