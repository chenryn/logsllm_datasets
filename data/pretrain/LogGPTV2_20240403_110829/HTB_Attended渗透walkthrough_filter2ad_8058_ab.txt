按照之前的步骤进行RCE，本地开启http服务，利用vim
RCE下载config文件，等待片刻后即可使用私钥登陆freshness的账号。至此，可获取到user.txt的flag。
## AuthorizedKeysCommand
下面到root部分，这是这个box最精彩的部分，获取user权限的师傅中，只有一半人成功提权。首先先翻一下home目录下的文件。
一个root发给freshness的邮件，附件为用config登录ssh的脚步，也就是上一步让我们成功RCE的脚步。
    attended$ cat dead.letter
    Date: Fri, 29 Jan 2021 04:29:20 +0100 (CET)
    From: root (Cron Daemon)
    To: freshness
    Subject: Cron  /home/freshness/fchecker.py
    Auto-Submitted: auto-generated
    X-Cron-Env: 
    X-Cron-Env: 
    X-Cron-Env: 
    X-Cron-Env: 
    Pseudo-terminal will not be allocated because stdin is not a terminal.
    kex_exchange_identification: Connection closed by remote host
    #!/usr/local/bin/python2.7
    import os,sys
    import subprocess
    import time
    path = '/home/shared/'
    command = '/usr/bin/ssh -l freshness -F %s 127.0.0.1'
    for r, d, fs in os.walk(path):
            for f in fs:
                    cfile = os.path.join(r, f)
                    c = command % cfile
                    #print "running %s" % c
                    p = subprocess.Popen(c,shell=True)
                    time.sleep(0.2)
                    os.unlink(cfile)
另外还找到一个note.txt。
    attended$ cat note.txt
    on attended:
    [ ] enable authkeys command for sshd
    [x] remove source code
    [ ] use nobody
    on attendedgw:
    [x] enable authkeys command for sshd
    [x] remove source code
    [ ] use nobody
    attended$ cat /etc/hosts
    127.0.0.1       localhost
    ::1             localhost
    192.168.23.2    attended.attended.htb attended
    192.168.23.1    attendedgw.attended.htb attendedgw
当前主机名为attended，ip为192.168.23.2，另外发现一主机名为attendedgw，ip为192.168.23.1。根据note.txt的内容，我们可以判断attendedgw上启用了`authkeys
command for sshd`，而当前主机attended尚未开启。
查看本机sshd_config，可以发现两行注释。猜测在attendedgw上，这两个配置是开启的。
    #AuthorizedKeysCommand /usr/local/sbin/authkeys %f %h %t %k
    #AuthorizedKeysCommandUser root
扫描一下attendedgw开放的端口，可以发现2222为OpenSSH端口。
    Connection to 192.168.23.1 25 port [tcp/smtp] succeeded!
    Connection to 192.168.23.1 53 port [tcp/domain] succeeded!
    Connection to 192.168.23.1 80 port [tcp/www] succeeded!
    Connection to 192.168.23.1 2222 port [tcp/*] succeeded!
    Connection to 192.168.23.1 8080 port [tcp/*] succeeded!
关于`AuthorizedKeysCommand`的用途可以查看OpenBSD的手册。主要用途是使用程序脚本查找用户的公钥文件做认证，在SSH登录认证层面调用，可接受的参数有用户尝试登录时使用的私钥对应公钥，指纹、登录用户等变量。举一个使用场景的例子，服务器公钥不储存在本地，为方便统一管理单独设立一台服务器用于储存登陆公钥，那么可以编写一个程序或脚本远程访问公钥服务器的api获取公钥进行验证。
可使用的参数如下：
    Arguments to some keywords can make use of tokens, which are expanded at runtime:
    %%
    A literal ‘%’.
    %D
    The routing domain in which the incoming connection was received.
    %F
    The fingerprint of the CA key.
    %f
    The fingerprint of the key or certificate.
    %h
    The home directory of the user.
    %i
    The key ID in the certificate.
    %K
    The base64-encoded CA key.
    %k
    The base64-encoded key or certificate for authentication.
    %s
    The serial number of the certificate.
    %T
    The type of the CA key.
    %t
    The key or certificate type.
    %U
    The numeric user ID of the target user.
    %u
    The username.
本配置中使用了`%f %h %t %k`，分别为公钥指纹，用户home目录，公钥类型和base64公钥。
为方便理解，可以写一个脚本测试具体输入的内容，然后参考上述配置，修改sshd_config
    #!/bin/sh
    username=$1
    pubkey=$2
    keytype=$3
    fingerprint=$4
    home=$5
    echo "$username\n$pubkey\n$keytype\n$fingerprint\n$home" >> /tmp/ssh_auth.log
    AuthorizedKeysCommand /root/authkeys.sh %u %k %t %f %h
    AuthorizedKeysCommandUser root
然后使用任意私钥进行登陆，可以得到类似这样的结果
    root
    AAAAB3NzaC1yc2EAxxxxxxxxxxxxxxxxxxxxxxxxAAADAQABAAAIAKw==
    ssh-rsa
    SHA256:tvntTHklJm1c2MpdeLruoDlmARuV0EMo6JVUnOjZPUA
    /root
###  authkeys
在home目录下可以找到`authkeys`的二进制文件，源码已被删，因此只能进行逆向分析。
根据上面分析，程序需要输入4个参数，随便输入点数据运行测试，发现程序应该是未开发完成。
    $ ./authkeys 1 2 3 4
    Sorry, this damn thing is not complete yet. I'll finish asap, promise!
    [1]    3083440 segmentation fault  ./authkeys 1 2 3 4
###  程序分析
    [*] '/home/xxx/pwn/htb/authkeys'
        Arch:     amd64-64-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX disabled
        PIE:      No PIE (0x400000)
        RWX:      Has RWX segments
64位程序，保护全没。
程序不大，清除了符号表，主函数IDA无法直接F5，不过问题不大，可以直接看汇编。关键逻辑有两个：
  * 1.判断输入参数是否4个
  * 2.进入`sub_4002C4`函数处理公钥部分
处理公钥的函数可以F5，其中第四个参数存在栈溢出，该输入为私钥中存储的公钥部分
    __int64 __fastcall sub_4002C4(__int64 a1, __int64 a2, __int64 a3, __int64 a4)
    {
      __int64 v4; // rax
      __int64 v5; // rcx
      _BYTE *v6; // r8
      _BYTE *v7; // r9
      __int64 v8; // r10
      unsigned __int64 v9; // r11
      _BYTE *v10; // rdi
      bool v11; // zf
      unsigned __int64 v12; // rax
      __int64 v14; // [rsp-308h] [rbp-308h]
      __int64 v15; // [rsp-8h] [rbp-8h]
      v15 = a3;
      sub_400385(a1, a2, a3, a4, a2, &v14);
      v4 = sub_40038C(a1, a2, 0LL, 0LL);
      v9 = 0LL;
      while ( *v6 )
      {
        LOBYTE(v5) = 64;
        v10 = &unk_60107D;                          // base64charlist
        do
        {
          if ( !v5 )
            break;
          v11 = *v10++ == *v6;
          --v5;
        }
        while ( !v11 );
        if ( (_BYTE)v5 )
        {
          LOBYTE(v5) = ~(_BYTE)v5 + 64;
          v9 = v5 | (v9 = 8u )
          {
            BYTE1(v4) -= 8;
            *v7++ = v9 >> SBYTE1(v4);
          }
        }
        ++v6;
      }
      v12 = (unsigned __int64)&v7[-v8];
      if ( (unsigned __int64)&v7[-v8] >= 0x300 )
        v12 = 768LL;
      qmemcpy(&unk_6010C0, &v14, v12); // stack overflow
      return 0LL;
    }
程序对传入的公钥进行base64decode，写入stack中，然后判断解码后的长度，若超长0x300大小则重设长度为0x300，然后解码后的公钥前0x300字节复制到0x6010c0（bss段）。那么思路很明确了，控制第四个参数（base64的公钥），溢出后进行ROP。