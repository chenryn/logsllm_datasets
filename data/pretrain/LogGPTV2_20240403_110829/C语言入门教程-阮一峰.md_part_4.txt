&& number != 0 number 0
（ ）是不会执⾏的。因为这时左侧表达式返回 ，整个 表达式肯定为伪，就直接返
12/number == 2 0 &&
回 ，不再执⾏右侧的表达式了。
0
由于逻辑运算符的执⾏顺序是先左后右，所以下⾯的代码是有问题的。
while ((x++ >
右移运算符 将左侧运算数的每⼀位，向右移动指定的位数，尾部⽆法容纳的值将丢弃，头部空出来的
>>
位置使⽤ 填充。
0
10001010 >> 2
上⾯示例中， 的每⼀个⼆进制位，都向右移动两位。最低的两位 被丢弃，头部多出来的两位
10001010 10
补 ，所以最后得到 。
0 00100010
注意，右移运算符最好只⽤于⽆符号整数，不要⽤于负数。因为不同系统对于右移后如何处理负数的符号
位，有不同的做法，可能会得到不⼀样的结果。
右移运算符相当于将运算数除以 2 的指定次⽅，⽐如右移 2 位就相当于除以 4（2 的 2 次⽅）。
右移运算符 可以与赋值运算符 结合，简写成 。
>> = >>=
int val = 1;
val = val >> 2;
val >>= 2;
逗号运算符 #
逗号运算符⽤于将多个表达式写在⼀起，从左到右依次运⾏每个表达式。
x = 10, y = 20;
上⾯示例中，有两个表达式（ 和 ），逗号使得它们可以放在同⼀条语句⾥⾯。
x = 10 y = 20
逗号运算符返回最后⼀个表达式的值，作为整个语句的值。
int x;
x = 1, 2, 3;
上⾯示例中，逗号的优先级低于赋值运算符，所以先执⾏赋值运算，再执⾏逗号运算，变量 等于 。
x 1
运算优先级 #
优先级指的是，如果⼀个表达式包含多个运算符，哪个运算符应该优先执⾏。各种运算符的优先级是不⼀
样的。
3 + 4 * 5;
上⾯示例中，表达式 ⾥⾯既有加法运算符（ ），⼜有乘法运算符（ ）。由于乘法的优先
3 + 4 * 5 + *
级⾼于加法，所以会先计算 ，⽽不是先计算 。
4 * 5 3 + 4
如果两个运算符优先级相同，则根据运算符是左结合，还是右结合，决定执⾏顺序。⼤部分运算符是左结
合（从左到右执⾏），少数运算符是右结合（从右到左执⾏），⽐如赋值运算符（ ）。
=
5 * 6 / 2;
上⾯示例中， 和 的优先级相同，它们都是左结合运算符，所以从左到右执⾏，先计算 ，再计
* / 5 * 6
算 。
6 / 2
运算符的优先级顺序很复杂。下⾯是部分运算符的优先级顺序（按照优先级从⾼到低排列）。
圆括号（ ）
()
⾃增运算符（ ），⾃减运算符（ ）
++ --
⼀元运算符（ 和 ）
+ -
乘法（ ），除法（ ）
* /
加法（ ），减法（ ）
+ -
关系运算符（ 、 等）
赋值运算符（ ）
=
由于圆括号的优先级最⾼，可以使⽤它改变其他运算符的优先级。
int x = (3 + 4) * 5;
上⾯示例中，由于添加了圆括号，加法会先于乘法进⾏运算。
完全记住所有运算符的优先级没有必要，解决⽅法是多⽤圆括号，防⽌出现意料之外的情况，也有利于提
⾼代码的可读性。
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
流程控制 语⾔教程 ⽹道
- C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
C 语⾔的程序是顺序执⾏，即先执⾏前⾯的语句，再执⾏后⾯的语句。开发者如果想要控制程序执⾏的流
程，就必须使⽤流程控制的语法结构，主要是条件执⾏和循环执⾏。
if 语句 #
语句⽤于条件判断，满⾜条件时，就执⾏指定的语句。
if
if (expression) statement
上⾯式⼦中，表达式 为真（值不为 ）时，就执⾏ 语句。
expression 0 statement
后⾯的判断条件 外⾯必须有圆括号，否则会报错。语句体部分 可以是⼀个语
if expression statement
句，也可以是放在⼤括号⾥⾯的复合语句。下⾯是⼀个例⼦。
if (x == 10) printf("x is 10");
上⾯示例中，当变量 为 时，就会输出⼀⾏⽂字。对于只有⼀个语句的语句体，语句部分通常另起⼀
x 10
⾏。
if (x == 10)
printf("x is 10\n");
如果有多条语句，就需要把它们放在⼤括号⾥⾯，组成⼀个复合语句。
if (line_num == MAX_LINES) {
line_num = 0;
page_num++;
}
语句可以带有 分⽀，指定条件不成⽴时（表达式 的值为 ），所要执⾏的代码。
if else expression 0
if (expression) statement
else statement
下⾯是⼀个例⼦。
if (i > j)
max = i;
else
max = j;
如果 的语句部分多于⼀⾏，同样可以把它们放在⼤括号⾥⾯。
else
可以与另⼀个 语句连⽤，构成多重判断。
else if
if (expression)
statement
else if (expression)
statement
...
else if (expression)
statement
else
statement
如果有多个 和 ，可以记住这样⼀条规则， 总是跟最接近的 匹配。
if else else if
if (number > 6)
if (number  6) {
if (number  ?  : 
这个操作符的含义是，表达式 如果为 （⾮ 0 值），就执⾏ ，否则执⾏
expression1 true expression2
。
expression3
下⾯是⼀个例⼦，返回两个值之中的较⼤值。
(i > j) ? i : j;
上⾯的代码等同于下⾯的 语句。
if
if (i > j)
return i;
else
return j;
switch 语句 #
switch 语句是⼀种特殊形式的 if...else 结构，⽤于判断条件有多个结果的情况。它把多重的 改成
else if
更易⽤、可读性更好的形式。
switch (expression) {
case value1: statement
case value2: statement
default: statement
}
上⾯代码中，根据表达式 不同的值，执⾏相应的 分⽀。如果找不到对应的值，就执⾏
expression case
分⽀。
default
下⾯是⼀个例⼦。
switch (grade) {
case 0:
printf("False");
break;
case 1:
printf("True");
break;
default:
printf("Illegal");
}
上⾯示例中，根据变量 不同的值，会执⾏不同的 分⽀。如果等于 ，执⾏ 的部分；
grade case 0 case 0
如果等于 ，执⾏ 的部分；否则，执⾏ 的部分。 表示处理以上所有 都不
1 case 1 default default case
匹配的情况。
每个 语句体的结尾，都应该有⼀个 语句，作⽤是跳出整个 结构，不再往下执⾏。如果
case break switch