|PrK←{0,1}k [A
(2)
where F = {f : {0, 1}n → {0, 1}l} and A makes at most q
queries to the oracle.
fK ] − Prf∈F[A
f]| < 
Deﬁnition 3: (Pseudorandom permutation (PRP)). If
pseudorandom function f in Deﬁnition 2 is bijective, then it
is a pseudorandom permutation as follows: {0, 1}k × {0, 1}n
→ {0, 1}n.
Deﬁnition 4: (Broadcast Encryption (BE)). Let (cid:2) de-
note the user space, i.e. the set of all possible users in
the system. A broadcast encryption scheme is a set of four
polynomial-time algorithms BE = (Gen, Enc, Add, Dec)
deﬁned as follows:
• Gen is a probabilistic algorithm that takes as input a
security parameter k and outputs a master key mk.
• Enc is a probabilistic algorithm that takes as input a
master key mk, a set of users G ⊆ (cid:2) and a message
m. The algorithm outputs a ciphertext c.
• Add is a probabilistic algorithm that takes as input
a master key mk and a user identiﬁer U ⊆ (cid:2) , and
outputs a user key ukU.
• Dec is a deterministic algorithm that takes as input a
user key ukU and a ciphertext c and outputs either an
original message m or the failure ⊥.
The broadcast encryption scheme BE is secure if its
ciphertext leaks no useful information about the original
message to any user not in G.
167
(cid:4)
(cid:4)
We now deﬁne the position heap search.
Deﬁnition 8: (Position Heap Search.) Position heap
search of all occurrences of a substring χ of text t in Λ
consist of the following steps:
• Index into the position heap Λ to ﬁnd the longest preﬁx
p of χ that is a node of Λ. For each ancestor p
of p,
lookup the position i stored in p
. Here, position i is
. Determine if this occurrence is
an occurrence of p
(cid:4)
followed by χ − p
. If yes, report i as an occurrence of
χ.
• If p = χ, also report all positions of descendants of p.
Using the example tree in Figure 2, the search for a
substring “aba” leads to the node 11. The only places
where “aba” may match χ are at position given by ances-
tors and descendants of t. The algorithm returns positions
{11, 15, 3, 6}. Similarly, the search for “ba” will return posi-
tions {14, 7, 10, 5, 2} of the text t.
(cid:4)
Position heap tree for a text of length n can be con-
structed in time O(n). All positions of substring χ of length
m can be found in O(m + k), where k is the number of
occurrences reported. We refer the reader [20] for detailed
discussion on position heap properties.
IV. SUBSTRING POSITION SEARCHABLE SYMMETRIC
ENCRYPTION (SSP-SSE)
A. Algorithm Deﬁnitions
a
set of documents D is
Deﬁnition 9: (Substring Position Searchable Sym-
metric Encryption (SSP-SSE). A tree-based SSP-SSE
scheme over
tuple of
(KeyGen, BuildT ree,
six polynomial-time algorithms
Encrypt, ConstructQuery, Search, Decrypt), as fol-
lows:
1) (K1, K2, K3) ← KeyGen(1k): a probabilistic key gen-
eration algorithm to setup the SSP-SSE scheme. The
algorithm takes a secret parameter k and outputs a set
of secret keys K1, K2, K3.
2) (Λ) ← BuildT ree(D): a deterministic algorithm to
build a position heap tree Λ. The algorithm takes a
document collection D = {D1, . . . , Dn} and constructs
a position heap Λ.
3) ( ¯Λ, C) ← Encrypt(K1, K2, K3, Λ, D): a probabilistic
algorithm to encrypt a position heap tree Λ and doc-
ument corpus D. The algorithm inputs a set of secret
keys K1, K2, K3, a position heap tree Λ and a documents
corpus D. The output of algorithm is an encrypted
position heap tree ¯Λ and encrypted collection C = {C1,
. . . , Cn}.
4) (Q) ← ConstructQuery(K3, χ): a probabilistic algo-
rithm to generate a search query. The algorithm inputs
a secret key K3, a substring χ and outputs a search
query Q.
5) (L) ← Search( ¯Λ, Q): a deterministic algorithm that
runs over an encrypted position heap tree ¯Λ to ﬁnd a
set of matching encrypted documents. The algorithm
takes a search query Q and traverses an encrypted
Fig. 2. Construction of position heap tree for text “abaaababbabaaba”.
C. Position Heap Tree
We are now ready to give an overview of a position heap
tree data structure that is used in our solution.
A tree is a collection of nodes (or vertices) and edges,
where there exists exactly one simple path (a sequence of
edges) between every pair of nodes. In a rooted tree, one
node is designated as the root, and the level of a node is
the total number of edges along the path to the root. For
example, the level of the root node is zero. Between each
pair of nodes connected by an edge, the one with higher
level is the child, and the other one is the parent of the
child node. A node with no children is called a leaf node.
Deﬁnition 5: A rooted tree has the heap property if each
node has a label from an ordered set (i.e. the integers) and,
for every internal node u, the labels of the children of u are
greater than the label of u.
Deﬁnition 6: A trie on alphabet
Λ with the following properties:
(cid:2)
denotes a rooted tree
1) Each edge is labeled with a character.
2) For each node u and letter b ∈ (cid:2)
, there is at most one
edge with label b from u to a child of u.
Deﬁnition 7: (Position Heap Construction [20].) The
position heap tree Λ of text t is constructed by iteratively
inserting the sufﬁxes (t1, t2, . . . , tn) of t in ascending order
into Λ. That is, ti is inserted by creating a new node in Λ
that is the shortest preﬁx of ti that is not already a node of
the tree, and labeling it with position i.
Figure 2 shows an example of position heap tree Λ
for text “abaaababbabaaba”. The ﬁrst character “a” of text
creates the root node in Λ with position label of “1”. Next,
second character “b” of text creates the new node with
position “2” and connecting edge with label “b”. Similarly,
third character “a” of text creates the new node with position
“3” and connecting edge with label “a”. Following Deﬁnition
7, the position heap Λ is constructed. The construction can
be executed for any text t, and, since it is deterministic, the
position heap Λ for a text is unique.
168
6) (Di, posDi
position heap tree ¯Λ to output a sequence of document
identiﬁers L ∈ C.
) ← Decrypt(K1, K2, Ci): a deterministic
algorithm that takes a set of secret keys K1, K2 and
a ciphertext Ci as input, and outputs an original docu-
ment Di, ∀i ∈ [1; n], and a set of χ’s positions posDi
in Di.
Deﬁnition 10: (SSP-SSE Correctness). We say that the
tree-based SSP-SSE scheme is correct if ∀k ∈ (cid:3), ∀ K1,
K2, K3 produced by KeyGen(1k), ∀ D, ∀ Λ output by
BuildT ree(D), ∀ χ, ∀ i ∈ [1; n]:
(cid:2)
Search(Encrypt(K1, K2, K3, Λ, D),
ConstructQuery(K3, χ)) =
Decrypt(K1, K2, Ci) = (Di, posDi
)
= C(χ)
(3)
B. Security Model Deﬁnitions
Security goal of any searchable encryption scheme is
to reveal as little information as possible to the adversary.
Intuitively,
in SSP-SSE scheme we want to provide the
following security guarantees: given an encrypted position
heap tree ¯Λ and a set of encrypted documents C = {C1,
. . . , Cn} to the adversary, no valuable information about
the original documents D = {D1, . . . , Dn} is leaked to
the adversary; given a set of incoming search queries Q
= {Q1, . . . , Qt}, the adversary cannot learn any practical
information about the content of the search query Qi or
the original document collection D. However, these security
guarantees are difﬁcult to achieve and most known search-
able encryption schemes [2], [3], [5], [11], [12] reveal
some information, namely the access pattern and the search
pattern. In SSP-SSE we follow the similar approach of [5]
to weaken the security guarantees and allow some limited
information to the adversary.
Deﬁnition 11: (Access pattern). Given the n encrypted
documents C, where C = {C1, . . . , Cn}, the search query
vector Q, where Q = {Q1, . . . , Qt} of size t, the access
pattern κ(C, Q) includes the set of document identiﬁers
induced by a search query vector Q.
Deﬁnition 12: (Search pattern). Given the n encrypted
documents C, where C = {C1, . . . , Cn} the search query
vector Q, where Q = {Q1, . . . , Qt} of size t the search
pattern γ(C, Q) is a n×t binary matrix such that ∀i ∈ [1; n]
and ∀j ∈ [1; t], the cell element of i
th column is
1, if a document identiﬁer idi is returned by a search query
Qj. The search pattern reveals whether the same search was
executed in the past or not.
th row and j
Since our solution is based on the position heap tree, we
would like to capture the path pattern security notion. The
path pattern of the position heap tree reveals the path from
the root node to the end node for a given search query.
Deﬁnition 13: (Path pattern). Given the n encrypted
documents C, where C = {C1, . . . , Cn}, and the encrypted
position heap tree ¯Λ built from the document collection, the
path pattern of (C, ¯Λ) induced by the search query vector
Q, where Q = {Q1, . . . , Qt} of size t, is a tuple δ(C, ¯Λ, Q)
that reveals the set of identiﬁers of nodes in tree ¯Λ that are
reached by query Qi∈[1;t].
against
adaptive
Now we deﬁne the leakage functions to capture all the
information leakage we have in this work:
• Leakage (cid:4)1( ¯Λ, C). Given the encrypted collection C =
{C1, . . . , Cn} and the encrypted position heap tree ¯Λ,
the leakage consists of the following information: the
number of encrypted documents, the size of encrypted
documents, the identiﬁer of each encrypted document.
• Leakage (cid:4)2(Q, ¯Λ, C). Given the encrypted collection
C = {C1, . . . , Cn} the encrypted position heap tree
¯Λ and search query Q, the leakage function outputs
the access pattern κ(C, Q), search pattern γ(C, Q) and
path pattern δ(C, ¯Λ, Q).
Deﬁnition 14: (Security
chosen-
keyword attack CKA2). Let SSP-SSE be tree-based SSE
scheme that consists of six algorithms as described in
Deﬁnition 9. Let A be a stateful adversary, S be a stateful
simulator. We consider two probabilistic experiments RealA
and IdealA,S that involve A as well as S with two stateful
leakage algorithms (cid:4)1 and (cid:4)2 and security parameter k:
RealA(k): The challenger runs the KeyGen(1k) to output
the key set (K1, K2, K3). The adversary A sends the tuple (D,
(Λ)), where Λ ← BuildT ree(D)), and receives encrypted
( ¯Λ, C ← Encrypt(K1, K2, K3, Λ, D) from the challenger.
The adversary A makes a polynomial number of adaptive
string searches χ = χ1,
. . . , χt and sends them to the
challenger. A then receives the search queries generated by
the challenger such that Qi ← ConstructQuery(K3, χi).
The adversary returns 1 if his queries return the expected
result, otherwise 0.
IdealA,S(k): The adversary A outputs the tuple (D, (Λ)),
where Λ ← BuildT ree(D)), and sends it to the simulator.
Given the leakage (cid:4)1, simulator S generates the position
heap tree as well as encrypted documents tuple (Λ, C) and
sends them to the adversary. A makes a polynomial number
of adaptive string searches χ = χ1, . . . , χt and sends them
to the simulator. Given the leakage (cid:4)2 the simulator S sends
the appropriate search queries to the adversary. Finally, A
returns 1 in the case of successful experiment, otherwise 0.
We say that SSP-SSE is adaptively secure against chosen
keyword attack if for all probabilistic polynomial time adver-
saries A, there exist a non-uniform probabilistic polynomial
time simulator S such that:
|Pr[RealA(k)] = 1 − Pr[IdealA,S(k) = 1]| (cid:2) negl(k) (4)
C. SSP-SSE Construction
We are now ready to describe the SSP-SSE scheme in
details.
The scheme consists of two phases, namely setup phase
and search phase. The setup phase is done once by the
data owner to upload the set of encrypted documents and
169
Second, for reasons that will become clear shortly in the
search phase, each path label includes the node depth of
the tree. Figure 3 shows an example of position heap tree
Λ of the text “aba” that has three nodes and two edges.
Once the BuildT ree algorithm is ﬁnished, the data owner
outputs the position heap tree Λ and executes the Encrypt
algorithm.
To protect the content in Λ, the data owner encrypts
all nodes and path labels in the tree to form ¯Λ. Note, the
tree structure Λ and its encrypted version ¯Λ are isomorphic.
The main difference is that all the nodes and path labels
in ¯Λ are encrypted compared to the nodes and path labels
in Λ. Figure 4 shows the encrypted position heap tree ¯Λ.
Here, each node in the tree is encrypted with pseudorandom
permutation π of an arbitrary size [27]: {0, 1}K2 × {0, 1}l
→ {0, 1}l with secret key K2. Each path label in the tree
is encrypted with pseudorandom permutation ψ: {0, 1}K3 ×
{0, 1}m → {0, 1}m with secret key K3. Now with no plaintext
left in the tree, the data owner outputs the encrypted
position heap tree ¯Λ.
Next, data owner encrypts each document Di in the col-
lection D using PCPA-secure symmetric encryption scheme
SKE with secret key K1 to produce the encrypted document
Ci. Finally, the data owner uploads the encrypted collection
C along with the encrypted position heap tree ¯Λ to the cloud
provider. Now the collection is available for selective cloud
retrieval.
2) Search Phase: The search phase includes both the
ConstructQuery and the Search algorithms.
In order to search for substring χ of length |χ| the cloud
user invokes the ConstructQuery algorithm to output
search query Q. The trapdoor applies a pseudorandom
permutation ψ with secret key K3 on each character of χi
concatenated with i-th position. Each output of pseudoran-
dom permutation is concatenated to form the search query
Q.
The cloud provider executes the Search algorithm on
the encrypted position heap tree ¯Λ and the incoming search
query Q. The server executes the position heap search
algorithm (see Deﬁnition 8) that ﬁnds the set of nodes in
¯Λ that match the search query Q. Speciﬁcally, the cloud
provider starts with the root node in the tree and traverses
the path labels that match the output of each pseudorandom
permutation ψ in Q until the set of matching child nodes
is found. The cloud provider outputs the set of encrypted
nodes back to the cloud user.
On the other side, the cloud user invokes Decrypt with
secret keys K1 and K2 to decrypt the set of encrypted nodes,
where each node contains the document identiﬁer and χ’s
positions in the document. Finally, the cloud user retrieves
encrypted documents Ci and decrypts them to original view.
V. SECURITY AND PERFORMANCE ANALYSIS