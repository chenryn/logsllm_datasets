00
图 6.10
在上面这张截图中，高亮标记出来的都是上面提到的 StringIDs 区段中存放的地
址（或称数据值）。如果你想要提取其中的某个地址，请用正确的字节序读取它们，
然后根据相应的值跳转到DEX文件的相应区段中去。比如你可以读取图6.11中给出
的这个数据：
00000070
8a010000
图 6.11
如你所见，由于这个文件的字节序是小端序的，所以读出来的值应该是000001
8a，它实际指向的是DEX文件中的一个字符串。图6.12这张截图中显示的就是这个
DEX文件中偏移0x018a位置上的内容。
9008618903000600 01 00 00 0007 00 063c696e6974.
...Exanple.java.
图 6.12
我们看到，0x018a位置上的内容是3c696e 69 743e 00，这是字符串的十
六进制表示。
编译器、反编译器以及Dalvik虚拟机在寻找字符串值时，执行的也是同样的操
作。下面是从libdex 源码中提取出来的，完成这一操作的代码。
DEX_INLINE const char* dexGetStringData (const DexFile* pDexFL1e,
const DexStringId* pStringId)(
// Skip the uleb128 1ength,
whi1e (* (pt.z++) > 0×7f) /* empty */ )
return (const char*) ptr;
184
---
## Page 203
第6章逆向app
上 述 代码摘 自 : https:/github.com/android/platform_dalvik/blob/
master/libdex/DexFile.h 第 614 行至第 622 行。
上面这段代码返回的是DEX文件中一个字符串的指针，传入的参数是一个表示
DEX文件的结构体（其定义我们之前已经详述了）和一个用DEXStringld结构体表
示的字符串ID。这段代码只是取出文件的加载基地址，再加上stringld 的值（这个我
们刚才已经讲过了，它是字符串在DEX文件内部的偏移量）。上面的代码中忽略掉
了一些细节，比如，代码是怎么获得关于文件实际内容的数据的，以及传入的各个
参数是如何准备的。有签于此，我在这里在给出一段参数是如何解析的，以及文件
中的数据是怎样使用的代码，如下所示。
void dexFileSetupBasLcPointers (DexFile* pDexF11e, const u1* data)
epep (xepeegxea) = xepeegd, xepeegxeg
pDexFile->baseAddr = data /;
3epeegd = zepeegdpStringIds = (const DexStringId*) (data + pBeader
>stringIdsOff) :
,限于盆幅刑去了部分代码
上 述 代 码 接 自https:/github.com/android/platform_dalvik/blob/
master/libdex/DexFile.cpp 第269 行至第 274 行。
通过名为data的这个指针得到的各个成员变量中存放的就是DEX文件的实际内
容。上面这个代码片段展示了DexHeader中各个字段在定位DEX文件中各个区段的
位置时是多么高效。以被加粗的部分代码为证。
Typelds 区段
下一个是Typelds区段。这个区段中存放的是寻找各个type（类型）的相应字符
串时所需的信息。在介绍它是如何工作的之前，我们先来看看Typelds 的定义。
struct DexTypeId (
u4descriptorIdx; /*类型描述符的在 stringIds 列表中的素引号*/
185
---
## Page 204
Android安全攻防实战
上述 代码 摘自 : https:/github.com/android/platfom_dalvik/blob/
master/libdex/DexFile.h第 270 行至第 272行。
正如注释中描述的那样，这个值是一个ID，或者说是StringIds区段中描述该类
型的字符串的索引号。下面举例说明，样本数据值是Typelds区段中的第一个值，如
图6.13所示。
000000b09300009005000000
图 6.13
根据之前讲过的读法，根据这个文件的字节序，这个值应该是03。由于它是
Stringlds 区段中某个值的索引号，所以在这个例子里，我们应该去看Stringlds 区段
中的第4个值，如图6.14所示：
000000708a01 000092 0100 00a001 0000af 01 0000
I 6.14
第4个值是0x01af，它是data区段中的某个偏移量，如图6.15所示。
300001b04c 45 78 61 6d 70 6c 653b 00 03 4c 4c 4c 00 15[LExarple;-.LLL.
[00001a00d 48 65 6c 6c 6f 20 576f 72 6c 64 21 0a 00 991.Hel1o Wor1d1.1
图 6.15
从图6.15这张截图中，我们看到，它是LExample，这看上去有点奇怪，因为我
们是明确地把我们的类定义为Example的。这个L是干什么的？好吧，这个字符串
实际上就是一个使用Dalvik类型描述语言（Dalvik type descriptor language）的类型
描述符，这个语言与Java 的方法、类型和类的签名十分类似。实际上它们的工作方
式是一模一样的。有关Dalvik中类型、方法及其他描述符或签名的详细信息，参见
http://source.android.com/devices/tech/dalvik/dex-format.html 。在我们这个例子中， L
这个字母被放在类名之前，表示Example是一个类，或者一个描述对象的名称。当
Dalvik编译器和虚拟机寻找或生成类型时，它使用的是和我们这里讲的相同的基本
步骤。现在我们已经知道这个区段是怎么工作的了，我们接下来再去看下一个区段，
即 Protolds 区段。
Protolds [区段
Protolds 区段中存放了一系列用来描述方法的 prototype ID，其中含有关于各个
方法的返回类型和参数的信息。下面是libdex文件中的相关代码。
186
---
## Page 205
第6章逆向app
struct DexProtoId{
u4 shortyIdx;
/* index into stringIds for shorty
descriptor */
u4 returnTypeIdx
/* 1ndex into typeIds list for return
u4 parameters0ff;
type */
/* file offset to type_list for
parameter types */
这个结构体相当易于理解。名为shortyldx的这个4个字节无符号整型数中是
Stringlds区段中某个字符串的索引，用来简短地描述原型（prototype）。在Dalvik 中，
它的运作原理与type 描述符的一模一样。returnTypeldx字段中，如果你不愿意猜的
话，存放的是Typelds区段中某个数据的索引号，它用来描述返回值的类型。最后，
parametersOf中存放的是方法的参数列表的地址偏移。图6.16 是 Example.dex 中的
Protolds 区段。这就是我们的样本DEX文件中 Protolds 区段的样子。
00000060000010200000010000000009000000
0000005000000060000000000900005009000900
001000000000000001000000001080000000
彤 6.16
Fieldlds 区段
Fieldlds区段，就像其他一些区段一样，是由一些Stringlds和Typelds区段中数
据的索引号组成的。只不过它描述的是类中各个成员。下面是libdex对DEX文件的
FieldIds区段中数据的官方定义。
struct DexFieldId [
u2 cla8sIdx;
/* index into typeIds list for defining
class */
xpedfzn
/ * Lndex into typeIds for fleld type */
u4 nameIdx,
/* index into stringIds for field
name */
) /
上 述 代码 摘自 : https:/github.com/android/platform_dalvik/blob/
master/libdex/DexFile.h/L277。
我们看到，每个成员由三个字段组成，即，它所属的类（classIdx字段中规定的
class ID）、它的类型（typeldx字段中存放了Typeld 区段的索引，它表示该成员的类
型是string，int，bool 还是其他什么），以及它的名字。其存储方式我们之前已经讨
187
---
## Page 206
Android安全攻防实战
论过了—这个值和其他的字符串值一样，是存放在data 区段中的，通过nameldx
中存放的 Stringlds 区段的索引予以查找。图6.17是我们的FieldIds 区段的截图。
000000f084010000940001000e00000000000100
% 6.17
我们再来看下一个区段—Methodlds。
Methodlds [区段
每个method ID中各个字段定义如下。
struct DexMethodId [
u2 classIdx;
/* index into typeIds 1ist for defining
class */
u2 protoIdx;
/* index into protoIds for method
prototype */
u4 nameIdx:
/* index into stringIds for method name */
1 /
上 述 代 码 摘 自 : https:/github.com/android/platform_dalvik/blob/
master/libdex/DexFile.h#L286.
该方法属于哪个类是由classldx字段中存储的值确定的。它的运作方式与Typelds
区段的一样。此外，每个方法都有一个对应的原型，这是存储在protoldx字段中的。
最后，nameldx 字段中存放了该方法的方法名。下面是我们的 Example.dex 文件中一
个方法的定义。
([Ljava/lang/Stringz) V
理解上面这个定义的最佳方法是从右到左地读它。详细剖析一下这个定义，它
应该这样读。
。V:这表示void类型，它是方法的返回类型。
·0：这表示方法接收的参数的类型。
·java/lang/String：这是String类的标识符。这个函数接收的唯一一个参数是个
字符串。
·L：这个符号表示它后面跟着的是个类名。
·[：这个符号表示它后面跟着的是个指定类型的数组。
所以把这些信息整合在一起，这个方法的返回值是void，接收一个 String类的
数组作为参数。
188
---
## Page 207
第6章逆向app
图6.18是我们样本中Methodlds区段的截图。
900000f084010000040001000e00000000000100
30006160
0000000000000200
6d00000001000000
30000110
00000000000000000010002000000000
[图 6.18
ClassDefs [区段
ClassDefs 区段的定义如下。
u4 classIdxj
/* index into typeIds for this class */
rsbetgssaooe pn
u4 superclassIdx;
/* index into typeIds for superclas8 */
u4 interfacesoff;
u4 sourceFileIdx,
/* index into stringIds for source file
name */
u4 annotatlonsoff;
/* file offset to
annotations_directory_item */
u4 classDataOff;
/* file offset to class_data_item */
u4 staticValues0ff;
/* file offset to DexEncodedArray */
} ;
这些字段相当易于理解。第一个是classldx，就像注释中所写的那样，其中存放
的是Typelds区段的一个索引，表示其类型。AccessFlags字段中存储的是一个数字，
它表示其他对象可以怎样访间这个类，以及类的用途的描述，相关标志位定义如下。
enum (
ACC_PUBLIC
= 0x00000001,
// class, field, method, 1c
ACC_PRIVATE
=
20000000x0
// field, method, ic
ACC_PROTECTED
= 0x00000004,
// field, method, ic
ACC_STATIC
'80000000x0 =
// field, method, ic
ACC_FINAL
01000000X0-
// class, field, method, ic
ACC_SYNCHRONIZED
02000000x0 =
// method (only allowed
onnatives)
ACC_SUPER
0x00000020,
// class (not used inDalvik)
ACC_VOLATILE
0x00000040,
// method (1.5)
// fie1d
ACC_BRIDGE
=
0x00000040,
ACC_TRANSIENT
0x00000080,
// method (1.5)
// fle1d
ACC_NATIVE
ACC_VARARGS
= 0x00000080,
= 0x00000100,
// method
ACC_INTERFACE
= 0x00000200,
// class,
ic
ACC_ABSTRACT
“
0x00000400,
// class,
0x00000800,
method, 1c
ACC_STRICT
=
// method
ACC_SYNTHETIC