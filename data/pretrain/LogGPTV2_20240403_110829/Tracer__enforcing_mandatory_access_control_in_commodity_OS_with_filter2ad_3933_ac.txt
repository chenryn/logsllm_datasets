work  [2]  [3],  a  MAC  policy  should  have  ways  to  specify 
exceptions since no simple policy model can capture all accesses 
that  need  to  be  allowed  and  at  the  same  time  forbid  all  illegal 
accesses. Hence, we provide two means to facilitate these system 
maintenance tasks. One is trusted communications through which 
processes can update software remotely without being marked as 
suspicious.  A  communication  is  considered  to  be  trustful  if  the 
three  factors  associated  with  it,  i.e.,  “image  file  of  the  local 
process”,  “communication  protocol”  and  “remote  host”  are  all 
trusted. Meanwhile, a trusted communication is time limited, i.e., 
effective only within a predefined time period. Although a trusted 
protocol, e.g. SSL, is not absolutely secure, a further check of the 
process’  image  file,  the  remote  host  and  the  time  stamp 
simultaneously will greatly reduce the attack surface. Moreover, 
as  a  computer  usually  only  needs  to  access  a  few  well-known 
sites to update its necessary software, the administrator can easily 
set up the trusted communications required. The other means is a 
new system call to facilitate a user to manually remove suspicious 
labels  on  specific  processes  or  files  if  the  user  trusts  them.  For 
example, when installing benign software from a CD disk, a user 
can remove the suspicious labels from the processes which read 
the  executables  on  the  CD  disk  then  Tracer  will  not  affect  the 
installation progress any more. Note that, only a process without 
a suspicious label has the privilege to use the system call so as to 
prevent a malware program from bypassing Tracer. 
Although bypassing the  detection at entrances is  difficult, in 
case that a sophisticated malware program unexpectedly breaks into 
the  system,  we  prepare  a  type  of  detection  at  the  interior  of  the 
system to ambush it. This type of detection monitors the exclusive 
malware  behaviors  that  a  benign  program  will  not  exhibit.  The 
current version of Tracer conservatively uses five such behaviors to 
detect  malware  programs  inside  a  system  as  shown  in  Figure  2. 
More  behaviors  can  be  monitored  for  malware  detection  in  the 
interior  at  the  cost  of  additional  FPs.  Actually,  these  behaviors 
together  provide  a  strong  detection  capability  as  they  are 
indispensable  to  most  malware  programs,  e.g.,  “Copy  itself”.  In 
addition,  this  type  of  detection  will  not  bring  extra  performance 
overhead since the restricting action of Tracer also needs to monitor 
such behaviors, which will be presented in Section 3.3. 
In short, the detection action identifies a process as suspicious 
if it meets one of the following conditions: receiving network traffic 
through  dangerous  protocols;  receiving  network  traffic  through 
non-dangerous  protocols  then  exhibiting  any  of  the  malware 
behaviors;  reading  or  loading  an  executable  from  a  removable 
drive; and exhibiting any of the five exclusive malware behaviors. 
3.3 Tracing Intruders 
To track intruders within an operating system, one can use 
OS-level information flow as done in [18] [26]. However, a major 
challenge  for  leveraging  OS  level  information  flow  to  trace 
suspicious entities is that, file and process tagging usually leads 
the entire system to be floated with "suspicious" labels and thus 
incurs  too  many  FPs.  To  address  this  issue,  we  propose  the 
following  two  methods  to  limit  the  number  of  tagged  files  and 
processes  in  a  single  OS  while  preventing  malware  programs 
from evading the tracing as much as possible. 
tagging  of  executables  while 
For tagging files, unlike the approaches in [18] [26] and the 
schemes  of  many  malware  detection  and  MAC  systems 
[1][2][5][21] that trace information flow on OS level, Tracer only 
focuses  on 
ignoring 
non-executables  and  directories.  This  is  because  an  executable 
represents  the  possible  execution  flow  of  the  process  loading  it, 
thus it should be deemed as an inactive intruder while a process is 
considered as an active intruder. On the other hand, since there are 
a  huge  number  of  non-executable  files  and  directories  within  a 
single OS, not tracing them can prevent the entire file system from 
being floated with the suspicious labels that mostly are due to FP. 
For  tagging  processes,  we  observed  that  the  excessive 
number  of  tags  mainly  come  from  tracing  IPC  (Inter-Process 
Communication), i.e. marking a process as suspicious if it receives 
IPC  data  from  a  suspicious  process,  just  as  the  approaches 
assumed  in  [2]  [18].  To  address  this  issue,  Tracer  only  tags  a 
process receiving data from dangerous IPCs that can be exploited 
by a malware program to take control of the process to perform 
arbitrary  malicious  behaviors.  Note  that,  dangerous  IPCs  do  not 
include  the  other  types  of  vulnerable  IPCs  that  can  be  used  to 
launch denial-of-service attack, or disclose sensitive information, 
or  escalate  the  privileges  of  the  processes  which  send  IPC  data. 
Moreover, a dangerous IPC only involves the local IPCs instead of 
the  IPCs  over  the  network,  since  the  detection  at  entrance  can 
mark  a  process  that  receives  IPC  data  from  the  network  as 
suspicious.  In  order 
the  dangerous  IPCs,  we 
investigated Microsoft Security Bulletins [19], a database storing 
information about security vulnerabilities on Windows family OS 
and  other  Microsoft  software.  As  malware  programs  usually 
exploit  these  vulnerabilities  to  compromise  Windows  hosts, 
Microsoft  Security  Bulletins  become  primary  sources  for 
analyzing  attack  vectors  of  Windows  OS  as  done  in  [11]. 
Concretely,  we  analyzed  all  vulnerabilities  recorded  in  security 
bulletins  related  to  named-pipes,  local  procedure  calls,  shared 
identify 
the 
to 
memories, mailslots and Windows messages from 1998 to 2009, 
as these IPCs send free-formed data that can be crafted to exploit 
bugs in the receiving process. However, among all of the security 
bulletins, we only found one dangerous IPC, i.e. MS03-025 [19]. 
The  result  reveals  that in  reality  it  is  quite  difficult  to  propagate 
malware  through  local  IPCs  within  a  Windows  OS  since  people 
could only find one dangerous IPC over the period of eleven years. 
Consequently, Tracer employs a Dangerous-IPC-List to record and 
trace  each  type  of  dangerous  IPC  since  there  should  be  a  very 
limited number of dangerous IPCs in a Windows OS. 
Therefore,  we  mark  the  following  entities  as  suspicious:  a 
process spawned by a suspicious process, an executable created 
or  modified  by  a  suspicious  process,  a  process  loading  an 
executable with a suspicious label, a process receiving data from 
a  suspicious  process  through  a  dangerous  IPC,  and  a  process 
reading a semi-executable or script file with a suspicious label.   
A  script  file  is  written  in  interpreting  language,  e.g. 
JavaScript  or  VBScript,  and  thus  needs  execution  engine,  e.g. 
wscript.exe  or  cscript.exe,  to  load  and  run  it.  Accordingly,  to 
defend  against  a  script  virus,  Tracer  should  restrict  the  engine 
processes that are reading and interpreting a suspicious script file. 
On the other hand, a semi-executable represents certain types of 
data files that might contain macro codes, which mainly involves 
various types of Microsoft Office documents, e.g. Word, Excel, 
PowerPoint,  and  template  files.  Although  the  macro  virus 
protection  in  Office  software  can  reduce  the  chances  of  macro 
virus  infection,  relying  on  it  is  very  dangerous  because  crafted 
macro codes are able to subvert it and cause destructive damages, 
for  example,  viruses  Melissa  and  W97M.Dranus.  Consequently, 
Tracer 
suspicious 
semi-executable as suspicious in order to defeat macro virus. 
3.4 Restricting Intruders 
a  process 
considers 
In  order  to  disable  malware  programs  on  a  host,  the 
restricting  action  monitors  and  blocks  intruders’  requests  for 
executing  critical  malware  behaviors 
in  Figure  1. 
Additionally,  to  reduce  FPs,  a  few  malware  behaviors  that  are 
indispensable  to  benign  programs  and  do  not  directly  hurt 
security  are  not  blocked  but  traced,  for  instance,  “Create 
executable files” which is often utilized by Internet browsers to 
download and run ActiveX programs from web pages. 
To  follow  the  principle  of  complete  mediation  [13]  for 
building a security protection system, Tracer further restricts two 
special  behaviors,  called  generic  malware  behaviors,  to  protect 
security  more  widely.  The  first  one  is  “Steal  confidential 
information”,  which  represents  all  illegal  reading  of  confidential 
information from files and registry entries. The other is “Damage 
system integrity”, which represents all illegal modifications of the 
files  and  registry  entries  that  require  preserving  integrity.  In 
addition,  other  behaviors  that  can  be  used  to  bypass  Tracer 
mechanism  also  need  to  be  monitored  and  restricted,  including 
“Change  file  attributes”,  “Change  registry  entry  attributes”, 
“Execute  non-executable  files”  and  “Execute  Tracer  special 
system  calls”.  The  behavior  “Change  file  attributes”  represents 
changing file extension names to executable or changing file DAC 
information. 
By mediating all these behaviors, Tracer is able to preserve 
system security and prevent a malware program from propagating 
itself  in  the  system.  To  be  specific,  confidentiality  is  mainly 
achieved  by  blocking  the  generic  behavior  “Steal  confidential 
information”; integrity is mainly protected by blocking the generic 
behavior  “Damage  system  integrity”;  availability  is  defended  by 
blocking the behaviors listed in Figure 1 with the capital letter A 
listed 
reads 
that 
a 
attached;  propagation  is  prevented  by  blocking  the  behaviors  in 
Figure 1 with the capital letter P attached. 
Meanwhile, blocking these behaviors can also help to defend 
against unknown malware programs because of two reasons. First, 
these behaviors are extracted from thousands of malware samples 
and thus represent popular hacking techniques that are often used in 
unknown malware programs by malware authors. For example, the 
behavior “Add IE or Explorer plug-in” is also a popular technique 
that is frequently used by enormous amount of malware programs 
both  known  and  unknown  to  hide  and  automatically  launch 
themselves, as well as monitor user data. Second, these behaviors 
are high-level behaviors so that they widely cover various low-level 
behaviors  of  various  types  of  malware  programs  known  or 
unknown.  For  example,  “Communicate  with  a  remote  host” 
involves  downloading  hacker  tools,  sending  emails  to  spread 
malware programs, connecting with a remote host to accept hacker 
commands,  etc.  Particularly,  the  two  generic  malware  behaviors 
presented  previously  actually  cover  all 
illegal  accesses  of 
files/directories and registry entries in the system. 
.dll, 
.vbs 
files 
To efficiently restrict these malware behaviors, an issue needs 
to  be  addressed.  That  is  how  to  determine  the  generic  malware 
behaviors. We identify behaviors “Steal confidential information” 
and  “Damage  system  integrity”  by  monitoring  illegal  reading  on 
read-protected objects and illegal writing on write-protected objects, 
respectively. However, it is difficult to identify the objects that need 
protection among a large number of candidates in a Windows OS in 
order  to  recognize  the  generic  malware  behaviors.  A  traditional 
MAC requires users to give every file a security label to identify 
whether the file needs protection, which in turn becomes a heavy 
burden on general users. In Tracer, we utilize the existing operating 
system information “file extension name” and “DAC information” 
to denote the protected files and registry entries. To be specific, we 
use  file  extension  names  to  recognize  the  executables  and 
that  usually  are  write-protected.  For 
configuration 
example, 
represent 
executables; .ini and .inf represent configuration files. Meanwhile, 
we  use  the  DAC  information  of  a  file  to  determine  whether  it  is 
protected.  If  the  user  group  “Everyone”  does  not  have  a  read 
permission on a file, the file is treated as read-protected; if the user 
group “Everyone” does not have write permission on a file, the file 
is  treated  as  write-protected.  Similarly,  we  use  the  permission  of 
user  groups  “Users”,  “Everyone”  and  “Restricted”  to  recognize 
protected registry entries. In addition, we do not allow an intruder 
to  change  file  extension  and  DAC  information.  As  a  result,  an 
attacker is not able to alter a file or registry entry from a protected 
state to an unprotected state to escape the access control mechanism. 
With  above  methods,  the  configuration  work  required  to  identify 
files  and  registry  entries  to  be  protected  is  significantly  reduced 
without changing the user’s usage convention. 
3.5 Limitation 
.js,  and 
.com, 
.exe, 
.sys, 
Although  Tracer  has advantages  on compatibility,  usability 
and  defense  against  unknown  malware  programs,  it  also  has  a 
limitation  that  requires  further  research.  As  based  on  static 
malware characteristics and behaviors, detection in Tracer cannot 
be  dynamic  over  time  in  the  sense  of  evolving  with  the 
emergence  of  new  malware  characteristics  and  behaviors.  In 
future, we will try to improve Tracer to address this limitation. 
4.  IMPLEMENTATION 
To  evaluate  the  effectiveness  of  Tracer  model,  we  have 
developed  a  prototype  implementation  for  Windows  XP,  and 
carried out a series of experiments. Although XP is not as new as 
Table  1.  Decision  logic  of  Tracer.  The  Benign  Process  and 
Suspicious  Process  columns  represent  that  the  processes  requesting 
the behaviors below are benign or suspicious respectively. Ip and Ie 
indicate  setting  the  related  process  or  executable  as  suspicious 
respectively. D indicates denying the behavior request. 
Behaviors 
Normal Communication 
1. Communicate 
with a remote host  Trusted Communication 
2. Create executable files 
3. Modify registry for startup 
4. Copy itself 
5. Obtain personal or system information 
6. Inject into other processes 
7. Modify executable files 
8. Create or modify Windows services 
9. Change security settings 
10. Add IE or Explorer plug-ins 
11. Start hidden network clients 
12. End anti-malware processes or services 
13. Modify system configuration files 
14. Log keystrokes and mouse clicks 
15. Copy special configuration files 
16. Copy system executable files 
17. Uninstall software 
18. Copy executables to removable drives 
19. Create Windows hooks 
20. Install or modify drivers 
21. Change file time 
22. Capture screen shots 
23. Restart computer 
24. Make system/hidden directories 
25. Close security alert windows 
26. Modify layered service providers 
27. Install screen savers 
28. Change desktop backgrounds 
30. Add data streams 
Damage system integrity 
Steal confidential information 
Mount removable drives 
Change file attributes 
Change registry entry attributes 
Create processes 
Load suspicious executables 
Read certain suspicious executables 
Communicate with local processes 
Execute non-executable files 
Execute Tracer special system calls 
Benign Process  Suspicious Process
Detect  Trace  Restrict  Detect Trace Restrict
IP 
IP 
IP 
IP 
IP 
IP 
Ie 
Ie
Ie
IP
IP