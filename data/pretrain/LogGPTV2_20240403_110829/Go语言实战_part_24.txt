15 // interrupt通道报告从操作系统
16 // 发送的信号
17 interrupt chan os.Signal
18
19 // complete通道报告处理任务已经完成
20 complete chan error
21
22 // timeout报告处理任务已经超时
23 timeout <-chan time.Time
24
25 // tasks持有一组以索引顺序依次执行的
26 // 函数
27 tasks []func(int)
28 }
29
30 // ErrTimeout会在任务执行超时时返回
31 var ErrTimeout = errors.New("received timeout")
32
33 // ErrInterrupt会在接收到操作系统的事件时返回
34 var ErrInterrupt = errors.New("received interrupt")
35
36 // New返回一个新的准备使用的Runner
37 func New(d time.Duration) *Runner {
38 return &Runner{
39 interrupt: make(chan os.Signal, 1),
40 complete: make(chan error),
41 timeout: time.After(d),
42 }
43 }
44
45 // Add将一个任务附加到Runner上。这个任务是一个
46 // 接收一个int类型的ID作为参数的函数
47 func (r *Runner) Add(tasks ...func(int)) {
48 r.tasks = append(r.tasks, tasks...)
49 }
50
51 // Start执行所有任务，并监视通道事件
52 func (r *Runner) Start() error {
53 // 我们希望接收所有中断信号
54 signal.Notify(r.interrupt, os.Interrupt)
55
56 // 用不同的goroutine执行不同的任务
57 go func() {
58 r.complete <- r.run()
59 }()
60
61 select {
62 // 当任务处理完成时发出的信号
63 case err := <-r.complete:
64 return err
65
66 // 当任务处理程序运行超时时发出的信号
67 case <-r.timeout:
68 return ErrTimeout
69 }
70 }
71
72 // run执行每一个已注册的任务
73 func (r *Runner) run() error {
74 for id, task := range r.tasks {
75 // 检测操作系统的中断信号
76 if r.gotInterrupt() {
77 return ErrInterrupt
78 }
79
80 // 执行已注册的任务
81 task(id)
82 }
83
84 return nil
85 }
86
87 // gotInterrupt验证是否接收到了中断信号
88 func (r *Runner) gotInterrupt() bool {
89 select {
90 // 当中断事件被触发时发出的信号
91 case <-r.interrupt:
92 // 停止接收后续的任何信号
93 signal.Stop(r.interrupt)
95 return true
96
97 // 继续正常运行
98 default:
99 return false
100 }
101 }
代码清单7-1 中的程序展示了依据调度运行的无人值守的面向任务的程序，及其所使用的并
发模式。在设计上，可支持以下终止点：
程序可以在分配的时间内完成工作，正常终止；
程序没有及时完成工作，“自杀”；
接收到操作系统发送的中断事件，程序立刻试图清理状态并停止工作。
让我们走查一遍代码，看看每个终止点是如何实现的，如代码清单7-2所示。
代码清单7-2 runner/runner.go：第12行到第28行
12 // Runner在给定的超时时间内执行一组任务，
13 // 并且在操作系统发送中断信号时结束这些任务
14 type Runner struct {
15 // interrupt通道报告从操作系统
16 // 发送的信号
17 interrupt chan os.Signal
18
19 // complete通道报告处理任务已经完成
20 complete chan error
21
22 // timeout报告处理任务已经超时
23 timeout <-chan time.Time
24
25 // tasks持有一组以索引顺序依次执行的
26 // 函数
27 tasks []func(int)
28 }
代码清单7-2从第14行声明Runner结构开始。这个类型声明了3个通道，用来辅助管理
程序的生命周期，以及用来表示顺序执行的不同任务的函数切片。
第 17 行的 interrupt 通道收发 os.Signal 接口类型的值，用来从主机操作系统接收中
断事件。os.Signal接口的声明如代码清单7-3所示。
代码清单7-3 golang.org/pkg/os/#Signal
// Signal用来描述操作系统发送的信号。其底层实现通常会
// 依赖操作系统的具体实现：在UNIX系统上是
// syscall.Signal
type Signal interface {
String() string
Signal()//用来区分其他Stringer
}
代码清单7-3展示了os.Signal接口的声明。这个接口抽象了不同操作系统上捕获和报告
信号事件的具体实现。
第二个字段被命名为 complete，是一个收发 error 接口类型值的通道，如代码清单 7-4
所示。
代码清单7-4 runner/runner.go：第19行到第20行
19 // complete通道报告处理任务已经完成
20 complete chan error
这个通道被命名为 complete，因为它被执行任务的 goroutine 用来发送任务已经完成的信
号。如果执行任务时发生了错误，会通过这个通道发回一个 error 接口类型的值。如果没有发
生错误，会通过这个通道发回一个nil值作为error接口值。
第三个字段被命名为timeout，接收time.Time值，如代码清单7-5所示。
代码清单7-5 runner/runner.go：第22行到第23行
22 // timeout报告处理任务已经超时
23 timeout <-chan time.Time
这个通道用来管理执行任务的时间。如果从这个通道接收到一个time.Time的值，这个程
序就会试图清理状态并停止工作。
最后一个字段被命名为tasks，是一个函数值的切片，如代码清单7-6所示。
代码清单7-6 runner/runner.go：第25行到第27行
25 // tasks持有一组以索引顺序依次执行的
26 // 函数
27 tasks []func(int)
这些函数值代表一个接一个顺序执行的函数。会有一个与 main 函数分离的 goroutine 来执
行这些函数。
现在已经声明了Runner类型，接下来看一下两个error接口变量，这两个变量分别代表
不同的错误值，如代码清单7-7所示。
代码清单7-7 runner/runner.go：第30行到第34行
30 // ErrTimeout会在任务执行超时时返回
31 var ErrTimeout = errors.New("received timeout")
32
33 // ErrInterrupt会在接收到操作系统的事件时返回
34 var ErrInterrupt = errors.New("received interrupt")
第一个 error 接口变量名为 ErrTimeout。这个错误值会在收到超时事件时，由 Start
方法返回。第二个error接口变量名为ErrInterrupt。这个错误值会在收到操作系统的中断
事件时，由Start方法返回。
现在我们来看一下用户如何创建一个Runner类型的值，如代码清单7-8所示。
代码清单7-8 runner/runner.go：第36行到第43行
36 // New返回一个新的准备使用的Runner
37 func New(d time.Duration) *Runner {
38 return &Runner{
39 interrupt: make(chan os.Signal, 1),
40 complete: make(chan error),
41 timeout: time.After(d),
42 }
43 }
代码清单7-8 展示了名为New的工厂函数。这个函数接收一个time.Duration类型的值，
并返回Runner类型的指针。这个函数会创建一个Runner类型的值，并初始化每个通道字段。
因为task字段的零值是nil，已经满足初始化的要求，所以没有被明确初始化。每个通道字段
都有独立的初始化过程，让我们探究一下每个字段的初始化细节。
通道interrupt被初始化为缓冲区容量为1的通道。这可以保证通道至少能接收一个来自
语言运行时的os.Signal值，确保语言运行时发送这个事件的时候不会被阻塞。如果goroutine
没有准备好接收这个值，这个值就会被丢弃。例如，如果用户反复敲 Ctrl+C 组合键，程序只会
在这个通道的缓冲区可用的时候接收事件，其余的所有事件都会被丢弃。
通道complete被初始化为无缓冲的通道。当执行任务的goroutine完成时，会向这个通道
发送一个error类型的值或者nil值。之后就会等待main函数接收这个值。一旦main接收
了这个error值，goroutine就可以安全地终止了。
最后一个通道 timeout 是用 time 包的 After 函数初始化的。After 函数返回一个
time.Time类型的通道。语言运行时会在指定的duration时间到期之后，向这个通道发送一
个time.Time的值。
现在知道了如何创建并初始化一个 Runner 值，我们再来看一下与 Runner 类型关联的方
法。第一个方法Add用来增加一个要执行的任务函数，如代码清单7-9所示。
代码清单7-9 runner/runner.go：第45行到第49行
45 // Add将一个任务附加到Runner上。这个任务是一个
46 // 接收一个int类型的ID作为参数的函数
47 func (r *Runner) Add(tasks ...func(int)) {
48 r.tasks = append(r.tasks, tasks...)
49 }
代码清单7-9展示了Add方法，这个方法接收一个名为tasks的可变参数。可变参数可以
接受任意数量的值作为传入参数。这个例子里，这些传入的值必须是一个接收一个整数且什么都
不返回的函数。函数执行时的参数tasks是一个存储所有这些传入函数值的切片。
现在让我们来看一下run方法，如代码清单7-10所示。
代码清单7-10 runner/runner.go：第72行到第85行
72 // run执行每一个已注册的任务
73 func (r *Runner) run() error {
74 for id, task := range r.tasks {
75 // 检测操作系统的中断信号
76 if r.gotInterrupt() {
77 return ErrInterrupt
78 }
79
80 // 执行已注册的任务
81 task(id)
82 }
83
84 return nil
85 }
代码清单7-10的第73行的run方法会迭代tasks切片，并按顺序执行每个函数。函数会
在第81行被执行。在执行之前，会在第76行调用gotInterrupt方法来检查是否有要从操作
系统接收的事件。
代码清单7-11中的方法gotInterrupt展示了带default分支的select语句的经典
用法。
代码清单7-11 runner/runner.go：第87行到第101行
87 // gotInterrupt验证是否接收到了中断信号
88 func (r *Runner) gotInterrupt() bool {
89 select {
90 // 当中断事件被触发时发出的信号
91 case <-r.interrupt:
92 // 停止接收后续的任何信号
93 signal.Stop(r.interrupt)
95 return true
96
97 // 继续正常运行
98 default:
99 return false
100 }
101 }
在第 91 行，代码试图从 interrupt 通道去接收信号。一般来说，select 语句在没有任
何要接收的数据时会阻塞，不过有了第98行的default分支就不会阻塞了。default分支会
将接收interrupt通道的阻塞调用转变为非阻塞的。如果interrupt通道有中断信号需要接
收，就会接收并处理这个中断。如果没有需要接收的信号，就会执行default分支。
当收到中断信号后，代码会通过在第 93 行调用 Stop 方法来停止接收之后的所有事件。之
后函数返回 true。如果没有收到中断信号，在第 99 行该方法会返回 false。本质上，
gotInterrupt方法会让goroutine检查中断信号，如果没有发出中断信号，就继续处理工作。
这个包里的最后一个方法名为Start，如代码清单7-12所示。
代码清单7-12 runner/runner.go：第51行到第70行
51 // Start执行所有任务，并监视通道事件
52 func (r *Runner) Start() error {
53 // 我们希望接收所有中断信号
54 signal.Notify(r.interrupt, os.Interrupt)
55