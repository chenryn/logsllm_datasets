native support for userscripts and, hence, did not require a dedicated browser
extension. All experiments were conducted on a MacBook Pro (Os X 10.7.2,
Core i7, 2,2 GHz, 8GB RAM). The Internet Explorer evaluation was done using
a Windows 7 virtual machine, running in VMWare Fusion 5. For all sites, the
DOM integrity validation was performed and for all encountered widgets, also
the visibility check.
One of the evaluation’s goals was to examine to which degree real-world Web
code is compatible with our protection approach. For no site out of the test
bed, the DOM integrity check failed. Furthermore, as it can be seen in Table 4
2 Greasemonkey: https://addons.mozilla.org/de/firefox/addon/greasemonkey/
3 NinjaKit: https://github.com/os0x/NinjaKit
4 IE/Pro: http://www.ie7pro.com/
Tamper-Resistant LikeJacking Protection
281
Table 3. Browser performance measurements
Browser
Firefox1
Google Chrome2
Safari3
Internet Explorer4
Min5 Max5 Average5 Median5
1
3
1
1
135
117
62
141
15.0
21.0
3.0
52.0
13
18
3
40
1x
: Firefox 19.0.2 / OsX 10.7, 2 : Chrome 26.0.1410.43 / OsX 10.7,
3: Safari 5.1.2 / OsX 10.7, 4: IE 9.0.8112 / Win7 (VMWare),
5 : All times in milliseconds
for the vast majority of the widgets (1537 out of 1648), the visibility could be
veriﬁed. For the remaining 111 widgets, manual analysis in respect to providing
interoperability would be required.
Furthermore, as documented in Table 3 and Figure 2, our protection mecha-
nism only causes negligible performance costs, with a general median overhead
of less then 40ms and worst case scenarios well below 200ms, even for large,
non-trivial DOM structures with up to 3000 nodes.
8 Related Work
Further Attack Variants: Besides the basic attack, which utilizes invisible
iFrames, several diﬀerent forms of Clickjacking attacks were discovered. For one,
Bordi and Kotowicz demonstrated diﬀerent methods to conduct a so called Cur-
sorjacking attack [4,15]. Thereby, the real mouse cursor is hidden and fake cursor
is presented to the user at a diﬀerent position. When interacting with the Web
site the user only recognizes the fake cursor. When clicking the mouse, the click
event does not occur at the position of the visible fake cursor but at the position
of the hidden cursor. Therefore, the user is tricked into clicking an element that
he not intended to click.
Adding protection against such attacks to our countermeasure is straight for-
ward: The CSS styling of the mouse pointer can be added to the forbidden
visibility conditions.
Furthermore, Clickjacking attacks are not limited to invisible iFrames. Za-
lewski and Huang showed that it is also possible to use popup windows instead
of frames [11,31]. While Zalewski’s approach utilizes the JavaScript history API
and a timing attack, Huang came up with the so called Double Clickjacking
attack. Thereby, a Web site opens a popup window, behind the actual browser
window. Then the Web site lures the user into double clicking on the visible
Web site. When the ﬁrst click hits to page the popup window is brought to the
front and therefore, the second click hits the page that was loaded within the
popup window. After a few millisecond the Web site closes the popup window
and therefore the user does not recognizes the attack.
Our mechanism is secure against Huang’s double-click attack: As the position
guard overlay (see Sec. 4.4) does not receive the required mouse-over event, it
does not change its pointer-events and, hence, catches the click before it can
282
M. Johns and S. Lekies
Table 4. Compatibility testing with deployed widgets
Widget provider Sites1 Total2 Visible Hidden CSS3 DOM4 Obstructed5
Facebook
Google+
Twitter
837 779 (93%) 58 (7%) 34
277 255 (92%) 22 (8%)
4
534 503 (94%) 31 (6%) 22
391
167
207
8
13
1
16
5
8
1: Number of sites that include at least one widget of the provider (out of 635) 2 : Total number of found widgets
Reasons for failed visibility check: 3: CSS properties (see Sec 4.1),4: DOM properties (see Sec 4.3),
5: Obstructing overlays (see Sec 4.2)
reach the widget. Also, even if the mouse is slightly moved between the clicks,
the entering position of the mouse pointer will be in the middle of the overlay
and not at the borders, which is a clear indicator for suspicious behavior.
Server-Side Countermeasures: Besides the general ClickJacking-focused ap-
proaches discussed in Sec 2.3, some mechanism have been proposed that also take
Likejacking into account. When the ﬁrst Likejacking attacks were conducted,
Facebook implemented some countermeasures to detect ”malicious likes” [30].
When ever a malicious situation is detected, the user is asked to conﬁrm the ac-
tion, instead of seamlessly processing the ”like request”. Unfortunately, precise
details on the implementation are not available and the problem still exists in
the wild.
Another approach was proposed by Brad Hill [9]. He suggested to utilize user
interface randomization as an anti-clickjacking strategy. Thereby, a Web widget
renders its buttons in diﬀerent location each time it is loaded.Therefore, the at-
tacker cannot be sure in which position the button is being placed and is only
able to use a trial and error approach to conduct the attack. By analyzing the
ﬁrst click success rate, a Widget provider would be able to detect Likejacking
campaigns very soon, as in the legitimate use case the ﬁrst click success rate is
signiﬁcantly higher than in the trial and error Clickjacking attack. However, ran-
domizing the user interface decreases user experience and might distract user’s
from using a widget. Furthermore, the method is not applicable to more complex
widgets.
Client-Side Countermeasures: The ﬁrst client-side countermeasures was the
NoScript ClearClick Firefox plug-in [18]. ClearClick detects a Clickjacking at-
tack by creating two screenshots and comparing the results. One screenshot is
taken from the plugin object or the framed page the user attempts to click on.
The second screenshot shows how the page/object is embedded into the page. If
the two screenshots diﬀer, the object’s visibility is somehow tampered and there-
fore ClearClick shows a warning to the user. Furthermore, ClickIDS, a related,
experimental browser extension, was presented in [1].
In 2012 Brad Hill suggested to introduce a new type of control that requires
more user interaction than just a click (e.g. a Swipe, Scrub, or holding the
mouse for a certain amount of time, etc) [10]. While the user interacts with
the control, the browser forces the corresponding markup to become completely
visible. While doing so, the browser could even dim or hide other elements so
Tamper-Resistant LikeJacking Protection
283
that these elements do not overlap or hide the security sensitive control. However,
until now this idea has not been implemented by any major browser.
Besides these mechanisms a few other client-side mechanisms were proposed to
stop Clickjacking attacks in the form of alternative browser designs (e.g Gazelle
[29], the OP Web browser [6] or the secure Web browser [13]). For the time
being, none of these proposals have been adopted by the major browsers.
9 Conclusion
In this paper, we presented a novel methodology to protect Web widgets against
LikeJacking attacks. Our approach does not require browser modiﬁcations and is
fully interoperable with today’s JavaScript capabilities. Using a practical evalu-
ation of 635 site, we demonstrated our technique’s compatibility with productive
Web code and showed that the approach’s performance scales well, while causing
negligible overhead.
Outlook: Because of the closeness of LikeJacking to social engineering (see Sec-
tion 7.1) and the highly ﬂexible nature of CSS, the visibility validation step of
our approach has to be regarded as its most fragile component. However, when
approaching the topic from a wider angle, it becomes apparent that LikeJacking
is only one instance in a lager problem space:
The underlying challenge occurs every time, when a third party service re-
quires reliable information on the Web execution context in which it is included.
Hence, the more signiﬁcant contribution of this paper is the general methodol-
ogy, that allows third party components to trustworthy collect evidence on the
state of the integrator page and securely communicate the result, with visibility
validation being only one example for such an evidence collecting process.
References
1. Balduzzi, M., Egele, M., Kirda, E., Balzarotti, D., Kruegel, C.: A solution for the
automated detection of clickjacking attacks. In: AsiaCCS (2010)
2. Barnett, R.: Detecting Successful XSS Testing with JS Overrides. Blog post, Trust-
wave SpiderLabs (November 2012), http://blog.spiderlabs.com/2012/11/
detecting-successful-xss-testing-with-js-overrides.html
April 7, 2013)
(last
accessed
3. Barth, A., Jackson, C., Mitchell, J.C.: Robust Defenses for Cross-Site Request
Forgery. In: CCS 2009 (2009)
4. Bordi, E.: Proof of concept - cursorjacking (noscript),
http://static.vulnerability.fr/noscript-cursorjacking.html
5. Crockford, D.: Private Members in JavaScript (2001),
http://www.crockford.com/javascript/private.html (Janauary 11, 2006)
6. Grier, C., Tang, S., King, S.T.: Secure Web Browsing with the OP Web Browser.
In: IEEE Symposium on Security and Privacy (2008)
7. Hansen, R., Grossman, J.: Clickjacking (August 2008),
http://www.sectheory.com/clickjacking.htm
284
M. Johns and S. Lekies
8. Heiderich, M., Frosch, T., Holz, T.: IceShield: Detection and mitigation of mali-
cious websites with a frozen DOM. In: Sommer, R., Balzarotti, D., Maier, G. (eds.)
RAID 2011. LNCS, vol. 6961, pp. 281–300. Springer, Heidelberg (2011)
9. Hill, B.: Adaptive user interface randomization as an anti-clickjacking strategy
(May 2012)
10. Hill, B.: Anti-clickjacking protected interactive elements (January 2012)
11. Huang, L.-S., Jackson, C.: Clickjacking attacks unresolved. White paper, CyLab
(July 2011)
12. Huang, L.-S., Moshchuk, A., Wang, H.J., Schechter, S., Jackson, C.: Clickjacking:
attacks and defenses. In: USENIX Security (2012)
13. Ioannidis, S., Bellovin, S.M.: Building a secure web browser. In: USENIX Technical
Conference (2001)
14. Johns, M., Winter, J.: RequestRodeo: Client Side Protection against Session Rid-
ing. In: OWASP Europe 2006, refereed papers track (May 2006)
15. Kotowicz, K.: Cursorjacking again (January 2012),
http://blog.kotowicz.net/2012/01/cursorjacking-again.html
16. Lekies, S., Heiderich, M., Appelt, D., Holz, T., Johns, M.: On the fragility and
limitations of current browser-provided clickjacking protection schemes. In: WOOT
2012 (2012)
17. Magazinius, J., Phung, P.H., Sands, D.: Safe wrappers and sane policies for self
protecting javaScript. In: Aura, T., J¨arvinen, K., Nyberg, K. (eds.) NordSec 2010.
LNCS, vol. 7127, pp. 239–255. Springer, Heidelberg (2012)
18. Maone, G.: Noscript clearclick (January 2012),
http://noscript.net/faq#clearclick
19. Maone, G., Huang, D.L.-S., Gondrom, T., Hill, B.: User Interface Safety Di-
rectives for Content Security Policy. W3C Working Draft 20 (November 2012),
http://www.w3.org/TR/UISafety/
20. Microsoft. IE8 Security Part VII: ClickJacking Defenses (2009)
21. Mustaca, S.: Old Facebook likejacking scam in use again, Avira Security Blog
(February 2013),
http://techblog.avira.com/2013/02/11/old-facebook-likejacking-
scam-in-use-again-shocking-at-14-she-did-that-in-the-public-school/en/
22. Mozilla Developer Network. delete (February 2013),
https://developer.mozilla.org/en-US/docs/JavaScript/Reference/
Operators/delete
23. Nikiforakis, N., Invernizzi, L., Kapravelos, A., Van Acker, S., Joosen, W., Kruegel,
C., Piessens, F., Vigna, G.: You Are What You Include: Large-scale Evaluation of
Remote JavaScript Inclusions. In: CCS 2012 (2012)
24. Phung, P.H., Sands, D., Chudnov, A.: Lightweight self-protecting javascript. In:
ASIACCS 2009 (2009)
25. Ruderman, J.: Bug 154957 - iframe content background defaults to transparent
(June 2002), https://bugzilla.mozilla.org/showbug.cgi?id=154957
26. Rydstedt, G., Bursztein, E., Boneh, D., Jackson, C.: Busting frame busting: a study
of clickjacking vulnerabilities at popular sites. In: IEEE Oakland Web 2.0 Security
and Privacy, W2SP 2010 (2010)
27. Shepherd, E.: window.postmessage (October 2011),
https://developer.mozilla.org/en/DOM/window.postMessage
Tamper-Resistant LikeJacking Protection
285
28. SophosLabs. Clickjacking (May 2010),
http://nakedsecurity.sophos.com/2010/05/31/facebook-likejacking-worm/
(last accessed July 4, 2013)
29. Wang, H.J., Grier, C., Moshchuk, A., King, S.T., Choud-hury, P., Venter, H.: The
Multi-Principal OS Construction of the Gazelle Web Browser. In: USENIX Security
Symposium (2009)
30. Wisniewski, C.: Facebook adds speed bump to slow down likejackers (March 2011)
31. Zalewski, M.: X-frame-options is worth less than you think. Website (December
2011), http://lcamtuf.coredump.cx/clickit/
32. Zaytsev, J.: Understanding delete (January 2010),
http://perfectionkills.com/understanding-delete/