### Native Support for Userscripts and Browser Compatibility

The system natively supports userscripts, eliminating the need for a dedicated browser extension. All experiments were conducted on a MacBook Pro (OS X 10.7.2, Core i7, 2.2 GHz, 8GB RAM). The evaluation for Internet Explorer was performed using a Windows 7 virtual machine running in VMware Fusion 5. For all tested websites, DOM integrity validation was conducted, and visibility checks were performed for all encountered widgets.

### Evaluation Goals and Results

One of the primary goals of the evaluation was to assess the compatibility of real-world web code with our protection approach. The DOM integrity check passed for all sites in the test bed. Additionally, visibility could be verified for the vast majority of widgets (1537 out of 1648). For the remaining 111 widgets, manual analysis would be required to ensure interoperability.

### Performance Impact

As documented in Table 3 and Figure 2, our protection mechanism incurs minimal performance overhead. The general median overhead is less than 40 milliseconds, with worst-case scenarios well below 200 milliseconds, even for large, non-trivial DOM structures with up to 3000 nodes.

### Related Work

#### Further Attack Variants

Beyond the basic Clickjacking attack, which uses invisible iframes, several other forms of Clickjacking have been discovered. Bordi and Kotowicz demonstrated different methods for conducting a Cursorjacking attack [4,15]. In this attack, the real mouse cursor is hidden, and a fake cursor is presented to the user at a different position. When the user interacts with the website, they only see the fake cursor. When clicking, the click event occurs at the position of the hidden cursor, tricking the user into clicking an unintended element.

Adding protection against such attacks to our countermeasure is straightforward: the CSS styling of the mouse pointer can be added to the forbidden visibility conditions.

Zalewski and Huang showed that Clickjacking attacks are not limited to invisible iframes. Zalewski's approach uses the JavaScript history API and a timing attack, while Huang introduced the Double Clickjacking attack. In this attack, a website opens a popup window behind the actual browser window. The website lures the user into double-clicking on the visible site. The first click brings the popup window to the front, causing the second click to hit the page within the popup. After a few milliseconds, the popup is closed, making the attack undetectable to the user.

Our mechanism is secure against Huang’s double-click attack: the position guard overlay (see Section 4.4) does not receive the required mouse-over event, preventing it from changing its pointer-events. This ensures that the click is intercepted before it reaches the widget. Even if the mouse is slightly moved between clicks, the entering position of the mouse pointer will be in the middle of the overlay, indicating suspicious behavior.

#### Server-Side Countermeasures

In addition to the general Clickjacking-focused approaches discussed in Section 2.3, some mechanisms have been proposed that specifically address Likejacking. When the first Likejacking attacks occurred, Facebook implemented countermeasures to detect "malicious likes" [30]. If a malicious situation is detected, the user is prompted to confirm the action instead of processing the "like request" seamlessly. However, precise details on the implementation are not available, and the problem still persists.

Brad Hill [9] suggested using user interface randomization as an anti-Clickjacking strategy. This method involves rendering buttons in different locations each time a widget is loaded, making it difficult for attackers to predict their positions. By analyzing the first click success rate, widget providers can detect Likejacking campaigns early, as legitimate use cases have a significantly higher first click success rate. However, randomizing the user interface can decrease user experience and may distract users from using the widget. This method is also not applicable to more complex widgets.

#### Client-Side Countermeasures

The first client-side countermeasure was the NoScript ClearClick Firefox plugin [18]. ClearClick detects Clickjacking attacks by comparing two screenshots: one of the plugin object or framed page the user attempts to click on, and another showing how the page/object is embedded. If the screenshots differ, the object’s visibility is tampered with, and ClearClick alerts the user. Additionally, ClickIDS, a related experimental browser extension, was presented in [1].

In 2012, Brad Hill proposed introducing a new type of control that requires more user interaction than just a click (e.g., a swipe, scrub, or holding the mouse for a certain amount of time) [10]. During interaction, the browser forces the corresponding markup to become completely visible, potentially dimming or hiding other elements to prevent overlap. However, this idea has not yet been implemented by any major browser.

Other client-side mechanisms have been proposed to stop Clickjacking attacks through alternative browser designs (e.g., Gazelle [29], the OP Web browser [6], or the secure Web browser [13]). As of now, none of these proposals have been adopted by major browsers.

### Conclusion

In this paper, we presented a novel methodology to protect web widgets against Likejacking attacks. Our approach does not require browser modifications and is fully interoperable with today’s JavaScript capabilities. Through a practical evaluation of 635 sites, we demonstrated the technique’s compatibility with production web code and showed that the approach’s performance scales well, with negligible overhead.

### Outlook

Given the close relationship between Likejacking and social engineering (see Section 7.1) and the highly flexible nature of CSS, the visibility validation step of our approach is its most fragile component. However, when viewed from a broader perspective, it becomes clear that Likejacking is just one instance in a larger problem space. The underlying challenge arises whenever a third-party service requires reliable information about the web execution context in which it is included. Thus, the more significant contribution of this paper is the general methodology that allows third-party components to collect trustworthy evidence on the state of the integrator page and securely communicate the results, with visibility validation being just one example of such an evidence-collecting process.

### References

1. Balduzzi, M., Egele, M., Kirda, E., Balzarotti, D., Kruegel, C.: A solution for the automated detection of clickjacking attacks. In: AsiaCCS (2010)
2. Barnett, R.: Detecting Successful XSS Testing with JS Overrides. Blog post, Trustwave SpiderLabs (November 2012), http://blog.spiderlabs.com/2012/11/detecting-successful-xss-testing-with-js-overrides.html (last accessed April 7, 2013)
3. Barth, A., Jackson, C., Mitchell, J.C.: Robust Defenses for Cross-Site Request Forgery. In: CCS 2009 (2009)
4. Bordi, E.: Proof of concept - cursorjacking (noscript), http://static.vulnerability.fr/noscript-cursorjacking.html
5. Crockford, D.: Private Members in JavaScript (2001), http://www.crockford.com/javascript/private.html (January 11, 2006)
6. Grier, C., Tang, S., King, S.T.: Secure Web Browsing with the OP Web Browser. In: IEEE Symposium on Security and Privacy (2008)
7. Hansen, R., Grossman, J.: Clickjacking (August 2008), http://www.sectheory.com/clickjacking.htm
8. Heiderich, M., Frosch, T., Holz, T.: IceShield: Detection and mitigation of malicious websites with a frozen DOM. In: Sommer, R., Balzarotti, D., Maier, G. (eds.) RAID 2011. LNCS, vol. 6961, pp. 281–300. Springer, Heidelberg (2011)
9. Hill, B.: Adaptive user interface randomization as an anti-clickjacking strategy (May 2012)
10. Hill, B.: Anti-clickjacking protected interactive elements (January 2012)
11. Huang, L.-S., Jackson, C.: Clickjacking attacks unresolved. White paper, CyLab (July 2011)
12. Huang, L.-S., Moshchuk, A., Wang, H.J., Schechter, S., Jackson, C.: Clickjacking: attacks and defenses. In: USENIX Security (2012)
13. Ioannidis, S., Bellovin, S.M.: Building a secure web browser. In: USENIX Technical Conference (2001)
14. Johns, M., Winter, J.: RequestRodeo: Client Side Protection against Session Riding. In: OWASP Europe 2006, refereed papers track (May 2006)
15. Kotowicz, K.: Cursorjacking again (January 2012), http://blog.kotowicz.net/2012/01/cursorjacking-again.html
16. Lekies, S., Heiderich, M., Appelt, D., Holz, T., Johns, M.: On the fragility and limitations of current browser-provided clickjacking protection schemes. In: WOOT 2012 (2012)
17. Magazinius, J., Phung, P.H., Sands, D.: Safe wrappers and sane policies for self-protecting JavaScript. In: Aura, T., Järvinen, K., Nyberg, K. (eds.) NordSec 2010. LNCS, vol. 7127, pp. 239–255. Springer, Heidelberg (2012)
18. Maone, G.: NoScript ClearClick (January 2012), http://noscript.net/faq#clearclick
19. Maone, G., Huang, D.L.-S., Gondrom, T., Hill, B.: User Interface Safety Directives for Content Security Policy. W3C Working Draft 20 (November 2012), http://www.w3.org/TR/UISafety/
20. Microsoft. IE8 Security Part VII: ClickJacking Defenses (2009)
21. Mustaca, S.: Old Facebook likejacking scam in use again, Avira Security Blog (February 2013), http://techblog.avira.com/2013/02/11/old-facebook-likejacking-scam-in-use-again-shocking-at-14-she-did-that-in-the-public-school/en/
22. Mozilla Developer Network. delete (February 2013), https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/delete
23. Nikiforakis, N., Invernizzi, L., Kapravelos, A., Van Acker, S., Joosen, W., Kruegel, C., Piessens, F., Vigna, G.: You Are What You Include: Large-scale Evaluation of Remote JavaScript Inclusions. In: CCS 2012 (2012)
24. Phung, P.H., Sands, D., Chudnov, A.: Lightweight self-protecting JavaScript. In: ASIACCS 2009 (2009)
25. Ruderman, J.: Bug 154957 - iframe content background defaults to transparent (June 2002), https://bugzilla.mozilla.org/showbug.cgi?id=154957
26. Rydstedt, G., Bursztein, E., Boneh, D., Jackson, C.: Busting frame busting: a study of clickjacking vulnerabilities at popular sites. In: IEEE Oakland Web 2.0 Security and Privacy, W2SP 2010 (2010)
27. Shepherd, E.: window.postmessage (October 2011), https://developer.mozilla.org/en/DOM/window.postMessage
28. SophosLabs. Clickjacking (May 2010), http://nakedsecurity.sophos.com/2010/05/31/facebook-likejacking-worm/ (last accessed July 4, 2013)
29. Wang, H.J., Grier, C., Moshchuk, A., King, S.T., Choudhury, P., Venter, H.: The Multi-Principal OS Construction of the Gazelle Web Browser. In: USENIX Security Symposium (2009)
30. Wisniewski, C.: Facebook adds speed bump to slow down likejackers (March 2011)
31. Zalewski, M.: X-frame-options is worth less than you think. Website (December 2011), http://lcamtuf.coredump.cx/clickit/
32. Zaytsev, J.: Understanding delete (January 2010), http://perfectionkills.com/understanding-delete/