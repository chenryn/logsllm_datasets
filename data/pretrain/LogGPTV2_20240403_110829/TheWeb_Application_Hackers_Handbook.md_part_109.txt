sockets, 723 escaping, 419–420 inference from published
URL redirection, 723 fi nancial services, 412–416 content discovering,
user input, 718–719 forced browsing, 411 85–89
bbiinnddeexx..iinndddd 885544 88//1199//22001111 1122::0011::3355 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 855
Index n A–A 855
public information dynamic code execution, 722 browser extensions casino
discovering, 89–91 fi le access, 720 component, 134
web server leveraged for OS command execution, CAPTCHA, 198–199
discovering, 91–93 722–723 customized automation,
hidden parameters, 96–97 sockets, 723 610–611
input entry points URL redirection, 723 client-side attacks, 13
HTTP headers, 100–101 user input, 718–719 cloud computing, 14, 663–665
out-of-band channels, 101 error messages, 628 cloned systems, 664
request parameters, 99 OS command injection via, tokens, 665
URL fi le paths, 98–99 360–361 cookie injection methods,
methodology, 114 redirection, 392 536–537
naming schemes, 85–86 security confi guration, 723–724 credentials, 171
brute-force exercise, 88 session interaction, 719–720 defense mechanisms handling,
identifying, 87 stack traces, 617 30–35
path traversal vulnerabilities, ViewState administrator alerting, 33–34
371 attackers, 127 audit log maintenance, 31–32
server-side Base64 encoding, 125–126 errors, 30–31
functionality identifi cation, Burp Suite, 126 reacting to, 34–35
106–110 client-side data transmission, disabled elements, 132–133
technology identifi cation, 124–127 encoding and, 66–67
101–106 purpose, 125 forgotten password, 14
web application pages versus security, 155 format string vulnerabilities,
functional paths, 93–96 ASPs. See application service 644
application servers. See web providers HTTP header injection,
servers .aspx fi le extension, 107 534–535
application service providers Astely, Rick, 541 intentions, 13
(ASPs), 656–657. Seealso ASP. attack payloads, XSS, 443–447 login function, 164–165
NET; cloud computing autocomplete, 446 MS-SQL databases, 326–327
attackers, 658–665 escalating client-side, 447 multilayered privilege model,
access, 658–660 escalation to other pages, 283
deliberate backdoor scripts, 473–474 multistage login function, 188
660–661 inducing actions, 445–446 MySQL, 328
between web applications, Trojan injection, 444–445 network hosts, 561–562
660–663 trust relationship exploitation, non-HTTP services, 562–563
fi nancial services, 658 446–447 NULL bytes, 23–24
organization, 658 virtual defacement, 443–444 opaque data, 124
securing, 665–667 attack surface Oracle databases, 327
component segregation, 667 application logic fl aws, 405 other users, 431–432
customer access, 665–666 application mapping, 111 path traversal vulnerabilities
customer functionality example, 112–113 circumventing obstacles,
segregation, 666 hacker’s methodology, 374–377
shared, 657–658 application logic fl aws, successful, 374
threats, 657 842 target locations, 370–371
VPN, 659 hacker’s methodology remote, 427
arbitrary input. See user input mapping, 800 session management, 20
architecture. See tiered attackers. Seealsospecifi cattacks session token scripts, 217
architectures access controls, 266–278 shared hosting, 658–665
Armstrong, Dave, 505 types, 258–260 access, 658–660
TheArtofSoftwareSecurity usernames and passwords, deliberate backdoor scripts,
Assessment (Dowd & 275–276 660–661
McDonald & Schuh), 634 ASP.NET ViewState, 127 between web applications,
ASCII code, 67 ASPs, 658–665 660–663
US-ASCII, 464 access, 658–660 stored XSS steps, 438–439
Asirra puzzles, Microsoft, 612 deliberate backdoor scripts, tiered architectures, 648–654
ASP.NET, 54, 103 660–661 categories, 648–649
API methods between web applications, tokens
database, 721 660–663 encrypting, 232–233
bbiinnddeexx..iinndddd 885555 88//1199//22001111 1122::0011::3355 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 856
856 Index n B–B
meaningful, 212 insecure web storage, 811 nonunique, 181–182
URL translation, 396–397 password guessing, 807 predictable, 182–183, 197
username, 168 password quality, 806 uniqueness, 809
web application security, 6 password recovery, 807–808 XSS, 473–474
web browsers, 559–568 “remember me” functions, autocomplete
websites created by, 448–449 808 local privacy attacks, 552
XMLHttpRequest, 529 understanding, 805 XSS attack payloads, 446
XSS, 251 username enumeration, automation. See customized
attribute delimiters, HTML 806–807 automation
bypassing fi lters, 461–462 username uniqueness, 809
attribute names, HTML vulnerability exploitation for
B
bypassing fi lters, 461 unauthorized access,
backdoor password, 178–179
attribute values, HTML 813
source code, 708
bypassing fi lters, 462 HTML forms, 160–161
backdoor scripts, deliberate,
audit logs HTTP, 50–51
660–661
defense mechanisms handling sessions avoided with,
back-end components. Seealso
attackers, maintaining, 208–209
fi le inclusion; operating
31–32 impersonation, 178–180
system commands; path
key events, 32 hacker’s methodology,
traversal vulnerabilities
poorly protected, 32 808–809
value, 31 implementation fl aws in, access controls, 357
audit trail, 429 185–191 data transmission, 357
authentication. Seealso information leakage e-mail header injection,
access controls; session prevention, 195–196 398–399
management logging, 201 HPI, 390
anomalies, 201 login function causes, 393–394
application logic fl aws, 415–416 account suspension, 197–198 HPP, 394–395
broken, 7 fail-open, 185–186, 194 server-side HTTP redirection,
brute-force login function, multistage, 186–190, 194–195 390–392
162–165 verbose failure messages, exploiting, 391–392
CAPTCHA, 198–199 166–169 SMTP injection, 397–402
credentials monitoring, 201 fl aws, 400–401
incomplete validation, notifying, 201 preventing, 402
180–181 passwords SOAP injection, 386–388
insecure distribution, 184 change functionality, 171– banking application, 387–388
insecure storage, 190–191 172, 193 error messages, 388
secret handling of, 192–193 change functionality misuse, fi nding and exploiting, 389
strength, 192 199 preventing, 27, 390
transmission vulnerability, forgotten functionality, URL translation attacks,
169–171 173–175 396–397
validation, 193–195 predictable initial, 183 back-end request injection, 841
CSRF, 507–508 weak, 161–162 backslash character, escaping
as defense, 159 problems with, 19 with, 419
defense mechanisms handling “remember me” functions, backtick character, encapsulating
access with, 18–19 175–176, 193 function of, 363
design fl aws, 161–184 hacker’s methodology, 808 banking application
drop-down menus, 193 security, 191–201 multistage function, 263
eavesdroppers, 169 brute-force attack prevention, per-page tokens, 252–253
hacker’s methodology 196–199 SOAP injection, 387–388
application logic fl aws, subtleties, 195 banner grabbing, 101
811–813 smartcards, 206 Base64 encoding, 69
credentials, autogenerated, standalone vulnerability ASP.NET ViewState, 125–126
809–810 scanners, 778–779 basic authentication, 50–51
credentials, unsafe technologies, 160–161 batch queries, MS-SQL
distribution, 810–811 tokens, 160 databases, 317
credentials, unsafe usernames beating business limit,
transmission, 810 enumeration, 166–169, application logic fl aws,
impersonation, 808–809 806–807 416–417, 429
bbiinnddeexx..iinndddd 885566 88//1199//22001111 1122::0011::3355 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 857
Index n C–C 857
BeEF, 565–566 hidden content, 81–85 session-handling rules,
bit fl ipper, Burp Intruder, 593 login function, 162–165 606–609
encrypting tokens, 228–231 passwords in wiki, 424 session-handling tracer, 609
black-box code review, 702–703 buffer overfl ow business limit, application logic
blacklist-based fi lters, 23–24 detecting, 639–640 fl aws, 416–417, 429
XSS, 451–452 hacker’s methodology, 837–838 business logic exploitation, 259
blind SQL injection, 626 heap overfl ows, 635–636 bytecode
blocked characters, fi lters, off-by-one vulnerabilities, decompiling browser
311–312 636–638 extensions, 139–141
blog applications, input, 22 software, 687 JavaScript manipulation, 144
Boolean conditions, UNION source code, 709 obfuscation, 144–146
operator, 329 stack overfl ows, 634–635 downloading, 140
Boolean fl ag, 107 uncontrolled, 639 Flash, 141
boundary validation, input, URL length, 639 Java, 141
25–28, 313 bulk discount cheating, Silverlight, 141
breaking bank, application logic application logic fl aws, 418, source code recompiling
fl aws, 414–416 429 within browser, 142–143
browser extensions. Seealso Burp Intruder, 82–84, 86 outside browser, 143
Flash; Java; Silverlight bit fl ipper, 593 URL, 140
casino component, 133–134 encrypting tokens, 228–231
attackers, 134 “character frobber,” 593
C
Chrome, 750 customized automation,
client-side control of user input 590–602 CA certifi cate, Burp Suite,
with, 133–153 data harvesting, 598–600 758–759
data transmission interception, enumerating identifi ers, callbacks, function, 520
135–139 594–597 canonicalization
obstacles, 138–139 fuzzing, 600–602 input, 28–29
serialized data, 136–138 payloads web server software, 689–694
debugger attached to, 151–152 choosing, 592–594 CAPTCHA
decompiling, 139–150 positioning, 591–592 attackers, 198–199
bytecode, 139–141 predictable tokens, 213–214 customized automation,
bytecode obfuscation, response analysis, 594 610–611
144–146 sniper attack, 592 authentication, 198–199
Java applets example, 146–150 Unicode encoding, 375 bugs, 610–611
JavaScript manipulating user agent strings, 100 customized automation,
original bytecode, 144 Burp Proxy, 754–755 610–612
source code, 142–144 Burp Repeater, 473, 681, 766 attackers, 610–611
Firefox, 750 Burp Scanner, 764–765 automatically solving,
hacker’s methodology, 802–804 Burp Sequencer, 767 611–612
ActiveX controls, 804 auto analyze setting, 223 humans solving, 612
debugger, 803–804 token randomness testing, drones, 612
decompiling, 802–803 219–221 Cascading Style Sheets (CSS)
native client components, 153 Burp Spider, 74–76, 80 dynamically evaluated styles,
same-origin policy, 525–527 Burp Suite 459
Flash, 525–526 AMF, 137 font-family property,
Java, 527 application mapping, 268 518–519
Silverlight, 526–527 ASP.NET ViewState, 126 injection, cross-domain data
targeting approaches, 135 CA certifi cate, 758–759 capture, 517–519
technologies, 65 “change request method” web functionality, 60–61
browsers. See web browsers command, 474–475 casino component, browser
browsing history Comparer, 167 extensions, 133–134
JavaScript stealing, 560 Content Discovery, 88–89 attackers, 134
local privacy attacks, 552 DSer, 136–137 CBC.See cipher block chaining
brute-force techniques “request in browser,” 272–273 CGI query, 735–736
application mapping naming session-handling mechanisms, chaining
schemes exercise, 88 603–609 CBC
authentication security cookie jar, 603–604 encrypting tokens, 227–233
preventing, 196–199 request macros, 604–606 PKC # 5 padding, 227–233
bbiinnddeexx..iinndddd 885577 88//1199//22001111 1122::0011::3355 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 858
858 Index n C–C
XSS, 450–451 validation myths, 155–156 discovering, 80–93
“change request method” web functionality, 57–65 hacker’s methodology,
command, 474–475 Ajax, 62–63, 384 application mapping,
“character frobber,” Burp browser extension 796–797
Intruder, 593 technologies, 65 inference from published
checked exceptions, 30 CSS, 60–61 content discovering,
checkout, application logic fl aws, DOM, 62 85–89
410–411 forms, 58–60 Nikto discovering, 93
CheckQuantity applet, 141 HTML, 58 public information
Chrome, 750 HTML5, 64–65 discovering, 89–91
chrooted fi le system hyperlinks, 58 user-directed spidering
path traversal vulnerabilities, JavaScript, 61 discovering, 81–83
380–381 JSON, 63 web server leveraged for
UNIX, 381 same-origin policy, 64 discovering, 91–93
cipher block chaining (CBC) VBScript, 61 Wikto discovering, 92–93
encrypting tokens, 227–233 XSS attack payloads escalating, web server and default, 92,
PKC # 5 padding, 686–687 447 671–677
ciphertext, 224–226 cloned systems, 664 debug functionality, 671–672
.class fi les, 141 cloud computing hacker’s methodology, 847
ClearedFunds element, attackers, 14, 663–665 JMX, 674–676
387–388 cloned systems, 664 powerful functions, 673–674
cleartext, passwords, 190–191 tokens, 665 sample functionality, 672–673
clickjacking, 511. Seealso user defense mechanism, 664 Content Discovery, Burp Suite,
interface redress attacks feature-fi rst approach, 664–665 88–89
client components, native, 153 loss of control in, 663–664 content management system
client-side management tool migration (CMS), 77
attacks, 13 to, 664 web servers, 92
data transmission, 118–127 web applications, 5 Content-Length header, 42
ASP.NET ViewState, web storage, 665 POST request, 581
124–127 CMS. See content management Content-Type header, 136, 138,
for developers, 118 system 476, 478, 525–526
hacker’s methodology, 801 code browsing tools, 743 context-dependent, access
hidden HTML forms, 118–120 code injection, 288 controls, 258
HTTP cookies, 121 code review. See source code, Cookie header, 41, 47
opaque data, 123–124 review cookie injection
Referrer header, 122 commands. See operating system attacker methods, 536–537
security, 154–156 commands session fi xation, 537–540
URL parameters, 121–122 comments cookie jar, Burp Suite, 603–604
hacker’s methodology, data MySQL, 303–304, 312 cookies
transmission, 801 source code, 710–711 arbitrary, 537
HPP, 548–550 SQL, 312 attributes, 47
information disclosure leaks, Comparer, Burp Suite, 167 domain restrictions, 245–247
629 compiled applications. See native hacker’s methodology, 820–821
injection, 531–550 client components HTTP, 19, 47
SQL, 547–548 concealed sequences, 213–215 client-side data transmission,
JavaScript, validation with, concurrent logins, 250 121
130–131, 156 conditional errors, SQL injection, session management tokens,
security, 431–432 320–322 207–208, 234–236
session token hijacking, conjunctive queries fi lters, 350 HTTP header injection, 533
243–244 LDAP injection, 352–353 login function, 163
SQL injection, 547–548 CONNECT method, 682, 755 path restrictions, 247–248
SSL certifi cation, 138 content persistent, 550
user input controlled by, 117 enumerating and functionality, refl ected XSS, 437–438
browser extensions, 133–153 74–97 RemembeMe, 407–408
hacker’s methodology, hidden “remember me” functions,
801–802 brute-force techniques 175–176
HTML forms, 127–133 discovering, 81–85 ScreenName, 407–408
bbiinnddeexx..iinndddd 885588 88//1199//22001111 1122::0011::3355 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 859
Index n C–C 859
session management, liberal escalation to other pages, cookies, 437–438
scope, 244–248 473–474 defensive fi lters, 455–456
XSS exploiting via, 475 inducing actions, 445–446 delivering, 448–449
COPY method, 679 Trojan injection, 444–445 DOM XSS converted from,
count() function, 348 trust relationship 472–473
credentials exploitation, 446–447 exploiting, 435–438, 474
attackers, 171 virtual defacement, 443–444 fi nding and exploiting,
authentication vulnerability, attackers, 251 452–481
169–171 authentication, 473–474 hacker’s methodology,
e-mail containing, 184 chaining, 450–451 829–830
hacker’s methodology, CSRF defeating anti-CSRF HTML limitations, 495–496
authentication tokens with, 510–511 IE, 435
autogenerated, 809–810 database error messages, 620 input insertion, 495
unsafe distribution, 810–811 defense, 28 input validation, 492–493
unsafe transmission, 810 delivery mechanisms, 447–451 length limits, 471–473
incomplete validation, 180–181 in-band, 449–450 output validation, 493–495
insecure distribution, 184 out-of-band, 450 preventing, 492–496
insecure storage, 190–191 DOM-based, 440–442 “remember me” function, 437
secret handling of, 192–193 delivering, 448–449 sanitizing fi lters, 468–471
strength, 192 fi nding and exploiting, signature-based fi lters,
validation, 193–195 487–491 455–456
web server and default, input validation, 497 steps, 436–437
670–671 output validation, 497–498 stored XSS compared to,
hacker’s methodology, 846 preventing, 496–498 439–440
cross-domain data capture, refl ected XSS converted into, user input testing, 453
515–516 472–473 user input testing to
CSS injection, 517–519 steps, 441 introduce script,
Firefox, 521 escaping, 420 454–455
HTML injection, 516–517 exploits security evolution, 433
JavaScript hijacking, 519–520 cookies, 475 session token vulnerabilities,
E4X, 523–524 delivering, 473–481 243–244
function callbacks, 520 JavaScript executed within source code, 704–705
JSON, 521 XML responses, stored, 438–440
preventing, 524 478–479 attacker steps, 438–439
variable assignment, 522 nonstandard request and delivering, 449–450
proxy services, 529–531 response content, e-mail testing, 483–484
cross-domain requests 476–479 fi nding and exploiting,
JSON, 477 Referrer header, 475–476 481–487
XMLHttpRequest, 528–529 XML requests sent cross- HTML limitations, 495–496
XSS sending XML, 477–478 domain, 477–478 input insertion, 495
/crossdomain.xml, 525–526 fi lters input validation, 492–493
cross-site request forgery (CSRF), anti-, 452, 748 MySpace, 442–443, 446