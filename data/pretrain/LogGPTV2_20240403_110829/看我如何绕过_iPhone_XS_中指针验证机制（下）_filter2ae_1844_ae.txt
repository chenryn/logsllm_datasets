       {
           ...
       }
       if ( oidp->oid_version != 1 )               // Don't enter this if
       {
           ...
       }
       sysctl_oid *first_sibling = oidp->oid_parent->first;
       if ( first_sibling == oidp )                // Enter this if
       {
           removed_oidp = NULL;
           old_oidp = oidp;
           oidp->oid_parent->first = old_oidp->oid_link;
           have_old_oidp = 1;
       }
       else
       {
           ...
       }
       handler_field = &old_oidp->oid_handler;
       handler = old_oidp->oid_handler;
       if ( removed_oidp || !handler )             // Take the else
       {
           ...
       }
       else
       {
           removed_oidp = NULL;
           context = (0x14EF oid_handler
    CBNZ        X19, loc_FFFFFFF007EBD4A0
    CBZ         X10, loc_FFFFFFF007EBD4A0
    MOV         X19, #0
    MOV         X11, X9                     ;; X11 = &old_oidp->oid_handler
    MOVK        X11, #0x14EF,LSL#48         ;; X11 = 14EF`&oid_handler
    MOV         X12, X10                    ;; X12 = oid_handler
    AUTIA       X12, X11                    ;; X12 = AUTIA(handler, 14EF`&handler)
    XPACI       X10                         ;; X10 = XPAC(handler)
    CMP         X12, X10
    PACIZA      X10                         ;; X10 = PACIZA(XPAC(handler))
    CSEL        X10, X10, X12, EQ           ;; X10 = (PAC_valid ? PACIZA : AUTIA)
    STR         X10, [X9]
有了这个更改，我们就不能再使用 PACIZA 来伪造指针了，除非我们已经有了带有特定上下文的 PACIA 指针。
## Conclusion
在这篇文章中我们详细的研究了苹果在A12中指针验证机制,描述观察到的行为,具体的实现中如何偏离本来的设计目的，并分析系统的薄弱环节,允许内核具有读/写功能的攻击者伪造任意指针的
PAC。该分析以一个完整的绕过策略和概念验证结束，该策略允许攻击者在运行iOS 12.1.2的iPhone XS上执行任意的 A 密钥伪造操作。
尽管存在这些缺陷，PAC
仍然是一项十分有用的防御机制。苹果公司在A12中增强了PAC，这显然是为了防止内核攻击者进行读/写，这意味着我没有在设计中找到系统性的突破并且不得不依赖
signing gadget，然而这些 gadget 很容易通过软件修补。