 anticipatory I/O 调。 6 内读
anticipatory I/O 调然进操作 (处理
的)。的以的时间 (
时间的处理)。读相的
时间。
4.6.3.3 CFQ I/O 调度器
方上 Complete Fair Queuing(CFQ)I/O 调上调
程的相同的。∗ CFQ 时进程自的
时间。 I/O 调程方式处理的
的时间或的处理。 CFQ I/O 调将空
段时间（ 10 新的。 I/O 调
操作。效调程处理进程的。
进程的同步（synchronized 的 (读操作) 
同步更的。 CFQ 更进读操作
 writes-starving-reads 。进程设 CFQ 调对进程
的同时提的性能。
CFQ 调的的。
4.6.3.4 Noop I/O 调度器
Noop I/O 调程单的调。进
操作单的。对的设备上。
∗的文实的 CFQ I/O 调。的原时间或式
以的方式工作。
– 124 –
 4 
文件 I/O
4.6.4 选择和配置你的 I/O 调度器
的 I/O 调以时以内 iosched 。效
的 as cfq deadline noop。以时对设备进
以 /sys/block/device/queue/scheduler 。读文件以
的 I/O 调上效写文件以更 I/O 调程
。设设备 hda 的 I/O 调程 CFQ以方式
#echo cfq >/sys/block/hda/queue/scheduler
 /sys/block/device/queue/iosched 理以设的 I/O 调
相的。 I/O 调。何设 root 。
的程写的程及的 I/O 子。对的
写出更的。
4.6.5 优化 I/O 性能
 I/O 相同时 I/O 
的 I/O 性能的。
 I/O 操作的 (将小的操作聚集的操作)实
对的 I/O或空间 () I/O 的
I/O I/O() 异步 I/O程程的
步。
 I/O 操作的程以的性
能。同的即 Linux 内 I/O 调
空间的程以方式实更的性能提。
4.6.5.1 用户空间 I/O 调度
进 I/O 调的 I/O 集的以 Linux I/O 调
的方对的 I/O 进进更的性能提。∗
然 I/O 调将将以
性的方式程? 设提
∗能将 I/O 操作的或上。 I/O 的程 (设
的) 对 I/O 操作进。
– 125 –
 4 
文件 I/O
的 I/O 。以进 I/O 调的。 I/O 调
对进提
时程提 I/O 。 I/O 调程能的小
的。然
的能的的。
程能布
的提对们提给 I/O 调将
的性能提。
对同的空间的程内同的。 I/O
调的以理的式进。对理进
的。空间以文件文件的式存的。
程文件的布的。
 I/O 能以操作的提空间程以
同的处理。们以方式进
1. 
2. inode 
3. 文件的理
程上的。我们。
。单的效率的的方。
文件的布的文件（同的
子上相布。同的文件间
的时间内相的率更。
文件上的理布。同的
文件然文件同的文件更的率布。
方文件的文件
的作小。即能实的理
。的对文件的。文
件布上的程空间性示。
方实。
 inode 。 inode  Unix 文件相的的。
文件能理 inode文件小
。我们将 7 更的 inode。: 
– 126 –
 4 
文件 I/O
文件 inode  inode 。
 inode 更效
文件 i 的 inode  
#include
#include
#include
#include
/*
* get_inode - returns the inode of the file
associated
* with the given file descriptor, or -1 on
failure
*/
int get_inode (int fd)
{
struct stat buf;
int ret;
ret = fstat (fd, &buf);
– 127 –
 4 
文件 I/O
if (ret \n”,
argv[0]);
return 1;
}
fd = open (argv[1], O_RDONLY);
if (fd 
#include
#include
#include
#include
#include
#include
/*
* get_block - for the file associated with the
given fd, returns
* the physical block mapping to logical_block
*/
int get_block (int fd, int logical_block)
{
int ret;
ret = ioctl (fd, FIBMAP, &logical_block);
if (ret \n”,
argv[0]);
return 1;
}
– 131 –
 4 
文件 I/O
fd = open (argv[1], O_RDONLY);
if (fd 
。的 C 相的何的 C 
。 Linux  C 的 int 。
5.1.4 获得进程 ID 和父进程的 ID
getpid() 调进程的 ID
#include 
#include 
pid_t getpid (void);
getppid() 调进程的进程的 ID
#include 
#include 
pid_t getppid (void);
调时的
printf (”My pid=%d\n”, getpid());
printf (”Parent’s pid=%d\n”, getppid());
上我们何 pid t 的
单我们。 Linux 上我们设 pid t  int 
的的的能性的。的
 C  typedefs 的 pid t 的方式存
的。上我们 pid to int()
我们。对 printf()  pid t 处理
的。
– 135 –
 5 
进程理
5.2 运行新进程
 Unix 内存程映的操作新进程的操作
离的。 Unix 调（实上调以将进
文件的程映内存原进程的空间。
程新的程相的调 exec 调。
同时同的调新的进程上
进程。新的进程新的程。新进程的
 (fork)能的调 fork() 。操作
 fork即新的进程; 然即将新的进程
新的程。我们 exec 调然 fork()。
5.2.1 exec 系列系统调用
实单的 exec 调们单调的 exec 
。我们单的 execl()
#include 
int execl (const char *path, const char *arg,
...);
对 execl() 的调将 path 的映内存进程的映