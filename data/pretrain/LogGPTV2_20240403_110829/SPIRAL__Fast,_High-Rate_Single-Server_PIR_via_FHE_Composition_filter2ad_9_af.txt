### Figure 3: Server Computation Time as a Function of Database Size for Different PIR Protocols

The figure shows the server computation time in seconds (s) for different PIR protocols as a function of the number of records in the database. The x-axis represents the number of records, and the y-axis represents the server computation time.

- **SealPIR**:
  - 100 KB Records: 100, 101, 102, 103
  - 10 KB Records: 210, 212, 214, 216, 218, 220

- **FastPIR**:
  - 10 KB Records: 210, 212, 214, 216, 218, 220

- **OnionPIR**:
  - 10 KB Records: 210, 212, 214, 216, 218, 220

- **SPIRALPACK** and **SPIRAL**:
  - 100 KB Records: 100, 101, 102, 103

### Improvements in Server Throughput and Rate

We have made significant improvements to the server throughput and rate, and we explore these trade-offs in more detail in the full version of this paper [42].

For the database configurations considered, the base version of SPIRAL achieves 1.7–3.7× higher throughput in the streaming setting compared to previous systems. The packed version, SPIRALPACK, achieves even higher throughput with the same query size, but at the expense of larger public parameters.

The streaming-optimized systems, SPIRALSTREAM and SPIRALSTREAMPACK, achieve significantly higher throughput. For databases with roughly one million records, the server throughput of SPIRALSTREAMPACK is 1.9 GB/s, which is 9.7× higher than FastPIR. The rate is also 5.8× higher than that of FastPIR, meaning the number of bits the client has to download is 5.8× smaller with SPIRALSTREAMPACK.

### Microbenchmarks and Additional Measurements

Due to space limitations, additional microbenchmarks and system analysis are included in Appendix D and the full version of this paper [42]. We also estimate the concrete costs of SPIRAL to support several application settings.

### VI. Related Work

#### Number-Theoretic Constructions

Many early constructions of single-server PIR [17, 53] follow the Kushilevitz-Ostrovsky paradigm [12] based on homomorphic encryption. These were typically instantiated using number-theoretic assumptions such as Paillier [54] or the Damgård-Jurik [55] encryption schemes. Another line of works [16, 18] provided constructions with polylogarithmic communication from the φ-hiding assumption. Döttling et al. [56] showed how to construct rate-1 PIR (on sufficiently large records) based on trapdoor hash functions, which can be based on a broad range of classic number-theoretic assumptions.

#### Lattice-Based PIR

More concretely efficient single-server PIR protocols are based on lattice-based assumptions. Starting with XPIR [19], several systems have progressively reduced the computational cost of single-server PIR [4, 5, 20, 21, 25, 22, 23]. While early constructions only relied on additive homomorphism, more recent constructions also incorporate multiplicative homomorphism for better concrete efficiency [20, 21, 25, 23]. The design of SPIRAL follows the recent approach of composing Regev encryption with GSW encryption to achieve a higher rate and slower noise growth.

#### PIR Variants

Many works have introduced techniques to reduce or amortize the computation cost of single-server PIR protocols. One approach is batch PIR [57, 58, 59, 5], where the server’s computational cost is amortized over a batch of queries. In particular, Angel et al. [5] introduced a generic approach of composing a PIR protocol with a probabilistic batch code to amortize the server’s computational cost.

Another line of works has focused on stateful PIR [60, 23, 61, 62], where the client retrieves some query-independent advice string from the database in an offline phase and uses the advice string to reduce the cost of the online phase. The recent OnionPIR system [23] introduces a general approach based on private batch sum retrieval that reduces the online cost of performing PIR over a database with \( N \) records to that of a PIR over a database with \( O(\sqrt{N}) \) records (the overall online cost is still \( O(N) \), but the bottleneck is the PIR on the \( O(\sqrt{N}) \) record database). Corrigan-Gibbs and Kogan [61] show how to obtain a single-server stateful PIR with sublinear online time; however, the advice string is not reusable, so the (linear) offline preprocessing has to be repeated for each query. More recently, Corrigan-Gibbs et al. [62] introduce a stateful PIR protocol with a reusable advice string, which yields a single-server PIR with sublinear amortized cost.

Another variant is PIR with preprocessing [57] or doubly-efficient PIR [63, 64], where the server first performs a linear preprocessing step to obtain an encoding of the database. Using the encoding, the server can then answer online queries in strictly sublinear time. Boyle et al. [63] and Canetti et al. [64] recently showed how to construct doubly-efficient PIR schemes from virtual black-box obfuscation, a very strong cryptographic assumption that is possible only in idealized models [65] (and currently far from being concretely efficient).

#### Multi-Server PIR

While our focus in this work is on the single-server setting, many PIR protocols [1, 66, 67, 68, 69, 70, 24] consider the multi-server setting where the database is replicated across several non-colluding servers (see also the survey by Gasarch [13] and the references therein). Multi-server constructions are highly efficient as the server computation can be based purely on symmetric operations rather than more expensive public-key operations. However, the non-colluding requirements impose logistical hurdles to deployment.

### Acknowledgments

We thank Henry Corrigan-Gibbs and Craig Gentry for their helpful insights and pointers on this work. D. J. Wu is supported by NSF CNS-1917414, CNS-2045180, a Microsoft Research Faculty Fellowship, and a Google Research Scholar award.

### References

[References listed here, as provided in the original text]

### Appendix A: PIR Definition

We now recall the standard definition of a two-message single-server PIR protocol [12]. Like most lattice-based PIR schemes [5, 20, 21, 22, 25, 23], we allow for an initial query-independent and database-independent setup protocol that outputs a query key \( qk \) (known to the client) and a set of public parameters \( pp \) (known to both the client and the server). The same \( pp \) and \( qk \) can be reused by the client and server for multiple queries, allowing us to amortize the cost of the setup phase over many PIR queries. Note that we can also obtain a standard 2-message PIR protocol without setup by having the query algorithm generate \( qk \) and \( pp \) and including \( pp \) as part of its query.

**Definition A.1 (Two-Message Single-Server PIR [12, adapted]):**

A two-message single-server private information retrieval (PIR) scheme \( \Pi_{\text{PIR}} = (\text{Setup}, \text{Query}, \text{Answer}, \text{Extract}) \) is a tuple of efficient algorithms with the following properties:

- **Setup**: Generates public parameters \( pp \) and a query key \( qk \).
- **Query**: Takes a query index \( i \) and generates a query \( q \) using \( qk \).
- **Answer**: Takes the query \( q \) and the database \( db \), and generates a response \( r \).
- **Extract**: Takes the response \( r \) and extracts the desired database entry \( db[i] \).

This definition ensures that the client can retrieve the desired database entry without revealing the index to the server, while the server does not learn any information about the client's query.