u
p
m
o
C
r
e
v
r
e
S
)
s
(
e
t
u
p
m
o
C
r
e
v
r
e
S
103
102
101
100
SealPIR
210
212
214
216
218
220
Number of Records (100 KB Records)
FastPIR
OnionPIR
210
212
214
216
218
220
Number of Records (10 KB Records)
SPIRALPACK
SPIRAL
Fig. 3: Server computation time as a function of database size for different PIR protocols.
improvements to the server throughput and the rate, and we
explore these trade-offs in more detail in the full version of
this paper [42].
For the database conﬁgurations we considered, the base
version of SPIRAL achieves a 1.7–3.7× higher throughput in
the streaming setting compared to previous systems. The packed
version SPIRALPACK achieves higher throughput with the same
query size, but at the expense of larger public parameters.
The streaming-optimized systems SPIRALSTREAM and SPI-
RALSTREAMPACK achieve signiﬁcantly higher throughput; on
databases with roughly a million records, the server throughput
of SPIRALSTREAMPACK is 1.9 GB/s, which is 9.7× higher
than FastPIR. The rate is also 5.8× higher than that of FastPIR
(i.e., the number of bits the client has to download is 5.8×
smaller with SPIRALSTREAMPACK).
Microbenchmarks and other measurements. Due to space
limitations, we include additional microbenchmarks and system
analysis in Appendix D and the full version of this paper [42].
We also estimate the concrete costs of SPIRAL to support
several application settings.
VI. RELATED WORK
Number-theoretic constructions. Many early constructions
of single-server PIR [17, 53] follow the Kushilevitz-Ostrovsky
paradigm [12] based on homomorphic encryption. These
were typically instantiated using number-theoretic assumptions
such as Paillier [54] or the Damgård-Jurik [55] encryption
schemes. Another line of works [16, 18] gave constructions with
polylogarithmic communication from the φ-hiding assumption.
Döttling et al. [56] showed how to construct rate-1 PIR (on
sufﬁciently-large) records based on trapdoor hash functions,
which can in turn be based on a broad range of classic number-
theoretic assumptions.
Lattice-based PIR. The more concretely efﬁcient single-server
PIR protocols are based on lattice-based assumptions. Starting
with XPIR [19], a number of systems have progressively
reduced the computational cost of single-server PIR [4, 5,
20, 21, 25, 22, 23]. While early constructions only relied
on additive homomorphism, more recent constructions also
incorporate multiplicative homomorphism for better concrete
efﬁciency [20, 21, 25, 23]. The design of SPIRAL follows the
recent approach of composing Regev encryption with GSW
encryption to achieve a higher rate and slower noise growth.
PIR variants. Many works have introduced techniques to
reduce or amortize the computation cost of single-server PIR
protocols. One approach is batch PIR [57, 58, 59, 5] where
the server’s computational cost is amortized over a batch of
queries. In particular, Angel et al. [5] introduced a generic
approach of composing a PIR protocol with a probabilistic
batch code to amortize the server’s computational cost.
Another line of works has focused on stateful PIR [60, 23,
61, 62] where the client retrieves some query-independent
advice string from the database in an ofﬂine phase and uses
the advice string to reduce the cost of the online phase. The
recent OnionPIR system [23] introduces a general approach
based on private batch sum retrieval that reduces the online cost
of performing PIR over a database with N records to that of a
√
PIR over a database with O(
N ) records (the overall online
cost is still O(N ), but the bottleneck is the PIR on the O(
N )
record database). Corrigan-Gibbs and Kogan [61] show how to
obtain a single-server stateful PIR with sublinear online time;
however, the advice string is not reusable so the (linear) ofﬂine
preprocessing has to be repeated for each query. More recently,
Corrigan-Gibbs et al. [62] introduce a stateful PIR protocol
with a reusable advice string which yields a single-server PIR
with sublinear amortized cost.
√
Another variant is PIR with preprocessing [57] or doubly-
efﬁcient PIR [63, 64] where the server ﬁrst performs a linear
preprocessing step to obtain an encoding of the database. Using
the encoding, the server can then answer online queries in
strictly sublinear time. Boyle et al. [63] and Canetti et al. [64]
recently showed how to construct doubly-efﬁcient PIR schemes
from virtual black-box obfuscation, a very strong cryptographic
assumption that is possible only in idealized models [65] (and
also currently far from being concretely efﬁcient).
Multi-server PIR. While our focus in this work in the single-
server setting, many PIR protocols [1, 66, 67, 68, 69, 70,
24] consider the multi-server setting where the database is
replicated across several non-colluding servers (see also the
survey by Gasarch [13] and the references therein). Multi-server
constructions are highly efﬁcient as the server computation
can be based purely on symmetric operations rather than more
expensive public-key operations. However, the non-colluding
requirements imposes logistic hurdles to deployment.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
13942
ACKNOWLEDGMENTS
We thank Henry Corrigan-Gibbs and Craig Gentry for helpful
insights and pointers on this work. D. J. Wu is supported
by NSF CNS-1917414, CNS-2045180, a Microsoft Research
Faculty Fellowship, and a Google Research Scholar award.
REFERENCES
[1] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan, “Private information
retrieval,” in FOCS, 1995.
[2] P. Mittal, F. G. Olumoﬁn, C. Troncoso, N. Borisov, and I. Goldberg,
“Pir-tor: Scalable anonymous communication using private information
retrieval,” in USENIX Security, 2011.
[3] A. Kwon, D. Lazar, S. Devadas, and B. Ford, “Rifﬂe: An efﬁcient
communication system with strong anonymity,” Proc. Priv. Enhancing
Technol., vol. 2016, no. 2, 2016.
[4] S. Angel and S. T. V. Setty, “Unobservable communication over fully
untrusted infrastructure,” in OSDI, 2016.
[5] S. Angel, H. Chen, K. Laine, and S. T. V. Setty, “PIR with compressed
queries and amortized query processing,” in IEEE S&P, 2018.
[6] N. Borisov, G. Danezis, and I. Goldberg, “DP5: A private presence
service,” Proc. Priv. Enhancing Technol., vol. 2015, no. 2, 2015.
[7] D. Demmler, P. Rindal, M. Rosulek, and N. Trieu, “PIR-PSI: scaling
private contact discovery,” Proc. Priv. Enhancing Technol., vol. 2018,
no. 4, 2018.
[8] N. Trieu, K. Shehata, P. Saxena, R. Shokri, and D. Song, “Epione:
Lightweight contact tracing with strong privacy,” IEEE Data Eng. Bull.,
vol. 43, no. 2, 2020.
[9] E. Fung, G. Kellaris, and D. Papadias, “Combining differential privacy
and PIR for efﬁcient strong location privacy,” in SSTD, 2015.
[10] D. J. Wu, J. Zimmerman, J. Planul, and J. C. Mitchell, “Privacy-preserving
shortest path computation,” in NDSS, 2016.
[11] D. Kogan and H. Corrigan-Gibbs, “Private blocklist
lookups with
checklist,” in USENIX Security, 2021.
[12] E. Kushilevitz and R. Ostrovsky, “Replication is not needed: Single
database, computationally-private information retrieval,” in FOCS, 1997.
[13] W. I. Gasarch, “A survey on private information retrieval,” Bull. EATCS,
vol. 82, 2004.
[14] R. Ostrovsky and W. E. Skeith III, “A survey of single database PIR:
techniques and applications,” IACR Cryptol. ePrint Arch., 2007.
[15] R. Sion and B. Carbunar, “On the practicality of private information
retrieval,” in NDSS, 2007.
[16] C. Cachin, S. Micali, and M. Stadler, “Computationally private informa-
tion retrieval with polylogarithmic communication,” in EUROCRYPT,
1999.
[17] Y. Chang, “Single database private information retrieval with logarithmic
communication,” in ACISP, 2004.
[18] C. Gentry and Z. Ramzan, “Single-database private information retrieval
with constant communication rate,” in ICALP, 2005.
[19] C. A. Melchor, J. Barrier, L. Fousse, and M. Killijian, “XPIR : Private
information retrieval for everyone,” Proc. Priv. Enhancing Technol.,
vol. 2016, no. 2, 2016.
[20] C. Gentry and S. Halevi, “Compressible FHE with applications to PIR,”
in TCC, 2019.
[21] J. Park and M. Tibouchi, “SHECS-PIR: somewhat homomorphic
encryption-based compact and scalable private information retrieval,”
in ESORICS, 2020.
[22] I. Ahmad, Y. Yang, D. Agrawal, A. E. Abbadi, and T. Gupta, “Addra:
Metadata-private voice communication over fully untrusted infrastructure,”
in OSDI, 2021.
[23] M. H. Mughees, H. Chen, and L. Ren, “OnionPIR: Response efﬁcient
single-server PIR,” in ACM CCS, 2021.
[24] S. M. Haﬁz and R. Henry, “A bit more than a bit is more than a bit
better: Faster (essentially) optimal-rate many-server PIR,” Proc. Priv.
Enhancing Technol., vol. 2019, no. 4, 2019.
[25] A. Ali, T. Lepoint, S. Patel, M. Raykova, P. Schoppmann, K. Seth, and
K. Yeo, “Communication-computation trade-offs in PIR,” in USENIX
Security, 2021.
[26] N. Samardzic, A. Feldmann, A. Krastev, S. Devadas, R. G. Dreslinski,
C. Peikert, and D. Sánchez, “F1: A fast and programmable accelerator
for fully homomorphic encryption,” in MICRO, pp. 238–252, 2021.
[27] C. Gentry, “Fully homomorphic encryption using ideal lattices,” in STOC,
[28] Z. Brakerski and V. Vaikuntanathan, “Efﬁcient fully homomorphic
encryption from (standard) LWE,” in FOCS, 2011.
[29] Z. Brakerski, “Fully homomorphic encryption without modulus switching
from classical GapSVP,” in CRYPTO, 2012.
[30] J. Fan and F. Vercauteren, “Somewhat practical fully homomorphic
encryption,” IACR Cryptol. ePrint Arch., 2012.
[31] Z. Brakerski, C. Gentry, and V. Vaikuntanathan, “(Leveled) fully
homomorphic encryption without bootstrapping,” in ITCS, 2012.
[32] C. Gentry, A. Sahai, and B. Waters, “Homomorphic encryption from learn-
ing with errors: Conceptually-simpler, asymptotically-faster, attribute-
based,” in CRYPTO, 2013.
[33] O. Regev, “On lattices, learning with errors, random linear codes, and
cryptography,” in STOC, 2005.
[34] A. Viand, P. Jattke, and A. Hithnawi, “SoK: Fully homomorphic
encryption compilers,” in IEEE S&P, 2021.
[35] I. Chillotti, N. Gama, M. Georgieva, and M. Izabachène, “TFHE: fast
fully homomorphic encryption over the torus,” IACR Cryptol. ePrint
Arch., 2018.
[36] I. Chillotti, N. Gama, M. Georgieva, and M. Izabachène, “TFHE: fast
fully homomorphic encryption over the torus,” J. Cryptol., vol. 33, no. 1,
2020.
[37] C. Peikert, V. Vaikuntanathan, and B. Waters, “A framework for efﬁcient
and composable oblivious transfer,” in CRYPTO, 2008.
[38] V. Lyubashevsky, C. Peikert, and O. Regev, “On ideal lattices and learning
with errors over rings,” in EUROCRYPT, 2010.
[39] H. Chen, I. Chillotti, and L. Ren, “Onion ring ORAM: efﬁcient constant
bandwidth oblivious RAM from (leveled) TFHE,” in ACM CCS, 2019.
[40] B. Applebaum, D. Cash, C. Peikert, and A. Sahai, “Fast cryptographic
primitives and circular-secure encryption based on hard learning prob-
lems,” in CRYPTO, 2009.
[41] D. Micciancio and C. Peikert, “Trapdoors for lattices: Simpler, tighter,
faster, smaller,” in EUROCRYPT, 2012.
[42] S. J. Menon and D. J. Wu, “SPIRAL: Fast, high-rate single-server PIR
via FHE composition,” IACR Cryptol. ePrint Arch., 2022. Available at
https://eprint.iacr.org/2022/368.pdf.
[43] C. Gentry, S. Halevi, and N. P. Smart, “Homomorphic evaluation of the
AES circuit,” in CRYPTO, 2012.
[44] T. Gupta, N. Crooks, W. Mulhern, S. T. V. Setty, L. Alvisi, and M. Walﬁsh,
“Scalable and private media consumption with popcorn,” in NSDI, 2016.
[45] S. D. Galbraith, “Space-efﬁcient variants of cryptosystems based on
learning with errors,” 2013.
[46] J. W. Bos, C. Costello, L. Ducas, I. Mironov, M. Naehrig, V. Nikolaenko,
A. Raghunathan, and D. Stebila, “Frodo: Take off the ring! practical,
quantum-secure key exchange from LWE,” in ACM CCS, 2016.
[47] Y. Ishai, H. Su, and D. J. Wu, “Shorter and faster post-quantum
designated-veriﬁer zkSNARKs from lattices,” in ACM CCS, 2021.
[48] V. Lyubashevsky, D. Micciancio, C. Peikert, and A. Rosen, “SWIFFT:
A modest proposal for FFT hashing,” in FSE, 2008.
[49] P. Longa and M. Naehrig, “Speeding up the number theoretic transform
for faster ideal lattice-based cryptography,” in CANS, 2016.
[50] “Microsoft SEAL (release 3.2).” https://github.com/Microsoft/SEAL, Feb.
2019. Microsoft Research, Redmond, WA.
[51] F. Boemer, S. Kim, G. Seifu, F. D. de Souza, V. Gopal, et al., “Intel
HEXL (release 1.2).” https://github.com/intel/hexl, Sept. 2021.
[52] “Amazon EC2 reserved instances pricing.” https://aws.amazon.com/ec2/
pricing/reserved-instances/pricing/, 2021. Last accessed: November 28,
2021.
[53] H. Lipmaa, “An oblivious transfer protocol with log-squared communi-
cation,” in ISC, 2005.
[54] P. Paillier, “Public-key cryptosystems based on composite degree
residuosity classes,” in EUROCRYPT, 1999.
[55] I. Damgård and M. Jurik, “A generalisation, a simpliﬁcation and some
applications of paillier’s probabilistic public-key system,” in PKC, 2001.
[56] N. Döttling, S. Garg, Y. Ishai, G. Malavolta, T. Mour, and R. Ostrovsky,
“Trapdoor hash functions and their applications,” in CRYPTO, 2019.
[57] A. Beimel, Y. Ishai, and T. Malkin, “Reducing the servers computation
in private information retrieval: PIR with preprocessing,” in CRYPTO,
2000.
[58] Y. Ishai, E. Kushilevitz, R. Ostrovsky, and A. Sahai, “Batch codes and
their applications,” in STOC, 2004.
[59] J. Groth, A. Kiayias, and H. Lipmaa, “Multi-query computationally-
private information retrieval with constant communication rate,” in PKC,
2010.
2009.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:41 UTC from IEEE Xplore.  Restrictions apply. 
14943
[60] S. Patel, G. Persiano, and K. Yeo, “Private stateful information retrieval,”
in ACM CCS, 2018.
[61] H. Corrigan-Gibbs and D. Kogan, “Private information retrieval with
sublinear online time,” in EUROCRYPT, 2020.
[62] H. Corrigan-Gibbs, A. Henzinger, and D. Kogan, “Single-server private
information retrieval with sublinear amortized time,” in EUROCRYPT,
2022.
[63] E. Boyle, Y. Ishai, R. Pass, and M. Wootters, “Can we access a database
both locally and privately?,” in TCC, 2017.
[64] R. Canetti, J. Holmgren, and S. Richelson, “Towards doubly efﬁcient
private information retrieval,” in TCC, 2017.
[65] B. Barak, O. Goldreich, R. Impagliazzo, S. Rudich, A. Sahai, S. P.
Vadhan, and K. Yang, “On the (im)possibility of obfuscating programs,”
in CRYPTO, 2001.
[66] S. Yekhanin, “Towards 3-query locally decodable codes of subexponential
[67] K. Efremenko, “3-query locally decodable codes of subexponential
length,” in STOC, 2007.
length,” in STOC, 2009.
[68] A. Beimel, Y. Ishai, E. Kushilevitz, and I. Orlov, “Share conversion and
private information retrieval,” in CCC, 2012.
[69] N. Gilboa and Y. Ishai, “Distributed point functions and their applications,”
in EUROCRYPT, 2014.
[70] E. Boyle, N. Gilboa, and Y. Ishai, “Function secret sharing: Improvements
and extensions,” in ACM CCS, 2016.
[71] C. Gentry, S. Halevi, and N. P. Smart, “Fully homomorphic encryption
with polylog overhead,” in EUROCRYPT, 2012.
[72] Speedtest, “Speedtest global index,” 2022. https://www.speedtest.net/
global-index. Last accessed: March 18, 2022.
APPENDIX A
PIR DEFINITION
We now recall the standard deﬁnition of a two-message
single-server PIR protocol [12]. Like most lattice-based PIR
schemes [5, 20, 21, 22, 25, 23], we allow for an initial query-
independent and database-independent setup protocol that
outputs a query key qk (known to the client) and a set of
public parameters pp (known to both the client and the server).
The same pp and qk can be reused by the client and server
for multiple queries, so we can amortize the cost of the setup
phase over many PIR queries. Note that we can also obtain a
standard 2-message PIR protocol without setup by having the
query algorithm generate qk and pp and including pp as part
of its query.
Deﬁnition A.1 (Two-Message Single-Server PIR [12, adapted]).
A two-message single-server private information retrieval (PIR)
scheme ΠPIR = (Setup, Query, Answer, Extract) is a tuple of
efﬁcient algorithms with the following properties: