title:Flip Feng Shui: Hammering a Needle in the Software Stack
author:Kaveh Razavi and
Ben Gras and
Erik Bosman and
Bart Preneel and
Cristiano Giuffrida and
Herbert Bos
Flip Feng Shui: Hammering a Needle 
in the Software Stack
Kaveh Razavi, Ben Gras, and Erik Bosman, Vrije Universiteit Amsterdam;  
Bart Preneel, Katholieke Universiteit Leuven; Cristiano Giuffrida and Herbert Bos,  
Vrije Universiteit Amsterdam 
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/razavi
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Flip Feng Shui: Hammering a Needle in the Software Stack
Kaveh Razavi∗
Vrije Universiteit
Amsterdam
Ben Gras∗
Vrije Universiteit
Amsterdam
Erik Bosman
Vrije Universiteit
Amsterdam
Bart Preneel
Katholieke Universiteit
Leuven
Cristiano Giuffrida
Vrije Universiteit
Amsterdam
Herbert Bos
Vrije Universiteit
Amsterdam
* Equal contribution joint ﬁrst authors
Abstract
We introduce Flip Feng Shui (FFS), a new exploitation
vector which allows an attacker to induce bit ﬂips over
arbitrary physical memory in a fully controlled way. FFS
relies on hardware bugs to induce bit ﬂips over memory
and on the ability to surgically control the physical mem-
ory layout to corrupt attacker-targeted data anywhere in
the software stack. We show FFS is possible today with
very few constraints on the target data, by implement-
ing an instance using the Rowhammer bug and memory
deduplication (an OS feature widely deployed in pro-
duction). Memory deduplication allows an attacker to
reverse-map any physical page into a virtual page she
owns as long as the page’s contents are known. Rowham-
mer, in turn, allows an attacker to ﬂip bits in controlled
(initially unknown) locations in the target page.
We show FFS is extremely powerful: a malicious
VM in a practical cloud setting can gain unauthorized
access to a co-hosted victim VM running OpenSSH.
Using FFS, we exemplify end-to-end attacks breaking
OpenSSH public-key authentication, and forging GPG
signatures from trusted keys, thereby compromising the
Ubuntu/Debian update mechanism. We conclude by dis-
cussing mitigations and future directions for FFS attacks.
1
Introduction
The demand for high-performance and low-cost comput-
ing translates to increasing complexity in hardware and
software. On the hardware side, the semiconductor in-
dustry packs more and more transistors into chips that
serve as a foundation for our modern computing infras-
tructure. On the software side, modern operating systems
are packed with complex features to support efﬁcient
resource management in cloud and other performance-
sensitive settings.
Both trends come at the price of reliability and, in-
evitably, security. On the hardware side, components
are increasingly prone to failures. For example, a large
fraction of the DRAM chips produced in recent years
are prone to bit ﬂips [34, 51], and hardware errors in
CPUs are expected to become mainstream in the near fu-
ture [10, 16, 37, 53]. On the software side, widespread
features such as memory or storage deduplication may
serve as side channels for attackers [8, 12, 31]. Re-
cent work analyzes some of the security implications
of both trends, but so far the attacks that abuse these
hardware/software features have been fairly limited—
probabilistic privilege escalation [51],
in-browser ex-
ploitation [12, 30], and selective information disclo-
sure [8, 12, 31].
In this paper, we show that an attacker abusing mod-
ern hardware/software properties can mount much more
sophisticated and powerful attacks than previously be-
lieved possible. We describe Flip Feng Shui (FFS), a
new exploitation vector that allows an attacker to induce
bit ﬂips over arbitrary physical memory in a fully con-
trolled way. FFS relies on two underlying primitives:
(i) the ability to induce bit ﬂips in controlled (but not
predetermined) physical memory pages; (ii) the ability
to control the physical memory layout to reverse-map a
target physical page into a virtual memory address un-
der attacker control. While we believe the general vec-
tor will be increasingly common and relevant in the fu-
ture, we show that an instance of FFS, which we term
dFFS (i.e, deduplication-based FFS), can already be im-
plemented on today’s hardware/software platforms with
very few constraints.
In particular, we show that by
abusing Linux’ memory deduplication system (KSM) [6]
which is very popular in production clouds [8], and the
widespread Rowhammer DRAM bug [34], an attacker
can reliably ﬂip a single bit in any physical page in the
software stack with known contents.
Despite the complete absence of software vulnerabili-
ties, we show that a practical Flip Feng Shui attack can
have devastating consequences in a common cloud set-
ting. An attacker controlling a cloud VM can abuse
USENIX Association  
25th USENIX Security Symposium  1
memory deduplication to seize control of a target phys-
ical page in a co-hosted victim VM and then exploit
the Rowhammer bug to ﬂip a particular bit in the target
page in a fully controlled and reliable way without writ-
ing to that bit. We use dFFS to mount end-to-end cor-
ruption attacks against OpenSSH public keys, and De-
bian/Ubuntu update URLs and trusted public keys, all re-
siding within the page cache of the victim VM. We ﬁnd
that, while dFFS is surprisingly practical and effective,
existing cryptographic software is wholly unequipped to
counter it, given that “bit ﬂipping is not part of their
threat model”. Our end-to-end attacks completely com-
promise widespread cryptographic primitives, allowing
an attacker to gain full control over the victim VM.
Summarizing, we make the following contributions:
• We present FFS, a new exploitation vector to induce
hardware bit ﬂips over arbitrary physical memory in
a controlled fashion (Section 2).
• We present dFFS, an implementation instance of
FFS that exploits KSM and the Rowhammer bug
and we use it to bit-ﬂip RSA public keys (Sec-
tion 3) and compromise authentication and update
systems of a co-hosted victim VM, granting the at-
tacker unauthorized access and privileged code ex-
ecution (Section 4).
• We use dFFS to evaluate the time requirements and
success rates of our proposed attacks (Section 5)
and discuss mitigations (Section 6).
The videos demonstrating dFFS attacks can be found
in the following URL:
https://vusec.net/projects/flip-feng-shui
2 Flip Feng Shui
To implement an FFS attack, an attacker requires a phys-
ical memory massaging primitive and a hardware vulner-
ability that allows her to ﬂip bits on certain locations on
the medium that stores the users’ data. Physical mem-
ory massaging is analogous to virtual memory massag-
ing where attackers bring the virtual memory into an
exploitable state [23, 24, 55], but instead performed on
physical memory. Physical memory massaging (or sim-
ply memory massaging, hereafter) allows the attacker to
steer victim’s sensitive data towards those physical mem-
ory locations that are amenable to bit ﬂips. Once the tar-
get data land on the intended vulnerable locations, the at-
tacker can trigger the hardware vulnerability and corrupt
the data via a controlled bit ﬂip. The end-to-end attack
allows the attacker to ﬂip a bit of choice in data of choice
anywhere in the software stack in a controlled fashion.
With some constraints, this is similar to a typical arbi-
trary memory write primitive used for software exploita-
tion [15], with two key differences: (i) the end-to-end
attack requires no software vulnerability; (ii) the attacker
can overwrite arbitrary physical (not just virtual) mem-
ory on the running system. In effect, FFS transforms an
underlying hardware vulnerability into a very powerful
software-like vulnerability via three fundamental steps:
1. Memory templating: identifying physical memory
locations in which an attacker can induce a bit ﬂip
using a given hardware vulnerability.
2. Memory massaging: steering targeted sensitive data
towards the vulnerable physical memory locations.
3. Exploitation: triggering the hardware vulnerability
to corrupt the intended data for exploitation.
In the remainder of this section, we detail each of these
steps and outline FFS’s end-to-end attack strategy.
2.1 Memory Templating
The goal of the memory templating step is to ﬁnger-
print the hardware bit-ﬂip patterns on the running sys-
tem. This is necessary, since the locations of hardware bit
ﬂips are generally unknown in advance. This is speciﬁ-
cally true in the case of Rowhammer; every (vulnerable)
DRAM module is unique in terms of physical memory
offsets with bit ﬂips. In this step, the attacker triggers
the hardware-speciﬁc vulnerability to determine which
physical pages, and which offsets within those pages are
vulnerable to bit ﬂips. We call the combination of a vul-
nerable page and the offset a template.
Probing for templates provides the attacker with
knowledge of usable bit ﬂips. Thanks to Flip Feng Shui,
any template can potentially allow the attacker to exploit
the hardware vulnerability over physical memory in a
controlled way. The usefulness of such an exploit, how-
ever, depends on the direction of the bit ﬂip (i.e., one-
to-zero or zero-to-one), the page offset, and the contents
of the target victim page. For each available template,
the attacker can only craft a Flip Feng Shui primitive
that corrupts the target data page with the given ﬂip and
offset. Hence, to surgically target the victim’s sensitive
data of interest, the attacker needs to probe for match-
ing templates by repeatedly exploiting the hardware vul-
nerability over a controlled physical page (i.e., mapped
in her virtual address space). To perform this step efﬁ-
ciently, our own dFFS implementation relies on a vari-
ant of double-sided Rowhammer [51]. Rowhammer al-
lows an attacker to induce bit ﬂips in vulnerable memory
locations by repeatedly reading from memory pages lo-
cated in adjacent rows. We discuss the low-level details
2  25th USENIX Security Symposium 
USENIX Association
2
Host Physical Memory
(A)
Victim VM Memory
(B)
Host Physical Memory
Victim VM Memory
(C)
Host Physical Memory
Victim VM Memory
Attacker VM Memory
Attacker VM Memory
Attacker VM Memory
Figure 1: Memory deduplication can provide an attacker control over the layout of physical memory.
of the Rowhammer vulnerability and our implementation
in Section 4.2.
2.2 Memory Massaging
To achieve bit ﬂips over arbitrary contents of the victim’s
physical memory, FFS abuses modern memory manage-
ment patterns and features to craft a memory massaging
primitive. Memory massaging allows the attacker to map
a desired victim’s physical memory page into her own
virtual memory address space in a controllable way.
Given a set of templates and the memory massaging
primitive, an ideal version of FFS can corrupt any of the
victim’s memory pages at an offset determined by the
selected template.
While memory massaging may be nontrivial in the
general case, it is surprisingly easy to abuse widely de-
ployed memory deduplication features to craft practi-
cal FFS attacks that corrupt any of the victim’s mem-
ory pages with known contents (similar to our dFFS im-
plementation). Intuitively, since memory deduplication
merges system-wide physical memory pages with the
same contents, an attacker able to craft the contents of
any of the victim’s memory pages can obtain a memory
massaging primitive and map the target page into her ad-
dress space.
Figure 1 shows how an attacker can control the physi-
cal memory location of a victim VM’s memory page. At
ﬁrst, the attacker needs to predict the contents of the vic-
tim VM’s page that she wants to control (Figure 1-A).
Once the target page is identiﬁed, the attacker VM cre-
ates a memory page with the same contents as the victim
VM’s memory page and waits for the memory dedupli-
cation system to scan both pages (Figure 1-B). Once the
two physical pages (i.e., the attacker’s and the victim’s
pages) are identiﬁed, the memory deduplication system
returns one of the two pages back to the system, and the
other physical page is used to back both the attacker and
the victim’s (virtual) pages. If the attacker’s page is used
to back the memory of the victim page, then, in effect,
the attacker controls the physical memory location of the
victim page (Figure 1-C).
There are additional details necessary to craft a mem-
ory massaging primitive using a real-world implementa-
tion of memory deduplication (e.g., KSM). Section 4.1
elaborates on such details and presents our implementa-
tion of memory massaging on Linux.
2.3 Exploitation
At this stage, FFS already provides the attacker with tem-
plated bit ﬂips over the victim’s physical memory pages
with known (or predictable) contents. The exploitation
surface is only subject to the available templates and their
ability to reach interesting locations for the attacker. As
we will see, the options are abundant.
While corrupting the memory state of running soft-
ware of the victim is certainly possible, we have opted
for a more straightforward, yet extremely powerful ex-
ploitation strategy. We consider an attacker running in a
cloud VM and seeking to corrupt interesting contents in
the page cache of a co-hosted victim VM. In particular,
our dFFS implementation includes two exploits that cor-
rupt sensitive ﬁle contents in the page cache in complete
absence of software vulnerabilities:
1. Flipping SSH’s authorized_keys: assuming the
RSA public keys of the individuals accessing the
victim VM are known, an attacker can use dFFS to
induce an exploitable ﬂip in their public keys, mak-
ing them prone to factorization and breaking the au-
thentication system.
2. Flipping apt’s sources.list and trusted.gpg:
Debian/Ubuntu’s apt package management system
relies on the sources.list ﬁle to operate daily up-
dates and on the trusted.gpg ﬁle to check the au-
thenticity of the updates via RSA public keys. Com-
promising these ﬁles allows an attacker to make a
victim VM download and install arbitrary attacker-
generated packages.