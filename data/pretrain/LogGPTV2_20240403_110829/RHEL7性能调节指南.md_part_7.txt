    :::
:::
:::
::: section
::: titlepage
#### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Scheduling_policies-Round_robin_priority_scheduling_with_SCHED_RR}3.3.6.1.2. SCHED_RR 轮循优先级调度 {.title}
:::
::: para
`SCHED_RR`{.systemitem} 是 `SCHED_FIFO`{.systemitem}
的一个轮循变形。这一策略在同优先级的多线程需要运行时很有用。
:::
::: para
正如 `SCHED_FIFO`{.systemitem}，`SCHED_RR`{.systemitem}
是一项实时策略，定义了每个线程的固定优先级。调度器会按优先级顺序扫描所有的
`SCHED_RR`{.systemitem}
线程，并对准备运行的最高优先级线程进行调度。但是，和
`SCHED_FIFO`{.systemitem}
不同，同优先级的线程在一定的时间间隔内是以循环的方式进行调度的。
:::
::: para
用户可以使用 *`sched_rr_timeslice_ms`*
内核参数，并毫秒为单位设定这一时间间隔
(`/proc/sys/kernel/sched_rr_timeslice_ms`{.filename}) 。最小值为1毫秒。
:::
:::
::: section
::: titlepage
#### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Scheduling_policies-Normal_scheduling_with_SCHED_OTHER}3.3.6.1.3. SCHED_OTHER 普通调度 {.title}
:::
::: para
`SCHED_OTHER`{.systemitem} 是红帽企业版 Linux 7
中默认的调度策略。这一策略使用 CFS
（完全公平排程器）让处理器能够平等地访问用此策略调度的所有线程。这一策略在有大量线程或数据吞吐量优先时最为有用，因为它能够随着时间而更为有效地调度线程。
:::
::: para
在使用这一策略时，调度器会创建一个动态优先级列表，此列表一部分是基于每个进程线程的进程优先级。管理员可以改变一个进程的进程优先级，但是不能直接改变调度器的动态优先级列表。
:::
::: para
改变进程的进程优先级，详情请见 ＜*Red Hat Enterprise Linux 7 Deployment
Guide*＞，可从
中获得。
:::
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tuning_scheduling_policy-Isolating_CPUs}3.3.6.2. 隔离 CPU {.title}
:::
::: para
用户可以使用 *`isolcpus`* 开机参数来从调度器隔离一个或多个
CPU，以此防止调度器在此 CPU 上调度任何用户空间的线程。
:::
::: para
一旦 CPU 被隔离，用户须手动分配进程至被隔离的 CPU，或使用 CPU
关联系统呼叫或 numactl 命令。
:::
::: para
将系统中第三和第六 CPU 隔离至第八 CPU，添加如下至内核命令行：
:::
``` screen
isolcpus=2,5-7
```
::: para
用户也可使用 [**Tuna**]{.application}
工具来隔离CPU。[**Tuna**]{.application} 可以随时隔离
CPU，不仅仅局限于启动时。但这种隔离方法与 *`isolcpus`*
参数略有不同，并且目前尚未实现与 *`isolcpus`*
相关的性能收益。关于此工具的详情，请参见 ＜[第 3.3.8 节 "使用 Tuna 配置
CPU、线程和中断关联"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Configuring_CPU_thread_and_interrupt_affinity_with_Tuna){.xref}＞。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Setting_interrupt_affinity}3.3.7. 设置中断关联 {.title}
:::
::: para
中断请求有一个相关的关联属性*`smp_affinity`*，
它能确定处理中断请求的处理器。若要提高应用程序的性能，就将中断关联和进程关联分配至同一处理器或分配至同一内核的处理器。这可以使特定的中断和应用程序线程共享高速缓存线路。
:::
::: para
特定中断请求的中断关联值存储在相关的
`/proc/irq/irq_number/smp_affinity`{.filename} 文件下。*`smp_affinity`*
是存储为十六进制的位掩码来代表系统中所有的处理器。默认值为
`f`{.literal}，这意味着一个中断请求可以在系统中任何处理器中处理。如果将这个值设为
`1`{.literal} 则意味着只有 0 位处理器可以处理这一中断。
:::
::: para
在超过 32 个处理器的系统中，用户须将 *`smp_affinity`* 的值限定为分散的
32 位组。例如，如果一开始只想使用 64 位处理器系统中的 32
位处理器来处理一个中断请求，可以运行：
:::
``` screen
# echo 0xffffffff,00000000 > /proc/irq/IRQ_NUMBER/smp_affinity
```
::: para
此外，如果 BIOS 导出其 NUMA 拓扑，[**irqbalance**]{.application}
服务可以使用此信息来处理节点上的中断请求，对请求服务的硬件来说此节点是本地节点。关于
[**irqbalance**]{.application}，详情请见 ＜[第 A.1 节
"irqbalance（中断平衡）"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-irqbalance){.xref}＞。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
如果在支持中断驱动且可以修改一个中断请求的 *`smp_affinity`*
系统中设置硬件，那么特定的处理器处理一个中断请求的决策就是硬件级别，它不会受内核的干扰。关于中断驱动，详情请见
＜[第 6 章
*网络*](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Networking.html){.xref}＞。
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-CPU.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_suggestions-Configuring_CPU_thread_and_interrupt_affinity_with_Tuna}3.3.8. 使用 Tuna 配置 CPU、线程和中断关联 {.title}
:::
::: para
[**Tuna**]{.application} 能够控制
CPU、线程及中断关联，并能给其所能控制的每类实体提供大量操作。完整的
[**Tuna**]{.application} 功能列表，请参见 ＜[第 A.2 节
"Tuna"](#appe-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Tool_Reference-Tuna){.xref}＞。
:::
::: para
要从一个或多个特定的 CPU 中移除所有线程，请运行如下命令，使用想要隔离的
CPU 数量来替换 *CPUs*。
:::
``` screen
# tuna --cpus CPUs --isolate
```
::: para
要在可运行特定线程的 CPU 列表中加入一个
CPU，请运行如下命令，使用想要加入的 CPU 数量来替换 *CPUs*。
:::
``` screen
# tuna --cpus CPUs --include
```
::: para
要将一个中断请求移动至特定的 CPU，请运行如下命令，用 CPU 数量替换
*CPU*，用想要移动且使用逗号分隔的中断请求列表替换 *IRQs*。
:::
``` screen
# tuna --irqs IRQs --cpus CPU --move
```
::: para
此外，用户可以使用如下命令来找到所有 `sfc1*`{.literal} 模式的中断请求。
:::
``` screen
# tuna -q sfc1* -c7 -m -x
```
::: para
要改变一个线程的策略和优先级，请运行如下命令，使用想要改变的线程替换
*thread*，使用需要的线程运行策略名称替换 *policy*，用从
0（最低优先级）至 99（最高优先级）间的一个整数替换 *level*。
:::
``` screen
# tuna --threads thread --priority policy:level
```
:::
:::
:::
[]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html}
::: chapter
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory}第 4 章 内存 {.title}
:::
::: para
本章概述了红帽企业版 Linux 7 的内存管理功能。＜[第 4.1 节
"注意事项"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory-Considerations){.xref}＞
探讨了与内存相关的会影响性能的因素。＜[第 4.2 节
"监控及诊断性能问题"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory-Monitoring_and_diagnosing_performance_problems){.xref}＞
教您如何使用红帽企业版 Linux 7
的工具来诊断与内存使用情况或配置细节相关的性能问题。＜[第 4.3 节
"配置工具"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory-Configuration_tools){.xref}＞
探讨了可以使用的工具和策略，以此解决红帽企业版 Linux 7
中与内存相关的性能问题。
:::
::: section
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory-Considerations}4.1. 注意事项 {.title}
:::
::: para
对于适中的工作负载，红帽企业版 Linux 7
会默认优化。如果用户的应用程序或用例需要大量的内存，那么改变系统处理虚拟内存可以提高应用程序的性能。
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations-Page_size}4.1.1. 页面大小 {.title}
:::
::: para
物理内存管理区块称为页面。每一个页面的物理位置都映射到一个虚拟位置以便处理器能够访问内存。这种映射存储于一个叫做页面表的数据结构中。
:::
::: para
默认情况下，一个页面大约有 4
KB。由于页面的默认大小非常小，因此用户需要很多页面来管理大量的内存。但是，页面表只能存储有限的地址映射，增加其存储地址映射的数量既昂贵又困难，因为要考虑到将性能等级保持在内存需求的范围内。
:::
::: para
红帽企业版 Linux
通过静态大型分页来给每个页面管理大内存的能力。静态大型分页可以配置到 1
GB 大小。但很难对其进行手动管理，必须在启动时就分配好。
:::
::: para
透明大型分页很大程度上是之余静态大型页面的一个自动选择。透明大型页面大小为
2 MB
且默认启动。它们有时会干扰对延迟敏感的应用程序，因此常常在延迟严重时被禁用。
:::
::: para
配置大页面以提高应用程序性能，详情请见 ＜[第 4.3.1 节
"配置大页面"](#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_huge_pages){.xref}＞。
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Considerations-Translation_Lookaside_Buffer_size}4.1.2. 转换后背缓冲区大小 {.title}