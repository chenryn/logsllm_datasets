        putchar('\n');
    }
(1) `flag_exp` 等同于`-e`的参数。`-e, --extend display other/more information`.举例如下：
       netstat -e 
       Proto Recv-Q Send-Q Local Address           Foreign Address         State       User       Inode
       tcp        0      0 localhost:6379          172.16.1.200:46702    ESTABLISHED redis      437788048
       netstat
       Proto Recv-Q Send-Q Local Address           Foreign Address         State      
       tcp        0      0 localhost:6379          172.16.1.200:46702    ESTABLISHED
发现使用`-e`参数会多显示`User`和`Inode`号码。而在本例中还可以如果用户名不存在，则显示 uid
[getpwuid](https://linux.die.net/man/3/getpwuid)
(2) `flag_prg`等同于`-p, --programs display PID/Program name for sockets`。举例如下：
       netstat -pe
       Proto Recv-Q Send-Q Local Address           Foreign Address         State       User       Inode      PID/Program name
       tcp        0      0 localhost:6379          172.16.1.200:34062      ESTABLISHED redis      437672000  6017/redis-server *
       netstat -e
       Proto Recv-Q Send-Q Local Address           Foreign Address         State       User       Inode
       tcp        0      0 localhost:6379          172.16.1.200:46702    ESTABLISHED redis      437788048
可以看到是通过`prg_cache_get(inode)`，inode来找到对应的PID和进程信息;
(3) `flag_selinux`等同于`-Z, --context display SELinux security context for
sockets`
#### prg_cache_get
对于上面的通过`inode`找到对应进程的方法非常的好奇，于是去追踪`prg_cache_get()`函数的实现。
    #define PRG_HASH_SIZE 211
    #define PRG_HASHIT(x) ((x) % PRG_HASH_SIZE)
    static struct prg_node {
        struct prg_node *next;
        unsigned long inode;
        char name[PROGNAME_WIDTH];
        char scon[SELINUX_WIDTH];
    } *prg_hash[PRG_HASH_SIZE];
    static const char *prg_cache_get(unsigned long inode)
    {
        unsigned hi = PRG_HASHIT(inode);
        struct prg_node *pn;
        for (pn = prg_hash[hi]; pn; pn = pn->next)
        if (pn->inode == inode)
            return (pn->name);
        return ("-");
    }
在`prg_hash`中存储了所有的inode编号与`program`的对应关系，所以当给定一个 inode
编号时就能够找到对应的程序名称。那么`prg_hash`又是如何初始化的呢？
#### prg_cache_load
我们使用 debug 模式，加入`-p`的运行参数:
[
程序会运行到 2289 行的`prg_cache_load()`; 进入到`prg_cache_load()`函数中． 由于整个函数的代码较长，拆分来分析.
##### 获取fd
    #define PATH_PROC      "/proc"
    #define PATH_FD_SUFF    "fd"
    #define PATH_FD_SUFFl       strlen(PATH_FD_SUFF)
    #define PATH_PROC_X_FD      PATH_PROC "/%s/" PATH_FD_SUFF
    #define PATH_CMDLINE    "cmdline"
    #define PATH_CMDLINEl       strlen(PATH_CMDLINE)
    if (!(dirproc=opendir(PATH_PROC))) goto fail;
        while (errno = 0, direproc = readdir(dirproc)) {
        for (cs = direproc->d_name; *cs; cs++)
            if (!isdigit(*cs))
            break;
        if (*cs)
            continue;
        procfdlen = snprintf(line,sizeof(line),PATH_PROC_X_FD,direproc->d_name);
        if (procfdlen = sizeof(line) - 5)
            continue;
        errno = 0;
        dirfd = opendir(line);
        if (! dirfd) {
            if (errno == EACCES)
            eacces = 1;
            continue;
        }
        line[procfdlen] = '/';
        cmdlp = NULL;
(1) `dirproc=opendir(PATH_PROC);errno = 0, direproc = readdir(dirproc)`
遍历`/proc`拿到所有的 pid  
(2) `procfdlen = snprintf(line,sizeof(line),PATH_PROC_X_FD,direproc→d_name);`
遍历所有的`/proc/pid`拿到所有进程的 fd  
(3) `dirfd = opendir(line);` 得到`/proc/pid/fd`的文件句柄
##### 获取inode
    while ((direfd = readdir(dirfd))) {
            /* Skip . and .. */
            if (!isdigit(direfd->d_name[0]))
                continue;
        if (procfdlen + 1 + strlen(direfd->d_name) + 1 > sizeof(line))
           continue;
        memcpy(line + procfdlen - PATH_FD_SUFFl, PATH_FD_SUFF "/",
            PATH_FD_SUFFl + 1);
        safe_strncpy(line + procfdlen + 1, direfd->d_name,
                        sizeof(line) - procfdlen - 1);
        lnamelen = readlink(line, lname, sizeof(lname) - 1);
        if (lnamelen == -1)
            continue;
            lname[lnamelen] = '\0';  /*make it a null-terminated string*/
            if (extract_type_1_socket_inode(lname, &inode) d_name, sizeof(line) - procfdlen
- 1);` 得到遍历之后的fd信息，比如 /proc/pid/fd
(2) `lnamelen = readlink(line, lname, sizeof(lname) - 1);` 得到 fd 所指向的
link，因为通常情况下 fd 一般都是链接，要么是 socket 链接要么是 pipe 链接．如下所示：
       $ ls -al /proc/1289/fd
       total 0
       dr-x------ 2 username username  0 May 25 15:45 .
       dr-xr-xr-x 9 username username  0 May 25 09:11 ..
       lr-x------ 1 username username 64 May 25 16:23 0 -> 'pipe:[365366]'
       l-wx------ 1 username username 64 May 25 16:23 1 -> 'pipe:[365367]'
       l-wx------ 1 username username 64 May 25 16:23 2 -> 'pipe:[365368]'
       lr-x------ 1 username username 64 May 25 16:23 3 -> /proc/uptime
(3) 通过`extract_type_1_socket_inode`获取到 link 中对应的 inode 编号．
       #define PRG_SOCKET_PFX    "socket:["
       #define PRG_SOCKET_PFXl (strlen(PRG_SOCKET_PFX))
       static int extract_type_1_socket_inode(const char lname[], unsigned long * inode_p) {
       /* If lname is of the form "socket:[12345]", extract the "12345"
          as *inode_p.  Otherwise, return -1 as *inode_p.
          */
       // 判断长度是否小于 strlen(socket:[)+3
       if (strlen(lname) =sizeof(line) - 5)
               continue;
           safe_strncpy(line + procfdlen - PATH_FD_SUFFl, PATH_CMDLINE,sizeof(line) - procfdlen + PATH_FD_SUFFl);
       fd = open(line, O_RDONLY);
       if (fd d_name, cmdlp);` 拼接
pid 和 cmdlp，最终得到的就是类似与 `6017/redis-server *` 这样的效果
(6) 最终程序调用 `prg_cache_add(inode, finbuf, "-");` 将解析得到的inode和finbuf 加入到缓存中.
#### prg_cache_add
    #define PRG_HASH_SIZE 211
    #define PRG_HASHIT(x) ((x) % PRG_HASH_SIZE)
    static struct prg_node {
        struct prg_node *next;
        unsigned long inode;
        char name[PROGNAME_WIDTH];
        char scon[SELINUX_WIDTH];
    } *prg_hash[ ];
    static void prg_cache_add(unsigned long inode, char *name, const char *scon)
    {
        unsigned hi = PRG_HASHIT(inode);
        struct prg_node **pnp,*pn;
        prg_cache_loaded = 2;
        for (pnp = prg_hash + hi; (pn = *pnp); pnp = &pn->next) {
        if (pn->inode == inode) {
            /* Some warning should be appropriate here
               as we got multiple processes for one i-node */
            return;
        }
        }
        if (!(*pnp = malloc(sizeof(**pnp))))
        return;
        pn = *pnp;
        pn->next = NULL;
        pn->inode = inode;
        safe_strncpy(pn->name, name, sizeof(pn->name));
        {
        int len = (strlen(scon) - sizeof(pn->scon)) + 1;
        if (len > 0)
                safe_strncpy(pn->scon, &scon[len + 1], sizeof(pn->scon));
        else
                safe_strncpy(pn->scon, scon, sizeof(pn->scon));
        }
    }
  1. `unsigned hi = PRG_HASHIT(inode);` 使用 inode 整除 211 得到作为 hash 值
  2. `for (pnp = prg_hash + hi; (pn = *pnp); pnp = &pn->next)` 由于`prg_hash`是一个链表结构，所以通过 for 循环找到链表的结尾;
  3. `pn = *pnp;pn->next = NULL;pn->inode = inode;safe_strncpy(pn->name, name, sizeof(pn→name));`为新的 inode 赋值并将其加入到链表的末尾;
所以`prg_node`是一个全局变量，是一个链表结果，保存了 inode 编号与`pid/cmdline`之间的对应关系;
#### prg_cache_get
    static const char *prg_cache_get(unsigned long inode)
    {
        unsigned hi = PRG_HASHIT(inode);
        struct prg_node *pn;
        for (pn = prg_hash[hi]; pn; pn = pn->next)
        if (pn->inode == inode)
            return (pn->name);
        return ("-");
    }
分析完毕 prg_cache_add() 之后，看 prg_cache_get() 就很简单了．
  1. `unsigned hi = PRG_HASHIT(inode);` 通过 inode 号拿到 hash 值
  2. `for (pn = prg_hash[hi]; pn; pn = pn->next)` 遍历 prg_hash 链表中的每一个节点，如果遍历的 inode 与目标的 inode 相符就返回对应的信息。
### 总结
通过对 netstat 的一个简单的分析，可以发现其实 netstat 就是通过遍历 /proc
目录下的目录或者是文件来获取对应的信息。如果在一个网络进程频繁关闭打开关闭，那么使用 netstat 显然是相当耗时的。
* * *