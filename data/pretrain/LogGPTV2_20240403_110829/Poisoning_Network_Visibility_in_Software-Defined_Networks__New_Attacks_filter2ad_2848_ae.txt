into network topology to poison the entire network operation.
Also, some prior work about the exploitation of the view of
network topology focus on only link-state routing protocols.
Jones et al. [17] outline vulnerabilities of the design of OSPF
and discuss the possible exploitations. Nakibly et al. [12]
introduce two attacks to persistently falsify the topology
of an OSPF network, which also incurs denial of service,
eavesdropping and man-in-the-middle attacks. Such attacks are
launched by compromising the router entity or obtaining the
pre-shared keys for the authentication of router. However, the
Link Fabrication Attack in this paper can be launched from the
hosts residing in the data plane. Apart from a wired network,
The link-state routing protocols in Mobile Ad Hoc networks,
e.g., Optimized Link State Routing Protocol (OLSR), also
incur similar security challenges. As mentioned in [6], an
adversary can falsify links into OLSR topology by generating
TC (or HNA) messages. Similar to OSPF Link Fabrication,
OLSR Link Fabrication requires compromised routing entities,
which is not required in our attacks. Another attack avenue in
OLSR is the Wormhole attack [10], [32], which artiﬁcially
creates wormholes in OLSR networks by recording trafﬁc in
one location and replaying it in another location. The OLSR
Wormhole attack is only launched in a relay/replay manner.
In contrast, our Link Injection attack can also be launched by
falsifying the LLDP packets. In all, Table VII summarizes the
differences of those attack from the Link Fabrication Attack
proposed in this paper.
Note that aforementioned work motivates our study, but
the problem domain in this paper is totally different. That
is, we focus on the SDN-speciﬁc security issues which stem
from the different operations of SDN networks and legacy
networks, as well as from the security omissions in the design
and implementation of current OpenFlow Controllers.
VIII. CONCLUSION
In this paper, we propose new SDN-speciﬁc attack vectors,
Host Location Hijacking Attack and Link Fabrication Attack,
which seriously challenge the core advantage of SDN, i.e.,
network-wide visibility. We demonstrate that the attacks can
effectively poison the network topology information, thereby
misleading the controller’s core services and applications. We
also systematically investigate the solution space and then
present TopoGuard, a new security extension to the OpenFlow
controllers, which provides automatic and real-time detection
of Network Topology Poisoning Attacks. Finally, our prototype
implementation shows a simple yet effective and efﬁcient
defense against the Network Topology Poisoning Attacks. With
the publication of this paper, we also plan to release our
prototype tool to help ﬁx these vulnerabilities in widely used
OpenFlow controllers. We hope that this work will attract
more attention to SDN security research and contribute to
the standardization of the SDN speciﬁcation with security
considerations.
ACKNOWLEDGEMENTS
This material is based upon work supported in part by the
Air Force Ofﬁce of Scientiﬁc Research under FA-9550-13-1-
0077 and a Google Faculty Research award. Any opinions,
13
Attack Requirement
OpenFlow Host Location Hijacking
ARP Cache Poisoning
Attacker Location Restriction
Anywhere within the OpenFlow domain with the target
Stay within the same broadcast domain with the target
Target Visibility
Attack Avenue
Falsiﬁed Packet Type
Attack Result
MAC Address and IP Address
OpenFlow Host Location Hijacking
Almost every kind of packets
OpenFlow Host Location Hijacking
Hijack the Target Location
Yes
Only IP Address
ARP Cache Poisoning
Only ARP packet
ARP Cache Poisoning
Yes
TABLE VI: Comparison between Host Location Hijacking and ARP Cache Poisoning
Attack Requirement
OFDP Link Fabrication
STP Mangling
OSPF Link Fabrication
OLSR Wormhole
Attack relies on Compromised Routers/Switches
Need to defeat Neighbor Discovery/Authentication
No
No
No
No
Yes
Yes
No
No
Attack Avenue
Falsify Control Message
Relay Control Message
Attack Result
OFDP Link Fabrication
STP Mangling
OSPF Link Fabrication
OLSR Wormhole
Yes
Yes
Yes
No
Yes
Yes
No
Yes
OFDP Link Fabrication
STP Mangling
OSPF Link Fabrication
OLSR Wormhole
Injecting False Link into Network Topology
Yes
Affected Service
All Topology-Based Services
No
STP
Yes
Routing
Yes
Routing
TABLE VII: Comparison between Link Fabrication Attack and Previous Counterparts
ﬁndings, and conclusions or recommendations expressed in
this material are those of the authors and do not necessarily
reﬂect the views of AFOSR and Google.
REFERENCES
[1] Apache http server project. https://httpd.apache.org/.
[2] Conﬁguring port
security.
http://www.cisco.com/c/en/us/td/docs/
switches/lan/catalyst4500/12-2/25ew/conﬁguration/guide/conf/port sec.
html.
n-casting
n-casting-mobility-using-openﬂow/.
http://archive.openﬂow.org/wp/
openﬂow.
using
[3]
[4] OpenFlow Speciﬁcation v1.4.0.
http://www.opennetworking.org/
images/stories/downloads/sdn-resources/onf-speciﬁcations/openﬂow/
openﬂow-spec-v1.4.0.pdf.
[5] Openﬂow wireshark dissector.
http://archive.openﬂow.org/wk/index.
php/OpenFlow Wireshark Dissector.
[6] Optimized
Link
State
Routing
Protocol
(OLSR).
http://www.ietf.org/rfc/rfc3626.txt.
[7] Proxy
ARP.
http://www.cisco.com/c/en/us/support/docs/
ip/dynamic-address-allocation-resolution/13718-5.html#
howdoesproxyarpwork.
[8] Scapy: Packet manipulation program. http://www.secdev.org/projects/
scapy/.
[9] K. Benton, L. J. Camp, and C. Small. Openﬂow vulnerability assess-
ment. In Proceedings of ACM SIGCOMM Workshop on Hot Topics in
Software Deﬁned Networking (HotSDN’13), August 2013.
[10] D. Raffo C. Adjih and P. Mhlethaler. Attacks against olsr: Distributed
In 2005 OLSR Interop and Workshop,
key management for security.
July 2005.
[11] M. Dobrescu and K. Argyraki. Software dataplane veriﬁcation.
In
Proceedings of the 11th USENIX Symposium on Networked Systems
Design and Implementation (NSDI), 2014.
[12] D. Gonikman G. Nakibly, A. Kirshon and D. Boneh. Persistent ospf
attacks. In In proceedings of the 19th Annual Network & Distributed
System Security Conference (NDSS’12), 2012.
[13] Natasha Gude, Teemu Koponen, Justin Pettit, Ben Pfaff, Martin Casado,
Nick McKeown, and Scott Shenker. Nox: towards an operating system
for networks. July 2008.
14
[14] A. Guha, M. Reitblatt, and N. Foster. Machine-veriﬁed network
In Proceedings of the ACM Conference on Programming
controller.
Language Design and Implementation (PLDI), 2013.
[15] B. Heller, S. Seetharaman, P. Mahadevan, Y. Yiakoumis, P. Sharma,
S. Banerjee, and N. McKeown. Elastictree: Saving energy in data center
networks. In Proceedings of the 7th USENIX Symposium on Networked
Systems Design and Implementation (NSDI), 2010.
J. H. Jafarian, E. Al-Shaer, and Q. Duan. Openﬂow random host
mutation: Transparent moving target defense using software deﬁned
In Proceedings of ACM SIGCOMM Workshop on Hot
networking.
Topics in Software Deﬁned Networking (HotSDN’12).
[16]
[17] E. Jones and O. L. Moigne. Ospf security vulnerabilities analysis. In
Internet-Draft draft-ietf-rpsec-ospf-vuln-02, IETF, June 2006.
[18] P. Kazemian, M. Chang, H. Zeng, S. Whyte, G. Varghese, and N. McK-
eown. Real time network policy checking using header space analysis.
In Proceedings of the 10th USENIX Symposium on Networked Systems
Design and Implementation (NSDI), 2013.
[19] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey. Veri-
In Proceedings
ﬂow: Verifying network-wide invariants in real time.
of the 10th USENIX Symposium on Networked Systems Design and
Implementation (NSDI), 2013.
[20] L.B. Kish. Protection against the man-in-the-middle-attack for the
kirchhoff-loop-johnson(-like)-noise cipher and expansion by voltage-
based security. In Fluctuation and Noise Letters 6 (2006) L57L63.
[21] M. Kuzniar, P. Peresini, M. Canini, D. Venzano, and D. Kostic. A
soft way for openﬂow switch interoperability testing. In Proceedings
of ACM Conference on emerging Networking EXperiments and Tech-
nologies (CoNEXT), 2012.
[22] P. Peresini D. Kostic M. Canini, D. Venzano and Jennifer Rexford.
In Proceedings of the 9th
A nice way to test openﬂow applications.
USENIX Symposium on Networked Systems Design and Implementation
(NSDI), 2012.
[23] K. Mahajan M. Dhawan, R. Poddar and V. Mann. Cloudnaas: a cloud
networking platform for enterprise applications. In In proceedings of
the 22th Annual Network & Distributed System Security Conference
(NDSS’15), 2015.
[24] Mininet. Rapid prototyping for software deﬁned networks. http://yuba.
stanford.edu/foswiki/bin/view/OpenFlow/.
[25] C. Monsanto, N. Foster, R. Harrison, and D. Walker. A compiler and
run-time system for network programming languages. In Proceedings
computation (by BPDUs) in traditional networks, OpenFlow
controller has the capability to solve the Spanning Tree in
a fast-convergence manner. As described in Algorithm 1, the
spanning tree calculation in OpenFlow controllers is built upon
the topology information.
After calculating spanning tree, OpenFlow controllers
leverage Port-Mod messages to manage the switch port status.
In particular, if particular OpenFlow switch ports stay outside
of Spanning Tree, the controller can send out Port-Mod mes-
sage with the ofp port conﬁg of OFPPC PORT DOWN to
turn off those ports.
Algorithm 1 Topology-based STP Calculation in SDN
Input: T OP O:The topology of current network
Output: ST :The spanning tree of TOPO
1: ST.switches ← ∅, ST.links ← ∅, candidateSwitches ← ∅,
solvedSwitches ← ∅
for each switch S ∈ T OP O.switches do
if S /∈ solvedSwithes and (root, S) ∈ T OP O.links then
2: root = POP(sorted(T OP O.switches)
3: while TRUE do
4:
5:
6:
candidateSwitches = candidateSwitches(cid:83) S
ST.switches = ST.switches(cid:83) S
ST.links = ST.links(cid:83)(root, S)
solvedSwitches = solvedSwitches(cid:83) root
end if
if candidateSwitches == ∅ then
end if
root = POP(sorted(candidateSwitches))
break
7:
8:
9:
10:
11:
12:
13:
14:
15:
16: end while
17: return ST
end for
of the 39th annual ACM SIGPLAN-SIGACT symposium on Principles
of programming languages, 2012.
[26] A. Ornaghi and M. Valleri. Man In The Middle Attacks. http://www.
blackhat.com/presentations/bh-europe-03/bh-europe-03-valleri.pdf.
[27] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu. A
In Proceedings
security enforcement kernel for openﬂow networks.
of ACM SIGCOMM Workshop on Hot Topics in Software Deﬁned
Networking (HotSDN’12), August 2012.
[28] R. Sherwood, G. Gibb, K. Yap, G. Appenzeller, M. Casado, N. McK-
eown, and G. Parulkar. Can the production network be the testbed? In
Proceedings of the USENIX Symposium on Operating Systems Design
and Implementation (OSDI), 2010.
[29] S. Shin and G. Gu. Attacking software-deﬁned networks: A ﬁrst
In Proceedings of ACM SIGCOMM
feasibility study (short paper).
Workshop on Hot Topics in Software Deﬁned Networking (HotSDN),
2013.
[30] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson.
Fresco: Modular composable security services for software-deﬁned
networks. In Proceedings of the 20th Annual Network and Distributed
System Security Symposium (NDSS’13), 2013.
[31] S. Shin, V. Yegneswaran, P. Porras, and G. Gu. Avant-guard: Scalable
and vigilant switch ﬂow management in software-deﬁned networks. In
Proceedings of the 20th ACM Conference on Computer and Communi-
cations Security (CCS), 2013.
[32] A. Perrig Y. Hu and D. B. Johnson. Wormhole attacks in wireless
networks. In 2005 OLSR Interop and Workshop, July 2005.
APPENDIX
A. Example Topology-dependent Services in SDN
In this section, we describe two representative topology-
dependent services (among many others), i.e. shortest-path
routing and spanning tree, to illustrate how topology manage-
ment services contribute to SDN network operations.
Shortest-Path Routing Service. Packet routing is the cor-
nerstone for network operation. The topology service is crucial
for packet forwarding in all OpenFlow instantiations. To ex-
plain the packet processing procedure in OpenFlow controllers,
we take the example of the routing service in Floodlight. We
assume Alice wants to visit a web site “ABC.com”. After a
successful DNS resolution, Alice receives the corresponding
IP address and then sends an HTTP request to “ABC.com”.
Since the nearest switch is unable to ﬁnd a ﬂow rule to forward
this packet, the OpenFlow switch reports it to the OpenFlow
controller as a Packet-In message. In order to process this com-
munication, the OpenFlow controller resolves the destination
location by referring to the Host Proﬁle stemmed from Host
Tracking Service. After resolving location information of the
destination, the OpenFlow controller runs a shortest path algo-
rithm (e.g., Dijkstra’s algorithm) on the topology information
derived from the Link Discovery Service to compute a route
(in its networks) from the source to the destination. If the
OpenFlow controller successfully derives a route, it pushes
a route update to involved OpenFlow Switch(es) for future
communication between Alice and “ABC.com.”
Spanning Tree Protocol Service Apart from shortest path
routing, loop-free is another important concern for network
management. For this purpose, Spanning Tree Protocol (STP
for short) is used to disable redundant ports and links as
a layer 2 extension. Also,
it provides an avenue to save
energy in data center network [15]. Instead of distributed STP
15