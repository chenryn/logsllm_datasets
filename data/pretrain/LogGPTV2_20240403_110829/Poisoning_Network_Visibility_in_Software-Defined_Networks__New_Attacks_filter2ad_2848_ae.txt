### Introduction to Network Topology Poisoning

Network topology poisoning is a critical security issue that can disrupt the entire network operation. Previous research has primarily focused on link-state routing protocols, such as OSPF and OLSR, but the scope of this paper extends to SDN-specific security challenges.

#### Prior Work on Link-State Routing Protocols

- **OSPF Vulnerabilities**: Jones et al. [17] identified design vulnerabilities in OSPF and discussed potential exploitation methods.
- **OSPF Attacks**: Nakibly et al. [12] introduced two attacks that can persistently falsify the topology of an OSPF network, leading to denial of service, eavesdropping, and man-in-the-middle (MITM) attacks. These attacks typically require compromising a router or obtaining pre-shared keys for authentication.
- **OLSR Security Challenges**: The Optimized Link State Routing Protocol (OLSR) in Mobile Ad Hoc Networks (MANETs) also faces similar security issues. An adversary can inject false links into the OLSR topology by generating TC (Topology Control) or HNA (Host and Network Association) messages. OLSR Link Fabrication, like OSPF, requires compromised routing entities. Additionally, OLSR is vulnerable to Wormhole attacks [10], [32], where traffic is recorded in one location and replayed in another, creating artificial wormholes.

#### Comparison with Proposed Attack

- **Link Fabrication Attack**: Unlike previous attacks, the Link Fabrication Attack proposed in this paper can be launched from hosts residing in the data plane, without the need to compromise routing entities.
- **Link Injection Attack**: This attack involves falsifying LLDP (Link Layer Discovery Protocol) packets, further differentiating it from traditional attacks.

Table VII summarizes the differences between the proposed Link Fabrication Attack and its predecessors.

### Motivation and Problem Domain

While the aforementioned work provides valuable insights, our study focuses on SDN-specific security issues. These issues arise from the unique operations of SDN networks and the security omissions in the design and implementation of current OpenFlow controllers.

### Conclusion

In this paper, we introduce two new SDN-specific attack vectors: the Host Location Hijacking Attack and the Link Fabrication Attack. These attacks challenge the core advantage of SDN, which is network-wide visibility, by poisoning the network topology information. We demonstrate that these attacks can effectively mislead the controller's core services and applications. We also systematically investigate the solution space and present TopoGuard, a new security extension for OpenFlow controllers that provides automatic and real-time detection of Network Topology Poisoning Attacks. Our prototype implementation shows that TopoGuard is both effective and efficient in defending against these attacks. We plan to release our prototype tool to help address these vulnerabilities in widely used OpenFlow controllers. We hope this work will attract more attention to SDN security research and contribute to the standardization of SDN specifications with enhanced security considerations.

### Acknowledgements

This work was supported in part by the Air Force Office of Scientific Research under FA-9550-13-1-0077 and a Google Faculty Research award. The opinions, findings, and conclusions expressed in this material are those of the authors and do not necessarily reflect the views of AFOSR and Google.

### References

[References listed here]

### Appendix: Example Topology-Dependent Services in SDN

#### Shortest-Path Routing Service

Packet routing is fundamental to network operations. In SDN, the topology service is crucial for packet forwarding. For example, in Floodlight, when Alice wants to visit "ABC.com," the OpenFlow switch reports the packet to the controller if no flow rule is found. The controller then resolves the destination location using the Host Profile from the Host Tracking Service and computes the shortest path using Dijkstra's algorithm based on the topology information from the Link Discovery Service. If a route is found, the controller updates the involved switches to facilitate future communication between Alice and "ABC.com."

#### Spanning Tree Protocol Service

Loop-free network management is another critical aspect. The Spanning Tree Protocol (STP) is used to disable redundant ports and links, ensuring a loop-free topology. In SDN, the controller can calculate the spanning tree in a fast-convergence manner, as shown in Algorithm 1. After calculating the spanning tree, the controller uses Port-Mod messages to manage switch port status, turning off ports that are outside the spanning tree.

**Algorithm 1: Topology-based STP Calculation in SDN**

```plaintext
Input: T OP O: The topology of the current network
Output: ST: The spanning tree of TOPO

1: ST.switches ← ∅, ST.links ← ∅, candidateSwitches ← ∅, solvedSwitches ← ∅
2: for each switch S ∈ T OP O.switches do
3:     if S /∈ solvedSwitches and (root, S) ∈ T OP O.links then
4:         root = POP(sorted(T OP O.switches))
5:         while TRUE do
6:             candidateSwitches = candidateSwitches ∪ S
7:             ST.switches = ST.switches ∪ S
8:             ST.links = ST.links ∪ (root, S)
9:             solvedSwitches = solvedSwitches ∪ root
10:            if candidateSwitches == ∅ then
11:                break
12:            end if
13:            root = POP(sorted(candidateSwitches))
14:        end while
15:    end if
16: end for
17: return ST
```

This algorithm ensures that the controller can efficiently manage the network topology, providing a robust and loop-free environment.