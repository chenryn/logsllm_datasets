title:Where's Crypto?: Automated Identification and Classification of Proprietary
Cryptographic Primitives in Binary Code
author:Carlo Meijer and
Veelasha Moonsamy and
Jos Wetzels
Where’s Crypto?: Automated Identification 
and Classification of Proprietary Cryptographic 
Primitives in Binary Code
Carlo Meijer, Radboud University; Veelasha Moonsamy, Ruhr University Bochum; 
Jos Wetzels, Midnight Blue Labs
https://www.usenix.org/conference/usenixsecurity21/presentation/meijer
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.Where’s Crypto?: Automated Identiﬁcation and Classiﬁcation of Proprietary
Cryptographic Primitives in Binary Code
Carlo Meijer
Radboud University
The Netherlands
PI:EMAIL
Veelasha Moonsamy
Ruhr University Bochum
Germany
PI:EMAIL
Jos Wetzels
Midnight Blue Labs
The Netherlands
PI:EMAIL
Abstract
The continuing use of proprietary cryptography in embed-
ded systems across many industry verticals, from physical
access control systems and telecommunications to machine-
to-machine authentication, presents a signiﬁcant obstacle
to black-box security-evaluation efforts. In-depth security
analysis requires locating and classifying the algorithm in
often very large binary images, thus rendering manual inspec-
tion, even when aided by heuristics, time consuming.
In this paper, we present a novel approach to automate
the identiﬁcation and classiﬁcation of (proprietary) crypto-
graphic primitives within binary code. Our approach is based
on Data Flow Graph (DFG) isomorphism, previously pro-
posed by Lestringant et al. [43]. Unfortunately, their DFG iso-
morphism approach is limited to known primitives only, and
relies on heuristics for selecting code fragments for analysis.
By combining the said approach with symbolic execution,
we overcome all limitations of [43], and are able to extend
the analysis into the domain of unknown, proprietary crypto-
graphic primitives. To demonstrate that our proposal is practi-
cal, we develop various signatures, each targeted at a distinct
class of cryptographic primitives, and present experimental
evaluations for each of them on a set of binaries, both pub-
licly available (and thus providing reproducible results), and
proprietary ones. Lastly, we provide a free and open-source
implementation of our approach, called Where’s Crypto?, in
the form of a plug-in for the popular IDA disassembler.
1 Introduction
Despite the widely-held academic consensus that cryptog-
raphy should be publicly documented [37, 40, 67], the use
of proprietary cryptography has persisted across many in-
dustry verticals ranging from physical access control sys-
tems [1,61,67,70,71,73] and telecommunications [26,30,55]
to machine-to-machine authentication [13, 67].
This situation presents a signiﬁcant obstacle to security-
evaluation efforts part of certiﬁcation, compliance, secure
procurement or individual research since it requires resorting
to highly labor-intensive reverse-engineering in order to deter-
mine the presence and nature of these algorithms before they
can be evaluated. In addition, when a proprietary algorithm
gets broken, details might not be published immediately as
a result of NDAs or court injunctions [5] leaving other po-
tentially affected parties to repeat such expensive efforts and
hampering effective vulnerability management. As such, there
is a real need for practical solutions to automatically scan bi-
naries for the presence of as-of-yet unknown cryptographic
algorithms.
Criteria
In order to support the analysis of closed-source
embedded systems for the use of proprietary cryptography,
a suitable solution should meet the following criteria: (i)
identiﬁcation of as-of-yet unknown cryptographic algorithms
falling within relevant taxonomical classes, (ii) efﬁcient sup-
port of large, real-world embedded ﬁrmware binaries, and
(iii) no reliance on full ﬁrmware emulation or dynamic instru-
mentation due to issues around platform heterogeneity and
peripheral emulation. As discussed in Section 3, there is no
prior work meeting all of these criteria.
Approach To meet the above criteria, our approach bases
itself on a structural taxonomy of cryptographic primitives.
The idea is that, since the vast majority of proprietary cryptog-
raphy falls within established primitive classes [67], we can
develop structural signatures allowing for the identiﬁcation
of any algorithm within these classes without having to rely
on knowledge of the algorithm’s particularites. To this end,
we utilize a taxonomy based on [4, 39, 46, 50] and illustrated
in Figure 1. Note that this taxonomy is purely instrumental
and does not intend to be exhaustive or allow for an exclusive
partitioning of algorithms.
Our approach is built on two fundamentals: Data Flow
Graph (DFG) isomorphism and symbolic execution. As de-
scribed in Section 4, the limitations of prior work on DFG
isomorphism [43] are overcome through augmentation with
symbolic execution which allows us to specify structural sig-
natures for taxonomic classes of cryptographic primitives and
USENIX Association
30th USENIX Security Symposium    555
Public-key
primitives
. . .
MAC
Cryptographic
primitives
Symmetric-key
primitives
Symmetric
ciphers
Unkeyed
primitives
. . .
. . .
Block
ciphers
Stream
ciphers
Feistel
network
SPN
. . .
FSR
ARX
. . .
Balanced
Unbalanced
LFSR
NLFSR
. . .
Classic
Feistel
Matsui
LnR
Key size,
Polynomials,
Cycles, . . .
A5/1
KeeLoq
Key size,
Polynomials,
Cycles, . . .
Rounds: 16
Block size: 64
Key size:56
DES
KASUMI
Rounds: 8
Block size: 64
Key size:128
Figure 1: Taxonomical tree of algorithm classes
analyze binary code for matches. The focus of this paper is
on symmetric and unkeyed primitives.
Contribution Our contribution is threefold. First, our novel
approach combines subgraph isomorphism with symbolic ex-
ecution, solving the open problem of fragment selection and
eliminating the need for heuristics and thus, overcoming the
limitations of prior work which rendered it unsuited to iden-
tifying unknown ciphers. To the best of our knowledge, as
discussed in Section 3, there is currently no prior work in
either industry or academia that addresses the problem of
identifying unknown cryptographic algorithms. Second, we
propose a new domain-speciﬁc language (DSL) for deﬁning
the structural properties of cryptographic primitives, along
with several examples. Finally, a free and open-source proof-
of-concept (PoC) implementation, Where’s Crypto?, is made
available1 and evaluated in terms of analysis time and accu-
racy against relevant real-world binaries.
2 Scope and limitations
Normalization and optimization A single function can
be represented as many different combinations of assembly
instructions depending on architecture and compiler particu-
larities. Attempting to construct a 1–to–1 mapping between
semantic equivalence classes and DFGs is beyond the scope
of this work. When our normalization maps two expressions
to the same DFG node, they are considered to be semanti-
cally equivalent. While the inverse is not necessarily true,
our approach can operate as if this were the case since, for a
compiler to take advantage of semantic equivalences, it must
be consistently aware of them. Therefore, we can leverage
this fact to recognize compiler-generated equivalences.
1https://github.com/wheres-crypto/wheres-crypto
Implicit ﬂows Data dependencies may also arise due
to control-dependent assignments. For example, given
two boolean variables a and b, statements a ← b and
if a then b ← true; else b ← false are semantically
equivalent. In the former, b directly ﬂows to a, and there-
fore the dependency is apparent in its corresponding DFG,
whereas in the latter, the dependency information is lost. Since
data-dependent branches increase side-channel susceptibility,
developers should refrain from using them for cryptographic
primitives. Therefore, we believe it is justiﬁed to declare im-
plicit ﬂows out of scope. Note that implicit ﬂows is a concept
different from data-dependent branches. Support for the latter
is achieved by means of symbolic execution (Section 6).
Function entry points Our PoC implementation relies on
IDA’s recognition of function entry points as input to our
algorithm. As such, inaccuracies in IDA’s function recognition
will reduce our coverage. However, this is not an inherent
limitation of our approach but merely of the implementation.
Code obfuscation Since code obfuscation presents an in-
herent challenge to any binary-analysis approach, our ap-
proach assumes that the input it operates on is not obfuscated
and delegates this de-obfuscation to a manual and/or auto-
mated pre-processing step. Automated binary deobfuscation
is a well-established research ﬁeld of its own which consists
of a wide variety of static, dynamic, symbolic and concolic
approaches [24, 57, 75, 77] drawing upon synthesis [9, 11],
optimization [31], semantic equivalence [65] and machine
learning [64] based techniques in order to make obfuscated
binaries amenable to analysis.
Taxonomical constraints
In our PoC evaluation and the ex-
amples of our DSL, we have limited our discussion to a subset
of the taxonomy of cryptographic primitives. This is not an
inherent limitation of our approach, but merely of our PoC
and its evaluation. Our approach is essentially agnostic with
respect to the employed taxonomy, which can be extended as
users see ﬁt, and only assumes that the algorithm the analyst
is looking for is within one of its classes. Given that the vast
majority of proprietary cryptography falls within a speciﬁc
subset of established primitive classes [67], namely stream-
and block ciphers and hash functions, we do not consider this
a practical issue.
False positives Certain primitive classes are a subset of
others and some instances ﬁt the deﬁnition of several ones.
As such, their matches are prone to false positives. Examples
of such are discussed in Section 11.2.1. We do not consider
this a serious practical problem as our solution is intended to
assist a human analyst who will be easily capable of pruning
a limited number of false positives compared to the burden of
unassisted analysis required by the status quo.
Furthermore, certain primitive classes are essentially un-
derdeﬁned. That is to say, their deﬁnition is so broad that
556    30th USENIX Security Symposium
USENIX Association
characteristic properties are not distinctive enough for a mean-
ingful identiﬁcation. For example, the deﬁning property of
stream ciphers is two data streams being XOR-ed together.
Obviously, identifying instances of XOR results in an over-
whelming number of false positives. In case a signature for
such a generic class is desired, an alternative approach is to
craft signatures for every subclass contained within it.
Path oracle policy The path oracle policy discussed in Sec-
tion 6.1 is chosen such that the resulting graph represents n
iterations of an algorithm. While this typically satisﬁes our
goals, there are a few exceptions to this rule. First, compilers
sometimes ensure loop-guard evaluation during both entry
and exit, resulting in a DFG representing n +1 iterations. Sec-
ond, cryptographic primitives with a constant iteration length
are beyond the control of the path oracle. Finally, loop un-
rolling will result in a DFG representing kn iterations, where
k denotes the number of compiler-grouped iterations. In order
to overcome this limitation, we suggest taking the possibility
of iteration count deviating from n into account during signa-
ture construction as described in Section 10, for example by
deﬁning a minimum rather than an exact match.
3 Prior work
Prior work by academia and industry into the identiﬁcation of
cryptographic algorithms in binary code can be divided into
(combinations of) the following approaches:
Dedicated functionality identiﬁcation The most naive
and straight-forward approach consists of identifying ded-
icated cryptographic functionality in the form of OS APIs
(e.g. Windows CryptoAPI/CNG) [47], library imports or ded-
icated instructions (e.g. AES-NI). This approach is inherently
incapable of detecting unknown algorithms.
Data signatures The most common approach employed in
practice [3, 36, 44, 45, 52, 56, 58, 74] consists of identifying
cryptographic algorithms on the basis of constants (e.g. IVs,
Nothing-Up-My-Sleeve Numbers, padding) and lookup ta-
bles (e.g. S-Boxes, P-Boxes). The approach is unsuitable for
detecting unknown algorithms. Moreover, the same applies
for known algorithms that do not rely on ﬁxed data, or those
that do, but, for example, use dynamically generated S-Boxes,
rather than embedded ones.
Code heuristics Another series of approaches rely on code
heuristics, which are applied either statically or dynamically,
like mnemonic-constant tuples [35, 42], which take into ac-
count word sizes, endianness, and multiplicative and additive
inverses but otherwise suffer from the same drawbacks as data
signatures.
A second heuristic relies on the observation that symmetric
cryptographic routines tend to consist of a high ratio of bit-
wise arithmetic instructions [18, 35, 42, 47, 56] and attempt to
classify functions based on a threshold. The drawback of this
approach is that it lacks granular taxonomical identiﬁcation
capabilities as well as being highly prone to false positives,
especially on embedded systems where heavy bitwise arith-
metic is typically present as part of memory-mapped register
operations required for peripheral interaction.
Deep learning Hill et al. [38] propose a Dynamic Con-
volutional Neural Network based approach which, however,
is unsuited for our purposes due to its reliance on dynamic
binary instrumentation and its inherent inability to classify
unknown algorithms.
Data ﬂow analysis One set of approaches to data ﬂow
analysis relies on the static relation between functions and
their inputs and outputs [19, 35, 47, 53]. One plausible ap-
proach is to perform taint analysis and evaluate function I/O
entropy changes, which relies on emulation and as such is un-
suitable as per our criteria in Section 1. Another approach is to
compare emulated or symbolically executed function I/O to a
collection of reference implementations or test vectors, which
is inherently incapable of detecting unknown algorithms.
Another approach [76] utilizes dynamic instrumentation
and symbolic execution to translate candidate cryptographic
algorithms into boolean formulas for subsequent comparison
to reference implementations using guided fuzzing. However,
its reliance on dynamic instrumentation and inherent inabil-
ity to recognize unknown algorithms render the approach
unsuitable for our purposes.
Finally, there is the DFG isomorphism approach as pro-
posed by [43] which produces DFGs from a given binary and
compares it against graphs of known cryptographic algorithms
through the use of Ullmann’s subgraph isomorphism algo-
rithm [66]. A DFG is a Directed Acyclic Graph (DAG) repre-
senting the ﬂow of data within a sequence of arithmetic/logic
operations. A vertex represents either an operation, or an in-
put variable. The presence of an edge between vertex v1 and
v2 means that v1 (or the result of operation v1) is an input to
operation v2. Due to the nature of DFGs, code ﬂow informa-
tion cannot be expressed. As such, the contributions of [43]
are limited to linear sequences of instructions. Moreover, the
authors argue that since cryptographic implementations ought
to avoid data-dependent branching due to side-channel sus-
ceptibility, one can assume all cryptographic code is free from
data-dependent conditional instructions. This latter general-
ization introduces several limitations.
First, no straightforward strategy for selecting code frag-
ments is proposed. Performing the analysis on a per-function
basis is complicated by the fact that cryptographic implemen-
tations are commonly surrounded by some basic control logic,
such as checks on input parameters. As a result, analysis
can neither be applied to entire functions nor across function
boundaries through inlining and hence the authors propose a
limited set of selection heuristics constraining the work.
Second, the approach performs well when identifying
known algorithms since one can take advantage of algorithm-
USENIX Association
30th USENIX Security Symposium    557
unique characteristics, but this does not hold when attempting
to identify unknown algorithms. Furthermore, a common pat-
tern is that the class of a cryptographic primitive often only
becomes apparent once the analysis incorporates conditional
instructions. We clarify this point using the following toy
examples.
Suppose that we would like to identify a proprietary stream
cipher σ. A typical implementation contains a key-stream gen-
erator, generating pseudo-random bytes in a loop. Inevitably,
this loop contains a conditional instruction causing the pro-
gram to either re-enter or exit the loop, depending on the
length parameter. As there is no support for conditional in-
structions depending on non-constant values, DFG G, gener-
ated from σ will, at most, represent a single iteration, covering
a single unit of input length (bytes or otherwise). In this typi-
cal example, clearly, a stream cipher pattern will not become
apparent in G. The example can be generalized to any pattern
that becomes apparent only after several iterations, where no
additional properties of the target primitive are known.
Similarly, suppose that we would like to identify a pro-
prietary hash function θ, based on a Merkle-Damgård con-
struction. θ invokes compression function F, which processes
blocks of ﬁxed input length. The Merkle-Damgård construc-