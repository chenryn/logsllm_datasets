Question: A high-traffic web server uses assert statements to validate user sessions. An attacker discovers that by sending specially crafted requests, they can trigger the assert, causing the server to drop all active connections. As a software architect, you are tasked with redesigning the system to handle such assertions more gracefully. Which design change would mitigate the issue while minimizing negative side effects?
"A": "Implementing a separate assertion handler that queues failed assertions for review and allows the server to continue serving other connections.",
"B": "Removal of all assert() statements from the server code to prevent any possibility of assertions being triggered.",
"C": "Isolating each user session in a separate process so that a failed assert in one does not affect the others.",
"D": "Rate limiting incoming requests to reduce the chance of an assert being triggered by an attacker."
Answer: AC