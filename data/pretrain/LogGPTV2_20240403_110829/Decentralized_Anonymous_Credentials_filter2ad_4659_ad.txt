U , skNym V
U
U
⇡S = NIZKPoK{(sk ,!, r 0, c, r, Nym V
U ) :
AccVerify(params, A, c, !) = 1 ^ c = gr0
U ,⇡ S, CO) !{ 0, 1}. Given a nym Nym V
0 gsk
1
mYi=0
gai
i+2 ^ Nym V
U = gr
0gsk
1 }
• ShowVerify(params, Nym V
U , proof of possession of a credential ⇡S, and the set
of credentials issued by organization O CO, ﬁrst compute A = Accumulate(params, CO). Then verify that ⇡S is the
aforementioned proof of knowledge on c, CO, and Nym V
U using the known public values. If the proof veriﬁes successfully,
output 1, otherwise output 0.
Fig. 2: Our basic decentralized anonymous credential scheme.
B. The Construction
A. k-show Credentials
The full construction is provided in Figure 2. We use
Pedersen commitments and a Strong RSA based accumulator
to instantiate the core of the protocol. The proofs of knowledge
in the Show algorithm are conducted using Schnorr-style
proofs modiﬁed using the Fiat-Shamir heuristic as in previous
work [15, 48]. The implementation of the proofs are similar to
those used by Miers et al. in [38].
Theorem 6.1: The basic distributed anonymous credential
system described in Figure 2 is secure in the random oracle
model under the Strong RSA and the Discrete Logarithm
assumptions.
We provide a sketch of the proof of Theorem 6.1 in Ap-
pendix A.
VII. EXTENSIONS
We consider extending the basic system in several ways.
Damgård et al. [26] ﬁrst suggested a credential system where
users could only authenticate once per time period. Camenisch
et al. [13] independently proposed a signiﬁcantly more efﬁcient
construction that allows for up to k authentications per
time period, with the ability to revoke all cloned credentials
if a credential was used beyond this limit. Camenisch et
al. suggested that these techniques might be used to build
anonymous subscription services, allowing users to access a
resource (such as a website) within reasonable bounds. We
brieﬂy show that these same techniques can be applied to our
basic credential system.
In the system of [13] an authority issues a credential on a
user’s secret seed s. To show a credential for the ith time in
validity period t, the user generates a serial number S using a
veriﬁable random function (VRF) as S = fs(0||t||i). She also
includes a non-interactive zero-knowledge proof that this serial
number is correctly structured.14 This technique can be applied
13“Where A and B can be chosen with arbitrary polynomial dependence
on the security parameter, as long as 2 < A and B < A 2." [16]. For a full
description, see [16, §3.2 and §3.3].
14The re-use of a credential would result in a repeated serial number, and
yet the nature of the VRF’s output (for an honest user) ensures that attackers
cannot link individual shows.
8
• Update(params, sk , c, skc, CO, update_relation, state0) ! (c0, sk0c,⇡ u). Given a credential c and associated secret key
sk c, a set of credentials CO, an updated state state0 = (s00, . . . , s0m) 2 Zq, and an update relation update_relation, generate
gs0i
a fresh random serial number S0 2 Zq and random value r0 2 Zq to form a new credential c0 = gr0
i+3 with
the aforementioned restrictions. Compute A = Accumulate(params, CO) and ! = GenWitness(params, c, CO). Output
(c0, sk0c,⇡ u) where sk0c = (S0, state0, r0) and
mQi=0
1 gS0
0 gsk
2
AccVerify(params, A, c, !) = 1
⇡u = NIZKPoK{(sk ,!, c, state, r, c 0, S0, state0, r0) :
mYi=0
1 gS0
^ c = gr
0 gsk
^ update_relation(state, state0) = 1}
i+3 ^ c0 = gr0
gsi
mYi=0
2
0gsk
1 gS
2
gs0i
i+3
• UpdateVerify(params, c, CO,⇡ u) !{ 0, 1}. Given a stateful credential c, a credential set CO, and proof ⇡u, output 1 if
Fig. 3: Extensions for a stateful anonymous credential system. update_relation(. . .) = 1 denotes that the update encodes some
⇡u is correct, the proved state transition is a legal one, and the serial number S was not previously used. Otherwise 0.
arbitrary state transition (e.g. 8i s0i = si + 1).
to our construction provided we can securely store a seed for
the VRF. This is easy: the user simply generates a random
seed s and includes this value in the commitment she stores
in the transaction ledger. We note that for the trivial case of
one-time show credentials, we can simply reveal the seed. For
k-show, the user provably evaluates the VRF on the seed plus
a secret counter.15
B. Credentials with Hidden Attributes
In our basic construction of §VI, users provide a full list
of attributes when requesting and showing credentials. While
this is sufﬁcient for many applications, there exist cases where
a user might wish to conceal the attributes requested or shown,
opting instead to prove statements about them, e.g., proving
knowledge of a secret key or proving that an attribute is within
a certain range. There are two simple ways to do this. First,
we can simply use multi-message commitments where each
message is an attribute. This increases the size of our zero-
knowledge proofs (they are linear in the number of messages
in a commitment) but does not change our schemes. A more
efﬁcient construction is to encode the attributes in one single
value and then prove statements about that committed value
rather than reveal it. For example, one could prove that a given
bit corresponding to a certain attribute was set. One could also
use the ﬁrst x bits for attribute one, the next x bits for attribute
two, etc. and use range proofs [8, 12, 35, 37] to reveal only
those attributes we want to display.
C. Stateful Credentials
A stateful anonymous credential system [24] is a variant
of an anonymous credential system where credential attributes
encode some state that can be updated by issuing new
credentials. This credential issuance is typically conditioned
on the user showing a previous credential and offering proof
15Camenisch et al. [13] describe a further extension that reveals the user’s
identity in the event of a credential double-show. We omit the details here
for space reasons but observe that the same technique can be applied to our
construction.
that the new credential should be updated as a function of the
original.
Intuitively, we can already have this capability quite easily
due to the fact that our credentials are non-interactively issued.
We can make stateful credentials simply by changing the policy
by which we issue credentials: to issue a credential in a new
state s1, we require a user to demonstrate that they had a
credential in state s0 and discard it by revealing its single use
serial number.
We construct a “single show” credential c embedding
some state state in the attributes and a serial number S.
Users are free to show c as many times as they like without
revealing the serial number. However, to update the state of
the credential, they must author a transaction that shows the
original credential and reveals the serial number S and “mint” a
new candidate credential c0 containing the updated state state0
(hidden inside of a commitment) and a proof that there exists
a valid relationship between the state encoded in c and the
new state in c0 (for example, that the attributes have been
incremented).
This requires only minor extensions to our basic scheme
composing the existing secure functionality. In this case we add
an Update algorithm that operates similarly to MintCred but
includes the earlier credential and a proof of its construction. A
valid proof of the existing credential now becomes a condition
for the organization accepting the updated credential into the
ledger. We provide a description of this new algorithm in
Figure 3.
VIII.
INTEGRATING WITH PROOF-OF-WORK BULLETIN
BOARDS
We provide a basic implementation of our credential scheme
as a library and construct a basic example using Namecoin as
the bulletin board. Our prototype system allows users to prove
they have a (fresh) commitment to some attributes in an issued
credential. For our purposes it is sufﬁcient to merely reveal
the content of that commitment (the attributes) in its entirety
9
during a show. However, selectively disclosable attributes are
trivially realizable, see §VII-B.
A. Integration
Namecoin integration is straightforward. Namecoin provides
a built in mechanism for storing key–value pairs which, by
convention, have a namespace as a preﬁx. It also provides a
basic functionality to scan the list of existing names. Thus we
can scan for credentials, validate them, and then accumulate
them. It is then simply matter of generating and verifying
proofs against that computed accumulator value.
B. Operating Cost
Namecoin is not free to use as purchasing a name costs a
small (less than 0.10 USD as of 12/1/2013) amount of money.
This fee is necessary both to prevent mass name hoarding
and to provide an economy to pay the miners who maintain
the block chain. This cost must minimally be paid by users
when creating a credential. For certain applications (e.g., k-
anonymous credentials), relying parties must also post data on
the block chain (e.g., double spend tags and serial numbers).
This, again, costs a small fee. As such, there are monetary
costs to using such an identity scheme.
For Alice to obtain a credential, she:
C. Latency
1) Pays a very small fee (currently 0.0064 USD) to purchase
some name in the system’s namespace by registering a
public key as the owner of the name. This corresponds to
a transaction looking like:
1 665a... OP_2DROP
OP_HASH160 6c1abe34
OP_DUP
OP_EQUALVERIFY OP_CHECKSIG
2) Prepares a fresh credential with some attributes and any
supporting documentation necessary for her identity claim
and stores the private portion of the credential.
3) Updates, using the public key from step 1, her registered
name to contain a credential and its supporting documen-
tation.
2 642f7... 7b...
OP_2DROP OP_2DROP
OP_DUP OP_HASH160
14d...
OP_EQUALVERIFY OP_CHECKSIG
Once this update is conﬁrmed, Alice has a fully formed
credential.
To show the credential to Bob, Alice:
1) Scans through the list of added names and retrieves all
2) Checks the supporting documentation for each candidate
candidate credentials.
and puts valid ones in C.
3) Runs Show with the public parameters, the private portion
of her credentials, and C and sends the result to Bob.
4) Bob does steps 1 and 2 and computes C himself.
5) Bob runs ShowVerify on Alice’s supplied credential and
C to verify it.
Alice has now proved she has a credential to Bob.
What the supporting documentation is and how it is veriﬁed
is an application speciﬁc problem. For some applications,
merely having paid the tiny registration fee may be sufﬁcient
and no veriﬁcation is necessary. For others, some digital signa-
ture may need to be veriﬁed or some assertion about resource
management (e.g., a proof of storage/retrievability) may need
to be veriﬁed. Without modiﬁcations to Namecoin/Bitcoin, any
assertion must be veriﬁable by all participants.16 We consider
one such application in the next section.
16With modiﬁcations, identity assertions can be validated as part of the
consensus protocol, abrogating relying parties from validating credential issue
and allowing the use of ephemeral supporting documentation.
10
A third consideration for the limited show credentials is
the latency of inserting items into the block chain. Because
completely meaningful proofs of work take time, some time
must elapse in any such system. Namecoin and Bitcoin both
aim to create blocks every 10 minutes. Thus, the naive wait
time from a block is about 5 minutes. Propagation delays in the
network and transaction volume, however, skew this distribution.
While historical data for Namecoin is not available, for Bitcoin
it takes slightly less than 9 minutes for a transaction to ﬁrst be
conﬁrmed. In practice, it then takes multiple conﬁrmations to
solidify the transaction’s place in the block chain. Variants of
Bitcoin operate with faster conﬁrmation times (e.g., Feathercoin,
which aims to get a block every 2.5 minutes), though it is not
yet clear if the more aggressive of these are entirely stable.
Given these latency constraints, our system, at least built on
top of proof of work based bulletin boards, is not suitable for
applications that require fast credential issue or quick detection
of multi-spends across mutually distrusting parties.17 A side
effect of this is that double spend prevention mechanisms for
fast transactions need to rely on detection and punishment (e.g.,
forfeiture of an escrowed value), not prevention.
D. Performance
We now examine the performance of our anonymous
credential system. There are four underlying operations: minting
a credential, verifying that the mint is correct, showing a
credential, and verifying that show. Showing and verifying
credentials also entail computing the accumulation of all or
all but one of the current credentials. However, both the
accumulator and the witnesses can be computed incrementally
as credentials are added: for each added credential, the nodes
must update both the accumulator and the witness for each
credential they intend to show. Because this cost is both
amortized for any individual credential show or verify, it does
not come into play. Hence, we measure the accumulation cost
separately and run our other benchmarks with a precomputed
witness and accumulator. We also give measurements for our
performance with different security parameters. See Figure 4.
All experiments were conducted on a 2010 MacPro with
16GB of RAM and two 2.4GHz quad core Xeon E5620
processors running OSX 10.8.3. Experiments were measured