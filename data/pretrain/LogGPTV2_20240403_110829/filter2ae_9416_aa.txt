### 原文优化

受到[Project Zero](https://googleprojectzero.blogspot.com/2018/09/oatmeal-on-universal-cereal-bus.html)发表的一篇关于USB安全报告的启发，我开始深入思考如何将USB作为物联网设备的攻击媒介。许多物联网设备允许用户插入USB设备并自动执行某些操作，但这些自动化功能往往对USB设备过于信任。这篇报告在我脑海中逐渐淡去，直到一个带有明显USB端口的物联网设备出现在我的家门口，重新激发了我的兴趣。遗憾的是，报告中提到的[Raspberry Pi Zero](https://www.raspberrypi.org/blog/raspberry-pi-zero/)尚未到货。幸运的是，一位同事告诉我Android也支持ConfigFS，于是我决定探索这一方向。

我发现，存在安全隐患的物联网设备会自动安装插入的USB大容量存储设备，并且在设置某些属性时，未经适当的安全检查便使用这些属性来创建安装目录名称。此外，该安装过程是通过C语言中的`system`函数实现的，这使得恶意USB设备能够设置特定参数以执行任意命令。由于相关守护进程以root身份运行，这意味着攻击者只需插入USB设备，等待几秒钟，就能在设备上以root权限执行命令。这种场景不禁让人联想到间谍电影中的情节——主人公将某种设备插入高度复杂的门锁中，LED屏幕上闪烁着数字，随后门就神奇地打开了。现实中，这种情况真的可以实现吗？我认为是可能的。

然而，问题在于如何将Android设备变成一个自定义的USB外设。我在网上进行了大量搜索，但未能找到满意的解决方案。因此，本文旨在填补这一空白。为此，我们需要一台已取得root权限的Nexus 5X设备，并运行最新版本的Android系统（即8.1版）。需要注意的是，目前尚不清楚本文介绍的方法是否适用于Android 9。

## 将Android用作大容量存储器

我们的目标是将Android设备配置为具有以下属性的USB大容量存储设备：产品名称字符串、产品型号字符串和磁盘标签。当然，我们还可以自定义更多属性，但这不是本文的重点。首先，我对ConfigFS非常熟悉，并发现了`/config/usb_gadget`方法。于是，我编写了一个脚本来帮助我们完成这项工作，但运行结果如下：

```bash
mkdir: '/config/usb_gadget/g1/functions/mass_storage.0': Function not implemented
```

显然，这种方法不受支持。为了搞清楚原因，我研究了Android和Linux内核源代码。我的目标是在设备上使用`/bin/touch /tmp/haxxed`并将文件声明为**_1337_**。因此，我转向了Android中`init`进程的内核空间，看看开发者是如何改变USB功能的。

通过查看Android的`init`[文件](https://android.googlesource.com/platform/system/core/+/refs/tags/android-8.1.0_r65/rootdir/)，我发现有两个不同的`.rc`文件：[init.usb.configfs.rc](https://android.googlesource.com/platform/system/core/+/refs/tags/android-8.1.0_r65/rootdir/init.usb.configfs.rc)和[init.usb.rc](https://android.googlesource.com/platform/system/core/+/refs/tags/android-8.1.0_r65/rootdir/init.usb.rc)。敏锐的读者可能会注意到，这两个文件都会检查`sys.usb.configfs`属性：如果其值为`1`，则使用`init.usb.configfs.rc`中的条目；否则，使用`init.usb.rc`中的条目。在我的实验环境中，`sys.usb.configfs`的值为`0`，并且我确认系统在`/sys/class/android_usb`目录中进行了一些修改。因此，我将注意力集中在该目录上。

## 探索未知领域

既然已经将焦点转移到`/sys/class/android_usb/android0`目录，不妨看看其中包含的内容：

```bash
bullhead:/sys/class/android_usb/android0 # ls
bDeviceClass           f_acm          f_ffs          f_rmnet     iManufacturer           power
bDeviceProtocol        f_audio        f_gps          f_rmnet_smd iProduct                remote_wakeup
bDeviceSubClass        f_audio_source f_mass_storage f_rndis     iSerial                 state
bcdDevice              f_ccid         f_midi         f_rndis_qc  idProduct               subsystem
down_pm_qos_sample_sec f_charging     f_mtp          f_serial    idVendor                uevent
down_pm_qos_threshold  f_diag         f_ncm          f_uasp      idle_pc_rpm_no_int_secs up_pm_qos_sample_sec
enable                 f_ecm          f_ptp          f_usb_mbim  pm_qos                  up_pm_qos_threshold
f_accessory            f_ecm_qc       f_qdss         functions   pm_qos_state
```

其中，`idVendor`、`idProduct`、`iProduct`、`iManufacturer`和`f_mass_storage`看起来有些熟悉。如果您熟悉ConfigFS，您会发现`f_mass_storage`的内容与`mass_storage`函数非常相似：

```bash
bullhead:/sys/class/android_usb/android0 # ls f_mass_storage
device inquiry_string lun luns power subsystem uevent
bullhead:/sys/class/android_usb/android0 # ls f_mass_storage/lun
file nofua power ro uevent
```

坦白说，我也不完全理解这一切。但我们的目标很明确——通过创建恶意USB设备来发动攻击，而不是深入了解Linux内核的工作原理以及Android如何将自己设置为USB外围设备。幸运的是，源代码和设备本身为我们提供了很多提示，有助于我们弄清楚如何使用这个目录。

在`init.usb.rc`中，经常会遇到如下代码：

```bash
write /sys/class/android_usb/android0/enable 0
...
write /sys/class/android_usb/android0/functions ${sys.usb.config}
write /sys/class/android_usb/android0/enable 1
```

那么，当插入一个开发设备并使用ADB时，会运行哪些函数呢？

```bash
bullhead:/sys/class/android_usb/android0 # cat functions
ffs
```

我知道设备上的ADB是通过FunctionFS实现的，而`ffs`看起来像是FunctionFS的缩写，因此这里很可能启用的就是它。接下来，我们可以尝试更改这个值，例如将其设置为`mass_storage`，看看会发生什么。

```bash
bullhead:/sys/class/android_usb/android0 # echo 0 > enable
```

可以看到，ADB会话被关闭了。这是正常的，因为禁用USB连接会导致ADB断开。幸运的是，ADB非常适合在TCP/IP上工作，所以我可以重启它：

```bash
adb tcpip 5555
adb connect 192.168.1.18:5555
```

请注意，我绝不会使用公共场所的WiFi来做这件事。现在我们已经连接好了，接下来可以关闭USB并切换到大容量存储模式，看看会发生什么情况。

```bash
bullhead:/sys/class/android_usb/android0 # echo 0 > enable
bullhead:/sys/class/android_usb/android0 # echo mass_storage > functions
bullhead:/sys/class/android_usb/android0 # echo 1 > enable
```

太棒了，没有报错也没有崩溃，一切正常。如果您熟悉ConfigFS，您会知道这里也可以修改`f_mass_storage/lun/file`，让大容量存储设备成为后端设备。接下来，我们将介绍如何创建一个使USB大容量存储设备变为后端存储器的镜像文件。

## 创建镜像文件

在制作镜像时需要记住的一点是，我们需要控制磁盘标签的值（如`blkid`所示）。为此，我们可以创建一个文件并使用它，无需其他复杂操作。请注意，写入USB磁盘的内容并不重要，我们的目标只是让目标设备将其识别为大容量存储设备并进行安装。下面开始创建我们的后端镜像文件：

```bash
dd if=/dev/zero of=backing.img count=50 bs=1M
```

这将创建一个名为`backing.img`、大小为50MB的文件，内容全部为零。实际上，这里的内容并不重要，因为我们接下来会用`fdisk`命令对其进行格式化。对于有经验的Linux用户来说，可以通过编写脚本来完成这些工作：

```bash
echo -e -n 'o\nn\n\n\n\n\nt\nc\nw\n' | fdisk backing.img
```

这段魔法命令会自动填写`fdisk`的条目。具体如下：

```plaintext
Welcome to fdisk (util-linux 2.31.1).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.
Device does not contain a recognized partition table.
Created a new DOS disklabel with disk identifier 0xd643eccd.
Command (m for help): Created a new DOS disklabel with disk identifier 0x50270950.
Command (m for help): Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p):
Using default response p.
Partition number (1-4, default 1): First sector (2048-20479, default 2048): Last sector, +sectors or +size{K,M,G,T,P} (2048-20479, default 20479):
Created a new partition 1 of type 'Linux' and of size 9 MiB.
Command (m for help): Selected partition 1
Hex code (type L to list all codes): Changed type of partition 'Linux' to 'W95 FAT32 (LBA)'.
Command (m for help): The partition table has been altered.
Syncing disks.
```

我们将创建一个带有DOS分区表和单个FAT32分区的镜像，其余设置均为默认。接下来，我们要完成格式化处理并设置标签：

```bash
# losetup --offset 1048576 -f backing.img /dev/loop0
# mkdosfs -n "HAX" /dev/loop0
# losetup -d /dev/loop0
```

其中，“1048576”是“2048 * 512”的乘积。我们只是将上面创建的镜像附加为`/dev/loop0`设备，并运行一个简单的`mkdosfs`命令，其中`-n "HAX"`非常重要，因为它让我们能够控制标签。至此，准备工作就完成了——非常简单！

## 综合起来

借助上面创建的镜像，我们现在可以创建完整的USB设备了：

```bash
$ adb tcpip 5555
$ adb connect 192.168.1.18:5555
$ adb push backing.img /data/local/tmp/
$ adb shell
```

在`adb shell`中：

```bash
$ su
# echo 0 > /sys/class/android_usb/android0/enable
# echo '/data/local/tmp/backing.img' > /sys/class/android_usb/android0/f_mass_storage/lun/file
# echo 'mass_storage' > /sys/class/android_usb/android0/functions
# echo 1 > /sys/class/android_usb/android0/enable
```

如果一切顺利，则：

```bash
# lsusb -v -d 18d1:
Bus 003 Device 036: ID 18d1:4ee7 Google Inc.
Device Descriptor:
  bLength                18
  bDescriptorType         1
  bcdUSB               2.00
  bDeviceClass            0 (Defined at Interface level)
  bDeviceSubClass         0
  bDeviceProtocol         0
  bMaxPacketSize0        64
  idVendor           0x18d1 Google Inc.
  idProduct          0x4ee7
  bcdDevice            3.10
  iManufacturer           1 LGE
  iProduct                2 Nexus 5X
  iSerial                 3 0000000000000000
  bNumConfigurations      1
  Configuration Descriptor:
    bLength                 9
    bDescriptorType         2
    wTotalLength           32
    bNumInterfaces          1
    bConfigurationValue     1
    iConfiguration          0
```

这样，我们就成功地将Android设备配置成了一个自定义的USB大容量存储设备。