supportinstancetransformation.TheXSLdocumentgeneratedbyJXML2OWL
can be used by any XSLT processor to automatically transform instances of the
mapped schema into instances of the ontology. The XSLT choice becomes even
more obvious, considering that in our approach OWL was specified with the
XML syntax.
It should be stated that XML is just one of the possible syntaxes to repre-
sent OWL ontologies. Other increasingly popular data representations include
Notation3 (commonly known as N3), Turtle and JSON. They are all non-XML
serialization of RDF graphs. N3 was designed to be more compact and readable
than XML/RDF. Turtle, a subset of N3, is a more compact and readable alter-
native. JSON is similar to Turtle, with the advantage of being represented in a
language which is easier to parse. Independently of the language chosen to rep-
resent organizational internal ontology-based model, XSLT can always be used
to perform the transformation of external XML-based documents into internal
ontologies.
As illustrated in Figure 6, an JXML2OWL API exists to the Mapper com-
ponent and the XSLT processor is used by the Instance Generator module.
4.3 The structure of heterogeneous mappings
This section presents the structure to specify mappings between XML and
OWL. Several mappings are supported: one-to-one, one-to-many, many-to-one
andmany-to-many.Therefore,thenotationallowsmappingsfromoneXMLnode
to several OWL concepts and mappings from several XML nodes to one OWL
concept. This section also presents several aspects that must be taken into ac-
count when writing an algorithm to perform instance transformation according
to created mappings.
The notation The notation to specify mappings between elements of an XML
schema and resources defined by an OWL ontology is represented in Table 1.
4 The API is available at http://jxml2owl.projects.semwebcentral.org/
16
Fig.6. XML to OWL mapping
Just as with OWL ontologies, which are mainly defined by classes, datatype
and object properties, heterogeneous mappings are classified according to three
distinct types:
• Class mapping: Maps an XML node to an OWL concept
• Datatypepropertymapping:MapsanXMLnodetoanOWLdatatypeprop-
erty
• Object property mapping: Relates two class mappings to an OWL object
property
Table 1. Heterogeneous mapping notation
Mapping Notation
Class (OWL Class URI, XPath expression)
(OWL Class URI, XPath expression, ID XPath expres-
sion)
Datatype (OWL Datatype Property URI, domain class mapping,
Property XPath expression)
Object (OWL Object Property URI, domain class mapping,
Property range class mapping)
OWLresources(classes,objectanddatatypeproperties)areaddressedusing
their URI references while XPath expressions are used to address the mapped
XML nodes. The use of XPath expressions allows distinguishing several XML
nodes with the same name but with different ancestors and permits mapping
them to their corresponding OWL concepts. It is also possible to use XPath
predicates to enable conditional mappings.
17
An examination of Table 1 reveals that class mappings are defined by pairs
containing the URI reference of the mapped OWL class as well as an XPath
expression identifying the mapped XML nodes. Such a pair means that an in-
stance of the mapped OWL class is created for each XML node matching the
XPath expression. As an alternative, it is also possible to create class mappings
with triplets where the XML node used to compute the IDs of the generated in-
stancesaredirectlyspecified.Additionally,Table1showsthatnotonlyproperty
mappingsarespecifiedwithtriplets,butalsothatclassmappingsareusedtode-
fine property mappings. Such a solution enables a complete support of property
mappings in the context of many-to-many mappings.
Thefollowingexampleshowshowclass,datatypeandobjectpropertymap-
pings are created. Let us consider the OWL purchase order ontology from the
Hiltrix Corp. from Listing 3 as well as the cXML purchase order transaction
from Listing 4.
Elevenmappingswereestablished.UsingthenotationfromTable1,wehave
selected the following 6 representative mappings:
– cm1=(Order :Part,/cXML/.../ItemDetail/Classification)
– cm2=(Order :Manufacturer,/cXML/.../ManufacturerPartID)
– dp1=(Order :www,cm2,/cXML/.../ItemDetail/URL)
– dp2=(Order :quantity,cm1,/cXML/.../ItemOut/@quantity)
– op1=(Order :hasManufacturer,cm1,cm2)
– op2=(Order :hasPart,cm2,cm1)
Thecm1mapping(cm1standsforclassmapping)indicatesthataninstance
of Part class is created for each XML node matching the specified XPath
expression, i.e. /cXML/.../ ItemDetail/Classification. Therefore, three
instances are created, one for ”50202301” (UNSPSC code for water), one for
”12352206”(UNSPSCcodefortissues),andonefor”50202303”(UNSPSCcode
for frozen juices). The dp1 and dp2 indicate that for each instance created from
the cm1 and cm2 class mappings, two datatype properties, www and quan-
tity, respectively, are also created. Again, it is also necessary to compute the
relative path to find the value used to fill the property, which is for the dp1
mappingtheXPathexpression/cXML/.../ItemDetail/URLandforthedp2
mapping /cXML/.../ItemOut/@quantity. The op1 mapping indicates that
each instance created from the class mapping cm1 is related to an instance cre-
ated from the class mapping cm2 using the relationship hasManufacturer.
In other words, a part has a manufacturer. An inverse relationship also exist
and it is named hasPart. The previous six mappings are stored internally in
JXML2OWL in XML as illustrated in Listing 5.
4.4 The transformation engine
The mappings created with JXML2OWL are used by the B2BISS Transforma-
tionEnginetoautomaticallytransformexternalincomingsyntactictransactions
into an internal semantic data representation. The engine determines the trans-
action type and queries the B2BISS repository for a suitable transformation.
18
Figure 7 illustrates the six mappings previously described: cm1, cm2, dp1, dp2,
op1, and op2.
Fig.7. B2BISS Transformation Engine
It should be clear that the mappings can only be used to transform XML-
based transactions to XML/OWL data representations at this stage. Neverthe-
less, the engine and mapping application can be extended, if needed, to accom-
modate other formats used for knowledge representation (for example, N3 and
Turtle). In our simple example, the 11 mappings established have generated an
XSLT file with 245 instructions. A complete purchase order typically generates
3000 to 4000 instructions. Theses instructions are the basis for the transforma-
tionofinstancefromXMLtoOWL.ThenumberofXSLTinstructionsrequired
clearly shows that adequate tool support enables to reduce costs and speedup
the integration of heterogeneous schema.
Listing6showstheontologyinstancesthatarecreatedwhenthecXMLpur-
chase order from Listing 3 is received and mapped to the Hiltrix Corp. internal
purchase order ontology.
Theinstancesofthepurchaseorderontologycapturetheproductsthatwere
ordered by the Aldo Corp. As a result, Hiltrix Corp. has to deliver 10 units of
Poland Spring water at a price of $1.20 for each unit, 20 units of Scottex tissues
at $1.05, and 30 eight pack of Minute Maid juices at $4.55 per each pack. The
relationships (i.e. object properties) that exist between the product instances
are described in Listing 4.
4.5 Empirical evaluation
As stated in Section 1, the B2BISS system allows organizations to decrease the
timeandcostofintegrationbyprovidingaflexibleandeasy-to-usegraphicaltool
andaplatformformappingmanagement.Suchaninfrastructureisinstrumental
for a rapid and cost-effective B2B integration [37]. To address the cost and time
effectiveness and scalability of the solution we have carried out two experimen-
19
tal evaluations conducted based on two complete case studies to demonstrate
empirically the validity of the B2BISS system:
– Converting cXML business transactions to a semantic data model [46].
– Mapping from HR-XML resume to a semantic data model [44].
When compared to creating the mappings by developing software modules,
and as expected, we found out that graphically defining mappings was faster,
less expensive, required less knowledge, and the process was less error-prone.
Listing 1 shows 10% of the XSLT code which corresponds to the mappings
needed to transform automatically XML-based external representations with
internal data representations expressed with OWL ontologies of our running
scenario. As it can be seen, the graphical creation of mappings from Figure 5 is
easier,faster,lessexpensiveandlesserrorpronethancreatingthemappingman-
ually using XSLT. Stronger advantages were observed when mappings started
to be stored in the repository and started to be reused.
Listing 1. Extract (10%) of the XLST mapping file generated
it is only required to navigate through the XSLT structure and extract the
select content of the for-each tags. Having all the extracted XSLT XPaths in a
set, they can be compared to the set of all the XPaths that exist in the cXML
purchase order sent by Aldo Corp. The comparison of these two sets determines
theirdegreeofmatch.Inthisfirstscenario,thepurchaseorderhasbeenclassified
initiallyasanomatch.Onceheterogeneousmappingswerecreated,thepurchase
wasclassifiedasacompletematch andanautomatedtransformationwascarried
out.
5.2 Scenario B. Receiving a purchase order for the second time
Inthepreviousscenario,wehavereceivedapurchaseorderforthefirsttime.We
performeda setof heterogeneousmappings andthe XSLT transformationswere
imported to the B2BISS system. At this point, the system has one set of XSLT
transformations in the B2BISS repository and is able to automatically perform
transformations on purchase orders from the Aldo Corp.
Beplus Corp. sends to the Hiltrix Corp. a second purchase order that is
identical to the one from the first scenario and that Aldo Corp. has used. The
purchaseorderisaddedtotheIncomingFiles sectionanditisprocessedinorder
to define if it is a partial match, a complete match or a no match. The purchase
order is moved to the complete match section because there is a set of XSLT
transformations in the repository that can completely transform it. Since there
is no need to perform any additional mapping, the transformation is directly
applied and instances of the Hiltrix’s purchase order ontology are automatically
created.
5.3 Scenario C. Receiving a purchase order with new elements
In the previous scenario, Hiltrix Corp. received a purchase order that was au-
tomatically transformed upon arrival. In this third scenario, Hiltrix receives a
differentpurchaseorderfromCelsiusCorp.thathasonenewelementwhencom-
pared to the previous orders. This scenario can occur since Celsius may decide
touseadditionaloptionalfieldsofthecXMLspecification.Itcanalsooccurthat
anorganizationdecidetousecXMLbymakingmodificationstosatisfybusiness
22
requirements. As a result, Celsius Corp. decided to use the Shipping element
from the cXML specification to requested the products (i.e., Water, Tissues,
and Orange Juice) to be shipped via FedEX at a cost of $35.50. The new cXML
element is illustrated in Listing 2.
Listing 2. The new added cXML Shipping element