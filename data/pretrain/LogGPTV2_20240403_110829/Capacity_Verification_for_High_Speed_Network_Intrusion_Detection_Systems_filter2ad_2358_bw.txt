guard [5], modiﬁes compilers to have them insert canary words into the stack
frame of vulnerable processes at runtime. Before a function is allowed to return,
the canary word is checked for alteration, possibly causing a termination of an
exploited process. This mechanism can prevent damage but requires the service
process to be recompiled.
We present a system that analyzes the content of service requests at the
network level and can a-priori prevent malicious code from being executed. This
is similar to network based anomaly detection systems which do not concentrate
on activities at hosts (e.g. users or programs) but focus on the packets that
are sent over the network. Current network based systems [16,17,4,22] however
only model the ﬂow of packets. The source and destination IP addresses and
ports are used to determine parameters like the number of total connection
arrivals in a certain period of time, the inter-arrival time between packets or
the number of packets to/from a certain machine. These parameters can be used
to reliably detect port scans or denial-of-service (DOS) attempts. Unfortunately,
the situation changes when one considers buﬀer overﬂow attacks. In this case the
attacker sends one (or a few) packets including the attack code which is executed
at the remote machine on behalf of the intruder to elevate his privileges. As the
attacker only has to send very few packets (most of the time a single one is
suﬃcient), it is nearly impossible for systems that use traﬃc models to detect
such anomalies.
We propose an approach to do buﬀer overﬂow detection at the applica-
tion level for important Internet services. These services usually operate in a
client/server setup where a client machine sends a request to the server which
returns a reply with the results. Our detection approach distinguishes normal
request data from malicious content (i.e. buﬀer overﬂow code) by performing
abstract execution of payload data contained in client requests. In the case of
detecting long ‘instruction chains’ of executable code (see Section 3) a request
can be dropped before the malicious eﬀects of the exploit code are triggered
within vulnerable functions (and maybe detected by another ID system after-
wards).
The ﬁrst section describes buﬀer overﬂow exploits in general and the pos-
sibilities of an attacker to disguise his malicious payload to evade ID systems.
Then we present our approach of abstract payload execution and explain the
advantages of this design. The following section introduces the results of the
integration of our prototype into the Apache [3] web server. Finally, we brieﬂy
conclude and outline future work.
2 Buﬀer Overﬂow Exploits
Many important Internet services (e.g. HTTP, FTP or DNS) have to be publicly
available. They operate in a client/server setup which means that clients send
request data to the server, which operates on the given input and returns a reply
containing the desired results or an error message. This allows virtually anyone
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
277
(including people with malicious intents) to send data to a remote server daemon
which has to analyze and process the presented data.
The server daemon process usually allocates memory buﬀers where request
data received from the network is copied into. During the handling of the received
data, the input is parsed, transformed and often copied several times. Problems
arise when data is copied into ﬁxed sized buﬀers declared in subroutines that
are statically allocated on the process’ stack. It is possible that the request that
has been sent to the service is longer than the allocated buﬀer. When the length
of the input is not checked, data is copied into the buﬀer by means of an unsafe
C string function. Parts of the stack that are adjacent to the static buﬀer may
be overwritten - a stack overﬂow occurs.
Unsafe C library string functions (see Table 1 for examples) are routines that
are used to copy data between memory areas (buﬀers). Unfortunately, it is not
guaranteed that the amount of data speciﬁed as the source of the copy instruction
will ﬁt into the destination buﬀer. While some functions (like strncpy) at least
force the programmer to specify the number of bytes that should be moved to the
destination, others (like strcpy) copy data until they encounter a terminating
character in the source buﬀer itself. Nevertheless, neither functions check the
size of the destination area.
Table 1. Vulnerable C Library Functions
strcpy
strcat
gets
sprintf
memcpy
wstrcpy
wcscat
getws
swprintf
memmove
strncpy
strncat
fgets
scanf
wstrncpy
wstrncat
fgetws
wscanf
Especially functions that determine the end of the source buﬀer by relying
on data inside that buﬀer carry a risk of overﬂowing the destination memory
area. This risk is especially high when the source buﬀer contains unchecked data
directly received from clients as it allows attackers to force a stack overﬂow by
providing excessive input data.
The fact that C compilers (like gcc [9]) allocate both, memory for local vari-
ables (including static arrays) as well as information which is essential for the
program’s ﬂow (the return address of a subroutine call) on the stack, makes
static buﬀer overﬂows dangerous. Figure 1 below shows the stack layout of a
function compiled by gcc. When an attacker can overﬂow a local buﬀer stored
on the stack and thereby modify the return address of a subroutine call, this
might lead to the execution of arbitrary code on behalf of the intruder.
An adversary that knows that a subroutine in the daemon process utilizes
a vulnerable function (e.g. strcpy) can launch an attack by sending a request
with a length that exceeds the size of the statically allocated buﬀer used as the
destination by this copy instruction. When the server processes his input, a part
278
T. Toth and C. Kruegel
Fig. 1. Stack Layout
of the stack including the subroutine’s return address is overwritten (see Figure
2 below). When the attacker simply sends garbage, a segmentation violation is
very likely to occur as the program continues at a random memory address after
returning from the subroutine.
Fig. 2. Operation of strcpy(char * dst,char * src)
A skillful attacker however could carefully craft his request such that the
return address points back to the request’s payload itself which has been copied
onto the stack into the destination buﬀer. In this case the program counter is set
to the stack address somewhere in the buﬀer that has been overﬂown when the
subroutine returns. The processor then resumes execution of the bytes contained
in the request with the privileges of the server process (often with root rights).
The main problem with this technique is the fact that the attacker does not
know the exact stack address where his payload will be copied to. Although the
intruder can compile and analyze the service program on his machine to get a
rough idea of the correct address, the exact value depends on the environment
variables that the user has set. When a wrong address is selected, the processor
will start to execute instructions at that position. This is likely to result in an
illegal opcode exception because the random value at this memory position does
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
279
not represent a valid processor instruction (thereby killing the process). Even
when the processor can decode the instruction, its parameter may reference
memory addresses which are outside of any previously allocated areas. This
causes a segmentation violation and a termination of the process.
To circumvent this problem, the attacker can put some code in front of the
exploit code itself to increase the chances of having the faked return address
point into the correct stack region. This extra code is called the sledge of the
exploit and is usually formed by many (a few hundreds are common) NOP (no
operation) instructions. The idea is that the return address simply has to point
somewhere into this long sledge that does nothing except having the proces-
sor move the program counter towards the actual exploit code. Now it is not
necessary anymore to hit the exact beginning of the exploit code but merely a
position somewhere in the sledge segment. After the exploit code, the guessed
return address (RA) (which points into the sledge) is replicated several times to
make sure that the subroutine’s real return address on the stack is overwritten.
A typical layout of a buﬀer overﬂow code that includes a sledge is shown in
Figure 3.
Fig. 3. Typical Structure of a Buﬀer Overﬂow Exploit
Some network based misuse IDSs (like Snort [18]) try to identify buﬀer over-
ﬂow exploits by monitoring the network traﬃc and scanning packet payload for
the occurrence of suspicious bytecode sequences. These sequences are drawn from
actual exploits and represent strings like /bin/sh or operating system calls.
This suﬀers from the problem that there are virtually inﬁnite variations of
buﬀer overﬂow exploits that attack diﬀerent vulnerabilities of the same service
or express the same functionality diﬀerently. In addition, code transformation
techniques like reordering or insertion of ﬁlling instructions change the signature
of the exploit and render the misuse based detection useless. Some intruders have
even started to encode the actual exploit with a simple routine (e.g. ROT-13)
while placing the corresponding decode routine in front of the encrypted exploit.
When the buﬀer overﬂow is executed the decode routine ﬁrst decrypts the exploit
segment and then executes it.
The wide variety of diﬀerent exploit signatures shifted the focus of these
systems to the sledge. Every attack includes a long chain of architecture speciﬁc
NOP (no operation) instructions that precedes the actual exploit - NOP has a byte
representation of 0x90 for the Intel IA32 [12], for other architectures refer to
[15].
Unfortunately, the sledge of a buﬀer overﬂow exploit can also use opcodes
diﬀerent from NOP causing the signature detectors to fail when these instructions
are replaced by functionally equivalent ones. According to [13] there are more
280
T. Toth and C. Kruegel
than 50 opcodes for the Intel IA32 architecture which are suitable for replacing
NOP operations (Table 2 below enumerates a few examples).
Table 2. Single-Byte NOP Substitutes for IA32
Mnemonic
Explanation
Opcode
AAA
AAS
CWDE
CLC
CLD
CLI
CMC
. . .
ASCII Adjust After Addition
ASCII Adjust After Subtraction
Convert Word To Doubleword
Clear Carry Flag
Clear Direction Flag
Clear Interrupt Flag
Complement Carry Flag
. . .
0x37
0x3f
0x98
0xf8
0xfc
0xfa
0xf5
. . .
Using these operations (or any combination of those) causes the sledge to
behave exactly the same as before, nevertheless its shape can be modiﬁed to
evade misuse based ID systems. Notice that it is not possible to encrypt the
sledge because it has to be executed before the exploit code (and any decryption
routines).
The operations presented in Table 2 behave exactly like the NOP instructions
on an Intel architecture in the sense that they are only a single byte long. By
considering the fact that modern compilers align variables and data structures
on the stack at word boundaries1, more sledge modiﬁcations can be performed.
Instead of using single byte instructions without parameters, an intruder
can even use multi-byte opcodes with arguments. One just has to make sure
that executable code is present at all positions starting at word boundaries.
This is necessary because the return address could point to the beginning of
any word (i.e. 4 bytes) inside the sledge. This allows the attacker to choose
assembler instructions like the ones depicted in Table 3 below or any similar to
them. Operations that require an immediate parameter are best suited for this
because there is no risk of accessing illegal memory areas (thereby creating a
segmentation violation). The attacker just has to use a return address that also
points to a word aligned boundary.
The only restriction that remains for the intruder when creating the exploit
code and the sledge is that no NULL (0x00) characters may be present. This
is due to the fact that a NULL character is interpreted as the end character by
many vulnerable C functions. Because the complete attack code has to be copied,
the routines may not terminate prematurely. Other than that, the intruder has
virtually no limitations in designing his exploit.
1 Word alignment means that the address of any variable allocated on the stack modulo
four equals 0
Accurate Buﬀer Overﬂow Detection via Abstract Payload Execution
281
Table 3. Multi-Byte NOP Substitutes for IA32
Instruction
Bytecode
adc $0x70,%cl
adc $0x70d18070, %ecx
and $0x55120125, %eax
jmprel 0x37
. . .
80 d1 70
81 d1 70 80 d1 70
25 01 12 44
0xeb 0x37
. . .
Any network based misuse system can be easily evaded when such a freedom
is given in choosing the layout of the attack. Even anomaly based systems [14]
that base their analysis on the payload of the packet could be fooled. Such
systems operate with proﬁles of a ‘normal’ request that can be imitated with
the means shown above. Network based anomaly detectors that consider only
protocol information or the ﬂow of traﬃc fail as well because only a few legal
packets need to be transmitted.
While host based anomaly sensors can notice the eﬀect of a completed buﬀer
overﬂow and raise an appropriate alarm, this approach is undesirable because of
two reasons. First, only successful attacks which cause a corresponding distortion
in process behavior are reported. No indication on the number of attempts is
given. Second, the system can only react to the attack after it has manifested
itself as weird behavior. Potential damage that has been inﬂicted before the ID
reacts cannot be prevented (e.g. deletion/modiﬁcation of ﬁles).
We present a system that accurately detects exploits in the payload of ap-
plication requests and is capable of stopping malicious activity before it eﬀects
the system even when the attacker applies all evasion mechanisms described
above. The idea of our approach is to focus on the executability of the sledge
(which cannot be prevented without breaking the attack) by means of abstract
execution.
3 Abstract Execution
The following two properties that classify a sequence of bytes executed on behalf
of a certain process are used to deﬁne abstract execution.
– Correctness: A sequence of bytes is correct, if it represents a single valid
processor instruction. This implies that the processor is able to decode it.
The byte sequence consists of a valid opcode and the exact number of argu-
ments needed for this instruction (and none more). Otherwise, the sequence
is incorrect.
– Validity: A sequence of bytes is valid if it is correct and all memory operands
of the instruction reference memory addresses that the process which exe-
cutes the operation is allowed to access. A memory operand of an instruction
is an operand that directly references memory (i.e. speciﬁes an address in
282
T. Toth and C. Kruegel
the memory area of the process). Validity is important because references to
non-accessible memory addresses will be detected by the operating system
resulting in the immediate termination of the process with a segmentation
violation. A correct instruction without any (memory) operands (e.g. NOP)
is automatically valid. We also call a valid byte sequence a valid instruction.
Deﬁnition:
A sequence of bytes is abstract executable if it can be represented as a
sequence of consecutive valid instructions.
We partition the pool of processor instructions into two sets. One contains all
instructions that alter the execution ﬂow of a process (i.e. operations that mod-
ify the program counter) while the other set consists of the rest. The elements
of the ﬁrst set (e.g. call, jmp, jne) are called jump instructions. A sequence
of valid instructions can be decomposed into subsequences that do not contain
jump instructions. Such subsequences are called valid instruction chains (IC).
An instruction chain ends with a jump instruction or bytes that are not ab-
stract executable. The length of an instruction chain is equal to the number of
instructions that it consists of.
An important metrics is the execution length of a sequence of valid in-
structions. The basic idea is that the execution length combines the lengths of
instruction chains that are connected by jump instructions. It can be computed
for a byte sequence using the following algorithm.
Algorithm: Execution Length of a Byte Sequence
The algorithm expects two input arguments, a byte sequence seq and a