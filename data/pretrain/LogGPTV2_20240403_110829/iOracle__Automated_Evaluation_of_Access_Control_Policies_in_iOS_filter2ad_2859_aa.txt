title:iOracle: Automated Evaluation of Access Control Policies in iOS
author:Luke Deshotels and
Razvan Deaconescu and
Costin Carabas and
Iulia Manda and
William Enck and
Mihai Chiroiu and
Ninghui Li and
Ahmad-Reza Sadeghi
iOracle: Automated Evaluation of Access Control Policies in iOS
Luke Deshotels
North Carolina State University
PI:EMAIL
Răzvan Deaconescu
University POLITEHNICA
of Bucharest
Costin Carabas,
University POLITEHNICA
of Bucharest
PI:EMAIL
PI:EMAIL
Iulia Mandă
University POLITEHNICA
of Bucharest
PI:EMAIL
William Enck
North Carolina State University
PI:EMAIL
Mihai Chiroiu
University POLITEHNICA
of Bucharest
PI:EMAIL
Ninghui Li
Purdue University
PI:EMAIL
Ahmad-Reza Sadeghi
Technische Universität Darmstadt
ahmad.sadeghi@
trust.tu-darmstadt.de
ABSTRACT
Modern operating systems, such as iOS, use multiple access con-
trol policies to define an overall protection system. However, the
complexity of these policies and their interactions can hide pol-
icy flaws that compromise the security of the protection system.
We propose iOracle, a framework that logically models the iOS
protection system such that queries can be made to automatically
detect policy flaws. iOracle models policies and runtime context
extracted from iOS firmware images, developer resources, and jail-
broken devices, and iOracle significantly reduces the complexity of
queries by modeling policy semantics. We evaluate iOracle by using
it to successfully triage executables likely to have policy flaws and
comparing our results to the executables exploited in four recent
jailbreaks. When applied to iOS 10, iOracle identifies previously
unknown policy flaws that allow attackers to modify or bypass
access control policies. For compromised system processes, conse-
quences of these policy flaws include sandbox escapes (with respect
to read/write file access) and changing the ownership of arbitrary
files. By automating the evaluation of iOS access control policies,
iOracle provides a practical approach to hardening iOS security by
identifying policy flaws before they are exploited.
KEYWORDS
Access Control; Mobile Security; iOS; iPhone; Policy Modeling
ACM Reference Format:
Luke Deshotels, Răzvan Deaconescu, Costin Carabas,, Iulia Mandă, William
Enck, Mihai Chiroiu, Ninghui Li, and Ahmad-Reza Sadeghi. 2018. iOracle:
Automated Evaluation of Access Control Policies in iOS. In ASIA CCS ’18:
2018 ACM Asia Conference on Computer and Communications Security, June
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ASIA CCS ’18, June 4–8, 2018, Incheon, Republic of Korea
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5576-6/18/06...$15.00
https://doi.org/10.1145/3196494.3196527
4–8, 2018, Incheon, Republic of Korea. ACM, New York, NY, USA, 15 pages.
https://doi.org/10.1145/3196494.3196527
1 INTRODUCTION
iOS (iPhone Operating System) supports Apple’s mobile devices
including iPods, iPads, and iPhones. With a billion iPhones sold and
a decade of hardening, iOS has become ubiquitous, and uses several
advanced security features. Therefore, the impact and scarcity of
iOS exploits has led to the creation of sophisticated attacks. For
example, exploit brokers like Zerodium pay million dollar bounties1
for multi-stage attacks called jailbreaks. A weaponized jailbreak
can bypass and disable iOS security features to provide the attacker
with elevated privileges, stealth, and persistence.
To combat such exploits, iOS enforces an assortment of access
control policies. These policies collectively define an overall protec-
tion system that restricts operations available to malware or com-
promised system processes. However, policy flaws allow untrusted
subjects to perform privilege escalation attacks that maliciously
modify the protection state.
Jailbreaks exploit a combination of policy flaws and code vul-
nerabilities. For example, if a jailbreak author discovers a kernel
vulnerability, the protection state may prevent the attacker from
reaching it. To reach the vulnerability, the jailbreak must use policy
flaws to modify the protection state such that the vulnerable ker-
nel interface becomes accessible. In order to prevent such exploits,
we ask the research question "What policy flaws exist in the iOS
protection system?"
Existing tools can provide relevant data, but are unable to meet
the challenges of modeling the iOS protection system. For example,
SandScout [10] is a tool that models iOS sandbox profiles in Prolog,
but it does not model runtime context, Unix permissions, or policy
semantics. These features are necessary to model policy flaws in
system processes and to reduce the complexity of queries.
In this paper, we propose iOracle, a framework for logically
modeling the protection system of iOS such that high level queries
about access control qualities can be automatically resolved. To
process queries, iOracle maps access control subjects and objects
1https://zerodium.com/program.html
to relevant policies and evaluates those policies with respect to
runtime context. iOracle also supports multiple layers of abstraction
based on modeled policy semantics such that queries can be less
complex. For example, a process may be governed by multiple
complex policies, but iOracle can abstract away from the individual
policies and their esoteric semantics to answer questions about the
overall protection domain of the process.
iOracle uses Prolog to provide an extensible model that can re-
solve queries about the iOS protection system. First, static and
dynamic extraction techniques produce Prolog facts representing
sandbox policies, Unix permissions, and runtime context. Second,
iOracle’s Prolog rules simplify query design by modeling the se-
mantics of Unix permissions and sandbox policies. Finally, a human
operator discovers policy flaws by making Prolog queries designed
to verify traits of the protection system. For example, one could
query to confirm that no untrusted subject can write to a given file
path. If iOracle detects a violation of this requirement, it identifies
relevant runtime context and policy rules allowing the operation
so that the human operator can further investigate the policy flaw.
We evaluate iOracle in two ways. First, we perform a case study
of four recent jailbreaks and show how iOracle could have signifi-
cantly reduced the effort in discovering the policy flaws exploited
by them. Second, we use iOracle to discover five previously un-
known policy flaws and show how they allow privilege escalation
on iOS 10. We have disclosed our findings to Apple.
We make the following contributions in this paper.
• We present the iOracle policy analysis framework. iOracle mod-
els the iOS protection system including sandbox policies, Unix
permissions, policy semantics, and runtime context.
• We demonstrate iOracle’s utility through an analysis of four recent
jailbreaks. We show a significant reduction in executables to be
considered by security analysts.
• We identify previously unknown policy flaws. These policy flaws
include self-granted capabilities, capability redirection, write
implies read, keystroke exfiltration, and chown redirection.
We limit the scope of this work in two ways. First, modeling
code vulnerabilities is out of scope for this paper. Therefore, con-
structing new jailbreaks is not a goal of iOracle because jailbreaks
also require code vulnerabilities to compromise the behavior of
system processes or the kernel. However, future work could com-
bine the iOracle model with a set of code exploits as input to an
automated planner. Second, we limit iOracle to modeling file access
operations. As noted in Section 2, hard-coded checks and a lack of
documentation make it difficult to model access to inter-process
services in iOS. If future work models access control policies for
these services, iOracle can be extended to include the new data in
a more comprehensive model of the protection system.
The remainder of this paper proceeds as follows. Section 2 pro-
vides a background on iOS security mechanisms. Section 3 overviews
the iOracle framework approach and findings. Section 4 describes
the design of iOracle. Section 5 provides a case study of recent
jailbreaks and evaluates iOracle’s utility in triaging executables
with policy flaws. Section 6 evaluates iOracle’s ability to discover
new policy flaws. Section 7 discusses the limitations of iOracle.
Section 8 presents related work. Section 9 concludes. The Appendix
quantifies the protection systems for 15 iOS versions.
2 BACKGROUND
iOS is a modified version of macOS that supports Apple’s mobile
devices (i.e., iPhones, iPods, and iPads). iOS uses multiple access
control mechanisms including Unix permissions, capabilities, sand-
boxing, and hard-coded checks. Modern iOS devices (iPhone 5S and
later) use two kernels, a primary kernel (XNU), and a secure ker-
nel (Secure Enclave). However, Secure Enclave supports a separate
operating system (SEPOS) and is outside the scope of this paper.
Unix Permissions: Unix permissions provide privilege separation
for different users and groups of users. Each process runs with the
authority of a specific user and a set of groups. Each file is owned
by a user and a group, and it has a set of permissions that determine
which users and groups can access it. These permissions, determine
read, write, and execute permissions for the file’s user owner, group
owner, and for all other users. On iOS, most processes run as one
of two users, root (UID 0), and mobile (UID 501). Third party appli-
cations and many system processes that do not need high levels
of privilege run as mobile. In general, root can access everything
regardless of Unix permissions, but mobile should be limited to
accessing personal data and third party resources. However, root
authorized processes can still be restricted by sandboxing or hard-
coded checks as discussed later in this section. Finally, there are
several protection state operations that modify Unix permissions
at runtime (e.g., chown or chmod commands).
Sandboxing: Processes in iOS may run under the restriction of a
sandbox profile. Sandbox profiles are compiled into a proprietary
format and define access control policies that allow or deny system
calls based on their context. All third party iOS applications and
several system applications (i.e., those created by Apple) use a
sandbox profile called container. Other system processes may use
one of approximately 100 other sandbox profiles or they may run
without a sandbox. Sandbox profiles are written in SBPL (SandBox
Profile Language), which is an extension of TinyScheme.2 These
profiles consist of one or more SBPL rules. Each rule consists of a
decision (i.e., allow or deny), an operation (e.g., file-write*), and
a set of contextual requirements called filters. An SBPL filter can
express the context of the object (e.g., file paths or port numbers)
or they can express context of the subject (e.g., capabilities or user
id). If the context of the system call matches the operation and all
filters in the rule, then the decision is applied. If the context of the
call does not match any rules, then a default decision is applied.
iOS Capabilities: Each process in iOS can have zero or more capa-
bilities assigned to it. iOS uses two types of capability mechanisms:
entitlements and sandbox extensions. Entitlements are immutable
key-value pairs embedded into a program’s signature at compile
time. Sandbox extensions are unforgeable token strings that can be
dynamically issued and accepted (the official term is “consumed”)
by processes. Therefore, entitlements are suitable for policies that
will not change, and sandbox extensions are used in policies that
may be modified at run time.
Hard-Coded Checks: Apple often uses hard-coded checks when
regulating information and services shared through Inter-Process
Communication (IPC). For example, a process can contain logic
to ignore IPC requests from processes that do not possess a cer-
tain capability. System daemons can also contain logic to consult
2http://tinyscheme.sourceforge.net/home.html
Data Extraction: The iOracle framework uses a variety of static
and dynamic analysis tools to automatically extract policy data and
runtime context from iOS firmware images, Xcode (which provides
Developer Disk Images), and jailbroken devices. Examples of data
extracted statically are sandbox profiles, file metadata, program
entitlements, program binaries, and security configuration files
(e.g., /etc/passwd, /etc/groups). Extracted program binaries are
automatically analyzed using a custom IDA backtracer script to
collect hard-coded parameters of security relevant functions (i.e.,
sandbox initialization, chown, chmod). iOracle dynamically extracts
the following data for processes running on a jailbroken device: file
access operations, user authority (UID), group authority (GID), and
sandbox extensions possessed. This extracted data is then parsed
and formatted as Prolog facts as listed in Table 1.
If iOracle is designed to help find jailbreaks, but is also depen-
dent on data from jailbroken devices, this would create a circular
dependency. Therefore, iOracle uses jailbroken devices to supple-
ment knowledge of runtime context, but is not dependent on them.
iOracle primarily uses official, downloadable firmware images and
developer resources as the source of policy data. Since information
from jailbroken devices (Table 1, rows 1-3) rarely changes across
versions, iOracle can use data from older, jailbroken versions to
make inferences about newer, non-jailbroken versions. Several of
our queries and findings can be resolved using only the static data
acquired from firmware images and DDIs.
Access Control Model: iOracle models iOS access control seman-
tics as a collection of Prolog rules. For example, this model deter-
mines which Unix permission bits are relevant for a given subject,
object, and operation and evaluates queries with respect to those
permissions and other relevant factors. By using a hierarchy of
Prolog rules, iOracle models multiple levels of abstraction that al-
low it to map a high level query to relevant low level Prolog facts.
For example, a query may ask which subjects can write to a given
object. The solution to this query depends on several lower level
queries that are processed by Prolog rules representing the access
control model. These rules match runtime context of subjects and
objects to respective policy requirements such that unbound vari-
ables are resolved and a solution to the query is found based on
facts available. Details of this model are provided in Section 4.2.
Analysis and Evaluation: We use iOracle to extract facts from 15
iOS versions spanning iOS 7, 8, 9, and 10. We perform a quantitative
analysis of these facts and present our findings in the Appendix.
Next, we use iOracle to successfully triage executables exploited
in the jailbreaks presented in Section 5. In the Appendix we fur-
ther study Apple’s code and policy modifications in response to
jailbreaks by comparing iOracle models of various iOS versions.
Finally, we use iOracle to identify the following five types of previ-
ously unknown policy flaws (three others discussed in Appendix).
1. Self-Granted Capabilities – Sandbox policies determine which
sandbox extensions can be granted and consumed by the subject.
We search for flawed profiles that allow subjects to both grant and
consume the same extensions without restrictions. We find multiple
policies that allow arbitrary file access via self-granted extensions.
2. Capability Redirection – File-Type sandbox extensions declare
a file path when they are granted. However, we find that these
extensions can be arbitrarily redirected using symbolic links.
Figure 1: iOracle Overview
specialized databases files representing access control policies for
revocable services. These databases are primarily used to regulate
access to private user data (e.g., location data, user photos, contacts).
The decentralized and ad hoc nature of hard-coded checks makes
them difficult to extract and model. Therefore, iOracle does not
model hard-coded checks and restricts its scope of access control
policies to Unix permissions and the sandbox.
3 OVERVIEW
As a motivating example, let us assume a security researcher has
identified a file containing sensitive data that needs to be protected
from untrusted executables. For example, users can specify that
system applications should not have access to their location data.
The researcher would like to generate a list of all executables able
to read this file based on iOS access control policies so that they can
identify any policy flaws allowing access for the wrong executables.
To produce the list of executables manually, the researcher could
check access control policies for each executable on the system.
However, the scale, complexity, and decentralized nature of these
policies makes the task especially daunting. In iOS 10.3, there are
754 system executables that could be assigned any of 140 different
sandbox profile policies. The rules in these sandbox policies can
be conditioned upon capabilities possessed by the subject. In total,
iOracle detects over 1,000 different classes of capabilities (i.e., enti-
tlement keys and extension classes), each of which can have various
values assigned to them. The researcher must also determine effec-
tive UIDs and GIDs of executables and map the UIDs to groups they
belong to. This runtime authority is then compared to the file’s
Unix permissions, user owner, and group owner to determine if
read access is allowed. iOracle detects 20 different UIDs and 77 GIDs
in iOS 10.3. Finally, the analyst should consider protection state
operations (e.g., sandbox extensions, chown) which can change