本文详细汇总介绍了应用QEMU模拟器进行嵌入式环境构建及应用级、内核级逆向调试的技术方法，进行了详尽的实例讲解。
## 一、用QEMU模拟嵌入式调试环境
### 1\. 安装arm的交叉编译工具链
如果订制一个交叉编译工具链，可使用[crosstool-ng](http://crosstool-ng.org/)开源软件来构建。但在这里建议直接安装arm的交叉编译工具链：
`sudo apt-get install gcc-arm-linux-gnueabi`
或针对特定版本安装：
    sudo apt-get install gcc-4.9-arm-linux-gnueabi
    sudo apt-get install gcc-4.9-arm-linux-gnueabi-base
建立需要的软链接  
`sudo ln -s /usr/bin/arm-linux-gnueabi-gcc-4.9 /usr/bin/arm-linux-gnueabi-gcc`
### 2\. 编译Linux内核
生成vexpress开发板的config文件：
    make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm O=./out_vexpress_3_16  vexpress_defconfig
然后执行如下命令：
    make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm O=./out_vexpress_3_16 menuconfig
将：
    System Type  --->
    ​    [ ] Enable the L2x0 outer cache controller
即，`把 Enable the L2x0 outer cache controller` 取消， 否则Qemu会起不来， 暂时还不知道为什么。
编译：
    make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm O=./out_vexpress_3_16 zImage -j2
生成的内核镱像位于./out_vexpress_3_16/arch/arm/boot/zImage， 后续qemu启动时需要使用该镜像。
### 3\. 下载和安装qemu模拟器
下载qemu，用的版本是2.4版本，可以用如下方式下载，然后checkout到2.4分支上即可
    git clone git://git.qemu-project.org/qemu.git
    cd qemu
    git checkout remotes/origin/stable-2.4 -b stable-2.4
配置qemu前，需要安装几个软件包：
    sudo apt-get install zlib1g-dev
    sudo apt-get install libglib2.0-0
    sudo apt-get install libglib2.0-dev
    sudo apt-get install libtool
    sudo apt-get install libsdl1.2-dev 
    sudo apt-get install autoconf
配置qemu，支持模拟arm架构下的所有单板，为了使qemu的代码干净一些，采用如下方式编译，最后生成的中间文件都在build下
    mkdir build
    cd build
    ../qemu/configure --target-list=arm-softmmu --audio-drv-list=
编译和安装：
    make
    make install
查看qemu支持哪些板子
qemu-system-arm -M help
### 4\. 测试qemu和内核能否运行成功
    qemu-system-arm \
        -M vexpress-a9 \
        -m 512M \
        -kernel /root/tq2440_work/kernel/linux-stable/out_vexpress_3_16/arch/arm/boot/zImage \
        -nographic \
        -append "console=ttyAMA0"
这里简单介绍下qemu命令的参数：
-M vexpress-a9 模拟vexpress-a9单板，你可以使用-M ?参数来获取该qemu版本支持的所有单板
-m 512M 单板运行物理内存512M
-kernel /root/tq2440_work/kernel/linux-stable/out_vexpress_3_16/arch/arm/boot/zImage 告诉qemu单板运行内核镜像路径
-nographic 不使用图形化界面，只使用串口
-append "console=ttyAMA0" 内核启动参数，这里告诉内核vexpress单板运行，串口设备是哪个tty。
注意：
我每次搭建，都忘了内核启动参数中的console=参数应该填上哪个tty，因为不同单板串口驱动类型不尽相同，创建的tty设备名当然也是不相同的。那
vexpress单板的tty设备名是哪个呢？ 其实这个值可以从生成的.config文件CONFIG_CONSOLE宏找到。
如果搭建其它单板，需要注意内核启动参数的console=参数值，同样地，可从生成的.config文件中找到。
### 5\. 制作根文件系统
依赖于每个开发板支持的存储设备，根文件系统可以放到Nor
Flash上，也可以放到SD卡，甚至外部磁盘上。最关键的一点是你要清楚知道开发板有什么存储设备。本文直接使用SD卡做为存储空间，文件格式为ext3格式。
#### （1）下载、编译和安装busybox
下载地址：
配置：
在busybox下执行 make menuconfig
做如下配置：
    Busybox Settings  --->
    ​    Build Options  --->
    ​        [*] Build BusyBox as a static binary (no shared libs)
    ​        (arm-linux-gnueabi-) Cross Compiler prefix
然后执行
    make
    make install
安装完成后，会在busybox目录下生成_install目录，该目录下的程序就是单板运行所需要的命令。
#### （2）形成根目录结构
先在Ubuntu主机环境下，形成目录结构，里面存放的文件和目录与单板上运行所需要的目录结构完全一样，然后再打包成镜像（在开发板看来就是SD卡），这个临时的目录结构称为根目录。  
脚本 mkrootfs.sh 完成这个任务：
    #!/bin/bash
    sudo rm -rf rootfs
    sudo rm -rf tmpfs
    sudo rm -f a9rootfs.ext3
    sudo mkdir rootfs
    sudo cp busybox/_install/*  rootfs/ -raf
    sudo mkdir -p rootfs/proc/
    sudo mkdir -p rootfs/sys/
    sudo mkdir -p rootfs/tmp/
    sudo mkdir -p rootfs/root/
    sudo mkdir -p rootfs/var/
    sudo mkdir -p rootfs/mnt/
    sudo cp etc rootfs/ -arf
    sudo cp -arf /usr/arm-linux-gnueabi/lib rootfs/
    sudo rm rootfs/lib/*.a
    sudo arm-linux-gnueabi-strip rootfs/lib/*
    sudo mkdir -p rootfs/dev/
    sudo mknod rootfs/dev/tty1 c 4 1
    sudo mknod rootfs/dev/tty2 c 4 2
    sudo mknod rootfs/dev/tty3 c 4 3
    sudo mknod rootfs/dev/tty4 c 4 4
    sudo mknod rootfs/dev/console c 5 1
    sudo mknod rootfs/dev/null c 1 3
    sudo dd if=/dev/zero of=a9rootfs.ext3 bs=1M count=32
    sudo mkfs.ext3 a9rootfs.ext3
    sudo mkdir -p tmpfs
    sudo mount -t ext3 a9rootfs.ext3 tmpfs/ -o loop
    sudo cp -r rootfs/*  tmpfs/
    sudo umount tmpfs
其中，etc下是启动配置文件，可以的到这里下载：
#### （3）系统启动运行
完成上述所有步骤之后，就可以启动qemu来模拟vexpress开发板了，命令参数如下：
    qemu-system-arm \
        -M vexpress-a9 \
        -m 512M \
        -kernel /root/tq2440_work/kernel/linux-stable/out_vexpress_3_16/arch/arm/boot/zImage \
        -nographic \
        -append "root=/dev/mmcblk0  console=ttyAMA0" \
        -sd /root/tq2440_work/busybox_study/a9rootfs.ext3
上面是不太图形界面的，下面的命令可以产生一个图形界面：
    qemu-system-arm \
        -M vexpress-a9 \
        -serial stdio \
        -m 512M \
        -kernel /root/tq2440_work/kernel/linux-stable/out_vexpress_3_16/arch/arm/boot/zImage \
        -append "root=/dev/mmcblk0  console=ttyAMA0 console=tty0" \
        -sd /root/tq2440_work/busybox_study/a9rootfs.ext3
### 5\. 下载、编译u-boot代码
u-boot从下面的网址获得：
解压后，配置，编译：
    make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- vexpress_ca9x4_defconfig
    make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-
使用qemu测试：
    qemu-system-arm -M vexpress-a9 \
         -kernel u-boot \
         -nographic \
         -m 512M
### 6\. 实现用u-boot引导Linux内核
这里采用的方法是，利用网络引导的方式启动Linux内核。开启Qemu的网络支持功能，启动u-boot，设置u-boot的环境变量，u-boot采用tftp的方式将uImage格式的Linux内核下载到内存地址0x60008000处，为什么是0x60000000起始的地址，参考文件u-boot的配置文件 include/configs/vexpress_common.h。如果用Qemu直接启动Kernel，是通过-append
parameter 的方式给kernel传参的，现在是通过u-boot，那么需要通过u-boot的环境变量bootargs，可以设置为如下值 `setenv
bootargs 'root=/dev/mmcblk0 console=ttyAMA0 console=tty0'`。 然后设置u-boot环境变量bootcmd，如下:`setenv bootcmd 'tftp 0x60008000 uImage; bootm
0x60008000'`。
具体方式如下：
#### （1）启动Qemu的网络支持
  * 输入如下命令安装必要的工具包:
    sudo apt-get install uml-utilities
    sudo apt-get install bridge-utils
  * 输入如下命令查看 /dev/net/tun 文件:
    ls -l /dev/net/tun 
    crw-rw-rwT 1 root root 10, 200 Apr 15 02:23 /dev/net/tun
  * 创建 /etc/qemu-ifdown 脚本，内容如下所示：
    #!/bin/sh
    echo sudo brctl delif br0 $1
    sudo brctl delif br0 $1
    echo sudo tunctl -d $1
    sudo tunctl -d $1
    echo brctl show
    brctl show
输入如下命令为 /etc/qemu-ifup 和 /etc/qemu-ifdown 脚本加上可执行权限：
    chmod +x /etc/qemu-ifup
    chmod +x /etc/qemu-ifdown
那么先手动执行如下命令：  
`/etc/qemu-ifup tap0`
#### （2）配置u-boot
主要是修改include/configs/vexpress_common.h
    diff --git a/include/configs/vexpress_common.h b/include/configs/vexpress_common.h
    index 0c1da01..9fa7d9e 100644
    --- a/include/configs/vexpress_common.h
    +++ b/include/configs/vexpress_common.h
    @@ -48,6 +48,11 @@
     #define CONFIG_SYS_TEXT_BASE   0x80800000
     #endif
    +/* netmask */
    +#define CONFIG_IPADDR   192.168.11.5
    +#define CONFIG_NETMASK  255.255.255.0
    +#define CONFIG_SERVERIP 192.168.11.20
    +
     /*
      * Physical addresses, offset from V2M_PA_CS0-3
      */
    @@ -202,7 +207,9 @@
     #define CONFIG_SYS_INIT_SP_ADDR                CONFIG_SYS_GBL_DATA_OFFSET
     /* Basic environment settings */
    -#define CONFIG_BOOTCOMMAND             "run bootflash;"
    +/* #define CONFIG_BOOTCOMMAND          "run bootflash;" */
    +#define CONFIG_BOOTCOMMAND             "tftp 0x60008000 uImage; setenv bootargs 'root=/dev/mmcblk0 console=ttyAMA0'; bootm 0x60008000
    +
说明：这里把ipaddr等设置为了192.168.11.x网段，这个需要跟br0的网址一致，br0的地址在/etc/qemu-ifuo中修改：
    #!/bin/sh
    echo sudo tunctl -u $(id -un) -t $1
    sudo tunctl -u $(id -un) -t $1
    echo sudo ifconfig $1 0.0.0.0 promisc up
    sudo ifconfig $1 0.0.0.0 promisc up
    echo sudo brctl addif br0 $1
    sudo brctl addif br0 $1
    echo brctl show
    brctl show
    sudo ifconfig br0 192.168.11.20
然后重新编译u-boot代码
    make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j2
测试：
    qemu-system-arm -M vexpress-a9 \
         -kernel u-boot \
         -nographic \
         -m 512M \
         -net nic,vlan=0 -net tap,vlan=0,ifname=tap0
#### （3）配置Linux Kernel
因为要用u-boot引导，所以需要把Kernel编译成uImage格式。这里需要我们制定LOADADDR的值，即uImage的加载地址，根据u-boot，我们可以将其设置为0x60008000.
命令如下：
    make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm O=./out_vexpress_3_16 LOADADDR=0x60008000  uImage -j2
编译生成的uImage在 linux-stable/out_vexpress_3_16/arch/arm/boot下，然后将uImage拷贝到/tftpboot目录下。
执行如下命令：
    qemu-system-arm -M vexpress-a9 \
         -kernel /root/tq2440_work/u-boot/u-boot/u-boot \
         -nographic \
         -m 512M \
         -net nic,vlan=0 -net tap,vlan=0,ifname=tap0 \
         -sd /root/tq2440_work/busybox_study/a9rootfs.ext3
#### （4）开启图形界面
修改u-boot的bootargs环境变量为：
    setenv bootargs 'root=/dev/mmcblk0 console=ttyAMA0 console=tty0';
执行命令：