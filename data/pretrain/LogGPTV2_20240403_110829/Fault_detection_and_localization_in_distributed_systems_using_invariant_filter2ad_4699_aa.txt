# Fault Detection and Localization in Distributed Systems Using Invariant Relationships

**Authors:**
- Abhishek B. Sharma
- Haifeng Chen
- Min Ding
- Kenji Yoshihira
- Guofei Jiang

**Affiliation:**
NEC Labs America, Princeton, NJ

**Emails:**
- {absharma, haifeng, min, kenji, gfj}@nec-labs.com

## Abstract
Recent advancements in sensing and communication technologies have enabled continuous monitoring of a wide array of distributed systems, such as data centers, manufacturing plants, transportation networks, and automobiles. This data is often collected in the form of time series from multiple sensors (both hardware and software). We previously developed an approach based on time-invariant relationships using Auto-Regressive models with eXogenous input (ARX) to model this data. A tool based on our approach has been effective for fault detection and capacity planning in distributed systems. In this paper, we first describe our experience in applying this tool in real-world settings. We also discuss the challenges in fault localization when using our tool and present two approaches—a spatial approach based on invariant graphs and a temporal approach based on expected broken invariant patterns—to address these challenges.

## 1. Introduction
State-of-the-art sensing and communication technologies allow us to collect vast amounts of monitoring data from complex, distributed systems. For example, we can deploy hardware and software sensors to collect monitoring data at multiple points in data centers, including servers, network switches, power supply, cooling equipment, operating system (OS) performance metrics, and application performance metrics. Similarly, physical plants and modern automobiles are equipped with sophisticated monitoring infrastructures. However, mere visibility is not enough; we need to extract meaningful information from this data to manage these systems more effectively.

Big data analytics for system operational intelligence is an active area of research in both academia and industry. Innovative solutions in this domain include IT management tools and physical system monitoring solutions. Monitoring data from various systems is typically in the form of time series, such as OS performance metrics, network traffic measurements, and environmental data (e.g., temperature and pressure) for physical plants. Historically, such data has been extremely useful for detecting faults or anomalies by comparing time series measurements against thresholds. There are several well-known parametric (e.g., auto-regressive models) and non-parametric techniques (e.g., clustering) for modeling time series data, many of which have been adapted for fault and anomaly detection.

Over the past few years, we have developed a product called SIAT for modeling time series monitoring data. SIAT uses ARX models to capture dependencies between different metrics, which we refer to as invariants. For example, the instantaneous resource utilization (CPU, memory, etc.) at a web server depends on the number of HTTP requests it is serving, and such dependencies can be modeled as invariants. These invariant relationships can be used to monitor dynamic systems and detect faults and anomalies. We will illustrate this approach with an example.

### Example (Part I): Modeling Using Invariants
Figure 1(a) shows the invariant graph extracted from a real-world time series dataset consisting of 20 metrics. Each node in the graph represents a metric, and a link between two nodes denotes an invariant relationship. The invariant graph has 39 edges and 5 connected components. The largest connected component consists of 11 nodes, with two densely connected sub-components sharing a common node. There are three isolated invariants (nodes with degree 1) and a small connected component with three nodes. Thus, we can build a model for normal system operation from time series measurement data using invariants and represent it as a graph. The structure of this invariant graph (e.g., connected components, degree distribution) provides global information on dependencies across metrics.

### Example (Part II): Fault Detection Using Invariants
If the system measurement data does not fit some (or all) of the invariant relationships, i.e., if invariants are broken, it indicates that something has happened (possibly a fault or an anomaly). Figure 1(b) shows the broken invariants (dashed lines) at a certain time. All broken invariants have metric m1 in common, suggesting that the component associated with m1 likely has a fault. By using pairwise or multivariate invariant relationships between metrics, we can transform the task of anomaly or fault detection in distributed systems into a problem of identifying unusual nodes in a graph. This approach has been applied for fault and anomaly detection in several IT systems.

### Our Contributions
This paper makes two contributions. First, we describe the key algorithmic ideas implemented in SIAT and share our experiences with applying SIAT to real-world problems (Sections II-III). Dealing with real-world datasets exposed two challenges: improving the fault localization algorithm of SIAT and reducing the false alarm rate due to measurement noise (Section IV). Our second contribution is formulating these challenges as metric ranking and noise suppression problems and presenting two algorithms to solve them—one using a graph defined by system invariants and the other looking at temporal patterns in broken invariants (Sections V-VI). We compare the two approaches using synthetic data in Section VII and discuss a case study using real-world data.

## 2. System Invariants and SIAT
In this section, we first describe a framework for discovering pairwise relationships in large time series datasets, which we initially proposed in [13]. We then highlight the key steps in invariant-based fault/anomaly detection built into SIAT.

### 2.1 System Invariants
An invariant is a pairwise relationship between two time series expressed as an AutoRegressive model with eXogenous input (ARX) [12]. An ARX model with parameters (n, m, k) between time series y(t) and x(t) is shown in Equation (1).

\[
y(t) + a_1 y(t-1) + a_2 y(t-2) + \ldots + a_n y(t-n) = b_0 x(t-k) + b_1 x(t-k-1) + \ldots + b_m x(t-k-m)
\]

Here, \(x(t)\) is the exogenous input time series, and the parameters \(k\) and \(m\) determine the number of previous samples of \(x(t)\) affecting the current value \(y(t)\). The parameter \(n\) controls the extent of autocorrelation in \(y(t)\), i.e., the current value \(y(t)\) depends on \(n\) previous samples. The model's coefficients are denoted as \(\theta\):

\[
\theta = [a_1, \ldots, a_n, b_0, b_1, \ldots, b_m]^T
\]

We can rewrite Equation (1) using vector notation as shown in Equation (3):

\[
y(t|\theta) = \psi^T \theta
\]

where

\[
\psi = [-y(t-1), \ldots, -y(t-n), x(t-k), \ldots, x(t-k-m)]^T
\]

For a fixed (n, m, k), we can estimate \(\theta\) using least squares regression. Assume we have measured \(x(t)\) and \(y(t)\) over a time interval \(1 \leq t \leq N\). Using Equation (3), we can define a system of linear equations and compute an estimate for \(\theta\) by minimizing the mean squared error (MSE), as defined in Equation (4):

\[
\text{MSE}(\theta) = \frac{1}{N} \sum_{t=1}^{N} (y(t) - \hat{y}(t|\theta))^2
\]

where \(y(t)\) is the measured value at \(t\) and \(\hat{y}(t|\theta)\) is our estimate using the ARX model.

The ARX model cannot capture all kinds of pairwise relationships between two time series. For instance, if \(y(t)\) has a non-linear dependency on \(x(t)\), the ARX model cannot capture this relationship. To decide whether an ARX model captures the relationship between a pair of time series, we use a normalized fitness score \(F(\theta)\) as a measure of the "goodness of fit" of the ARX model [13]. The fitness score is defined as:

\[
F(\theta) = 1 - \frac{\sum_{t=1}^{N} |y(t) - \hat{y}(t|\theta)|^2}{\sum_{t=1}^{N} |y(t) - \bar{y}|^2}
\]

where \(\bar{y}\) is the mean of the observed values \(y(t)\). A high \(F(\theta)\) value indicates that the ARX model fits the observed data well. In practice, we specify a threshold \(\tau\), and if the fitness score of an ARX model for \(y(t)\) and \(x(t)\) is greater than \(\tau\), we declare that there exists a time-invariant linear relationship, i.e., an invariant, between them.

### 2.2 SIAT
SIAT is built based on the idea of system invariants and has proven effective for fault/anomaly detection and capacity planning [7], [13], [14]. The two main design decisions in building SIAT were (1) ARX model identification, i.e., setting the parameters \(n\), \(m\), and \(k\), and (2) an algorithm for fault detection.

A simple approach for ARX model identification is to consider all possible values for \(n\), \(m\), and \(k\) within a range and pick the model with the highest fitness score among those with a fitness score greater than \(\tau\). For IT systems such as multi-tier web services, Oracle, and SQL databases, a choice of \(0 \leq n, m, k \leq 2\) has worked well [13], [7], [14]. For such a small range of model parameters, SIAT's brute force search is not prohibitively expensive. A more efficient approach for invariant model identification remains an open problem.

SIAT uses invariants for real-time fault and anomaly detection. At each time \(t\), it keeps track of the residual between the measurement \(y(t)\) and its estimate \(\hat{y}(t|\theta)\), defined as:

\[
R_{xy}(t) = |y(t) - \hat{y}(t|\theta)|
\]

In the absence of faults or anomalies, we expect \(R_{xy}(t) \leq \epsilon_{xy}\), where \(\epsilon_{xy}\) is a threshold determined by the ARX modeling error. If \(R_{xy}(t) > \epsilon_{xy}\), SIAT declares the invariant between \(x(t)\) and \(y(t)\) as broken. If the same invariant is broken for three consecutive samples, SIAT raises an alarm and marks the corresponding metrics for further investigation by system administrators. Each invariant has a different threshold \(\epsilon_{xy}\) associated with it. SIAT uses the residuals from the training data to automatically set \(\epsilon_{xy}\) as:

\[
\epsilon_{xy} = 1.1 \times \arg r_{xy} \{ \text{Prob}(R_{xy}(t) < r_{xy}) = 0.995 \}
\]

i.e., it chooses a value \(r_{xy}\) that is greater than 99.5% of the residuals observed on the training data and sets \(\epsilon_{xy}\) to be 10% larger than \(r_{xy}\).

Figure 2 shows a screenshot from SIAT. SIAT extracted an invariant ARX relationship between \(y(t)\) and \(x(t)\) from the training data (not shown in Figure 2), and the top plot shows the residual \(R_{xy}(t)\) for the \(x(t)\) and \(y(t)\) measurements shown in the middle and bottom plots, respectively. Initially, \(R_{xy}(t)\) lies within its bounds (yellow horizontal lines in the top plot), but then it starts increasing and converges at a value higher than SIAT’s upper bound. The corresponding measurements for \(y(t)\) are marked out in the bottom plot. SIAT marks the invariant between \(y(t)\) and \(x(t)\) as broken for the duration when \(R_{xy}(t)\) is outside its bound.

## 3. Experiences with SIAT
### 3.1 Success with IT Systems
SIAT has been effective in tackling a range of problems in distributed computing systems, including fault and anomaly detection, generating signatures for recurring failures, and capacity planning [13], [14], [7], [8]. Figure 1 and the discussion in Section 1 outline how SIAT can be used for fault/anomaly detection. For recurring failures such as memory leaks, busy loops, and DoS attacks on web services, we can infer a pattern for invariants that break when a particular kind of fault occurs and use it as a signature in the future [8]. SIAT can also perform what-if analysis, often for capacity planning, using invariants. For example, an ARX model between the number of HTTP requests and CPU usage at a web server allows an administrator to estimate how much additional CPU power is needed to maintain the current system performance if the rate of HTTP requests is doubled.

### 3.2 Model Training Time
We are constantly striving to improve the time it takes to extract system invariants from training data. With very large datasets, disk I/O becomes the bottleneck, and we are currently working on parallelizing SIAT’s training phase using MapReduce-style approaches.

## 4. Lessons Learned: Real-World Challenges
While SIAT is highly effective at detecting faults and anomalies, localizing these faults can be challenging. In one of our experiments with a multi-tier web hosting infrastructure consisting of a web, an application, and a database server, we collected data for 111 metrics [13]. We then injected a busy loop fault in the application server. Out of the 34 different application server metrics, the seven CPU-related metrics (utilization, idle time, I/O wait time, etc.) were impacted the most by this fault. Isolating these metrics is important for three reasons: (1) it saves debugging effort—administrators can focus on the application server first and look at the broken invariants at the web and database servers after fixing the application server, if needed; (2) it facilitates root cause analysis—a high CPU load without any significant change in the number of HTTP requests indicates rogue computation somewhere; and (3) it allows us to infer signatures for faults that repeat often [8].

We refer to the problem of identifying the most abnormal metrics as the metric ranking problem. Solving it involves separating true SIAT alarms from false ones, which is challenging in the presence of measurement noise. When applying SIAT to real-world data, we often observe that a small fraction of invariants are broken even in the absence of any apparent faults or anomalies. Additionally, the set of metrics with such broken invariants changes over time. This is not entirely surprising; it is too simplistic to expect that all invariants will hold perfectly in a dynamic system.