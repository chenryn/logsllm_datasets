title:DEPCOMM: Graph Summarization on System Audit Logs for Attack Investigation
author:Zhiqiang Xu and
Pengcheng Fang and
Changlin Liu and
Xusheng Xiao and
Yu Wen and
Dan Meng
2022 IEEE Symposium on Security and Privacy (SP)
DEPCOMM: Graph Summarization on System Audit Logs for Attack Investigation
Zhiqiang Xu 1, 2, Pengcheng Fang 3, Changlin Liu 3, Xusheng Xiao 3*, Yu Wen 1*, Dan Meng 1, 2
1Institute of Information Engineering, Chinese Academy of Sciences, China
2School of Cyber Security, University of Chinese Academy of Sciences, China
3Department of Computer and Data Sciences, Case Western Reserve University, USA
Email: {xuzhiqiang,wenyu,md}@iie.ac.cn
Email: {pxf109,cxl1029,xusheng.xiao}@case.edu
2
3
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
Abstract—Causality analysis generates a dependency graph
from system audit logs, which has emerged as an important
solution for attack investigation. In the dependency graph, nodes
represent system entities (e.g., processes and ﬁles) and edges
represent dependencies among entities (e.g., a process writing
to a ﬁle). Despite the promising early results, causality analysis
often produces a large graph (> 100, 000 edges) and it is
a daunting task for security analysts to inspect such a large
graph for attack investigation. To address challenges in attack
investigation, we propose DEPCOMM, a graph summarization
approach that generates a summary graph from a dependency
graph by partitioning a large graph into process-centric commu-
nities and presenting summaries for each community. Speciﬁcally,
each community consists of a set of intimate processes that
cooperate with each other to accomplish certain system activities
(e.g., ﬁle compression), and the resources (e.g., ﬁles) accessed
by these processes. Within a community, DEPCOMM further
identiﬁes redundant edges caused by less-important and repetitive
system activities, and perform compression on these edges.
Finally, DEPCOMM generates the summary for each community
using the InfoPaths that represent the information ﬂows across
communities. These InfoPaths are more likely to capture a set
of attack-related processes that work together to achieve certain
malicious goals. Our evaluations on real attacks (∼ 150 million
events) demonstrate that DEPCOMM generates 18.4 communities
on average for a dependency graph, which is ∼ 70× smaller
than the original graph. Our compression further reduces the
edges in each community to 32.1 on average. Compared with the
9 state-of-the-art community detection algorithms, on average,
DEPCOMM achieves a 2.29× better F1-score than these algo-
rithms in detecting communities. Through cooperating with the
automatic techniques HOLMES, DEPCOMM can identify attack-
related communities by a recall of 96.2%. Our case studies on
the real attacks also demonstrate DEPCOMM’s effectiveness in
facilitating attack investigation.
Keywords-attack investigation; system auditing; graph summa-
rization; community detection
I. INTRODUCTION
Recent cyber attacks have penetrated into many well-
protected businesses, causing signiﬁcant ﬁnancial losses [1–
7]. To counter these attacks, causality analysis [8–15] based
on ubiquitous system monitoring has emerged as an important
approach for performing attack investigation [8, 9, 12, 13, 16–
19]. System monitoring observes system calls and generates
kernel-level audit events as system audit logs. These logs
enable causality analysis to identify entry points of intrusions
————————
*Corresponding Author
(backward tracing) and ramiﬁcations of attacks (forward trac-
ing), which have been shown to be effective in assisting attack
investigation and timely system recovery [10, 11, 14, 20, 21].
While early results are promising for causality analysis,
existing approaches require non-trivial efforts of manual in-
spection [14, 22], which hinders their wide adoption. Causal-
ity analysis approaches consider system entities (e.g., ﬁles,
processes, and network connections) that are involved in
the same system call event (e.g., a process reading a ﬁle)
to have causal dependencies. Based on these dependencies,
these approaches represent system-call events using a system
dependency graph, where nodes represent system entities and
edges represent dependencies derived from system events.
Using a dependency graph, security analysts can investigate
the contextual
information of an attack by reconstructing
the chain of events that lead to the POI (Point-Of-Interest)
event (e.g., an alert event reported by intrusion detection
systems [14, 23]). Such contextual information is effective in
revealing attack-related events such as distinguishing benign
uses of ZIP from ransomware [14, 24]. However, due to
the dependency explosion problem [25–27], it is hard for
security analysts to effectively extract the desirable contextual
information from a huge graph (typically containing >100K
edges [14, 22]).
Recognizing the challenges of using dependency graphs in
attack investigation, recent techniques have been proposed to
automatically ﬁlter irrelevant events and reveal attack-related
events [12–15, 28]. While these techniques achieve promising
results, manual attack investigation is still indispensable due
to three major reasons. First, in spite of being rare, there
are always residual risks in a system, which cannot be accu-
rately revealed by these automation techniques, especially for
techniques that heavily rely on system proﬁles [14]. Second,
threats are continually evolving to evade defence techniques,
such as emerging attack tactics and techniques lately devel-
oped by adversaries. Third, existing techniques mainly rely on
heuristic rules that cause loss of information [8, 9] and intru-
sive system changes [13, 15] such as binary instrumentation,
hindering their practical adoption.
Motivation. To effectively assist attack investigation, in this
paper, we aim to develop a graph summarization approach
that preserves the semantics of system activities in a
dependency graph while shrinking its size by hiding less-
important details. More speciﬁcally, we aim to generate a
© 2022, Zhiqiang Xu. Under license to IEEE.
DOI 10.1109/SP46214.2022.00005
540
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
summary graph by dividing a dependency graph into a number
of communities (i.e., sub-graphs) and presenting a succinct
summary for each community. Each community contains only
closely related processes, and they work together to accom-
plish certain system tasks (e.g., ﬁle compression). We then
compute the summary using these processes and their accessed
resources, which can represent high-level system activities that
jointly outline the skeleton of the original dependency graph.
Furthermore, our graph summarization can be combined with
existing automatic investigation techniques [12–15, 28] to
highlight attack-related communities.
Challenges. Graph summarization techniques [29–31] have
been shown to be effective in managing large-scale graphs
by generating a compact representation of a graph, i.e., a
summary graph. However,
little has been studied on the
security implications of summary graphs for attack investi-
gation. In particular, the unique characteristics of dependency
graphs pose three major challenges for DEPCOMM to generate
summary graphs for dependency graphs.
 A dependency graph is a type of heterogeneous graph,
where nodes represent different types of system entities (i.e.,
processes, ﬁles, and network connections) and play different
roles in attack steps. A general purpose summarization tech-
nique that treats each node equally cannot effectively detect the
communities to represent major system activities. Additionally,
a domain-speciﬁc technique of a non-security domain, even if
it is designed for heterogeneous graphs, most likely leads to
loss of attack information.
 Causality analysis [8, 9, 12, 14] relies on the event time
to identify causal dependencies (e.g., a process reading a ﬁle
after another process writing to it) and the dependency graph
contains lots of less-important dependencies that represent
irrelevant system activities such as chronicle system mainte-
nance tasks and irrelevant web browsing. These dependencies
become the majority parts of the dependency graphs and it is
a challenging task to compress and hide these activities.
  Graph summarization techniques [29–31] mainly deal with
the data stored in databases, and their schema and constraints
play an important role in the generated summary graphs. But
in dependency graphs, a sequence of edges that represent
system activities should be the core of the generated summary
graphs for attack investigation. How to summarize these edges
becomes another challenge for DEPCOMM.
Contributions. To address the aforementioned challenges in
graph summarization for dependency graphs, we propose
DEPCOMM, a graph summarization approach that detects
process-centric communities, compresses the less-important
edges inside each community, and summarizes each commu-
nity using top-ranked paths that represent information ﬂows
among the communities. DEPCOMM is a general approach
that performs graph summarization on large-scale dependency
graphs and can cooperate with various automatic investigation
techniques [14, 32] to highlight and visualize attack-relevant
communities. The design of DEPCOMM is driven by the
following key insights.
First, in system audit logs, system activities (e.g., down-
loading a malicious script and executing the script) are often
represented as a set of process nodes that have either strong
correlation with each other or data dependencies through some
resource nodes. For example, a process tar spawns a child
process bzip2 and they work together to compress a ﬁle. By
carefully examining the cooperation of processes, we observe
that these processes (1) either have parent-child relationships
(i.e., a process spawning a set of children nodes) or (2) share
the same parent process (i.e., sibling processes) and have data
dependencies through some resources (e.g., ﬁles). We refer to
this type of closely related processes as intimate processes.
Thus, to address the challenge , DEPCOMM partitions a
dependency graph into process-centric communities, where
each community includes a group of intimate processes and
the system resources accessed by these processes.
Second, as shown in recent studies [26, 27, 33], there are
many redundant edges caused by less-important and repetitive
system activities, such as chronicle tasks and backup ﬁle
updates. Thus, to addressing the challenge , DEPCOMM
identiﬁes process-based and resource-based patterns and com-
presses the edges based on these patterns for each com-
munity. Rather than preserving dependencies as the existing
work [27, 33], our community detection allows aggressive
compression among multiple processes inside a community.
Third, by carefully inspecting the dependency graphs of
various attacks [12, 13, 15, 18], major system activities (e.g.,
compressing ﬁles) and attack behaviors (e.g., leaking data)
are often represented as information ﬂows among attack-
related processes, such as compressing sensitive data and
leaking the compressed ﬁle. Such information ﬂows are often
represented as the paths from the input nodes to the output
nodes in a community, referred to as InfoPaths. For exam-
ple, a malicious script leaks a sensitive ﬁle by packaging,
encrypting and uploading, and the corresponding InfoPath
is: ../secret.doc→tar→../upload.tar→bzip2→../upload.tar
.bz2→gpg→../upload.gpg→curl→xxx->xxx. Moreover,
there
could be many InfoPaths from the inputs to the outputs in
a community, and not all of them are related to major sys-
tem activities. Thus, to address the challenge  , DEPCOMM
prioritizes the InfoPaths inside each community and ranks the
InfoPaths that are more likely to represent attack steps and
major system activities at the top.
Approach. Based on these insights, DEPCOMM provides
novel techniques to detect process-centric communities, per-
forms compression inside the detected communities, and gen-
erates representative summaries for each community.
To detect process-centric communities (Section IV-C), DE-
PCOMM learns the behavior representations of a dependency
graph’s process nodes, and clusters the process nodes with
similar representations into a community. Speciﬁcally, DEP-
COMM performs random walks [34] on each process node to
obtain walk routes and computes the behavior representation
for each process node by vectorizing these walk routes.
Particularly, as existing random walk algorithms [34–38] treat
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
541
each node equally, they are less effective to generate similar
behavior representations for intimate processes. Thus, we
design a series of novel hierarchical walk schemes, which
leverage both the information of the processes’ local neighbors
and the global process lineage trees [39] to choose the walk
routes that are more likely to ﬁnd intimate processes. With
the learned representations for each process node, DEPCOMM
clusters these process nodes into communities, and further
classiﬁes these processes’ accessed resource nodes into the
detected communities, producing process-centric communities.
To perform community compression (Section IV-D), DEP-
COMM ﬁrst computes a process lineage tree for each com-
munity, and associates each process node with the events
that access resource nodes. By searching this tree, DEP-
COMM can identify process-based patterns (e.g., a bash process
spawning multiple vim processes) and resource-based patterns
(e.g., multiple vim processes editing a source ﬁle). Based
on the identiﬁed process-based and resource-based patterns,
DEPCOMM merges all of the repeated edges and nodes to
compress a community.
After compressing communities, DEPCOMM generates In-
foPaths for each community, prioritizes the InfoPaths, and
presents the top-ranked InfoPaths as the summary of a com-
munity (Section IV-E). To do that, DEPCOMM ﬁrst identiﬁes
the input nodes and the output nodes of each community
according to the information ﬂows among communities, and
then generates InfoPaths by ﬁnding paths for every pair of
input and output nodes. Next, DEPCOMM assigns a priority
score to each InfoPath based on its likelihood to represent
major system activities in the community (e.g., containing the
POI event). Finally, DEPCOMM ranks these InfoPaths based
on the priorities and shows the top-ranked InfoPaths as the
summary for a community. While top-2 InfoPaths can reveal
attack behaviors for most communities (Section V-E), security
analysts can decide the number of top InfoPaths shown in the