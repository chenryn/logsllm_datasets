title:Security under key-dependent inputs
author:Shai Halevi and
Hugo Krawczyk
Security Under Key-Dependent Inputs
Shai Halevi and Hugo Krawczyk
IBM, T.J. Watson Research Center
Hawthorne, NY 10532, USA
PI:EMAIL,PI:EMAIL
ABSTRACT
In this work we re-visit the question of building crypto-
graphic primitives that remain secure even when queried
on inputs that depend on the secret key. This was investi-
gated by Black, Rogaway, and Shrimpton in the context of
randomized encryption schemes and in the random oracle
model. We extend the investigation to deterministic sym-
metric schemes (such as PRFs and block ciphers) and to
the standard model. We term this notion “security against
key-dependent-input attack ”, or KDI-security for short. Our
motivation for studying KDI security is the existence of sig-
niﬁcant real-world implementations of deterministic encryp-
tion (in the context of storage encryption) that actually rely
on their building blocks to be KDI secure.
We consider many natural constructions for PRFs, ci-
phers, tweakable ciphers and randomized encryption, and
examine them with respect to their KDI security. We ex-
hibit inherent limitations of this notion and show many nat-
ural constructions that fail to be KDI secure in the standard
model, including some schemes that have been proven in the
random oracle model. On the positive side, we demonstrate
examples where some measure of KDI security can be prov-
ably achieved (in particular, we show such examples in the
standard model).
Categories and Subject Descriptors
D.4.6 [Software]: Security and Protection
General Terms
Security
Keywords
Circular encryption, Key-dependent input, Self encryption
1.
INTRODUCTION
Does it make sense for an application to self-encrypt an
encryption key? That is, if Es represents an encryption func-
tion with key s, would it ever be the case that an application
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’07, October 29–November 2, 2007, Alexandria, Virginia, USA.
Copyright  2007  ACM  978-1-59593-703-2/07/0010. . .$5. 00.
needs to store or transmit Es(s)? Cryptographers typically
see this as a dangerous abuse of an encryption scheme, and
standard security criteria for encryption scheme do not take
this possibility into account. Still, there are applications
where such form of security is helpful. This security concern
was formally deﬁned and studied by Black, Rogaway, and
Shrimpton [4] in the context of symmetric encryption under
the name KDM-security (for Key-Dependent-Messages). In
particular Black et al. proved that KDM-secure symmetric
encryption can be achieved in the random-oracle model.
If “encrypting your own key” is abusive for randomized
encryption, using this practice with deterministic construc-
tions (such as pseudo-random functions and permutations)
seems even more dangerous. The present work was mo-
tivated by a real-world application that turned out to be
doing just that: the IEEE P1619 standard group was de-
veloping a standard for “sector level encryption” [13], which
must be length-preserving and hence must be deterministic.
The group was considering a scheme based on the tweakable
cipher of Liskov et al.
[16], but some members objected,
citing an attack that can be mounted when the proposed
scheme is applied to its own secret key. An argument en-
sued as to whether or not this “self-encryption” scenario is
a real problem or just a theoretical possibility that would
never happen in the real world. The argument was decided
when the group was informed that the implementation of
disk encryption in Windows Vista
can store to the disk
an encryption of its own secret keys in some situations. Con-
sequently, the group switched to a diﬀerent scheme, based
on Rogaway’s work [20], for which the particular attack in
question does not seem to apply (see more details in Sec-
tion 5 and in [12]).
TM
Another reason to study KDI-security arises in the con-
text of anonymous credentials: Camenisch and Lysyanskaya
[5] introduced the notion of “circular security”, which is sim-
ilar to (but somewhat weaker than) KDI security, and used
it as a tool to discourage delegation of credentials in an
anonymous credential system. Also, in the formal-methods
community the deﬁnitional work of Black et al. from [4] was
used to strengthen the deﬁnition of computational encryp-
tion and prove it equivalent to the Dolev-Yao formulation
[15, 1].
1.1 Our results
In this work we re-visit KDM security, with emphasis
on deterministic constructions and analysis in the standard
model. We rename the notion to KDI security, to stress
that we are not talking only about encryption (and hence
466the Input is not necessarily a Message). We demonstrate
some inherent limitations of these notions and present posi-
tive and negative results concerning the KDI security of en-
cryption, pseudo-random functions and (tweakable) pseudo-
random permutations, with respect to this notion, both in
the standard model and in the “ideal cipher model”.
Deﬁnition and inherent limitations.
We begin in Section 2 by exploring the notion of KDI-
security and its limitations, speciﬁcally as they pertain to
deterministic constructions. We observe that KDI-security
of deterministic schemes cannot be achieved (even in an ide-
alized models) without restricting the key-dependent queries
that the attacker can make: Allowing the attacker to query
a function fs on multiple functions of the key necessarily
translates into a KDI attack that recovers the full key, and
this attack works even if the underlying primitive is an “ideal
cipher” or a random oracle! (This is similar to the setting
of “related key attacks” [2].) In practical terms this means
that an application must restrict the types of information
on the key that may potentially be “encrypted” under the
key itself.
For this reason, we parametrize KDI security by the set of
functions of the key that the attacker can use in its queries.
Given the impossibility mentioned above when the set of
functions is too rich, it makes sense to even investigate the
minimal notion of KDI-security with respect to just a single
function, as we may at least hope that even an abusive im-
plementation that “encrypts its own key” will only do so in
one form, rather than “encrypting” many copies of the key
in many diﬀerent forms (e.g., it may encrypt the key itself
or a hash of the key, but not multiple, arbitrary functions
of the key). In particular, negative results obtained in this
minimalistic setting imply impossibility of stronger notions
of KDI security. In this light, we investigate the existence
of schemes that are KDI-secure with respect to all eﬃcient
deterministic functions of the key, as long as the attacker
is restricted to query a single function of its choice in the
attack.
Pseudo-random functions.
We investigate in Sections 3 and 4 the existence of pseudo-
random functions (PRFs) that are KDI secure with respect
to any (single) function of the key, and present the following
results:
1. We show that in the “ideal cipher model”, KDI secu-
rity is achievable if one restricts the functions of the
key that can be queried to be independent of the ideal
cipher itself.
2. In contrast we prove that this goal cannot be achieved
in the standard model, by showing that for each (de-
terministic) PRF family there is a function of the key
relative to which the given family in not KDI secure.
3. On the positive side, if we allow the PRF construction
to depend on a ﬁxed public random value, often called
a “salt” (and do not allow the function of the key to
depend on the same salt value), then we can get KDI-
security in the standard model (assuming that stan-
dard PRFs exist).
4. The construction from 3 also implies a non-constructive
proof that for every function g there is a PRF (whose
description depends on g) that is KDI-secure against
this particular function g. We show also a constructive
proof for the case where g is a “well spread” function.
Tweakable ciphers.
We return in Section 5 to the “ideal cipher model” to
study the KDI security of tweakable ciphers (which are the
basis for the IEEE P1619 standard that provided the ini-
tial motivation of this work). We establish a deﬁnition of
KDI security for tweakable ciphers, describe an attack on
a scheme of Liskov et al.
[16] thus demonstrating that it
is not KDI-secure (even in the “ideal cipher model”), and
then show that some other schemes (including the one by
Rogaway [20]) are KDI-secure in this model.
Randomized encryption.
We conclude in Section 6 by taking another look at ran-
domized encryption, in particular PRF-based symmetric en-
cryption. Black et al. proved in [4] that the encryption
scheme Encs(x) = (r, fs(r) ⊕ x) is KDI-secure when fs is
implemented using a random oracle as fs(x) = H(s|x). We
observe that this encryption scheme is not KDI-secure in
general when we only require that fs is a secure PRF, not
even if fs is itself KDI-secure. More surprisingly, this con-
struction fails even for “natural” choices of the PRF fs, such
as when instantiated using the Davies-Meyer construction.
(This serves as an interesting reminder of the caution one
has to exercise when basing security on idealized models.)
On the positive side, we show that if fs is a KDI-secure in-
vertible PRF, then the encryption scheme Encs(x) = (r, fs(r)
⊕ fs(x)) is also KDI secure. Unfortunately our salted PRF
from Item 3 above seems to be inherently non-invertible,
but the “g-speciﬁc construction” from Item 4 can be made
invertible and, if randomized, can work for any function g,
not just a “well spread” one. Hence we obtain for every
function g an encryption scheme Enc(g) that is KDI secure
with respect to that function g.
Very recently we were told of an independent (yet unpub-
lished) work of Hofheinz and Unruh, where they considered
the issue of key-dependent security for randomized encryp-
tion in the standard model and obtained results that are
rather complimentary to ours.
The moral.
We view the results in this work as lending support to the
“common cryptographic wisdom” that the practice of self
encryption of a key is a dangerous abuse of a cryptosystem.
We demonstrate that many security goals that can be stated
with respect to this practice inherently cannot be achieved;
in some cases not even in an idealized model. Our counter-
example for the case of randomized encryption (Section 6)
is particularly troubling: We show a failure of a textbook
construction for symmetric encryption with respect to a very
natural implementation of its components. Moreover, this is
the case in spite of the fact that almost the same construction
was previously proved secure in the random oracle model!
We also show that similar warnings apply to other secret-key
primitives, such as a PRF, when applied to the key or, more
generally, to a function of the key. On the positive side, we
show explicit constructions that achieve limited notions of
KDI security (even in the standard model). Two interesting
open questions that remain are ﬁnding, for each function g
of the key, a (deterministic) PRF that is KDI secure with
respect to g and, more fundamentally, ﬁnding a symmetric
encryption scheme that can be proven KDI-secure in the
standard model with respect to any function g.
Terminology.
To simplify the presentation we state our results in the
language of asymptotic security, using the terms “feasible”
for probabilistic polynomial-time, “non-negligible”or “no-
ticeable” for larger than some polynomial fraction, and “neg-
ligible” or “insigniﬁcant” for smaller than any polynomial
fraction. It is clear, however, that all the results could also
be stated in the language of “exact security” (at a price of
a somewhat more cluttered presentation).1
2. DEFINITIONAL APPROACH AND SOME
INTRINSIC LIMITATIONS
(cid:2)
Roughly, to deﬁne security with respect to key-dependent
input attacks we modify the standard attack scenarios for
the various primitives that we study, by allowing the at-
tacker to query its oracles not only on explicit strings but
also on functions of the secret key. That is, where the orig-
inal notion provided the attacker access to an oracle O(·),
(·) that gets as input a description of a
we add an oracle O
function g (e.g., in the form of a circuit that computes the
function) and outputs O(g(s)) where s is the secret key of
the construction in question. We will refer to the queries
as functional queries. We extend this deﬁnitional ap-
to O
proach to the “ideal cipher model” by allowing oracle access
to keyed random permutations (and their inverses) and by
possibly allowing the functional queries to depend on these
oracles.
(cid:2)
Ideally, we would like to ﬁnd constructions that remain
secure even when the attacker can query the primitive on
any eﬃcient function of the key. There are, however, some
inherent limitations to this approach. For example, letting
−1
the attacker query a cipher Es on input g(s) = E
s (s), the
key would be obviously exposed. A more general limitation
arises in the context of deterministic primitives, as we show
next.
KDI-Insecurity against unrestricted queries.
(cid:2)
(cid:2)
(cid:2)
The idea of this argument is that an attacker can try to
apply many diﬀerent functions to the key s, and use colli-
sions of the form g(s) = g
(s) to do a binary search for the
key s. That is, the attacker uses two diﬀerent functional
queries g, g
, and checks if it gets the same answer on both.
(s),
This (in essence) tells the attacker whether g(s) = g
which cuts the key-space by two. Here we describe a simple
example of this argument, which is essentially the same as
the one described in [2] in the context of related-key attacks.
Let Ψ be any deterministic construction that has a secret
key (such that the disclosure of s compromises the security
of Ψ). For simplicity (this is not essential for the general
argument), assume that both the key space and the input
space of Ψ is {0, 1}n, and that for every ﬁxed key s ∈ {0, 1}n