Freezing the system via occupying critical system re-
sources using legitimate Android commands: Android inher-
its part of the Linux commands, e.g., top, meanwhile, it also
develops a set of specific commands, e.g., am. With the help of
Android NDK, any Android app is able to invoke such commands
in its native processes. Due to the weak management of the native
processes, the Android commands running in the native process
can occupy the system resources without any restriction. If the
occupied system resource is indispensable to the critical system
services, it will lead to the starvation of the critical system services.
Such starvation in critical system services freezes the whole system
and further triggers the watchdog recovering process that kills the
Android userspace (e.g., the system server, the Zygote and other
processes) and forces the system to go through a soft-reboot.
Exhausting the device computing resources via spawning
a large number of native processes: As there is no restriction
on the use of the native process, any app is able to spawn a large
number of native processes in an instant to exhaust the device
computing resources. Unfortunately, due to the lack of computing
resources, ANR and LMK cannot timely react to this situation to
kill the malicious app. As a consequence, the system is not able to
maintain its basic functionality because of the unavailability of the
device computing resources. Finally, it falls again to the last defense
line, i.e., the watchdog recovering process.
3 NATIVEX
3.1 Overview
As illustrated in Fig. 1, NativeX is composed of four modules
represented in dashed rounded rectangles, i.e., static code analyzer,
risky command analyzer, automatic PoC generator, and automatic
verifier. The static code analyzer takes the Android framework
source as input to sift out a set of critical file system resources
that are used in the potential risky Android framework methods.
Risky command analyzer further identifies the Android commands
that have operations on these critical file system resources by
analyzing the Android command source code. The static code
analyzer and the risky command analyzer together identify the
Android commands that can potentially be abused to occupy the
system resources, particularly the file system resources that are
required by critical Android system services. The output of each
step within the module is represented in the solid rectangles, in the
form of sets of objects, methods, services, directories/files resources,
and commands. After that, the automatic PoC generator constructs
a ready PoC Android app for each identified risky command. Finally,
the automatic verifier verifies whether the PoC app indeed leads to
a successful attack, i.e., an unresponsive system.
Figure 1: Overview of NativeX.
3.2 Static Code Analyzer
The static code analyzer takes the Android framework source code
as input, and outputs a set of system resources, specifically the file
system resources, that are used in critical Android system services
or other risky framework methods. In order to achieve such target,
static code analyzer briefly takes three steps, i.e., identifying the
risky objects and methods in the critical system services, sifting-out
the risky methods by extending the candidate set to the system-
wide, and finally finding out the file system resources used in these
risky methods.
First of all, we search for the critical Android system services
which are defined as the indispensable services whose failure
may cause severe consequences, such as system freeze, crash
or reboot. As introduced in Section 2.1, the system services
monitored by Android watchdog are so critical that any failure
in these services would lead to a watchdog recovery attempt.
NativeX utilizes this information to find the critical system
services. It finds out the services registered themselves to Android
watch dog using Watchdog.getInstance().addThread() and
Watchdog.getInstance().addMonitor(), forming {S} in Fig. 1.
After we have the critical system services, we step further to find
the high-risk methods within these critical system services. NativeX
treats the methods using a synchronized object as the methods with
high risks, because these methods can be starved or delayed while
waiting for the synchronized objects. And these starvation and
delay could trigger the system reset from the Android watchdog.
NativeX firstly identifies such objects set, i.e., {O}, by recognizing
the synchronized() blocks in the source code. Following the
synchronized objects set {O}, NativeX further finds out the methods
in {S} that directly use synchronized objects in {O}, forming set
{M1dir ect}. Regarding the indirect methods from {S}, which are
denoted as {M1indir ect}, we traverse the Android source code
multiple times to trace back the caller methods. We add every
newly-found methods to {M1indir ect} till there is no more new
method. {M1dir ect} and {M1indir ect} together form {M1}.
Other than the objects and methods in critical services, invoking
points can be from other parts of the Android framework, which
highlights the importance of extending the search of risky methods
to the system-wide. Different from the candidates in {M1}, the
unresponsive methods that are not monitored by the Android
watchdog would not directly cause watchdog triggering the system
recovering process. However, if the methods are slowed down
significantly while invoking the objects in {O} or methods in {M1},
there is a higher chance that the invoked services trigger the
watchdog.
We firstly scan through the whole framework source code to
find the methods that are invoking the objects in {O} or methods in
{M1}, which is denoted as {M2tmp}. We then sift out the time-
consuming methods in {M2tmp} to form a system-wide risky
method set {M2}. NativeX targets the methods that include loops
and have I/O operations in the loop since loop statements and
I/O operations are generally considered to be time-consuming.
However, not all the time-consuming methods have loops and I/O
operations directly, for example, some methods that gather and
update real-time system states are also time-consuming. Despite
that our knowledge may not be complete, we would like the
result to be as complete as possible. Therefore, to the best our
knowledge, we manually add in 10 such time-consuming meth-
ods, i.e., printCurrentState(), writeEvent(), dumpStackTraces(),
printCurrentLoad(), addErrorToDropBox(), updateOomAdjLocked(),
computeOomAdjLocked(), killProcessGroup(), isProcessAliveLocked(),
updateLruProcessLocked(). Generally, NativeX obtains a set of
methods {M2} by selecting the methods from {M2tmp} using the
following two criteria, i) including loops and having I/O operations
in the loop; ii) having any of the above 10 methods.
Finally, the static code analyzer outputs the file system re-
sources, i.e., {R}, used in the above-identified risky candidate sets
{O, M1, M2}.
Static	Code	AnalyzerAndroidCommand	Source	CodeSynchronized	Objects	{O}	in	{S}System-Wide	Methods{M2tmp}	Invoking	Objects/Methods	in	{O,	M1}Potential	Risky	Methods	{M2}Storage	Resources	{R}	Used	in	{O,	M1,	M2}Risky	Command	AnalyzerRisky	Commands	{C}	Using	Storage	Resources	in	{R}Automatic	PoCGeneratornative-lib.cppsystem(“{C}”)Sifting	RulesMethods	in	{S}	Directly	{M1direct}or	Indirectly{M1indirect}	Synchronizing	Objects	in	{O},{M1}={M1direct,M1indirect}Android	Framework	Source	CodeServices	{S}	Monitored	by	WatchdogAutomatic	Verifier3.3 Risky Command Analyzer
Risky command analyzer is to locate the Android commands which
share the same file resources in {R} with the risky candidates
we have identified in the previous step. We believe that due
to the weak management of the native process, these native
commands are potentially able to be exploited to occupy the file
system resources so as to block or slow down the access from
the risky objects/methods significantly. This step is also done by
analyzing the source code. Differently, it analyzes the Android
command source code. Usually, the commands source code is
located at /external/toybox/toys, /system/core/toolbox and
/frameworks/base/cmds. We filter the Android command source
code and obtain the command set {C} including all the commands
that have operations in storage resources in {R}.
3.4 Automatic PoC Generator and Verifier
Listing 1: Core code in PoC app template.
for ( i =0;
i <num ;
i f ( ! f o r k ( ) ) {
i + + ) {
system ( " xxx_command " ) ;
}
i f ( f o r k ( ) ) {
while ( 1 ) {
s l e e p ( 1 ) ;
}
}
}
In the final step, NativeX automatically constructs a PoC
application for each command in set {C}. To achieve the automation,
we need to manually construct an app template that forks a number
of native processes executing a command using a C++ function
system(). The core code of the template is shown in Listing 1.
Then, for each identified command, NativeX generates and builds a
new app based on the app template by replacing the parameter of
system() with the command. The target Android version is set in
the build.gradle file accordingly so that the app can be compiled
to adapt different versions using gradle commands, i.e., gradle
assembleDebug or gradle assembleRelease.
adb s h e l l
adb s h e l l
adb s h e l l
adb s h e l l
adb s h e l l
Listing 2: Automatic verifier script.
/ / Return
input keyevent 4
/ / HOME
input keyevent 3
/ / Volume up
input keyevent 24
/ / Volume down
input keyevent 25
input keyevent 26
/ / Power
The automatic verifier is to verify that the PoC app indeed leads
to an unresponsive system. The automatic verifier requires that
the testing device is connected via a USB cable to the computer
where NativeX is running, and an ADB connection is established
between the device and the computer. The verifier installs and
launches the PoC app using adb install and adb shell am
start. A list of operations, as shown in Listing 2, are issued to
test whether the system can respond properly. The running time
for the script under normal condition is around 10 seconds. If the
system does not respond timely, e.g., within 60 seconds, or the ADB
connection is interrupted, we deem that the system has fallen into
an unresponsive state or gone through a reboot.
4 EVALUATION
NativeX is coded using Python and Shell script with 1464 lines of
code. It is running on macOS 10.13.6 with 16 GB memory and 2.8
GHz Intel Core i7 processor in this evaluation. We demonstrate how
NativeX gradually narrows down the risky candidates and identifies
the risky commands. Our evaluation confirms that this vulnerability
affects Android versions from 4.2 to 9.0. We further conduct a
vulnerability analysis to reveal its root causes. In addition, we
present a quantitative evaluation of attack consequences, including
device temperature surge, battery degeneration, and computing
performance decrease under persistent attack.
4.1 NativeX Evaluation
We run NativeX on the 6 major Android versions ranging from
4.2 to 9.0. We notice that the critical system services monitored by
watchdog are changing a lot as shown in Table 1. We demonstrate
the NativeX results using the latest Android 9.0 source code.
NativeX takes 63.84 seconds to complete the analysis of Android
9.0. As shown in Table 2, in total, we have identified 12 system
services that are monitored by the watchdog, where there are 52
synchronized objects and 906 methods directly invoking these
objects. In order to find out all the invoking methods, NativeX
further traces back along the call graph and obtains 410 methods
indirectly invoking these objects, which takes five layers tracing
backward. Following the critical objects and methods (i.e.,{O} and
{M1}), the NativeX static code analyzer extends to the system-
wide and collects 77 methods (i.e.,{M2}) that are not monitored by
watchdog but using objects and methods in {O} and {M1}. Finally,
nine root storage resources (i.e., {R}) are identified, i.e., /data, /dev,
/mnt, /proc, /product, /storage, /sys, /system, /vendor.
Atop these system storage resources, risky command analyzer
filters the Android command source code and obtains the risky
commands as shown in Table 3. Due to the page limit, Table 3
only lists the numbers for each version1. A small portion of the
total commands are recognized as risky, for example, out of the
269 commands found in the Android 9.0 command source code,
there are 50 risky commands that have operations in the 9 critical
storage resources. Readers may have noticed that not all of the
risky commands identified from the Android command source code
are available in the Android system. More about this interesting
observation is explained in Section 4.2. Finally, the automatic PoC
generator constructs a PoC app for each identified command. The
number of native processes that the PoC app is to spawn is set
to a large enough number 10,000. In fact, the experiments later
will show that a successful attack only takes 80 to 2,800 processes
depending on the device specifications.
The PoC apps are verified on 19 smartphones and 2 smart TV
boxes. We manage to cover all the 6 major versions we analyzed
using Google Nexus and Pixel series. Besides Google phones, we
also test other models running vendor-customized Android systems,
such as Samsung, Huawei, etc. In addition to smartphones, there are
1Please refer to the following link for detailed risky commands from the 6 major
Android versions, https://goo.gl/Qjtmbp
Table 1: The critical system services monitored by watchdog in different Androids versions.
Android OS Version
Monitor Services
Number
Android 4.2
Android 5.1
Android 6.0.1
Android 7.1.1
Android 8.0
Android 9.0
ActivityManagerService, WindowManagerService, PowerManagerService, InputManagerService,
NetworkManagementService, MountService
ActivityManagerService, WindowManagerService, PowerManagerService, InputManagerService,
NetworkManagementService, MountService, PackageManagerService, MediaRouterService,
MediaSessionService, MediaProjectionManagerService
ActivityManagerService, WindowManagerService, PowerManagerService, InputManagerService,
NetworkManagementService, MountService, PackageManagerService, MediaRouterService,
MediaSessionService, MediaProjectionManagerService
ActivityManagerService, WindowManagerService, PowerManagerService, InputManagerService,
NetworkManagementService, MountService, PackageManagerService, MediaRouterService,
MediaSessionService, MediaProjectionManagerService, TvRemoteService
ActivityManagerService, WindowManagerService, PowerManagerService, InputManagerService,
NetworkManagementService, StorageManagerService, PackageManagerService, MediaSessionService,
MediaRouterService, MediaProjectionManagerService, TvRemoteService
ActivityManagerService, WindowManagerService, PowerManagerService, InputManagerService,
NetworkManagementService, StorageManagerService, PackageManagerService, MediaSessionService,
MediaRouterService, MediaProjectionManagerService, TvRemoteService, PermissionManagerService
6
10
10
11
11
12
Table 2: Synchronized objects and their invoking methods
in the critical services monitored by the watchdog.
{S }
ActivityManagerService
InputManagerService
MediaProjectionManagerService
MediaRouterService
MediaSessionService
NetworkManagementService
PackageManagerService
PermissionManagerService
PowerManagerService
StorageManagerService
TvRemoteService
WindowManagerService
Total
{O }
16
6
1
2
1
6