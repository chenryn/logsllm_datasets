复制
7002
7003
7004
7005
1
---
## Page 285
节点为接收者（receiver），如图17-40所示。
通信，我们称发送消息的节点为发送者（sender），接收消息的
17.7
者都是基于 Raft 算法的领头选举（leader election）方法来实现的。
新的配置纪元，并再次进行选举，直到选出新的主节点为止。
的主节点只会有一个。
N个主节点进行投票，那么具有大于等于N/2+1张支持票的从节点只会有一个，这确保了新
张支持票时，这个从节点就会当选为新的主节点。
息，并根据自己收到了多少条这种消息来统计自己获得了多少主节点的支持。
AUTH_ACK 消息，表示这个主节点支持从节点成为新的主节点。
他从节点，那么主节点将向要求投票的从节点返回一条CLUSTERMSG_TYPE_FAILOVER_
有投票权的主节点向这个从节点投票。
这个选举新主节点的方法和第16章介绍的选举领头 Sentinel的方法非常相似，因为两
5）如果一个主节点具有投票权（它正在负责处理槽），并且这个主节点尚未投票给其
集群中的各个节点通过发送和接收消息（message）来进行
9）如果在一个配置纪元里面没有从节点能收集到足够多的支持票，那么集群进人一个
8）因为在每一个配置纪元里面，每个具有投票权的主节点只能投一次票，所以如果有
 PONG 消息：当接收者收到发送者发来的 MEET 消息或者 PING 消息时，为了向发送
 MEET 消息：当发送者接到客户端发送的 CLUSTER 
节点发送的消息主要有以下五种：
7）如果集群里有N个具有投票权的主节点，那么当一个从节点收集到大于等于N/2+1
6）每个参与选举的从节点都会接收 CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK 消
口PING消息：集群里的每个节点默认每隔一秒钟就会从已知节点列表中随机选出五
所处的集群里面。
MEET命令时，发送者会向接收者发送 MEET 消息，请求接收者加人到发送者当前
节点立即刷新关于这个节点的认识，例如当一次故障转移操作成功执行之后，新的
消息。另外，一个节点也可以通过向集群广播自己的 PONG 消息来让集群中的其他
者确认这条 MEET 消息或者 PING 消息已到达，接收者会向发送者返回一条 PONG
节点 B 的信息更新滞后。
以防止节点 A因为长时间没有随机选中节点B 作为 PING 消息的发送对象而导致对
timeout 选项设置时长的一半，那么节点A也会向节点B 发送 PING 消息，这可
B 发送的 PONG 消息的时间，距离当前时间已经超过了节点 A的cluster-node-
息，以此来检测被选中的节点是否在线。除此之外，如果节点A最后一次收到节点
个节点，然后对这五个节点中最长时间没有发送过 PING 消息的节点发送 PING 消
消息
图17-40发送者和接收者
发送者
第17章
消息
接收者
·281
---
## Page 286
282·第三部分多机数据库的实现
认为消息头本身也是消息的一部分。
息发送者自身的一些信息，因为这些信息也会被消息接收者用到，所以严格来讲，我们可以
17.7.1消息头
头，然后再分别介绍上面提到的五种不同类型的消息正文。
每个消息头都由一个 cluster.h/clusterMsg 结构表示:
节点发送的所有消息都由一个消息头包裹，消息头除了包含消息正文之外，还记录了消
口PUBLISH 消息：当节点接收到一个PUBLISH命令时，节点会执行这个命令，并向
typedef struct
FAIL 消息：当一个主节点A判断另一个主节点B已经进人FAIL 状态时，节点A
的 PUBLISH 命令。
集群广播一条 PUBLISH 消息，所有接收到这条 PUBLISH 消息的节点都会执行相同
节点B标记为已下线。
会向集群广播一条关于节点 B 的 FAIL 消息，所有收到这条消息的节点都会立即将
点已经变成了主节点，并且接管了已下线节点负责的槽。
主节点会向集群广播一条 PONG 消息，以此来让集群中的其他节点立即知道这个节
char slaveof [REDIS_CLUSTER_NAMELEN]:
1！如巢发送者是一个从节点，那么这里记录的是发送者正在复制的主节点的名字
unsigned char myslots [REDIS_CLUSTER_SLOTS/8];
1/ 发送者目前的槽指派信息
char sender[REDIS_CLUSTER_NAMELEN] ;
/”发送者的名字（ID）
uint64_t configEpoch;
11如果发送者是一个主节点，那么这里记录的是发送者的配置纪元
uint64_t currentEpoch;
//发送者所处的配置纪元
//只在发送MEET、PING、PONG这三种 GOSSsip 协议消息时使用
/1 消息正文包含的节点信息数量
uinti6_t type;
11 消息的类型
uint32_t totlen;
1/消息的长度（包括这个消息头的长度和消息正文的长度）
如果发送者是
如果发送者是一个从节点。
一个主节点，
那么这里记录的是 REDIS_NODE_NULL_NAME
那么这里记录的是发送者正在复制的主节点的配置纪元
---
## Page 287
的在线变成了下线，或者由主节点变成了从节点等等。
记录的标识值，接收者可以知道发送者的状态和角色是否发生了变化，例如节点状态由原来
myslots 属性记录的槽指派信息，接收者可以知道发送者的槽指派信息是否发生了变化。
者对应的clusterNode 结构，并对结构进行更新。
的节点信息，接收者会根据这些信息，在自已的clusterState.nodes 字典里找到发送
消息的正文：
又或者说，通过对比接收者为发送者记录的标识值，以及发送者在消息头的 flags 属性
举个例子，通过对比接收者为发送者记录的槽指派信息，以及发送者在消息头的
 clusterMsg 结构的 currentEpoch、sender、myslots 等属性记录了发送者自身
clusterMsg.data 属性指向联合 cluster.h/clusterMsgData，这个联合就是
union clusterMsgData
：
} clusterMsg;
/！其他消息的正文...
” publish;
struct {
//PUBLISH 消息的正文
 fail;
struct {
//FAIL 消息的正文
}ping;
struct
//MEET、PING、PONG 消息的正文
union clusterMsgData data;
1/消惠的正文（或者说，内容）
unsigned char state;
/1发送者所处集群的状态
uint16_t flags;
//发送者的标识值
uinti6_t port;
1/发送者的端口号
clusterMsgDataPublish msg;
 clusterMsgDataFail about;
第17章
集
群+283
---
## Page 288
284·第三部分多机数据库的实现
被选中节点的标识值：
一次发送和接收 PING 消息和 PONG 消息的时间戳，被选中节点的 IP 地址和端口号，以及
clusterMsgDataGossip 结构里面。
出两个节点（可以是主节点或者从节点），并将这两个被选中节点的信息分别保存到两个
tYPe 属性来判断一条消息是 MEET 消息、PING 消息还是 PONG 消息。
h/clusterMsgDataGossip 结构组成:
Gossip 协议由 MEET、PING、PONG三种消息实现，这三种消息的正文都由两个 cluster。
17.7.2 MEET、PING、PONG 消息的实现
clusterMsgDataGossip 结构记录了被选中节点的名字，发送者与被选中节点最后
每次发送 MEET、PING、PONG 消息时，发送者都从自己的已知节点列表中随机选
Redis 集群中的各个节点通过Gossip 协议来交换各自关于不同节点的状态信息，其中
) clusterMsgDataGossip:
typedef struct {
因为 MEET、PING、PONG 三种消息都使用相同的消息正文，所以节点通过消息头的
union clusterMsgData (
uintl6_t flags;
//节点的标识值
11节点的端口号
char ip[16];
//节点的IP地址
uint32_t pong_received;
/1 最后一次从该节点接收到 PONG 消息的时间戳
uint32_t ping_sent;
1/ 最后一次向该节点发送 PING 消息的时间截
char nodename [REDIS_CLUSTER_NAMELEN] ;
/！节点的名字
//其他消息的正文...
uint16_t port;
}ping;
struct
// MEET、PING 和 PONG 消息的正文
clusterMsgDataGossip gossip[l];
/
每条 MEET、PING、PONG 消息都包含两个
---
## Page 289
含一个 nodename 属性，该属性记录了已下线节点的名字：
断是否需要将集群标记为下线，又或者对下线主节点进行故障转移。
集群，而发送FAIL 消息可以让集群里的所有节点立即知道某个主节点已下线，从而尽快判
给节点的信息更新带来一定延迟，因为Gossip 协议消息通常需要一段时间才能传播至整个
已下线。
条关于主节点B的FAIL消息，所有接收到这条FAIL消息的节点都会将主节点B 标记为
17.7.3FAIL 消息的实现
节点的集群里：
举个发送 PING 消息和返回 PONG 消息的例子，假设在一个包含A、B、C、D、E、F六个
记录的被选中节点来选择进行哪种操作：
在集群的节点数量比较大的情况下，单纯使用Gossip 协议来传播节点的已下线信息会
FAIL 消息的正文由cluster.h/clusterMsgDataFail 结构表示，这个结构只包
当集群里的主节点A将主节点B标记为已下线（FAIL）时，主节点A将向集群广播一
口节点A向节点D 发送 PING 消息，并且消息里面包含了节点 B 和节点C 的信息，当
口如果被选中节点已经存在于接收者的已知节点列表，那么说明接收者之前已经与被
口如果被选中节点不存在于接收者的已知节点列表，那么说明接收者是第一次接触到
} clusterMsgDataFail;
typedef struct {
整个通信过程如图 17-41所示。
口之后，节点D将向节点A返回一条PONG消息，并且消息里面包含了节点E和节点F
当接收者收到 MEET、PING、PONG 消息时，接收者会访问消息正文中的两个
的消息，当节点A 收到这条 PONG 消息时，它将更新自己对节点E 和节点F 的认识。
节点 D 收到这条 PING 消息时，它将更新自己对节点B 和节点C 的认识。
对被选中节点所对应的 clusterNode 结构进行更新。
选中节点进行过接触，接收者将根据clusterMsgDataGossip 结构记录的信息，
行握手。
被选中节点，接收者将根据结构中记录的IP 地址和端口号等信息，与被选中节点进
 char nodename [REDIS_CLUSTER_NAMELEN] ;
节点A
图 17-41 一个 PING- PONG 消息通信示例
返回包含节点E 和节点F 信息的 PONG 消息
发送包含节点 B 和节点C 信息的 PING消息
节点D
第17章
群+285
---
## Page 290
286·第三部分多机教据库的实现
收到了客户端发送的PUBLISH命令，那么节点7000将向7001、7002、7003三个节点发送
将导致集群中的所有节点都向 channel频道发送 message 消息。
频道发送 message 消息。
向集群广播一条 PUBLISH 消息，所有接收到这条 PUBLISH 消息的节点都会向 channel
的时候，接收到 PUBLISH 命令的节点不仅会向channel 频道发送消息 message，它还会
17.7.4 PUBLISH 消息的实现
节点的名字，接收到消息的节点就可以根据这个名字来判断是哪个节点下线了。
举个例子，对于包含7000、7001、7002、7003四个节点的集群来说，如果节点7000
图17-42节点7001将节点
 PUBLISH  
换句话说，向集群中的某个节点发送命令：
 PUBLISH  
当客户端向集群中的某个节点发送命令：
7000标记为已下线
图 17-42 至图 17-44 展示了节点发送和接收 FAIL 消息的整个过程。
口因为这时集群已经有超过一半的主节点认为主节点7000已下线，所以集群剩下的几
举个例子，对于包含7000、7001、7002、7003四个主节点的集群来说：
因为集群里的所有节点都有一个独一无二的名字，所以 FAIL 消息里面只需要保存下线
口
口如果主节点7001发现主节点7000已下线，那么主节点7001将向主节点7002和主节
转移。
个主节点可以判断是否需要将集群标记为下线，又或者开始对主节点7000进行故障
将主节点7000标记为已下线。
当主节点7002和主节点7003都接收到主节点7001发送的FAIL 消息时，它们也会
以此来表示主节点7000已下线。
点 7003发送FAIL 消息，其中 FAIL 消息中包含的节点名字为主节点 7000的名字
图 17-43节点7001向集群
广播 FAIL 消息
0
7001
图17-44节点7002和节点7003
也将节点7000标记为已下线
100
7000
（7002
集群
7003
---
## Page 291
其中bulk_data 数组的前七个字节保存了 channel参数的值"news.it"，而 bulk_
保存的则是 message 参数。
的 channel 参数和 message 参数，而结构的
组保存了客户端通过PUBLISH命令发送给节点
bulk_data 属性是一个字节数组，这个字节数
PUBLISH 消息，如图 17-45 所示。
了channel 参数的长度和 message 参数的长度：
所有节点广播相同的 PUBLISH命令，这也是 Redis 在复制 PUBLISH命令时所使用的方
那么节点发送的 PUBLISH 消息的 clusterMsgDataPublish 结构将如图 17-46 所示:
举个例子，如果节点收到的PUBLISH命令为：
口其中 bulk_data 的 0字节至 channel_len-1字节保存的是 channel 参数。
clusterMsgDataPublish结构的
PUBLISH 消息的正文由 cluster.h/clusterMsgDataPublish 结构表示:
clusterMsgDataPublish
PUBLISH "news.it" "hello"
1 clusterMsgDataPublish;
typedef struct {
实际上，要让集群的所有节点都执行相同的 PUBLISH命令，最简单的方法就是向
uint32_t message_len;
uint32_t channel_len;
message_len
channel_len
bulk_data
5
为什么不直接向节点广播PUBLISH命令
图 17-46clusterMsgDataPublish 结构示例
ewstneo.
图 17-45
客户端
 PUBLISH I
向集群广播 PUBLISH 消息
接收到 PUBLISH 命令的节点 7000
命令
发送
000
第17章
PUBLISH
发送
集
7003
7002
7001
群 
+287
---
## Page 292
288·第三部分多机数据库的实现
17.8重点回顾
信”这一规则，所以节点没有采取广播PUBLISH命令的做法。
法，不过因为这种做法并不符合 Redis 集群的“各个节点通过发送和接收消息来进行通
口集群中的节点通过发送和接收消息来进行通信，常见的消息包括 MEET、PING、
口集群里的从节点用于复制主节点，并在主节点下线时，代替主节点继续处理命令
MOVED 错误表示槽的负责权已经从一个节点转移到了另一个节点，而ASK错误只是
口
口 集群中的16384个槽可以分别指派给集群中的各个节点，每个节点都会记录哪些槽
口节点通过握手来将其他节点添加到自己所处的集群当中。
L
指派给了自己，而哪些槽又被指派给了其他节点。
PONG、PUBLISH、FAIL 五种。
请求。
两个节点在迁移槽的过程中使用的一种临时措施。