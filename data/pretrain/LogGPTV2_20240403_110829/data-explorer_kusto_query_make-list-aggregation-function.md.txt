---
title:  make_list() (aggregation function)
description: Learn how to use the make_list() function to create a dynamic JSON object array of all the values of the expressions in the group.
ms.reviewer: alexans
ms.topic: reference
ms.date: 11/13/2023
adobe-target: true
---
# make_list() (aggregation function)
Creates a `dynamic` array of all the values of *expr* in the group.
[!INCLUDE [ignore-nulls](../../includes/ignore-nulls.md)]
[!INCLUDE [data-explorer-agg-function-summarize-note](../../includes/data-explorer-agg-function-summarize-note.md)]
> **Deprecated aliases:** makelist()
## Syntax
`make_list(`*expr* [`,` *maxSize*]`)`
[!INCLUDE [syntax-conventions-note](../../includes/syntax-conventions-note.md)]
## Parameters
| Name | Type | Required | Description |
|--|--|--|--|
| *expr* | `dynamic` |  :heavy_check_mark: | The expression used for the aggregation calculation. |
| *maxSize* | `int` |  | The maximum number of elements returned. The default and max value is 1048576. |
> [!NOTE]
> The deprecated version has a default *maxSize* limit of 128.
## Returns
Returns a `dynamic` array of all the values of *expr* in the group.
If the input to the `summarize` operator isn't sorted, the order of elements in the resulting array is undefined.
If the input to the `summarize` operator is sorted, the order of elements in the resulting array tracks that of the input.
> [!TIP]
> Use the [`array_sort_asc()`](./array-sort-asc-function.md) or [`array_sort_desc()`](./array-sort-desc-function.md) function to create an ordered list by some key.
## Examples
### One column
The following example makes a list out of a single column:
> [!div class="nextstepaction"]
> Run the query
```kusto
let shapes = datatable (name: string, sideCount: int)
[
    "triangle", 3,
    "square", 4,
    "rectangle", 4,
    "pentagon", 5,
    "hexagon", 6,
    "heptagon", 7,
    "octagon", 8,
    "nonagon", 9,
    "decagon", 10
];
shapes
| summarize mylist = make_list(name)
```
**Output**
|mylist|
|---|
|["triangle","square","rectangle","pentagon","hexagon","heptagon","octagon","nonagon","decagon"]|
### Using the 'by' clause
The following example runs a query using the `by` clause:
> [!div class="nextstepaction"]
> Run the query
```kusto
let shapes = datatable (name: string, sideCount: int)
[
    "triangle", 3,
    "square", 4,
    "rectangle", 4,
    "pentagon", 5,
    "hexagon", 6,
    "heptagon", 7,
    "octagon", 8,
    "nonagon", 9,
    "decagon", 10
];
shapes
| summarize mylist = make_list(name) by isEvenSideCount = sideCount % 2 == 0
```
**Output**
|isEvenSideCount| mylist|
|---|---|
|false|["triangle","pentagon","heptagon","nonagon"]|
|true|["square","rectangle","hexagon","octagon","decagon"]|
### Packing a dynamic object
The following examples show how to [pack](./packfunction.md) a dynamic object in a column before making it a list.
> [!div class="nextstepaction"]
> Run the query
```kusto
let shapes = datatable (name: string, sideCount: int)
[
    "triangle", 3,
    "square", 4,
    "rectangle", 4,
    "pentagon", 5,
    "hexagon", 6,
    "heptagon", 7,
    "octagon", 8,
    "nonagon", 9,
    "decagon", 10
];
shapes
| extend d = bag_pack("name", name, "sideCount", sideCount)
| summarize mylist = make_list(d) by isEvenSideCount = sideCount % 2 == 0
```
**Output**
|isEvenSideCount|mylist|
|---|---|
|false|[{"name":"triangle","sideCount":3},{"name":"pentagon","sideCount":5},{"name":"heptagon","sideCount":7},{"name":"nonagon","sideCount":9}]|
|true|[{"name":"square","sideCount":4},{"name":"rectangle","sideCount":4},{"name":"hexagon","sideCount":6},{"name":"octagon","sideCount":8},{"name":"decagon","sideCount":10}]|
## Related content
[`make_list_if`](./make-list-if-aggregation-function.md) operator is similar to `make_list`, except it also accepts a predicate.