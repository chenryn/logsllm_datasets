title:Poster: Finding JavaScript Name Conflicts on the Web
author:Mingxue Zhang and
Wei Meng and
Yi Wang
POSTER: Finding JavaScript Name Conflicts on the Web
Mingxue Zhang
Chinese University of Hong Kong
PI:EMAIL
Wei Meng
PI:EMAIL
Chinese University of Hong Kong
Southern University of Science and
Yi Wang
Technology
PI:EMAIL
ABSTRACT
Including JavaScript code from many different hosts is a popular
practice in developing web applications. For example, to include a
social plugin like the Facebook Like button, a web developer needs
to only include a script from facebook.net in her/his web page.
However, in a web browser, all the identifiers (i.e., variable names
and function names) in scripts loaded in the same frame share
a single global namespace. Therefore, a script can overwrite any
of the global variables and/or global functions defined in another
script, causing unexpected behavior.
In this work, we develop a browser-based dynamic analysis
framework, that monitors and records any writes to JavaScript
global variables and global functions. Our tool is able to cover
all the code executed in the run time. We detected 778 conflicts
across the Alexa top 1K websites. Our results show that global name
conflicts can indeed expose web applications to security risks.
CCS CONCEPTS
• Security and privacy → Browser security; Web application
security.
KEYWORDS
JavaScript; Name conflicts; Web applications
ACM Reference Format:
Mingxue Zhang, Wei Meng, and Yi Wang. 2019. POSTER: Finding JavaScript
Name Conflicts on the Web. In 2019 ACM SIGSAC Conference on Computer
and Communications Security (CCS ’19), November 11–15, 2019, London,
United Kingdom. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/
3319535.3363268
1 INTRODUCTION
It is very common to separate code of different functionalities into
multiple JavaScript files in today’s web applications. Including
JavaScript code from other hosts is also a very popular practice in
developing web applications, because a developer can reuse the
code in other third-party programming libraries and easily build
an application rich of functions.
While enhancing the functionality of a web application, the in-
cluded third-party scripts may cause unexpected behavior to the
developer’s own code. In the client-side JavaScript runtime environ-
ment, i.e., the web browser, there exists a single global namespace
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-6747-9/19/11.
https://doi.org/10.1145/3319535.3363268
for all identifiers (i.e., variable names and function names) in scripts
loaded in the same frame. Any variable or function defined in a
script’s own main scope is available to any other script running
in the same frame. This means that a script can not only directly
call global functions and read the values of global variables in an-
other script, but also overwrite any of the global variables and/or
global functions. Since JavaScript is a weakly typed programming
language, a script can even change the type of any global variable
without causing any exceptions or errors. Such kind of global name
conflicts can compromise the integrity of the developer’s own code
and the third-party library code. As a result, a script may take a
different branch, return an incorrect value, or simply crash, etc.
Even if a developer carefully examines the source code before
she/he includes a third-party script, which could be very difficult
because of code minimization or obfuscation, global name conflicts
cannot be avoided. The third-party code is hosted on a remote
server and can be modified by the script provider at any time with-
out notifications. Further, a script can dynamically include any
other scripts, which may also contain global names that conflict
with the existing ones. They might be prohibited by the Content-
Security Policy (CSP) [9]. However, it had been shown that CSP
had a very low adoption rate [10] because many websites need to
load additional scripts from almost any sources.
Prior research have studied potential global name conflicts be-
tween two JavaScript libraries. In [5], the authors tested if two
libraries would cause different behaviors when they were loaded
in different settings. They created a synthetic client for each of the
settings. Such clients can test the simple operations of the libraries.
They may not well represent the code in real applications that could
be much more complex. Further, only a limited number of libraries
were studied in a synthetic environment. The result cannot reflect
the conflicts in real applications, which may include more than
two libraries. Finally, the analysis was based on a selective record-
replay dynamic analysis framework [8] that instruments specified
source code. Thus, the tool does not cover any code that is loaded
dynamically.
In this work, we develop a browser-based dynamic analysis
framework that can monitor and log writes to JavaScript global
memory locations (i.e., variables and functions). In particular, we in-
strument JavaScript code dynamically by modifying the V8 JavaScript
engine of the Chromium browser. We insert our monitoring code
to log any operations that are related to memory write in a script.
This allows us to cover all code executed at the run time. With the
logs, we are able to detect three kinds of global name conflicts – 1)
variable value conflict, where two or more scripts write different
values of the same type to the same global variable; 2) function
definition conflict, where multiple scripts define a global function
with the same name; and 3) variable type conflict, where multiple
scripts assign values of different types to the same global variable.
We implemented a prototype of our framework based on the
version 71 of Chromium. We conducted a measurement study by
using the prototype to collect logs from the main pages of the Alexa
top 1,000 websites. In total, we detected 47 variable value conflicts
on 25 websites, 728 function definition conflicts on 85 websites, and
3 variable type conflicts on 2 websites.
2 DESIGN AND METHODOLOGY
We illustrate how our analysis framework works in this section.
We record each function definition in the V8 parser to detect func-
tion definition conflicts (§2.1). We dynamically instrument any
JavaScript code that is executed to log writes to a global variable
(§2.2). Our instrumentation dynamically infers the type of the write
target for each write operation. The logs allow us to detect conflict-
ing writes by different scripts to the same global functions or the
same global variables (§2.3).
2.1 Recording Global Function Definitions
The root cause of function definition conflicts is two or more scripts
define their functions using the same global function name. There-
fore, we need to find all functions that are explicitly defined in each
script. Whenever a global function is parsed by the V8 parser, we
log its name and the URL of its script. Especially, we log only the
ones with a non-empty function name. This allows us to detect
multiple explicit definitions of the same global function.
2.2 Recording Writes to Global Variables
We focus on four types of operations that JavaScript may perform
to write to a variable: 1) assignment statements; 2) object literal
expressions; 3) call expressions; and 4) return statements. When
any of such operations is executed, our framework uses the typeof
operator in JavaScript to infer the type of the write target. It also
records the value of the target if it is a primitive type variable, a
unique ID for each operation e.g., the ID of the script, and the ID of
the execution context (frame). Except for the above data, we collect
additional information for each kind of operations as we describe
next.
Assignment Statements. For each write target v in an assign-
ment statement, in order to tell if v is a global variable, our tool
checks all the declared variable names (including parameters, if the
current scope is a function scope) within the scope of the current
assignment statement. It continues searching in the outer scopes
until a match is found or it reaches the global scope. If no match is
found for a variable v or it is found only in the global scope, it is
considered as a global variable.
Object Literal Expressions. A script may change a property of a
global object instead of overwriting the entire variable. Therefore,
our tool needs to record writes to object properties. First, it logs
direct assignments to object properties such as o.p = 1. It also
records a special kind of writes to object properties – object literal
expressions. Specifically, for each object literal expression, e.g., {p1 :
e1, ...}, it logs a write to o.p1 where o is the temporary variable
representing the object literal. We do realize that our approach is
not comprehensive, which we will discuss in §4.
Call Expressions. An object can be passed by reference as an
argument to a parameter of a function and then be modified within
the function through the parameter variable. Therefore, we need to
keep track of the pass of objects in function calls. Specifically, for
each function call, our tool logs the function name and a list of argu-
ments that are passed into this function. When the program enters
into the function body (i.e., the callee), it records each parameter.
In this way, we can find a corresponding parameter record logged
in the callee for each of the argument record logged in the caller. If a