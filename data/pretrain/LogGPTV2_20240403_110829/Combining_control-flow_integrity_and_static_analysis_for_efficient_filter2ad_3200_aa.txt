title:Combining control-flow integrity and static analysis for efficient
and validated data sandboxing
author:Bin Zeng and
Gang Tan and
Greg Morrisett
Combining Control-Flow Integrity and Static Analysis for
Efﬁcient and Validated Data Sandboxing
Bin Zeng
Department of Computer
Science and Engineering
Lehigh University
PI:EMAIL
Gang Tan
Department of Computer
Science and Engineering
Lehigh University
PI:EMAIL
Greg Morrisett
School of Engineering and
Applied Sciences
Harvard University
PI:EMAIL
ABSTRACT
In many software attacks, inducing an illegal control-ﬂow
transfer in the target system is one common step. Control-
Flow Integrity (CFI [1]) protects a software system by en-
forcing a pre-determined control-ﬂow graph. In addition to
providing strong security, CFI enables static analysis on low-
level code. This paper evaluates whether CFI-enabled static
analysis can help build eﬃcient and validated data sandbox-
ing. Previous systems generally sandbox memory writes for
integrity, but avoid protecting conﬁdentiality due to the high
overhead of sandboxing memory reads. To reduce overhead,
we have implemented a series of optimizations that remove
sandboxing instructions if they are proven unnecessary by
static analysis. On top of CFI, our system adds only 2.7%
runtime overhead on SPECint2000 for sandboxing memory
writes and adds modest 19% for sandboxing both reads and
writes. We have also built a principled data-sandboxing ver-
iﬁer based on range analysis. The veriﬁer checks the safety
of the results of the optimizer, which removes the need to
trust the rewriter and optimizer. Our results show that the
combination of CFI and static analysis has the potential of
bringing down the cost of general inlined reference monitors,
while maintaining strong security.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection; D.2.4
[Software Engineering]: Software/Program Veriﬁcation;
D.3.4 [Programming Languages]: Processors
General Terms
Security, Veriﬁcation
Keywords
Control-Flow Integrity, Static Analysis, Binary Rewriting,
Inlined Reference Monitors
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
1.
INTRODUCTION
Software attacks often exploit vulnerabilities such as buﬀer
overﬂows and format-string handling errors that are com-
mon in large software systems. In many attacks, one essen-
tial step is to induce an illegal control transfer through, for
example, overwriting a return address or a function pointer.
The illegal control transfer might jump to new code injected
by attackers, as in code-injection attacks; it might jump to
code already in the target program, as in return-into-libc at-
tacks. The extreme case is Return-Oriented Programming
(ROP [9, 26]), which can induce any malicious behavior by
combining code snippets in the program with arbitrary con-
trol ﬂow.
In all these attacks, the expected control-ﬂow
graph of the target program is violated.
Control-Flow Integrity (CFI [1,2]) is a defensive technique
that can foil attacks based on illegal control transfers. A
program satisﬁes control-ﬂow integrity if it follows a pre-
determined control-ﬂow graph. The expected control-ﬂow
graph serves as a speciﬁcation of control transfers allowed
in the program. A software-based CFI implementation in-
serts runtime checks to enforce the speciﬁcation. The run-
time checks will catch and prevent illegal control transfers
attempted by attacks.
It is generally believed that CFI is a principled defense
mechanism against Return-Oriented Programming (ROP).
Previous research has shown that ad-hoc defenses fail to pre-
vent simple variants of ROP [9]. The inventors of ROP have
argued that research should instead focus on comprehensive
defenses such as CFI.
An attractive property of CFI is that it can be enforced on
almost all software, including legacy C and C++ code, and
even assembly code without breaking applications and with-
out requiring special hardware features (e.g., segment reg-
isters). Software-based Fault Isolation (SFI) [31] is another
policy that can be applied in a language-agnostic way. How-
ever, SFI only provides weak integrity for control-ﬂow and
as such, does not prevent return-into-libc and ROP attacks
completely. Furthermore, the lack of an enforced control-
ﬂow graph prevents the use of standard compiler techniques
for optimizing SFI enforcement mechanisms.
In contrast,
the enforced control-ﬂow graph of CFI supports standard
dataﬂow analysis and optimizations. Thus, in addition to
protecting applications from control-hijacking attacks, CFI
provides a basis for eﬃcient enforcement of any inlined ref-
erence monitor. In particular:
• Optimization. Optimizers can perform static analy-
sis to eliminate unnecessary security checks if they are
29statically proven unnecessary. This reduces the run-
time overhead of enforcing security.
• Veriﬁcation. Static analysis can be used to verify the
result of binary rewriting and optimizations. The ver-
iﬁcation checks whether the rewritten and optimized
code obeys the desired security policy, removing the
binary rewriter and the optimizer from the TCB.
The original work on CFI recognized the potential for
static analysis, but did not take advantage of it.
In this
paper, we investigate how CFI-enabled static analysis can
be used to cut the overheads of SFI-style data sandboxing.
Previous implementations of SFI either rely upon segment
registers to enforce data sandboxing, or else use software-
based techniques but only instrument memory writes due
to the high overhead of sandboxing reads. In contrast, we
consider software-only techniques, which are applicable to a
much wider class of architectures, and consider sandboxing
both memory writes as well as reads.
We highlight key contributions of the paper as follows:
• We describe a series of optimizations for eﬃcient data
sandboxing in Sec. 4. These optimizations utilize static
analysis including liveness analysis and range analysis
to eliminate unneeded security checks. Our implemen-
tation on x86-32 adds modest runtime overheads on
top of CFI (an average of 2.7% for write protection and
19% for read-and-write protection on SPECint2000).
• We propose to use range analysis as a principled way
to verify data-sandboxing optimizations in Sec. 5. A
single veriﬁer can verify all our implemented optimiza-
tions and beyond.
• Since CFI is used as the basis for static analysis, re-
ducing the overhead of the CFI enforcement itself is
beneﬁcial. In Sec. 6, we describe two simple optimiza-
tions for faster CFI. The optimizations cut the runtime
cost of CFI by more than half.
• Our ideas have been implemented in LLVM and fully
evaluated using benchmark programs. Sec. 7 describes
our implementation and evaluation.
2. RELATED WORK
We divide closely related work into three categories.
SFI. Software-based fault isolation (SFI, [12, 14, 21, 25, 28,
31, 34]) rewrites unsafe code to insert sandboxing instruc-
tions before memory and control-transfer instructions. The
inserted instructions prevent the code from accessing mem-
ory outside of a designated data region and executing in-
structions outside of a designated code region. For avoiding
high overhead, most SFI systems sandbox memory writes
but not memory reads. NaCl x86-32 [34] restrains memory
access through hardware segmentation that applies to mem-
ory reads as well as writes. Hardware segmentation, how-
ever, is unavailable on x86-64 and ARM. As a result, NaCl’s
implementations on these processors rely on SFI to sandbox
memory writes [25] (or both reads and writes with a sig-
niﬁcant performance penalty [6]). Our SFI support reduces
overhead through static analysis and in principle applies to
processors with or without segmentation.
Figure 1: The insuﬃciency of chunk-based control-
ﬂow integrity for static analysis.
One subtle requirement of SFI is that some form of control-
ﬂow integrity should be enforced so that inserted checks can-
not be bypassed. PittSFIeld [21] and NaCl [25, 34] adopt
the chunk-based control-ﬂow integrity. Code is divided into
atomic chunks of ﬁxed sizes such as 16 bytes. A computed
jump is restricted by runtime checks to target only begin-
nings of chunks. Checks before memory operations cannot
be bypassed as long as they are in the same chunk.
The chunk-based control-ﬂow integrity guarantees only
an imprecise control-ﬂow graph and is insuﬃcient for most
static analyses. To illustrate this point, we use loop opti-
mizations as an example. The control-ﬂow graph in Fig. 1
would contain a loop if those dotted edges do not exist.
In chunk-based control ﬂow integrity, a ret instruction can
jump to any chunk beginnings (because the instruction makes
a control transfer according to a value from the untrusted
stack). These control transfers are represented by dotted
edges in the ﬁgure. Therefore, basic blocks in the loop body
have to be broken into chunks. Worse, the control-ﬂow graph
in the ﬁgure is no longer a loop because by deﬁnition there
should be no edges from nodes outside of the loop to the
loop’s internal nodes. Consequently, loop optimizations can-
not be performed.
SFI traditionally provides coarse-grained data sandbox-
ing with respect to one big, contiguous data region. Recent
work [4, 5, 8] extends SFI to provide ﬁne-grained data in-
tegrity, which accommodates multiple data regions of var-
ious granularity (e.g., at the byte level). However, conﬁ-
dentiality is not supported. Furthermore, the implementa-
tion seems to rely upon re-compiling the source, whereas our
rewriter and veriﬁer work directly on the assembly language.
Consequently, the compiler is not in the TCB in our system.
Finally, their techniques do not work for multi-threaded ap-
plications; our system is thread safe since it assumes a con-
current attack model. We believe the general idea of using
static analysis for optimization and veriﬁcation should also
beneﬁt ﬁne-grained data sandboxing.
XFI. Extended Fault Isolation (XFI, [11]) is a closely re-
lated system in its approach. Similar to our system, XFI
builds on CFI and exploits the control-ﬂow graph for stronger
security and for performance. On the one hand, XFI’s goal
30is to provide a more comprehensive protection system for
loading untrusted code. For instance,
it also provides a
high-integrity stack for protecting return addresses. On the
other hand, our system explores more aggressive optimiza-
tions such as loop optimizations. The static analysis enables
our system to have more eﬃcient support for data sand-
boxing (more comparison with XFI will be in the following
sections).
Program shepherding.
Instead of static rewriting, pro-
gram shepherding [18] (as well as systems in [22, 24]) re-
lies on dynamic binary rewriting to enforce security. One
downside of dynamic rewriting is the whole dynamic opti-
mization and monitoring framework is in the TCB, whereas
only a veriﬁer needs to be trusted in static rewriting. Fur-
thermore, program shepherding relies on page protection for
memory protection; it cannot prevent untrusted application
code from reading outside its data region (e.g., the dynamic
rewriter’s own code and data regions are readable).
Static analysis on low-level code. Analyzing low-level
code such as assembly code is more diﬃcult than analyzing
source code due to the lack of structured information. De-
spite this diﬃculty, there has been plenty of research that
applies static analysis to low-level code for various purposes
(e.g., [7, 29, 33]). We use static analysis to reduce runtime
overhead of SFI-style data sandboxing. Compared with pre-
vious low-level code analysis, our static analysis is simpler
and more specialized. First, since our attack model (de-
scribed in Sec. 3) assumes data memory can change between
instructions, our static analysis only needs to track proper-
ties of registers. Second, some of our static analysis such as
range analysis is geared toward the purpose of optimizing
checks for guaranteeing safe access within data memory.
Code sandboxing. Also related is the general idea of sand-
boxing. SFI-style sandboxing, the topic of this paper, is a
particular form of sandboxing untrusted code. Isolating un-
trusted code in a trusted environment has long been a goal of
computer-security research. This line of work includes sys-
tems that monitor and restrict OS system calls [15–17, 23],
systems that isolate device drivers from kernel code [30],
systems that isolate web applications from browsers [10,34],
and systems that isolate native code from language virtual
machines [19, 27].
3. ATTACK MODEL AND SECURITY POL-
ICY
We adopt the CFI attack model.
It is both conceptu-
ally simple and realistic. It assumes separate code and data
regions for an untrusted program. The data region is not
executable.1 An attacker is then modeled as a thread that
runs in parallel with the program. The concurrent attacker
thread can overwrite any part of the data region, includ-
ing the stack, the heap, and global data. This model ef-
fectively assumes that contents in the data region can arbi-
trarily change between any two instructions in the program.
This rather pessimistic assumption captures real attack sce-
narios and is also amenable to formal analysis [2].
One implication of the attack model is that the code re-
1This assumption can be discharged either by the hardware
No-eXecute (NX) protection or by a pure software approach;
the software approach sandboxes indirect jumps so that con-
trol always stays in the code region.
gion and registers cannot be changed by the attacker di-
rectly. Note this assumption by itself does not prevent indi-
rect changes induced by the attacker to the code region and
registers. For instance, if the program loads into a register
some contents from the data region, the register can after-
wards hold any value supplied by the attacker as he/she con-
trols the data region. As another example, an unconstrained
memory write in the program could possibly change the code
region—one goal of data sandboxing is to prevent this from
happening by sandboxing memory writes.
Control-ﬂow security policy. A CFI policy for a pro-
gram is a graph whose nodes consist of addresses of basic
blocks, and whose edges connect control instructions (i.e.,
jumps and branches) to allowed destination basic blocks.
Within a procedure, this corresponds directly to a basic
control-ﬂow graph. For dynamic control ﬂow (i.e., a jump
through a register, a return, or other computed jumps), the
outgoing edges correspond to the possible addresses where
control is allowed to transfer.
Definition 1. Code C respects its CFI policy P if and
only if when executed, all control transfers in C respect the
graph P.
CFI policies are in essence NDFA’s or regular expressions
denoting sets of possible control traces.
In contrast, XFI
provides a richer language of policies (corresponding to push-
down automata), which can ensure that functions only re-
turn to the code that called them. CFI can only ensure that
functions return to some possible caller. On the other hand,
XFI requires a high-integrity stack to store return addresses
(which is broken by our strong attack model) and introduces
issues with setjmp, exceptions, continuations, and other un-
conventional control-transfers. Thus, CFI has the attrac-
tive property that it breaks fewer applications than XFI,
supports a strong, concurrent attack model, and provides
tighter bounds on control-ﬂow than SFI.
Data sandboxing policy. This policy dictates that any
memory access in the untrusted program must be within
the data region. Consequently, integrity and conﬁdentiality
of memory outside of the data region are ensured. Integrity
is usually more important for security than conﬁdentiality.
But in highly sensitive applications such as military appli-
cations, protecting conﬁdentiality can be as important.
We next formalize the data sandboxing policy. We assume
there is a large, contiguous region of data memory that un-
trusted code can read and write. We assume the data region
begins with the address DB (Data Begin) and ends with the
address DL (Data Limit). That is, the address range of the
data region is [DB, DL], inclusive. Following previous SFI
systems, we set up guard zones of size GSize before and after
the data region. The size of a guard zone can vary depend-
ing on the host policy. It is further assumed that memory
access to locations in guard zones can be eﬃciently trapped
(through page protection). Fig. 2 depicts the data region,
the guard zones, and relevant parameters.
Definition 2. A memory access is allowed if the address
is within the range [DB-GSize, DL+GSize].2
2The size of the memory access is irrelevant because of the
presence of the guard zones and the assumption that access
to guard zones is trapped. Furthermore, the policy in our
implementation also allows reading the code region because
the inserted CFI checks read IDs from the code region. This
is a special case and will be ignored in the rest of the paper.