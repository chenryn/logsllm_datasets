+----+-------------------------------  
+  1 | {"a": "test"}  
+  2 | {"a": "test", "key": "value"}  
+(2 rows)  
+  
+-- replace by object  
+update test_jsonb_subscript set test_json['a'] = '{"b": 1}'::jsonb;  
+select * from test_jsonb_subscript;  
+ id |            test_json              
+----+---------------------------------  
+  1 | {"a": {"b": 1}}  
+  2 | {"a": {"b": 1}, "key": "value"}  
+(2 rows)  
+  
+-- replace by array  
+update test_jsonb_subscript set test_json['a'] = '[1, 2, 3]'::jsonb;  
+select * from test_jsonb_subscript;  
+ id |            test_json               
+----+----------------------------------  
+  1 | {"a": [1, 2, 3]}  
+  2 | {"a": [1, 2, 3], "key": "value"}  
+(2 rows)  
+  
+-- use jsonb subscription in where clause  
+select * from test_jsonb_subscript where test_json['key'] = '"value"';  
+ id |            test_json               
+----+----------------------------------  
+  2 | {"a": [1, 2, 3], "key": "value"}  
+(1 row)  
+  
+select * from test_jsonb_subscript where test_json['key_doesnt_exists'] = '"value"';  
+ id | test_json   
+----+-----------  
+(0 rows)  
+  
+select * from test_jsonb_subscript where test_json['key'] = '"wrong_value"';  
+ id | test_json   
+----+-----------  
+(0 rows)  
+  
+-- NULL  
+update test_jsonb_subscript set test_json[NULL] = '1';  
+ERROR:  jsonb subscript in assignment must not be null  
+update test_jsonb_subscript set test_json['another_key'] = NULL;  
+select * from test_jsonb_subscript;  
+ id |                       test_json                         
+----+-------------------------------------------------------  
+  1 | {"a": [1, 2, 3], "another_key": null}  
+  2 | {"a": [1, 2, 3], "key": "value", "another_key": null}  
+(2 rows)  
+  
+-- NULL as jsonb source  
+insert into test_jsonb_subscript values (3, NULL);  
+update test_jsonb_subscript set test_json['a'] = '1' where id = 3;  
+select * from test_jsonb_subscript;  
+ id |                       test_json                         
+----+-------------------------------------------------------  
+  1 | {"a": [1, 2, 3], "another_key": null}  
+  2 | {"a": [1, 2, 3], "key": "value", "another_key": null}  
+  3 | {"a": 1}  
+(3 rows)  
+  
+update test_jsonb_subscript set test_json = NULL where id = 3;  
+update test_jsonb_subscript set test_json[0] = '1';  
+select * from test_jsonb_subscript;  
+ id |                           test_json                             
+----+---------------------------------------------------------------  
+  1 | {"0": 1, "a": [1, 2, 3], "another_key": null}  
+  2 | {"0": 1, "a": [1, 2, 3], "key": "value", "another_key": null}  
+  3 | [1]  
+(3 rows)  
+  
```  
```  
+-- Fill the gaps logic  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '[0]');  
+update test_jsonb_subscript set test_json[5] = '1';  
+select * from test_jsonb_subscript;  
+ id |           test_json              
+----+--------------------------------  
+  1 | [0, null, null, null, null, 1]  
+(1 row)  
+  
+update test_jsonb_subscript set test_json[-4] = '1';  
+select * from test_jsonb_subscript;  
+ id |          test_json            
+----+-----------------------------  
+  1 | [0, null, 1, null, null, 1]  
+(1 row)  
+  
+update test_jsonb_subscript set test_json[-8] = '1';  
+ERROR:  path element at position 1 is out of range: -8  
+select * from test_jsonb_subscript;  
+ id |          test_json            
+----+-----------------------------  
+  1 | [0, null, 1, null, null, 1]  
+(1 row)  
+  
+-- keep consistent values position  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '[]');  
+update test_jsonb_subscript set test_json[5] = '1';  
+select * from test_jsonb_subscript;  
+ id |             test_json               
+----+-----------------------------------  
+  1 | [null, null, null, null, null, 1]  
+(1 row)  
+  
+-- create the whole path  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '{}');  
+update test_jsonb_subscript set test_json['a'][0]['b'][0]['c'] = '1';  
+select * from test_jsonb_subscript;  
+ id |         test_json            
+----+----------------------------  
+  1 | {"a": [{"b": [{"c": 1}]}]}  
+(1 row)  
+  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '{}');  
+update test_jsonb_subscript set test_json['a'][2]['b'][2]['c'][2] = '1';  
+select * from test_jsonb_subscript;  
+ id |                            test_json                               
+----+------------------------------------------------------------------  
+  1 | {"a": [null, null, {"b": [null, null, {"c": [null, null, 1]}]}]}  
+(1 row)  
+  
+-- create the whole path with already existing keys  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '{"b": 1}');  
+update test_jsonb_subscript set test_json['a'][0] = '2';  
+select * from test_jsonb_subscript;  
+ id |     test_json        
+----+--------------------  
+  1 | {"a": [2], "b": 1}  
+(1 row)  
+  
+-- the start jsonb is an object, first subscript is treated as a key  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '{}');  
+update test_jsonb_subscript set test_json[0]['a'] = '1';  
+select * from test_jsonb_subscript;  
+ id |    test_json      
+----+-----------------  
+  1 | {"0": {"a": 1}}  
+(1 row)  
+  
+-- the start jsonb is an array  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '[]');  
+update test_jsonb_subscript set test_json[0]['a'] = '1';  
+update test_jsonb_subscript set test_json[2]['b'] = '2';  
+select * from test_jsonb_subscript;  
+ id |         test_json            
+----+----------------------------  
+  1 | [{"a": 1}, null, {"b": 2}]  
+(1 row)  
+  
+-- overwriting an existing path  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '{}');  
+update test_jsonb_subscript set test_json['a']['b'][1] = '1';  
+update test_jsonb_subscript set test_json['a']['b'][10] = '1';  
+select * from test_jsonb_subscript;  
+ id |                                 test_json                                    
+----+----------------------------------------------------------------------------  
+  1 | {"a": {"b": [null, 1, null, null, null, null, null, null, null, null, 1]}}  
+(1 row)  
+  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '[]');  
+update test_jsonb_subscript set test_json[0][0][0] = '1';  
+update test_jsonb_subscript set test_json[0][0][1] = '1';  
+select * from test_jsonb_subscript;  
+ id | test_json    
+----+------------  
+  1 | [[[1, 1]]]  
+(1 row)  
+  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '{}');  
+update test_jsonb_subscript set test_json['a']['b'][10] = '1';  
+update test_jsonb_subscript set test_json['a'][10][10] = '1';  
+select * from test_jsonb_subscript;  
+ id |                                                                      test_json                                                                         
+----+------------------------------------------------------------------------------------------------------------------------------------------------------  
+  1 | {"a": {"b": [null, null, null, null, null, null, null, null, null, null, 1], "10": [null, null, null, null, null, null, null, null, null, null, 1]}}  
+(1 row)  
+  
+-- an empty sub element  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '{"a": {}}');  
+update test_jsonb_subscript set test_json['a']['b']['c'][2] = '1';  
+select * from test_jsonb_subscript;  
+ id |              test_json                 
+----+--------------------------------------  
+  1 | {"a": {"b": {"c": [null, null, 1]}}}  
+(1 row)  
+  
+delete from test_jsonb_subscript;  
+insert into test_jsonb_subscript values (1, '{"a": []}');  
+update test_jsonb_subscript set test_json['a'][1]['c'][2] = '1';  
+select * from test_jsonb_subscript;  
+ id |               test_json                 
+----+---------------------------------------  
+  1 | {"a": [null, {"c": [null, null, 1]}]}  
+(1 row)  
+  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")