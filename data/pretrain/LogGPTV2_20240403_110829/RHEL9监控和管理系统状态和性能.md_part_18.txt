2.  创建一个新目录来保存 [**TuneD**]{.strong} 配置集：
    ``` screen
    # mkdir /etc/tuned/my-profile
    ```
3.  查找所选块设备系统唯一标识符：
    ``` screen
    $ udevadm info --query=property --name=/dev/device | grep -E '(WWN|SERIAL)'
    ID_WWN=0x5002538d00000000_
    ID_SERIAL=Generic-_SD_MMC_20120501030900000-0:0
    ID_SERIAL_SHORT=20120501030900000
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    本例中的命令将返回以 World Wide
    Name(WWN)或与指定块设备关联的序列号的所有值。虽然最好使用
    WWN，但给定设备始终不能使用 WWN，但 example
    命令返回的任何值都可以接受用作 [*device system unique
    ID*]{.emphasis}。
    :::
4.  创建 `/etc/tuned/my-profile/tuned.conf`{.literal}
    配置文件。在该文件中设置以下选项：
    ::: orderedlist
    1.  可选：包括一个现有的配置集：
        ``` screen
        [main]
        include=existing-profile
        ```
    2.  为与 WWN 标识符匹配的设备设置所选磁盘调度程序：
        ``` screen
        [disk]
        devices_udev_regex=IDNAME=device system unique id
        elevator=selected-scheduler
        ```
        在这里：
        ::: itemizedlist
        -   使用要使用的标识符的名称替换 [*IDNAME*]{.emphasis} （如
            `ID_WWN`{.literal}）。
        -   将 [*device system unique id*]{.emphasis}
            替换为所选标识符的值（如 `0x5002538d00000000`{.literal}）。
            要匹配 `devices_udev_regex`{.literal}
            选项中的多个设备，将标识符放在括号中，并使用垂直栏来分离它们：
            ``` screen
            devices_udev_regex=(ID_WWN=0x5002538d00000000)|(ID_WWN=0x1234567800000000)
            ```
        :::
    :::
5.  启用您的配置集：
    ``` screen
    # tuned-adm profile my-profile
    ```
:::
::: orderedlist
**验证步骤**
1.  验证 TuneD 配置集是否活跃并应用：
    ``` screen
    $ tuned-adm active
    Current active profile: my-profile
    ```
    ``` screen
    $ tuned-adm verify
    Verification succeeded, current system settings match the preset profile.
    See tuned log file ('/var/log/tuned/tuned.log') for details.
    ```
2.  读取 `/sys/block/设备/queue/scheduler`{.literal} 文件的内容：
    ``` screen
    # cat /sys/block/device/queue/scheduler
    [mq-deadline] kyber bfq none
    ```
    在文件名中，将 [*device*]{.emphasis} 替换为块设备名称，如
    `sdc`{.literal}。
    活跃的调度程序列在方括号中(`[]`{.literal})。
:::
::: itemizedlist
**其他资源**
-   [自定义 TuneD
    配置集](#customizing-tuned-profiles_monitoring-and-managing-system-status-and-performance.html "第 2 章 自定义 TuneD 配置集"){.link}。
:::
:::
::: section
::: titlepage
# []{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html#setting-the-disk-scheduler-using-udev-rules_setting-the-disk-scheduler}使用 udev 规则设置磁盘调度程序 {.title}
:::
此流程使用 `udev`{.literal}
规则为特定块设备设置给定磁盘调度程序。这个设置会在系统重启后保留。
在以下命令和配置中替换：
::: itemizedlist
-   带有块设备名称的 [*device*]{.emphasis}，如 `sdf`{.literal}
-   带有您要为该设备设置的磁盘调度程序的
    [*selected-scheduler*]{.emphasis}，例如 `bfq`{.literal}
:::
::: orderedlist
**步骤**
1.  查找块设备系统唯一标识符：
    ``` screen
    $ udevadm info --name=/dev/device | grep -E '(WWN|SERIAL)'
    E: ID_WWN=0x5002538d00000000
    E: ID_SERIAL=Generic-_SD_MMC_20120501030900000-0:0
    E: ID_SERIAL_SHORT=20120501030900000
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    本例中的命令将返回以 World Wide
    Name(WWN)或与指定块设备关联的序列号的所有值。虽然最好使用
    WWN，但给定设备始终不能使用 WWN，但 example
    命令返回的任何值都可以接受用作 [*device system unique
    ID*]{.emphasis}。
    :::
2.  配置 `udev`{.literal} 规则。使用以下内容创建
    `/etc/udev/rules.d/99-scheduler.rules`{.literal} 文件：
    ``` screen
    ACTION=="add|change", SUBSYSTEM=="block", ENV{IDNAME}=="device system unique id", ATTR{queue/scheduler}="selected-scheduler"
    ```
    在这里：
    ::: itemizedlist
    -   使用要使用的标识符的名称替换 [*IDNAME*]{.emphasis} （如
        `ID_WWN`{.literal}）。
    -   将 [*device system unique id*]{.emphasis}
        替换为所选标识符的值（如 `0x5002538d00000000`{.literal}）。
    :::
3.  重新载入 `udev`{.literal} 规则：
    ``` screen
    # udevadm control --reload-rules
    ```
4.  应用调度程序配置：
    ``` screen
    # udevadm trigger --type=devices --action=change
    ```
:::
::: itemizedlist
**验证步骤**
-   验证活跃的调度程序：
    ``` screen
    # cat /sys/block/device/queue/scheduler
    ```
:::
:::
::: section
::: titlepage
# []{#setting-the-disk-scheduler_monitoring-and-managing-system-status-and-performance.html#temporarily-setting-a-scheduler-for-a-specific-disk_setting-the-disk-scheduler}为特定磁盘临时设置调度程序 {.title}
:::
此流程为特定块设备设置给定磁盘调度程序。系统重启后该设置不会保留。
::: itemizedlist
**步骤**
-   将所选调度程序的名称写入
    `/sys/block/device/queue/scheduler`{.literal} 文件：
    ``` screen
    # echo selected-scheduler > /sys/block/device/queue/scheduler
    ```
    在文件名中，将 [*device*]{.emphasis} 替换为块设备名称，如
    `sdc`{.literal}。
:::
::: itemizedlist
**验证步骤**
-   验证调度程序是否在该设备中活跃：
    ``` screen
    # cat /sys/block/device/queue/scheduler
    ```
:::
:::
:::
[]{#assembly_tuning-the-performance-of-a-samba-server_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#assembly_tuning-the-performance-of-a-samba-server_monitoring-and-managing-system-status-and-performance.html#assembly_tuning-the-performance-of-a-samba-server_monitoring-and-managing-system-status-and-performance}第 10 章 调整 Samba 服务器的性能 {.title}
:::
本章描述了在某些情况下，什么设置可以提高 Samba
的性能，以及哪些设置可能会对性能造成负面影响。
本节的部分内容来自在 Samba Wiki 中发布的 [Performance
Tuning](https://wiki.samba.org/index.php/Performance_Tuning){.link}
文档。许可证：[CC BY
4.0](https://creativecommons.org/licenses/by/4.0/){.link}.作者和贡献者：参阅
Wiki 页面上的
[history](https://wiki.samba.org/index.php?title=Performance_Tuning&action=history){.link}
选项卡。
::: itemizedlist
**先决条件**
-   Samba 被设置为文件或打印服务器
:::
::: section
::: titlepage
# []{#assembly_tuning-the-performance-of-a-samba-server_monitoring-and-managing-system-status-and-performance.html#proc_setting-the-smb-protocol-version_assembly_tuning-the-performance-of-a-samba-server}设置 SMB 协议版本 {.title}
:::
每个新的 SMB 版本都添加了特性并提高了协议的性能。最新的 Windows 和
Windows 服务器操作系统始终支持最新的协议版本。如果 Samba
也使用最新的协议版本，那么连接到 Samba 的 Windows
客户端将从性能改进中受益。在 Samba 中，server max
protocol的默认值被设置为最新支持的稳定的 SMB 协议版本。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
要始终拥有最新的稳定的 SMB 协议版本，请不要设置
`server max protocol`{.literal} 参数。如果手动设置参数，则需要修改 SMB
协议的每个新版本的设置，以便启用最新的协议版本。
:::
以下流程解释了如何对 `server max protocol`{.literal} 参数使用默认值。
::: orderedlist
**步骤**
1.  从 `/etc/samba/smb.conf`{.literal} 文件的 `[global]`{.literal}
    部分中删除 `server max protocol`{.literal} 参数。
2.  重新载入 Samba 配置
    ``` literallayout
    # smbcontrol all reload-config
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_tuning-the-performance-of-a-samba-server_monitoring-and-managing-system-status-and-performance.html#proc_tuning-shares-with-directories-that-contain-a-large-number-of-files_assembly_tuning-the-performance-of-a-samba-server}与包含大量文件的目录调整共享 {.title}
:::
Linux
支持区分大小写的文件名。因此，在搜索或访问文件时，Samba需要针对大小写文件名来扫描目录。您可以将共享配置为只以小写或大写来创建新文件，这可以提高性能。
::: itemizedlist
**先决条件**
-   Samba 配置为文件服务器
:::
::: orderedlist
**步骤**
1.  将共享上的所有文件重命名为小写。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    使用这个过程中的设置，名称不为小写的文件将不再显示。
    :::
2.  在共享部分中设置以下参数：
    ``` literallayout
    case sensitive = true
    default case = lower
    preserve case = no
    short preserve case = no
    ```
    有关参数的详情，请查看 `smb.conf(5)`{.literal} 手册页 中的描述。
3.  验证`/etc/samba/smb.conf`{.literal}文件：
    ``` literallayout
    # testparm
    ```
4.  重新载入 Samba 配置：
    ``` literallayout
    # smbcontrol all reload-config
    ```
:::
应用了这些设置后，此共享上所有新创建的文件的名称都使用小写。由于这些设置，Samba
不再需要针对大小写来扫描目录，这样可以提高性能。
:::
::: section
::: titlepage
# []{#assembly_tuning-the-performance-of-a-samba-server_monitoring-and-managing-system-status-and-performance.html#con_settings-that-can-have-a-negative-performance-impact_assembly_tuning-the-performance-of-a-samba-server}可能会对性能造成负面影响的设置 {.title}
:::
默认情况下，Red Hat Enterprise Linux
中的内核会根据高网络性能进行了微调。例如，内核对缓冲区大小使用自动轮询机制。在
`/etc/samba/smb.conf`{.literal} 文件中设置 `socket options`{.literal}