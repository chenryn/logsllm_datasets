### Emulating Vulnerabilities of Different Operating Systems and Architectures

Nepenthes is designed to emulate the vulnerabilities of various operating systems and computer architectures on a single machine during a single attack. For example, an emulation can mimic the generic parts of a network conversation and, based on the network traffic, decide whether to present itself as a Linux or a Win32 machine. This capability enhances scalability. Our experiments demonstrate that Nepenthes can emulate more than 16,000 different IP addresses on a single physical machine, further improving its scalability. Additionally, Nepenthes' flexible reporting mechanisms allow for hierarchical deployment, which increases scalability even more. The modular design of Nepenthes also supports automation by enabling the addition of specialized analysis and reporting modules.

Using the Nepenthes platform, we can collect malware that is currently spreading in the wild on a large scale. By focusing on active malware, we can perform vulnerability assessments based on live data. The collected malware samples also enable us to evaluate the effectiveness of current anti-virus engines. Furthermore, large-scale collection allows us to detect new trends and attack patterns. We will present more detailed results in Section 3.

In summary, Nepenthes offers a unique combination of expressiveness, scalability, and flexibility in honeypot-based research.

### Related Work

Previous research has focused on large-scale measurements of malicious network traffic. Approaches such as the network telescope [11] and darknets [4] passively collect information about the network status and infer additional details, such as the number of Distributed Denial-of-Service (DDoS) attacks [12]. However, these methods do not respond to packets, limiting their ability to gather detailed information about full attacks.

Slightly more expressive approaches, like the Internet Motion Sensor [2], differentiate services by responding to TCP SYN packets with TCP SYN-ACK packets. Despite this, their expressiveness remains limited, and additional extensions are required to learn more about spreading malware.

Honeyd [14] is a well-known low-interaction honeypot that creates virtual hosts on a network, simulating the TCP/IP stack of various operating systems and running configurable services. While Honeyd can simulate complex network topologies, including dedicated routes and routers, and can be configured to feign latency and packet loss, its expressiveness is limited from a network perspective. Nepenthes, on the other hand, can be used as a subsystem within Honeyd, extending its capabilities and allowing for automated downloading of malware.

The Collapsar platform [9] is a virtual-machine-based architecture for network attack detention. It hosts and manages several high-interaction virtual honeypots in a local dedicated network, redirecting malicious traffic from other networks to a central location. This setup enables the creation of a honeyfarm. Nepenthes can also be deployed as a honeyfarm system by redirecting traffic from remote locations to a central Nepenthes server.

Internet Sink (iSink) [23] and HoneyTank [19] are systems that passively monitor network traffic and can actively respond to incoming connection requests. However, their stateless design limits their expressiveness. In contrast, Nepenthes uses a finite state machine to emulate vulnerabilities, allowing for more detailed information collection.

Potemkin [20] is the closest related work, using virtual machines, aggressive memory sharing, and late binding of resources to emulate over 64,000 high-interaction honeypots on ten physical servers. However, Potemkin has several drawbacks compared to Nepenthes. Each Potemkin honeypot must be a fixed system in a fixed configuration, whereas Nepenthes' vulnerability modules offer greater flexibility. Additionally, Nepenthes' scalability is at least as good as Potemkin's, and the source code for Nepenthes is available under the GNU General Public License, ensuring stability and verifiability.

### Roadmap

This paper is structured as follows: Section 2 provides a detailed introduction to the Nepenthes platform, and Section 3 presents our results, focusing on the effectiveness of the approach. Section 4 outlines future work, and Section 5 concludes the paper.

### The Nepenthes Platform

#### Introduction

In this section, we introduce the Nepenthes platform in detail. We show how the concept of low-interaction honeypots can be extended to effectively collect malware and learn more about attack patterns. Additionally, we present a technique for distributed deployment, similar to the concepts introduced by Collapsar [9].

#### Architecture

Nepenthes is designed with a flexible and modularized architecture. The core daemon handles the network interface and coordinates the actions of other modules. These modules include:

- **Vulnerability Modules**: Emulate the vulnerable parts of network services.
- **Shellcode Parsing Modules**: Analyze the payload received by vulnerability modules, extracting information about the propagating malware.
- **Fetch Modules**: Use the extracted information to download the malware from a remote location.
- **Submission Modules**: Handle the downloaded malware, such as saving it to a hard disk, storing it in a database, or sending it to anti-virus vendors.
- **Logging Modules**: Log information about the emulation process and help in identifying patterns in the collected data.

Other important components include shell emulation, a virtual filesystem for each emulated shell, geolocation modules, sniffer modules, and asynchronous DNS resolution.

#### Deployment

Nepenthes offers a flexible design that allows for various setups. The simplest setup is a local Nepenthes sensor in a LAN, collecting and storing information about malicious traffic. More advanced setups include distributed and hierarchical deployments, as well as re-routing traffic via a VPN tunnel, similar to the Collapsar project [9].

#### Capturing New Exploits

Nepenthes can detect and respond to zero-day (0day) attacks. The portwatch and bridging modules track network traffic and help analyze new exploits. When a new exploit targets the platform, Nepenthes can switch to a real honeypot or a specialized system for dynamic taint analysis, such as Argos [13]. This approach allows for the efficient handling of known exploits and the capture of new threats.

#### Limitations

While Nepenthes is highly effective, it has some limitations. It primarily collects malware that autonomously spreads by scanning for and exploiting vulnerable systems. Client-side honeypots like HoneyMonkeys [22] or Kathy Wangâ€™s honeyclient [21] are needed to detect browser exploits. Additionally, malware that uses hitlists to find vulnerable systems is difficult to detect, and remote detection of Nepenthes is possible due to its unique characteristics.

### Conclusion

Nepenthes is a powerful and flexible platform for collecting and analyzing malware. Its modular design, scalability, and ability to handle both known and unknown threats make it a valuable tool in the field of honeypot-based research.