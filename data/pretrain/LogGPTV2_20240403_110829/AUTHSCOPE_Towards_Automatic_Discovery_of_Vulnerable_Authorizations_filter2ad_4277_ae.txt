3
3
1
1
2
1
1
2
5
1
1
1
2
1
1
5
5
1
2
1
Category
User E-Proile
User Physical-Proile
User Secrets
App Speciic Private Data
Detailed Privacy Type
01 Email, 02 User ID, 03 Registration Date, 04 IP Address, 05 Last Login Date, 06 Last Update Date
07 Real Name, 08 Birthday, 09 Geo-location, 10 Home Address, 11 Phone Number, 12 Body Information
13 Token, 14 Password, 15 Pass Code
16 In App Messages, 17 Shopping History, 18 Book Shelf, 19 Favorites or Subscription, 20 Account Balance
21 Contacts Information, 22 Payment Information, 23 Private Activity Information
Table 4: User Privacy
Credential User
E-Proile
01 02
01 02 03 04 01 06
01 02
01 02
01 02
01 02
01
01 02 03
01 02
01 02
01 02
User
Physical-Proile
07 08 01 10 11
07 01 09 10 11
07
01 01 01 01 11
07 01 09 10 11
07 01 01 10
07 08 01 01 01 12
07 08 01 10
07 01 09 10 11
07
APP
com.***.e***
com.***.k***
com.***.w***
com.g***.c***
com.***.m***
com.***.h***
com.***.c***
com.***.u***
com.m***
com.***.***.c***
com.***.a***
com.b***
com.***.a***
com.***.j***
com.***.d***
cl.***.***.i***
in.v***
com.mediaingea.uptodown.lite
com.t***
cz.***.n***
Statistics
Version
2.2
2.0.11
1.0.5
2.4.1
1.6.8
2.5.6.0
2.6.1
2.03
7.3.0
7.5.5v
3.09
2.0.4
2.3.2
2.7.4
2.4.2
2.1.0
4.4.5.2
3.18
1.4.0
4.8
Type
N 01 01
01 E 01
01 01 F
01 E 01
N 01 01
01 E 01
01 01 F
N 01 01
N 01 01
01 01 F
01 01 F
N 01 01
N 01 01
01 01 F
01 E 01
N 01 01
N 01 01
01 01 F
01 01 F
01 01 F
8 4 8
User
Secrets
13 14
13
13
01 01 15
13
13
13
13
13
13
13
App Speciic
Private Data
01 01 18
01 17 01 19
16 01 01 19 01 21
01 17 01 01 20
16 01 01 01 20 01 22
16 01 01 19
01 01 01 19
16 01 01 19
16 01 01 19 20
01 01 01 19 01 01 22
16 01 01 19
01 01 01 19
16 01 01 19
16 01 01 19
01 01 01 01 01 01 01 23
01 01 01 01 20
16 01 01 19 01 21
16 01 01 19
16 01 01 01 01 01 01 23
01 01 01 01 01 01 01 23
11 02 01 13 04 02 02 03
01 01 03 04 05
01 02 03
01 02 03
01 02
07 08 09
07
07 01 09
07 08 09
07 08
01 02
01 02
01 02
14 16 05 02 01 01
01 01 01 10 11
07
15 06 06 07 06 01
13
13
13
13 01 01
Table 5: Vulnerability Details for Top Tested App in Each Category, where N denotes Numeric values, E denotes Emails,
and F denotes Facebook IDs.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA809for the tested app, the eighth column is the number of public in-
terface identiied, and the last column is the number of vulnerable
interface discovered for the tested app.
We can notice from Table 3 that some apps have many activities,
which means it would be really hard to use blind dynamic analysis
tools such as Monkey [7] to explore all of these activities. Also, all
apps have hundreds of request messages. his is actually because
many of the messages are related to Facebook login.
In our ex-
periment, we found for each Facebook login, Facebook library will
generate hundreds of request messages to static.xx.fbcdn.net to
retrieve js iles.
Also, the last column shows that 9 apps have more than one
(from 2 to 5) vulnerable authorization interfaces at the server side,
and 13 apps also contain several (from 1 to 7) public interfaces.
Interestingly, we also ind if the atack surface is either email ad-
dress or FID, then there will be just one vulnerable interface (and
this interface is usually the one serves the irst request message
right ater authenticated with Facebook). If the atack surface is
a predictable number, then there are likely more than one vulner-
able interfaces. his is because likely all other requests also use
the predictable number, which makes their corresponding server
interfaces all vulnerable.
6 SECURITY ANALYSIS
6.1 Systematized Analysis
Next, we would like to understand what kind of data leakage the
vulnerable access control implementation can cause and how se-
vere they are. To this end, we have manually examined the 20
vulnerable app servers for the app presented in Table 3. To sys-
tematize the leakage, we irst classify the leaked data into four
categories as shown in Table 4 (based on our best understanding)
including user e-proile such as her email address, service reg-
istration date, IP address, last login date, last update date; user
physical proile such as full name, birthday, geo-location, home
address, phone number, and body information such as weight and
height; user secrets such as access token, user password (either
plaintext or hashed), app pass code; and app speciic private data
such as shopping history, book shelf, favorites, payment informa-
tion, account balance, etc. Based on these classiication, we looked
into each of the vulnerable service interface and examined their
data leakage. he detailed result for these 20 vulnerable servers is
presented in Table 5.
From the 3rd column of Table 5, we notice that 8 out of 20
vulnerable servers just use predictable numbers to access a user’s
private information (e.g., for app cl.***.***.i*** and we will just
call it I app, our user Alice has a UID 673436 and Bob has 673491
as presented in Figure 6), 4 use email addresses, and 8 use FIDs.
Also, we can observe that various user private data can be leaked
from the vulnerable servers. he top leaked data includes UID (16),
email address (14), and security token (13). Note that these tokens
actually belong to Bob, but can be retrieved by Alice. Meanwhile,
surprisingly, some of the servers even leak user’s password, as
shown in Figure 7. his is astonishing, since a user’s password
should never be leaked to a client regardless of the query.
In short, given such easily predictable numbers and potentially
public available email addresses and FIDs without any further au-
thorization checks, it makes an atacker trivially crawl all user’s
00 {
01  ...
02  "response":{
03   "user":{
04    "idnum":false,
05    "name":"Bob",
06    "lastname":"Ccs",
07    "birthday":"1990-04-26",
08    "gender":"M",
09    "email":"PI:EMAIL",
10    "type":"EMAIL",
11    "firstlogin":"1",
12    "country":{
13     "id":"10",
14     "name":"United States",
15     ...
16    },
17    "post_on_activities":"disabled",
18    "bananas_count":0,
19    "id":"673491",
20    "fbid_number":"106611716575863",
21    "current_latitude":”30.9863214",
22    "current_longitude":”-86.7501116",
23    "bananas_history":"https:\/\/profile.*******.com\/bananas\
/store\/673491\/?accesstoken=debda35ccd92f4b8e2e06f0bff3b6e49279
a557d&latitude=30.9863214&longitude=-86.7501116&lang=",
24    ...
25   }
26  }
27 }
Figure 6: Alice Read Bob’s Account Information in
app I.
private data from the victim servers. In our experiment setings,
an adversary can possibly get up to 61 million mobile users pri-
vate record according to the total number of downloads for all the
vulnerable apps.
6.2 Case Studies
As demonstrated in our systematized analysis, vulnerable autho-
rization can easily lead to user private data leakage. To understand
this threat more concretely, in the following, we would like to
perform further analysis of two mobile apps, namely the I app
and com.***.k*** (we just call it K) app from Table 3, to show
how they could leak user’s privacy sensitive data including user’s
secrets. hese two case studies require detailed knowledge of the
mobile apps and were conducted manually.
Sensitive Data Leakage. We use I app as an example to illus-
trate this atack. I app is a very popular app in Google Play with
100, 000 to 500, 000 downloads. his app can provide discount in-
formation for shopping. During our test, AuthScope intercepted
the Alice’s request which asks for personal information, and re-
placed Alice’s account ID or UID (673436) with Bob’s UID (673491)
for a new request. Figure 6 shows a portion of the response mes-
sage. We can see clearly that it leaks a lot of Bob’s sensitive infor-
mation, including his birthday, gender, email, Facebook ID, current
location and balance history.
For this app and so many other alike apps, the atacker only
needs to get the UID of a user to perform the atack. Moreover, to
get other’s UID is relatively straightforward. In this app, the UID
is generated incrementally, not randomly. Given such a 6-bit UID
and its install numbers, statically, an atacker can easily enumer-
ate other’s UID. Since this app has close to 500, 000 installs, an
adversary can easily retrieve 500, 000 user’s private information.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA81000 {
01  "pk_i_id": "163126",
02  "dt_reg_date": "2017-04-30 23:21:59",
03  "dt_mod_date": "2017- 04-30 23:36:58",
04  "s_name": "Bob Ccs",
05  "s_username": "163126",
06  "s_password": "7c4a8d09ca3762af61e59520943dc26494f8941b",
07  "s_secret": "6stgMaAb",
08  "s_email": "PI:EMAIL",
09  "s_website": "bob.ccs\/index.html",
10  "s_phone_mobile": "4695855213",
11  "s_pass_ip": null,
12  "fk_c_country_code": null,
13  "s_country": "Tanzania",
14  "s_address": "15246 Sni Rd. APT 252 Tanzania",
15  "fk_i_region_id": "17",
16  "s_region": "Mara",
17  "d_coord_lat": null,
18  "d_coord_long": null,
19  "b_company": "0",
20  "i_items": "1",
21  "i_comments": "0",
22  "dt_access_date": "2017-04-30 23:46:05",
23  "s_access_ip": "",
24  "b_prefer_phone": "1",
25  "s_dialing_code": "+255",
26  "fk_i_category_id": "22",