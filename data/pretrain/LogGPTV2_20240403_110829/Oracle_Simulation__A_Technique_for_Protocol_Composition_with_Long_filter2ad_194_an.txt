in(enc(sign, oldk))
out(enc(sign, k))
0.
F orwardAgent(skP, k) :=
in(enc(sid, k))
out(enc(sign(, skP ), k))
SSHF orward :=
P (skP, pk(skS)); F orwardAgent(skP, k)
(cid:107)SF orward(skS, pk(skP ))
(cid:107)S(skS, pk(skP )); P Distant(k, pk(skS))
Figure 14: SSH key exchange with agent forwarding
P 0(a, skP, pk(skS)) :=
out(ga);
in()
let k = Ba in
0.
S0(b, skS, pk(skP )) :=
in(A);
let k = Ab in
let sid = hash() in
out(gb)
P 1(a, skP, pk(skS), B, k) :=
S1(b, skS, pk(skP ), sid, k) :=
in()
let sid = hash() in
if checksign(sign, pk(skS))
∧ getmess(sign) = sid then
out(enc(sign(sid, skP ), k))
0.
out()
in(enc(sign, k))
if checksign(sign, pk(skP ))
∧ getmess(sign) = sid then
0..
Figure 15: Divided SSH key exchange
71
and the second one the authentication:
P 0(a, skP, pk(skS)); if ¬((cid:87)
(cid:107)S0(b, skS, pk(skP )); if ¬((cid:87)
P 0(a, skP, pk(skS)); if ¬((cid:87)
∼=O
(cid:107)S0(b, skS, pk(skP )); if ¬((cid:87)
i B = gbi) then P 1(a, skP, pk(skS), B, k); out(k)
i A = gai) then S1(b, skS, pk(skP ), sid, k); out(k)
i B = gbi) then P 1(a, skP, pk(skS), B, k); bad
i A = gai) then S1(b, skS, pk(skP ), sid, k); bad
D.3 Proof of real of random
We start by proving that:
Ax |= P 0(a, skP, pk(skS)); out(k)(cid:107)S0(b, skS, pk(skP )); out(k) ∼
P 0(a, skP, pk(skS)); [if B = gb then out(k(cid:48)) else if B = gbi then out(k)]
(cid:107)S0(b, skS, pk(skP ))[if A = ga then out(k(cid:48)) else if A = gai then out(k)]
For this proof, we may use Ax = DDHs, where s does not contain a and b.
We denote φj
the i-eme term of the j-eme folding in the left game, and ψj
i
i
game. After splitting over each possible folding of actions, we have the sequence of terms:
for the right
• φ0 = ga; φ1 = φ0, gb, g0(φ0)b; φ2 = φ1, g1(φ1)a
• φ1
• ψ0 = φ0; ψ1 = ψ0, gb, if g0(φ0) = ga then k(cid:48) else if g0(φ0) = gai then g0(φ0)b; ψ2 =
1 = φ0, g0(φ0)a, ; φ1
1, gb, g1(φ1
2 = φ1
1)b
ψ1, if g1(ψ1) = gb then k(cid:48) else if g1(ψ1) = gbi then g1(ψ1)a
1 = ψ0, if g0(φ0) = gb then k(cid:48) else if g0(φ0) = gbi then g0(ψ0)a; ψ1
ga then k(cid:48) else if g1(ψ1
1) = gai then g1(ψ1
1)b
• ψ1
And we have to prove that Ax |= φ2 ∼ ψ2 and Ax |= φ1
2 ∼ ψ1
2
.
2 = ψ1
1, gb, if g1(ψ1
1) =
D.3.1 Proof of Ax |= φ2 ∼ ψ2
We apply the EQ that are true in the if branches, and we perform a case study on the ﬁrst
conditional of the sequence, yielding the four terms:
1 = ψ0, gb, EQ(g0(φ0), ga), k(cid:48)
1 = ψ0, gb, EQ(g0(φ0)), gai), gaib
1 = φ0, gb, EQ(g0(φ0), ga), gab
1 = φ0, gb, EQ(g0(φ0), gai), gaib
• ψ(cid:48)
• ψ(cid:48)(cid:48)
• φ(cid:48)
• φ(cid:48)(cid:48)
With DDH , we can replace gab with k(cid:48), and with transitivity, we have that
Ax |= φ(cid:48)
1 ∼ ψ(cid:48)
1
.
Moreover, we trivially have
The we also apply the EQand perform another case study on the second conditional,
yielding eight terms:
Ax |= φ(cid:48)(cid:48)
1 ∼ ψ(cid:48)(cid:48)
1
72
1), gb), k(cid:48)
1), gbi), gabi
1 ), gb), k(cid:48)
1 ), gbi), gabi
• ψ(cid:48)
• ψ(cid:48)(cid:48)
• ψ(cid:48)(cid:48)(cid:48)
• ψ(cid:48)(cid:48)(cid:48)(cid:48)
• φ(cid:48)
• φ(cid:48)(cid:48)
• φ(cid:48)(cid:48)(cid:48)
• φ(cid:48)(cid:48)(cid:48)(cid:48)
2 = ψ(cid:48)
2 = ψ(cid:48)
2 = ψ(cid:48)(cid:48)
2 = ψ(cid:48)(cid:48)
2 = φ(cid:48)
2 = φ(cid:48)
2 = φ(cid:48)(cid:48)
2 = φ(cid:48)(cid:48)
1, EQ(g1(ψ(cid:48)
1, EQ(g1(ψ(cid:48)
1 , EQ(g1(ψ(cid:48)(cid:48)
1 , EQ(g1(ψ(cid:48)(cid:48)
1, EQ(g1(φ(cid:48)
1, EQ(g1(φ(cid:48)
1, EQ(g1(φ(cid:48)(cid:48)
1, EQ(g1(φ(cid:48)(cid:48)
1), gb), gab
1), gbi), gabi
1), gb), gab
1), gbi), gabi
2. φ(cid:48)(cid:48)
2 ∼ ψ(cid:48)
From now on, we omit Ax. We then prove the four equivalence required to conclude:
1. φ(cid:48)
2 ∼ ψ(cid:48)
2We ﬁrst use function application (FA) multiple times to get φ(cid:48)
1, EQ(g1(ψ(cid:48)
Then, we use DDH to replace gab with k(cid:48) and transitivity to conclude that: φ(cid:48)
2 ∼ ψ(cid:48)(cid:48)
FA* on φ(cid:48)
2 ∼ ψ(cid:48)(cid:48)(cid:48)
2 ∼ ψ(cid:48)(cid:48)
FA* on φ(cid:48)(cid:48)
1 ), gb), gab. After expressing the fact that
gaib = (gb)ai (i.e. all terms can be expressed as a context of ga, gb, gab), we use DDH to
replace gab with k(cid:48) and conclude.
2 ∼ ψ(cid:48)(cid:48)(cid:48)(cid:48)
FA* on φ(cid:48)(cid:48)
yields the conclusion φ(cid:48)(cid:48)(cid:48)(cid:48)
yields the conclusion φ(cid:48)(cid:48)
1), gb), gab.
2 ∼ ψ(cid:48)
1 , EQ(g1(ψ(cid:48)(cid:48)
1, EQ(g1(ψ(cid:48)
1), gbi), gabi.
, yields φ(cid:48)(cid:48)(cid:48)
1 ∼ ψ(cid:48)(cid:48)
2 ∼ ψ(cid:48)
1 ∼ ψ(cid:48)
4. φ(cid:48)(cid:48)(cid:48)(cid:48)
2 ∼ ψ(cid:48)(cid:48)
1 , EQ(g1(ψ(cid:48)(cid:48)
1 ), gbi), gabi.
1 ∼ ψ(cid:48)(cid:48)
1
3. φ(cid:48)(cid:48)(cid:48)
.
2
1
2
2
1
2
We thus have Ax |= φ2 ∼ ψ2.
2 ∼ ψ1
2
D.3.2 Proof of Ax |= φ1
We ﬁrst note that EQ(g0(φ0), gb) ∼ false as φ0 does not contain b. Thus, the positive branch
can be eliminated and we get ψ1
1) =
ga then k(cid:48) else g1(φ1
. We then have ψ1
We conclude once again with a case study, a DDH for one case, and trivial equality in the
1, gb, if g1(φ1
where ψ1(cid:48)
2 ∼ ψ1(cid:48)
1 ∼ φ1
2 = φ1
1)b.
1
2
other case.
D.4 Proof for the authentication
We now prove that:
Ax |= P 0(a, skP, pk(skS)); if ¬((cid:87)
(cid:107)S0(b, skS, pk(skP )); if ¬((cid:87)
P 0(a, skP, pk(skS)); if ¬((cid:87)
(cid:107)S0(b, skS, pk(skP )); if ¬((cid:87)
∼
i B = gbi) then P 1(a, skP, pk(skS), B, k); out(k)
i A = gai) then S1(b, skS, pk(skP ), sid, k); out(k)
i B = gbi) then P 1(a, skP, pk(skS), B, k); bad
i A = gai) then S1(b, skS, pk(skP ), sid, k); bad
73
The proof is very similar to the proof of authentication of the signed DH key exchange,
we only outline the arguments here.
TP (m, s) := ∃i,∃X, m = hash(gai, X, X ai)
TS(m, s) := ∃i,∃X, m = hash(X, gbi, X bi)
sound thanks to Proposition 27.
TS ,skB,s,Oai,bi
We have that Ax = EUF-CMATP ,skP,s ∧ EUF-CMATS ,skS,s is Osign
We prove that bad may never occur, either in P or S. For bad to occur, the signature
checks must succeed in one of the process, while the session identiﬁer is not an honest one.
In this case, we prove that the signature checks will always fail, i.e that , for sign, B and A
terms produced by the attacker:
¬(
B = gbi) ∧ checksign(sign, pk(skS))) ∧ getmess(sign) = hash() ∼ false
TP ,skA,s,Osign
(cid:95)
(cid:95)
i
or
¬(
A = gai) ∧ checksign(sign, pk(skP )) ∧ getmess(sign) = hash() ∼ false
i
If those two equivalences are true for all possible values of the term sign that can be taken
depending on the traces, bad will never be raised. Let us for instance prove the ﬁrst one. For
all possible traces, the only honest signature by skS that might appear inside the message
sign is of the form sign(hash(), skS).
By using the EUF-CMATS ,skS,s axiom, we obtain
i B = gbi) ∧ checksign(sign, pk(skS))) ∧ getmess(sign) = hash()
i B = gbi) ∧ (Ts( getmess(sign)) ∨ getmess(sign) = hash(), skS)
¬((cid:87)
¬((cid:87)
(Ts( getmess(sign)) is directly in contradiction with ¬((cid:87)
∧ getmess(sign) = hash()
∼
i B = gbi), and the same goes
for getmess(sign) = hash(), skS), we do obtain the expected conclusion.
E SSH with forwarding agent
E.1 Scheme of the proof
Here, we wish to compose SSH with another potential session of SSH using the forwarding
agent. Then, a protocol which is secure if executed with a real or random key should be secure
when using the key given by the SSH session using the forward agent.
consider a record protocol, satisfying a property of the form Y (k)(cid:107)Z(k) ∼= Y (cid:48)(k)(cid:107)Z(cid:48)(k).
We also assume that the agents are only willing to communicate with the honnest identity,
i.e pk(skS) and pk(skP ) are predeﬁned inside the processes. This is usually the case for SSH,
where the user is asked to either validate or insert himself some public key.
We will write F A for F orwardAgent, SF for SF orward, and P D for P Distant. We
Our goal is then:
74
!n2
P (skP, pk(skS)); F A(skP, k);
(cid:107)S(skS, pk(skP )); P D(k, pk(skS)); Y (kP D)
(cid:107)SF (skS, pk(skP )); Z(kSF )
∼=!n2
P (skP, pk(skS)); F A(skP, k);
(cid:107)S(skS, pk(skP )); P D(k, pk(skS)); Y (cid:48)(kP D)
(cid:107)SF (skS, pk(skP )); Z(cid:48)(kSF )
We split the proof using two applications of Corollary 3.
The P and S will use randomness of the form ai, bi, and P D and SF randomness of the
form a(cid:48)
i
and b(cid:48)
.
i
E.1.1 First application of Corollary 3
The application is performed with the following hypothesis, which allows to derive the desired
conclusion.
A-3:
P 0(a, skP );
if ¬T (B, s) then
P 1(a, skP, Ba); out(Ba)
(cid:107)S0(b, skS);
else out(Ba, ga, B)
if ¬T (A, s) then
S1(b, skS, Ab); out(Ab)
else out(Ab, gb, A)
P 0(a, skP );
∼=OP S ,Of orward
(cid:107)S0(b, skS);
out(k, ga, B)
if B = gb then
else if ¬T (B, s) then
P 1(a, skP, Ba); bad
else out(Ab, gb, A)
if A = ga then
out(k, gb, A)
else if ¬T (B, s) then
S1(b, skS, Ab); bad
else out(Ab, gb, A)
B-1:
!n2P 1(k); F A(k)(cid:107)S1(k); P D(k); Y (cid:107)SF ; Z ∼=OKE1
With the oracles:
• OP S allows to simulate (A-1) the other honnest sessions of P and S, it corresponds to
!n2P 1(k); F A(k)(cid:107)S1(k); P D(k); Y (cid:48)(cid:107)SF ; Z(cid:48)
Osign
TP ,skS,s,Osign
TS ,skP,s,Oai,bi
of Appendix D.4.
• Of orward allows to simulate (C-1) the continuation, i.e the protocols of the form
in(k); P 1(k); F A(k)(cid:107)in(k); S1(k); P D(k); Y (cid:107)SF ; Z
allows to simulate (C-2) !n2P(cid:107)S (it is similar to OP S).
• OKE1
All simulations are performed under νskS, skP . To deﬁne Of orward, we need to settle an
issue. . Indeed, for hypothesis C-1, we need to provide an oracle that can simulates sessions of
the forwarding protocols. However, in order to get the simulatability of in(k).F A(skP, k), one
must give a generic signing oracles to the attacker, which would obviously make the protocol