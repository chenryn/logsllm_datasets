title:Fast Private Set Intersection from Homomorphic Encryption
author:Hao Chen and
Kim Laine and
Peter Rindal
Fast Private Set Intersection from Homomorphic Encryption
Hao Chen1, Kim Laine2, and Peter Rindal3
1 Microsoft Research, Redmond, WA, USA; PI:EMAIL
2 Microsoft Research, Redmond, WA, USA; PI:EMAIL
3 Oregon State University, Corvallis, OR, USA; PI:EMAIL
Abstract. Private Set Intersection (PSI) is a cryptographic technique that allows two parties to com-
pute the intersection of their sets without revealing anything except the intersection. We use fully
homomorphic encryption to construct a fast PSI protocol with a small communication overhead that
works particularly well when one of the two sets is much smaller than the other, and is secure against
semi-honest adversaries.
The most computationally eﬃcient PSI protocols have been constructed using tools such as hash func-
tions and oblivious transfer, but a potential limitation with these approaches is the communication
complexity, which scales linearly with the size of the larger set. This is of particular concern when per-
forming PSI between a constrained device (cellphone) holding a small set, and a large service provider
(e.g. WhatsApp), such as in the Private Contact Discovery application.
Our protocol has communication complexity linear in the size of the smaller set, and logarithmic in
the larger set. More precisely, if the set sizes are Ny < Nx, we achieve a communication overhead
of O(Ny log Nx). Our running-time-optimized benchmarks show that it takes 36 seconds of online-
computation, 71 seconds of non-interactive (receiver-independent) pre-processing, and only 12.5MB
of round trip communication to intersect ﬁve thousand 32-bit strings with 16 million 32-bit strings.
Compared to prior works, this is roughly a 38–115× reduction in communication with minimal diﬀerence
in computational overhead.
1 Introduction
1.1 Private Set Intersection
Private Set Intersection (PSI) refers to a setting where two parties each hold a set of private items, and
wish to learn the intersection of their sets without revealing any information except for the intersection
itself. Over the last few years, PSI has become truly practical for a variety of applications due to a long
list of publications, e.g. [PSZ14,PSSZ15,PSZ16,KKRT16,OOS17,RR16,Lam16,BFT16a,DCW13]. The most
eﬃcient protocols have been proposed by Pinkas et al. [PSZ16] and Kolesnikov et al. [KKRT16]. While these
protocols are extremely fast, their communication complexity is linear in the sizes of both sets. When one
set is signiﬁcantly smaller than the other, the communication overhead becomes considerable compared to
the non-private solution, which has communication linear in the size of the smaller set.
1.2 Fully Homomorphic Encryption
Fully homomorphic encryption is a powerful cryptographic primitive that allows arithmetic circuits to be
evaluated directly on encrypted data, as opposed to having to decrypt the data ﬁrst. Despite the basic
idea being old [RAD78], the ﬁrst construction was given only in 2009 by Craig Gentry [Gen09]. While the
early fully homomorphic encryption schemes were impractical, in only a few years researchers managed
to construct much more eﬃcient schemes (e.g. [BV14,FV12,BGV12,LATV12,BLLN13,GSW13]), bringing
practical applications close to reality [NLV11,GHS12,GBDL+16].
At ﬁrst glance, it might seem easy to use fully homomorphic encryption to achieve a low communication
cost in PSI. The party with smaller set sends its encrypted set to the other party, who evaluates the intersec-
tion circuit homomorphically, and sends back the encrypted result for the ﬁrst party to decrypt. The total
communication is only
2 × ciphertext expansion × size of the smaller set.
However, a naive implementation of the above idea will result in a very ineﬃcient solution. The reason is
that—for all known fully homomorphic encryption schemes—the computational cost not only grows with
the size of the inputs (in this case, the sum of the two set sizes), but also grows rapidly with the depth of the
circuit. Thus our main challenge is to come up with various optimizations to make the solution practical, and
even faster than the state-of-the-art protocols in many scenarios. In short, we will show that it is possible to
construct a fast fully homomorphic encryption based PSI protocol, with a low communication overhead.
1.3 Related Work
Meadows [Mea86] proposed one of the ﬁrst secure PSI protocols, which was later fully described by Huberman,
Franklin and Hogg in [HFH99]. This approach was based on public-key cryptography, and leveraged the
multiplicative homomorphic property of Diﬃe-Hellman key exchange. While these schemes have relatively
good communication cost, the running time can be prohibitive when the set sizes become large due to the
need to perform modular exponentiation for every item in both sets several times.
Since [HFH99], several other paradigms have been considered. Freedman et al. [FNP04] proposed a pro-
tocol based on oblivious polynomial evaluation. This approach leveraged partially homomorphic encryption,
and was later extended to the malicious setting in [DSMRY09,HN10,HN12]. Another approach was proposed
by Hazay et al. [HL08], and was based on a so-called Oblivious PRF.
Recently, more promising approaches based on Oblivious Transfer (OT) have been invented [IKNP03,OOS17].
At the time, by far the most eﬃcient scheme was introduced by Pinkas et al. [PSZ14], and later improved
in [PSZ16,OOS17,KKRT16]. We will denote the two parties engaged in a PSI protocol by sender and re-
ceiver, and maintain that after the execution of the protocol, the receiver learns the intersection of the sets,
whereas the sender learns no information. The high level idea of the OT-based protocols is that the receiver
engages in many OTs with the sender, and obliviously learns a randomized encoding for each item in its set,
without revealing which values were encoded. The sender can then encode its items locally, and send them
to receiver, who computes a plaintext intersection on the encodings. Due to the encodings being randomized,
they do not reveal any information beyond the intersection. One inherent property of this approach is that
the communication is linear in both set sizes due to the need to encode and send all of the encodings. The
approach we take is similar, except that we use fully homomorphic encryption in place of Oblivious Transfer.
In a concurrent work, Kiss et al. [KLS+17] extend the OT-based protocol to an online/oﬄine setting,
where the bulk of the communication can occur once during the oﬄine phase, and then be reused. However,
these beneﬁts require the larger set to be static and the communication/storage for both parties be linear in
the size of the larger set, making the deployment of such a protocol challenging in many real world scenarios,
e.g. private contact discovery.
Yet another OT-based approach was introduced by Dong et al. [DCW13], which builds on a data structure
known as a Bloom ﬁlter. This data structure allows eﬃcient membership test by setting speciﬁc bits in a long
bit array. Importantly, the bit-wise AND of two Bloom ﬁlters is itself a valid Bloom ﬁlter for the intersection
of the two original sets. With a few modiﬁcations to this idea, a secure protocol can then be constructed
by allowing one of the parties to learn the bit-wise AND of the two Bloom ﬁlters with the use of OT.
This approach requires a greater amount of communication than the approach introduced by Pinkas et al.
[PSZ14], and results in inferior performance.
A commonly cited solution for PSI is to use generic secure multi-party computation protocols to compute
the intersection. Huang et al. [HEK12] was the ﬁrst to implement such a protocol using garbled circuits,
which [PSZ14] later improved, and provided an implementation. They showed that a garbled circuit approach
requires signiﬁcantly more communication compared to OT-based methods. For a more complete survey of
practical approaches, we point the reader to [PSZ16].
A very eﬃcient server-aided protocol has also been proposed by Kamara et al. [KMRS14]. In this setting,
it is assumed that there exists a non-colluding server. The basic idea is that a random function is sampled
between the two parties which is applied to the elements in their respective sets. These encodings are then
sent to the server who reports the intersection. While conceptually simple and very eﬃcient, the reliance on
such as server is undesirable. Moreover, the communication complexity is linear in both set sizes.
In all of the above protocols it is assumed that the set sizes (or upper bounds) are made public at the be-
ginning of the protocol. Ateniese et al. [ACT11] introduced a protocol based on RSA accumulators [BdM94],
which relaxes this assumption by hiding the receiver’s set size. This protocol works by having the receiver
construct and send an RSA accumulator for its set. The sender can then construct a response for each of its
items, which allows the receiver to test whether they were contained in the RSA accumulator. An important
property of the RSA accumulator is that its size is small, and independent of the receiver’s set size. As such,
this protocol is most interesting when the receiver has a set much larger than the sender. In a follow-up work
Bradley et al. [BFT16b] extended this protocol to imposing an upper bound on the number of items in the
accumulator, thereby preventing a so-called “full-domain attack” by the receiver.
1.4 Contributions and Roadmap
As our discussion has shown, all of the prior PSI protocols require both parties to encode and send data over
the network that is proportional to their entire sets. However, the trivial insecure solution only requires the
smaller set to be sent. We address this gap by constructing the ﬁrst secure and practical PSI protocol with
low communication overhead based on a leveled fully homomorphic encryption scheme.
Our basic protocol requires communication linear in the smaller set, achieving optimal communication
that is on par with the naive solution. We then combine an array of optimizations to signiﬁcantly reduce
communication size, computational cost, and the depth of the homomorphic circuit, while only adding a
logarithmic overhead to the communication. In summary, we
– Propose a basic PSI protocol based on fully homomorphic encryption;
– Combine various optimizations to vastly reduce the computational and communication cost;
– Use ﬁne-tuned fully homomorphic encryption parameters for the homomorphic computation to avoid the
– Develop a prototype implementation in C++ and demonstrate a 38–115× reduction in communication
costly bootstrapping operation [Gen09,GHS12], and to achieve good performance;
over previous state-of-the-art protocols.
In Section 2 we review the setups and tools we use to build the protocol: the PSI setup and its deﬁnition
of security, and preliminaries on (leveled) fully homomorphic encryption. In Section 3 we propose our basic
strawman PSI protocol. Then, in Section 4, we apply optimizations to vastly improve the strawman protocol
and make it practical. The formal description of the optimized protocol, along with a security proof, is
presented in Section 5. In Section 6 we provide a performance analysis of our implementation, and compare
our performance results to [PSZ16] and [KKRT16].
2 Preliminaries
2.1 Notations
Throughout this paper, we will use the notation [n] to denote the set {1, ..., n}. The computational and
statistical security parameters will be denoted by κ, λ, respectively. Other parameters include:
– X, Y ⊆ {0, 1}σ are the sender’s and receiver’s sets, each of size Nx, Ny;
– m denotes the size of a hash table, and d denotes the number of items to be inserted into a hash table;
– n, q and t denote the encryption parameters described in Section 2.3;
– h denotes the number of hash functions used for cuckoo hashing in Section 4.2;
– B denotes the bin size for the simple hashing scheme described in Section 4.2;
– (cid:96) denotes the windowing parameter described in Section 4.3;
– α denotes the partitioning parameter described in Section 4.3.
2.2 Private Set Intersection
We use standard notations and call the two parties engaging in PSI the sender and the receiver. The sender
holds a set X of size Nx, and the receiver holds a set Y of size Ny. Both sets consist of σ-bit strings. We
always assume the set sizes Nx and Ny are public. The ideal PSI functionality computes the intersection,
outputs nothing to the sender, and X ∩ Y to the receiver. We construct a new protocol for PSI from fully
homomorphic encryption, and prove it to be secure in the semi-honest security model, where both parties
correctly follow the protocol, but may try to learn as much as possible from their view of the protocol
execution.
Our protocol is particularly powerful when the sender’s set is much larger than the receiver’s set. Hence
we assume Nx (cid:29) Ny throughout the paper, even though the protocol works for arbitrary set sizes with
no changes. More precisely, we achieve a communication complexity of O(Ny log Nx). Also, we require only
the sender to perform work linear in the larger set size Nx. Intuitively, the receiver encrypts and sends
its set to the sender, who computes the intersection on homomorphically encrypted data by evaluating
an appropriate comparison circuit. The output is then compressed to much smaller size using homomorphic
multiplication, and sent back to the receiver for decryption. We note that the receiver only performs relatively
light computation in the protocol, i.e. encryptions and decryptions of data linear in its set size Ny. This is
particularly useful when the receiver is limited in its computational power, e.g. when the receiver is a mobile
device.
Private contact discovery One particularly interesting application for our PSI protocol is private contact
discovery. In this setting, a service provider, e.g. WhatsApp, has a set of several million users. Each of these
users holds their own set of contacts, and wants to learn which of them also use the service. The insecure
solution to this problem is to have the user send the service provider their set of contacts, who then performs
the intersection on behalf of the user. While this protects the privacy of the service provider, it leaks the
user’s private contacts to the service provider.
While PSI oﬀers a natural solution to this problem, one potential issue with applying existing protocols
to this setting is that both the communication and computation complexity for both parties is linear in the
larger set. As a result, a user who may have only a few hundred contacts has to receive and process data linear
in the number of users that the service has, resulting in a suboptimal protocol for constrained hardware,
such as cellphones. This problem was initially raised in an article by Moxie Marlinspike from Open Whisper
Systems—the company that developed the popular secure messaging app Signal —when they were trying to
deploy PSI for contact discovery [Mar14]. Our PSI protocol addresses this issue by allowing the constrained
devices to process and receive data that is linear in only their set size, and only logarithmic in the service
provider’s set size. Moreover, the major part of the computation can be performed by the service provider
in a large data center, where processing power is relatively inexpensive, whereas the user only performs a
light computation.
2.3 Leveled Fully Homomorphic Encryption
Fully homomorphic encryption schemes are encryption schemes that allow arithmetic circuits to be evaluated
directly on ciphertexts, ideally enabling powerful applications such as outsourcing of computation on private
data [RAD78,Gen09]. For improved performance, the encryption parameters are typically chosen to support
only circuits of a certain bounded depth (leveled fully homomorphic encryption), and we use this in our
implementation.
Many of the techniques and algorithms presented in this paper are agnostic to the exact fully homomorphic
encryption scheme that is being used, but for simplicity we restrict to RLWE-based cryptosystems using
power-of-2 cyclotomic rings of integers [LPR10]. In such cryptosystems the plaintext space is Zt[x]/(xn + 1),
and the ciphertext space is Zq[x]/(xn + 1), where n is a power of 2 and t (cid:28) q are integers. It is customary to
denote R = Z[x]/(xn + 1), so that the plaintext and ciphertext spaces become Rt = R/tR, and Rq = R/qR,
respectively. We assume the fully homomorphic encryption scheme to have plaintext and ciphertext spaces
of this type, and the notation (n, q, t) will always refer to these parameters. For example, the Brakerski-
Gentry-Vaikuntanathan (BGV) [BGV12] and the Fan-Vercauteren (FV) [FV12] schemes have this structure.
A leveled fully homomorphic encryption scheme can be described by the following set of randomized
algorithms:
• FHE.Setup(1λ): Given a security parameter λ, outputs a set of encryption parameters parms.
• FHE.KeyGen(parms): Outputs a secret key sk and a public key pk. Optionally outputs one or more
• FHE.Encrypt(m, pk): Given message m ∈ Rt, outputs ciphertext c ∈ Rq.
• FHE.Decrypt(c, sk): Given ciphertext c ∈ Rq, outputs message m ∈ Rt.
evaluation keys evk.
• FHE.Evaluate(C, (c1, . . . , ck), evk): Given an arithmetic circuit f with k input wires, and inputs c1, . . . , ck
with ci → FHE.Encrypt(mi, pk), outputs a ciphertext c such that
Pr [FHE.Decrypt(c, sk) (cid:54)= f (m1, . . . , mk)] = negl(λ) .
We also require that the size of the output of FHE.Evaluate is not more than polynomial in λ independent
of what f is (compactness) (see e.g. [ABC+15]).
We say that a fully homomorphic encryption scheme is secure if it is IND-CPA secure, and weakly circular
secure, which means that the scheme remains secure even when the adversary is given encryptions of the bits
of the secret key. A fully homomorphic encryption scheme achieves circuit privacy if the distribution of the
outputs of any ﬁxed homomorphic evaluation is indistinguishable from the distribution of fresh encryptions
of the plaintext outputs. In this way, one can eﬀectively hide the circuit that was evaluated on encrypted
data. We refer the reader to [ABC+15,BGV12,DS16] for more details.
3 The Basic Protocol
We describe our basic protocol in Figure 1 as a strawman protocol. The receiver encrypts each of its items y,
and sends them to the sender. For each y, the sender then evaluates homomorphically the product of diﬀer-
ences of y with all of the sender’s items x, randomizes the product by multiplying it with a uniformly random
non-zero plaintext, and sends the result back to the receiver. The result decrypts to zero precisely when y is
in the sender’s set, and to a uniformly random non-zero plaintext otherwise, revealing no information about
the sender’s set to the receiver.
To be more precise, we assume from now on that the plaintext modulus t in our FHE scheme is a prime
number, large enough to encode σ-bit strings as elements of Zt. We also temporarily restrict the plaintext
space to its subring of constant polynomials (this restriction will be removed in Section 4.1), and assume
plaintexts to be simply elements of Zt. Recall that the sizes of the sets X and Y , and the (common) bit-length
σ of the items, are public information.
Input: Receiver inputs set Y of size Ny; sender inputs set X of size Nx. Both sets consist of bit strings of length
σ. Nx, Ny, and σ are public.
Output: Receiver outputs X ∩ Y ; sender outputs ⊥.
1. Setup: Sender and receiver jointly agree on a fully homomorphic encryption scheme. Receiver generates a
public-secret key pair for the scheme, and keeps the secret key to itself.
2. Set encryption: Receiver encrypts each element yi in its set Y using the fully homomorphic encryption
scheme, and sends the Ny ciphertexts (c1, . . . , cNy ) to sender.
3. Computing intersection: For each ci, sender
(a) samples a random non-zero plaintext element ri;
(b) homomorphically computes
(cid:89)
x∈X