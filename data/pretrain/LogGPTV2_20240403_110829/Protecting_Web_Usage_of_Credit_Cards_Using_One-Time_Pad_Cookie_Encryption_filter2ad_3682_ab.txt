same message. However the OTP encryption requires a 
new key for every new message, which in turn requires 
a mechanism to distribute keys so that both parties can 
have the same key for a message while no third party 
could  intercept  or  tamper  with  these  keys.  If  such  a 
mechanism  exists  for  generic  applications,  then  the 
encrypting  party  could  have  used  this  mechanism  to 
send  the  message  directly  without  encryption.  In 
reality, no such practical mechanism exists a priori, so 
the fear of leaking the keys out is keeping people from 
using OTP extensively. 
However,  it  is  easy  to  notice  that  in  applications 
where encryption and decryption are performed by the 
same party, the key distribution problem is not an issue 
anymore. This means that we can employ OTP on such 
encryption tasks, and achieve the perfect secrecy. 
One  application  that  shows  such  a  characteristic  is 
cookie  encryption:  encryption  and  decryption  of  the 
cookies are done by the same party  – the server. The 
client  simply  stores  and  sends  back  the  cookie,  but 
does  not  participate  in  cookie  encryption/decryption. 
In other words, the client does not use the information 
in the cookie. Therefore the keys are solely used by the 
server, instead of being shared by two parties.  
This  characteristic  shows  up  only  when  the  party 
that performs both encryption and decryption does not 
want to or is not able to store the sensitive information 
after  its  use.  Otherwise,  if  the  encrypting/decrypting 
party can and wants to store the information, then this 
party  could  have  simply  generated  a  nonce  string  to 
send  to  the  other  party,  while  storing  the  real 
information with the nonce string in the local database, 
since the other party does not need the real information 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:29:44 UTC from IEEE Xplore.  Restrictions apply. 
anyway.  What  makes  cookie  encryption  so  special  is 
the  web  sites'  motive  that  they  should  respect  users' 
privacy and reduce the web sites' own liability. This is 
the  main  reason  the  web  sites  do  not  want  to  store 
customers' credit card information after its use. 
Based  on  this   observation,  we  developed  an  OTP 
cookie  encryption  protocol  to  protect  online  users' 
privacy. The protocol is straightforward. In short, the 
web server stores the OTP keys in a local database and 
encrypt/decrypt the cookies using these keys. Figure 1 
shows the flow charts for cookie encryption and Figure 
2  shows  the  flow  chart  for  decryption.  When  a  web 
server needs to encrypt a cookie before sending it out, 
the web server follows the  upper chart. When the web 
server receives a cookie from a client, the web server 
follows the  lower  chart  to  decrypt  the  cookie.  Notice 
that after the decryption, whether or not to remove the 
key  from  the  key  database  would  depend  on  the  web 
designer's  choice.  More  details  will  be  discussed  in 
section 4.6. 
The  web  server  also  runs  a  clean-up  program 
periodically  to  check  the  expiration  times  in  the  key 
database  against  the  current  time,  and  deletes  all  the 
expired  keys.  There  are  several  reasons  why  a  key 
expires. The main security related reason is to provide 
a mechanism to limit the time the server stores the key, 
hence  limiting  the  web  server's  liability  in  case  an 
attacker  breaks  into  both  the  database  and  a  user's 
computer.  Another  reason  is  that  sometimes  users 
might leave a web site and not come back anymore, or 
chooses  to  clean  her  cookies  even  if  she  comes  back 
next time, or the users' system might simply crash, in 
which  cases  the  cookies  would  not  return  to  the  web 
server  anymore.  Therefore  the  corresponding  keys  in 
the web server's key database would become zombies, 
occupying the disk space and the space of index string 
unnecessarily.  We  should  have  a  separate  program  to 
clean up the zombie keys, in order to save disk space 
and index string space over time.  
Generate a random key k as long 
as the cookie plaintext p 
Encrypt the plaintext as 
C = k XOR p  
Generate an index string i not yet in 
the database 
Calculate an expiration time t , which 
is usually a constant period after 
current time
Store the 3-tuple (i, k, t) in the key 
database with i being the index
Concatenate i and C to form the 
value of outgoing cookie, and send 
it to the client
End 
Figure 1: Cookie Encryption 
Decompose the cookie into 
index i and ciphertext C
Discard this 
cookie and 
return an error 
message 
Remove the 
record (i, k, t) 
Remove the 
record (i, k, t) 
End
NO 
YES 
NO 
Is i in the key 
database? 
YES 
Fetch the record (i, k, t) 
from database
Is key expired? 
(t  > current time)
NO 
Decrypt the ciphertext:
p = k XOR C
Keep the 
record? 
YES 
Update (i, k, t) to (i, k, t’) where t’ 
is the new expiration time
Figure 2: Cookie Decryption 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:29:44 UTC from IEEE Xplore.  Restrictions apply. 
4.  Analysis 
The protocol described on this paper was designed 
to  protect  online  usage  of  credit  cards,  and  can  be 
generalized  to  be  a  scheme  of  distributed  storage  of 
information  that  protects  other  kinds  of  sensitive 
information.  We  will  analyze  and  discuss 
the 
advantages and related problems of this protocol in the 
following subsections.  
4.1.  Advantages of Distributed Storage of 
Sensitive Information 
In  general,  the  main  advantage  of  distributed 
storage of the customers' sensitive information is  that, 
the risk is also distributed, and the damage caused by 
compromises  is  limited. If an attacker breaks into the 
database server of the web site, she only gets a table of 
the  one-time  keys,  which  is  useless  without  the 
corresponding encrypted cookies. If the attacker breaks 
into  the  user's  personal  computer  or  by  other  means 
gets hold of the user's encrypted cookie, she also has 
no practical way to crack it. If the attacker breaks into 
both the server and the user's computer, then this user's 
cookie is compromised, but all the other users' cookies 
are still safe, as long as the attacker is not able to get 
their cookies. In the worst scenario the attacker breaks 
into  the  server  and  has  a  way  of  listening  to  all  the 
traffic  of  this  server.  The  clients  that  send  the  credit 
card  cookies  to  this  server  in  this  period  would  have 
their  credit  cards  exposed.  However,  the  other  users 
that do not send the credit card cookies to this server in 
this  period  are  still  safe.  Hence  the  loss  on  the  worst 
case scenario is limited by the length of period that the 
attacker  can  stay  on  the  server.  This  is  much  better 
than gathering all users' credit card numbers in a single 
database,  and  exposing  all  of  them  once  the  server  is 
compromised. 
In  addition,  there  is  a  simple  way  for  a  merchant 
web site to ensure that the credit card cookies are sent 
to the web site only when necessary. The cookie has a 
path  option  that  specifies  which  path  on  the  server 
requires  this  cookie.  The  web  site  can  single  out  the 
program  that  processes  the  last  step  of  a  transaction, 
which really requires credit card number, and place the 
program  in  a  path  different  from  all  other  programs 
and web pages. When the web server sends the credit 
card cookie out, it sets the path option of the cookie to 
the directory of the program that actually processes the 
credit  card.    Thus,  this  cookie  will  only  return  to  the 
web site when a credit card number is actually needed. 
An  attacker  could  spoof  the  web  site  and  trick  the 
user’s browser into sending the encrypted cookie. This 
attack  maps  to  the  case  where  the  user’s  computer  is 
compromised,  and  will  have  limited  effect  as  already 
described. 
Furthermore,  the  user  has  complete  control  over 
their  private  information  after  it  is  used.  She  can 
choose  when  to  send  a  cookie,  or  even  whether  she 
wants to keep this cookie. If the user decides to erase 
it,  then  there  are  plenty  of  cookie  management 
software that can help her delete the cookies from the 
local  storage.  As  a  result,  the  keys  associated  with 
these  deleted  cookies  will  become  zombies  in  the 
server, and eventually be deleted too. 
In  summary,  the  distributed  storage  of  credit  card 
numbers  using  OTP  can  provide  nearly -  perfect 
secrecy of the user's privacy, and significantly reduce 
the web sites' liability of the online theft. 
4.2.  Advantages of OTP's Resource 
Requirement 
For  any  encryption  algorithm,  using  the  same 
master  key  to  encrypt  multiple  messages  is  generally 
not  a  good  idea,  since  the  more  times  a  key  is  used 
repeatedly, the more likely cryptanalysis can be carried 
out. Using each key just once is a good way to make 
cryptanalysis  improbable.  In  fact,  as  long  as  each 
encryption key is used only once, any other encryption 
algorithm  (e.g.  DES,  AES )  could  also  be  used  to 
achieve  similar  secrecy  as  OTP.  However,  compared 
to the other encryption algorithms where multi-rounds 
of complex logic/mathematical operations have to be 
performed,  OTP  has 
tremendous 
performance  advantage.  OTP  is  the  fastest  possible 
encryption  algorithm:  the  encryption/decryption  are 
both only a simple round of XOR operation on every 
bit of the plain text.  
the  obvious 
The  main 
is 
that 
the 
factor 
not 
could 
impact  OTP 
performance 
encryption/decryption 
themselves, but the generation of the random keys. The 
process  of  generating  random  numbers  is  usually  far 
slower  than  the  OTP  encryption/decryption  itself. 
Nevertheless, in case this becomes a major issue of the 
overall  real-time performance, web servers can always 
choose  to  use  pre-computed  random  number  table  to 
save the time of random number generation.  
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:29:44 UTC from IEEE Xplore.  Restrictions apply. 
One seeming drawback of OTP is that the keys are 
as  long  as  the  plain  texts,  and  have  to  occupy  the 
server's storage space that is as large as the plain texts. 
In addition, since the keys are supposed to be random 
strings with very  high entropy, compression does not 
work  on  the  keys.  However,  the  cookies  that  this 
scheme is encrypting are not large anyway(each cookie 
can  be  at  most  4K  bytes  according  the  specification, 
but the credit card information is only tens of bytes). 
The  storage  requirement  of  the  keys  on  the  modern 
web servers is very trivial, and should not be a serious 
issue. 
4.3.  Randomness of OTP Keys  
The  perfect  secrecy  of  OTP 
relies  on 
the 
randomness  of  key  generation.  If  the  keys  are  not 
random,  then  the  algorithm  cannot  be  proven  to 
provide perfect secrecy. True random numbers can be 
obtained  by  measuring  a  random  physical  process, 
such  as  cosmic  radiation,  or  thermal  noise.  A  web 
server connecting to such a measurement device might 
seem weird at the first thought. But it is well worth it if 
the web site is really concerned about the secrecy of its 
traffic.  
There  are  numerous  ways  to  generate  random 
numbers  [7]  that  a  web  site  can  choose  from.  The 
hardware  and  software 
implementations  such  as 
described  in  [9]  are  very  easy,  and  a  digital  Geiger 
counter package such as described in [1] costs only a 
few  hundred  dollars.  Therefore  going  for  this  kind  of 
randomness should not cause too much trouble to the 
web site designers. 