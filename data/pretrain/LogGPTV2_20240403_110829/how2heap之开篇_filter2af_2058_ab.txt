程序先malloc了三块内存a,b,c
然后先释放a,再释放b,最后再释放一次a
此时的free list为a->b->a
然后再malloc3次分配到了a,b,a的内存,此时我们就得到了两次a的内存,修改其中任意一个就会影响另一块,这也就是double free的攻击demo了
而fastbin 的 double free为什么能成功呢?
这里借用[ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/)的一段话:
    fastbin 的堆块被释放后 next_chunk 的 pre_inuse 位不会被清空
    fastbin 在执行 free 的时候仅验证了 main_arena 直接指向的块，即链表指针头部的块。对于链表后面的块，并没有进行验证。
    /* Another simple check: make sure the top of the bin is not the
           record we are going to add (i.e., double free).  */
        if (__builtin_expect (old == p, 0))
          {
            errstr = "double free or corruption (fasttop)";
            goto errout;
    }
所以只要不是连续释放同一个堆块即可,想要验证的同学可以把文中注释掉free(a)的那一行取消注释编译运行一下:-)
## 0x03 fastbin_dup_consolidate
###  源代码
    #include 
    #include 
    #include 
    int main() {
      void* p1 = malloc(0x40);
      void* p2 = malloc(0x40);
      fprintf(stderr, "Allocated two fastbins: p1=%p p2=%pn", p1, p2);
      fprintf(stderr, "Now free p1!n");
      free(p1);
      void* p3 = malloc(0x400);
      //分配一个large bin来触发malloc_consolidate函数
      fprintf(stderr, "Allocated large bin to trigger malloc_consolidate(): p3=%pn", p3);
      //通过malloc_consolidate函数我们可以把free掉的p1移动到unsorted bin中
      fprintf(stderr, "In malloc_consolidate(), p1 is moved to the unsorted bin.n");
      free(p1);
      ##然后就可以触发double free漏洞了
      fprintf(stderr, "Trigger the double free vulnerability!n");
      fprintf(stderr, "We can pass the check in malloc() since p1 is not fast top.n");
      //现在p1既在unsorted bin中又在fastbin中,因此我们再分配两次p1大小的内存,就可以分配到同一款内存
      fprintf(stderr, "Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %pn", malloc(0x40), malloc(0x40));
    }
###  运行结果
    Allocated two fastbins: p1=0x14ba010 p2=0x14ba060
    Now free p1!
    Allocated large bin to trigger malloc_consolidate(): p3=0x14ba0b0
    In malloc_consolidate(), p1 is moved to the unsorted bin.
    Trigger the double free vulnerability!
    We can pass the check in malloc() since p1 is not fast top.
    Now p1 is in unsorted bin and fast bin. So we'will get it twice: 0x14ba010 0x14ba010
###  关键部分调试
**part 1**
这里我们把断点下在第一次free p1 ,malloc p3,第二次free p1和最后的分配内存部分,也就是
    Line number 20 out of range; glibc_2.25/fastbin_dup_consolidate.c has 19 lines.
    pwndbg> b 11
    Breakpoint 1 at 0x4006b6: file glibc_2.25/fastbin_dup_consolidate.c, line 11.
    pwndbg> b 13
    Breakpoint 2 at 0x4006c4: file glibc_2.25/fastbin_dup_consolidate.c, line 13.
    pwndbg> b 16
    Breakpoint 3 at 0x40070b: file glibc_2.25/fastbin_dup_consolidate.c, line 16.
    pwndbg> b 19
    Breakpoint 4 at 0x400782: file glibc_2.25/fastbin_dup_consolidate.c, line 19.
之后我们运行一下
    pwndbg> heap
    0x602000 FASTBIN {
      prev_size = 0,
      size = 81,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602050 FASTBIN {
      prev_size = 0,
      size = 81,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6020a0 PREV_INUSE {
      prev_size = 0,
      size = 135009,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x602000 ◂— 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    empty
    largebins
    empty
可以看到此时的p1被放到了fastbin中,然后我们malloc一个0x400的大chunk,这样就会触发malloc_consolidate()
此时的堆
    pwndbg> heap
    0x602000 FASTBIN {
      prev_size = 0,
      size = 81,
      fd = 0x7ffff7dd1bb8 ,
      bk = 0x7ffff7dd1bb8 ,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x602050 {
      prev_size = 80,
      size = 80,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6020a0 PREV_INUSE {
      prev_size = 0,
      size = 1041,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    0x6024b0 PREV_INUSE {
      prev_size = 0,
      size = 133969,
      fd = 0x0,
      bk = 0x0,
      fd_nextsize = 0x0,
      bk_nextsize = 0x0
    }
    pwndbg> bins
    fastbins
    0x20: 0x0
    0x30: 0x0
    0x40: 0x0
    0x50: 0x0
    0x60: 0x0
    0x70: 0x0
    0x80: 0x0
    unsortedbin
    all: 0x0
    smallbins
    0x50: 0x602000 —▸ 0x7ffff7dd1bb8 (main_arena+152) ◂— 0x602000
    largebins
    empty
这个时候,我们之前free掉的chunk已经被放进了small bin中
**part 2**
**划重点,这个过程中到底发生了什么呢?**
  1. 问题一:啥是malloc_consolidate函数??
我们直接看源代码吧
       static void malloc_consolidate(mstate av)
    {
      mfastbinptr*    fb;                 /* current fastbin being consolidated */
      mfastbinptr*    maxfb;              /* last fastbin (for loop control) */
      mchunkptr       p;                  /* current chunk being consolidated */
      mchunkptr       nextp;              /* next chunk to consolidate */
      mchunkptr       unsorted_bin;       /* bin header */
      mchunkptr       first_unsorted;     /* chunk to link to */
      /* These have same use as in free() */
      mchunkptr       nextchunk;
      INTERNAL_SIZE_T size;
      INTERNAL_SIZE_T nextsize;
      INTERNAL_SIZE_T prevsize;
      int             nextinuse;
      atomic_store_relaxed (&av->have_fastchunks, false);
      unsorted_bin = unsorted_chunks(av);
      /*
        Remove each chunk from fast bin and consolidate it, placing it
        then in unsorted bin. Among other reasons for doing this,
        placing in unsorted bin avoids needing to calculate actual bins
        until malloc is sure that chunks aren't immediately going to be
        reused anyway.
      */
      maxfb = &fastbin (av, NFASTBINS - 1);
      fb = &fastbin (av, 0);
      do {
        p = atomic_exchange_acq (fb, NULL);
        if (p != 0) {
          do {
            {
              unsigned int idx = fastbin_index (chunksize (p));
              if ((&fastbin (av, idx)) != fb)
                malloc_printerr ("malloc_consolidate(): invalid chunk size");
            }
            check_inuse_chunk(av, p);
            nextp = p->fd;
            /* Slightly streamlined version of consolidation code in free() */
            size = chunksize (p);
            nextchunk = chunk_at_offset(p, size);
            nextsize = chunksize(nextchunk);
            if (!prev_inuse(p)) {
              prevsize = prev_size (p);
              size += prevsize;
              p = chunk_at_offset(p, -((long) prevsize));
              if (__glibc_unlikely (chunksize(p) != prevsize))
                malloc_printerr ("corrupted size vs. prev_size in fastbins");
              unlink_chunk (av, p);
            }
            if (nextchunk != av->top) {
              nextinuse = inuse_bit_at_offset(nextchunk, nextsize);
              if (!nextinuse) {
                size += nextsize;
                unlink_chunk (av, nextchunk);
              } else
                clear_inuse_bit_at_offset(nextchunk, 0);
              first_unsorted = unsorted_bin->fd;
              unsorted_bin->fd = p;
              first_unsorted->bk = p;
              if (!in_smallbin_range (size)) {
                p->fd_nextsize = NULL;
                p->bk_nextsize = NULL;
              }
              set_head(p, size | PREV_INUSE);
              p->bk = unsorted_bin;
              p->fd = first_unsorted;
              set_foot(p, size);
            }
            else {
              size += nextsize;
              set_head(p, size | PREV_INUSE);
              av->top = p;
            }
          } while ( (p = nextp) != 0);
        }
      } while (fb++ != maxfb);
    }
这里我做一个解释
先确定堆是否被初始化了(也就是get_max_fast()函数),如果没有就初始化堆，然后退出函数
从 fastbin 中获取一个空闲 chunk,尝试向后合并
如果不能向后合并就尝试向前合并
如果向前合并的时候与top_chunk相邻,就直接归到top_chunk中
如果并不相邻就插入到unsorted bin,然后继续取fastbin chunk直到fastbin list为空结束
本例中的触发代码为:
    /*
    ​     If this is a large request, consolidate fastbins before continuing.
    ​     While it might look excessive to kill all fastbins before
    ​     even seeing if there is space available, this avoids
    ​     fragmentation problems normally associated with fastbins.
    ​     Also, in practice, programs tend to have runs of either small or
    ​     large requests, but less often mixtures, so consolidation is not
    ​     invoked all that often in most programs. And the programs that
    ​     it is called frequently in otherwise tend to fragment.
       */
      else
    ​    {
    ​      idx = largebin_index (nb);
    ​      if (have_fastchunks (av))
    ​        malloc_consolidate (av);
    }
  1. 说好的unsorted bin呢????
这还是得从glibc的实现说起,为什么调试的时候我们的chunk并不在unsorted bin中而是在small bin中呢?
对glibc不太熟悉的同学可以先看下我之前的文章[glibc内存管理机制](https://nightrainy.github.io/2019/05/06/glic%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/)
这部分可以在我的文章中搜索large bin直接到第8个地方,不想跳转的同学我这里也做一下简短的解释
我们在分配largebin时,ptmalloc会先遍历一下fastbin,将相邻的 chunk 进行合并，并链接到 unsorted bin 中然后遍历
unsorted bin 中的 chunk，如果 unsorted bin 只 有一个 chunk，并且这个 chunk
在上次分配时被使用过，并且所需分配的 chunk 大 小属于 small bins，并且 chunk 的大小大于等于需要分配的大小，这种情况下就直接将该
chunk 进行切割，分配结束，否则将根据 chunk 的空间大小将其放入 small bins 或是 large bins 中
这就是为什么不在unsorted bin而在small bin中的原因了