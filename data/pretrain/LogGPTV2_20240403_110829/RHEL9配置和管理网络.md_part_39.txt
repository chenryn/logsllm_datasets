    ```
4.  建立连接后，验证 `ss`{.literal} 输出以查看特定于子流的状态：
    ``` literallayout
    # ss -nti '( dport :5201 )'
    State Recv-Q Send-Q Local Address:Port Peer Address:Port Process
    ESTAB 0      0      127.0.0.1:41842    127.0.0.1:5201
    cubic wscale:7,7 rto:205 rtt:4.455/8.878 ato:40 mss:21888 pmtu:65535 rcvmss:536 advmss:65483 cwnd:10 bytes_sent:141 bytes_acked:142 bytes_received:4 segs_out:8 segs_in:7 data_segs_out:3 data_segs_in:3 send 393050505bps lastsnd:2813 lastrcv:2772 lastack:2772 pacing_rate 785946640bps delivery_rate 10944000000bps delivered:4 busy:41ms rcv_space:43690 rcv_ssthresh:43690 minrtt:0.008 tcp-ulp-mptcp flags:Mmec token:0000(id:0)/2ff053ec(id:0) seq:3e2cbea12d7673d4 sfseq:3 ssnoff:ad3d00f4 maplen:2
    ```
5.  使用 `nstat MPTcp*`{.literal} 命令验证 MPTCP 计数器：
    ``` literallayout
    # nstat MPTcp*
    #kernel
    MPTcpExtMPCapableSYNRX          2                  0.0
    MPTcpExtMPCapableSYNTX          2                  0.0
    MPTcpExtMPCapableSYNACKRX       2                  0.0
    MPTcpExtMPCapableACKRX          2                  0.0
    ```
:::
::: itemizedlist
**其他资源**
-   `TCP(7)`{.literal} man page
-   `mptcpize(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#getting-started-with-multipath-tcp_configuring-and-managing-networking.html#using-iproute2-to-configure-and-enable-multiple-paths-for-mptcp-applications_getting-started-with-multipath-tcp}使用 iproute2 为 MPTCP 应用程序配置并启用多个路径 {.title}
:::
每个 MPTCP 连接都使用类似于纯 TCP 的单个子流。要使用 MPTCP
的好处，为每个 MPTCP
连接指定最大的子流数，并配置附加端点来创建这些子流。
请注意，MPTCP 尚不支持为同一套接字混合 IPv6 和 IPv4
端点。使用属于同一地址系列的端点。
::: itemizedlist
**先决条件**
-   已安装 `mptcpd`{.literal} 软件包
-   安装了 `iperf3`{.literal} 软件包
-   服务器网络接口设置：
    ::: itemizedlist
    -   enp4s0: [**192.0.2.1/24**]{.strong}
    -   enp1s0: [**198.51.100.1/24**]{.strong}
    :::
-   客户端网络接口设置：
    ::: itemizedlist
    -   enp4s0f0: [**192.0.2.2/24**]{.strong}
    -   enp4s0f1: [**198.51.100.2/24**]{.strong}
    :::
:::
::: orderedlist
**步骤**
1.  将服务器上每个连接的额外子流限值设置为 `1`{.literal}:
    ``` literallayout
    # ip mptcp limits set subflow 1
    ```
    请注意，可设置每个连接可以拥有的 [*additional*]{.emphasis}
    子流的最大数量，不包括初始流。
2.  将客户端上的每个连接和其他子流限制设置为 `1`{.literal}：
    ``` literallayout
    # ip mptcp limits set subflow 1 add_addr_accepted 1
    ```
3.  在服务器中添加 IP 地址 `198.51.100.1`{.literal} 作为新的 MPTCP
    端点：
    ``` literallayout
    # ip mptcp endpoint add 198.51.100.1 dev enp1s0 signal
    ```
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    您可以将标志的下列值设置为
    `subflow`{.literal}、`备份`{.literal}、`signal`{.literal}。将标签设置为：
    ::: itemizedlist
    -   `信号`{.literal}，在三向之时发送 `ADD_ADDR`{.literal} 数据包
    -   `子流`{.literal}，由客户端发送 `MP_JOIN SYN`{.literal}
    -   `备份`{.literal}，将端点设置为备份地址
    :::
    :::
4.  启动 `iperf3`{.literal} 服务器，并强制它创建 MPTCP 套接字而不是 TCP
    套接字：
    ``` literallayout
    # mptcpize run iperf3 -s
    Server listening on 5201
    ```
5.  将客户端连接到服务器，并强制它创建 MPTCP 套接字而不是 TCP 套接字：
    ``` literallayout
    # mptcpize iperf3 -c 192.0.2.1 -t 3
    ```
:::
::: orderedlist
**验证步骤**
1.  验证连接是否已建立：
    ``` literallayout
    # ss -nti '( sport :5201 )'
    ```
2.  验证连接和 IP 地址限制：
    ``` literallayout
    # ip mptcp limit show
    ```
3.  验证新添加的端点：
    ``` literallayout
    # ip mptcp endpoint show
    ```
4.  在服务器中使用 `nstat MPTcp*`{.literal} 命令验证 MPTCP 计数器：
    ``` literallayout
    # nstat MPTcp*
    #kernel
    MPTcpExtMPCapableSYNRX          2                  0.0
    MPTcpExtMPCapableACKRX          2                  0.0
    MPTcpExtMPJoinSynRx             2                  0.0
    MPTcpExtMPJoinAckRx             2                  0.0
    MPTcpExtEchoAdd                 2                  0.0
    ```
:::
::: itemizedlist
**其他资源**
-   `ip-mptcp(8)`{.literal} man page
-   `mptcpize(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#getting-started-with-multipath-tcp_configuring-and-managing-networking.html#proc_monitoring-mptcp-sub-flows_getting-started-with-multipath-tcp}监控 MPTCP 子流 {.title}
:::
多路径 TCP(MPTCP)套接字的生命周期可能比较复杂：创建了主 MPTCP
套接字，MPTCP 路径会被验证，并最终会创建一个或多个子流。最后，MPTCP
套接字会被终止。
MPTCP 协议允许使用 `iproute`{.literal} 软件包提供的 `ip`{.literal}
工具监控与套接字和子流创建和删除相关的 MPTCP 事件。这个工具使用
`netlink`{.literal} 接口来监控 MPTCP 事件。
此流程演示了如何监控 MPTCP 事件。因此，它会模拟 MPTCP
服务器应用程序，客户端会连接到这个服务。本例中涉及的客户端使用以下接口和
IP 地址：
::: itemizedlist
-   Server: `192.0.2.1`{.literal}
-   客户端（Ethernet 连接）： `192.0.2.2`{.literal}
-   客户端（WiFi 连接）： `192.0.2.3`{.literal}
:::
为简化这一示例，所有接口都在同一个子网中。这不是必须的。但是，务必要正确配置路由，并且客户端能够通过两个接口访问服务器。
::: itemizedlist
**先决条件**
-   有两个网络接口的 RHEL 客户端，如使用以太网和 WiFi 的笔记本电脑
-   客户端可以通过两个接口连接到服务器
-   RHEL 服务器
-   客户端和服务器运行 RHEL 9.0 或更高版本
-   在客户端和服务器上安装了 `mptcpd`{.literal} 软件包
:::
::: orderedlist
**流程**
1.  将客户端和服务器上的每个连接额外子流限制设置为 `1：`{.literal}
    ``` literallayout
    # ip mptcp limits set add_addr_accepted 0 subflows 1
    ```
2.  在服务器中，要模拟 MPTCP 服务器应用程序，使用强制的 MPTCP
    套接字而不是 TCP 套接字以侦听模式启动 `netcat`{.literal}
    (`nc`{.literal})：
    ``` literallayout
    # mptcpize run nc -l -k -p 12345
    ```
    `k`{.literal} 选项可使 `nc`{.literal}
    在第一次接受连接后不关闭监听程序。这要求演示子流的监控。
3.  在客户端中：
    ::: orderedlist
    1.  识别具有最低指标的接口：
        ``` literallayout
        # ip -4 route
        192.0.2.0/24 dev enp1s0 proto kernel scope link src 192.0.2.2 metric 100
        192.0.2.0/24 dev wlp2s0 proto kernel scope link src 192.0.2.3 metric 600
        ```
        `enp1s0`{.literal} 接口的指标比 `wlp2s0`{.literal}
        低。因此，RHEL 默认使用 `enp1s0`{.literal}。
    2.  在第一个终端中，启动监控：
        ``` literallayout
        # ip mptcp monitor
        ```
    3.  在第二个终端中，启动到服务器的 MPTCP 连接：
        ``` literallayout
        # mptcpize run nc 192.0.2.1 12345
        ```
        RHEL 使用 `enp1s0`{.literal} 接口及其关联的 IP
        地址作为此连接的源。
        在监控终端中，\"ip mptcp 监控\"命令现在的日志：
        ``` literallayout
        [       CREATED] token=63c070d2 remid=0 locid=0 saddr4=192.0.2.2 daddr4=192.0.2.1 sport=36444 dport=12345
        ```
        这个令牌将 MPTCP 套接字标识为唯一 ID，以后它会在同一套接字上关联
        MPTCP 事件。
    4.  在带有运行 `nc`{.literal} 连接到服务器的终端，按
        [**Enter**]{.keycap}
        键。第一个数据数据包完全建立连接。请注意，只要没有发送任何数据，就不会建立连接。
        在监控终端中，`ip mptcp`{.literal} 现在监控日志：
        ``` literallayout
        [   ESTABLISHED] token=63c070d2 remid=0 locid=0 saddr4=192.0.2.2 daddr4=192.0.2.1 sport=36444 dport=12345
        ```
    5.  可选：显示与服务器上端口 `12345`{.literal} 的连接：
        ``` literallayout
        # ss -taunp | grep ":12345"
        tcp ESTAB  0  0         192.0.2.2:36444 192.0.2.1:12345
        ```
        此时，只建立与服务器的连接。
    6.  在第三个终端中，创建另一个端点：
        ``` literallayout
        # ip mptcp endpoint add dev wlp2s0 192.0.2.3 subflow
        ```
        此命令设置此命令中客户端的 WiFi 接口的名称和 IP 地址。
        在监控终端中，`ip mptcp`{.literal} 现在监控日志：
        ``` literallayout
        [SF_ESTABLISHED] token=63c070d2 remid=0 locid=2 saddr4=192.0.2.3 daddr4=192.0.2.1 sport=53345 dport=12345 backup=0 ifindex=3
        ```
        `locid`{.literal} 字段显示新子流的本地地址
        ID，即使连接使用了网络地址转换(NAT)，也标识此子流。`saddr4`{.literal}
        字段与 `ip mptcp 端点 add`{.literal} 命令的端点 IP 地址匹配。
    7.  可选：显示与服务器上端口 `12345`{.literal} 的连接：
        ``` literallayout
        # ss -taunp | grep ":12345"
        tcp ESTAB  0  0         192.0.2.2:36444 192.0.2.1:12345
        tcp ESTAB  0  0  192.0.2.3%wlp2s0:53345 192.0.2.1:12345
        ```
        该命令现在显示两个连接：
        ::: itemizedlist
        -   与源地址 `192.0.2.2`{.literal} 的连接与之前建立的第一个
            MPTCP 子流对应。
        -   从带有源地址 `192.0.2.3`{.literal} 的 `wlp2s0`{.literal}
            接口的子流的连接。
        :::
    8.  在第三个终端上，删除端点：
        ``` literallayout
        # ip mptcp endpoint delete id 2
        ```
        使用 `ip mptcp 监控`{.literal} 输出中的 `locid`{.literal} 字段的
        ID，或者使用 `ip mptcp endpoint show`{.literal} 命令来检索端点
        ID。
        在监控终端中，`ip mptcp`{.literal} 现在监控日志：
        ``` literallayout
        [     SF_CLOSED] token=63c070d2 remid=0 locid=2 saddr4=192.0.2.3 daddr4=192.0.2.1 sport=53345 dport=12345 backup=0 ifindex=3
        ```
    9.  在第一个带有 `nc`{.literal} 客户端的终端上，按
        [**Ctrl**]{.keycap}+[**C**]{.keycap} 终止会话。
        在监控终端中，`ip mptcp`{.literal} 现在监控日志：
        ``` literallayout
        [        CLOSED] token=63c070d2
        ```
    :::
:::
::: itemizedlist
**其他资源**
-   `ip-mptcp(1)`{.literal} man page
-   [NetworkManager
    如何管理多个默认网关](#managing-the-default-gateway-setting_configuring-and-managing-networking.html#con_how-networkmanager-manages-multiple-default-gateways_managing-the-default-gateway-setting "NetworkManager 如何管理多个默认网关"){.link}
:::
:::
::: section
::: titlepage
# []{#getting-started-with-multipath-tcp_configuring-and-managing-networking.html#disabling-multipath-tcp-in-the-kernel_getting-started-with-multipath-tcp}在内核中禁用多路径 TCP {.title}
:::
这个步骤描述了如何在内核中禁用 MPTCP 选项。
::: itemizedlist
**步骤**
-   禁用 `mptcp.enabled`{.literal} 选项。
    ``` literallayout
    # echo "net.mptcp.enabled=0" > /etc/sysctl.d/90-enable-MPTCP.conf
    # sysctl -p /etc/sysctl.d/90-enable-MPTCP.conf
    ```
:::
::: itemizedlist
**验证步骤**
-   验证 `mptcp.enabled`{.literal} 是否在内核中被禁用。
    ``` literallayout
    # sysctl -a | grep mptcp.enabled
    net.mptcp.enabled = 0
    ```
:::
:::
:::
[]{#assembly_managing-the-mptcpd-service_configuring-and-managing-networking.html}