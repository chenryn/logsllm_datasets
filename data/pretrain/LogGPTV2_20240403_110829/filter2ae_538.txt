# 应对 iOS ZipperDown 漏洞：策略与方法
##### 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。
来源：360 信息安全部-涅槃团队

昨天傍晚，盘古实验室负责任地披露了针对 iOS 应用的 [ZipperDown](https://mp.weixin.qq.com/s/SMpBQ4mZQLVLfgK7f84OYA) 漏洞，并提供了检索和查询受影响应用的平台：[zipperdown.org](https://zipperdown.org/)。根据目前公开的信息，该漏洞影响范围广泛，可能有超过 15,000 个应用受到影响。结合应用中的其他安全缺陷，攻击者可以在某些应用上获得远程任意代码执行能力，从而实现远程控制目标应用，潜在危害较大。由于官方尚未公开 ZipperDown 的详细信息，本文将探讨针对 iOS 应用的防御策略以及具体功能点的安全加固方法。

## 防御的基本原则与策略
在讨论防御措施时，我们需要基于一定的信任基础。对于 iOS 应用而言，我们信任的基础是 iOS 系统及其服务，即认为它们是可信且安全的。iOS 提供的基本安全特性包括代码签名和沙盒机制。代码签名确保只有经过苹果签名的代码才能在设备上运行；沙盒则限制了应用程序的行为，防止一个应用访问另一个应用的数据文件。

### 第一条策略：充分利用现有安全资源
iOS 还提供了其他一些安全特性，如 Keychain 和用户数据加密等。我们在构建防御体系时应充分利用这些现有的安全功能，这样可以显著降低防御成本。换句话说，我们应该基于现有的防御阵地来搭建自己的防线。

### 第二条策略：多层次防御
没有单一的防御措施能够全面保障应用的安全。例如，虽然从 iOS 8.4 开始无法导出单个应用存储在设备上的文件，但我们仍应对本地存储的数据进行加密。因为通过备份手机等手段仍然可以获得应用的数据。因此，对本地数据进行加密可以增加一层额外的防御。

### 第三条策略：重点关注主要威胁
对于 iOS 应用而言，主要威胁是远程代码执行。为了防止这种攻击，首先需要避免中间人攻击（MitM）。为此，我们要求 App 与服务器之间的通信使用 HTTPS 并正确校验证书。此外，还应特别关注允许用户生成内容的应用，进一步缩小攻击面。

### 第四条策略：避免因业务需求降低安全性
例如，脚本能力（或热补丁）会破坏代码签名这一重要安全特性，使攻击者更容易获得远程代码执行能力。因此，在引入这类功能时需格外谨慎，以免降低整体安全性。

## 具体功能点的安全加固方法
接下来，我们将针对几个常见的安全场景提供具体的加固建议。

### 数据库文件安全
**描述**  
移动应用通常使用 SQLite 数据库存储应用数据，但在 iOS 8.4 之前的设备或越狱设备上，数据库文件容易被导出。若数据未加密，则存在敏感信息泄露的风险。

**建议**  
- 使用复杂的加密算法对敏感数据进行加密后存储。

### NSUserDefaults 安全
**描述**  
NSUserDefaults 是一种常用的保存用户信息的方法，但其中的数据并未加密，可以从沙盒中轻易获取。

**建议**  
- 将重要的敏感数据存储在 Keychain 中。

### Keychain 安全
**描述**  
Keychain 是 iOS 设备中用于存储敏感信息的安全容器，但若未正确管理，可能导致数据泄露。

**建议**  
- 在首次安装应用时删除 Keychain 数据。

### 后台快照
**描述**  
iOS 在应用退出时会保存当前界面的快照，如果页面包含密码等关键信息，可能会导致安全隐患。

**建议**  
- 在 `applicationDidEnterBackground:` 方法中隐藏敏感信息。

### Cookie 安全
**描述**  
Cookie 存储在本地终端上，如果以明文形式存储，非常危险。

**建议**  
- 对 Cookie 进行复杂加密。
- 将部分 Cookie 加密后存储在 Keychain 中。

### HTTPS 安全
**描述**  
使用 HTTPS 通信是一种更安全的做法，但若不校验证书，仍可能遭受中间人攻击。

**建议**  
- 对 HTTPS 证书进行校验。
- 避免使用存在漏洞的第三方网络库。
- 对关键数据单独加密。

### WebView 安用
**描述**  
WebView 控件常用于加载网页，但也带来了新的安全风险。

**建议**  
- 对输入进行过滤和编码。
- 减少敏感接口的注册，避免加载第三方内容。
- 通过白名单机制在 WebView 的 Delegate 方法中检查调用者。

### 加密算法
**描述**  
在 iOS 应用中，经常需要加密存储敏感数据。一旦加密算法被破解，所有数据都将暴露。

**建议**  
- 使用 AES、DES 或 3DES 等对称加密算法。
- 对于高安全需求的场景，使用非对称加密算法如 RSA。
- 避免硬编码密钥和初始化向量（IV），可基于设备信息生成。

### 开发环境安全
**描述**  
开发人员可能从非官方渠道下载开发工具，存在被恶意篡改的风险。

**建议**  
- 从官方下载 Xcode。
- 打包 IPA 文件时，正确配置 Build Phases 和 Copy Bundle Resources。

### 系统日志输出安全
**描述**  
开发过程中使用 NSLog 输出的日志可能泄漏敏感信息。

**建议**  
- 使用宏控制测试版和发布版本的日志输出。
- 发布时关闭日志输出。

## 团队介绍
360 涅槃团队（Nirvan Team）隶属于 360 公司信息安全部，负责公司所有 iOS 应用的安全，并进行苹果平台相关的安全研究。该团队在操作系统层面发现了大量漏洞，并多次获得苹果官方致谢。团队积极参与社区分享，发表多篇技术文章，并在国内外安全会议上发表主题演讲。

联系方式：[PI:EMAIL](mailto:PI:EMAIL)