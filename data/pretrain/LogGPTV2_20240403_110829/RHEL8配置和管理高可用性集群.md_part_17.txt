+----------------------+----------------------+----------------------+
| `fence               | stop                 | （Red Hat Enterprise |
| -reaction`{.literal} |                      | Linux 8.2            |
|                      |                      | 及更新               |
|                      |                      | 的版本）决定当集群节 |
|                      |                      | 点有其自身隔离通知时 |
|                      |                      | 该如何响应。如果错误 |
|                      |                      | 配置了隔离，或者使用 |
|                      |                      | fabric               |
|                      |                      | 隔离方式当没有中断集 |
|                      |                      | 群的通信，集群节点可 |
|                      |                      | 能会收到其自身隔离的 |
|                      |                      | 通知信息。允许的值为 |
|                      |                      | `stop`{.lite         |
|                      |                      | ral}，来尝试立即停止 |
|                      |                      | Pacemaker            |
|                      |                      | 并                   |
|                      |                      | 保持停止状态，或者为 |
|                      |                      | `panic`{.literal}    |
|                      |                      | ，来尝试立即         |
|                      |                      | 重启本地节点，并在失 |
|                      |                      | 败时退回到停止状态。 |
|                      |                      |                      |
|                      |                      | 虽然                 |
|                      |                      | 此属性的默认值已停止 |
|                      |                      | `，`{.literal}       |
|                      |                      | 但                   |
|                      |                      | 这个值的最安全选择是 |
|                      |                      | `panic`{.literal}，  |
|                      |                      | 它会尝试立即重启本地 |
|                      |                      | 节点。如果您希望使用 |
|                      |                      | stop（通常是使用     |
|                      |                      | fabric               |
|                      |                      | 隔                   |
|                      |                      | 离方式时），建议对这 |
|                      |                      | 个参数进行明确设定。 |
+----------------------+----------------------+----------------------+
:::
:::
有关设置集群属性的详情，请参考
[设置和删除集群属性](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_high_availability_clusters/assembly_controlling-cluster-behavior-configuring-and-managing-high-availability-clusters#setting-cluster-properties-controlling-cluster-behavior){.link}。
:::
::: section
::: titlepage
# []{#assembly_configuring-fencing-configuring-and-managing-high-availability-clusters.html#proc_testing-fence-devices-configuring-fencing}测试隔离设备 {.title}
:::
隔离是红帽群集基础架构的基本部分，验证或测试隔离是否正常工作非常重要。
::: title
**流程**
:::
使用以下步骤测隔离护设备。
::: orderedlist
1.  使用 ssh、telnet、HTTP
    或者任何远程协议连接到该设备以便手动登录并测试隔离设备或者查看给出的输出。例如，如果您要为启用
    IPMI 的设备配置隔离，请尝试使用 `ipmitool`{.literal}
    远程登录。记录手动登录时使用的选项，因为在使用隔离代理时可能需要使用这些选项。
    如果您无法登录到隔离设备，请确定设备是可以被 ping
    到的，没有因为如防火墙等配置限制对隔离设备的访问，在隔离设备中启用了远程访问，且有正确的凭证。
2.  使用隔离代理脚本手动运行隔离代理。这不需要集群服务正在运行，因此您可以在集群配置该设备前执行这个步骤。这可保证在继续前隔离设备响应正常。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    本节中的示例将 `fence_ipmilan`{.literal} 隔离代理脚本用于 iLO
    设备。您使用的实际隔离代理以及调用代理的命令取决于服务器硬件。您应该参考您使用的隔离保护代理的
    man
    页来确定要指定的选项。您通常需要了解隔离设备的登录和密码，以及其它与该隔离设备相关的信息。
    :::
    以下示例显示了使用 `-o status`{.literal} 参数运行
    `fence_ipmilan`{.literal}
    隔离代理脚本的格式，以检查另一个节点上的隔离设备接口的状态，而不实际对其进行隔离。这可让您在尝试重新引导节点前测试该设备并使其可用。在运行这个命令时，您可以为
    iLO 设备指定打开和关闭权限的 iLO 用户的名称和密码。
    ``` literallayout
    # fence_ipmilan -a ipaddress -l username -p password -o status
    ```
    以下示例显示了使用 `-o reboot`{.literal} 参数运行
    `fence_ipmilan`{.literal}
    隔离代理脚本的格式。在一个节点上运行此命令可重新引导此 iLO
    设备管理的节点。
    ``` literallayout
    # fence_ipmilan -a ipaddress -l username -p password -o reboot
    ```
    如果隔离代理无法正确地执行 status、off、on 或 reboot
    操作，您应该检查硬件、隔离设备的配置以及命令的语法。另外，您可以运行启用了
    debug
    输出的隔离代理脚本。调试输出会记录隔离设备时失败的事件，对于一些隔离代理，这个信息可能非常有用。
    ``` literallayout
    # fence_ipmilan -a ipaddress -l username -p password -o status -D /tmp/$(hostname)-fence_agent.debug
    ```
    当诊断发生的故障时，您应该确定手动登录到隔离设备时指定的选项与您使用隔离代理传递给隔离代理的操作相同。
    对于支持加密连接的隔离代理，您可能会因为证书验证失败而看到错误，这需要您信任主机或使用隔离代理的
    `ssl-insecure`{.literal} 参数。同样，如果在目标设备上禁用了
    SSL/TLS，可能需要在为隔离代理设置 SSL 参数时考虑此事项。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    如果正在测试的隔离代理是
    `fence_drac`{.literal}、`fence_ilo`{.literal}
    或系统管理设备的其他一些隔离代理，并且仍会尝试
    `fence_ipmilan`{.literal}。大多数系统管理卡支持 IPMI
    远程登录，唯一支持的隔离代理是 `fence_ipmilan`{.literal}。
    :::
3.  在群集中使用手动运行并启动群集相同的选项配置隔离设备后，可以从任何节点（或者多次来自不同节点）使用
    `pcs stonith fence`{.literal}
    命令测试隔离，如下例所示。`pcs stonith fence`{.literal} 命令从 CIB
    中读取群集配置，并调用配置的隔离代理来执行隔离操作。这会验证集群配置是否正确。
    ``` literallayout
    # pcs stonith fence node_name
    ```
    如果 `pcs stonith fence`{.literal}
    命令正常工作，这意味着发生隔离事件时群集的隔离配置应该可以正常工作。如果命令失败，这意味着集群管理无法通过它获取的配置调用隔离设备。检查以下问题并根据需要更新集群配置。
    ::: itemizedlist
    -   检查您的隔离配置。例如，如果您使用了主机映射，则应该确保系统可以使用您提供的主机名查找节点。
    -   检查该设备的密码和用户名是否包含 bash shell
        可能会错误解析的特殊字符。请确定，使用引号来包括您输入的密码和用户名是否可以解决这个问题。
    -   检查是否可以使用您在 `pcs stonith`{.literal} 命令中指定的 IP
        地址或主机名连接到该设备。例如：如果您在 stonith
        命令中给出主机名，但使用 IP
        地址进行测试，则这不是一个有效的测试。
    -   如果您可以访问您的隔离设备使用的协议，使用那个协议尝试连接该设备。例如，很多代理都使用
        ssh 或者
        telnet。您应该尝试使用您在配置该设备时提供的凭证连接到该设备，查看是否收到有效提示符并登录该设备。
        如果您确定所有参数都正确，但仍无法连接到隔离设备，则可以查看隔离设备的日志信息（如果隔离设备提供了日志）。这会显示该用户是否已连接以及该用户发出什么命令。您还可以在
        `/var/log/messages`{.literal} 文件中搜索 stonith 和 error
        实例，它们可以让大家了解正在转换的内容，但有些代理可以提供更多信息。
    :::
4.  隔离设备测试正常工作并启动并运行集群后，测试实际故障。要做到这一点，在集群中执行应启动令牌丢失的操作。
    ::: itemizedlist
    -   关闭网络。如何关闭网络取决于您的具体配置。在很多情况下，您可以从主机中物理拔掉网线或电源电缆。有关模拟网络失败的信息，请参阅[模拟
        RHEL
        集群中的网络故障的正确方法是什么？](https://access.redhat.com/solutions/79523/){.link}
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        不推荐通过在本地主机中禁用网络接口而不是物理断开网线或者电源电缆的方法进行测试，因为这无法准确模拟典型的实际失败。
        :::
    -   使用本地防火墙的阻塞 corosync 的入站和出站网络流落。
        以下示例会阻止 corosync，假设使用默认的 corosync
        端口，`firewalld`{.literal} 用作本地防火墙，corosync
        使用的网络接口位于默认防火墙区内：
        ``` literallayout
        # firewall-cmd --direct --add-rule ipv4 filter OUTPUT 2 -p udp --dport=5405 -j DROP
        # firewall-cmd --add-rich-rule='rule family="ipv4" port port="5405" protocol="udp" drop'
        ```
    -   使用 `sysrq-trigger`{.literal}
        模拟崩溃，并使您的机器死机。请注意，触发内核 panic
        可能会导致数据丢失 ; 建议首先禁用集群资源。
        ``` literallayout
        # echo c > /proc/sysrq-trigger
        ```
    :::
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-fencing-configuring-and-managing-high-availability-clusters.html#proc_configuring-fencing-levels-configuring-fencing}配置隔离级别 {.title}
:::
Pacemaker
通过一个称为隔离拓扑的功能实现有多个设备的节点的隔离。要实现拓扑结构，根据常规创建独立设备，然后在配置中的隔离拓扑部分定义一个或多个隔离级别。
Pacemaker 处理隔离级别，如下所示：
::: itemizedlist
-   级别以整数形式递增，从 1 开始。
-   如果设备失败，对当前级别的处理会中断。不会执行该级别的其他设备，而是尝试下一个级别。
-   如果所有设备被成功隔离，那么该级别已成功，且不会尝试其他级别。
-   当一个级别被通过（success）或所有级别都已经被尝试（failed）后，操作就会完成。
:::
使用以下命令为节点添加隔离级别。这些设备以使用用逗号分开的 stonith id
列表形式提供，它们是该级别要尝试的节点。
``` literallayout
pcs stonith level add level node devices
```
以下命令列出目前配置的所有隔离级别。
``` literallayout
pcs stonith level
```
在以下示例中，为节点 `rh7-2`{.literal} 配置了两个隔离设备：名为
`my_ilo`{.literal} 的 ilo 隔离设备，以及名为 `my_apc`{.literal} 的 apc
隔离设备。这些命令设定隔离级别，以便在设备 `my_ilo`{.literal}
失败且无法隔离该节点时，Pacemaker 将尝试使用设备
`my_apc`{.literal}。本例还显示了配置级别后，
`pcs stonith level`{.literal} 命令的输出。
``` literallayout
# pcs stonith level add 1 rh7-2 my_ilo
# pcs stonith level add 2 rh7-2 my_apc
# pcs stonith level
 Node: rh7-2
  Level 1 - my_ilo
  Level 2 - my_apc
```
以下命令删除指定节点和设备的隔离级别。如果没有指定节点或设备，则您指定的隔离级别会从所有节点中删除。
``` literallayout
pcs stonith level remove level [node_id] [stonith_id] ... [stonith_id]
```
以下命令清除指定节点或者 stonith id 的隔离级别。如果您没有指定节点或
stonith id，则会清除所有隔离级别。
``` literallayout
pcs stonith level clear [node|stonith_id(s)]
```
如果您指定一个以上的 stonith
id，则必须用逗号分开（不要有空格），如下例所示。
``` literallayout
# pcs stonith level clear dev_a,dev_b
```
以下命令可验证所有在隔离级别指定的隔离设备和节点是否存在。
``` literallayout
pcs stonith level verify
```
您可以在隔离拓扑中通过在节点名称上应用的正则表达式、节点属性及其值来指定节点。例如，以下命令将节点
`node1`{.literal}、node`2`{.literal} 和 `'node3`{.literal}
配置为使用隔离设备 `apc1`{.literal} 和 `'apc2`{.literal}，以及节点
`'node4`{.literal}、node`5`{.literal} 和 `'node6`{.literal}
以使用隔离设备 `apc3`{.literal} 和 `'apc4`{.literal}。
``` literallayout
pcs stonith level add 1 "regexp%node[1-3]" apc1,apc2
pcs stonith level add 1 "regexp%node[4-6]" apc3,apc4
```
以下命令通过使用节点属性匹配得到同样的结果。
``` literallayout
pcs node attribute node1 rack=1
pcs node attribute node2 rack=1
pcs node attribute node3 rack=1
pcs node attribute node4 rack=2
pcs node attribute node5 rack=2
pcs node attribute node6 rack=2
pcs stonith level add 1 attrib%rack=1 apc1,apc2
pcs stonith level add 1 attrib%rack=2 apc3,apc4
```
:::
::: section
::: titlepage
# []{#assembly_configuring-fencing-configuring-and-managing-high-availability-clusters.html#proc_configuring-fencing-for-redundant-power-configuring-fencing}配置冗余电源的隔离 {.title}
:::
当为冗余电源配置隔离时，集群必须确保在尝试重启主机时，在恢复电源前两个电源都关闭。
如果节点永远无法完全断电，则该节点可能无法释放其资源。这可能会导致同时访问这些资源，并导致节点崩溃的问题。
您需要为每个设备定义一次，并指定它们需要隔离该节点，如下例所示。
``` literallayout
# pcs stonith create apc1 fence_apc_snmp ipaddr=apc1.example.com login=user passwd='7a4D#1j!pz864' pcmk_host_map="node1.example.com:1;node2.example.com:2"
# pcs stonith create apc2 fence_apc_snmp ipaddr=apc2.example.com login=user passwd='7a4D#1j!pz864' pcmk_host_map="node1.example.com:1;node2.example.com:2"
# pcs stonith level add 1 node1.example.com apc1,apc2
# pcs stonith level add 1 node2.example.com apc1,apc2
```
:::
::: section
::: titlepage
# []{#assembly_configuring-fencing-configuring-and-managing-high-availability-clusters.html#proc_displaying-configuring-fence-devices-configuring-fencing}显示配置的隔离设备 {.title}