# Migration from Various Databases to PostgreSQL

## Overview
- **Presenters**: Joe Conway, Michael Meskes at PostgresOpen 2011
- **Database Migrations Covered**:
  - Oracle to PostgreSQL
  - Informix to PostgreSQL
  - MySQL to PostgreSQL
  - MSSQL to PostgreSQL

## Data Types
### General
- Both Oracle and PostgreSQL support a wide range of SQL-conforming data types.
- However, nonconforming data types are often more widely used.
- Thin compatibility layers can help, but they may make the PostgreSQL application less elegant.
- A large-scale search-and-replace operation is usually necessary.

### Specifics
- **VARCHAR2**: Convert to `VARCHAR` or `TEXT`
- **CLOB, LONG**: Convert to `VARCHAR` or `TEXT`
- **NCHAR, NVARCHAR2, NCLOB**: Convert to `VARCHAR` or `TEXT`
- **NUMBER**: Convert to `NUMERIC`, `BIGINT`, `INT`, `SMALLINT`, `DOUBLE PRECISION`, or `REAL` (be cautious of potential bugs)
- **BINARY FLOAT/BINARY DOUBLE**: Convert to `REAL` or `DOUBLE PRECISION`
- **BLOB, RAW, LONG RAW**: Convert to `BYTEA` (additional porting required)
- **DATE**: Convert to `DATE` or `TIMESTAMP`

## Null Values
- **Oracle Behavior**: `NULL = ''` is true, but `'' = ''` is false.
- **PostgreSQL Behavior**: This behavior is not supported. The `transform_null_equals` setting does not resolve this issue.
- **Impact**: If your application relies on this behavior, it will need significant adjustments.

## Sequences
### Creating
- **Compatibility**: Sequences in Oracle and PostgreSQL are somewhat compatible.
- **Modifications**:
  - Change `NOCACHE` to `CACHE 1` or omit it.
  - Reduce `MAXVALUE` if it is set to an extremely high value.
  - Do not rely on caching behavior.

### Using
- **Oracle Syntax**: `sequence_name.nextval`
- **PostgreSQL Syntax**: `nextval('sequence_name')`
- **Action**: Perform a search-and-replace, though direct sequence calls are rare.

## ROWNUM and ROWID
- **ROWNUM**:
  - Use `generate_series`.
  - Rewrite and apply `LIMIT`.
  - Handle in the client.
- **ROWID**:
  - Analogous to `ctid` in PostgreSQL.
  - Good code should avoid using `ROWID`.

## SQL Syntax
- **Identifiers**: Oracle case-folds to uppercase, while PostgreSQL folds to lowercase. Mixing quoted and unquoted identifiers can cause issues.
- **Column Aliases**: Oracle often omits `AS` in `SELECT foo AS bar`, but PostgreSQL requires it. This was fixed in PostgreSQL 8.4.
- **MINUS**: Change to `EXCEPT`.
- **SQL Keywords**: Generally not a big problem but should be kept in mind.
- **"FROM dual"**: Easy to work around, or use `orafce`.

## Outer Joins
- **PostgreSQL**: Supports only the SQL-standard outer join syntax.
- **Oracle**: Supports the standard syntax since version 9, but most Oracle code uses the old, Oracle-specific syntax.
- **Porting**: Usually straightforward but requires manual work. Set up test queries to catch mistakes.

## Functions
### General
- **Compatibility**: Function compatibility is a complex area.
- **PostgreSQL Support**: Many Oracle functions are supported with `orafce`.
- **Custom Functions**: It's easy to write your own functions.
- **Special Syntax**: Can be problematic.

### Compatibility
- **Supported Functions**:
  - `substr`
  - `to_char`
  - `nvl`, `nullif` (with `orafce`)

### Specifics
- **Manual Adjustments**:
  - `sysdate` â†’ `current_timestamp` or `localtimestamp`

### DECODE
- **Oracle Syntax**: `DECODE(expr, search, expr, ... [, default])`
- **PostgreSQL Syntax**: `CASE WHEN expr THEN search ... ELSE default END`

## Default Parameters
- **PostgreSQL**: Does not support default values for parameters or named parameters in function calls.
- **Oracle**: Applications frequently use both.
- **Impact**: Approximately 97% of applications to be ported contain such issues, requiring rework of client code.

## Client Libraries
- **OCI**: Rewrite with `libpq`
- **ODBC**: Supported
- **JDBC**: Supported
- **Perl-DBI**: Supported
- **Pro*C**: Use `ECPG`

## ECPG
- **Usage**:
  ```sh
  ecpg prog1.pgc  # Creates prog1.c
  cc -c -I/usr/include/postgresql prog1.c  # Creates prog1.o
  cc -o prog prog1.o ... -lecpg  # Creates prog
  ```
- **Parser and Runtime**: Mostly works out of the box, with Pro*C as a blueprint.

### Parser
- **Syntax**:
  - `EXEC SQL VAR`
  - `EXEC SQL TYPE`
  - `EXEC SQL IFNDEF`

### Host Variables
- **Example**:
  ```c
  EXEC SQL BEGIN DECLARE SECTION; /* needed for ECPG */
  int v1;
  VARCHAR v2;
  EXEC SQL END DECLARE SECTION;
  ...
  EXEC SQL DECLARE foo CURSOR FOR SELECT a, b FROM test;
  ...
  do {
    ...
    EXEC SQL FETCH NEXT FROM foo INTO :v1, :v2;
    ...
  } while (...);
  ```

## Encodings
- **Oracle and PostgreSQL**: Support similar encoding concepts but use different names.
- **Review**: This is a good time to review encoding and locale choices.

## Tools
### orafce
- **URL**: [orafce.projects.postgresql.org](http://orafce.projects.postgresql.org/)
- **Features**: Large set of Oracle compatibility functions, "dual" table.
- **Packages**: Available for Debian and RPM.
- **Value**: Invaluable for migration.

### ora2pg
- **URL**: [ora2pg.projects.postgresql.org](http://ora2pg.projects.postgresql.org/)
- **Features**: Converts Oracle schema definitions, extracts data for import into PostgreSQL.
- **Packages**: Available.
- **Value**: Invaluable for migration.

### TOra
- **URL**: [tora.sourceforge.net](http://tora.sourceforge.net/)
- **Features**: GUI for PostgreSQL and Oracle, exploration and debugging facilities for Oracle.
- **Packages**: Available, but usually without Oracle support.
- **Value**: Generally a bit outdated but useful for this purpose.

## Conclusion
- **Joe Conway and Michael Meskes** presented these insights at PostgresOpen 2011, providing a comprehensive guide to migrating from various databases to PostgreSQL.