title:Know Your Achilles' Heel: Automatic Detection of Network Critical
Services
author:Ali Zand and
Amir Houmansadr and
Giovanni Vigna and
Richard A. Kemmerer and
Christopher Kruegel
Know Your Achilles’ Heel:
Automatic Detection of Network Critical Services
Ali Zand
UC Santa Barbara
PI:EMAIL
Amir Houmansadr
UMass Amherst
PI:EMAIL
Giovanni Vigna
UC Santa Barbara
PI:EMAIL
Richard Kemmerer
UC Santa Barbara
PI:EMAIL
Christopher Kruegel
UC Santa Barbara
PI:EMAIL
ABSTRACT
Administrators need eﬀective tools to quickly and automat-
ically obtain a succinct, yet informative, overview of the
status of their networks to make critical administrative de-
cisions in a timely and eﬀective manner. While the existing
tools might help in pointing out machines that are heavily
used or services that are failing, more subtle relationships,
such as indirect dependencies between services, are not made
apparent.
In this paper, we propose novel techniques to
automatically provide insights into the state of a network
and the importance of the network components. We devel-
oped a tool, called Paris, which receives traﬃc information
from various oﬀ-the-shelf network monitoring devices. Paris
computes an importance metric for the network’s compo-
nents based on which the administrators can prioritize their
defensive and prohibitive actions. We evaluated Paris by
running it on a mid-size, real-world network. The results
show that Paris is able to automatically provide situation
awareness in a timely, eﬀective manner.
1.
INTRODUCTION
Today’s computer networks have turned into complex in-
frastructures providing complex inter-dependent services,
which are often transparent or hidden. This complexity is
expected to further increase as engineers tend to build larger
and more complex services by combining the smaller, sim-
pler ones. Even a typical end-user service may be com-
posed of multiple underlying services with complex depen-
dencies. Computer networks are also under ever-increasing
attacks [39]. The ever-increasing complexity of distributed
systems, combined with the constant increase in the vol-
ume and sophistication of attacks to computer networks,
create serious challenges for network administrators in tak-
ing timely, appropriate actions.
For example, a webmail service usually consists of a web
server (to provide the web-based front-end), an email server
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’15, December 07-11, 2015, Los Angeles, CA, USA
c(cid:2) 2015 ACM. ISBN 978-1-4503-3682-6/15/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2818000.2818012
(to send and receive emails), a ﬁle server (to store the emails),
a Kerberos server (to authenticate users), and a DNS server
(to resolve host addresses). Failure of each component of a
complex composite service (a service built up from simpler
services) can cause a failure in the composite service itself.
Therefore, network administrators need tools to monitor
the state of their assets to detect the occurrence of malicious
activities and to foresee the required corrective actions. Tra-
ditional network monitoring tools provide an overwhelming
amount of ﬁne-grained details about the occurrences of ma-
licious events and activities [41]. However, they do not pro-
vide a succinct, high-level understanding of the current and
future states of the network.
In this paper, we study the design of tools that provide
situation awareness for network administrators. In the con-
text of computer networks, situation awareness aims to pro-
vide a decision maker (e.g., a network administrator) with a
high-level overview and understanding of her computer net-
work. More precisely, situation awareness can be deﬁned as
the perception of the network elements, the understanding
of their meaning and importance, and the projection of their
status into the near future [13].
Network situation awareness aims to help a network ad-
ministrator identify important network assets, analyze their
dependencies, and understand the importance of diﬀerent
assets in carrying out the underlying organization’s mis-
sions. A “network asset” broadly describes both the hard-
ware elements (e.g., servers and routers) and the software
elements (e.g., applications and services) that constitute a
computer network. In the context of this work we only con-
sider network services as assets, since the other types of as-
sets are not aﬀected by our analysis. A network mission is a
collection of tasks (services) that are carried out by diﬀerent
network components of an organization to achieve a speciﬁc
goal.
The term “mission” reveals the military roots of the idea
of situation awareness. However, the concept of a mission
is general and equally applies to civilian networks. For ex-
ample, providing web mail services to students can be one
of the missions of a university network. In this case, one of
the tasks might be to send/receive emails, while a second
task is to provide a web interface to users to access their
email accounts. From working with administrators of orga-
nizational networks, we realize that identifying network mis-
sions and ensuring their continuous operation is signiﬁcantly
important. However, doing such through manual investiga-
tion by human administrators is in many ways impractical
41
and ineﬃcient due to the large size of today’s networks, the
error-proneness of human operators, and the lack of docu-
mentation for various network components.
In this paper, we devise novel techniques and tools for au-
tomated situation awareness. Our tool uses data collected
from various network devices to 1) identify network missions,
and, 2) continuously monitor their correct operation; to the
best of our knowledge, we are the ﬁrst to design tools for
automated detection and monitoring of network missions.
Unlike previous work [22, 18] that require higher level in-
formation such as expert knowledge, up-to-date documen-
tation, and human operator interaction to operate, our ap-
proach only uses the reports made by network monitoring
devices. Also, our approach does not require any access to
the network hosts and does not generate extra traﬃc. Our
tool, called Paris, provides three main capabilities by us-
ing a variety of techniques including statistical analysis and
clustering tools. First, Paris processes low-level network
traﬃc data, i.e., NetFlow records, in order to identify and
characterize network services.
Second, Paris determines relationships between the iden-
In particular, it ﬁnds service dependencies
tiﬁed services.
and service redundancies (i.e., services implementing the
same functionality). The knowledge about these relation-
ships is crucial to properly determine the importance of
diﬀerent services. Consider, for example, a service that is
directly responsible for the success of a particular mission.
Quite likely, the system administrators know that this ser-
vice is important. However, this service might also depend
on two other services. These services are not directly in-
volved in the mission, but they are equally important for its
success. It is important to accurately identify these relation-
ships, which often are not obvious.
The third capability of Paris is to rank the discovered
network services. This ranking is based on the importance
of the services towards achieving the organization’s missions.
Paris automatically infers importance scores for services
based on their activity as well as their relations with each
other.
1
We implemented Paris and evaluated its performance on
the network of a large organization,
which contained Net-
Flow records for 1.6 billion network connections produced by
more than 593 hosts (distinct IP addresses). Our tool iden-
tiﬁed a variety of interesting services and missions, as well
as their relationships, whose correctness and comprehensive-
ness were validated by the organization’s network adminis-
trators.
The rest of this paper is organized as follows. In Sections 2
to 4, we describe how Paris extracts network services, infers
their relationships, and ranks them based on their impor-
tance, respectively. We present the implementation results
of Paris in Section 5 and discuss diﬀerent issues in Section 6.
The related work is discussed in Section 7, and we conclude
the paper in Section 8.
2. EXTRACTING NETWORK SERVICES
In the ﬁrst step, Paris extracts a list of network ser-
vices by analyzing NetFlow [1] records. These NetFlow
records are collected from various network monitoring de-
vices, such as routers and switches. Each NetFlow record
The name of the organization is anonymized for peer-review
1
purposes.
contains high-level information about an observed network
connection, including the connection start time, end time,
source/destination IP addresses and port numbers, and the
number of exchanged packets and bytes.
Paris considers a distinct triple (PROTO, IP, PORT) as a
network service if it is frequently seen in the dataset. Our
service extraction is similar to Orion [10].
Service proﬁles: Paris generates a service proﬁle for each
of the extracted network services, capturing its observed
traﬃc activity during the analysis period TE. The purpose
of service proﬁles is twofold: First, Paris uses service proﬁles
as a basis to determine correlated activities between diﬀer-
ent services. This is needed to determine interesting rela-
tionships between services and to detect missions. Second,
service proﬁles are used to recognize similar services, i.e.,
services that likely implement the same application. This
is important for the identiﬁcation of backup services and
meta-missions.
In particular, the service proﬁle includes the number of
bytes sent/received by the service, the number of packets
sent/received by the service, number of clients, and the num-
ber of requests handled by the service. This information is
provided as a time series by dividing the time dimension into
non-overlapping evaluation slots of length Δ and evaluating
these features for each of the slots.
3.
INFERRING RELATIONSHIPS
The next task of the analysis is to ﬁnd relationships among
the detected services. In particular, we are interested in ser-
vices that operate together to implement higher-level func-
tionality, as well as in redundant services.
3.1 Detecting Correlated Services
Correlated services are services that exhibit synchronized
activity patterns, being active or inactive at roughly the
same times. When we consistently observe correlated traﬃc
patterns in the data, we assume that the corresponding ser-
vices operate together. Typically, this is because both (or
multiple) services are needed in order to achieve a speciﬁc
goal. In our web mail example, whenever there is a spike in
the number of clients that send email, we see corresponding
increases in the activity of the web server, the mail server,
and the authorization service. Of course, this does not mean
that the mail server or the web server will be idle when no
web mail is sent. However, overall, we expect noticeable in-
creases in web mail activity to result in an increase of web
and mail service activity.
Correlation graphs. To detect correlated activity between
services, we use time series analysis. We ﬁrst divide the con-
nections associated with each service into short, Δ-length
time slots. Δ should be small enough so that bursts in ac-
tivity stand out and are not “smoothed out” over too long of
a period. On the other hand, Δ should be long enough to al-
low for suﬃcient tasks (or individual activities) to complete.
Otherwise, it is not possible to observe and distinguish in-
creased activity. In our implementation of Paris, we use a
Δ value of ﬁve minutes.
For each time slot, we compute three discrete time se-
ries: RSi , PSi , and BSi , which correspond to the number
of requests for a service Si, the number of packets sent by
Si, and the number of bytes sent by Si, respectively. To
capture service activity, we focus on what the service sends
42
back to the client. We ignore the bytes and packets that the
service receives, since this does not show the activity of the
service itself (e.g., there may be no response to the received
packets/bytes).
The time series for each service, over the entire analysis
period TE, could be directly used to compute the correla-
tion between services. However, this would only identify ser-
vices that always operate together. It would miss services
that operate together periodically, e.g., for one task per day
(or week).
It would also miss relationships where service
A and service B operated together during some part of the
evaluation interval before B was switched with service C.
Therefore, examining the time series over the entire period
might not be desirable. Instead, we divide the analysis pe-
riod TE into smaller intervals TI . We use an interval length
of one hour for TI . This time is short enough so that short-
term, correlated activities are properly captured. Moreover,
it is long enough so that the time series contain suﬃcient
TI
data points (
Δ = 12) to obtain correlation coeﬃcients with
enough conﬁdence. Another desirable property of TI is that
it is suitable to detect periodic services, because periodic
services are usually set to run on intervals that divide or are
dividable by an hour, which makes it more manageable for
the administrators.
To select the appropriate value for Δ, we experimented
with values of 1, 5, and 10 minutes. We then looked at the
average and standard deviation values of the correlations.
The changes in these values were negligible (the diﬀerence
of averages was 0.0119, and the diﬀerence of standard devi-
ations was 0.027). The resulting correlation matrix was ro-
bust and not sensitive to the changes in Δ. We chose 5 min-
utes for Δ because we experimentally determined that the
sensor device timers can be skewed by at most one minute.
We deﬁne the correlation of two network services Si and
Sj, using their corresponding time series, as:
C(Si, Sj) = max{C P
(RSi , RSj ), C P
(PSi , PSj )
(BSi , BSj )}
, C P
(1)
where C P (·, ·) is the Pearson product-moment correlation
given by:
C P
(A, B) =
(cid:3)(cid:2)
(cid:2)n
(cid:3)(cid:2)
i=1(Ai − E(A))(Bi − E(B))
n
i=1(Ai − E(A))2
n
i=1(Bi − E(B))2
(2)
In Equation 2, E(·) evaluates the mean value of the ex-
pression, and n is the common length of the sequences A
TI
and B, which is equal to
Δ in our case. Paris considers two
services Si and Sj to be correlated if C(Si, Sj) ≥ ηC , where
ηC is the correlation threshold. The choice of ηC trades oﬀ
true-correlation and false-correlation of the services; after
deriving ηC value corresponding to signiﬁcance of 0.05 and
manually investigating the deﬁned service correlation metric
on a large number of correlated and non-correlated pairs of
network services, we set ηC to 0.49726. Moreover, we found
a bimodal distribution, where correlated services had high
values of C(·), while the opposite was true for independent
services. In Section 3.3, we derive ηC , based on the signiﬁ-
cance of correlation coeﬃcients.
Using the computed correlation values, we build the cor-
relation graph, which is a non-directed graph whose vertices
are the extracted network services. Two vertices represent-
ing the services Si and Sj are connected with an edge only
if they are correlated, i.e., if C(Si, Sj) ≥ ηC .
43
(cid:1)(cid:2)(cid:3)
(cid:9)(cid:1)(cid:10)(cid:6)(cid:11)
(cid:3)(cid:4)(cid:5)(cid:6)
(cid:2)(cid:8)(cid:3)
(cid:9)(cid:1)(cid:10)(cid:6)(cid:12)
(cid:7)(cid:7)(cid:7)
(a) time-series analysis
(b) sample extracted mis-
sion
Figure 1: A sample extracted mission.
3.2 Missions
2
Paris ﬁnds the maximal cliques
in the correlation graph
and considers them as candidate network missions. Figure 1
shows the process of candidate mission extraction and an
example of an extracted mission that represents a part of a
web mail mission.
Frequent and infrequent missions. Our system gener-
ates one correlation graph and a set of candidate missions
for each one-hour period TI . The candidate missions might
suﬀer from two problems. The ﬁrst problem is that some
candidate missions can be infrequent missions, or they can
be the result of coincidental synchronous activity of several
services. An infrequent mission can show up as a result of
a temporary service that is set up by an administrator and
then removed. The second problem is that when a mission
(clique of services) occurs in one analysis period it is possible
that one of its subsets occurs in some other analysis periods
(we often observed this in our experiments). Such a subset
mission is redundant, and we want it removed because the
superset mission contains all relevant information.