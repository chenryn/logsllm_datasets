### 优化后的文本

#### EC2实例访问IMS的隐式信任机制
EC2实例可以隐式地访问位于169.254.169.254的实例元数据服务（IMS），无需提供特殊的HTTP请求头或进行身份验证。当EC2实例与IAM角色关联时，可以通过以下两个路径发现该IAM角色的名称，并使用该角色的权限获取临时凭据：

1. `iam/info`
2. `iam/security-credentials/role-name`

#### 检测研究活动的指标
为了衡量每个检测研究活动的有效性，我们选择了三个有意义且可观察的指标：

1. **指标1**：能否检测到尝试获取已附加到目标机器上的IAM角色名称的HTTP请求。
2. **指标2**：能否检测到尝试从EC2 IMS获取凭证的HTTP请求。
3. **指标3**：能否检测到包含临时访问密钥的HTTP响应。

#### 使用Amazon GuardDuty进行检测
测试了Amazon GuardDuty的安全监控能力。AWS将GuardDuty描述为“持续的安全监控服务”，尽管它不是传统的入侵检测系统（IDS）或入侵防御系统（IPS）。该服务允许管理员上传可信或恶意IP地址列表，以指导对检测结果的评估，但不提供其他配置选项。尽管GuardDuty在事件发生后生成结果的速度较快，但它并不是一个实时检测机制。

##### 指标1：检测获取IAM角色名称的HTTP请求
在测试的第一部分中，发送了一个HTTP请求到`https://site/?url=http://169.254.169.254/latest/meta-data/iam/info`。EC2 IMS返回的响应如图3所示。

> 图3 显示了在SSRF攻击后暴露的EC2 IAM角色

然而，在一个小时的观察期内，GuardDuty没有发现任何侦察结果（见图4）。

> 图4 在SSRF攻击后，GuardDuty未发现任何结果

##### 指标2：检测获取凭证的HTTP请求
接下来，访问`https://site/?url=http://169.254.169.254/latest/metadata/iam/security-credentials/msise-ssrf-ec2-role`以获取临时访问凭证（见图5）。

> 图5 成功SSRF攻击后泄露的AWS临时凭证

同样，在一个小时的观察期内，GuardDuty没有检测到SSRF攻击（见图5）。

##### 指标3：检测包含临时访问密钥的HTTP响应
从远程计算机运行以下命令（见图5），使用窃取到的凭证列出账户中的S3存储桶：

```bash
$ export AWS_ACCESS_KEY_ID=ASIA....MJ3S
$ export AWS_SECRET_ACCESS_KEY=D397Z....OMdp
$ export AWS_SESSION_TOKEN=AgoJb3....Z4hk=
$ aws s3 ls
2019-09-15 17:10:49 msise-ssrf
```

在使用窃取到的凭证六分钟后，GuardDuty识别出凭证泄露，但仅检测到SSRF攻击后的活动，而不是SSRF本身（见图7）。

> 图7 GuardDuty在外部使用凭证后的检测结果

最终结论是，GuardDuty无法检测SSRF攻击和凭据泄露。如果在生成这些凭据的EC2实例之外使用这些凭据，GuardDuty会生成类型为`UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration`的结果，但这并不意味着检测到了SSRF攻击本身。因此，成功的SSRF攻击者可能已经获得了足够的权限执行其他恶意操作。

#### 为什么GuardDuty不起作用？
根据GuardDuty的文档，它分析并生成的检测结果的来源不包括payload内容，而只包括以下三种元数据：
- VPC Flow Logs
- AWS CloudTrail事件日志
- DNS日志

这些元数据不足以检测针对link-local地址的SSRF攻击，因为link-local地址不会出现在VPC Flow Logs中，也不会发出DNS解析请求。

#### 使用VPC流量镜像进行检测
测试了VPC流量镜像的检测能力。VPC流量镜像提供了入站和出站流量的副本，通过Elastic Network Interface (ENI)传输，该接口已附加到需要被镜像的源，并指向指定的目标ENI。

VPC流量镜像服务仅提供获取网络流量的机制，而不处理或分析网络流量。实现者需要部署、配置和维护IDS，以生成有意义的安全事件。

> 图8 实验环境的网络拓扑图

VPC流量镜像很容易设置，因为镜像会话的源和目标都是基于AWS Nitro的实例。虽然AWS VPC流量镜像文档使用术语“源”和“目标”，但可以简单理解为运行IDS的目标实例能够观察到附加到源实例的ENI的请求和响应。

研究人员创建了一个流量镜像会话，读取源实例的所有TCP流量。该会话使用0.0.0.0/0的源和目标在流量过滤器中，从具有漏洞服务的实例上的源ENI到具有第二个专用ENI的目标实例。

除了针对源实例的流量过滤器规则外，AWS还会评估目标实例的安全组规则。

> 图9 AWS VPC流量镜像过滤器配置

研究人员通过测试`sudo tcpdump -vi eth1`验证了初步配置，其中eth1是专用于镜像会话的第二个专用ENI的摄取接口。

结果显示了SSRF攻击请求和响应的内容，表明Snort、Zeek和其他开源工具都可以检测到它们（见图10）。

> 图10 启用VPC流量镜像后目标实例上的tcpdump输出

由于VPC流量镜像将被镜像的流量封装在VXLAN头部中，部署在流量镜像目标上的IDS必须能够解析VXLAN，以检查payloads并发出告警。尽管Snort 2.9.14.1可以匹配IP包中的内容，但它无法解封装VXLAN，从而无法在更精确的TCP流规则中使用流预处理器。

使用适用于VPC流量镜像的网络入侵检测工具进行测试，研究人员确认流量镜像功能未能捕获本地请求，即通过link-local地址（169.254.169.254）向EC2 IMS发出的请求。

测试结果表明，VPC流量镜像无法检测上述三个指标中的任何一个。

#### 使用Zeek进行SSRF检测
测试了Zeek的检测能力。Zeek（以前称为Bro）是一种灵活的基于事件的网络流量分析工具，支持脚本功能。虽然Zeek是一个专门的基于事件的关联工具，但Zeek 3.0版支持VXLAN解封装和基于正则表达式的签名检测。

有了这些功能，可以使用以下两个Zeek签名定义来标识SSRF请求和响应：

译者注：这里的签名是指Zeek中提供的一种独立的“签名语言”，用于进行低级的、Snort格式的正则模式匹配。更多请参阅Zeek官方资料[Signature Framework — Zeek User Manual v3.0.0](https://docs.zeek.org/en/stable/frameworks/signatures.html)。