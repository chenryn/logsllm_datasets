EC2实例被隐式信任地访问在169.254.169.254上提供的IMS，不需要特殊的HTTP request header，不需要做身份验证。
  * 当EC2实例与一个IAM角色相关联时，可以使用这2个path来发现该IAM角色的名称，并使用该角色已被授予的权限从临时凭据获取一个"访问密钥"(access key):
    * 1.`iam/info`
    * 2.`iam/security-credentials/role-name`
  * 为了衡量每一个"检测研究"活动，找了3个有意义的、可观测的指标：
    * **指标1.** 能否检测到一个HTTP请求(payload1)，该请求尝试获取 已经attached到“靶机”的那个IAM角色的名称 (the request for the name of the IAM role attached to the vulnerable machine)
    * **指标2.** 能否检测到一个HTTP请求(payload2)，该请求尝试从EC2 IMS 获取一个凭证
    * **指标3.** 能否检测到一个HTTP response，该响应从EC2 IMS处响应，其中包含了一个"临时访问密钥"(temporary access key)
#### 3.2. Detection using Amazon GuardDuty
测试Amazon GuardDuty的检测能力。
简介:AWS将GuardDuty描述为“持续的安全监控服务”(Amazon Web Services,
2019)，尽管它不是传统的IDS、IPS。该服务为管理员提供了“上传可信或恶意IP地址列表”的能力，这些列表将指导管理员对"发现结果"(findings)的评估，尽管它没有为其内置的"结果类型"(finding
types)提供其他配置选项。尽管GuardDuty在事件发生后生成结果的速度相对较快，但它并不是一个实时的检测机制。
**指标1.** 能否检测到一个HTTP请求(payload1)，该请求尝试获取 已经attached到“靶机”的那个IAM角色的名称
在本测试的第一部分中，发送HTTP请求到`https://site/?url=http://169.254.169.254/latest/meta-data/iam/info`
EC2 IMS返回的Response 见Figure 3:
> Figure 3 Vulnerable application exposing EC2 IAM Role after SSRF  
>
> 
如下图Figure 4，在一小时之后的一段时间内，GuardDuty对这个"收集角色的名称的HTTP请求"， **没有发现**
任何"侦察结果"(reconnaissance findings)。这一步是“从IMS中获取临时凭证”的第一步。
> Figure 4 GuardDuty without findings after an SSRF attack  
>
> 
**指标2.** 能否检测到一个HTTP请求(payload2)，该请求尝试从EC2 IMS 获取一个凭证
接下来，访问`https://site/?url=http://169.254.169.254/latest/metadata/iam/security-credentials/msise-ssrf-ec2-role`将取回一个临时访问凭证，见Figure 5。
> Figure 5 Exfiltrated AWS temporary credential after successful SSRF  
>
> 
同样，经过一个小时的观察，GuardDuty并 **未发现SSRF攻击** 。
**指标3.** 能否检测到一个HTTP response，该响应从EC2 IMS处响应，其中包含了一个"临时访问密钥"(temporary access
key)
从远程计算机运行以下命令（见Figure 5），即使用"窃取到的凭据"来列出这个帐户中的S3 buckets:
> Figure 6 Post-SSRF exploitation commands to confirm AWS API access
>  
>  
>     $ export AWS_ACCESS_KEY_ID=ASIA....MJ3S
>     $ export AWS_SECRET_ACCESS_KEY=D397Z....OMdp
>     $ export AWS_SESSION_TOKEN=AgoJb3....Z4hk=
>     $ aws s3 ls
>     2019-09-15 17:10:49 msise-ssrf
使用"窃取到的凭据"6分钟后，GuardDuty确定了"凭证泄露"，但检测到的是"SSRF攻击后的活动"(postSSRF attack
activity)，而不是SSRF本身，如Figure 7所示。
> Figure 7 GuardDuty post-SSRF exploitation finding upon external credential
> use  
>
> 
最终可见，GuardDuty无法检测到SSRF攻击和凭据泄露。  
因为，如果在"生成这些凭据的EC2实例"之外去使用这些凭据，则GuardDuty会生成一个"发现结果"，类型为`UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration`。但这并不是发现了SSRF攻击本身，因此可以成功实现SSRF的威胁行动者可能已经有足够的权限执行其他恶意操作。如果攻击者可以通过"命令注入"(command
injection)使用凭据发出其他命令，则GuardDuty可能无法识别"攻击后的活动"(post-exploitation activity)。
为什么GuardDuty没起作用？
  * 根据GuardDuty的文档，它分析并生成的"发现结果"的多个 **源** 中并不包括"payload content"，而只是3种**元数据：
    * VPC Flow Logs
    * AWS CloudTrail event logs
    * DNS logs
这3个元数据并不足以检测"访问一个link-local地址的SSRF攻击"，因为link-local地址并不会显示在VPC Flow
Logs中，也不会发出DNS解析请求。
#### 3.3. Detection using VPC Traffic Mirroring
测试VPC Traffic Mirroring的检测能力。
"VPC流量镜像"(VPC Traffic Mirroring)提供了入站流量和出站流量的拷贝，在哪里提供？  
VPC流量镜像在一个Elastic Network Interface
(ENI)上，这个ENI已经attached到需要被镜像的source，这个source指向一个指定的target的ENI。  
VPC Traffic Mirroring provides a copy of network traffic, both inbound and
outbound, on an Elastic Network Interface (ENI) attached to the desired source
to the ENI of a designated target.
"VPC流量镜像"服务仅提供获取网络流量的机制，而不处理或分析网络流量。  
实现者有责任以"离线配置"(out-of-line configuration)来部署、配置和维护IDS，以生成有意义、有用的安全事件。
> Figure 8 Network diagram of lab environment  
>
> 
VPC流量镜像很容易设置，因为一个"镜像会话"(mirroring session)的`source`和"`target`都是基于AWS
Nitro的实例。虽然AWS VPC Traffic
Mirroring的文档使用术语"源"`source`和"目标"`target`，在这里可以简单认为，运行了IDS的`target`(实例)将能够观察到attached到`source`(实例)的那个ENI的请求和响应。  
`source ---> target`
具体怎么做流量镜像？  
研究人员创建了一个流量镜像会话以读取source的所有TCP流量。该会话使用"流量过滤器¾"(Traffic
Filter¾)中的0.0.0.0/0的source和destination，从具有漏洞服务的实例上的`source`ENI，到具有"第二个"专用ENI的`target`，读取所有TCP流量。  
The researcher created a traffic mirroring session that read all TCP traffic
using a 0.0.0.0/0 source and destination in the Traffic Filter¾ from the
“source” ENI on the instance with the vulnerable service to a target with a
second ENI dedicated.
除了 针对于`source`(实例)的那些以便于观察到payloads的"流量过滤器规则"之外，AWS仍会评估`target`(实例)的安全组规则。
> Figure 9 AWS VPC Traffic Mirroring filter configuration  
>
> 
研究人员通过测试`sudo tcpdump -vi eth1`验证了初步配置，其中的eth1就是 **"第二个"专用ENI**
专用于镜像会话的"摄取接口"(ingest interface)。
结果输出显示了SSRF攻击请求和响应的内容payloads，表明Snort，Zeek和其他开源工具都可以检测到它们。
> Figure 10 Redacted tpcdump output on target once VPC Traffic Mirroring
> enabled  
>
> 
因为VPC Traffic Mirroring将"被镜像的流量"封装在VXLAN
header中，所以部署到一个流量镜像target上的那个IDS必须能够解析VXLAN conventions，以检查payloads、并做告警。  
尽管Snort 2.9.14.1可以匹配IP packet中的内容，但是它无法解封装VXLAN，从而无法在“解释TCP
flow的更精确规则”中使用"流预处理器"(Stream preprocessor)。  
使用适用于VPC Traffic Mirroring的网络入侵检测工具执行测试，研究人员确认了：流量镜像功能并未捕获到"本地请求"( local
request)，即通过link-local地址(169.254.169.254)向EC2 IMS发出的那些请求。
测试结果，当然是VPC Traffic Mirroring无法检测出3个指标的任何一个。
#### 3.3.1. Detecting SSRF using Zeek
测试Zeek的检测能力。
Zeek，以前叫"Bro"，是一种"网络流量分析"(network traffic
analysi,NTA)工具，具有灵活的、基于事件的模型，并支持脚本功能。虽然Zeek是一个专门的基于事件的关联工具，但Zeek
3.0版支持了VXLAN解封装(VXLAN decapsulation)、使用正则表达式的基于签名的检测。
译者注：这里的签名是指Zeek中提供的一种独立的"签名语言"(signature
language)，用于进行低级的、Snort格式的正则模式匹配。更多请看Zeek官方资料[Signature Framework — Zeek User
Manual v3.0.0](https://docs.zeek.org/en/stable/frameworks/signatures.html)
有了这些功能，就可以使用以下这2个Zeek"签名定义"(signature definitions)，来标识SSRF请求和响应：