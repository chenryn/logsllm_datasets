让我们继续下一个`get`命令。`helm get notes`命令用于显示头盔释放的音符。您可能还记得，当安装 WordPress 图表时，会显示发行说明。这些注释提供了有关访问应用的重要信息，可以通过运行以下命令再次显示:
```
$ helm get notes wordpress --namespace chapter3
```
`helm get values`命令对于调用给定版本中使用的值非常有用。运行以下命令查看`wordpress`版本中提供的值:
```
$ helm get values wordpress --namespace chapter3
```
该命令的结果应该看起来很熟悉，因为它们应该与`wordpress-values.yaml`文件中指定的值相匹配:
![Figure 3.16 – ser-supplied values in the wordpress release ](img/Figure_3.16.jpg)
图 3.16–WordPress 版本中用户提供的值
虽然调用用户提供的值很有用，但在某些情况下，可能需要返回一个版本使用的所有值，包括默认值。这可以通过传入一个额外的`--all`标志来实现，如图所示:
```
$ helm get values wordpress --all --namespace chapter3
```
对于这个图表，输出会很长。以下输出显示了前几个值:
![Figure 3.17 – A subset of all the values for the wordpress release  ](img/Figure_3.17.jpg)
图 3.17–WordPress 版本所有值的子集
最后，Helm 提供了一个`helm get all`命令，可以用来聚合来自各种`helm get`命令的所有信息:
```
$ helm get all wordpress --namespace chapter3
```
除了 Helm 提供的命令外，`kubectl` CLI 还可用于更仔细地检查安装。例如，可以使用`kubectl`将范围缩小到一种类型的资源，例如部署，而不是获得安装创建的所有 Kubernetes 资源。为了确保返回的资源属于 Helm 版本，可以为`kubectl`命令提供一个在部署上定义的标签，用于表示版本的名称。Helm 图表通常会在它们的 Kubernetes 资源中添加一个`app`标签。通过运行以下命令，使用`kubectl`命令行界面检索包含此标签的部署:
```
$ kubectl get all -l app=wordpress --namespace chapter3
```
您会发现以下部署存在于`chapter3` 命名空间中:
![Figure 3.18 – The wordpress deployment in the chapter3 namespace ](img/Figure_3.18.jpg)
图 3.18–在`chapter3`命名空间中的 wordpress 部署
# 附加安装注意事项
很快，我们将探索刚刚安装的 WordPress 应用。首先，在将抛在安装主题之后之前，有几个方面需要考虑。
## n 旗
可以使用`-n`标志代替`--namespace`标志，以减少输入命令时的打字工作量。这适用于`upgrade`和`rollback`命令，我们将在本章后面描述。从这里开始，我们将使用`-n`标志来表示 Helm 应该与之交互的名称空间 ce。
## HELM _ NAMESPACE 环境变量
您也可以设置一个环境变量来表示 Helm 应该与之交互的命名空间。
让我们看看如何在各种操作系统上设置这个环境变量:
*   可以在 macOS 和 Linux 上设置变量如下:
    ```
    $ export HELM_NAMESPACE=chapter3
    ```
*   Windows 用户可以通过在 PowerShell 中运行以下命令来设置该环境变量:
    ```
    > $env:HELM_NAMESPACE = 'chapter3'
    ```
该变量的值可以通过运行`helm env`命令来验证:
```
$ helm env
```
您应该会在结果输出中看到`HELM_NAMESPACE`变量。默认情况下，变量设置为`default`。
在本书中，我们将不依赖于`HELM_NAMESPACE`变量，而是在每个命令旁边传递`-n`标志，以便更清楚我们打算使用哪个命名空间。提供`-n`标志也是为 Helm 指定名称空间的最佳方式，因为它确保我们针对的是我们期望的名称空间。
## 在-组和-值之间选择
对于`install`、`upgrade`和`rollback`命令，您可以选择两种方式之一将值传递给图表:
*   要从命令行在中传递值，请使用以下命令:
    ```
    --set
    ```
*   要在 YAML 文件或网址中指定值，请使用以下命令:
    ```
    --values
    ```
在本书中，我们将把`--values`标志作为配置图表值的首选方法。原因是以这种方式配置多个值更容易。维护一个`values`文件还将允许我们将这些资产保存在一个**源代码管理** ( **单片机**)系统中，例如`git`，这使得安装更加容易复制。请注意，敏感值(如密码)永远不应存储在源代码管理存储库中。我们将在 [*第 9 章*](09.html#_idTextAnchor416)*掌舵安全注意事项*中介绍安全主题。暂时，重要的是记住不要将`secrets`推入源代码管理存储库中。当需要在图表中提供机密时，推荐的方法是明确使用`--set`标志。
`--set`标志用于直接从命令行传递值。对于简单的值以及需要配置的值很少的情况，这是一种可以接受的方法。同样，使用`--set`标志不是首选方法，因为它限制了使安装更具可重复性的能力。以这种方式配置复杂的值也要困难得多，例如列表或复杂地图形式的值。还有其他相关旗帜，如`--set-file`、`--set-string`；`--set-file`标志用于传递已配置了`key1=val1`和`key2=val2`格式值的文件，而`--set-string`标志用于将`key1=val1`和`key2=val2`格式中提供的所有值设置为字符串。
有了这个解释，让我们来探索一下刚刚安装的 WordPr ess 应用。
# 访问 WordPress 应用
WordPress 图表的发行说明提供了四个命令，您可以运行这些命令来访问您的 WordPress 应用。运行这里列出的四个命令:
*   对于 macOS 或 Linux，运行以下命令:
    ```
    $ export NODE_PORT=$(kubectl get --namespace chapter3 -o jsonpath="{.spec.ports[0].nodePort}" services wordpress)
    $ export NODE_IP=$(kubectl get nodes --namespace chapter3 -o jsonpath="{.items[0].status.addresses[0].address}")
    $ echo "WordPress URL: http://$NODE_IP:$NODE_PORT/"
    $ echo "WordPress Admin URL: http://$NODE_IP:$NODE_PORT/admin"
    ```
*   对于 Windows PowerShell，运行以下命令:
    ```
    > $NODE_PORT = kubectl get --namespace chapter3 -o jsonpath="{.spec.ports[0].nodePort}" services wordpress | Out-String
    > $NODE_IP = kubectl get nodes --namespace chapter3 -o jsonpath="{.items[0].status.addresses[0].address}" | Out-String
    > echo "WordPress URL: http://$NODE_IP:$NODE_PORT/"
    > echo "WordPress Admin URL: http://$NODE_IP:$NODE_PORT/admin"
    ```
在基于一系列的`kubectl`查询定义了两个环境变量之后，产生的`echo`命令将显示访问 WordPress 的网址。第一个网址是查看主页，也是访问者访问您网站的地方。第二个网址是管理控制台，网站管理员使用它来配置和管理网站内容。
将第一个网址粘贴到浏览器中，您将看到一个类似于此处显示的内容的页面:
![Figure 3.19 – The WordPress blog page ](img/Figure_3.19.jpg)
图 3.19–WordPress 博客页面
这一页的几个部分可能对你来说很熟悉。首先，请注意屏幕左上角的博客标题叫做**学习掌舵**！这不仅和这本书的书名很像，也是你之前在安装时给`wordpressBlogName`值的字符串。你也可以在页面底部的版权声明 **2020 Learn Helm 中看到这个数值！**。
影响主页定制的另一个值是`wordpressUsername`。注意，**你好世界的作者！**包含的帖子是**掌舵人用户**。这是提供给`wordpressUsername`值的用户名，如果提供了另一个用户名，则显示方式会有所不同。
前一组命令中提供的另一个链接用于管理控制台。将第二个`echo`命令的链接粘贴到浏览器中，您将看到以下屏幕:
![Figure 3.20: The WordPress admin console login page ](img/Figure_3.20.jpg)
图 3.20:WordPress 管理控制台登录页面
要登录管理控制台，请输入您在安装过程中提供的`wordpressUsername`和`wordpressPassword`值。这些值可以通过查看您当地的`wordpress-values.yaml`文件来查看。也可以通过运行 WordPress 图表注释中指示的以下命令来检索它们:
```
$ echo Username: helm-user
$ echo Password: $(kubectl get secret --namespace chapter3 wordpress -o jsonpath='{.data.wordpress-password}' | base64 --decode)
```
通过身份验证后，将显示管理控制台仪表板，如图所示:
![Figure 3.21 – The WordPress admin console page ](img/Figure_3.21.jpg)
图 3.21–WordPress 管理控制台页面
如果你负责管理这个 WordPress 网站，你可以在这里配置你的网站，写文章，管理插件。如果您点击右上角的链接，上面写着**您好，掌舵人**，您将被引导至`helm-user`个人资料页面。从那里，您可以看到在安装过程中提供的其他几个值，如图所示:
![Figure 3.22 – The WordPress profile page ](img/Figure_3.22.jpg)
图 3.22–WordPress 配置文件页面
**名字**、**姓氏**和**电子邮件**字段指的是它们对应的`wordpressFirstname`、`wordpressLastname`和`wordpressEmail`Helm 值。
请随意继续探索您的 WordPress 实例。完成后，继续下一节学习如何在 Helm 版本上执行升级。
# 升级 WordPress 版本
升级一个版本是指修改一个版本所安装的数值或者升级到一个更新版本的图表的过程。在本节中，我们将通过围绕 WordPress 副本和资源需求配置附加值来升级 WordPress 版本。
## 修改舵值
Helm 图表公开值来配置应用的实例数量及其相关资源集是很常见的。下面的截图说明了`helm show values`命令的几个部分，这些部分与用于此目的的值相关。
第一个值`replicaCount`很容易设置。由于`replica`是 Kubernetes 术语，描述了部署应用所需的 Pods 数量，这意味着`replicaCount`用于指定作为发布的一部分部署的应用实例的数量:
![Figure 3.23 – replicaCount in the helm show values command ](img/Figure_3.23.png)
图 3.23–`helm show values`命令中的 `replicaCount`
将以下行添加到您的`wordpress-values.yaml`文件中，以将副本数量从`1`增加到`2`:
```
replicaCount: 2
```
我们需要定义的第二个值是指`resources` YAML 节下的一组值:
![Figure 3.24 – The values under the resources stanza ](img/Figure_3.24.jpg)
图 3.24–资源小节下的值
值可以缩进，如`resources`小节，以提供逻辑分组。在`resources`节下面是一个`requests`节，用于配置`memory`和`cpu`值，Kubernetes 会将其分配给 WordPress 应用。让我们在升级过程中修改这些值，将内存请求减少到`256Mi` (256 兆字节)并将`cpu`请求减少到`100m` (100 毫内核)。将这些修改添加到`wordpress-values.yaml`文件中，如图所示:
```
resources:
  requests:
    memory: 256Mi
    cpu: 100m
```
定义这两个新值后，您的整个`wordpress-values.yaml`文件将如下所示:
```
wordpressUsername: helm-user
wordpressPassword: my-pass
wordpressEmail: PI:EMAIL
wordpressFirstName: Helm
wordpressLastName: User
wordpressBlogName: Learn Helm!
service:
  type: NodePort
replicaCount: 2
resources:
  requests:
    memory: 256Mi
    cpu: 100m
```
一旦`values`文件已经用这些新值更新了，您可以运行`helm upgrade`命令来升级 rel 版本，我们将在下一节讨论。
## 运行升级
`helm upgrade`命令在基本语法上与`helm install`几乎相同，如下例所示:
```
helm upgrade [RELEASE] [CHART] [flags]
```
`helm install`希望您提供新版本的名称，而`helm upgrade`希望您提供应该升级的现有版本的名称。
可以使用`--values`标志提供`values`文件中定义的值，与`helm install`命令相同。运行以下命令，用一组新值升级 WordPress 版本:
```
$ helm upgrade wordpress bitnami/wordpress --values wordpress-values.yaml -n chapter3 --version 8.1.0
```
一旦命令被执行，您应该会看到类似于前面部分描述的`helm install`的输出:
![Figure 3.25 – The output for helm upgrade ](img/Figure_3.25.jpg)
图 3.25`helm upgrade`的输出
通过运行以下命令，您应该还会看到`wordpress` Pods 重新启动:
```
$ kubectl get pods -n chapter3
```