                fi
            else
                if [ ${#hexarray[@]} -gt 15 ] ; then
                    printf "%08x:$fmt  %s\n" $offset ${hexarray[@]} "$asciidump"
                    ((offset+=16))
                    hexarray=()
                    asciidump=
                fi
            fi
        done
        if [ "$hexarray" ] ; then
            if [ "$1" == "-p" ] ; then
                fmt="${fmt:0:${#hexarray[@]}*4}"
                printf "$fmt\n" ${hexarray[@]}
            else
                fmt="${fmt:0:${#hexarray[@]}*5}%$((48-${#hexarray[@]}*3))s"
                printf "%08x:$fmt  %s\n" $offset ${hexarray[@]} " " "$asciidump"
            fi
        fi
    }
    function revert ()
    {
        hextable="0123456789abcdef"
        two=0
        hh=
        while LANG=C IFS= read -r -d '' -n 1 byte
        do
            if [ "$byte" ] ; then
                printf -v escchar "%q" "$byte"
                case ${#escchar} in
                1 )
                    index=${hextable%${escchar,,}*}
                    index=${#index}
                    if [[ $index != 16 ]] ; then
                        ((two+=1))
                        hh+=$escchar
                        if [[ $two == 2 ]] ; then
                            printf -v escseq "\\\\x%s" $hh
                            printf $escseq
                            two=0
                            hh=
                        fi
                    fi
                    ;;
                * )
                    ;;
                esac
            fi
        done
    }
    if [ "$1" != "-r" ] ; then
        hexdump $1
    else
        revert
    fi
脚本中的-d ”很重要，否则读取\n时，\n被自动转成\0。
    $ ./xxd.sh -p some.txt
    $ xxd -p some > some.txt
这两个输出完全相同
    $ ./xxd.sh -r some
    $ xxd -r -p some.txt some
这两个输出完全相同
“xxd.sh -r”的输入允许出现空格、换行等一切非16进制数字的字符，它们将被丢弃。
16进制数字大小写不敏感。
### 2) xxd_mini.sh
    #!/bin/bash
    #
    # Author : scz@nsfocus
    #        : 2018-10-08
    #        : 2018-10-12 11:58
    #
    hexdump ()
    {
        count=0
        while LANG=C IFS= read -r -d '' -n 1 byte
        do
            LANG=C printf '%02x' "'$byte"
            let count+=1
            if [ $count -eq 30 ] ; then
                printf "\n"
                count=0
            fi
        done
        if [ $count -ne 0 ] ; then
            printf "\n"
        fi
    }
    revert ()
    {
        hextable="0123456789abcdef"
        two=0
        hh=
        while LANG=C IFS= read -r -n 1 byte
        do
            if [ "$byte" ] ; then
                index=${hextable%${byte}*}
                index=${#index}
                if [[ $index != 16 ]] ; then
                    let two+=1
                    hh=$hh$byte
                    if [[ $two == 2 ]] ; then
                        printf "\x"$hh
                        two=0
                        hh=
                    fi
                fi
            fi
        done
    }
    if [ "$1" != "-r" ] ; then
        hexdump $1
    else
        revert
    fi
这个脚本不支持带ascii区的hexdump，即不支持”xxd -g 1″的效果，但支持”xxd -p”、”xxd -r”的效果，作为上传、下载工具，足矣。
相比xxd.sh，xxd_mini.sh的语法有些陈旧，这是为了兼容ash，参看xxd.ash的说明。
    $ ./xxd_mini.sh &2 Error: "[$escchar]"
                    ;;
                esac
            else
                hh=0
            fi
            ((count++))
            for ((i=0;i<8;i++))
            do
                ((o=o*2+hh/128))
                ((hh=hh*2%256))
                ((bits++))
                if [[ $bits == 6 ]] ; then
                    printf ${base64table:$o:1}
                    ((n++))
                    if [ $n -ge $maxn ] ; then
                        printf "\n"
                        n=0
                    fi
                    o=0
                    bits=0
                fi
            done
        done
        if [[ $bits != 0 ]] ; then
            while [ $bits -lt 6 ]
            do
                ((bits++))
                ((o*=2))
            done
            printf ${base64table:$o:1}
            ((n++))
            if [ $n -ge $maxn ] ; then
                printf "\n"
                n=0
            fi
        fi
        ((count=count%3))
        if [[ $count != 0 ]] ; then
            for ((i=0;i<3-count;i++))
            do
                printf "="
                ((n++))
                if [ $n -ge $maxn ] ; then
                    printf "\n"
                    n=0
                fi
            done
        fi
        if [ $n -ne 0 ] ; then
            printf "\n"
        fi
    }
    function base64decode ()
    {
        base64table="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        o=0
        bits=0
        while LANG=C IFS= read -r -d '' -n 1 byte
        do
            if [ "$byte" ] ; then
                c=${base64table%${byte}*}
                c=${#c}
                if [[ $c != 64 ]] ; then
                    #
                    # printf "%#x\n" $c
                    # continue
                    #
                    for ((b=0;b<6;b++))
                    do
                        ((o=o*2+c/32))
                        ((c=c*2%64))
                        ((bits++))
                        if [[ $bits == 8 ]] ; then
                            printf -v escseq \\x5cx%x $o
                            printf $escseq
                            o=0
                            bits=0
                        fi
                    done
                fi
            fi
        done
    }
    if [ "$1" != "-d" ] ; then
        base64encode
    else
        base64decode
    fi
    $ echo -n -e "scz@nsfocus" | ./base64.sh
    c2N6QG5zZm9jdXM=
    $ ./base64.sh some.txt
    $ ./base64.sh -d some
## ash
bash很强大，而我们面临的很可能是busybox提供的ash，ash要比bash弱不少。
### 1) xxd.ash
    #!/bin/ash
    #
    # Author : scz@nsfocus
    #        : 2018-10-08
    #        : 2018-10-12 11:58
    #
    hexdump ()
    {
        count=0
        while LANG=C IFS= read -r -n 1 byte
        do
            LANG=C printf '%02x' "'$byte"
            let count+=1
            if [ $count -eq 30 ] ; then
                printf "\n"
                count=0
            fi
        done
        if [ $count -ne 0 ] ; then
            printf "\n"
        fi
    }
    revert ()
    {
        hextable="0123456789abcdef"
        two=0
        hh=
        while LANG=C IFS= read -r -n 1 byte
        do
            if [ "$byte" ] ; then
                index=${hextable%${byte}*}
                index=${#index}
                if [[ $index != 16 ]] ; then
                    let two+=1
                    hh=$hh$byte
                    if [[ $two == 2 ]] ; then
                        printf "\x"$hh
                        two=0
                        hh=
                    fi
                fi
            fi
        done
    }
    if [ "$1" != "-r" ] ; then
        hexdump $1
    else
        revert
    fi
xxd.ash实际就是xxd_mini.sh，编写后者时已经充分考虑了ash与bash的兼容性。
为了进行递增操作，使用了let关键字，ash很可能不支持(())。
不要写function关键字，busybox v1.19.3不认，v1.27.2才认。
ash不支持-d、-N，因此xxd.ash中read时删除了-d ”，这导致脚本无法正确读取\n，读进来时被自动转换成\0，在ash中找不到规避办法。
ash不支持${parameter,,pattern}，无法将输入自动转换成小写，xxd.ash只能处理全小写的some.txt。
xxd.ash的revert()可用，hexdump()不能正确转储\n。如果some中不包含\n，则可使用xxd.ash的hexdump()。如果非要在弱环境中进行hexdump()，可以先用revert()上传一个静态链接的ELF，此处不展开讨论。
### 2) echohelper.c
busybox的ash支持“echo -n -e”，这可能是最笨的上传binary方案。写个辅助C程序将指定binary转换成一系列echo命令。