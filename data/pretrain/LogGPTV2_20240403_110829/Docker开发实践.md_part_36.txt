4
[0189987e] +job serveapi(tcp://0.0.0.0:2375)
[0189987e] +job initserver()
[0189987e.initserver()] Creating server
5
2015/01/13 11:46:45 Listening for HTTP on tcp (0.0.0.0:2375)
[0189987e] -job initserver() = OK (0)
[0189987e] +job acceptconnections()
6
[0189987e] -job acceptconnections() = OK (0)
或者是在配置文件中配置，这样每次启动时将自动设置。
7
2. 命令操作
下面我们说明Swarm的常用命令，这里使用Swarm镜像来完成操作。 在获得Swarm镜像之后， 9
我们可以启动该镜像：
8
$ docker run --rm swarm
NAME:
swarm - a Docker-native clustering system
10
USAGE:
swarm [global options] command [command options] [arguments...]
VERSION:
10
0.1.0 (a445ed9)
COMMANDS:
create, c create a cluster
11
list, l list nodes in a cluster
manage, m manage a docker cluster
join, j join a docker cluster
13
help, h Shows a list of commands or help for one command
GLOBAL OPTIONS: 14
--debug debug mode [$DEBUG]
--log-level, -l "info" Log level (options: debug, info, warn, error, fatal, panic)
--help, -h show help 15
--version, -v print the version
容器输出了Swarm的名字、用法、版本、命令和全局选项。可以看到，能够使用的命令有 16
create、list、manage、join和help，其中help是帮助命令。下面我们分别说明这些命令的含义
和用法。
17
 创建集群
18
创建集群的命令为create，具体为：
232 第18章 Machine+Swarm+Compose
$ docker run --rm swarm create
73f8bc512e94195210fad6e9cd58986f
create命令会向Docker Hub的发现服务获得一个全球唯一的token，用于标识当前创建的
Docker集群。这时Swarm集群并没有实际节点，只是创建了一个集群标识，Docker节点可以通过
这个标识来加入到集群中成为Swarm节点。
 加入集群
有了集群标识后，Docker节点就可以通过join命令加入到集群中：
$ docker run -d swarm join --addr= token://
其中node_ip就是Docker节点的IP，2375就是Docker后台监听的端口，cluster_id是刚刚通过
create命令创建得到的集群id。例如，集群中有一个节点的地址为192.168.1.85，那么将其加入到
刚建立的Swarm集群的操作为：
$ docker run -d swarm join --addr=192.168.1.85:2375 \ token://73f8bc512e94195210fad6e9cd58986f
create命令是在Swarm主控节点上执行的，join命令是在需要加入到Swarm集群的Docker节
点上执行的。Docker节点成为Swarm集群节点之后，Swarm主控节点就可以根据加入信息来发现
该节点，从而获得该节点的状态信息，为调度模块决策提供支持。
 管理集群
管理集群是通过manage命令来实现的，形如：
$ docker run -t -p :2375 -t swarm manage token://
例如，
$ docker run -t -p 2376:2375 -t swarm manage token:// 73f8bc512e94195210fad6e9cd58986f
这条命令可以在Swarm集群的任何节点上运行，-p用于完成端口映射。manage命令执行之后，
在Swarm集群内部，将会启动Swarm并接受后续的Docker集群管理请求。启动Swarm之后，我们
就可以向Swarm服务器发送类似于Docker后台的请求，例如：
# use the regular docker cli
$ docker -H tcp:// info
$ docker -H tcp:// run ...
$ docker -H tcp:// ps
$ docker -H tcp:// logs ...
...
通过上面的命令，我们可以在该Swarm服务器上执行信息查询、执行命令、查看当前运行命
令以及输出日志等。
 列出集群节点
通过list命令可以列出集群中的节点状况，形如：
18.2 Swarm 233
$ docker run --rm swarm list token://
1
例如：
2
$ docker run --rm swarm list token:// 73f8bc512e94195210fad6e9cd58986f
192.168.1.85:2375
192.168.1.86:2375
3
18.2.3 发现服务和调度
4
由于发现服务和调度是Swarm的核心主体，所以在这一节中，我们将详细说明其原理和实际
5
配置。
1. 发现服务
6
在18.2.1节中，我们讲到发现服务是一种维护集群状态的机制，它可以和各种后端服务器协
调合作，例如Consul、Etcd以及直接使用节点发现和文件发现，但是不管采用什么方式，所有的
7
方式都是为了维护Docker节点列表以及跟踪每个节点的健康状态和进出状态。
下面我们分别介绍节点发现、文件发现、Consul发现和Etcd发现以及ZooKeeper发现。 9
 节点发现
8
节点发现是Swarm最基本的发现方法，它不需要用到任何文件或者后端服务器，仅通过命令
行就可以实现。节点发现的启动命令为：
10
swarm manage \
--discovery dockerhost01:2375,dockerhost02:2375,dockerhost03:2375 \
10
-H=0.0.0.0:2375
其中dockerhost01等是Docker节点的主机名或者IP。除了上述方式外，也可以采用下面的方式达
11
到同样的效果。
首先，构建一个集群： 13
# create a cluster
$ swarm create 14
6856663cdefdec325839a4b7e1de38e8
然后运行join命令将需要加入到集群的节点通过IP:Port的形式加入到集群中，具体为： 15
$ swarm join --addr= dockerhost01:2375 token:// 6856663cdefdec325839a4b7e1de38e8
$ swarm join --addr= dockerhost02:2375 token:// 6856663cdefdec325839a4b7e1de38e8 16
$ swarm join --addr= dockerhost03:2375 token:// 6856663cdefdec325839a4b7e1de38e8
然后在任意Docker客户端运行如下命令即可：
17
# start the manager on any machine or your laptop
$ swarm manage -H tcp:// token:// 18
234 第18章 Machine+Swarm+Compose
 文件发现
文件发现利用在本地文件系统放置的文件来配置发现服务，例如/etc/swarm/cluster_config。
文件内部每行为IP:Port的形式，每一行代表一个Swarm节点，具体示例为：
swarm manage \
--discovery file:///etc/swarm/cluster_config \
-H=0.0.0.0:2375
其中文件内容为：
#/etc/swarm/cluster_config
dockerhost01:2375
dockerhost02:2375
dockerhost03:2375
 Consul发现
Docker Swarm也支持Consul发现，它利用Consul的键值对保存机制来保存节点的IP:Port值，
用以构建集群。在这种发现机制下，每个Docker节点的Swarm客户端在使用swarm join命令加入
到集群时都要指向Consul的HTTP接口。Swarm客户端通过下面的命令启动：
swarm join \
--discovery consul://consulhost01/swarm \
# This can be an internal IP as long as the other
# Docker hosts can reach it.
--addr=10.100.199.200:2375
Swarm主控节点从Consul中获得集群信息，它通过下面的命令启动管理：
swarm manage \
--discovery consul://consulhost01/swarm \
-H=0.0.0.0:2375
 Etcd发现
Etcd也是一个分布式键值对保存服务，和Consul发现机制基本一样。Docker节点在加入Swarm
集群时需要指向Etcd接口，Etcd通过心跳来维护节点列表信息。若Docker节点想要加入到Etcd发
现机制的Swarm集群，可以使用如下命令：
swarm join \
--discovery etcd://etcdhost01/swarm \
--addr=10.100.199.200:2375
主控节点通过下面的命令启动集群管理：
swarm manage \
--discovery etcd://etcdhost01/swarm \
-H=0.0.0.0:2375
18.2 Swarm 235
 ZooKeeper发现 1
Swarm也支持ZooKeeper发现。和其他键值对存储模型一样，ZooKeeper使用一个ZK集合来保
存列表信息以及根据Docker后台的运行状态动态维护该键值对列表。Swarm的主控节点也连接到 2
该集合，并使用该集合下/swarm目录下的信息维护主机列表清单，然后定期进行健康检查。
3
Swarm客户端通过下面的命令启动：
swarm join \
4
# All hosts in the ensemble should be listed
--discovery zk://zkhost01,zkhost02,zkhost03/swarm \
--addr=10.100.199.200
5
主控节点通过下面的命令启动管理：
6
swarm manage \
--discovery zk://zkhost01,zkhost02,zkhost03/swarm \
-H 0.0.0.0:2375
7
2. 调度
调度是决定任务由哪个Swarm节点来执行的过程，它包含条件过滤和调度策略两部分内容。 9
条件过滤主要是通过标签来实现的。在Docker后台启动的时候，我们可以给它赋予一系列标签，
8
例如：
docker -d \
10
--label storage=ssd \
--label zone=external \
--label tier=data \
10
-H tcp://0.0.0.0:2375
上述Docker后台启动时，通过--label参数设置了3个标签，并通过-H参数将Docker后台绑定
11
到主机的2375端口。当节点启动后，Swarm就可以根据这些标签过滤选择节点。Swarm的过滤机
制主要有以下几种。
13
 约束过滤
约束过滤（Constraint Filter）是使用Docker后台启动时配置的键值对标签来过滤的。当用户 14
需要创建一个容器时，他可以通过选取一组或者多组标签约束来选取符合条件的Swarm节点来创
建和运行容器。这种约束主要的应用场景如下所示。 15
 通过特定的主机特性进行选择，包括选取特定硬件的主机执行任务，例如storage=ssd。
16
 选取特定位置的主机，例如选取美国东部的主机：region=us-east。当然，这个键值对必
须在启动Docker后台时通过--label参数设定过了。
 将集群进行逻辑切分，例如environment=production将集群配置为开发和产品两个子集 17
群，然后选取其中的子集群运行任务。
18
下面给出一个简单的例子，例如启动node-1节点上的Docker后台，通过--label配置storage=ssd
236 第18章 Machine+Swarm+Compose
标签：
$ docker -d --label storage=ssd
$ swarm join --addr=192.168.0.42:2375 token://XXXXXXXXXXXXXXXXXX
同样，在node-2节点上启动Docker后台，配置storage=disk标签：
$ docker -d --label storage=disk
$ swarm join --addr=192.168.0.43:2375 token://XXXXXXXXXXXXXXXXXX
两个节点都注册进了同一个集群，接着我们运行一个mysql服务容器，选择SSD存储方式的
节点作为运行节点，具体操作为：
$ docker run -d -P -e constraint:storage==ssd --name db mysql
f8b693db9cd6
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED STATUS
PORTS NODE NAMES
f8b693db9cd6 mysql:latest "mysqld" Less than a second ago running
192.168.0.42:49178->3306/tcp node-1 db
此时，node-1节点被选取。
接着，我们要在硬盘存储方式的节点上部署一个nginx服务：
$ docker run -d -P -e constraint:storage==disk --name frontend nginx
963841b138d8
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED
STATUS PORTS NODE NAMES
963841b138d8 nginx:latest "nginx" Less than a second ago
running 192.168.0.43:49177->80/tcp node-2 frontend
f8b693db9cd6 mysql:latest "mysqld" Up About a minute
running 192.168.0.42:49178->3306/tcp node-1 db
可以看到，nginx服务容器部署到了node-2节点上。
除了上面所示的存储方式过滤外，经常拿来作为约束过滤条件的还有内核版本、操作系统、
运行环境等。
 类同过滤
类同过滤（Affinity Filter），是指参考另一个容器来部署新的容器，新的容器被部署到和被参
考容器相同的节点上。
例如，我们把Nginx容器部署到了node-1节点上：
$ docker run -d -p 80:80 --name front nginx
87c4376856a8
$ docker ps
CONTAINER ID IMAGE COMMAND CREATED
STATUS PORTS NODE NAMES
87c4376856a8 nginx:latest "nginx" Less than a second ago
18.2 Swarm 237
running 192.168.0.42:80->80/tcp node-1 front
1
此时就可以通过-e affinity:container==front来启动另一个容器，使得该容器和front在同