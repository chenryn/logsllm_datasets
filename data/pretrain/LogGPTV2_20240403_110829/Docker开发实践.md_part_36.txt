### 优化后的文本

#### 初始化与监听
1. **启动服务**
   - `serveapi(tcp://0.0.0.0:2375)`

2. **初始化服务器**
   - `initserver()`
   - 创建服务器
   - 2015/01/13 11:46:45 监听TCP端口 (0.0.0.0:2375)
   - `initserver()` 成功完成 (状态码: 0)

3. **接受连接**
   - `acceptconnections()`
   - `acceptconnections()` 成功完成 (状态码: 0)

或者在配置文件中进行配置，这样每次启动时将自动设置。

#### 常用命令
接下来，我们将介绍Swarm的常用命令。这些命令可以通过Swarm镜像来执行。在获取到Swarm镜像之后，可以使用以下命令启动：

```bash
$ docker run --rm swarm
```

**输出信息：**

- **名称**: swarm - Docker原生集群系统
- **用法**:
  ```bash
  swarm [全局选项] 命令 [命令选项] [参数...]
  ```
- **版本**: 0.1.0 (a445ed9)
- **命令**:
  - `create` 或 `c`: 创建一个集群
  - `list` 或 `l`: 列出集群中的节点
  - `manage` 或 `m`: 管理Docker集群
  - `join` 或 `j`: 加入Docker集群
  - `help` 或 `h`: 显示命令列表或帮助信息
- **全局选项**:
  - `--debug`: 调试模式 [$DEBUG]
  - `--log-level, -l "info"`: 日志级别 (选项: debug, info, warn, error, fatal, panic)
  - `--help, -h`: 显示帮助
  - `--version, -v`: 打印版本信息

#### 命令详解

1. **创建集群**
   - 使用 `create` 命令创建集群：
     ```bash
     $ docker run --rm swarm create
     73f8bc512e94195210fad6e9cd58986f
     ```
   - `create` 命令会从Docker Hub的发现服务中获取一个唯一的token，用于标识当前创建的Docker集群。此时，Swarm集群还没有实际的节点，只是一个集群标识。Docker节点可以通过这个标识加入到集群中成为Swarm节点。

2. **加入集群**
   - 使用 `join` 命令将Docker节点加入到集群中：
     ```bash
     $ docker run -d swarm join --addr=<node_ip>:2375 token://<cluster_id>
     ```
   - 例如，如果有一个节点的IP地址为192.168.1.85，可以将其加入到刚建立的Swarm集群中：
     ```bash
     $ docker run -d swarm join --addr=192.168.1.85:2375 token://73f8bc512e94195210fad6e9cd58986f
     ```

3. **管理集群**
   - 使用 `manage` 命令管理集群：
     ```bash
     $ docker run -t -p <local_port>:2375 -t swarm manage token://<cluster_id>
     ```
   - 例如：
     ```bash
     $ docker run -t -p 2376:2375 -t swarm manage token://73f8bc512e94195210fad6e9cd58986f
     ```
   - 这条命令可以在Swarm集群的任何节点上运行，`-p` 用于端口映射。`manage` 命令执行后，将在Swarm集群内部启动Swarm并接受后续的Docker集群管理请求。启动Swarm之后，可以向Swarm服务器发送类似于Docker后台的请求，例如：
     ```bash
     $ docker -H tcp://<swarm_manager_ip>:<port> info
     $ docker -H tcp://<swarm_manager_ip>:<port> run ...
     $ docker -H tcp://<swarm_manager_ip>:<port> ps
     $ docker -H tcp://<swarm_manager_ip>:<port> logs ...
     ```

4. **列出集群节点**
   - 使用 `list` 命令列出集群中的节点状况：
     ```bash
     $ docker run --rm swarm list token://<cluster_id>
     ```
   - 例如：
     ```bash
     $ docker run --rm swarm list token://73f8bc512e94195210fad6e9cd58986f
     192.168.1.85:2375
     192.168.1.86:2375
     ```

#### 发现服务和调度

1. **发现服务**
   - 发现服务是一种维护集群状态的机制，它可以与各种后端服务器（如Consul、Etcd）协调合作，也可以直接使用节点发现和文件发现。
   - **节点发现**:
     - 最基本的发现方法，不需要任何文件或后端服务器，仅通过命令行实现。
     - 启动命令：
       ```bash
       swarm manage --discovery <dockerhost01:2375>,<dockerhost02:2375>,<dockerhost03:2375> -H=0.0.0.0:2375
       ```
   - **文件发现**:
     - 利用本地文件系统中的文件来配置发现服务，例如 `/etc/swarm/cluster_config`。
     - 文件内容示例：
       ```plaintext
       dockerhost01:2375
       dockerhost02:2375
       dockerhost03:2375
       ```
     - 启动命令：
       ```bash
       swarm manage --discovery file:///etc/swarm/cluster_config -H=0.0.0.0:2375
       ```
   - **Consul发现**:
     - 使用Consul的键值对保存机制来保存节点的IP:Port值。
     - 客户端启动命令：
       ```bash
       swarm join --discovery consul://<consulhost01>/swarm --addr=<node_ip>:2375
       ```
     - 主控节点启动命令：
       ```bash
       swarm manage --discovery consul://<consulhost01>/swarm -H=0.0.0.0:2375
       ```
   - **Etcd发现**:
     - 类似于Consul发现机制，使用Etcd作为键值对存储服务。
     - 客户端启动命令：
       ```bash
       swarm join --discovery etcd://<etcdhost01>/swarm --addr=<node_ip>:2375
       ```
     - 主控节点启动命令：
       ```bash
       swarm manage --discovery etcd://<etcdhost01>/swarm -H=0.0.0.0:2375
       ```
   - **ZooKeeper发现**:
     - 使用ZooKeeper集合来保存节点列表，并根据Docker后台的运行状态动态维护该列表。
     - 客户端启动命令：
       ```bash
       swarm join --discovery zk://<zkhost01>,<zkhost02>,<zkhost03>/swarm --addr=<node_ip>:2375
       ```
     - 主控节点启动命令：
       ```bash
       swarm manage --discovery zk://<zkhost01>,<zkhost02>,<zkhost03>/swarm -H=0.0.0.0:2375
       ```

2. **调度**
   - 调度是决定任务由哪个Swarm节点来执行的过程，包括条件过滤和调度策略两部分。
   - **条件过滤**:
     - 通过标签来实现，例如在Docker后台启动时设置标签：
       ```bash
       docker -d --label storage=ssd --label zone=external --label tier=data -H tcp://0.0.0.0:2375
       ```
     - **约束过滤**:
       - 使用Docker后台启动时配置的键值对标签来过滤。例如，通过特定的主机特性进行选择：
         ```bash
         $ docker run -d -P -e constraint:storage==ssd --name db mysql
         f8b693db9cd6
         ```
     - **类同过滤**:
       - 参考另一个容器来部署新的容器，新的容器被部署到和被参考容器相同的节点上。例如：
         ```bash
         $ docker run -d -p 80:80 --name front nginx
         87c4376856a8
         $ docker run -d -P -e affinity:container==front --name new_container some_image
         ```

通过以上步骤，您可以有效地管理和调度Docker Swarm集群。