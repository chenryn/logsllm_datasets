Let’s consider an example of an attack against confidentiality, assess its impact, and understand
how it could have been prevented or mitigated. In August 2021, T-Mobile57 announced that
hackers had accessed data associated with over 50 million current, former, and prospective
customers. While no payment information, passwords, or PINs were accessed, some of the data
included first and last names, dates of birth, social security numbers, and ID / drivers’ license
information. This data was subsequently offered for sale on the dark web.
The attack impacted the confidentiality of the personal information of millions of current, former,
and prospective customers. The confidentiality of this information was subsequently further
compromised by being made available for purchase on the dark web. This also led to further
reputational damage to T-Mobile as the attack was one of a number of then-recent breaches.
There is limited information available on the exact methodology58 used by the attackers; however,
they claim to have first compromised a router to gain access to over 100 servers including the
database or databases that contained the affected customer dayta. This breach could have
potentially been prevented by ensuring that all internet-facing resources were properly configured,
patched and updated, by monitoring for anomalous user behavior, and by instituting better
k
network segmentation.
Private documents such as drivers’ licenses ought tos be confidential, because they contain
information that can identify individuals. However, not all information possessed by a company is
necessarily confidential. For example, T-mobile’so board members are publicly listed on their
website. Therefore, if an attack were to divulge that information, it would not be a breach against
confidentiality.
n
3.3.2 Integrity
i
A system has Integrity if the information and functionality it stores is only that which the owner
z
intends to be stored. Integrity is concerned with maintaining the accuracy and reliability of data
and services. Merely logging on to a user’s social media account by guessing their password is
not an attack against inteDgrity. However, if the attacker starts to post messages or delete
information, this would become an integrity attack as well. A common attack against integrity is
arbitrary code execution.59
In January 2022,60 researchers identified a new wiper malware, dubbed WhisperGate, being used
against Ukrainian targets. This malware has two stages: stage one overwrites the Master Boot
Record (MBR) to display a fake ransomware note, while stage two downloads further malware
overwriting files with specific extensions, thus rendering them corrupt and unrecoverable. This
attack impacts the integrity of data61 on affected system by overwriting files in an irrecoverable
manner, effectively deleting them.
In their advisory, Microsoft recommended that potential targets take the following steps to
protect themselves: enable MFA to mitigate potentially compromised credentials, enable
Controlled Folder Access (CFA) in Microsoft Defender to prevent MBR/VBR tampering, use
57 (T-Mobile, 2021), https://www.t-mobile.com/news/network/additional-information-regarding-2021-cyberattack-investigation
58 (ZDNet, 2021), https://www.zdnet.com/article/t-mobile-hack-everything-you-need-to-know/
59 (Wikipedia, 2021), https://en.wikipedia.org/wiki/Arbitrary_code_execution
60 (Microsoft, 2022), https://www.microsoft.com/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/
61 (Cisco, 2022), https://blog.talosintelligence.com/2022/01/ukraine-campaign-delivers-defacement.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 42
Made in Morocco
Penetration Testing with Kali Linux
provided IoCs to search for potential breaches, review and validate authentication activity for all
remote access, and investigate other anomalous activity. More information about the technical
details of the attack has been published by CrowdStrike.62. Put simply, integrity is important for an
enterprise to protect because other businesses and consumers need to be able to trust the
information held by the enterprise.
3.3.3 Availability
A system is considered Available if the people who are supposed to access it can do so. Imagine
an attacker has gained access to a social media account and also posted some content of their
choosing. So far, this would constitute an attack against confidentiality and integrity. If the
attacker changes the user’s password and prevents them from logging on, this would also
become an attack against availability. A common attack against availability is denial of service.63
On February 24, 2022, at the beginning of the Russian invasion oyf Ukraine, Viasat’s64 satellite
broadband service was hit by a Denial of Service (DoS) attack that brought down satellite internet
for Ukrainian customers, including the Ukrainian government and military. This attack utilized a
k
then-novel wiper malware known as AcidRain.
The impact65 of this attack was that Viasat’s satellites internet was temporarily unavailable in
Ukraine at a critical moment at the beginning of the invasion, disrupting communication and
coordination. Very little information is available aboout how this attack unfolded. Viasat stated that
a VPN “misconfiguration” allowed initial access. Though it is unclear what the specific
misconfiguration was, this attack could have been prevented by ensuring proper VPN
n
configuration.
It is possible that this attack could have been prevented - though we should acknowledge the
i
well-known difficulties associated with prevention - by following general guidance for defending
z
against Advanced Persistent Threats (APTs).66 This guidance suggests ensuring complete
visibility into one’s environment, engaging in threat intelligence, and performing threat hunting,
among other recommendatDions.
3.3.4 Balancing the Triad with Organizational Objectives
Before concluding this section, let’s zoom out and consider how prioritizing the CIA triad can
impact an organization. In particular, an important nuance to consider is that security controls
themselves can sometimes be a detriment to availability. Extremely strong security isn’t always
optimal for an organization. If security is so strong that users are not able to use the systems, or
frequently become frustrated with the systems, this may lead to inefficiency, low morale, and
potentially the collapse of the organization.
Balancing security controls with availability is a critical and continuous process of evaluation,
exploration, threat modelling, discussion, testing, and release. Making rules that prevent
employees from participating in improvements is an easy way to ruin a security program. Security
62 (CrowdStrike, 2022), https://www.crowdstrike.com/blog/technical-analysis-of-whispergate-malware/
63 (Wikipedia, 2021), https://en.wikipedia.org/wiki/Denial-of-service_attack
64 (Viasat, 2022), https://www.viasat.com/about/newsroom/blog/ka-sat-network-cyber-attack-overview/
65 (Sentinel One, 2022), https://www.sentinelone.com/labs/acidrain-a-modem-wiper-rains-down-on-europe/
66 (CrowdStrike, 2022), https://www.crowdstrike.com/cybersecurity-101/advanced-persistent-threat-apt/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 43
Made in Morocco
Penetration Testing with Kali Linux
is everyone’s responsibility, and processes that receive feedback from the entire organization as
well as educate employees about how to use the controls are typically important to a successful
security program.
3.4 Security Principles, Controls, and Strategies
This Learning Unit covers the following Learning Objectives:
• Understand the importance of multiple layers of defense in a security strategy
• Describe threat intelligence and its applications in an organization
• Learn why access and user privileges should be restricted as much as possible
• Understand why security should not depend on secrecy
y
• Identify policies that can mitigate threats to an organization
• Determine which controls an organization can use to mitigate cybersecurity threats
k
3.4.1 Security Principles
s
During this Learning Unit, we’ll begin to explore a few security67 principles68 we might encounter
throughout our OffSec Learning Journey. Although this subject could be its own in-depth Module,
o
for now, we’ll cover a few high-level descriptions.
The Principle of Least Privilege69 expresses the idea that each part within a system should only be
n
granted the lowest possible privileges needed to achieve its task. Whether referring to users on a
machine or lines of code in a program, correctly adhering to this discipline can greatly narrow the
attack surface. i
z
Earlier we referenced the 2019 Capital One attack. We’ll recall that this attack was facilitated by
leveraging a Web Application Firewall with permissions that were too high for its required
D
functions. It’s important to understand that the Principle of Least Privilege does not only apply to
human individuals or groups, but any entity (including machines, routers, and firewalls) that can
read, write, or modify data.
The Zero Trust70 security model takes the Principle of Least Privilege and carries it to its ultimate
conclusion. This model advocates for removing all implicit trust of networks and has a goal of
protecting access to resources, often with granular authorization processes for every resource
request.
Open Security,71 a somewhat counter-intuitive principle, states that the security of a system
should not depend on its secrecy. In other words, even if an attacker knows exactly how the
system’s security is implemented, the attacker should still be thwarted. This isn’t to say that
nothing should be secret. Credentials are a clear case where the security of a password depends
67 (Wheeler, 2021), https://dwheeler.com/secure-programs/Secure-Programs-HOWTO/follow-good-principles.html
68 (Patchstack, 2021), https://blog.threatpress.com/security-design-principles-owasp/
69 (Wikipedia, 2021), https://en.wikipedia.org/wiki/Principle_of_least_privilege
70 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Zero_trust_security_model
71 (Wikipedia, 2021), https://en.wikipedia.org/wiki/Open_security
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 44
Made in Morocco
Penetration Testing with Kali Linux
on its secrecy. However, we’d want our system to be secure even if the attacker knows there is a
password, and even if they know the cryptographic algorithm behind it.
Defense in Depth72 advocates for adding defenses to as many layers of a system as possible, so
that if one is bypassed, another may still prevent full infiltration. An example of defense in depth
outside the context of cybersecurity would be a garage that requires entering an electronic code,
using a key on a bolted door lock, then finally disabling a voice-activated internal alarm system to
open the garage.
Many organizations do not apply adequate defenses for their systems and lean too heavily on
external tools or providers that focus on one specific area of defense. This can lead to single
points of failure, resulting in a very weak security posture. We must learn to apply many layers of
controls and design our systems with defense in depth in order to resist more threats and better
respond to incidents.
y
3.4.2 Security Controls and Strategies
k
To meet the ideals of concepts such as least privilege, open security, and defense-in-depth, we
need to implement Security Strategies. These can include interventions like:
s
• 24/7 vigilance
• Threat modelling o
• Table top discussions
n
• Continuous training on tactics, processes, and procedures
• Continuous automated patching
i
• Continuous supply chain verification
z
• Secure coding and design
D
• Daily log reviews
• Multiple layers of well-implemented Security Controls73
This might feel overwhelming at first. In particular, a defense-in-depth strategy involves people
and technologies creating layers of barriers to protect resources.
In the CIA Triad Learning Unit, we mentioned that a consequence to strong security can be
reduced availability. If a system’s security is prioritized over availability, then there may be
increased downtime and ultimately increased user frustration. An example of this could be using
the Kerberos74 authentication protocol without a fall back authentication method. In GNU/Linux,
Kerberos might be configured without a failsafe: no alternate network access authorization
method. This can result in no one being able to access network services if there is a Kerberos
issue. If security is the top priority, this could be ideal depending on the organization’s goals.
However, if availability is the top priority, such an approach could damage the system by
improving its security without care.
72 (Wikipedia, 2021), https://en.wikipedia.org/wiki/Defense_in_depth_(computing)
73 (NIST, 2022), https://csrc.nist.gov/glossary/term/security_control
74 (MIT, 2022), https://web.mit.edu/kerberos/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 45
Made in Morocco
Penetration Testing with Kali Linux
Security controls can also be extremely time consuming to properly use and maintain. If a control
is expensive enough, an organization could lose profitability. Security controls must also be
balanced with financial resources and personnel restraints.
Next, let’s explore a variety of different security controls that an organization might implement.
3.4.3 Shift-Left Security
One of the best ways to avoid extra costs and impacts to availability is to design an entire system
so that security is built into the service architecture, rather than requiring many additional
software layers. In order to design systems with built-in security, the idea of shift-left security75
can improve efficiency. The idea of shift-left security is to consider security engineering from the
outset when designing a product or system, rather than attempt to bake it in after the product has
been built.
y
Without shift-left security, we might have developers shipping products without security, and then
need to add in additional layers of security on top of, or along with, the product. If the security
k
team is involved in the development process, we have a better chance of creating a product with
controls built in, making a more seamless user experience as well as reducing the need for
additional security services. s
Most applications do not have security built in and instead rely on platform-level security controls
o
surrounding the services. This can work well; however, it can result in security being weaker or
easier to bypass. For example, if a specific technology (for example, Kubernetes modules) are
providing all of the security services, then snomeone that controls that technology (in this case, a
Kubernetes administrator) could remove or tamper with it and bypass security for all services.
However, we once again need toi consider business impact. In particular, shifting left can
potentially cause slower productizon times because developers will need to explicitly think about
security in addition to the product specifications. An organization therefore will need to decide
what trade-offs they can mDake in their particular circumstance. Despite the potential reduction in
security posture, focusing on platform-level security controls can provide the lowest friction to
development efforts and the fastest time to market for application developers while producing
reasonable security posture.
3.4.4 Administrative Segmentation
It may seem okay to have an administrator bypass security controls based on their role and
functional needs. Shouldn’t we trust our administrators? However, when a threat is internal or
otherwise able to obtain valid administrative credentials, our security posture becomes weaker. In
order to defeat internal threats and threats that have acquired valid credentials or authentication
capability, we must segment controls so that no single authority can bypass all controls. In order
to accomplish this, we may need to split controls between application teams and administrators,
or split access for administration between multiple administrators, as with Shamir’s Secret
Sharing (SSS).76
With SSS, we might design a system so that three different administrator authorizations are
required to authorize any one administrative root access. Shamir’s secret sharing scheme
75 (Devopeida, 2022), https://devopedia.org/shift-left
76 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 46
Made in Morocco
Penetration Testing with Kali Linux
enables a system to split access authorization requirements between multiple systems or
persons. With this in place, we can design a system so that no one person has the root
credentials.
3.4.5 Threat Modelling and Threat Intelligence
After we’ve completed an inventory for both systems and software and we understand our
organization’s requirements, we’re ready to begin researching potential threats. Security teams
research (or leverage vendor research about) threats to different industries and software. We can
use this information in our Threat Modelling.77 Threat modelling describes taking data from real-
world adversaries and evaluating those attack patterns and techniques against our people,
processes, systems, and software. It is important to consider how the compromise of one system
in our network might impact others.
Threat Intelligence78 is data that has been refined in the context ofy the organization: actionable
information that an organization has gathered via threat modelling about a valid threat to that
organization’s success. Information isn’t considered threat intelligence unless it results in an
k
action item for the organization. The existence of an exploit is not threat intelligence; however, it is
potentially useful information that might lead to threat intelligence.
s
An example of threat intelligence occurs when a relevant adversary’s attack patterns are learned,
and those attack patterns could defeat the curreont controls in the organization, and when that
adversary is a potential threat to the organization. The difference between security information
and threat intelligence is often that security information has only been studied out of context for
n
the specific organization. When real threat intelligence is gathered, an organization can take
informed action to improve their processes, procedures, tactics, and controls.
i
3.4.6 Table-Top Tactics
z
After concerning threat intelligence or other important information is received, enterprises may
benefit from immediately sDcheduling a cross organization discussion. One type of discussion is
known as a table-top, which brings together engineers, stakeholders, and security professionals to
discuss how the organization might react to various types of disasters and attacks. Conducting
regular table-tops to evaluate different systems and environments is a great way to ensure that all
teams know the Tactics, Techniques, and Procedures (TTPs)79 for handling various scenarios.
Often organizations don’t build out proper TTPs, resulting in longer incident response times.
Table-top discussions help organizations raise cross-team awareness, helping teams understand
weaknesses and gaps in controls so they can better plan for such scenarios in their tactics,
procedures, and systems designs. Having engineers and specialists involved in table-tops might
help other teams find solutions to security issues, or vice-versa.
Let’s imagine a scenario in which we learn that a phishing email attack on an administrator would
represent a complete company compromise. To build up our defensive controls, we may decide
to create an email access portal for administrators that is physically isolated. When the
administrators view their email, they would do so through a screen displaying a client view into a
77 (NIST, 2022), https://csrc.nist.gov/glossary/term/threat_modeling
78 (NIST, 2022), https://csrc.nist.gov/glossary/term/threat_intelligence
79 (NIST, 2022), https://csrc.nist.gov/glossary/term/tactics_techniques_and_procedures
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 47
Made in Morocco
Penetration Testing with Kali Linux
heavily-secured email sandbox. This way, emails are opened up inside a sandboxed machine on
separate hardware, instead of on administrative workstations that have production access.
Table-top security sessions are part of Business Continuity Planning (BCP).80 BCP also includes
many other aspects such as live drill responses to situations like ransomware and supply-chain
compromise. BCP extends outside of cybersecurity emergencies to include processes and
procedures for natural disasters and gun violence. Routine table-top sessions and continuous
gathering of relevant intelligence provides a proactive effort for mitigating future issues as well as
rehearsing tactics, processes, and procedures.
3.4.7 Continuous Patching and Supply Chain Validation
Another defensive technique known as continuous automated patching is accomplished by pulling
the upstream source code and applying it to the lowest development environment. Next, the
change is tested, and only moved to production if it is successful. Wye can leverage cloud provider