# Advanced Substitution Techniques in Vim

## Specifying a Range of Lines for Substitution
You can limit the substitution to a specific range of lines. For example, specifying `1, 10` as the range will apply the substitution only to lines 1 through 10.

### Example 4: Substitution Using a Visual Selection
You can control the substitution range by visually selecting specific lines. Press `CTRL + V` in command mode, use navigation keys to select the part of the file you want to be used as the range. Press `:` which will automatically change to `:'<,'>`. Then, you can type the rest of the command:

```vim
:'<,'>s/helo/hello/g
```

### Example 5: Substitution in the Next N Number of Lines
Specifying a count argument at the end of a substitution command applies the substitution over the next {count} lines from the current line. For example, to substitute over the next 4 lines:

```vim
:s/helo/hello/g 4
```

## Whole Word Substitution
To substitute only whole words and not partial matches, enclose the word with `\b` (word boundary).

### Example 6: Substitute Only Whole Words
Original Text:
```
This is his idea
```
Standard Substitution:
```vim
:s/his/her/g
```
Translated Text:
```
Ther is her idea
```
Whole Word Substitution:
```vim
:s/\bhis\b/her/g
```
Translated Text:
```
This is her idea
```

**Note:** Enclosing the word with `\b` ensures that only the full word is matched, not any partial match.

## Substituting Either of Two Words Using Regular Expressions
Vim can replace either of two words with a new word using a regular expression.

### Example 7: Substituting Either of Two Words
Original Text:
```
Linux is good. Life is nice.
```
Substitution Command:
```vim
:%s/\(good\|nice\)/awesome/g
```
Translated Text:
```
Linux is awesome. Life is awesome.
```

**Note:** The `\|` operator is used for "logical or" in regular expressions.

## Interactive Find and Replace
You can perform an interactive search and replace using the `c` flag, which asks for confirmation before each substitution.

### Example 8: Interactive Find and Replace
Command:
```vim
:%s/awesome/wonderful/gc
```
Prompts:
- `y` – Replace the current highlighted word.
- `n` – Do not replace the current highlighted word.
- `a` – Replace all remaining matches without further prompting.
- `l` – Replace the current highlighted word and terminate the find and replace.

## Prepending Line Numbers
You can prepend each line with its line number using the `line()` function.

### Example 9: Prepending Line Numbers
Command:
```vim
:%s/^/\=line(".") . ". "/g
```

**Note:** This is different from `:set number`, which does not write the line numbers into the file.

## Substituting Special Characters
You can substitute special characters with their equivalent values, such as substituting `~` with the value of the `$HOME` variable.

### Example 10: Substituting Special Characters
Original Text:
```
Current file path is ~/test/
```
Substitution Command:
```vim
:%s!~!\=expand($HOME)!g
```
Translated Text:
```
Current file path is /home/ramesh/test/
```

**Note:** Use `!` instead of `/` to avoid confusion with the forward slashes in the `$HOME` value.

## Altering Sequence Numbers in a Numbered List
You can alter the sequence numbers in a numbered list when inserting a new item.

### Example 11: Altering Sequence Numbers
Original List:
```
Article 1: Vi and Vim Editor: 3 Steps To Enable Thesaurus Option
Article 2: Vim Autocommand: 3 Steps to Add Custom Header To Your File
...
Article 12: Convert Vim Editor to Beautiful Source Code Browser
```
Command to Insert New Article:
```vim
:4,$s/\d\+/\=submatch(0) + 1/
```

After executing the command, the list will be updated, and you can add the new article.

## Capitalizing the First Character of Each Sentence
You can capitalize the first character of each sentence using a substitution command.

### Example 12: Capitalizing Sentences
Original Text:
```
Lot of vi/vim tips and tricks are available at thegeekstuff.com. reading these articles will make you very productive. following activities can be done very easily using vim editor.
```
Substitution Command:
```vim
:%s/\.\s*\w/\=toupper(submatch(0))/g
```
Translated Text:
```
Lot of vi/vim tips and tricks are available at thegeekstuff.com. Reading these articles will make you very productive. Following activities can be done very easily using vim editor.
```

## Additional Vim Hacks

### Hack 91: Search Across Multiple Files
Use `vimgrep` to search for a term across multiple files.

```vim
:vimgrep jason *.txt
```

### Hack 92: Highlight Search Results
Enable search result highlighting with `:set hlsearch`.

### Hack 93: Incremental Search
Enable incremental search with `:set incsearch`.

### Hack 94: The Power of `:match`
Highlight specific keywords with the `:match` command.

```vim
:match ErrorMsg /Error/
```

### Chapter 14: Automatic Completion
#### Hack 95: Automatic Word Completion
Use `CTRL-X CTRL-N` and `CTRL-X CTRL-P` for word completion.

#### Hack 96: Automatic Line Completion
Use `CTRL-X CTRL-L` to complete lines.

#### Hack 97: Automatic Filename Completion
Use `CTRL-X CTRL-F` to complete filenames.

#### Hack 98: Dictionary Completion
Add a dictionary to `~/.vimrc` and use `CTRL-X CTRL-K` for dictionary word completion.

#### Hack 99: Thesaurus Word Completion
Define a thesaurus file and use `CTRL-X CTRL-T` to access synonyms.

For more information, visit [Vim 101 Hacks](www.thegeekstuff.com).