      Load L1D hit                      :      17235
      Load L2D hit                      :         21
      Load LLC hit                      :      14219
      Load Local HITM                   :       3402
      Load Remote HITM                  :      12757
      Load Remote HIT                   :       5295
      Load Local DRAM                   :        976
      Load Remote DRAM                  :       3246
      Load MESI State Exclusive         :       4222
      Load MESI State Shared            :          0
      Load LLC Misses                   :      22274
      LLC Misses to Local DRAM          :        4.4%
      LLC Misses to Remote DRAM         :       14.6%
      LLC Misses to Remote cache (HIT)  :       23.8%
      LLC Misses to Remote cache (HITM) : 57.3%
      Store Operations                  :     259539
      Store - uncacheable               :          0
      Store - no mapping                :         11
      Store L1D Hit                     :     256696
      Store L1D Miss                    :       2832
      No Page Map Rejects               :       2376
      Unable to parse data source       :          1
    ```
3.  检查共享数据 [**缓存表**]{.strong} 的 [**LLC Load Hitm**]{.strong}
    字段的 [**Rmt**]{.strong} 列：
    ``` literallayout
      =================================================
                 Shared Data Cache Line Table
      =================================================
      #
      #                              Total      Rmt  ----- LLC Load Hitm -----  ---- Store Reference ----  --- Load Dram ----      LLC    Total  ----- Core Load Hit -----  -- LLC Load Hit --
      # Index           Cacheline  records     Hitm    Total      Lcl      Rmt    Total    L1Hit   L1Miss       Lcl       Rmt  Ld Miss    Loads       FB       L1       L2       Llc       Rmt
      # .....  ..................  .......  .......  .......  .......  .......  .......  .......  .......  ........  ........  .......  .......  .......  .......  .......  ........  ........
      #
            0            0x602180   149904   77.09%    12103     2269     9834   109504   109036      468       727      2657    13747    40400     5355    16154        0      2875       529
            1            0x602100    12128   22.20%     3951     1119     2832        0        0        0        65       200     3749    12128     5096      108        0      2056       652
            2  0xffff883ffb6a7e80      260    0.09%       15        3       12      161      161        0         1         1       15       99       25       50        0         6         1
            3  0xffffffff81aec000      157    0.07%        9        0        9        1        0        1         0         7       20      156       50       59        0        27         4
            4  0xffffffff81e3f540      179    0.06%        9        1        8      117       97       20         0        10       25       62       11        1        0        24         7
    ```
    这个表按照每个缓存行检测到的远程 [**Hitm**]{.strong}
    数量按降序排列。[**LLC Load Hit [**m 部分的 Rm**]{.strong} t
    列中有一个**]{.strong}
    高数字表示共享错误，并且需要进一步检查发生错误共享活动的缓存行。
:::
:::
:::
[]{#getting-started-with-flamegraphs_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#getting-started-with-flamegraphs_monitoring-and-managing-system-status-and-performance.html#getting-started-with-flamegraphs_monitoring-and-managing-system-status-and-performance}第 27 章 flamegraphs 入门 {.title}
:::
作为系统管理员，您可以使用 `flamegraphs 为`{.literal} `perf`{.literal}
工具记录的系统性能数据创建视觉化呈现。作为软件开发商，您可以使用
`flamegraphs 对`{.literal} 使用 `perf`{.literal}
工具记录的应用程序性能数据进行视觉化呈现。
sampling stack traces 是使用 `perf`{.literal} 工具分析 CPU
性能的常用技术。遗憾的是，使用 `perf`{.literal}
分析堆栈踪迹的结果可能非常详细，分析工作也比较复杂。`Flangraph`{.literal}
是利用 `perf`{.literal}
记录的数据创建的视觉化，使识别热代码路径变得更快、更容易。
::: section
::: titlepage
# []{#getting-started-with-flamegraphs_monitoring-and-managing-system-status-and-performance.html#installing-flamegraphs_getting-started-with-flamegraphs}安装 flamegraphs {.title}
:::
要开始使用 `flamegraphs`{.literal}，请安装所需的软件包。
::: itemizedlist
**流程**
-   安装 `flamegraphs`{.literal} 软件包：
    ``` screen
    # {PackageManagerCommand} install js-d3-flame-graph
    ```
:::
:::
::: section
::: titlepage
# []{#getting-started-with-flamegraphs_monitoring-and-managing-system-status-and-performance.html#creating-flamegraphs-over-the-entire-system_getting-started-with-flamegraphs}在整个系统中创建 flamegraphs {.title}
:::
这个步骤描述了如何使用 `flamegraphs`{.literal}
在整个系统中视觉化性能数据。
::: itemizedlist
**先决条件**
-   `Flangraphs`{.literal} 安装如 [安装
    flamegraphs](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/getting-started-with-flamegraphs_monitoring-and-managing-system-status-and-performance#installing-flamegraphs_getting-started-with-flamegraphs){.link}
    所述。
-   `perf`{.literal} 工具按照安装 [perf
    所述进行安装](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/getting-started-with-perf_monitoring-and-managing-system-status-and-performance#installing-perf_getting-started-with-perf){.link}。
:::
::: itemizedlist
**流程**
-   记录数据并创建视觉化：
    ``` screen
    # perf script flamegraph -a -F 99 sleep 60
    ```
    这个命令在 60 秒内对整个系统的性能数据进行抽样并记录，因为使用
    `sleep`{.literal} 命令可以证明，然后以 `flamegraph.html`{.literal}
    形式将视觉化存储在当前活动目录中。默认情况下，命令示例 call-graph
    数据，并使用与 `perf`{.literal} 工具相同的参数，在这种情况下：
    ::: variablelist
    [`-a`{.literal}]{.term}
    :   强制记录整个系统中的数据。
    [`-F`{.literal}]{.term}
    :   设置每秒抽样频率：
    :::
:::
::: itemizedlist
**验证步骤**
-   为了进行分析，请查看生成的视觉化：
    ``` screen
    # xdg-open flamegraph.html
    ```
    这个命令在默认浏览器中打开视觉化：
    [![flamegraph
    allcpus](images/flamegraph_allcpus.png)]{.inlinemediaobject}
:::
:::
::: section
::: titlepage
# []{#getting-started-with-flamegraphs_monitoring-and-managing-system-status-and-performance.html#creating-flamegraphs-over-specific-processes_getting-started-with-flamegraphs}在特定进程上创建 flamegraphs {.title}
:::
您可以使用 `flamegraphs`{.literal}
来视觉化通过特定运行的进程记录的性能数据。
::: itemizedlist
**先决条件**
-   `Flangraphs`{.literal} 安装如 [安装
    flamegraphs](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/getting-started-with-flamegraphs_monitoring-and-managing-system-status-and-performance#installing-flamegraphs_getting-started-with-flamegraphs){.link}
    所述。
-   `perf`{.literal} 工具按照安装 [perf
    所述进行安装](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/monitoring_and_managing_system_status_and_performance/getting-started-with-perf_monitoring-and-managing-system-status-and-performance#installing-perf_getting-started-with-perf){.link}。
:::
::: itemizedlist
**流程**
-   记录数据并创建视觉化：
    ``` screen
    # perf script flamegraph -a -F 99 -p ID1,ID2 sleep 60
    ```
    该命令会取样并记录进程 ID 为 `ID1`{.literal} 和 `ID2`{.literal}
    的进程的 60 秒的性能数据，使用 `sleep`{.literal} 命令确定，然后以
    `flamegraph.html`{.literal}
    形式保存在当前活动目录中的视觉化。默认情况下，命令示例 call-graph
    数据，并使用与 `perf`{.literal} 工具相同的参数，在这种情况下：
    ::: variablelist
    [`-a`{.literal}]{.term}
    :   强制记录整个系统中的数据。
    [`-F`{.literal}]{.term}
    :   设置每秒抽样频率：
    [`-p`{.literal}]{.term}
    :   对特定进程 ID 进行抽样并记录数据的步骤：
    :::
:::
::: itemizedlist
**验证步骤**
-   为了进行分析，请查看生成的视觉化：
    ``` screen
    # xdg-open flamegraph.html
    ```
    这个命令在默认浏览器中打开视觉化：
    [![flamegraph](images/flamegraph.png)]{.inlinemediaobject}
:::
:::
::: section
::: titlepage
# []{#getting-started-with-flamegraphs_monitoring-and-managing-system-status-and-performance.html#interpreting-flamegraphs_getting-started-with-flamegraphs}解释 flamegraphs {.title}
:::
Flangraph 中的每个方框表示堆栈中的不同功能。y-xis
显示了堆栈的深度，每个堆栈中最顶层框是实际运行在 CPU
上的功能，其下方的所有内容都处于就绪状态。x-axis 显示示例调用-graph
数据的填充。
给定行中的堆栈子级显示基于每个相应函数按照 x-axis
降序获取的示例数量；x-axis
并不代表时间传递。个人盒越宽，在数据被采样时，它越常发生 CPU 或 CPU
ancestry 的一部分。
::: itemizedlist
**流程**
-   显示之前可能未显示的功能名称，并进一步调查 flamegraph
    中的框以放大到给定位置的堆栈中：
    [![zoomed in
    flamegraph](images/zoomed-in-flamegraph.png)]{.inlinemediaobject}
-   要返回 flamegraph 的默认视图，点 [Reset Zoom]{.guibutton}。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
代表用户空间函数的框可以在 `flamegraphs 中`{.literal} 标记为
[**Unknown**]{.strong}，因为函数的二进制被剥离。必须安装可执行文件的
`debuginfo`{.literal}
软件包，或者，如果可执行文件是本地开发的应用，则必须使用调试信息编译应用。在
GCC 中使用 `-g`{.literal} 选项来显示此类情况下的功能名称或符号。
[![flamegraph](images/flamegraph.png)]{.inlinemediaobject}
:::
::: itemizedlist
**其它资源**
-   [为什么 perf
    显示一些功能名称作为原始函数地址](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/monitoring_and_managing_system_status_and_performance/index#why-perf-displays-some-function-names-as-raw-function-addresses_real-time-system-profiling-using-perf-top){.link}
-   [使用调试信息启用调试](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/developing_c_and_cpp_applications_in_rhel_8/enabling-debugging-with-debugging-information_debugging-applications){.link}
:::
:::
:::
[]{#creating-custom-circular-buffers-to-collect-specific-data-with-perf_monitoring-and-managing-system-status-and-performance.html}
::: chapter
::: titlepage
# []{#creating-custom-circular-buffers-to-collect-specific-data-with-perf_monitoring-and-managing-system-status-and-performance.html#creating-custom-circular-buffers-to-collect-specific-data-with-perf_monitoring-and-managing-system-status-and-performance}第 28 章 使用 perf 循环缓冲区监控性能瓶颈的进程 {.title}
:::
您可以使用 `perf`{.literal}
工具创建特定于事件的数据快照，以监控系统上运行的特定进程或应用程序部分的性能瓶颈。在这种情况下，perf
`仅`{.literal} 将数据写入 `perf.data`{.literal}
文件，以便在检测到指定事件时稍后进行分析。
::: section
::: titlepage
# []{#creating-custom-circular-buffers-to-collect-specific-data-with-perf_monitoring-and-managing-system-status-and-performance.html#circular-buffers-and-event-specific-snapshots_assembly_creating-custom-circular-buffers-to-collect-specific-data-with-perf}使用 perf 循环缓冲区和特定于事件的快照 {.title}
:::
使用 `perf`{.literal}
调查进程或应用程序中性能问题时，经济实惠或不适合在特定感兴趣的事件发生前几小时内记录数据。在这种情况下，您可以使用
`perf 记录`{.literal} 创建自定义循环缓冲区，在特定事件后拍摄快照。
overwrite `选项`{.literal} 使 `perf 记录`{.literal}
将所有数据存储在可覆盖的循环缓冲区中。当缓冲区已满时，`perf 记录`{.literal}
会自动覆盖最旧的记录，因此永远不会写入到 `perf.data`{.literal} 文件中。
使用 `--overwrite`{.literal} 和 `--switch-output-event`{.literal}
选项一起配置循环缓冲区，持续记录和转储数据，直到它检测到
`--switch-output-event`{.literal} 触发器事件。触发事件信号到
`perf 记录`{.literal}，记录了用户感兴趣的事情，并将循环缓冲区中的数据写入
`perf.data`{.literal} 文件中。这样可收集您感兴趣的特定数据，同时减少运行
`perf`{.literal} 进程的开销，方法是不写入您不想使用
`perf.data`{.literal} 文件的数据。
:::
::: section
::: titlepage
# []{#creating-custom-circular-buffers-to-collect-specific-data-with-perf_monitoring-and-managing-system-status-and-performance.html#using-perf-to-create-custom-circular-buffers-that-perform-event-specific-snapshots_assembly_creating-custom-circular-buffers-to-collect-specific-data-with-perf}使用 perf 循环缓冲区收集特定数据来监控性能瓶颈 {.title}
:::
使用 `perf`{.literal}
工具，您可以创建由您指定的事件触发的循环缓冲区，以便仅收集您感兴趣的数据。要创建收集事件特定数据的循环缓冲区，请对
`perf`{.literal} 使用 `--overwrite`{.literal} 和
`--switch-output-event`{.literal} 选项。
::: itemizedlist
**先决条件**