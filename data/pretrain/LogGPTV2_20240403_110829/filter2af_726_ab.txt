        /**
         * @var array
         */
        private $_constants = [];
        private $_parser;
        private $_inStatic = false;
        public function __construct($_parser)
        {
            // 生成一个用于存储数据的变量名，比如AAAAA
            $this->_variableName = generate_random_variable(5);
            $this->_parser = $_parser;
        }
        public function afterTraverse(array $nodes)
        {
            $keys = [];
            foreach ($this->_constants as $key => $value) {
                $keys[] = unserialize($key);
            }
            $items = base64_encode(serialize($keys));
            // 懒得写一大串了。。。
            $nodes = array_merge($this->_parser->parse(
                "_variableName}=unserialize(base64_decode('$items'));"
            ), $nodes);
            return $nodes;
        }
        public function enterNode(Node $node)
        {
            // 在每个函数头部插入global $AAAAA
            if ($node instanceof Node\Stmt\Function_) {
                $global = new Node\Stmt\Global_([new Expr\Variable($this->_variableName)]);
                array_unshift($node->stmts, $global);
            }
            if ($node instanceof Node\Param || $node instanceof Node\Stmt\Static_) {
                $this->_inStatic = true;
            }
        }
        public function leaveNode(Node $node)
        {
            if ($node instanceof Node\Param || $node instanceof Node\Stmt\Static_) {
                $this->_inStatic = false;
            }
            if ($this->_inStatic) {
                return;
            }
                    // 处理字符串、数字等类型
            if ($node instanceof Node\Scalar
                && (!$node instanceof Node\Scalar\MagicConst)) {
                // 使用serialize是为了解决类型问题，PHP是个神奇的弱类型语言
                $name = serialize($node->value);
                // _constants是个Map，这样做性能会高一些
                if (!isset($this->_constants[$name])) {
                    // 这里最好事先扫描一遍并编制索引以提升随机性
                    // count仅供测试用，比较好看
                    $this->_constants[$name] = count($this->_constants);
                }
                return new Expr\ArrayDimFetch(
                    new Expr\Variable($this->_variableName),
                    Node\Scalar\LNumber::fromString($this->_constants[$name])
                );
            }
            // 处理true, false等类型
            if ($node instanceof Node\Expr\ConstFetch && $node->name instanceof Node\Name && count($node->name->parts) === 1) {
                $name = $node->name->parts[0];
                switch (strtolower($name)) {
                    case 'true':
                        $name = true;
                        break;
                    case 'false':
                        $name = false;
                        break;
                    case 'null':
                        $name = null;
                        break;
                    default:
                        return;
                }
                $name = serialize($name);
                if (!isset($this->_constants[$name])) {
                    $this->_constants[$name] = count($this->_constants);
                }
                return new Expr\ArrayDimFetch(
                    new Expr\Variable($this->_variableName),
                    Node\Scalar\LNumber::fromString($this->_constants[$name])
                );
        }
    }
而解混淆又要怎么写呢？
    expr instanceof Node\Expr\FuncCall &&
                $node->expr->name instanceof Node\Name &&
                is_string($node->expr->name->parts[0]) &&
                $node->expr->name->parts[0] == 'unserialize' &&
                count($node->expr->args) === 1 &&
                $node->expr->args[0] instanceof Node\Arg &&
                $node->expr->args[0]->value instanceof Node\Expr\FuncCall &&
                $node->expr->args[0]->value->name instanceof Node\Name &&
                is_string($node->expr->args[0]->value->name->parts[0]) &&
                $node->expr->args[0]->value->name->parts[0] == 'base64_decode'
            ) {
                $string = $node->expr->args[0]->value->args[0]->value->value;
                $array = unserialize(base64_decode($string));
                $this->_variableName = $node->var->name;
                $this->_constants = $array;
                return new Node\Expr\Assign($node->var, Node\Scalar\LNumber::fromString("0"));
            }
        }
        public function leaveNode(Node $node)
        {
            if ($this->_variableName === '') return;
            if (
                $node instanceof Node\Expr\ArrayDimFetch &&
                $node->var->name === $this->_variableName
            ) {
                $val = $this->_constants[$node->dim->value];
                if (is_string($val)) {
                    return new Node\Scalar\String_($val);
                } elseif (is_double($val)) {
                    return new Node\Scalar\DNumber($val);
                } elseif (is_int($val)) {
                    return new Node\Scalar\LNumber($val);
                } else {
                    return new Node\Expr\ConstFetch(new Node\Name\FullyQualified(json_encode($val)));
                }
            }
        }
    }
我们看`enterNode`这里的大if，这里负责寻找`$a =
unserialize(base64_decode("string"))`这种模式的代码，之后获取其表以及变量名。从上面的寻找逻辑，我们可以推测：
  1. 如果代码中有别的符合这个模式的代码，解混淆器就可能会出现错误。
  2. 如果代码中的数组赋值是别的模式，就必须重写此部份代码以适配该模式。
## 总结
对于混淆器而言，你要做的事情包括这些：
  1. 拿到尽可能多的PHP样本，寻找各种可能的语法不兼容问题。
  2. 基于信息不对称性，努力将混淆器引入的语句与真实的业务代码混为一体。
  3. 尽量打乱原始代码结构，能去除的信息（如变量名）尽可能去除。
而对于一个解混淆器而言，就需要：
  1. 准确识别出混淆模式及其依赖的外部信息。
  2. 需要能准确地提取出各类运行时才可获取的密钥、数据。
  3. 一旦信息无法恢复，就需要通过一定的规则还原出近似的信息。
## 尾声
我本次的混淆比较初级，完全不实用，毕竟连混淆器+解混淆器+写文章也就花了十个小时不到吧，性能低下，且不保证兼容性，仅仅是一个示例，仅供参考。不过我认为这个示例级别的混淆器效果要比绝大多数市面上流通的混淆器效果好得多，那些都是什么垃圾.jpg
一个混淆器要走向实用，你至少也要把控制流给打乱掉，就像 [yakpro-po](https://github.com/pk-fr/yakpro-po)
这样吧。
你可能注意到了，本文中的每一个混淆规则都是一个单独的新类，并没有将不同功能的代码混合在一起；之后通过`NodeVisitor::addVisitor`在遍历的时候让它们按顺序被调用。这是组合模式这种设计模式的应用，这样的模块化设计非常适合进行后续的维护。
对于解混淆而言，大部分混淆都有一部分混淆规则是相同的，这种设计可以非常容易地就能通过不同规则的重新组合来解出一种新的混淆。而对于混淆而言，还有什么比套娃更有意思的事情呢
:D