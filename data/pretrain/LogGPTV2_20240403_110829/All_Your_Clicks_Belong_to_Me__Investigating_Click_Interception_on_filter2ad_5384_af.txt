Figure 3: A fake AV website visited because of click interception.
6 Discussion and Future Work
We discuss the limitations of our work, the possible mitigation
of the click interception threat, and our future work.
Third-party Script Detection. Our methodology for distin-
guishing first-party scripts from third-party scripts is not 100%
accurate. First, the domain substring matching can be prob-
lematic if an adversary can create victim-specific subdomains.
For example, a third-party can intentionally generate a sub-
domain xyz.third-party.org by adding a new entry in its name
server. Our technique would mislabel this subdomain as a first-
party URL if it is included by xyz.com. Second, an organiza-
tion may use distinct email addresses for its subsidiaries. For
instance, the SOA email address of https://www.instagram.com/
is PI:EMAIL, whereas that of https:
//www.facebook.net/ is dns@facebook.com. We classify scripts
loaded directly from Facebook on Instagram as third-party
scripts even though Instagram is owned by Facebook. Al-
though our approach to determining the relationship between
two hosts is not complete, it is good enough for achieving
our goal and provides better results compared with a similar
approach using only whois records [4].
Measurement Scope. We visited only the main pages of
Alexa top 250K websites, so we could miss scripts that are
loaded only in their sub pages. However, our goal is to have a
preliminary understanding of the click interception problem.
We do not intend to and are not able to cover all pages and
scripts that can be found on these websites. In the future, we
954    28th USENIX Security Symposium
USENIX Association
will consider sub pages of these websites to investigate the
differences between the main pages and the sub pages.
Artificial Interaction with Web Pages. OBSERVER applies
an artificial way to interact with websites, i.e., using a script
to click all the elements on a page, in order to automate the
analysis. This could be different from the normal behavior
of a real human being. Nevertheless, our goal is to collect as
much click-related data as possible in each page visit. It would
be an interesting research topic to study if developers would
write code to distinguish authentic clicks from automatically
generated ones9.
Generating Security Warnings. Click interception can di-
rect a user to an unknown URL by modifying first-party hy-
perlinks or hijacking user clicks on first-party elements. It
exploits the fact that the user cannot determine the provenance
of the URL that he or she is about to visit (unintentionally).
To protect a user from visiting potentially attacker-controlled
URLs, a possible defense is to provide the user the prove-
nance information regarding each hyperlink and click. In
particular, the browser can display a message alongside each
hyperlink about its provenance, e.g., if the associated URL
is provided by the first-party website or a third party. The
additional message needs to be unforgeable and tamper-proof
from JavaScript code, such that the adversary cannot manipu-
late such security-related data. One potential implementation
is to utilize the browser UI that is usually not accessible to
JavaScript. For example, we can display the message in the
status bar when the user hovers the mouse over a link. Sim-
ilarly, to defend against event-listener interception, we can
display an unforgeable warning message if the user hovers
over an element that is potentially intercepted by a third-party
script. However, this may cause a lot of false positives as an
event handler may not necessarily initiate a navigation upon
user click. Therefore, it might be better to show such warning
when the user actually performs the click, as [10] does. Ac-
cording to our experiment, OBSERVER introduces negligible
performance overhead on navigation. It is thus suitable to be
extended as a real-time detection tool for the end users. We
plan to extend OBSERVER by incorporating these defenses,
and conduct a user study to evaluate their effectiveness.
Ensuring Link and Click Integrity. The above defenses
require a user to make security decisions, which might not be
very effective in practice. Alternatively, we can let the browser
automatically enforce integrity policies for hyperlinks and
click event handlers. For example, an integrity policy can
specify that all first-party hyperlinks shall not be modifiable by
third-party JavaScript code. One may further specify that third-
party scripts are not allowed to control frame navigations,
although listening for user click is still permitted. Enforcing
all such policies would effectively prevent click-interception
by hyperlinks and event handlers. However, it might also
9The clicks in our experiment were generated through Selenium and are
different from those generated using JavaScript, which can be easily detected.
break the functionalities of some third-party components. To
give the user and the website administrator better control, the
polices can specify the permissions for each script, matched
by an absolute URL, a domain name, a wild card, or a secret
token, mimicking the Content Security Policy [33]. We plan to
develop and evaluate such an integrity protection mechanism
as our future work.
7 Conclusion
We have investigated the click interception problem on the
Web with a custom analysis framework developed based on
the Chromium browser. We collected data from the Alexa
top 250K websites and identified several techniques that can
be employed to intercept user clicks. We detected that 437
third-party scripts intercepted user clicks using hyperlinks,
event handlers and visual deceptions on 613 websites. We
further revealed that many third-party scripts intercept user
clicks for monetization via committing ad click fraud. In
addition, we demonstrated that click interception can lead
victim users to malicious contents. Our research sheds light
on an emerging client side threat, and highlights the need to
restrict the privilege of third-party JavaScript code.
8 Acknowledgments
The authors thank the anonymous reviewers and our shepherd,
Franziska Roesner, for their helpful suggestions and feedback
to improve the paper. This material is based on research sup-
ported by CUHK under grant 4055081. The views, findings,
conclusions or recommendations expressed in this material
are those of the authors and do not necessarily represent the
views of CUHK.
References
[1] Devdatta Akhawe, Warren He, Zhiwei Li, Reza
Moazzezi, and Dawn Song. Clickjacking Revisited:
A Perceptual View of UI Security. In Proceedings of
the 6th USENIX Workshop on Offensive Technologies
(WOOT), 2014.
[2] Sumayah Alrwais, Christopher Dunn, Minaxi Gupta,
Alexandre Gerber, Oliver Spatscheck, and Eric Oster-
weil. Dissecting Ghost Clicks: A Tale of Ad Fraud Via
Misdirected Human Clicks. In Proceedings of the An-
nual Computer Security Applications Conference (AC-
SAC), 2012.
USENIX Association
28th USENIX Security Symposium    955
[3] Marco Balduzzi, Manuel Egele, Engin Kirda, Davide
Balzarotti, and Christopher Kruegel. A Solution for
the Automated Detection of Clickjacking Attacks. In
Proceedings of the 5th ACM Symposium on Information,
Computer and Communications Security (ASIACCS),
Beijing, China, April 2010.
[13] Alexandros Kapravelos, Yan Shoshitaishvili, Marco
Cova, Christopher Kruegel, and Giovanni Vigna. Re-
volver: An Automated Approach to the Detection of
In Proceedings of the
Evasive Web-based Malware.
22nd USENIX Security Symposium (Security), Washing-
ton, DC, August 2013.
[4] Frank Cangialosi, Taejoong Chung, David Choffnes,
Dave Levin, Bruce M. Maggs, Alan Mislove, and
Christo Wilson. Measurement and Analysis of Private
Key Sharing in the HTTPS Ecosystem. In Proceedings
of the 23rd ACM Conference on Computer and Com-
munications Security (CCS), Vienna, Austria, October
2016.
[5] Vacha Dave, Saikat Guha, and Yin Zhang. Measuring
and Fingerprinting Click-Spam in Ad Networks.
In
Proceedings of the 2012 ACM SIGCOMM, Helsinki,
Finland, August 2012.
[6] Vacha Dave, Saikat Guha, and Yin Zhang. Viceroi:
Catching Click-spam in Search Ad Networks. In Pro-
ceedings of the 20th ACM Conference on Computer
and Communications Security (CCS), Berlin, Germany,
October 2013.
[7] Sevtap Duman, Kaan Onarlioglu, Ali Osman Ulusoy,
William Robertson, and Engin Kirda. TrueClick: Auto-
matically Distinguishing Trick Banners from Genuine
Download Links. In Proceedings of the Annual Com-
puter Security Applications Conference (ACSAC), 2014.
[8] Google.
Expanding user protections on the
https://blog.chromium.org/2017/11/expanding-user-
web.
protections-on-web.html.
[9] Google. Google Ad Traffic Quality. https://www.google.
com/ads/adtrafficquality/.
[10] Lin-Shung Huang, Alexander Moshchuk, Helen J Wang,
Stuart Schecter, and Collin Jackson. Clickjacking: At-
tacks and Defenses. In Proceedings of the 21st USENIX
Security Symposium (Security), Bellevue, WA, August
2012.
[11] Luca Invernizzi, Stefano Benvenuti, Marco Cova,
Paolo Milani Comparetti, Christopher Kruegel, and Gio-
vanni Vigna. EvilSeed: A Guided Approach to Finding
Malicious Web Pages. In Proceedings of the 33rd IEEE
Symposium on Security and Privacy (Oakland), San
Francisco, CA, May 2012.
[12] Ari Juels, Sid Stamm, and Markus Jakobsson. Com-
bating Click Fraud via Premium Clicks. In Proceed-
ings of the 16th USENIX Security Symposium (Security),
Boston, MA, August 2007.
[14] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad,
William Robertson, Christo Wilson, and Engin Kirda.
Thou Shalt Not Depend on Me: Analysing the Use of
Outdated JavaScript Libraries on the Web. In Proceed-
ings of the 2017 Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, Februaryâ€“
March 2017.
[15] Sebastian Lekies, Mario Heiderich, Dennis Appelt,
Thorsten Holz, and Martin Johns. On the Fragility and
Limitations of Current Browser-Provided Clickjacking
Protection Schemes. In Proceedings of the 6th USENIX
Workshop on Offensive Technologies (WOOT), 2012.
[16] Zhou Li, Kehuan Zhang, Yinglian Xie, Fang Yu, and
XiaoFeng Wang. Knowing Your Enemy: Understanding
and Detecting Malicious Web Advertising. In Proceed-
ings of the 19th ACM Conference on Computer and
Communications Security (CCS), Raleigh, NC, October
2012.
[17] Bin Liu, Suman Nath, Ramesh Govindan, and Jie Liu.
DECAF: Detecting and Characterizing Ad Fraud in Mo-
bile Apps. In Proceedings of the 11th USENIX Sympo-
sium on Networked Systems Design and Implementation
(NSDI), Seattle, WA, March 2014.
[18] Ritu Lohtia, Naveen Donthu, and Edmund K Hersh-
berger. The Impact of Content and Design Elements
on Banner Advertising Click-through Rates. Journal of
Advertising Research, 43(4):410â€“418, 2003.
[19] Malwaretips. How to remove Web Browser Redirect
Virus (Windows Help Guide). https://malwaretips.com/
blogs/remove-browser-redirect-virus/.
[20] Mike Matthews. What MacKeeper is and why you
should remove it from your Mac, 2018. https://www.
imore.com/removing-mackeeper-your-mac.
[21] Ahmed Metwally, Divyakant Agrawal, and Amr El Ab-
badi. DETECTIVES: DETEcting Coalition hiT Infla-
tion attacks in adVertising nEtworks Streams. In Pro-
ceedings of the 16th International Conference on World
Wide Web (WWW), 2007.
[22] Brad Miller, Paul Pearce, Chris Grier, Christian Kreibich,
and Vern Paxson. Whatâ€™s Clicking What? Techniques
and Innovations of Todayâ€™s Clickbots. In International
Conference on Detection of Intrusions and Malware,
and Vulnerability Assessment (DIMVA), 2011.
956    28th USENIX Security Symposium
USENIX Association
[33] W3C. Content Security Policy Level 3. https://www.w3.
org/TR/CSP3/.
[34] Wikipedia. List of DNS record types. https://en.wikipedia.
org/wiki/List_of_DNS_record_types#NS.
[35] Wikipedia. List of managed DNS providers. https://en.
wikipedia.org/wiki/List_of_managed_DNS_providers.
[36] Wikipedia. SOA record. https://en.wikipedia.org/wiki/
SOA_record.
[37] Xinyu Xing, Wei Meng, Byoungyoung Lee, Udi Weins-
berg, Anmol Sheth, Roberto Perdisci, and Wenke Lee.
Understanding Malvertising Through Ad-Injecting
Browser Extensions. In Proceedings of the 24th Interna-
tional World Wide Web Conference (WWW), Florence,
Italy, May 2015.
[38] Haitao Xu, Daiping Liu, Aaron Koehl, Haining Wang,
and Angelos Stavrou. Click Fraud Detection on the Ad-
vertiser Side. In Proceedings of the 19th European Sym-
posium on Research in Computer Security (ESORICS),
Wroclaw, Poland, September 2014.
[39] Apostolis Zarras, Alexandros Kapravelos, Gianluca
Stringhini, Thorsten Holz, Christopher Kruegel, and Gio-
vanni Vigna. The Dark Alleys of Madison Avenue:
Understanding Malicious Advertisements. In Proceed-
ings of the 2014 Conference on Internet Measurement
Conference (IMC), 2014.
[40] Yuchen Zhou and David Evans. Understanding and
In Proceedings
Monitoring Embedded Web Scripts.
of the 36th IEEE Symposium on Security and Privacy
(Oakland), San Jose, CA, May 2015.
[23] Nick Nikiforakis, Luca Invernizzi, Alexandros Kaprav-
elos, Steven Van Acker, Wouter Joosen, Christopher
Kruegel, Frank Piessens, and Giovanni Vigna. You Are
What You Include: Large-scale Evaluation of Remote
JavaScript Inclusions. In Proceedings of the 19th ACM
Conference on Computer and Communications Security
(CCS), Raleigh, NC, October 2012.
[24] Nick Nikiforakis, Federico Maggi, Gianluca Stringhini,
M Zubair Rafique, Wouter Joosen, Christopher Kruegel,
Frank Piessens, Giovanni Vigna, and Stefano Zanero.
Stranger Danger: Exploring the Ecosystem of Ad-based
URL Shortening Services. In Proceedings of the 21st In-
ternational World Wide Web Conference (WWW), Seoul,
Korea, April 2011.
[25] Erlend Oftedal. Retire.js: What your require you must
also retire. https://retirejs.github.io/retire.js/.
[26] OWASP. Clickjacking. https://www.owasp.org/index.php/
Clickjacking.
[27] Paul Pearce, Vacha Dave, Chris Grier, Kirill Levchenko,
Saikat Guha, Damon McCoy, Vern Paxson, Stefan Sav-
age, and Geoffrey M. Voelker. Characterizing Large-
Scale Click Fraud in ZeroAccess. In Proceedings of
the 21st ACM Conference on Computer and Communi-
cations Security (CCS), Scottsdale, Arizona, November
2014.
[28] M. Zubair Rafique, Tom Van Goethem, Wouter Joosen,
Christophe Huygens, and Nick Nikiforakis. Itâ€™s Free
for a Reason: Exploring the Ecosystem of Free Live
Streaming Services. In Proceedings of the 2016 Annual
Network and Distributed System Security Symposium
(NDSS), San Diego, CA, February 2016.
[29] David Ross and Tobias Gondrom. HTTP Header Field
X-Frame-Options. Technical report, 2013.
[30] Gustav Rydstedt, Elie Bursztein, Dan Boneh, and Collin
Jackson. Busting Frame Busting: a Study of Clickjack-
ing Vulnerabilities at Popular Sites. In Proceedings of
the IEEE Web 2.0 Security and Privacy (W2SP), 2010.
[31] Sid Stamm, Brandon Sterne, and Gervase Markham.
Reining in the Web with Content Security Policy. In
Proceedings of the 19th International World Wide Web
Conference (WWW), Raleigh, NC, April 2010.
[32] Kurt Thomas, Elie Bursztein, Chris Grier, Grant Ho, Nav
Jagpal, Alexandros Kapravelos, Damon McCoy, Anto-
nio Nappa, Vern Paxson, Paul Pearce, Niels Provos, and
Moheeb Abu Rajab. Ad Injection at Scale: Assessing
Deceptive Advertisement Modifications. In Proceedings
of the 36th IEEE Symposium on Security and Privacy
(Oakland), San Jose, CA, May 2015.
USENIX Association
28th USENIX Security Symposium    957