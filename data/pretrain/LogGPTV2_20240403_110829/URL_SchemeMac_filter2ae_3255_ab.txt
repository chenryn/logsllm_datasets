    (lldb) po 0x00007fd3b4a9c520
     { flags = 0x00000020, path = '/Users/user/Desktop/Mac File Opener.app' }
> 总结一下：
>
> 1、应用程序可以“声明”能够处理的各种文档或者文件类型；
>
> 2、一旦应用落盘，操作系统就会自动注册这些“document handler”；
>
> 3、文件打开时，系统会查询“launch services”数据库，确定该执行哪个应用。
以上就是“document handlers”的大概内容，接下来讨论一下自定义URL Scheme handler。从操作系统的角度来看，这种URL
Scheme handler通常只是适用于url的document handler。
这对自定义URL Scheme handler来说意味着两点：
1、一旦（“声明”支持这些handler的）应用落盘，macOS会自动注册自定义的URL Scheme handler；
2、当自定义URL Scheme被调用时，就会触发（已自动注册的）handler应用。
由于这些操作都可以被网页触发，因此我们很容易就能猜到会出现什么后果。
之前我曾在Box 2017上讨论过自定义URL Scheme话题（[“Oversight: Exposing Spies on
macos”](https://speakerdeck.com/patrickwardle/hack-in-the-box-2017-oversight-exposing-spies-on-macos)）。
然而当时并没有涉及到恶意软件或者恶意利用之类的内容。
由于我还没有接触`WINDSHIFT`恶意软件样本，我之前自己写了PoC示例，演示了攻击者如何滥用自定义URL Scheme
handler来远程感染Mac主机（该过程涉及一些用户交互操作）。
我们先创建Xcode项目，使用Cocoa App模板：
应用本身的逻辑并不关键，但我们必须编辑应用的`Info.plist`文件，以便“声明”我们将支持一个自定义的URL
Scheme。在Xcode中，我们添加了一个`URL types`数组，指定了Scheme的名称（`windshift://`）以及一个URL标识符：
观察原始的plist，我们可以看到这些信息对应其中的一些key，比如`CFBundleURLTypes
CFBundleURLSchemes`以及`CFBundleURLName`：
    CFBundleURLTypes
            CFBundleURLSchemes
                    windshift
            CFBundleURLName
            com.foo.bar.WindShift
一旦该应用编译（或下载）完毕，`lsd`就会解析应用的bundle数据（特别是`Info.plist`文件），检测是否存在自定义URL Scheme
handler，如果有则进行注册。注意这些操作都会自动完成。
为了确认这一点，我们可以转储“launch services”数据库（通过`lsregister
-dump`命令）。其中的确可以看到我们的PoC应用（`WindShift.app`），以及我们自定义的URL
Scheme（`CFBundleURLSchemes: (windshift)`）：
    --------------------------------------------------------------------------------    BundleClass: kLSBundleClassApplication
    Container mount state: mounted
    bundle  id:            168204
     Mach-O UUIDs:  E2E77A08-F458-36C1-B7BD-99F409B4DEAC
     Device Familie
      Counterpart ID
      sequenceNum:   168204
     FamilyID:      0
      PurchaserID:   0
      DownloaderID:  0
      installType:   0
      appContainer:  #
      dataContainer: #
      path:          /Users/patrick/Projects/WindShift/DerivedData/WindShift/Build/Products/Debug/WindShift.app
     name:          WindShift
      ....
      executable:    Contents/MacOS/WindShift
     ....
      CFBundleURLTypes =     (
                    {
                CFBundleURLName = "com.foo.bar.WindShift";
                CFBundleURLSchemes =             (
                    windshift
                );
            }
        );
    }
    claim id:          386204
       name:          com.foo.bar.WindShift
        rank:          Default
        roles:         Viewer  
       flags:         url-type  
       icon:          
       bindings:      windshift:
如果我们现在使用浏览器（这里使用的是Safari），“浏览”我们的自定义URL Scheme（`windshift://`），我们可以确认自定义的URL
Scheme已被自动注册：
如果我们点击“Allow”（这是个危险操作，后面我们会详细介绍），那么应用就会被启动：
## 三、远程利用
如果我们“不怀好意”，可能就会看到这种技术的利用方向。现在我们将介绍如何滥用自定义URL Scheme，远程定位（并在理想情况下感染）Mac用户的一种方法。
首先，目标必须浏览我们可控的一个网站。`WINDSHIFT` APT组织（成功使用了）钓鱼邮件这种途径。
一旦目标浏览我们的恶意网站，就会触发下载操作，下载包含恶意应用的一个归档（`.zip`）文件。如果Mac用户正在使用`Safari`，那么归档文件就会自动被解压，这是因为Apple认为自动打开“安全的”文件是一个比较明智的选择。这一点非常重要，这意味着恶意应用（而不是一个单纯的压缩zip文件）现在会存在于用户的文件系统上，这样就会自动触发自定义URL
Scheme handler的注册过程，这一点的确应该好好谢谢Apple。
现在恶意应用的自定义URL
Scheme已成功注册（在目标系统中），恶意网站中的代码就可以加载或者“浏览至”自定义的url地址，使用JavaScript可以轻松完成这个任务：
    window.location.replace('windshift://');
macOS在后台会查找处理这个自定义URL
Scheme的handler，最终就会找到我们的恶意应用（刚刚下载到目标系统中）。一旦查找完毕，操作系统将尝试启动恶意应用来处理所请求的URL！
（对Mac用户来说）幸运的是，较新版的Safari中会弹出一个警告信息：
然而引号中的字符其实可以被攻击者所控制，因为这些字符就是应用的名称。因此，我们很容易就可以让弹出的警告窗口看起来比较普通、无害甚至有趣：
> 注意：
>
> 通常情况下应用无法使用类似`.txt`或者`.com`之类的扩展名。
>
>
> 然而，由于应用名可以包含unicode字符，因此我们可以利用[homograph](https://en.wikipedia.org/wiki/IDN_homograph_attack)这种攻击技巧。
>
> 这样我们就可以让恶意应用的名称变成类似`Attachment.TXT`之类的字符串（其中“X”其实是卡里安（Carian）字母X）。
虽然最新版的Safari会在启动已注册自定义URL Scheme的应用前提示用户，但老版本的Safari（比如默认安装在EI
Capitan上的Safari）就不会执行这种操作。相反，这些版本的Safari并不会弹出任何警告信息，会盲目地启动（恶意）应用。
抛开Safari的版本，我们还有另一个障碍要绕过：文件隔离（File Quarantine）。
如果应用文件下载自互联网，那么当用户执行该应用时，文件隔离机制就会弹出警告窗口：
好消息是有些Mac用户会点击`Cancel`按钮，但仍有些Mac用户还是会点击`Allow`按钮（Taha已经确认了这一点，他在演讲中提到`WINDSHIFT`
APT组织已经成功利用了这种攻击向量）。
此外，我们还可以控制应用的名称，因此可能会让更多用户点击`Allow`按钮，比如，我们可以添加个emoji表情试一下？
> 注意：
>
> 这里大家可能想知道为何Gatekeeper没有发挥作用？
>
> 在默认配置下，Gatekeeper只允许经过签名的应用。WINDSHIFT
> APT组织所使用的恶意软件都带有签名（现在大多数恶意软件都会使用这种方法），因此并没有轮到Gatekeeper上场。
在本文总结之前，我绘制如下一张图，介绍了这种“自定义URL Scheme handler”攻击的详细流程：
## 四、总结
我们并不是每天都能看到针对Mac用户的APT组织，更何况这类恶意软件使用了相当新颖的感染方式。然而，我们再也不能天真地认为Mac用户能够免受这类威胁的侵扰，`WINDSHIFT`
APT组织已经给我们好好上了一课。
在本文中我们讨论了macOS的一些功能，比如document handler以及自定义URL Scheme
handler，演示了这些功能如何被恶意软件主动利用。幸运的是，这类攻击方法（特别是在新版本的macOS上）需要一些用户交互操作。然而，这两种功能已经在实际攻击活动中被成功利用，因此如果大家正在寻找感染Mac用户的可靠方法，可以考虑使用这些技术。
如果你是Mac用户，并且比较注重安全，那么可以考虑使用Google Chrome浏览器：
如果你习惯使用Safari，至少需要关闭下载文件的自动解压功能，因为只有在应用被解压时才会触发（恶意）自定义URL Scheme handler的注册操作。
如果想关闭这个功能，请打开Safari的首选项，在`General`选项卡，勾掉`Open "safe" files after
downloading`这个复选框：
此外，我们还可以将Gatekeeper设置成“仅允许来自Mac App Store的应用”（然后根据需求小心允许第三方应用），这一点并不会带来什么坏处。