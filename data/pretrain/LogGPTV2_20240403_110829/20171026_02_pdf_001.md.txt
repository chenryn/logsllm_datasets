# 3D and Exact Geometries for PostGIS

## FOSDEM PGDay
**Date:** 02-01-2013  
**Speaker:** Hugo Mercier / Oslandia

## About Oslandia
Oslandia is a company specializing in geospatial solutions, including:
- **PostGIS**
- **QGIS**
- **Mapserver Suite**

We provide:
- **Training**
- **Support**
- **Development**

## Context
- **FEDER-funded program e-PLU**: A city modeling application.
- **3D spatial operations**: PostGIS geometries can carry a Z coordinate, but what about spatial processing?

### Collaboration with IGN (National Institute of Geographic and Forest Information)
- **CGAL (Computational Geometry Algorithms Library)**: An appealing candidate for 3D and exact computations.
  - **Modern C++ framework**
  - **Extensive 2D/3D algorithms already implemented**
  - **Exact computational model**

### Performance
- CGAL uses geometric 'Kernels' and must use an 'exact' kernel for constructions.
- Features include:
  - **Arbitrary precision numbers**
  - **Lazy evaluation of expression trees**
  - **Interval arithmetic**

## SFCGAL
- **Design**: An OGC Simple Features compliant framework on top of CGAL.
- **Our own PostGIS branch (postgis-sfcgal)**

### Currently Supported Operations
- **2D and 3D intersection** (including solids)
- **2D and 3D intersection tests** (including solids)
- **2D and 3D convex hulls**
- **2D and 3D triangulations**
- **3D extrusion**
- **2D and 3D distances**
- **(In progress) Buffers**

### PostGIS-SFCGAL
- **Optional support for SFCGAL functions** using the 'sfcgal' schema.
- Example usage:
  ```sql
  SELECT sfcgal.ST_Intersects(g1, g2);
  SELECT sfcgal.ST_3DIntersection(g1, g2);
  ```

## Performance Comparison: SFCGAL vs. GEOS
- **PostGIS-based, 2D only**
- **Varying geometry's number of points**
- **Results are very promising**: SFCGAL sometimes outperforms GEOS, despite being less mature.

## 3D View
- **Coupling PostGIS 3D with a 3D viewer**:
  - **SFCGAL viewer**: [Demo](https://vimeo.com/58523983)
  - **QGIS with the Globe plugin**: [Demo](https://vimeo.com/54776907)

## Precision Issues
- **Example Query**:
  ```sql
  SELECT ST_Intersects(
    ST_Intersection(
      'LINESTRING(0 0,2 1)'::geometry,
      'LINESTRING(1 0,0 1)'::geometry),
    'LINESTRING(0 0,2 1)'::geometry);
  ```
  - **Result**: `f` (Should be `t`)

- **GEOS only supports 'double' numbers**, leading to precision issues.

### Support for Exact Geometries
- **New 'exact_geometry' type**:
  - **Coordinates stored with arbitrary precision**
  - **Serialization/deserialization process**

- **Example Queries**:
  ```sql
  SELECT Sfcgal.ST_Intersection(
    'LINESTRING(0 0,2 1)'::exact_geometry,
    'LINESTRING(1 0,0 1)'::exact_geometry);
  -- Result: POINT(2/3 1/3)

  SELECT Sfcgal.ST_Intersects(
    Sfcgal.ST_Intersection(
      'LINESTRING(0 0,2 1)'::exact_geometry,
      'LINESTRING(1 0,0 1)'::exact_geometry),
    'LINESTRING(0 0,2 1)'::exact_geometry);
  -- Result: t
  ```

## Serialization Performances
- **'exact_geometry' serialization is slow!**
- **Comparison with chained 'noop' functions**:
  ```sql
  SELECT ST_Copy(ST_Copy(ST_Copy(ST_Copy(g))));
  ```

### Referenced Geometries
- **Do we need to serialize?**
  - Not if you only need temporary results.
  - **New type 'ref_geometry'**:
    - **Complex C++ objects (SFCGAL::Geometry*) created and passed by reference**.
    - **Deallocation and destruction**:
      - Use a child context with your own deletion method.
      - Attach to the ExprContext when possible, or to a long-living context (MessageContext).

- **Example Query**:
  ```sql
  SELECT sfcgal.ST_Intersects(
    Sfcgal.ST_Intersection(
      'LINESTRING(0 0,2 1)'::ref_geometry,
      'LINESTRING(1 0,0 1)'::ref_geometry),
    'LINESTRING(0 0,2 1)'::ref_geometry);
  -- Result: t
  ```

- **Cannot be stored!**
  ```sql
  CREATE TEMPORARY TABLE t AS
  SELECT 'POINT(0 0)'::ref_geometry;
  SELECT * FROM t;
  -- NOTICE: Referenced geometries must not be stored
  -- Result: deleted
  ```

### Control over Serialization/Deserialization
- **Through conversion functions**:
  - `ST_Geometry(ref_geometry)`: Converts to geometry.
  - `ST_RefGeometry(geometry)`: Converts to ref_geometry.

- **Example Usage**:
  ```sql
  SELECT ST_Geometry(
    ST_f1(
      ST_f2(
        ST_f3( ST_RefGeometry(g) )
      ))
    );
  ```

## Conclusion
- **High potential** for 3D spatial processing and exact computation with good performance.
- **Work in progress**:
  - **PostGIS integration**
  - **Referenced geometry testing**
  - **Cache mechanism**
  - **Spatial operations (boolean set)**
  - **QGIS integration**
- **Test and feedback** welcome.

## Contact
- **Website**: [http://www.oslandia.com](http://www.oslandia.com)
- **GitHub Repositories**:
  - [Oslandia/SFCGAL](https://github.com/Oslandia/SFCGAL)
  - [Oslandia/postgis-sfcgal](https://github.com/Oslandia/postgis-sfcgal)

**Email**: PI:EMAIL