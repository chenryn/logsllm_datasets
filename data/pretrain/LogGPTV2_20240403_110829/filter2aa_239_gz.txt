        Text = "Schweinsbraten mit Knödel und Sauerkraut",
        Price = 6.9,
        Date = new DateTime(2016, 10, 5),
        Category = "Main"
      };
视图有一个模型定义为Menu类型。与前例一样，HTML辅助方法DisplayName只是返
回参数的文本。Display方法使用一个表达式作为参数，其中以字符串格式传递一个属性
名。该方法试图找出具有这个名称的属性，然后使用属性存取器来返回该属性的值（代码
文件MVCSampleApp/Views/HTMLHelpers/HelperWithMenu.cshtml）：
    @model MVCSampleApp.Models.Menu
    @{
        ViewBag.Title = "HelperWithMenu";
    }
    Helper with Menu
    @Html.DisplayName("Text:")
    @Html.Display("Text")
    @Html.DisplayName("Category:")
    @Html.Display("Category")
在得到的HTML代码中，可以从调用DisplayName和Display方法的输出中看到这一
点：
    Text:
    Schweinsbraten mit Kn&#246; del und Sauerkraut
    Category:
    Main
  注意： 辅助方法也提供强类型化方法来访问模型成员，如41.6.5节所示。
41.6.3 定义HTML特性
大多数HTML辅助方法都有一些可传递任何HTML特性的重载版本。例如，下面的
TextBox方法创建一个文本类型的input元素。其第一个参数定义了文本框的名称，第二个
参数定义了文本框设置的值。TextBox方法的第三个参数是object类型，允许传递一个匿名
类型，在其中将每个属性改为HTML元素的一个特性。在这里，input元素的结果是将
required特性设为required，将maxlength特性设为15，将class特性设为CSSDemo。因为class
是C#的一个关键字，所以不能直接设为一个属性，而是要加上@作为前缀，以生成用于
CSS样式的class特性：
    @Html.TextBox("text1", "input text here",
      new { required="required", maxlength=15, @class="CSSDemo" });
得到的HTML输出如下所示：
41.6.4 创建列表
为显示列表，需要使用DropDownList和ListBox等辅助方法。这些方法会创建HTML
select元素。
在控制器内，首先创建一个包含键和值的字典。然后使用自定义扩展方法
ToSelectListItems，将该字典转换为SelectListItem的列表。DropDownList和ListBox方法使
用了SelectListItem集合（代码文件
MVCSampleApp/Controllers/HTMLHelpersController.cs）：
    public IActionResult HelperList()
    {
      var cars = new Dictionary();
      cars.Add(1, "Red Bull Racing");
      cars.Add(2, "McLaren");
      cars.Add(3, "Mercedes");
      cars.Add(4, "Ferrari");
      return View(cars.ToSelectListItems(4));
    }
自定义扩展方法ToSelectListItems在扩展了IDictionary的
SelectListItemsExtensions类中定义，IDictionary是cars集合中的类型。在其实现
中，只是为字典中的每一项返回一个新的SelectListItem对象（代码文件
MVCSampleApp/Extensions/SelectListItemsExtensions.cs）：
      public static class SelectListItemsExtensions
      {
        public static IEnumerable ToSelectListItems(
            this IDictionary dict, int selectedId)
        {
          return dict.Select(item =>
            new SelectListItem
            {
              Selected = item.Key == selectedId,
              Text = item.Value,
              Value = item.Key.ToString()
            });
        }
      }
在视图中，辅助方法DropDownList直接访问从控制器返回的模型（代码文件
MVCSampleApp/Views/HTMLHelpers/HelperList.cshtml）：
    @{
        ViewBag.Title = "Helper List";
    }
    @model IEnumerable
    Helper2
    @Html.DropDownList("carslist", Model)
得到的HTML创建了一个select元素，该元素包含通过SelectListItem创建的一些option
子元素。这些HTML还定义了从控制器中返回的选中项：
      Red Bull Racing
      McLaren
      Mercedes
      Ferrari
41.6.5 强类型化的Helper
HTML辅助方法提供了强类型化的方法来访问从控制器传递的模型。这些方法都带有
后缀For。例如，可以使用TextBoxFor代替TextBox方法。
下面的示例再次使用返回单个实体的控制器（代码文件
MVCSampleApp/Controllers/HTML-HelpersController.cs）：
    public IActionResult StronglyTypedMenu() => View(GetSampleMenu());
视图使用Menu类型作为模型，所以可以使用DisplayNameFor和DisplayFor方法直接访
问Menu属性。DisplayNameFor默认返回属性名（在这里是Text属性）, 
DisplayFor返回属
性值（代码文件MVCSampleApp/Views/HTMLHelpers/StronglyTypedMenu.cshtml）：
    @model MVCSampleApp.Models.Menu
    @Html.DisplayNameFor(m => m.Text)
    @Html.DisplayFor(m => m.Text)
类似地，可以使用Html.TextBoxFor（m => m.Text），它返回一个允许设置模型的
Text属性的input元素。该方法还使用了添加到Menu类型的Text属性的注解。Text属性添加
了Required和MaxStringLength特性，所以TextBoxFor方法会返回data-val-length、data-val-
length-max和data-val-required特性：
41.6.6 编辑器扩展
除了为每个属性使用至少一个辅助方法外，EditorExtensions类中的辅助方法还给一个
类型的所有属性提供了一个编辑器。
使用与前面相同的Menu模型，通过方法Html.EditorFor（m => m）构建一个用于编辑
菜单的完整UI。该方法调用的结果如图41-9所示。
图41-9
除了使用Html.EditorFor（m 
=> 
m），还可以使用Html.EditorForModel。
EditorForModel方法会使用视图的模型，不需要显式指定模型。EditorFor在使用其他数据
源（例如模型提供的属性）方面更加灵活，EditorForModel需要添加的参数更少。
41.6.7 实现模板
使用模板是扩展HTML Helper的结果的一种好方法。模板是HTML辅助方法被隐式或
显式使用的一个简单视图，它们存储在特殊的文件夹中。显示模板存储在视图文件夹下的
DisplayTemplates文件夹中（如Views/HelperMethods），或者存储在共享文件夹中（如
Shared/DisplayTemplates）。共享文件夹由全部视图使用，特定的视图文件夹则只有该文
件夹中的视图可以使用。编辑器模板存储在EditorTemplates文件夹中。
现在看一个示例。在Menu类型中，Date属性有一个注解DataType，其值为
DataType.Date。指定该特性时，DateTime类型默认并不会显示为日期加时间的形式，而
是显示为短日期格式（代码文件MVCSampleApp/Models/Menu.cs）：
    public class Menu
    {
      public int Id { get; set; }
      [Required, StringLength(50)]
      public string Text { get; set; }
      [Display(Name="Price"), DisplayFormat(DataFormatString="{0:c}")]
      public double Price { get; set; }
      [DataType(DataType.Date)]
      public DateTime Date { get; set; }
      [StringLength(10)]
      public string Category { get; set; }
    }
现在为日期创建了模板。这里使用了长日期字符串格式D来返回Model，将这个日期
字符串格式D嵌入在CSS类为markRed的div标记内（代码文件
MVCSampleApp/Views/HTMLHelpers/DisplayTemplates/Date.cshtml）：
      @string.Format("{0:D}", Model)
CSS类markRed在样式表中定义，用于设置红色（代码文件
MVCSampleApp/wwwroot/styles/Site.css）：
    .markRed {
      color: #f00;
    }
现在像DisplayForModel这样用于显示的HTML Helper可以使用已定义的模板。模型的
类型是Menu，所以DisplayForModel方法会显示Menu类型的所有属性。对于Date，它找到
模板Date.cshtml，所以会使用该模板以CSS样式显示长日期格式的日期（代码文件
MVCSampleApp/Views/HTML-Helpers/Display.cshtml）：
    @model MVCSampleApp.Models.Menu
    @{
        ViewBag.Title = "Display";
    }
    @ViewBag.Title
    @Html.DisplayForModel()
如果在同一个视图内，某个类型应该有不同的表示，则可以为模板文件使用其他名
称。之后就可以使用UIHint特性来指定这个模板的名称，或者使用辅助方法的模板参数指
定模板。
41.7 标记辅助程序
ASP.NET MVC 6提供了一种新技术，可以用来代替HTML Helper：标记辅助程序。
对于标记辅助程序，不要编写混合了HTML的C#代码，而是使用在服务器上解析的HTML
特性和元素。如今许多JavaScript库用自己的特性（如Angular）扩展了HTML，所以可以
很方便地把自定义的HTML特性用于服务器端技术。许多ASP.NET MVC标记辅助程序都
有前缀asp-，所以很容易看出在服务器上解析了什么。这些特性不发送给客户端，而是在
服务器上解析，生成HTML代码。
41.7.1 激活标记辅助程序
要使用ASP.NET MVC标记辅助程序，需要调用addTagHelper来激活标记。它的第一
个参数定义了要使用的类型（*会打开程序集的所有标记辅助程序）；第二个参数定义了
标记辅助程序的程序集。使用removeTagHelper，会再次取消激活标记辅助程序。取消激
活标记辅助程序可能很重要，例如不与脚本库发生命名冲突。给内置的标记辅助程序使用
asp-前缀，发生冲突的可能性最小，但如果内置的标记辅助程序与其他的标记辅助程序同
名，其他的标记辅助程序有用于脚本库的HTML特性，就很容易发生冲突。
为了使标记辅助程序可用于所有的视图，应把addTagHelper语句添加到共享文件
_ViewImports.cshtml中（代码文件MVCSampleApp/Views/_ViewImports.cshtml）：
    @addTagHelper ＊, Microsoft.AspNet.Mvc.TagHelpers
41.7.2 使用锚定标记辅助程序
下面从扩展锚元素a的标记辅助程序开始。标记辅助程序的示例控制器是
TagHelpersController。Index动作方法返回一个视图，用来显示锚标记辅助程序（代码文
件MVCSampleApp/Controllers/TagHelpersController.cs）：
    public class TagHelpersController : Controller
    {
      public IActionResult Index() => View();
      // etc.
    }
锚标记辅助程序定义了asp-controller和asp-action特性。之后，控制器和动作方法用来
建立锚元素的URL。在第二个和第三个例子中，不需要控制器，因为视图来自相同的控制
器（代码文件MVCSampleApp/Views/TagHelpers/Index.cshtml）：
    Home
    Label Tag Helper
    Input Type Tag Helper
以下代码段显示了生成的HTML代码。asp-controller和asp-action特性为a元素生成了
href特性。在第一个示例中，为了访问Home控制器中的Index动作方法，因为它们都是路
由定义的默认值，所以结果中只需要指向/的href。指定asp-action 
LabelHelper时，href指
向/TagHelpers/LabelHelper，即当前控制器中的动作方法LabelHelper：
    Home
    Label Tag Helper
    Input Type Tag Helper
41.7.3 使用标签标记辅助程序
下面的代码段展示了标签标记辅助程序的功能，其中动作方法LabelHelper把Menu对
象传递到视图（代码文件MVCSampleApp/Controllers/TagHelpersController.cs）：
    public IActionResult LabelHelper() => View(GetSampleMenu());
    private Menu GetSampleMenu() =>
      new Menu
      {
        Id = 1,
        Text = "Schweinsbraten mit Knödel und Sauerkraut",
        Price = 6.9,
        Date = new DateTime(2016, 10, 5),
        Category = "Main"
      };
    }
Menu类应用了一些数据注解，用来影响标记辅助程序的结果。看一看Text属性的
Display特性。它将Display特性的Name属性设置为Menu 
（代码文件
MVCSampleApp/Models/Menu.cs）：
    public class Menu
    {
      public int Id { get; set; }
      [Required, StringLength(50)]
      [Display(Name = "Menu")]
      public string Text { get; set; }
      [Display(Name = "Price"), DisplayFormat(DataFormatString = "{0:C}")]
      public double Price { get; set; }
      [DataType(DataType.Date)]
      public DateTime Date { get; set; }
      [StringLength(10)]
      public string Category { get; set; }
    }
视图利用了应用于标签控件的asp-for特性。用于此特性的值是视图模型的一个属性。
在Visual 
Studio 
2015中，可以使用智能感知来访问Text、Price和Date属性（代码文件
MVCSampleApp/Views/TagHelpers/LabelHelper.cshtml）：
    @model MVCSampleApp.Models.Menu
    @{
      ViewBag.Title = "Label Tag Helper";
    }
    @ViewBag.Title
在生成的HTML代码中，可以看到for特性，它引用的元素与属性同名，内容是属性名
或Display特性的值。还可以使用此特性本地化值：
    Menu
    Price
    Date
41.7.4 使用输入标记辅助程序
HTML标签通常与input元素相关。下面的代码段说明了使用input元素和标记辅助程序
会生成什么：