title:When Parents and Children Disagree: Diving into DNS Delegation Inconsistency
author:Raffaele Sommese and
Giovane C. M. Moura and
Mattijs Jonker and
Roland van Rijswijk-Deij and
Alberto Dainotti and
Kimberly C. Claffy and
Anna Sperotto
When Parents and Children Disagree:
Diving into DNS Delegation Inconsistency
Raﬀaele Sommese1(B), Giovane C. M. Moura2, Mattijs Jonker1,
Roland van Rijswijk-Deij1,3, Alberto Dainotti4, K. C. Claﬀy4,
and Anna Sperotto1
1 University of Twente, Enschede, The Netherlands
PI:EMAIL
2 SIDN Labs, Arnhem, The Netherlands
3 NLnet Labs, Amsterdam, The Netherlands
4 CAIDA, San Diego, USA
Abstract. The Domain Name System (DNS) is a hierarchical, decen-
tralized, and distributed database. A key mechanism that enables the
DNS to be hierarchical and distributed is delegation [7] of responsibil-
ity from parent to child zones—typically managed by diﬀerent entities.
RFC1034 [12] states that authoritative nameserver (NS) records at both
parent and child should be “consistent and remain so”, but we ﬁnd incon-
sistencies for over 13M second-level domains. We classify the type of
inconsistencies we observe, and the behavior of resolvers in the face of
such inconsistencies, using RIPE Atlas to probe our experimental domain
conﬁgured for diﬀerent scenarios. Our results underline the risk such
inconsistencies pose to the availability of misconﬁgured domains.
1
Introduction
The Domain Name System (DNS) [12] is one of the most critical components of
the Internet, used by virtually every user and application. DNS is a distributed,
hierarchical database that maps hosts, services and applications to IP addresses
and various other types of records. A key mechanism that enables the DNS to
be hierarchical and distributed is delegation [7]. In order for delegation to work,
the DNS hierarchy is organized in parent and child zones—typically managed by
diﬀerent entities—that need to share common information (NS records) about
which are the authoritative name servers for a given domain. While RFC1034 [12]
states that the NS records at both parent and child should be “consistent and
remain so”, there is evidence that this is not always the case [10]. However, a full
and systematic analysis of the extent of this problem is still missing.
In this paper, we analyze this issue by (i) providing a broad characteri-
zation of inconsistencies in DNS delegations, and (ii) investigating and shed-
ding light on their practical consequences. Speciﬁcally, we ﬁrst evaluate if there
are inconsistencies between parent and child sets of NS records (NSSet) for all
active second-level domain names of three large DNS zones: .com, .net, and .org
c(cid:2) Springer Nature Switzerland AG 2020
A. Sperotto et al. (Eds.): PAM 2020, LNCS 12048, pp. 175–189, 2020.
https://doi.org/10.1007/978-3-030-44081-7_11
176
R. Sommese et al.
(Sect. 3)—together comprising of more than 166M domain names (50% of the
DNS namespace), as well as all top-level domains (TLDs) from the Root DNS
zone [22]. We show that while 80% of these domain names exhibit consistency,
8% (i.e., 13 million domains) do not. These inconsistencies aﬀect even large and
popular organizations, including Twitter, Intel and AT&T. Overall we ﬁnd that
at least 50k .com, .net, and .org domains of the Alexa Top 1M list are aﬀected.
We then classify these inconsistencies into four categories (Sect. 3): the cases
(i) in which the parent and child NSSets are disjoint sets, (ii) the parent NSSet
is a subset of the child NSSet, (iii) the parent NSSet is a superset of the child
NSSet and (iv) the parent and child NSSet have a non-empty intersection but do
not match (ii) or (iii). These inconsistencies are not without harm. Even in the
case in which disjoint sets of NS records resolve to the same IP addresses, case (i)
introduces fragility in the DNS infrastructure, since operators need to maintain
diﬀerent information at diﬀerent levels of the DNS hierarchy, which are typically
under separate administrative control. Case (ii) may lead to unresponsive name
servers, while case (iii) points to a quite understandable error of modifying the
child zone while forgetting the parent, but it oﬀers a false sense of resilience and
it results in improper load balancing among the name servers. Finally, case (iv),
which we see happening in more than 10% of the cases in which parent and child
have a non-empty intersection, suﬀers all the aforementioned risks.
To understand the practical consequences of such inconsistencies, we emu-
late all four categories (Sect. 4) by setting up a test domain name and issuing
DNS queries from more than 15k vantage points. Our experiment highlights the
consequences of delegation inconsistency on query load distribution in the wild.
We then investigate how popular DNS resolvers from diﬀerent vendors deal with
such inconsistencies (Sect. 5), and ﬁnd that some resolvers do not comply with
RFC speciﬁcations.
Finally, we conclude the paper discussing our ﬁndings and oﬀering recommen-
dations for domain name operators to manage the inconsistencies we identiﬁed.
2 Background and Related Work
DNS uses a hierarchical name space [12], in which the root node is the dot (.).
Zones under the root—the top-level domains such as .org—are referred to as
delegations [7]. These delegations have second-level delegations of their own such
as example.org. To create delegations for a child zone (such as example.org), DNS
NS records [12] are added to the parent zone (.org in Fig. 1). In this example,
the NS records are [a,b].iana-servers.net, which, in practice, means that these
records are the authoritative name servers for example.org, i.e.,servers that have
deﬁnitive information about the example.org zone.
RFC1034 states that the NSSet should be consistent between parent and
child authoritative servers. This, however, is far from trivial. Parent and child
zones and servers are almost always maintained by diﬀerent organizations across
administrative boundaries. The most common case is where the parent is a TLD.
Delegation changes in the parent go through the so-called Registry-Registrar-
Registrant (RRR) channel for almost all TLDs. In this model, the Registry
Diving into DNS Delegation Inconsistency
177
Parent
example.org NS a.iana-servers.net
example.org NS b.iana-servers.net
b0.org.aﬁlias-nst.org.
Child
Delegation
a.iana-
servers.net
example.org NS a.iana-servers.net
example.org NS b.iana-servers.net
example.org A 93.184.216.34
example.org NS a.iana-servers.net
example.org NS b.iana-servers.net
example.org A 93.184.216.34
b.iana-
servers.net
Fig. 1. Domain name delegation: parent and child authoritative servers.
operates the TLD, the Registrar sells domain names under the TLD and the
Registrant is the domain holder. If the domain holder wants to change the dele-
gation, they can make the change in their child zone, but need to ﬁle a request
with the Registry through the Registrar. This process currently always happens
via an out-of-band channel (not through the DNS) and in some cases may even
require forms on paper. Add to this that domain holders may not always be
aware of this complexity and the requirement to keep parent and child in sync,
and it is clear to see that keeping the DNS consistent is prone to human errors.
The problem of Parent-Child consistency is addressed in RFC7477 [6], which
introduces a method to automatically keep records in the parent in sync through
a periodical polling of the child using SOA records and a new type of record
(CSYNC). Unfortunately, RFC7477 lacks deployment.
Pappas et al. [17] analyzed divergence between parent and child delegations
on sample domains (∼6M) from multiple zones and found inconsistencies in
21% of the DNS zones evaluated, in three diﬀerent years. Kristoﬀ [10] analysed
delegations in .edu and ﬁnds that 25% of .edu delegations suﬀer some form of
inconsistency. In his work, he considers 3 types of inconsistency: superset, subset
and disjoint-set. Our work signiﬁcantly expands on both studies by considering
both the largest generic TLDs .com, .net and .org and the root zone of the DNS
(∼166 million domains, Sect. 3) and evaluating implications for resolvers in the
wild (Sect. 4).
Liu et al. show that dangling delegation records referring to expired resources
(e.g., cloud IP addresses or names) left in the parent or child pose a signiﬁcant
risk [11]. An attacker can obtain control of these records through the same cloud
services by randomly registering new services, and in this way take control of the
domain. Finally, Moura et al. [14] have looked into the consistency of time-to-live
values [12] of parent and child NS records.
3 Parent and Child NSSet: Are They Consistent?
DNS NS records must be conﬁgured at both parent and child zones [5,12].
We compare NS records at parents and children in the wild considering all
second-level domains (SLDs) under .com, .net, and .org, on 2019-10-16. We
also evaluate the records in the Root DNS zone on 2019-10-30. We make use of
OpenINTEL, a large-scale DNS measurement platform [23]. OpenINTEL collects
178
R. Sommese et al.
Table 1. Parent (P ) and Child (C) NSSet consistency results. “IP” refers to A records
of the NSSet of P and C.
SLD
SLD
SLD TLD Ratio Ratio Ratio
Total domains
Unresponsive
P = C
P (cid:2)= C
P ∩ C (cid:2)= ∅
P ⊂ C
P ⊃ C
Rest
P ∩ C = ∅
IP (P ) = IP (C)
IP (P ) (cid:2)= IP (C)
IP (P ) ∩ IP (C) = ∅
IP (P ) ∩ IP (C) (cid:2)= ∅
949,137 1,663,403
142,302,090 9,998,488 13,181,091 1528
19,860,226
0 14.0% 9.5% 12.6%
111,077,299 8,291,257 10,443,314 1476 78.0% 82.9% 79.2%
52 8.0% 7.6% 8.2%
11,364,565
16 58.0% 55.2% 51.0%
6,594,680
3,046,075
16 48.2% 53.9% 46.7%
0 51.8% 46.1% 53.3%
3,265,171
0 43.3% 45.3% 49.1%
1,415,838
0 56.7% 54.7% 51.9%
1,849,333
36 42.0% 44.8% 49.0%
4,769,885
3,506,090
18 73.5% 69.5% 70.2%
10 14.3% 18.9% 18.7%
681,082
582,713
8 12.2% 11.6% 11.1%
758,094 1,074,374
548,718
418,269
216,130
245,936
280,988
184,885
137,913
83,720
143,075
101,165
525,656
339,825
236,257
369,442
98,345
64,161
39,407
57,869
daily active measurements of over 60% of the global DNS namespace every day.
For each SLD, we extract the sets of NS records from the parent and child
authoritative servers, respectively indicated as P and C.
Table 1 shows the results of our comparative analysis. The ﬁrst row shows the
total number of SLDs for each TLD zone on the date considered. For the three
zones, ∼80% of SLDs have a consistent set of NS records at both the parent and
the child zones. However, ∼8% of SLDs (∼13M) do not. For comparison, consider
that 13M is almost as many domain names as some of the largest country-code
TLDs (Germany’s .de, one of the largest, has 16M SLDs [3]). The remaining
12% of domains are unresponsive to our queries. This could happen for diﬀerent
reasons, i.e. misconﬁgurations, failure, etc., not addressed in this work. We even
see that 52 TLDs in the Root zone have inconsistent NSSets. Out of these,
26 are country-code TLDs (ccTLDs). We are currently notifying these ccTLD
operators, in order to resolve these non-conforming setups, since they can have
an adverse eﬀect, among others, on load balancing.
Inconsistent NSSets Classiﬁcation: We classify inconsistent domain names
into four categories: the cases in which (i) the parent and child NSSets are
disjoint, (ii) the parent NSSet is a subset of the child NSSet, (iii) the parent
NSSet is a superset of the child NSSet and (iv) the parent and child NSSet have
a non-empty intersection but do not match (ii) or (iii).
For case (i), we observe that 51–58% of domains have completely disjoint
NSSets (P ∩ C = ∅). Depending on if resolvers are parent or child-centric, in this
case resolvers will trust diﬀerent NS records.
Given the surprising results for disjoint sets, we investigate the IP addresses
of the NS records (IP(P, C, lines 4–7 in Table 1).1 We discover that in half of the
1 This covers 96% of names with disjoint NSSets, the remaining 4% are indeterminate
due to unresolvable names in the NSSets.
Diving into DNS Delegation Inconsistency
179
cases, domains have disjoint NSSets that point to the same addresses, i.e.,there
is an inconsistency of names but addresses match. In the other half, there is
inconsistency also in addresses. Of these, ∼45% have completely disjoint sets of
IP addresses, for the remaining 55% there is some sort of overlap.
Disjoint sets may increase the risk of human error even in the case of name
servers resolving to the same IP address, since operators would need to main-
tain redundant information in the parent and child, thus introducing fragility in
the DNS data. Disjoint sets also may lead to lame delegations [7], i.e.,pointing
resolvers to servers that may no longer be authoritative for the domain name.
Finally disjoint sets can be related to another malpractice: CNAME con-
ﬁgured on the Apex [1]. However, further analysis shows that only a negligible
percentage of cases are related to this.
Considering partially matching SLDs (P ∩ C (cid:4)= ∅), we observe that 69–73%
belong to case (ii), where the parent NSSet is a subset of the child NSSet. This
may be intentional, e.g. an operator may want to ﬁrst update the child and
observe traﬃc shifts, and then later update the parent. Alternatively, operators
may forget to update the delegation at the parent after updating the child.
Case (iii) where the parent NSSet forms a superset of the child NSSet (P ⊃ C)
occurs in 14–18% of cases. This situation may introduce latency in the resolution
process due to unresponsive name servers. Finally, the Rest category is case (iv),
where the NSSets form neither a superset nor a subset, yet they have a non-empty
intersection. Between 11–12% of SLDs fall in this category, and are susceptible
to the range of operational issue highlighted for the previous categories.
Note that the OpenINTEL platform performs the measurements choosing one
of the child authoritative nameservers. To verify how often sibling name servers
have diﬀerent conﬁgurations (child-child delegation inconsistency), we execute a
measurement on a random sample of ∼1% of .org domains (10k domains). The
measurement suggests that ∼2% of total parent-child delegation inconsistency
cases also have child-child delegation inconsistencies, meaning that our results
give a lower bound for the problem of parent-child mismatch. In fact, the Open-
INTEL resolver could randomly choose a server conﬁgured correctly, while the
others are not.
4
Implications of NSSet Diﬀerences in the Wild
We observed that roughly 8% of studied domains have parent/child inconsis-
tencies. In this section, we investigate the consequences of such inconsistencies,
by emulating the four categories of NSSet mismatches. We conﬁgure parent and
child authoritative servers in eight diﬀerent conﬁgurations (Table 2), and explore
the consequences in terms of query load distribution. Our goal is to study these
consequences in a controlled environment, where the authoritative name servers
are in the same network. In the real-world, the authoritative name servers are
often distributed geographically and the query load can depend on external fac-
tors, e.g. nearest server, popularity of a domain in a certain region, etc.
We emulate an operator that (i) has full control over its child authoritative
name servers and (ii) uses the same zone ﬁle on all authoritative name servers
180
R. Sommese et al.
(zones are synchronized). We place all child authoritative servers in the same
network, thus, having similar latencies. We expect this to result in querying
resolvers distributing queries evenly among child authoritatives [15].
As vantage points, we use RIPE Atlas [20,21], measuring each unique resolver
as seen from their probes physically distributed around the world (3.3k ASes).
Many Atlas probes have multiple recursive resolvers, so we treat each combi-
nation of probe and unique recursive resolver as a vantage point (VP), since
potentially each represents a diﬀerent perspective. We therefore see about 15k
VPs from about 9k Atlas probes, with the exact number varying by experiment
due to small changes in probe and resolver availability.
Table 2. Experiments to compare diﬀerents in Parent/Child NSSet
Disjoint
Subset
Superset
Rest
600s
2h
3600 s
3600 s
[ns1, ns3]
[ns2, ns4]
[ns1, ns3]
[ns1, ns2, ns3, ns4]
[ns1, ns2, ns3, ns4]
[ns2, ns4]
[ns1, ns2, ns3, ns4]
[ns2, ns4, ns5, ns6]
A $probeid-$timestamp.marigliano.xyz with 30 seconds TTL
Experiment
Min-Oﬀ Min-On Min-Oﬀ Min-On Min-Oﬀ Min-On Min-Oﬀ Min-On
Measurement ID 23020789 23019715 23113087 23113622 23114128 23115432 23117852 23116481
Frequency
Duration
Query
NSSet Parent