qj efﬁciently under the above distributional assumption of
1 . Then replacing p with p(cid:48) ← p + (q1, . . . , qk) yields
s(2)
a polynomial map under which σ veriﬁes both m1 and m2.
Hence, the attacker succeeds by returning (p(cid:48), m1, m2, σ).
An attacker against NR of GeMSS is given a public key p,
a signature σ ← (snb_ite, xnb_ite, . . . , x1) that veriﬁes under
this public key p for a message m that is unknown to the
attacker as well as circumstantial knowledge aux about the
message. Similarly to the attack against MBS of GeMSS, the
attacker constructs a polynomial q that satisﬁes q(sj, xj) = 0
for j ∈ [2, nb_ite] and q(s1, x1) = pl(s1, x1) ⊕ d1,l for an
arbitrary l ∈ [1, k]. The full version details how to construct
q efﬁciently. The attacker outputs p + qel for some l as new
public key and the same signature. Here, el denotes the vector
in F2[z1, . . . , zn+v]n which has a 1 in the l-th component and
0 everywhere else, so that p is changed only in one component
by adding q.
GeMSS uses SHA-3 for the underlying hash operations. This
hash function is believed to have the required properties to
securely apply our BUFF transformation. Thus, with this hash
function it is reasonable to assume that the modiﬁed scheme
achieves the stronger security guarantees.
B. Picnic
The signature scheme Picnic [27], [30] is a family of digital
signature algorithms using as its main building blocks a zero-
knowledge proof, as well as symmetric key primitives such as
a hash function and a block cipher. On a high-level, Picnic is
obtained by transforming an interactive zero-knowledge proof
of knowledge protocol into a non-interactive signature scheme
using Fiat-Shamir transform or Unruh transform. Currently, all
variants of Picnic basically follow the same design principle,
however relying on different variants of the proof of knowledge
protocol ZKBoo, a different implementation of the block
cipher, or other parameter sets. The ﬁrst variant, Picnic, can
be instantiated using a variant of ZKBoo called ZKB++ as
proof of knowledge protocol in combination with the Fiat-
Shamir transform or the Unruh transform. The other variants,
Picnic2 and Picnic3, use instead a different variant of ZKBoo
called KKW as proof of knowledge protocol and the Fiat-
Shamir transform. Since Picnic3 outperforms Picnic2 due to
new parameter sets and optimizations of the block cipher, the
latter was deprecated in favor of the former.
All of the proof of knowledge protocols use the so-called
multi party computation (MPC)-in-the-head paradigm. The
general idea of the paradigm is that the prover simulates an
execution of a MPC protocol, commits to the view of each party,
and opens a part of the commitments according to the challenge
issued by the veriﬁer. The proof of knowledge protocol is used
to prove the knowledge of a key for a block cipher that is always
instantiated as LowMC, i.e., the secret input to a boolean circuit
evaluating LowMC. Hence, in the key generation algorithm,
the secret key sk is a randomly sampled key for the LowMC
cipher and the public key is a randomly sampled plaintext p
and its LowMC encryption under sk.
To obtain a signature from the proof of knowledge protocol,
the challenge is computed deterministically as a hash function
evaluation of the public key and the message among other
values, as described by the Fiat-Shamir transform or Unruh
transform, respectively. Further values included in the challenge
relate to the execution of the MPC-in-the-head protocol, i.e.,
output shares and commitments to the view of each party.
Finally, the signature consists of the challenge, the zero-
knowledge proof and a salt. The veriﬁcation step recomputes
part of the proof of knowledge protocol and the challenge. If
the recomputed challenge corresponds to the one provided in
the signature then veriﬁcation is successful, otherwise not. An
algorithmic description of Picnic is provided in Figure 12.
The authors of Picnic have considered the notion of CEO
for Picnic, referring to it in the terminology of [6]. They argue
that all Picnic variants provide CEO in [27, Section 7.3].
Proof of Proposition V.11. Inspecting the signature scheme as
summarized in Figure 12 shows that the generated signature
contains the hash digest that was generated from inputting
the public key and the message (among other values) into
the hash function. Observe that the veriﬁcation algorithm
explicitly checks the hash value. Hence, Picnic implements our
BUFF transformation as speciﬁed in Figure 5 and therefore
Theorem IV.5 applies to Picnic. Thus, it follows directly that
Picnic achieves M-S-UEO and message-bound signatures if the
hash function is collision resistant. Non re-signability follows
if the hash function is collision resistant and Φ-non-malleable
for Φ = {φpk(cid:48),ψ} where φpk(cid:48),ψ(a, pk, m) = (ψ(a), pk
(cid:48)
, m).
This holds as in the proof of Theorem IV.5 for our BUFF
transformation.
Picnic requires to use SHAKE-256 as the hash function
(prepended with a byte to derive quasi independent hash
functions). It is thus reasonable to assume that the hash function
is collision resistant and non-malleable, meaning that the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
171712
return (sk, pk)
KGen(1λ)
11 : p ←${0, 1}λ
sk ←${0, 1}λ
12 :
13 : C ← EncLowM C (sk, p)
14 : pk ← (C, p)
15 :
Sig(sk, m)
21 :
22 :
23 :
24 : σ ← (c, z, salt)
25 :
Vf(pk, m, σ)
31 : parse σ as (c, z, salt)
32 : a
return σ
(a, salt) ←$ simulate_circuit(sk, pk, m)
c ← H(a, pk, m)
z ← Prove(c, a, salt)
(cid:48) ← recompute_circuit(pk, m, c, z, salt)
(cid:48) ← H(a
(cid:48)
, pk, m)
(cid:48)
return [c
= c]
c
33 :
34 :
Figure 12: Algorithmic description of Picnic based on Scheme 5
in [27].
signature schemes already provides the other security properties,
as it follows our BUFF transformation.
C. SPHINCS+
The signature scheme SPHINCS+ [28] is a hash-based
signature scheme based on Merkle trees, in particular on
XMSS. SPHINCS+ makes use of a one-time signature scheme
(OTS) and a few-time signature scheme (FTS). Both of these
schemes allow computing the public key from a signature. In the
following we describe SPHINCS+ and its required components
on a high-level. For the full details, we refer to [28] and [31].
Let us start with describing the respective details about the
FTS scheme which is called FORS (Forest of Random Subsets).
Such a forest consists of k trees with t = 2a leaves each. The
secret key consists of the random values in the leaves of all k
trees, while the public key is a hash of the root of all k trees.
The length of a message is exactly ka bits. To sign a message
the message is split into k blocks of equal length. Each block
indicates one leaf in one of the k trees. The signature then
consists of the k leaves and their authentication path to the
root of the corresponding tree. An authentication path in a
tree consists of the sibling nodes on the way from the node
to the root. FORS does not provide a veriﬁcation algorithm.
Instead, it provides an algorithm called pkFromSig that allows
to compute the public key from the signature. The public key
is then implicitly checked by the next step.
On a high level, SPHINCS+ uses a hypertree to authenticate
FORS public keys that are used to sign messages. The hypertree
is composed of several layers of trees. The leaves of the trees
on the bottom layer are FORS public keys. The leaves of all
other trees are public keys for an OTS scheme that is used
return (sk, pk)
sk.seed ←${0, 1}8λ, sk.prf ←${0, 1}8λ
r ← PRFmsg (sk.prf, OptRand, m)
(md(cid:107)idx) ← Hmsg (r, pk, m)
KGen(1λ)
11 :
12 : pk.seed ←${0, 1}8λ, pk.root ← hypertree root
sk ← (sk.seed , sk.prf )
13 :
14 : pk ← (pk.root, pk.seed )
15 :
Sig(sk, m)
21 :
22 :
23 : σFORS ← SigFORS (md, sk.seed , pk.seed , idx)
24 : pkFORS ← pkFromSigFORS (σFORS , md, pk.seed , idx)
25 : σHT ← SigHT (pkFORS , sk.seed , pk.seed , idx)
26 : σ ← (r, σFORS , σHT )
27 :
Vf(pk, m, σ)
31 :
32 :
33 : pkFORS ← pkFromSigFORS (σFORS , md, pk.seed , idx)
34 :
(r, σFORS , σHT ) ← σ
(md(cid:107)idx) ← Hmsg (r, pk, m)
return Vf HT (pkFORS , σHT , idx, pk.root)
return σ
Figure 13: Algorithmic description of SPHINCS+.
to sign the root of the tree one layer below. Each inner node
of each tree (including the trees in the FORS key pairs) is a
hash value of the public seed, the address of the node in the
hypertree, and its two children using the hash function H, i.e.
node ← H(pk.seed , ADRS, leftChild, rightChild). In contrast,
the hash function Hmsg is used only once per execution of the
signing or veriﬁcation algorithm to obtain the message digest
and index to be used. In Figure 13, we provide an algorithmic
description of SPHINCS+.
The key generation algorithm sets the public key to the root
of the hypertree pk.root and a seed pk.seed to tie executions of
a hash function to these public values. The secret key consists
of a seed sk.seed, which is used to determine the secret keys
for the underlying OTS scheme and FORS, and a PRF key
sk.prf to generate a randomizer. The signing algorithm starts
with computing the message digest md and the index idx by
hashing the randomizer r, the public key pk, and the message
m using the hash function Hmsg. The index idx indicates the
FORS key pair to be used. Finally, the signature consists of
the randomizer r, a FORS signature on the message digest
md, and the authentication path of the FORS public key in the
hypertree which is referred to as a signature of the hypertree,
i.e., σHT . The veriﬁcation algorithm parses the signature and
computes md and idx by evaluating the hash function Hmsg on
the randomizer, the public key and the message. Furthermore,
it computes the FORS public key from the FORS signature,
and veriﬁes the authentication path of the FORS public key
in the hypertree. That is, it uses the FORS public key and its
authentication path to recompute the root and checks that value
against the root denoted in the public key as pk.root.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
181713
proof, during the veriﬁcation (while running VfHT ) we require
that the resulting root node is identical to the root node given
in the public key, even tough we use a different seed in the
hash function evaluation. Hence, this means we would ﬁnd a
collision in H. Next, let us assume that the seed is identical
while the root differs. Thus, the veriﬁcation algorithm obtains
a different hash digest when evaluating Hmsg. This change
propagates at each step when hashing through the hypertree,
leading to a different root node. (In case the same root node is
computed, this corresponds to a collision in H.) If the attacker
now changes the root node denoted in the public key, the root
node computed by the veriﬁcation algorithm changes yet again.
This leads to a circularity in the argument since we provide
Hmsg exactly with the key that the root is already supposed
(cid:48) differ, the seed
to be part of. In case both components of pk
and the root node, the veriﬁcation algorithm obtains a different
hash digest from Hmsg as well. Since the seed is used as
an argument to the hash function when hashing through the
hypertree, the changes to the hash digest are at least as severe
as in the previous case. Therefore, the same argument applies
here. Due to these observations, it seems infeasible that an
attacker could succeed here. Hence, we intuitively expect that
S-CEO should be satisﬁed.
A similar argument also holds for DEO with the only
difference that it is required that the message differs. Hence
the hash value of evaluating Hmsg differs and we can make
the same case distinction as for S-CEO. Therefore we also
intuitively expect DEO to be satisﬁed.
(cid:48)
(cid:48) means that Hmsg (r, pk
We next argue why it is plausible that SPHINCS+ provides
non re-signability. Assume ﬁrst that one could somehow infer
the output of the evaluation of Hmsg, i.e., md(cid:107)idx, from a valid
signature. Then we could transform an attacker against non
re-signability into an attacker against the Φ-non-malleability
of Hmsg: First, re-signing for the unknown message m under
another key pk
, m) must be related
to the original hash value Hmsg (r, pk, m) for a different input
part pk (cid:54)= pk
(cid:48). On the other hand, without being able to deduce
md(cid:107)idx (almost) entirely, the adversary cannot know which
message digest to sign under which key pair. We assume
that in such cases the adversary’s signature is invalid with
overwhelming probability. Thus, overall we expect NR to hold.
SPHINCS+ comes with different instantiations for (tweak-
able versions of) the hash functions SHAKE-256, SHA256,
and Haraka. Hence, applying our transformation for the former
two it is conceivable that the derived scheme achieves all
security properties; we are not aware of the underlying security
properties of Haraka.
The security of SPHINCS+ [31] requires that the hash
function Hmsg has a property called interleaved target subset
resilience (ITSR). Intuitively, this states that it is infeasible
for an attacker given an input to Hmsg to ﬁnd a second input
to Hmsg such that the corresponding second signature uses a
particular leaf in a FORS forest, where this particular leaf was
already used in the ﬁrst signature. Speciﬁcally, if the resulting
indices refer to the FORS forest at the same position, then the
digest will refer to different leaves in each tree of this forest.
Proof of Proposition V.12. Let us assume a successful attacker
with a public key pk that can craft a signature σ1 ←
(r1, σFORS ,1, σHT ,1) which veriﬁes for a message m1 under
pk and a signature σ2 ← (r2, σFORS ,2, σHT ,2) which veriﬁes
for a message m2 under pk with m1 (cid:54)= m2 and σ1 = σ2. This
implies r1 = r2.
To verify the signatures, the veriﬁer ﬁrst has to compute the
respective message digests, i.e., it computes (md1(cid:107)idx1) ←
Hmsg (r1, pk, m1) and (md2(cid:107)idx2) ← Hmsg (r2, pk, m2), re-
spectively. Due to the ITSR property of Hmsg it is infeasible
for the attacker to ﬁnd two different inputs to Hmsg such that the
same FORS key pair is used to sign the same message digest.
Therefore, it cannot hold that md1 = md2 and idx1 = idx2.
Firstly, we assume that idx1 (cid:54)= idx2. The signature σHT ,1 =
σHT ,2 needs to verify two different leaves of the same hypertree.
By construction of VfHT , each node is hashed to the root of
the hypertree with the sibling nodes given in the signature.
Speciﬁcally, node ← H(pk.seed , ADRS, leftChild, rightChild)
where ADRS denotes the address of the parent node in
the hypertree. Recall that the index of each node which is
unique in the whole hypertree is given as argument when
hashing through the forest to compute the FORS public key.
For veriﬁcation to accept, the resulting root nodes need to
be identical. This implies ﬁnding a collision in H. Thus, a
successful attacker against message-bound signatures can also
break the collision resistance of H. Secondly, we consider
the case that md1 (cid:54)= md2 and idx1 = idx2. In order for
σ1 = σ2 to hold it must be that σFORS ,1 = σFORS ,2. If the
two FORS public keys extracted from the signature are different,
veriﬁcation of their authentication paths fail, i.e., VfHT fails,
as described above. If the two FORS public keys extracted
from the signature are identical, there has to be a collision
while hashing the leaf nodes to the roots. Thus, a successful
attacker can also break the collision resistance of H.
Unfortunately, we cannot provide formal proofs showing
that SPHINCS+ achieves M-S-UEO and NR under standard
assumptions. In the following we provide some discussion
arguing that we intuitively expect these notions to hold.
In order to achieve M-S-UEO, the scheme should at least
satisfy S-CEO and S-DEO. Let us start with S-CEO and recall
(cid:48) under
that the attacker needs to output a new public key pk
which a signature veriﬁes its underlying message. Concretely
for SPHINCS+ this means that the attacker needs to output
a public key where at least one of its components differ, i.e.
.root (cid:54)= pk.root. Let us consider that
(cid:48)
pk
the root is identical and the seed differs. Similar to the previous
.seed (cid:54)= pk.seed or pk
(cid:48)
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
191714