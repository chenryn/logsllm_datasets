also control the domains may be able to add support for
HTTPS, although this can be a prohibitively expensive
and difﬁcult process for a novice developer.
We reviewed the 100 extensions and found that 29%
currently make HTTP XHRs. All of these would need
to be changed to use HTTPS XHRs. However, not all of
the domains offer HTTPS. Ten extensions request data
from at least one HTTP-only domain. Additionally, four
extensions make HTTP XHRs to an unlimited number of
domains based on URLs provided by the user; these ex-
tensions would have permanently reduced functionality.
For example, Web Developer lets users check whether a
website is valid HTML. It fetches the user-speciﬁed web-
site with an XHR and then validates it. Under a ban on
HTTP XHRs, the extension would not be able to validate
HTTP websites. In total, 14% of extensions would have
some functionality permanently disabled by the ban.
8 Related Work
Extension vulnerabilities. To our knowledge, our work
is the ﬁrst to evaluate the efﬁcacy of the Google Chrome
extension platform, which is widely deployed and ex-
plicitly designed to prevent and mitigate extension vul-
nerabilities. Vulnerabilities in other extension platforms,
such as Firefox, have been investigated by previous re-
searchers [20, 3]. We found that 40% of Google Chrome
extensions are vulnerable, which is in contrast to a pre-
vious study that found that 0.24% of Firefox extensions
contain vulnerabilities [3]. This does not necessarily im-
ply that Firefox extensions are more secure; rather, our
scopes and methodologies differ. Unlike the previous
study, we considered network attackers as well as web
attackers. We ﬁnd that 5% of Google Chrome exten-
sions have the types of web vulnerabilities that the pre-
vious study covered. The remaining discrepancy could
be accounted for by our methodology: we employed ex-
pert human reviewers whereas previous work relied on
a static analysis tool that does not model dynamic code
evaluation, data ﬂow through the extension API, data
ﬂow through DOM APIs, or click injection attacks.
Privilege separation. Privilege separation is a fundamen-
tal software engineering principle proposed by Saltzer
and Schroeder [25]. Numerous works have applied this
concept to security, such as OpenSSH [23] and qmail [6].
Recently, researchers have built several tools and frame-
works to help developers privilege separate their appli-
cations [7, 11, 17, 18, 22]. Studies have established that
privilege separation has value in software projects that
employ security experts (e.g., browsers [9]). However,
we focus on the effectiveness of privilege separation in
applications that are not written by security experts.
In concurrent and independent work, Karim et al. stud-
ied the effectiveness of privilege separation in Mozilla
Jetpack extensions [16]. Like Chrome extensions, Jet-
pack extensions are split into multiple components with
different permissions. They statically analyzed Jetpack
extensions and found several capability leaks in mod-
ules. Although none of these capability leaks are tied to
known vulnerabilities, the capability leaks demonstrate
that developers can make errors in a privilege-separated
environment. Their ﬁndings support the results of our
analysis of privilege separation in Chrome extensions.
Extension permissions. Previous researchers have es-
tablished that permissions can reduce the privileges of
extensions without negatively impacting the extensions’
functionality [4, 12]. Studies have also shown that some
extensions request unnecessary permissions, which is
undesirable because it unnecessarily increases the scope
of a potential vulnerability [12, 14]. All of these past
studies asserted that the correct usage of permissions
could reduce the severity of attacks on extensions. How-
ever, they did not study whether this is true in practice
or quantify the beneﬁt for deployed applications. To our
knowledge, we are the ﬁrst to test whether permissions
mitigate vulnerabilities in practice.
CSP compatibility. Adapting websites to work with CSP
can be a challenging undertaking for developers, primar-
ily due to the complexities associated with server-side
templating languages [31]. However, extensions do not
use templating languages. Consequently, applying CSP
to extensions is easier than applying it to websites in
most cases. We expect that our CSP compatibility ﬁnd-
ings for extensions will translate to packaged JavaScript
and packaged web applications.
Malicious extensions.
Extension platforms can be
used to build malware (e.g., FFsniFF and Infos-
tealer.Snifula [33]). Mozilla and Google employ several
strategies to prevent malicious extensions, such as do-
main veriﬁcation, fees, and security reviews. Liu et al.
propose changes to Chrome to make malware easier to
identify [19]. Research on extension malware is orthog-
onal to our work, which focuses on external attackers that
leverage vulnerabilities in benign-but-buggy extensions.
9 Conclusion
We performed a security review on a set of 100 Google
Chrome extensions, including the 50 most popular, and
found that 40% have at least one vulnerability. Based
on this set of vulnerabilities, we evaluated the effective-
ness of Chrome’s three extension security mechanisms:
isolated worlds, privilege separation, and permissions.
We found that the isolated worlds mechanism is highly
effective because it prevents common developer errors
(i.e., data-as-HTML errors). The effectiveness of iso-
lated worlds means that privilege separation is rarely
needed. Privilege separation’s infrequent usefulness may
not justify the complexity and communication overhead
that it adds to extensions. However, our study shows that
privilege separation would improve security in the ab-
sence of isolated worlds. We also found that permissions
can have a signiﬁcant positive impact on system security;
developers of vulnerable extensions can use permissions
well enough to reduce the scope of their vulnerabilities.
Although we demonstrated that privilege separation
and permissions can mitigate vulnerabilities, developers
do not always use them optimally. We identiﬁed sev-
eral instances in which developers accidentally negated
the beneﬁts of privilege separation or intentionally cir-
cumvented the privilege separation boundary to imple-
ment features. Similarly, extensions sometimes ask for
more permissions than they need [12]. Automated tools
for privilege separation and permission assignment could
help developers better use these security mechanisms,
thereby rendering them even more effective.
Despite the successes of these security mechanisms,
extensions are widely vulnerable. The vulnerabilities oc-
cur because the system was designed to address only one
threat: websites that attack extensions through direct in-
teraction. There are no security mechanisms to prevent
direct network attacks on core extensions, website meta-
data attacks, or attacks on websites that have been altered
by extensions. This ﬁnding should serve as a reminder
that multiple threats should be considered when initially
designing a system. We propose to prevent these addi-
tional threats by banning insecure coding practices that
commonly lead to vulnerabilities; bans on HTTP scripts
and inline scripts would remove 94% of the most serious
attacks with a tractable developer cost.
Acknowledgements
We would like to thank Prateek Saxena and Adam Barth
for their insightful comments. This material is based
upon work supported by Facebook and National Sci-
ence Foundation Graduate Research Fellowships. Any
opinions, ﬁndings, conclusions, or recommendations ex-
pressed here are those of the authors and do not neces-
sarily reﬂect the views of Facebook or the National Sci-
ence Foundation. This work is also partially supported
by National Science Foundation grant CCF-0424422, a
gift from Google, and the Intel Science and Technology
Center for Secure Computing.
References
[1] L. Adamski.
Security
severity
ratings.
https://wiki.mozilla.org/Security_
Severity_Ratings.
[2] B. Adida, A. Barth, and C. Jackson. Rootkits for
JavaScript Environments. In Web 2.0 Security and
Privacy (W2SP), 2009.
[3] S. Bandhakavi, S. T. King, P. Madhusudan, and
M. Winslett. VEX: Vetting Browser Extensions
For Security Vulnerabilities. In USENIX Security,
2010.
[4] A. Barth, A. P. Felt, P. Saxena, and A. Boodman.
Protecting Browsers from Extension Vulnerabili-
In Network and Distributed System Security
ties.
Symposium (NDSS), 2010.
[6] D. J. Bernstein. The qmail security guarantee.
http://cr.yp.to/qmail/guarantee.html.
[7] A. Bittau, P. Marchenko, M. Handley,
and
B. Karp. Wedge:
splitting applications into
reduced-privilege compartments. In USENIX Sym-
posium on Networked Systems Design and Imple-
mentation, 2008.
[8] B. Chess, Y. T. O’Neil, and J. West. JavaScript Hi-
jacking. Technical report, Fortify, 2007.
[9] J. Drake, P. Mehta, C. Miller, S. Moyer, R. Smith,
and C. Valasek. Browser Security Comparison: A
Quantitative Approach. Technical report, Accuvant
Labs, 2011.
[10] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wag-
In ACM
ner. Android Permissions Demystiﬁed.
Conference on Computer and Communication Se-
curity (CCS), 2011.
[11] A. P. Felt, M. Finifter, J. Weinberger, and D. Wag-
ner. Diesel: Applying Privilege Separation to
Database Access. In ACM Symposium on Informa-
tion, Computer and Communications Security (Asi-
aCCS), 2011.
[12] A. P. Felt, K. Greenwood, and D. Wagner. The Ef-
fectiveness of Application Permissions. In USENIX
Conference on Web Application Development (We-
bApps), 2011.
[13] Google Chrome Extensions.
Policy
curity
google.com/chrome/extensions/trunk/
contentSecurityPolicy.html.
(CSP).
Content Se-
http://code.
[14] A. Guha, M. Fredrikson, B. Livshits,
and
N. Swamy. Veriﬁed security for browser exten-
sions. In IEEE Symposium on Security and Privacy,
2011.
[15] C. Jackson.
Block chrome-extension:// pages
from importing script over non-https connec-
tions. http://code.google.com/p/chromium/
issues/detail?id=29112.
[16] Rezwana Karim, Mohan Dhawan, Vinod Ganapa-
thy, and Chung chiech Shan. An Analysis of the
Mozilla Jetpack Extension Framework. In Proceed-
ings of the 26th European Conference on Object-
Oriented Programming (ECOOP), 2012.
[5] Adam Barth. More secure extensions, by de-
fault. http://blog.chromium.org/2012/02/
more-secure-extensions-by-default.html,
February 2012.
[17] A. Krishnamurthy, A. Mettler, and D. Wagner.
Fine-grained privilege separation for web applica-
tions. In International Conference on World Wide
Web (WWW), 2010.
[18] M. Krohn, P. Efstathopoulos, C. Frey, F. Kaashoek,
E. Kohler, D. Mazi`eres, R. Morris, M. Osborne,
S. VanDeBogart, and D. Ziegler. Make Least Priv-
ilege a Right (Not a Privilege). In Conference on
Hot Topics in Operating Systems, 2005.
[19] L. Liu, X. Zhang, G. Yan, and S. Chen. Chrome
Extensions: Threat Analysis and Countermeasures.
In Network and Distributed System Security Sym-
posium (NDSS), 2012.
[20] R. S. Liverani and N. Freeman. Abusing Firefox
Extensions. Defcon17.
[21] A. Mikhailovsky, K. V. Gavrilenko,
and
of Decep-
Wireless Man-in-the-Middle Attacks
Deployment.
A. Vladimirov.
tion:
and
http://www.informit.com/articles/
article.aspx?p=353735&seqNum=7, 2004.
The Frame
Access
Rogue
Points
[22] D. Murray and S. Hand. Privilege separation made
trusting small libraries not big processes.
easy:
In European Workshop on System Security (EU-
ROSEC), 2008.
[23] N. Provos, M. Friedl, and P. Honeyman. Preventing
Privilege Escalation. In USENIX Security Sympo-
sium, 2003.
[24] G. Richards, C.Hammer, B. Burg, and J. Vivek.
The Eval that Men Do: A Large-scale Study of
the Use of Eval in JavaScript Applications. In Eu-
ropean Conference on Object-Oriented Program-
ming, 2012.
[25] J. Saltzer and M. D. Schroeder. The Protection of
In IEEE 63,
Information in Computer Systems.
1975.
[26] R. Saltzman and A. Sharabani. Active Man in the
Middle Attacks: A Security Advisory. Technical
report, IBM, 2009.
[27] StackOverﬂow. Why is using JavaScript eval func-
tion a bad idea? http://stackoverflow.com/
questions/86513/why-is-using-javascript
-eval-function-a-bad-idea.
[28] B. Sterne and A. Barth.
secu-
https://dvcs.w3.org/hg/
Content
policy.
rity
content-security-policy/raw-file/tip/
csp-specification.dev.html.
[29] Brandon Sterne and Adam Barth. Content se-
https://dvcs.w3.org/hg/
curity policy 1.1.
content-security-policy/raw-file/tip/
csp-specification.dev.html, May 2012.
[30] S. Wagner,
J.
P. Trischberger.
Tools with Reviews and Tests.
in Computer Science, 2005.
Jurgens, C. Koller,
and
Comparing Bug Finding
Lecture Notes
[31] J. Weinberger, A. Barth, and D. Song. Towards
Client-side HTML Security Policies. In Workshop
on Hot Topics on Security (HotSec), 2011.
[32] S. Willison. Understanding the Greasemonkey vul-
nerability. http://simonwillison.net/2005/
Jul/20/vulnerability/.
[33] C. Wuest and E. Florio. Firefox and Malware:
When Browsers Attack. Technical report, Syman-
tec, 2009.
A. List of Extensions
We selected 100 extensions from the ofﬁcial Chrome ex-
tension directory. We have coded extensions as follows:
vulnerable and ﬁxed (†), vulnerable but not ﬁxed (‡), and
created by Google (*). We last checked whether exten-
sions are still vulnerable on February 7, 2012.
Most Popular Extensions
The 50 most popular extensions (and versions) that we
reviewed are as follows: AdBlock 2.4.6, FB Photo Zoom
1.1105.7.2, FastestChrome - Browse Faster 4.0.6†, Ad-
block Plus for Google Chrome? (Beta) 1.1.3†, Google
Translate 1.2.3.1*‡, Google Dictionary (by Google)
3.0.0*†, Downloads 1, Turn Off the Lights 2.0.0.7,
Google Chrome to Phone Extension 2.3.0*, Firebug Lite
for Google Chrome 1.3.2.9761†, Docs PDF/PowerPoint
Viewer (by Google) 3.5*, RSS Subscription Exten-
sion (by Google) 2.1.3*‡, Webpage Screenshot 5.2†,
Mail Checker Plus for Google Mail 1.2.3.3, Awesome
Screenshot: Capture & Annotate 3.0.4‡, Google Voice
(by Google) 2.2.3.4*†, Speed Dial 2.1‡, Smooth Ges-
tures 0.15.2, Xmarks Bookmark Sync 1.0.14, Send from
Gmail (by Google) 1.12*, SocialPlus! 2.5.4‡, Flash-
Block 0.9.31, AddThis - Share & Bookmark (new) 2.1†,
WOT 1.1, Add to Amazon Wish List 1.0.0.4†, Stumble-
Upon 3.5.18.1†, Google Calendar Checker (by Google)
1.2.1*, Clip to Evernote 5.0.14.9248, Google Quick
Scroll 1.8*, Stylish 0.7, Silver Bird 1.9.7.9†, Smooth-
Scroll 1.0.1, Browser Button for AdBlock 0.0.13, TV
2.0.5, Fast YouTube Search 1.2‡, Slideshow 1.2.9†, bit.ly
— a simple URL shortener 1.2.1.9, Web Developer
0.3.1, LastPass 1.73.2, SmileyCentral 1.0.0.3‡, Select
To Get Maps 1.1.1‡, TooManyTabs for Chrome 1.6.5,
Blog This!
(by Google) 0.1.1*, TinEye Reverse Im-
age Search 1.1, ESPN Cricinfo 1.8.3†, MegaUpload
DownloadHelper 1.2, Forecastfox 2.0.10‡, PanicButton
0.13.1†, AutoPager Chrome 0.6.2.12, RapidShare Down-
loadHelper 1.1.1.
Randomly Selected Extensions
The 50 randomly selected extensions (and versions) that
we reviewed are as follows: The Independent 1.7.0.3†,
Deposit Files Download Helper 1.2, The Hufﬁngton Post
1.0.5‡, Bookmarks Menu 3.4.6, X-notiﬁer (Gmail, Hot-
mail, Yahoo, AOL ...) 0.8.2‡, SmartVideo For YouTube
0.94, PostRank Extension 0.1.7, Bookmark Sentry
1.6.5†, Print Plus 1.0.5.0‡, 4chan 4chrome 9001.47‡,
HootSuite Hootlet 1.5, Cortex 1.8.3, ScribeFire 1.7‡,
Chrome Dictionary Lite 0.2.6†, Taberareloo 2.0.17, SEO
Status Pagerank/Alexa Toolbar 1.6, ChatVibes Facebook
Video Chat! 1.0.7†, PHP Console 2.1.4, Blank Can-
vas Script Handler 0.0.17‡, Reddit Reveal 0.2, Greplin
1.7.3, DropBox 1.1.5, Speedtest.or.th 1, Happy Status
1.0.1‡, New Tab Favorites 0.1, Ricks Domain Cleaner for
Chrome 1.1.1, Fazedr 1.6†, LL Bonus Comics First! 2.2,
Better Reddit 0.0.4, (non-English characters) 1, turl.im
url shortener 1.1, Wooword Bounce 1.2, ntust Library
0.7, me2Mini 0.0.81‡, Back to Top 1.1, Favstar Tally by
@paul shinn 1.0.0.0, ChronoMovie 0.1.0, AutoPagerize
0.3.1, Rlweb’s Bitcoin Generator 0.1, Nooooo button 1‡,
The Bass Buttons 1.95, Buttons 1.4, OpenAttribute 0.6†,
Nu.nl TV gids 1.1.3‡, Hide Sponsored Links in Gmail?
1.4, Short URL 4, Smart Photo Viewer on Facebook
1.3.0.1‡, Airline Checkin (mobile) 1.2102, Democracy
Now! 1.1‡, Coworkr.net Chrome 0.9.