### 简述
本文将对`CVE-2018-8004`中存在的`HTTP
Smuggling`问题进行深入说明。因为目前没有太多相关信息（在撰写本文时，上一个介绍该类型的文章为“正在进行的分析”），并且自官方宣布以来已经过去了一段时间（甚至从v7中的修补程序发布以来也过去很久），由于我我不断收到关于到底是什么是HTTP
Smuggling以及如何测试、利用此类问题的需求，也因为Smuggling问题现在正趋于流行并且易于测试。本文需要感谢James
Kettle（@albinowax）的出色表现。
因此，这一次，我将不仅为读者提供详细的Smuggling信息，还将提供一些DockerFiles演示，以帮助读者进行测试工作。读者可以使用该测试手动原始查询进行实验，或者测试最近添加的BURP
Suite  
Smuggling工具。
### Apache Traffi服务器 ?
Apache Traffi服务器或ATS是一个开源HTTP负载平衡器和反向代理缓存。 基于商业产品捐赠给Apache基金会。 它与Apache httpd
HTTP服务器无关，“ Apache”名称来自Apache基础，其代码与httpd有很大不同。
如果读者想从ATS装置中进行搜索操作，那么便发现相关的漏洞，我也非常希望该漏洞现在可以被修复。
#### ATS被修复版本
如CVE公告（2018-08-28）所述，受影响的ATS版本为6.0.0至6.2.2和7.0.0至7.1.3。
版本7.1.4于2018-08-02发布，而版本6.2.3于2018-08-04发布。
这是官方宣布的消息，但是我认为7.1.3已经包含了大多数修复程序，并且。
由于6.x向后移植，该公告大部分被延迟了（在其他问题上，同时发布了一些其他修复程序）。
### CVE-2018-8004
官方描述如下：
> 发出恶意请求的客户端与ATS进行交互时，存在多个HTTP smuggling和缓存中毒问题。
它并没有给出很多指针，但是在列出的4个请求请求中有更多信息：
＃3192：如果字段名称后面和冒号前面有空格，则返回400  
＃3201：返回400错误响应时关闭连接  
＃3231：验证传入请求的Content-Length标头  
＃3251：如果有缓存命中，请清空请求正文
如果读者研究过我以前的一些帖子，那么其中的某些句子同样令人怀疑。
例如，基于标准，在错误400之后不关闭响应流显然是错误，但对于攻击者来说也是一个不错的选择。攻击者设计的一条错误的消息链，对于隐藏在无效请求正文中的某些查询，我们可能会成功收到响应。
最后一个是最好的一个，如果存在缓存命中，则清空请求正文，就像我们在本文中看到的那样，这很难检测到。
我的原始报告列出了5个问题：
  * 使用标头值中的`NULL`字符进行HTTP请求拆分
  * 使用标头拆分HTTP请求
  * 使用双Content-length标头分割HTTP请求
  * HTTP高速缓存中毒使用标头名称和标头值的分隔符之前的多余空间
  * 使用`...`拆分HTTP请求（不破坏代码：保留了此内容）
### 概念证明
为了了解问题并查看效果，我们将使用演示环境。
如果需要测试HTTP Smuggling问题，那么我们应该确实尝试在受控环境中对其进行测试。 在实时环境中测试问题是非常困难的，因为：
  * 我们和目标之间可能有一些HTTP代理，隐藏了大多数成功和错误消息。
  * 我们可能会触发自己不知道的错误和行为，例如，我在几个模糊测试（在测试环境中）遇到随机错误，无法重现，然后才了解这与我们将在本文中研究的最后一个走私问题有关。后续测试的效果被延迟了，我完全无法控制。
  * 我们可能会因其他用户或其他域发送的请求而触发错误。这与测试的反射型XSS不同。
  * 现实生活中的完整示例通常发生在几个不同的HTTP代理（例如Nginx + Varnish或ATS + HaProxy，或Pound + IIS + Nodejs等）之间的交互中。我们将必须了解每个actor如何与另一个actor交互，并且将看到通过本地低级网络捕获，它比盲目穿越代理链更快（例如，学习如何检测该链上的每个代理）。
因此，能够重建实验环境非常重要。
如果发现了漏洞问题，则可以使用该环境将详细的错误报告发送给程序所有者（以我个人的经验，有时可能很难解释问题，有效的演示会有所帮助）。
### 设置实验环境：Docker实例
我们将运行2个Apache Traffic Server实例，一个在6.x版中，一个在7.x版中。
为了增加一些改变和潜在的smuggling问题，我们还将添加一个Nginx码头工人和一个HaProy码头工人。
4个HTTP actor，每个在本地端口上：
127.0.0.1:8001:HaProxy（内部侦听端口80）  
127.0.0.1:8002:Nginx（内部侦听端口80）  
127.0.0.1:8007:ATS7（内部侦听端口8080）  
127.0.0.1:8006:ATS6（内部侦听端口8080），大多数示例将使用ATS7，但是可以使用该端口而不是其他端口（并更改域）来测试该旧版本。
我们将链接一些反向代理关系，Nginx将是最终的后端，HaProxy是前端负载平衡器，并且在Nginx和HaProxy之间，我们将根据使用的域名通过ATS6或ATS7（对于ATS7和dummy-host7.example.com， 适用于ATS6的dummy-host6.example.com）
请注意，ATS和Nginx实例的本地主机端口映射不是直接需要的，如果可以向Haproxy注入请求，它将通过ATS之一的端口8080和Nginx的端口在内部到达Nginx。
但是，如果想直接定位到其中一台服务器可能会很有用，并且在大多数示例中，我们都必须避免使用HaProxy部分，因为大多数攻击都会被此负载均衡器阻止。
因此，大多数示例都将首先直接针对ATS7服务器，即8007。之后，我们可以尝试确定针对8001的目标，这将更加困难。
    +---[80]---+
                           | 8001->80 |
                           |  HaProxy |
                           |          |
                           +--+---+---+
    [dummy-host6.example.com] |   | [dummy-host7.example.com]
                      +-------+   +------+
                      |                  |
                  +-[8080]-----+     +-[8080]-----+
                  | 8006->8080 |     | 8007->8080 |
                  |  ATS6      |     |  ATS7      |
                  |            |     |            |
                  +-----+------+     +----+-------+
                        |               |
                        +-------+-------+
                                |
                           +--[80]----+
                           | 8002->80 |
                           |  Nginx   |
                           |          |
                           +----------+
为了构建这个集群，我们将使用docker-compose，您可以在这里找到docker-compose.yml文件，但是内容很短：
    version: '3'
    services:
      haproxy:
        image: haproxy:1.6
        build:
          context: .
          dockerfile: Dockerfile-haproxy
        expose:
          - 80
        ports:
          - "8001:80"
        links:
          - ats7:linkedats7.net
          - ats6:linkedats6.net
        depends_on:
          - ats7
          - ats6
      ats7:
        image: centos:7
        build:
          context: .
          dockerfile: Dockerfile-ats7
        expose:
          - 8080
        ports:
          - "8007:8080"
        depends_on:
          - nginx
        links:
          - nginx:linkednginx.net
      ats6:
        image: centos:7
        build:
          context: .
          dockerfile: Dockerfile-ats6
        expose:
          - 8080
        ports:
          - "8006:8080"
        depends_on:
          - nginx
        links:
          - nginx:linkednginx.net
      nginx:
        image: nginx:latest
        build:
          context: .
          dockerfile: Dockerfile-nginx
        expose:
          - 80
        ports:
          - "8002:80"
我们需要以下四个Dockerfiles：
  * [Docker-haproxy: an HaProxy Dockerfile, with the right conf](https://regilero.github.io/theme/resource/ats/Dockerfile-haproxy)
  * [Docker-nginx: A very simple Nginx Dockerfile with one index.html page](https://regilero.github.io/theme/resource/ats/Dockerfile-nginx)
  * [Docker-ats7: An ATS 7.1.1 compiled from archive Dockerfile](https://regilero.github.io/theme/resource/ats/Dockerfile-ats7)
  * [Docker-ats6: An ATS 6.2.2 compiled from archive Dockerfile](https://regilero.github.io/theme/resource/ats/Dockerfile-ats6)
将所有这些文件（docker-compose.yml和Dockerfile- *文件）放入工作目录并在此目录中运行：
`docker-compose build && docker-compose up`
现在可以休息一会儿，正在启动两个ATS编译。 希望下一次升级就足够了，甚至构建可能也不会重做编译步骤。
如果需要，我们可以轻松地在集群上添加另一个ats7固定的元素，以测试ATS的固定版本。 目前，我们将专注于检测有缺陷版本中的问题。
### 测试一切正常
我们将在此安装上运行基本的非攻击性查询，以检查一切是否正常，并以运行查询的`printf + netcat`方式进行培训。
我们不会使用curl或wget来运行HTTP查询，因为这将无法编写错误的查询。
因此，我们需要使用低级字符串操作（例如，使用printf）和套接字处理（使用netcat-或nc-）。
测试Nginx：
    printf 'GET / HTTP/1.1\r\n'\
    'Host:dummy-host7.example.com\r\n'\
    '\r\n'\
    | nc 127.0.0.1 8002
我们得到index.html响应，例如：
    HTTP/1.1 200 OK
    Server: nginx/1.15.5
    Date: Fri, 26 Oct 2018 15:28:20 GMT
    Content-Type: text/html
    Content-Length: 120
    Last-Modified: Fri, 26 Oct 2018 14:16:28 GMT
    Connection: keep-alive
    ETag: "5bd321bc-78"
    X-Location-echo: /
    X-Default-VH: 0
    Cache-Control: public, max-age=300
    Accept-Ranges: bytes
    $Nginx default static page
    Hello World
    It works!
然后测试ATS7和ATS6：
    printf 'GET / HTTP/1.1\r\n'\
    'Host:dummy-host7.example.com\r\n'\
    '\r\n'\
    | nc 127.0.0.1 8007
    printf 'GET / HTTP/1.1\r\n'\
    'Host:dummy-host6.example.com\r\n'\
    '\r\n'\
    | nc 127.0.0.1 8006
然后测试HaProxy，更改主机名应通过ATS7或ATS6进行传输（检查Server:标头响应）：
    printf 'GET / HTTP/1.1\r\n'\
    'Host:dummy-host7.example.com\r\n'\
    '\r\n'\
    | nc 127.0.0.1 8001
    printf 'GET / HTTP/1.1\r\n'\
    'Host:dummy-host6.example.com\r\n'\
    '\r\n'\
    | nc 127.0.0.1 8001
现在让我们开始一个更复杂的HTTP内容，我们将创建一个HTTP管道，通过管道传输多个查询并接收多个响应，因为管道传输是大多数smuggling攻击的根源：
    # send one pipelined chain of queries
    printf 'GET /?cache=1 HTTP/1.1\r\n'\
    'Host:dummy-host7.example.com\r\n'\
    '\r\n'\
    'GET /?cache=2 HTTP/1.1\r\n'\
    'Host:dummy-host7.example.com\r\n'\
    '\r\n'\
    'GET /?cache=3 HTTP/1.1\r\n'\
    'Host:dummy-host6.example.com\r\n'\
    '\r\n'\
    'GET /?cache=4 HTTP/1.1\r\n'\
    'Host:dummy-host6.example.com\r\n'\
    '\r\n'\
    | nc 127.0.0.1 8001
这是流水线，它不仅使用`HTTP keepAlive`，因为我们发送查询链而无需等待响应。
如果不旋转查询中的某些参数，则应该在docker-compose输出上获取Nginx访问日志，因为您的请求不会到达nginx的查询，因为ATS已经在缓存结果（在docker-compose输出上为CTRL