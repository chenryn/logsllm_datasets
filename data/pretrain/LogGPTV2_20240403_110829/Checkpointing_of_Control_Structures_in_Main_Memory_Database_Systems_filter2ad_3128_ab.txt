### System Initialization and Control Structure Management

- **Initialization Process**: After the system initializes, the database server sends a complete image of all control structures to the image keeper. 
- **Client/Service Operations**: During subsequent operations, a client or service acquires a mutex before performing any actions on the control structures. Any changes made during write operations are temporarily stored in a local buffer.
- **Buffered Updates**: Once all updates are successfully completed, the mutex is released, and the buffered changes are sent to the image keeper. This ensures that the checkpoint of the control structures remains up-to-date.

### Handling Crashes

- **Crash Recovery**: If a crash occurs while the mutex is held, the cleanup service requests the latest checkpoint data from the image keeper to restore the corrupted control structures.

### Handling Mutex Overlaps

- **Multiple Mutexes**: In scenarios where a single section of control structures is protected by multiple mutexes, the image keeper maintains a mapping between each mutex and the corresponding data sections it protects. This mapping is updated with the checkpoint increments, which include the mutex ID and necessary information to identify the correct sections.
- **Mapping Example**: Figure 3 illustrates an example configuration of control structure images and the mapping of mutexes to these structures. This ensures that even when multiple mutexes are acquired simultaneously, the consistency of the control structures is maintained.

### Data Access Without Mutex Protection

- **Direct Updates**: The algorithm assumes that all updates to control structures are performed within mutex blocks. However, there are cases where control structures are updated directly without mutex protection, such as during database initialization. 
- **Challenges**: Handling such scenarios requires identifying all places in the application code where updates occur outside mutex blocks and augmenting the implementation to ensure the checkpoint in the image keeper is up-to-date. This can be challenging due to the size and complexity of real-world applications.

### Delta Checkpointing

- **Assumption**: In a correctly implemented system, any access to control structures outside mutex blocks after initialization does not violate data consistency. Thus, crashes outside mutex blocks do not cause data inconsistency, and sections not updated by any currently executing mutex block remain consistent.
- **Algorithm Steps**:
  1. **Mutex Acquisition**: When a client or service acquires a mutex, it sends a delta (a before-image) to the image keeper. The delta's content depends on the update to be performed.
  2. **Crash Recovery**: Upon a crash while the mutex is held, the cleanup service sends the base (the entire image of the related structures) to the image keeper. The image keeper merges the base with the saved delta to generate the original control structures image and sends it back for recovery.

### Comparison of Incremental and Delta Checkpointing

| **Incremental Checkpointing** | **Delta Checkpointing** |
|--------------------------------|-------------------------|
| **At Start Time**: An image of all control structures is stored as an initial checkpoint. | **At Start Time**: An initial checkpoint is an empty data set, i.e., no need to store any control structures. |
| **At Runtime**: A post-transaction state of the control structures accessed by each write transaction is collected and merged with the current checkpoint. | **At Runtime**: A pre-transaction state of the control structures accessed by a given transaction (write or read-only) is preserved as a current (delta) checkpoint. |
| **At Recovery Time**: The checkpointed image of control structures is directly loaded to the shared memory from the image keeper. | **At Recovery Time**: The image of control structures from the shared memory is merged with the latest delta stored in the image keeper. |
| **Checkpointing**: Must checkpoint data updates due to operations within and outside mutex blocks. | **Checkpointing**: Must checkpoint only updates due to operations within mutex blocks. |

### Image Keeper

- **Functionality**: The image keeper is a separate component within the ARMOR process that collects and maintains checkpoint data representing the correct state of control structures. It is passive, responding only to incoming messages and performing actions based on those messages.
- **Structure**: The image keeper consists of a set of memory blocks for preserving control structure images and a manager for updating checkpoints and handling recovery actions. It communicates with the database processes via the ARMOR communication channel.

### Performance Evaluation

- **Testbed**: The performance measurements were conducted on a Sun Blade 100 workstation running Solaris 8, with a 500MHz UltraSPARC-II CPU and 128MB of memory.
- **Scenarios**: The tests included error-free scenarios mimicking normal database activity and error-recovery scenarios simulating database recovery after a failure.
- **Workload Parameters**:
  - **Transaction Frequency (freq)**: Number of transactions arriving per second.
  - **Number of Mutex Acquisitions per Transaction (num_acq)**: Number of times the mutex is acquired in each transaction.
  - **Percentage of Read-Only Operations (read_per)**: Fraction of mutex acquisitions for read-only operations.
  - **Mutex Operation Time (mutex_op)**: Processing time while holding the mutex.
  - **Mutex-Free Operation Time (other_op)**: Processing time for mutex-free operations within the transaction.
  - **Delivered Data**: Amount of checkpointed data (assumed to be 4000 bytes).
  - **Experiment Duration**: Time duration of the experiment.
- **Results**: Table 2 shows the transaction time for different frequencies and read-only percentages, and Table 3 depicts the performance overhead of checkpointing per transaction.

### Conclusion

The proposed incremental and delta checkpointing algorithms provide robust mechanisms for maintaining the consistency of control structures in a database system. The delta checkpointing approach, in particular, offers a more efficient way to handle updates and recover from failures, especially in complex, real-world applications.