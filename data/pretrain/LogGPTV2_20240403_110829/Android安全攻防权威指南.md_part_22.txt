注意还可以使用Androguard 中的androaxml.py 工具，执行一条命令即可获取Android
Manifest.xml文件中的数据。
---
## Page 95
4.2案例分析：移动安全应用79
在AndroidManifest 文件中，有—个特意为 com.yougetitback.androidapplication.
SmsIntentReceiver 类定义的Receiver XML元素。其中包含一个Intent过滤器的 XML元素，
显式地指定了Android:priority元素的值为999,并接收从android.provider.Telephony
类发来的SMS_RECEIVED动作。通过指定这一优先值，目标应用可以确保首先获得
SMS_RECEIVED广播消息，从面在默认短信应用之前访问到短信内容。
对SmsIntentReceiver类调用get_methods方法，可以查看到该类有哪些可用的方法。
接着我们快速写一个Python的for循环，对每个返回方法调用 show_info函数：
In [178] : for meth in d.CLASS_Lcom_yougetitback_androidapplication_
SnsIntentReceiver,get_methods ()  :
neth.show_info ()
#********* Method Information
Lcon/yougetitback/androidapp1ication/SmsIntentReceiver; => ()V
++++*#+#+* MethodInformation
[access_flags=public constructor]
Lcom/youget.itback/androidapp1ication/SmsIntentReceiver:-
>foregrounduI (Landroid/content/Context;)v [access_flags=private]
Lcom/yougetitback/androidapplicat.Lon/SmsIntentReceiver: -
##+#s#e## Method Information
>getAction (Ljava/1ang/String;)Ljava/lang/String; [access_flag8=private]
$###esaese Method Information
Lcom/yougeti tback/androidapplication/SmsIntentReceiver:-
>getMessagesFromIntent (Landroid/content/Intent:)
[Landroid/telephony/SmsMes8age; [access_flags=private]
Lcom/yougetitback/androidapp1ication/SmeIntentReceiver: -
>processBackupMsg (Landroid/content/Context:
Ljava/uti1/Vector;)v [access_flags=private]
#********+ Method Information
Lcom/yougetitback/androidapplication/SmsIntentReceiver; ->onReceive
(Landroid/content/Context; Landroid/content/Intent;)V [access_flags=public]
对于Broadcast Receiver面言，onReceive方法是其人口点，因此你可以查看这个方法的交
叉引用（简称为xrefs），从这一方法获得控制流图的概貌。首先使用d.creat_xref来创建交叉
引用，然后调用onReceive 方法对应对象的 show_xref 函数。
In [206] : d.create_xref()
In [207] : d.CLAss_Lcom_yougetitback_androidapplication_SmsIntentReceiver
METHOD_onReceive sbow_xref ()
T: Lcom/youget:itback/androidGapp1ication/SmsIntentReceiver;
+*++**++++ XREF
LaValidessage (Ljava/lang/String: Landroid/content/Context;)z 6ce
T: Lcom/yougetitback/androidapp1ication/SmsIntentReceiver;
processContent (Landroid/content/Context; Ljava/lang/String:)V 78
T: Lcom/yougetitback/androidapp1ication/SmsIntentReceiver;
triggerAppLaunch (Landroid/content/Context : Landroid/telephony/SmsMessage:)
T: Lcom/yougetitback/androidapplication/SmsIntentReceiver;
V9a
---
## Page 96
80
第4章云计算的安全风险
getMessagesFromIntent (Landroid/content/Intent; )
[Landroid/telephony/SmsMessage; 2a
T: Lcom/yougetitback/andro1dapp1Lication/SmsIntentReceiver ; isPinLock
(Ljava/lang/String: Landroid/content/Context:)Z 8a
可以看到onReceive方法调用了其他一些方法，包括一些看起来像是在验证短信与解析内
容的方法。下面对这些方法进行反编译分析，从getMessagesFromIntent开始：
In [2131 : d. CLAss_Lcom_yougetitback_androidapplLcation_SmsIntentReceiver .
METH0D_getMessagesFromIntent.source ()
getMessagesFromIntent (android.content , Intent p9)
private android. telephony-SmsMessege[]
v6 = 0;
v0 = p9.getBxtras ():
if (v0 1= 0) {
（npd,）A= 
v5 = new android.telephony.SmsMessage[v4 .1ength] :
whi1e (v3  0))(
v2 = this [v1] -getDisplayMessageBody(1 :
android.uti1.Log .i(*MessageListener:*, v2):
this. LsValidMessage (v2, p8) :
if (this == 0) (
this.isPinLock(v2, p8):
if (this 1= 0) (
this.triggerAppLauneh (p8, this[v1]);
this abortBroadcast ():
}else {
1
this.processContent (p8, v2) :
this.abortBroadcast () :
假设你想构造能被这一应用处理的有效短信消息，你很可能需要仔细查看isValidMessage
函数，该函数通过getDisplayMessageBody从短信消息中获取到一个字符串以及当前应用的
上下文。对isValidMessage函数进行反编译，可以让你更深人地了解该应用的行为：
private boolean LsValLdMessage (String pl2, android.content,Context p13)
v5 = p13.getString (1.82104701918e+38):
v0 = p13.getString (1.821047222e+38):
v4 = p13.getstring
(1.82104742483e+38):
v3 = p13.getString (1.82104762765e+38):
v7 = p13.getString (1.82104783048e+38):
v1 = p13.getString (1.8210480333e+38);
v6 = p13.getString (1.82104864177e+38):
v2 = p13.getString
(1.82104823612e+38) :
this.getAction (p12);
v8 = p13.getString (1.82104843895e+38):
If((this.equals (v5)
（0 ==(A)senBe*sa）)
)== 0) && ((this.equals (v4) == 0) &6
((this.equals (v0)
)== 0) 4s ((this.equal8(v7) = 0) s6
((this.equals(v6) == 0) && ((this,equals (v2) s= 0) &
((this.equals(v8) == 0) && (this.equals (v1) == 0))))))))) (
v10 = 0;
}else {
v10 = 1:
return v10;
可以看到应用当前上下文对象getString函数的许多次调用，这将从应用的字符串列表中
（如那些存放在values/strings.xml中的），根据给定资源ID获取文本字符串的值。值得注意的是，
传递给getString的资源ID看起来有些奇怪，这是一些反编译器类型传播存在的问题，你可
能会随时遇到。这一方法从字符串列表中获取到这些字符串后，会将它们与p12中的字符串进
---
## Page 98
82第4章云计算的安全风险
行比较，如果pl2被匹配到，方法将返回1，否则将返回0。回到OnReceive方法，这个结果
会用来决定isPinLock 是否被调用，以及processContent 是否被调用。我们先来看下
isPinLock函数。
In [173] : d.CLASS_Lcom_yougetitback_androidapplication_SmsIntentReceiver,
METHoD_isPinLock,source ()
private boolean isPinLock (String p6, android.content,Context p7)
v2 = 0;
v0 = p7 .getSharedPreferences (*SuperheroPrefsFile*, 0) getString
(“pin*,
if ((v0.compareTo(**) 1= 0) && (p6.compareTo(v0) == 0)) (
**] ;
v2 = 1;
return v2;
共享配置文件在这里又出现了。这个简短的函数调用了getString来获取
SuperheroPrefsFile文件中pin条目的值，然后与p6 中的值进行对比，返回比较结果的true或
false。如果比较结果为true，则onReceive调用triggerAppLaunch。对这个函数的反编
译可以让你进一步理解整个流程。
private void triggerAppLaunch(android.content,Context p9,
android.telephony .SmsMessage p10)
this.currentContext - p9:
v4 = p9 .getSharedPreferences (*SuperheroPrefsFi1e*, 0) :
if (v4.getBoolean(*Activated*, 0) 1= 0)(
v1.putBoolean(*1ockState*, 1):
v1 = v4.edit() :
v1 -putBoolean(*smspinlock*, 1) ;
this. foregrounduz (p9):
v1.commit() :
v0 = p10.get0riginatingAddress():
andzoidapp1ication.FOREGROUND*) :
v2 = new android.content.Intent (*com-yougetitback
v2.setClass (p9, com.yougetitback.androidapplication
FindLocationService):
v2.putExtra(*LockSmsOriginator*, v0):
p9.startService (v2) 1
v3 = new android.content.Intent (*com.yougetitback.
this,startsiren (p9) ;
androidapp1icationn.FORBGROUND*) 1
v3.setClass(this.currentContext, com.yougetitback.
androidapplication.LockAcknowledgeService) :
this,currentContext startService(v3) :
}
在这里，对SuperheroPrefsFile文件进行了一些编辑：为一些键值设置某些布尔值，指明屏
幕是否锁定，以及是否通过短信进行锁屏。最终，创建了一些新的Intent，来启动应用的