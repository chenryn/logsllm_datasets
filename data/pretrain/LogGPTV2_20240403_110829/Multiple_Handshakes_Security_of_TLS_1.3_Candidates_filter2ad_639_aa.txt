# Title: Multiple Handshakes Security of TLS 1.3 Candidates

# Authors
Xinyu Li<sup>∗†</sup>, Jing Xu<sup>∗</sup>, Zhenfeng Zhang<sup>∗</sup>, Dengguo Feng<sup>∗</sup>, Honggang Hu<sup>†</sup>

- <sup>∗</sup>Trusted Computing and Information Assurance Laboratory, SKLCS, Institute of Software, Chinese Academy of Sciences, Beijing, China
- <sup>†</sup>CAS Key Laboratory of Electromagnetic Space Information, University of Science and Technology of China, Hefei, China
- Email: {lixinyu, xujing, zfzhang, feng}@tca.iscas.ac.cn, PI:EMAIL

## Abstract
The Transport Layer Security (TLS) protocol is the most widely deployed protocol for securing communications. The Internet Engineering Task Force (IETF) is currently developing TLS 1.3 as the next-generation TLS protocol. TLS features multiple modes of handshake protocols and supports various combinations of successive TLS handshakes over multiple connections. Although each handshake mode is well-understood in isolation, their composition in TLS 1.2 remains problematic, which is critical for practical security guarantees.

In this paper, we present the first formal treatment of multiple handshake protocols in TLS 1.3 candidates. We introduce a multi-level&stage security model, an adaptation of the Bellare-Rogaway authenticated key exchange model, covering all kinds of compositional interactions between different TLS handshake modes and providing strong security guarantees. We prove that candidate handshakes of TLS 1.3 draft meet our strong notion of multiple handshakes security. Our results confirm the soundness of TLS 1.3's security design. This multi-level&stage approach is convenient for analyzing the compositional design of the candidates with different session modes, as they establish dependencies across multiple sessions.

We also identify the triple handshake attack on TLS 1.2 within our multiple handshakes security model and show that the proposed fixes (RFC 7627) for TLS 1.2 offer good protection against such attacks.

## 1. Introduction
TLS [1][2] is the most widely used cryptographic protocol for secure communications between a client and a server. As the successor to the SSL protocol, TLS now provides secure communications for a variety of applications, including web browsers, electronic mail, and VPNs. TLS consists of two main components: the TLS handshake protocol, which allows a client and a server to authenticate each other and agree on security parameters and a session key, and the TLS record protocol, which provides a secure channel for application data. Despite its fundamental role in internet security, TLS has been subject to frequent successful attacks, such as the RC4 weakness [3], the Lucky 13 attack [4], the triple handshake attack [5], and the Heartbleed attack [6]. These have been addressed with occasional and ad-hoc "patches."

Partly due to these security weaknesses and additional performance requirements like low handshake latency, the IETF is developing TLS version 1.3. As of November 2015, the draft candidate under discussion is draft-ietf-tls-tls13-10 [7]. Unlike previous versions, the standardization process for TLS 1.3 is fully transparent, allowing for comprehensive cryptographic analysis before adoption.

In addition to updates, TLS 1.3 includes several cryptographic changes:
1. Removal of the renegotiation protocol.
2. Provision of a 0-RTT option, where clients can send protected information in the first message flow if they have a previously retrieved or cached public key of the server, reducing handshake latency.
3. Encryption of some handshake data, such as the client certificate, with an intermediate session key.
4. Inclusion of hashes of handshake messages in various key calculations.
5. Use of a different key to encrypt the final Finished messages than is used for application data.

Both TLS 1.3 and earlier versions feature dependencies in multiple runs of the handshake protocols. For example, in TLS 1.3, a client connection may first run a full handshake, then a second 0-RTT session using a ServerConfiguration message from the full handshake, and finally a third resumption handshake, reusing the resumption master secret from the 0-RTT to derive new keys. Despite each mode in TLS 1.2 being independently proven secure, their composition has led to several practical attacks. In 2009, Ray and Dispensa [8] demonstrated how TLS renegotiation could allow an attacker to inject traffic into a legitimate client-server exchange. The IETF TLS working group provided countermeasures, but these did not prevent the triple handshake attack by Bhargavan et al. [5] in 2014, which exploited the unexpected composition of three handshake modes.

These attacks highlight the need to model multiple related sessions of handshake protocols. Therefore, compositional security in TLS handshake protocols is critical for practical security, especially for TLS 1.3. This contrasts with prior work on the provable security of TLS, which focused on a fixed run of the protocol.

## 1.1 Related Work
Given the importance of TLS, formal understanding of its security is a crucial goal in cryptography. However, progress on formally modeling the security of TLS handshake protocols has been slow. A major obstacle is that the design of TLS 1.2 and earlier versions violates basic cryptographic principles of key indistinguishability in standard authenticated key exchange (AKE) models. Specifically, the final handshake Finished message in TLS 1.2 is encrypted under the session key, allowing an adversary to distinguish the session key from a random key by trying to verify the Finished message. Thus, it is impossible to prove the security of the TLS 1.2 handshake protocol in any classic AKE model.

In 2012, Jager et al. [11] introduced a new security notion called Authenticated and Confidential Channel Establishment (ACCE), which captures the desired security guarantees when the TLS handshake and record protocols are combined. They provided the first full security proof of unmodified TLS-DHE in the ACCE model. Subsequent efforts have shown that most other TLS handshake protocols are also ACCE secure. Kohlar et al. [12] studied the ACCE security of TLS-RSA with an IND-CCA secure key transport encryption scheme. Krawczyk et al. [13] used a key-encapsulation mechanism (KEM) abstraction for the cryptographic core of TLS, providing the first proof of security for TLS-RSA and server-only authentication without assuming IND-CCA security for RSA PKCS#1v1.5. Giesen et al. [14] extended the ACCE model to analyze the renegotiation security of TLS, while Li et al. [15] extended the ACCE model to cover protocols with pre-shared keys and proved the security of TLS-PSK ciphersuites.

In 2014, Bhargavan et al. [16] gave a comprehensive analysis of the TLS 1.2 handshake protocol in the agile setting, covering various ciphersuite options and applying the results to a miTLS implementation [17][18]. This work overcame the issue of the session key being used in the final part of the handshake protocol by introducing a method to release the record layer key early. Recently, Dowling et al. [19] showed that both draft-05 [20] and draft-dh [21] of TLS 1.3 handshake protocols are secure under the modified multi-stage key exchange model by Fischlin and Günther [22]. They treated session resumption in TLS 1.3 drafts as a separate symmetric-key protocol and showed that the resumption master secrets output by the full handshake can be safely composed with session resumption under certain conditions. However, they omitted the security analysis of 0-RTT, which was not specified until TLS 1.3 draft-07 [23].

Concurrently, Krawczyk et al. [24] presented OPTLS, a key exchange protocol serving as a basis for analyzing the handshake protocol of TLS 1.3 draft, and analyzed its four primary modes under the Canetti-Krawczyk model [25]. Although they considered the security of 0-RTT, their work focused on server authentication and did not analyze the interactions between different protocol modes. TLS 1.3 borrows from a similar mechanism, QUIC [26], for supporting 0-RTT. Fischlin and Günther [22] analyzed the key exchange of QUIC 0-RTT and showed that QUIC satisfies reasonable multi-stage security. Lychev et al. [27] provided a provable-security analysis for the complete QUIC under the modified ACCE model, treating HMAC as a random oracle, and gave a quantitative analysis of QUIC's performance under adversarial settings.

However, previous security results on TLS focus on analyzing each handshake mode in isolation or partial compositions, which is insufficient for a complex TLS specification. In practice, TLS also supports many combinational runs of successive TLS handshakes over multiple connections, leaving a gap between single-handshake security results and real-world security.

## 1.2 Our Contributions
While we have a good understanding of the security of each mode in TLS handshake protocols executed in isolation, there are no rigorously defined guarantees for their interaction. Our work fills this gap by defining a rich model for multiple handshake protocols, covering all kinds of compositional interactions between different TLS handshake modes and providing strong security guarantees. Our starting point is the Bellare-Rogaway model [28], which is flexible enough to capture many key exchange protocols.

To cover the various modes of TLS multiple handshakes, we introduce a Multi-Level&Stage security model. Each node in some level corresponds to a handshake session, and each session can have multiple stages. A multiple handshakes protocol running is represented by the nodes on the path from the root level to the leaf level. On this path, the session in some level is dependent on the session in its last level, and one session may cache and use the key materials established or transmitted during its last level session.

A primary difference with the single handshake case lies in the dependencies of the different levels. Specifically, the property of level key dependence is considered, meaning the session key in some stage of level i is used to derive the session key of level i + 1. Thus, we cannot allow the adversary to reveal the corresponding session key of level i before the key of the next level is established. Additionally, we define match security by introducing collision-freeness of session identifiers across different handshake modes and levels. To capture attacks similar to the triple handshake attack, we explicitly treat the property that sessions with different session identifiers have different session keys in the security definition, which was not included in [22] and [19].

Another important point is the introduction of semi-static keys, which lie between ephemeral and static keys. In TLS 1.3 draft, in a 0-RTT handshake mode, the server provides a ServerConfiguration message containing the semi-static key gs associated with a unique Configuration id. This allows the client to use that share to send early application data on future connections to the same server. Our model allows the adversary to learn gs and the secret s through a Corrupt query, with the restriction that only after the handshake is finished. To cover various authenticity properties of handshake protocols, we also include additional definitions.