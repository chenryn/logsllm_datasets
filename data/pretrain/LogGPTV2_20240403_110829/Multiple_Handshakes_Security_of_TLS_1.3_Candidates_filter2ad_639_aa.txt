title:Multiple Handshakes Security of TLS 1.3 Candidates
author:Xinyu Li and
Jing Xu and
Zhenfeng Zhang and
Dengguo Feng and
Honggang Hu
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
Multiple Handshakes Security
of TLS 1.3 Candidates
Xinyu Li∗†, Jing Xu∗, Zhenfeng Zhang∗, Dengguo Feng∗, Honggang Hu†
∗Trusted Computing and Information Assurance Laboratory, SKLCS,
Institute of Software, Chinese Academy of Sciences, Beijing, China
†CAS Key Laboratory of Electromagnetic Space Information,
University of Science and Technology of China, Hefei, China
Email: {lixinyu, xujing, zfzhang, feng}@tca.iscas.ac.cn, PI:EMAIL
Abstract—The Transport Layer Security (TLS) protocol is by
far the most widely deployed protocol for securing communica-
tions and the Internet Engineering Task Force (IETF) is currently
developing TLS 1.3 as the next-generation TLS protocol. The
TLS standard features multiple modes of handshake protocols
and supports many combinational running of successive TLS
handshakes over multiple connections. Although each handshake
mode is now well-understood in isolation, their composition in
TLS 1.2 remains problematic, and yet it is critical to obtain
practical security guarantees for TLS.
In this paper, we present the ﬁrst formal treatment of multiple
handshakes protocols of TLS 1.3 candidates. First, we introduce
a multi-level&stage security model, an adaptation of the Bellare-
Rogaway authenticated key exchange model, covering all kinds
of compositional interactions between different TLS handshake
modes and providing reasonably strong security guarantees. Next,
we prove that candidate handshakes of TLS 1.3 draft meet
our strong notion of multiple handshakes security. Our results
conﬁrm the soundness of TLS 1.3 security protection design.
Such a multi-level&stage approach is convenient for analyzing
the compositional design of the candidates with different session
modes, as they establish dependencies of multiple sessions.
We also identify the triple handshake attack of Bhargavan et
al. on TLS 1.2 within our multiple handshakes security model.
We show generically that the proposed ﬁxes (RFC 7627) for TLS
1.2 offer good protection against multiple handshakes attacks.
I. INTRODUCTION
TLS [1][2] is the Internet’s most widely used cryptographic
protocol to provide secure communications between a client
and a server. As the successor of SSL protocol, TLS now
is a general provider of secure communications to a variety
of applications such as web browsers, electronic mail, VPN
and more. TLS has two main constituents: the TLS handshake
protocol, which allows a client and a server to authenticate
each other and to agree on security parameters and a session
key, and the TLS record protocol, which provides a secure
channel for communication of application data. In spite of
its fundamental role in the Internet security infrastructure,
we have witnessed frequent successful attacks against TLS,
such as the weakness in RC4 [3], the Lucky 13 attack [4],
the triple handshake attack [5], and the Heartbleed attack
[6], which have been addressed with occasional and ad-hoc
“patches”. Partly due to these security weaknesses, but also
Jing Xu and Zhenfeng Zhang are the corresponding authors.
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Xinyu Li. Under license to IEEE.
DOI 10.1109/SP.2016.36
DOI 10.1109/SP.2016.36
486
486
because of additional performance requirements such as low
handshake latency, the Internet Engineering Task Force (IETF)
is currently developing the next version of the TLS, named
TLS version 1.3. As of November 2015, the draft candidate in
discussion is draft-ietf-tls-tls13-10 [7]. Different from previous
TLS versions, the standardization process of TLS 1.3 is fully
transparent, which makes its comprehensive cryptographic
analysis feasible prior to adoption.
In addition to the updated version, the protocol design in
TLS 1.3 draft includes several cryptographic changes that are
substantially different from TLS 1.2, including: (1) removing
renegotiation protocol; (2) providing 0-RTT option, in which
clients can send protected information on the ﬁrst message
ﬂow in case that the client has a previously retrieved or cached
public key of the server, thus reducing handshake latency; (3)
encrypting some handshake data such as the client certiﬁcate
with an intermediated session key; (4) including hashes of
handshake messages in a variety of key calculations; (5) using
a different key to encrypt the ﬁnal Finished messages than is
used to encrypt the application data.
For both TLS 1.3 draft and its earlier versions, TLS features
dependencies of multiple runs of the handshake protocols.
For instance,
in TLS 1.3 draft, a client connection may
ﬁrstly run a full handshake, then run a second 0-RTT session
using a ServerConﬁguration message transmitted in the full
handshake, ﬁnally using a parallel connection, the client may
run a third resumption handshake, re-using the resumption
master secret of 0-RTT to derive new keys. Also note that
despite each mode in TLS 1.2 handshake protocols is now
independently proven secure, their composition has been the
cause of several practical attacks on TLS. In 2009, Ray and
Dispensa [8] demonstrated how TLS renegotiation allows an
attacker to inject trafﬁc into a legitimate client-server exchange
such that the TLS server will accept it as if it came from
the honest client. Subsequently, the IETF TLS working group
provided countermeasures to link the renegotiation handshake
with its preceding epoch and developed RFC 5746 [9] as a
mandatory extension for all versions of TLS. However, this
guarantee does not carry over to link different connections
that resume the original session, and in 2014, Bhargavan et al.
[5] presented a triple handshake attack on TLS 1.2 exploiting
the unexpected composition of triple modes of the hand-
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
shake protocols. Concretely, the malicious server performs
a man-in-the-middle attack on three successive handshakes
(full handshake, resumption and renegotiation) between the
honest client and server, and succeeds in impersonating the
client on the third handshake. Their attacks can be mounted
on popular web browsers, VPN applications, and HTTPS
libraries, and a number of vendors,
including the major
browser vendors Apple, Google and Microsoft, which have
implemented a patch or some mitigation. Recently, Bhargavan
et al. [10] uncovered new compound authentication attacks on
TLS renegotiation, SSH re-exchange, IKEv2 resumption, and
a number of other channel binding proposals. These attacks
stress the need to model multiple related sessions of handshake
protocols. Therefore, compositional security in TLS handshake
protocols is critical to obtain practical security guarantees for
TLS, especially for the upcoming TLS 1.3 though no similar
ﬂaw has been announced up to now. This is in sharp contrast
with prior work on the provable security of TLS, which focus
on a ﬁxed run of the protocol.
A. Related Work
Given the paramount importance of TLS, formal under-
standing of its security is an important goal of cryptography.
However, the progress on formally modeling the security of
TLS handshake protocols has been slow. A main obstacle
is that the design of TLS 1.2 and earlier versions violates
the basic cryptographic principles of key indistinguishability
in standard authenticated key exchange (AKE) models. More
precisely, the ﬁnal handshake Finished message of TLS 1.2
protocol is encrypted under the session key, so an adversary
can distinguish the session key from a random key by trying
to verify the Finished message. Therefore, it is impossible
to prove security of the TLS 1.2 handshake protocol in any
classic AKE model. In 2012, Jager et al. [11] put forth a
new security notion, called Authenticated and Conﬁdential
Channel Establishment (ACCE), which captures the desired
security guarantees when the TLS handshake protocol and
record protocol are combined together, and then they gave
the ﬁrst full security proof of unmodiﬁed TLS-DHE in ACCE
model.
Subsequent efforts have shown that most other TLS hand-
shake protocols are also ACCE secure. Kohlar et al. [12]
studied the ACCE security of TLS-RSA when instantiated
with an IND-CCA secure key transport encryption scheme.
Krawczyk et al. [13] used a key-encapsulation mechanism
(KEM) abstraction for the cryptographic core of TLS, and
gave the ﬁrst proof of security of TLS-RSA and server-only
authentication, without having to assume IND-CCA security
for RSA PKCS#1v1.5. Giesen et al. [14] extended the ACCE
model to analyze the renegotiation security of TLS in light
of the attack of Ray and Dispensa [8], while Li et al. [15]
extended the ACCE model to cover protocols with pre-shared
keys, and proved the security of TLS-PSK ciphersuites.
In 2014, Bhargavan et al. [16] gave a comprehensive analy-
sis of TLS 1.2 handshake protocol in the agile setting, covering
the various ciphersuite options in TLS 1.2, and applying the
results to a miTLS implementation [17][18]. This work can
overcome the issue that the session key is already used in the
ﬁnal part of the handshake protocol at the cost of introducing
a cunning approach to release the record layer key early.
Recently, Dowling et al. [19] showed that both of the two
earlier candidates of TLS 1.3 handshake protocol, draft-05 [20]
and draft-dh [21], are proven secure under the modiﬁed multi-
stage key exchange model introduced by Fischlin and G¨unther
[22]. In addition, the authors treated session resumption in TLS
1.3 drafts as a separate symmetric-key protocol and showed
that the resumption master secrets output by the full handshake
can be safely composed with the session resumption by
using the compositional approach under certain conditions, and
further made some comments on the TLS 1.3 design. However,
they omitted the security analysis of 0-RTT which has not been
speciﬁed until TLS 1.3 draft-07 [23].
Concurrently to our work, Krawczyk et al. [24] presented
OPTLS, a key exchange protocol, serving as a basis for
analyzing handshake protocol of TLS 1.3 draft, and also
presented an analysis of its four primary modes which can
be applied to TLS 1.3 under Canetti-Krawczyk model [25].
Although the security of 0-RTT was considered, their work
focused on server authentication only and did not analyze the
interactions between the different protocol modes.
TLS 1.3 borrows from a similar mechanism namely QUIC
[26] for supporting the 0-RTT case, and thus we can refer
to the analysis of QUIC. Fischlin and G¨unther [22] analyzed
the key exchange of QUIC 0-RTT, and showed that QUIC
satisﬁes a reasonable multi-stage security, however, for the
desirable security of the composition with data exchange
protocol, QUIC has to be slightly modiﬁed. In parallel with
their work, Lychev et al. [27] provided a provable-security
analysis for the complete QUIC under the modiﬁed ACCE
model with treating HMAC as the random oracle, and they
also gave a quantitative analysis of the performance properties
of QUIC under adversarial settings.
However, previous security results on TLS focus on analyz-
ing either each handshake mode in isolation, or partial com-
position such as full handshake and renegotiation [14] only,
which is not enough to comprehensively analyzing a complex
TLS speciﬁcation. Moreover, in practice TLS also supports
many combinational running of successive TLS handshakes
over multiple connections, which leaves a gap between single
handshake security result and real-world security.
B. Our Contributions
While we have a good understanding of the security that
each mode in TLS handshake protocols is executed in a stand-
alone way,
there are no rigorously demonstrated, or even
deﬁned, guarantees for their interaction between the different
modes. Our work ﬁlls this gap.
Security model for multiple handshakes protocols. Our goal
is to deﬁne a sufﬁciently rich model for multiple handshakes
protocols, covering all kinds of compositional
interactions
between the different TLS handshake modes and providing
reasonably strong security guarantees. Our starting point is the
487487
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:15:40 UTC from IEEE Xplore.  Restrictions apply. 
Bellare-Rogaway model [28], as it is liberal enough to capture
many key exchange protocols. In order to cover the various
modes of TLS multiple handshakes, we introduce a Multi-
Level&Stage security model. Essentially, each node in some
level corresponds to a handshake session, and each session can
have multiple stages. A multiple handshakes protocol running
is represented by the nodes on the path from the root level
to the leaf level. On this path the session in some level is
dependent on the session in its last level, and more specially,
one session may cache and use the key materials established
or transmitted during its last level session.
A primary difference with the single handshake case lies
in the dependencies of the different levels. In particular, the
property of level key dependence is considered, which means
that the session key in some stage of level i is used to derive
the session key of level i + 1, and thus in this case we cannot
allow the adversary to reveal the corresponding session key
of level i before the key of the next level is established. In
addition, we deﬁne match security by additionally introducing
collision-freeness of session identiﬁers across different hand-
shake modes and across different levels. Also note that, to
capture the attacks similar to the triple handshake attack, we
treat the property that sessions with different session identiﬁers
have different session keys explicitly in the security deﬁnition,
which has not been included in the security deﬁnition of [22]
and [19], probably due to that both in QUIC and TLS 1.3
draft this property can be achieved implicitly by including
the hash of all messages exchanged so far in the derivation
of the session keys, however, as a general security model
for single handshake or multiple handshakes protocols, this
property should be included to capture the corresponding
attack explicitly.
Another important point is that we introduce the semi-static
key, a key between ephemeral keys and static keys. TLS 1.3
draft suggests that in a 0-RTT handshake mode, the server
provides a ServerConﬁguration message containing the semi-
static key gs associated with an unique Conﬁguration id,
so that on future connections to the same server, the client
can use that share to send early application data. This means
that semi-static keys are not bound to a single session, so
our model allows the adversary to learn gs, as well as the
secret s through Corrupt query with the restriction that only
after the handshake is ﬁnished. In addition, in order to cover
various authenticity properties of handshake protocols, we also