### Android 应用程序的组件和工具

#### AndroidManifest.xml
`AndroidManifest.xml` 文件包含了应用程序的基本信息及其功能。它声明了应用程序所需的权限（例如发送短信的能力）以及其他应用程序与其交互所需的权限。这将帮助您了解应用程序的功能以及它如何与同一设备上的其他应用程序交互。有关 `AndroidManifest.xml` 的更多信息，请访问 [Android 开发者文档](https://developer.android.com/guide/topics/manifest/manifest-intro/)。

#### classes.dex
`classes.dex` 文件包含以 DEX 文件格式编译的应用程序源代码。您可以使用本章后面介绍的各种 Android 黑客工具来提取和反编译此源代码以进行分析。有关查找漏洞的源代码审查的更多信息，请参阅第 22 章。

#### resources.arsc 和 res 文件夹
`resources.arsc` 文件包含了应用程序的预编译资源，例如字符串、颜色和样式。`res` 文件夹包含了应用程序中未编译成 `resources.arsc` 的资源。在 `res` 文件夹中，`res/values/strings.xml` 文件包含了应用程序中的字面字符串。

#### lib 文件夹
`lib` 文件夹包含平台相关的已编译代码。每个子目录中的 `lib` 都包含特定移动架构所使用的源代码。编译的内核模块位于此处，并常常成为漏洞的来源。

#### assets 文件夹
`assets` 文件夹包含应用程序的资源，例如视频、音频和文档模板。最后，`META-INF` 文件夹包含 `MANIFEST.MF` 文件，其中存储有关应用程序的元数据。该文件夹还包含 APK 的证书和签名。

### 使用工具

现在，您已经理解了 Android 应用程序的主要组件，需要知道如何处理 APK 文件并提取 Android 源代码。除了使用 Web 代理检查测试设备的流量之外，您还需要一些必要的工具来分析 Android 应用程序。本节不涉及如何使用这些工具的具体细节，而是介绍何时以及为什么要使用它们。其余部分您可以通过使用每个工具的文档页面轻松查找到。

#### Android Debug Bridge (ADB)
`Android Debug Bridge (ADB)` 是一种命令行工具，可使您的计算机与连接的 Android 设备通信。这意味着如果您想在计算机上阅读或修改应用程序源代码和资源文件，您无需在计算机和手机之间来回发送电子邮件。例如，您可以使用 ADB 将文件复制到和从设备中复制出来，或快速安装正在研究的应用程序的修改版本。ADB 的文档位于 [这里](https://developer.android.com/studio/command-line/adb/)。

要开始使用 ADB，请用 USB 电缆将设备连接到笔记本电脑。然后在设备上打开调试模式。每当您想要在通过 USB 连接到笔记本电脑的设备上使用 ADB 时，都必须启用 USB 调试。此过程因移动设备而异，但应类似于选择“设置”▶“系统”▶“开发者选项”▶“调试”。这将使您能够通过 ADB 从笔记本电脑与您的设备交互。在 Android 版本 4.1 及以下版本中，默认情况下可用开发者选项屏幕。在 Android 4.2 及以后的版本中，需要通过选择“设置”▶“关于手机”，然后点击“版本号”七次来启用开发者选项。

在您的移动设备上，您应该看到一个窗口提示您允许来自笔记本电脑的连接。请确保您的笔记本电脑通过在笔记本电脑终端运行此命令将其连接到设备上：
```sh
adb devices -l
```
现在您可以使用此命令安装 APK：
```sh
adb install PATH_TO_APK
```
您也可以通过运行以下步骤，从您的设备下载文件到您的笔记本电脑：
```sh
adb pull REMOTE_PATH LOCAL_PATH
```
或者将文件从您的笔记本电脑复制到移动设备：
```sh
adb push LOCAL_PATH REMOTE_PATH
```

#### Android Studio
`Android Studio` 是用于开发 Android 应用程序的软件，您可以使用它来修改现有应用程序的源代码。它还包括一个模拟器，允许您在虚拟环境中运行应用程序，如果您没有物理 Android 设备。您可以在 [这里](https://developer.android.com/studio/) 下载和阅读有关 Android Studio 的信息。

#### Apktool
`Apktool` 是一个反编译 APK 文件的工具，对于 Android 黑客来说非常重要，它可能是你在分析过程中使用最频繁的工具。它将 APK 转换成可读的源代码文件，并从这些文件中重构 APK。Apktool 的文档位于 [这里](https://ibotpeaches.github.io/Apktool/)。

您可以使用 Apktool 从 APK 中获取单个文件以进行源代码分析。例如，以下命令从名为 `example.apk` 的 APK 中提取文件：
```sh
$ apktool d example.apk
```
有时候，您可能想修改一个 APK 的源代码，并查看应用程序的行为是否发生了变化。您可以使用 Apktool 在进行修改后重新打包单个源代码文件。此命令将 `example` 文件夹中的内容打包到 `example.apk` 文件中：
```sh
$ apktool b example -o example.apk
```

#### Frida
`Frida` ([https://frida.re/](https://frida.re/)) 是一个令人惊叹的仪器工具包，可以让你将脚本注入到应用程序正在运行的进程中。您可以使用它来检查所调用的函数，分析应用程序的网络连接，并绕过证书挂钩。

Frida 使用 JavaScript 作为其语言，因此您需要了解 JavaScript 才能充分利用它。但是，您可以访问许多在线共享的现成脚本。

#### Mobile Security Framework (MobSF)
我也强烈推荐移动安全框架（[https://github.com/MobSF/Mobile-Security-Framework-MobSF/](https://github.com/MobSF/Mobile-Security-Framework-MobSF/)），或称为 MobSF，用于所有移动应用程序测试。这个针对 Android、iOS 和 Windows 的自动化移动应用程序测试框架可以进行静态和动态测试。它自动化了本章中介绍的许多技术，并且是一个很好的工具，在您了解 Android 黑客攻击的基础知识后，添加到您的工具包中。

### 寻找漏洞

现在您的移动黑客环境已经设置好，是时候开始在移动应用程序中寻找漏洞了。幸运的是，攻击移动应用程序并不比攻击 Web 应用程序不同。

首先，提取应用程序包的内容并检查代码中的漏洞。比较同一组织的移动应用程序和 Web 应用程序的身份验证和授权机制。开发人员可能会信任来自移动应用程序的数据，这可能会导致 IDOR 或破损的身份验证，如果您使用移动终端。移动应用程序也往往存在会话管理问题，例如重复使用会话令牌、使用更长的会话或使用不过期的会话 cookie。这些问题可以与 XSS 链接，以获取会话 cookie，使攻击者甚至在用户注销或更改密码后仍能接管帐户。有些应用程序使用自定义实现进行加密或哈希。寻找不安全的算法、已知算法的弱实现和硬编码的加密密钥。在审查应用程序的源代码以查找潜在漏洞后，您可以通过在模拟器或实际设备上进行动态测试来验证您的发现。

移动应用程序是搜索与其 Web 应用程序等效物中不存在的额外 Web 漏洞的绝佳场所。您可以使用与查找 Web 漏洞相同的方法来寻找：使用 Burp Suite 拦截敏感操作期间从移动应用程序中出来的流量。移动应用程序通常使用独特的端点，可能没有像 Web 端点一样经过充分测试，因为更少的黑客在移动应用程序上搜索。查找这些端点的方法是寻找组织的 Web 应用程序中没有看到的端点。

我建议先测试组织的 Web 应用程序，再深入其移动应用程序，因为移动应用程序通常是其 Web 同类产品的简化版本。通过使用您已经学习的技能搜索 IDOR、SQL 注入、XSS 和其他常见 Web 漏洞。您还可以通过分析移动应用程序的源代码来查找常见的 Web 漏洞。

除了在网络应用程序中搜索的漏洞外，还要搜索一些移动特定的漏洞。`AndroidManifest.xml` 包含有关应用程序及其功能的基本信息。该文件是您分析的良好起点。解压 APK 文件后，阅读文件以基本了解应用程序的组件和使用的权限。然后您可以深入其他文件以寻找其他移动特定的漏洞。

移动应用程序的源代码通常包含硬编码的秘密或 API 密钥，应用程序需要访问 Web 服务。`res/values/strings.xml` 文件存储应用程序中的字符串。这是查找硬编码的秘密、密钥、端点和其他类型的信息泄漏的好地方。您还可以使用 `grep` 搜索关键字来查找其他文件中的秘密，这些关键字在第 22 章中提到。

如果在文件中发现 `.db` 或 `.sqlite` 扩展名的文件，那么这些是数据库文件。在这些文件中查找信息，看它们与应用程序一起发送了什么信息。这些也是潜在秘密和敏感信息泄露的容易来源。查找会话数据、财务信息和属于用户或组织的敏感信息。

最终，寻找移动漏洞与黑客攻击 Web 应用程序并没有太大的区别，需要仔细检查客户端和服务器之间的交互，并深入源代码。请记住，移动应用程序比 Web 应用程序更容易出现硬编码的秘密和在数据库文件中存储敏感数据等特殊漏洞类型。

### API 黑客攻击

#### 什么是 API？
简单来说，API 是一组规则，允许一个应用程序与另一个应用程序进行通信。它们使应用程序以控制的方式共享数据。使用 API，互联网上的应用程序可以利用其他应用程序的资源来构建更复杂的功能。

例如，考虑 Twitter 的 API ([https://developer.twitter.com/en/docs/twitter-api/](https://developer.twitter.com/en/docs/twitter-api/))。这个公共 API 允许外部开发人员访问 Twitter 的数据和操作。例如，如果开发人员希望他们的代码从 Twitter 的数据库中检索一条推文的内容，他们可以使用 Twitter API 端点，通过向位于 `api.twitter.com` 的 Twitter API 服务器发送 GET 请求返回推文信息：
```http
GET /1.1/statuses/show.json?id=210462857140252672
Host: api.twitter.com
```
此 URL 表示开发者正在使用 Twitter API 版本 1.1 并请求名为 `statuses` 的资源（这是 Twitter 称其推文的内容），并带有 ID `210462857140252672`。URL 中的 `id` 字段是 API 端点所需的请求参数。API 端点通常需要特定参数以确定要返回的资源。

Twitter 的 API 服务器将以 JSON 格式将数据返回给请求应用程序（此示例摘自 Twitter 的公共 API 文档）：
```json
{
  "created_at": "Wed Oct 10 20:19:24 +0000 2018",
  "id": 1050118621198921728,
  "id_str": "1050118621198921728",
  "text": "To make room for more expression, we will now count all emojis as equal—including those with gender... and skin t... https://t.co/MkGjXf9aXm",
  "truncated": true,
  "entities": {
    "hashtags": [],
    "symbols": [],
    "user_mentions": [],
    "urls": [
      {
        "url": "https://t.co/MkGjXf9aXm"
      }
    ]
  }
}
```

在这一章中，我们将讨论 API 是什么，它们如何工作以及您如何找到并利用 API 漏洞。