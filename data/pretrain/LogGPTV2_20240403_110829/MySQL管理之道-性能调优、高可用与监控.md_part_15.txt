## Page 112
98·第二部分故障诊断与性能优化篇
BUFFERPOOLANDMEMORY
#确保这3个值不在变化
Logflushed up to18158813743
Log sequencenumber18158813743
LOG
##insert buffer合并插入缓存等于1
bfizii
INSERTBUFFERANDADAPTIVEHASHINDEX
#确保后台Purge进程把undolog全部清除掉，事务ID要一致。
Purge donefortrx'sn:o/u2/mysql/data/ibdata1
Lastcheckpointat18158813743
1
TrxidcounterA21837
TRANSACTIONS
1row inset(0.00sec)
mysql-bin.000002|107
mysql>showmasterstatus;
setglobal innodb_max_dirty_pages_pct=O;
FLUSHTABLESWITHREADLOCK;
File
rwx--
- 1 root root649月2416:519->/u2/mysql/data/ib_logfile0
|Position|Binlog_Do_DB|Binlog_lgnore_DB|
---
## Page 113
3.3.8update忘加where条件误操作恢复（模拟Oracle闪回功能）
文件吗？如下所示：
updated0,deleted0,read
我相信很多人都遇到过忘带where 条件，结果执行了update后把整张表的数据都给改
上面一系列确认工作完成之后，就可以进行恢复操作了。还记得刚才我们记录的删除
友情提醒：千万不要在生产环境下测试。
现在，只需要重启MySQL即可。重启命令如下：
#chown mysql:mysql ib*
#cd/u2/mysql/data/
然后修改用户属性：
把这些文件复制到原来的目录下：
#l/proc/30426/fd|egrep'ib_libdata'
/etc/init.d/mysqlrestart
#cp10/u2/mysql/data/ib_logfile1
#cd/proc/10755/fd
Irwx--- 1rootroot649月2416519->/u2/mysql/data/ib_logfile0
lrwx----1rootroot649月2416:5110->/u2/mysql/data/ib_logfile1
#确保插入、更新、删除为0
0.00inserts/s,0.00updates/s,0.00deletes/s,0.00reads/s
Main threadprocessno.30426,id 140111500936976,state:waitingfor serveractivityNurmberofrowsinserted0,
1readviewsopeninsideInnoDB
0queriesinsideInnoDB,0queriesinqueue
ROWOPERATIONS
#确保脏页数量为0
lrwx---1 root root649月2416:514->/u2/mysql/data/ibdata1
rwx---1rootroot649月2416:5111->/u2/mysql/data/ib_logfile2
Modifieddbpages0
Olddatabasepages424
Database pages1095
Freebuffers37304
Bufferpool size38400
Dictionarymemory allocated39812
#cp9/u2/mysql/data/ib_logfile0
#cp4/u2/mysql/data/ibdata1
#cp11/u2/mysql/data/ib_logfile2
Totalmemory allocated 643891200;inadditionalpoolallocated0
第3章故障诊断·99
---
## Page 114
100·第二部分故障诊断与性能优化篇
过，我们完全可以模拟出这一功能来。使用该方法前，记得要将 binlog日志设置为binlog-
很费时费力。
前的状态，但是此方法有一个弊端，那就是随着表的记录增大，binlog的增多，恢复起来会
了的情况。传统的解决方法是：利用最近的全量备份+增量binlog备份，恢复到误操作之
format=ROW，如果是STATEMENT，这个方法是无效的。切记！
是Oracle的闪回功能，但MySQL目前（包括最新的V5.6版本）还不具有这样的功能，不
现在有一个简单的方法，可以恢复到误操作之前的状态。听起来这方法似乎利用的
这致使整张表的记录都更新成不及格了。
8rowsin set(0.01 sec)
mysql>select *from student;
Rowsmatched:8Changed:8Warnings:0
mysql>update student set score=failure';
结果，在执行操作时忘带where条件了，如下所示：
8rows in set (0.02 sec)
s o as s
现在有一张学生表，
81h
下面来演示一下：
id|name|class|score
81h
1la
1la
id|name|class|score
6f
5le
4|d
3|c
21b
6f
5le
4d
31C
21b
m
3
2
2
L
11
3
3
N
2
1
1
|failure
|failure
|failure
|56
failure
|failure
failure
failure
|failure
9
要把小于60分的成绩更新成不及格。命令如下：
---
## Page 115
对数据库进行访问时就只能读不能写了，这是为了保证恢复的一致性。
NET等）的用户名改一下，然后重启前端程序（PHP/JSP/.NET等），这样再连接进来的用户
把刚才创建的admin_read_only账号给运维人员，让运维人员把前端程序（PHP/JSP/.
然后把那条binlog给导出来：
#12112423:55:15 server id 25 end_log_pos 549 CRC32 0xcf7d2635 Update_rows: table id 76 flags: STMT_END_F
#12112423:55:15server id 25end_log_pos249 CRC320x83a12fbcTable_map:'test'.'student'mapped to number76
[root@M1data]#/usr/local/mysql/bin/mysqlbinlog
下面，通过binlog先找到那条语句：
mysql> set global read_only=1;
把read_only 打开，设置数据库只读，命令如下：
GRANTALLPRIVILEGES ONyourDB*TOadmin_read_only’@%'IDENTIFIED BY123456;
QueryOK,0rows affected(0.01 sec)
flushprivileges;
首先，创建一个普通权限的账号（切记不能是SUPER权限），例如：
##@11=1/*INTmeta=0nullable=0is_null=0*/
###UPDATEtest.student
mysql-bin.000001|grep-B15'failure'|more
下面开始恢复：
-More--
###SET
菲
菲
##
###WHERE
*|*/;
-no-defaults-V-V--base64-output=DECODE-ROWS
at249
at 192
##R
WHERE
UPDATEtest.student
@1=2/*INT meta=0 nullable=0 is_null=0*/
@4=61/*VARSTRING(30)meta=30 nullable=1is_nul=0 */
@3=1/*INTmeta=0nullable=1is_null=0*/
@2=b/*VARSTRING(18)meta=18 nullable=1is_nul=0*/
@1=2/*INTmeta=0 nullable=0 is_null=0*/
@4="failure/*VARSTRING(30)meta=30nullable=1is_null=0*/
@3=1/*INTmeta=0nullable=1is_null=0*/
@2='a'/*VARSTRING(18)meta=18nullable=1is_nul=0*/
SET
@4=56'/*VARSTRING(30)meta=30 nullable=1is_null=0*/
@11=1/*INTmeta=0nullable=0is_null=0*/
@3=1/*INTmeta=0nullable=1is_null=0*/
@2=a/*VARSTRING(18)meta=18 nullable=1is_nul=0*/
第3章故障诊断101
---
## Page 116
102·第二部分故障诊断与性能优化篇
##WHERE
#121124 23:55:15 server id 25 end_log_pos 549 CRC32 0xcf7d2635 Update_rows: table id 76 flags: STMT_END_F
###
###
##WHERE
##UPDATE test.student
业
###UPDATEtest.student
[root@M1data]#
mysql-bin.000001|sed-n'/#at 249/,/COMMIT/p'>/opt/1.txt
[root@M1data]#/usr/local/mysql/bin/mysqlbinlog
##
###
S###
13S###
#
###
root@M1data]#more/opt/1.txt
at249
WHERE
UPDATEtest.student
WHERE
@4=failure'/*VARSTRING(30)meta=30 nullable=1 is_nul=0 */
@2='d'/*VARSTRING(18)meta=18nullable=1is_nulI=0*/
@1=4/*INTmeta=0 nullable=0 is_null=0*/
@4=78'/*VARSTRING(30) meta=30 nullable=1is_nul=0 */
@4='failure'/*VARSTRING(30)meta=30nullable=1is_nul=0*/
@2=b²/*VARSTRING(18) meta=18 nullable=1is_null=0 */
@4='61/*VARSTRING(30)meta=30 nullable=1is_null=0*/
@11=1 /*INTmeta=0 nullable=0 is_nul=0 */
@4="failure'/*VARSTRING(30)meta=30 nullable=1 is_null=0*/
@3=2/*INTmeta=0 nullable=1is_null=0*/
@3=1/*INT meta=0 nullable=1is_nul=0 */
@1=2/*INTmeta=0nullable=0 is_nul=0 */
SET
@2='a'/*VARSTRING(18)meta=18nullable=1is_null=0*/
@4=56'/*VARSTRING(30)meta=30nullable=1is_null=0*/
@3=1/*INT meta=0 nullable=1 is_nul=0 */
@2=a/*VARSTRING(18) meta=18nullable=1is_nul=0 */
@4=45/*VARSTRING(30)meta=30nullable=1is_null=0*/
@3=2/*INTmeta=0nullable=1is_null=0*/
@2='c/*VARSTRING(18)meta=18 nullable=1is_null=0 */
@3=1/*INTmeta=0nullable=1is_null=0*/
@11=1/*INT meta=0nullable=0is_null=0*/
---
## Page 117
其中，这些是误操作之前的数据：
#121124 23:55:15 serverid 25 end_log_pos 580 CRC32 0x378c91b0 Xid =531
[root@M1data]#
COMMIT/*I*/;
#at549
###
菲
菲
菲
###WHERE
###UPDATEtest.student
@4="failure'/*VARSTRING(30)meta=30nullable=1 is_null=0*/
WHERE
@2='g /*VARSTRING(18)meta=18 nullable=1 is_nul=0*/
WHERE
UPDATEtest.student
SET
WHERE
UPDATEtest.student
SET
@2=h/*VARSTRING(18)meta=18nullable=1 is_nul=0 */
@1=8/*INT meta=0nullable=0 is_nul=0 */
SET
@2=f/*VARSTRING(18)meta=18 nullable=1is_null=0*/
@1=6/*INT meta=0 nullable=0 is_null=0 */
SET
@3=4/*INTmeta=0 nullable=1 is_null=0 */
@2="h’/*VARSTRING(18)meta=18nullable=1is_null=0*/
@1=8/*INT meta=0 nullable=0 is_null=0 */
@4=90'/*VARSTRING(30)meta=30nullable=1 is_null=0*/
@3=4/*INT meta=0 nullable=1is_null=0*/
@4=failure'/*VARSTRING(30)meta=30 nullable=1is_nul=0*/
@3=4/*INTmeta=0nullable=1is_null=0*/
@4=43/*VARSTRING(30)meta=30 nullable=1is_null=0*/
@3=4/*INT meta=0 nullable=1is_null=0 */
@4=failure'/*VARSTRING(30)meta=30 nullable=1is_null=0*/
@4='failure'/*VARSTRING(30)meta=30nullable=1is_null=0*/
@33=3/*INTmeta=0 nullable=1is_null=0*/
@2=e/*VARSTRING(18)meta=18nullable=1is_null=0*/
@1=5/*INTmeta=0nullable=0is_nul=0 */
@4=76'/*VARSTRING(30)meta=30 nullable=1 is_null=0*/
@33=3/*INTmeta=0nullable=1is_null=0*/
@2='e'/*VARSTRING(18)meta=18 nullable=1 is_null=0 */
@1=5/*INTmeta=0nullable=0is_null=0 */
第3章故障诊断·103
---
## Page 118
104·第二部分故障诊断与性能优化篇
人进去。
UPDATEtest.student
WHERE
UPDATEtest.student
UPDATEtest.student
现在，
SET
WHERE
WHERE
这里，@1、@2、@3、@4对应的表字段分别是id、name、
SET
SET
SET
[root@M1opt]#sed/WHERE/{：a;N;/SET/ba;s/\(^\n]*V\n\*\\n\(V/3\n\2\n\1/1.txt
###@4=failure'/*VARSTRING(30)meta=30 nullable=1is_null=0*/
#
###@1=8/*INTmeta=0nullable=0is_null=0*/
这些是误操作之后的数据：
###@2=h’/*VARSTRING(18)meta=18nullable=1is_null=0*/
/O=nusO=aqelnuo=eNI*/=##
JPDATEtest.student
[root@M1opt]#catrecover.sql
###@4='90'/*VARSTRING（30)meta=30nullable=1is_nul=0*/
@1=3;
@1=2
@1=4
@4=78
@3=2,
@3=1,
@11=1;
oot@M1opt]#
bsao/
sed'/WHERE/:a;N;/@1/!ba;s/,/;/g};s/#.*//g;/COMMIT,//g
/**Vs:/###/s,pas
sed-r'/WHERE/{:a;N;/@4/!ba;s/##@2.*//g}
P=Z@
@2='c'
@1=3,
@4='61'
?
@1=2
@4='56'
@11=1,
?
03=1,
02=b'
02=a',
@3=4/*INTmeta=0nullable=1is_null=0*/
@3=4/*INTmeta=0 nullable=1 is_null=0*/
，就要进行最后一步的恢复操作了，把这些binlog转换成 SQL语句，然后将其导
class、score。
---
## Page 119
WHERE
score='56'
class=1,
name='a',
id=1,
再把@1、@2、@3、@4对应的表字段（id、name、class、score）替换掉，如下所示：
WHERE
SET
UPDATEtest.student
WHERE
SET
UPDATEtest.student
WHERE
SET
UPDATEtest.student
WHERE
SET
UPDATE test.student