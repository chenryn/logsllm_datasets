                printf("Received string: %s\n", readbuf);
                /*关闭有名管道*/
fclose(fp);
        }
        return(0);
}
因为有名管道自动支持进程阻塞，所以我们可以让这个 server 在后台运行：
#fifoserver &
然后运行下面的 client 程序：
#include 
#include 
#define FIFO_FILE       "sampleFIFO"
int main(int argc, char *argv[])
{
        FILE *fp;
        if ( argc != 2 ) {
                printf("USAGE: fifoclient [string]\n");
                exit(1);
        }
/*打开有名管道*/
        if((fp = fopen(FIFO_FILE, "w")) == NULL) {
                perror("fopen");
                exit(1);
        }
/*向有名管道中写入数据*/
        fputs(argv[1], fp);
/*关闭有名管道*/
第四章  进程间通信
- 75 -
        fclose(fp);
        return(0);
}
由于有名管道的自动阻塞特性，当上面的 server 打开一个有名管道准备读入时，server
进程就会被阻塞以等待其他进程（在这里是我们的 client 进程）在有名管道中写入数据。
反之亦然。不过，如果需要，我们也可以在打开一个有名管道时使用 O_NONBLOCK 标志
来关闭它的自动阻塞特性。
4.4.3  未提到的关于有名管道的一些注意
首先，有名管道必须同时有读/写两个进程端。如果一个进程试图向一个没有读入端进
程的有名管道写入数据，一个 SIGPIPE 信号就会产生。这在涉及多个进程的有名管道通信
中是很有用的。
其次，关于管道操作的独立性。一个“ 独立” 的操作意味着，这个操作不会因为任何
原因而被中断。比如，在 POSIX 标准中，头文件/usr/include/posix1_lim.h 中定义了在一次
独立的管道读/写操作中最大传输的数据量(buffer size)：
#define _POSIX_PIPE_BUF         512
也即是说，在一次独立的管道读/写操作中最多只能传送 512 个字节的数据，当数据量
超过这个上限时操作就只能被分成多次独立的读/写操作。在 Linux 系统中，头文件
“linux/limits.h”中定义了类似的限制：
     #define PIPE_BUF        4096
可以看出，和 POSIX 标准比，上限被大大增加了。这在涉及多进程的有名管道操作中
是非常重要的。如果在某个进程的一次写操作中传输的数据量超过了独立读/写操作的数据
量上限，这个操作就有可能被别的进程的写操作打断。也就是说，别的进程把数据插入了
该进程写入管道的数据序列中从而造成混乱。这是在有名管道应用中需要特别注意的。
4.5  文件和记录锁定
共享资源的保护问题是多进程操作系统中一个非常重要的问题。在这一节中，我们将
会讲述一些保护文件这种使用频率最高的共享资源的方法。在正式开始之前，让我们先来
看一个例子。
4.5.1  实例程序及其说明
#include 
#include 
#include 
#include 
#include 
#define SEQFILE "./sequo"
#define MAXBUF 100
- 76 -
Linux网络编程
main()
{
        int fd,i,n,pid,seqno;
        char buff[MAXBUF+1];
        pid=getpid();
        if ((fd=open("data",O_RDWR|O_CREAT) )
int lockf(int fd, int function, long size);
参数 fd 是在文件打开操作中获得的文件描述符；
参数 function 可以取如下的参数值：
F_ULOCK
为一个先前锁定的区域解锁
F_LOCK
锁定一个区域
F_TLOCK
测试并锁定一个区域
F_TEST
测试一个区域是否已经上锁。
参数 size 指明了从文件当前位置开始的一段连续锁定区域的长度，当 size 为 0 时，锁
定记录将由当前位置一直扩展到文件尾。
函数 lockf()既可以用来上锁有可以用来测试是否已经赏了锁。如果 lockf 的参数function
为 F_LOCK 指定文件的对应区域已被其它进程锁定，那么 lockf 的调用进程将被阻塞直到
该区域解锁。上述情况我们称为阻塞。如果在调用 lockf()时把参数设为 F_TLOVK，那么
当被测试的区域上了锁时，lockf 便会立即返回-1，出错返回码 errno 将为 EAGAIN,它是一
个非阻塞调用。
if(!lockf(fd,F_TEST,size))
{
rc==lockf(fd,F_LOCK,size);
…
…
}
上面这段代码看上去好像是非阻塞调用，但是如果当运行此代码段的进程在测试到对
应文件没有被锁定时，又有另一个进程被操作系统调度占有 CPD，它将同样测试出文件未
被锁定，然后对共享文件上锁。当后继进程在对锁文件操作时，再一次被操作系统调度的
第一个进程，其锁定文件的操作将仍然是一个阻塞性调用。因此为了实现非阻塞调用，我
第四章  进程间通信
- 79 -
们必须使用 F_TLOCK 参数的 lockf()调用。
有个锁函数 lockf()之后，我们便可以完善前面的上锁 my_lock()和解锁 my_unlock()函
数，防止共享文件访问中的混乱情况。下面的上锁函数采用的是阻塞调用。
#include 
my_lock(int fd)
{
/* 将文件指针移回文件头 */
lseek(fd,0L,0);
/* 锁定整个文件 */
if (lockf(fd,F_LOCK,0L)==-1)
{
perror("can't F_LOCK");
exit(1);
}
}
my_unlock(int fd)
{
lseek(fd,0L,0);
if(lockf(fd,F_ULOCK,0L)==-1)
{
perror("can't F_UNLOCK");
exit(1);
}
}
4.5.4  BSD 的咨询式锁定
4.3 BSD UNIX 操作系统提供了如下形式的调用来锁定和解锁一个文件：
#include 
int flock(int fd, int operation);
调用 flock 有两个参数：
参数 fd 是一个已打开文件的文件描述符；
参数 operation 可设定为下述各值：
LOCK_SH
共享锁
LOCK_EX 
互斥锁
LOCK_UN
解锁
LOCK_NB
当文件已被锁定时不阻塞
4.3BSD UNIX 使用 flock()来请求对指定文件的咨询式锁定和解锁。4.3BSD 的咨询锁
有共享锁和互斥锁两种。在任一给定时刻，多个进程可以用于属于同一文件的共享锁，但
是某共享文件不能同时具有多个互斥锁或存在共享锁和互斥锁共存的情况。如果锁定成功，
flock 将返回零，否则返回-1。
- 80 -
Linux网络编程
flock()允许的锁操作有下列几种：
LOCK_SH
阻塞性共享锁
LOCK_EX
阻塞性互斥锁