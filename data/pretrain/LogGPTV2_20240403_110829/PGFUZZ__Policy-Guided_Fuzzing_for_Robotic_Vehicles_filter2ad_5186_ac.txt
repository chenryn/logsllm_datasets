parameter must be enabled, and then the Parachute can be sent.
Dynamic Analysis for Narrowing Fuzzing Space ( 4 ). In
this step, we analyze which states of the vehicle change
according to the executed input. We first collect all state
values while executing inputj as described in the previous
step (dependency among inputs
If
|SD{State(i)}−SD{State(i,j)}|>SD{State(i)}, we conclude
that the inputj changes the Statei. To illustrate, Figure 6
depicts the results of the dynamic analysis for the throttle user
command in ArduPilot. The throttle user command impacts
four vehicle states: heading, throttle, altitude, and climb. Figure 6
also shows that the throttle command affects the vehicle
differently depending on the flight mode. This is because the
vehicle interprets (or ignores) the throttle command differently
based on the flight mode. For instance, to test the A.CHUTE1 policy,
PGFUZZ mutates the throttle command since it affects the
altitude of the vehicle.
Extracting Inputs Related to Each Policy ( 5 ). In this step,
we first extract the inputs related to each policy from input-term
mappings, 4a , 4b , and 4c . Then, we construct the input-policy
map ( 5a ). It represents a set of inputs per each policy, in which
PGFUZZ will mutate those inputs to test each policy.
Analyzing Unknown Time Constraints of MTL formulas ( 6 ).
In this step, we determine the unknown time limit k in MTL formu-
las (e.g., when the vehicle is in BRAKE mode, it must stop within k
seconds: (cid:3){(Modet =BRAKE)→(♦[0,k]Post =Post−1)}). This en-
sures the detected policy violations are true positives. To this end, we
conduct the following steps: (1) We decompose the policy to terms,
e.g., the A.BRAKE1 policy (defined above) consists of two terms:
mode and position. This procedure is explained in detail in 1 -
Mapping Each Policy onto Terms. (2) We randomly select one of the
inputs related to the policy from the input-policy map 5a in Figure 3,
inputseq = /0
while V= /0 or total_timeALTt−1)∨(ALTt CHUTE_ALT_MIN)}
(1) P1 =
(2) P2 =
if Chutet =on
if Chutet (cid:54)= on
if Armedt (cid:54)= true
if Armedt =true
(cid:40)1
(cid:40)1
(cid:40)1
−1
−1
when the proposition is satisfied and −1 when it is not. In
contrast, a numerical distance is computed as a normalized
(CHUTE_ALT_MIN − ALTt)/CHUTE_ALT_MIN)
difference (e.g.,
when
numeric
(e.g., (ALTt >CHUTE_ALT_MIN)). The propositional distances
(P1−P5) of the parachute policy are:
proposition
terms
the
are
in
a
ALT_t
−1
if Modet = FLIP/ACRO
if Modet (cid:54)= FLIP/ACRO
CHUTE_ALT_MIN
(3) P3 =
(4) P4 = ALT_t − ALTt−1
(5) P5 = CHUTE_ALT_MIN − ALTt
We compute the global distance based on the propositional
distances. Particularly, the arithmetic global distance is derived by
converting “not”, “and”, “or” to −1, min, and max [29], [64]. The
A.CHUTE1’s global distance is −1×[min{P1,max(P2,P3,P4,P5)}]. To
automatically generate code snippets to compute the propositional
and global distances, the policy checker first creates a binary
expression tree based on the converted MTL formula in not
eventually form, then, it traverses the nodes of the tree (a detailed
example is given in Appendix B). Lastly, the policy checker flags
a policy violation when the global distance becomes negative.
4) Mutation Engine: The mutation engine feeds inputs to the
simulator to minimize the global distance, where the negative
values of the global distance indicate a policy violation. We notice
that maximizing the propositional distances (and making them
positive) results in minimizing the global distance (and making
it negative) since the propositional distances are negated while
computing the global distance. Turning back to the A.CHUTE1
policy, the global distance −1×[min{P1,max(P2,P3,P4,P5)}] is
negative when the propositional distances are positive. Hence, the
mutation engine conducts the following steps to maximize the
propositional distances. (1) It first randomly selects an input from
the Inputmin of the target policy, which is stored in the input-policy
map. Then, it randomly selects a value and assigns it to the input.
(2) It executes the selected input on the simulator, computes the
propositional and global distances, and flags a policy violation
if the global distance becomes negative. (3) If the executed input
increases the propositional distance, the mutation engine stores
the input with the assigned value. For instance, if the input is
increasing the altitude, it contributes to increasing the propositional
distance P4. The mutation engine stores this input-value pair
(altitude,increase). (4) When the mutation engine randomly
selects the stored input again (e.g., changing altitude), it applies
the stored value to the input instead of randomly assigning a new
value to the input. For instance, it executes (altitude,increase)
to keep increasing the propositional distance. The mutation engine
repeats the step (1)-(4) until it finds a policy violation. If PGFUZZ
cannot find a policy violation, it stops fuzzing when the input
sequence’s size is more than 1,000 or fuzzing time is more than
2 hours. Then, PGFUZZ changes the target policy to another one.
5) Working Example: Table II shows an example of how
our Policy-Guided Fuzzing works. The example focuses on the
A.CHUTE1 policy. When T=1, the mutation engine ( 5 in Figure 2)
8
Parachute
(on/off)
Armed
(on/off)
FLIP/ACRO mode
(true/false)
Measured
altitude (m)
Time
(T)
1
2
3
4
5
6
TABLE II: Propositional and global distances guided with InputC, InputP, and InputE (CHUTE_ALT_MIN is set to 100 meters).
Fuzzed input
for next time T
WIND_SPEED = 5
Parachute = on
Increase throttle
WIND_SPEED = 5
Parachute = on
p5
0.06
0.05
0.05
0.01
-0.04
-0.06
Global distance
(−1×[min{P1,max(P2,P3,P4,P5)}])
p4
0
0.01
0
0.04
0.05
0.02
false
false
false
false
false
false
Filtered
altitude (m)
94
95
95
99
104
106
1
1
1
1
1
-0.02
92
93
95
97
102
106
p1
-1