If you store and access the fixture data using this test context object, make
sure to use `function () { ... }` callbacks both for the hook and the test.
Otherwise the test engine will NOT have this pointing at the test context.
```javascript
describe('User page', () => {
  beforeEach(function () {
    // "this" points at the test context object
    cy.fixture('user').then((user) => {
      // "this" is still the test context object
      this.user = user
    })
  })
  // the test callback is in "function () { ... }" form
  it('has user', function () {
    // this.user exists
    expect(this.user.firstName).to.equal('Jane')
  })
})
```
### Logging in
One of the first (and arguably one of the hardest) hurdles you'll have to
overcome in testing is logging into your application.
It's a great idea to get your signup and login flow under test coverage since it
is very important to all of your users and you never want it to break.
Logging in is one of those features that are mission critical and should likely
involve your server. We recommend you test signup and login using your UI as
a real user would. For example:
```javascript
describe('The Login Page', () => {
  beforeEach(() => {
    // reset and seed the database prior to every test
    cy.exec('npm run db:reset && npm run db:seed')
    // seed a user in the DB that we can control from our tests
    // assuming it generates a random password for us
    cy.request('POST', '/test/seed/user', { username: 'jane.lane' })
      .its('body')
      .as('currentUser')
  })
  it('sets auth cookie when logging in via form submission', function () {
    // destructuring assignment of the this.currentUser object
    const { username, password } = this.currentUser
    cy.visit('/login')
    cy.get('input[name=username]').type(username)
    // {enter} causes the form to submit
    cy.get('input[name=password]').type(`${password}{enter}`)
    // we should be redirected to /dashboard
    cy.url().should('include', '/dashboard')
    // our auth cookie should be present
    cy.getCookie('your-session-cookie').should('exist')
    // UI should reflect this user being logged in
    cy.get('h1').should('contain', 'jane.lane')
  })
})
```
You'll likely also want to test your login UI for:
* Invalid username / password.
* Username taken.
* Password complexity requirements.
* Edge cases like locked / deleted accounts.
Each of these likely requires a full blown e2e test, and it makes sense to go
through the login process. But when you're testing another area of the system
that relies on a state from a previous feature: do not use your UI to set up
this state. So for these cases you'd do:
```javascript
describe('The Dashboard Page', () => {
  beforeEach(() => {
    // reset and seed the database prior to every test
    cy.exec('npm run db:reset && npm run db:seed')
    // seed a user in the DB that we can control from our tests
    // assuming it generates a random password for us
    cy.request('POST', '/test/seed/user', { username: 'jane.lane' })
      .its('body')
      .as('currentUser')
  })
  it('logs in programmatically without using the UI', function () {
    // destructuring assignment of the this.currentUser object
    const { username, password } = this.currentUser
    // programmatically log us in without needing the UI
    cy.request('POST', '/login', {
      username,
      password,
    })
    // now that we're logged in, we can visit
    // any kind of restricted route!
    cy.visit('/dashboard')
    // our auth cookie should be present
    cy.getCookie('your-session-cookie').should('exist')
    // UI should reflect this user being logged in
    cy.get('h1').should('contain', 'jane.lane')
  })
})
```
This saves an enormous amount of time visiting the login page, filling out the
username, password, and waiting for the server to redirect us before every
test.
Because we previously tested the login system end-to-end without using any
shortcuts, we already have 100% confidence it's working correctly.
[Here](https://github.com/cypress-io/cypress-example-recipes#logging-in-recipes)
are other login recipes.
### Setting up backend servers for E2E tests
Cypress team does NOT recommend trying to start your back end web server from
within Cypress.
Any command run by `cy.exec()` or `cy.task()` has to exit eventually. Otherwise,
Cypress will not continue running any other commands.
Trying to start a web server from `cy.exec()` or `cy.task()` causes all kinds of
problems because:
* You have to background the process.
* You lose access to it via terminal.
* You don't have access to its stdout or logs.
* Every time your tests run, you'd have to work out the complexity around
    starting an already running web server.
* You would likely encounter constant port conflicts.
Therefore you should start your web server before running Cypress and kill it
after it completes. They have [examples showing you how to start and stop your
web server in a CI
environment](https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server).
## [Waiting](https://docs.cypress.io/guides/guides/network-requests#Waiting)
Cypress enables you to declaratively `cy.wait()` for requests and their
responses.
```javascript
cy.intercept('/activities/*', { fixture: 'activities' }).as('getActivities')
cy.intercept('/messages/*', { fixture: 'messages' }).as('getMessages')
// visit the dashboard, which should make requests that match
// the two routes above
cy.visit('http://localhost:8888/dashboard')
// pass an array of Route Aliases that forces Cypress to wait
// until it sees a response for each request that matches
// each of these aliases
cy.wait(['@getActivities', '@getMessages'])
// these commands will not run until the wait command resolves above
cy.get('h1').should('contain', 'Dashboard')
```
If you would like to check the response data of each response of an aliased
route, you can use several `cy.wait()` calls.
```javascript
cy.intercept({
  method: 'POST',
  url: '/myApi',
}).as('apiCheck')
cy.visit('/')
cy.wait('@apiCheck').then((interception) => {
  assert.isNotNull(interception.response.body, '1st API call has data')
})
cy.wait('@apiCheck').then((interception) => {
  assert.isNotNull(interception.response.body, '2nd API call has data')
})
cy.wait('@apiCheck').then((interception) => {
  assert.isNotNull(interception.response.body, '3rd API call has data')
})
```
Waiting on an aliased route has big advantages:
* Tests are more robust with much less flake.
* Failure messages are much more precise.
* You can assert about the underlying request object.
### Avoiding Flake tests
One advantage of declaratively waiting for responses is that it decreases test
flake. You can think of `cy.wait()` as a guard that indicates to Cypress when you
expect a request to be made that matches a specific routing alias. This prevents
the next commands from running until responses come back and it guards against
situations where your requests are initially delayed.
```javascript
cy.intercept('/search*', [{ item: 'Book 1' }, { item: 'Book 2' }]).as(
  'getSearch'
)
// our autocomplete field is throttled
// meaning it only makes a request after
// 500ms from the last keyPress
cy.get('#autocomplete').type('Book')
// wait for the request + response
// thus insulating us from the
// throttled request
cy.wait('@getSearch')
cy.get('#results').should('contain', 'Book 1').and('contain', 'Book 2')
```
### Assert on wait content
Another benefit of using `cy.wait()` on requests is that it allows you to access
the actual request object. This is useful when you want to make assertions about
this object.
In our example above we can assert about the request object to verify that it
sent data as a query string in the URL. Although we're mocking the response, we
can still verify that our application sends the correct request.
```javascript
// any request to "/search/*" endpoint will automatically receive
// an array with two book objects
cy.intercept('/search/*', [{ item: 'Book 1' }, { item: 'Book 2' }]).as(
  'getSearch'
)
cy.get('#autocomplete').type('Book')
// this yields us the interception cycle object which includes
// fields for the request and response
cy.wait('@getSearch').its('request.url').should('include', '/search?query=Book')
cy.get('#results').should('contain', 'Book 1').and('contain', 'Book 2')
```
Of the intercepted object you can check:
* URL.
* Method.
* Status Code.
* Request Body.
* Request Headers.
* Response Body.
* Response Headers.
```javascript
// spy on POST requests to /users endpoint
cy.intercept('POST', '/users').as('new-user')
// trigger network calls by manipulating web app's user interface, then
cy.wait('@new-user').should('have.property', 'response.statusCode', 201)
// we can grab the completed interception object again to run more assertions
// using cy.get()
cy.get('@new-user') // yields the same interception object
  .its('request.body')
  .should(
    'deep.equal',
    JSON.stringify({
      id: '101',
      firstName: 'Joe',
      lastName: 'Black',
    })
  )
// and we can place multiple assertions in a single "should" callback
cy.get('@new-user').should(({ request, response }) => {
  expect(request.url).to.match(/\/users$/)
  expect(request.method).to.equal('POST')
  // it is a good practice to add assertion messages
  // as the 2nd argument to expect()
  expect(response.headers, 'response headers').to.include({
    'cache-control': 'no-cache',
    expires: '-1',
    'content-type': 'application/json; charset=utf-8',
    location: '/users/101',
  })
})
```
!!! note "You can inspect the full request cycle object by logging it to the console"
    ```javascript
    cy.wait('@new-user').then(console.log)
    ```
## Don't repeat yourself
### Share code before each test
```javascript
describe('my form', () => {
  beforeEach(() => {
    cy.visit('/users/new')
    cy.get('#first').type('Johnny')
    cy.get('#last').type('Appleseed')
  })
  it('displays form validation', () => {
    cy.get('#first').clear() // clear out first name
    cy.get('form').submit()
    cy.get('#errors').should('contain', 'First name is required')
  })
  it('can submit a valid form', () => {
    cy.get('form').submit()
  })
})
```
### Parametrization
If you want to run similar tests with different data, you can use
parametrization. For example to test the same pages for different screen sizes
use:
```javascript
const sizes = ['iphone-6', 'ipad-2', [1024, 768]]
describe('Logo', () => {
  sizes.forEach((size) => {
    // make assertions on the logo using
    // an array of different viewports
    it(`Should display logo on ${size} screen`, () => {
      if (Cypress._.isArray(size)) {
        cy.viewport(size[0], size[1])
      } else {
        cy.viewport(size)
      }
      cy.visit('https://www.cypress.io')
      cy.get('#logo').should('be.visible')
    })
  })
})
```
### Use functions
Sometimes, the piece of code is redundant and we don't we don't require it in
all the test cases. We can create utility functions and move such code there.
We can create a separate folder as utils in support folder and store our
functions in a file in that folder.
Consider the following example of utility function for login.
```javascript
//cypress/support/utils/common.js
export const loginViaUI = (username, password) => {
  cy.get("[data-cy='login-email-field']").type(username);
  cy.get("[data-cy='login-password-field']").type(password);
  cy.get("[data-cy='submit-button']").submit()
}
```
This is how we can use utility function in our test case:
```javascript
import {
  loginViaUI
} from '../support/utils/common.js';
describe("Login", () => {
  it('should allow user to log in', () => {
    cy.visit('/login');
    loginViaUI('username', 'password');
  });
});
```
Utility functions are similar to Cypress commands. If the code being used in
almost every test suite, we can create a custom command for it. The benefit of
this is that we don't have to import the js file to use the command, it is
available directly on cy object i.e. `cy.loginViaUI()`.
But, this doesn't mean that we should use commands for everything. If the code
is used in only some of the test suite, we can create a utility function and
import it whenever needed.
## [Setting up time of the tests](https://docs.cypress.io/api/commands/clock#No-Args)
Specify a `now` timestamp
```javascript
// your app code
$('#date').text(new Date().toJSON())
const now = new Date(2017, 3, 14).getTime() // April 14, 2017 timestamp
cy.clock(now)
cy.visit('/index.html')
cy.get('#date').contains('2017-04-14')
```
## [Simulate errors](https://dev.to/walmyrlimaesilv/how-to-simulate-errors-with-cypress-3o3l)
End-to-end tests are excellent for testing “happy path” scenarios and the most
important application features.
However, there are unexpected situations, and when they occur, the application
cannot completely "break".