# 如何通过性能计数器检测利用Meltdown和Spectre漏洞的攻击行为
|
##### 译文声明
本文是翻译文章，文章原作者 trend micro，文章来源：趋势科技
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
到目前为止，针对[Meltdown以及Spectre](https://blog.trendmicro.com/trendlabs-security-intelligence/speculation-risky-understanding-meltdown-spectre/)漏洞的利用技术仍然停留在[PoC](https://www.techradar.com/news/new-meltdown-and-spectre-exploits-have-been-built-but-arent-in-the-wild-yet)阶段，或者只是处于[实验](https://www.bleepingcomputer.com/news/security/we-may-soon-see-malware-leveraging-the-meltdown-and-spectre-vulnerabilities/)阶段，然而对于攻击者来说，想要完成这种技术的武器化只是一个时间问题。Meltdown以及Spectre漏洞的影响范围非常[广泛](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/meltdown-and-spectre-intel-processor-vulnerabilities-what-you-need-to-know)，甚至可以影响1995年生产的主机。另一方面，如果某些企业处于欧盟的[一般数据保护条例（GDPR）](https://www.trendmicro.com/vinfo/us/security/definition/eu-general-data-protection-regulation-gdpr)范围内，那么这两个漏洞对他们来说也是非常棘手的一个[问题](https://www.trendmicro.com/vinfo/us/security/news/online-privacy/meltdown-and-spectre-patch-or-be-fined-by-gdpr)。
除了打上补丁、更新系统以外，企业或组织还需要制定更多的主动策略，来搜索、检测和响应这一安全威胁，这些策略对诸如Meltdown以及Spectre这样的大规模威胁来说尤为重要。
利用Intel处理器中的性能计数器我们成功研究出一种检测技术，可以检测利用Meltdown以及Spectre漏洞的攻击行为。这种技术可以测量缓存丢失情况（即应用程序所请求的数据没有位于缓存中），根据这些信息来检测利用Meltdown和Spectre漏洞的攻击行为。
现代CPU为了提升工作效率，会以推测方式来执行指令，以避免CPU等待较长时间，充分利用处理器性能，而这种设计中存在一些缺陷，会被一些攻击方法加以利用。
我们希望本文提出的技术可以作为一种补充策略，帮助系统管理员以及信息安全专业人员修复漏洞，也可以作为替代性缓解方法。如果某些系统打上补丁后会出现稳定性以及性能方面的问题，可以考虑采用我们提出的这种技术。
需要注意的是，检测缓存测信道攻击可以作为检测[MeltdownPrime以及SpectrePrime](https://arxiv.org/pdf/1802.03802.pdf)的技术基础。虽然实际参数有所不同，这种技术可以检测Flush
+ Reload、Prime以及Probe攻击。然而，这种方法需要在Linux上操作，我们还没有在Mac系统上测试PoC。
Spectre
SGX（[SgxPectre](https://arxiv.org/pdf/1802.09085.pdf)）的目标是从受保护的enclave（飞地）中窃取信息。根据Intel
[SGX编程参考手册](https://software.intel.com/sites/default/files/managed/48/88/329298-002.pdf)中的描述，性能计数器可能会在SGX
enclave中受到抑制。然而，由于缓存时序攻击（timing attack）会在SGX
enclave之外的不可信代码中执行，性能计数器就会包含缓存命中以及缓存丢失的相关信息。这种情况下依然可能进行检查，但因为还没有经过完全测试，因此我们不能妄下结论。具体参数（如采样率、阈值）会根据具体环境情况有所区别。
## 二、Meltdown及Spectre如何利用推测执行缺陷
CPU在推测执行访问内存的指令时，如果没有具备正确的访问权限，那么缓存测信道攻击就可以获取实际的值，这就是[
**Meltdown**](https://meltdownattack.com/meltdown.pdf)漏洞的大致原理。CPU随后会意识到用户没有具备正确的访问权限，丢弃计算结果。然而，最后一级缓存（LLC）依然保留有一些蛛丝马迹，攻击者可以借此获取内存中的值。
比如，以如下语法/指令为例：
    mov rax, [forbiddenAddress]
    …
在这种情况下，访问“被禁止”的内存会引发页面错误（page
fault），导致出现SIGSEGV错误信号，默认情况下会结束相关进程。然而，攻击者可以自己注册SIGSEGV（Segmentation
Violation）信号处理函数，在不至于引发主应用崩溃的前提下读取内存数据块。这些信号会在操作系统（OS）中留下一些脚印。
我们可以使用Intel的[Transactional Synchronization
Extensions](https://software.intel.com/en-us/node/524022)（TSX）来消除这些脚印，TSX扩展可以方便处理器检测进程是否需要进行序列化处理。攻击者基本上都会滥用[Restrictive
Transactional Memory](https://software.intel.com/en-us/node/524025)（RTM）接口。比如，攻击者可以编写如下形式的Meltdown攻击代码，这段代码由 _xbegin_ 以及 _xend_
指令进行封装，可以抑制异常信号（不会引发页面错误）。实际上这种方法可以更加隐蔽地利用Meltdown漏洞：
    xbegin
    mov rax, [forbiddenAddress]
    …
    xend
[**Spectre**](https://spectreattack.com/spectre.pdf)漏洞利用的是指令推测执行中存在的缺陷。与Meltdown漏洞不同，Spectre会读取条件分支内被禁止的内存。需要注意的是执行过程本不应该进入这个分支。然而，现代CPU会使用分支预测器（branch
predictor）来计算应该进入哪个分支，然后推测执行该分支内的指令。
比如，非常简单的Spectre攻击代码如下所示：
    …
    mov rax, [rbp-10] // rax eq. 5
    mov rbx, [rbp-18] // rbx eq. 4
    xor rax, rbx
    je no_way
    …
    ret
    no_way:
       mov rax, [forbiddenAddress]
攻击者的目标是“训练”分支预测器，使负责判断是否进入条件分支的指令结果出现错误（这里涉及到的指令为XOR指令），从而让处理器推测执行代码中的 _`no-way`_
语句。CPU会发现自己预测错误，然后丢弃执行结果。然而，攻击者可以刺探缓存，获取相关数值。这个场景会在CPU内部中处理，因此不会生成任何页面错误。
与前一种情况类似，现在攻击者可以使用缓存测信道攻击获取正确数值。这种情况下操作系统不会收到任何异常信息。需要注意的是，由于分支预测器存在差异，Spectre漏洞比较难利用，更加依赖具体的CPU。
## 三、利用缓存丢失率检测Meltdown及Spectre攻击
由于存在 _page_fault_
，因此Meltdown会在系统中留下一些蛛丝马迹，我们可以使用内核跟踪技术，捕捉漏洞利用攻击涉及到的相关信号。这种机制可以捕获OS内部的SIGSEGV信号（
_segfaults_ ）。如果某个进程产生太多的 _segfaults_ ，那么就会触发警告。
我们使用Linux
[kprobe](https://www.kernel.org/doc/Documentation/trace/kprobetrace.txt)工具来捕捉
_force_sig_info_
事件来测试这种方法的有效性。可以确认的是，我们可以使用自定义的信号处理函数来检测Meltdown攻击行为。这种情况下误报率非常低，因为一个进程出现太多SIGSEGV信号的确是非常特殊且可疑的情况。然而，如果攻击者使用TSX指令集，不引发SIGSEV信号，那么这种检测方法就无法成功触发警告。
由于CPU的微架构设计存在缺陷，因此Meltdown以及Spectre都可能使用缓存测信道攻击技术来获取实际的值。那么我们能发现这些漏洞攻击行为吗？CPU会使用缓存来减少内存负载的延迟，现代CPU会使用多层缓存结构，从L1缓存开始（最快的缓存），到L3缓存为止（最慢的缓存）。多层缓存带有包含性质，也就是说Li⊂Li+1。
此外，L3缓存也会在多个核心之间共享，其中包含数据以及指令，因此也更加容易受到攻击影响。L3缓存是DRAM（动态随机存取存储器）前的最后一个高速缓存，可以提供到DRAM的映射关系。
图1. 现代CPU的组件，包含多个核心以及L3缓存
如果计算机获取位于内存以及缓存中的值时（缓存命中），所需的访问时间会比从DRAM加载的时间快得多（此时缓存未命中）。攻击者可以借此区分缓存命中以及缓存未命中的情况，这也是这类攻击实现信息传输的基本原理。从逻辑上讲，在攻击过程中缓存未命中的次数会有所增加。然而，我们是否可以测量缓存丢失率来检测这类攻击呢？如何区分恶意行为以及正常行为，避免出现假阳性（false
positive，FP）结果呢？
我们可以通过硬件性能计数器来测量缓存未命中率。在Intel处理器中有两类性能计数器（PMC）：架构型（architectural）PMC以及特定型号型（model-specific）PMC。架构型PMC在微架构中表现一致，自Intel Core Solo以及Intel Core Duo处理器开始引入这种性能计数器。
我们可以执行 _cupid_ 指令来判断是否存在架构型PMC（eax=0x7,
ecx=0x0），这条指令可以告诉我们这些计数器的相关信息。在我们的测试案例中，我们使用intel_cpu_info工具，配合 _-arch_
参数得到如下输出结果：
    Printing architectural CPU Information:
    Version ID of architectural performance monitoring = 4
    Number of general-purpose performance monitoring counter per logical processor = 4
    Bit width of general-purpose, performance monitoring counter = 48
    Length of EBX bit vector to enumerate architectural performance monitoring events = 7
    Core cycle event available: yes
    Instruction retired event available: yes
    Reference cycles event available: yes
    Last-level cache reference event available: yes
    Last-level cache misses event available: yes
    Branch instruction retired event available: yes
    Branch mispredict retired event available: yes
    Number of fixed-function performance counters ((if Version ID > 1) = 3
    Bit width of fixed-function performance counters (if Version ID > 1) = 48
对于与LLC有关的计数器，我们需要注意LLC引用（Last Level Cache References）以及LLC未命中（LLC
misses）事件。Intel的定义如下：
1、 **Last Level Cache References** 事件：Event Select编码为2EH,
Umask为4FH。这个事件会统计来自于核心的请求数，这些请求引用的是最后一级缓存中的数据。
2、 **Last Level Cache Misses** 事件：Event
Select编码为2EH，Umask为41H。这个事件会统计引用最后一级缓存时的缓存未命中情况。
在测量缓存未命中情况时，我们需要了解哪种PMC可用，尤其是在虚拟环境中更要了解这个信息。我们还需要CPU以及内核支持才能获取这些值，因为我们无法在用户模式下执行读取这些值的指令。我们需要一个应用程序从内核中读取这些值。
图2. 确定哪种PMC可用时所需的组件
在Linux环境中我们可以使用性能分析工具（perf tools）来完成这个任务。其他平台可能需要特殊的驱动程序才能实现。
我们可以执行`perf list`命令列出可用的事件。Last Level Cache References事件以及Last Level Cache
Misses事件的别名分别为cache-references以及cache-misses。根据Intel提供的资料，我们也可以使用`perf stat -e
r4f2e,r412e`命令获取LLC引用以及LLC未命中情况。