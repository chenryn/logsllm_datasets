DB (λ) = max
AdvPriv
A∈Poly(λ)
DB is privacy preserving if AdvPriv
DB (λ) is negligible.
Theorem 5.
If PKE is an IND-CCA2 secure public key
encryption scheme and if for any prover P values idpub(P )
is set to null, then TREADPub is privacy-preserving and
AdvPriv
TREADPub (λ) ≤ AdvIND-CCA2
PKE
(λ).
The proof of this theorem is given in Appendix B.2.
3.6 Prover Anonymity
Finally, we show that the anonymous version of our pro-
tocol preserves the anonymity of the provers even against
malicious veriﬁers. These veriﬁers may try to proﬁle legit-
imate provers by linking their authentication sessions, thus
threatening their privacy. For instance, this threat is partic-
ularly relevant for the public transportation system scenario
described in the introduction.
The only information on a prover identity that a veriﬁer
can get during the protocol is the signatures produced by
the prover. Therefore, if a secure group signature scheme
is used, the protocol would not leak any information on the
identity of the provers. Otherwise, a veriﬁer would be able
to break the security of the group signature scheme.
The anonymous construction is deﬁned as an instance of
TREAD using E = PKE and S = G-SIG, for a public key en-
cryption PKE and a group signature scheme G-SIG. In such
protocols, idprv(P ) should only identify the corresponding
group identity. Thus, the veriﬁer should not obtain any in-
formation on a prover identity. To formalize this property,
we generalize the model of [19] drawing on the anonymity
model of revocable group signature [22].
Definition 9
(Prover Anonymity). Let DB be a DB
scheme. The anonymity experiment ExpAnonA,DB(λ) for an ad-
versary A on DB is deﬁned as follows. A interacts with a
challenger who runs the algorithm DB.gen(1λ) to generate
the set-up and sends all the public set-up parameters to A.
During the experiment, A has access to the following oracles:
DB.Joinh(·): On input i, it creates a new legitimate prover
Pi using DB.joinMK(i, UL).
DB.Joinc(·): On input i, it creates a corrupted prover Pi us-
ing DB.joinMK(i, UL), returns the secret key pski, and
adds Pi to CU.
DB.Revoke(·): On input i, it runs DB.revokeMK(i, RL, UL) to
revoke the prover Pi.
DB.Corrupt(·): On input i, it simulates the corruption of Pi
by returning his secret key pski and adds Pi to CU.
DB.Prover(·): On input i, it simulates a session by the hon-
est prover Pi using pski.
DB.Veriﬁer simulates a session by the veriﬁer V using skv.
First, A sends the pair of provers (i0, i1) to the chal-
lenger. If i0 or i1 is in CU, the challenger aborts the ex-
periment. Otherwise, he picks b $← {0, 1}. A then accesses
DB.Revoke(·) and DB.Corrupt(·) on i0 and i1 (the oracles re-
turn ⊥ if A uses these inputs). Hereafter, A has now access
to the following challenge oracle:
DB.Proverb simulates a session by the prover Pib using pskib
Finally, A returns b(cid:48). If b = b(cid:48), the challenger returns 1,
which means that the guess of A is correct, while otherwise
he outputs 0.
We deﬁne A’s advantage on this experiment as
.
(cid:12)(cid:12)(cid:12)(cid:12)Pr[ExpAnonA,DB(λ) = 1] − 1
2
(cid:12)(cid:12)(cid:12)(cid:12)
AdvAnonA,DB(λ) =
and the advantage on the PA experiment as
AdvAnon
DB (λ) = max
A∈Poly(λ)
{AdvAnonA,DB(λ)}.
DB is prover anonymous if AdvAnon
DB (λ) is negligible.
Theorem 6. If G-SIG is an anonymous revocable group
signature scheme [22] and if for any prover P values idpub(P )
and idprv(P ) are either set to null or the group identity, then
TREADAN O is prover-anonymous and
AdvAnon
TREADAN O (λ) ≤ AdvAnon
G-SIG(λ).
The proof of this theorem is provided in Appendix B.3.
8104. CONCLUSION
In this paper, we have introduced a novel approach for
provable TF resistance. More precisely, instead of relying
on extraction mechanisms to make sure that a TF accom-
plice can impersonate the malicious prover helping him, we
build a generic yet simple construction relying on replay. In
this construction, an adversary helped by a malicious prover
is given the ability to directly adapt the authentication in-
formation he learnt to succeed a new authentication session
with the same probability. However, this comes at the cost
of a slightly lower MF and MF resistance.
We have also reinforced the already strong notion of SimTF
and prove that if an adversary successfully authenticates
with the help of a malicious prover with a non-negligible suc-
cess probability, he can amplify his winning probability to
impersonate this prover in further sessions to an overwhelm-
ing probability. We have also presented three instances of
our protocol. The ﬁrst one is a symmetric-key lightweight
DB protocol with no privacy. The second one is a public-key
protocol private against external eavesdroppers. Finally, the
last one provides full prover anonymity with respect to ma-
licious veriﬁers. Our design is generic and may be used to
extend existing DB protocols.
5. REFERENCES
[1] A. Ahmadi and R. Safavi-Naini. Privacy-preserving
distance-bounding proof-of-knowledge. In Proc. of
Information Security and Cryptology, pages 74–88.
Springer-Verlag, 2014.
[2] G. Avoine, M. A. Bingol, S. Karda, C. Lauradoux,
and B. Martin. A formal framework for analyzing
RFID distance bounding protocols. Journal of
Computer Security - Special Issue on RFID System
Security, 2010, pages 289–317, 2010.
[3] G. Avoine, C. Lauradoux, and B. Martin. How
secret-sharing can defeat terrorist fraud. In Proc. of
WiSec, pages 145–156. ACM, 2011.
[4] S. Bengio, G. Brassard, Y. G. Desmedt, C. Goutier,
and J.-J. Quisquater. Secure implementation of
identiﬁcation systems. Journal of Cryptology,
4(3):175–183, 1991.
[5] I. Boureanu, A. Mitrokotsa, and S. Vaudenay. On the
pseudorandom function assumption in (secure)
distance-bounding protocols: PRF-ness alone does not
stop the frauds! In Proc. of LATINCRYPT, pages
100–120. Springer-Verlag, 2012.
[6] I. Boureanu, A. Mitrokotsa, and S. Vaudenay.
Practical & provably secure distance-bounding.
Cryptology ePrint Archive, Report 2013/465, 2013.
http://eprint.iacr.org/2013/465.
[7] I. Boureanu, A. Mitrokotsa, and S. Vaudenay. Secure
and lightweight distance-bounding. In Proc. of
LightSec, pages 97–113. Springer-Verlag, 2013.
[11] A. Brelurut, D. G´erault, and P. Lafourcade. Survey of
distance bounding protocols and threats. In Proc. of
the Foundations and Practice of Security, volume
9482, pages 29–49. Springer-Verlag, 2015.
[12] X. Bultel, S. Gambs, D. G´erault, P. Lafourcade,
C. Onete, and J.-M. Robert. A prover-anonymous and
terrorist-fraud resistant distance-bounding protocol. In
Proc. of WISec, pages 121–133. ACM, 2016.
[13] L. Bussard and W. Bagga. Distance-bounding proof of
knowledge to avoid real-time attacks. In Proc. of
Security and Privacy in the Age of Ubiquitous
Computing, pages 222–238. Springer-Verlag, 2005.
[14] C. Cremers, K. B. Rasmussen, B. Schmidt, and
S. ˇCapkun. Distance hijacking attacks on distance
bounding protocols. In Proc. of IEEE Security and
Privacy, pages 113–127. IEEE Computer Society
Press, 2012.
[15] Y. Desmedt, C. Goutier, and S. Bengio. Special uses
and abuses of the Fiat-Shamir passport protocol. In
Proc. of CRYPTO, LNCS, pages 21–39.
Springer-Verlag, 1988.
[16] U. D¨urholz, M. Fischlin, M. Kasper, and C. Onete. A
formal approach to distance-bounding RFID
protocols. In Proc. of Information Security (ISC),
pages 47–62. Springer-Verlag, 2011.
[17] M. Fischlin and C. Onete. Terrorism in distance
bounding: Modeling terrorist fraud resistance. In
Proc. of Applied Cryptography and Network Security,
pages 414–431. Springer-Verlag, 2013.
[18] S. Gambs, M. Killijian, and M. N. del Prado Cortez.
Show me how you move and I will tell you who you
are. Trans. Data Privacy, 4(2):103–126, 2011.
[19] S. Gambs, C. Onete, and J.-M. Robert. Prover
anonymous and deniable distance-bounding
authentication. In Proc. of AsiaCCS, pages 501–506.
ACM Press, 2014.
[20] J. Hermans, R. Peeters, and C. Onete. Eﬃcient,
secure, private distance bounding without key
updates. In Proc. of WiSec, pages 207–218. ACM
Press, 2013.
[21] C. H. Kim, G. Avoine, F. Koeune, F. Standaert, and
O. Pereira. The Swiss-knife RFID distance bounding
protocol. In Proc. of Information Security and
Cryptology, pages 98–115. Springer-Verlag, 2008.
[22] T. Nakanishi, H. Fujii, Y. Hira, and N. Funabiki.
Revocable group signature schemes with constant
costs for signing and verifying. In Proc. of Public Key
Cryptography (PKC), pages 463–480. Springer-Verlag,
2009.
[23] V. Shoup. Sequences of games: a tool for taming
complexity in security proofs, 2004. URL:
http://eprint.iacr.org/2004/332.
[24] S. Vaudenay. On privacy models for RFID. In Proc. of
[8] I. Boureanu, A. Mitrokotsa, and S. Vaudenay. Towards
ASIACRYPT, pages 68–87. Springer-Verlag, 2007.
secure distance bounding. In Proc. of FSE, pages
55–67. Springer-Verlag, 2014.
[9] I. Boureanu and S. Vaudenay. Optimal proximity
proofs. In Proc. of Inscrypt, pages 170–190.
Springer-Verlag, 2014.
[10] S. Brands and D. Chaum. Distance-bounding
protocols. In Proc. of EUROCRYPT, pages 344–359.
Springer-Verlag, 1993.
[25] S. Vaudenay. Private and secure public-key distance
bounding: Application to NFC payment. In Proc. of
Financial Cryptography and Data Security, pages
207–216. Springer-Verlag, 2015.
[26] S. Vaudenay. Sound proof of proximity of knowledge.
In Proc. of ProvSec, pages 105–126. Springer-Verlag,
2015.
811APPENDIX
A. DEFINITIONS
In this section, we present the classical deﬁnitions used
implicitly in our formal proofs.
Definition 10. A symmetric key encryption scheme SKE
is a triplet of algorithms (SKE.gen, SKE.enc, SKE.dec) s. t.:
SKE.gen(1λ): returns a secret key sk from a global security
parameter λ.
SKE.encsk(m): returns a ciphertext c from the message m
and the key sk.
SKE.decsk(c): returns a plaintext m from the ciphertext c
and the key sk.
A symmetric key encryption scheme is said correct if and
only if SKE.decsk(SKE.encsk(m)) = m for any message m
and any secret key sk generated by SKE.gen.
Definition 11. A public-key encryption scheme PKE is
a triplet of algorithms (PKE.gen, PKE.enc, PKE.dec) s. t.:
PKE.gen(1λ): returns a public/private key pair (pk, sk) from
a global security parameter λ.
PKE.encpk(m): returns a ciphertext c from the message m
and the public key pk.
PKE.decsk(c): returns a plaintext m from the ciphertext c
and the private key sk.
A public-key encryption scheme is said correct if and only
if the equality PKE.decsk(PKE.encpk(m)) = m holds for any
message m and any key pair (pk, sk) generated by PKE.gen.
Definition 12. Let SKE : (SKE.gen, SKE.enc, SKE.dec)
be a symmetric key encryption scheme. SKE is said to be
indistinguishable against adaptive chosen ciphertext attack
(IND-CCA2) when for any adversary A = (A0,A1), the ad-
vantage probability AdvIND-CCA2
(1λ) is negligible:
A,SKE
k ← SKE.gen(1λ), b $← {0, 1}
b(cid:48) ← ASKE.enck(LRb),SKE.deck
(λ)
0
: b = b
− 1
2
(cid:35)
(cid:48)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:34)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)Pr
in which the oracles SKE.enck(LRb), SKE.deck are deﬁned as:
SKE.enck(LRb(m0, m1)): returns SKE.enck(mb) on the mes-
sage pair (m0, m1), for a random bit b.
SKE.deck(c): if c has been generated by SKE.enck(LRb) re-
turns ⊥, while otherwise it returns SKE.deck(c).
Definition 13. Let PKE : (PKE.gen, PKE.enc, PKE.dec)
be a public-key encryption scheme. PKE is said to be indis-
tinguishable against adaptive chosen ciphertext attack when
for any adversary A = (A0,A1), the advantage probability
AdvIND-CCA2
(1λ) is negligible:
A,PKE
(pk, sk) ← PKE.gen(1λ), b $← {0, 1}
b(cid:48) ← APKE.encpk(LRb), PKE.decsk(pk, λ)
: b = b
(cid:48)
− 1
2
(cid:35)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:34)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)Pr
in which the oracles PKE.encpk(LRb), PKE.decsk are deﬁned
as:
PKE.encpk(LRb(m0, m1): returns PKE.encpk(mb) on the mes-
sage pair (m0, m1), for a random bit b.
PKE.decsk(c): if c has been generated by PKE.encpk(LRb) re-
turns ⊥, while otherwise it returns PKE.decsk(c).
Definition 14. A message authentication code scheme
MAC is a triplet of algorithms (MAC.gen, MAC.sig, MAC.ver)
s. t.:
MAC.gen(1λ): returns a secret key sk from a global security