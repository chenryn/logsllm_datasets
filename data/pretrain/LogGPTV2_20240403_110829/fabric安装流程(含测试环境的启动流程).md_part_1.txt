# Fabric安装环境构建：
 参考博客
## 安装docker
**1卸载原有的docker,**
yum remove docker
yum remove docker docker-common
yum remove docker docker-selinux
yum remove docker docker-engine
**2安装docker ce**
yum install -y yum-utils device-mapper-persistent-data lvm2
> #yum-utils提供yum-config-manager工具，设备映射存储驱动需要device-mapper-persistent-data和lvm2工具
yum-config-manager \--add-repo
https://download.docker.com/linux/centos/docker-ce.repo #设置稳定存储库
\# yum-config-manager \--enable docker-ce-edge #开启edge，待理解
\# yum-config-manager \--enable docker-ce-test #开启test，待理解
yum install docker-ce
docker --version #安装顺利将看到ce版本
systemctl start docker
systemctl enable docker
docker images
docker kill \$(docker ps -a -q) 杀死所有正在运行的容器
docker rm \$(docker ps -a -q) 删除所有已经停止的容器
docker rmi \$(docker images -q) 删除所有镜像\
docker rmi -f \$(docker images --q 强制删除所有镜像
**3安装docker-compose**
curl -L
https://github.com/docker/compose/releases/download/1.15.0/docker-compose-\`uname
-s\`-\`uname -m\` \> /usr/local/bin/docker-compose
#下载最1.15.0版本docker-compose
chmod +x /usr/local/bin/docker-compose #赋予执行权限
cp /usr/local/bin/docker-compose /usr/bin \#
docker-compose --version #安装顺利将看到版本
## go语言安装：
1.  参照Go官网，找到linux版本下载路径，执行以下操作下载最新版Go语言包
wget https://studygolang.com/dl/golang/go1.10.3.linux-amd64.tar.gz
#1.10.3版本视情况而定
tar -xzf go1.8.3.linux-amd64.tar.gz --C /usr/local #解压到指定目录
vim /etc/profile #修改profile文件，最后添加如下两行
export PATH=\$PATH:/usr/local/go/bin
export GOPATH=/opt/gopath
source profile #修改后执行
echo \$PATH #正常会多个/usr/local/go/bin
echo \$GOPATH #正常会显示/opt/gopath
## 安装gcc
\[root@orderer \~\]#yum -y install gcc
#如果二进制文件要编译就需要安装gcc
\[root@orderer \~\]# go version #查看go版本
go version go1.12.5 linux/amd64
# 下载fabric源码与docker相关镜像：
 #修改版本号即可
![](media/image1.png){width="7.259027777777778in"
height="3.701388888888889in"}
方式一：一般不成功
go get github.com/hyperledger/fabric
方式二：git clone
yum install git
git clone https://github.com/hyperledger/fabric/ #git
clone下来最新的fabric源码（本次为1.4.1版本）
\# cd fabric #待验证
\# git checkout v1.4.0 #待验证
.
下载相关镜像：
1.  可根据git 下来的 /fabric/scripts/bootstrap.sh 脚本文件下载相关镜像，
2.  bootstrap.sh脚本是个自动化下载相关版本二进制文件和镜像文件的脚本。
配置加速镜像
复制代码
\# mkdir -p /etc/docker
\# tee /etc/docker/daemon.json \<\<-\'EOF\'
{
\"registry-mirrors\": \[\"https://8w1wqmsz.mirror.aliyuncs.com\"\]
}
EOF
\# systemctl daemon-reload
\# systemctl restart docker
docker镜像：
docker pull hyperledger/fabric-ca:1.4.1 #先下载镜像，以ca为例
docker tag hyperledger/fabric-ca:1.4.1 hyperledger/fabric-ca:latest
#再将下载的改TAG（标签）
\[root@fabric1 fabric-samples\]# docker images
REPOSITORY TAG IMAGE ID CREATED SIZE
hyperledger/fabric-ca 1.4.1 3a1799cda5d7 2 months ago 252MB
hyperledger/fabric-ca latest 3a1799cda5d7 2 months ago 252MB
hyperledger/fabric-tools 1.4.1 432c24764fbb 2 months ago 1.55GB
hyperledger/fabric-tools latest 432c24764fbb 2 months ago 1.55GB
hyperledger/fabric-ccenv 1.4.1 d7433c4b2a1c 2 months ago 1.43GB
hyperledger/fabric-ccenv latest d7433c4b2a1c 2 months ago 1.43GB
hyperledger/fabric-orderer 1.4.1 ec4ca236d3d4 2 months ago 173MB
hyperledger/fabric-orderer latest ec4ca236d3d4 2 months ago 173MB
hyperledger/fabric-peer 1.4.1 a1e3874f338b 2 months ago 178MB
hyperledger/fabric-peer latest a1e3874f338b 2 months ago 178MB
hyperledger/fabric-zookeeper 0.4.15 20c6045930c8 3 months ago 1.43GB
hyperledger/fabric-zookeeper latest 20c6045930c8 3 months ago 1.43GB
hyperledger/fabric-kafka 0.4.15 b4ab82bbaf2f 3 months ago 1.44GB
hyperledger/fabric-kafka latest b4ab82bbaf2f 3 months ago 1.44GB
hyperledger/fabric-couchdb 0.4.15 8de128a55539 3 months ago 1.5GB
hyperledger/fabric-couchdb latest 8de128a55539 3 months ago 1.5GB
hyperledger/fabric-baseimage amd64-0.4.15 c4c532c23a50 3 months ago
1.39GB
hyperledger/fabric-baseos 0.4.15 9d6ec11c60ff 3 months ago 145MB
hyperledger/fabric-baseos latest 9d6ec11c60ff 3 months ago 145MB
## bin目录二进制文件获取之下载：
在以下的两个压缩包内：下载较慢，最好是用现成的
wget
https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric-ca/hyperledger-fabric-ca/linux-amd64-1.4.0/hyperledger-fabric-ca-linux-amd64-1.4.1.tar.gz
![](media/image2.png){width="6.0in" height="1.8090277777777777in"}
wget
https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric-ca/hyperledger-fabric-ca/linux-amd64-1.4.1/hyperledger-fabric-ca-linux-amd64-1.4.1.tar.gz
![](media/image3.png){width="6.0in" height="0.4423611111111111in"}
\[root@fabric1 bin\]# pwd
/opt/gopath/src/github.com/hyperledger/fabric/scripts/fabric-samples/bin
\[root@fabric1 bin\]# ls #二进制文件获取之前的内容
orderer
\[root@fabric1 bin\]# ls #二进制将两个下载下来的包的内容解压到此目录中，
bin config configtxgen configtxlator cryptogen discover fabric-ca-client
idemixgen orderer peer
![](media/image4.png){width="6.0in" height="0.26458333333333334in"}
实际开发中，这些二进制执行文件可以使用fabric源码编译生成，我们也许并不需要自己手动去编译生成这些文件，可以直接执行bootstrap.sh这个脚本帮我们下载好。bootstrap.sh下载相关二进制文件与镜像非常的慢。作为学习研究，我们还是有必要知道这些二进制文件是怎么来的。
下面介绍如何编译fabric和fabric-ca源码
## bin目录二进制文件获取之源码编译：
**编译fabric源码：**编译之前请确保系统中已经安装了Go语言运行环境和正确的配置了环境变量。\$
mkdir -p \$GOPATH/src/github.com/hyperledger
#创建目录，前面GOPATH定义的路径是：/opt/gopath
\$ cd \$GOPATH/src/github.com/hyperledger #将fabric源码放入此路径中
![](media/image5.png){width="6.0in" height="0.8513888888888889in"}
\$ cd fabric #进入fabric目录准备编译
\$ make release #编译命令
![](media/image6.png){width="6.0in" height="2.158333333333333in"}
![](media/image7.png){width="6.0in" height="1.836111111111111in"}
\$ cd
\$GOPATH/src/github.com/hyperledger/fabric/release/linux-amd64/bin/
#编译后二进制文件所在路径
**编译fabric-ca源码**
\$ git clone https://github.com/hyperledger/fabric-ca.git
#下载fabric-ca源码
![](media/image8.png){width="6.0in" height="3.1819444444444445in"}
# 按照官网建立第一个fabric案例网络
下载fabric-samples（fabric案例）源码：
git clone https://github.com/hyperledger/fabric-samples/
\[root@server \~\]# mkdir -p /opt/gopath/src/github.com/hyperledger/
#GOPATH路径中，有就忽略此步
\[root@server \~\]# cp -r fabric-samples
/opt/gopath/src/github.com/hyperledger/ #将fabric-samples拷贝此路径
\[root@server \~\]# cd
/opt/gopath/src/github.com/hyperledger/fabric-samples/
#进入fabric-samples目录
\[root@server fabric-samples\]# ls bin/
#确认有如下二进制文件，如无此目录，则拷贝过来
configtxgen configtxlator cryptogen discover fabric-ca-client
get-docker-images.sh idemixgen orderer peer
byfn.sh利用这些Docker镜像快速引导Hyperledger
Fabric网络，该网络默认由四个代表两个不同组织的对等体和一个orderer节点组成。它还将启动一个容器来运行脚本执行，该脚本执行将对等点连接到通道，部署链代码并根据部署的链代码驱动事务执行。
![](media/image9.png){width="6.0in" height="1.1194444444444445in"}
\[root@fabric1 first-network\]# ./byfn.sh #执行脚本得到提示
oot@fabric1 first-network\]# ./byfn.sh generate #generate(生成)
![](media/image10.png){width="6.0in" height="1.3527777777777779in"}
\[root@fabric1 first-network\]# docker images #将创建一些docker镜像
![](media/image11.png){width="6.0in" height="1.7944444444444445in"}
\[root@fabric1 first-network\]# ./byfn.sh up #启动网络
![](media/image12.png){width="7.2659722222222225in"
height="3.661111111111111in"}
\[root@fabric1 first-network\]# ./byfn.sh down #停止网络
\[root@fabric1 first-network\]# docker images #新创建的会被删除
![](media/image13.png){width="7.2659722222222225in"
height="3.6416666666666666in"}
# E2E案例实施之1.0.0
\[root@orderer fabric\]# cd examples/e2e_cli/
![](media/image14.png){width="7.261111111111111in"
height="0.6076388888888888in"}
\[root@orderer e2e_cli\]# ./network_setup.sh up 启动
\[root@orderer e2e_cli\]# ./network_setup.sh up 停止
启动成功如下：
![](media/image15.png){width="7.2659722222222225in" height="2.59375in"}
错误一：
![](media/image16.png){width="7.2652777777777775in"
height="4.122916666666667in"}
错误二：
![](media/image17.png){width="7.261805555555555in" height="3.23125in"}
# E2E案例之多节点部署：
Orderer orderer.example.cn 192.168.10.221
Sp0 peer0.org1.example.cn 192.168.10.222
Sp1 peer1.org1.example.cn 192.168.10.223
Sp2 peer0.org2.example.cn 192.168.10.224
Sp3 peer1.org2.example.cn 192.168.10.225
## 生成公私钥、证书、创世区块等(在orderer上)
\[root@orderer e2e_cli\]# ls generateArtifacts.sh
generateArtifacts.sh
\[root@orderer e2e_cli\]# mkdir channel-artifacts
\[root@orderer e2e_cli\]# ./generateArtifacts.sh mychannel
#生成公私钥、证书、创世区块等
![](media/image18.png){width="7.259027777777778in"
height="5.573611111111111in"}
![](media/image19.png){width="7.2659722222222225in"
height="1.8451388888888889in"}
## 创建修改orderer文件
\[root@orderer e2e_cli\]# cp docker-compose-cli.yaml
docker-compose-orderer.yaml
![](media/image20.png){width="5.665972222222222in"
height="2.9368055555555554in"}
docker-compose-orderer.yaml 文件是定义了镜像docker配置文件
![](media/image21.png){width="7.263194444444444in"
height="2.7041666666666666in"}
\[root@orderer e2e_cli\]# docker-compose -f docker-compose-orderer.yaml
up -d #启动orderere
![](media/image22.png){width="7.260416666666667in"
height="1.445138888888889in"}
## 问题：
如果orderer起不来，则可以借鉴如下情况：
![](media/image23.png){width="7.261111111111111in"
height="4.627777777777778in"}
报错如下
![](media/image24.png){width="7.261805555555555in"
height="4.5680555555555555in"}
解决办法，删掉这个目录，重新创建，成为目录原因暂时未知
# E2E案例实施之1.4.0
Fabric官方提供了实现点对点的Fabric网络示例，该网络有两个组织（organizations），一个组织有两种节点（Peer）,通过Kafka方式实现排序（Orderer）服务。
End-2-End案例的运行需要"cryptogen"和"configtxgen"两个工具，用于Fabric网络所需的数字证书验证和访问控制功能。
cryptogen：生成用于识别和验证网络中各种组件的x509证书。
configtxgen：生成用于通道和区块所需要配置文件。
1、两个工具可以通过如下命令方式生成，在该End-2-End例子中已集成到generateArtifacts.sh这个文件（执行这个脚本文件亦是编译了fabric源码，从而在releas产生linux-amd64/bin目录，此目录中生成了二进制可执行文件），运行后自动生成，无需手动命令操作,两个文件生成到\$GOPATH/src/github.com/hyperledger
/release/linux-amd64/bin这个目录。
\# cd \$GOPATH/src/github.com/hyperledger/fabric
\# make release #编译faric，注意需要安装gcc
\# cd \$GOPATH/src/github.com/hyperledger/release/linux-amd64/bin
2、二进制文件还可以通过以下网址直接访问下载（下载比较慢需要长时间），下载的就是二进制执行文件，地址：https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/，本书使用V1.4版本，对应文件为hyperledger-fabric-linux-amd64-1.4.0.tar.gz，下载完成后解压，获取bin目录。
1\. 拷贝e2e_cli源文件
由于Fabric
1.4开始删除了End-2-End案例，需要手动拷贝e2e_cli目录到\$GOPATH/src/github.com/hyperledger/fabric/examples目录下。End-2-End案例源文件访问https://github.com/dragon-lin/bookfile网页中的"书籍对应源码/第七章
官方End-2-End运行"目录中获取。
\[root@fabric1 \~\]# cd bookfile/书籍对应源码/第七章\\
官方End-2-End运行/
\[root@fabric1 第七章 官方End-2-End运行\]# ls
e2e_cli
#将此目录全部拷贝到/opt/gopath/src/github.com/hyperledger/fabric/examples/目录下
chmod -R 777 \$GOPATH/src/github.com/hyperledger/fabric/examples/e2e_cli
#赋予权限
执行
\[root@fabric1 e2e_cli\]# ./generateArtifacts.sh
#执行这个编译了fabric源码，在release中产生二进制文件
\[root@fabric1 e2e_cli\]# ./network_setup.sh up #启动e2e案例
\[root@fabric1 e2e_cli\]# ./network_setup.sh down #停止e2e案例
## End-2-End案例分析
案例架构：End-2-End案例由3个zookeeper、4个kafka和1个orderer实现排序,包括两个组织，分别为Org1和Org2，每个组织中有两个节点，分别为peer0和peer1,结构图如下所示：
![C:\\Users\\Administrator\\Desktop\\544703-20180822210547879-849060873.jpg](media/image25.jpeg){width="3.7263888888888888in"
height="4.418055555555555in"}
所有的配置都在docker-compose-cli.yaml文件里，配置顺序分别为zookeeper、kafka、orderer、peer和cli，先运行zookeeper集群、再运行kafka集群，最后运行orderer和peer，必须按照以上运行顺序；实现的功能集中写在script.sh文件里，自动运行全部功能，直到显示成功，具体功能如下：
1\. 验证排序（orderer）服务是否可用，函数：checkOSNAvailability
2\. 创建通道，函数：createChannel