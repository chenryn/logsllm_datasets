在使用 Python 3.3 和 Windows 7 x64 环境下，执行 `celery-script.py` 脚本时遇到了以下错误：

```plaintext
Traceback (most recent call last):
  File "D:\Projects\Web\stuff\backend\Scripts\celery-script.py", line 9, in <module>
    load_entry_point('celery==3.1.5', 'console_scripts', 'celery')()
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\__main__.py", line 29, in main
    main()
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\bin\celery.py", line 80, in main
    cmd.execute_from_commandline(argv)
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\bin\celery.py", line 725, in execute_from_commandline
    super(CeleryCommand, self).execute_from_commandline(argv)
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\bin\base.py", line 300, in execute_from_commandline
    return self.handle_argv(self.prog_name, argv[1:])
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\bin\celery.py", line 717, in handle_argv
    return self.execute(command, argv)
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\bin\celery.py", line 671, in execute
    ).run_from_argv(self.prog_name, argv[1:], command=argv[0])
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\bin\worker.py", line 174, in run_from_argv
    return self(*args, **options)
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\bin\base.py", line 263, in __call__
    ret = self.run(*args, **kwargs)
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\bin\worker.py", line 185, in run
    maybe_drop_privileges(uid=uid, gid=gid)
  File "D:\Projects\Web\stuff\backend\lib\site-packages\celery\platforms.py", line 496, in maybe_drop_privileges
    if os.geteuid():
AttributeError: 'module' object has no attribute 'geteuid'
```

### 问题分析
该错误是由于 `os.geteuid()` 方法在 Windows 平台上不可用。`geteuid` 是 Unix/Linux 系统中的一个函数，用于获取当前进程的有效用户 ID。而在 Windows 上没有等效的实现。

### 解决方案
1. **修改代码**：可以在 `celery\platforms.py` 文件中添加对操作系统的检查，并在 Windows 平台上跳过 `geteuid` 的调用。
2. **更新 Celery 版本**：确保你使用的 Celery 版本已经修复了这个问题。较新的版本可能已经处理了这种跨平台兼容性问题。
3. **使用虚拟环境**：如果可能的话，可以考虑在 Linux 或 macOS 上运行你的 Celery 任务，因为这些操作系统支持 `geteuid` 方法。

### 示例代码修改
你可以在 `celery\platforms.py` 中添加如下代码来解决这个问题：

```python
import os
import sys

def maybe_drop_privileges(uid=None, gid=None):
    if sys.platform != 'win32':
        if os.geteuid() == 0:
            # Drop privileges
            pass
    else:
        # Handle Windows-specific logic or skip
        pass
```

这样可以确保在 Windows 平台上不会尝试调用 `os.geteuid()` 方法。