-F的别名，但是Bash不会递归的去扩展要替换的文本。如果别名文本中的最后一个字符是空格或制表符，
则还要对命令中别名之后单词进行别名扩展。
别名可以用aliae命令来创建或列出，并用unaliae命令删除。在替换的文本中没有办法像csh那样
使用参数。如果需要参数，则应该使用shell函数（参见&3.3[Shell函数]，p12）.在非交互运行的shell中不
会进行别名扩展，除非打开了shell的expand_aliases选项（参见s87内部命令shopt]，p46）。
定义和使用别名的规则有点含糊。Bash在执行任何命令之前总是至少读取一整行。别名是在读取命令
时扩展的，而不是在执行时。所以，同一行中另外一个命令定义的别名直到读取下一行输入时才能生效，
面
本行中该别名之后的命令不受它的影响。执行函数时也有同样的问题。别名是在读取函数定义时扩展的，而
不是在函数执行时，因为函数定义本身就是一条复合命令。这样的结果就是，在函数内部定义的别名直到函
数执行以后才能使用②。所有为了安全，永远都在单独的行中定义别名，并且不要在复合命令中使用别名。
不管出于什么目的，都应该优先使用shell函数而不是别名。
$6.7数组
Bash中支持一维的下标数组变量和键值数组变量。任何变量都可以作为下标数组来使用：内部命令
declear可以显式的声明一个数组。数组的元素个数不受限制，也不限制数组的下标或赋值时要连续。下标
数组使用整数或算术表达式（参见56.5Shell的算术运算]，p61）来访问元素，下标从零开始，而键值数组使
用任意字符申来访问元素，
如果用下面的语法形式给任意变量赋值就自动创建了一个下标数组：
数组名[下标]-值
其中下标被当成算术表达式，它的求值结果必须是一个大于或等于零的数。如果要显式的声明一个数组，则
declare=a数组名
下面的语法格式也是允许的，下标会被忽略。
declare=a数组名[下标]
键值数组用下面的形式来创建：
declare=A 数组名
可以用内部命令declare或readonly来设置数组变量的属性。每个属性都会作用于数组中的每个元素。
可以使用下面的复合赋值语句给数组赋值
数组名-（[下标-值--·[下标-]值）
指在函数中使用。面在其它地方使用则不受此限制。
BASH中文文档
目录
p62
---
## Page 74
56.8目录栈
第六章BASH的功能
值元素的下标就是该语句所赋值的最后一个下标加上一。下标是从零开始的。给键值数组赋值时，必须指定
下标。这种语法形式对内部命令declear同样有用。对单个元素赋值可以最上面介绍的形式：
数组名[下标]-值
数组的任何元素都可以用
$[数组名[下标]}
的形式来引用。这里必须使用大括号以免与shell的文件名扩展运算符想冲突。如果下标是“"或“*，则这
个单词就扩展为数组中的所有元素。只有在这个单词位于双引号之间时这两个下标才会有区别。如果这个单
词位于双引号中间，${变量名[+]}就扩展为一个单独的单词，它是用IFS变量的第一个字符把把数组名所
有的元素连接而成的：而S{数组名[+]}把数组名中的每个元素都扩展成一个独立的单词。如果数组中没有
元素，则$数组名[+]}的扩展结果为空。如果双引用的扩展在单词中进行，则第一个参数扩展后就和原来
单词的开头部分相连，而最后一个参数扩展后就和原来单词的结尾部分相连。这和特殊变量“"及“"的扩
展方法是类似的。${#数组名[下标]}会扩展成$数组名【下标]}的长度。如果下标是“"或“*”，则它就扩
展为数组的长度。使用数组时如果没有指定下标，就相当于指定了0作为下标。
可以用内部命令unBet来删除数组。如果删除时指定下标，则只删除该下标处的元素。这时要注意文
件名扩展带来的负面效果。如果删除时只指定了数组名，则删除整个数组。删除时指定下标为“”或“也会
删除整个数组。
内部命令declare、local、readonly都接受“-a"选项来指定下标数组，或"-A"选项来指定键值数组。
可以用内部命令read的“-a”选项把从标准输入中读取的一组单词赋给数组，也可以用它从标准输入中读取
值后赋给指定的数组元素。内部命令Bet和declare可以以便于重新作为输入的格式来显示数组的值。
S6.8目录栈
目录栈是一组最近访问过的目录。内部命令pushd可以在更改当前目录时把目录压入到栈中：内部命
令popd可以把指定的目录从栈中移除并把当前目录设为被移除的那个目录：而内部命令dirg可以显示目
录栈的内容。目录栈的内容还可以从shell变量DIRSTACK中获得。
 6.8.1
用于目录栈的内部命令
A.dirs
[ndt>-] [x-—— n+] =xTp
列出当前记住的目录。可以用puehd命令添加目录，而用popd删除。
国
显示从零开始的第N个目录（在不带参数执行dire所列出的内容中从左开始数）。
显示从零开始的第N个目录（在不带参数执行dire所列出的内容中从右开始数）。
删除目录栈中所有目录。助记词：C1oa，清除
显示长列表：默认的列表会用波浪号来表示主目录，助记司：LongList，长列表
列出目录时每个目录占一行。助记词：vraP，分行
列出目录时每个目录占一行，每行前面都显示这个目录在栈中的位置。助记词：uraP，分行
办业业业业业业业业业业业业业业业业业业业业业业业业业业业业业业业业业业
p63
目录
BASH 中文文
---
## Page 75
第六章BASH的功能
6.9提示符的控制
B. popd
[u-] [-— N+] pdod
第一个序号为0.所以，popd就相当于popd+0。
（如果没有参数）删除目录栈中的顶端目录，并用cd命令进入到新的栈顶目录中，dire命令列出的目录中
+N
删除从零开始的第N个目录（在不带参数执行dire所列出的内容中从左开始数）。
删除从零开始的第N个目录（在不带参数执行dire所列出的内容中从右开始数）。
n
在目录栈中删除目录时，禁止改变目录，即只操纵目录栈。
C.
pushd
[目—N-—N+][u-]pqand
在目录栈的顶端保存当前目录并进入目录中。如果没有参数，则交换栈顶的两个目录。
n
在目录栈中添加目录时不按常规改变当前工作目录，而只对目录栈进行操作。
+N
轮转目录栈，从而把第N个目录移到栈顶（在dirB所列出的内容中从左开始数，第一个为零）。
+N
轮转目录栈，从而把第N个目录移到栈顶（在dire所列出的内容中从右开始数，第一个为零）。
目录
把当前工作目录加入到栈顶，然后进入目录。
 6.9
9提示符的控制3]
Bash在每次打印主提示符之前都会检查PROMPT_COMMAND变量的值。如果设置了这个变量并且其值不
为空，就执行这个值中的命令，就好像这些命令是从命令行输入的一样。此外，下表列出了可以用于这个变
量的特殊字符：
响铃字符。
1d
当前日期，格式为周月日"，例如"TueMay26”。
D[格式}
把格式传给gtrftine3并把其结果插入到提示符中：空的格式将会用当前语言区域的格式显
示时间，大括号是必须的。
Te
转义字符。
h
主机名中第一个"”之前的部分。
H
主机名。
当前shell管理的作业数目。
叫正文标题是“提示符的控制”，但很多引用到这里的链接部认为标题是“打印提示符”
BASH中文文档
目录
p64
---
## Page 76
56.9提示符的控制
第六章BASH的功能
11
Shell所在终端设备的文件基名。
n
换行符。
回车符。
Shell的名称，$0的基名（即完整文件名中最后一个斜杠后面的部分）。
24小时制的当前时间，格式为HH：MM:SS。
12小时制的当前时间，格式为HH：MM:SS"。
12小时制的当前时间，区分上午和下午。
24小时制的当前时间，格式为“HH：MM"。
国
当前用户的用户名。
Bash 的版本号，例如 2.00.
Bash的发行号，即版本号加上补丁级别，例如2.00.0。
当前工作目录，其中的$HOME部分省略成一个波浪号（使用$PROMPT_DIRTRIN变量）。
国
SPWD的基名，其中的SHOME部分省略成一个波浪号。
当前命令的历史编号。
当前命令的命令编号。
如果有效用户号为0就是#字符，否则就是3字符。
nnn
ASCII代码为八进制数nnn的字符。
一个反斜杠。
开始一个不可打印字符的转义序列：可以在提示符中插入终端控制字符序列。
结束一个不可打印字符的转义序列。
命令编号和历史编号通常是不一样的：一个命令的历史编号是它在历史中的位置，历史中可能包含了从历史
文件中读取的命令（参见59.1[Bash的历史功能]，p90）：而命令编号是指在当前shell会话中已经执行的所
有命令中的序号。
这个字符串在解析以后还要根据shell的promptvarg选项（参见587[内部命令shopt]，p47）进行参数
扩展、命令替换、算术扩展、以及引用去除（)
*代码清单5：控制提示符实例
1 CL="\[\[0m\]
2 GREEN-*$CL\[\e[O;32m\]
BGREEN="$CL\[\e[0;32;1n\]"
XDRG="SCL\[\e[0;36m\]"
+++++++++++++++++++++++*
p65
目录
BASH 中文文
---
## Page 77
第六章BASH的功能
§6.10 受限制的 SHELL
5 XRED="$CL\[\e[0;35m\]"
6 BRED="$CL\[\e[0;35;1n\]
ORG="$CL\[\e[0;33n\]"
 DARE_GIAY="$CL\[\e[1;30n\]"
9 CYAN="SCL\[\e[1;36m\]"
10 BLUE="$CL\[\e[1;34m\]"
2#为了显示方便，下面一行用命令替换进行赋值。实际使用时应该用单引号。
11
1s PROMPT_CONMAND=$(
14
echo -ne "\033]0;S{USER}${HOSTNAME}:${PWD}\007
15
(=J-/P4m|）$=ALIN
16
LS=$(1s | vc -1)
LSh=$(1s -a | vc -1)
18
19
L1a-"$BLUE[SBGREENu$GREEN@\h:$NTTY\s$BLUE]$BLUE
20
L1b-"$ORG\t$BLUE"
21
L1c="$BLUESBLUE"
22
Lid-"($XREDSLS/SLSA$BLUE)$BLUE"
23
L2="$CYAN\\\$$CL"
24
export PS1-"$L1a-$L1b=$L1c-$L1d-\nSL2*
25
#export PS1-"[\u@\h:$NTTY\s]-\t=-{n\\S"
26
history -a
27 )
28#实际使用时，上面一行也应该改成单引号
§ 6.10
受限制的shell
如果通过rbash来启动Bash，或者启动时指定了“--restricted"或“-r"选项，则shell就进入受限模
式。受限制的shell可以用来设置一个控制更严格的环境：它在行为上和basb完全一样，除了下面允许和
不允许的操作：
用内部命令cd改变目录。
设置或重置变量SHELL、PATH、ENV、BASH_ENV的值。
使用包含斜杠的命令名。
在内部命令，的参数中指定带有斜杠的文件名。
在内部命令hash的"-p"选项参数中指定带有斜杠的文件名。
启动时从shell环境中导入函数定义。
启动时解析shell环境中的 SHELLOPTS。
使用重定向运算符">”、">1”、“<>”、“>”、“>"进行重定向
使用内部命令exec把当前的shell换成另外一个命令。
使用内部命令enable的"-f或“=d"选项增加或删除内部命令。
使用内部命令enable来启用已经禁用的shell内部命令。
指定内部命令command的“-p”选项。
BASH 中文文档
目录
p66
---
## Page 78
6.11 BASH 的 POSIX 模式
第六章BASH的功能
+++++++++++++++++++++++++++++++++++++++++++++++++
使用set+r或者get+orestricted来取消受限模式。
这些限制是在读取启动文件以后生效的。如果要执行的命令是个shell脚本（参见53.8Shell脚本]，p26），
rbash就会创建一个不带任何限制的shell来执行这个脚本。
&6.11Bash的POSIX模式