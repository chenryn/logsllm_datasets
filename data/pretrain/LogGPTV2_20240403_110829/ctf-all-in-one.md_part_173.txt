paper
The authors present an investigation of machine learning based malware
detection using dynamic analysis on real devices.
What are motivations for this work
malware
The rapid increase in malware numbers targeting Android devices has highlighted
the need for efficient detection mechanisms to detect zero-day malware.
anti-emulator techniques
Sophisticated Android malware employ detection avoidance techniques in order to
hide their malicious activities from analysis tools. These include a wide range of
anti-emulator techniques, where the malware programs attempt to hide their
malicious activities by detecting the emulator.
What is the proposed solution
1709
8.15 EMULATOR vs REAL PHONE: Android Malware Detection Using Machine
Learning
Hence, we have designed and imple- mented a python-based tool to enable
dynamic analysis using real phones to automatically extract dynamic features
and potentially mitigate anti-emulation detection. Further- more, in order to
validate this approach, we undertake a comparative analysis of emulator vs
device based detection by means of several machine learning algorithms. We
examine the performance of these algorithms in both environments after
investigating the effectiveness of obtaining the run-time features within both
environments.
phone based dynamic analysis and feature
extraction
Since our aim is to perform experiments to compare emulator based detection
with device based detection we need to extract features for the supervised
learning fromboth environments. For the emulator based learning, we utilized the
DynaLog dynamic analysis framework.
emulator based: DynaLog provides the ability to instrument each application
with the necessary API calls to be monitored, logged and extracted from the
emulator during the run-time analysis.
device based: extended with a python-based tool
push a list of contacts to the device SD card and then import them to
populate the phoneâ€™s contact list.
Discover and uninstall all third-party applications prior to installing the
app under analysis.
Check whether the phone is in airplane mode or not.
Check the battery level of the phone.
Outgoing call dialling using adb shell.
Outgoing sms messages using adb shell.
Populate the phone SD card with other assets.
1710
8.15 EMULATOR vs REAL PHONE: Android Malware Detection Using Machine
Learning
Features extraction
After using DynaLog, the outputs are pre-procesed into a file of feature vectors
representing the features extracted from each application. Then use InfoGain
feature ranking algorithm in WEKA to get the top 100 ranked features.
Machine learning classifiers
The features were divided into file different sets to compare the performance
using machine learning algorithms.
What is the work's evaluation of the proposed
solution
Dataset
The dataset used for the experiments consists of a total of 2444 Android
applications. Of these, 1222 were malware samples obtained from 49 families
of the Android malware genome project. The rest were 1222 benign samples
obtained from Intel Security (McAfee Labs).
Machine learning algorithms
1711
8.15 EMULATOR vs REAL PHONE: Android Malware Detection Using Machine
Learning
The following algorithms were used in the experiments:
Support Vector Machine (SVM-linear)
Naive Bayes (NB)
Simple Logistic (SL)
Multilayer Perceptron (MLP)
Partial Decision Trees (PART)
Random Forest (RF)
J48 Decision Tree.
Metrics
Five metrics were used for the performance emulation of the detection
approaches.
true positive rate (TPR)
true negative ratio (TNR)
false positive ratio (FPR)
false negative ratio (FNR)
weighted average F-measure.
Experiment 1: Emulator vs Device analysis and
feature extraction
Experiment 2: Emulator vs Device Machine
learning detection comparison
1712
8.15 EMULATOR vs REAL PHONE: Android Malware Detection Using Machine
Learning
Our experiments showed that several features were extractedmore effectively
fromthe phone than the emulator using the same dataset. Furthermore,
23.8% more apps were fully analyzed on the phone compared to emulator.
This shows that for more efficient analysis the phone is definitely a better
environment as far more apps crash when being analysed on the emulator.
The results of our phone-based analysis obtained up to 0.926 F-measure and
93.1%TPR and 92%FPR with the RandomForest classifier and in general,
phone-based results were better than emulator based results.
Thus we conclude that as an in- centive to reduce the impact of malware anti-
emulation and environmental shortcomings of emulators which affect analysis
efficiency, it is important to develop more effective ma- chine learning device
based detection solutions.
1713
8.15 EMULATOR vs REAL PHONE: Android Malware Detection Using Machine
Learning
What is your analysis of the identified problem,
idea and evaluation
Countermeasures against anti-emulator are becoming increasingly important in
Android malware detection.
What are the contributions
Presented an investigation of machine learning based malware detection
using dynamic analysis on real Android devices.
Implemented a tool to automatically extract dynamic features from Android
phones.
Through several experiments we performed a comparative analysis of
emulator based vs. device based detection by means of several machine
learning algorithms.
What are future directions for this research
Hence future work will aim to investigate more effective, larger scale device
based machine learning solutions using larger sample datasets. Future work
could also investigate alternative set of dynamic features to those utilized in
this study.
What questions are you left with
How to make emulator environment more closer to real environment?
How to make more powerful dynamic analysis tools that can against anti-
emulation techniques?
Why the difference in Android versions had no impact?
1714
8.16 DynaLog: An automated dynamic analysis framework for characterizing
Android applications
8.16 DynaLog: An automated dynamic
analysis framework for characterizing
Android applications
paper
What is your take-away message from this
paper
The authors presented DynaLog, a framework that enable automated mass
dynamic analysis of applications in order to characterize them for analysis and
potential detection of malicious behaviour.
What are motivations for this work
Malware
more then 5 million malware samples
signature-based AVs take up to 48day to detect new malware
sophisticated detection avoidance techniques such as obfuscation, and
payload encryption making it more difficult
Current Methods' Limitations
Static: detection avoidance by sophisticated obfuscation techniques, run-time
loading of malicious payload.
Dynamic: are either closed source or can only be accessed by submitting
apps online for analysis, which can also limit automated mass analysis of
apps by analysts.
What is the proposed solution
1715
8.16 DynaLog: An automated dynamic analysis framework for characterizing
Android applications
DynaLog has several components:
1. Emulator-based analysis sandbox
2. APK instrumentation module
3. behaviour/features logging and extraction
4. Application trigger/exerciser
5. Log parsing and processing scripts
Dynamic analysis tool (DroidBox capabilities)
An open source tool used to extract some high level behaviour and
characteristics by running the app on an Android device emulator or (AVD).
Extracts these behaviours from the logs dumped by logcat.
Uses Androguard to extract static meta-data relating to the app.
Utilizes Taintdroid for data leakage detection.
Used as a building block for several dynamic analysis tools.
Problems with Sandbox performance
Lack of complete code coverage.
Lack of complete traffic communication, server not found.
Real events need to trigger some malicious behaviour.
Extended Sandbox to overcome these issues by
Improving AVD emulator to behave like realistic devece
New scripts to improve code coverage
1716
8.16 DynaLog: An automated dynamic analysis framework for characterizing
Android applications
What is the work's evaluation of the proposed
solution
Dataset
We used 1226 real malware samples from 49 families of the Malgenome
Project malware dataset. Furthermore, a set of 1000 internally vetted benign
APKs from McAfee Labs were utilized.
Experiment 1: evaluating high level behaviour
features
Experiment 2: evaluating extended features and
sandbox enhancements within DynaLog
1717
8.16 DynaLog: An automated dynamic analysis framework for characterizing
Android applications
Results
1718
8.16 DynaLog: An automated dynamic analysis framework for characterizing
Android applications
What is your analysis of the identified problem,
idea and evaluation
DynaLog suffers from the same limitations of other dynamic analysis tools.
Sophisticated Android malware employ detection avoidance techniques in
order to hide their malicious activities from analysis tools.
DynaLog does not log output from native code.
What are the contributions
We present DynaLog, a dynamic analysis framework to enable automated
analysis of Android applications.
We present extensive experimental evaluation of DynaLog using real
malware samples and clean applications in order to validate the framework
and measure its capability to enable identification of malicious behaviour
through the extracted behavioural features.
What are future directions for this research
For future work we intend to develop and couple classification engines that can
utilize the extensive features of DynaLog for accurate identification of malware
samples. Furthermore, we intend to enhance the framework to improve its
1719
8.16 DynaLog: An automated dynamic analysis framework for characterizing
Android applications
robustness against anti-analysis techniques employed by some malware whilst
also incorporating new feature sets to improve the overall analysis and detection
capabilities.
What questions are you left with
1720
8.17 A Static Android Malware Detection Based on Actual Used Permissions
Combination and API Calls
8.17 A Static Android Malware Detection
Based on Actual Used Permissions
Combination and API Calls
paper
What is your take-away message from this
paper
The paper put forward a machine learning detection method that based on the
actually used Permissions Combination and API calls.
What are motivations for this work
Android development
Current Android system has not any restrictions to the number of permissions that
an application can request, developers tend to apply more than actually needed
permissions in order to ensure the successful running of the application, which
results in the abuse of permissions.
Current methods
Some traditional detection methods only consider the requested permissions and
ignore whether it is actually used, which lead to incorrect identification of some
malwares.
What is the proposed solution
We present a machine learning detection method which is based on the
actually used permission combinations and API calls.
1721
8.17 A Static Android Malware Detection Based on Actual Used Permissions
Combination and API Calls
The framework contains mainly four parts:
1. Extracting AndroidManifest.xml and Smali codes by Apktool.
2. Firstly, extracting the permissions that declared in AndroidManifest.xml.
Secondly, extracting API calls through scanning Smali codes in according
with the mapping relation between permissions and API, and get the actually
used permissions. Finally, obtaining the actually used permissions
combination based on the single permission.
3. Generating feature vector, each application is represented as an instance.
4. Using five machine learning classification algorithms, including J48, Random
Forest, SVM, KNN and AdaboostM1, to realize the classification and
evaluation for applications.
What is the work's evaluation of the proposed
solution
Data Set
The authors collected a total of 2375 Android applications. the 1170 malware
samples are composed of 23 families from genetic engineering. 1205 benign
samples are from Google officail market.
Results
1722
8.17 A Static Android Malware Detection Based on Actual Used Permissions
Combination and API Calls
We evaluate the classification performance of five different algorithms in
terms of feature sets that have been extracted from applications, including
API calls, permissions combination, the combination of actually used
permissions combination and API calls, requested permissions. Inaddition,
information gain and CFS feature selection algorithms are used to select the
useful features to improve the efficiency of classifiers.
From the feature extraction, there is some differences between requested
permissions and actually used permissions, it is imporant to improve the
efficiency:
1723
8.17 A Static Android Malware Detection Based on Actual Used Permissions
Combination and API Calls
The experiments show that the feature of actually used permissions combination
an API calls can achieve better performance:
1724
8.17 A Static Android Malware Detection Based on Actual Used Permissions
Combination and API Calls
What is your analysis of the identified problem,
idea and evaluation
The main idea of the paper is useing actually uesd permissions instead of
declared permissons. But PScout can't get the whole mapping of permissons and