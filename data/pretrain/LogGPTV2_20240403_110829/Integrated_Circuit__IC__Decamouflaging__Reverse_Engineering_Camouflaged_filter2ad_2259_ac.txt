36
3
3
3
35
178
207
35
19
38
Outputs
7
6
6
6
23
123
108
49
22
304
Gates
160
133
164
181
393
2406
3512
2779
5597
19234
Camouﬂaged
10
6
7
7
9
63
65
56
79
128
TABLE II.
TIME TO DECAMOUFLAGE USING OUR ATTACK AND BRUTE
FORCE ATTACK ON SMALL BENCHMARK CIRCUITS CAMOUFLAGED USING
LARGEST CLIQUE.
B’mark
c432
s298
s400
s444
s713
Our Attack
0.42 s
0.13 s
0.14 s
0.2 s
0.79 s
Brute Force [20]
59 µs
729 ns
2 µs
2 µs
19 µs
Fig. 5.
Time to decamouﬂage (in seconds) using our attack on large
benchmark circuits camouﬂaged using (a) the largest-clique technique, and
(b) random selection of camouﬂaged gates (average, max, min). Also shown
is the estimated time it would take (in years) for a brute force attack to succeed
when largest-clique camouﬂaging is used.
In addition to the ISCAS benchmark circuits (although with
the exception of s38584), prior work [20] has camouﬂaged
certain controller modules from the openSPARC core. How-
ever, canonical gate-level netlists for these are not available.
the s38584 benchmark has 1.5× more gates
Nonetheless,
than the largest openSPARC controller module that has been
considered by prior work.
Our Attack Vs. Brute Force Attack Our ﬁrst goal is to
demonstrate that our attack procedure effectively decamou-
ﬂages circuits that are camouﬂaged using the largest clique
technique. The existing claim is that to decamouﬂage these
circuits, a brute force attack is necessary, and the time com-
plexity of the brute force attack is exponential in the number
of camouﬂaged gates [20].
In this experiment, we camouﬂaged the same number of
gates as in prior work. These numbers are shown in the last
column of Table I. We chose the gates to be camouﬂaged using
both largest clique and random camouﬂaging. We discuss our
results ﬁrst for the small benchmark circuits, and then for the
larger benchmarks.
For the ﬁve small benchmark circuits, even brute force
attacks take within one second to succeed. Thus, results on
these benchmarks are not very meaningful, but we nonetheless
note that, our attacks are also in the sub-second range. It is
worthwhile to note that for c432, we additionally performed
an experiment in which we camouﬂaged all 160 gates, and
were still successfully able to decamouﬂage the circuit using
our attack. This suggests that no matter how gates in c432 are
selected for camouﬂaging, it can always be decamouﬂaged by
our attack.
Fig. 6.
Number of discriminating inputs for large benchmark circuits
camouﬂaged using (a) the largest clique technique, and (b) random selection
of camouﬂaged gates (average, max, min).
•
•
Our attack is always able to successfully decamouﬂage
circuits regardless of whether largest clique or random
camouﬂaging is used. In all instances, our attack suc-
ceeded in less than 2500 seconds (about 40 minutes).
This is in stark contrast to the estimates for a brute
force attack, which range from 1010 to 1041 years.
In addition, the largest clique camouﬂaging technique
seems to offer no more security than random camou-
ﬂaging from the standpoint of our attack. For two of
the ﬁve benchmarks (c7552 and c38584), the average
time to decamouﬂage randomly camouﬂaged circuits
is greater than the time taken when largest clique
camouﬂaging is used.
Figure 5 shows the time taken to decamouﬂage the ﬁve
large benchmark circuits using our attack and the estimates of
how long a brute force attack would take as reported in prior
work [20]. Several observations can be made:
Why are we so successful?
The success of our attack can
be explained via Figure 6, which plots the size of the discrim-
inating set of input patterns, i.e., the number of inputs that we
had to apply to the black-box circuits, in our attack. Across
9
0500100015002000250030003500c5315c7552s5378s9234s38584OurattackonthelargestcliquetechniqueOurattackonrandomlycamouflagedgates(average)BruteforceattackTimetodecamouﬂage(seconds)> 1013 years> 1014  years> 1010  years> 1021  years> 1041  years010203040506070c5315c7552s5378s9234s38584LargestcliqueRandomlycamouflagedgates(average)Number of discriminating inputsto escape the intractability that is inherent in DISC-SET-DEC and
COMPLETION-DEC.
Sequential Circuits with Partial or No Scan Chains Our
attack procedure assumes the target chip is equipped with a
scan chain which allows the user to set and observe memory
elements within the IC. If the target IC does not have a full
scan design, i.e., the chip contains ﬂip-ﬂops that are not part of
the scan chain, it is unreasonable to expect that the attacker can
easily control all internal signals signals of the circuit — this
is known to be even more difﬁcult for circuits with memory
elements than it is for combinational circuits. Hence, our attack
procedure would need to be altered accordingly. We describe
below one way of doing this and leave an investigation as to
the effectiveness of the technique as a topic for future work.
We assume the all ﬂip-ﬂops in the chip that are not
connected into chains have the capability to be forced to a
certain state, set or reset, which is not necessarily the same
for all ﬂip-ﬂops. The attacker starts by unrolling the sequential
circuit one time, i.e., he removes ﬂip-ﬂops in the circuit that
are not connected into a chain and adds, for each removed
ﬂip-ﬂop, an input wire that drives each of the gates that were
driven by the output of the removed ﬂip-ﬂop.
The attacker then follows Algorithm 1 to determine a
discriminating set for the 1-time unrolled circuit, but now
he (1) forces the NOT-DISC-SET-DEC solver to return an input
pattern that assigns either 0 or 1 (depending on whether the
respective ﬂip-ﬂop has the capability to be forced into a
reset/set state) to the present-state lines of the unrolled circuit
(this can be done in the implementation by simply clearing
the corresponding CNF-SAT variables), and (2) he constrains
candidate completions for a discriminating set to agree with
each other on the next state (as well as output).
When the solver returns with a certiﬁcate, the attacker
applies the primary-input part of the returned input pattern to
the chip and observes the circuit output. Note that the attacker
does not need to worry about setting any ﬂip-ﬂops that are
not connected into chains. Whichever discriminating set the
attacker gets at the algorithm’s termination, he is guaranteed
that every candidate completion for it agrees with the black-
box — on both output and next-state behavior — when ﬂip-
ﬂops are initially in the set or reset state. Beginning with this
discriminating set as input to the NOT-DISC-SET-DEC solver, the
attacker then unrolls the circuit twice and follows the attack
procedure again to get a discriminating input set for the 2-
unrolled circuit.
The attacker repeats this d times, where d is the diameter
of the circuit’s FSM, after which he arrives at a discriminating
set for the original circuit. He then uses this discriminating set
to generate a correct completion that agrees with the black-box
on all inputs and intitial memory states. If the attacker does not
know d for certain, but can estimate it, based on knowledge
of circuit’s function or familiarity with hardware, then he can
decide to stop after that many steps with some conﬁdence that
he has reverse engineered the circuit.
VI. RELATED WORK
Several techniques exist to probe the inner structure of
an IC in order to determine its functionality. These include
scanning electron microscopy (SEM) based imaging [15] and
the physical delayering that companies like Chipworks and
Degate perform [7], [10]. Torrance et al. [27] provide an
excellent overview of these techniques.
To protect against such attacks, several IP protection mech-
anisms have been proposed based on the same basic idea —
to physically implement digital gates in a way so they look
indistinguishable to a reverse engineer regardless of their true
functionality. These mechanisms include the use of doped
implants, channel stops and incomplete vias to prevent an
attacker from determining that two transistors are connected,
or alternatively to lead an attacker to believe two transistors
are connected when they are not [3], [9]. Our decamouﬂaging
attack would work, in principle, for any of these camouﬂaging
techniques.
Similar to IC camouﬂaging, recent work [4], [17] proposes
to insert programmable logic blocks (similar to those used
in ﬁeld programmable gate arrays or FPGAs) to hide part
of the design intent. As opposed to a camouﬂaged gate, a
programmable logic block can implement any k-input function.
As we have discussed in Section V, the ability to implement
any k-input Boolean function increases the difﬁculty of IC
decamouﬂaging, but also comes at signiﬁcantly increased cost.
With a similar intent to protect IP, key-based obfuscation
techniques have been proposed. These techniques augment a
circuit with an additional set of inputs (key bits) and ensure
that the the circuit outputs correct values only when the correct
key is applied [19], [22]. In theory, our decamouﬂaging attack
can be used to defeat key based obfuscation as well, given
access to input-output pairs from a functional circuit. In fact,
a camouﬂaged gate can be thought of as a compound logic
gate with one or more key bits as input that determine its
functionality. This can be observed in Figure 4, where the
input to the 2:1 MUX serves as a key bit. Nonetheless, we do
not address key-based circuit obfuscation in this work.
While IC camouﬂaging is meant to obfuscate the design
intent for an attacker in the ﬁeld (i.e., after the IC has been
shipped out), there have also been recent attempts to obfuscate
the circuit netlist in the context of a malicious entity in an
IC foundry (fabrication facility). This can accomplished via
split manufacturing [13], [21], i.e., fabricating only a part of
the IC in an insecure foundry. Here, the attacker makes use
of structural properties of the circuit to reverse engineer the
missing gates and wires, instead of the functional properties
as is done for IC decamouﬂaging.
In an entirely different problem domain, there has been
work also on oracle-guided program synthesis [14]. That
work optimizes implementations of bit-manipulating programs
by iteratively applying an SMT solver to ﬁnd a candidate
implementation that agrees with a reference implementation