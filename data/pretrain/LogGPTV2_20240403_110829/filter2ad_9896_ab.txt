            $str = str_replace("",$str);
            $str = str_replace(chr(10), "",$str);
            $str = str_replace(chr(92), "",$str);      //新增修复代码
        }
        return $str;
    }
反斜杠的ascii码是92，这里新增一行代码处理反斜杠。
## 结语
看完了上述分析，不知道大家是否对 **htmlentities** 函数在使用过程中可能产生的问题，有了更加深入的理解，文中用到的代码可以从
[这里](https://www.lanzous.com/i1qm24f)
下载，当然文中若有不当之处，还望各位斧正。如果你对我们的项目感兴趣，欢迎发送邮件到 PI:EMAIL 联系我们。 **Day13**
的分析文章就到这里，我们最后留了一道CTF题目给大家练手，题目如下：
    //index.php
     $val) {
                  $string[$key] = dhtmlspecialchars($val);
              }
          }
          else {
              $string = str_replace(array('&', '"', '', '(', ')'), array('&amp;', '&quot;', '&lt;', '&gt;', '（', '）'), $string);
              if (strpos($string, '&amp;#') !== false) {
                  $string = preg_replace('/&amp;((#(\d{3,5}|x[a-fA-F0-9]{4}));)/', '&\\1', $string);
              }
          }
          return $string;
      }
      function dowith_sql($str) {
          $check = preg_match('/select|insert|update|delete|\'|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile/is', $str);
          if ($check) {
              echo "非法字符!";
              exit();
          }
          return $str;
      }
      // 经过第一个waf处理
      foreach ($_REQUEST as $key => $value) {
          $_REQUEST[$key] = dowith_sql($value);
      }
      // 经过第二个WAF处理
      $request_uri = explode("?", $_SERVER['REQUEST_URI']);
      if (isset($request_uri[1])) {
          $rewrite_url = explode("&", $request_uri[1]);
          foreach ($rewrite_url as $key => $value) {
              $_value = explode("=", $value);
              if (isset($_value[1])) {
                  $_REQUEST[$_value[0]] = dhtmlspecialchars(addslashes($_value[1]));
              }
          }
      }
      // 业务处理
      if (isset($_REQUEST['submit'])) {
          $user_id = $_REQUEST['i_d'];
          $sql = "select * from ctf.users where id=$user_id";
          $result=mysql_query($sql);
          while($row = mysql_fetch_array($result))
          {
              echo "";
              echo "" . $row['name'] . "";
              echo "";
          }
      }
    ?>
    //db.inc.php
    //ctf.sql
    # Host: localhost  (Version: 5.5.53)
    # Date: 2018-08-18 21:42:20
    # Generator: MySQL-Front 5.3  (Build 4.234)
    /*!40101 SET NAMES utf8 */;
    #
    # Structure for table "users"
    #
    DROP TABLE IF EXISTS `users`;
    CREATE TABLE `users` (
      `Id` int(11) NOT NULL AUTO_INCREMENT,
      `name` varchar(255) DEFAULT NULL,
      `pass` varchar(255) DEFAULT NULL,
      `flag` varchar(255) DEFAULT NULL,
      PRIMARY KEY (`Id`)
    ) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
    #
    # Data for table "users"
    #
    /*!40000 ALTER TABLE `users` DISABLE KEYS */;
    INSERT INTO `users` VALUES (1,'admin','qwer!@#zxca','hrctf{R3qu3st_Is_1nterEst1ng}');
    /*!40000 ALTER TABLE `users` ENABLE KEYS */;
## 参考文章
[PHP的两个特性导致waf绕过注入](https://blog.csdn.net/u011721501/article/details/51824576)
[request导致的安全性问题分析](https://blog.spoock.com/2018/05/05/request-vuln-analysis/)