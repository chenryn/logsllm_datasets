public void set（boolean value）{
this.value=value；
}
public boolean get（）{
return value；
}
public void readFields（DataInput in）throws IOException{
value=in.readBoolean（）；
}
public void write（DataOutput out）throws IOException{
out.writeBoolean（value）；
}
public boolean equals（Object o）{
if（！（o instanceof BooleanWritable））{
return false；
}
BooleanWritable other=（BooleanWritable）o；
return this.value==other.value；
}
public int hashCode（）{
return value?0：1；
}
public int compareTo（Object o）{
boolean a=this.value；
boolean b=（（BooleanWritable）o）.value；
return（（a==b）?0：（a==false）?-1：1）；
}
public String toString（）{
return Boolean.toString（get（））；
}
public static class Comparator extends WritableComparator{
public Comparator（）{
super（BooleanWritable.class）；
}
public int compare（byte[]b1，int s1，int l1，
byte[]b2，int s2，int l2）{
boolean a=（readInt（b1，s1）==1）?true：false；
boolean b=（readInt（b2，s2）==1）?true：false；
return（（a==b）?0：（a==false）?-1：1）；
}
}
static{
WritableComparator.define（BooleanWritable.class, new Comparator（））；
}
}
可以看到Hadoop直接将boolean写入到字节流（out.writeBoolean（value））中了，并没有采用Java的序列化机制。同时，除了构造函数、set（）函数、get（）函数等外，Hadoop还定义了三个用于比较的函数：equals（）、compareTo（）、compare（）。前两个很简单，第三个就是前文中重点介绍的比较器。Hadoop中封装定义的其他Java基本数据类型（如Boolean、byte、int、float、long、double）都是相似的。
如果大家对Java流处理比较了解的话可能会知道，Java流处理中并没有DataOutput.writeVInt（）。实际上，这是Hadoop自己定义的变长类型（VInt, VLong），而且VInt和VLong的处理方式实际上是一样的。
public static void writeVInt（DataOutput stream, int i）throws IOException{
writeVLong（stream, i）；
}
Hadoop对VLong类型的处理方法如下：
public static void writeVLong（DataOutput stream, long i）throws IOException{
if（i＞=-112＆＆i＜=127）{
stream.writeByte（（byte）i）；
return；
}
int len=-112；
if（i＜0）{
i^=-1L；//take one's complement'
len=-120；
}
long tmp=i；
while（tmp！=0）{
tmp=tmp＞＞8；
len--；
}
stream.writeByte（（byte）len）；
len=（len＜-120）?-（len+120）：-（len+112）；
for（int idx=len；idx！=0；idx--）{
int shiftbits=（idx-1）*8；
long mask=0xFFL＜＜shiftbits；
stream.writeByte（（byte）（（i＆mask）＞＞shiftbits））；
}
}
上面代码的意思是如果数值较小（在-112和127之间），那么就直接将这个数值写入数据流内（stream.writeByte（（byte）i））。如果不是，则先用len表示字节长度与正负，并写入数据流中，然后在其后写入这个数值。
（2）其他类
下面将按照先易后难的顺序一一讲解。
1）NullWritable。这是一个占位符，它的序列化长度为零，没有数值从流中读出或是写入流中。
public void readFields（DataInput in）throws IOException{}
public void write（DataOutput out）throws IOException{}
在任何编程语言或编程框架时，占位符都是很有用的，这个类型不可以和其他类型比较，在MapReduce，你可以将任何键或值设为空值。
2）BytesWritable和ByteWritable。ByteWritable是一个二进制数据的封装。它的所有方法都是基于单个Byte来处理的。BytesWritable是一个二进制数据数组的封装。它对输出流的处理如下所示：
public BytesWritable（byte[]bytes）{
this.bytes=bytes；
this.size=bytes.length；
}
public void write（DataOutput out）throws IOException{
out.writeInt（size）；
out.write（bytes，0，size）；
}
可以看到，它首先会把这个二进制数据数组的长度写入输入流中，这个长度一般是在声明时所获得的二进制数据数组的实际长度。当然这个值也可以人为设定。如果要把长度为3、位置为129的字节数组序列化，根据程序可知，结果应为：
Size=00000003 bytes[]={（01），（02），（09）}
数据流中的值就是：
00000003010209
3）Text。这可能是这几个自定义类型中相对复杂的一个了。实际上，这是Hadoop中对string类型的重写，但是又与其有一些不同。Text使用标准的UTF-8编码，同时Hadoop使用变长类型VInt来存储字符串，其存储上限是2GB。
Text类型与String类型的主要差别如下：
String的长度定义为String包含的字符个数；Text的长度定义为UTF-8编码的字节数。
String内的indexOf（）方法返回的是char类型字符的索引，比如字符串（1234），字符3的位置就是2（字符1的位置是0）；而Text的find（）方法返回的是字节偏移量。
String的charAt（）方法返回的是指定位置的char字符；而Text的charAT（）方法需要指定偏移量。
另外，Text内定义了一个方法toString（），它用于将Text类型转化为String类型。
看如下这个例子：
package cn.edn.ruc.cloudcomputing.book.chapter07；
import java.io.*；
import org.apache.hadoop.io.*；
public class MyMapre{
public static void strings（）{
String s="\u0041\u00DF\u6771\uD801\uDC00"；
System.out.println（s.length（））；
System.out.println（s.indexOf（"\u0041"））；
System.out.println（s.indexOf（"\u00DF"））；
System.out.println（s.indexOf（"\u6771"））；
System.out.println（s.indexOf（"\uD801\uDC00"））；
}
public static void texts（）{
Text t=new Text（"\u0041\u00DF\u6771\uD801\uDC00"）；
System.out.println（t.getLength（））；
System.out.println（t.find（"\u0041"））；
System.out.println（t.find（"\u00DF"））；
System.out.println（t.find（"\u6771"））；
System.out.println（t.find（"\uD801\uDC00"））；
}
public static void main（String args[]）{
strings（）；
texts（）；
}
}
输出结果为
5
0
1
2
3
10
0
1
3
6
上面例子可以验证前面所列的那些差别。
4）ObjectWritable。ObjectWritable是一种多类型的封装。可以适用于Java的基本类型、字符串等。不过，这并不是一个好方法，因为Java在每次被序列化时，都要写入被封装类型的类名。但是如果类型过多，使用静态数组难以表示时，采用这个类仍是不错的做法。
5）ArrayWritable和TwoDArrayWritable。ArrayWritable和TwoDArrayWritable，顾名思义，是针对数组和二维数组构建的数据类型。这两个类型声明的变量需要在使用时指定类型，因为ArrayWritable和TwoDArrayWritable并没有空值的构造函数。
ArrayWritable a=new ArrayWritable（IntWritable.class）
同样，在声明它们的子类时，必须使用super（）来指定ArrayWritable和TwoDArrayWritable的数据类型。
public class IntArrayWritable extends ArrayWritable{
public IntArrayWritable（）{