现在运行应用程序，可以看到颜色随着鼠标的移动和单击而变化。
30.9.2 定义自定义状态
使用VisualStateManager可以定义定制的状态，使用VisualStateGroup和VisualState的状
态可以定义定制的状态组。下面的代码片段在CustomStates组内创建了Enabled和Disabled
状态。可视化状态在主窗口的网格中定义。改变状态时，Button元素的IsEnabled属性使用
DiscreteObjectKeyFrame动画立即改变（代码文件VisualStatesUWP / MainPage.xaml）：
                False
                False
30.9.3 设置自定义的状态
现在需要设置状态。为此，可以调用VisualStateManager类的GoToState方法。在代码
隐藏文件中，OnEnable和OnDisable方法是页面上两个按钮的Click事件处理程序（代码文
件VisualStatesUWP/ MainPage.xaml.cs）：
    private void OnEnable(object sender, RoutedEventArgs e)
    {
      VisualStateManager.GoToState(this, "Enabled", useTransitions: true);
    }
    private void OnDisable(object sender, RoutedEventArgs e)
    {
      VisualStateManager.GoToState(this, "Disabled", useTransitions: true);
    }
在真实的应用程序中，可以以类似的方式更改状态，例如执行网络调用时，用户不应
该处理页面内的一些控件。用户仍应被允许单击取消按钮。通过改变状态，还可以显示进
度信息。
30.10 小结
本章介绍了样式化WPF和UWP应用程序的许多功能。XAML便于分开开发人员和设
计人员的工作。所有UI功能都可以使用XAML创建，其功能用代码隐藏文件创建。
我们还探讨了许多形状和几何图形元素，它们是后面几章学习的所有其他控件的基
础。基于矢量的图形允许XAML元素缩放、剪切和旋转。
可以使用不同类型的画笔绘制背景和前景元素，不仅可以使用纯色画笔、线性渐变或
放射性渐变画笔，而且可以使用可视化画笔完成反射功能或显示视频。
第31章
模式和XAML应用程序
本章要点
● 共享代码
● 创建模型
● 创建存储库
● 创建视图模型
● 定位器
● 依赖注入
● 视图模型间的消息传递
● 使用IoC容器
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● Books Desktop App （WPF）
● Books Universal App （UWP）
31.1 使用MVVM的原因
技术和框架一直在改变。我用ASP.NET 
Web 
Forms创建了公司网站的第1版
（http://www.cninnovation.com）。在ASP.NET MVC出现时，我试着把网站的功能迁移到
MVC。进度比预期的要快得多。一天之内就把完整的网站改为MVC。该网站使用SQL
Server，集成了RSS提要，显示了培训和图书。关于培训和图书的信息来自SQL 
Server数
据库。可以快速迁移到ASP.NET MVC，只是因为我从一开始就分离了关注点，为数据访
问和业务逻辑创建了独立的层。有了ASP.NET Web Forms，可以在ASPX页面中直接使用
数据源和数据控件。分离数据访问和业务逻辑，一开始花了更多的时间，但它变成一个巨
大的优势，因为它允许单元测试和重用。因为以这样的方式进行分离，所以移动到另一个
技术真是太容易了。
对于Windows应用程序，技术也变得很快。多年来，Windows Forms技术包装了本地
Windows控件，来创建桌面应用程序。之后出现了Windows 
Presentation
Foundation（WPF），在其中用户界面使用XML 
for 
Applications 
Markup 
Language
（XAML）定义。Silverlight为在浏览器中运行的、基于XAML的应用程序提供了一个轻
量级的框架。Windows Store应用程序随着Windows 8而出现，在Windows 8.1中改为通用
Windows应用程序，运行在个人电脑和Windows Phone上。在Windows 8.1和Visual Studio
2013中，创建了三个带有共享代码的项目，同时支持个人电脑和手机。接着又变成Visual
Studio 2015、Windows 10、通用Windows平台（UWP）。一个项目可以支持个人电脑、手
机、Xbox One、Windows IoT、带有Surface Hub的大屏幕，甚至Microsoft的HoloLens。
一个支持所有Windows 10平台的项目可能不满足需求。可以编写一个仅支持Windows
10的程序吗？一些客户可能仍在运行Windows 7。在这种情况下，应使用WPF，但它不支
持手机和其他Windows 10设备。如何支持Android和iOS？在这里，可以使用Xamarin创建
C#和.NET代码，但它是不同的。
目标应该是使尽可能多的代码重用，支持所需的平台，很容易从一种技术切换到另一
种。这些目标（在许多组织中，管理和开发部门加入DevOps，会很快给用户带来新的功
能，修复缺陷）要求自动化测试。单元测试是必须的，应用程序体系结构需要支持它。
  注意： 单元测试参见第19章。
有了基于XAML的应用程序，Model-View-ViewModel（MVVM）设计模式便于分离
视图和功能。该设计模式是由Expression Blend团队的John Gossman发明，能更好地适应
XAML，改进了Model-View-Controller （MVC）和Model-View-Presenter（MVP）模式，
因为它使用了XAML的首要功能：数据绑定。
有了基于XAML的应用程序，XAML文件和后台代码文件是紧密耦合的。这很难重用
后台代码，单元测试也很难做到。为了解决这个问题，人们提出了MVVM模式，它允许
更好地分离用户界面和代码。
原则上，MVVM模式并不难理解。然而，基于MVVM模式创建应用程序时，需要注
意更多的需求：几个模式会发挥作用，使应用程序工作起来，使重用成为可能，包括依赖
注入机制独立于视图模型的实现和视图模型之间的通信。
本章介绍这些内容，有了这些信息，不仅可以给Windows应用程序和桌面应用程序使
用相同的代码，还可以在Xamarin的帮助下把它用于iOS和Android。本章给出一个示例应
用程序，其中包括了所有不同的方面和模式，实现很好的分离，支持不同的技术。
31.2 定义MVVM模式
首先看看MVVM模式的起源之一：MVC设计模式。Model-View-Controller （MVC）
模式分离了模型、视图和控制器（见图31-1）。模型定义视图中显示的数据，以及改变和
操纵数据的业务规则。控制器是模型和视图之间的管理器，它会更新模型，给视图发送要
显示的数据。当用户请求传入时，控制器就采取行动，使用模型，更新视图。
图31-1
  注意： MVC模式大量用于ASP.NET MVC，参见第41章。
通过Model-View-Presenter（MVP）模式（见图31-2），用户与视图交互操作。显示
程序包含视图的所有业务逻辑。显示程序可以使用一个视图的接口作为协定，从视图中解
除耦合。这样就很容易改变单元测试的视图实现。在MVP中，视图和模型是完全相互隔
离的。
图31-2
基于XAML的应用程序使用的主要模式是Model-View-ViewModel模式（MVVM）
（见图31-3）。这种模式利用数据绑定功能与XAML。通过MVVM，用户与视图交互。视
图使用数据绑定来访问视图模型的信息，并在绑定到视图上的视图模型中调用命令。视图
模型没有对视图的直接依赖项。视图模型本身使用模型来访问数据，获得模型的变更信
息。
图31-3
本章的下面几节介绍如何使用这个架构与应用程序创建视图、视图模型、模型和其他
需要的模式。
31.3 共享代码
在创建这个示例解决方案，开始创建模型之前，需要回过头来看看不同的选项如何在
不同的平台之间共享代码。本节讨论不同选项，考虑需要支持的不同平台和所需要的
API。
31.3.1 使用API协定和通用Windows平台
通用Windows平台定义了一个可用于所有Windows 
10设备的API。然而，这个API在
新版本中会改变。使用Project Properties中的Application设置（参见图31-4），可以定义应
用程序的目标版本（这是要构建的版本）和系统所需的最低版本。所选Software
Developer Kits （SDK）的版本需要安装在系统上，才能验证哪些API可用。为了使用目标
版本中最低版本不可用的特性，需要在使用API之前，以编程方式检查设备是否支持所需
要的具体功能。
图31-4
通过UWP可以支持不同的设备系列。UWP定义了几种设备系列：通用、桌面
（PC）、手机（平板电脑、phablet、手机）、物联网（Raspberry Pi、Microsoft Band）、
Surface Hub、Holographic （HoloLens）以及Xbox。随着时间的推移，会出现更多的设备
系列。这些设备系列提供的API只能用于这个系列。通过API协定指定设备系列的API。每
个设备系列可以提供多个API协定。
可以使用设备系列特有的特性，也可以创建运行在所有设备上的二进制图像。通常情
况下，应用程序不支持所有的设备系列，可能支持其中的一些。为了支持特定的设备系
列，使用这些系列的API，可以在Solution 
Explorer中添加一个Extension 
SDK；选择
References | Add Reference，然后选择Universal Windows | Extensions （参见图31-5）。在
那里可以看到安装的SDK，并选择需要的SDK。
图31-5
选择Extension 
SDK后，验证API协定是否可用，就可以在代码中使用API。
ApiInformation类（名称空间Windows.Foundation.Metadata）定义了IsApiContractPresent方
法，在其中可以检查特定主次版本的API协定是否可用。下面的代码片段需要
Windows.Phone.PhoneContract的主版本1。如果本协定可用，就可以使用VibrationDevice：
    if (ApiInformation.IsApiContractPresent("Windows.Phone.PhoneContract", 1))
    {
      VibrationDevice vibration = VibrationDevice.GetDefault();
      vibration.Vibrate(TimeSpan.FromSeconds(1));
    }
在所有地方检查API协定的代码是否非常复杂？其实，如果只针对单一设备系列，就
不需要检查API是否存在。在前面的示例中，如果应用程序只针对手机，就不需要检查
API。如果针对多个设备平台，就只需要检查特定于设备的API调用。可以使用通用的API
编写有用的应用程序，用于多个设备系列。如果用很多特定于设备的API调用支持多个设
备系列，建议避免使用ApiInformation，而应使用依赖注入，参见本章后面的一节“服务和
依赖注入”。
31.3.2 使用共享项目
对API协定使用相同的二进制只适用于通用Windows平台。如果需要分享代码，就不
能使用这个选项，例如，在带有WPF的Windows桌面应用程序和UWP应用程序之间，或
Xamarin.Forms应用程序和UWP应用程序之间。在不能使用相同二进制文件的地方创建这
些项目类型，就可以使用Visual Studio 2015的Shared Project模板。
使用Shared Project模板与Visual Studio创建的项目，没有建立二进制——没有建立程
序集。相反，代码在所有引用这个共享项目的项目之间共享。在每个引用共享项目的项目
中编译代码。
创建一个类，如下面的代码片段所示，这个类可用于引用共享项目的所有项目。甚至
可以通过预处理器指令使用特定于平台的代码。Visual Studio 2015的Universal Windows
App模板设置条件编译符号WINDOWS_UWP，以便将这个符号用于应该只为通用
Windows平台编译的代码。对于WPF，通过WPF项目把WPF添加到条件编译符号中。
    public partial class Demo
    {
      public int Id { get; set; }
      public string Title { get; set; }
    #if WPF
      public string WPFOnly { get; set; }
    #endif
    #if WINDOWS_UWP
      public string WinAppOnly {get; set; }
    #endif
    }
通过Visual Studio编辑器编辑共享代码，可以在左上方的栏中选择项目名称，灰显不
用于实际项目的部分代码（参见图31-6）。编辑文件时，智能感知功能还为所选的相应项
目提供了API。
图31-6
除了使用预处理器指令之外，还可以在WPF或通用Windows平台项目中保留类的不同
部分。所以要把类声明为partial。
  注意： C#的partial关键字参见第3章。
在WPF项目中定义相同的类名和相同的名称空间时，就可以扩展共享类。还可以使
用基类（假设共享项目没有定义基类）：
    public class MyBase
    {
      // etc.
    }
    public partial class Demo: MyBase
    {
      public string WPFTitle => $"WPF{Title}";
    }
31.3.3 使用移动库
共享代码的另一个选择是共享库。如果所有技术都可以使用.NET Core，这就是一个
简单的任务：创建一个.NET Core库，就可以在不同的平台之间共享它。如果需要支持的
技术可以利用NuGet包.NET Core，则最好使用它们。否则，就可以使用移动库。
  注意： 创建NuGet包参见第17章。
通过移动库，Microsoft维护了一个平台支持哪些API的大表。创建移动库时，所显示
的对话框可以配置需要支持的目标平台。图31-7显示选中了.NET 
Framework 
4.6、
Windows Universal 10.0、Xamarin.Android和Xamarin.iOS。选择了它们后，就限制了所有
选定的目标平台可用的API。对于当前的选择，可以在对话框中阅读注释，.NET
Framework 4.5、Windows 8和Xamarion.iOS （Classic）会自动成为目标平台，因为这些平
台的API都位于上述选项的交集中。
图31-7
移动库的主要缺点是任何代码都不能只用于特定的平台。对于所有选定的目标平台，
可以在所有地方使用可用的代码。解决这个问题的一个办法是，可以使用移动库为代码定
义协定，在需要的地方使用特定于平台的库实现协定。要在特定于平台的库中使用代码和
不特定于平台的库，可以使用依赖注入。如何做到这一点是本章更大示例的一部分，参
见“视图模型”一节。
31.4 示例解决方案
示例解决方案包括一个WPF和一个Universal Windows Platform应用程序，用于显示和
编辑一个图书列表。为此，解决方案使用如下项目：
● BooksDesktopApp——WPF项目，是桌面应用程序的UI，使用.NET Framework 4.6
● BooksUniversalApp——UWP应用程序项目，是现代应用程序的UI
● Framework——一个移动库，包含用于所有基于XAML的应用程序的类
● ViewModels——一个移动库，包含用于WPF和UWP的视图模型
● Services——一个移动库，包含视图模型使用的服务
● Models——一个移动库，包含共享模型
● Repositories——一个移动库，返回和更新项
● Contracts——一个移动库，用于使用依赖注入的协定接口
移动库用目标.NET Framework 4.6和Windows Universal 10.0配置。
图31-8显示了项目及其依赖关系。其他项目都需要Framework和Contracts。看看