whether off-the-shelf radios can generate and trans-
mit the packets appropriately.
Identi(cid:2)er characteristics. Tracking requires observing
identifying characteristics from a message, so that
multiple messages can be linked to the same vehi-
cle. The success of tracking is closely tied to the
answers to: (1) Are the sensor IDs used temporar-
ily or over long time intervals? (2) Does the length
of the sensor ID suf(cid:2)ce to uniquely identify a car?
Since the sensor IDs are meant to primarily identify
their positions in the car, they may not be globally
unique and may render tracking dif(cid:2)cult.
Transmission range and frequency. Tracking further
depends on whether a road-side tracking unit will be
likely to overhear a transmission from a car passing
at high speed. This requires understanding the range
and messaging frequency of packet transmissions.
To avoid interference between cars and to prolong
the battery life, the transmission powers of the sen-
sors are deliberately chosen to be low. Is it possible
to track vehicles with such low transmission power
combined with low messaging frequency?
Security measures. The ease of message spoo(cid:2)ng de-
pends on the use of security measures in TPMSs.
The key questions to make message spoo(cid:2)ng a prac-
tical threat include:
(1) Are messages authenti-
cated? (2) Does the vehicle use consistency checks
and (cid:2)ltering mechanisms to reject suspicious pack-
ets? (3) How long, if possible, does it take the ECU
to completely recover from a spoo(cid:2)ng attack?
3 Reverse Engineering TPMS Communi-
cation Protocols
Analyzing security and privacy risks begins with obtain-
ing a thorough comprehension of the protocols for spe-
ci(cid:2)c sensor systems. To elaborate, one needs to know
the modulation schemes, encoding schemes, and mes-
sage formats, in addition to the activation and reporting
4
is not necessary). The pressure sensor modules, trigger
tool, and software radio platform are shown in Figure 2.
3.1 Reverse Engineering Walk Through
While our public domain search resulted in only high-
level knowledge about the TPM communication proto-
col speci(cid:2)cs, anticipating sensor activity in the 315/433
MHz bands did provide us with a starting point for our
reverse engineering analysis.
We began by collecting a few transmissions from each
of the TPM sensors. The VSA was used to narrow down
the spectral bandwidth necessary for fully capturing the
transmissions. The sensors were placed close to the VSA
receiving antenna while we used the ATEQ VT55 to trig-
ger the sensors. Although initial data collections were
obtained using the VSA, the research team switched to
using the USRP to illustrate that our (cid:2)ndings (and subse-
quently our attacks) can be achieved with low-cost hard-
ware. An added bene(cid:2)t of using the USRP for the data
collections is that it is capable of providing synchronized
collects for the LF and HF frequency bands (cid:151) thus al-
lowing us to extract important timing information be-
tween the activation signals and the sensor responses. To
perform these collects, the TVRX and LFRX daughter-
boards were used to provide access to the proper radio
frequencies. Once the sensor bursts were collected, we
began our signal analysis in MATLAB to understand the
modulation and encoding schemes. The (cid:2)nal step was to
map out the message format.
Determine coarse physical
layer characteristics.
The (cid:2)rst phase of characterizing the sensors involved
measuring burst widths, bandwidth, and other physical
layer properties. We observed that burst widths were
on the order of 15 ms. During this initial analysis, we
noted that each sensor transmitted multiple bursts in re-
sponse to their respective activation signals. TPS-A used
4 bursts, while TPS-B responded with 5 bursts.
Indi-
vidual bursts in the series were determined to be exact
copies of each other, thus each burst encapsulates a com-
plete sensor report.
Identify the modulation scheme. Analysis of the
baseband waveforms revealed two distinct modulation
schemes.
TPS-A employed amplitude shift keying
(ASK), while TPS-B employed a hybrid modulation
scheme (cid:151) simultaneous usage of ASK and frequency
shift keying (FSK). We speculate that the hybrid scheme
is used for two reasons: (1) to maximize operability with
TPM readers and (2) to mitigate the effects of an adverse
channel during normal operation. Figure 3 illustrates the
differences between the sensors’ transmission in both the
time and frequency domains. The modulation schemes
are also observable in these plots.
Figure 2: Equipment used for packet snif(cid:2)ng. At the bottom,
from left to right are the ATEQ VT55 TPMS trigger tool, two
tire pressure sensors (TPS-A and TPS-B), and a low noise am-
pli(cid:2)er (LNA). At the top is one laptop connected with a USRP
with a TVRX daughterboard attached.
methodologies to properly decode or spoof sensor mes-
sages. Apart from access to an insider or the actual spec-
i(cid:2)cations, this information requires reverse-engineering
by an adversary. To convey the level of dif(cid:2)culty of this
process for in-car sensor protocols, we provide a brief
walk-through of our approach below, where we begin by
presenting relevant hardware.
Tire pressure sensor equipment. We selected two
representative tire pressure sensors that employ different
modulation schemes. Both sensors are used in automo-
biles with high market shares in the US. To prevent mis-
use of the information here, we refer to these sensors
simply as tire pressure sensor A (TPS-A) and tire pres-
sure sensor B (TPS-B). To help our process, we also ac-
quired a TPMS trigger tool, which is available for a few
hundred dollars. Such tools are handheld devices that
can activate and decode information from a variety of
tire sensor implementations. These tools are commonly
used by car technicians and mechanics for troubleshoot-
ing. For our experiments, we used a TPMS trigger tool
from ATEQ [8] (ATEQ VT55).
Raw signal sniffer. Reverse engineering the TPMS
protocols requires the capture and analysis of raw sig-
nal data. For this, we used GNU Radio [2] in con-
junction with the Universal Software Radio Peripheral
(USRP) [1]. GNU Radio is an open source, free software
toolkit that provides a library of signal processing blocks
that run on a host processing platform. Algorithms im-
plemented using GNU Radio can receive data directly
from the USRP, which is the hardware that provides RF
access via an assortment of daughterboards. They in-
clude the TVRX daughterboard capable of receiving RF
in the range of 50 Mhz to 870 MHz and the LFRX daugh-
terboard able to receive from DC to 30 MHz. For con-
venience, we initially used an Agilent 89600 Vector Sig-
nal Analyzer (VSA) for data capture (but such equipment
5
TPS−A
TPS−B
preamble Sensor ID Pressure
Temperature
Flags
Checksum
0
−20
−40
−60
−80
)
B
d
(
e
d
u
t
i
n
g
a
M
−100 −50
50
Frequency (KHz)
0
e
d
u
t
i
n
g
a
M
d
e
z
i
l
a
m
r
o
N
1
0.5
0
−0.5
−1
2000
100
0
−20
−40
−60
−80
1
0.5
0
−0.5
−100 −50
50
Frequency (KHz)
0
100
2400
2100
2200
2300
Sample Number
−1
2000
2400
2100
2200
2300
Sample Number
Figure 3: A comparison of FFT and signal strength time series
between TSP-A and TSP-B sensors.
Resolve the encoding scheme. Despite the different
modulation schemes, it was immediately apparent that
both sensors were utilizing Manchester encoding (after
distinct preamble sequences). The baud rate is directly
observable under Manchester encoding and was on the
order of 5 kBd. The next step was to determine the bit
mappings from the Manchester encoded signal. In order
to accomplish this goal, we leveraged knowledge of a
known bit sequence in each message. We knew the sen-
sor ID because it was printed on each sensor and assumed
that this bit sequence must be contained in the message.
We found that applying differential Manchester decoding
generated a bit sequence containing the sensor ID.
Reconstructing the message format. While both
their
sensors used differential Manchester encoding,
packet formats differed signi(cid:2)cantly. Thus, our next step
was to determine the message mappings for the rest of
the bits for each sensor. To understand the size and mean-
ing of each bit(cid:2)eld, we manipulated sensor transmissions
by varying a single parameter and observed which bits
changed in the message. For instance, we adjusted the
temperature using hot guns and refrigerators, or adjusted
the pressure. By simultaneously using the ATEQ VT55,
we were also able to observe the actual transmitted val-
ues and correlate them with our decoded bits. Using this
approach, we managed to determine the majority of mes-
sage (cid:2)elds and their meanings for both TPS-A and TPS-
B. These included temperature, pressure, and sensor ID,
as illustrated in Figure 4. We also identi(cid:2)ed the use of
a CRC checksum and determined the CRC polynomials
through a brute force search.
At this point, we did not yet understand the meaning
of a few bits in the message. We were later able to recon-
struct these by generating messages with our software ra-
dio, changing these bits, and observing the output of the
6
Figure 4: An illustration of a packet format. Note the size is
not proportional to real packet (cid:2)elds.
TPMS tool or a real car. It turned out that these were pa-
rameters like battery status, over which we had no direct
control by purely manipulating the sensor module. More
details on message spoo(cid:2)ng are presented in Section 5.
3.2 Lessons Learned
The aforementioned reverse-engineering can be accom-
plished with a reasonable background in communica-
tions and computer engineering. It took a few days for
a PhD-level engineer experienced with reverse engineer-
ing to build an initial system. It took several weeks for an
MS-level student with no prior experience in reverse en-
gineering and GNU Radio programming to understand
and reproduce the attack. The equipment used (the
VTEQ VT55 and USRP attached with TVRX) is openly
available and costs $1500 at current market prices.
Perhaps one of the most dif(cid:2)cult issues involved baud
rate estimation. Since Manchester encoding is used, our
initial baud rate estimates involved averaging the gaps
between the transition edges of the signal. However, the
jitter (most likely associated with the local oscillators of
the sensors) makes it almost impossible to estimate a
baud rate accurate enough for a simple software-based
decoder to work correctly. To address this problem, we
modi(cid:2)ed our decoders to be self-adjustable to compen-
sate for the estimation errors throughout the burst.
The reverse engineering revealed the following obser-
vations. First, it is evident that encryption has not been
used(cid:151)which makes the system vulnerable to various at-
tacks. Second, each message contains a 28-bit or 32-bit
sensor ID depending on the type of sensor. Regardless
of the sensor type, the IDs do not change during the sen-
sors’ lifetimes.
Given that there are 254.4 million registered passenger
vehicles in United States [34], one 28-bit Sensor ID is
enough to track each registered car. Even in the future
when the number of cars may exceed 256 million, we
can still identify a car using a collection of tire IDs (cid:151)
a 4-tuple of tire IDs. Assuming a uniform distribution
across the 28-bit ID space, the probability of an exact
match of two cars’ IDs is 4!=2112 without considering
the ordering. To determine how many cars R can be on
the road in the US with a guarantee that there is a less
than P chance of any two or more cars having the same
ID-set, is a classical birthday problem calculation:
R = r 2113
4!
ln(
1
1 (cid:0) P
)
GnuRadio
usrp_rx_cfile.py
pipe
Packet
Detector
Demod
classifier
FSK Decoder
ASK Decoder
Temperature:xx
pressure: xx
Sensor ID: xx
Temperature:xx
pressure: xx
Sensor ID: xx
Figure 5: Block chart of the live decoder/eavesdropper.
To achieve a match rate of larger than P = 1%, more
than 1015 cars need to be on the road, which is signif-
icantly more than 1 billion cars. This calculation, of
course, is predicated on the assumption of a uniform al-
location across the 28-bit ID space. Even if we relax this
assumption and assume 20 bits of entropy in a single 28-
bit ID space, we would still need roughly 38 billion cars
in the US to get a match rate of more than P = 1%.
We note that this calculation is based on the unrealis-
tic assumption that all 38 billion cars are co-located, and
are using the same modulation and coding schemes. Ul-
timately, it is very unlikely to have two cars that would
be falsely mistaken for each other.
4 Feasibility of Eavesdropping
A critical question for evaluating privacy implications of
in-car wireless networks is whether the transmissions can
be easily overheard from outside the vehicle body. While
tire pressure data does not require strong con(cid:2)dentiality,
the TPMS protocols contain identi(cid:2)ers that can be used
to track the locations of a device. In practice, the proba-
bility that a transmission can be observed by a stationary
receiver depends not only on the communication range
but also on the messaging frequency and speed of the
vehicle under observation, because these factors affect
whether a transmission occurs in communication range.
The transmission power of pressure sensors is rela-
tively small to prolong sensor battery lifetime and reduce
cross-interference. Additionally, the NHTSA requires
tire pressure sensors to transmit data only once every 60
seconds to 90 seconds. The low transmission power, low
data report rate, and high travel speeds of automobiles
raise questions about the feasibility of eavesdropping.
In this section, we experimentally evaluate the range
of TPMS communications and further evaluate the feasi-
bility of tracking. This range study will use TPS-A sen-
sors, since their TPMS uses a four-antenna structure and
operates at a lower transmission power. It should there-
fore be more dif(cid:2)cult to overhear.
4.1 Eavesdropping System
During the reverse engineering steps, we developed
two Matlab decoders: one for decoding ASK mod-
ulated TPS-A and the other for decoding the FSK
modulated TPS-B. In order to reuse our decoders yet
be able to constantly monitor the channel and only