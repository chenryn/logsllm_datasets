# 四、Docker 卷
在本章中，我们将学习 Docker 卷的秘密。我们将学习如何在 Docker 容器中使用工作站上的文件夹，以及如何创建和使用持久卷，从而允许多个容器共享数据。我们将学习如何清理未使用的卷。为了完善这一章，我们将学习如何创建数据量容器来成为其他容器的卷源。
Approximately 675 shipping containers are lost at sea each year. In 1992, a 40 ft container full of toys actually fell into the Pacific Ocean and 10 months later some of its toys drifted ashore on the Alaskan coastline – [https://www.clevelandcontainers.co.uk/blog/16-fun-facts-about-containers](https://www.clevelandcontainers.co.uk/blog/16-fun-facts-about-containers)
在本章中，我们将涵盖以下主题:
*   什么是 Docker 卷？
*   创建 Docker 卷
*   移除 Docker 卷的两种方法
*   使用数据量容器在容器之间共享数据
# 技术要求
您将从 Docker 的公共报告中提取 Docker 映像，因此需要基本的互联网访问来执行本章中的示例。
本章代码文件可在 GitHub:
[https://GitHub . com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/chapter 04](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter04)
查看以下视频，查看正在运行的代码:
[http://bit.ly/2QqK78a](http://bit.ly/2QqK78a)
# 什么是 Docker 卷？
正如我们在[第 3 章](3.html)、*创建 Docker 映像*中了解到的，Docker 使用一个名为**联合文件系统**的特殊文件系统。这是 Docker 分层映像模型的关键，并且允许使用 Docker 的许多特性。然而，联合文件系统没有提供的一点是数据的持久存储。如果您还记得，Docker 映像的图层是只读的。当您从 Docker 映像运行容器时，Docker 守护程序会创建一个新的读写层，用于保存代表您的容器的所有实时数据。当您的容器对其文件系统进行更改时，这些更改会进入读写层。因此，当您的容器消失时，读写层也随之消失，容器对该层中的数据所做的任何和所有更改都将被删除并永远消失。这相当于非持久性存储。然而，请记住，总的来说这是一件好事。事实上，这是件好事。很多时候，这正是我们想要发生的。容器注定是短暂的，它们的状态数据也是短暂的。然而，持久数据有很多用例，比如购物网站的客户订单数据。如果一个容器坏了或者不得不重新堆叠，所有的订单数据都被丢弃，这将是一个非常糟糕的设计。
输入 Docker 卷。Docker 卷是一个完全在联合文件系统之外的存储位置。因此，它不受放置在映像只读层或容器读写层上的相同规则的约束。Docker 卷是一个存储位置，默认情况下，它位于运行使用该卷的容器的主机上。当容器因设计或灾难性事件而消失时，Docker 卷会保留下来，并可供其他容器使用。Docker 卷可以同时被多个容器使用。
描述 Docker 卷的最简单的方法是这样的:Docker 卷是存在于 Docker 主机上的文件夹，并且在运行的 Docker 容器中装载和访问。可访问性是双向的，允许从容器内部或文件夹所在的 Docker 主机上修改该文件夹的内容。
现在，这个描述有点一般化。使用不同的卷驱动程序，作为卷装载的文件夹的实际位置可以托管在 Docker 主机之外的某个地方。借助卷驱动程序，您可以在远程主机或云提供商上创建卷。例如，您可以使用 NFS 驱动程序在远程 NFS 服务器上创建 Docker 卷。
像 Docker 映像和 Docker 容器一样，卷命令代表它们自己的管理类别。如您所料，卷的顶级管理命令如下:
```
# Docker volume managment command
docker volume
```
卷管理组中可用的子命令包括:
```
# Docker volume management subcommands
docker volume create # Create a volume
docker volume inspect # Display information on one or more volumes
docker volume ls # List volumes
docker volume rm # Remove one or more volumes
docker volume prune          # Remove all unused local volumes
```
有几种不同的方法可以创建 Docker 卷，所以让我们通过创建一些来继续我们对 Docker 卷的研究。
# 参考
有关更多信息，请查看以下链接:
*   使用 Docker 卷的 Docker 参考:https://docs.docker.com/storage/volumes/
*   Docker 卷插件信息:https://docs . docker . com/engine/extend/plugins _ volume/
*   Docker 引擎卷插件:[https://docs . docker . com/engine/extend/legacy _ plugins/# volume-plugins](https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins)
# 创建 Docker 卷
有几种方法可以创建 Docker 卷。一种方法是使用`volume create`命令。该命令的语法如下:
```
# Syntax for the volume create command
Usage: docker volume create [OPTIONS] [VOLUME]
```
除了可选的卷名参数外，`create`命令还允许以下选项:
```
# The options available to the volume create command:
-d, --driver string         # Specify volume driver name (default "local")
--label list                # Set metadata for a volume
-o, --opt map               # Set driver specific options (default map[])
```
让我们从最简单的例子开始:
```
# Using the volume create command with no optional parameters
docker volume create
```
执行前面的命令将创建一个新的 Docker 卷，并为其分配一个随机名称。该卷将使用内置的本地驱动程序创建(默认情况下)。使用`volume ls`命令，您可以看到 Docker 守护进程为我们的新卷分配了什么随机名称。它看起来像这样:
![](img/2073a1d1-1f61-47c2-b94d-7e410c5854c4.png)
让我们更进一步，创建另一个卷，这次使用命令提供一个可选的卷名。该命令看起来如下所示:
```
# Create a volume with a fancy name
docker volume create my-vol-02
```
这一次，卷被创建，并按照要求被赋予名称`my-vol-02`:
![](img/eff9a8b0-13cb-4efb-8a08-f24ae1580c30.png)
这个卷仍然使用默认的本地驱动程序。使用本地驱动程序只是意味着这个卷所代表的文件夹的实际位置可以在 Docker 主机上本地找到。我们可以使用 volume inspect 子命令来查看该文件夹的实际位置:
![](img/39fe956e-5fdb-43a7-86d3-cd6ba89060b6.png)
正如您在前面的截图中看到的，卷的挂载点在 Docker 主机的文件系统上`/var/lib/docker/volumes/my-vol-02/_data`。请注意，文件夹路径归 root 所有，这意味着您需要提升权限才能从主机访问该位置。还要注意，这个例子是在 Linux 主机上运行的。
如果您正在使用 OS X，您需要记住您的 Docker 安装实际上是使用一个几乎无缝的虚拟机。接缝确实出现的一个领域是 Docker 卷的使用。在 OS X 主机上创建 Docker 卷时创建的装载点存储在虚拟机的文件系统中，而不是 OS X 文件系统中。当您使用 docker volume inspect 命令并看到卷装入点的路径时，它不是 OS X 文件系统上的路径，而是隐藏虚拟机文件系统上的路径。
有一种方法可以查看隐藏虚拟机的文件系统(和其他功能)。通过一个命令，通常被称为魔屏命令，您可以访问正在运行的 Docker 虚拟机。该命令如下所示:
```
# The Magic Screen command
screen ~/Library/Containers/com.docker.docker/Data
/com.docker.driver.amd64-linux/tty
# or if you are using Mac OS High Sierra
screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty
```
Use *Ctrl* + *AK* to kill the screen session.
You can detach with *Ctrl* + *A Ctrl* + *D,* then use `screen -r` to reconnect, but don't detach and then start a new screen session. Running more than one screen to the VM will give you tty garbage.
以下是访问在 OS X 主机上创建的卷的装载点的示例。以下是设置:
```
# Start by creating a new volume
docker volume create my-osx-volume
# Now find the Mountpoint
docker volume inspect my-osx-volume -f "{{json .Mountpoint}}"
# Try to view the contents of the Mountpoint's folder
sudo ls -l /var/lib/docker/volumes/my-osx-volume
# "No such file or directory" because the directory does not exist on the OS X host
```
这是设置的样子:
![](img/5b7d7fed-96dd-4ba6-9d30-0c538740bba6.png)
现在，下面是如何使用 magic screen 命令来完成我们想要的任务，即访问卷装载点:
```
# Now issue the Magic Screen command and hit  to get a prompt
screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty
# You are now root in the VM, and can issue the following command
ls -l /var/lib/docker/volumes/my-osx-volume
# The directory exists and you will see the actual Mountpoint sub folder "_data"
# Now hit control-a followed by lower case k to kill the screen session
k 
```
瞧...
![](img/5d6fff12-917a-40f8-9b3b-a3c66a9d51f4.png)