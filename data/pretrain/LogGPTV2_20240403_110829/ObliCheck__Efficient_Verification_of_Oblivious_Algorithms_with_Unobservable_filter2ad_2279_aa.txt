title:ObliCheck: Efficient Verification of Oblivious Algorithms with Unobservable
State
author:Jeongseok Son and
Griffin Prechter and
Rishabh Poddar and
Raluca Ada Popa and
Koushik Sen
ObliCheck: Efficient Verification of Oblivious 
Algorithms with Unobservable State
Jeongseok Son, Griffin Prechter, Rishabh Poddar, Raluca Ada Popa, 
and Koushik Sen, University of California, Berkeley
https://www.usenix.org/conference/usenixsecurity21/presentation/son
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.ObliCheck: Efﬁcient Veriﬁcation of
Oblivious Algorithms with Unobservable State
Jeongseok Son
Grifﬁn Prechter
University of California, Berkeley
Rishabh Poddar
Raluca Ada Popa
Koushik Sen
Abstract
Encryption of secret data prevents an adversary from learning
sensitive information by observing the transferred data. Even
though the data itself is encrypted, however, an attacker can
watch which locations of the memory, disk, and network are
accessed and infer a signiﬁcant amount of secret information.
To defend against attacks based on this access pattern leak-
age, a number of oblivious algorithms have been devised.
These algorithms transform the access pattern in a way that
the access sequences are independent of the secret input data.
Since oblivious algorithms tend to be slow, a go-to optimiza-
tion for algorithm designers is to leverage space unobservable
to the attacker. However, one can easily miss a subtle detail
and violate the oblivious property in the process of doing so.
In this paper, we propose ObliCheck, a checker verify-
ing whether a given algorithm is indeed oblivious. In con-
trast to existing checkers, ObliCheck distinguishes observable
and unobservable state of an algorithm. It employs symbolic
execution to check whether all execution paths exhibit the
same observable behavior. To achieve accuracy and efﬁciency,
ObliCheck introduces two key techniques: Optimistic State
Merging to quickly check if the algorithm is oblivious, and
Iterative State Unmerging to iteratively reﬁne its judgment if
the algorithm is reported as not oblivious. ObliCheck achieves
×50300 of performance improvement over conventional sym-
bolic execution without sacriﬁcing accuracy.
1 Introduction
Security and privacy have become crucial requirements in the
modern computing era. To preserve the secrecy of sensitive
data, data encryption is now widely adopted and prevents
an adversary from learning secret information by observing
the data content. However, attackers can still infer secret in-
formation by observing access patterns to the data. Even
though the data itself is encrypted, an attacker can watch
which locations of the memory, disk, and network are ac-
cessed. Such concerns are growing with the increasing adop-
tion of hardware enclaves such as Intel SGX [49], which
provides memory encryption but does not hide accesses to
memory. By simply observing the access patterns, several
research efforts [23, 37, 42, 43, 47, 57, 58, 71] have shown that
an attacker can reconstruct secret information such as conﬁ-
dential search keywords, entire sensitive documents, or secret
images.
As a result, a rich line of work designs oblivious execu-
tion to prevent such side channels based on access patterns.
There are two types of oblivious algorithms. The ﬁrst, Oblivi-
ous RAM (ORAM) [31, 66], can be used generically to hide
accesses to memory, and ﬁts best for workloads of the type
“point queries”. Intuitively, ORAM randomizes accesses to
memory. However, even the fastest ORAM scheme incurs
polylogarithmic overhead proportional to the memory size
per access, which becomes prohibitively slow for processing
a large amount of data as in data analytics and machine learn-
ing. For these workloads, instead, researchers have proposed
a large array of specialized oblivious algorithms, such as algo-
rithms for joins, ﬁlters, aggregates [7, 11, 14, 19, 57, 78], and
machine learning algorithms [36, 48, 58, 64]. These special-
ized algorithms work by accessing memory according to a
predeﬁned schedule of accesses, which depends only on an
upper bound on the data size and not on data content. In this
paper, we focus on such specialized oblivious algorithms.
Oblivious algorithms in general tend to be notoriously slow
(e.g., hundreds of times for data analytics [78] and tens of
times for point queries [66]). To reduce such overhead, many
oblivious algorithms take advantage of an effective design
strategy: they leverage special regions of memory that are not
observable to the attacker. Such unobservable memory, albeit
often smaller than the observable one, allows the algorithm to
make direct and fast accesses to data. It essentially works as
a cache for the slower observable memory, which is accessed
obliviously. Different techniques choose different resources
as unobservable. For example, some techniques [7, 51, 58, 60]
treat registers as unobservable but all the cache and main mem-
ory as observable in the context of hardware enclaves such as
Intel SGX. GhostRider [46] employs an on-chip scratchpad
as an unobservable space to make the memory trace oblivious.
Certain techniques focus on the network as being observable
by an attacker and the internal secure region of a machine as
unobservable [57, 78]. These techniques show one or more
orders of magnitude [78] performance improvement by lever-
aging the unobservable memory.
USENIX Association
30th USENIX Security Symposium    2219
While generic algorithms like ORAM are heavily scruti-
nized, specialized algorithms designed for different settings
do not receive the same level of scrutiny. Further, these al-
gorithms can be quite complex, balancing rich computations
with efﬁciency. The designer can miss a subtle detail and vio-
late the oblivious property. Currently, an oblivious algorithm
comes with written proof, and users must verify the proof
manually. As a result, recent research efforts devise ways to
check whether an algorithm is oblivious in an automated way
(by looking for a secret dependent branch) using taint analy-
sis [15,33,59,77]. These techniques, however, cannot discern
unobservable state and would classify an algorithm as not
oblivious because of its non-oblivious accesses to unobserv-
able state. Thus, they cannot model a vast array of modern
oblivious algorithms.
We propose ObliCheck, a checker that can verify oblivious
algorithms having unobservable state in an efﬁcient and accu-
rate manner. ObliCheck allows algorithm designers to write
an oblivious algorithm using ObliCheck’s APIs to distinguish
between observable and unobservable space. Based on this
distinction, ObliCheck precisely records the access patterns
visible to an attacker. Then, ObliCheck automatically proves
that the algorithm satisﬁes the obliviousness condition. Oth-
erwise, ObliCheck provides counterexamples – i.e., inputs
that violate the oblivious property – and identiﬁes program
statements that trigger non-oblivious behavior.
ObliCheck primarily aims to verify the oblivious property
of an algorithm, not the actual implementation of the algo-
rithm. We use a subset of JavaScript for modeling algorithms.
We made this choice to leverage an existing program analy-
sis framework, Jalangi [61], for ObliCheck’s implementation.
Moreover, we focus on a subset of the language because ver-
iﬁcation of programs in the full JavaScript language could
result in veriﬁcation conditions having undecidable theories.
Automated veriﬁcation fails for undecidable theories. We ex-
pect that an algorithm designer will use ObliCheck to verify
algorithms rapidly during the algorithm design phase, instead
of trying to verify the algorithm manually.
1.1 Techniques and contributions
We observed that taint analysis used in prior work [15, 33, 59,
77] is too ‘coarse’ to capture unobservable state. With taint
analysis, if a branch predicate contains tainted variables, then
a checker simply rejects the algorithm even if both execution
paths of the branch display the same observable behavior.
Instead, we observe that we can overcome the limitations of
taint analysis with symbolic execution [17, 38]. Using sym-
bolic execution, ObliCheck can analyze an input algorithm
with unobservable state in a ﬁner-grained manner and rea-
son about how observable and unobservable state changes in
each execution path. Even if a branch depends on a secret
input variable, ObliCheck correctly classiﬁes an algorithm
as oblivious if the two execution paths after the branch show
the same observable behavior. For example, if the two paths
both send an identically-sized encrypted message over the
network, our checker can conclude both branches maintain
the same observable state (the size of the message and its des-
tination) since the message content itself is encrypted (thus
unobservable).
However, a naïve application of symbolic execution does
not scale. The main challenge with employing symbolic ex-
ecution is that the program state quickly blows up as the
number of branches in the program increases, making it in-
feasible to complete the check for many algorithms. While
traditional state merging [10, 27, 27, 30, 63] can merge states
to alleviate the path explosion problem to some extent, it only
works when the values in two different paths are the same. To
address this problem, ObliCheck employs a novel optimistic
state merging technique (§4), which leverages the domain-
speciﬁc knowledge of oblivious algorithms that the actual
values are unobservable to the attacker. ObliCheck uses this
insight to optimistically merge two different unobservable
values by introducing a new unconstrained symbolic value for
over-approximating the two unobservable values.
Such “aggressive” state merging for symbolic values is
effective at tackling path explosion, but could result in a false
“not-oblivious” prognosis. If a symbolic variable, x, is merged
into an unconstrained new symbolic variable y, later accesses
to y in a conditional statement may trigger an execution path
which would have been impossible if x were not replaced with
unconstrained y. To address this issue, we devise a technique
called iterative state unmerging (§5). ObliCheck records sym-
bolic variables merged during the execution. Then, it iter-
atively reﬁnes its judgment by backtracking the execution
and unmerges a part of merged variables which may have
caused the wrong prognosis. This iterative probing process
continues until it either classiﬁes the algorithm as oblivious,
or completes the reﬁnement process.
Although iterative state unmerging costs extra symbolic
execution, we ﬁnd that the overhead is tolerable. This is be-
cause our target algorithms are mostly oblivious: an algorithm
designer who wants to check their algorithm for oblivious-
ness likely did a decent job making much of the algorithm
oblivious, but is worried about subtle mistakes. Hence, most
algorithms require few iterations of the iterative state unmerg-
ing process, and even when an algorithm needs the extra runs,
our evaluation shows that the overhead is less than 70% of
single execution time. Further, when ObliCheck reports an
algorithm as not oblivious, ObliCheck produces a counterex-
ample that violates the obliviousness veriﬁcation condition.
This information provides valuable help to the algorithm de-
signers to amend their algorithm.
Finally, a well-known limitation of symbolic execution
is its inability to verify an algorithm containing an input-
dependent loop, requiring the user to provide loop invariants
manually, making it hard to verify oblivious algorithms writ-
ten in terms of an arbitrary length of the input. In ObliCheck,
we design a loop summarization technique (§6) that can auto-
2220    30th USENIX Security Symposium
USENIX Association
matically generate a loop invariant for common loop patterns
employed in oblivious algorithms: each iteration of a loop
appends the same constant number of elements to the output
buffer. Using this observation, ObliCheck can automatically
ﬁgure out the side-effect of a loop on the output length, en-
abling it to verify oblivious algorithms not tied to a concrete
length of the input.
We evaluated ObliCheck using 13 existing oblivious al-
gorithms, and ﬁnd that ObliCheck improves the veriﬁcation
performance up to ×50300 over conventional techniques. The
checking time of ObliCheck grows linearly as the number of
input records grows, whereas that of an existing technique
increases exponentially.
2 Background and Existing Approach
We ﬁrst provide necessary background information regarding
the oblivious property and symbolic execution to understand
the problems. We then point out the limitations of an existing
approach to motivate our approach.
2.1 Oblivious Property and Oblivious Algorithms
The oblivious property implies the access sequences of an
algorithm are independent of the secret input data. To achieve
the oblivious property in a practical sense, specialized obliv-
ious algorithms have recently been devised. In contrast to
Oblivious RAM (ORAM), which compiles a general algo-
rithm and runs it in an oblivious manner, oblivious algorithms
are designed for a speciﬁc purpose for data processing such as
distributed data analytics [57, 78], data structures [22, 32, 70],
and machine learning [56, 58]. Instead of randomly shufﬂing
and re-encrypting data as ORAM does, oblivious algorithms
implement ﬁxed scheduling independent of secret input data
in a deterministic manner.
Oblivious algorithms leverage unobservable space, a se-
cure region of registers or memory which an attacker cannot
observe. Since the unobservable space is not visible to an
attacker, an algorithm can access data inside the unobservable
space fast in a non-oblivious way. Existing oblivious algo-
rithms use different types of unobservable space to protect
secret data from different types of attackers. For example,
oblivious algorithms for distributed data analysis [14, 57, 78]
assume a network attacker who can observe network traf-
ﬁc but cannot observe a part of local memory. The network
attacker can only watch encrypted messages sent over the
network, so the information the attacker can utilize is the net-
work access patterns including the size of the messages and
the source and destination network addresses. On the other
hand, other works focusing on local data processing [7,51,58]
regard registers as unobservable space and treat cache and
local memory as observable by a memory attacker. We will
discuss how ObliCheck captures different threat models under
an observable and unobservable space abstraction in §3.1.
2.2 Symbolic Execution and Path Explosion Problem
Symbolic execution runs a program with symbolic values as
input where symbols represent arbitrary values. During sym-
bolic execution, each feasible execution path of the program
is executed symbolically: The execution of each instruction
updates the state with symbolic expressions containing the in-
put symbols. The execution of a conditional instruction forks
the execution into two separate execution paths—one taking
the true branch and the other taking the branch. Symbolic
execution maintains a ﬁrst-order logic formula, say φ, for each
path. The execution of a conditional instruction updates the
paths conditions along the then and else paths with φ∧ c and
φ∧¬c, respectively, where c is the symbolic expression cor-
responding to the condition in the instruction. At the end of
the execution, a constraint solver solves the path condition of
each execution path to generate a set of representative inputs
that exercise those paths of the program.
One of the most common problems that a user of symbolic
execution encounters is path explosion. A traditional symbolic
execution forks into two execution paths for each conditional
branch. Thus, the number of paths explored and the corre-
sponding state of symbolic values grow exponentially in the
number of branches.
2.3 State Merging and MultiSE
One way to alleviate the path explosion problem is state merg-
ing [10, 27, 30, 63]. State merging techniques merge the sym-
bolic state of different paths at join points in the control-ﬂow
graph to reduce the number of paths to explore. Traditional
state merging introduces a new symbolic variable for each
merged value. This auxiliary variable is used to encode pos-
sible distinct values for the same variable in the merged sym-
bolic state. A key issue with traditional state merging is that
it could result in constraints that cannot be handled by con-
straint solvers. MultiSE [63] achieves state merging without
auxiliary variables and control-ﬂow analysis. It is based on a
new representation of the state called value summary. A value
summary is a set of guarded symbolic expressions, pairs of a
path constraint and a corresponding value of a variable.
For example, after a conditional statement, if C then
x = x0 else x = x1, symbolic execution diverges into two
paths. The value-summary representation of the state after
this statement is x (cid:55)→ {(C,x0), (¬C,x1)}. This represents the
value of x becomes x0 if the condition C holds, and x1 oth-
erwise. MultiSE performs state merging incrementally by
updating the value-summary of a variable at every assign-
ment statement. MultiSE combines the guarded symbolic
expressions with logical disjunction when the values are the
same. When x0 = x1 in the previous case, the merged state is
x (cid:55)→ {(C∨¬C,x0)}, simpliﬁed to x (cid:55)→ {(True,x0)}.
The beneﬁt of state merging is apparent when the values of
a variable on different paths are identical. State merging re-
duces the execution time by half in this case. When the values
are different, however, state merging comes at the cost of com-
USENIX Association
30th USENIX Security Symposium    2221
Algorithm0 is actually:
Oblivious
Not Oblivious
False Negative()
True Positive()
Check Result
Algorithm0 is oblivious
Algorithm0 is not oblivious
True Negative()
False Positive()
Table 1: Deﬁnition of the correct and erroneous classiﬁcation types
of an oblivious checker. The null hypothesis is that a given algorithm
is oblivious. Rejecting a benign oblivious algorithm is a false positive
case (Type I error). Accepting a not oblivious algorithm is a false
negative case (Type II error).
1 function tag(secretInput, threshold) {
2
3
var buf = [];
for (var i = 0; i < secretInuput.length;
i++) {
if (secretInuput[i] < threshold) {
buf.push(Pair(secretInuput[i], 0));
} else {
buf.push(Pair(secretInuput[i], 1));
}
}
}