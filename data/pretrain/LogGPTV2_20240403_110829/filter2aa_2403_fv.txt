; password 
.text:005413A8     
push     
esi    
; aligned size 
.text:005413A9     
push     
ebx    
; buffer 
.text:005413AA     
call     
crypt  
; do crypt 
创建输出文件。虽然研发人员确实检测了能否成功打开文件，但是他们忘记了检测能否正确创建文件： 
.text:005413AF     
mov      
edx, [esp+50h+Filename] 
.text:005413B3     
add      
esp, 40h 
.text:005413B6     
push     
offset aWb  
; "wb" 
.text:005413BB     
push     
edx          
; Filename 
.text:005413BC     
call     
_fopen 
.text:005413C1     
mov   
edi, eax 
新建文件的句柄（handle）存储在 EDI 寄存器里。然后写上签名“QR9”： 
.text:005413C3    
push     
edi  
; File 
.text:005413C4    
push     
1 
; Count 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 79 章  “QR9”：魔方态加密模型 
765 
.text:005413C6    
push     
3  
; Size 
.text:005413C8    
push     
offset aQr9 
; "QR9" 
.text:005413CD    
call     
_fwrite 
; write file signature 
标注原始文件的实际大小（未经数据对齐处理的原始值）： 
.text:005413D2     
push   
edi   
; File 
.text:005413D3     
push   
1   
; Count 
.text:005413D5     
lea   
eax, [esp+30h+Str] 
.text:005413D9     
push   
4   
;Size 
.text:005413DB     
push   
eax   
; Str 
.text:005413DC     
call   
_fwrite 
; write original file size 
写入密文的缓冲区： 
.text:005413E1     
push     
edi  
; File 
.text:005413E2     
push     
1 
; Count 
.text:005413E4     
push     
esi  
; Size 
.text:005413E5     
push     
ebx  
; Str 
.text:005413E6     
call     
_fwrite 
; write encrypted file 
关闭文件、释放缓冲区： 
.text:005413EB     
push     
edi         
; File 
.text:005413EC     
call     
_fclose 
.text:005413F1     
push     
ebx         
; Memory 
.text:005413F2     
call     
_free 
.text:005413F7     
add      
esp, 40h 
.text:005413FA     
pop      
edi 
.text:005413FB     
pop      
esi 
.text:005413FC     
pop      
ebx 
.text:005413FD     
pop      
ebp 
.text:005413FE     
retn 
.text:005413FE crypt_file   
endp 
通过上面的分析，我们可整理出源代码如下： 
void crypt_file(char *fin, char* fout, char *pw) 
{ 
        FILE *f; 
        int flen, flen_aligned; 
        BYTE *buf; 
        f=fopen(fin, "rb"); 
        if (f==NULL) 
        { 
                printf ("Cannot open input file!\n"); 
                return; 
        }; 
        fseek (f, 0, SEEK_END); 
        flen=ftell (f); 
        fseek (f, 0, SEEK_SET); 
        flen_aligned=(flen&0xFFFFFFC0)+0x40; 
        buf=(BYTE*)malloc (flen_aligned); 
        memset (buf, 0, flen_aligned); 
        fread (buf, flen, 1, f); 
        fclose (f); 
        crypt (buf, flen_aligned, pw); 
        f=fopen(fout, "wb"); 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
766 
逆向工程权威指南（下册） 
        fwrite ("QR9", 3, 1, f); 
        fwrite (&flen, 4, 1, f); 
        fwrite (buf, flen_aligned, 1, f); 
        fclose (f); 
        free (buf); 
}; 
解密过程几乎如出一辙： 
.text:00541400 ; int __cdecl decrypt_file(char *Filename, int, void *Src) 
.text:00541400 decrypt_file  
proc near 
.text:00541400 
.text:00541400 Filename      
= dword ptr  4 
.text:00541400 arg_4          
= dword ptr  8 
.text:00541400 Src            
= dword ptr  0Ch 
.text:00541400 
.text:00541400       
mov     eax, [esp+Filename] 
.text:00541404       
push    ebx 
.text:00541405       
push    ebp 
.text:00541406      
push    esi 
.text:00541407       
push    edi 
.text:00541408       
push    offset aRb   
; "rb" 
.text:0054140D       
push    eax         
; Filename 
.text:0054140E       
call    _fopen 
.text:00541413       
mov     esi, eax 
.text:00541415       
add     esp, 8 
.text:00541418       
test    esi, esi 
.text:0054141A       
jnz     short loc_54142E 
.text:0054141C       
push    offset aCannotOpenIn_0 ; "Cannot open input file!\n" 
.text:00541421       
call    _printf 
.text:00541426       
add     esp, 4 
.text:00541429       
pop     edi 
.text:0054142A       
pop     esi 
.text:0054142B       
pop     ebp 
.text:0054142C       
pop     ebx 
.text:0054142D       
retn 
.text:0054142E 
.text:0054142E loc_54142E:  
.text:0054142E       
push     2    
; Origin 
.text:00541430       
push     0    
; Offset 
.text:00541432       
push     esi  
; File 
.text:00541433       
call     _fseek 
.text:00541438       
push     esi  
; File 
.text:00541439       
call     _ftell 
.text:0054143E       
push     0    
; Origin 
.text:00541440       
push     0    
; Offset 
.text:00541442       
push     esi  
; File 
.text:00541443       
mov      ebp, eax 
.text:00541445       
call     _fseek 
.text:0054144A       
push     ebp  
; Size 
.text:0054144B       
call     _malloc 
.text:00541450       
push     esi  
; File 
.text:00541451       
mov      ebx, eax 
.text:00541453       
push    1     
; Count 
.text:00541455       
push     ebp   
; ElementSize 
.text:00541456       
push     ebx   
; DstBuf 
.text:00541457       
call     _fread 
.text:0054145C       
push     esi   
; File 
.text:0054145D       
call     _fclose 
检测前三个字节的程序签名： 
.text:00541462       
add      esp, 34h 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 79 章  “QR9”：魔方态加密模型 
767 
.text:00541465       
mov      ecx, 3 
.text:0054146A       
mov     edi, offset aQr9_0 ; "QR9" 
.text:0054146F       
mov     esi, ebx 
.text:00541471       
xor      edx, edx 
.text:00541473       
repe cmpsb 
.text:00541475       
jz       short loc_541489 
如果签名有误，则进行错误提示： 
.text:00541477       
push     offset aFileIsNotCrypt ; "File is not encrypted!\n" 
.text:0054147C       
call     _printf 
.text:00541481       
add    esp, 4 
.text:00541484       
pop     edi 
.text:00541485       
pop      esi 
.text:00541486       
pop     ebp 
.text:00541487       
pop     ebx 
.text:00541488       
retn 
.text:00541489 
.text:00541489 loc_541489: 
调用 decrypt()函数： 
.text:00541489    
mov     eax, [esp+10h+Src] 