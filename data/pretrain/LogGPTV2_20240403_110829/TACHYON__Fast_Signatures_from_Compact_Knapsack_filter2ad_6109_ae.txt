pling step.
5.2 Performance-vs-Storage Trade-offs
Our design allows several trade-offs between performance and stor-
age that may be suitable for different use-cases.
• Signer Pre-computation: With a basic implementation trick, one
can store the xi’s instead of deterministically generating them at
the signature generation. This enables the signer to avoid the cost
of generating these values (k · PRF calls, and extracting the binary
vectors) during the signature generation. Since the signer must
store these xi vectors, this adds up to a private key of at least
t · µ · N bits, that is larger than that of TACHYON. However, this
caching strategy offers a faster signature generation and therefore
can be preferred when the signer is able to store such vectors.
Signature generation speed advantages and required private key
size are further explained in Subsection 5.4.
• Selection of t, k: The parameter t linearly impacts the size of
public key of TACHYON. The parameter k determines the number
of PRF calls, binary vectors to be extracted and vector additions
in TACHYON signing, and also the number of vector additions in
TACHYON signature verification. Note that decreasing t requires an
increase in k (or vice versa) to preserve the desired security level.
We selected (t = 1024, k = 18), (t = 2048, k = 25), and (t = 3072,
k = 32) to provide κ = 128-bit, κ = 192-bit, and κ = 256-bit se-
curity, respectively. However, different parameters for the same
security levels are also possible. For instance t = 256, k = 26 would
also offer κ = 128-bit security level and could be preferred (over
t = 1024, k = 18) for TACHYON medium level security instantiation.
This would provide a 4× smaller public key, where the signature
generation time would be increased.
• Rejection Sampling Parameters: Rejection sampling rate implies
how many times (on average) the signature generation should be
executed to output an “acceptable” signature. Therefore, the in-
crement of the acceptance probability has a linear effect on the
signature generation time. We discuss two parameters that can
be tuned to increase the acceptance probability of the outputted
signatures, (i) increasing ξ − 1 (where ξ − 1 = ∥r′∥∞), and (ii)
decreasing k. While tuning these parameters can result in signifi-
cantly decreasing the average signing time, there are trade-offs to
consider. Increasing ξ − 1 causes an increase on the signature size.
Additionally, this increase incurs a security loss as it directly affects
the hardness of the lattice attacks discussed in Subsection 4.1. On
the other hand, as discussed above, decreasing k would require
increasing t to compensate for the security loss, that increases the
public key size.
5.3 Experimental Evaluation and Setup
We describe our experimental evaluation metrics and setup, wherein
our scheme and their counterparts are compared with each other.
• Evaluation Metrics: We have evaluated and compared TACHYON with
its counterparts in terms of signature generation and verification
times, private key, public key and signature sizes and end-to-end
cryptographic delay (i.e., the sum of signature generation and veri-
fication times, excluding the signature transmission time, as it is
network depended).
• Hardware Configurations: We used a laptop equipped with an
Intel i7 6th generation (Skylake) 2.6GHz processor and 12 GB of
RAM for our experiments.
• Implementation Details : Our parameter selection which is based
on [40] - i.e., N is a power-of-two and 1 ≡ q mod (2N) - allows us
to use NTT to accelerate the GCK function computations. Similar
approach has been done in [20]. Then, to finalize the GCK function,
10
we computed the linear combination under mod q of input with
random and public matrix A. Since highest |q| selected is just 31,
we did not use any libraries for these calculations. We would like
to note that this operation can be performed very fast with some
assembly level optimizations. However, in this paper, we used a
conservative implementation.
We instantiated H1 and H2 random oracles using BLAKE2b due
to its optimization for commodity hardware, in terms of speed and
security [4]. We used Intel intrinsics to implement our PRF function
and Samp(ξ − 1) (with AES in counter mode). Our implementation
is open-sourced in the following link.
https://github.com/ozgurozmen/TACHYON
For our counterparts, we used the optimized codes (if available,
otherwise the reference codes) that are submitted to the NIST com-
petition and ran them on our processor. Note that among all the
schemes presented in Table 2, only BLISS is not a NIST competi-
tor. For this scheme, we used the open-sourced implementation
provided by the authors.
5.4 Performance Analysis and Comparison
Table 2 shows the experimental performances of TACHYON and its
state-of-the-art counterparts. We selected various schemes that are
submitted to the first NIST post-quantum cryptography standard-
ization conference (except BLISS [19], that is selected since it is
one of the fastest lattice-based signatures). These schemes include
lattice-based constructions (qTESLA [12], pqNTRUsign [29], and
Dilithium [20]), a hash-based construction (SPHINCS+ [30]), a code-
based construction (pqsigRM [36]), a symmetric key cryptography
based construction (PICNIC [16]) and a multivariate-based scheme
(GeMSS [15]).
Table 2 shows that TACHYON has the lowest end-to-end delay and
both its signature generation and verification are the fastest among
its counterparts, for every security level. For instance TACHYON-
192 has the fastest signature generation and the lowest end-to-end
delay among all the schemes with any security level. Moreover,
TACHYON offers the lowest possible private key size (that is the same
with symmetric key based PICNIC). TACHYON has a signature of
slightly more than 4 KB, that is comparable to its lattice-based
counterparts but larger than multivariate and code-based construc-
tions. TACHYON public key is significantly larger than most of their
counterparts (only smaller than GeMSS in high security levels).
Considering the overall efficiency of TACHYON, we believe it can be
preferred when the verifier can tolerate such a storage.
As discussed in Subsection 5.2, one can consider caching the
xi vectors as the private key instead of deterministically deriving
them with a κ-bit seed. When this optimization is considered, it
provides a signature generation that is significantly faster than that
of TACHYON. With the verification being unchanged, this variant
can further improve the end-to-end delay (which is currently the
fastest). On the other hand, when these vectors are cached, the
private key size increases significantly (e.g., 256 − 768 KB), that
is only smaller than pqsigRM, for certain security levels. This can
make caching impractical for some applications where the signer
is memory-limited. In these cases, TACHYON without any caching
should be preferred.
Table 2: Experimental Performance Comparison of TACHYON with Its Counterparts
Signature
Gen Time† (µs)
Private
Key (Byte)
Signature
Size (Byte)
Scheme
Security
Level (bit)
SPHINCS+ [30]
pqsigRM [36]
GeMSS [15]
PICNIC [16]
BLISS [19]
qTESLA [12]
pqNTRUsign [29]
Dilithium[20]
TACHYON
128
192
256
128
192
256
128
192
256
128
192
256
128
160∗
192∗
128
192
256
128
100∗
138∗
176∗
128
192
256
14625
18580
42898
3960
20260
406
252844
776330
1118542
1966
6951
13963
141
211
392
650
2524
6793
14516
166
272
219
138
124
198
Signature
Ver Time (µs)
617
974
1015
21
30
138
39
109
326
1335
4804
9639
28
28
31
133
272
334
304
53
76
103
18
21
28
Public
Key (Byte)
32
48
64
336804
501176
2144166
417408
1304192
3603792
32
48
64
896
896
896
2976
6176
6432
1024
1184
1472
1760
884736
1966080
3047424
End-to-End
Delay (µs)
15242
19554
43913
3981
20290
544
252883
776439
1118868
3301
11755
23602
169
239
423
783
2796
7127
14820
219
348
322
156
145
226
Gaussian
Sampling‡
N/A
N/A
N/A
N/A
✓
×
×
×
×
16976
35664
49216
260
516
1028
48
88
104
34000
76740
132824
717
768
813
2720
5664
5920
576
2044
2701
3366
4416
4672
4672