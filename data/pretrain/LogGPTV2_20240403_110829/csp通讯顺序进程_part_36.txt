（2)
A4.3位埃充
再由4.4.5节L2可得所要结论。
（1)
证明：
A4.2见余
注意：
(3）证明
R=(left?x-left?y-→left?z-→right!maj(x,y,z)-R)
T=(left?x-→right1x-→right!x-→right!x-→T)
(MR(i)=lefl?x→(T(f(x,i))>(right1x→R(f(x,i))))
T(3)>R(3) =T(0)>R(0)
POST=left?t→left?x-right!x-→POST
W = W(2)
R(3)=left?x-→R(0)
R(i)=left?x-→right1x-→R(f(x,i))
R=R(0)
T(i)=left?x-right1x→T(f(x,i))
T =T(0)
T>R=left?x-=(T>(right1 maj(x,x,x)-R))
是变元，是结果的渐近值。
W(m) =left?x->right!x→W(m + 1)
(0)M-xL-11y61u+x11fa1=
=left?x-=(T>(right!.x-→R))
right[(x+(t/x))/2-=STEP
T(3)=right1 0→T(0)
f(x,i)=i+1
三次施用4.4,1节L4和L2
r=0
x0
若m=2
若m
由4.4,1节L2
≤x
|remove?x-→right!NO-NEWSET)
then right1YES→SET2(x)
else rest.remove!y-rest,right?m->
thenright1YES→SET3
else rest.leftIy-→rest.right?m→
remove?y→if y=x
else smaller,leftIy-→smaller.right?m-
then bigger.leftly→bigger.right? m-
right!mLOOPx
right1m-LOOPx
right μm-→SET2(x))
|rest.empty-→pY.(ompty→Y
T>W>R
[left? x→LOOP))
---
## Page 286
次输出前不必理会的输入的次数，即
A5.3从灾难中恢复
其中
其中
（2)
(1)
A5.2
A5.1
(2) STACK = (empty-→STACK
(1)
POST仅用于清点已经成功实现的输出的次数(n)，和在下
PRE同于 A3.3中的REP。
bsp2(P,Q)=(x:P→bsp2(P/,bsp2(P,Q))
bsp(P)=bsp2(P,bsp(P)):
bsp2(P,Q).= (x: P0.→bsp2(P/,P)
（d'd)zdsg=(d)dsg
回塔
ST(x)=(left?y-=ST(y); ST(x)
栈（续）
SET3 =(left?z→rast,removel z-rest ,right?m→
POST2(m + 1,n) = (left?x-→POST2(m,n)
POST2(0,n)=(teft?x-(tight;x-→POST2(0,n+1)
POST = POST2(0,0)
[remove?z-rest,removelz-→rest.right? m-
[right!x→SKIP)
[left?x-→ST(x); STAGK)
tight1 m-→SET2(z)
rightI m-→SET'3)
[①→bsp(P)
[bs→bsp2(Q,P))
[bs-→Q)
→POST2(n,n))
五、顺序进程
[-→POST2(n,n))
1
|→POST2(n,n))
263
---
## Page 287
其中
A5.4备查点式恢复
这个答案的优点是：
其中
A5.5变元（续）
1.
264
(u'u'<>)zIsod7)=(u'I+u)Ls0d
.VBL=(rightix-=CONST)~(left?y→VBL,)由定义
由于在饮复时不要求P从头再执行，故减少了实现恢复所花
筹，故备查踪迹的存储量不会随着时间的推移而无限增长。
PRE中备查踪迹的存储量，在每出现一次后，都缩减为
的时间。
POST2(<>,0,n)=(&->POST2(,n,n)
PRE2(<>,t)=(→PRE2(t,1)
POST2((x),m,n)=(→POST2(,0,0)
PRE2(s,)=(-→PRE2(t,t)
PRE=PRE2(,)
=(rightx-→VBL
= (right, x→(CONST,^VBL)
[left?y-VBLy)
[left?x→PRE2(,t~))
|@-→PRE2(,)
[right!y→PRE2(s,t))
[@-→PRE2(s,^s)
[left?x>POST2(,m,n))
↓@→POST2(,m,m)
|-POST2(<>,m +1,m+1)
right!x→POST2(<>,m,n))
[left?x→POST2(,0,n +1))
[→P0ST2(,0,0)
VBL的定义
5.4节L1
---
## Page 288
时，就会出现死锁。
这样，VBL和VAR满足同一-个卫式方程，故
只要VMR允许，顾客就能取到太妃糖；但当VMR选择巧克力
A6.4
A6.3
A6.2
A6.1
此处
此处
(5)(a) VMR|TCUST
(4) ACUST =coin-→(choc→ACUST|toffce→ACUsT)
(3)WCUST = coin-((choc-→WCUST)(tof fee-→WCUST))
(1)
非确定性的硬币仓
选择，非确定性和死锁
PACK=P,
非确定性的集装
W(m) = left?x-right1x-W(m + 1)
W = W(2)
非确定性的误传
VMR= coin-((choc-VMR)(toffee-VMR))
(rights-→P)
+coin→(STOP(toffee->
= coin-→(((choc-→VMR)l(toffee-→TCUST))
[left?y-→VBLy)
((toffce→V MR)(toffce-TCUST)))
((0)M+x-Iy6u
六、非确定性
VBL,=VAR,
(VMRITCUST)))
:0.-30
ST
m<2
265
---
## Page 289
其中
其中
A6.5容积不确定的缓存
就不会产生有害的后果。
当颐客愿意接受VMR所做的任一种选择时，VMR的非确定性
妃糖。否则，就会出现死锁。
只要机器和顾客做同样的选择，顾客就可以不断得到巧克力和太
(2)
(1)
266
(b) VMRIWCUST
=VMR
= coin→((choc-→(VMR|ACUST)).
=coin-→((choo-VMR)(choc-→ACUST |toffee-→ACUST))
B=left?x-
BUFF=B(,
B=left?x-→Bi,
BUFF =
B!=rightis-→B.
= coin-→((choo-→(VMR|wCUST))
= coin-→(((chcc→VM R)I(choo→WCUST))
Iright!so-→B.
(toffee→(VMR|ACUST)))
((toffee-→VMR)l(ohoc-
STOP)
(toffee-(VMRWCUsr))
((toffee→VMR)I(toffee→
((toffee→V MR)(choc-→WCUST))
((choc-VMR) I(toffee→WCUsT))
B:
ACUST(toffee-→ACUST))
WCUST)))
若#s=
若1≤#s<n
---
## Page 290
其中(LP|R1)=(l,c-(P|R)|r.D→(LRP|R2))
此处
Lionel 亦有类似要求。
其中
雨
其中
（4）
此处
(2)
(1)
A7.1
((0ld)t0'1) =(10ld7)
'(RP|Q1)=(r.c→(P|0))
(PR)=(l.p-(LP|R1)|r.D→(RPR1))
售货机共享
x+-0'1-d'1)'x =(0ld)
B,=right!so-→B..
B=(right!s,-→B.
B;=left?x-=B(s)
(P|Q) =(l.p-→(LP|Q1)↓r,p-→(RP|Q1))
R2=(l.c→R1|r,c→R1)
LRP=(l.c→RP|r.o-LP)
RP=(r,c-P|1.P→LRP)
[right!s-→B.)
R1=(l,p-→R2|r.p→R2
Q1 =(l.c-+Q|r.c-=0)
Q=(l.p-→Q1{r,p-Q1)
LP=(l.c→P|r,p→LRP)
aP={l.p,l.c,r.p,r.c)
|right!s,-→B,.
R=(l.p-→R1|.D→R1)
[l.c→R|r,c→R)
[r,p-=r.c-→x)
七，资源共享
若#8=27
若12≤2
若1≤#s<12
267
---
## Page 291
2.10/t.
其中
A7.2线路共享
和 Roger 的穿插行为而言，不添加任何限制。
I.lol!.
和(2)相比较，
其中
e
A7.3
(LRP[R2)=(l.c→(RP|R1)|r.c→(LP|R1))
268