Babel transpiled subclasses of Promise had been working as intended for as
recent as the last nodejs version (6.4.0), however with 6.5.0, I'm seeing
errors like:
        return _possibleConstructorReturn(this, (subPromise.__proto__ || Object.getPrototypeOf(subPromise)).call(this, executor));
            ^
    TypeError: # is not a promise
Subclassing itself works fine if I run the code as is on nodejs. This issue
happens regardless of whether I import polyfill or not.
### Input Code
    "use strict";
    class subPromise extends Promise {
      constructor(executor) {
        super(executor);
      }
    }
    const testPromise = new subPromise((resolve, reject) => {
      resolve(42);
    });
    testPromise.then(console.log);
### Babel Configuration (.bablerc, package.json, cli command)
    {
      "presets": ["es2015"]
    }
### Expected Behavior
The test promise resolves into `42`.
### Current Behavior
Throws a type error.
### Possible Solution
Must be some sort of extra type checking introduced in 6.5.0? Bigger worry is
how semantics of vanilla `class` keyword from nodejs and transpiled classes
can diverge.
### Context
I'm working on a library that extends Promise. Which I opened an issue
(google/chained-promise#6). I've also opened an issue with NodeJS, initially
thinking this might to do with nodejs itself regressing in any way.
(nodejs/node#8474)
### Your Environment
software | version  
---|---  
Babel | tested on 6.4.0 and 6.14.0  
node | 6.5.0  
npm | 3.5.2  
Operating System | Tested on Windows and Linux