For additional details:
https://www.postgresql.org/docs/9.6/static/sql-insert.html
https://www.postgresql.org/docs/9.6/static/unsupported-features-sql-standard.htm
77
Migrating from: Oracle Create Table as Select (CTAS)
[Back to TOC]
Overview
To create a new table based on an existing table, use the Create Table As Select (CTAS) statement. The CTAS
statement copies the table DDL definitions (column names and column datatypes) and the data to a new
table. The new table is populated from the columns specified in the statement, or all columns if you
SELECT
use . You can filter specific data using the and statements. Additionally, you
SELECT * FROM WHERE AND
can create a new table having a different structure using joins, , and .
GROUP BY ORDER BY
Example
Oracle Create Table As Select (CTAS):
SQL> CREATE TABLE EMPS
AS
SELEC T * FROM EMPLOYEES;
SQL> CREATE TABLE EMPS
AS
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY FROM EMPLOYEES
ORDER BY 3 DESC;
78
Migration to: PostgreSQL Create Table As Select (CTAS)
[Back to TOC]
Overview
PostgreSQL conforms to the ANSI/SQL standard for CTAS functionality and is compatible with an Oracle CTAS
statement. For PostgreSQL, the following CTAS standard elements are optional:
• The standard requires parentheses around the statement; PostgreSQL does not.
SELECT
• The standard requires the clause; PostgreSQL does not.
WITH [ NO ] DATA
PostgreSQL CTAS Synopsis
CREATE
[ [ G LOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ]
table_name
[ (column_name [, ...] ) ]
[ WITH ( storage_parameter [= value] [, ... ] ) |
WITH OIDS | WITHOUT OIDS ]
[ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
[ TABLESPACE tablespace_name ]
AS query
[ WITH [ NO ] DATA ]
Examples
1. PostgreSQL CTAS:
pg_demo=> CREATE TABLE EMPS
AS
SELECT * FROM EMPLOYEES;
pg_demo=> CREATE TABLE EMPS
AS
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY FROM EMPLOYEES
ORDER BY 3 DESC;
2. PostgreSQL CTAS with no data:
pg_demo=> CREATE TABLE EMPS
AS
SELECT * FROM EMPLOYEES
WITH NO DATA; -- optionally
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-createtableas.html
79
Migrating from: Oracle Common Table Expression (CTE)
[Back to TOC]
Overview
Common Table Expressions provide a way to implement the logic of sequential code or to reuse code. You can
define a named subquery and then use it multiple times in different parts of a query statement. CTE is
implemented using a clause, which is part of the ANSI SQL-99 standard and has existed in Oracle since
WITH
version 9.2. CTE usage is similar to an inline view or a temporary table. Its main purpose is to reduce query
statement repetition and make complex queries simpler to read and understand.
CTE General Syntax
WITH  AS (
)
[...]
SELECT  FROM ;
Example
Create a subquery of the employee count for each department and then use the result set of the CTE in a
query:
SQL> WITH DEPT_COUNT
(DEPARTMENT_ID, DEPT_COUNT) AS
(
SELECT DEPARTMENT_ID, COUNT(*)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
)
SELECT E.FIRST_NAME ||' '|| E.LAST_NAME AS EMP_NAME,
D.DEPT_COUNT AS EMP_DEPT_COUNT
FROM EMPLOYEES E JOIN DEPT_COUNT D
USING (DEPARTMENT_ID)
ORDER BY 2;
80
Migration to: PostgreSQL Common Table Expression (CTE)
[Back to TOC]
Overview
PostgreSQL confirms to the ANSI SQL-99 standard. Implementing CTEs in PostgreSQL is done in a similar way
to Oracle as long as you are not using native Oracle elements (for example, ).
connect by
Example
A PostgreSQL CTE:
SQL> WITH DEPT_COUNT
(DEPARTMENT_ID, DEPT_COUNT) AS
(
SELECT DEPARTMENT_ID, COUNT(*)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
)
SELECT E.FIRST_NAME ||' '|| E.LAST_NAME AS EMP_NAME,
D.DEPT_COUNT AS EMP_DEPT_COUNT
FROM EMPLOYEES E JOIN DEPT_COUNT D
USING (DEPARTMENT_ID)
ORDER BY 2;
PostgreSQL provides an additional feature when using CTE as a recursive modifier. The following example uses
a recursive clause to access its own result set:
WITH
demo=> WITH RECURSIVE t(n) AS (
VALUES (0)
UNION ALL
SELECT n+1 FROM t WHERE n  INSERT INTO EMPS (EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID)
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY > 10000;
Simple (Implicit):
INSERT FROM SELECT
SQL> INSERT INTO EMPS
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY > 10000;
The following example produces the same effect as the preceding example using a subquery in the
DML_table_expression_clause:
SQL> INSERT INTO
(SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID FROM EMPS)
VALUES (120, 'Kenny', 10000, 90);
82
Logging Errors Using Oracle error_logging_clause:
SQL> ALTER TABLE EMPS ADD CONSTRAINT PK_EMP_ID PRIMARY KEY(employee_id);
SQL> EXECUTE DBMS_ERRLOG.CREATE_ERROR_LOG('EMPS', 'ERRLOG');
SQL> INSERT INTO EMPS
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY > 10000
LOG ERRORS INTO errlog ('Cannot Perform Insert') REJECT LIMIT 100;
0 rows inserted
When inserting an existing into the table, the insert does not fail because the invalid
EMPLOYEE ID EMPS
records are redirected to the table.
ERRLOG
For additional details:
https://docs.oracle.com/cd/B28359_01/server.111/b28286/statements_9014.htm#SQLRF01604
83
Migration to: PostgreSQL Insert From Select
[Back to TOC]
Overview
PostgreSQL syntax is mostly compatible with the Oracle syntax, except for a few
INSERT FROM SELECT
Oracle-only features such as the conditional_insert_clause ( ). Also, PostgreSQL does not
ALL|FIRST|ELSE
support the Oracle error_logging_clause. As an alternative, PostgreSQL provides the clause
ON CONFLICT
to capture errors, perform corrective measures, or log errors.
PostgreSQL Insert Synopsis
[ WITH [ RECURSIVE ] with_query [, ...] ]
INSERT INTO table_name [ AS alias ] [ ( column_name [, ...] ) ]
{ DEFAULT VALUES | VALUES ( { expression | DEFAULT } [, ...] ) [, ...] | query
}
[ ON CONFLICT [ conflict_target ] conflict_action ]
[ RETURNING * | output_expression [ [ AS ] output_name ] [, ...] ]
where conflict_target can be one of:
( { index_column_name | ( index_expression ) } [ COLLATE collation ] [ opclass
] [, ...] ) [ WHERE index_predicate ]
ON CONSTRAINT constraint_name
and conflict_action is one of:
DO NOTHING
DO UPDATE SET { column_name = { expression | DEFAULT } |
( column_name [, ...] ) = ( { expression | DEFAULT } [, ...] )
|
( column_name [, ...] ) = ( sub-SELECT )
} [, ...]
[ WHERE condition ]
Example
1. Simple (Explicit):
INSERT FROM SELECT
demo=> INSERT INTO EMPS (EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID)
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY > 10000;
84
2. Simple (Implicit):
Insert from Select
demo=> INSERT INTO EMPS
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY > 10000;
3. The following example is not compatible with the supported syntax PostgreSQL:
demo=> INSERT INTO
(SEL ECT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID FROM EMPS)
VALUES (120, 'Kenny', 10000, 90);
4. Using the PostgreSQL clause:
ON CONFLICT
demo=> ALTE R TABLE EMPS ADD CONSTRAINT PK_EMP_ID PRIMARY KEY(employee_id);
demo=> INSERT INTO EMPS
SELE CT EMPLOYEE_ID, FIRST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SALARY > 10000
ON CONFLICT on constraint PK_EMP_ID DO NOTHING;
INSERT 0
For additional details:
https://www.postgresql.org/docs/9.6/static/sql-insert.html
85
Migrating from: Oracle Index-Organized Table (IOT)
[Back to TOC]
Overview
Oracle’s Index-Organized Table (IOT) is a special type of index/table hybrid that physically controls how data is
stored at the table and index level. A common table, or heap-organized table, stores the data unsorted (as a
heap). In an Index-Organized Table, the actual table data is stored in a B-tree index structure sorted by the
row’s primary key. Each leaf block in the index structure stores both the primary key and non-key columns.
Index-Organized Table benefits include:
• The table records are sorted (clustered) using the primary key, which provides performance benefits.
Accessing data using the primary key is faster because the key and data are located physically in the
same structure.
• The total size of storage is reduced because primary key duplication is prevented.
Example
Create an Oracle Index-Organized Table storing “ordered” table data based on the primary
PK_EVENT_ID
key:
SQL> CREATE TABLE SYSTEM_EVENTS (
EVENT _ID NUMBER,
EVENT_CODE VARCHAR2(10) NOT NULL,
EVENT_DESCIPTION VARCHAR2(200),
EVENT_TIME DATE NOT NULL,
CONSTRAINT PK_EVENT_ID PRIMARY KEY(EVENT_ID))
ORGANIZATION INDEX;
SQL> INSERT INTO SYSTEM_EVENTS VALUES(9, 'EVNT-A1-10', 'Critical', '01-JAN-2017');
SQL> INSERT INTO SYSTEM_EVENTS VALUES(1, 'EVNT-C1-09', 'Warning', '01-JAN-2017');
SQL> INSERT INTO SYSTEM_EVENTS VALUES(7, 'EVNT-E1-14', 'Critical', '01-JAN-2017');
SQL> SELECT * FROM SYSTEM_EVENTS;
EVENT_ID EVENT_CODE EVENT_DESCIPTION EVENT_TIM
---------- ---------- ------------------------------ ---------
1 EVNT-C1-09 Warning 01-JAN-17
7 EVNT-E1-14 Critical 01-JAN-17
9 EVNT-A1-10 Critical 01-JAN-17
Note: The records are sorted in the reverse order from which they were inserted.
EVENT_ID
For additional details:
https://docs.oracle.com/cd/B28359_01/server.111/b28310/tables012.htm#ADMIN11684
https://docs.oracle.com/database/121/CNCPT/indexiot.htm#CNCPT721
86
Migration to: PostgreSQL “Cluster” Table
[Back to TOC]
Overview
PostgreSQL does not support IOTs directly, but offers partially similar functionality using the
CLUSTER
feature. The PostgreSQL statement specifies table sorting based on an index already associated
CLUSTER
with the table. When using the PostgreSQL command, the data in the table is physically sorted
CLUSTER
based on the index, possibly using a primary key column.
Note: Unlike an Oracle Index-Organized Table which is defined during table creation and persists data sorting
(the IOT will always remain sorted), the PostgreSQL does not provide persistent sorting; it is a one-
CLUSTER
time operation. When the table is subsequently updated, the changes are not clustered/sorted.
The statement can be used as needed to re-cluster the table.
CLUSTER
87
Example
Using the PostgreSQL CLUSTER command:
demo=> CREATE TABLE SYSTEM_EVENTS (
EVENT_ID NUMERIC,
EVENT_CODE VARCHAR(10) NOT NULL,
EVENT_DESCIPTION VARCHAR(200),
EVENT_TIME DATE NOT NULL,
CONSTRAINT PK_EVENT_ID PRIMARY KEY(EVENT_ID));
demo=> INSERT INTO SYSTEM_EVENTS VALUES(9, 'EV-A1-10', 'Critical', '01-JAN-
2017');
demo=> INSERT INTO SYSTEM_EVENTS VALUES(1, 'EV-C1-09', 'Warning', '01-JAN-
2017');
demo=> INSERT INTO SYSTEM_EVENTS VALUES(7, 'EV-E1-14', 'Critical', '01-JAN-
2017');
demo=> CLUSTER SYSTEM_EVENTS USING PK_EVENT_ID;
demo=> SELECT * FROM SYSTEM_EVENTS;
event_id | event_code | event_desciption | event_time
----------+------------+------------------+------------
1 | EVNT-C1-09 | Warning | 2017-01-01
7 | EVNT-E1-14 | Critical | 2017-01-01
9 | EVNT-A1-10 | Critical | 2017-01-01
demo=> INSERT INTO SYSTEM_EVENTS VALUES(2, 'EV-E2-02', 'Warning', '01-JAN-
2017');
demo=> SELECT * FROM SYSTEM_EVENTS;
event_id | event_code | event_desciption | event_time
----------+------------+------------------+------------
1 | EVNT-C1-09 | Warning | 2017-01-01
7 | EVNT-E1-14 | Critical | 2017-01-01
9 | EVNT-A1-10 | Critical | 2017-01-01
2 | EVNT-E2-02 | Warning | 2017-01-01
demo=> CLUSTER SYSTEM_EVENTS USING PK_EVENT_ID; -- Run CLUSTER again to re-
cluster
demo=> SELECT * FROM SYSTEM_EVENTS;
event_id | event_code | event_desciption | event_time
----------+------------+------------------+------------
1 | EVNT-C1-09 | Warning | 2017-01-01
2 | EVNT-E2-02 | Warning | 2017-01-01
7 | EVNT-E1-14 | Critical | 2017-01-01
9 | EVNT-A1-10 | Critical | 2017-01-01
For additional details:
https://www.postgresql.org/docs/current/static/sql-cluster.html
https://www.postgresql.org/docs/9.6/static/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY
88
Migrating from: Oracle Common Data Types
[Back to TOC]
Overview
Oracle provides a set of primitive data types that can be used for table columns or PL/SQL code variables. The
assigned data types for table column or PL/SQL code (such as stored procedures and triggers) define valid
values that each column or argument can store.
Oracle Data Types vs. PostgreSQL Data Types
Oracle Oracle Data Type Oracle Data Type Characteristic PostgreSQL PostgreSQL
Data Type Identical Corresponding Data
Family Compatibility Type
Character C HAR(n) Maximum size of 2000 bytes √ CHAR(n)
Data Types CHARACTER(n) Maximum size of 2000 bytes √ CHARACTER(n)
NCHAR(n) Maximum size of 2000 bytes ☒ CHAR(n)
VARCHAR(n) Maximum size of 2000 bytes √ VARCHAR(n)
NCHAR Varying-length UTF-8 string ☒ CHARACTER VARYING(n)
VARYING(n) Maximum size of 4000 bytes
VARCHAR2(n) 11g Maximum size of 4000 bytes ☒ VARCHAR(n)
Maximum size of 32KB in PL/SQL
VARCHAR2(n) 12g Maximum size of 32767 bytes ☒ VARCHAR(n)
MAX_STRING_SIZE= EXTENDED
NVARCHAR2(n) Maximum size of 4000 bytes ☒ VARCHAR(n)
LONG Maximum size of 2GB ☒ TEXT
RAW(n) Maximum size of 2000 bytes ☒ BYTEA
LONG RAW Maximum size of 2GB ☒ BYTEA
Numeric NUMBER Floating-point number ☒ DOUBLE PRECISION
Data Types
NUMBER(*) Floating-point number ☒ DOUBLE PRECISION
NUMBER(p,s) Precision can range from 1 to 38 ☒ DECIMAL(p,s)
Scale can range from -84 to 127
NUMERIC(p,s) Precision can range from 1 to 38 √ NUMERIC(p,s)
FLOAT(p) Floating-point number ☒ DOUBLE PRECISION
DEC(p,s) Fixed-point number √ DEC(p,s)
DECIMAL(p,s) Fixed-point number √ DECIMAL(p,s)
INT 38 digits integer √ INTEGER /
NUMERIC(38,0)
INTEGER 38 digits integer √ INTEGER /
NUMERIC(38,0)
SMALLINT 38 digits integer √ SMALLINT
REAL Floating-point number ☒ DOUBLE PRECISION
DOUBLE Floating-point number √ DOUBLE PRECISION
PRECISION
Date DATE DATE data type stores date and √ TIMESTAMP(0)
&Time time data (year, month, day, hour,
Data Types minute and second)
89
Oracle Oracle Data Type Oracle Data Type Characteristic PostgreSQL PostgreSQL
Data Type Identical Corresponding Data
Family Compatibility Type
TIMESTAMP(p) Date and time with fraction √ TIMESTAMP(p)
TIMESTAMP(p) Date and time with fraction and √ TIMESTAMP(p) WITH
WITH TIME ZONE time zone TIME ZONE
INTERVAL YEAR(p) Date interval √ INTERVAL YEAR TO
TO MONTH MONTH
INTERVAL DAY(p) Day and time interval √ INTERVAL DAY TO
TO SECOND(s) SECOND(s)
LOB BFILE Pointer to binary file ☒ VARCHAR (255) /
Data Types Maximum file size of 4G CHARACTER VARYING
(255)
BLOB Binary large object ☒ BYTEA
Maximum file size of 4G
CLOB Character large object ☒ TEXT
Maximum file size of 4G
NCLOB Variable-length Unicode string ☒ TEXT
Maximum file size of 4G
ROWID ROWID Physical row address ☒ CHARACTER (255)
Data Types
UROWID(n) Universal row id ☒ CHARACTER VARYING
Logical row addresses
XML XMLTYPE XML data ☒ XML
Data Type
Logical BOOLEAN Values TRUE / FALSE and NULL √ BOOLEAN
Data Type Cannot be assign to a database
table column
Spatial SDO_GEOMETRY The geometric description of a ☒ -
Types spatial object