title:Automatic discovery of botnet communities on large-scale communication
networks
author:Wei Lu and
Mahbod Tavallaee and
Ali A. Ghorbani
Automatic Discovery of Botnet Communities                     
on Large-Scale Communication Networks 
Wei Lu, Mahbod Tavallaee and Ali A. Ghorbani  
University of New Brunswick 
Fredericton, NB E3B 5A3, Canada  
{wlu,m.tavallaee,ghorbani}@unb.ca  
ABSTRACT 
Botnets  are  networks  of  compromised  computers  infected  with 
malicious  code  that  can  be  controlled  remotely  under  a  common 
command  and  control  (C&C)  channel.  Recognized  as  one  the 
most  serious  security  threats  on  current  Internet  infrastructure, 
advanced  botnets  are  hidden  not  only  in  existing  well  known 
network  applications  (e.g.  IRC,  HTTP,  or  Peer-to-Peer)  but  also 
in  some  unknown  or  novel  (creative)  applications,  which  makes 
the botnet detection a challenging problem. Most current attempts 
for  detecting  botnets  are  to  examine  traffic  content  for  bot 
signatures  on  selected  network  links  or  by  setting  up  honeypots. 
In  this  paper,  we  propose  a  new  hierarchical  framework  to 
automatically discover botnets on a large-scale WiFi ISP network, 
in  which  we  first  classify  the  network  traffic  into  different 
application communities by using payload signatures and a novel 
cross-association clustering algorithm, and then on each obtained 
application  community,  we  analyze 
temporal-frequent 
characteristics of flows that lead to the differentiation of malicious 
channels created by bots from normal traffic generated by human 
beings.  We  evaluate  our  approach  with  about  100  million  flows 
collected  over  three  consecutive  days  on  a  large-scale  WiFi  ISP 
network  and  results  show  the  proposed  approach  successfully 
detects  two  types  of  botnet  application  flows  (i.e.  Blackenergy 
HTTP bot and Kaiten IRC bot) from about 100 million flows with 
a high detection rate and an acceptable low false alarm rate.  
the 
Categories and Subject Descriptors 
C.2.0  [Computer-Communication  Network]:  Security  and 
Protection;  
General Terms 
Security 
Keywords 
Botnet detection, traffic classification, machine learning 
1.  INTRODUCTION 
The Internet has witnessed the growth of botnets  in recent  years. 
Recent  Symantec's  report  shows  that  botnets  have  become  the 
biggest security threat to the current cyberworld, by conducting a 
large volume of malicious activities, such as distributed-denial-of-
service  (DDoS)  attacks,  spamming,  phishing,  keylogging,  click 
fraud,  identify  theft  and  information  exfiltration  [1].  Botnets  can 
be  centralized,  distributed  (P2P)  or  randomized  according  to 
different  command  and  control  (C&C)  models  and  different 
communication protocols (e.g. HTTP, IRC, P2P or other creative 
communication protocols). In Figure 1, we illustrate a typical life-
cycle of an IRC botnet and its attacking behavior. The botmaster 
first  finds  a  new  bot  by  exploiting  its  vulnerabilities  remotely. 
Once affected, the  bot will  download  and  install  the  binary  code 
by itself. After that, each bot on the botnet will attempt to find the 
IRC server address by DNS query, which is illustrated in Step 3 of 
Figure 1. Next  is  the  communication  step  between  bots  and  IRC 
server. In IRC based communication mechanism, a bot first sends 
a PASS message to the IRC server to start a session and then the 
server  authenticates  the  bot  by  checking  its  password.  In  many 
cases,  the  botmaster  also  needs  to  authenticate  itself  to  the  IRC 
server.  Upon  the  completion  of  these  authentications,  the 
command  and  control  channels  among  botmaster,  bots,  and  IRC 
server will be established. To start a  DDoS attack,  the  botmaster 
only needs to send a simple command like ".ddos.start victim_ip". 
Receiving this command, all bots start to attack the victim server. 
This is shown in Step 8 of Figure 1. More information about the 
botmaster command library can be found in [2]. 
victim server 
8.DDOS 
1.exploit 
2.bot download 
Botnet 
Botmaster 
vulnerable 
host 
3.DNS query 
DNS server 
7.command 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not  made  or  distributed  for  profit  or  commercial  advantage  and  that 
copies  bear  this  notice  and  the  full  citation  on  the  first  page.  To  copy 
otherwise,  or  republish,  to  post  on  servers  or  to  redistribute  to  lists, 
requires prior specific permission and/or a fee. 
ASIACCS'09, March 10-12, 2009, Sydney, NSW, Australia. 
Copyright 2009 ACM 978-1-60558-394-5/09/03â€¦$5.00. 
4
.
j
o
i
n
.
5
p
a
s
s
a
u
t
h
e
n
.
.
6
p
a
s
s
7
.
c
o
m
m
a
n
d
IRC server 
Figure  1.  Typical  life-cycle  of  an  IRC  based  botnet  and  its 
attacking behaviors 
1In reality, detecting and blocking such an IRC botnet, however, is 
not  a  difficult  task  since  the  whole  botnet  can  be  put  down  by 
blacklisting  the  IRC  server.  Network  administrators  who  attempt 
to  avoid  computers  on  their  internal  network  as  being  part  of 
botnets  can  simply  block  the  outbound  IRC  connections.  Thus, 
more  and  more  botnets  are  now  evolving  from  the  centralized 
communication way to the advanced distributed strategy,  such as 
the early Sinit [3], Phatbot with WASTE command [4], Nugache 
[5] and the recent Peacomm (Storm worm) [6].  
to 
the 
traditional  centralized  C&C  model, 
Compared 
the 
distributed (Peer-to-Peer) C&C based botnet is much harder to be 
detected and destroyed because the bot's communication does not 
heavily depend on a few selected servers, and thus shutting down 
a  single  or  even  couple  of  bots  cannot  necessarily  lead  to  the 
entire destruction of the whole botnet. 
Previous attempts to detect botnets are mainly based on honeypots 
[8,9,10,11,12,13],  passive  anomaly  analysis  [18,19,20,21]  and 
traffic  application  classification  [14,15,16,17].  Setting  up  and 
installing  honeypots  on  the  Internet  is  very  helpful  to  capture 
malware  and  understand  the  basic  behavior  of  botnets.  The 
passive  anomaly  analysis  for  detecting  botnets  on  a  network 
traffic  is  usually  independent  of  the  traffic  content  and  has  the 
potential  to  find  different  types  of  botnets  (e.g.  HTTP  based 
botnet,  IRC  based botnet  or  P2P  based  botnet).  Botnet  detection 
based  on  traffic  classification  focuses  on  classifying  traffic  into 
IRC  traffic  and  non-IRC  traffic,  and  thus  it  can  only  detect  IRC 
based  botnets,  which  is  the  biggest  limitation  compared  to  the 
anomaly  based  botnet  detection.  Although  existing  botnet 
detection mechanisms generate a number  of good  ideas,  they  are 
far  from  completed  yet  due  to  the  evolution  in  botnet  strategy. 
Specifically, the  status  quo  regarding  botnet  detection  raises  two 
major  challenges:  (1)  How  to  detect  new  (or  recent)  appeared 
botnets?  A  conventional  botnet  usually  has  a  centralized  C&C 
structure  that  exploring  network  protocols  like  IRC  or  HTTP. 
Almost all the current approaches are proposed for detecting well 
known IRC and/or HTTP based botnets by modeling bot binaries 
or  botnet  signatures.  These  approaches,  however,  might  be 
completely  useless  against  new  (or  recent)  appeared  botnets  in 
which their structures are moved from centralized to decentralized 
(peer-to-peer)  and  their  C&C  channels  are  evolved  from  IRC  or 
HTTP  to  other  own  developed  protocols  based  on  TCP/IP  stack 
(e.g.  turning  a  social  network  into  a  botnet  [7]);  (2)  How  to 
identify  applications  for  network  traffic?  Identifying  network 
traffic  as different  applications is very challenging and  is  still  an 
issue yet to be solved. The traffic classification in the existing IRC 
or HTTP based botnet detection approaches relies to a large extent 
on  the  transport  layer  port  numbers.  Although  the  traffic 
identification using port numbers was an effective way in the early 
days  of  the  Internet,  it  provides  very  limited  information 
nowadays.  An  alternative  way  is  to  examine  the  payload  of 
network  flows  and  then  create  signatures  for  each  application. 
This,  however,  still  generates  two  major  limitations:  one  is  legal 
issues  related  to  privacy  and  the  other  is  that  it  is  impossible  to 
identify  encrypted  traffic.  By  observing  traffic  on  a  large-scale 
WiFi  ISP  network  over  a  half-year  period,  we  found  that  even 
exploring  the  payload  signature  examination  method,  there  are 
still  about  40%  network  flows  that  cannot  be  classified  into 
specific  applications.  Investigating  such  a  huge  number  of 
unknown traffic is inevitable in botnet detection since they might 
simply  stand  for  the  missed  known  botnet  traffic,  malicious 
activities  or  the  new  botnet  traffic  based  on  novel  (creative) 
applications. 
Addressing  the  above  two  challenges,  we  propose  a  hierarchical 
framework  illustrated  in  Figure  2  for  the  next  generation  botnet 
detection, which consists of two levels: (1) in the higher level all 
unknown  network  traffic  are  labeled  and  classified  into  different 
network application communities, such as P2P community, HTTP 
Web  community,  Chat  community,  DataTransfer  community, 
Online  Games  community,  Mail  Communication  community, 
Multimedia (streaming and VoIP) community and Remote Access 
community (i.e. Steps 1 and 2 of Figure 2); (2) in the lower level 
focusing on each application community, we investigate and apply 
the 
to 
differentiate  the  malicious  botnet  behavior  from  the  normal 
application traffic (Step 3 of Figure 2). The major contributions of 
this  paper  include:  (1)  we  propose  a  novel  application  discovery 
approach  for  automatically  classifying  network  applications  on  a 
large-scale  WiFi  ISP  network,  and  (2)  we  develop  a  generic 
algorithm to discriminate general botnet behavior from the normal 
network  traffic  on  a  specific  application  community,  which  is 
based on n-gram (frequent characteristics) of flow payload over a 
time period (temporal characteristics). 
temporal-frequent  characteristics  of  network  flows 
input network flows 
Step 1. Payload Signature based 
Application Classifier 
unknown flows 
Step 2. Cross-Association based 
Application Classifier 
network application communities 
P2P 
IRC 
WEB 
Step 3 
Humans IRC Flows 
Bots IRC Flows 
Figure 2. The proposed hierarchical framework 
for automatic botnets discovery 
The rest of the paper is organized as follows. Section 2 introduces 
related  work,  in  which  we  summarize  existing  botnet  detection 
approaches  in  terms  of  three  categories.  Section  3  presents  our 
application classification approach for network flows. Section 4 is 
the  botnet  detection  algorithm  based  on  the  temporal-frequent 
characteristics of botnets. Section 5 is the experimental evaluation 
for  our  detection  model  with  a  mixture  of  around  100  million 
flows collected on a large-scale WiFi ISP network and two types 
of botnet traffic trace (i.e. Kaiten IRC bot [41] and BlackEnergy 
HTTP  bot  [42])  collected  on  our  testbed  network.  Finally,  in 
Section  6  we  make  some  concluding  remarks  and  discuss  the 
future work. 
22.  RELATED WORK 
Early  research  work  on  botnets  analysis  is  based  on  existing 
public botnet codebases. A typical example is the work by Barford 
and Yegneswaran [2], in which  they analyzed  botnet behavior in 
terms  of  exploits,  botnet  control  mechanisms,  host  control 
mechanisms,  propagation  mechanisms,  delivery  mechanisms, 
obfuscation and deception mechanisms based on four public IRC 
botnets codebases. In order to get a full understanding of botnets 
behavior, honeypots are widely installed and setup on the Internet 
to  capture  the  malware  and  then  bots  are  collected,  tracked  and 
analyzed. Typical works on honeypot based botnets detection are 
illustrated in [8,9,10,11,12,13]. 
Except honeypot technique based botnet detection,  the other  two 
categories  of  botnet  detection  approaches  have  been  proposed 
recently,  namely  traffic  classification  based  and  passive  anomaly 
analysis  based.  Typical  works  of  traffic  application  classification 
based botnet detection includes [14,15,16,17]. In [14,15], Strayer 
et  al.  propose  an  approach  for  detecting  botnets  by  examining 
flow  characteristics  such  as  bandwidth,  duration,  and  packet 
timing  in  order  to  look  for  the  evidence  of  the  botnet  command 
and  control  activities.  They  proposed  an  architecture  that  first 
eliminates  traffic  that  is  unlikely  to  be  a  part  of  a  botnet,  then 
classifies the remaining traffic into a group that is likely to be part 
of a botnet, and finally correlates the likely traffic to find common 
communications  patterns  that  would  suggest  the  activity  of  a 
botnet. In [16], Livadas et al. applied machine learning techniques 
to identify the commond and control (C&C) traffic of IRC-based 
botnets.  They  suggest  a 
(1) 
distinguishing  between  IRC  and  non-IRC 
traffic,  and  (2) 
distinguishing between botnet IRC traffic and real IRC traffic. In 
[17],  Goebel  and  Holz  develop  a  signature  based  IRC  botnet 
detection  system,  Rishi,  by  monitoring  only  IRC  application 
traffic and matching predefined specific bot nicknames patterns. 
two-step  detection  process: 
Typical  approaches  of  anomaly  based  botnet  detection  are 
discussed  in  [18,19,20,21].  In  [18],  Karasaridis  et  al.  study 
network  flows  and  detect  IRC  botnet  controllers  in  a  fashion  of 
four  steps,  in  which  the  most  important  one  is  to  identify  hosts 
with  suspicious  behavior  and  isolate  flow  records  to/from  those 
hosts. In [19], Binkley and Singh first determine an IRC channel 
and then apply a  SYN-scanner  detection  system  to  decide  which 
individual  host  in  the  IP  channel  is  a  scanner.  IRC  channels  are 
sorted  by  the  scanning  count,  with  the  top  suspect  channels 
labelled  as  potential  botnets.  In  [20],  Gu  et  al.  investigate  the 
spatial-temporal  correlation  and  similarity  in  network  traffic  and 
implement  a  prototype  system,  BotSniffer,  to  detect  IRC  and 
HTTP  botnets.  All 
the  above  mentioned  botnet  detection 
techniques  are  either  limited  to  the  specific  C&C  protocols  (e.g. 
can  detect  IRC  botnet  only)  or  limited  to  the  specific  botnet 
structures (e.g. centralized only). Gu et al.  propose in their latest 
paper  a  general  botnet  detection  framework,  BotMiner,  which  is 
entirely  independent  of  the  botnet  structure  and  C&C  protocols 
and requires no prior knowledge of botnets [21]. Sharing with the 
same  motivation  with  BotMiner  by  Gu  et  al.,  our  hierarchical 
botnet  detection  system  addresses  firstly  the  automatic  network 
application discovery and then bots behavior is analyzed on each 
obtained application communities, which is very different with the 
detection way of BotMiner in which similar communication traffic 
and  malicious  traffic  are  first  clustered  and  then  correlated  in 
order  to  identify  hosts  sharing  both  similar  communication 
patterns  and  similar  malicious  activity  patterns,  and  as  a  result 
these  hosts  will  be  naturally  considered  as  bots  based  on  the 
essential  property  of  botnets.  To  the  best  of  our  knowledge,  the 
similar  communication  patterns  defined  in  BotMiner  might 
roughly  stand  for  the  same  network  application  (like  Web,  FTP, 
Chat,  ect.)  and  discovering  automatically  the  exact  network 
applications, however, is necessary in BotMiner.   
3.  TRAFFIC CLASSIFICATIONS 
Identifying  network  traffic  into  different  applications  is  very 
challenging  and  is  still  an  issue  yet  to  be  solved.  In  practice, 
traffic  application  classification  relies  to  a  large  extent  on  the 
transport  layer  port  numbers,  which  was  an  effective  way  in  the 
early  days  of  the  Internet.  Port  numbers,  however,  provide  very 
limited information nowadays due  to the increase of  applications 
tunneled through HTTP, the constant emergence of new protocols 
and  the  domination  of  P2P  networking  [22].  Examining  the 
payload  signatures  of  applications  improves  the  classification 
accuracy,  but  still  a  large  number  of  traffic  cannot  be  identified 
because of the privacy related issues and encrypted network traffic. 
Recent  studies  on  network  traffic  application  classification 
include  "applying  machine  learning  algorithm  for  clustering  and 
classifying  traffic  flows"  [23,24,25,26,27],  "statistical  signatures 
or fingerprint based classification" [28,29,30,31] and "identifying 
traffic  in  blind  or  on  the  fly"  [32,33].  The  biggest  limitation  of 
current  application  classification  approaches  is  that  they  cannot 
identify  all  the  existing  network  applications  and  the  application 
scopes  they  can  identity  are  very  rough,  for  example,  BLINC 
attempts to identify the general P2P traffic instead of the specific 
underlying  P2P  applications  like  eDonkey,  BitTorrent,  etc. 
Moreover,  comparing  all  above  mentioned  methods  is  difficult 
due  to  the  lack  of  sharable  dataset  and  appropriate  metrics  [43]. 
Different  with  the  previous  approaches,  our  method  is  hybrid, 
combining  the  payload  signatures  with  a  novel  cross  association 
clustering  algorithm  [25].  The  payload  signatures  classify  traffic 
into  predefined  known  application  communities.  The  unknown 
traffic is then assigned into different application communities with 