13.5.2共享内存
类似于信号量，许多系统提供了命令行程序来访问共享内存的细节情况。其中包括“ipcs·
（>-）>s
下面是几个ipcs命令的示范性输出：
Sipcs -m
—Shared Merory Segnents -
shnid
384
berms
nattch
status
960
2
这里给出的情况是：只有一个长度为4KB的共享内存段，它连接了两个进程。
"ipcrmshm”命令的作用是删除共享内存段。如果程序因运行失败而没有来得及清理
加入jaVa编程群：524621833
---
## Page 437
第13章信号量、消息队列和共事内存
419
共享内存，你可以让这个命令显一下身手。
13.5.3消息队列
b-，）>b-s，
的形式）等。
下面是ipcs命令的一些示范性输出：
S ipcs-q
sanang abessan 
msqid
ouner
berms
3 84
这里给出的情况是：有两个消息，消息队列的总长度是2048个字节。
“ipcrmmsg”命令的作用是删除消息队列。
13.6本章总结
在这一章里，我们学习了三种进程间的通信功能，它们最早出现在UNIXSystemV.2版本里，
即信号量、共享内存和消息队列。我们对它们提供的复杂功能进行了学习。一且掌握了这些函
数的使用方法，就能用它们来解决许多进程间通信方面的问题。
加入jaVa编程群：524621833
---
## Page 438
第14章套接字
在这一章里，我们将学习进程间通信的另外一种方法，它与以前学习的方法相比有一个明
显的不同。以前介绍的通信功能都要靠单台计算机系统上的共享资源才能实现。这个资源多种
多样，它可以是文件系统空间、可以是共享的物理内存空间，还可以是消息队列；但都是只有
运行在同-机器上的进程才能使用它们。
Berkeley版的UNiX引人了-种全新的通信手段，它就是套接字接口（socketinterface），它
是管道概念的一个扩展。你完全可以把套接字当作管道来用，但套接字还插盖了计算机网络中
的通信。一台机器上的某个进程可以使用套接字与另一台机器上的某个进程进行通信，这就使
客户/服务器系统可以分布到整个网络。同一-机器上的进程也可以使用套接字进行通信。
此外，微软公司的Windows也通过公开的WindowsSockets技术标准（简称WinSock标准）
实现了套接字接口，它的套接字服务是通过系统文件Winsock.dul提供的。这样，微软Windows程
序和UNIX计算机就可以相互跨网络通信，实现客户/服务器系统。WinSock的程序设计接口与
UNIX套接字不尽相同，但它同样是以套接字为基础的。
只用一章的篇幅是不可能把UNIX丰富的网络功能都讨论完的，而这一章的目的只是把网络
方面主要的程序接口介绍给大家。掌握了这些程序设计接口，就能开始编写你们自己的网络程
序了。我们将要学习的内容包括：
·套接字连接的操作原理。
·套接字的属性、地址和通信。
·网络信息和因特网守护进程。
·客户和服务器。
14.1什么是套接字
套接字是这样一种通信过程，它使客户/服务器系统的开发工作既可以在本地单机上进行，
也可以跨网络进行。UNIX函数（比如打印输出类函数）和rlogin、ftp等网络工具基本上都是通
过套接字来进行通信的。
别。套接字机制可以把多个客户连接到一个服务器。
14.2套接字连接
我们可以把套接字连接想象成一座办公大楼里的电话。一个电话打到一家公司，接线员接
打进来的电话（客户）都被转到正确的分机，而总机接线员则被空出来去处理以后打进来的电
加入java编程群：524621833
---
## Page 439
第14章套接字421
话。在我们开始研究UNIX系统里的套接字连接是如何建立起来的之前，我们先要弄明白套接字
软件是如何处理一个连接的。
首先，服务器软件必须先创建出一个套接字、这是分配给该服务器进程的一个操作系统资
源，因为这个套接字是由该服务器通过系统调用socket创建出来的，所以其他进程将不能对它进
行访问。
接着，服务器进程会给套接字起个名字。给本地套接字起的名字是UNIX文件系统中的一
个文件名，一般放在/tmp或/usr/tmp子目录里。而网络套接字的名字则是一个与客户所能连接
的特定网络有关的服务标识符（也叫做端口号或访问点）。给套接字起名字（这个操作叫做
“绑定”）要使用系统调用bind。然后，服务器就开始等待有客户连接到这个命名套接字上来。
系统调用listen的作用是创建一个队列，来自客户的连接（接人连接）将在这个队列上排队等
人连接。
当服务器调用accept的时候，会新创建一个套接字，这个套接字与刚才说的命名套接字不是
一回事，新套接字的惟一用途就是与这个特定的客户进行通信，而命名套接字则被解放出来，
准备处理来自其他客户的连接。如果服务器编写得当，就可以享受多个连接带来的好处。对一
个简单的服务器来说，后来的客户需要在队列里等待服务器的重新就绪。
基于套接字系统的客户端就比较简单了。客户先通过调用socket创建出一个未命名套接字，
然后调用connect利用服务器的命名套接字和一个地址来建立起一个连接。
套接字被建立起来之后，人们就可以象对待底层文件描述符那样用它来实现双向的数据通
信了。
下面是一个非常简单的套接字客户程序clientl.c。它创建了一个未命名套接字，然后把它连
接到一个名为server_socket的服务器套接字。我们将先向大家介绍一些地址设定方面的知识，然
后再讨论socket系统调用的细节。
动手试试：一个简单的本地客户
1）必要的头文件和变量的韧始化。
include 
tinclude 
include 
incjude 
#include 
int main()
int sockfd;
struct sockaddr_un address;
int result;
char ch = 'A';
2）为客户创建一个套接字。
sockfd - socket (AF_UNIx, SOCK_STREAM, 0 1;
3）根据服务器的设置情况给这个套接字起个名字：
加入jaVa编程群：524621833
---
## Page 440
422
Linux程序设计
address.sun_family = AF_uNIX;
strepy(address.sun_path,*server_socket*);
len = sizeof(address);
4）现在，把我们的套接字连接到服务器的套接字。
resuit  connect (sockfd,(struct sockaddr *)&address,len);
1f(result =# -1){
perror(*oops: client1*);
exit [1] ;
}
5）现在就可以通过sockfd进行读写操作了。
write(sockfd, kch, 1):
printf(*char from server = Bc\n*,ch);
read(sockfd, kch, 1):
close(sockfd) :
exit (0) :
1
这个程序在运行的时候会失败，这是因为我们还没有创建出服务器端的命名套接字（错误
信息的正确文字会随系统的不同而不同）。如下所示：
oops: clientl: Connection refused
S cllent1
5
下面是一个简单的服务器程序serverl.c，它的作用是接受来自我们这个客户的连接。它创建出
一个服务器套接字，把它绑定到一个名字上，再创建一个监听队列，做好接受连接的准备工作。
动手试试：一个简单的本地服务器
1）必要的头文件和变量的初始化。
include 
include 
#include 
include 
include 
int nain()
int server_sockfd, client_sockfd;
int server_len,client_len;
struct sockaddr_un client_address;
struct sockaddr_un server_address;
2）删掉以前的套接字，再为服务器新创建一个未命名套接字。
server_sockfd = socketIAP_UNIX,SOCK_STREAM.0);
3)给套接字起名字。
server_addrese.sun_family = AF_uNIx;
server_len = sizeef(server_address):
strcpy(server_address.sun_path,‘server_socket'):
bind(server_sockfd,(struct soekaddr *1&server_address,server_len):
4）创建一个连接队列，开始等待客户的到来。
加入jaVa编程群：524621833
---
## Page 441
第14章套接宇423
listen(server_sockfd, 51:
while (1)(
char ch;
printf(*server waiting\n′1;
5)接受一个连接。
client,len = sizeof(elient_address);
client_sockfd = accept(server_sockfd,
(struct sockaddr *)&client_addxess,&client_ien):
6)对cilent_sockfd套接字上的客户进行读写。
read[elient_sockfd, &ch, 11:
writetclient_sockfd, &ch. 1):
ch++:
close(client_sockfd):
这个例子里的服务器程序一次只能向一个客户提供服务。它只从客户那里读取一个字符，
给它加上一个“1”，再把它写回去：而在这个服务器完成处理工作之前，其他客户是无法建立
起连接的。在更加复杂的系统里一即服务器需要应客户的请求完成相当多的处理工作时，这种
一次只服务一个客户的做法是不能接受的。我们后面会看到几个允许建立多个连接的解决方案。
当我们运行这个程序的时候，服务器会创建出个套接字并开始等待连接的到来。我们在
后台启动它，让它独立运行起来，就可以在前台启动客户了。如下所示：
Sserverl&
$ server waiting
[1] 1094
服务器在开始等待连接的时候会打印出一条消息。在上面的例子里，服务器等待的是一个
文件系统套接字，所以我们可以用普通的Is命令查看到它。记住：当你用完一个套接字的时候，
就应该把它删除掉，即使是在程序因为一个信号而非正常终止的情况下也应该这么做。如下
所示：
≤1s-1F server_aocket
T x=ax-xxs
0 Jan 14 08:28 server_socket=
访问权限前面的字母“s”和这一行末尾处的等号“”表示该设备的类型是套接字。这个
套接字就象是一个普通的文件那样被创建了出来，它的访问权限要受当前umask掩码的控制。如
果使用ps命令，我们就能看到服务器正运行在后台。它目前处于休眠状态（STAT栏是S），不消
耗任何CPU资源。如下所示：
S_pe -1x
5011094
UID
PPID PRI NI SIZE
1034164116976
RSS WCHAN
STAT TTY
0:00serveri
TIME COMMAND
PPU
现在，当我们运行客户程序的时候，就比刚才的效果成功了。因为服务器套接字已经存在
了，所以我们能够连接上它并与服务器进行通信。如下所示：
S client1
char fron server = B
server waiting
加入java编程群：524621833
---
## Page 442
424Linux程序设计
务器确实从客户那里接受到一个字符，给它加上一个“1”后再返回了它。此后，服务器继续运
行并且等待着下一个客户的到来。如果我们同时运行多个客户，就会看到它们是被依次服务的。
如下所示：
5 elient1&clieotl&client1&
[2}1106
[3]1107
[4] 1108
char from server s B
server vaiting
server waiting
char fron server = B
server waiting
[3]-Done
[z]
Done
client1
[4]+ Done
client1
client1
14.2.1套接字属性
为了更好地理解这个例子里所使用的系统调用，我们需要先学习一些UNIX网络连接方面的
知识。
套接字的特性是由三个属性确定的、即域（domain）、类型（type）和协议（protocol），另
外还有一个被用做其名字的地址。地址的格式会根据域的不同而变化，也叫做协议族（protocol
family）。每个协议族又可以用一个或者多个地址族来定义地址的格式。
1.套接字的域
域定义的是套接字通信中使用的网络介质。最常用的套接字域是AF_INET，它对应着因特
网网络模型，许多UNIX局域网用的都是它，当然，因特网自身用的也是它-其底层的协议是
InternetProtocol（因特网协议，简称IP协议）。这个协议只有一个地址族，它使用一种独特的办
法来指定网络中的计算机。这就是人们常说的IP地址。