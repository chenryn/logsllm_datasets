# 四、创建和管理容器映像
在前一章中，我们学习了什么是容器，以及如何运行、停止、移除、列出和检查它们。我们提取了一些容器的日志信息，在一个已经运行的容器中运行其他进程，最后我们深入到容器的解剖结构中。每当我们运行一个容器时，我们都使用一个容器映像来创建它。在本章中，我们将熟悉这些容器映像。我们将详细了解它们是什么，如何创建它们，以及如何分发它们。
本章将涵盖以下主题:
*   什么是映像？
*   创建映像
*   共享或发送映像
完成本章后，您将能够执行以下操作:
*   说出容器映像最重要的三个特征
*   通过交互式更改容器层并提交它来创建自定义映像
*   使用`FROM`、`COPY`、`RUN`、`CMD`和`ENTRYPOINT`等关键字创建一个简单的 Dockerfile，以生成自定义映像
*   使用`docker image save`导出现有映像，并使用`docker image load`将其导入另一个 Docker 主机
*   编写一个两步 Dockerfile，通过在最终映像中只包含结果工件(二进制文件)来最小化结果映像的大小
# 什么是映像？
在 Linux 中，一切都是一个文件。整个操作系统基本上是一个文件系统，文件和文件夹存储在本地磁盘上。当查看什么是容器映像时，这是一个需要记住的重要事实。正如我们将看到的，映像基本上是一个包含文件系统的大目标球。更具体地说，它包含一个分层的文件系统。
# 分层文件系统
容器映像是创建容器的模板。这些映像不仅仅是一个整体块，而是由许多层组成。映像中的第一层也称为基础层:
![](img/e3c398f5-c41c-4a64-b7a6-2dd49b0d5a1e.jpg)
The image as a stack of layers
每个单独的层包含文件和文件夹。每一层只包含相对于底层文件系统的更改。Docker 使用联合文件系统——如第 3 章、*中讨论的那样，使用容器—* 从一组层中创建一个虚拟文件系统。存储驱动程序处理关于这些层相互作用方式的细节。不同的存储驱动程序在不同的情况下各有利弊。
容器映像的层都是不可变的。不可变意味着一旦生成，图层就永远无法更改。影响该层的唯一可能的操作是物理删除它。正如我们将看到的，这种层的不变性很重要，因为它打开了大量的机会。
在下图中，我们可以看到使用 Nginx 作为 web 服务器的 web 应用的自定义映像是什么样子的:
![](img/1c511675-f184-4883-8c62-bd92c7154c18.jpg)
A sample custom image based on Alpine and Nginx
我们这里的基础层由 Alpine Linux 发行版组成。然后，在此之上，我们有一个层，其中 Nginx 被添加到阿尔卑斯山的顶部。最后，第三层包含构成 web 应用的所有文件，如 HTML、CSS 和 JavaScript 文件。
如前所述，每个映像都从一个基础映像开始。通常，这个基础映像是 Docker Hub 上的官方映像之一，例如 Linux 发行版、Alpine、Ubuntu 或 CentOS。但是，也可以从头开始创建映像。
Docker Hub is a public registry for container images. It is a central hub ideally suited for sharing public container images. 
每一层仅包含相对于前一组层的变化增量。每一层的内容都映射到主机系统上一个特殊的文件夹，通常是`/var/lib/docker/`的一个子文件夹。
因为层是不可变的，所以它们可以被缓存而不会过时。这是一个很大的优势，我们将会看到。
# 可写容器层
正如我们已经讨论过的，容器映像是由一堆不可变或只读的层组成的。当 Docker 引擎从这样的映像创建一个容器时，它会在这个不可变层的栈上添加一个可写的容器层。我们的栈现在如下所示:
![](img/efd103bb-fe3b-4036-9110-6f73863a4ca8.jpg)
The writable container layer
容器层标记为读/写。映像层不变性的另一个优点是，它们可以在从该映像创建的许多容器之间共享。所需要的只是每个容器的一个薄的、可写的容器层:
![](img/b36ad091-d8e4-40dd-a50b-55c7bb71cbe0.jpg)
Multiple containers sharing the same image layers
当然，这种技术大大减少了消耗的资源。此外，这有助于减少容器的加载时间，因为一旦映像层被加载到存储器中，只需要创建一个薄的容器层，这仅发生在第一个容器上。
# 写时复制
Docker 在处理映像时使用写时复制技术。写时复制是一种共享和复制文件以实现最高效率的策略。如果一个图层使用的文件或文件夹在其中一个较低的图层中可用，那么它只会使用它。另一方面，如果一个层想要修改，比如说，一个低层的文件，那么它首先将这个文件复制到目标层，然后修改它。在下图中，我们可以看到这意味着什么:
![](img/ba8c9083-c5b5-40b0-a877-207b6020b506.jpg)
Copy-on-write
第二层想修改**文件 2** ，存在于基础层。因此，它复制了它，然后修改了它。现在，假设我们位于上图的顶层。该层将使用基础层的**文件 1** 和第二层的**文件 2** 和**文件 3** 。
# 图形驱动程序
图形驱动程序支持联合文件系统。图形驱动程序也称为存储驱动程序，在处理分层容器映像时使用。图形驱动程序将多个映像层合并到容器的装载命名空间的根文件系统中。或者，换句话说，驱动程序控制映像和容器如何在 Docker 主机上存储和管理。
Docker 使用可插拔架构支持几种不同的图形驱动程序。首选驱动程序是覆盖 2，然后是覆盖。
# 创建映像
有三种方法可以在系统上创建新的容器映像。第一种方法是交互式地构建一个容器，其中包含所有您想要的添加和更改，然后将这些更改提交到一个新的映像中。第二种也是最重要的方法是使用 Dockerfile 来描述新映像中的内容，然后使用该 Dockerfile 作为清单来构建该映像。最后，创建映像的第三种方法是从 tarball 将其导入系统。
现在，让我们详细看看这三种方式。
# 交互式映像创建
我们可以创建自定义映像的第一种方法是通过交互式地构建一个容器。也就是说，我们从一个我们想要用作模板的基础映像开始，并交互地运行它的一个容器。假设这是`alpine`映像。运行容器的命令如下:
```
$ docker container run -it --name sample alpine /bin/sh
```
默认情况下，高山容器没有安装`ping`工具。假设我们想要创建一个安装了`ping`的新自定义映像。在容器中，我们可以运行以下命令:
```
/ # apk update && apk add iputils
```
这使用阿尔卑斯包管理器`apk`来安装`iputils`库，其中`ping`是一部分。前面命令的输出应该如下所示:
```
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz
v3.7.0-50-gc8da5122a4 [http://dl-cdn.alpinelinux.org/alpine/v3.7/main]
v3.7.0-49-g06d6ae04c3 [http://dl-cdn.alpinelinux.org/alpine/v3.7/community]
OK: 9046 distinct packages available
(1/2) Installing libcap (2.25-r1)
(2/2) Installing iputils (20121221-r8)
Executing busybox-1.27.2-r6.trigger
OK: 4 MiB in 13 packages
```
现在，我们确实可以使用`ping`，如下图所示:
```
/ # ping 127.0.0.1
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.028 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.044 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.049 ms
^C
--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2108ms
rtt min/avg/max/mdev = 0.028/0.040/0.049/0.010 ms
```
一旦我们完成了定制，我们可以通过在提示符下键入`exit`退出容器。如果我们现在列出所有带有`docker container ls -a`的容器，我们可以看到我们的样品容器的状态为`Exited`，但是仍然存在于系统中:
```
$ docker container ls -a | grep sample
eff7c92a1b98    alpine    "/bin/sh"    2 minutes ago      Exited (0) ...
```
如果我们想查看容器中相对于基础映像发生了什么变化，我们可以使用`docker container diff`命令，如下所示:
```
$ docker container diff sample
```
输出应该显示在容器的文件系统上完成的所有修改的列表:
```
C /bin
C /bin/ping
C /bin/ping6
A /bin/traceroute6
C /etc/apk
C /etc/apk/world
C /lib/apk/db
C /lib/apk/db/installed
C /lib/apk/db/lock
C /lib/apk/db/scripts.tar
C /lib/apk/db/triggers
C /root
A /root/.ash_history
C /usr/lib
A /usr/lib/libcap.so.2
A /usr/lib/libcap.so.2.25
C /usr/sbin
C /usr/sbin/arping
A /usr/sbin/capsh
A /usr/sbin/clockdiff
A /usr/sbin/getcap
A /usr/sbin/getpcaps
A /usr/sbin/ipg
A /usr/sbin/rarpd
A /usr/sbin/rdisc
A /usr/sbin/setcap
A /usr/sbin/tftpd
A /usr/sbin/tracepath
A /usr/sbin/tracepath6
C /var/cache/apk
A /var/cache/apk/APKINDEX.5022a8a2.tar.gz
A /var/cache/apk/APKINDEX.70c88391.tar.gz
C /var/cache/misc
```
在上表中，`A`代表*增加了*，`C`代表*改变了*。如果我们有任何删除的文件，那么这些文件的前缀将是`D`。
我们现在可以使用`docker container commit`命令来保存我们的修改，并从中创建一个新的映像:
```
$ docker container commit sample my-alpine
sha256:44bca4141130ee8702e8e8efd1beb3cf4fe5aadb62a0c69a6995afd49c2e7419
```
通过前面的命令，我们已经指定新映像将被称为`my-alpine`。由前面的命令生成的输出对应于新生成的映像的标识。我们可以通过列出系统上的所有映像来验证这一点，如下所示:
```
$ docker image ls
```
我们可以看到这个映像标识(简称)如下:
```
REPOSITORY TAG      IMAGE ID        CREATED               SIZE
my-alpine  latest   44bca4141130    About a minute ago    5.64MB
...
```
我们可以看到名为`my-alpine`的映像，拥有`44bca4141130`的预期 ID，并且自动获得了一个分配的标签`latest`。这是因为我们自己没有明确定义标签。在这种情况下，Docker 始终默认为标签`latest`。
如果我们想看看我们的自定义映像是如何构建的，我们可以使用`history`命令，如下所示:
```
$ docker image history my-alpine
```
这将打印映像包含的图层列表:
```
IMAGE            CREATED         CREATED BY          SIZE       COMMENT
44bca4141130     3 minutes ago   /bin/sh             1.5MB
e21c333399e0     6 weeks ago     /bin/sh -c #...     0B
        6 weeks ago     /bin/sh -c #...     4.14MB
```
前面列表中的第一层是我们刚刚通过添加`iputils`包创建的。
# 使用 Dockerfiles