code 𝐿𝑚 over F𝑚 is the code whose codewords are all 𝑚×𝑛 matrices
𝑈 such that every row 𝑈𝑖 of 𝑈 satisfies 𝑈𝑖 ∈ 𝐿.
Following the idea in [5], the protocol to test whether the con-
structed matrix 𝑈 is an interleaved linear code contains two checks.
In the first check, the verifier asks the prover to take a random linear
Session 6E: Zero Knowledge CCS '20, November 9–13, 2020, Virtual Event, USA2028combination of the rows in matrix 𝑈 , and sends the combined code-
word 𝑤 = 𝑟𝑇 𝑈 to the verifier, where 𝑟 is a random vector chosen by
the verifier. Due to the property of linear codes, the verifier verifies
that 𝑤 is a valid RS code (by decoding 𝑤 for example.) In the second
check, the verifier aims to ensure that the combined codeword 𝑤
sent by the prover is actually consistent with the matrix 𝑈 . This is
done by randomly opening some columns of 𝑈 . In particular, the
verifier picks 𝑄 ⊆ [𝑛], a set of random indices. The prover sends
all columns of 𝑈 [ 𝑗] for 𝑗 ∈ 𝑄 with their consistency proofs to the
commitment of 𝑈 . The verifier checks that ∀𝑗 ∈ 𝑄, 𝑤 𝑗 = ⟨𝑟, 𝑈 [ 𝑗]⟩.
Intuitively, the reason the protocol works is that if the matrix
𝑈 is far from an interleaved code, then if 𝑤 sent by the prover in
the first check is indeed 𝑟𝑈 , it is not a valid RS code with high
probability; otherwise if 𝑤 is not 𝑟𝑇 𝑈 , then with high probability
some 𝑤 𝑗 will be inconsistent with ⟨𝑟, 𝑈 [ 𝑗]⟩. Regarding the proof
size, the communication in the first check is linear to the row size,
and the communication in the second check is linear to the size of
columns in 𝑈 . Therefore, the communication of the interleaved test
in [5] is optimal when the sizes of the rows and columns are set to
be roughly the same.
Improving proof size. We observe that the second check is actu-
ally computing multiple inner products between vectors from the
prover and a public vector selected by the verifier. (I.e., for all 𝑗 ∈ 𝑄,
𝑤 𝑗 = ⟨𝑟, 𝑈 [ 𝑗]⟩.) Then, instead of sending these vectors directly as in
[5], the prover and the verifier can invoke inner product arguments
to perform the second check. Using the inner product argument
scheme described in Section 2.4 reduces the communication of the
second check to be logarithmic in the size of the columns in 𝑈 . The
check is utilized in Step 5 in Protocol 1.
Looking ahead, when using our new interleaved linear code test,
the witness of our zero-knowledge argument will be encoded into
an interleaved code such that the size of the matrix is asymptotically
the same as the size of the circuit/R1CS, denoted as 𝐶. Therefore, we
polylog(𝐶) ×polylog(𝐶).
will encode the witness into a matrix of size
In this way, the communication of both checks are polylog(𝐶)
and the proof size of the zero-knowledge argument is polylog(𝐶),
instead of 𝑂(√
𝐶) in [5]. Our full protocol for testing interleaved
linear code is presented in Protocol 1.
We next prove the following theorem:
Theorem 3.1. Protocol 1 is an interleaved linear code testing with
the following properties:
• Completeness. For any valid interleaved Reed-Solomon code 𝑈 ∈
𝐿𝑚, the verifier accepts 𝑈 with probability one.
• Soundness. ([5, 55]) Let 𝛿 = negl(𝜆) be the soundness error of
the IPA protocol and let 𝑒 be a positive integer such that 𝑒  𝑒. Then, for any malicious P∗ strategy, the
oracle 𝑈 ∗ is rejected by V except with probability (1 − 𝑒/𝑛)𝑡 +
𝑑/|F| + 𝛿.
Proof. We will prove both properties.
Completeness. First, the completeness of the interleaved test
directly follows from the properties of linear codes and correctness
of inner product argument.
Soundness. Let P∗ be a malicious strategy for the prover. To-
wards analyzing the soundness error, we will formally define the
following event Honest defined as follows. This event holds if the
𝐶
prover can provide randomness that “proves” it performed Step 5
correctly. Meaning, assume that the transcript trans is already fixed
right before this step, then there exists randomness 𝑟 for which
when running P∗(trans; 𝑟) then P∗ follows the honest strategy for
the prover P as defined in Protocol 1. We split the analysis into
two cases.
• Case I. In this case we condition on the event Honest. Let 𝑒  𝑒. Then we will consider two subcases here.
– 𝑑(𝑤∗, 𝐿) = 𝑒′ > 𝑒. Note that in this case, V will only accept
the interleaved test if it queries all the 𝑡 values are from the
remaining 𝑛 − 𝑒′ positions. The probability of that is (𝑛−𝑒′
𝑡 )
𝑡) .
(𝑛
This can be generalized to get the probability,
Pr[V accepts | 𝑑(𝑤∗, 𝐿) > 𝑒] ≤
.
– 𝑑(𝑤∗, 𝐿)  𝑒. Then, for a random 𝑤∗ in the row-span of
𝑈 , we have
Pr[𝑑(𝑤∗, 𝐿) ≤ 𝑒] ≤ 𝑑/|F|.
To conclude, using a union bound argument, we can bound the
probability of this case by,
(cid:1)
(cid:0)𝑛−𝑒−1
(cid:1)
(cid:0)𝑛
𝑡
𝑡
Pr[V accepts 𝑈 ∗] ≤ Pr[V accepts 𝑈 ∗ | 𝑑(𝑤∗, 𝐿) > 𝑒]]
(cid:1)
(cid:0)𝑛−𝑒−1
(cid:0)𝑛
(cid:1)
+ Pr[𝑑(𝑤∗, 𝐿) ≤ 𝑒]
+ 𝑑/|F|
𝑡
≤
≤ (1 − 𝑒/𝑛)𝑡 + 𝑑/|F|.
𝑡
• Case II. In this case we will condition on the event Honest where
V accepts with probability bounded by 𝛿 due to the soundness
error induced from IPA protocol.
Combining both cases using a union bound argument, we con-
clude with the following soundness error,
(1 − 𝑒/𝑛)𝑡 + 𝑑/|F| + 𝛿.
□
Complexity. Let 𝐶 be the size of matrix 𝑈 . Then the prover
time is 𝑂(𝐶 log 𝐶), the communication size is 𝑂(polylog𝐶) and the
verifier time is 𝑂(𝐶).
3.2 Testing Linear Constraints
In this section we present our protocol for testing a linear constraint
on an interleaved linear code. In particular, the protocol checks
if an encoded message 𝑥 satisfies 𝐴𝑥 = 0 where 𝐴 ∈ F𝑚ℓ×𝑚ℓ is a
public sparse matrix with 𝑂(𝑚ℓ) non-zero elements.
The main idea of our protocol is similar to that of our interleaved
test. Following the construction in [5], the verifier asks the prover
to randomly combine the rows of 𝑈 and tests the linear constraint
on the combined codeword; the verifier then queries a random
subset of columns to check the consistency between the combined
Session 6E: Zero Knowledge CCS '20, November 9–13, 2020, Virtual Event, USA2029Protocol 1 (Interleaved linear code test). F is a prime field and 𝐿 ⊂ F𝑛 is a [𝑛, 𝑘, 𝑑] RS code. Let 𝑈 ∈ F𝑚×𝑛 be the matrix to be tested.
• pp ← KeyGen(1𝜆).
• Interleaved testing:
(1) V generates a random vector 𝑟 ∈ F𝑚 and sends it to P.
(2) P computes 𝑤 = 𝑟𝑇 𝑈 ∈ F𝑛 and sends it to V.
(3) V checks that 𝑤 ∈ 𝐿.
(4) V generates a random set 𝑄 ⊆ [𝑛] and |𝑄 | = 𝑡 and sends it to P.
(5) V checks the consistency of 𝑤. In particular, for 𝑗 ∈ 𝑄, P and V invoke an IPA protocol on 𝑈 [ 𝑗] and 𝑟. V accepts if all the checks pass, and rejects
otherwise.
codeword and 𝑈 . Using inner product arguments, we again avoid
sending the columns of 𝑈 directly and improve both the proof size
and the prover time.
In particular, the verifier first sends a random vector 𝑟 ∈ F𝑚ℓ
to the prover so that the linear constraint becomes (𝑟𝑇 𝐴)𝑥 = 0. (If
𝐴𝑥 ≠ 0, then (𝑟𝑇 𝐴)𝑥 = 0 with probability 1
F.) Let 𝑎 = 𝑟𝑇 𝐴, then the
prover parses 𝑎 into a matrix of size 𝑚× ℓ and interpolates each row
of the matrix into a polynomial 𝑎𝑖(·). The prover also interpolates
each row of matrix 𝑈 into polynomial 𝑝𝑖(·). In this way, the inner
𝑖=1 𝑎𝑖(𝜁 𝑗)𝑝𝑖(𝜁 𝑗).
𝑖=1 𝑎𝑖(·)𝑝𝑖(·) in Step 3
so that the verifier checks whether the linear constraint is satisfied.
𝑗=1 𝑞(𝜁 𝑗) = 0 i.e. checking if summa-
tion at all interpolation point equates to 0 (see Step 4). The verifier
also checks consistency between 𝑞(·) and 𝑈 by randomly picking
𝑖=1 𝑎𝑖(𝜂 𝑗)𝑈𝑖 𝑗,
which are the inner products between the columns of 𝑈 and the
public vectors (see Step 6).
𝑗=1𝑚
product of 𝑎 and 𝑥 is computed byℓ
The prover sends the polynomial 𝑞(·) =𝑚
This is done by checking thatℓ
a subset 𝑄 of columns and checking that 𝑞(𝜂 𝑗) =𝑚
Solomon code 𝑈 ∈ 𝐿𝑚, the verifier accepts with probability 1.
The full protocol is presented in Protocol 2.
Theorem 3.3. Protocol 2 is a linear constraint testing protocol with
the following properties:
• Completeness. For any valid 𝑥, such that 𝐴𝑥 = 0, and it’s Reed-
• Soundness. ([5, 55]) Let 𝑒 be a positive integer such that 𝑒 < 𝑑/2,
where 𝑑 is the minimal distance of the RS code. Suppose that a
(badly formed) matrix 𝑈 ∗ is 𝑒-close to a codeword 𝑈 ∈ 𝐿𝑚 that
encodes 𝑥 ∈ 𝐹𝑚𝑘 such that 𝐴𝑥 ≠ 0. Then, for any malicious
P∗ strategy, 𝑈 ∗ is rejected by V except with probability at most
((𝑒 + 𝑘 + ℓ)/𝑛)𝑡 + 1/|F| + 𝛿.
The proof follows similarly to the proof outline from the previous
section and the following lemma.
Lemma 3.4 ([5]). Let 𝑒 be a positive integer such that 𝑒 < 𝑑/2.
Suppose that a (badly formed) oracle 𝑈 ∗ is 𝑒-close to a codeword 𝑈 ∈
𝐿𝑚 encoding 𝑥 ∈ F𝑚ℓ such that 𝐴𝑥 ≠ 𝑏. Then, for any malicious P∗
strategy, 𝑈 ∗ is rejected by V except with at most 1/F+((𝑒+𝑘+ℓ)/𝑛)𝑡
probability.
Complexity. Let 𝐶 be the size of matrix 𝑈 and assuming 𝑎 can
be computed in linear time. Then the prover time is 𝑂(𝐶 log 𝐶), the
communication size is 𝑂(polylog𝐶) and the verifier time is 𝑂(𝐶).
3.3 Testing Quadratic Constraints
In this section we describe a test for verifying that messages 𝑥, 𝑦, 𝑧
encoded by 𝑈𝑥, 𝑈𝑦, 𝑈𝑧 satisfy the constraint 𝑥 ⊙ 𝑦 − 𝑧 = 0, where
⊙ denotes point-wise product. The constraint reduces to checking
that 𝑈 𝑥 ⊙ 𝑈 𝑦 − 𝑈 𝑧. We present this test in a self-contained way in
Protocol 3. The protocol again utilizes the inner product arguments
and the complexity is the same as the linear constraint test.
The main idea of this protocol is similar to that of our interleaved
test. Following the constructions in [5], the verifier asks the prover
to randomly combine the rows of 𝑈 𝑥 ⊙ 𝑈 𝑦 −𝑈 𝑧 and tests the linear
constraint on the combined codeword; the verifier then queries
a random subset of columns to check the consistency between
the combine codeword and 𝑈 𝑥 ⊙ 𝑈 𝑦 − 𝑈 𝑧. Using inner product
arguments, we again avoid sending the columns of 𝑈 directly and
improve both the proof size and the prover time.
In particular, the verifier first sends a random vector 𝑟 ∈ F𝑚
to the prover. The prover interpolates each row of matrix 𝑈 𝑥, 𝑈 𝑦
𝑖 (·) respectively . In this
and 𝑈 𝑧 into polynomial 𝑝𝑥
𝑖=1 𝑟𝑖 · 𝑝𝑖(𝜁 𝑗) where
𝑝𝑖(·) = 𝑝𝑥
𝑖 (·).
𝑖=1 𝑟𝑖 · 𝑝𝑖(·), where
𝑝𝑖(·) = 𝑝𝑥
𝑖 (·) in Step 2 and the verifier checks whether
the linear constraint is satisfied. This is done by check if for all
𝑗 ∈ [ℓ], 𝑞(𝜁 𝑗) = 0 i.e. checking the polynomial evaluates to 0 at
the interpolation point (in Step 3). The verifier also checks consis-
tency of 𝑞(·) by randomly picking a subset 𝑄 of columns and check
𝑖=1 𝑟𝑖 · 𝑈𝑖,𝑗, where 𝑈 𝑖, 𝑗 = 𝑈 𝑥𝑖, 𝑗 ∗ 𝑈 𝑦𝑖, 𝑗 − 𝑈 𝑧𝑖, 𝑗 which
are inner products between columns of 𝑈 (𝑈 = 𝑈 𝑥 ⊙ 𝑈 𝑦 − 𝑈 𝑧) and
public vectors 𝑟 (in Step 5).
way, the inner product of 𝑟 and 𝑈 [ 𝑗] isℓ
𝑗=1𝑚
The prover sends a polynomial 𝑞(·) = 𝑚
𝑞(𝜂 𝑗) =𝑚
𝑖 (·) − 𝑝𝑧