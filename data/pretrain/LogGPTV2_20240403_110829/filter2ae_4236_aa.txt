**Author: Badcode@Knownsec 404 Team**

### April 17, 2019
On April 17, 2019, the China National Vulnerability Database (CNVD) released a security bulletin, identified as [CNVD-C-2019-48814](http://www.cnvd.org.cn/webinfo/show/4989). The bulletin highlighted that certain versions of WebLogic include a `wls9_async_response.war` package, which provides asynchronous communication for the WebLogic Server service. Due to a flaw in the deserialization process within this WAR package, an attacker can send a specially crafted malicious HTTP request to gain unauthorized access and execute commands on the target server.

### April 18, 2019
On April 18, 2019, I began investigating this vulnerability. Since it was a zero-day at the time, there were no patches available, only the information from the announcement. I started by examining the `wls9_async_response.war` package mentioned in the bulletin. I first looked at the `web.xml` file and attempted to access the `/AsyncResponseService` URL, but received a 404 error. 

Next, I noticed the `weblogic.xml` and `weblogic-webservices.xml` files. I then tried accessing `_async/AsyncResponseService`, which was successful. Based on the vulnerability announcement, I hypothesized that the trigger point for the vulnerability was located here.

I examined the `weblogic.wsee.async.AsyncResponseBean` class in `weblogic-webservices.xml` and found it in the `wseeclient.jar` file. I set breakpoints in the methods of this class and sent a normal SOAP message. However, the debugger did not hit any of the breakpoints. To further investigate, I placed breakpoints in all methods of the `wsee/async` classes and resent the message. This time, the breakpoint in the `handleRequest` method of the `AsyncResponseHandler` class was successfully hit.

In the `handleRequest` method, I observed the line `String var2 = (String)var1.getProperty("weblogic.wsee.addressing.RelatesTo")`. This step failed to retrieve the value, causing the process to terminate. After extensive research, I found a similar example where assigning the value `test` to `weblogic.wsee.addressing.RelatesTo` could resolve the issue.

### April 19, 2019
On April 19, 2019, my partner shared a screenshot with me. I searched globally for the `UnitOfWorkChangeSet` class and set breakpoints within it. Based on the screenshot, I constructed a similar HTTP request and sent it. The debugger now stopped at the `UnitOfWorkChangeSet` class.

I then examined the `readObject` method and attempted to use a gadget from ysoserial. The `commoncollections` gadgets for WebLogic were not working because the version of `common-collections` had been updated. I tested a `Jdk7u21` gadget and converted the generated payload to byte type. The command was successfully executed, but this gadget had many restrictions.

I recalled a previous WebLogic deserialization RCE vulnerability, CVE-2018-3191, which was not restricted by the WebLogic blacklist. Testing this, I found that CVE-2018-3191 was also effective. I discussed with [@pyn3rd](https://twitter.com/pyn3rd) about other potential gadgets. After carefully reviewing the blacklist, we found that apart from CVE-2018-3191, only the new jython gadget (CVE-2019-2645) submitted by [@Matthias Kaiser](https://twitter.com/matthias_kaiser) was available, but there were no details to use it.

Returning to the `handleRequest` method in the `AsyncResponseHandler` class, I reviewed the `handleRequest` method in the `HandlerIterator` class:

```java
public boolean handleRequest(MessageContext var1, int var2) {
    this.closureEnabled = false;
    this.status = 1;
    WlMessageContext var3 = WlMessageContext.narrow(var1);
    if (verboseHistory) {
        updateHandlerHistory("...REQUEST...", var3);
    }
    for(this.index = var2; this.index < WorkContextXmlInputAdapter.MAXARRAYLENGTH) {
        // Method implementation
    }
}
```

This method is part of the handling chain and is crucial for understanding the flow of the request.