**Author: Badcode@Knownsec 404 Team**  
**Chinese version:**
### 17 April
On April 17, 2019, CNVD released the security bulletin, tracked as
[CNVD-C-2019-48814](http://www.cnvd.org.cn/webinfo/show/4989). The bulletin
pointed out that the `wls9_async_response.war` package included in some
versions of WebLogic by default provides asynchronous communication for
WebLogic Server service. Because the WAR package is flawed when deserializing
input information, an attacker can send a constructed malicious HTTP request
to gain the permissions of the target server and execute the command remotely
without authorization.
### 18 April
On April 18, 2019, I started researching this vulnerability. Because this
vulnerability was 0day at the time, there is no patch for reference, only the
announcement content. I started with `wls9_async_response.war` package
mentioned in the announcement, and take a look at the url in `web.xml` first.
I tryed to access it when I saw `/AsyncResponseService` but it returned 404.
Then I noticed `weblogic.xml` and `weblogic-webservices.xml`
Access `_async/AsyncResponseService`
It can be accessed, combined with the announcement of the vulnerability
recommendations, I guess the trigger point of this vulnerability is right
here.
See `weblogic.wsee.async.AsyncResponseBean` class in `weblogic-webservices.xml`, view this class and find it in `wseeclient.jar`
Then I breakpoints under the methods in this class, and then construct a
normal SOAP message and send it.
There is no debug to the breakpoint. Finally, I put all the methods of all
classes in `wsee/async` with breakpoints, resend the message, and successfully
intercepted the `handleRequest` in the `AsyncResponseHandler` class.
See the `string var2 =
(String)var1.getProperty("weblogic.wsee.addressing.RelatesTo")` in the image;
this step never gets the value, causing the process to end. In order to solve
this problem, I have turned a lot of information, and finally found a similar
example, you can use `test` to assign value to
`weblogic.wsee.addressing.RelatesTo`.
        demo
        test
The following process is wrong, so I'm not gonna write it here.
### 19 April
On April 19, 2019, My partner sent me a screenshot.
Search the `UnitOfWorkChangeSet` class globally and then breakpoints in this
class.
According to the screenshot, construct a similar HTTP request and then send it
Now it can be debugged in the `UnitOfWorkChangeSet` class
I saw the `readObject` method and tried to use the gadget in ysoserial.
Currently, the `commoncollections` related to WebLogic are unusable. The
version of `common-collections` that WebLoigc relies on has been upgraded.
First, find a `Jdk7u21` gadget to test it and convert the generated payload
into byte type.
As you can see, the command was successfully executed. But this gadget has too
many restrictions. I think of a WebLogic deserialize rce vulnerability last
year, CVE-2018-3191. Since jdk7u21 is not restricted by WebLogic blacklists,
CVE-2018-3191 should be the same.
As you can see, CVE-2018-3191 is also available. Discuss with
[@pyn3rd](https://twitter.com/pyn3rd) whether there are other gadgets, look at
the blacklist carefully, except CVE-2018-3191, only the new jython gadget
(CVE-2019-2645), submitted by [@Matthias
Kaiser](https://twitter.com/matthias_kaiser), but this has no details, so no
way to use it.
Go back to the `handleRequest` method in the `AsyncResponseHandler` class and
see the previous step of the `handleRequest`, the `handleRequest` method in
the `HandlerIterator` class.
        public boolean handleRequest(MessageContext var1, int var2) {
            this.closureEnabled = false;
            this.status = 1;
            WlMessageContext var3 = WlMessageContext.narrow(var1);
            if (verboseHistory) {
                updateHandlerHistory("...REQUEST...", var3);
            }
            for(this.index = var2; this.index = WorkContextXmlInputAdapter.MAXARRAYLENGTH) {