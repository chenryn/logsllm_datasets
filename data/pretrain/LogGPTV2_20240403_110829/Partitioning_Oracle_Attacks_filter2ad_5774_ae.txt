bandwidth of submitted ciphertexts to achieve 70% success
rate, the maximum possible, would be 1.4 GB across 21,503
UDP packets. The simple online brute-force attack achieves
success rate of 20% using 4.1 MB of data sent over 60,250
requests. For 70%, this increases to 5.97 GB of data sent over
87.8 million requests. Note that these calculations do not in-
clude the up to 28,231 UDP packets for the port scan of the
partitioning oracle attack, but these can potentially be sent
204    30th USENIX Security Symposium
USENIX Association
once for multiple (or even all of the) ciphertexts.
To summarize, while partitioning oracle attacks are more
expensive computationally, they outperform brute-force in
terms of queries and, for larger success rates, bandwidth. This
also means that while rate limiting of requests could help
mitigate brute-force attacks, it will not be effective against
our attack.
Other attack variants.
In the full version, we describe a
different attack on Shadowsocks servers that support multiple
users (with different passwords) on a single port. Because
the server identiﬁes the correct key via trial decryption, a
“cross-user” key recovery attack is possible.
We were not able to build a working attack that uses TCP
connections. The main challenge is that here Shadowsocks
servers expect two ciphertexts, ﬁrst an encryption of the pay-
load length and then an encryption of the payload. The former
only allows ciphertexts including 2-byte plaintexts, which is
too small for the construction of a splitting ciphertext. As
mentioned above deployments use the same password across
TCP and UDP, so our UDP attack affects both.
5 Password-Authenticated Key Exchange
We turn now to partitioning oracles in the context of password-
authenticated key exchange (PAKE). As noted earlier, a ver-
sion of the PAKE secure remote password (SRP) protocol [84]
has long been known to be vulnerable to a “two-for-one” at-
tack (cf., [85]). An active network adversary impersonates
a server response to a client, and based on the client’s sub-
sequent behavior can rule out two possible passwords. This
provides a modest speedup over brute-force, which rules out
one password at a time. We want to know if our techniques
can yield bigger speedups in the context of PAKE.
We explore this question in the context of a modern
PAKE protocol called OPAQUE [38]. It is undergoing a stan-
dardization process currently, having been suggested by the
IETF CFRG as a good candidate for next generation PAKE.
OPAQUE uses as a component an AEAD scheme, and its
designers and the (evolving) draft standards [46, 47] make
clear the necessity of using committing AEAD.
We perform a case study focusing on what happens when
implementations incorrectly deviate from the speciﬁcation,
and instead use a non-committing AEAD. Indeed some early
prototype implementations of OPAQUE use AES-GCM or
XSalsa20/Poly1305, as we detail below.
Background on OPAQUE. OPAQUE is meant to replace
existing password authentication protocols on the web, which
today is done by having the client send the server its password
through TLS. This approach requires the server to handle
the client’s plaintext password, and also relies on public-key
infrastructure (PKI) for authentication.
In contrast, OPAQUE is an asymmetric PAKE (aPAKE)
that keeps the client’s password hidden from the server and
does not need PKI to authenticate the server to the client.
Asymmetric here means the server only stores the equivalent
of a (salted) hash of the password, while the client uses the
password directly. OPAQUE provides mutual authentication
based on the password. While one can integrate OPAQUE
with certs/PKI, we focus on password-only authentication.
OPAQUE works by composing an oblivious PRF
(OPRF) [25] with authenticated key exchange (AKE) using
a committing AEAD. For space reasons, we defer the reader
to [38] for protocol details. Here we follow the OPAQUE
description from [38]; recent internet drafts differ in some
details that do not affect the attack (should non-committing
AEAD be used).
The protocol begins with the server holding an oblivi-
ous pseudorandom function (OPRF) key ks and the user
holding password pw. A user registers by sending (over
a secure channel) pw to the server. The server computes
rw ← H (pw,H (cid:48)(pw)ks) where H (cid:48) hashes strings into a
group and H is any hash function. (This is a standard OPRF
construction [39].) The server then chooses a long-term key
pair for itself and for the client, uses AEAD with key rw to
encrypt the client’s key pair and its own public key, and stores
its key pair, the client’s public key, and the ciphertext C.
After the user has registered, they can initiate a login with
the server. The client ﬁrst chooses an ephemeral public key Xu,
computes a blinded OPRF input α ← H (cid:48)(pw)r for random r,
and then sends both values to the server. The server retrieves
the client’s keys and C, and computes a blinded OPRF out-
put β ← αks. It chooses its own ephemeral public key Xs and
computes the HMQV session key Ksess. It sends (β,Xs,C,As)
to the client, where As is a PRF output using Ksess (used
for session key conﬁrmation). The client can then compute
rw ← H (pw,β1/r) and use that to decrypt C to get its long-
term key pair. It can then derive the session key Ksess as per
HMQV and conﬁrm that As is correct. The OPAQUE protocol
immediately aborts should the client’s decryption of C fail.
As discussed in [38], the AEAD must be key-committing
because otherwise the client’s decryption of C could reveal
information about more than one password, similar to the SRP
two-for-one attack. Various instantiations of the AEAD have
been proposed, including Encrypt-then-HMAC, modifying
AES-GCM to add a zeros check, and more.
Early implementations. Despite this guidance, a survey of
prototype OPAQUE implementations revealed that a majority
use non-committing AEAD. See Figure 5. Many of these pro-
totypes predate the standard drafts, the most recent version
of which provides more speciﬁc guidance on allowed AEAD
schemes. Only one implementation is from a commercial
product (opaque-ke [51]); most do not appear to have been
reviewed by cryptographers. We therefore expect that future
implementations will do better in terms of correctly select-
ing a committing AEAD. Nevertheless, these indicate that
developers need strong, speciﬁc guidance about committing
USENIX Association
30th USENIX Security Symposium    205
Implementation
AEAD Scheme
MKCR
attacks?
Emit
errors?
libsphinx [56]
threshold-OPAQUE [61]
Opaque [53]
opaque-rs [4]
gustin/opaque [1]
gopaque [66]
frekui/opaque [48]
opaque-ke [51]
noisat-labs/opaque [2]
XSalsa20-Poly1305
XSalsa20-Poly1305
XSalsa20-Poly1305
AES-GCM
AES-GCM-SIV
Encrypt-then-HMAC
Encrypt-then-HMAC
AEAD-then-HMAC
NORX
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
X
X
X
X
X
(cid:88)
(cid:88)
X
(cid:88)
–
–
–
–
Figure 5: A summary of early prototype implementations of
OPAQUE and the AEAD scheme they use. The righthand column
speciﬁes whether the vulnerable implementations emit distinct, ex-
plicit error messages during decryption.
AEAD. For instance, Figure 5 shows that XSalsa20-Poly1305,
the default authenticated encryption scheme in popular cryp-
tography library libsodium [52], is one of the most popular
choices for an AEAD scheme. However, it is not committing,
and while versions of the OPAQUE documentation explicitly
mention that AES-GCM should not be used, no warnings
about XSalsa20-Poly1305 have been given. Developers seem
unclear about its security properties: one implementation has
source code comments stating that a key-committing scheme
is necessary right where it uses XSalsa20-Poly1305.
To quantify the danger of such confusion about what AEAD
to use, we turn to building partitioning oracles against imple-
mentations that use non-committing AEAD.
Building partitioning oracles. We assume the implementa-
tion runs the OPRF and AKE in parallel, and that an adversary
that can somehow trigger client requests (e.g., via appropri-
ate client-side Javascript [6, 9, 11]), intercept the requests,
and respond to them. Upon intercepting a login request, the
attacker acts as the OPAQUE server to turn the client into
a partitioning oracle fpw. It chooses its own OPRF key k∗
s ,
and then constructs a splitting value (β,Xs,C∗,As). It sets
β ← αk∗
s , lets As be arbitrary, and generates an ephemeral
key Xs. Finally it generates a key-multicollision ciphertext C∗
for K = {H (pw,H (cid:48)(pw)k∗
s )) | pw ∈ S} for some target set
of passwords S. We discuss selecting passwords for S below.
Note that, save β, the splitting value can be pre-computed.
The adversary sends (β,Xs,C∗,As) to the client, who will
unblind β to obtain a key rw, hash it to derive an AEAD
key, and then decrypt C∗. If decryption fails, the client will
abort immediately and fpw(β,Xs,C∗,As) = 0; if it succeeds,
the client will use the key pair from the plaintext to derive the
shared secret k. Then, the client will re-compute A(cid:48)
s and abort
if A(cid:48)
s (cid:54)= As. If this abort occurs, fpw(β,Xs,C∗,As) = 1.
The difference between the two errors must be visible to
the server impersonator to realize the partitioning oracle. We
note that the OPAQUE security model [38] and speciﬁcation
allow for distinct error messages (which should be ﬁne when
using committing AEAD, but is dangerous here). In Figure 5
the last column marks which vulnerable prototype implemen-
tations emit distinct error messages — three of ﬁve do. If
these messages reach the server impersonator, a partitioning
oracle is immediate.
Even without distinct messages, the protocol speciﬁes
aborting if decryption fails, then having a separate abort later
if the As check fails. If implemented with this “early abort”,
side channels like memory accesses, branch predictors, or
timing could reveal which of the two errors occurred.
Measuring the timing channel. To determine whether the
potential timing side channel is exploitable, we performed an
experiment with libsphinx [56], a more mature prototype that
does not emit distinct error messages but does abort early on
decryption failure. Most of libsphinx’s code is similar to the
protocol as described in [38], with two changes that impact
timing: (1) it uses a triple-DH handshake instead of HMQV,
and (2) it uses the memory- and time-hard Argon2 hash on
rw to derive the AEAD key. By default, libsphinx accepts a
C∗ only up to length 4 MB due to a memory management
bug — it crashes for larger ciphertexts due to a statically
allocated buffer. Once ﬁxed, it accepts ciphertexts of up to
2 GB. This would enable splitting ciphertexts with degree up
to k = 1.25× 108.
We performed timings for 1000 trials each on a MacBook
Pro with a 2.5 GHz Intel Core i7 processor using a static 1 MB
key multi-collision ciphertext. The median and mean time
were both 121 ms for server responses that did not decrypt
properly and 125 ms for server responses that decrypted prop-
erly but failed the As check. The standard deviation in both
cases was 2 ms. This suggests that remote timing attacks
should be feasible, though they may require multiple samples
per partitioning oracle query to reduce noise (which would
reduce attack efﬁciency by a small factor).
An adaptive partitioning oracle attack. Given the ability
to construct a partitioning oracle, the question becomes how
to build an attack that extracts the target password pw from the
client in as few oracle queries as possible. As for the Shadow-
socks attack, consider an attacker that starts with knowledge
of a password dictionary D and an estimate ˆp of the password
probabilities. Assume k is the maximum multi-collision feasi-
ble from our attack, given an implementation’s constraint on
ciphertext size (e.g., 1.25× 108 for bug-free libsphinx).
The algorithmic challenge is to develop a search strategy
that minimizes the expected number of queries to recover the
password. Given input D, q, and k the attacker proceeds as
follows. First it ﬁnds a subset P ⊂ D that maximally balances
the aggregate probability mass of the partition. In other words
it solves the following optimization problem:
(cid:33)
(cid:32)
(cid:33)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) .
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
(cid:32)
argmin
P⊂D ,|P|≤k
∑
pw∈P
ˆp(pw))
−
∑
pw∈D\P
ˆp(pw)
This is exactly the optimization version of the partitioning
206    30th USENIX Security Symposium
USENIX Association
60
40
20
0
e
t
a
r
s
s
e
c
c
u
S
k = 1
k = 212
k = 218
k = 2
k = 214
k = 210
k = 216
0
20
40
60
80
100
Number of queries
k
1
2
210
212
214