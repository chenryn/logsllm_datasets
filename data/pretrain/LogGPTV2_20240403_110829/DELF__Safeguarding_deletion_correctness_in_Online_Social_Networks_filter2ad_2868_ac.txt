code at deletion time enables additional expressiveness which
may be necessary for certain data types yet its use is heavily
discouraged. Procedural code in custom sections precludes
correctness validation (§4.3), is hard for developers to keep
up to date (§6.1), and bugs may result in stuck deletions that
do not make progress (§6.4). DELF supports writing proce-
dural code in custom sections for backwards compatibility
with legacy deletion logic and data models while applications
migrate to object and edge type annotations (§5.4).
4.2 Deletion Execution
Figure 2 presents the timeline of a deletion in DELF. Dele-
tions go through the stages of registration (t1–t3), initiation
(t3–t4) and asynchronous execution (t4–t5). Data retained
in restoration logs and backups is deleted once a deletion
ﬁnishes after a ﬁxed interval (t5–t6).
t1 marks object creation. Deletions may be registered to
start at an arbitrary point of time in the future. Developers
can achieve this at object creation time by virtue of creating
an object of a type under TTL.
t2 marks explicit actions to schedule objects for deletion in
the future by using a DELF-provided method, e.g., when a
1062    29th USENIX Security Symposium
USENIX Association
object creation
scheduled deletion request
top level object deleted
last restoration log
entry deleted
t1
t2
t3
t4
t5
t6
deletion
starts
graph traversal
completes
Figure 2: Timeline of a deletion in DELF. The time period
between the start of a deletion (t3), the end of graph traversal
(t5), and restoration logs deletion (t6) should match the service
provider’s deletion policy.
user requests to delete their account.
t3 marks requests to delete an object immediately and the
beginning of deletion initiation. Initiation is a short phase in
which DELF hides the data to delete, registers the deletion
to resume later, and quickly returns control to the caller. Ini-
tiation occurs synchronously within the context of a client
request. By returning control early deletion initiation prevents
blocking the caller for an arbitrary amount of time.
Once initiation completes clients should not be able to
read the data scheduled for deletion. To achieve quick hiding
DELF deletes the top-level object without cascading to delete
any of its edges. Any objects referenced by the edges of the
top-level object may still be visible, e.g., photos of an account
undergoing deletion. DELF mandates that products employ
read-time checks to conﬁrm that parent objects have not been
deleted before returning requested data. For example, the
photo data type from Figure 1 can leverage the created_by
edge type to check if the referenced user account still exists,
similar to authorization policies enforcing who can see con-
tent within an OSN [52, 57]. The initiation phase abstracts
away the complexity of asynchronous execution.
t4 marks the beginning of asynchronous execution. Dele-
tions run continuously until they complete. Each deletion per-
forms a traversal of the graph to delete issuing point deletes
to backing data stores (§4.4).
t5 marks the end of asynchronous execution. Restoration
logs may be used (§4.4) until they expire (t6).
4.3 Deletion Validation
Dangling data and inadvertent deletions may occur for a va-
riety of reasons including missing edge or object type an-
notations, mistakes in annotations, insufﬁcient authorization
checks, and developers storing references to other objects
without declaring edge types. DELF introduces validation
methods and drives mitigation for each of these types of mis-
takes. Every DELF object and edge type annotation is vali-
HEURISTIC
to_new_object
to_leaf_object
to_owned_object
id1_ref_in_id2
DESCRIPTION
Edge and target object are created consis-
tently at the same time.
The target object has no other edges after
this edge gets deleted.
The source object is referenced by the tar-
get object in a ﬁeld indicating ownership
(e.g., owner_id).
Similar to to_owned_object; any ﬁeld
of the target object references the source.
Table 3: Heuristics used to predict deep.
HEURISTIC
to_old_object
self_reference
many_to_one
same_obj_type
to_deleted
DESCRIPTION
The target object is created consistently
prior to the edge.
Source and target object is the same object.
Multiple source objects are associated with
the same target.
The edge links objects of the same type.
The edge points to target objects that are
previously deleted.
Table 4: Heuristics used to predict shallow.
dated with at least one method, as designated in Table 2.
Static validation. DELF conﬁrms that there is at least one
possible path to delete data of every deﬁned object and edge
type. This is checked statically: (a) DELF rejects any data
types found to lack annotations, and (b), DELF performs
a reachability analysis starting from every object type an-
notated with directly, directly_only, short_ttl, and
not_deleted visiting all their edge types annotated deep.
The analysis must reach all deﬁned object types in the sys-
tem. Any object types not reached are part of a cycle without
at least one declared entry point to delete it. Unreachable
object types are rejected. By including not_deleted types
as starting points the reachability analysis transitively treats
any referenced object types as valid exceptions from deletion.
Unreachable data types annotated with custom are similarly
ignored and their correctness is only veriﬁed with peer review.
Dynamic validation. DELF introduces three dynamic valida-
tion methods. The ﬁrst method conﬁrms that objects of types
annotated with directly and directly_only are observed
to be deleted at runtime. The process inspects logs of all
deletions executed in DELF per object type and conﬁrms that
developers follow up and expose accessible entry points in
product to trigger deletions. Runtime validation of these two
annotations guarantees that all declared paths to delete data
types are triggered by users in production.
The second dynamic validation method is a set of heuris-
tics to retroactively annotate edge types and detect edge types
misclassiﬁed by developers. Deep heuristics suggest that
USENIX Association
29th USENIX Security Symposium    1063
User A
created_photo
ts = 5635
Photo A ts = 5635
User B
created_photo
ts = 7563
Photo B ts = 7563
User C
created_photo
ts = 1274
Photo C ts = 1274
User A
User B
User C
likes
likes
likes
Photo B
Figure 3: Applying to_new_object on the created_photo
edge type (Figure 1). If the creation timestamps (ts) of all
edges match the creation timestamp of their target object the
edge type should likely be annotated deep.
a particular edge type should be annotated as deep—they
surface dangling data occurring due to edge types misconﬁg-
ured as shallow or refcount. In contrast to static validation
which ensures there is at least one path to delete objects of
every type, deep heuristics attempt to discover all paths. Shal-
low heuristics instead suggest that an edge type should be
annotated as shallow—they provide a proactive detection
method for edges misconﬁgured as deep or refcount. DELF
surfaces edge types it detects to be misclassiﬁed, notiﬁes de-
velopers, and recommends changes1.
Edge type annotation heuristics leverage features collected
at runtime after data has been collected. In particular, the
heuristics to_new_object and to_old_object inspect the
edge and target object creation timestamps. If all edges of a
particular type are found to consistently be created at the same
time as the target object, this is an indication that the edge
and target are created together and hence should be deleted
together—DELF suggests deep. Similarly, if all edges of a
particular type are found to consistently be written at a later
time compared to the target object, this is an indication that
the target object predates the edge and hence should persist
after the edge gets deleted—DELF suggests shallow.
Tables 3 and 4 list all of the edge type classiﬁcation
heuristics used by DELF. Figure 3 illustrates an exam-
ple where to_new_object is applicable—DELF predicts
deep. Figure 4 illustrates an example where many_to_one is
applicable—DELF predicts shallow.
The third dynamic validation method is a check for priv-
ilege escalation before writing edges of all types annotated
with deep. A typical exploit of deep edge types involves
two steps: (a) writing an edge from an object under attacker
control to a target object in the system, and (b), deleting the
object under attacker control hence—as a side effect of deep—
deleting the target object. The attack leverages application
endpoints where application authorization checks for writ-
1DELF does not currently offer heuristics to suggest refcount edge types
since these are substantially less common than deep and shallow (§3.2).
Figure 4: Applying many_to_one on a likes edge type. If
multiple different objects all have edges to the same target
object, the edge type should likely be annotated shallow.
ing edges and mutating objects directly are inconsistent [52].
DELF checks every write for edge types annotated deep. If
the user performing the write is able to delete the source
object of the new edge being written then they should also
be able to delete the target object. DELF enforces this as a
precondition for any deep-annotated edge write to succeed.
Data type validation. While DELF safeguards referential
integrity, dangling data is possible still. Two practices that
may result in dangling data are (a) storing identiﬁers in ﬁelds
declared as generic strings or integers and not as edge types,
and (b), deleting data via code in custom sections and omitting
the deletion of associated data. In the former scenario DELF
is unaware of references existing and hence cannot preclude
their creation; in the latter deletions bypass DELF altogether.
DELF discovers dangling references with periodic data
scans and content classiﬁcation. Recurring jobs collect sam-
pled data from each data type; DELF subsequently pinpoints
common types of identiﬁers such as 64-bit integers; and it
detects dangling references by loading referenced objects and
conﬁrming that they do not exist. DELF ﬂags any data types
found to store dangling references as inconsistent.
Mitigation. DELF surfaces all issues it discovers. Issues de-
tected with static validation can be ﬁxed while a data model is
deﬁned. Runtime and data type validation techniques involve
surfacing the issue to product developers, suggesting improve-
ments in their data type deﬁnitions, and running database
scans to delete dangling data retroactively.
4.4 Restoration Logs
Every deletion in DELF generates a write-ahead log we refer
to as its restoration log. Restoration logs are used to recover
from application bugs that trigger the deletion of the wrong
top-level object and from mistakes in edge type annotations
that declare deep or refcount rather than shallow.
The restoration log of a single deletion is a serialized ver-
sion of the deleted graph. The log consists of individual
restoration log entries, with each storing the logical order of
1064    29th USENIX Security Symposium
USENIX Association
deep
shallow
uuuser
nnnumber
shallow
deep
ppphoto
deep
hhhandle
restoration log uuu,nnn,nnnuuu,uuunnn, ppp,hhh, ppphhh, pppuuu,uuuppp
deletion
restoration
Figure 5: Deletion and restoration ordering in DELF when ob-
ject uuu is deleted. Two-letter log entries denote edges from/to
the corresponding objects. Objects are deleted before and
restored after their outbound edges.
the log entry within the deletion. DELF indexes log entries of
each deletion in the underlying data store for quick retrieval.
Once a deletion completes DELF restoration logs and data
store backups contain separate copies of the same data and
may be used independently. This conﬁguration maximizes
the available recovery window due to bugs in applications
and data stores, respectively. Both should be retained for the
maximum period permitted by the deletion policy.
Restorations may be unsafe to perform. They often run
weeks after the initial deletion and in the meantime the state
of the underlying data stores may have changed. For example,
restoring a user account which was deleted should no longer
be feasible if another user subsequently claims the phone num-
ber the deleted account used to log in. Restorations should
also not surface partially restored data to users.
DELF makes restorations safer via a staged restoration
process. DELF traverses the serialized restoration log in
reverse creation order. Figure 5 illustrates both the deletion
and the restoration graph traversals. The deletion traversal is
depth-ﬁrst with deletion of objects pre-order and outbound
edges post-order. Restorations traverse log entries in reverse.
The restoration traversal ensures outbound edges and target
objects are restored before source objects. Restorations fail
early if that is impossible, e.g., a user object will only be
restored if the restoration of the phone number succeeds.
The deletion and restoration traversals collectively ensure
that outbound edges are consistent between the time an ob-
ject is deleted and the time the object is restored, i.e., any
outbound edges can be fetched and referenced objects are
available. Consequently, the same read-time checks used to
achieve quick hiding during deletion execution (§4.2) ensure
that partially restored subgraphs are not visible to users.
DELF retries restorations indeﬁnitely until they complete.
Any failing restorations, e.g., if certain objects cannot be
restored, are surfaced to an engineer. Some manual effort is
justiﬁed since restorations are used only for disaster recovery.
4.5 Discussion
DELF requires developers to annotate every object and edge
type they create; an additional step during product develop-
ment which can be perceived as superﬂuous or error-prone.
However, assuming correct deletion is a core product require-
ment, DELF offers a robust implementation approach.
DELF highlights deletion as a core requirement to develop-
ers early while developing new product features. Static vali-
dation in particular surfaces omissions and mistakes within
regular development tools. Developers undergo ongoing ed-
ucation by virtue of understanding and resolving surfaced
errors. No separate education process is necessary.
Developers are only expected to provide annotations when
data types change. These events are typically much less
frequent than subsequent changes in product behavior. At
FACEBOOK, for example, we observe that changesets altering
data types (§3.2) are an order of magnitude less frequent than
changesets altering product behavior [58].
DELF annotations simplify deletion correctness validation
for both human developers at code review time and—as we
demonstrated in §4.3— for automated methods. To validate
correctness developers and automated methods can inspect
DELF annotations only, avoiding the laborious, error-prone
alternative of having to infer deletion semantics by inspecting
the product implementation directly. DELF simpliﬁes peer
review and complements it with automated validation.
DELF overall reduces product complexity and speeds up
product development by eliminating the need to write an
maintain procedural, custom deletion code. In §6.1 we show
that in a scenario where developers have the ability to bypass
DELF and implement deletion as they wish, most do not,
suggesting that DELF is the preferred, straightforward choice.
5
Implementation
DELF’s deployment at FACEBOOK supports user-facing dele-
tion functionality in Facebook, Instagram, and Dating, in-
cluding account deletion and the deletion of individual items
such as posts. In this section we provide implementation
information, pertaining to how the system achieves reliable
execution of all deletions, maximizes throughput, and limits
retention of restoration logs. We cover last the development
and deployment sequencing of DELF at FACEBOOK.
5.1 Redundant Deletion Tracking
All deletions should complete despite intermittent failures in
underlying infrastructure. There are three important reliabil-
ity concerns: (a) all deletions start on time, (b) no deletion