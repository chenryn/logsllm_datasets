以下是优化后的文本，使其更加清晰、连贯和专业：

---

### GDB 命令参考

#### 打印相关命令
- `print EXP`：打印表达式 `EXP` 的值。
- `print-object OBJ`：请求 Objective-C 对象 `OBJ` 自我打印。
- `printf FORMAT_STRING`：使用格式字符串 `FORMAT_STRING` 进行格式化打印。
- `ptype TYPE`：打印类型 `TYPE` 的定义。

#### 内存与文件操作
- `restore FILE`：将文件 `FILE` 的内容恢复到目标内存中。
- `set VAR = EXP`：评估表达式 `EXP` 并将其结果赋给变量 `VAR`。

#### 调试设置
- `set annotate_level`：设置注释级别。
- `set architecture ARCH`：设置目标架构为 `ARCH`。
- `set args ARG_LIST`：设置程序调试时传递的参数列表 `ARG_LIST`。
- `set auto-solib-add MODE`：设置共享库符号的自动加载模式 `MODE`。
- `set backtrace limit NUM`：设置回溯层数的最大限制为 `NUM`。
- `set backtrace past-entry BOOL`：设置是否在程序入口点之后继续回溯。
- `set backtrace past-main BOOL`：设置是否在 `main` 函数之后继续回溯。
- `set backtrace past-zero-pc BOOL`：设置是否在 PC 值为零时继续回溯。
- `set breakpoint always-inserted MODE`：设置插入断点的模式。
- `set breakpoint auto-hw MODE`：设置硬件断点的自动使用模式。
- `set breakpoint pending MODE`：设置调试器对挂起断点的行为。
- `set build-id-core-loads BOOL`：设置 CORE-FILE 是否自动加载与构建 ID 相关的文件。
- `set build-id-verbose LEVEL`：设置构建 ID 定位器的调试级别。
- `set can-use-hw-watchpoints BOOL`：设置调试器是否愿意使用硬件观察点。
- `set case-sensitive BOOL`：设置名称搜索时是否区分大小写。
- `set charset HOST_CHARSET, TARGET_CHARSET`：设置主机和目标字符集。
- `set check range BOOL`：设置范围检查。
- `set check type BOOL`：设置类型检查。
- `set coerce-float-to-double BOOL`：设置调用函数时是否将浮点数强制转换为双精度浮点数。
- `set complaints NUM`：设置关于错误符号的最大投诉次数。
- `set confirm BOOL`：设置是否确认潜在危险的操作。
- `set cp-abi ABI`：设置用于检查 C++ 对象的 ABI。
- `set data-directory DIR`：设置 GDB 的数据目录。
- `set debug FLAGS`：设置 GDB 调试标志。
- `set debug-file-directory DIR`：设置单独调试符号的搜索目录。
- `set demangle-style STYLE`：设置当前 C++ 解码风格。
- `set detach-on-fork MODE`：设置 GDB 在 fork 时是否分离子进程。
- `set disable-randomization BOOL`：设置是否禁用调试目标的虚拟地址空间随机化。
- `set disassemble-next-line BOOL`：设置在执行停止时是否反汇编下一行源代码或指令。
- `set disassembly-flavor FLAVOR`：设置反汇编风格。
- `set displaced-stepping BOOL`：设置调试器是否愿意使用置换步进。
- `set editing BOOL`：设置是否编辑正在输入的命令行。
- `set endian ENDIAN`：设置目标字节序。
- `set environment VAR=VALUE`：设置环境变量 `VAR` 的值为 `VALUE`。
- `set exec-direction DIRECTION`：设置执行方向。
- `set exec-done-display BOOL`：设置异步执行命令完成时的通知。
- `set exec-wrapper CMD`：设置运行程序的包装器。
- `set extension-language EXTENSION=LANGUAGE`：设置文件扩展名与源语言之间的映射。
- `set follow-fork-mode MODE`：设置调试器对 fork 或 vfork 调用的响应模式。
- `set gnutarget BFD_TARGET`：设置当前 BFD 目标。
- `set height NUM`：设置 GDB 认为每页的行数。
- `set history expansion BOOL`：设置历史记录扩展。
- `set history filename FILE`：设置记录命令历史的文件名。
- `set history save BOOL`：设置退出时是否保存历史记录。
- `set history size NUM`：设置命令历史的大小。
- `set host-charset CHARSET`：设置主机字符集。
- `set inferior-tty TTY`：设置未来运行的程序的终端。
- `set input-radix RADIX`：设置输入数字的默认基数。
- `set interactive-mode BOOL`：设置 GDB 是否以交互模式运行。
- `set language LANG`：设置当前源语言。
- `set libthread-db-search-path PATH`：设置 libthread_db 的搜索路径。
- `set listsize NUM`：设置 GDB 默认列出的源代码行数。
- `set logging file FILE`：设置当前日志文件。
- `set logging off`：禁用日志记录。
- `set logging on`：启用日志记录。
- `set logging overwrite BOOL`：设置日志记录是覆盖还是追加到日志文件。
- `set logging redirect MODE`：设置日志输出模式。
- `set max-user-call-depth NUM`：设置用户定义命令的最大调用深度。
- `set mem inaccessible-by-default MODE`：设置处理未知内存区域的方式。
- `set multiple-symbols MODE`：设置多个符号可能匹配时调试器的行为。
- `set non-stop BOOL`：设置 GDB 是否以非停止模式控制调试目标。
- `set opaque-type-resolution BOOL`：设置是否解析不透明结构/类/联合类型（如果在加载符号之前设置）。
- `set osabi ABI`：设置目标操作系统 ABI。
- `set output-radix RADIX`：设置输出数字的默认基数。
- `set overload-resolution MODE`：设置 C++ 函数评估时的重载解析。
- `set pagination BOOL`：设置分页状态。
- `set print address BOOL`：设置是否打印地址。
- `set print array BOOL`：设置数组的漂亮打印。
- `set print array-indexes BOOL`：设置是否打印数组索引。
- `set print asm-demangle BOOL`：设置反汇编列表中 C++/ObjC 名称的解码。
- `set print demangle BOOL`：设置显示符号时 C++/ObjC 名称的解码。
- `set print elements NUM`：设置要打印的字符串字符或数组元素的最大数量。
- `set print frame-arguments BOOL`：设置是否打印非标量帧参数。
- `set print inferior-events BOOL`：设置是否打印从属事件。
- `set print max-symbolic-offset OFFSET`：设置最大的偏移量，将以形式打印。
- `set print null-stop BOOL`：设置打印字符数组时是否在第一个空字符处停止。
- `set print object BOOL`：设置基于 vtable 信息打印对象的派生类型。
- `set print pascal_static-members BOOL`：设置是否打印 Pascal 静态成员。
- `set print pretty BOOL`：设置结构的漂亮打印。
- `set print repeats NUM`：设置重复打印元素的阈值。
- `set print sevenbit-strings BOOL`：设置是否将 8 位字符在字符串中打印为 \nnn。
- `set print static-members BOOL`：设置是否打印 C++ 静态成员。
- `set print symbol-filename BOOL`：设置是否打印带有源文件名和行号的符号。
- `set print thread-events BOOL`：设置是否打印线程事件（如线程启动和退出）。
- `set print union BOOL`：设置是否打印结构中的联合。
- `set print vtbl BOOL`：设置是否打印 C++ 虚函数表。
- `set prompt PROMPT`：设置 GDB 提示符。
- `set radix RADIX`：设置默认的输入和输出数字基数。
- `set record insn-number-max NUM`：设置记录/重放缓冲区限制。
- `set record stop-at-limit BOOL`：设置记录/重放缓冲区满时是否停止。
- `set remote P-packet BOOL`：设置是否使用远程协议 `P' (set-register) 数据包。
- `set remote X-packet BOOL`：设置是否使用远程协议 `X' (binary-download) 数据包。
- `set remote Z-packet BOOL`：设置是否使用远程协议 `Z' 数据包。
- `set remote access-watchpoint-packet BOOL`：设置是否使用远程协议 `Z4' (access-watchpoint) 数据包。
- `set remote attach-packet BOOL`：设置是否使用远程协议 `vAttach' (attach) 数据包。
- `set remote binary-download-packet BOOL`：设置是否使用远程协议 `X' (binary-download) 数据包。
- `set remote conditional-tracepoints-packet BOOL`：设置是否使用远程协议 `ConditionalTracepoints' (conditional-tracepoints) 数据包。
- `set remote exec-file FILE`：设置远程路径名 "run"。
- `set remote fetch-register-packet BOOL`：设置是否使用远程协议 `p' (fetch-register) 数据包。
- `set remote get-thread-local-storage-address-packet BOOL`：设置是否使用远程协议 `qGetTLSAddr' (get-thread-local-storage-address) 数据包。
- `set remote hardware-breakpoint-limit NUM`：设置目标硬件断点的最大数量。
- `set remote hardware-breakpoint-packet BOOL`：设置是否使用远程协议 `Z1' (hardware-breakpoint) 数据包。
- `set remote hardware-watchpoint-limit NUM`：设置目标硬件观察点的最大数量。
- `set remote hostio-close-packet BOOL`：设置是否使用远程协议 `vFile:close' (hostio-close) 数据包。
- `set remote hostio-open-packet BOOL`：设置是否使用远程协议 `vFile:open' (hostio-open) 数据包。
- `set remote hostio-pread-packet BOOL`：设置是否使用远程协议 `vFile:pread' (hostio-pread) 数据包。
- `set remote hostio-pwrite-packet BOOL`：设置是否使用远程协议 `vFile:pwrite' (hostio-pwrite) 数据包。
- `set remote hostio-unlink-packet BOOL`：设置是否使用远程协议 `vFile:unlink' (hostio-unlink) 数据包。
- `set remote kill-packet BOOL`：设置是否使用远程协议 `vKill' (kill) 数据包。
- `set remote library-info-packet BOOL`：设置是否使用远程协议 `qXfer:libraries:read' (library-info) 数据包。
- `set remote memory-map-packet BOOL`：设置是否使用远程协议 `qXfer:memory-map:read' (memory-map) 数据包。
- `set remote memory-read-packet-size NUM`：设置每个内存读取数据包的最大字节数。
- `set remote memory-write-packet-size NUM`：设置每个内存写入数据包的最大字节数。
- `set remote noack-packet BOOL`：设置是否使用远程协议 `QStartNoAckMode' (noack) 数据包。
- `set remote osdata-packet BOOL`：设置是否使用远程协议 `qXfer:osdata:read' (osdata) 数据包。
- `set remote pass-signals-packet BOOL`：设置是否使用远程协议 `QPassSignals' (pass-signals) 数据包。
- `set remote query-attached-packet BOOL`：设置是否使用远程协议 `qAttached' (query-attached) 数据包。
- `set remote read-aux-vector-packet BOOL`：设置是否使用远程协议 `qXfer:auxv:read' (read-aux-vector) 数据包。
- `set remote read-siginfo-object-packet BOOL`：设置是否使用远程协议 `qXfer:siginfo:read' (read-siginfo-object) 数据包。
- `set remote read-spu-object-packet BOOL`：设置是否使用远程协议 `qXfer:spu:read' (read-spu-object) 数据包。
- `set remote read-watchpoint-packet BOOL`：设置是否使用远程协议 `Z3' (read-watchpoint) 数据包。
- `set remote reverse-continue-packet BOOL`：设置是否使用远程协议 `bc' (reverse-continue) 数据包。
- `set remote reverse-step-packet BOOL`：设置是否使用远程协议 `bs' (reverse-step) 数据包。
- `set remote run-packet BOOL`：设置是否使用远程协议 `vRun' (run) 数据包。
- `set remote search-memory-packet BOOL`：设置是否使用远程协议 `qSearch:memory' (search-memory) 数据包。
- `set remote set-register-packet BOOL`：设置是否使用远程协议 `P' (set-register) 数据包。
- `set remote software-breakpoint-packet BOOL`：设置是否使用远程协议 `Z0' (software-breakpoint) 数据包。
- `set remote supported-packets-packet BOOL`：设置是否使用远程协议 `qSupported' (supported-packets) 数据包。
- `set remote symbol-lookup-packet BOOL`：设置是否使用远程协议 `qSymbol' (symbol-lookup) 数据包。
- `set remote system-call-allowed BOOL`：设置是否允许目标系统调用。
- `set remote target-features-packet BOOL`：设置是否使用远程协议 `qXfer:features:read' (target-features) 数据包。
- `set remote verbose-resume-packet BOOL`：设置是否使用远程协议 `vCont' (verbose-resume) 数据包。
- `set remote write-siginfo-object-packet BOOL`：设置是否使用远程协议 `qXfer:siginfo:write' (write-siginfo-object) 数据包。
- `set remote write-spu-object-packet BOOL`：设置是否使用远程协议 `qXfer:spu:write' (write-spu-object) 数据包。
- `set remote write-watchpoint-packet BOOL`：设置是否使用远程协议 `Z2' (write-watchpoint) 数据包。
- `set remoteaddresssize NUM`：设置内存数据包中地址的最大大小（以位为单位）。
- `set remotebaud BAUD_RATE`：设置远程串行 I/O 的波特率。
- `set remotebreak BOOL`：设置中断时是否发送中断信号。
- `set remotecache BOOL`：设置远程目标的缓存使用。
- `set remoteflow BOOL`：设置远程串行 I/O 的硬件流控制使用。
- `set remotelogbase BASE`：设置远程会话日志的数值基。
- `set remotelogfile FILE`：设置远程会话记录的文件名。
- `set remotetimeout TIMEOUT`：设置等待目标响应的超时限制。
- `set remotewritesize NUM`：设置每个内存写入数据包的最大字节数（已弃用）。
- `set schedule-multiple BOOL`：设置是否同时恢复所有进程的线程。
- `set scheduler-locking MODE`：设置执行期间锁定调度程序的模式。
- `set serial PORT_CONFIG`：设置默认的串行/并行端口配置。
- `set solib-absolute-prefix PREFIX`：设置备用系统根。
- `set solib-search-path PATH`：设置加载非绝对共享库符号文件的搜索路径。
- `set stack-cache BOOL`：设置堆栈访问的缓存使用。
- `set step-mode MODE`：设置步进操作的模式。
- `set stop-on-solib-events BOOL`：设置是否在共享库事件时停止。
- `set struct-convention CONVENTION`：设置返回小结构体的约定。
- `set substitute-path FROM TO`：设置从 `FROM` 到 `TO` 的路径替换。
- `set symbol-reloading BOOL`：设置是否多次重新加载动态符号表。
- `set sysroot ROOT`：设置备用系统根。
- `set target-async BOOL`：设置 GDB 是否以异步模式控制调试目标。
- `set target-charset CHARSET`：设置目标字符集。
- `set target-wide-charset CHARSET`：设置目标宽字符集。
- `set tcp auto-retry BOOL`：设置套接字连接时是否自动重试。
- `set tcp connect-timeout TIMEOUT`：设置套接字连接的超时限制。
- `set tdesc filename FILE`：设置读取 XML 目标描述的文件。
- `set trace-commands BOOL`：设置 GDB CLI 命令的跟踪。
- `set trust-readonly-sections BOOL`：设置是否信任只读部分的读取。
- `set tui active-border-mode MODE`：设置活动 TUI 窗口边框的属性模式。
- `set tui border-kind KIND`：设置 TUI 窗口边框的种类。
- `set tui border-mode MODE`：设置 TUI 窗口边框的属性模式。
- `set unwind-on-terminating-exception BOOL`：设置在 call dummy 中调用 std::terminate 时是否展开堆栈。
- `set unwindonsignal BOOL`：设置在 call dummy 中收到信号时是否展开堆栈。
- `set variable VAR = EXP`：评估表达式 `EXP` 并将其结果赋给变量 `VAR`。
- `set verbose LEVEL`：设置详细程度。
- `set watchdog TIMEOUT`：设置看门狗定时器。
- `set width NUM`：设置 GDB 认为每行的字符数。
- `set write BOOL`：设置是否写入可执行文件和核心文件。
- `undisplay EXP`：取消某些表达式在程序停止时的显示。
- `whatis EXP`：打印表达式 `EXP` 的数据类型。
- `x/FMT ADDRESS`：检查内存：`x/FMT ADDRESS`。

#### 文件操作
- `add-symbol-file FILE`：从文件 `FILE` 加载符号。
- `add-symbol-file-from-memory FILE`：从内存中的动态加载对象文件加载符号。
- `cd DIR`：将工作目录设置为 `DIR` 用于调试器和被调试程序。
- `core-file FILE`：使用文件 `FILE` 作为核心转储来检查内存和寄存器。
- `directory DIR`：将目录 `DIR` 添加到源文件搜索路径的开头。
- `edit FILE`：编辑指定的文件或函数。
- `exec-file FILE`：使用文件 `FILE` 作为获取纯内存内容的程序。
- `file FILE`：使用文件 `FILE` 作为要调试的程序。
- `forward-search REGEX`：从最后列出的行开始正向搜索正则表达式 `REGEX`。
- `generate-core-file`：保存包含当前调试进程状态的核心文件。
- `list FUNCTION_OR_LINE`：列出指定的函数或行。
- `load FILE`：将文件 `FILE` 动态加载到正在运行的程序中。
- `nosharedlibrary`：卸载所有共享对象库符号。
- `path DIRS`：将目录 `DIRS` 添加到对象文件搜索路径的开头。
- `pwd`：打印工作目录。
- `remote delete FILE`：删除远程文件。
- `remote get REMOTE_FILE LOCAL_FILE`：将远程文件复制到本地系统。
- `remote put LOCAL_FILE REMOTE_FILE`：将本地文件复制到远程系统。
- `reverse-search REGEX`：从最后列出的行开始反向搜索正则表达式 `REGEX`。
- `search REGEX`：从最后列出的行开始搜索正则表达式 `REGEX`。
- `section SECTION ADDR`：将可执行文件中 `SECTION` 段的基地址更改为 `ADDR`。
- `sharedlibrary REGEXP`：为匹配 `REGEXP` 的文件加载共享对象库符号。
- `symbol-file FILE`：从可执行文件 `FILE` 加载符号表。

#### 内部维护命令
- `flushregs`：强制 GDB 刷新其寄存器缓存（维护者命令）。
- `maintenance`：供 GDB 维护者使用的命令。
- `maintenance agent EXP`：将表达式 `EXP` 翻译成远程代理字节码进行跟踪。
- `maintenance agent-eval EXP`：将表达式 `EXP` 翻译成远程代理字节码进行评估。
- `maintenance check-symtabs`：检查 psymtabs 和 symtabs 的一致性。
- `maintenance cplus first_component NAME`：打印 `NAME` 的第一个类/命名空间组件。
- `maintenance cplus namespace`：打印可能的 C++ 命名空间列表。
- `maintenance demangle MANGLED_NAME`：解码 C++/ObjC 编码的名称 `MANGLED_NAME`。
- `maintenance deprecate COMMAND`：弃用命令 `COMMAND`。
- `maintenance dump-me`：导致调试器崩溃并生成核心文件。
- `maintenance info breakpoints`：所有断点的状态。
- `maintenance info psymtabs`：列出所有对象文件的部分符号表。
- `maintenance info sections`：列出可执行文件和核心文件的 BFD 段。
- `maintenance info symtabs`：列出所有对象文件的完整符号表。
- `maintenance internal-error`：使 GDB 发生内部错误。
- `maintenance internal-warning`：使 GDB 发出内部警告。
- `maintenance packet PACKET`：向远程目标发送任意数据包 `PACKET`。
- `maintenance print architecture`：打印内部架构配置。
- `maintenance print c-tdesc`：将当前目标描述打印为 C 源文件。
- `maintenance print cooked-registers`：打印包括计算值在内的内部寄存器配置。
- `maintenance print dummy-frames`：打印内部虚拟帧堆栈的内容。
- `maintenance print msymbols`：打印当前最小符号定义的转储。
- `maintenance print objfiles`：打印当前对象文件定义的转储。
- `maintenance print psymbols`：打印当前部分符号定义的转储。
- `maintenance print raw-registers`：打印包括原始值在内的内部寄存器配置。
- `maintenance print reggroups`：打印内部寄存器组名称。
- `maintenance print register-groups`：打印包括每个寄存器所属组在内的内部寄存器配置。
- `maintenance print registers`：打印内部寄存器配置。
- `maintenance print statistics`：打印关于 GDB 内部状态的统计信息。
- `maintenance print symbols`：打印当前符号定义的转储。
- `maintenance print target-stack`：打印内部目标堆栈每一层的名称。
- `maintenance print type SYMBOL`：为给定符号 `SYMBOL` 打印类型链。
- `maintenance set dwarf2 max-cache-age AGE`：设置 DWARF 2 编译单元缓存的最大年龄。
- `maintenance set gdb_datadir PATH`：设置 GDB 的 datadir 路径。
- `maintenance set internal-error corefile BOOL`：设置检测到内部错误时 GDB 是否创建 GDB 的核心文件。
- `maintenance set internal-error quit BOOL`：设置检测到内部错误时 GDB 是否退出。
- `maintenance set internal-warning corefile BOOL`：设置检测到内部警告时 GDB 是否创建 GDB 的核心文件。
- `maintenance set internal-warning quit BOOL`：设置检测到内部警告时 GDB 是否退出。
- `maintenance set profile BOOL`：设置内部性能分析。

---

通过这种方式，文档变得更加结构化和易于理解。