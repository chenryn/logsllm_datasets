并且不想让空格出现在行的结尾。如
因为它们将匹配限定在特定位
第三章
了解正则表达式语法
---
## Page 57
现在我们来看一对用于指定跨度并决定跨度长度的元字符。可以指定一个字母
这些元字符使正则表达式具有了伸缩性。
它将匹配下面的每一行：
这个元字符指示了一个不确定的长度，这允许你指定重复出现的字符。考虑下
字符的跨度
sed结合使用，提供了一种通用的方式来解决该问题。
稍后将在介绍sed时，介绍如何匹配多行模式，并且介绍一个shell脚本，它与
交
被分成两行。
位置是随即的。如果要寻找单词的任意序列，它们也许出现在一行上，但也许
的，要保证匹配短语是困难的。记住，文本文件基本上是无结构的，而且换行
面
模式匹配的程序（例如grep）不能匹配跨两行的字符串。由于所有特殊的目
短语
处于正则表达式的什么位置都应该用反斜杠对其进行转义。
不匹配任何东西。可以说，
在awk中则不同，
这对于“$”同样使用。
C”
在sed（和grep）中，
这
的表达式：
是否以“Joy”开始。第三个正则表达式也存在同样的问题。
并不完
，而“ab~c”意味着“匹配处于行的任意位置的a、b、字面^，然后是c”
Almond$
Joy
 Almond Joy
111110
110
0
11*0
美，因为第二个正则表达式匹配行结尾处的“Almond”，
QQ群：
“~”和“$”总是特殊的，即使它们可能使编写的正则表达式
，只有当“~”和“$”分别出现在正则表达式的开始或结尾
50192241
在awk中，
- 57 -
第三章
了解正则表达式语法
而不管下一
---
## Page 58
如：
将匹配包含字符串“UNIX”或字符串“LINUX”的行。可以指定更多的选择，
某行匹配其中的一个正则表达式，那么它就匹配该模式。例如，正则表达式：
竖线（l）元字符是元字符扩展集的一部分，用于指定正则表达式的联合。如果
选择性操作
如果使用POSIX之前的awk,
类似地，北美地区的电话号码可以用下面的正则表达式描述：
ID等等。例如，社会保险号的格式为：3个数字，一个连字符，再跟2个数字，
提前的，
这对元字符对于匹配固定长度字段中的数据非常有用，
例如，
间的任意数。（注8）
n和m是0到255之间的整数。如果只指定\In\}本身，那么将精确匹配前面的字符
何情况下，大括号包围一个或两个参数。
在grep和sed中使用\{和\}(注7)。POSIX egrep和POSIX awk使用【和}。在任
类
一个连字符，
“101”
注8：
注7：
成正则表达式的n次出现。如果指定\In,m\1，那么就匹配出现的次数为n和m之
UNIX|LINUX|NETBSD
UNIX|LINUX 
[0-9]\{3\}-[0-9]\[4\]
10\ {2,4\}1
下面的表达式将匹配“1001”
非常旧的版本可能没有它们；
[0-9][0-9][0-9]-[0-9] [0-9] [0-9] [0-9]
[0-9]\{3\}-[0-9]\{2\}-[0-9]\{[4\]
它也用于匹配格式化数据，例如电话号码，U.S社会保险号，库存零件
或
{n,m\}
等价于“\{1，\}”
“1000001"
QQ群：
然后是4个数字。可以描述为一下模式：
50192241
.
大括号就不可用，只能简单地重复适当次数的字符
，没有等价于“\［1\}”的修饰符。
Caveat emptor.
58
“10001”和“100001”、但是不匹配
第三章
 数据可能是从数据库中
了解正则表达式语法
“+”
例
---
## Page 59
下面的测试文件包含许多“book”。
这个表达式非常简单，
式。首先我们试着为grep编写一个如下的正则表达式，用它来搜索单词：
单词是什么？第二部分
可以使用竖线和圆括号来对选择性操作进行分组。
同样，
Computer ”
一部分。假设在文本文件中将公司的名称为“BigOne”
圆括号（）用于对正则表达式进行分组并设置优先级。
分组操作
在sed中,
表示使用egrep打印匹配这3种模式中任意一种的行。
分
后
我
但
要
它
（ This file tests for book in various places, such as
Bell
 cat bookwords 
，有些术语有时会用全拼，有时会用缩写、则可以使用：
book.*
compan(yl ies)
S
BigOne( Computer)?
S egrep "Lab(oratorie)?s" mail. list
在大多数sed和grep的版本中不能对加圆括号的一组字符应用数量词，
Labs
Laboratories, Lucent Technologies
没有联合元字符，
，使用表达式：
QQ群：
我们将看到关于这个元字符的其他示列。
50192241
它匹配的模式为：一个空格后面是字符串“book”
可以分别指定每种模式。在下一节中，我们将考虑
我们添加一个符号，
来重新构建搜索单个单词的正则表达
第三章
在下面的示列中，我们使用
或“BigOne
它们是元字符扩展集的
了解正则表达式语法
它不属于文件的部
再
---
## Page 60
为了进一步限制搜索，
F
对
表
个
是标点符号，例如：
的“book”
表达式匹配包含单词“booky”和“bookish”的行。它忽略了行开始和结尾
只打印我们想要匹配的13行中的8行，
示列文件执行以前的正则表达式并检查结果。
我们搜索单词“book”的出现时，应该有13行匹配，7行不匹配。首先，我们
and bookish and 
such as booky (is that a word?)
once
Here are the books that you requested
told them about (the books)
A great book? No.
This file tests for book in various places, such as 
amazi
Yes,
>
√
√
√
√
√
bookworm and so on.
and bookish and 
such as booky (is that a word?)
avoid matching unrelated words,
A well-written regular expression should
once you get to the end of the book, you can’ t believe 
amazing that it was called a "harmful book" when 
Yes, it is a good book for children 
Here are the books that you requested
A great book? No.
A GREAT book!
to look for a line with the word "book"
handbooks. Here are some
as well as the plural books and
at the end of a line book 
tol
book at the beginning of a line or
'book of the year award"
ld them about (the books) until it
you get to the end of the book, you can’ t believe
ng that
it is a good book for children 
QQ群：
”。当涉及某种标点符号时它忽略“book”
，我们必须使用字符类。一般地，可以结束单词的字符列
50192241
bookwords
）untilit
并打印我们不想匹配的行中的2行。这
第三章 
了解正则表达式语法
---
## Page 61
所有这些都是由在行的开始处或结尾处出现的字符串所导致的错误。因为在行
我们排除了不想要的行，
引号的前面放置一个反斜杠）：
示列文件中是如何运行的（我们使用双引号引住单引号字符，然后在嵌入的双
对初学者显示这些内容，
要注意，
在单次后面使用：
是列出方括号中的类的成员。在单词前面使用：
因此，
你还必须调整单词的复数或所有格形式。
之
右
另
后，就不仅可以理解这个表达式，
侧：
外
A GREAT book!
amazi
Yes,
Herea
told them about (the books)
A great book? No.
as well as the plural books and
This file tests for book in various places, such as
 book at the beginning of a line or
应该有两个不同的字符类：单词之前和单词之后。记住我们必须做的就
"’
A
*[s:‘.(]yooq*]”
[]])"?!.,;:' s]
引号、圆括号、大括号和方括号可以包围一个单词出现在单词的左侧或
D}].]
在类中第一个位置放置闭方括号，
ng
itisa
are the books that you requested
QQ群：
that
a good book for 
50192241
但是有4行我们没有得到。让我们来检查这4行：
会使他们因为绝望而放弃！但是在了解了有关的原理
 children 
a "harmful
until it
而且能很容易地重构它。让我们看看它在
表示它是类的成员而不是关闭括
第三章
了解正则表达式语法
---
## Page 62
则表达式，那么这些元字符可以得到广泛的应用，因为匹配单词是一种非常普
串，或者指在行的开始或结尾处的字符串）。如果这些元字符可用于所有的正
需要进一步注意的是，ex和vi文件编辑器使用特殊的元字符\，分别匹配
你也可以创建一个简单的shell脚本，
也许不匹配每个单一的实例，但是可以很容易对它进行改写来处理其他情况。
这确实是一个复杂的正则表达式，
现在我们来看看它如何工作：
下面是修订过的正则表达式：
写不同的表达式来处理每一种情况。）
的表达式：
符，同时用圆括号分隔。例如，为了匹配行的开始或一个空格，可以编写下面
（因为|和（）是元字符的扩展集的一部分，所以如果使用的是sed，则必须编
因为要匹配一个空格或行的开始或结尾，可以使用egrep并指定的“或”元字
的开始处或结尾处没有空格。所以模式不被匹配。可以使用定位元字符~和$。
单
单
是
词的字符串匹配（对于这些操作符，
词开始处和结尾处的字符串。当它们作为一对使用时，
单词的复数并不总是“s”
amazing that it was called a "harmful book" when 
Yes,
Here are the books that you requested
told them about (the books) until it
A GREAT book!
to look for a line with the word "book"
"book of the year award" 
as well as the plural books and
at the end of a line book
book at the beginning of a line or
This file tests for book in various places, such as 
spuomyooq .($| )*[s :‘i\\(]yooq*[]].](I). das s
($)*[s‘\([xooq*]（|)
.it is a good book for children 
QQ群：
50192241
。采用手工修改的方法，
，然而，可以将它分成几个部分。这个表达式
它在许多情况下都可以工作。
，用命令行参数取代“book”。
-62 -
单词是指非空格且两侧为空格的字符
第三章
可以通过给单词后面的字
，它们只和那些是完
了解正则表达式语法
。惟一的问题
整
---
## Page 63
本来创建，并通过调用sed完成相应的功能。
gres不是标准UNIX的一部分，
果，必须将程序的输出重定向到一个文件。
不管是否对其执行了一个替换。它不对文件本身进行替换。如果想保存更改结
替换。这个程序事实上是sed的简化版本、并且和sed一样，它打印所有的行而
grep一样，
具）包含一个被成为gres（全局的正则表达式替换）的非常有用的程序。就像
MKS工具包（又Mortice Kern Systems公司开发的用于DOS的一组UNIX使用工
注9：
情况下的真
如果我们尝试匹配前面的正则表达式，那么就会打印两行。有缺的是，这两种
符“Z”是惟一匹配的字符。下面是一个两行的示列文件：
这个表达式匹配“零次或多次出现的A，同时A后面跟字符Z”。
让我们来看下面的正则表达式：
匹配的范围
串的元字符。
在本节中，
当使用grep时，只要能匹配就行，
在这里替换
遍的操作（注9）。
（参见后面“生成单个替换的程序”）演示匹配的范围。
个
呢
进
Some of us, including Zippy, our dog
All of us, 
程序，
行替换时，就必须考虑匹配的范围。那么，行上的什么字符是实际上匹配的
?
Some of us,
4s9+ .00..Z*V. sa18 $
GNU程序，例如awk的GUN版本，sed和grep也都支持\。
A*Z
，但它还允许指定替换字符串。最后，我们将看几个用于描述替换字符