Listing 7-16. MS-RPC DCOM Buffer Overflow Listing 
GetMachineName(WCHAR *src, WCHAR *dst, int arg_8) 
{ 
    for(src++; *src != (WCHAR)'\'; ) 
        *dst++ = *src++; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
346 
    ... 
} 
As you can see, this buffer overflow is similar to Listing 7-15 and is performing a 
potentially dangerous copy. Sometimes, however, when you read complex functions 
containing nested loops, these types of suspect loop constructs can be difficult to spot. 
Often it's hard to verify whether they present a potential vulnerability. Listing 7-17 
from NTPD, the network time protocol (NTP) daemon, demonstrates a more 
complicated copying loop. 
Listing 7-17. NTPD Buffer Overflow Example 
while (cp  SG(post_max_size)) { 
        php_error_docref(NULL TSRMLS_CC, E_WARNING, 
                    "POST Content-Length of %ld bytes exceeds the 
limit of %ld bytes", 
                    SG(request_info).content_length, 
                    SG(post_max_size)); 
        return; 
    } 
    SG(request_info).post_data = emalloc(allocated_bytes); 
    for (;;) { 
        read_bytes = sapi_module.read_post( 
            SG(request_info).post_data+SG(read_post_bytes), 
            SAPI_POST_BLOCK_SIZE TSRMLS_CC); 
        if (read_bytes SG(post_max_size)) { 
            php_error_docref(NULL TSRMLS_CC, E_WARNING, 
                    "Actual POST length does not match Content-Length, 
and exceeds %ld bytes", 
                    SG(post_max_size)); 
            return; 
        } 
        if (read_bytes = allocated_bytes) { 
            allocated_bytes = SG(read_post_bytes) 
                +SAPI_POST_BLOCK_SIZE+1; 
            SG(request_info).post_data = 
                erealloc(SG(request_info).post_data, 
                         allocated_bytes); 
        } 
   } 
   SG(request_info).post_data[SG(read_post_bytes)] = 0; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
349 
   /* terminating NULL */ 
   SG(request_info).post_data_length = SG(read_post_bytes); 
} 
The sapi_read_standard_form_data function is expected to fill the global buffer 
post_data and place a NUL byte at the end of the buffer. However, it doesn't in one 
case: If more than post_max_size data is supplied, a warning is generated and the 
function returns. Because this function is a void function and doesn't return a value, 
the function's caller doesn't know an error has occurred and continues processing 
unaware. 
Note that in some circumstances, the php_error_docref() function can cause the 
process to exit, depending on the second argument; however, in this case the 
function just generates a warning. In normal circumstances, a bug like this would 
present potential exploitation opportunities by causing a pointer to increment outside 
the bounds of the post_data variable. However, in this case, the allocator doesn't let 
you supply post_max_size (8 MB) bytes in a request because there's a memory limit of 
8MB per request (although both the memory allocation maximum data limit and 
post_max_size can be configured). 
Auditing Tip 
Mark all the conditions for exiting a loop as well as all variables manipulated by the 
loop. Determine whether any conditions exist in which variables are left in an 
inconsistent state. Pay attention to places where the loop is terminated because of an 
unexpected error, as these situations are more likely to leave variables in an 
inconsistent state. 
Another off-by-one error occurs when a variable is incorrectly checked to ensure that 
it's in certain boundaries before it's incremented and used. Listing 7-19, which is code 
from the mod_rewrite Apache module, demonstrates this error. 
Listing 7-19. Apache 1.3.29/2.X mod_rewrite Off-by-One Vulnerability 
    /* special thing for ldap. 
     * The parts are separated by question marks. 
     * From RFC 2255: 
     *     ldapurl = scheme "://" [hostport] ["/" 
     *               [dn ["?" [attributes] ["?" [scope] 
     *               ["?" [filter] ["?" extensions]]]]]] 
     */ 
    if (!strncasecmp(uri, "ldap", 4)) { 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
350 
        char *token[5]; 
        int c = 0; 
        token[0] = cp = ap_pstrdup(p, cp); 
        while (*cp && c = token_array_size) 
        { 
            token_array_size += 32; 
            token_array=safe_realloc(token_array, 
                            token_array_size * sizeof(char *)); 
        } 
        token_array[i] = element; 
    } 
    token_array[i] = NULL; 
    return token_array; 
} 
In this example, the code following the loop assumes that the token_array array has 
been allocated, which can happen only if the loop runs at least once. If the first call to 
parse_element() returns NULL, the loop isn't entered, token_array is never allocated, 
and the bolded code causes a NULL pointer dereference, resulting in a potential crash. 
Punctuation Errors 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
353 
As discussed in Chapter 6(? [????.]), typographical errors can lead to situations that 
have security-relevant consequences. Occasionally, developers make the mistake of 
inserting superfluous language punctuation where they shouldn't, and this mistake 
often results in the loop not doing what was intended. Take a look at a simple 
example: 
for(i = 0; i < sizeof(dest) && *src != ' '; i++, src++); 
    dest[i] = *src; 
if(i == sizeof(dest)) 
    i--; 
dest[i] = '\0'; 
The for loop in this code is supposed to be copying data into the dest array; however, 
the programmer made a slight error: a semicolon at the end of the line with the for 
loop. Therefore, the loop doesn't actually copy anything, and what should be the loop 
body always runs once after the counter is incremented past the array bounds. This 
error means you could potentially write a byte to dest[sizeof(dest)], which would be 
one byte out of bounds. 
Naturally, these errors aren't that common because they usually break the program's 
functionality and, therefore, get caught during testing or development. Simple testing 
of the code in the previous example would probably show the programmer that any 
subsequent processing of dest seems to have a problem because the loop doesn't 
copy any data into dest as it's supposed to. However, these errors do occur from time 
to time in ways that don't affect the program's functionality, or they occur in 
error-handling or debugging code that hasn't been tested. As discussed in Chapter 6(? 
[????.]), reviewers should always be on the lookout for these minor punctuation 
errors. 
Flow Transfer Statements 
Programming languages usually provide control flow statements that developers can 
use to redirect execution in very direct ways. Loops typically have a mechanism by 
which a programmer can immediately terminate a loop or advance a loop to its next 
iteration. Switch-style statements have keywords for denoting a case body and a 
mechanism for breaking out of a case body. Some languages provide goto and 
longjmp style statements, which can allow arbitrary control flow transfers within a 
function or across function boundaries. 
Occasionally, application developers misuse these control flow statements in ways 
that can have security-relevant consequences because these keywords are often 
overloaded. In C, the break statement is used to break out of a switch statement and 
to terminate a loop. The dual use of this statement can lead to several potential 
mistakes. Application developers might assume that a break statement can break out 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
354 
of any nested block and use it in an incorrect place. Or they might assume the 
statement breaks out of all surrounding loops instead of just the most immediate loop. 
Another problem is using a continue statement inside a switch statement to restart 
the switch comparison. Experienced programmers wouldn't consciously make these 
kinds of mistakes, but they can remain in code if they're caused by accidental editing 
mistakes, for example, and aren't immediately apparent when using the application. 
For these mistakes to remain in the code, however, they need to appear correct 
enough that a casual review wouldn't raise any red flags. 
A vulnerability of this nature resulted in the much-publicized AT&T phone network 
outage of 1990. The programmer mistakenly used a break statement to break out of 
an if code block nested inside a switch statement. As a result, the switch block was 
unintentionally broken out of instead. 
Switch Statements 
When dealing with suspect control flow, switch statements have a few unique 
considerations. A common pitfall that developers fall into when using switch 
statements is to forget the break statement at the end of each case clause. This error 
can result in code being executed unintentionally when the erroneous case clause 
runs. Take a look at Listing 7-23. 
Listing 7-23. Break Statement Omission Vulnerability 
char *escape_string(char *string) 