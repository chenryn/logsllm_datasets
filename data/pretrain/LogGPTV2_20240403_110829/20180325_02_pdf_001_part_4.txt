efficiently,calledMADVFREEbutitalsodemoteshugepagesinstantly
pageallocationsintheutilbitvector.Ifahugepageregion andcausesthesamememorybloatingproblemasMADVDONTNEED.
712 12th USENIX Symposium on Operating Systems Design and Implementation USENIX Association
reducetheperformanceimpactofcompaction. hencethelowestpriorityforobtainingnewhugepages.
τ =1 means M disregards idle memory while τ close
4.5 Balancepagesharingwithperformance
to 0 means M’s value is inversely proportional to the
Ingensusesaccessfrequencyinformationtobalanceiden- amountofidlememory.
tical page sharing with application performance. It de- Akernelthread(calledScan-kth)periodicallypro-
cides whether or not huge pages should be demoted to filestheidlefractionofhugepagesineachprocessand
enablesharingofidenticalbasepagescontainedwithin updatesthevalueofM forfairpromotion.
thehugepage. IncontrasttoKVM,whichalwayspriori-
4.7 Fairpromotion
tizesmemorysavingsovercontiguity,Ingensimplements
apolicythatavoidsdemotingfrequentlyaccessedhuge Promote-kthperformsfairallocationofcontiguityusing
pages.Whenencounteringamatchingidenticalbase-page the promotion metric. When contiguity is contended,
sizedregionwithinahugepage,Ingensdeniessharingif fairness is achieved when all processes have a priority-
thathugepageisfrequentlyaccessed,otherwiseitallows proportional share of the available contiguity. Mathe-
thehugepagetobedemotedforsharing. maticallythisisachievedbyminimizingO, definedas
Forpagesharing,thekernelmarksasharedpageread- follows:
only. Whenaprocesswritesthepage, thekernelstops O =∑(M i−M¯)2 (3)
sharingthepageandallocatesanewpagetotheprocess i
(similartoacopy-on-writemechanism). Ingenschecks TheM iindicatesthepromotionmetricofprocess/VMi
theutilizationforthehugepageregionenclosingthenew and M¯ is the mean of all process’ promotion metrics.
page and if it is highly utilized, it promotes the page Intuitively,theformulacharacterizeshowmuchprocess’
contiguityallocation(M i)deviatesfromafairstate(M¯):
(whileLinuxwouldwaitforasychronouspromotion).
inaperfectlyfairstate,alltheM equalM¯,yieldinga
4.6 Proportionalpromotionmanagescontiguity i
0-valuedO.
Ingensmonitorsanddistributesmemorycontiguityfairly Inpractice,tooptimizeO,itsufficestoiterativelyse-
among processes and VMs, employing techniques for lect the process with the biggest M, scan its address
i
proportional fair sharing of memory with an idleness spacetopromotehugepages,andupdateM andO. It-
i
penalty[81]. Eachprocesshasasharepriorityformem- erationstopswhenO iscloseto0orwhenPromote-kth
ory that begins at an arbitrary but standard value (e.g, cannotgenerateanyadditionalhugepages(e.g.,allpro-
10,000). Ingensallocateshugepagesinproportiontothe cessarecompletelybackedbyhugepages).
sharevalue. Ingenscountsinfrequentlyaccessedpagesas Animportantbenefitofthisapproachisthatitdoesnot
idlememoryandimposesapenaltyfortheidlememory. requireaperformancemodelanditappliesequallywell
Anapplicationthathasreceivedmanyhugepagesbutis toprocessesandvirtualmachines.
notusingthemactivelydoesnotgetmore.
5 Implementation
WeadaptESX’sadjustedshares-per-pageratio[81]to
expressourper-processmemorypromotionmetricmathe- IngensisimplementedinLinux4.3.0andcontainsnew
maticallyasfollows. mechanisms to support page utilization and access fre-
quencytracking.ItalsousesLinuxinfrastructureforhuge
M = S (2) pagepagetablemappingsandmemorycompaction.
H·(f+τ(1−f))
5.1 Hugepagepromotion
where S is a process’ (or virtual machine’s or con- Promote-kth runs as a background kernel thread and
tainer’s) huge page share priority and H is the number schedules huge page promotions (replacing Linux’s
ofbytesbackedbyhugepagesallocatedtotheprocess. khugepaged).Promote-kthmaintainstwoprioritylists:
(f+τ(1−f))isapenaltyfactorforidlehugepages. f is highandnormal. Thehighprioritylistisagloballist
thefractionofidlehugepagesrelativetothetotalnumber containingpromotionrequestsfromthepagefaulthandler
ofhugepagesusedbythisprocess(0≤ f ≤1)andτ,with andthenormalprioritylistisaper-applicationlistfilled
0<τ ≤1,isaparametertocontroltheidlenesspenalty. inas Promote-kthperiodicallyscans theaddressspace.
LargervaluesofM receivehigherpriorityforhugepage ThepagefaulthandleroraperiodictimerwakesPromote-
promotion. kth,whichthenexaminesthetwolistsandpromotesin
Intuitively, if two processes’ S value are similar and priorityorder.
oneprocesshasfewerhugepages(H issmaller),thenthe Ingensdoesnotreservecontiguousmemoryinthepage
kernelprioritizespromotion(orallocationandpromotion) faulthandler.Whenthepagefaulthandlerrequestsahuge
of huge pages for that process. If S and H values are pagepromotion,thephysicalmemorybackingthebase
similar among a group of processes, the process with pagesmightnotbecontiguous. Inthiscase,Promote-kth
thelargestfractionofidlepageshasthesmallerM,and allocatesanew2MBcontiguousphysicalmemoryregion,
USENIX Association 12th USENIX Symposium on Operating Systems Design and Implementation 713
copiesthedatafromthediscontiguousphysicalmemory, resetsallaccessbits,theexecutiontimeoftheworkload
andmapsthecontiguousphysicalmemoryintothepro- isdegradedby29%. Sampling-basedscanningreduces
cess’virtualaddressspace.Afterpromotion,Promote-kth the overhead to 8%. In contrast to this worst-case mi-
freestheoriginaldiscontiguousphysicalmemory. crobenchmark,Section6showsthatslowdownsofIngens
Anapplication’svirtualaddressspacecangrow,shrink, onrealworkloadsaverage1%.
orbemergedwithothervirtualaddressregions. These
5.3 Limitationsandfuturework
changesmakenewopportunitiesforhugepagepromo-
tionwhichbothLinuxandIngensdetectbyperiodically Linux supports transparent huge pages only for anony-
scanningaddressspacesinthenormalprioritylist(Linux mousmemorybecausehugepagesupportforpagecache
inkhugepaged,IngensinPromote-kth). Forexample, pages can significantly increase I/O traffic, potentially
avirtualaddressregionthatissmallerthanthesizeofa offsettingthebenefitsofhugepages. IfLinuxaddshuge
hugepagemightmergewithanotherregion,allowingit pagestothepagecache,itwillmakesensetoextendIn-
tobepartofahugepage. genstomanagethemwiththegoalofimprovingtheread-
onlypagecachesupport(implementedinFreeBSD[68]),
Promote-kthcomparesthepromotionmetric(§4.6)of
whileavoidingsignificantincreasesinI/Otrafficforwrite-
eachapplicationandselectstheprocesswiththehighest
backofhugepageswhicharesparselymodified.
deviationfromafairstate(§4.7). Itscans16MBofpages
Hardwaresupportforfiner-graintrackingofaccessand
andsleepsfor10secondswhichisalsoLinux’sdefault
dirtybitsforhugepageswouldbenefitIngens. Hardware-
settings (i.e., the 1.6 MB/s in Table 4). After scanning
managedaccessanddirtybitsforallbasepageswithina
aprocess’entireaddressspace,Promote-kthrecordsthe
hugepageregioncouldavoidwastedI/Oonwrite-back
numberofpromotedhugepagesandifanapplicationhas
ofdirtypages,andenablemuchbetterinformeddecisions
toofewpromotions(zerointheprototype),Promote-kth
aboutwhentodemoteahugepageorwhenhugepages
excludestheapplicationfromthenormalprioritylistfor
canbereclaimedfairlyundermemorypressure.
120 seconds. This mechanism prevents an adversarial
applicationthatcanmonopolizePromote-kth. Suchan NUMA considerations. Ingens maintains Linux’s
applicationwouldhaveasmallnumberofhugepagesand NUMAheuristics,preferringpagesfromanode’slocal
wouldappeartobeagoodcandidatetoscantoincrease NUMAregion,andrefusingtoallocateahugepagefrom
fairness(§4.7)). adifferentNUMAdomain. Allofourmeasurementsare
withinasingleNUMAregion.
5.2 Accessfrequencytracking
Previous work has shown that if memory is shared
In 2015, Linux added an access bit tracking frame- acrossNUMAnodes,hugepagesmaycontributetomem-
work[70]forversion4.3. Thekerneladdsanidleflag oryrequestimbalanceacrossdifferentmemorycontrollers
foreachphysicalpageanduseshardwareaccessbitsto andreducedlocalityofaccesses,decreasingtheirperfor-
trackwhenapageremainsunused. Ifthehardwaresets mancebenefit[54]. Thishappensduetopage-levelfalse
anaccessbit,thekernelclearstheidlebit.Theframework sharing, where unrelated data is accessed on the same
providesAPIstoquerytheidleflagsandcleartheaccess page, and the hot page effect, which is exacerbated by
bit. Scan-kth uses this framework to find idle memory the large page size. The authors propose extensions to
duringaperiodicscanofapplicationmemory.Thedefault Linux’hugepageallocationmechanismtobalancehuge
periodis2seconds. Scan-kthclearstheaccessbitsatthe pagesamongNUMAdomainsandtosplithugepagesif
beginningoftheprofilingperiodandqueriestheidleflag falsesharingisdetectedoriftheybecometoohot. These
attheend. extensionsintegratenicelywithIngens. Scan-kthcanal-
Inthex86architecture,clearingtheaccessbitcauses readymeasurepageaccessfrequenciesandPromote-kth
aTLBinvalidationforthecorrespondingpage. Conse- cancheckwhetherhugepagesneedtobedemoted.
quently,frequentperiodicscanningcanhaveanegative
6 Evaluation
performanceimpact. Toamelioratethisproblem,Ingens
supportsfrequency-awareprofilingandsampling. When We evaluate Ingens using the applications in Table 1,
Scan-kthneedstocleartheaccessbitofapage,itchecks comparingagainsttheperformanceofLinux’shugepage
whether the page is frequently accessed or not. If it is support which is state-of-the-art. Experiments are per-
not frequently accessed, Scan-kth clears the access bit, formedontwoIntelXeonE5-2640v32.60GHzCPUs
otherwiseitclearsitwith20%probability. Ingensusesan (Haswell)with64GBmemoryandtwo256MBSSDs.
efficienthardware-basedrandomnumbergenerator[18]. WeuseLinux 4.3and Ubuntu 14.04for boththe guest
Toverifythatsamplingreducesworstcaseoverheads, andhostsystem. Intelsupportsmultiplehardwarepage
werunasyntheticbenchmarkwhichreads10GBmem- sizesof4KB,2MBand1GB;ourexperimentsuseonly
oryrandomlywithoutanycomputation,andmeasurethe 4KBand2MBhugepages. WesetthenumberofvCPUs
executiontimeforonemillioniterations. WhenIngens equaltothenumberofapplicationthreads.
714 12th USENIX Symposium on Operating Systems Design and Implementation USENIX Association
Ingensoverhead
3.0% Linux Ingens
922.3 1091.9(1.18×) 2.0% nwodwolS
1.0% (a)Throughputoffulloperationmix(requests/secandspeedup
normalizedtoLinux).
0.0%
429.mcf Tunkrank MovieRecmd SVM Redis Olio MongoDB Nutch Blackscholes Bodytrack Canneal Dedup Facesim Ferret Fluidanimate Freqmine Raytrace Streamcluster Swaptions Vips X264 Avg.
LiE 4nv 7ue 8xnt Iv ni ge 3w H Lio 2nm 6xepag Ie ngv 2ei 0s ni 7st LiT 2na 8ug 9xse Ia nr gc 2eh
e 3n 8s 3u 4n 0s
Average
90th 605 354 372 226 417 299
Figure4:Performanceslowdownofutilization-basedpro-
MAX 694 649 379 385 518 507
motionrelativetoLinuxwhenmemoryisnotfragmented.
(b)Latency(millisecond)ofread-dominantoperations.
Backgroundtask CPUutilization
Table 9: Performance result of Cloudstone WEB 2.0
Proactivecompaction 1.3% Benchmark(Olio)whenmemoryisfragmented.
Accessbittracking 11.4%
Table8showstheCPUutilizationofbackgroundtasks
Table8: CPUutilizationofbackgroundtasksinIngens.
inIngens. WemeasuretheCPUutilizationacross1sec-
Foraccessbittracking,Scan-kthscansmemoryofMon-
ond intervals and take the average. For proactive com-
goDBthatuses10.7GBmemory.
paction, wesetIngenstocompact100MBofmemory
every2seconds(whichismoreaggressivethanthede-
WecharacterizetheoverheadsofIngens’sbasicmech- faultof5seconds). CPUoverheadofaccessbittracking
anisms such as access tracking and utilization-based dependsonhowmanypagesarescanned,sowemeasure
hugepagepromotion. Weevaluatetheperformanceof theCPUutilizationofScan-kthwhilerunningMongoDB
utilization-basedpromotionanddemotionandIngensabil- using10.7GBofmemory.
ity to provide fairness across applications using huge
6.2 Utilization-basedpromotion
pages. Finally,weshowthatIngens’saccessfrequency-
basedsamepagemergingachievesgoodmemorysavings ToevaluateIngens’sutilization-basedhugepagepromo-
whilepreservingmostoftheperformancebenefitofhuge tion,wecompareamixofoperationsfromtheCloudstone
pages. WeuseasingleconfigurationtoevaluateIngens WEB2.0benchmark,whichsimulatesasocialeventweb-
whichisconsistentwithourexamplesinSections4and site. CloudstonemodelsaLAMPstack,consistingofa
5: utilization threshold is 90%, Scan-kth period is 10s, webserver(nginx),PHP,andMySQL.WerunCloudstone
accessfrequencytrackingintervalis2sec,andsampling inaKVMvirtualmachineandusetheRainworkloadgen-
ratiois20%.Proactivebatchedcompactionhappenswhen erator[45]forload.
FMFIisbelow0.8,withanintervalof5seconds;themax- A study of the top million websites showed that in
imum amount of compacted memory is 100MB; and a 2015 the average size exceeded 2 MB [50]. In light of
pageisfrequentlyaccessedifF ≥6. this,wemodifyCloudstonetoservesomewebpagesthat
t
useabout2MBofmemory,enablingthebenchmarkto
6.1 Ingensoverhead
makebetteruseofhugepages. TheCloudstonebench-
Figure4showstheoverheadsintroducedbyIngensfor markconsistsof7webpages, andweonlymodifythe
memory intensive workloads. To evaluate the perfor- homepageandapagethatdisplayssocialeventdetailsto
manceofutilization-basedhugepagepromotioninthe use2MBmemory. Theotherpagesremainunchanged.
unfragmentedcase,werunanumberofbenchmarksand WecomparethroughputandlatencyforCloudstoneon
comparetheirruntimewithLinux. Ingens’sutilization- LinuxandIngenswhenmemoryisfragmentedfromprior
basedhugepagepromotionslowsapplicationsdown3.0% activity(FMFI=0.9). Tocausefragmentation,weruna
intheworstcaseand0.7%onaverage. Theslowdowns programthatallocatesalargeregionofmemoryandthen
stem primarily from Ingens not promoting huge pages partiallyfreesit.
asaggressivelyasLinux,sotheworkloadexecuteswith WeuseCloudstone’sdefaultoperationmix: 85%read
slowerbasepagesforashorttimeuntilIngenspromotes (viewingevents,visitinghomepage,andsearchingevent
hugepages. Asecondaryoverheadstemsfromthecom- bytag),10%login,and5%write(addingneweventsand
putationofhugepageutilization. invitingpeople).Ourtestdatabasehas7,000events,2,000
ToverifythatIngensdoesnotinterferewiththeperfor- people,and900tags. Table9(a)showsthethroughput
manceof“normal”workloads, wemeasureanaverage attainedbythebenchmarkrunningonLinuxandIngens.
performancepenaltyof0.8%acrosstheentirePARSEC Ingens’sutilization-basedpromotionachievesaspeedup
3.0benchmarksuite. of1.18×overLinux. Table9(b)showsaverageandtail
USENIX Association 12th USENIX Symposium on Operating Systems Design and Implementation 715
Ingenshugepagepromotion
Linux-nohuge Linux Ingens-90% Ingens-70% Ingens-50% 1000 )BM(.pmusnocegapeguH