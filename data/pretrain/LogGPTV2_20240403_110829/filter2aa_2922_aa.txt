# Taking Kerberos to the Next Level

## Presenters
- **James Forshaw** (@tiraniddo)
  - Researcher at Google Project Zero
  - Specializes in Windows:
    - Local Privilege Escalation (LPE)
    - RPC/COM Internals
    - Token Manipulation
  - Creator of NtApiDotNet, D2J, OleViewDotNet
  - "Never met a logical vulnerability I didn’t like."

- **Nick Landers** (@monoxgas)
  - Adversarial R&D at NetSPI
  - Specializes in Windows:
    - Offensive Tooling Suites
    - Payload Architectures
    - Vulnerability Research
  - Creator of sRDI, Dark Side Ops
  - "Your Prod is our Dev."

## Assumptions
- You have a basic understanding of Kerberos.
- You are somewhat familiar with existing remote attacks.
- You are interested in local privilege escalation (LPE) techniques.

## Talking to Yourself Can Be Good for You

### Kerberos Authentication Flow

1. **Client Initialization:**
   - The client code initializes the security context using `InitializeSecurityContext`.
   - The client sends a TGS-REQ to the KDC, requesting a ticket for the service (SPN: HOST/ABC).
   - The KDC responds with a TGS-REP, which includes the TGS and PAC.
   - The client then sends an AP-REQ to the server, which includes the TGS and PAC.
   - The server uses `AcceptSecurityContext` to validate the ticket and PAC, and grants access if valid.

### Key Components
- **KDC (Key Distribution Center):** Manages the distribution of keys and tickets.
- **TGT (Ticket-Granting Ticket):** Used to request service tickets from the KDC.
- **PAC (Privilege Attribute Certificate):** Contains user and group information used for authorization.

### Silver Ticket Attack

1. **Logon with Credentials:**
   - Log in with credentials to initialize the key in the LSA (Local Security Authority).

2. **Convert Credentials to Key:**
   - Convert the credentials to a key that can be used to build a silver ticket.

3. **Build Silver Ticket:**
   - Use the key to build a silver ticket for a specific service (e.g., CIFS/Client).

4. **Build AP-REQ and Accept:**
   - Build an AP-REQ and use `AcceptSecurityContext` to accept the ticket and get an access token.

5. **Parse PAC and Get Token:**
   - Parse the PAC to extract the necessary information and obtain the token (e.g., admin token).

### LSA Internals and How to Break Them

#### PAC Signature Validation
1. **Compute Local Checksum:**
   - Compute a local checksum of the PAC using the service key.
   
2. **Verify PAC Server Signature:**
   - Verify the PAC server signature against the local value.
   
3. **Send Checksum and Signature to KDC:**
   - Send the computed checksum and signature to the KDC for validation.
   
4. **Verify Signature with Realm Key:**
   - The KDC verifies the signature with the realm key and replies with the validation result.

### Bypassing PAC Validation

- **AcquireCredentialsHandle:**
  - Automatically bypass PAC validation if `SECPKG_CRED_INBOUND` is set and the caller is `NT AUTHORITY\SYSTEM`.
  
- **SetCredentialsAttributes:**
  - Manually bypass PAC validation by setting the `SeTcbPrivilege` attribute.

### User-to-User Authentication

- **U2U Ticket:**
  - A U2U ticket is encrypted with the session key from the TGT rather than the server's secret key.
  - This allows for user-to-user authentication and can be used to build a silver ticket.

### Extracting a Delegatable TGT

1. **Request AP-REQ for Delegatable Service:**
   - Request an AP-REQ for a delegatable service (e.g., CIFS/KDC.REALM) with the `ISC_REQ_DELEGATE` flag.
   
2. **Encrypt Authenticator with Session Key:**
   - The authenticator is encrypted with the session key and contains the delegation TGT.
   
3. **Query Ticket Cache and Extract TGT:**
   - Query the ticket cache for the session key, decrypt the authenticator, and extract the TGT.

### Modifying the PAC

- **PAC->LogonInfo:**
  - The PAC contains domain SID, user ID, group IDs, extra SIDs, and other resource information.
  - You can add or modify these fields to include any domain SID or RIDs, such as:
    - Domain Administrator (RID 500)
    - Domain Users (RID 512)
    - Custom SIDs

### Hunting for Session Update Primitives

- **LSA Functions:**
  - `LsapBuildAndCreateToken`
  - `LsapSetSessionToken`
  - `LsapApplyLoopbackSessionId`
  - `LsapUpdateUserTokenSessionId`
  - `LsapFilterElevatedTokenFull`
  - `NtSetInformationToken` (with `TokenSessionId`)
  - `LsapAuApiDispatchLogonUser`
  - `LsapCreateTokenEx`
  - `LsaISetSupplementalTokenInfo`

- **Requirements:**
  - Some functions require `TCB` (Trusted Computer Base) privileges.
  - Others may not be useful in certain contexts.

### LSA Loopback Library

1. **Call ISC and Add Entry to Loopback Tracking Table:**
   - Call `InitializeSecurityContext` and add an entry to the loopback tracking table with the caller’s session ID.

This presentation aims to provide a deep dive into advanced Kerberos techniques, including local privilege escalation, PAC manipulation, and session update primitives.