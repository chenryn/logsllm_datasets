Taking Kerberos To 
The Next Level
James Forshaw | @tiraniddo
●
Researcher @ Google Project Zero
●
Specialize in Windows
○
Local Privilege Escalation
○
RPC/COM Internals
○
Token manipulation
●
NtApiDotNet | D2J | OleViewDotNet 
“Never met a logical vulnerability I didn’t like.”
Nick Landers | @monoxgas
●
Adversarial R&D @ NetSPI
●
Also specialize in Windows
○
Oﬀensive tooling suites
○
Payload architectures
○
Vulnerability research
●
sRDI | Dark Side Ops
“Your Prod is our Dev.”
Assumptions
You understand the basics of Kerberos
You’re (somewhat) familiar with existing 
remote attacks
You want to see some local privilege 
escalation (LPE)
Talking to Yourself
can be good for you
Server Code
ABC.REALM
Client Code
Local Kerberos Authentication
Local Security Authority
Kerberos Security 
Package
AcceptSecurityContext
KDC.REALM
KEY: abc$@REALM
SPN: HOST/ABC
InitializeSecurityContext
krbtgt/REALM
TGT
PAC
Server Code
ABC.REALM
Client Code
Local Kerberos Authentication
Local Security Authority
Kerberos Security 
Package
KDC.REALM
KEY: abc$@REALM
InitializeSecurityContext
TGS-REQ
SPN: HOST/ABC
krbtgt/REALM
TGT
PAC
Server Code
ABC.REALM
Client Code
Local Kerberos Authentication
Local Security Authority
Kerberos Security 
Package
KDC.REALM
SPN: HOST/ABC
krbtgt/REALM
TGT
PAC
InitializeSecurityContext
TGS-REP
HOST/ABC
TGS
PAC
KEY: abc$@REALM
Server Code
ABC.REALM
Client Code
Local Kerberos Authentication
Local Security Authority
Kerberos Security 
Package
KDC.REALM
KEY: abc$@REALM
SPN: HOST/ABC
krbtgt/REALM
TGT
PAC
AP-REQ
HOST/ABC
TGS
PAC
AcceptSecurityContext
Local Security Authority
Server Code
ABC.REALM
Client Code
Local Kerberos Authentication
Kerberos Security 
Package
KDC.REALM
KEY: abc$@REALM
SPN: HOST/ABC
krbtgt/REALM
TGT
PAC
HOST/ABC
TGS
PAC
Access Token
KEY
PAC
❶ Logon with 
credentials to 
initialize key in LSA
User Session
Local Security Authority
Client
Local Kerberos Silver Ticket
KEY: bob@REALM
LsaLogonUser
u: REALM\bob
pw: Password!
User Session
Local Security Authority
Client
Local Kerberos Silver Ticket
KEY: bob@REALM
❷ Convert 
credentials to key
❸ Use key to 
build silver 
ticket
CIFS/Client
TGS
u: REALM\bob
pw: Password!
KEY: bob@REALM
User Session
Local Security Authority
Client
Local Kerberos Silver Ticket
KEY: bob@REALM
 ❹ Build A-REQ 
and accept
PAC
AcceptSecurityContext
Token (admin)
❺ Parse PAC and 
get token
CIFS/Client
TGS
Demo Time
LSA Internals
and how to break them
Local Security Authority
KDC
Client
PAC Signature Validation
Kerberos Package
PAC
KDC Signature
Server Signature
❶ Compute local 
checksum of PAC 
with service key
Local Checksum
KEY: bob@REALM
PAC
Local Security Authority
KDC
Client
PAC Signature Validation
Kerberos Package
❷ Verify PAC server 
signature against 
local value
KDC Signature
Server Signature
Local Checksum
PAC
Local Security Authority
Server Signature
KDC
Client
PAC Signature Validation
Kerberos Package
❸ Send the KDC the 
checksum and 
signature to validate 
KDC Signature
KERB_VERIFY_PAC_REQUEST
Local Checksum
KDC Signature
NETLOGON
Local Checksum
KDC Signature
Local Checksum
PAC
Local Security Authority
Server Signature
KDC
Client
PAC Signature Validation
Kerberos Package
❹ Verify 
signature with 
realm key and 
reply 
KDC Signature
Local Checksum
KEY: krbtgt@REALM
KDC Signature
Local Checksum
cred->Flags & SECPKG_CRED_ATTR_PAC_BYPASS
(auto) AcquireCredentialsHandle w/
SECPKG_CRED_INBOUND && NT AUTHORITY\SERVICE && 
!KerbGlobalValidateKDCPACSignature
(manual) SetCredentialsAttributes w/SeTcbPrivilege
So how do Silver Tickets ever work?
(PAC validation isn’t always enabled)
“SYSTEM” Equivalent
SeTcbPrivilege || SYSTEM || LOCAL/NETWORK SERVICE
context->Flags & ASC_RET_USE_SESSION_KEY
Logon Session:
Credentials Handle:
ASC Context Flags:
cred->Flags & SECPKG_CRED_ATTR_PAC_BYPASS
(auto) AcquireCredentialsHandle w/
SECPKG_CRED_INBOUND && NT AUTHORITY\SERVICE && 
!KerbGlobalValidateKDCPACSignature
(manual) SetCredentialsAttributes w/SeTcbPrivilege
So how do Silver Tickets ever work?
(PAC validation isn’t always enabled)
“SYSTEM” Equivalent
SeTcbPrivilege || SYSTEM || LOCAL/NETWORK SERVICE
context->Flags & ASC_RET_USE_SESSION_KEY
Logon Session:
Credentials Handle:
ASC Context Flags:
???
ASC_RET_USE_SESSION_KEY ?
3.2.3.  Receipt of KRB_AP_REQ Message
[...] If the USE-SESSION-KEY flag is set in the ap-options field, 
it indicates to the server that user-to-user authentication is in 
use, and that the ticket is encrypted in the session key from the 
server's TGT rather than in the server's secret key.
See Section 3.7 for a more complete description of the effect of 
user-to-user authentication on all messages in the Kerberos 
protocol.
RFC 4120 - Kerberos V5 
KRBTGT/REALM
TGT
KDC.REALM
b0b@REALM
PAC
User to User Authentication
bob
CIFS/ABC
U2U Ticket
b0b@REALM
PAC
Session Key
Session Key
KEY: krbtgt@REALM
We now need the session key from our 
TGT to build the Silver Ticket
Trying to get a TGT + Session Key
PS C:\> $ticket = Get-KerberosTicket krbtgt
PS C:\> $ticket.SessionKey
KeyEncryption
: AES256_CTS_HMAC_SHA1_96
Principal
: krbtgt/PI:EMAIL
NameType
: SRV_INST
PS C:\> $ticket.SessionKey.Key | Format-HexDump
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
No session 
key ?
Want to get a usable Kerberos TGT without admin 
rights/allowtgtsessionkey?
It's easy with a delegation ticket! (enabled by 
default...)
No special requirement, just some love
> github.com/gentilkiwi/kek...
Thank you @elad_shamir (and @TheColonial) for evil 
ideas!
     Benjamin Delpy
@gentilkiwi
https://twitter.com/gentilkiwi/status/998219775485661184 
User Session
Local Security Authority
❶ Request AP-REQ for 
delegatable service
Unconstrained Delegation TGT Extraction
SPN: 
CIFS/KDC.REALM
InitializeSecurityContext
+ISC_REQ_DELEGATE
Session
Key
CIFS/KDC.REALM
TGS [Delegate: OK]
KEY: bob@REALM
User Session
❷ Authenticator is 
encrypted with session 
key and contains the 
delegation TGT
Local Security Authority
Unconstrained Delegation TGT Extraction
CIFS/KDC.REALM
TGS [Delegate: OK]
AP-REQ
CIFS/KDC.REALM
TGS
Session
Key
krbtgt/REALM
TGT
Authenticator
Session
Key
User Session
Local Security Authority
❸ Query ticket 
cache for session 
key, decrypt, and 
extract TGT
Unconstrained Delegation TGT Extraction
CIFS/KDC.REALM
TGS [Delegate: OK]
AP-REQ
CIFS/KDC.REALM
TGS
Session
Key
Authenticator
Timestamp
Session
Key
GSSChecksum
GSS_C_DELEG_FLAG
KRB_CRED
krbtgt/REALM
Checksum
LsaCallAuthPackage
Authenticator
What can you add to the PAC ?
PAC->LogonInfo
Domain SID
User ID
Group IDs
Extra SIDs
…
…
Resource Domain SID
Resource Group IDs
…
Any domain SID which is not local 
account domain.
Any domain RIDs
500   - REALM\Administrator
512   - REALM\Domain Administrator
1000+ - User and Computer Accounts
Most SIDs which are not the local 
account domain or NT AUTHORITY
Mandatory Integrity SID
Capability SIDs
Most SIDs which are not the local 
account domain or NT AUTHORITY
Demo Time
SeTokenCanImpersonate
Allowed
Restrict to 
Identiﬁcation
Token Level 
SessionId != Impersonation->SessionId &&
    Impersonation->SessionId == 0) {
    return STATUS_PRIVILEGE_NOT_HELD;
}
Hunting for Session Update Primitives
LsapBuildAndCreateToken
LsapSetSessionToken
LsapApplyLoopbackSessionId
LsapUpdateUserTokenSessionId
LsapFilterElevatedTokenFull
NtSetInformationToken(..., TokenSessionId, …)
LsapAuApiDispatchLogonUser
LsapCreateTokenEx
LsaISetSupplementalTokenInfo
Hunting for Session Update Primitives
LsapBuildAndCreateToken
LsapSetSessionToken
LsapApplyLoopbackSessionId
LsapUpdateUserTokenSessionId
LsapFilterElevatedTokenFull
NtSetInformationToken(..., TokenSessionId, …)
Requires TCB
Not useful
LsapAuApiDispatchLogonUser
LsapCreateTokenEx
LsaISetSupplementalTokenInfo
Hunting for Session Update Primitives
LsapBuildAndCreateToken
LsapSetSessionToken
LsapApplyLoopbackSessionId
LsapUpdateUserTokenSessionId
LsaISetSupplementalTokenInfo
LsapFilterElevatedTokenFull
NtSetInformationToken(..., TokenSessionId, …)
Deals with 
elevated + 
linked tokens
LsapAuApiDispatchLogonUser
LsapCreateTokenEx
Hunting for Session Update Primitives
LsapBuildAndCreateToken
LsapSetSessionToken
LsapApplyLoopbackSessionId
LsapUpdateUserTokenSessionId
LsaISetSupplementalTokenInfo
LsapFilterElevatedTokenFull
NtSetInformationToken(..., TokenSessionId, …)
???
LsapAuApiDispatchLogonUser
Accessible via 
AcceptSecurityContext
LsapCreateTokenEx
User Session X
Local Security Authority
❶ Call ISC and add entry to loopback 
tracking table with caller’s session id
LSA Loopback Library
InitializeSecurityContext