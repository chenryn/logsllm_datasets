一把梭
###  Virtual Love Revenge 2.0
打开虚拟机发现被加密，按道理来说硬盘也会被加密，但是没有，估计是伪加密一类的  
给了iso镜像文件，本地用这个镜像文件建一个虚拟机，硬盘大小设为20g  
通过对比自己本地的虚拟机vmdk和题目给的vmdk，发现了一些问题，并修复  
修复vmdk
修复其他s00x.vmdk文件，把本地的前面一部分直接复制粘贴过去，需要修复“22”前面的文件头
而后我们可以通过一个从给定的iso来加载新的虚拟磁盘。
加载后通过题目描述guest成员可以无密码登录。  
之后通过 cat ~/.bash_history 获取信息可以发现  
提示登录root用户。  
通过010editor 观察 发现。  
修复的vmdk 002中存在如下数据（已经修改）
这里的root密码可以被我们修改。
    python3 -c 'import crypt,getpass;pw=getpass.getpass();print(crypt.crypt(pw) if (pw==getpass.getpass("Confirm: ")) else exit())'
然后填入到数据里面（这里密码为root)  
就可以实现登录了
根据这里面的压缩包密码和提示即可解出flag。
###  shellgen2
​
感觉题目改了一次，waf拦截的变少了。需要用户构造一个python脚本来获取之前生成随机字符串，再生产php脚本输出一样的字符串，难点在waf限定了能用的字符和对脚本长度要求。
     if not phpshell.startswith(b'':
                return True
            else:
                print(chr(c), end='')
​ 故可利用php字符累加的特性获得所需要的字母。
​ 参考
​ 首先需要`a`，可利用`$_=[].[]`被转为`ArrayArray`的特性获取字母，如果是常用的`''.[]`会被waf。
方法一  
显示太长了
    def waf(phpshell):
        if not phpshell.startswith('
    """
    def genchar(c,i):
        t = ord(c)-ord('a')
        x = "${0}".format("_"*i)
        poc = x+"=$_;"
        if t>0:
            for i in range(t):
                poc+=x+"++;"
        else:
            for i in range(t):
                poc+=x+"--;"
        return poc
    def genstr(randomStr):
        poc = prefix
        for i in range(len(randomStr)):
            poc += genchar(c=randomStr[i],i=i+4)
        poc+="?>"
        for i in range(len(randomStr)):
            poc += ""
        poc+=">"
        return poc[:-1]
    print(genstr(input()))
方法二  
构造出所有字符的表示方法，因为waf规定只能由0和9，所以参数名字只能用`_09`实现。最后输出时使用段标签``
    target=input()
    st=""
    for c in target:
        st+=""
    print(st,end='')
## Re
###  ancient
  * （非常恶心的一道题，不知道预期解是什么方式，我是猜+爆破出来的，过两天看看别的队的师傅是咋搞的
####  分析
  * 在 IDA 中打开文件，无壳，但是字符串也都被加密过了
  * `main` 函数有一处花指令，patch 掉之后就能看伪代码了
  * 这里是输入之后的预判断，可知长度为 56，开头为 `d3ctf`  
  * 然后就是一路经过了几次拷贝，反正不太重要，跟一遍就能看懂，就是把输入串接到了程序一开始打印的提示后面，称这个变量为 `plaintext` 吧
  * 然后来到了关键的 `malloc` 处  
  * `malloc` 这里开辟了一个 `buffer`，接下来的两条指令初始化了一个加密时候会用到的东西，把它叫做 `context` 吧
  * 这里就是进行了加密  
  * 在加密函数里一定会来到这个 `else` 分支，里面的这个函数每次接收 `context` 和 `plaintext` 的一个字符，还有之前初始化的 `buffer`  
  * 动调可以发现， `buffer` 每次经过这个 `subEnc` 函数会多增加一个密文，但这也不完全是一个流密码，因为产生第 n 位密文的同时会影响之前的若干个（多数是 1 个密文）
  * 加密出来之后与在 `init` 阶段初始化的密文进行比较，相等的字符数量要 `>=178` 才行，把相等的字符数记为 `cmp`
  * 这个函数会导致程序卡死，里面全是花指令，把花指令全部 `patch` 掉之后分析，发现是在对之前比较的 `cmp` 进行反复的操作，似乎是奇数加一偶数减一，所以直接 `patch` 掉就行了  
  * 然后根据 `cmp` 是由大于 `178` 判断输入是否正确
####  解决
  * `subEnc` 看了老半天没看懂，懒得看了
  * 之后想的第一件事就是能不能用自动化分析工具进行一下黑盒测试，因为 178 减去程序之前输出的 `hint` 的长度基本等于输入字符串的长度，所以新增加一位正确的明文，有大概率会新产生一位正确的密文
  * 这里我选择用 `pin tools` 进行黑盒测试，主要的思路就是枚举所有的输入，然后让程序运行到 `0x401C87` 处。如下图所示，这地方会把 `cmp` 放到寄存器里，在这里插个桩然后让 `pin` 输出一下 `rdi` 的值就可以知道这时候产生了几位正确的密文了
  * 直接在最常用的 `inscount0` 里面魔改了  
  * 然后写个 Python 脚本爆破输入。
    from collections import defaultdict
    from subprocess import Popen, PIPE
    import string
    import threading
    import itertools
    charset = [‘_’]
    for i in string.ascii_uppercase:
    charset.append(i)
    for i in string.ascii_lowercase:
    charset.append(i)
    for i in range(10):
    charset.append(chr(ord('0')+i))
    class PinInsCountHandler:
    def init(self, target_p, pin_p: str = “./pin”, lib_path: str = “./obj-intel64/inscount0.so”) -> None:
    pin_path = pin_p
    target_path = target_p
    self.process = Popen(
    [pin_path, ‘-t’, lib_path, ‘—‘, target_path], stdin=PIPE, stdout=PIPE)
      def sendline(self, content):
          if type(content) == str:
              content = content.encode()
          content += b'\n'
          self.process.stdin.write(content)
      def recv(self):
          while True:
              content = self.process.communicate()[0].decode()
              if content:
                  return content
    def get_cmp(flag):
    pin = PinInsCountHandler(“./problem”)
    pin.sendline(flag)
    output = pin.recv()
    count = int(output.split(“Cmp: “)[1])
    return count
    def pad_flag(flag):
    prefix = ‘d3ctf{‘
    suffix = ‘}’
      pad_len = 56-len(prefix)-len(suffix)-len(flag)
      padded = prefix+flag+pad_len*'_'+suffix
      return padded
    get_cmp(pad_flag())
    limit = threading.Semaphore(value=6)
    class MyTh(threading.Thread):
    flag = ‘w0W_sEems_u_bRe4k_uP_tHe_H1DdeN_s7R’
      def __init__(self, sub_flag, result: dict) -> None:
          super().__init__()
          self.sub_flag = sub_flag
          self.result = result
      def run(self):
          try:
              self.run_my_code()
          finally:
              limit.release()
      def run_my_code(self):
          _flag = pad_flag(MyTh.flag+self.sub_flag)
          cmp = get_cmp(_flag)
          print(self.sub_flag, cmp)
          self.result[cmp].append(self.sub_flag)
    def multi_thread_bruteforce():
    result = defaultdict(list)
    ts = []
    for s in itertools.permutations(charset, 2):
    limit.acquire()
    tmp = ‘’.join(s)
    t = MyTh(tmp, result)
    ts.append(t)
    t.start()
    for t in ts:
    t.join()
    return result
    re = multi_thread_bruteforce()
    print(re)
这个脚本基本就相当于一个深度优先搜索吧，但是想了想，感觉剪枝不太好写，加之爆了几位发现 flag 是有字面意思的，所以就人工剪枝了（草  
说一下爆破的大致流程吧，最开始 flag 是 ”，此时爆前一位或前两位，发现 ‘w0’ 会让相等的密文数量增加，由此就可以确定前两位，然后接着把脚本里面的
flag 改成 ‘w0’，接着爆 3、4 位，可以猜 + 爆破出 ‘w0W_’，以此类推  
这里第一次用多线程 + pin
的方式做题，本来以为会非常快，但是创建子进程的开销还是太大了，所以在自己电脑上跑的贼慢，不过做题的时候居然也忍了，最后做的差不多了才想起来可以租 vps
，在腾讯云租了个 64 核的 vps 之后试了试发现快的一批，早这样的话估计能留出时间再做道逆向的 qaq  
反复运行上面这个脚本，最后就把整个 `flag` 爆出来了  
flag: d3ctf{w0W_sEems_u_bRe4k_uP_tHe_H1DdeN_s7R_By_Ae1tH_c0De}
### No Name
实际逻辑存在于data.enc中，进行解密后释放到jar，然后动态加载为虚拟机字节码进行执行  
加载完之后还会立即删除data.jar  
由于开启了保护，无法进行hook获得实际解密密钥，使用apktool解包重打包  
删除掉NoNmae smail中的delet语句，重新打包，autosign签名  
，签名之后直接安装  
打开应用后在/data/data/com.d3ctf.noname目录下找到data.jar  
查看逻辑是一个简单的异或，异或回去即可
    #include 
    int main()
    {
        int i=0;
        int test[]={49, 102, 54, 33, 51, 46, 0x60, 52, 109, 97, 102, 52, 97, 55, 55, 97, 52, 0x60, 0x60, 109, 51, 101, 103, 101, 100, 98, 109, 103, 109, 54, 97, 55, 52, 98, 97, 98, 0x60, 99, 40};
        for(i=0;i
    int main()
    {
        int i=0;
        unsigned char ida_chars[] =
        {
            0x09, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x06, 0x00, 
            0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x5B, 0x00, 0x00, 0x00, 
            0x0A, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x05, 0x00, 
            0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 
            0x56, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x0B, 0x00, 