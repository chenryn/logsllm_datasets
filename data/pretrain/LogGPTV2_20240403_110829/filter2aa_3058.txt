# Demorpheus: Eliminating Polymorphic Shellcodes in Your Network

**Authors:**
- Svetlana Gaivoronski, PhD Student, Moscow State University
- Dennis Gamayunov, Senior Researcher, Moscow State University

## Introduction
Memory corruption, zero-day vulnerabilities, and shellcodes are still significant concerns in cybersecurity. While some may argue that shellcodes are an outdated exploitation technique, the reality is that they remain a potent threat.

### Arguments Against Caring About Shellcodes (2012)
- **Outdated Technique:** Some believe that shellcodes are too old for the modern Web 2.0 and cloud-centric world.
- **User Unawareness:** According to Microsoftâ€™s 2011 statistics, user unawareness is the primary reason for malware propagation, with zero-day vulnerabilities accounting for less than 1% of cases.
- **Endpoint Security:** Existing endpoint security products handle known malware effectively, raising questions about the need to focus on unknown threats.

### Arguments For Caring About Shellcodes
- **Persistent Threat:** Memory corruption remains a prevalent issue.
- **Excitement Over MS12-020:** The release of MS12-020 highlights ongoing vulnerabilities.
- **Widespread Use of Tools:** Tools like Metasploit are widely used by both penetration testers and malicious actors.
- **Critical Infrastructure Attacks:** Early detection of targeted attacks on critical infrastructure is crucial.
- **Signature-Based Limitations:** Endpoint security is primarily signature-based, making it ineffective against zero-day exploits.
- **Research and Fun:** Exploring shellcode detection can be both challenging and enjoyable.

## CTF Madness
In Capture the Flag (CTF) competitions:
- Teams write zero-day exploits from scratch.
- Game traffic is filled with exploits.
- Detecting shellcodes can provide valuable insights into vulnerabilities and exploitation methods.

## Privacy and Trust in the Digital Era
We increasingly share sensitive information through digital devices and the internet, including:
- Bank accounts
- Health records
- Personal information

Recent privacy issues include:
- LinkedIn password hash leaks
- Foursquare vulnerabilities

Despite efforts to improve code quality, the number of vulnerability disclosures continues to rise. The competitive nature of the software market often prioritizes speed over security, leading to more vulnerabilities.

## Shellcode Detection Methods
### Static Analysis
- **Signature Matching**
- **Content-Dependent Analysis**
- **Behavioral Analysis (e.g., Hamsa, Polygraph)**
- **Control Flow Graph (CFG) and Information Flow Graph (IFG) Analysis (e.g., SigFree)**
- **NOP-sled Detection (e.g., RaceWalk)**
- **Automata Analysis (e.g., IGPSA)**

### Dynamic Analysis
- **Emulation (e.g., [6], [7])**
- **Abstract Payload Execution (APE) [5]**

### Hybrid Analysis
- **Combination of Static and Dynamic Techniques (e.g., PonyUnpack [10])**

### Challenges
- **Performance:** Running all methods on each data portion is extremely slow.
- **False Positives (FP) and False Negatives (FN):** Low-complexity methods have high FP rates, while low-FP methods have high computational complexity.
- **New Exploits:** None of these methods are fully effective in real-time network channels.

## Feasibility of Shellcode Detection
Shellcodes have specific limitations in size and structure, making them detectable. They typically consist of:
- **Activator**
- **Decryptor**
- **Payload**
- **Return Address (RA)**

## Proposed Approach
Given a set of shellcode detection algorithms, we aim to construct an optimal data flow graph that:
- Minimizes execution time and false positive rate.
- Ensures the false negative rate does not exceed a given threshold.

### Shellcode Features
- **Generic Features:** Correct disassembly, NOP-sleds, push-call patterns, etc.
- **Specific Features:** Conditional jumps, payload size, return address range, self-modifying instructions, etc.

### Shellcode Classes
Shellcode space \( S \) is divided into \( K \) classes based on identified features. Each class has unique and common features.

### Example Shellcode Classes
- **KNNN3:** Contains multi-byte NOP-equivalent sleds.
- **KSC:** Self-ciphered shellcodes.

### Demorpheus: Shellcode Detection Library and Tool
- **Disassembling**
- **Reconstruction of CFG and IFG**
- **Feature Detection**
- **Hybrid Shellcode Detector**

### Topology Examples
- **Linear Topology:** Minimizes false positives but has no flow reduction.
- **Hybrid Topology:** Balances false positives and false negatives with flow reduction.

### Experimental Results
- **Exploits:** FN = 0.2%, FP = n/a, Throughput = 0.069 Mb/sec (linear), 0.11 Mb/sec (hybrid).
- **Benign Binaries:** FN = n/a, FP = 0.0064%, Throughput = 0.15 Mb/sec (linear), 0.019 Mb/sec (hybrid).
- **Random Data:** FN = n/a, FP = 0%, Throughput = 0.11 Mb/sec (linear), 3.7 Mb/sec (hybrid).
- **Multimedia:** FN = n/a, FP = 0.005%, Throughput = 0.08 Mb/sec (linear), 0.04 Mb/sec (hybrid).

### Use Cases
- **Zero-Day Exploit Detection and Filtering at Network Level**
- **CTF Participation:** Enhancing team defense and gathering ideas from other teams.

### Conclusion
- **Good News:** Shellcodes can now be detected up to 45 times faster.
- **Download Source Code:** Available at [Demorpheus GitHub](PI:EMAIL:demorpheus/demorpheus.git)

### Authors' Contact Information
- **Svetlana Gaivoronski:**
  - Email: PI:EMAIL
  - Skype: svetik.sh
  - GPG Key: 0x38428E3B 16A2 2F9D 5930 7885 F9E5 9DA5 09ED D515 3842 8E3B
- **Dennis Gamayunov:**
  - Email: PI:EMAIL
  - Skype: jama.dharma
  - GPG Key: 0xA642FA98 14E1 C637 4AEC BF0D 0572 D041 0622 7663 A642 FA98

### References
- [References listed as provided in the original text]

This optimized version aims to provide a clear, coherent, and professional presentation of the research and findings.