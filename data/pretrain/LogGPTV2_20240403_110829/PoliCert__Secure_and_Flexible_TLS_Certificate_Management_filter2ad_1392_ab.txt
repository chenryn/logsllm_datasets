common practice today [21]. CIRT also cannot handle key loss or
compromise; in this event, the only way to recover is to resolve the
issue with CAs and logs out of band.
Attack Resilient Public-key Infrastructure (ARPKI) [4] is a
system inspired by AKI, which redesigns and improves many as-
pects of AKI. ARPKI introduces framework for accountability, val-
idation, and consistency checking of public logs. It provides strong
security guarantees by offering security against an adversary ca-
pable of capturing n − 1 trusted parties at the same time (where
n ≥ 3 is a system parameter). It also relaxes AKI’s synchronization
requirement by proposing an accountable synchronization scheme
with a quorum of logs involved.The main contribution of that work
is that the claimed security properties of ARPKI were formally ver-
iﬁed. PoliCert builds on top of ARPKI and extends it with the ap-
proaches we describe in this paper.
3.3 Summary of Remaining Challenges
We brieﬂy summarize several challenges that remain despite the
previous work. Motivated in part by their shortcomings and by
other problems of the existing TLS infrastructure, we identify sev-
eral important facets of the certiﬁcate policy problem that our work
addresses.
A core challenge motivated by the previously mentioned schemes
is how to overcome the inefﬁciency of certiﬁcate management or
validation operations.
In particular, logs need to be able to pro-
vide efﬁcient proofs of both a certiﬁcate’s presence and absence in
the log’s database. Additionally, every certiﬁcate registration and
update should not require inefﬁcient operations such as the global
synchronization of logs, nor should they limit domains to a single
certiﬁcate.
Another challenge is to incorporate certiﬁcate policies into the
TLS infrastructure without inhibiting the existing system. Certiﬁ-
cate policies allow domains to specify parameters or constraints
for their certiﬁcates. While AKI and ARPKI maintain policy infor-
mation such as trusted CAs and logs, this information is embedded
into a domain’s certiﬁcate and thus must be re-registered with every
certiﬁcate update. Additionally, each domain is limited to a single
certiﬁcate in order to avoid multiple conﬂicting policies. We make
an important observation about certiﬁcates and policies: while cer-
tiﬁcates may be updated frequently, the policy behind these cer-
tiﬁcates is only infrequently updated. Therefore, the problem of
optimizing a new certiﬁcate infrastructure to this observation is a
central challenge in our work.
We also address the challenge of providing expressive policy
control to domains, and explore how this challenge relates to other
problems. For example, the current TLS warning model in web
browsers is ineffective due to users and browser vendors who de-
cide how a given error should be handled. [2, 14] Users (most of
whom are not security-conscious) want to visit their desired web-
site, and often do so despite browser warnings. Browser vendors
do not want to lose users and determine how TLS errors should
be handled, resulting in a “mass-effect” treatment of domain secu-
rity. As a consequence, both parties have an incentive to avoid hard
failure, which is the only effective protection during an actual at-
tack. Hence, we argue that the domain should inﬂuence the error
handling process, and we address the challenge of how to provide
expressive control to domains.
4. PoliCert OVERVIEW
We provide a high-level overview of the PoliCert infrastructure.
We begin by discussing the overarching design principles of Po-
liCert, and then discuss the salient features of multi-signature cer-
tiﬁcates, subject certiﬁcate policies, and log servers.
4.1 Main Design Principles
Our approach is centered around three main design principles
that aim to address the shortcomings of §3.3.
Domain-controlled certiﬁcate policy. The primary objective
of SCPs is to provide domain owners with greater control over
their certiﬁcate policy. Speciﬁcally, domain owners can specify
ﬁne-grained policies governing the usage of certiﬁcates issued to
them. Additionally, these policies can extend to govern certiﬁcate
usage in subdomains, allowing for example the owner of a.com to
constrain certiﬁcates for b.a.com or *.a.com. Additionally, the
framework for these policies is easily extensible to allow for even
more ﬁne-grained certiﬁcate policy control in the future.
Separation of certiﬁcates and policies. The deﬁning feature of
our proposal is that we separate the keys for policies governing a
domain’s certiﬁcates from the keys for the certiﬁcates themselves.
We observe that certiﬁcates are issued, updated, and revoked more
frequently than policies. Because the keys in certiﬁcates are used
much more frequently (with each TLS setup) and are critical to
establishing a TLS connection, they are more likely to be compro-
mised. By separating these keys, we can protect the key used for
a domain’s certiﬁcate policy, which provides control over all of a
domain’s certiﬁcates.
One policy, multiple certiﬁcates. We observe that while a do-
main may have multiple certiﬁcates, it has one certiﬁcate policy
that remains consistent. Because we separate policies and certiﬁ-
cates as described above, we can leverage globally synchronised
logging scheme to monitor SCPs since domains only have a single
SCP. On the other hand, because MSCs change more frequently,
we avoid such a scheme for MSCs, monitoring them at selected
logs speciﬁed by the domain’s SCP. Logging MSCs in this way al-
lows us to register and revoke MSCs efﬁciently without hindrance
from global log synchronisation.
CA 1
. . .
CA n
Certi!cate Issuance
and Registration
Domain
Log Server
MSC Proof, SCP Proof
Log
Audit
TLS
Handshake
MSC,
MSC Proof
SCP Proof
Update
Request
New Entries
Client
Browser
Root Hash Correct?
Yes/No
Auditor
Certi!cate
Validation
Figure 2: Overview of the MSC registration and validation pro-
cess. Only a single log server and auditor are shown.
4.2 Overview
The main insight of our work is embodied in subject certiﬁcate
policies (SCPs), which bind a policy key pair (i.e., a policy pub-
lic key and a policy private key) to parameters governing and pro-
tecting the usage of a domain’s certiﬁcates.
In particular, SCPs
provide information such as CAs authorized to sign certiﬁcates for
a domain, minimum security levels for TLS parameters, and how
certain TLS handshake errors should be handled, as well as which
of these requirements also must be respected by certiﬁcates issued
to subdomains. SCPs are themselves certiﬁcates, allowing us to
leverage their signature and validation mechanisms and to provide
resilience against compromised CAs.
We also extend the current X.509 format and propose multi-
signature certiﬁcates (MSCs), which allow multiple CA signatures
to authenticate a single public key. A valid MSC requires only a
certain threshold of the signatures to be valid, providing some re-
silience against CA compromise. We encode MSCs as a series of
X.509 certiﬁcates for interoperability with today’s TLS PKI.
An overview of the PoliCert infrastructure is shown in Figure 2.
There are ﬁve main parties in PoliCert:
1. The Client wants to establish a secure connection to various
sites in the Internet. The client browser is designed by a browser
vendor, who determines among other things the behavior of the
browser in case of errors during the TLS handshake.
2. A Domain is a site to which the client wishes to connect. The
domain creates one or more keypairs and public key certiﬁcates,
which are signed and presented to the client during TLS hand-
shakes.
3. A Certiﬁcate Authority (CA) signs domains’ public-key cer-
tiﬁcates with their own private keys. Root CAs have their public
keys included in client browsers, while intermediate CAs are
certiﬁed by other CAs.
4. A Log Server maintains a Merkle hash tree-based database of
domains’ certiﬁcates and policies. Log servers generate crypto-
graphic proofs of a certiﬁcate’s validity and periodically provide
these proofs to domains. As with root CAs, log servers do not
present certiﬁcates to clients, but rather have their public keys
included in browsers.
5. An Auditor periodically fetches a log’s database to verify that
all of the information is correct. It also allows clients to verify
the correctness of proofs from log servers.
As Figure 2 shows, all actions and messages in PoliCert fall into
one of three categories. In the ﬁrst category, certiﬁcate issuance
and revocation, the domain begins by creating a policy keypair and
obtaining CA signatures on these to create a subject certiﬁcate pol-
icy. The domain registers this policy at its trusted log servers. Sim-
ilarly, the domain creates a keypair for its certiﬁcate and obtains
signatures from a set of CAs (which can be different from those
that signed the domain’s SCP) to create a multi-signature certiﬁ-
cate and registers it at the log servers. The logs return a signed
receipt of these registrations, which contains a time after which the
domain’s certiﬁcate and policy are guaranteed to be in the log.
In the log audit category, auditors periodically query the log
servers for newly registered or updated entries. The log servers
provide these entries and their corresponding proofs, allowing the
auditors to verify these proofs. The logs also provide a signed copy
of the root hash to the auditors, which can be used to corroborate
a client’s calculated root hash. For efﬁciency, the auditor can also
sign the root hash that it has computed and provide this to domains,
who can then staple this root hash to its certiﬁcate and proofs.
The ﬁnal category is certiﬁcate validation, in which a client ini-
tiates a TLS handshake with the server and receives its certiﬁcate,
policy, log proofs, and (if included) auditor-computed root hashes.
To validate a certiﬁcate, a client’s browser must verify several crite-
ria: 1. validity of the CA signature(s) on the certiﬁcate, 2. presence
of the certiﬁcate in the logs’ databases, 3. absence of the certiﬁ-
cate’s revocation, 4. compliance of the certiﬁcate with all applica-
ble policies, and 5. presence of these policies in the logs’ databases.
Because the domain has a signed MSC and corresponding log
proof attesting to its current and valid status, it can prove to the
client that its certiﬁcate meets the ﬁrst three criteria. The domain
may or may not specify any parameters in its own SCP, but will
have a proof for the SCP which by design contains all applicable
policies for the MSC and proves that these policies are registered
and current in the log (described in §5.3). With this proof the do-
main can prove to the client that its certiﬁcate meets criteria 4 and 5.
The client then veriﬁes these proofs by computing the root hash
for each of the proofs it has received. If the client did not receive
a root hash from the auditor along with the server’s information, it
can contact one or more auditors to corroborate the root hashes it
has computed. If the auditor has the same root hash that the client
has computed, then the proofs are considered valid.
5. THE PoliCert ARCHITECTURE
To explain the details of SCPs, we ﬁrst provide an in-depth treat-
ment of MSCs (§5.1). We then describe the parameters and format
of SCPs (§5.2). Finally, we explain the structure of log proofs (§5.3)
and the beneﬁts of structuring proofs in this way.
5.1 Multi-Signature Certiﬁcates
Multi-signature certiﬁcates (MSCs) authenticate a subject’s pub-
lic key using multiple CA signatures. For backwards compatibility
with current PKI standards we encode an MSC as a series of stan-
dard X.509 certiﬁcates1 authenticating a common public key. Thus
with n ≥ 1 CA signatures, we deﬁne an MSC as follows:
A ,CertPA
MSCA = {CertCA1
A },
(1)
,CertCA2
, ...,CertCAn
A
A
where CertCAi
is an X.509 v3 certiﬁcate authenticating A’s public
key and signed by CAi, and CertPA
A is a policy binding signed by
A’s policy private key. The same private key cannot be used to sign
A
1An alternative approach for MSC implementation could be dedi-
cated extension of X.509 v3, that allows to authenticate the public
key by multiple CA signatures.
multiple certiﬁcates within an MSC (i.e. MSC is signed by distinct
CAs).
Every X.509 certiﬁcate within an MSC is obtained by the domain
in the same way that they are today, with the exception of the policy
binding. The policy binding is signed by a private key controlled
by A itself, and contains the current version number of A’s SCP and
a ﬁeld CERTS in an X.509 extension, which lists the hashes of all
non-policy bindings within the MSC. This ﬁeld allows the domain
owner to change the certiﬁcates within an MSC, and because the
policy binding can be generated by A independently of any CAs,
these changes can be made quickly.
In order for an MSC to be considered valid, some threshold num-
ber (deﬁned in §5.2 by CERT_TH) of its certiﬁcates must be valid
(e.g., not expired and with a valid signature). An MSC with one
certiﬁcate and a threshold of 1 is equivalent to a regular X.509 cer-
tiﬁcate today, but contains a policy binding as well. Multi-signature
certiﬁcates can be revoked by a set of CAs or by the domain itself.
A CA can only revoke certiﬁcates that it has issued, meaning that an
MSC is only revoked as a whole by CAs if enough CAs revoke cer-
tiﬁcates within the MSC so that it no longer has a threshold number
of valid CA signatures.
5.2 Subject Certiﬁcate Policies
Subject certiﬁcate policies (SCPs) describe parameters regarding
the usage and validation of a domain’s MSCs. These parameters
are bound to the subject’s identity as well as to the policy public
key. The policy private key is used to sign the policy binding of a
domain’s MSC, as well as to authorize certiﬁcate revocations and
policy updates. Because the parameters in an SCP are bound to a
domain’s identity and policy keypair, we encode an SCP as an MSC
in which each X.509 certiﬁcate authenticates the policy public key
and lists the policy’s parameters in an X.509 v3 extension [9]. An
SCP must also be signed by a threshold number of CAs to be con-
sidered valid.
SCPs do not require a policy binding as other MSCs do, since
the public key and parameters of the domain’s policy are encoded in
each of the SCP’s X.509 certiﬁcates. Like any other MSC, however,
an SCP must be signed by one or more CAs and registered at the
log servers to be considered valid. Since domains are expected
to only infrequently change their policy, SCPs are assumed to be
stable (barring catastrophic events such as a weakness in a widely-
used encryption scheme). Therefore, we require that SCPs be valid
during an extended time period (e.g., ﬁve years).
All ﬁelds in an SCP are optional, except for the policy version.
Browser vendors set default values for each ﬁeld so that if a ﬁeld is
not speciﬁed by any applicable policy for a domain, that ﬁeld takes
the default value provided by the browser. A subject certiﬁcate
policy contains the following ﬁelds:
1. General parameters
POLICY_VERSION: the version number of the current policy.
LOG_LIST: the domain’s trusted logs, at which its certiﬁcates, revoca-
tions, and policies are registered. If blank, all logs are considered
trusted.
LOG_TIMEOUT: how long proofs from the above logs are considered
valid.
CA_LIST: CAs authorised to sign the domain’s certiﬁcates and policies.
If blank, all CAs are considered trusted.
CERT_TH: the minimum number of CA signatures that must be valid
on a MSC, excluding the signature by the domain’s policy pri-
vate key. This parameter must be positive and cannot exceed the
number of CAs in CA_LIST (if the ﬁeld is not blank).
REV_KEY: ﬂag which allows domain to revoke any of its MSCs using
the private key connected with the domain’s policy.
2. Additional parameters of standard certiﬁcates
EV_ONLY: ﬂag specifying that only extended validation (EV) certiﬁ-
cates are valid in an MSC.
MAX_PATH_LEN: maximum length of a certiﬁcate chain.
WILDCARD_FORBIDDEN: forbids wildcard certiﬁcates [9].
MAX_LIFETIME: the maximum duration of a certiﬁcate’s validity.
3. Security parameters
rCT
H1234
H5678
H12
H34
H56
H78
H1
H2
H3
H4
H5
H6
H7
H8
00e..
2a9..
471..