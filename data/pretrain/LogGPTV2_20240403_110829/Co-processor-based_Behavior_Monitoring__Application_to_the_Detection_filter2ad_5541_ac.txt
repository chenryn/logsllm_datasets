The instrumentation step of our implementation that modifies the
SMM code is twofold: (1) an instrumentation to send CFI related
information; and (2) an instrumentation to send information re-
garding x86 specific variables.
As previously stated, the goal of the instrumentation is to send
information to the monitor. In comparison to other approaches
where they inline some verifications in the instrumented code, we
only use mov instructions to send packets to our FIFO.
5.4.1 CFI. We rely on LLVM 3.9 [46], a compilation framework
widely used in the industry and the research community, to in-
strument the SMM code. We implement two LLVM passes with
approximately 600 lines of C++ code.
The first pass enforces the backward-edge CFI (i.e., a shadow
call stack). It instruments the SMM code to send one message at
the prologue and epilogue of each function. Such message contains
the return address stored on the stack.
404The second pass enforces forward-edge CFI (i.e., indirect calls
always branch to valid targets). For each indirect call site, we assign
a unique identifier (CSID), we create a mapping between their CSID
and the type signature of the function called, and we add this type
into a set of types called indirectly (SIND). We instrument each
indirect call site to send the CSID and the branch target address to
the monitor before executing the indirect call.
Then, for each function whose type signature is in SIND, we add
a mapping between the function offset in memory and its type. This
mapping gives us all the functions that could be called indirectly
with their type signature and offset in memory.
Message
Message
Call Site ID
Target Address 0x0fffb804
1561
(M1)
(M2)
Call Site ID
1561
4852
...
Type
i8(i32)
i32(i8)
...
equals?
Function Address Type
i8(i32)
i32()
...
0x0fffb804
0x0befca04
...
Figure 3: Mappings used to verify indirect calls messages
At the end of the build process, we provide two pieces of in-
formation: (1) a mapping between a CSID and a type; and (2) a
mapping between an offset and the type of the function at that
location. However, such information is not enough for the monitor
to have the mapping at runtime. It only has the functions offset
and not their final address in memory, hence the monitor needs
the base address of the code used for the SMM. We provide this
information to the monitor by instrumenting the firmware code to
send the address during the initialization phase (before the SMRAM
is locked). This way, at boot time, the monitor computes the final
mapping by adding the offset to the corresponding base address.
Finally, as illustrated in Figure 3, the monitor can compute two
mappings: (M1) a mapping between a CSID and its expected type;
and (M2) a mapping between the address of a function and its type.
Thanks to this information, the monitor can verify that the target
address received in a message has the expected type according to
the call site ID from the same message. The attacker can control
the target address, but not the call site ID.
5.4.2 CPU registers integrity. We also instrument the SMM code
to send some values related to x86 CPU registers. These values,
such as SMBASE or the saved value of CR3, could be modified by
an attacker to take control of the SMM or evade detection.
First, we add some code executed at boot time to send the current
values to the monitor. Since there is no legitimate modification of
these values at runtime, the monitor registers them. Secondly, we
add some code executed at runtime to send the values at the end of
each SMI.
6 EVALUATION
We evaluated our approach on two real-world implementations of
code running in SMM. We first conducted a security evaluation of
our approach using QEMU, as described in ยง 6.2. Then, we used the
gem5 simulator to evaluate the runtime overhead of our approach,
as detailed in ยง 6.3.
We used a simulation-based prototype in order to have enough
flexibility in exploring the hardware architecture, in a manner that
would have been difficult to achieve using real hardware, such
as FPGA-based solutions.2 A simulation allows us to simulate an
interconnect and to simulate the delay it takes for the main CPU to
send one packet to the restricted FIFO.
6.1 Experimental setup
We used EDK II [70] and coreboot [21], two real-world implemen-
tations of code running in SMM. EDK II is an open source UEFI
compliant firmware used as the foundation for most vendor-based
firmware. Coreboot is an open source firmware performing hard-
ware initialization before executing a payload (e.g., legacy BIOS or
UEFI compliant firmware). We built this firmware using our LLVM
toolchain and we only instrumented the SMM related code.
6.1.1
Simulator and emulator. We both used a simulator and an
emulator to validate our approach. The main goal of emulators is to
be as feature-compatible as possible. However, they are not cycle-
accurate and does not try to model accurately the performance
of x86 or ARM platforms. Simulators, on the other hand, try to
model accurately the performance of the platforms they simulate,
but often do not implement all their features (e.g., no possibility to
lock the SMRAM). Therefore, we use emulators to have all the SMM
features, which is mandatory for security evaluation, and simulators
to model accurately the performance of our implementation.
For the security evaluation, we used the QEMU 2.5.1 [9] emulator.
We modified QEMU to emulate our communication channel.
We used the gem5 [10] cycle-accurate simulator to estimate the
performance impact both on the main CPU by modeling an x86
system, and on the co-processor by modeling an ARM Cortex A5.
Butko et al. [15] evaluated that gem5 gave a performance prediction
with a 20% error on average.
We modified gem5 to simulate our FIFO communication channel.
It allowed us to specify the delay (in nanoseconds) it takes to send
or receive information from it. We give the parameters used for
gem5 in Appendix A.
6.1.2
Simulated communication channel delay. We relied on pre-
vious studies on interconnects [18, 53] to estimate the delay of the
communication channel.
Litz et al. [53] encountered a latency between 36 to 64 cycles to
send one packet with HyperTransport on a CPU-FPGA platform.3
Even with a small clock rate, for example 500 MHz, we can expect a
latency of around 72 to 128 ns, close to an uncached memory access.
Choi et al. [18] have similar results with QPI-based platforms.4
Hence, we simulated a delay of 128 ns to send one packet. This
corresponds to the worst-case scenario to send one packet. Since
the reference latency we have for AMD HyperTransport and Intel
2 At the time of writing, to the best of our knowledge, there is no off-the-shelf
FPGA-based solutions with direct access to HyperTransport or Intel QPI commer-
cially available.
3Litz et al. [53] designed an FPGA card with the HTX3 interface, which is needed for
point-to-point communication with HyperTransport. Xilinx used to sell such products
but they are now discontinued.
4Choi et al. [18] had access to a QPI-based CPU-FPGA platform thanks to a collabora-
tion between Intel and academics at that time.
405QPI are for FPGA prototypes, lower latencies are expected with an
ASIC implementation.
Furthermore, since we use a point-to-point connection, we did
not consider a fluctuation of the latency. Moreover, as explained
in ยง 5.3.2, only one core of the main CPU is running while in SMM.
Finally, we simulate the same interconnect and delay between
the main CPU and the FIFO, and between the co-processor and the
FIFO.5
Vulnerability
Security Advisories Detected
Attack Target
Buffer Overflow Return address
CVE-2013-3582 [22]
Arbitrary write Function pointer CVE-2016-8103 [23]
Arbitrary write SMBASE
Insecure call
Table 1: Effectiveness of our approach against state-of-the-
art attacks
LEN-4710 [50]
Function pointer LEN-8324 [51]
Yes
Yes
Yes
Yes
6.1.3
SMI handlers. For our performance evaluation, we used
SMI handlers from EDK II and coreboot. EDK II does not implement
any hardware initialization nor vendor-related SMI handlers. At
the time of writing, most of SMI handlers available in EDK II at
runtime are dependent on hardware components that cannot be
easily simulated (e.g., an Opal device or a TPM chip).
In our evaluation, we used the VariableSmm SMI handlers from
EDK II. They manage variables within the SMM [77] thanks to four
different handlers: GetVariable, SetVariable, QueryVariableInfo and
GetNextVariableName (GNVN).
Since coreboot provides hardware initialization and vendor-
related SMI handlers, we use them for our evaluation. In addition,
these handlers communicate with devices, which can be simulated
with gem5. A majority of these handlers are simpler compared
to the VariableSmm SMI handlers. We used three SMI handlers
for the Intel ICH4 i82801gx6 and two for the AMD Agesa Hudson
southbridge.7 These SMI handlers process hardware events such as
pressing the power button (PM1), General Purpose Events (GPE),
Advanced Power Management Control (APMC) events, or Total
Cost of Ownership (TCO) events.
6.2 Security evaluation
There is no public dataset of vulnerable SMM code, in contrast to
userland applications. Attacks targeting the SMM are highly specific
to the architecture and to the proprietary code of the platform. Such
code is therefore not publicly available and would not execute on
our experimental setup, thus cannot be used to test our solution.
Consequently, we have implemented SMI handlers with vulner-
abilities similar to previously disclosed ones (see ยง 3.2) affecting
real-world firmware. We reproduced attacks exploiting the follow-
ing vulnerabilities giving arbitrary execution: (1) A buffer overflow
in a SMI handler allowing an attacker to modify the return address
stored on the stack [44]; (2) An arbitrary write allowing an attacker
to modify a function pointer used in an indirect call [60]; (3) An ar-
bitrary write allowing an attacker to modify the SMBASE [65]; and
(4) An insecure indirect call where the function pointer is retrieved
from a data structure controlled by the attacker [61].
As shown in Table 1, the monitor detected all these attacks
as soon as it received and processed the messages, since these
attacks modify the control-flow of the SMM code (i.e., its behavior).
We did not encounter false positives, which is expected since we
use a conservative strategy regarding indirect calls. Also, while
bad software engineering practices using function type cast could
5In practice, one would need to use a similar interconnect or a glue logic for the ARM
architecture.
6E.g., present on motherboards from Apple, ASUS, GIGABYTE, Intel or Lenovo.
7E.g., present on motherboards from AMD, ASUS, HP, Lenovo or MSI.
introduce false positives, we did not encounter such case in the
code we evaluated, as no function cast was present.
While our implementation detects these intrusions, an attacker
could theoretically bypass our solution. First, by managing to send
multiple forged packets without any other legitimate packets being
sent in the middle. Second, doing so without redirecting the control-
flow to send these forged packets (an attack out of our threat model,
see ยง 4).
Finally, our CFI implementation performs a sound analysis to re-
cover the potential targets of an indirect call. Therefore, the analysis
is not complete and it would be possible for an attacker to redirect
the control flow to a function that should have never been called,
but that has the expected type signature. Nonetheless, we argue
that a type-based CFI increases the difficulty for the attacker, since
the only available targets for an indirect call are a subset of the
existing functions within the SMRAM with the right type signature.
Our analysis with EDK II gave 158 equivalence classes of size 1, 24
of size 2, 42 of size 3, 2 of size 5, 1 of size 9, and 1 of size 13. As
mentioned by Burow et al. [14], a high number of small equivalence
classes provides a precise CFG. A way to improve the precision of
the CFG would be to combine our static analysis (providing some
context-sensitivity with the type information), with a points-to
analysis, such as the work from Lattner et al. [47]. Such points-to
analysis can sometimes give the complete set of the functions being
called at an indirect call site. An idea would be that if the points-to
analysis gives a complete set, the monitor uses this information to
validate an indirect call, otherwise it uses the over-approximation
of the type signature.
6.3 Performance evaluation
As explained in ยง 5.3.1, the time spent in SMM is limited (threshold
of 150 ยตs) [26, 40]. On that account, we evaluated the running time
overhead of our solution on SMI handlers for the main CPU. We
also evaluated the time it takes for the co-processor to process the
messages sent by different SMI handlers. Thus, we can estimate the
time between an intrusion, its detection, and remediation.
Finally, the size of firmware code is limited by the amount of flash
(e.g., 8MB or 16MB). Thus, we evaluated the size of the firmware
before and after our instrumentation.
6.3.1 Runtime overhead. The additional SMM code added with
our instrumentation introduces two costs: the raw communication
delay between the main CPU and the hardware FIFO; and the
instrumentation overhead. The former is related to the time it takes
the main CPU to push the packets to the FIFO. The latter is due to
multiple factors, such as fetching and executing new instructions
406or storing intermediate values resulting in register spilling (e.g., the
return address of a function fetched from the stack).
We performed 100 executions of each SMI handler we selected
for our evaluation (see ยง 6.1.3). For each SMI handler, we measured
the time it takes for the original handler to execute, the cost of the
communication, and the additional instrumentation overhead. The
results we obtained are illustrated by Figure 4.
We see that even with a low latency of 128 ns there is a high
overhead. It is due to the number of messages related to the shadow
stack (see Table 2), while the number of messages for indirect calls
or the integrity of the relevant CPU registers (SMBASE and CR3)
are negligible. However, this overhead is below the 150 ยตs thresh-
old [40] ensuring that the impact on the performance of the system
is low and not noticeable for the user.
Number of packets sent
Shadow
stack
(SS)
SMBASE
& CR3
(SC)
Indirect
call
(IC)
Total
number of
packets
7 RELATED WORK
to be taken immediately. This remediation would not prevent the
intrusion, but will recover to a safe state.
6.3.3
Firmware size. For EDK II, our instrumentation added
17408 bytes to the firmware code. However, firmware is compressed
before being stored in the flash and only a subset of the firmware
is related to the SMM. We measured a 0.6% increase in size of
the compressed firmware. Thus, our instrumentation incurs an
acceptable overhead in terms of size for the firmware.
For coreboot, our instrumentation added 568 bytes for the AMD
Agesa Hudson SMI handlers and 3448 bytes for the Intel i82801gx
SMI handlers. However, we were not able to measure the whole
firmware size when building coreboot with our LLVM toolchain,
since coreboot does not support clang as a compiler.8 We built sepa-
rately the SMI handlers from coreboot toolchain for our evaluation,
but compiling the whole firmware (not just the SMM related code)
is not possible.
Approach
h
c
a
o
r
p
p
a
r
u
O
]
3
6
[
t
o
l
i
p
o
C