□
6 PERFORMANCE COMPARISON
We first give a list of notations needed in this section for our
comparison analysis in Table 3.
6.1 Comparison between HVE Schemes
The performance of the proposed HXT protocol depends on the
parameters of the underlying employed HVE scheme. Hence, we
first give the comparison between the available HVE schemes and
our SHVE scheme in terms of their performance parameters. After
showing the performance advantage of proposed SHVE, we carry
3Note that the assumption can be relaxed by taking into account the indices introduced
due to the false positive.
Table 4: Different HVE schemes and their properties.
Ref.
|G|
p1p2
Ciphertext Size
(2m + 1)G + (1)GT
BW [6]
KSW [27] p1p2p3 2(2m + 1)G + (1)GT
OT [32]
IP [24]
SHVE
p1
p1
N/A
(m)λ
Enc. Cost
Key Size
(2m + 1)G (6m + 2)m + (8m + 2)e
(2m + 1)G
(4m)m + (2m)mp
Query Cost
(2m + 1)p
(2m + 1)p
KeyGen. Cost
(2m + 1)p + (2)m
(3m + 1)m + (2m)mp
2(5m + 1)G + (1)GT (11)G + (m)Zp (m + 1)e + (m + 1)m (11)p + 5(m − 1)e
(2m + 1)G + (1)GT
+(6m + 2)e
(12m + 10)m
(2m + 2)e + (1)m (2m)p + (2m + 1)m (2m)e + (2m)m
+(6m + 1)e
(2m)G
O(m′) + 2λ
(m)TPRF
(m′)TXoR + TDec
(m′)TPRF + (m′)TXoR
+TEnc
Table 5: Execution Time Comparison between IP [24] and
the proposed SHVE; The width of HVE: m = 10000, no wild-
card element.
Table 6: The Execution Time of SHVE with different sizes of
predicate vector. The width of HVE: m is from 105 to 108, no
wildcard element.
Scheme KeyGen. Time (s) Enc. Time (s) Query Time (s)
IP [24]
SHVE
119.219
0.004
51.154
0.172
50.901
0.162
on to derive and analyse the performance of our HXT and compare
it to that of OXT.
In Table 4, we summarise 4 well-known paring-based HVE con-
structions as well as the SHVE scheme we proposed and compare
them based on their properties including ciphertext and key (token)
sizes as well as encryption, query and token generation computa-
tional costs when we use them to encrypt a Bloom filter with the
length of m, m is also referred to as the width of the HVE here. Note
that the second and third schemes were induced from Inner Prod-
uct Encryption (IPE), while the first and the fourth constructions
were originally obtained for HVE model. All the presented schemes
except ours are pairing-based constructions (over groups G and GT
as domain and range of a bilinear function) with different group
orders ranging from just 1 prime to product of 3 primes, while our
construction is based on symmetric key encryption.
It is clear that the HVE scheme with pairings in [24] can provide
the most efficient construction with low complexity encryption,
query, and key generation algorithms amongst the pairing-based
HVEs. Therefore, the first evaluation aims to compare the runtime
efficiency of our SHVE scheme with the IP [24]. To evaluate our
scheme, we implement our SHVE with Java, and we choose to use
AES-CMAC as our PRF function while AES in CBC mode as the
symmetric key encryption scheme. All above symmetric crypto-
graphic primitives are from the Legion of Bouncy Castle [37]. We
adopt 128-bit key length for symmetric key encryption scheme
because symmetric encryption with 128-bit key offers better secu-
rity than the Elliptic Curve Cryptography (ECC) over a curve with
a 160-bit prime order group with a smaller key size according to
RFC 4492 [3], and, it can perform encryption/decryption efficiently.
For comparison, we use the open source implementation of IP [24]
included in Java Pairing based Cryptograyphy (JPBC) [9] library,
which is also implemented by Java, and it is constructed on the
3 +x over the field Fp for some prime p = 3 mod 4, the
curve y
group operations are based on and the 160-bit prime order groups
which are generated from above curve. To make the performance
of IP [24] consistent with the theoretical analysis from Table 4, we
2 = x
SHVE width (m) KeyGen. Time (s) Enc. Time (s) Query Time (s)
105
106
107
108
0.715
6.402
58.292
581.933
0.676
6.125
56.417
560.636
0.02
0.052
0.403
3.683
add a preprocessing code for Enc., as it has been implemented for
KeyGen. and Query, but missed in Enc..
It is also critical to distinguish between m (the length of the en-
tire Bloom filter which is at least as large as 36 × N ) and m′. In the
HVE schemes based on inner product encryption, the complexity
of key generation and query depends on m, while in the SHVE, the
complexity depends only on the number of non-wildcard characters
m′ in the vector. This has a significant impact on the practicality of
the scheme since a dependence of m would mean a query complex-
ity that scales with the size of the database. However, our query
complexity (e.g., number of pairings and exponentiations) grows
with the size of the result set rather than the database.
All evaluations are performed on a server with Intel Xeon E5
2660 2.20 GHz CPU and 128 GB of DDR3 RAM. The width of HVE
m is set to 10000, and the predicate vector v we used doesn’t have
any wildcard element, which means m = m′ in our evaluations. We
run IP [24] and proposed SHVE scheme three times respectively to
obtain the average execution times of key generation, encryption,
and query. The results are shown in Table 5. Compared with IP [24],
the proposed SHVE scheme is 314x faster in Enc., 297x faster in
KeyGen., and almost 30000x faster in Query.
We also evaluate the execution time of SHVE with large m to
show the efficiency of SHVE. In this evaluate, the width of HVE is
varied from 105 to 108. The result is reported in Table 6, and it is
consistent with our theoretical performance analysis.
We can see that the SHVE scheme is efficient even if it is running
with a large m. For example, it is able to run KeyGen and Enc.
algorithm within 10 minutes, and query algorithm within 3 s when
m = 108 (108 elements for processing). Note that it needs several
hours to run a pairing-based HVE with the same parameter (m) to
encrypt and to generate the key, and several days to query.
6.2 Comparison between OXT and HXT
We compare our scheme with that of [12] in terms of computational
complexity (of the set-up and search phases), storage size (of the
Table 7: Communication overhead between client and server and their computational costs.
Conjunctive query q = (w1 ∧ w2 ∧ · · · ∧ wn).
OXT [12] cost
HXT cost
NTTSet + N epre + NkThash NTTSet + N epre + NkThash + (m)TPRF
Computation
set-up comp. cost
search common cost (server)
xtag comp.&BF match
search additional cost (server)
HVE Queries
search common cost (client)
stag, xtoken comp. & index recover
search additional cost (client)
HVE KeyGen
Storage
storage size (server)
Communication common comm. bandwidth
additional comm. bandwidth
tokenc transmission
server), and the number of interaction runs and bandwidth for
conjunctive query (w1∧w2∧· · ·∧wn) with sterm w1. Note that e, m,
and p are defined in Table 3. The overall comparison is summarized
in Table 7.
6.2.1
Set-up computational costs. First, we focus on computa-
tional cost spent during the set-up phase. Although both our pro-
tocol and the OXT share a lot of similarities, the time taken to
generate the encrypted database in HXT is mainly contributed from
the computation of the c in addition to TSet, XSet and BF vector
computational costs. The computing of c adds the computational
cost of an HVE.Enc, that is (m)TPRF if we employ the SHVE. If we
let TTSet = TPRF +TEnc, then computing TSet and XSet in OXT sums
up to NTTSet + N epre, where the first term is obtained since TSet
has N components each filled up using a PRF and an encryption
of a symmetric encryption scheme. For the XSet computation, we
make N preprocessed exponentiations, in total of N epre. These are
shown in the first row computation comparison of Table 7. Note
that although we do not entirely generate XSet in HXT, we still com-
pute its components to initiate a BF vector. Bloom filter is employed
for keeping the XSet in a reasonably storage space for the practical
implementation of OXT [12] and generating HVE for HXT, the BF
generation has only the evaluations of hashs Hj, for 1 ≤ j ≤ k and
kN elements.
6.2.2
Storage size. We now investigate the storage size of HXT
and compare it to OXT. The latter stores TSet and the Bloom filter
of XSet in EDB, while HXT uses TSet and an encryption of an HVE
system. Note that the latter is in fact an HVE ciphertext replacing
the Bloom filter of XSet of OXT. The size of TSet equals N , where
each component contains a G element of size O(λ); and the size of
Bloom filter is m. Note that m is approximately 1.44kN to attain a
negligible probability of false positives, which is 35 times smaller
than an XSet with 512-bit base field for k = 20 (1024 bits for each
element and 1024N in total). Therefore, This in total gives O(N(λ +
k)) as the storage size in OXT. The size of c depends on the size of the
corresponding BF (used to generate it). Therefore, the ciphertext
|DB(w1)| ((n − 1)(kThash + e))
|DB(w1)|((m′)TXOR + TDec)
N/A
|DB(w1)|(nTPRF + (n − 1)epre) + TPRF + TDec
N/A
|DB(w1)|((m′)TPRF + (m′)TXOR + TEnc)
N λ + m
N/A
|t| + |DB(w1)|(n − 1)G + |E|O(λ)
N λ + (m)λ
|DB(w1)|(O(m′) + 2λ)
size is (m)λ. Hence, the overall storage size of HXT is of order
O(kN λ).
6.2.3
Search computational costs. During the search phase, the
computational costs are divided between the client and the server.
The client in both HXT and OXT has to interact with the server
once she wants to send stag and xtokens, where she needs to use
a preprocessed element to calculate (n − 1) exponentiations for
each recovered document in DB(w1). The overall computational
cost till this stage is TPRF + |DB(w1)|TPRF + |DB(w1)|(n − 1)(TPRF +
epre) = TPRF + |DB(w1)|(n)TPRF + |DB(w1)|(n − 1)epre. In OXT, the
server then performs |DB(w1)|(n − 1)e many xtag generation and
|DB(w1)|(n − 1)kThash membership test in the BF vector. 4 It fi-
nally returns recovered encrypted indices to the client, when she
has to perform a decryption of what was stored in TSet. The lat-
ter costs client TDec. In HXT, the server evaluates vectors vc, for
1 ≤ c ≤ |DB(w1)|, and sends it to client. The client consequently
computes tokenc using HVE.KeyGen. The first one again is en-
dowed by (n − 1)kThash and (n − 1)e evaluations, while the second
component requires an HVE key generation, if m′ denotes the num-
ber of non-wildcard components of vc, then the cost of generating
tokenc is (m′)TPRF +(m′)TXOR +TEnc. Finally at the server side, the
determination of res through an HVE.Query and a tokenc is extra
compared to OXT, which costs another (m′)TXOR + TDec, using the
above defined notation. The search computational costs discussed
above are presented in the second to fifth row of Table 7.
Finally, we determine the computational cost overhead on server
and client side, respectively. For this purpose, we define Osrvr as:
|DB(w1)|((m′)TXOR + TDec)
|DB(w1)|((n − 1)(kThash + e)) .
Based on a micro-benchmark, the computation time of a hash is
insignificant, as the computation cost of an exponentiation is com-
parable to 1300 evaluations of hashs. In addition, the computation
time of an xor operation is 3 times faster than hash, 50 times faster
4Note that server doesn’t preprocess xtokens, because preprocessing takes more time
than exponentiation directly, so it only suits in the case when the same element is
reused many times.
|DB(w1)|((m′)TPRF + (m′)TXOR + TEnc)
|DB(w1)|(nTPRF + (n − 1)epre) + TPRF + TDec
.
than Sym.Dec and 100 times faster than Sym.Enc. If we apply the
typical settings from [12]: let Pe = 10−6 and n = 2, we will have
k = 20, and m′ is equal to the size of vc, which is (n − 1)k (k in
above settings), we conclude that HXT only introduces 1% extra
cost on server side; We further define Oclient as
Because the preprocessed element performs exponentiation 17
times slower than PRF and PRF is 43 times slower than exclusive-or
operation, the overhead of HXT is about 119% on client side. It is
easy to deduce from the micro-benchmark that the above two ratios
are inversely proportional to n, which means the computational
overhead of HXT is smaller when the query has a longer keyword
list. However, our evaluations on subsection 7.3 show that such
overhead can be masked by I/O cost on server side.
6.2.4
Interaction rounds and bandwidth. In our proposed query
protocol SE.Search shown in Algorithm 2 (on page 8), the stag and
xtoken generations are the same as that in OXT, which accounts
for the first round of interaction between the client and server. The
bandwidth of this round is |t| + |DB(w1)|(n − 1)G. In the second