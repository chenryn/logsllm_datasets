col between the proxy and the service. The solution utilizes
the possibilities created by the underlying Java 2 security
architecture and, if used, the existing Java Secure Socket
Extension (JSSE). Furthermore, there is no need for any
centralized security or other servers. On the other hand,
in order to support permission delegation, the proxy and
the server must take a number of additional steps, and they
must transport SPKI certiﬁcates in the whatever protocol
they use. Thus, our solution is not fully transparent to the
proxy or the service implementations. But, given the re-
quirement of protocol independence, our solution seems to
be reasonably easy to utilize, and it is in full conformance
with the central toolbox approach of Jini.
Compared to the other proposed solutions, our solution
is similar to the other Jini security in the sense that it mainly
addresses the proxy security problem, focusing on the au-
thentication of the clients and the services, and on autho-
rization at the method call level. On the other hand, our
solution has a number of additional beneﬁts. The main ben-
eﬁts can be enumerated as follows.
• The solution does not place any unnecessary restric-
tions on the implementation of Jini services. In par-
ticular, the solution is protocol independent, basically
allowing any protocol to be used between a Jini proxy
and the corresponding server.
• The solution does not require any centralized security
services, and therefore it can be easily utilized in ad
hoc networks.
• The solution allows ﬁne grained Java 2 permissions to
be separately applied in the client, proxy, and server.
In particular, a client application that requests a Jini
service runs in a separate protection domain than the
proxy, thereby restricting the permissions the proxy
has access to. Furthermore, permissions are explic-
itly delegated from the application to the proxy. Thus,
in addition to restricting the permission of the proxy
itself, this allows the proxy to provide the service with
a proof that the application does have the permissions
required by the service and that the application really
wants to use the permissions to access the service.
Since the permissions can be delegated to the service
(if desired), and since they can be presented as genuine
Java permissions at the service JVM, the service can
further use them when calling unrelated Java code. In
other words, we have basically extended the Java 2 ac-
cess control mechanisms to distributed environments,
allowing an application to pass any Java 2 permissions
to a Jini service through the service proxy.2
Considering our future directions, there are two major
branches. First, we want to test the applicability of our so-
lution to the security of other Jini mechanisms, including
leases, distributed events, and transactions.
In particular,
we would like to provide a kind of toolbox that would al-
low Jini service implementors to easily add strong, crypto-
graphical security to these mechanisms without adversely
affecting the environmental requirements of the services.
Second, we plan to study how to integrate our approach
with additional Java security mechanisms, including the
forthcoming Java Authentication and Authorization Service
(JAAS) [21] and the planned RMI Security Extension [32].
Another important aspect which requires further work
is the integration of a certiﬁcate revocation or validation
mechanism. The revocation and validation of SPKI certiﬁ-
cates are discussed in e.g. [20].
7 Conclusions
The Jini approach provides a number of methods and tools
for building distributed applications for decentralized, ad
hoc network environments. However, the current state of
the technology does not adequately address the security re-
quirements present in many of such environments.
In this paper, we have brieﬂy analyzed the client–service
related security requirements relevant to typical Jini envi-
ronments, and described a software architecture, backed up
by an implementation, that provides decentralized solutions
to these requirements. Our approach is based on apply-
ing SPKI based trust management to controlling Jini prox-
ies and delegating Java 2 permissions between Jini clients,
proxies, and services. Our experience indicates that it is in-
deed possible to build a completely decentralized security
solution, and apply it to Jini without losing any of the intrin-
sic Jini properties. In particular, our implementation does
not restrict the methods and protocols that can be used to
implement communication between a service and its prox-
ies. Our initial performance measurements indicate that,
once optimized, the approach should provide adequate pe-
formance in practice.
Acknowledgements
This work would not have been possible without the rest of
the SIESTA team: Johannes Lehtinen, Antti Mannisto, Pe-
tra Pietiläinen, Satu Virtanen, and Jukka Zitting. We would
also like to thank Yki Kortesniemi, Jonna Särs, and the
anonymous reviewers for their valuable comments and sug-
gestions, and Pekka Kanerva for helping in the preparation
of this manuscript.
References
[1] Ken Arnold, Bryan O’Sullivan, Robert W. Scheiﬂer, Jim
Waldo, and Ann Wollrath. The Jini Speciﬁcation. Addison-
Wesley, June 1999.
[2] Dirk Balfanz, Drew Dean, and Mike Spreitzer. A security
infrastructure for distributed Java applications. In Proceed-
ings of the 2000 IEEE Symposium on Security and Privacy,
pages 15–26, Oakland, California, May 2000.
[3] Konstantin Beznosov, Yi Deng, Bob Blakley, Carol Burt,
and John Barkley. A resource access decision service for
CORBA-based distributed systems.
In Proceedings of the
2. As the astute reader quickly understands, the actual solution is not
quite that easy due to the requirement of keeping the relevant certiﬁcates
along all the time. That is, in addition to representing the permissions as
Java objects, they must also be present in the form of properly authorized
certiﬁcates. Only that creates a proper certiﬁcate chain that the server can
use to verify the access permissions of the client application.
15th Annual Computer Security Applications Conference
(ACSAC ’99), pages 310–319, Phoenix, Arizona, December
1999.
[4] Matt Blaze, Joan Feigenbaum, John Ioannidis, and Ange-
los D. Keromytis. The KeyNote trust-management system
version 2. RFC 2704, IETF, September 1999.
[5] Matt Blaze, Joan Feigenbaum, John Ioannidis, and Ange-
los D. Keromytis. The role of trust management in dis-
tributed systems security. In Jan Bosch, Jan Vitek, and Chris-
tian D. Jensen, editors, Secure Internet Programming: Se-
curity Issues for Mobile and Distributed Objects, Lecture
Notes in Computer Science volume 1603, pages 185–210.
Springer, 1999.
[6] Matt Blaze, Joan Feigenbaum, and Jack Lacy. Decentralized
trust management. In Proceedings of the 1996 IEEE Sym-
posium on Security and Privacy, pages 164–173, Oakland,
California, May 1996.
[7] Geoffrey Clements.
Jini Usersecurity project home page.
http://www.bald-mountain.com/jini.html, 2000.
[8] Grzegorz Czajkowski and Thorsten von Eicken.
JRes: a
resource accounting interface for Java.
In Proceedings of
the Conference on Object-oriented Programming, Systems,
Languages, and Applications (OOPSLA ’98), pages 21–35,
Vancouver, Canada, October 1998.
[9] Steven E. Czerwinski, Ben Y. Zhao, Todd D. Hodes, An-
thony D. Joseph, and Randy H. Katz. An architecture for
a secure service discovery service.
In Proceedings of the
5th Annual ACM/IEEE International Conference on Mo-
bile Computing and Networks (MobiCom ’99), pages 24–35,
Seattle, Washington, August 1999.
[10] Tim Dierks and Christopher Allen. The TLS protocol, ver-
sion 1.0. RFC 2246, IETF, January 1999.
[11] Carl Ellison, Bill Frantz, Butler Lampson, Ron Rivest, Brian
Thomas, and Tatu Ylönen. SPKI certiﬁcate theory. RFC
2693, IETF, September 1999.
[12] Pasi Eronen, Johannes Lehtinen, Jukka Zitting, and Pekka
Nikander. Extending Jini with decentralized trust manage-
ment.
In Short paper proceedings of the 3rd IEEE Con-
ference on Open Architectures and Network Programming
(OPENARCH 2000), pages 25–29, Tel Aviv, Israel, March
2000.
[13] Eurescom.
Jini and friends at work project home page.
http://www.eurescom.de/Public/Projects/P1000-series/
P1005/P1005.htm, 2000.
[14] Luigi Giuri. Role-based access control on the web using
Java.
In Proceedings of the 4th ACM workshop on Role-
based access control (RBAC ’99), pages 11–18, Fairfax, Vir-
ginia, October 1999.
[15] Li Gong. Inside Java 2 Platform Security: Architecture, API
design, and implementation. Addison-Wesley, June 1999.
[16] Erik Guttman, Charles Perkins, John Veizades, and Michael
Day. Service location protocol, version 2. RFC 2608, IETF,
June 1999.
[17] Peer Hasselmeyer, Roger Kehr, and Marco Voß. Trade-offs
in a secure Jini service architecture.
In Claudia Linnhoff-
Popien and Heinz-Gerd Hegering, editors, Trends in Dis-
tributed Systems: Towards a Universal Service Market.
Third International IFIP/GI working conference proceed-
ings (USM 2000), Lecture Notes in Computer Science vol-
ume 1890, pages 190–201, Munich, Germany, September
2000. Springer.
[18] Tero Hasu. Storage and retrieval of SPKI certiﬁcates using
the DNS. Master’s thesis, Helsinki University of Technol-
ogy, April 1999.
[19] Trent Jaeger, Atul Prakash, Jochen Liedtke, and Nayeem
Islam.
Flexible control of downloaded executable con-
tent. ACM Transactions on Information and System Security,
2(2):177–228, May 1999.
[20] Yki Kortesniemi, Tero Hasu, and Jonna Särs. A revocation,
validation and authentication protocol for SPKI based del-
egation systems. In Proceedings of the 2000 Network and
Distributed System Security Symposium (NDSS 2000), pages
85–101, San Diego, California, February 2000.
[21] Charlie Lai, Li Gong, Larry Koved, Anthony Nadalin, and
Roland Schemers. User authentication and authorization in
the Java platform. In Proceedings of the 15th Annual Com-
puter Security Applications Conference (ACSAC ’99), pages
285–290, Phoenix, Arizona, December 1999.
[22] Tuomo Lampinen. Using SPKI certiﬁcates for authoriza-
tion in CORBA based distributed object-oriented systems.
In Proceedings of the 4th Nordic Workshop on Secure IT sys-
tems (NordSec ’99), pages 61–81, Kista, Sweden, November
1999.
[23] Sanna Liimatainen et al.
Tessa project home page.
http://www.tml.hut.ﬁ/Research/TeSSA/, 2000.
[24] Riku Mettälä. Bluetooth protocol architecture white paper,
version 1.0. Bluetooth Special Interest Group, August 1999.
[25] Pekka Nikander. An Architecture for Authorization and
Delegation in Distributed Object-Oriented Agent Systems.
Ph.D. thesis, Helsinki University of Technology, March
1999.
[26] Pekka Nikander. Fault tolerance in decentralized and loosely
coupled systems.
In Proceedings of Ericsson Conference
on Software Engineering, Stockholm, Sweden, September
2000.
[27] Pekka Nikander and Jonna Partanen. Distributed policy
management for JDK 1.2. In Proceedings of the 1999 Net-
work and Distributed System Security Symposium (NDSS
’99), pages 91–101, San Diego, California, February 1999.
Salutation home page.
[28] Salutation Consortium.
http://www.salutation.org/, 2000.
[29] Frank Stajano and Ross Anderson. The resurrecting duck-
ling: Security issues for ad-hoc wireless networks.
In
Bruce Christianson, Bruno Crispo, James A. Malcolm, and
Michael Roe, editors, Security Protocols, 7th International
Workshop Proceedings, Lecture Notes in Computer Science
volume 1796, Cambridge, UK, April 1999. Springer.
[30] Christopher Steel. Securing Jini connection technology.
Technical presentation 573 at the JavaOne 2000 confer-
ence, San Francisco, California. Slides available from
http://java.sun.com/javaone/javaone00/, June 2000.
[31] Daniel F. Sterne, Gregg W. Tally, C. Durward McDonell,
David L. Sherman, David L. Sames, Pierre X. Pasturel, and
E. John Sebes. Scalable access control for distributed object
systems. In Proceedings of the 8th USENIX Security Sym-
posium, pages 201–214, Washington, D.C., August 1999.
[32] Sun Microsystems.
Java remote method invocation secu-
rity extension. Technical speciﬁcation, early look draft
3, http://java.sun.com/products/jdk/rmi/rmisec-doc/, April
2000.
[33] Sun Microsystems. Java secure socket extension home page.
http://java.sun.com/products/jsse/, 2000.
[34] Universal Plug and Play Forum. Universal plug and play
home page. http://www.upnp.org/, 2000.
[35] Jim Waldo, Geoff Wyant, Ann Wollrath, and Sam Kendall.
A note on distributed computing.
Technical Report
SMLI TR-94-29, Sun Microsystems Laboratories, Novem-
ber 1994.
[36] Dan S. Wallach, Dirk Balfanz, Drew Dean, and Edward W.
Felten. Extensible security architectures for Java. In Pro-
ceedings of the 16th ACM Symposium on Operating Systems
Principles (SOSP ’97), pages 116–128, Saint-Malo, France,
October 1997.
[37] Dan S. Wallach and Edward W. Felten. Understanding Java
stack inspection. In Proceedings of the 1998 IEEE Sympo-
sium on Security and Privacy, pages 52–63, Oakland, Cali-
fornia, May 1998.
[38] Ian Welch and Robert J. Stroud. Supporting real world se-
curity models in Java. In Proceedings of the 7th IEEE Work-
shop on Future Trends of Distributed Computing Systems,
pages 155–159, Cape Town, South Africa, December 1999.