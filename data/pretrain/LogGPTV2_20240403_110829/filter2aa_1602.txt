ProxyNotShell (疑似) 分析与poc
1. 漏洞原理分析
Exchange 的ProxyNotShell 漏洞已经爆出来挺久了，临时缓解措施都已经绕过几轮了，但是一直没有
poc放出来，也没有明确的漏洞原理泄露。前一段时间twitter上有人分享了一些思路，可能是 
ProxyNotShell  的 ssrf 部分。不过热度过去了也没太多人关注，所以我把这个思路的poc写了一下，和
大家分享一下。如果最后不是ProxyNotShell， 那就叫它 NotProxyNotShell 吧。。。
首先回忆一下 ProxyShell 的利用链：autodiscover 前端端点的 ssrf 漏洞自带 kerberos 认证，认证用户
为 NT AUTHORITY\SYSTEM。但是system用户没有对应邮箱，要想用这个认证使用后端的端点，需要 
X-CommonAccessToken 头部字段。但是X-CommonAccessToken 不能由用户随意设置，会被 
autodiscover 前端端点过滤掉。好在 PowerShell 的后端端点存在一个 X-Rps-CAT  查询参数，可以作为 
X-CommonAccessToken  的平替。通过在X-Rps-CAT指定一个 伪造的exchange  administrator 的 
token ，我们可以将 NT AUTHORITY\SYSTEM 的认证降级为 exchange administrator，并获得 
exchange administrator 的 remote powershell。
ProxyShell 的补丁将 ssrf 自带的kerberos认证去掉了，但是ssrf留了下来。现在我们可以带着认证去使
用这个ssrf，这样 autodiscover 会根据我们认证的用户生成 X-CommonAccessToken，并传递给后端
服务。
原本Exchange的 powershell 前端端点只支持 kerberos 认证，但通过这个 ssrf ，我们可以借助 
autodiscover 作为前端端点，并可以使用它的 basic 认证、ntlm认证 以及其他的认证方式 建立 remote 
powershell。比如下面这样：
但如果直接使用这种方式，autodiscover 前端会根据我们认证的用户生成 X-CommonAccessToken 并
传递给 PowerShell 后端。这样由于我们是以普通用户认证的，获得的也会是一个普通用户权限的
remote powershell。而且由于 X-CommonAccessToken 的优先级高于 X-Rps-CAT，这时也无法通过  
X-Rps-CAT 来指定token。
那是不是 X-CommonAccessToken 绝对不可能由用户直接指定呢？到也不全是。看下面的代码：
这是 ProxyRequestHandler.AddProtocolSpecificHeadersToServerRequest() 里的一段代码，描述了 
autodiscover 前端端点是如何决定发送给后端的 X-CommonAccessToken 的。
情况一：如果用户请求里没有带 X-CommonAccessToken 头部，则直接根据认证的用户生成响应的 X-
CommonAccessToken，如果是匿名用户则生成匿名token。
情况二：如果用户请求里带了 X-CommonAccessToken 头部，首先要确保这个 CommonAccessToken 
里指定的用户不能是 System 或 Machine 账户。其次要确保我们用来认证的用户必须满足 
IsSystemOrTrustedMachineAccount() 函数。
IsSystemOrTrustedMachineAccount() 要求用户是 System 或者 name 以 $ 结尾(machine account) ，
并且具有 TokenSerialization 权限。
也就是说直接指定  X-CommonAccessToken 的功能一般由 拥有TokenSerialization权限的machine 
account 使用，以给予它们模拟其他用户的能力。
说到这里：允许Ntlm认证，一个拥有TokenSerialization权限的machine account 。我们应该可以想到
通过 Ntlm relay  Exchagne Server 的machine account 来模拟/降级 出Exchagne administrator 的 
remote powershell。由于现在不允许 Ntlm relay 到发出认证请求的主机上，所以只适用于 多
Exchagne Server 的环境。
2. 写 poc
那按照这个思路，其实poc也很好写了，和 ProxyShell 相似，只是多了 Ntlm relay 的过程。基本上就是 
DfsCoerce + ntlmrelayx.py + orange的powershell proxy 脚本。如果选择 DfsCoerce 作为Ntlm认证的
触发方式，就要求目标主机上开启了 DFS 服务。但这个服务不是默认开启的，一般安装了AD的域控会
自动开启这个服务，所以就要求我们的Exchagne Server1 安装有AD。当然你也可以选择其他的 Ntlm 
认证触发方式。orange 的powershell proxy 脚本自不必多说，网上也有，帮我们省去了研究 remote 
powershell 具体协议内容的麻烦。最后也最麻烦的就是 ntlmrelayx.py 了，我们要先学习一下 
ntlmrelayx 的架构。
ntlmrelayx 分为 servers、clients 和 attacks 三个部分。
server 部分作为监听 ntlm 认证请求的组件，支持各种协议，比如 ntlm over smb, ntlm over http 。
client 部分的作用则是relay，将收到的ntlm认证消息通过各种协议转发到其他主机上。支持的协议也很
多，包括 http, imap, ldap, mssql, smb 等等。
attack 部分的作用则是在relay 并完成认证之后，向目标主机发送后续的攻击动作。
server 在接收到 ntlm 认证请求后，会分别调用 Client 实现的 sendNegotiate() 和 sendAuth() 函数，以
向目标主机完成ntlm认证步骤。完成认证后会取出 Client 所使用的 connection 交给 attack 使用。这样
保证attack 所使用的是一个经过 ntlm 认证的长连接。
如果使用 DfsCoerce，那 server 部分就要监听 ntlm over smb，而 client 部分则要使用 
HttpClient(HttpsClient) 以连接 exchagne 的 autodiscover端点。但是 ntlmrelayx 自带的 HttpClient 
无法指定认证时的请求路径，查询字符串 和 请求头部，这样我们就没法利用ssrf。所以我们要实现一个
自己的 HTTPRelayClient (其实只是拷贝默认的HttpClient，修改几行代码)。具体哪种协议使用哪个
Client 是在 PROTOCOL_CLIENTS 全局变量里指定的，我们可以用下面的方式指定：
具体的修改不过就是在 Client.SendAuth() 里加上伪造的 X-CommonAccessToken 头部，以及修改一下 
Client.initConnection() 里的请求路径。这里附上token 的生成代码：
认证完成之后 attack 要怎么写呢？这里我们使用的是 powershell proxy 脚本，那就需要开启一个Flask
服务，监听 remote powershell 请求，并带上认证转发给 Exchange Server2，再将响应转发给 
powershell 连接脚本。那 attack 要怎么和 Flask 结合起来呢？我的方法是在 attack 里将接收到的经过
认证的 connection 存放到一个全局变量里，然后由  Flask 实例使用这个经过认证的长连接转发 
powershell 请求。然后问题又来了，powershell 连接的其中一个报文是没有响应的，这就导致长连接
PROTOCOL_CLIENTS['HTTP'] = MyHTTPRelayClient
PROTOCOL_CLIENTS['HTTPS'] = MyHTTPSRelayClient
PROTOCOL_ATTACKS['HTTP'] = MyHTTPAttack
PROTOCOL_ATTACKS['HTTPS'] = MyHTTPAttack
# 注意：gsuids 是一个list
def fake_token(usuid, gsuids):
    logonname = b'SERVER\\whatever'
    token = b'V\x01\x00T\x07WindowsC\x00A\x08Kerberos' + \
            b'L' + struct.pack('< B', len(logonname)) + logonname + \
            b'U' + struct.pack('< B', len(usuid)) + usuid.encode('utf-8') + \
            b'G' + struct.pack('< L', len(gsuids))
    for gsuid in gsuids:
        token = token + b'\x07\x00\x00\x00' + struct.pack('< B', len(gsuid)) + 
gsuid.encode('utf-8')
    token = token + b"E\x00\x00\x00\x00"
    tokenb64 = base64.b64encode(token)
    return tokenb64.decode()
result = fake_token('S-1-5-21-2610204458-598855006-40855596-1000', ['S-1-5-32-
544'])
会阻塞在那里，没办法我决定多建立几个经过认证的长连接以备阻塞时使用。但是又有问题了，
ntlmrelayx 的target有去重机制，对同一个目标只会认证一次，这样就避免了当有多个 ntlm 认证请求
时会多次向同一目标主机转发认证的问题。我这里利用了一个ntlmrelayx 的bug，当指定的target里有
path时，去重机制会因为不匹配而失效，这样就可以建立多个ntlm认证长连接了。
最后脚本输出大概是这个样子：
然后我们就有了一个 Exchange administrator 权限的remote powershell。至于后面怎么通过这个
powershell 写文件/Rce 就不知道了。
3. 临时缓解措施的绕过
这个ssrf 的临时缓解措施被绕过了好几次，不幸的是昨天又被绕过了。测试如下：
不过这个请求的query string 需要直接使用 binary 数据，不能进行url编码，似乎现有的 python http相
关库不能满足这点。如果可以的话请告诉我。
最后，这个利用思路到底是不是 ProxyNotShell 呢？还真不好说，因为微软给的临时缓解措施里有一条
是：禁用普通用户的 remote powershell 权限。似乎漏洞的发生场景是普通用户的 remote powershell 
会话，和文中这个获取 管理员 remote powershell 会话的思路好像不太一样。
附录：
https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-
microsoft-exchange-proxyshell
https://peterjson.medium.com/reproducing-the-proxyshell-pwn2own-exploit-49743a4ea9a1
https://twitter.com/buffaloverflow/status/1575756381650493440
https://twitter.com/irsdl/status/1581391654153437185