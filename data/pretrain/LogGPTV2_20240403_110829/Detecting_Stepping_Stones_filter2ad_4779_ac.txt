The principle behind the algorithm is that, for stepping
stones, each line typed by the user is often echoed verba-
tim across the two connections (when the content is not
encrypted). Therefore, by looking at lines in common,
we can ﬁnd connections with similar content. With ad-
ditional manual inspection, we can identify the stepping
stones.
The algorithm works as follows:
1. Extract the aggregate Telnet and Rlogin output
(computer-side response), for all of the sessions in
the trace, into a ﬁle.
2. For each different line in the output, count how
many times it occurred (this is just sort | uniq -c
in Unix).
3. Throw away all lines except those appearing ex-
actly twice. The idea is that these are good can-
didates for stepping stones, in that they are lines
unique to either one or at most two connections.
4. Find the connection(s) in which each of these lines
appears. This is done by ﬁrst building a single ﬁle
listing every unique line in every connection along
with the name of the connection, and then doing
a database join operation between the lines in that
ﬁle and those in the list remaining after the previous
step.
If a line appears in just one connection, throw the
line away.
5. Count up how many of the only-seen-twice lines
each pair of connections has in common (using the
Unix join utility).
6. Connection pairs with 5 or more only-seen-twice
lines in common are now candidates for being step-
ping stones.
7. Of those, discard the pair if both connections are in
the same direction (both into the site or both out of
the site).
8. Of the remainder, visually inspect them to see
whether they are indeed stepping stones. Most are;
a few are correlated due to common activities such
as reading the same mail message or news article.
Clearly the methodology is not airtight, and it fails com-
pletely for encrypted trafﬁc. But it provides a good base-
line assessment of the presence of clear-text stepping
stones, and detects them in a completely different way
than the timing algorithm does, so it is suitable for cali-
bration and performance evaluation.
For large traces, the requirement of 5 or more lines al-
lows us to signiﬁcantly reduce the number of connection
pairs that we need to visually inspect in the end. This
appears to be necessary in order to make the brute-force
content matching feasible.
For small- to medium-sized traces, we also inspect the
ones with 2, 3, or 4 lines in common. Sometimes we
did indeed ﬁnd stepping stones that were missed if we
required 5 lines in common. But in most cases, these
stepping stones were exceedingly short in terms of bytes
transferred.
5.3 Simple content-based algorithms
For purposes of comparison, we devised two simple
content-based algorithms. Both are based on the notion
that if we can ﬁnd text in an interactive login 
to that login, then if that text also occurs in 
 are related.
have strong evidence that 
 and 
 unique
 , then we
The problem then is to ﬁnd such instances of unique text.
Clearly, virtually all login sessions are unique in some
fashion, but the difﬁculty is to cheaply detect exactly
how.
Our ﬁrst scheme relies on the fact that some Telnet
clients propagate the X-Windows DISPLAY environ-
ment variable [Al94] so that remote X commands can lo-
cate the user’s X display server. The value of DISPLAY
should therefore be unique, because it globally identiﬁes
a particular instance of hardware.
We modiﬁed Bro to associate with each active Telnet
session the value of DISPLAY propagated by the Tel-
net environment option (if any), and to ﬂag any session
that propagates the same value as an already existing
session. We ﬁnd, however, that this method has little
power. It turns out that DISPLAY is only rarely prop-
agated in Telnet sessions, and, in addition, non-unique
values (such as hostnames not fully qualiﬁed, or, worse,
strings like “localhost.localdomain:0.0”) are
propagated.1
1However, we have successfully used DISPLAY propagation to
backtrace attackers, so recording it certainly has some utility.
Our second scheme works considerably better. The ob-
servation is that often when a new interactive session be-
gins, the login dialog includes a status line like:
Last login: Fri Jun 18 12:56:58
from hostx.y.z.com
The combination of the timestamp (which of course
changes with each new login session) and the previous-
access host (even if truncated, as occurs with some sys-
tems) leads to this line being frequently unique.
We modiﬁed Bro to search for the following regular ex-
pression in text sent from the server to the client:
/ˆ([Ll]ast +(successful)? *login)/ |
/ˆLast interactive login/
We found one frequent instance of false positives. Some
instances of the Finger service [Zi91] report such a “last
login” as part of the user information they return. Thus,
whenever two concurrent interactive sessions happened
to ﬁnger the same user, they would be marked as a step-
ping stone pair. We were able to ﬁlter such instances
out with a cheap test, however: it turns out that the Fin-
ger servers also terminate the status line with ASCII-1
(“control-A”).
We refer to this scheme as “login tag”, and compare its
performance with that of the timing algorithm below. It
works remarkably well considering its simplicity. Of
course, it is not very robust, and fails completely for a
large class of systems that do not generate status lines
like the above, though perhaps for those a similar line
can be found.
5.4 Accuracy
We ﬁrst evaluate the accuracy of the algorithms in
terms of their false negative ratio and false positive ra-
tio. For lbnl-telnet.trace, we identiﬁed 23 step-
ping stone connection pairs among a total of 3,831 con-
nections using the brute-force content matching as de-
scribed above. (We inspected all connections with 2 or
more lines in common, so 23 should be a very accurate
estimation of the number of stepping stones.) One step-
ping stone is indirect ( 3.2), the others were direct.
The timing-based detection algorithm reports 21 step-
ping stones, with no false positives and 2 false negatives.
Both false negatives are quite short: one lasts for 15 sec-
onds and the other lasts for 34 seconds.
For ucb-telnet.trace, due to the large volume of
the data, for the brute-force technique we only inspected
connections with 5 or more lines in common. We identi-
ﬁed 47 stepping stones. In contrast, the timing-based al-
gorithm detects 74 stepping stones. 5 out of the 47 step-
ping stones we identiﬁed using brute-force were missed
by the timing algorithm. Among the 5 false negatives,
3 are very short either in terms of duration (less than 12
seconds) or in terms of the bytes typed (in one connec-
tion, the user logs in and immediately exits). We discuss
the additional 32 stepping stones detected by the timing-
based algorithm, but not by the brute-force technique,
below.
To further assess performance, we ran both the
“display” and the “login tag” schemes ( 5.3) on
ucb-telnet.trace. The “display” scheme reported
3 stepping stones, including one missed by the timing-
based algorithm. “login tag” reported 20 stepping stones
(plus one false positive, not further discussed here). Of
these 20, the timing-based algorithm only missed one,
which was exceedingly short—all the user did during the
downstream session was to type exit to terminate the
session.
(This is also the stepping stone that was de-
tected by the “display” algorithm but not by the timing
algorithm.)
In summary, the timing-based algorithm has a low false
negative ratio. To make sure that this does not come at
the cost of a high false positive ratio, we visually in-
spected the additional 32 stepping stones reported by
the timing-based algorithm for ucb-telnet.trace
to see which were false positives.
It turns out that all of them were actual stepping stones.
For example, there were a couple of stepping stones that
used ytalk, a chat program. These fooled the brute-
force content matching algorithm due to a lot of cur-
sor motions. Another stepping stone fooled the content-
matching approach because retransmitted data showed
up in one of the transcripts but not the other.
Thus, we ﬁnd that the timing-based algorithm is highly
accurate in terms of both false positive ratio and false
negative ratio, and works considerably better than the
brute-force algorithm that we initially expected would
be highly accurate.
5.5 Efﬁciency
The timing-based algorithm is fairly efﬁcient. Under the
current parameter settings, on a 400MHz Pentium II ma-
chine running FreeBSD 3.3, it takes 69 real-time sec-
onds for lbnl-telnet.trace, and about 24 min-
utes for ucb-telnet.trace. The former clearly
sufﬁces for real-time detection. The latter, for a 5.5 hour
trace, reﬂects about 10% of the CPU, and would appear
likewise to sufﬁce. Note that the relationship between
the running time on the two traces is not linear in the
number of packets or connections in the trace, because
what instead matters is the number of concurrent con-
nections, as these are what lead to overlapping ON/OFF
periods that require further evaluation.
5.6 Impact of different control parameters
The proper choice of the control parameters is important
for both the accuracy and the efﬁciency of the algorithm.
We based the current choice of parameters on extensive
experiments with various trafﬁc traces, which we sum-
marize in this section. With these settings, the algorithm
performs very well in terms of both accuracy and speed
across a wide range of network scenarios.
Parameter Values
idle (sec)
(msec)
EMF>H csc
0.5
20, 40, 80, 120, 160
15%, 30%, 45%
1, 2, 4, 8, 12, 16
2% for direct stepping stones;
4% for indirect stepping stones
Table 1: Settings for different control parameters.
To assess the impact of the different control parameters,
we systematically explored the portions of the parameter
space on ucb-telnet.trace. Table 1 summarizes
the different parameter settings we considered. Note that
when ex-
ploring the parameter space, which we did to keep the
size of the parameter space tractable. We chose to not
vary these two parameters in particular because based
on extensive experiments with various trafﬁc traces, we
have found that:
we keep the default settings for =
idle and
 The algorithm is fairly insensitive to the choice of
idle. This is largely because, as noted in  4.1, hu-
man keystroke interarrivals are well described by
a Pareto distribution with ﬁxed parameters. The
Pareto distribution has a distinctive “heavy-tail”
property, i.e., pretty much no matter what value we
idle, we still have an appreciable num-
ber of keystrokes to work with. However, the larger
idle, the more likely that we will miss short
stepping stones. The current choice of 0.5 sec is
a reasonable compromise between exceeding most
round-trip times (RTTs), yet maintaining respon-
siveness to short-lived connections.
choose for =
the =
 Although the current choices of
thresholds are
very low, they sufﬁce to eliminate those very long-
lived connections that eventually generate consecu-
tive coincidences just by chance, which is the only
purpose for introducing
.
Finally, an important point is that the goal for this as-
sessment is determining the best parameters to use for
an unaware attacker. If the attacker actively attempts to
evade detection, then as noted in  4.4 alternative param-
eters may be required even though they work less well in
general. The important problem of assessing how to op-
timize the algorithm for this latter environment remains
for future work.
the
ran
detection
algorithm
We
on
ucb-telnet.trace for each of the 75 possible
combinations of the control parameters and assessed
the number of false positives and false negatives.
For brevity, we only report the complete results for
, and brieﬂy summarize the results for
Pcb
and
PdZ
.
FP/FN (
=30%)
(msec)
20
40
80
120
160
1
1/8
1/6
4/5
12/5
20/5
2
0/8
0/7
0/7
0/7
0/7
EMF>H csc
8
4
0/10
0/10
0/9
0/9
0/9
0/17
0/17
0/16
0/15
0/14
12
0/21
0/21
0/20
0/19
0/19
16
0/26
0/25
0/24
0/24
0/24
Table 2: Number of false positives (FP) and false neg-
atives (FN) for detecting direct stepping stones when
.
Pea
Pfa
Table 2 gives the results for detecting direct stepping
stones when
. We make four observations.
First, the number of false positives is close to 0 for all
,
which clearly is too lax. Second, the number of false
, which is the
combinations of A and EMF>H csc except for EMF>H csc
Pgb
negatives is minimized when EMF>H csc
default setting in the algorithm. Third, the choice of A
PhX
=
A
N
N
W
N
W
=
N
W
N
W
N
P
a
Q
]
N
R
]
N
R
]
N
A
N
Q
]
N
Q
]
has little impact on the accuracy of the algorithm. Fi-
(not shown)
nally, the results for
are highly similar to those for
, which means
the algorithm is insensitive to the choice of
Pcb
and
.
PdZ
Pia
We should also note two additional considerations re-
garding A . First, it is sometimes necessary to use a rela-
tively largeA , especially when the latency is high (for ex-
ample, for connections that go through transcontinental
or satellite links). High latency often means large varia-
tion in the delay, which can distort the keystroke timing
characteristics. One possible solution to this problem
connection. This would also help with the latency-lag
would be to choose different A ’s based on the RTT of a
evasion technique discussed in  4.4. But such adapta-
tion complicates the algorithm, because estimating RTT
based on measurements in the middle of a network path
can be subtle, so we have left it for future study.
Second, large A ’s also mean we must maintain state