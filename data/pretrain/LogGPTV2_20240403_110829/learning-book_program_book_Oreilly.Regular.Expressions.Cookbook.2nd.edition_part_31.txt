Ruby'’s String-split() method does not provide the option to add the regex matches
to the resulting array. Instead, we can adapt Recipe 3.11 to add the text between the
regex matches along with the regex matches themselves to a list. To get the text between
the matches, we use the match details explained in Recipe 3.8.
3.20 Split a String, Keeping the Regex Matches | 223
---
## Page 240
See Also
Recipe 2.9 explains capturing and noncapturing groups. Recipe 2.11 explains named
capturing groups. Some programming languages also add text matched by capturing
Buns e Sumds usqm Xeue aq1 o sdnou8
Recipe 3.19 shows code that splits a string into an array without adding the regex
matches to the array.
3.21Search Lineby Line
Problem
Traditional grep tools apply your regular expression to one line of text at a time, and
display the lines matched (or not matched) by the regular expression. You have an array
of strings, or a muliline string, that you want to process in this way.
Solution
C#
If you have a multiline string, split it into an array of strings first, with each string in
the array holding one line of text:
string[] lines = Regex.Split(subjectString, "\r?\n");
Then, iterate over the lines array:
(,uxatted xasax,)xaday mau = fqoxasax xadag
for (int 1 = 0; 1 table|row|ce11)b
%（（[%]）[%]）%
RegexOptions .IgnoreCase | RegexOptions. IgnorePatternhhitespace);
[(?\S+)",
Match match = regexObj .Match(fileContents);
while (match.Success){
1f (match,Groups[“keyword"]. Success){
string keyword = match,Groups[“keyword°] .Value ToLower();
if (keyword = "table") (
table = new RECTable();
row = null;
cell = null;
3.22 Construct a Parser I 229
---
## Page 246
} else if (keyuord == *row") {
1f (table == nul1)
throw nen Exception(*Invalid data: rom without table");
row = table.addRow();
cell = null;
} else if (keynord == *cell") {
1f (row == null)
throw new Exception(*Invalid data: cell without row");
}else (
cell = row.addcell();
throw new Exception(*Parser bug: unknown keyword°);
}else if (match.Groups[°string*]-Success) {
string content = match,Groups["string"] .Value.Replace(*%%", "%");
if (cell != nul1)
cell.addContent(content);
else if (row I= null)
throw new Exception(*Invalid data: string after row keyword°);
else 1f (table != null)
table addCaption(content);
else
throw new Exception(*Invalid data: string before table keyword");
} else if (match.Groups[”error*].Success) {
throw new Exception("Invalid data: " + match.Groups["error*].Value);
}else {
throw new Exception("Parser bug: no capturing group matched");
match = match.NextRatch();
if (table == null)
return table;
thro new Exception("Invalid data: table keyword missing");
VB.NET
Function ImportTable(ByVal FileContents As String)
Dim Table As RECTable = Nothing
Dim Cell As RECCell = Nothing
Dim Row As RECRow = Nothing
Dim RegexObj As New Regex(
"|%（?[x]*（？:xx[]*)*)%”8
\b(?table|row|cel1)\b"&
"|(?\S+)",
RegexOptions IgnoreCase Or RegexOptions. IgnorePatternkhitespace)
Dim MatchResults As Ratch = RegexObj .Ratch(FileContents)
While MatchResults.Success
If MatchResults .Groups(“keyword°) Success Then
230 | Chapter 3: Programming with Regular Expressions
---
## Page 247
Dim Keyword As String = MatchResults.Groups (*keyuord") Value
Keyword = Keyword ToLower()
If Keyword = "table* Then
Table = New RECTable
Row = Nothing