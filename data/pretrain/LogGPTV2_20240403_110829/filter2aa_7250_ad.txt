好了, 但是以实例调用 \f(CW\*(C`speak\*(C'\fR 会产生什么结果呢?
.PP
.Vb 2
\&  my $talking = Horse->named("Mr. Ed");
\&  $talking->speak;
.Ve
.PP
我们得到的是:
.PP
.Vb 1
\&  a Horse=SCALAR(0xaca42ac) goes neigh!
.Ve
.PP
为什么?因为 \f(CW\*(C`Animal::speak\*(C'\fR 希望它的第一个参数是类名, 而不是实例. 当实例被传入时,我们希望使用的是字符串而不是实例本身,显示的结果不是我们所希望的.
.Sh "Making a method work with either classes or instances 使方法同时支持类和实例"
.IX Subsection "Making a method work with either classes or instances"
我们需要做的是让方法检测它是被实例调用的还是被类调用的. 最直接的方法是使用 \f(CW\*(C`ref\*(C'\fR 操作符. 它在参数是实例时返回字符串,在参数是类名时返回 \f(CW\*(C`undef\*(C'\fR. 我们首先改写 \f(CW\*(C`name\*(C'\fR 方法:
.PP
.Vb 6
\&  sub name {
\&    my $either = shift;
\&    ref $either
\&      ? $$either # it's an instance, return name
\&      : "an unnamed $either"; # it's a class, return generic
\&  }
.Ve
.PP
在这儿, \f(CW\*(C`?:\*(C'\fR 操作符决定是选择间接引用(dereference)还是派生字符串. 现在我们可以同时使用类或实例了. 注意我修改了第一个参数为 \f(CW$either\fR 来表示期望的变化:
.PP
.Vb 3
\&  my $talking = Horse->named("Mr. Ed");
\&  print Horse->name, "\en"; # prints "an unnamed Horse\en"
\&  print $talking->name, "\en"; # prints "Mr Ed.\en"
.Ve
.PP
我们可以改写 \f(CW\*(C`speak\*(C'\fR :
.PP
.Vb 4
\&  sub speak {
\&    my $either = shift;
\&    print $either->name, " goes ", $either->sound, "\en";
\&  }
.Ve
.PP
而 \f(CW\*(C`sound\*(C'\fR 本来就可以工作. 那么现在就一切完成了!
.Sh "Adding parameters to a method 给方法加参数"
.IX Subsection "Adding parameters to a method"
让我们训练动物们吃饭:
.PP
.Vb 30
\&  { package Animal;
\&    sub named {
\&      my $class = shift;
\&      my $name = shift;
\&      bless \e$name, $class;
\&    }
\&    sub name {
\&      my $either = shift;
\&      ref $either
\&        ? $$either # it's an instance, return name
\&        : "an unnamed $either"; # it's a class, return generic
\&    }
\&    sub speak {
\&      my $either = shift;
\&      print $either->name, " goes ", $either->sound, "\en";
\&    }
\&    sub eat {
\&      my $either = shift;
\&      my $food = shift;
\&      print $either->name, " eats $food.\en";
\&    }
\&  }
\&  { package Horse;
\&    @ISA = qw(Animal);
\&    sub sound { "neigh" }
\&  }
\&  { package Sheep;
\&    @ISA = qw(Animal);
\&    sub sound { "baaaah" }
\&  }
.Ve
.PP
试试吧:
.PP
.Vb 3
\&  my $talking = Horse->named("Mr. Ed");
\&  $talking->eat("hay");
\&  Sheep->eat("grass");
.Ve
.PP
输出为:
.PP
.Vb 2
\&  Mr. Ed eats hay.
\&  an unnamed Sheep eats grass.
.Ve
.PP
有参数的实例方法调用时首先得到实例的引用，然后得到参数的列表。因此第一个调用实际上是这样的:
.PP
.Vb 1
\&  Animal::eat($talking, "hay");
.Ve
.Sh "More interesting instances 更多有趣的实例"
.IX Subsection "More interesting instances"
如果实例需要更多的数据该怎么办呢? 更多的项目产生更有趣的实例, 每个项目可以是一个引用或者甚至是一个对象. 最简单的方法是把它们存放到哈希中. 哈希中的关键词叫做'实例变量"(instance variables)或者"成员变量"(member variables)，相应的值也就是变量的值。
.PP
但是我们怎么把马放到哈希中呢? 回忆到对象是被实例化(blessed)的引用. 我们可以简单地创建一个祝福了的哈希引用,同时相关的的内容也作些修改就可以了.
.PP
让我们创建一只有名字有颜色的绵羊：
.PP
.Vb 1
\&  my $bad = bless { Name => "Evil", Color => "black" }, Sheep;
.Ve
.PP
那么 \f(CW\*(C`$bad\->{Name}\*(C'\fR 是 \f(CW\*(C`Evil\*(C'\fR, \f(CW\*(C`$bad\->{Color}\*(C'\fR 是 \f(CW\*(C`black\*(C'\fR. 但是我们想通过 \f(CW\*(C`$bad\->name\*(C'\fR 存取绵羊的名字name, 这有点的问题,因为现在它期望一个标量引用. 别担心,因为修正它很简单:
.PP
.Vb 7
\&  ## in Animal
\&  sub name {
\&    my $either = shift;
\&    ref $either ?
\&      $either->{Name} :
\&      "an unnamed $either";
\&  }
.Ve
.PP
\f(CW\*(C`named\*(C'\fR 当然还是创建标量的绵羊, 如下修正就好了:
.PP
.Vb 7
\&  ## in Animal
\&  sub named {
\&    my $class = shift;
\&    my $name = shift;
\&    my $self = { Name => $name, Color => $class->default_color };
\&    bless $self, $class;
\&  }
.Ve
.PP
默认颜色 \f(CW\*(C`default_color\*(C'\fR 是什么? 嗯, 如果 \f(CW\*(C`named\*(C'\fR 只有一个参数name, 我们还是希望有个颜色, 所以我们设定一个类初始化颜色. 对绵羊来说, 白色比较好:
.PP
.Vb 2
\&  ## in Sheep
\&  sub default_color { "white" }
.Ve
.PP
为了避免为每个类定义颜色, 我们可以在 \f(CW\*(C`Animal\*(C'\fR 中定义一个 \*(L"缺省的缺省，backstop\*(R" 的颜色:
.PP
.Vb 2
\&  ## in Animal
\&  sub default_color { "brown" }
.Ve
.PP
现在, 因为只有 \f(CW\*(C`name\*(C'\fR 和 \f(CW\*(C`named\*(C'\fR 与对象的 \*(L"结构，structure\*(R" 相关, 其余的部分可以保持不变, 所以 \f(CW\*(C`speak\*(C'\fR 工作正常.
.Sh "A horse of a different color 一匹不同颜色的马"
.IX Subsection "A horse of a different color"
但是如果所有的马都是棕色的,也挺烦人的. 所以我们可以写个方法来改变马的颜色.
.PP
.Vb 7
\&  ## in Animal
\&  sub color {
\&    $_[0]->{Color}
\&  }
\&  sub set_color {
\&    $_[0]->{Color} = $_[1];
\&  }
.Ve
.PP
注意到存取参数的不同方法了吗: \f(CW$_[0]\fR 直接使用, 而没有用 \f(CW\*(C`shift\*(C'\fR. (这在我们频繁存取时可以节省一些时间.) 现在我们可以把Mr. Ed的颜色变过来:
.PP
.Vb 3
\&  my $talking = Horse->named("Mr. Ed");
\&  $talking->set_color("black-and-white");
\&  print $talking->name, " is colored ", $talking->color, "\en";
.Ve
.PP
结果是:
.PP
.Vb 1
\&  Mr. Ed is colored black-and-white
.Ve
.Sh "Summary 总结"
.IX Subsection "Summary"
现在我们讲了类方法,构造器,实例方法,实例数据,甚至还有存取器(accessor). 但是这些还仅仅是开始. 我们还没有讲到以两个函数 getters,setters 形式出现的存取器，析构器(destructor),间接对象(indirect object notation),子类(subclasses that add instance data),per-class data,重载(overloading),\*(L"isa\*(R" 和 \*(L"can\*(R" 测试,公共类(\f(CW\*(C`UNIVERSAL\*(C'\fR class),等等. 这有待其它文档去讲解了. 无论如何,希望本文使你对对象有所了解.
.SH "SEE ALSO 参见"
.IX Header "SEE ALSO"
更多信息可参见 perlobj (这里有更多的Perl对象的细节,而本文的是基础), perltoot (面向对象的中级教程),  perlbot  (更多的技巧), 以及书籍,比如Damian Conway的不错的书叫做《面向对象的Perl (\fIObject Oriented Perl\fR)》。
.PP
某些模块可能对你有用，它们是 Class::Accessor,
Class::Class, Class::Contract, Class::Data::Inheritable,
Class::MethodMaker 还有 Tie::SecureHash
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1999, 2000 by Randal L. Schwartz and Stonehenge
Consulting Services, Inc.  Permission is hereby granted to distribute
this document intact with the Perl distribution, and in accordance
with the licenses of the Perl distribution; derived documents must
include this copyright notice intact.
.PP
Portions of this text have been derived from Perl Training materials
originally appearing in the \fIPackages, References, Objects, and
Modules\fR course taught by instructors for Stonehenge Consulting
Services, Inc. and used with permission.
.PP
Portions of this text have been derived from materials originally
appearing in \fILinux Magazine\fR and used with permission.
.SH "中文版维护人"
.B redcandle 
.SH "中文版最新更新"
.B 2001年12月9日星期日
.SH "中文手册页翻译计划"
.B http://cmpp.linuxforum.net