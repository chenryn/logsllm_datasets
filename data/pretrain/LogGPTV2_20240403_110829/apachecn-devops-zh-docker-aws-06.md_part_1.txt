# 六、构建定制的 ECS 容器实例
在前面的章节中，您学习了如何使用亚马逊 ECS 优化的亚马逊机器映像(AMI)来创建 ECS 容器实例，并通过几个简单的步骤将它们加入到 ECS 集群中。尽管 ECS 优化的 AMI 非常适合快速启动和运行，但您可能希望为生产环境的 ECS 容器实例添加额外的功能，例如添加日志代理或包括对 HTTP 代理的支持，以便您可以将 ECS 集群放在专用子网中。
在本章中，您将学习如何构建您自己的自定义 ECS 容器实例，使用 ECS 优化的 AMI 作为基础机器映像，并使用一个流行的开源工具 Packer 应用您自己的自定义。您将扩展基础映像以包括 AWS CloudWatch 日志代理，该代理支持使用 CloudWatch 日志服务从您的 ECS 容器实例进行集中日志记录，并安装一组有用的 CloudInfoformation 帮助脚本，称为 cfn-bootstrap，它将允许您在实例创建时运行强大的初始化脚本，并提供与 CloudInfoformation 的强大集成功能。
最后，您将创建一个第一次运行的脚本，该脚本允许您根据目标环境的具体情况调整实例，而无需为每个应用和环境构建新的 AMI。此脚本将使您能够有条件地启用 HTTP 代理支持，允许您在更安全的专用子网中安装您的 ECS 容器实例，并且还将包括运行状况检查，该检查将等到您的 ECS 容器实例已向其配置的 ECS 群集注册，然后向云信息发出您的实例已成功初始化的信号。
将涵盖以下主题:
*   设计定制的 AMI
*   使用 Packer 构建定制的 AMI
*   创建自定义存储配置
*   安装云信息帮助程序脚本
*   安装云监视日志代理
*   创建第一次运行脚本
*   测试您的自定义 ECS 容器实例
# 技术要求
下面列出了完成本章的技术要求:
*   封隔器 1.0 或更高版本(将提供如何安装封隔器的说明)
*   对 AWS 帐户的管理员访问权限
*   根据第 3 章中的说明配置本地 AWS 配置文件
*   GNU Make 版或更高版本(请注意，默认情况下，macOS 不附带此版本)
*   AWS CLI 1.15.71 或更高版本
此 GitHub URL 包含本章使用的代码示例:[https://GitHub . com/docker-in-AWS/docker-in-AWS/tree/master/ch6](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch6)[。](https://github.com/docker-in-aws/docker-in-aws/tree/master/ch4)
查看以下视频，了解《行动守则》:
[http://bit.ly/2LzoxaO](http://bit.ly/2LzoxaO)
# 设计定制的亚马逊机器映像
在学习如何构建定制的亚马逊机器映像之前，了解*为什么*想要或需要构建自己的定制映像是很重要的。
这种情况的原因因您的用例或组织需求而异，但是一般来说，您可能需要构建自定义映像的原因有很多:
*   **自定义存储配置**:默认的 ECS 优化 AMI 附带一个 30 GB 的卷，其中包括用于操作系统分区的 8 GB 卷和用于存储 Docker 映像和容器文件系统的 22 GB 卷。我通常建议您更改配置的一个方面是，默认情况下，不使用分层文件系统的 Docker 卷存储在 8 GB 操作系统分区上。对于生产用例，通常应该避免这种方法，相反，您应该安装一个专用卷来存储 Docker 卷。
*   **附加包和工具的安装**:为了与 Docker 的极简主义理念保持一致，ECS 优化的 AMI 附带了最低限度的 Amazon Linux 安装，该安装仅包括运行 Docker Engine 和支持 ECS 代理所需的核心组件。对于实际的用例，至少，您通常希望将 CloudWatch 日志代理添加到 AWS CloudWatch 日志服务中，该代理支持系统级别的日志记录(例如，操作系统、Docker 引擎和 ECS 代理日志)。您应该考虑安装的另一组重要工具是 cfn-bootstrap 工具，它提供了一组 cloud information 帮助器脚本，您可以使用这些脚本在 cloud information 模板中为实例定义自定义配置操作，并且还允许 EC2 实例在配置和实例初始化完成后向 cloud information 发出信号。
*   **添加首次运行脚本**:将 ECS 容器实例部署到 AWS 时，您可能会在各种用例中使用它们，这些用例需要根据应用的性质进行不同的配置。例如，一个常见的安全最佳实践是将您的 ECS 容器实例部署到没有连接默认路由的专用子网中。这意味着您的 ECS 容器实例必须配置有 HTTP 代理，以便与 AWS 服务(如 ECS 和 CloudWatch 日志)或 ECS 容器实例可能依赖的任何其他互联网服务进行通信。但是，在某些情况下，使用 HTTP 代理可能不可行(例如，考虑运行为您的环境提供 HTTP 代理服务的 ECS 容器的 ECS 容器实例)，您可以创建仅在实例创建时运行一次的预配脚本，根据目标用例有条件地启用/禁用所需的配置，如 HTTP 代理设置，而不是构建单独的机器映像(一个启用了 HTTP 代理，一个未启用 HTTP 代理)。
当然，还有一大堆其他用例可能会促使您构建自己的自定义映像，但是在本章中，我们将重点关注这里定义的用例示例，这将为您提供坚实的基础，并让您了解如何应用您可能想要使用的任何其他自定义。
# 使用 Packer 构建定制的 AMI
现在您已经理解了构建自定义 ECS 容器实例映像的基本原理，让我们介绍一个名为 Packer 的工具，它允许您为包括 AWS 在内的各种平台构建机器映像。
**Packer** 是由 HashiCorp 创建的开源工具，你可以在[https://www.packer.io/](https://www.packer.io/)找到更多关于它的信息。Packer 可以为各种各样的目标平台构建机器映像，但是在本章中，我们将只关注构建亚马逊机器映像。
# 安装封隔器
在开始使用 Packer 之前，您需要在本地环境中安装它。Linux、mac OS 和 Windows 平台都支持 Packer，要为您的目标平台安装 Packer，请遵循位于[https://www.packer.io/intro/getting-started/install.html](https://www.packer.io/intro/getting-started/install.html)的说明。
请注意，操作系统和第三方包管理工具广泛支持 Packer——例如，在 mac OS 上，您可以通过运行`brew install packer`使用 Brew 包管理器安装 Packer。
# 创建打包模板
安装 Packer 后，您现在可以开始创建 Packer 模板，该模板将定义如何构建您的自定义机器映像。在您这样做之前，我建议为您的 Packer 模板创建一个单独的存储库，它应该始终处于版本控制之下，就像应用源代码和其他基础设施一样，作为代码存储库。
对于本章，我将假设您已经创建了一个名为`packer-ecs`的存储库，您可以参考位于[https://github.com/docker-in-aws/docker-in-aws](https://github.com/docker-in-aws/docker-in-aws)的`ch6`文件夹，该文件夹提供了一个基于本章内容的示例存储库。
# 封隔器模板结构
打包器模板是 JSON 文档，它提供了一个声明性描述，告诉打包器如何构建机器映像。
打包器模板围绕四个常见的顶级参数进行组织，如下例所示，并在此进行描述:
*   **变量**:为构建提供输入变量的对象。
*   **构建器**:定义目标机器映像平台的打包器构建器列表。在本章中，您将瞄准一个被称为 [EBS 支持的 AMI 构建器](https://www.packer.io/docs/builders/amazon-ebs.html)的构建器，它是创建定制亚马逊机器映像的最简单和最受欢迎的构建器。构建者负责确保正确的映像格式，并以适合部署到目标机器平台的格式发布最终映像。
*   **置备程序**:Packer 置备程序的列表或阵列，作为映像构建过程的一部分执行各种置备任务。最简单的置备程序包括文件和外壳置备程序，它们将文件复制到映像中并执行外壳任务，如安装软件包。
*   **后处理器**:Packer 后处理器的列表或数组，一旦构建并发布了机器映像，就执行后处理任务:
```
{
    "variables": {},
    "builders": [],
    "provisioners": [],
    "post-processors": []
}
```
Packer template structure
# 配置生成器
让我们开始配置我们的 Packer 模板，首先在 packer-ecs 存储库的根目录下创建一个名为`packer.json`的文件，然后定义构建器部分，如下例所示:
```
{
  "variables": {},
  "builders": [
 {
 "type": "amazon-ebs",
 "access_key": "{{user `aws_access_key_id`}}",
 "secret_key": "{{user `aws_secret_access_key`}}",
 "token": "{{user `aws_session_token`}}",
 "region": "us-east-1",
 "source_ami": "ami-5e414e24",
 "instance_type": "t2.micro",
 "ssh_username": "ec2-user",
 "associate_public_ip_address": "true",
 "ami_name": "docker-in-aws-ecs {{timestamp}}",
 "tags": {
 "Name": "Docker in AWS ECS Base Image 2017.09.h",
 "SourceAMI": "{{ .SourceAMI }}",
 "DockerVersion": "17.09.1-ce",
 "ECSAgentVersion": "1.17.0-2"
 }
 }
 ],
  "provisioners": [],
  "post-processors": []
}
```
Defining an EBS-backed AMI builder
在前面的例子中，一个代表构建器的对象被添加到构建器数组中。`type`参数将构建器定义为基于 EBS 的 AMI 构建器，以下设置特定于此类构建器:
*   `access_key`:定义在构建和发布 AMI 时，用于验证对 AWS 访问的 AWS 访问密钥 ID。
*   `secret_key`:定义在构建和发布 AMI 时，用于认证对 AWS 的访问的 AWS 机密访问密钥。
*   `token`:可选定义使用临时会话凭据进行认证时使用的 AWS 会话令牌。
*   `region`:目标 AWS 区域。
*   `source_ami`:要构建的源 AMI。在本例中，指定了在编写本报告时适用于美国东部 1 地区的最新 ECS-Optimated AMI 的源 AMI，您可以从[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/ECS-Optimated _ AMI . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html)获得最新列表。
*   `instance_type`:用于构建 AMI 的实例类型。
*   `ssh_username`:Packer 在尝试连接到作为 Packer 构建过程的一部分创建的临时 EC2 实例时应该使用的 SSH 用户名。对于基于亚马逊 Linux 的 AMI，如 ECS 优化 AMI，必须将其指定为`ec2-user`用户。
*   `associate_public_ip_address`:设置为 true 时，将公共 IP 地址与实例相关联。如果您通过互联网使用 Packer，并且没有专用网络来访问作为 Packer 构建过程的一部分而创建的临时 EC2 实例，则需要这样做。
*   `ami_name`:将要创建的 AMI 的名称。该名称必须是唯一的，确保唯一性的常见方法是使用`{{timestamp}}` Go 模板功能，该功能将被 Packer 自动替换为当前时间戳。
*   `tags`:要添加到创建的 AMI 中的标签列表。这允许您附加元数据，例如映像的源 AMI、ECS 代理版本、Docker 版本或您可能发现有用的任何其他信息。请注意，您可以引用一个名为`SourceAMI`的特殊模板变量，它是由亚马逊 EBS 构建器添加的，并且基于`source_ami`变量的值。
中需要注意的一点是，与其将您的 AWS 凭据硬编码到模板中失败，不如引用一个名为`{{user ``}}`的 Go 模板函数，这将注入我们稍后将配置的顶层变量参数中定义的用户变量。
Packer templates are processed using Go's templating language, which you can read more about at [https://golang.org/pkg/text/template/](https://golang.org/pkg/text/template/). Go templates allow you to define your own template functions and Packer includes a number of useful functions that are defined at [https://www.packer.io/docs/templates/engine.html](https://www.packer.io/docs/templates/engine.html). Template functions are invoked through template expressions, which are expressed in the handlebars style format: `{{ }}`.
# 配置变量
变量用于在构建时将特定于用户或特定于环境的设置注入到模板中，这有助于使机器映像模板更加通用，并避免模板中凭据的硬编码。
回到上一个示例，您在定义 AWS 凭据设置时引用了用户变量，这些变量必须在 Packer 模板的变量部分中定义，如上一个示例所示:
```
{
  "variables": {
 "aws_access_key_id": "{{env `AWS_ACCESS_KEY_ID`}}",
 "aws_secret_access_key": "{{env `AWS_SECRET_ACCESS_KEY`}}",
 "aws_session_token": "{{env `AWS_SESSION_TOKEN`}}",
 "timezone": "US/Eastern"
 },
  "builders": [
    {
      "type": "amazon-ebs",
      "access_key": "{{user `aws_access_key_id`}}",
      "secret_key": "{{user `aws_secret_access_key`}}",
      "token": "{{user `aws_session_token`}}",
      "region": "us-east-1",
      "source_ami": "ami-5e414e24",
      "instance_type": "t2.micro",
      "ssh_username": "ec2-user",
      "associate_public_ip_address": "true",
      "ami_name": "docker-in-aws-ecs {{timestamp}}",
      "tags": {
        "Name": "Docker in AWS ECS Base Image 2017.09.h",
        "SourceAMI": "{{ .SourceAMI }}",
        "DockerVersion": "17.09.1-ce",
        "ECSAgentVersion": "1.17.0-2"
      }
    }
  ],
  "provisioners": [],
  "post-processors": []
}
```
Defining variables
在前面的示例中，请注意，您在构建器部分为 AWS 凭据设置定义了用户函数中引用的每个变量。例如，构建器部分将`access_key`设置定义为`{{user `aws_access_key_id`}}`，这又会引用变量部分中定义的`aws_access_key_id`变量。
每个变量依次引用`env`模板函数，该函数查找传递给该函数的环境变量的值。这意味着您可以按如下方式控制每个变量的值:
*   `aws_access_key_id`:使用`AWS_ACCESS_KEY_ID`环境变量配置
*   `aws_secret_access_key`:使用`AWS_SECRET_ACCESS_KEY`环境变量配置
*   `aws_session_token`:使用`AWS_SESSION_TOKEN`环境变量配置
*   `timezone`:默认值**美国/东方**配置。运行`packer build`命令时，通过设置`-var '='`标志(例如`-var 'timezone=US/Pacific'`，可以覆盖默认变量)
请注意，我们还没有在我们的 Packer 模板中定义`timezone`变量，因为您将在本章后面使用这个变量。
# 配置置备程序
置备程序是 Packer 模板的核心，构成了在定制和构建计算机映像时执行的各种内部置备操作。
Packer 支持多种不同类型的置备程序，包括流行的配置管理工具，如 Ansible 和 Puppet，您可以在[https://www.packer.io/docs/provisioners/index.html](https://www.packer.io/docs/provisioners/index.html)阅读更多关于不同类型置备程序的信息。
对于我们的机器映像，我们将只使用两种最基本的可用资源调配程序:
*   [外壳供应程序](https://www.packer.io/docs/provisioners/shell.html):使用外壳命令和脚本执行机器映像供应
*   [文件供应器](https://www.packer.io/docs/provisioners/file.html):将文件复制到机器映像中
作为对置备程序的介绍，让我们定义一个简单的 shell 置备程序来更新已安装的操作系统包，如下例所示:
```
{
  "variables": {
    "aws_access_key_id": "{{env `AWS_ACCESS_KEY_ID`}}",
    "aws_secret_access_key": "{{env `AWS_SECRET_ACCESS_KEY`}}",
    "aws_session_token": "{{env `AWS_SESSION_TOKEN`}}",
    "timezone": "US/Eastern"
  },
  "builders": [
    {
      "type": "amazon-ebs",
      "access_key": "{{user `aws_access_key_id`}}",
      "secret_key": "{{user `aws_secret_access_key`}}",
      "token": "{{user `aws_session_token`}}",
      "region": "us-east-1",
      "source_ami": "ami-5e414e24",
      "instance_type": "t2.micro",
      "ssh_username": "ec2-user",
      "associate_public_ip_address": "true",
      "ami_name": "docker-in-aws-ecs {{timestamp}}",
      "tags": {
        "Name": "Docker in AWS ECS Base Image 2017.09.h",
        "SourceAMI": "ami-5e414e24",
        "DockerVersion": "17.09.1-ce",