a benchmark measuring the performance of HTTP web servers. It is IO-intensive
and memory-intensive. We choose the performance index of requests per second
to denote the overall performance of the Apache server in processing concurrent
clients requests per second.
Table 5 demonstrates the result of our experiments. First, we can see that
ShadowMonitor introduces less overhead than LibVMI for all cases. The over-
head varies signiﬁcantly among diﬀerent benchmarks, which is mainly due to
the varying frequency of the monitored events. For workloads such as kernel
compilation, ShadowMonitor introduces 58% less overhead than LibVMI. Sec-
ond, in some computation-intensive benchmarks (e.g. WhetStone and File Com-
press), ShadowMonitor introduces slightly less overhead than SIM. However, in
memory-intensive benchmarks (e.g. Apachebench, kernel compilation, and pro-
cess creation benchmarks), SIM introduces 36.1%, 47.5%, and 600% more over-
head respectively. This is mainly because SIM uses shadow page table to manage
virtual memory and associated page table updating operations, which is much
slower than ShadowMonitor exploiting hardware-assisted memory virtualization
features.
686
B. Shi et al.
Table 5. Performance comparison by diﬀerent benchmarks
Benchmark
No monitor Our overhead LibVMI overhead SIM overhead
Kernel compile
4106.87 s
Apachebench
4323 lps
File Compress
41.69 s
7.34%
5.48%
1.12%
Whetstone
3339 Mwips 0.09%
Process creation 1785.8 lps
File copya
System call
2.7 Mlps
251.1 MBps 10.1%
0.71%
119%
Average
awith 256 bufsize 500 maxblocks
-
20.55%
65.1%
74.2%
8.47%
3.83%
9.1%
93.9%
7134%
1056%
54.8%
41.9%
1.55%
0.1%
613%
11.3%
123%
120.8%
7 Related Works
Virtualization technology has always played important roles in system security.
The very ﬁrst research on gaining the security by using virtualization was pro-
posed in [18,24]. In recent years, virtual machine introspection (VMI) technology
[7] has been widely used in addressing the security problems of computer sys-
tems. It takes advantage of the hypervisor software layer to provide security
support for the upper VM layer. Based on whether introspection uses the guest
VM’s kernel, VMI approaches can be further divided into in-VM introspection
and out-of-VM introspection.
Out-of-VM introspection places the security tools into hypervisor or a
separated trusted VM, and then watch and protect the untrusted guest VM
from outside. Therefore, it can detect the malicious activities without facing
the attacks. Existing works such as [17,28] mainly focus on bridging the seman-
tic gap [15], namely, to reconstruct the high-level knowledge from the internal
data structures of the guest operating system. And then use the reconstructed
information to detect attacks. Virtuoso [12] automatically creates introspection
tools by training the monitor application in a trusted VM and computing the
desired introspection information from the application. The introspection tool
will ﬁnally retrieve the information from outside of the target VM. VMST [13]
and POG [31] bridges the semantic gap by reusing the trusted VM’s kernel
code to monitor the target VM’s suspect behaviors. The security analysis pro-
grams run in the monitor VM and relevant data accesses are redirected to the
guest’s live memory. ImEE [34] points out that existing out-of-VM approaches
perform badly when accessing guest memory. To reduce the signiﬁcant overhead,
ImEE uses an immersive execution environment with which the guest memory
is accessed at native speed without any emulation. However, above-mentioned
solutions only support the passive monitor. This means they all have the ‘delay
detection’ trouble. Intruders may have issued the transient attack [26] between
the inspection intervals. To detect the transient attacks, event-driven, or active,
monitoring has been proposed. Lares [29] and VMDriver [6] provide the frame-
work that enables users insert hooks inside the guest OS so that it can invoke
ShadowMonitor: An Eﬀective In-VM Monitoring Framework
687
a security application residing in another VM when a particular event occurs.
Moreover, VMDriver separates semantic reconstruction module from the event
interception module, so it can support diﬀerent guest OS by changing diﬀerent
‘OS driver’. LibVMI [27] is a virtual machine introspection library based on the
related XenAccess [28]. It provides APIs for accessing the VM’s memory and
registering interception points. LibVMI can support diﬀerent OS by writing a
conﬁguration ﬁle beforehand. To our knowledge, LibVMI is the most popular
opensource VMI library. Therefore, many VMI tools such as Drakvuf [21] and
Volatility [32] are implemented based on LibVMI. To reduce the amount of man-
ual intervention in the process, Tappan Zee Bridge [11] proposes a method to
automatically identify locations to place useful interceptor points or hooks.
In-VM introspection is proposed to mitigate the serious performance issue
of out-of-VM introspection. In general, in-VM introspection relies on the guest
kernel’s capabilities, so it can also save the engineering eﬀorts when implement-
ing the security tools. Process Implanting [14] loads monitor tools such as strace
[5] and ltrace [3] into the guest VM and executes it with the camouﬂage of an
existing process. ShadowContext [33] hijacks an existing process in the monitored
VM, and then uses this process issues system calls on behalf of the introspec-
tion process. By this mean, ShadowContext can issue syscalls in the monitored
VM, thereby obtaining the security states of the VM. SYRINGE [8] is simi-
lar to the ShadowContext, it runs an agent in the monitor VM and allows the
introspection code to call the guest kernel functions in the agent’s context. For
these approaches, when the guest kernel is not trusted, the trustworthiness and
eﬀectiveness will be totally broken, because it is straightforward for a rootkit to
tamper with the introspection. SIM [30] solves this problem by using hardware
memory protection to create a hypervisor protected address space (SIM) where
a monitor can execute. Meanwhile, hooks are placed in the guest to intercept
events. When the event is intercepted, the address space switches to SIM by
dedicated gates and then switches back when monitoring is done.
Some eﬀorts also use virtualization to build high assurance execution envi-
ronments which protect applications from being attacked by the untrusted OS.
[19] provides application an encrypted memory view from the OS, and use hash
value to detect corruption of the physical pages caused by the OS. But they do
not prevent the illegal access to encrypted pages. KCoFI [9] and Virtual Ghost
[10] explored to change the original architecture into a protection mode, it cre-
ates applications ghost memory that the operating system cannot read or write.
SeCage [22] leverages hardware virtualization extensions to support eﬃcient iso-
lation of sensitive code manipulating critical secrets from the remaining code.
It separates control and data plane using VMFUNC mechanism in Intel proces-
sors to transparently provide diﬀerent memory views for diﬀerent compartments,
and allow low-cost and transparent invocation across domains without hyper-
visor intervention. Our idea of using hardware-enforced isolation is similar to
SeCage. However, diﬀerent from SeCage that focuses on the conﬁdentiality of
program data, our approach tends to provide event monitoring. In addition, with
SeCage, the applications should be aware of the existence of SeCage and make
688
B. Shi et al.
modiﬁcations to cooperate with SeCage, e.g., actively switch the address space.
On the contrary, our proposed approach is invisible to guest applications and
thus requires no modiﬁcation of them.
8 Conclusion
In this paper, we present a monitoring framework named ShadowMonitor, which
enables eﬃcient in-VM monitoring and provides hardware-enforced isolation
between security tools and untrusted guests. ShadowMonitor achieves eﬃciency
by placing monitor tools in the guest for monitoring events and achieves robust-
ness by separating the security tools and the untrusted guest into isolated com-
partments exploiting Intel multi-EPT features. We described the design of Shad-
owMonitor and presented a comprehensive security analysis. We have imple-
mented the prototype of ShadowMonitor on QEMU/KVM platform. The exper-
iment results demonstrate that ShadowMonitor introduces much less overhead
than existing methods. In the future, we plan to implement kernel drivers to sup-
port more types of guest kernels, such as Windows. We also plan to implement
ShadowMonitor on other hypervisors, such as Xen.
Acknowledgement. We would like to acknowledge all the anonymous reviewers and
Dr. Manuel Egele for their valuable comments and helps in improving this paper. This
work is supported by the Chinese National Key Research and Development Program
(2016YFB1000103), Chinese National Natural Science Foundation of China (grant no.
61602465), U.S. NSF grants OAC-1724845, ACI-1719397, CNS-1733596, and Microsoft
Research Faculty Fellowship 8300751. This work is also supported by Beijing Brain
Inspired Computing Program in BCBD innovation center. Lei Cui is the corresponding
author of this paper.
References
1. AMD64 architecture programmers manual
2. Intel 64 and IA-32 architectures software developers manual
3. Ltrace. https://en.wikipedia.org/wiki/Ltrace
4. Qemu-kvm. http://www.qemu-project.org
5. Strace. https://en.wikipedia.org/wiki/Strace
6. Xiang, G., Jin, H., Zou, D., Zhang, X., Wen, S., Zhao, F.: Vmdriver: a driver-based
monitoring mechanism for virtualization. In: 29th IEEE Symposium on Reliable
Distributed Systems (SRDS 2010) (2010)
7. Garﬁnkel, T., Rosenblum, M.: A virtual machine introspection based architecture
for intrusion detection. In: The Network and Distributed System Security Sympo-
sium, NDSS 2003 (2003)
8. Carbone, M., Conover, M., Montague, B., Lee, W.: Secure and robust monitoring
of virtual machines through guest-assisted introspection. In: Balzarotti, D., Stolfo,
S.J., Cova, M. (eds.) RAID 2012. LNCS, vol. 7462, pp. 22–41. Springer, Heidelberg
(2012). https://doi.org/10.1007/978-3-642-33338-5 2
9. Criswell, J., et al.: Kcoﬁ: complete control-ﬂow integrity for commodity operating
system kernels. In: 2014 IEEE Symposium on Security and Privacy, SP 2014 (2014)
ShadowMonitor: An Eﬀective In-VM Monitoring Framework
689
10. Criswell, J., et al.: Virtual ghost: protecting applications from hostile operating
systems. In: Proceedings of ASPLOS 2014, pp. 81–96. ACM (2014). https://doi.
org/10.1145/2541940.2541986
11. Dolan, B., et al.: Tappan zee (north) bridge: mining memory accesses for intro-
spection. In: Conference on Computer and Communications Security, CCS 2013
(2013)
12. Dolan-Gavitt, B., et al.: Virtuoso: narrowing the semantic gap in virtual machine
introspection. In: 32nd IEEE Symposium on Security and Privacy, S&P 2011 (2011)
13. Fu, Y., Lin, Z.: Space traveling across VM: automatically bridging the semantic
gap in virtual machine introspection via online kernel data redirection. In: IEEE
Symposium on Security and Privacy, SP 2012 (2012)
14. Gu, Z., et al.: Process implanting: a new active introspection framework for vir-
tualization. In: IEEE Symposium on Reliable Distributed Systems (SRDS 2011)
(2011)
15. Jain, B., et al.: Sok: introspections on trust and the semantic gap. In: IEEE Sym-
posium on Security and Privacy, SP 2014, Berkeley, CA, USA (2014)
16. Jang, D., et al.: Atra: address translation redirection attack against hardware-based
external monitors. In: Proceedings of CCS 2014 (2014)
17. Jiang, X., Wang, X., Xu, D.: Stealthy malware detection and monitoring through
VMM-based “out-of-the-box” semantic view reconstruction. ACM Trans. Inf. Syst.
Secur. 13(2), 12:1–12:28 (2010). https://doi.org/10.1145/1698750.1698752
18. Kelem, N.L., Feiertag, R.J.: A separation model for virtual machine monitors. In:
IEEE Symposium on Security and Privacy, pp. 78–86 (1991). https://doi.org/10.
1109/RISP.1991.130776
19. Kwon, Y., et al.: Sego: pervasive trusted metadata for eﬃciently veriﬁed untrusted
system services. In: Proceedings of ASPLOS 2016, pp. 277–290. ACM (2016).
https://doi.org/10.1145/2872362.2872372
20. Lee, H., et al.: KI-Mon: a hardware-assisted event-triggered monitoring platform
for mutable kernel object. In: The 22th USENIX Security Symposium (2013)
21. Lengyel, T.K., et al.: Scalability, ﬁdelity and stealth in the DRAKVUF dynamic
malware analysis system. In: Proceedings of ACSAC 2014 (2014)
22. Liu, Y., et al.: Thwarting memory disclosure with eﬃcient hypervisor-enforced
intra-domain isolation. In: Proceedings CCS 2015, 12–16 October 2015
23. Liu, Z., et al.: CPU transparent protection of OS kernel and hypervisor integrity
with programmable DRAM. In: Proceedings of ISCA 2013, 23–27 June 2013
24. Madnick, S.E., Donovan, J.J.: Application and analysis of the virtual machine app-
roach to information system security and isolation. In: Proceedings of the Workshop
on Virtual Computer Systems. ACM, New York (1973). https://doi.org/10.1145/
800122.803961
25. McKeen, F., et al.: Innovative instructions and software model for isolated execu-
tion. In: Proceedings of HASP 2013, p. 10. ACM (2013). https://doi.org/10.1145/
2487726.2488368
26. Moon, H., et al.: Vigilare: toward snoop-based kernel integrity monitor. In: The
ACM Conference on Computer and Communications Security, CCS 2012 (2012)
27. Payne, B.D.: Simplifying virtual machine introspection using LibVMI. https://doi.
org/10.2172/1055635
28. Payne, B.D., Lee, W.: Secure and ﬂexible monitoring of virtual machines. In: 23rd
Annual Computer Security Applications Conference (ACSAC 2007), 10–14 Decem-
ber 2007, Miami Beach, Florida, USA (2007)
29. Payne, B.D., et al.: Lares: an architecture for secure active monitoring using virtu-
alization. In: 2008 IEEE Symposium on Security and Privacy (S&P 2008) (2008)
690
B. Shi et al.
30. Sharif, M.I., et al.: Secure in-VM monitoring using hardware virtualization. In:
The Conference on Computer and Communications Security, CCS 2009 (2009)
31. Srinivasan, D., et al.: Process out-grafting: an eﬃcient “out-of-VM” approach for
ﬁne-grained process execution monitoring. In: Proceedings of CCS 2011 (2011)
32. Walters, A.: The volatility framework: volatile memory artifact extraction utility
framework (2007)
33. Wu, R., et al.: System call redirection: a practical approach to meeting real-world
virtual machine introspection needs. In: 44th Annual IEEE/IFIP International
Conference on Dependable Systems and Networks, DSN 2014 (2014)
34. Zhao, S., et al.: Seeing through the same lens: introspecting guest address space
at native speed. In: 26th USENIX Security Symposium, USENIX Security 2017
(2017)