如果 \fIstring1\fP 在当前语言环境的字典顺序中排在 \fIstring2\fP 之前则为真。 
.TP
\fIstring1\fP \fB>\fP \fIstring2\fP
如果 \fIstring1\fP 在当前语言环境的字典顺序中排在 \fIstring2\fP 之后则为真。 
.TP
.I \fIarg1\fP \fBOP\fP \fIarg2\fP
.SM
.B OP
是
.BR \-eq ,
.BR \-ne ,
.BR \-lt ,
.BR \-le ,
.BR \-gt ,
或
.BR \-ge
之一。这些算术二进制操作返回真，如果 \fIarg1\fP 与 \fIarg2\fP 分别是
相等，不等，小于，小于或等于，大于，大于或等于关系。
.I Arg1
和
.I arg2
可以是正/负整数。
.PD
.SH 简单命令扩展("SIMPLE COMMAND EXPANSION")
当执行一个简单命令时，shell 进行下列扩展，赋值和重定向，从左到右。
.IP 1.
解释器标记为与变量赋值 (在命令名之前的) 和重定向有关的词被保存等待随后处理。
.IP 2.
并非变量赋值或重定向的词被扩展。如果扩展后仍然有词保留下来，第一个词被
作为命令名，其余词是参数。
.IP 3.
重定向按照上面
.SM
.BR REDIRECTION
中讲到的规则进行。
.IP 4.
每个变量赋值中 \fB=\fP 之后的文本在赋予变量之前要经过波浪线扩展，
参数扩展，命令替换，算术扩展和引用删除。
.PP
如果没有得到命令名，变量赋值影响当前 shell 环境。否则，变量被加入
被执行的命令的环境中，不影响当前 shell 环境。如果任何赋值动作试图
为只读变量赋值，将导致出错，命令以非零状态值退出。
.PP
如果没有得到命令名，重定向仍会进行，但是不影响当前 shell 环境。
重定向出错将使命令以非零状态值退出。
.PP
如果扩展后有命令名保留下来，那么执行过程如下所示。否则，命令退出。
如果在任何扩展中包含命令替换，那么整个命令的退出状态是最后一个命令
替换的退出状态。如果没有进行命令替换，命令以状态零退出。
.SH "命令执行(COMMAND EXECUTION)"
命令被拆分为词之后，如果结果是一个简单命令和可选的参数列表，将执行
下面的操作。
.PP
如果命令名中没有斜杠，shell 试图定位命令位置。如果存在同名的 shell
函数，函数将被执行，像上面
.SM
.BR FUNCTIONS 
中讲到的一样。如果名称不是一个函数，shell 从 内建命令中搜索它。如果找到
对应命令，它将被执行。
.PP
如果名称既不是 shell 函数也不是一个内建命令，并且没有包含斜杠，
.B bash
搜索
.SM
.B PATH
的每个成员，查找含有此文件名 (可执行文件) 的目录。
.B Bash
使用散列表来储存可执行文件的全路径 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
中的
.B hash。
只有在散列表中没有找到此命令，才对
.SM
.B PATH
进行完整的搜索。如果搜索不成功，shell 输出错误消息，返回退出状态 127。
.PP
如果搜索成功，或者命令中包含一个或多个斜杠，shell 在单独的执行环境中
执行这个程序。参数 0 被设置为所给名称；命令的其他参数被设置为所给的参数，
如果有的话。
.PP
如果执行失败，因为文件不是可执行格式，并且此文件不是目录，就假定它是
一个 \fIshell script\fP (脚本)，一个包含 shell 命令的文件。此时将孵化 
(spawn) 出一个子 shell 来执行它。子 shell 重新初始化自身，效果就好像是
执行了一个新的 shell 来处理脚本一样，但是父 shell 保存的命令位置仍然被
保留 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
中的
.B hash)。
.PP
如果程序是以
.BR #!
开头的文件，那么第一行的其余部分指定了这个程序的解释器。
shell 执行指定的解释器，如果操作系统不会自行处理这种可执行文件格式的话。
解释器的参数由下面三部分组成：程序第一行中解释器名称之后的可选的一个参数，
程序的名称，命令行参数，如果有的话。
.SH "命令执行环境(COMMAND EXECUTION ENVIRONMENT)"
shell 有 \fIexecution environment\fP (执行环境) 的概念，由下列内容组成：
.sp 1
.IP \(bu
shell 启动时继承的打开的文件，例如在内建命令 \fBexec\fP 中使用重定向
修改的结果
.IP \(bu
当前工作目录，使用 \fBcd\fP，\fBpushd\fP 或者 \fBpopd\fP 设置，或是由
shell 在启动时继承得到
.IP \(bu
文件创建模式掩码，使用 \fBumask\fP 设置或是从 shell 的父进程中继承得到
.IP \(bu
当前陷阱，用 \fBtrap\fP 设置
.IP \(bu
shell 参数，使用变量赋值或者 \fBset\fP 设置，或者是从父进程的环境中继承得到
.IP \(bu
shell 函数，在执行中定义或者是从父进程的环境中继承得到
.IP \(bu
设为允许的选项，在执行时设置 (要么是默认允许的，要么是命令行给出的) 或者是
用 \fBset\fP 设置
.IP \(bu
用 \fBshopt\fP 设为允许的选项
.IP \(bu
用 \fBalias\fP 定义的 shell 别名
.IP \(bu
各种进程号，包含后台作业的进程号，\fB$$\fP 的值，以及 \fB$PPID\fP 的值
.PP
当并非 shell 函数或内置命令的简单命令执行时，它在一个由下述内容组成的
单独的执行环境中启动。除非另外说明，值都是从 shell 中继承的。
.sp 1
.IP \(bu
shell 打开的文件，加上对命令使用重定向修改和添加的文件
.IP \(bu
当前工作目录
.IP \(bu
文件创建模式掩码
.IP \(bu
标记为导出 (export) 的 shell 变量，以及传递到环境中为这个命令导出的变量
.IP \(bu
shell 捕捉的陷阱被重置为从 shell 的父进程中继承的值，shell 忽略的陷阱
也被忽略
.PP
在单独的环境中启动的命令不能影响 shell 的执行环境。
.PP
命令替换和异步命令都在子 shell 环境中执行。子 shell 环境是原有 shell 
环境的赋值，但 shell 捕捉的陷阱被重置为 shell 启动时从父进程中继承的值。
作为管道一部分来执行的内建命令也在一个子 shell 环境中执行。对子 shell
环境所作修改不能影响到原有 shell 的执行环境。
.PP
如果命令后面是 \fB&\fP 并且没有启用作业控制，命令的默认标准输入将是空文件
\fI/dev/null\fP。否则，被执行的命令从调用它的 shell 中继承被重定向修改的
文件描述符。
.SH 环境(ENVIRONMENT)
当一个程序执行时，它被赋予一个字符串数组，成为环境
.IR environment 。
它是一个
名称-值对 (\fIname\fP\-\fIvalue\fP) 的列表，形式是
.IR "name\fR=\fPvalue" .
.PP
shell 提供了多种操作环境的方法。启动时，shell 扫描自身的环境，为每个找到
的名字创建一个参数，自动地将它标记为
.I export
(向子进程导出的)。被执行的命令继承了这个环境。
.B export
和
.B declare \-x
命令允许参数和函数被加入到环境中或从环境中删除。如果环境中参数的值
被修改，新值成为环境的一部分，替换了旧值。所有被执行的命令继承的环境
包含 shell 的初始环境 (可能值被修改过)，减去被
.B unset
命令删除的，加上通过
.B export
和
.B declare \-x
命令添加的部分。
.PP
可以在任何
.I simple command
或函数的环境中设定暂时有效的参数，只要将参数赋值放在命令前面就可以了，
参见上面
.SM
.BR PARAMETERS
的描述。这些赋值语句只在这个命令的环境中有效。
.PP
如果设置了内建命令
.B set
的
.B \-k
选项，
.I 所有的
变量赋值都将放到命令的环境中，不仅是在命令名前面的那些。
.PP
当
.B bash
执行一个外部命令时，变量
.B _
被设置为命令的文件全名，然后被传递到命令的环境之中。
.SH 退出状态("EXIT STATUS")
从 shell 的角度看，一个命令退出状态是 0 意味着成功退出。
退出状态是 0 表明成功。非零状态值表明失败。当命令收到 fatal signal \fIN\fP
退出时，bash 使用 128+\fIN\fP 作为它的退出状态。
.PP
如果没有找到命令，为执行它而创建的子进程返回 127。如果找到了命令但是
文件不可执行，返回状态是 126。
.PP
如果命令由于扩展或重定向错误而失败，退出状态大于零。
.PP
shell 内建命令如果成功返回 0(\fItrue\fP)，执行时出错则返回非零 (\fIfalse\fP)。
所有内建命令返回 2 来指示不正确的用法。
.PP
\fBBash\fP 自身返回最后执行的命令的退出状态，除非发生了语法错误，
这时它返回非零值。参见下面的内建命令 \fBexit\fP。
.SH 信号(SIGNALS)
如果 \fBbash\fP 是交互的，没有设定任何陷阱，它忽略
.SM
.B SIGTERM
(这样 \fBkill 0\fP 不会杀掉交互的 shell)。
.SM
.B SIGINT
被捕获并处理 (从而使内建命令 \fBwait\fP 可以中断)。在所有情况下，
\fBbash\fP 忽略
.SM
.BR SIGQUIT 。
如果正在使用作业控制，
.B bash
忽略
.SM
.BR SIGTTIN ,
.SM
.BR SIGTTOU ,
和
.SM
.BR SIGTSTP .
.PP
\fBbash\fP 开始的并行作业的信号处理句柄都设置为 shell 从父进程中继承
的值。如果不是正在使用作业控制，异步命令还忽略
.SM
.B SIGINT
和
.SM
.B SIGQUIT 。
作为命令替换结果运行的命令忽略键盘产生的作业控制信号
.SM
.BR SIGTTIN ,
.SM
.BR SIGTTOU ,
和
.SM
.BR SIGTSTP .
.PP
如果收到信号
.SM
.BR SIGHUP，
shell 默认退出。在退出前，交互的 shell 向所有作业，运行的或停止的，发送
.SM
.B SIGHUP
信号。shell 向停止的作业发出
.SM
.B SIGCONT
信号来保证它们会收到
.SM
.BR SIGHUP .
要阻止 shell 向特定的作业发送信号，应当使用内建命令
.B disown
将作业从作业表中删除 (参见下面的
.SM
.B "shell 内建命令(SHELL BUILTIN COMMANDS)"
章节) 或者使用
.BR "disown \-h" 
来标记为不接受
.SM
.B SIGHUP。
.PP
如果使用
.BR shopt
设置了 shell 选项
.B huponexit，
在交互的登录 shell 退出时
.B bash
向所有作业发出
.SM
.B SIGHUP
信号。
.PP
当 \fBbash\fP 等待命令执行结束时，如果收到已设置了陷阱的信号，陷阱 
(trap) 将不会执行，直到命令结束。
当 \fBbash\fP 通过内建命令 \fBwait\fP 等待异步命令时，如果收到已设置
了陷阱的信号，将使得内建命令 \fBwait\fP 立即以大于 128 的状态值返回。
接着，陷阱将立即被执行。
.SH 作业控制("JOB CONTROL")
.I Job control
(作业控制) 指的是可以选择停止 (\fIsuspend\fP，挂起) 进程执行，并且
可以在之后继续 (\fIresume\fP，恢复) 执行的能力。用户一般在交互的人机界面
中使用这种功能。界面是由系统的终端驱动和
.BR bash 
共同提供的。
.PP
shell 将每个管道分配给一个
.I 作业(job)。
它保存一个当前运行的作业表，可以用
.B jobs
命令来列出。当
.B bash
启动一个异步的作业时
.IR (background，后台执行)，
它输出这样的一行：
.RS
.PP
[1] 25647
.RE
.PP
表明这个作业的作业号是 1，与作业相关连的管道中最后一个进程的
进程ID是 15647。管道中所有进程都是同一个作业的成员。
.B Bash
使用
.I 作业(job)
概念作为作业控制的基础。
.PP
为简化作业控制的用户界面的实现，操作系统负责管理\(lq当前终端的进程组\(rq
(\fIcurrent terminal process group ID\fP) 的概念。这个进程组的成员
(进程组 ID 是当前终端进程组 ID 的进程) 可以收到键盘产生的信号，例如
.SM
.BR SIGINT .
这些进程被称为
.IR foreground (前台的)。
.I Background (后台的)
进程是那些进程组 ID 与终端不同的进程；这些进程不会收到键盘产生的信号。
只有前台进程可以从终端读或向终端写。后台进程试图读/写终端时，将收到终端驱动程序发送的
.SM
.B SIGTTIN (SIGTTOU)
信号。这个信号如果没有加以捕捉，将挂起这个进程。
.PP
如果
.B bash
运行其上的操作系统支持作业控制，
.B bash
会包含使用它的设施。在一个进程正在运行的时候键入
.I suspend 挂起
字符 (通常是
.BR ^Z ,
Control-Z) 将使这个进程暂停，将控制权还给
.BR bash .
输入
.I "delayed suspend", 延时挂起
字符 (通常是
.BR ^Y ,
Control-Y) 将使这个进程在试图从终端读取输入时暂停，将控制权还给
.BR bash .
用户接下来可以控制此作业的状态，使用
.B bg
命令使它在后台继续运行，