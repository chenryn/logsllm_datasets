Tor had RTTs of over half a second. In other words, the 99.9th
percentile of relay pairs see a reduction in RTT from 487 ms in
Tor to 125 ms in ShorTor. Additionally, 25.4 % of relay pairs
cut their RTT in half (or more) using ShorTor.
Figure 6(b) also shows that ShorTor’s RTT values largely
correspond the physical distance between the endpoints: relay
pairs that are across an ocean necessarily experience a higher
latency than those in the same region.
C. ShorTor Circuits
We model the expected reduction in latency for end users by
applying ShorTor to Tor circuits. Due to Tor’s non-uniform relay
selection probabilities, our pairwise latency dataset does not
directly account for how probable any of the observed RTTs are.
As such, we include an evaluation of ShorTor on two million
Tor circuits built according to Tor’s default parameters. Because
4Missing measurements are largely due to churn in the Tor network causing
relay pairs to not be live simultaneously.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:07 UTC from IEEE Xplore.  Restrictions apply. 
91941
Fig. 7: Reduction in Round Trip Time experienced by 2M Tor circuits
when routing with ShorTor. We show an expanded view of the ﬁrst
150 ms on the left. The CDF line is reversed: for instance, 0.01 % of
circuits see a speedup of at least 1,000 ms.
Tor averages 2M daily users, this roughly approximates the
expected distribution of circuits over one day of use.
1) Circuit Selection: Using the Tor path selection simulator
(TorPS) [47], we choose two million circuits over all 8,524
relays we observed. Because we collect latency measurements
from only the 1,000 largest Tor relays by consensus weight,
many of these circuits have incomplete latency data. We select
circuits from the full set of relays, despite incomplete latency
data, to ensure that our distribution of circuits closely resembles
that of real Tor users. We handle the gaps in our data by
reporting on the reduction in latency provided by ShorTor rather
than absolute RTTs. All circuit legs with missing measurements
are reported as a speedup of 0 ms (equivalent to baseline
Tor). The speedups we observe can thus be thought of as the
minimum that our set of simulated circuits would experience
using ShorTor.
2) Latency of ShorTor Circuits: In this section, we evaluate
the performance of ShorTor on our set of 2M circuits. We only
indicate a speedup for a circuit if: (1) it contains two adjacent
relays that are present in both our measurement dataset and in
the set of relays supporting ShorTor and (2) some other relay
that supports ShorTor can provide a faster route between the
circuit relays. 68.0 % of circuits have no available measurement
data for either leg and are shown with the default speedup of
0 ms. Of the 32.0 % of circuits with a latency measurement
for at least one leg, 83.7 % see a speedup with ShorTor.
As shown in Figure 7, 1 % of the 2M circuits see a latency
improvement of 122 ms or greater and 0.012 % of circuits saw
a speedup of over a second. For details on the relationship
between RTTs and the page load times experienced by users,
see Section IV-E
3) Incremental Deployment: As previously described in
Section III-C3, ShorTor is designed to function at relatively
low levels of deployment. Our previous evaluation (Figure 7)
assumed that all 1,000 of the relays we measured supported
ShorTor. In Figure 8, we show that ShorTor is also capable
of reducing latency for Tor circuits even at substantially lower
levels of deployment. As before, we only apply ShorTor when
all relays involved support the protocol and assume that all
Fig. 8: Reversed CDF for incremental deployment speedups.
unmeasured pairs of relays have no speedup. We ﬁnd that
circuits at the 99.9th percentile see latency reductions of 178 ms
even when only the top 500 relays support ShorTor.
D. Cost of ShorTor
ShorTor’s primary cost, aside from the one-time startup
cost of modifying the Tor protocol, is in terms of bandwidth
overhead from its longer paths. In the steady state, Tor circuits
will use extra bandwidth for each hop using a via relay: an
overhead of 1/3 above the original trafﬁc. If we do this for
every hop with any speedup, no matter how small, this uses
10.9% extra bandwidth over Tor right now. However, if we
only use ShorTor when it offers a speedup above a certain
cutoff, this overhead quickly declines:
Cutoff
Overhead
0 ms
10.9%
10 ms
6.6%
25 ms
3.8%
50 ms
2.3%
100 ms
0.8%
Further, relays will only carry via trafﬁc when they have
excess capacity. Tor reports consistently under 50% bandwidth
utilization across the network [67].
A more minor source of bandwidth overhead is control
information around routing tables and data races. First, re-
lays must keep their latency tables up to date following
LATENCIES.UPDATE() (Protocol 2 in Section III-B3). This
requires each relay send its latency table to every other relay
once per day. Using 16 bits per RTT estimate, each relay must
send about 100 MB per day5 in total—about 0.05% of the
minimum recommended relay bandwidth [68]. Second, they
must establish via connections using RACE.RUN() (Protocol 3
in Section III-B4), which sends a small, conﬁgurable number
of extra packets (e.g., 5), equivalent to about 2.5 kB6 of extra
data. Data races have tunable frequency and will only occur if
latency estimates indicate a speedup above the cutoff. Assuming
two million circuits per day with each circuit participating in
a data race at both hops, data races will consume 10 GB over
the course of the day across the entire network. Currently,
Tor advertises bandwidth of 600 GB/s and consumes less than
300 GB/s [58].
RTT × 7000 relays per table × 7000 relays sending their table each day.
5Assuming 7000 concurrently active relays in the Tor network: 16 bits per
6Tor cells are ≈ 0.5 kB each.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:07 UTC from IEEE Xplore.  Restrictions apply. 
101942
Thus, ShorTor’s bandwidth overhead is dominated by the
longer path lengths and is parameterizable based on cutoffs for
latency reduction as shown above. This overhead may not be
distributed evenly among relays, but we note that participation
in ShorTor is fully optional (see discussion of incremental
deployment in Section III-C3), so resource constrained relays
may simply choose not to participate at any stage of ShorTor
or decide not to support the protocol entirely if overhead is a
concern.
E. Impact of ShorTor on User Experience
Perceived latency in the form of page load times (PLT)
has a demonstrable impact on users in anonymity systems. In
qualitative user experience research, Tor users speciﬁcally cite
latency as an issue keeping them from adopting Tor [33–35].
K¨opsell [52] ﬁnds a linear relationship between latency and
number of users for an anonymous communication system.
In many cases, latency (not bandwidth) is the limiting factor
for page loads: increases in RTTs cause linear increases to
PLT, often with a 10× multiplier. Netravali et al. [63] ﬁnd that
increasing RTT from 25 ms to 50 ms increases 95th-percentile
PLT across 350 popular sites from 1.5 s to 3.4 s, and increasing
to 100 ms raises the PLT to 6.1 s. Many factors contribute to this
multiplier, including TCP congestion control, TLS handshakes,
and complex web sites where an initial page fetch may spawn
additional requests [63,70,71].
To bridge the gap between our RTT-based evaluation of
ShorTor and the more intuitive usability metric of PLTs, we
simulate the impact of network delays on page load times
over Tor, ﬁnding that small increases in delays lead to large
increases in page load times. First, we measure the time it
takes to load the New York Times and Google homepages over
ten Tor circuits, chosen by the Tor path selection algorithm,
without modiﬁcation or delay. We then model changes in RTT,
such as those from a link delay, by using the Linux tc utility
to introduce an artiﬁcial delay for each packet sent over the
same ten circuits.
To evaluate ShorTor, we selected delays that correspond to
speedups seen by ShorTor circuits in Section IV-C to obtain
an estimate for the potential difference in page load times
experienced by end users. Of the circuits in our measurement
dataset, 5.04 % experience a speedup of at least 50 ms, 1.66 %
of at least 100 ms, and 0.04 % of at least 500 ms.
We report
the median change in PLT for
fetching
google.com and nytimes.com over these ten circuits
when trafﬁc is delayed by 50 ms, 100 ms, and 500 ms:
Network Delay
Website
google.com ΔPLT:
nytimes.com ΔPLT:
50 ms
0.98 s
1.66 s
100 ms
1.96 s
2.34 s
500 ms
10.40 s
15.80 s
We ﬁnd that Tor follows the trend seen in prior work with
even 50 ms changes in RTT increasing PLTs by approximately
a second. In the context of ShorTor, 1 %, or 20k, of the 2M
circuits we evaluated saw a reduction in their RTT of at least
120 ms which corresponds to an expected two second drop in
PLT. As Tor sees approximately two million daily users, each
building at least one circuit, ShorTor’s impact on tail latencies
is likely to improve the experience of tens of thousands of Tor
users daily.
V. SECURITY ANALYSIS
In this section, we analyze the security of ShorTor. We
consider how ShorTor’s use of via relays might impact an
adversary’s ability to deanonymize Tor trafﬁc in practice. To
do so, we examine the change in the adversary’s view of the
Tor network when using ShorTor as compared to the baseline
Tor protocol. While via relays never observe the sender or
recipient of Tor trafﬁc directly, they are able to observe trafﬁc
streams and other relays on the circuit, which could indirectly
deanonymize the sender or recipient. For this purpose, we
use the AnoA [12,60] framework for analyzing the anonymity
guarantees of anonymous communication protocols to help us
determine the potential anonymity impact of vias in ShorTor.
A. AnoA Analysis
Backes et al. [13, 14] apply the AnoA framework to analyze
the anonymity of the Tor network and the impact proposed
protocol modiﬁcations might have on Tor’s anonymity. AnoA
uses ideas from differential privacy [29] to determine an
adversary’s advantage in a challenge-response game, which
models the ability to distinguish between trafﬁc streams. In
this game, the adversary statically corrupts a set of “trafﬁc
observation points” (i.e., Tor relays) and attempts to distinguish
between two possible scenarios involving different senders
and recipients for each trafﬁc stream. The adversary’s ability
to distinguish between these scenarios models the overall
anonymity of the Tor network.
Deﬁnition V.1 (Anonymity Notions [12]; simpliﬁed). Let A
be a passive network adversary consisting of a set of corrupted
relays and capable of observing a subset of network trafﬁc
through these relays. The anonymity notions are:
Sender anonymity: the probability that A can distinguish
between two potential senders of a given trafﬁc stream.
Recipient anonymity: the probability that A can distinguish
between two potential recipients of a given trafﬁc stream.
Relationship anonymity: the probability that A is capable of
determining which sender is communicating with which
recipient. The anonymity game is deﬁned for all pairs
of senders (Alice and Bob) and recipients (Charlie and
Diana); A wins by successfully linking a trafﬁc stream
to the correct communicating pair.
Tor relays are not all created equal: stable, high bandwidth re-
lays see a larger fraction of Tor’s trafﬁc, but are also more costly.
To accurately analyze an adversary’s impact on anonymity, it is
necessary to decide which subset of relays are most beneﬁcial
to corrupt. Backes et al. [13, 14] develop MATOR [19] to
model different adversarial corruption strategies. Following
Backes et al. [13, 14], we consider four adversarial corruption
strategies: k-collusion, bandwidth, monetary, and geographic.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:07 UTC from IEEE Xplore.  Restrictions apply. 
111943
With the k-collusion strategy, the adversary corrupts k relays
that provide it with the most advantageous view of Tor’s
network. With the other three strategies, the adversary has
a similarly ﬁxed “budget” (e.g., cumulative bandwidth) which
constrains the optimal set of relays to corrupt. The MATOR
tool [19] optimizes each adversarial strategy based on the
allocated budget and anonymity notion to empirically compute
the worst-case anonymity bound under AnoA.
B. Differential Advantage
We deﬁne how we measure the theoretical impact of ShorTor
on anonymity in Tor in terms of the difference in an adversary’s
advantage in ShorTor vs. baseline Tor.
Notation: We write N for the set of all Tor relays
and C for the set of all Tor circuits (consisting of three
independent relays). We denote the path selection and via
selection algorithms by PS, and VS, respectively. We note that
VS is unique to ShorTor and is separate from the path selection
algorithm PS used in Tor. We use ⊥ for a “null” element.
Deﬁnition V.2 (Via Relay). Let C ∈ N × N × N be a Tor
circuit consisting of three circuit relays. A via relay v ∈ N
is a Tor relay routing packets between a pair of consecutive
circuit relays in C.
Remark 1. A via relay is semantically equivalent to a wire
connecting two consecutive Tor relays in the circuit. Via relays
only forward trafﬁc and are not involved in circuit establishment
or any of Tor’s onion-encryption operations.
We ﬁrst deﬁne adversary observations on the network. We
then use this to deﬁne the differential advantage—the impact
that ShorTor introduces relative to baseline Tor.
Deﬁnition V.3 (Adversary Observations). Let V ⊆ N be the
set of candidate via relays and let C be the set of all three-relay
circuits. Fix a set N ∗ ⊆ N of adversary-corrupted relays. We
deﬁne the function: ObsN ∗ : C×V∪{⊥}×V∪{⊥} → O, which
takes as input a circuit and a pair of via relays (possibly ⊥),
and outputs the set of observation points (adversary-corrupted
circuit and via relays).
Deﬁnition V.3 captures the “view” of the adversary for a
given circuit. For example, an adversary corrupting the middle
relay on a single circuit sees the guard and exit relays on the
circuit, but not the sender or recipient.
Deﬁnition V.4 (Differential Advantage). Let V ⊆ N be the set
of candidate via relays. Let PS be a randomized path selection
algorithm and VS be a via relay selection algorithm for a circuit.
Fix N ∗ ⊆ N to be the set of adversary-corrupted relays and
let C be a set of all three-relay circuits output by PS. For a
circuit C ∈ C and (v1, v2) ∈ suppC∈C|VS(C)|, the adversary is