title:Cross-Architecture Bug Search in Binary Executables
author:Jannik Pewny and
Behrad Garmany and
Robert Gawlik and
Christian Rossow and
Thorsten Holz
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Cross-Architecture Bug Search
in Binary Executables
Jannik Pewny∗, Behrad Garmany∗, Robert Gawlik∗, Christian Rossow∗†, Thorsten Holz∗
∗Horst G¨ortz Institut (HGI)
Ruhr-Universit¨at Bochum
†Cluster of Excellence, MMCI
Saarland University
Abstract—With the general availability of closed-source soft-
ware for various CPU architectures, there is a need to identify
security-critical vulnerabilities at the binary level to perform
a vulnerability assessment. Unfortunately, existing bug ﬁnding
methods fall short in that they i) require source code, ii) only work
on a single architecture (typically x86), or iii) rely on dynamic
analysis, which is inherently difﬁcult for embedded devices.
In this paper, we propose a system to derive bug signatures
for known bugs. We then use these signatures to ﬁnd bugs in
binaries that have been deployed on different CPU architectures
(e.g., x86 vs. MIPS). The variety of CPU architectures imposes
many challenges, such as the incomparability of instruction set
architectures between the CPU models. We solve this by ﬁrst
translating the binary code to an intermediate representation,
resulting in assignment formulas with input and output variables.
We then sample concrete inputs to observe the I/O behavior of
basic blocks, which grasps their semantics. Finally, we use the
I/O behavior to ﬁnd code parts that behave similarly to the bug
signature, effectively revealing code parts that contain the bug.
for cross-
architecture bug search in executables. Our prototype currently
supports three instruction set architectures (x86, ARM, and
MIPS) and can ﬁnd vulnerabilities in buggy binary code for
any of these architectures. We show that we can ﬁnd Heartbleed
vulnerabilities, regardless of the underlying software instruction
set. Similarly, we apply our method to ﬁnd backdoors in closed-
source ﬁrmware images of MIPS- and ARM-based routers.
We have designed and implemented a tool
I. INTRODUCTION
Software bugs still constitute one of the largest security
threats today. Critical software vulnerabilities such as memory
corruptions remain prevalent in both open-source and closed-
source software [40]. The National Vulnerability Databases
listed 5,186 security-critical vulnerabilities in 2013, and trends
from recent years suggest a steady number of software
bugs. However, even though vulnerabilities are known,
it
is oftentimes challenging to tell which particular software
is vulnerable, especially if software libraries are re-used by
larger software projects [15]. Worse, state-of-the-art tools have
deﬁcits in handling libraries that become part of software that
has been deployed on a variety of architectures.
The problem of ﬁnding bugs at the source code level has
been addressed by a lot of researchers [14], [17], [18], [22],
[42]. Professional code veriﬁcation tools ensure source code
quality and a number of automated bug ﬁnding proposals
analyze source code to ﬁnd security-critical bugs. However,
access to source code is quite a rigid assumption when
it comes to ﬁnding bugs. A lot of prominent software is
available only as a binary, either as commercial software (e.g.,
© 2015, Jannik Pewny. Under license to IEEE.
© 2015, Jannik Pewny. Under license to IEEE.
DOI 10.1109/SP.2015.49
DOI 10.1109/SP.2015.49
709
709
MS Office) or as freely-available closed-source software
(e.g., Adobe Reader or Flash). Software on embedded
devices, typically referred to as ﬁrmware, is usually closed-
source, implemented in an unsafe language, and re-uses (po-
tentially vulnerable) code from third-party projects [8], [37].
What is more, closed-source software may be even stripped,
i.e.,
information like
function names or data types. Thus, we seek a solution to ﬁnd
vulnerabilities at the binary level without requiring symbols.
This alone makes the process to ﬁnd bugs signiﬁcantly more
challenging than source code-level approaches.
the binaries do not contain symbol
Another challenge in ﬁnding bugs at the binary level is
that more and more software is cross-compiled for various
CPU architectures. That is, even if the bug is known for one
particular architecture (say Intel x86), ﬁnding a bug stemming
from the same source code, but used in a project for another
architecture (say ARM), poses various difﬁculties: Binaries
from varying architectures differ in instruction sets, function
offsets and function calling conventions, to name but a few
signiﬁcant complications. This is problematic for many kinds
of cross-compiled software. For example, hardware vendors
use the same code base to compile ﬁrmware for differ-
ent devices (e.g., home routers, cameras, VoIP phones) that
operate on varying CPU architectures. Similarly, prominent
software such as MS Office, Adobe Reader or Flash,
is already available for multiple platforms and architectures,
most recently with the increase of ARM-based Windows RT
deployments. The problem is compounded if cross-compiled
software includes well-known, but vulnerable libraries. For
instance, after discovery of the Heartbleed bug in OpenSSL,
there is a growing list of affected closed-source software
running on various architectures (x86, MIPS, ARM, PowerPC,
etc.). Currently, though, there is no practical way to automat-
ically ﬁnd such known bugs in binaries belonging to different
architectures. Users have to resort to manual inspection or have
to rely on the vendors to inspect the closed-source code for
bugs. However, as the Heartbleed case illustrated once more,
vendors are not particularly quick to evaluate security risks in
their products. Oftentimes this leaves open a signiﬁcant time
window during which security-critical bugs can be exploited.
Worse,
there is no guarantee that end-of-life hardware or
ﬁrmware from vendors that have disappeared over time is ever
inspected for well-known bugs, although such systems are still
widely used by both consumers and industry.
In this paper, we address this problem and make the ﬁrst
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:33 UTC from IEEE Xplore.  Restrictions apply. 
step towards ﬁnding vulnerabilities in binary software and
across multiple architectures. As the cross-architecture feature
complicates the bug search quite a bit, we focus on the
following use case: Once a bug is known—in any binary
software compiled to a supported architecture—we aim to
identify equally vulnerable parts in other binaries, which were
possibly compiled for other architectures. That is, we use a bug
signature that spans a vulnerable function (or parts of it) to ﬁnd
similar bug instances. While this limits our work to re-ﬁnding
similar, previously documented instances of bug classes, ex-
actly this problem has evolved to a daily use case in the era
of cross-compiled code. For example, Heartbleed affected a
tremendous number of closed-source software products from
multiple vendors across all CPU architectures. The list of
affected software is still growing and there is no automated
way to identify vulnerable software versions. Similarly, it was
discovered that several Linksys and Netgear devices included a
backdoor in their ﬁrmware, but users had to trust the vendors to
name all affected products. Our goal is to provide a mechanism
to assist a human analyst in such scenarios, where the analyst
deﬁnes a bug signature once and then searches for parts in
other software binaries—from and to any architecture—that
contain a similar bug.
To this end, we propose a mechanism that uses a uniﬁed
representation of binaries so that we can compare binaries
across different
instruction sets (i.e., across architectures).
That is, we ﬁrst lift binary code for any architecture—we
currently support Intel x86, ARM and MIPS due to their high
popularity—to an intermediate representation (IR). Even in
this IR, we are bound to binary information lacking symbols
and data types. Based on this IR code, we thus aim to grasp the
semantics of the binary at a basic block level. In particular,
we build assignment formulas for each basic block, which
capture the basic block’s behavior in terms of input and output
variables. An input variable is any input that inﬂuences the
output variables, such as CPU registers or memory content.
We then sample random input variables to monitor their effects
on the output variables. This analysis results in a list of
input/output (I/O) pairs per assignment formula, which capture
the actual semantics of a basic block. Although the syntax of
similar code is quite different for the various CPU architectures
(even in the intermediate representation), we can use such
semantics to compare basic blocks across ISAs.
We use the semantic representation to ﬁnd the bug signature
in other arbitrary software that is potentially vulnerable to the
bug deﬁned in the signature. The bug signature can be derived
automatically from a known vulnerable binary program or
from source code, and may simply represent the entire vul-
nerable function. To preserve performance, we use MinHash
to signiﬁcantly reduce the number of comparisons between
I/O pairs to ﬁnd suitable basic block matches. Lastly, once
basic block matches have been found, we propose an algorithm
that leverages the control ﬂow graph (CFG) to expand our
search to the entire bug signature. As output, our system lists
functions ordered by their similarity to the bug signature. This
gives analysts a compact overview of potentially vulnerable
functions in the analyzed binary.
To evaluate our approach, we ﬁrst systematically test how
well our system performs when matching equivalent func-
tions across binaries that have been compiled for different
architectures, with different compilers, and using varying
optimization levels. The evaluation shows that our system is
accurate in matching functions with only a few false positives.
For example, we show that our approach ranks 61% of the
OpenSSL ARM functions in a MIPS-based OpenSSL binary
among the 10 closest function matches. Second, we evaluate
our system in various real-world use cases, for which we
extracted the vendor-compiled software binaries from ﬁrmware
in order to search for real-world vulnerabilities. Our system
ﬁnds the Heartbleed bug in 21 out of 24 tested combinations
of software programs across the three supported architectures.
Further, we ﬁnd vulnerable RouterOS ﬁrmware and conﬁrm
backdoors in Netgear devices. Note that during all of these
real-world tests we did not have access to the source code
and thus used the actual software binaries contained in the
corresponding ﬁrmware—highlighting that our design even
tolerates deviations in build environments.
We obtained these results under certain assumptions, e.g.,
that the binaries have not been obfuscated. However, we also
show that our system can tolerate (more common) binary
disturbances to some extent, such as compiler optimizations
or differences in build environments—in addition to tackling
most of the previously-unsolved discrepancies in comparing
code between ISAs from various architectures.
Furthermore, our method can be used with sub-function
granularity, which is vital for bug search. While function-
wise matching techniques (like BLEX [11], BinDiff [10] or
Expos´e [32]) could ﬁnd bugs in functions that have been
cloned, it is often useful to ﬁnd re-used parts of a vulnerable
function in other functions, instead of ﬁnding mere clones.
The uses of our proposed system are manifold; in this work
we focus on identifying unpatched bug duplicates. However,
we are not limited to doing so in the same program (i. e., the
same binary), and do not even require that the target binary is
compiled for the same architecture. For example, companies
that run closed-source software from vendors that do not sup-
port particular software/devices anymore (e.g., if the product
is beyond end-of-life or if the vendor goes out of business)
could independently verify, whether common bugs are present.
Similarly, if bugs in widely used libraries become known (such
as Heartbleed, recently), CERTs can ﬁnd affected products in
a short amount of time. Our concept can also be applied to
search for known backdoors in closed-source applications. We
envision more use cases of our system, such as binary difﬁng,
searching for software copyright infringement in binaries, or
revealing code sharing across binaries.
In summary, our four main contributions are as follows:
• We lift ARM, x86 and MIPS code to uniﬁed RISC-like
expressions that capture I/O syntax per basic block.
• We introduce a sampling and MinHashing engine to cre-
ate compact and cheaply-comparable semantic summaries
of basic blocks—the basis of our bug search.
710710
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:33 UTC from IEEE Xplore.  Restrictions apply. 
• We deﬁne a metric to compare code structures like sub-
CFGs and functions, which enables us to search for bug
signatures in arbitrary software binaries.
• We empirically demonstrate the viability of our approach
for multiple real-world vulnerabilities spanning software
across three supported architectures.
II. APPROACH
We now outline our general approach for cross-architecture
bug search in binary executables. Our goal is to use a code
similarity metric to ﬁnd code locations that are similar to code
containing a bug. The assumption here is that similar code of-
ten stems from slightly modiﬁed shared code, which typically
also shares the same bug. We are particularly interested in
ﬁnding bugs that are security-critical. Our method, though,
supports ﬁnding many types of bugs, and we thus use the
words bug and vulnerability interchangeably.
A. Workﬂow
We use a bug signature,
i.e., a piece of binary code
that resembles a speciﬁc instance of a vulnerability class,
to ﬁnd possible vulnerabilities in another binary program
(target program). To this end, we ﬁrst derive a bug signature
(Section II-B). Then, we transform both the bug signature
and the target program into an intermediate representation
(Section II-C) and build compact basic block-wise semantic
hashes (Section II-D). All these transformations are a one-time
process for both the bug signature and the target program.
Figure 1 illustrates this process for the instructions ldrb
(ARM), lbu (MIPS) and lodsb (x86). First, we convert
these assembly instructions to an intermediate representation,
which results in a list of assignment formulas that we represent
as easy-to-parse S-Expressions (symbolic expressions). The
assignment formulas detail how an output variable is inﬂu-
enced by its inputs. For example, the ﬁrst line in the x86 case
represents that the ﬁrst eight bits of the address where ESI
points to are stored in register AL. The number of inputs differs
for each formula (e.g., no input for the terminator, one input
for the AL, v0 and R3 variables, or two inputs for the ESI
variable). Next, using random concrete input values (dashed
box), we sample the input/output behavior of these formulas
(we illustrate sampling of the ﬁrst formula only). For example,
in the x86 formula of ESI, the concrete inputs (5, 1) result
in an output of 6. In the last step, we build semantic hashes
over the I/O pairs, which allow us to efﬁciently compare the
I/O behavior of basic blocks.
In the search phase, we use the transformed bug signature
(i.e., its representation as a graph of assignment formulas) to
identify bugs in the similarly-transformed binaries. That is,
we look for promising matching candidates for all individual
basic blocks of the bug signature in the target program
(Section II-E). For each such candidate pair, we apply a
CFG-driven, greedy, but locally-optimal broadening algorithm.
The algorithm expands the initial match with additional basic
blocks from the bug signature as well as the target program
(Section II-F). The algorithm then computes the similarity
between bug signature and target programs, returning a list
of code locations ordered by their similarity to the signature.
In the following, we explain these steps in more detail.
B. Bug Signatures
A bug signature is just like normal binary code: It consists
of basic blocks and possible control-ﬂow transitions between
these basic blocks. Therefore, any selection of basic blocks
can, in principle, be used as a bug signature. For example,
the bug signature could represent an entire buggy function,
limiting the manual effort
to deﬁne the bug signature in
more detail. However, users of our system should reﬁne the
bug signatures to smaller code parts, which cover only the
bug and its relevant context. Note that our approach only
requires a discriminative piece of code—typically, the context
in which a bug occurs is so distinctive that our approach
is completely independent from the vulnerability type. We
have successfully evaluated buffer overﬂows, logical bugs and
software backdoors.
However, it is quite hard to estimate how the signature size
inﬂuences results in general: An additional non-characteristic
basic block, which is essential to the structure of the vulner-
ability and discriminative in its context, will likely improve
results, while a characteristic basic block, which is non-
essential to the vulnerability, may lead to false positives.
While our target is to search bugs in binaries (i.e., without
access to source code), we do not necessarily have to limit
ourselves to use binary information only when deriving the bug
signature. For example, consider the typical scenario that a bug
in open-source software is publicized. This usually means that
the buggy lines of code are known, which we can leverage to
deﬁne the bug signature. Thus, we can use debug information
to automatically ﬁnd the basic blocks that correspond to the
vulnerable function part, effectively deriving bug signatures
with almost no manual effort.
Note that even if the buggy source code is available, source
code-based bug ﬁnding techniques still cannot be applied if
the vulnerable code became part of closed-source applications.
In practice, buggy open-source code is re-used for closed-
source applications, for which only the binary representation
is available. For instance, vulnerabilities in the open-source
software projects BusyBox and OpenSSL became part of
many proprietary and closed-source ﬁrmware images.
C. Unifying Cross-Architecture Instruction Sets
Obviously, the instruction sets of architectures like x86,
ARM, and MIPS are quite distinct. Aside from the instruction
set, the calling conventions, the set of general- and special-
purpose CPU registers, and the memory access strategies (e.g.,
load/store on RISC as opposed to CISC architectures like x86)
also vary for each architecture. Even if binaries stem from