(100.00%)
(100.00%)
(100.00%)
appearant difference is a decrease from 96.81% to 33.88%
when changing regex engines from Java-8 to Java-13), Re-
DoSHunter provides attack strings with a stable 100% success
rate, indicating the attack strings generated by ReDoSHunter
are more effective than existing works.
Summary to RQ1: ReDoSHunter can achieve 100% pre-
cision and 100% recall against four tested regex engines,
compared with the best dynamic approach reaching 100%
precision yet only 1.82% recall, and the highest recall of
static methods is only 36.35%. Also, the regexes with more
than one ReDoS-vulnerabilities are prevalent, taking up to
more than 60% in the collected datasets. Besides, all the at-
tack strings generated by ReDoSHunter can launch ReDoS
attack successfully, while none of existing works achieve
100% success rate. To sum up, ReDoSHunter achieved a
remarkable balance between effectiveness and efﬁciency
empowered by the advantages of both static and dynamic
methods.
4.3 Results on Known Vulnerabilities
In this section, we exercise the existing approaches as well
as ReDoSHunter against the conﬁrmed ReDoS-related CVEs
to show the effectiveness on identifying the real-world vul-
nerabilities. The result is shown in Table 10. The columns
denote the source projects where the CVEs from (Project),
the CVE index (CVE ID) and whether the approaches suc-
cessfully identify the corresponding CVEs. We can see that
3858    30th USENIX Security Symposium
USENIX Association
#1 #2 #3 #4 #5 #6 #7 #8 #9 #10 #11 #12 #13 #14 #15 #16 #17 #18 #19 #20 #21 #22 #23 #24 #25 #26 #27 #28 #29 #30 #31 #32 #33 #34 #35
NQ
EOD
EOA
POA
SLQ
4
6
13
23
17
Figure 9: The Percentage of Five Patterns on Real-world ReDoS-vulnerabilities.
Table 10: The Overall Evaluation Results on Real-world
ReDoS-vulnerabilities. The abbreviations RXR, RER, NAA,
SAX, RET, SDL, RSE and RHR represent RXXR2, Rex-
ploiter, NFAA, safe–regex, Regexploit, SDL, ReScue and Re-
DoSHunter, respectively. ! and % denote whether the corre-
sponding method can successfully detect the vulnerability or
not.
No.
Project
CVE ID
RXR RER NAA SAX RET
SDL
RSE RHR
#1
#2
#3
#4
#5
#6
#7
#8
#9
jquery-validation
CVE-2021-21252
CairoSVG
CVE-2021-21236
date-and-time
CVE-2020-26289
fast-csv
Python
CVE-2020-26256
CVE-2020-8492
websocket-extensions
CVE-2020-7663
websocket-extensions
CVE-2020-7662
url-regex
uap-core
CVE-2020-7661
CVE-2020-5243
#10 waitress
CVE-2020-5236
#11 Cisco IOS
CVE-2020-3408
%
%
%
!
!
!
!
%
%
%
!
#12
lodash
CVE-2019-1010266 %
#13
remarkable
CVE-2019-12041
#14
#15
#16
#17
#18
owasp-modsecurity-crs CVE-2019-11391
owasp-modsecurity-crs CVE-2019-11390
owasp-modsecurity-crs CVE-2019-11389
owasp-modsecurity-crs CVE-2019-11388
owasp-modsecurity-crs CVE-2019-11387
#19
highcharts
CVE-2018-20801
#20
uap-core
CVE-2018-20164
#21
js-bson
#22
nodejs
CVE-2018-13863
CVE-2018-7158
#23
protobuf.js
CVE-2018-3738
#24
node-sshpk
CVE-2018-3737
#25
Python
#26
Python
CVE-2018-1061
CVE-2018-1060
#27
brace-expansion
CVE-2017-18077
#28
parsejson
CVE-2017-16113
#29
charset
CVE-2017-16098
#30
tough-cookie
CVE-2017-15010
#31
jshamcrest
CVE-2016-10521
#32
jadedown
CVE-2016-10520
#33 moment
CVE-2016-4055
#34
ansi2html
CVE-2015-9239
#35 marked
CVE-2015-8854
!
%
%
%
%
%
%
%
%
%
!
%
%
%
%
%
%
%
!
!
%
!
%
Total
10
%
!
%
%
!
%
%
!
%
%
!
%
%
%
%
%
%
%
%
!
%
%
!
!
!
%
%
%
%
!
%
%
%
%
%
9
%
!
%
!
%
%
%
%
%
%
!
%
!
%
%
%
%
%
%
%
%
%
%
%
!
!
%
%
%
%
!
!
!
!
%
10
!
%
!
!
!
%
%
!
%
!
!
%
!
!
!
!
!
%
%
!
!
%
!
!
%
%
!
%
%
%
!
!
!
!
%
21
%
!
%
%
!
%
%
%
!
!
!
%
!
!
!
!
%
%
%
!
%
%
!
%
%
%
%
%
%
%
%
%
%
!
%
12
%
%
%
%
%
%
%
%
%
%
!
%
!
%
%
%
%
%
%
%
%
%
!
%
%
%
%
%
%
%
%
!
%
!
%
5
!
%
!
!
%
!
!
!
%
%
!
%
!
%
%
%
%
%
%
!
%
%
%
%
%
%
%
%
%
%
!
!
%
!
%
12
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!
!