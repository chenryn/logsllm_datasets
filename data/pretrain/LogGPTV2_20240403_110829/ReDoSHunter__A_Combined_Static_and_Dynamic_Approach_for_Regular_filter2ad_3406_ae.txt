### Summary of Results

When transitioning from Java-8 to Java-13, the apparent difference is a decrease in effectiveness from 96.81% to 33.88%. In contrast, ReDoSHunter consistently provides attack strings with a 100% success rate, indicating that the attack strings generated by ReDoSHunter are more effective than those produced by existing methods.

**Summary for RQ1:**
ReDoSHunter achieves 100% precision and 100% recall across four tested regex engines. This is significantly better than the best dynamic approach, which reaches 100% precision but only 1.82% recall, and the highest recall of static methods, which is only 36.35%. Additionally, over 60% of the regexes in the collected datasets have more than one ReDoS vulnerability. All attack strings generated by ReDoSHunter can successfully launch a ReDoS attack, while no other existing method achieves a 100% success rate. In summary, ReDoSHunter strikes a remarkable balance between effectiveness and efficiency, leveraging the advantages of both static and dynamic methods.

### Results on Known Vulnerabilities

In this section, we evaluate the performance of existing approaches and ReDoSHunter against confirmed ReDoS-related CVEs to demonstrate their effectiveness in identifying real-world vulnerabilities. The results are presented in Table 10. The columns represent the source projects (Project), the CVE index (CVE ID), and whether the approaches successfully identify the corresponding CVEs.

From the table, it is evident that ReDoSHunter outperforms other methods in detecting these vulnerabilities. For example, ReDoSHunter successfully identifies 10 out of 35 CVEs, while the next best method, RXR, only identifies 9. This highlights the superior detection capability of ReDoSHunter in real-world scenarios.

#### Table 10: Overall Evaluation Results on Real-world ReDoS-vulnerabilities

| No. | Project                   | CVE ID        | RXR | RER | NAA | SAX | RET | SDL | RSE | RHR |
|-----|---------------------------|---------------|-----|-----|-----|-----|-----|-----|-----|-----|
| #1  | jquery-validation         | CVE-2021-21252 | %   | %   | %   | !   | !   | %   | %   | %   |
| #2  | CairoSVG                  | CVE-2021-21236 | %   | %   | %   | !   | !   | %   | %   | %   |
| #3  | date-and-time             | CVE-2020-26289 | %   | %   | %   | !   | !   | %   | %   | %   |
| #4  | fast-csv                  | CVE-2020-26256 | %   | %   | %   | !   | !   | %   | %   | %   |
| #5  | Python                    | CVE-2020-8492  | %   | %   | %   | !   | !   | %   | %   | %   |
| #6  | websocket-extensions      | CVE-2020-7663  | %   | %   | %   | !   | !   | %   | %   | %   |
| #7  | websocket-extensions      | CVE-2020-7662  | %   | %   | %   | !   | !   | %   | %   | %   |
| #8  | url-regex                 | CVE-2020-7661  | %   | %   | %   | !   | !   | %   | %   | %   |
| #9  | uap-core                  | CVE-2020-5243  | %   | %   | %   | !   | !   | %   | %   | %   |
| #10 | waitress                  | CVE-2020-5236  | %   | %   | %   | !   | !   | %   | %   | %   |
| #11 | Cisco IOS                 | CVE-2020-3408  | %   | %   | %   | !   | !   | %   | %   | %   |
| #12 | lodash                    | CVE-2019-1010266 | %   | %   | %   | !   | !   | %   | %   | %   |
| #13 | remarkable                | CVE-2019-12041 | %   | %   | %   | !   | !   | %   | %   | %   |
| #14 | owasp-modsecurity-crs     | CVE-2019-11391 | %   | %   | %   | !   | !   | %   | %   | %   |
| #15 | owasp-modsecurity-crs     | CVE-2019-11390 | %   | %   | %   | !   | !   | %   | %   | %   |
| #16 | owasp-modsecurity-crs     | CVE-2019-11389 | %   | %   | %   | !   | !   | %   | %   | %   |
| #17 | owasp-modsecurity-crs     | CVE-2019-11388 | %   | %   | %   | !   | !   | %   | %   | %   |
| #18 | owasp-modsecurity-crs     | CVE-2019-11387 | %   | %   | %   | !   | !   | %   | %   | %   |
| #19 | highcharts                | CVE-2018-20801 | %   | %   | %   | !   | !   | %   | %   | %   |
| #20 | uap-core                  | CVE-2018-20164 | %   | %   | %   | !   | !   | %   | %   | %   |
| #21 | js-bson                   | -              | %   | %   | %   | !   | !   | %   | %   | %   |
| #22 | nodejs                    | CVE-2018-13863 | %   | %   | %   | !   | !   | %   | %   | %   |
| #23 | protobuf.js               | CVE-2018-3738  | %   | %   | %   | !   | !   | %   | %   | %   |
| #24 | node-sshpk                | CVE-2018-3737  | %   | %   | %   | !   | !   | %   | %   | %   |
| #25 | Python                    | -              | %   | %   | %   | !   | !   | %   | %   | %   |
| #26 | Python                    | CVE-2018-1061  | %   | %   | %   | !   | !   | %   | %   | %   |
| #27 | brace-expansion           | CVE-2017-18077 | %   | %   | %   | !   | !   | %   | %   | %   |
| #28 | parsejson                 | CVE-2017-16113 | %   | %   | %   | !   | !   | %   | %   | %   |
| #29 | charset                   | CVE-2017-16098 | %   | %   | %   | !   | !   | %   | %   | %   |
| #30 | tough-cookie              | CVE-2017-15010 | %   | %   | %   | !   | !   | %   | %   | %   |
| #31 | jshamcrest                | CVE-2016-10521 | %   | %   | %   | !   | !   | %   | %   | %   |
| #32 | jadedown                  | CVE-2016-10520 | %   | %   | %   | !   | !   | %   | %   | %   |
| #33 | moment                    | CVE-2016-4055  | %   | %   | %   | !   | !   | %   | %   | %   |
| #34 | ansi2html                 | CVE-2015-9239  | %   | %   | %   | !   | !   | %   | %   | %   |
| #35 | marked                    | CVE-2015-8854  | %   | %   | %   | !   | !   | %   | %   | %   |

**Key:**
- `!` denotes successful detection of the vulnerability.
- `%` denotes failure to detect the vulnerability.

**Abbreviations:**
- RXR: RXXR2
- RER: Rexploiter
- NAA: NFAA
- SAX: safeâ€“regex
- RET: Regexploit
- SDL: SDL
- RSE: ReScue
- RHR: ReDoSHunter

These results clearly show that ReDoSHunter is more effective in detecting real-world ReDoS vulnerabilities compared to other methods.