### Figure 9: DNS Amplification Defense Strategy Graph

The detection module employs various techniques, including flow analysis, anomaly detection, and custom code [27]. The output of the detection module is sent to the Bohatei global controller as a 3-tuple (Type, FlowSpec, Volume), where:
- **Type** indicates the type of DDoS attack (e.g., SYN flood, DNS amplification).
- **FlowSpec** provides a generic description of the flow space of suspicious traffic (involving wildcards).
- **Volume** indicates the volume of suspicious traffic based on the flow records.

It is important to note that the FlowSpec does not pinpoint specific attack flows; rather, it provides a coarse-grained hint on the characteristics of suspicious traffic that need further processing through the defense graphs.

### 7.2 SDN/NFV Platform

#### Control Plane
We use the OpenDayLight network control platform, which has gained significant traction from key industry players [17]. The Bohatei global and local control plane modules (strategy, resource management, and network orchestration) are implemented as separate OpenDayLight plugins. Bohatei uses OpenFlow [40] for configuring switches, primarily for ease of prototyping. It is straightforward to integrate other network control APIs, such as YANG/NetCONF.

#### Data Plane
Each physical node is realized using a VM running on KVM. We use open-source tools like Snort and Bro to implement the different Analysis (A) and Response (R) modules. Table 1 summarizes the specific platforms used. These tools are instrumented using FlowTags [31] to add tags to outgoing packets, providing contextual information. OpenvSwitch [16] is used to emulate switches in both data centers and the ISP backbone, chosen for its ease of prototyping on our testbed.

### Resource Management Algorithms
The DSP and SSP algorithms are implemented using custom Go code.

### 8 Evaluation

In this section, we demonstrate that:
1. Bohatei is scalable and can handle attacks of hundreds of Gbps in large ISPs. Our design decisions are crucial for its scale and responsiveness (§8.1).
2. Bohatei enables a rapid (≤ 1 minute) response for several canonical DDoS attack scenarios (§8.2).
3. Bohatei can successfully cope with several dynamic attack strategies (§8.3).

#### Setup and Methodology
We use a combination of real testbed and trace-driven evaluations to demonstrate these benefits. Here, we briefly describe our testbed, topologies, and attack configurations:

- **SDN Testbed**: Our testbed consists of 13 Dell R720 machines (20-core 2.8 GHz Xeon CPUs, 128GB RAM). Each machine runs KVM on CentOS 6.5 (Linux kernel v2.6.32). Each VM is allocated 1 vCPU and 512MB of memory.
- **Network Topologies**: We emulate several router-level ISP topologies (6–196 nodes) from the Internet Topology Zoo [22]. Each core link has a bandwidth of 100Gbps and a latency of 10ms. The number of data centers, located randomly, is 5% of the number of backbone switches, with each data center having a capacity of 4,000 VMs.
- **Benign Traffic Demands**: We assume a gravity model of traffic demands between ingress-egress switch pairs [50]. The total volume is scaled linearly with the size of the network such that the average link load on the topology backbone is 24Gbps, with a maximum bottleneck link load of 55Gbps. We use iperf and custom code to generate benign traffic.
- **Attack Traffic**: Custom modules are implemented to generate attack traffic:
  - **SYN Flood Attack**: Sending only SYN packets with spoofed IP addresses at a high rate.
  - **DNS Amplification**: Using an OpenDNS server with BIND (version 9.8) and emulating an attacker sending DNS requests with spoofed source IPs.
  - **Elephant Flows**: Using iperf to create fixed-bandwidth traffic.
  - **UDP Flood Attacks**: Randomly picking one edge PoP as the target and varying the target across runs. We ramp up the attack volume until it induces the maximum reduction in throughput of benign flows to the target. On our testbed, we can ramp up the volume up to 10Gbps. For larger attacks, we use simulations.

### 8.1 Bohatei Scalability

#### Resource Management
Table 2 compares the run time and optimality of the ILP-based algorithm and Bohatei (DSP and SSP) for three ISP topologies of various sizes. The ILP approach takes from several tens of minutes to hours, whereas Bohatei takes only a few milliseconds, enabling rapid response to changing traffic patterns. The optimality gap is ≤ 0.04%.

#### Control Plane Responsiveness
Figure 10 shows the per-flow setup latency comparing Bohatei to the SDN per-flow and reactive paradigm as the number of attack flows in a DNS amplification attack increases. The results are consistent for other types of attacks. In both cases, we have a dedicated machine for the controller with 8 2.8GHz cores and 64GB RAM.

### 8.2 Handling Different Attack Types
Table 3 shows the total hardware provisioning cost needed to handle a 100Gbps attack for different types of attacks. While there are some small differences across attacks, the overall reaction time is short.

### 8.3 Dynamic Attack Strategies
Bohatei can successfully cope with several dynamic attack strategies, ensuring robust and responsive DDoS mitigation.

---

This optimized version aims to provide a clearer, more coherent, and professional presentation of the content.