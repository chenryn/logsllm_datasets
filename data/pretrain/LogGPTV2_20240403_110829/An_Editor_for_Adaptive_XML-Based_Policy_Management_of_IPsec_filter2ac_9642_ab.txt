Crisis
Medium
High
Security Attributes
Encryption: None
Authentication: MD5
Encryption: DES
Authentication: MD5
Encryption: 3DES
Authentication: MD5
Encryption: None
Authentication: None
Encryption: None
Authentication: None
Encryption: DES
Authentication: MD5
The security resource manager and security engineer
would define the network modes and security levels to
provide the users and applications with appropriate
security service. Once defined, the complexity of the
security mechanism and security attribute selection is
transparent to the user.
2.4. Implementation Issues
Quality of Security Service (QoSS) is a model for the
modulation of security settings and enhancement of
performance based on both necessity (e.g. threat) and
resource availability. It also provides a tool to ensure that
the minimum-security requirements of applications and
the network as defined in the security policy is not
violated. Hence, an adaptive security policy based on
network threat and performance conditions is the key to
optimal and secure utilization of the network resources.
KeyNote provides one such policy specification language
but its practical implementation with complex policy
statements is extremely difficult. A policy toolkit
providing an abstraction for this language was therefore
felt necessary. Our plan was to use the power of KeyNote
for formal compliance checking and at the same time be
easy to use and administer.
3. KeyNote Support for QoSS
The syntax and semantics of the KeyNote language is
described in detail in RFC 2704 [3]. The language is used
for specifying application ‘policies,’ which govern the
actions that principals (entities that can be authorized to
perform actions) are authorized to perform. The language
provides the semantics for describing ‘actions,’ which are
operations with security consequences that are to be
controlled by the system. It is also used for specifying
‘credentials’, which allow principals
delegate
authorization to other principals.
to
KeyNote assertions are divided into ‘fields’ that serve
various semantic functions. Each field starts with an
identifying label at the beginning of a line, followed by
the “:” character and the fields contents.
One mandatory field is required in all assertions:
(cid:127) Authorizer
Six optional fields may also appear:
(cid:127) Comment
(cid:127) Conditions
(cid:127) KeyNote-Version
(cid:127) Licensees
(cid:127) Local-Constants
(cid:127) Signature
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:15 UTC from IEEE Xplore.  Restrictions apply. 
The conditions field is used to define a security
policy. This field gives the ‘conditions’ under which an
action may be performed.
Security attributes reside in the conditions field and
are expressed in the form of a logical expression. The
expression’s syntax is similar to that of a programming
language “if statement”. The  expression is usually broken
into sub statements by using && (“and”), || (“or”), and
parenthesis to construct logical conditions. For example
the following phrase describes two security proposals
supporting Telnet services (service_port= 23) using ESP
with 3DES for encryption and finger
services
(service_port=79) using AH with SHA for authentication:
(local_filter_port == “79” &&
ah_present == "yes" &&
ah_auth_alg == "sha-md5")))) -> “true”;
This example illustrates that the complexity of the
language increases dramatically as  we add more ports and
parameters to it. The nesting of parenthesis to multiple
levels makes writing a syntactically correct policy file
difficult. In the following section, the use of XML is
described for the practical specification of the KeyNote
policy file.
4. XML and Policy Representation
(local_filter_port == “23” &&
esp_present == "yes" &&
esp_enc_alg == "3des") ||
(local_filter_port == “79” &&
ah_present == "yes" &&
ah_auth_alg == "sha") -> “true”;
Using the example above, with security levels “high”
and “low” and network modes “normal” and “impacted”,
the condition expression is expanded:
Conditions: ( (app_domain == "IPsec policy") && (
( (network_mode = “normal” &&
((security_level = “high” &&
((local_filter_port == “23” &&
esp_present == "yes" &&
esp_enc_alg == "3des") ||
(local_filter_port == “79” &&
ah_present == "yes" &&
ah_auth_alg == "sha"))) ||
((security_level = “low” &&
((local_filter_port == “23” &&
esp_present == "yes" &&
esp_enc_alg == "des") ||
(local_filter_port == “79” &&
ah_present == "yes" &&
ah_auth_alg == "des-mac")))) ||
(network_mode = “impacted” &&
((security_level = “high” &&
((local_filter_port == “23” &&
esp_present == "yes" &&
esp_enc_alg == "aes") ||
(local_filter_port == “79” &&
ah_present == "yes" &&
ah_auth_alg == "sha"))) ||
((security_level = “low” &&
((local_filter_port == “23” &&
esp_present == "yes" &&
esp_enc_alg == "3des") ||
powerful
technology with
Extensible Markup Language (XML) [16] is a rapidly
maturing
real-world
applications, particularly for the management, display and
organization of data. XML is a technology concerned with
the description and structuring of data. It is a subset of
Standard Generalized Markup Language (SGML), with
the same goals, but with much less complexity. XML is
not a language but a standard for creating languages that
meet the XML criteria. It describes a syntax that you use
to create your own languages [7].
Data is separated from presentation in XML. XML
structures the data, while style sheets format the data
presentation. That makes it easier to use the data for
multiple purposes. The same stylesheet can be used with
multiple documents to create a similar appearance among
them. Alternatively, multiple stylesheets can be applied
to an XML document to provide different forms of
presentation of the data. There are a variety of languages
that can be used to create stylesheets such as Extensible
Stylesheet Language Transformations (XSLT).
4.1. XML DTDs and Schemas
XML includes two methods of checking the validity o
an XML document: document type definitions (DTDs)
and schemas. A document is valid if its XML content
complies with a definition of allowable elements,
attributes and other document pieces. By utilizing special
‘Document Type Definition’ syntaxes or DTDs,
is
possible to check the content of a document type with a
special parser.
it
A schema is the XML construct used to represent the
data elements, attributes, and their
relationships as
defined in the data model. By definition, a DTD and a
schema are very similar [17]. However, DTDs usually
define simple, abstract text relationships, while schemas
define more complex and concrete data and application
relationships. A DTD doesn't use a hierarchical formation,
while a schema uses a hierarchical structure to indicate
relationships. XML schema definitions are also
commonly referred to as XSD.
4.2. XSLT
XSL [19] is used to create stylesheets. An XSL engine
uses these stylesheets to transform XML documents into
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:42:15 UTC from IEEE Xplore.  Restrictions apply. 
types, and to format
the output.
other document
Extensible Stylesheet Language Transformations (XSLT)
is a language which can transform XML documents into
any text-based format, XML or otherwise. Stylesheets
define the layout of the output document and the location
of the data in the source document. That is, “retrieve data
from this place in the input document; make it look like
this in the output”. In XSL parlance, the input document
is called the source tree, and the output document the
result tree.
4.3. Advantages of XML for the Policy
Specification Language
As described above we have a need to represent the
intended IPsec policy in a form separate from the native
KeyNote representation. Some of the advantages that
would accrue by using XML are as follows:
4.3.1.
Tools. Use of XML for specification of the
KeyNote policy file lends itself to be used with the freely
available, verified, tested and user-friendly tools. These
tools include among others, XML editors, parsers,
validators, translators etc. The availability of such tools
and the extensive use of XML in modern communication
protocols and other programs will enable users to
manipulate XML files easily. Wide availability of such
tools will also help in creating and maintaining the policy
files over diverse systems without
the need for an
application specific editor.
4.3.2. Platform Independence. It is possible to edit,
maintain and distribute the XML policy file across
different OS platforms.
Single Data Multiple Presentation. Once we
4.3.3.
represent the policy in an XML format it is possible to
extract relevant information and present it in different
forms that are more intuitive and useful
to the
administrator or the user. XSLT style sheets can be
written and associated with the policy file to generate
different presentation formats. Presenting it
in a more
understandable, graphic format will help the administrator
identify
or
contradictions in the policy file. Intelligent agents can
also be written to audit the policy file and signal the
administrator for errors in the policy file.
inconsistencies,
any
inaccuracies,
4 . 3 . 4 . Consistency and Accuracy. XML schemas
and/or DTDs can be used  to validate the XML file to see
if it matches our specifications. Validating the policy file
with a well-defined schema will enable errors to be picked
up. This will trap all errors without having to go through
the entire file manually. The use of generic schema
generators and validators only makes this an easier task.
This will also support users in their verification of policy
files received across the networks.
Extensible Format. An XML format will allow
4.3.5.
the extension of the policy file to include new constructs.
Additional tags can be defined for elements and attributes
as and when the need to incorporate them arises. This
would not require changes to the application code as long
as the structure of the document is maintained.
4.3.6. Ease of Use. The hierarchical nature of XML
layout results in an easy to use and easy to manipulate
format. It makes the file more modular and more easily
understandable.
Semantic Content Use. The semantic content
4.3.7.
of the policy file enables future deployment of intelligent
agents or roaming agents that can read policy files and
report problems, and that can resolve conflicts between
multiple systems by highlighting for
instance the
difference in the policies between them.
4.4. Integrating XML and KeyNote Policy
The KeyNote engine requires that
the assertions,
credentials and the policy files be specified in its native
syntax. As discussed,
there is a clear problem of
differentiation between XML data content and its
representation. Specifying the policy data in an XML
format would enable us to use XSL to translate the data
to any format needed, such as a more human readable
form. Furthermore, specifying an XML schema would
provide us the benefit of validating the XML policy file
for correctness prior to its transformation to KeyNote
syntax.
5. Design and Implementation
The first challenge to using XML for security policy
specification was to determine an alternate representation
of the policy logic in the form of an XML user policy
file. The overall approach was to develop a format for the
user policy file and then create a style sheet to transform
it to the native KeyNote policy file format. This approach
also provides the flexibility of later being able to extract
useful administrative information from the user policy
file.
Arriving at a format for the user policy file is a
challenging task and there are multiple options available.
The primary requirement is that the resulting XML file be
well formed. During this research, multiple formats were
considered. Each had  its strengths and shortcomings. For
instance one format would lend itself
to an easy
application design while another would permit more
semantic content in the file format. The former therefore
makes it easier to write an application such as a ‘Policy
Editor’ while the latter results in a more descriptive self-
defining file, which could be a good interchange format
between multiple applications. However we realized that
the specific  format is not so significant as long as it has
sufficient semantic content to be understandable. This
results because the choice of element tag names, their
sequence etc. is a personal preference: the power of XSL
is always available for another  user who wishes to use an
alternative format. Thus arriving at a well annotated, self-
defining and logical policy file format was the endeavor.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 