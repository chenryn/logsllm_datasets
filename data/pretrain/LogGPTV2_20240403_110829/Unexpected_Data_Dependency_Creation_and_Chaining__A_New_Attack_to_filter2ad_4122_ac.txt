        JsonNode specifiedDeviceId = jsonTree.get("deviceId");
        FlowRule rule = codec(FlowRule.class).decode(jsonTree, this);
        ...
rule
        service.applyFlowRules(rule);
  ...
FlowRule.class
(jsonTree
Illustration of SVHunter’s Backtracking (using a real-world example
Fig. 4.
of sensitive method usage).
each poisoning event involves a single sensitive method. For
the Tracer to know if a method is a data collecting method or
not, it checks the method in the list of data collecting methods.
To illustrate, here we use the same example used in
Section IV-A. As shown in Fig. 4,
the trace for Phase
2 (poisoning event 2 ) starts from the sensitive method
applyFlowRules. To trace its data ﬂows, the Tracer iden-
tiﬁes its parameters as the data sinks. In this example, the data
sink is variable rule. Next, the Tracer traces variable rule
using the aforementioned approach. Finally, the Tracer traces
to method createFlow whose type information (red circle)
matches one of the data collecting methods, which indicates
that the data ﬂow from createFlow to applyFlowRules
should be identiﬁed as a poisoning event.
B. Reasoning Event-Triggering Causality
Before we can reason the causality relationships between the
poisoning events identiﬁed by the Tracer to ﬁgure out how
they can be chained together, we ﬁrst need to represent the
poisoning events in a uniﬁed model. Hence, the Reasoning
Engine ﬁrst generates a uniﬁed representation for each poi-
soning event. This representation describes the causality (i.e.,
preconditions and postconditions) of each poisoning event.
Second, the Reasoning Engine reasons the generated causality
representations to decide whether and how two or more
poisoning events can be chained together to create malicious
(transitive) data dependencies between the data plane and the
target method(s) in the control plane.
Modeling poisoning events. To represent different poisoning
events in a uniﬁed form, we introduce a simple but effective
declarative language, Event Reasoning Language (ERL). We
implemented the ERL compiler component on top of a popular
framework, ANTLR [1]. The basic idea of ERL is to model
both the preconditions (i.e., how a poisoning event obtains data
items) and the postconditions (i.e., how a sensitive method
involved in a poisoning event
is abused to poison other
data items) of each poisoning event. According to the four
aforementioned categories of data items, ERL respectively
uses fs, net state, proto msg, db to denote the data items
stored in conﬁguration ﬁles, network states, protocol messages
TABLE III
EXAMPLES OF PID AND THEIR MEANINGS
Data
Refers to
fs::bin.diagnostics
proto msg::portstatus.port
conﬁgure ﬁle diagnostics under the ﬁle dictionary of bin
protocol ﬁeld port in the PortStatus message
from the data plane, and databases. To further describe each
speciﬁc data item, ERL employs a namespace concept that
is very similar to the namespaces in modern languages like
C++. A path identiﬁer (pid) is assigned to every data item
to differentiate data items in the same category. Table III
shows examples of supported pid formats in ERL. To describe
different kinds of operations on data items, ERL employs
two commonly used primitives (i.e., read and write) and one
SDN-speciﬁc primitive (i.e., crash). read and write mean that
the corresponding poisoning event can read and write a data
item, respectively. crash means that the corresponding event
is able to corrupt
the format or integrity of a data item.
List 1 demonstrates the main ERL grammar. As indicated
by the ERL grammar, all poisoning events are represented
by a notion called observations. Every observation is in the
form of data → operation, which means that a particular
operation has been performed on a particular data item. The
observations involved in a poisoning event can be divided into
two sub-classes, which are used to describe the preconditions
and postconditions of the poisoning event, respectively.
observation ::= data → operation
|
|
|
IF observation THEN observation
observation && observation
observation || observation
operation
::= READ var
|
|
WRITE var
CRASH var
data
::= fs :: pid
pid
|
|
|
net_state :: pid
proto_msg :: pid
db :: pid
::= letter
|
|
|
!pid
pid.letter
.
Listing 1. ERL grammar
We also introduce a language extension to ERL, which is
a stage description model that guides the chaining procedure.
The model enables users to add customized rules according
to their own cases. More speciﬁcally, the model enables users
to explicitly declare the ﬁrst event and last events of a D2C2
chain with two special labels, respectively. (1) By adding the
@toe-hold label to a poisoning event, the attacker declares
that he can directly manipulate the data item(s) in the event
so that the event can be placed at the beginning of the D2C2
chain. This label is useful when the attacker controls other
internal data items than data plane messages in some cases.
For example, compromising an FTP service may lead to the
manipulation of some conﬁguration ﬁles in the controller). (2)
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1517
By adding the @ﬁnal label to an event, the attacker declares
that a sensitive method involved in the event can achieve his
ﬁnal attack objective. For example, if he wants to execute
arbitrary commands in the controller, an event involving such
sensitive methods as Runtime.exec() should be labeled as
@ﬁnal, since it should be the ﬁnal event in any D2C2 chain
that includes the event. The language extension can avoid the
generation of meaningless D2C2 chains which let a ﬁnal event
be further connected to potentially many other events.
Generating observations. With the uniﬁed representation,
the Reasoning Engine takes poisoning events as input and
generates the corresponding representations using ERL. Each
observation consists of two sub-sentences. The ﬁrst sub-
sentence describes what data items are already poisoned when
the corresponding poisoning event happens. The second sub-
sentence describes what data items can be further poisoned
once the sensitive method involved in the event is abused.
The Reasoning Engine employs a heuristic method to gen-
erate the two sub-sentences. For the ﬁrst sub-sentence, the
Reasoning Engine extracts the concrete data description from
the running context of the identiﬁed data collecting method in
the event. For the second sub-sentence, since it is deterministic
in terms of which data items can be abused by each sensitive
method, the Reasoning Engine is able to directly decide which
data items can be accessed for every sensitive method in a
heuristic manner. It is worth noting that in some cases the
pid for the second sub-sentence could be “.”, which means
the sensitive method can affect all data items in that category
(e.g., the abusing of File.write() can lead to an arbitrary
ﬁle write).
Using the same example exploit chain used in Section IV,
the poisoning event shown in Fig. 4 collects a data item
in the category of net state. In this case,
the Reasoning
Engine extracts information from @Path at both class level
and method level, which corresponds to the actual URL
when accessing the data item via Restful API. As a re-
sult, the Reasoning Engine decides that the data should be
net state::ﬂows.deviceid. Finally, the ﬁrst sub-sentence for the
event should be net state::ﬂows.deviceid → read.
Observation reasoning. The Reasoning Engine takes ob-
servations as input
to generate the event chain graph. It
ﬁrst generates nodes for every observation and then tries to
connect them to generate the graph according to the causality
relationships between the poisoning events.
Algorithm 1 outlines our process for constructing the event
chain graph with given observations. It takes as input all the
observations as a set S and produces the corresponding graph
denoted by (N, E), where every node ni ∈ N corresponds to
an observation s ∈ S, and directed edge ei, j ∈ E denotes that
node j can be triggered with the postconditions in node i. The
algorithm can be divided into two phases. In the ﬁrst phase,
it generates a node for each observation. Every node can be
denoted as (P, C), where set P denotes the set of preconditions
for this observation and set C denotes the set of postconditions.
In the second phase, the algorithm reasons the causality
Algorithm 1 Event chain graph Generation
Require:
ECG = (N, E) where N is a set of nodes and E is a set of edges.
S = a set of observations;
Ensure:
1: N ← { }, E ← { }
2: for all observation s ∈ S do
P ← get preconditions(s)
3:
C ← get postconditions(s)
4:
5:
N ← N ∪ {(P, C)}
6: end for
7: for all Node (Pi, Ci ) ∈ N do
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: end for
end for
end if
end if
end for
for all Node (Pj, C j ) ∈ N and (Pi, Ci ) (cid:2) (Pj, C j ) do
if !isFinalEvent((Pi, Ci )) then
for all pm ∈ Pj and cn ∈ Ci do
if satisfy(cn, pm) then
E ← E ∪ {(ei, j )}
break
if node i can meet
relationships between every two nodes. The Reasoning Engine
will add an edge ei, j between node i, denoted as (Pi, Ci),
and node j, denoted as (Pj, Cj ),
the
preconditions of node j. Since ei, j means that node i can
poison the data items used by node j, the Reasoning Engine
will examine both the operation and data of Pj and Ci. First,
data in Pj should be a subset of data in Ci. Second, the
operation of Ci should be write or crash, which can affect the
data items in node j. It is worth noting that the Reasoning
Engine also follows two rules introduced by the language
extension. First, it will stop expanding a path once it connects
a node labeled as a ﬁnal event. Second, the engine will always
start reasoning from the nodes with label toe-hole, which can
be directly triggered by the attacker.
N ode a
if proto msg :: OF F eatureReply.mf rDesc −→ read var#53
then net state :: root −→ write var#53
N ode b
if net state :: root.f lows.deviceid −→ read var#24
then net state :: f lowRules −→ write var#24
The two observations shown above correspond to two
observations in the aforementioned example exploit chain.
The Reasoning Engine will ﬁrst generate two nodes (i.e.,
node a denoted as (Pa, Ca) and node b denoted as (Pb, Cb)),
respectively. Then the Reasoning Engine uses Algorithm 1 to
reason the causality relationships between the two nodes. It is
not difﬁcult to see that Ca and Pb perform operations on the
same data item in the category of net state. Also, Pb reads
the data item after it is written by Ca. Hence, the Reasoning
Engine adds an edge ea,b between node a and node b. In some
cases, there might be several paths in the event chain graph, but
SVHunter will only highlight the paths with toe-hold nodes,
whose data can be directly controlled by the attacker.
C. Generating D2C2 Payloads
Even with the help of event chain graphs, verifying D2C2
vulnerabilities can still be challenging and time-consuming.
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1518
Hence, SVHunter provides an Exploit Engine in order to make
D2C2 exploitation more automated.
Custom Field Data Injector. The data injector is part of
the Exploit Engine. Leveraging SVHunter’s payload-crafting
guide generation capability, which will be presented shortly
in this section, users can gain concrete understanding about
which (kinds of) data items should be included in the attack
payload. However, knowing the content of the attack payload
does not mean that users also know how to use the content
to generate a poisoning event. Without orchestrating a speciﬁc
set of malicious protocol interactions with the target controller,
no poisoning event can be successfully generated. In order to
gain this orchestrating capability, users should be familiar with
SDN protocol speciﬁcations, in order to locate the custom
ﬁeld, and implementation of speciﬁc SDN protocols (e.g.,
Open vSwitch), in order to inject the content of a payload
into a custom ﬁeld.
To answer this “how” question and help users overcome the
orchestrating difﬁculties, we built the Custom Field Data In-
jector, which can automatically generate speciﬁc toe-hold poi-
soning events through protocol message manipulation (Note
that the type of message is decided by the data ﬁeld of the
ﬁrst sub-sentence in the corresponding poisoning event). In
particular, the Data Injector does two things: (i) it dynamically
injects payloads into target custom ﬁelds; (ii) it automatically
orchestrates the needed protocol interactions with the SDN
controller and triggers the controller to process the target
custom ﬁelds.
For the ﬁrst task, the Data Injector hooks the protocol han-
dling functions for each protocol implementation (e.g., Open
vSwitch) so that the Data Injector can dynamically modify
the desired custom ﬁelds when these protocol implementations
generate the corresponding protocol messages.
For the second task, the Data Injector ﬁrst simulates a
legitimate network device in order to let the controller handle
its messages. Then, it generates particular network events in
order to trigger different protocol interactions between the
Data Injector and the controller. For example, the Data Injector
will connect a new switch to the control plane in order to
generate the “switch join” protocol messages.
Currently,
the Custom Field Data Injector supports two
widely-used protocols in SDN (i.e., OpenFlow and NetConf).
The set of custom ﬁelds supported by our Exploit Engine in
each protocol can be found in Table VIII in the Appendix.
Payload Crafting Guide Generation. To exploit a D2C2
chain, the attacker needs to input attack payloads into the
Custom Field Data Injector to satisfy the constraints associated
with the new attack path (i.e., exploit chain) which is created
through malicious data dependency creating and chaining.
However, for SVHunter, it is difﬁcult to automatically satisfy
all the constraints and generate the ﬁnal exploit. This is be-
cause solving the constraints associated with data dependency
creating requires not only general purpose path constraint
solvers [15], [43] but also an expert system which incorporates
both SDN domain knowledge and hacking skills, which is
Data Plane
DevicesWebResource
#getDevice
@83
FlowRuleService
#applyFlowRules
@98
END
Malicious Device
Payload
TYPE : proto_msg
PID    : OFFeatureReply.mfrDesc
DATA: var#53
var#53
TYPE : net_state
PID    : root.flows.deviceid
DATA: var#24
var#24
TYPE: net_state
PID   : flowRules
Fig. 5. An example payload crafting guide generated by SVHunter. *Since
sensitive method getDevice has no caller (It
is implicitly called by