图16 Windows 10 RS3中本机`NTDLL
KiUserApcDispatcher()`实现的一部分。注意，指向上下文结构的RSP被移动到R9中。  
因此，我们可以得出这样的结论:在这个场景中，`LdrLoadDll()`作为`ModuleHandle`接收的值总是指向一个可写的内存块，它包含一个上下文结构，从而允许成功的注入。然而，覆盖上下文结构的成员可能会有风险;如果任何重要信息被销毁，那么在调用`NtContinue()`之后，当试图恢复执行时，线程可能会崩溃。正如我们之前看到的，`LdrLoadDll()`只向ModuleHandle所指向的内存位置写入8字节(x64上的指针大小)，因此它只会覆盖上下文结构的第一个成员，它恰好是P1Home:  
图17 -上下文结构的前0x34字节。传递给APC例程的参数存储在该上下文的偏移量0、0x8和0x10中，而APC例程的地址存储在偏移量0x18中。  
幸运的是，上下文结构的前四个成员实际上用于KiUserApcDispatcher()的
[储存参数](https://github.com/svn2github/reactos/blob/d461c3f6a3cb7ce06d1d63a3370556f71d305b21/ntoskrnl/ke/amd64/stubs.c#L242)，并且在APC例程本身执行之后不再需要这些参数。为了确保覆盖P1Home确实是安全的，只需查看KiUserApcDispatcher()的prolog，如图16所示。通过仔细检查它的prolog，我们可以看到KiUserApcDispatcher()具有某种独特的调用约定。堆栈的顶部指向前面提到的上下文结构，除了CPU状态之外，这个结构还封装了APC例程的地址和传递给它的其他三个参数的值。  
通过将图17所示的这个结构的偏移量与图16所示参数的偏移量相关联，我们可以得出这样的结论:
  * P1Home持有NormalContext
  * P2Home持有sysarg1
  * P3Home持有sysarg2
  * P4Home持有NormalRoutine，这是将从`KiUserCallForwarder()`调用的APC例程的地址。  
图18 -调用APC例程时上下文结构的前0x30字节  
由于成员P1Home到P4Home从未用于保存任何与cpu相关的数据，因此NtContinue()不会使用它们来恢复上下文。知道了这一点，我们可以假设从APC例程中重写P1Home没有什么害处。现在，我们可以重新创建注入器(如附录C所示)，通过排队一个直接调用LdrLoadDll()的APC，将本机模块注入任何WoW64进程，而不会导致臭名昭著的CFG违规错误。  
## **小结**  
这将结束本系列的第二部分。在前两篇文章中，我们演示了使用几种不同的方法将64位dll注入WoW64进程的能力。显然，有更多的方法可以这样做，但是找到它们是留给感兴趣的读者作为练习。  
接下来:使用x64挂钩引擎来支持挂接本机NTDLL。  
## **附录**  
### **附录B WoW64进程安装**  
### **附录C 无针APC注射**
> 原文： wow64-applications-part-2>
# Part 3
## **前情回顾**
前面([第一部分](https://www.sentinelone.com/blog/deep-hooks-monitoring-native-execution-wow64-applications-part-1/)和
[第二部分](https://www.sentinelone.com/blog/deep-hooks-monitoring-native-execution-wow64-applications-part-2/))我们演示了将64位模块注入[WoW64](https://www.sentinelone.com/blog/now-stage-deep-hooks-monitoring-native-execution-wow64-applications/)进程的几种不同方法。这篇文章将继续我们之前的话题，另外还会描述如何在这样的进程中利用执行64位代码的能力来钩住本地的x64
api。为了完成这项任务，注入的DLL必须拥有一个能够在WoW64进程的本机区域中运行的挂钩引擎。不幸的是，我们检查过的所有挂钩引擎都无法做到开箱即用，因此我们不得不修改其中一个引擎，以使其满足我们的需求。
## **创建被注入的DLL**
### **选择合适的Hook引擎**
Hook技术是计算机安全领域中一种成熟的技术，被防御者和攻击者广泛使用。自从1999年一篇开创性的文章《绕道而行:Win32函数的二进制拦截》发表以来，已经开发了许多不同的挂钩库。它们中的大多数与本文中介绍的概念相似，但在其他方面有所不同，比如它们对各种CPU架构的支持、对事务的支持等等。在这些库中，我们必须选择一个最适合我们需求的库:  
1.支持x64函数的内联挂钩功能。  
2.开源和免费许可——以便我们可以合法地修改它。  
3.最好的情况是，挂钩引擎应该是相对最小的，以便需要尽可能少的修改。  
在考虑了所有这些需求之后，我们选择将[MinHook](https://github.com/TsudaKageyu/minhook)作为我们的首选引擎。最终有利于它的是它的小代码基，这使得它在PoC中相对容易使用。后面介绍的所有修改都是在它之上完成的，如果使用另一个挂钩引擎，可能会略有不同  
我们的修改挂钩引擎的完整源代码可以在[ **这里**](https://github.com/Sentinel-One/minhook)。
### **没有依赖性**
在第1部分中，我们简要地提到了没有任何64位模块可以轻松地加载到WoW64进程中。大多数dll倾向于使用(隐式和显式)常见的Win32子系统dll中的各种函数，例如`kernel32.dll`,
`user32`。但是，这些模块的64位版本默认不加载到WoW64进程中，因为WoW64子系统不需要这些64位版本来操作。此外，由于地址空间布局的一些限制，强迫进程加载其中任何一个都有些困难和不可靠。  
为了避免不必要的麻烦，我们选择修改挂钩引擎和托管它的DLL，以便它们只依赖通常在WoW64进程中找到的本地64位模块。基本上，这只剩下了本地的NTDLL，因为包含WoW64环境的dll通常不包含对我们有益的函数。  
在更实际的意义上，为了强制构建环境只链接NTDLL，我们在链接器设置中指定/NODEFAULTLIB标记，并显式地添加“NTDLL”。额外依赖的列表:  
图19 主机DLL的链接器配置
### **API重新实现**
这一变化带来的第一个也是最值得注意的影响是，更高级别的Win32
API函数不能供我们使用，必须使用NTDLL对应的函数重新实现。如图20所示，对于MinHook使用的每个Win32
API，我们引入了一个替换函数，它具有相同的公共接口并实现相同的核心功能，而在内部只使用NTDLL工具。  
大多数时候，这些“转换”相当简单(例如，对VirtualProtect()的调用几乎可以直接替换为对NtProtectVirtualMemory()的调用))。在其他更复杂的情况下，Win32
API函数与本地函数之间的映射并不清楚，因此我们不得不求助于一些反向工程或在[反应物源内部](https://github.com/reactos/reactos).进行窥探。  
图20 `VirtualProtect()`的私有实现
### *** 项目配置**
在MinHook中重新实现了所有Win32 API调用之后，我们仍然有很多错误:  
、  
图21 一系列错误  
幸运的是，解决大多数这些错误只需要对项目进行轻微的配置更改。从图中可以看出，大多数错误都采用了通常从CRT导出的未解析的外部符号的形式(这是不可用的)。可以通过在链接器设置中更改一些标志来解决:
  * 禁用基本运行时检查(从命令行删除/RTC标志)
  * 禁用缓冲区安全检查(/GS-标志)
  * 入口点必须显式指定为DllMain，因为DllMainCRTStartup没有链接。
  * 另外，memcpy()和memset()必须手动实现，或者替换为从NTDLL导出的对RtlCopyMemory()和RtlFillMemory()的调用。
在应用了所有这些更改之后，我们成功地创建了一个自定义64位DLL，它除了NTDLL外不包含任何依赖关系:  