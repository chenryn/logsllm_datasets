```  
SELECT PC_Intersects('SRID=4326;POINT(-126.451 45.552)'::geometry, pa)    
FROM patches WHERE id = 7;    
t    
```  
### PC_Intersection(pcpatch, geometry) returns pcpatch    
返回pcpatch中与geometry相交的点组成的一个新的pcpatch    
```  
SELECT PC_AsText(PC_Explode(PC_Intersection(    
      pa,     
      'SRID=4326;POLYGON((-126.451 45.552, -126.42 47.55, -126.40 45.552, -126.451 45.552))'::geometry    
)))    
FROM patches WHERE id = 7;    
             pc_astext                   
--------------------------------------    
 {"pcid":1,"pt":[-126.44,45.56,56,5]}    
 {"pcid":1,"pt":[-126.43,45.57,57,5]}    
 {"pcid":1,"pt":[-126.42,45.58,58,5]}    
 {"pcid":1,"pt":[-126.41,45.59,59,5]}    
```  
### Geometry(pcpoint) returns geometry    
### pcpoint::geometry returns geometry    
将pcpatch中的位置属性的信息转换为geometry类型    
```  
SELECT ST_AsText(PC_MakePoint(1, ARRAY[-127, 45, 124.0, 4.0])::geometry);    
POINT Z (-127 45 124)    
```  
## point cloud的压缩    
PostgreSQL point cloud，使用document输入时，可以指定压缩方法。      
写法如下，      
```  
  dimensional    
```  
支持的压缩方法如下      
```  
None,     
  which stores points and patches as byte arrays using the type and formats described in the schema document.    
Dimensional,     
  which stores points the same as 'none' but stores patches as collections of dimensional data arrays, with an "appropriate" compression applied.     
Dimensional compression makes the most sense for smaller patch sizes, since small patches will tend to have more homogeneous dimensions.    
GHT or "GeoHash Tree",     
  which stores the points in a tree where each node stores the common values shared by all nodes below.     
For larger patch sizes, GHT should provide effective compression and performance for patch-wise operations.     
You must build Pointcloud with libght support to make use of the GHT compression.    
LAZ or "LASZip".     
  You must build Pointcloud with LAZPERF support to make use of the LAZ compression.    
If no compression is declared in , then a compression of "none" is assumed.    
```  
## point cloud的二进制格式    
The point and patch binary formats start with a common header, which provides:    
endianness flag, to allow portability between architectures    
pcid number, to look up the schema information in the pointcloud_formats table    
Point Binary    
```  
byte:     endianness (1 = NDR, 0 = XDR)    
uint32:   pcid (key to POINTCLOUD_SCHEMAS)    
uchar[]:  pointdata (interpret relative to pcid)    
```  
The patch binary formats have additional standard header information:    
the compression number, which indicates how to interpret the data    
the number of points in the patch    
Patch Binary (Uncompressed)    
```  
byte:         endianness (1 = NDR, 0 = XDR)    
uint32:       pcid (key to POINTCLOUD_SCHEMAS)    
uint32:       0 = no compression    
uint32:        npoints    
pointdata[]:  interpret relative to pcid    
```  
pcpatch的压缩格式的二进制表述请参考    
https://github.com/pgpointcloud/pointcloud    
## 如果将数据导入point cloud    
有两种格式导入      
From WKB    
From PDAL    
参考    
https://github.com/pgpointcloud/pointcloud    
## pcpoint和pcpatch类型的SQL定义      
```  
CREATE TYPE pcpoint (    
	internallength = variable,    
	input = pcpoint_in,    
	output = pcpoint_out,    
	-- send = geometry_send,    
	-- receive = geometry_recv,    
	typmod_in = pc_typmod_in,    
	typmod_out = pc_typmod_out,    
	-- delimiter = ':',    
	-- alignment = double,    
	-- analyze = geometry_analyze,    
	storage = external -- do not try to compress it please    
);    
CREATE TYPE pcpatch (    
	internallength = variable,    
	input = pcpatch_in,    
	output = pcpatch_out,    
	-- send = geometry_send,    
	-- receive = geometry_recv,    
	typmod_in = pc_typmod_in,    
	typmod_out = pc_typmod_out,    
	-- delimiter = ':',    
	-- alignment = double,    
	-- analyze = geometry_analyze,    
	storage = external    
);    
CREATE TYPE pointcloud_abs (    
	internallength = 8,    
	input = pointcloud_abs_in,    
	output = pointcloud_abs_out,    
	alignment = double    
);    
```  
## pcpoint 数据类型 输入输出 对应的C函数    
```  
PG_FUNCTION_INFO_V1(pcpoint_in);    
Datum pcpoint_in(PG_FUNCTION_ARGS)    
{    
	char *str = PG_GETARG_CSTRING(0);    
	/* Datum pc_oid = PG_GETARG_OID(1); Not needed. */    
	int32 typmod = 0;    
	uint32 pcid = 0;    
	PCPOINT *pt;    
	SERIALIZED_POINT *serpt = NULL;    
	if ( (PG_NARGS()>2) && (!PG_ARGISNULL(2)) )    
	{    
		typmod = PG_GETARG_INT32(2);    
		pcid = pcid_from_typmod(typmod);    
	}    
	/* Empty string. */    
	if ( str[0] == '\0' )    
	{    
		ereport(ERROR,(errmsg("pcpoint parse error - empty string")));    
	}    
	/* Binary or text form? Let's find out. */    
	if ( str[0] == '0' )    
	{    
		/* Hex-encoded binary */    
		pt = pc_point_from_hexwkb(str, strlen(str), fcinfo);    
		pcid_consistent(pt->schema->pcid, pcid);    
		serpt = pc_point_serialize(pt);    
		pc_point_free(pt);    
	}    
	else    
	{    
		ereport(ERROR,(errmsg("parse error - support for text format not yet implemented")));    
	}    
	if ( serpt ) PG_RETURN_POINTER(serpt);    
	else PG_RETURN_NULL();    
}    
PG_FUNCTION_INFO_V1(pcpoint_out);    
Datum pcpoint_out(PG_FUNCTION_ARGS)    
{    
	PCPOINT *pcpt = NULL;    
	PCSCHEMA *schema = NULL;    
	SERIALIZED_POINT *serpt = NULL;    
	char *hexwkb = NULL;    
	serpt = PG_GETARG_SERPOINT_P(0);    
	schema = pc_schema_from_pcid(serpt->pcid, fcinfo);    
	pcpt = pc_point_deserialize(serpt, schema);    
	hexwkb = pc_point_to_hexwkb(pcpt);    
	pc_point_free(pcpt);    
	PG_RETURN_CSTRING(hexwkb);    
}    
```  
## pcpatch 数据类型 输入输出 对应的C函数    
```  
PG_FUNCTION_INFO_V1(pcpatch_in);    
Datum pcpatch_in(PG_FUNCTION_ARGS)    
{    
	char *str = PG_GETARG_CSTRING(0);    
	/* Datum geog_oid = PG_GETARG_OID(1); Not needed. */    
	uint32 typmod = 0, pcid = 0;    
	PCPATCH *patch;    
	SERIALIZED_PATCH *serpatch = NULL;    
	if ( (PG_NARGS()>2) && (!PG_ARGISNULL(2)) )    
	{    
		typmod = PG_GETARG_INT32(2);    
		pcid = pcid_from_typmod(typmod);    
	}    
	/* Empty string. */    
	if ( str[0] == '\0' )    
	{    
		ereport(ERROR,(errmsg("pcpatch parse error - empty string")));    
	}    
	/* Binary or text form? Let's find out. */    
	if ( str[0] == '0' )    
	{    
		/* Hex-encoded binary */    
		patch = pc_patch_from_hexwkb(str, strlen(str), fcinfo);    
		pcid_consistent(patch->schema->pcid, pcid);    
		serpatch = pc_patch_serialize(patch, NULL);    
		pc_patch_free(patch);    
	}    
	else    
	{    
		ereport(ERROR,(errmsg("parse error - support for text format not yet implemented")));    
	}    
	if ( serpatch ) PG_RETURN_POINTER(serpatch);    
	else PG_RETURN_NULL();    
}    
PG_FUNCTION_INFO_V1(pcpatch_out);    
Datum pcpatch_out(PG_FUNCTION_ARGS)    
{    
	PCPATCH *patch = NULL;    
	SERIALIZED_PATCH *serpatch = NULL;    
	char *hexwkb = NULL;    
	PCSCHEMA *schema = NULL;    
	serpatch = PG_GETARG_SERPATCH_P(0);    
	schema = pc_schema_from_pcid(serpatch->pcid, fcinfo);    
	patch = pc_patch_deserialize(serpatch, schema);    
	hexwkb = pc_patch_to_hexwkb(patch);    
	pc_patch_free(patch);    
	PG_RETURN_CSTRING(hexwkb);    
}    
```  
## 参考    
https://en.wikipedia.org/wiki/Lidar    
http://baike.baidu.com/view/2922098.htm    
https://github.com/pgpointcloud/pointcloud    
http://pointcloud.org/    
https://en.wikipedia.org/wiki/Point_cloud    
http://www.pdal.io/    
http://www.pdal.io/quickstart.html    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")