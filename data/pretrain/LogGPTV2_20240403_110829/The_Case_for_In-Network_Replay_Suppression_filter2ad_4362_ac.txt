vantages: it has a relatively low processing overhead (i.e., a sin-
gle hash operation), no communication overhead, and no time-
synchronization requirement. However, it has a large memory foot-
print, which makes it impractical for routers: for a fully saturated
10-Gbps link, a router needs to store 109 bits of data for each
passing second. Even an efﬁcient storage data structure, such as
a Bloom ﬁlter is impractical: a router would need 142 MB to store
packets received in one minute, assuming a target false positive rate
of 10−5 and the largest packet size of 1500-byte, i.e., the lowest
packet rate. No router can store 142 MB in its on-chip cache. Even
if the router stores packets for a minute, adversaries can still replay
packets after one minute. Thus, indeﬁnitely storing observed trafﬁc
without a mechanism to discard packets is not viable.
Sliding Time Windows. A router maintains a time window and
accepts packets whose timestamps fall within the window. This re-
quires time synchronization since the source needs to use a times-
tamp that falls within the time window of the router. To prevent
replays, the router needs to store the packets that it has forwarded
in a buffer until the packets become invalid by falling out of the
sliding time window. This approach has minimal communication
overhead (the timestamp in the packet) since the router does not
exchange additional messages with the source. However, minimiz-
ing the size of the buffer comes at the cost of strict time synchro-
nization so that legitimate packets are not dropped. Since precise
Internet-wide time synchronization is impractical, we consider this
approach also impractical.
Per-Packet Sequence Numbers. A source and an intermediate
router maintain a sequence number for the source’s last observed
packet: the source inserts a sequence number in each packet, and
the router accepts packets that have a higher sequence number than
the router has previously seen from the source. This approach does
not require any time synchronization, does not incur any latency
overhead, and does not introduce prohibitive computation over-
head. However, packet reordering can cause dropping of legitimate
packets, when packets with higher sequence numbers arrive before
packets with lower sequence numbers. Furthermore, this mecha-
nism requires per-source state at routers; thus, the storage overhead
depends on the granularity at which sources are identiﬁed. For ex-
ample, if sources are identiﬁed at the granularity of a host, then this
approach requires per-host state at routers, which is impractical.
Challenge-Response. For each packet, a router asks the source
host to send a proof of transmission that veriﬁes that the packet is
not a replay: the router inserts a nonce and expects from the source
a cryptographic signature over the nonce; alternately, the source
can produce a message authentication code (MAC) using a key that
is shared with the router. The latter approach has a relatively small
computation overhead and does not require time synchronization.
However, it has the largest communication overhead of all mech-
anisms since a separate challenge is needed for every packet that
traverses every router. Hence, it is impractical.
Second Chance. This hybrid approach [42] combines three of the
four primitives discussed above:
it uses a variable-sized sliding
time window and uses a buffer to store past packets for the duration
of the window. To eliminate the requirement for time synchroniza-
tion between a source and a router, it uses a challenge-response
mechanism when needed: when the packet’s timestamp falls out-
side the router’s time window, the router asks the source to resend
the packet using a timestamp the router provides, thereby giving
the source a second chance. This approach is impractical at the
router level because packets typically go through multiple routers
that perform replay detection, and as a result, a packet may expe-
rience multiple rounds of second chances; thus incurring a large
communication overhead that makes the approach impractical.
4.
IN-NETWORK REPLAY SUPPRESSION
We present our solution for in-network replay suppression, starting
with our assumption. Then, we provide a high-level overview of the
solution, followed by the protocol details. Finally, we formulate an
optimization problem to determine all the parameters.
Assumption: We assume that a source-authentication scheme is
deployed, i.e., every packet in the network is attributed to its source.
We emphasize that replay attacks are meaningful only if source
authentication is deployed; otherwise, an adversary controlling a
router can directly inject/spoof trafﬁc and attack any target. There-
fore, source authentication is a fundamental requirement of such
security schemes; it is not a speciﬁc limitation of our mechanism.
As we show in Section 2, source authentication does not prevent
replay attacks, however it is necessary to prevent malicious routers
from tampering with trafﬁc.
The source-authentication literature has several proposals that
can be used. For instance, OPT [18] uses dynamically re-creatable
keys in order to provide scalable source and data authentication.
Packet Passport [17,43] uses multiple message authentication codes
(MACs) to provide AS-AS authentication; each MAC is computed
with the shared-key between the source AS and the transit AS on
the path. Shared keys are generated through Difﬁe-Hellman key
exchanges, using the public and private keys of ASes; the public
keys are obtained from RPKI [44]. OPT and Passport are practical
at the router level and can be used by our mechanism.
4.1 Overview
We build our replay-suppression mechanism based on two primi-
tives: per-interval sequence numbers and storing packet digests in
a Bloom Filter (BF). A valid sequence number is the ﬁrst control
check to ensure that a packet is legitimate (Section 4.1.1). If the
packet is accepted, it is then checked against a locally stored list of
previously observed packets that also have valid sequence numbers
(Section 4.1.2).
In other words: packets that are stored and re-
played signiﬁcantly after their observation time will be caught due
to a sequence-number mismatch; packets that are replayed shortly
after their observation will be caught by the BF; and packets that are
replayed with a modiﬁed sequence number will be caught by source
authentication. Through this combination, we build a mechanism
that does not require global time synchronization and does not in-
troduce communication overhead due to additional messages. Fur-
thermore, our mechanism does not require adoption at every router,
but can be deployed only at border routers of ASes; we discuss the
security implications of the deployment locations in Section 6.1.
4.1.1 Per-Interval Sequence Numbers
Recall from Section 3 that the use of per-packet sequence num-
bers (seqNos) has two implications for a replay-suppression mech-
anism: the storage overhead depends on the granularity at which
sources are identiﬁed, and that legitimate packets may be dropped
if a packet with a higher seqNo arrives earlier than a packet with a
lower seqNo.
In our approach, every source AS uses a seqNo, and every other
AS (more precisely, their border router) remembers the seqNo of
the source AS; in other words, routers keep per-AS state. More
precisely, the source AS embeds a seqNo in every outbound packet,
and transit routers only accept packets with seqNos that fall within
a seqNo window. Furthermore, the source AS does not increment
its seqNo per packet, but at ﬁxed time intervals; in essence, ASes
achieve loose synchronization without relying on global time syn-
chronization. Our approach raises two important issues: the update
frequency of the seqNos and the dissemination mechanism for new
seqNos.
Update Frequency. The source AS periodically increments its
seqNo in order to invalidate previously sent packets with smaller
seqNos. Note that to achieve loose synchronization, the seqNo-
update frequency is the only parameter that requires global agree-
ment among ASes: ASes update their seqNos at a constant interval,
but the seqNo values and the actual events of updating them are not
synchronized. This approach makes it easier to handle packet re-
ordering. A router maintains a seqNo window and only the packets
with seqNos within the window are accepted. The use of per-packet
seqNos makes it hard to determine an appropriate length for the
window so that legitimate packets are not dropped; the length de-
pends on parameters that change dynamically over time, such as
trafﬁc patterns (e.g., packet bursts) and load balancing at interme-
Table 1: Summary of Parameters and Notation
r
σ
Parameters determined by the environment
Incoming packet rate at the routers.
Maximum latency variation between packets.
Parameters determined by the optimization problem (§4.3)
T
fp
M
L
∆
Sequence-number-update interval.
False-positive rate.
Length of the sequence-number window.
Bloom ﬁlter switching interval.
Additional time to delay sequence-number updates.
Number of bloom ﬁlters.
Size of bloom ﬁlter.
Number of hash functions or bloom ﬁlter indices.
N
m
k
SNS
SNR
S
T T LS
BFi
BFw
p
p
SN
S
Symbols for Source AS S
Sequence number used by S.
Symbols for Router R
Sequence number that router R maintains for S
TTL until R increments SNR
S .
i-th bloom ﬁlter, where 0 ≤ i  SNR
S then
p
S ← SN
S
SNR
T T LS ← T + ∆
return
end if
end for
We emphasize that a packet is inserted to a BF independent of
the seqNo in the packet; the packet is added only to the currently
active ﬁlter, the writeable ﬁlter. However, the observed packet is
checked for replay by checking all BFs for membership, includ-
ing the writeable one; a positive response from any of the ﬁlters
indicates a replay.
In order to delete packets, the ﬁlter that be-
comes writeable is reinitialized to zero. Note that packets in the
zeroed ﬁlter have sequence numbers that are no longer valid and
will be discarded if replayed. This approach naturally raises two
inter-related issues: how to determine the number N of ﬁlters in the
data structure and the frequency of rotation L.
Recall that a router periodically rotates the BFs, but the rotation
is independent of the seqNo updates by the ASes. In order to ensure
replay detection, a router must remember a packet at least until the
packet seqNo is invalidated. That is, the BF coverage period must
be at least as long as that of the seqNo-window, so that valid seqNos
cannot be replayed. Hence, the time window that the BFs must
cover, which is N · L, must exceed the amount of time that is needed
for the packet to become invalid. At the same time, BFs must be
small to reduce storage requirements and ﬁt in fast memory.
In
Section 4.3, we take N and L into account to compute the optimal
parameters for our replay-suppression protocol.
4.1.2
Storing Packet Digests
4.2 Protocol Operations
A router stores digests for previously observed packets to guar-
antee that packets with valid seqNos are not replayed. This is a
consequence of using per-interval seqNos, since a seqNo does not
uniquely identify a packet.
We create a data structure that consists of multiple BFs that are
periodically rotated. In this data structure, a packet is inserted only
into one of the ﬁlters, which we denote as the writeable ﬁlter; how-
ever, when searching if the packet has been previously observed, all
ﬁlters are searched. Furthermore, the ﬁlters are periodically rotated
in a round-robin fashion to prevent ﬂooding of a single ﬁlter with
too many insertions.
We present the tasks that are performed by the egress border routers
of the source AS S and by the ingress border routers R of the inter-
mediate and destination ASes. Table 1 summarizes the parameters
and the notation we use.
Source AS: S inserts its seqNo SNS in every outbound packet. In
addition, it increments its seqNo SNS after each interval T.
Ingress Router: For each incoming packet from a neighboring AS,
R checks if the packet falls within the seqNo window for S and if
the packet is present in any of the BFs. Algorithm 1 describes the
procedure that R executes for incoming packets.
Initially, the router checks the authenticity of the packet (Lines
p
1-2) and checks if the seqNo in the packet (SN
S ) falls within the
seqNo window (Lines 5-6). If the packet is not authentic or has
an invalid seqNo, the packet is dropped and the procedure termi-
nates. Then, for valid packets, the router checks if the packet has
been previously recorded in any of the N BFs (Lines 12-16). If the
packet has not been seen previously, it is added to the writeable ﬁl-
ter (Line 18) and then it is forwarded (Line 19). Note that when
querying/adding a packet to a BF, the router computes a pseudo-
random-function (PRF) over the content of the packet, excluding
the mutable packet ﬁelds. The output of the PRF is used to deter-
mine the bits in the BFs that must be checked/set; the key for the
PRF is known only to the AS. The use of a PRF is necessary to pre-
vent an adversary from launching a chosen insertion attack against
the BFs: if the adversary can control which bits in the writeable
ﬁlter are set, it can set all bits in the BFs and cause all packets to be
recognized as replays.
Furthermore, if the seqNo in the packet is higher than the one
locally stored for S, R updates its seqNo and reinitializes T T LS to
T + ∆ (Lines 8-10), which is the count-down timer used to self-