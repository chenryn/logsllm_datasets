或者列出加载的类（警告：这会输出大量内容，下面我会对代码进行相应的解释）：
    [USB::Android Emulator 5556::['com.android.chrome']]-> Java.perform(function(){Java.enumerateLoadedClasses({"onMatch":function(className){ console.log(className) },"onComplete":function(){}})})
    org.apache.http.HttpEntityEnclosingRequest
    org.apache.http.ProtocolVersion
    org.apache.http.HttpResponse
    org.apache.http.impl.cookie.DateParseException
    org.apache.http.HeaderIterator
我们在这里输入了一个比较长的命令，确切地说是一些嵌套的函数代码。首先，请注意，我们输入的代码必须包装在Java.perform（function（）{…}）中，这是Fridas的Java
API的硬性要求。
下面是我们在Java.perform包装器中插入的函数体：
    Java.enumerateLoadedClasses(
      {
      "onMatch": function(className){ 
            console.log(className) 
        },
      "onComplete":function(){}
      }
    )
上面的代码非常简单：我们使用Fridas
API的Java.enumerateLoadedClasses枚举所有加载的类，并使用console.log将匹配的类输出到控制台。这种回调对象在Frida中是一种非常常见的模式。你可以提供一个回调对象，形式如下所示
    {
      "onMatch":function(arg1, ...){ ... },
      "onComplete":function(){ ... },
    }
当Frida找到符合要求的匹配项时，就会使用一个或多个参数来调用onMatch；当Frida完成匹配工作时，就会调用onComplete。  
现在，让我们进一步学习Frida的magic，并通过Frida覆盖一个函数。此外，我们还将介绍如何从外部脚本加载代码，而不是将代码键入cli，因为这种方式更方便。首先，将下面的代码保存到一个脚本文件中，例如chrome.js：
    Java.perform(function () {
        var Activity = Java.use("android.app.Activity");
        Activity.onResume.implementation = function () {
            console.log("[*] onResume() got called!");
            this.onResume();
        };
    });
上面的代码将会覆盖android.app.Activity类的onResume函数。它会调用Java.use来接收这个类的包装对象，并访问其onResume函数的implementation属性，以提供一个新的实现。在新的函数体中，它将通过this.onResume()调用原始的onResume实现，所以应用程序依然可以继续正常运行。
打开您的模拟器和Chrome，然后通过-l选项来注入这个脚本：
    frida -U -l chrome.js com.android.chrome
一旦触发了onResume——例如切换到另一个应用程序并返回到模拟器中的Chrome——您将收到下列输出：
    [*] onResume() got called!
很好，不是吗？我们实际上覆盖了应用程序中的一个函数。这就给控制目标应用程序的行为提供了可能性。但是，实际上我们可以继续发挥：还能够利用Javaschoose查找堆中已经实例化的对象。
需要注意的是，当你的模拟速度较慢的时候，Frida经常会超时。为了防止这种情况，请将脚本封装到函数setImmediate中，或将它们导出为rpc。RPC在Frida默认情况下不超时（感谢@oleavr给予的提示）。在修改脚本文件后，setImmediate将自动重新运行你的脚本，所以这是相当方便的。同时，它还在后台运行您的脚本。这意味着你会立刻得到一个cli，即使Frida仍然在忙着处理你的脚本。请继续等待，不要离开cli，直到Frida显示脚本的输出为止。然后，再次修改chrome.js：
    setImmediate(function() {
        console.log("[*] Starting script");
        Java.perform(function () {
            Java.choose("android.view.View", { 
                 "onMatch":function(instance){
                      console.log("[*] Instance found");
                 },
                 "onComplete":function() {
                      console.log("[*] Finished heap search")
                 }
            });
        });
    });
运行frida -U -l chrome.js com.android.chrome，这时应该会产生以下输出：
    [*] Starting script
    [*] Instance found
    [*] Instance found
    [*] Instance found
    [*] Instance found
    [*] Finished heap search
我们在堆上找到了4个android.view.View对象的实例。让我们看看能用这些搞点什么事情。首先，我们可以调用这些实例的对象方法。这里，我们只是为console.log输出添加instance.toString（）。由于我们使用了setImmediate，所以现在只需修改我们的脚本，然后Frida会自动重新加载它：
    setImmediate(function() {
        console.log("[*] Starting script");
        Java.perform(function () {
            Java.choose("android.view.View", { 
                 "onMatch":function(instance){
                      console.log("[*] Instance found: " + instance.toString());
                 },
                 "onComplete":function() {
                      console.log("[*] Finished heap search")
                 }
            });
        });
    });
返回的结果为：
    [*] Starting script
    [*] Instance found: android.view.View{7ccea78 G.ED..... ......ID 0,0-0,0 #7f0c01fc app:id/action_bar_black_background}
    [*] Instance found: android.view.View{2809551 V.ED..... ........ 0,1731-0,1731 #7f0c01ff app:id/menu_anchor_stub}
    [*] Instance found: android.view.View{be471b6 G.ED..... ......I. 0,0-0,0 #7f0c01f5 app:id/location_bar_verbose_status_separator}
    [*] Instance found: android.view.View{3ae0eb7 V.ED..... ........ 0,0-1080,63 #102002f android:id/statusBarBackground}
    [*] Finished heap search
Frida实际上为我们调用了android.view.View对象实例的toString方法。酷毙了！所以，在Frida的帮助下，我们可以读取进程内存、修改函数、查找实际的对象实例，并且所有这些只需寥寥几行代码就可以搞定。
现在，我们已经对Frida有了一个基本的了解，如果想要进一步深入了解它的话，可以自学其文档和API。为了使得这篇文章更加全面，本文还将介绍两个主题，即Frida的绑定和r2frida。但是在此之前，需要首先指出一些注意事项。
**注意事项**
当使用Frida时，经常会出现一些不稳定的情形。首先，将外部代码注入另一个进程容易导致崩溃，毕竟应用程序是以其非预期的方式被触发，来执行某些额外的功能的。第二，Frida本身貌似仍然处于实验阶段。它的确非常有用，但是许多时候我们必须尝试各种方式才能获得所需的结果。例如，当我尝试从命令行加载脚本然后生成一个命令的进程时，Frida总是崩溃。所以，我不得不先生成进程，然后让Frida注入脚本。这就是为什么我展示Frida的使用和防止超时的各种方法的原因。当然，许多时候您要根据自己的具体情况来找出最有效的方法。
**Python绑定**
若想利用Frida进一步提升自己工作的自动化程度的话，你应该学习应用性更高的Python、C或NodeJS绑定，当然，前提是你已经熟悉了Frida的工作原理。例如，要从Python注入chrome.js脚本的话，可以使用Frida的Python绑定。首先，创建一个chrome.py脚本：
    #!/usr/bin/python
    import frida
    # put your javascript-code here
    jscode= """
    console.log("[*] Starting script");
    Java.perform(function() {
       var Activity = Java.use("android.app.Activity");
        Activity.onResume.implementation = function () {
            console.log("[*] onResume() got called!");
            this.onResume();
        };
    });
    """
    # startup frida and attach to com.android.chrome process on a usb device
    session = frida.get_usb_device().attach("com.android.chrome")
    # create a script for frida of jsccode
    script = process.create_script(jscode)
    # and load the script
    script.load()
更多的例子，请参考Frida的文档。
**Frida和Radare2：r2frida**
如果我们还可以使用类似Radare2之类的反汇编框架来检查应用程序的内存的话，那不是更好吗？别急，我们有r2frida。您可以使用r2frida将Radare2连接到Frida，然后对进程的内存进行静态分析和反汇编处理。不过，我们这里不会对r2frida进行详细的介绍，因为我们假设您已经了解了Radare2的相关知识（如果您对它还比较陌生的话，建议您抽时间学习一下，我认为这是非常值得的）。无论如何，您都没有必要过于担心，因为这个软件的用法非常容易上手，看看下面的例子您就知道此言不虚。
您可以使用Radare2的数据包管理程序来安装r2frida（假设您已经安装了Radare2）：
    r2pm install r2frida
回到我们的frida-trace示例，删除或重命名我们修改的脚本，让frida-trace再次生成默认的脚本，并重新查看日志：
    michael@sixtyseven:~$ frida-trace -i open -U -f com.android.chrome
    Instrumenting functions...                                              
    open: Loaded handler at "/home/michael/__handlers__/libc.so/open.js"
    Started tracing 1 function. Press Ctrl+C to stop.                       
               /* TID 0x2740 */
       282 ms  open(pathname=0xa843ffc9, flags=0x80002)
               /* TID 0x2755 */
       [...]
使用r2frida的话，您可以轻松地检查所显示的内存地址的内容并读取路径名（在本例中为/ dev / binder）：
    root@sixtyseven:~# r2 frida://emulator-5556/com.android.chrome
     -- Enhance your graphs by increasing the size of the block and graph.depth eval variable.
    [0x00000000]> s 0xa843ffc9
    [0xa843ffc9]> px
    - offset -   0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF
    0xa843ffc9  2f64 6576 2f62 696e 6465 7200 4269 6e64  /dev/binder.Bind
    0xa843ffd9  6572 2069 6f63 746c 2074 6f20 6f62 7461  er ioctl to obta
    0xa843ffe9  696e 2076 6572 7369 6f6e 2066 6169 6c65  in version faile
    0xa843fff9  643a 2025 7300 4269 6e64 6572 2064 7269  d: %s.Binder dri
    [...]
访问进程以及让r2frida执行注入操作的语法如下所示：
    r2 frida://DEVICE-ID/PROCESS
下面展示以=！为前缀的情况下，有哪些可用的r2frida命令，其中，您可以快速搜索内存区域中特定的内容或对任意内存地址执行写入操作：
    [0x00000000]> =!?
    r2frida commands available via =!
    ?                          Show this help
    ?V                         Show target Frida version
    /[x][j]   Search hex/string pattern in memory ranges (see search.in=?)
    /w[j] string               Search wide string
    [...]
**小结**
在这篇文章中，我们重点介绍Frida在Android应用方面的应用。在本教程的第二篇中，我们将介绍如何通过Frida轻松搞定crackme。
**传送门**
* * *
[**【技术分享】利用FRIDA攻击Android应用程序（二）**](http://bobao.360.cn/learning/detail/3634.html)