### 微服务与容器：需警惕的五大陷阱

**作者**: Kevin Casey  
**类别**: 观点  
**日期**: 2018-01-19 15:33:22  
**译者**: qhwdw  
**校对**: wxy  
**来源**: [Linux中国](https://linux.cn/)  

---

微服务和容器技术相得益彰，但若无周密规划与适配，它们的优势可能无法完全发挥。以下五点是组织在采用这两种技术时常见的误区，提前了解这些问题可以帮助你规避风险，确保项目成功。

![](/data/attachment/album/201801/19/153328uzw2zrg4k1ntrwgg.png)

#### 1. 同时从零开始部署微服务和容器化
如果你正从单一应用转向微服务架构或你的团队尚缺乏相关经验，建议分阶段实施。先通过容器化现有或新应用积累知识和技能，再逐步过渡到微服务架构。Sungard Availability Services 的资深 CTO 架构师 Kevin McGrath 认为，这种方式能帮助团队更平稳地过渡，并减少业务中断的风险。

> “微服务的良好运行需要多年的迭代优化。如果不能快速迁移，支持微服务将变得困难重重。”——Kevin McGrath

#### 2. 以面向客户或关键业务应用作为起点
对于初次尝试微服务和容器化的组织来说，应先从小规模、低风险的应用入手，如内部工具或持续集成系统。这样可以在不影响用户体验的情况下积累实践经验。DigitalOcean 的工程经理 Mac Browning 建议：“在全面推广前，先在影响较小的环境中测试新技术。”

#### 3. 在没有合适团队的情况下引入过多复杂性
微服务架构虽然灵活，但也带来了复杂的管理需求。Red Hat 技术倡导者 Gordon Haff 指出，随着节点数量增加，管理和编排难度显著提升。此时，Kubernetes 等编排工具就显得尤为重要。此外，具备跨领域（开发、测试、安全等）协作能力的 DevOps 团队也是成功的关键。

#### 4. 忽视自动化的重要性
成功的基于容器的微服务部署往往依赖于高度自动化的流程。CloudBees 的资深软件工程师 Carlos Sanchez 强调了自动化在应对分布式架构带来的挑战（如数据持久性、日志管理及故障排查）中的重要性。“手动管理将严重限制服务规模。”他警告道。

#### 5. 随着时间推移，微服务变得臃肿
即使是在容器中运行的服务也不一定符合微服务的标准。ShieldX Networks 的 CTO Manual Nedbal 提醒道，随着时间流逝，某些组件可能会积累大量代码和功能，从而失去微服务应有的轻量级特性。“当组件增长到一定程度时，应及时拆分以保持其‘微’的本质。”Nedbal 如此建议。

总之，在享受微服务与容器带来便利的同时，务必警惕上述潜在问题，合理规划并逐步推进，方能最大化利用这两项技术的优势。