使用gettype()函数  
使用intval()函数  
使用settype()函数  
检查用户输入字符串的长度使用strlen()函数。  
检查日期或时间是否是有效的，可以使用strtotime()函数  
对于一个已经存在的程序来说，可以写一个通用函数来过滤：  
``` php
function safe($string)
{
    return "'" . mysql_real_escape_string($string) . "'";
}
```
调用方式：  
``` php
$variety = safe($_POST['variety']);
$query   = "SELECT * FROM wines WHERE variety=" . $variety;
```
对于一个刚开始写的程序，应当设计的更安全一些，PHP5中，增加了MySQL支持，提供了mysqli扩展：  
PHP手册地址：http://php.net/mysqli  
``` php
```
mysqli扩展提供了所有的查询功能。  
mysqli扩展也提供了面向对象的版本：  
``` php
prepare("SELECT intelligence FROM animals WHERE name = ?");
if ($stmt) {
    $stmt->bind_param("s", $animalName);
    $stmt->execute();
    $stmt->bind_result($intelligence);
    if ($stmt->fetch()) {
        print "A $animalName has $intelligence intelligence.\n";
    } else {
        print 'Sorry, no records found.';
    }
    $stmt->close();
}
$mysqli->close();
?>
```
## 四、防止XSS攻击
xss攻击一个常用的方法就是注入HTML元素执行js脚本，php中已经内置了一些防御的函数（如htmlentities或者htmlspecialchars）：  
``` php
' . safe($title) . '
       ' . safe($message) . '';
?>
```
### 过滤用户提交的URL
如果允许用户输入一个URL用来调用一个图片或者链接，你需要保证他不传入`javascript:`或者`vbscript:`或`data:`等非http协议。  
可以使用php的内置函数parse_url()函数来分割URL，然后做判断。  
设置允许信任的域：  
``` php
```
## 五、防止远程执行
远程执行通常是使用了php代码执行如eval()函数，或者是调用了命令执行如exec()，passthru()，proc_open()，shell_exec()，system()或popen()。php为开发者提供了非常多的方法可以来调用允许php脚本，我们就需要注意对用户可控的数据进行过滤。  
### 调用的几种方式：
include()和require()函数，eval()函数，preg_replace()采用e模式调用，编写脚本模板。  
``` php
```
上面代码将会输出Helloworld，php在解析的时候会检查是否存在一个名为Hello的函数。  
如果没有找到的话，他会自己创建一个并把它的名字作为它的值，world也是一样。  
攻击者可以上传一个看似很普通的图片，PDF等，但是实际上呢？  
linux下可以使用如下命令插入php代码进入图片中：  
`$ echo '' >> locked.gif`  
把代码插入到了locked.gif图片中，并且此时用file命令查看文件格式仍为图片：  
`$ file -i locked.giflocked.gif: image/gif`  
任何的图像编辑或图像处理的程序包括PHP的getimagesize()函数，都会认为它是一个GIF图像。  
但当把图片的后缀改为php或者以php的方式解析时，插入的phpinfo()函数便会执行。  
### Shell命令执行
PHP提供了一些可以直接执行系统命令的函数，如exec()函数或者 `（反引号）。  
PHP的安全模式会提供一些保护，但是也有一些方式可以绕过安全模式：  
1、上传一个Perl脚本，或者Python或Ruby等，服务器支持的环境，来执行其他语言的脚本可绕过PHP的安全模式。  
2、利用系统的缓冲溢出漏洞，绕过安全模式。  
下表列出了跟Shell相关的一些字符：  
![phpsec2](../pictures/phpsec2.png)  
如下PHP脚本：  
```  php
```
用户可以输入如下的URL来攻击读取passwd文件：  
wordcount.php?filename=%2Fdev%2Fnull%20%7C%20cat%20-%20%2Fetc%2Fpasswd  
字符串拼接之后，将会执行 /usr/bin/wc /dev/null | cat - /etc/passwd这条命令  
如果能够不使用命令执行函数与eval()函数，可以在php.ini中禁止：`disable_functions = "eval,phpinfo"`  
PHP中还有一个preg_replace()函数，可能引起代码执行漏洞。  
mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit ] )  
在 subject 中搜索 pattern 模式的匹配项并替换为 replacement 。如果指定了 limit ，则仅替换 limit 个匹配。  
如果省略 limit 或者其值为 -1，则所有的匹配项都会被替换。  
特别注意：  
/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。  
提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。  
``` php
```
当用户输入 `?h=[p hp]phpinfo()[/php]`  
经过正则匹配后， replacement 参数变为`'test("phpinfo()")'`，此时phpinfo仅是被当做一个字符串参数了。  
但是当我们提交`?h=[p hp]{${phpinfo()}}[/php]` 时，phpinfo()就会被执行。  
在php中，双引号里面如果包含有变量，php解释器会将其替换为变量解释后的结果；单引号中的变量不会被处理。  
注意：双引号中的函数不会被执行和替换。  
在这里我们需要通过`{${}}`构造出了一个特殊的变量，`'test("{${phpinfo()}}")'`，达到让函数被执行的效果， `${phpinfo()}` 会被解释执行。  