i f not
r e q u e s t . method in [ ”GET” , ”POST” , ”DELETE” ] :
return HttpResponseNotAllowed ( [ ”GET” , ”POST” ,
”DELETE” )
i f
r e q u e s t . method == ”DELETE” :
return v o l u m e d e l e t e ( r e q u e s t , volume id )
def v o l u m e d e l e t e ( r e q u e s t ,
# add pre−c o n d i t i o n − we s k i p d e t a i l e d code f o r
id ) :
s p a c e
l i m i t
i f
( ( p r o j e c t I d and p r o j v o l u m e s ==1 and p r o j v o l u m e s <
!= ’ in−use ’ and
p r o j q u o t a and v o l
u s e r g r o u p == ’ admin ’ ) or
# r e d i r e c t
. . . ) :
t h e DELETE r e q u e s t
s t a t u s
t o volume r e s o u r c e i n
c l o u d i m p l e m e t n a t i o n f o r p r o j e c t w i t h I d : 4
u r l = ’ h t t p : / / 1 3 0 . 2 3 2 . 8 5 . 9 / v3 / 4 / volumes /% s ’ % ( id )
o p e n e r = u r l l i b 2 . b u i l d o p e n e r ( u r l l i b 2 . HTTPHandler )
r e q = u r l l i b 2 . R e q u e s t ( u r l )
r e q = RequestWithMethod ( u r l , method= ’DELETE ’ )
return o p e n e r . open ( r e q u e s t )
r e s p o n s e = u r l l i b 2 . u r l o p e n ( r e q )
t h e p a g e = r e s p o n s e . r e a d ( )
# c h e c k P o s t C o n d i t i o n
i f
( ( p r e p r o j e c t I d and p r e p r o j v o l u m e s ==1 and
s t a t u s
p r e p r o j v o l u m e s < p r e p r o j q u o t a and
p r e v o l
p r e u s e r g r o u p == ’ admin ’ ) or
i f
!= ’ in−use ’ and
. . .
r e s p o n s e . code == 204 # r e s o u r c e d e l e t e d
r e s p o n s e = H t t p R e s p o n s e ( t h e p a g e )
return r e s p o n s e
) :
Listing 2.
volume resource on Cinder API
Excerpt of DELETE view in Cloud Monitor for DELETE on
We can get the relative URI for each resource directly from
Figure 3 (left) which is then mapped to the respective views
as shown in Listing 3.
u r l p a t t e r n s = p a t t e r n s ( ’ ’ ,
( r ’ ˆ c m o n i t o r / volumes / (\ d{1 ,3}) $ ’ , volume )
( r ’ ˆ c m o n i t o r / p r o j e c t s / $ ’ , p r o j e c t s ) ,
( r ’ ˆ c m o n i t o r / p r o j e c t s / (\ d{1 ,3}) / volume / $ ’ ,
,
p r o j e c t v o l u m e ) , )
Listing 3. URIs and views mapping for Cloud Monitor
532
Since models.py simply serves a local copy of the cloud
resources being monitored, for brevity, we omit showing it.
D. Monitoring OpenStack
We installed OpenStack on a virtual machine (VM) with an
ISO ﬁle on MacBook Pro with an i7 processor and 16 GB
RAM. We used Oracle VM virtual box and Ubuntu 16.04
LTS ISO ﬁle. We deployed Newton version of OpenStack
as two node architecture, i.e., controller and compute [9].
All the other needed services were conﬁgured on these VM
nodes. The controller node was conﬁgured with 8 GB RAM,
40 GB hard disk, and 2 VCPUs. The compute node also
had 40 GB hard disk with 2 VCPUs but 4 GB RAM. We
implemented our private cloud with three user groups and
roles shown above. We set up the cloud infrastructure for
the project named myProject. The cloud monitor was run
from Mac’s terminal using curl commands [4] that invoked
private cloud implementation running in Oracle VirtualBox.
During validation, we were able to kill all
three mutants
(errors) systematically introduced in the cloud implementation
to detect wrong authorization on resources. Due to the space
limit, we omit the detailed discussion of technical details of
the validation procedure.
VII. RELATED WORK
There are three strands of research related to our work:
model-driven security engineering, generation of executable
code with contracts from models and security of private
clouds. Research on using models to develop and analyze
secure systems has been an active area of research for more
than a decade. Nguyen et al. [30] provide a comprehen-
sive overview of the research done in this area. The works
speciﬁcally focusing on using UML to model authorization
include such frameworks as SECTET [12], UMLsec [23],
MDSE@R [13] and [14]. These works introduce the dedicated
UML proﬁles to model security requirements. In our work, we
have chosen to rely on the standard UML without employing
a proﬁling mechanism. Such an approach allows us to use a
variety of industrial-strength tools for UML, which promotes
an industrial adoption of our method. Moreover, our model-
driven approach is speciﬁcally tailored for the stateless nature
of REST APIs, which is also novel comparing to the existing
works.
A large body of work exists in generating executable condi-
tions from various modelling notations. Gordon and Harel [19]
generate executable code from structured requirements. Their
work translates controlled natural language requirements into
live sequence charts that are made fully executable. The
work of Lohman [26] uses the visual contracts to specify
software interfaces. In this work, the visual contracts and class
diagrams deﬁne the dynamic and static aspects of a service
correspondingly. The approach relies on graph transformations
of the underlying modelling to deﬁne pre- and post-conditions
of the operations. The assertions generated from the visual
contracts are incorporated in Java Modeling Language and
used to check software behavior at runtime. The general idea
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:49:51 UTC from IEEE Xplore.  Restrictions apply. 
behind our work is close to Lohman’s approach. The main
distinction of our approach is its focus on validating the
advanced scenarios of REST APIs, which are widely used
in cloud frameworks. Moreover, in addition to pre- and post-
conditions, we also use the invariants as deﬁned by design-
by-contract paradigm [28].
Cloud security research has resulted in creating a variety
of monitoring tools. Among them are the tools aiming at
risk evaluation (e.g., [36]), enhanced encryption (e.g., [16]),
continuous checking of security requirements according to
the SLA document (e.g, [24] ) as well as approaches that
detect suspicious user behavior (e.g, [32]). Our monitoring
tool addresses security from a different perspective. Namely,
we aim at checking whether the implemented security policy
complies to its speciﬁcation. Our goal
is to detect errors
made by the developers during the implementation of private
clouds. While there are many technical solutions to safeguard
cloud APIs, in our work we aim at validating security at the
application level. Moreover, to the best of our knowledge, there
are no model-based design and monitoring approaches that
address behavioral interfaces to properly represent the stateless
nature of REST APIs.
VIII. CONCLUSIONS
In this paper, we have presented an approach and associated
tool for monitoring security in cloud. We have relied on
the model-driven approach to design APIs that exhibit REST
interface features. The cloud monitors, generated from the
models, enable an automated contract-based veriﬁcation of
correctness of functional and security requirements, which are
implemented by a private cloud infrastructure. The proposed
semi-automated approach aimed at helping the cloud devel-
opers and security experts to identify the security loopholes
in the implementation by relying on modelling rather than
manual code inspection or testing. It helps to spot the errors
that might be exploited in data breaches or privilege escalation
attacks. Since open source cloud frameworks usually undergo
frequent changes, the automated nature of our approach allows
the developers to relatively easily check whether functional
and security requirements have been preserved in new releases.
REFERENCES
[1] Amazon Web Services. https://aws.amazon.com/. Accessed: 30.11.2017.
[2] Block Storage API V3 .
https://developer.openstack.org/api-ref/
block-storage/v3/. retrieved: 126.2017.
[3] Cloud Computing Trends: 2017 State of the Cloud Survey. https://www.
rightscale.com/blog/cloud-industry-insights/. Accessed: 30.11.2017.
[4] cURL. http://curl.haxx.se/. Accessed: 20.08.2013.
[5] Extensible markup language (xml). https://www.w3.org/XML/. Ac-
cessed: 27.03.2018.
Security
[6] Keystone
and Architecture Review.
Online
at
https://www.openstack.org/summit/
openstack-summit-atlanta-2014/session-videos/presentation/keystone-
security-and-architecture-review. retrieved: 06.2017.
[7] Nomagic MagicDraw. http://www.nomagic.com/products/magicdraw/.
[8] OpenStack Block Storage Cinder.
https://wiki.openstack.org/wiki/
Accessed: 27.03.2018.
Cinder. Accessed: 26.03.2018.
[9] OpenStack Newton - Installation Guide.
https://docs.openstack.org/
newton/install-guide-ubuntu/overview.html. Accessed: 20.11.2017.
[10] urllib2 - extensible library for opening URLs. Python Documentation.
Accessed: 18.10.2012.
[11] Windows Azure. https://azure.microsoft.com. Accessed: 30.11.2017.
[12] MM Alam et al. Model driven security for web services (mds4ws).
In Multitopic Conference, 2004. Proceedings of INMIC 2004. 8th
International, pages 498–505. IEEE, 2004.
[13] Mohamed Almorsy et al. Adaptable, model-driven security engineering
for saas cloud-based applications. Automated Software Engineering,
21(2):187–224, 2014.
[14] Christopher Bailey et al. Run-time generation, transformation, and ver-
iﬁcation of access control models for self-protection. In Proceedings of
the 9th International Symposium on Software Engineering for Adaptive
and Self-Managing Systems, pages 135–144. ACM, 2014.
[15] Tim Berners-Lee et al. Hypertext transfer protocol–HTTP/1.0, 1996.
[16] Gaurav Bhatnagar and QMJ Wu. Chaos-based security solution for
ﬁngerprint data during communication and transmission. IEEE Trans-
actions on Instrumentation and Measurement, 61(4):876–887, 2012.
[17] David Ferraiolo et al. Role-based access control (rbac): Features
In Proceedings of 11th annual computer security
and motivations.
application conference, pages 241–48, 1995.
[18] Django Software Foundation. Django Documentation. Online Docu-
mentation of Django 2.0, 2017. https://docs.djangoproject.com/en/2.0/.
[19] Michal Gordon and David Harel. Generating executable scenarios
from natural language. In International Conference on Intelligent Text
Processing and Computational Linguistics. Springer, 2009.
[20] Robert L Grossman. The case for cloud computing.
IT professional,
11(2):23–27, 2009.
[21] A. Holovaty and J. Kaplan-Moss. The Django Book. Online version of
The Django Book, 2010. http://docs.djangoproject.com/en/1.2/.
[22] Adrian Holovaty and Jacob Kaplan-Moss.
The deﬁnitive guide to
Django: Web development done right. Apress, 2009.
[23] Jan J¨urjens. Towards development of secure systems using umlsec.
In International Conference on Fundamental Approaches to Software
Engineering, pages 187–200. Springer, 2001.
[24] Nesrine Kaaniche et al. Security SLA based monitoring in clouds.
In Edge Computing (EDGE), 2017 IEEE International Conference on,
pages 90–97. IEEE, 2017.
[25] Ronald L Krutz and Russell Dean Vines. Cloud security: A comprehen-
sive guide to secure cloud computing. Wiley Publishing, 2010.
[26] Marc Lohmann et al. A model-driven approach to discovery, testing
and monitoring of web services. In Test and Analysis of Web Services,
pages 173–204. Springer, 2007.
[27] Sean Marston et al. Cloud computingthe business perspective. Decision
support systems, 51(1):176–189, 2011.
[28] Bertrand Meyer. Applying’design by contract’. Computer, 25(10), 1992.
[29] Dejan Milojiˇci´c et al. Opennebula: A cloud management tool.
IEEE
Internet Computing, 15(2):11–14, 2011.
[30] Phu H Nguyen et al. An extensive systematic review on the model-driven
development of secure systems. Information and Software Technology,
68:62–81, 2015.
[31] OMG. OCL, OMG Available Speciﬁcation, Version 2.0, 2006.
[32] Alina Oprea et al. Mosaic: A platform for monitoring and security
In Cybersecurity Development (SecDev),
analytics in public clouds.
IEEE, pages 69–70. IEEE, 2016.
[33] Ivan Porres and Irum Rauf.
From nondeterministic uml protocol
statemachines to class contracts. In Software Testing, Veriﬁcation and
Validation (ICST), 2010 Third International Conference on, pages 107–
116. IEEE, 2010.
[34] Irum Rauf and Ivan Porres. Beyond crud. In REST: From Research to
Practice, pages 117–135. Springer, 2011.
[35] Irum Rauf and Ivan Porres. Designing Level3 behavioral REST web
service interfaces. ACM Applied Computing Review, 11(3), 2011.
[36] Mehmet Sahinoglu. An input–output measurable design for security
IEEE
meter model to quantify and manage software security risk.
Transactions on Instrumentation and Measurement, 57(6), 2008.
[37] Omar Sefraoui et al. Openstack: toward an open-source solution for
International Journal of Computer Applications,
cloud computing.
55(3), 2012.
[38] OMG UML.
2.4. 1 superstructure speciﬁcation. Technical report,
document formal/2011-08-06. Technical report, OMG, 2011.
[39] Jim Webber et al. REST in Practice: Hypermedia and Systems Archi-
tecture. O’Reilly Media, Inc., 2010.
533
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:49:51 UTC from IEEE Xplore.  Restrictions apply.