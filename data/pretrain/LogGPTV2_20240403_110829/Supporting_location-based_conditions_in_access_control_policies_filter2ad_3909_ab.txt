fused with precision, that is, the closeness of agreement
between independent test results obtained under stipulated
conditions.

deal with boolean queries asking the Location Service to as-
sess whether a given value (or range thereof) of a location
predicate is true or false.
Boolean queries can be modeled as functions of the form:
predicate(parameters,value)→[bool value,conﬁdence,timeout]
stating whether or not (depending on whether bool value
is True or False) predicate over parameters has the stated
value. For instance, a query may ask whether a terminal is
located inside a given region. Here, the assessment (True
or False) has again a time validity speciﬁed by a timeout
parameter; but instead of providing a measure accuracy, we
assume that the Location Service attaches to answers a con-
ﬁdence value.
• The conﬁdence value expresses the level of reliability
that the Location Service is willing to guarantee to
the assessment (True or False), according to accuracy,
environmental and weather conditions, granularity of
the requested location, and measurement technique.
While conﬁdence is associated with measurement ac-
curacy, which in turn depends on the technology used
for localizing the requester, the quality of the Loca-
tion Service and so forth, the form of this dependency
is encapsulated within the Location Service.
• The timeout represents the time validity of the result.
This timeout takes into account that location values
may change rapidly, even during policy evaluation. If
the evaluation of a condition involving a predicate hap-
pens to start after the predicate timeout is expired,
predicate re-evaluation is triggered.
Limiting ourselves to boolean queries simpliﬁes the format
of policy rules but does not represent a real constraint on
expressive power. Intuitively, a range query with a condition
on the returned range can be expressed as a boolean query
where the condition is moved within the predicate itself.
For instance, a condition requesting the area where the user
is and then evaluating whether the area is Milan, can be
represented as a condition requesting whether it is true or
not that the user is in the Milan area.
Its worth noting that in range queries the Location Ser-
vice can respond with diﬀerent ranges and accuracy levels,
thus varying the granularity of the response. For instance,
the service can choose between a high-accuracy answer spec-
ifying a wide range (e.g., a city) or a low-accuracy answer
specifying a smaller region (e.g., a building).
In boolean
queries, the accuracy is essentially established by the Ac-
cess Control Engine, which sets the granularity at which the
request is to be evaluated (e.g., asking the Location Service
whether the user is located within a building or within a
city, depending on the granularity needed for evaluating the
access control policy). The Location Service answers stat-
ing whether the predicate is true or false, together with the
conﬁdence it has in such a response. The rationale behind
our choice (i.e., boolean queries with a level of conﬁdence)
is to decouple the physical measurement error from the ac-
cess control condition that the Access Control Engine has
to evaluate. The Location Service is in the best position for
providing a conﬁdence estimate, because associating con-
ﬁdence with a range requires educated guesses about the
measured variable probability distribution, as well as the
knowledge of the number of physical measurements actually
taken by the sensors. Our choice enables the Access Control
Engine to evaluate location-based conditions without taking
into account technological details of the location measure-
ment process. An additional beneﬁt of our approach is to
foster interoperability between the Access Control Engine
and multiple Location Services, possibly relying on diﬀer-
ent location technologies. Given a certain conﬁdence in the
evaluation of a location-based predicate (e.g., saying that a
requester has been positively localized in a given area with
a conﬁdence level of 90%), the Access Control Engine will
compute the ﬁnal outcome of boolean location-based pred-
icates by means of its local conﬁdence thresholds (see Sec-
tion 5). The conﬁdence and timeout with which a Loca-
tion Service responds to queries can be set via Service Level
Agreements (SLAs) between the Access Control Engine and
the Location Service.
3.2 Location-based predicates
The ﬁrst step in the deﬁnition of location-based conditions
is to identify the kind of conditions that it might be useful
to include in access control policies and whose evaluation is
possible with today’s technology. We identiﬁed three main
classes of conditions:
• position-based conditions on the location of the user;
for instance, to evaluate whether a user is in a certain
building or city or in the proximity of other entities;
• movement-based conditions on the mobility of the
users, such as their velocity, acceleration, or direction
where they are headed;
• interaction-based conditions relating multiple users or
entities; for instance, the number of users within a
given area.
We have also deﬁned some speciﬁc predicates correspond-
ing to speciﬁc conditions of the kind identiﬁed by the classes
above. Our language is extensible with respect to the pred-
icates and other predicates can be added as the need arises
and technology progresses.
The language for location-based predicates assumes the
following two elements.
• Users is the set of user identiﬁers (UID) that unam-
biguously identify users known to the Location Ser-
vices. This includes both users of the system (i.e.,
potential requestors) as well as any other known phys-
ical and/or moving entity which may need to be lo-
cated (e.g., a vehicle with an on-board GPRS card).
A typical UID for location-based applications is the
SIM number linking the user’s identity to a mobile
terminal.4
• Areas is a set of map regions identiﬁed either via a ge-
ometric model (i.e., a range in a n-dimensional coor-
dinate space) or a symbolic model (i.e., with reference
to entities of the real world such as cells, streets, cities,
zip code, buildings, and so on) [17].
In the following, we will refer to elements of Users and of
Areas as user and area terms, respectively. Note that, while
4Individual users may carry multiple SIMs and SIMs may be
passed over to other users. We shall not elaborate on these
issues, as strong identity management in mobile networks is
outside the scope of this paper.

we assume such elements to be ground in the predicates, our
language could be readily extended to support variables for
them.
All our predicates are expressed as boolean queries, and
therefore have the form predicate(parameters, value) as il-
lustrated in Section 3.1. Their evaluation returns a triple
[bool value, conﬁdence, timeout]. Whenever there is no risk
of confusion, we will omit the predicates result.
Our core set of location predicates includes the following
predicates (see Table 1).
Example 1. Let AliceSIM be an element of Users and
Milan and Director Office be two elements of Areas (spec-
ifying two symbolic characterizations corresponding to two
known ranges of spatial coordinates).
inarea(Alice,Milan) = [True,0.9,2005-11-09 11:10am]
states that the Location Service assesses as true the fact that
Alice is located in Milan with a conﬁdence of 90%; and that
such an assessment is to be considered valid until 11:10am
of November 9, 2005.
• A binary position predicate inarea whose ﬁrst argu-
ment is a user term and second argument is an area
term. The predicate’s semantics is evaluating whether
a user is located within a speciﬁc area (e.g., a city, a
street, a building).
• A binary position predicate disjoint whose ﬁrst argu-
ment is a user term and second argument is an area
term. The predicate’s semantics is evaluating whether
a user is outside a speciﬁc area. Intuitively, disjoint is
the equivalent to the negation of inarea.
• A 4-ary position predicate distance whose ﬁrst argu-
ment is a user term, second argument is either a user
or area term (identifying an entity in the system),
while the third and fourth arguments are two num-
bers specifying the minimum (min dist) and maximum
(max dist) distance, respectively. The semantics of
this predicate is to request whether the user lies within
a given distance from the speciﬁed entity. The entity
involved in the evaluation can be either stable or mov-
ing, physical or symbolic, and can also be the resource
to which the user is requesting access. Note that exact
distance can be evaluated by setting the same value for
min dist and max dist, while “closer than” conditions
can be evaluated by setting min dist to 0. Finally,
“farther than” conditions can be evaluated by setting
max dist to inﬁnity.
• A ternary movement predicate velocity whose ﬁrst ar-
gument is a user term, while the second and third
arguments are two numbers specifying a minimum
(min vel ) and maximum (max vel ) velocity, respec-
tively. The semantics of the predicate is to request
whether the user speed lies within a given range of ve-
locity. Similarly to what happens for distance, exact
velocity can be requested by setting the same value for
min vel and max vel , while “smaller than” or “greater
than” conditions can be evaluated by setting min vel
equal to 0 or a max vel equal to inﬁnity, respectively.
• A ternary interaction predicate density whose ﬁrst ar-
gument is an area term, while second and third argu-
ments are numbers specifying a minimum (min num)
and maximum (max num) of users. The semantics of
the predicate is to request whether the number of users
currently in an area lies within the interval speciﬁed.
• A 4-ary interaction predicate local density whose ﬁrst
argument is a user, the second argument is a “rela-
tive” area with respect to the user, while the third
and fourth arguments specify a minimum (min num)
and maximum (max num) of users, respectively. The
semantics of the predicate is to evaluate the density
within an area surrounding the user.
velocity(Alice,70,90) = [True,0.7,2005-11-03 03:00pm]
states that the Location Service assesses as true the fact that
Alice is traveling at a speed included in the range [70,90]
with a conﬁdence of 70%, and that such an assessment is to
be considered valid until 3:03pm of November 3, 2005.
density(Director Office,0,1) = [False,0.95,2005-11-21
06:00pm]
states that the Location Service assesses as false the state-
ment that there is at most one person in the Director
Office and believes that two or more persons are in the
oﬃce with a conﬁdence of 95%. Such an assessment is to be
considered valid until 06:00pm of November 21, 2005.
4. LOCATION-BASED ACCESS CONTROL
POLICIES
We now discuss how location-based access control policies
can be expressed. Note that we will not attempt to develop a
new language for specifying access control policies. Instead,
our proposal can be thought of as a general solution for en-
riching the expressive power of existing languages (e.g., [6,
15, 21, 26]), by exploiting location information, without in-
creasing the computational complexity of their evaluation.
Here, we keep the language and the context representation
as simple as possible, assuming that the Access Control En-
gine recognizes only users registered at the server. Each user
is assigned an identiﬁer. Besides their identiﬁers, registered
users usually have other properties such as name, address,
and date of birth. To capture and reason about these prop-
erties, we assume that each user is associated with a user
proﬁle. Objects are the data/services on which users can
make requests. Abstractions can also be deﬁned within the
domain of objects, allowing to group together objects with
common characteristics and to refer to the whole group with
a single name. Similarly to subjects, objects have set of
properties represented by means of an object proﬁle. For
the sake of simplicity and generality of the approach, we as-
sume access control rules to be triples whose elements are
generic boolean formula over the subject requesting access,
the object to which access is requested, and the action the
subjects wants to perform on it. Considering boolean for-
mula over generic predicates and/or properties makes our
approach applicable to (and compliant with) various pro-
posals existing in the literature. Formally, an access control
rule is deﬁned as follows.
Definition 1
(Access control rule). An
access
control rule is a triple of the form subj expr, obj expr,
action, where:
• subj expr is a boolean formula of terms that allows
referring to a set of subjects depending on whether they

Type
Position
Predicate
inarea(user, area)
disjoint(user , area)
distance(user , entity, min dist, max dist)
Movement
velocity(user , min vel , max vel )
Interaction density(area, min num, max num)
local density(user ,
max num)
area,
min num,
the
Description
Evaluate whether user is located within area.
Evaluate whether user is outside area.
Evaluate whether
distance
user and entity is within interval
max dist].
Evaluate whether user ’s speed falls within range
[min vel , max vel ].
Evaluate whether the number of users cur-
rently in area falls within interval [min num,
max num].
Evaluate the density within a ‘relative’ area sur-
rounding user .
between
[min dist,
Table 1: Examples of location-based predicates
satisfy or not certain conditions, where conditions can
evaluate the user’s proﬁle, location predicates, or the
user’s membership in groups, active roles, and so on;
• obj expr is a boolean formula of terms that allows
referring to a set of objects depending on whether
they satisfy or not certain conditions, where conditions
evaluate membership of the object in categories, values
of properties on metadata, and so on;
• action is the action (or class of actions) to which the
rule refers.
We assume proﬁles to be referenced with the identity of
the corresponding users/objects. Single properties within
users and objects proﬁles are referenced with the traditional
dot notation. For instance, Alice.Address indicates the
address of user Alice. Here, Alice is the identity of the user
(and therefore the identiﬁer for the corresponding proﬁle),
and Address is the name of the property. To make it possible
to refer to the user and object of the request being evaluated
without need of introducing variables in the language, we
introduce the following keywords.
• user. It indicates the identiﬁer of the person making
the request.
• sim. It indicates the SIM card number of the person
making the request.
• object.
which access is requested.
It indicates the identiﬁer of the object to
For instance, user.Affiliation indicates the property
Affiliation within the proﬁle of the user whose request is
being processed.
Conditions speciﬁed in the subj expr ﬁeld can be classiﬁed
into two categories: generic conditions and location-based
conditions. Generic conditions evaluate membership of sub-
jects into classes or properties in their proﬁles. For sim-
plicity, we can assume that information stored at a service
provider is suﬃcient to evaluate generic conditions. Cases
where the Access Control Engine does not have any a priori
knowledge of the user can be solved by assuming a nego-
tiation/communication process between the two, eventually
yielding to a state where the Access Control Engine does
have all the information it needs (or it decides to deny the
access). In this paper, we do not consider this phase of eval-
uation; rather, we refer to the many proposals existing in

the literature that can be used for this step (e.g., [6, 28]).
Our proposal can be seamlessly integrated with any of them.
Location-based conditions are expressed using the location
predicates described in Section 3.
In the following, we use P to denote the set of access con-
trol policies stored at the Access Control Engine. Given an
access control rule r ∈ P, subj expr(r), obj expr(r), action(r)
will denote the subject expression, object expression, and
action, respectively, of r.
Example 2. An important scenario for the application of
location-based access control policies is accessing highly sen-
sitive services, whose security requirements need both strong
authentication methods and powerful and expressive access
control policies. As an example of such critical services, let
us consider a company which is responsible for the manage-