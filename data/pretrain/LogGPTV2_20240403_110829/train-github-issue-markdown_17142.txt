When attempting to use the `children` prop with a component that utilizes `forwardRef`, you may encounter the following TypeScript error:

```
TS2322: Type '{ children: ReactNode; error: boolean; full: boolean; secondary: boolean; type: "submit" | "reset" | "button"; white: boolean; }' is not assignable to type 'IntrinsicAttributes & BaseButtonInnerProps & RefAttributes'. Property 'children' does not exist on type 'IntrinsicAttributes & BaseButtonInnerProps & RefAttributes'.
```

This error occurs because the `ForwardRefRenderFunction` interface, which defines the signature for the render function passed to `forwardRef`, does not include `children` in its props. Here is the relevant part of the `ForwardRefRenderFunction` interface:

```typescript
interface ForwardRefRenderFunction<T, P = {}> {
    (props: P, ref: ((instance: T | null) => void) | MutableRefObject<T | null> | null): ReactElement | null;
    displayName?: string;
    defaultProps?: never;
    propTypes?: never;
}

function forwardRef<T, P = {}>(render: ForwardRefRenderFunction<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;
```

The `ForwardRefRenderFunction` interface does not include `PropsWithChildren`, leading to the type mismatch when trying to pass `children` as a prop.

### Solutions

There are two ways to resolve this issue:

1. **Wrap `PropsWithChildren` with `PropsWithoutRef`:**

   By using `PropsWithoutRef`, you can ensure that the `ref` prop is not included in the props passed to the component, while still allowing `children` to be passed.

   ```typescript
   import { PropsWithoutRef, PropsWithChildren } from 'react';

   const MyComponent: ForwardRefRenderFunction<MyComponentProps, PropsWithChildren<PropsWithoutRef<MyComponentProps>>> = (
       props,
       ref
   ) => {
       // Your component implementation
   };

   const ForwardedMyComponent = forwardRef(MyComponent);
   ```

2. **Manually declare `PropsWithChildren` in your component:**

   You can manually add `PropsWithChildren` to your component's props and remove it from the `ForwardRefRenderFunction` interface.

   ```typescript
   import { PropsWithChildren } from 'react';

   interface MyComponentProps {
       error: boolean;
       full: boolean;
       secondary: boolean;
       type: 'submit' | 'reset' | 'button';
       white: boolean;
   }

   const MyComponent: ForwardRefRenderFunction<MyComponentProps, PropsWithChildren<MyComponentProps>> = (
       props,
       ref
   ) => {
       // Your component implementation
   };

   const ForwardedMyComponent = forwardRef(MyComponent);
   ```

### Contributors

- @johnnyreilly
- @bbenezech
- @pzavolinsky
- @digiguru
- @ericanderson
- @DovydasNavickas
- @theruther4d
- @guilhermehubner
- @ferdaber
- @jrakotoharisoa
- @pascaloliv
- @Hotell
- @franklixuefei
- @Jessidhia
- @saranshkataria
- @lukyth
- @eps1lon
- @zieka
- @dancerphil
- @dimitropoulos
- @disjukr
- @vhfmag
- @hellatan

By applying one of these solutions, you can ensure that your component correctly handles the `children` prop while using `forwardRef`.