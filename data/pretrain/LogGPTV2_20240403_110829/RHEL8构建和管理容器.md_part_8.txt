::: itemizedlist
-   卷可以在容器间共享。
-   卷可以更容易备份或迁移。
-   卷不会增加容器的大小。
:::
::: itemizedlist
**先决条件**
-   已安装 Podman 工具。
    ``` literallayout
    #  yum module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  创建卷：
    ``` literallayout
    $ podman volume create hostvolume
    ```
2.  显示卷信息：
    ``` literallayout
    $ podman volume inspect hostvolume
    [
        {
            "name": "hostvolume",
            "labels": {},
            "mountpoint": "/home/username/.local/share/containers/storage/volumes/hostvolume/_data",
            "driver": "local",
            "options": {},
            "scope": "local"
        }
    ]
    ```
    请注意，它会在卷目录中创建一个卷。您可以保存到
    变量的挂载点路径，以便更轻松地操作：
    `$ mntPoint=$(podman volume inspect hostvolume --format {{.Mountpoint}})。`{.literal}
    请注意，如果您运行
    `sudo podman volume create hostvolume`{.literal}，则挂载点会更改为
    `/var/lib/containers/storage/volumes/hostvolume/_data`{.literal}。
3.  使用 `mntPoint`{.literal} 变量中存储的路径在目录中创建一个文本文件：
    ``` literallayout
    $ echo "Hello from host" >> $mntPoint/host.txt
    ```
4.  列出 `mntPoint`{.literal} 变量定义的目录中的所有文件：
    ``` literallayout
    $ ls $mntPoint/
    host.txt
    ```
5.  运行名为 `myubi1`{.literal} 的容器，并将
    `主机上 hostvolume`{.literal} 卷名称定义的目录映射到容器上的
    `/containervolume1`{.literal} 目录：
    ``` literallayout
    $ podman run -it --name myubi1 -v hostvolume:/containervolume1 registry.access.redhat.com/ubi8/ubi /bin/bash
    ```
    请注意，如果您使用 `mntPoint`{.literal}
    变量定义的卷路径(`-v $mntPoint:/containervolume1)`{.literal}，则运行
    `podman volume prune`{.literal}
    命令时数据可能会丢失，这会删除未使用的卷。始终使用
    `-v hostvolume_name:/containervolume_name`{.literal}。
6.  列出容器上共享卷中的文件：
    ``` literallayout
    # ls /containervolume1
    host.txt
    ```
    您可以查看在主机上创建的 `host.txt`{.literal} 文件。
7.  在 `/containervolume1`{.literal} 目录中创建文本文件：
    ``` literallayout
    # echo "Hello from container 1" >> /containervolume1/container1.txt
    ```
8.  使用 `CTRL+p 和 CTRL+`{.literal} q``{=html} 从容器分离。
9.  列出主机上共享卷中的文件，您应该看到两个文件：
    ``` literallayout
    $ ls $mntPoint
    container1.rxt  host.txt
    ```
    此时，您要在容器和主机间共享文件。要在两个容器之间共享文件，请运行另一个名为
    `myubi2 的容器`{.literal}。
10. 运行名为 `myubi2`{.literal} 的容器，并将
    `主机上 hostvolume`{.literal} 卷名称定义的目录映射到容器上的
    `/containervolume2`{.literal} 目录：
    ``` literallayout
    $ podman run -it --name myubi2 -v hostvolume:/containervolume2 registry.access.redhat.com/ubi8/ubi  /bin/bash
    ```
11. 列出容器上共享卷中的文件：
    ``` literallayout
    # ls /containervolume2
    container1.txt host.txt
    ```
    您可以看到您在 `myubi1 容器中创建的 host .`{.literal} txt 和
    `container1.txt`{.literal} 上创建的 host.txt 文件。``{=html}
12. 在 `/containervolume2`{.literal} 目录中创建文本文件：
    ``` literallayout
    # echo "Hello from container 2" >> /containervolume2/container2.txt
    ```
13. 使用 `CTRL+p 和 CTRL+`{.literal} q``{=html} 从容器分离。
14. 列出主机上共享卷中的文件，您应该看到三个文件：
    ``` literallayout
    $ ls $mntPoint
    container1.rxt  container2.txt host.txt
    ```
:::
::: itemizedlist
**其它资源**
-   `man podman-volume`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_exporting-and-importing-containers_assembly_working-with-containers}导出和导入容器 {.title}
:::
您可以使用 `podman export`{.literal}
命令将正在运行的容器的文件系统导出到本地机器上的 tarball
中。例如，如果您有一个大容器，不常使用，或者您想要保存快照以便稍后恢复到该容器，则可以使用
`podman export`{.literal} 命令将正在运行的容器的当前快照导出到 tarball
中。
您可以使用 `podman import 命令导入`{.literal} tarball
并将其保存为文件系统镜像。然后您可以运行此文件系统映像，或者将其用作其他镜像的层。
::: itemizedlist
**先决条件**
-   已安装 Podman 工具。
    ``` literallayout
    #  yum module install -y container-tools
    ```
:::
::: orderedlist
**流程**
1.  根据 `registry.access.redhat.com/ubi8/ubi 镜像运行 myubi`{.literal}
    容器``{=html} ：
    ``` literallayout
    $ podman run -dt --name=myubi registry.access.redhat.com/ubi8/ubi
    ```
2.  可选：列出所有容器：
    ``` literallayout
    $ podman ps -a
    CONTAINER ID  IMAGE                                    COMMAND          CREATED     STATUS         PORTS   NAMES
    a6a6d4896142  registry.access.redhat.com/ubi8:latest   /bin/bash        7 seconds ago  Up 7 seconds ago          myubi
    ```
3.  附加到 `myubi`{.literal} 容器：
    ``` literallayout
    $ podman attach myubi
    ```
4.  创建名为 `testfile`{.literal} 的文件：
    ``` literallayout
    [root@a6a6d4896142 /]# echo "hello" > testfile
    ```
5.  使用 `CTRL+p 和 CTRL+`{.literal} q``{=html} 从容器分离。
6.  将 `myubi`{.literal} 的文件系统导出为本地机器上的
    `myubi-container.tar`{.literal} ：
    ``` literallayout
    $ podman export -o myubi.tar a6a6d4896142
    ```
7.  可选：列出当前目录内容：
    ``` literallayout
    $ ls -l
    -rw-r--r--. 1 user user 210885120 Apr  6 10:50 myubi-container.tar
    ...
    ```
8.  可选：创建一个 `myubi-container`{.literal} 目录，提取
    `myubi-container.tar`{.literal}
    存档中的所有文件。以类似于树的格式列出 `myubi-directory`{.literal}
    的内容：
    ``` literallayout
    $ mkdir myubi-container
    $ tar -xf myubi-container.tar -C myubi-container
    $ tree -L 1 myubi-container
    ├── bin -> usr/bin
    ├── boot
    ├── dev
    ├── etc
    ├── home
    ├── lib -> usr/lib
    ├── lib64 -> usr/lib64
    ├── lost+found
    ├── media
    ├── mnt
    ├── opt
    ├── proc
    ├── root
    ├── run
    ├── sbin -> usr/sbin
    ├── srv
    ├── sys
    ├── testfile
    ├── tmp
    ├── usr
    └── var
    20 directories, 1 file
    ```
    您可以看到 `myubi-container.tar`{.literal} 包含容器文件系统。
9.  导入 `myubi.tar`{.literal} 并将其保存为文件系统镜像：
    ``` literallayout
    $ podman import myubi.tar myubi-imported
    Getting image source signatures
    Copying blob 277cab30fe96 done
    Copying config c296689a17 done
    Writing manifest to image destination
    Storing signatures
    c296689a17da2f33bf9d16071911636d7ce4d63f329741db679c3f41537e7cbf
    ```
10. 列出所有镜像：
    ``` literallayout
    $ podman images
    REPOSITORY                              TAG     IMAGE ID      CREATED         SIZE
    docker.io/library/myubi-imported       latest  c296689a17da  51 seconds ago  211 MB
    ```
11. 显示 `testfile`{.literal} 文件的内容：
    ``` literallayout
    $ podman run -it  --name=myubi-imported docker.io/library/myubi-imported cat testfile
    hello
    ```
:::
::: itemizedlist
**其它资源**
-   `podman-export`{.literal} man page
-   `podman-import`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_stopping-containers_assembly_working-with-containers}停止容器 {.title}
:::
使用 `podman stop`{.literal} 命令停止正在运行的容器。您可以根据其容器 ID
或名称指定容器。
::: itemizedlist
**先决条件**
-   已安装 Podman 工具。
    ``` literallayout
    #  yum module install -y container-tools
    ```
-   至少一个容器正在运行。
:::
::: itemizedlist
**流程**
-   停止 `myubi`{.literal} 容器：
    ::: itemizedlist
    -   使用容器名称：
        ``` literallayout
        $ podman stop myubi
        ```
    -   使用容器 ID:
        ``` literallayout
        $ podman stop 1984555a2c27
        ```
    :::
:::
要停止附加到终端会话的正在运行的容器，您可以在容器内输入
`exit`{.literal} 命令。
`podman stop`{.literal} 命令发送 SIGTERM
信号来终止正在运行的容器。如果容器在定义的时间段后不停止（默认为 10
秒），Podman 会发送 SIGKILL 信号。
您还可以使用 `podman kill 命令来终止`{.literal}
容器(SIGKILL)，或向容器发送不同的信号。以下是向容器发送 SIGHUP
信号的示例（如果应用程序支持，SIGHUP
会导致应用程序重新读取其配置文件）：
``` screen
# podman kill --signal="SIGHUP" 74b1da000a11
74b1da000a114015886c557deec8bed9dfb80c888097aa83f30ca4074ff55fb2
```
::: itemizedlist
**其它资源**
-   `man podman-stop`{.literal}
-   `man podman-kill`{.literal}
:::
:::
::: section
::: titlepage
# []{#assembly_working-with-containers_building-running-and-managing-containers.html#proc_removing-containers_assembly_working-with-containers}删除容器 {.title}
:::
使用 `podman rm`{.literal} 命令移除容器。您可以使用容器 ID
或名称指定容器。
::: itemizedlist
**先决条件**
-   已安装 Podman 工具。
    ``` literallayout
    #  yum module install -y container-tools
    ```
-   至少一个容器已被停止。
:::
::: orderedlist
**流程**
1.  列出所有容器、运行或停止的容器：
    ``` literallayout
    $ podman ps -a
    CONTAINER ID IMAGE         COMMAND    CREATED    STATUS                PORTS NAMES     IS INFRA
    d65aecc325a4 ubi8/ubi      /bin/bash  3 secs ago Exited (0) 5 secs ago peaceful_hopper false
    74b1da000a11 rhel8/rsyslog rsyslog.sh 2 mins ago Up About a minute     musing_brown    false
    ```
2.  移除容器：
    ::: itemizedlist
    -   删除 cri `_hopper`{.literal} 容器：
        ``` literallayout
        $ podman rm peaceful_hopper
        ```
        请注意，`firewall_hopper`{.literal} 容器处于 Exited
        状态，这表示它已被停止，可以立即移除。
    -   要删除 `musing_brown`{.literal}
        容器，首先停止容器，然后将其删除：
        ``` literallayout
        $ podman stop musing_brown
        $ podman rm musing_brown
        ```
        ::: variablelist