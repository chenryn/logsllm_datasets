### Title: BlackHat Asia 2021: Racing the Dark: A New TOCTTOU Story from Apple's Core

When developing operating system kernels and drivers, functions that handle user data mapping, access, and parsing are often found to be vulnerable. To address these issues, most systems define standard operating rules for handling untrusted user input. For example, on Linux platforms, the kernel and third-party drivers should use functions like `copy_from_user` and `copy_to_user` to manipulate user-mode buffers. On Windows, a similar set of operations is known as "Probe and Capture." Routines that violate these rules can introduce double-fetch or Time-of-Check-to-Time-of-Use (TOCTTOU) vulnerabilities into the kernel.

On macOS/iOS platforms, the situation is more complex. Functions like `io_connect_method` automatically handle user input for the kernel and extensions, while BSD functions such as `copyin` and `copyout` provide support for manual operations. This means that, with the help of `io_connect_method`, developers might only need to focus on data parsing and secondary pointer processing. However, is this assumption always valid?

This presentation will share over a dozen zero-day vulnerabilities related to macOS kernel memory mapping. Some subtle cases demonstrate that developers may only identify the most obvious issues when a vulnerable function is mixed with different types of vulnerabilities. This can lead to security updates being bypassed through race conditions. These examples highlight the need to re-examine the memory mapping mechanisms in macOS/iOS to ensure robust security.