title:The Age of Data: Pinpointing Guilty Bytes in Polymorphic Buffer Overflows
on Heap or Stack
author:Asia Slowinska and
Herbert Bos
23rd Annual Computer Security Applications Conference
23rd Annual Computer Security Applications Conference
The Age of Data: pinpointing guilty bytes in polymorphic buﬀer
overﬂows on heap or stack
Asia Slowinska, Herbert Bos
Vrije Universiteit Amsterdam
Department of Computer Science, Faculteit der Exacte Wetenschappen
De Boelelaan 1081, 1081 HV Amsterdam, Netherlands
{asia,herbertb}@few.vu.nl
Abstract
Heap and stack buﬀer overﬂows are still among the
most common attack vectors in intrusion attempts. In
this paper, we ask a simple question that is surpris-
ingly diﬃcult to answer: which bytes contributed to the
overﬂow? By careful observation of all scenarios that
may occur in overﬂows, we identiﬁed the information
that needs to be tracked to pinpoint the oﬀending bytes.
There are many reasons why this is a hard problem.
For instance, by the time an overﬂow is detected some
of the bytes may already have been overwritten, creat-
ing gaps. Additionally, it is hard to tell the oﬀending
bytes apart from unrelated network data. In our solu-
tion, we tag data from the network with an age stamp
whenever it is written to a buﬀer. Doing so allows us
to distinguish between diﬀerent bytes and ignore gaps,
and provide precise analysis of the oﬀending bytes. By
tracing these bytes to protocol ﬁelds, we obtain accurate
signatures that cater to polymorphic attacks.
Keywords: attack analysis, intrusion detection and
prevention, honeypots
1 Introduction
Polymorphic network attacks are diﬃcult to detect
and even harder to ﬁngerprint and stop. This is espe-
cially true if the exploit itself is polymorphic [11]. We
deﬁne ﬁngerprinting as the process of ﬁnding out how
an attack works. It is important for two reasons: anal-
ysis of the attack (e.g., by human security experts),
and signature generation.
Signature generation is hard because of the complex
and conﬂicting list of constraints. Signatures should in-
cur a negligible ratio of false positives, while the num-
ber of false negatives should be low. Also, we should
be able to check signatures at high rates and cater to
polymorphic attacks with polymorphic exploits. We
further aim for fast, one-shot generation without the
need to replay the attack.
In this paper, we address the problem of polymor-
phic buﬀer overﬂow attacks on heap and stack. Given
their long history and the wealth of counter-measures,
it is perhaps surprising that buﬀer overﬂows are still
the most popular attack vector. For instance, more
than one third of all vulnerabilities notes reported by
US-CERT in 2006 consisted of buﬀer overﬂows [31].
As the US-CERT’s database contains many types of
vulnerabilities (leading to denial of service, privacy vi-
olation, malfunctioning, etc.), the percentage of buﬀer
overﬂows in the set of vulnerabilities leading to control
over the victim is likely to be higher. Even Windows
Vista, a new OS with overﬂow protection built into the
core of the system, has shown to be vulnerable to such
attacks [25].
Polymorphic attacks demand that signature gen-
erators take into account properties other than sim-
ple byte patterns. For instance, previous approaches
have examined such properties as the structure of exe-
cutable data [14], or anomalies in process/network be-
havior [9, 15, 17].
In contrast, in this work we asked a simple ques-
tion that is surprisingly hard to answer: what bytes
contribute to an attack? As we will see, an answer
to this question also trivially yields reliable signatures.
Like [4], we focus on vulnerabilities rather than spe-
ciﬁc attacks, which makes the signatures impervious
to polymorphism. However, besides signatures, we be-
lieve the answer to the above question is invaluable for
later analysis by human experts.
The full system is known as Prospector, a protocol-
It
speciﬁc detector of polymorphic buﬀer overﬂows.
1063-9527/07 $25.00 © 2007 IEEE
1063-9527/07 $25.00 © 2007 IEEE
DOI 10.1109/ACSAC.2007.32
DOI 10.1109/ACSAC.2007.32
487
487
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
deals with both heap and stack overﬂows in either the
kernel or user processes and while it was implemented
and evaluated on Linux, the techniques apply to other
OSs also.
In a nutshell, the idea is as follows (see also Fig-
ure 1). We use an emulator-based honeypot with dy-
namic taint analysis [24] to detect attacks and to locate
both the exact address where a control ﬂow diversion
occurs and all the memory blocks that originate in the
network (known as the tainted bytes). The emulator
marks all bytes originating in the network as tainted,
and whenever the bytes are copied to memory or reg-
isters, the new location is tainted also. We trigger an
alert whenever the use of such data violates security
policies.
Next, we track which of the tainted bytes took part
in the attack. For instance, in a stack overﬂow we walk
up the stack looking for tainted bytes. However, we
must weed out all the memory that, while tainted, had
nothing to do with the attack (e.g., stale data that was
part of an old stack frame, such as the bytes marked
x in the ﬁgure). To do so, we track the age of data at
runtime, so that we know whether memory on the heap
or stack is a left-over from an older allocation and can
distinguish relevant bytes from memory to be ignored.
Once we know which bytes were in the buﬀer over-
ﬂow and we can trace them to the bytes that arrived
from the network, we ﬁnd out which protocol ﬁelds con-
tributed to the attack. If n ﬁelds were involved in the
overﬂow with a combined length of N, we know that
any similar protocol message with a combined length
for these ﬁelds greater or equal to N will also lead to
a buﬀer overﬂow.
Contributions. Our main contribution is the iden-
tiﬁcation of all bytes contributing to an overﬂow. The
identiﬁcation is performed in a single interaction (i.e.,
without need for replaying attacks) and is suﬃciently
fast to be used in honeypots. The signature generator
is intended to demonstrate the usefulness of such data
in practice. While the end result is a powerful signa-
ture generator in its own right, very diﬀerent signature
generators could also be built on this technique. For
instance, we essentially yield snort-like patterns which
may be used if the attack is not polymorphic. In ad-
dition, it could generate a wealth of information for
human security experts.
A second contribution is that we extend taint anal-
ysis in the temporal domain. In its simplest form, taint
analysis is zero-dimensional and consists of a single bit
for every data item to indicate whether or not it origi-
nates in a suspect source. More advanced analysis ex-
tends the analysis in the spatial dimension, by tracking
exactly where the data originated (e.g., Vigilante and
Argos both maintain a pointer in the network trace).
In this paper, we extend tracking in the temporal do-
main by storing when data is tainted. We argue that
this is essential information for signature generators
that allows us to separate relevant bytes from unre-
lated tainted memory.
A third contribution is that we ﬁrst show that well-
known existing vulnerability-based signatures based on
the length of a protocol-ﬁeld (e.g., Covers [16]) are
weak and frequently incur both false positives and false
negatives, and then remedy the weakness so as to make
false positives virtually impossible and false negatives
implausible.
A fourth contribution is that we extend the vulner-
ability signatures to include attacks based on protocol
messages that contain a specially forged (wrong) length
ﬁeld. For instance, such ﬁelds specify the length of an-
other protocol ﬁeld and by providing a wrong value,
the attack coerces vulnerable programs into allocat-
ing buﬀers that are too small and that overﬂow when
the actual data exceeds the speciﬁed length. We will
discuss more advanced attacks of this type also. Few
existing projects address such attacks.
Finally, we extended Prospector with an attack
vector-speciﬁc module to make it deal with double free
attacks.
Outline. Section 2 discusses related work. Sec-
tion 3 highlights factors in heap and stack overﬂows
that complicate the analysis. Sections 4 and 5 describe
the design and implementation of Prospector, respec-
tively. Prospector is evaluated in Section 6. Conclu-
sions are drawn in Section 7.
2 Related work
Previous work on detection of polymorphic attacks
focused on techniques that look for executable code in
messages, including: (a) abstract or actual execution of
network data in an attempt to determine the maximum
executable length of the payload [30], (b) static analysis
to detect exploit code [5], (c) sled detection [1], and
(d) structural analysis of binaries to ﬁnd similarities
between worm instances [14].
Taint-analysis is used in several projects for signa-
ture generation [21, 7]. However, none of these projects
provide an answer to the question of which bytes were
involved. Enhanced tainting [3] expands the scope of
tainting to also detect such attacks as SQL injection
and XSS, but requires source code transformation.
Transport-layer ﬁlters independent of exploit code
are proposed in Shield [32] with signatures in the
form of partial state machines modeling the vulnerabil-
ity. Speciﬁc protection against instruction and register
488488
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:39:37 UTC from IEEE Xplore.  Restrictions apply. 
1
G
w
o
l
f
r
e
v
o
target
2
target
3
target
4
vulnerable
     

     

     

     

     

     

buffer
b2
b1
x
     

     

     

     

     

     

     

     

     

     

     

     


 

 

 

 

 

 

 

 

 

 

 

 

 

 


 
 


 
 


 
 


 
 


 
 


 
 


 
 
b1
b2
A vulnerable buffer is filled with 
data from 2 locations in the network
trace (b1 and b2) and overflows a 
target address. The area marked by ’x’
is also tainted, but has nothing to do
with the overflow. Furthermore, part of
the tainted area b2 that is part of the
attack, contains a gap (indicated by ’G’).
Detect attack using taint analysis
and locate the target and the tainted
blocks. In the emulator we also track
the origin of the data in the network
trace and keep an administration to
distinguish between different memory
allocations.
Detect which tainted blocks
contributed to the attack and whether
a gap should really be ignored.
Correlate memory with network trace
and determine which protocol fields were
involved in the attack. Finally, determine
the maximum combined length for these 
fields.
Figure 1. Main steps in Prospector’s attack analysis.
shuﬄing, as well as against garbage insertion is oﬀered
by semantics-aware detection [6].
A related project, PolyGraph [20], ﬁngerprints at-
tacks by looking at invariant substrings present in dif-
ferent instances of suspicious traﬃc. The idea is to use
these substrings as a signature. Such methods are vul-
nerable to the injection of noise in the data stream [23].
Various groups have proposed anomaly detection
for catching polymorphic attacks. PAYL [33] builds
a model of the byte distribution of normal traﬃc and
compares real traﬃc with this model. Increasingly so-
phisticated mimicry attacks [13, 12] are a problem and
spark many new developments in this direction [10, 9].
SigFree [35] observes that overﬂow attacks typically
contain executables whereas legitimate requests never
contain executables, and blocks attacks by detecting
the presence of code.
Brumley et al. propose vulnerability-based signa-
tures [4] that match a set of inputs (strings) satisfying
a vulnerability condition (a speciﬁcation of a particu-
lar type of program bug) in the program. When fur-
nished with the program, the exploit string, a vulner-
ability condition, and the execution trace, the analysis
creates the vulnerability signature for diﬀerent repre-
sentations, Turing machine, symbolic constraint, and
regular expression signatures.
Packet Vaccine [34] detects anomalous payloads,