title:Efficient Oblivious Substring Search via Architectural Support
author:Nicholas Mainardi and
Davide Sampietro and
Alessandro Barenghi and
Gerardo Pelosi
Efficient Oblivious Substring Search via Architectural Support
Nicholas Mainardi
Politecnico di Milano – DEIB
Milano, Italy
PI:EMAIL
Alessandro Barenghi
Politecnico di Milano – DEIB
Milano, Italy
PI:EMAIL
Davide Sampietro
Politecnico di Milano – DEIB
Milano, Italy
PI:EMAIL
Gerardo Pelosi
Politecnico di Milano – DEIB
Milano, Italy
PI:EMAIL
ABSTRACT
Performing private and efficient searches over encrypted outsourced
data enables a flourishing growth of cloud based services managing
sensitive data as the genomic, medical and financial ones. We tackle
the problem of building an efficient indexing data structure, en-
abling the secure and private execution of substring search queries
over an outsourced document collection. Our solution combines
the efficiency of an index-based substring search algorithm with
the secure-execution features provided by the SGX technology
and the access pattern indistinguishability guarantees provided
by an Oblivious RAM. To prevent the information leakage from
the access pattern side-channel vulnerabilities affecting SGX based
applications, we redesign three ORAM algorithms, and perform a
comparative evaluation to find the best engineering trade-offs for
a privacy-preserving index-based substring search protocol. The
practicality of our solution is supported by a response time of about
1 second to retrieve all the positions of a protein in the 3 GB string
of the human genome.
CCS CONCEPTS
• Security and privacy → Privacy-preserving protocols; Man-
agement and querying of encrypted data; Security protocols.
KEYWORDS
Substring search, ORAM, Intel SGX, Privacy-preserving protocol
ACM Reference Format:
Nicholas Mainardi, Davide Sampietro, Alessandro Barenghi, and Gerardo
Pelosi. 2020. Efficient Oblivious Substring Search via Architectural Sup-
port. In Annual Computer Security Applications Conference (ACSAC 2020),
December 7–11, 2020, Austin, USA. ACM, New York, NY, USA, 16 pages.
https://doi.org/10.1145/3427228.3427296
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ACSAC 2020, December 7–11, 2020, Austin, USA
© 2020 Association for Computing Machinery.
ACM ISBN 978-1-4503-8858-0/20/12...$15.00
https://doi.org/10.1145/3427228.3427296
1 INTRODUCTION
The advent of cloud computing has pushed many players in the
information technology area to offload both data and computation
onto remote servers hosted by a cloud service provider. Indeed,
outsourcing data storage and computation to the cloud enables
significant cost savings and allows remote access to data and ap-
plications with high availability. The main challenge to be faced
to enable cloud based solutions without concerns is the loss of pri-
vacy of outsourced data. Indeed, in case these data are sensitive or
valuable, e.g., biomedical or financial ones, the risk of privacy loss
will likely prevent a tenant from offloading the computation onto
the service provider, with financial drawbacks for both parties.
Encrypting outsourced data is sufficient to qualify a computa-
tion offloaded onto an untrusted party as privacy-preserving only if
the selected cryptographic strategy (such as Fully Homomorphic
Encryption (FHE) [16]) allows computation over encrypted data;
nonetheless, such solutions generally incur in prohibitive perfor-
mance penalties. Therefore, technical alternatives, relying on secu-
rity guarantees provided by the computing hardware, have been
developed. In particular, the Software Guard Extensions (SGX) [13]
technology, introduced by Intel in CPUs since the Skylake microar-
chitecture, provides trusted execution environments, known as se-
cure enclaves, that guarantee confidentiality and integrity for both
the code and the data of an application running within them, even
against the OS or the hypervisor of the machine hosting the en-
clave. SGX relies on performing whole-memory encryption for all
the data of the program residing within the enclave, and perform-
ing on-the-fly decryption/encryption whenever data are moved
to/from the CPU. Access control on enclave memory is enforced at
hardware level. The entire process is transparent to the program
being run and has minimal performance overheads [13]. Whilst
SGX is solid from a cryptographic standpoint, it has been shown
that microarchitectural side channel attacks [5, 6, 34] are able to
retrieve the per-CPU cryptographic keys employed to secure the
computations inside the enclaves. While Intel is committed to miti-
gate microarchitectural side channel attacks in general, and indeed
has provided mitigations for the aforementioned attacks [19–21],
it has also stated that the SGX threat model [12] does not provide
protection against adversaries reconstructing the memory access
patterns of applications running inside an enclave. This informa-
tion is inferred by the adversary either from the sequence of page
faults [51] experienced by the application running within the en-
clave or by measuring the latency experienced by an application
ACSAC 2020, December 7–11, 2020, Austin, USA
N. Mainardi, D. Sampietro, A. Barenghi, G. Pelosi
controlled by the attacker which shares cache lines with the victim
application running within the enclave [4, 7]. Although several
countermeasures have been proposed to prevent or detect these
attacks against SGX technology [18, 33, 41, 43], none of them is
currently effective against all mentioned attacks.
An approach to make the information leaked to the adversary
in all such attacks useless is to ensure that the memory access
patterns of an application running within an enclave are indepen-
dent from the data being processed, a property of the application
referred to as obliviousness. This property has been achieved in
existing works [1, 29, 40] by employing a building block known as
Oblivious RAM (ORAM) [44], which allows a client with limited
storage capabilities to outsource data onto an untrusted server, guar-
anteeing that the server, which observes only physical accesses to
the ORAM data structure, cannot infer which elements are accessed
by the client. The ORAM client and server reside in two distinct
machines and communicate via a network channel. Nonetheless,
if SGX is available on the untrusted server, the ORAM client can
be moved inside an enclave to significantly reduce the communica-
tion latency between the ORAM client and the ORAM server. Since
leaking the access patterns of the ORAM client through SGX side
channels is sufficient to invalidate the privacy guarantees of ORAM,
it is necessary to make the ORAM client oblivious too. Coherently
with the terminology introduced in [29], we refer to an ORAM with
an oblivious client as a Doubly Oblivious RAM (DORAM).
In this work, we design a privacy-preserving computation based
on SGX for substring search based on an inverted index (referred
to as full-text index from now on). Given a document collection
D={D1, . . . , Dz} with z≥1 documents over an alphabet Σ, the data
owner builds a full-text index enabling the look-up of the repetitions
(or occurrences) of a substring q over Σ in D. In a Privacy-Preserving
Substring Search (PPSS) protocol, the data owner outsources both
the full-text index and the collection D to an untrusted server;
then, given a query for a substring q, chosen by the data owner,
the remote server computes, for each document Di, i∈{1, . . . , z},
in D, the set Si of positions of the occurrences of q in Di. Our
design of a PPSS protocol provides efficient queries while leaking
to the untrusted server no more information than the number z of
documents in D, the size n of the full-text index, the length m of
the substring q, and the overall number oq of occurrences of q in D.
Our solution, called Oblivious Substring Queries on Remote
Enclave (ObSQRE), runs a substring search algorithm within an
SGX enclave hosted on an untrusted server. The main challenges
tackled in our work reside in designing a substring search algorithm
with a data-independent control flow, which allows to hide memory
access patterns to its code pages, and efficiently combining such
algorithm with a DORAM to obliviously retrieve entries from the
full-text index. ObSQRE is composed of three procedures: Setup,
Load and Query. The first one, executed by the data owner once
as a pre-processing stage, computes the full-text index from D. The
index is encrypted with a semantically secure symmetric cipher
and outsourced with the encrypted documents to the untrusted
server. The integrity of the index is guaranteed by encrypting it
with an Authenticated Encryption with Authenticated Data (AEAD)
scheme, such as AES-Galois Counter Mode (AES-GCM), whose
encryption procedure computes also a keyed digest that is verified
upon decryption. Whenever the data owner is willing to perform
queries, it asks the untrusted server to instantiate the ObSQRE
SGX enclave, which contains the code of both the DORAM client
and the oblivious substring search algorithm; the remote attestation
procedure, provided by SGX technology, allows the data owner
both to verify that the enclave has been correctly instantiated by
the remote server and to establish a secure communication channel
with the enclave. When enclave is running, the Load procedure
instantiates the DORAM data structures (both inside and outside
the enclave). Then, the enclave receives via secure channel the
decryption key and the digest for the full-text index from the data
owner, decrypts the index and stores it in the DORAM. Once Load
is over, the data owner can submit queries to the enclave. In the
Query procedure, the data owner sends through the secure channel
the substring q to be searched. Then, the oblivious substring search
algorithm runs inside the enclave, employing the full-text index to
compute the positions of the occurrences of q over documents of
D, which are sent back to the data owner.
Contributions. We propose ObSQRE, the first PPSS protocol
employing SGX enclaves, designing two oblivious substring search
algorithms based on the backward search method [14]. Our pro-
posal closes the information leakage gap in Intel’s attacker model,
making the leakage coming from the memory access patterns of the
substring search algorithm running inside an enclave useless for
the adversary. Our protocol is secure against malicious adversaries
(i.e., they may induce arbitrary misbehaviors in the protocol), and
achieves optimal bandwidth O(m+oq), as the data owner sends the
substring q and receives the results in one communication round,
requiring at server side a polylogarithmic computational cost of
O((m+oq) log3(n)).
We also proposed our own doubly oblivious version of Path [44]
ORAM, which improves over state-of-the-art designs, and we present
the first doubly oblivious versions of Circuit [49]1 and Ring [36]
ORAMs.
We perform an exhaustive experimental campaign showing how
ObSQRE is an effective PPSS solution for practically relevant use-
cases employing genomic and financial datasets.
Related Work. The adoption of a DORAM to hide the access pat-
tern to data structures employed by a generic application running
inside an enclave was first proposed in ZeroTrace [40]. Nonetheless,
differently from ObSQRE, ZeroTrace does not protect the memory
access pattern to the code segment of the application. Obfuscuro [1]
extended the approach in [40] to hide the access pattern also to the
code pages of a generic application running within an enclave em-
ploying a DORAM. This approach, although applicable to a generic
application, introduces an higher overhead than ObSQRE. Indeed,
Obfuscuro [1] must perform two DORAM accesses every 3 to 5
executed assembly instructions, while ObSQRE performs 2m+oq
DORAM accesses in total for a single query.
The relevance of substring search queries for a variety of real-
world applications fostered several research efforts to privately
compute such queries. Some of these solutions [10, 26, 46] achieve
bandwidth and computational costs depending only on m and oq,
and require only a few communication rounds between the data