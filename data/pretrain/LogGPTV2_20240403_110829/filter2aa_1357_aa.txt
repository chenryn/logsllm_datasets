# Leave Your Malware @Home: MALPROXY

## Presenters
- **Amit Waisel**
  - Offensive Cyber Security Expert
  - Technology Lead, Security Research at XM Cyber
  - Trusted Security Advisor
  - Favorite bit: 1
  - Private Pilot, Skipper, and Cat Lover

- **Hila Cohen**
  - Security Researcher at XM Cyber
  - Twitter: [@hilaco10](https://twitter.com/hilaco10)
  - Passionate about Windows Internals and Malware Analysis
  - Loves to dance, travel the world, and capture moments with her camera

## Introduction to Endpoint Protections

### Overview
- Organizations heavily rely on endpoint protection solutions in their security stack.
- The cat-and-mouse game between security solutions and malware continues to evolve.

### Key Questions
- What do you know about your endpoint protection solutions?
- How do they detect malicious activity?

### Endpoint Protection 101
1. **Static Signatures**
   - Fixed patterns that identify known malware.
2. **Behavioral Signatures**
   - Patterns of behavior that indicate malicious activity.
3. **Heuristics**
   - Analyzing code for suspicious characteristics or behaviors.

#### Example: YARA Rule
```c
// testbin.c
int main() {
    char *user = "adm.user";
    printf("%s\n", user);
    return 0;
}
```

```yara
rule APT_adm_corp : apt // apt is just a tag, it doesn’t affect the rule.
{
    meta:
        author = "xgusix"
    strings:
        $adm = "adm."
        $corp = "corp."
        $elf = { 7f 45 4c 46 } // ELF file’s magic numbers
    condition:
        $elf in (0..4) and ($adm or $corp)
        // If $elf in the first 4 bytes and it matches $adm or $corp
}
```

```bash
# yara -s -m -g rules.yar testbin
APT_adm_corp [apt] [author="xgusix"] testbin
0x0:$elf: 7F 45 4C 46
0x4c0:$adm: adm.
```

### Bypassing Endpoint Protections

#### MALPROXY: A New Technique
- **MALPROXY** is a new technique to bypass endpoint protections.
- It involves proxying malicious operations over the network, never deploying the actual malicious code on the target side.

#### Execution Flow
1. **Target & Attacker Stubs**
   - Load the PE file and hook system API functions.
   - Execution flow: hook, serialize, send, execute, serialize, send, return. Repeat.

#### System Calls Overview
- **User Mode vs. Kernel Mode**
  - User Mode: Applications run in this mode.
  - Kernel Mode: OS core runs in this mode.
- **API Call Flow**
  - `CreateFile` in `Kernel32.dll`
  - `NtCreateFile` in `Ntdll.dll`
  - `SYSENTER/SYSCALL` to find relevant function in SSDT and execute it.

#### Hooking
- Redirect system API calls to our code.
- Control all arguments and return values.
- Imported system API function addresses are resolved during the PE load process and can be overridden later (IAT hooking).

#### Function Prototypes
- Dealing with different prototypes and proxying Win32 API calls.
- Handling input and output arguments, as well as return values.

#### Example: NtQueryInformationProcess
```c
NTSTATUS NtQueryInformationProcess(
    IN HANDLE ProcessHandle,
    ...
);
```

### Mitigations
- Regularly update and patch endpoint protection solutions.
- Implement multi-layered security strategies.
- Monitor and analyze network traffic for unusual patterns.

### TL;DR
- Endpoint protection solutions are crucial but can be bypassed.
- MALPROXY is a new technique that proxies malicious operations over the network.
- Understanding and mitigating such techniques is essential for robust security.

---

This optimized version provides a clear and structured presentation of the content, making it more professional and easier to follow.