Leave your malware @home 
MALPROXY
Amit Waisel       Hila Cohen
US
About
Amit Waisel
Offensive Cyber  
Security Expert
Technology lead, Security 
Research @ XM Cyber
Trusted Security Advisor
Favorite bit: 1
Private Pilot 
,  Skipper 
and cat lover  
Hila Cohen
Security Researcher 
@ XM Cyber
  @hilaco10 
Passionate about Windows 
Internals and Malware 
Analysis
Love to dance, travel the 
world 
 and capture 
moments with my camera  
Endpoint 
protections 
introduction
Malproxy - A new 
technique to bypass 
endpoint protections 
Demo
Mitigations
TL;DR
&
Organizations heavily 
rely on endpoint 
protection solutions in 
their security stack
Unfair  
cat-and-mouse  
game
Security solutions 
evolved over time, 
so are the viruses
What do you 
 know about your
endpoint
protection
solutions?
malicious activity 
detection mechanisms
Endpoint Protection 101
Static 
signatures
Behavioral 
signatures
1
3
Heuristics
2
Static 
signatures
1
Behavioral 
signatures
Heuristics
2
3
//testbin.c 
int main ()
{
        char *user = "adm.user";
        printf("%s\n",user);
        return 0;
}
Static 
signatures
1
Behavioral 
signatures
Heuristics
2
3
rule APT_adm_corp : apt //apt is just a tag, it doesn’t affect the rule.
{
        meta:  
//Metadata, they don’t affect the rule
                author = "xgusix"
        strings:
                $adm = "adm."
                $corp = "corp."
                $elf = { 7f 45 4c 46 } //ELF file’s magic numbers
        condition:
                $elf in (0..4) and ($adm or $corp)
                // If $elf in the first 4 bytes and it matches $adm or $corp
}
Static 
signatures
1
Behavioral 
signatures
Heuristics
2
3
# yara -s -m -g rules.yar testbin
APT_adm_corp [apt] [author="xgusix"] testbin
0x0:$elf: 7F 45 4C 46
0x4c0:$adm: adm.
Static 
signatures
1
Behavioral 
signatures
Heuristics
2
3
HackTool:Win32/OurCoolMimikatzSignature:
"A La Vie, A L'Amour" - (oe.eo)
Benjamin DELPY `gentilkiwi`
Vincent LE TOUX
## / \ ##
sekurlsa
logonpasswords
Static 
signatures
1
Heuristics
2
Behavioral 
signatures
3
UPX2
.data
.text
Property
0x00003400
0x00000400
0x00000400
Raw-address
0x200 bytes
0x3000 bytes
0x0 bytes
Raw-size
0x0040A000
0x00407000
0x00401000
Virtual-address
0x1000 bytes
0x3000 bytes
0x6000 bytes
Virtual-size
+
-
+
Executable
-
+
+
Writable
Static 
signatures
1
Heuristics
2
Behavioral 
signatures
3
Static 
signatures
1
Heuristics
2
Behavioral 
signatures
3
Endpoint
protection
solutions
bypass
Endpoint protection 
solutions bypass
MALPROXY
Target OS
P
r
o
c
e
s
s
MALPROXY
Malicious code interacts 
with the underlying OS 
using API function calls
Those actions can be 
detected and blocked by 
any security solution
Malicious 
code
API
MALPROXY
Proxy the malicious 
operations over the 
network
Never deploying the 
actual malicious code 
on the target side
Emulating needed  
API calls
Attacker OS
S
t
u
b
Malicious 
code
S
t
u
b
Innocent 
code
Target OS
API
MALPROXY
Target & attacker stubs
Load the PE file and 
hook system API 
functions
Execution flow – hook, 
serialize, send, execute, 
serialize, send, return. 
Repeat.
Attacker OS
S
t
u
b
Malicious 
code
Target OS
S
t
u
b
Innocent 
code
API
MALPROXY
Target & attacker stubs
Load the PE file and 
hook system API 
functions
Execution flow – hook, 
serialize, send, execute, 
serialize, send, return. 
Repeat.
Attacker OS
S
t
u
b
Malicious 
code
Target OS
S
t
u
b
Innocent 
code
C
r
e
a
t
e
F
i
l
e
(
”
b
l
a
h
.
t
x
t
”
)
API
MALPROXY
Target & attacker stubs
Load the PE file and 
hook system API 
functions
Execution flow – hook, 
serialize, send, execute, 
serialize, send, return. 
Repeat.
Attacker OS
S
t
u
b
Malicious 
code
Target OS
S
t
u
b
Innocent 
code
C
r
e
a
t
e
F
i
l
e
(
”
b
l
a
h
.
t
x
t
”
)
API
MALPROXY
Target & attacker stubs
Load the PE file and 
hook system API 
functions
Execution flow – hook, 
serialize, send, execute, 
serialize, send, return. 
Repeat.
Attacker OS
S
t
u
b
Malicious 
code
Target OS
S
t
u
b
Innocent 
code
H
A
N
D
L
E
b
l
a
h
.
t
x
t
API
MALPROXY
Target & attacker stubs
Load the PE file and 
hook system API 
functions
Execution flow – hook, 
serialize, send, execute, 
serialize, send, return. 
Repeat.
Attacker OS
S
t
u
b
Malicious 
code
Target OS
S
t
u
b
Innocent 
code
H
A
N
D
L
E
b
l
a
h
.
t
x
t
API
Key terms:
SYSTEM CALLS 
OVERVIEW
USER MODE
KERNEL MODE
Kernel32.dll
CreateFile
Call CreateFile
Call NtCreateFile
SYSENTER\SYSCALL
Find relevant function in 
SSDT and executes it
NtCreateFile
ZwCreateFile
Ntdll.dll
Ntoskrnl
Windows Application
Key terms:
SYSTEM CALLS 
OVERVIEW
USER MODE
KERNEL MODE
Kernel32.dll
CreateFile
Call CreateFile
Call NtCreateFile
SYSENTER\SYSCALL
Find relevant function in 
SSDT and executes it
NtCreateFile
ZwCreateFile
Ntdll.dll
Ntoskrnl
Windows Application
Key terms:
SYSTEM CALLS 
OVERVIEW
USER MODE
KERNEL MODE
Kernel32.dll
CreateFile
Call CreateFile
Call NtCreateFile
SYSENTER\SYSCALL
Find relevant function in 
SSDT and executes it
NtCreateFile
ZwCreateFile
Ntdll.dll
Ntoskrnl
Windows Application
Key terms:
SYSTEM CALLS 
OVERVIEW
USER MODE
KERNEL MODE
Kernel32.dll
CreateFile
Call CreateFile
Call NtCreateFile
SYSENTER\SYSCALL
Find relevant function in 
SSDT and executes it
NtCreateFile
ZwCreateFile
Ntdll.dll
Ntoskrnl
Windows Application
Key terms:
SYSTEM CALLS 
OVERVIEW
USER MODE
KERNEL MODE
Kernel32.dll
CreateFile
Call CreateFile
Call NtCreateFile
SYSENTER\SYSCALL
Find relevant function in 
SSDT and executes it
NtCreateFile
ZwCreateFile
Ntdll.dll
Ntoskrnl
Windows Application
P
r
o
c
e
s
s
Innocent 
code
COMPUTER OS
API
Key terms:
SYSTEM CALLS 
OVERVIEW
USER MODE
KERNEL MODE
Kernel32.dll
CreateFile
Call CreateFile
Call NtCreateFile
SYSENTER\SYSCALL
Find relevant function in 
SSDT and executes it
NtCreateFile
ZwCreateFile
Ntdll.dll
Ntoskrnl
P
r
o
c
e
s
s
Innocent 
code
COMPUTER OS
Windows Application
API
Key terms:
HOOKING
Redirect 
system API 
calls to  
our code
Control all 
arguments & 
return value
Imported system API 
function addresses are 
resolved during PE load 
process and can be 
overridden later – IAT hooking
This allows us to separate 
the code’s logic from its 
interaction with the OS
IMPORT ADDRESS TABLE
NtQuerySystemInformation Malproxy
OpenProcess
Malproxy
ReadProcessMemory
Malproxy
BCryptGenerateSymetricKey Bcrypt.dll
ConvertSidToStringSidW
Advapi32.dll
…
…
RtlAdjustPrivilege
Malproxy
NtQueryInformationProcess Malproxy
RtlEqualUnicodeString
Ntdll.dll
Key terms:
BOOL  stdcall ReadProcessMemory(HANDLE hProcrss, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead);
Return Type
Calling Convention
Function arguments
FUNCTION
PROTOTYPE
Dealing with all aspects 
of different prototypes
Proxying
Win32 API
Calling 
convention – 
same for all 
Win32API and 
Native API calls
Input 
Arguments:
 Primitives
  Pointers to 
primitives
  User-allocated 
buffers
Output 
Arguments:
  User-allocated 
output buffer
  System-
allocated 
output buffer
Return 
values
Handling
ARGUMENTS
NTSTATUS NtQueryInformationProcess(
IN HANDLE
ProcessHandle,