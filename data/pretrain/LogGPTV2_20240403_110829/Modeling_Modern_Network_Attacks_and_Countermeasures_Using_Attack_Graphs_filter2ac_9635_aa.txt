title:Modeling Modern Network Attacks and Countermeasures Using Attack Graphs
author:Kyle Ingols and
Matthew Chu and
Richard Lippmann and
Seth E. Webster and
Stephen W. Boyer
2009 Annual Computer Security Applications Conference
Modeling Modern Network Attacks and Countermeasures Using Attack Graphs
Kyle Ingols, Matthew Chu, Richard Lippmann, Seth Webster, Stephen Boyer
MIT Lincoln Laboratory
244 Wood Street
Lexington, Massachusetts 02420-9108
Email: PI:EMAIL
Abstract—By accurately measuring risk for enterprise net-
works, attack graphs allow network defenders to understand
the most critical threats and select the most effective coun-
termeasures. This paper describes substantial enhancements
to the NetSPA attack graph system required to model ad-
ditional present-day threats (zero-day exploits and client-side
attacks) and countermeasures (intrusion prevention systems,
proxy ﬁrewalls, personal ﬁrewalls, and host-based vulnerability
scans). Point-to-point reachability algorithms and structures
were extensively redesigned to support “reverse” reachability
computations and personal ﬁrewalls. Host-based vulnerability
scans are imported and analyzed. Analysis of an operational
network with 85 hosts demonstrates that client-side attacks
pose a serious threat. Experiments on larger simulated net-
works demonstrated that NetSPA’s previous excellent scaling is
maintained. Less than two minutes are required to completely
analyze a four-enclave simulated network with more than
40,000 hosts protected by personal ﬁrewalls.
I. INTRODUCTION
Enterprise networks are constantly under attack from a
continuous stream of threats. Some are widespread, such as
the “conﬁcker” worm [1]; others are highly targeted, such as
the recently analyzed “GhostNet” activities [2]. Currently,
no accurate automated approach exists to predict the risk
these and other threats pose to speciﬁc networks. This is one
of the primary goals of our research. Accurate automated
risk assessments would make it possible to compare the risk
of multiple threats, select effective countermeasures, predict
the threat posed by hypothesized attacks, and determine
the effectiveness of planned and past security expenditures.
This requires accurate models of adversaries, of networks,
of vulnerabilities, and of a network’s mission or purpose.
Over the past few years we have developed a tool named
“NetSPA” that uses attack graphs to model adversaries and
the effect of simple countermeasures [3]–[5]. It creates a
network model using ﬁrewall rules and network vulnerability
scans. It then uses the model to compute network reacha-
bility and attack graphs representing potential attack paths
for adversaries exploiting known vulnerabilities in server
software (“server-side” vulnerabilities). This discovers all
hosts that can be compromised by an attacker starting
from one or more initial locations. Asset values assigned
to each host measure the utility of hosts to a network’s
purpose or mission. Degradation in mission capability is
then represented by the percentage of the total asset value
threatened by the attacker.
NetSPA scales roughly as O(n log n) as the number of
hosts in a typical network increases. It has been used to
analyze actual networks with more than 3,000 hosts and sim-
ulated networks with nearly 50,000 hosts. Risk is assessed
for different adversaries and countermeasures by measuring
the total assets that can be captured by an adversary and
also by measuring the attacker effort as suggested in [6].
We currently compute simple measures of attacker effort,
such as the number of hops or stepping-stone hosts, the
effort required to exploit given vulnerabilities as deﬁned by
CVSS [7], and the number of unique exploits required to
compromise all exploitable hosts in the network.
Past research on using automated attack graphs to model
adversaries (e.g., [5], [8]) – including our own – has used
threat and countermeasure models that are now out of date.
The most common threat model used in the past is of an
attacker compromising hosts via server-side vulnerabilities,
and the primary countermeasure explored is patching these
vulnerabilities. This paper describes how we extended the
NetSPA tool to model additional modern threats and coun-
termeasures.
In the remainder of this paper we ﬁrst describe the
most important new attacks and defenses and our modeling
approach. We then present the extensive changes in reacha-
bility computation required by these models, followed by
evaluations on a small real network and large simulated
networks. The paper ends with a discussion of related work,
limitations, and future work.
II. MODELING CLIENT-SIDE ATTACKS
This work is sponsored by the United States Air Force under Air Force
Contract FA8721-05-C-0002. Opinions,
interpretations, conclusions and
recommendations are those of the authors and are not necessarily endorsed
by the United States Government.
Some of the most important modern threats are vulnera-
bilities in web browsers, e-mail clients, document viewers,
and multimedia applications running on victim machines,
1063-9527/09 $26.00 © 2009 IEEE
DOI 10.1109/ACSAC.2009.21
117
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:13 UTC from IEEE Xplore.  Restrictions apply. 
or “client-side” vulnerabilities (e.g., [9], [10]). There are
many potential vectors for exploiting such vulnerabilities.
We model client-side attacks in which an attacker adds
malicious content to a server that a victim then downloads
unknowingly. Additional vectors such as malicious email
and encrypted tunnels are considered as future work.
Client-side vulnerabilities must be found to be mod-
eled. Prior attack graph systems (e.g., [8], [11]) identiﬁed
only server-side vulnerabilities using network-based scan-
ners such as Nessus [12]. These scanners are unsuitable for
detecting most client-side vulnerabilities, even when login
credentials are provided, because they do not examine many
details of installed client software. Recent advances in the
Security Content Automation Protocol (SCAP) program [13]
make it possible to obtain details necessary to model client-
side vulnerabilities in a consistent manner across different
operating systems. In section VI-B we describe how we use
an Open Vulnerability Assessment Language (OVAL)-based
scanner, running on each host, to detect and collect client-
side vulnerabilities.
Client-side attacks require a host-to-host reachability com-
putation that can be considered backwards from that required
for server-side attacks. For a server-side attack, we must de-
termine if an attacker can reach the victim host’s vulnerable
server. For a client-side attack, we must instead determine if
the malicious server can be reached by a vulnerable client.
Section V-D describes NetSPA’s reverse-reachability system.
III. MODELING ZERO-DAY ATTACKS
Another important modern threat
is an attacker with
knowledge of an unpublished, or “zero-day,” vulnerability
[10]. Although it is impossible to predict the existence of any
speciﬁc zero-day vulnerability, it is possible to hypothesize
a zero-day vulnerability in speciﬁc software applications
to ensure that the impact of an eventual zero-day can be
understood and minimized.
We evaluate zero-day risk by hypothesizing a zero-day
vulnerability in each application on a network, one at a
time, and building an attack graph for each new vulnerability
to assess attacker effort. We then order applications by the
beneﬁt provided to an attacker, were a zero-day available.
This allows defenders to focus on those application instances
that provide the most attacker beneﬁt. They can uninstall,
move, limit ingress or egress, or monitor these installations
more closely with an anomaly-based intrusion detection
system (IDS).
Proper modeling of zero-day vulnerabilities requires an
inventory of server and client software on each computer.
Ideally such an inventory would use the new SCAP-based
Common Process Enumeration (CPE) standard [13], [14],
as it provides a consistent name for all applications. CPE
entries typically provide an OVAL plugin designed to detect
the software; thus a host-based OVAL scanner could gather
application information.
Until CPE matures, we model only server-side zero-day
vulnerabilities by assuming that each protocol and port
represents a different application. For example, NetSPA
posits the existence of a piece of software called “25/tcp,”
running on every device with TCP port 25 open. Although
not ideal, our current approach is automatable and provides
useful results on large networks without requiring additional
host-based scanning.
IV. MODELING MODERN COUNTERMEASURES
Many countermeasures can be deployed to defend en-
terprise networks [15]. In this section we describe how
some of the most common countermeasures have been
included in NetSPA. These include personal ﬁrewalls that
ﬁlter trafﬁc at the host level, intrusion prevention systems
(IPSs) that block disallowed types of web content such as
ActiveX controls, and proxy ﬁrewalls that provide a common
protected outgoing client connection to the Internet for many
hosts in a network.
Personal ﬁrewalls, also called endpoint or host-based ﬁre-
walls, are installed on individual hosts to control incoming
and outgoing trafﬁc. In an enterprise, these ﬁrewalls are
often centrally managed and use identical rulesets. NetSPA’s
previous reachability system [4] was designed only for
inline ﬁrewalls typically used at network borders. The prior
system’s performance rapidly deteriorated with many per-
sonal ﬁrewalls because each personal ﬁrewall was modeled
separately as an inline ﬁrewall. Section V-F describes our
new system, which restores performance by grouping per-
sonal ﬁrewalls with identical rulesets together. This required
developing new software to import rules used by personal
ﬁrewalls, redesigning our reachability model, and rewriting
substantial parts of NetSPA’s reachability computation sys-
tem.
Intrusion prevention systems (IPSs) are used to protect
vulnerable hosts by blocking incoming malicious content.
Two aspects of IPSs need to be modeled: their effect on vul-
nerabilities, and their impact on reachability. Because small
changes in malicious code can often elude IPS signatures,
many IPSs block entire classes of potential attack vectors
– ActiveX controls or Java applets, for example. Modeling
this behavior requires a mapping between the blocked attack
vector and the vulnerabilities that depend on that vector for
exploitation. This mapping is currently created by automated
keyword searches on NVD vulnerability descriptions fol-
lowed by manual conﬁrmation. Creating a mapping in this
manner is far from ideal; future SCAP standards such as
CPE may provide more automatable means of making this
connection.
IPS systems can be deployed as inline proxies, much
like inline ﬁrewalls. They can also be deployed as “non-
transparent” proxies, to which client machines must explic-
itly connect. The proxy then connects to the desired server.
Using a mapping of attack vector to vulnerabilities, NetSPA
118
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 13:13:13 UTC from IEEE Xplore.  Restrictions apply. 
can model the effect of both types of IPS systems via simple
adjustments to its reachability model. These changes are
detailed in Section V-E.
V. REACHABILITY
Attack graph generation tools require, at a minimum,
answers to two core questions: where are the vulnerabilities,
and what are the restrictions on attackers’ ability to exploit
them? Vulnerability scanners answer the ﬁrst question. The
answer to the second must be inferred from the network’s
underlying topology and the ﬁrewalls and routers that dictate
trafﬁc ﬂow. We are thus required to model the network’s
topology and ﬁltering devices in an efﬁcient manner.
NetSPA’s network model supposes that an individual
host possesses one or more interfaces, each of which may
have an IP address. These interfaces have zero or more
open ports, accepting connections from other hosts. A port
has a port number and protocol. Each host and port may
have zero or more vulnerability instances, particular ﬂaws
or conﬁguration choices which may be exploitable by an
attacker.
A straightforward means of representing a network’s
reachability is an I − K matrix, where I represents the
number of interfaces and K represents the number of server
ports. A given cell in the matrix indicates whether trafﬁc
from the source interface to the target port is permitted.
Although straightforward, it is often large and redundant.
The remainder of this section explores the methods used
to make reachability computation tractable in large networks.
Our previous work [3], [4] handled ﬁltering and NAT
rules as discussed in Sections V-A and V-B, though the
ordering of rules was far less ﬂexible than the system now
described. Section V-C discusses new rule-based branching,
used to handle devices with multiple potential egress paths
for trafﬁc. Section V-D and V-E cover additions made to
accommodate client-side attacks, non-transparent proxies,
and IPS systems. Finally, Section V-F covers NetSPA’s
aggressive grouping strategies, designed to identify and
leverage redundancy in the I − K matrix.
A. Firewall Model
NetSPA models
reachability using tuples of
the
form
[source IP -> target IP:portnum/
protocol]. Much like the FIREMAN [16] system, these
sets are represented as binary decision diagrams (BDDs).
A BDD is an efﬁcient way to represent a Boolean equation
like x∧(z∨ y), such that evaluating the equation on a set of
variable assignments can be evaluated in time proportional
to the number of Boolean variables, rather than to the
length of the Boolean expression. The variables are the bits
of the reachability tuple – for example, the source IP in an
IPv4 network can be represented as 32 bits, or 32 Boolean
variables. Because the number of variables is ﬁxed, we
can traverse the BDD in constant time. Like FIREMAN,
NetSPA implements BDDs via the BuDDy library [17].
NetSPA models ﬁrewalls via rules, rulegroups, and chains.
A rule matches a subset of reachability and acts upon it;
these actions include allowing and denying the trafﬁc. The
speciﬁc dispositions are discussed later. Every rule belongs
to a rulegroup. A rulegroup consumes a set of reachability
as input and produces three output sets . The
A, D, R notation, adapted from FIREMAN, refers to the set
of allowed trafﬁc (A), denied trafﬁc (D), and trafﬁc that
was not acted on by an allow or deny rule (R). A chain
points to a rulegroup and dictates the next step for trafﬁc in
each of the rulegroup’s three output sets.
Each interface in the network is assigned an inbound and
an outbound chain to adjudicate trafﬁc passing through it.
Inbound chains are used to explicitly designate how trafﬁc
moves through a host. Trafﬁc that
is given the default
disposition, but refers to the inbound interface’s listening
address, is assumed to go to the host, i.e., to a port on the
ﬁrewall itself. Outbound chains apply only to trafﬁc from
the host itself, not to trafﬁc passing through the host but
originating elsewhere.
To traverse a rulegroup, we take the input source set S
of reachability and traverse the rules, in order, one at a time.
For rule number i, we consider , where A is
the trafﬁc that has already been accepted, D is the trafﬁc
that has already been denied, and Ri is the trafﬁc that was
not accepted or denied by a rule prior to rule i. For a set
of n rules, we begin with =; the
ﬁnal result is . We write Rn+1 as simply
R.
Filtering rules are the easiest
to model, as they sim-
ply accept or deny trafﬁc. For example,
the rule [ *
-> 10.0.0.1:25/tcp ]: ALLOW permits any avail-
able trafﬁc targeting port number 25, protocol tcp, address
10.0.0.1 to pass (i.e., go to the A output). To evalu-
ate an allow rule i, we use the FIREMAN method of
assigning it a match set Pi, a BDD representing what
the rule itself matches. For this example, Pi is [ * ->
10.0.0.1:25/tcp ]. Of the reachability not yet acted
upon (Ri), we must take what the rule matches and move
it to A:
Ri+1 = Ri − Pi
A = A ∪ (Ri ∩ Pi)
A deny rule is handled similarly.
A rulegroup with only ﬁltering rules need only be eval-
uated once; the result can be reused for multiple potential
source sets. It is sufﬁcient to start with , compute