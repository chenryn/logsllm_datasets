pg93@db-172-16-3-150-> vi test.sql  
\setrandom id 1 50000000  
select f_test(:id);  
[root@db-172-16-3-150 ~]# stap -e '  
global var  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__execute__done") {  
  var++  
}  
probe timer.s($1) {  
  printf("qps:%d\n", var/$1)  
  var=0  
}' 3  
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 30  
qps:31842  
qps:35328  
qps:35392  
qps:35504  
qps:35425  
qps:35520  
qps:35503  
qps:35467  
qps:35436  
qps:3034  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 4  
duration: 30 s  
number of transactions actually processed: 1037188  
tps = 34572.359432 (including connections establishing)  
tps = 34586.329195 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.003126        \setrandom id 1 50000000  
        0.457397        select f_test(:id);  
PostgreSQL中与动态跟踪相关的文件 :   
postgresql-9.3.1/src/backend/utils/probes.d  
postgresql-9.3.1/src/backend/utils/probes.h  
/usr/include/sys/sdt.h  
```  
http://www.postgresql.org/docs/9.3/static/dynamic-trace.html  
https://sourceware.org/systemtap/tapsets/  
PostgreSQL动态跟踪的详细使用参考 :   
Systemtap EXP: PostgreSQL IN-BUILD mark Class 1 - transaction  
http://blog.163.com/digoal@126/blog/static/163877040201391684012713/  
Systemtap EXP: PostgreSQL IN-BUILD mark Class 2 - query  
http://blog.163.com/digoal@126/blog/static/1638770402013916101117367/  
Systemtap EXP: PostgreSQL IN-BUILD mark Class 3 - checkpoint  
http://blog.163.com/digoal@126/blog/static/163877040201391622459221/  
Systemtap EXP: PostgreSQL IN-BUILD mark Class 4 - buffer  
http://blog.163.com/digoal@126/blog/static/1638770402013916488761/  
Systemtap EXP: PostgreSQL IN-BUILD mark Class 5 - read|write relation  
http://blog.163.com/digoal@126/blog/static/163877040201391653616103/  
Systemtap EXP: PostgreSQL IN-BUILD mark Class 6 - lock  
http://blog.163.com/digoal@126/blog/static/163877040201391674922879/  
Systemtap EXP: PostgreSQL IN-BUILD mark Class 7 - others(statement,xlog,sort)  
http://blog.163.com/digoal@126/blog/static/1638770402013916221518/  
下面截取一个probe定义进行讲解 :   
```  
src/backend/utils/probes.h  
#include   
/* TRACE_POSTGRESQL_TRANSACTION_START ( unsigned int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_TRANSACTION_START_ENABLED() __builtin_expect (transaction__start_semaphore, 0)  
#define postgresql_transaction__start_semaphore transaction__start_semaphore  
#else  
#define TRACE_POSTGRESQL_TRANSACTION_START_ENABLED() __builtin_expect (postgresql_transaction__start_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_transaction__start_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_TRANSACTION_START(arg1) \  
DTRACE_PROBE1(postgresql,transaction__start,arg1)  
probe定义 :   
#define TRACE_POSTGRESQL_TRANSACTION_START(arg1) \  
DTRACE_PROBE1(postgresql,transaction__start,arg1)  
对应  
/usr/include/sys/sdt.h  
/* DTrace compatible macro names.  */  
#define DTRACE_PROBE1(provider,probe,parm1)     \  
  STAP_PROBE1(provider,probe,parm1)  
所以这个定义的probe = transaction__start  
参数为arg1.  
参数含义在代码中可以找到, 如下 :   
TRACE_POSTGRESQL_TRANSACTION_START 宏在代码中使用的位置  
src/backend/access/transam/xact.c  
/* ----------------------------------------------------------------  
 *                                              interface routines  
 * ----------------------------------------------------------------  
 */  
/*  
 *      StartTransaction  
 */  
static void  
StartTransaction(void)  
{  
        TransactionState s;  
        VirtualTransactionId vxid;  
...  
略  
        /*  
         * Advertise it in the proc array.      We assume assignment of  
         * LocalTransactionID is atomic, and the backendId should be set already.  
         */  
        Assert(MyProc->backendId == vxid.backendId);  
        MyProc->lxid = vxid.localTransactionId;  
        TRACE_POSTGRESQL_TRANSACTION_START(vxid.localTransactionId);  
...  
略  
```  
自定义PostgreSQL探针参考 :   
http://blog.163.com/digoal@126/blog/static/163877040201391123645546/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")