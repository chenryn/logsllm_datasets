title:Achieving Consistent SDN Control With Declarative Applications
author:Wen Wang and
Cong Liu and
Jinshu Su and
Wenbo He
(cid:65)(cid:99)(cid:104)(cid:105)(cid:101)(cid:118)(cid:105)(cid:110)(cid:103) (cid:67)(cid:111)(cid:110)(cid:115)(cid:105)(cid:115)(cid:116)(cid:101)(cid:110)(cid:116) (cid:83)(cid:68)(cid:78) (cid:67)(cid:111)(cid:110)(cid:116)(cid:114)(cid:111)(cid:108)
(cid:87)(cid:105)(cid:116)(cid:104) (cid:68)(cid:101)(cid:99)(cid:108)(cid:97)(cid:114)(cid:97)(cid:116)(cid:105)(cid:118)(cid:101) (cid:65)(cid:112)(cid:112)(cid:108)(cid:105)(cid:99)(cid:97)(cid:116)(cid:105)(cid:111)(cid:110)(cid:115)
(cid:87)(cid:101)(cid:110) (cid:87)(cid:97)(cid:110)(cid:103)∗(cid:44) (cid:67)(cid:111)(cid:110)(cid:103) (cid:76)(cid:105)(cid:117)†(cid:44) (cid:74)(cid:105)(cid:110)(cid:115)(cid:104)(cid:117) (cid:83)(cid:117)‡(cid:44) (cid:87)(cid:101)(cid:110)(cid:98)(cid:111) (cid:72)(cid:101)∗
∗McGill University, †Logistic Information Center, PLA, ‡National University of Defense Technology
PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
(cid:65)(cid:66)(cid:83)(cid:84)(cid:82)(cid:65)(cid:67)(cid:84)
Software-deﬁned networking enables applications act as
blackboxes independently to control the network ﬂexi-
bly. However, these independent applications may gen-
erate conﬂicting control decisions. To reconcile appli-
cations automatically and dynamically, we implement
control applications with Prolog, which enables appli-
cations to execute jointly to make consistent control de-
cisions. When conﬂicts occur, we design a compromise
algorithm by sacriﬁcing a subset of applications to max-
imize the desired control objectives.
(cid:49)(cid:46)
(cid:73)(cid:78)(cid:84)(cid:82)(cid:79)(cid:68)(cid:85)(cid:67)(cid:84)(cid:73)(cid:79)(cid:78)
The ﬂexibility of software-deﬁned networking enables
innovative applications to control the network. These
third-party applications act as blackboxes independently
to produce rules to be installed in data plane. The in-
dependence of applications may generate contradictory
decisions. For example, in Figure 1, three applications
determines diﬀerent actions for a ﬂow from h1 to h2.
AP P1 instructs the ﬂow to go through path A → B →
D, while AP P2 decides another path A → C → D
and requires at least 10Mbps bandwidth for the ﬂow,
which conﬂicts with that AP P3 restricts it to 5Mbps.
Conﬂicts must be resolved before applied in data plane,
otherwise, they may result in performance degradation
or even unexpected network behaviours. It is diﬃcult to
coordinate applications during the decision-making pro-
cess, except explicitly declared communications among
applications which makes the implementation of net-
work control complicated and error-prone. Existing ap-
proaches coordinate applications by composing appli-
cations to derive consistent solutions jointly [2, 4, 5].
However, application composition is usually not auto-
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM’16, August 22–26, 2016, Florianopolis, Brazil.
c(cid:13) 2016 ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2959060
matic and involves a lot of implementation details. [1,
3] coordinate proposed policies of each application to
determine a consistent solution, which would lead to
suboptimal solutions due to the independent execution
of applications.
Declarative languages provide a high-level way to ex-
press network-wide policies. In this paper, to reconcile
applications automatically and dynamically, we imple-
ment network control applications with Prolog. The
implementation with Prolog enables applications to be
composed easily to execute together with application
names and consistent parameters. Applications query
the knowledge base in Prolog for solutions satisfying
their requirements, which makes applications to coor-
dinate with each other to decide a consistent solution.
Among the feasible control solutions, we use the voting
mechanism to decide a solution with the highest util-
ity. Otherwise, when conﬂicts occur, we design the ap-
plication compromise algorithm to sacriﬁce a subset of
applications to maximize the global control objectives.
(cid:67)(cid:111)(cid:110)(cid:116)(cid:114)(cid:111)(cid:108)(cid:32)(cid:80)(cid:108)(cid:97)(cid:110)(cid:101)
(cid:68)(cid:97)(cid:116)(cid:97)(cid:32)(cid:80)(cid:108)(cid:97)(cid:110)(cid:101)
(cid:102)(cid:108)(cid:111)(cid:119)(cid:58)(cid:32)(cid:104)(cid:49)(cid:32)(cid:45)(cid:62)(cid:32)(cid:104)(cid:50)
(cid:104)(cid:49)
(cid:65)
(cid:62)(cid:49)(cid:48)(cid:77)(cid:98)(cid:112)(cid:115)
(cid:60)(cid:32)(cid:53)(cid:77)(cid:98)(cid:112)(cid:115)
(cid:65)(cid:80)(cid:80)(cid:49)
(cid:65)(cid:80)(cid:80)(cid:50)
(cid:65)(cid:80)(cid:80)(cid:51)
(cid:66)
(cid:67)
(cid:68)
(cid:104)(cid:50)
Figure 1: Control Conﬂicts
Figure 2: Architecture
(cid:50)(cid:46) (cid:65)(cid:80)(cid:80)(cid:76)(cid:73)(cid:67)(cid:65)(cid:84)(cid:73)(cid:79)(cid:78)(cid:83) (cid:67)(cid:79)(cid:79)(cid:82)(cid:68)(cid:73)(cid:78)(cid:65)(cid:84)(cid:73)(cid:79)(cid:78)
We use Prolog to implement applications, which does
not need to deﬁne searching details to ﬁnd solutions,
but only expresses desired logical intents. For example,
a shortest path routing application shortest(F, P ) for
ﬂow F is deﬁned with functions path and minimal, in
which path searches all available paths and minimal
ﬁnds the shortest P from the available paths T .
shortest(F, P ) : −setof ([R, L], path(F.S, F.D, R, L), T ),
T = [ | ], minimal(T, [P, M inL]).
Meanwhile, a minimum bandwidth guarantee applica-
tion mbg(F, P, B) could be constructed with functions
585
path and minbwcheck which checks whether a path P
satisﬁes the minimum bandwidth demand B.
mbg(F, P, B) : −path(F.S, F.D, P, L), minbwcheck(P, B).
When a set of applications Apps = {A1, A2, ..., An}
would like to process ﬂow F simultaneously, a consistent
forwarding plan should meet all the objectives of these
applications. The composition of applications could be
achieved through the conjunction with consistent in-
puts, conj(V1, ...Vm) : −A1, A2, ..., An, in which Vi(i =
1, ..., m) are variables of applications. The conjunc-
tion of shortest and mbg is conj(P ) : −shortest(f, P ),
mbg(f, P, b), and conj(P ) generates a shortest path P
for ﬂow f satisfying minimum bandwidth guarantee b.
The conjunction composes applications to be a multiple-
objective application to produce solutions with once ex-
ecution.
If there is no conﬂict among these applica-
tions, we can get feasible composed solutions satisfying
all the objectives. Otherwise, the application conjunc-
tion could not generate any solution when conﬂicts ex-
ist, e.g., contradictory forwarding actions in Figure 1.
We design solution selection and conﬂict coordination
approaches for these two cases respectively.
Solution Selection: There may be multiple avail-
able solutions satisfying the application composition.
These solutions could lead to diverse consequent perfor-
mance when applied to the network. To achieve better
network performance, we would like to select one with
the best eﬃciency. However, applications may prefer
diﬀerent solutions for their own objectives. To reﬂect
the preference, each application deﬁnes its criteria to
evaluate solutions. For example, a routing application
usually prefers shorter paths, and a bandwidth guaran-
tee application tends to highlight paths with more avail-
able bandwidth. We use the cumulative voting scheme
for proposal selection in [1], and choose the best solution
with the highest vote value of applications.
Conﬂict Coordination: When applications Apps
can not generate a satisﬁable plan because of conﬂicts,
we would like to ﬁnd a compromised solution with a
maximum subset Apps′ ⊆ Apps satisfying the most
number of applications’ objectives. We construct a graph
G = with applications in Apps, in which the
node set V corresponds to applications.
If the con-
junction of Ai and Aj ∈ Apps could generate feasible
solutions, we add an undirected edge (Ai, Aj ) in the
graph. Obviously, the subset Apps′ with available so-
lutions must be in a complete graph, as each pair of
applications could always generate at least one feasible
solution. However, a complete graph does not abso-
lutely mean feasible composed solutions. Therefore, we
check each complete graph in descending order of com-
plete graph size until ﬁnd a consistent solution.
With declarative applications, the network informa-
tion, e.g., network topology, switch information, avail-
able bandwidth, is stored in a knowledge base together
with the deﬁned logics of applications. As shown in Fig-
ure 2, any decision made by applications should follow
586
logics and information in the knowledge base, which en-
sures the consistency and correctness of generated rules
before applied in data plane.
(cid:51)(cid:46) (cid:69)(cid:86)(cid:65)(cid:76)(cid:85)(cid:65)(cid:84)(cid:73)(cid:79)(cid:78)
We implement 7 types of declarative applications:
shortest path routing, load balance, waypoint, ﬁrewall,
nat, energy saving, minimum bandwidth guarantee, rate
limit. To show the beneﬁts of declarative applications
(DA), we compare DA with SP (static priority), Athens-
k [1] (each application generates k proposals). Static
priority schemes always apply the proposal with the
highest priority, which would miss a lot of objectives.
DA tries to maximize the control objectives of applica-
tions, while Athens uses heuristic algorithms to deter-
mine the best solution with vote values of applications.
We evaluate these strategies in a fat-tree network with
100 switches. During the control coordination, a set of
applications may be compromised due to conﬂicts. In
Figure 3a and 3b, there is less compromise probability
and less number of compromised applications with DA
than SP and Athens.
y
t
i
l
i
b
a
b
o
r
P
e
s
m
o
r
p
m
o
C
i
0.8
0.6
0.4
0.2
0
i
s
p
p
A
d
e
s
m
o
r
p
m
o
C
(cid:83)(cid:80)
Athens−1Athens−2Athens−4
DA
f
o
r
e
b
m
u
N
1.5
1
0.5
0
(cid:83)(cid:80)
Athens−1Athens−2Athens−4
DA
(a) Comprom Prob
(b) Apps Comprom Number
Figure 3: Comparison With Other Strategies
(cid:52)(cid:46) (cid:67)(cid:79)(cid:78)(cid:67)(cid:76)(cid:85)(cid:83)(cid:73)(cid:79)(cid:78)
With the increasing number and types of SDN ap-
plications deployed by various control domains, we fo-
cus on making consistent network control decisions with
declarative applications. We implement and compose
SDN applications with Prolog, and resolve potential
conﬂicts to maximize the desired objectives during the
decision-making process. To achieve better consequent
performance, we further select a solution with the most
preferences using voting mechanism.
(cid:53)(cid:46) (cid:82)(cid:69)(cid:70)(cid:69)(cid:82)(cid:69)(cid:78)(cid:67)(cid:69)(cid:83)
[1] A. AuYoung et al. Democratic resolution of resource
conﬂicts between sdn control programs. In CoNEXT,
2014.
[2] N. Foster et al. Frenetic: A network programming
language. In SIGPLAN, 2011.
[3] X. Jin et al. Covisor: A compositional hypervisor for
software-deﬁned networks. In NSDI, 2015.
[4] C. Prakash et al. Pga: Using graphs to express and
automatically reconcile network policies. In
SIGCOMM, 2015.
[5] D. M. Volpano et al. Towards systematic detection and
resolution of network control conﬂicts. In HotSDN,
2014.