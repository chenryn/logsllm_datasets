    这个命令会以以下形式输出一行
    ``` screen
    PID command-line
    ```
    使用 [*命令行*]{.emphasis} 值来验证 [*PID*]{.emphasis}
    属于预期进程。
    例如：
    ``` screen
    $ pgrep -a bc
    5459 bc
    ```
2.  向进程发送中止信号：
    ``` screen
    # kill -ABRT PID
    ```
3.  验证 `coredumpctl`{.literal} 是否捕获了内核：
    ``` screen
    $ coredumpctl list PID
    ```
    例如：
    ``` screen
    $ coredumpctl list 5459
    TIME                            PID   UID   GID SIG COREFILE  EXE
    Thu 2019-11-07 15:14:46 CET    5459  1000  1000   6 present   /usr/bin/bc
    ```
4.  可以根据需要进一步检查或使用核心文件。
    您可以根据 PID 和其他值指定内核转储。详情请查看
    [*coredumpctl(1)*]{.emphasis} 手册页。
    ::: informalexample
    ::: itemizedlist
    -   显示核心文件的详情：
        ``` screen
        $ coredumpctl info PID
        ```
    -   要在 GDB 调试器中载入核心文件：
        ``` screen
        $ coredumpctl debug PID
        ```
        根据调试信息的可用性，GDB 将会建议运行命令，例如：
        ``` screen
        Missing separate debuginfos, use: dnf debuginfo-install bc-1.07.1-5.el8.x86_64
        ```
        有关此过程的详情，请参阅[使用 GDB 获取应用程序或库的 debuginfo
        软件包](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9-beta/html/developing_c_and_cpp_applications_in_rhel_9/debugging-applications_developing-applications#getting-debuginfo-packages-for-an-application-or-library-using-gdb_enabling-debugging-with-debugging-information){.link}。
    -   导出核心文件以便进一步处理其他位置：
        ``` screen
        $ coredumpctl dump PID > /path/to/file_for_export
        ```
        使用您要放置内核转储的文件替换
        [*/path/to/file_for_export*]{.emphasis}。
    :::
    :::
:::
:::
::: section
::: titlepage
## []{#debugging-applications_developing-applications.html#dumping-process-memory-with-gcore_debugging-a-crashed-application}使用 `gcore`{.literal}转储进程内存 {.title}
:::
核心转储调试的工作流可以离线分析程序的状态。在某些情况下，您可以将此工作流与仍然运行的程序搭配使用，比如很难通过进程访问环境。您可以使用
`gcore`{.literal} 命令在仍在运行时转储任何进程的内存。
::: itemizedlist
**先决条件**
-   您必须了解什么是核心转储，以及如何创建它们。
-   在系统中必须安装 GDB。
:::
::: orderedlist
**步骤**
1.  查找进程 ID([*pid*]{.emphasis})。使用
    `ps`{.literal}、`pgrep`{.literal} 和 `top`{.literal} 等工具：
    ``` screen
    $ ps -C some-program
    ```
2.  转储这个进程的内存：
    ``` screen
    $ gcore -o filename pid
    ```
    这会创建一个文件 [*[filename]{.filename}*]{.emphasis}
    并转储进程内存。转储内存时，进程的执行将停止。
3.  在内核转储完成后，进程会恢复正常执行。
4.  创建 SOS 报告以提供系统的附加信息：
    ``` screen
    # sosreport
    ```
    这会创建一个 tar 存档，其中包含您的系统信息，如配置文件的副本。
5.  将程序的可执行文件、内核转储和 SOS 报告传送到进行调试的计算机。
6.  可选：传输后删除内核转储和 SOS 报告，以释放磁盘空间。
:::
::: itemizedlist
**其他资源**
-   [如何在不重启应用程序的情况下获取核心文件？](https://access.redhat.com/solutions/9952){.link} -
    知识库文章
:::
:::
::: section
::: titlepage
## []{#debugging-applications_developing-applications.html#dumping-protected-process-memory-with-gdb_debugging-a-crashed-application}使用 GDB 转储受保护的进程内存 {.title}
:::
您可以将进程内存标记为不转储。这可节省资源并确保进程内存包含敏感数据时的其他安全：例如，在银行或核算应用程序或整个虚拟机上。内核内核转储(`kdump`{.literal})和手动内核转储（`gcore`{.literal}、GDB）都不会转储标记为这种方式的内存。
在某些情况下，无论这些保护是什么，您必须转储进程内存的整个内容。此流程演示了如何使用
GDB 调试器进行此操作。
::: itemizedlist
**先决条件**
-   您必须了解什么是核心转储。
-   在系统中必须安装 GDB。
-   GDB 必须已附加到带有受保护内存的进程。
:::
::: orderedlist
**步骤**
1.  将 GDB 设置为忽略 `/proc/PID/coredump_filter`{.literal}
    文件中的设置：
    ``` screen
    (gdb) set use-coredump-filter off
    ```
2.  将 GDB 设置为忽略内存页标记 `VM_DONTDUMP`{.literal} ：
    ``` screen
    (gdb) set dump-excluded-mappings on
    ```
3.  转储内存：
    ``` programlisting
    (gdb) gcore core-file
    ```
    使用您要转储内存的文件名替换 [*core-file*]{.emphasis}。
:::
::: itemizedlist
**其他资源**
-   [使用 GDB 进行调试 -
    如何从您的程序减少核心文件](https://sourceware.org/gdb/onlinedocs/gdb/Core-File-Generation.html){.link}
:::
:::
:::
:::
[]{#assembly_additional-toolsets-for-development_developing-applications.html}
::: chapter
::: titlepage
# []{#assembly_additional-toolsets-for-development_developing-applications.html#assembly_additional-toolsets-for-development_developing-applications}第 4 章 用于开发的额外工具集 {.title}
:::
除了作为操作系统一部分的开发相关工具外，开发人员还可以在 Red Hat
Enterprise Linux
上安装其他工具集。这些工具集可以包含用于不同语言、替代工具链或系统工具的替代版本的工具。
::: section
::: titlepage
# []{#assembly_additional-toolsets-for-development_developing-applications.html#compiler-toolsets_assembly_additional-toolsets-for-development}编译器工具集 {.title}
:::
RHEL 9 Beta 提供了以下编译器工具集作为应用程序流：
::: itemizedlist
-   LLVM Toolset 提供 LLVM 编译器基础架构框架、Clang 编译器、ClangDB
    调试器以及用于代码分析的相关工具。
-   Rust Toolset 提供 Rust 编程语言编译器
    `rustc`{.literal}、`cargo`{.literal}
    构建工具和依赖项管理器、`cargo-vendor`{.literal} 插件和所需的库。
-   Go Toolset 提供 Go 编程语言工具和库。Go 也称为 `golang`{.literal}。
:::
有关用法的详情和信息，请参阅 [Red Hat Developer
Tools](https://access.redhat.com/documentation/en-us/red_hat_developer_tools/1){.link}
页中的编译器工具集用户指南。
:::
::: section
::: titlepage
# []{#assembly_additional-toolsets-for-development_developing-applications.html#annobin_assembly_additional-toolsets-for-development}Annobin 项目 {.title}
:::
Annobin 项目是 Watermark
规格项目的实现。水位线规格项目旨在向可执行文件和可链接格式(ELF)对象添加标记，以确定其属性。Annobin
项目由 `annobin`{.literal} 插件和 `annockeck`{.literal} 程序组成。
`anobin`{.literal} 插件扫描 GNU Compiler
Collection(GCC)命令行、编译状态和编译过程，并生成 ELF 备注。ELF
备注记录了二进制文件的构建方式，并为 `annocheck`{.literal}
程序提供信息来执行安全强化检查。
安全强化检查程序是 `annocheck`{.literal}
程序的一部分，默认是启用的。它检查二进制文件，以确定是否使用必要的安全强化选项构建程序。`annocheck`{.literal}
能够为 ELF 对象文件递归扫描目录、存档和 RPM 软件包。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
这些文件必须采用 ELF 格式。`anocheck`{.literal}
不处理任何其他二进制文件类型。
:::
下面的部分描述了如何：
::: itemizedlist
-   使用 `annobin`{.literal} 插件
-   使用 `annocheck`{.literal} 程序
-   删除冗余 `annobin`{.literal} 备注
:::
::: section
::: titlepage
## []{#assembly_additional-toolsets-for-development_developing-applications.html#using-annobin-plugin_annobin}使用 annobin 插件 {.title}
:::
下面的部分描述了如何：
::: itemizedlist
-   启用 `annobin`{.literal} 插件
-   将选项传递给 `annobin`{.literal} 插件
:::
::: section
::: titlepage
### []{#assembly_additional-toolsets-for-development_developing-applications.html#enabling-annobin-plugin_using-annobin-plugin}启用 annobin 插件 {.title}
:::
下面的部分论述了如何通过 `gcc`{.literal} 和 `clang`{.literal} 启用
`annobin`{.literal} 插件。
::: itemizedlist
**步骤**
-   要启用带有 `annobin`{.literal} 插件的 `gcc`{.literal}，请使用：
    ``` screen
    $ gcc -fplugin=annobin
    ```
    ::: itemizedlist
    -   如果 `gcc`{.literal} 找不到 `annobin`{.literal} 插件，请使用：
        ``` screen
        $ gcc -iplugindir=/path/to/directory/containing/annobin/
        ```
        将 [*/path/to/directory/containing/annobin/*]{.emphasis}
        替换为包含 `annobin`{.literal} 的目录的绝对路径。
    -   要查找包含 `annobin`{.literal} 插件的目录，请使用：
        ``` screen
        $ gcc --print-file-name=plugin
        ```
    :::
-   要启用带有 `clang`{.literal} 的 `gcc`{.literal}，请使用：
    ``` screen
    $ clang -fplugin=/path/to/directory/containing/annobin/
    ```
    将 [*/path/to/directory/containing/annobin/*]{.emphasis} 替换为包含
    `annobin`{.literal} 的目录的绝对路径。
:::
:::
::: section
::: titlepage
### []{#assembly_additional-toolsets-for-development_developing-applications.html#passing-options-to-annobin_using-annobin-plugin}将选项传递给 annobin 插件 {.title}
:::
下面的部分论述了如何通过 `gcc`{.literal} 和 `clang`{.literal}
将选项传递给 `annobin`{.literal} 插件。
::: itemizedlist
**步骤**
-   要将选项传递给带有 `gcc`{.literal} 的 `annobin`{.literal}
    插件，请使用：
    ``` screen
    $ gcc -fplugin=annobin -fplugin-arg-annobin-option file-name
    ```
    使用 `annobin`{.literal} 命令行参数替换
    [*option*]{.emphasis}，并使用文件名替换 [*file-name*]{.emphasis}。
    ::: itemizedlist
    **示例**
    -   要显示 `annobin`{.literal} 正在进行的操作的其他详情，请使用：
        ``` screen
        $ gcc -fplugin=annobin -fplugin-arg-annobin-verbose file-name
        ```
        用文件名替换 [*file-name*]{.emphasis}。
    :::
-   要将选项传递给带有 `clang`{.literal} 的 `annobin`{.literal}
    插件，请使用：
    ``` screen
    $ clang -fplugin=/path/to/directory/containing/annobin/ -Xclang -plugin-arg-annobin -Xclang option file-name
    ```
    使用 `annobin`{.literal} 命令行参数替换 [*option*]{.emphasis}，并将
    [*/path/to/directory/containing/annobin/*]{.emphasis} 替换为包含
    `annobin`{.literal} 的目录的绝对路径。
    ::: itemizedlist
    **示例**
    -   要显示 `annobin`{.literal} 正在进行的操作的其他详情，请使用：
        ``` screen
        $ clang -fplugin=/usr/lib64/clang/10/lib/annobin.so -Xclang -plugin-arg-annobin -Xclang verbose file-name
        ```
        用文件名替换 [*file-name*]{.emphasis}。
    :::