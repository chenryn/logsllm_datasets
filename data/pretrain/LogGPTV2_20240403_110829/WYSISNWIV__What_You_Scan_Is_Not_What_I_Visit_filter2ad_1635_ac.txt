%23
%23
%23
%23
(cid:2)Affects pairing with all browsers.
†Affects pairing with browsers that URL encode backslash.
‡Affect pairing with browsers that transform backslash to forward slash.
• Handling of the backslash depends on the character following it.
From all the tested URL patterns, we discovered three transformations that
can cause problems when a scanner’s database is coupled with a browser to ﬁlter
malicious URLs (e.g., like Chrome and Firefox using the Google Safe Browsing
database). The patterns are: the backslash character (\), and the URL encoded
characters ? (%3F ) and # (%23). Interestingly, the handling of the backslash
WYSISNWIV: What You Scan Is Not What I Visit
327
character is not well deﬁned in RFC-3986, while ? and # are delimiters in the
URL format. The results are summarized in Table 3 and further discussed below.
URL-encoded Delimiters. The characters ? and # are delimiters for URLs
and need to be URL-encoded or percent-encoded, if they are present in other
parts of the URL, where they are allowed. This way the characters are escaped.
Our results show that certain scanners unescape these characters, unintentionally
transforming the URL, like in the example illustrated below with ? (%3F ):
http://www.example.org/path%3Fdistorted → http://www.example.org/path?distorted
The underlined part is actually the path requested from the server at www.
example.org in each case. As indicated by Table 3, Google Safe Browsing and
VirusTotal do such a transformation and, as a result, check a diﬀerent path, than
the one the browser visits. Even worse, Sucuri SiteCheck does not accept %3F at
all, treating URLs including it as invalid. Similarly, for %23, the encoded version
of #, Sucuri SiteCheck does also not accept it, while VirusTotal unescapes it.
Interestingly, when gred encounters either of the two percent-encoded delimiters,
it checks two links: the original link, treating the encoded character as an encoded
character, and a link where the percent character (%) is itself escaped to %25.
gred seems to be very careful in handling form input in this case, accounting
for both eventualities, even though no browser seems to treat the % character
that way.
Table 4. Examples of URL transformations caused by handling backslash (\) diﬀerently.
’\’ is
http://www.example.org/path\distorted
Original URL
URL-encoded
http://www.example.org/path%5Cdistorted
canonicalized
http://www.example.org/path/distorted
dropped
http://www.example.org/pathdistorted
backslash escaped http://www.example.org/path\\distorted
Backslash Handling. Backslash (\) is the character handled in the most incon-
sistent way among diﬀerent scanners. We have identiﬁed four diﬀerent trans-
formations that the backslash character is submitted to in our tests: it can
be URL-encoded to % 5C, canonicalized to (i.e., replaced by) a forward slash
(/), simply dropped from the URL, or escaped using another backslash (\\).
Examples of these URL transformations are listed in Table 4. Three scanners,
Wepawet, Virustotal, and urlQuery escape it by percent-encoding it to % 5C.
This behavior is akin to the encoding done by Firefox, and as a result pairing
any of these scanners with any browser, aside Firefox, would enable an attacker
to hide malicious content from the scanner. The reverse happens with Zscaler
Zulu that replaces the character with a forward slash, which makes it a bad ﬁt
328
Q. Yang et al.
for using with Firefox. ScanURL and Scumware will always completely drop the
backslash URL, while Online Link Scan and PhishTank will escape the character
using another backslash. In both these cases, using the scanner would expose the
user to attacks through such URLs regardless from the browser he is using.
Intra-scanner Backslash Handling Discrepancies. Certain scanners like
WebInspector, gred, Google Safe Browsing, and Sucuri SiteCheck, handle the
backslash diﬀerently depending on how they obtain the URL they are scanning.
For example, gred and Sucuri SiteCheck drop it, when we manually submit a
URL, while when the URL is in a link within the submitted page, obtained
after parsing the submitted page and following the links within, they do not
accept it and consider the URL invalid. We establish this by injecting various
links within the submitted page and observing that only the ones containing a
backslash are not accessed by the scanner. On the other hand, WebInspector
canonicalizes backslashes on manual submission, while links injected in pages
are URL-encoded. Finally, Google Safe Browsing treats the percent-encoded ‘?’
diﬀerently based on how the URL is obtained, while backslashes in manually
submitted URLs are processed in a more elaborate way, than when in URLs in
pages, where they are transformed to forward slashes. We further discuss Google
Safe Browsing below, due to its importance.
Table 5. Examples of how Google Safe Browsing transforms the backslash character
when manually reporting URLs.
LRUdetropeR#
1 http://www.example.org/path\ndistorted
2 http://www.example.org/path\adistorted
3 http://www.example.org/path\0distorted
4 http://www.example.org/path\x50distorted
5 http://www.example.org/path\x96distorted
6 http://www.example.org/path\x0110distorted
7 http://www.example.org/path\Qdistorted
→
LRUdetisiV
http://www.example.org/pathdistorted
http://www.example.org/path%07distorted
http://www.example.org/path
http://www.example.org/pathQdistorted
http://www.example.org/path%96distorted
http://www.example.org/path
http://www.example.org/path
Google Safe Browsing. The backslash character is treated in many diﬀerent
ways by Google Safe Browsing, when a URL is manually reported, which we list
below:
1. A backslash speciﬁes a control character, when it is followed by one of the
following characters: t, n, a, b, 0, and e. Depending on the control character,
the URL is transformed in three diﬀerent ways:
‘\t’ ‘\n’ The control character is deleted and the strings before and after
‘\a’, ‘\b’ The control character is converted to the corresponding URL-
encoded character (%07 and %08 respectively), as in example 2 in Table 5.
‘\0’, ‘\e’ The control character and all trailing characters in the URL are
it are joined together, as in example 1 in Table 5.
deleted, as in example 3 in Table 5.
WYSISNWIV: What You Scan Is Not What I Visit
329
2. A backslash escapes a unicode character when it is followed by the character
‘x’ (\x). In this case, the characters trailing ‘x’ are retrieved and interpreted
as a Unicode character code in hexadecimal. The following sub-cases are pos-
sible:
Character does not require encoding The ASCII representation of the
character replaces it, as in example 4 in Table 5.
Character requires percent-encoding The percent-encoded form of the
character replaces it, as in example 5 in Table 5.
Invalid character If the Unicode character is not allowed in the URL, for
example, because it requires two percent-encoded bytes like in the case
of \0110 → %C4 %90, it is dropped along with all trailing characters, as
in example 6 in Table 5.
3. When a backslash is followed by any other character, it is treated as an invalid
character and it is dropped along with all trailing characters, as in example
7 in Table 5.
5.3 Backslash in Other Applications
Applications, such as instant messengers (IMs), web email, and email clients,
dynamically create links when they identify text that resembles a URL. If the
information exchanged by such an application is intercepted to scan for poten-
tially malicious URLs [24,38,42], any transformation applied by the application,
introduces another point that could be exploited by an attacker (e.g., to bypass
URL scanners when performing a spear phishing campaign). We tested var-
ious applications with URLs including the backslash character and report our
results in Table 6. We focused our eﬀorts on popular operating systems and plat-
forms, such as Mac and Windows on desktops/laptops and iOS and Android on
smartphones. Email clients were tested on both Windows and Mac platforms, if
available (e.g., eM client and Claws Mail do not have a Mac version). IMs with
the exception of Skype and QQ were tested on mobile platforms, since there is
a broader variety and are more commonly used on these platforms. Skype and
QQ were also tested on Windows and Mac. We do not list Skype’s case on iOS,
since it does not create links for the tested URLs, essentially failing to recognize
URLs with ambiguous characters. Web mail cases and popular sites were tested
on both Windows and Mac using Internet Explorer, Chrome, and Firefox.
Most of the tested applications handle backslashes more strictly than browsers
and stop processing when a backslash is encountered [45], essentially cropping
the URL. However, since no scanner performs such a transformation, stricter is
not safer in this case. The remainder of the tested applications either canonical-
ize URLs, transforming backslashes to forward slashes, preserve them, or URL-
encode them. An interesting ﬁnding is that most of the applications on Android
cropped the URL before the ﬁrst backslash and most of the applications on iOS
platform encoded the backslash. Through further investigation, we found that
there is a build-in library for ﬁnding URLs in plain text, namely android.util.
Patterns.WEB URL, which terminates URL pattern matching when it encounters
330
Q. Yang et al.
Table 6. How various other applications transform the backslash character.
a backslash. On iOS, the build-in library dataDetectorWithTypes:NSText
CheckingTypeLink encodes the backslash automatically while searching for URLs.
Email clients exhibit more divergence on handling URLs, which indicates that
developers create their own URL parser or utilize diﬀerent libraries to parse URLs.
Our results indicate that the standard followed by applications may be uncon-
sciously dictated by the platform and libraries used, some times causing the same
application to handle URLs diﬀerently based on its platform version.
5.4 Backslash Handling by Diﬀerent Libraries
Based on the ﬁndings presented in the previous section, we further investigate
how platforms and libraries handle the backslash character in URLs. We chose
some of the most commonly used languages, as reported by IEEE Spectrum [19],
and widely used libraries for URL processing used when developing in these
WYSISNWIV: What You Scan Is Not What I Visit
331
languages. The results are presented in Table 7. We observe that diﬀerent libraries
indeed diverge by essentially adhering to diﬀerent URL RFCs. In libcurl ’s spec-
iﬁcations both RFC 2396 and RFC 3986 are listed, and the library preserves
the character. The cpp-netlib library obeys RFC 3987, while libraries part of
python 2.6 do not refer to a particular RFC and, interestingly, they handle
the character diﬀerently. Oracle’s Java platform follows the RFC 2396 speciﬁca-
tion, but when using the URI class, the backslash character is not accepted. The
google-http-java-client library follows RFC 3986. Finally, Ruby’s library net/http
uses RFC 2396. These results indicate that applications may implicitly adopt and
RFC for handling URLs based on the libraries used and the platform a developer
develops for.
Table 7. How various libraries handle the backslash character. We provide URLs from
standard input, parse them using the corresponding libraries, and print the parsed
URL to standard output.
Transformations of backslash (\) in URLs.
Deleted Encoded Canonicalized Preserved Error
Library
Libcurl v7.44.0 (C)
cpp-netlib 0.11.1 (C++)
Python v2.6.8 – httplib
Python v2.6.8 – urllib
Java v1.8.0 31 – java.net (URI class)
Java v1.8.0 31 – java.net (URL class)
Google-http-java-client v1.20.0 (Java)
C# v4.6.00079 – System.Net
Ruby v2.2.2p95 – net/http
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
(cid:2)
6 Discussion
6.1 The Problematic Backslash Character
Web developers have noticed the diﬀerences in how diﬀerent browsers handle
the backslash character before us. In a stackoverﬂow post a developer reports
that the handling of backslashes from Chrome prevents him from using it legiti-
mately [2]. The response from another user is enlightening: ‘The uniﬁed solution
to deal with backslash in a URL is to use %5C. RFC 2396 did not allow that
character in URLs at all (so any behavior regarding that character was just error-
recovery behavior). RFC 3986 does allow it, but is not widely implemented, not
least because it’s not exactly compatible with existing URL processors.’. More
recently, a Google+ user and web developer also identiﬁed the discrepancy and
pointed that it could lead to another type of vulnerability [28]. In particular,
changing the URL can aﬀect the veriﬁcation of the message origin when using
postM essage(). They had to update their web application to account for back-
slash transformations. It is clear that it is unclear which standard each browser
332
Q. Yang et al.
and URL scanner adheres to. Moreover, attempts to auto-correct user typos, such
as typing a backslash instead of a slash, have been widely adopted by graphical
programs, such as browsers. On the other hand, only a few URL scanners seem
to be aware of such schemes.
6.2
Impact and Responsible Disclosure
Our results show that there is a clear gap on the use of Google Safe Browsing
from Firefox. That is, because an attacker can create URLs including back-
slashes, which can be followed by Firefox but transformed by Google before
checking them for malware. We disclosed the problem to both Google’s Safe
Browsing team and Mozilla. They have acknowledged it and are working towards
a solution. At the moment of writing, the solution is not clear cut due to multi-
party involvement. Firefox could adopt canonicalization as the rest of the main
stream browsers. Until that happens Google may be looking out for backslashes
in encountered URLs. A member of the Google Safe Browsing team has con-
ﬁrmed that such URLs (not the ones submitted by us) are present in their
malicious-URLs database, despite our inability to get such URLs scanned. This
conﬁrms that even within Google backslash handling is not uniform. Based on
our results with various scanners and applications, we suspect that other solu-
tions based on diﬀerent URL scanners to ﬁlter or block malicious URLs are
suﬀering from the same issue.
6.3 Remediation
Adhering Strictly to a Single Standard. The obvious solution to the prob-
lem would be that every URL parser implementation adheres to the same stan-
dard and be bug-free. Unfortunately, experience has showed that this is probably
not a realistic solution. Just recently a bug in how Skype for Windows parses
URLs caused it to crash when it parsed the string “http://:” [39]. Browser devel-
opers have been devising ways for years to auto-correct common errors made by
web developers and display pages that would not be parsed by a strict HTML
parser. HTTP, the protocol running the web, is also frequently incorrectly imple-
mented, as a quick search for “incorrect HTTP handling” reveals.
Using Multiple URL Scanners. Our results show that for all tested scanners
and browsers, there is no single scanner that could be adopted by any browser
and have no discrepancies that leave room for attacks. However, combining mul-
tiple scanners could solve the problem, as they would cover diﬀerent links. As
these scanners may already be exchanging data, we designed a test to evalu-
ate whether they already do. More speciﬁcally, we checked whether Google Safe
Browsing utilizes other scanners’ databases. For this test, we created unique
URLs that point to a malicious executable ﬁle and submit them to each scanner