Secure Tokin’ & Doobiekeys:
How to roll your own counterfeit hardware security devices
@sercurelyfitz, @r00tkillah
$whoami
Michael* (@r00tkillah) has done hard-time in real-time. An old-school computer engineer by education, he spends his days 
championing product security for a large semiconductor company. Previously, he developed and tested embedded hardware and 
software, dicked around with strap-on boot roms, mobile apps, office suites, and written some secure software. On nights and 
weekends he hacks on electronics, writes Troopers CFPs, and contributes to the NSA Playset.
* Opinions expressed are solely my own and do not express the views or opinions of my employer.
●
Lectrical Nginear by education
●
10+ years of fun with hardware
○
silicon debug
○
security research
○
pen testing of CPUs
○
security training
●
Applied Physical Attacks Training:
○
X86 Systems
○
Embedded Systems
○
Hardware Pentesting
●
Own white shoes full of LEDs
whoami?
Joe FitzPatrick
@securelyfitz
PI:EMAIL
Wouldn’t it be cool if...
We had a magical device that
●
Encrypted things for us
●
Authenticated things for us
●
Authenticated us to others
●
Solved all our insecurities
Wouldn’t it be cool if...
That magical device
●
Fit in the palm of our hand
●
Was easy to use
●
Only cost a few bucks
Wouldn’t it be lame if...
This turned into a sales pitch for hardware security devices?
These are all improvements...
But they’re not magic.
Classic Hardware Threat Modeling
●
Common attackers:
○
Evil maid
○
Supply chain
○
and End user
●
Common vectors:
○
external ports
○
internal pins
○
counterfeit chips
○
intrusive techniques
Don’t attack the standard.
Attack the implementation.*
*Does not refer to the hardware implementation
Refers to the use cases and common scenarios
RSA Securid Token
First, what’s the real easiest way in?
“an extremely sophisticated cyber attack”
Hardware can be hard. Hardened Hardware is Harder
?
Common Assumptions:
●
The computer may be pwnd, but the token is separate
●
The master key inside the chip is what the attackers after
●
Getting that key will either be destructive or time consuming
A different Approach:
●
The verification code is what we need to login.
●
That needs to be output for the device to be functional.
●
Can we sniff and relay that?
Surgery time
Surgery time
Dot toggles every 
second...
Toggles Every Second...
Bars build every 10s
Pseudocode:
Is_LCD_On:
Sample a pin 3x at 128Hz
If 101 or 010, return true
Wait until Is_LCD_On(2nd to last bar)
Foreach 7seg segment:
IsLCDOn(segment)
Delay 59 seconds
Repeat
But what do we 
do with the data?
LCD-BLE bridge
Insanely Low power - should last 
years leeching off the coin cell
Lots of GPIO
Plenty of power to read LCD pins 
and convert them to text
LCD-BLE bridge - Inspiration:
RSA Tokin’
We didnt capture any crypto
We can listen to the verification code
We could broadcast the verification 
code over bluetooth
*We still do have to seal up the case 
without it looking too much like 
tampering… maybe lasers can help...
Image of rsa token with back 
panel attached...
Doobikey - Get Some
DoobieKey - Verify
Is this a legit Yubikey?
DoobieKey - Verify
Is this a legit Yubikey?
DoobieKey - Customize
DoobieKey - DIY
DoobieKey - legitimize
Yup!
DoobieKey - legitimize
Yup!
DoobieKey - legitimize
Yup!
Doobiekey - legitimize it!
Doobiekey - Wait.  What Just Happened?
Doobikey - With a Touch of Evil
So what?
We poked around at 5 hardware security devices.
They are improvements and worth using.
But they arent magic.
So what?
Hardware doesnt make things safer.
Hardware doesnt make things harder.
Hardware DOES raise the barrier to entry… by a few dollars*
* a few dollars could actually be ∞% more expensive than software!
Every one of these devices improve security.
Use them.
Hardware threat models are LOTS more 
complicated than we give them credit for
Software hacking is looking at the layers of 
abstraction, and finding a way through.
Hardware is just another layer of abstraction
Software doesn’t run on hardware
It runs on layers of abstractions, 
all the way down to electrons and atoms
Still trust hardware implicitly?
What are you smoking?
Questions?
BACKUP!!!
Case Studies:
RSA Tokin
Secure Boot
Trusted Platform Module
Yubikey
The Stateless Computer
Secure Boot - Booting
Blatantly Stolen Slide
Secure Boot - PKCS7 FTW
Blatantly Stolen Slide
Secure Boot - Signed by GeoTrust
Secure Boot - Ubuntu
Blatantly Stolen Slide
Secure Boot - thisisfine.jpg
Secure Boot - Ubuntu
No verfiable kernel? No problem. 
ExitBootServices()
Boot Anyway!
Secure Boot - Ubuntu
Wanna Boot Windows 
from GRUB?
Sure!
But - windows will NOT report 
that it has been securely booted
Secure Boot - Ubuntu
Wanna Boot Windows 
from GRUB securely?
Escape before ExitBootServices()
Is called.
How?
Cmon hackers… figure it out
Config files
Additional 
Modules
3 image parsers 
written from scratch
Secure Boot - Ubuntu
Explioit a bug
Boot Bootkit
Bootkit loads windows
Bootkit!
Secure Boot - Possible Future
Case Studies:
RSA Tokin
Insecure Boot Spliff
Trusted Platform Module
Yubikey
The Stateless Computer
What’s Trusted Platform Module
It does crypto stuff
It plugs into an LPC header
Many systems dont ship with them
In human terms:
I need to get one to use bitlocker.
That’s all great. 
Where do i get one?
Best Buy: Nope
Frys: Nope
Microcenter: Nope
Radio Shack: Yeah Right
If you want a hookup, 
you have to find a sketchy dealer:
What’s this sketchy stuff 
i’m putting in my ‘puter?
LPC = ISA, 4x as fast, ¼ the pins
LPC can do DMA by pulling LDRQ‘
I ♥ DMA
Wouldnt it be great if someone already did all that work though?
Oh:
I ♥ DMA
(Un)fortunately LDRQ‘ isnt on 
the TPM header
Anyone Can Make a TPM*
Its an open standard!
* Anyone with time to spare….
Trusted Platform Modules
People get them from sketchy sources
We could make a malicious one
No DMA, but we could make a leaky one
… maybe the next time I have patience or a nation-state backing me
Case Studies:
RSA Tokin
Insecure Boot Spliff
Trusted Platform Module
Doobiekey
The Stateless Computer
So perhaps we should rethink this whole 
hardware security thing...
Isolation works with software. Can it work with hardware?
*The industry needs more brainstorming like this*
State
Logic
Processor
Comms
I/O devices
BIOS
Firmware
EEPROM
NVRAM
Storage
State
This is 
the stuff
we need 
to trust
State
Logic
Processor
Comms
I/O devices
BIOS
Firmware
EEPROM
NVRAM
Storage
State
Or even more simplified:
State
Logic
Gates 
(but not latches)
Bits
Or even more simplified:
State
Logic
Quad XOR 
Gate
SPI 
EEPROM
Or even more simplified:
State
Logic
Quad XOR 
Gate
Or even more simplified:
State
Logic
!!!Demo
● User sends plaintext
● SPI flash outputs key
● XOR does magic
● XORd cyphertext 
comes back to user
● Key bits loop around
● Repeat to decrypt
Can you verify this board?
● Its only got one chip
● It was designed in the 60s
● Its only a 2 layer board
● It follows the XOR truth 
table properly
Can you verify this board?
● 14 pin DIP = many things
● Attiny84 fits the bill
● Need to bluewire it but that 
could be easily concealed
Picture of the populated logic 
board
One of these things is not like the other
ATTINY84                     74SN86
Faking a crypto ASIC... that’d be like… hard?
Add a little state….
False Advertizing!
But youre supposed to be stateless!
Youre not supposed to store stuff!
We trusted you!
Wait… 
wasnt the whole point to
not have to trust you?
Picture of the populated logic 
board
We need to 
‘Trust’
That this is
stateless!
This is 
the stuff
we need 
to trust
State
Logic
Processor
Comms
I/O devices
BIOS
Firmware
EEPROM
NVRAM
Storage
State
Case Studies:
RSA Tokin
Insecure Boot Spliff
Trusted Platform Module
Doobiekey
Altered State