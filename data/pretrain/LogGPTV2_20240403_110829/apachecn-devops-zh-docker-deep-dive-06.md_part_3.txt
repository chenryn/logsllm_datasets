Docker 负责堆叠这些层，并将它们表示为一个统一的对象。
有几种方法可以查看和检查构成映像的图层。其实我们之前拉图的时候看到过一个。下面的示例仔细观察映像拉取操作。
```
$ docker image pull ubuntu:latest
latest: Pulling from library/ubuntu
952132ac251a: Pull complete
82659f8f1b76: Pull complete
c19118ca682d: Pull complete
8296858250fe: Pull complete
24e0251a0e2c: Pull complete
Digest: sha256:f4691c96e6bbaa99d...28ae95a60369c506dd6e6f6ab
Status: Downloaded newer image for ubuntu:latest
docker.io/ubuntu:latest 
```
 `上面输出中以“拉完整”结束的每一行代表映像中被拉的一个层。我们可以看到，这张图片有 5 层。图 6.4 以带有图层标识的图片形式显示了这一点。
![Figure 6.4](img/figure6-4.png)
Figure 6.4
查看映像图层的另一种方法是使用`docker image inspect`命令检查映像。以下示例检查相同的`ubuntu:latest`映像。
```
$ docker image inspect ubuntu:latest
[
    {
        "Id": "sha256:bd3d4369ae.......fa2645f5699037d7d8c6b415a10",
        "RepoTags": [
            "ubuntu:latest"
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:c8a75145fc...894129005e461a43875a094b93412",
                "sha256:c6f2b330b6...7214ed6aac305dd03f70b95cdc610",
                "sha256:055757a193...3a9565d78962c7f368d5ac5984998",
                "sha256:4837348061...12695f548406ea77feb5074e195e3",
                "sha256:0cad5e07ba...4bae4cfc66b376265e16c32a0aae9"
            ]
        }
    }
] 
```
 `修剪后的输出再次显示 5 层。只是这一次显示它们使用的是 SHA256 哈希。
`docker image inspect`命令是查看映像细节的好方法。
`docker history`命令是检查映像和查看图层数据的另一种方式。然而，它显示的是一个映像的构建历史，而不是最终映像中严格的图层列表**。例如，一些 Dockerfile 指令(“ENV”、“EXPOSE”、“CMD”和“ENTRYPOINT”)将元数据添加到映像中，并且不会导致创建永久层。**
 **所有 Docker 映像都从一个基础层开始，随着更改和新内容的添加，新的层会添加到顶部。
考虑以下构建简单 Python 应用的过于简单的示例。您可能有一个公司策略，所有应用都基于官方的 Ubuntu 20:04 映像。这将是你的映像的*基础层*。如果您随后添加 Python 包，它将作为第二层添加到基础层之上。如果您稍后添加源代码文件，这些文件将作为附加层添加。您的最终映像将有三层，如图 6.5 所示(记住这是一个过度简化的示例，用于演示目的)。
![Figure 6.5](img/figure6-5.png)
Figure 6.5
重要的是要理解，随着附加层的添加，*映像*始终是所有层按照添加顺序堆叠的组合。举一个简单的两层例子，如图 6.6 所示。每个*层*有 3 个文件，但是整体*映像*有 6 个文件，因为它是两个层的组合。
![Figure 6.6](img/figure6-6.png)
Figure 6.6
> **注意:**我们在图 6.6 中显示的映像图层与之前的图略有不同。这只是为了更容易地显示文件。
在图 6.7 中三层映像稍微复杂一点的例子中，整个映像在统一视图中只显示了 6 个文件。这是因为顶层的`File 7`是正下方`File 5`的更新版本(内联)。在这种情况下，较高层中的文件会遮挡其正下方的文件。这允许将文件的更新版本作为新图层添加到映像中。
![Figure 6.7](img/figure6-7.png)
Figure 6.7
Docker 采用了一个存储驱动程序，该驱动程序负责堆叠各层并将它们呈现为一个统一的文件系统/映像。Linux 上存储驱动的例子包括`AUFS`、`overlay2`、`devicemapper`、`btrfs`和`zfs`。正如它们的名字所暗示的，每一个都基于 Linux 文件系统或块设备技术，并且每一个都有自己独特的性能特征。Windows 上 Docker 唯一支持的驱动是`windowsfilter`，它在 NTFS 之上实现了分层和 CoW。
无论使用哪种存储驱动，用户体验都是一样的。
图 6.8 显示了系统将看到的相同的 3 层映像。即所有三层堆叠并合并，给出单一的统一视图。
![Figure 6.8](img/figure6-8.png)
Figure 6.8
#### 共享映像层
多个映像可以并且确实共享图层。这将提高空间和性能效率。
让我们再来看一下带有`-a`标志的`docker image pull`命令，我们之前运行该命令是为了提取`nigelpoulton/tu-demo`存储库中所有标记的映像。
```
$ docker image pull -a nigelpoulton/tu-demo
latest: Pulling from nigelpoulton/tu-demo
aad63a933944: Pull complete 
f229563217f5: Pull complete 
>
Digest: sha256:c9f8e18822...6cbb9a74cf
v1: Pulling from nigelpoulton/tu-demo
aad63a933944: Already exists 
f229563217f5: Already exists 
fc669453c5af: Pull complete 
Digest: sha256:674cb03444...f8598e4d2a
v2: Pulling from nigelpoulton/tu-demo
Digest: sha256:c9f8e18822...6cbb9a74cf
Status: Downloaded newer image for nigelpoulton/tu-demo
docker.io/nigelpoulton/tu-demo
$ docker image ls
REPOSITORY             TAG       IMAGE ID       CREATED       SIZE
nigelpoulton/tu-demo   latest    d5e1e48cf932   2 weeks ago   104MB
nigelpoulton/tu-demo   v2        d5e1e48cf932   2 weeks ago   104MB
nigelpoulton/tu-demo   v1        6852022de69d   2 weeks ago   104MB 
```
 `注意以`Already exists`结尾的线条。
这些行告诉我们，Docker 足够聪明，能够识别何时要求它拉一个已经有本地副本的映像层。在本例中，Docker 首先拉出标记为`latest`的映像。然后，当它拉出`v1`和`v2`映像时，它注意到它已经有了组成这些映像的一些层。发生这种情况是因为这个存储库中的三个映像几乎相同，因此共享许多层。其实`v1`和`v2`唯一的区别就是顶层。
如前所述，Linux 上的 Docker 支持许多存储驱动程序。每个都可以自由地以自己的方式实现映像分层、层共享和写时复制(CoW)行为。然而，总体结果和用户体验本质上是相同的。虽然 Windows 只支持单个存储驱动程序，但该驱动程序提供了与 Linux 相同的体验。
#### 通过摘要提取映像
到目前为止，我们已经向您展示了如何使用映像的名称(标签)来提取映像。这是目前为止最常见的方法，但是它有一个问题——标签是可变的！这意味着可能会不小心用错误的标签(名称)标记映像。有时，甚至可以用与现有映像相同但不同的标签来标记映像。这可能会导致问题！
举个例子，假设你有一个名为`golftrack:1.5`的映像，它有一个已知的 bug。使用**相同的标签**，您可以提取映像，应用修复，并将更新后的映像推回其存储库。
花一点时间考虑一下那里发生了什么……你有一个名为`golftrack:1.5`的映像，它有一个 bug。生产环境中的容器正在使用该映像。您将创建包含修复程序的映像的新版本。接下来就是错误了…你构建了一个固定的映像，并把它推回到它的存储库中，标签与易受攻击的映像相同！。这将覆盖原始映像，使您无法知道哪些生产容器正在使用易受攻击的映像，哪些容器正在使用固定映像—它们都有相同的标签！
这就是*映像消化*前来救援的地方。
Docker 1.10 引入了内容可寻址存储模型。作为该模型的一部分，所有映像都获得一个加密的*内容散列*。为了讨论的目的，我们将这个散列称为*摘要*。由于摘要是映像内容的散列，因此如果不创建新的唯一摘要，就不可能更改映像的内容。换句话说，你不能改变映像的内容而保留旧的摘要。这意味着摘要是不可变的，并为我们刚刚讨论的问题提供了解决方案。
每次拉取映像时，`docker image pull`命令都会将映像摘要作为返回信息的一部分。您还可以通过向`docker image ls`命令添加`--digests`标志来查看 Docker 主机本地存储库中的映像摘要。这些都显示在下面的示例中。
```
$ docker image pull alpine
Using default tag: latest
latest: Pulling from library/alpine
cbdbe7a5bc2a: Pull complete 
Digest: sha256:9a839e63da...9ea4fb9a54
Status: Downloaded newer image for alpine:latest
docker.io/library/alpine:latest
$ docker image ls --digests alpine
REPOSITORY  TAG     DIGEST                           IMAGE ID      CREATED     SIZE
alpine      latest  sha256:9a839e63da...9ea4fb9a54   f70734b6a266  2 days ago  5.61MB 
```
 `上面剪切的输出将`alpine`映像的摘要显示为-
`sha256:9a839e63da...9ea4fb9a54`
现在我们知道了映像的摘要，可以在再次拉取映像时使用。这将确保我们得到的**正是我们所期待的形象！**
在编写本文时，没有本机 Docker 命令可以从远程注册表(如 Docker Hub)中检索映像摘要。这意味着确定映像摘要的唯一方法是通过标记来提取它，然后记下它的摘要。这在未来可能会改变。
以下示例从 Docker 主机中删除`alpine:latest`映像，然后展示如何使用其摘要而不是其标签再次提取该映像。实际摘要在书中被删节，以便能放在一行。用这个代替你自己系统上的版本的真正摘要。
```
$ docker image rm alpine:latest
Untagged: alpine:latest
Untagged: alpine@sha256:c0537...7c0a7726c88e2bb7584dc96
Deleted: sha256:02674b9cb179d...abff0c2bf5ceca5bad72cd9
Deleted: sha256:e154057080f40...3823bab1be5b86926c6f860
$ docker image pull alpine@sha256:9a839e63da...9ea4fb9a54
sha256:9a839e63da...9ea4fb9a54: Pulling from library/alpine
cbdbe7a5bc2a: Pull complete 
Digest: sha256:9a839e63da...9ea4fb9a54
Status: Downloaded newer image for alpine@sha256:9a839e63da...9ea4fb9a54
docker.io/library/alpine@sha256:9a839e63da...9ea4fb9a54 
```
 `#### 关于映像散列(摘要)的更多信息
自 Docker 版本以来，映像是独立层的非常松散的集合。
在某些方面，*映像*本身只是一个列出图层和一些元数据的配置文件。
*层*是数据(文件和代码等)所在的层。).每一层都是完全独立的，没有成为整体更大形象的一部分的概念。
每个*映像*由一个加密标识来标识，该标识是配置文件的散列。每个*层*由一个加密标识来标识，该加密标识是层内容的散列。我们称这些为“内容哈希”。
这意味着更改映像或其任何图层的内容将导致关联的加密哈希发生变化。因此，映像和图层是不可变的，我们可以轻松识别对其中任何一个所做的更改。
到目前为止，事情很简单。但它们会变得更复杂。
当我们推拉映像时，我们会压缩它们的图层，以节省网络带宽和映像注册表中的存储空间。这很好，但是压缩内容看起来与未压缩内容不同。因此，在`push`或`pull`操作后，内容哈希不再匹配。
这带来了各种问题。例如，Docker Hub 验证每个推送的层，以确保它在途中没有被篡改。为此，它对图层内容运行一个哈希，并根据发送的哈希对其进行检查。由于图层被压缩(更改)，哈希验证将失败。
为了解决这个问题，每一层都会得到一个名为*分布散列*的东西。这是层的压缩版本的散列，并且包含在每个被推入或拉出到注册表的层中。然后，这可以用来验证该层到达时没有被篡改。
除了提供一种可加密验证的方式来验证映像和图层的完整性，它还避免了随机生成映像和图层标识时可能发生的标识冲突。