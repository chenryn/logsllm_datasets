cado durante a fase participativa. O domínio identifica os valores que a variável de
negócio pode tomar. Por exemplo, num workflow que suporte os processos de negó-
cio de um banco, a variável de negócio Valor de Empréstimo determina se o pedido
de empréstimo será aceite ou rejeitado. Se a variável tiver um valor superior a 500
000 € então o empréstimo é rejeitado e a tarefa ‘rejeitar’ é executada, caso contrário a
tarefa ‘aceitar’ é executada.
3.1.1 Esquema da tabela de casos de negócio
Uma tabela de casos de negócio é baseada numa tabela de duas dimensões. A estrutu-
ra da tabela é a seguinte. As colunas são divididas em duas classes. A primeira classe
agrupa um conjunto de variáveis de negócio (vn), enquanto a segunda classe é consti-
j
tuída pelas tarefas (t) que fazem parte do workflow em questão. Cada célula na tabela
i
relaciona o valor das variáveis de negócio com as tarefas. Em cada uma destas células
é guardada a informação sobre se a tarefa será executada ou não (utilizamos os valores
true e false para indicar se uma tarefa é executada ou não).
As primeiras células de cada linha, que pertencem às colunas da primeira classe,
contêm os valores que podem ser atribuídos as variáveis de negócio. As células cor-
respondentes às colunas da segunda classe contêm informação que indica se uma
tarefa em particular deverá ser executada ou não em runtime. A ideia é estabelecer se
uma dada tarefa será executada em runtime com base nos valores referentes a um
determinado conjunto de variáveis. De maneira mais formal, o que pretendemos é
obter para cada tarefa t, a seguinte função onde vn é uma variável de negócio:
i i
escalonamento (t, vn vn …, vn) ∈ {True, False} (1)
i 1, 2, j
Uma célula pertencente às colunas da segunda classe poderá conter o símbolo de
execução (i.e., True) ou o símbolo de não execução (i.e., False). A Figura 2 ilustra
uma TCN preenchida.
Fig. 2. Exemplo de uma TCN preenchida
3.1.2 Construção da tabela de casos de negócio
Perceber o esquema de uma TCN é relativamente simples, no entanto a sua construção
é um pouco mais complexa. A metodologia (descrita em (Cardoso 2005)) para cons-
truir e preencher a tabela com casos de negócio é um processo iterativo e interactivo,
baseado nas entrevistas realizadas.
No primeiro passo, é necessário aferir se as tarefas presentes na tabela são sempre
executadas com base nos valores das variáveis de negócio. Se a tarefa é sempre execu-
tada, esta recebe o símbolo true; se nunca é executada recebe o símbolo false (ver a
figura 2). Caso contrário existe um conflito de símbolos. Os conflitos de símbolos
indicam que a realização de um conjunto de tarefas depende de uma ou mais variáveis
de negócio. O conflito verifica-se quando os dois símbolos possíveis (i.e., true e false)
foram atribuídos a uma mesma célula da tabela de casos de negócio. Para resolver este
conflito, o analista deverá identificar pelo menos uma variável de negócio que contro-
la a realização da tarefa que se encontra em conflito. Depois dessa variável ter sido
identificada é necessário realizar os seguintes passos:
1. Deverá ser adicionada uma coluna ao lado esquerdo da tabela de casos de negócio
e deverão ser adicionadas as respectivas linhas para a coluna inserida.
2. A coluna deverá ter o nome da variável de negócio identificada.
3. Cada linha da tabela deverá ser duplicada n-1 vezes, onde n é o domínio de valores
possíveis para a nova variável de negócio introduzida.
4. Para cada célula, correspondente à nova coluna inserida, são atribuídos os valores
do domínio da variável de negócio.
Depois da estrutura da tabela ser actualizada com a nova variável, as células refe-
rentes às tarefas deverão também ser actualizadas com os símbolos apropriados.
Deverão ser realizadas novas entrevistas para que sejam novamente analisadas quais
as tarefas que deverão ser realizadas em runtime com base nos valores referentes às
variáveis de negócio presentes na tabela.
3.2 Extracção de funções de escalonamento
Na segunda fase, extraímos um conjunto de funções de escalonamento da TCN. Uma
função de escalonamento é uma função lógica na qual os parâmetros são variáveis de
negócio da TCN. Cada função modela a execução de tarefas em runtime, i.e. para um
conjunto de variáveis de negócio, e respectivas asserções, a função indica se uma
tarefa ou tarefas estão agendadas para execução ou não. Para extrair um conjunto de
funções de escalonamento, é necessário em primeiro lugar mapear a TCN para uma
tabela de verdade (truth table). O mapeamento poderá ser alcançado da seguinte for-
ma:
• Para cada variável de negócio, determinar o número mínimo de bits nmb necessá-
rios para representar a variável. Representar cada bit com uma variável binária
distinta (por exemplo, ‘a’, ‘b’, ‘c’, ...). Por exemplo, a variável Signature da figu-
ra 2 tem um domínio com apenas dois valores (“Yes” e “No”), assim apenas um
bit é necessário para representar a variável. A variável Role tem um domínio com
três valores distintos, (“Researcher”, “Manager” e “User”), e assim sendo são
necessários dois bits para representar a variável de negocio;
• Criar um mapeamento entre o valor de cada variável e um número binário, come-
çado por ‘0’. Cada valor da variável de negócio tem bits nnb e pode ser represen-
tado por uma sequência de variáveis binárias, por exemplo, ‘ab’ ou ‘¬ab’ (o sím-
bolo ¬ indica a negação). Por exemplo, os valores do domínio da variável Signa-
ture, “Yes” e ”No”, podem ser ‘0’ e ‘1’, respectivamente. Os valores do domínio
da variável Role, “Researcher”, “Manager” e “User” podem ser ‘00’, ‘01’ e ‘10’,
respectivamente;
• Mapear os símbolos True ou False para o domínio lógico {0, 1}. O símbolo Fal-
se é mapeado para o ‘0’ e o True para o 1;
• Criar uma nova tabela utilizando os dois mapeamentos descritos anteriormente.
Uma vez realizado o mapeamento, é possível extrair as funções de escalonamento
da tabela de verdade. As funções extraídas são disjunções lógicas de conjunções de
variáveis de negócio. Dois métodos podem ser utilizados para gerar as funções: mapas
Karnaugh (Karnaugh 1953) e o método Quine-McCluskey (McCluskey 1956).
Na nossa implementação usamos o método Quine-McClusKey por ser um método
particularmente útil aquando da extracção de funções de escalonamento com um gran-
de número de variáveis de negócio. Adicionalmente, programas informáticos que
implementam este algoritmo foram desenvolvidos. A utilização desta técnica aumenta
o grau de automação da metodologia, sendo este um dos objectivos iniciais definidos.
A Tabela 2 mostra uma tabela de funções de escalonamento construída com base
na informação presente numa TCN. A tabela é composta de três variáveis binárias:
‘a’, ‘b’ e ‘c’.
Tabela 1. Tabela de escalonamento construída a partir de uma tabela de casos de negócio
Quando as funções de escalonamento são disjunções de conjunções, tarefas sinó-
nimo precisam de ser criadas. As tarefas sinónimas têm exactamente o mesmo com-
portamento e semântica, apenas diferem no nome. O número de disjunções na função
de execução indica o número de sinónimos a serem criados para cada tarefa. Cada
uma das disjunções é associada a uma tarefa sinónimo. Por exemplo, a tarefa Notify
tem a função de escalonamento (¬a ∧ ¬b) ∨ (¬a ∧ b ∧ c) ∨ (a ∧ ¬b ∧ c), por isso três
tarefas sinónimo são criadas: Notify_m, Notify_u e Notify_c. As funções de escalo-
namento são decompostas nos termos “¬a ∧ ¬b”, “¬a ∧ b ∧ c”, e “a ∧ ¬b ∧ c”, e cada
termo é associado a uma das tarefas sinónimo.
3.3 Identificar Estruturas de Blocos Básicas
Os sistemas de gestão de processos de negócio são centrados nos workflows, tendo
uma atenção especial na gestão da lógica do fluxo. A grande maioria das linguagens
de workflow são capazes de modelar blocos sequenciais, paralelos e condicionais que
são representados com estruturas standards tais como and-split, and-join, xor-split e
xor-join (Aalst, Barros et al. 2000). As actividades associadas aos blocos sequenciais
e paralelos são executados de uma maneira determinística, enquanto que os blocos
condicionais são exemplos de uma orientação não-determinística. Os blocos condicio-
nais indicam que o escalonamento das actividades depende da avaliação de uma con-
dição Booleana.
A terceira fase da nossa metodologia consiste na utilização das funções de escalo-
namento da fase anterior para identificar os blocos sequenciais, paralelos e condicio-
nais que irão constituir o workflow em desenvolvimento. Esta fase é composta por
duas grandes etapas:
• Identificar os blocos paralelos e sequenciais associados a um workflow;
• Organizar estes blocos utilizando as estruturas condicionais.
3.3.1 Identificar Estruturas Sequenciais e Estruturas Paralelas
O objectivo da primeira etapa é identificar estruturas paralelas e estruturas sequen-
ciais, e definir uma ordem parcial para as tarefas associadas com estas estruturas. Para
completar este ponto, as seguintes passos são realizadas:
1. Criar um conjunto S de conjuntos s, onde cada conjunto s contém todas as tare-
i i
fas com a mesma função de escalonamento,
2. Identificar e marcar cada conjunto s com a sua função de escalonamento,
i
3. Para cada conjunto s, estabelecer os blocos paralelos e sequenciais existentes, e
i
estabelecer uma ordem parcial para as actividades.
No primeiro passo, produzimos um conjunto S de conjuntos de escalonamento s,
i
onde cada conjunto s contém todas as tarefas com a mesma função de escalonamento.
i
A ideia é criar um conjunto de tarefas com a seguinte propriedade: se uma actividade
do conjunto s é escalonada em runtime, então todas as tarefas em s são também esca-
i i
lonadas. O segundo passo associa cada conjunto com um rótulo de função de escalo-
namento. Finalmente, o último passo estabelece os blocos sequenciais e os blocos
paralelos e define uma ordem parcial para cada conjunto s. Cada conjunto s pode ser
i i
organizado utilizando blocos sequencias e/ou paralelos.
A Figura 2 mostra como a aplicação Poseidon estrutura os conjuntos s de tarefas.
i
Cada conjunto está rotulado com uma função de escalonamento no canto superior
esquerdo e cada conjunto contém tarefas com a mesma função de escalonamento. Para