behavior was observed.
impact (i.e., forward) analysis from these source nodes. To
carry out this task accurately, we need to preserve only infor-
mation flows from source nodes; preserving dependencies
between all pairs of internal nodes is unnecessary.
Definition 5 (Source Dependence (SD) Preservation) A
reduction G(cid:48) of G is said to preserve source dependence iff
for every node v and a source node u:
• forward reachability from u@0 to v is preserved, and
• backward reachability of u from v@t is preserved at all t.
Note that SD coincides with FD applied to source nodes.
The second conditions are, in fact, identical. The first
conditions coincide as well, when we take into account that
NewAnc(u) = {0} for any source node u. (A source node
does not have any ancestors, but since we have defined
NewAnc to always include zero, NewAnc of source nodes
is always {0}.)
Fig. 5 shows a reduction that preserves SD but not FD. In
the figure, F and F(cid:48) are two distinct files, while S,S(cid:48) and S(cid:48)(cid:48)
denote three distinct processes. Note that FD isn’t preserved
because a new flow arrives at S(cid:48) at t = 2, and this flow can
reach F(cid:48) in the original graph but not in the reduced graph.
However, SD is preserved because the reachability of S, S(cid:48),
S(cid:48)(cid:48) and F(cid:48) from the source node F is unchanged.
S
1
4
F
2
S(cid:48)
5
F(cid:48)
3
6
S(cid:48)(cid:48)
3
S(cid:48)(cid:48)
S
1
4
F
2
S(cid:48)
F(cid:48)
Fig. 5: Source dependence preserving reduction.
Note that the first condition in Defn. 5 is redundant, as it
is implied by the second: If u is backward reachable from a
node v at t, then, by definition of backward reachability, there
exists a causal path from e1,e2,...,en from u to v. Since 0
is the smallest possible timestamp, 0 ≤ end(ei) for all i, and
hence, using the causal path e1,e2,...,en and the first part
of Defn. 2, we conclude u@0 −→ v, thus satisfying the first
condition. We also point out that the first condition does not
imply the second. To see this, note that if we only need to
preserve forward reachability from F@0 in Fig. 5, then we
can drop any two of the three edges coming into F(cid:48). However,
the backward reachability condition limits us to dropping
the edges from S(cid:48) and S(cid:48)(cid:48), as we would otherwise change
backward reachability of the source node F from F(cid:48)@4.
Despite being unnecessary, we kept the first condition
in Defn. 5 because its presence makes the forensic analysis
preservation properties of SD more explicit. (Unlike Defn. 5,
there is no redundancy in Defn. 4.)
1728    27th USENIX Security Symposium
USENIX Association
4 Efficient Computation of Reductions
Full dependence and source dependence reductions rely
on global properties of graph reachability. Such global
properties are expensive to compute, taking time that can
be linear in the size of the (very large) dependence graph.
Moreover, due to the use of timestamped edges, reachability
changes over time and hence must be computed many times.
This mutability also means that results cannot be computed
once and cached for subsequent use, unlike standard graphs,
where we can determine once that v is a descendant of u and
reuse this result in the future.
To overcome these computational challenges posed by
timestamped graph, we show how to transform them into
standard graphs. The basic idea is to construct a graph in
which objects as well as subjects are versioned. Versioning
is widely used in many domains,
including software
configuration management, concurrency control, file systems
[31, 26] and provenance [25, 24, 4, 29]. In these domains,
versioning systems typically intervene to create file versions,
with the goal of increased recoverability or reproducibility. In
contrast, we operate in a forensic setting, where we can only
observe the order in which objects (as well as subjects) were
accessed. Our goal is to (a) make sound inferences about
dependencies through these observations, and (b) encode
these dependencies in a standard (rather than time-stamped)
graph. This encoding serves as the basis for developing
efficient algorithms for log reduction. Specifically, this
section addresses the following key problems.
• Formally establishing that versioned graphs produce the
same forensic analysis results as timestamped graphs.
• Developing a suite of optimizations that reduce the
number of versions while preserving dependencies.
• Showing that our algorithms generate the optimal number
of versions while preserving FD or SD.
Using versioning, we realize algorithms that are both faster
and use less storage than their unversioned counterparts.
Specifically, we realize substantial reduction in the size of
the dependence graph by relying on versioning. Runtime
is also reduced because the reduction operations typically
take constant time per edge (See Section 6.6.1). In contrast,
a direct application of Defn. 4 on timestamped graphs would
be unacceptably slow4.
4.1 Naive Versioned Dependence Graphs
The simplest approach for versioning is to create a new
version of a node whenever it gets a new incoming edge,
similar to creating a new file version each time the file is
written. Fig. 6 shows an example of an unversioned graph
and its corresponding naive versioned graph. Versions of
a node are stacked vertically in the example so as to make
4In order to determine if an edge e is redundant, we would potentially
have to consider every path in the graph containing e; the number of such
paths can be exponential in the size of the graph.
it easier to see the correspondence between nodes in the
timestamped and versioned graphs.
Note that timestamps in versioned graphs are associated
with nodes (versions), not with edges. A version’s start time
is the start time of the event that caused its creation. We
show this time using a superscript on the node label.
F
2
S
3
5
F0
S0
S2
G
G0
G3
G5
4
6
T
5
T 0
T 4
T 6
Fig. 6: A timestamped graph and equivalent naive versioned graph.
4.1.1 Algorithm for naive versioned graph construction
We treat the contents of the audit log as a timestamped graph
G = (V,ET ). The subscript T on E is a reminder that the
edges are timestamped. The corresponding (naive) versioned
graph G = (V,E) is constructed using the algorithm shown
below. Without loss of generality, we assume that every edge
in the audit log has a unique timestamp and/or sequence
number. We denote a directed edge from u to v with
timestamp t as a triple (u,v,t). Let u<t denote the latest
version of u in the versioned graph before t.
for each (u,v,t) ∈ ET
1. BuildVer(V,ET )
2. V = {v0|v ∈ V}; E = {};
3.
4.
5.
6.
7.
add vt to V
add (u<t, vt) to E
add (v<t, vt) to E
return (V,E)
We intend BuildVer and its optimized versions to be online
algorithms, i.e., they need to examine edges one-at-a-time,
and decide immediately whether to create a new version, or
to add a new edge. These constraints are motivated by our
application in real-time attack detection and forensic analysis.
For each entity v, an initial version v0 is added to the
graph at line 2.5 The for-loop processes log entries (edges)
in the order of increasing timestamps. For an edge (u,v)
with timestamp t, a new version vt of the target node v is
added to the graph at line 4. Then an edge is created from the
latest version of u to this new node (line 5), and another edge
created to link the last version of v to this new version (line 6).
5This is a logical simplification — in reality, initial version of v will
be added to the graph at the first occurrence of v in the audit stream.
USENIX Association
27th USENIX Security Symposium    1729
4.1.2 Forensic analysis on versioned graphs
In a naive versioned graph, each object and subject gets split
into many versions, with each version corresponding to the
time period between two consecutive incoming edges to
that entity in the unversioned graph. To flag an entity v as
suspicious at time t, the analyst marks the latest version v≤t
of v at or before t as suspicious. Then the analyst can use
standard graph reachability in the versioned graph to perform
backward and forward analysis. For the theorem and proof,
we use the notation v<∞ to refer to the latest version of v
so far. In addition, we make the following observation that
readily follows from the description of BuildVer.
Observation 6 For any two node versions ut and us, there
is a path from ut to us if and only if s ≥ t.
Theorem 7 Let G = (V,E) be the versioned graph
constructed from G = (V,ET ). For all nodes u,v and times t:
• v is forward reachable from u@t iff there is a simple path
in G from u≤t to v<∞; and
• u is backward reachable from v@t iff there is a path in
G from u0 to v≤t.
Proof: For uniformity of notation in the proof,
let
t = t0,u = w0 and v = wn. The definition of reachability in
timestamped graphs (specifically, Definitions 1 and 2), when
limited to instantaneous events, states that w0@t −→ wn
holds in G if and only if there is a path
(w0,w1,t1),(w1,w2,t2),...,(wn−1,wn,tn)
i−1,wti
in G such that ti−1 ≤ ti for 1 ≤ i ≤ n. For each times-
tamped edge (wi−1,wi,ti), BuildVer adds a (standard) edge
(w<ti
i ) to G.
In addition, by Observation 6, there is
to w<ti+1
a path from wti
. Putting these edges and paths
i
together, we can construct a path in G from w<t0
to wtn
n .
0
n to w<∞
Also, by Observation 6, there is a path from wtn
.
n
Putting all these pieces together, we have a path from
w<t0
n = v<∞. A path from u<t0 to v<∞ clearly
0 = u<t0 to w<∞
implies a path from u≤t0 to v<∞, thus satisfying the “only
if” part of the forward reachability condition.
i
Note that the “only if” proof constructed a one-to-one
correspondence between the paths in G and G. This
correspondence can be used to establish the “if” part of the
forward reachability condition as well.
The proof of the backward reachability condition follows
the same steps as the proof of forward reachability, so we
omit the details.
4.2 Optimized Versioning and FD Preservation
Naive versioning is simple but offers no benefits in terms of
data reduction. In fact, it increases storage requirements. In
this section, we introduce several optimizations that reduce
the number of versions and edges. These optimizations
cause node timestamps to expand to an interval. A node v
with timestamp interval [t,s] will be denoted vt,s.
F0
F0
S0
S2
S0
S2
G0
G3
G5
G0
G3
T 0
T 4
T 6
T 0
T 4
F0
S0,2
G0,3
T 0,4
Fig. 7: The naive versioned graph from Fig. 6 (top), and the result of
applying redundant edge optimization (REO) (middle) and then redundant
node optimization (RNO) (bottom) to it. When adding the edge (S,G,5), we
find that there is already an edge from the latest version S2 of S to G, so we
skip this edge. For the same reason, the edge (G,T,6) can be skipped, and
this results in the graph shown in the middle. For the bottom graph, note that
when adding the edge (F,S,2), S has no descendants, so we simply update
S0 by S0,2, and avoid the generation of a new version. For the same reason,
we can update G0 and T 0 as well, resulting in the graph at the bottom.
4.2.1 Redundant edge optimization (REO)
Before adding a new edge between u and v, we check if
there is already an edge from the latest version of u to some
version of v. In this case, the new edge is redundant: in
particular, reachability is unaffected by the addition of the
edge, so we discard the edge. This also means that no new
version of v is generated. Specifically, consider the addition
of an event (u,v,t) to the graph. Let ur,s be the latest version
of u. We check if there is already an edge from ur,s to an
existing version of v. If so, we simply discard this event.
We leave the node timestamp unchanged. Thus, for a node
ur,s ∈ G, r represents the timestamp of the first edge coming
into this node, while s represents the timestamp of the last.
Alternatively, r denotes the start time of this version, while
s denotes the last time it acquired a new incoming edge (i.e.,
an edge that wasn’t eliminated by a reduction operation).
Fig. 7 illustrates redundant edge (REO) optimization.
4.2.2 Global Redundant Edge Optimization (REO*)
With REO, we check whether there is already a direct edge
from u to v before deciding to add a new edge. With global
redundant edge, we generalize to check whether u is an
ancestor of v. Specifically, before adding an event (u,v,t) to
the graph, we check whether the latest version of u is already
an ancestor of the latest version of v. If so, we simply discard
the event.
The condition in REO* optimization is more expensive to