(cid:18)(cid:18) a
(cid:19)
p
Lp(a) =
1
2
+ 1
(mod p).
We now deﬁne the corresponding pseudorandom function
(as in [44]) as
FLeg(bit)(k, x) = Lp(k + x)
for k, x ∈ Fp, where p ≈ 2λ is a public prime. The security
of this PRF is based on the following two problems:
Deﬁnition 1 (Shifted Legendre Symbol Problem). Let k be
uniformly sampled from Fp, and deﬁne OLeg to be an oracle
that takes x ∈ Fp and outputs(cid:0)k+x
(cid:1). Then the Shifted Leg-
p
endre Symbol (SLS) problem is to ﬁnd k, with non-negligible
probability.
Deﬁnition 2 (Decisional Shifted Legendre Symbol Prob-
lem). Let OLeg be deﬁned as above, and let OR be a ran-
dom oracle that takes values in Fp and produces outputs in
{−1, 1}. The Decisional Shifted Legendre Symbol (DSLS)
problem is to distinguish between OLeg and OR with non-
negligible advantage.
The following proposition is then immediate.
Proposition 1. The function FLeg(bit) is a pseudorandom
function if there is no probabilistic polynomial time algo-
rithm for the DSLS problem.
4.2 Hardness of the Shifted Legendre Symbol
Problem
(cid:16) k+x
(cid:17)
The SLS problem has received some attention from the
mathematical community, particularly in the quantum set-
ting. We brieﬂy survey some known results below.
A naive algorithm for deterministically solving the SLS
p and com-
problem is to compute
pare these with OLeg(x) for all x ∈ Fp, which requires ˜O(p2)
binary operations. Russell and Shparlinski [42] described a
more sophisticated algorithm using Weil’s bound on expo-
nential sums, which reduces this to ˜O(p).
for all (k, x) ∈ F2
p
Van Dam, Hallgren and Ip [44] described a quantum poly-
nomial time algorithm for the SLS problem that recovers the
secret k if the oracle can be queried on a quantum state.
They conjectured that classically, there is no polynomial
time algorithm for this problem. Russell and Shparlinski [42]
also extended this quantum algorithm to a generalization of
the problem where the secret is a polynomial, rather than
just a linear shift.
One can also consider another generalization called the
hidden shifted power problem, where the oracle returns (k +
x)e for some (public) exponent e|(p − 1). The SLS problem
is a special case where e = (p− 1)/2. Vercauteren [45] called
this the hidden root problem and described eﬃcient attacks
over small characteristic extension ﬁelds, with applications
to fault attacks on pairings-based cryptography. Bourgain
et al. [12] showed that if e = p1−δ for some δ > 0 then
this problem has classical query complexity O(1). Note that
neither of these attacks apply to the SLS problem, which
cannot be solved with fewer than Ω(log p) queries [43].
In conclusion, we are not currently aware of any classical
algorithms for the SLS problem in better than ˜O(p) time,
nor of any method for solving the DSLS problem without
ﬁrst recovering the secret. We note that unlike discrete log
and factoring, it is still an open question as to whether there
are even eﬃcient quantum algorithms if the SLS oracle can
only be queried classically.
4.3 Secure Computation of FLeg(bit)
It turns out that FLeg(bit) can be evaluated in MPC very
eﬃciently, at roughly the cost of just 2 multiplications in 3
rounds of communication. Although this only produces a
single bit of output, composing together multiple instances
in parallel with independent keys allows larger outputs to
be obtained (see later).
We ﬁrst describe how to evaluate FLeg(bit) when the output
is public, and then show how to extend this to secret-shared
output, with only a small cost increase.
Public output.
Suppose we have a shared, non-zero [a] and want to compute
the public output, Lp(a). Since the output is public, we
can simply take a random preprocessed non-zero square [s2],
compute [c] = [s2] · [a] and open c. By the multiplicativity
of the Legendre symbol, Lp(c) = Lp(a).
By composing the PRF n times in parallel, this gives an
n-bit output PRF that we can evaluate in MPC with just n
multiplications and n openings in two rounds. The prepro-
cessing requires n random squares and multiplication triples.
Shared output.
Now suppose we instead want shared output, [Lp(a)]. If we
have a random non-zero value [t], and also the shared value
[Lp(t)], then this is easy. Just open [a]· [t], and compute the
Legendre symbol of this to get c = Lp(a·t). The shared value
[Lp(a)] can then be computed locally using c and [Lp(t)], as
c is public.
Generating a random value with a share of its Legendre
symbol can be done very cheaply. Our key observation is
that we can do this without having to compute any Legendre
symbols in MPC. Let α ∈ Zp be a (public) quadratic non-
residue, and perform the following:
• Take a random square [s2] and a random bit [b].
• Output (2[b] − 1, [b] · [s2] + (1 − [b]) · α · [s2])
Note that since α is a non-square, the second output value
is clearly either a square or non-square based on the value
of the random bit b (which is mapped into {−1, 1} by com-
puting 2 · b − 1). Finally, note that since s2 provides fresh
randomness each time, α can be reused for every PRF eval-
uation. This gives us the protocol in Figure 7, which realizes
the functionality FABB-Leg shown in Figure 8. Notice that all
bar the computation of u can be performed in a preprocess-
ing phase if needed.
Protocol ΠLegendre
Let α be a ﬁxed, quadratic non-residue modulo p.
KeyGen: Call FABB.Random to generate a random key [k].
Eval: To evaluate FLeg(bit) on input [x] with key [k]:
1. Take a random square [s2] and a random bit [b]
2. [t] ← [s2] · ([b] + α · (1 − [b]))
3. u ← Open([t] · ([k] + [x]))
4. Output [y] ← ((cid:0)u
(cid:1) · (2[b] − 1) + 1)/2
p
Figure 7: Securely computing the FLeg(bit) PRF with
secret-shared output
Security.
At ﬁrst glance, the security of the protocol appears straight-
forward: since t and k are uniformly random, the opened
value u should be simulatable by a random value, and this
will be correct except with probability 1/p (if s2 = 0). How-
ever, proving this turns out to be more tricky. We need to
take into account that if x = −k then the protocol causes
u = 0 to be opened, but in the ideal world the simulator
does not know k so cannot simulate this. This reﬂects the
fact that an adversary who solves the SLS problem can ﬁnd
k and run the protocol with x = −k. Therefore, we need
to assume hardness of the SLS problem and show that any
environment that distinguishes the two worlds (by causing
x = −k to be queried) can be used to recover the key k. The
reduction must use the SLS oracle, OLeg, to detect whether
x = −k, in order to simulate the u value to the environment.
To do this, they simply obtain the value y =(cid:0)x+k
(cid:1) from OLeg
and check whether y = 0, for each Eval query made by the
adversary.
p
Functionality FABB-Leg
This functionality has all of the same commands as FABB, plus
the following:
KeyGen: On receiving (keygen) from all parties, sample
R← Fp and store k.
k
PRF: On receiving (legendre, [x]) from all parties, where x
is stored in memory, compute y = Lp(x + k) and store y
in memory.
Figure 8: Ideal functionality for the Legendre sym-
bol PRF, FLeg(bit)
Theorem 2. The protocol ΠLegendre securely computes the
functionality FABB-Leg in the FABB-hybrid model, if the SLS
problem is hard.
Proof. We construct a simulator S such that no environment
Z corrupting up to n − 1 parties can distinguish between
the real protocol ΠLegendre, and S interacting with the ideal
functionality FABB-Leg.
In the KeyGen stage, S simply calls FABB-Leg with the
keygen command. In the Eval stage, the main task of S is
to simulate the opened value u, which is done by sampling
u R← Fp, and then call FABB-Leg with (legendre, [x]).
We now argue indistinguishability of the two executions.
In the real world, since t is computed as s2 · (b + (1 − b) · α)
for a uniform quadratic residue s2 and random bit b, then
t is uniform in Fp. This is because the map deﬁned by
multiplication by α is a bijection between the sets of squares
and non-squares modulo p. Therefore, if s2 is a uniformly
random square, then α·s2 is a uniformly random non-square.
Now, since t is a fresh uniformly random value on each
evaluation, the real world value u and output y, as seen
by Z, will be identically distributed to the simulated values
as long as k + x (cid:54)= 0 and s (cid:54)= 0. Whenever the former
happens in the real world u = 0 is opened, whereas the ideal
world still simulates a random value, so the environment can
distinguish. In the latter case, s = 0, the output y will be
incorrectly computed in the real world, but this can only
happen with probability 1/p.
However, any environment Z that causes k+x = 0 to hap-
pen with non-negligible probability can be used to construct
an algorithm A∗ that breaks the SLS problem, as follows.
A∗ runs Z, emulating a valid execution of ΠLegendre by
replacing Lp(x + k) computation with calls to OLegk . These
modiﬁed transcripts have the same distribution since the
SLS oracle and (keygen) both generate a random key. When
A∗ runs Z internally, it knows the inputs provided by Z
to all parties, so knows the x value on each invocation of
ΠLegendre. Once Z constructs a query for which OLegk returns
0 then A∗ responds to the SLS challenge with k = −x.
Finally, the algorithm looks like this:
1. Interact with Z as the simulator S would do.
2. Instead of computing the Legendre symbol Lp(x + k)
as in FABB-Leg, make a call to OLegk .
3. If OLegk (x) = 0, return −x as the SLS secret.
The only way Z can distinguish between S and ΠLegendre
— except with probability 1/p — is by producing a query x
for which OLegk (x) = 0, since the two worlds are statistically
close up until this point. If Z can do this with probability 
then the probability that A∗ solves the SLS problem is the
same.
Overall, S correctly simulates the protocol ΠLegendre as long
as u (cid:54)= 0, which happens with probability ≤ 1/p +  (s = 0
or solving SLS with probability ).
Perfect Correctness.
The basic protocol above is only statistically correct, as
s2 = 0 with probability 1/p, and if this occurs the output
will always be zero. Although this suﬃces for most appli-
cations, we note that perfect correctness can be obtained,
at the expense of a protocol that runs in expected constant
rounds. We can guarantee that the square s2 is non-zero by
computing it as follows:
• Take a random square [s2] and a random value [y].
• Compute [v] = [y· s2] and open v. If v = 0 then return
to the ﬁrst step.
Note, that the iteration of the ﬁrst step only happens if y = 0
or s = 0, which occurs with probability 2/p, so the expected
number of rounds for this stage of the protocol is one.
4.4 Domain and Codomain Extension
Some applications may require a PRF which takes multi-
ple ﬁnite ﬁeld elements as input, and outputs a ﬁnite ﬁeld
element. We now present how to extend the basic PRF
FLeg(bit) to a function which takes messages consisting of n
ﬁnite ﬁeld elements and outputs a single uniformly random
ﬁnite ﬁeld element. Indeed our input could consist of up to
t elements in the ﬁnite ﬁeld where t ≤ n. In practice we will
take n = 1 or 2, and can then extend to larger lengths using
CBC-mode or Merkle-Damg˚ard (as in Section 1.5).
We ﬁrst deﬁne a statistical security parameter 2−stat, which
bounds the statistical distance from uniform of the output
of our PRF. We let deﬁne p(cid:48) to be the nearest power of two
to the prime p and set α = |p − p(cid:48)|. Then if α/p < 2−stat
we set (cid:96) = (cid:100)log2 p(cid:101), otherwise we set (cid:96) = (cid:100)log2 p(cid:101) + stat. A
standard argument will then imply that the following PRF
outputs values with the correct distribution.
The key for the PRF is going to be an (cid:96)×(n+1) matrix K
of random elements in Fp, except (for convenience) that we
ﬁx the ﬁrst column to be equal to one. To apply the PRF to
a vector of elements x = (x1, . . . , xt) we “pad” x to a vector
of n + 1 elements as follows x(cid:48) = (x1, . . . , xt, 0, . . . , 0, t) and
then product the matrix-vector product y = K · x(cid:48) ∈ (Fp)(cid:96).
The output of FLeg(n) is then given by
FLeg(n)(K, x) =
2i · Lp(yi)
(mod p).
(cid:33)
(cid:32)(cid:96)−1(cid:88)
i=0
This extended PRF requires one extra round of (cid:96) · (n − 1)
secure multiplications compared to FLeg(bit).
Since the matrix K is compressing, the distribution of
y will act, by the leftover hash lemma, as a random vec-
p. With probability (cid:96)/p we have yi (cid:54)= 0 for all i,
tor in F(cid:96)
which implies that the values of Lp(yi) behave as uniform
random bits, assuming our previous conjectures on the Leg-
endre symbol. Thus the output value of FLeg(n)(K, x) will,
by choice of (cid:96), have statistical distance from uniform in Fp
bounded by 2−stat.
Our choice of padding method, and the choice of the ﬁrst
matrix column to be equal to one, is to ensure that in the
case of n = 1 we have
(cid:33)
(cid:32)(cid:96)−1(cid:88)
FLeg(n)(K, x) =
2i · FLeg(bit)(ki, yi)
(mod p).
i=0
In addition the padding method ensures protection against
length extension attacks.
4.5 Performance
We measured performance using the prime p = 2127 +
45, which implied for FLeg(n) we could take (cid:96) = 128. Both
FLeg(bit) and FLeg(1) obtain very low latencies (0.35ms and
1.2ms over LAN, respectively) due to the low number of
rounds. For a PRF with small outputs, FLeg(bit) achieves by
far the highest throughput, with over 200000 operations per
second. For full ﬁeld element outputs, FLeg(1) is around 128
times slower, but still outperforms AES in all metrics except
for cleartext computation.
5. MIMC
5.1 FMiMC Deﬁnition