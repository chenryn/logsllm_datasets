# Salesforce and Cloud Computing: An Overview and Security Analysis

## Multi-tenant Architecture
- **Shared Infrastructure**: Customers share the underlying infrastructure.
- **Global Distribution**: Resources are spread across the world, providing a global reach.

## Subscription Model
- **Scalable Pricing**: Costs scale with features and per-license usage.
- **Free Developer Accounts**: These accounts offer more limited capabilities compared to paid-for organizations.

## AppExchange
- **Third-Party Applications**: Similar to an app store, it provides a marketplace for third-party applications.

## Primary Components
- **Custom HTML Pages**: Written in VisualForce, a custom language.
- **Business Logic**: Implemented using Apex, a Java-like language.
- **Data Storage**:
  - **SOQL (Salesforce Object Query Language)**: For querying data.
  - **SOSL (Salesforce Object Search Language)**: For searching data.
- **Development Environment**: Typically done in a browser or in Eclipse with a plugin.

## Additional Language Features
- **HTTP Requests**: Can be made from within the application.
- **Web Service Integration**: Classes can be bound to web service endpoints.
- **Email Capabilities**: Can send emails and bind classes to email endpoints.
- **Triggers**: Can be configured on datastore activities.

## Challenges of Multi-tenancy
- **Resource Sharing**: An inherent problem in multi-tenant environments.

## The Governor
- **Execution Limits**: Each script execution is subject to strict limits.
- **Exception Handling**: An uncatchable exception is issued when limits are exceeded.
- **Limits Based on Entry Point**: Different entry points have different limits.
- **Namespace-Specific Limits**: Organizations get specific limits.

### Published Limits
1. Number of script lines
2. Number of queries
3. Size of returned datasets
4. Number of callouts
5. Number of sent emails
6. ...

### Unpublished Limits
1. Number of received emails
2. Running time
3. Other unknown limits

## Apex Limitations
- **Short Execution Bursts**: The language is designed for short bursts of execution.
- **Limited Configuration Changes**: Requires web interface interactions for configuration changes.
- **APIs and Parallel Programming**: Limited parallel programming primitives, no explicit locks, and very broad synchronization, no real threads.

## Workarounds
- **Delays**: Introducing delays to manage execution.
- **Synchronization**: Using synchronization mechanisms.
- **Shared Memory**: Utilizing shared memory.
- **Triggers**: Configuring triggers.
- **Threads**: Exploring thread-like behavior.

## Bypassing the Governor
- **Event Loops**: Focused on creating event loops to increase usage beyond permitted limits.
- **Initial Attempts**: Tried using callout features, web services, and VisualForce pages.
- **Email-Based Solution**: Settled on using email to achieve multiple rounds of execution with a single user action.

## Sifto!
- **Example**: Ported Nikto into the cloud as a simple example.
- **Process**:
  - Class adds allowed endpoint through HTTP calls to the Salesforce web interface.
  - Event loop is kicked off against the target.
  - Each iteration performs ten tests.
  - State is inserted into the datastore at the end of ten tests.
  - A trigger object is inserted to fire off an email for the next iteration.

### Pros and Cons
- **Pros**:
  - Faster with more bandwidth.
  - Free.
  - Greater capacity for DoS attacks compared to home users.
- **Cons**:
  - Prone to monitoring.
  - Custom language and platform.
  - Technique governed by email limits.

## Sharding
- **Account Limits**: Accounts have limits.
- **Zero-Cost Accounts**: Accounts are free.
- **Communication**: Accounts can communicate.
- **Chaining Accounts**: Chaining accounts to bypass limits.
- **CAPTCHA Protection**: Not a significant issue.
- **Multiple Accounts**: Acquired 200+ accounts.

## Future Directions
- **Basic POC**: Sifto hints at possibilities, but the API is limited.
- **Platform Development**: Rapid development will introduce new possibilities.
  - Callouts in triggers for event loops.
  - Reduction in limitations.
  - Improvements in language and APIs.

## Amazon Web Services (AWS)
- **Components**:
  - EC2: Root access to a Linux machine in seconds, scalable costs.
  - S3: Simple storage service, highly available and durable, pay-as-you-go pricing.
  - SQS: Queue service for producer-consumer models.

### Scaling Registration
- **Time**: Time required to scale registration.
- **Graph**: Slav graph indicating the time and number of machines.

## Stealing Machine Time
- **Bundling Images**: Bundle an image and register it.
- **AMI-ID Assignment**: Wait for someone to run it and profit.
- **Challenges**: Issues with registering popular images like Fedora, RedHat, etc.

## Mobile Me
- **Apple's Cloud Service**: Apple's move into the cloud, including iDisk, iMail, iCal, and findmyPhone.
- **Security Issues**: Account name leakage, password reset vulnerabilities, and potential trojans in the stack.

## Conclusions
- **New Problems and Solutions**: New challenges and solutions with on-demand computing power.
- **Infrastructure and Web Applications**: Marrying infrastructure with web applications means that your enterprise now faces new security and operational challenges.

## Questions?
- **Resources**: Videos, slides, and tools available at [SensePost Blog](http://www.sensepost.com/blog/).

This revised version aims to provide a clearer, more structured, and professional overview of the topics discussed.