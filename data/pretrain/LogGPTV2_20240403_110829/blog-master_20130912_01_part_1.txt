## systemtap probe point's "context variables" or "target variables"  
### 作者                                                                                 
digoal                                                                                 
### 日期                                                                                 
2013-09-12                                                                               
### 标签                                                                                 
PostgreSQL , Linux , systemtap , stap , dtrace , probe                         
----                                                                                 
## 背景                          
在systemtap language reference手册的第三章有这么一段话 :   
The probe handler is interpreted relative to the context of each event. For events associated with kernel code, this context may include variables defined in the source code at that location. These target variables (or ``context variables'') are presented to the script as variables whose names are prefixed with a dollar sign ($). They may be accessed only if the compiler used to compile the kernel preserved them, despite optimization. This is the same constraint imposed by a debugger when working with optimized code. Other events may have very little context.  
前面已经接触过类似的话题, 例如通过$$vars来输出probe points对应的target variables.  
参考下文第二部分.  
http://blog.163.com/digoal@126/blog/static/163877040201381044416754/  
本文将对context variables做一次详细的分析. 主要来自stapprobes的man手册(本文末尾).  
下面要介绍一下本文的测试事件例子.  
用到的事件是kprocess.create  
```  
[root@db-172-16-3-39 ~]# stap -l 'kproce**'  
kprocess.create  
```  
对应的函数  
```  
[root@db-172-16-3-39 ~]# grep -r kprocess.create /usr/share/systemtap/  
/usr/share/systemtap/tapset/kprocess.stp: * probe kprocess.create - Fires whenever a new process or thread is successfully created  
/usr/share/systemtap/tapset/kprocess.stp:probe kprocess.create = kernel.function("copy_process").return {  
```  
对应的代码  
```  
[root@db-172-16-3-39 ~]# stap -l 'kernel.function("copy_process")'  
kernel.function("copy_process@kernel/fork.c:1107")  
```  
源文件如下  
/usr/src/debug/kernel-2.6.18/linux-2.6.18-348.12.1.el5.x86_64/kernel/fork.c  
对应的函数如下(截取部分内容)  
```  
static struct task_struct *copy_process(unsigned long clone_flags,  
                                        unsigned long stack_start,  
                                        struct pt_regs *regs,  
                                        unsigned long stack_size,  
                                        int __user *parent_tidptr,  
                                        int __user *child_tidptr,  
                                        int pid)  
{  
        int retval;  
        struct task_struct *p = NULL;  
 ... 略去部分内容  
```  
源文件中定义的全局变量如下, 在测试 @var("varname@src/file.c") 时用到  
```  
/*  
 * Protected counters by write_lock_irq(&tasklist_lock)  
 */  
unsigned long total_forks;      /* Handle normal Linux uptimes. */  
int nr_threads;                 /* The idle threads do not count.. */  
int max_threads;                /* tunable limit on nr_threads */  
```  
下面对手册中描述的用法举例说明.  
1\. $var, 这个很好理解, 就是输出probe point所在范围内的变量值. 如果是int类型的将输出64位数字, 如果是char *类型, 则可以使用kernel_string或者user_string函数输出该地址对应的字符串.  
如果不是数字也不是字符串, 可以用@cast进行转换.  
测试用到$pid. 它是int类型  
```  
[root@db-172-16-3-39 ~]# cat test.stp   
probe kprocess.create {  
  printf("%d\n", $pid)  
  exit()  
}  
[root@db-172-16-3-39 ~]# stap test.stp   
18498  
```  
字符串类型参考此文, 这里就不举例了.  
http://blog.163.com/digoal@126/blog/static/16387704020138352516878/  
2\. @var("varname") 与$var一样的效果.  
```  
[root@db-172-16-3-39 ~]# cat test.stp   
probe kprocess.create {  
  printf("%d, %d\n", $pid, @var("pid"))  
  exit()  
}  
[root@db-172-16-3-39 ~]# stap test.stp   
18756, 18756  
```  
如果使用了一个不存在的本地变量, 那么会打印出可选的本地变量  
```  
[root@db-172-16-3-39 ~]# stap --vp 5 test.stp   
Parsed kernel "/lib/modules/2.6.18-348.12.1.el5/build/.config", containing 1977 tuples  
Parsed kernel /lib/modules/2.6.18-348.12.1.el5/build/Module.symvers, which contained 3546 vmlinux exports  
Searched: " /usr/share/systemtap/tapset/x86_64/*.stp ", found: 4, processed: 4  
Searched: " /usr/share/systemtap/tapset/*.stp ", found: 81, processed: 81  
Pass 1: parsed user script and 85 library script(s) using 146808virt/23700res/3008shr/21404data kb, in 160usr/10sys/172real ms.  
semantic error: unable to find local 'current' near pc 0xffffffff8001f5c0 in copy_process kernel/fork.c ( (alternatives: $clone_flags $stack_start $regs $stack_size $parent_tidptr $child_tidptr $pid $retval $p): identifier '$current' at test.stp:2:20  
        source:   printf("%d, \n", $current[1])  
                                   ^  
Pass 2: analysis failed.  Try again with another '--vp 01' option.  
```  
3\. @var("varname@src/file.c")  
输出事件触发时, 该源文件的全局变量的值.  
```  
[root@db-172-16-3-39 ~]# cat test.stp   
probe kprocess.create {  
  printf("%d, %d\n", $pid, @var("pid"))  
  printf("global variables in fork.c: %d, %d, %d\n", @var("max_threads@kernel/fork.c"), @var("total_forks@kernel/fork.c"), @var("nr_threads@kernel/fork.c"))  
  exit()  
}  
[root@db-172-16-3-39 ~]# stap test.stp   
18896, 18896  
global variables in fork.c: 127569, 6473035, 254  
```  
如果使用了一个不存在的全局变量, 会打印出可选的全局变量 :   
```  
[root@db-172-16-3-39 ~]# stap --vp 5 test.stp   
Parsed kernel "/lib/modules/2.6.18-348.12.1.el5/build/.config", containing 1977 tuples  
Parsed kernel /lib/modules/2.6.18-348.12.1.el5/build/Module.symvers, which contained 3546 vmlinux exports  
Searched: " /usr/share/systemtap/tapset/x86_64/*.stp ", found: 4, processed: 4  
Searched: " /usr/share/systemtap/tapset/*.stp ", found: 81, processed: 81  
Pass 1: parsed user script and 85 library script(s) using 146872virt/23700res/3008shr/21468data kb, in 160usr/10sys/171real ms.  
semantic error: unable to find global 'current' in kernel/fork.c kernel/fork.c ( (alternatives: $console_printk $hex_asc $_cpu_pda $cpu_possible_map $cpu_online_map $mmu_cr4_features $boot_cpu_data $node_data $mp_ioapics $skip_ioapic_setup $cpu_callout_map $bios_cpu_apicid $memnode $mem_section $malloc_sizes $vm_area_cachep $files_cachep $fs_cachep $sighand_cachep $xtime $time_status $time_maxerror $time_esterror $time_adjust $leap_second $jiffies $per_cpu__rcu_data $per_cpu__rcu_bh_data $total_forks $nr_threads $per_cpu__process_counts $tasklist_lock $mmlist_lock $root_user $init_task $init_mm $vfsmount_lock $policy_zone $dcache_lock $irq_desc $mm_tracking_struct $init_level4_pgt $__supported_pte_mask $pgd_lock $pgd_list $protection_map $zone_table $per_cpu__vm_event_states $vm_stat $swapper_space $number_of_cpusets $mmap_min_addr $security_ops $swap_token_mm $anon_vma_cachep $ioport_resource $bad_dma_address $dma_ops $genl_sock $taskstats_cache $delayacct_on $delayacct_cache $idt_table $cpu_gdt_descr $max_threads $__crc_tasklist_lock $__kcrctab_tasklist_lock $__kstrtab_tasklist_lock $__ksymtab_tasklist_lock $mm_flags_hash $mm_flags_lock $task_struct_cachep $signal_cachep $mm_cachep $__crc_free_task $__kcrctab_free_task $__kstrtab_free_task $__ksymtab_free_task $__crc___put_task_struct $__kcrctab___put_task_struct $__kstrtab___put_task_struct $__ksymtab___put_task_struct $init_task_aux $default_dump_filter $__setup_str_coredump_filter_setup $__setup_coredump_filter_setup $__crc_mmput $__kcrctab_mmput $__kstrtab_mmput $__ksymtab_mmput $__crc_get_task_mm $__kcrctab_get_task_mm $__kstrtab_get_task_mm $__ksymtab_get_task_mm $__crc_copy_fs_struct $__kcrctab_copy_fs_struct $__kstrtab_copy_fs_struct $__ksymtab_copy_fs_struct $__crc_unshare_files $__kcrctab_unshare_files $__kstrtab_unshare_files $__ksymtab_unshare_files $console_printk $hex_asc $_cpu_pda $cpu_possible_map $cpu_online_map $mmu_cr4_features $boot_cpu_data $node_data $mp_ioapics $skip_ioapic_setup $cpu_callout_map $bios_cpu_apicid $memnode $mem_section $malloc_sizes $vm_area_cachep $files_cachep $fs_cachep $sighand_cachep $xtime $time_status $time_maxerror $time_esterror $time_adjust $leap_second $jiffies $per_cpu__rcu_data $per_cpu__rcu_bh_data $total_forks $nr_threads $per_cpu__process_counts $tasklist_lock $mmlist_lock $root_user $init_task $init_mm $vfsmount_lock $policy_zone $dcache_lock $irq_desc $mm_tracking_struct $init_level4_pgt $__supported_pte_mask $pgd_lock $pgd_list $protection_map $zone_table $per_cpu__vm_event_states $vm_stat $swapper_space $number_of_cpusets $mmap_min_addr $security_ops $swap_token_mm $anon_vma_cachep $ioport_resource $bad_dma_address $dma_ops $genl_sock $taskstats_cache $delayacct_on $delayacct_cache $idt_table $cpu_gdt_descr $max_threads $__crc_tasklist_lock $mm_flags_hash $mm_flags_lock $__crc_free_task $__crc___put_task_struct $__crc_mmput $__crc_get_task_mm $__crc_copy_fs_struct $__crc_unshare_files): identifier '@var' at test.stp:2:20  
        source:   printf("%d, \n", @var("current@kernel/fork.c")[1])  
                                   ^  
Pass 2: analysis failed.  Try again with another '--vp 01' option.  
```  
4\. $var->field  
在源文件中除了数字和字符串, 还有其他类型, 例如结构, 指针等. 这些类型中的member或field可以通过$var->field来输出.  
注意由于.点符号在systemtap中是字符串的连接符号,  所以结构的member也使用->来表示, 而不是.点符号.  
```  
[root@db-172-16-3-39 ~]# cat test.stp   
probe kprocess.create {  
  printf(".is string's concat operator : %s\n", "i" . " am digoal")  
  exit()  
}  
[root@db-172-16-3-39 ~]# stap test.stp   
.is string's concat operator : i am digoal  
```  
取结构中的数据,本例的copy_process的返回值类型为static struct task_struct *  
结构中包含pid, wchar, rchar, utime等值, 下面stp脚本可以取到.  
```  
[root@db-172-16-3-39 ~]# cat test.stp  
probe kprocess.create {  
  printf("pid:%d, pid:%d, rchar:%d, wchar:%d, utime:%d, mempolicy:%d\n", $pid, $return->pid, $return->rchar, $return->wchar, $return->utime, $return->mempolicy)  
  exit()  
}  
[root@db-172-16-3-39 ~]# stap test.stp   
```  
然后开启一个进程.  
```  
[pg94@db-172-16-3-39 ~]$ psql  
psql (9.4devel)  
Type "help" for help.  
digoal=#   
```  
可以看到 stap返回值 :   
```  
pid:7402, pid:7402, rchar:0, wchar:0, utime:0, mempolicy:0  
```  
如果指定了一个结构中不存在的member, 那么会返回可选的member :   