information about the compatibility of the dependency’s update. In
case an update to the latest version is incompatible, developers are
provided with two options: either they can update to the latest com-
patible version without having to adjust their app’s code; or they
can update to the latest version and Up2Dep provides them with in-
formation about which library APIs have changed and recommends
changes to their existing app code. Additionally, Up2Dep leverages
information about publicly disclosed vulnerabilities of libraries and
detected cryptographic misuse in Android third-party libraries to
warn developers against using insecure versions of dependencies.
Figure 1 illustrates how the different components of Up2Dep in-
teract with each other. Using LibScout [7] and Cognicrypt [29], we
feed Up2Dep the pre-analysis results consisting of API dependency
analysis (from LibScout) and cryptographic API misuse analysis
(from Cognicrypt). These pre-analyses results are bundled into of-
fline databases. This allows Up2Dep to provide developers real time
feedback as it does not need to repeatedly analyze all version his-
tory of the third-party libraries that developers include into their
applications, which might incur unnecessary performance over-
head. More importantly, Up2Dep does not need to send developer’s
code or all library information to its server as this would potentially
threaten the privacy of developers and their code. After developers
open a project in their Android Studio, Usages Analyzer will read
the Android Source Code to analyze it for usages of the included
third-party libraries. Whenever developers open a gradle build file
(i.e., where dependencies are specified, see Appendix B), Remote
Dependency Inspector will run its inspection to check for outdated
library versions. Finally, Dependency Resolver takes the results of
LibScoutCognicryptRemoteDependencyInspectorDependencyResolverUsagesAnalyzerbuild.gradleCodeEditorAppSourceCode265ACSAC 2020, December 7–11, 2020, Austin, USA
Duc Cuong Nguyen, Erik Derr, Michael Backes, and Sven Bugiel
Dependency Inspector and Usages Analyzer to compare them against
the pre-analysis results to gather the following information:
• Are there newer versions of the included library?
• To which extent can the included library be upgraded, e.g, is
there any incompatibility, where is the incompatibility, how
can the app code be adjusted?
• Does the included library contain any security vulnerabili-
ties, and does the developer’s code happen to use this poten-
tially insecure code?
We will now describe each component of Up2Dep in details.
3.1 Analysis Tools
As mentioned above, Up2Dep collects information about third-party
libraries using existing analysis tools.
LibScout. We provide developers information about the API
3.1.1
of third-party libraries that they include in their apps. In particular,
we notify developers if they can upgrade a library to the latest
version or if the newer version would be API-incompatible with
the existing app code. Hence, we need to analyze the library his-
tory to find out if any of the used library APIs have changed in
newer versions of the library. When such changes occur, we provide
developers with further information on how they can adapt their
existing code so that it will be compatible to the newer version of
the library. To this end, we leverage the open-source tool LibScout
to produce API information for each library version in our dataset.
Library API database: The last version (2.3.2) of LibScout con-
tains a dataset of around 250 libraries. In this work, we build on
and extend the library database of LibScout. In particular, a library
on a third-party repository would usually come with a descriptive
file, e.g., pom.xml, and we analyze those files to discover transitive
dependencies of the libraries in the LibScout database. A transitive
dependency is another library on which the library included by the
app developer depends. For instance, the Facebook Login Android
Sdk library version 4.40.0 declares three transitive dependencies
in its pom.xml file: Android AppCompat Library V7, Facebook Core
Android SDK, Facebook Common Android SDK. To obtain a list of pop-
ular third-party libraries that developers commonly include in their
projects, we crawl the F-Droid repository [6] to extract libraries
included in open source apps. In the end, we have a dataset of 1,878
libraries with their version history. We also extend LibScout’s list
of publicly disclosed vulnerabilities of third-party libraries. As of
July 2019, our list contains 10 libraries with a total of 97 vulnerable
library versions.
Determining API Compatibility: To determine the API com-
patibility between any consecutive library versions, we use the API
diff algorithm of LibScout that operates on two sets of public APIs
apiold and apinew, where apiold is the API set of the immediate pre-
decessor version of apinew. An API is presented by its signature that
consists of package and class name as well as the list of argument
and return type, e.g. example.com.ClassB.foobar()java.lang.String.
If apiold = apinew two versions are consider compatible. If apiold ⊈
apinew , the newer version has added new APIs but did not remove
or change any existing ones. This is also considered as compatible
(backwards). Whenever apiold includes APIs that are not included
in apinew, a type analysis is conducted to check for compatible
Figure 2: Top 10 cryptographic API misuses by Java classes
in our library dataset.
counterparts in apinew. Compatible changes also include general-
ization of argument types, e.g., an argument with type String is
replaced by its super type Object. Generalization on return types is
normally not compatible and depends on the actual app code that
uses the return value. If any of the apiold is not found in the set of
apinew, we consider 2 versions incompatible.
3.1.2 CogniCrypt. We employ the static analysis component of
Cognicrypt, namely CogniCrypt_sast, to discover insecure uses
of cryptographic APIs within the libraries in our dataset. Cog-
niCrypt_sast takes rules written in the CRYSL language, which
define best-practice for secure use of cryptographic APIs, and ana-
lyzes Java applications to find any potential violations of the prede-
fined rules.
We choose Cognicrypt instead of other tools, such as [18, 20, 43],
because Cognicrypt and CRYSL are publicly available and provide the
flexibility in defining cryptographic rules while other tools mostly
provide hard-coded rules, which are not easy to extend. Besides,
Cognicrypt provides more comprehensive rules that result in three
times more identified cryptographic violations in comparison to
previous work [20], and the analysis finishes on average in under
three minutes per application. More importantly, Cognicrypt lever-
ages serveral extensions [13, 31] of the program analysis framework
Soot [45], which performs intra- and inter-procedural static analy-
sis that gives Cognicrypt and CRYSL a high precision (88.95%) and
recall (93.1%).
Cognicrypt’s rule set [30] includes 23 rules covering Java classes
involving cryptographic key handling as well as digital signing. All
rules are available on Github [5]. Beside the these rules, we have
also written an additional rule for http (to check whether a library
uses http instead of https to communicate with a server)
Cryptographic API misuse dataset: We apply Cognicrypt to
our dataset consisting of 1,878 libraries. We are able to analyze
1,725 (91.9%) libraries. It took Cognicrypt more than 3 hours to
02000400060008000Number of misuseMessageDigestCipherSSLContextSecretKeySpecDigestInputStreamSignatureKeyStoreIvParameterSpecCipherInputStreamAlgorithmParameters35.0%17.6%15.3%10.4%9.1%5.0%3.3%1.5%1.5%1.4%266Up2Dep: Android Tool Support to Fix Insecure Code Dependencies
ACSAC 2020, December 7–11, 2020, Austin, USA
analyze the remaining 153 libraries and we terminated Cognicrypt
when processing a library exceeded 3 hours2. Among the 1,725
libraries, 238 (13.80%) contain at least one cryptographic API mis-
use, and 70 of those affected libraries (29.41%) have fixed/removed
the cryptographic misuse in their later versions. This means that,
developers could easily avoid such (vulnerable) cryptographic API
misuse by upgrading their project’s dependencies to the latest ver-
sion. Figure 2 lists the distribution of the cryptographic API misuse
of the libraries in our dataset. The list is headed by MessageDigest
(35.0% of the top 10 misuses). One of the reasons why MessageDi-
gest has a significantly higher number of misuse is that to use
it securely, developers (suggested by the Java Cryptography Ar-
chitecture Standard) must apply a sequence of method calls, e.g,
MessageDigest.getInstance(algorithmName) followed by Message-
Digest.update(input), followed by MessageDigest.digest(), etc., com-
bined with minimum required length for the offset of the update
method. This does not seem trivial to follow. In general, for Java
classes such as MessageDigest, SSLContext, and Cipher, developers
need to specify an algorithm or a protocol to work with and library
developers often use an algorithm or mode of encryption that is
considered insecure, such as ECB mode for encryption, or MD5 or
SHA-1 for hashing. This puts these classes of misuse among the
most common cryptographic API misuses in third-party libraries.
Further, we have found 20 cases where the libraries (spanning across
93 library versions) use http to communicate with remote servers.
3.2 Remote Dependency Inspector
Android Studio is built on Jetbrain’s IntelliJ IDEA software. How-
ever, the major challenge is the implementation of an Android
Studio extension for Up2Dep as it is not well supported and very
few documentation is available. To learn how the internal system
of Android Studio works, we have to manually read Android Studio
source code and examine its APIs (e.g., dynamically run and test
them) as well as use reflection to access its internal (private) API to
enable the crucial functionality of Up2Dep. To effectively inspect
an Android project’s dependency, we need to implement a custom
code inspection. With the gradle build system, Android developers
need to declare their project’s or module’s dependencies (libraries)
in a gradle build file (see Appendix B.1). This file is written in the
Groovy language. This means we need to write an inspection that is
able to analyze Groovy code. IntelliJ IDEA provides an abstract class
called GroovyElementVisitor that offers plugin authors the options
to analyze varieties of Groovy code fragments. For every Groovy-
CodeBlock, Up2Dep looks for a dependencies tag and iterates over all
declared dependencies to extract group_id, artifact_id, and version
string of each dependency (see Section B.1). Up2Dep then checks
if the current dependency is available in our dataset (i.e., it checks
if we have pre-analyzed this dependency and if the information
about its APIs is available in our database). In case the dependency
is available in our dataset, Up2Dep gathers all information about
the current version up to the latest version, including information
on whether a version has security vulnerabilities. The reason we
do this is to not only detect the latest version, but also the latest
compatible version in case an incompatibility with the app code
2Such libraries are overly complex and mainly serve traditional Java applications, not
intended for Android apps. Analyzing one library version already takes hours.
occurs while helping developers avoid versions with known secu-
rity vulnerabilities. At this point, Up2Dep knows if a dependency
is outdated and which version is the latest one.
Database maintenance: To allow continuous maintenance of
Up2Dep’s database we set a crawler up to run periodically to get
new versions of the libraries in our database and subsequently ap-
ply Cognicrypt to analyze them for cryptographic API misuse, and
LibScout to identify API compatibility between library versions.
The updated database is retrieved automatically inside Android Stu-
dio to timingly provide developers with updatability and security
information about their included third-party libraries. For publicly
disclosed vulnerabilities, we update our database manually.
3.3 Usages Analyzer
As we want to provide developers with information regarding a
dependency’s compatibility and the use of libraries with potentially
insecure usages of cryptographic APIs, we need to analyze the de-
velopers’ code. We built a code dependency analyzer that traverses
through all Java and Kotlin files. When developers open a project
in Android Studio, and the indexing process of Android Studio has
completed, Up2Dep starts to analyze the project’s dependencies. We
decided to wait for the indexing process to be done before analyzing
code dependencies, because it significantly speeds up the analysis
process as code files (including resources) have been transformed
into a preferable representation, namely PsiTree, that allows faster
processing. Each file corresponds to a PsiTree, and PsiTrees can
depend on each other and can contain sub-PsiTrees. For every file
(PsiTree), Up2Dep extracts its dependent PsiTree, and resolves the
PsiTree to find out if it is associated with an external (foreign) code
file. In case of a foreign PsiTree, Up2Dep checks with the Project-
FileIndex class (provided by IntelliJ/Android Studio) to examine if
the corresponding code file is in library classes or library source. As
the ProjectFileIndex class contains information about all included
libraries, Up2Dep can resolve a library class or a library source to
find its library information (e.g., library name and version). Once
the resolving process is completed, Up2Dep records any usages
of the library, e.g., method call (including constructor), and saves
them for later references. At the end of the process, Up2Dep has
a complete dependency tree of source code files (Java and Kotlin)
and their corresponding used libraries with details on which library
methods the app is using. More specifically, the result of Usages
Analyzer is a mapping of multiple pairs: code file (Java or Kotlin)
and corresponding used library including API usages.
3.4 Dependency Resolver
The results from Remote Dependency Inspector and Usages Ana-
lyzer are fed to Dependency Resolver. For each included library,
Dependency Resolver checks the library’s usages in the app code
as reported by Usages Analyzer. At this point, Dependency Resolver
has information on which APIs of the currently included libraries
are used in the developer’s code. If Dependency Resolver finds that
any of the used APIs of an outdated library is no longer available in
the library’ latest version, it picks the library version that is newer
than the current version but contains all the used APIs (newer
compatible version). Using the information of publicly disclosed
vulnerabilities of third-party libraries, Dependency Resolver checks
267ACSAC 2020, December 7–11, 2020, Austin, USA
Duc Cuong Nguyen, Erik Derr, Michael Backes, and Sven Bugiel
if the currently included library version has a known security vul-
nerability. Additionally, Dependency Resolver looks up each used
library API to detect if the API leads to cryptographic API misuse
in the library, and the details of the misuse.
From all those information, Dependency Resolver gives developers
the following warnings and potential fixes in their build.gradle files.
The dependency
• is outdated and can be updated to the latest version.
• is outdated and cannot be updated to the latest version.
• is outdated and has a known security vulnerability.
• potentially uses a cryptographic API insecurely.
We notify developers about the security and outdatedness of their
project dependencies in the build.gradle file as this is the location
where developers would manage their project dependencies. Be-
sides, we also leverage the IDE functionality to allow developers
to use Up2Dep in batch mode to analyze the whole project and
see the analysis results in a separate window. In the following, we
describe how Up2Dep notifies developers about the above declared
problems.
Outdated version can be updated to the latest version: In
this case, all the used APIs of the outdated library are also available
in its latest version. Dependency Resolver suggests developers to
update to the latest version as it will be compatible to the devel-
oper’s code (see Figure 11 in Appendix). Developers can apply the
suggested fix by using the default short-cut of Android Studio or
clicking on the default bulb icon to apply the recommended fix.
When this quick-fix is applied, the outdated version string of the
library declared in the build.gradle will be replaced by the latest
version.
Outdated version cannot be updated to the latest version:
When not all used APIs of an outdated library are available in
the latest version (e.g., because the library developer removed or
changed methods), Dependency Resolver suggests developers to
update to a newer but compatible version. This means the newer
version would not require changes to the app code to adapt to the
library’s API changes. Similar to the previous fix, developers can
apply it by using the default short-cut or clicking on the default bulb
icon. When no compatible version is available and developers still
want to update the outdated library to the latest but incompatible
version, they are provided the option Show Dependencies (see Figure
12 in Appendix). The purpose of the Show Dependencies fix is to
give developers feedback on how and where they can migrate
their project’s dependencies to the latest versions (see Figure 10 in
Appendix).
Outdated library version with known security vulnerabil-
ity: When the included library contains a known security vulner-
ability, Dependency Resolver alerts developers with an error (in
red color) with details on the vulnerability. Developers can further
check the vulnerability in the attached link to our Up2Dep project
website (see Figure 8 in Appendix). Since a known security vulner-
ability can be a serious problem for the host app or end-user, we
use a red warning instead of a normal warning (in yellow color) to
notify developers. In this case, developers can upgrade to the latest
version that contains the security patches. When the latest library
version is also vulnerable, developers are recommended to consider