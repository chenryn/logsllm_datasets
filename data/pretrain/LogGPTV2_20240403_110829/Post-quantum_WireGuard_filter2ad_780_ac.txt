attacks. Consequently, this is what we have to replace for post-
quantum security. Note that from a more abstract point of view,
DH supports (and is, in fact, the most common example of)
non-interactive key exchange (NIKE) [53].
The way that the Difﬁe-Hellman key exchange is used in
WireGuard seems to prevent a security proof that only uses
the (standard) Decisional Difﬁe-Hellman (DDH) assumption
((gx, gy, gxy) being indistinguishable from (gx, gy, gz) for
random x, y, z). Known proofs require assumptions from the
family of PRFODH-assumptions. These combine the DDH-
assumption with a prf assumption described below. Roughly
they state that for some prf f and message m, f (gxy, m) is
indistinguishable from a random value even if the adversary
has (limited) oracle access to f (ax, b) and f (ay, b), where it is
allowed to choose a and b. Different versions of the PRFODH-
assumption are distinguished by the limitations on the oracle-
access. For more details on the PRFODH family and its use in
the context of WireGuard we refer to [54] and [9] respectively.
Key-encapsulation mechanisms. A key-encapsulation mecha-
nism (KEM) is a triple of algorithms (KEM.Gen, KEM.Enc,
KEM.Dec). The probabilistic key-generation KEM.Gen gen-
erates a keypair (sk, pk). Encapsulation KEM.Enc is a prob-
abilistic algorithm which takes as input a public key pk and
computes a ciphertext c and a shared key k. We make the
probabilistic behavior explicit, treating KEM.Enc as deter-
ministic algorithm which takes as additional input random
coins r. This is necessary to deal with situations where the
local randomness source is compromised. The decapsulation
algorithm KEM.Dec takes as input a ciphertext c and a secret
key sk and returns a shared key k or a failure symbol ⊥. A
(cid:2) | (sk, pk) ← KEM.Gen() ,
KEM is (1−δ)-correct if E [k = k
(cid:2) ← KEM.Dec(c, sk)] = 1 − δ,
(c, k) ← KEM.Enc(pk, r), k
where the expectation is taken over the internal coins of
KEM.Gen and KEM.Enc. We call δ the failure probability.
The security notions we need from a KEM in this paper
are indistinguishable ciphertexts under chosen-plaintext at-
tacks (IND-CPA) and under adaptive chosen-ciphertext attacks
(IND-CCA). For the formal deﬁnitions of these notions in the
context of KEMs, see e.g., the seminal work by Dent [55].
Intuitively, an IND-CPA-secure KEM allows two parties to
agree on a shared key k without any passive attacker being able
to learn any non-trivial information about that key. An IND-
CCA-secure KEM then provides essentially the same notion,
but this time for active attackers.
Like DH, a KEM can be used to establish a shared key
between two parties over an untrusted channel in a conﬁdential
way. However, unlike DH, the communication scenario as-
sumes interaction. When using DH, two parties that each know
their own secret-key and their peer’s public key can derive
a shared secret without any further interaction. In contrast,
when using KEMs, this does not work generically, since it is
not generally possible to combine two keypairs to acquire a
shared secret. Instead one party has to encapsulate a key using
their peers public key and send the encapsulation to their peer,
requiring one interaction.
In many applications, DH is also used in a KEM-like
interactive setting; those are the cases where DH can easily
be replaced by a KEM. However, many protocols also involve
non-interactive applications of DH that are not
to
replace and WireGuard is no exception in that regard.
trivial
Pseudorandom Functions. For the deﬁnitions of pseudoran-
dom functions (PRF) and authenticated encryption (see below)
we use the deﬁnitions given in [9] to keep the computational
proof for PQ-WireGuard as close to that of WireGuard as
possible. The deﬁnitions are verbatim copies and refer to
pre-quantum security. For post-quantum security, one has
to replace “PPT” (probabilistic polynomial time) by “QPT”
(quantum polynomial time) algorithm when talking about the
adversary.
Deﬁnition 1 (prf Security [9]): A pseudo-random function
family is a collection of deterministic functions PRF =
{PRFλ : K × M → O : λ ∈ N}, one function for each
value of λ. Here, K, M, O all depend on λ, but we suppress
this for ease of notation. Given a key k in the keyspace K and
a bit string m ∈ M, PRFλ outputs a value y in the output
space O = {0, 1}λ. We deﬁne the security of a pseudo-random
function family in the following game between a challenger
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
308
3) A terminates and outputs a bit b
(cid:2).
C and an adversary A, with λ as an implicit input to both
algorithms:
1) C samples a key k $← K and a bit b uniformly at random.
2) A can now query C with polynomially-many distinct mi
values, and receives either the output yi ← PRFλ(k, mi)
(when b = 0) or yi
$← {0, 1}λ (when b = 1).
We say that A wins the PRF security game if b
(cid:2) = b
and deﬁne the advantage of an algorithm A in breaking the
pseudo-random function security of a PRF family PRF as
(cid:2) = b) − 1|. We say that PRF is
Advprf
secure if for all PPT algorithms A, Advprf
PRF,A(λ) is negligible
in the security parameter λ.
PRF,A(λ) = |2 · Pr(b
Traditionally most authors require that m can have (almost)
arbitrary length. We consider a setting where m and k both
have the same ﬁxed length. In case a function f becomes
is f (m, k)
a PRF when its arguments are swapped (that
satisﬁes the prf-assumption), we say that f satisﬁes the prfswap-
assumption introduced in [56].
A function that satisﬁes the prf- and the prfswap-assumption
is called dual-PRF and satisﬁes the dual-prf-assumption. Intu-
itively this means that if at least one input is random and
the resulting bit string is still
unknown to the adversary,
indistinguishable from a random value.
In PQ-WireGuard a dual-PRF appears in the form of a key-
derivation function KDF(X, Y ) = Z that takes two inputs, X
and Y , and outputs a bit string Z consisting of three blocks
Z = Z1(cid:6)Z2(cid:6)Z3. We write KDFi(X, Y ) for the i-th block of
output of KDF(X, Y ), i.e., Zi. The reason why KDF has to
be a dual-PRF is discussed in Section IV-A.
Authenticated Encryption with Associated Data. The analysis
of the PQ-WireGuard (and WireGuard) handshake only makes
use of the authentication security of the used AEAD scheme.
Hence, we limit our presentation to this. A discussion of
secrecy related properties can e.g. be found in [57]. As
discussed above, the following is a deﬁnition of pre-quantum
security, the deﬁnition of post-quantum security is obtained
replacing PPT by QPT in the text below.
Deﬁnition 2 (aead-auth Security [9]): An AEAD scheme
AEAD is a tuple of algorithms AEAD = {KeyGen, Enc, Dec}
associated with spaces for keys K, nonces N ∈ {0, 1}l,
messages M ∈ {0, 1}∗ and headers H ∈ {0, 1}∗. These
sets all depend on the security parameter λ. We denote by
AEAD.KeyGen(λ) → k a key generation algorithm that
takes as input λ and outputs a key k ∈ K. We denote by
AEAD.Enc(k, N, H, M ) the AEAD encryption algorithm that
takes as input a key k ∈ K, a nonce N ∈ N , a header H ∈ H
and a message M ∈ M and outputs a ciphertext C ∈ {0, 1}∗.
We denote by AEAD.Dec(k, N, H, C) the AEAD decryption
algorithm that takes as input a key k ∈ K, a nonce N ∈ N ,
a header H ∈ H and a ciphertext C and returns a string M
(cid:2),
which is either in the message space M or a distinguished
failure symbol ⊥. Correctness of an AEAD scheme requires
that AEAD.Dec(k, N, H, AEAD.Enc(k, N, H, M )) = M for
all k, N, H, M in the appropriate spaces.
Let AEAD be an AEAD scheme, and A a PPT algorithm
with input λ and access to an oracle Enc(·,·,·). This oracle,
given input (N, H, M ), outputs Enc(k, N, H, M ) for a ran-
domly selected key k ∈ K. We say that A forges a ciphertext
if A outputs (N, H, C) such that Dec(k, N, H, C) → M (cid:7)= ⊥
and (N, H, M ) was not queried to the oracle. We deﬁne
the advantage of a PPT algorithm A in forging a ciphertext
AEAD,A (λ). We say that an AEAD scheme AEAD is
as Advaead-auth
aead-auth-secure if for all PPT algorithms A Advaead-auth
AEAD,A (λ)
is negligible in the security parameter λ.
the AEAD
scheme used are random bit strings. This is the case for all
practical AEAD schemes we are aware of. Also in theory this
is no limitation as one can always replace the secret key by
the coins of AEAD.Gen.
E. The WireGuard handshake
(PQ-)WireGuard assumes that
the keys of
We are now ready to review the handshake protocol of
WireGuard. In Algorithm 1 we ﬁrst give a high-level view
of the handshake, largely following the description in [9]. The
initiator and responder are identiﬁed by their long-term, static
public keys spki and spkr (with corresponding secret keys
sski and sskr, respectively). Those key pairs are generated
before the ﬁrst handshake between two parties and WireGuard
assumes that the public keys are exchanged in a secure way
(guaranteeing at least authenticity) before the ﬁrst handshake.
Algorithm 1 High-level view on the WireGuard handshake
Initiator
Responder
1: (eski, epki) ← DH.Gen()
2: sidi
3: ltk ← AEAD.Enc(κ3, 0, spki, H3)
4: now ← Timestamp()
5: time ← AEAD.Enc(κ4, 0, H4, now)
6: m1 ← MAC(H(lbl3 (cid:3) spkr), type (cid:3) 03 (cid:3) sidi (cid:3) epki (cid:3) ltk (cid:3) time)
7: m2 ← MAC(cookie, type (cid:3) 03 (cid:3) sidi (cid:3) epki (cid:3) ltk (cid:3) time (cid:3) m1)
8: InitHello ← type (cid:3) 03 (cid:3) sidi (cid:3) epki (cid:3) ltk (cid:3) time (cid:3) m1 (cid:3) m2
$← {0, 1}32
InitHello
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−→
(eskr, epkr) ← DH.Gen()
9:
$← {0, 1}32
10:
zero ← AEAD.Enc(κ9, 0, H9, ∅)
11:
12: m1 ← MAC(H(lbl3 (cid:3) spki), type (cid:3) 03 (cid:3) sidr (cid:3) sidi (cid:3) epkr (cid:3) zero)
m2 ← MAC(cookie, type (cid:3) 03 (cid:3) sidr (cid:3) sidi (cid:3) epkr (cid:3) zero (cid:3) m1)
13:
RespHello ← type (cid:3) 03 (cid:3) sidr (cid:3) sidi (cid:3) epkr (cid:3) zero (cid:3) m1 (cid:3) m2
14:
←−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
RespHello
sidr
15:
16:
tki ← KDF1(C9, ∅)
tkr ← KDF2(C9, ∅)
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−→
AEAD.Enc(tki, ·, ∅, application data)
From a cryptographic point of view, and in particular for
the context of this paper, what is most interesting is how the
values Hk, κk, and Ck in Algorithm 1 are computed. This is
laid out in Table I, again largely following the description
in [9]. The values lbl1, lbl2, and lbl3 are ﬁxed strings
(see [1, Sec. V.D]). The value cookie is most of the time
just 16 zero bytes, except when the server is under load and
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:30 UTC from IEEE Xplore.  Restrictions apply. 
309
Initiator
(eski, epki) ← CPAKEM.Gen()
r1
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−→
$← {0, 1}λ, (c1, k1) ← CCAKEM.Enc(spkr, r1)
epki, c1
Responder
$← {0, 1}λ, (c2, k2) ← CCAKEM.Enc(spki, r2)
$← {0, 1}λ, (c3, k3) ← CPAKEM.Enc(epki, r3)
r2
r3
←−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
c2, c3
k2 ← CCAKEM.Dec(sski, c2)
k3 ← CPAKEM.Dec(eski, c3)
k1 ← CCAKEM.Dec(sskr, c1)
The role of static-static DH. This naive approach already has
lots of the security properties of the WireGuard handshake,
but it is lacking three properties that are achieved through the
inclusion of the static-static DH.
is sending out so-called “cookie replies” as denial-of-service
countermeasure; for details, see [1, Sec. V.D7]. Note that
Algorithm 1 includes the ﬁrst application-data packet from
the initiator. The reason is that this packet also serves as key
conﬁrmation of the handhshake. This dual purpose of the ﬁrst
data packet is the reason that WireGuard cannot be proven
secure in a modular way (separating handshake from data
transport) without modiﬁcation. For details see [9].
III. FROM WireGuard TO PQ-WireGuard
As outlined in Sections I and II, the WireGuard handshake
is heavily based on DH, which does not have an efﬁcient
and well established post-quantum equivalent. Hence, in this
section we describe how we replace DH by KEMs, for which
well-established, efﬁcient post-quantum instantiations exist.
We start by considering a simpliﬁed view on the core of the
DH-based WireGuard handshake.
In this simpliﬁed view, the initiator has a long-term static
DH key pair (sski, spki) and the responder has a long-term
static DH key pair (sskr, spkr). The handshake proceeds as
follows:
Initiator
(eski, epki) ← DH.Gen()
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−→
Responder
epki
(eskr, epkr) ← DH.Gen()
epkr
←−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
k1 ← DH.Shared(sski, spkr)
k1 ← DH.Shared(sskr, spki)
k2 ← DH.Shared(eski, spkr)
k2 ← DH.Shared(sskr, epki)
k3 ← DH.Shared(sski, epkr)
k3 ← DH.Shared(eskr, spki)
k4 ← DH.Shared(eski, epkr)
k4 ← DH.Shared(eskr, epki)
The ﬁnal session key is computed using the keys k1, k2, k3,
and k4.
A. Moving from DH to KEMs
In [18], Fujioka, Suzuki, Xagawa, and Yoneyama describe
an approach to authenticated key exchange using only KEMs;
we largely follow their approach in our design. Towards our
ﬁnal proposal, let us ﬁrst try to straight-forwardly translate
the DH-based approach to a KEM-based approach. The
problem is, as described in Subsection II-D, that we cannot
perform a non-interactive key exchange, i.e., we cannot build
an equivalent to the static-static DH computation of k1. Let
us for the moment ignore the static-static DH and start by
translating the remainder of the handshake to a KEM-based
handshake. For this, we will use an IND-CCA-secure KEM
CCAKEM = (CCAKEM.Gen, CCAKEM.Enc, CCAKEM.Dec)
=
and
(CPAKEM.Gen, CPAKEM.Enc, CPAKEM.Dec). The initiator
has a long-term static CCAKEM key pair (sski, spki) and
the responder has a long-term static CCAKEM key pair
(sskr, spkr). Now, the handshake proceeds as follows: