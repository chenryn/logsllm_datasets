日志易出品
作者：日志易专业服务部 监控告警研究小组
后期整理：日志学院
监控告警专题教材
本材料的核心是日志易系统的监控告警工具，依托于日志易系统强大的日志分析功能，根据日志数据中的指标项设置监控，通过灵活实用的工具链，帮助用户建立一条日志的监控中心。在第二章节中，我们将介绍日志易监控告警的基本配置，后续章节依次介绍日志易监控告警支持的告警方式、日志易告警管理的内容、日志易告警归并等信息。
本书最后一个章节通过监控告警在企业的应用实例，串联整个日志监控告警流程。（二期待增加）
与此同时，本材料也是一个关于监控告警的材料。所以在介绍日志易监控告警之前，第一章节将会带你了解一些监控告警的基本概念。我们从最初的告警讲起，介绍市面上常见的告警产品，通过对比，增加您对各类告警产品的认知以及对日志监控产品的理解。
# 基本概念
本章节将从监控告警说起，简要叙述告警的基本概念及市面上常见的监控告警产品。通过将日志易监控告警产品与常见监控告警产品进行对比，深入了解日志告警的原理与实现方式。
## 什么是监控告警
监控是管理基础设施和业务的核心工具。监控也是必需的，应该和应用程序一起构建和部署。没有监控，你将无法了解你的系统环境、进行诊断故障、制定容量计划，也无法提供系统的性能、成本和状态等信息。
运维场景下的监控告警可以理解为------在某一时间段内，探测某一资源的状态，如果此状态不是我们所预期的状态，那么就发出提醒信息。
一个基础的监控告警来说理应包括以下信息：
-   监控的对象：如网络设备、服务器资源、进程的性能或应用状态等；
-   监控项：具体的指标项，如服务器的磁盘使用率、MySQL的连接数；
-   监控周期：监控多久执行一次，如每天监控服务器的磁盘使用率，每天的同一时间获取一次服务器磁盘使用率的数值；
-   监控阈值：指标到达某一阈值时触发告警，如磁盘超过80%时发送告警，80%即是阈值；
-   告警推送方式：告警发送的方式，如常用的邮件告警、短信告警、电话告警等；
-   告警恢复提醒：一般以相同的告警推送方式发送告警恢复提醒。
![](media/image1.png){width="5.6409722222222225in"
height="1.7756944444444445in"}
## 监控告警基础知识
在企业应用中，实际上，监控系统有两个服务对象：技术和业务。
从技术角度来看，监控是衡量和管理技术系统的工具和流程。但监控远不止于此，监控将系统和应用程序生成的指标转化为对应的业务价值。这些监控指标作为衡量用户体验的依据，为业务提供反馈。同时监控指标还提供了对技术的反馈，指出哪些组件不起作用或者导致服务质量下降。
监控是管理基础设施和业务的核心工具。监控也是必需的，应该和应用程序一起构建和部署。没有监控，你将无法了解你的系统环境、进行诊断故障、制定容量计划，也无法向组织提供系统的性能、成本和状态等信息。
关于监控，Google
服务层次结构图就是一个很好的阐述（如图1-1所示），该图表显示了监控是构建和管理应用程序的基础。但是监控没有那么容易实施，如果你监控了错误的东西或者使用了错误的方式，那么监控系统的价值将大大降低。
![](media/image2.png){width="3.620833333333333in"
height="3.191666666666667in"}
图1-1 服务层级
有一种常见的反模式，即将监控和其他运维工作（比如安全性）视为应用程序的增值组件而非核心功能。与安全性一样，监控也应该是应用程序的核心功能。如果你要为应用程序构建规范或用户故事，那么务必先把应用程序每个组件的监控指标考虑进来，千万不要等到项目结束或部署之前再做这件事情。不然肯定会错过一些需要监控的东西。
许多环境都会为所有应用程序建立货物崇拜 （Cargo
Cult）式的监控系统。团队始终复用他们过去使用的检查机制，而不会为新系统或应用程序进行更新。一个常见的例子是监控每台主机上的
CPU、内存和磁盘，但不监控可以指示主机上应用程序是否正常运行的关键服务。如果应用程序在你没有注意到的情况下发生故障，那么即使进行了监控，你也需要重新考虑正在监控的内容是否合理。根据服务价值设计自上而下的监控系统是一个很好的方式（如图
1-2
所示），这会帮助明确应用程序中更有价值的部分，并优先监控这些内容，再从技术堆栈中依次向下推进。
![](media/image3.png){width="3.189583333333333in"
height="2.8965277777777776in"}
图1-2 监控设计
从业务逻辑和业务输出开始，向下到应用程序逻辑，最后到基础设施。这并不意味着你不需要收集基础设施或操作系统指标------它们在诊断和容量规划中很有帮助------但你不太可能使用这些来报告应用程序的价值。
如果无法从业务指标开始，则可试着从靠近用户侧的地方开始监控。因为他们才是最终的客户，他们的体验是推动业务发展的动力，了解他们的体验并发现他们何时遇到问题本身就很有价值。
## 监控告警实现方式
监控告警系统的实现各有不同，大致如下所述：
-   在数据采集方面，有的监控系统采用主动采集方式，有的监控系统采用被动上报方式，有的监控系统采用上述两者兼备的方式。
-   在数据传输方面，有的监控系统采用socket传输，有的监控系统采用HTTP传输。
-   在数据存储方面，有的监控系统将监控数据保存在MySQL中，有的监控系统将数据保存在MongoDB，OpenTSDB,
    > InfluxDB等时序数据库中。
    但是，所有的监控告警系统的核心都是采集和处理数据。
监控系统通常由指标采集子系统和数据处理子系统组成：
-   指标采集子系统主要负责信息采集，过滤，汇总和存储。
-   数据处理子系统主要负责数据分析，展现，预警，告警动作触发和告警等。
![](media/image4.png){width="4.00625in" height="1.448611111111111in"}
## 常见监控告警产品
常见的监控告警系统主要有Prometheus，Prometheus
AlertManager，Zabbix，Open-Falcon， Bosun， InfluxData，
Unity300等。下面以最为常见的Zabbix及Prometheus为例分别进行简单的介绍和对比分析。
### Zabbix
Zabbix 是由 Alexei Vladishev
开发的一种网络监视、管理系统，支持多种采集方式和采集客户端，同时支持SNMP，IPMI，JMX，Telnet，SSH等多种协议，它将采集到的数据存放到数据库中，然后对其进行分析整理，如果符合告警规则，则触发相应的告警。
作为一款功能强大的监控产品，Zabbix安装简单，灵活集成数据采集插件，可实现复杂的多条件告警，并自带画图功能，可将监控数据绘制成图形，并且支持自定义脚本与API二次开发。
Zabbix组件图架构如下：
![](media/image5.png){width="5.561805555555556in"
height="3.176388888888889in"}
#### Zabbix Server
Zabbix
Server是Zabbix的核心组件，由C语言编写，主要负责接收Agent发送的监控信息，并进行汇总存储。Zabbix
Server主要包括三个方面的工作。
-   设备注册：包括手动配置Agent地址、自动发现机制。
-   数据收集。采集到数据首先会被放置在内存中，然后被批量保存在数据库中。支持主动收集与被动接收两种方式。
-   定期的数据清理和告警触发。
#### Zabbix Database
Zabbix
Database用于存储配置信息以及收集的监控数据。后端数据库支持MySQL，PostgreSQL，Oracle等，并提供Zabbix
Web页面的数据查询方式。由于采用关系型数据库存储时序数据，所以Zabbix在监控大规模集群时常常在数据存储方面捉襟见肘。
#### Zabbix Web
即Zabbix的GUI组件，由PHP编写。通常与Server运行在同一台主机上。提供监控数据的展现和系统配置，主要配置包括监控模板，告警等。
#### Proxy
Proxy主要解决两个问题：
-   Server和Agent之间网络不通。
-   大规模部署时减轻Server的压力。
#### Agent
Agent部署在被监控主机上，负责收集本地数据并发往Server端或Proxy端，Agent端会启动一个Agentd的守护进程。
### Prometheus
Prometheus是由SoundCloud公司开发的开源告警系统并且带时序数据库，基于Go语言开发。
Prometheus的基本原理是通过HTTP周期性地抓取被监控组件的状态，任意组件只要提供对应的HTTP接口并且符合Prometheus定义的数据格式，就可以接入Prometheus监控。其架构图及其生态系统组件图如下所示。
![4572211-3cab54af7e9ab155](media/image6.png){width="5.759722222222222in"
height="3.457638888888889in"}
#### Prometheus Server
Prometheus
Server是Prometheus的核心，根据配置完成数据采集，服务发现以及数据存储，推送告警，以及提供PromQL查询语言的支持。
Prometheus
Server负责定时在目标上抓去Metrics数据，每个抓取目标都需要暴露一个HTTP服务接口用于Prometheus定时抓取。这种调用监控对象获取监控数据的方式成为Pull。Pull方式可以降低耦合，通过Pull方式，被采集端无须感知监控系统的存在，完全独立于监控系统之外，这样数据的采集完全由监控系统控制，增强了整个系统的稳定性。
Prometheus Server通过如下两种方式获取监控对象。
-   通过配置文件，文本文件等进行静态配置。
-   支持Kubernetes，file_sd，Consul等方式进行动态发现。
Storage通过一定的规则清理和整理数据，并把得到的结果存储到新的时间序列中，主要有两种存储方式。
-   本地存储。通过Prometheus自带的时序数据库保存到本地磁盘。
-   远端存储。通过中间层的适配器的转化，目前Prometheus支持OpenTSDB，
    > InfluxDB，ElasticSearch等后端存储。
Prometheus通过PromQL和其他API可视化地展示收集的数据。
AlertManager是独立于Prometheus的一个组件，在触发了预先设置在Prometheus中的告警规则后，Prometheus便会push告警信息到AlertManager。
#### AlertManager
Alertmanager作为一个独立的组件，负责接收并处理来自Prometheus
Server(也可以是其它的客户端程序)的告警信息。Alertmanager可以对这些告警信息进行进一步的处理，比如当接收到大量重复告警时能够消除重复的告警信息，同时对告警信息进行分组并且路由到正确的通知方，Prometheus内置了对邮件，Slack等多种通知方式的支持，同时还支持与Webhook的集成，以支持更多定制化的场景。同时AlertManager还提供了静默和告警抑制机制来对告警通知行为进行优化。
客户端通过POST请求向AlertManager推送告警信息。每条告警信息中的labels可用于唯一识别告警信息并用于去重。
AlertManager主要分为两个部分，路由(router)和接收器(receiver)。告警消息先被经过路由树，然后被分配到对应的接收器中。路由树是由预先设定的路由规则生成的。其高可用架构如上图所示，具体流程如下：
1.  Prometheus会通过调用AlertManager提供的告警接口将原始的告警消息发送到AlertManager。
2.  AlertManager的API除了接收告警，还接收静默请求，将其分别保存到各自的provider里。
3.  provider提供了一个订阅（subscribe）接口，这样Dispatcher组件便可以获取告警数据，并对数据进行分组，通过用户预先设置的规则进入告警抑制阶段或静默阶段。
4.  如果通过了上面的告警静默阶段，则进入路由分发阶段，最终发送通知。
### 常见告警产品对比
  -------------------- -------------- ------------ ---------- -------------- ------------ ---------- ------------ -------------- ---------------- ------------------ ---------------------------------------------
  **监控与告警系统**   **开发语言**   **成熟度**   **配置**   **可扩展性**   **故障域**   **性能**   **告警源**   **告警目标**   **社区活跃度**   **对容器的支持**   **企业使用度**
  Zabbix               C + PHP        高           基于模版   高             大，集成     低         多通道       多通道         中               低                 高
  Prometheus           Go             高           基于模版   高             小，单组件   高         多通道       多通道         高               高                 高
  Open-Falcon          Go + Python    中           树形结构   高             小，单组件   高         多通道       多通道         中               中                 中（主要是国内企业使用，如美团，滴滴，360）
  InfluxDB TICK        Go             高                      高             小，单组件   高         多通道       多通道         高                                  高
  -------------------- -------------- ------------ ---------- -------------- ------------ ---------- ------------ -------------- ---------------- ------------------ ---------------------------------------------
## 日志分析类告警产品
日志分析类告警产品通过监控日志数据中的指标来触发告警。市面上比较流行的日志分析类告警产品有Graylog、ELK-ELastAlert。
### ELK-ElastAlert
ELK-ElastAlert是ELK的告警产品。在故障产生后，及时的通知到相关人员非常重要，仅仅有ELK还是不够的，还需要搭配ElastAlert对日志进行监控与灵活通知。
ELK知名度较高，其告警工具ELK_ElastAlert依托于ELK平台，能灵活从ES中查询内容。ELK_ElastAlert告警规则设置需要修改config.yaml文件，修改完成后再执行，结果会自动保存在自建索引elastalert_status中；告警通知支持邮件、钉钉、微信、自定义等多种告警方式。
### Graylog
Graylog是一款开源的日志聚合、分析、审计、展现和预警工具，它基于Scala语言开发。使用它能很容易对结构化和非结构化日志进行管理以及调试应用程序。它依赖Elasticsearch和MongoDB。Graylog的主服务从客户端节点获取数据，同时还提供Web接口，方便用户可视化聚合来的日志。
Graylog的优点包括以下方面：
1.  免费的开源工具；
2.  相比ELK更优秀的报警功能；
3.  更好的交互，通过跟踪Graylog收到的错误堆栈，工程师可以了解源代码中的上下文。这大量节省了排错的时间和精力；
4.  强大的搜索功能，支持TB级别的查询；
5.  有归档功能，超过30天的所有内容都可以存储在廉价存储中，在出现查询需求时，可以重新导入到Graylog；
6.  Python库支持。
### 日志易告警产品
日志易平台可以采集来自设备、应用、网络的数据；有了数据，可以通过配置监控，从而达到对异常数据进行告警通知的目的。
日志易通过SPL搜索分析语句监控日志中某些指标的值的变化，当指标的值到达某一阈值时，则发送告警信息。由于日志易内置了丰富的SPL语句，可针对接入的日志设置灵活的指标监控。在监控的执行上，日志易告警支持定时与crontab两种方式；告警通知默认支持邮件、syslog、告警转发等方式，同时支持钉钉、微信、短信等自定义插件开发。此外，日志易告警还支持扩展搜索、告警抑制、告警恢复等功能。
在3.1及以后版本中，还可以将告警历史数据通过图表进行展示，可视化监控指标的变化情况。
## 市面告警 PK 日志易告警
与Zabbix、Prometheus等专业的监控工具相比，日志分析类告警产品往往支持的数据源较为单一，但依托于可以进行大批量数据处理的日志平台进行监控，数据虽存在短期延时，但数据的准确性更高，也更加灵活，集合日志平台，在排查告警故障时也更方便定位问题。
ELK-ElastAlert与Graylog两种日志告警解决方案虽然在功能上非常相似，但仍有一些差异需要考虑。\
两者之间最重要的区别在于，从一开始，Graylog就定位为强大的日志解决方案，而ELK则是大数据解决方案。
Graylog可以通过网络协议直接从应用程序接收结构化日志和标准syslog。相反，ELK是使用Logstash分析已收集的纯文本日志的解决方案，然后解析并将它们传递给ElasticSearch。\
在ELK中，Kibana扮演仪表盘的角色并显示从Logstash收到的数据。Graylog在这点上更方便，因为它提供了单一应用程序解决方案（不包括ElasticSearch作为灵活的数据存储），具有几乎相同的功能。因此，部署所需的时间更短。此外，与ELK相比，Graylog开箱即用，且具有出色的权限系统，而Kibana则不具备此功能。\
ELK借助于开源社会的活跃度，其灵活的API能够实现各种功能，但其对使用人员的代码要求能力较高。Graylog具有直观的GUI，并提供警报、报告和自定义分析功能。最重要的是，它能在多个日志源和跨机房收集数TB的数据。
日志易支持的数据源更加广泛，几乎汇聚了上面两个工具的所有优点。且日志易告警具备像告警汇聚、知识整合、告警插图等比较重要的功能，依旧存在不少短板。针对告警处理，日志易还支持维护期的设定。虽然现阶段日志易的告警还存在不能批量修改告警接收人、告警模板等弱点，然而3.1版本告警归并已解决了该问题，随着版本与功能的更迭，相信日志易在告警上还会有更突出的成就。
在下一章，我们将介绍本材料主题日志易告警，并对其具体配置内容及理念进入深入探讨。
# 日志易告警配置
常见的告警比较简单，大部分都是进行值的判断，基本上都属于很基础的，但是日志易使用了多种类型告警，能够满足各种场景下的监控。
## 搜索内容
搜索内容就是日志易中的SPL语句，通过这里面的语句我们可以实现下面各种的监控类型，我们最常用的就是SPL统计监控。通过编写SPL语句可以将