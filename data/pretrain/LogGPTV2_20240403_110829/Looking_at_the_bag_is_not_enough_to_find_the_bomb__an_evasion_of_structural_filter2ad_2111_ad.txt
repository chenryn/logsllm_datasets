More in detail, PJScan does not provide a score for the root
ﬁle, since it does not contain JavaScript. Moreover, PJScan
does not provide a score for PDFembed, because such detec-
tor is not able to analyze JavaScript code within embedded
PDF ﬁles, due to a limitation of its ﬁle parsing mechanism.
An analogous result has been obtained with Wepawet. From
Wepawet we were unable to get any detection result, because
our attacks systematically raised internal errors. On the
other hand, the detector was indeed active, because we were
able to analyze benign PDFs7 as well as malicious PDFs
taken from the Contagio repository [1]. As a consequence,
we speculate that Wepawet was unable to analyze our attacks
due to some parsing error caused by our deliberate PDF
manipulation. In a recent work, Jana and Shmatikov [23]
showed that such kind of errors are pretty common in mal-
ware detectors, and actually represent the weakest link of
malware defense.
Finally, we would like to discuss a particularly interesting
ﬁnding, related to the JSinject attack. An attack instance
containing the same JavaScript code can be built automat-
ically through the Metasploit framework [3]. However, do-
ing so would make this attack detectable by all PDF mal-
ware detectors. There is a good reason for this, since this
attack instance contains both structural and code diﬀerences
with respect to benign ﬁles. This aspects highlights once
more the eﬃcacy of the reverse mimicry evasion strategy.
7. COUNTERMEASURES
Experimental results presented in Section 6 clearly show
that, even if PDF malware detectors are able to accurately
detect malware in-the-wild, they may miserably fail against
simple, yet eﬀective evasion techniques such as the reverse
mimicry attack described in Section 5. While such an attack
has been speciﬁcally developed against detectors based on
7Wepawet classiﬁed correctly the root ﬁle, but no malicious-
ness score was available.
PDF structural analysis, we found it to be eﬀective against
tools that operate at CE layer, due to errors in the parsing
process. In other terms, current PDF malware detectors are
weak against adversarial attacks. We identify two main key
points for improving state-of-the-art solutions: (1) accuracy
of the ﬁle parsing process; (2) robustness of the feature set
against evasion.
The ﬁrst of issue is directly related to all embedding at-
tacks. The parsing process should (a) be aware of the PDF
versioning mechanism, (b) identify and extract all embed-
ded content. This way, embedded content can be thoroughly
analyzed as a diﬀerent entity by a content-speciﬁc detector.
For instance, embedded PDF ﬁles can be analyzed by the
same tools used to analyze the root ﬁle. Other type of
content, such as SWF or EXE, can be analyzed by other, spe-
cialized tools (e.g., Wepawet). Then, the maliciousness of the
original PDF ﬁle can be evaluated as the result of the corre-
lation between the outputs of all these specialized detectors
(e.g., through OR rule).
On the other hand, improving the robustness of the fea-
ture set against evasion is very useful when facing code injec-
tion. In particular, features that involve all layers described
in Section 5, namely, STO, SUO and CE, should be extracted.
CE features should be speciﬁcally related to the type of code.
For example, combining a structural system such as Malware
Slayer or PDFRate with a code analyzer such as PjScan may
be a ﬁrst, simple solution, to improve the robustness of the
analysis.
According to the above discussion, Figure 12 shows a pos-
sible framework that is able to cope with adversarial attacks
against PDF malware detectors. We have realized a simple
implementation of this framework. We have empowered the
parsing process by extracting any embedded content inside
the main PDF, and we have combined the output of Malware
Slayer and PDFRate (structural analysis), PJScan (JS analy-
sis), Wepawet (JS, EXE and SWF analysis) according to an OR
rule8. This allows to thoroughly analyze PDF content and
combine structural and code analysis. Table 2 shows that
such a new framework is able to spot all attacks presented
in Section 6. In the following, for each attack, we provide
a detailed explanation of the operations performed by the
framework:
• EXEembed: our parser successfully extracts the exe-
cutable ﬁle, which in turn is analyzed by Wepawet. This
tool raises an alert and correctly identiﬁes the related
exploit.
• PDFembed: our parser successfully extracts the embed-
ded PDF ﬁle, as well as the JavaScript within this
ﬁle. PJScan, Malware Slayer and PDFRate (all ver-
sions) correctly raise an alert when analyzing the em-
bedded PDF ﬁle. Wepawet correctly raises an alert
when analyzing the JavaScript code.
• JSinject: our parser successfully extracts the Java-
Script within this ﬁle. PJScan correctly raises an alert
when analyzing the main PDF. Wepawet correctly raises
an alert when analyzing the JavaScript code.
Indeed, the correlation of diﬀerent detectors can improve
robustness against evasion. However, we observe that it may
8A ﬁle is classiﬁed malicious if at least one tool classiﬁes the
main PDF ﬁle or one of its embedded content, as malicious.
Figure 12: A possible framework to make ML sys-
tems more robust against adversarial attacks
Table 2: Eﬃcacy of EXEembed, PDFembed, JSinject
evasion techniques against the proposed framework,
which combines diﬀerent PDF malware detectors us-
ing a OR rule
Attack
EXEmbed
Alerts
Wepawet
PDFEmbed
PJScan, Wepawet, Mal-
ware Slayer, PDFRate
Result
detected
detected
JSinject
PJScan, Wepawet
detected
also increase the rate of false alarms. So, there may be
a tradeoﬀ between overall accuracy of the framework and
robustness against evasion. To this end, the choice of base
detectors and correlation rules should be tailored according
to the target tradeoﬀ. A more detailed study of this aspect
is outside the scopes of this work, but it is indeed interesting
for future research activity.
8. CONCLUSIONS
Nowadays, malicious PDF ﬁles represent a concrete and
relevant threat. Recent work showed that malicious PDF
ﬁles can be accurately detected by analyzing their logical
structure, with excellent results. However, structural analy-
sis can be easily defeated by a skilled attacker, by develop-
ing PDF malware that mimic the structure of benign PDF
documents. In this paper, we practically demonstrated this
claim through the development and the implementation of
a novel attack methodology called reverse mimicry. We im-
plemented it using real PDF malware and validated our ap-
proach by testing it against various PDF malware detectors
proposed so far. Surprisingly, we found that even detectors
which employ non-structural features may be evaded, due
to errors in the ﬁle parsing mechanism.
This case study highlights once more the importance of
developing malware detection systems robust to adversarial
attacks. As a countermeasure, we proposed a framework
Embedded	
  Javascript	
  Code	
  Analysis	
  PDF	
  Structural	
  Analysis	
  Embedded	
  PDF	
  Files	
  Extrac<on	
  EXE/SWF	
  Extrac<on	
  And	
  Analysis	
  PDF	
  SET	
  To	
  be	
  Scanned	
  OUTPUT	
  based on (a) the development of an accurate PDF parsing
mechanism and (b) the correlation of outputs from diﬀerent
PDF malware detectors. This framework allows detecting
all attack instances implemented in this work, and it is a
promising solution for future research activity.
Acknowledgements
This work is supported by the Regional Administration of
Sardinia, Italy, within the project “Advanced and secure
sharing of multimedia data over social networks in the future
Internet” (CUP F71J11000690002). Davide Maiorca grate-
fully acknowledges Sardinia Regional Government for the
ﬁnancial support of his PhD scholarship (P.O.R. Sardegna
F.S.E. Operational Programme of the Autonomous Region
of Sardinia, European Social Fund 2007-2013 - Axis IV Hu-
man Resources, Objective l.3, Line of Activity l.3.1.).
9. REFERENCES
[1] Contagio. http://contagiodump.blogspot.it.
[2] Malware tracker.
http://www.malwaretracker.com/pdfthreat.php.
[3] Metasploit framework. Http://www.metasploit.com/.
[4] Origami framework.
Http://esec-lab.sogeti.com/pages/Origami.
[5] Pdf tools.
http://blog.didierstevens.com/programs/pdf-
tools/.
[6] Pdfrate. http://pdfrate.com.
[7] Peepdf. Http://eternal-todo.com/tools/
peepdf-pdf-analysis-tool.
[8] Pypdf. http://pybrary.net/pyPdf/.
[9] Social engineering toolkit.
Https://www.secmaniac.com/.
[10] Wepawet. Http://wepawet.iseclab.org/index.php.
[11] PDF Reference. Adobe Portable Document Format
Version 1.7. Adobe, November 2006.
[12] Adobe Supplement to ISO 32000. Adobe, June 2008.
[13] Foxit reader stack overﬂow exploit.
http://www.exploit-db.com/
foxit-reader-stack-overflow-exploit-egghunter/,
November 2010.
[14] Add javascript to existing pdf ﬁles (python).
http://blog.rsmoorthy.net/2012/01/
add-javascript-to-existing-pdf-files.html,
2012.
[15] Internet Security Threat Reports. 2011 Trends.
Symantec, April 2012.
[16] P. Bania. Jit spraying and mitigations. CoRR,
http://www.piotrbania.com/all/articles/
pbania-jit-mitigations2010.pdf, 2010.
[17] E. Buchanan, R. Roemer, S. Sevage, and H. Shacham.
Return-oriented programming: Exploitation without
code injection. In Black Hat ’08, 2008.
[18] D. Canali, M. Cova, G. Vigna, and C. Kruegel.
Prophiler: a fast ﬁlter for the large-scale detection of
malicious web pages. In Proceedings of the 20th
international conference on World wide web, WWW
’11, pages 197–206, New York, NY, USA, 2011. ACM.
[19] M. Cova, C. Kruegel, and G. Vigna. Detection and
analysis of drive-by-download attacks and malicious
javascript code. In Proceedings of the 19th
international conference on World wide web, WWW
’10, pages 281–290, New York, NY, USA, 2010. ACM.
[20] J. S. Cross and M. A. Munson. Deep pdf parsing to
extract features for detecting embedded malware.
Technical report, Sandia National Laboratories, 2011.
[21] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert.
Zozzle: fast and precise in-browser javascript malware
detection. In Proceedings of the 20th USENIX
conference on Security, SEC’11, pages 3–3, Berkeley,
CA, USA, 2011. USENIX Association.
[22] M. Engleberth, C. Willems, and T. Holz. Detecting
malicious documents with combined static and
dynamic analysis. Technical report, Virus Bulletin,
2009.
[23] S. Jana and V. Shmatikov. Abusing ﬁle processing in
malware detectors for fun and proﬁt. In IEEE
Symposium on Security and Privacy, pages 80–94,
2012.
[24] P. Laskov and N. ˇSrndi´c. Static detection of malicious
javascript-bearing pdf documents. In Proceedings of
the 27th Annual Computer Security Applications
Conference, ACSAC ’11, pages 373–382, New York,
NY, USA, 2011. ACM.
[25] W.-J. Li, S. Stolfo, A. Stavrou, E. Androulaki, and
A. D. Keromytis. A study of malcode-bearing
documents. In Proceedings of the 4th international
conference on Detection of Intrusions and Malware,
and Vulnerability Assessment, DIMVA ’07, pages
231–250, Berlin, Heidelberg, 2007. Springer-Verlag.
[26] D. Maiorca, G. Giacinto, and I. Corona. A pattern
recognition system for malicious pdf ﬁles detection. In
Proceedings of the 8th international conference on
Machine Learning and Data Mining in Pattern
Recognition, MLDM’12, pages 510–524, Berlin,
Heidelberg, 2012. Springer-Verlag.
[27] S. Porst. A brief analysis of a malicious pdf ﬁle which
exploits this week’s ﬂash 0-day.
http://blog.zynamics.com/, 2010.
[28] M. A. Rahman. Getting owned by malicious pdf -
analysis. Technical report, SANS Institute, 2008.
[29] P. Ratanaworabhan, B. Livshits, and B. Zorn. Nozzle:
a defense against heap-spraying code injection attacks.
In Proceedings of the 18th conference on USENIX
security symposium, SSYM’09, pages 169–186,
Berkeley, CA, USA, 2009. USENIX Association.
[30] K. Rieck, T. Holz, C. Willems, P. D¨ussel, and
P. Laskov. Learning and classiﬁcation of malware
behavior. In Proceedings of the 5th international
conference on Detection of Intrusions and Malware,
and Vulnerability Assessment, DIMVA ’08, pages
108–125, Berlin, Heidelberg, 2008. Springer-Verlag.
[31] K. Rieck, T. Krueger, and A. Dewald. Cujo: eﬃcient
detection and prevention of drive-by-download
attacks. In Proceedings of the 26th Annual Computer
Security Applications Conference, ACSAC ’10, pages
31–39, New York, NY, USA, 2010. ACM.
[32] M. Z. Shaﬁq, S. A. Khayam, and M. Farooq.
Embedded malware detection using markov n-grams.
In Proceedings of the 5th international conference on
Detection of Intrusions and Malware, and
Vulnerability Assessment, DIMVA ’08, pages 88–107,
Berlin, Heidelberg, 2008. Springer-Verlag.
[33] C. Smutz and A. Stavrou. Malicious pdf detection
using metadata and structural features. In Proceedings
of the 28th Annual Computer Security Applications
Conference, ACSAC ’12, 2012.
[34] K. Z. Snow, S. Krishnan, F. Monrose, and N. Provos.
Shellos: enabling fast detection and forensic analysis
of code injection attacks. In Proceedings of the 20th
USENIX conference on Security, SEC’11, 2011.
[35] D. Stevens. Escape from pdf. http://blog.
didierstevens.com/2010/03/29/escape-from-pdf/,
2010.
[36] D. Stevens. Free Malicious PDF Analysis.
http://didierstevens.com/files/data/
malicious-pdf-analysis-ebook.zip, 2010.
[37] D. Stevens. Malicious pdf documents explained. IEEE
Security and Privacy, 9(1):80–82, Jan. 2011.
[38] S. M. Tabish, M. Z. Shaﬁq, and M. Farooq. Malware
detection using statistical analysis of byte-level ﬁle
content. In Proceedings of the ACM SIGKDD
Workshop on CyberSecurity and Intelligence
Informatics, CSI-KDD ’09, pages 23–31, New York,
NY, USA, 2009. ACM.
[39] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and
E. P. Markatos. Combining static and dynamic
analysis for the detection of malicious documents. In
Proceedings of the Fourth European Workshop on
System Security, EUROSEC ’11, pages 4:1–4:6, New
York, NY, USA, 2011. ACM.
[40] N. ˇSrndi´c and P. Laskov. Detection of malicious pdf
ﬁles based on hierarchical document structure. In
Proceedings of the 20th Annual Network & Distributed
System Security Symposium, 2013.
[41] C. Willems, T. Holz, and F. Freiling. Toward
automated dynamic malware analysis using
cwsandbox. IEEE Security and Privacy, 5(2), March
2007.
[42] Yahoo. Search api. http://developer.yahoo.com,
December 2012.