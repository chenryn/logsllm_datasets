### Detailed Analysis of PJScan and Wepawet

PJScan does not provide a score for the root file, as it does not contain JavaScript. Additionally, PJScan cannot score PDFembed because its file parsing mechanism is unable to analyze JavaScript code within embedded PDF files. A similar issue was encountered with Wepawet, where our attacks consistently triggered internal errors, preventing any detection results. However, Wepawet was operational, as it could analyze both benign and malicious PDFs from the Contagio repository [1]. This suggests that Wepawet's inability to analyze our attacks may be due to parsing errors caused by our deliberate PDF manipulation. Jana and Shmatikov [23] have shown that such parsing errors are common in malware detectors and represent a significant vulnerability.

### JSinject Attack Findings

An interesting finding relates to the JSinject attack. While an instance of this attack can be automatically generated using the Metasploit framework [3], doing so would make the attack detectable by all PDF malware detectors. This is because the attack instance contains structural and code differences compared to benign files, highlighting the effectiveness of the reverse mimicry evasion strategy.

### Countermeasures

The experimental results in Section 6 demonstrate that, despite their accuracy in detecting in-the-wild malware, PDF malware detectors can fail against simple yet effective evasion techniques like the reverse mimicry attack described in Section 5. These detectors, which rely on PDF structural analysis, are also vulnerable to errors in the parsing process. We identify two key areas for improvement: (1) enhancing the accuracy of the file parsing process, and (2) increasing the robustness of the feature set against evasion.

#### Improving File Parsing
The first area of improvement involves the parsing process. It should:
- Be aware of the PDF versioning mechanism.
- Identify and extract all embedded content, allowing thorough analysis by content-specific detectors. For example, embedded PDF files can be analyzed by the same tools used for the root file, while other types of content (e.g., SWF or EXE) can be analyzed by specialized tools like Wepawet. The overall maliciousness of the PDF can then be determined by correlating the outputs of these specialized detectors (e.g., using an OR rule).

#### Enhancing Robustness Against Evasion
Improving the robustness of the feature set is crucial for defending against code injection. Features should be extracted from all layers described in Section 5 (STO, SUO, and CE). Combining a structural system like Malware Slayer or PDFRate with a code analyzer like PJScan can be a simple solution to enhance the robustness of the analysis.

### Proposed Framework

Based on the above discussion, we propose a framework to address adversarial attacks against PDF malware detectors. Our implementation includes:
- An enhanced parsing process that extracts any embedded content within the main PDF.
- Correlation of the outputs from Malware Slayer and PDFRate (for structural analysis), PJScan (for JavaScript analysis), and Wepawet (for JavaScript, EXE, and SWF analysis) using an OR rule. This allows for a comprehensive analysis of PDF content, combining structural and code analysis.

Table 2 shows that this new framework can detect all the attacks presented in Section 6. Here are the detailed operations performed by the framework for each attack:

- **EXEembed**: The parser successfully extracts the executable file, which is then analyzed by Wepawet, correctly identifying the exploit.
- **PDFembed**: The parser extracts the embedded PDF file and the JavaScript within it. PJScan, Malware Slayer, and PDFRate raise alerts when analyzing the embedded PDF file, and Wepawet raises an alert when analyzing the JavaScript code.
- **JSinject**: The parser extracts the JavaScript within the file. PJScan raises an alert when analyzing the main PDF, and Wepawet raises an alert when analyzing the JavaScript code.

While the correlation of different detectors improves robustness against evasion, it may also increase the rate of false alarms. Therefore, there is a tradeoff between overall accuracy and robustness. The choice of base detectors and correlation rules should be tailored to achieve the desired balance. Further research is needed to explore this aspect in more detail.

### Conclusions

Malicious PDF files pose a significant threat, and recent work has shown that they can be accurately detected through structural analysis. However, skilled attackers can easily evade such detectors by mimicking the structure of benign PDF documents. In this paper, we developed and implemented a novel attack methodology called reverse mimicry, demonstrating its effectiveness against various PDF malware detectors. Surprisingly, even detectors using non-structural features can be evaded due to parsing errors.

This case study underscores the importance of developing malware detection systems robust to adversarial attacks. As a countermeasure, we proposed a framework based on accurate PDF parsing and the correlation of outputs from different PDF malware detectors. This framework can detect all attack instances in this work and is a promising solution for future research.

### Acknowledgements

This work is supported by the Regional Administration of Sardinia, Italy, within the project “Advanced and secure sharing of multimedia data over social networks in the future Internet” (CUP F71J11000690002). Davide Maiorca gratefully acknowledges the financial support from the Sardinia Regional Government for his PhD scholarship (P.O.R. Sardegna F.S.E. Operational Programme of the Autonomous Region of Sardinia, European Social Fund 2007-2013 - Axis IV Human Resources, Objective l.3, Line of Activity l.3.1.).

### References

[1] Contagio. http://contagiodump.blogspot.it.
[2] Malware tracker. http://www.malwaretracker.com/pdfthreat.php.
[3] Metasploit framework. Http://www.metasploit.com/.
...
[42] Yahoo. Search API. http://developer.yahoo.com, December 2012.