to develop forensics analysis and detection of Advanced
Persistent Threats (APT) [74–76]. This dataset records the
attack traces of various vulnerability exploits on different
operating systems (e.g., Linux and Windows). Based on the
attack descriptions, we exclude the failed attacks and use 8
attacks in our evaluations (∼ 50 million events).
Labeling Ground Truth: We build system dependency
graphs via the cross-host backward causality analysis [9] from
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
549
198
47
56
68
A4
1,641
70
91
114
A3
2,403
86
123
147
A1 A2
157
538
74
68
82
93
115
84
Nodoze
DEPCOMM (Top-1)
DEPCOMM (Top-2)
DEPCOMM (Top-3)
A5 A6 D1
727
612
27
77
109
30
121
32
the POI events. We use the attack scripts and the attack
descriptions to identify the POI events and the attack-related
events for the attacks performed in our test environment and
DARPA TC dataset, respectively. The detailed statistics of the
dependency graphs are shown in Table III. Column “Dep.
Graph” shows the number of nodes and edges of original de-
pendency graphs. Column “Pre-processed Dep. Graph” shows
the number of nodes and edges of graphs after the pre-
processing (i.e., merging edges and ﬁltering read-only ﬁle).
Column “Attack” shows the number of attack-relevant nodes
and edges. Finally, we manually partition each dependency
graph into communities. Specially, we ﬁrst identify the pro-
cesses that are created by the identical parent processes and
are related to each other by checking whether they have data
dependencies through resources. Each group of the related
processes are put into a community. We then label the parent
process as the master process of the community, and associate
the resource nodes to the found communities according to their
dependencies with the process nodes. To further obtain more
objective ground truths, three independent experts are asked
to verify our ground truths. These experts have Ph.D. degrees
of computer sciences and have been conducting research in
computer system ﬁeld for more than ten years. We revise our
ground truths if at least two experts consider certain nodes
should belong to different communities. All these results are
available at our project website [49]. Column “|C|” shows the
number of communities that are manually partitioned.
B. RQ1: Overall Effectiveness of DEPCOMM
We applied DEPCOMM to generate summary graphs for
the dependency graphs shown in Table III, and measured
the number of the detected communities and their sizes to
demonstrate the effectiveness of DEPCOMM. Fig. 7 shows
the results of the detected communities. We can see that
DEPCOMM partitions the dependency graphs into 18.4 com-
munities on average. Compared with the original dependency
graphs, which have 1, 302.1 nodes on average, it is 70.7 times
smaller. These results indicate that with the much smaller
number of communities,
the
communities for security analysts to easily see the overview of
all the related system activities. We can also see that the largest
number of communities is 48 for Phishing Email (C.S), which
includes different system tasks (e.g., browsing web pages in
Firefox, sending or receiving E-mail and calendar service).
is feasible to visualize all
it
We next show the distributions of community sizes (the
number of nodes in each community) for the 14 attacks in
Fig. 8. As we can see, the community sizes are relatively
small (15.7 nodes on average), which greatly reduce security
analysts’ efforts in inspecting each community. Compared with
the original dependency graphs, these results also show that the
community compression is quite effective in compressing the
D4
7,160
127
180
208
D5
2,752
44
68
76
D7
2,257
36
45
55
D8
1,744
33
40
52
D6
2,631
45
65
81
D3
5,337
122
171
202
Average
2,235.14
66.07
89.07
105.28
D2
3,135
69
94
119
redundant edges, reducing 216.4 redundant edges on average
for each community. Furthermore, the summary graphs need
only 2.26MB on average to store the summary graphs, while
the original dependency graphs need 344.32MB on average.
We also compare against the state-of-the-art dependency
graph reduction approach, NoDoze [14]. Nodoze learns an
execution proﬁle from benign system behaviors and reduces
a dependency graph based on the anomaly scores computed
using the proﬁle for each path in the dependency graph. We
use the events collected when the hosts are not under attack
to generate the execution proﬁle. We compare the number
of events in the top-1, top-2, and top-3 InfoPaths for all the
communities with the events identiﬁed by NoDoze, as shown
in Table IV. Top-3 InfoPaths of DEPCOMM have averagely
∼ 21× less edges than NoDoze. NoDoze achieves poor per-
formances since its effectiveness heavily depends on whether
an execution proﬁle can cover all the benign events and is
representative, which is very difﬁcult due to the versatility
of runtime environment of most systems. Thus, the execution
proﬁle learned from one system is difﬁcult to generalize to
other systems. DEPCOMM does not suffer from the same
limitations as DEPCOMM does not require extra execution
proﬁles.
Case Study. We here illustrate how summary graphs can
be used to facilitate attack investigation. Fig. 9 shows the
summary graph generated by DEPCOMM for the attack D5
in the DARPA dataset. DEPCOMM partitions the dependency
graph into 13 process-centric communities. Fig. 9(a) shows 4
communities (C1-C4), and Fig. 9(b) shows the corresponding
summary graph, where the top-1 InfoPath is used as the
community summary. C2 contains the POI event, and thus
is an attack-related community. From the 8 events in C2,
we can easily identify 8 attack events (red edges). These
attack events represent
the attack behaviors that open an
backdoor to the attacker’s console using mail. Based on the
InfoPaths of C1 and C2, we can see that C1 is another attack-
related community. Similarly, it is easy to identify another 7
attack-related events from 17 events in C1, which represents
the attack behavior of downloading the malicious ﬁle /home
/admin/profile. By inspecting the InfoPaths, we can further
identify C3 and C4 via their dependencies on C1. However,
the outputs of their InfoPaths are not the same as the input
of C1’s InfoPaths. Thus, C3 and C4 are not attack-related
communities. In summary, we reveal the attack-related events
of the attack D5 by inspecting only 25 events out of the 37, 109
events in the original graph.
TABLE IV: Statistics of edges generated by DEPCOMM and NoDoze
C. RQ2: Cooperation with HOLMES
We next illustrate how DEPCOMM cooperates with one of
the state-of-the-art investigation technique, HOLMES [32].
HOLMES builds a high-level scenario graph (HSG) that
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 
550
xxx->xxx
firefox
8130
fluxbox
8063
firefox
8183
xxx->xxx
../glx_alsa_675
../glx_alsa_675
C1
C2
/home/admin/profile
/home/admin/profile
. . .
. . .
fluxbox
4126
xxx->xxx
. . .
fluxbox
3475
thunder
3507
C3
firefox
4167
../cookies.sqlite
../glx_alsa_675
xxx->xxx
../global-messages-
db.sqlite
C4
profile
14370
clean
5
profile
8187
mail
14370
(cid:41)(cid:76)(cid:79)(cid:72)(cid:3)
(cid:49)(cid:82)(cid:71)(cid:72)
C1
Master: fluxbox
Time: 2018-04-11 02:53:23 
~ 2018-04-11 02:56:32 
InfoPaths:  (xxx->xxx)→ 
fluxbox→firefox→firefox→/
home/admin/profile  [0.4743]
../glx_al
sa_675
C3
Master: fluxbox
Time: 2018-04-11 01:28:17 
~ 2018-04-11 01:28:17 
InfoPaths: (xxx->xxx)→ 
flubox→firefox→../cookies
.sqlite[0.4591]
/home/admin
/profile
C2
Master: clean
Time: 2018-04-13 01:16:49 ~ 
2018-04-13 01:17:04 
InfoPaths: /home/admin/profile 
→profile→profile→/var/log/ma
il→mail→(xxx->xxx) [0.7368]
POI
C4
Master: fluxbox
Time: 2018-04-11 01:07:25 
~ 2018-04-11 01:08:07 
InfoPaths: (xxx->xxx)→ 
fluxbox→firefox→../global-
messages-db.sqlite [0.4259]
/var/log/mail
xxx->xxx
POI
(cid:51)(cid:85)(cid:82)(cid:70)(cid:72)(cid:86)(cid:86)(cid:3)
(cid:49)(cid:82)(cid:71)(cid:72)
(cid:53)(cid:72)(cid:83)(cid:79)(cid:76)(cid:70)(cid:68)(cid:3)
(cid:82)(cid:73)(cid:3)(cid:68)(cid:3)(cid:49)(cid:82)(cid:71)(cid:72)
Attack Case
A1: Email Penetration
A2: Compile Crash
A3: Files Tamper
A4: Data Exﬁltration
A5: Password Crack
A6: VPN Filter
(cid:49)(cid:72)(cid:87)(cid:90)(cid:82)(cid:85)(cid:78)(cid:3)
(cid:49)(cid:82)(cid:71)(cid:72)
(cid:39)(cid:72)(cid:83)(cid:72)(cid:81)(cid:71)(cid:72)(cid:81)(cid:70)(cid:92)
(cid:36)(cid:87)(cid:87)(cid:68)(cid:70)(cid:78)(cid:16)(cid:53)(cid:72)(cid:79)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)
(cid:40)(cid:89)(cid:72)(cid:81)(cid:87)(cid:86)
(cid:38)(cid:82)(cid:80)(cid:80)(cid:88)(cid:81)(cid:76)(cid:87)(cid:92)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:3)
(cid:36)(cid:87)(cid:87)(cid:68)(cid:70)(cid:78)(cid:16)(cid:53)(cid:72)(cid:79)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)(cid:40)(cid:89)(cid:72)(cid:81)(cid:87)(cid:86)
(cid:38)(cid:82)(cid:80)(cid:80)(cid:88)(cid:81)(cid:76)(cid:87)(cid:92)(cid:3)(cid:90)(cid:76)(cid:87)(cid:75)(cid:82)(cid:88)(cid:87)(cid:3)
(cid:36)(cid:87)(cid:87)(cid:68)(cid:70)(cid:78)(cid:16)(cid:53)(cid:72)(cid:79)(cid:68)(cid:87)(cid:72)(cid:71)(cid:3)(cid:40)(cid:89)(cid:72)(cid:81)(cid:87)(cid:86)
(cid:44)(cid:81)(cid:73)(cid:82)(cid:85)(cid:80)(cid:68)(cid:87)(cid:76)(cid:82)(cid:81)(cid:3)(cid:41)(cid:79)(cid:82)(cid:90)(cid:3)
(cid:68)(cid:80)(cid:82)(cid:81)(cid:74)(cid:3)(cid:53)(cid:72)(cid:83)(cid:79)(cid:76)(cid:70)(cid:68)(cid:86)
(a) Process-centric communities
(cid:40)(cid:71)(cid:74)(cid:72)(cid:16)(cid:69)(cid:68)(cid:86)(cid:72)(cid:71)(cid:3)
(cid:39)(cid:72)(cid:83)(cid:72)(cid:81)(cid:71)(cid:72)(cid:81)(cid:70)(cid:92)
(cid:49)(cid:82)(cid:71)(cid:72)(cid:16)(cid:69)(cid:68)(cid:86)(cid:72)(cid:71)(cid:3)
(cid:39)(cid:72)(cid:83)(cid:72)(cid:81)(cid:71)(cid:72)(cid:81)(cid:70)(cid:92)
(b) Summary graph
Fig. 9: Communities and summary graph for the attack D5
TABLE V: Kill Chain Steps for attack-related communities
Kill Chain Steps for Attack-Related Communities (AC)
AC1: Initial Compromise (Top-2); AC2: -; AC3: Complete Mission (Top-1); AC4: Complete Mission (Top-1); AC5: Complete Mission (Top-1)
AC1: Initial Compromise (Top-1); AC2: -; AC3: Complete Mission (Top-1)
AC1: Initial Compromise (Top-1); AC2: Internal Recon (Top-2); AC3: Internal Recon (Top-2); AC4: Internal Recon (Top-2); AC5: Internal
Recon (Top-1); AC6: Complete Mission (Top-1)
AC1: Initial Compromise (Top-1); AC2: Establish Foothold (Top-1), Privilege Escalation (Top-1); AC3: Internal Recon (Top-2), Complete Mission
(Top-1)
AC1: Initial Compromise (Top-1); AC2: Establish Foothold (Top-1), Privilege Escalation (Top-1); AC3: Complete Mission (Top-1)
AC1: Initial Compromise (Top-1); AC2: Establish Foothold (Top-1), Privilege Escalation (Top-1); AC3: Privilege Escalation (Top-1), Internal
Recon (Top-1); AC4: Initial Compromise (Top-1); AC5: Complete Mission (Top-1); AC6: Internal Recon (Top-2), Complete Mission (Top-1)
AC1: Initial Compromise (Top-1), Establish Foothold (Top-1)
AC1: Initial Compromise (Top-1), Establish Foothold (Top-1)
AC1: Initial Compromise (Top-1), Establish Foothold (Top-1), Internal Recon (Top-2)
AC1: Initial Compromise (Top-1), Establish Foothold (Top-1)
AC1: Initial Compromise (Top-1); AC2: Establish Foothold (Top-1)
D1: Phishing Email (C.S.)
D2: Phishing Email (F.D.)
D3: Firefox Backdoor (F.D.)
D4: Browser Extension (F.D.) AC1: Initial Compromise (Top-1), Complete Mission (Top-1)
D5: Browser Extension (Theia) AC1: Initial Compromise (Top-1); AC2: Establish Foothold (Top-1)
D6: Firefox Backdoor (Theia) AC1: Initial Compromise (Top-1); AC2: Establish Foothold (Top-1)
D7: Phishing Email (Theia)
D8: Pine Backdoor (Trace)
integrates the TTP (Tactics, Techniques, and Procedures) [77],
an important indicator for describing the steps of Advanced
Persistent Threats (APT), and uses the HSG to map the
low-level event information ﬂows to the steps in the Kill
Chain [48]. In this evaluation, we ﬁrst build the HSGs for the
14 attack cases, and then use the HSG to map the top-ranked
InfoPaths to the steps in the Kill Chain.
Table V shows the mapping results for attack-related com-
munities. We can observe that the Top-2 InfoPaths are sufﬁ-
cient to ﬁnd the Kill Chain. We also manually inspect these
InfoPaths to create the mappings, and conﬁrm that most of
the mappings found by the HSGs agree with our manual
mappings. In total, HOLMES identiﬁes 35 out of the 37 attack-
related communities, achieving a recall of 96.2%. HOLMES
fails to map two attack-related communities (AC2 of A1 and
AC2 of A2) to the Kill Chain. The attack behavior in AC2 of
A1 is to download a modiﬁed software application to the host
of a victimized employee from the corporation’s resource web
and executing the software application, where the resource
server has a trusted IP and the modiﬁed software application
has a trusted ﬁle name. Therefore, the activities in AC2 cannot
be captured by the TTP rule of HOLMES. Nevertheless, while
HOLMES’s rules fail to map AC2, the InfoPaths computed by
DEPCOMM can be used to complement HOLMES’s rules. In
fact, AC2 has an InfoPath from the attack-related community
AC1, which represents the attack behavior of uploading the
modiﬁed software application to the resource web, and has an-
other InfoPath that leads to another attack-related community
AC3, which represents the attack behavior of tampering the
system ﬁles /etc/mail.rc for email server. Thus, the activities
in AC2 form an indispensable step of the attack A1, and can be
easily inferred as an attack-related community after inspecting
these InfoPaths. HOLEMS fails to map the attack behaivor in
AC2 of A2 for the similar reason. AC2 of A2 describe the
actitivies that a compiler CC1 reads an anomaly ﬁle that is
created by AC1 and generates an incorrect binary ﬁle that
is the input node of AC3. Unfortunately anomaly ﬁle access
activities are not included in the TTP rules of HOLMES, and
thus AC2 cannot be mapped. Similarly, AC2 has two InfoPaths
that connect to two attack-related communities, AC1 and AC3,
which makes the activities in AC2 an indispensable step of
the attack A2 as well. These results show that DEPCOMM can
easily cooperate with other automatic techniques to highlight
the attack-related communities and help security analysts to
recognize residual attack-related communities missed by the
automatic techniques.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:12:11 UTC from IEEE Xplore.  Restrictions apply. 