### Development of Forensic Analysis and Detection of Advanced Persistent Threats (APT)

This dataset captures the attack traces from various vulnerability exploits on different operating systems, such as Linux and Windows. Based on the attack descriptions, we exclude failed attacks and use 8 successful attacks in our evaluations, which encompass approximately 50 million events.

#### Labeling Ground Truth

We construct system dependency graphs using cross-host backward causality analysis [9] from the Points of Interest (POI) events. The POI events are identified using attack scripts and attack descriptions for the attacks performed in our test environment and the DARPA TC dataset. Table III provides detailed statistics of the dependency graphs:

- **Dep. Graph**: Number of nodes and edges in the original dependency graphs.
- **Pre-processed Dep. Graph**: Number of nodes and edges after preprocessing (merging edges and filtering read-only files).
- **Attack**: Number of attack-relevant nodes and edges.
- **|C|**: Number of communities manually partitioned.

Each dependency graph is manually partitioned into communities by first identifying processes created by identical parent processes and checking for data dependencies through resources. These related processes are grouped into communities, with the parent process labeled as the master process. Resource nodes are associated with these communities based on their dependencies with process nodes. To ensure accuracy, three independent experts with Ph.D. degrees in computer science and over ten years of research experience in computer systems verify the ground truths. Revisions are made if at least two experts disagree on the community assignments. All results are available on our project website [49].

### B. RQ1: Overall Effectiveness of DEPCOMM

We applied DEPCOMM to generate summary graphs for the dependency graphs in Table III, measuring the number and size of detected communities to demonstrate its effectiveness. Figure 7 shows the results, indicating that DEPCOMM partitions the dependency graphs into an average of 18.4 communities. This is 70.7 times smaller than the original dependency graphs, which have an average of 1,302.1 nodes. This significant reduction makes it feasible to visualize all communities, allowing security analysts to easily see the overview of related system activities.

Figure 8 illustrates the distribution of community sizes (average of 15.7 nodes per community), which significantly reduces the effort required for inspection. Compared to the original dependency graphs, DEPCOMM effectively compresses redundant edges, reducing an average of 216.4 edges per community. The summary graphs require only 2.26MB of storage on average, compared to 344.32MB for the original dependency graphs.

We also compare DEPCOMM with NoDoze [14], a state-of-the-art dependency graph reduction approach. NoDoze learns an execution profile from benign system behaviors and reduces the dependency graph based on anomaly scores. Using the events collected when hosts are not under attack to generate the execution profile, we compare the number of events in the top-1, top-2, and top-3 InfoPaths for all communities with those identified by NoDoze (Table IV). Top-3 InfoPaths of DEPCOMM have approximately 21 times fewer edges than NoDoze. NoDoze's performance is poor due to its reliance on a comprehensive and representative execution profile, which is challenging to achieve given the variability of runtime environments. DEPCOMM does not suffer from this limitation as it does not require extra execution profiles.

### Case Study

Figure 9 illustrates how summary graphs can facilitate attack investigation. For the attack D5 in the DARPA dataset, DEPCOMM partitions the dependency graph into 13 process-centric communities. Figure 9(a) shows 4 communities (C1-C4), and Figure 9(b) displays the corresponding summary graph, where the top-1 InfoPath is used as the community summary. C2 contains the POI event and is thus an attack-related community. From the 8 events in C2, 8 attack events (red edges) are easily identified, representing the attack behavior of opening a backdoor via email. Similarly, C1 is another attack-related community, with 7 attack-related events out of 17, representing the downloading of a malicious file. By inspecting the InfoPaths, we can identify C3 and C4, but they are not attack-related as their outputs do not match the input of C1â€™s InfoPaths. In summary, we reveal the attack-related events of D5 by inspecting only 25 events out of 37,109 in the original graph.

### C. RQ2: Cooperation with HOLMES

We illustrate how DEPCOMM cooperates with HOLMES [32], a state-of-the-art investigation technique. HOLMES builds a high-level scenario graph (HSG) that integrates TTP (Tactics, Techniques, and Procedures) [77], an important indicator for APT steps, and maps low-level event information flows to the Kill Chain [48]. We build HSGs for the 14 attack cases and use them to map the top-ranked InfoPaths to the Kill Chain steps (Table V).

The results show that the Top-2 InfoPaths are sufficient to find the Kill Chain. Manual inspection confirms that most mappings found by the HSGs agree with our manual mappings. HOLMES identifies 35 out of 37 attack-related communities, achieving a recall of 96.2%. It fails to map two communities (AC2 of A1 and AC2 of A2) due to specific attack behaviors not captured by HOLMES's TTP rules. However, DEPCOMM's InfoPaths can complement HOLMES's rules, making it easier to recognize residual attack-related communities missed by automatic techniques.

These results demonstrate that DEPCOMM can effectively cooperate with other automatic techniques to highlight attack-related communities and assist security analysts in recognizing missed attack-related activities.