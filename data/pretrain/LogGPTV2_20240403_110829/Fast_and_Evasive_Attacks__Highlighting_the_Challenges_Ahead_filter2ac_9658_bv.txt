### Message Overhead and Scalability

In general, the message overhead ranges from 2% to 30%. Figure 9 illustrates that as the number of nodes increases, the message overhead decreases. This reduction is primarily due to the frequency of ID-Evidence messages, which constitute the majority of the message overhead, not increasing as significantly as Hello and Topology Control (TC) messages when the number of nodes grows. Consequently, DEMEM (Distributed Evidence-Driven Message Exchange Intrusion Detection) demonstrates better scalability compared to OLSR (Optimized Link State Routing) because of its localized message exchange behavior.

### Impact of Node Mobility on Overhead

A decrease in node mobility can influence the overhead ratio. Figure 10 shows the effect of node speed on message overhead in a topology with 10 nodes. When the maximum node speed is halved, the overhead also decreases by approximately half. However, if the pause time is increased by 30, 60, 120, or 300 seconds, the overhead decreases only marginally. This suggests that higher node speeds may lead to more frequent topology changes, thereby increasing the message overhead required to manage these changes.

### Detection Accuracy

#### Transient Inconsistencies (T.I.)

When the detector first identifies message inconsistencies for conditions C1 and C3, about half of these inconsistencies persist in subsequent messages, referred to as "lasting T.I." Note that condition C2 does not generate T.I. (see Section 5.7). If the duration of lasting T.I. exceeds the alarm threshold, it results in a false positive. Figure 11 displays the average and maximum T.I. for C1 and C3, with alert thresholds set at 16 seconds for C1 and 15 seconds for C3. In a 150-node topology with the highest mobility (maximum 20 m/s node speed and 0 pause time), up to 3 false positives can occur for C1. Given that 150 nodes generate approximately 6,000 Hello messages, the false positive rate is at most 0.05% and, on average, 0.01%. By raising the threshold to 20 seconds for C1, the false positive rate can be nearly zero. Therefore, some 150-node topologies may have a few false positives in C1, while others will have none in both C1 and C3.

### Detection Latency

Figure 12 presents the average and maximum waiting times for ID-Evidence messages. The maximum waiting time is around 13 seconds, which is less than the alert thresholds for C1 and C3. Generally, the waiting time is shorter than the lasting T.I. time for C1 and C3, making the detection latency for C2 lower. The average detection latency for C2 is 6 seconds, and for C1 and C3, it is fixed at their respective alert thresholds of 16 and 15 seconds.

The results in Figures 11 and 12 are based on the highest mobility (maximum 20 m/s with no pause time). Topologies with fewer nodes or lower mobility (half node speed or higher pause time) exhibit slightly shorter average T.I. durations but have a lower likelihood of encountering longer maximum T.I. durations. Thus, they can use lower alarm thresholds for C1 and C3 (as low as 10 seconds) and also have shorter ID-Evidence message waiting times, leading to lower detection latencies.

### Stable Topology

In a Mobile Ad-hoc Network (MANET) where nodes do not move, the network is referred to as a Mesh network. DEMEM performs significantly better in such stable topologies. The message overhead ranges from 0.5% (in a 150-node network) to 3% (in a 10-node network). As the number of nodes increases, the message overhead decreases because the number of forwarded TC messages grows more than the number of ID messages. Since most transient inconsistencies (T.I.) occur during the initial network setup, longer simulation times result in lower message overhead.

For detection accuracy, the T.I. for C1 is at most 4 seconds, and for C3, it is 5 seconds. The alarm thresholds for C1 and C3 can be reduced to 6 seconds, eliminating false positives and negatives. The ID-Evidence message waiting time, which also represents the detection latency for C2, is at most 4 seconds and, on average, 2 seconds. The detection latency for C1 and C3 is their reduced alarm threshold of 6 seconds. Thus, DEMEM in OLSR demonstrates excellent performance in stable topologies.

### Ongoing Work

#### DEMEM in AODV and DSR with TESLA

Reactive protocols like AODV and DSR typically produce fewer routing messages to establish routes compared to proactive protocols like OLSR, which use periodic routing messages. Additionally, reactive protocols' routing messages are generally smaller and provide less routing information. Consequently, an Intrusion Detection System (IDS) in reactive protocols may generate higher message overhead. Furthermore, in reactive protocols, the receiver of a broadcast routing message cannot determine the complete set of nodes that received the same message, making it challenging to validate related routing messages, especially RREP messages generated by intermediate nodes.

We plan to adapt the "Previous Node" approach [11] as evidence for DEMEM in reactive protocols to address these challenges. For example, in AODV, "Evidence" consists of the Sequence Number and Hop Count of a routing message. When a node receives an RREQ message, it buffers the sequence number and hop count along with the sender's address as an "Evidence certificate." As the node forwards the RREQ message, it includes this certificate to prove that it did not forge the message.

We also plan to use TESLA to authenticate the certificates, developing a hop count authentication algorithm and ID messages to manage TESLA keys. We will start with AODV, the most popular reactive protocol, and may implement DEMEM in DSR using a similar approach. The new work will be evaluated using the four performance metrics outlined in Section 6.2.

This work can also authenticate forwarded messages, such as TC messages in OLSR. If an attacker forges the content in a forwarded TC message, the receiver can authenticate the message to detect the attack, addressing the second assumption in Section 5.2 and the fourth attack method in Section 5.1.

#### Reputation-Based Cooperative Intrusion Response Model

In DEMEM, each node independently determines attacks and raises alerts. We plan to develop a cooperative intrusion response model [23] to establish trust management among nodes. This model will include a reputation-based algorithm to track security constraint violations and calculate the trustworthiness of neighbors. When a node detects a new violation, it can perform an appropriate and advanced intrusion response based on the neighbor's trust score.

We also plan to develop a voting mechanism to validate intrusion alerts. If a node raises an alert against a malicious neighbor, other neighbors of the malicious node may raise the same alert, particularly if the malicious node has broadcasted a forged routing message. This voting mechanism can reduce false positives and forged alerts, as all neighbors of the malicious node should have the same alert. This work complements the current paper, and we plan to integrate this new response model with DEMEM to create a comprehensive intrusion detection and response framework for MANETs. We will also enhance our packet dropping attack detection to better handle this attack in the response model, addressing the third assumption in Section 5.2.

#### DEMEM in TBRPF

TBRPF and OLSR are both well-known proactive routing protocols in MANETs. TBRPF uses the "Source Tree" to calculate the routing table, with nodes exchanging partial source trees to establish and update their complete source tree. We plan to extract critical values as evidence in DEMEM, develop detection constraints to validate TBRPF routing messages, and create ID messages to exchange the necessary new evidence for message validation. Since TBRPF is similar to OLSR, the structure of DEMEM in TBRPF should be comparable. TBRPF does not have flooding messages, so the detectors do not need to authenticate such messages, leading to similar performance in TBRPF as in OLSR.

### Conclusion

DEMEM is a scalable and effective model due to its local message exchange and local intrusion detection mechanism, which does not modify the original protocol. It includes ID messages and five ID managers to provide sufficient evidence and perform intrusion detection with low message overhead. These features address the unique challenges of intrusion detection in MANETs. The implementation of DEMEM in OLSR successfully detects OLSR routing attacks using three new purpose ID messages: ID-Evidence, ID-Forward, and ID-Request. The four performance metrics demonstrate that DEMEM can detect OLSR attacks with low message overhead, low detection delay, very low false positives, and no false negatives under message loss and mobility conditions, with even better results in no-mobility scenarios. We have discussed several ongoing works, including implementing DEMEM in other protocols and developing a sophisticated reputation-based intrusion response model to further improve DEMEM.