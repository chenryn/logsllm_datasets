In  general,  message  overhead  is  between  2  and  30%.  Fig.  9  shows  that  message 
overhead  decreases  as  the  number  of  nodes  increases.  The  main  reason  is  the 
frequency  of  ID-Evidence  messages,  which  is  the  majority  of  messaged  overhead, 
does  not  increase  as  much  as  Hello  and  TC  messages  while  number  of  nodes 
increases. Thus, DEMEM is more scalable than OLSR because of its local message 
exchanging behavior.  
If  mobility  degree  decreases,  it  may  impact  overhead  ratio.  Fig.  10  shows  the 
impact  of  node  speed  for  the  message  overhead  in  a  10  nodes  topology.  When 
maximum  node  speed  decreases  by  half,  then  the  overhead  also  decreases  by  half. 
However, if pause time increases by 30, 60, 120, or 300 seconds, then the overhead 
decreases  only  slightly.  Thus,  increased  node  speed  may  cause  more  topology 
changes, resulting in more message overhead to confront these changes.  
2.  Detection  Accuracy.  Considering  T.I.,  when  the  detector  first  detects  message 
inconsistencies for C1 and C3, about half of these inconsistencies will still occur in 
the next messages; these are called “lasting T.I.”. Note that C2 does not generate T.I. 
(see 5.7). If the lasting T.I. time is longer than the alarm thresholds, it becomes a false 
DEMEM: Distributed Evidence-Driven Message Exchange Intrusion Detection 
267 
positive.  Fig.  11  shows  the  average  and  maximum  T.I.  for  C1  and  C3.  The  alert 
threshold is 16 seconds in C1 and 15 seconds in C3. At most, 3 false positives for C1 
occur  in  a  150  node  topology  with  the  highest  mobility  degree  (max  20  m/s  node 
speed and 0 pause time). 150 nodes generate about 6000 Hello messages so that the 
false positive rate is at most 0.05% and 0.01% in average. If we raise the threshold to 
be 20 seconds for C1, the false positive rate can be almost 0. Thus, some 150 node 
topologies may have few false positives in C1, while the others have no false positive 
in C1 and C3. 
3.  Detection Latency. Fig. 12 shows the average and maximum time of ID-Evidence 
Message  waiting  time.  The  maximum  is  about  13  seconds,  less  than  the  alert 
thresholds of C1 and C3. In general, the waiting time is less than lasting T.I. time of 
C1  and  C3,  so  detection  latency  of  C2  is  less  than  that  of  C1  and  C3.  Detection 
latency in C2 is 6 in average, and if C1 and C3 is fixed to alarm thresholds, 16 and 15 
seconds. 
The results shown in Fig. 11 and 12 are produced with the highest mobility (max 
20  m/s  with  no  pause  time).  Topologies  with  a  lower  number  of  nodes  or  mobility 
degree (half node speed or higher pause time) have slightly less T.I. average lasting 
time,  but  they  have  fewer  chances  to  encounter  larger  maximum  T.I.  lasting  time; 
thus, they can have lower alarm thresholds for C1 and C3 (as low as 10 seconds). In 
addition,  they  also  have  lower  ID-Evidence  message  waiting  time.  Therefore, 
topologies with less nodes or lower mobility have lower detection latency. 
B.  Stable  Topology.  If  nodes  in  a  MANET  do  not  move,  the  MANET  is  called  a 
Mesh  network.  DEMEM  in  OLSR  has  much  better  results  in  a  Mesh  network. 
Message overhead ranges from 0.5% (150 node) to 3% (10 node). Message overhead 
decreases  as  the  number  of  nodes  increases,  because  the  number  of  forwarded  TC 
messages  grows  much  more  than  the  number  of  ID  messages.  Because  most  T.I. 
occurs during the initial  network set-up, simulation  with longer  simulation time  has 
less message overhead.  
For  detection  accuracy,  C1’s  T.I.  is  at  most  4  seconds;  C3  T.I.,  5  seconds.  The 
alarm  thresholds  in  C1and  C3  can  be  reduced  to  6  seconds.  Thus,  there  is  no  false 
positive or negative. ID-Evidence Message waiting time, which is also the detection 
latency for C2, is at most 4 seconds and 2 seconds on average. Detection latency in 
C1 and C3 is their reduced alarm threshold, 6 seconds. Thus, DEMEM in OLSR has 
great performance in stable topologies. 
7   Ongoing Work 
7.1   DEMEM in AODV and DSR with TESLA  
Reactive protocols (such as AODV and DSR) usually produce less routing messages 
to  establish  routes  than  proactive  protocols  (such  as  OLSR),  which  use  periodical 
routing messages. Also, routing messages of reactive protocols usually have a smaller 
message size and provide less routing information than those of proactive protocols. 
So an IDS in reactive protocols may generate relatively higher message overhead than 
that  in  proactive  protocols.  In  addition,  in  reactive  protocols,  the  receiver  of  a 
broadcast  routing  message  cannot  know  the  complete  set  of  nodes  who  actually 
268 
C.H. Tseng et al. 
receive  the  same  message.  Thus,  the  receiver  can  neither  know  the  exactly  1-hop 
neighbor list of the message sender nor the set of nodes becoming the neighbors of the 
sender  due  to  receiving  the  sent  message.  Therefore,  it  is  challenging  for  a  node  to 
trace the routing impact of a received routing message in order to validate the other 
related  received  routing  messages,  especially  RREP  messages  generated  by 
intermediate nodes. 
We first plan to adapt the “Previous Node” approach [11] as evidence for DEMEM 
in  reactive  protocols  to  overcome  the  new  challenges.  For  example,  “Evidence”  in 
AODV is the set of Sequence Number and Hop Count of a routing message. When a 
node receives a RREQ message, the node buffers the sequence number and hop count 
in  the  message  with  the  sender’s  address  as  an  “Evidence  certificate.”  As  the  node 
forwards this RREQ message, the node should provide the certificate along with the 
message to show that the node did not forge the message.  
Second, we plan to use TESLA to authenticate the certificate. We will develop a 
hop count authentication algorithm and some ID messages to manage TESLA keys. 
We  will  choose  AODV  first  because  AODV  is  the  most  popular  reactive  protocol, 
and we may also implement DEMEM in DSR with the same approach. Then, we will 
evaluate this new work by the four performance metrics in 6.2. 
In  addition,  this  work  can  also  authenticate  the  forwarded  message,  such  as  the 
forwarded TC messages in OLSR. If an attacker uses attack method 4 in 5.1 to forge 
the  content  in  a  forwarded  TC  message,  the  receiver  can  authenticate  the  message 
signed to detect the attack. Thus, this work can also resolve the second assumption in 
5.2 and the attack method 4 in 5.1. 
7.2   Reputation-Base Cooperative Intrusion Response Model 
In  DEMEM,  each  node  determines  attacks  and  raises  alerts  on  its  own.  In  this 
ongoing  work,  we  plan  to  develop  a  cooperative  intrusion  response  model  [23]  to 
establish the trust management among the nodes. We will develop a reputation-based 
algorithm to trace the security constraint violation history  to calculate the credits of 
neighbors. While a node detects a new violation, the node can perform a proper and 
advanced intrusion response according to the credit of the neighbor causing the new 
violation.  
We  also  plan  to  develop  a  voting  mechanism  to  justify  intrusion  alerts.  While  a 
node raises an alert against a malicious neighbor of the node, the other neighbors of 
the malicious node may also raise the same alert, especially if the malicious node has 
broadcasted a forged routing message. Note that most routing messages are broadcast 
messages. The voting mechanism can reduce the potentially false positives and forged 
alerts since all the neighbors of the malicious node should have the same alert. This 
work can be a perfect complement for the work in this paper. We plan to integrate this 
new  response  model  with  DEMEM  as  a  new  complete  intrusion  detection  and 
response  framework  for  MANET.  Since  the  response  model  and  several  packets 
dropping attack detection works are reputation-based, we plan to develop our packet 
dropping  attack  detection  to  handle  this  attack  better  in  the  response  model  and  to 
resolve the third assumption in 5.2. 
DEMEM: Distributed Evidence-Driven Message Exchange Intrusion Detection 
269 
7.3   DEMEM in TBRPF 
TBRPF and OLSR are both famous proactive routing protocols in MANET. TBRPF 
uses the “Source Tree” to calculate the routing table. Nodes in TBRPF exchange their 
partial source trees to establish and update their complete source tree. First, we plan to 
extract the critical values as evidence in DEMEM. Second, we will develop detection 
constraints  to  validate  the  TBRPF  routing  message.  Third,  we  will  develop  an  ID 
message  to  exchange  the  required  new  evidence  for  the  constraints  for  message 
validation. Because TBRPF is close to OLSR in nature, the structure of DEMEM in 
TBPRF should be close to that in OLSR. In addition, TBRPF does not have flooding 
messages  so  the  detectors  do  not  require  authenticating  the  flooding  messages  like 
OLSR. Thus, performance of DEMEM in TBRPF can be similar to that in OLSR. 
8   Conclusion 
First,  DEMEM  is  a  scalable  and  effective  model  because  of  its  local  message 
exchange  and  its  local  intrusion  detection  mechanism  that  does  not  modify  the 
original  protocol.  DEMEM  has  ID  messages  and  five  ID  managers  to  provide 
sufficient  evidence  and  to  perform  intrusion  detection  with  low  message  overhead 
based  on  evidence-driven  approach.  These  unique  features  overcome  the  special 
challenging  requirements  for  intrusion  detection  in  MANET.    Second,  DEMEM 
implementation  in  OLSR  successfully  detects  OLSR  routing  attacks  by  three  new 
purpose  ID  messages:  ID-Evidence,  ID-Forward,  and  ID-Request.  The  example 
scenario  traces  the  procedure  of  detecting  an  OLSR  attack  in  detail.    The  four 
performance  metrics of the experiment demonstrate that  DEMEM can detect OLSR 
attacks with low message overhead, low detection delay, very low false positives, and 
no  false  negatives  under  message  loss  and  mobility  conditions.  The  metrics  show 
much  better  results  in  a  no-mobility  situation.  Lastly,  we  have  discussed  several 
ongoing works: how to implement DEMEM in other protocols, such as AODV, DSR, 
TBRPF,  and  a  sophisticated  reputation-based  intrusion  response  model  to  improve 
DEMEM furthermore. 
References 
1.  K. Sanzgiri, B. Dahill, B. N. Levine, C. Shields and E. Belding-Royer, “A Secure Routing 
Protocol for Ad Hoc Networks”,  In Proceedings of IEEE ICNP, 2002. 
2.  M. Zapata and N. Asokan, “Securing Ad hoc Routing Protocols”, 2002. 
3.  S.  Yi, P.  Naldurg,  and  R.  Kravets,  “Security-aware  routing  protocol  for  wireless  ad  hoc 
networks," in Proceedings of ACM MobiHoc 2001, Oct 2001. 
4.  K. Ilgun, R. Kemmerer, and P. Porras , “State Transition Analysis: A Rule-based Intrusion 
Detection Approach”, IEEE Transactions of Software Engineering, 2(13):181-199, March 
1995. 
5.  U.  Lindqvist  and  P.  Porras,  “Detecting  Computer  and  Network  Misuse  Through  the 
Production-Based  Expert  System  Toolset  (P-BEST)”,  In  Proceedings  of  the  1999 
Symposium on Security and Privacy, May 1999. 
6.  Yi-an  Huang  and  Wenke  Lee.  “A  Cooperative  Intrusion  Detection  System  for  Ad  Hoc 
Networks.”  In  Proceedings  of  the  ACM  Workshop  on  Security  in  Ad  Hoc  and  Sensor 
Networks (SASN’03), October 2003. 
270 
C.H. Tseng et al. 
7.  Daniel  Sterne,  et.  al,  “A  General  Cooperative  Intrusion  Detection  Architecture  for 
MANETs,”  In  Proceedings  of  the  3rd  IEEE  International  Information  Assurance 
Workshop, 2005. 
8.  Farooq Anjum and Rajesh R. Talpade, “LiPad: Lightweight Packet Drop Detection for Ad 
Hoc Networks,” In Proceedings of the 2004 IEEE 60th Vehicular Technology Conference, 
Los Angeles, September 2004. 
9.  Y. Rebahi, V. Mujica, C. Simons, D. Sisalem, “SAFE: Securing pAcket Forwarding in ad 
hoc  nEtworks”,  5th  Workshop  on  Applications  and  Services  in  Wireless  Networks, 
June/July 2005, Paris, France 
10.  Y.  Zhang  and  W.  Lee,  “Intrusion  Detection  in  Wireless  Ad  Hoc  Networks,”  In 
Proceedings of The Sixth International Conference on Mobile Computing and Networking 
(MobiCom 2000), Boston, MA, August 2000. 
11.  Chin-Yang  Tseng,  Poornima  Balasubramanyam,  Calvin  Ko,  Rattapon  Limprasittiporn, 
Jeff  Rowe,  and  Karl  Levitt,  “A  Specification-Based  Intrusion  Detection  System  For 
AODV,”  In  Proceedings  of  the  ACM  Workshop  on  Security  in  Ad  Hoc  and  Sensor 
Networks (SASN’03), October 2003. 
12.  Panagiotis Papadimitratos and Zygmunt J. Haas, “Secure  Link State Routing for Mobile 
Ad Hoc Networks,” In Proceedings of the IEEE Workshop on Security and Assurance in 
Ad Hoc Networks, Orlando, Florida, 2003. 
13.  C. Adjih, T. Clausen, P. Jacquet, A. Laouiti, P. Mühlethaler, and D. Raffo, “Securing the 
OLSR Protocol”, Med-Hoc-Net 2003, Mahdia, Tunisia, June 25-27, 2003 
14.  Chinyang Henry Tseng, Tao Song, Poornima Balasubramanyam, Calvin Ko, Karl Levitt, 
“A  Specification-based  Intrusion  Detection  Model  for  OLSR”,  Proceeding  of  the  8th 
International  Symposium,  RAID  2005,  Recent  Advances  in  Intrusion  Detection,  Seattle, 
WA, September 7-9, 2005 
15.  Mohapatra  Prasant,  Krishnamurthy  Srikanth,  “Ad  Hoc  Networks:  Technologies  and 
Protocols”. 
16.  T. Clausen and P. Jacquet, “Optimized Link State Routing Protocol.”,  IETF RFC 3626 
17.  David  Johnson,  David  Maltz,  “Dynamic  Source  Routing  in  Ad  Hoc  Wireless 
Networks”, Mobile Computing, 1996 
18.  Charles  E.  Perkins,  Elizabeth  M.  Belding-Royer,  and  Samir  Das.  "Ad  Hoc  On  Demand 
Distance Vector (AODV) Routing." IETF RFC 3561 
19.  Kimaya Sanzgiri, Bridget Dahill, Daniel LaFlamme, Brian Neil Levine, Clay Shields, and 
Elizabeth Belding-Royer, “A Secure Routing Protocol for Ad Hoc Networks”, Journal of 
Selected  Areas  of  Communications  (JSAC)  Special  Issue  on  Ad  hoc  Networks.  March 
2005 
20.  Jorge Nuevo, “A Comprehensible GloMoSim Tutorial”, March 2004 
21.  Yi-an Huang, Wenke Lee, “Attack Analysis and Detection for Ad Hoc Routing Protocols”, 
RAID 2004 
22.  Perrig, R. Canetti, D. Tygar and D. Song, “The TESLA broadcast authentication protocol,” 
In Cryptobytes (RSA Laboratories, Summer/Fall 2002), 5(2):2-13, 2002. 
23.  Shiau-Huey  Wang,  Chinyang  Tseng,  Calvin  Ko,  Karl  Levitt,  “A  General  Automatic 
Response Model for MANET”, Proceeding of First IEEE International Workshop on Next 
Generation Wireless Networks 2005 (IEEE WoNGeN '05)” 
24.  R.  Ogier,  F.  Templin,  M.  Lewis,  “Topology  Broadcast  based  on  Reverse-Path 
Forwarding”, IETF RFC 3684 
25.  Y.C. Hu, A. Perrig, D.B. Johnson, “Packet Leashes: A Defense against Wormhole Attacks 
in Wireless Ad Hoc Networks”, Proceedings of INFOCOM, 2003 
DEMEM: Distributed Evidence-Driven Message Exchange Intrusion Detection 
271 
Appendix A:  ID Message Formats 
Originator Address 
Type          Number of 
MPRs 
Number of  
Rest Neighbors  
MPR address(es) 
Rest Neighbor address(es) 
Fig. A.1. ID-Evidence Message Format 
Originator Address 
Type  
Number of 
Forwarders 
Reserve 
Forwarder address(es) 
Fig. A.2. ID-Forward Message Format 
Originator Address 
Type 
Number of 
Forwarding sets
Reserve 
Forwarder address 
Destination address 
…(another set) 
Fig. A.3. ID-Request Message Format 
Enhancing Network Intrusion Detection
with Integrated Sampling and Filtering
Jose M. Gonzalez and Vern Paxson
International Computer Science Institute
Berkeley, California, USA
PI:EMAIL, PI:EMAIL, PI:EMAIL
Abstract. The structure of many standalone network intrusion detection systems
(NIDSs) centers around a chain of analysis that begins with packets captured by
a packet ﬁlter, where the ﬁlter describes the protocols (TCP/UDP port numbers)
and sometimes hosts or subnets to include or exclude from the analysis. In this
work we argue for augmenting such analysis with an additional, separately ﬁl-
tered stream of packets. This “Secondary Path” supplements the “Main Path” by
integrating sampling and richer forms of ﬁltering into a NIDS’s analysis.
We discuss an implementation of a secondary path for the Bro intrusion detec-
tion system and enhancements we developed to the Berkeley Packet Filter to work
in concert with the secondary path. Such an additional packet stream provides
beneﬁts in terms of both efﬁciency and ease of expression, which we illustrate
by applying it to three forms of NIDS analysis: tracking very large individual
connections, ﬁnding “heavy hitter” trafﬁc streams, and implementing backdoor
detectors (developed in previous work) with particular ease.
1 Introduction
The structure of many standalone network intrusion detection systems (NIDSs) centers
around a chain of analysis that begins with packets captured by a packet ﬁlter [21,18].
The ﬁlter reduces the volume of the stream of packets to analyze by specifying which
protocols (TCP/UDP port numbers) and sometimes hosts or subnets to include or ex-
clude from the analysis. Such ﬁltering can prove vital for operating a NIDS effectively
in a high-volume environment [5].
In addition, modern NIDS do not analyze isolated packets but instead perform in-
spection at different layers (network/transport/application), which requires maintaining
large quantities of state in order to reassemble packet streams into byte streams and then
parse these into the corresponding Application Data Units (ADUs). A NIDS may there-
fore need to store an indeﬁnite amount of per-connection data for an indeﬁnite amount
of time, including both ADU contents and also network- and transport-layer contents
for resilience to evasions based on stack or topology ambiguities [19,18].
In this work we propose augmenting a NIDS’s analysis with an additional, sepa-
rately ﬁltered stream of packets. This “Secondary Path” supplements the “Main Path”
by integrating sampling and richer forms of ﬁltering into a NIDS’s analysis. We argue
that while many forms of NIDS analysis require the traditional deep-and-stateful pro-
cessing path, for other forms of analysis we can trade off isolated packet processing in
D. Zamboni and C. Kruegel (Eds.): RAID 2006, LNCS 4219, pp. 272–289, 2006.
c(cid:1) Springer-Verlag Berlin Heidelberg 2006
Enhancing Network Intrusion Detection
273
exchange for signiﬁcant efﬁciency gains. The Secondary Path complements a NIDS’s
main analysis by providing a lightweight, stateless, packet-capture processing path.
The power of Secondary Path processing depends critically on the power of the ﬁlter-
ing mechanism that drives it. To this end, we develop two enhancements to the popular
Berkeley Packet Filter (BPF; [16]) that allow analyzers to “cherry-pick” the packets
they are interested in. We can use the ﬁrst enhancement, introducing randomness as a
ﬁrst-class object in BPF, for in-kernel random sampling of packets, connections, hosts,
host pairs, or such. The second enhancement provides richer in-kernel ﬁlter control
mechanisms, including a lightweight form of persistent state. We do so by adding to
BPF ﬁxed-size associative tables plus a set of hash functions to index them.
After presenting these enhancements, we then present three examples of additional
analysis enabled by the Secondary Path: tracking large connections, identifying “heavy
hitter” ﬂows, and incorporating backdoor detection algorithms developed in previous
work. While we can easily implement each of these by themselves in a standalone fash-
ion, the Secondary Path allows us to unify their expression using a single mechanism,
one that also incorporates the analysis they provide into the broader context of a NIDS’s
full analysis.
Section 2 introduces related work. In Section 3 we discuss our enhancements to
BPF and in Section 4 our implementation of a Secondary Path for the Bro intrusion
detection system [18]. Section 5 presents the example applications mentioned above,
and Section 6 concludes.
2 Related Work
The ﬁeld of network intrusion detection has an extensive literature. In particular, nu-
merous signature-based, packet-oriented approaches such as provided by Snort [21] are
based in essence upon various forms of packet ﬁltering. Here, we conﬁne ourselves to
the subset closely related to the notion of incorporating additional packet processing