::: para
如下图所示，第一步是压缩现有分区中的数据。这样做的原因是可以重新安排数据，以便最大限度使用分区\"末端\"的可用空间。
:::
::: figure
[⁠]{#appe-disk-partitions-overview.html#figu-partitions-compress-data}
::: figure-contents
::: mediaobject
![磁盘驱动器被压缩](images/partitions/compression.png){width="444"}
:::
:::
**图 A.11. 磁盘驱动器被压缩**
:::
::: para
在上述示例中，*1* 代表之前的情况，*2* 代表之后的情况。
:::
::: para
这一步骤至关重要。不执行这一步骤，数据所在位置可能会阻止分区被重新划分为想要的大小。还请注意的是，由于某种原因，某些数据不能被移动。如果情况如此（这会严重地限制您的新分区的大小），您可能会被迫在您的磁盘中进行破坏性重分区。
:::
:::
::: section
::: titlepage
### [⁠]{#appe-disk-partitions-overview.html#sect-disk-partitions-resize-existing}A.2.3.2. 重新划分现存分区大小 {.title}
:::
::: para
[图 A.12
"分区大小被重新划分的磁盘驱动器"](#appe-disk-partitions-overview.html#figu-partitions-resize-existing){.xref}
演示了重新划分分区大小的实际过程。这一过程的结果取决于使用的软件。多数情况下，新空出的闲置空间被用来创建一个与原有分区类型相同的未格式化分区。
:::
::: figure
[⁠]{#appe-disk-partitions-overview.html#figu-partitions-resize-existing}
::: figure-contents
::: mediaobject
![分区大小被重新划分的磁盘驱动器](images/partitions/part-resize.png){width="444"}
:::
:::
**图 A.12. 分区大小被重新划分的磁盘驱动器**
:::
::: para
在上述示例中，*1* 代表之前的情况，*2* 代表之后的情况。
:::
::: para
理解您所使用的重新分区软件对新空出的空间的作业是很重要的，只有这样，您才能正确地采取相应措施。在此演示的范例中，最佳方法是删除新建的
DOS 分区，然后创建正确的 Linux 分区。
:::
:::
::: section
::: titlepage
### [⁠]{#appe-disk-partitions-overview.html#sect-disk-partitions-create-new}A.2.3.3. 创建新分区 {.title}
:::
::: para
如前面的步骤所示，创建新的分区不一定是必须的。然而，除非用来调整大小的软件是
Linux 软件，否则您很可能必须删除在调整大小过程中创建的分区。在 [图 A.13
"带有最终分区分配的磁盘驱动器"](#appe-disk-partitions-overview.html#figu-partitions-final-configuration){.xref}
中演示了这种情况。
:::
::: figure
[⁠]{#appe-disk-partitions-overview.html#figu-partitions-final-configuration}
::: figure-contents
::: mediaobject
![带有最终分区分配的磁盘驱动器](images/partitions/nondestruct-fin.png){width="444"}
:::
:::
**图 A.13. 带有最终分区分配的磁盘驱动器**
:::
::: para
在上述示例中，*1* 代表之前的情况，*2* 代表之后的情况。
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#appe-disk-partitions-overview.html#sect-partitioning-naming-schemes-and-mount-points}A.3. 分区命名方案和挂载点 {.title}
:::
::: para
通常令许多 Linux 的新用户感到困惑的地方是 Linux
操作系统如何使用及访问各个分区。它在 DOS/Windows
中相对来说较为简单。每一分区有一个\"驱动器字母\"，您用恰当的驱动器字母来指代相应分区上的文件和目录。这与
Linux
如何处理分区完全不同，就是说一般处理磁盘存储的方法也不同。本小节论述了分区命名方案以及在
Red Hat Enterprise Linux 中访问分区方法的主要原则。
:::
::: section
::: titlepage
## [⁠]{#appe-disk-partitions-overview.html#sect-disk-partitions-naming-scheme}A.3.1. 分区命名方案 {.title}
:::
[]{#appe-disk-partitions-overview.html#idm139805884876064
.indexterm}[]{#appe-disk-partitions-overview.html#idm139805787330656
.indexterm}
::: para
Red Hat Enterprise Linux 使用基于文件的命名方案，文件名格式为
`/dev/xxyN`{.filename}。
:::
::: para
设备及分区名称由以下部分组成：
:::
::: variablelist
[`/dev/`{.filename}]{.term}
:   ::: para
    这个是所有设备文件所在的目录名。因为分区位于硬盘中，而硬盘是设备，所以这些文件代表了在
    `/dev/`{.filename} 中所有可能的分区。
    :::
[`xx`{.filename}]{.term}
:   ::: para
    分区名的前两个字母表示分区所在设备的类型。通常是 `sd`{.filename}。
    :::
[`y`{.filename}]{.term}
:   ::: para
    这个字母表示分区所在的设备。例如，`/dev/sda`{.filename}（第一个磁盘）或
    `/dev/sdb`{.filename}（第二个硬盘），以此类推。
    :::
[`N`{.filename}]{.term}
:   ::: para
    最后的数字代表分区。前四个分区（主分区或扩展分区）是用数字从
    `1`{.filename} 排列到 `4`{.filename}。逻辑分区从 `5`{.filename}
    开始。例如，`/dev/sda3`{.filename} 是在第一个 IDE
    硬盘上的第三个主分区或扩展分区；`/dev/sdb6`{.filename} 是在第二个
    SCSI 硬盘上的第二个逻辑分区。
    :::
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
即使可稍后确认 Red Hat
Enterprise Linux，并适用于[*所有*]{.emphasis}磁盘分区类型，它也无法读取文件系统，因此也服务访问每个磁盘类型中保存的数据。但在很多情况下，它可以成功访问另一个操作系统专用分区中的数据。
:::
:::
:::
:::
::: section
::: titlepage
## [⁠]{#appe-disk-partitions-overview.html#sect-disk-partitions-mount-points}A.3.2. 磁盘分区和挂载点 {.title}
:::
[]{#appe-disk-partitions-overview.html#idm139805833636592
.indexterm}[]{#appe-disk-partitions-overview.html#idm139805872728064
.indexterm}
::: para
在 Red Hat Enterprise Linux
中，每一个分区都是构成支持一组文件和目录所必需的存储的一部分。它是通过*挂载*实现。挂载是将分区关联到某一目录的过程。挂载分区就可在指定目录（通称为*挂载点*）使用其存储空间。
:::
::: para
例如，如果分区 `/dev/sda5/`{.filename} 被挂载在 `/usr/`{.filename}
上，这意味着所有 `/usr/`{.filename} 中的文件和目录在物理意义上位于
`/dev/sda5/`{.filename} 中。因此文件
`/usr/share/doc/FAQ/txt/Linux-FAQ`{.filename} 被保存在
`/dev/sda5/`{.filename}上，而文件 `/etc/gdm/custom.conf`{.filename}
却不是。
:::
::: para
继续以上的示例，`/usr/`{.filename}
之下的一个或多个目录还有可能是其他分区的挂载点。例如，某个分区（假设为，`/dev/sda7/`{.filename}）可以被挂载到
`/usr/local/`{.filename} 下，这意味着 `/usr/local/man/whatis`{.filename}
将位于 `/dev/sda7`{.filename} 上而不是 `/dev/sda5`{.filename} 上。
:::
:::
::: section
::: titlepage
## [⁠]{#appe-disk-partitions-overview.html#sect-disk-partitions-how-many}A.3.3. 多少个分区？ {.title}
:::
[]{#appe-disk-partitions-overview.html#idm139805806615648 .indexterm}
::: para
到了 Red Hat Enterprise Linux
安装准备工作的这一步，您应该开始考虑一下您的新操作系统所要使用的分区数量及大小。但目前没有所谓的正确答案。具体要看您的需要和要求。
:::
::: para
请记住，Red Hat
建议除非您有特殊的原因，您应该[*至少*]{.emphasis}创建下面的分区：`swap`{.filename}、`/boot/`{.filename}以及
`/`{.filename}（root）。
:::
::: para
详情请查看 [第 6.14.4.5 节
"推荐的分区方案"](#chap-installing-using-anaconda-x86.html#sect-recommended-partitioning-scheme-x86){.xref}（AMD64
和 Intel 64 系统）；[第 11.15.4.5 节
"推荐分区方案"](#chap-installing-using-anaconda-ppc.html#sect-recommended-partitioning-scheme-ppc){.xref}（IBM
Power Systems 服务器）；[第 15.15.3.5 节
"推荐的分区方案"](#chap-installing-using-anaconda-s390.html#sect-recommended-partitioning-scheme-s390){.xref}（IBM
System z）。
:::
:::
:::
::: footnotes
\
------------------------------------------------------------------------
::: {#appe-disk-partitions-overview.html#ftn.idm139805862275840 .footnote}
::: para
[^\[4\]^](#appe-disk-partitions-overview.html#idm139805862275840){.para}
与图示不同，块实际上[*是*]{.emphasis}大小一致的。此外还请留意，一个普通的磁盘驱动器上含有数以千计的块。本图片是要简化这个讨论。
:::
:::
:::
:::
[]{#appe-iscsi-disks.html}
::: appendix
::: titlepage
# [⁠]{#appe-iscsi-disks.html#appe-iscsi-disks}附录 B. iSCSI 磁盘 {.title}
:::
::: para
*互联网小计算机系统接口*（iSCSI）是允许计算机与存储设备通过 TCP/IP
协议发送的 SCSI 请求和响应沟通。因为 iSCSI 是基于标准 SCSI
协议，所以它沿用 SCSI 的术语。SCSI
总线中发送请求的设备以及回应这些请求的设备被称为*对象（target）*，发出请求的设备被称为*发起方（initiator）*。换句话说，iSCSI
磁盘是一个对象，而等同于 SCSI 控制器或者 SCSI 主机总线适配器（HBA）的
iSCSI 软件被称为发起方。本附录只将 Linux 作为 iSCSI 发起方进行讨论：即
Linux 如何使用 iSCSI 磁盘而不是 Linux 托管 iSCSI 磁盘。
:::
::: para
Linux 在内核中有一个软件 iSCSI 发起方并组成 SCSI HBA
驱动程序，因此可允许 Linux 使用 iSCSI 磁盘。但是因为 iSCSI
是完全基于网络的协议，iSCSI 发起方支持所需功能不仅仅是可以通过网络发送
SCSI 数据包。因为 Linux 可以使用 iSCSI 对象，所以 Linux
必须找到网络中的对象并与其连接。在有些情况下，Linux
必须发送验证信息以获得对该对象的访问。Linux
还必须侦测所有网络连接失败，并建立新的连接，包括在必要时重新登录。
:::
::: para
查找、连接和登录操作是在用户空间由 [**iscsiadm**]{.application}
程序处理的，同时出错信息也是在用户空间由 [**iscsid**]{.application}
程序处理的。
:::
::: para
[**iscsiadm**]{.application} 和 [**iscsid**]{.application} 都是 Red Hat
Enterprise Linux 中 [**iscsi-initiator-utils**]{.application}
软件包的一部分。
:::
::: section
::: titlepage
# [⁠]{#appe-iscsi-disks.html#sect-iscsi-disks-anaconda}B.1. Anaconda 中的 iSCSI 磁盘 {.title}
:::
::: para
[**Anaconda**]{.application} 可使用两种方法查找并登录 iSCSI 磁盘：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    启动 [**Anaconda**]{.application} 时，它会检查系统 BIOS 或者附加引导
    ROM是否支持 *iSCSI 引导固件表*（iBFT），是可使用 iSCSI 引导的系统
    BIOS 扩展。[**Anaconda**]{.application} 会为配置的引导磁盘从 BIOS
    中读取 iSCSI 对象信息，并登录到这个对象，使其成为可用安装对象。
    :::
    ::: important
    ::: admonition_header
    **重要**
    :::
    ::: admonition
    ::: para
    要指定连接到 iSCSI 目标，则需要激活访问该目标的网络设备。建议使用
    `ip=ibft`{.option} 引导选项完成此操作。
    :::
    :::
    :::
2.  ::: para
    您可以使用 [**anaconda**]{.application} 的图形用户界面手动查找并添加
    iSCSI
    目标。在主菜单，即安装概述页面中点击安装目的系统选项。然后点击该页面
    [**指定的 & 网络磁盘**]{.guilabel} 部分的 [**添加磁盘**]{.guibutton}
    按钮。此时会出现可用存储设备的标签列表。在右下角点击 [**添加 iSCSI
    Target**]{.guibutton} 按钮并执行查找过程。详情请查看 [第 6.15.1 节
    "存储设备选择页面"](#chap-installing-using-anaconda-x86.html#sect-storage-device-selection-x86){.xref}。
    :::
    ::: para
    不能将 `/boot`{.filename} 分区放到 iSCSI
    目标中，可使用这个方法手动添加 - 必须为与 iBFT 配合使用配置包含
    `/boot`{.filename} 分区的 iSCSI 目标。
    :::
:::
::: para
当 [**Anaconda**]{.application} 使用 [**iscsiadm**]{.application}
查找并登录到 iSCSI 目标时，[**iscsiadm**]{.application}
会将有关这些目标的所有信息自动保存到 iscsiadm iSCSI
数据库中。[**Anaconda**]{.application}
会将这个数据库复制到安装的系统中，并标记所有不用于 `/`{.filename} 的
iSCSI 目标，以便系统可在启动时自动登录到该目标。如果将 `/`{.filename}
放在 iSCSI 目标中，[**initrd**]{.application} 将登录到这个目标，同时
[**anaconda**]{.application}
将不在启动脚本中包含这个目标以避免多次尝试登录到同一目标中。
:::
::: para
如果将 `/`{.filename} 放在 iSCSI 对象中，[**Anaconda**]{.application}
会将 [**NetworkManager**]{.application}
设置为忽略任意在安装过程中激活的网络接口。系统启动时
[**initrd**]{.application} 还会配置这些接口。如果
[**NetworkManager**]{.application} 要重新配置这些接口，则系统会丢失其与
`/`{.filename} 的连接。
:::
:::