3.16.3 指针的课堂练习
3.16.4 指针的使用细节
1) 值类型，都有对应的指针类型， 形式为 *数据类型，比如 int的对应的指针就是 *int, float32
对应的指针类型就是 *float32, 依次类推。
2) 值类型包括：基本数据类型 int 系列,float 系列,bool, string 、数组和结构体 struct
3.17 值类型和引用类型
3.17.1 值类型和引用类型的说明
1) 值类型：基本数据类型 int 系列,float 系列,bool, string 、数组和结构体struct
2) 引用类型：指针、slice切片、map、管道chan、interface 等都是引用类型
3.17.2 值类型和引用类型的使用特点
1) 值类型：变量直接存储值，内存通常在栈中分配
示意图：
2) 引用类型：变量存储的是一个地址，这个地址对应的空间才真正存储数据(值)，内存通常在堆
上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC 来回收
示意图：
3) 内存的栈区和堆区示意图
3.18 标识符的命名规范
3.18.1 标识符概念
1) Golang 对各种变量、方法、函数等命名时使用的字符序列称为标识符
2) 凡是自己可以起名字的地方都叫标识符
3.18.2 标识符的命名规则
1) 由26个英文字母大小写，0-9 ，_ 组成
2) 数字不可以开头。varnum int //ok var 3numint //error
3) Golang 中严格区分大小写。
varnum int
varNum int
说明：在golang中，num 和 Num 是两个不同的变量
4) 标识符不能包含空格。
5) 下划线"_"本身在Go中是一个特殊的标识符，称为空标识符。可以代表任何其它的标识符，但
是它对应的值会被忽略(比如：忽略某个返回值)。所以仅能被作为占位符使用，不能作为标识符使用
6) 不能以系统保留关键字作为标识符（一共有25个），比如 break，if 等等...
3.18.3 标识符的案例
hello //ok
hello12 //ok
1hello //error ,不能以数字开头
h-b // error ,不能使用 -
xh //error, 不能含有空格
h_4 //ok
_ab // ok
int // ok, 我们要求大家不要这样使用
float32 // ok, 我们要求大家不要这样使用
_ //error
Abc // ok
3.18.4 标识符命名注意事项
1) 包名：保持 package 的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，不要和
标准库不要冲突 fmt
2) 变量名、函数名、常量名：采用驼峰法
举例：
varstuName string =“tom” 形式: xxxYyyyyZzzz ...
vargoodPricefloat32 = 1234.5
3) 如果变量名、函数名、常量名首字母大写，则可以被其他的包访问；如果首字母小写，则只能
在本包中使用 ( 注：可以简单的理解成，首字母大写是公开的，首字母小写是私有的),在golang 没有
public,private 等关键字。
案例演示：
3.19 系统保留关键字
3.20 系统的预定义标识符
第 章 运算符
4
4.1 运算符的基本介绍
运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等
运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等
1) 算术运算符
2) 赋值运算符
3) 比较运算符/关系运算符
4) 逻辑运算符
5) 位运算符
6) 其它运算符
4.2 算术运算符
算术运算符是对数值类型的变量进行运算的，比如：加减乘除。在Go 程序中使用的非常多
4.2.1算术运算符的一览表
4.2.2案例演示
 案例演示算术运算符的使用。
+, -,*,/ ,%, ++, -- , 重点讲解 /、%
自增：++
自减：--
 演示 / 的使用的特点
 演示 % 的使用特点
// 演示 % 的使用
// 看一个公式 a% b=a -a/ b*b
fmt.Println("10%3=", 10% 3)// =1
fmt.Println("-10%3=", -10%3) //= -10 -(-10) / 3*3=-10 - (-9) =-1
fmt.Println("10%-3=", 10%-3) //=1
fmt.Println("-10%-3=", -10 % -3)// =-1
 ++ 和 --的使用
4.2.3算术运算符使用的注意事项
1) 对于除号 "/"，它的整数除和小数除是有区别的：整数之间做除法时，只保留整数部分而舍弃
小数部分。 例如： x:=19/5,结果是 3
2) 当对一个数取模时，可以等价 a%b=a-a/b*b ， 这样我们可以看到 取模的一个本质运算。
3) Golang 的自增自减只能当做一个独立语言使用时，不能这样使用
4) Golang 的++ 和 -- 只能写在变量的后面，不能写在变量的前面，即：只有 a++ a-- 没有 ++a
--a
5) Golang 的设计者去掉 c/ java 中的 自增自减的容易混淆的写法，让Golang 更加简洁，统一。(强
制性的)
4.2.4课堂练习 1
4.2.5课堂练习 2
1) 假如还有97天放假，问：xx个星期零xx天
2) 定义一个变量保存华氏温度，华氏温度转换摄氏温度的公式为：5/9*(华氏温度-100),请求出华氏
温度对应的摄氏温度。
4.3 关系运算符(比较运算符)
4.3.1基本介绍
1) 关系运算符的结果都是bool型，也就是要么是true，要么是false
2) 关系表达式 经常用在 if结构的条件中或循环结构的条件中
4.3.2关系运算符一览图
4.3.3案例演示
4.3.4关系运算符的细节说明
细节说明
1) 关系运算符的结果都是bool型，也就是要么是true，要么是false。
2) 关系运算符组成的表达式，我们称为关系表达式： a>b
3) 比较运算符"=="不能误写成 "=" !!
4.4 逻辑运算符
4.4.1基本介绍
用于连接多个条件（一般来讲就是关系表达式），最终的结果也是一个bool值
4.4.2逻辑运算的说明
4.4.3案例演示
4.4.4注意事项和细节说明
1) &&也叫短路与：如果第一个条件为 false，则第二个条件不会判断，最终结果为false
2) ||也叫短路或：如果第一个条件为 true，则第二个条件不会判断，最终结果为true
3) 案例演示
4.5 赋值运算符
4.5.1基本的介绍
赋值运算符就是将某个运算后的值，赋给指定的变量。
4.5.2赋值运算符的分类
4.5.3赋值运算的案例演示
案例演示赋值运算符的基本使用。
1) 赋值基本案例
2) 有两个变量，a和b，要求将其进行交换，最终打印结果
3) += 的使用案例
4) 案例
4.5.4赋值运算符的特点
1) 运算顺序从右往左
2) 赋值运算符的左边 只能是变量,右边 可以是变量、表达式、常量值
3) 复合赋值运算符等价于下面的效果
比如：a+= 3 等价于 a= a+3
4.5.5面试题
有两个变量，a和b，要求将其进行交换，但是不允许使用中间变量，最终打印结果
4.6 位运算符
4.7 其它运算符说明
举例说明：
4.7.1课堂案例
案例1：求两个数的最大值
案例2：求三个数的最大值
4.8 特别说明
举例说明，如果在golang中实现三元运算的效果。
4.9 运算符的优先级
4.9.1运算符的优先级的一览表
4.9.2对上图的说明
1) 运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如右表，上一行运算符总
优先于下一行。
2) 只有单目运算符、赋值运算符是从右向左运算的。
3) 梳理了一个大概的优先级
1：括号，++,--
2: 单目运算
3：算术运算符
4：移位运算
5：关系运算符
6：位运算符
7：逻辑运算符
8：赋值运算符
9：逗号
4.10 键盘输入语句
4.10.1 介绍
在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。InputDemo.go
4.10.2 步骤 ：
1) 导入fmt包
2) 调用fmt包的 fmt.Scanln() 或者 fmt.Scanf()
4.10.3 案例演示：
要求：可以从控制台接收用户信息，【姓名，年龄，薪水, 是否通过考试 】。
1) 使用 fmt.Scanln() 获取
2) 使用 fmt.Scanf() 获取
4.11 进制
对于整数，有四种表示方式：
1) 二进制：0,1 ，满2进1。
在golang中，不能直接使用二进制来表示一个整数，它沿用了 c的特点。
2) 十进制：0-9 ，满10进1。
3) 八进制：0-7 ，满8进1. 以数字0开头表示。
4) 十六进制：0-9 及A-F，满16进1. 以0x或0X开头表示。
此处的A-F 不区分大小写。
4.11.1 进制的图示
4.11.2 进制转换的介绍
4.11.3 其它进制转十进制
4.11.4 二进制如何转十进制
4.11.5 八进制转换成十进制示例
4.11.6 16 进制转成 10 进制
4.11.7 其它进制转 10 进制的课堂练习
 课堂练习：请将
二进制： 110001100 转成 十进制
八进制： 02456 转成十进制
十六进制： 0xA45 转成十进制
4.11.8 十进制如何转成其它进制
4.11.9 十进制如何转二进制
4.11.10 十进制转成八进制
4.11.11 十进制转十六进制
4.11.12 课堂练习
课堂练习：请将
123 转成 二进制
678 转成八进制
8912 转成十六进制
4.11.13 二进制转换成八进制、十六进制
4.11.14 二进制转换成八进制
4.11.15 二进制转成十六进制
 课堂练习
课堂练习：请将
二进制：11100101 转成 八进制
二进制：1110010110 转成 十六进制
4.11.16 八进制、十六进制转成二进制
4.11.17 八进制转换成二进制
4.11.18 十六进制转成二进制
4.12 位运算
4.12.1 位运算的思考题
1) 请看下面的代码段，回答a,b,c,d 结果是多少?
funcmain() {
varaint = 1>>2
varbint =-1 >>2
varcint = 1>、>：低位溢出,符号位不变,并用符号位补溢出的高位
左移运算符 > 2 //00000001=>0000 0000=0
c:= 1 0000 0100=> 4
第 章 程序流程控制
5
5.1 程序流程控制介绍
在程序中，程序运行的流程控制决定程序是如何执行的，是我们必须掌握的，主要有三大流程控
制语句。
1) 顺序控制
2) 分支控制
3) 循环控制
5.2 顺序控制
程序从上到下逐行地执行，中间没有任何判断和跳转。
一个案例说明，必须下面的代码中，没有判断，也没有跳转.因此程序按照默认的流程执行，即顺
序控制。
5.2.1顺序控制的一个流程图
5.2.2顺序控制举例和注意事项
Golang 中定义变量时采用合法的前向引用。如：
funcmain() {
varnum1 int =10//声明了num1
varnum2 int =num1 +20//使用num1
fmt.Println(num2)
}
错误形式：
funcmain() {
varnum2 int =num1 +20//使用num1
varnum1 int =10//声明num1(×)
fmt.Println(num2)
}
5.3 分支控制
5.3.1分支控制的基本介绍
分支控制就是让程序有选择执行。有下面三种形式
1) 单分支
2) 双分支
3) 多分支
5.3.2单分支控制
 基本语法
 应用案例
请大家看个案例[ifDemo.go]:
编写一个程序,可以输入人的年龄,如果该同志的年龄大于18岁,则输出 "你年龄大
于18,要对自己的行为负责!" 需求---[分析]---->代码
代码: