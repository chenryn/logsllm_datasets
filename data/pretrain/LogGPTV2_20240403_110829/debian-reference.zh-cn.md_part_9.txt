### 1.3.3 MC 文件管理
默认情况下，MC（Midnight Commander）界面包含两个目录面板，分别列出文件。将右侧窗口设置为“信息”模式可以查看文件的访问权限等详细信息。以下是一些常用的快捷键：
- 当守护进程 gpm(8) 运行时，你可以在字符命令行中使用鼠标进行操作。
- 在MC中执行复制和粘贴操作时，请务必按住 Shift 键。

**表 1.11: MC 快捷键绑定**
| 快捷键 | 功能描述 |
| --- | --- |
| F1 | 显示帮助菜单 |
| F3 | 启动内部文件查看器 |
| F4 | 打开内部编辑器 |
| F9 | 激活下拉菜单 |
| F10 | 退出 Midnight Commander |
| Tab | 切换焦点至另一窗口 |
| Insert 或 Ctrl-T | 标记文件以进行多选操作，如批量复制 |
| Del | 删除文件（注意：建议先配置 MC 为安全删除模式）|
| 方向键 | 导航 |

### 1.3.4 MC 命令行技巧
- 使用 `cd` 命令可在选定屏幕中更改当前目录。
- 按下 `Ctrl+Enter` 或 `Alt+Enter` 可将选中的文件名复制到命令行；配合 `cp(1)` 和 `mv(1)` 来处理文件。
- `Alt-Tab` 提供文件名自动补全提示。
- 通过添加额外参数指定启动目录，例如：`mc /etc /root`。
- `Esc+n-key` 相当于直接按下 `Fn` 键（如 `Esc+1` 等同于 `F1`，依此类推）。
- 先按 `Esc` 再加其他键的效果与同时按 `Alt` 加该键相同；例如，`Esc+c` 与 `Alt-C` 功能一致。`Esc` 被称为 meta 键或简称 "M-"。

### 1.3.5 MC 内置编辑器
内置编辑器提供了一种独特的粘贴机制：首次按下 `F3` 选择起始点，再次按下则标记终点并高亮显示所选区域。此时移动光标，并用 `F6` 将选区移至当前位置下方，或者用 `F5` 复制选区到当前位置。`F2` 用于保存文件，而 `F10` 用来退出编辑器。大多数方向键的功能都是直观且易于理解的。

要直接启动 MC 编辑器，可使用如下命令之一：
```bash
$ mc -e filename_to_edit
$ mcedit filename_to_edit
```
尽管它不是多窗口编辑器，但可以通过复用终端实现类似功能。在不同窗口间复制文本时，需使用 `Alt-Fn` 切换虚拟终端，并通过菜单选项 `"File→Insert file"` 或 `"File→Copy to file"` 完成操作。

若想替换内置编辑器，许多程序会参考环境变量 `$EDITOR` 或 `$VISUAL` 来确定使用的编辑器。若打算采用 `vim(1)` 或 `nano(1)`，请在 `~/.bashrc` 中加入如下代码：
```bash
export EDITOR=mcedit
export VISUAL=mcedit
```
推荐使用 `vim` 作为首选编辑器，但如果对 `vim` 不熟悉，仍可继续使用 `mcedit(1)`。

### 1.3.6 MC 内置查看器
MC 配备了一个智能的文档查看器，非常适合搜索文本内容。我经常利用它来浏览 `/usr/share/doc` 目录下的文件，这是快速获取大量 Linux 文档信息的好方法。要直接启动查看器，可以运行：
```bash
$ mc -v path/to/filename_to_view
$ mcview path/to/filename_to_view
```

### 1.3.7 自动启动 MC
回车键可根据文件类型触发不同的动作：
- 对于可执行文件，执行相应命令；
- 对于帮助文档，将其内容管道传输给预览工具；
- 对于 HTML 文件，用网页浏览器打开；
- 对于 `.tar.gz` 和 `.deb` 文件，像浏览子目录一样展示其内容。

**表 1.12: 回车键响应行为**

为确保这些查看器及虚拟文件特性正常工作，请勿将待查看文件设为可执行状态。可以通过 `chmod(1)` 或 MC 的文件菜单修改文件权限。

### 1.3.8 MC 中的虚拟文件系统
MC 支持通过互联网访问远程文件。在菜单栏点击 `F9`，然后选择 "Shell 文件系统" 并输入 URL 形式的路径（格式为 `sh://[user@]machine[:options]/[remote-dir]`），即可像本地 SSH 访问那样检索远程目录内容。

### 1.4 类 Unix 工作环境基础
虽然 MC 功能强大，但掌握从 shell 提示符下使用命令行工具同样至关重要，这有助于你更好地适应类 Unix 工作环境。

#### 1.4.1 登录 Shell
为了保证某些系统初始化脚本能够正确运行，请保持登录 Shell 为 `bash(1)`，避免随意更改为其他 Shell。如果希望使用不同的交互式 Shell，可以从 GUI 终端模拟器启动，或者在 `~/.bashrc` 中添加相应命令，例如：
```bash
exec /usr/bin/zsh -i -l
```
或
```bash
exec /usr/bin/fish -i -l
```

**表 1.13: 常见 Shell 程序列表**
| 软件包 | 流行度 | 大小 (KB) | POSIX兼容性 | 说明 |
| --- | --- | --- | --- | --- |
| bash | V:836, I:999 | 7175 | 是 | GNU Bourne Again SHell (事实上的标准) |
| bash-completion | V:33, I:932 | 1454 | N/A | Bash 命令补全插件 |
| dash | V:886, I:996 | 191 | 是 | Debian Almquist Shell，适用于脚本编写 |
| zsh | V:40, I:73 | 2462 | 是 | Z shell: 标准 shell 的增强版 |
| tcsh | V:6, I:21 | 1355 | 否 | TENEX C Shell: Berkeley csh 的增强版本 |
| mksh | V:4, I:12 | 1566 | 是 | Kornshell 的一个变体 |
| csh | V:1, I:6 | 339 | 否 | OpenBSD C Shell, 基于 Berkeley csh |
| sash | V:0, I:5 | 1157 | 是 | 独立 shell，非标准 "/usr/bin/sh" |
| ksh | V:1, I:11 | 61 | 是 | AT&T 版本的 Kornshell |
| rc | V:0, I:1 | 178 | 否 | AT&T Plan 9 rc shell 实现 |
| posh | V:0, I:0 | 190 | 是 | 策略兼容的普通 shell (源自 pdksh) |

**提示**：尽管大多数 POSIX Shell 共享基本语法，但在变量处理等方面可能存在差异。具体细节请参阅各 Shell 的官方文档。本教程假设用户正在使用交互式的 `bash`。

#### 1.4.2 自定义 Bash
你可以通过编辑 `~/.bashrc` 文件来自定义 Bash 行为。例如：
```bash
# 启用 bash-completion
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# MC 退出后自动切换目录
. /usr/lib/mc/mc.sh

# 设置 CDPATH 以便快速切换目录
CDPATH=".:/usr/share/doc:~:~/Desktop:~"
export CDPATH

# 更新 PATH 包含常用二进制文件路径
PATH="${PATH:+$PATH:}/usr/sbin:/sbin"

# 如果存在用户的私有 bin 目录，则将其添加到 PATH 中
if [ -d ~/bin ]; then
    PATH="~/bin${PATH+:$PATH}"
fi
export PATH

# 设置默认编辑器
EDITOR=vim
export EDITOR
```

更多关于 Bash 自定义的信息，请参阅第 9 章 9.3.6 节。

**提示**：安装 `bash-completion` 包可以让 Bash 支持命令补全功能。

#### 1.4.3 特殊按键
在类 Unix 环境中，一些按键具有特殊含义。请注意，在标准 Linux 字符控制台中，只有左侧的 `Ctrl` 和 `Alt` 键有效。以下是几个重要按键及其功能：

**表 1.14: Bash 快捷键绑定**
| 快捷键 | 描述 |
| --- | --- |
| `Ctrl-U` | 清除光标前至行首的所有字符 |
| `Ctrl-H` | 删除光标前的一个字符 |
| `Ctrl-D` | 结束输入（在 Shell 中则表示退出）|
| `Ctrl-C` | 中断正在运行的程序 |
| `Ctrl-Z` | 暂停程序并将之送入后台 |
| `Ctrl-S` | 暂停屏幕输出 |
| `Ctrl-Q` | 恢复屏幕输出 |
| `Ctrl-Alt-Del` | 重启/关闭系统（详情参见 inittab(5)）|
| 左 Alt 键 | Emacs 和类似 UI 的元键（meta-key）|
| 上箭头 | 在 Bash 中向上翻阅历史命令 |
| `Ctrl-R` | 在 Bash 的增量历史中搜索命令 |
| `Tab` | Bash 命令行中的文件名补全 |
| `Ctrl-V Tab` | 在 Bash 命令行中插入实际 Tab 字符而非补全 |

**提示**：`Ctrl-S` 的终端功能可能已被 `stty(1)` 禁用。

#### 1.4.4 鼠标操作
Debian 系统支持两种风格的文本鼠标操作：
- **传统 Unix 风格**：三按钮单击，主要键选择，适用于 X 应用（如 xterm）以及文本应用在控制台环境中。
- **现代 GUI 风格**：双按钮拖放+单击，主要键与剪贴板结合，适用于现代 GUI 应用（如 gnome-terminal）。

**表 1.15: Debian 鼠标操作及相关按键操作列表**
| 操作 | 响应 |
| --- | --- |
| 左键拖拽 | 选择文本范围 |
| 单击左键 | 开始选择文本范围 |
| 右键单击（传统方式） | 结束选择文本范围 |
| 右键单击（现代方式） | 弹出上下文菜单（剪切、复制、粘贴）|
| 中键点击或 Shift-Ins | 在光标位置插入已选择文本 |
| `Ctrl-X` | 剪切所选文本到剪贴板 |
| `Ctrl-C` (终端中为 `Shift-Ctrl-C`) | 复制所选文本到剪贴板 |
| `Ctrl-V` | 在光标位置粘贴剪贴板内容 |

在两键鼠标系统中，同时按下左右键相当于按下中键。要在 Linux 字符控制台中启用鼠标功能，需要运行守护进程 `gpm(8)`。

#### 1.4.5 分页程序
`less(1)` 是一个强大的分页程序，用于阅读文件内容。它根据提供的命令行参数或标准输入读取文件。在 `less` 中按 `h` 查看帮助信息。相比 `more(1)`，`less` 提供了更多的功能，还可以通过在脚本开头执行 `eval $(lesspipe)` 或 `eval $(lessfile)` 进一步扩展其能力。更多信息请参考 `/usr/share/doc/less/LESSOPEN`。使用 `-R` 选项可以保留原始字符输出并启用 ANSI 颜色转义序列。详情请查阅 `less(1)`。

**提示**：在 `less` 命令中，输入 `h` 查看帮助屏幕，使用 `/` 或 `?` 搜索字符串，加上 `-i` 参数忽略大小写。