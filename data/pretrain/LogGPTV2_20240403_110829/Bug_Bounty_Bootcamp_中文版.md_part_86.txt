from a legitimate site [ 3 ]{.CodeAnnotation aria-label="annotation3"} .
Next, the site implements incomplete CSRF token validation. It checks
that the CSRF token is valid only if the `      csrf_token     ` [
]{#c22.xhtml#Page_346 .pagebreak title="346"} parameter is provided in
the URL [ 2 ]{.CodeAnnotation aria-label="annotation2"} . Attackers will
be able to execute the CSRF to change users' passwords by simply
providing them with a URL that doesn't have the `      csrf_token     `
parameter, or contains a blank `      csrf_token     ` , as in these
examples:
你可以自己看到这个程序使用了两种CSRF保护，但它们都不完整。Referer检查函数只检查Referer是否存在，而不检查Referer
URL是否来自合法站点3。此外，该站点实现的CSRF令牌验证也不完整。它只会检查CSRF令牌是否有效，仅当URL中提供了csrf_token参数时才会进行检查2。攻击者可以通过提供没有csrf_token参数或包含空白csrf_token的URL来执行CSRF，从而更改用户密码，例如：
    https://example.com/change_password?new_password=abc&csrf_token=
    https://example.com/change_password?new_password=abc
Code review is an effective way of finding vulnerabilities, so if you
can extract source code at any point during your hacking process, dive
into the source code and see what you can find. Manual code review can
be time-consuming. Using static analysis security testing (SAST) tools
is a great way to automate the process. Many open source and commercial
SAST tools with different capabilities exist, so if you are interested
in code analysis and participating in many source code programs, you
might want to look into using a SAST tool that you like.
代码审查是找到漏洞的有效方式，因此，如果您在黑客过程中的任何时候可以提取源代码，请深入研究源代码，并查找您可以找到的内容。手动代码审查可能会花费很长时间。使用静态分析安全测试（SAST）工具是自动化过程的好方法。存在许多具有不同能力的开源和商业SAST工具，因此，如果您对代码分析感兴趣并参与许多源代码项目，则可能希望考虑使用您喜欢的SAST工具。
:::
[]{#c23.xhtml}
::: section
# [ [ ]{#c23.xhtml#Page_347 .pagebreak title="347"} 23 ]{.ChapterNumber} [ Hacking Android Apps ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
You've spent the entirety of this book thus far learning to hack web
applications. The majority of bug bounty programs offer bounties on
their web apps, so mastering web hacking is the easiest way to get
started in bug bounties, as it will unlock the widest range of targets.
到目前为止，你已经花费了整个书籍的时间来学习如何黑客入侵 Web
应用程序。大多数赏金计划都在其 Web 应用程序上提供赏金，因此，精通 Web
黑客攻击是开始进行赏金计划的最简单方法，因为它将解锁最广泛的目标范围。
On the other hand, mobile hacking has a few more prerequisite skills and
takes more time to get started. But because of the higher barrier to
entry, fewer hackers tend to work on mobile programs. Also, the number
of mobile programs is rising as companies increasingly launch complex
mobile products. Mobile programs can sometimes be listed under the
Mobile or IoT sections of the company's main bug bounty program. This
means that if you learn to hack mobile applications, you'll likely file
fewer duplicate reports and find more interesting bugs.
另一方面，移动设备的黑客攻击需要更多的先决条件和更多的时间才能开始。但由于进入门槛更高，较少的黑客倾向于研究移动应用程序。此外，随着公司发布越来越复杂的移动产品，移动应用程序的数量也在增加。移动应用程序有时可以在公司的主要漏洞赏金计划的"移动"或"物联网"部分下列出。这意味着如果您学会了如何攻击移动应用程序，您可能会少提交重复报告并找到更多有趣的漏洞。
Despite the more involved setup, hacking mobile applications is very
similar to hacking web applications. This chapter introduces the
additional skills you need to learn before you begin analyzing Android
apps.
尽管移动应用程序的设置更加复杂，但其与网络应用程序的黑客方法非常相似。本章介绍了在分析Android应用程序之前需要学习的额外技能。
[ ]{#c23.xhtml#Page_348 .pagebreak title="348"} Companies with mobile
applications typically have both Android and iOS versions of an app. We
won't cover iOS applications, and this chapter is by no means a
comprehensive guide to hacking Android applications. But, along with the
previous chapters, it should give you the foundation you need to start
exploring the field on your own.
具有移动应用程序的公司通常都有Android和iOS版本的应用程序。我们不会涵盖iOS应用程序，这一章也绝不是对Android应用程序进行全面攻击指南。但是，与前几章一起，它应该为您提供足够的基础，以便您开始在这个领域进行探索。
```{=html}
```
::: {.top .hr}
------------------------------------------------------------------------
:::
::: {.section .note}
## [ Note ]{.NoteHead}
One of the best resources to reference for mobile hacking is the OWASP
Mobile Security Testing Guide (
[https://github.com/OWASP/owasp-mstg/](https://github.com/OWASP/owasp-mstg/){.LinkURL}
).
参考移动设备安全测试最佳资源之一是OWASP移动设备安全测试指南(https://github.com/OWASP/owasp-mstg/)。
::: {.bottom .hr}
------------------------------------------------------------------------
:::
:::
```{=html}
```
## Setting Up Your Mobile Proxy {#c23.xhtml#h1-501546c23-0001}
In the same way that you configured your web browser to work with your
proxy, you'll need to set up your testing mobile device to work with a
proxy. This generally involves installing the proxy's certificate on
your device and adjusting your proxy's settings.
就像你配置了网络浏览器与代理一起工作一样，你需要设置你的测试移动设备来与代理一起工作。这通常需要在你的设备上安装代理证书并调整你的代理设置。
If you can afford to do so, acquire another mobile device, or use one of
your old devices for testing. Mobile testing is dangerous: you might
accidentally damage your device, and many of the techniques mentioned in
this chapter will void the device's warranty. You can also use a mobile
emulator (a program that simulates a mobile device) for testing.
如果您有经济能力的话，可以购买另一台移动设备进行测试，或是使用旧设备进行测试。移动测试具有潜在的危险：您可能会不小心损坏设备，并且本章中提到的许多技术可能会导致设备的保修失效。您还可以使用移动模拟器（一种模拟移动设备的程序）进行测试。
First, you'll need to configure Burp's proxy to accept connections from
your mobile device, because by default, Burp's proxy accepts connections
only from the machine Burp is running on. Navigate to Burp's **Proxy** [
▶ ]{.MenuArrow} **Options** tab. In the Proxy Listeners section, click
**Add** . In the pop-up window ( [Figure
23-1](#c23.xhtml#figure23-1){#c23.xhtml#figureanchor23-1} ), enter a
port number that is not currently in use and select **All interfaces**
as the Bind to address option. Click **OK** .
首先，您需要配置Burp的代理以接受来自移动设备的连接，因为默认情况下，Burp的代理仅接受来自运行Burp的机器的连接。导航到Burp的Proxy▶选项选项卡。在代理监听器部分，单击添加。在弹出窗口（图23-1）中，输入一个当前未使用的端口号，并将所有接口选项选择为绑定地址选项。单击确定。
![[Figure 23-1]{#c23.xhtml#figure23-1} : Setting up Burp to accept
connections from all devices on the Wi-Fi network ¶
图23-1：设置Burp接受Wi-Fi网络中所有设备的连接。](image_fi/501546c23/f23001.png){.keyline}
Your proxy should now accept connections from any device connected to
the same Wi-Fi network. As such, I do not recommend doing this on a
public Wi-Fi network.
你的代理现在应该接受来自连接到同一Wi-Fi网络的任何设备的连接。因此，我不建议在公共Wi-Fi网络上执行此操作。
[ ]{#c23.xhtml#Page_349 .pagebreak title="349"} Next, you'll configure
your Android device to work with the proxy. These steps will vary
slightly based on the system you're using, but the process should be
some version of choosing **Settings** [ ▶ ]{.MenuArrow} **Network** [ ▶
]{.MenuArrow} **Wi-Fi** , selecting (usually by tapping and holding) the
Wi-Fi network you're currently connected to, and selecting **Modify
Network** . You should then be able to select a proxy hostname and port.
Here, you should enter your computer's IP address and the port number
you selected earlier. If you're using a Linux computer, you can find
your computer's IP address by running this command:
接着，您需要配置您的 Android
设备与代理一起工作。基于您的系统，这些步骤会稍有不同，但过程通常是选择设置▶网络▶Wi-Fi，选择当前连接的
Wi-Fi
网络（通常通过点击和按住），然后选择修改网络。接下来，您应该能够选择代理主机名和端口。在这里，您需要输入您计算机的
IP 地址和之前选择的端口号。如果您正在使用 Linux
计算机，则可以通过运行此命令找到您的计算机的 IP 地址：
    hostname -i
If you are using a Mac, you can find your IP with this command:
如果您使用的是Mac电脑，您可以使用以下命令查找您的IP地址：
    ipconfig getifaddr en0
Your Burp proxy should now be ready to start intercepting traffic from
your mobile device. The process of setting up a mobile emulator to work
with your proxy is similar to this process, except that some emulators
require that you add proxy details from the emulator settings menu
instead of the network settings on the emulated device itself.
您的Burp代理现在应该已准备好开始拦截来自移动设备的流量。设置移动模拟器与您的代理一起工作的过程类似于此过程，但某些模拟器需要您在模拟设备本身的网络设置菜单中添加代理详细信息，而不是在网络设置中添加。
If you want to intercept and decode HTTPS traffic from your mobile
device as well, you'll need to install Burp's certificate on your
device. You can do this by visiting *http://burp/cert* in the browser on
your computer that uses Burp as a proxy. Save the downloaded
certificate, email it to yourself, and download it to your mobile
device. Next, install the certificate on your device. This process will
also depend on the specifics of the system running on your device, but
it should be something like choosing **Settings** [ ▶ ]{.MenuArrow}
**Security** [ ▶ ]{.MenuArrow} **Install Certificates from Storage** .
Click the certificate you just downloaded and select **VPN and apps**
for the Certificate use option. You'll now be able to audit HTTPS
traffic with Burp.
如果您想从移动设备拦截和解码HTTPS流量，您需要在设备上安装Burp的证书。您可以在使用Burp作为代理的计算机浏览器中访问http://burp/cert，下载证书并发送到您的电子邮件，最后将其下载到您的移动设备上。接下来，在您的设备上安装证书。此过程也取决于您的设备上运行的系统的具体细节，但应该类似于选择"设置"▶"安全"▶"从存储安装证书"
。点击您刚刚下载的证书，选择VPN和应用程序作为证书使用选项。现在您就可以使用Burp审计HTTPS流量了。
## Bypassing Certificate Pinning {#c23.xhtml#h1-501546c23-0002}
*Certificate pinning* is a mechanism that limits an application to
trusting predefined certificates only. Also known as *SSL pinning* or
*cert pinning* , it provides an additional layer of security against
*man-in-the-middle attacks* , in which an attacker secretly intercepts,
reads, and alters the communications between two parties. If you want to
intercept and decode the traffic of an application that uses certificate
pinning, you'll have to bypass the certificate pinning first, or the
application won't trust your proxy's SSL certificate and you won't be
able to intercept HTTPS traffic.
证书固定是一种机制，它限制应用程序只信任预定义的证书。又称为SSL固定或证书固定，它提供了一层额外的安全保障，防止中间人攻击，即攻击者秘密拦截、读取和更改两个方之间的通信。如果你想拦截和解码使用证书固定的应用程序的流量，你必须先绕过证书固定，或者应用程序将不信任你的代理的SSL证书，你就无法拦截HTTPS流量。
It's sometimes necessary to bypass certificate pinning to intercept the
traffic of better-protected apps. If you've successfully set up your
mobile device to work with a proxy but still cannot see the traffic
belonging to your target application, that app may have implemented
certificate pinning.
有时候需要绕过证书固定来截取更好保护的应用程序的流量。如果您已经成功设置了移动设备与代理的配合，但仍然无法看到目标应用程序的交通流量，那么该应用程序可能已经实现了证书固定。
The process of bypassing cert pinning will depend on how the certificate
pinning is implemented for each application. For Android [
]{#c23.xhtml#Page_350 .pagebreak title="350"} applications, you have a
few options for bypassing the pinning. You can use *Frida* , a tool that
allows you to inject scripts into the application. You can download
Frida from
[https://frida.re/docs/installation/](https://frida.re/docs/installation/){.LinkURL}
. Then use the Universal Android SSL Pinning Bypass Frida script (
[https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/](https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/){.LinkURL}
). Another tool that you could use to automate this process is Objection
(
[https://github.com/sensepost/objection/](https://github.com/sensepost/objection/){.LinkURL}
), which uses Frida to bypass pinning for Android or iOS. Run the
Objection command `      android sslpinning disable     ` to bypass
pinning.
绕过证书固定的过程将取决于每个应用程序实现证书固定的方式。对于Android应用程序，您有几种绕过固定的选项。您可以使用Frida，这是一种允许您将脚本注入应用程序的工具。您可以从https://frida.re/docs/installation/下载Frida。然后使用Universal
Android SSL Pinning Bypass Frida脚本
(https://codeshare.frida.re/@pcipolloni/universal-android-ssl-pinning-bypass-with-frida/)。您还可以使用Objection
(https://github.com/sensepost/objection/)
自动化此过程，使用Frida绕过Android或iOS的固定。运行Objection命令android
sslpinning disable来绕过固定。
For most applications, you can bypass the certificate pinning by using
these automated tools. But if the application implements pinning with
custom code, you might need to manually bypass it. You could overwrite
the packaged certificate with your custom certificate. Alternately, you
could change or disable the application's certificate validation code.
The process of executing these techniques is complicated and highly
dependent on the application that you're targeting, so I won't go into
detail. For more information on these methods, you'll have to do some
independent research.
大多数情况下，您可以通过使用这些自动化工具来绕过证书绑定。但是如果应用程序使用自定义代码进行针对性绑定，您可能需要手动绕过。您可以使用自定义证书来覆盖打包的证书。或者，您可以更改或禁用应用程序的证书验证代码。执行这些技术的过程非常复杂，且高度依赖您的目标应用程序，所以我不会详细介绍。有关这些方法的更多信息，您需要进行一些独立的研究。
## Anatomy of an APK {#c23.xhtml#h1-501546c23-0003}
Before you attack Android applications, you must first understand what
they are made of. Android applications are distributed and installed in
a file format called *Android Package (* *APK)* . APKs are like ZIP
files that contain everything an Android application needs to operate:
the application code, the application manifest file, and the
application's resources. This section describes the main components of
an Android APK.
攻击Android应用程序之前，您必须首先了解它们是由什么构成的。Android应用程序以一种称为Android包（APK）的文件格式进行分发和安装。APK就像是包含了Android应用程序所有需要的一切：应用程序代码，应用程序清单文件和应用程序资源的ZIP文件。本节介绍了Android
APK的主要组成部分。
First, the *AndroidManifest.xml* file contains the application's package
name, version, components, access rights, and referenced libraries, as
well as other metadata. It's a good starting point for exploring the
application. From this file, you can gain insights into the app's
components and permissions.