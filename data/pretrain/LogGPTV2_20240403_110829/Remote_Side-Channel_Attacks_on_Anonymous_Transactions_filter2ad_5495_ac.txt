To understand our side-channel attacks, we ﬁrst describe how
Zcash guarantees unlinkability. From Section 2, recall that
unlinkability relies on two concepts: (1) transactions only
contain a commitment to the recipient’s public key, and (2) a
user can derive multiple unlinkable public keys (diversiﬁed
addresses) from a single secret key.
4A co-located adversary (which is not part of Zcash’s threat model [18])
can likely recover signiﬁcantly more information by exploiting more ﬁne-
grained timing side-channels, e.g., from a shared cache.
2744    29th USENIX Security Symposium
USENIX Association
Zcash’s diversiﬁed addresses are static Difﬁe-Hellman keys.
The private key is a scalar, ivk (the incoming viewing key). A
diversiﬁed public key is of the form (Gd, PKd) where Gd is a
random point in an elliptic curve group and PKd = ivk· Gd.
A payment to the address (Gd, PKd) contains a UTXO (a
Note commitment) of the form:
cm = Commit(Gd||PKd||v; rcm) ,
where v is the sent amount and rcm the commitment random-
ness. To later spend this UTXO, the receiver has to prove that
she knows an opening of cm.
In-band secret distribution. The sender uses El-Gamal
encryption to share an opening of cm with the recipient. The
sender samples an ephemeral secret key esk, computes the
public key EPK = esk· Gd, and derives the shared key
k = esk· PKd = esk· ivk· Gd .
The opening of the commitment cm is included in the Note
plaintext (np). The sender encrypts the Note plaintext np
under an authenticated encryption scheme using the key k,
and appends the ciphertext C and the ephemeral public key
EPK to the transaction.
Blockchain scanning. To recover her funds, a user scans
each transaction with her private key ivk. For a transaction
with public key EPK, Note ciphertext C and Note commitment
cm, she computes:
TrialDecrypt(ivk, EPK,C, cm)
1: k = ivk· EPK
2: np = Decryptk(C)
3: if np = ⊥, return ⊥
4: Parse np as np := (Gd,v, rcm,memo)
5: PKd = ivk· Gd
6: if cm (cid:54)= Commit(Gd||PKd||v; rcm), return ⊥
7: return np
That is, if decrypting C succeeds (which means the user is the
transaction’s payee), the user checks that the Note plaintext
np contains a valid opening of the Note commitment cm.
4.2 Our Attacks
Our attacks — PING and REJECT — enable an adversary
to tell whether a remote Zcash node succeeded in decrypting
the Note ciphertext of a transaction. From this, the adversary
learns that this remote node belongs to the transaction’s payee.
The two attacks differ in their setup (REJECT only applies
to transactions crafted by the attacker, while PING applies to
any transaction), and in the side-channel they exploit (an error
message for REJECT, and a timing side-channel for PING).
As described in Section 3.2, identifying the P2P node of a
transaction payee further lets an adversary link transactions,
recover a user’s IP address, link diversiﬁed payment addresses,
and even open a timing side-channel that (in principle) enables
remote extraction of the victim’s private viewing key, ivk.
Both the PING and REJECT attacks exploit a (weak) form
of “decryption oracle” [14, 41], that allows the adversary to
learn whether a given ciphertext was correctly decrypted by a
node. Yet, our setup is quite different from a standard chosen
ciphertext attack. Indeed, such attacks typically rely on the
ability to send arbitrary ciphertexts to a (single) victim, and to
learn some predicate of the decrypted plaintext (e.g., whether
the plaintext is correctly formatted or not [6, 48]). As we
will see, in our case the adversary either already knows the
Note plaintext (for the REJECT attack) or lacks the ability
to create new valid authenticated Note ciphertexts (for the
PING attack). Instead of trying to break semantic security as
in a traditional CCA attack, our attacks use the decryption
oracle to identify which user, within a network, holds the key
to decrypt a transaction’s Note ciphertext.
Experimental Setup. We evaluate all our attacks on release
v2.0.7 of Zcash, before the vulnerabilities were ﬁxed in re-
sponse to our disclosure. For experiments in a WAN setting,
the victim runs on a machine in Zürich (quad-core Intel i7-
7700 PI:EMAIL with 8GB of RAM running Ubuntu
18.04.2) and the remote attacker runs on a Google cloud in-
stance in London (N1 standard instance). We measure an
average round-trip latency of 21 ms, with sub-millisecond
standard-deviation.
4.2.1 The PING Attack
Our ﬁrst attack, PING, exploits the tight coupling between
wallet and P2P components in the Zcash client. More pre-
cisely, we exploit the fact that the Zcash client serially pro-
cesses all incoming P2P messages, including those that con-
tain new transactions. As a result, the time taken to process a
transaction impacts the node’s processing of other messages.
A remote P2P adversary can thus build a timing side-channel
that leaks weather a node is the payee of a transaction.
The PING attack applies to any transaction, even those sent
by honest users and for which the adversary does not know
the payee’s public key.
A timing side-channel in transaction processing.
If a
Zcash wallet successfully decrypts a Note ciphertext, it checks
that the opening of the Note commitment is valid (line 6 in
TrialDecrypt). This involves computing a Pedersen hash [27]
with two elliptic curve scalar multiplications. A TrialDecrypt
call thus takes longer (by about one millisecond on a desktop
machine) when the decryption succeeds.
A P2P adversary can measure the duration of the
TrialDecrypt call by sending a “ping” message to a Zcash
USENIX Association
29th USENIX Security Symposium    2745
node immediately after it receives a new transaction.5
The node’s wallet ﬁrst processes the transaction and calls
TrialDecrypt, before the node responds to the ping. The time
elapsed until the receipt of the ping response leaks informa-
tion about the success of the Note decryption, and therefore
on whether the node was the payee of the relayed transaction.
A timing side-channel in block processing. The above
attack applies to unconﬁrmed transactions that enter a victim
node’s memory pool. The same vulnerability also applies to
the processing of transactions included in a mined block.
Upon receiving a new block, a Zcash node sequentially
processes and trial-decrypts each transaction in it. The total
time to validate the block thus depends on the number of
transactions that pay the user. As above, a remote adversary
can leak this validation time by pinging the victim node right
after it receives a fresh block.
Applying the attack. The attacker ﬁrst builds a baseline
by running the PING attack against a target node, using a
transaction that does not pay the target (the attacker can send
funds to itself). The timing of the ping responses from a
baseline for a TrialDecrypt call where decryption fails. The
attacker then compares this baseline to timings obtained from
attacks on new transactions.
The attack requires reliable measurements of a node’s trans-
action processing time. Note that for transactions sent by
honest users, the attack cannot be repeated to average out net-
work jitter, because, once a node has validated a transaction, it
ignores further messages containing it. One optimization con-
sists in running both above variants of the PING attack, once
when the transaction enters a node’s mempool and once when
it is included in a block (wallets re-process a transaction when
it is mined). The attacker thus gets two timing measurements,
thereby halving the variance caused by the network.
Evaluation. We run the attack in a WAN, with a victim
node in Zürich and an attacker in London (21 ms round trip
latency). The attacker sends 200 transactions, half of which
pay the victim. Figure 2 plots the victim’s response time
to the attacker’s subsequent ping message. The attacker can
distinguish between the two scenarios with 100% precision.
We further validate the attack on block processing. The
adversary relays 20 blocks to the victim, each of which con-
tains a single transaction that either pays the victim or another
user. Figure 3 plots the delay of the victim’s ping response.
The attack achieves 100% precision. The attack extends to
blocks with N > 1 transactions, by using as baseline the time
to validate a block with N non-paying transactions.
5A ping is a standard protocol message that Zcash P2P nodes send to their
neighboring peers at regular intervals, to conﬁrm that their shared TCP/IP
connection is still valid. Upon receiving a ping message, the P2P node replies
with a “pong” message.
Figure 2: PING attack on unconﬁrmed Zcash transac-
tions in a WAN. For 200 transactions sent to a node, we time
the node’s response to a subsequent ping message. When the
node’s wallet is the transaction’s payee, the ping response is
delayed. The ﬁgure shows standard box plots with outliers.
Figure 3: PING attack on mined Zcash transactions in a
WAN. For 20 blocks (each containing a single transaction)
sent to a Zcash node, we time the node’s response to a subse-
quent ping message. When the node’s wallet is the payee of
the transaction in the block, the ping response is delayed.
4.2.2 The REJECT Attack
Our second attack, REJECT, exploits a ﬂaw in the handling
of certain malformed transactions. It allows an adversary, in
possession of a user’s public key, to send a transaction that
causes the user’s P2P node to respond with a “reject” message.
The REJECT attack is weaker than PING, in that it only
applies to transactions sent by the attacker to a known address.
At the same time, the REJECT attack does not rely on any
timing signals and is thus easier to mount and more reliable.
The ﬂaw exploited by the attack is in the parsing of the
Note plaintext in TrialDecrypt (line 4). The ﬁrst byte of a
plaintext encodes the protocol version (0x01 in the current
Sapling version). If the version byte is incorrect (i.e., other
than 0x01 for Sapling transactions), the parser throws an ex-
ception that is caught in the client’s main message-processing
thread, where it causes a “reject” message to be sent to the
peer that shared the transaction (see Figure 4).
This provides a P2P adversary with an oracle indicating the
successful decryption of a Note ciphertext with a speciﬁcally
malformed plaintext (e.g., with a version byte of 0x02).
2746    29th USENIX Security Symposium
USENIX Association
Wallet is PayeeWallet is not Payee46.046.547.047.548.048.549.049.5PING response time (ms)Wallet is PayeeWallet is not Payee104106108110112114PING response time (ms)SaplingNotePlaintext::decrypt in Note.cpp
pt = AttemptSaplingEncDecryption(C, ivk, epk);
if (!pt) {
return boost::none; // decryption failed
}
CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);
ss PushMessage("reject", ...);
Figure 4: Error handling exploited by the REJECT attack.
The code is from Zcash version 2.0.7, before the attack was
patched. Top: if decryption of a Note ciphertext C succeeds,
the decrypted stream is serialized into a Note plaintext. Mid-
dle: an exception is thrown if the plaintext’s ﬁrst byte does
not encode the protocol version. Bottom: the client’s message-
processing thread catches the exception, and sends a “reject”
message to the peer that sent the malformed transaction.
Linking a public key to a node. Given a public key
(Gd, PKd), the attacker can identify the Zcash node that holds
this key. The attacker builds a Note plaintext with an incorrect
leading byte, encrypts it under a key derived from (Gd, PKd)
and adds it to a transaction. The attacker sends the transaction
to all P2P nodes and checks which one replies with a “reject”
message. We validated this attack in a local test network.
A potential issue is that a peer that receives the malformed
transaction could relay it to the payee before the attacker’s
own message reaches the payee. In this case, the payee will
send a “reject” message to the relaying peer, and ignore the
attacker’s later message. Yet, as nodes validate transactions
before relaying them, the attacker’s message is likely to reach
the payee ﬁrst. In the event that the attacker does fail to receive
a “reject” message, the attack can simply be repeated.
4.2.3 Attacks beyond Recipient Discovery
The vulnerabilities underlying the above attacks can be further
exploited for adversarial goals beyond linking transactions
and de-anonymizing public keys.
Denial of service. A curious consequence of the REJECT
attack is that once a transaction containing a malformed Note
plaintext is included in a mined block, the transaction payee’s
client crashes when attempting to validate the block.
This ﬂaw is pernicious. Even if the Zcash client is manually
restarted, it re-crashes immediately while validating the block.
Figure 5: Time to compute ivk· P for a ﬁxed ivk and one
million random points P in the elliptic-curve group.
If an attacker were to get hold of payment addresses for a
large number of Zcash users, this ﬂaw could lead to a strong
DoS attack vector. Worse, if an attacker knows the payment
addresses of many Zcash miners, such a DoS attack could be
exploited to stiﬂe the network’s mining power (e.g., in prepa-
ration for a 51% attack or to remove mining competition).
Key recovery via ECDH timing. The PING and REJECT
attacks also yield a remote timing channel on Zcash’s imple-
mentation of the ECDH key exchange, in particular the Ellip-
tic curve multiplication ivk· EPK in TrialDecrypt (line 1).
The Zcash team was aware that the ECDH key exchange
is not constant time, and that this might be exploitable by a
co-located adversary [18]. The REJECT and PING attacks
further open up the possibility of this side-channel being ex-
ploited remotely.
Zcash’s Elliptic Curve multiplication routine is indeed not
constant-time: it uses a standard double-and-add procedure,
and the underlying ﬁeld arithmetic is not constant time. We
adapted Kocher’s timing attack [29] to Zcash’s Elliptic Curve
multiplication routine. For a ﬁxed secret ivk, we locally timed
the multiplication for 1 million random points. The timing
distribution is plotted in Figure 5, and is clearly not constant.
Assuming we have already recovered the j most signiﬁcant
bits of ivk, we recover the ( j + 1)-th bit by correlating the
time of a point doubling or point multiplication with the total
multiplication time. Conditioned on all previous bits being
recovered, the following bit is recovered with 98.4% proba-
bility. Using a suitable backtracking mechanism to resolve
the few false guesses, the full key could thus be recovered
with about one million samples.
The query complexity of this attack is fairly high. The at-