 public | int4_fixeddecimal_ne            | boolean          | integer, fixeddecimal       | func  
 public | int4fixeddecimal                | fixeddecimal     | integer                     | func  
 public | int4fixeddecimaldiv             | double precision | integer, fixeddecimal       | func  
 public | int4fixeddecimalmi              | fixeddecimal     | integer, fixeddecimal       | func  
 public | int4fixeddecimalmul             | fixeddecimal     | integer, fixeddecimal       | func  
 public | int4fixeddecimalpl              | fixeddecimal     | integer, fixeddecimal       | func  
 public | max                             | fixeddecimal     | fixeddecimal                | agg  
 public | min                             | fixeddecimal     | fixeddecimal                | agg  
 public | numeric_fixeddecimal            | fixeddecimal     | numeric                     | func  
 public | numeric_fixeddecimal_cmp        | integer          | numeric, fixeddecimal       | func  
 public | numeric_fixeddecimal_eq         | boolean          | numeric, fixeddecimal       | func  
 public | numeric_fixeddecimal_ge         | boolean          | numeric, fixeddecimal       | func  
 public | numeric_fixeddecimal_gt         | boolean          | numeric, fixeddecimal       | func  
 public | numeric_fixeddecimal_le         | boolean          | numeric, fixeddecimal       | func  
 public | numeric_fixeddecimal_lt         | boolean          | numeric, fixeddecimal       | func  
 public | numeric_fixeddecimal_ne         | boolean          | numeric, fixeddecimal       | func  
 public | sum                             | fixeddecimal     | fixeddecimal                | agg  
(102 rows)  
```  
对比fixeddecimal numeric性能  
```  
postgres=# create temp table t1 (id fixeddecimal);  
CREATE TABLE  
postgres=# create temp table t2 (id numeric);  
CREATE TABLE  
postgres=# insert into t1 select generate_series(1,10000000);  
INSERT 0 10000000  
postgres=# insert into t2 select generate_series(1,10000000);  
INSERT 0 10000000  
postgres=# select pg_column_size(id) from t1 limit 1;  
 pg_column_size   
----------------  
              8  
(1 row)  
postgres=# select pg_column_size(id) from t2 limit 1;  
 pg_column_size   
----------------  
              5  
(1 row)  
postgres=# \dt+  
                                List of relations  
   Schema   |         Name         | Type  |  Owner   |    Size    | Description   
------------+----------------------+-------+----------+------------+-------------  
 pg_temp_13 | t1                   | table | postgres | 346 MB     |   
 pg_temp_13 | t2                   | table | postgres | 346 MB     |   
-- fixeddecimal:  
postgres=# explain analyze select sum(id),avg(id),min(id),max(id) from t1;  
                                                       QUERY PLAN                                                         
------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=244248.96..244248.97 rows=1 width=32) (actual time=3348.701..3348.702 rows=1 loops=1)  
   ->  Seq Scan on t1  (cost=0.00..144248.48 rows=10000048 width=8) (actual time=0.134..1925.172 rows=10000000 loops=1)  
 Planning Time: 0.152 ms  
 Execution Time: 3348.950 ms  
(4 rows)  
postgres=# explain analyze select sum(id),avg(id),min(id),max(id) from t1;  
                                                       QUERY PLAN                                                         
------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=244248.96..244248.97 rows=1 width=32) (actual time=2943.527..2943.528 rows=1 loops=1)  
   ->  Seq Scan on t1  (cost=0.00..144248.48 rows=10000048 width=8) (actual time=0.147..1543.519 rows=10000000 loops=1)  
 Planning Time: 0.065 ms  
 Execution Time: 2943.618 ms  
(4 rows)  
-- numeric:  
postgres=# explain analyze select sum(id),avg(id),min(id),max(id) from t2;  
                                                       QUERY PLAN                                                         
------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=164602.57..164602.58 rows=1 width=128) (actual time=5507.606..5507.608 rows=1 loops=1)  
   ->  Seq Scan on t2  (cost=0.00..104425.28 rows=6017728 width=32) (actual time=0.061..2850.369 rows=10000000 loops=1)  
 Planning Time: 0.091 ms  
 Execution Time: 5507.643 ms  
(4 rows)  
postgres=# explain analyze select sum(id),avg(id),min(id),max(id) from t2;  
                                                       QUERY PLAN                                                         
------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=164602.57..164602.58 rows=1 width=128) (actual time=3890.299..3890.300 rows=1 loops=1)  
   ->  Seq Scan on t2  (cost=0.00..104425.28 rows=6017728 width=32) (actual time=0.124..1583.379 rows=10000000 loops=1)  
 Planning Time: 0.060 ms  
 Execution Time: 3890.340 ms  
(4 rows)  
```  
fixeddecimal比numeric性能更好.   
## 2 pgdecimal using Decimal64 and Decimal128  
[《PostgreSQL decimal64 decimal128 高效率数值 类型扩展》](../201703/20170316_02.md)    
https://github.com/vitesse-ftian/pgdecimal   
有两个常见的decimal库，decNumber以及Intel提供的Intel ADX库。    
pgdecimal插件选择了decNumber库.  
https://github.com/gcc-mirror/gcc/tree/master/libdecnumber    
decimal库的性能对比    
http://speleotrove.com/decimal/dpintro.html    
decNumber与Inter ADX性能接近，但是Inter ADX提供了decimal64/128, int32/64, float/double类型的相互转换，这个很给力。（也许将来vitesse会支持intel adx库吧）      
pgdecimal 依赖的decNumber，因此我们必须先安装decNumber    
### 1. decNumber安装  
1\. 下载 decNumber package    
http://speleotrove.com/decimal/    
```    
cd ~  
wget http://speleotrove.com/decimal/decNumber-icu-368.zip    
unzip decNumber-icu-368.zip    
```    
2\. 安装decNumber到PolarDB for postgresql软件目录中(假设PolarDB for postgresql安装在`/home/postgres/tmp_basedir_polardb_pg_1100_bld`)    
首先要在PolarDB for postgresql软件的include目录中，创建一个空目录，    
```  
mkdir -p /home/postgres/tmp_basedir_polardb_pg_1100_bld/include/decnumber    
```  
在decNumber src目录中创建Makefile，install -D 修改为对应要安装的目录。    
```  
cd ~/decNumber  
## 如果makefile有问题, 缩进改成TAB键即可  
vi Makefile    
OBJS = decSingle.o decDouble.o decQuad.o decNumber.o decContext.o  
CFLAGS = -Wall -g -O2 -fPIC  
libdecnumber.a: $(OBJS)  
	ar -rcs libdecnumber.a $(OBJS)  
clean:  
	rm -f libdecnumber.a $(OBJS)  
install:  
	install -D *.h /home/postgres/tmp_basedir_polardb_pg_1100_bld/include/decnumber  
	install -D libdecnumber.a /home/postgres/tmp_basedir_polardb_pg_1100_bld/lib  
```  
3\. 编译安装decNumber    
```  
cd ~/decNumber    
make  
make install  
```  
### 2. pgdecimal安装    
```    
cd ~  
git clone --depth 1 https://github.com/vitesse-ftian/pgdecimal    
cd pgdecimal     
```   
有一个小BUG，`.control`的版本号没有与sql文件的版本号对齐    
```    
mv decimal--2.0.sql decimal--1.0.sql    
```    
另外，需要修改一下Makefile，指定版本，以及decnumber的include和lib目录    
```    
vi Makefile    
PG_CPPFLAGS = -I/home/postgres/tmp_basedir_polardb_pg_1100_bld/include/decnumber  
SHLIB_LINK = -L/home/postgres/tmp_basedir_polardb_pg_1100_bld/lib -ldecnumber   
DATA = decimal--1.0.sql    
```    
由于PolarDB基于PG 11, 还需要修改一下GET_8_BYTES和SET_8_BYTES  
```  
vi decimal.c  
- return SET_8_BYTES(myunion.retval);  
+ return (Datum) (myunion.retval);  
- myunion.value = GET_8_BYTES(X);  
+ myunion.value = (Datum) (X);  
```  
相关代码:  
src/include/postgres.h  
```  
 380 #define GET_1_BYTE(datum)   (((Datum) (datum)) & 0x000000ff)  
 381 #define GET_2_BYTES(datum)  (((Datum) (datum)) & 0x0000ffff)  
 382 #define GET_4_BYTES(datum)  (((Datum) (datum)) & 0xffffffff)  
 383 #if SIZEOF_DATUM == 8  
 384 #define GET_8_BYTES(datum)  ((Datum) (datum))  
 385 #endif  
 386 #define SET_1_BYTE(value)   (((Datum) (value)) & 0x000000ff)  
 387 #define SET_2_BYTES(value)  (((Datum) (value)) & 0x0000ffff)  
 388 #define SET_4_BYTES(value)  (((Datum) (value)) & 0xffffffff)  
 389 #if SIZEOF_DATUM == 8  
 390 #define SET_8_BYTES(value)  ((Datum) (value))  
 391 #endif  
```  
安装pgdecimal  
```  
USE_PGXS=1 make clean    
USE_PGXS=1 make     
USE_PGXS=1 make install    