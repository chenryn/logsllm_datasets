Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:57:38 UTC from IEEE Xplore.  Restrictions apply. 
 0 10 20 30 40 50 60 0 500 1000 1500 2000 2500 3000# of queued requestsTime (seconds)(a)QueueonGeneralPool 0 20 40 60 80 100 120 140 160 0 500 1000 1500 2000 2500 3000# of queued requestsTime (seconds)(b)QueueonLengthyPoolFigure8.Lengthofthequeuesfordynamicrequestsonthemodiﬁedwebserver.(a)General;(b)Lengthy.hand,thisisalsowhywecannotobtainthesamelargeper-formancegainsforthelengthyrequestsaswedoforthequickrequests.Manyofthelengthyrequestsgetstuckintheirownqueuebehindanumberofotherlengthyrequests.Loweringthenumberofthreadssetasideforthequickre-questsimprovestheresponsetimeoflengthyrequests,butatthecostofsacriﬁcingmuchoftheperformancegainsforthosequickrequests,particularlyduringtrafﬁcspikes.Thiswouldnotbeanacceptabletradeoffforarealwebsite.Whiletheresponsetimesforslowwebpagesarestillhigh,onarealwebsitethereareanumberofthingswecoulddotomitigatethis.Forexample,wecouldaddin-dexestoallﬁeldsinordertopreventqueriesfromhavingtoscanthroughanentiretabletoﬁndﬁeldswithcertainval-ues.Wecouldalsoregularlyprecomputeexpensivequerieswhichdonotchangefromusertouser,suchaswhichbooksareneworbestsellers.Ofcourse,todothesewouldchangetheTPC-Wbenchmarkitself,andwoulddeviatefromthepurposeofusingsuchastandardizedbenchmark.4.2.2WebServerThroughputFigure9illustratestheoverallthroughputsforalltypesofrequestsontheunmodiﬁedandmodiﬁedwebservers.Itisclearthatourproposedschemeconsistentlyperformsbetterthanthetraditionalthread-per-requestscheme.Figure10showsthedetailedthroughputcomparisonforfourtypesofrequests:staticrequests,alldynamicrequests,quickdy-namicrequests,andlengthydynamicrequests.Wecanseethatthethroughputgainsareobviousforallthefourtypesofrequests. 0 5000 10000 15000 20000 25000 0 5 10 15 20 25 30 35 40 45 50Interactions per minuteTime (minutes)UnmodifiedModifiedFigure9.Throughputforalltypesofrequestsontheunmodiﬁedandmodiﬁedwebservers.webpagenameunmodiﬁedmodiﬁedTPC-Wadminrequest7481TPC-Wadminresponse7172TPC-Wbestsellers76029646TPC-Wbuyconﬁrm395547TPC-Wbuyrequest429596TPC-Wcustomerregistration469642TPC-Wexecutesearch73079723TPC-Whomeinteraction1958625608TPC-Wnewproducts74069758TPC-Worderdisplay184206TPC-Worderinquiry219255TPC-Wproductdetail1400218608TPC-Wsearchrequest799410543TPC-Wshoppingcartinteraction11731536Table4.ThetotalnumbersofcompletedwebinteractionsforeachtypeofTPC-Wpagesonunmodiﬁedandmodiﬁedwebservers.Table4furtherliststhetotalnumberofcompletedwebinteractionsforeachtypeofTPC-Wpagesduringthe50-minutemeasurementinterval.Obviously,byimprovingtheutilizationofdatabaseconnectionsandenablingbet-terscheduling,ourschemecanincreasethethroughputofeachtypeofwebinteractions.Overall,ourschemeim-proveswebserverthroughputoverthetraditionalthread-per-requestschemeby31.3%.Notethatforsomerequests,thereisnostrongcorrelationbetweentheresponsetimere-sults(Table3)andthethroughputresults(Table4),whileoneexpectsthemtofollowLittle’slaw.Forinstance,incaseoftheTPCadminresponsepage,theaverageresponsetimeisincreasedby52.6%inthemodiﬁedwebserver(row2ofTable3),butthetotalnumberofcompletedwebinteractionsremainsalmostthesame(row2ofTable4).WeconjecturethatthisirregularityismainlyduetothefactthatTPC-Wbenchmarkisaclosedqueuingsystem.Meanwhile,sincethestandard“browsingmix”workloadofTPC-Wisusedinourexperiments,theresponsetimeisnotnecessarilyin-verselyproportionaltothroughputforeachtypeofrequests.978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
257
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:57:38 UTC from IEEE Xplore.  Restrictions apply. 
 0 5000 10000 15000 20000 25000 0 5 10 15 20 25 30 35 40 45 50Interactions per minuteTime (minutes)UnmodifiedModified(a)StaticRequests 0 500 1000 1500 2000 2500 0 5 10 15 20 25 30 35 40 45 50Interactions per minuteTime (minutes)UnmodifiedModified(b)AllDynamicRequests 0 500 1000 1500 2000 2500 0 5 10 15 20 25 30 35 40 45 50Interactions per minuteTime (minutes)UnmodifiedModified(c)QuickDynamicRequests 0 50 100 150 200 250 300 0 5 10 15 20 25 30 35 40 45 50Interactions per minuteTime (minutes)UnmodifiedModified(d)LengthyDynamicRequestsFigure10.Throughputforeachtypeofre-questsontheunmodiﬁedandmodiﬁedwebservers.5RelatedWorkWelshandCuller[11]proposedawebserverwithasim-ilarconcepttoours.Eachtypeofactionsuchasqueryingdatabases,accessingﬁles,andservingstaticcontentswouldbehandledbyadifferentpoolofthreads.However,theirfocusisonloadsheddingateachstageratherthanmit-igatingdatabaselatency.Moreimportant,theyproposedtochangethewaythatwebdeveloperswritewebapplica-tions,whichseverelylimitstheadoptionoftheirapproach.Themaingoalofourworkistoachievecomparableresultswhilekeepingtheprogrammingmodelintact.Consideringboththesizeofarequestandhowlongtherequesthasbeenqueued,Cherkasova[3]proposedaso-lutiontoovercometheshortcomingsofShortestJobFirstschedulinginwebservers.Shedemonstratedthatthepro-posedschedulingmethodcanimprovetheaverageresponsetimeperHTTPrequestmorethanthreetimesunderheavyloads.Ourapproachmakesasimilartradeoffamongmul-tiplequeueswithoutactuallyusinganykindofpriorityqueue.OurschemeisalsocloselyrelatedtotheworkdonebyElniketyetal.[5],whichperformsschedulingdirectlytodatabasequeries.Ourschemeaccomplishesmuchthesamethinginsidethewebserveranddoesnotrequireanaddi-tionalservertositbetweenthewebanddatabaseservers.Thus,theirworkismoretransparenttotheactualapplica-tionbutrequiresmoreeffortandhardwaresupporttosetuponthepartofthesiteadministrators.In[6],Fowleretal.grewandshrunkthreadpoolstorespondtodemand.Theirapproachiscomplementarytoours.Whileweconcentrateonusingdifferentthreadpoolstolowerresponsetimesandincreasewebserverthrough-puts,theyadjustedthreadpoolstoseektheoptimallevelsfordifferentserverloads.Indeed,theyalsousedtheTPC-Wbenchmarktodemonstratetheeffectivenessoftheirap-proach.Crovellaetal.[4]proposedshortest-connection-ﬁrstschedulingtoapproximatetheeffectsofShortestRe-mainingProcessingTime(SRPT)scheduling.SchroederandHarchol-Balter[9]providedadetailedimplementationstudyonSRPTschedulinganddemonstrateditseffective-nessinimprovingtheperformanceofwebserversduringtransientperiodsofoverload.However,SRPTismoreap-plicabletowebserversthatservestaticcontent,i.e.,ﬁleswhosesizecanbedeterminedinadvance.Incontrast,ourmethodisagenericapproachthatspeciﬁcallyconsidersthetrendofgeneratingdynamicwebpageswithtemplatesinmodernwebapplications.Someotherworkemployintelligentqueuingandloadbalancingtoimprovewebserverperformance,albeitwithslightlydifferentgoals.Guitartetal.[7]proposedasession-basedadaptiveoverloadcontrolmechanismtopri-oritizerequestsfromexistingSSLsessionsratherthanpri-oritizingsmallrequests,becauseofthehighoverheadinsettingupanSSLsession.Thisworkiscomplementarytoours,asitcouldbeintegratedwithourqueuingstrategyifwerunourbenchmarkoverHTTPS.In[2],Bhojetal.usedaqueuingstrategytoimprovequalityofserviceforitsmoreimportantclients.Eachrequestisgivenaprioritybasedontheuser’sclassiﬁcationratherthananyparticu-larpropertyoftherequestitself.In[1],AbdelzaherandBhattiproposedawebserverQoSmanagementarchitec-turethatreliesonwebcontentadaptation.Suchanadapta-tionarchitectureenablesaservertocopewithoverloadinagracefulmanner.Ranjanetal.[8]proposedtoperformpriorityschedulingtomitigatedistributeddenialofservice978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
258
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:57:38 UTC from IEEE Xplore.  Restrictions apply. 
attacks.Insteadofschedulingrequestsbasedontheesti-matedservicetime,theyprioritizedtherequestswhicharemorelikelytooriginatefromlegitimateclients.TotokandKaramcheti[10]proposedareward-drivenrequestpriori-tizationmechanism.Thismechanismpredictsthefuturestructureofwebsessionsandgiveshigherexecutionpri-oritytotherequestswhosesessionsarelikelytobringmorereward.Incomparisonwiththesepreviouswork,ourapproachisnovelbecauseitseparatestemplaterenderingfromdatageneration,whichsigniﬁcantlydecreasestheresponsela-tencyandincreasestheaccuracyofexecutiontimemea-surement.Ourrequestschedulingmethodalsohasamuchhigherchanceofgainingwidespreadadoptionthanmanyofprevioussolutions,asithaslittletonoeffectonhowpro-grammerswritecode.Asmentionedatthebeginningofthepaper,separatingcontentandpresentationcodehasbe-comecommonintheﬁeldofwebprogramming.SimilartotheDjangoframework,othermodernwebprogrammingframeworkssuchastheApacheStruts[12],theASP.NETMVC[13],theJavaServerFaces[19],andtheRubyonRails[22]allseparatetheirprogramlogicfromtheirHTMLgeneration.Itisthisseparationthatenablestheoptimiza-tionspresentedinthepaper;therefore,ourrequestschedul-ingmethodcouldbeappliedtoeachofthoseframeworksaswell.6ConclusionThispaperpresentsanewrequestschedulingmethodtoefﬁcientlysupporttheresourcemanagementofmod-erntemplate-basedwebapplicationsinmultithreadedwebservers.Inthismethod,awebrequestisservedbydif-ferentthreadsinmultiplethreadpoolsforparsinghead-ers,performingdatabasequeries,andrenderingtemplates.Byassigningdatabaseconnectionsonlytodatagenerationthreads,theproposedschemeensuresthatopendatabaseconnectionsspendlesstimeidle,andhence,improvestheutilizationofthepreciousdatabaseconnectionresources.Meanwhile,usingdifferentthreadsincreasesthemeasure-mentaccuracyoftheservicetimeforeachtypeofrequests,andthusenableustoprovidebetterschedulingfordy-namicwebrequests.Weimplementedourrequestschedul-ingmethodinCherryPy,arepresentativetemplate-enabledmultithreadedwebserver,andweevaluateditsperformanceusingthestandardTPC-WbenchmarkimplementedwithDjangowebtemplates.Ourevaluationresultsdemonstratethattheproposedschemereducestheaverageresponsetimesofmostwebpagesbytwoordersofmagnitudeandincreasestheoverallwebserverthroughputby31.3%un-derheavyloads.Acknowledgments:Wethankanonymousreviewersfortheirvaluablecommentsandsuggestions.ThisworkwaspartiallysupportedbyNSFgrantsCNS-0627339andCNS-0627340.References[1]T.F.AbdelzaherandN.Bhatti.Webserverqosmanagementbyadaptivecontentdelivery.InProc.oftheIWQoS,1999.[2]P.Bhoj,S.Ramanathan,andS.Singhal.Web2K:BringingQoStoWebServers.TechnicalReportHPL-2000-61,HPLaboratories,May2000.[3]L.Cherkasova.Schedulingstrategytoimproveresponsetimeforwebapplications.InProc.oftheHPCNEurope,pages305–314,1998.[4]M.E.Crovella,R.Frangioso,andM.Harchol-Balter.Con-nectionschedulinginwebservers.InProc.oftheUSITS,pages22–22,1999.[5]S.Elnikety,E.Nahum,J.Tracey,andW.Zwaenepoel.Amethodfortransparentadmissioncontrolandrequestschedulingine-commercewebsites.InProc.oftheInter-nationalWorldWideWebConference,2004.[6]R.Fowler,A.Cox,S.Elnikety,andW.Zwaenepoel.Usingperformancereﬂectioninsystemssoftware.InProc.oftheHotOS,2003.[7]J.Guitart,D.Carrera,V.Beltran,J.Torres,andE.Ayguade.Session-basedadaptiveoverloadcontrolforsecuredynamicwebapplications.InProc.oftheICPP,2005.[8]S.Ranjan,R.Swaminathan,M.Uysal,andE.W.Knightly.Ddos-resilientschedulingtocounterapplicationlayerat-tacksunderimperfectdetection.InProc.oftheINFOCOM,2006.[9]B.SchroederandM.Harchol-Balter.Webserversunderoverload:Howschedulingcanhelp.ACMTrans.Inter.Tech.,6(1):20–52,2006.[10]A.TotokandV.Karamcheti.Improvingperformanceofin-ternetservicesthroughreward-drivenrequestprioritization.InProc.oftheIWQoS,2006.[11]M.WelshandD.Culler.AdaptiveoverloadcontrolforbusyInternetservers.InProc.oftheUSITS,2003.[12]ApacheStruts.http://struts.apache.org/.[13]ASP.NETMVC.http://www.asp.net/mvc/.[14]CascadingStyleSheets.http://www.w3.org/Style/CSS/.[15]CherryPy-Trac.http://www.cherrypy.org/.[16]Django—TheWebframeworkforperfectionistswithdead-lines.http://www.djangoproject.com/.[17]JavaTPC-WImplementationDistributionbyPHARMteam.http://www.ece.wisc.edu/pharm/.[18]JavaTPC-WImplementationDistributionbyRiceUniver-sity.http://www.cs.rice.edu/CS/Systems/DynaServer.[19]JavaServerFacesTechnology.http://java.sun.com/javaee/javaserverfaces/.[20]JavaServerPagesTechnology.http://java.sun.com/products/jsp/.[21]PHP:HypertextPreprocessor.http://www.php.net/.[22]RubyonRails.http://rubyonrails.org/.[23]TheOfﬁcialMicrosoftASP.NET2.0Site.http://www.asp.net/.[24]TransactionProcessingPerformanceCouncilBenchmarkW(TPC-W).http://www.tpc.org/tpcw/default.asp.