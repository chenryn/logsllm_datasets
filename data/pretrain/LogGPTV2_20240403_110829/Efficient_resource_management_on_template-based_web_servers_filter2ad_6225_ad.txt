**授权许可使用限制：清华大学。下载时间：2021年3月20日 09:57:38 UTC，来源：IEEE Xplore。**

## 图8. 改进后的Web服务器上动态请求队列长度
(a) 通用池队列  
(b) 长任务池队列

由于长任务请求容易在自己的队列中被其他长任务请求阻塞，因此我们无法像对快速请求那样获得显著的性能提升。减少分配给快速请求的线程数可以改善长任务请求的响应时间，但这会牺牲快速请求的性能，特别是在流量高峰期间。对于实际网站来说，这种权衡是不可接受的。

尽管慢速网页的响应时间仍然较高，但在实际网站中，我们可以采取一些措施来缓解这个问题。例如，为所有字段添加索引以避免查询时扫描整个表，或者定期预计算不随用户变化的昂贵查询（如新书或畅销书）。当然，这样做会改变TPC-W基准测试本身，并偏离使用标准化基准测试的目的。

### 4.2.2 Web服务器吞吐量
图9展示了未修改和已修改Web服务器上各种类型请求的整体吞吐量。显然，我们提出的方案始终优于传统的每请求一个线程方案。图10则详细比较了四种类型的请求（静态请求、所有动态请求、快速动态请求和长任务动态请求）的吞吐量。可以看出，这四种类型的请求吞吐量都有明显提升。

**图9. 未修改和已修改Web服务器上各类请求的吞吐量**
- 交互次数/分钟
- 时间（分钟）
- 未修改
- 已修改

**表4. TPC-W页面在未修改和已修改Web服务器上的完成交互总数**
| 网页名称 | 未修改 | 已修改 |
| --- | --- | --- |
| TPC-Wadminrequest | 748 | 1 |
| TPC-Wadminresponse | 71 | 72 |
| TPC-Wbestsellers | 760 | 29646 |
| TPC-Wbuyconﬁrm | 395 | 547 |
| TPC-Wbuyrequest | 429 | 596 |
| TPC-Wcustomerregistration | 469 | 642 |
| TPC-Wexecutesearch | 730 | 79723 |
| TPC-Whomeinteraction | 1958 | 625608 |
| TPC-Wnewproducts | 740 | 69758 |
| TPC-Worderdisplay | 184 | 206 |
| TPC-Worderinquiry | 219 | 255 |
| TPC-Wproductdetail | 1400 | 218608 |
| TPC-Wsearchrequest | 799 | 410543 |
| TPC-Wshoppingcartinteraction | 1173 | 1536 |

通过改进数据库连接的利用率并实现更好的调度，我们的方案能够增加每种类型Web交互的吞吐量。总体而言，我们的方案比传统每请求一个线程方案提高了31.3%的Web服务器吞吐量。

需要注意的是，某些请求的响应时间和吞吐量结果之间并没有很强的相关性。例如，TPC管理响应页面在修改后的Web服务器中的平均响应时间增加了52.6%，但完成的Web交互总数几乎保持不变。我们认为这种不规则现象主要是由于TPC-W基准测试是一个封闭的排队系统。

### 相关工作
Welsh和Culler[11]提出了一个与我们类似的概念的Web服务器。每个操作（如查询数据库、访问文件和提供静态内容）都由不同的线程池处理。然而，他们的重点在于每个阶段的负载削减，而不是减轻数据库延迟。更重要的是，他们提出改变Web开发人员编写Web应用程序的方式，这严重限制了其方法的采用。我们的主要目标是在保持编程模型不变的情况下实现可比的结果。

Cherkasova[3]提出了一种解决方案，考虑请求的大小和排队时间，克服了最短作业优先调度在Web服务器中的不足。她展示了该调度方法在高负载下可以将HTTP请求的平均响应时间提高三倍以上。我们的方法也在多个队列之间进行了类似的权衡，但没有使用任何优先级队列。

Elnikety等人[5]直接对数据库查询进行调度的工作也与我们的方法密切相关。我们的方法在Web服务器内部实现了类似的功能，而不需要额外的服务器位于Web服务器和数据库服务器之间。因此，他们的工作对实际应用更透明，但需要更多的努力和硬件支持才能设置。

Fowler等人[6]根据需求调整线程池的大小。他们的方法与我们的方法互补。我们专注于使用不同的线程池来降低响应时间和增加Web服务器吞吐量，而他们则调整线程池以寻求不同服务器负载下的最优水平。

Crovella等人[4]提出了最短连接优先调度，以近似最短剩余处理时间（SRPT）调度的效果。Schroeder和Harchol-Balter[9]提供了关于SRPT调度的详细实现研究，并证明了它在过载期间提高Web服务器性能的有效性。然而，SRPT更适用于服务静态内容的Web服务器。相比之下，我们的方法是一种通用方法，特别考虑了现代Web应用程序中生成动态网页的趋势。

其他一些工作采用了智能排队和负载均衡来提高Web服务器性能，尽管目标略有不同。Guitart等人[7]提出了一种基于会话的自适应过载控制机制，优先处理现有SSL会话的请求，而不是优先处理小请求，因为建立SSL会话的开销很高。这项工作可以与我们的排队策略结合使用，如果我们在HTTPS上运行基准测试的话。

Bhoj等人[2]使用排队策略来改善其重要客户的QoS。每个请求的优先级基于用户的分类，而不是请求本身的任何特定属性。Abdelzaher和Bhatti[1]提出了一种依赖于Web内容自适应的Web服务器QoS管理架构。这种自适应架构使服务器能够优雅地应对过载情况。

Ranjan等人[8]提出了优先级调度来缓解分布式拒绝服务攻击。他们不是根据估计的服务时间来调度请求，而是优先处理更可能来自合法客户端的请求。Totok和Karamcheti[10]提出了一种奖励驱动的请求优先级机制。该机制预测未来的Web会话结构，并给予那些会话可能带来更多回报的请求更高的执行优先级。

与这些先前的工作相比，我们的方法是新颖的，因为它将模板渲染与数据生成分离，从而显著降低了响应延迟并提高了执行时间测量的准确性。我们的请求调度方法也有更大的机会得到广泛应用，因为它对程序员编写代码的方式几乎没有影响。正如本文开头所述，分离内容和表示代码已成为Web编程领域的常见做法。类似于Django框架，其他现代Web编程框架如Apache Struts[12]、ASP.NET MVC[13]、JavaServer Faces[19]和Ruby on Rails[22]也都将其程序逻辑与其HTML生成分开。正是这种分离使得本文中的优化成为可能；因此，我们的请求调度方法也可以应用于这些框架。

### 结论
本文提出了一种新的请求调度方法，以高效支持现代基于模板的Web应用程序在多线程Web服务器中的资源管理。在这种方法中，Web请求由多个线程池中的不同线程处理，用于解析头信息、执行数据库查询和渲染模板。通过仅将数据库连接分配给数据生成线程，所提方案确保开放的数据库连接花费较少的空闲时间，从而提高了宝贵的数据库连接资源的利用率。同时，使用不同的线程提高了每种类型请求的服务时间测量精度，从而使我们能够为动态Web请求提供更好的调度。我们在CherryPy（一个代表性的支持模板的多线程Web服务器）中实现了我们的请求调度方法，并使用标准TPC-W基准测试（用Django Web模板实现）对其性能进行了评估。评估结果显示，在高负载下，所提方案将大多数网页的平均响应时间减少了两个数量级，并将整体Web服务器吞吐量提高了31.3%。

### 致谢
感谢匿名评审者提供的宝贵意见和建议。本研究部分得到了NSF资助CNS-0627339和CNS-0627340的支持。

### 参考文献
[略]

---

希望上述优化后的文本更加清晰、连贯和专业。如果有进一步的需求或需要更详细的调整，请告诉我！