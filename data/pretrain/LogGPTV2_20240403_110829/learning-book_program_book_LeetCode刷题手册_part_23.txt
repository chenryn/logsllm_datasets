3. Down -> Right -> Right
Example 2:
Input: m = 7, n = 3
Output: 28
题目大意
一个机器人位于一个mxn网格的左上角（起始点在下图中标记为"Start"）。机器人每次只能向下或
者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish"）。问总共有多少条不同的
路径？
解题思路
·这是一道简单的DP题。输出地图上从左上角走到右下角的走法数。
由于机器人只能向右走和向下走，所以地图的第一行和第一列的走法数都是1，地图中任意一点的
走法数是dp[i][j]=dp[i-1][j]+dp[i][j-1]
代码
package leetcode
func uniquePaths(m int, n int) int {
dp := make([][]int, n)
for i := 0; i  Right -> Down -> Down
2. Down -> Down -> Right -> Right
题目大意
一个机器人位于一个m×n网格的左上角（起始点在下图中标记为"Start"）。机器人每次只能向下或
者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish"）。现在考虑网格中有障碍
物。那么从左上角到右下角将会有多少条不同的路径？
---
## Page 166
解题思路
这一题是第62题的加强版。也是一道考察DP的简单题。
·这一题比第62题增加的条件是地图中会出现障碍物，障碍物的处理方法是dp[i][j]=0。
·需要注意的一种情况是，起点就是障碍物，那么这种情况直接输出0。
代码
package leetcode
func uniquePathswithobstacles(obstacleGrid [][]int) int {
if len(obstacleGrid) == 0 11 obstacleGrid[o][o]== 1 {
return 0
m, n := len(obstacleGrid),len(obstacleGrid[o])
dp := make（[][]int， m)
for i := 0; i = 0; i-- {
if digits[i]+carry > 9 {
digits[i] = 0
carry = 1
}else{
digits[i]  +=  carry
carry = 0
if digits[0]== 0 &&carry == 1{
---
## Page 170
digits = append([]int{1}, digits.. .)
F
return digits
67.AddBinary.
题目
(guuns Aeuiq e osje) wns jjau unjau sguns Aeujq omg uani
The input strings are both non-empty and contains only characters 1 or 0.
Example 1:
Input: a = "11", b = "1"
Output: “100"
Example 2:
TTOT. = q*OTOT=e:nduI
Output: "10101"
题目大意
给你两个二进制字符串，返回它们的和（用二进制表示）。输入为非空字符串且只包含数字1和0。
解题思路
·要求输出2个二进制数的和，结果也用二进制表示。
·简单题。按照二进制的加法规则做加法即可。
代码
package leetcode
import（
"strconv"
"strings"
func addbinary(a string, b string) string {
if len(b)>len(a){
a, b = b, a
---
## Page 171
res := make([]string, len(a)+1)
i,j， k, C := len(a)-1, len(b)-1, 1en(a), 0
for i >= 0 && j >= 0 {
ai， _ = strconv.Atoi(string(a[i]))
bj， _ = strconv.Atoi(string(b[j]))
res[k] = strconv.Itoa((ai + bj + c) % 2)
C =(ai + bj + c) / 2
i --
j--
k=-
for i >= 0 {
= strconv.Atoi(string(a[i]))
res[k] = strconv.Itoa((ai + c) % 2)
C =(ai + c) / 2
i -=
K=
if c >o{
res[k] = strconv.Itoa(c)
return strings.Join(res,
69.Sqrt(x)
题目
Implement int sqrt(int x)
adaui aneau-uou e aq on paaueen si x aaum x jo joo aenbs au ungan pue ando
Since the return type is an integer, the decimal dligits are truncated and only the integer part of
the result is returned.
Example 1:
Input: 4
Output:2
Example 2:
---
## Page 172
Input: 8
Output:2
Explanation: The square root of 8 is 2.82842..-, and since
the decimal part is truncated, 2 is returned.
题目大意
实现intsqrt(intx)函数。计算并返回x的平方根，其中×是非负整数。由于返回类型是整数，结果只
保留整数的部分，小数部分将被舍去。
解题思路
·题目要求求出根号×
·根据题意，根号×的取值范围一定在[0，x]之间，这个区间内的值是递增有序的，有边界的，可
以用下标访问的，满足这三点正好也就满足了二分搜索的3大条件。所以解题思路一，二分搜
索。
·解题思路二，牛顿选代法。求根号x，即求满足xA2-n=0方程的所有解。
---
## Page 173
Zn+1
Cn
如图，一个曲线方程f(x)，在它的f(xn)处画一条切线与x轴相交，交点为x+1
如果继续在它的f(xn+1）处画一条切线与X轴相交，会得到交点xn+2。而在这个
过程中，可以发现交点xn+m会无限逼近方程f（x)=0的解，最终可以得到一个与
理想值无限靠近的解。
而这里讨论的是求平方根，所以曲线方程更简单。比如，我们要求N的平方根。
那么其实就是求方程f(x=x²-N，当f(x)=0时方程的解。
函数f（x)的导函数是：f（x=2x
那么f(x）函数的曲线在（xn，x²-N）点处切线的斜率为：2x
所以切线方程为：f(x）-（x²-N）=2x（x-x），即：f(x）=2xx-x²-N
那么切线方程与x轴的交点xn+1=（xn+N/x)/2
我们可以将得到的交点值的平方与N比较，循环以上过程直到得到满意的值。
代码
package leetcode
//解法一二分
func mySqrt(x int) int {
if x == 0 {
return 0
left, right, res := 1, x, 0
for left > 1)
if mid  x {
r=(r +x/r) / 2
return r
//解法三QuakeIII游戏引i攀中有一种比STL的sqrt快4倍的实现
https://en.wikipedia.org/wi ki/Fast_inverse_square_root
// float Q_rsqrt( float number )
//
long i;
//
float x2,y;
//
const float threehalfs = 1.5F;
x2=number 0.5F;
y= number;
i=*（1ong*）&y；
// evil floating point bit
level hacking
//
i=0x5f3759df-（i>>1);
// what the fuck?
//
y
=（float *）&i；
//
y
=y*（threehalfs-（x2y²y））;
// lst iteration
// //y=y*（threehalfs-（x2*y*y））;
// 2nd iteration， this can
be removed
//
return y;
//}
70.ClimbingStairs
题目
You are climbing a stair case. It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
---
## Page 175
Note: Given n will be a positive integer.
Example 1:
Input: 2
output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:
Input: 3
 :4ndno
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
题目大意
假设你正在爬楼梯。需要n阶你才能到达楼顶。每次你可以爬1或2个台阶。你有多少种不同的方法可
以爬到楼顶呢？注意：给定n是一个正整数
解题思路
·简单的DP，经典的爬楼梯问题。一个楼梯可以由n-1和n-2的楼梯爬上来。
·这一题求解的值就是斐波那契数列。
代码
package leetcode
func climbStairs(n int) int {
dp := make([]int, n+1)
dp[0], dp[1] = 1, 1
for i := 2; i <= n; i++ {
dp[i] = dp[i-1]  + dp[i-2]
return dp[n]
71.SimplifyPath