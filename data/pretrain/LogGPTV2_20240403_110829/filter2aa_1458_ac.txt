3. 
在漏洞利用之前，它检测了特定杀毒软件，并对系统版本进行了检测 
关于该 0day 的其他细节可以参考我们的博客。 
下面来看第二个案例。 
CVE-2021-33739 的故事 
2021 年 5 月 22 日，我们捕获了第二个 Windows 本地提权在野 0day，微软为这个漏洞分配
的编号为 CVE-2021-33739。 
正如我在“编写正确的规则”章节所提到，我们会经常预测最可能出现的漏洞并编写规则。在
2020 年 5 月前后，我们为 dwm 漏洞编写了一些规则，在捕获了一些 dwm 组件的 Nday 漏
洞后，我们在 2021 年 5 月 22 日捕获了一个不熟悉的 dwm 漏洞样本。进一步的分析表明这
个样本中含有一个 1day 漏洞利用和另一个 0day 漏洞。 
最初遇到这个样本时，我们并不知道它是基于一份公开代码编译的。和往常一样，我们在一
个全补丁环境中复现了这个样本。复现结果清楚地表明样本中存在一个 0day，这是一个位
于 dwmcore.dll 模块的 UAF 漏洞。 
随后我们在 Github 上追踪到了相关源码，那是一份 CVE-2021-26868 漏洞的利用代码。在
野样本仅仅只是替换了源码中的 shellcode 部分。此时我们有点疑惑：一个 1day 样本中怎
么可能包含一个 0day？ 
在仔细确认后，我们得出结论：作者在编写 CVE-2021-26868 漏洞的利用代码时无意间引入
了一个新的 0day 漏洞。如果是这样的话，这个 0day 就不能被归类为“在野 0day”。 
这是漏洞修复前我们发给 MSRC 的邮件（部分）： 
这是 MSRC 最终公布的该漏洞的在野利用状态： 
所以这确实是一个很有趣的案例。 
现在让我来讲述更多关于 CVE-2021-33739 的细节。 
这个漏洞的成因是非预期的操作导致dwmcore模块的CInteractionTrackerBindingManager
对象出现引用计数不平衡，从而引发 UAF。 
为了触发这个漏洞，我们只需要创建一个 CInteractionTrackerBindingManagerMarshaler
资 源 和 一 个
CInteractionTrackerMarshaler
资 源 ， 然 后 将 同 一 个
CInteractionTrackerMarshaler 资源绑定到 CInteractionTrackerBindingManagerMarshaler
资源两次，并且不要手动释放这些资源。 
在 正 常 情 况 下 （ 当
resource1_id
和
resource2_id
不 一 样 时 ），
CInteractionTrackerBindingManager 对象会调用 ProcessSetTrackerBindingMode 两次，
以将引用计数增加 2，随后代码会调用 RemoveTrackerBindings 两次以将引用计数减 2，
并且在后面引用计数减为 0 时将 CInteractionTrackerBindingManager 对象正常释放。 
在漏洞场景中，CInteractionTrackerBindingManager 对象的引用计数变化与正常情况下
不同。（dwmcore 内的）代码只会调用 ProcessSetTrackerBindingMode 一次将引用计数
加 1，但代码仍然会调用 RemoveTrackerBindings 两次以将引用计数减 2。在第一次调
用 RemoveTrackerBindings 时，CInteractionTrackerBindingManager 对象的引用计数会
被减至 0，此时 CInteractionTrackerBindingManager 会被 InternalRelease 释放。在第二
次 调 用 RemoveTrackerBindings 时 ， 当 函 数 内 的 代 码 尝 试 去 获 取 已 被 释 放 的
CInteractionTrackerBindingManager 对象的成员数据时，就会造成 UAF。 
接下来我们来看第三个案例。 
一个“已被修补”的 1day 的故事 
2021 年 10 月 16 日，我们捕获了一个新的 Windows 通用日志文件系统（CLFS）1day。
这个样本来自 VirusTotal。 
正如我在“编写正确的规则”章节所提到，我们会经常为最新的漏洞利用手法编写规则。
2021 年 10 月 16 日，我们为 Pipe Attribute 编写的规则命中了一个样本。进一步的测试
表明这个样本利用了一个 1day 漏洞，高楼的影响所有 2021 年 9 月前受支持的 Windows
操作系统版本。 
由于缺乏相关信息，我们无法确定该漏洞对应的 CVE 编号，它可能是以下三个编号中的
一个，也可能不是它们中的任何一个： 
CVE-2021-36963 
CVE-2021-36955 
CVE-2021-38633 
这个 1day 漏洞的根因是 clfs 模块对 Client Context Offset 缺乏一些必要的校验。攻击者
可以借此提供一个非法的 Client Context Offset。 
在野样本借助这个漏洞让一个 blf 文件的第一个 Client Context Offset(0x2B5)指向第二个
Container Context Offset。 
图片来自“DeathNote of Microsoft Windows Kernel”, KeenLab, 2016 
随后借助 CClfsLogFcbPhysical::FlushMetadata 种的一个 1 比特翻转指令将第二个
Container Context Offset 从 0x13A0 改为了 0x1BA0，从而使该 Container Context Offset
指向了一个假的 ClfsContainer 对象。 
在假的 ClfsContainer 对象的帮助下（攻击者已提前构造好该伪造的对象），利用代码劫
持了两个虚函数：CClfsContainer::Release 和 CClfsContainer::Remove，并且基于此在
CClfsBaseFilePersisted::RemoveContainer 构造了一个一次写入两个任意地址的原语。 
一个 ClfsContainer 对象的正常虚函数表如下： 
假的 ClfsContainer 对象伪造的虚函数表如下： 
此外，在野样本还使用“Scoop the Windows 10 pool!”这篇文章里面提到的“Pipe Attribute”
方法构造了一个任意地址读取原语。为了获得一个 Pipe Attribute 对象的地址，它还使
用了另一个公开的方法：通过查询 SystemBigPoolInformation 来泄露一个 Pipe Attribute
对象的地址。 
有了内核任意地址读写原语后，利用代码成功将当前进程的访问令牌替换为 system 进
程的令牌，并以 system 权限弹出了一个 cmd 窗口。 
让我们来看一下微软是如何修补这个漏洞的，微软的开发人员只检查了 Client Context 
Offset 的下限，以确保其不能小于 0x1368。 
修补方案并没有对Client Context Offset的上限做检测。如果我们构造一个值大于0x1368
的 Client Context Offset，并且使其直接指向一个内存中的 Container Context 对象会怎
么样？答案是一个新的 0day 漏洞。 
我们在 2021 年 12 月将该变种报告给了 MSRC，微软在 2022 年 4 月修复了这个漏洞，并且
为其分配了 CVE-2022-24481 这个编号。 
以上就是关于三个案例的分享。最后，让我们给出一些对 Windows 本地提权漏洞检测的建
议，并分享一些对未来 Windows 本地提权在野 0day 的趋势预测。 
写在最后 
关于 Windows 本地提权漏洞的一些检测建议： 
选择自己能力范围内最适合的方法 
仔细研究历史案例总是一件好事 
留意那些新出现的在野漏洞的变种 
对未来 Windows 本地提权漏洞 0day 的趋势预测： 
未来会出现更多 clfs 模块的漏洞 
“Pipe Attribute”这种手法在未来会继续被使用 
未来会有更多在野利用使用以下手法： 
➢ 
Arbitrary address read/write with the help of WNF, POC2021 
➢ 
Arbitrary address read/write with the help of ALPC, Blackhat Asia 2022 
➢ 
Arbitrary address read/write with the help of I/O Ring, TyphoonCon 2022 
引用 
1. https://github.com/synacktiv/Windows-kernel-SegmentHeap-Aligned-Chunk-Confusion 
2. https://securelist.com/puzzlemaker-chrome-zero-day-exploit-chain/102771/ 
3. https://research.nccgroup.com/2021/07/15/cve-2021-31956-exploiting-the-windows-
kernel-ntfs-with-wnf-part-1/ 
4. https://research.nccgroup.com/2021/08/17/cve-2021-31956-exploiting-the-windows-
kernel-ntfs-with-wnf-part-2/ 
5. https://vul.360.net/archives/83 
6. https://securelist.com/zero-day-vulnerability-in-desktop-window-manager-cve-2021-
28310-used-in-the-wild/101898/ 
7. https://www.zerodayinitiative.com/blog/2021/5/3/cve-2021-26900-privilege-escalation-
via-a-use-after-free-vulnerability-in-win32k 
8. https://ti.dbappsecurity.com.cn/blog/index.php/2021/02/10/windows-kernel-zero-day-
exploit-is-used-by-bitter-apt-in-targeted-attack/ 
9. https://github.com/KangD1W2/CVE-2021-26868 
10. https://i.blackhat.com/Asia-22/Friday-Materials/AS-22-Xu-The-Next-Generation-of-
Windows-Exploitation-Attacking-the-Common-Log-File-System.pdf 
11. https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-
primitive-on-windows-11/ 
12. https://github.com/oct0xor/presentations/blob/master/2019-02-
Overview%20of%20the%20latest%20Windows%20OS%20kernel%20exploits%20found
%20in%20the%20wild.pdf 
13. https://research.checkpoint.com/2020/graphology-of-an-exploit-volodya/ 
14. https://research.checkpoint.com/2020/graphology-of-an-exploit-playbit/