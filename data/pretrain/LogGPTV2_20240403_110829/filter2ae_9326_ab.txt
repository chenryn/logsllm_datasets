在blkid读取了部分文件系统并用它们来确定文件系统的类型、标签和UUID之后，fsck_msdos和内核文件系统实现将重新读取相同的数据，实际上，这些重复的读取会传递到存储设备。
当用户空间直接与块设备交互时，Linux内核会缓存块设备页面，但__blkdev_put（）会在引用设备的最后一个open文件关闭时删除与块设备关联的所有缓存数据。
物理攻击者可以通过附加虚假存储设备来利用此功能，该存储设备返回来自同一位置读取的多个不同的数据。
这允许我们将带有长标签字符串的romfs标头呈现给blkid，同时向fsck_msdos和内核文件系统实现完全正常的vfat文件系统。
由于Linux内置支持设备端USB，因此在实践中实现起来相对简单。 Andrzej Pietrasiewicz的演讲[“制作你自己的USB
gadget”](https://events.static.linuxfound.org/sites/events/files/slides/LinuxConNA-Make-your-own-USB-gadget-Andrzej.Pietrasiewicz.pdf)是对该主题的有用介绍。
基本上，内核附带了设备端USB大容量存储，HID设备，以太网适配器等的实现;
使用相对简单的基于伪文件系统的配置界面，就可以配置一个复合小工具，为连接的设备提供一个或多个这些功能（可能有多个实例）。
你需要的硬件是运行Linux并支持设备端USB的系统; 为了测试这次攻击，使用了Raspberry Pi Zero W.
f_mass_storage gadget的功能旨在使用普通文件作为后备存储;
为了能够以交互方式响应来自Android手机的请求，使用FUSE文件系统作为后备存储，用direct_io选项/FOPEN_DIRECT_IO标志来确保我们自己的内核不会添加不需要的缓存。
此时，已经能实施可窃取的攻击了，例如存储在外部存储器上的照片。
幸运的是，对于攻击者，在安装U盘后立即启动com.android.externalstorage/.MountReceiver，这是一个SELinux域允许访问USB设备的进程。
因此，在通过/data挂载恶意FAT分区后（使用标签字符串'UUID =“../../
data'），关闭具有适当SELinux上下文和组成员资格的子进程，以允许访问USB设备 然后，这个子进程从/data/dalvik-cache/加载字节码，允许我们控制com.android.externalstorage，它具有泄露外部存储内容的必要权限。
但是，对于不仅要访问照片的攻击者，还要访问存储在设备上的聊天日志或身份验证凭据等攻击者，这种访问级别根本就不够。
# 处理SELinux：触发两次bug
此时的主要限制因素是，即使可以挂载/data，也不允许在设备上运行的许多高权限代码访问已挂载的文件系统。 但是，一个高权限服务确实可以访问它: vold。
vold实际上支持两种类型的U盘，PublicVolume和PrivateVolume。 到目前为止，这篇博文主要关注PublicVolume;
从这里开始，PrivateVolume变得很重要。PrivateVolume是必须使用GUID分区表格式化的U盘。 它必须包含类型为UUID
kGptAndroidExpand（193D1EA4-B3CA-11E4-B075-10604B889DCF）的分区，其中包含dm-crypt加密的ext4（或f2fs）文件系统。
相应的密钥存储在/data/misc/vold/expand_{partGuid}.key中，其中{partGuid}是GPT表中的分区GUID，作为规范化的小写十六进制字符串。
作为攻击者，通常不应该用这种方式安装ext4文件系统，因为手机一般不设置任何此类密钥;
即使有这样的密钥，你仍然需要知道正确的分区GUID是什么以及密钥是什么。
但是，我们可以在/data/misc上安装一个vfat文件系统，并将我们的密钥放在那里，用于我们自己的GUID。
然后，当第一个恶意USB大容量存储设备仍然连接时，我们可以使用vold将从第一个USB大容量存储设备读取的密钥连接第二个作为PrivateVolume安装的设备。（从技术上讲，最后一句中的排序并不完全正确
- 实际上，该漏洞利用同时将大容量存储设备作为单个复合设备提供，但会停止从第二个大容量存储设备的第一次读取以创建所需的排序。）
由于在PrivateVolume实例中使用ext4，我们可以控制文件系统上的DAC所有权和权限;
并感谢PrivateVolume集成到系统中的方式，让我们甚至可以控制该文件系统上的SELinux标签。
总之，此时，我们可以在/data上安装受控文件系统，具有任意文件权限和任意SELinux上下文。
因为我们控制了文件权限和SELinux上下文，所以可以允许任何进程访问文件系统上的文件 - 包括使用PROT_EXEC映射它们。
# 注入zygote进程
zygote进程的功能相对来说很强大，虽然它未被列为TCB的一部分。根据设计，它以UID
0运行，可以任意改变其UID，并可以执行动态SELinux转换到system_server和普通应用程序的SELinux上下文。换句话说，zygote可以访问设备上几乎所有的用户数据。
当64位zygote在系统boot时启动时，它会从`/data/dalvik-cache/arm64/system@framework@boot*.{art,oat,vdex}`加载代码。
通常，oat文件（包含将使用`dlopen()`加载的ELF库）和vdex文件是不可变/系统分区上文件的符号链接; 只有art文件实际存储在/data上。  
但我们可以将`system@PI:EMAIL`和`system@PI:EMAIL`符号链接转换为/system（在不知道设备上正在运行哪个Android版本的情况下绕过一些一致性检查）并同时将我们自己的恶意ELF库放在`system@PI:EMAIL`里（使用合法的oat文件所具有的SELinux上下文）。  
然后，通过在我们的ELF库中放置一个带`__attribute
__((constructor))`的函数，我们可以在启动时调用dlopen()后立即在zygote中执行代码。
这里没有讲到的一步是，当执行攻击时，zygote已经在运行了，而且这种攻击只有在zygote启动时才有效。
# 崩溃系统
这部分有点不愉快。
当关键系统组件（特别是zygote或system_server）崩溃时（你可以使用kill在eng版本上模拟），Android会尝试重新启动大部分用户空间进程（包括zygote）尝试从崩溃中恢复。
发生这种情况时，屏幕会先显示一点启动动画，然后锁定屏幕，并提示“解锁所有功能和数据”，通常只在启动后显示。
但是，此时仍然存在用于访问用户数据的密钥材料，因为你可以通过在设备上运行“ls/sdcard”来验证ADB是否已打开。
这意味着如果我们能用某种方式使system_server崩溃，我们可以在以下用户空间重启时将代码注入到zygote中，并且访问设备上的用户数据。
当然，在/data上挂载我们自己的文件系统是非常粗糙的，会导致各种崩溃，但令人惊讶的是，系统不会立即崩溃 -虽然部分UI变得无法使用，但大多数地方都有一些错误处理可以防止系统崩溃，从而导致重新启动。  
经过一些实验，发现Android的跟踪带宽利用代码有一个安全检查：如果网络跟踪利用代码无法写入磁盘，并且自上次成功写入以来已观察到>=2MiB（mPersistThresholdBytes）的网络流量，
则抛出致命异常。这意味着如果我们可以创建某种类型的网络连接到设备然后发送>=
2MiB值的ping包，然后通过等待定期回写或更改网络接口状态来触发统计信息回写，设备将重新启动。
要创建网络连接，有两个选项：
  * 连接到wifi网络。 在Android 9之前，即使设备被锁定，也可以通过从屏幕顶部向下拖动，点击wifi符号下方的下拉菜单，然后连接到新的wifi网络。（这对受WPA保护的网络不起作用，但攻击者也可以把自己的wifi网络打开。）许多设备也只能自动连接到具有某些名称的网络。
  * 连接到以太网网络。 Android支持USB以太网适配器，并将自动连接到以太网网络。
为了测试漏洞利用，我们使用手动创建wifi网络连接；为了更可靠和用户友好的漏洞利用，你也许希望使用以太网连接。
此时，我们可以在zygote上下文中运行任意本机代码并访问用户数据;
但是我们还不能读出原始磁盘加密密钥，直接访问底层块设备或进行RAM转储（尽管由于系统崩溃，在RAM转储中的一半数据可能已经消失了）。
但如果我们希望能够做到这些，将不得不进行提权。
# 从zygote到vold
即使zygote不应该是TCB的一部分，它也可以访问初始用户命名空间中的CAP_SYS_ADMIN功能，并且SELinux策略允许使用此功能。
zygote将此功能用于mount()系统调用，并安装seccomp过滤器而不设置NO_NEW_PRIVS标志。
有多种方法可以利用CAP_SYS_ADMIN; 特别是在Pixel 2上，以下方法似乎是可行的：
  * 你可以在没有NO_NEW_PRIVS的情况下安装seccomp过滤器，然后执行具有权限转换的execve()（SELinux exec转换，setuid/setgid执行或使用允许的文件功能集执行）.然后，seccomp过滤器可以强制系统调用失败，错误编号为0，例如， 在open()情况下意味着进程将认为系统调用成功并分配了文件描述符0.此攻击可以生效，但有点乱。
  * 你可以指示内核使用你控制的文件作为高优先级交换设备，然后创建内存压力。一旦内核将堆栈或堆页从一个足够特权的进程写入交换文件，就可以编辑换出的内存，然后让进程加载它。  
这种技术的缺点是它非常难以预测，它涉及内存压力（这可能会导致系统杀死你想要保留的进程，并可能破坏RAM中的许多取证工件），并且需要某种方法来确定哪些换出的页面属于哪个进程并用于什么。
这需要内核支持交换。
  * 你可以使用pivot_root()替换当前mount命名空间或新创建的mount命名空间的根目录，从而绕过本应为mount()执行的SELinux检查。 如果你只想影响之后提权的子进程，则为新的mount命名空间执行此操作非常有用。 如果根文件系统是rootfs文件系统，则将不起作用。 这是我们将使用的技术。
在最近的Android版本中，用于创建崩溃进程转储的机制已更改：  
进程执行`/system/bin/crash_dump64`和`/system/bin/crash_dump32`中的一个帮助程序，而不是要求特权守护程序创建转储，它们具有SELinux标签`u:object_r:crash_dump_exec:s0`。
目前，当任何SELinux域执行具有此类标签的文件时，会触发到crash_dump域的自动域转换（这自动意味着在辅助向量中设置AT_SECURE标志，指示新进程的链接器要小心环境变量，如LD_PRELOAD）：  