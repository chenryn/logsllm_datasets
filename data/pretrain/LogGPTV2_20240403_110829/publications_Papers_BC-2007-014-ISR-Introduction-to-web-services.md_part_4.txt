3. Adding in Web Services Annotations: Java
interface or abstract class. Since tools such as Axis
6 includes annotations so that the compiler
(Apache Axis Documentation, 2006) or Radiant
will know that the program code is a Web
(2005) can convert one form to the other, it is a
service. A partial list of available annota-
matter of preference where to start. In this chapter
tions is as follows:
we will give a guide to developing Web services
starting by designing the Java classes.
• javax.jws.WebService
We will do this by following fundamental
• javax.jws.WebMethod
software engineering techniques to create the
Web services. Start by creating a UML Class • javax.jws.WebParam
Diagram to define the requirements of the system. • javax.jws.WebResult
To illustrate the ideas in this section, we will use • javax.jws.HandlerChain
an example from the Semantic Web Services • javax.jws.soap.SOAPBinding
Challenge 2006 (Semantic Web Services Chal-
lenge, 2006). The Challenge scenario is to create Figure 9 illustrates an example of a Java ser-
a process to create a purchase order. The first step vice which has been annotated. Note that in the
in this process is to confirm that a given business example the @WebService and @WebMethod
is a customer of the fictitious “Moon Company.” are the annotations. The complier will recognize
Our example implements this service. Below are these tags and create the WSDL document.
the eight steps to create this service:
9
Introduction to Web Services
Figure 8. UML class diagram
Figure 9. Annotated Java example
import javax.jws.WebService;
import javax.soap.SOAPinding;
@WebService
public class SearchCustomer
{
@WebMethod
public SearchCustomerResponce search (SearchCustomerRequest)
//call to backend to verify Customer
if(! verifyCustomer(SearchCustomerRequest))
{
return err;
}
EarchCustomerResponce SCR = new SearchCustomerResponce;
SCR. setcustomerID(CustomerInfo.getcustomerID(SearchCustomerRequest)
SCR. setroleCode(CustomerInfor. getcustomerRole(SearchCustomerRequest)
...
...
...
return SCR;
}//WebMethod
}//SearchCustomer
0
Introduction to Web Services
Refer to the following link to see more in- and a SOAP engine, like Tomcat and Axis2
formation on annotations (https://mustang.dev. respectively. If using Axis2, deploying a
java.net/). service is as simple as dropping the .aar
files, which are .jar files with a different
4. Generate WSDL: The annotations from extension, into the \WEB-INF\services di-
the previous step indicate to the Annotation rectory. Directions on deployment in Axis2
Processing Tool or the Java compiler that a can be found on the Web at http://ws.apache.
WSDL is to be generated at compile-time. org/axis2 .
This description of the service is used in 7. Test Service: A simple Java program can be
two ways. One, the description acts as an sufficient to test a service. In others it may
advertisement when it is published on the require a more complex client. Either way
Web. The information gleaned from the the fundamentals for writing a client are
WSDL file is published in UDDI registries the End Point Reference, which is a URL
so that queries can be executed to discover to the service, a call setting the target, and
the service that is needed. Second, it pro- setting the transport information. All of this
vides all the information needed to invoke information is put into a call object that exists
this service remotely. in the org.apace.soap package. The setup of
5. Implement Methods: At this point in devel- this object is in Figure 10.
opment, we want to create an implementation
class that extends our abstract class. The This code creates a call to a service named
difference that the developer must deal with “CMRService” with an operation name “search”.
is writing the code to the proper conventions. This operation takes a SearchCustomerType as in-
Any class that is created must have getters put, thus you see an instance of this class is created
and setters for all member variables. These and added as a parameter to the call object.
are used during invocation by the SOAP
Response resp = call.invoke(url, “”);
engine to serialize and deserialize the data
that is in the SOAP messages into Java
This calls the invoke method on the call object
objects and back to SOAP.
to execute the operation in the service. The results
6. Deploy Service: Deploying a service is ac-
of the service are put into the Response object and
complished using a Web application server can be accessed from there.
Figure 10. Partial listing of Web service client
Call call = new Call();
call.setSOAPMappingRegistry(smr); call.setTargetObjectURI(“http://..6./moon/ser-
vices/CRMService”);
call.setMethodName(“search”);
call.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);
Vector params = new Vector();
SearchCustomerType sct = new SearchCustomerType();
sct.setSearchString(name);
params.addElement(new Parameter(“request”, SearchCustomerType.class, sct, null));
call.setParams(params);

Introduction to Web Services
8. Publish Service: Publishing a service re- executed, and composed into processes to achieve
quires the use of UDDI registries. Setting up very complicated tasks.
a registry varies based on which registry is For some years now, Web services define a set
chosen. For our example, we used the jUDDI of standards (such as WSDL, SOAP, and UDDI)
to allow the interoperation and interoperability
registry on a Tomcat server. The action of
of services on the Internet. Recently, security and
publishing a service is similar to advertising
transactional stability have become priority areas
a business. After deployment and testing,
of research to make Web services more accepted
the service is open to the world and ready to
in the world of industry. The work done has lead
accept request, but until it is published, it is
to the development of a set of new specifications
unlikely that anyone will know about your
(such as WS-Security, WS-Policy, WS-Trust, WS-
service. Tools that simplify this process are
Privacy, WS-Transaction, etc.) that describe how
Radiant and Lumina (Li, 2005), both from
Web services can establish secure communica-
the METEOR-S tool suite.
tions, define policies services’ interactions, and
define rules of trust between services.
conclusion
rEfErEncEs
The service oriented architecture (SOA) is cur-
rently a “hot” topic. It is an evolution of the
Arjuna Technologies Limited (2005). Arjuna
distributed systems technology of the 1990s,
transaction service suite. Retrieved October 18,
such as DCOM, CORBA, and Java RMI. This
2006, from http://www.arjuna.com/products/ar-
type of architecture requires the existence of
junats/index.html
main components and concepts such as services,
service descriptions, service security parameters Axis Development Team (2006) . Webservices
and constraints, advertising and discovery, and – Axis. Retrieved October 18, 2006, from http://
service contracts in order to implement distributed
ws.apache.org/axis/
systems. In contrast to the Event-Driven Archi-
tecture, in which the services are independent, Bellwood, T. (2002) UDDI Version 2.04 Api
the SOA-based approach requires services to be specification. Retrieved February 20, 2007 from
loosely coupled. http://uddi.org/pubs/ProgrammersAPI-V2.04-
SOA are often associated with Web services Published-20020719.htm
and sometimes, SOA are even confused with
Birrell, A.D. & Nelson, B.J. (1984). Implement-
Web services, but, SOA does not specifically
ing remote procedure calls. ACM Transactions
mean Web services. Instead, Web services can
on Computer Systems, 2(1), 39-54.
be seen as a specialized SOA implementation that
embodies the core aspects of a service-oriented
Booth, D., Hass, H., McCabe, F., Newcomer, E.,
approach to architecture. Web service technology
Champion, M., Ferris, C., & Orchard, D. (2004)
has come a long way toward achieving the goal of
Web services architecture, W3C Working Group
the SOA. With Web services, developers do not
Note. Retrieved October 18, 2006, from http://
need to know how a remote program works, only
www.w3.org/TR/ws-arch/
the input that it requires, the output it provides
and how to invoke it for execution. Web services Brewer, D., LSDIS Lab, University of Georgia
provide standards and specifications that create
(2005). Radiant. Retrieved October 18, 2006,
an environment where services can be designed,
from http://lsdis.cs.uga.edu/projects/meteor-s/
downloads/index.php?page=1

Introduction to Web Services
Brown, N., & Kindel. C. (1996). Distributed Graham, S., Simenov, S., Davis, D., Daniels,
component object model protocol, DCOM/1.0. G., Brittenham, P., Nakamura, Y., Fremantle,
Redmond, WA: Microsoft Corporation. P., Koeing, D., & Zentner, C. (2002). Building
Web services with Java: Making sense of XML,
Cabrera, L. F., Copeland, G., Feingold, M.,
SOAP, WSDL, and UDDI, SAMS. Indianapolis,
Freund, T., Johnson, J., & Joyce, S., et al. (2005)
Indiana.
Web services atomic transaction (WS-Atomic
Transaction). retrieved February 20, 2007 from IBM, BEA Systems, Microsoft, SAP AG, Sonic
http://www128.ibm.com/developerworks/library Software, VeriSign (2006).
specification/ws-tx/#atom
Web service policy attachment. Retrieved October
Cabrera, L. F., Copeland, G., Feingold, M., Freund 18, 2006, from http://www-128.ibm.com/devel-
R. W., Freund, T., & Joyce, S., et al. (2005). Web operworks/library/specification/ws-polatt/index.
services business activity framework (WS-Busi- html
nessActivity). Retrieved February 20, 2006 from
IBM, BEA Systems, Microsoft, Layer 7 Tech-
http://schemas.xmlsoap.org/ws/2004/10/wsba/
nologies, Oblix, VeriSign, Actional, Computer
Cabrera, L. F., Copeland, G., Feingold, M., Freund, Associates, OpenNetwork Technologies, Ping
T., Freund, R. W., Johnson, J. (2005) Web service Identity, Reactivity, RSA Security (2005). Web
coordination (WS-Coordination). Retrieved services trust language. Retrieved October 18,
February 20, 2006 from http://specs.xmlsoap. 2006, from http://www-128.ibm.com/developer-
org/ws/2004/10/wscoor/wscoor.pdf works/library/specification/ws-trust/
Cardoso, J., Curbera, F., & Sheth, A. (2004, May IBM, BEA Systems, Microsoft, Computer Associ-
17-22). Tutorial: Service oriented architectures ates, Actional, VeriSign, Layer 7 Technologies,
and Semantic Web processes. In Proceedings Oblix, OpenNetwork Technologies, Ping Identity,
of the Thirteenth International World Wide Web Reactivity, RSA Security (2005). Web service
Conference (WWW2004), New York. secure conversation language specification. Re-
trieved October 18, 2006 from http://www-128.
Channabasavaiah, K., Holley, K., & Tuggle, E.
ibm.com/developerworks/library/specification/
(2003) Migrating to a service-oriented architec-
ws-secon/
ture, Part 1. Retrieved October 18, 2006, from
http://www128.ibm.com/developerworks/Web- Li, K. (2005). Lumina: Using WSDL-S for Web
services/library/ws-migratesoa/ service discovery. Masters Thesis, University of
Georgia.
Christensen, E., Curbera, F., Meredith, G., Wee-
rawarana, S. (2001) W3C Web Services Descrip- Microsoft, BEA & IBM. (2005). Web Services
tion Language (WSDL). Retrieved October 18, Atomic Transaction
2006, from http://www.w3.org/TR/wsdl
Microsoft, BEA & IBM. (2005). Web Services
Curbera, F., Nagy, W., Weerawarana, S. (2001). Business Activity
Web services: Why and how. Paper presented at
Microsoft, BEA & IBM. (2005). Web Services
the Workshop on Object-Oriented Web Services
Coordination.
- OOPSLA 2001, Tampa, Florida.
Mikalsen, T., Rouvellou, I., & Tai. S. (2003).
Dwoning, T. (1998). Java RMI. Boston: IDG
Advanced enterprise middleware: Transaction
Books Worldwide.

Introduction to Web Services
processing. Retrieved October 18, 2006, from the International Conference on Service Oriented
http://www.research.ibm.com/AEM/txa.html Computing.
Mikalsen, T., Tai, S., & Rouvellou, I. (2002). UDDI (2002). Universal Description, Discovery,
Transactional attitudes. Reliable composition and Integration.
of autonomous Web services. Paper presented
Vasquez, I., Miller, J., Verma, A., & Sheth, A.
at the International Conference on Dependable
(2005). OpenWS-Transaction: Enabling reliable
Systems and Networks.
Web service transactions. Paper presented at the
Object Management Group. (1995, July). CORBA: International Conference on Service Oriented
The Common Object Request: Architecture and Computing.
Specification, Release 2.0. Retrieved February
Verma, K., Akkiraju, R., Goodwin, R. (2005).
20, 2007 from http://www.omg.org/cgi-bin/apps/
Semantic matching of Web service policies. Paper
doc?formal/99-10-07.pdf
presented at the Second International Workshop
Orfali, R., & Herkey, D. (1998). Client/Server on Semantic and Dynamic Web Processes (SDWP
programming with Java and CORBA (2nd ed.). 2005), Part of the 3rd International Conference
Hoboken NJ: John Wiley & Sons. on Web Services (ICWS’05).
Semantic Web Services Challenge (2006). Main Waldo, J. (1999, October). The Jini architecture
page. Retrieved October 18, 2006, from http:// for network-centric computing. Communications
www.sws-challenge.org/ of the ACM, 42(10), 76-82.
SOAP (2003). Simple object access protocol 1.2. Weeratunge, D., Weerawarana, S., & Gunarathne,
Retrieved October 18, 2006, from http://www. T. (2004) Kandula - Apache Kandula. Retrieved
w3.org/TR/soap/ October 18, 2006, from http://ws.apache.org/
kandula/
Trainotti, M., Pistore, M., Calabrese, G., Zacco,
G., Lucchese, G., Barbon F., Bertoli, P., Traverso XML (2005). Extensible Markup Language
P., & ASTRO. (2005). Supporting composition (XML) 1.0 (3rd ed.). W3C Recommendation 04
and execution of Web services. Paper presented at February 2004. Retrieved October 18, 2006, from
http://www.w3.org/TR/REC-xml/
