## Page 55
36
Linux程序设计
面不起作用
动手试试：case语句示例三：执行多条语句
为了让这个脚本程序具备重用性，我们需要在匹配上默认模版的时候给出另外一个退出值。
此外，我们还增加使用了一个字符串集合：如下所示：
#'/bin.'sh
echo *is it morning? Please answer yes or no
read tineofday
yes 丨y | Yes |YES }
echo *Good Morning*
ccho *Up bright and early this morning*
[nN]*)
: :
echo Good Afternoon’
*)
echo *Sorry. answer not recognized*
echo
*Flease answer yes or no
exit 1
esac
exit 0
操作注释：
为了向大家演示模版匹配的其他方法，我们改变了“no”部分的匹配办法。我们还演示了
如何在case语句里为每种模版执行多条语句。请大家注意，我们很小心地把最明确的匹配放在
最开始，把最-一般化的匹配放在最后。这样做很重要，因为case将执行它找到的第一个匹配而
不是最佳匹配。如果我们把“*）”放在头一个位置，那不管用户输人的是什么，都会匹配上这
个模版。
请注意：esac前面的双分号“：”是可以省略的。在C语言程序设计实践中，少一个
break语句都算是不良的程序设计做法：但这里和C语言程序设计不网：如果跌认模版是
最后一个匹配情况，默认最后一个双分号“：”是没有问题的，因为后面没有其他的匹
配情况了
为了让case的匹配功能更强大，我们可以使用下面这样的模版：
[yY] 1(Yy][Ee][Ss]}
这就限定了允许出现的字母，它既允许多种多样的答案又比“*”通配符提供了更多的
控制。
8.命令表
有时候，我们需要把几条命令按顺序接合成一个序列。比如说在执行某个语句之前需要满
足好几个不同的条件，就像下面这样：
加入jaVa编程群：524621833
---
## Page 56
第2章shell程序设计
37
if [-f this_file ]; then
if  -f that_file ]:then
af[-f the_other_file ];then
echo *All files present, and correct
fi
fi
fi
或者一系列条件中至少需要其中的-一个为真，像下面这样：
if [-f this_tale ]; then
elifI -f that_file ]; tben
foo=*True
elif-f the_other_file ]; then
foo=*True
e1se
foo=′True”
fooc“False*
if[Sfoo*sTrue*]: then
f
f i
echo *one of the files exists
虽然这些情况完全可以通过复合方式的if语句来实现，但正如读者所看到的，写出来的程序
可够乱的。shell为这类命令表构造特地准备了两种结构，它们分别是AND命令表和OR命令表。
两者通常会结合使用，但我们先分别看看它们语法。
（1）AND命令表
AND命令表结构允许我们按这样的方式执行一连串命令：只有在前面所有的命令都执行成
功的情况下才执行后一条命令。它的语法是：
statement1 && statement2 && statement3 &&.
从左开始顺序执行每条命令，如果它返回的是true，它右边的下一条命令才能够被执行。如
此循环直到有一条命令返回false，或者命令表中的全部命令都执行完毕。“&&”的作用是检查
前一条命令的返回条件。
每条语句的执行都是彼此独立的，这就允许我们把许多不同的命令混合在一个命令表里，
就像下面脚本程序中那样。做为一个整体，如果AND命令表中的所有命令都执行成功，就算它
执行成功；否则它就是失败的。
动手试试：AND命令表
在下面的脚本程序里，我们用touch命令（检查文件是否存在，如果不存在就建立它）建立
文件file_one并删除了file_two文件。然后，用AND命令表检查各个文件是否存在并通过echo命
令给出相应的指示。
#/bin/sh
touch file,one
rm -f file_two
if ( -f file_one 1 &k echo *hello* && { -f file_two 1 bk echo * there°
then
else
echo *in if*
fi
echo *in else*
exit 0
加入jaVa编程群：524621833
---
## Page 57
38
Linux程序设计
执行这个脚本程序，你会看到如下所示的结果：
hc1lo
in lse
操作注释：
行“[-ffile_one]”语句，这条语句肯定会执行成功，因为我们已经确保该文件是存在的了、在
前一条命令成功的前提下，echo命令得以执行；它也执行成功了（echo命令永远返回true）。再
往下执行第三个测试“[-ffile_two]：这条命令失败了，因为该文件并不存在：因为这条命令失
败了，所以最后一条echo语句没有被执行。因为该命令表中的某条命令失败了，所以“&&”命
令表的结果是false，if语句将执行它的else子句：
(2)OR命令表
OR命令表结构允许我们持续执行一系列命令直到有一条成功为止，其后的命令将不再被执
行。它的语法是：
statcmcntl 11statenent211statement3 11.
从左开始顺序执行每条命令。如果它返回的是false，它右边的下一条命令才能够被执行。
如此循环直到有一条命令返回true，或者命令表中的全部命令都执行完毕。
“"1命令表和“&&”命令表很相似，只是继续执行下一条命令的条件现在变为其前语句的
执行结果必须是失败的（返回false）
动手试试：OR命令表
沿用上一个例了，但要修改下面程序清单里阴影部分的语句：
#: /bin/sh
rm -1 file_one
it [-f file_one ] 1i echo *hello* || echo  there*
then
e1se
echo *in f*
fi
echo *in else’
exit 0
这个脚本程序的输出是；
he1 _c
it. f
操作注释：
头两行代码为整个脚本程序设置好相应的文件。第一个命令“[-ffile_one]”失败了，因为
这个文件是不存在的。接下来执行echo语句。它返回了true，因此“I1"”命令表中的后续命令将
不会被执行到。因为“1”命令表中有一条命令（echo）返回的是true，所以if语句将执行其then
加入jaVa编程群：524621833
---
## Page 58
第2章shell程序设计
39
子句。
以上这两种结构的返回结果是其中执行的最后一条语句的执行结果。
这两个命令表类型的结构与C语言中对多个条件进行测试的执行情况是很相似的。只需执行
最少的语句就可以确定其返问结果，而对返回结构没有影响的语句是不会被执行到的。这种情
况通常被称为“短路径求值”。
这两种结构组合在一起的结果更具逻辑眼光，请看：
[-f file_one] k& command for true ( 1 command for faise
在下面的语句里，如果测试成功就会执行前一个命令：否则就会执行后一个命令。请尝试
使用更不寻常的命令表来完成你自己的工作吧。
9.语句块
如果你想在某些只允许使用单个语句的地方（比如AND或OR命令表里）使用多条语句，可
以把它们括在花括号（（！）里来构造出一个语句块，比如说，在本章后面给出的应用程序里，
读者会看到如下所示的代码：
get_confirn &&{
grep -v*Scdcatnum* Stracks_file >Stenp_file
cat Stenp_file >Stracks_file
eeho
ad3_record_tracks
2.4.4函数
在shell里允许定义函数，如果读者需要编写比较大型的脚本程序，就会想到利用它们来构
造自己的代码。
微为另外一种办法，你当然也可以把一个大型的脚本程序分成许多小一点的脚本程
序，让每个小脚本完成一项小任务。但这样做有几个缺点：在一个脚本程序里执行另外
一个脚本程序要比执行一个函数慢得多；执行结果的回传也更困难：并且可能造成小脚
本过多的现象。你应该让自己脚本程序的最小构造具备有意义的功能，值得单独保存；
在把一个大型脚本程序拆分为一组小脚本的时候应该有这样一个尺度。
如果你对使用shell来编写大型的程序没有把报，请记住：自由软件基金会FSF的
autoconf程序和几种UNIX软件包的安装程序就是shell脚本程序。在一台UNIX系统上，
你永远都可以保证有一个基本的shell。事实上，如果没有/bin/sh，大部分UNIX系统根
本就不能开机引导，更不用说让用户登录上机了，所以你应该确信自己的脚本程序在绝
大部分的UNIX和Linux系统上都会遇上一个能够解释并运行它的shell。
在shell里定义一个函数的办法很简单，写出它的名字，然后是一对空括号“（）”，再把有关
的语句放在一对花括号“（1”里，如下所示：
funct ion_nane () {
statements
加入jaVa编程群：524621833
---
## Page 59
40
Linux程序设计
动手试试：一个简单的函数
我们从-个确实很简单的函数开始进行学习：
#1/b1n/sh
foc((
Bu11naxa sT 0og uooum,g.ca
echo *seript statting*
pepua ad2oy, oyoa
foo
exit 0
运行这个脚本程序会给出下面的输出结果：
Functin foo 1s executing
script starting
ipt :ndino
操作注释：
这个脚本程序还是从自已的最顶部开始执行，这一点与其他脚本程序没有什么分别：但当
它遇见“foo（）（”结构的时候，会知道那是对一个名为foo的函数的定义。它会记住foo代表著
个函数并从找到“!”字符之后的位置继续执行。当shell遇到在程序行上单独出现的“foo”并准
备执行它的时候、就知道应该去执行刚才定义的函数了，当这个函数执行完毕以后，执行过程
会返回到调用foo函数的那条语句的后面继续前进。
在调用一个函数之前水远要先对它进行定义，这有点像Pacsal语言里函数必须先于调用而被
定义的概念，只是shell里不允许出现任何形式的向前引用。这并不会成为什么问题，因为切
脚本程序都是从顶部开始执行的，所以只要把所有函数定义都放在任何一个两数的调用之前就
永远都能保证所有的函数是在其调用之前被定义的了。
在调用-个函数的时候，脚本程序的位置参数“S*”、“$@”、“$#”、“S1"、“$2”等会被答
换为函数的参数，这也是读取传递给函数的参数的办法，函数执行完毕之后，有关参数会被恢
复为它们原来的值。
有些比较陈旧的shell在品数执行之后无法恢复位置参数的值。如果你想让自已的脚
本程序具备可移植性，就最好不依赖这一行为。
我们可以通过return命令让函数返回数字值：让函数返回字符串值的常见办法是让函数把字
符中保存在一个变量里，而该变量应该能够在函数结束之后被另外使用。此外，我们还可以像
下面这样做：用echo命令发出一个字符串并捕获其结果，如下所示：
{oo[1( ecbo JAY: }
tetul: = *$(foo)*
请注意，在shell函数里我们可以通过local关键字声明局部变量，局部变鼠将局限在函数的
加入jaVa编程群：524621833
---
## Page 60
第2章shell程序设计
41
作用范围内。函数可以对全局作用范围中的其他shell变量进行存取。如果某个局部变量和某个
全局变量的名字相同，前者就会覆盖后者，但也仅限于函数的作用范围以内。比如说，我们可
以对上面的脚本程序进行修改，再看看执行中会发生什么样的情况：
#! bin/sh
sanple_text=′global variable*
foo(){
local sanple_texts'local variabie*
echo $eample,text
echo
'script starting*
foo
et ho *script ended*
echo $sample_text
exit 0
如果在函数里没有使用return命令指定一个返回值，它返回的就是执行最后一条命令的退出
状态码
在下面的脚本程序my_name里，我们将看到函数的参数是如何被传递的以及如何让函数返
同一个urue或falsc结果。
动手试试：从函数里返回一个值
1)在shell标头之后，我们定义了一个函数yes_or_no：
#1/bin/sh
   s、
while true
do
echo -n *Enter yes or no:
case*$x*in
read x
Y1yes）return 0;:
return 1;;