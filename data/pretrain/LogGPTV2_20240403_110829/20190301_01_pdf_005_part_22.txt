### 2.4.8.5 NEW_TIME

The `NEW_TIME` function converts a date and time from one time zone to another. It returns a value of type `DATE`. The syntax is as follows:

```sql
NEW_TIME(DATE, time_zone1, time_zone2)
```

- `time_zone1` and `time_zone2` must be string values from the Time Zone column in the following table.

#### Table 2-27: Time Zones

| Time Zone | Offset from UTC | Description                       |
|-----------|-----------------|-----------------------------------|
| AST       | UTC+4           | Atlantic Standard Time            |
| ADT       | UTC+3           | Atlantic Daylight Time            |
| BST       | UTC+11          | Bering Standard Time              |
| BDT       | UTC+10          | Bering Daylight Time              |
| CST       | UTC+6           | Central Standard Time             |
| CDT       | UTC+5           | Central Daylight Time             |
| EST       | UTC+5           | Eastern Standard Time             |
| EDT       | UTC+4           | Eastern Daylight Time             |
| GMT       | UTC             | Greenwich Mean Time               |
| HST       | UTC+10          | Alaska-Hawaii Standard Time       |
| HDT       | UTC+9           | Alaska-Hawaii Daylight Time       |
| MST       | UTC+7           | Mountain Standard Time            |
| MDT       | UTC+6           | Mountain Daylight Time            |
| NST       | UTC+3:30        | Newfoundland Standard Time        |
| PST       | UTC+8           | Pacific Standard Time             |
| PDT       | UTC+7           | Pacific Daylight Time             |
| YST       | UTC+9           | Yukon Standard Time               |
| YDT       | UTC+8           | Yukon Daylight Time               |

**Example:**

```sql
SELECT NEW_TIME(TO_DATE('08-13-07 10:35:15','MM-DD-YY HH24:MI:SS'),'AST', 'PST') "Pacific Standard Time" FROM DUAL;
```

**Result:**

```
Pacific Standard Time
---------------------
13-AUG-07 06:35:15
(1 row)
```

### 2.4.8.6 ROUND

The `ROUND` function returns a date rounded according to a specified template pattern. If the template pattern is omitted, the date is rounded to the nearest day. The following table shows the template patterns for the `ROUND` function.

#### Table 2-28: Template Date Patterns for the ROUND Function

| Pattern | Description                                                                                   |
|---------|-----------------------------------------------------------------------------------------------|
| SYYY, YYYY, YEAR, SYEAR, YYY, YY, Y | Rounds to January 1, yyyy where yyyy is rounded to the nearest year; rounds down on June 30, rounds up on July 1. |
| IYYY, IYY, IY, I | Rounds to the beginning of the ISO year which is determined by rounding down if the month and day is on or before June 30th, or by rounding up if the month and day is July 1st or later. |
| Q | Rounds to the first day of the quarter determined by rounding down if the month and day is on or before the 15th of the second month of the quarter, or by rounding up if the month and day is on the 16th of the second month or later of the quarter. |
| MONTH, MON, MM, RM | Rounds to the first day of the specified month if the day of the month is on or prior to the 15th; returns the first day of the following month if the day of the month is on the 16th or later. |
| WW | Rounds to the nearest date that corresponds to the same day of the week as the first day of the year. |
| IW | Rounds to the nearest date that corresponds to the same day of the week as the first day of the ISO year. |
| W | Rounds to the nearest date that corresponds to the same day of the week as the first day of the month. |
| DDD, DD, J | Rounds to the start of the nearest day; 11:59:59 AM or earlier rounds to the start of the same day; 12:00:00 PM or later rounds to the start of the next day. |
| DAY, DY, D | Rounds to the nearest Sunday. |
| HH, HH12, HH24 | Rounds to the nearest hour. |
| MI | Rounds to the nearest minute. |

**Examples:**

1. **Rounding to the nearest hundred years:**

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('1950','YYYY'),'CC'),'DD-MON-YYYY') "Century" FROM DUAL;
    ```

    **Result:**

    ```
    Century
    -------------
    01-JAN-1901
    (1 row)
    ```

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('1951','YYYY'),'CC'),'DD-MON-YYYY') "Century" FROM DUAL;
    ```

    **Result:**

    ```
    Century
    -------------
    01-JAN-2001
    (1 row)
    ```

2. **Rounding to the nearest year:**

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('30-JUN-1999','DD-MON-YYYY'),'Y'),'DD-MON-YYYY') "Year" FROM DUAL;
    ```

    **Result:**

    ```
    Year
    -------------
    01-JAN-1999
    (1 row)
    ```

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('01-JUL-1999','DD-MON-YYYY'),'Y'),'DD-MON-YYYY') "Year" FROM DUAL;
    ```

    **Result:**

    ```
    Year
    -------------
    01-JAN-2000
    (1 row)
    ```

3. **Rounding to the nearest ISO year:**

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('30-JUN-2004','DD-MON-YYYY'),'IYYY'),'DD-MON-YYYY') "ISO Year" FROM DUAL;
    ```

    **Result:**

    ```
    ISO Year
    -------------
    29-DEC-2003
    (1 row)
    ```

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('01-JUL-2004','DD-MON-YYYY'),'IYYY'),'DD-MON-YYYY') "ISO Year" FROM DUAL;
    ```

    **Result:**

    ```
    ISO Year
    -------------
    03-JAN-2005
    (1 row)
    ```

4. **Rounding to the nearest quarter:**

    ```sql
    SELECT ROUND(TO_DATE('15-FEB-07','DD-MON-YY'),'Q') "Quarter" FROM DUAL;
    ```

    **Result:**

    ```
    Quarter
    --------------------
    01-JAN-07 00:00:00
    (1 row)
    ```

    ```sql
    SELECT ROUND(TO_DATE('16-FEB-07','DD-MON-YY'),'Q') "Quarter" FROM DUAL;
    ```

    **Result:**

    ```
    Quarter
    --------------------
    01-APR-07 00:00:00
    (1 row)
    ```

5. **Rounding to the nearest month:**

    ```sql
    SELECT ROUND(TO_DATE('15-DEC-07','DD-MON-YY'),'MONTH') "Month" FROM DUAL;
    ```

    **Result:**

    ```
    Month
    --------------------
    01-DEC-07 00:00:00
    (1 row)
    ```

    ```sql
    SELECT ROUND(TO_DATE('16-DEC-07','DD-MON-YY'),'MONTH') "Month" FROM DUAL;
    ```

    **Result:**

    ```
    Month
    --------------------
    01-JAN-08 00:00:00
    (1 row)
    ```

6. **Rounding to the nearest week:**

    ```sql
    SELECT ROUND(TO_DATE('18-JAN-07','DD-MON-YY'),'WW') "Week" FROM DUAL;
    ```

    **Result:**

    ```
    Week
    --------------------
    15-JAN-07 00:00:00
    (1 row)
    ```

    ```sql
    SELECT ROUND(TO_DATE('19-JAN-07','DD-MON-YY'),'WW') "Week" FROM DUAL;
    ```

    **Result:**

    ```
    Week
    --------------------
    22-JAN-07 00:00:00
    (1 row)
    ```

7. **Rounding to the nearest ISO week:**

    ```sql
    SELECT ROUND(TO_DATE('01-JAN-04','DD-MON-YY'),'IW') "ISO Week" FROM DUAL;
    ```

    **Result:**

    ```
    ISO Week
    --------------------
    29-DEC-03 00:00:00
    (1 row)
    ```

    ```sql
    SELECT ROUND(TO_DATE('02-JAN-04','DD-MON-YY'),'IW') "ISO Week" FROM DUAL;
    ```

    **Result:**

    ```
    ISO Week
    --------------------
    05-JAN-04 00:00:00
    (1 row)
    ```

8. **Rounding to the nearest week where a week is considered to start on the same day as the first day of the month:**

    ```sql
    SELECT ROUND(TO_DATE('05-MAR-07','DD-MON-YY'),'W') "Week" FROM DUAL;
    ```

    **Result:**

    ```
    Week
    --------------------
    08-MAR-07 00:00:00
    (1 row)
    ```

    ```sql
    SELECT ROUND(TO_DATE('04-MAR-07','DD-MON-YY'),'W') "Week" FROM DUAL;
    ```

    **Result:**

    ```
    Week
    --------------------
    01-MAR-07 00:00:00
    (1 row)
    ```

9. **Rounding to the nearest day:**

    ```sql
    SELECT ROUND(TO_DATE('04-AUG-07 11:59:59 AM','DD-MON-YY HH:MI:SS AM'),'J') "Day" FROM DUAL;
    ```

    **Result:**

    ```
    Day
    --------------------
    04-AUG-07 00:00:00
    (1 row)
    ```

    ```sql
    SELECT ROUND(TO_DATE('04-AUG-07 12:00:00 PM','DD-MON-YY HH:MI:SS AM'),'J') "Day" FROM DUAL;
    ```

    **Result:**

    ```
    Day
    --------------------
    05-AUG-07 00:00:00
    (1 row)
    ```

10. **Rounding to the start of the nearest day of the week (Sunday):**

    ```sql
    SELECT ROUND(TO_DATE('08-AUG-07','DD-MON-YY'),'DAY') "Day of Week" FROM DUAL;
    ```

    **Result:**

    ```
    Day of Week
    --------------------
    05-AUG-07 00:00:00
    (1 row)
    ```

    ```sql
    SELECT ROUND(TO_DATE('09-AUG-07','DD-MON-YY'),'DAY') "Day of Week" FROM DUAL;
    ```

    **Result:**

    ```
    Day of Week
    --------------------
    12-AUG-07 00:00:00
    (1 row)
    ```

11. **Rounding to the nearest hour:**

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('09-AUG-07 08:29','DD-MON-YY HH:MI'),'HH'),'DD-MON-YY HH24:MI:SS') "Hour" FROM DUAL;
    ```

    **Result:**

    ```
    Hour
    --------------------
    09-AUG-07 08:00:00
    (1 row)
    ```

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('09-AUG-07 08:30','DD-MON-YY HH:MI'),'HH'),'DD-MON-YY HH24:MI:SS') "Hour" FROM DUAL;
    ```

    **Result:**

    ```
    Hour
    --------------------
    09-AUG-07 09:00:00
    (1 row)
    ```

12. **Rounding to the nearest minute:**

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('09-AUG-07 08:30:29','DD-MON-YY HH:MI:SS'),'MI'),'DD-MON-YY HH24:MI:SS') "Minute" FROM DUAL;
    ```

    **Result:**

    ```
    Minute
    --------------------
    09-AUG-07 08:30:00
    (1 row)
    ```

    ```sql
    SELECT TO_CHAR(ROUND(TO_DATE('09-AUG-07 08:30:30','DD-MON-YY HH:MI:SS'),'MI'),'DD-MON-YY HH24:MI:SS') "Minute" FROM DUAL;
    ```

    **Result:**

    ```
    Minute
    --------------------
    09-AUG-07 08:31:00
    (1 row)
    ```

### 2.4.8.7 TRUNC

The `TRUNC` function returns a date truncated according to a specified template pattern. If the template pattern is omitted, the date is truncated to the nearest day. The following table shows the template patterns for the `TRUNC` function.

#### Table 2-29: Template Date Patterns for the TRUNC Function

| Pattern | Description                                                                                   |
|---------|-----------------------------------------------------------------------------------------------|
| CC, SCC | Returns January 1, cc01 where cc is the first 2 digits of the given year.                    |
| SYYY, YYYY, YEAR, SYEAR, YYY, YY, Y | Returns January 1, yyyy where yyyy is the given year.                                         |
| IYYY, IYY, IY, I | Returns the start date of the ISO year containing the given date.                              |
| Q | Returns the first day of the quarter containing the given date.                                |
| MONTH, MON, MM, RM | Returns the first day of the specified month.                                                  |
| WW | Returns the largest date just prior to, or the same as the given date that corresponds to the same day of the week as the first day of the year. |
| IW | Returns the start of the ISO week containing the given date.                                   |
| W | Returns the largest date just prior to, or the same as the given date that corresponds to the same day of the week as the first day of the month. |
| DDD, DD, J | Returns the start of the day for the given date.                                               |
| DAY, DY, D | Returns the start of the week (Sunday) containing the given date.                              |
| HH, HH12, HH24 | Returns the start of the hour.                                                                 |
| MI | Returns the start of the minute.                                                               |

**Examples:**

1. **Truncating down to the hundred years unit:**

    ```sql
    SELECT TO_CHAR(TRUNC(TO_DATE('1951','YYYY'),'CC'),'DD-MON-YYYY') "Century" FROM DUAL;
    ```

    **Result:**

    ```
    Century
    -------------
    01-JAN-1901
    (1 row)
    ```

2. **Truncating down to the year:**

    ```sql
    SELECT TO_CHAR(TRUNC(TO_DATE('01-JUL-1999','DD-MON-YYYY'),'Y'),'DD-MON-YYYY') "Year" FROM DUAL;
    ```

    **Result:**

    ```
    Year
    -------------
    01-JAN-1999
    (1 row)
    ```

3. **Truncating down to the beginning of the ISO year:**

    ```sql
    SELECT TO_CHAR(TRUNC(TO_DATE('01-JUL-2004','DD-MON-YYYY'),'IYYY'),'DD-MON-YYYY') "ISO Year" FROM DUAL;
    ```

    **Result:**

    ```
    ISO Year
    -------------
    29-DEC-2003
    (1 row)
    ```

4. **Truncating down to the start date of the quarter:**

    ```sql
    SELECT TRUNC(TO_DATE('16-FEB-07','DD-MON-YY'),'Q') "Quarter" FROM DUAL;
    ```

    **Result:**

    ```
    Quarter
    --------------------
    01-JAN-07 00:00:00
    (1 row)
    ```

5. **Truncating to the start of the month:**

    ```sql
    SELECT TRUNC(TO_DATE('16-DEC-07','DD-MON-YY'),'MONTH') "Month" FROM DUAL;
    ```

    **Result:**

    ```
    Month
    --------------------
    01-DEC-07 00:00:00
    (1 row)
    ```

6. **Truncating down to the start of the week determined by the first day of the year:**

    ```sql
    SELECT TRUNC(TO_DATE('19-JAN-07','DD-MON-YY'),'WW') "Week" FROM DUAL;
    ```

    **Result:**

    ```
    Week
    --------------------
    15-JAN-07 00:00:00
    (1 row)
    ```

7. **Truncating to the start of an ISO week:**

    ```sql
    SELECT TRUNC(TO_DATE('02-JAN-04','DD-MON-YY'),'IW') "ISO Week" FROM DUAL;
    ```

    **Result:**

    ```
    ISO Week
    --------------------
    29-DEC-03 00:00:00
    (1 row)
    ```

8. **Truncating to the start of the week where a week is considered to start on the same day as the first day of the month:**

    ```sql
    SELECT TRUNC(TO_DATE('21-MAR-07','DD-MON-YY'),'W') "Week" FROM DUAL;
    ```

    **Result:**

    ```
    Week
    --------------------
    15-MAR-07 00:00:00
    (1 row)
    ```

9. **Truncating to the start of the day:**

    ```sql
    SELECT TRUNC(TO_DATE('04-AUG-07 12:00:00 PM','DD-MON-YY HH:MI:SS AM'),'J') "Day" FROM DUAL;
    ```

    **Result:**

    ```
    Day
    --------------------
    04-AUG-07 00:00:00
    (1 row)
    ```

10. **Truncating to the start of the week (Sunday):**

    ```sql
    SELECT TRUNC(TO_DATE('09-AUG-07','DD-MON-YY'),'DAY') "Day of Week" FROM DUAL;
    ```

    **Result:**

    ```
    Day of Week
    --------------------
    05-AUG-07 00:00:00
    (1 row)
    ```

11. **Truncating to the start of the hour:**

    ```sql
    SELECT TO_CHAR(TRUNC(TO_DATE('09-AUG-07 08:30','DD-MON-YY HH:MI'),'HH'),'DD-MON-YY HH24:MI:SS') "Hour" FROM DUAL;
    ```

    **Result:**

    ```
    Hour
    --------------------
    09-AUG-07 08:00:00
    (1 row)
    ```

12. **Truncating to the minute:**

    ```sql
    SELECT TO_CHAR(TRUNC(TO_DATE('09-AUG-07 08:30:30','DD-MON-YY HH:MI:SS'),'MI'),'DD-MON-YY HH24:MI:SS') "Minute" FROM DUAL;
    ```

    **Result:**

    ```
    Minute
    --------------------
    09-AUG-07 08:30:00
    (1 row)
    ```

### 2.4.8.8 CURRENT DATE/TIME

Advanced Server provides several functions that return values related to the current date and time. These functions all return values based on the start time of the current transaction.

- **CURRENT_DATE**: Returns the current date and time based on the start time of the current transaction. The value of `CURRENT_DATE` will not change if called multiple times within a transaction.

- **CURRENT_TIMESTAMP**: Returns the current date and time with fractional seconds precision.

- **LOCALTIMESTAMP**: Returns the current date and time without time zone information.

- **LOCALTIMESTAMP(precision)**: Returns the current date and time with the specified precision for fractional seconds.

**Example:**

```sql
SELECT CURRENT_DATE, CURRENT_TIMESTAMP, LOCALTIMESTAMP, LOCALTIMESTAMP(3) FROM DUAL;
```

**Result:**

```
CURRENT_DATE      | CURRENT_TIMESTAMP                  | LOCALTIMESTAMP                 | LOCALTIMESTAMP(3)
------------------|------------------------------------|--------------------------------|-------------------
2023-10-01 00:00:00 | 2023-10-01 14:30:45.123456+00:00 | 2023-10-01 14:30:45.123456     | 2023-10-01 14:30:45.123
```

Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.