### 3.5.4 栈帧

本例中，程序使用寄存器来传递文本字符串的地址。然而，它同时也设置了局部栈。这是因为在调用 `printf()` 函数时，程序需要保存返回地址（RA 寄存器）和全局指针（GP 寄存器）的值。因此，这里出现了数据栈。如果该函数是叶函数（即不调用其他函数），则可能不会出现函数序言和尾声。有关内容请参见本书的 2.3 节。

### 3.5.5 Optimizing GCC: GDB 的分析方法

#### 指令清单 3.22 GDB 的操作流程
```sh
root@debian-mips:~# gcc hw.c -O3 -o hw 
root@debian-mips:~# gdb hw 
GNU gdb (GDB) 7.0.1-debian 
Copyright (C) 2009 Free Software Foundation, Inc. 
License GPLv3+: GNU GPL version 3 or later  
This is free software: you are free to change and redistribute it. 
There is NO WARRANTY, to the extent permitted by law.  Type "show copying" 
and "show warranty" for details. 
This GDB was configured as "mips-linux-gnu". 
For bug reporting instructions, please see: 
... 
Reading symbols from /root/hw...(no debugging symbols found)...done. 
(gdb) b main 
Breakpoint 1 at 0x400654 
(gdb) run 
Starting program: /root/hw 
Breakpoint 1, 0x00400654 in main () 
(gdb) set step-mode on 
(gdb) disas 
Dump of assembler code for function main: 
0x00400640 :     lui      gp,0x42 
0x00400644 :     addiu   sp,sp,-32 
0x00400648 :     addiu   gp,gp,-30624 
0x0040064C :    sw      ra,28(sp) 
0x00400650 :    sw      gp,16(sp) 
0x00400654 :    lw      t9,-32716(gp) 
0x00400658 :    lui     a0,0x40 
0x0040065c :    jalr    t9 
0x00400660 :    addiu   a0,a0,2080 
0x00400664 :    lw      ra,28(sp) 
0x00400668 :    move    v0,zero 
0x0040066c :    jr      ra 
0x00400670 :    addiu   sp,sp,32 
End of assembler dump. 
(gdb) s 
0x00400658 in main () 
(gdb) s 
0x0040065c in main () 
(gdb) s 
0x2ab2de60 in printf () from /lib/libc.so.6 
(gdb) x/s $a0 
0x400820:          "hello, world" 
(gdb) 
```

### 3.6 总结

x64 和 x86 指令的主要区别在于指针的位数：x64 使用 64 位指针，而 x86 使用 32 位指针。随着内存价格的降低和 CPU 计算能力的增强，当计算机的内存增加到一定程度时，32 位指针无法满足寻址需求，因此指针演变为 64 位指针。

### 3.7 练习题

#### 3.7.1 题目 1
请描述下述 32 位函数的功能。
```assembly
main:
     push 0xFFFFFFFF
     call MessageBeep
     xor  eax, eax
     retn
```

#### 3.7.2 题目 2
请描述 Linux 函数的功能，这里使用了 AT&T 汇编语言语法。
```assembly
main:
     pushq   %rbp
     movq    %rsp, %rbp
     movl    $2, %edi
     call    sleep
     popq    %rbp
     ret
```

### 第 4 章 函数序言和函数尾声

函数序言（function prologue）是函数在启动时运行的一系列指令。其汇编指令大致如下：
```assembly
push ebp
mov  ebp, esp
sub  esp, X
```
这些指令的功能是在栈里保存 EBP 寄存器的内容，将 ESP 的值复制到 EBP 寄存器，然后修改栈的高度，以便为本函数的局部变量申请存储空间。

在函数执行期间，EBP 寄存器不受函数运行的影响，它是函数访问局部变量和函数参数的基准值。虽然我们也可以使用 ESP 寄存器存储局部变量和运行参数，但 ESP 寄存器的值总是会发生变化，使用起来不方便。

函数在退出时，要做启动过程的反操作，释放栈中申请的内存，还原 EBP 寄存器的值，并将代码控制权还原给调用者函数（callee）。
```assembly
mov  esp, ebp
pop  ebp
ret  0
```
借助函数序言和函数尾声的特征，我们可以在汇编语言中识别各个函数。

### 递归调用

函数序言和尾声都会调整数据栈。受硬件 I/O 性能影响，所有递归函数的性能都不太理想。详细内容请参见本书的 36.3 节。

### 第 5 章 栈

栈是计算机科学中最重要的基础数据结构之一。尽管 x86/x64 的栈已经很难理解，但 ARM 的栈更为复杂。ARM 的栈分为递增栈和递减栈：

- **递减栈**（descending stack）的首地址是栈的最高地址，栈向低地址增长，栈指针的值随栈的增长而减少。例如，STMFD/LDMFD、STMED/LDMED 等指令都是递减栈的操作指令。
- **递增栈**（ascending stack）的首地址占用栈的最低地址，栈向高地址增长，栈指针的值随栈的增长而增加。例如，STMFA/LMDFA、STMEA/LDMEA 等指令都是递增栈的操作指令。

从技术上讲，栈就是 CPU 寄存器中的某个指针所指向的一片内存区域。这个“某个指针”通常位于 x86/x64 平台的 ESP 寄存器/RSP 寄存器，以及 ARM 平台的 SP 寄存器。

最常见的栈操作指令是 PUSH 和 POP，在 x86 和 ARM Thumb 模式的指令集中都有这两条指令。PUSH 指令会对 ESP/RSP/SP 寄存器的值进行减法运算，使之减去 4（32 位）或 8（64 位），然后将操作数写到上述寄存器里的指针所指向的内存中。

POP 指令是 PUSH 指令的逆操作：它先从栈指针（Stack Pointer，上面三个寄存器之一）指向的内存中读取数据，用以备用（通常是写到其他寄存器里），然后再将栈指针的数值加上 4 或 8。

在分配栈的空间之后，栈指针（Stack Pointer）所指向的地址是栈的底部。PUSH 将减少栈指针的数值，而 POP 会增加它的数值。栈的“底”实际上使用的是整个栈的最低地址，即是整个栈的起始内存地址。

### 5.1 为什么栈会逆增长

多数人想象中的“增长”，是栈从低地址位向高地址位增长，似乎这样才符合自然规律。然而，研究过栈的人知道，多数的栈是逆增长的，它会从高地址向低地址增长。

这主要归因于历史原因。在计算机尚未小型化的时候，内存分为两个部分：“堆”和“栈”。在程序执行过程中，堆和栈到底会增长到什么地步并不好说，所以人们干脆把它们分开。

有兴趣的读者可以查阅参考文献 RT74，其中有这样一段话：

程序镜像（进程）在逻辑上分为 3 个段。从虚拟地址空间的 0 地址位开始，第一个段是文本段（也称为代码段）。文本段在执行过程中不可写，即使一个程序被执行多次，它也必须共享 1 份文本段。

在程序虚拟空间中，文本段 8k bytes 边界之上，是不共享的、可写的数据段。程序可以通过调用系统函数调整其数据段的大小。栈启始于虚拟地址空间的最高地址，它应随着硬件栈指针的变化而自动地向下增长。

这就好比用同一个笔记本给两门课程做笔记：第一门的笔记可以按照第一页往最后一页的顺序写；然而在做第二门的笔记时，笔记本要反过来用，也就是要按照从最后一页往第一页的顺序写笔记。至于笔记本什么时候会用完，那就要看笔记本有多厚了。

### 5.2 栈的用途

#### 5.2.1 保存函数结束时的返回地址

- **x86**：当程序使用 call 指令调用其他函数时，call 指令结束后的返回地址将被保存在栈里；在 call 所调用的函数结束之后，程序将执行无条件跳转指令，跳转到这个返回地址。CALL 指令等价于“PUSH 返回地址”和“JMP 函数地址”的指令对。被调用函数里的 RET 指令，会从栈中读取返回地址，然后跳转到这个地址，相当于“POP 返回地址”＋“JMP 返回地址”指令。

- **ARM**：ARM 程序也使用栈保存返回地址，只是略有不同。在 3.4 节中，我们看到“Hello, World!”程序的返回地址保存在 LR (link register) 寄存器里。但是，如果程序还会继续调用其他函数，就需要在调用函数之前保存 LR 寄存器的值。通常，函数会在启动过程中（序言处）保存 LR 寄存器的值。我们通常在函数序言处看到“PUSH R4-R7, LR”，并在尾声处看到“POP R4-R7, PC”。这些指令会对函数自身将要用到的寄存器进行保护，把它们的值存放在栈中——当然，这其中也包括 LR 寄存器。

如果一个函数不调用其他函数，它就像树上的枝杈末端的叶子那样。这种函数就叫作“叶函数（leaf function）”。叶函数的特点是，它不必保存 LR 寄存器的值。如果叶函数的代码短到用不到几个寄存器，那么它也可能根本不会使用数据栈。所以，调用叶函数的时候确实可能不会涉及栈操作。这种情况下，因为这种代码不在外部内存 RAM 进行与栈有关的操作，所以它的运行速度有可能超过 x86 系统。

#### 5.2.2 参数传递

在 x86 平台的程序中，最常用的参数传递约定是 cdecl。以 cdecl 方式处理参数，其上下文大体是这个样子：
```assembly
push arg3
push arg2
push arg1
call f
add esp, 12  ; 4*3=12
```
被调用方函数（Callee functions）通过栈指针获取其所需的参数。

在运行 f() 函数之前，传递给它的参数将以以下格式存储在内存里。