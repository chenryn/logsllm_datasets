Listing 6: Example of tainting different arguments
where tc client ioctl has a directly tainted argument
and iris s ext ctrls’s argument is indirectly tainted.
1 s t a t i c
2
3
4
5
l o n g t c c l i e n t
u n s i g n e d cmd , u n s i g n e d l o n g a r g ) {
. . .
c h a r c =( c h a r ∗) a r g
. . .
f i l e ∗ f i l e ,
i o c t l ( s t r u c t
6 }
7 s t a t i c
8
9
10
11
12
c h a r
13 }
i n t
i r i s
s e x t c t r l s ( s t r u c t
f i l e ∗ f i l e ,
s t r u c t v 4 l 2 e x t c o n t r o l s ∗ c t r l ) {
v o i d ∗ p r i v ,
c h a r ∗ d a t a = ( c t r l ->c o n t r o l s [ 0 ] ) . s t r i n g ;
. . .
. . .
c u r r c h = d a t a [ 0 ] ;
6 Limitations
Because of the DR. CHECKER’s soundy nature, it cannot
ﬁnd all the vulnerabilities in all drivers. Speciﬁcally, it
will miss following types of vulnerabilities:
• State dependent bugs: Since DR. CHECKER is a
stateless system, it treats each entry point indepen-
dently (i.e., taint does not propagate between mul-
tiple entry points). As a result, we will miss any
bugs that occur because of the interaction between
multiple entry points (e.g., CVE-2016-2068 [4]).
• Improper API usage: DR. CHECKER assumes that
all the kernel API functions are safe and correctly
used (Assumption 1 in Section 3). Bugs that oc-
cur because of improper kernel API usage will be
missed by DR. CHECKER. However, other tools
(e.g., APISan [64]) have been developed for ﬁnd-
ing these speciﬁc types of bugs and could be used
to complement DR. CHECKER.
• Non-input-validation bugs: DR. CHECKER specif-
ically targets input validation vulnerabilities. As
such, non-input validation vulnerabilities (e..g, side
channels or access control bugs) cannot be detected.
7 Evaluation
To evaluate the efﬁcacy of DR. CHECKER, we performed
a large-scale analysis of the following nine popular mo-
bile device kernels and their associated drivers (437 in
total). The kernel drivers in these devices range from
very small components (31 LOC), to much more com-
plex pieces of code (240,000 LOC), with an average of
7,000 LOC per driver. In total, these drivers contained
over 3.1 million lines of code. However, many of these
kernels re-use the same code, which could result in ana-
lyzing the same entry point twice, and inﬂate our results.
Thus, we have grouped the various kernels based on their
underlying chipset, and only report our results based on
these groupings:
Table 2: Summary of warnings produced by popular bug-
ﬁnding tools on the various kernels that we analyzed.
Kernel
Qualcomm
Samsung
Hauwei
Mediatek
cppcheck
18
22
34
168
242
Number of Warnings
ﬂawﬁnder RATS
693
2,244
2,301
3,730
8,968
4,365
8,173
18,132
14,230
44,900
Sparse
5,202
1,726
11,230
13,771
31,929
Mediatek:
• Amazon Echo (5.5.0.3)
• Amazon Fire HD8 (6th Generation, 5.3.2.1)
• HTC One Hima (3.10.61-g5f0fe7e)
• Sony Xperia XA (33.2.A.3.123)
Qualcomm
• HTC Desire A56 (a56uhl-3.4.0)
• LG K8 ACG (AS375)
• ASUS Zenfone 2 Laser
21.40.1220.1794)
(ZE550KL / MR5-
Huawei
• Huawei Venus P9 Lite (2016-03-29)
Samsung
• Samsung Galaxy S7 Edge (SM-G935F NN)
To ensure that we had a baseline comparison for
DR. CHECKER, we also analyzed these drivers us-
ing 4 popular open-source, and stable, static analysis
tools (ﬂawﬁnder [57], RATs [45], cppcheck [34], and
Sparse [54]). We brieﬂy describe our interactions with
each below, and a summary of the number of warnings
raised by each is shown in Table 2.
Flawﬁnder & RATs Both Flawﬁnder and RATs are
pattern-matching-based tool used to identify potentially
In our experience, the
dangerous portions of C code.
installation and usage of each was quite easy;
they
both installed without any conﬁguration and used a sim-
ple command-line interface. However, the criteria that
they used for their warnings tended to be very simplis-
tic, missed complex bugs, and where overly general,
which resulted in an extremely high number of warn-
ings (64,823 from Flawﬁnder and 13,117 from RATs).
For example, Flawﬁnder ﬂagged a line of code with the
warning, High: ﬁxed size local buffer. However, after
manual investigation it was clear this code was unreach-
able, as it was inside of an #if 0 deﬁnition.
We also found numerous cases where the string-
matching algorithm was overly general.
For exam-
ple, Flawﬁnder raised a critical warning ([4] (shell)
system),
incorrectly reporting that system was be-
ing invoked for
the following deﬁne:
#define
system cluster(system, clusterid).
USENIX Association
26th USENIX Security Symposium    1017
Table 3: Comparison of the features provided by popular bug-ﬁnding tools and DR. CHECKER, where
availability of the feature.
Feature
Extensible
Inter-procedural
Handles pointers
Kernel Speciﬁc
No Manual Annotations
Requires compilable sources
Sound
Traceable Warnings
√
-
-
√
-
√
-
-
√
√
√
√
√
√
√
-
cppcheck
ﬂawﬁnder
-
-
-
√
-
-
-
-
RATS
Sparse
DR. CHECKER
-
-
-
√
-
-
-
-
-
-
√
-
√
-
√
-
√
indicates
Ultimately, the tools seemed reasonable for basic code
review passes, and perhaps for less-security minded pro-
grams, as they do offer informational warning messages:
Flawﬁnder: Statically-sized arrays can be im-
properly restricted, leading to potential overﬂows
or other issues (CWE-119:CWE-120).
Perform
bounds checking, use functions that limit length, or
ensure that the size is larger than the maximum pos-
sible length.
RATs: Check buffer boundaries if calling this func-
tion in a loop and make sure you are not in danger
of writing past the allocated space
Sparse Sparse was developed by Linus Torvalds and
is speciﬁcally targeted to analyze kernel code.
It is
implemented as a compiler front end (enabled by the
ﬂag C=2 during compilation) that raises warnings about
known problems, and even allows developers to pro-
vide static type annotations (e.g., user and kernel).
The tool was also relatively easily to use. Although,
Sparse is good at ﬁnding annotation mis-matches like
unsafe user pointer dereferences [16].
Its main draw-
back was the sheer number of warnings (64,823 in to-
tal) it generated, where most of the warnings gener-
ated were regarding non-compliance to good kernel code
practices. For example, warnings like, “warning: Us-
ing plain integer as NULL pointer” and “warning: sym-
bol ’htc smem ram addr’ was not declared. Should it be
static?,” were extremely common.
cppcheck Cppcheck was the most complicated to use
of the tools that we evaluated, as it required manual iden-
tiﬁcation of all of the includes, conﬁgurations, etc. in the
source code. However, this knowledge of the source code
structure did result in much more concise results. While
the project is open-source, their analysis techniques are
not well-documented. Nevertheless, it is clear that the
tool can handle more complex interactions (e.g., macros,
globals, and loops) than the other three. For example, in
one of the raised warnings it reported an out-of-bounds
index in an array lookup. Unfortunately, after manual
investigation there was a guard condition protecting the
array access, but this was still a much more valuable
warning that those returned by other tools. It was also
able to identify an interesting use of snprintf on over-
lapped objects, which exhibits undeﬁned behavior, and
appeared generally useful. It also has a conﬁgurable en-
gine, which allows users to specify additional types of
vulnerability patterns to identify. Despite this function-
ality, it still failed to detect any of the complex bugs that
DR. CHECKER was able to help us discover.
To summarize our experience, we provide a side-
by-side feature comparison of the evaluated tools and
DR. CHECKER in Table 3. Note that cppcheck and
DR. CHECKER where the only two with an extensible
framework that can be used to add vulnerability detec-
tors. Similarly, every tool aside from Sparse, which
needs manual annotations, was more-or-less completely
automated. As previously mentioned, Sparse’s annota-
tions are used to ﬁnd unsafe user pointer dereferences,
and while these annotations are used rigorously in the
mainline kernel code, they are not always used in the
vendor drivers. Moreover, typecasting is frequently used
in Linux kernel making Sparse less effective. Pattern-
based tools like ﬂawﬁnder and RATS do not require com-
pilable source code, which results in spurious warnings
because of pre-processor directives making them unus-
able. Of the evaluated features, traceability of the warn-
ings is potentially the most important for kernel bug-
ﬁnding tools [26], as these warnings will ultimately be
analyzed by a human. We consider a warning to be trace-
able if it includes all of the information required to un-
derstand how a user input can result in the warning. In
DR. CHECKER, we use the debug information embedded
in the LLVM bitcode to provide traceable warnings. An
example of a warning produced by DR. CHECKER is as
shown in Listing 7.
7.1 DR. CHECKER
The summarized results of all of the warnings that were
reported by DR. CHECKER are presented in Table 4. In
this table, we consider a warning as correct if the report
and trace were in fact true (e.g., a tainted variable was be-
1018    26th USENIX Security Symposium
USENIX Association
Table 4: Summary of the bugs identiﬁed by DR. CHECKER in various mobile kernel drivers. We list the total number
of warnings raised, number correct warnings, and number of bugs identiﬁed as a result.
Warnings per Kernel (Count / Conﬁrmed / Bug)
Samsung
20 / 20 / 1
479 / 423 / 4
78 / 78 / 0
100 / 62 / 12
135 / 134 / 4
99 / 87 / 2
6 / 2 / 1
56 / 13 / 0
Total
270 / 268 / 14
1760 / 1301 / 25
278 / 259 / 5
1160 / 774 / 63
551 / 540 / 21
792 / 707 / 16
24 / 15 / 11
236 / 109 / 3
Detector
TaintedSizeDetector
TaintedPointerDereferenceChecker
TaintedLoopBoundDetector