### Listing 6: Example of Tainting Different Arguments
In this example, `tc_client_ioctl` has a directly tainted argument, while `iris_s_ext_ctrls`'s argument is indirectly tainted.

```c
static long tc_client_ioctl(struct file *file, unsigned int cmd, unsigned long arg) {
    ...
    char *c = (char *)arg;
    ...
}

static int iris_s_ext_ctrls(struct file *file, struct v4l2_ext_controls *ctrl) {
    void *priv;
    char *data = (ctrl->controls[0]).string;
    ...
    char curr_ch = data[0];
    ...
}
```

### 6. Limitations
Due to the soundy nature of DR. CHECKER, it cannot detect all vulnerabilities in all drivers. Specifically, it will miss the following types of vulnerabilities:

- **State-Dependent Bugs**: Since DR. CHECKER is stateless, it treats each entry point independently, meaning taint does not propagate between multiple entry points. This results in missing bugs that occur due to interactions between multiple entry points, such as CVE-2016-2068.
- **Improper API Usage**: DR. CHECKER assumes that all kernel API functions are safe and correctly used (Assumption 1 in Section 3). Consequently, bugs arising from improper kernel API usage will be missed. However, other tools like APISan [64] can complement DR. CHECKER by detecting these specific types of bugs.
- **Non-Input-Validation Bugs**: DR. CHECKER specifically targets input validation vulnerabilities. Therefore, non-input validation vulnerabilities, such as side channels or access control bugs, cannot be detected.

### 7. Evaluation
To evaluate the efficacy of DR. CHECKER, we conducted a large-scale analysis of nine popular mobile device kernels and their associated drivers (437 in total). The kernel drivers ranged from very small components (31 LOC) to more complex code (240,000 LOC), with an average of 7,000 LOC per driver. In total, these drivers contained over 3.1 million lines of code. However, many of these kernels reuse the same code, which could result in analyzing the same entry point multiple times and inflating our results. To address this, we grouped the kernels based on their underlying chipset and reported results based on these groupings.

#### Table 2: Summary of Warnings Produced by Popular Bug-Finding Tools
| Kernel        | Qualcomm | Samsung | Huawei | Mediatek | Total |
|---------------|----------|---------|--------|----------|-------|
| cppcheck      | 18       | 22      | 34     | 168      | 242   |
| flawfinder    | 693      | 2,244   | 2,301  | 3,730    | 8,968 |
| RATS          | 4,365    | 8,173   | 18,132 | 14,230   | 44,900|
| Sparse        | 5,202    | 1,726   | 11,230 | 13,771   | 31,929|

**Kernel Groupings:**
- **Mediatek**:
  - Amazon Echo (5.5.0.3)
  - Amazon Fire HD8 (6th Generation, 5.3.2.1)
  - HTC One Hima (3.10.61-g5f0fe7e)
  - Sony Xperia XA (33.2.A.3.123)
- **Qualcomm**:
  - HTC Desire A56 (a56uhl-3.4.0)
  - LG K8 ACG (AS375)
  - ASUS Zenfone 2 Laser (ZE550KL / MR5-21.40.1220.1794)
- **Huawei**:
  - Huawei Venus P9 Lite (2016-03-29)
- **Samsung**:
  - Samsung Galaxy S7 Edge (SM-G935F NN)

To ensure a baseline comparison for DR. CHECKER, we also analyzed these drivers using four popular open-source and stable static analysis tools: flawfinder [57], RATS [45], cppcheck [34], and Sparse [54]. Below, we briefly describe our interactions with each tool, and a summary of the number of warnings raised by each is shown in Table 2.

#### Flawfinder & RATS
Both Flawfinder and RATS are pattern-matching-based tools used to identify potentially dangerous portions of C code. Installation and usage were straightforward, but the criteria for their warnings were simplistic, often missing complex bugs and generating overly general warnings (64,823 from Flawfinder and 13,117 from RATS). For example, Flawfinder flagged a line of code with the warning "High: fixed size local buffer," but manual investigation revealed the code was unreachable, being inside an `#if 0` definition. We also found cases where the string-matching algorithm was overly general, such as incorrectly reporting a critical warning for the following define: `#define system cluster(system, clusterid)`.

#### Sparse
Sparse, developed by Linus Torvalds, is specifically targeted at analyzing kernel code. It is implemented as a compiler front end (enabled by the flag `-C=2` during compilation) that raises warnings about known problems and allows developers to provide static type annotations. Although Sparse is good at finding annotation mismatches like unsafe user pointer dereferences, it generated a high number of warnings (64,823 in total), mostly regarding non-compliance with good kernel coding practices.

#### Cppcheck
Cppcheck was the most complex tool to use, requiring manual identification of all includes, configurations, etc., in the source code. However, this resulted in more concise and valuable warnings, such as out-of-bounds array lookups and undefined behavior in `snprintf` on overlapped objects. Cppcheck also has a configurable engine, allowing users to specify additional vulnerability patterns. Despite this, it failed to detect any of the complex bugs that DR. CHECKER identified.

### Table 3: Feature Comparison of Bug-Finding Tools
| Feature                  | Extensible | Inter-procedural | Handles Pointers | Kernel Specific | No Manual Annotations | Requires Compilable Sources | Sound | Traceable Warnings |
|--------------------------|------------|------------------|------------------|-----------------|-----------------------|-----------------------------|-------|--------------------|
| DR. CHECKER              | √          | √                | √                | √               | √                     | √                           | -     | √                  |
| cppcheck                 | √          | √                | √                | -               | -                     | √                           | -     | -                  |
| flawfinder               | -          | -                | -                | -               | -                     | -                           | -     | -                  |
| RATS                     | -          | -                | -                | -               | -                     | -                           | -     | -                  |
| Sparse                   | -          | -                | -                | √               | -                     | √                           | -     | -                  |

Ultimately, pattern-based tools like Flawfinder and RATS are suitable for basic code reviews and less security-critical programs, but they generate too many spurious warnings. Sparse is effective for kernel-specific issues but requires manual annotations, making it less useful for vendor drivers. Cppcheck provides more detailed and valuable warnings but is more complex to use.

### 7.1 DR. CHECKER
The summarized results of all warnings reported by DR. CHECKER are presented in Table 4. A warning is considered correct if the report and trace are true (e.g., a tainted variable was indeed used).

#### Table 4: Summary of Bugs Identified by DR. CHECKER
| Kernel        | Warnings (Count / Confirmed / Bug) |
|---------------|------------------------------------|
| Samsung       | 20 / 20 / 1                        |
| Qualcomm      | 479 / 423 / 4                      |
| Huawei        | 78 / 78 / 0                        |
| Mediatek      | 100 / 62 / 12                      |
| Other         | 135 / 134 / 4                      |
| Total         | 270 / 268 / 14                     |

**Detectors:**
- TaintedSizeDetector
- TaintedPointerDereferenceChecker
- TaintedLoopBoundDetector

This comprehensive evaluation demonstrates the effectiveness of DR. CHECKER in identifying and tracing input validation vulnerabilities in mobile kernel drivers.