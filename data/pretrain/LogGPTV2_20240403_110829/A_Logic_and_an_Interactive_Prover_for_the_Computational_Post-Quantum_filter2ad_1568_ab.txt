The previously mentioned EASYCRYPT is a toolset for
constructing cryptographic proofs, which currently mainly
targets cryptographic primitives. It was ﬁrst adapted to the
quantum setting with qRHL [59], a formal security prover based
on a quantum relational Hoare logic, and later (in concurrent
work to ours) to the post-quantum setting with EASYPQC [8].
The qRHL approach works on quantum constructions, which
substantially complicates proving classical constructions. For
example, there is no equivalent to the classical implication
operation over quantum predicates (see e.g., [28]). EASYPQC
avoids this overhead by only considering classical constructions.
Similar to our approach, EASYPQC adds new side conditions
to its core logic, such as forbidding case distinctions on the
attacker’s internal state. It is difﬁcult to compare their side
conditions to ours, since the conditions are deeply linked to the
underlying logics, which are of a very different nature. Notably,
EASYPQC supports reasoning in the Qantum Random Oracle
Model (QROM). The BC logic does not yet support the ROM
(nor QROM), and hence neither do we. This is not an inherent
restriction of the logic and could be future work. For our
current case studies, we prefer the use of the PRF assumption
over the QROM.
EASYPQC and our approach inherit their focus from their
starting points: the EASYCRYPT approach is more geared
towards cryptographic primitives, while BC is designed for
protocols. All current EASYPQC case studies are cryptographic
primitives, whereas our case studies are protocols. In particular,
our case studies for KEM based key exchanges are the ﬁrst
mechanized proofs with computational guarantees of such
protocols.
II. BACKGROUND: THE CLASSICAL BC LOGIC AND
SQUIRREL
Below we ﬁrst recall the main elements of the original BC
logic [7] that are relevant for understanding our work in the
following sections. In Section II-E we describe the SQUIRREL
prover [5], which mechanizes reasoning in the BC logic.
In the computational model, the security of a protocol is
established by showing that the protocol cannot be distinguished
from its idealized version by any polynomial-time attacker w.r.t.
a security parameter. Such security proofs of protocols rely
on two ingredients: a computational hardness assumption, and
a security reduction showing that an attacker that can break
the security of the protocol can break the hardness assumption.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
2126
But the construction of security reductions is difﬁcult and
error-prone. To ease this process, the BC logic proves the
security of protocols inside a ﬁrst-order logic. This approach
requires that within BC, everything is modeled using only terms,
i.e., purely syntactic constructs. This is very different from
the game-based modeling, where protocols are expressed as
abstract programs with procedure calls, states, and side effects.
With terms, all protocol actions become pure functional calls,
which tends to ease the formal reasoning. This leads to some
core elements in the design of the logic: one needs to
1) deﬁne terms, as well as an interpretation from protocols
to terms so that the terms syntactically describe all the
behaviours of the protocol,
2) deﬁne logical predicates and rules (which include axioms)
to reason about our terms, and
3) show that the rules are sound, i.e., that the rule applications
correspond to correct reductions.
We provide an overview of the ﬁrst two elements in the
following, and refer the reader to [7] for details of the rules and
their soundness. However, all three elements will be discussed
when we present the modiﬁed post-quantum sound logic in
the following sections.
A. Specifying protocol behaviours using syntactic terms
1) From protocols to terms: Let us consider a very simple
example protocol process P , using an informal syntax.
Example 1 (Protocol).
P := new sk.in(x).new r.out(enc(x, r, sk)).
in(y).new r(cid:48).out(enc(y, r(cid:48), sk)).
Process P samples a secret key sk, and uses it to encrypt some
attacker input x using the random seed r (explicitly modeling
probabilistic encryption). It then encrypts a second input y
with random seed r(cid:48).
Equivalently, in the game-based notation with a stateful prob-
abilistic attacker A and security parameter η, the experiment
that returns the attacker-observable values is deﬁned as:
enc,A(η)
Experiment ExpP
sk $←− {0, 1}η
x $←− A(1η)
r $←− {0, 1}η
y $←− A(1η, enc(x, r, sk))
r(cid:48) $←− {0, 1}η
return (enc(x, r, sk), enc(y, r(cid:48), sk))
To syntactically represent such observable sequences of
values using terms, one can use the following constructions:
• fresh values n sampled from an inﬁnite set N , representing
randomly sampled bitstrings, such as r, r(cid:48), and sk above;
• public function symbols f ∈ Σ, to model e.g., encryption
• variables such as x and y from the set of variables X ,
functions such as enc; and
modeling attacker inputs.
Any protocol computation can then be modeled as applications
of public functions to either fresh values modeling randomly
generated values (such as nonces and secret keys), or variables
modeling attacker inputs. This is essentially the Dolev-Yao
model [31], where the protocol can be described with the
following term sequence:
enc(x, r, sk), enc(y, r(cid:48), sk)
(1)
This sequence of terms, that we will refer to as the frame of
the protocol, represents the possible messages that an attacker
can observe during the protocol’s execution.
2) Modeling attacker computations: The sequence of terms
in Eq. (1) is not yet sufﬁcient to reason syntactically about
protocols, because it does not capture that y probabilistically
depends on the value of enc(x, r, sk). From a high-level
point of view the logic must satisfy locality: a term must
explicitly contain all its probabilistic dependencies. Essentially,
it needs to syntactically capture that y is the result of
an attacker’s unknown computation, which depends on the
previous messages, e.g., in our example, y depends on r and sk.
The BC logic uses free function symbols atti that represent
unknown pieces of code, i.e., attacker computations that receive
as arguments the previous messages seen by the attacker.
The previous frame can now be expressed as:
enc(att0(), r, sk), enc(att1(enc(att0(), r, sk)), r
(cid:48)
, sk)
(2)
att0() representing the ﬁrst message (x) computed by the
attacker, when it does not have access to any information from
the protocol, and att1(enc(att0(), r, sk)) being its second
message (y), which is a function of the protocol’s ﬁrst output.
The term-based notation is more akin to a functional view:
one cannot use variables such as x to refer to previously com-
puted values. For this reason, att0() occurs twice in Eq. (2).
However, attacker computations such as att0 are probabilistic
algorithms, and hence two different invocations might yield
different results. This is not the intended interpretation, and it
therefore introduces a new requirement on terms: stability -
two occurrences of the same term must evaluate to the same
value. When one evaluates the value of the previous frame,
this implies that the two occurrences of att0() evaluate to
the same value. This requirement captures that within a single
protocol execution, identical terms refer to the same value and
not to separate (probabilistic) attacker calls.
3) Reasoning about terms: The BC logic contains in its syn-
tax a binary predicate ∼. This predicate expects two sequences
of terms and intuitively represents their indistinguishability.
Note that ∼ has low operator precedence, but we often add
parentheses for readability.
Example 2 (BC indistinguishability formula).
(cid:0)n(cid:48), if att0(n(cid:48)) .= n then ko else ok(cid:1) ∼(cid:0)n(cid:48), ok(cid:1)
(3)
The protocol modeled on the left-hand side produces a
fresh value n(cid:48), sends it, and then waits to receive another
value (represented by att0(n(cid:48))). If the received value is the
same as a freshly generated value n, the protocol outputs
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
3127
ko, otherwise ok. The formula expresses that the attacker
cannot distinguish this protocol from the protocol that sends
a fresh value n(cid:48), waits for an input, and then outputs ok.
Note that the if _ then _ else _ notation is syntactic sugar
for a ternary function symbol ite(_, _, _), with which one
models conditionals in BC. To give a ﬂavor of how proofs are
performed in the BC logic, we provide some rule examples
and prove that Eq. (3) holds in the logic.
Example 3 (Rules and proofs).
=IND
(t .= n) ∼ false
when n does not occur in t
φ ∼ false (u, v) ∼ w
IF-F
(u, if φ then s else v) ∼ w
REFL
u ∼ u
Logical rules are read bottom-up, where to prove the formula
on the bottom, one can prove the formulas on the top. Rule
=IND means that a term t that does not syntactically contain a
fresh value n cannot be equal to it, and IF-F tells us that if a
conditional is always false, we can only consider its negative
branch. The REFL rule encodes that ∼ is reﬂexive.
With those rules, we can prove the simple property in Eq. (3):
(cid:0)att0(n
(cid:0)n
(cid:48)
) .= n(cid:1) ∼ false
(cid:48)
(cid:48)
, if att0(n
=IND
) .= n then ko else ok(cid:1) ∼ (n
, ok) ∼ (n
(cid:48)
(cid:48)
(cid:48)
(n
, ok)
, ok)
REFL
IF-F
B. A faithful computational interpretation
We previously described the BC way to syntactically describe
the behaviour of a protocol interacting with an attacker. To
ultimately get to a logic that provides computational guarantees,
those syntactic terms must capture all the behaviours of the
protocol. To do so, BC provides a formal way to interpret
those terms, so that their possible evaluations match those of
the real protocol. Intuitively, given an attacker against the real
world protocol, and given the syntactic frame (e.g., Eq. (2)),
it should be possible to build a simulator producing the same
results as the protocol. If this is possible, then the frame does
indeed capture all the possible behaviours of the protocol, and
we can thus use it to reason about its security.
1) Interpreting terms: We now describe how BC interprets
a term, i.e., computes the probabilistic result of a term, while
satisfying both locality and stability. The interpretation has three
parameters: the security parameter η and two inﬁnite random
bitstrings ρs and ρr. The interpretation extracts the randomness
used in probabilistic protocol functions from ρs, and the
attacker randomness from ρr. By universally quantifying over
those parameters and the attacker computations, it captures all
the possible executions of a protocol.
The interpretation depends on a set of Polynomial Time
Turing Machines (PTTM) that compute the evaluation function
T of a term, i.e.,
• a machine Tn for n: outputs the value of a given fresh
value, depending on η and ρs, which may typically extract
a sequence of η bits from ρs;
Fig. 1. enc(att0(), r, sk)
Fig. 2. att0()
.
= att0()
• a machine Tf for f: computes the output of a public
function depending on its arguments;
• a machine Tatti
computation, depending on its arguments, η and ρr.
for atti: performs some attacker
To interpret a term, one can consider the term as a tree
of (sub)terms, and recursively call the corresponding Turing
machine from the leaves to the root. Going back to the term
enc(att0(), r, sk) occurring in Eq. (2), its possible values are
obtained by running the simulation described in Fig. 1.
By design, all Turing machines in the interpretation are
deterministic: the randomness is explicitly passed to capture
probabilistic behaviour (using ρs and ρr). This ensures that the
interpretation satisﬁes stability: two occurrences of att0() in
the term imply two computations of Tatt0 that deterministically
evaluate to the same value. For example, if we consider the
.= that models equality testing, the evaluation
function symbol
of Fig. 2 always returns true, which is the expected behaviour.
Note that Tatt0 and Tatt1 do not share any implicit state
and, more generally, nor would Tatti and Tatti+1. This may
seem counter-intuitive, as atti and atti+1 usually represent
two unknown computations of the same attacker A, that can
in practice maintain a state between successive calls. The
BC logic does not explicitly ensure this, but by modeling
conventions, we always give all the previous inputs of atti
also to atti+1. As a result, in the simulations one can make
Tatti+1 re-perform all the computations of Tatti to recompute
its state. Modelling each attacker call by a distinct machine is
a crucial design choice of the BC logic that ensures locality.
2) Protocol interactions: We now focus on protocol in-
teractions, as it will play an important role when moving
to the quantum setting. We informally describe an attacker
A in the real world as a sequence of unknown operations
{Ai}, that produces the message mi at step i, and implicitly
maintains a state φi between each computation. We can consider
a protocol P as a sequence of operations split by in (receive)
operations. The attacker’s operations interact with the protocol
sequence: a protocol operation P i typically uses out to send
messages, providing more knowledge to the attacker, which
can then use this knowledge to produce a message for P i+1.
E.g., considering Example 1, we deﬁne Tatt0 s.t. it simulates
A0 and returns m0, and Tatt1 s.t. on input u it ﬁrst simulates
A0 to get φ0, and then runs A1 on φ0 and u.
Still considering P from Example 1, with the corresponding
syntactic frame Eq. (2), we depict in Fig. 3 the simulation that
produces the same result as the real-world interaction.
C. Indistinguishability predicate and logical rules
Once equipped with an interpretation for terms, BC deﬁnes
the predicate ∼ that will return true over two sequence of terms
if the advantage of any ﬁnal distinguisher is negligible in η. As
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:34:09 UTC from IEEE Xplore.  Restrictions apply. 
4128
ext(n3),
sumption can be seen as a generic version that
is ag-
nostic about the implementation. Concretely, one can see