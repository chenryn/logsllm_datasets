scheme is secure against existential forgery if no adversary can
succeed in forging the signature of one message, not necessarily of
his choice. Further, the scheme is secure under a chosen-message
attack if the adversary is allowed to ask the signer to sign a number
of messages of the adversary’s choice. The choice of these messages
may depend on previously obtained signatures.
Parallel to CPA and CTA, we adapt the definition of existential
forgery for Clio, which we call leveraged forgery. Intuitively, it
should not be the case that a high integrity signature can be pro-
duced for a value when it is influenced by low integrity information.
We capture this intuition in the following theorem:
Theorem 5.4 (Leveraged Forgery). For a principal p and all
keystores P0, non-uniform ppts A, and labels l1, integers j, j′, where
ℓ = authorityOf(P0) and I(l1) ⊑I p, if Π is secure against existential
forgery under chosen-message attacks, then
(cid:20)
(cid:12)(cid:12)(cid:12)(cid:12) P′ ← Gen({p}, 1n ); P = P0 ⊎ P′;
‹b :l1› ∈ ValuesP (R′) and ‹b :l1› (cid:60) ValuesP (R)
Pr
t,S, A2 ← A(pub(P));
⟨c, (cid:146), V⟩ ← stepP
R ← (cid:146);
t′,S′ ← A2 (R);
⟨c′, (cid:146)′, V′⟩ ← stepP
R′ ← (cid:146)′
(cid:21)
ℓ (⟨Start(P), Clr(P) | t⟩,S, j);
ℓ (⟨Start(P0), Clr(P) | t′⟩,S′, j);
Intuitively, the game is structured as follows. First, an adversary
chooses a term t and strategy S that will be run with high integrity
(i.e., Start(P) where P has p’s authority). The adversary sees the
interactions R produced by the high integrity computation (which
in general will include high integrity signatures).
With that information, the adversary constructs a new term
t′ and new strategy S′ that will be run with low integrity (i.e.,
Start(P0)). Note that the strategy may internally encode high in-
tegrity signatures learned from the high integrity run that it can
place in the store.
The interactions produced by this low integrity computation
should not contain any high integrity signatures (i.e., are signed
by p). The adversary succeeds if it produces a new valid labeled
bitstring ‹b :l1› that did not exist in the first run. In the experiment,
the ValuesP metafunction extracts the set of valid labeled bitstrings
(i.e., can be deserialized correctly) using the parameterized keystore
P to perform the category key decryptions.
The proof of this theorem is in two parts. First we show that the
label of a value being stored by a computation is no more trustwor-
thy than the current label of computation. Second, we show that
the current label never becomes more trustworthy than the starting
label. This means that a low integrity execution (i.e., starting from
⟨Start(P0), Clr(P) | t⟩) cannot produce a high integrity value (i.e.,
a labeled value ‹b :l› such that I(l ) ⊑I p).
6 Clio in Practice
6.1 Implementation
We implemented a Clio prototype as a Haskell library, in the same
style as LIO. Building on the LIO code base, the Clio library has an
API for defining and running Clio programs embedded in Haskell.
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1903The library also implements a monitor that oversees the execution
of the program and orchestrates three interdependent tasks:
• Information-flow control Clio executes the usual LIO IFC
enforcement mechanism; in particular, it adjusts the current
label and clearance and checks that information flows according
to the DC labels lattice.
• External key-value store Clio handles all interactions with
the store, realized as an external Redis [29] database. This is
accomplished by using the hedis [44] Haskell library, which
implements a Redis client.
• Cryptography Clio takes care of managing and handling cryp-
tographic keys as well as invoking cryptographic operations
to protect the security of the principals’ data as it crosses the
system boundary into/back from the untrusted store. Instead of
implementing our own cryptographic primitives, we leverage
the third-party cryptonite [27] library.
Clio uses standard cryptographic schemes to protect the infor-
mation in the store. In particular, for efficiency reasons we use a
hybrid scheme that combines asymmetric cryptography with sym-
metric encryption. The category keys in the store are encrypted and
signed with asymmetric schemes, while the entries stored by Clio
programs are encrypted with symmetric encryption and signed
with an asymmetric signature scheme.
Asymmetric cryptography We use cryptonite’s implementation
of RSA, specifically OAEP mode for encryption/decryption and PSS
for signing/verification, both with 1024-bit keys and using SHA256
as a hash. We get around the message size limitation by chunking
the plaintext and encrypting the chunks separately.
Symmetric encryption We use cryptonite’s implementation of
AES, specifically AES256 in Counter (CTR) mode for symmetric
encryption. We use randomized initialization vectors for each en-
cryption. We can use AESNI if the architecture supports it.
Storing and retrieving category keys and labeled values are im-
plemented as discussed in Section 4.1. The technical report [59] has
more details.
Performance LIO-style enforcement mechanisms have performed
adequately in practice, c.f. Hails [23]. We do not expect combining
this with off-the-shelf crypto to introduce more than a constant
time overhead for fetching and writing into the store. The only ad-
ditional concern is the overhead of the category key management
protocol, which is proportional to the number of distinct categories
and their size. Based on the experience obtained by Jif [41], Fab-
ric [33], and Hails, categories are usually small in number and size.
Furthermore, creating category keys incurs a one-time cost which
can be amortized over multiple runs and programs
6.2 Case Study
We have implemented a simple case study to illustrate how our
prototype Clio implementation can be used to build an application.
In this case, we have built a system that models a tax preparation
tool and its interactions with a customer (the taxpayer) and the tax
reporting agency, communicating via a shared untrusted store. We
model these three components as principals C (the customer), P
(the preparer) and IRS (the tax reporting agency). The actions of
each of these three principals are modeled as separate Clio compu-
tations customerCode, preparerCode and irsCode, respectively.
We assume that the store level ℓ restricts writes to the store in
confidential contexts, i.e. ℓ = ⟨⊥,⊤, S⟩, where S is the principal run-
ning as the store. In this scenario, we consider that the principals
involved (C, P and IRS) trust each other and are trying to protect
their data from all other principals in the system (i.e., from S).
The customer C initially makes a record with his/her personal
information, including his/her name, social security number (SSN),
declared income and bank account details, modeled as the type
TaxpayerInfo. Figure 9 shows the customer code on the left, mod-
eled as a function that takes this record as an argument, tpi. The
first step is to label tpi with the label ⟨C ∨ P ∨ IRS, C, S⟩. The confi-
dentiality component is a disjunction of all the principals involved
in the interaction, reflecting the fact that the customer trusts both
the preparer and the IRS with their the data and expects them to
be able to read it. A more realistic example would also keep the
customer’s personal data confidential (i.e. not readable by the IRS
and to some extent by the preparer). However, expressing those
flows would require an IFC system with declassification, a feature
that we have not included in the current version of Clio since it
would introduce additional complexity in our model, and seman-
tic security conditions for such systems are still an active area of
research [4, 7, 13]. Without declassification, if IRS was not in the
label initially, the IFC mechanism would not allow us to release
this data (or anything derived from it) to the IRS at a later time.
The integrity component of this label is just C since this data can
be vouched for only by the customer at this point, while the avail-
ability is trusted since these values haven’t been exposed to (and
potentially corrupted by) the adversary in the store yet. The final
step of the customer is to store their labeled TaxpayerInfo at key
"taxpayer_info" for the preparer to see. Note that in practice this
operation creates a category key for C ∨ P ∨ IRS, stores it in the
database and uses it to encrypt the data, which gets signed by C.
The next step is to run the preparer code, shown in the middle
of Figure 9. The preparer starts by fetching the taxpayer data at
key "taxpayer_info", using a default empty record labeled with
l1 = ⟨P ∨ IRS, P ∨ C, S⟩. The entry in the database is labeled dif-
ferently with l2 = ⟨C ∨ P ∨ IRS, C, S⟩, but the operation succeeds
because l2 ⊑ l1 and the availability in l2 is S, i.e., it reflects the
fact that the adversary S might have corrupted this data. The code
then starts a toLabeled sub-computation to securely manipulate
the labeled taxpayer record without raising its current label. In the
subcomputation, we unlabel this labeled record and use function
prepareTaxes to prepare the tax return. Since we are only con-
cerned with the information-flow aspects of the example, we elide
the details of how this function works; our code includes a naive
implementation but it would be straightforward to extend it to
implement a real-world tax preparation operation. The toLabeled
block wraps the result in a labeled value r with label l1, the ar-
gument to toLabeled. Finally, the preparer stores the labeled tax
return r at key "tax_return". Note that this operation would fail
if we had not used toLabeled, since in that case the current label,
raised by the unlabel operation, would not flow to ℓ, the label of
the adversary.
Figure 9 shows the tax agency code on the right. This code
fetches the tax return made by the preparer and stored at key
"tax_return". Analogously to the preparer code, we use the de-
fault value of the fetch operation to specify the target label of the
Session I2:  Information FlowCCS’17, October 30-November 3, 2017, Dallas, TX, USA1904customerCode :: TaxpayerInfo → CLIO ()
customerCode tpi = do
info ← label ⟨C ∨ P ∨ IRS, C, S⟩ tpi
store "taxpayer_info" info
return ()
preparerCode :: CLIO ()
preparerCode = do
default ← label ⟨P ∨ IRS, P ∨ C, S⟩ notFound
info ← fetch τ "taxpayer_info" default
r ← toLabeled ⟨P ∨ IRS, P ∨ C, S⟩ $ do
i ← unlabel info
return (prepareTaxes i )
store "tax_return" r
irsCode :: CLIO Bool
irsCode = do
let l = ⟨IRS, P ∨ C ∨ IRS, S⟩
default ← label l emptyTR
lv ← fetch τ "tax_return" default
tr ← unlabel lv
return (verifyReturn tr)
Figure 9: Customer code (left), Preparer code (middle), and IRS code (right)
result, namely ⟨IRS, P ∨ C ∨ IRS, S⟩, which in this case is once again
more restrictive than what is stored in the database. Thereafter the
labeled tax return gets unlabeled and the information is audited in
function verifyReturn, which returns a boolean that represents
whether the declaration is correct. In a more realistic application,
this auditing would be performed inside a toLabeled block too, but
since we are not doing any further store operations we let the
current label get raised for simplicity.
These three pieces of code are put together in the main function
of the program, which we elide for brevity. This function simply
generates suitable keystores for the principals involved (using the
Clio library function initializeKeyMapIO) and then runs the
code for each principal using the evalCLIO function.
7 Related Work
Language-based approaches. Combining cryptography and IFC lan-
guages is not new. The Decentralized Label Model (DLM) [39] has
been extended with cryptographic operations [17, 22, 51, 56]. These
extensions, however, either use only symbolic models of cryptogra-
phy or provide no security properties for their system.
Models for secure declassification are an active area of research
in the IFC community (e.g., [8, 15, 40, 60]). It is less clear, though,
how such models compose with cryptographic attacker models.
Exploring the interactions between declassification and cryptogra-
phy is very interesting, but a rigorous treatment of it is beyond the
scope of this work.
Cryptographically-masked flows [5] account for covert infor-
mation-flow channels due to the cryptosystem (e.g., an observer
may distinguish different ciphertexts for the same message). How-
ever, this approach ignores the probability distributions for cipher-
texts, which might compromise security in some scenarios [36].
Laud [31] establishes conditions under which secure programs with
cryptographically-masked flows satisfy computational noninterfer-
ence [30]. Fournet and Rezk [21] describe a language that directly
embeds cryptographic primitives and provide a language-based
model of correctness, where cryptographic games are encoded in
the language itself so that security can range from symbolic cor-
rectness to computational noninterference.
Information-flow availability has not been extensively studied. Li
et al. [32] discuss the relationship between availability and integrity
and state a (termination- and progress-insensitive) noninterference
property for availability. Zheng and Myers [66] extend the DLM
with availability policies, which express which principals are trusted
to make data available. In their setting, availability is, in essence, the
integrity of progress [6]: low-integrity inputs should not affect the
availability of high-availability outputs. In our work, availability
tracks the successful verification of signatures and decryption of
ciphertexts, and has analogies with Zheng and Myers’ approach.
The problem of conducting proofs of trace-based properties of
languages with access to cryptographic operations in a computa-
tional setting has been studied before. CoSP [10] is a framework
for writing computational soundness proofs of symbolic models.
Their approach abstracts details such as message scheduling and
corruption models and allows for proofs of preservation of trace
properties to be developed in a modular fashion.
Cryptographic approaches. There is much work on how to map
principals and access policies to cryptographic keys. Attribute-
Based Encryption [12] could be used to protect the confidentiality
of data for categories and would avoid the need for category keys
when encrypting and decrypting. Ring signatures [45] could be used
to protect the integrity of data for categories and would similarly
avoid the need for category keys when signing and verifying. We
take the approach of using simpler cryptographic primitives as they
are more amenable to our proofs. Additionally, as a benefit of taking
a language-based approach, Clio’s ideal semantics is agnostic to
the choice of cryptosystem used. From a user’s perspective the
underlying cryptographic operations could be swapped out in favor
of more efficient cryptosystems without changing the semantics of