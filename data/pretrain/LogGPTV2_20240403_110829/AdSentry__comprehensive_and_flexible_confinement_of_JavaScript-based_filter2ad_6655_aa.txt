title:AdSentry: comprehensive and flexible confinement of JavaScript-based
advertisements
author:Xinshu Dong and
Minh Tran and
Zhenkai Liang and
Xuxian Jiang
AdSentry: Comprehensive and Flexible Conﬁnement of
JavaScript-based Advertisements
Xinshu Dong†, Minh Tran‡, Zhenkai Liang†, Xuxian Jiang‡
† Department of Computer Science
National University of Singapore
{xdong, liangzk}@comp.nus.edu.sg
‡ Department of Computer Science
North Carolina State University
{mqtran, xuxian_jiang}@ncsu.edu
malicious ads can further exploit software vulnerabilities in web
browsers to launch drive-by downloads and surreptitiously install
malware on users’ machines. A recent research shows that “about
1.3 million malicious ads are being viewed online everyday, most
pushing drive-by downloads and fake security software” [33].
ABSTRACT
Internet advertising is one of the most popular online business mod-
els. JavaScript-based advertisements (ads) are often directly em-
bedded in a web publisher’s page to display ads relevant to users
(e.g., by checking the user’s browser environment and page con-
tent). However, as third-party code, the ads pose a signiﬁcant threat
to user privacy. Worse, malicious ads can exploit browser vulner-
abilities to compromise users’ machines and install malware. To
protect users from these threats, we propose AdSentry, a compre-
hensive conﬁnement solution for JavaScript-based advertisements.
The crux of our approach is to use a shadow JavaScript engine to
sandbox untrusted ads. In addition, AdSentry enables ﬂexible reg-
ulation on ad script behaviors by completely mediating its access to
the web page (including its DOM) without limiting the JavaScript
functionality exposed to the ads. Our solution allows both web
publishers and end users to specify access control policies to con-
ﬁne ads’ behaviors. We have implemented a proof-of-concept pro-
totype of AdSentry that transparently supports the Mozilla Firefox
browser. Our experiments with a number of ads-related attacks suc-
cessfully demonstrate its practicality and effectiveness. The perfor-
mance measurement indicates that our system incurs a small per-
formance overhead.
1.
INTRODUCTION
Internet advertising is one of the most popular business mod-
els of today’s Internet companies. For example, more than 96%
of Google’s revenue is from Internet advertising [15]. In Internet
advertising, web site owners or web publishers include advertise-
ments (or “ads”) from advertisers in their pages, and get paid by
advertisers when users view and click on these ads.
To increase the likelihood for users to click on the ads, adver-
tisers commonly use (JavaScript) code in ads to check a user’s
browser environment to select advertisements that are believed to
be more attractive to the users. As third-party code, these ads unfor-
tunately pose great security threats to both web applications and the
underlying operating systems. For example, such ads require close
integration with the displayed page contents, which may leak users’
private data [28] and break web applications’ integrity. Worse,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’11 Dec. 5-9, 2011, Orlando, Florida USA
Copyright 2011 ACM 978-1-4503-0672-0/11/12 ...$10.00.
To mitigate the threats from untrusted ads, a number of solutions
have been recently proposed. They address the threats to user pri-
vacy and web application integrity by sandboxing JavaScript ads
through functionality restriction or isolation [2, 4, 10, 13, 17, 19, 23,
26,27,30,35,40,45,49]. However, they cannot block ads from trig-
gering drive-by downloads, which have been “persistently” plagu-
ing online users as one of the main attack mechanisms.
In ad-
dition, these solutions are not ﬂexible in controlling behaviors of
JavaScript advertisements: the allowed access of an ad must be de-
cided before it starts to run. In the face of these limitations, there is
a need for an integrated solution that can not only ﬂexibly regulate
the ad access to various web contents, but also effectively block
drive-by downloads from malicious ads.
In this paper, we present the design, implementation and eval-
uation of AdSentry, a comprehensive and ﬂexible isolation frame-
work to conﬁne JavaScript-based advertisements. Instead of sup-
porting only a subset of JavaScript functionality or isolating the
ad execution through signiﬁcant changes to web pages, AdSentry
provides a shadow JavaScript engine for untrusted ad execution.
The purpose of having a shadow JavaScript engine is to ensure that
the ad will not affect the host web content without proper control,
thus protecting user privacy and the integrity of web applications.
More importantly, it provides the control in a transparent manner
and still exposes the full spectrum of JavaScript functionality to the
untrusted ads. Meanwhile, to block possible drive-by downloads
and preserve the integrity of the host system, the shadow JavaScript
engine is strictly sandboxed.
By design, AdSentry effectively mediates all accesses made by
untrusted ads to the web application. We stress that the shadow
JavaScript engine (for the ad execution) by default cannot access
the original page DOM (Document Object Model). To accommo-
date legitimate accesses by ads to some part of the page content,
AdSentry transparently interposes related DOM accesses from the
ads. For every such access, AdSentry checks its legitimacy (ac-
cording to a given access control policy) and, if benign, redirects
it to the original page DOM to substantiate the access. Our frame-
work is ﬂexible in allowing both web publishers and end users to
specify or customize the access control policies for ads, as well as
allowing dynamically changing policy after an ad starts to execute.
We have implemented a proof-of-concept AdSentry prototype.
The shadow JavaScript engine implementation is based on the open-
source Mozilla SpiderMonkey. Its execution is strictly sandboxed
with Native Client [48], which has demonstrated its effectiveness
in conﬁning third-party code with high efﬁciency and reliability.
Our development experience further indicates that AdSentry is a
generic framework that can be conveniently implemented as a reg-
ular browser extension without requiring the modiﬁcation of the
browser code. Our evaluation results with a number of ad-related
exploits show that AdSentry is effective in successfully blocking
all of them. The performance evaluation shows that the protection
is achieved with a low overhead.
Contributions.
We identiﬁed the critical need for a conﬁnement solution to pre-
vent ads from threatening the privacy and integrity of user data as
well as the integrity of users’ computing systems. To summarize,
this paper makes the following contributions:
• AdSentry provides a comprehensive isolation framework to
conﬁne untrusted ads on web pages. Its comprehensiveness
is achieved by not only regulating the ad access to the orig-
inal web application (or web contents), but also effectively
conﬁning the ad execution in a strongly sandboxed environ-
ment to block possible drive-by downloads.
• Our solution preserves the original execution environment
for third-party scripts. Unless otherwise speciﬁed by access
control policies, AdSentry does not alter the execution order
of different scripts on the page even after certain ad scripts
are sandboxed by our solution. Sandboxed ads scripts also
have full access to global JavaScript objects created or over-
written by other scripts outside the sandbox, if allowed by
access control policies.
• Our solution allows for ﬂexible mediation of each DOM ac-
cess from untrusted ads. It is also ﬂexible in allowing both
web publishers and end users to specify access control poli-
cies for ads. We highlight that it is important to empower
users with full control as they can choose how to protect the
viewed web pages from ads (according to their own require-
ments and running environments) and remain conﬁdent in
protecting the integrity of their host systems.
• We have implemented a prototype that transparently supports
modern Mozilla Firefox browsers. Our prototyping and eval-
uation results with real-world examples demonstrate its prac-
ticality and effectiveness.
The rest of this paper is organized as follows: Section 2 pro-
vides an overview on Internet advertising. Sections 3 and 4 present
our system design and implementation. Section 5 presents detailed
evaluation results. Section 6 discusses limitations of our approach
and suggests future improvement. Finally, Section 7 describes re-
lated work, and Section 8 concludes the paper.
2. PROBLEM OVERVIEW
In Internet advertising, advertisers pay web publishers directly
to display their ads on these web sites, or more often, pay adver-
tising networks to get their ads displayed on popular sites, easily
reaching out to a large amount of audiences. Moreover, advertis-
ers usually allow web sites or advertising networks to dynamically
decide what kind of ads to display to their visitors, based on the
web contents users are viewing. This behavior is called “targeting”
of ads. It makes Internet advertising more relevant and presumably
more helpful to visitors. The proﬁt of web publishers hosting ads
can be calculated by different revenue models, including measuring
how many times the ads are displayed, how many visitors have seen
Figure 1: An architecture overview of AdSentry. The core com-
ponents of AdSentry are highlighted in the ﬁgure.
the ads, or how many times the ads have been clicked by visitors,
etc. [47]
Internet advertising brings in new challenges to web security and
privacy. One possible way for publishers to include advertisements
is to completely isolate them in separate iframes. However, such a
complete isolation makes advertisement targeting impossible. As a
result, third-party ads are often included in  elements,
so they have the same privilege as other JavaScript on the web page.
In this paper, we focus on such third-party JavaScript-based ad-
vertisements (ads) that are deployed on web pages. These ads are
hosted outside web publishers’ servers, but included as JavaScript
on the web pages. If some of them become malicious, they may
abuse their privileges in accessing web application data for various
purposes, such as leaking conﬁdential user information and issuing
unauthorized transactions. Moreover, they may exploit software
vulnerabilities in browsers to take over the users’ systems.
Our goal in this work is to comprehensively conﬁne these un-
trusted JavaScript ads and effectively protect users’ privacy and the
integrity of both web applications and the users’ computer systems.
3. SYSTEM DESIGN
To effectively conﬁne untrusted ads, we have four design goals,
i.e., comprehensiveness, ﬂexibility, transparency, and efﬁciency.
By comprehensiveness, we aim to provide an integrated scheme
that not only regulates ad access to the host web page, but also
contains malicious ads from launching drive-by downloads. The
ﬂexibility requirement allows both web publishers and end users
to specify access control policy for ads. Users can also dynam-
ically change access control decisions based on application run-
time states. The transparency goal requires no modiﬁcation to the
browser for the support and preserves the timing of the JavaScript
behaviors in the web applications. The transparency requirement
ensures that the current billing model of ads is not affected. Actu-
ally, it is a stronger requirement than simply requiring no changes
to ads billing. Also, the proposed solution needs to be efﬁcient in
introducing low performance or maintaining a similar level of user
experience.
Following these design goals, we have developed a novel ad
isolation framework called AdSentry, whose overall architecture
is shown in Figure 1.
In essence, AdSentry provides a shadow
JavaScript engine to conﬁne untrusted ads. This shadow JavaScript
engine by default has no direct access to the original browser envi-
Operating SystemPolicy EnforcerShadow JavaScriptEngine (with a virtual DOM)BrowserDOMWeb PageRegular JavaScriptUntrusted AdsJavaScriptEnginePage Agentronment and the operating system. Therefore, the ads can be fully
conﬁned, and the host web page and OS will remain intact even if
the ads are malicious. To meet the transparency requirement, the
shadow JavaScript engine can be seamlessly integrated into current
browsers through the standard browser’s extension application pro-
gramming interfaces (APIs), i.e., no browser modiﬁcation will be
necessary.
With the introduction of a shadow JavaScript engine, AdSentry
essentially works with two JavaScript engines: the untrusted ads
run inside the shadow engine while the rest (normal) JavaScript in
the web page runs as usual in the default engine. We point out that
an ad may have legitimate reasons to access certain web content
(e.g., for the purpose of advertisement targeting). To accommodate
these requests, AdSentry provides a virtualized DOM to the shadow
JavaScript engine. The virtual DOM has all the standard DOM
interfaces, including XMLHttpRequest, so page accesses made by
ads running in the shadow engine will be received by the virtual
DOM. When the virtual DOM is being accessed, it will relay the
access to the page agent in the browser through a policy enforcer.
The policy enforcer will decide whether a page access is allowed
by users’ security policies. If yes, the page agent proceeds with the
access request on behalf of the isolated ad, and returns the results
back to the isolated ad through the virtual DOM. If not, the access
will be blocked to protect the integrity of the web page.
Besides virtualizing the DOM access for untrusted ads, AdSen-
try also sandboxes the ad execution within the shadow engine, pre-
venting them from compromising users’ operating systems.
It is important to note that AdSentry is transparent to web pages
by automatically dispatching ads to the shadow engine and seam-
lessly supporting their accesses. As a result, the billing model of
ads is not affected. AdSentry preserves the original execution tim-
ings of all JavaScript in the web page, including ads scripts running
in the shadow JavaScript engine. This is a key advantage of Ad-
Sentry over iframe-base isolation techniques, such as AdJail. This
ensures that the behaviors of the applications and user experience
will not be altered unless for security concerns, making AdSentry
applicable to securing a wider class of untrusted JavaScript code in
web applications.
3.1 Shadow JavaScript Engine
By introducing a shadow JavaScript engine to host untrusted ads,
AdSentry allows us to achieve the comprehensiveness goal: re-
silience against exploits to browsers themselves and protection for
the conﬁdentiality and integrity of web application data. As men-
tioned earlier, the shadow JavaScript engine is executed inside a
Native Client (NaCl) [48] sandbox. There are two reasons why we
choose to build our system on top of NaCl. First, NaCl sandbox
has been shown to be secure against code injection attacks with mi-
nor performance overhead. Second, NaCl has been supported on a
number of platforms, such as x86, x86-64 and ARM [41], which
can be very helpful for adopting AdSentry by end users, especially
with the rising popularity of the Google Chrome browser and the
Chrome OS that ships NaCl as one built-in component.
Like the normal JavaScript engine in the current browser, the
shadow JavaScript engine is shared across web pages in the browser.
To distinguish different ads from different pages, each ad will be
assigned a unique identiﬁcation number. With that in place, when
an ad needs to be executed, AdSentry sends its JavaScript and the
ad’s identiﬁcation number to the shadow engine. To preserve the
original execution timing of the web page, the browser waits until
the ad’s JavaScript ﬁnishes in the shadow engine, in the same way
that the original browser JavaScript engine handles its execution.
Speciﬁcally, once the sandboxed JavaScript engine receives a
JavaScript to execute, it creates a new JavaScript context for the
ad with the associated identiﬁcation number. A virtualized DOM
will be initiated to contain a set of global objects, which are then
made accessible to the JavaScript context. The virtual DOM has all
standard DOM interfaces, but each interface is simply a stub that
forwards the access to it to the page agent in the browser. After
the initialization, the shadow JavaScript engine starts executing the
received JavaScript. If the script accesses a particular DOM inter-
face, the access is intercepted by the virtual DOM, which in turn
communicates with the page agent to handle the access request.
3.2 Page Agent
The intercepted DOM access requests from the virtual DOM are
forwarded to the page agent, which resides on the same page with
the web application. After the veriﬁcation from the policy enforcer,
the page agent will perform the requested DOM access on behalf
of the ad. If the request is to create or modify DOM element(s),
the page agent takes special care to capture all resulting JavaScript
executions and forwards them back to the shadow engine for pro-
cessing. For instance, when a user clicks on a button created by an
ad, the triggered onclick() function call will be captured and
executed in the shadow engine.
The communication between the virtual DOM and the page agent
is in the form of message passing. When the page agent receives a
message requesting a DOM access from the shadow JavaScript en-
gine, it extracts the access from the message, and processes it in the
context of the original web page. The page agent then sends the re-
sult back to the virtual DOM, and in turn, to the shadow JavaScript
engine, completing the access made by the conﬁned ad.
AdSentry also naturally regulates access to HTTP requests from
untrusted ads. Speciﬁcally, ads may initiate HTTP requests by ei-
ther generating new DOM elements (that have already been con-
trolled by the page agent), or by directly initiating XMLHttpRe-
quest. As XMLHttpRequest is not part of the JavaScript engine,
but is provided by the virtual DOM, the invocation to XMLHttpRe-
quest is also regulated by our system.
In order to ensure that the relayed DOM access is transparent to