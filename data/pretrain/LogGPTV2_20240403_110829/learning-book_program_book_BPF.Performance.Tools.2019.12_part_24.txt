us tack
string
User-level stack trace
arg0,
Nb.xe
integer
Arguments to some probe types (see Section 5.9)
args
struct
Arguments to some probe types (see Section 5.9)
re tva1
integer
Return value for some probe types (see Section 5.9)
func
string
Name of the traced function
probe
string
Full name of the current probe
curtask
integer
Kernel task_struct as a unsigned 64-bit integer (can be
(1se)
cgroup
integer
Cgroup ID
$1,
SN
int, char *
Positional param
---
## Page 194
5.12 bpftrace Variables
157
All integers are currently uint64. These variables all refer to the currently running thread, probe
function, and CPU when the probe fires. See the online *bpftrace Reference Guide” for the full
and updated list of built-in variables [66].
5.12.2 Built-ins: pid, comm, and uid
Many built-ins are straightforward to use. This example uses pid, comm, and uid to print who is
calling the setuid() syscall:
printf (*setuid by PID td (ts) , UID td\n*, pid, comm, uid) : 1'
Attaching l pzobe...
setuid by PI0 3907 (sudo), 0I0 1000
setuid by PID 14593 (ev11),。 UID 33
C
Just because a syscall was called doesn’t mean it was successful. You can trace the return value by
using a different tracepoint:
printf("setuid by 3s returned d\n", conm, args->ret) : }'
Attaching l probe...
setuid by sudo returned 0
[- peuanqex Ttne .q prnqes
This uses another built-in, args. For tracepoints, args is a struct type that provides custom fields.
5.12.3 Built-ins:kstack and ustack
kstack and ustack return kernel- and user-level stack traces as a multi-line string. They return up
to 127 frames of stack trace. The kstack( and ustack() functions, covered later, allow you to select
the number of frames.
For example, printing kernel stack traces on block I/O insert using kstack:
+ bpftrace -e *t:block:block_rg_insert ( printf("slock I/o by sn*, kstack) : )′
Attaching l probe..*
B1ock 1/0 by
blk_nq_insert_requests+203
b1k_nq_sched_insert_requests+111
b1k_nq_flush_plug_list+446
+dnq
b1k_finish_plug+44
dncxypt_vx1te+593
---
## Page 195
158
8Chapter 5 bpftrace
kthread+289
ret_fron_fork+53
B1ock 1/0 by
blk_nq_insert_requests+203
b1k_nq_sched_insert_requesta+111
blk_nq_flush_plug_list+446
+sds
blk_fini.sh_plug+44
_do_page_cache_readabead+474
ondenand_readahead+282
page_cache_sync_readahead+46
generie_file_resd_iter+2043
ext4_flle_read_itez+86
27+x"ou/xu
_vfs_read+41
vfs_read+142
keznel_read+49
prepare_binprm+239
do_execveat_conmon, 1sra 34+142B
ays_execve+49
do_aysca11_64+115
entry_SYscALl_64_sf tet_hxfrane+61
[..-]
Each stack trace is printed with frames in child-to-parent order and with each frame as the
function name + function offset,
The stack built-ins can also be used as keys in maps, alowing them to be frequency counted.
For example, counting kernel stacks that led to block I/O:
(: (/qun0o =[xoesx]e 1 42esuybaxao[q:xpo[q:2, - 0oexdq +
Attaching l pzobe...
[.--]
9[
b1k_nq_1nsert_reques ts+203
blk_nq_sched_insert_request.s+111
blk_nq_flush_plug_1ist+446
blk_flush_plug_list+234
blk_fin1sh_plug+44
E6S+94a3ou
kthzead+289
ret_fron_fork+53
1 : 39
---
## Page 196
5.12 bpftrace Variables
159
blk_nq_sched_insert_request.s+111
blk_nq_flush_plug_list+446
+dqn
b1k_fin1sh_plug+44
_do_page_cache_readahead+474
ondenand_readahead+282
page_cacbe_sync_reedahead+46
genexic_file_read_iter+2043
ext4_file_read_iter+86
BZz+pexuneu
_vfs_read+41
vfs_read+142
Bys_read+85
do_sysca11_64+115
entry_SYscALL_64_after_hvframe+61
Zs :[
Only the last two stacks are shown here, with counts of 39 and 52. Counting is more efficient
than printing out each stack, as the stack traces are counted in kernel context for eficiency.a
5.12.4Built-ins:Positional Parameters
Positional parameters are passed to the program on the command line, and are based on
ptre *puooas at zs 'uatun8ie sag a oq sapau Is Btudsos aqs u pasn siaqaureued euoisod
s0 on.
For example, the simple program watchconn.bt:
BEGIN
printf (*Watching connect() calls by PIo ld’.n*, $1)=
tracepoint:aysca1ls:ays_enter_connect
/pid == $1/
printf (*PIo d ca1led connectI)o*, $11
counts and then fetches the stacks for esch ID.
---
## Page 197
160
 Chapter 5 bpftrace
watches the PID passed in on the command line:
-/watchconn .bt 181
Attach.ing 2 probes...
[BT 0Id Aq stTeo ()oeouoo 6utuoae)
PID 181 called connect()
[..-]
These positional parameters also work with these invocation types:
bpftzace -/watchconn,bt 181
bpftrace -e *progran′ 181
They are integers by default. If a string is used as an argument, it must be accessed via a str() call.
For example:
 bpftrace -e 'BEGIN ( printE("Bel1o, 4s!\n*, str($1)) : 1′ Reader
Attaching 1 probe...
Hello, Reader!
** if accessed via str().
If a parameter that is accessed is not provided at the command line, it is zero in integer context, or
5.12.5
Scratch
Format:
$nane
These variables can be used for temporary calculations within an action clause. Their type is
determined on first assignment, and they can be integers, strings, struct pointers, or structs.
5.12.6 Maps
Format:
enane
phane[ke4y]
ename [key1,key2 [,..-]]
For storage, these variables use the BPF map object, which is a hash table (associative array) that
can be used for different storage types. Values can be stored using one or more keys. Maps must
have consistent key and value types.
---
## Page 198
5.13 bpftrace Functions
161
As with scratch variables, the type is determined upon first assignment, which includes
assignment to special functions. With maps, the type includes the keys, if present, as well as the
value. For example, consider these first assignments:
pstart = nsecsj
Isoasu = [pT]e[θ
@bytes = hist (xetva1) :
xho [pid, conm] = count (1 
Both the @start and @Mlast maps become integer types because an integer is assigned to them: the
nanosecond timestamp built-in (nsecs). The @last map also requires a key of type integer because
it uses an integer key: the thread ID (tid). The @bytes map becomes a special type, a power-of-two
seq deu om@ aug eu uesosu au jo Suud aug pue alenos sapueq uoqa uresos
two keys, integer (pid) and string (comm), and the value is the count() map function.
These functions are covered in Section 5.14.
5.13
bpftraceFunctions
bpftrace provides built-in functions for various tasks. The most important of them are listed in
Table 5-6.
Table 5-6bpftrace Selected Built-in Functions
Function
Description
printf (char *fmt [ ---1)
Prints formatted
time (char *fmt)
Prints formatted time
join (char *azr[1}
Prints the array of strings, joined by a spece character
str(char *s [, int len])
Retums the string from the pointer s, with an optional
length limit
kstack (int limit)
Retums a kemel stack up to limit frames deep
ustack (int limit)
Retums a user stack up to limit frames deep
ksym (vo.id *p)
Resolves the kemel address and returns the string symbol
usym (vo.id *p)
Resolves the user-space address and returms the string
symbol
kaddr (char *nane)
Resolves the kemel symbol name to an address
uaddr (char *nane)
Resolves the user-space symbol name to an address
(eweu, xeuo) b8x
Retums the value stored in the named register
ntop ([int af,] Lnt addz)
Returms a string representation of an IP address
systen (char *fmt [
- - - 1)
Executes a shell command
cat (char *f1lenane)
Prints the contents of a file
ex1t ()
Exits bpftrace
---
## Page 199
162
2 Chapter 5 bpftrace
Some of these functions are asynchronous: The kernel queues the event, and a short time later
it is processed in user space. The asynchronous functions are printf0), time(), cat0, join(), and
system(). kstack(), ustack(), ksym(), and usym() record addreses synchronously, but they do
Kjsnouonupuise uoge[suen joquAs
See the online *bpftrace Reference Guide* for the full and updated list of functions [66].
A selection of these functions are discussed in the following sections.
5.13.1 printf()
The printf() call,short for print formatted, behaves as it does in C and other languages. Syntax:
pzintf (format [, argunent. -.-])
, qm Suut8aq saouanbas adeosa se am se aessau pxa Aue uequoo ue Sus euog a1
and field descriptions beginning with *%. If no arguments are given, no field descriptions are
required.
:aue saouanbas adeosa pasn squotuuo
n: New line
aqonb aqno( :
•\\: Backslash
See the printf(1) man page for other escape sequences.
Field descriptions begin with *%, and have the format:
s [-] vidth type
The '' sets the output to be left-justified. The default is right-justified.
The width is the number of characters that the field is wide.
The type is either:
 %u, %d: Unsigned int, int
● %lu, %ld: Unsigned long, long
 %llu, %lld: Unsigned long long, long long
• %hu, %hd: Unsigned short, short
 %x, %lx, %llx: Hexadecimal: unsigned int, unsigned long, unsigned long long
*%c: Character
• %s: String
This printf() call:
p1ntf ("s16s 46dn*, conn, pid)
---
## Page 200
5.13 bpftrace Functions
163
prints the comm built-in as a 16-character-wide string field, right-justified, and the pid built-in as
a six-character-wide integer field, left-justified, followed by a new line.
5.13.2join0
join() is a special function for joining an array of strings with a space character and printing them
ouf. Syntax:
([]xe，eq) uo[
For example, this one-liner shows attempted execution of commands with their arguments:
（ : (Abaeret value show whether the syscall
succeeded.
join() may be a handy function in some circumstances, but it has limitations on the number of
arguments it can join, and their sze. If the output appears truncated, it islikely that youhave hit
these limits and need to use a different approach.
There has been work to change the behavior of join() to make it return a string rather than print
one out. This would change the previous bpftrace one-liner to be:
printE ("is\n*, Join (args>argv) : 1 '
This change would also make join() no longer be an asynchronous function."*
5.13.3str0)
str() returns the string from a pointer (char *). Syntax:
str (char *s [。 int length])
NULL or hits the 16-argument limit
10 See bpfrace ssue 26 for the status of this change [67]. It has not been a priorty to do, since so far join[ has onl]
had one use case: joining args->argv for the execve syscal tracepoint
---
## Page 201
164
Chapter 5 bpftrace
For example, the return value from the bash(1) shell readline() function is a string and can be
printed using:
+ bpftrace -e 'ur:/bin/bash:readline ( printf (*&s\n", str (zetval)): }*
Attaching 1 pzobe.
1s -1h
date
echo hello BPF
"C
This one-liner can show all bash interactive commands system-wide.
By default, the string has a size limit of 64 bytes, which can be tuned using the bpftrace
environment variable BPFTRACE_STRLEN. Sizes over 200 bytes are not currently allowed; this is a
known limitation, and one day the limit may be greatly increased.12
5.13.4kstack() and ustack()
kstack() and ustack() are similar to the kstack and ustack built-ins, but they accept a limit
:xequis quaun8ie apou peuopdo ue pue quaun1e
kstack (linit)
kstack [mcde [, 1init])
ustack (linit)
ustack (sode[, linit])
block:block_rq_insert tracepoint:
For example, showing the top three kernel frames that led to creating block I/O, by tracing the
+ bpftrace -e 't:block:block_rq_insert { [kstack(3) , comm] = count() : }'
Attaching 1 pzobe...
C
]e
TEZ+1ronbex"ppe"nte
09T+oubanaxa
b1k_execute_rq+80
kvorker/u16:3|: 2
1é
blk_nq_insert_requests+203
b1k_nq_sched_1nsert_request.s+111
blk_nq_flush_plug_list+446
11 This assumes that readine( is in the bash(1) binary: some builds of bssh(1) may callit from libreadine instead
and this one-iner will need to be modifed to match. See Section 1.2.2.3 in Chspter 12.
12 This is tracked by bpftrace issue 305 [68]. The problem is that string storage cumently uses the BPF stack, which is
limited to 512 bytes and henoe has a low string limit (200 bytes), Sering stornge should be changed to use a BPF map,
alqssod aq pnoys (sapfan) saups alle; Aan vuod uprum je
---
## Page 202
5.13 bpftrace Functions  165
 nysq]d] : 2
blk_nq_insert_requests+203
blk_nq_sched_insert_request.s+111
blk_nq_flush_plug_list+446
dhcxypt_xx1te| : 961
The current maximum stack size allowed is 1024 frames.
The mode argument allows the stack output to be formatted differently. Only two modes are
o reus eug goes e sanpod qum ad, pue eap auaoedq pauoddns uam
that of the Linux perf(1) utility. For example:
+ bpftrace -e *k:do_nanosleep ( printf ("es", ustack (perf)) : }′
Attaching l pzobe...
[+ - - ]
7E220f1f2c60 nanos1eep+64 (/11b/x86_6411nux=gnu/11bpthzead2,2T,so)
7f220f653fd q_timeout_add_ful1+77 1/usr/1ib/x86_641inux-gnu/libglib-
2,0.s0.0.5600.3)
7f220f64fbe0 x7f22064fbc0function] = count () : 1*
Attaching 1 probe...
[1169374160]: 3
[1168782560]: 8
e[1167295376] : 9
[1067171840] : 145
e[-1169062880] : 200
[1169114960] : 2517
L228 +[+828+0691t16
---
## Page 203
166
Chapter 5 bpftrace