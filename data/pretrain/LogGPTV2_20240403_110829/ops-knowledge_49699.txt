User: When a process in the system exceeds a specific CPU and memory threshold, please provide a set of process monitoring and alarm solutions for the Ubuntu system.
Assistant: The following is a set of process monitoring and alarm solutions for Ubuntu systems: 1. Install and configure monitoring tools We can use the following two commonly used monitoring tools: - htop: a command line program similar to top, which can monitor CPU and memory in real time Usage. - nagios: A professional monitoring tool that sets alerts and records historical data. First, install htop and nagios with the following commands: ``` sudo apt-get install htop nagios3 nagios-nrpe-plugin ``` When the installation is complete, configure nagios and set alert thresholds. You can complete this step by referring to the instructions in the nagios documentation. 2. Setup Script Create a Python script to monitor specific processes and resource usage. Here is a simple script example: ```python #!/usr/bin/env python import psutil import sys # configure threshold CPU_THRESHOLD = 80 MEM_THRESHOLD = 80 # get process ID pids = psutil.pids() for pid in pids: p = psutil.Process(pid) if p.name() == "process_name": cpu_percent = p.cpu_percent(interval=1) rss, vms = p.memory_info() mem_percent = rss / float(psutil.virtual_memory() .total) * 100 if cpu_percent > CPU_THRESHOLD or mem_percent > MEM_THRESHOLD: print("CPU: {}%, MEM: {}%, Process:{} (pid {})".format(cpu_percent, mem_percent, p.name( ), pid)) sys.exit(1) sys.exit(0) ``` This script will check the CPU and memory usage of a specific process, and will generate an alert when the set threshold is exceeded. In the script, the two variables CPU_THRESHOLD and MEM_THRESHOLD need to be updated to set the corresponding thresholds, and process_name needs to be replaced with the name of the process to be monitored. 3. Set up cronjob Now, a scheduled task will be set up to run the Python script. Edit the cronjob with the following command: ``` crontab -e ``` Add the following line at the end of the file: ``` * * * * * /usr/bin/python /path/to/script.py 2>&1 >> / path/to/output.log ``` This line will run the script every minute and output to the specified log file. The frequency of scheduled tasks can be adjusted according to demand. 4. Set the alarm Through the above steps, the system will generate an alarm according to the resource usage of the real-time process. We can use nagios to monitor this alert and send email notifications. It is necessary to configure the nagios alarm plug-in local proxy (nagios-nrpe-plugin) and email notification settings (nagios3). These steps can be set by referring to the nagios documentation. The above is a set of process monitoring and alarm solutions for Ubuntu systems.