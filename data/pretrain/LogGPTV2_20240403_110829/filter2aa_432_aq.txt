在程序中我们首先使用 ftok 函数产生关键字，再调用我们的封装函数 open_queue()得
到消息队列的标识符。最后再用 send_message()函数将消息发送到消息队列中。
3．msgrcv()
和 msgsnd()函数对应，msgrcv()函数被用来从消息队列中取出消息。它在 linux/msg.h
中的定义是这样的：
系统调用：
msgrcv()
函数声明：
int msgrcv ( int msqid, struct msgbuf *msgp, int msgsz, long
mtype,
          int msgflg )
返回值：
Number of bytes copied into message buffer
-1 on error: errno = E2BIG  (Message length is greater than
msgsz,
                        no MSG_NOERROR)
                EACCES (No read permission)
                EFAULT (Address pointed to by msgp is
invalid)
                EIDRM 
(Queue 
was 
removed 
during
retrieval)
                EINTR  (Interrupted by arriving signal)
                EINVAL (msgqid invalid, or msgsz less than 0)
                ENOMSG (IPC_NOWAIT asserted, and no
message
                           exists in the queue to satisfy the
request)
函数的前三个参数和 msgsnd()函数中对应的参数的含义是相同的。第四个参数 mtype
- 92 -
Linux网络编程
指定了函数从队列中所取的消息的类型。函数将从队列中搜索类型与之匹配的消息并将之
返回。不过这里有一个例外。如果 mtype 的值是零的话，函数将不做类型检查而自动返回
队列中的最旧的消息。
第五个参数依然是是控制函数行为的标志，取值可以是：
0,表示忽略；
IPC_NOWAIT，如果消息队列为空，则返回一个 ENOMSG，并将控制权交回调用函数
的进程。如果不指定这个参数，那么进程将被阻塞直到函数可以从队列中得到符合条件的
消息为止。如果一个 client 正在等待消息的时候队列被删除，EIDRM 就会被返回。如果进
程在阻塞等待过程中收到了系统的中断信号，EINTR 就会被返回。
MSG_NOERROR，如果函数取得的消息长度大于 msgsz，将只返回 msgsz 长度的信息，
剩下的部分被丢弃了。如果不指定这个参数，E2BIG 将被返回，而消息则留在队列中不被
取出。
当消息从队列内取出后，相应的消息就从队列中删除了。
和上节一样，我们将开发一个 msgrcv()的封装函数 read_message()：
int read_message( int qid, long type, struct mymsgbuf *qbuf )
{
        int     result, length;
        /* The length is essentially the size of the structure minus sizeof(mtype) */
        length = sizeof(struct mymsgbuf) - sizeof(long);
        if((result = msgrcv( qid, qbuf, length, type,  0)) == -1)
        {
                return(-1);
        }
        return(result);
}
利用上面提到的 msgrcv()对消息长度的处理，我们可以使用下面的方法来检查队列内
是存在符合条件的信息：
int peek_message( int qid, long type )
{
        int     result, length;
        if((result = msgrcv( qid, NULL, 0, type,  IPC_NOWAIT)) == -1)
        {
                if(errno == E2BIG)
                        return(TRUE);
        }
        return(FALSE);
}
这里我们将 msgp 和 msgsz 分别设为 NULL 和零。然后检查函数的返回值，如果是 E2BIG
则说明存在符合指定类型的消息。一个要注意的地方是 IPC_NOWAIT 的使用，它防止了阻
第四章  进程间通信
- 93 -
塞的发生。
4．msgctl()
通过 msgctl()函数，我们可以直接控制消息队列的行为。它在系统库 linux/msg.h 中的
定义是这样的：
系统调用：
msgctl()
函数声明：
int msgctl ( int msgqid, int cmd, struct msqid_ds *buf )
返回值：
0 on success
-1 on error: errno = EACCES (No read permission and cmd is IPC_STAT)
                EFAULT (Address pointed to by buf is invalid with
                        IPC_SET and IPC_STAT commands)
                EIDRM  (Queue was removed during retrieval)
                EINVAL (msgqid invalid, or msgsz less than 0)
                EPERM (IPC_SET or IPC_RMID command was
                        issued, but calling process does not have
                        write (alter) access to the queue)
函数的第一个参数 msgqid 是消息队列对象的标识符。
第二个参数是函数要对消息队列进行的操作，它可以是：
IPC_STAT
取出系统保存的消息队列的 msqid_ds 数据，并将其存入参数 buf 指向的 msqid_ds 结构
中。
IPC_SET
设定消息队列的 msqid_ds 数据中的 msg_perm 成员。设定的值由 buf 指向的 msqid_ds
结构给出。
IPC_EMID
将队列从系统内核中删除。
这三个命令的功能都是明显的，所以就不多解释了。唯一需要强调的是在 IPC_STAT
命令中队列的 msqid_ds 数据中唯一能被设定的只有 msg_perm 成员，其是 ipc_perm 类型的
数据。而 ipc_perm 中能被修改的只有 mode,pid 和 uid 成员。其他的都是只能由系统来设定
的。
最后我们将使用 msgctl()函数来开发几个封装函数作为本节的例子：
IPC_STAT 的例子：
int get_queue_ds( int qid, struct msgqid_ds *qbuf )
{
        if( msgctl( qid, IPC_STAT, qbuf) == -1)
        {
                return(-1);
        }
        return(0);
}
IPC_SET 的例子：
int change_queue_mode( int qid, char *mode )
{
        struct msqid_ds tmpbuf;
        /* Retrieve a current copy of the internal data structure */
        get_queue_ds( qid, &tmpbuf);
- 94 -
Linux网络编程
        /* Change the permissions using an old trick */
        sscanf(mode, "%ho", &tmpbuf.msg_perm.mode);
        /* Update the internal data structure */
        if( msgctl( qid, IPC_SET, &tmpbuf) == -1)
        {
                return(-1);
        }
        return(0);
}
IPC_RMID 的例子：
int remove_queue( int qid )
{
        if( msgctl( qid, IPC_RMID, 0) == -1)
        {
                return(-1);
        }
        return(0);
}
4.7.3  消息队列实例——msgtool，一个交互式的消息队列使用工具
没有人能够拒绝现成的准确技术信息所提供的迅捷与方便。这些材料为我们学习和探
索新的领域提供了了非常好的机制。同样，将技术信息应用于现实的领域中也能大大的加
快我们学习的过程。
直到目前，我们所接触的有关消息队列的实例只有几个简单的封装函数。虽然它们也
很有用，但是还不够深入。因此，我们下面将提供一个将消息队列应用于实际的例子——
命令行程序 msgtool。使用它我们可以在命令行上提供消息队列的功能。
1．背景知识
msgtool 工具通过命令行参数来决定它的行为，这样它可以被方便的应用于 shell 脚本
中。msgtool 提供了和消息队列有关的全部功能，包括创建、删除、更改消息队列以及收发
消息等。不过，我们提供的这个版本只接收字符数组类型的数据，接收其它类型数据的功
能请读者自行完成。
2．msgtool 的命令行语法
发送消息：
msgtool s (type) "text"
取得消息：
msgtool r (type)
修改权限：
msgtool m (mode)
删除消息队列：
msgtool d
3．msgtool 使用的例子
第四章  进程间通信
- 95 -
msgtool  s   1 test
msgtool  s   5 test
msgtool  s   1 "This is a test"
msgtool  r   1
msgtool  d
msgtool  m   660
4．msgtool 的源码
下面是 msgtool 程序的源码。它必须在一个支持 System V IPC 的 Linux 内核上编译。
请在编译前确认您所使用的内核在编译时打开了“ 支持 System V IPC” 选项。
顺便说一句，msgtool 在执行任何命令时，只要消息队列不存在，它就自动创建一个。
注意：由于在 msgtool 中使用 ftok()来创建关键字，所以如果你在执行 msgtool 的 shell
脚本中改变了工作目录，msgtool 有可能不会工作。这个问题请读者自行解决。
#include 
#include 
#include 
#include 
#include 
#include 
#define MAX_SEND_SIZE 80
struct mymsgbuf {
        long mtype;
        char mtext[MAX_SEND_SIZE];
};
void send_message(int qid, struct mymsgbuf *qbuf, long type, char *text);
void read_message(int qid, struct mymsgbuf *qbuf, long type);
void remove_queue(int qid);
void change_queue_mode(int qid, char *mode);
void usage(void);
int main(int argc, char *argv[])
{
        key_t key;
        int   msgqueue_id;
        struct mymsgbuf qbuf;
        if(argc == 1)
                usage();
        /* Create unique key via call to ftok() */
        key = ftok(".", 'm');
- 96 -
Linux网络编程
        /* Open the queue - create if necessary */
        if((msgqueue_id = msgget(key, IPC_CREAT|0660)) == -1) {
                perror("msgget");
                exit(1);
        }
        switch(tolower(argv[1][0]))
        {
                case 's': send_message(msgqueue_id, (struct mymsgbuf *)&qbuf,
                                       atol(argv[2]), argv[3]);
                          break;
                case 'r': read_message(msgqueue_id, &qbuf, atol(argv[2]));
                          break;
                case 'd': remove_queue(msgqueue_id);
                          break;
                case 'm': change_queue_mode(msgqueue_id, argv[2]);
                          break;
                 default: usage();
        }
        return(0);
}
void send_message(int qid, struct mymsgbuf *qbuf, long type, char *text)
{
        /* Send a message to the queue */
        printf("Sending a message ...\n");
        qbuf->mtype = type;
        strcpy(qbuf->mtext, text);
        if((msgsnd(qid, (struct msgbuf *)qbuf,
                strlen(qbuf->mtext)+1, 0)) ==-1)
        {
                perror("msgsnd");
                exit(1);
        }
}
void read_message(int qid, struct mymsgbuf *qbuf, long type)
{
        /* Read a message from the queue */
        printf("Reading a message ...\n");
        qbuf->mtype = type;
        msgrcv(qid, (struct msgbuf *)qbuf, MAX_SEND_SIZE, type, 0);
第四章  进程间通信
- 97 -