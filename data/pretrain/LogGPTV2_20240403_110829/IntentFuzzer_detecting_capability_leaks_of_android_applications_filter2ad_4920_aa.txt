title:IntentFuzzer: detecting capability leaks of android applications
author:Kun Yang and
Jianwei Zhuge and
Yongke Wang and
Lujue Zhou and
Hai-Xin Duan
IntentFuzzer: Detecting Capability Leaks of Android
Applications
Kun Yang1,3, Jianwei Zhuge2,3, Yongke Wang4, Lujue Zhou2, and Haixin Duan2,3
1Department of Computer Science and Technology, Tsinghua University
2Institute for Network Science and Cyberspace, Tsinghua University
3Tsinghua National Laboratory for Information Science and Technology
4Institute of Information Engineering, Chinese Academy of Sciences
ABSTRACT
Capability leak is a vulnerability in Android applications,
which violates the enforcement of permission model and
threatens the secure usage of Android phone users. Mali-
cious applications can launch permission escalation attacks
with this vulnerability. In this paper, we propose a dynamic
Intent fuzzing mechanism to uncover vulnerable applications
in both Android markets and closed source ROMs. We built
a prototype called IntentFuzzer. With it, we analyzed more
than 2000 Android applications in Google Play and hun-
dreds of in-rom applications inside two closed source ROMs.
We found that 161 applications in Google Play have at least
one permission leak, and 26 permissions in Xiaomi Hongmi
phone and 19 permissions in Lenovo K860i stock phone are
leaked. Finally, we give several cases of exploitation to verify
our analysis result.
Categories and Subject Descriptors
D.2.4 [Software Engineering]: Software/Program Veri(cid:12)-
cation; D.2.5 [Software Engineering]: Testing and De-
bugging
General Terms
Security, Design, Experimentation
Keywords
Smartphone Security, Intent Fuzzing, Capability Leak
1.
INTRODUCTION
Android smartphones market share has exploded in re-
cent years. Compared with traditional PC, smartphones are
much closer to users. Considering the sensors such as cam-
eras and voice recorder integrated into mobile devices, it’s
necessary to protect these usage of the sensors. Moreover,
smartphones have become the main way to store and handle
private data, including SMS messages, call logs, contact in-
formation and photos, which are imperative to be protected.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’14, June 4–6, 2014, Kyoto, Japan.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2800-5/14/06 ...$15.00.
http://dx.doi.org/10.1145/2590296.2590316 .
Permission model is essential in the design of Android se-
curity. In this model, sensitive resources are protected by
permissions that other applications don’t have. However,
because of the existence of vulnerable applications, it is pos-
sible for attackers to break through such permission model.
Capability leak is such a vulnerability that an application
exposes some permissions, by which other applications with-
out these permissions can access protected resources.
Several static analysis systems have already been built to
detect capability leaks in applications [7, 6, 10, 5]. Droid-
Checker [5] has found 6 vulnerable apps including Adobe
Photoshop Express 1.3.1. Woodpecker[10] detected 11 per-
missions are leaked in 8 stock phones from world’s leading
manufacturers. These tools are eﬀective, but they may all
have false positive, and should manually verify how to trig-
ger permission leaks.
To precisely uncover capability leaks in millions of appli-
cations automatically, we used an old technique - fuzzing
in this new situation. By sending testing Intents to vari-
ous exposed interfaces, we can detect if any capability leaks
happen. Compared with static methods, our method has
an advantage in precision. While static analysis only sees
the possible calling connections between function calls, dy-
namic fuzzing can detect permission leaks that really hap-
pen, which can be recorded and used to reconstruct all the
scenes.
We developed a prototype called IntentFuzzer, and used it
to analyze over 2,000 popular applications in Google Play.
Our result shows that 161 applications have at least one
permission leak. We also apply IntentFuzzer to closed source
ROMs that customized by various vendors, and found that
26 permissions in Xiaomi Hongmi phone and 19 permissions
in Lenovo K860i are leaked.
The rest of paper is organized as follows: Section 2 brie(cid:13)y
introduces background knowledge of Android permission mo-
del and Inter Component Communication mechanism. Sec-
tion 3 and Section 4 describe our system design and im-
plementation respectively. Section 5 presents the detailed
evaluation results from our study. Section 6 discusses lim-
itations and future work. Section 7 describes related work
and Section 8 summarizes our conclusions.
2. BACKGROUND
2.1 Permission Model
To mitigate security threat related to personal privacy,
Google has designed a permission-based model. Android
application is prohibited from accessing dangerous permis-
531ning in Android system, taking charge of sending real In-
tents to the application components to be diagnosed. Sev-
eral modules in Android system are modi(cid:12)ed in order to
generate feedbacks for the Console. With these feedbacks,
Console will amend the Intent for deeper execution path of
the receiving components, and decide if any potential per-
mission leak has actually happened.
We will discuss the details in the rest of this section.
3.1 Fuzzing Strategy
There are three types of components that can receive In-
tents: Activities, Services, and Broadcast Receivers. Activi-
ties will always provide a screen for users to interact with. So
we need to automatically generate correct interaction with
the user interface when fuzzing Activities, which is not a
well-studied topic[9]. Although malicious applications have
some possibilities to perform an escalation attack stealthily,
expecting users to make right interaction to trigger harmful
action, users may notice such kinds of attacks and close the
activity interface to avoid attacks. So, this kind of threat is
not very serious.
In terms of Services and Broadcast Receivers, they both
run in the background. Permission escalation attack can be
performed without any awareness of users. Capability leaks
of Services and Broadcast Receivers are principal threats.
So we focus on fuzzing Services and Broadcast Receivers.
There are two forms of services: Started service and Bound
Service. Started services receive Intents, while Bound Ser-
vices don’t. The exposed interface of Bound Service is de-
(cid:12)ned by a Messenger, or AIDL(Android Interface De(cid:12)nition
Language), which is not as simple as Intent delivery. Ar-
guments transferred between callers and callees are not like
Intents that have some construction rules to follow, they
can be various types and numbers[4]. Our motivation is to
heuristically generate Intents to audit Android components
for capability leaks. So we further narrow down the fuzzing
targets to Started Service and Broadcast Receivers.
Intents can be divided into two groups: explicit Intent
and implicit Intent[3]. Explicit Intents designate the target
component by its name while implicit Intents do not name a
target. Implicit Intents will be resolved to proper component
by system according to the Intent (cid:12)lters de(cid:12)ned by each
component.
There are two possible situations for permission leaks.
Components intend to receive all the Intents including im-
plicit Intents, but failed to check caller’s permission; Compo-
nents intend only to receive intra-application Intents which
mean explicit Intents, but are exported to the public. So in
both situations, vulnerable components will receive explicit
Intents. We use explicit intents to do fuzzing.
3.2 Permission Leak Detection
IntentFuzzer Agent is the application that sends Intents.
We request no permissions for IntentFuzzer Agent. If a priv-
ileged action is triggered by the Agent, a permission leak
happens.
Although the permissions of Android applications are au-
thorized during the installation time. Permission checking
is enforced during runtime. To detect if any permissions re-
lated actions are performed after sending intents, we mod-
i(cid:12)ed the permission checking module in Android System.
The inserted code will inform Console of what permissions
Figure 1: Architecture of IntentFuzzer
sions by default. Users should authorize the privileges that
apps request at install-time.
2.2 Inter Component Communication
ICC(Inter Component Communication) is a mechanism
to help apps interact with each other. Each app is made
up of several components, or logical building blocks. There
are 3 types of components that use ICC: Activity, Service,
and Broadcast Receiver. They can communicate with each
other using Intent objects[3]. Intent is a data structure for
carrying messages from one component to another.
Developers could set the \exported" attribute of the ap-
plication components as \true" to accept Intent from other
components, or \false" to deny. If the attribute is not set, it’s
also possible that system marks it as \exported" by default.
We focus on the exported components to detect capability
leaks.
2.3 Capability Leaks
Capability Leak, also known as Permission Re-Delegation
[7], occurs when a vulnerable application performs a priv-
ileged action on behalf of a malicious application without
that permission. For example, a benign application has been
authorized with permission P. If one of its exposed compo-
nent C fails to check the caller’s permission, a malicious ap-
plication may perform unprivileged actions by constructing
and sending Intent to component C.
To avoid capability leaks, a component can specify that
an Intent sender must have a certain permission by either
adding a permission requirement to component’s manifest
(cid:12)le, or by calling checkPermission API.
However, many developers don’t fully understand the po-
tential risks in Android application components. They ei-
ther expose the components unintentionally, or expose them
intentionally but failed to check the component caller’s per-
missions.
3. SYSTEM DESIGN
We aim at detecting capability leaks in Android appli-
cations using fuzzing technique. We dynamically generate
appropriate Intents and send them to the components to see
if any capability leak indeed happens.
Figure 1 depicts IntentFuzzer’s architecture. IntentFuzzer
Console is a fuzzing control center and responsible for con-
structing Intents and processing feedbacks from IntentFuzzer
Agent. IntentFuzzer Agent is an Android application run-
!"#$"#FuzzerConsole%"&’()&*+,#$-ApplicationsApplicationsApplicationIntentFuzzer AgentIntent ConstructionPermission Leak Detection!"#$"#.%/#)("012#2034#’2,5!"#$"#GetExtra APIsSystem Permission Check2&678(9/2#,(/:$#!;;7%<!7;288,;=$/:$&7<$’-),,)(",;=$/:$&734#’2,532are passed in the checking process at runtime. Details of
system modi(cid:12)cation will be clari(cid:12)ed in Section 4.
3.3 Intent Construction
On receiving explicit Intents, components will execute from
their entries. For Started Services, entry method is onStart-
Command(); for Broadcast Receivers, entry method is on-
Receive(). We don’t consider Bound Services as mentioned
above.
To detect more permission leaks, we should expand the
execution path coverage as much as possible. So it’s impor-
tant to deliver appropriate Intent to the components.
An Intent object contains a bundle of information:
(cid:15) Action is a string naming the action to be performed.
There are prede(cid:12)ned constants of generic actions. De-
velopers can also de(cid:12)ne their own action strings for ac-
tivating their components. Self-de(cid:12)ned Action string
should include the application package as a pre(cid:12)x to
avoid naming con(cid:13)ict.
(cid:15) Data is represented by the URI, which also implies the
(cid:15) Category is a string containing additional information
about the kind of component that should handle the
intent. So Category is just for implicit Intent resolu-
tion which we don’t construct Intent with.
(cid:15) Extras are key-value pairs for additional information
that should be delivered to the component handling
the Intent.
(cid:15) Flags are prede(cid:12)ned values for instructing the Android
System how to launch an Activity. It’s not related to
Broadcast Receivers and Services. We don’t construct
Intents with Flags.
MIME type.
How to construct an Intent with Action, Data, and Ex-
tras? Details are explained in the subsections as below.
3.3.1 Action Construction
To generate Action of Intents for fuzzing, we consider two
aforementioned situations of vulnerable applications sepa-
rately.
For the components that intend to be exported to re-
ceive implicit Intent, they will de(cid:12)ne Intent Filters in their
manifest (cid:12)le. Intent Filters are used to inform the system
which implicit Intents they can handle. So proper intents
attributes can be inferred using Intent Filters. By send-
ing appropriate Intents that meet the Intent resolution rule,
components can handle it well and execute into deep path.
Each Intent Filter may consists of three types of rules: Ac-
tion, Category, and Data. An Intent Filter may specify more
than one Action, but an Intent object names just a single
Action. So we construct Intents with each Action in each
Intent Filter. We call the Action inferred from Intent Filter
as explicit Action.
For the exported components that do not intend to be
exported, they will not contain Intent Filters, because these
components are developed only for intra-application usage
and accept explicit Intents. They may compare the Action
in the Intent with some prede(cid:12)ned Actions to perform dif-
ferent tasks, which may lead to potential capability leaks if
the attacker can specify a correct Action. Below is a code
example of a Broadcast Receiver entry method.
public void onReceive(Context context, Intent intent) {
SmsManager smsManager = SmsManager.getDefault();
String action = "com.example.test.action.SEND_SMS";
if (action.equals(intent.getAction())) {
smsManager.sendTextMessage("10086", null, "test",
null, null); }
}
The mistakenly exported Broadcast Receiver above will
not specify any Intent Filter in the manifest (cid:12)le, because
it’s only for self-use. To get our fuzzer deep into the code
line of the API sendTextMessage, we must construct the
correct Action. We assume that all the Action strings will
be de(cid:12)ned by const string rather than be generated by run-
time code, which is just how the most programers do. Then
we use a conservative static method. We (cid:12)rst get all the
strings from the string pool of dex or odex (cid:12)le of the app[1].
Among such strings, we choose the ones including a pre(cid:12)x
of the application package as potential Actions since Google
recommends developers to use the package name as a pre(cid:12)x
to ensure uniqueness, and we also include the strings that
are standard Actions de(cid:12)ned by Android(e.g. android.inte-
nt.action.DELETE). Thus we get a list of potential appro-
priate Actions. We call the Action extracted from bytecode
as implicit Action.
Thus we can generate Intents with both explicit Actions
and implicit Actions.
3.3.2 Data Construction
For the occasion of explicit Action, each component will
have Intent Filter de(cid:12)ned in the manifest (cid:12)le. As Intent
Filters may contain rules for Data, we can infer correspond-
ing data type that the component is able to handle. Data
rule can be speci(cid:12)ed by scheme, host, port, and path for
each part of the URI scheme://host:port/path. So we pre-
pare common data types as common form of URI before
fuzzing. For example, we store pictures of common type
in both websites and system content providers, providing
possible URIs such as http://example.com/a.jpg and con-
tent://media/external/images/media/1. If any URI we pre-
pared (cid:12)ts the rule of Data in the Intent Filter, we construct
an Intent with it. If no rule of Data is speci(cid:12)ed in Intent
Filters, we don’t construct any Data URI in Intents.
For the occasion of implicit Action, there is no correspond-
ing Intent Filter, so we also don’t construct Data URI in
Intents.
3.3.3 Extras Construction
Extras are key-value pair information in Intents. Extra
keys are strings while values can be any Java primitive type
or Class. They are not speci(cid:12)ed in Intent Filters.
Intent
recipient may check the Extra data for later use in perform-
ing privileged actions. There is a code example of a Service
entry point method.
public int onStartCommand(Intent intent, int flags, int
startId) {
SmsManager smsManager = SmsManager.getDefault();
String smsContent = intent.getStringExtra("sms");
if (smsContent != null && smsContent != "") {
smsManager.sendTextMessage("10086", null, smsContent,
null, null); }
...
}
The Android API getStringExtra() will extract the string
value mapped by key \sms" from the Intent. If Extra is not
533included in the Intent, the Service above will not trigger
sendTextMessage method, and the permission leak of an-
droid.permission.SEND SMS could not be detected. In this
situation, false negative will be produced.
To decrease this kind of false negative, we built a runtime
feedback system to construct Extra data with appropriate
key and type that components can handle. Console will keep
a set of the requested Extra keys and value types. Compo-
nents that receive Intents must call APIs(e.g. getStringEx-
tra) to get Extra data. We instrumented these APIs and
the inserted code will inform Console of what key and value
type is requested. Console will add this Extra key and type
of value to the list. So in the next round of fuzzing, the
detected new Extra data with detected key and type will be
randomly generated and feed to the component. By using
such a feedback based iteration method of Extras construc-
tion, execution can go deeper.
We only construct Extra data of Java primitive types and
don’t consider types of Java Class, because it’s non-trivial
to deal with various Classes de(cid:12)ned in various libraries or
by app developers.
3.4 General Fuzzing Steps
We de(cid:12)ne the component to be fuzzed as C. IntentFuzzer
(cid:12)rst checks if there exists any Intent Filter in C. If so, C is
exported on purpose and we do fuzzing in steps as follows:
1. For each explicit Action de(cid:12)ned in each Intent Filter,
do the step 2 to 5;
2. Construct Data only when the Intent Filter contains
Data tag;
3. Initialize an empty Extras data set E;
4. Send an Intent with constructed Action, Data, and all
the Extras in E;
5. Wait for several seconds. Scan for permission leak logs
and getExtra API logs. If new Extra data requests are
found, add them to E, and goto step 4; If not, then
exit the iteration.
If no Intent Filter is speci(cid:12)ed for C, IntentFuzzer takes it
as a mistaken exported component and do fuzzing in the
following steps:
1. Construct implicit Actions, and for each implicit Ac-
tion, do the steps 2 to 4;
2. Initialize an empty Extras data set E;
3. Send an Intent with constructed Action, and all the
Extras in E;
4. Wait for several seconds. Scan for permission leak logs
and getExtra API logs. If new Extra data requests are
found, add them to E, and goto step 3; If not, then
exit the iteration.
We record all the permission leak results and their corre-
sponding Intents that trigger the them for post-analysis.
4.
IMPLEMENTATION
To accelerate prototype development, we reused existing
excellent open source tools.
4.1 Architecture
We built our prototype IntentFuzzer on top of Drozer[2]
- an open source security assessment framework for the An-
droid platform. Drozer prompts users a console to dynam-
ically interact with the ICC endpoints exported on a de-
vice. Drozer employs the similar architecture as Intent-
Fuzzer, which consists of an agent installed in Android sys-
tem and an server-side console on PC. All modules in the
server-side console are written in Python.
IntentFuzzer bene(cid:12)ts a lot from Drozer’s modular design.
We implemented our IntentFuzzer Console by inserting a
single module in it.
4.2 System Modiﬁcation
Android’s permission system is enforced by both Android
system services and Linux kernel[11]. Most permissions are
checked by Android system services and (cid:12)nally handled by
checkPermission(String permission, int pid, int uid) in Ac-
tivityManagerService. File system and network related per-
missions are enforced by the GID isolation mechanism in
Linux kernel, such as android.permission.INTERNET and
android.permission.WRITE EXTERNAL STORAGE. Com-
bining manual analysis of Android sources and some tests,
such kernel enforced permissions are also passed to Activi-
tyManagerService in Android 4.2, which is not the case in
old version of Android[8]. So we only need to instrument the
method checkPermission to record what UID of Android ap-
plication is checked, and what permission is checked. Con-
sole can use the UID in the log to look up leaked permissions.
We also modify Extras getting APIs to catch components’
requests for extra data. There are a bunch of Extras getting
APIs for diﬀerent data types, such as getStringExtra(String
name), getIntExtra(String name, int defaultValue). We out-
putted type and key of each Extra request. Leveraging log-
cat logs, IntentFuzzer Console will generate corresponding
new Extras in the next round of Intent fuzzing until the
iteration ends.