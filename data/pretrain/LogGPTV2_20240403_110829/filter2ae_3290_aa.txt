当你在尝试学习东西的时候，一个很好的的定期提示是，阅读与实际练习中你阅读的主题不一样的主题。这就是我们为什么去实践读过的项目是有益的。我们将要深入到现在已经存在的众所周知的java反序列化bugs中。最好的实践是你可以去真正的了解手头的项目，并可以根据自己的需要尝试改进。这篇博客我们将要涉及以下内容：
  1. 利用反序列化漏洞
  2. 手动构造我们的payload
要清楚的是，第一步将是使用当前的工具实践序列化漏洞的利用，并解释所采用的方法。第二步放大payload；payload究竟是什么？我们如何手工创建？最终的目的是充分了解它是如何工作的，以及掌握将来理解类似bug的方法。
我会提到整个博客中使用的所有工具，但是至少你需要了解如下内容：
这就是我们将要利用的bug，选择一个模拟bug的原因是我们可以控制它的所有面，从而更好的理解一个反序列化漏洞的工作原理。
### 利用Deserlab
首先，确保你阅读了介绍DeserLab和Java反序列化的[blog](https://nickbloor.co.uk/2017/08/13/attacking-java-deserialization/)  
这篇blog对Java反序列化协议本身的深入分析。通过继续阅读本节，你将掌握DeserLab的用法。本节其余的部分，我们将使用编译的jar文件，请确认从github下载了这些文件。现在开始吧：  
通常我处理大多数问题的方法是先了解如何以正确的方式运行，我们需要对DeserLab做如下操作：  
运行服务器和客户端  
捕获流量  
分析流量  
使用如下命令运行客户端和服务器：
    java -jar DeserLab.jar -server 127.0.0.1 6666
    java -jar DeserLab.jar -client 127.0.0.1 6666
命令的input/output如下所示：
    java -jar DeserLab.jar -server 127.0.0.1 6666
     [+] DeserServer started, listening on 127.0.0.1:6666
     [+] Connection accepted from 127.0.0.1:50410
     [+] Sending hello...
     [+] Hello sent, waiting for hello from client...
     [+] Hello received from client...
     [+] Sending protocol version...
     [+] Version sent, waiting for version from client...
     [+] Client version is compatible, reading client name...
     [+] Client name received: testing
     [+] Hash request received, hashing: test
     [+] Hash generated: 098f6bcd4621d373cade4e832627b4f6
     [+] Done, terminating connection.
    java -jar DeserLab.jar -client 127.0.0.1 6666
     [+] DeserClient started, connecting to 127.0.0.1:6666
     [+] Connected, reading server hello packet...
     [+] Hello received, sending hello to server...
     [+] Hello sent, reading server protocol version...
     [+] Sending supported protocol version to the server...
     [+] Enter a client name to send to the server:
     testing
     [+] Enter a string to hash:
     test
     [+] Generating hash of "test"...
     [+] Hash generated: 098f6bcd4621d373cade4e832627b4f6
以上不是我们真正关心的问题，真正的问题是，怎么实现反序列化部分。要解答这个问题，你可以用wireshark, tcpdump
,tshark捕获6666端口的流量.要使用tcpdump捕获流量，可以执行如下命令：
    tcpdump -i lo -n -w deserlab.pcap 'port 6666'
阅读下面的内容前，用wireshark打开pcap文件。根据Nick的[blog](https://nickbloor.co.uk/2017/08/13/attacking-java-deserialization/)，你至少可以识别来回传递的序列化Java对象:
##### 序列化数据的提取：
现在我们指出了序列化数据正在传输的事实，让我们开始了解实际传输的内容。我决定使用这两款实用的工具
[SerializationDumper](https://github.com/NickstaDB/SerializationDumper)和[jdeserialize](https://github.com/frohoff/jdeserialize/tree/master/jdeserialize)，而不是根据blog中提供的信息编写自己的解析器。在我们使用工具之前，我们需要准备数据，所以把pcap包转换成我们可以分析的数据。
    tshark -r deserlab.pcap -T fields -e tcp.srcport -e data -e tcp.dstport -E separator=, | grep -v ',,' | grep '^6666,' | cut -d',' -f2 | tr '\n' ':' | sed s/://g
现在一行缩短了很多，现在它可以工作了。我们把他分解成可理解的块，它所做的就是把pcap数据转换成一行十六进制编码的输出字符串。它做的第一件事是将pcap转换成只包含传输数据和Tcp源端口，目的端口的文本形式：
    tshark -r deserlab.pcap -T fields -e tcp.srcport -e data -e tcp.dstport -E separator=,
看起来像这样：
    50432,,6666
    6666,,50432
    50432,,6666
    50432,aced0005,6666
    6666,,50432
    6666,aced0005,50432
在像上面的代码片段中可以看到，在TCP三次握手之间没有数据，因此有,,这部分。之后客户端发送服务端确认的第一个字节，然后服务端返回一些字节等等。命令的第二部分将它转换为字符串，只需根据行开始处的端口选择有效payloads。
    | grep -v ',,' | grep '^6666,' | cut -d',' -f2 | tr '\n' ':' | sed s/://g
    以上的命令仅会选择服务器的回复，如果希望客户端数据需要更改端口好。最终转换结果显示如下所示：
    ​```bash
    aced00057704f000baaa77020101737200146e622e64657365722e486[...]
这是我们可以使用的，因为它是发送和接受的数据的干净的表示。让我们使用这两个工具分析一下数据，首先我们使用SerializationDumper，然后我们将使用jdeserialize。为什么是用两个工具？因为（如果可能的话）用不同的工具来分析潜在的错误或问题是很好的做法。如果你坚持使用一个工具，可能会出错，而没有察觉。尝试不同的
工具也非常有趣。
##### 序列化数据分析
使用SerializationDumper是非常简单的，因为你可以传递序列化数据的十六进制形式作为第一个参数，如下所示：
    java -jar SerializationDumper-v1.0.jar aced00057704f000baaa77020101
输出的内容如下：
    STREAM_MAGIC - 0xac ed
    STREAM_VERSION - 0x00 05
    Contents
     TC_BLOCKDATA - 0x77
     Length - 4 - 0x04
     Contents - 0xf000baaa
     TC_BLOCKDATA - 0x77
     Length - 2 - 0x02
     Contents - 0x0101
     TC_OBJECT - 0x73
     TC_CLASSDESC - 0x72
     className
     Length - 20 - 0x00 14
     Value - nb.deser.HashRequest - 0x6e622e64657365722e4861736852657175657374
如果我们要使用jdeserialize分析相同的序列化数据，首先要构建jdeserialize，可以使用提供的build.xml文件里的[ant](http://ant.apache.org/)。我选择了手动编译，可以通过以下命令实现：
    mkdir build
    javac -d ./build/ src/*
    cd build
    jar cvf jdeserialize.jar *
经过以上操作我们可以产生一个可以使用的jar文件，你可以用下面的命令测试它，它会显示帮助信息：
    java -cp jdeserialize.jar org.unsynchronized.jdeserialize
由于jdeserialize需要一个文件，我们可以用如下的Python代码转换序列化数据的十六进制表示形式（注意缩短十六进制字符串以进行博客布局）：
    open('rawser.bin','wb').write('aced00057704f000baaa77020146636'.decode('hex'))
我们现在可以通过运行jdeserialize来分析这个文件，文件名作为应该产生的第一个参数：
    java -cp jdeserialize.jar org.unsynchronized.jdeserialize rawser.bin
     read: [blockdata 0x00: 4 bytes]
     read: [blockdata 0x00: 2 bytes]
     read: nb.deser.HashRequest _h0x7e0002 = r_0x7e0000;
     //// BEGIN stream content output
     [blockdata 0x00: 4 bytes]
     [blockdata 0x00: 2 bytes]
     nb.deser.HashRequest _h0x7e0002 = r_0x7e0000;
     //// END stream content output
    //// BEGIN class declarations (excluding array classes)
     class nb.deser.HashRequest implements java.io.Serializable {
     java.lang.String dataToHash;
     java.lang.String theHash;
     }
    //// END class declarations
    //// BEGIN instance dump
     [instance 0x7e0002: 0x7e0000/nb.deser.HashRequest
     field data:
     0x7e0000/nb.deser.HashRequest:
     dataToHash: r0x7e0003: [String 0x7e0003: "test"]
     theHash: r0x7e0004: [String 0x7e0004: "098f6bcd4621d373cade4e832627b4f6"]
     ]
     //// END instance dump
我们从序列化数据分析工具的输出中学到的第一件事是它的序列化数据:)。我们学到的第二件事就是，事实上在客户端和服务器之间显式地传送一个对象“nb.deser.HashRequest”。如果我们将此分析与我们之前的wireshark查看的数据结合在一起，我们可以知道用户名是以TC_BLOCKDATA类型的字符串形式发送的：
    TC_BLOCKDATA - 0x77
     Length - 9 - 0x09
     Contents - 0x000774657374696e67