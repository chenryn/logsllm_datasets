Default	
  privileges	
  of	
  content	
  script	
  are	
  not	
  least	
Localstorage	
Cookies	
JS	
DOM	
Render	
Content	
Script	
  (java	
  script)	
Isolated	
  World	
Extension	
(HTML/Javascript)	
y
r
a
d
n
u
o
b
s
s
e
c
o
r
P
Cross-­‐site	
  Requests	
  with	
  Extension	
  Core	
Web	
  server	
• 
• 
• 
• 
Cross-­‐site	
  reqs	
  via	
  content	
  scripts	
  through	
  extension	
  core	
The	
  extension	
  core	
  can	
  ﬁle	
  cross-­‐site	
  HTTP	
  reqs	
  to	
  mulIple	
  origins	
– 
Cross-­‐site	
  permissions	
  are	
  authorized	
  in	
  order	
  to	
  inject	
  content	
  scripts.	
Default	
  privileges	
  of	
  extension	
  core	
  are	
  not	
  least	
No	
  diﬀerenIated	
  permission	
  of	
  extension	
  core	
  and	
  content	
  script	
– 
Inject	
  scripts	
  vs.	
  cross-­‐site	
  reqs	
Content	
Script	
  (java	
  script)	
Isolated	
  World	
Render	
Extension	
(HTML/Javascript)	
y
r
a
d
n
u
o
b
s
s
e
c
o
r
P
Content	
Script	
  (java	
  script)	
Isolated	
  World	
y
r
a
d
n
u
o
b
s
s
e
c
o
r
P
Cross-­‐site	
  Requests	
  with	
  Content	
  Scripts	
•  Without	
  cross-­‐site	
  permission,	
  a	
  running	
  content	
  script	
  can	
only	
  make	
  HTTP	
  reqs	
  to	
  the	
  origin	
  of	
  the	
  tab	
  page	
Web	
  server	
DOM	
Localstorage	
Cookies	
JS	
Render	
Content	
Script	
  (java	
  script)	
Isolated	
  World	
• 
• 
• 
y
r
a
d
n
u
o
b
s
s
e
c
o
r
P
However,	
  since	
  content	
  script	
  has	
  full	
  privileges	
  of	
  DOM,	
  it	
can	
  ﬁle	
  unlimited	
  cross-­‐site	
  HTTP	
  reqs	
  to	
  arbitrary	
  origin,	
  e.g.,	
Insert	
  iframe	
Load	
  img	
– 
– 
–  Modify	
  src	
  of	
  DOM	
  objects	
–  With	
  user	
  credenIals	
  included	
  in	
  the	
  req	
Loading	
  of	
  new	
  DOM	
  objects	
  results	
  in	
  cross-­‐site	
  reqs	
Privilege	
  to	
  access	
  DOM	
  is	
  not	
  least	
  for	
  content	
  script	
Extension	
(HTML/Javascript)	
UndiﬀerenIated	
  Permissions	
• 
Web	
  server	
An	
  extension	
  may	
  inject	
  content	
  script	
  to	
  many	
origins	
– 
–  But	
  only	
  to	
  a	
  dedicated	
  one,	
  e.g.,	
  a	
  translaIon	
  web	
It	
  does	
  not	
  need	
  to	
  ﬁle	
  HTTP	
  reqs	
  to	
  all	
  origins	
service	
•  When	
  an	
  origin	
  is	
  assigned	
  to	
  extension,	
  all	
components	
  get	
  the	
  full	
  privileges	
– 
–  Content	
  script	
  can	
  arbitrarily	
  modify	
  the	
  DOM,	
  and	
  ﬁle	
Extension	
  core	
  can	
  ﬁle	
  cross-­‐site	
  reqs	
  freely	
cross-­‐sit	
  reqs	
DOM	
Localstorage	
Cookies	
JS	
Render	
Content	
Script	
  (java	
  script)	
Isolated	
  World	
• 
y
r
a
d
n
u
o
b
s
s
e
c
o
r
P
Privilege	
  separaIon	
  is	
  not	
  ﬁne-­‐grained	
  enough	
Extension	
(HTML/Javascript)	
permissions”:	
  [“hOp://*/
*”	
  ]	
19	
  out	
  of	
  30	
most	
  popular	
extensions	
  have	
this	
  type	
  of	
  over	
privileges	
Security	
  Enhanced	
  Chrome	
  Extensions	
•  Micro-­‐privilege	
  management	
•  DiﬀerenIate	
  DOM	
  elements	
  with	
  sensiIvity	
Micro-­‐privilege	
  Management	
•  More	
  ﬁne-­‐grained	
  permission	
  deﬁniIon	
  and	
  enforcement	
•  Fine-­‐grained	
  permission	
  diﬀerenIaIon	
  for	
  extension	
  core	
  and	
content	
  script	
–  Permission	
  specs	
  are	
  separated	
  from	
  diﬀerent	
  components	
•  Least	
  default	
  privileges	
–  Content	
  script	
  cannot	
  introduce	
  new	
  origin	
  to	
  DOM	
–  no	
  HTTP	
  req	
  to	
  tab	
  origin	
Example	
  Permission	
  Spec	
•  Permissions	
  for	
  a	
  translaIon	
  extension:	
DiﬀerenIaIng	
  DOM	
  Elements	
•  To	
  further	
  reduce	
  possible	
  sensiIve	
  data	
  leakage	
  by	
  content	
script,	
  DOM	
  elements	
  can	
  be	
  diﬀerenIated	
  with	
  sensiIvity	
levels	
•  A	
  web	
  app	
  developer	
  can	
  idenIfy	
  sensiIve	
  informaIon	
  in	
  a	
web	
  page,	
  e.g.,	
–  High	
  level	
  data:	
  only	
  can	
  ﬂow	
  to	
  web	
  origin	
–  Medium	
  level:	
  may	
  ﬂow	
  to	
  authorized	
  origins	
–  Low	
  level	
  (default):	
  can	
  ﬂow	
  to	
  any	
  origin	
•  An	
  extension	
  developer	
  can	
  specify	
  permissions	
accordingly:	
–  E.g.,	
  HIGH	
  for	
  username/pw,	
  MEDIUM	
  for	
  other	
  user	
  info	
ImplementaIon	
•  We	
  have	
  implemented	
  the	
  micro-­‐privilege	
  management	
and	
  spec.	
•  For	
  DOM	
  sensiIvity,	
  we	
  develop	
  a	
  helper	
  extension	
(trusted):	
–  To	
  idenIfy	
  and	
  label	
  sensiIve	
  DOM	
  elements	
–  Re-­‐write	
  DOM	
  element	
  properIes	
•  According	
  to	
  conﬁgurable	
  dicIonary	
–  Chrome	
  enforces	
  permission	
  check	
  based	
  on	
  extension	
  manifest	
–  Explicitly	
  mark	
  sensiIve	
  info	
  by	
  web	
  app	
  developer	
  is	
  not	
  pracIcal	
right	
  now	
EvaluaIons	
EvaluaIon	
•  We	
  selected	
  30	
  most	
  popular	
  extensions	
  from	
  Google	
  extension	
  gallery	
–  24	
  of	
  them	
  have	
  granted	
  network	
  access	
–  19	
  of	
  them	
  request	
  higher	
  privileges	
  than	
  necessary	
  (hOp://*/*)	
•  Our	
  implementaIon	
  easily	
  changes	
  their	
  spec	
  to	
  reduce	
  privileges	
EvaluaIon	
•  Our	
  implementaIon	
  blocks	
  all	
  experimental	
aOacks	
  on	
  the	
  bot	
  extension.	
Conclusions	
•  Demonstrated	
  spamming,	
  phishing,	
  and	
  DDoS	
  aOacks	
with	
  implemented	
  Chrome	
  extensions	
•  Analyzed	
  the	
  permissions	
  model	
  that	
  causes	
  these	
problems	
•  Proposed	
  security	
  enhanced	
  permission	
  model	
  and	
enforcement	
  for	
  Chrome	
  extension	
  architecture	
–  Micro-­‐privileged	
  permission	
  management	
  and	
  spec	
–  DiﬀerenIate	
  content	
  script’s	
  permission	
  with	
  DOM	
sensiIvity	
  levels	
Thank	
  You!	
Q&A