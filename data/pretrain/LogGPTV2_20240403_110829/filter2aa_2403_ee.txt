    call edi ; printf 
    mov   esi, DWORD PTR [esi] ; operator++: get ->next pointer 
    push DWORD PTR [esi+12] 
    push DWORD PTR [esi+8] 
    push OFFSET $SG40850 ; '3rd element: %d %d' 
    call edi ; printf 
    mov   eax, DWORD PTR [esi] ; operator++: get ->next pointer 
    add   esp, 64 
    push DWORD PTR [eax+12] 
    push DWORD PTR [eax+8] 
    push OFFSET $SG40852 ; 'element at .end(): %d %d' 
    call edi ; printf 
    push OFFSET $SG40853 ; '* let''s count from the end:' 
    call edi ; printf 
    push DWORD PTR [ebx+12] ; use x and y fields from the node l variable points to 
    push DWORD PTR [ebx+8] 
    push OFFSET $SG40860 ; 'element at .end(): %d %d' 
    call edi ; printf 
    mov   esi, DWORD PTR [ebx+4] ; operator--: get ->prev pointer 
    push DWORD PTR [esi+12] 
    push DWORD PTR [esi+8] 
    push OFFSET $SG40862 ; '3rd element: %d %d' 
    call edi ; printf 
    mov   esi, DWORD PTR [esi+4] ; operator--: get ->prev pointer 
    push DWORD PTR [esi+12] 
    push DWORD PTR [esi+8] 
    push OFFSET $SG40864 ; '2nd element: %d %d' 
    call edi ; printf 
    mov   eax, DWORD PTR [esi+4] ; operator--: get ->prev pointer 
    push DWORD PTR [eax+12] 
    push DWORD PTR [eax+8] 
    push OFFSET $SG40866 ; '1st element: %d %d' 
    call edi ; printf 
    add   esp, 64 
    push OFFSET $SG40867 ; 'removing last element...' 
    call edi ; printf 
    mov   edx, DWORD PTR [ebx+4] 
    add   esp, 4 
    ; prev=next? 
    ; it is the only element, "garbage one"? 
    ; if yes, do not delete it! 
    cmp  edx, ebx 
    je    SHORT $LN349@main 
    mov   ecx, DWORD PTR [edx+4] 
    mov   eax, DWORD PTR [edx] 
    mov   DWORD PTR [ecx], eax 
    mov   ecx, DWORD PTR [edx] 
    mov   eax, DWORD PTR [edx+4] 
    push edx 
    mov   DWORD PTR [ecx+4], eax 
    call ??3@YAXPAX@Z ; operator delete 
    add   esp, 4 
    mov   DWORD PTR _l$[esp+32], 2 
$LN349@main: 
    lea   eax, DWORD PTR _l$[esp+28] 
    push eax 
    call ?dump_List_val@@YAXPAI@Z ; dump_List_val 
    mov   eax, DWORD PTR [ebx] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
544 
逆向工程权威指南（下册） 
    add   esp, 4 
    mov   DWORD PTR [ebx], ebx 
    mov   DWORD PTR [ebx+4], ebx 
    cmp   eax, ebx 
    je    SHORT $LN412@main 
$LL414@main: 
    mov   esi, DWORD PTR [eax] 
    push eax 
    call ??3@YAXPAX@Z ; operator delete 
    add   esp, 4 
    mov   eax, esi 
    cmp   esi, ebx 
    jne   SHORT $LL414@main 
$LN412@main: 
    push ebx 
    call ??3@YAXPAX@Z ; operator delete 
    add  esp, 4 
    xor  eax, eax 
    pop  edi 
    pop  esi 
    pop  ebx 
    add  esp, 16 
    ret  0 
_main ENDP 
在构造数据链的时候，MSVC 通过“Buynode”函数分配了虚节点的空间；此后，这个函数同样用于
分配其他节点的存储空间。相比之下，GCC 则会在局部栈里存储链表的第一个节点。 
指令清单 51.32  整个程序的输出 
* empty list: 
_Myhead=0x003CC258, _Mysize=0 
ptr=0x003CC258 _Next=0x003CC258 _Prev=0x003CC258 x=6226002 y=4522072 
* 3-elements list: 
_Myhead=0x003CC258, _Mysize=3 
ptr=0x003CC258 _Next=0x003CC288 _Prev=0x003CC2A0 x=6226002 y=4522072 
ptr=0x003CC288 _Next=0x003CC270 _Prev=0x003CC258 x=3 y=4 
ptr=0x003CC270 _Next=0x003CC2A0 _Prev=0x003CC288 x=1 y=2 
ptr=0x003CC2A0 _Next=0x003CC258 _Prev=0x003CC270 x=5 y=6 
node at .begin: 
ptr=0x003CC288 _Next=0x003CC270 _Prev=0x003CC258 x=3 y=4 
node at .end: 
ptr=0x003CC258 _Next=0x003CC288 _Prev=0x003CC2A0 x=6226002 y=4522072 
* let's count from the begin: 
1st element: 3 4 
2nd element: 1 2 
3rd element: 5 6 
element at .end(): 6226002 4522072 
* let's count from the end: 
element at .end(): 6226002 4522072 
3rd element: 5 6 
2nd element: 1 2 
1st element: 3 4 
removing last element... 
_Myhead=0x003CC258, _Mysize=2 
ptr=0x003CC258 _Next=0x003CC288 _Prev=0x003CC270 x=6226002 y=4522072 
ptr=0x003CC288 _Next=0x003CC270 _Prev=0x003CC258 x=3 y=4 
ptr=0x003CC270 _Next=0x003CC258 _Prev=0x003CC288 x=1 y=2 
C++11 std::forward_list 单向链表 
std::forward_list 和 std::list 的结构基本相同，只是它是单向链，它的迭代器（链域）只有”next”字段
而没有”prev”字段。虽然这种链表的内存开销变小了，但是无法进行逆向遍历。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
545 
51.4.3  std::vector 标准向量 
我们将std::vector标准向量称为PODT
①
① PODT 是 Plain Old Data Type，纯文本的老的数据类型。 
C数组的安全封装容器。其内部结构和标准字符串std::string 十分
相似（参见 51.4.1 节）。它有一个数据缓冲区的专用指针，一个指向数组尾部的专用指针，以及一个指向分
配缓冲区尾部的专用指针。 
这种数组采取的各个元素以彼此相邻的方式存储于内存之中，这点和常规数组没什么区别（参见第 18
章）。新推出的 C++11 标准，为其定义了内置函数.data()。std::vector 的.data()的作用就和 std::string 中的.c_str()
一样，用于返回缓冲区的地址。 
这种数据结构使用堆/heap 来存储数据缓冲区，而堆的空间消耗可能会比数组本身还大。 
MSVC 和 GCC 的实现机理基本相同，只是结构体的变量名称稍微有些不同。因此，所以这里使用同
一个例子进行说明。下述源程序用于遍历 std::vector 的数据结构。 
#include  
#include  
#include  
#include  
struct vector_of_ints 
{ 
    // MSVC names: 
    int *Myfirst; 
    int *Mylast; 
    int *Myend; 
    // GCC structure is the same, but names are: _M_start, _M_finish, _M_end_of_storage 
}; 
void dump(struct vector_of_ints *in) 
{ 
    printf ("_Myfirst=%p, _Mylast=%p, _Myend=%p\n", in->Myfirst, in->Mylast, in->Myend); 
    size_t size=(in->Mylast-in->Myfirst); 
    size_t capacity=(in->Myend-in->Myfirst); 
    printf ("size=%d, capacity=%d\n", size, capacity); 
    for (size_t i=0; iMyfirst[i]); 
}; 
int main() 
{ 
    std::vector c; 
    dump ((struct vector_of_ints*)(void*)&c); 
    c.push_back(1); 
    dump ((struct vector_of_ints*)(void*)&c); 
    c.push_back(2); 
    dump ((struct vector_of_ints*)(void*)&c); 
    c.push_back(3); 
    dump ((struct vector_of_ints*)(void*)&c); 
    c.push_back(4); 
    dump ((struct vector_of_ints*)(void*)&c); 
    c.reserve (6); 
    dump ((struct vector_of_ints*)(void*)&c); 
    c.push_back(5); 
    dump ((struct vector_of_ints*)(void*)&c); 
    c.push_back(6); 
    dump ((struct vector_of_ints*)(void*)&c); 
    printf ("%d\n", c.at(5)); // with bounds checking 
    printf ("%d\n", c[8]); // operator[], without bounds checking 
}; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
546 
逆向工程权威指南（下册） 
下面是采用 MSVC 编译后的程序输出。 
_Myfirst=00000000, _Mylast=00000000, _Myend=00000000 
size=0, capacity=0 
_Myfirst=0051CF48, _Mylast=0051CF4C, _Myend=0051CF4C 
size=1, capacity=1 
element 0: 1 
_Myfirst=0051CF58, _Mylast=0051CF60, _Myend=0051CF60 
size=2, capacity=2 
element 0: 1 
element 1: 2 
_Myfirst=0051C278, _Mylast=0051C284, _Myend=0051C284 
size=3, capacity=3 
element 0: 1 
element 1: 2 
element 2: 3 
_Myfirst=0051C290, _Mylast=0051C2A0, _Myend=0051C2A0 
size=4, capacity=4 
element 0: 1 
element 1: 2 
element 2: 3 
element 3: 4 
_Myfirst=0051B180, _Mylast=0051B190, _Myend=0051B198 
size=4, capacity=6 
element 0: 1 
element 1: 2 
element 2: 3 
element 3: 4 
_Myfirst=0051B180, _Mylast=0051B194, _Myend=0051B198 
size=5, capacity=6 
element 0: 1 
element 1: 2 
element 2: 3 
element 3: 4 
element 4: 5 
_Myfirst=0051B180, _Mylast=0051B198, _Myend=0051B198 
size=6, capacity=6 
element 0: 1 
element 1: 2 
element 2: 3 
element 3: 4 
element 4: 5 
element 5: 6 
6 
6619158 
从程序中我们可以看到，当主函数 main()开始运行后并没有立即分配数据缓冲区。在第一次调用
push_back()函数之后，它才分配了缓冲区。此后，每调用一次 push_back()函数，数组的空间和 size(capacity)
都增大一次。不仅空间容量逐渐增长，而且缓冲区的地址也会同期改变。这是因为每次调用 push_back()
函数时，都会在堆里重新分配空间。所以这种操作的时间开销很大。要想提高效率，就必须预测数组的大
小并使用.reserve()方式为其预留存储空间。 
最后一个数值是随机的噪音。它不属于链表的某个节点，只是一个随机数。从这一点我们可以看出，
std::vector（标准向量）的下标运算符“[]”不会检测索引值是否超越下标界限。要进行这种数组边界检查，可
以使用内置函数.at()。虽然.at()方法的运行速度较慢，但是它能在下标越 std::out_of_range（越界）的错误提示。 
我们来看它的汇编指令。使用 MSVC 2012（启用 /GS- /Ob1 选项）编译上述源程序，可得到： 
指令清单 51.33  MSVC 2012 /GS- /Ob1 
$SG52650 DB '%d', 0aH, 00H 
$SG52651 DB '%d', 0aH, 00H 
_this$ = -4 ; size = 4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 51 章  C++ 
547 
__Pos$ = 8  ; size = 4 
?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z PROC ; std::vector  
     >::at, COMDAT 
; _this$ = ecx 
    push ebp 
    mov   ebp, esp 
    push ecx 
    mov   DWORD PTR _this$[ebp], ecx 
    mov   eax, DWORD PTR _this$[ebp] 
    mov   ecx, DWORD PTR _this$[ebp] 
    mov   edx, DWORD PTR [eax+4] 
    sub   edx, DWORD PTR [ecx] 
    sar   edx, 2 
    cmp   edx, DWORD PTR __Pos$[ebp] 
    ja    SHORT $LN1@at 
    push OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ 
    call DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z 
$LN1@at: 
    mov   eax, DWORD PTR _this$[ebp] 
    mov   ecx, DWORD PTR [eax] 
    mov   edx, DWORD PTR __Pos$[ebp] 
    lea   eax, DWORD PTR [ecx+edx*4] 
$LN3@at: 
    mov   esp, ebp 
    pop   ebp 
    ret   4 
?at@?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z ENDP ; std::vector   
     >::at 
_c$ = -36 ; size = 12 
$T1 = -24 ; size = 4 
$T2 = -20 ; size = 4 
$T3 = -16 ; size = 4 
$T4 = -12 ; size = 4 
$T5 = -8  ; size = 4 
$T6 = -4  ; size = 4 
_main PROC 
    push ebp 
    mov   ebp, esp 
    sub   esp, 36 
    mov   DWORD PTR _c$[ebp], 0 ; Myfirst 
    mov   DWORD PTR _c$[ebp+4], 0 ; Mylast 
    mov   DWORD PTR _c$[ebp+8], 0 ; Myend 
    lea   eax, DWORD PTR _c$[ebp] 
    push eax 
    call ?dump@@YAXPAUvector_of_ints@@@Z ; dump 
    add   esp, 4 
    mov   DWORD PTR $T6[ebp], 1 
    lea   ecx, DWORD PTR $T6[ebp] 
    push ecx 
    lea   ecx, DWORD PTR _c$[ebp] 
    call ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector >::push_back 
    lea   edx, DWORD PTR _c$[ebp] 
    push edx 
    call ?dump@@YAXPAUvector_of_ints@@@Z ; dump 
    add   esp, 4 
    mov   DWORD PTR $T5[ebp], 2 
    lea   eax, DWORD PTR $T5[ebp] 
    push eax 
    lea   ecx, DWORD PTR _c$[ebp] 
    call ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector >::push_back 
    lea   ecx, DWORD PTR _c$[ebp] 
    push ecx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
548 
逆向工程权威指南（下册） 
    call ?dump@@YAXPAUvector_of_ints@@@Z ; dump 
    add   esp, 4 
    mov   DWORD PTR $T4[ebp], 3 
    lea   edx, DWORD PTR $T4[ebp] 
    push edx 
    lea   ecx, DWORD PTR _c$[ebp] 
    call ?push_back@?$vector@HV?$allocator@H@std@@@std@@QAEX$$QAH@Z ; std::vector >::push_back 
    lea   eax, DWORD PTR _c$[ebp] 
    push eax 
    call ?dump@@YAXPAUvector_of_ints@@@Z ; dump 
    add   esp, 4 