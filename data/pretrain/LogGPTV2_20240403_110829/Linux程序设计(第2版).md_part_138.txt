Vendor id=10de.Device id=29.
Mediun devsel.Fast back-Lo-back capablo.IRQ 16.Master Capable
Latency=64.Min Gnt=5.Max Lat=1,
Prefetchable 32 bit memory at 0xe20c0000 [0xe2000008].
Non-prefetchable 32 bit memory at 0xáf000000 10xdfo000001
/proc/pci里面有你系统里所有PCi设备的资料，从中找出你的图形适配器，记下它的预读地
址（即清单里前面加有“Prefetchable”字样标记的数字）一大家可以看到，它在我们这台系
统上是“0xe2000000”。lomap最多可以管理16个不同的映射，这些映射都是通过ioctl命令设置
的。我们在稍后对lomap进行测试时将用到这个地址值。
二次映射完成之后，就可以直接对其中的数据进行读写了。Iomap使用的是数据长度以字节
为单位的函数。如下所示：
加入jaVa编程群：524621833
---
## Page 747
730Linux程序设计
ansigned char *zeadb(void *addr)
readb返回从地址addr处读到的字节，而writeb把数据写到指定地址去。writeb还可以返回它
刚才写的数据—如果你需要这样做的话。还有以doubleword（双字）或long（长整数）为数据
长度单位来进行读写的函数，它们是：
unsigned short *zeadw(void *addx)
unsigmed short *writew(uneigned short dats, void *addr)
unsigned long *writel(unsigned 1ong data, void *addr)
如果我们在lomap模块里定义了IOMAP_BYTE_WISE标志，它就会使用数据长度以字节为
单位的函数进行读写，它也正是这样做的。大家必须清楚，如果是拷贝兆字节长度的数据，这
些函数的速度就不能令人满意了，面这也并不是使用它们的目的所在。如果没有定义
IOMAP_BYTE_WISE标志，lomap就会利用其他函数来拷贝数据，如下所示：
void *memcpy_fromlo（void *to, const void *from, unsigaed long size)
void *mascpy_tofo(void *to, conat void *from, unmigmed long size)
这几个函数的工作情况类似于memcpy，区别就在于它们的操作对象是I/O内存。还有一个与
memset函数相对应的版本，作用是把整个区域设置为一个指定的值。如下所示：
void *nemeet_io(void *addr, int value, unslgned long size)
lomap模块里实现读功能和写功能的两个函数其工作原理与Schar模块里的差不多，我们这
里就不再列出它们的代码清单了。数据将通过一个内核缓冲区在用户空间和经过二次映射的VO
内存之间移来移去，记得要对文件的读写位置做相应的修改。
二次映射的区城必须在卸载模块时解除映射关系和释放。把ioremap函数返回的那个指针传
递到iounmap函数可以解除映射关系，如下所示：
void iounnap(void *addr)
可移植性
这与它是否是目标机器的本地字节账序没有关系。这是PCI外设本身固定使用的字节存储顺序，
上面介绍的这些函数都能在必要时交换数据的字节存储顺序。如果数据需要在两种数据类型字
之间进行转换，Linux也备有完成相关转换的指令。这在专门讨论可移植性问题的附录里有进一
步的说明
21.5.81Omap里的设备分配
Iomap用一个全局性的数组来保存可能创建的设备，数组的下标就是设备的辅编号。这是需
要管理多台设备时广泛使用的方法，它的具体应用并不复杂。全局数组iomap_dev里为每个可能
会被访问的设备保存着一个指针。在设备每一个功能函数的入口点位置上，将要被操作的具体
设备会从数组里提取出来，如下所示：
Lonap *idev = iomap_dev{MINCR(inode=>i_rdev)1:
加入jaVa编程群：524621833
---
## Page 748
第21章设备照动程序
731
如果函数不直接使用一个inode结点做为参数，它也会从file文件结构里被间接地提取出来。
文件结构里有一个指向与文件关联着的dentry项目（“directoeyentry”，月录项）的指针，而
inode可以从这个结构里查到。如下所示：
Ionap *1dev = omap_dev[MINoR(file->f_dentry->d_inode->1_rdev1] 
21.5.9对VO内存实现mmap文件操作
除实现有read和write两种文件操作以外，lomap模块还实现了mmap文件操作，用户空问应
用程序通过内存映射功能将能够直接访问二次映射下的I/O内存。对内存页面实际进行的二次映
射与Schar里的做法很相似，但因为映射并不涉及真正的物理页面，所以后者不需要进行阻塞。
I/O内存不是真正的RAM，因此mem_map里没有与它对应项目。
renap_page_range (vma->vm_start, idev->base, size.
(10.3d96eduns-A
类似于Schar中的情况，remap_page_range函数是iomap_mmap文件操作的核心，它为我们完
成了内存页面表的设置工作。最终编写出来的函数并不需要太多的代码。
static int Lomap_mrmap(struct file *file. struct vm_area_struct *vma)
Iomap *1dev = iomap_dev[MINoR(file->f_dentry->d_inode->i_rdev}1 :
uncigned long size;
if (!idev->base)
no such device */
return -ENXIO;
/*_size must be a multiple of PAGE_SIze */
if （size  PAGE_SIZE)
return -EINVAL:
/*remap the range */
vta->vz_page_prot))
return -EAGAIN;
MSG(*region mapped\n*) ;
return 0:
我们先从iomap_dev数组里查出具体是那一个设备，然后检查这个设备是否已经被初始化过
了（即是否存在）。如果还没有，我们就相应地返回一条错误信息。我们还要求将要被二次映射
的范围必须是页面长度的整数倍；如果不是，也相应地返回一条错误信息。如果这些要求都满
足，我们就调用remap_page_range完成内存映射操作。
动手试试：Iomap模块
Iomap的源代码可以从Wrox出版社的Web站点下载到。进人modules/iomap子目录，你应该
在那里看到下面这几个文件：
S18
iomap.c
iomap.hiomap_setup.c
Makef i 1c
加入jaVa编程群：524621833
---
## Page 749
732
Linux程序设计
1)以根用户身份执行make命令建立iomap模块。然后创建两个特殊文件，它们的辅编号一个
是0，另一个是1。再把模块插人到内核里去：
mknod/dev/iomap0c420
nake
mknod/dev/1omap1c421
inmodiop.0
iomap: module 1oaded
2）现在一切都准备就绪了。单有lomap是做不成什么事情的，所以我们先要建立两个设备才
能开始测试。接下来你必须查出自己显示适配器帧缓冲区的基地址一请按照在这一小节开始部
分介绍的方法从/proc/pci中把这个数字查出来。我们系统上的这个地址是0xe2000000。编写一个
小程序，通过ioctl调用建立两个设备，这时要用到顿缓冲区的基地址。在存放着Iomap模块源代
码的子目录里建立-个名为iomap_setup.c的文件，修改现有代码也行，它的内容如下所示：
#include 
include 
#include 
include *iomap.h*
define BASE0xe2000000
int main(int argc, char *argv[11
int[d1± open(*/dev/iomap0°,O_RDwR);
int fd2=open(*/dev/iomap1·.o_RDhR};
Iomap devl, dev2:
if (fd1 = -1 1| fd2 =s -11 (
perror(*open*):
retuzn 1:
/*setup first device */
dev1.base = BASE;
if（ioctl（fd1. IOMAP_SET，&dev1))（
dev1.size 512·1024:
perror(*ioctl°);
return 2:
/* setup second device, offset the size of the first device */
dev2.base  BASE + dev1.size;
if {ioct1(fd2, IoMAP_SEr,6dev2)）(
dev2.8ize=512·1024:
perror("ioctl"):
return 0;
别忘了把BASE修改为你自已顿缓冲区的基地址！要不然结局可能就会是对你系统里的另外
一个设备进行写操作了，面这可能是致命的。编译并运行iomap_setup程序，我们的测试设备就
将建立出来。操作流程如下所示：
S./icmap_setup
iomap:setup: 0xe2000000 extending 0x80000 bytes
ionap:setting up minor0
加入jaVa编程群：524621833
---
## Page 750
第21章设备留动程序733
3）现在我们有了两个测试用的设备，第一个从帧缓冲区的开始映射了0.5MB字节，第二个
紧接着第一个又映射了0.5MB字节。它们直接映射到显示适配器的显存里去，对它们的写操作将
引起屏幕图像的抖动。在继续尝试之前，先要加载上X窗口系统，然后从一个终端窗口里执行下
面的命令：
S cp/dev/1omap1/dev/1omap0
显示区也将出现在屏幕的顶部一一这次的X任务看着可够怪的。继续进行，给解幕画面顶部拷贝
一些随机数据过去：
S dd f=/dev/random of=/dev/1omap0bs=512 count=1024
21.61/O端口
态端口，也可以是连接着你的鼠标的串行端口。对端口进行的读写操作必须按它规定的数据宽
度来进行。其他平台（比如采用Alpha体系结构的计算机）没有真正的端口，只有I/O内存，它
们通过对I/O地址的读写来实现对IV/O数据的访问。
Linux里有许多能够对I/O地址进行读写的函数。它们在原理上大同小异，区别主要在端口的
数据宽度方面。注意这一小节讨论的是1/O端口而不是I/O内存，I/O内存的内容已经在上一小节
介绍过了、与这一小节内容有关的头文件主要是asm/io.h—这可是个乱精糟的大文件，自己多
注意吧。
一个给定的端口是否可用需要由驱动程序自己来检测。其他驱动程序可能已经占用了我们
正在检测的那个端口，我们可不想输出一些会引起设备误操作的数据面造成灾难性的后果。
int check_zegion(unslgned int from, unsigmed long extent)
from是我们准备测试的端口，extent是它的字节宽度。成功时函数返回“0”：如果端口已
经被其他设备占用，就会返回一些其他的值。在找到适当的端口后，我们用下面的函数申请占
用它：
vold reguest_reglon（unsigmed int from，unsigned 1ong extent, comat char *name）
void release_reglon(unsigmed int from, unsigmed long extent)
这几个函数的参数基本上都是一样的-name是出现在/proc/ioports里的名字，它们可以被
看做是/proc/devices注册链上的设备标签。端口的数据宽度可以是8字节、16字节或32字节。
—u8Inb(unelgned Int port)
._u32 Iol(unsigmed 1nt port)
u16inw（unalgnedint port)
这几个调用的含义很明显一一从端口按指定宽度读入数据。返回值是读到的数据，这些数据
会根据具体使用的计算机平台自动取为对应数据宽度的数据类型。对端口进行写操作的函数也
都差不多：
加入jaVva编程群：524621833
---
## Page 751
734Linux程序设计
voidoutb(._u8data,unsigmedintport)
void out1(_u32 data, unsigned int port)
对数据类型的要求是比较松散的，在不同的平台上会有一定的变化。其实确定数据类型并
不是1/O端口仅有的一个问题，有的平台没有固定的端口，需要通过读写某些个内存地址来模仿
它们。我们不准备对此做深人的探讨一一大家可以去研究研究内核里的某些驱动程序。
Linux还提供了一些字符串版本的函数，使我们一次能够传输更多的数据，提高效率。
voidinsb(unsigned 1nt port, vold *addr, unslgoed long count)
void outab(unsigned int port,vold *addr,unsigned long count)
addr是内存里的一个地址，数据将传输到这里或从这里传输出去；count是以端口数据宽度
为单位的数据项个数。以字或双字为长度单位的函数版本语法定义与此类似，只是函数名字里
的字母“b”要相应地改变为“w”或“1”这些函数执行得很快，比使用inb加循环的办法效
率要高很多。
21.6.1可移植性
并非所有的平台都象Intel体系结构那样有周定的I/O端口，很多计算机采用映射到内存固定
地址的办法来实现它们。不同的平台有不同的要求，所以上面介绍的这些V/O端口读写函数也不
是惟-·的手段。它们返回的数据都排列为字节的降序存储格式（即低位字节保存在低地址里），
这可能不适用于某些平台，面某些采用字节升序存储格式的平台所提供的I/O读写函数没有对字
节的存储做升降序转换处理。与各种平台有关的具体规定请参考asm/io.h文件。
21.6.2中断处理
大多数真的硬件并不依赖于poll调度功能来控制数据流，它们通过中断向驱动程序给出表示
数据可用的信号或者其他的硬件状态，驱动程序再根据这些信号采取相应的动作。编写ISR
（Interrupt ServiceRoutine，中断服务例程）一直笼罩着神秘的色彩，但这只是因为人们还不了
解在Linux里编写这样的例程其实有多么的简单。它并不需要什么特殊的操作，这是因为Linux
的中断处理器注册接口和（中断到来时最终的）中断处理接口都非常精致，而且并不复杂。
那么，中断到底是个什么东西呢？这是设备唤起设备驱动程序注意的一个办法，设备通过
中断告诉驱动程序自己需要某种方式的服务了。中断实际上就是一些信号，信号可以表示“数
据已经准备好，可以开始传输”，也可以表示“以前排在队中的命令已经执行完毕，设备可以接
受新的命令”。
中断在Linux里的内部处理与计算机的体系结构密切相关，完全依赖于平台硬件安装的中断
控制器的具体型号。如果读者对这一问题有兴趣，可以在arch//kermel/irq.c文件里查
到有关的资料“”代表你计算机的体系结构，例如对采用Intel处理器芯片的计算
机来说，这个文件可以是arch/i386/kernelirq.c。
没有分配到专用处理器的中断将由Linux负责处理，或者采取缺省的响应动作，或者简单地
屏蔽掉。通过列出/proc/interrupts子目录文件清单的办法可以查出你的系统上安装了哪些中断处
加入jaVa编程群：524621833
---
## Page 752
第21章设备驱动程序
735
理器，请看下面的片段：
CPOO
0 :
1368447
1341817
CPU1
I0-APIC-edgeinC1
N
47684
47510
I0-APIC-edge
0
I-X
keyboard
181793
182240
IO-APIC-edge
cascade
130943
130053
IO-APIC-edgesoundblaster
Setial
这是我们系统上中断处理器清单的--个片段。最左边的那一列是中断的编号，然后是每个
CPU处理过的这种中断的次数。最后两列分别是中断的类型和注册这个中断的设备。我们看到，
CPU0已经处理了130943次来自soundblaster设备的中断，面CPU1处理了130053次。0是一个特例
一定时器中断（对x86而言，其他平台可能会与此不同）一它表示系统开机引导以来定时器