再谈谈上一小节的例子，显示信用卡号显然增加了暴露的机率。SSL 确实可
以降低风险，但是最佳的解决方案是通过只显示最后四位数，从而达到彻底杜绝
风险的目的。 
为了降低对敏感数据的暴露率，你必须确认什么数据是敏感的，同时跟踪它，
并消除所有不必要的数据暴露。在本书中，我会展示一些技巧，用以帮助你实现
对很多常见敏感数据的保护。  
1.3.方法
方法
方法
方法 
就像上一节中的原则一样，开发安全应用时，还有很多方法可以使用。下面
提到的所有方法同样是我认为比较重要的。 
《PHP 安全基础详解》        www.528163.cn 提供 
某些方法是抽象的，但每一个都有实例说明如何应用及其目的。 
1.3.1. 平衡风险与可用性
平衡风险与可用性
平衡风险与可用性
平衡风险与可用性 
用户操作的友好性与安全措施是一对矛盾，在提高安全性的同时，通常会降
低可用性。在你为不合逻辑的使用者写代码时，必须要考虑到符合逻辑的正常使
用者。要达到适当的平衡的确很难，但是你必须去做好它，没有人能替代你，因
为这是你的软件。 
尽量使安全措施对用户透明，使他们感受不到它的存在。如果实在不可能，
就尽量采用用户比较常见和熟悉的方式来进行。例如，在用户访问受控信息或服
务前让他们输入用户名和密码就是一种比较好的方式。 
当你怀疑可能有非法操作时，必须意识到你可能会搞借。例如，在用户操作
时如果系统对用户身份有疑问时，通常用让用户再次录入密码。这对于合法用户
来说只是稍有不便，而对于攻击者来说则是铜墙铁壁。从技术上来说，这与提示
用户进行重新登录基本是一样的，但是在用户感受上，则有天壤之别。 
没有必要将用户踢出系统并指责他们是所谓的攻击者。当你犯错时，这些流
程会极大的降低系统的可用性，而错误是难免的。 
在本书中，我着重介绍透明和常用的安全措施，同时我建议大家对疑似攻击
行为做出小心和明智的反应。 
1.3.2. 跟踪数据
跟踪数据
跟踪数据
跟踪数据 
作为一个有安全意识的开发者，最重要的一件事就是随时跟踪数据。不只是
要知道它是什么和它在哪里，还要知道它从哪里来，要到哪里去。有时候要做到
这些是困难的，特别是当你对 WEB 的运做原理没有深入理解时。这也就是为什
么尽管有些开发者在其它开发环境中很有经验，但他对 WEB 不是很有经验时，
经常会犯错并制造安全漏洞。 
大多数人在读取 EMAIL 时，一般不会被题为"Re: Hello"之类的垃圾邮件所
欺骗，因为他们知道，这个看起来像回复的主题是能被伪造的。因此，这封邮件
不一定是对前一封主题为"Hello."的邮件的回复。简而言之，人们知道不能对这
个主题不能太信任。但是很少有人意识到发件人地址也能被伪造，他们错误地认
为它能可靠地显示这个 EMAIL 的来源。 
Web 也非常类似，我想教给大家的其中一点是如何区分可信的和不可信的数
据。做到这一点常常是不容易的，盲目的猜测并不是办法。 
PHP 通过超级全局数组如$_GET, $_POST, 及$_COOKIE 清楚地表示了用户
数据的来源。一个严格的命名体系能保证你在程序代码的任何部分知道所有数据
《PHP 安全基础详解》        www.528163.cn 提供 
的来源，这也是我一直所示范和强调的。 
知道数据在哪里进入你的程序是极为重要的，同时知道数据在哪里离开你的
程序也很重要。例如，当你使用 echo 指令时，你是在向客户端发送数据；当你
使用 mysql_query 时，你是在向 MySQL 数据库发送数据（尽管你的目的可能是
取数据）。 
在我审核 PHP 代码是否有安全漏洞时，我主要检查代码中与外部系统交互
的部分。这部分代码很有可能包含安全漏洞，因此，在开发与代码检查时必须要
加以特别仔细的注意。 
1.3.3. 过滤输入
过滤输入
过滤输入
过滤输入 
过滤是 Web 应用安全的基础。它是你验证数据合法性的过程。通过在输入
时确认对所有的数据进行过滤，你可以避免被污染（未过滤）数据在你的程序中
被误信及误用。大多数流行的 PHP 应用的漏洞最终都是因为没有对输入进行恰
当过滤造成的。 
我所指的过滤输入是指三个不同的步骤： 
l 识别输入 
l 过滤输入 
l 区分已过滤及被污染数据 
把识别输入做为第一步是因为如果你不知道它是什么，你也就不能正确地过
滤它。输入是指所有源自外部的数据。例如，所有发自客户端的是输入，但客户
端并不是唯一的外部数据源，其它如数据库和 RSS 推送等也是外部数据源。 
由用户输入的数据非常容易识别，PHP 用两个超级公用数组$_GET 和
$_POST 来存放用户输入数据。其它的输入要难识别得多，例如，$_SERVER 数
组中的很多元素是由客户端所操纵的。常常很难确认$_SERVER 数组中的哪些元
素组成了输入，所以，最好的方法是把整个数组看成输入。 
在某些情况下，你把什么作为输入取决于你的观点。例如，session 数据被
保存在服务器上，你可能不会认为 session 数据是一个外部数据源。如果你持这
种观点的话，可以把 session 数据的保存位置是在你的软件的内部。意识到 session
的保存位置的安全与软件的安全是联系在一起的事实是非常明智的。同样的观点
可以推及到数据库，你也可以把它看成你软件的一部分。 
一般来说，把 session 保存位置与数据库看成是输入是更为安全的，同时这
也是我在所有重要的 PHP 应用开发中所推荐的方法。 
《PHP 安全基础详解》        www.528163.cn 提供 
一旦识别了输入，你就可以过滤它了。过滤是一个有点正式的术语，它在平
时表述中有很多同义词，如验证、清洁及净化。尽管这些大家平时所用的术语稍
有不同，但它们都是指的同一个处理：防止非法数据进入你的应用。 
有很多种方法过滤数据，其中有一些安全性较高。最好的方法是把过滤看成
是一个检查的过程。请不要试图好心地去纠正非法数据，要让你的用户按你的规
则去做，历史证明了试图纠正非法数据往往会导致安全漏洞。例如，考虑一下下
面的试图防止目录跨越的方法（访问上层目录）。 
你能想到$_POST['filename']如何取值以使$filename 成为 Linux 系统中用户
口令文件的路径../../etc/passwd 吗？ 
答案很简单： 
.../.../etc/passwd 
这个特定的错误可以通过反复替换直至找不到为止： 
当然，函数 basename( )可以替代上面的所有逻辑，同时也能更安全地达到
目的。不过重要点是在于任何试图纠正非法数据的举动都可能导致潜在错误并允
许非法数据通过。只做检查是一个更安全的选择。 
译注：这一点深有体会，在实际项目曾经遇到过这样一件事，是对一个用户
注册和登录系统进行更改，客户希望用户名前后有空格就不能登录，结果修改时
对用户登录程序进行了更改，用 trim（）函数把输入的用户名前后的空格去掉了
（典型的好心办坏事），但是在注册时居然还是允许前后有空格！结果可想而知。 
除了把过滤做为一个检查过程之外，你还可以在可能时用白名单方法。它是
指你需要假定你正在检查的数据是非法的，除非你能证明它是合法的。换而言之，
你宁可在小心上犯错。使用这个方法，一个错误只会导致你把合法的数据当成是
非法的。尽管不想犯任何错误，但这样总比把非法数据当成合法数据要安全得多。
通过减轻犯错引起的损失，你可以提高你的应用的安全性。尽管这个想法在理论
上是很自然的，但历史证明，这是一个很有价值的方法。 
《PHP 安全基础详解》        www.528163.cn 提供 
如果你能正确可靠地识别和过滤输入，你的工作就基本完成了。最后一步是
使用一个命名约定或其它可以帮助你正确和可靠地区分已过滤和被污染数据的
方法。我推荐一个比较简单的命名约定，因为它可以同时用在面向过程和面向对
象的编程中。我用的命名约定是把所有经过滤的数据放入一个叫$clean 的数据
中。你需要用两个重要的步骤来防止被污染数据的注入： 
l 经常初始化$clean 为一个空数组。 
l 加入检查及阻止来自外部数据源的变量命名为 clean，  
实际上，只有初始化是至关紧要的，但是养成这样一个习惯也是很好的：把
所有命名为 clean 的变量认为是你的已过滤数据数组。这一步骤合理地保证了
$clean 中只包括你有意保存进去的数据，你所要负责的只是不在$clean 存在被污
染数据。 
为了巩固这些概念，考虑下面的表单，它允许用户选择三种颜色中的一种；
Please select a color: 
red 
green 
blue 
在处理这个表单的编程逻辑中，非常容易犯的错误是认为只能提交三个选择
中的一个。在第二章中你将学到，客户端能提交任何数据作为$_POST['color']的
值。为了正确地过滤数据，你需要用一个 switch 语句来进行： 
本例中首先初始化了$clean 为空数组以防止包含被污染的数据。一旦证明
$_POST['color']是 red, green, 或 blue 中的一个时，就会保存到$clean['color']变量
《PHP 安全基础详解》        www.528163.cn 提供 
中。因此，可以确信$clean['color']变量是合法的，从而在代码的其它部分使用它。
当然，你还可以在 switch 结构中加入一个 default 分支以处理非法数据的情况。
一种可能是再次显示表单并提示错误。特别小心不要试图为了友好而输出被污染
的数据。 
上面的方法对于过滤有一组已知的合法值的数据很有效，但是对于过滤有一
组已知合法字符组成的数据时就没有什么帮助。例如，你可能需要一个用户名只
能由字母及数字组成： 
尽管在这种情况下可以用正则表达式，但使用 PHP 内置函数是更完美的。
这些函数包含错误的可能性要比你自已写的代码出错的可能性要低得多，而且在
过滤逻辑中的一个错误几乎就意味着一个安全漏洞。  
1.3.4. 输出转义
输出转义
输出转义
输出转义 
另外一个 Web 应用安全的基础是对输出进行转义或对特殊字符进行编码，
以保证原意不变。例如，O'Reilly 在传送给 MySQL 数据库前需要转义成 O\'Reilly。
单引号前的反斜杠代表单引号是数据本身的一部分，而不是并不是它的本义。 
我所指的输出转义具体分为三步： 
l 识别输出 
l 输出转义 
l 区分已转义与未转义数据 
只对已过滤数据进行转义是很有必要的。尽管转义能防止很多常见安全漏
洞，但它不能替代输入过滤。被污染数据必须首先过滤然后转义。 
在对输出进行转义时，你必须先识别输出。通常，这要比识别输入简单得多，
因为它依赖于你所进行的动作。例如，识别到客户端的输出时，你可以在代码中
查找下列语句： 
echo 
《PHP 安全基础详解》        www.528163.cn 提供 