# Shiro 权限绕过的历史线（上）
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x0 前言
查阅了网上的Shiro权限绕过的文章，感觉讲得比较乱也比较杂，利用和成因点都没有很明朗的时间线,利用方式更是各种各样，导致没办法很好地学习到多次Bypass
patch的精髓，故笔者对此学习和研究了一番，希望与大家一起分享我的过程。
## 0x1 环境搭建
为了方便调试shiro包，这里采用IDEA搭建基础Shiro环境
先创建一个spring-boot的基础环境，
成功创建了一个Demo项目
接下来，由于是基于maven构造的依赖，所以我们在pom.xml添加我们想要的shiro版本，这个洞影响的是1.4.2版本以下的话,所以只要选择个shiro的版本比这个低就行了。
    package com.xq17.springboot.demo;
    import org.apache.shiro.authc.AuthenticationException;
    import org.apache.shiro.authc.AuthenticationInfo;
    import org.apache.shiro.authc.AuthenticationToken;
    import org.apache.shiro.authc.SimpleAuthenticationInfo;
    import org.apache.shiro.authz.AuthorizationInfo;
    import org.apache.shiro.realm.AuthorizingRealm;
    import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
    import org.apache.shiro.subject.PrincipalCollection;
    import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestMethod;
    import org.springframework.web.bind.annotation.ResponseBody;
    import java.util.HashMap;
    import java.util.Map;
    @SpringBootApplication
    public class DemoApplication {
        public static void main(String[] args) {
            SpringApplication.run(DemoApplication.class, args);
        }
    }
    @Controller
    class  TestController{
        @ResponseBody
        @RequestMapping(value="/hello", method= RequestMethod.GET)
        public  String hello(){
            return "Hello World!";
        }
        @ResponseBody
        @RequestMapping(value="/hello/more", method= RequestMethod.GET)
        public  String moreHello(){
            return "Hello moreHello!";
        }
        @ResponseBody
        @RequestMapping(value="/hello" +
                "" +
                "/{index}", method= RequestMethod.GET)
        public  String hello1(@PathVariable Integer index){
            return "Hello World"+ index.toString() + "!";
        }
        @ResponseBody
        @RequestMapping(value="/static/say", method = RequestMethod.GET)
        public String say(){
            return "hello, i am say";
        }
        @ResponseBody
        @RequestMapping(value="/admin/cmd", method = RequestMethod.GET)
        public String cmd(){
            return "execute command endpoint!";
        }
        @ResponseBody
        @RequestMapping(value="/admin", method = RequestMethod.GET)
        public String admin(){
            return "secret key: admin888!";
        }
        @ResponseBody
        @RequestMapping(value="/login", method = RequestMethod.GET)
        public String login(){
            return "please login to admin panel";
        }
    }
    class MyRealm extends AuthorizingRealm {
        /**
         * s权限
         * @param principals
         * @return
         */
        @Override
        protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
            return null;
        }
        /***
         *  认证
         * @param token
         * @return
         * @throws AuthenticationException
         */
        @Override
        protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
            String username = (String) token.getPrincipal();
            if("xq17".equals(username)){
                return new SimpleAuthenticationInfo(username, "123", getName());
            }
            return null;
        }
    }
    @Configuration
    class ShiroConfig {
        @Bean
        MyRealm myRealm(){
            return new MyRealm();
        }
        @Bean
        public DefaultWebSecurityManager manager(){
            DefaultWebSecurityManager manager = new DefaultWebSecurityManager();
            manager.setRealm(myRealm());
            return manager;
        }
        @Bean
        public ShiroFilterFactoryBean filterFactoryBean(){
            ShiroFilterFactoryBean factoryBean = new ShiroFilterFactoryBean();
            factoryBean.setSecurityManager(manager());
            factoryBean.setUnauthorizedUrl("/login");
            factoryBean.setLoginUrl("/login");
            Map map = new HashMap<>();
            map.put("/login", "anon");
            map.put("/static/**", "anon");
            map.put("/hello/*", "authc");
            //map.put("/admin", "authc");
            //map.put("/admin/**", "authc");
            //map.put("/admin/**", "authc");
            //map.put("/**", "authc");
            factoryBean.setFilterChainDefinitionMap(map);
            return factoryBean;
        }
    }
这里需要了解一些关于Shiro逻辑规则的前置知识:
>
>     1. anon -- org.apache.shiro.web.filter.authc.AnonymousFilter
>     2. authc -- org.apache.shiro.web.filter.authc.FormAuthenticationFilter
>     3. authcBasic --> org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter
>     4. perms --> org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
>     5. port -- org.apache.shiro.web.filter.authz.PortFilter
>     6. rest -- org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter
>     7. roles -- org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
>     8. ssl -- org.apache.shiro.web.filter.authz.SslFilter
>     9. user -- org.apache.shiro.web.filter.authc.UserFilter
>     10 logout -- org.apache.shiro.web.filter.authc.LogoutFilter
>  
>  
>  
>     anon:例子/admins/**=anon   #没有参数，表示可以匿名使用。
>     authc:例如/admins/user/**=authc   #表示需要认证(登录)才能使用，没有参数
>     roles：例子/admins/user/**=roles[admin],
> #参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，例如admins/user/**=roles["admin,guest"],
> 每个参数通过才算通过，相当于hasAllRoles()方法。
>     perms：例子/admins/user/**=perms[user:add:*],
> #参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法。
>     rest：例子/admins/user/**=rest[user],
> #根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为 post，get，delete等。
>     port：例子/admins/user/**=port[8081],
> #当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数。
>     authcBasic：例如/admins/user/**=authcBasic #没有参数表示httpBasic认证
>     ssl:例子/admins/user/**=ssl #没有参数，表示安全的url请求，协议为https
>     user:例如/admins/user/**=user #没有参数表示必须存在用户，当登入操作时不做检查
>  
>
> 然后这里我们需要重点关注就是
>
> anon 不需要验证，可以直接访问
>
> authc 需要验证，也就是我们需要bypass的地方
>
> Shiro的URL路径表达式为Ant格式:
>  
>  
>     /hello 只匹配url http://demo.com/hello
>     /h?      只匹配url  http://demo.com/h+任意一个字符
>     /hello/*  匹配url下 http://demo.com/hello/xxxx的任意内容，不匹配多个路径
>     /hello/** 匹配url下 http://demo.com/hello/xxxx/aaaa的任意内容，匹配多个路径
>  
## 0x2 CVE 时间线
这个可以从官方安全报告可以得到比较官方的时间线:
下面让我们逐步分析，这些CVE的形成原因，最后再对成因做一个总结。
## 0x3 CVE-2020-1957
###  0x3.1 漏洞简介
影响版本: shiro<1.5.2
类型: 权限绕过
其他信息:
这个洞可以追溯下[SHIRO-682](https://issues.apache.org/jira/browse/SHIRO-682)，1957
在此1.5.0版本修复的基础上实现了绕过。