# 2020网鼎杯-朱雀组-部分wp
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## PWN
###  云盾
题目基本信息：保护全开，`ubuntu16.04`上的64位`PWN`
     radish ➜ pwn1  file pwn
    pwn: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=f8298b1a21cb8759bd1d70177eca6907f0227b77, not stripped
     radish ➜ pwn1  checksec --file pwn
    [*] '/media/psf/Home/Desktop/xe7xbdx91xe9xbcx8e/pwn1/pwn'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
     radish ➜ pwn1
在IDA里面分析程序流程
映入眼帘的是程序中存在使用system函数，根据交叉引用发现存在后门函数
然后给我的反应这道题十有八九是栈溢出，开始分析程序，程序流程比较复杂，`main`函数在IDA里转伪C如下所示：
    int __cdecl __noreturn main(int argc, const char **argv, const char **envp)
    {
      char *v3; // rsi
      int i; // [rsp+Ch] [rbp-D4h]
      char *v5; // [rsp+10h] [rbp-D0h]
      char *format; // [rsp+18h] [rbp-C8h]
      char s; // [rsp+20h] [rbp-C0h]
      char v8; // [rsp+21h] [rbp-BFh]
      char v9; // [rsp+22h] [rbp-BEh]
      char v10; // [rsp+23h] [rbp-BDh]
      char v11; // [rsp+24h] [rbp-BCh]
      char v12; // [rsp+25h] [rbp-BBh]
      char v13; // [rsp+26h] [rbp-BAh]
      char v14; // [rsp+27h] [rbp-B9h]
      char dest; // [rsp+60h] [rbp-80h]
      unsigned __int64 v16; // [rsp+C8h] [rbp-18h]
      v16 = __readfsqword(0x28u);
      setbuf(stdin, 0LL);
      setbuf(stdout, 0LL);
      v3 = 0LL;
      setbuf(stderr, 0LL);
      v5 = 0LL;
      format = 0LL;
      puts("      Welcome to skShell v0.0.0!");
      puts("-----------------------------------------");
      puts("     Protected by skYunDun v0.0.0 ");
      puts("-----------------------------------------");
      puts("      skYunDun -- Industry leader");
      puts("  We are making this world safer than ever.");
      while ( 1 )
      {
        do
        {
          while ( 1 )
          {
            while ( 1 )
            {
              do
              {
                while ( 1 )
                {
                  while ( 1 )
                  {
                    printf("> ", v3);
                    v3 = (_BYTE *)(&dword_30 + 2);
                    fgets(&s, 0x32, stdin);
                    if ( s == 'l' && v8 == 's' )
                      puts("flagtpwnt1t2");
                    if ( s == 'c' )
                      break;
                    if ( s == 'v' )
                    {
                      if ( v8 == 'i' && v9 == 'm' )
                      {
                        puts("------skVim v0.0.0------");
                        if ( v10 == ' ' )
                        {
                          if ( v11 != '1' || v12 != 'n' )
                          {
                            if ( v11 != '2' || v12 != 'n' )
                            {
                              puts("[!] File not exist!");
                            }
                            else
                            {
                              format = (char *)malloc(0x30uLL);
                              if ( format )
                              {
                                printf("> ", 0x32LL);
                                v3 = format;
                                _isoc99_scanf("%70s", format);
                                puts("Done!");
                              }
                              else
                              {
                                puts("[!] Error! Bad fd detected!");
                              }
                            }
                          }
                          else
                          {
                            v5 = (char *)malloc(0x60uLL);
                            if ( v5 )
                            {
                              printf("> ", 0x32LL);
                              v3 = v5;
                              _isoc99_scanf("%70s", v5);
                              puts("Done!");
                            }
                            else
                            {
                              puts("[!] Error! Bad fd detected!");
                            }
                          }
                        }
                        else
                        {
                          puts("[!] Error! Missing an parameter!");
                        }
                      }
                    }
                    else if ( s == 'r' && v8 == 'm' && v9 == ' ' )
                    {
                      if ( v10 == '1' )
                      {
                        if ( *(v5 - 16) )
                        {
                          puts(
                            "---------------skYunDun v0.0.0---------------n"
                            "[!] Detected an heap leak!n"
                            "[!] Rolling back....");
                          v5 = 0LL;
                          format = 0LL;
                        }
                        else
                        {
                          free(v5);
                        }
                      }
                      else if ( v10 == '2' )
                      {
                        free(format);
                      }
                    }
                  }
                  if ( v8 != 'd' )
                    break;
                  if ( v9 == ' ' )
                  {
                    v3 = &v10;
                    strcpy(&dest, &v10);
                    changedir(&dest);
                  }
                }
              }
              while ( v8 != 'a' || v9 != 't' || v10 != ' ' );
              if ( v11 != '1' )
                break;
              if ( v5 )
                puts(v5);
            }
            if ( v11 == '2' )
              break;
            if ( v11 != 'f' || v12 != 'l' || v13 != 'a' || v14 != 'g' )
            {
              if ( v11 != 'p' || v12 != 'w' || v13 != 'n' )
                puts("[!] No such file!");
              else
                puts("[!] Cannot view a binary file!");
            }
            else
            {
              puts("[!] This file is protected by skYunDun");
            }
          }
        }
        while ( !format );
        for ( i = 0; ; ++i )
        {
          if ( i >= strlen(format) )
            goto LABEL_27;
          if ( format[i] == '%' && format[i + 1] == 'n'
            || format[i] == '%' && format[i + 1] == 'h'
            || format[i] == '%' && format[i + 1] == 'x' )
          {
            break;
          }
        }
        puts("---------------skYunDun v0.0.0---------------n[!] Detected an format attack!n[!] Rolling back....");
        *format = 0;
    LABEL_27:
        printf(format, 0x32LL);
        putchar(10);
      }
    }
审计一遍发现没有栈溢出，而是找到一处堆溢出！
该程序模拟实现了`linux`终端，可以执行的命令包含：
`ls`：输出固定格式，四个文件
    if ( s == 'l' && v8 == 's' )
        puts("flagtpwnt1t2");
`vim`：只能够修改文件名字为`1`和`2`的
修改文件1时程序申请0x30大小的堆块，然后用户输入70大小的字符串，这里存在堆溢出，修改文件2时程序申请0x60大小的堆块，然后用户还是输入70大小的字符串，这里就不存在溢出了
    if ( s == 'v' )
                    {
                      if ( v8 == 'i' && v9 == 'm' )
                      {
                        puts("------skVim v0.0.0------");
                        if ( v10 == ' ' )
                        {
                          if ( v11 != '1' || v12 != 'n' )
                          {
                            if ( v11 != '2' || v12 != 'n' )
                            {
                              puts("[!] File not exist!");
                            }
                            else
                            {
                              format = (char *)malloc(0x30uLL);
                              if ( format )
                              {
                                printf("> ", 0x32LL);
                                v3 = format;
                                _isoc99_scanf("%70s", format);
                                puts("Done!");
                              }
                              else
                              {
                                puts("[!] Error! Bad fd detected!");
                              }
                            }
                          }
                          else
                          {
                            v5 = (char *)malloc(0x60uLL);
                            if ( v5 )
                            {
                              printf("> ", 0x32LL);
                              v3 = v5;
                              _isoc99_scanf("%70s", v5);
                              puts("Done!");
                            }
                            else
                            {
                              puts("[!] Error! Bad fd detected!");
                            }
                          }
                        }
`cat`：只能够查看文件名字为1和2的内容
    if ( v11 != '1' )
                break;
              if ( v5 )
                puts(v5);
            }
            if ( v11 == '2' )
              break;
            if ( v11 != 'f' || v12 != 'l' || v13 != 'a' || v14 != 'g' )
            {
              if ( v11 != 'p' || v12 != 'w' || v13 != 'n' )
                puts("[!] No such file!");
              else
                puts("[!] Cannot view a binary file!");
            }
`rm`:把文件1或2的堆块给free掉，这里存在UAF漏洞，但是这里存在一个堆块结构的验证，之后在构造`payload`的时候需要注意
    else if ( s == 'r' && v8 == 'm' && v9 == ' ' )
                    {
                      if ( v10 == '1' )
                      {