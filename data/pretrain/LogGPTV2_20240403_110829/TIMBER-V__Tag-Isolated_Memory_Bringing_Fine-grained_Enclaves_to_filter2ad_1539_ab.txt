add-data(ecb, region)
add-entries(ecb, entries)
init-enclave(ecb)
load-enclave(ecb)
destroy-enclave(ecb)
resume()
Trusted enclave services
get-key(id)
shm-offer(targetEID, region)
shm-accept(ownerEID)
shm-release(region)
tag and restraining code execution to the current security do-
main. Only code interacting with untrusted memory on purpose
is left unmodiﬁed. As discussed later, this transformation adds
negligible performance overhead and we apply it to enclaves
and TagRoot as an additional layer of defense.
C. Trusted Services
We provide a small trust manager, called TagRoot, which
serves as trust anchor for bootstrapping secure enclaves and
maintaining isolated execution, as demanded by goal G1.
TagRoot offers trusted OS services to the untrusted operating
system as well as trusted enclave services to the enclaves
themselves. This includes enclave management, secure entry
points, attestation and sealing. Moreover, in contrast to existing
solutions, TagRoot supports fast enclave to enclave communi-
cation via secure shared memory, which imposes zero copying
overhead and allows m:n connectivity. TagRoot and enclaves
are fully interruptible, thus meeting goal G5.
Enclave Life Cycle. TIMBER-V enclaves are created and
loaded within an ordinary user process at the discretion of
the operating system but with assistance of TagRoot. Once
loaded, enclaves can be directly invoked by user apps to carry
out security-critical tasks. For freshly generated enclaves, one
typically provisions secret data like cryptographic keys to the
enclave via a secure remote channel. This channel is authen-
ticated using enclave attestation with assistance of TagRoot.
During its lifetime, enclaves can authenticate and communicate
with other enclaves or seal sensitive information for keeping
state across reboots, again with the help of TagRoot.
Possible Extensions. Independently of our TagRoot design,
TIMBER-V allows other trust manager designs as well. For
example, implementing trusted I/O is straight forward by tag-
ging I/O memory as trusted. Also, trusted scheduling services
requiring availability guarantees can be easily implemented in
TS-mode. However, since these additional services enlarge the
TCB, we did not implement them in our current prototype. We
discuss different design options in Section XI.
V. TAGROOT TRUST MANAGER
We develop a small trust manager for TIMBER-V, called
TagRoot. It runs in trusted supervisor mode (TS-mode) and
offers privileged trusted services to the untrusted operating
system as well as unprivileged trusted services to enclaves.
All trusted services are listed in Table II.
A. Trusted OS Services
Trusted OS services can be invoked by the operating
system via TSenter (see (iv) in Figure 1b) and provide enclave
Fig. 2: TagRoot
trusted metadata includes enclave control
blocks (ECB) and interrupt frames with unforgeable headers.
management like creation and cleanup, loading as well as han-
dling of interruption. Also, trusted OS service calls deﬁne the
enclave identity used for subsequent trusted enclave services.
Creation and Cleanup. Enclaves are identiﬁed by a data struc-
ture called enclave control block (ECB) which is kept in secure
TS-mode memory, as shown in Figure 2. ECBs are created
via create-enclave. When creating a new enclave, the
operating system can add memory regions (contiguous chunks
of memory) to it via add-region. These enclave regions
will be loaded in the MPU when the enclave is about to run.
TagRoot ensures that enclave regions will never overlap with
other enclaves but are unique to each enclave. However, as
mentioned before, an enclave region can cover app memory
as well. Thus, a single shared MPU region can hold enclave
data and app data. This is achieved by executing add-data,
which claims enclave memory by setting TU-tag, as long as the
claimed memory is within the enclave’s regions. add-data
works on a word granularity, thus supporting ﬁne-grained in-
process memory interleaving. All claimed memory (TU-tag)
constitutes the actual enclave (TU-mode), while the rest (N-
tag) constitutes the untrusted app (U-mode) (cf. processes in
Figure 1b). While the enclave can access its app counterpart,
the opposite direction is prohibited by the tag isolation policy.
Similar to enclave data, entry points are announced by a call to
add-entries. TagRoot will mark all entry points with TC-
tag, given that they belong to the enclave’s regions. Finally,
a call to init-enclave will cause TagRoot to compute a
cryptographic identity over the enclave and mark it as runnable.
Once the enclave is initialized, it cannot be altered using
the above trusted service calls but only loaded, resumed or
destroyed. At the end of an enclave’s life cycle, a call to
destroy-enclave will unload and invalidate the ECB,
preventing the enclave from further execution, clear all claimed
enclave memory, release enclave regions and clear up ECB
memory. This also reverts all enclave tags to N-tag.
Loading enclaves. In order to run an enclave, the operating
system ﬁrst loads the enclave regions into the MPU and then
calls load-enclave. If another enclave is currently loaded,
TagRoot unloads it by invalidating stale enclave MPU slots.
Next, TagRoot validates the current MPU conﬁguration, as
conﬁgured by the operating system, by acknowledging all
updated MPU slots that correspond to the enclave. Moreover,
TagRoot locks the enclave’s ECB to prevent further modiﬁca-
tions and restores its runnable or interrupted state in a special
register, called STSTATUS. Now that the enclave is loaded, it
can be entered from the app by a simple call to one of its entry
points (TUenter), or in case of interruption, it can be resumed.
Interruptibility. Trusted code execution is fully interruptible
except for a small trusted interrupt handler. Interruptibility
is necessary to support real-time tasks reacting on external
I/O events or control loops that need to run periodically in
order to meet certain stability criteria, for example. Whenever
5
an interrupt happens during enclave execution, TIMBER-V
raises a special “interrupted” CPU ﬂag that prevents re-entering
the enclave and calls the trusted trap vector of TagRoot.
TagRoot then saves the current enclave’s execution context
in a protected interrupt frame (see Figure 2) and erases
sensitive CPU registers to avoid accidental leakage of sensitive
data. Moreover, it sets the interrupted program counter to
a dedicated resume function, before giving control to the
operating system. When the operating system returns from
interrupt handling, resume gets executed. TagRoot restores
the enclave execution context, clears the “interrupted” CPU
ﬂag and resumes enclave execution. This process is completely
transparent and requires no changes to the operating system.
Moreover, it also supports interruption of TagRoot (TS-mode)
while processing trusted service calls.
Enclave Identity. From a functional perspective, enclaves are
deﬁned by their code base and initial data as well as their
entry points. To capture this, all
trusted OS service calls
from create-enclave to init-enclave contribute to
a continuous SHA256 computation, called measurement. The
measurement involves not only the sequence of trusted service
calls but also its parameters, that is, enclave regions, data
as well as entry points. The measured data is immutable
until init-enclave stores the ﬁnal measurement as enclave
identity (EID) inside the ECB and marks the enclave state as
runnable (see Figure 2). Thus, the EID reliably identiﬁes en-
claves. This concept is similar to MRENCLAVE in SGX [29].
Enclave identities are used for trusted enclave services.
B. Trusted Enclave Services
Enclaves can request trusted enclave services via TSyscalls
(see (iv) in Figure 1b). This includes sealing, attestation and
inter-enclave communication via shared memory.
Sealing and Remote Attestation. An enclave can call
get-key to generate enclave-speciﬁc cryptographic keys [1],
derived from the enclave identity (EID) and a secret platform
key Kp, which is only known to TagRoot and remote veriﬁers.
The keys are derived as follows: kid
EID = HMACKp (EID, id).
By providing an additional key identiﬁer id, the enclave can
request keys for different purposes. For example, it can derive
sealing keys for encrypting and decrypting sensitive data for
secure ofﬂine storage. Also, it can derive remote attestation
keys to compute a message authentication code (MAC) over
a challenge given by a remote veriﬁer. The remote veriﬁer
knowing the platform key Kp can then recompute the MAC,
thus remotely attesting the enclave. TagRoot can be easily
extended to asymmetric remote attestation protocols [1].
Secure Shared Memory. TagRoot supports secure shared
memory (shm) as a fast and ﬂexible inter-enclave communi-
cation method. An enclave can offer another “target” enclave
shared memory access to parts of its own enclave memory
regions via shm-offer. TIMBER-V creates a special entry
in the offering enclave’s control block (ECB), covering the
offered shm region and the target enclave’s EID. For this, the
target enclave does not need to exist yet. It can independently
accept the shm offer via shm-accept, which expects the
offering enclave’s EID as argument. When accepting shm,
TagRoot scans the existing ECBs to ﬁnd the offering enclave
via its EID. In case a valid shm offer exists, TagRoot adds
the offered shm region to the target enclave’s regions in the
ECB and also returns the memory region’s pointer back to the
enclave to help it use the shared memory. Once an enclave
has accepted a new shared memory region, it has to notify
the untrusted operating system to load the shm region into
the MPU. The target enclave can close an accepted shm by
issuing shm-release, which removes the shm from the
enclave’s memory ranges. An offering enclave can withdraw
a pending offer by offering the empty region, however it
cannot close an accepted offer. This is because TagRoot only
manipulates the ECB of the calling enclave but not the one of
the communication partner.
Our secure shared memory allows m:n connectivity be-
tween enclaves, where m is the number of offers an enclave
can make and n is the number of offers a target enclave can
accept. m is unlimited and n is only limited by the number
of enclave regions that can be stored in the ECB, which is an
implementation-deﬁned constant. Moreover, TagRoot’s shared
memory supports a transitive trust model. An owner enclave
could subsequently offer the same shared memory to other
target enclaves, thus minimizing memory usage in case of
broadcast channels, for example.
Local Attestation. Local attestation is implicitly achieved
using shared memory without
the involvement of crypto-
graphic secrets. By offering and accepting shared memory,
both involved enclaves identify their communication partner
via its EID, thus mutually attesting each other.
VI. DYNAMIC MEMORY MANAGEMENT
TIMBER-V provides highly ﬂexible and dynamic memory
management. Memory can be claimed by different security do-
mains during runtime with ﬁne granularity. Dynamic memory
has been an issue for isolated execution before. For example,
Intel SGX adds dynamic management of enclave pages in
SGXv2 via separate trusted service calls in microcode. In con-
trast to Intel SGX, TIMBER-V naturally supports much ﬁner
grained dynamic memory management by simply updating
tags. User software can directly claim or release memory via
checked store instruction without the need for trusted service
calls. This high ﬂexibility and efﬁciency enables novel appli-
cation scenarios like dynamic memory interleaving schemes.
Memory interleaving minimizes memory fragmentation by
keeping data locality across security domains. For example,
when passing large untrusted data structures to an enclave, the
enclave could avoid copying the data to enclave memory by
just updating tags. Thus, the data structures remain interleaved
within the untrusted memory. In the same way memory inter-
leaving can be used for dynamic memory management—the
dynamic allocation and deallocation of trusted memory.
In this section, we ﬁrst explain heap interleaving from
which we develop stack interleaving, a novel memory inter-
leaving scheme. We do this for both, TagRoot and enclaves,
and show that we can entirely outsource dynamic memory
from TagRoot to the untrusted operating system, thus reducing
the TCB. Finally, we show that stack interleaving supports
interrupts with arbitrary nesting levels.
A. Heap Interleaving
Heap interleaving reuses an untrusted heap to store trusted
data. To do so, trusted code ﬁrst instructs untrusted code to
6
allocate a chunk of memory on its heap. The precise heap
layout is irrelevant as long as the requested memory chunk lies
within N-tagged memory. Since the complex task of memory
allocation is now outsourced to the untrusted domains, the TCB
can be signiﬁcantly reduced. Next, the trusted code claims
the allocated memory chunk. This is done via checked store
instructions, which atomically check memory for N-tag and
update it to TS-tag or TU-tag, respectively. This protects the
newly created trusted heap object against malicious access
from the N-domains. However, care must be taken to reliably
identify trusted heap objects during their lifetime. To free a
trusted heap object, the trusted code simply clears it and reverts
its tags to N-tag by means of checked store instructions, and
notiﬁes the untrusted code to do the heap cleanup.
User Heap Interleaving. Typically, an enclave actively re-
quests heap space for trusted heap objects, which it uses
internally to satisfy its dynamic memory demand. To reliably
identify a trusted heap object, enclaves should always keep a
pointer to it inside protected enclave memory and only use
this pointer to reference the trusted object. If enclaves would
interpret untrusted function arguments as trusted heap pointers,
memory corruption attacks become possible.
Supervisor Heap Interleaving. When creating a new en-
clave, the operating system allocates a trusted enclave control
block (ECB) on its heap and calls create-enclave, which
claims the ECB for TS-mode. Since most trusted OS service
calls take the ECB as argument from the untrusted OS,
TagRoot needs means to verify its validity. This is done in
two steps. First, TagRoot accesses an ECB only via checked
memory instructions, checking for TS-tag. This prevents mis-
interpreting untrusted data as ECB. Second, since the ECB
argument could point to arbitrary TS-tagged memory, TagRoot
identiﬁes valid ECBs via an unforgeable header at the start of
each ECB, as will be explained in Section VI-C.
B. Stack Interleaving
Stack protection is crucial for isolated execution. Typically,
an execution thread is given individual stacks for every security
domain it can exercise. For example, SGX enclaves use sep-
arate secure stacks which are isolated from their hosting app.
Also, operating systems usually maintain separate kernel stacks
for each app. With TIMBER-V we can reuse the same stack
across different security domains, thus removing the need for
maintaining multiple stacks per execution thread. This reduces
memory fragmentation, which is particularly relevant for the
limited physical address space of low-end embedded systems.
Stack interleaving is a simple program transformation that
inserts additional stack allocation code. Whenever allocating a
new stack frame, we claim this memory using checked store
instructions, checking memory for N-tag and updating it to TS-
tag or TU-tag, respectively. When deallocating the stack frame,
we clear it and revert the tags to N-tag via checked stores. As
with heap interleaving, one needs means to check validity of
dynamic memory, that is, validity of stack pointers. We show
stack interleaving (i) horizontally within supervisor mode,
(ii) horizontally within user mode, and (iii) vertically across
TSyscalls. We implement stack interleaving in a separate
compilation step and defer details to Section VII.
Fig. 3: User stack interleaving with nested TUenter and ocall.
Horizontal Supervisor Stack Interleaving. When receiving
trusted OS service calls (TSenter), TagRoot reuses the S-
mode stack maintained by the untrusted operating system.
Validity of the stack pointer is implicitly checked by our stack
interleaving transformation, checking untrusted memory for N-
tag before claiming it. This prevents TagRoot from accidentally
overwriting trusted memory. If the untrusted operating system
provides an invalid sp, it can only break system’s availability,
which it can do anyway. While processing trusted service calls,
sp cannot be manipulated because TagRoot does not leave TS-
mode until the service call is ﬁnished (or interrupted).
Horizontal User Stack Interleaving. When transitioning from
an untrusted app to an enclave (TUenter), the enclave claims
and releases stack frames on the untrusted app’s stack. An
enclave might call untrusted functions from the outside, e.g., to
request dynamic heap memory or ﬁle access. Such transitions
are named “ocalls” and demand special treatment. First, a
ﬁnished ocall needs to return to the enclave’s call site, denoted
as “oret”. We achieve this by making the oret sites callable
using TC-tag, as depicted in Figure 3. Second, orets need to
be protected against misuse, as follows: An attacker could
directly jump to an oret without a corresponding ocall and
thus perform code reuse attacks. We address this by securely
pushing the return address (i.e., the address of oret) onto the
stack before doing the ocall and verifying it afterwards. Thus,
an attacker can only jump into active orets. However, the
attacker could point sp to arbitrary trusted data that contains
a valid return address. E.g., he could confuse the nesting level
of multiple ocalls by returning to a previous ocall rather than
the latest one. Consider the code in Figure 3, where both,
TUentrA and TUentrB perform ocalls, leading to a nested
call sequence denoted with numbers 1) to 6). When returning
from ocallA in step 7), an attacker could confuse the context
of oretA by pointing sp to the ﬁrst TUentrA frame instead
of the correct ﬁfth one (see upper right corner). We prevent
this by verifying the stack pointer sp at each enclave oret
site against SPTOP, which holds the sp of the latest ocall in
trusted enclave memory. To support nesting, we securely push
the previous SPTOP onto the stack and restore it afterwards.
Vertical Stack Interleaving. When enclaves request trusted
services via a TSyscall, TagRoot reuses the enclave’s stack in
the same way as outlined before. However, care must be taken
since the stack is now interleaved across different privilege
modes. Before TagRoot uses the enclave stack, it has to ensure
that sp points into the current enclave’s memory and that
it has enough space for processing the TSyscall. The stack
requirements of TSyscalls can be statically determined by
7
means of proﬁling or static code analysis. In addition, the stack
needs to be able to hold one interrupt frame.
Interrupt Handling. Stack interleaving naturally supports
interrupt handling. As outlined in Section V-A, on interruption
of trusted code TagRoot stores the current execution context
in a secure interrupt frame. With stack interleaving, TagRoot
can directly store the interrupt frame on the current stack. As
with ocalls, care must be taken since the untrusted operating
system can manipulate the stack pointer before resuming from
interruption. However, unlike before, we cannot keep a copy
of the last valid sp in secure memory (like SPTOP) because
the operating system might resume a different
interrupted
enclave ﬁrst or resume an interrupted TagRoot service call. To
allow TagRoot distinguishing valid interrupt frames from other
TS-tagged data, we introduce an unforgeable header, which
TagRoot can check on every resume call.
C. Unforgeable Headers
Trusted metadata such as ECBs or interrupt frames are
protected via unforgeable headers (see Figure 2). To make
headers unforgeable, they are tagged with TC-tag which only
TagRoot can set. ECB headers and interrupt frame headers
contain two distinct magic values which TagRoot can use
to identify valid ECBs and valid interrupt frames. TagRoot
takes care not to accidentally set the TC-tag on any other
data containing these magic values. Since headers are callable
via TC-tag, they could be misused as malicious entry points.
To prevent this, the magic values have to fulﬁll the following
property: When interpreted as assembler instruction, they shall
divert control ﬂow to some form of secure error handling (e.g.,
an endless loop “j .” or a jump to an error handler).
VII. TIMBER-V IMPLEMENTATION DETAILS
We implemented TIMBER-V on the RISC-V Spike simu-
lator and used it to run our TagRoot implementation. Subse-
quently, we give more details about tag isolation and the disam-
biguation of TUenter and TSenter, our tag-aware instructions,
the proposed code transformations, required efforts for enclave
developers, our MPU design and additional CPU registers.
Tag Isolation Policy. Our tag isolation policy is given in
Table III. N-domains can only access N-tagged memory. The
only way to enter T-domains is by fetching code tagged with
TC-tag. Depending on the current privilege mode, TIMBER-V
performs a TUenter or a TSenter. When fetching N-tagged
memory, the CPU leaves trusted execution and switches back
to the N-domains. This is denoted as TUleave and TSleave.
Enclaves in TU-mode cannot write TC-tags to prevent manip-
ulation of secure entry points. TS-tagged memory is exclusive
to TS-mode and protects trusted metadata against malicious
enclaves and the operating system. For security reasons, we
also prevent TS-mode from fetching TU-tagged memory. This
technique is well known and implemented as supervisor mode
execution prevention (SMEP) in Intel x86 CPUs [29], for
example. M-mode has full access to all tags, as it is commonly
used to emulate missing hardware features.
TUenter vs TSenter Disambiguation. Both TU-mode and
TS-mode use the same TC-tag to specify secure entry points.
If not cleanly separated, this would allow confusion attacks
between TUenter and TSenter. For example, an attacker could
TABLE III: Tag isolation policy for the memory accesses
read (r), write (w), fetch or execute (x) as well as the horizon-
tal transitions TUenter/TSenter (e) and TUleave/TSleave (l).
Access permitted
N-domains
TU-mode
TS-mode
M-mode
N-tag
rwx
rwl
rwl
rwx
TC-tag
--e
r-x
rwx
rwx
TU-tag
---
rwx
rw-
rwx
TS-tag
---
---
rwx
rwx
TABLE IV: TIMBER-V tag-aware instructions.
Checked Loads
lbct
etag, dst, src
lbuct etag, dst, src
lhct
etag, dst, src
lhuct etag, dst, src
lwct
etag, dst, src
Checked Stores
sbct etag, ntag, src, dst
shct etag, ntag, src, dst
swct etag, ntag, src, dst
Load Test Tag
ltt
etag, dst, src
spawn a malicious enclave (TU-mode). While this malicious
enclave normally cannot access other benign enclaves, the
attacker could invoke the enclave via a TSenter from S-mode
rather than a TUenter from U-mode. Hence, the malicious
enclave would execute in higher-privileged TS-mode,
thus
undermining all of TagRoot’s security guarantees. We prevent
such attacks by constraining horizontal transitions to MPU
regions of the same privilege mode: TUenter is only allowed
for user mode MPU slots, while TSenter can only target
MPU slots marked for TS-mode. TS-mode slots cannot be
manipulated from the untrusted OS. Again, this resembles
supervisor mode execution prevention [29].
MPU Design. Each MPU slot not only holds base and bound
information together with rwx access permissions but also a
TU and a TS ﬂag. Slot marked as TU are shared between