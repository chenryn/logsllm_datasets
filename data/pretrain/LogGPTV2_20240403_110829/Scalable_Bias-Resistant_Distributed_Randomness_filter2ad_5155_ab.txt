the reason peer-to-peer networks that use cryptographic hashes
as participant IDs are vulnerable to clustering attacks [41].
Strawman III. To address this issue, we wish to ensure that
a dishonest peer either cannot force the protocol to abort by
refusing to participate, or cannot beneﬁt from doing so. Using
a (t, n)-secret sharing scheme, we can force the adversary to
commit to his action before knowing which action is favorable
to him. First, all n peers, where at most f are dishonest,
distribute secret shares of their inputs using a t = f + 1
recovery threshold. Only after each peer receives n shares
will they reconstruct their inputs and generate r. The threshold
t = f + 1 prevents a dishonest peer from learning anything
about the output value. Therefore, he must blindly choose to
abort the protocol or to distribute his share. Honest peers can
then complete the protocol even if he stops participating upon
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
seeing the recovered inputs. Unfortunately, a dishonest peer
can still misbehave by producing bad shares, preventing honest
peers from successfully recovering identical secrets.
D. RandShare: Small-Scale Unbiasable Randomness Protocol
RandShare is an unbiasable randomness protocol that en-
sures unbiasability, unpredictability, and availability, but is
practical only at small scale due to O(n3) communication
overhead. RandShare introduces key concepts that we will re-
use in the more scalable RandHound protocol (Section III).
RandShare extends
the approach for distributed key-
generation in a synchronous model of Gennaro et al. [29] by
adopting a point-of-no-return strategy implemented through
the concept of a barrier, a speciﬁc point in the protocol exe-
cution after which the protocol always completes successfully,
and by extending it to the asynchronous setting, where the
adversary can break timing assumptions [14], [15].
In RandShare, the protocol output is unknown but ﬁxed as
a function of f + 1 inputs. After the barrier point, the protocol
output cannot be changed and all honest peers eventually
output the previously ﬁxed value, regardless of the adversary’s
behavior. In RandShare, we deﬁne the barrier at the point
where the ﬁrst honest member reveals the shares he holds.
We assume a Byzantine adversary and an asynchronous
network where messages are eventually delivered. Let N =
{1, . . . , n} denote the list of peers that participate in Rand-
Share and n = 3f + 1, where f is the number of dishonest
peers. Let t = f + 1 be the VSS threshold. We assume every
peer has a copy of a public key Xj for all j (cid:4)= i, and that only
valid, properly-signed messages are accepted.
Each RandShare peer i ∈ N executes the following steps:
1. Share Distribution.
q of a degree t − 1 secret
1) Select coefﬁcients aik ∈R Z
∗
(cid:2)t−1
k=0 aikxk. The secret to
sharing polynomial si(x) =
be shared is si(0) = ai0.
2) Compute polynomial commitments Aik = Gaik, for all
k ∈ {0, . . . , t − 1}, and calculate secret shares si(j) for
all j ∈ N.
3) Securely send si(j) to peer j (cid:4)= i and start a Byzantine
agreement (BA) run on si(0), by broadcasting (cid:3)Ai =
(Aik)k∈{0,...,t−1}.
2. Share Veriﬁcation.
1) Initialize a bit-vector Vi = (vi1, . . . , vin) to zero, to keep
track of valid secrets sj(0) received. Then wait until a
message with share sj(i) from each j (cid:4)= i has arrived.
2) Verify that each sj(i) is valid using (cid:3)Aj. This may be
done by checking that Sj(i) = Gsj (i) where:
t−1(cid:6)
Sj(x) =
(cid:2)t−1
k=0 ajkxk
Axk
jk = G
= Gsj (x)
k=0
3) If veriﬁcation succeeds, conﬁrm sj(i) by broadcasting the
prepare message (p, i, j, 1) as a positive vote on the BA
instance of sj(0). Otherwise, broadcast (p, i, j, sj(i)) as
a negative vote. This also includes the scenario when (cid:3)Aj
was never received.
4) If there are at least 2f + 1 positive votes for secret sj(0),
broadcast (c, i, j, 1) as a positive commitment. If there
are at least f +1 negative votes for secret sj(0), broadcast
(c, i, j, 0) as a negative commitment.
5) If there are at least 2f + 1 commits (c, i, j, x) for secret
sj(0), set vij = x. If x = 1, consider the secret
recoverable else consider secret sj(0) invalid.
3. Share Disclosure.
and determine the number of 1-entries n(cid:5) in Vi.
1) Wait until a decision has been taken for all entries of Vi
2) If n(cid:5) > f, broadcast for each 1-entry j in Vi the share
sj(i) and abort otherwise.
4. Randomness Recovery.
1) Wait until at least t shares for each j (cid:4)= i have arrived,
recover the secret sharing polynomial sj(x) through
Lagrange interpolation, and compute the secret sj(0).
2) Compute and publish the collective random string as:
n(cid:2)(cid:7)
Z =
sj(0)
j=1
RandShare achieves unbiasability, because the secret shar-
ing threshold t = f + 1 prevents dishonest peers from
recovering the honest peers’ secrets before the barrier. The
Byzantine agreement procedures ensure that all honest peers
have a consistent copy of Vi and therefore know which n(cid:5) > f
secrets will be recovered after the barrier or if the protocol run
has already failed as n(cid:5) ≤ f. Furthermore, if at least f + 1
honest members sent a success message for each share, and
thus Byzantine agreement (with at least 2f + 1 prepares) has
been achieved on the validity of these shares, each honest
peer will be able to recover every other peer’s secret value.
Unpredictability follows from the fact that the ﬁnal random
string Z contains n(cid:5) ≥ f + 1 secrets; there are at most f
malicious peers, and no honest peer will release his shares
before the barrier. Availability is ensured because f + 1 honest
nodes out of the total 2f +1 positive voters are able to recover
the secrets, given the secret-sharing threshold t = f + 1,
without the collaboration of the dishonest nodes.
III. RANDHOUND: SCALABLE, VERIFIABLE
RANDOMNESS SCAVENGING
This section presents RandHound, a scalable client/server
protocol for producing public, veriﬁable, unbiasable random-
ness. RandHound enables a client, who initiates the protocol,
to “scavenge” public randomness from an arbitrary collection
of servers. RandHound uses a commit-then-reveal approach
to generate randomness, implemented via publicly veriﬁable
secret sharing (PVSS) [52], and it uses CoSi [58] as a witness-
ing mechanism to ﬁx the protocol output and prevent client
equivocation. We ﬁrst provide an overview of RandHound and
introduce the notation and threat model. We then describe
randomness generation and veriﬁcation in detail, analyze the
protocol’s security properties, and discuss protocol extensions.
447
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
A. Protocol Overview
RandHound employs a client/server model, in which a client
invokes the services of a set of RandHound servers to produce
a random value. RandHound assumes the same threat model as
RandShare, i.e., that at most f out of at least 3f +1 participants
are dishonest. If the client is honest, we allow at most f
servers to be malicious and if the adversary controls the client
then we allow at most f − 1 malicious servers. We assume
that dishonest participants can send different but correctly
signed messages to honest participants in stages where they are
supposed to broadcast the same message to all. Furthermore,
we assume that the goal of the adversary is to bias or DoS-
attack the protocol run in the honest-client scenario, and to
bias the output in the malicious-client scenario.
We assume the client gets only one attempt to run Rand-
Hound. A dishonest client might
try to run the protocol
many times until he obtains a favorable output. However,
each protocol run uses a session conﬁguration ﬁle C that
uniquely identiﬁes a protocol run and binds it to the intended
purpose of the random output. To illustrate RandHound’s
deployment model, the client might be a lottery authority,
which must commit ahead of time to all lottery parameters
including the time and date of the lottery. A cryptographic
hash of the conﬁguration parameters in C uniquely identiﬁes
the RandHound protocol instance. If that protocol run fails
to produce an output, this failure triggers an alarm and an
investigation, and not a silent re-run of the protocol.
Honest RandHound servers enforce this “one-shot” rule
by remembering and refusing to participating in a second
protocol run with session conﬁguration C until
the time-
window deﬁned by C has passed. This memory of having
recently participated in a session for conﬁguration C is the
only state RandHound servers need to store for signiﬁcant
time; the servers are otherwise largely stateless.
RandHound improves on RandShare’s lack of scalability
by sharing secrets not directly among all other servers but
only within smaller groups of servers. RandHound servers
share their secrets only with their respective group members,
decreasing the number of shares they create and transmit. This
reduces the communication and computational overhead from
O(n3) to O(nc2), where c is the average (constant) size of
a group. The client arranges the servers into disjoint groups.
The protocol remains secure even if the client chooses a non-
random adversarial grouping, however, because the client must
employ all groups and the pidgeonhole principle ensures that
at least one group is secure.
Each server chooses its random input value and creates
shares only for other members of the same group using PVSS.
The server sends the encrypted shares to the client together
with the NIZK proofs. The client chooses a subset of server
inputs from each group, omitting servers that did not respond
on time or with proper values, thus ﬁxing each group’s secret
and consequently the output of the protocol. After the client
receives a sign-off on his choice of inputs in a global run of
CoSi, the servers decrypt and send their shares to the client.
The client, in turn, combines the recovered group secrets to
produce the ﬁnal random output Z. The client documents the
run of the protocol in a log L, or transcript, by recording
the messages he sends and receives. The transcript serves as a
third party veriﬁable proof of the produced randomness. Fig. 1
gives an overview on the RandHound design.
Client
C
S
S
Servers
S
S
Servers
S
S
PVSS Group 1
PVSS Group 2
Fig. 1. An overview of the RandHound design.
B. Description
Let G be a group of large prime order q with generator G.
Let N = {0, . . . , n−1} denote the list of nodes, let S = N\{0}
denote the list of servers and let f be the maximum number of
permitted Byzantine nodes. We require that n = 3f +1. We set
(x0, X0) as the key pair of the client and (xi, Xi) as the one
of server i > 0. Further let Tl ⊂ S, with l ∈ {0, . . . , m − 1},
be pairwise disjoint trustee groups and let tl = (cid:9)|Tl|/3(cid:10) + 1
be the secret sharing threshold for group Tl.
The publicly available session conﬁguration is denoted by
C = (X, T, f, u, w), where X = (X0, . . . , Xn−1) is the list
of public keys, T = (T0, . . . , Tm−1) is the server grouping, u
is a purpose string, and w is a timestamp. We call H(C) the
session identiﬁer. The session conﬁguration and consequently
the session identiﬁer have to be unique for each protocol run.
We assume that all nodes know the list of public keys X.
The output of RandHound is a random string Z which is
publicly veriﬁable through a transcript L.
1) Randomness Generation: RandHound’s randomness-
generation protocol has seven steps and requires three round
trips between the client and the servers; see Figure 2 for an
overview. All exchanged messages are signed by the sending
party, messages from the client to servers include the session
identiﬁer, and messages from servers to the client contain a
reply identiﬁer that is the hash of the previous client message.
We implicitly assume that client and servers always verify
message signatures and session and reply identiﬁers and that
they mark non-authentic or replayed messages and ignore them
from the rest of the protocol run.
RandHound consists of three inquiry-response phases be-
tween the client and the servers followed by the client’s
randomness recovery.
1) Initialization (Client). The client initializes a protocol
run by executing the following steps:
448
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:21:04 UTC from IEEE Xplore.  Restrictions apply. 
Client
Messages
Server i
(cid:2)I1(cid:3)x0 = (cid:2)H(C), T, u, w(cid:3)x0
(cid:2)R1i(cid:3)xi = (cid:2)H(I1), ( (cid:2)Sij, (cid:2)Pij)j∈Tl , (Aik)k∈{0,...,tl−1}, Vi(cid:3)xi
1. Initialization
2. Share-Distribution
(cid:2)I2i(cid:3)x0 = (cid:2)H(C), c, T (cid:3), ( (cid:2)Sji, (cid:2)Pji, H sj(i))j∈T (cid:2)
l
(cid:3)x0
(cid:2)R2i(cid:3)xi = (cid:2)H(I2i), ri(cid:3)xi
(cid:2)I3(cid:3)x0 = (cid:2)H(C), r, E(cid:3)x0
(cid:2)R3i(cid:3)xi = (cid:2)H(I3), (Sji, Pji)j∈T (cid:2)
l
(cid:3)xi
3. Secret-Commitment
4. Secret-Acknowledgement
5. Decryption-Request
6. Share-Decryption
1
e
s
a
h
P
2
e
s
a
h
P
3
e
s
a
h
P
7. Randomness-Recovery: Z, L
T
u, w
(cid:2)Sij / Sij
(cid:2)Pij / Pij
Aik
H si(j)
Vi, c, r, E
T (cid:3) / T (cid:3)
Z
l
L
(x0, X0) / (xi, Xi) Private and public key of client / server i
C
Session conﬁguration
Group conﬁguration
Purpose string, time stamp
Encrypted / decrypted share
Encryption / decryption consistency proof
Polynomial commitment
Share commitment
Schnorr commitment, challenge, response, exceptions
Chosen secrets overall / of group l
Collective randomness
Transcript (protocol log)
Fig. 2. An overview of the RandHound randomness generation process
a) Set the values in C and choose a random integer
rT ∈R Zq as a seed to pseudorandomly create a
balanced grouping T of S. Record C in L.
b) Prepare the message
(cid:11)I1(cid:12)x0 = (cid:11)H(C), T, u, w(cid:12)x0
,
record it in L, and broadcast it to all servers.
2) Share Distribution (Server). To distribute shares, each
trustee i ∈ Tl executes step 1 of PVSS:
a) Map H(C) to a group element H ∈ G∗, set tl =
(cid:9)|Tl|/3(cid:10) + 1, and (randomly) choose a degree tl − 1
secret sharing polynomial si(x). The secret
to-be-
shared is Si0 = Gsi(0).
b) Create polynomial commitments Aik, for all k ∈
{0, . . . , tl − 1}, and compute encrypted shares (cid:3)Sij =
c) Choose vi ∈R Zq and compute Vi = Gvi as a Schnorr
and consistency proofs (cid:3)Pij for all j ∈ Tl.
X si(j)
j
commitment.
d) Prepare the message
(cid:11)R1i(cid:12)xi = (cid:11)H(I1), (
(cid:3)Sij, (cid:3)Pij)j∈Tl
, (Aik)k∈{0,...,tl−1}, Vi(cid:12)xi
and send it back to the client.
3) Secret Commitment (Client). The client commits to the
set of shared secrets that contribute to the ﬁnal random
string, and asks servers to co-sign his choice:
a) Record each received (cid:11)R1i(cid:12)xi message in L.