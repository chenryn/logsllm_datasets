(single-key) symmetric searchable encryption (SSE), it has
long been known that simultaneously meeting separate data-
hiding and token-hiding deﬁnitions is insuﬃcient. Curtmola
et al. [17] give a stronger, all-in-one simulation-based no-
tion of security for SSE, and one could conceivably craft a
similar model for MKSE. But designing a model that ad-
dresses the full spectrum of attacks from an actively mali-
cious server—which is the explicit goal of Mylar—requires
dealing with a number of other, more challenging issues.
One issue is how to formalize active adversaries.
In
the cryptographic literature, “active” is often interpreted as
the adversary’s ability to make adaptive queries, i.e., choose
later encryption or token queries as a function of the earlier
ones. Query adaptivity is handled by many simulation-based
notions for SSE, starting with [17], and the Popa-Zeldovich
deﬁnitions allow some query adaptivity as well.
Another issue aﬀecting the modeling of active adversaries
is whether the set of documents subject to keyword search
is ﬁxed and never changed, or if documents can be deleted,
added, or updated. Web applications, including those for
which BoPETs such as Mylar are designed, are inherently
dynamic. Modern SSE deﬁnitions [10, 31, 43] model a dy-
namic document corpus and an adversary that can make
dynamic changes. Modeling a dynamic corpus for MKSE
would be more complex. An accurate deﬁnition must incor-
porate dynamic changes to the access graph. This includes
user nodes and document nodes being added, as well as ac-
cess edges being added between user and document nodes.
In the implementation of Mylar, a malicious server can
easily add a document and give any user access to it. The
Mylar paper [48] proposes a defense but it has not been
implemented, nor is it clear how to implement it in collab-
orative applications. In Section 8, we show how to exploit
this gap to break the conﬁdentiality of data and queries.
Even if the system could be proved secure relative to an
all-in-one simulation-based model for MKSE that addresses
both query adaptivity and dynamic changes to the docu-
ment corpus, this is not enough to prevent passive or active
attacks based on search access patterns, query [9] or ﬁle
injection [9,64], or passive or active attacks against the non-
search portions of the BoPET system (such as metadata).
Mylar excludes access patterns from its threat model, but
this will be small consolation for the users of the applications
whose access patterns leak sensitive information to a persis-
tent passive attacker on the server. We show how to exploit
metadata and access patterns in Mylar-based applications
in Sections 6 and 7, respectively.
4. THREAT MODELS FOR BOPETS
In the rest of this paper, we turn to the security analysis of
BoPETs and Mylar in particular. We consider three types
of attacks, in the increasing order of attacker capabilities.
A snapshot passive attack is a one-time compromise of the
server that gives the attacker a complete snapshot of the
server’s state at the time of the attack. This is the classic
“smash and grab” attack that involves an attacker breaking
in and stealing all encrypted data, unencrypted data, and
metadata stored on the server.
A persistent passive attack involves an attacker who can
fully observe the server’s operations over a period of time.
This attacker does not change the server’s actions but can
watch applications’ dynamic behavior, access patterns, and
interactions with users. Unlike a snapshot passive attacker,
a persistent passive attacker can observe how the server
evolves over time in response to interactions with users. We
propose the persistent passive attacker as a realistic model
for an honest-but-curious BoPET server.
An active attack involves an arbitrarily malicious attacker
who can tamper with messages to and from clients and per-
form any operation on the server. It can also collude with
one or more users in order to compromise conﬁdentiality of
the other users’ data and can adapt its strategy over time.
Comparison to prior threat models. Commercial BoPETs
all encrypt data before uploading to a server but are vague
about their adversary models. We believe that they pri-
marily attempt to defend against snapshot passive attackers
and network eavesdroppers. (We do not consider the latter
in this paper.) We are unable to determine if they claim
security against persistent passive or active attackers.
Some academic BoPETs claim security against active (and
therefore passive) attacks with the important caveat of ex-
cluding attacks based on access patterns or metadata [28,34,
47, 48]. This restriction stems from the fact that the state-
of-the-art PRE schemes upon which BoPETs are based leak
this information for the sake of eﬃciency.
This leakage may be inevitable, but we need methodolo-
gies for assessing the damage it can cause. Obviously, in a
real-world deployment, a malicious or compromised server
can take advantage of all available information, even the
information the designers of the system opted to “exclude”
from the security model. Our analyses reﬂect this approach,
and the passive attacks against Mylar in Sections 6 and 7
exploit what would be considered out of scope by previous
work. We believe similar attacks apply to other BoPETs.
On the other hand, the attacks in Section 8 fall squarely
within the threat model considered in [48].
5. BUILDING WEB APPLICATIONS
ON TOP OF ENCRYPTED DATA
It is diﬃcult to evaluate the security of an application
framework in isolation, without considering speciﬁc applica-
tions, since leakage can vary dramatically from application
to application depending on what data they store on the
server, what operations they perform on the data, etc.
Mylar can support a wide variety of Web applications,
but only a simple chat application called kChat is publicly
available. In addition to kChat, we ported three open-source
Meteor apps representing diﬀerent types of functionality (see
Section 5.2). We used an “updated” implementation of My-
lar [57] linked from the Mylar project website, but all issues
we found are present in the original code, too.
5.1 Porting apps to Mylar
Since the main motivation for Mylar is to preserve the
structure of the original app, our porting process is parsi-
monious and follows these principles: (1) maintain user ex-
perience of the original app; (2) follow the app’s data model
unless changes are required to encrypt conﬁdential data; (3)
change as few of the relationships between data structures
as feasible. We believe that this process reﬂects what devel-
opers would do when porting their Meteor apps to Mylar.
Except for a few cases explained in the relevant sections,
none of the vulnerabilities uncovered by our analysis arise
from the decisions we made while porting our sample apps.
All of Mylar’s changes to Meteor are done through plug-
and-play modules called packages. After adding the Mylar
packages to the app, the developer needs to mark which
ﬁelds to encrypt, which principals to use to encrypt them,
and add principal creation to the code.
Creating, viewing, and updating documents with encrypted
ﬁelds must be handled by the client. If an app accesses the
database through Meteor methods on the server, this func-
tionality needs to be moved to the client. The developer
needs to add code allowing users to share their encrypted
data and change the app to use Mylar’s encrypted search.
This is straightforward but requires creation of search ﬁlters
restricting what encrypted data a given user can search over.
Security decisions. Deciding how to create access-control
principals and which ﬁeld to encrypt with which principal
requires an understanding of how data is used and shared
within the app. These decisions are the most subtle and
critical parts of the porting process.
For apps where multiple documents are encrypted with
the same key, we created principals associated with the doc-
uments’ common feature. For example, all messages in a
chat room should be encrypted with the same key, thus prin-
cipals are associated with chat rooms. If each document is
encrypted with its own key, principals correspond to indi-
vidual documents. For example, each medical appointments
in MDaisy has its own principal.
If functionality is moved from the server to the client, the
developer may need to update user permissions for the data,
which is notoriously challenging [25]. The user must be given
enough permissions for the app to work correctly, without
enabling him to access another user’s private data.
We conjecture that many developers will struggle to make
these decisions correctly and that independently developed
Mylar apps will contain vulnerabilities caused by developers’
mistakes. Even the authors of Mylar made a security error
when porting kChat to Mylar (see Section 6.2).
5.2 Sample apps
kChat for Mylar is a chat room app released by the Mylar
authors. A user can create rooms, add other users to the
rooms they created, send messages, and search for keywords
over all messages in all rooms that he belongs to.
To ﬁnd other case-study apps, we searched the DevPost
software project showcase and GitHub for open-source Me-
teor apps that (1) work with potentially sensitive data, (2)
contain non-trivial server functionality, such as searching
over sensitive data and/or sharing between multiple users,
and (3) are straightforward to port to Mylar.
MDaisy. MDaisy is a medical appointment app. Every
user is either a patient or a member of the medical staﬀ.
Staﬀ create and manage appointments for patients. Each
appointment is associated with a procedure (e.g., MRI, CT
scan, etc.). Patients can view information about their ap-
pointments and the associated procedures.
Each appointment has its own principal that encrypts all
sensitive ﬁelds. The staﬀ member creating the appointment
grants access to the patient.
Information about diﬀerent
types of procedures is stored separately from appointments.
Each procedure has its own principal that encrypts its data.
A patient is given access to the procedure principal if they
have an appointment involving that procedure.
OpenDNA. Single-nucleotide polymorphisms (SNPs) are
locations in human DNA that vary between individuals.
OpenDNA is a Meteor app that enables users to upload the
results from DNA sequencing and testing services such as
23andMe [1] to a server and check them for risk groups, i.e.,
combinations of SNPs that indicate susceptibility to certain
conditions or diseases such as Alzheimer’s or reveal ancestry.
In the original OpenDNA app, users’ DNA is stored un-
encrypted on disk (not in MongoDB) on the server. Risk
groups are crowd-sourced and can be uploaded by any user.
Each risk group consists of one or more SNPs-genotype pairs.
When a user wants to check their DNA, the server iterates
through all risk groups, compares them to the user’s DNA,
and returns the resulting matches. OpenDNA is an example
of an open system, where any user can contribute content
to be used in other users’ searches.
We modiﬁed OpenDNA to encrypt DNA with the user’s
principal and store it in MongoDB. Risk groups are public
and not encrypted. We modiﬁed the search functionality to
work over the encrypted DNA: the client requests all risk
groups from the server, submits encrypted search tokens for
each SNP-genotype pair to the server, the server uses these
tokens to search over the user’s DNA.
MeteorShop. MeteorShop is a sample e-commerce app. A
product has an image, description, and price; products are
organized into categories and subcategories. A user adds
products to a cart, which keeps track of them and the total
price. In the ported MeteorShop, every item in the cart is
encrypted with the user’s principal.
The original MeteorShop uses the potentially insecure au-
topublish package that would push the entire database to
client. We modiﬁed MeteorShop to only send the products
of the subcategory that the user is currently viewing.
6. EXPLOITING METADATA
Client-server applications need to store metadata on the
Figure 2: A graph showing the access patterns in MDaisy. Each of the three principals and their associated ﬁelds are in a diﬀerent color.
Each encrypted ﬁeld is marked with a lock the color of the principal that encrypted it.
server. At the very least, this includes information about
which keys are used to encrypt the data and which users
have access to which principals.
In many apps, the data
structures created by the app inherently depends on users’
secrets, and even the names of data structures may reveal
sensitive information. This static metadata is available even
to a one-time, snapshot passive attacker.
6.1 Links between objects
In Mylar, every user, principal, and encrypted item is
stored in its own MongoDB document in the app’s database
on the server. Their relationships (e.g., user Foo has access
to principal Bar that was used to encrypt data Baz) form an
access graph, which is visible even to a snapshot attacker.
MDaisy.
In MDaisy, each appointment is created by a
member of the medical staﬀ and shared with only one pa-
tient. The details of the appointment are encrypted with
its unique principal, but the metadata representing the ac-
cess graph is not encrypted. Starting with an encrypted ap-
pointment, the server can ﬁnd the appointment’s encrypting
principal and then, following that principal’s wrapped keys,
ﬁnd the patients who can access the appointment. Figure 2
shows a graph of the connections from an appointment to
the patients who can access it.
Knowledge of the patients who have access to a particular
appointment can leak information about the encrypted data.
If patient Bob and doctor Alice have multiple appointments
spread over several weeks for a number of months and the
attacker knows that Alice is an oncologist, he can form a
strong hypothesis that Bob is being treated for cancer.
This leakage is inherent in any application where the se-
mantics of inter-user relationships reveal sensitive informa-
tion about users. Preventing it requires hiding the access
graph from the server—a complicated feat in its own right—as
well as hiding users’ interactions and data accesses. Tech-
niques like ORAM [24] might help protect users’ interactions
with the database at the cost of removing BoPET’s function-
ality and reducing it to dumb storage.
6.2 Names of objects
Every developer creating or using a BoPET needs to un-