title:Block Programs: Improving Efficiency of Verifiable Computation for
Circuits with Repeated Substructures
author:Gang Xu and
George T. Amariucai and
Yong Guan
Block Programs: Improving Efﬁciency of Veriﬁable
Computation for Circuits with Repeated Substructures
Gang Xu
Department of Electrical and
Computer Engineering
Iowa State University
Ames, Iowa 50011
PI:EMAIL
George Amariucai
Department of Electrical and
Computer Engineering
Iowa State University
Ames, Iowa 50011
PI:EMAIL
Yong Guan
Department of Electrical and
Computer Engineering
Iowa State University
Ames, Iowa 50011
PI:EMAIL
ABSTRACT
In the cloud computing paradigm, clients outsource com-
putation to professional service providers. However, service
providers may be error-prone or otherwise not entirely trust-
worthy, and therefore oftentimes the returned results need
to be thoroughly veriﬁed. As such, the problem of veriﬁable
computation has been motivating a rapidly-growing body of
research, yielding increasingly-eﬃcient systems, which cur-
rently achieve nearly-practical veriﬁable computation. Most
recent solutions ﬁrstly transform the computation task into
an arithmetic circuit, and then based on this circuit they
design a veriﬁcation protocol using argument systems.
In this paper we focus on the veriﬁcation protocol after
the circuit generation. We notice the state of the art in-
volve a considerable cost, including the veriﬁer’s amortized
cost, (i.e., the cost that needs to be amortized over a large
number of work instances), and the prover’s cost of proof
generation. The most eﬃcient argument systems still incur
an amortized cost that is linear in the size of the circuit. In
this paper, we show that veriﬁable computation can be made
more eﬃcient by taking advantage of computations with cor-
responding circuits containing repeated substructures (e.g.
loops). Since loops play a pivotal role in the real world of
computing (not only compute-intensive computations but
also data-intensive computations such as big data applica-
tions), we take loops as a typical example, propose a new
veriﬁcation protocol for repeated structures and show that
the circuit generated from computation with loops can in-
deed lead to a lower amortized cost and a lower cost of proof
generation. Using the theory of arithmetic circuit complex-
ity we prove that for most programs our design results in
very signiﬁcant savings. Our veriﬁcation design for loops
is based on Block Programs (BPs), an innovative encoding
scheme for circuits with repeated structures.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright c⃝ 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714631.
Categories and Subject Descriptors
F.2.0 [Theory of Computation]: Analysis of Algorithms
and Problem Complexity—General ; K.6.5 [Management
of Computing and Information Systems]: Security and
Protection
General Terms
Algorithms, Security, Theory
Keywords
Cloud computing, Big data, Veriﬁable computation, Argu-
ment systems, PCPs, QAPs, Block Programs, Amortized
costs, Loops.
1.
INTRODUCTION
The surging popularity of the cloud computing paradigm
has rendered a new type of service: computation as a com-
modity. While using this service, companies and individual
users must no longer maintain expensive computing assets.
They just outsource any burdensome computational work-
load to the cloud and enjoy additional perks, like expert
technical consulting. But while outsourcing computation
provides appealing beneﬁts, one must fully consider a criti-
cal security issue: there is no guarantee on the correctness
of the results returned by the cloud server, which may be
error-prone or otherwise not entirely trustworthy. Thus an
immediate need for result assurance naturally arises.
This need motivates a growing body of research on veri-
ﬁable computation, and in particular, works focused on ver-
iﬁcation protocols for general-purpose computation. Since
verifying the result of general computation can be abstracted
to classical problems in the theory of computation, such
as interactive proof (IP) systems [18] and probabilistically
checkable proof (PCP) systems [1, 2], the security commu-
nity naturally turned to the model of these classical proof
systems, attempting to reﬁne theory toward implementa-
tion. In their designs, the server plays the role of a prover
trying to convince the client, who plays the role of a veri-
ﬁer, that the result is correct. A recent line of work strives
for verifying computation based on argument systems [10,
21, 22], a notable variant of the PCP model. They hold a
more practical assumption that, in addition to the veriﬁer
being polynomial-time probabilistic, the prover is also com-
putationally bounded. Breakthroughs [19, 25, 26, 24, 11,
29] in argument systems have made PCP-based approaches
more practical. Another important line of work [16, 24,
40523, 7] makes attempts to adopt the recent ﬁnding of a new
characterization of the NP complexity class – the Quadratic
Span Programs (QSPs) (and Quadratic Arithmetic Programs
(QAPs)) [16]. Based on theoretical innovations of QAP
[16], a nearly practical veriﬁable computation system called
Pinocchio was introduced in [23].
In the context of veriﬁable computation, there are two
stages: one in which the outsouced computation task, which
is a piece of code written in the form of a high-level language
(e.g. C), is transformed into an arithmetic circuit, and an-
other in which the actual veriﬁcation protocol is performed
to check that the prover correctly evaluated the circuit gen-
erated in the ﬁrst stage. The core of the ﬁrst transformation
stage is a speciﬁc compiler, as known as a circuit genera-
tor. State-of-the-art compilers includes vnTinyRAM [7, 8]
and the compilers in Zaatar and Pinocchio. These compiler
techniques are beyond the scope of this paper, and we re-
view these compilers for completeness in Section 7. In this
paper, we are interested in the second stage, namely, the
actual veriﬁcation protocol.
In the rest of our paper, we
assume that the underlying circuit representation has been
generated using the aforementioned circuit generators.
Although encouraging results have been emerging,
the high costs still stymie their practicality.
In partic-
ular, the biggest performance concerns are around further
reducing the amortized cost of veriﬁcation, and reducing
the cost of proof generation. Zaatar [24] and Pinocchio [23]
are two representatives of the state of the art in veriﬁable
computation. The veriﬁcation protocols in both Zaatar and
Pinocchio can be viewed as argument systems with amortiz-
ing, namely, proof systems that require a high cost for the
veriﬁer that needs to be amortized over a large number of
work instances. In Pinocchio, the veriﬁer needs to publish
a public key and hold a matching veriﬁcation key. Both the
cost of constructing this veriﬁcation key and the public key
are amortized over all possible work instances of the same
circuit. In Zaatar, the veriﬁer must invest in the expensive
construction of the commitment and all the PCP queries be-
fore he performs the actual veriﬁcation operations for each
instance. This amortized cost grows linearly with the circuit
size in both Zaatar and Pinocchio, and it can be prohibitive,
especially for large circuits, which are widely used in many
practical scenarios. Meanwhile, the costs of proof generation
in Zaatar and Pinocchio grow at least linearly with the cir-
cuit size. Assuming the circuit size of the computation task
is S, then the cost of proof generation in Zaatar is asymp-
totically O(S · log2(S)) and the cost of proof generation in
Pinocchio is asymptotically O(S).
From a theoretical perspective, one natural question is
whether it is possible to have sub-linear time (in the size of
the circuit) amortized cost and cost of proof generation. To
the best of our knowledge, this remains an open question.
From a practical perspective, the ﬁrst requirement is to fur-
ther reduce both amortized cost and cost of proof generation,
which act as chief obstacles in veriﬁable computation.
To tackle these problems, instead of merely focusing on
optimizing current veriﬁcation algorithms regardless of the
structure of the computation tasks, like in most recent works,
in this paper we take into account the structure of the circuit
based on which the computation tasks are veriﬁed.
We observe that repeated structures play a pivotal role in
the arithmetic circuit based on which veriﬁcation protocol
is performed. The compilers of Zaatar and Pinocchio an-
alyze any high-level program piece by piece and generate
the corresponding circuit in a straightforward way: for in-
stance, loops are unrolled in a naive way. We notice that
almost every computation (e.g. Big Data!) employs loops.
Moreover, these computations are the most likely tasks to
be outsourced to the cloud server. Repeated structures show
up frequently in the circuit generated by Zaatar’s and Pinoc-
chio’s compilers. Meanwhile, vnTinyRAM universally trans-
forms any C program with ﬁxed number of execution steps
into one single arithmetic circuit, which also contains lots of
repeated subcircuits such as Cmem, Cexe and the multiplex-
ers in the Waksman networks [8].
Repeated structures (e.g. looping structures) are not well
addressed in the current research on veriﬁcation protocols.
As observed in [26, 29], looping can not be handled concisely.
Hence, if we can take advantage of repeated structures in the
circuits of these computations and handle the veriﬁcation
better, we could make veriﬁable computation more eﬃcient.
Since we use terminology of loops intensively in this paper,
we explain them here. In our paper, the loop body is the piece
of code describing the executions inside the loop. One loop
iteration refers to one execution of the loop body.
In this paper, we address the problems proposed above,
argue that veriﬁable computation can be made cheaper by
taking advantage of computations whose circuits contain re-
peated substructures (e.g. loops), and achieve cheaper veriﬁ-
able computation through eﬃcient loop-handling. Our con-
tributions are:
• We give a ﬁrst-step answer to the question of existence
of sub-linear amortized cost (in the size of the circuit)
in veriﬁable computation. We show that for circuits
that have repeated structure (e.g.
loops) we can re-
duce the amortized cost into the sum of two parts, one
of which is verifying one loop iteration (which does
not scale with the number of loop repetitions) and the
other is linear in the degree of the sub-computation
(one loop iteration) and the number of executions of
the sub-computation. (From the theory of arithmetic
circuit complexity, the latter is usually far less than the
amortized cost of existing algorithms, which is linear
in the size of the whole circuit.)
• We also reduce the prover’s cost of proof generation
from quasilinear in the size of the circuit corresponding
to the loop body (like in Zaatar) to quasilinear in the
degree of the circuit corresponding to the loop body.
• We propose Block Programs (BPs), an innovative en-
coding scheme for circuits with repeated structure, based
on which we build our veriﬁcation design for loops. As
a theoretical generalization of QAPs [16], BPs imply a
way to verify results computed by a circuit composed
of identical substructures, and may also have potential
in distributed and/or parallel computing scenarios.
• In terms of round complexity of interaction, our design
ﬁlls the gap in veriﬁable computation. More speciﬁ-
cally, our design runs only one more round than Za-
atar, but much fewer than GKR [17]. Recall that
Pinocchio-style systems are non-interactive and Zaatar
needs two rounds of interaction. However, IP-base sys-
tems (e.g. GKR) require even more rounds.
The rest of this paper is structured as follows. We formally
present the problem in Section 2. We start our demonstra-
406tion with a brief exposition of QAP and Zaatar as the pre-
liminaries in Section 3, since our protocols are related to the
works of [24, 23]. In Section 4, we propose our theoretical
result, a generalization of QAPs ([16]). Then, in Section 5,
we apply our theoretical ﬁnding to the loop structures and
describe the full solution to verifying the result computed
by a loop. In Section 6, we analyze the complexity of our
design and compare with existing work. Analysis shows the
eﬃciency of our design. We review the related work in Sec-
tion 7. Section 8 concludes our ﬁndings.
2. PROBLEM STATEMENT
In the context of cloud computing, we propose a com-
putation architecture involving two parties: the client V,
who is computationally weak, has computation tasks to be
delegated to the cloud; the cloud server P, who is com-
putationally powerful, provides computing services to the
client. After receiving the computation task, P performs
the computation and returns the results to V. Later, V runs
the veriﬁcation protocol with P to ensure the correctness
of the returned result. The computation task is a piece of
code written in a high-level programming language. In the
veriﬁcation stage, this piece of code is transformed into an
arithmetic circuit form. Existing compilers can turn high-
level programs into (non-deterministic) circuits [26, 24, 23].
Since this phase is outside the scope of the current paper,
we directly assume the computation task is formalized into
an arithmetic circuit in the veriﬁcation stage. We assume
this piece of code is a loop program and in the veriﬁcation
stage, this program is formalized into a loop circuit (we will
further illustrate loop circuits in Section 5).
3. PRELIMINARIES
3.1 Quadratic Programs
Recently Gennaro, Gentry, Parno and Raykova introduced
a new characterization of the NP complexity class – the
Quadratic Span Programs (QSPs) (and Quadratic Arithmetic
Programs (QAPs)) [16, 23]. They showed that NP can
be deﬁned as the set of languages with proofs that can
be eﬃciently veriﬁed by QSPs (or QAPs). Similarly to
PCPs – another characterization of NP, which has already
been widely used to obtain veriﬁable computation schemes
– QSPs/QAPs are considered to be well-suited for veriﬁable
computation and zero-knowledge schemes. One limitation of
QSPs is that they inherently compute boolean circuits. But
since arithmetic circuits are more natural and eﬃcient in
real-world computation tasks, we focus on QAPs, the coun-
terpart of QSPs dealing with arithmetic circuit evaluation.
′
′
Definition 1. (Quadratic Arithmetic Programs [16]) A
QAP Q over ﬁeld F contains 3 sets of W
+ 1 polynomials:
′}, and a
{Aw(t)}, {Bw(t)}, {Cw(t)}, for w ∈ {0; 1;··· ; W
target polynomial D(t). For function Ψ : FN 7→ FN
, we
say Q computes Ψ if the following holds: (z1;··· ; zN +N′ ) ∈
(∑
)
FN +N
there exist coeﬃcients zN +N′+1;··· ; zW ′ such that D(t) di-
(∑
)
w=1 zw · Aw(t) + A0(t)
w=1 zw · Cw(t) + C0(t)
vides P (t), where P (t) =
zw · Bw(t) + B0(t)
: Namely,
there exists a polynomial H(t) such that D(t) · H(t) = P (t).
is a valid assignment of Ψ’s inputs and outputs, iﬀ
(∑
)
−
W
W
·
′
′
′
′
W
w=1
Given an arithmetic circuit computing function Ψ, its cor-
responding QAP can be constructed by polynomial interpo-
lation. Consider the set of circuit wires corresponding to the
inputs and outputs of the circuit, and also the outputs of all
multiplication gates. Each one of these wires is assigned
three interpolation polynomials in Lagrange form, encoding