## 优化后的文本

### 第6章
---

#### Page 351 - 保证应用安全

**Guitar Wars**

对不起，您必须输入有效的用户名和密码才能访问此页面。

**要点：**
- PHP脚本可以使用首部来控制服务器如何向浏览器传送Web内容。
- 使用HTTP认证保护一个页面时，用户输入的用户名和口令存储在`$_SERVER`超级全局变量中。
- 内置的`header()`函数用于向浏览器发送首部，这可以用来重定向一个页面、控制页面的内容类型，或者请求对一个页面进行认证。
- HTTP认证的“基本域”是一个安全区，与特定的用户名和口令关联，允许多个页面共同得到保护。
- 使用`header()`函数向浏览器发送首部时，该函数调用必须出现在所有其他内容之前。
- 内置的`exit()`函数会退出一个PHP脚本，避免该函数调用之后执行任何代码，也不允许向浏览器发送内容。

你现在的位置: 315

---

#### Page 352 - 关于安全性的问题

**没有愚蠢的问题**

**问题：** Ethel是如何绕过Admin页面直接删除分数的？

**解答：** 实际上，删除分数的功能依赖于两个页面（Admin和Remove Score）。Admin页面提供了一系列Remove链接，这些链接指向RemoveScore页面。要删除的分数信息通过URL传递，使得RemoveScore脚本可以通过`$_GET`超级全局变量访问这些信息。如果能够构造出一个合法的URL，就可以绕过Admin页面直接删除分数。Ethel正是这样做的。她在整个网站未做保护时为RemoveScore页面建立了书签，并利用这个书签构造了一个可以直接访问RemoveScore页面的URL。

**问题：** 由于日期不同，之前的URL不再起作用了吗？

**解答：** 查看GuitarWars主页上的新日期，并将其插入到之前的URL中，就可以轻松删除新的分数。重要的是，有些人可能会通过逆向工程分析你的PHP脚本，并利用其中的漏洞。绝对不要低估这些人的能力。

**问题：** 阻止Ethel后，现在合法地删除分数是否会变得过于麻烦？

**解答：** 删除分数确实会更加麻烦，因为需要分别为Admin和Remove Score页面输入用户名和口令。但请记住，现在已经建立了一个基本域，这两个页面都在同一个安全区内。一旦在一个页面上成功认证，该用户名和口令就会在整个基本域内被记住。因此，只需成功输入一次用户名和口令，就足以解锁两个页面。

你现在的位置: 316

---

#### Page 353 - 运行测试

**创建Authorize脚本并包含在Admin和RemoveScore脚本中以提供保护：**
1. 创建一个新的文本文件，命名为`authorize.php`，并在其中输入Authorize脚本的代码。
2. 修改`admin.php`脚本，使其包含这个Authorize脚本而不是具体的HTTP认证代码。
3. 在`removescore.php`脚本的开始处增加同样的`require_once`语句，使这个脚本也通过HTTP认证得到保护。
4. 将所有脚本上传到你的Web服务器，然后尝试在Web浏览器中直接打开RemoveScore脚本。你可能需要清除浏览器中原有的所有HTTP认证会话，以便让它再次提示输入用户名和口令。大多数浏览器会记住认证域，使你不必不断重新输入用户名和口令。

**结果：** 现在Admin和Remove Score页面都需要用户名和口令。

**示例URL：**
```
http://www.guitarwars.net/removescore.php?id=106&name=Jacobt20Scorcherson&date=2008-05-01%2020:36:45&score=3897406
```

**说明：** 这个URL绕过了Admin页面并直接访问Remove Score页面。

**结论：** 不论用户如何访问，Remove Score页面都能得到保护。

你现在的位置: 317

---

#### Page 354 - 伪造分数的灾难

**高分**

**GuitarWars第2幕：克隆攻击**

不幸的是，GuitarWars世界的快乐并没有持续太久，因为应用中开始显示一些伪造的分数，抢占了合法分数的位置。这个问题再次在GuitarWars世界引起了轩然大波。显然，即使不删除分数，也完全有可能破坏GuitarWars高分表。那么，这是怎么做到的呢？

**示例高分列表：**

| 排名 | 名字 | 分数 | 日期 |
|------|------|------|------|
| 1    | Ethel Heckel | 500000 | 2008-05-02 14:02:54 |
| 2    | Jacob Scorchersoe | 389740 | 2008-05-01 20:36:45 |
| ...  | ... | ... | ... |

**问题：** 如何解决提交伪造高分的问题？请写下你的想法。

你现在的位置: 318

---

#### Page 355 - 保证应用安全

**假增实减**

直到现在，我们一直假设提交了截屏图像的高分就能通过验证。但现在完全可以断定并非如此！显而易见，作假者是Ethel。

**解决方案：** 人类仲裁是一种非常好的方法，可以改善用户所提交内容的完整性。利用仲裁，尽管新的高分可以增加到数据库中，但在仲裁人批准之前不会对公众显示。

**示例：**
```
500000 - Remove/Approve
389740 - Remove
```

**说明：** Admin为各个新的高分增加了一个“Approve”链接，以便这些分数得到批准。

你现在的位置: 319

---

#### Page 356 - GuitarWars需要人类仲裁

**安全性需要人类的干预**

即使在现代社会中，有时人类的思考仍然是不可替代的。在这种情况下，要分析一个信息并评价其是否合法，很难脱离人的参与。这里讨论的就是仲裁，在公众看到某个内容之前，要由一个人负责批准将这个内容发布到Web。

**示例：**
```
Score: 500000 - Action: Remove/Approve
Score: 389740 - Action: Remove
```

**说明：** Admin为每个新的高分增加了一个“Approve”链接，以便这些分数得到批准。

**结论：** 无畏的GuitarWars仲裁人…从不完全信任所看到的高分。

你现在的位置: 320

---

#### Page 357 - 规划GuitarWars中的仲裁

**为GuitarWars增加人类仲裁特性的工作量很大，因为这会影响到应用的很多方面。**

1. **数据库修改：** 使用ALTER TABLE语句向guitarwars表增加一个`approved`列。
2. **创建ApproveScore脚本：** 处理是否批准一个新的高分（设置`approved`列为1）。
3. **修改Admin页面：** 为尚未批准的分数显示一个“Approve”链接。
4. **修改主页查询：** 只显示经过批准的分数。

**步骤详解：**
1. **数据库修改：**
   ```sql
   ALTER TABLE guitarwars ADD COLUMN approved TINYINT;
   ```
   新的`approved`列是一个TINYINT，0表示未经批准，1表示已批准。所有新分数初始时`approved`值都为0，表示它们最初都是未经批准的。

2. **创建ApproveScore脚本：**
   ```php
   <?php
   require_once('appvars.php');
   require_once('connectvars.php');

   // 你的代码
   ?>
   ```

**结论：** 为了完成这个新的ApproveScore脚本，需要在guitarwars表中增加`approved`列，并修改AddScore脚本中的INSERT查询。

你现在的位置: 321

---

#### Page 358 - 向guitarwars表增加approved列

**用ALTER为批准项留出空间**

要向guitarwars表增加新的`approved`列，需要使用一次`ALTER TABLE`语句。

```sql
ALTER TABLE guitarwars ADD COLUMN approved TINYINT;
```

**说明：**
- 新的`approved`列是一个TINYINT，0表示未经批准，1表示已批准。
- 所有新插入的高分行中`approved`都设置为0，表示未得到批准。

**示例数据：**
```
id | date       | name        | score | screenshot  | approved
--------------------------------------------------------------
30 | 2008-05-02 | Ethel Heckel | 500000 | ethelsscore.gif | 0
31 | 2008-05-02 | Biff Jeck    | 314340 | biffscore.gif   | 0
32 | 2008-05-02 | Pez Law      | 322710 | pezsscore.gif   | 0
```

**结论：** 增加一个新列意味着AddScore脚本中的INSERT查询要增加一个新值。为了完成这个新的ApproveScore脚本，需要在guitarwars表中增加`approved`列，并修改AddScore脚本中的INSERT查询。

你现在的位置: 322

---