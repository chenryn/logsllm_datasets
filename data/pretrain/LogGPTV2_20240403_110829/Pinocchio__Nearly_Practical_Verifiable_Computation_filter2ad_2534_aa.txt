title:Pinocchio: Nearly Practical Verifiable Computation
author:Bryan Parno and
Jon Howell and
Craig Gentry and
Mariana Raykova
2013 IEEE Symposium on Security and Privacy
Pinocchio: Nearly Practical Veriﬁable Computation
Bryan Parno
Jon Howell
Microsoft Research
Abstract
To instill greater conﬁdence in computations outsourced to
the cloud, clients should be able to verify the correctness
of the results returned. To this end, we introduce Pinoc-
chio, a built system for efﬁciently verifying general computa-
tions while relying only on cryptographic assumptions. With
Pinocchio, the client creates a public evaluation key to de-
scribe her computation; this setup is proportional to evalu-
ating the computation once. The worker then evaluates the
computation on a particular input and uses the evaluation key
to produce a proof of correctness. The proof is only 288
bytes, regardless of the computation performed or the size of
the inputs and outputs. Anyone can use a public veriﬁcation
key to check the proof.
Introduction
Crucially, our evaluation on seven applications demon-
strates that Pinocchio is efﬁcient in practice too. Pinocchio’s
veriﬁcation time is typically 10ms: 5-7 orders of magni-
tude less than previous work; indeed Pinocchio is the ﬁrst
general-purpose system to demonstrate veriﬁcation cheaper
than native execution (for some apps). Pinocchio also reduces
the worker’s proof effort by an additional 19-60×. As an
additional feature, Pinocchio generalizes to zero-knowledge
proofs at a negligible cost over the base protocol. Finally, to
aid development, Pinocchio provides an end-to-end toolchain
that compiles a subset of C into programs that implement the
veriﬁable computation protocol.
1
Since computational power is often asymmetric (particularly
for mobile devices), a relatively weak client may wish to out-
source computation to one or more powerful workers. Com-
mon examples include cloud or grid computing, as well as
volunteer distributed computing [1]. In all of these settings,
the client should be able to verify the results returned, to guard
against malicious or malfunctioning workers. Even from a
legitimate worker’s perspective, veriﬁable results are beneﬁ-
cial, since they are likely to command a higher price. They
also allow the worker to shed liability: any undesired outputs
are provably the result of data the client supplied.
Considerable systems and theory research has looked at the
problem of verifying computation (§6). However, most of
this work has either been function speciﬁc, relied on assump-
tions we prefer to avoid, or simply failed to pass basic prac-
ticality requirements. Function speciﬁc solutions [2–6] are
often efﬁcient, but only for a narrow class of computations.
More general solutions often rely on assumptions that may
not apply. For example, systems based on replication [1, 7, 8]
assume uncorrelated failures, while those based on Trusted
Craig Gentry
Mariana Raykova
IBM Research
Computing [9–11] or other secure hardware [12–15] assume
that physical protections cannot be defeated. Finally, the the-
ory community has produced a number of beautiful, general-
purpose protocols [16–23] that offer compelling asymptotics.
In practice however, because they rely on complex Probabilis-
tically Checkable Proofs (PCPs) [17] or fully-homomorphic
encryption (FHE) [24], the performance is unacceptable –
verifying small instances would take hundreds to trillions of
years (§5.2). Very recent work [25–28] has improved these
protocols considerably, but efﬁciency is still problematic, and
the protocols lack features like public veriﬁcation.
In contrast, we describe Pinocchio, a concrete system for
efﬁciently verifying general computations while making only
cryptographic assumptions. In particular, Pinocchio supports
public veriﬁable computation [22, 29], which allows an un-
trusted worker to produce signatures of computation.
Ini-
tially, the client chooses a function and generates a public
evaluation key and a (small) public veriﬁcation key. Given
the evaluation key, a worker can choose an input (or veriﬁ-
ably use one provided by the client), compute the function,
and produce a proof (or signature) to accompany the result.
Anyone (not just the client) can then use the veriﬁcation key
to check the correctness of the worker’s result for the spe-
ciﬁc input used. As an additional feature, Pinocchio supports
zero-knowledge veriﬁable computation, in which the worker
convinces the client that it knows an input with a particular
property, without revealing any information about the input.
Pinocchio’s asymptotics are excellent: key setup and proof
generation require cryptographic effort linear in the size of
the original computation, and veriﬁcation requires time linear
in the size of the inputs and outputs. Even more surprising,
Pinocchio’s proof is constant sized, regardless of the compu-
tation performed. Crucially, our evaluation (§5) demonstrates
that these asymptotics come with small constants, making
Pinocchio close to practical for a variety of applications.
Compared with previous work, Pinocchio improves veri-
ﬁcation time by 5-7 orders of magnitude and requires less
than 10ms in most conﬁgurations, enabling it to beat native
C execution for some apps. We also improve the worker’s
proof efforts by 19-60× relative to prior work. The resulting
proof is tiny, 288 bytes (only slightly more than an RSA-2048
signature), regardless of the computation. Making a compu-
tation zero-knowledge is also cheap, adding negligible over-
head (213µs to key generation and 0.1% to proof generation).
While these improvements are promising, additional
progress is likely needed before the overhead reaches true
practicality. However, even now, this overhead may be ac-
ceptable in scenarios that require high assurance, or that need
the zero-knowledge properties Pinocchio supports.
1081-6011/13 $26.00 © 2013 IEEE
DOI 10.1109/SP.2013.47
238
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:11 UTC from IEEE Xplore.  Restrictions apply. 
Figure 1: Overview of Pinocchio’s Toolchain. Pinocchio takes a
high-level C program all the way through to a distributed set of exe-
cutables that run the program in a veriﬁed fashion. It supports both
arithmetic circuits, via Quadratic Arithmetic Programs (§2.2.1), and
Boolean circuits via Quadratic Span Programs (§2.2.2).
To achieve efﬁcient veriﬁable computation, Pinocchio
combines quadratic programs, a computational model intro-
duced by Gennaro et al. [30], with a series of theoretical re-
ﬁnements and systems engineering to produce an end-to-end
toolchain for verifying computations. Speciﬁcally, via an im-
proved protocol and proof technique, we slash the cost of key
generation by 61%, and the cost of producing a proof by 64%.
From a developer’s perspective, Pinocchio provides a com-
piler that transforms C code into a circuit representation (we
support both Boolean and arithmetic), converts the circuit into
a quadratic program, and then generates programs to execute
the cryptographic protocol (Fig. 1).
Pinocchio’s end-to-end toolchain, plus its support for both
Boolean and arithmetic circuits, allows us to implement real
applications that beneﬁt from veriﬁcation. In particular, we
implement two forms of matrix multiplication, multivari-
ate polynomial evaluation, image matching, all-pairs shortest
paths, a lattice-gas scientiﬁc simulator, and SHA-1. We ﬁnd
(§5) that the ﬁrst three apps translate efﬁciently into arith-
metic circuits, and hence Pinocchio can verify their results
faster than native execution of the same program. The lat-
ter four apps translate less efﬁciently, due to their reliance on
inequality comparisons and bitwise operations, and yet they
may still be useful for zero-knowledge applications.
Contributions. In summary, this paper contributes:
1. An end-to-end system for efﬁciently verifying computa-
tion performed by one or more untrusted workers. This
includes a compiler that converts C code into a format
suitable for veriﬁcation, as well as a suite of tools for
running the actual protocol.
2. Theoretical and systems-level improvements that bring
performance down by 5-7 orders of magnitude, and
hence into the realm of plausibility.
3. An evaluation on seven real C applications, showing ver-
iﬁcation faster than 32-bit native integer execution for
some apps.
2 Background
2.1 Veriﬁable Computation (VC)
A public veriﬁable computation (VC) scheme allows a com-
putationally limited client to outsource to a worker the eval-
uation of a function F on input u. The client can then verify
the correctness of the returned result F(u) while performing
less work than required for the function evaluation.
More formally, we deﬁne public VC as follows, generaliz-
ing previous deﬁnitions [22, 29, 30].
Deﬁnition 1 (Public Veriﬁable Computation) A
public
veriﬁable computation scheme V C consists of a set of three
polynomial-time
(KeyGen, Compute, Verify)
deﬁned as follows.
algorithms
• (EKF ,V KF ) ← KeyGen(F,1λ): The randomized key
generation algorithm takes the function F to be out-
sourced and security parameter λ; it outputs a public
evaluation key EKF, and a public veriﬁcation key V KF.
• (y,πy) ← Compute(EKF ,u): The deterministic worker
algorithm uses the public evaluation key EKF and input
u. It outputs y ← F(u) and a proof πy of y’s correctness.
• {0,1} ← Verify(V KF ,u,y,πy): Given the veriﬁcation
key V KF, the deterministic veriﬁcation algorithm out-
puts 1 if F(u) = y, and 0 otherwise.
rity, and efﬁciency [30], so we merely summarize:
Prior work gives formal deﬁnitions for correctness, secu-
• Correctness For any function F, and any input u
if we run (EKF ,V KF ) ← KeyGen(F,1λ) and
to F,
(y,πy) ← Compute(EKF ,u), then we always get 1 =
Verify(V KF ,u,y,πy).
• Security
For
any
function
probabilistic
polynomial-time
Pr[( ˆu, ˆy, ˆπy) ← A(EKF ,V KF )
1 = Verify(V KF , ˆu, ˆy, ˆπy)] ≤ negl(λ).
any
A,
and
• Efﬁciency KeyGen is assumed to be a one-time opera-
tion whose cost is amortized over many calculations, but
we require that Verify is cheaper than evaluating F.
F
and
adversary
(cid:54)= ˆy
: F( ˆu)
Several previous VC schemes [22, 23] were not public, but
rather designated veriﬁer, meaning that the veriﬁcation key
V KF must be kept secret. Indeed, in these schemes, even re-
vealing the output of the veriﬁcation function (i.e., whether
or not the worker had been caught cheating) could lead to at-
tacks on the system. A public VC scheme avoids such issues.
Zero-Knowledge Veriﬁable Computation. We also con-
sider an extended setting where the outsourced computation
is a function, F(u,w), of two inputs: the client’s input u and
an auxiliary input w from the worker. A VC scheme is zero-
knowledge if the client learns nothing about the worker’s in-
put beyond the output of the computation.1
Zero knowledge is relevant to practical scenarios where the
worker’s input is private. For example, to anonymously au-
thenticate, the worker’s input w might be a signature from a
third party; the client’s input u is the third party’s public key,
and the function F(u,w) validates the signature. The client
learns that the worker holds a valid credential, but learns noth-
ing about the credential itself. Another potential application
is for privately aggregating sensitive data, for example, in the
1Such a scheme may also be referred to as a non-interactive zero knowl-
edge (NIZK) proof [31].
239
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:52:11 UTC from IEEE Xplore.  Restrictions apply. 
CILC exprsARITHGATES+, *, splitQAPpolynomialsECCveriﬁcationBOOLGATESQSPpolynomialshigh-levellanguagelow-levellogicsatisﬁabilityencodingveriﬁcationprotocolv1(ri)
v2(ri)
v3(ri)
v4(ri)
v5(ri)
v6(ri)
(r5,r6)
(0,1) w1(ri)
(0,1) w2(ri)
(1,0) w3(ri)
(0,0) w4(ri)
(0,0) w5(ri)
(0,0) w6(ri)
(r5,r6)
(0,0)
(0,0)
(0,0)
(1,0)
(0,1)
(0,0)
(r5,r6)
y1(ri)
(0,0)
y2(ri)
(0,0)
y3(ri)
(0,0)
y4(ri)
(0,0)
y5(ri)
(1,0)
y6(ri) (0,1)
t(x) = (x− r5)(x− r6)
Figure 2: Arithmetic Circuit and Equivalent QAP. Each wire
value comes from, and all operations are performed over, a ﬁeld F.
The polynomials in the QAP are deﬁned in terms of their evaluations
at the two roots, r5 and r6. See text for details.
context of smart-meter billing [32], where individual meter
readings should be private to the client, but the utility needs
to authenticate the aggregate amount owed.
2.2 Quadratic Programs
Gennaro, Gentry, Parno, and Raykova (GGPR) recently
showed how to compactly encode computations as quadratic
programs [30], so as to obtain efﬁcient VC and zero-
knowledge VC schemes. Speciﬁcally, they show how to con-
vert any arithmetic circuit into a comparably sized Quadratic
Arithmetic Program (QAP), and any Boolean circuit into a
comparably sized Quadratic Span Program (QSP). We sum-
marize these transformations.
Standard results show that polynomially-sized circuits are
equivalent (up to a logarithmic factor) to Turing machines that
run in polynomial time [33], though of course the actual ef-
ﬁciency of computing via circuits versus on native hardware
depends heavily on the application (e.g., an arithmetic cir-
cuit for matrix multiplication adds essentially no overhead,
whereas a Boolean circuit for integer multiplication is less
efﬁcient than executing a single 32-bit assembly instruction).
2.2.1 Arithmetic Circuits and QAPs
An arithmetic circuit consists of wires that carry values from
a ﬁeld F and connect to addition and multiplication gates –
see Figure 2 for an example. We deﬁne a QAP, an encoding
of such a circuit, as follows.
Deﬁnition 2 (Quadratic Arithmetic Program (QAP) [30])
A QAP Q over ﬁeld F contains three sets of m+1 polynomials
V = {vk(x)}, W = {wk(x)},Y = {yk(x)}, for k ∈ {0 . . .m},
and a target polynomial t(x). Suppose F is a function that
takes as input n elements of F and outputs n(cid:48) elements, for
a total of N = n + n(cid:48) I/O elements. Then we say that Q
computes F if: (c1, . . . ,cN) ∈ FN is a valid assignment of
F’s inputs and outputs, if and only if there exist coefﬁcients
(cN+1, . . . ,cm) such that t(x) divides p(x), where:
(cid:32)
p(x) =
−
(cid:32)
(cid:33)
(cid:32)
(cid:33)