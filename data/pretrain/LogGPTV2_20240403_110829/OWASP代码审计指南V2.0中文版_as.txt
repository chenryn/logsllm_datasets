小的输入，并且总是产生相同大小的输出(对于算法)。目的不是在以后
将指纹转换回源数据，而是对两组数据运行哈希算法，以确定它们是否
产生相同的指纹。这将表明数据没有被篡改。 
盐 
可以添加到哈希算法中以修改指纹结果的非秘密值。针对哈希算法的一
种攻击是“彩虹表攻击”，即预先计算所有的源值并生成一个表。然后，
攻击者可以提取指纹，在表中查找，并将其与原始数据对应起来。为每
179 
个要哈希的数据使用唯一的 salt 值可以防止彩虹表，因为需要为每个
salt 值创建彩虹表，这将大大延长攻击者花费的时间。盐不是密钥，可
以和指纹一起储存或发送。 
加密算法 
将源数据转换为加密的形式，该形式可以反转回原始源。通常用于加密
的算法是众所周知的，但是依赖于一个秘密的“密钥”来指导转换。没
有密钥的攻击者不应该能够将数据转换回原始源。 
对称加密 
一种加密形式，发送方和接收方都知道相同的密钥。这是一种快速的加
密形式，但是需要一种安全的带外方法来在发送方和接收方之间传递对
称密钥 
非对称加密 
一种使用两个密钥的加密形式，一个用于加密数据，另一个用于将数据
解密回其原始形式。这是一种较慢的加密方法，但是其中一个密钥可以
公开(称为“公钥”)。另一个密钥被称为“私钥”，并且是保密的。任
何用公钥加密的数据都可以用私钥解密成原来的形式。同样，用私钥加
密的任何数据都可以用公钥解密回其原始形式。 
证书 
实体（例如，人，公司）和公钥之间的关联。 通常，这形成了公共密钥
基础结构的一部分，其中某些受信任的实体（例如，Internet TLS 中的
证书颁发机构）执行授权证书的验证并断言（使用其自己的证书）声明
的公共密钥属于该实体 
3.6.3 审计内容:传输中的保护 
安全套接字层(SSL)和传输层安全性(TLS)这两个术语经常互换使用。其实 SSL v3.1 相
180 
当于 TLS v1.0，但是不同版本的 SSL 和 TLS 都是现代 web 浏览器和大多数现代 web 框架
和平台支持的。请注意，从针对 SSL 协议的攻击的发展表明它对攻击的抵抗力较弱，因此
本指南将使用术语 TLS 来指代通过 HTTP 或 TCP 协议的传输层安全性。 
传输层安全性的主要好处是，当 web 应用程序数据在客户端(web 浏览器)和 web 应用
程序服务器之间，以及在 web 应用程序服务器和后端以及其他基于非浏览器的企业组件之
间传输时，它可以保护 web 应用程序数据免受未经授权的泄露和修改。 
理论上，使用 TLS 保护计算机间通信的决定应基于接口上可用的流量或功能的性质。
如果敏感信息通过接口，TLS 将阻止窃听者查看或修改数据。同样，如果接口允许转账或敏
感功能操作，则 TLS 将保护授权用户执行这些功能的相关登录或会话信息。然而，随着证
书价格的下降，框架内的 TLS 配置变得更加容易，对接口的 TLS 保护并不是一项大的工作，
许多网站正在对其整个站点使用 TLS 保护(即，只有 HTTPS 网页，没有 HTTP 网页可用)。 
TLS 的服务器验证组件向客户端提供服务器的身份验证。如果配置为需要客户端证书，
TLS 还可以在向服务器进行客户端身份验证时发挥作用。然而，在实践中，客户端证书并不
经常用来代替基于用户名和密码的客户端身份验证模型。 
3.6.3.1 使用经验证的实现 
美国政府提供了一份软件清单，这些软件已经过验证，可以为各种加密功能(包括 TLS
中使用的功能)提供强大而安全的实现。该清单被称为 FIPS 140-2 验证密码模块。 
密码模块，无论是软件库还是硬件设备，都实现密码算法(对称和非对称算法、哈希算
法、随机数生成器算法和消息认证码算法)。密码模块及其服务(以及调用密码模块的 web
应用程序)的安全性取决于这三个部分的正确实现和集成。此外，必须安全地使用和访问密
181 
码模块。为了充分利用 TLS 的优势，需要使用已经过 FIPS 140-2 验证的组件(例如，库、
网络框架、网络应用服务器)。此外，密码模块必须以批准或允许的模式安装、配置和运行，
以提供 FIPS 140-2 验证密码模块以预期方式提供预期安全服务的高度确定性。 
审计处理 TLS 加密的设计或代码时，需要注意的事项包括: 
⚫ 
使用 TLS 登录页面和任何已验证页面。登录登录页面如果不使用 TLS，攻击者可
能会修改登录表单操作，导致用户的凭据被张贴到任意位置。登录后未能对经过身
份验证的页面使用 TLS，会使得攻击者能够查看未加密的会话标识，危及用户经过
身份验证的会话。 
⚫ 
当传输敏感数据或暴露已验证的功能时，在内部使用顶级域名系统。所有传输敏感
数据的外部和内部网络都必须利用 TLS 或等效的传输层安全机制。仅仅声称内部
网络的访问权限“仅限于员工”是不够的。最近的大量数据泄露表明，攻击者可以
攻破内部网络。在这些攻击中，安装了嗅探器来访问内部网络上发送的未加密敏感
数据。 
⚫ 
希望所有界面(或页面)仅在 HTTPS 可访问。通过 TLS 可用的所有页面不得通过非
TLS 连接可用。用户可能会无意中添加书签或手动键入指向某个网页的网址(例如。
http://example.com/myaccount)。 
⚫ 
Cookie 设置“secure”和“http-only”属性。如果不使用“secure”标志，攻
击者就可以通过欺骗用户的浏览器向网站上未加密的页面提交请求来访问会话
cookie。“http-only”标志拒绝 JavaScript 函数访问 cookies 内容。 
⚫ 
请勿将敏感数据放在网址中。TLS 将保护网络流量的内容，包括传输时的网址，但
是请记住，网址在浏览器历史设置中是可见的，并且通常是在服务器日志中明文显
182 
示。 
⚫ 
防止缓存敏感数据。TLS 协议只为传输中的数据提供机密性，但它无助于解决客户
端或中间代理的潜在数据泄漏问题。 
⚫ 
对高风险接口使用超文本传输协议严格传输安全(HSTS)。HSTS 将阻止任何网络客
户端试图通过非 TLS 协议连接到您的网站。从服务器端的角度来看，如果没有提
供 TLS 功能，这可能看起来无关紧要，但是设置 HSTS 的网站确实可以保护客户
端免受其他攻击(例如。域名系统缓存中毒)。 
⚫ 
使用 2048 长度(及以上)的密钥和 SHA-256(及以上)版本。用于生成密钥的私钥对
于私钥和相应证书的寿命必须足够强。目前的最佳做法是选择至少 2048 位的密钥
大小。请注意，对 SHA-1 的攻击已经显示出弱点，目前的最佳做法是至少使用
SHA-256 或等效算法。 
⚫ 
仅在您的证书中使用指定的合法的域名。请勿使用通配符证书或RFC 1918地址(例
如。10.*或 192.168.*). 如果您需要支持多个域名，请使用主题备用名(SANs)，它
提供了证书有效的多个域名的特定列表。例如，证书可以列出主体的 CN 为
example.com，并列出两个 SAn:abc.example.com 和 xyz。com。这些证书有
时被称为“多域证书”。 
⚫ 
始终提供链中的所有证书。当用户收到服务器或主机的证书时，必须向受信任的根
证书颁发机构验证该证书，这就是所谓的路径验证。终端实体(服务器或主机)证书
和根证书之间可以有一个或多个中间证书。除了验证两个端点之外，客户端软件还
必须验证所有中间证书，如果客户端没有证书，这可能会导致验证失败。很多移动
平台都会出现这种情况。 
183 
3.6.4 审计内容:静态保护 
作为一般建议，公司不应创建自己的自定义加密库和算法。开发密码算法的团体、组织
和个人与用软件或硬件实现密码算法的团体、组织和个人之间有很大的区别。使用由专家开
发并经过行业测试的已建立的加密库是在公司代码中实现加密功能的最安全的方法。下表涵
盖了各种语言和环境中使用的库的一些常见示例。 
表:根据开发平台匹配的常见加密算法 
语言 
库 
描述 
C# .NET 
System.Security.Cryptography 对于用 C＃.NET 编码的应用程序，应
使
用
“ System.Security.Cryptography”
中的类库和实现。 .NET 中的此命名空
间旨在提供许多不需要使用加密技术
的封装实现。 
C/C++(Win3
2) 
CryptoAPI 和 DPAPI 
对于在 Win32 平台上运行的 C / C ++
代码，建议使用 CreyptoAPI 和 DPAPI 
C/C++(Linux) OpenSSL,NSS, boringssl 
对于 Linux / Unix 操作系统上的 C / C 
++，请使用 OpenSSL，NSS 或这些库
的众多分支之一。 
ASP 
CryptoAPI 和 DPAPI 
传统的 ASP 页面无法直接访问密码功
能，因此唯一的方法是在 Visual C ++
184 
或 Visual Basic 中创建 COM 包装器，
从而实现对 CryptoAPI 或 DPAPI 的调
用。 然后使用 Server.CreateObject
方法从 ASP 页面调用它们。 
Java 
Java Cryptography 
Extension,BouncyCastle, 
Spring Security 
JCE 是任何加密库都可以实现的标准
API，以向开发人员提供加密功能。 
Oracle 提供了推荐充当加密服务提供
商和/或提供 JCE 的实现的公司列表。 
BouncyCastle 在更流行的实现中。在
已经使用 Spring 的应用程序中，
Spring Secuirty 也很流行。 
在源代码中实现健壮加密机制的一种安全方法是使用符合 FIPS [7]标准的算法，并使用
微软数据保护应用编程接口(DPAPI) [4]或 Java 加密扩展(JCE) [5]。 
公司在建立密码时，应确定以下最低标准策略: 
⚫ 
应用程序将使用哪些标准算法 
⚫ 
支持的最小键长度 
⚫ 
哪些类型的数据必须加密 
查看代码处理加密时，请注意: 
⚫ 
是否使用了足够强的加密算法，这些算法的实现是否符合 FIPS-140 标准。 
185 
⚫ 
使用的加密算法类型是否正确，数据是否经过哈希处理，是否应该使用对称密钥进
行加密？如果无法安全地将对称密钥传送给另一方，是否使用了公钥加密算法？ 
⚫ 
在任何密码系统中，密钥保护是最重要的方面。对称密钥或私钥的暴露意味着加密
数据不再是私有的。严格控制谁有权输入或查看密钥，以及如何在应用程序中使用
密钥。 
⚫ 
任何实施加密流程和算法的代码都应根据一套公司或监管规范进行审计和审计。对
于组织认为的“强加密”是什么，需要做出高层次的决策(并不断地重新审视)，所
有的实施实例都应该遵守这个标准。 
⚫ 
加密模块必须在多线程实现的高负载下进行测试，并且应该审计每一段加密数据，
以确保其被正确加密和解密。 
⚫ 
在.MSDN 库安全实践中密码学的例子.NET Framework 2.0 安全实践汇总如下： 
◼ 
审计是否使用了数据保护应用编程接口。 
◼ 
验证没有使用专有算法。 
◼ 
审计 PRNG 是否使用 RNGCryptoServiceProvider。 
◼ 
验证密钥长度至少为 128 位。 
⚫ 
在 ASP 中，在组件包装器上执行所有上述这些审计。 
⚫ 
对于 Java，审计是否使用了 Java 加密扩展(JCE) 
◼ 
验证没有使用专有算法 
◼ 
审计 PRNG 是否使用了安全令牌(或类似工具) 
186 
◼ 
验证密钥长度至少为 128 位 
3.6.4.1 不良做法:使用不安全的加密算法 
DES 和 SHA-0 算法在密码上是不安全的。示例 12.1 中的示例概述了不应使用的使用
DES 的加密模块(可使用 Java 加密扩展获得)。此外，在未来的新应用中，应避免使用 SHA-1
和 MD5。 
示例： 
package org.badexample.crypto; 
try { 
/** Step 1. Generate a DES key using KeyGenerator */ 