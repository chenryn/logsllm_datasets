"百万合约之母以太坊的漏洞攻防术（下集\)")权限控制漏洞小节。
· EOS 的入口函数 apply 里通常要验证发送者的身份，如果错误地使用了 if (code == receiver )
判断，认证可以被绕过。具体案例可查看[EOS菠菜应用篇](https://mp.weixin.qq.com/s/QAvFyfAetlwF3Vow-liEew
"EOS菠菜应用篇")合约对用户权限控制不当 — apply 函数小节。
权限控制不当的表现方式多种多样，如2020 年 8 月 5 日，Opyn 合约遭遇黑客攻击。原因在于 vaultToExerciseFrom
的校验存在缺陷。此检查未校验 vaultToExerciseFrom 是否是调用者自己，而只是简单地检查是否创建了 vault，导致攻击者可以任意传入已创建
vault 的地址来通过检查。
#### 3.2.5.3 合约滥用用户权限
滥用权限是指合约申请了用户的授权，然后合约自主更新成恶意版本，拿着用户的授权做恶意操作。如果合约升级没有任何管控，合约创建者可以自主升级，用户无感知。这就存在合约创建者可能升级为恶意合约的问题，是一种安全隐患。
EOS 有eosio.code 权限的问题，eosio.code 权限是 dawn4.0 后新增的内部特殊权限，用来加强 inline action
的安全性。inline action 简单来说就是action 调用另外一个 action，具体来说就是一个智能合约调用另外一个智能合约。
inline action 需要向用户申请 eosio.code 权限。用户只有授权 eosio.code
权限给合约之后，合约才可以以用户身份调用另一个合约。任何申请用户 active
权限的场景。由于合约可以升级，即使授权版本的合约经过审计，也无法保证后续升级合约不作恶。
DeFi 中也存在滥用权限的问题。DeFi 合约可能会为了“能更方便地操纵你的资产”的目的，向你申请授权，那这个授权调用又是个什么样子呢？看一个具体的示例：
https://etherscan.io/tx/0x419d17e216cda75dd9635a752e9aedb8f43ed4bfe31a6f75ed8923779c73eb6e
这笔交易表示【0x3693】 这个地址授权给【Uniswap V2: Router 2】合约无限动用自己全部 USDT
的权力。这就带来一个巨大的隐忧，在合约 owner 作恶，或者合约存在漏洞的情况下，用户【0x3693】可能失去全部的 USDT。
因为滥用授权，即便用户没有或者只向合约转入了很少的资产，如果合约有授权转账相关的漏洞，则所有授权过的用户钱包内的资产都将面临风险。即便是没有漏洞，合约开发者也具备更新代码后拿走授权用户钱包内全部资产的权力。所以，用户测要小心授权，避免授予无限权限，定期回收不需要的权限，项目测要最小申请用户权限，避免申请无限权限。
## 3.3 平台特性漏洞类型
特性比函数调用更为复杂。一些特性会引起安全问题。支持此特性的平台需留意。
### 3.3.1 利于重入(Re-entrancy)的特性
fallback
特性利于重入漏洞，重入漏洞最先在以太坊平台上被发现。具体案例可查看[百万合约之母以太坊的漏洞攻防术（上集）](https://mp.weixin.qq.com/s/hi2xigJFtHXbscATbXsAng
"百万合约之母以太坊的漏洞攻防术（上集）")重入漏洞小节。虽然只要有外部调用就存在重入的可能，但是正常情况下，1、调用外部函数的时候会进行代码审计，2、外部函数不会提前预见到调用者的函数名。所以仅利用外部调用进行重入攻击是有难度的。但是以太坊平台还支持
fallback 特性，在两种情况下会调用到 fallback 函数：
1.未找到函数名，默认会调用 fallback。
2.转账操作默认会调用 fallback。
利用 fallback 特性可以大大降低重入的难度。
除了
fallback，目前还发现一种特性也利于重入——合约升级。审计版本是正常合约，但是后来悄悄升级成恶意合约，实施重入。如果其他平台支持合约无感升级，那么重入的风险会非常大。
### 3.3.2 提前交易(Front-running)特性
提前交易是指攻击者发现有利可图的时候就通过一些手段让自己的交易优先执行。关于提前交易的具体案例可以参考[百万合约之母以太坊的漏洞攻防术（上集）](https://mp.weixin.qq.com/s/hi2xigJFtHXbscATbXsAng
"百万合约之母以太坊的漏洞攻防术（上集）")提前交易漏洞小节。
交易顺序通常由 3 种方式决定：
手续费
手续费高的优先执行，手续费低的延后执行。以太坊的交易手续费可以决定交易被打包的顺序。所以攻击者发现有利可图的时候就通过增加手续费的方式让自己的交易优先执行。这种方式的代价就是额外付出手续费，技术层面不需要。
先进先出
先接收到的交易优先执行。典型的例子是
EOS。这种情况下，普通攻击者很难通过经济手段让自己先执行，除非通过技术手段攻破出块节点，操控交易顺序。但这个难度是相当高的。
共识节点排序
现在越来越多的公链引入了 PBFT 共识协议或者由 PBFT
衍生的同类协议。使用这种共识协议时，交易顺序通常由主节点决定，如果主节点存有私心，选择了有益于自身利益的顺序，也会产生提前交易问题，且主节点的偏袒不会被发现。普通攻击者无法通过经济手段操纵顺序，通过技术手段，或者社交工程学手段可以达成目的，但是这种手段目前没有发现真实案例。
总结来看，如果交易顺序可以被人为操控，那么会受提前交易漏洞的影响。
### 3.3.3 延迟交易(Delayed-transaction)特性
EOS 支持延迟交易的特性，通过设置 delay_sec 让交易在指定的时间触发执行。如果 delay_sec =
0，由于EOS执行交易采用FIFO策略，这些延迟交易肯定在其他交易之前执行。大量 delay_sec = 0 的延迟交易可以发起 DoS
攻击。具体案例可以参考[EOS菠菜应用篇](https://mp.weixin.qq.com/s/QAvFyfAetlwF3Vow-liEew
"EOS菠菜应用篇")DoS漏洞/交易延迟漏洞小节。
目前，我们仅了解到 EOS 支持延迟交易，但是可以推断的是支持此特性的平台都会受此漏洞影响。
### 3.3.4 回滚(Rollback)特性
回滚是一种特性，当函数执行失败的时候回滚到初始状态，一般区块链平台都会支持这个特性。
在以太坊平台有以下方式可以触发回滚：
· require();
· assert();
· revert();
在 EOS 平台有 eosio_assert() 可以触发回滚。
攻击者可以使用这些方式在不符合自己利益的时候把交易回滚，就可以达到一直盈利的目的。比如，彩票合约中，不中奖就回滚。以太坊平台和EOS平台回滚特性的具体案例可以参考[百万合约之母以太坊的漏洞攻防术（上集）](https://mp.weixin.qq.com/s/hi2xigJFtHXbscATbXsAng
"百万合约之母以太坊的漏洞攻防术（上集）")和[EOS菠菜应用篇](https://mp.weixin.qq.com/s/QAvFyfAetlwF3Vow-liEew "EOS菠菜应用篇")的回滚漏洞小节。
支持回滚特性的平台都会受回滚攻击的影响。例如波场的多个 Dapp
都遭受过回滚攻击：SPOKpark、DappRoulette、Divitron、DiceGame、TRONtopia_ultimate_dice、Wheel
Of Fortune DApp，等等。
## 3.4 充值场景漏洞类型
一个场景可以用到多个特性。充值场景多发生在向交易所或者游戏项目方充值的场景。目前已经发现了 3 类漏洞：假充值，假通知(fake transfer
notice)，假代币(fake token)。这些漏洞都是利用交易所/项目方校验逻辑存在漏洞， 0 成本获得充值。
### 3.4.1 假充值漏洞
假充值漏洞是指易所给用户充值的余额和交易所自己实际收到的余额不符，通常情况下是实际收到的金额少于给用户充值的金额，导致交易所损失。
这类漏洞的主要成因是交易所没有正确的校验充值结果。
· 以太坊的假充值的原因是错误的认为交易回执中 status = true 就是充值成功，实际上 status = true
是指没有抛出异常，即使充值执行失败函数 return false，交易回执中的 status 也会是 true。仅判断 status 是否为 true