8,120
8,769
20,253
12,003
6,436
98,402
1,919
9,936
5,188
5,724
4,261
19,412
3,679
12,280
4,868
13,873
11,205
5,688
2,117
278,005
1,089
6,266
Figure 6: Number of total paths discovered by different AFL techniques averaged over 5 runs, where the X axis represents the
number of total executions in 24 hours, which is scaled in units of 107.
Table 2: The average-cost of each fuzzer on each subject
Number of total paths / Number of executions ﬁnding these paths
FidgetyAFL
AFLFast.new
FairFuzz
EcoFuzz
FidgetyAFL
Average-cost
AFLFast.new
FairFuzz
EcoFuzz
jhead
magick
bsdtar
* The number of executions ﬁnding these paths denotes the number of test cases are generated when the fuzzers have reached these paths, of
which the unit is M(106). Bold fonts represent the best performance.
all evaluations, indicating that the distribution of total paths
found by EcoFuzz and AFL differ signiﬁcantly. Compared to
AFLFast.new, though EcoFuzz achieves the path coverage ap-
proximate to AFLFast.new, the energy depletion and average-
cost of EcoFuzz are signiﬁcantly lower than AFLFast.new.
Overall. EcoFuzz performs better than other AFL-type
techniques in the average-cost. Moreover, compared to AFL,
AFLFast, FairFuzz, and MOPT-AFL, more paths were found
by EcoFuzz on tested programs. EcoFuzz ﬁnds 214% of the
paths discovered by AFL and generates only 68% test cases
of AFL, while reducing 65% average-cost of AFL. EcoFuzz
also generates only 65% test cases of FidgetyAFL and ﬁnds
110% of the paths found by FidgetyAFL, and 65% test cases
of AFLFast.new, along with determining the same number
of paths. In addition, EcoFuzz reduces the average-cost of
approximately 39% of FidgetyAFL and 33% of AFLFast.new.
5.3 Evaluating the Search Strategy and Power
Schedule
This subsection focuses on the efﬁciency of SPEM and AAPS
algorithm.
Evaluation Metrics. We deﬁne the utilization ratio of en-
ergy, which is the ratio of the energy consumed for ﬁnding
the newest path to the total energy allocated in each turn, to
evaluate the scheduling algorithms of different techniques.
USENIX Association
29th USENIX Security Symposium    2315
Figure 7: The utilization ratio in each time of allocation as the times of energy distribution during these four fuzzers test the nm.
We recorded the turns of allocation and energy consumed
in indeterministic strategies. Because all fuzzers except Eco-
Fuzz implement the splice strategy, and as the mechanism of
splice strategy is very similar to that of havoc strategy, each
allocation in splice strategy was regarded as a time of energy
allocation. Particularly, if the fuzzer did not ﬁnd new paths
in one turn of energy allocation, the ratio was recorded as 0.
Thus, the value of ratio ranges from 0 to 1.
Based on the utilization ratio, certain indicators for multi-
faceted assessments, including the average utilization ratio
and the effective allocation, were deﬁned. The index of allo-
cation times was denoted as i, ranging from 1 to N, while the
corresponding utilization ratio was denoted as ri. In addition,
the number of paths found in this energy allocation is ni, and
the ﬁrst indicator is average utilization ratio, calculated as
ri
i=N
∑
i=1
N
¯r =
(12)
The frequency p of allocation ﬁnding new paths (we call this
effective allocation) is the second measurement, denoted as
p =
|{i|ni > 0,1 ≤ i ≤ N}|
N
(13)
We choose each best run of EcoFuzz, FidgetyAFL, Fair-
Fuzz, and AFLFast.new on fuzzing nm to start our evaluation.
Evaluation of AAPS Algorithm. Fig. 7 plots the utiliza-
tion ratio in each turn of the energy distribution of these four
tools during fuzzing nm. The utilization ratio of a point being
closer to 1.0 indicates less energy being wasted. Further, the
degree of density of points represents the path coverage.
As shown in Fig. 7, EcoFuzz utilizes energy more efﬁ-
ciently than the other three tools, as its distribution of points
is closer to 1.0 than others. EcoFuzz also found the most paths
among all tools, which was signiﬁcantly more than that found
by FairFuzz and FidgetyAFL, with the densest distribution
of points. Further, for the distributions of FidgetyAFL and
AFLFast.new, the majority of the points are located in the
interval with the ratio being between 0 and 0.5, and only a
few points’ ratios are higher than 0.5. In contrast, EcoFuzz’s
distribution of points is much closer to 1.0 than those of other
techniques, with approximately half the points concentrated
in an area with the ratio above 0.5, thus proving that the AAPS
algorithm assigns energy more efﬁciently.
Why the utilization ratio of most points in FidgetyAFL
and AFLFast.new is under 0.5? As stated in Section 2.1, if
AFL ﬁnds a new path in random strategies, AFL will double
the energy assigned to this seed. FidgetyAFL and AFLFast
both follow this mechanism. However, Fig. 7 shows that this
mechanism can create unnecessary energy depletion as, often
during allocation, fuzzers do not ﬁnd new paths after dou-
bling energy. Thus, the remaining energy is wasted. On the
other hand, our AAPS algorithm eliminates this mechanism
that doubles the assigned energy and introduces an adaptive
mechanism. If more energy has been assigned compared to
the seeds that need to ﬁnd new paths for some time, the AAPS
algorithm helps reduce the next energy allocation to decrease
energy depletion. Therefore, the distribution of points in Eco-
Fuzz is more even compared to that in other tools.
Table 3: The evaluation of power schedule
Techniques
Average utilization ratio
Effective allocation
Average-cost
0.121
0.005
0.010
0.107
0.290
0.013
0.031
0.204
EcoFuzz
FidgetyAFL
AFLFast.new
4,314
9,078
7,046
FairFuzz
4,930
In detail, we calculated some indicators to evaluate the
AAPS algorithm. Table 3 shows that the efﬁciency of differ-
ent scheduling algorithms on nm. EcoFuzz demonstrates the
best performance with the least average-cost, highest aver-
age utilization, and highest frequency of effective allocation.
EcoFuzz’s effective allocation frequency is more than Fid-
getyAFL, while its average-cost is half of FidgetyAFL.
We also evaluated the adaptive mechanism in AAPS. The
adaptive mechanism was implemented on FidgetyAFL. This
new FidgetyAFL + Adaptive fuzzer was run on nm and
2316    29th USENIX Security Symposium
USENIX Association
the d_expression_1 function in cp-demangle.c, which has
been conﬁrmed as the CVE-2019-9070 by others. Moreover,
two 0-day heap buffer overﬂow vulnerabilities exist in size
that are only found by EcoFuzz. One is trigged when calling
the bfd_hash_hash function and the other is triggered when
calling the _bfd_doprnt function. Although AFLFast.new
found more crashes in size than EcoFuzz, it failed to trigger
these two bugs. We submitted the bugs for requiring CVEs,
and the heap buffer overﬂow in _bfd_doprnt has been afﬁrmed
as CVE-2019-12972. Besides, when testing GNU Binutils-
2.31, EcoFuzz found four stack-overﬂow in xmalloc.c and
cplus-dem.c. They were reported to the Binutils group and
have been patched. Table 8 in Appendix 8.2 presents the
analysis of all vulnerabilities. These results show that Eco-
Fuzz can detect vulnerabilities efﬁciently in some real-world
programs.
5.5 Evaluation on LAVA-M
The LAVA-M dataset is proposed as a benchmark for assess-
ing the fuzzers’ performance [12]. The dataset contains four
programs that are base64, md5sum, uniq, and who. Each pro-
gram was generated by injecting some bugs into the source
code. Recently, several fuzzers (e.g., VUzzer, Steelix, Angora,
and T-Fuzz [10,19,27,29]) used this benchmark in evaluation.
Baseline. In addition to tools in Section 5.2, we compared
EcoFuzz with other state-of-the-art tools on LAVA-M, includ-
ing Angora and VUzzer [10, 29].
Conﬁguration. Since our platform in Section 5.2 was not
connected to the Internet, for installing and running Angora
as well as VUzzer, we deployed them on our cloud server, a
ubuntu 16.04 server os with 8 cores (Intel Xeon Platinum 8163
CPU @ 2.50GHz) and 16GB of RAM. A similar experiment
was also conducted by executing each program for 5 hours,
such that the conﬁguration was the same as that in VUzzer
and Angora. Each experiment was repeated 5 times. Further,
EcoFuzz was run with the static analysis module, and the
dictionary that this module generated is provided for all AFL-
type fuzzers. Table 5 lists the total bugs found by all fuzzers
during the ﬁve runs.
Discovered Bugs. As shown in Table 5, EcoFuzz found
the most bugs and outperformed others on LAVA-M. On
base64, md5sum, and uniq, EcoFuzz found all listed as well
as unlisted bugs. On who, as there were numerous bugs in
who, the efﬁciency of detecting bugs of each fuzzer can be
evaluated distinctly. It was observed that EcoFuzz found the
most bugs on who than the other fuzzers, with 1,252 listed and
200 unlisted bugs. Moreover, AFLFast.new performed the
best in other techniques, but it was not better than EcoFuzz.
Angora found 1,012 listed and 155 unlisted bugs, which is
less than those found by EcoFuzz.
Moreover, the result showed that AFL-type fuzzers could
also ﬁnd numerous bugs on LAVA-M in the dictionary model,
with ﬁnding almost all bugs in base64, md5sum, and uniq.
Figure 8: The average path coverages achieved by Fid-
getyAFL and FidgetyAFL + Adaptive.
tcpdump for 24 hours for 5 times. Fig. 8 shows the results.
FidgetyAFL + Adaptive found more paths than FidgetyAFL
on nm and tcpdump. It can be concluded the adaptive mecha-
nism can improve the efﬁciency of AFL’s power schedule.
Evaluation of SPEM Algorithm. As shown in Fig. 7, in
the later stage of fuzzing where EcoFuzz transitions into the
exploitation stage frequently, EcoFuzz’s point distribution is
denser than that of the other three tools. This qualitatively
illustrates that the SPEM algorithm is effective.
More quantitatively, we calculate the frequency of effective
allocation for the seeds chosen repeatedly in the exploitation
stage to estimate the efﬁciency of the search strategies. The
results are shown in Table 4. EcoFuzz’s measured 0.069,
which is more than FidgetyAFL at 0.031 and AFLFast.new at
0.026, thus proving that the SPEM algorithm is efﬁcient.
Table 4: The evaluation of search strategy
Repeated Chosen
Allocation with New Finding
Techniques
EcoFuzz
FidgetyAFL
AFLFast.new
FairFuzz
705
364
54
0
10,174
11,703
2,066
0
Ratio
0.069
0.031
0.026
-
5.4 The Validity on Detecting Vulnerabilities
As most tested software are the latest version, it is difﬁcult for
these tools to ﬁnd crashes in them using the seeds provided
by AFL. However, EcoFuzz still found 5 vulnerabilities. For
further evaluating EcoFuzz’s efﬁciency in detecting vulnera-
bilities, we attempted to select the seeds for the latest version
of the software by considering crashes in its previous version.
Unique Crashes. We tested GNU Binutils-2.31 programs
with EcoFuzz and found few crashes in nm and size of GNU
Binutils-2.31. Some crashes were selected as the initial seeds
for testing the nm and size from GNU Binutils-2.32. As
AFLFast.new outperforms the other ﬁve tools, we compared
EcoFuzz with it. After 24 hours of testing, EcoFuzz found
53 and 63 unique crashes in nm and size, respectively, while
AFLFast.new found 17 and 76 unique crashes.
Analysis of Vulnerabilities. EcoFuzz found more unique
crashes than AFLFast.new in nm and fewer crashes than
AFLFast.new in size. We used AddressSanitizer for fur-
ther vulnerability analysis [31]. After analysis, EcoFuzz and
AFLFast.new both detect the vulnerability in nm when calling
USENIX Association
29th USENIX Security Symposium    2317
Program
Bugs
AFL
Table 5: The number of total bugs discovered in LAVA-M
AFLFast
FairFuzz MOPT-AFL
AFLFast.new
FidgetyAFL
Angora
base64
md5sum
uniq
who
44
57
28
2136
44(+4)
57(+1)
28(+1)
466(+22)
44(+4)
57(+3)
28(+1)
490(+28)
1147(+164)
* Listed and (+unlisted bugs) found by existing techniques and EcoFuzz.
1132(+158)
44(+4)
57(+4)
28(+1)
44(+4)
57(+4)
28(+1)
44(+4)
57(+3)
28(+1)
463(+28)
44(+4)
57(+0)
28(+1)
71(+3)
43(+1)
57(+4)