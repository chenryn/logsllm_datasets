### Notification and Inbox Management Settings

#### Notification State
- **Values**: `NotificationOff`, `NotificationLastIP`, or `NotificationStaticIP`.
- **Default**: If this field is missing, `NotificationOff` is assumed.
- **Key**: `kNotificationState`

**Example Values:**
- `NotificationOff`
- `NotificationStaticIP`

#### Static IP Value
- **Value**: An optional IP address in bracketed, dotted decimal format (`[xxx.xxx.xxx.xxx]`).
- **Usage**: This field is used only when `NotificationState` is set to `NotificationStaticIP`.
- **Default**: If this field is missing, `NotificationState` is interpreted as `NotificationLastIP`.
- **Key**: `kNotificationStaticIPValue`

**Example Value:**
- `[1.2.3.4]`

#### Separate Inboxes
- **Description**: An optional case-insensitive keyword indicating whether the user manages POP and IMAP mail using different inboxes.
- **Values**: `OneInbox` or `DualInbox`.
- **Default**: If this value is missing, `OneInbox` is assumed.
- **Key**: `kSeparateInboxState`

**Example Value:**
- `OneInbox`

#### Show POP3 Inbox in IMAP
- **Description**: An optional case-insensitive keyword indicating whether POP messages are displayed in the user’s IMAP folder list.
- **Values**: `ShowPOP3Inbox` or `HidePOP3Inbox`.
- **Default**: If this field is missing, `ShowPOP3Inbox` is assumed.
- **Key**: `kShowPOP3InboxInIMAP`

**Example Value:**
- `HidePOP3Inbox`

---

### Working with Users and Groups

#### Checking a Server User’s Name, UID, or Password
You can use the following commands to check the name, UID, or password of a user in the server’s local directory. These tasks apply only to the local directory on the server.

- **To check if a full name is already in use:**
  ```bash
  $ serversetup -verifyRealName "longname"
  ```
  - **Output**: `1` if the name is already in the directory, `0` if it isn’t.

- **To check if a short name is already in use:**
  ```bash
  $ serversetup -verifyName shortname
  ```
  - **Output**: `1` if the name is already in the directory, `0` if it isn’t.

- **To check if a UID is already in use:**
  ```bash
  $ serversetup -verifyUID userid
  ```
  - **Output**: `1` if the UID is already in the directory, `0` if it isn’t.

- **To test a user’s password:**
  ```bash
  $ serversetup -verifyNamePassword shortname password
  ```
  - **Output**: `1` if the password is correct, `0` if it isn’t.

- **To view the names associated with a UID:**
  ```bash
  $ serversetup -getNamesByID userid
  ```
  - **Output**: No response means the UID is not valid.

- **To generate the default UNIX short name for a user long name:**
  ```bash
  $ serversetup -getUNIXName "longname"
  ```

#### Creating a User’s Home Directory
You can create a user's home directory by clicking the "Create Home Now" button on the Homes pane of Workgroup Manager. Alternatively, you can use the `createhomedir` tool. Mac OS X Server will create the user’s home directory when the user logs in for the first time.

- **To create a home directory for a particular user:**
  ```bash
  $ createhomedir [(-a|-l|-n domain)] -u userid
  ```

- **To create home directories for all users in the local domain:**
  ```bash
  $ createhomedir -l
  ```

- **To create home directories for all users in all domains in the directory search path:**
  ```bash
  $ createhomedir -a
  ```

- **For more information:**
  ```bash
  $ man createhomedir
  ```

- **Using `serversetup` to create a home directory for a particular user:**
  ```bash
  $ serversetup -createHomedir userid
  ```
  - **Output**: `1` if the specified user ID does not exist.

#### Mounting a User’s Home Directory
You can use the `mnthome` command to mount a user’s home directory. For more information, see the man page.

#### Creating a Group Folder
You can use the `CreateGroupFolder` command to set up group folders. For more information, see the man page.

#### Checking a User’s Administrator Privileges
- **To check if a user is a server administrator:**
  ```bash
  $ serversetup -isAdministrator shortname
  ```
  - **Output**: `0` if the user has administrator privileges, `1` if the user doesn’t.

---

### Working with File Services

#### Share Points
You can use the `sharing` tool to list, create, and modify share points.

- **To list existing share points:**
  ```bash
  $ sharing -l
  ```

- **Example Output:**
  ```plaintext
  name:           Share1
  path:           /Volumes/100GB
  afp:    {
          name:   Share1
          shared: 1
          guest access:   0
          inherit perms:  0
  }
  ftp:    {
          name:   Share1
          shared: 1
          guest access:   1
  }
  smb:    {
          name:   Share1
          shared: 1
          guest access:   1
          inherit perms:  0
          oplocks:        0
          strict locking: 0
          directory mask: 493
          create mask:    420
  }
  ```

- **To create a share point:**
  ```bash
  $ sharing -a path [-n customname] [-A afpname] [-F ftpname] [-S smbname] [-s shareflags] [-g guestflags] [-i inheritflags] [-c creationmask] [-d directorymask] [-o oplockflag] [-t strictlockingflag]
  ```

- **Examples:**
  ```bash
  $ sharing -a /Volumes/100GB/Art
  ```
  - **Description**: Creates a share point named `Art`, shared using AFP, FTP, and SMB, and using the name `Art` for all three types of clients.

  ```bash
  $ sharing -a /Volumes/100GB/Windows\ Docs -n WinDocs -S Documents -s 001 -o 1
  ```
  - **Description**: Shares the directory named `Windows Docs` on the disk `100GB`. The share point is named `WinDocs` for server management purposes, but SMB users see it as `Documents`. It’s shared using only the SMB protocol with oplocks enabled.

- **To modify a share point:**
  ```bash
  $ sharing -e sharepointname [-n customname] [-A afpname] [-F ftpname] [-S smbname] [-s shareflags] [-g guestflags] [-i inheritflags] [-c creationmask] [-d directorymask] [-o oplockflag] [-t strictlockingflag]
  ```

- **To disable a share point:**
  ```bash
  $ sharing -r sharepointname
  ```

#### AFP Service

- **To start AFP service:**
  ```bash
  $ sudo serveradmin start afp
  ```

- **To stop AFP service:**
  ```bash
  $ sudo serveradmin stop afp
  ```

- **To check AFP service status:**
  ```bash
  $ sudo serveradmin status afp
  ```

- **To see complete AFP status:**
  ```bash
  $ sudo serveradmin fullstatus afp
  ```

- **To list all AFP service settings:**
  ```bash
  $ sudo serveradmin settings afp
  ```

- **To list a particular setting:**
  ```bash
  $ sudo serveradmin settings afp:setting
  ```

- **To list a group of settings:**
  ```bash
  $ sudo serveradmin settings afp:setting:*
  ```

- **To change a setting:**
  ```bash
  $ sudo serveradmin settings afp:setting = value
  ```

- **To change several settings:**
  ```bash
  $ sudo serveradmin settings
  afp:setting = value
  afp:setting = value
  afp:setting = value
  [...]
  Control-D
  ```

#### List of AFP Settings

| Parameter | Description |
|-----------|-------------|
| `activityLog` | Turn activity logging on or off. Default = no |
| `activityLogPath` | Location of the activity log file. Default = `/Library/Logs/AppleFileService/AppleFileServiceAccess.log` |
| `activityLogSize` | Rollover size (in kilobytes) for the activity log. Only used if `activityLogTime` isn’t specified. Default = 1000 |
| `activityLogTime` | Rollover time (in days) for the activity log. Default = 7 |
| `admin31GetsSp` | Set to true to force administrative users on Mac OS X to see share points instead of all volumes. Default = yes |
| `adminGetsSp` | Set to true to force administrative users on Mac OS 9 to see share points instead of all volumes. Default = no |
| `afpServerEncoding` | Encoding used with Mac OS 9 clients. Default = 0 |
| `afpTCPPort` | TCP port used by AFP on server. Default = 548 |
| `allowRootLogin` | Allow user to log in as root. Default = no |
| `attemptAdminAuth` | Allow an administrator user to masquerade as another user. Default = yes |
| `authenticationMode` | Authentication mode. Can be: `standard`, `kerberos`, `standard_and_kerberos`. Default = `standard_and_kerberos` |
| `autoRestart` | Whether the AFP service should restart automatically when abnormally terminated. Default = yes |
| `clientSleepOnOff` | Allow client computers to sleep. Default = yes |
| `clientSleepTime` | Time (in hours) that clients are allowed to sleep. Default = 24 |
| `createHomeDir` | Create home directories. Default = yes |
| `errorLogPath` | The location of the error log. Default = `/Library/Logs/AppleFileService/AppleFileServiceError.log` |
| `errorLogSize` | Rollover size (in kilobytes) for the error log. Only used if `errorLogTime` isn’t specified. Default = 1000 |
| `errorLogTime` | Rollover time (in days) for the error log. Default = 0 |
| `guestAccess` | Allow guest users access to the server. Default = yes |
| `idleDisconnectFlag:adminUsers` | Enforce idle disconnect for administrative users. Default = yes |
| `idleDisconnectFlag:guestUsers` | Enforce idle disconnect for guest users. Default = yes |
| `idleDisconnectFlag:registeredUsers` | Enforce idle disconnect for registered users. Default = yes |
| `idleDisconnectFlag:usersWithOpenFiles` | Enforce idle disconnect for users with open files. Default = yes |
| `idleDisconnectMsg` | The idle disconnect message. Default = "" |
| `idleDisconnectOnOff` | Enable idle disconnect. Default = no |
| `idleDisconnectTime` | Idle time (in minutes) allowed before disconnect. Default = 10 |
| `kerberosPrincipal` | Kerberos server principal name. Default = "afpserver" |
| `loggingAttributes:logCreateDir` | Record directory creations in the activity log. Default = yes |
| `loggingAttributes:logCreateFile` | Record file creations in the activity log. Default = yes |
| `loggingAttributes:logDelete` | Record file deletions in the activity log. Default = yes |
| `loggingAttributes:logLogin` | Record user logins in the activity log. Default = yes |
| `loggingAttributes:logLogout` | Log user logouts in the activity log. Default = yes |
| `loggingAttributes:logOpenFork` | Log file opens in the activity log. Default = yes |
| `loginGreeting` | The login greeting message. Default = "" |
| `loginGreetingTime` | The last time the login greeting was set or updated. |
| `maxConnections` | Maximum number of simultaneous user sessions allowed by the server. Default = -1 (unlimited) |
| `maxGuests` | Maximum number of simultaneous guest users allowed. Default = -1 (unlimited) |
| `maxThreads` | Maximum number of AFP threads. (Must be specified at startup.) Default = 40 |
| `noNetworkUsers` | Indication to client that all users are users on the server. Default = no |
| `permissionsModel` | How permissions are enforced. Can be set to: `classic_permissions`, `unix_with_classic_admin_permissions`, `unix_permissions`. Default = `classic_permissions` |
| `recon1SrvrKeyTTLHrs` | Time-to-live (in hours) for the server key used to generate reconnect tokens. Default = 168 |
| `recon1TokenTTLMins` | Time-to-live (in minutes) for a reconnect token. Default = 10080 |
| `reconnectFlag` | Allow reconnect options. Can be set to: `none`, `all`, `no_admin_kills`. Default = `all` |
| `reconnectTTLInMin` | Time-to-live (in minutes) for a disconnected session waiting reconnection. Default = 1440 |
| `registerAppleTalk` | Advertise the server using AppleTalk NBP. Default = yes |
| `registerNSL` | Advertise the server using Rendezvous. Default = yes |
| `sendGreetingOnce` | Send the login greeting only once. Default = no |
| `shutdownThreshold` | Don’t modify. Internal use only. |
| `specialAdminPrivs` | Grant administrative users super user read/write privileges. Default = no |
| `SSHTunnel` | Allow SSH tunneling. Default = yes |
| `TCPQuantum` | TCP message quantum. Default = 262144 |
| `tickleTime` | Frequency of tickles sent to client. Default = 30 |
| `updateHomeDirQuota` | Enforce quotas on the users volume. Default = yes |

This document provides a comprehensive guide to managing notification and inbox settings, working with users and groups, and configuring file services in Mac OS X Server.