### Figure 17: End-to-End Latency Between an Instance in VPC and All Other Instances in Other VPCs in EC2

The following latency values (in milliseconds) were recorded:
- 1.988 ms
- 1.202 ms
- 1.048 ms
- 0.855 ms

These measurements were taken for a micro instance in availability zone 1a, connecting to all live VPC instances in EC2. As shown, the majority (over 99%) of end-to-end latency values are above 1 ms, with very rare cases (less than 0.1%) below 0.850 ms.

We conducted similar latency measurements from 18 sample VPC instances across different types and availability zones, and observed a consistent distribution. Based on these observations and the heuristic that instances on the same physical machine should have lower latency, we set a latency threshold for each type of instance in each availability zone. The threshold is chosen such that for an instance in a VPC with a specific type and availability zone, the end-to-end latency between the instance and 99.9% of all other VPC instances should be above the threshold. For example, if the target VPC instance is located in availability zone 1a with a micro type, the latency threshold is set to 0.850 ms. If the end-to-end latency between a probing instance and a target instance is below this threshold, the probing instance is considered a co-residence candidate.

If the probing instance passes both rounds of filtering, we proceed with covert-channel construction to confirm co-residence.

### 6.4 VPC Co-Residence Evaluation

To validate the feasibility of our VPC co-residence approach, we conducted a series of experiments in EC2. First, we tested whether our approach could correctly speculate the type and availability zone of a target instance. We launched VPC instances in three availability zones with six different types, with 20 instances per combination. Our approach was applied to infer the type and availability zone of the target. If both were correctly inferred, the target instance was considered correctly identified. Table 3 summarizes our evaluation results, showing that our type/zone speculation achieved an accuracy of 77.8%.

Next, we evaluated the overall effectiveness of our approach in achieving co-residence. We launched 40 instances in one VPC, with varying types and availability zones, and performed the full co-residence process. 

- **First Stage Filtering:** 63.2% of the probing instances did not pass the initial filtering.
- **Second Stage Filtering:** Of the remaining instances, 97.9% were filtered out in the second stage.
- **Covert-Channel Verification:** Among the instances that passed both stages, 17.6% passed the covert-channel verification, indicating actual co-residence with the target.

Ultimately, out of 40 instances, we successfully achieved co-residence with 18. Figure 18 illustrates the effort required, highlighting that achieving co-residence in VPC is challenging, often requiring more than 1,000 probing instances and many hours of processing.

Overall, we demonstrated that an attacker can achieve co-residence with a target inside a VPC, albeit at a high cost. This indicates that VPC mitigates but does not eliminate the co-residence threat.

### Table 3: Number of Successfully Identified Targets

| Availability Zone | Instance Type | Success Count |
|------------------|---------------|---------------|
| 1a               | t1.micro      | 16            |
| 1b               | t1.micro      | 13            |
| 1d               | t1.micro      | 12            |
| 1a               | m1.small      | 13            |
| 1b               | m1.small      | 13            |
| 1d               | m1.small      | 18            |
| 1a               | m1.medium     | 18            |
| 1b               | m1.medium     | 19            |
| 1d               | m1.medium     | 15            |
| 1a               | m1.large      | 14            |
| 1b               | m1.large      | 16            |
| 1d               | m1.large      | 13            |
| 1a               | m3.medium     | 16            |
| 1b               | m3.medium     | 20            |
| 1d               | m3.medium     | 14            |
| 1a               | m3.large      | 17            |
| 1b               | m3.large      | 17            |
| 1d               | m3.large      | 18            |

### 7 A More Secure Cloud Infrastructure

Based on our measurement analysis, we propose guidelines for more secure IaaS cloud management:

1. **Proper Naming System Management:**
   - EC2’s automatic naming system reveals internal space, which can be exploited. Azure and Rackspace use flexible naming systems to prevent location probing. However, automatic domain name generation is more user-friendly and efficient. We suggest integrating randomness into the automatic naming system, such as embedding a random number derived from the customer’s account information. This approach can prevent location probing while maintaining management efficiency.

2. **IP Range Publication:**
   - Publishing all IP ranges of a cloud can lead to security concerns, especially with tools like ZMap. We recommend a balanced approach to protect IP ranges.

3. **Routing Information Protection:**
   - Trace-routing can be used for network diagnostics but also exploited by attackers. A good compromise is to show partial paths while obscuring the first hop (ToR) and the last second hop.

4. **Dynamic VM Placement:**
   - More dynamic and constrained VM placement will make it harder for attackers to locate targets. Historical account information can also be used to prevent abuse.

### 8 Conclusion

Our systematic measurement study on co-residence threats in Amazon EC2, from the perspectives of VM placement, network management, and VPC, has shown significant improvements in reducing co-residence risks. While EC2 has made strides in mitigating co-residence, our findings indicate that VPC only mitigates rather than eliminates the threat. We also proposed a method to identify ToR-connected or non-ToR-connected topologies, which can aid in achieving rack-level co-residence.

### 9 Acknowledgment

We thank Chris Grier and the anonymous reviewers for their insightful comments. This work was partially supported by ONR grant N00014-13-1-0088.

### References

1. Amazon Elastic Compute Cloud (EC2). http://aws.amazon.com/ec2/
2. Google Cloud Platform. https://cloud.google.com/compute/
3. Instance Types in EC2. http://aws.amazon.com/ec2/instance-types/
4. Microsoft Azure Services Platform. http://www.microsoft.com/azure/default.mspx
5. AVIRAM, A., HU, S., FORD, B., AND GUMMADI, R. Determining timing channels in compute clouds. In Proceedings of ACM CCSW’10, pp. 103–108.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.