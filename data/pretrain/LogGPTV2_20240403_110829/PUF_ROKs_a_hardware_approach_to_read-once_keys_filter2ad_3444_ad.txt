### PUF Performance and Key Generation

The PUF (Physically Unclonable Function) generates 32 bits of output per execution. To generate larger keys, the ARM processor repeatedly polls the PUF, caching each 32-bit result until the desired key size is achieved.

To contextualize the PUF's performance, we compared its execution time with measurements provided by NXP, the device manufacturer. These measurements are detailed in Figure 5. Each PUF execution, which produces 32 bits of output, takes 2.73 ms. This duration is longer than the time required to encrypt 1 kB of data using AES. However, it is important to note that even for larger PUFs, the execution time remains at 2.73 ms. Therefore, the overhead of executing the PUF can be relatively small, especially when processing large amounts of data.

**Figure 5: NXP Cryptographic Measurements**

| Symmetric Algorithm | Time (ms/kB) |
|---------------------|---------------|
| AES-CBC             | 1.21          |
| AES-ECB             | 1.14          |
| 3DES-CBC            | 3.07          |
| 3DES-ECB            | 3.00          |

| RSA Operation       | Time (s)      |
|---------------------|---------------|
| 1024-bit Encrypt    | 0.01          |
| 1024-bit Decrypt    | 0.27          |
| 2048-bit Encrypt    | 0.05          |
| 2048-bit Decrypt    | 2.13          |

### Comparison with RSA

The comparison between the PUF execution and RSA encryption/decryption times is striking. The 2.73 ms required to execute the PUF is 27.3% of the time needed for a 1024-bit RSA encryption. As the key size increases, and assuming the PUF size is adjusted accordingly, the PUF execution time becomes only 0.13% of the time required for a 2048-bit RSA decryption. Thus, the performance impact of polling the PUF during key generation is minimal.

### Security Analysis

#### Adversary Model

For our security analysis, we consider a probabilistic polynomial-time (PPT) attacker, denoted as \( A \), with two primary goals:
1. Recovering the key used to encrypt or decrypt a single message.
2. Modeling the PUF to emulate its behavior in software, thereby negating the hardware-based security guarantee.

Initially, we assume the adversary can eavesdrop on bus communication but cannot observe communication between the cores in the SoC design. Under this model, \( A \) can observe data passing between the PC and memory or between the PC and a network. However, these messages consist solely of plaintext \( m \) and the corresponding ciphertext \( e(m) \). This scenario constitutes a known-plaintext attack, but it offers no additional advantage to \( A \).

Even if \( A \) were to reconstruct the key \( K \) (which has a negligible probability under the PPT model), this key would never be reused. The only utility of reconstructing \( K \) is to attempt to reverse-engineer the PUF. However, our design involves hashing the PUF output when creating the keys, so \( K = H(R_i) \), where \( H \) is a robust cryptographic hash function. Consequently, \( A \) has a negligible probability of reconstructing \( R_i \). Moreover, \( R_i \) by itself is useless; \( A \) would also need to know the corresponding \( C_i \) (or \( R_{i+1} \)) to model the PUF. Therefore, \( A \) would have to accomplish multiple improbable feats, making such an attack infeasible.

#### Enhanced Adversary Capabilities

If we relax our assumptions and grant \( A \) the ability to probe inside the SoC and observe all data transferred between the cores, the attack would succeed. However, this attack model is so extreme that only highly motivated and well-resourced adversaries would undertake it. Users facing such powerful adversaries are likely to employ known tamper-resistance techniques, rendering this threat minimal.

#### Fault Injection and Freezing Attacks

Fault injection attacks, which involve repeatedly inducing faults with the same key, do not threaten the confidentiality of the system because PUF ROKs (Read-Once Keys) can only be used once. At best, a fault injection would cause a denial-of-service, as the key would not correctly encrypt or decrypt the message. Similarly, freezing attacks, which assume the key exists in addressable memory, are ineffective against PUF ROKs because these keys are generated dynamically and never stored outside the processor.

#### Power Analysis Attacks

Simple power analysis (SPA) involves monitoring the system’s power fluctuations to differentiate between portions of cryptographic algorithms. This can reveal information about the key, such as the duration of a modular exponentiation. Differential power analysis (DPA) observes power fluctuations over time by repeatedly executing the cryptographic algorithm with the targeted key. DPA is generally harder to defend against than SPA. PUF ROKs are immune to DPA because repeated execution is not allowed, though they are vulnerable to SPA. However, known techniques can prevent SPA attacks.

### Conclusion

This work presents a novel hardware-based approach to generating read-once keys (ROKs) by integrating a PUF with a register to create a feedback loop. This design ensures that no data required for the PUF ROK ever exists outside the processor, and the feedback loop continuously overwrites the register contents, destroying the key immediately upon use. We have defined ROKs in terms similar to a Turing machine, presented our architectural design, and proved its formal correctness. We have also discussed applications of PUF ROKs, addressed practicality and usability concerns, and shared insights into future production-quality implementations. Our security analysis under the PPT adversary model, and against more powerful physical attackers, demonstrates that PUF ROKs are both feasible and secure.

### References

[1] Polarssl: Small cryptographic library. http://www.polarssl.org/, 2008.
[2] Encryption for ARM MCUs. http://ics.nxp.com/literature/presentations/microcontrollers/pdf/nxp.security.innovation.encryption.pdf, 2010.
[3] Ironkey military strength flash drives. http://www.ironkey.com/, 2010.
[4] KNJN FPGA development boards. http://www.knjn.com/FPGA-FX2.html, 2010.
[5] A. Akavia, S. Goldwasser, and V. Vaikuntanathan. Simultaneous hardcore bits and cryptography against memory attacks. In TCC '09: Proceedings of the 6th Theory of Cryptography Conference on Theory of Cryptography, pages 474–495, Berlin, Heidelberg, 2009. Springer-Verlag.
[6] M. J. Atallah, E. D. Bryant, J. T. Korb, and J. R. Rice. Binding software to specific native hardware in a VM environment: The PUF challenge and opportunity. In VMSEC '08. ACM, 2008.
[7] B. Barak, O. Goldreich, R. Impagliazzo, S. Rudich, A. Sahai, S. Vadhan, and K. Yang. On the (im)possibility of obfuscating programs. In Lecture Notes in Computer Science, pages 1–18. Springer-Verlag, 2001.
[8] A. Berzati, C. Canovas, J.-G. Dumas, and L. Goubin. Fault attacks on RSA public keys: Left-to-right implementations are also vulnerable. In CT-RSA '09: Proceedings of the The Cryptographers' Track at the RSA Conference 2009 on Topics in Cryptology, pages 414–428, Berlin, Heidelberg, 2009. Springer-Verlag.
[9] A. Berzati, C. Canovas, and L. Goubin. In(security) against fault injection attacks for CRT-RSA implementations. Fault Diagnosis and Tolerance in Cryptography, Workshop on, 0:101–107, 2008.
[10] A. Berzati, C. Canovas, and L. Goubin. Perturbating RSA public keys: An improved attack. In E. Oswald and P. Rohatgi, editors, Cryptographic Hardware and Embedded Systems (CHES 2008), volume 5154 of Lecture Notes in Computer Science, pages 380–395. Springer Berlin / Heidelberg, 2008.
[11] E. Brier, B. Chevallier-mames, M. Ciet, C. Clavier, and École Normale Supérieure. Why one should also secure RSA public key elements. In Cryptographic Hardware and Embedded Systems (CHES 2006), volume 4249 of Lecture Notes in Computer Science, pages 324–338. Springer-Verlag, 2006.
[12] B. Danev, T. S. Heydt-Benjamin, and S. Čapkun. Physical-layer identification of RFID devices. In Proceedings of the USENIX Security Symposium, 2009.
[13] S. Devadas, E. Suh, S. Paral, R. Sowell, T. Ziola, and V. Khandelwal. Design and implementation of PUF-based "unclonable" RFID ICs for anti-counterfeiting and security applications. In 2008 IEEE International Conference on RFID, pages 58–64, 2008.
[14] K. B. Frikken, M. Blanton, and M. J. Atallah. Robust authentication with trusted hardware. In The Fourth Annual Workshop on Scalable Trusted Computing (ACM STC '09), November 2009.
[15] B. Gassend, D. Clarke, M. van Dijk, and S. Devadas. Controlled physical random functions. In Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC), 2002.
[16] B. Gassend, D. Clarke, M. van Dijk, and S. Devadas. Silicon physical random functions. In Proceedings of the 9th ACM Conference on Computer and Communications Security (CCS '02), 2002.
[17] R. Geambasu, T. Kohno, A. Levy, and H. M. Levy. Obfuscating straight line arithmetic programs. In DRM '09: Proceedings of the nineth ACM workshop on Digital rights management, pages 47–58, New York, NY, USA, 2009. ACM.
[18] S. Goldwasser, Y. T. Kalai, and G. N. Rothblum. One-time programs. In CRYPTO 2008: Proceedings of the 28th Annual conference on Cryptology, pages 39–56, Berlin, Heidelberg, 2008. Springer-Verlag.
[19] V. Goyal, Y. Ishai, A. Sahai, R. Venkatesan, and A. Wadia. Founding cryptography on tamper-proof hardware tokens. In D. Micciancio, editor, Theory of Cryptography, volume 5978 of Lecture Notes in Computer Science, pages 308–326. Springer Berlin / Heidelberg, 2010.
[20] J. Guajardo, S. S. Kumar, G.-J. Schrijen, and P. Tuyls. FPGA intrinsic PUFs and their use for IP protection. In Proceedings of the 9th Cryptographic Hardware and Embedded Systems Workshop (CHES), pages 63–80, 2007.
[21] J. Guajardo, S. S. Kumar, G.-J. Schrijen, and P. Tuyls. Physical unclonable functions and public-key crypto for FPGA IP protection. In International Conference on Field Programmable Logic and Applications, pages 189–195, 2007.
[22] M. Kirkpatrick and E. Bertino. Physically restricted authentication with trusted hardware. In The Fourth Annual Workshop on Scalable Trusted Computing (ACM STC '09), November 2009.
[23] M. S. Kirkpatrick and S. Kerr. Enforcing physically restricted access control for remote data. In 1st ACM Conference on Data and Application Security and Privacy (CODASPY), February 2011.
[24] M. S. Kirkpatrick, S. Kerr, and E. Bertino. PUF ROKs: Generating read-once keys with physically unclonable functions (extended abstract). In 6th Annual Cyber Security and Information Intelligence Research Workshop (CSIIRW), April 2010.
[25] N. Koblitz. Elliptic curve cryptosystems. Mathematics of Computation, pages 203–209, 1987.
[26] P. Kocher, J. Jaffe, and B. Jun. Introduction to differential power analysis and related attacks. Technical report, Cryptography Research, 1998.
[27] V. Kolesnikov. Truly efficient string oblivious transfer using resettable tamper-proof tokens. In TCC, pages 327–342, 2010.
[28] K. Löfström, W. Daasch, and D. Taylor. IC identification circuit using device mismatch. In Solid-State Circuits Conference, 2000. Digest of Technical Papers. ISSCC. 2000 IEEE International, pages 372–373, 2000.
[29] S. Narayanan, A. Raghunathan, and R. Venkatesan. Authentication using physically unclonable functions. In Information Security Conference (ISC), September 2009.
[30] A. Pellegrini, V. Bertacco, and T. Austin. Fault-based attack of RSA authentication. In Design Automation and Test in Europe (DATE), March 2010.
[31] M. Riley and I. Richardson. Reed-Solomon codes. http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/reedsolomon/reed_solomon_codes.html, 1998.
[32] S. Rockliff. The error correcting codes (ECC) page. http://www.eccpage.com/, 2008.
[33] L. F. G. Sarmenta, M. van Dijk, C. W. O'Donnell, J. Rhodes, and S. Devadas. Virtual monotonic counters and count-limited objects using a TPM without a trusted OS. In STC '06: Proceedings of the first ACM workshop on Scalable trusted computing, pages 27–42, New York, NY, USA, 2006. ACM.
[34] G. E. Suh and S. Devadas. Physical unclonable functions for device authentication and secret key generation. In Proceedings of the 44th IEEE Design Automation Conference (DAC), pages 9–14. IEEE Press, 2007.
[35] G. E. Suh, C. W. O'Donnell, and S. Devadas. AEGIS: A single-chip secure processor. In Elsevier Information Security Technical Report, volume 10, pages 63–73, 2005.
[36] G. E. Suh, C. W. O'Donnell, and S. Devadas. AEGIS: A single-chip secure processor. IEEE Design and Test of Computers, 24(6):570–580, 2007.
[37] V. Sundaresan, S. Rammohan, and R. Vemuri. Defense against side-channel power analysis attacks on microelectronic systems. Pages 144–150, Jul. 2008.