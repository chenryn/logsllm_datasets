以致于我们一般都不需要知道它到底做了哪些事，它会对部分函数重新进行定义，让它们能够
安全地运行在可重人工作方式下。这些函数的名字一般不会发生变化，只是会追加上一个“_r”
记号：比如说，gethostbyname就将被改为gethostbyname_r。原来以宏定义形式实现的某些
stdio.h函数会相应地变成可安全重人的函数。在errno.h里定义的errno变现在成为一个函数调
用，它能够以一种安全的多线程方式检索出真正的errno值。
包括在程序里的头文件pthread.h为我们提供了其他一些常数定义和函数声明，它们与头文件
stdio.h为标准输入和标准输出所提供的东西作用相同，在编写多线程代码时一定用使用这些新的
定义和声明。最后，我们要用POSIX的pthread库来链接多线程程序，与线程有关的各种函数都
是在这个库里实现的。
pthread_create函数的作用是创建一个新线程，类似于创建一个新进程的fork。
#include 
: (6pro_*(+pt) (auoxxes1 
int pthread_create(pthread_t *thread, pthread_attr_t *attr, void
这看起来挺吓人的，但用起来其实挺简单。这个函数的第一个参数是一个指针，它指向一
个pthread_t类型的数据。在创建一个线程的时候，这个指针指向的变量里会写人一个标识符，
我们就用这个标识符来引用新线程。接下来的参数对程序的属性进行了设置，我们一般不需要
什么特殊的属性，所以可以简单地把NULL传递给这个参数。我们将在本章后面的内容里向大家
介绍这些属性的作用和用法。最后两个参数分别是线程将要启动执行的函数以及将要传递给这
个函数的参数。“void**star_routine)（void*）”表示需要我们传递的是一个函数的地址，该函
数以一个指向void的指针为参数，返回的也是一个指向void的指针。这样，我们就能传递任意类
加入jaVa编程群：524621833
---
## Page 348
330
Linux程序设计
型的单个参数并返回一个任意类型的指针了。对由fork函数创建的子进程来说，它执行的代码与
父进程的完全一样，只不过将返回一个不同的值面已；但对一个新线程来说，我们必须明确地
为它提供一个函数指针，新线程执行的是另外一-些代码
调用成功时返回值是“0”，如果失败则返回一个错误。使用手册页对这个函数以及将要在
本章里介绍的其他函数的错误条件有详细的说明。
pthread_create和大多数与线程有关的函数在操作失败时不返回“-1”，这在UNIX函
数更是不多见的。除非你很有把握，在对错误代码进行检查之前一定要认真研究使用手
册里的有关内容。
线程在结束时必须调用pthread_exit函数，这与一个进程在结束时要调用exit是同样的道理。
它的作用是结束调用了这个函数的线程，返回一个指向某个对象的指针。绝不要用它返回一个
指向--个局部变量的指针，因为局部变域会在线程出现严重问题时消失得无影无踪。
pthread_exit函数的定义如下所示：
in:1ude 
void pthread_exit ivoid *retval 1;
pthread_join相当于进程用来等待子进程的wait函数，它的作用是在线程结束后把它们归并
到一起。这个函数的定义如下所示：
include 
int prhread_join (pthread_t th, void **thread_return 1;
第一个参数指定了将要等待的线程，它就是pthread_create返回的那个标识符。第二个参数
是一个指针，它指向另外一个指针，而后者指向线程的返回值。这个函数在成功时返回“0”，
失败时返回·-个错误代码，与pthread_creat类似。
动手试试：一个简单的线程化程序
这个程序将创建出一个新的线程。新线程与老线程共享变量，并在结束时向老线程返回一
个结果。真正的多线程程序可没有这么简单！下面是thread2.c的代码清单。
#include 
#include 
tinclude 
include 
: (6ze, Pto}uotqoumpeonua. Pon
char message[] = *Hello World*:
int nain(1f
int res:
atnspeexy.pro
pthread_t a_thread;
res = pthread_create[&a_thread, NULL, thread_function,(void *)messagcl:
if (res I= 0)
perror(*Thread creation failed′):
exit (EXIT_FAILURE) ;
加入jaVa编程群：524621833
---
## Page 349
第1I章POSIX线程
331
printf(*waiting for thread to finish..,\n°):
res = pthread_join(a_thread.&thread_result);
if (res != 0)(
exit(EXIT_FAILURE):
perror(*Thread_join failed*);
printf(*Thread joined. it returned ss\n*.(char *)thread_result):
prantf(*Message is now ts\n*. messagel;
exit (EXIT_SUCCESS) :
vo.d *thread_function(void *arg)(
printf(*thread_function is running. Argument was fs\n*, (char *)arg);
strepy (message.“Bye!*};
leep (31 :
pthread_exit(*Thank you for the CPU tine*1;
在对这个程序进行编译的时候，我们必须先定义_REENTRANT宏；如有必要，还必须定义
_POSIX_C_SOURCE。在作者的系统上.我们只需定义_REENTRANT宏，所以编译命令相对简
单些、如下所示：
S cc -D_REENTRANT thread2.c -O hread2
:pthread
当我们运行这个程序的时候，我们将看到：
Waiting for thread to finish.,
$./thread2
thread_tunction is running. Argusont was Hello world
Thread joined. it returned Thank you for che CPu tine
ag xou sT o6eeuy
操作注释：
我们先对创建线程时将要由它调用的函数进行预定义，如下所示：
void *rhread_function (void *arg :
根据pthread_create的要求，上面这个函数只需要一个指向void的指针做参数，返回的也将是
一个指向void的指针。这个函数的实际定义（和具体内容）过会儿再说。
我们在main里定义了凡个变量，然后调用pthread_create让我们的新线程开始执行。如下所示：
ptiread_t a_thread;
vcid *thread_result;
Ics = pthread_create(&a_thread, NLL, thread_function, (void *)message);
我们向pthread_create传递了一个pthread_t类型对象的地址，对新线程的引用以后就要全靠
它了。我们不想改变线程的缺省属性，所以我们把NULL做为第二个参数传递过去。最后两个参
数是将要调用的函数和一个准备传递给这个函数的参数。
如果这个调用成功了，就会有两个线程在运行。原先的老线程（即main）将继续去执行
pthread_create后面的代码，面那个新线程将去执行我们起名为thread_function的函数。
接下来，在查明新线程已经启动之后，老线程将调用pthread_join，如下所示：
res - pthread_join (a_threaa. &th:ead_rcsu.t ):
我们给它传去两个参数，一个是我们正在等待其结束的线程的标识符，另一个是指向返回
加入jaVa编程群：524621833
---
## Page 350
332Linux程序设计
值的指针。这个函数会等到其他线程结束后才会返回：接下来，老线程把新线程的返回值和全
局变量message的值打印出来，然后退出。
新线程在thread_function函数里开始执行。它先打印出自己的参数，再休眠一小会儿，然后
修改全局变址，最后退出并向主线程返回一个字符串。新线程对数组message进行了写操作，而
这个数组老线程也能访问。如果我们调用的是fork而不是pthread_create，就不会有这样的效果，
11.4同时执行
我们接下来要编写的程序将证明两个线程的执行是同时进行的（当然，如果是在一个单处
有介绍过任何能够帮助我们完成这一工作的线程同步函数，所以这个程序的效率是很低的，它
需要在两个线程之间不停地“跳跃”才能实现我们的想法。我们的程序仍然要利用这一事实：
除局部函数变量以外，同一进程的多个线程将共享一切、
动手试试：两个线程的同时执行
thread3.c是在对thread2.c稍加修改的基础上编写出来的。我们额外增加了一个文件范围变量
来确定哪个线程正在运行中。如下所示：
Int ran_now = 1;
我们将在执行main函数时把run_now设置为“1".执行新线程时设置为“2”：
我们在main函数创建新线程的语句后面加上下面这些代码。
int print_count1 = 0;
whileprint_count1++
int sem_init (sem_t *sem, ant pshared, unsipred irt value );
这个函数的作用是对由sem指定的信号量进行初始化，设置好它的共享选项（马上就要介绍
到这些选项了）.并给它-个整数类型的初始值。pshared参数控制着信号量的类型。如果
pshared的值是0，就表示它是当前进程的局部信号量：否则，其他进程就能够共享这个信号址。
我们现在只对不让进程共享的信号量感兴趣。在我们编写本书的时候，Linux还不支持这种共亨，
给pshared传递一个非零值将会使函数调用失败。
接下来的两个函数控制着信号量的值，它们的定义如下所示：
#inc lude 
int sem_wa1 r (sem_t * sem) :
int sem_post (sem_t * sen) ;
这两个函数都要用一个由sem_init调用初始化的信号量对象的指针做参数。
scm_post函数的作用是给信号量的值加上一个“1”，它是一个“原子操作”-即同时对同
个信号量做加“1”操作的两个线程是不会冲突的：而同时对同一个文件进行读、加和写操作
的两个程序就有可能会引起冲突。信号量的值永远会正确地加上一个“2”一因为有两个线程
试图改变它。
sem_wait函数也是一个原子操作，它的作用是从信号量的值减去一个“1"，但它永远会先
等待该信号量为一个非零值才开始做减法。也就是说，如果你对一个值为2的信号量调用
sem_wait.线程将会继续执行，但信号量的值将减到1。如果对一个值为0的信号量调用
sem_wait，这个函数就会等待直到有其他线程增加了这个值使它不再是0为止。如果有两个线程
都在sem_wait中等待同一个信号量变成非零值，那么当它被第三个线程增加一个“1”时，等待
线程中只有一个能够对信号量做减法并继续执行，另外一个还将处于等待状态。
信号量这种“只用一个函数就能原子化地测试和设置”的能力正是它的价值所在。还有另
外一个信号量函数sem_trywait，它是sem_wait的非阻塞搭档，我们就不在这里对它做进一步介
绍了，详细资料请读者去自行查阅使用手册页。
最后-·个信号量函数是scm_destroy。这个函数的作用是在我们用完信号量后对它进行清理。
下面是它的定义声明：
include 
int sem_destroy (sem_t * sen };
与前几个函数一样，这个函数也使用一个信号量指针做参数，归还自己占用的一切资源。
在清理信号量的时候如果还有线程在等待它，用户就会收到一个错误。
加入jaVa编程群：524621833
---
## Page 353
第11章POSIX线程
335
和大多数Linux函数一样，这些函数在成功时都返回“0”。
动手试试：一个线程信号量
在这个thread4.c程序也是以thread2.c为基础的，因为改动的地方比较多，所以我们把它的完
整清单列在下面。
#include 
inrlude 
#include
cunistd.h>
include 
include 
#include 
void *thread_function(void *arg);
sem_t bin_sem;
char work_area[woRK_SIzE]: