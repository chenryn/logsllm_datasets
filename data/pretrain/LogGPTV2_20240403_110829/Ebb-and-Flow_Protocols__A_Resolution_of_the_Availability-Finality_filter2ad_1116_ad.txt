2
1
1
2
1
2
1
2
3
1
2
1
2
3
e
z
i
t
i
n
a
S
1
2
3
LOGt
ﬁn,i
LOGt
da,i
i:
cht
Fig. 6. Cht
which is prepended to cht
i is ﬂattened and sanitized to obtain the ﬁnalized ledger LOGt
ﬁn,i,
i and sanitized to form the available ledger LOGda.
voting rule with respect to ‘vanilla’ Streamlet is highlighted
red (line 19). Note that Sleepy is applied unaltered and the
modiﬁcation required for Streamlet is minor. The same is true
when instantiating the sub-protocol Πbft with other partially
synchronous BFT protocols such as HotStuff [11] or PBFT
[8], detailed in Section III-D.
ﬁn,i and LOGt
3) Ledger extraction: Finally, how honest nodes compute
is illustrated in
i is an ordering of snapshots, i.e.,
i is ﬂattened, i.e.,
LOGt
Figure 6. Recall that Cht
a chain of chains of LC blocks. First, Cht
da,i from Cht
i and cht
i
Safety of
Πbft
1
Lemma 1
Liveness of
Πbft after
max(GST, GAT)
Lemmas 2,3
2
Security of
Πlc after
max(GST, GAT)
3
Theorem 2
Liveness of
LOGﬁn after
max(GST, GAT)
Lemma 4
4
Security of
LOGﬁn
5
Theorem 1
1, Z1) on the
Fig. 7. Dependency of the security of LOGﬁn under (A∗
properties of Πlc and Πbft. Boxes represent the properties and the arrows
indicate the implications of these properties. Theorems and lemmas used to
validate the properties are displayed at the bottom right corner of each box.
Security of
Πlc
6
Given
Consistency of
LOGﬁn with
the output of Πlc
7
Lemma 5
Security of
LOGda
8
Theorem 1
2, Z2) on the
Fig. 8. Dependency of the security of LOGda under (A∗
properties of Πlc and Πbft. Boxes represent the properties and the arrows
indicate the implications of these properties. Theorems and lemmas used to
validate the properties are displayed at the bottom right corner of each box.
the chains of blocks are concatenated as ordered to arrive at a
single sequence of LC blocks. Then, all but the ﬁrst occurrence
of each block are removed (sanitized) to arrive at the ﬁnalized
ledger LOGt
ﬁn,i of LC blocks. To form the available ledger
LOGt
da,i, cht
i, which is a sequence of LC blocks, is appended
to LOGt
ﬁn,i and the result again sanitized.
C. Analysis
In this section, we analyze the security of Πsac as an ebb-
3 , 1
and-ﬂow protocol and show that it is optimally resilient:
Theorem 1. Πsac is a ( 1
2 )-secure ebb-and-ﬂow protocol.
Observe that no ebb-and-ﬂow protocol can tolerate a Byzan-
tine adversary A1(β1) with β1 ≥ 1
3 in a partially synchronous
network. Similarly, no ebb-and-ﬂow protocol can tolerate a
Byzantine adversary A2(β2) with β2 ≥ 1
2 in a synchronous
network. Hence the security of Πsac implies that it is optimally
resilient. We denote the worst-case adversary-environments as
(A∗
1,Z1) (cid:44) (A1( 1
We now focus on the proof of Theorem 1, which proceeds
as illustrated in Figures 7 and 8 and along with proofs for the
Lemmas can be found in Appendix B. Proof of Theorem 2 is
given in Appendix C.
(after
time
max{GST, GAT}) of the ledger LOGﬁn under (A∗
1,Z1). Fig-
ure 7 visualizes the dependency of the security of LOGﬁn
show the safety and liveness
We ﬁrst
3 ),Z1) and (A∗
2,Z2) (cid:44) (A2( 1
2 ),Z2).
9
on the properties of the sub-protocols Πlc and Πbft. We see
from Figure 7 that the safety of Πbft (box 1) implies the
safety of LOGﬁn (box 5). However, in Figure 5, txs do not
immediately arrive at Πbft. They are ﬁrst received by Πlc
and become part of its output ledger, snapshots of which
are then inputted to Πbft. Consequently, liveness of LOGﬁn
after time max{GST, GAT} (box 4) does not only require the
liveness of Πbft (box 2), but also the security Πlc after time
max{GST, GAT} (box 3).
We observe via Lemmas 1, 2 and 3 that the changes in
Streamlet described by lines 13 and 19 of Algorithm 1 does
not affect the validity of the safety and liveness proofs in
[12]. Hence, security of Πbft (boxes 1 and 2) directly follows
from the security proof of Streamlet. However, showing the
security of Πlc (box 3) claimed by Theorem 2, requires some
work. For this purpose, we extend the concept of pivots as
deﬁned in [3],
to a partially synchronous network. Pivots
are time slots such that every honest node has the same
view of the preﬁx of the longest chain up to the pivot. The
original deﬁnition of pivots in [3] ensures the convergence of
longest chains by requiring any time interval containing the
pivot to have more convergence opportunities (honest slots
which are sufﬁciently apart) than adversarial slots. However,
this requirement fails to ensure convergence under partial
synchrony as the isolated honest nodes can fail to build a
blockchain before max{GST, GAT}. Hence, we deﬁne the
concept of a GST-strong pivot that considers only the honest
slots after max{GST, GAT} within any interval around the
GST-strong pivot. Although this deﬁnition makes the arrival
of GST-strong pivots less likely, Appendix C proves that GST-
strong pivots appear in O(max{GST, GAT}) time following
max{GST, GAT}, thus, concluding the security of Πlc after
max{GST, GAT}. Finally, Lemma 4 combines the security of
Πlc and liveness of Πbft after time max{GST, GAT} to show
the liveness of LOGﬁn.
under (A∗
of LOGda on the properties of sub-protocols Πlc and Πbft.
We next show the safety and liveness of the ledger LOGda
2,Z2). Figure 8 visualizes the dependency of security
In Figure 5, LOGda is a concatenation of LOGﬁn with the
output ledger of Πlc. Hence, although the security of Πlc (box
6) is a necessary condition for the security of LOGda (box
8), we also need the preﬁx LOGﬁn to be consistent with the
output of Πlc in the view of every honest node at all times
(box 7), to guarantee the safety of the whole ledger LOGda.
Security of Πlc follows from the security proofs of the
respective protocol used for Πlc. However, proving the consis-
tency of LOGﬁn with the output of Πlc as claimed by Lemma
5, requires a careful look at the ﬁnalization rule of Πbft. As
indicated by Algorithm 1, a snapshot of the output of Πlc
becomes ﬁnal as part of a BFT block only if that snapshot
is seen as conﬁrmed by at least one honest node. However,
since Πlc is safe, the fact that one honest node sees that
snapshot as conﬁrmed implies that every honest node sees the
same snapshot as conﬁrmed. Consequently, the ledger LOGﬁn
will be generated from the same snapshots in the view of
every honest node. Moreover, as these snapshots are conﬁrmed
LC
BFT
LC
BFT
LC
BFT
Algorithm 2 Pseudocode of example snap-and-chat construction with
HotStuff as Πbft and a longest-chain protocol as Πlc
10
Q ← ∅
for time slot t ← 1, 2, 3, ... do
1: procedure MAIN()
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: end procedure
end for
ECHOINCOMINGNETWORKMESSAGES()
M ← GETINCOMINGNETWORKMESSAGES()
Mlc ← FilterForLcMessages(M)
Mbft ← FilterForBftMessages(M)
LCPROCESSNETWORKMESSAGES(Mlc)
LCSLOT(t)
cht ← LCCONFIRMEDCHAIN()
Q ← Q ∪ Mbft
Mbft,0 ←
∧ m.node.ch (cid:22) cht
Q ← Q \ Mbft,0
BFTPROCESSNETWORKMESSAGES(Mbft,0)
CHAINEDHOTSTUFFBFTSLOT(t)
Cht ← BFTFINALCHAIN()
(cid:12)(cid:12)(cid:12)(cid:12) IsInLocalView(m.node)
m ∈ Q
(cid:26)
(cid:27)
pseudocode.’ [11, Section 4.2] We add the condition that a
node processes a message only after the snapshot contained
in the block referred to by the message is viewed as conﬁrmed.
We explicate the resulting queueing mechanism as pseudocode
in Algorithm 2.
Messages for Πlc are unaffected by the changes (line 8).
Messages for Πbft are queued in Q (line 11) and only
processed by Πbft once the blocks that are referred to by the
message are in view and the payload snapshot is viewed as
conﬁrmed (line 12). Intuitively, for honest proposals soon after
GST this leads to a delay of at most ∆ until the LC blocks,
which conﬁrm the honest proposer’s snapshot, are received by
all honest nodes, and thus the proposal is considered for voting
by all honest nodes. Hence, liveness is unaffected. On the
other hand, adversarial proposals containing an unconﬁrmed
snapshot will look like tardy or missing proposals to HotStuff,
an adversarial behavior in the face of which HotStuff remains
safe. Hence, safety is unaffected. Proof of security follows the
same structure outlined in Section III-C. A detailed analysis
with security proofs can be found in Appendix D.
instead,
2) PBFT and Other Propose-and-Vote Protocols: Concep-
tually, the same adaptation as for HotStuff can be used to
employ one of the variety of propose-and-vote BFT protocols
for Πbft, even ones from the pre-blockchain era. Consider,
e.g., PBFT [8]. PBFT is not blockchain-based,
it
outputs a ledger of client requests which are denoted by m.
To use PBFT as Πbft in the example of Section III-B, client
requests are replaced by snapshots, m (cid:44) ch. Whenever the
output of Πlc updates, an honest leader i takes a snapshot
of its cht
i and starts the three-phase protocol that constitutes
the core of PBFT to atomically multicast the snapshot to the
other nodes. Honest clients queue the messages PRE-PREPARE,
PREPARE and COMMIT, which contain a snapshot as payload,
and only processes them once the snapshot is locally viewed
as conﬁrmed – again, conceptually similar to the adaptation
for HotStuff. The processing of the remaining messages is
unaltered. For PBFT, the output Cht
i is not a blockchain but
still a sequence of snapshots of the output of Πlc. Thus, the
(b) Πlc unsafe
(a) Πlc and Πbft safe
). (a) Safe Πlc and Πbft
Fig. 9. Snapshots are depicted as arrows (
means ch and Ch do not fork. (b) Forking in ch is absorbed by safe Πbft.
(c) Safe Πlc renders forking in Ch inconsequential.
(c) Πbft unsafe
preﬁxes of the output of Πlc and Πlc is safe, LOGﬁn is a preﬁx
of the output of Πlc in the view of any honest node at all times.
Finally, since LOGﬁn is a preﬁx of LOGda by construction,
the preﬁx property holds trivially.
To understand how LOGﬁn can be safe even if Πlc is unsafe
(i.e., under network partition) or how LOGda can be safe even
if Πbft is unsafe (i.e., when n/3 < f < n/2), consider the
following two examples (Figure 9). During a network partition,
LOGlc, the ledger output by Πlc, can be unsafe (Figure 9b).
Thus, snapshots taken by different nodes or at different times
can conﬂict. However, Πbft is still safe and thus orders these
snapshots linearly. Any transactions invalidated by conﬂicts
are sanitized during ledger extraction. As a result, LOGﬁn
remains safe. In a synchronous network with n/3 < f < n/2,
Πlc and thus LOGlc is safe. Even if Πbft is unsafe (Figure 9c),
ﬁnalization of a snapshot requires at least one honest vote, and
thus only valid snapshots become ﬁnalized. Since ﬁnalized
snapshots are consistent, LOGﬁn is consistent with LOGlc.
Thus, preﬁxing LOGlc with LOGﬁn to form LOGda does not
introduce inconsistencies, and LOGda remains safe.
D. Other BFT Sub-Protocols
In the example of Section III-B, Streamlet is readily re-
placed with other BFT sub-protocols for Πbft, such as HotStuff
[11] or PBFT [8]. Furthermore, the analysis of Section III-C
carries over with minor alterations and the security Theorem 1
holds for these variants as well. The necessary modiﬁcations
are described in the following.
1) HotStuff: Two minor modiﬁcations sufﬁce to use Hot-
Stuff as Πbft in the example of Section III-B.
a) Snapshots as Payload: To use HotStuff for Πbft,
a HotStuff block B contains a snapshot B.ch as payload.
Whenever the output of Πlc updates, an honest leader i takes
a snapshot of its cht
i and proposes it in a HotStuff block.
b) Side information about Πlc: To ensure that honest
nodes only vote for BFT blocks of which the payload snapshot
is viewed as conﬁrmed in Πlc, we piggy-back on the following
provision (terminology adapted to that of this paper): ‘During
the protocol, a [node] [processes] a message only after the
[chain] [identiﬁed] by the [block] is already in its local
tree. [...] For brevity, these details are also omitted from the
ledger extraction (Section III-B3) carries over readily.
Again, intuitively, as for HotStuff, for honest proposals soon
after GST the queueing of protocol messages leads to a delay
of at most ∆ until the LC blocks, which conﬁrm the honest
proposer’s snapshot, are received by all honest nodes, and
thus the proposal is considered for voting by all honest nodes.
Hence, liveness is unaffected. On the other hand, adversarial
proposals containing an unconﬁrmed snapshot will look like
tardy or missing proposals to PBFT, an adversarial behavior
in the face of which PBFT remains safe. Hence, safety is
unaffected.
IV. SIMULATION EXPERIMENTS