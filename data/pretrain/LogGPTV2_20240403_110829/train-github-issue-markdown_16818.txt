I want SerialPort communication on my application, but WebSerial is not
implemented, so I thought I'd use the device file provided by the platform
instead.  
That's where the problem came...
I'm having trouble finding a way to abort reading a device file that never
closes infinitely like this.  
Even if you forcibly specify the "ResourceID" and close the resource with
`Promise.race()`, `setTimeout` or `std::async::delay()`, the "promise runaway"
still could not be stopped.  
(Looking at `Deno.resource()` after closing, the resource was successfully
closed.)
    import {abortable, delay} from "...std@0.172.0/async/mod.ts";
    import {readAll, writeAll} from "...std@0.172.0/streams/mod.ts";
    const file = await Deno.open("COM1");
    const ac = new AbortController();
    // Successfully written
    await writeAll(file, new TextEncoder().encode("AT\n"));
    delay(1000).then(()=>{
        ac.abort();
        file.close();
        // Successfully closed
        console.trace(Deno.resources());
    });
    // Can't next on from here
    const result = await abortable(readAll(file), ac);
This is something that can't be helped due to the internal specifications, so
is there any other way to solve it than to ask them to add `AbortSignal` to
`read()` or `write()` like `fetch()`?  
Or are there other workarounds?