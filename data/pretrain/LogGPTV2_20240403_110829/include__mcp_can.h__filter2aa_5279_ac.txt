  delay(2000);
    Serial.begin(115200);
    while (CAN_OK != CAN.begin(CAN_100KBPS, MCP_8MHz)) {
        Serial.println("CAN BUS Shield init fail");
        Serial.println(" Init CAN BUS Shield again");
        delay(100);
    }
    Serial.println("CAN BUS Shield init ok!");
    delay(1000);
    while (1) {
      if(CAN_MSGAVAIL == CAN.checkReceive()){
        Serial.println("discard msg");
        CAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
        delay(1000);
      }
      else { break; }
    }
    //while(1);
    CAN.sendMsgBuf(0x665, 0, 8, (unsigned char*)"\x10\x06\x27\x01ZZZZ");
    int cnt = 0;
    long long challenge = 0;
    while (1) {
      if(CAN_MSGAVAIL == CAN.checkReceive()){
        CAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
        unsigned int canId = CAN.getCanId();
        Serial.println("-----------------------------");
        Serial.print("Get data from ID: ");
        Serial.println(canId, HEX);
        for(int i = 0; i> 8) & 0xff;
    buf[6] = (resp >> 16) & 0xff;
    buf[7] = (resp >> 24) & 0xff;
    CAN.sendMsgBuf(0x665, 0, 8, buf);
    buf[0] = 0x21;
    buf[1] = (resp >> 32) & 0xff;
    buf[2] = (resp >> 40) & 0xff;
    buf[3] = (resp >> 48) & 0xff;
    buf[4] = (resp >> 56) & 0xff;
    buf[5] = 0;
    buf[6] = 0;
    buf[7] = 0;
    CAN.sendMsgBuf(0x665, 0, 8, buf);
    while (1) {
      if(CAN_MSGAVAIL == CAN.checkReceive()){
        CAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
        unsigned int canId = CAN.getCanId();
        Serial.println("-----------------------------");
        Serial.print("Get data from ID: ");
        Serial.println(canId, HEX);
        for(int i = 0; i<len; i++)    // print the data
        {
            Serial.print(buf[i], HEX);
            Serial.print(" ");
        }
        Serial.println();
        break;
      }
    }
    buf[0] = 4;
    buf[1] = 0x31;
    buf[2] = 0x01;
    buf[3] = 0x43;
    buf[4] = 0x01;
    CAN.sendMsgBuf(0x665, 0, 5, buf);
    while (1) {
      if(CAN_MSGAVAIL == CAN.checkReceive()){
        CAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
        unsigned int canId = CAN.getCanId();
        Serial.println("-----------------------------");
        Serial.print("Get data from ID: ");
        Serial.println(canId, HEX);
        for(int i = 0; i<len; i++)    // print the data
        {
            Serial.print(buf[i], HEX);
            Serial.print(" ");
        }
        Serial.println();
        break;
      }
    }
    Serial.println("Reset the RHME board now.");
    delay(60000);
    Serial.println("Continuing.");
    while(1)
      f();
    while(1);
}
void loop(){}
void f()
{
    for (int i=0; i<8; i++) 
      stmp[i] = pgm_read_byte_near(&cans[which].data[i]);
    CAN.sendMsgBuf(pgm_read_word_near(&cans[which].sid), 0, 8, stmp);
    Serial.println(which);
    delay(1000);
    while(CAN_MSGAVAIL == CAN.checkReceive())            // check if data coming
    {
        CAN.readMsgBuf(&len, buf);    // read data,  len: data length, buf: data buf
        unsigned int canId = CAN.getCanId();
        Serial.println("-----------------------------");
        Serial.print("Get data from ID: ");
        Serial.println(canId, HEX);
        for(int i = 0; i<len; i++)    // print the data
        {
            Serial.print(buf[i], HEX);
            Serial.print(" ");
        }
        Serial.println();
    }
    which++;
    if (which * sizeof(canx) == sizeof(cans)) which = 0;
}
// END FILE