716 Chapter 19 n Finding Vulnerabilities in Source Code
Often, in this type of situation, the application is vulnerable to something
other than code execution. For example, if an application executes the program
wget with a user-controllable parameter as the target URL, an attacker may
be able to pass dangerous command-line arguments to the wget process. For
example, the attacker might cause wget to download a document and save it to
an arbitrary location in the fi lesystem.
URL Redirection
The following APIs can be used to issue an HTTP redirect in Java:
n javax.servlet.http.HttpServletResponse.sendRedirect
n javax.servlet.http.HttpServletResponse.setStatus
n javax.servlet.http.HttpServletResponse.addHeader
The usual means of causing a redirect response is via the sendRedirect
method, which takes a string containing a relative or absolute URL. If the value
of this string is user-controllable, the application is probably vulnerable to a
phishing vector.
You should also be sure to review any uses of the setStatus and addHeader
APIs. Given that a redirect simply involves a 3xx response containing an HTTP
Location header, an application may implement redirects using these APIs.
Sockets
The java.net.Socket class takes various forms of target host and port details
in its constructors. If the parameters passed are user-controllable in any way,
the application may be exploitable to cause network connections to arbitrary
hosts, either on the Internet or on the private DMZ or internal network on which
the application is hosted.
Confi guring the Java Environment
The web.xml fi le contains confi guration settings for the Java Platform environment
and controls how applications behave. If an application is using container-man-
aged security, authentication and authorization are declared in web.xml against
each resource or collection of resources to be secured, outside the application
code. Table 19-3 shows confi guration options that may be set in the web.xml fi le.
Servlets can enforce programmatic checks with HttpServletRequest.isU-
serInRole to access the same role information from within the servlet code. A
cc1199..iinndddd 771166 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 717
Chapter 19 n Finding Vulnerabilities in Source Code 717
mapping entry security-role-ref links the built-in role check with the cor-
responding container role.
In addition to web.xml, different application servers may use secondary deploy-
ment fi les (for example, weblogic.xml) containing other security-relevant settings.
You should include these when examining the environment’s confi guration.
Table 19-3: Security-Relevant Confi guration Settings for the Java Environment
SETTING DESCRIPTION
login-config Authentication details can be confi gured within the login-
config element.
The two categories of authentication are forms-based (the
page is specifi ed by the form-login-page element) and
Basic Auth or Client-Cert, specifi ed within the auth-
method element.
If forms-based authentication is used, the specifi ed form must
have the action defi ned as j_security_check and must
submit the parameters j_username and j_password. Java
applications recognize this as a login request.
security- If the login-config element is defi ned, resources can be
constraint restricted using the security-constraint element. This
can be used to defi ne the resources to be protected.
Within the security-constraint element, resource col-
lections can be defi ned using the url-pattern element. For
example:
/admin/*
These are accessible to roles and principals defi ned in the
role-name and principal-name elements, respectively.
session-config The session timeout (in minutes) can be confi gured within the
session-timeout element.
error-page The application’s error handling is defi ned within the error-
page element. HTTP error codes and Java exceptions can be
handled on an individual basis through the error-code and
exception-type elements.
init-param Various initialization parameters are confi gured within the
init-param element. These may include security-specifi c set-
tings such as listings, which should be set to false, and
debug, which should be set to 0.
cc1199..iinndddd 771177 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 718
718 Chapter 19 n Finding Vulnerabilities in Source Code
ASP.NET
This section describes methods of acquiring user-supplied input, ways of inter-
acting with the user’s session, potentially dangerous APIs, and security-relevant
confi guration options on the ASP.NET platform.
Identifying User-Supplied Data
ASP.NET applications acquire user-submitted input via the System.Web
.HttpRequest class. This class contains numerous properties and methods that
web applications can use to access user-supplied data. The APIs listed in Table
19-4 can be used to obtain data from the user request.
Table 19-4: APIs Used to Acquire User-Supplied Data on the ASP.NET Platform
API DESCRIPTION
Params Parameters within the URL query string, the body of
aPOST request, HTTP cookies, and miscellaneous
server variables are stored as maps of string names to
string values. This property returns a combined collec-
tion of all these parameter types.
Item Returns the named item from within the Params
collection.
Form Returns a collection of the names and values of form
variables submitted by the user.
QueryString Returns a collection of the names and values of vari-
ables within the query string in the request.
ServerVariables Returns a collection of the names and values of a
large number of ASP server variables (akin to CGI
variables). This includes the raw data of the request,
query string, request method, HTTP Host header, and
so on.
Headers HTTP headers in the request are stored as a map of
string names to string values and can be accessed
using this property.
Url Return details of the URL contained within the
RawUrl request, including the query string.
UrlReferrer Returns information about the URL specifi ed in the
HTTP Referer header in the request.
cc1199..iinndddd 771188 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 719
Chapter 19 n Finding Vulnerabilities in Source Code 719
API DESCRIPTION
Cookies Returns a collection of Cookie objects, which contain
details of the cookies received in the request, includ-
ing their names and values.
Files Returns a collection of fi les uploaded by the user.
InputStream Return different representations of the raw request
received from the client and therefore can be used
BinaryRead
to access any of the information obtained by all the
other APIs.
HttpMethod Returns the method used in the HTTP request.
Browser Return details of the user’s browser, as submitted in
the HTTP User-Agent header.
UserAgent
AcceptTypes Returns a string array of client-supported MIME types,
as submitted in the HTTP Accept header.
UserLanguages Returns a string array containing the languages
accepted by the client, as submitted in the HTTP
Accept-Language header.
Session Interaction
ASP.NET applications can interact with the user’s session to store and retrieve
information in various ways.
The Session property provides a simple way to store and retrieve information
within the current session. It is accessed in the same way as any other indexed
collection:
Session[“MyName”] = txtMyName.Text; // store user’s name
lblWelcome.Text = “Welcome “+Session[“MyName”]; // retrieve user’s name
ASP.NET profi les work much like the Session property does, except that they
are tied to the user’s profi le and therefore actually persist across different ses-
sions belonging to the same user. Users are reidentifi ed across sessions either
through authentication or via a unique persistent cookie. Data is stored and
retrieved in the user profi le as follows:
Profile.MyName = txtMyName.Text; // store user’s name
lblWelcome.Text = “Welcome “ + Profile.MyName; // retrieve user’s name
The System.Web.SessionState.HttpSessionState class provides another
way to store and retrieve information within the session. It stores information
cc1199..iinndddd 771199 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 720
720 Chapter 19 n Finding Vulnerabilities in Source Code
as a mapping from string names to object values, which can be accessed using
the APIs listed in Table 19-5.
Table 19-5: APIs Used to Interact with the User’s Session on the ASP.NET Platform
API DESCRIPTION
Add Adds a new item to the session collection.
Item Gets or sets the value of a named item in the collection.
Keys Return the names of all items in the collection.
GetEnumerator
CopyTo Copies the collection of values to an array.
Potentially Dangerous APIs
This section describes some common ASP.NET APIs that can introduce security
vulnerabilities if used in an unsafe manner.
File Access
System.IO.File is the main class used to access fi les in ASP.NET. All of its
relevant methods are static, and it has no public constructor.
The 37 methods of this class all take a fi lename as a parameter. Path traversal
vulnerabilities may exist in every instance where user-controllable data is passed
in without checking for dot-dot-slash sequences. For example, the following
code opens a fi le in the root of the C:\ drive on Windows:
string userinput = “..\\boot.ini”;
FileStream fs = File.Open(“C:\\temp\\” + userinput,
FileMode.OpenOrCreate);
The following classes are most commonly used to read and write fi le
contents:
n System.IO.FileStream
n System.IO.StreamReader
n System.IO.StreamWriter
They have various constructors that take a fi le path as a parameter. These
may introduce path traversal vulnerabilities if user-controllable data is passed.
For example:
string userinput = “..\\foo.txt”;
FileStream fs = new FileStream(“F:\\tmp\\” + userinput,
FileMode.OpenOrCreate);
cc1199..iinndddd 772200 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 721
Chapter 19 n Finding Vulnerabilities in Source Code 721
Database Access
Numerous APIs can be used for database access within ASP.NET. The following
are the main classes that can be used to create and execute a SQL statement:
n System.Data.SqlClient.SqlCommand
n System.Data.SqlClient.SqlDataAdapter
n System.Data.Oledb.OleDbCommand
n System.Data.Odbc.OdbcCommand
n System.Data.SqlServerCe.SqlCeCommand
Each of these classes has a constructor that takes a string containing a SQL
statement. Also, each has a CommandText property that can be used to get and set
the current value of the SQL statement. When a command object has been suit-
ably confi gured, it is executed via a call to one of the various Execute methods.
If user-controllable input is part of the string being executed as a query, the
application is probably vulnerable to SQL injection. For example:
string username = “admin’ or 1=1--”;
string password = “foo”;
OdbcCommand c = new OdbcCommand(“SELECT * FROM users WHERE username = ‘”
+ username + “’ AND password = “’ + password + “’”, connection);
c.ExecuteNonQuery();
executes this unintended query:
SELECT * FROM users WHERE username = ‘admin’ or 1=1--’
AND password = ‘foo’
Each of the classes listed supports prepared statements via their Parameters
property, which allows an application to create a SQL statement containing
parameter placeholders and set their values in a secure and type-safe way. If
used as intended, this mechanism is not vulnerable to SQL injection. For example:
string username = “admin’ or 1=1--”;
string password = “foo”;
OdbcCommand c = new OdbcCommand(“SELECT * FROM users WHERE username =
@username AND password = @password”, connection);
c.Parameters.Add(new OdbcParameter(“@username”, OdbcType.Text).Value =
username);
c.Parameters.Add(new OdbcParameter(“@password”, OdbcType.Text).Value =
password);
c.ExecuteNonQuery();
results in a query that is equivalent to the following:
SELECT * FROM users WHERE username = ‘admin’’ or 1=1--’
AND password = ‘foo’
cc1199..iinndddd 772211 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 722
722 Chapter 19 n Finding Vulnerabilities in Source Code
Dynamic Code Execution
The VBScript function Eval takes a string argument containing a VBScript
expression. The function evaluates this expression and returns the result. If user-
controllable data is incorporated into the expression to be evaluated, it might
be possible to execute arbitrary commands or modify the application’s logic.
The functions Execute and ExecuteGlobal take a string containing ASP code,
which they execute just as if the code appeared directly within the script itself.
The colon delimiter can be used to batch multiple statements. If user-controllable
data is passed into the Execute function, the application is probably vulnerable
to arbitrary command execution.
OS Command Execution
The following APIs can be used in various ways to launch an external process
from within an ASP.NET application:
n System.Diagnostics.Start.Process
n System.Diagnostics.Start.ProcessStartInfo
A fi lename string can be passed to the static Process.Start method, or the
StartInfo property of a Process object can be confi gured with a fi lename before
calling Start on the object. If the user can fully control the fi lename string, the
application is almost certainly vulnerable to arbitrary command execution. For
example, the following causes the Windows calc program to run:
string userinput = “calc”;
Process.Start(userinput);
If the user controls only part of the string passed to Start, the application
may still be vulnerable. For example:
string userinput = “..\\..\\..\\Windows\\System32\\calc”;
Process.Start(“C:\\Program Files\\MyApp\\bin\\” + userinput);
The API does not interpret shell metacharacters such as & and |, nor does
it accept command-line arguments within the fi lename parameter. Therefore,
this kind of attack is the only one likely to succeed when the user controls only
a part of the fi lename parameter.
Command-line arguments to the launched process can be set using the
Arguments property of the ProcessStartInfo class. If only the Arguments param-
eter is user-controllable, the application may still be vulnerable to something
other than code execution. For example, if an application executes the program
wget with a user-controllable parameter as the target URL, an attacker may
be able to pass dangerous command-line parameters to the wget process. For
cc1199..iinndddd 772222 88//1199//22001111 1122::1188::3355 PPMM
Stuttard c19.indd V2 - 08/11/2011 Page 723
Chapter 19 n Finding Vulnerabilities in Source Code 723
example, the process might download a document and save it to an arbitrary
location on the fi lesystem.
URL Redirection
The following APIs can be used to issue an HTTP redirect in ASP.NET:
n System.Web.HttpResponse.Redirect
n System.Web.HttpResponse.Status
n System.Web.HttpResponse.StatusCode
n System.Web.HttpResponse.AddHeader
n System.Web.HttpResponse.AppendHeader
n Server.Transfer
The usual means of causing a redirect response is via the HttpResponse.
Redirect method, which takes a string containing a relative or absolute URL.
If the value of this string is user-controllable, the application is probably vulner-
able to a phishing vector.
You should also be sure to review any uses of the Status/StatusCode prop-
erties and the AddHeader/AppendHeader methods. Given that a redirect simply
involves a 3xx response containing an HTTP Location header, an application
may implement redirects using these APIs.
The Server.Transfer method is also sometimes used to perform redirec-
tion. However, this does not in fact cause an HTTP redirect. Instead, it simply
changes the page being processed on the server in response to the current
request. Accordingly, it cannot be subverted to cause redirection to an off-site
URL, so it is usually less useful to an attacker.
Sockets
The System.Net.Sockets.Socket class is used to create network sockets. After a
Socket object has been created, it is connected via a call to the Connect method,
which takes the IP and port details of the target host as its parameters. If this
host information can be controlled by the user in any way, the application may be
exploitable to cause network connections to arbitrary hosts, either on the Internet
or on the private DMZ or internal network on which the application is hosted.
Confi guring the ASP.NET Environment