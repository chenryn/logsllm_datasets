title:An In-depth Look Into SDN Topology Discovery Mechanisms: Novel Attacks
and Practical Countermeasures
author:Eduard Marin and
Nicola Bucciol and
Mauro Conti
An In-depth Look Into SDN Topology Discovery Mechanisms:
Novel Attacks and Practical Countermeasures
Eduard Marin
University of Birmingham, UK
imec-COSIC, KU Leuven, Belgium
PI:EMAIL
Nicola Bucciol
University of Padua, Italy
PI:EMAIL
Mauro Conti
University of Padua, Italy
PI:EMAIL
ABSTRACT
Software-Defined Networking (SDN) is a novel network approach
that has revolutionised existent network architectures by decou-
pling the control plane from the data plane. Researchers have shown
that SDN networks are highly vulnerable to security attacks. For
instance, adversaries can tamper with the controller’s network
topology view to hijack the hosts’ location or create fake inter-
switch links. These attacks can be launched for various purposes,
ranging from impersonating hosts to bypassing middleboxes or
intercepting network traffic. Several countermeasures have been
proposed to mitigate topology attacks but to date there has been no
comprehensive analysis of the level of security they offer. A critical
analysis is thus an important step towards better understanding the
possible limitations of the existing solutions and building stronger
defences against topology attacks.
In this paper, we evaluate the actual security of the existing mech-
anisms for network topology discovery in SDN. Our analysis reveals
6 vulnerabilities in the state-of-the-art countermeasures against
topology attacks: TopoGuard, TopoGuard+, SPV and SecureBinder.
We show that these vulnerabilities can be exploited in practice to
manipulate the network topology view at the controller. Further-
more, we present 2 novel topology attacks, called Topology Freezing
and Reverse Loop, that exploit vulnerabilities in the widely used
Floodlight controller. We responsibly disclosed these vulnerabilities
to Floodlight. While we show that it is difficult to fully eradicate
these attacks, we propose fixes to mitigate them. In response to
our findings, we conclude the paper by detailing practical ways of
further improving the existing countermeasures.
KEYWORDS
Software Defined Networking; Security; Topology Attacks and
Countermeasures.
ACM Reference Format:
Eduard Marin, Nicola Bucciol, and Mauro Conti. 2019. An In-depth Look Into
SDN Topology Discovery Mechanisms: Novel Attacks and Practical Coun-
termeasures. In 2019 ACM SIGSAC Conference on Computer and Communi-
cations Security (CCS ’19), November 11–15, 2019, London, United Kingdom.
ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3319535.3354194
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354194
1 INTRODUCTION
Software-Defined Networking (SDN) is a new networking paradigm
that is gaining momentum as a technology for developing more
dynamic, agile and programmable networks in data centre and en-
terprise environments [25]. SDN proposes to decouple the control
logic (i.e., control plane) from the data forwarding functionality of
networking devices, i.e., data plane. One of the key benefits of SDN
is that it offers centralised control. The SDN paradigm postulates
that the network’s intelligence resides in a logically centralised con-
troller, allowing the underlying network infrastructure to become
simple forwarding devices [52]. The controller maintains several
core services that are responsible for conducting critical functions
in the network, e.g., routing or network topology discovery. An-
other important aspect of SDN is its programmability. Through
the use of applications, running on top of the controller, and open
standard application programming interfaces, the controller can
easily reprogram and collect statistics from networking devices.
SDN applications are software-based programs designed to perform
high-level tasks in the network, such as balancing load, defining
access control list rules or monitoring traffic. The controller typi-
cally has a northbound and a southbound interface to communicate
with the application and data planes, respectively. The OpenFlow
communication protocol, standardised by the Open Networking
Foundation (ONF) in 2011, is the de facto open-source standard
for the southbound interface [28]. The OpenFlow protocol has re-
ceived significant attention by the research community [23] and is
currently being used in real-world SDN networks, such as Google’s
B4 network [17].
Using OpenFlow, the controller installs flow rules to instruct
switches on how to handle packets. Switches contain several flow
tables, each with its own set of flow rules. A flow rule consists of
three fields: (i) matching criteria, (ii) action (e.g., drop the packet)
and (iii) priority. Every time a switch receives a packet whose head-
ers do not match any of its flow rules, the switch encapsulates the
packet in an OpenFlow packet_in and forwards it to the controller.
The latter then installs a flow rule in the switch through an Open-
Flow packet_out. From this point onwards, if the switch receives
a packet with identical headers, it uses the flow rule previously
cached for as long as the flow rule remains valid.
Despite its benefits, SDN broadens the attack surface and intro-
duces new security challenges. Several researchers have shown that
it is possible to launch security attacks at the application, control
and data planes [18, 24, 27, 41, 44, 45, 50, 54], while other work
has proposed countermeasures for improving the security of SDN
networks [5, 35, 37, 38, 47, 51, 53]. Among the proposed attacks,
topology attacks that aim at poisoning the network topology are
one of the most dangerous types. Although topology attacks are
well-known by the network security community [22, 42], the conse-
quences of such attacks in SDN networks can be more severe than
in traditional networks [2]. In traditional networks, adversaries can
only tamper with the topology of a small fraction of the network
by convincing a set of switches/routers of a specific (fake) topology
event. Instead, SDN relies on the use of a logically centralised con-
troller with full network visibility. As the controller contains all the
network topology information, adversaries can influence any part
of the network regardless of their location within the network. To
further complicate matters, SDN-enabled switches lack sufficient
logic and capabilities to implement traditional countermeasures
such as dynamic Address Resolution Protocol (ARP) inspection.
Maintaining a genuine network topology view at the controller
is of utmost importance. SDN core services and applications require
real-time and accurate topology information to perform their tasks
correctly. If adversaries compromise the network topology, they
can redirect traffic through compromised machines. This allows
bypassing middleboxes or conduct Man-in-The-Middle (MiTM) or
Denial-of-Service (DoS) attacks. Furthermore, adversaries can im-
personate hosts to receive their traffic. This is especially dangerous
in the case of a server that handles a large amount of traffic.
Our contribution
This paper demonstrates that securing the SDN topology discovery
mechanisms implies not only to design secure topology defences but
also to implement the topology services at the controller correctly.
Concretely, the contributions of this work are the following:
• We conduct a systematic security analysis of the state-of-
the-art defences against topology attacks (see footnote1).
This resulted in the identification of 6 vulnerabilities in To-
poGuard, TopoGuard+, Stealthy Probing-Based Verification
(SPV) and SecureBinder. We propose and implement attacks
against TopoGuard/TopoGuard+ and provide clear evidence
of other attacks against SPV and SecureBinder (Section 5).
• We discover important security vulnerabilities within the
topology services in Floodlight, one of the major SDN con-
trollers. Following the principle of responsible disclosure,
we notified Floodlight about the vulnerabilities we identified.
Then we introduce and practically demonstrate two novel
attacks, called Topology Freezing and Reverse Loop, that can
severely damage the controller’s view of the network. As
fully eliminating these attacks would require major changes
in the Floodlight controller, we propose practical ways of
mitigating such attacks (Section 6).
• Based on our findings, we also discuss possible ways of
further hardening the existing topology countermeasures to
defend against link fabrication and host location hijacking
attacks (Section 7).
1We contacted the authors of TopoGuard, TopoGuard+, SPV and SecureBinder to
request the source code of their solutions. They all replied to our emails and answered
our questions. Unfortunately, the authors of SPV and SecureBinder were unable to
share their source code with us.
Organisation. The remainder of this paper is organised as fol-
lows: Section 2 gives an overview of related work. Section 3 reviews
the SDN topology discovery mechanisms and briefly summarises
the topology attacks and countermeasures proposed by other re-
searchers. Section 4 shows the laboratory setup we used for our
experiments. In Section 5, we analyse the security of TopoGuard,
TopoGuard+, SPV and SecureBinder and exploit weaknesses in each
of them to uncover new topology attacks. In Section 6, we introduce
Topology Freezing and Reverse Loop, two novel topology attacks that
leverage weaknesses in the way the Floodlight controller imple-
ments its topology services. Along with each of these attacks, we
propose fixes to mitigate them. Section 7 elaborates on practical
ways of further enhancing the existing countermeasures. Section 8
provides concluding remarks.
2 RELATED WORK
Hong et al. [15] and Dhawan et al. [11] were the first to show how
adversaries can poison the network topology view at the controller
to create fake links between switches (i.e., link fabrication attacks)
or impersonate a victim host (i.e., host location hijacking attacks).
In response to these attacks, Hong et al. [15] and Dhawan et al. [11]
devised TopoGuard and SPHINX, respectively. TopoGuard prevents
these attacks by (i) adding an integrity check to topology packets (ii)
labelling switch ports to avoid hosts propagating topology packets
to the network and (iii) checking pre- and post-conditions (i.e., veri-
fying that a host left the previous network location before moving to
the new one). SPHINX proposes a general framework for detecting
the occurrence of attacks (not only topology attacks) by validat-
ing all network updates. To achieve its goal, SPHINX constructs a
flow graph of observed traffic between each pair of endpoints and
compares it with past graphs in order to find anomalies. However,
neither TopoGuard nor SPHINX can thwart sophisticated topology
attacks. For example, adversaries can still perform host location
hijacking attacks either by spoofing the victim host’s MAC address
or by exploiting the time that hosts are in transit, i.e., moving from
one network location to another one.
Skowyra et al. found two topology attacks against TopoGuard
called port amnesia and port probing [40]. They also proposed
Topoguard+, an extended version of Topoguard that additionally
checks for suspicious port reset events and tracks the latency of
inter-switch links. The latter allows detection of link fabrication
attacks by adversaries who relay topology packets using an out-of-
band channel. Another approach to detect relay-based link fabri-
cation attacks was proposed by Alimohammadifar et al. [4]. The
authors developed a security solution called SPV that periodically
injects probing packets to the network to find fake inter-switch
links. Jero et al. introduced SecureBinder [19], a security solution
that uses a modified legacy version of the 802.1x authentication
protocol tp bind together all host network identifiers. However,
the previous two solutions can only protect against certain attacks;
SPV is only suitable for finding fake links whereas SecureBinder
focuses only on preventing host location hijacking attacks.
This paper extensively analyses the security of TopoGuard, To-
poGuard+, SPV and SecureBinder and discusses possible research
directions to further improve them.
Network topology discovery is the process by which the con-
troller learns about: (i) the network devices (e.g., switches), (ii) the
links between switches and (iii) the location of the hosts within
the network. The first is achieved when switches establish a TCP
connection – ideally with TLS/SSL – and perform the OpenFlow
handshake with the controller. All switches have a unique identifier
known as DataPath ID (DPID). It is important to note that switches
themselves do not support any mechanism to discover links or track
hosts. For inter-switch link discovery, the controller relies on the
Link Discovery Service (LDS), whereas the Host Tracking Service
(HTS) is used for tracking the host’s location. Next, we describe the
HTS and the LDS in more detail.
The Host Tracking Service (HTS) maintains information about
hosts (e.g., MAC and IP addresses) and their location within the
network, i.e., the DPID and port number of the switch where the
host is connected. To discover the host location, the HTS leverages
on OpenFlow packet_in packets triggered when a host sends a
packet for which the switch does not have any flow-rule installed.
This causes the HTS to create an entry in the host profile table,
binding the host identifiers to its current network location. When-
ever a host migrates to a new network location, the host profile
table is updated following the procedure previously described. Sim-
ilarly, if a host disconnects from a switch, the latter notifies the
controller by sending an OpenFlow packet containing a port-down
event. In such a case, the HTS immediately proceeds to remove the
corresponding entry in the host profile table.
3 BACKGROUND
This section provides the background to understand the current
topology discovery mechanisms in SDN. Afterwards, we briefly
review the state-of-the-art topology attacks and defences that have
been proposed by other researchers.
3.1 Topology discovery mechanisms in SDN
Below, we describe the process for discovering the network topol-
ogy in SDN. Subsequently, we introduce the Host Tracking Service
(HTS) and the Link Discovery Service (LDS), the two main con-
troller core services involved in network topology discovery.
The Link Discovery Service (LDS) discovers and keeps track
of the links between switches. In most SDN controllers, the LDS
is based on the OpenFlow Discovery Protocol (OFDP) [3]. Figure 1
illustrates the process by which the controller can discover a unidi-
rectional link between two switches (denoted by S1 and S2). First,
the controller encapsulates a Link Layer Discovery Protocol (LLDP)
packet inside an OpenFlow packet_out packet and sends it to S1,