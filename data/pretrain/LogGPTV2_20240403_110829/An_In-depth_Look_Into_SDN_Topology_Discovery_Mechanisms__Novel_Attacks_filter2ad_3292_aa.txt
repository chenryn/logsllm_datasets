# An In-Depth Look into SDN Topology Discovery Mechanisms: Novel Attacks and Practical Countermeasures

**Authors:**
- Eduard Marin, University of Birmingham, UK; imec-COSIC, KU Leuven, Belgium
- Nicola Bucciol, University of Padua, Italy
- Mauro Conti, University of Padua, Italy

**Abstract:**
Software-Defined Networking (SDN) is a revolutionary network architecture that decouples the control plane from the data plane, offering centralized control and programmability. However, SDN networks are highly vulnerable to security attacks, such as topology manipulation, where adversaries can tamper with the controller's network topology view to hijack host locations or create fake inter-switch links. These attacks can be used for various malicious purposes, including impersonating hosts, bypassing middleboxes, or intercepting network traffic.

Several countermeasures have been proposed to mitigate these topology attacks, but there has been no comprehensive analysis of their effectiveness. This paper provides a critical evaluation of existing mechanisms for network topology discovery in SDN, revealing six vulnerabilities in state-of-the-art countermeasures: TopoGuard, TopoGuard+, SPV, and SecureBinder. We demonstrate that these vulnerabilities can be exploited to manipulate the network topology view at the controller. Additionally, we present two novel topology attacks, Topology Freezing and Reverse Loop, which exploit vulnerabilities in the widely used Floodlight controller. We responsibly disclosed these vulnerabilities to the Floodlight developers and propose practical fixes to mitigate them. Finally, we discuss ways to further enhance the existing countermeasures.

**Keywords:**
Software-Defined Networking, Security, Topology Attacks, Countermeasures

**ACM Reference Format:**
Eduard Marin, Nicola Bucciol, and Mauro Conti. 2019. An In-Depth Look into SDN Topology Discovery Mechanisms: Novel Attacks and Practical Countermeasures. In 2019 ACM SIGSAC Conference on Computer and Communications Security (CCS '19), November 11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3319535.3354194

**Permission:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

**CCS '19, November 11–15, 2019, London, United Kingdom**
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354194

## 1 Introduction
Software-Defined Networking (SDN) is a new networking paradigm gaining traction in data center and enterprise environments. SDN decouples the control logic (control plane) from the data forwarding functionality (data plane), centralizing network intelligence in a logically centralized controller. This centralization allows for simpler forwarding devices and more dynamic, agile, and programmable networks. The controller manages core services such as routing and network topology discovery, and it communicates with the application and data planes through northbound and southbound interfaces, respectively. The OpenFlow protocol, standardized by the Open Networking Foundation (ONF) in 2011, is the de facto standard for the southbound interface.

Despite its benefits, SDN introduces new security challenges. Researchers have demonstrated various security attacks targeting the application, control, and data planes. One of the most dangerous types of attacks is topology manipulation, where adversaries aim to poison the network topology. In traditional networks, such attacks are limited to a small fraction of the network, but in SDN, the centralized controller's full network visibility makes it possible for adversaries to influence any part of the network. Maintaining an accurate topology view is crucial for the proper functioning of SDN core services and applications.

### Our Contribution
This paper demonstrates that securing SDN topology discovery mechanisms involves both designing secure defenses and correctly implementing topology services at the controller. Specifically, our contributions are:
- A systematic security analysis of state-of-the-art defenses against topology attacks, identifying six vulnerabilities in TopoGuard, TopoGuard+, Stealthy Probing-Based Verification (SPV), and SecureBinder. We propose and implement attacks against TopoGuard/TopoGuard+ and provide evidence of other attacks against SPV and SecureBinder.
- Discovery of significant security vulnerabilities within the topology services in Floodlight, one of the major SDN controllers. We notified Floodlight about these vulnerabilities and introduced two novel attacks, Topology Freezing and Reverse Loop, which can severely damage the controller's view of the network. We propose practical ways to mitigate these attacks.
- Discussion of possible ways to further harden existing topology countermeasures to defend against link fabrication and host location hijacking attacks.

**Organization:**
The remainder of this paper is organized as follows: Section 2 provides an overview of related work. Section 3 reviews SDN topology discovery mechanisms and summarizes existing topology attacks and countermeasures. Section 4 describes the laboratory setup used for our experiments. Section 5 analyzes the security of TopoGuard, TopoGuard+, SPV, and SecureBinder, and exploits weaknesses to uncover new topology attacks. Section 6 introduces Topology Freezing and Reverse Loop, two novel topology attacks, and proposes fixes to mitigate them. Section 7 discusses practical ways to enhance existing countermeasures. Section 8 provides concluding remarks.

## 2 Related Work
Hong et al. [15] and Dhawan et al. [11] were the first to demonstrate how adversaries can poison the network topology view at the controller to create fake links between switches (link fabrication attacks) or impersonate a victim host (host location hijacking attacks). In response, Hong et al. [15] and Dhawan et al. [11] developed TopoGuard and SPHINX, respectively. TopoGuard prevents these attacks by adding integrity checks to topology packets, labeling switch ports, and verifying pre- and post-conditions. SPHINX proposes a general framework for detecting attacks by validating all network updates. However, neither TopoGuard nor SPHINX can thwart sophisticated topology attacks, such as host location hijacking via MAC address spoofing or exploiting transit times.

Skowyra et al. [40] identified two topology attacks against TopoGuard, port amnesia and port probing, and proposed TopoGuard+, an extended version that checks for suspicious port reset events and tracks inter-switch link latency. Alimohammadifar et al. [4] developed SPV, which injects probing packets to detect fake inter-switch links. Jero et al. [19] introduced SecureBinder, which uses a modified 802.1x authentication protocol to bind host network identifiers. However, SPV and SecureBinder have limitations; SPV is only suitable for finding fake links, while SecureBinder focuses on preventing host location hijacking attacks.

This paper extensively analyzes the security of TopoGuard, TopoGuard+, SPV, and SecureBinder and discusses possible research directions to improve them.

## 3 Background
### 3.1 Topology Discovery Mechanisms in SDN
Network topology discovery in SDN involves the controller learning about network devices, inter-switch links, and host locations. Switches establish a TCP connection with the controller and perform the OpenFlow handshake, using a unique identifier called DataPath ID (DPID). The controller relies on the Link Discovery Service (LDS) for inter-switch link discovery and the Host Tracking Service (HTS) for tracking host locations.

**Host Tracking Service (HTS):**
The HTS maintains information about hosts, including their MAC and IP addresses, and their current network location (DPID and port number). When a host sends a packet for which the switch does not have a flow rule, the HTS creates an entry in the host profile table, binding the host identifiers to its current location. If a host migrates to a new location, the host profile table is updated. If a host disconnects, the switch notifies the controller, and the HTS removes the corresponding entry.

**Link Discovery Service (LDS):**
The LDS discovers and tracks links between switches, typically using the OpenFlow Discovery Protocol (OFDP). Figure 1 illustrates the process of discovering a unidirectional link between two switches (S1 and S2). The controller encapsulates a Link Layer Discovery Protocol (LLDP) packet inside an OpenFlow packet_out and sends it to S1, which forwards the packet to S2. S2 then sends the LLDP packet back to the controller, allowing the controller to learn about the link.