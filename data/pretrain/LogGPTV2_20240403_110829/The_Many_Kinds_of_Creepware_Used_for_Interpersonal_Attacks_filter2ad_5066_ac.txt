2https://www.youtube.com/watch?v=3MB1dVpSuRk
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:59 UTC from IEEE Xplore.  Restrictions apply. 
631
Caller ID (46 / 114 K)
Info Extraction (75 / 173 K)
Control (13 / 80 K)
Spoof (115 / 379 K)
Defense (42 / 175 K)
Surveillance (372 / 913 K)
Evasion (28 / 87 K)
Tutorial (86 / 205 K)
Harassment (80 / 62 K)
None (143 / 388 K)
100
50
40
38
56
35
41
105
90
89
63
52
6
9
4 1 3
15
9
4
11 10
3
3
11 12
7
7 4
9
6 5
8
4
8 10
5
20
19
15
12
9
5
23
23
27
14
9
12
6
17
6
s
p
p
a
f
o
r
e
b
m
u
N
0
Spoof-S M S
Evasion-Steganography
Surveillance- Microphone
Spoof- Html
Spoof- Misc
Spoof-Image
Surveillance-Thorough
Spoof-Social Media
Info Extraction-System
Tutorial-Settings
Spoof-Fake Call
None-TutorialDevelopment
Evasion- AlternativeInput
Spoof-Thorough
Spoof-BurnerPhone
Spoof-Suppress CallerID
Info Extraction- Dump
Tutorial- Hacking
Spoof- Voice
Info Extraction-PeopleSearch
Surveillance-Screen
Surveillance-Calls
Surveillance-Location
None-Com munication
Surveillance-S M S
Surveillance- Misc
Surveillance-Social Media
Surveillance-Camera
Control- HideIcon
Evasion- Hidden Content
CallerID - Misc
Surveillance-Social Media Covert
Defense- AntiSurveillance
CallerID -Location
Harassment-FakeSurveillance
Control- Use Limitations
None- Misc
Tutorial-Root
None-Index
Info Extraction
None-PaidInstalls
None-Tutorial Misc
Harassment- Misc
None- Android M ods V m
Harassment-Bomber
Defense- AntiHarassment
Harassment- Automation
Info Extraction-Fraud
Info Extraction- Hack Tools
Defense- Misc
Fig. 4: Count of top 1,000 apps in each of the 50 sub-categories of our codebook. Legend shows high-level app categories
and for each, the number of apps in the category and the number of app installations for that category.
“You say this is a joke . . . there is absolutely nothing funny
about me looking up the number of my ex abuser who i
have a restraining order against and it showing me he is
1 block away from my home. So i freak out panicking and
call the cops and show them the location on my phone and
they search the area and cant ﬁnd him. They come back
. . . and then . . . click on it just to see it is a f*cking joke!!
. . . i hope they get shut down.”
Another concerning set of apps that we coded as Harass-
ment - Bomber enable users to send high volumes of texts,
calls, emails, posts, etc., to a victim. For many of these apps,
such as “Message Bomber -send 5000+ sms”, it is difﬁcult
to envision a non-malicious use case. Section VII-B examines
these apps and the context in which they are used.
We coded 86 apps as relevant tutorials, most of which
provide hacking tips. Manual inspection conﬁrmed that hack-
ing tutorials recommend many of the attack apps that we
coded (see Section VII-B), in addition to generic hacking
tips, hacking term glossaries, and forums. In addition, several
apps either provided tutorials for rooting phones, or actually
rooted them, which is a vital step that enables many of the
interpersonal attack apps we found.
Many of the 74 apps coded as Information Extraction are
similar to surveillance apps in that they extract device and
personal information, but not on an ongoing basis. Instead,
many of these apps perform one-time dumps of content
(e.g., dumping and decrypting WhatsApp databases, extracting
forensic information, hidden or encrypted content caches,
call logs, social media data, location history, deleted SMS
messages, etc). We also found apps that directly provide
hacking tools (e.g., pen-testing apps), as well as a cluster of
apps that seemed most useful for fraud, particularly related
to credit cards, which included card-number revealers, detail
ﬁnders, validators, and generators. Two concerning apps are
“Bank Card Validator” and “Credit Card Revealer”, both of
which regularly appear alongside an app that generates fake
ID card images (coded as Spoof - Image).
A few app categories seemed useful for both attackers and
victims. For example, a cluster of apps selectively hide content
or are designed around privacy-focused messaging platforms,
which we coded as Evasion - Hidden-Content. Most of these
apps selectively hide images, WhatsApp content, contacts,
communications, etc. They often appear alongside attack apps
and are possibly used by surveillants to hide their activities
from victims. In many cases these apps either hide their icons
or pose as an unsuspecting app, as in the case of the “Smart
Hide Calculator”. We also discovered general purpose Control
- Hide-Icon apps that hide the presence of other apps (see
Section VII-B for more analysis of these apps).
Finally, we note that the above discussion of attack apps is
intended to describe illustrative categories of attack apps and
examples that came up in our analysis. Appendix C provides
a description of every code sub-category.
Characterizing potentially defensive apps. Our coding re-
vealed clear signs of victims protecting themselves and/or
ﬁnding ways to evade restrictions imposed upon them. Al-
though many apps assigned to other categories could plausibly
have utility to both attackers and victims, we only coded apps
under defense sub-categories when they seem to be exclusively
designed to defend against surveillance or other attacks.
The most prevalent category of defense apps we discovered
contained 38 anti-surveillance apps that prevent, block, or
detect surveillance that may be conducted remotely or through
physical proximity. These apps use a wide range of anti-
surveillance mechanisms that includes access control, counter-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:59 UTC from IEEE Xplore.  Restrictions apply. 
632
surveillance of failed login attempts, and shoulder-surﬁng
defense. For example, “Incoming Call Lock - Protector” is
an access-control app that password protects incoming phone
calls so that they cannot be answered by an attacker. As
another example, “Oops! AppLock” enables access codes that
lock the phone with no UI indications that the phone is locked,
giving the impression that the phone is frozen in an open state.
The unlocking mechanism is sometimes covert and subtle,
such as a speciﬁc pattern of key volume presses.
A smaller category of defense apps seems to be primarily
useful for victims experiencing SMS or call bombing, and
remotely triggered alarms. Two such apps provided the ability
to easily and temporarily disable system volume or vibrations
during set times. Finally, “Hidden Apps” is a unique defensive
app that reveals the presence of undesirable apps whose icons
have been hidden, such as covert surveillance apps.
Characterizing apps coded as “None”. Among CreepRank’s
top 1,000 apps are 143 that are indicative of creepware users
and victims but that do not directly relate to attack or defense.
Most of these apps rank towards the bottom of the top 1,000,
with only 2 in the top 200. Among these, 23 apps implement
Android modiﬁcations or virtual machines, which appeal to the
hacker community and to anti-virus testers. We also observed
18 tutorial apps, mostly pertaining to Android modiﬁcation
and development, but also to catching cheating love interests.
14 communication apps provide group chat functionality for
social-media platforms, platforms for local dating, or appear
to promise free burner-phone capabilities.Finally, we found 9
index apps and 27 pay-per-install (PPI) apps, which link to
many apps and incentivize users to install them. The index
apps either directly recommend other apps, or index deals and
coupons offered by other apps. The business model of PPI apps
is to charge app developers who wish to artiﬁcially inﬂate the
install counts of their apps, and then incentivize PPI app users
to install these apps. Among the remaining 52 miscellaneous
apps are several trends including money-making, social media,
dating, and accessibility.
VI. UNDERSTANDING CREEPRANK’S EFFICACY
The prior section highlights the wide variety of interper-
sonal attack and (in a few cases) defense apps identiﬁed
by CreepRank’s exploratory algorithm. We now discuss in
more detail why CreepRank was able to ﬁnd these apps by
examining two questions: (1) Does CreepRank outperform
alternative algorithms such Random Walk with Restart and
the MLE-based or ﬁrst-order MAP approach (described in
Section IV)? and (2) Why did some irrelevant apps show
up in CreepRank’s results? In subsequent sections we further
highlight CreepRank’s efﬁcacy by using it to facilitate a deeper
measurement study of the creepware ecosystem.
A. CreepRank versus Alternative Algorithms
CreepRank is a single-class semi-supervised exploratory
algorithm based on the principle of GBA. It differs from
most malware analysis algorithms in that it does not use any
descriptive features that would constrain the nature of the
s
p
p
a
f
o
r
e
b
m
u
N
800
600
400
200
0
CRNMAP
CR1MAP
CRNMLE
RWR
CallerID
Control
Defense
Harassment
Evasion
Info Extraction
Spoof
Surveillance
Tutorial
None
Fig. 5: Category counts for CreepRank (CRNMAP), RWR,
and CreepRank variants CR1MAP and CRNMLE.
creepware apps it discovers. We compare CreepRank to Ran-
dom Walk with Restart (RWR) [11], [12], another exploratory
GBA algorithm that is applicable to our setting due to its use
of a single class of labeled examples. The two main elements
of CreepRank are its MAP estimates based on a data-driven
prior belief about the scarcity of creepware apps (CRNMAP),
and its ability to measure nth-order correlations between app
installations. To understand which of these contributes most to
CreepRank, we compare to an iterative version of CreepRank
that uses maximum likelihood estimation (CRNMLE) and to a
ﬁrst-order correlation using maximum a posteriori probability
estimation (CR1MAP) (see Section IV-C).
For the purposes of comparing these algorithms, we treat the
apps coded under None categories as false positives, and all
other apps as true positive creepware. We measure algorithmic
quality based on the percentage of creepware apps in each
algorithm’s top 1,000 rankings. Two authors coded the top
1,000 apps produced by each algorithm, discussing possible
changes to the codebook as they went, but ultimately ﬁnding
that all trends were already captured by our existing codebook
(Section V). Our coders achieved high inter-rater reliability
over creepware categories with Cohen’s kappa equal to 0.87.
A histogram of app categories in the top 1,000 results of
each algorithm is shown in Figure 5. CRNMLE and RWR have
the most None apps in their top 1,000. On the 2017 data, the
top 1,000 produced by CR1MAP and CRNMAP differ by only
67 apps, yet 25 of CR1MAP’s 67 are None apps, compared
to only 5 of CRNMAP’s. This suggests that for large datasets
such as ours, running CreepRank iteratively until convergence
yields a modest improvement in the rankings.
More important to CreepRank is the use of MAP estimation,
as seen in the comparison between CRNMLE and CRNMAP.
CRNMLE gave high scores to many rare apps that co-occur
with creepware due to random chance, resulting in 857 None
apps in its top 1,000 rankings, 853 of which were observed
fewer than 10 times. While RWR performs moderately better
than CRNMLE, it too is insufﬁciently skeptical of rare apps,
resulting in 693 None apps in its top 1,000 rankings.
To see if different algorithms detected qualitatively different
creepware, we examined the 307 creepware apps detected
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:59 UTC from IEEE Xplore.  Restrictions apply. 
633
by RWR, of which 223 are not in CRNMAP’s top 1,000.
These FN’s were typical creepware apps that ﬁt cleanly within
existing code categories, among which were 62 defensive
anti-surveillance apps, 2x more detections than any other
app type found by RWR. Meanwhile, CRNMLE detected
143 creepware apps, of which 122 were FN’s for CRNMAP.
These too were typical creepware apps, but of low prevalence.
Recall that our MAP estimate deliberately sacriﬁces its ability
to detect rare creepware apps so as to avoid CRNMLE’s
propensity for FP detections, which seems sensible given that
rare apps affect fewer people than prevalent apps.
B. Analysis of False Positives
CreepRank’s top 1,000 apps include 143 non-creepware
apps that we categorized as None. We identiﬁed three causes
for their appearance in CreepRank’s top 1,000 rankings. First,
the presence of None apps that are routinely co-installed with
creepware to which they bear similarities is more or less
unavoidable. For example, 18 apps were tutorials on tech and
software development, which were often installed alongside
hacking and creepware-focused tutorials. Another 14 other
communication apps either bear similarities to burner-phone
apps or provide private communications services. Among
miscellaneous apps, 26 are similar to existing creepware apps,
while the other 26 are more random, whose presence is
explained by other reasons.
Second, 27 pay-per-install (PPI) and 9 index apps act as
hubs [34] in the app store and would therefore be highly
ranked by nearly any graph-propagation algorithm. To assess
their impact on the rankings, we dropped all devices with any
of the 27 PPI apps and re-ran CreepRank. The result was that
47 apps (and the 27 PPI apps) dropped from the rankings, 23 of
which were None apps. Eight of the dropped None apps were