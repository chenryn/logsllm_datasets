is a necessary but challenging problem. More specifically, there
are two situations where obfuscated pieces and recoverable pieces
are inconsistent. First, the recoverable pieces can be a part of ob-
fuscated pieces. As shown in Figure 5, leaf nodes are recoverable
pieces while non-leaf nodes are obfuscated pieces. In this case, if
we directly try to recover the obfuscated pieces, the original script
pieces will be executed as an intermediate process, which thus pre-
vents us from getting the original scripts. Second, obfuscated pieces
can be a part of the recoverable pieces. In this case, similar to the
first case, directly recovering from obfuscated pieces can only get
intermediate results but not the original scripts.
Thus, only if we recover with recoverable pieces can we get
the desired original script pieces. In our approach, we address this
problem by traversing all suspicious nodes in a bottom-up order
with a stack, which thus allows us to avoid recovering at a level that
is too high. To avoid recovering at a level that is too low, we leverage
the output of the emulator. If the output is not a string, which means
the subtree is not recoverable. Then we wait for processing at higher
levels. We can always find recoverable subtrees for obfuscated
script pieces. Otherwise, the emulator will return new script pieces,
Figure 3: Framework of our deobfuscation approach and
semantic-aware PowerShell attack detection.
Application scenarios. Our deobfuscation-based semantic-aware
attack detection approach is mostly based on static analysis1. Thus,
compared to dynamic analysis based attack detection approaches,
our approach has higher code coverage, much lower overhead, and
also does not require modification to the system or interpreter.
Compared to existing static analysis based attack detection ap-
proaches [26, 32, 53, 55], our approach is more resilient to obfusca-
tion and also more explainable as our detection is semantics based.
With these advantages over alternative approaches, our approach
can be deployed in various application scenarios, including but not
limited to:
• Real-time attack detection. Since our approach is highly
efficient, it is especially suitable for real-time attack detection
tasks. In addition, our approach is easy to deploy and can also
provide detection reports with semantic-level information
and explanations.
• Large-scale automated malware analysis. Existing automated
malware analysis platforms, such as Hybrid-Analysis [2],
mostly use static analysis to only extract strings from Power-
Shell scripts [8], which has very limited semantics informa-
tion and is also vulnerable to obfuscations. Using our system,
the analysis can be not only resilient to obfuscations but
also more detailed with semantics information, which makes
malware behavior explanations and classifications possible.
4 POWERSHELL DEOBFUSCATION
In this section, we describe the design details of the deobfusca-
tion phase. Unlike previous works that either highly depend on
manual analysis [41] or have strong assumptions [17, 48], Our ap-
proaches is not only more effective but also more light-weight. Our
deobfuscation process is designed to be mainly static instead of
dynamic for two main reasons. First, dynamic approaches require
extra modification to the system or the interpreter to collect data
and have higher overhead. Second, dynamic approaches have a
known limitation of low program coverage. Although our approach
is designed for PowerShell, the design itself is general and thus can
be extended to other similar script languages, such as JavaScript.
1The only part of our approach that requires dynamic intervention is the emulation-
based recovery, which is only triggered when necessary to increase deobfuscation
efficiency as detailed later in §4
DeobfuscationDeobfuscatedScriptsObfuscatedScriptsExisting Anti-Virus EnginesOOA rulesDatabaseSignatureMatchingOOA ruleGenerateManuallyAnalysisMaliciousScriptsDatabaseDeobfuscationphaseDetection & AnalysisphaseTrainingphaseunmatchedsignaturesParserDetectionReportsmatchedCommandQueryDatabaseFigure 4: An overview of the proposed subtree-based deobfuscation for PowerShell scripts.
sections, we will discuss these five stages in detail. Corresponding
code can be found on [5].
4.2 Extract Suspicious Subtrees
To parse the PowerShell scripts and get the AST, we adopt Mi-
crosoft’s official library System.Management.Automation.Language.
PowerShell’s AST has 71 types of nodes in total, such as Pipeline-
Ast, CommandAst, CommandExpressionAst, etc. The parser returns
an AST with a ScriptBlockAst type of root. A typical script with
sizes of several Kilobytes can have thousands of nodes in AST, which
means thousands of subtrees and thus makes it time-consuming to
check all subtrees.
Fortunately, there are only two ways to pass recovered pieces
to the upper nodes, either directly through pipes or indirectly
through variables. Therefore, we only need to check two types
of subtrees, subtrees roots of PipelineAst type, or second sub-
trees under nodes of AssignmentStatementAst. We call these two
types of subtrees suspicious subtrees. As shown in Figure 5 and
Figure 6, red blocks refer to PipelineAst nodes and blue blocks
refer to AssignmentStatementAst nodes. Leveraging this insight,
the number of subtrees we need to check is significantly reduced.
Based on this idea, we traverse the AST in a breadth-first manner
and push suspicious subtrees into a stack for subsequent steps.
4.3 Subtree-based Obfuscation Detection
For the identified subtrees, we employ a binary classifier to find
obfuscated subtrees. Even though Obfuscation can hide semantics
very well, there can still be some hints left. Existing obfuscation
detection works for JavaScript [35] and PowerShell [17] have very
high accuracy. Thus, we are motivated to employ a classifier to
detect whether a subtree is obfuscated.
Feature selection. We refer to existing obfuscation detection
work [17, 35] and propose the following four types of features.
• Entropy of script pieces. The entropy represents the statis-
tical characteristics of character frequencies. There are two
Figure 5: Pass recovered script pieces directly (cropped)
Figure 6: Pass recovered script pieces indirectly (cropped)
which we call recovered pieces. The recovered pieces are parsed
into recovered ASTs and replace the obfuscated subtrees. Such
process iterates until there are no obfuscated subtrees left, thus can
handle multi-layer obfuscation in a sequential or parallel fashion.
Ultimately, we use a post-processing module to remove redundant
structures added during the obfuscation process. In the following
##Collected PowerShell Scripts#([RuNTImE.iNTErOPSERVIces.mArshal]::ptRtOStriNguNI([RuNtIme.INTeropSerVICeS.MaRshaL]::sEcureStRiNgTogLoBAlAllOCunICoDe($('76492d1116743f0423413b16050a5345MgB8AHkAbgBTAFUASgBlAHUATwBwAGEAZwBjAFYAeQBzACsAYgBEAEwATgBBAGcAPQA9AHwANgAxADYAOQBlAGUANwBjAGIAYgAyADcAZABkADcAYwA5AGIAYwA1ADUAYQA3AGYANQAzADAANwBhADAAMgAyAGYANwAwAGEAZQA0ADcAYwBhADgAZgBjADAANQBhADIAOAAxADMAZQA2ADQAYwBlAGEAMQBlADEAZABjAGIANwBlAGUAZQBmADAAYgAxAGQAYQA1ADIAYwA4ADYAYQBlADcAMQA3ADMAOQA3AGIAZgBkADAAMAAxADgAYQBmADgAOQA0ADcANAA0ADkAMQBmADcAMAAwAGIAZQA3ADgAMQA5ADAAZQAyADgAYQBhAGIAMABmADcANABkADIAYQBiADIAMQA2ADIAYwA0ADMANwBiAGQAMQAyADcAZAAzADQANQAzAGMAMQA3ADgANwA4AGEAZQA1ADYAOAAzAGQjAGYAM ...1AA=='| cONvErttO-SecUrESTRING-KeY (4..19)))) )|&(([strInG]$VErbosePrEfEREnCe)[1,3]+'X'-JOIn'')SubtreesStack...(2) Subtree-basedObfuscation Detection(3) Emulation-basedRecoveryGenerated PowerShell Scripts##Generated Scripts Pieces#function Copy-PROpErtY{param(...)}}ASTParserFunctionDefinitionNamedBlockPipelineParamBlockPipelinePipeline##Deobfuscated Scripts#function Out-EncryptedScript{ ... $Key = New-ObjectSystem.Security.Cryptography.TripleDESCryptoServiceProvider $Key.Mode =[System.Security.Cryptography.CipherMode]::CBC [Byte[]]$KeyBytes =$DerivedPass.GetBytes(16)$Encryptor =$Key.CreateEncryptor($KeyBytes,$ivBytes)$MemStream= New-ObjectSystem.IO.MemoryStream$CryptoStream = New-ObjectSystem.Security.Cryptography.CryptoStream($MemStream,$Encryptor,[System.Security.Cryptography.CryptoStreamMode]::Write)...ASTParser(5) Post Processing...ScriptBlockNamedBlockPipelineCommandExpressionCommandUnaryExpressionParenExpressionPipelineParenExpressionPipelineCommandExpressionMemberExpressionPop subtrees forvectorizationand classificationPushsubtreesNo obfuscatedsubtree leftTrain with manuallymarked dataIs Obfuscated...............(4) AST Update(1) Extract subtreesAST(&("{1}{0}{2}"-f'w-o','Ne','ject') ("Net.W" +"ebClient")).("{2}{1}{0}"-f'tring','nloadS','DoW').Invoke(("{20}{13}{26} ... ','.','mo','code','/Inv','rce'))&("{1}{0}{2}"-f'w-o','Ne','ject')("Net.W" + "ebClient")"{1}{0}{2}"-f'w-o','Ne','ject'"Net.W" +"ebClient""{2}{1}{0}"-f'tring','nloadS','DoW'"{20}{13}{26} ...','.','mo','code','/Inv','rce'Invoke(&("{1}{0}{2}"-f'w-o','Ne','ject')("Net.W" + "ebClient")).("{2}{1}{0}"-f'tring','nloadS','DoW')$StrReorder = "{1}{0}{2}"-f'w-o','Ne','ject'$Strjoint = "Net.W" + "ebClient"$RanReserve = "{2}{1}{0}"-f'tring','nloadS','DoW'$Url = "{20}{13}{26}...','.','mo','code','/Inv','rce'(&$StrReorder $Strjoint).$Random.Invoke($Url)(&$StrReorder$Strjoint).$Random.Invoke($Url)(&($StrReorder)$Strjoint).($Random)$Random&($StrReorder)$Strjoint$StrReorder$Url$StrReorder = "{1}{0}{2}"-f'w-o','Ne','ject'$Strjoint = "Net.W" +"ebClient"$RanReserve = "{2}{1}{0}"-f'tring','nloadS','DoW'$Url = "{20}{13}{26} ...','.','mo','code','/Inv','rce'Invoke$StrjointFigure 7: Effects of obfuscation and deobfuscation on the scripts and AST of an malware sample
kinds of popular obfuscation techniques that may influence
the entropy substantially in most cases: randomization of all
variable and function names, and encoding. The entropy can
be calculated as follows:
H = −
Pi
Piloд
2
where Pi represents the frequency of the ith character.
• Lengths of tokens. Almost all types of obfuscation techniques
change the length of tokens. These techniques include but
not limited to, encoding, string splitting, and string reorder-
ing. Among all values related to token lengths, we pick the
mean and the maximum lengths of tokens as features.
• Distribution of AST types. The AST parser provided by Mi-
crosoft can provide all the 71 types of nodes such as PipelineAst,
ParenExpressionAst, CommandExpression-
Ast, etc. During the obfuscation process, the numbers of nodes
for certain node types are typically changed. For example, string
reordering will add several ParenExpressionAst nodes and
StringConstantExpressAst nodes to AST. Thus, we count
the numbers of nodes for each node type and construct a 71-
dimensional vector as a feature.
• Depth of AST. Almost all obfuscation techniques have a sig-
nificant impact on the depth of the AST and the total nodes
count. For example, for encoding-based obfuscation, no matter
how many nodes the original script have, only about 10 nodes
with a depth less than 6 left after encoding. Thus, we also use
AST depth and total node count as features.
In total, we picked 76 features from three levels, namely, charac-
ter level, token level and AST level. Note that traversing the AST
once is enough to calculate features for all subtrees. In our imple-
mentation, we use logistic regression with gradient descent [70] to
perform the classification.
4.4 Emulation-based Recovery
In this step, we set up a PowerShell execution session and execute
the obfuscated pieces detected in the last step. If the script piece
is a recoverable script piece, the return value of this process is the
recovered script piece. If the return value is not a string, it means
that either the obfuscation detection result at the last step is wrong,
or the current script piece is not a recoverable piece. For both cases,
we mark the subtree as a non-obfuscated subtree and move on to
the next obfuscated subtree. Since we perform the deobfuscation
in a bottom-up order, we can always find a recoverable script piece
that is at a higher level and contains this subtree later.
4.5 AST Update
After we obtain the recovered script pieces from the last step, we
need to parse it to a new AST (recovered subtree) and update the
AST. This process has two main steps. First, we need to replace the
recoverable subtree with the recovered subtree. Correspondingly,
the features of all its ancestors should be updated and all suspi-
cious subtrees in recovered subtree should be pushed into the stack.
Second, the change of script pieces should be updated. Specifically,
we store the recoverable pieces and recovered pieces in roots of
obfuscated subtrees. Then we pass the changes from the bottom to
top. Finally, when there are no obfuscated subtrees left, we can get
the deobfuscated script at the root.
4.6 Post processing
As shown in Figure 7, after reconstruction, we get a script that has
the same semantics as that for the original one. However, in terms of
syntax, there are still differences between these two scripts. These
differences are mainly introduced by the obfuscation process. As
mentioned above, the script pieces obtained by the deobfuscation
process are all strings. Thus, to help interpreter understand the role
of each string, the process of obfuscation introduces extra tokens.
For example, in script piece "("DownloadFile").Invoke($url)"
the function Invoke tells interpreter that "DownloadFile" should
be treated as a member function and $url is the parameter for
the function. Also, obfuscation will add extra parentheses. In this
post-processing step, these syntax-level changes introduced by the
obfuscation process are located with regular expressions and fixed
accordingly.
The overall effect of our deobfuscation approach on an example
script and its AST is shown in Figure 7. As shown, the final deob-
fuscated script is almost the same as the original script. In §6, we
use a similarity metric to quantifiably evaluate the effectiveness of
our deobfuscation approach.
iex (New-ObjectNet.WebClient).DownloadString("hxxps://raw.githubusercontent.com/PowerShellEmpire/Empire/master/data/module_source/code_execution/Invoke-Shellcode.ps1")&("{0}{1}" -f'ie','x') (.("{2}{0}{1}" -f'c','t','new-oBje') ("{1}{0}{2}" -f'eb','neT.w','Client')).("{2}{1}{3}{0}"-f'g','tri','doWnloAD','n').Invoke(("{6}{2}{26}{14}{8}{4}{11}{9}{13}{3}{30}{0}{24}{1}{25}{7}{33}{16}{5}{15}{29}{19}{20}{10}{35}{32}{28}{27}{21}{23}{12}{22}{31}{18}{34}{17}"-f'hellE','/Em','tps','m','th','e','ht','ire/','/raw.gi','busercontent.','u','u','/','co','/','r/d','ast','s1','l','ul','e_so','io','Invoke-Sh','n','mpire','p',':','cut','e','ata/mod','/PowerS','el','e_ex','m','code.p','rce/cod'))...& ("iex") (.("new-oBject")("neT.webClient")).("doWnloADString").Invoke(("https://raw.githubusercontent.com/PowerShellEmpire/Empire/master/data/module_source/code_execution/Invoke-Shellcode.ps1"))iex (new-oBject"neT.webClient").doWnloADString("https://raw.githubusercontent.com/PowerShellEmpire/Empire/master/data/module_source/code_execution/Invoke-Shellcode.ps1")(a) Original scriptand AST(b) Obfuscated with Scheme 1Similarity = 0(c) After deobfuscationSimilarity = 0(d) After post-processingSimilarity = 1Table 3: Representative examples and descriptions of newly-
identified OOA rules for PowerShell attacks.
Description
Scheduled task COM
Get-TimedScreenshot
Reflective Loading
IEX Downloaded String
Download & Execution
OOA rules
NewTask, RegisterTaskDefinition, ...
FromImage, CopyFromScreen, ...
VirtuAlloc, Memset, CreateThread, ...
DownloadString, Invoke-Expression
DownloadFile, Start-Process
UseshellExecute, TcpClient,
RedirectStandardOutput, GetStream,
GetString, Invoke-Expression, ...
Reserve shell
As shown in Figure 8, the letters refer to commands or functions,
and the sets marked red indicate that the itemsets are extracted
from malicious scripts. Two steps are required to get an OOA rule.
First, we use the FP-growth algorithm [18] to generate frequent
patterns, such as {z, r} and {z, x, y, t} and so on. Then we select the
patterns that satisfy the rules that have the support and confidence
scores greater than the user-specified minimums. Specifically, sup-
port represents the possibility of maliciousness, and confidence
represents generality. The support and confidence scores of rules
are defined as follows:
support(I , Obj) = count(I ∪ {Obj}, DB)
con f idence(I , Obj) = count(I ∪ {Obj}, DB)
|DB|
count(I , DB)
where I = {I1, ..., Im} is the set of commands. The function count(I∪
{Obj}, DB) returns the number of records in DB where I ∪ {Obj}
holds.
If our target is to detect maliciousness, the support and confi-
dence of {z, r} are 0.4 and 1, respectively. The support and confidence
of {z, x, y, t} are 0.6 and 0.33, respectively. Thus, {z, r} is picked as
OOA rules.
The samples’ behaviors are distributed unevenly in the dataset,
mainly due to the PowerShell logging method. After initialization,
the scripts for later stages are downloaded from the Internet at
runtime, which will be missed by traditional PowerShell logging
methods. Thus it is recommended to utilize script block logging
[31] to enhance the logging. In practice, we choose a support score
of 0.1 and a confidence score of 0.95. However, for some classes
of malicious scripts, we still do not have enough samples to train
OOA rules. For these classes, we use hand-picked signatures as
an alternative. In total, we are able to extract 31 OOA rules newly
identified for PowerShell attacks, with some representative ones
shown in Table 3.
5.2 Detection Phase
In this phase, we parse the deobfuscated scripts into itemsets and