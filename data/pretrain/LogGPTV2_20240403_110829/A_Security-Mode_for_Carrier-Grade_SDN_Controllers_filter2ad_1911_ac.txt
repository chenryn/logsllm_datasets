### Runtime Permissions and Thread Modification

#### 1. Application Policy Specification
Figure 3: The developer-specified application policy must include the application role and a list of required permissions.

#### 2. Network Policy Specification
Figure 4: An optional application network policy file is used to specify `HeaderSpacePermissions` or `TopologyPermissions`, which constrain an application’s network access capabilities. To enforce this policy, the ONOS operator places the network policy file into the ONOS configuration folder. The file must be named to match the corresponding application. During the application installation phase, the application subsystem uses this common filename to augment the application’s security policy with these additional network security constraints.

### 5.3 Extensions to Application Loading

In ONOS, the application subsystem allows hot deployment of applications to an ONOS cluster. When an operator installs an application on any node within the cluster, the application subsystem replicates it to every node. This ensures that ONOS applications can be installed from anywhere as if the cluster were a single monolithic system.

To enable this feature, the application subsystem maintains a global state for each application, which can be either `INSTALLED` or `ACTIVE` (see Figure 5, top). These states are managed via a gossip-based, eventually consistent distributed store, allowing the application state to transition from inconsistent to consistent. State transitions are triggered by user input events via the CLI interface.

The lower panels of Figure 5 illustrate the application state transitions when ONOS operates in security mode. The security-mode extensions aim to:
1. Ensure the ONOS operator reviews the policy before activation.
2. Verify positive acceptance.
3. Ensure the application and policy are associated during runtime.

When security mode is enabled, the application subsystem refers to the security state of the application to make all state transition decisions.

### 5.4 Security Subsystem Integration

We have integrated a security subsystem into ONOS to enforce the application security state during runtime (see Figure 5, middle). Similar to the application subsystem, the security subsystem operates based on the security state of each application.

- **Application Activation**: When the ONOS operator attempts to activate an application in the `INSTALLED` state, the security subsystem captures the event and changes the application’s security state to `INSTALLED`. The application remains in the `INSTALLED` state and is not activated until the operator either uninstalls or reviews the application.
- **Review Process**: If the operator chooses to review the application, the security subsystem transitions it to the `REVIEWED` state. In this state, the operator cannot activate the application until they accept the policy, transitioning it to the `SECURED` state.
- **Policy Enforcement**: Once the policy is accepted and the application transitions to the `SECURED` state, the security subsystem enforces the runtime association of the application to its security policy. If a policy violation occurs (excluding network policy violations), the application is immediately deactivated and uninstalled.

### 5.5 Security Service Distributed Store

While the application subsystem uses a gossip-based, eventually consistent distributed store, the security subsystem requires a strongly consistent distributed store to maintain security policies. We use the RAFT consensus algorithm to ensure strong consistency, ensuring that all state machines process the same series of commands and arrive at the same state (see Figure 6).

Figure 7 illustrates how the consistent distributed store is used by the policy building services and the runtime permission enforcement services. When an operator reviews the security policy of an application, the security state changes to `REVIEWED`, and the store generates a `StateUpdatedEvent` to notify the Manager module of the change.

### 5.6 Policy Building and Enforcement

**Policy Building**:
- The Policy builder collects a set of required permissions based on the access control mechanisms and security policies for the given application.
- For bundle-level RBAC, the Policy builder uses the `PermissionAdmin` service to impose a least privileged access policy.
- At the application-level RBAC, the Policy builder adds predefined permissions based on the application’s role specified in the policy file.
- Custom permissions like `AppPermission`, `HeaderSpacePermission`, and `TopologyPermission` are implemented to enforce API-level and network-level PBAC.

**Policy Acceptance and Enforcement**:
- If the operator accepts the policy, the Manager pushes the permission set and the `SECURED` state to the distributed store.
- The Manager module on every ONOS instance receives the `StateUpdatedEvent` and triggers the Policy enforcer to grant the permission set via the OSGi `Permission Admin` service.

### 5.7 Runtime Security Policy Violation Detection and Response

Once the policy is accepted, the permissions are granted to each OSGi bundle comprising the ONOS application. Permission checking is done using Java’s `System.getSecurityManager.checkPermission` method. Unauthorized Northbound API calls and network-level access control violations are detected and handled by the security subsystem. If a policy violation occurs, the application is immediately deactivated to prevent potential harm to ONOS or the managed network.

### 5.8 Performance Considerations

Unlike bundle-level and application-level RBAC policies, API-level and network-level PBAC policies require more complex permission checking. However, the performance impact is minimized through efficient implementation and the use of the Felix framework’s security extension.

This revised text aims to provide a clearer, more professional, and coherent explanation of the ONOS application and security subsystems.