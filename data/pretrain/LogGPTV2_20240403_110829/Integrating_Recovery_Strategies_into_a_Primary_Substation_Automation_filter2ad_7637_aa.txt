title:Integrating Recovery Strategies into a Primary Substation Automation
System
author:Geert Deconinck and
Vincenzo De Florio and
Ronnie Belmans and
Giovanna Dondossola and
Judit Szanto
Integrating Recovery Strategies into a Primary Substation Automation System 
G. Deconinck1, V. De Florio1, R. Belmans1, G. Dondossola2, J. Szanto2
1K.U.Leuven-ESAT, Kasteelpark Arenberg 10, B-3001 Leuven, Belgium 
2CESI, Via R. Rubattino 54, I-20134 Milan, Italy 
{gdec, deflorio, PI:EMAIL}, {dondossola, PI:EMAIL}
Abstract 
fault 
support 
tolerance 
The  DepAuDE  architecture  provides  middleware  to 
into  distributed 
integrate 
embedded  automation  applications.  It  allows  error 
recovery  to  be  expressed  in  terms  of  recovery  strategies, 
i.e.,  lightweight  code  fragments  separated  from  the 
application code. At run time, the middleware orchestrates 
their  execution.  This  paper  reports  on  the  integration  of 
different  recovery  scripts  into  a  distributed  run-time 
environment  applied  to  the  embedded  automation  system 
of a primary substation. An instrumented automata-based 
design environment allows the application to be deployed 
on  a  heterogeneous  platform  with  several  real-time 
operating  systems.  While  the  middleware  detects  the 
errors  and  selects  the  correct  recovery  scripts  to  be 
executed,  the  application  functionality  is  maintained 
through  system  reconfiguration  or  graceful  degradation. 
The  added  value  comes  from  the  flexibility  to  modify 
recovery strategies without requiring major modifications 
to  the  application,  while  tolerating  the  same  physical 
faults as in the dedicated hardware solutions. 
1 
Introduction  
levels  of  electromagnetic 
Industrial  distributed  embedded  systems  –like  those 
used  in  the  control  and  automation  of  electrical  energy 
infrastructures–  rely  on  off-the-shelf  components  and 
protocols to ensure cost-efficient exploitation [3], [9]. As a 
particular  application  can  be  deployed  on  a  variety  of 
hardware  targets  (with  different  sets  of  sensors  and 
actuators attached) and within different environments (e.g. 
with  different 
interference 
(EMI)),  flexibility  is  needed  both  to  instantiate  the 
application functions appropriately and to react adequately 
to  disturbances  to  the  information  and  communication 
infrastructure  on  which  the  application  is  running.  For 
instance,  system  reconfiguration  and  recovery  may  be 
different,  depending  on  which  I/O  devices  are  connected 
to  the  different  parts  of  the  distributed  controllers.  More 
generally, adaptability is required to modify fault tolerance 
strategies depending on the environment. 
The  DepAuDE  architecture  deploys  a 
set  of 
middleware  modules 
tolerance  by 
exploiting  the  embedded  systems’  distributed  hardware 
and  by  separating  functional  behavior  from  the  recovery 
to  provide  fault 
strategy,  i.e.,  the  set  of  actions  to  be  executed  when  an 
error is detected [4], [5].  
and 
supervision 
This  architecture  has  been  integrated  in  an  innovative 
demonstrator of a Primary Substation Automation System 
(PSAS),  i.e.  the  embedded  hardware  and  software  in  a 
substation  for  electricity  distribution,  connecting  high 
voltage  lines  (HV)  to  medium  voltage  (MV)  lines  over 
transformers.  The  PSAS  requires  protection,  control, 
monitoring 
is 
representative  of  many  applications  with  dependability 
requirements in the energy field [10]. The major source of 
faults in the system is electromagnetic interference caused 
by  the  process  itself  (opening  and  closing  of  HV/MV 
switchgear)  in  spite  of  the  attention  paid  to  designing  for 
electromagnetic  compatibility.  Software  and  hardware 
faults  in  the  automation  system  have  to  be  considered  as 
well. These cause errors in communication, execution and 
memory subsystems. 
capabilities. 
It 
In  the  ongoing  renewal  of  electric  infrastructures  in 
Europe,  utility  companies  are  replacing  their  dedicated 
hardware-based  fault  tolerance  solutions  by  commercial, 
interconnected  platforms.  This  trend  is  motivated  by  the 
growing need for more functionality: development of new, 
dedicated  (hardware-based)  solutions  is  considered  too 
expensive  and  not  flexible  enough  to  keep  up  with  the 
evolving requirements of the liberalized electricity market. 
The  required  dependability  is  reached  by  exploiting 
the  distributed  platform, 
hardware 
combined  with  software-implemented  fault 
tolerance 
solutions  at  the  middleware  level.  Although  software-
based  fault  tolerance  may  have  less  coverage  than 
this  was  not  considered 
hardware-based  solutions, 
inhibitive,  because 
(electrical,  non-
programmable) protection in the plant continues to act, as 
a  last  resort,  as  a  safeguard  for  non-covered  faults. 
Besides,  high-quality  software  engineering  and  extensive 
on-site  testing  remain  important  to  avoid  introduction  of 
design faults that could hamper mission-critical services.  
the  physical 
redundancy 
in 
This  paper  presents  the  experience  of  integrating  this 
into  an  application 
DepAuDE  software  architecture 
developed  with 
distributed 
run-time 
environment  [11],  which  is  a  prototype  of  a  new 
embedded  control  system  for  a  primary  substation. 
According  to  the  approach  proposed  here,  support  for 
allocation of tasks to components, for reactions to detected 
the  ASFA 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:03:25 UTC from IEEE Xplore.  Restrictions apply. 
is 
by 
using 
accomplished 
errors  and  for  maintainability  of  the  fault  tolerance 
strategy 
the 
configuration-and-recovery 
language  ARIEL,  a  key 
component  of  the  DepAuDE  architecture.  Section  2 
describes the key elements of the DepAuDE approach and 
its  underlying  assumptions,  while  section  3  describes  the 
PSAS  application  and  the  instantiation  of  the  DepAuDE 
architecture therein. Section 4 concludes with a qualitative 
evaluation of the experience. 
2  DepAuDE approach 
the  different  elements  of 
A  key  component  of  the  DepAuDE  approach  is 
ARIEL,  a  configuration-and-recovery  language  used  to 
configure 
the  middleware 
architecture (e.g. allocate functions to tasks and nodes; set 
parameters)  and  to  express  recovery  strategies  -  i.e.,  to 
describe diagnosis, containment and recovery actions to be 
executed  when  an  error  is  detected  [5],  [8].  As  such,  it  is 
possible to start a standby task, to reset a node or link, to 
move  a  task  to  another  node,  to  generate  synchronization 
signals  for  reconfiguration,  etc.  Ariel  expresses  error 
recovery  in  terms  of  IF  guard  THEN  action  [ELSE 
action] statements.  The  guard  is  a  Boolean  expression 
resulting in queries to the database of the BackBone. The 
THEN  (ELSE)  keyword  marks  the  beginning  of  a  list  of 
fault  tolerance  actions  to  be  executed  when  the  guard  is 
evaluated  as  true  (false).  Three  sets  of  software  modules 
build up the middleware architecture [4], [5]. 
•  The Basic Services Layer (BSL), providing a real-time 
operating system (RTOS) interface for task handling and 
inter  process  communication;  beside 
library 
functions, it consists of two tasks: NodeController (to 
start  &  stop  tasks)  and  SocketServer  (to  send  & 
receive messages using sockets and mailboxes). 
•  A  set  of  Fault  Tolerance  Mechanisms  (FTM), 
task 
error  detection,  network 
and 
the 
performing 
monitoring, fault masking, etc. 
•  The  BackBone,  i.e.,  a  distributed  application  that 
maintains information on application progress as well as 
on  the  system  topology  and  status.  The  BackBone 
receives event notifications generated by BSL, FTM and 
the  user  application,  and  retains  this  information  in  a 
database. When notified of a detected error, it interprets 
recovery  strategies  written  in  ARIEL  by  querying  the 
database  to  assess  the  system  status  in  order  to 
orchestrate  fault 
tolerance  actions.  The  BackBone 
includes self-healing mechanisms. 
2.1  Network and application model  
An  application  runs  on  several  nodes  of  a  particular 
site, interconnected  via an intra-site (local) network. This 
intra-site  network  is  dedicated  to  the  application,  and  it 
provides adequate real-time support. The focus of the case 
study  of  section  3  is  on  this  intra-site  architecture.  The 
application  can  interact  with  applications  on  other  sites 
over an inter-site (wide area) network, via gateway nodes. 
This  inter-site  network  may  be  a  non-dedicated,  open 
network  -such  as 
the  Internet-  shared  with  other 
applications,  and  hence  not  under  application  control.  A 
gateway  node  performs  inter-site  communication  using 
tunneling  and  Redundant  Source-Routing 
(multiple 
messages over disjoint paths) in order to increase inter-site 
connection availability and reduce message latency [12].  
2.2  Assumptions  
DepAuDE relies on the following assumptions.  
(tasks, 
nodes, 
entities 
•  Fault model: a single physical fault affects execution or 
communication 
links). 
Experiments confirm that EMI affects only the entity to 
which  the  responsible  I/O  element  is  connected  [10]. 
Depending  on  the  underlying  hardware  and  RTOS  (i.e. 
if  a  memory  management  unit  is  available),  a  fault 
containment  region  is  a  task  or  node.  Crash  failure 
semantics  (fail-silent  behavior)  is  assumed  for  the  fault 
containment region.  
•  A synchronous system model is assumed (i.e. known & 
bounded  processing  delays,  communication  delays, 
clock differences and clock drifts [14]). This is realistic 
for the set of targeted real-time automation applications, 
because of their implementation on dedicated systems. 
•  Communication,  provided  by  the  BSL  at  level  5  of  the 
OSI  protocol  stack,  is  assumed  to  be  perfect  (no  lost 
messages,  no  duplicates,  keeping  message  order).  In 
order to increase the coverage for this assumption, a set 
of  mechanisms  can  either  be  deployed  or  developed  at 
the  lower  OSI  levels;  DepAuDE  relies  on  the  Ethernet 
CRC 
level 2 
retransmission  mechanisms.  For  the  pilot  application 
from  section  3,  UDP/IP  over  a  switched  Ethernet 
network was adequate; for other situations TCP/IP might 
prove better if real-time constraints are fulfilled. 
detection  mechanism 
•  As  the  communication  mechanism  targets  groups  of 
tasks,  there  is  an  OSI  level  5  multicast  service,  whose 
behavior  is  assumed  to  be  atomic.  If  this  assumption 
coverage is too low, dedicated atomic multicast support 
and group membership functions can be added. 
error 
and 
The  DepAuDE  middleware  supports  the  reintegration 
of  BSL  and  FTM,  and  can  reload  application  tasks.  The 
application  in  itself  is  responsible  for  reintegrating  these 
restarted 
the  ongoing  execution,  as  no 
checkpoint/restore mechanisms are included. 
tasks 
into 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:03:25 UTC from IEEE Xplore.  Restrictions apply. 
HV line 
HV line
HV user line 
PU/HVl 
PU/HVl 
PU/HVul
HV bar 
PU/TrHV 
            LCL
PU/TrHV
HV
Red 
 transfo  
MV
PU/Tr 
PU/Tr 