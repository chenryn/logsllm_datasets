# Integrating Recovery Strategies into a Primary Substation Automation System

**Authors:**
- Geert Deconinck
- Vincenzo De Florio
- Ronnie Belmans
- Giovanna Dondossola
- Judit Szanto

**Affiliations:**
- G. Deconinck, V. De Florio, R. Belmans: KU Leuven-ESAT, Kasteelpark Arenberg 10, B-3001 Leuven, Belgium
- G. Dondossola, J. Szanto: CESI, Via R. Rubattino 54, I-20134 Milan, Italy

**Contact:**
- {gdec, deflorio, PI:EMAIL} for KU Leuven-ESAT
- {dondossola, PI:EMAIL} for CESI

## Abstract

The DepAuDE architecture provides middleware to integrate embedded automation applications in a distributed environment. It allows error recovery to be expressed as recovery strategies, which are lightweight code fragments separated from the application code. At runtime, the middleware orchestrates the execution of these strategies. This paper discusses the integration of different recovery scripts into a distributed runtime environment applied to the embedded automation system of a primary substation. An instrumented automata-based design environment enables the deployment of the application on a heterogeneous platform with multiple real-time operating systems. The middleware detects errors and selects the appropriate recovery scripts, maintaining application functionality through system reconfiguration or graceful degradation. The added value lies in the flexibility to modify recovery strategies without major changes to the application, while tolerating the same physical faults as dedicated hardware solutions.

## 1. Introduction

Industrial distributed embedded systems, such as those used in the control and automation of electrical energy infrastructures, often rely on off-the-shelf components and protocols to ensure cost-efficient operation. These systems need to be flexible to accommodate various hardware targets (with different sets of sensors and actuators) and different environments (e.g., varying levels of electromagnetic interference). Flexibility is essential for both instantiating application functions appropriately and reacting to disturbances in the information and communication infrastructure. For example, system reconfiguration and recovery may differ based on the connected I/O devices. More generally, adaptability is required to modify fault tolerance strategies depending on the environment.

The DepAuDE architecture deploys a set of middleware modules to provide fault tolerance by leveraging the distributed hardware of embedded systems and separating functional behavior from the recovery strategy. This architecture has been integrated into an innovative demonstrator of a Primary Substation Automation System (PSAS), which includes the embedded hardware and software in a substation for electricity distribution, connecting high voltage (HV) lines to medium voltage (MV) lines via transformers. The PSAS requires protection, control, and monitoring capabilities and is representative of many applications with dependability requirements in the energy field. The main source of faults in the system is electromagnetic interference caused by the process itself (opening and closing of HV/MV switchgear), despite efforts to design for electromagnetic compatibility. Software and hardware faults in the automation system also cause errors in communication, execution, and memory subsystems.

In the ongoing renewal of electric infrastructures in Europe, utility companies are replacing their dedicated hardware-based fault tolerance solutions with commercial, interconnected platforms. This trend is driven by the growing need for more functionality, as developing new, dedicated (hardware-based) solutions is considered too expensive and inflexible to meet the evolving requirements of the liberalized electricity market. The required dependability is achieved by exploiting the distributed platform combined with software-implemented fault tolerance solutions at the middleware level. Although software-based fault tolerance may have less coverage than hardware-based solutions, this is not considered inhibitive because non-programmable (electrical) protection in the plant continues to act as a last resort safeguard for non-covered faults. High-quality software engineering and extensive on-site testing remain crucial to avoid introducing design faults that could compromise mission-critical services.

This paper presents the experience of integrating the DepAuDE software architecture into a distributed runtime environment, which is a prototype of a new embedded control system for a primary substation. According to the proposed approach, support for task allocation, reaction to detected errors, and maintainability of the fault tolerance strategy is accomplished using the configuration-and-recovery language ARIEL, a key component of the DepAuDE architecture. Section 2 describes the key elements of the DepAuDE approach and its underlying assumptions, while Section 3 details the PSAS application and the instantiation of the DepAuDE architecture. Section 4 concludes with a qualitative evaluation of the experience.

## 2. DepAuDE Approach

A key component of the DepAuDE approach is ARIEL, a configuration-and-recovery language used to configure the middleware architecture (e.g., allocate functions to tasks and nodes, set parameters) and express recovery strategies. ARIEL describes diagnosis, containment, and recovery actions to be executed when an error is detected. It can start a standby task, reset a node or link, move a task to another node, generate synchronization signals for reconfiguration, etc. ARIEL expresses error recovery in terms of IF guard THEN action [ELSE action] statements. The guard is a Boolean expression resulting in queries to the database of the BackBone. The THEN (ELSE) keyword marks the beginning of a list of fault tolerance actions to be executed when the guard is evaluated as true (false). The middleware architecture consists of three sets of software modules:

- **Basic Services Layer (BSL):** Provides a real-time operating system (RTOS) interface for task handling and inter-process communication. It includes library functions and two tasks: NodeController (to start & stop tasks) and SocketServer (to send & receive messages using sockets and mailboxes).
- **Fault Tolerance Mechanisms (FTM):** Perform task error detection, network monitoring, and fault masking.
- **BackBone:** A distributed application that maintains information on application progress, system topology, and status. The BackBone receives event notifications from BSL, FTM, and the user application, retains this information in a database, and interprets recovery strategies written in ARIEL by querying the database to assess the system status and orchestrate fault tolerance actions. The BackBone includes self-healing mechanisms.

### 2.1 Network and Application Model

An application runs on several nodes of a particular site, interconnected via an intra-site (local) network. This intra-site network is dedicated to the application and provides adequate real-time support. The case study in Section 3 focuses on this intra-site architecture. The application can interact with applications on other sites over an inter-site (wide area) network via gateway nodes. The inter-site network may be a non-dedicated, open network (such as the Internet) shared with other applications, and thus not under application control. Gateway nodes perform inter-site communication using tunneling and Redundant Source-Routing (multiple messages over disjoint paths) to increase inter-site connection availability and reduce message latency.

### 2.2 Assumptions

DepAuDE relies on the following assumptions:

- **Fault Model:** A single physical fault affects execution or communication entities (tasks, nodes, links). Experiments confirm that EMI affects only the entity to which the responsible I/O element is connected. Depending on the underlying hardware and RTOS (if a memory management unit is available), a fault containment region is a task or node. Crash failure semantics (fail-silent behavior) are assumed for the fault containment region.
- **Synchronous System Model:** A synchronous system model is assumed (i.e., known and bounded processing delays, communication delays, clock differences, and clock drifts). This is realistic for targeted real-time automation applications due to their implementation on dedicated systems.
- **Perfect Communication:** Communication, provided by the BSL at level 5 of the OSI protocol stack, is assumed to be perfect (no lost messages, no duplicates, keeping message order). To increase coverage for this assumption, mechanisms can be deployed or developed at lower OSI levels. DepAuDE relies on Ethernet CRC detection and retransmission mechanisms. For the pilot application in Section 3, UDP/IP over a switched Ethernet network was adequate; for other situations, TCP/IP might be better if real-time constraints are met.
- **Atomic Multicast Service:** As the communication mechanism targets groups of tasks, an OSI level 5 multicast service is assumed to be atomic. If this assumption's coverage is too low, dedicated atomic multicast support and group membership functions can be added.

The DepAuDE middleware supports the reintegration of BSL and FTM and can reload application tasks. The application itself is responsible for reintegrating these restarted tasks into the ongoing execution, as no checkpoint/restore mechanisms are included.

## 3. PSAS Application and DepAuDE Instantiation

[Detailed description of the PSAS application and how the DepAuDE architecture is instantiated within it will be provided here.]

## 4. Conclusion

[Qualitative evaluation of the experience and conclusions will be provided here.]

---

**Note:** The sections marked with [ ] require additional content to be filled in, based on the specific details of the PSAS application and the qualitative evaluation.