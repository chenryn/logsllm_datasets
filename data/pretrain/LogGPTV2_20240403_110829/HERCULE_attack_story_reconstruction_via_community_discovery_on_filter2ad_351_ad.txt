0.3
0.2
0.1
e
r
o
c
s
1
F
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
e
r
o
c
s
1
F
4
5
0
0
1
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
e
r
o
c
s
1
F
4
5
0
0
1
2
3
Timestamp delta
2
3
Timestamp delta
4
5
0
0
1
2
3
Timestamp delta
2
3
Timestamp delta
4
5
0
0
1
2
3
Timestamp delta
4
5
“Op-Tropic Trooper 2”
“Hacking Team”
“Russian Campaign”
“Operation DeputyDog”
“SeaDuke” (Linux)
Figure 4: DFS Propagation vs Diﬀerent Weight Assignment Algorithms with Community Detection.
Table 4: Log Size.
Log
Size (KB) # Entries
60
16,723
DNS
WFP
HTTP 150,650
Process 5,886
Object
5268
ETW 2,926,425
450
662
3,016
233
247
1,462,526
Table 5: Two-Week
Log Size.
Log
Size (MB)
7.0875
1933.9
DNS
WFP
HTTP 17795.5
Process 695
Object
622.2
4.1 Logging Overhead
Table 4 (left) shows a summary of the logging overhead
of diﬀerent logging providers. The logging process records
the log entry while the user is routinely working on the
computer, without knowing that some of his/her operations
have already triggered the malicious activity. We obtain these
results by logging for 10000 seconds, and each time we launch
a particular attack (Table 6) we roll back using a previously
saved image of the virtual machine. Then we average the
result of the 15 test cases. Compared with ETW logging
with stack-walk mode turned on (shown in the last gray row
of Table 4), the logs we use in HERCULE (the other rows
in Table 4) are more lightweight in all measurements. This
motivates the need for HERCULE’s community detection
based only on the abundance of light-weight logs (as heavy-
weight logging is seldom deployed on end-user systems).
4.2 Weight Assignment
Figure 4 shows the detection performance of DFS propaga-
tion (blue) and the combinations of diﬀerent weight assign-
ment algorithms together with Louvain community detection
(other colors), in which (1) the purple line denotes quadratic
programming, (2) the yellow line denotes SVM (support
vector machine), (3) the green line represents logistic regres-
sion, (4) the red line stands for feature vector summation
algorithm, and (5) the blue line denotes DFS propagation.
Instead of utilizing accuracy, we quantify the performance
of classiﬁers using F1 score (y-axis). Let the number of true
positives, false positives, true negatives, and false negatives
be tp, f p, tn, and f n, respectively, w.r.t, a classiﬁer. Precision
is deﬁned to measure the portion of actual attack-related en-
tries in all predicted attack-related entries (identiﬁed attack-
related community). precision = tp
tp+f p . Recall measures the
number of attack-related entries that are correctly classiﬁed
as attack-related out of the total number of actual attack-
related entries. recall = tp
tp+f n . F1 score is the harmonic
mean of precision and recall F1 = 2 · precision·recall
precision+recall . An
ideal classiﬁer has F1 metric close to 1 which implies that
both precision and recall are close to 1.
As discussed in Section 3.2, we adopt “leave-one-out” in
the training/testing process of weight assignment. After
the log entries have been generated, we obtain the labels
of the log entries by manually comparing with the attack
2
activity
. The x-axis in Figure 4 includes choices of diﬀerent
timestamp delta threshold t in constructing the temporal cor-
relation. Figure 4 demonstrates the average outperformance
of Quadratic programming pair with community detection
(purple line) over other algorithms. This motivates our deci-
sion to use quadratic programming as our weight assignment
algorithm. The results in Table 6 are based on the weight
assignment algorithm that uses quadratic programming.
4.3 Attack Story Reconstruction
Emulated Attacks. Based on existing attack reports,
we emulated 15 real-world APT attacks [3, 9, 12, 21, 24, 28, 47–
2
Note that HERCULE did not have access to this ground
truth for its detection. We obtained it manually for evalua-
tion of HERCULE’s accuracy.
589APT Keyword and Report
“Black Vine 1” [12]
“Black Vine 2” [12]
“Attack on Aerospace” [3]
“Political Groups” [61]
“Op-DeputyDog” [48]
“Russian Campaign” [49]
“Op-Clandestine Fox” [47]
“Cylance SPEAR Team” [21]
“APT on Taiwan” [9]
“Op-Tropic Trooper 1” [50]
“Op-Tropic Trooper 2” [50]
“Hacking Team” [28]
“Russian Campaign” [49]
“Op-DeputyDog” [48]
“SeaDuke” [24]
Two weeks
Table 6: Evaluation Results on Emulated Attacks.
Post Exploitation
Initial Tactics
CVE
Target
Acc
FP
Watering hole
Email attachment
Watering hole
Email google drive links
iframe background running
Controlled Website
Email compromised website
Email attachment
Email attachment
Email attachment
Email attachment
Email with ﬁle link
Email attachment
Email compromised website
Email trojaned-ware
“Political Groups” + “APT on Taiwan” + “Cylance SPEAR”
Win
Keylogger
Win
Exﬁltrate ﬁles
Win
Network sweeping
Win
Exﬁltrate ﬁles
Escalate privilege
Win
Download backdoor Win
Win
Rename payload
Win
Browsing ﬁles
Win
Rename payload
Win
Download tools
Keylogger
Win
Download backdoor Win
Download backdoor
Brute force Login
Add bad user
2012-4792
2014-0322
2015-5122
2014-4114
2013-3893
2015-3043
2014-1776
2012-0158
N/A
2010-3333
2012-0158
2015-5119
2008-5499
N/A
N/A
Linux
Linux
Linux
Win
0.846
0.834
0.810
0.886
0.877
0.833
0.857
0.826
0.819
0.812
0.863
0.859
0.850
0.899
0.874
0.736
0.0012
0.0023
0.0018
0.0013
0.0024
0.0023
0.0026
0.0016
0.0010
0.0006
0.0090
0.0058
0.0017
0.0060
0.0012
0.0126
50, 61], which feature a variety of initial compromise tactics,
types of CVE exploited, malicious payloads, and post ex-
ploitation activities to evaluate our approach (Table 6). Note
that in our emulated environment, we also include a dedicated
user to perform regular (benign) activities, such as browsing
websites or playing music. To demonstrate HERCULE’s
scalability, we also conducted a two-week-long experiment
that contains mostly normal user activities, which are gener-
ated by the dedicated user, mixed with three APT attacks
(as listed in the last, gray row of Table 6). The dedicated
user performs normal behavior such as browsing website,
watching videos, and downloads and executes ﬁles without
adequate awareness of the suspiciousness. The logs sizes from
this two-week experiment are summarized in Table 4 (right).
As some reports do not disclose a complete attack trace,
we recreate any missing attack stages (not discussed in the
APT reports) with modern attack approaches borrowed from
similar stages discussed in the other APT reports. Hence
the emulated attacks, though based on the APT reports,
leverage the mixed strategies that are thus not restricted to
any speciﬁc attack vectors, but provide general test cases on
which HERCULE can evaluate.
The detection performance of all 16 attack scenarios is
shown in the last two columns in Table 6. We classify the log
entries within any identiﬁed community as malicious and the
remainders as benign. We manually obtained and inspected
the ground truth from the APT reports when emulating
the attacks. The accuracy is the portion of the true results
(correctly classiﬁed as benign or malicious) in the total test
samples. The false positive rate measures the number of
entries that are incorrectly classiﬁed as attack-related out of
total actual benign entries. We note that the false negative
rate is not negligible given the high accuracy and extremely
low false positive rate. Since our work focuses on reducing
the false positive rate by correlating PIOC (Section 1) and
reconstruct the attack-related as complete as possible, we
give more tolerance on false negatives and leave the task of
reducing false negative in our future work.
We also visualize the community detection output in Fig-
ure 5 (the two-week experiment graph is too dense to be
shown). The community marked in red in each network
denotes the identiﬁed group of malicious log entries, and we
randomly mark the other communities with diﬀerent colors.
We assign one community with only one color. From these
ﬁgures, we can see that the community identiﬁed as attack-
related is well-clustered, which has dense connections within
themselves but sparse connections with other communities.
Note that the edge weights are not explicitly reﬂected in
the ﬁgures. There are some red nodes that are not densely
connected to the major red node community. However, this
problem is dealt with, as discussed in Section 3.2, by training
a larger weight assignment between this sparsely connected
red nodes such that they can be still grouped into the same
community.
In the remainder of this section, we present two illustrative
case studies on the attack stories and their related log en-
tries. Admittedly, there remains a certain amount of manual
analysis to reconstruct attack story from the extracted com-
munity. However, the amount of work is greatly reduced for
cyber investigator as the suspicious log entries are narrowed
and grouped together. Furthermore, some key ﬁelds within
the attack-related log entries, such as time stamp, are fairly
useful indicators of the temporal attack sequence.
Story 1 (“Political Groups”): This attack exploits CVE-
2014-4114, a vulnerability in the OLE package manager
[61]. The attacker can leverage this vulnerability to create a
PowerPoint presentation in which the OLE package manager
loads (1) a malicious payload/executable camouﬂaged as a
“.gif” ﬁle and (2) a malicious .inf ﬁle that renames the “.gif”
to “.gif.exe” and runs the executable. We use MS14-060
Microsoft Windows OLE Package Manager Code Execution
in Metasploit to generate the malicious ppsx ﬁle. For crafting
the spear-phishing email, we utilize Social-Engineer Toolkit
(SET).
In the ﬁrst stage, the attacker crafts a simple message in
the spear-phishing email urging the targeted recipient V to
download a ﬁle from Google Drive. The google drive link
points to biography.ppsx which is a PowerPoint view-only
slideshow. The ﬁle does not display properly on Google Drive.
Therefore, the victim may want to download and open the ﬁle
on his/her computer. The use of Google Docs is potentially
evidence of attackers’ evolving tactics in reaction to the
increasing number of users’ checking the integrity of email
attachments. In the second stage, once double-clicked in
the host system, the slide show is played by victim without
crashing the program or producing any other signs that
something is wrong with the ﬁle. At the same time, the OLE
package manager automatically copies two ﬁles, gzrs.gif
590(a) “Black Vine 1”
(b) “Black Vine 2”
(c) “Attack on Aerospace” (d) “Political Groups”
(e) “Op-DeputyDog”
(f) “Russian Campaign” (g) “Op-Clandestine Fox” (h) “Cylance SPEAR”
(i) “APT on Taiwan” (j) “Op-Tropic Trooper 1”
(k) “Op-Tropic Trooper 2”
(l) “Hacking Team”
(m) “Russian Campaign” (n) “Op-DeputyDog”
(o) “SeaDuke” (Linux)
Figure 5: Community Distribution (The Red Nodes Denote the Malicious Community).
and JPih.inf from the attacker’s Samba share folder. The
JPih.inf is then accessed by OLE package manager. Based
on the instructions in JPih.inf, the GzRs.gif is renamed to
GzRs.gif.exe and executed. In the third stage, the process
GzRs.gif.exe makes a reverse TCP connection to the C&C
server’s IP address 192.168.2.15. The attacker gains the
reverse shell on the victim system and subsequently browses
diﬀerent folders and ﬁles. After a while, the attacker locates
the plan.txt and initiates the FTP client in command line
to upload plan.txt to the IP address 192.168.2.15.
We extract the latent correlations of the log entries gen-
erated from the attack ﬂow via HERCULE with accuracy
88.6% and false positive rate 0.0013 (Table 6). Figure 5d
shows the attack-related well-clustered entries that have a
few links with other benign entries. This case reﬂects the
diﬃculty of reconstructing these APT attack traces when
relying only on analysis of individual, separate logs. For
instance, in single log analysis using only WFP connection
log, we can identify a continuous suspicious C&C-like commu-
nication from GzRs.gif.exe to the IP address, which relates
to a sequence of commands to browse the ﬁles. However, we
know neither how the malicious backdoor is delivered nor
what this backdoor does in the background.
Story 2 (“Operation DeputyDog” on Linux host): The
initial compromise tactic in this attack leverages an iframe
by adding it into a website’s HTML code that automati-
cally loads the attacker’s page and prompts for a Firefox
update [48]. We adapt this strategy to infect the Linux host
by creating a trojaned executable in ELF format with a
reverse HTTPS payload embedded. We leverage Msfvenom
to generate and encode diﬀerent types of shellcode in the
Metasploit framework to create the trojaned Firefox-update
ELF ﬁle. We use the encoding scheme shikata ga nai (a
polymorphic XOR additive feedback encoder) to encode the
reverse HTTPS payload 21 times to achieve obfuscation. We
do not use any CVE in the infection. We also use SET
to generate the spear-phishing email. For reproducing the
iframe-loaded page, we leverage the BeEF framework to hook
the browser by launching an XSS attack through a malicious
web page. When the victim opens the malicious page in the
browser, the attacker can inject an iframe to prompt users
for updating the Firefox.