### 优化后的文本

#### 表4: 日志大小
| 日志类型 | 大小 (KB) | 条目数 |
|----------|-----------|--------|
| DNS      | 60        | 16,723 |
| WFP      | 450       | 662    |
| HTTP     | 150,650   | 3,016  |
| 进程     | 5,886     | 233    |
| 对象     | 5,268     | 247    |
| ETW      | 2,926,425 | 1,462,526 |

#### 表5: 两周日志大小
| 日志类型 | 大小 (MB) |
|----------|-----------|
| DNS      | 7.0875    |
| WFP      | 622.2     |
| HTTP     | 17,795.5  |
| 进程     | 695       |
| 对象     | 1,933.9   |
| ETW      | 4.1       |

### 4.1 日志开销
表4（左）展示了不同日志提供者的日志开销摘要。在用户正常工作时，日志记录过程会记录日志条目，而用户并不知道某些操作已经触发了恶意活动。我们通过记录10,000秒的日志，并在每次启动特定攻击（表6）后使用之前保存的虚拟机镜像回滚来获取这些结果。然后，我们对15个测试用例的结果进行平均。与启用堆栈跟踪模式的ETW日志记录相比（表4的最后一行），HERCULE中使用的日志（表4中的其他行）在所有测量中都更轻量级。这促使我们需要基于大量轻量级日志进行社区检测（因为重型日志记录很少部署在终端用户系统上）。

### 4.2 权重分配
图4展示了DFS传播（蓝色）和不同权重分配算法与Louvain社区检测结合的检测性能。其中：
- 紫色线表示二次规划
- 黄色线表示支持向量机 (SVM)
- 绿色线表示逻辑回归
- 红色线表示特征向量求和算法
- 蓝色线表示DFS传播

我们使用F1分数（y轴）来量化分类器的性能。设真阳性、假阳性、真阴性和假阴性的数量分别为tp、fp、tn和fn。精确度定义为实际攻击相关条目在所有预测攻击相关条目中的比例：precision = tp / (tp + fp)。召回率衡量正确分类为攻击相关的条目占总实际攻击相关条目的比例：recall = tp / (tp + fn)。F1分数是精确度和召回率的调和平均值：F1 = 2 * (precision * recall) / (precision + recall)。理想的分类器F1指标接近1，这意味着精确度和召回率都接近1。

如第3.2节所述，我们在权重分配的训练/测试过程中采用“留一法”。生成日志条目后，我们通过手动比较攻击活动来获取日志条目的标签。图4的x轴显示了在构建时间相关性时选择的不同时间戳差值阈值t。图4展示了二次规划与社区检测组合的平均性能优于其他算法。这促使我们决定使用二次规划作为权重分配算法。表6中的结果基于使用二次规划的权重分配算法。

### 4.3 攻击故事重建
**模拟攻击**
基于现有的攻击报告，我们模拟了15种真实的APT攻击[3, 9, 12, 21, 24, 28, 47–58]，涵盖了多种初始入侵策略、CVE漏洞利用、恶意载荷和后续攻击活动，以评估我们的方法（表6）。请注意，在我们的模拟环境中，还包括一个专门的用户执行常规（良性）活动，例如浏览网站或播放音乐。为了展示HERCULE的可扩展性，我们还进行了为期两周的实验，其中大部分是正常用户活动（由专用用户生成），混合了三种APT攻击（如表6最后一行所示）。该专用用户执行正常行为，如浏览网站、观看视频以及下载和执行文件，但缺乏对可疑行为的充分意识。这两周实验的日志大小总结在表4（右）中。

由于一些报告未披露完整的攻击轨迹，我们根据其他APT报告中的类似阶段，重新创建了任何缺失的攻击阶段。因此，尽管基于APT报告，模拟攻击采用了混合策略，不限于特定的攻击向量，而是提供了通用的测试案例，供HERCULE进行评估。

表6的最后两列显示了所有16种攻击场景的检测性能。我们将识别出的社区内的日志条目分类为恶意，其余条目分类为良性。在模拟攻击时，我们手动获取并检查了来自APT报告的真实情况。准确率是指正确分类为良性或恶意的真实结果在总测试样本中的比例。假阳性率衡量的是将实际良性条目错误分类为攻击相关的条目数量。我们注意到，给定高准确率和极低的假阳性率，假阴性率不可忽略。由于我们的工作重点在于通过关联PIOC（第1节）减少假阳性率，并尽可能完整地重建攻击相关日志，我们对假阴性给予了更大的容忍度，并将减少假阴性的任务留给未来的工作。

我们还在图5中可视化了社区检测输出（两周实验图过于密集无法显示）。每个网络中标记为红色的社区表示已识别的恶意日志条目组，我们随机用不同颜色标记其他社区。我们为每个社区分配一种颜色。从这些图中可以看出，被识别为攻击相关的社区很好地聚集在一起，内部连接紧密，与其他社区的连接稀疏。注意，边的权重在图中并未明确反映。有些红色节点与主要红色节点社区的连接不紧密。然而，这个问题通过训练这些稀疏连接的红色节点之间的较大权重来解决，从而使它们仍能被归类到同一社区。

在本节的其余部分，我们呈现两个关于攻击故事及其相关日志条目的说明性案例研究。诚然，从提取的社区重建攻击故事仍然需要一定量的手动分析。然而，对于网络安全调查员来说，工作量大大减少了，因为可疑的日志条目已经被缩小并分组。此外，攻击相关日志条目中的一些关键字段，如时间戳，是非常有用的指示器，可以表明攻击的时间顺序。

**案例1（“政治团体”）**：此攻击利用了OLE包管理器中的CVE-2014-4114漏洞[61]。攻击者可以利用此漏洞创建一个PowerPoint演示文稿，其中OLE包管理器加载（1）伪装成“.gif”文件的恶意负载/可执行文件和（2）一个恶意.inf文件，该文件将“.gif”重命名为“.gif.exe”并运行该可执行文件。我们使用Metasploit中的MS14-060 Microsoft Windows OLE Package Manager Code Execution生成恶意.ppsx文件。为了制作鱼叉式钓鱼邮件，我们使用了Social-Engineer Toolkit (SET)。

在第一阶段，攻击者在鱼叉式钓鱼邮件中编造了一条简单的消息，敦促目标收件人V从Google Drive下载一个文件。Google Drive链接指向biography.ppsx，这是一个只读的PowerPoint幻灯片。该文件在Google Drive上无法正确显示，因此受害者可能会想将其下载并在自己的计算机上打开。使用Google Docs可能是攻击者对越来越多用户检查电子邮件附件完整性这一趋势的反应。在第二阶段，一旦在主机系统中双击，受害者会在没有崩溃程序或其他迹象的情况下播放幻灯片。同时，OLE包管理器自动从攻击者的Samba共享文件夹复制两个文件gzrs.gif和JPih.inf。然后，OLE包管理器访问JPih.inf。根据JPih.inf中的指令，GzRs.gif被重命名为GzRs.gif.exe并执行。在第三阶段，进程GzRs.gif.exe与C&C服务器的IP地址192.168.2.15建立反向TCP连接。攻击者在受害系统上获得了反向shell，并随后浏览不同的文件夹和文件。一段时间后，攻击者找到了plan.txt，并在命令行中启动FTP客户端，将plan.txt上传到IP地址192.168.2.15。

我们通过HERCULE提取了从攻击流生成的日志条目之间的潜在关联，准确率为88.6%，假阳性率为0.0013（表6）。图5d显示了攻击相关的良好聚类条目，这些条目与其他良性条目的连接较少。这个案例反映了仅依赖单独日志分析来重构这些APT攻击痕迹的困难。例如，在仅使用WFP连接日志的单日志分析中，我们可以识别出从GzRs.gif.exe到IP地址的连续可疑C&C通信，这与一系列浏览文件的命令有关。然而，我们既不知道恶意后门是如何传递的，也不知道它在后台做了什么。

**案例2（Linux主机上的“Operation DeputyDog”）**：此攻击的初始入侵策略是在网站的HTML代码中添加一个iframe，自动加载攻击者的页面并提示Firefox更新[48]。我们调整了这种策略，通过创建一个嵌入了反向HTTPS负载的ELF格式特洛伊木马可执行文件来感染Linux主机。我们使用Msfvenom在Metasploit框架中生成并编码不同类型的有效载荷，以创建特洛伊木马Firefox更新ELF文件。我们使用shikata ga nai编码方案（多态XOR加法反馈编码器）对反向HTTPS负载进行21次编码以实现混淆。我们没有在感染过程中使用任何CVE。我们还使用SET生成鱼叉式钓鱼邮件。为了重现iframe加载的页面，我们利用BeEF框架通过恶意网页发起XSS攻击来挂钩浏览器。当受害者在浏览器中打开恶意页面时，攻击者可以注入一个iframe提示用户更新Firefox。

### 图5: 社区分布（红色节点表示恶意社区）
(a) “Black Vine 1”
(b) “Black Vine 2”
(c) “Attack on Aerospace”
(d) “Political Groups”
(e) “Op-DeputyDog”
(f) “Russian Campaign”
(g) “Op-Clandestine Fox”
(h) “Cylance SPEAR”
(i) “APT on Taiwan”
(j) “Op-Tropic Trooper 1”
(k) “Op-Tropic Trooper 2”
(l) “Hacking Team”
(m) “Russian Campaign”
(n) “Op-DeputyDog”
(o) “SeaDuke” (Linux)

希望这些改进使文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我！