_, ok = mm[""], false // map返回1个值
_ = mm[""] // map返回1个值
和变量声明一样，我们可以用下划线空白标识符 来丢弃不需要的值。
_
_, err = io.Copy(dst, src) // 丢弃字节数
_, ok = x.(T) // 只检测类型，忽略具体值
2.4.2. 可赋值性
赋值语句是显式的赋值形式，但是程序中还有很多地方会发生隐式的赋值行为：函数调用会
隐式地将调用参数的值赋值给函数的参数变量，一个返回语句会隐式地将返回操作的值赋值
给结果变量，一个复合类型的字面量（§4.2）也会产生赋值行为。例如下面的语句：
medals := []string{"gold", "silver", "bronze"}
隐式地对slice的每个元素进行赋值操作，类似这样写的行为：
medals[0] = "gold"
medals[1] = "silver"
medals[2] = "bronze"
map和chan的元素，虽然不是普通的变量，但是也有类似的隐式赋值行为。
不管是隐式还是显式地赋值，在赋值语句左边的变量和右边最终的求到的值必须有相同的数
据类型。更直白地说，只有右边的值对于左边的变量是可赋值的，赋值语句才是允许的。
可赋值性的规则对于不同类型有着不同要求，对每个新类型特殊的地方我们会专门解释。对
于目前我们已经讨论过的类型，它的规则是简单的：类型必须完全匹配，nil可以赋值给任何
指针或引用类型的变量。常量（§3.6）则有更灵活的赋值规则，因为这样可以避免不必要的
显式的类型转换。
对于两个值是否可以用 或 进行相等比较的能力也和可赋值能力有关系：对于任何类型
== !=
的值的相等比较，第二个值必须是对第一个值类型对应的变量是可赋值的，反之亦然。和前
面一样，我们会对每个新类型比较特殊的地方做专门的解释。
赋值 66
gopl
赋值 67
gopl
2.5. 类型
变量或表达式的类型定义了对应存储值的属性特征，例如数值在内存的存储大小（或者是元
素的bit个数），它们在内部是如何表达的，是否支持一些操作符，以及它们自己关联的方法
集等。
在任何程序中都会存在一些变量有着相同的内部结构，但是却表示完全不同的概念。例如，
一个int类型的变量可以用来表示一个循环的迭代索引、或者一个时间戳、或者一个文件描述
符、或者一个月份；一个float64类型的变量可以用来表示每秒移动几米的速度、或者是不同
温度单位下的温度；一个字符串可以用来表示一个密码或者一个颜色的名称。
一个类型声明语句创建了一个新的类型名称，和现有类型具有相同的底层结构。新命名的类
型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的。
type 类型名字 底层类型
类型声明语句一般出现在包一级，因此如果新创建的类型名字的首字符大写，则在外部包也
可以使用。
译注：对于中文汉字，Unicode标志都作为小写字母处理，因此中文的命名默认不能导出；不
过国内的用户针对该问题提出了不同的看法，根据RobPike的回复，在Go2中有可能会将中日
韩等字符当作大写字母处理。下面是RobPik在 Issue763 的回复：
A solution that's been kicking around for a while:
For Go 2 (can't do it before then): Change the definition to “lower case letters and are
package-local; all else is exported”. Then with non-cased languages, such as
Japanese, we can write 日本语 for an exported name and 日本语 for a local name. This
rule has no effect, relative to the Go 1 rule, with cased languages. They behave exactly
the same.
为了说明类型声明，我们将不同温度单位分别定义为不同的类型：
gopl.io/ch2/tempconv0
类型 68
gopl
// Package tempconv performs Celsius and Fahrenheit temperature computations.
package tempconv
import "fmt"
type Celsius float64 // 摄氏温度
type Fahrenheit float64 // 华氏温度
const (
AbsoluteZeroC Celsius = -273.15 // 绝对零度
FreezingC Celsius = 0 // 结冰点温度
BoilingC Celsius = 100 // 沸水温度
)
func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }
func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }
我们在这个包声明了两种类型：Celsius和Fahrenheit分别对应不同的温度单位。它们虽然有
着相同的底层类型float64，但是它们是不同的数据类型，因此它们不可以被相互比较或混在
一个表达式运算。刻意区分类型，可以避免一些像无意中使用不同单位的温度混合计算导致
的错误；因此需要一个类似Celsius(t)或Fahrenheit(t)形式的显式转型操作才能将float64转为
对应的类型。Celsius(t)和Fahrenheit(t)是类型转换操作，它们并不是函数调用。类型转换不
会改变值本身，但是会使它们的语义发生变化。另一方面，CToF和FToC两个函数则是对不同
温度单位下的温度进行换算，它们会返回不同的值。
对于每一个类型T，都有一个对应的类型转换操作T(x)，用于将x转为T类型（译注：如果T是
指针类型，可能会需要用小括弧包装T，比如 ）。只有当两个类型的底层基础类型
(*int)(0)
相同时，才允许这种转型操作，或者是两者都是指向相同底层结构的指针类型，这些转换只
改变类型而不会影响值本身。如果x是可以赋值给T类型的值，那么x必然也可以被转为T类
型，但是一般没有这个必要。
数值类型之间的转型也是允许的，并且在字符串和一些特定类型的slice之间也是可以转换
的，在下一章我们会看到这样的例子。这类转换可能改变值的表现。例如，将一个浮点数转
为整数将丢弃小数部分，将一个字符串转为 类型的slice将拷贝一个字符串数据的副
[]byte
本。在任何情况下，运行时不会发生转换失败的错误（译注: 错误只会发生在编译阶段）。
底层数据类型决定了内部结构和表达方式，也决定是否可以像底层类型一样对内置运算符的
支持。这意味着，Celsius和Fahrenheit类型的算术运算行为和底层的float64类型是一样的，
正如我们所期望的那样。
fmt.Printf("%g\n", BoilingC-FreezingC) // "100" °C
boilingF := CToF(BoilingC)
fmt.Printf("%g\n", boilingF-CToF(FreezingC)) // "180" °F
fmt.Printf("%g\n", boilingF-FreezingC) // compile error: type mismatch
类型 69
gopl
比较运算符 和 也可以用来比较一个命名类型的变量和另一个有相同类型的变量，或有
== = 0) // "true"
fmt.Println(c == f) // compile error: type mismatch
fmt.Println(c == Celsius(f)) // "true"!
注意最后那个语句。尽管看起来像函数调用，但是Celsius(f)是类型转换操作，它并不会改变
值，仅仅是改变值的类型而已。测试为真的原因是因为c和g都是零值。
一个命名的类型可以提供书写方便，特别是可以避免一遍又一遍地书写复杂类型（译注：例
如用匿名的结构体定义变量）。虽然对于像float64这种简单的底层类型没有简洁很多，但是
如果是复杂的类型将会简洁很多，特别是我们即将讨论的结构体类型。
命名类型还可以为该类型的值定义新的行为。这些行为表示为一组关联到该类型的函数集
合，我们称为类型的方法集。我们将在第六章中讨论方法的细节，这里只说些简单用法。
下面的声明语句，Celsius类型的参数c出现在了函数名的前面，表示声明的是Celsius类型的
一个叫名叫String的方法，该方法返回该类型对象c带着°C温度单位的字符串：
func (c Celsius) String() string { return fmt.Sprintf("%g°C", c) }
许多类型都会定义一个String方法，因为当使用fmt包的打印方法时，将会优先使用该类型对
应的String方法返回的结果打印，我们将在7.1节讲述。
c := FToC(212.0)
fmt.Println(c.String()) // "100°C"
fmt.Printf("%v\n", c) // "100°C"; no need to call String explicitly
fmt.Printf("%s\n", c) // "100°C"
fmt.Println(c) // "100°C"
fmt.Printf("%g\n", c) // "100"; does not call String
fmt.Println(float64(c)) // "100"; does not call String
类型 70
gopl
2.6. 包和文件
Go语言中的包和其他语言的库或模块的概念类似，目的都是为了支持模块化、封装、单独编
译和代码重用。一个包的源代码保存在一个或多个以.go为文件后缀名的源文件中，通常一个
包所在目录路径的后缀是包的导入路径；例如包gopl.io/ch1/helloworld对应的目录路径是
$GOPATH/src/gopl.io/ch1/helloworld。
每个包都对应一个独立的名字空间。例如，在image包中的Decode函数和在unicode/utf16包
中的 Decode函数是不同的。要在外部引用该函数，必须显式使用image.Decode或
utf16.Decode形式访问。
包还可以让我们通过控制哪些名字是外部可见的来隐藏内部实现信息。在Go语言中，一个简
单的规则是：如果一个名字是大写字母开头的，那么该名字是导出的（译注：因为汉字不区
分大小写，因此汉字开头的名字是没有导出的）。
为了演示包基本的用法，先假设我们的温度转换软件已经很流行，我们希望到Go语言社区也
能使用这个包。我们该如何做呢？
让我们创建一个名为gopl.io/ch2/tempconv的包，这是前面例子的一个改进版本。（这里我们
没有按照惯例按顺序对例子进行编号，因此包路径看起来更像一个真实的包）包代码存储在
两个源文件中，用来演示如何在一个源文件声明然后在其他的源文件访问；虽然在现实中，
这样小的包一般只需要一个文件。
我们把变量的声明、对应的常量，还有方法都放到tempconv.go源文件中：
gopl.io/ch2/tempconv
// Package tempconv performs Celsius and Fahrenheit conversions.
package tempconv
import "fmt"
type Celsius float64
type Fahrenheit float64
const (
AbsoluteZeroC Celsius = -273.15
FreezingC Celsius = 0
BoilingC Celsius = 100
)
func (c Celsius) String() string { return fmt.Sprintf("%g°C", c) }
func (f Fahrenheit) String() string { return fmt.Sprintf("%g°F", f) }
转换函数则放在另一个conv.go源文件中：
包和文件 71
gopl
package tempconv
// CToF converts a Celsius temperature to Fahrenheit.
func CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }
// FToC converts a Fahrenheit temperature to Celsius.
func FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }
每个源文件都是以包的声明语句开始，用来指明包的名字。当包被导入的时候，包内的成员
将通过类似tempconv.CToF的形式访问。而包级别的名字，例如在一个文件声明的类型和常
量，在同一个包的其他源文件也是可以直接访问的，就好像所有代码都在一个文件一样。要
注意的是tempconv.go源文件导入了fmt包，但是conv.go源文件并没有，因为这个源文件中的
代码并没有用到fmt包。
因为包级别的常量名都是以大写字母开头，它们可以像tempconv.AbsoluteZeroC这样被外部
代码访问：
fmt.Printf("Brrrr! %v\n", tempconv.AbsoluteZeroC) // "Brrrr! -273.15°C"
要将摄氏温度转换为华氏温度，需要先用import语句导入gopl.io/ch2/tempconv包，然后就可
以使用下面的代码进行转换了：
fmt.Println(tempconv.CToF(tempconv.BoilingC)) // "212°F"
在每个源文件的包声明前紧跟着的注释是包注释（§10.7.4）。通常，包注释的第一句应该先
是包的功能概要说明。一个包通常只有一个源文件有包注释（译注：如果有多个包注释，目
前的文档工具会根据源文件名的先后顺序将它们链接为一个包注释）。如果包注释很大，通
常会放到一个独立的doc.go文件中。
练习 2.1： 向tempconv包添加类型、常量和函数用来处理Kelvin绝对温度的转换，Kelvin 绝
对零度是−273.15°C，Kelvin绝对温度1K和摄氏度1°C的单位间隔是一样的。
2.6.1. 导入包
在Go语言程序中，每个包都是有一个全局唯一的导入路径。导入语句中类
似"gopl.io/ch2/tempconv"的字符串对应包的导入路径。Go语言的规范并没有定义这些字符串
的具体含义或包来自哪里，它们是由构建工具来解释的。当使用Go语言自带的go工具箱时
（第十章），一个导入路径代表一个目录中的一个或多个Go源文件。
除了包的导入路径，每个包还有一个包名，包名一般是短小的名字（并不要求包名是唯一
的），包名在包的声明处指定。按照惯例，一个包的名字和包的导入路径的最后一个字段相
同，例如gopl.io/ch2/tempconv包的名字一般是tempconv。
包和文件 72
gopl
要使用gopl.io/ch2/tempconv包，需要先导入：
gopl.io/ch2/cf
// Cf converts its numeric argument to Celsius and Fahrenheit.
package main
import (
"fmt"
"os"
"strconv"
"gopl.io/ch2/tempconv"
)
func main() {
for _, arg := range os.Args[1:] {
t, err := strconv.ParseFloat(arg, 64)
if err != nil {
fmt.Fprintf(os.Stderr, "cf: %v\n", err)
os.Exit(1)
}
f := tempconv.Fahrenheit(t)
c := tempconv.Celsius(t)
fmt.Printf("%s = %s, %s = %s\n",
f, tempconv.FToC(f), c, tempconv.CToF(c))
}
}
导入语句将导入的包绑定到一个短小的名字，然后通过该短小的名字就可以引用包中导出的
全部内容。上面的导入声明将允许我们以tempconv.CToF的形式来访问gopl.io/ch2/tempconv
包中的内容。在默认情况下，导入的包绑定到tempconv名字（译注：指包声明语句指定的名
字），但是我们也可以绑定到另一个名称，以避免名字冲突（§10.4）。
cf程序将命令行输入的一个温度在Celsius和Fahrenheit温度单位之间转换：
$ go build gopl.io/ch2/cf
$ ./cf 32
32°F = 0°C, 32°C = 89.6°F
$ ./cf 212
212°F = 100°C, 212°C = 413.6°F
$ ./cf -40
-40°F = -40°C, -40°C = -40°F
如果导入了一个包，但是又没有使用该包将被当作一个编译错误处理。这种强制规则可以有
效减少不必要的依赖，虽然在调试期间可能会让人讨厌，因为删除一个类似log.Print("got
here!")的打印语句可能导致需要同时删除log包导入声明，否则，编译器将会发出一个错误。
在这种情况下，我们需要将不必要的导入删除或注释掉。
包和文件 73
gopl
不过有更好的解决方案，我们可以使用golang.org/x/tools/cmd/goimports导入工具，它可以根
据需要自动添加或删除导入的包；许多编辑器都可以集成goimports工具，然后在保存文件的
时候自动运行。类似的还有gofmt工具，可以用来格式化Go源文件。