



























the case for TinyDTLS; see Section 7.8.
Finally, we inspect the code exercised by irregular beha-
viors identiﬁed by the ﬁrst two strategies in order to assess
whether they can result in further ﬂaws. Such ﬂaws can be
more severe than the initial irregularity suggests. As an exam-
ple, the non-conforming Alert(DecryptError) in TinyDTLS
led us to discover loss of reliability in the face of reorde-
ring. Investigation can also reveal bugs not directly related
to the behavior inspected, which, however, exercise roughly
the same portion of code. Such was the case for PionDTLS,
where investigating an early Finished bug led to the discovery
of premature processing of application data; see Section 7.6.
7.3 General Behavior Patterns
Several conforming and non-conforming behavior patterns
emerged while analyzing the learned models. Table 4 summa-
rizes the irregular behaviors and the affected implementations.
Handshake with invalid message_seq numbers. Many
DTLS server implementations allow for creating new associa-
tions even when having an already established connection [36,
Section 4.2.8]. This process involves performing a new Client-
Hello–ServerHello exchange in the middle of an already star-
ted or ﬁnished handshake, and results in agreeing on a new
cipher suite and key material. The motivation behind this be-
havior is to support clients that want to re-establish a new
connection after loosing one (e.g., after a reboot). According
to the DTLS speciﬁcation [36, Section 4.2.2], every Client-
Hello starting a new handshake must have message_seq =
0. Every following handshake message has to increase the
USENIX Association
29th USENIX Security Symposium    2533
Figure 4: Model of a JSSE 12.0.2 server with client certiﬁcate authentication required. Blue edges capture the happy ﬂow,
dotted red a handshake with an unauthenticated ClientKeyExchange message, dashed-dotted red a handshake without certiﬁcate
messages, dashed red a handshake without CertiﬁcateVerify.
message_seq number by one.3
In ﬁve of the tested implementations, it was possible to
start a DTLS handshake with a higher message_seq number.
It was also possible to identify these implementations from the
learned models. For example, in the GnuTLS model (Fig. 3),
we were able to detect such an invalid behavior by following
the transitions looping back to state 2.
Non-conforming cookie computation. Upon receiving a
ClientHello message, the server computes a stateless cookie
and sends it via HelloVerifyRequest. The server expects the
cookie to be replayed in the subsequent ClientHello message.
According to the speciﬁcation, the replayed ClientHello mes-
sage must contain the same parameters as the ﬁrst one (e.g.,
supported cipher suites) [36, Section 4.2.1]. For this purpose,
the server should use the initial ClientHello parameters to
compute the cookie value.
In our evaluation, we could observe four implementations
incorrectly computing the cookie value, resulting in incorrect
validation of replayed ClientHello messages. Such a hands-
hake is also captured in Fig. 3, where an RSA handshake can
be completed even if the ﬁrst message was ClientHello(PSK).
An exceptional case is NSS, which omits the cookie exchange
step altogether, in discord with the speciﬁcation’s recommen-
dation.
Handshake with invalid order of messages. The most con-
3As mentioned in Section 2, DTLS also deﬁnes explicit sequence numbers
in DTLS records. In contrast to message_seq numbers located in handshake
messages, an implementation can accept a DTLS record with a sequence
number that was increased by more than one. This allows for accepting DTLS
records after losing previous UDP packets.
sequential divergent behaviors are handshakes where invalid
message sequences lead to handshake completion. These be-
haviors may have severe security implications. We found that
JSSE, PionDTLS, and Scandiumold do not correctly verify
the DTLS handshake message sequence in their internal state
machines. Below we discuss these bugs and their implicati-
ons.
7.4 Bypassing Client Authentication in JSSE
Figure 4 depicts the hypothesis model generated for JSSE
12.0.2 using one RSA-based cipher suite after two days of
learning. The model was obtained by erasing all states from
which a handshake could no longer be completed. The JSSE
server was conﬁgured to require client authentication.
The model depicts a correctly completed handshake, which
is marked with blue edges and follows states 0, 2, 4, 11, 12,
3, 9, and 10. This ﬂow includes Certiﬁcate and Certiﬁcate-
Verify messages correctly sent by the client to authenticate to
the server. However, even though the server required client
authentication, we were able to complete DTLS handshakes
without sending Certiﬁcate or CertiﬁcateVerify messages. The
invalid handshakes are captured in red and allow a client
to bypass client authentication. Our analysis revealed that
versions 11, 12 and 13 of Oracle and OpenJDK Java are
affected for all key exchange algorithms. Previous versions
are not affected by this issue.
Unauthenticated ClientKeyExchange. We start the descrip-
tion of JSSE vulnerabilities with a slightly modiﬁed happy
ﬂow, which follows states 0, 2, 4, 11, 5, 3, 9 and 10, and traver-
2534    29th USENIX Security Symposium
USENIX Association
ses dotted red edges on the model. In this ﬂow, the client sends
a CertiﬁcateVerify message before the ClientKeyExchange.
This implies that the ClientKeyExchange message is not au-
thenticated with the client certiﬁcate.
Being able to ﬁnalize such a DTLS handshake does not
directly result in a critical vulnerability. If the client behaves
correctly and sends messages in the correct order, an attacker
cannot modify the ClientKeyExchange message or the mes-
sage order because all the handshake messages are protected
by the Finished message. Still, this bug shows a ﬁrst invalid
behavior, and scratches on the surface of other invalid ones.
Certiﬁcate-less client authentication. The second vulnera-
bility is marked with dashed-dotted red edges in Fig. 4. The
DTLS handshake starts with four ordinary ﬂights of messages.
In the fourth ﬂight, the server requests client authentication
by sending a CertiﬁcateRequest message. However, the client
ignores this message and continues the handshake with Client-
KeyExchange, ChangeCipherSpec, and Finished messages,
without sending Certiﬁcate and CertiﬁcateVerify. The server
responds to the last message with ChangeCipherSpec and
Finished, thus completing handshake. This allows the client
to completely bypass client authentication and proceed with
sending application data.
Note that the handshake process remains completely trans-
parent to the server, as long as the server does not try to
manually inspect the certiﬁcate of the peer after completing
the handshake. Since the client does not send any certiﬁcate,
the certiﬁcate in the internal JSSE context is null. If the ser-
ver attempts to evaluate the certiﬁcate data (e.g., to access
the subject name or certiﬁcate issuer ﬁelds), this will result
in an SSLPeerUnverifiedException and most likely interrupt
the authentication process. The next ﬁnding bypasses this
constraint as well.
CertiﬁcateVerify-less client authentications. The third vul-
nerability follows red dashed edges in Fig. 4 and partially
relies on the behavior described above. It allows an attacker
to authenticate as an arbitrary user without the possession of
the private key. The only prerequisite is that the attacker is
in possession of a valid client certiﬁcate. This requirement is
in most cases trivially achieved as certiﬁcates are usually not
considered private and can be found in public repositories or
provided in frameworks like Certiﬁcate Transparency.
As already visualized on the model, after receiving the
second server message ﬂight, the attacker can send a Client-
KeyExchange message, thus transitioning from 4 to 7. Instead
of directly sending a ChangeCipherSpec message, we con-
tinue with an out-of-order Certiﬁcate message. Finally, we
send ChangeCipherSpec and Finished. The server then re-
sponds with ChangeCipherSpec and Finished, after which it
can accept an Application message encrypted under the esta-
blished keys. Thus, the attacker is able to ﬁnalize the DTLS
handshake without CertiﬁcateVerify, and thus without being
in possession of the certiﬁcate’s private key. The crucial diffe-
rence in comparison to the previous vulnerability is that the
server accepts the certiﬁcate, and is able to correctly process
its contents. Therefore, no SSLPeerUnverifiedException is
thrown, and the application has no possibility to detect the
invalid client behavior.
Attack rationale and state machine analysis. To under-
stand the above described behaviors, we analyzed the JSSE
state machine implementation. The reason behind the vulne-
rabilities is not intuitive. In general, it can be summarized in
the following processing properties. First, the server does not
validate a proper message order. From the ﬁrst bug, we can
conclude that speciﬁc handshake messages can be sent in a dif-
ferent order (e.g., ClientKeyExchange and CertiﬁcateVerify).
Second, the server only partially validates the correctness
of received messages. For example, it validates whether the
handshake contains a ClientKeyExchange message, or it does
not accept further ClientHello messages after a ServerHello-
Done message has been sent. Third, and most importantly,
the server does not verify the presence of critical messages
after the handshake has been ﬁnalized. In particular, it does
not check whether Certiﬁcate and CertiﬁcateVerify messages
were received after a CertiﬁcateRequest has been sent.
Our code analysis revealed that the JSSE implementa-
tion always waits for at least ClientKeyExchange, Change-
CipherSpec, and Finished messages. Messages arriving out-
of-order can be cached. This explains why we could observe
so many different paths leading to handshake completion in
the learned model.
Interestingly, the bugs affect the TLS implementation in a
similar way as well. Omitting the Certiﬁcate and Certiﬁcate-
Verify messages also authenticates the client. Additionally,
just removing the CertiﬁcateVerify message (while leaving
the Certiﬁcate message) also authenticates the client. We
were able to reproduce the issues with Apache Tomcat 9.0.22,
which was conﬁgured with JSSE and required client authenti-
cation.4 We reported the vulnerabilities to the Oracle security
team. They were assigned CVE-2020-2655 and patched with
the Oracle critical patch update in January 2020.
7.5 State Machine Bugs in Scandium
Scandiumold produced some of the largest models. This is
reﬂective of the fact that the implementation did not use an
internal state machine to validate the sequence of handshake
messages. Consequently, its model captures handshakes with
invalid sequences of messages. Reporting our ﬁndings promp-
ted Scandium developers to update the implementation with
state machine validation (Scandiumnew). This update ﬁxed all
the Scandium bugs reported in this paper. The update not only
helped to simplify the learned model (for a PSK conﬁguration
reducing the size from 16 to 13), but also enabled convergence
for ECDH conﬁgurations resulting in similarly small models.
4It is also possible to conﬁgure Apache Tomcat with an OpenSSL engine
(https://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html).
This version was not affected.
USENIX Association
29th USENIX Security Symposium    2535
Figure 5: Model of a PionDTLS server with client certiﬁcate authentication required. The model was reduced from 66 states to
11 by retaining only states from which a handshake can be ﬁnalized. Dotted red indicates an early Finished handshake, dashed
red a handshake with a delayed CertiﬁcateVerify message.
Models for the original and updated versions are available
online. Below, we present ﬁndings for the original version.
Early Finished. Scandium allows a handshake to be comple-
ted without the client sending a ChangeCipherSpec message.
The server then interprets all the upcoming messages as sent
in plaintext. It still expects a valid Finished message with
correct verify_data from the client to complete the handshake.
Therefore, a man-in-the-middle attacker is not able to simply
drop ChangeCipherSpec and use a fabricated Finished mes-
sage to decrypt the trafﬁc. A valid verify_data would still be
required to complete the handshake. This is not possible to
compute without possessing the master secret or exploiting
further bugs. However, this behavior shows fragility of the
Scandium state machine.
The early Finished message bug is remarkably similar to
the bug reported for JSSE 1.8.0_25 [13], and is related to
the attack described by Wagner and Schneier [44]. An attac-
ker could exploit this behavior by injecting a backdoor into
a library which would force a DTLS client to skip Change-
CipherSpec messages. The attacker could then observe plain-
text connections established with any Scandium server.
Multiple ChangeCipherSpec in a handshake. Scandium
can complete handshakes wherein ChangeCipherSpec is fol-
lowed by one or more ChangeCipherSpec messages and then
Finished. On each ChangeCipherSpec sent, the MAPPER in-
crements the epoch used in follow-up messages. Thus, the
sent Finished carries an epoch number for which a cipher has
not been negotiated. The fact that Scandium completes hands-
hakes in such a situation further showcases the looseness of
its implementation.
Measurable improvements. After we reported the vulnera-
bilities to the Scandium developers, they were able to simplify
Scandium’s state machine signiﬁcantly. Scandiumnew gene-
rates at most 17 states, whereas Scandiumold generates up to
45 in a more restricted setting.
7.6 Severe Bugs in PionDTLS
Early Finished revisited. PionDTLS exhibits an early Fi-
nished message bug which is similar to the one found in
Scandium. Obtained for a server requiring certiﬁcate authenti-
cation, PionDTLS’s model (Fig. 5) captures three handshakes
instead of the one expected. The two additional handsha-
kes are an early Finished handshake and a handshake with
a ChangeCipherSpec message preceding CertiﬁcateVerify
(where the CertiﬁcateVerify is sent encrypted). This latter bug
clearly shows that PionDTLS does not correctly validate the
ordering of messages.
Processing of unencrypted application data. During the
analysis of the previous bug, we noticed that PionDTLS
freely processed unencrypted application data delivered with
epoch 0. This bug has severe consequences by allowing an
attacker to inject arbitrary application data at any point once a
handshake has been completed. The bug was promptly ﬁxed
once we reported our ﬁndings to the developers.
HelloVerifyRequest retransmissions. PionDTLS occasio-
nally responds to the ﬁrst ClientHello message with multiple
HelloVerifyRequest messages. This response is marked with
HVR+ in Fig. 5. When investigating this behavior we found
that PionDTLS will retransmit HelloVerifyRequest messa-
ges until a timeout elapses or it receives the second Client-
Hello. RFC 6347 advises against retransmitting HelloVerify-
Request [36, p. 6], as doing so requires the server to keep
state, making it susceptible to Denial-of-Service attacks. The
retransmission also enables ampliﬁcation attacks, wherein an
attacker sends ClientHello messages to the server with the
2536    29th USENIX Security Symposium
USENIX Association
IP address of a victim as the source address. As a result, the
server will then send its replies to the spoofed source address,
thus ﬂooding the victim with HelloVerifyRequest messages.
Invalid Handshake Start in GnuTLS
7.7
In GnuTLS 3.5.19, we detected a bug in the initial state;
the implementation treated most messages as if they were
ClientHello. In doing so, the server responded to them with
HelloVerifyRequest and it transitioned to the next handshake
state. We reported the bug to the GnuTLS developers who
were able to reproduce and ﬁx the issue.
7.8 Security Violations & Bugs in TinyDTLS
Insecure renegotiation. After performing a DTLS hands-
hake with a TinyDTLS server, we were able to use the esta-
blished encrypted connection to perform the next handshake.
This process is also called renegotiation and allows the client
to establish new keys for the given connection. However, it
can only be safely used if the ClientHello message contains a
renegotiation indication extension and the server can process
it [34]. Otherwise, the server may be vulnerable to an insecure
renegotiation attack [34]; see also CVE-2009-3555.
The ClientHello messages we used did not contain any
renegotiation indication extension. Therefore, every renego-
tiation attempt should have been rejected by the processing
server. However, this was not the case. TinyDTLS violated
RFC 5746 [34, Sect. 3.2] and was vulnerable to the insecure
renegotiation attack. The real exploitability of this behavior
depends on the application using the TinyDTLS library.
Crashes on ChangeCipherSpec. In addition, we found that
in certain states TinyDTLSE crashes on receiving Change-
CipherSpec. For example, it crashed on receiving this mes-
sage in the initial state. The crashing behavior resulted in a
reduction of states compared to TinyDTLSC since crashing
inputs predictably lead to a single sink state. The crash was