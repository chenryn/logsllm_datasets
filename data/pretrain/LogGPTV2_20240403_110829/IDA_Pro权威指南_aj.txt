这一行信息特别指出：用户可以在二进制文件中虚拟地址为00BDC260
 的.text
 部分找到malloc
 函数；该函数长为384字节（十六进制为180字节），它返回调用方（R
 ），并使用EBP 寄存器（B
 ）引用它的局部变量。如需了解更多有关用于描述函数的标记（如上面的R
 和B
 ）的信息，请参阅IDA的内部帮助文档（或右击一个函数并选择Properties，标记将以可编辑的复选框显示）。
与其他显示窗口一样，双击Functions 窗口中的一个条目，反汇编窗口将跳转到选定函数所在的位置。
5.1.3 输出窗口
当你打开一个新文件时，IDA 工作区底部的输出窗口与其他窗口一起组成了IDA 的默认窗口。输出窗口是IDA 的输出控制台，从中可以找到与IDA 所执行的任务有关的信息。例如，当你初次打开一个二进制文件时，IDA 将生成消息，指出它在某个时刻所处的分析阶段，以及它为创建新数据库而执行的操作。当你使用数据库时，输出窗口将输出你所执行的各种操作的状态。你可以将输出窗口中的内容复制到系统剪贴板中，也可以右击窗口的任何位置，并在出现的菜单中选择相应的操作而完全删除输出窗口的内容。通常，输出窗口是显示你为IDA 开发的任何脚本和插件的输出的主要窗口。
5.2 次要的IDA 显示窗口
除反汇编、函数和输出窗口外，IDA 还在桌面上打开了其他许多选项卡式的窗口。这些选项卡就在导航带下面（见图4-9的➌处）。这些窗口用于提供备选或专门的数据库视图。是否使用这些显示窗口，取决于你所分析的二进制文件的特点，以及你应用IDA 的熟练程度。其中一些窗口非常特殊，我们将在后面几章中详细介绍。
5.2.1 十六进制窗口
将这个窗口称做“十六进制窗口”其实是一种误称，因为IDA 十六进制窗口可以配置为显示各种格式，并可作为十六进制编辑器使用。默认情况下，十六进制窗口显示程序内容和列表的标准十六进制代码，每行显示16 个字节，以及其对应的ASCII字符。和在反汇编窗口中一样，用户也可以同时打开几个十六进制窗口。第一个十六进制窗口叫做Hex View-A ，第二个十六进制窗口叫做Hex View-B，接下来的窗口叫做Hex View-C ，依次类推。默认情况下，第一个十六进制窗口会与第一个反汇编窗口同步。如果一个反汇编窗口与一个十六进制窗口同步，在一个窗口中滚动鼠标，另一个窗口也会滚动到相同的位置（同一个虚拟地址）。此外，如果在反汇编窗口中选中一个项目，十六进制窗口中的对应字节也将突出显示。如图5-5所示，在反汇编窗口中，光标指向地址0040108C
 ，这是一个调用指令，那么，在十六进制窗口中，构成这个指令的全部5个字节均突出显示。
图5-5 同步的十六进制窗口和反汇编窗口
另外，在图5-5中还可以看到十六进制窗口上下文菜单，右击十六进制窗口的任何位置，这个菜单就会出现。使用这个菜单，可以指定与某个特殊的十六进制窗口同步的反汇编窗口（如果有的话）。如果取消选中同步选项，那么在滚动十六进制窗口时，将不会有任何反汇编窗口随之滚动。选择Edit 菜单项可将十六进制窗口转变为十六进制编辑器。完成编辑后，你必须提交或取消更改才能返回查看模式。你可以使用Data Format 菜单项选择各种显示格式，如1、2、4、8字节十六进制，带签名的十进制，或不带签名的十进制整数及各种浮点格式。你可以使用Columns菜单项更改显示的列数，使用Text 选项打开或关闭文本块。
有时候，十六进制窗口中显示的全部是问号，这表示IDA 无法识别给定的虚拟地址范围内的值。如果程序中包含一个bss节1
 ，就会出现这种情况。通常，bss节并不占用文件的空间，但加载器会扩展这一节，以适应程序的静态存储要求。
1. bss 节由编译器创建，用于保存程序的所有未初始化的静态变量。既然没有为这些变量指定初始值，那么，就没有必要在程序的文件镜像中为它们分配空间；只需在程序的一个头文件中注明它的大小。当程序执行时，加载器会为其分配所需的空间，并将整个数据块的初始值设为0 。
5.2.2 导出窗口
导出窗口列出文件的入口点。这包括程序的执行入口点（在程序的文件头部分指定），以及任何由文件导出给其他文件使用的函数和变量。通常，用户可在共享库（如Windows DLL 文件）中找到导出的函数。导出的项目按名称、虚拟地址和序数2
 （如果可用）排列。对于可执行文件，导出窗口中至少包含一个项目：程序的执行入口点。IDA 将这个入口点取名为start。导出窗口中的常见条目如下所示：
2. 共享库可能会使用导出序数，以方便用户通过序数而非名称访问函数。使用序数可以加快地址查询速度，并允许程序员隐藏函数的名称。Windows DLL 即使用导出序数。
LoadLibraryA                          7C801D77 578
与许多其他IDA 窗口一样，双击导出窗口中的一个条目，IDA 将会跳转到反汇编窗口中与该项目有关的地址。导出窗口提供与objdump (-T)
 、readelf (-s)
 和dumpbin (/EXPORTS)
 等命令行工具类似的功能。
5.2.3 导入窗口
导入窗口的功能与导出窗口的功能正好相反。它列出由被分析的二进制文件导入的所有函数。只有在二进制文件使用共享库时，IDA 才需要用到导入窗口。静态链接的二进制文件不存在外部依赖关系，因此不需要导入其他内容。导入窗口中的每个条目列出一个导入项目（函数或数据）的名称，以及包含该项目的库的名称。由于被导入的函数的代码位于共享库中，窗口中每个条目列出的地址为相关导入表条目3
 的虚拟地址。以下是导入窗口中的一个条目：
3. 导入表为加载器提供空间，用于在加载所需的库并获知导入函数的地址后保存导入函数的地址。一个导入表条目保存一个导入函数的地址。
0040E108  GetModuleHandleA         KERNEL32
双击这个条目，IDA 将跳转到反汇编窗口的0040E108
 地址处。在十六进制窗口中，这个内存位置的内容显示为?? ?? ?? ??
 。IDA 是一种静态分析工具，它无法获知程序在执行时会在这个内存位置输入什么地址。导入窗口还提供与objdump (-T)
 、readelf (-s)
 和dumpbin (/IMPORTS)
 等命令行工具类似的功能。
对于导入窗口，需要记住的一点是：导入窗口仅显示二进制文件想要动态加载器自动处理的符号，二进制文件选择使用dlopen/dlsym
 或LoadLibrary/GetProcAddress
 等机制自行加载的符号将不会在导入窗口中显示。
5.2.4 结构体窗口
结构体窗口用于显示IDA 决定在一个二进制文件中使用的任何复杂的数据结构（如C结构体和联合）的布局。在分析阶段，IDA 会查询它的函数类型签名扩展库，设法将函数的参数类型与程序使用的内存匹配起来。如图5-6所示的结构体窗口表明，IDA 认为程序使用了sockaddr
4
 数据结构。
4. sockaddr
 结构是C标准库中的一种数据类型，常用于表示网络连接中的一个端点。在与远程计算机建立TCP 连接时，sockaddr
 变量可用于保存IP 地址和端口号。
图5-6 结构体窗口
至于IDA 为什么会得出这样的结论，可能有许多原因。其中一个原因是：IDA 发现，程序为建立新的网络连接调用了C库函数connect
5
 。双击数据结构的名称（本例中为sockaddr
 ）， IDA 将展开该结构，这样你就可以查看该结构的详细布局，包括每个字段的名称和大小。
5. int connect(int sockfd, const struct sockaddr *serv_addr, socklen_t addrlen);
 。
结构体窗口的两个主要用途包括：为标准数据结构的布局提供现成的参考；为你提供一种方法，在你发现程序使用的自定义数据结构时，帮助你创建自己的、可用作内存布局模板的数据结构。我们将在第8章详细讨论结构体的定义及结构体在反汇编过程中的应用。
5.2.5 枚举窗口
枚举窗口有点类似于结构体窗口。如果IDA 检测到标准枚举数据类型（C enum
 ），它将在枚举窗口中列出该数据类型。你可以使用枚举来代替整数常量，提高反汇编代码的可读性。像结构体窗口一样，在枚举窗口中也可以定义自己的枚举类型，并将其用在经过反汇编的二进制代码中。
5.3 其他IDA 显示窗口
最后，我们讨论默认情况下IDA 不会打开的窗口。这里讨论的每一个窗口都可通过View▶Open Subviews命令打开。但是，它们提供的并不是你当前需要的信息，因此，IDA 一开始并不打开这些窗口。
5.3.1 Strings窗口
Strings 窗口是IDA 中内置的，功能等同于strings及其他一些实用工具。在IDA 5.1及之前的版本中，桌面默认打开Strings 窗口。但是，从5.2版开始，IDA 不再默认打开Strings 窗口，不过用户仍然可以通过View▶Open Subviews▶Strings 命令打开该窗口。
Strings 窗口中显示的是从二进制文件中提取出的一组字符串，以及每个字符串所在的地址。与双击Names窗口中的名称得到的结果类似，双击Strings 窗口中的任何字符串，反汇编窗口将跳转到该字符串所在的地址。将Strings 窗口与交叉引用（第9章将介绍）相结合，可迅速定位你感兴趣的字符串，并追踪到程序中任何引用该字符串的位置。例如，你可能会看到SOFTWARE\Microsoft\ Windows\CurrentVersion\Run这个字符串，并想知道应用程序为什么会引用这个特殊的Windows注册表项。在下一章中你会发现，导航到引用这个字符串的程序位置，只需要单击4下鼠标。掌握Strings窗口的操作，是高效应用这个窗口的基础能力。IDA 并不会永久保存它从二进制文件中提取出的字符串。因此，每次打开Strings 窗口，IDA 都会扫描或重新扫描整个数据库，查找其中的字符串。扫描字符串的操作遵照Strings 窗口的设置来完成，右击该窗口，在出现的菜单中选择Setup，即可开始设置。如图5-7所示，Setup Strings窗口用于指定IDA 应扫描的字符串类型。IDA 默认扫描的字符串类型为至少包含5个字符的C风格、以null
 结尾的7位ASCII字符串。
图5-7 Setup Strings窗口
如果希望在字符串窗口中显示除C风格字符串以外的字符串，你需要重新配置Setup Strings窗口，从中选择IDA 扫描的相应字符串类型。例如，Windows程序通常会使用Unicode字符串，而Borland Delphi二进制文件则往往使用2个字节长的Pascal字符串。每次你单击OK按钮关闭Setup Strings窗口后，IDA 都会根据新的设置重新扫描数据库，查找相应的字符串。有两个设置选项值得特别注意。
Display only defined strings（仅显示已定义的字符串）
 。这个选项使Strings 窗口仅显示IDA自动创建或用户手动创建的已命名字符串数据项。在选中这个选项的同时禁用所有其他选项，IDA 将不会自动扫描其他类型的字符串。
Ignore instructions/data definitions （忽略指令/ 数据定义）
 。这个选项会使IDA 扫描指令和现有数据定义中的字符串。使用这个选项，可以让IDA 扫描二进制代码中错误地转换成指令的字符串，或扫描数据中非字符串格式（如字节数组或整数）的字符串。这个选项还会导致IDA 生成许多垃圾字符串，即那些由5个或更多ASCII字符构成的字符串（无论其是否合法）。使用这个选项的效果类似于使用strings –a
 命令。
如图5-8所示，如果没有正确配置字符串设置，IDA 不一定会显示二进制文件中的所有字符串。在这种情况下，用户并没有选中Ignore instructions/data definitions 选项。
图5-8 不扫描字符串数据的情况
结果，IDA 并不扫描位置.rdata:0040C19C
 处的字符串（“Please guess a number between 1 and %d.”）。这个选项的作用是确保 IDA 会在所有可能发现字符串的地方扫描各种类型的字符串。
5.3.2 Names窗口
Names 窗口如图5-9所示，它简要列举了一个二进制文件的所有全局名称。名称是指对一个程序虚拟地址的符号描述。在最初加载文件的过程中，IDA 会根据符号表和签名分析派生出名称列表。名称可以按字母排序，也可以按虚拟地址排序（升序或降序）。用户可通过Names窗口迅速导航到程序列表中的已知位置。双击Names 窗口中的名称，可立即跳转到显示该名称的反汇编视图。
图5-9 Names 窗口
Names 窗口中显示的名称采用了颜色和字母编码。其编码方案总结如下。
F
 ，常规函数。IDA 认为这些函数不属于库函数。
L
 ，库函数。IDA 通过签名匹配算法来识别库函数。如果某个库函数的签名并不存在，则该函数将被标记为常规函数。
I
 ，导入的名称，通常为共享库导入的函数名称。它与库函数的区别在于：导入的名称没有代码，而库函数的主体将在反汇编代码清单中显示。
C
 ，命名代码。这些是已命名的程序指令位置，IDA 认为它们不属于任何函数。当IDA 在程序的符号表中找到一个名称，但没发现对程序位置的任何调用时，就会出现这种情况。
D
 ，数据。已命名数据的位置通常表示全局变量。
A
 ，字符串数据。这是一个被引用的数据位置，其中包含的一串字符符合IDA 的某种已知的字符串数据类型，如以'\0'
 字节结束的ASCIIC 字符串。
浏览反汇编代码清单时，你会注意到，其中许多已命名的位置在Named 窗口中并没有对应的名称。在对一个程序进行反汇编的过程中，IDA 会为所有直接作为代码（分支或调用目标）或数据（读取的、写入的或使用的地址）引用的位置生成名称。如果一个位置已在程序符号表中命名，IDA 将采用该名称。如果符号表中某一程序位置没有名称，则IDA 会生成一个默认的名称，以在反汇编过程中使用。在IDA 给某个位置命名时，它会使用该位置的虚拟地址和一个表示该位置的类型的前缀进行命名。将虚拟地址合并到生成的名称中，可确保生成的所有名称的唯一性，因为没有两个位置的虚拟地址是相同的。这种自动生成的名称并不在Names 窗口中显示。用于自动生成名称的一些常用前缀包括以下这些。
sub_xxxxxx
 ：地址xxxxxx
 处的子例程。
loc_xxxxxx
 ：地址xxxxxx
 处的一个指令。
byte_xxxxxx
 ：位置xxxxxx
 处的8位数据。
word_xxxxxx
 ：位置xxxxxx
 处的16 位数据。
dword_xxxxxx
 ：位置xxxxxx
 处的32 位数据。
unk_xxxxxx
 ：位置xxxxxx
 处的大小未知的数据。
在本书的剩余部分，我们还将介绍IDA 用于为程序数据位置选择名称的其他算法。
5.3.3 段窗口
段窗口显示的是在二进制文件中出现的段的简要列表。需要注意的在，在讨论二进制文件的结构时，IDA 术语段
 （segment）常称为节
 （section ）。请不要将这里的术语段与实施分段内存体系结构的CPU 中的内存段混淆。该窗口中显示的信息包括段名称、起始和结束地址以及许可标志。起始和结束地址代表程序段在运行时对应的虚拟地址范围。下面是IDA 在分析一个Windows二进制文件时显示的段窗口：
Name   Start    End      R W X D L Align Base Type   Class  AD es   ss   ds   fs       gs
UPX0   00401000 00407000 R W X . L para  0001 public CODE   32 0000 0000 0001 FFFFFFFF FFFFFFFF
UPX1   00407000 00408000 R W X . L para  0002 public CODE   32 0000 0000 0001 FFFFFFFF FFFFFFFF
UPX2   00408000 0040803C R W . . L para  0003 public DATA   32 0000 0000 0001 FFFFFFFF FFFFFFFF
.idata 0040803C 00408050 R W . . L para  0003 public XTRN   32 0000 0000 0001 FFFFFFFF FFFFFFFF
UPX2   00408050 00409000 R W . . L para  0003 public DATA   32 0000 0000 0001 FFFFFFFF FFFFFFFF
从上面的例子可以立即发现这个特殊的二进制文件有点奇怪，因为它使用了非标准的段名称，并包含两个可写入的可执行代码段，这表示它们可能是自修改代码（更多内容将在第21 章讨论）。即使IDA 知道段的大小，也不能表明它知道该段的内容。由于各种原因，段占用的磁盘空间比内存空间小得多。在这些情况下，IDA 会显示它已经确定能够从磁盘文件中提取的段部分的值，至于段的其他部分，它会以问号显示。
双击段窗口中的任何条目，IDA 将跳转到反汇编窗口中该段的起始位置。右击一个条目，IDA将显示一个上下文菜单，你可以选择添加新段、删除现有段、或者编辑现有段的属性。在对非标准格式的文件进行逆向工程时，这些功能特别有用，因为二进制文件的段结构可能还没有被IDA加载器检测出来。
段窗口所对应的命令行工具包括objdump (-h)
 、readelf (-s)
 和dumpbin (/HEADERS)
 。
5.3.4 签名窗口
IDA 利用一个庞大的签名库来识别已知的代码块。签名用于识别由编译器生成的常用启动顺序，以确定可能已被用来构建给定二进制文件的编译器。签名还可用于将函数划归为由编译器插入的已知库函数，或者因为静态链接而添加到二进制文件中的函数。在IDA 为你识别库函数时，你可以将更多精力放在分析IDA 无法识别的代码上（对你而言，这可能比对printf
 的内部工作机制进行逆向工程更加有趣）。
签名窗口显示的是IDA 对打开的二进制文件所使用的签名。Windows PE文件的签名窗口的示例如下所示：
File      State     #func  Library name
vc32rtf   Applied   501    Microsoft VisualC 2-8/net runtime
这个例子表明，IDA 已对该二进制文件应用了vc32rtf