第5章终
端
135
动手试试：使用/dev/tty设备
3）以menu2.c为蓝本对代码做下列修改，使输入和输出都被重定向到/dev/uty设备：
#include 
#1nclude 
char *menu[] = {
"a- add nev record*,
NULA,
'q-quit*,
 :
int getchoice(char *greet, char *choices{]. FILE *in, FILE *out1;
int main()
int choice = 0:
PILE *output;
FILE *input;
if(1isatty(fileno(stdout)}))
fprintf (stderr,*You are not a terminal, OK.\n*);
input = fopen(/dev/tty*.
output = fopen(*/dev/tty'.
'r*);
if（1input !output)(
fprintf(stderr.*Unable to cpen /dev/tty\n);
exit (1) :
1op
1
choice = getchoice(*Please select an action*.nenu,input.output);
}while（choice 1‘q'）:
printf(*You have chosen:c'n*.choice);
exit (0) :
int getchoice(char *greet,char *choices[], FILE *in, FILE *out)
int chosen = 0;
char **option;
int selected;
do{
fprintf(out,*Choice: &s\n*,greet);
while（*option）（
option = choices;
fprintf(out,*es\n",*option);
option++:
}op
}while(selected ss\n');
selected = fgetc(in);
option • choices;
while(*option)(
if(selected#
chosen = 1:
)（[o]uodo,
break:
option*+;
if(lchosen){
fprintf(out,*Incorrect choice.select again\n*):
}while(!chosen) ;
return selected;
加入jaVa编程群：524621833
---
## Page 154
/36
Linux程序设计
现在，虽然我们已经把输出重定向了、但在运行这个程序时依然能够看到菜单提示，而正
常的程序输出则被放人单独的文件里去了：
You are not a terminal. oK.
$nenu3 >file
d - delete record
a - add new record
Choice: Please select an action
d-delete record
a - add new record
q - quit
Scat file
You have chosen: d
5.2终端驱动程序和通用终端接口
通过简单的文件操作我们已经能够对终端进行一些控制，但我们经常需要更精细的终端控
制能力：UNIX提供的一组操作接口使我们能够对终端驱动程序的操作行为加以控制，使我们对
终端输人和终端输出的控制能力更上一层楼。
5.2.1概述
请看下面的示意图，我们可以通过一组函数调用（即GeneralTerminalInterface，通用终端
接口，简称GTI）来控制终端，这些函数调用与对数据进行读写的函数调用是有区别的。这使得
数据（读/写）接口非常干净，同时还允许对终端行为做细致的调控。这句话的意思并不是说终
端的I/O接口上空无一物，相反，它将与千变万化的硬件设备打交道。
用户程序
数据读/写接口
控楼口
内核中的终端驱
动程序
图5-1
用UNIX的语言来说，控制接口设置了一个“行业帮规”。它使程序在定义终端驱动程序的
操作行为方面拥有了极大的灵活性。
加入jaVa编程群：524621833
---
## Page 155
第5章终
137
表5-1是一些我们能够控制的主要功能：
表5-1
行编辑
是否允许用Backspece（后退）键进行编辑
缓冲
是立即读取字符，还是经过一个可配置的延遇之后再读取它们
回显
允许用户对输人内容是否回显的情况进行控制，比如读取口令字的时候
CR/LF
为输人和输出所做的映射，设置用户打印“n”字符时应该如何处理
线速度
对使用PC电脑做为控制台来说没什么大用，但对调制解调器或连接在申行线上的终端来
说就很重要了
5.2.2硬件模型
在探讨通用终端接口的细节之前，先弄明白它将驱动的硬件模型是很重要的。
数据读/写接口
数据和控制线
数据和控制线
电话线
图5-2
图中的布局结构（某些UNIX站点上的实际情况也正是如此）是让一台UNIX机器通过一个
申行口连接一台调制解调器，再通过一条电话线连接到另外一台调制解调器，那个调制解调器
又连接着一个终端。事实上，这正是某些小ISP（lnternet service provider，因特网接入服务提供
商）们使用的设置情况。我们可以把它看做是客户/服务器模型的一个“远亲”，同样都是程序运
行在主机而用户工作在某个终端上。
加入jaVa编程群：524621833
---
## Page 156
138Linux程序设计
如果读者工作在台运行着Linux的PC电脑上，可能会认为这个模型过于复杂。但我们要说
的是，因为本书的两位作者都有调制解调器，所以如果我们愿意的话，就可以按照图中的方式
用两个调制解调器和一条电话线连接起来，通过一个终端仿真程序（比如minicom）在彼此的机
器上运行·个远程登录作业。
使用这样一个硬件模型的好处是大多数现实世界中的情况都将只是这个最复杂的模型的·
个子集。如果图中模型里少点什么，支持起来不是更容易了吗。
5.3termios结构
termios是在POSIX技术规范里定义的标准操作接口，它与SystemV的termio接口很相似。终
端接口由一个termois类型结构里的设置值控制，还会用到一组函数调用。这两样都定义在头文
件termois.h里。
如果程序需要调用定义在rermios.h文件里的函数，还必频链接一个辅助性的函数库。
这个辅助函数库通常是curses库，所以在编译本章中的示例程序时，我们必须在编译命
令行的末尾加上“-lcurses”选项。在Linux系统上，这个函数库的名字是ncurses，与之
对应的编译选项将是“-lncurses”。
可以被操控来影响终端的设置值被划分为以下几组不同的工作模式：
·输人模式。
·输出模式。
·控制模式。
·本地模式。
·特殊的控制字符。
一个最简单的termios结构的典型定义如下所示（但X/Open技术规范允许添加附加的数据域）：
include 
struct termios(
tcflag_t c_ielagr
tcflag_tc_oflag
totlag_tc_ielag)
cc_t
c_ce[Mcc8]]
结构中数据元素的名称与上面列出的五种工作模式相对应。
初始化与某个终端对应的那个termios结构需要调用tcgetattr函数，它的定义如下所示：
Binclude 
int tcgetattr(int fd, struct texmios *termios_p);
这个调用把终端接口变量的当前值写到由termios_p指向的结构里去。如果需要对这些值进
行修改，可以通过tcsetatr两数来重新配置终端接口，它的定义如下所示：
tinclude 
int tcsetattr（int fd, int actions, const struct teraios *termion,D);
加入jaVa编程群：524621833
---
## Page 157
第5章终
端
61
tcsetattr函数的action域控制着进行修改的方式，有三种修改方式（见表5-2），它们是：
表5-2
TCSANOW
立即对值进行修改
TCSADRAIN
等当前输出完成后再对值进行修改
fCSAFLUSH
等当前输出完成后再对值进行修改，但还要丢弃当前可用的输人数据和尚未从read调用返
回的输人数据
程序运行究毕后，要把终端设置恢复到程序开始运行以前的值，这一点是非常重要
的。先保存这些值并在结未运行后恢复它们永远是程序的责任。
接下来我们将对模式及其相关函数调用做进一步的学习。这些模式的某些细节相当专业化，
并且也很少会被用到，所以我们在此只对一些主要的功能进行介绍。如果读者需要更深人的了
解，请查阅自己主机中通过man命令调出的使用手册页，也可以直接去查阅POSIX或X/Open技
术规范。
在我们的第一次亲密接触里，最需要留意的是本地工作模式。我们在本章中编写的第个
应用程序出现了两个问题，授权和非授权模式就是第二个问题的解决办法。我们可以让程序等
待一行输人完毕后才进行处理，也可以让它一有字符敲人就立刻行动。
5.3.1输入横式
输入模式控制着输入数据（终端驱动程序从串行口或键盘接收到的字符）在被传递到程序
之前都需要经过哪些处理。我们通过设置termios结构里c_iflag成员中的标志对它们进行控制。
标志都被定义为宏，并且能够通过一个按位的OR操作组合到一起。所有的终端工作模式都采用
这种办法。
可以用在c_iflag成员里的标志宏有：
·BRKINT
当在输人行上检测到一个中止条件时，产生一个中断。
·IGNBRK
忽略输人行上的中止条件。
·ICRNL
把一个接收到的回车符转换为换行符。
·IGNCR
忽略接收到的回车符。
·INLCR
把接收到的换行符转换为回车符。
·IGNPAR
忽略带奇偶校验错的字符。
·INPCK
对接收到的字符进行奇偶校验。
·PARMRK
对奇偶校验铬做出标记。
·ISTRIP
把所有接收到的字符都设置为7个二进制位。
•IXOFF
激活对输人数据的软件流控制。
NOXI·
激活对输出数据的软件流控制。
如果BRKINT和IGNBRK标志都没有被设置，输入行上的中止条件就会被读做一个
NULL（0x00）字符。
加入jaVva编程群：524621833
---
## Page 158
140Linux程序设计
用户一般不需要对输人模式进行修改，因为它的缺省值一般说来就是最合适的，所以我们
也不再对它多费笔墨。
5.3.2输出模式
输出模式控制着输出字符的处理方式，即由程序发送出来的字符在被传递到串行口或屏
之前都需要经过哪些处理。正在如大家预料到的，其中有许多正好与输人工作模式相对立。它
还有几个额外的标志，主要用于慢速终端，这些终端在处理回车等字符时要花费一定的时间。
现在看来，几乎所有这些标志要不有些多余（因为现如今的终端比从前要快得多了），要不用
terminfo终端性能数据库处理起来会更有效，我们在本章后面会用到tcrminfo终端性能数据库。
我们通过设置termios结构里c_oflag成员中的标志对输出模式进行控制。我们可以在c_iflag
成员里使用的标志宏有：
·OPOST
打开输出处理功能。
·ONLCR
把输出中的换行符转换为回车加行进纸两个字符。
·OCRNL
把输出中的回车符转换为换行符。
·ONOCR
在第0列不允许对输出进行回车。
·ONLRET
换行符等同于回车符。
·OFILL
发送填充字符以提供延时。
·OFDEL
把DEL而不是NULL字符用做一个填充字符。
·NLDLY
换行符延时选择。
·CRDLY
回车符延时选择。
·TABDLY