PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Meddle Process
Process
class ProcessRdp(ProcessBase):
def __init__(self, controller, crashdump_folder,
breakpoint_handler, pid, unique_identifier,
verbose):
# Specific options
self.path_to_exe = b"C:\\Windows\\System32\\mstsc.exe"
self.command_line = b"mstsc.exe /v:192.168.110.134"
# Initialize
self.initialize(...)
def on_debugger_attached(self, Engine):
# Attach the targets to the process
...
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Meddle Process
Process
def on_debugger_attached(self, Engine):
# Set the types
self.Engine = Engine
self.types = meddle_types(Engine)
# Add the targets
#Engine.AddTarget(Target_RDP_RC4)
Engine.AddTarget(Target_Winsock_Send)
# Handle process loaded
Engine.HandleProcessLoaded()
# Resume the process. Was created suspended.
if self.start_th >= 0:
windll.kernel32.ResumeThread(self.start_th);
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Meddle Controller
Controller
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Meddle Controller
Controller Measurement Instance
# Perform an initial measurement
mBreakpoint = BreakpointMeasurement()
mProcess = ProcessRdp(self, "C:\\Crash\\", mBreakpoint,
-1, 0, True )
self.CEngine.AttachProcess(mProcess)
sleep(5)
measurements = mBreakpoint.measurement
mProcess.stop()
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Meddle Controller
Controller Measurement Instance
class BreakpointMeasurement:
def __init__(self):
self.measurement = []
def breakpoint_hit(self, parent, target, event_name,
address, context, th):
[fuzz_blocks, fuzz_name] = target.breakpoint_hit(event_name,
address, context, th)
if fuzz_blocks != None:
# Record the possible attack
self.measurement += [[target.__class__.__name__,
fuzz_name, len(fuzz_blocks)]]
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Meddle Controller
Controller
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Meddle Controller
Controller Attack Instance
breakpointSeed = self.generator.randint(1,10000000)
newBreakpoint = BreakpointAttack(5, attackEventNumber,
attackEventName, breakpointSeed )
newProcess = ProcessNotepad(self, "C:\\Crash\\", newBreakpoint,
-1, uniqueId, False )
self.CEngine.AttachProcess(newProcess)
uniqueId+=1
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
XRDP Demo 1 Diagram
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
XRDP Demo 1
Demo 1:
https://github.com/glmcdona/meddle/tree/master/examples
/example mstsc
Fuzz ws2 32.dll::send() calls from rdp client during connection
Success: Crash of XRDP server
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
RC4 Encryption
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
RC4 Encryption
class Target_PrintSymbols(TargetBase):
def __init__(self, Engine, ProcessBase):
...
self.hook_symbols = True
# Hook pdb symbols
self.libraries = ["mstscax.dll"]
...
self.functions_regex = re.compile(".*",re.IGNORECASE)
...
def breakpoint_hit(self, event_name, address, context, th):
print event_name
return [[],[]]
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
RC4 Encryption
...
mstscax.dll::rc4
mstscax.dll::?SendBuffer@CMCS@@UEAAJPEAVITSNetBuffer@@KKKKK@Z
mstscax.dll::?SendBuffer@CTSX224Filter@@UEAAJPEAVITSNetBuffer@@KKKKK@Z
...
mstscax.dll::?RunQueueEvent@CTSThread@@IEAAJPEAVCTSMsg@@@Z
mstscax.dll::?OnTDFlushSendQueue@CTD@@QEAAJPEAVITSAsyncResult@@_K@Z
Sent at 0x4D00EF4:
03 00 00 60 02 F0 80 64
00 01 03 EB 70 52 08 00
...‘...d
....pR..
00 00 F4 31 42 EF BD FA
21 3D 36 D1 4C 71 CB 91
...1B...
!=6.Lq..
CA 03 DB B2 A9 9D B5 86
52 A1 F6 4D 5E 6E C7 8D
........
R..M^n..
67 B4 D2 53 BE C5 B5 55
98 1C 45 31 13 0A DD CF
g..S...U
..E1....
06 37 6B 69 C6 60 EF A3
C1 EC F6 AB E5 70 96 73
.7ki.‘..
.....p.s
32 9B 4E ED 7D 40 0E A4
C7 20 F2 A3 69 15 0F 9A
2.N.}@..
. ..i...
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
RC4 Encryption
class Target_RDP_RC4(TargetBase):
def __init__(self, Engine, ProcessBase):
...
self.hook_symbols = True
# Hook pdb symbols
self.libraries = ["mstscax.dll"]
...
self.functions = ["rc4"]
...
def breakpoint_hit(self, event_name, address, context, th):
parameters = [ ... ]
[reg_spec, stack_spec] = self.ProcessBase.types.pascal( para
arguments = self.Engine.ParseArguments(stack_spec, reg_spec,
return [arguments.GetFuzzBlockDescriptions(), "RC4 buffer"]
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
XRDP Demo 2 Diagram
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
XRDP Demo 2
Demo 2:
https://github.com/glmcdona/meddle/tree/master/examples
/example mstsc
Fuzz ws2 32.dll::rc4() calls from rdp client during connection
Success: Crash of XRDP server
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
Received Data More Complicated
def breakpoint_hit(self, event_name, address, context, th):
if event_name == "ws2_32.dll::recv":
...
self.Engine.AddBreakpoint(self,
arguments.returnAddress.ToPtr(), "return")
self.buffers[str(th)] = arguments
...
elif event_name == "return":
...
# Parse the return value and read output buffer
...
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
Vulnerabilities
XRDP v0.60 and below vulnerable. Some RCE before
authentication:
Bu↵er-overﬂow in xrdp mcs recv connect initial()
Out-of-bounds bitmap cache reference
xrdp cache add bitmap()
Large num events causes information disclosure and DOS
conditions
Number of channels attack
xrdp sec process mcs data channels()
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
XRDP Server
Vulnerabilities
static int APP_CC xrdp_mcs_recv_connect_initial(
struct xrdp_mcs* self)
{
int len;
struct stream* s;
init_stream(s, 8192); // Fixed size buffer
...
// Overflow. ’len’ controlled, copied to fixed buffer
out_uint8a(self->client_mcs_data, s->p, len);
}
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
DeviceIoControl Demo
DeviceIoControl
BOOL WINAPI DeviceIoControl(HANDLE hDevice,
DWORD dwIoControlCode, LPVOID lpInBuffer,
DWORD nInBufferSize, LPVOID lpOutBuffer,
DWORD nOutBufferSize, LPDWORD lpBytesReturned,
lpOverlapped);
Communication to kernel-mode
Control code to device driver
Input and output bu↵er
eg. low level disk read/write
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
DeviceIoControl Demo
Devices Communication
Run Notepad ! Save As ! Network:
Number of events being attacked by name:
728
\??\Nsi
64
\??\MountPointManager
20
\Device\LanmanDatagramReceiver
16
\Device\KsecDD
12
\Device\Afd\Endpoint
6
\??\C:
6
\??\NvAdminDevice
4
\??\C:\Users
4
\DEVICE\NETBT_TCPIP_{09AEF42F-B3C7-4854-B4FB-D673B5AD51D5}
4
\??\C:\Users\glmcdona\Documents\Visual Studio 2012\Projects
4
\??\C:\Users\glmcdona\Documents
4
\DEVICE\NETBT_TCPIP_{225A69B0-2055-4DF4-87CB-F3AC50134FE2}
4
\DEVICE\NETBT_TCPIP_{8386C8AD-BABB-4F8E-B85F-3D56FC700D9A}
4
\DEVICE\NETBT_TCPIP_{146BFC43-FB56-4EB3-98D6-E72912BF265E}
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
DeviceIoControl Demo
Demo 3
Using Meddle to dump (or attack) DeviceIoControl:
https://github.com/glmcdona/meddle/tree/master/examples
/example deviceiocontrol
ntdll.dll::NtDeviceIoControlFile
Device handle to name mapping via create hooks
Dealing with more complex argument types
Capturing return values/output bu↵ers
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Malware Sandbox Demo
Malware Sandbox: Demo 4
Simple sandbox:
https://github.com/glmcdona/meddle/tree/master/examples
/example sandbox
Process forking
Traces
File read/writes
Registry changes
Network activity
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Conclusion
Thanks for attending!
https://github.com/glmcdona/meddle
Contributors welcome
Testers needed
PI:EMAIL
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Bibliography I
[1] Immunity, SPIKE,
online:http://www.immunitysec.com/resources-freesoftware.shtml
[2] CERT, Basic Fuzzing Framework (BBF), online:
http://www.cert.org/vulnerability-analysis/tools/b↵.cfm
[3] Godefroid, P., Levin, M. Y., Molnar, D. A. (2008, February).
Automated Whitebox Fuzz Testing. In NDSS (Vol. 8, pp. 151-166).
[4] Gorbunov, S., Rosenbloom, A. (2010). Autofuzz: Automated network
protocol fuzzing framework. IJCSNS, 10(8), 239.
online:http://autofuzz.sourceforge.net/
[5] David Zimmer, COMRaider,
online:https://github.com/dzzie/COMRaider
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development
Outline
Background
Meddle Framework
XRDP Fuzzing
DeviceIoControl
Sandbox
Conclusion
Bibliography II
[6] eSage Lab, IOCTL Fuzzer,
online:https://code.google.com/p/ioctlfuzzer/
[7] Google, Fuzzing at Scale,
online:http://googleonlinesecurity.blogspot.ca/2011/08/fuzzing-at-
scale.html
Geo↵ McDonald
PI:EMAIL, unaﬃliated presentation
Meddle: Framework for piggy-back fuzzing and tool development