# Meddle: Framework for Piggy-Back Fuzzing and Tool Development

## Outline
1. Background
2. Meddle Framework
3. XRDP Fuzzing
4. DeviceIoControl
5. Sandbox
6. Conclusion

## Background
Meddle is a framework designed for piggy-back fuzzing and tool development. It allows developers to integrate fuzzing into existing processes, making it easier to identify and exploit vulnerabilities in software.

## Meddle Framework
### Overview
The Meddle framework provides a robust set of tools and methods for fuzzing and testing various components of a system. It includes features such as process management, breakpoint handling, and target-specific fuzzing.

### Meddle Process
#### `Process` Class
```python
class ProcessRdp(ProcessBase):
    def __init__(self, controller, crashdump_folder, breakpoint_handler, pid, unique_identifier, verbose):
        # Specific options
        self.path_to_exe = b"C:\\Windows\\System32\\mstsc.exe"
        self.command_line = b"mstsc.exe /v:192.168.110.134"
        # Initialize
        self.initialize(...)

    def on_debugger_attached(self, Engine):
        # Set the types
        self.Engine = Engine
        self.types = meddle_types(Engine)
        # Add the targets
        Engine.AddTarget(Target_Winsock_Send)
        # Handle process loaded
        Engine.HandleProcessLoaded()
        # Resume the process. Was created suspended.
        if self.start_th >= 0:
            windll.kernel32.ResumeThread(self.start_th)
```

### Meddle Controller
#### `Controller` Class
The `Controller` class manages the overall fuzzing process, including the initialization of breakpoints and the attachment of processes.

#### Measurement Instance
```python
# Perform an initial measurement
mBreakpoint = BreakpointMeasurement()
mProcess = ProcessRdp(self, "C:\\Crash\\", mBreakpoint, -1, 0, True)
self.CEngine.AttachProcess(mProcess)
sleep(5)
measurements = mBreakpoint.measurement
mProcess.stop()
```

#### `BreakpointMeasurement` Class
```python
class BreakpointMeasurement:
    def __init__(self):
        self.measurement = []

    def breakpoint_hit(self, parent, target, event_name, address, context, th):
        [fuzz_blocks, fuzz_name] = target.breakpoint_hit(event_name, address, context, th)
        if fuzz_blocks is not None:
            # Record the possible attack
            self.measurement.append([target.__class__.__name__, fuzz_name, len(fuzz_blocks)])
```

#### Attack Instance
```python
breakpointSeed = self.generator.randint(1, 10000000)
newBreakpoint = BreakpointAttack(5, attackEventNumber, attackEventName, breakpointSeed)
newProcess = ProcessNotepad(self, "C:\\Crash\\", newBreakpoint, -1, uniqueId, False)
self.CEngine.AttachProcess(newProcess)
uniqueId += 1
```

## XRDP Fuzzing
### Overview
XRDP (X Remote Desktop Protocol) is a popular open-source implementation of the RDP protocol. Meddle can be used to fuzz XRDP to identify and exploit vulnerabilities.

### Demo 1
**Demo 1:**
- **Description:** Fuzz `ws2_32.dll::send()` calls from the RDP client during connection.
- **Success:** Crash of the XRDP server.
- **Link:** [Example Code](https://github.com/glmcdona/meddle/tree/master/examples/example_mstsc)

### RC4 Encryption
#### `Target_PrintSymbols` Class
```python
class Target_PrintSymbols(TargetBase):
    def __init__(self, Engine, ProcessBase):
        ...
        self.hook_symbols = True
        # Hook pdb symbols
        self.libraries = ["mstscax.dll"]
        ...
        self.functions_regex = re.compile(".*", re.IGNORECASE)

    def breakpoint_hit(self, event_name, address, context, th):
        print(event_name)
        return [[], []]
```

#### `Target_RDP_RC4` Class
```python
class Target_RDP_RC4(TargetBase):
    def __init__(self, Engine, ProcessBase):
        ...
        self.hook_symbols = True
        # Hook pdb symbols
        self.libraries = ["mstscax.dll"]
        ...
        self.functions = ["rc4"]

    def breakpoint_hit(self, event_name, address, context, th):
        parameters = [ ... ]
        [reg_spec, stack_spec] = self.ProcessBase.types.pascal(parameters)
        arguments = self.Engine.ParseArguments(stack_spec, reg_spec, context)
        return [arguments.GetFuzzBlockDescriptions(), "RC4 buffer"]
```

### Demo 2
**Demo 2:**
- **Description:** Fuzz `ws2_32.dll::rc4()` calls from the RDP client during connection.
- **Success:** Crash of the XRDP server.
- **Link:** [Example Code](https://github.com/glmcdona/meddle/tree/master/examples/example_mstsc)

### Vulnerabilities
- **XRDP v0.60 and below:**
  - Buffer overflow in `xrdp_mcs_recv_connect_initial()`
  - Out-of-bounds bitmap cache reference in `xrdp_cache_add_bitmap()`
  - Large number of events causing information disclosure and DOS conditions
  - Number of channels attack in `xrdp_sec_process_mcs_data_channels()`

#### Example Vulnerability
```c
static int APP_CC xrdp_mcs_recv_connect_initial(struct xrdp_mcs* self) {
    int len;
    struct stream* s;
    init_stream(s, 8192); // Fixed size buffer
    ...
    // Overflow. 'len' controlled, copied to fixed buffer
    out_uint8a(self->client_mcs_data, s->p, len);
}
```

## DeviceIoControl
### Overview
`DeviceIoControl` is a Windows API function that facilitates communication between user-mode and kernel-mode drivers. It can be used to send control codes and data to device drivers.

### Demo 3
**Demo 3:**
- **Description:** Using Meddle to dump or attack `DeviceIoControl`.
- **Link:** [Example Code](https://github.com/glmcdona/meddle/tree/master/examples/example_deviceiocontrol)
- **API Function:**
  ```c
  BOOL WINAPI DeviceIoControl(
      HANDLE hDevice,
      DWORD dwIoControlCode,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped
  );
  ```

### Devices Communication
- **Example Output:**
  - \??\Nsi: 728
  - \??\MountPointManager: 64
  - \Device\LanmanDatagramReceiver: 20
  - \Device\KsecDD: 16
  - \Device\Afd\Endpoint: 12
  - \??\C: 6
  - \??\NvAdminDevice: 4
  - \??\C:\Users: 4
  - \DEVICE\NETBT_TCPIP_{09AEF42F-B3C7-4854-B4FB-D673B5AD51D5}: 4
  - \??\C:\Users\glmcdona\Documents\Visual Studio 2012\Projects: 4
  - \??\C:\Users\glmcdona\Documents: 4
  - \DEVICE\NETBT_TCPIP_{225A69B0-2055-4DF4-87CB-F3AC50134FE2}: 4
  - \DEVICE\NETBT_TCPIP_{8386C8AD-BABB-4F8E-B85F-3D56FC700D9A}: 4
  - \DEVICE\NETBT_TCPIP_{146BFC43-FB56-4EB3-98D6-E72912BF265E}: 4

## Sandbox
### Overview
A sandbox is a security mechanism that isolates running programs, providing a safe environment to execute potentially malicious code.

### Malware Sandbox: Demo 4
- **Description:** A simple sandbox using Meddle.
- **Link:** [Example Code](https://github.com/glmcdona/meddle/tree/master/examples/example_sandbox)
- **Features:**
  - Process forking
  - Traces
  - File read/writes
  - Registry changes
  - Network activity

## Conclusion
Thank you for attending this presentation on the Meddle framework. For more information and to contribute, visit the [GitHub repository](https://github.com/glmcdona/meddle). We welcome contributors and testers.

## Bibliography
1. Immunity, SPIKE, online: <http://www.immunitysec.com/resources-freesoftware.shtml>
2. CERT, Basic Fuzzing Framework (BBF), online: <http://www.cert.org/vulnerability-analysis/tools/bbf.cfm>
3. Godefroid, P., Levin, M. Y., Molnar, D. A. (2008, February). Automated Whitebox Fuzz Testing. In NDSS (Vol. 8, pp. 151-166).
4. Gorbunov, S., Rosenbloom, A. (2010). Autofuzz: Automated network protocol fuzzing framework. IJCSNS, 10(8), 239. online: <http://autofuzz.sourceforge.net/>
5. David Zimmer, COMRaider, online: <https://github.com/dzzie/COMRaider>
6. eSage Lab, IOCTL Fuzzer, online: <https://code.google.com/p/ioctlfuzzer/>
7. Google, Fuzzing at Scale, online: <http://googleonlinesecurity.blogspot.ca/2011/08/fuzzing-at-scale.html>

---  
Geo McDonald  
PI:EMAIL, unaffiliated presentation