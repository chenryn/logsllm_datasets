tially a noncapturing group, with the extra job of refusing to backtrack. The question
mark is not a quantifier; the opening bracket simply consists of the three characters
“( (possessive) to 123abc 456, \d+)\b> (possessive) to 123abc 456, the word boundary matches at the
start of the subject. The regex engine enters the atomic group, and \d+ matches 123.
Now the engine exits the atomic group. At this point, the backtracking positions re-
membered by  is merely syntactic sugar
for x+), and both are implemented in exactly the same way. Whether the engine
never remembers backtracking positions or throws them away later is irrelevant for the
final outcome of the match attempt.
Where possessive quantifiers and atomic grouping differ is that a possessive quantifier
applies only to a single regular expression token, whereas an atomic group can wrap a
whole regular expression.
\w++\d++> and \w+\d+) are not the same at all. \+)(?>\d+)), will not match abc123.  fails. Without any remembered backtracking positions, the
match attempt fails.
(?>\+\d+)> has two greedy quantifiers inside the same atomic group. Within the
atomic group, backtracking occurs normally. Backtracking positions are thrown away
only when the engine exits the whole group. When the subject is abc123, \a+> matches
abc123. The greedy quantifier does rememberbacktracking positions. When \d+ fails
to match, \w+) gives up one character.  then matches 3. Now, the engine exits the
atomic group, throwing away all backtracking positions remembered for  and
\d+. Since the end of the regex has been reached, this doesn’t really make any differ-
ence. An overall match is found.
If the end had not been reached, as in \+\d+)\d+>, we would be in the same sit-
uation as with , The second \d+ has nothing left to match at the end of the
subject. Since the backtracking positions were thrown away, the regex engine can only
declare failure.
Possessive quantifiers and atomic grouping don’t just optimize regular expressions.
They can alter the matches found by a regular expression by eliminating those that
would be reached through backrracking.
aeu o udnou8 ouoe pue siauenb aaissasod sn oi moq saous adpa s
minor optimizations, which may not even show any difference in benchmarks. The
next recipe will showcase how atomic grouping can make a dramatic difference.
80 |Chapter2: Basic RegularExpresinSkills
---
## Page 97
See Also
Recipe 2.12 shows the different altermation operators supported by regular expressions.
Recipe 2.15 explains how to make sure the regex engine doesn’t needlessly try different
ways of matching a group.
2.15PreventRunaway Repetition
Problem
Use a single regular expression to match a complete HTML file, checking for properly
nested html, head, title, and body tags. The regular expression must fail efficiently on
HTML files that do not have the proper tags.
Solution
(?>,*?)(?>,*?)(?>,*?)
(?>,*?)(?>,*?]*>)(?>,*?).*?
Regexoptions: Case insensitive, dot matches line breaks
Regexflavers: .NET, Java, PCRE, Perl, Ruby
JavaScript and Python do not support atomic grouping. There is no way to eliminate
needless backtracking with these rwo regex flavors. When programming in JavaScript
or Python, you can solve this problem by doing a literal text search for each of the tags
one by one, searching for the next tag through the remainder of the subject text after
the one last found.
Discussion
The propersolution to this problem is more easily understood if we start from this naive
solution:
,*?.*?,*?
*?,*?]*>,*?,*?
Regexoptions: Case insensitive, dot matches line breaks
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
When you test this regex on a proper HTML file, it works perfectly well.  is missing.
2.15 Prevent Runaway Repetitien | 81
---
## Page 98
Imagine the regex engine has matched all the preceding tags and is now busy expanding
the last  *?. Since ) can never match, the  ,*?> expands all the way to the end
of the file. When it can no longer expand, it fails.
But that is not the end of the story. The other six ,*?> have all remembered a back-
tracking position that allows them to expand further. When the last *?> fails, the one
before expands, gradually matching ≤/body>. That same text was previously matched
by the literal > in the regex. This  *?> too will expand all the way to the end
of the file, as will all preceding lazy dots. Only when the first one reaches the end of
the file will the regex engine declare failure.
This regular expression has a worst-case complexity? of O(n?), the length of the subject
text to the seventh power. There are seven lazy dots that can potentially expand all the
way to the end of the file. If the file is twice the size, the regex can need up to 128 times
as many steps to figure out it doesn’t match.
We call this catastrophtic backzracking. So much backtracking occurs that the regex
either takes forever or crashes your application. Some regex implementations are clever
and will abort runaway match attempts early, but even then the regex will still kill your
application’s performance.
Catastrophic backtracking is an instance of a phenomenon known as a
combinatorial explosion, in which several orthogonal conditions inter-
regex is a Cartesiar product of the various repetition operators.
The solution is to use atomic grouping to prevent needless backtracking. There is no
need for the sixth  to expand after > has matched. If > fails, ex-
panding the sixth lazy dot will not magically produce a closing htnl tag.
To make a quantified regular expression token stop when the following delimiter
matches, place both the quantified part of the regex and the delimiter together in an
atomic group: (?> *?). Now the regex engine throws away all the matching
positions for *?> when > is found. If  later fails, the regex
engine has forgotten about , *?>, and no further expansion will occur.
If we do the same for al the other *? in the regex, none of them willexpand further.
Although there are still seven lazy dots in the regex, they will never overlap. This reduces
the complexity of the regular expression to O(n), which is linear with respect to the
length of the subject text. A regular expression can never be more efficient than this.
3. Complexity of computer algorithms is usually described using the *big O notation.° The article at htrp
//er.wikipedla.org/uikwTime_coplexty provides a good overview of common time complexities for
computer algorithms.
82 | Chapter 2: Basic Regular Expression Skils
---
## Page 99
Variations
uoA+(+x+x)  “xom 1e pexq odonseo as o sea xea no j
xxxxx. Ifit fails quickly, add one x to the subject. Repeat this until the regex starts
to take very long to match or your application crashes. It won’t take many more x
characters, unless you're using Perl.
Of the regex flavors discussed in this book, only Perl is able to detect that the regular
expression is too complex and then abort the match attempt without crashing.
The complexity of this regex is O(2"). When cat is furry, the only
valid match should be cat.
Solution
(?)\w+(?=)
Regex options: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby 1.9
JavaScript and Ruby 1.8 support the lookahead (?=), but not the lookbehind
(?)>.
Discussion
Lookaround
The four kinds of lookaround groups supported by moderm regex flavors have the spe-
cial property of giving up the text matched by the part of the regex inside the look-
around. Essentially, lookaround checks whether certain text can be matched without
actually matching it.
Lookaround that looks backward is called lookbehtind. This is the only regular expres-
sion construct that will traverse the text from right to left instead of from left to right.
The syntax for positive lookbehtind is ),
always works.
Lookbehind checks to see whether the text inside the lookbehind occurs immediately
to the left of the position that the regular expression engine has reached. If you match
)> against My cat is furry, the lookbehind will fail to match until the
regular expression starts the match attempt at the letter c in the subject. The regex
engine then enters the lookbehind group, telling it to look to the left. > matches to
the left of c. The engine exits the lookbehind at this point, and discards any text matched
by the lookbehind from the match attempt. In other words, the match-in-progress is
back at where it was when the engine entered the lookbehind In this case, the match-
in-progress is the zero-length match before the c in the subject string. The lookbehind
only tests or asserts that > can be matched; it does not actually match it. Lookaround
constructs are therefore called zero-length assertions.
After the lookbehind has matched, the shorthand character class  is not inside any kind of
84 |  Chapter 2: Basic Regular Expresion Skills
---
## Page 101
lookaround or group, and soit matches the text cat normally. We say that ^w+ matches
and corsaomes cat, whereas lookaround can match something but can never consume
anything.
mally traverses the text, s called lokead. Lookahead is equally suportedby all regex
Lookaround that looks forward, in the same direction that the regular expression nor
flavors inthis book. The syntax for positive lookahead is (?)The threecharacters
(?=) form the opening bracket of the group. Everything you can use in a regular ex-
pression can be used inside lookahead, here represented by (--).
“Axxn5eAw5 pu se=)+(=>)>1 m\>au/
the regex engine enters the lookahead. The only special behavior for the lookahead at
this point is that the regex engine remembers which part of the text it has matched so
far, associating it with the lookahead.  is then matched normally. Now the regex
engine exits the lookahead. The regex inside the lookahead matches, so the lookahead
itself matches. The regex engine discards the text matched by the lookahead, by re-
Storing the match-in-progress it remembered when entering the lookahead. Our overall
match-in-progress is back at cat. Since this is also the end of our regular expression,
cat becomes the final match result.
Negative lookaround
(?!), with an exclamation point instead of an equals sign, is negative lookahead.
Negative lookahead works just like positive lookahead, except that whereas positive
lookahead matches when the regex inside the lookahead matches, negative lookahead
matches when the regex inside the lookahead fails to match.
The matching process is exactly the same. The engine saves the match-in-progress when
entering the negative lookahead, and attempts to match the regex inside the lookahead
normally. If the sub-regex matches, the lookahead fails, and the regex engine back-
tracks. If the sub-regex fails to match, the engine restores the match-in-process and
proceeds with the remainder of the regex.
Similarly, (?, but nothing more
lengths inside lookbehind, as long as the length of each altermative is constant. They
complex than that.
Intermally, PCRE and Ruby 1.9 expand this into six lookbehind tests. First, they jump
back three characters to test onetwo, then four characters to test graylgrey, then
five to test <three), and finally nine to test <forty-two),
Java takes lookbehind one step further. Java allows any finite-length regular expression
inside lookbehind. This means you can use anything except the infinite quantifiers *),
+), and {42,  inside lookbehind. Internally, Java’s regex engine calculates the mini-
mum and maximum length of the text that could possibly be matched by the part of
the regex in the lokbehind. It then jumps back the minimum number of characters,
and applies the regex in the lookbehind from left to right. If this fails, the engine jumps
back one more character and tries again, until either the lookbehind matches or the
maximum number of characters has been tried.
If all this sounds rather inefficient, it is. Lookbehind is very convenient, but it won’t
break any speed records. Later, we present a solution for JavaScript and Ruby 1.8,
which don’t support lookbehind at all. This solution is actually far more efficient than
using lookbehind.
The regular expression engine in the .NET Framework is the only one in the world+
that can actually apply a full regular expression from right to left. NET allows you to
use anything inside lookbehind, and it will actually apply the regular expression from
right to left. Both the regular expression inside the lookbehind and the subject text are
scanned from right to left.
Matching the same text twice
If you use lookbehind at the start of the regex or lookahead at the end of the regex, the
net effect is that you're requiring something to appear before or after the regex match,
without including it in the match. If you use lookaround in the middle of your regular
expression, you can apply multiple tests to the same text.
4. RegexBuddy’s regex engine also allows a fullregex inside lookbehind, but does not (yer) have a feature
similar to .NET°s Regex0ptions,RightToLeft to reverse the whole regular ecxpression,
86 | Chapter 2: Basic Regular Expresion Skills
---
## Page 103
In "Flavor-Specific Features" on page 36 (a subsection of Recipe 2.3), we showed how
to use character class subtraction to match a Thai digit. Only .NET and Java support
character class subtraction.
A character is a Thai digit ifit is both a Thai character (any sort) and a digit (any script).
With lookahead, you can test both requirements on the same character:
(?=\p{Tha1})\p{N)
Regexoptions: None
Regexflaver: PCRE, Perl, Ruby 1.9
This regex works only with the thre flavors that support Unicode scripts, as we explain
in Recipe 2.7. But the principle of using lookahead to match the same character more
than once works with all flavors discussed in this book.
When the regular expression engine searches for <(?=\p{Thal})\p(N}, it starts by en-