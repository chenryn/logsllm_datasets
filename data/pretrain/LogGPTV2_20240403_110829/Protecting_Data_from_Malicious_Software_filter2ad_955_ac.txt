as long as an administrator is not executing the malicious 
code,  it  will  be  unable  to  interfere  with  any  kernel 
modifications  that  we  make.    Additionally  the  use  of  a 
device  driver  provides  us  access  to  internal  operating 
system  functions  and  data  structures  not  accessible  from 
user mode.   
In  Windows  NT,  user  applications  invoke  system 
services by executing an interrupt instruction.  Code in the 
kernel  takes  control  of  the  machine  in  response  to  the 
interrupt  and  performs  some  activity  for  the  calling 
process  before  relinquishing  control.    A  kernel  entity 
known as the dispatcher initially responds to the interrupt 
request, determines the nature of the interrupt, and calls a 
function  to  handle  the  request.    Two  tables  in  kernel 
memory 
parameter 
requirements  of  all  functions  available  to  the  dispatcher.  
One  table  specifies  handlers  for  user  requests;  the  other 
specifies  handlers  for  requests  originating  within  the 
kernel.  The calling process places information about the 
requested  system  service  on  the  stack  along  with  any 
parameters required for completing the operation. 
locations 
and 
describe 
the 
Our  method  of  controlling  file  manipulation  relies  on 
our ability to instruct the dispatcher to call a function that 
we  have  written  when  a  user  process  invokes  certain 
system  services.    This  approach  requires  constructing  a 
device  driver  that  is  loaded  into  the  kernel  either 
dynamically  or  as  part  of  the  boot  sequence.    When  our 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply. 
function. 
driver  is  loaded  it  modifies  an  entry  in  the  table that the 
dispatcher relies on for handling interrupt instructions.  In 
our  case,  we  are  interested  in  intercepting  calls  to  the 
ZwCreateFile 
the 
dispatcher’s table results in a call to our function instead 
of  the  intended  call  to  ZwCreateFile.    Our  function  will 
be called whenever a user-mode application tries to get a 
handle to a file.  The signature of our function is identical 
to  that  of  ZwCreateFile,  so  the  kernel interface exported 
to applications is not altered. 
  The  modification  of 
  If  confirmation 
is  not  required,  or 
Once the dispatcher calls our function the FileMonster 
determines  whether  or  not  user  confirmation  will  be 
required. 
if 
confirmation  is  granted,  then  we  invoke  the  original 
ZwCreateFile  with  the  same  parameters  as  the  calling 
process.    If  the  user  elects  to  deny  the  request,  then  we 
return  a  value  indicating  that  the  function  call  has  failed 
and set our flags to indicate that access has been denied.  
The application will not be able to differentiate between a 
function  failure  produced  by  the  FileMonster  and  a 
normally  occurring  error.    It  will  handle  this  error  the 
same way that it would handle an attempt to access a file 
by a user that does not have permission to do so.  In some 
cases this results in an application that attempted to open 
a  file  with  read/write  permission  to  default  to  trying  to 
open it as a read only file. 
4.2. Configuration 
FileMonster’s  configuration  settings  are  protected 
through the use of secure desktops as discussed in section 
3.1.    This  is  necessary  to  prevent  malicious  code  from 
changing  the  configuration  itself.    If  the  configuration 
program were not run on a secure desktop, then malicious 
code  could  send  messages  to  the  configuration  program 
tricking  it  into  making  unwanted  policy  changes.    The 
settings  are  passed  from  the  user-level  configuration 
program  to  our  kernel-level  device  driver  through  our 
device  driver’s  interface.    We  can  leverage  Windows 
NT’s  own  security  mechanisms  to  ensure  that  only  a 
process  running  with administrative privileges is allowed 
to pass information to our device driver.  The FileMonster 
configuration program is implemented as a Windows NT 
service that runs with administrative privileges.  Figure 3 
is  a  screen  shot  of  one  of  the  FileMonster  configuration 
windows. 
Figure 3. Configuring the FileMonster 
To aid users in configuring the FileMonster we provide 
a  mechanism  for  assigning  default  policies.    The  current 
incarnation  of  this  tool  enables  users  to  choose  one  of 
three  initial  policies:  secure  policy,  basic  policy,  or  no 
policy.  The secure policy establishes confirm on read and 
confirm  on  write  policies  for  some  of  the  most  common 
Windows  file  formats.    The  basic  policy  extends  the 
secure  policy  to  include  associations  for  commonly 
trusted applications.  These applications are located using 
information  stored  in  the  registry  and  the  policy  is 
automatically  built  for  the  user.    The  final  option  is  to 
begin with no policy and to build one from scratch.  In all 
cases the policies can be fully modified from their default 
settings.    Keep  in  mind  that  we  are  only  concerned  with 
protecting  files  that  will  be  storing  important  user  data.  
This is a small subset of the file types actually used in the 
Windows environment.  To get an idea of how many file 
types are included in a typical policy, think of how many 
applications you use to create data that you would like to 
protect against damage or disclosure.  For the users in our 
test  environment  we  found  this  number  to  be  below  a 
dozen file types. 
5. Related work 
During the last decade there has been a lot of interest 
in  the implementation and application of system call and 
function  wrapping  technologies.    Some  of  this  research 
that 
has  focused  on  providing  flexible  frameworks 
facilitate 
the  construction  of  systems  such  as 
the 
FileMonster.    Other  research  has  produced  prototype 
systems 
the  problems  of  controlling 
malicious software within a Discretionary Access Control 
environment.    This  section  will  examine  this  body  of 
research and identify where the FileMonster fits into this 
collection of related work. 
that  address 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply. 
5.1. Wrapping techniques 
Intercepting function calls or system calls is commonly 
known  as  wrapping.    The  basic  idea  of  a  wrapper  is  to 
provide  functionality  that  will  be  called  in  place  of  the 
original  target.    This  wrapper  can  perform  any  function 
including calling the original target function.  
library 
that  facilitates 
There  are  many  potential  uses  for  wrappers  including 
extending  the  capabilities  of  an  application,  providing 
facilities for auditing, and restricting resource usage.  One 
of the key difficulties in wrapping is developing a system 
that  will  work  with  applications  without  requiring  the 
recompiling or relinking of this software.  In [2] and [10] 
the  authors  present  user-level  wrapping  techniques  for 
Microsoft  Windows  operating  systems.    Hunt  et  al. 
describe  a 
the  wrapping  of 
Windows  API  calls  through  the  injection  of  trampoline 
code  that  redirects  function  calls  at  run-time.    Balzer 
describes  a  similar  system  that  has  been  additionally 
hardened against potential attackers.  The goal of Balzer’s 
work  was  to  develop  non-bypassable  wrappers.    This 
means  that  a  malicious  program  cannot  remove  or 
circumvent a wrapper even if it is aware that it is present.  
Correctly implementing a user-level wrapping facility that 
cannot  be  bypassed  by  malicious  code  is  extremely 
complex  due  to  the  myriad  of  ways  that  a  file  can  be 
accessed  (these  are  all  reduced  to  the  ZwCreateFile 
system  call  at  the kernel level).  We chose to implement 
our system at the kernel level because it provides us with 
the greatest degree of control over the file system. 
from 
In  [15,  8,  and  6]  the  authors  build  non-bypassable 
wrapper systems by intercepting system calls from within 
the Linux, Solaris, and FreeBSD/Solaris operating system 
kernels respectively.  Like our approach, these techniques 
rely on the operating system’s own security to protect the 
wrappers 
tampering  by  user-level  processes.  
Mitchem  et  al.  discuss  the  usefulness  of  their  system  for 
secure auditing or to provide a fine-grained access control 
mechanism, but at this time they have not concentrated on 
the building of either of these systems.  Unfortunately our 
decision 
the  Windows  NT/2000  platform 
eliminated  the  possibility  of  reusing  these  prototypes 
directly,  however  the  work  that  they  performed  was 
helpful in designing our own interception mechanism.  
target 
to 
5.2. Application Sandboxes 
An application sandbox is an environment that restricts 
a  process’s  resource  usage.    The resources that might be 
limited include the file system, network access, and even 
CPU  and  memory  utilization.    Sandboxing  is  a  powerful 
technique 
for  confining  untrusted  and  potentially 
malicious  software.    Sandboxing  systems  are  typically 
built around some sort of wrapping technology that gives 
them the fine-grained level of control necessary for them 
to be effective. 
One of the most common examples of a sandbox is in 
the  security  built  into  the  Java  virtual  machine.    In  [14] 
the  authors  discuss  Java’s  sandbox  security  model  and 
describe  various  attacks  against  it.    Sandboxes  are 
particularly  useful  for  containing  programs  that  have  a 
high likelihood of containing malicious code because they 
can  be  used 
to  severely  restrict  an  application’s 
capabilities.    Mobile  code  is  often  considered  to  be 
untrustworthy, and is therefore an excellent candidate for 
sandboxing. 
Unlike  Java,  most  operating  systems  do  not  natively 
support  application  sandboxing.    A  number  of  research 
projects  have  investigated  the  use  of  sandboxes  for 
restricting applications on UNIX and Windows operating 
systems.    In  [17]  and  [9],  Wagner  et  al.  introduce  the 
Janus prototype that can be used to sandbox applications 
on  the  Linux  operating  system.    While  Janus  focuses  on 
restricting access to file system and network resources, in 
[5] the authors concentrate on limiting access to memory 
and CPU resources.   
The work performed by Berman et al in [1] bears some 
similarity to our own.  In this paper the authors present a 
process-specific file protection mechanism that they have 
implemented  for  the  UNIX  operating  system.    Their 
motivation  for  the  development  of  this  system  is  very 
similar  to  our  own,  however  like  most  other  sandbox 
efforts  they  focus  their  attention  on  applications,  not  on 
the data that is to be protected.  In each of the sandboxing 
approaches that we have described, untrusted applications 
must  explicitly  be  executed  within  a  protection 
environment  and  file/directory  permissions  must  be 
specified  at  the  time  of  execution.    In  our  opinion  the 
extra  effort  required  to  run  an  application  within  these 
environment  makes 
that  a  user  would 
consistently choose to do so. 
it  unlikely 
in 
that 
system 
an  operating 
Though  it  was  never  developed,  in  [13]  Karger 
describes  a  system  for  controlling  potentially  malicious 
software 
supports 
discretionary access control.  His proposal was to build a 
system that would use a file name translation mechanism 
to  identify  and  prevent  anomalous  resource  access.  
Similar  to  our  approach,  Karger  recommended  involving 
the  user  in  arbitrating  security  decisions  that  the  system 
itself  could  not  make.    As  it  was  written,  the  proposed 
system  was  more  appropriate  for  command-line  driven 
operating  systems,  as  of  course  was  appropriate  for  this 
date of publication. 
tool  was 
Macintosh users may be familiar with the GateKeeper 
utility  written  by  Chris  Johnson  and  described  at  [11].  
to  be  a  generic  virus 
This 
detection/protection  mechanism 
by 
monitoring  an  application’s  access  to  system  resources.  
Whenever  it  detected  an  access  that  was  considered 
that  worked 
intended 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply. 
suspect  it  would  query  the  user  for  confirmation  before 
continuing.    The  approach  that  this  tool  takes  is  very 
similar to our own, however the resources that it monitors 
are rather different.  The GateKeeper tool was concerned 
mainly  with  the  protection  of  system  files  from  viruses, 
not  with  the  defense  of  user’s  documents.    In  a  similar 