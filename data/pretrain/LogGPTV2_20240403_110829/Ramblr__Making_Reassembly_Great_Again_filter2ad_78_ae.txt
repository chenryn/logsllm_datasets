### Comparative Evaluation - Correctness

**Overview:**
Ramblr Fast demonstrates an extremely low misclassification rate, as expected, outperforming the standard Ramblr in this regard. This section provides a detailed comparative evaluation of Ramblr, Ramblr Fast, and Uroboros, focusing on their correctness across different datasets and optimization levels.

**Evaluation Methodology:**
We compared Ramblr, Ramblr Fast, and Uroboros by running each tool on various datasets. The evaluation involved:
1. Running Uroboros, Ramblr, and Ramblr Fast on the binaries.
2. Executing test cases against the reassembled binaries to check for functional correctness.
3. Compiling the failure rates, which are presented in Table V.

**Dataset and Optimization Levels:**
- **Architectures:** i386, x86_64
- **Datasets:** CGC, Coreutils
- **Optimization Levels:** O0, O1, O2, O3, Os, Ofast

**Results:**

| Arch | Dataset  | Opt. Level | Total References | False Negatives | False Negative % | False Positives | False Positive % |
|------|----------|------------|------------------|-----------------|------------------|-----------------|------------------|
| i386 | CGC      | O0         | 500682           | 12112           | 2.39             | 0               | 0                |
| i386 | CGC      | O1         | 501613           | 12120           | 2.39             | 0               | 0                |
| i386 | CGC      | O2         | 505409           | 12064           | 0.0006           | 0               | 0                |
| i386 | CGC      | O3         | 505813           | 0               | 0                | 3               | 0.0021           |
| i386 | CGC      | Os         | 469512           | 0               | 0                | 0               | 0                |
| i386 | CGC      | Ofast      | 505828           | 0               | 0                | 0               | 0                |
| i386 | Coreutils| O0         | 128065           | 0               | 0                | 0               | 0                |
| i386 | Coreutils| O1         | 124555           | 0               | 0                | 0               | 0                |
| i386 | Coreutils| O2         | 122215           | 0               | 0                | 0               | 0                |
| i386 | Coreutils| O3         | 192863           | 0               | 0                | 0               | 0                |
| i386 | Coreutils| Os         | 83600            | 0               | 0                | 0               | 0                |
| i386 | Coreutils| Ofast      | 193317           | 0               | 0                | 0               | 0                |
| x86_64 | Coreutils| O0         | 125005           | 0               | 0                | 0               | 0                |
| x86_64 | Coreutils| O1         | 123156           | 0               | 0                | 0               | 0                |
| x86_64 | Coreutils| O2         | 113651           | 0               | 0                | 0               | 0                |
| x86_64 | Coreutils| O3         | 171302           | 0               | 0                | 0               | 0                |
| x86_64 | Coreutils| Os         | 82592            | 0               | 0                | 0               | 0                |
| x86_64 | Coreutils| Ofast      | 171849           | 0               | 0                | 0               | 0                |

**Table IV: Symbolization ground truth for different approaches across different datasets.** Misclassification of symbols is a primary cause of reassembly failures, and we measure the rate at which symbols are misclassified against the ground truth provided by the linker during compilation.

**Key Findings:**
- Both Ramblr and Ramblr Fast significantly outperform Uroboros in terms of correctness.
- For unoptimized (O0) and minimally optimized (O1) binaries, Uroboros breaks 22.64% of the Coreutils binaries, while Ramblr and Ramblr Fast break none.
- With higher optimization levels, Uroboros' failure rate increases to 56.61%, whereas Ramblr and Ramblr Fast maintain a 100% success rate.
- On the CGC dataset, Uroboros breaks 15% to 25% of optimized binaries, requiring manual inspection and repair. Ramblr, on the other hand, achieves a success rate of over 98% across all levels, and over 99% for optimization levels below O3, with 100% for unoptimized binaries.

**Correctness of Uroboros:**
The high failure rate of Uroboros on the Coreutils dataset was unexpected, as it contradicts the claims made in the Uroboros paper. Our investigation revealed that the issue stems from differing versions of GCC. Uroboros was evaluated on binaries compiled with GCC 4.6, while our binaries were compiled with GCC 5.4.1. The newer version of GCC introduces inter-procedural optimizations and other changes that Uroboros struggles to handle. We reproduced the results using GCC 4.6, but this highlights the fragility of the Uroboros approach.

**Opt-out Case Study:**
Ramblr successfully detects and opts out of pointer encryption and decryption in KPRCA_00044, while Ramblr Fast fails to detect it, resulting in a broken reassembled binary. Ramblr is the first binary reassembly engine with this detection capability, ensuring that only one binary out of the entire dataset is broken.

**Summary:**
- **Uroboros:** High failure rates, especially with higher optimization levels.
- **Ramblr and Ramblr Fast:** Consistently high success rates, with Ramblr offering additional opt-out capabilities for complex scenarios.

This comprehensive evaluation underscores the robustness and reliability of Ramblr and Ramblr Fast in binary reassembly tasks.