# Administration in Role-Based Access Control

**Authors:**
- Ninghui Li
- Ziqing Mao

**Affiliations:**
- Center for Education and Research in Information Assurance and Security
- Department of Computer Science
- Purdue University
- West Lafayette, IN 47907-2107, USA
- Email: {ninghui, zmao}@cs.purdue.edu

## Abstract
The administration of large-scale Role-Based Access Control (RBAC) systems remains a challenging and open problem. We propose a principled approach to designing and analyzing administrative models for RBAC. We identify six key design requirements for these models, motivated by three fundamental principles for security mechanisms: (1) flexibility and scalability, (2) psychological acceptability, and (3) economy of mechanism. We use these requirements to analyze several existing approaches to RBAC administration, including ARBAC97 [21, 23, 22], SARBAC [4, 5], and the RBAC system in Oracle DBMS. Based on our analysis and the lessons learned, we design UARBAC, a new family of administrative models for RBAC that offers significant advantages over existing models.

## 1. Introduction
Role-Based Access Control (RBAC) has become a solid foundation for modern security administration. However, managing large RBAC systems, which may involve tens of thousands of users and hundreds of roles, remains a challenging task. For instance, a case study with Dresdner Bank, a major European bank, resulted in an RBAC system with approximately 40,000 users and 1,300 roles [26]. In such large systems, administration must be decentralized, as it is impractical for a single, fully-trusted administrator (referred to as the System Security Officer, or SSO) to manage the entire system. Therefore, delegation, or decentralization, is a crucial aspect of RBAC administrative models.

While RBAC itself is well-studied, the understanding of its decentralized administration is still in its early stages. There is a significant gap between the theoretical models proposed by researchers, such as the ARBAC family [21, 23, 22, 25, 19] and SARBAC [4, 5], and the practical requirements derived from real-world deployments, such as those described in [12, 26]. One of the most critical issues in RBAC administration is defining administrative domains. When the SSO delegates administrative privileges to partially-trusted administrators, these privileges must be limited to specific portions of the RBAC state, known as administrative domains. Both the ARBAC family and SARBAC define administrative domains based on role hierarchies, but they differ in how these hierarchies are used.

Kern et al. [12] argue that using role hierarchies to define administrative domains can be problematic in real-life scenarios. The criteria for defining role hierarchies and administrative domains often differ, with the former based on job functions and the latter on organizational structure. As observed by many authors, role hierarchies do not always reflect the organizational structure [15, 16, 12]; two roles in the same organizational unit may not be related by the role hierarchy. Kern et al. [12] aim to "reconcile the requirements of actual users with research" and provide feedback to researchers on the problems encountered in practice.

This paper addresses the gap between existing formal models of RBAC administration and the practical requirements. We propose a principled approach to bridge this gap by identifying six design requirements for RBAC administrative models. These requirements are motivated by three principles for designing security mechanisms: (1) flexibility and scalability, (2) psychological acceptability, and (3) economy of mechanism. Using these requirements, we analyze the ARBAC family [19, 21, 22, 25], SARBAC [4, 5], and the RBAC administration approach implemented in Oracle Database Management System (DBMS).

Based on our analysis and the lessons learned, we design UARBAC, a new family of administrative models for RBAC. UARBAC includes a basic model and one extension, and it is the first formal model to adequately address the challenges of administering large RBAC systems.

Our principled approach contrasts with the example-based approach used in developing existing formal models of RBAC. In the example-based approach, design decisions are justified through a few examples and their impact. While examples are important, the analysis must be guided by high-level security principles. Without such guidance, debates about the desirability of certain design decisions can arise. For example, some side effects of administrative operations are considered anomalous in ARBAC97, while Crampton [4, 5] argues that they are not. Such issues cannot be resolved satisfactorily without a set of guiding principles. While not everyone will agree with every principle, we believe it is valuable to present a set of principles for community discussion and debate.

The rest of this paper is organized as follows. Section 2 provides background on roles and role hierarchies. Section 3 describes three existing administrative models. Section 4 discusses the design principles and requirements. Section 5 presents UARBAC. Section 6 discusses related work, and Section 7 concludes the paper.

## 2. Roles and Role Hierarchies
RBAC introduces the concept of roles as an intermediary layer between users and permissions. Roles are created based on job functions and user qualifications. Permissions, which are privileges to access resources, are assigned to roles according to job requirements and user entitlements. Users gain permissions by being members of roles, which are assigned based on their job responsibilities and qualifications.

Roles can be organized into a hierarchy, which defines a partial order among them. We denote \( r1 \prec r2 \) to indicate that \( r1 \) is dominated by \( r2 \), meaning \( r1 \) is more junior than \( r2 \), and \( r2 \) is more senior than \( r1 \). This implies that \( r2 \) inherits all permissions assigned to \( r1 \), and all users who are members of \( r2 \) are also members of \( r1 \).

Several existing approaches to RBAC administration use role hierarchies to specify administrative domains. Figure 1 illustrates three types of role hierarchies found in the literature:
- **Figure 1(a)**: A lattice-structured hierarchy, which is well-structured and has a senior-most role (Dir) and a junior-most role (E).
- **Figure 1(b)**: An inverted tree structure, where roles towards the bottom are more generic, and specialized roles inherit permissions from generic roles.
- **Figure 1(c)**: A layered role hierarchy, taken from a real-world example, where functional roles are created by asset managers, and business roles are created by role administrators.

## 3. Existing Administrative Models for RBAC
In this section, we provide an overview of three existing approaches to RBAC administration: the ARBAC family, SARBAC, and the administrative model in Oracle DBMS. We present these approaches in sufficient detail to illustrate the principles of designing an RBAC administrative model. We will compare these approaches with UARBAC in Section 5.4.

### 3.1 ARBAC97
ARBAC97 [21, 23, 22] is the first comprehensive administrative model for RBAC, based on the RBAC96 models [24]. It assumes a set of administrative roles, \( AR \), disjoint from the set of normal roles. Only members of these administrative roles can perform administrative operations.

ARBAC97 consists of three sub-models:
- **URA97**: Manages user-role assignments.
- **PRA97**: Manages permission-role assignments.
- **RRA97**: Manages role-role assignments.

All three sub-models rely on the concept of role ranges, which serve as administrative domains. A role range specifies a set of roles, and an open role range is denoted as \( (x, y) \), where \( x \) and \( y \) are normal roles. By definition, \( (x, y) = \{ r \mid x \prec r \land r \prec y \} \). Ranges in URA97 and PRA97 can be open, closed, or half-open.

**URA97** introduces two relations: `can assign` and `can revoke`. Each member of `can assign` is a tuple \( \langle a, \phi, G \rangle \), where \( a \) is an administrative role, \( \phi \) is a pre-condition (a propositional logic formula with roles as atoms and logical connectives), and \( G \) is either a role range or a set of explicitly listed roles. For example, \( \langle a, r1 \lor (\neg r2 \land r3), G \rangle \) means that a member of \( a \) can assign a user \( u \) to a role \( r \in G \) if \( u \) is a member of \( r1 \), or \( u \) is not a member of \( r2 \) but is a member of \( r3 \). Each tuple in `can revoke` is of the form \( \langle a, G \rangle \), indicating that a member of \( a \) can revoke a user from a role in \( G \).

**PRA97** introduces similar relations `can assignp` and `can revokep` for managing permissions.

**RRA97** introduces five relations: `can assigna`, `can revokea`, `can assigng`, `can revokeg`, and `can modify`. The `can modify` relation specifies how the role hierarchy may change. Each member of `can modify` is a tuple \( \langle a, G \rangle \), where \( a \) is an administrative role, and \( G \) is an encapsulated range, which is an open range \( (x, y) \) satisfying specific conditions to maintain encapsulation.

To avoid side effects outside the specified range, ARBAC97 limits the operations allowed by the tuples in `can modify`. For example, creating a new role requires specifying a parent and child role, and only the SSO can create roles without a parent or child, or outside a create range. Operations like deleting a role, inserting an edge, or deleting an edge should not violate the encapsulation of any authority range.

Some issues with ARBAC97 include:
- The introduction of administrative roles and nine new relations with complex semantics and restrictions, which are not managed within the model.
- Administrative domains defined based on role hierarchies, which can become ill-defined if the hierarchy changes. To mitigate this, ARBAC97 introduces concepts like create ranges and restrictions on operations, leading to many common operations being performed only by the SSO.

Subsequent versions, ARBAC99 [25] and ARBAC02 [19], were introduced to address some shortcomings of ARBAC97, but they did not change the fundamental approach of using administrative roles and role ranges based on hierarchies.

### 3.2 SARBAC Family
SARBAC [4, 5] is another significant work on RBAC administration, aiming to make the administration more flexible. The administrative model for role hierarchies in SARBAC was later refined and improved by the same author in [3]. Central to SARBAC is the concept of an administrative scope, which is a set of roles that an administrator can manage. SARBAC allows for more flexible and fine-grained control over administrative domains, but it still relies on role hierarchies to define these domains.

## 4. Design Principles and Requirements
We identify six key design requirements for RBAC administrative models, motivated by three fundamental principles for security mechanisms:
1. **Flexibility and Scalability**: The model should support large-scale systems and allow for flexible administration.
2. **Psychological Acceptability**: The model should be intuitive and easy for administrators to understand and use.
3. **Economy of Mechanism**: The model should be simple and efficient, avoiding unnecessary complexity.

Using these requirements, we analyze the existing approaches and identify areas for improvement. Our analysis highlights the need for a more principled and flexible approach to RBAC administration.

## 5. UARBAC: A New Family of Administrative Models
Based on our analysis and the lessons learned, we design UARBAC, a new family of administrative models for RBAC. UARBAC includes a basic model and one extension, and it is the first formal model to adequately address the challenges of administering large RBAC systems. UARBAC is designed to meet the six key design requirements and is guided by the three fundamental principles for security mechanisms.

### 5.1 Basic Model
The basic model of UARBAC introduces a new approach to defining administrative domains. Instead of relying solely on role hierarchies, UARBAC allows for more flexible and fine-grained control over administrative domains. This approach ensures that administrative domains can be defined based on both organizational structure and job functions, addressing the limitations of existing models.

### 5.2 Extension
The extension to UARBAC provides additional features to enhance the flexibility and scalability of the model. These features include support for dynamic role hierarchies and more advanced administrative scopes, allowing for better management of large and complex RBAC systems.

## 6. Related Work
We discuss related work in the field of RBAC administration, including other models and approaches that have been proposed. We compare these approaches with UARBAC, highlighting the advantages and improvements offered by our new model.

## 7. Conclusion
In this paper, we have proposed a principled approach to designing and analyzing administrative models for RBAC. We identified six key design requirements and used these to analyze existing approaches. Based on our analysis, we designed UARBAC, a new family of administrative models for RBAC that offers significant advantages over existing models. UARBAC is the first formal model to adequately address the challenges of administering large RBAC systems, providing a more flexible, scalable, and psychologically acceptable approach to RBAC administration.