title:Administration in role-based access control
author:Ninghui Li and
Ziqing Mao
Administration in Role-Based Access Control
Ninghui Li
Ziqing Mao
Center for Education and Research in Information Assurance and Security
and Department of Computer Science
Purdue University
West Lafayette, IN 47907-2107, USA
{ninghui, zmao}@cs.purdue.edu
ABSTRACT
Administration of large-scale RBAC systems is a challenging open
problem. We propose a principled approach in designing and an-
alyzing administrative models for RBAC. We identify six design
requirements for administrative models of RBAC. These design re-
quirements are motivated by three principles for designing security
mechanisms: (1) ﬂexibility and scalability, (2) psychological ac-
ceptability, and (3) economy of mechanism. We then use these
requirements to analyze several approaches to RBAC administra-
tion, including ARBAC97 [21, 23, 22], SARBAC [4, 5], and the
RBAC system in the Oracle DBMS. Based on these requirements
and the lessons learned in analyzing existing approaches, we de-
sign UARBAC, a new family of administrative models for RBAC
that has signiﬁcant advantages over existing models.
1.
INTRODUCTION
Role-based access control (RBAC) has established itself as a
solid base for today’s security administration needs. However, the
administration of large RBAC systems remains a challenging open
problem. Large RBAC systems may have hundreds of roles and
tens of thousands of users. For example, a case study carried out
with Dresdner Bank, a major European bank, resulted in an RBAC
system that has about 40,000 users and 1300 roles [26]. In RBAC
systems of this size, administration has to be decentralized, since
it is impossible for a single, fully-trusted administrator, referred to
as System Security Ofﬁcer (SSO) in this paper, to manage the en-
tire RBAC system. Therefore, delegation (or decentralization) is
an important part of RBAC administrative models that have been
proposed in the literature. With delegation, partially-trusted ad-
ministrators are given the power to change portions of the RBAC
state.
Although RBAC itself is relatively well-studied and well-
understood, the understanding of decentralized administration of
RBAC is still at an early stage. There is a signiﬁcant gap between
the RBAC administration models developed by researchers, namely
the ARBAC family [21, 23, 22, 25, 19] and SARBAC [4, 5], and
the requirements that have been developed through practical expe-
riences of deploying RBAC, e.g., [12, 26]. For example, one of the
most important issues in RBAC administration is how to specify
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’07, March 20-22, 2007, Singapore.
Copyright 2007 ACM 1-59593-574-6/07/0003 ...$5.00.
the administrative domains. When the SSO delegates the adminis-
tration privileges to a partially-trusted administrator, the privileges
have to be limited to a portion of the RBAC state, which we call an
administrative domain. Any RBAC administration approach must
provide a mechanism for deﬁning administrative domains. Both
the ARBAC family and SARBAC deﬁne administrative domains
based on role hierarchies, even though they differ in how to use
role hierarchies to deﬁne administrative domains.
Kern et al. [12] argued that using role hierarchies as a basis for
deﬁning administrative domains is problematic in real-life scenar-
ios. One important reason is that the criteria for deﬁning role hi-
erarchies and administrative domains are often different. Admin-
istration domains are mostly deﬁned based on the organizational
structure, where roles are often deﬁned based on job functions. As
observed by many authors, role hierarchies often do not reﬂect the
organizational structure [15, 16, 12]; two roles that are in the same
organizational unit may not be related by the role hierarchy in any
way. The work by Kern et al. [12] aim at “reconcile the require-
ments of the actual users of products with research” and “provide
researchers with feedbacks in the form of problems encountered by
practitioners which should then be addressed more thoroughly”.
This paper is motivated by this gap between existing formal mod-
els of RBAC administration and the requirements that come up in
real deployment. In this paper, we propose a principled approach
to reconcile the differences. We identify six design requirements
for administrative models of RBAC. These design requirements are
motivated by three principles for designing security mechanisms:
(1) ﬂexibility and scalability, (2) psychological acceptability, and
(3) economy of mechanism. The latter two are in the eight prin-
ciples for designing security mechanisms identiﬁed by Salzer and
Schroeder [20]. Using the design requirements that we have devel-
oped, we analyze the ARBAC family [19, 21, 22, 25], SARBAC [4,
5], and the RBAC administration approach implemented in the Or-
acle Database Management System (DBMS).
Based on these requirements and the lessons learned in analyzing
existing approaches, we design UARBAC, a new family of admin-
istrative model for RBAC. UARBAC has a basic model and one
extension. It is the ﬁrst formal model that adequately addresses the
challenges of administering large RBAC systems.
Our principled approach can be contrasted with the approach in
developing existing formal models on RBAC, which can be charac-
terized as example-based. In the example-based approach, design
decisions are justiﬁed through analyzing a few examples and the
impact the design decisions have on the examples. While examples
are important, the analysis must be guided by high-level security
principles. Without guidance from principles, one can often debate
whether a particular impact of a design decision is desirable or not.
For example, certain side effects of administrative operations are
considered to be anomalous in ARBAC97, whereas Crampton [4,
5] argued that these side effects are not anomalous. Such issues
cannot be resolved satisfactorily without a set of principles. While
not everyone will agree with every principle we have identiﬁed in
this paper, we believe that it is valuable to put forth a set of princi-
ples that the community can discuss and debate.
The rest of this paper is organized as follows. We give back-
grounds on roles and role hierarchies in Section 2, and describe
three existing administrative models in Section 3. We discuss de-
sign principles and requirements in Section 4. Section 5 presents
UARBAC. We then discuss related work in Section 6 and conclude
in Section 7.
2. ROLES AND ROLE HIERARCHIES
RBAC adds the notion of roles as a level of indirection between
users and permissions. Roles are created based on job functions
and/or qualiﬁcations of users. Permissions (i.e., privileges to ac-
cess resources) are assigned to roles based on the requirements of
job functions and/or the entitlement of qualiﬁcations. Users are
made members of roles based on their job responsibilities and/or
qualiﬁcations, thereby gaining permissions assigned to those roles.
Roles may be organized into a hierarchy, which deﬁnes a partial
order among roles. We use r1 (cid:185) r2 to denote that r1 is dominated
by r2, and say that r1 is more junior to r2, and r2 is more senior to
r1. This means r2 inherits all permissions that are assigned to r1,
and all users who are members of r2 are also members of r1.
Several existing approaches to RBAC administration use role hi-
erarchies to specify administration domain. Therefore, role hierar-
chies play a key role in the study of RBAC administration. Fig-
ure 1 shows three kinds of role hierarchies that have appeared in
the literature. Figure 1(a) shows an example that has been used
extensively in the papers on the ARBAC family and SABAC. In
fact, it is the only example hierarchy used in these papers.
It is
well-structured as a lattice, and it has a senior-most role (Dir) and
a junior-most role (E). The role Dir has all permissions assigned to
any role in the system. Figure 1(b) shows a role-hierarchy in which
all roles form an inverted tree. This example is taken from [6].
Such a structure is referred as “limited role hierarchies” in ANSI
standard for RBAC [1, 9]. In such hierarchies, the roles towards
the bottom are more generic. The more specialized roles inherit
permissions assigned to the generic roles, and may be assigned ad-
ditional permissions. Figure 1(c) shows a layered role-hierarchy
taken from [12]. This example came from a real-world example
(according to [12]). Functional roles are created by asset managers,
who control resources. Asset managers also assign permissions for
their resources to these functional roles. Business roles are created
by role administrators, who determine what the functional roles are
needed for each business role. This results in a layered, two-level
role hierarchy.
3. EXISTING ADMINISTRATIVE MOD-
ELS FOR RBAC
In this section, we give an overview of three existing approaches
for administering RBAC: the ARBAC family, the SARBAC, and
the administrative model implemented in Oracle. We point out that
this section is not a standard related work section. We present ex-
isting approaches in sufﬁcient details so that, in next section, we
can use these to illustrate the principles of designing an RBAC ad-
ministration model. We will compare these approaches with ours
in Section 5.4.
3.1 ARBAC97
To our knowledge, ARBAC97 [21, 23, 22] is the ﬁrst attempt
to specify a comprehensive administrative model for RBAC. AR-
BAC97 is based on the RBAC96 models [24]. ARBAC97 assumes
that there is a set of administrative roles, AR, which is disjoint
from the set of normal roles. Only members of these roles can per-
form administrative operations.
ARBAC97 consists of three sub-models: URA97 for managing
user-role assignment, PRA97 for managing permission-role assign-
ment, and RRA97 for managing role-role assignment. All three
sub-models rely on the concept of role ranges, which are used as
administrative domains. A role range speciﬁes a set of roles, and
an open role range is written as (x, y), where x and y are normal
roles. By deﬁnition, (x, y) = {r | x ≺ r ∧ r ≺ y}. Ranges in
URA97 and PRA97 may be open, closed or half-open.
URA97 introduces two relations: can assign and can revoke.
Each member of can assign is of the form (cid:104)a, ϕ, G(cid:105), where a is
an administrative role, ϕ is a pre-condition (discussed below), and
G is either a role range or a set of explicitly listed roles. The pre-
condition, ϕ, is a propositional logic formula with roles as atoms,
and with ¬,∨, and ∧ as logical connectives. For instance, the
meaning of the (cid:104)a, r1 ∨ (¬r2 ∧ r3) , G(cid:105) is that a member of a may
assign a user u to a role r ∈ G provided that either u is a member
of r1, or, u is not a member of r2, but is a member of r3. Each tuple
in can revoke is of the form (cid:104)a, G(cid:105), where a is an administrative
role, and G is a role range or a set of roles; it means that a member
of a can revoke a user from a role in G. In ARBAC97, adminis-
tration of permissions is perceived as the dual of the administration
of users; thus, PRA97 introduces two relations can assignp and
can revokep, which are similar to can assign and can revoke.
RRA97
new relations:
introduces ﬁve
can assigna,
can revokea, can assigng, can revokeg, and can modify.
The relation can modify is used to specify how the role hierarchy
may change. Each member of can modify is a tuple (cid:104)a, G(cid:105), where
a is an administrative role, and G is an encapsulated range, which
is an open range (x, y) that satisﬁes the condition that given a role
r1 ∈ (x, y) and a role r2 (cid:54)∈ (x, y), we have r2 ≺ r1 if and only if
r2 (cid:185) x, and r1 ≺ r2 if and only if y (cid:185) r2.1
The concept of encapsulation is introduced to avoid the situa-
tions that some operations performed inside a role range may have
some side effects outside the range. To maintain encapsulation of
ranges, ARBAC97 further limits what operations are allowed by
the tuples in can modify. For example, to create a new role, one
must specify one parent role and a child role. To create the role
r with the role x as its child and y as its parent, the range (x, y)
must be a create range.2 Only the SSO can create roles without a
parent or a child, or outside a create range. Furthermore, any op-
eration such as deleting a role, inserting an edge, and deleting an
edge, should not violate the encapsulation of any authority range
(see footnote 2). For example, one cannot add the edge QE1≺PL2,
even when a tuple in can modify has the range (ED,DIR), because
this new edge would make the two ranges (E1,PL1) and (E2,PL2)
not encapsulated anymore. Similarly, one cannot delete the edge
1As Crampton and Loizou [4] point out, the original deﬁnition for
an encapsulated range in [23] implies that no range can be encap-
sulated. Therefore, we have adopted the correction to the original
deﬁnition suggested by Crampton and Loizou [23].
2Any range reference in the can modify relation is called an au-
thority range. An immediate authority range of a role is the unique
smallest authority range to which the role belongs. A range (x, y) is
a create range if x and y have the same immediate authority ranges
or one of x and y is the end point of the other’s immediate authority
range.
(b)
(a)
(c)
Figure 1: Role hierarchies from RBAC literature.A lattice structured hierarchy is shown in (a). An inverted tree in shown in (b). A layered role
hierarchy is shown in (c).
E2≺PE2, because it makes the range (PL2,E2) no longer encapsu-
lated.
We point out some issues of ARBAC97, which will be further
discussed in Section 4. First, to administer RBAC, ARBAC97 in-
troduces the notion of administrative roles and nine new relations,
which have fairly involved semantics and restrictions. Administra-
tive roles and update to these nine relations are not managed in the
model, which implies that they must be managed by the SSO. Sec-
ond, administrative domains are deﬁned based on role hierarchies.
As many operations also change the role hierarchy, some adminis-
trative domains may become ill-deﬁned. To avoid this, ARBAC97
introduces concepts such as create ranges and restrictions on what
operations can be performed. As a result, a lot of common opera-
tions can be performed only by the SSO.
After ARBAC97 was introduced, ARBAC99 [25] and AR-
BAC02 [19] were introduced to address some perceived shortcom-
ings of ARBAC97. They change only the URA and the PRA com-
ponents of ARBAC97, but not RRA97. In particular, they do not
changed the fundamental approach of using administrative roles,
additional relations, and role ranges based on hierarchies.
3.2 SARBAC Family
SARBAC [4, 5] is another important work on RBAC administra-
tion; it follows the basic idea of ARBAC family and tries to make
the administration more ﬂexible. The administrative model for role
hierarchy in SARBAC is later reﬁned and improved by the same
author in [3]. We follow the description of SARBAC in [3]. Cen-
tral to SARBAC is the concept of an administrative scope, which is