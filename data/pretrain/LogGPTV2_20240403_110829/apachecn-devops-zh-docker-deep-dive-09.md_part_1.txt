## 九、使用 Docker 编写部署应用
在本章中，我们将了解如何使用 Docker Compose 部署多容器应用。
Docker 编写和 Docker 栈非常相似。在本章中，我们将重点介绍 Docker Compose，它在以**单引擎模式**运行的 Docker 节点上部署和管理多容器应用。在后面的章节中，我们将重点讨论 Docker Stacks。栈在运行于**群模式**的 Docker 节点上部署和管理多容器应用。
我们将把这一章分成通常的三个部分:
*   TLDR
*   深潜
*   命令
### 通过撰写部署应用-TLDR
现代云原生应用由多个较小的服务组成，它们相互作用形成一个有用的应用。我们称这种模式为“微服务”。一个简单的例子可能是一个包含以下七项服务的应用:
*   Web 前端
*   排序
*   目录
*   后端数据库
*   记录
*   证明
*   批准
让所有这些一起工作，你就有了一个*有用的应用*。
部署和管理大量类似这样的小型微服务可能会很困难。这是*Docker 作曲*进场的地方。
Docker Compose 不是用脚本和长的`docker`命令将每个微服务粘合在一起，而是让您在单个声明性配置文件中描述整个应用，并使用单个命令部署它。
一旦应用被*部署*，你可以*用一组简单的命令管理*的整个生命周期。您甚至可以在版本控制系统中存储和管理配置文件。
这是最基本的。让我们深入挖掘。
### 通过编写部署应用-深度潜水
我们将深潜部分划分如下:
*   撰写背景
*   安装合成
*   撰写文件
*   使用撰写部署应用
*   使用撰写管理应用
#### 撰写背景
一开始是*图*。Fig 是一个强大的工具，由一家名为*果园*的公司创建，它是管理多容器 Docker 应用的最佳方式。它是一个 Python 工具，位于 Docker 之上，允许您在一个 YAML 文件中定义整个多容器应用。然后，您可以使用`fig`命令行工具来部署和管理应用的生命周期。
在幕后，Fig 将读取 YAML 文件，并使用 Docker 通过 Docker API 部署和管理应用。这是件好事。
事实上，它是如此的好，以至于 Docker，Inc .收购了 Orchard，并将 Fig 重新命名为 *Docker Compose* 。命令行工具从`fig`更名为`docker-compose`，并继续作为外部工具安装在 Docker 引擎的顶部。尽管它从未完全集成到 Docker Engine 中，但它一直很受欢迎并被广泛使用。
就目前的情况来看，Compose 仍然是一个外部 Python 二进制文件，您必须将其安装在 Docker 主机上。您在 YAML 文件中定义多容器(微服务)应用，将 YAML 文件传递到`docker-compose`命令行，并通过 Docker API 进行组合部署。然而，2020 年 4 月发布了[作曲规范](https://github.com/compose-spec/compose-spec)。这旨在为定义多容器云原生应用创建一个开放标准。最终目的是大大简化*代码到云*的流程。
该规范将由社区主导，并与 Docker，Inc .的`docker-compose`实现分开。这有助于保持更好的治理和更清晰的分界线。然而，我们应该期待 Docker 在`docker-compose`中实现填充规范。
规范本身是了解细节的一个很好的文档。
是时候看到它发挥作用了。
#### 安装合成
Docker Compose 可在多个平台上使用。在本节中，我们将演示一些在视窗、苹果和 Linux 上安装它的方法。有更多的安装方法，但我们在这里展示的方法会让你开始。
##### 在 Windows 10 上安装合成
Docker Compose 是 Windows 10 上标准 Docker 桌面安装的一部分。所以，如果你的 Windows 10 电脑上有 Docker Desktop，你就有了 Docker Compose。
使用以下命令检查是否安装了撰写。您可以从 PowerShell 或 CMD 终端运行此命令。
```
> docker-compose --version
docker-compose version 1.25.5, build 8a1c60f6 
```
 `如果您需要在 Windows 10 上安装 *Docker Desktop* 的更多信息，请参见**第 3 章:安装 Docker** 。
##### 在苹果电脑上安装合成
与 Windows 10 一样，Docker Compose 作为 Mac 的 *Docker 桌面*的一部分安装。所以，如果你的 Mac 上有 Docker 桌面，你就有了 Docker 作曲。
在终端窗口中运行以下命令，验证您是否拥有 Docker Compose。
```
$ docker-compose --version
docker-compose version 1.25.5, build 8a1c60f6 
```
 `如需了解更多关于安装 *Docker Desktop* 的信息，请参见**第三章:安装 Docker** 。
##### 在视窗服务器上安装合成
Docker Compose 作为单独的二进制文件安装在 Windows 服务器上。要使用它，您需要在您的 Windows 服务器上安装最新的 Docker。
从提升的 PowerShell 终端运行以下命令(以管理员身份运行)。
```
PS C:\> [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 
```
 `为了可读性，以下命令在您想要安装的版本的 URL 中使用了倒勾(`) to escape carriage returns and wrap the command over multiple lines. It installs version 1.25.5 of Docker Compose. You can install any version listed here: https://github.com/docker/compose/releases by replacing the` 1.25.5`)。
```
PS C:\> Invoke-WebRequest `
 "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-Windows-x86_64.exe" `
 -UseBasicParsing `
 -OutFile $Env:ProgramFiles\Docker\docker-compose.exe
Writing web request
Writing request stream... (Number of bytes written: 5260755) 
```
 `使用`docker-compose --version`命令验证安装。
```
> docker-compose --version
docker-compose version 1.25.5, build 01110ad01 
```
 `撰写现已安装。只要您的 Windows Server 机器安装了最新的 Docker 引擎，您就可以开始了。
##### 在 Linux 上安装合成
在 Linux 上安装 Docker Compose 是一个两步的过程。首先，使用`curl`命令下载二进制文件。然后使用`chmod`使其可执行。
要让 Docker Compose 在 Linux 上工作，您需要一个 Docker 引擎的工作版本。
以下命令将下载 Docker Compose 的版本`1.25.5`，并将其复制到`/usr/bin/local`。您可以查看 [GitHub](https://github.com/docker/compose/releases) 上的发布页面获取最新版本，并将网址中的`1.25.5`替换为您想要安装的版本。
该命令可能会覆盖书中的多行。如果在一行中运行该命令，则需要删除所有反斜杠(`\`)。
```
$ sudo curl -L \
 "https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)" \
  -o /usr/local/bin/docker-compose
% Total    % Received   Time        Time     Time    Current
                        Total       Spent    Left    Speed
100   617    0   617    0 --:--:-- --:--:-- --:--:--  1047
100 8280k  100 8280k    0  0:00:03  0:00:03 --:--:--  4069k 
```
 `现在您已经下载了`docker-compose`二进制文件，使用下面的`chmod`命令使其可执行。
```
$ sudo chmod +x /usr/local/bin/docker-compose 
```
 `验证安装并检查版本。
```
$ docker-compose --version
docker-compose version 1.25.5, build 1110ad01 
```
 `您已经准备好在 Linux 上使用 Docker Compose 了。
也可以使用`pip`从其 Python 包安装 Compose。但是我不想浪费宝贵的页面来展示每一种可能的安装方法。够了，该继续前进了。
#### 撰写文件
Compose 使用 YAML 文件定义多服务应用。YAML 是 JSON 的一个子集，所以你也可以使用 JSON。然而，本章中的所有例子都将是 YAML。
撰写 YAML 文件的默认名称是`docker-compose.yml`。但是，您可以使用`-f`标志来指定自定义文件名。
以下示例显示了一个非常简单的合成文件，该文件定义了一个带有两个微服务(`web-fe`和`redis`)的小 Flask 应用。该应用是一个简单的网络服务器，它计算网页的访问量，并将该值存储在 Redis 中。我们将称该应用为`counter-app`，并将其用作本章其余部分的示例应用。
```
version: "3.8"
services:
  web-fe:
    build: .
    command: python app.py
    ports:
      - target: 5000
        published: 5000
    networks:
      - counter-net
    volumes:
      - type: volume
        source: counter-vol
        target: /code
  redis:
    image: "redis:alpine"
    networks:
      counter-net:
networks:
  counter-net:
volumes:
  counter-vol: 
```
 `在仔细查看之前，我们将跳过文件的基础知识。
首先要注意的是，该文件有 4 个顶级键:
*   `version`
*   `services`
*   `networks`
*   `volumes`
其他顶级键也存在，例如`secrets`和`configs`，但是我们现在没有看到这些。
`version`键是强制的，它总是文件根目录的第一行。这定义了编写文件格式的版本(基本上是应用编程接口)。您通常应该使用最新版本。
需要注意的是`versions`键并没有定义 Docker Compose 或 Docker Engine 的版本。有关 Docker 引擎、Docker Compose 和 Compose 文件格式版本之间兼容性的信息，请搜索“Compose 文件版本和升级”。
在本章的剩余部分，我们将使用版本 3 或更高版本的合成文件格式。
顶层`services`键是定义不同应用微服务的地方。这个例子定义了两个服务；名为`web-fe`的网络前端和名为`redis`的内存数据库。Compose 会将这些服务部署为自己的容器。
顶层`networks`键告诉 Docker 创建新网络。默认情况下，合成将创建`bridge`网络。这些是单主机网络，只能连接同一 Docker 主机上的容器。但是，您可以使用`driver`属性来指定不同的网络类型。
下面的代码可以用在你的合成文件中，创建一个新的*叠加*网络，称为`over-net`，允许独立容器连接到它(`attachable`)。
```
networks:
  over-net:
  driver: overlay
  attachable: true 
```
 `顶层`volumes`键是告诉 Docker 创建新卷的地方。
##### 我们特定的合成文件
我们列出的示例文件使用 Compose 版本`3.8`文件格式，定义了两个服务，定义了一个名为 counter-net 的网络，并定义了一个名为 counter-vol 的卷。