现在调用上述 servlet，每 5 秒后就会显示当前的系统时间，如下所示。运行 servlet 并等着看结果：
![](../../../../../../assets/img/Develop/Java/笔记/Web/servlet/servlet-2/10.png)
---
## HTTP 状态码
HTTP 状态码相关知识见 [HTTP状态码](../../Web/HTTP/HTTP状态码.md)
下面是在 servlet 程序中可以用于设置 HTTP 状态码的方法。通过 HttpServletResponse 对象这些方法是可用的。
java
public void setStatus ( int statusCode )
该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的反应包含了一个特殊的状态码和文档，请确保在使用 PrintWriter 实际返回任何内容之前调用 setStatus。
```
```java
public void sendRedirect(String url)
该方法生成一个 302 响应，连同一个带有新文档 URL 的 Location 头。
```
```java
public void sendError(int code, String message)
该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。
```
HTTP 状态码实例：
下述例子将发送 407 错误代码到客户端浏览器，且浏览器会向你显示 “需要身份验证！！！”的消息。
```java
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
// Extend HttpServlet class
@WebServlet(urlPatterns = "/err")
public class showError extends HttpServlet {
  // Method to handle GET method request.
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Set error code and reason.
      response.sendError(407, "Need authentication!!!" );
  }
  // Method to handle POST method request.
  public void doPost(HttpServletRequest request,
                     HttpServletResponse response)
      throws ServletException, IOException {
     doGet(request, response);
  }
}
```
![](../../../../../../assets/img/Develop/Java/笔记/Web/servlet/servlet-2/1.png)
---
## 过滤器
Servlet 过滤器是 Java 类，可用于 Servlet 编程中的下述目的：
* 在它们访问后端资源之前，拦截这些来自客户端的请求。
* 在它们发送回客户端之前，处理这些来自服务器端的响应。
这是规范建议的各种类型的过滤器：
* 身份验证过滤器。
* 数据压缩过滤器。
* 加密过滤器。
* 触发访问事件资源的过滤器。
* 图像转换过滤器。
* 日志记录和审核过滤器。
* MIME-类型链过滤器。
* Tokenizing 过滤器。
* 转换 XML 内容的 XSL/T 过滤器。
过滤器在部署描述符文件 web.xml 中被部署，然后被映射到 servlet 名称或你的应用程序的部署描述符中的 URL 模式。
当 web 容器启动你的 web 应用程序时，它会为每个在部署描述符中已声明的过滤器创建一个实例。过滤器按照它们在部署描述符中声明的顺序执行。
过滤器仅仅是一个实现了 javax.servlet.Filter 接口的 Java 类。javax.servlet.Filter 接口定义了三种方法：
```java
public void doFilter (ServletRequest, ServletResponse, FilterChain)
该方法在每次一个请求/响应对因客户端在链的末端请求资源而通过链传递时由容器调用。
```
```java
public void init(FilterConfig filterConfig)
该方法由 Web 容器调用，指示一个过滤器被放入服务。
```
```java
public void destroy()
该方法由 Web 容器调用，指示一个过滤器从服务被去除。
```
Servlet 过滤器实例
以下是 Servlet 过滤器的实例，将输出客户端的 IP 地址和当前的日期时间。这个例子使你对 Servlet 过滤器有了基本的了解，但是你可以使用相同的概念编写更复杂的过滤器应用程序：
```java
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
// Implements Filter class
public class LogFilter implements Filter  {
   public void  init(FilterConfig config)
                         throws ServletException{
      // Get init parameter
      String testParam = config.getInitParameter("test-param");
      //Print the init parameter
      System.out.println("Test Param: " + testParam);
   }
   public void  doFilter(ServletRequest request,
                 ServletResponse response,
                 FilterChain chain)
                 throws java.io.IOException, ServletException {
      // Get the IP address of client machine.
      String ipAddress = request.getRemoteAddr();
      // Log the IP address and current timestamp.
      System.out.println("IP "+ ipAddress + ", Time "
                                       + new Date().toString());
      // Pass request back down the filter chain
      chain.doFilter(request,response);
   }
   public void destroy( ){
      /* Called before the Filter instance is removed
      from service by the web container*/
   }
}
```
---
## 异常处理
当一个 servlet 抛出一个异常时，web 容器在使用了 exception-type 元素的 web.xml 中搜索与抛出的异常类型相匹配的配置。
你必须在 web.xml 中使用 error-page 元素来指定 servlet 调用，作为对特定的异常或 HTTP 状态码作出的响应。
考虑这种情况，你有一个 ErrorHandler servelt，当任何已定义的异常或错误出现时就会被调用。以下是要在 web.xml 中创建的条目。
```xml
        ErrorHandler
        ErrorHandler
        ErrorHandler
        /ErrorHandler
    404
    /ErrorHandler
    403
    /ErrorHandler
          javax.servlet.ServletException
    /ErrorHandler
    java.io.IOException
    /ErrorHandler
```
如果你想对所有的异常有一个通用的错误处理程序，那么你应该定义如下所示的 error-page，而不是为每个异常定义单独的 error-page 元素：
```xml
    java.lang.Throwable
    /ErrorHandler
```
以下是异常处理中有关上述 web.xml 需要注意的点：
* Servelt ErrorHandler 与其他的 servelt 的定义方式一样，且在 web.xml 中配置。
* 如果状态码有任何错误出现，不管是 404（未找到）还是 403（禁止），那么 ErrorHandler servlet 会被调用。
* 如果 web 应用程序抛出 ServletException 或 IOException，那么 web 容器就会调用 /ErrorHandler servlet。
* 你可以定义不同的错误处理程序来处理不同类型的错误或异常。上述例子非常通用，希望它达到了让你理解基本概念的目的。
以下是错误处理 servlet 可以访问的请求属性列表，用来分析错误/异常的性质。
```
javax.servlet.error.status_code
该属性给出状态码，状态码可被存储，并在存储为 java.lang.Integer 数据类型后可被分析。
```
```
javax.servlet.error.exception_type
该属性给出异常类型的信息，异常类型可被存储，并在存储为 java.lang.Class 数据类型后可被分析。
```
```
javax.servlet.error.message
该属性给出确切错误消息的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。
```
```
javax.servlet.error.request_uri
该属性给出有关 URL 调用 Servlet 的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。
```
```
javax.servlet.error.exception
该属性给出异常产生的信息，信息可被存储，并在存储为 java.lang.Throwable 数据类型后可被分析。
```
```
javax.servlet.error.servlet_name
该属性给出 servlet 的名称，名称可被存储，并在存储为 java.lang.String 数据类型后可被分析。
```
以下是 Servlet 实例，用于任何你定义的 servlet 出现任何错误或异常时的情况。
这个例子让你对 Servlet 中的异常处理有了基本的了解，但是你可以使用相同的概念编写更复杂的异常处理应用程序：
```java
// Import required java libraries
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.*;
// Extend HttpServlet class
@WebServlet(urlPatterns = "/ErrorHandler")
public class ErrorHandler extends HttpServlet {
  // Method to handle GET method request.
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      // Analyze the servlet exception
      Throwable throwable = (Throwable)
      request.getAttribute("javax.servlet.error.exception");
      Integer statusCode = (Integer)
      request.getAttribute("javax.servlet.error.status_code");
      String servletName = (String)
      request.getAttribute("javax.servlet.error.servlet_name");
      if (servletName == null){
         servletName = "Unknown";
      }
      String requestUri = (String)
      request.getAttribute("javax.servlet.error.request_uri");
      if (requestUri == null){
         requestUri = "Unknown";
      }
      // Set response content type
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();
      String title = "Error/Exception Information";
      String docType =
      "\n";
      out.println(docType +
        "\n" +
        "" + title + "\n" +
        "\n");
      if (throwable == null && statusCode == null){
         out.println("Error information is missing");
         out.println("Please return to the Home Page.");
      }else if (statusCode != null){
         out.println("The status code : " + statusCode);
      }else{
         out.println("Error information");
         out.println("Servlet Name : " + servletName +
                             "");
         out.println("Exception Type : " +
                             throwable.getClass( ).getName( ) +
                             "");
         out.println("The request URI: " + requestUri +
                             "");
         out.println("The exception message: " +
                                 throwable.getMessage( ));
      }
      out.println("");
      out.println("");
  }
  // Method to handle POST method request.
  public void doPost(HttpServletRequest request,
                     HttpServletResponse response)
      throws ServletException, IOException {
     doGet(request, response);
  }
}
```
以常用的方式编译 ErrorHandler.java 并把你的类文件放入/webapps/ROOT/WEB-INF/classes 中。
让我们将下述配置添加到 web.xml 文件中来处理异常：
```xml
        ErrorHandler
        ErrorHandler
        ErrorHandler
        /ErrorHandler
    404
    /ErrorHandler
    java.lang.Throwable
    /ErrorHandler
```
现在，尝试使用一个会产生任何异常的 servlet 或者输入一个错误的 URL，这将触发 Web 容器调用 ErrorHandler servlet 并显示适当的消息。例如，如果你输入了一个错误的 URL，那么它将显示如下所示的结果：
```
The status code : 404
```
上述代码在一些 web 浏览器中可能无法工作。因此请尝试使用 Mozilla 和 Safari 浏览器，这样上述代码应该能正常工作。
![](../../../../../../assets/img/Develop/Java/笔记/Web/servlet/servlet-2/2.png)
---
## Source & Reference
- https://wiki.jikexueyuan.com/project/servlet/writing-filters.html
- https://wiki.jikexueyuan.com/project/servlet/form-data.html
- https://wiki.jikexueyuan.com/project/servlet/cookies-handling.html