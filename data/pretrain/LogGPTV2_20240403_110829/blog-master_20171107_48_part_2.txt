1、更新用户的最终位置，由于空间移动有一定的速比，所以更新后是基于原有位置的一个相对位移位置。          
```          
vi test.sql          
\set att1 random(1,5)        
\set att2 random(1,5)        
\set att3 random(1,5)        
\set id random(1,20000000)        
\set x random(120,130)        
\set y random(70,80)        
insert into tbl_pos (id, att1, att2, att3, mod_time, pos) values (:id, :att1, :att2, :att3, now(), st_setsrid(st_makepoint(:x,:y), 4326)) on conflict (id) do update set pos=st_setsrid(st_makepoint( st_x(tbl_pos.pos)+5-random()*10, st_y(tbl_pos.pos)+5-random()*10), 4326), mod_time=excluded.mod_time;         
```          
压测          
```          
CONNECTS=20        
TIMES=120          
export PGHOST=$PGDATA          
export PGPORT=1999          
export PGUSER=postgres          
export PGPASSWORD=postgres          
export PGDATABASE=postgres          
pgbench -M prepared -n -r -f ./test.sql -P 5 -c $CONNECTS -j $CONNECTS -T $TIMES          
```          
2、根据用户输入的att1, att2条件，搜索满足条件的附近5公里内的对象，根据距离顺序返回100条。        
```        
vi test1.sql        
\set att1 random(1,5)        
\set att2 random(1,5)        
\set x random(120,130)        
\set y random(70,80)        
select * from tbl_pos where att1=:att1 and att2=:att2 and st_contains(geometry(ST_Buffer(geography(st_setsrid(st_makepoint(:x,:y), 4326)),5000)), pos) order by pos  st_setsrid(st_makepoint(:x,:y), 4326) limit 100;        
```        
压测          
```          
CONNECTS=8        
TIMES=120          
export PGHOST=$PGDATA          
export PGPORT=1999          
export PGUSER=postgres          
export PGPASSWORD=postgres          
export PGDATABASE=postgres          
# pgbench -M prepared -n -r -f ./test1.sql -P 5 -c $CONNECTS -j $CONNECTS -T $TIMES        
# 由于这里用了makepoint，并且绑定的是里面的浮点数，而不是geometry本身。所以导致prepared的问题，使用simple query或extend协议，防止prepare后执行计划不准确导致性能的问题。  
# 详见末尾  
pgbench -M extended -n -r -f ./test1.sql -P 5 -c $CONNECTS -j $CONNECTS -T $TIMES     
```        
### 7、测试          
### 1、更新对象位置        
```          
transaction type: ./test.sql        
scaling factor: 1        
query mode: prepared        
number of clients: 20        
number of threads: 20        
duration: 120 s        
number of transactions actually processed: 13271261        
latency average = 0.181 ms        
latency stddev = 0.196 ms        
tps = 110592.138000 (including connections establishing)        
tps = 110597.618184 (excluding connections establishing)        
script statistics:        
 - statement latencies in milliseconds:        
         0.001  \set att1 random(1,5)        
         0.000  \set att2 random(1,5)        
         0.000  \set att3 random(1,5)        
         0.000  \set id random(1,20000000)        
         0.000  \set x random(120,130)        
         0.000  \set y random(70,80)        
         0.178  insert into tbl_pos (id, att1, att2, att3, mod_time, pos) values (:id, :att1, :att2, :att3, now(), st_setsrid(st_makepoint(:x,:y), 4326)) on conflict (id) do update set pos=st_setsrid(st_makepoint( st_x(tbl_pos.pos)+5-random()*10, st_y(tbl_pos.pos)+5-random()*10), 4326), mod_time=excluded.mod_time;        
```          
#### TPS： 110592          
#### 平均响应时间： 0.178 毫秒          
### 2、根据用户输入的att1, att2条件，搜索满足条件的附近5公里内的对象，根据距离顺序返回100条。        
```          
transaction type: ./test1.sql        
scaling factor: 1        
query mode: prepared        
number of clients: 8        
number of threads: 8        
duration: 120 s        
number of transactions actually processed: 1136703        
latency average = 0.845 ms        
latency stddev = 0.3   ms        
tps = 9472.446079 (including connections establishing)        
tps = 9472.793841 (excluding connections establishing)        
script statistics:        
 - statement latencies in milliseconds:        
         0.002  \set att1 random(1,5)        
         0.000  \set att2 random(1,5)        
         0.000  \set x random(120,130)        
         0.000  \set y random(70,80)        
         0.842  select * from tbl_pos where att1=:att1 and att2=:att2 and st_contains(geometry(ST_Buffer(geography(st_setsrid(st_makepoint(:x,:y), 4326)),5000)), pos) order by pos  st_setsrid(st_makepoint(:x,:y), 4326) limit 100;       
```          
#### TPS： 9472          
#### 平均响应时间： 0.842 毫秒          
## 小结1    
1、注意，为了提高过滤性能，同时为了支持米为单位的距离，我们存储时使用4326 srid, 同时距离过滤时使用以下表达式      
```      
st_contains(      
  geometry(      
    ST_Buffer(  -- 圆形转换为对称多边形，所以边缘部分会有一定的缺失，不过大部分场景不是非得要一个圆形覆盖，调整半径即可放大多边形覆盖的区域。    
      geography(      
        st_setsrid(st_makepoint(:x,:y), 4326)  -- 中心点      
      ),      
      5000   -- st_buffer生成以某个POINT为中心的，半径距离为5000米的polygon空间对对象      
    )      
  ),    -- 将geography转换为geometry      
  pos   -- st_contains, polygon包含point       
)      
```      
st_buffer输出的多边形精度(边的锯齿)，可以通过第三个参数指定      
http://postgis.net/docs/manual-2.4/ST_Buffer.html      
```    
geometry ST_Buffer(geometry g1, float radius_of_buffer);    