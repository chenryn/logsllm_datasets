### 图5：因素对成功概率的影响（1）

图5展示了当攻击者将其手指表（FT）中的条目仅替换为共谋节点时，系统中发现的恶意节点的比例与实际存在的恶意节点比例之间的关系。即使攻击者是所搜索ID的合法所有者，如果其FT检查失败，该ID也会被排除，从而导致找到的恶意节点比例低于系统中存在的恶意节点比例。

#### 因素影响 (100,000个节点，20%恶意)
- **无过滤**：在没有过滤的情况下，系统中发现的恶意节点比例较高。
- **过滤因子4**：使用过滤因子4时，系统中发现的恶意节点比例显著降低。
- **过滤因子3**：使用过滤因子3时，系统中发现的恶意节点比例进一步降低。
- **过滤因子2**：使用过滤因子2时，系统中发现的恶意节点比例最低。

### 图6：因素对成功概率的影响（2）

图6展示了恶意节点检测到搜索方向，并智能地将诚实节点替换为共谋节点的情况。这种替换从最接近搜索区域的诚实节点开始，选择距离要替换的诚实节点最近的恶意节点进行替换，以增加修改后的FT的可信度。其他条目保持不变。我们可以看到攻击者的成功率取决于FT容忍因子和被替换条目的数量。即使替换FT中的所有条目，攻击者也无法显著提高其节点在最终查询结果中的比例，即使搜索者完全信任这些FT。这表明只要FT看起来合理，攻击者无法显著偏向用户的选择，即使他只提供恶意节点。这也解释了为什么NISAN（或结合贪婪搜索和手指表检查）能够提供强大的抗日食攻击保护：通过迫使攻击者严格遵循DHT的原始结构并聚合结果，我们可以纠正错误。

#### 因素影响 (1,000,000个节点，20%恶意)
- **恶意节点发现**：随着过滤因子的增加，发现的恶意节点比例逐渐降低。
- **诚实手指表拒绝**：过滤因子越高，被拒绝的诚实手指表越少。

### 图7：恶意节点知道FT接受阈值

图7假设攻击者知道用户的FT接受阈值。攻击者在搜索方向上替换FT条目，但只替换到接受阈值以内，使他的FT仍然能被诚实用户接受。这是我们测试过的最强的对抗行为，因为很难想象攻击者如何在这种情况下进一步优化其响应。由于Chord等DHT结构对我们方法的影响较小，我们推测进一步优化的效果将是有限的。

### 仿真结果

我们的仿真结果显示，FT的边界检查是一种非常有前景的技术。对于考虑的设置，FT容忍因子3是一个很好的选择。如图7所示，应用这个因子时，几乎没有诚实用户的手指表被拒绝。此外，恶意节点在更改超过3个条目时，无法显著提高其在系统中的比例（见图6）。知道搜索ID和诚实用户的接受阈值并不能帮助恶意节点显著提高其在查询中的比例（见图7）。

### 进一步改进

我们分析了log2(n)最佳节点列表中恶意节点的比例随迭代次数的变化。最初的想法是在搜索的中间步骤中也接受找到的节点作为洋葱路由器候选节点，以减轻桥接和指纹识别攻击。然而，如图8所示，这不是一个好主意。尽管如此，在最后一次搜索迭代中，共谋节点的比例与整个系统中恶意节点的比例相对应（见图7）。因此，考虑搜索值附近的log2(n)个最近节点而不是单个值作为可能的路由器是有意义的。这增加了攻击者对已知诚实用户节点的不确定性，有助于我们对抗被动信息泄露攻击。

### 讨论和替代方案

本节讨论网络信息服务面临的挑战，这些挑战在提出新方法时很少被认真对待，但在实际部署系统时必须考虑。其中之一是信息泄露，它可能导致被动攻击，如桥接和指纹识别攻击。

尽管从我们的角度来看，桥接和指纹识别攻击目前主要是理论上的兴趣，并未在开放网络（如Tor）中显著破坏匿名性，但我们仍然认为寻找针对这些攻击的防御措施具有挑战性。所有已知的部分网络知识方法都容易受到这些攻击，因此我们探讨了一种完全不同NISAN的方法——随机游走，以及两者的结合。

在评估这两种方法后，我们在6.2节中讨论了经常被忽视的引导问题。虽然保持一种通用的观点，我们提供了实现指南，并说明了为什么我们认为NISAN在仔细实施时可以安全地引导和维护。最后，在6.3节中，我们研究了一个更强大的对抗模型，即假设攻击者可以在DHT的ID空间中自由选择其位置时NISAN的行为。

### 信息泄露和随机游走

所有已知的基于DHT的信息分发服务，包括NISAN，都受到被动信息泄露攻击的威胁。这些攻击利用了在DHT中搜索会涉及与许多共谋节点通信的事实。用于防止主动攻击的冗余只会使这种暴露更加严重，因此可能存在主动攻击和被动攻击防护之间的权衡。通过这些搜索查询，攻击者可以直接或通过链接多个查询来了解谁在搜索谁。递归路由或隐藏搜索目标等措施可以使这些信息更难以获取或更不精确，但通常不能完全阻止攻击者获得重要洞察。尽管这些措施可能在实践中挫败大多数攻击，但从理论上讲，如果能够证明完全避免被动攻击，显然更好。因此，我们寻找了一种完全不同的方法，即随机游走。

在随机游走中，我们随机选择一个邻居，请求其手指表，然后再次随机选择其邻居之一，重复此过程直到路径长度达到l。平均而言，l至少应为log2(n)，以确保DHT中的每个节点都可以通过随机游走到达。直观上，这个过程中信息泄露很少，可能比DHT路由时更少，因为搜索真的没有方向可泄露。

显然，这种方法可以与我们的手指表检查结合起来，防止攻击者呈现任意邻居表并确定性地劫持路径。不过，我们仍需假设攻击者手指表中的共谋节点比例g不同。