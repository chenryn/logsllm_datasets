# USB Attacks: Fun with Plug and 0wn

**Defcon 17 Presentation**  
**Speaker: Rafael Dominguez Vega**  
**Date: August 2, 2009**  
**Contact: rafael.dominguez-vega[at]mwrinfosecurity[dot]com**  
**Website: http://labs.mwrinfosecurity.com**

## Main Objectives
- **Attacks & Impact**
- **Bug Discovery**
- **Driver Exploitation**

## Overview of the Talk
- **USB for fun and profit**
- **Fuzzing Techniques**
- **Crash Debugging**
- **Exploitation**
- **Hardware Implementation**
- **Demos**

## Introduction
- **Historical Context**: A brief look at past USB attacks and their evolution.

## Types of USB Attacks
- **AutoRun (e.g., Conficker)**
- **Mislaid or Planted Devices**
- **Driver Bugs**

### Additional Security Measures
- **AutoRun Disabled**
- **Encrypted USB Pen Drives**
- **USB Bus Disabled**

## From Homebrew to Research
- **Client Problem**: Identifying a target with a specific issue.
- **Testing Approaches**: Hardware and software testing.
- **New Feature**: Implementation of a USB port.

## USB Driver Testing
- **Black Box Testing**
- **White Box Testing**
- **Beer-Based Testing** (Informal, exploratory testing)

## Technical Background
- **USB Communication**
- **Enumeration**
- **Descriptors**
- **Other Protocols**

### Enumeration
- **Device Identification**: Automatic process.
- **Descriptors Sent**: Essential for device configuration.

### Descriptors
- **Device Descriptor**
- **Configuration Descriptor**
- **Interface Descriptor**
- **Endpoint Descriptor**
- **String Descriptor**

#### Example: Device Descriptor
```c
const USB_DEVICE_DESCRIPTOR DeviceDescriptor = {
    sizeof(USB_DEVICE_DESCRIPTOR), /* bLength */
    TYPE_DEVICE_DESCRIPTOR,        /* bDescriptorType */
    0x0110,                        /* bcdUSB (USB Version 1.1) */
    0,                             /* bDeviceClass */
    0,                             /* bDeviceSubclass */
    0,                             /* bDeviceProtocol */
    8,                             /* bMaxPacketSize (8 Bytes) */
    0xBEEF,                        /* idVendor */
    0x1337,                        /* idProduct */
    0x0000,                        /* bcdDevice */
    1,                             /* iManufacturer (String Index) */
    0,                             /* iProduct (String Index) */
    0,                             /* iSerialNumber (String Index) */
    1                              /* bNumberConfigurations */
};
```
*Reference: Microchip Technology Inc. Low Pin Count USB Development Kit User’s Guide*

#### Example: String Descriptor
```c
// Manufacturer string descriptor
ROM struct { BYTE bLength; BYTE bDscType; WORD string[12]; }
sd002 = { sizeof(sd002), USB_DESCRIPTOR_STRING,
{
    'M', 'A', 'N', 'U', 'F', 'A', 'C', 'T', 'U', 'R', 'E', 'R'
}};

// Product string descriptor
ROM struct { BYTE bLength; BYTE bDscType; WORD string[7]; }
sd003 = { sizeof(sd003), USB_DESCRIPTOR_STRING,
{
    'P', 'R', 'O', 'D', 'U', 'C', 'T'
}};
```
*Reference: Microchip Technology Inc. Low Pin Count USB Development Kit User’s Guide*

## Fuzzing Techniques
- **Real Hardware** (Expensive)
- **Virtualized (QEMU)**
- **USB over IP (WCPGW)**
- **Hardware Fuzzer** (Direct hardware fuzzing)

### QEMU Testing
- **Open Source**
- **Machine Emulator & Virtualizer**
- **USB Emulation**

#### Advantages
- Quick Start Up
- Low Resource Usage
- No Risk of Hardware Damage

#### Disadvantages
- Custom Fuzzing Engine Required
- Recompilation Needed

### USB over IP Fuzzing
- **USB/IP**: Encapsulates USB packets in IP headers.

#### Advantages
- Effective Fuzzing Engine

#### Disadvantages
- Reliance on Software Stability

### Hardware Fuzzer
- **More Reliable**
- **Direct Hardware Fuzzing**
- **Man-in-the-Middle Capabilities**
- **Long-Term Project**

## Linux USB Driver Bug
- **File: vegasgirl.c**
- **Issue: Buffer Overflow**
- **Function: tom_dick_and_harry**
- **Phase: Enumeration**
- **Trigger: String Descriptor**

### Details
- **Device Structure Element**
- **Function: usb_string**
- **Impact: Overwrite Other Elements of the Structure**

## Crash Analysis
- **Tools: GDB, Crash Utility, KGDB**

### Kernel Crash Demo
- **Implementation and Demonstration**

## Hardware Implementation
- **PIC18 Family Microcontroller**
- **Malicious VegasGirl Device**
- **Flash Microcontroller with Shellcode**
- **Exploit Driver Bug**

### PIC18F14K50
- **Specific Model Used**

## Recommendations
- **Disable Unnecessary USB Drivers**
- **Security Test USB Drivers**
- **Assess USB Risks**

## References & Further Reading
- **USB Official Site**: [http://www.usb.org/](http://www.usb.org/)
- **Linux USB**: [http://www.linux-usb.org/](http://www.linux-usb.org/)
- **Microchip Technology Inc.**: [http://www.microchip.com/](http://www.microchip.com/)
  - **Low Pin Count USB Development Kit User’s Guide**
  - **PIC18F13K50/14K50 Data Sheet**
- **Beyond Logic**: [http://www.beyondlogic.org/](http://www.beyondlogic.org/)
- **USB Design by Example**: *A Practical Guide to Building I/O Devices* (Intel University Press) by John Hyde
- **QEMU**: [http://www.qemu.org/](http://www.qemu.org/)
- **USB/IP**: [http://usbip.sourceforge.net/](http://usbip.sourceforge.net/)
- **Red Hat Crash Utility White Paper**: [http://people.redhat.com/anderson/crash_whitepaper/](http://people.redhat.com/anderson/crash_whitepaper/)
- **KGDB**: [http://kgdb.linsyssoft.com/](http://kgdb.linsyssoft.com/)
- **Evaluating Security Aspects of the Universal Serial Bus**: [http://www.informatik.uni-hamburg.de/SVS/archiv/slides/09-01-13-OS-Jodeit-Evaluating_Security_Aspects_of_USB.pdf](http://www.informatik.uni-hamburg.de/SVS/archiv/slides/09-01-13-OS-Jodeit-Evaluating_Security_Aspects_of_USB.pdf)

---

**Thank you!**  
**For more information, visit: http://labs.mwrinfosecurity.com**  
**Special thanks to my friends and colleagues for their support.**