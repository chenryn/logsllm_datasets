### Audit Events and Policy Management

When a packet matches a rule, an audit event is generated. However, the action associated with that rule (allow or deny) will be ignored. Auditing is particularly useful for discovering policy requirements. For example, to identify the network services required by a specific host to boot up and log on users, an "allow but audit" policy can be applied to its EFW NIC. By rebooting the host and monitoring the audit logs, the necessary services can be identified. A network monitor would perform a similar function.

### Challenges in Policy Management

EFW faces the same policy management challenges as other packet filters, which are exacerbated by the limited resources of the NIC. For instance, port mapping protocols, which start on a well-known port and then negotiate a higher, random port to complete the session, require the firewall to maintain session state. Similarly, protocols using a well-known control port and a random data port (e.g., FTP and some streaming media protocols) present challenges. We are exploring alternatives to address these issues for EFW. Fortunately, these challenges only arise if we need to specifically allow these protocols while denying everything else. If we want to deny these protocols, we can simply block connections to their well-known ports.

### Opportunities in Distributed Firewall Management

Managing policy for a distributed firewall like EFW is not just about moving the perimeter firewall's policy to each endpoint. Consider the following policy:

- **Allow HTTP requests from a specific client to a specific web server.**

On a traditional firewall, this policy might be stated as a single rule (see Table 1), where a rule is defined as (action, protocol, port, source, destination). We assume traffic is permitted in both directions.

| Action | Protocol | Port | Source | Destination |
|--------|----------|------|--------|-------------|
| Allow  | TCP      | 80   | Client | Web Server  |

**Table 1: Traditional Firewall Rule**

Placing this rule on both the EFW for the client and the EFW for the web server would be redundant and potentially overly restrictive. Instead, the policy writer might distribute the policy between the two devices, as shown in Table 2 and Table 3. In both tables, the web server is restricted to processing HTTP requests. However, in Table 2, the client may make other requests, while in Table 3, the client is restricted to HTTP requests.

**Table 2: EFW — Option 1**
| Host     | Rule                        |
|----------|-----------------------------|
| Client   | (Allow, *, *, Client, *)    |
| Web Server | (Allow, TCP, 80, *, Web Server) |

**Table 3: EFW — Option 2**
| Host     | Rule                        |
|----------|-----------------------------|
| Client   | (Allow, TCP, 80, Client, *) |
| Web Server | (Allow, TCP, 80, *, Web Server) |

Tables 2 and 3 express different policies from each other and from Table 1. The differences become evident when expressing policies for EFW. The traditional firewall policy did not specify the behavior of the client and the web server beyond HTTP requests. EFW allows administrators to state policies more precisely.

### EFW Applications

While EFW can handle applications designed for traditional packet-filtering firewalls, its true power lies in applications that are either not possible or not feasible with traditional firewalls. Here are several useful applications:

- **No Sniffing, No Spoofing:** EFW can enforce good network hygiene by preventing hosts from sniffing other network traffic or spoofing IP addresses. This helps mitigate many network attacks, such as distributed denial of service (DDoS) attacks.
- **Lock Down the Host:** EFW can prevent unauthorized services from being available, reducing the need for manual reconfiguration and ensuring compliance with security policies.
- **Servers Are Not Clients:** Dedicated servers should not perform functions typically reserved for clients, such as sending emails or making web requests. EFW can prevent unauthorized outgoing TCP connection initiation.
- **Clients Are Not Servers:** Client hosts should not respond to service requests from other hosts. EFW can prevent unauthorized incoming TCP connection initiation.
- **Stay in Your Own Backyard:** EFW can restrict client hosts to obtaining most network services from dedicated LAN servers, limiting external requests.
- **Don’t Talk to Strangers:** EFW can restrict access to specific services to only authorized servers.
- **Emergency Rule Set:** An emergency rule set can be defined and included in all policies. If a network attack is detected, a new restriction can be quickly distributed to all EFW NICs.
- **Shared Server:** EFW enables a lightweight, cheaper alternative to extranets by allowing a single host with two EFW NICs to be shared between organizations, ensuring secure and controlled communication.

### Future Work

As we gain more experience with EFW, we envision the need for additional features. For example, we are investigating tie-ins to intrusion detection and response systems and using EFW NICs for load sharing within server clusters. Another area of investigation is Virtual Private Groups (VPGs), which establish group-wide relationships and simplify key management for secure group communications. VPG technology will ensure that network communication occurs only through EFW NICs, thwarting attackers with unsecured NICs.

### Summary

We have described a distributed, embedded firewall called EFW, implemented on the host’s network interface card. EFW can be used to lock down critical assets and services, control unnecessary capabilities on the network, and demonstrate that finer-grained network access control is practical. Together with the perimeter firewall, it forms a strong line of network defense.

### Acknowledgments

The authors are grateful for the financial support of the US Defense Advanced Research Projects Agency. This paper reflects work performed under the Releasable Data Products Framework program and the Autonomic Distributed Firewall program. We also thank the anonymous reviewers for their helpful and insightful comments.

### References

[1] S. M. Bellovin. Distributed firewalls. ;login:, pages 37–39, November 1999.
[2] M. Carney, B. Hanzlik, and T. Markham. Virtual private groups. In Network and Distributed System Security Symposium, February 2002. Submitted for publication.
[3] S. Ioannidis, A. D. Keromytis, S. M. Bellovin, and J. M. Smith. Implementing a distributed firewall. In 7th ACM Conference on Computer and Communications Security, Athens, GREECE, November 2000. ACM.
[4] T. Markham and C. Payne. Security at the network edge: A distributed firewall architecture. In DISCEX II, Anaheim, CA, June 2001. DARPA, IEEE.
[5] D. Nessett and P. Humeen. The multilayer firewall. In Network and Distributed System Security Symposium, March 1998.
[6] C. N. Payne, J. N. Froscher, and C. E. Landwehr. Toward a comprehensive INFOSEC certification methodology. In Proceedings of the 16th National Computer Security Conference, pages 165–172, Baltimore, MD, September 1993. NIST/NSA.