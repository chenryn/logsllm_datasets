executes additional statements to determine whether F (x ) belongs
to Φ. Note that checkF,Φ (x ) is randomized simply because it runs
the randomized algorithm F. Fig. 3 demonstrates the randomized
program checkF,Φ (x ) for F = AT and Φ = {[0, 0]}.
ϵ-DP Counterexamples. An ϵ-DP counterexample is a triple
(x, x′, Φ) which violates ϵ-DP:
Pr [F (x ) ∈ Φ] > exp(ϵ ) · Pr(cid:2)F (x
) ∈ Φ(cid:3) .
′
Assuming Pr [F (x′) ∈ Φ] (cid:44) 0, this is equivalent to
ϵ < log Pr [F (x ) ∈ Φ]
Pr [F (x′) ∈ Φ] .
(1)
The privacy violation ϵ (x, x′, Φ) for a triple (x, x′, Φ) is the supre-
mum of all ϵ satisfying Eq. (1):
′
, Φ) := log Pr [F (x ) ∈ Φ]
Pr [F (x′) ∈ Φ] .
ϵ (x, x
(2)
Our goal is to find a triple with a large privacy violation, i.e., we
(3)
want to solve the following optimization problem:
ϵ (x, x′, Φ)
arg maxx,x′,Φ
s.t. (x, x′) ∈ Neigh
and x′ to get a positive violation or, alternatively, consider(cid:12)(cid:12)ϵ (x, x′, Φ)(cid:12)(cid:12)
Note that ϵ (x, x′, Φ) may be negative, in which case we can swap x
(this is the approach taken by our implementation). To avoid clutter,
we ignore this in the rest of the paper.
Direct Optimization of ϵ (x, x′, Φ). A straightforward approach
is to try and solve the maximization problem in Eq. (3) directly, by
(i) computing Pr [F (x ) ∈ Φ] and Pr [F (x′) ∈ Φ] symbolically and
(ii) optimizing ϵ (x, x′, Φ) exactly. We did this by using PSI [16]
for (i) and Mathematica2 for (ii). Unfortunately, even when only
looking for counterexamples with array size 2, Mathematica cannot
solve the resulting maximization problem (timeout after 6 hours).
In addition, PSI times out on larger array sizes (e.g., array size 4
times out after 6 hours).
2https://www.wolfram.com/mathematica
Generalization to (ϵ, δ )-DP. We remark that our problem state-
ment follows the original DP definition [12]. A well-known gener-
alization to ϵ-DP is (ϵ, δ )-DP [13], in which the requirement is:
Pr [F (x ) ∈ Φ] ≤ exp(ϵ ) Pr(cid:2)F (x
) ∈ Φ(cid:3) + δ .
′
Note that for δ = 0, (ϵ, 0)-DP is exactly ϵ-DP.
Our problem statement can be generalized to (ϵ, δ )-DP, where δ
need not be 0. In this case, the privacy violation depends on δ:
′
ϵδ (x, x
, Φ) := log Pr [F (x ) ∈ Φ] − δ
Pr [F (x′) ∈ Φ]
.
(4)
Solving this generalized problem with our approach is straight-
forward, but complicates the presentation. Thus, we follow the
original definition from here on.
3 OVERVIEW
In this section, we provide an overview of DP-Finder and discuss
its applications. Full details are provided in later sections.
Challenges. DP-Finder aims to solve the maximization prob-
lem (3), which introduces two challenges. The first challenge
is that it is hard to compute the probabilities Pr [F (x ) ∈ Φ] and
Pr [F (x′) ∈ Φ], for x, x′, and Φ, and these need to be evaluated
for many intermediate results during optimization. While analytic
approaches (e.g., PSI [16]) can be used, they are computationally
expensive. Approximating the quantities using random sampling
may also incur high costs if the number of required samples is too
high.
The second challenge is to efficiently search the space of triples
so to find one with a large privacy violation – because the solution
space is sparse, random search is inherently ineffective.
Our Approach. We address these challenges in two steps. First,
since the probabilities Pr [F (x ) ∈ Φ] and Pr [F (x′) ∈ Φ] are hard to
compute, we replace them by an estimate based on sampling. We
address the crucial decision of how many samples to use during the
sampling by computing (heuristic) confidence intervals on our esti-
mates, and increasing the number of samples until the confidence
intervals are sufficiently small.
Second, since the resulting optimization goal is not differentiable,
we replace it with a differentiable function. This allows us to search
for triples with large privacy violations by maximizing the resulting
differentiable function using off-the-shelf numerical optimizers.
While the differentiable maximization goal is (naturally) not
equivalent to the original maximization goal, in our evaluation, we
show that optimizing the differentiable maximization goal produces
triples with high privacy violations in practice.
Flow. We now demonstrate our end-to-end approach on an ex-
ample. Fig. 5 exemplifies the flow of DP-Finder on the randomized
algorithm AT. DP-Finder takes as input a randomized algorithm F
(e.g., AT) and runs N iterations of the pipeline. In each iteration,
DP-Finder performs a local search, resulting in a triple (x, x′, Φ)
with two neighboring inputs x, x′ and a set of outputs Φ. Eventually,
the triple with the highest associated privacy violation is returned.
At the start of each iteration, DP-Finder randomly picks a triple
of x, x′, and Φ (e.g., x = [7.4, 4.7], x′ = [8.1, 4.6], and Φ = {[0, 0]}
in Fig. 5). Based on the type of Φ, DP-Finder then generates the
1
AT,{[0,0]}(x):
def check
ρ = 7.5
ν [1] = -23.3
if x[1]+ν [1] ≥ T+ρ:
y[1] = 1
else
y[1] = 0
ν [2] = 24.3
if x[2]+ν [2] ≥ T+ρ:
y[2] = 1
else
y[2] = 0
2
AT,{[0,0]}(x):
def check
ρ = 38.3
ν [1] = 35.5
if x[1]+ν [1] ≥ T+ρ:
y[1] = 1
else
y[1] = 0
ν [2] = -14.0
if x[2]+ν [2] ≥ T+ρ:
y[2] = 1
else
y[2] = 0
return y[1] == 0 &&
return y[1] == 0 &&
y[2] == 0
y[2] == 0
Figure 4: Samples derived from checkAT,{[0,0]}.
.
′
(5)
1
n
1
n
ˆϵ (x, x
, Φ) = log
F,Φ (x )
F,Φ (x′)
Each deterministic program checki
corresponding program checkF,Φ (x ).3 Then, it constructs a dif-
ferentiable function producing estimates for the privacy violation
ϵ (x, x′, Φ) using the two steps already mentioned, which we further
elaborate on next.
Step 1: Estimating Probabilities by Sampling. DP-Finder
constructs estimates for the probabilities Pr [F (x ) ∈ Φ] and
Pr [F (x′) ∈ Φ]. It estimates them using n deterministic programs,
1
F,Φ (x ), . . ., checkn
denoted check
F,Φ (x ), corresponding to random
samples derived from the randomized program checkF,Φ (x ). With
these deterministic programs, DP-Finder computes an estimate of
(cid:80)n
the privacy violation ϵ for a triple (x, x′, Φ) by:
(cid:80)n
i =1 checki
i =1 checki
F,Φ (x ) is obtained by unrolling
loops in checkF,Φ and fixing the values of the random variables
within the randomized program checkF,Φ (x ) (i.e., the random vari-
ables that appear in the randomized algorithm F), by sampling
from their respective distributions. The value of checki
F,Φ (x ) is the
outcome of the attacker’s check (for any given input x). That is, it
is 1 if F (x ) produces an output in Φ using the particular random-
ness encoded in checki
F,Φ (x ); otherwise, it is 0. Fig. 4 shows two
deterministic programs derived from checkAT,{[0,0]} (x ).
Note that the construction of the deterministic programs is inde-
pendent of the input. In particular, we assume that the noise distri-
butions do not depend on the input and that loops are bounded. In
Sec. 8, we discuss how to extend DP-Finder to algorithms whose
noise depends on the input. This allows us to correlate the noise terms
between the samples of Pr [F (x ) ∈ Φ] and Pr [F (x′) ∈ Φ]. Namely,
F,Φ (x′) use the same random-
the programs checki
ness. This helps to reduce the number of samples n needed to obtain
a good estimate. Note, however, that, for i (cid:44) j, checki
F,Φ (x ) and
checkj
F,Φ (x ) and checki
F,Φ (x ) use independent randomness.
3Currently, Φ can be either a singleton set or a box (i.e., an interval generalized to
multiple dimensions), but DP-Finder can be easily extended to other kinds of sets.
Input algorithm
def AT(x):
ρ = Lap(20)
for i = 1 to k:
ν [i] = Lap(20)
if x[i]+ν [i]≥T+ρ:
y[i] = 1
else
y[i] = 0
return y
x =[7.4,4.7]
x′=[8.1,4.6]
Φ={[0,0]}
Pick
x, x′, Φ
Goal: construct samples and
determine n for Eq. (5)
Sample n′ times:
checkAT,{[0,0]}([7.4,4.7])
checkAT,{[0,0]}([8.1,4.6])
Goal: make Eq. (5) differentiable
Rules:
E == 0 (cid:123) e−c2·E2
E1&&E2 (cid:123) E1 · E2
. . .
′
n
e
s
a
e
r
c
n
i
§4
DP-Finder
Confidence interval
§5
yes
Interval too large?
no: n := n′
(cid:80)n
(cid:80)n
i =1 checkiAT, Φ
i =1 checkiAT, Φ
1
n
1
n
(x )
(x′)
ˆϵ (x, x′, Φ) = log
ˆϵd (x,x′, Φ)=log
(cid:80)n
i =1 e−c2· ˜y[1]2 ·e−c2· ˜y[2]2
(cid:80)n
i =1 e−c2· ˜y′[1]2 ·e−c2· ˜y′[2]2
1
n
1
n
Maximize ˆϵ d (x, x′, Φ)
x =[49.4,49.4],x′=[50.4,50.4], Φ={[0,0]}
Update best counterexample
if violation is higher
yes
#iterations < N ?
no
Compute ˆϵ or ϵ of best
counterexample
Counterexample:
Computed violation:
x = [49.4, 49.4], x′ = [50.4, 50.4], Φ = {[0, 0]}
ϵ = 0.05
Figure 5: DP-Finder takes an algorithm and iteratively samples a triple, transforms its privacy violation to a differentiable
function, which is then optimized to find a counterexample with a higher privacy violation than the sampled triple. Finally,
it returns the counterexample with the highest privacy violation found.
Given this construction, it remains to pick a suitable number of
samples n, which is small enough to avoid costly computations, yet
sufficiently large to provide a good estimate for ϵ (x, x′, Φ). For our
purposes, n is sufficiently large if, for the initial triple (x, x′, Φ), it
results in an estimate with a small confidence interval (e.g., smaller
than 2·10−3). To find such an n, DP-Finder starts from a small n′ and
gradually draws more samples. Occasionally, DP-Finder estimates
a (heuristic) confidence interval, and only continues sampling if it
is still too large. In our example, DP-Finder computes correlated
samples for checkAT,{[0,0]} ([7.4, 4.7]) and checkAT,{[0,0]} ([8.1, 4.6]).
To obtain a confidence interval, we use a heuristic based on the
(multivariate) central limit theorem (CLT) and prior work on the
ratio of two correlated Gaussian random variables [19]. Note that
correlating the random noise is necessary in order to reduce the
number of samples. We provide details in Sec. 4.
Step 2: Make the Estimate Differentiable.
In the second step,
DP-Finder translates ˆϵ from Eq. (5) into a differentiable version
ˆϵd (x, x′, Φ). To this end, it translates the deterministic programs
checki
F,Φ (x ) to differentiable programs using a set of a rewrite rules
on its statements. As Boolean expressions and conditionals are the
only source of non-differentiability, we transform them to differen-
tiable functions. Our rules have the property that, if the Boolean