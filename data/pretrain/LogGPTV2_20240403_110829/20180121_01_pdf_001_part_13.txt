• 杀掉最近发起的慢 SQL，老的慢 SQL继续，保证
个慢 并发
N SQL
– select pg_terminate_backend(pid) from
pg_stat_activity where now()-query_start > interval '?
second' order by query_start offset $N;
– 或 pg_cancel_backend(pid)
– https://www.postgresql.org/docs/devel/static/functio
ns-admin.html#FUNCTIONS-ADMIN-SIGNAL
杀会话、杀
QUERY
• 杀会话
– select pg_terminate_backend(pid);
• 杀某个会话
– select pg_terminate_backend(pid) from pg_stat_activity where
pg_backend_pid()<>pid;
• 杀所有会话
• 杀某个用户的所有会话
– select pg_terminate_backend(pid) from pg_stat_activity where usename=?
and pid<>pg_backend_pid();
• 杀QUERY
– select pg_cancel_backend($pid);
杀会话、杀
QUERY
防 、暴力破解
DDoS
• DDoS
– https://github.com/digoal/blog/blob/master/201706/20170629
_02.md
– authentication_timeout
• authentication_timeout= '1s'
• 暴力破解
– https://github.com/digoal/blog/blob/master/201410/20141009
_01.md
– auth_delay
• auth_delay.milliseconds = '500'
是否被
DDoS
• V1、当前总连接数：
– select count(*) from pg_stat_activity;
• V2、最大允许连接数：
– show max_connections;
• V3、当前已占用slot数：
– netstat -anp|grep -c $xxxx
• DDoS判断标准：
– (V2 = V3) > (V1+superuser_reserved_connections)
– https://www.postgresql.org/docs/devel/static/runtime-config-
connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
数据同步
• DTS
• DATAX
– https://github.com/alibaba/DataX
• rds_dbsync
– https://github.com/aliyun/rds_dbsync
• PG 10 订阅功能
– https://github.com/digoal/blog/blob/master/201702/
20170227_01.md
数据订阅
• 集群级订阅
– https://github.com/digoal/blog/blob/master/201707/20170711_01.md
• 表级订阅
– https://github.com/digoal/blog/blob/master/201702/20170227_01.md
• 多通道订阅
– https://github.com/digoal/blog/blob/master/201706/20170624_01.md
• DDL订阅
– https://github.com/digoal/blog/blob/master/201712/20171204_04.md
跨库访问
• dblink
– create extension dblink;
• https://www.postgresql.org/docs/devel/static/dblink.html
– PPAS支持PostgreSQL, Oracle 两种DBLINK
• https://github.com/digoal/blog/blob/master/201801/20180119_01.m
d
• CREATE DATABASE LINK chicago CONNECT TO admin IDENTIFIED BY
'mypassword' USING oci '//127.0.0.1/acctg';
• CREATE DATABASE LINK boston CONNECT TO admin IDENTIFIED BY
'mypassword' USING libpq 'host=127.0.0.1 dbname=sales';
外部表
• 基于 dblink 的视图
– PPAS支持PostgreSQL, Oracle 两种DBLINK
– https://www.postgresql.org/docs/10/static/dblink.html
• postgres_fdw 外部表
– https://www.postgresql.org/docs/10/static/postgres-
fdw.html
• oracle_fdw 外部表
– https://pgxn.org/dist/oracle_fdw/
外部表 数据融合
FDW -
• 用于分级存储、数据库互通
• OSS外部表
– 分级存储：
– RDS PG OSS 外部表文档：https://help.aliyun.com/knowledge_detail/43352.html
– HDB PG OSS 外部表文档：https://help.aliyun.com/document_detail/35457.html
• 其他外部表
– https://wiki.postgresql.org/wiki/Fdw
– 数据库互通。
– file
– oracle
– mysql
– sqlserver
– hadoop.....
分区表
• PG 内置分区表语法
– https://github.com/digoal/blog/blob/master/201612/20161215_01.md
– https://github.com/digoal/blog/blob/master/201802/20180205_02.md
• PG 传统分区表
– https://github.com/digoal/blog/blob/master/201711/20171122_02.md
• pg_pathman分区表
– https://github.com/digoal/blog/blob/master/201710/20171015_01.md
– https://github.com/digoal/blog/blob/master/201610/20161024_01.md
定时任务
• Data Studio
• Crontab
– https://github.com/digoal/blog/blob/master/201
305/20130531_02.md
• pgagent
– https://github.com/digoal/blog/blob/master/201
305/20130531_01.md
执行计划
• postgres=# explain (analyze,verbose,timing,costs,buffers) select count(*) from a where id=1;
• QUERY PLAN
• ----------------------------------------------------------------------------------------------------------------------------
• Aggregate (cost=2.85..2.86 rows=1 width=8) (actual time=0.543..0.543 rows=1 loops=1)
• Output: count(*)
• Buffers: shared read=4
• -> Index Only Scan using a_pkey on public.a (cost=0.43..2.85 rows=1 width=0) (actual time=0.532..0.533 rows=1
loops=1)
• Output: id
• Index Cond: (a.id = 1)
• Heap Fetches: 1
• Buffers: shared read=4
• Planning time: 0.914 ms
• Execution time: 0.591 ms
• (10 rows)
成本因子
CBO
• https://www.postgresql.org/docs/devel/static/runtime-config-
query.html#RUNTIME-CONFIG-QUERY-CONSTANTS
• #seq_page_cost = 1.0 # measured on an arbitrary scale
• #random_page_cost = 4.0 # same scale as above
• #cpu_tuple_cost = 0.01 # same scale as above
• #cpu_index_tuple_cost = 0.005 # same scale as above
• #cpu_operator_cost = 0.0025 # same scale as above
• #parallel_tuple_cost = 0.1 # same scale as above
• #parallel_setup_cost = 1000.0 # same scale as above
• #min_parallel_table_scan_size = 8MB
• #min_parallel_index_scan_size = 512kB
• #effective_cache_size = 4GB
介绍
Join
• Join 方法
– https://www.postgresql.org/docs/devel/static/planner-optimizer.html
• Join 背景原理
– https://github.com/digoal/blog/blob/master/201802/20180205_01.md
– https://www.postgresql.org/docs/devel/static/queries-table-
expressions.html#QUERIES-JOIN
• 并行 Join
– https://github.com/digoal/blog/blob/master/201802/20180202_02.md
– https://github.com/digoal/blog/blob/master/201802/20180201_02.md
– https://github.com/digoal/blog/blob/master/201802/20180201_01.md
优化
JOIN
• 多表JOIN时，JOIN顺序直接决定了最终成本
– 类似经典的商旅问题(走完所有的点)，实际更复杂
– TSP (traveling salesman problem)
强制固定 顺序
JOIN
• 1 disables collapsing of explicit JOIN clauses
• https://www.postgresql.org/docs/devel/static/runtime-
config-query.html#RUNTIME-CONFIG-QUERY-OTHER
• 控制子查询提升
– # from_collapse_limit = 8
• 控制显示INNER JOIN顺序
– # join_collapse_limit = 8
优化器遗传算法设置
• 解决多表JOIN优化器穷举带来的性能问题
• GEQO (geqo_threshold)
– traveling salesman problem (TSP)
– D. Whitley's Genitor algorithm
– https://www.postgresql.org/docs/10/static/geqo.html
计算若干个相邻节点的开销。
图算法，找到跑完所有节点的
TSP最小开销。
GEQO：NP完全问题，近似求解。
相比穷举计算所有组合的开销，更低。
窗口、帧查询
• 窗口查询语法
– https://www.postgresql.org/docs/devel/static/sql-
expressions.html#SYNTAX-WINDOW-FUNCTIONS
– https://github.com/digoal/blog/blob/master/201802/20180224_01.m
d
• 窗口函数
– https://www.postgresql.org/docs/devel/static/functions-window.html
• 聚合函数
– https://www.postgresql.org/docs/devel/static/functions-
aggregate.html
窗口、帧查询例子
• 与第一名分差
– select id, first_value(score) over(partition by sub order by score desc) -score, score, sub from t order by sub,id;
• 每门课程排名
– select id,sub,score,rank() over (partition by sub order by score desc)from t order by sub,id;
• 滑窗分析-每条记录附近10(11)条记录的平均值
– select id,class,score,avg(score) over (partition by class rows between 5 preceding and 5 following)from t order by class,id;
• 滑窗分析-每一天相比前一天的新增UV，最近7天新增UV
– SELECT date, (# hll_union_agg(users) OVER two_days) -(# lag(users) over (ORDER BY date ASC)) AS new_uniques FROM
daily_uniques WINDOW two_days AS (ORDER BY date ASC ROWS 1 PRECEDING);
– SELECT date, # hll_union_agg(users) OVER seven_days FROM daily_uniques WINDOW seven_days AS (ORDER BY date ASC
ROWS 6 PRECEDING);
• 数据去重
– delete from tbl where ctid = any (array(
– select ctid from
– (select ctid,row_number() over (partition by id order by crt_time desc) as rn from tbl) t
– where t.rn<>1
– ));
递归查询
递归查询案例 图式搜索
-
https://github.com/digoal/blog/blob/master/201706/20170601_02.md
https://github.com/digoal/blog/blob/master/201801/20180102_04.md
递归查询案例 图式搜索
-
递归查询案例 图式搜索
-
递归查询案例 图式搜索
-
递归查询案例 图式搜索
-
空间查询优化
• GIST索引面收敛查询优化
– https://github.com/digoal/blog/blob/master/201711/20171122_03.md
优化
AOI
• GiST空间索引结构为 bound box，对于不规则多
边形，会引入一些边界放大问题
– CPU放大
– IO放大
• 优化方法
– 空间SPLIT
• https://github.com/digoal/blog/blob/master/201710/20171
004_01.md
空间查询优化
• GIST索引面收敛查询优化
– https://github.com/digoal/blog/blob/master/201711/20171122_03.md
空间查询优化
• GIST索引面收敛查询优化
– https://github.com/digoal/blog/blob/master/201711/20171122_03.md
– 菜鸟、高德、HELLOBIKE、新零售、空间透视分析、。。。。。。
空间数据使用建议
• https://github.com/digoal/blog/blob/master/201710/20171018_02.md
• https://github.com/digoal/blog/blob/master/201708/20170809_01.md
• 球面距离计算
– ST_DistanceSpheroid(geom,ST_SetSRID(ST_Point(102,24),4326),'SPHEROID["
WGS84",6378137,298.257223563]')
– vspheroid := 'SPHEROID["WGS84",6378137,298.257223563]' ;
• --WGS84椭球体参数定义
– vcurrentpoint := ST_SetSRID(ST_Point(ix,iy),4326);
• 设置 SRID
• KNN查询优化
– https://github.com/digoal/blog/blob/master/201308/20130806_01.md
空间数据使用建议
空间数据使用建议
• 时间、空间、对象 多维搜索
– 位图扫描
• gist 索引
• btree_gist 插件
• https://www.postgresql.org/docs/devel/static/btree-gist.html
• https://github.com/digoal/blog/blob/master/201702/20170221_02.md
– 分区
• https://github.com/digoal/blog/blob/master/201711/20171122_03.md
https://github.com/digoal/blog/blob/master/201710/20171005_01.md
• https://github.com/digoal/blog/blob/master/201710/20171004_01.md
– BRIN
• https://github.com/digoal/blog/blob/master/201708/20170820_01.md
数据老化实践
https://github.com/digoal/blog/blob/master/201712/20171208_01.md
非分区表 1、逐渐变冷
数据入口
TABLE
2、转移到oss外部表
老化数据删除、或删除并写入OSS
4、可选:继承 每秒老化约260万行，单RDS PG实例。
3、定义外表约束 OSS外部表(s) OSS海量对象存储
分级存储
• https://help.aliyun.com/knowledge_detail/43352.html
• 热数据
– 实例本地存储
父表
• 访问频次较低数据
– oss外部表存储
OSS_tbl1(201 OSS_tbl2(201
local tbl(s) OSS_tbl3(....)
7-01) 7-02)
– 压缩格式选择
• 继承与分区约束
– 每个OSS外部表负责一部分数据
– 使用约束
– 建立OSS外部表继承关系
复杂业务逻辑延迟问题优化
• 一、
• 数
• 据
• 库
• 端
• 编
• 程
复杂业务逻辑延迟问题优化
https://github.com/digoal/blog/blob/master/201509/20150910_01.md
• 一、
• 数
• 据
• 库
• 端
• 编
• 程
逻辑结构
• https://github.com/digoal/blog/blob/master/201605/20160510_01.md
权限体系
https://www.postgresql.org/docs/devel/static/sql-grant.html
行级权限控制
• RLS
– https://www.postgresql.org/docs/10/static/sql-createpolicy.html
– https://github.com/digoal/blog/blob/master/201602/20160203_03.m
d
– https://github.com/digoal/blog/blob/master/201504/20150409_01.m
d
– CREATE POLICY name ON table_name [ AS { PERMISSIVE |
RESTRICTIVE } ] [ FOR { ALL | SELECT | INSERT | UPDATE | DELETE } ]
[ TO { role_name | PUBLIC | CURRENT_USER | SESSION_USER } [, ...] ]
[ USING ( using_expression ) ] [ WITH CHECK ( check_expression ) ]