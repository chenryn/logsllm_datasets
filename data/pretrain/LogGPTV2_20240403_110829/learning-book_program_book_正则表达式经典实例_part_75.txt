配UNC路径中的服务器和共享名（参考实例7.21）。实例2.8中讲解了多选结构操
作符。
在该分组之后的问号会使这个分组变为可选的。这样就允许我们支持相对路径，因为
其中既不包含盘符，也不包含网络共享。
使用|r\n]+\\)+）
与在解决方案中所给的正则式一样，这个正则式也要求在路径中至少包含一个非反斜
杠的字符和一个反斜杠。如果这个正则式在\lserver\share中匹配驱动器时先匹配到了
llserverlshare，然后在试图匹配文件夹分组时产生失败，但是此时它并不会选择放弃；
它会接署尝试这个正则式的不同组合情形。
在这个例子中，正则引擎会记住用来匹配网络共享名的字符类[a-z0-9_.$]+）并不一定
非要匹配所有可用的字符。只需要-个字符就可以满足（+>。因此，引擎会进行回溯，
强迫该字符类放弃个字符，然后试图继续执行匹配。
当引擎继续的时候，在自标字符串中就有两个剩余字符可以匹配文件夹：e。这两个字
符足以满足正则式是无法产生匹配的。正则引擎会一直回溯，
直到它又回到了字符事的开始。用来捕获盘符和网络共享的分组是可选的，所以正则
弓擎也充许从字符事的并始来尝试匹配文件夹。虽然(V)会在这里产生匹配，正则
式的其余部分却无法匹配，这是因为不允许在盘符或者网络共
享的双反斜杠之后紧跟着出现冒号。
如果你想知道为什么我们没有在实例7.18和实例7.19中使用这个技巧，那是因为这些
正则表达式并不要求一定有文件夹。因为在那些正则式中，在匹配驱动器的部分之后
的所有内容都是可选的，因此正则引擎从不需要回溯。当然，如果把内容都变成可选
的也会带来不同的问题，这在实例7.19中已经讨论过。
当这个正则式找到一个匹配的时候，第一个捕获分组中会包含盘符或网络共享名，而
第二个捕获分组中会包含文件夹。如果是相对路径，那么第-一个捕获分组会是空的。
第二个捕获分组则总是会至少包含一个文件夹。如果你使用这个正则式来匹配一个没
有指定文件夹的路径，那么这个正则式根本就不会产生匹配。
URL、路径和Internet地址389
www.TopSage.com
---
## Page 406
参见
实例2.9会告诉你关于捕获分组的一切。
要了解如何在你喜欢的编程语言中获取捕获分组匹配到的文本，请参考实例3.9。
如果你事先不能确定字符事中是否包含了合法的Windows路径，那么需要先按照实例
7.19进行判断。
7.23从Windows路径中抽取文件名
问题描述
你有一个字符串，其中包含了一个指向WindowsPC或网络上的文件或文件夹的（语法
上）合法的路径，你想要从路径中抽取其中的文件名（如果有)。例如，你想要从路径
c:\folder\file.ext中抽取出其中的file.ext。
解决方案
[\\/:*?"<>1\r\n]+$
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
从已知包含合法路径的字符串中抽取网络服务器和共享名称是很简单的，即使你不知
道该路径实际上是否会以一个文件名结束。
文件名总是会出现在字符串的结尾处。它不能包含任何冒号或反斜杠，因此它也就不
会同文件夹、盘符或网络共享名产生混淆，因为它们都会用到反斜杠和/或冒号。
定位符会匹配字符串的结束（实例2.5)。在Ruby中，虽然脱字符同样可以匹配内
嵌的换行，但是这也不会带来问题，因为在合法的Windows路径中不会包含换行。否
定字符类型|\r\n]+S
正则选项：不区分大小写
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
在这里我们可以使用同在实例7.23中抽取整个文件名一样的技巧来抽取其中的文件扩展名。
唯一的区别是如何来处理点号。在实例7.23中的正则表达式并没有包含任何点号。在
该正则式中的否定字符类只是会简单匹配恰好在文件名中出现的任何点号。
文件扩展名必须以点号作为开始。因此，我们在正则式的开始插人了来匹配一个字
面的点号。
类似Version2.0.txt这样的文件名中可能会包含多个点号。最后一个点号是用来把扩展名同
文件名分开的。扩展名自身不应当包含任何点号。在正则式中，我们通过在字符类中放一个
点号来说明这一点。这个点号在字符类中只是一个字面字符，因此我们不需要对它进行转义。
出现在正则式结尾的定位符S会确保我们匹配的是.txt而不是.0。如果字符串以反斜杠结
束，或者是以不包含任何点号的文件名结束，那么这个正则式就不会匹配到任何内容。当
它产生匹配的时候，它就会匹配到扩展名，其中包括用来分隔扩展名和文件名的点号。
参见
如果你事先不能确定字符串中是否包含了合法的Windows路径，那么需要先按照实例
7.19中的讲解来进行判断。
7.25去除文件名中的非法字符
问题描述
你要去除一个字符串中不符合Windows文件名要求的字符。例如，你有一个包含文档
URL、路径和Internet地址
391
www.TopSage.com
---
## Page 408
标题的字符串，当用户第一次单击“保存”按钮时，你想要用它来作为默认文件名。
解决方案
正则表达式
[\\/ : "* ?<>1] +
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
替换
替换文本为空。
替代文本流派：.NET、Java、JavaScript、PHP、Perl、Python、Ruby
讨论
下列字符在Windows文件名中是不合法的：V:"*?。这些字符会被用来分隔盘符和文
件夹、引用路径或用来指定通配符和命令行的重定向符。
我们可以容易地用字符类V："*?]来匹配这些字符。反斜杠是字符类中的元字符，所
以需要用另外一个反斜杠来转义。所有其他字符在字符类中都是字面字符。
出于效率的考虑，我们用来对字符类进行重复。这样，如果字符串中包含一串连续
的非法字符，那么整串非法字符都会被一次性去除，而不是逐个字符去除。当处理一
小段字符串时，你可能不会注意到性能上的区别，但当你处理一大段数据时，就很可
能会包含比较长的需要删除的字符串，因此这是一种值得牢记的好技巧
因为我们只需要删除有问题的字符，所以在执行查找和替换操作的时候使用空字符串
作为替代文本。
参见
实例3.14讲解了在你所使用的编程语言中如何使用固定的替代文本执行查找和替换
操作。
392第7章
www.TopSage.com
---
## Page 409
第8章
标记语言和数据交换
在这最后一章中，我们会着重讲解在处理常见的标记语言时可能会遇到的常见任务，
这些标记语言包括：HTML、XHTML、XML、CSV和INI。虽然我们会假设读者对于
这些技术至少已经有了基本的了解，但是在本章开始时，我们还是会对每种语言进行
简单的介绍，以确保在进一步讲解之前都站在同一起跑线上。这里的描述主要关注的
是在搜索每种格式的数据结构时所需要知道的基本语法规则。当我们在后面遇到相关
问题的时候，届时会再引人更多的细节。
的任务会极其复杂，至少使用正则表达式来处理时是如此。如果需要完成本章中讲解
的许多任务，特别是当在准确性非常关键的时候（例如，如果你的处理过程可能会涉
及系统安全），那么通常最好的选择应当是使用专门的分析器和API，而不是采用正则
表达式。然而，这些实例依然介绍了许多有用的技巧，并且可以用于许多需要快速处
理的任务。
因此，我们先来看一下要处理的到底是什么东西。在本章中会遇到的许多困难都涉及
如何处理与下列规则不一致的情形，这其中可能是可以预期的情形，也可能是无法预
期的情形。
超文本标记语言（HTML）
HTML被用来描述数十亿的网页和其他文档所采用的结构、语义和表现形式。使用正
则表达式来处理HTML是比较常见的任务，但你还是应当事先清楚该语言并不适合正
则表达式的严格性与精确性。对于在许多网页中常见的各种杂乱的HTML尤其如此，
原因是如今的网页浏览器对于结构糟糕的HTML依然表现出极端的容忍。在本章中，
我们会关注处理格式良好的HTML所需的规则，其中包括：元素（以及它们所包含的
属性）、学符引用、注释和文档类型声明。本书要讲解的版本是HTML4.01，这个版本
是1999年最后定稿的，同时也是在本书写作之时最后一个定稿的HTML版本。
393
www.TopSage.com
---
## Page 410
最基本的HTML构造模块被称作元素（element）。元素是使用标签（tag）来表示的，
标签会使用两个尖括号包围起来。元素可以被分为块级（block-level）元素（例如段落、
标题、列表、表格和表单）和内联级（inline）元素（例如超链接、引用、斜体和表单
输人控制）。元素通常会包含一个起始标签（例如）和一个终止标签（例如
）。元素的起始标签中可以包含属性（attribute），这会在后面进行解释。在两个
标签之间的是元素的内容，其中可能会包含文本和其他元素，或者是空的。元素还可
以嵌套，但是不能交叠（例如，可以使用，但是不能使用
)。对于有些元素（例如用来标记段落的），终止标签是可
选的。拥有可选的终止标签的元素会在新的块级元素的开始处自动终止。有些元素（包
括用来终止一行内容的）中不能包含任何内容，而且也永远不会使用终止标签。
然而，一个空元素依然可以包含属性。HTML元素名称都会以A~Z的个字母开头。
所有合法元素在它们的名称中只会使用字母和数字。元素名称不区分大小写。
我们需要特别注意两个元素和或者的位置会
作为这些元素的结束，并且结束标签也可以出现在注释中，或者是出现在样式或脚本
语言内的字符串中。
属性会出现在一个元素的起始标签中，位于元素名称之后，多个属性之间会使用一个
或多个空格分隔。大多数属性的形式都是一对“名称-值”。因此，下面的例子所给的是
一个（anchor）元素，它包含了两个属性以及内容“Clickme！”：
Click me!
如上所示，一个属性的名称和值之间会用一个等号进行分隔，另外还可以包含可选的
空格。值会用单引号或双引号括起来。如果要在值中使用对应的引号，那么就需要使
用字符引用（稍后会进行讲解）。如果值中只包含字符A~Z、a~z、0~9、下划线、
句点、冒号和连字符（如果用正则表达式表示，也就是），那么也
可以不使用引号。有些属性（例如在有些表单元素中的属性selected和checked）只要
出现就会影响包含它们的元素，它们并不需要再带一个值。在这些情况下，用来分隔
属性名称和值的等号也会被省略掉。另外一种表示方法是可以把这些属性的名称作为
它们的值出现（例如，selected="selected"）。属性名称都会以字母A～Z开头。所有合
法属性的名称中只能包含字母和连字符。属性可以按照任意顺序出现，而且它们的名
称是不区分大小写的。
HTML第4版定义了252个字符实体引用（characterentityreferences）以及超过100万
个数字字符引用（numericcharacterreferences），二者加起来被统称为字符引用（character
references）。数字字符引用会使用一个字符的Unicode代码点来指代一个字符，它采用
的格式是&#nnnn或&#xhhhh，其中nnnn是一个或多个0～9的十进制数字，而hhhh