# Title: How to Model Link Failures: A Perception-Based Fault Model
# Author: Ulrich Schmid

## Abstract
We introduce a novel hybrid fault model for clock synchronization and single-round (approximate) agreement in synchronous distributed systems. This model accurately captures both node and link faults. Unlike traditional "global" fault models, which are based on the total number of faulty nodes, our model relies on the number of faults in the perceptions of any two non-faulty nodes, as conveyed by messages from all other nodes. This approach allows for the proper modeling of arbitrary node and communication faults, including receiver-caused omissions and time-value faults. As an example, we demonstrate that the consistent broadcast primitive—and thus the clock synchronization algorithms—of Srikanth & Toueg can be analyzed under this model. Our analysis shows that as few as 4 * f_a + 2 * f_s + 2 * f_o + 1 nodes are sufficient to tolerate up to f_a, f_s, and f_o asymmetric, symmetric, and omission link faults at any receiving node.

**Keywords:** Fault-tolerant distributed systems, fault models, link failures, consistent broadcasting, clock synchronization.

## 1. Motivation
One of the most important abstractions in the study of distributed algorithms is the "deterministic" fault model. This model assumes that at most f out of n nodes in the system may be faulty at any time. While simple and easy to handle, this model adequately captures both node and sender-caused link faults.

However, a link consists of the sender's network interface, the channel, and the receiver's network interface. The latter, which unites messages from all other nodes, is particularly susceptible to faults. For instance, omission failures in modern wireline and wireless networks are often caused by receiver overruns (buffer exhaustion), unrecognized packets (synchronization errors), and CRC errors (data reception problems). These issues can affect multiple consecutive messages, making it inappropriate to blame the sending nodes.

Another example is receiver-caused timing failures in applications that disseminate time-dependent information, such as clock synchronization. Since the received information varies with the end-to-end transmission delay, excessive delays can produce incorrect or even inconsistent (Byzantine) information at the receiving end. Major sources of these delays include network controller receive-FIFOs and device driver in-bound queues. Again, attributing these faults to the sending nodes is inappropriate.

These link faults must be attributed to the receiving nodes and considered independently at different receivers. Like node faults, they should be classified according to a hybrid fault model to ensure maximum fault tolerance under realistic operating conditions. Unfortunately, there is no straightforward way to accommodate link faults in a global fault model for synchronous systems.

The primary contribution of this paper is an alternative perception-based hybrid fault model for clock synchronization and single-round agreement algorithms. This model provides the necessary features and has been inspired by the fault model used in our analysis of interval-based clock synchronization. We show that a properly adapted implementation of the consistent broadcast primitive—and thus the clock synchronization algorithm—of Srikanth & Toueg can be analyzed under this model.

## 2. Informal Overview
We consider synchronous distributed systems consisting of n nodes interconnected by a fully connected point-to-point or broadcast-type network. The basic assumptions are:
- Each receiving node can reliably identify the sender of a message.
- Flooding or jamming of "foreign" links or the broadcast network is impossible.

Nodes and links may fail according to various fault models, ranging from a simple fail-stop model to a Byzantine one, where faulty nodes/links can take arbitrary steps and transmit/receive any number of arbitrary messages. Conventional fault models, such as the one that assumes at most f nodes may behave Byzantine at any time, typically rely on the total number of faults in the entire system. However, this makes it difficult to accommodate link faults, as seen in [5], where link faults are simply mapped to sender node faults.

For single-round agreement algorithms, there is no need to rely on the total number of faults in the system. Showing (approximate) agreement among all non-faulty nodes involves demonstrating, in a pairwise manner, that any two non-faulty nodes achieve (almost) the same result. For example, the usual clock synchronization condition requires that any two non-faulty nodes' clocks satisfy |C_p(t) - C_q(t)| < K, without regard to the other nodes in the system. Thus, only non-faulty receiving nodes p and q need to be considered, and their sets of received messages can be analyzed in isolation.

It is natural to move to a perception-based fault model, as introduced in our analysis of interval-based clock synchronization. This model considers the number of faults in any two non-faulty receivers' perception vectors V_p = (v_1, ..., v_n) and V_q = (v_1, ..., v_n), containing p's and q's local perceptions of node s, 1 ≤ s ≤ n, as conveyed by its messages. This approach facilitates refined fault containment regions, such as basic nodes (computation and emission), links, and node receiving units.

In the case of fe = 1 receive omissions per node, any two local views can differ in at most 2 * f_e = 2 perceptions, and at most f_e = 1 of the non-faulty perceptions present at some non-faulty node can be missing at any other non-faulty node. This suggests that approximate agreement algorithms should work well in the presence of link faults.

## 3. Formal Framework
To formalize our perception-based fault model, we assume that all nodes s, 1 ≤ s ≤ n, are provided with a (virtual) event V_s[t_s] that occurs at some event generation time t_s specified in a suitable global time scale. Besides its occurrence, V_s[t_s] may or may not carry additional information, given by its value V_s. Note that V_s is often used as an abbreviation for V_s[t_s] when the event generation time t_s is clear from the context.

V_s[t_s] is a virtual event in the sense that it does not usually correspond to a physical event at node s. Rather, it is the hypothesized trigger of the local execution of the particular distributed algorithm at node s, which eventually leads to the generation of a message m_s. This message is then sent to all other nodes in the system.