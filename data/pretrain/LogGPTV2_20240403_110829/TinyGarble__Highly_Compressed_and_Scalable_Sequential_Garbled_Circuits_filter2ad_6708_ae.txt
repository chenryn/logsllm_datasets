!
 %!!
&
" !
%! !
 %
 !""
&& &
&& &
"#!+&"
! "%
! 
 &
#%+&"
 !"&.

"
 !
 
 &%
& "!%
&! "
" "
 %
! "&


% &
 !!


% 
"& &
!

 &

 %!
 %%
" 
 %
" &"


! "%
! 


 !"&
 &&
"#$
"#"$
"#"$
#&$
!#%$
#$
%#$
#$
#&$


&#&$
&#&$


&#&$

TABLE II: Comparison of TinyGarble sequential circuits with PCF and TinyGarble combinational circuits. In case
of AES 128, the result is compared with FastGC.

(




#$
'(
#
'(
##
'(
###
*+
&$

$




#$

,
&,&

,
,

,
,

,
,
-

'-&
##


%#$
&
&#
&%##
%&$

&
$
)


$%#!
#
$
	(.+/0
1
(
 	

 	 
!# 
%&!! 
# 
)## &
)%&$ 
$%$&& &
 )
&) 
& )
%#$ $
&$ &
 $
$%$&$ 
& !

 !"
$ "
 "
& "
&$ )"
$) &"
$! "
)! "
)! )"
)! "
)! $"
 "
 "
 "
 #"
# #"

$
$)
&
$

%&)
%&!
#%!
&%)
&%)
&%)
&%)
%
%)



#
&


&
&
%)
%
!
!
!
!
)
%
	

# "
# $"
# "
# "
# "
# "
 
$ 
%# 
 &
) 
%#& 
# #" %&$ #
# $
$ !


 &
& !


 
& 
 "
 "


 "
 "


# #"
$ &"
423423
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:52 UTC from IEEE Xplore.  Restrictions apply. 
space requirement into the cache and avoid the penalty of
cache misses, thus achieving a large reduction in garbling
time.




















	 
!"#
$%"&'#
(#)%*))+%
	












Fig. 7: Garbling 32,768-bit Sum function. The CPU
time in number of cycles and the approximate memory
footprint in KBytes (y-axis) versus c (x-axis) are shown.
G. High Level Synthesis Tools
The design automation community has been working
on tools that work with higher-level languages and ab-
stractions than HDL. While a host of commercial and
academic HLS tools are available [16], [19], [30], [59],
we selected the Xilinx Vivado HLS for compiling C
code to HDL which can then be synthesized using a
conventional HDL synthesis tool. The HLS engine in
the Vivado suite is built upon the xPilot project [73].
Table III demonstrates a comparison between the per-
formance of the circuits generated using C input to the
HLS tool (C‚ÜíVerilog) and a direct Verilog input. As can
be seen from the table, the resulting memory footprint
could increase by a factor between 1 and 4, while the
number of garbled tables varies in a range of 3 to 9
times. It is well known that writing the HDL level code
which contains the time information and more detailed
structural/behavioral description would yield much more
efÔ¨Åcient circuits than the code written in a higher level
language.
H. Evaluation of MIPS
We implement general purpose processor for PF-SFE
using MIPS I where one user provide function descrip-
tion in assembly and the other provides the data. Support
of sequential circuits in TinyGarble enables us to use the
MIPS circuit description in Plasma project [64] without
major modiÔ¨Åcations. In the following, we provide the
result of MIPS implementation and its memory footprint
and communication load. Lastly, we present implemen-
tation of Hamming distance with variable input length as
a benchmark of private function application on MIPS.
1) MIPS Implementation: We used TinyGarble to
generate the netlist for the MIPS sequential circuit.
Table IV shows the total number of gates and non-
XOR gates for each module of the MIPS processor with
64 √ó 32bit DM and IM. The sum of non-XORs for
each module is 14,997. However, when the modules are
combined together to form the entire MIPS processor,
the synthesizer optimizes the circuit such that the total
number of non-XORs is reduced by 14.95% to 12,755.
The memory footprint for storing tokens during garbling
MIPS is approximately the size of two tokens times
the total number of gates which is 2 √ó 128 √ó 31,719bit
= 991 KB for token bit-width k = 128. The communica-
tion load between parties for invocation of one instruction
(one sequential cycle) is approximately the size of three
tokens times the number of non-XOR gates which is
3 √ó 128 √ó 12,755bit = 598 KB with Row Reduction
optimization.
TABLE IV: Number of total gates and non-XOR gates
in the MIPS implementation. The global optimization of
TinyGarble reduces the overall number of gates com-
pared to that of the sum of individual modules.
Modules
Controller
Bus
ALU
Shifter
Mult
Reg File
IM
DM
PC
Total
MIPS
Global
optimization
Total gates
509
603
651
1,362
2,147
8,880
6,048
13,779
309
34,288
31,719
Non-XOR
470
590
346
1,092
1,792
3,023
2,016
5,423
245
14,997
12,755
7.49%
14.95%
2) Benchmark: Hamming Distance: We implemented
the Hamming distance function as a proof-of-concept
for our secure MIPS. It counts the number of different
elements in two arrays A and B with variable length l.
For the hand-optimized assembly code shown in Fig. 8,
the function requires at most 7 + 9l sequential cycles
(instructions) to evaluate. Thus, based on Table IV,
this function requires overall 12,755 √ó (7 + 9l) non-
XOR gates. It has only 16 instructions and is stored in
16√ó32bit of the IM. The function requires that l, A, and
B are stored in addresses 0, [2 : l + 1], and [l + 2 : 2l + 1]