to circuits (§3).
• We demonstrate CirC’s extensibility. We extend CirC to
the ZoKrates proof language in a week with ≈900 lines
of code, whereas the language’s reference compiler was
developed over years and comprises ≈24000 lines (§4).
• We evaluate the accuracy of CirC’s SMT output and the
performance (size) of its R1CS output. For example, we
ﬁnd that for ZoKrates programs, CirC produces R1CS
instances which perform slightly better than those from the
language’s reference compiler. CirC also closely matches a
hand-tuned constraint system deployed by Zcash [2] (§5).
• We evaluate the effect of common optimizations on the
performance of veriﬁcation and proof-system applications,
ﬁnding that some optimizations provide substantial beneﬁt
to both (§6).
• We demonstrate the ease of combining back-end function-
ality using CirC. We use an SMT solver to optimize and
analyze R1CS compilation, and use a proof system to prove
knowledge of (1) a bug identiﬁed by an SMT solver and
(2) a high-value input identiﬁed by an ILP solver (§7).
Summarizing our key insights: (1) many subﬁelds rely on the
same abstraction, the EQC; (2) compiling to different EQCs
uses similar steps, and EQCs have similar performance char-
acteristics, so shared infrastructure makes sense; and (3) with
shared infrastructure, different EQCs can be combined in
service of new applications.
2. Background and related work
In this section, we start with a slightly more formal deﬁni-
tion of EQCs. Then, to set the stage for our evaluation (§5–§7),
we discuss our three example use cases: cryptographic proof
systems (§2.2) , automated veriﬁcation (§2.3), and constrained
optimization (§2.4). Finally, we describe related work (§2.5).
2.1. Existentially quantiﬁed circuits
We refer to the broad class of non-deterministic execution
this work targets as existentially quantiﬁed
substrates that
circuits (EQCs). EQCs share three key properties. First, they
are circuit-like: they comprise sets of wires taking values from
some domain (e.g., bits for a boolean circuit) and constraints
that express relationships among wire values (e.g., an AND
gate represents the constraint C = A ∧ B).
Second, EQCs are state free: unlike variables in a computer
program or registers in a CPU, wire values in an EQC do not
change during execution. In a boolean circuit, for example,
each gate’s output is determined by its inputs, which are either
the outputs of other gates or input wires.
2249
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
Third, EQCs have two kinds of inputs: explicit inputs, i.e.,
arguments supplied at the start of execution, and existentially-
quantiﬁed inputs, which may take any value consistent with
the explicit input values and the set of constraints. Consider
the trivial EQC ∃B.A ⊕ B = 0, where A is an explicit input
and ⊕ is boolean XOR: when A is true, B must be true. In the
language of formal logic, EQCs correspond to quantiﬁer-free
ﬁrst-order formulas.
In complexity-theoretic terms, we say that EQCs capture
non-deterministic, non-uniform computation [44, Ch. 6]. Their
non-determinism stems from the existentially quantiﬁed inputs
whose values are, in principle, “guessed” by the execution
substrate. Their non-uniformity reﬂects the fact that a circuit
of a given size encodes a computation for a ﬁxed-size input;
thus, for a given computation, computations with different
input lengths have distinct circuit representations.
2.2. Cryptographic proof systems
Probabilistic proof systems are powerful cryptographic
tools whose applications include verifying that outsourced
computations are executed correctly [6, 8, 45], implementing
private cryptocurrency transactions [1, 46], and defending
against hardware back-doors [47, 48]. In this section, we
describe the class of probabilistic proof systems CirC targets,
focusing on their computational model. Readers should consult
surveys [49, 50] for additional details.
At a high level, a probabilistic proof system is a crypto-
graphic protocol between two parties, a prover P and a veriﬁer
V, whereby P produces a short proof that convinces V that
∃w.y = Ψ(x, w), for Ψ a computation that takes input x and
witness w and returns output y. Several lines of work [7–
10, 41, 42, 51, 52] instantiate end-to-end built systems. Two
key features of these systems are succinctness—P’s proof is
small, as is V’s work checking it—and zero knowledge—an
accepting proof reveals nothing about the witness w other than
the truth of y = Ψ(x, w).
These systems comprise a compilation stage and a proving
stage. The proving stage applies complexity-theoretic and
cryptographic machinery to the compilation stage’s output,
allowing P to generate a proof and V to verify it. The compi-
lation stage, our focus in this work, takes a source program Ψ
(written, say, in a subset of C) and transforms it into a system
of arithmetic constraints C in vectors of formal variables
W, X, Y , such that ∃w.y = Ψ(x, w) ⇐⇒ ∃W.C(W, X, Y )
for X = x, Y = y. (Note that ∃W.C(W, X, Y ) is an EQC;
§2.1.) The primary ﬁgure of merit for a compiler is the size
of C: fewer constraints means less work for P to generate a
proof, and in some proof systems it also means a shorter proof
that is easier for V to verify.
The constraint formalism. The formalism used by most
proof systems is called a rank-1 constraint system (R1CS). An
R1CS instance C comprises a set of constraints over a ﬁnite
ﬁeld F (usually the integers modulo a prime p) of the form
(cid:104)Ai, Z(cid:105)·(cid:104)Bi, Z(cid:105) = (cid:104)Ci, Z(cid:105), where (cid:104)·,·(cid:105) is an inner product, Z
is the concatenation (W, X, Y, 1) ∈ Fn, and Ai, Bi, Ci ∈ Fn
are constants. In other words, each constraint asserts that the
product of two weighted sums of the wires in C equals a
third weighted sum, which generalizes arithmetic circuits. C
is satisﬁed when the values W, X, Y satisfy all constraints. To
generate a proof, P ﬁrst computes a satisfying assignment and
then executes the cryptographic proving machinery.
Compiling programs from languages like C to R1CS
instances is tricky. Domain differences are an immediate
concern: while C has a non-trivial type system, for R1CS
all computation must be encoded as arithmetic in F, which
can be awkward. For example, the assertion x (cid:54)= 0 has no
direct encoding as a rank-1 constraint. When F is the integers
mod p, by Fermat’s little theorem the assertion could be
rewritten as X p−1 = 1, but this costs O(log p) constraints;
p ≈ 2256 is common for security of the proof system, so
this is very costly. In this and similar cases, an important
optimization is to introduce advice in the form of entries in
the (existentially quantiﬁed) vector W . In our example, x (cid:54)= 0
becomes ∃W.W · X = 1: since only nonzero elements of F
have a multiplicative inverse, this constraint is satisﬁable iff
X (cid:54)= 0 ∈ F. For other examples see, e.g., [6, 10, 11, 34].
Beyond domain considerations lies a more insidious chal-
lenge: the fact that constraints cannot directly encode muta-
tion, control ﬂow, etc., so the compiler must transform input
programs to eliminate these constructs. We defer discussion
of this challenge to the next subsection.
2.3. SMT-based veriﬁcation
In this section we discuss SMT and SMT-LIB, then explain
how veriﬁers use these tools to prove properties of programs.
SMT solvers are tools that determine whether logical
formulas are unsatisﬁable (i.e., can never evaluate to true) or
satisﬁable (i.e., can evaluate to true); if satisﬁable, the SMT
solver provides a satisfying assignment to the variables in the
formula. For example, given the formula x∨ y, an SMT solver
may return a satisfying assignment of x to true and y to
false (or any other valid assignment). Free variables in SMT
formulas thus have existential semantics, which means that
SMT formulas are EQCs (§2.1). In addition to booleans, SMT
formulas can include terms from various theories, including
bit-vectors, arrays, uninterpreted functions, real and integer
arithmetic, etc. Theories are higher level than logical formulas,
so they make it easier for developers to use solvers.3 The SMT-
LIB [21] standard gives the semantics of each theory.
Compiling from high-level
to SMT. SMT
solvers are often applied in service of program correctness—
everything from test case generation to bug ﬁnding to veriﬁ-
cation. Typically, a veriﬁer translates a program and assertions
about that program (e.g., index is within bounds of array)
into SMT formulas (or similar). The veriﬁer then asks the
solver if the assertions make the program’s formula satisﬁable
or not, either ﬁnding bugs or verifying their absence.
languages
Compiling code into SMT formulas is challenging [26,
27, 53]. Since SMT (like R1CS) does not support mutable
variables or branching, programs must be substantially trans-
formed. As an example, consider this snippet of C code, and
its mutation-free translation:
// input program (x, y, z previously defined)
if (x < 20) { x = 2; }
else
{ y += z; }
3. Theories have other beneﬁts too: they allow solvers to use theory-speciﬁc
algorithms for faster solving, and they allow users to specify formulas over
inﬁnite domains (e.g., the integers), which booleans cannot represent.
2250
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
? 2
// mutation-free program
: x_0;
x_1 = x_0 < 20
y_1 = !(x_0 < 20) ? (y_0 + z_0) : y_0;
This snippet features variable mutations within an if-else
statement. By introducing new versions of the variables, and
guarding their new value by the condition of the statement,
we can rewrite the snippet without mutations. While simple
examples like this are easy enough to understand, eliminat-
ing mutation and branching quickly becomes complex. All
branches must be recorded, all mutations guarded, all loops
unrolled, and all program paths separately explored. Not only
is this process complex—it also produces large formulas.
2.4. Integer linear programs
each having form (cid:80)
(3) an objective function f (x) =(cid:80)
Mixed integer linear programs (ILPs) are a ubiquitous lan-
guage for constrained optimization. An ILP comprises (1) a set
of real variables: X = {x1, . . . , xn}, (2) a set of constraints,
i cixi ≤ b (for real constants ci, b),
i cixi (for real constants
ci) and (4) a subset of integral variables I ⊂ X. Given an
ILP, an assignment v : X → R is satisfying if it respects
all constraints and assigns integers to the variables in I. An
ILP can be infeasible (there are no satisfying assignments),
unbounded (the constraints do not entail an upper bound on f’s
value), or solvable. An ILP solver determines whether an ILP
is infeasible, unbounded, or solvable; if the ILP is solvable,
the solver searches for a satisfying variable assignment that
achieves the maximum value of f.
2.5. Related work
CirC is related to and inspired by LLVM [43] and
SUIF [54], but CirC targets EQCs instead of CPUs. MLIR [55]
generalizes the LLVM methodology with a toolkit for con-
structing and manipulating interlocking IRs; in other words,
MLIR is infrastructure for constructing compiler infrastruc-
ture. This work is orthogonal to CirC, which is compiler
infrastructure for a speciﬁc family of non-deterministic com-
putational models.
High-level synthesis (HLS) turns programs (say, in C) into
digital circuits ([56] surveys). While digital circuits appear
superﬁcially similar to EQCs, there are two key differences:
ﬁrst, digital circuits do not allow existential quantiﬁcation,
which is very important for efﬁciently compiling to EQCs.
Second, digital circuits are stateful; indeed, efﬁcient use of
stateful elements like ﬂip-ﬂops is a key focus of HLS.
Many compilers to speciﬁc EQCs exist; we discuss closely
related work below. The main difference between CirC and
these compilers is that CirC is infrastructure for compiling
to EQCs generally, not just SMT, R1CS, etc. Generalizing
existing compilers to support a wide range of EQCs would
require essentially duplicating the work of building CirC.
The other difference between CirC and existing work
is that most other work combines compilation with front-
end–based optimization strategies. As examples: KLEE [37]
combines a core constraint compilation engine with a path ex-
ploration front-end that forks at every branch; and Giraffe [48]
uses program analysis to “slice” programs, then compiles a
subset of these slices to proof system constraints. We don’t
currently support such strategies in CirC because they do not
generalize to all back-ends. For example, forking compiles
only a subset of program paths to constraints. This is ﬁne for
bug-ﬁnding, but is problematic for proof systems: some correct
executions might not induce a valid proof. Supporting certain
front-end–based optimization strategies is future work (§8).
Compilers for cryptography. A long line of prior work devel-
ops techniques for compiling to R1CS constraints. Ginger [34],
Zaatar [57], Pantry [7], and Buffet [11] compile a subset of C
and support proof-speciﬁc optimizations for rational numbers,
memory, key-value stores, complex control ﬂow, etc. Pinoc-
chio [8] also compiles a subset of C with techniques similar
to Ginger’s. Geppetto [9] consumes LLVM IR and provides
efﬁcient cryptographic primitives. xJsnark [10] consumes a
Java-like language and reﬁnes techniques from Buffet and
Geppetto. Zinc [14] and ZoKrates [12, 13] compile from
eponymous DSLs to R1CS using existing techniques. Finally,
Circom [15] is essentially a hardware description language that
relies on the programmer to write constraints.4
Another line of work [41, 42] uses hand-crafted constraints
that simulate a simple CPU,
then modiﬁes GCC to emit
code for that CPU; while conceptually simple, this entails
enormous overhead [11, §5]. Yet another approach, embodied
by libsnark [58], ZEXE [4], and Bellman [59], effectively uses
a macro assembler to compose hand-crafted R1CS “gadgets.”
Fairplay [33] is the earliest example of a compiler to
circuits for two-party computation (2PC); FairplayMP [60]
targets multi-party computation. Later works like Tasty [61],
HyCC [62], and Viaduct [63] optimize by matching pieces of
the source program to suitable cryptographic protocols.
CBMC-GC [64] adapts the CBMC [27] model checker
to emit boolean circuits for 2PC, implicitly leveraging the
similarities between compiling for model checking and for
2PC. Unlike CirC, however, CBMC-GC applies only to the
case of boolean circuits optimized to 2PC, rather than to EQCs
generally. Because of this, it cannot be used to compile to, say,
arithmetic constraints for proof systems, nor does it enable the
crossover applications that CirC does (§7).
Compilers for SMT. Many projects compile high-level pro-
grams or parts of programs to SMT in order to prove pro-
gram properties [27, 53, 65–76] (e.g., using bounded model
checking). For example, the CBMC veriﬁer [27, 66] translates
C programs and assertions about their correctness into SMT,
unrolling loops up to a given bound. Then, it uses a solver to
prove or refute veriﬁcation assertions. Other program analyzers
verify code written in veriﬁcation-speciﬁc domain speciﬁc
languages (DSLs) [77–80]. For example, Alive [77] presents
a DSL for peephole optimizations: programmers write opti-
mizations in the DSL and Alive automatically veriﬁes them.
Some projects even allow users to manipulate constraints from
within a higher-level language [81–84].
All of the projects listed above handle their own compila-
tion from a high-level language to SMT, but that is not always
the case: there are many projects that present infrastructure for
building veriﬁers [22, 23, 25, 26, 85–87]—often by handling
the details of SMT compilation—and there are many veri-
ﬁers that depend on them [88–91]. Intermediate Veriﬁcation
Languages [22, 86, 87, 92] (IVLs), for example, decouple
4. Section 4 discusses building CirC-based Circom and ZoKrates compilers.
2251
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
Circify
Library
Opt.
ZoKrates
ZKlog
C subset
CirC-IR
Circom
ILP
SMT
Opt.
R1CS
Solver
Solver
Proof
System
Figure 2. CirC’s architecture, with extensions (§3).
language details from veriﬁer details; the Boogie IVL [22]
targets SMT-like back-ends, so building a new veriﬁer just
requires translating a source language to the IVL. Taking a
slightly different tack, Rosette [26] builds a virtual machine
for symbolic execution, and Serval [88] uses it to lift inter-
preters into symbolic execution engines. CirC has a similar
but broader goal: it aims to decouple source languages from