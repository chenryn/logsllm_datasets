bership proof for an element y /∈ S, i.e., A has found l
tuples (α1, β1), (α2, β2), . . . , (αl, βl) such that h1(a1) = y,
hi(αi) = βαi−1
l = χ(S)
mod Nl. We use Corollary 2 and Equation 4 inductively on
the (constant) number of levels of the RSA tree to ﬁnd an
upper bound on the probability that the adversary can forge
proofs of membership. Using the property that the number
of levels of the RSA tree is O(1), we show that the probabil-
ity of a successful attack is negligible. We defer the complete
proof to the full version of the paper. 2
Complexity. In the static case, we do not have to compute
the witnesses each time we query for an element. Namely,
we can store the witnesses in the corresponding nodes of the
tree and therefore reduce the query complexity from O(nǫ)
to O(1) (since the depth of the tree is constant). We can
now present the main result of this section.
Theorem 4. Let 0  1 and κ > 1
ǫ be ﬁxed constants. The general idea
behind our approach for using the RSA tree to authenticate
hash tables is the following. Let S = {e1, e2, . . . , en} be the
set of elements we would like to authenticate. Instead of
building the RSA tree, T (ǫ), on the elements themselves, as
we did in the case of static sets, we consider the elements
to be in a hash table that has O(n/ logκ n) buckets and
each bucket contains O(logκ n) elements. Note that in this
case the internal nodes of the RSA tree have O(nǫ/ logκǫ n)
children. Overall, we build the same RSA tree, as before,
except that the leaves now hold prime representatives of the
accumulated bucket values instead of the elements.
1
In particular, consider a bucket L that contains the el-
ements x1, x2, . . . , xh (i.e., these elements lie in the same
bucket, since they have the same value according to the func-
tion used by the hash table to uniformly put elements in the
buckets). The accumulated bucket value of L is deﬁned as
AL = gr1(x1)r1(x2)...r1(xh)
mod N1. Therefore, by comput-
ing these accumulated values of all the buckets, we add one
additional level of accumulations in the RSA tree, that is,
instead of using l = ⌈ 1
ǫ ⌉ levels of accumulations, we are now
using l′ = l + 1 levels. Note that in this ﬁrst (additional)
level of accumulation, the number of elements that are ac-
cumulated is O(logκ n), and not O(nǫ/ logκǫ n) as before.
Queries and Veriﬁcation. Suppose we want to construct
the proof for an element x ∈ S. Let v0, v2, . . . , vl′ be the
path from x to the root r of the tree, r = vl′ . As before, the
proof Π(x) is the ordered sequence π1, π2, . . . , πl′ , where πi
is deﬁned in Equation 2. In order to achieve constant-time
queries we must avoid computing πi repeatedly for every sep-
arate query, and therefore we store precomputed witnesses.
Namely, for every non-leaf node v of the RSA tree (we con-
sider as leaves the elements within the buckets) that lies in
level 1 ≤ i ≤ l′, let N (v) be the set of its children. For every
j ∈ N (v) we store at node v the witness
j = gQ u∈N (v)−{j} ri(χ(u))
A(v)
i
mod Ni.
j1
, . . . , βl′ = A
j2
(vl′ )
jl′
, β2 = A(v2)
Therefore, when we query for x, the server follows the path
v0, v1, . . . , vl′ and collects the corresponding precomputed
witnesses β1 = A(v1)
for some
j1, j2, . . . , jl′ (βi is deﬁned in Equation 3). Since the depth of
the tree is constant (⌈ 1
ǫ ⌉ + 2), the time needed for querying
is O(1) (we assume that query time is the time to construct
the proof and not the time to search for the speciﬁc element,
which can however be achieved with another hash table data
structure in expected constant time). Finally, veriﬁcation
can be performed exactly as indicated by Equations 4 and
5 and, thus, takes also O(1) time.
Updates. We now describe how we can eﬃciently support
updates in the authenticated hash table. Suppose our hash
table currently holds n elements and the source wants to in-
sert an element x in the hash table. That element belongs to
a certain bucket L. Let v0, v2, . . . , vl′ be the path from the
newly inserted element to the root of the tree. Note that the
goal of the update algorithm is twofold: (1) All the RSA di-
gests χ(vi), 1 ≤ i ≤ l′ (note that χ(v0) = x), along the path
from bucket L to the root of the tree, need to be updated;
(2) For all nodes vi, 1 ≤ i ≤ l′, we have to update the local
witnesses A(vi)
where j ∈ N (vi). This is required to main-
tain the query complexity to be constant. Finally, note that,
whenever an update is performed, the source sends, together
with the signed RSA digest, the prime representatives of the
updated RSA digests along the path of the update. We use
the following result from [30] for eﬃciently maintaining up-
dated precomputed witnesses and overall achieving constant
query time.
j
Lemma 3
(O(n log n) Witness Updates [30]). Let N
be an RSA modulus. Given the elements x1, x2, . . . , xn, N
and g, without the knowledge of φ(N ), we can compute Ai =
gQ j6=i xj mod N for i = 1, . . . , n in O(n log n) time.
By using the above lemma, we can prove the following:
Lemma 4. Let 0  1/ǫ be ﬁxed constants.
Given a hash table for n elements with O(n/ logκ n) buckets
of expected size O(logκ n) and the RSA tree T (ǫ) built on
top of it, without the knowledge of φ(Ni) (i = 1, . . . , l′), we
can support updates in O(nǫ/ logκǫ−1 n) amortized expected
time.
Proof: (Sketch.) We use Lemma 3 for the internal nodes
and the buckets. Then, we note that over a course of O(n)
updates, there will be an expensive update. Therefore, we
can amortize and since we are using a two-universal hash
function to distribute elements in the bucket, all the results
hold in expectation. We defer the complete proof to the full
version of the paper. 2
Note that if we know φ(Ni) (i = 1, . . . , l′), we can sup-
port updates in O(1) amortized expected time (see details
in Section 5). This is because we can compute inverses and
update witnesses in constant time. However, rebuilding the
hash table is needed and the amortized expected time will
be in this case P t
= O(1). This is very impor-
tant in the three-party model, since the source can do the
updates even more eﬃciently. We are now ready to present
our main result in the three-party model:
i=1 O(1)+O(n)
t+1
Theorem 5. Let 0  1
ǫ be ﬁxed con-
stants. Under the strong RSA assumption, we can use the
RSA tree with precomputed witnesses to authenticate a dy-
namic hash table of n elements in the three-party model by
storing a data structure of size O(n) at both the source and
the server such that: (1) Our scheme is secure according to
Deﬁnition 3; (2) The amortized expected update time at the
server is O (cid:0)nǫ/ logκǫ−1 n(cid:1); (3) The amortized expected up-
date time at the source is O(1); (4) The query time is O(1);
(5) The size of the proof is O(1); (6) The veriﬁcation time
is O(1); (7) The client keeps space O(1); (8) The update
authentication information has size O(1).
Finally, note that if we restrict ourselves to the three-party
model, we can achieve constant amortized update time at
the untrusted server too, by keeping the update authenti-
cation information constant and increasing the query time
to expected O (nǫ/ logκǫ n). Namely, the source sends the
updated digests along the path of the update; therefore the
untrusted server does not have to perform the update itself.
However, this method does not use precomputed witnesses
and thus the query time is not constant. Namely, the query
time is expected O (nǫ/ logκǫ n), since it depends on the ran-
domness of the two-universal function used to distribute the
elements in the O(n/ logκ n) buckets. Therefore, we have the
following extended result for the three-party model (note
that in this case we do not need κ > 1
ǫ ):
Theorem 6. Let 0  0 be ﬁxed con-
stants. Under the strong RSA assumption, we can use the
RSA tree without precomputed witnesses to authenticate a
dynamic hash table of n elements in the three-party model
by storing a data structure of size O(n) at both the source
and the server such that: (1) Our scheme is secure accord-
ing to Deﬁnition 3; (2) The amortized expected update time
at the server is O(1); (3) The amortized expected update
time at the source is O(1); (4) The expected query time is
O (nǫ/ logκǫ n); (5) The size of the proof is O(1); (6) The
veriﬁcation time is O(1); (7) The client keeps space O(1);
(8) The update authentication information has size O(1).
However, as we will see next, this solution does not apply
to the two-party model, since in the three-party model we
have substantial help from the source.
We ﬁnally note that we can choose that scheme being
best suited for the application of interest: in particular, we
can use the scheme of Theorem 5 for applications where
updates do not happen very often and queries are intensive
and frequent, whereas we can use the scheme of Theorem 6
for applications where updates are much more frequent than
queries (e.g., auditing). Finally, we point out that in the
query cost of Theorem 6, there is a low-order term that is
absorbed in the O(·) notation. This term is O(logκ n) and is
the time needed to compute the witness within the bucket.
Therefore, parameter κ aﬀects (though not asymptotically)
the time to compute the witness within the bucket.
4.2 Two-Party Model
We now describe how we can implement an authenti-
cated hash table using the RSA tree with precomputed wit-
nesses in the two-party model. We recall that the two-party
model has the following main diﬀerences from the three-
party model:
1. The client locally stores (and updates) the RSA digest
and does not receive a signed RSA digest from the
trusted source, as it happens in the three party model;
2. The client is not issuing only queries to the untrusted
server but is also issuing updates;
3. There is no third trusted party and no PKI is used.
The query and the veriﬁcation for a certain element are done
exactly in the same way as in the three-party model, namely
both the query and veriﬁcation take time O(1). Moreover,
the updates at the untrusted server can also be performed in
the same way, namely in O (cid:0)nǫ/ logκǫ−1 n(cid:1) amortized time.
Suppose now the client wants to do an update, e.g., insert
an element x in the existing set of elements S. The client
should somehow be able to locally compute the new RSA
digest χ(S ∪ x), because the client cannot get the new digest
from the untrusted server as the untrusted server can return
a false digest. We now describe how the client can update
the digest. Let x belong to some bucket L. The server picks
another element y ∈ S that belongs to the same bucket and
sends the proof for y. Subsequently, the server performs the
update for x and, together with the previous proof, it sends
the new prime representatives along the update path. This
extended proof (which not only contains the ordinary proof
for y, but also the new prime representatives along the path)
is called consistency proof, for it is used for updates.
The client now veriﬁes y (by using the previous RSA di-
gest) and has all the information needed to compute the new
RSA digest that corresponds to the set S ∪ {x} (or S − {x}
in the case of a deletion). The most important step is to up-
date the bucket digest (where the update takes place) and
then propagate the update along the path, by executing O(1)
exponentiations and also checking that the new updated di-
gests are consistent with the new prime representatives sent
by the untrusted server (as part of the consistency proof).
The client is able to update the RSA digest in O(1) time,
since the client knows φ(Ni) and therefore can compute in-
verses (see details in Section 5). In the case of a query, the
proof provided by the server has similar structure as in the
update case and is simply called veriﬁcation proof.
Note that when the server rebuilds the hash table, the
client has to receive all the elements and locally rebuild the
hash table. Therefore, the amortized space the client needs
is O(1) and the consistency proof has O(1) amortized size.
We can now state our main result for the two-party model:
Theorem 7. Let 0  1
ǫ be ﬁxed constants.
Under the strong RSA assumption, we can use the RSA tree
with precomputed witnesses to authenticate a dynamic hash
table of n elements in the two-party model by storing a data
structure of size O(n) such that: (1) Our scheme is secure
according to Deﬁnition 3; (2) The amortized expected update