# 【技术分享】攻击Windows平台NVIDIA驱动程序
|
##### 译文声明
本文是翻译文章，文章来源：googleprojectzero.blogspot.tw
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[overXsky](http://bobao.360.cn/member/contribute?uid=858486419)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**前言**
现代图形驱动程序是十分复杂的，它提供了大量有希望被利用的攻击面，可以使用具有访问GPU权限的进程（比如Chrome的GPU进程）进行提权和沙箱逃逸。在这篇文章中，你们将看到如何攻击NVIDIA内核模式的Windows驱动程序，以及在此期间我发现的一些bug。我的这项研究是Project
Zero的一个20％项目的一部分，在此期间我总共发现了[16个漏洞](https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=vendor%3ANVIDIA+finder%3Aochang&colspec=ID+Type+Status+Priority+Milestone+Owner+Summary&cells=ids)。
**内核WDDM接口**
图形驱动程序的内核模式组件被称为显示微端口驱动程序。微软的[官方文档](https://msdn.microsoft.com/en-us/library/windows/hardware/ff570589\(v=vs.85\).aspx)为我们提供了一个很好的结构图，总结了各个组件之间的关系：
在显示微端口驱动程序
的DriverEntry()函数中，[DRIVER_INITIALIZATION_DATA](https://msdn.microsoft.com/en-us/library/windows/hardware/ff556169\(v=vs.85\).aspx)结构被由厂商实现的函数（实际上与硬件进行交互）的回调进行填充，该函数通过DxgkInitialize()传递给dxgkrnl.sys（DirectX的子系统）。这些回调要么由DirectX内核子系统调用，要么在某些情况下直接从用户模式代码调用。
**DxgkDdiEscape**
一个众所周知的潜在漏洞的入口点是 DxgkDdiEscape
接口。它可以直接在用户模式下被调用，并且可以接受任意数据，该数据以厂商指定的方式（本质上是IOCTL）解析和处理。在后文中，我们将使用术语“逃逸”来表示由DxgkDdiEscape
函数支持的特定命令。
截止写作时，NVIDIA有着数量惊人的400多个逃逸，所以这里也是我花费了绝大部分时间的地方（这些逃逸中的绝大多数是否有必要处在内核空间中是一个问题）：
    // (这些结构体的名称是我命名的)
    // 表示一组逃逸代码
    struct NvEscapeRecord {
      DWORD action_num;
      DWORD expected_magic;
      void *handler_func;
      NvEscapeRecordInfo *info;
      _QWORD num_codes;
    };
    // 有关特定逃逸代码的信息
    struct NvEscapeCodeInfo {
      DWORD code;
      DWORD unknown;
      _QWORD expected_size;
      WORD unknown_1;
    };
NVIDIA为每一个逃逸都单独实现了其私有数据（DXGKARG_ESCAPE
结构体中的pPrivateDriverData），格式为“头部+数据”。头部格式如下：
    struct NvEscapeHeader {
      DWORD magic;
      WORD unknown_4;
      WORD unknown_6;
      DWORD size;
      DWORD magic2;
      DWORD code;
      DWORD unknown[7];
    };
这些逃逸由32位代码（上面NvEscapeCodeInfo结构体的第一个成员）标识，并根据它们的最高有效字节进行分组（从1到9）。
在处理每个逃逸代码之前都会做一些验证。具体来说，每个 NvEscapeCodeInfo
应当包含头部后面的逃逸数据的预期大小。这将根据NvEscapeHeader中的大小来验证，NvEscapeHeader自身又通过传递给
DxgkDdiEscape的PrivateDriverDataSize字段进行验证。但是，预期大小有时可能为0（通常当逃逸数据为可变大小时），这意味着逃逸处理程序负责进行自身的验证。这将导致一些bug（[1](https://bugs.chromium.org/p/project-zero/issues/detail?id=936)，[2](https://bugs.chromium.org/p/project-zero/issues/detail?id=940)）。
在逃逸处理程序中发现的大多数漏洞（总共[13](https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=reporter%3Aochang+escape&colspec=ID+Type+Status+Priority+Milestone+Owner+Summary&cells=ids)个）都是些非常基本的bug，例如盲目地向用户提供的指针进行写入操作，向用户模式公开未初始化的内核内存以及不正确的边界检查。还有许多我发现的问题（例如OOB读取）没有报告出去，因为它们似乎没有可以利用的地方。
**DxgkDdiSubmitBufferVirtual**
另一个有趣的入口点是DxgkDdiSubmitBufferVirtual函数，它首次在Windows 10和WDDM
2.0中被引入，主要用来支持GPU虚拟内存（而旧的 DxgkDdiSubmitBuffer / DxgkDdiRender
函数已被弃用）。这个函数相当复杂，并且还接受来自用户模式驱动程序提交的每一个由厂商特定的数据。我在[这里](https://bugs.chromium.org/p/project-zero/issues/detail?id=1012)找到了一个bug。
**其他**
还有[一些其他](https://msdn.microsoft.com/en-us/library/windows/hardware/ff570147\(v=vs.85\).aspx)WDDM函数接受厂商特定的数据，但快速浏览后没有发现任何有趣的东西。
**暴露的设备**
NVIDIA暴露了可由任何用户打开的一些其他设备：
    \. NvAdminDevice
似乎用于
[NVAPI](https://developer.nvidia.com/nvapi)。很多ioctl处理程序似乎都会调用DxgkDdiEscape。
    \. UVMLite {Controller，Process *}
可能与NVIDIA的“统一内存”相关。在[这里](https://bugs.chromium.org/p/project-zero/issues/detail?id=880)找到1个bug。