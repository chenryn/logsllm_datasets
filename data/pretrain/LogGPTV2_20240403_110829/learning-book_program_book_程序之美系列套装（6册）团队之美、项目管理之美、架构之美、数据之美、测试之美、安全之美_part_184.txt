---
## Page 1038
在该系统中，(user, application_id) 对被设为主键。Facebook随后会“重新创建”这些cookie，如同用户向应用栈发出后续请求时浏览器所做的那样。

此解决方案较为简单，在开发者从HTML栈方式转向FBML服务方式的过程中，仅需进行少量调整。值得注意的是，当用户决定在该应用提供的HTML栈上导航时，这种信息将不可用。另一方面，这有助于有效地区分用户在Facebook上的应用体验和在应用的HTML站点上的体验。

### 6.5.2 FBJS

当应用作为FBML服务运行，而不是直接由用户的浏览器使用时，Facebook无法执行浏览器端的脚本。直接返回未经修改的开发者内容（这是一个不充分的解决方案，在FBML小节开始时已讨论过）可以解决这个问题，但这违反了Facebook对显示体验的约束。例如，当加载用户的个人资料页面时，Facebook不希望在加载事件上触发弹出窗口。然而，完全限制JavaScript会排除许多有用的功能，如AJAX或动态操作页面内容而不重新加载页面。

相反，FBML在解释开发者提供的树和其他页面元素时考虑到了这些约束。此外，Facebook提供了一些JavaScript库，使这些场景易于实现且受控。这些修改共同构成了Facebook的平台JavaScript仿真套件，称为FBJS，它通过以下几点使应用既动态又安全：
- 重写FBML属性，确保实现虚拟文档范围。
- 延迟激活脚本内容，直到用户在页面或元素上发起动作。
- 提供一些Facebook库，以受控方式实现常见的脚本使用场景。

显然，并非所有实现自有平台的容器站点都需要这些修改，但FBJS展示了新Web架构所需的几种解决方案，以克服一些困难。我们在这里仅展示了一般思路，FBJS的许多部分仍需不断改进，与FBML和可扩展的专有JavaScript库融合。

---
## Page 1039
首先，JavaScript通常可以访问包含它的整个文档对象模型（DOM）树。但在平台画布页面中，Facebook包含了大量自己的元素，不允许开发者对其进行修改。解决方案是什么？在用户提供的HTML元素和JavaScript符号前加上前缀，即应用的ID（如app1234567）。通过这种方式，如果开发者的JavaScript试图调用不允许的alert()函数，将会调用未定义的函数app1234567_alert，并且只有开发者自己提供的那部分文档的HTML可以通过document.getElementById这样的JavaScript代码访问。作为FBJS需要对提供的FBML（包括元素）进行这种转换的一个例子，我们创建了一个简单的FBML页面，实现了AJAX功能，如例6-30所示。

**例6-30：一个使用FBJS的FBML页面**
```
These links demonstrate the Ajax object:
AJAX Time! 

function do_ajax (type){
    var ajax = new Ajax(); // FBJS Ajax library.
    ajax.responseType = type;
    switch (type) {
        case Ajax.RAW:
            ajax.ondone = function (data) {
                document.getElementById('ajax1').setTextValue(data);
            };
            break;
    }
    ajax.post('http://www.fettermansbooks.com/testajax.php?t=' + type);
}
```

FBML和我们的FBJS修改将这些输入转换为如例6-31所示的HTML。这个例子中的NOTE注释指出了每种需要的转换，不是实际输出的一部分。

**例6-31：HTML和JavaScript输出的例子**
```
These links demonstrate the Ajax object:
AJAX Time! 

var app = new fbjs_sandbox(1234567);
app.validation_vars = {};
app.context = 'b7f9b437d9f7';
app.contextd = '';
app.data = {"user": 8055, "installed": false, "loggedin": true};
app.bootstrap();

function a1234567_do_ajax (a1234567_type) {
    var a1234567_ajax = new a1234567_Ajax();
    a1234567_ajax.responseType = a1234567_type;
    switch (a1234567_type) {
        case a1234567_Ajax.RAW:
            a1234567_ajax.ondone = function (a1234567_data) {
                a1234567_document.getElementById('ajax1').setTextValue(a1234567_data);
            };
            break;
    }
    a1234567_ajax.post('http://www.fettermansbooks.com/testajax.php?t=' + a1234567_type);
}
```

以下是这段代码中的NOTE解释：
- **NOTE 1**: Facebook需要包含其特殊的JavaScript，包括fbjs_sandbox的定义，以渲染开发者的脚本。
- **NOTE 2**: 记得前面FBML初始化流程中的`rewrite_attrs`元素吗？FBML会重写该列表中的属性，变成Facebook特有的功能；这是FBJS的一部分。因此，这里的`onclick`会激活页面的其他元素，这些元素在用户执行该动作之前是非激活的。
- **NOTE 3**: 注意在HTML和脚本中的元素如何加上了该应用的应用ID作为前缀。这意味着开发者对`alert()`的调用将变成对`app1234567_alert()`的调用。如果Facebook的后台JavaScript在这个上下文中允许这个方法，它将最终执行`alert()`。如果不允许，这将是未定义的调用。类似地，这种加前缀的方式实际上为DOM树提供了命名空间，所以对该文档某些部分的改变仅限于开发者定义的部分。类似的沙盒技术也允许开发者提供限制范围的CSS。
- **NOTE 4**: Facebook提供了一些专门的JavaScript对象，如Ajax和Dialog，目的是支持（并且常常改进）常见的使用场景。例如，通过Ajax()对象发出的请求实际上可以获得FBML作为结果，因此它们被重定向到Facebook域的一个代理上，在这里Facebook完成在线的FBML到HTML的转换。

支持FBJS需要对FBML进行改动、专门的JavaScript和AJAX代理等服务器端组件，以绕过应用Web架构的一些限制，但结果非常强大。开发者因此可以享受大多数JavaScript功能（甚至改进了这些功能，如支持FBML的AJAX），而平台确保了应用内容提供了用户在Facebook上期望的受控体验，这完全是通过技术手段来实现的。

### 6.5.3 服务改进小结

解决了新的n层社会关系应用的概念带来的剩余问题后，我们改进了服务架构，添加了COOKIE和FBJS等功能，如图6-6所示。

**App服务**
- App数据
- SQL对象
- App逻辑层 (obj)
- App显示层
- $_GET, $_POST, $_COOKIE

---

这样优化后的文本更加清晰、连贯和专业，同时保留了原文的主要内容和结构。