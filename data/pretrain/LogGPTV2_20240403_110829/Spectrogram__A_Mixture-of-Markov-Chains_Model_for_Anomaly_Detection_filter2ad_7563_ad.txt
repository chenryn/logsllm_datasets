### Sample Generation and Attack Simulation

To augment our dataset, we processed the initial samples through ShellForgeâ€™s [2] ASCII encryption engine, generating an additional 2000 samples. We also incorporated four port-80 worms: Code-Red, Code-Red II, IISMedia, and IISWebdav. These worms propagate via the URI and message body, targeting web servers at the memory layer. Approximately half of the Local/Remote File Inclusion (L/RFI) samples and a quarter of the SQL injection samples were actual attacks captured on our servers. The remaining samples were collected from websites hosting web-exploit code, such as milw0rm.com, xssed.com, and databasesecurity.com. As previously mentioned, each instance is unique.

### Performance Evaluation

#### ROC Curves for File-Inclusion Attacks

The Receiver Operating Characteristic (ROC) curves for file-inclusion attacks on both the student and department servers are shown in Figure 6. The PHP file inclusion attack was particularly challenging to detect because it does not require actual malicious code; only the address of the malicious code is needed. This makes detection more difficult. Increasing the n-gram size significantly improved detection performance.

**Figure 6: ROC Curves for File-Inclusion Attacks**
- **(a)** Student server - File-Inclusion
- **(b)** Department server - File-Inclusion

#### False Positive Rates

Table 3 provides the false positive rates for the full dataset of requests collected over one month. The significant difference in false positive rates between Tables 1 and 2 (1% vs. 0.00006%) is due to the data distribution. Most web requests are easily classified, and using unique samples helps to accurately evaluate the classifier's capacity without bias from the sample distribution.

**Table 3: False Positive Rates for Full Dataset**
- **Server**: Total Requests, False Positives
- **Department**: 2,652,262, 118
- **Student**: 4,206,176, 287

### Accuracy Results

#### Spectrogram with Markov Chains

Table 1 shows the accuracy results for Spectrogram using a mixture of five Markov chains and an n-gram size of 10 (SG-5). This setting was chosen for a good balance between empirical accuracy and performance speed. The split ratios yielded approximately 15,131 training and 796 testing samples for the student server, and 3,127 training and 165 testing samples for the department server. The datasets were randomized, and the average of five trials is reported.

**Table 1: Accuracy Comparison with FP Rate Held at 1%**
- **Attack Type**: L/RFI, JS XSS, SQL-Inj., Shellcode, ASCII Shc., Code-Red, Code-Red II, IIS-Media, IIS-Webdav
- **Accuracy and Detection**: Various percentages and checkmarks indicating detection

#### Anagram Results

Table 2 presents the results for Anagram, which highlights the issue of underfitting when increasing n-gram sizes. While Anagram detects attacks with higher accuracy using larger n-grams, it struggles to generalize well. In contrast, Spectrogram's Markov-chain factorization allows for higher n-gram sizes while maintaining low false positive rates on the unbiased dataset.

**Table 2: Anagram Results**
- **FP Rate and Detection**: Various percentages and checkmarks indicating detection

### Runtime Analysis

Table 4 shows the run-times for Spectrogram at various n-gram sizes when running on 15,927 samples. Training time depends on the data and the convergence rate of the gradient ascent learning algorithm. A 2-gram model took longer to train because it did not fit the data well, leading to slower stabilization.

**Table 4: Run-Times for Spectrogram**

### Discussion

#### Data Normalization

Reducing unnecessary features in the data improves the signal-to-noise ratio. Effective methods include un-escaping strings, removing white-space and numbers, and converting to lowercase. These operations make the input space tighter and mitigate some obfuscation methods. Normalization should be customized for each server and adjusted based on the observed data.

#### Mixture and N-Gram Sizes

The ROC curves demonstrate clear benefits from using larger n-gram sizes, showing improvements over the 2-gram model. The ability to model complex patterns with larger n-grams enhances detection accuracy.

**Figure 7: ROC Curves for JavaScript XSS**
- **(a)** Student server - JavaScript XSS
- **(b)** Department server - JavaScript XSS

### Conclusion

The results indicate that Spectrogram, with its Markov-chain factorization, outperforms Anagram in terms of generalization and false positive rates, especially with larger n-gram sizes. The optimal n-gram size can be estimated through cross-validation and by generating ROC plots.