-
-
(cid:3)
(cid:3)
(cid:4)
(cid:3)
(cid:4)
(cid:3)
(cid:4)
(cid:4)
(cid:3)
(cid:4)
(cid:3)
(cid:3)
C
(cid:3)
Verilog
(cid:3)
(cid:3)
(cid:3)
(cid:3)
C
(cid:3)
C
(cid:4)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:4)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
-
(cid:3)
-
-
-
(cid:3)
(cid:3)
(cid:4)
(cid:4)
(cid:3)
-
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
-
(cid:3)
(cid:4)
(cid:4)
(cid:4)
-
(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:2)(cid:3)
(cid:4)
(cid:3)
-
-
(cid:4)
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:3)
-
(cid:2)(cid:3)
(cid:4)
(cid:4)
(cid:4)
(cid:4)
(cid:2)(cid:3)
(cid:2)(cid:3)
EMP-toolkit
Obliv-C
ObliVM
TinyGarble
Wysteria
ABY
SCALE-MAMBA
Sharemind
PICCO
Frigate
CBMC-GC
Development
language
C++
OCaml, C
Java
C/C++
OCaml
C++
Python,C++
C/C++
C/C++
C++
C++
TABLE III: Details on architectural and implementation details. Partial support ((cid:2)(cid:3)) is explained in Section V-D.
languages to stand-alone environments. Some frame-
works are Extensions of an existing language. These may
modify or extend existing compilers to add functionality
or take a compiler intermediate state as input. Library
frameworks are fully implemented in an existing lan-
guage. They generally deﬁne a secure type class and
methods for circuit construction and protocol execution.
2) Computation Model: We consider whether the un-
derlying computation model is over an Arithmetic ﬁeld or
is based on Boolean circuits. Garbled circuit implemen-
tations can generate circuits On-the-Fly, starting runtime
execution before the circuit is fully generated. This can
reduce resource consumption, allow dynamic array and
loop bounds, and reduce overall program runtime.
3) I/O: Input is typically read from a ﬁle, but some
frameworks allow Arbitrary Formatting, rather than a
speciﬁc input format. (We’ve produced input generation
scripts for our sample programs.) We note whether the
framework supports Different Input
types from each
party. Frameworks should support Array Output (a (cid:2)(cid:3)
indicates array elements must be returned one at a time)
and Multiple Output, where a single party receives two or
more output values in a single computation (a (cid:2)(cid:3) indicates
multiple values must be wrapped in a struct).
In Section VI, we comment speciﬁcally on restrictions
in the I/O ﬁle formats, including support for arbitrary-
size integers. We recognize that many frameworks are
produced in an academic setting that may not value
“engineering problems” such as I/O, but we found that
the signiﬁcant usability impact of these capabilities make
them worth discussing in this survey.
E. Performance
In this work, we focus on usability and do not bench-
mark framework performance (e.g. run-time, bandwidth,
memory-usage, circuit depth). We believe a quantitative
evaluation of our sample programs would not accurately
represent the performance abilities of each framework.
There are several reasons why theoretical efﬁciency
metrics are not always applicable in practical MPC archi-
tectures, and we found that direct comparison between
different models was often misleading. Circuit size and
depth have different implications in garbled circuit and
secret-sharing-based protocols, and many frameworks
never generate a full circuit for comparison. Execution
time varies based on the framework architecture, and
preprocessing phases and other variations in execution
architecture further complicate timing measurements.
Variations in protocol family and threat model mean
that most frameworks are not directly comparable, and
our choice of benchmarking function will have a major
effect on the relative speed of the frameworks. Our sam-
ple programs are designed to reveal the expressive capa-
bilities of a framework and do not necessarily represent a
practical MPC use case. A stand-alone measurement for
a single run of one of our programs would not take into
account the context (typically part of a larger system)
in which a secure computation may be evaluated in
practice.
We do not wish to disservice incomparable frame-
works by providing concrete numbers for impractical
test cases. Although a worthwhile and practically useful
endeavor, producing a realistic testing framework is
beyond the scope of this project.
VI. FRAMEWORKS
In this section, we discuss each framework in detail,
elaborating on limitations noted in the tables and on the
overall usability of each framework. We make recom-
mendations on appropriate use for each framework. We
emphasize that many of these frameworks are academic
projects, and are therefore subject to the engineering
constraints of such an endeavor. Even as we describe the
limitations of these compilers, we wish to emphasize the
signiﬁcant contributions that each has made to the ﬁeld.
1227
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
A. EMP toolkit
EMP toolkit [122] is an extensive set of MPC frame-
works based on garbled circuits. The core toolkit in-
cludes an oblivious transfer library, secure type classes,
and several custom protocol implementations. We tested
two protocols: a semi-honest implementation of Yao’s
garbled circuit protocol, and a maliciously secure pro-
tocol with authenticated garbling [124]. The toolkit
includes three maliciously secure protocols we did not
study: a two-party computation that checks input valid-
ity [88], a two-party computation library [123], and a
multi-party protocol [125].
a) Semi-honest: The implementation of Yao’s gar-
bled circuit protocol
is a C library deﬁning secure
type classes and operations. We found it intuitive for
non-expert C developers. The library structure allows
developers to use C arrays and structs to hold secure
values, and provides simple mixed-mode computation
and can generate circuits on-the-ﬂy.
The framework supports arbitrary-size integers and
ﬂoating-point numbers. Although arbitrarily large values
can be initialized from a string, output is restricted to C
types; larger values can be (inefﬁciently) returned as bit
arrays. There is little explicit language documentation,
but the code was relatively clear. The library can output
a protocol-agnostic circuit, but this is not documented.
b) Malicious Authenticated Garbling: This library
is primarily an implementation of a custom garbling
protocol. We were able to run the included pre-compiled
circuit examples and several of our own examples. How-
ever, supporting features are limited: functions must be
encoded as a circuit prior to computation using the semi-
honest library, and I/O is encoded in Boolean arrays.
Recommendation: We recommend the the EMP-
toolkit semi-honest library for general use. The entire
platform is well suited to academics looking to imple-
ment a novel circuit-based protocol due to the available
circuit generation and cryptographic libraries, but we
note that the end-to-end ﬂow is not seamless.
B. Obliv-C
Obliv-C is an extension of C that executes a two-party
garbled circuit protocol. The main language addition is
an obliv qualiﬁer, applied to C types and constructs.
Typing rules enforce that obliv types remain secret unless
explicitly revealed. Code within oblivious functions and
conditionals cannot modify public data, except within
a qualiﬁed ~obliv block, in which the code is always
executed. These rules allow programmers to reason about
data security and develop modular libraries.
The compiler combines these extended functionali-
ties with supporting C code to produce an executable.
The executable generates circuits on-the-ﬂy. This allows
circuit sizes to depend on values not known during
compilation, but may result in under-optimized circuits.
We successfully used an Obliv-C ORAM library,
Absentminded Crypto Kit3, which implements several
ORAM variations and other useful primitives [131], [50].
Obliv-C extends C but many of the examples imply
an independent-language architecture, separating Obliv-
C code from C code. Example programs typically read,
process, and output data in native C code, performing
only the secure computation in Obliv-C code. However,
this abstraction is not enforced: it is possible to perform
I/O and call native C functions in Obliv-C ﬁles. While
many of the examples implement a strict separation
between supporting C code and secure Obliv-C code,
example documentation uses a mixed paradigm.
Several groups have used Obliv-C to implement se-
cure functionalities,
including linear regression [62],
decentralized certiﬁcate authorities [83], aggregated pri-
vate machine-learning models [119], classiﬁcation of
encrypted emails [70] and stable matching [49].
Recommendation: Obliv-C is a robust garbled circuit
framework. We recommend it to developers for general
use and to academics who wish to implement and
optimize useful libraries such as ORAM.
C. ObliVM
a
Java-like
ObliVM compiles
called
ObliVM-lang and executes a two-party garbled circuit
protocol. It aims to provide a language intuitive to non-
experts while implementing domain-speciﬁc program-
ming abstractions for improved performance.
language
ObliVM-lang allows custom data types and type infer-
ence. It implements a built-in efﬁcient ORAM scheme.
ObliVM natively supports ﬁxed-size integers, and in-
cludes a library for arbitrary sized integers.
However, documentation is limited, both for the lan-
guage (we identiﬁed several undocumented reserved key-
words), and for general usage. I/O is limited: it requires
a non-human-readable format, and we did not ﬁnd a
method to return complex types (including structs and
arrays) or more than 32 bits of information. We did not
successfully implement the crosstabulation example.
Recommendation: Although ObliVM implements ad-
vanced cryptographic constructs, its usability for prac-
tical applications is signiﬁcantly limited by its minimal
documentation and restricted I/O functionality.
D. TinyGarble
TinyGarble [118] repurposes hardware circuit genera-
tion tools to create optimized circuits appropriate for a
garbled circuit protocol. It takes a three-step approach:
ﬁrst, it converts a function deﬁned in Verilog to a netlist
format. Then it converts the netlist format to a custom
3https://bitbucket.org/jackdoerner/absentminded-crypto-kit
1228
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:48:10 UTC from IEEE Xplore.  Restrictions apply. 
circuit description (SCD) and securely evaluates the
Boolean circuit using a garbled circuit protocol.
We found that the ﬁrst step of this process requires
a closed-source logic synthesis tool (the Synopsys De-
sign Compiler) that converts a Verilog ﬁle to the un-
standardized netlist format. The authors reference an
open-source tool, Yosys Open SYnthesis Suite, but we
were unable to compile any examples (conversions from
Yosys-produced netlist ﬁles to SCD failed). The source
code for TinyGarble includes some pre-compiled netlist
ﬁles. While we could see every step for these examples
(Verilog source, netlist ﬁle, computation output), we
were unable to compile examples end-to-end and thus
do not make any claims about language functionality.
TinyGarble is preceded by JustGarble [12], a library
that garbles and evaluates circuits. JustGarble does not
include communication or circuit generation and is
therefore not a general-purpose framework. The gar-
bled circuit implementation in TinyGarble is a strict
improvement over JustGarble, including recent protocol
and circuit optimizations.
Recommendation: TinyGarble aims to leverage power-
ful circuit optimizers developed for producing hardware
circuits. Unfortunately, from a usability standpoint, the
lack of compatibility for Verilog compilers and lack of
standards around netlist formats meant that we were
unable to compile or run any new examples using the
TinyGarble framework. We believe, however, that the
MPC community could beneﬁt greatly by leveraging the
power of existing circuit optimizers.
E. Wysteria
Wysteria [111] introduces a novel high-level func-
tional programming language. It guarantees that a dis-
tributed secure computation produces the same output
as a single trusted party. Wysteria supports an arbitrary
number of computation parties, and the software contri-
bution includes a front-end language, a type checker, and
a run-time interpreter that executes a Boolean-circuit-
based GMW protocol implementation [36].
Wysteria supports mixed-mode computation via a lan-
guage construct called a secure block. A secure block
is initialized with a set of parties and their inputs.
All operations in the block’s scope are compiled to a
Boolean circuit and executed as a separate computation.