      {
        case 0xA:
          mod_opcodes();
          break;
        case 0xD:
          switch_opcodes();
          break;
        case 0x12:
          vm_calc();
          break;
        case 0x1C:
          sub_4023E0();
          break;
        case 0x1F:
          sub_402190();
          break;
        case 0x20:
          write_reg_r0();
          break;
        default:
          break;
      }
      vmwrite(0x681E, v2 + r8_);
      return vmwrite(0x681C, r4);
    }
虽然不知道上面几种指令对应哪个分支，不过根据参数和逻辑大体猜测vmcall对应vm_calc，invd对应switch_opcodes，rdmsr对应mod_opcodes。（函数重命名过）  
可以先看vm_calc：
    void vm_calc()
    {
      int (*v0)(void); // ST2C_4
      unsigned int eax_; // [esp+18h] [ebp-14h]
      int idx; // [esp+28h] [ebp-4h]
      eax_ = (unsigned int)r0 >> 24;
      idx = (BYTE2(r0) & 0xF) + 9 * (((((unsigned int)r0 >> 16) & 0xFF) >> 4) & 0xF);
      if ( (unsigned __int16)r0 >> 8 == 0xCC )
        p_flag = (char *)&flag;
      else
        p_flag = (char *)&flag_rev;
      if ( eax_ == op_load_[0] )
      {
        regs_p[idx] = *(_DWORD *)&p_flag[4 * (unsigned __int8)r0];
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == op_add[0] )
      {
        regs_p[idx] += *(_DWORD *)&p_flag[4 * (unsigned __int8)r0];
        regs_p[idx] &= 0xFFu;
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == op_minus )
      {
        regs_p[idx] -= *(_DWORD *)&p_flag[4 * (unsigned __int8)r0];
        regs_p[idx] &= 0xFFu;
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == op_div )
      {
        regs_p[idx] = (unsigned int)regs_p[idx] / *(_DWORD *)&p_flag[4 * (unsigned __int8)r0];
        regs_p[idx] &= 0xFFu;
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == op_mult )
      {
        regs_p[idx] *= *(_DWORD *)&p_flag[4 * (unsigned __int8)r0];
        regs_p[idx] &= 0xFFu;
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == op_xor )
      {
        regs_p[idx] ^= *(_DWORD *)&p_flag[4 * (unsigned __int8)r0];
        regs_p[idx] &= 0xFFu;
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == op_xor_comp )
      {
        regs_p[idx] ^= *(_DWORD *)&p_flag[4 * (unsigned __int8)r0 - 4]
                     + *(_DWORD *)&p_flag[4 * (unsigned __int8)r0]
                     - *(_DWORD *)&p_flag[4 * (unsigned __int8)r0 + 4];
        regs_p[idx] &= 0xFFu;
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == op_xor_hi )
      {
        regs_p[idx] ^= 16 * *(_DWORD *)&p_flag[4 * (unsigned __int8)r0];
        regs_p[idx] &= 0xFFu;
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == op_or )
      {
        regs_p[idx] |= *(_DWORD *)&p_flag[4 * (unsigned __int8)r0];
        regs_p[idx] &= 0xFFu;
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == op_xor_comp2 )
      {
        regs_p[idx] ^= *(_DWORD *)&p_flag[4 * (unsigned __int8)r0 + 4] ^ *(_DWORD *)&p_flag[4 * (unsigned __int8)r0 - 4] ^ (*(_DWORD *)&p_flag[4 * (unsigned __int8)r0 - 8] + *(_DWORD *)&p_flag[4 * (unsigned __int8)r0] - *(_DWORD *)&p_flag[4 * (unsigned __int8)r0 + 8]);
        regs_p[idx] &= 0xFFu;
        do_nothing(regs_p[idx], idx);
      }
      else if ( eax_ == 0xDD )
      {
        v0 = (int (*)(void))(r8_ + vmread(0x440C));
        sub_4015AB();
        sub_401675(r4, v0);
      }
      else if ( eax_ == 0xFF )
      {
        check_data();
      }
      else
      {
        DbgPrint("[Gurren] %-40s [%p]\n", "DEFAULT: value of eax", eax_);
      }
    }
拿`vmcall(0x30133403)`举例：  
把参数分成四个byte，第一个byte就是opcode，第二个byte对应一个9×9矩阵中的坐标(1,
3)，表示对矩阵的这个位置的值做操作，下一个byte对应flag的正反（0xcc为正，否则为反），最后一个byte表示要取flag的第几位。
9种操作很好还原：['load','add','minus','div','mul','xor','xor2','xorhi','or','xor3']
然后0xFF是check，把9×9矩阵分为9个区域，要求每个区域（逻辑上应该是每个区域，不过代码好像写错了）里1-9九个数字各唯一出现一次。
接下来就是还原opcode，初始opcode一定是经过了一次mod_opcodes()，然后数次switch_opcodes()。
mod_opcodes里就两种情况，都试一下就好了。
switch_opcodes里有三种情况，分别是0x4433奇偶互换，0x4434循环向左移动1，和0x4437一个奇怪的变换（仔细看这个变换，里面有坑）。
在`sub_401690`有一次调用：
    .text:00401724                 mov     eax, 4437h
    .text:00401729                 invd
剩下的都是在`vmcalls`里。于是可以把vmcalls里的vmcode分成3段，这三段由invd分割，使用了不同的opcode，具体opcode可以通过变换得到。
然后恢复一下9×9矩阵里的值，通过ida 引用可以找到几处调用，初始化应该是在  
`sub_402690`中，然后在`sub_402190`中也有两种变换，还不清楚是否调用。但是根据规则，9×9矩阵每个块里都必须是1-9，所以vmcode里没改过的位置都应该是1-9。
简单尝试可以发现`sub_402190`中的两个变换都进行了一次，顺序无所谓。为了方便就直接从IDA中拖出来伪代码用c跑，得到最终的9×9矩阵：
    #include 
    #include 
    #include 
    using namespace std;
    int mm[9][9];
    int main()
    {
        unsigned int regs[81] = {
        0x00000007, 0x000000CE, 0x00000059, 0x00000023, 0x00000009, 0x00000005, 0x00000003, 0x00000001, 
        0x00000006, 0x00000002, 0x00000006, 0x00000005, 0x0000007D, 0x00000056, 0x000000F0, 0x00000028, 
        0x00000004, 0x00000059, 0x0000004D, 0x0000004D, 0x0000004B, 0x00000053, 0x00000009, 0x00000001, 
        0x0000000F, 0x00000057, 0x00000008, 0x000000D3, 0x00000038, 0x0000006F, 0x00000299, 0x000000E1, 
        0x00000036, 0x00000002, 0x00000076, 0x00000357, 0x0000006A, 0x000000AA, 0x00000374, 0x000001A4, 
        0x0000005D, 0x00000056, 0x00000057, 0x00000007, 0x0000007F, 0x00000008, 0x000000A8, 0x000000B0, 
        0x00000009, 0x00000032, 0x00000002, 0x00000006, 0x00000463, 0x00000469, 0x00000005, 0x000000C6, 
        0x00000002, 0x00000025, 0x00000068, 0x00000033, 0x00000032, 0x00000067, 0x00000001, 0x00000071, 
        0x00000001, 0x00000507, 0x00000063, 0x00000008, 0x00000006, 0x000000A3, 0x000005F5, 0x00000006, 
        0x00000031, 0x000003B8, 0x00000065, 0x00000200, 0x00000028, 0x00000057, 0x00000001, 0x000000A5, 
        0x00000009
        };  
        int ma[54]={13,01,32,0,15,28,27,12,26,8,11,25,30,24,02,23,31,4,53,35,42,38,50,41,55,57,40,47,46,43,36,52,54,51,48,33,80,74,71,83,82,67,88,65,86,85,81,62,73,56,61,66,84,77};
        int i,j,k,l,m,result,v6,v3,v4,v7;
        for(i =0; i = result )
                break;
              regs[9 * (i + 5) + i + 5 - m] = regs[9 * (i + 5) + i + 5 - (m + 1)];
            }
        }
        regs[72] = v6;
        v6 = regs[80];
        v7 = regs[8];
        for ( i = 8; i; --i )
          regs[10 * i] = regs[9 * (i - 1) + i - 1];
        regs[0] = v6;
        for ( j = 1; j < 9; ++j )
          regs[8 * j] = regs[8 * j + 8];
        result = 8 * j;
        regs[8 * j] = v7;
        v3 = regs[76];
        result = regs[36];
        v4 = regs[36];
        for ( k = 8; k; --k )
        {
          result = 9 * k;
          regs[9 * k + 4] = regs[9 * (k - 1) + 4];
        }
        regs[4] = v3;
        for ( l = 0; l < 8; ++l )
        {
          regs[l + 36] = regs[l + 37];
          result = l + 1;
        }