---
## Page 345
第9章平台层防御
ModSecurity提供的全面请求层保护，WAF必须实现它才能提供充分的SQL注入保护：
REQUEST_BASENAME
REQUEST_BODY
REQUEST_COOKIES
REQUEST_COOKIES_NAMES
REQUEST_FILENAME
REQUEST_HEADERS
REQUEST_HEADERS_NAMES
REQUEST_LINE
REQUEST_METHOD
REQUEST_PROTOCOL
REQUEST_URI
REQUEST_URI_RAW
3）请求标准化
可以使用多种方式编码攻击字符串以避免字符串被检测到并战胜简单的输入验证过滤器。
实际上，ModSecurity能够应对任何复杂的编码场景。它支持大量转换函数，可以将这些函数
按任意顺序多次应用到每条规则上。下面列出了ModSccurity参考手册中的转换函数：
base 64Decode
base 64DecodeExt
base64Encode
cmdLine
compressWhitespace
cssDecode
escapeSeqDecode
hexDecode
hexEncode
htmlEntityDecode
jsDecode
length
1owercase
md5
none
normalisePath
normalisePathWin
parityEven7bit
parity0dd7bit
parityzero7bit
removeNu118
removekhitespace
replaceComments
removeCommentsChar
removeComments
replaceNulls
urlDecode
ur1DecodeUn1
urlEncode
sha1
331
---
## Page 346
SQL注入攻击与防御（第2版）
trimLeft
trimRight
trim
如果内置函数因为某个原因无法满足需求，可以使用ModSecurity支持的Lua脚本语言来
构建自定义的转换函数。
4）响应分析
WAF在减轻SQL注入的影响方面还有另外一个关键特性—抑制关键信息泄露，比如详
细的SQL错误消息。下面是ModSecurity核心规则集的 Outbound规则文件(modsecurity_crs_50_
outbound.conf)中的一条实际的带外(outbound)规则：
SecRule RESPONSE_BODY "(?:Microsoft OLE DB Provider for SQL
Server (? : , (1, 20)7error
*800 (?: 04005 | 40e31) * . (1, 40)7Timeout expired)
\ (0x80040e31\) Timeout expired) |internal server
error,*?part of the server has crashed or it has a
configuration error\,lcannot connect to the server: timed
1= (400
"phase: 4, rev: *2.2 . 3', t:none, capture, ct1:auditLogParts=+E, b1ock,
msg:*The application is not
13′, tag: *oWASP_TOP_10/A6′, tag: ′PCI/6.5.6′, severity:′3′,setvar: *
tx.msg=§ (rule .msg) ', setvar:tx,outbound_anomaly_score=+$(tx,erro
I_anomaly_score), setvar:tx,anomaly_score=+$ (tx.error_anomaly_sc
ore) , setvar : tx. 3 (rule , 1d) AVAILABILITY/APP_NOT_AVAIL-
$[matched_var_name}=${tx. 0} *
适当的响应，比如禁止将错误返回给攻击者，或者提供替换的错误编码或错误消息以迷惑自动
客户端和扫描器。
这种响应分析和错误抑制并未消除SQL注入漏洞，对SQL盲注也没有任何帮助，但它仍
然是一种重要的深层防御安全机制。
5）入侵检测能力
最后，WAF应该可以被动监视应用的行为，遇到可疑的行为时能采用行动，并能在SQL
注入事件之后为取证分析（forensic analysis)保持一个不可否认的事件日志。该日志应该提供用
于判断应用程序是否受到攻击的信息，以及用于重新生成攻击字符串所需要的足够信息。先不
谈阻塞和拒绝恶意输入，单是在不修改一行代码的前提下向应用程序添加入侵检测的能力就足
以成为使用WAF的一种强有力的理由。在SQL注入事件之后执行取证分析时，没有比不得不
依赖Web服务器日志文件更让人沮丧的事情了。该文件通常只包含请求中的一小部分数据。
总结一下，使用ModSecurity可以阻止SQL注入攻击、修复已知的 SQL注入漏洞、检测
攻击企图并抑制那些通常会为SQL注入漏洞利用提供便利的SQL错误消息。大体上介绍了
ModSecurity和WAF后，接下来我们看一些可以看作WAF的解决方案，不过它们不如WAF
健壮。根据情况的不同，这些方案有时非常有效，并且在部署成本和需要的资源方面会潜在地
更使宜些。
332
---
## Page 347
第9章平台层防街
9.2.2截断过滤器
大多数WAF实现了截断过滤器模式或者在总体架构中包含了一种或多种实现。过滤器是
一系列独立的模块，可以将它们链接到一起并在请求资源（比如，Web页面、URL、脚本等）的
核心处理过程之前或之后执行处理操作。过滤器之间没有具体的依赖关系，可以在不影响现有
过滤器的前提下添加新过滤器。这种模块性使得过滤器可以跨应用重用。在部署阶段可以将过
滤器作为Web服务器插件添加到应用程序中，也可以在应用程序配置文件中通过动态激活来
添加过滤器。
过滤器适合执行跨请求和响应（与核心应用逻辑是松耦合）的集中的、可重复的任务。过滤
器还适用于输入验证、将请求/响应记录到日志以及转换输出响应等安全功能。接下来将介绍
两种常见的过滤器实现—Web服务器插件(plug-in）和应用框架模块（module)。可以将这两种实
现用于实时SQL注入保护。图9-1展示了它们各自作为发送给Web浏览器的请求和从Web浏
览器返回的响应面被执行的过程。
应用
浏览器
应用概架
星%E9M
图9-1描述Web服务器和应用过滤器的简图
1.Web服务器过滤器
可以将过滤器实现成Web服务器模块/插件，它们能对核心请求和响应进行扩展以便处理
Web服务器平台的API。基本上，Web服务器处理的请求和响应会经历一系列阶段，在每个阶
自定义对请求的处理。所有这些操作均独立于其他可能已经注册的Web服务器模块和Web应
用的底层逻辑。这种特性使Web服务器模块成为实现过滤器的一种不错的选择。Apache、
Netscape(Oracle/Sun)、IS(Intemet 信息服务）等流行的 Web 服务器平台均支持这种架构。遗
的是，由于这些平台均发布了自己的API，因而无法跨Web服务器平台来利用这些模块。
Web服务器模块很明显的优点是：它们不针对特定的Web 应用框架或编程语言。例如，
称为ISAPI过滤器的IIS插件既可用于验证并监视针对传统的ASP及ASPNETWeb应用的请
求，也可以转换这些请求响应的内容。如果将Web服务器配置成使用连接器（connector，一种
将请求发送给相应的资源处理程序的过滤器）或者反向代理服务器模式，就可以充分利用过滤
器来真正保护任何Web应用（例如，可以使用IIS ISAPI过滤器保护J2EE、PHP和ColdFusionWeb
应用）。最后，由于过滤器是针对每个Web页面请求来执行的，因而性能非常关键。通常使用
原生编程语言（例如C或C++)实现Web服务器过滤器，这样做虽然速度很快，但却会潜在地引
入新的要考虑的漏润类型，比如缓冲区溢出和格式字符串问题。
333
---
## Page 348
SQL注入攻击与防御（第2版）
Web服务器模块是运行时（runtime）安全的重要组成部分，因为请求和响应会处理它们公布
的API。可以根据具体的需要来扩展Web服务器的这一行为，比如为SQL注入保护编写一个
过滤器。幸运的是，我们可以使用多种可免费获取的针对SQL注入保护的Web服务器浏览器
实现。我们已经介绍过ModSecurity，它是一种能够提供相当多的 SQL注入保护的Apache API
模块。接下来简单介绍一下UrIScan和WebKnight，它们是集成到ⅡISWeb服务器平台的ISAPI
过滤器，能够提供SQL注入保护。
1) UrIScan
2008年6月，Microsoft 发布了UrIScan 2.5(最初是作为ⅡIS Lock Down Tool的一部分）的升
级版3.1。与前一版一样，UrIScan3.1也是一种能够阻塞特定恶意请求的免费的ISAPI过滤器。
不过，它面向的是应用层攻击（具体来说也就是SQL注入)，因为它是为响应从2008年初开始
感染大量Web站点的SQL注入端虫而发布的。这个新版本支持通过创建自定义的规则来阻塞
特定的恶意请求。不过，其保护只局限于查询字符串、头和cookie。可以将这些规则应用到承
载在服务器上的任何Web资源，比如经典ASP和ASP.NET资源。新版本还提高了常用的IIS
写日志的便利性，支持logging-only模式，可使用urlscan.ini文件进行配置。
遗撼的是，UrIScan不支持正则表达式且不能保护POST数据，这两种限制使得它无法成
为SQL注入保护最好的解决方案，只能成为一种次佳方案。由于易于安装，因面对于那些无
法修改代码且需要一种快速的权宜解决方案的合法应用程序来说，它非常有用。
可以访间 http:/leam.iis.net/page.aspx/938/urlscan-3-reference/以获取关于 UrIScan 的更多信息，
并可J  从 htp://www.microsoff.com/downloads/details.aspx?familyidEE41818F-3363-4E24-9940-
321603531989上下载它的32位版本，或者从http://www.microsoft.com/downloads/details.aspx?
FamilyID=361e5598-c1bd-46b8-b3e7-3980e8bdf0de 下载它的 64 位版本。
2) WebKnight
与UrIScan一样，WebKnight也是一种阻塞特定恶意请求的IIS ISAPI过滤器。它拥有UrIScan
提供的所有特性。到目前为止，相比UrIScan，它最大的优势是可以检查POST数据中的恶意输
入。WebKnight具有很高的配置性并附带了GUI，GUI使得它相比UrIScan更易于配置。事实上，
可以将UrlScan的设置导入到WebKnight 中。遗的是，和UrlScan一样，WebKnight 也不支
持正则表达式，因而只能局限于黑名单关键字验证。就 SQL注入而言，WebKnight 是一种比
UrIScan更好的解决方案，因为它具有更全面的请求覆盖范围。WebKnight同样易于安装，但
它缺少正则表达式和肯定安全模型的支持，这使得它更适合作为应对自动SQL注入螺虫的一
种快速的权宜解决方案或初期的防御机制。可以从www.aqtronix.com上下载WebKnight。
工具与陷阱.
了解过滤器
在使用过滤器保护应用免受SQL注入之前，一定要理解过滤器的工作原理和它所
提供的保护类型，虽然过滤器是易受攻击的运行时安全工具，但如果不能完全理解它们
的行为和安全模型，那么便会产生一种错误的安全认识，Microsoft的UrIScan3.1就是
个很好的例子，它只提供了查询字符串、头和cookie保护，带易受SQL注入攻击的POST
参数的页面将暴露给漏洞的利用者。
334
---
## Page 349
第9章平台层防御
2.应用程序过滤器
也可以使用Web应用的编程语言或框架来实现过滤器。其架构与Web服务器插件的架构
类似：模块代码在请求和响应经历一系列阶段的过程时执行。可以使用ASP.NET的
System.Web.IHttpModule和javax.servlet.Filter接口来实现过滤器模式，之后可以在不修改代码
的前提下将它们添加到应用中并在应用程序的配置文件中显式地激活它们。下面列出了自定义
的J2EEFilter类的doFilter方法的示例代码。每个请求/响应对会因为J2EEWeb 源(JSP文件、
servlet等）的请求而调用该方法：
public class SqlInjDetectionFilter implements Fi1ter {
public void doFilter (ServletRequest req, ServletResponse res,
chain filterChain) throws IOException, ServletException
//检查请求数据，寻找恶意字符
doDetectSqlI(rep, res) /
//调用链中的下一个过滤器
chain,doFi1ter (servletRequest, servletResponse) :
应用程序过滤器确实适合于运行时（runtime）保护，开发时它们可以独立于应用程序，部署
时则可以作为独立的.dll或jar文件并且能立即激活。这意味着在特定的机构中部署该解决方案
的速度更快，因为不需要修改Web服务器配置（在很多机构中，应用开发人员没有Web服务器
的访问权限，所以必须与Web服务器团队协调以使修改与Web服务器过滤器相关的配置）。因
为使用与应用程序相同的编程语言来实现这些过滤器，所以它们可以扩展或紧密封装现有的应
用程序行为，基于同样的原因，这些过滤器的功能只能用于构建在同一根架上的应用（请参考
与Web服务器过滤器类似，应用程序过滤器也可以向易受攻击的Web应用添加安全特性，
比如恶意请求检测、预防和日志记录。因为可以使用功能丰富的面向对象编程语言（比如Java
和C#）来编写这些特性，所以它们通常更易于编码且不会引入新的漏洞类（比如缓冲区溢出）。可
以使用免费的应用过滤器 OWASP ESAPI WAF(OWASP Enterprise Sccurity API 的一部分)和 Secure
ParameterFilter(SPF)检测并阻塞SQL注入攻击。OWASPESAPIWAF是一款J2EE过滤器，可
以从 www.owasp.org/index.php/Category:OWASP_ Enterprise_Security_API 上下载。SPF 是—款
ASP.NET HttpModule,可以从 http:/spf.codeplex.com/上下载。
工具与陷阱.
使用ASP.NET和IIS保护Web应用
可以借助ASP.NET代码模块并通过将文件类型（php、asp、pl等）映射到ASP.NET
的ISAPIDLL中来对未构建在.NET框架之上、但运行在IIS上的Web应用(PHP、经典
ASP、Perl等）进行处理。可以在1IS的应用程序配置中使用“ApplicationConfiguration”
1“Mappings”标签配置该操作.对于这种情况，现在可以在非ASP.NET的Web应用上
利用执行输入验证和日志记录的ASPNETHtpModule，不过，对请求和响应执行的操
作会存在限制，尤其是在响应转换方面
335
---
## Page 350