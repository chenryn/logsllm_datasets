See MIPS Run, 2nd Edition
Reverse Engineering for Beginners
《程序员的自我修养——链接、装载与库》
《加密与解密，第 4 版》
接下来，就可以进入软件漏洞的学习了，从 CTF 切入是一个很好的思路。跟随本书的脚步，可
以学习到常见漏洞（溢出、UAF、double-free 等）的原理、Linux 漏洞缓解机制（Stack canaries、NX、
ASLR 等）以及针对这些机制的漏洞利用方法（Stack Smashing、Shellcoding、ROP 等），此阶段还
可以通过读 write-ups 来学习。在掌握了这些基本知识之后，就可以尝试分析真实环境中的漏洞，或
者分析一些恶意样本，推荐资料如下。
RPI CSCI-4968 Modern Binary Exploitation
Hacking: The Art of Exploitation, 2nd Edition
The Shellcoder’s Handbook, 2nd Edition
Practical Malware Analysis
《漏洞战争：软件漏洞分析精要》
有了实践的基础之后，可以学习一些程序分析理论，比如数据流分析（工具如 Soot）、值集分
析（BAP）、可满足性理论（Z3）、动态二进制插桩（DynamoRio、Pin）、符号执行（KLEE、angr）、
模糊测试（Peach、AFL）等。这些技术对于将程序分析和漏洞挖掘自动化非常重要，是学术界和工
业界都在研究的热点。感兴趣的还可以关注一下专注于自动化网络攻防的 CGC 竞赛。推荐资料如下。
UT Dallas CS-6V81 System Security and Binary Code Analysis
AU Static Program Analysis Lecture notes
如果是走学术路线的朋友，阅读论文必不可少，一开始可以读综述类的文章，对某个领域的研
究情况有全面的了解，然后跟随综述去找对应的论文。个人比较推荐会议论文，因为通常可以在作
者个人主页上找到幻灯片，甚至会议录像视频，对学习理解论文很有帮助。如果直接读论文则感觉
会有些困难，这里推荐上海交通大学“蜚语”安全小组的论文笔记。坚持读、多思考，相信量变终
会产生质变。
为了持续学习和提升，还需要收集和订阅一些安全资讯（FreeBuf、SecWiki、安全客）、漏洞披
露（exploit-db、CVE）、技术论坛（看雪论坛、吾爱破解、先知社区）和大牛的技术博客，这一步
可以通过 RSS Feed 来完成。随着社会媒体的发展，很多安全团队和个人都转战到了 Twitter、微博、
微信公众号等新媒体上，请果断关注他们（操作技巧：从某个安全研究者开始，遍历其关注列表，
然后递归，即可获得大量相关资源），通常可以获得最新的研究成果、漏洞、PoC、会议演讲等信息
甚至资源链接等。
最后，我想结合自己以及同学毕业季找工作的经历，简单谈一谈二进制方向的就业问题。首先，
从各种企业的招聘需求来看，安全岗位相比研发、运维和甚至算法都是少之又少的，且集中在互联
网行业，少部分是国企和银行。在安全岗位中，又以 Web 安全、安全开发和安全管理类居多，而二
第 1 章
CTF 简介 ┃ XXIII
进制安全由于企业需求并不是很明朗，因此岗位仅仅存在于几个头部的甲方互联网公司（如腾讯、
阿里等）的安全实验室，以及部分乙方安全公司（如 360、深信服等）中，主要从事安全研究、病毒
分析和漏洞分析等工作，相对而言就业面狭窄，门槛也较高。随着各种漏洞缓解机制的引入和成熟，
软件漏洞即使不会减少，也会越来越难以利用，试想有一天漏洞利用的成本大于利润，那么漏洞研
究也就走到头了。所以，如果不是对该方向有强烈的兴趣和死磕一辈子的决心，考虑到投入产出比，
还是建议选择 Web 安全、安全管理等就业前景更好的方向。好消息是，随着物联网的发展，大量智
能设备的出现为二进制安全提供了新的方向，让我们拭目以待。
1.3.2
CTF 经验
CTF 对于入门者是一种很好的学习方式，通过练习不同类型、不同难度的 CTF 题，可以循序渐
进地学习到安全的基本概念、攻防技术和一些技巧，同时也能获得许多乐趣，并激发出更大的积极
性。其次，由于 CTF 题目中肯定存在人为设置的漏洞，只需要动手将其找出来即可，这大大降低了
真实环境中漏洞是否存在的不确定性，能够增强初学者的信心。
需要注意的是，对于初学者来说，应该更多地将精力放到具有一定通用性和代表性的题目上，
仔细研究经典题目及其 write-up，这样就很容易举一反三；而技巧性的东西，可以在比赛中慢慢积累。
另外，选择适合自身技术水平的 CTF 是很重要的，如果跳过基础阶段直接参与难度过大的比赛，可
能会导致信心不足、陷入自我怀疑当中。
就 CTF 战队而言，由于比赛涉及多个方向的技术，比拼的往往是团队的综合实力，因此，在组
建战队时要综合考虑，使各个面向都相对均衡。赛后也可以在团队内做日常的分析总结，拉近感情、
提升凝聚力。
随着计算机技术的发展、攻防技术的升级，CTF 本身也在不断更新和改进，一些高质量的 CTF
赛事往往会很及时地跟进，在题目中融入新的东西，建议积极参加这类比赛。
1.3.3
对安全从业者的建议
此部分内容是 TK 教主在腾讯玄武实验室内部例会上的分享，看完很有感触，经本人同意，特
转载于此，以飨读者。
1. 关于个人成长
（1）确立个人方向，结合工作内容，找出对应短板
该领域主要专家们的工作是否都了解？
相关网络协议、文件格式是否熟悉？
相关技术和主要工具是否看过、用过？
（2）阅读只是学习过程的起点，不能止于阅读
工具的每个参数每个菜单都要看、要试
第 1 章
CTF 简介 ┃ XXIV
学习网络协议要实际抓包分析，学习文件格式要读代码实现
学习老漏洞一定要调试，搞懂每一个字节的意义，之后要完全自己重写一个 Exploit
细节、细节、细节，刨根问底
2. 建立学习参考目标
（1）短期参考比自己优秀的同龄人。阅读他们的文章和工作成果，从细节中观察他们的学习方
式和工作方式。
（2）中期参考你的方向上的业内专家。了解他们的成长轨迹，跟踪他们关注的内容。
（3）长期参考业内老牌企业和先锋企业。把握行业发展、技术趋势，为未来做积累。
3. 推荐的学习方式
（1）以工具为线索
一个比较省事的学习目录：Kali Linux
学习思路，以 Metasploit 为例：遍历每个子目录，除了 Exploit 里面还有什么？每个工具怎
么用？原理是什么？涉及哪些知识？能否改进优化？能否发展、组合出新的功能？
（2）以专家为线索
你的技术方向上有哪些专家？他们的邮箱、主页、社交网络账号是什么？他们在该方向上
有哪些作品，发表过哪些演讲？跟踪关注，一个一个地学。
4. 如何提高效率
做好预研，收集相关前人成果，避免无谓的重复劳动
在可行性判断阶段，能找到工具就不写代码，能用脚本语言写就不要用编译语言，把完美
主义放在最终实现阶段
做好笔记并定期整理，遗忘会让所有的投入都白白浪费
多和同事交流，别人说一个工具的名字可能让你节约数小时
处理好学习、工作和生活
无论怎么提高效率，要成为专家，都需要大量的时间投入
参考资料
[1]
诸葛建伟. CTF 的过去、现在与未来[Z/OL].
[2]
教育部高等学校信息安全专业教学指导委员会. 2016 年全国大学生信息安全竞赛参赛指南
(创新实践能力大赛)[EB/OL].(2016-05-21).
[3]
LiveOverflow. What is CTF? An introduction to security Capture The Flag competitions[Z/OL].
第 1 章
CTF 简介 ┃ XXV
[4]
Trail of Bits. CTF Field Guide[EB/OL].
[5]
百度百科. ctf(夺旗赛)[EB/OL].
第 2 章
二进制文件 ┃ XXVI
第 2 章
二进制文件
2.1
从源代码到可执行文件
一个 C 语言程序的生命是从源文件开始的，这种高级语言的形式更容易被人理解。然而，要想
在操作系统上运行程序，每条 C 语句都必须被翻译为一系列的低级机器语言指令。最后，这些指令
按照可执行目标文件的格式打包，并以二进制文件的形式存放起来。
本节我们首先回顾编译原理的基础知识，然后以经典著作 The C Programming Language 中的第
一个程序 hello world 为例，讲解 Linux 下默认编译器 GCC（版本 5.4.0）的编译过程。
2.1.1
编译原理
编译器的作用是读入以某种语言（源语言）编写的程序，输出等价的用另一种语言（目标语言）
编写的程序。编译器的结构可分为前端（Front end）和后端（Back end）两部分。前端是机器无关的，
其功能是把源程序分解成组成要素和相应的语法结构，通过这个结构创建源程序的中间表示，同时
收集和源程序相关的信息，存放到符号表中；后端则是机器相关的，其功能是根据中间表示和符号
表信息构造目标程序。
编译过程可大致分为下面 5 个步骤，如图 2-1 所示。
（1）词法分析（Lexical analysis）：读入源程序的字符流，输出为有意义的词素（Lexeme）；
（2）语法分析（Syntax analysis）：根据各个词法单元的第一个分量来创建树型的中间表示形式，
通常是语法树（Syntax tree）；
（3）语义分析（Semantic analysis）：使用语法树和符号表中的信息，检测源程序是否满足语言
定义的语义约束，同时收集类型信息，用于代码生成、类型检查和类型转换；
（4）中间代码生成和优化：根据语义分析输出，生成类机器语言的中间表示，如三地址码。然
后对生成的中间代码进行分析和优化；
（5）代码生成和优化：把中间表示形式映射到目标机器语言。
第 2 章
二进制文件 ┃ XXVII
图 2-1
编译过程
2.1.2
GCC 编译过程
首先我们来看 GCC 的编译过程，hello.c 的源代码如下。
#include 
int main() {
printf("hello, world\n");
}
在编译时添加“-save-temps”和“--verbose”编译选项，前者用于将编译过程中生成的中间文件
保存下来，后者用于查看 GCC 编译的详细工作流程，下面是几条最关键的输出。
$ gcc hello.c -o hello -save-temps --verbose
......
/usr/lib/gcc/x86_64-linux-gnu/5/cc1 -E -quiet -v -imultiarch x86_64-linux-gnu
hello.c -mtune=generic -march=x86-64 -fpch-preprocess -fstack-protector-strong
-Wformat -Wformat-security -o hello.i
......
/usr/lib/gcc/x86_64-linux-gnu/5/cc1 -fpreprocessed hello.i -quiet -dumpbase
hello.c -mtune=generic -march=x86-64 -auxbase hello -version
-fstack-protector-strong -Wformat -Wformat-security -o hello.s
......
as -v --64 -o hello.o hello.s
......
/usr/lib/gcc/x86_64-linux-gnu/5/collect2 -plugin -dynamic-linker
/lib64/ld-linux-x86-64.so.2 -z relro -o hello
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crt1.o
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crti.o
/usr/lib/gcc/x86_64-linux-gnu/5/crtbegin.o -L/usr/lib/gcc/x86_64-linux-gnu/5
第 2 章
二进制文件 ┃ XXVIII
-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu
-L/usr/lib/gcc/x86_64-linux-gnu/5/../../../../lib -L/lib/x86_64-linux-gnu
-L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib
-L/usr/lib/gcc/x86_64-linux-gnu/5/../../.. hello.o -lgcc --as-needed -lgcc_s
--no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed
/usr/lib/gcc/x86_64-linux-gnu/5/crtend.o
/usr/lib/gcc/x86_64-linux-gnu/5/../../../x86_64-linux-gnu/crtn.o
$ ls
hello
hello.c
hello.i
hello.o
hello.s
$ ./hello
hello, world
可以看到，GCC 的编译主要包括四个阶段，即预处理（Preprocess）、编译（Compile）、汇编
（Assemble）和链接（Link），如图 2-2 所示，该过程中分别使用了 cc1、as 和 collect2 三个工具。其
中 cc1 是编译器，对应第一和第二阶段，用于将源文件 hello.c 编译为 hello.s；as 是汇编器，对应第
三阶段，用于将 hello.s 汇编为 hello.o 目标文件；链接器 collect2 是对 ld 命令的封装，用于将 C 语言
运行时库（CRT）中的目标文件（crt1.o、crti.o、crtbegin.o、crtend.o、crtn.o）以及所需的动态链接
库（libgcc.so、libgcc_s.so、libc.so）链接到可执行 hello。
图 2-2
GCC 的编译阶段
2.1.3
预处理阶段
GCC 编译的第一阶段是预处理，主要是处理源代码中以“#”开始的预处理指令，比如“#include”、
“#define”等，将其转换后直接插入程序文本中，得到另一个 C 程序，通常以“.i”作为文件扩展名。
在命令中添加编译选项“-E”可以单独执行预处理：
$ gcc -E hello.c -o hello.i
hello.i 文件的内容如下所示。
# 1 "hello.c"
第 2 章
二进制文件 ┃ XXIX
# 1 ""
# 1 ""
......
extern int printf (const char *__restrict __format, ...);
......
int main() {
printf("hello, world\n");
}
通过观察我们可以得知预处理的一些处理规则，如下。
递归处理“#include”预处理指令，将对应文件的内容复制到该指令的位置；
删除所有的“#define”指令，并且在其被引用的位置递归地展开所有的宏定义；
处理所有条件预处理指令：“#if”、“#ifdef”、“#elif”、“#else”、“#endif”等；
删除所有注释；
添加行号和文件名标识。
2.1.4
编译阶段
GCC 编译的第二阶段是编译，该阶段将预处理文件进行一系列的词法分析、语法分析、语义分
析以及优化，最终生成汇编代码。在命令中添加编译选项“-S”，操作对象可以是源代码 hello.c，
也可以是预处理文件 hello.i。实际上在 GCC 的实现中，已经将预处理和编译合并处理。
$ gcc -S hello.c -o hello.s
$ gcc -S hello.i -o hello.s -masm=intel -fno-asynchronous-unwind-tables
GCC 默认使用 AT&T 格式的汇编语言，添加编译选项“-masm=intel”可以将其指定为我们熟悉
的 intel 格式。编译选项“-fno-asynchronous-unwind-tables”则用于生成没有 cfi 宏的汇编指令，以提
高可读性。hello.s 文件的内容如下所示。
.file
"hello.c"
.intel_syntax noprefix
.section.rodata
.LC0:
.string "hello, world"
.text
.globl
main
.type
main, @function
main:
push