ing virus was introduced simultaneously with the predator
20 seconds into the simulation (the purpose of the delay was
to allow the size of the simulated e-mail queues to stabi-
lize). Note that while this simulation is inspired by ﬂash
worms, no simulation of the network congestion likely to
be caused by a ﬂash worm was done. An additional differ-
ence between this experiment and the earlier ones is that,
8-th of the machines were vulnerable to
in this experiment, 1
the virus, while in the earlier experiments, 100% of the ma-
chines were vulnerable.
Based on these experiments, the correlation between the
ratio of predator fanout to virus fanout and the clean-up
time was measured. The results, shown in Figure 11, in-
2 the virus fanout is sufﬁ-
dicate that a predator fanout of 1
cient to quickly eliminate viruses from the network under
the simulated conditions. This is an encouraging result, as
as a fanout ratio of less than one means that the amount of
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Virus Fanout = 64, 100/800 (1/8th) Vulnerable Machines
Virus Fanout = 16, 100/800 (1/8th) Vulnerable Machines
120
100
80
60
40
20
i
s
e
n
h
c
a
M
d
e
t
c
e
f
n
I
Predator Fanout = 04
Predator Fanout = 08
Predator Fanout = 16
Predator Fanout = 32
120
100
80
60
40
20
i
s
e
n
h
c
a
M
d
e
t
c
e
f
n
I
Predator Fanout = 02
Predator Fanout = 04
Predator Fanout = 08
Predator Fanout = 16
0
0
100
200
400
300
500
Time in seconds
600
700
800
0
0
100
200
400
300
500
Time in seconds
600
700
800
Figure 10. Effect of fanout on cleanup times for rapidly-spreading viruses.
predator trafﬁc is likely to be less than the virus trafﬁc.
4. Predator Design
When designing a predator, the goal is to minimize the
number of machines which become infected and disinfect
infected machines as quickly as possible, while keeping per-
formance overhead to a minimum, and minimizing the risks
introduced by the predator. To reach these goals, the de-
signer must choose between several competing alternatives.
The ﬁrst choice is “should the predator be immunizing or
non-immunizing?” A non-immunizing (i.e., non-patching)
predator could be used in cases where no patch is yet avail-
able, the risks involved in patched are judged to be too great,
or a predator-driven application of the patch would cause
too much disruption to ongoing computations.
In these cases, a non-immunizing predator could be used
to reduce the number of infected machines to very low level
until patches are available and/or manually applied to each
machine. A second possibility for dealing with novel attacks
is a two-phase use of predators. In the ﬁrst phase, a non-
immunizing predator contains the spread of the new attack,
and in the second phase, an immunizing predator patches
all vulnerable systems.
A second choice is whether or not the predator has the
seeking property or not (i.e., whether or not it follows
the path of the virus). This choice is driven primarily by
whether or not the outgoing path of the virus/worm can be
determined, and if so, how much effort is required. While
a seeking predator enjoys a signiﬁcant performance advan-
tage over a non-seeking one, the extra implementation effort
may not be worthwhile, particularly for non-e-mail worms.
Additional choices include the setting of the predator pa-
rameters, namely the time-to-live and fanout. These involve
tradeoffs between performance overhead and effectiveness,
and are also driven by the properties of the virus.
The fanout value depends primarily on the type of attack.
For slowly propagating worms, a predator fanout equal to
twice the worm/virus fanout was shown to be effective (see
Figure 5), which is acceptable because the virus in used in
those experiments was spreading at a much lower rate, so
that the overall network trafﬁc (shown in Figure 7) remained
reasonably low. For rapidly propagating attacks, a predator
fanout in the range of 1/5 to 1/2 of the attack fanout ap-
pears to be effective (see Figure 10).
The time-to-live value depends on the type of predator.
For immunizing predators, the time-to-live is irrelevant; for
all non-immunizing predators, a large time-to-live is desir-
able, and ideally would be on the order of the time required
for the predator to reach every node on the network, but will
consume resources on each protected machine.
5. Related Work
Work related to ours falls into three essential areas:
Predator-based approaches. The earliest works which
suggest the use of predators are [20, 17]. [28] is the sem-
inal paper which suggests the use of models from mathe-
matical biology to predict the behavior of predators. Our
work extends theirs by extending the range of potential be-
haviors to patch management as well as virus removal, and
using discrete simulations to study predator behavior.
Patch management and distribution techniques. In reac-
tion to the escalating security situation, some operating sys-
tem vendors, such as [23] are attempting to automate the
distribution and application of security patches. The main
difference between these efforts and the predator approach
is that the current OS vendor approaches are largely cen-
tralized, which suffers from distribution bottlenecks that the
predator approach avoids. There has also been investigation
into the use of mobile agents to perform software updates,
such as [1]. The focus of these works has been the develop-
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
ment of infrastructure, rather than studying the likely effec-
tiveness, which is the main focus of our work.
Worm modeling techniques. There has been one early
[21] and several recent [29, 13, 15, 16] efforts to model
worm behavior. The main difference between these ap-
proaches and ours is that they focus on the spread of the
worm itself (typically modeling cleanup as a simple algo-
rithmic parameter), while this paper focuses on a speciﬁc
technique to combat the spread (i.e., predators). [31] em-
ployed simulations to explore the use of quarantines to stop
the spread of worms. [22] used a detailed simulation to
evaluate the effectiveness of worm detection algorithms. [3]
used simulations to compare the ability of various scale-free
network topologies to preserve critical functionality in the
presence of self-propagating attacks.
6. Discussion
While we are encouraged by our results, which we be-
lieve indicate that predators have the potential to be devel-
oped into a practical approach for combating worms and
viruses, there are a number of issues involving the use of
predators which warrant further discussion.
6.1. How the predator gains entry
One issue confronted by a person wishing to release a
predator onto a network is legality. If the predator exploits
the same vulnerability as the virus, as was originally sug-
gested, and not all users on the network have given con-
sent, then the release of the predator is a criminal act in
many countries. There are two solutions one can envision
to this problem. First, there may eventually be some sort
of legal authority which authorizes the release of preda-
tors, perhaps similar to today’s public health agencies which
have the power to quarantine infectious individuals Second,
a predator port infrastructure could support the entry of au-
thorized predators. The ﬁrst approach has the advantages
that no new infrastructure is required, and no new vulner-
abilities are created, with the drawback being the virus or
worm could potentially close the vulnerability after gain-
ing entry, preventing the predator from removing the virus
or patching the system. The second approach requires sig-
niﬁcant implementation effort, and must be done carefully
to prevent unauthorized access, but has the advantage that,
if implemented well, the malicious code will be unable to
close the predator port, and propagation of the predator will
be easier to control.
6.2. Techniques for secure patch distribution
Distributing code through predators poses security chal-
lenges similar to those faced when mobile code is down-
loaded over a network. In particular, if each system on the
network has an automated predator port enabled, then the
potential exists for an unauthorized predator to subvert ev-
ery system on the network. Hence, ensuring the integrity
and authenticity of predators is essential. Towards these
ends, the following techniques can be used:
Transit Integrity: To verify that the patch was not dam-
aged in transit, a cryptographic hash can be transmitted in
addition to the patch code. The hash value can be locally
veriﬁed to ensure that the patch was transmitted correctly.
Digital Certiﬁcates. Code-signing certiﬁcates can be
used to authenticate the predator.
Centralized authentication. Upon receiving a predator,
the system could query a known centralized server to check
the authenticity of the predator. The size of the authentica-
tion query would hopefully be much smaller than the size
of the patch, thereby avoiding bottleneck issues.
6.3. Some risks with patch management
Software patches implicitly contain vulnerability infor-
mation which may be abused to jeopardize the security of
a system. Malicious users can analyze patches and develop
exploits against unpatched systems. These risks can be mit-
igated by (a) rapidly distributing patches so that all systems
are patched within a small timeframe, and (b) encrypting
patches in ways which prevent reverse engineering.
Unfortunately, neither of these solutions appears to be
feasible at the moment. On the positive side, it should also
be noted that predators can be useful even in cases where
no patching is done by the predator, so that if the risks are
judged to be too high, a non-patching predator could be used
to contain a virus/worm outbreak until a patch could be dis-
tributed though some other distribution channels.
6.4. Simulation Issues
The main weakness of the results presented in this report
is that they are all based on simulation. Real systems often
display behaviors that are more complex and variable than
those exhibited in simulations. In order to truly assess the
effectiveness of the predator approach, it will be necessary
to evaluate it using realistic network trafﬁc.
A second difﬁculty in extrapolating the simulation re-
sults is that on real systems, network-based application traf-
ﬁc crosses organization boundaries frequently. For exam-
ple, an email virus may propagate from one user to any
other user on the Internet, and not just on the intranet of
the user’s organization. The effects of ﬁrewalls, routers and
network topology on predators have not been accounted for.
These issues need to be addressed in future research.
7. Conclusion
The results presented in this paper demonstrate that
predators have the potential to quickly clean-up networks
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
infected by self-propagating malicious code and also im-
munize networks from future attacks. Predators have a po-
tential for becoming a practical emergency patch distribu-
tion mechanism, when many machines need to be quickly
patched in the face new a worm or virus. Simulation tech-
niques could be used to tune the predator’s behavior prior
to release, so that worms are quickly eliminated while
the only minimum amount of necessary bandwidth is con-
sumed. Predators can potentially provide timely control on
the spread of self-propagating worms, thereby reducing the
monetary losses due to their unchecked spread.
References
[1] L. Bettini, R. D. Nicola, and M. Loreti. Software update
via mobile agent based programming. In Proceedings of the
2002 ACM symposium on Applied computing, pages 32–36.
ACM Press, 2002.
[2] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address obfusca-
tion: an efﬁcient approach to combat a broad range of mem-
ory error exploits. In USENIX Security Symposium, 2003.
[3] L. Briesemeister, P. lincoln, and P. Porras. Epidemic proﬁles
In ACM Workshop on
and defense of scale-free networks.
Rapid Malcode, 2003.
[4] Cert
advisory
ca-1999-04 melissa macro
virus.
http://www.cert.org/advisories/ca-1999-04.html.
[5] Cert advisory ca-2001-22 w32/sircam malicious code.
[6] Cert
http://www.cert.org/advisories/ca-2001-22.html.
nimda
http://www.cert.org/advisories/ca-2001-26.html.
ca-2001-26
advisory
worm.
[7] Cert
advisory
ca-2003-04 ms-sql
server worm.
http://www.cert.org/advisories/CA-2003-04.html.
[8] Cert
advisory
ca-2003-04
w32/mydoom.b
virus.
http://www.us-cert.gov/cas/techalerts/TA04-028A.html.
[9] Cert
advisory
ca-2003-20
w32/blaster
http://www.cert.org/advisories/CA-2003-20.html.
email-borne
http://www.cert.org/advisories/CA-2004-02.html.
ca-2004-04
advisory
[10] Cert
worm.
viruses.
[11] Cert.
service
buffer
http://www.cert.org/incident notes/in-2001-09.html.
ii: Another worm exploiting
in
dll.
code
overﬂow
indexing
red
iis
[12] Cert
incident
note
in-2003-03 w32/sobig.f worm.
http://www.cert.org/incident notes/IN-2003-03.html.
[13] Z. Chen, L. Gao, and K. Kwait. Modeling the spread of ac-
tive worms. In IEEE Infocom, 2003.
[14] S. Forrest, A. Somayaji, and D. H. Ackley. Building diverse
computer systems. In Workshop on Hot Topics in Operating
Systems, 1997.
[15] S. Gorman, R. Kulkarni, L. Schintler, and R. Stough. A
network based simulation approach to cybersecurity policy.
http://policy.gmu.edu/imp/research.html.
[16] S. P. Gorman, R. G. Kulkarni, L. A. Schintler, and R. R.
Stough. A predator prey approach to the network structure
of cyberspace.
In Proceedings of the winter international
synposium on Information and communication technologies,
pages 1–6. Trinity College Dublin, 2004.
[17] R. Grimes. Malicious Code. O’Reilly and Associates, 2001.
[18] A. Gupta and R. Sekar. An approach for detecting self-
propagating email using anomaly detection. In Recent Ad-
vances in Intrusion Detection, 2003.
[19] J. Jorgensen, P. Rossignol, M. Takikawa, and D. Upper. Cy-
ber ecology: Looking to ecology for insights into informa-
tion assurance. In DARPA Information Suvivability Confer-
ence and Exposition, 2001.
[20] A. Kara. On the use of intrusion technologies to distribute
non-malicious programs to vulnerable computers. Technical
report, University of Aizu, 2001.
[21] J. Kephart and S. White. Directed-graph epidemiological
models of computer viruses. In IEEE Computer Society Sym-
posium on Research in Security and Privacy, pages 343–359,
1991.
[22] M. Liljenstam, D. M. Nicol, V. H. Berk, and R. S. Gray. Sim-
ulating realistic network worm trafﬁc for worm warning sys-
tem design and testing.
In Proceedings of the 2003 ACM
workshop on Rapid Malcode, pages 24–33. ACM Press,
2003.
[23] Patch management,
security updates, and downloads.
http://www.microsoft.com/technet/default.mspx.
[24] R. Sekar, A. Gupta, J. Frullo, T. Shanbhag, A. Tiwari,
H. Yang, and S. Zhou. Speciﬁcation-based anomaly detec-
tion: a new approach for detecting network intrusions.
In
ACM Computer and Communication Security Conference,
2002.
[25] S. Sidiroglu and A. D. Keromytis. Countering network
worms through automatch patch generation. Technical Re-
port 029-03, Columbia University Department of Computer
Science, 2003.
[26] S. Staniford. Analysis of spread of july infestation of the
code red worm. http://www.silicondefense.com/cr/july.html.
[27] S. Staniford, V. Paxson, and N. Weaver. How to own the in-
In Usenix Security Symposium,
ternet in your spare time.
2002.
[28] H. Toyoizumi and A. Kara. Predators: Good will mobile
In New Security
codes combat against computer viruses.
Paradigms Workshop, 2002.
[29] Y. Wang and C. Wang. Modeling the effects of timing pa-
rameters on virus propagation. In ACM Workshop on Rapid
Malcode, 2003.
[30] N. Weaver, V. Paxson, S. Staniford, and R. Cunningham. A
taxonomy of computer worms. In ACM Workshop on Rapid
Malcode, 2003.
[31] C. Zou, L. Gao, W. Gong, and D. Towsley. Monitoring and
In ACM Computer and
early warning for internet worms.
Communication Security Conference, 2003.
[32] C. Zou, W. Gong, and D. Towsley. Code red worm propaga-
tion modeling and analysis. In ACM Computer and Commu-
nication Security Conference, 2002.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE