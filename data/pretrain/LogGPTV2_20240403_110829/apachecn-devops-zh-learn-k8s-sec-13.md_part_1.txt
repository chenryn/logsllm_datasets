# 十三、向 Kubernetes CVEs 学习
**常见漏洞和暴露** ( **CVEs** )是在流行应用中发现的已知安全漏洞和暴露的标识。CVE 标识由`CVE`字符串后跟年份和漏洞的标识号组成。CVE 数据库是公开的，由劳工部公司维护。CVE 条目包括每个问题的简要描述，这有助于理解问题的根本原因和严重性。这些条目不包括有关该问题的技术细节。CVE 对于 IT 专业人员协调和优先更新非常有用。每个 CVE 都有与之相关的严重程度。MITRE 使用一个**通用漏洞评分系统** ( **CVSS** )为 CVE 指定一个严重性等级。建议立即修补高严重性的心血管疾病。让我们看一个 CVE 条目在 cve.mitre.org 的例子。
正如您在下面的截图中看到的，CVE 条目包括 ID、简要描述、参考文献、 **CVE 编号机构** ( **CNA** )的名称以及条目创建的日期:
![Figure 13.1 – MITRE entry for CVE-2018-18264 ](img/B15566_13_001.jpg)
图 13.1-CVE 的 MITRE 条目-2018-18264
对于安全研究人员和攻击者来说，CVE 条目中最有趣的部分是**参考**部分。简历的参考资料是研究人员发表的博客的链接，包括问题的技术细节，以及问题描述和拉取请求的链接。安全研究人员研究参考资料，以了解漏洞，并为类似问题或尚未修复的已知问题开发缓解措施。另一方面，攻击者研究参考文献来发现问题的未修补变体。
在本章中，我们将讨论 Kubernetes 的四个公开的安全漏洞。首先，我们来看一个路径遍历问题——CVE-2019-11246。此问题允许攻击者在客户端修改内容，这可能会导致在群集管理员的机器上执行 exfilter 或代码。接下来，我们将讨论 CVE-2019-1002100，它允许用户对 API 服务器造成**拒绝服务** ( **DoS** )攻击。然后，我们将讨论 CVE-2019-11253，它允许未经身份验证的用户对`kube-apiserver`造成 DoS 攻击。最后，我们将讨论 CVE-2019-11247，它允许具有命名空间权限的用户修改集群范围的资源。我们将讨论每个 CVE 的缓解策略。升级到最新版本的 Kubernetes 和`kubectl`，修补漏洞，应该是你的首要任务。最新的稳定版 Kubernetes 可以在[https://github.com/kubernetes/kubernetes/releases](https://github.com/kubernetes/kubernetes/releases)找到。我们将讨论的缓解策略将有助于增强您的集群抵御类似性质的攻击。最后，我们将介绍`kube-hunter`，它可以用来扫描 Kubernetes 集群中已知的安全漏洞。
我们将在本章中讨论以下主题:
*   库比特 CP-CVE-2019-11246 中的路径遍历问题
*   JSON 解析中的拒绝服务问题——CVE-2019-1002100
*   YAML 句法分析中的拒绝服务问题——CVE-2019-11253
*   角色解析中的权限升级问题——CVE-2019-11247
*   使用 kube-hunter 扫描已知漏洞
# `kubectl`特尔 CP-CVE-2019-11246 中的路径遍历问题
开发人员经常将文件复制到 Pod 中的容器或从其中复制文件，以进行调试。`kubectl cp`允许开发人员将文件从 Pod 中的一个容器复制到另一个容器中(默认情况下，这是在 Pod 中的第一个容器中完成的)。
要将文件复制到 Pod，可以使用以下方法:
```
kubectl cp /tmp/test :/tmp/bar
```
要从 Pod 复制文件，可以使用以下方法:
```
kubectl cp :/tmp/foo /tmp/bar
```
当从 pod 复制文件时，Kubernetes 首先创建容器内文件的 TAR 存档。然后，它将 TAR 归档文件复制到客户端，最后为客户端解压缩 TAR 归档文件。2018 年，研究人员找到了一种使用`kubectl cp`覆盖客户端主机上文件的方法。如果攻击者能够访问 pod，此漏洞可用于通过用恶意的 TAR 二进制文件覆盖原始 TAR 二进制文件，用使用相对路径的特殊文件替换 TAR 归档文件。当格式错误的 TAR 文件复制到主机时，它可能会在提取时覆盖主机上的文件。这可能会导致数据泄露和主机上的代码执行。
让我们看一个例子，攻击者修改 TAR 归档文件，使其具有两个文件:`regular.txt`和`foo/../../../../bin/ps`。在该档案中，`regular.txt`是用户期望的文件，`ps`是恶意二进制文件。如果该档案被复制到`/home/user/admin`，恶意二进制文件会覆盖`bin`文件夹中众所周知的`ps`二进制文件。针对此问题的第一个修补程序不完整，攻击者找到了一种使用符号链接利用相同问题的方法。研究人员找到了一种绕过符号链接修复的方法，最终在版本 1.12.9、1.13.6 和 1.14.2 中得到解决，并被分配给 CVE-2019-112 46。
## 缓解策略
您可以使用以下策略来针对此问题和类似于 CVE-2019-11246 的尚未发现的问题强化您的集群:
*   **始终使用 kubectl 的更新版本**:使用以下命令可以找到最新版本的`kubectl`二进制文件:
    ```
    $ curl https://storage.googleapis.com/kubernetes-release/release/stable.txt
    v1.18.3
    ```
*   **Use admission controllers to limit the use of kubectl cp**: As we discussed in [*Chapter 7*](07.html#_idTextAnchor186), *Authentication, Authorization, and Admission Control*, Open Policy Agent can be used as an admission controller. Let's look at a policy that denies calls to `kubectl cp`:
    ```
    deny[reason] {
      input.request.kind.kind == "PodExecOptions"
      input.request.resource.resource == "pods"
      input.request.subResource == "exec"
      input.request.object.command[0] == "tar"
      reason = sprintf("kubectl cp was detected on %v/%v by user: %v", [
        input.request.namespace,
        input.request.object.container,
        input.request.userInfo.username])
    }
    ```
    该策略拒绝在 pod 中执行 TAR 二进制文件，从而禁用所有用户的`kubectl cp`。您可以更新此策略以允许特定用户或组使用`kubectl cp`。
*   **对客户端应用适当的访问控制**:如果你是生产集群的管理员，你的工作机器上有很多机密，攻击者可能想要访问。理想情况下，构建机器不应该是您的工作笔记本电脑。拥有管理员可以进入的专用硬件来访问 Kubernetes 集群是一个很好的实践。您还应该确保生成计算机上的任何敏感数据都有适当的访问控制。
*   **为所有 pods** 设置安全上下文:如第 8 章[](08.html#_idTextAnchor249)**中所述，保护 Kubernetes pods* ，确保 Pods 具有`readOnlyRootFilesystem`，这将防止文件被文件系统
    ```
    spec:
        securityContext:
            readOnlyRootFilesystem: true
    ```
    中的攻击者篡改(例如覆盖`/bin/tar binary`)*
**   **Use Falco rules to detect file modification**: We discussed Falco in [*Chapter 11*](11.html#_idTextAnchor324), *Defense in Depth*. Falco rules (which can be found at [https://github.com/falcosecurity/falco/blob/master/rules/falco_rules.yaml](https://github.com/falcosecurity/falco/blob/master/rules/falco_rules.yaml)) can be set up to do the following:
    **检测 pod 中二进制文件的修改**:使用默认的 Falco 规则中的`Write below monitored dir`检测 TAR 二进制文件的更改:
    ```
    - rule: Write below monitored dir
      desc: an attempt to write to any file below a set of binary directories
      condition: >
        evt.dir = 
        File below a monitored directory opened for writing (user=%user.name
        command=%proc.cmdline file=%fd.name parent=%proc.pname pcmdline=%proc.pcmdline gparent=%proc.aname[2] container_id=%container.id image=%container.image.repository)
      priority: ERROR
      tags: [filesystem, mitre_persistence]
    ```
    **检测到使用了易受攻击的 kubectl 实例**:`kubectl`1 . 12 . 9、1.13.6 和 1.14.2 版对此问题进行了修复。使用早于此的任何版本将触发以下规则:
    ```
    - macro: safe_kubectl_version
      condition: (jevt.value[/userAgent] startswith "kubectl/v1.15" or
                  jevt.value[/userAgent] startswith "kubectl/v1.14.3" or
                  jevt.value[/userAgent] startswith "kubectl/v1.14.2" or
                  jevt.value[/userAgent] startswith "kubectl/v1.13.7" or
                  jevt.value[/userAgent] startswith "kubectl/v1.13.6" or
                  jevt.value[/userAgent] startswith "kubectl/v1.12.9")
    # CVE-2019-1002101
    # Run kubectl version --client and if it does not say client version 1.12.9,
    1.13.6, or 1.14.2 or newer,  you are running a vulnerable version.
    - rule: K8s Vulnerable Kubectl Copy
      desc: Detect any attempt vulnerable kubectl copy in pod
      condition: kevt_started and pod_subresource and kcreate and
                 ka.target.subresource = "exec" and ka.uri.param[command] = "tar" and
                 not safe_kubectl_version
      output: Vulnerable kubectl copy detected (user=%ka.user.name pod=%ka.target.name ns=%ka.target.namespace action=%ka.target.subresource command=%ka.uri.param[command] userAgent=%jevt.value[/userAgent])
      priority: WARNING
      source: k8s_audit
      tags: [k8s]
    ```* 
 *CVE-2019-11246 是一个很好的例子，说明了为什么您需要跟踪安全咨询并通读技术细节，以向您的集群添加缓解策略，从而确保如果发现问题的任何变体，您的集群是安全的。接下来我们来看看 CVE-2019-1002100，可以用来在`kube-apiserver`上引起 DoS 问题。
# JSO 的拒绝服务问题 N 解析-CVE-2019-1002100
修补是一种常用的技术，用于在运行时更新 API 对象。开发人员使用`kubectl patch`在运行时更新 API 对象。一个简单的例子是给一个 Pod 添加一个容器:
```
spec:
  template:
    spec:
      containers:
      - name: db
        image: redis
```
前面的补丁文件允许一个 pod 被更新为一个新的 Redis 容器。`kubectl patch`允许补丁采用 JSON 格式。问题出在`kube-apiserver`的 JSON 解析代码中，这使得攻击者能够发送格式错误的`json-patch`实例，从而在 API 服务器中造成 DoS 攻击。在 [*第 10 章*](10.html#_idTextAnchor305)*实时监控和资源管理 Kubernetes 集群*中，我们讨论了 Kubernetes 集群内服务可用性的重要性。这个问题的根本原因是未检查的错误条件和对`patch`请求的`kube-apiserver`的无限内存分配。
## 缓解策略
您可以使用以下策略针对此问题和类似于 CVE-2019-100210 的尚未发现的问题强化您的集群: