Optimization of Common Table Expressions in MPP
Database Systems
Amr El-Helw∗, Venkatesh Raghavan∗, Mohamed A. Soliman∗, George Caragea∗,
Zhongxian Gu†, Michalis Petropoulos‡
∗PivotalInc. †DatometryInc. ‡AmazonWebServices
PaloAlto,CA,USA SanFrancisco,CA,USA PaloAlto,CA,USA
ABSTRACT
WITH v as (SELECT ibrand, icurrentprice, max(iunits) m
FROM item
Big Data analytics often include complex queries with similar or WHERE icolor = ’red’
identicalexpressions,usuallyreferredtoasCommonTableExpres- GROUP BY ibrand, icurrentprice)
sions(CTEs).CTEsmaybeexplicitlydefinedbyuserstosimplify SELECT * FROM v WHERE m  5);
businessintelligencetools,financialapplicationsanddecisionsup-
port systems. In Massively Parallel Processing (MPP) database
Example1includesaCTE(v),withfilteringandgroupingop-
systems,CTEsposenewchallengesduetothedistributednatureof
erations,wherevisreferencedtwiceinthemainquery. Thisisan
queryprocessing,theoverwhelmingvolumeofunderlyingdataand alternativetorepeatingthewholeexpressionthatdefinesv.1
thescalabilitycriteriathatsystemsarerequiredtomeet. Inthese
Inpractice,thedefinitionofvmaybemuchmorecomplex,con-
settings,theeffectiveoptimizationandefficientexecutionofCTEs
tainingjoins, subqueries, user-definedfunctions, etc. Inaddition,
arecrucialforthetimelyprocessingofanalyticalqueriesoverBig
itmaybereferencedmorethantwiceinthequery. Thus,defining
Data.Inthispaper,wepresentacomprehensiveframeworkforthe
itasaCTEachievestwogoals: (i)simplifyingthequery,making
representation,optimizationandexecutionofCTEsinthecontext
it more readable, and (ii) if handled carefully, performance gains
ofOrca–Pivotal’squeryoptimizerforBigData. Wedemonstrate
couldbeachievedbyevaluatingacomplexexpressiononlyonce.
experimentallythebenefitsofourtechniquesusingindustrystan-
CTEsfollowaproducer/consumermodel,wherethedataispro-
darddecisionsupportbenchmark.
duced by the CTE definition, and consumed in all the locations
where that CTE is referenced. One possible approach to execute
1. INTRODUCTION CTEsistoexpand(inline)allCTEconsumers,essentiallyrewrit-
BigDataanalyticsarebecomingincreasinglycommoninmany ingthequeryinternallytoreplaceeachreferencetotheCTEwith
business domains, including financial corporations, government thecompleteexpression.Thisapproachsimplifiesqueryexecution
agencies,andinsuranceproviders.TheusesofBigDatarangefrom logic, but may incur performance overhead due to executing the
generating simple reports to executing complex analytical work- same expression multiple times. In addition, query optimization
loads. The increase in the amount of data being stored and pro- timecouldincreaseiftheexpandedqueryiscomplex.
cessedinthesedomainsexposesmanychallengeswithrespectto An alternative approach is to execute CTEs in a true pro-
scalableprocessingofanalyticalqueries. MassivelyParallelPro- ducer/consumer fashion, where the CTE expression is separately
cessing (MPP) databases address these challenges by distributing optimizedandexecutedonlyonce,theresultsarekeptinmemory,
storageandqueryprocessingacrossmultiplenodesandprocesses. or written to disk if the data does not fit in memory or has to be
CommonTableExpressions(CTEs)arecommonlyusedincom- communicatedbetweendifferentprocesses–asisthecaseinMPP
plexanalyticalqueriesthatoftenhavemanyrepeatedcomputations. systems. The data is then read whenever the CTE is referenced.
A CTE can be seen as a temporary table that exists just for one This approach avoids the cost of repeated execution of the same
query. The purpose of CTEs is to avoid re-execution of expres- expression,althoughitmayincuranoverheadofdiskI/O.Theim-
sionsreferencedmorethanoncewithinaquery. CTEsmaybede- pactofthisapproachonqueryoptimizationtimeisratherlimited,
finedexplicitly,orgeneratedimplicitlybythequeryoptimizer(cf. sincetheoptimizerchoosesoneplantobesharedbyallCTEcon-
Section8). ThefollowingexampleillustratesausecaseofCTEs sumers. However, important optimization opportunities could be
definedexplicitlyusingtheSQLWITHclause: missedduetofixingoneexecutionplanforallconsumers.
1.1 Challenges
Example1. Considerthefollowingquery:
Inthissection,wehighlightthemainchallengeswetackle.
This work is licensed under the Creative Commons Attribution- 1.1.1 DeadlockHazard
NonCommercial-NoDerivs3.0UnportedLicense.Toviewacopyofthisli-
MPP systems leverage parallel query execution, where differ-
cense,visithttp://creativecommons.org/licenses/by-nc-nd/3.0/.Obtainper-
entpartsofthequeryplanexecutesimultaneouslyasseparatepro-
mission prior to any use beyond those covered by the license. Contact
copyright holder by emailing info@vldb.org. Articles from this volume cesses,possiblyrunningondifferentmachines.Dataflowsbetween
wereinvitedtopresenttheirresultsatthe41stInternationalConferenceon theseprocessesastheoperatorsintheplanareexecuted. Insome
VeryLargeDataBases,August31st-September4th2015,KohalaCoast,
Hawaii. 1vcouldbeusedinmultiplequeriesifdefinedusingCREATE VIEWstate-
ProceedingsoftheVLDBEndowment,Vol.8,No.12 ment. Inthiscase,thequeryparsercanautomaticallyincludevdefinition
Copyright2015VLDBEndowment2150-8097/15/08. intheparsetreeofanyquerythatreferencesv.
1704
9:'+&
!"#$%
6.& 9:'+& %&'(#
67& !"#"$%& &'(')*% !$# %&'(#
'($:#:*;& #+),--'$*+.-#)'%/%0111%
68& !"#
6& 234('&)3$5#*'67% !"#$% !# -+5+.1#
'4.:66+(14;6'.+#/?5+-./(0'1+23#
#+)"("-;<-'9=%
(a) Noinlining (b) InlineallCTEs (c) Partialinlining
Figure1:PossibleplansforthequeryinExample2
cases,aprocesshastowaituntilanotherprocessproducesthedata produced. Similarly,multipleconsumersmayrequireCTEresults
itneeds. Forexample,iftheCTEdefinitionisinoneprocessand tobepartitionedorsortedinthesameway. Consideringplanal-
theCTEconsumerisinadifferentprocess, thenthelatterhasto ternativesthatpushsuchrequirementsintotheCTEplancanlead
wait for the former. For complicated queries involving multiple toavoidingre-sorting/re-partitioningthesamedata. However,re-
CTEs, theoptimizerneedstoguaranteethatnotwoormorepro- optimizingaCTEeverytimeitisreferencedinthequerydoesnot
cessescouldbewaitingoneachotherduringqueryexecution.CTE scale, and causes the search space to grow exponentially. CTE
constructsneedtobecleanlyabstractedwithinthequeryoptimiza- optimization needs to be handled organically by the optimizer to
tionframeworktoguaranteedeadlock-freeplans. Wediscusshow considertheirinterplaywithotheroptimizationsandallowearly-
ourdesigngreatlysimplifiesdeadlockhandlinginSections4and5. pruningofinferiorplanalternatives. Weshowhowwetacklethis
challengeinSection7.
1.1.2 EnumeratingInliningAlternatives
1.2 Contributions
TheapproachesofalwaysinliningCTEs,orneverinliningCTEs,
canbeeasilyproventobesub-optimal,asweshowhere. Wepresentanovelapproachforrepresenting,optimizingandex-
ecutingquerieswithnon-recursiveCTEs. Ourapproachisimple-
Example2. GiventheitemtablefromTPC-DS[13], andas-
suming that we have an index on item.i color, consider the mentedinOrca,thePivotalQueryOptimizer[12],andiscurrently
followingquery: usedinproduction.Ourcontributionsaresummarizedasfollows:
WITH v as (SELECT ibrand, icolor FROM item • A novel framework for the optimization of CTEs in MPP
WHERE icurrentprice < 1000)
SELECT v1.* databasesystems. Ourframeworkextendsandbuildsupon
FROM v v1, v v2, v v3 our optimizer infrastructure to allow optimization of CTEs
WHERE v1.ibrand = v2.ibrand AND v2.ibrand = v3.ibrand withinthecontextwheretheyareusedinaquery
AND v3.icolor = ’red’;
• AnewtechniqueinwhichaCTEdoesnotgetre-optimized
Figure1(a)illustratestheplanproducedwhentheCTEisnever foreveryreferenceinthequery,butonlywhenthereareop-
inlined. In this scenario, the CTE is executed once, and its re- timization opportunities, e.g. pushing down filters or sort
sultsarereused3times. Thisapproachavoidsrepeatedcomputa- operations. Thisensuresthattheoptimizationtimedoesnot
tion. However,thisapproachdoesnottakeadvantageoftheindex growexponentiallywiththenumberofCTEconsumers
oni color. TheoppositeapproachisillustratedinFigure1(b),
wherealloccurrencesoftheCTEarereplacedbytheexpansionof • Acost-basedapproachfordecidingwhetherornottoexpand
theCTEexpression. Thisallowstheoptimizertoutilizetheindex CTEs in a given query. The cost model takes into account
oni colorinoneoftheinlinedexpressions. However,itsuffers diskI/OaswellthecostofrepeatedCTEexecution
fromtherepeatedcomputationoftheothertwoinlinedexpressions.
• Severaloptimizationsthatreducetheplansearchspaceand
Figure1(c)depictsapossibleplaninwhichoneoccurrenceofthe
speed up query execution, including pushing down predi-
CTE is expanded, allowing the use of the index, while the other
cates into CTEs, always inlining CTEs if referenced only
two occurrences are not inlined, to avoid recomputing the com-
once,andeliminatingCTEsthatareneverreferenced
mon expression. This plan would not be considered by adopting
the inlining/no-inlining approaches in isolation. The query opti- • AqueryexecutionmodelthatguaranteesthattheCTEpro-
mizerneedstoefficientlyenumerateandcostplanalternativesthat ducer is always executed before the CTE consumer(s). In
combinethebenefitsoftheseapproaches. Weshowhowourplan MPPsettings,thisiscrucialfordeadlock-freeexecution
enumerationapproachaddressesthischallengeinSection6.
WehavealsoconductedanexperimentalevaluationusingTPC-
1.1.3 ContextualizedOptimization
DSbenchmark[13]todemonstratetheefficiencyofourtechniques.
CTEs should not be optimized in isolation without taking into Therestofthepaperisorganizedasfollows:Section2reviewsre-
accountthecontextinwhichtheyoccur. Isolatedoptimizationcan lated work, and Section 3 provides the necessary background on
easilymissseveraloptimizationopportunities. Forexample,ifthe MPParchitectureandqueryoptimizationinOrca. Section4out-
queryhasfiltersonallCTEconsumers, thesefilterscanpossibly linesourproposedCTErepresentation,andSection5demonstrates
bepushedinsidetheCTEplantoreducethenumberoftuplestobe howthisrepresentationguaranteesdeadlock-freequeryexecution.
1705
Section6describesourplanenumerationtechnique.Section7dis- CTE framework (cf. Section 8.2). Second, as we show in Sec-
cussespropertyderivationandenforcementaswellascostingfor tion7,CTEscantakeadvantageofcontextualoptimization,where
theplanalternatives. Section8discusseshowCTEscanbeused CTE consumers’ local requirements may impose new plans onto
as an optimization tool for queries with no explicit CTEs. Sec- theCTEproducerside,e.g.,pushingpredicatesand/orsortorders
tion 9 describes how queries with CTEs are executed in an MPP fromtheconsumertotheproducer.Thisisnotapplicabletomateri-
system. Section 10 presents our experimental evaluation which alizedviewsbecausethecreationofthematerializedviewhappens
demonstratestheperformancegainofourapproach. Lastly, Sec- separatelyfromthequerythatmayutilizeit. Furthermore,unlike
tion11concludesthepaper. materializedviews,CTEsaredefinedaspartofthequeryandare
notstored. Hencetheproblemsofmaterializedviewmaintenance
anddesigndonotapply.
2. RELATEDWORK
The problem of optimizing common subexpressions has been
3. BACKGROUND
wellstudiedinthedomainofqueryprocessingandoptimization.
Wefocusontwoimportantareasthatarepertinenttoourproposal. Inthissection,weoutlinetwotopicsthatarekeytothiswork.In
Section3.1,wedescribetheunderlyingMPParchitecture,whilein
CTEOptimization. Silvaetal.[11]proposedanextensionto
Section3.2,wegiveanoverviewonOrcaqueryoptimizer.
the SCOPE query optimizer [15], where a 2-phase optimization
techniqueisusedtoaddressthecontextualizedoptimizationchal- 3.1 MassivelyParallelProcessing
lenge discussed in Section 1.1.3. The first phase uses the origi-
Modernscale-outdatabaseenginesareusuallybasedononeof
nal SCOPE optimizer with an additional step that records the re-
twodesignprinciples: sharded andmassivelyparallelprocessing
quiredphysicalproperties(e.g.datapartitioningandsorting)ofall
(MPP) databases. Both are shared-nothing architectures, where
CTEconsumersinlinkedlists.Then,asubsequentre-optimization
eachnodemanagesitsownstorageandmemory,andtheyaretyp-
phaseisusedtoidentifytheleastcommonancestorsofCTEcon-
ically based on horizontal partitioning. Common use cases for
sumers, and re-optimize CTE producers based on the CTE con-
sharding include “west” vs “east” customers, or partitioning user
sumers’localrequirements,withthegoalofidentifyingaglobally-
namesbasedonrangesofthealphabet. Shardedsystemsoptimize
optimalplan.
forexecutingqueriesonsmallsubsetsoftheshards,andcommu-
Incontrastto[11],ourproposalintegratesCTEoptimizationor-
nicationbetweenshardsisrelativelylimited. Shardscanbeplaced
ganicallyatthecoreofthequeryoptimizer,eliminatingtheneedfor
indifferentdatacenters,orevengeographies.
re-optimization(cf.Section7).Ourrepresentationframeworkalso
MPP databases optimize for parallel execution of each query.
allows identifying the optimization entry point of CTEs, without
Thenodesareusuallycollocatedwithinthesamedatacenter,and
theneedtosearchforleastcommonancestors.Finally,byconduct-
each query can access data across all the nodes. A query opti-
ingoptimizationinonephase,ourmethodlendsitselfnaturallyto
mizergeneratesanexecutionplanthatincludesexplicitdatamove-
pruningtheplanspaceearlyontoavoidunnecessaryoptimization.
mentdirectives,andthecostofmovingdataistakenintoaccount
PostgreSQL [1] views CTEs as a means to isolate a subquery
during optimization. A query executing in an MPP database can
within a complex query. The generated plan evaluates a CTE in