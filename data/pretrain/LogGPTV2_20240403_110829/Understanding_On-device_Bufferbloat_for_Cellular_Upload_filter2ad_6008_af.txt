### Time and Playback Bitrate Analysis

The results for time and playback bitrate are illustrated in Figures 22(b) and 22(c), respectively. Once again, QCUT significantly outperforms CoDel in enhancing the Quality of Experience (QoE) for video streaming, especially when concurrent bulk uploads are present.

### Effectiveness of QCUT

As discussed in §6.2, the effectiveness of QCUT can be attributed to two primary reasons:
1. **Reduction of Firmware Buffer Occupancy (TF):** QCUT reduces the occupancy of the firmware buffer. However, this alone is insufficient because delay-sensitive traffic can still be interfered with by upload traffic at the Queueing Discipline (Qdisc).
2. **Prioritization at Qdisc:** To address this, QCUT performs prioritization at the Qdisc level, thereby reducing the queuing time (TQ) for delay-sensitive traffic.

### Related Work

#### Measuring Cellular Performance
Several prior studies have focused on characterizing cellular performance across various aspects:
- **Sommers et al.** [40] used speedtest data to compare cellular versus Wi-Fi performance in metro areas.
- **Huang et al.** [20] examined LTE bandwidth utilization and its interaction with TCP.
- **Shaﬁq et al.** [38] conducted a study on cellular network performance during crowded events.
- **Liu et al.** [28] measured the performance of several TCP variants on 3G EvDO networks.
- **Rosen et al.** [35, 36] studied the impact of RRC state timers on network and application performance.
- **Jia et al.** [21] performed a systematic characterization and problem diagnosis of commercially deployed VoLTE (Voice over LTE).

None of these studies deeply examined the increasingly popular cellular upload traffic.

#### Improving Transport Protocols
Over the past three decades, numerous efforts have been made to improve TCP. Some notable congestion control algorithms include CUBIC [19], Vegas [12], Hybla [13], H-TCP [25], and Illinois [27]. Recent proposals such as TCP-RRE [26], Sprout [43], Verus [46], and TCP ex Machina [42] leverage throughput forecasts or machine learning to optimize data transmission. These approaches often face the challenge of balancing throughput and latency, which is crucial for selecting the appropriate Congestion Control (CC) based on application requirements. Other solutions like RSFC [44] and DRWA [22] use receive buffers to limit queuing impact. However, transport-layer solutions do not provide cross-flow control, potentially failing to fully eliminate interference between flows. In contrast, QCUT uses accurate throughput estimation based on firmware information and explicitly reduces on-device queuing in cellular networks.

#### Understanding Excessive Queuing Delay ("Bufferbloat")
The bufferbloat problem is well-known in both wired and wireless networks. Gettys et al. [18] presented an anecdotal study on large queuing delays in interactive traffic, focusing on concurrent bulk data transfers in cable and DSL networks. Allman [10] argued that while bufferbloat can occur, it is more prevalent in residential than non-residential networks and has a modest impact. However, Jiang et al. [22] showed that the issue is severe in cellular networks due to deep buffers. Xu et al. [45] found that some newer smartphones buffer packets in the kernel during continuous UDP packet transmission but did not study TCP or its impact on applications. Our work comprehensively measures and quantitatively understands:
- On-device bufferbloat caused by TCP upload traffic and its impact on applications.
- The interaction between upload and other traffic patterns.
- The interplay between TCP and lower-layer queues.
- The effectiveness of various mitigation strategies at different layers.

#### Mitigating Bufferbloat
In addition to the methods evaluated in §7, there are other proposals for reducing excessive queuing delay:
- **Dynamic Receive Window Adjustment (DRWA) [22]:** A receiver-side solution that reduces queuing delay by adjusting the TCP receive window. Originally designed for downlink traffic, it faces deployment challenges for uplink traffic.
- **Byte Queue Limits (BQL) [1]:** Puts a cap on the amount of data waiting in the device driver queue but does not apply to Qdisc, which contributes significantly to on-device latency. BQL also requires driver support.

### Concluding Remarks

To our knowledge, this is the first comprehensive investigation into cellular upload traffic and its interaction with concurrent traffic. Our extensive 33-month crowd-sourced measurement indicates that upload traffic is significant and fast enough to support user-generated content. We thoroughly investigated the on-device bufferbloat problem, identifying the large firmware buffer as a major source of performance impact. We propose QCUT, a general and lightweight solution that controls firmware buffer occupancy from the OS kernel. The effectiveness of QCUT is demonstrated through in-lab experiments and real-world deployment.

### Acknowledgements

We would like to thank our shepherd, Mark Allman, and the anonymous reviewers for their valuable comments and suggestions. We also thank Shichang Xu for his assistance in obtaining information from radio firmware. This research was supported in part by the National Science Foundation under grants CNS-1059372, CNS-1345226, CNS-1566331, and CNS-1629894.

### References

[References listed here, formatted as in the original text]

This optimized version aims to enhance clarity, coherence, and professionalism, making the text more accessible and informative.